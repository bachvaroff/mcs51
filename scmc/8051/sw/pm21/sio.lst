                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module sio
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _CY
                                     12 	.globl _AC
                                     13 	.globl _F0
                                     14 	.globl _RS1
                                     15 	.globl _RS0
                                     16 	.globl _OV
                                     17 	.globl _FL
                                     18 	.globl _P
                                     19 	.globl _TF2
                                     20 	.globl _EXF2
                                     21 	.globl _RCLK
                                     22 	.globl _TCLK
                                     23 	.globl _EXEN2
                                     24 	.globl _TR2
                                     25 	.globl _C_T2
                                     26 	.globl _CP_RL2
                                     27 	.globl _T2CON_7
                                     28 	.globl _T2CON_6
                                     29 	.globl _T2CON_5
                                     30 	.globl _T2CON_4
                                     31 	.globl _T2CON_3
                                     32 	.globl _T2CON_2
                                     33 	.globl _T2CON_1
                                     34 	.globl _T2CON_0
                                     35 	.globl _PT2
                                     36 	.globl _PS
                                     37 	.globl _PT1
                                     38 	.globl _PX1
                                     39 	.globl _PT0
                                     40 	.globl _PX0
                                     41 	.globl _RD
                                     42 	.globl _WR
                                     43 	.globl _T1
                                     44 	.globl _T0
                                     45 	.globl _INT1
                                     46 	.globl _INT0
                                     47 	.globl _TXD
                                     48 	.globl _RXD
                                     49 	.globl _P3_7
                                     50 	.globl _P3_6
                                     51 	.globl _P3_5
                                     52 	.globl _P3_4
                                     53 	.globl _P3_3
                                     54 	.globl _P3_2
                                     55 	.globl _P3_1
                                     56 	.globl _P3_0
                                     57 	.globl _EA
                                     58 	.globl _ET2
                                     59 	.globl _ES
                                     60 	.globl _ET1
                                     61 	.globl _EX1
                                     62 	.globl _ET0
                                     63 	.globl _EX0
                                     64 	.globl _P2_7
                                     65 	.globl _P2_6
                                     66 	.globl _P2_5
                                     67 	.globl _P2_4
                                     68 	.globl _P2_3
                                     69 	.globl _P2_2
                                     70 	.globl _P2_1
                                     71 	.globl _P2_0
                                     72 	.globl _SM0
                                     73 	.globl _SM1
                                     74 	.globl _SM2
                                     75 	.globl _REN
                                     76 	.globl _TB8
                                     77 	.globl _RB8
                                     78 	.globl _TI
                                     79 	.globl _RI
                                     80 	.globl _T2EX
                                     81 	.globl _T2
                                     82 	.globl _P1_7
                                     83 	.globl _P1_6
                                     84 	.globl _P1_5
                                     85 	.globl _P1_4
                                     86 	.globl _P1_3
                                     87 	.globl _P1_2
                                     88 	.globl _P1_1
                                     89 	.globl _P1_0
                                     90 	.globl _TF1
                                     91 	.globl _TR1
                                     92 	.globl _TF0
                                     93 	.globl _TR0
                                     94 	.globl _IE1
                                     95 	.globl _IT1
                                     96 	.globl _IE0
                                     97 	.globl _IT0
                                     98 	.globl _P0_7
                                     99 	.globl _P0_6
                                    100 	.globl _P0_5
                                    101 	.globl _P0_4
                                    102 	.globl _P0_3
                                    103 	.globl _P0_2
                                    104 	.globl _P0_1
                                    105 	.globl _P0_0
                                    106 	.globl _B
                                    107 	.globl _A
                                    108 	.globl _ACC
                                    109 	.globl _PSW
                                    110 	.globl _TH2
                                    111 	.globl _TL2
                                    112 	.globl _RCAP2H
                                    113 	.globl _RCAP2L
                                    114 	.globl _T2MOD
                                    115 	.globl _T2CON
                                    116 	.globl _IP
                                    117 	.globl _P3
                                    118 	.globl _IE
                                    119 	.globl _P2
                                    120 	.globl _SBUF
                                    121 	.globl _SCON
                                    122 	.globl _P1
                                    123 	.globl _TH1
                                    124 	.globl _TH0
                                    125 	.globl _TL1
                                    126 	.globl _TL0
                                    127 	.globl _TMOD
                                    128 	.globl _TCON
                                    129 	.globl _PCON
                                    130 	.globl _DPH
                                    131 	.globl _DPL
                                    132 	.globl _SP
                                    133 	.globl _P0
                                    134 	.globl _putchar
                                    135 	.globl _getchar
                                    136 	.globl _getchar_poll
                                    137 	.globl _printstr
                                    138 	.globl _print8bin
                                    139 	.globl _print16bin
                                    140 	.globl _print32bin
                                    141 	.globl _print8x
                                    142 	.globl _print16x
                                    143 	.globl _print32x
                                    144 ;--------------------------------------------------------
                                    145 ; special function registers
                                    146 ;--------------------------------------------------------
                                    147 	.area RSEG    (ABS,DATA)
      000000                        148 	.org 0x0000
                           000080   149 _P0	=	0x0080
                           000081   150 _SP	=	0x0081
                           000082   151 _DPL	=	0x0082
                           000083   152 _DPH	=	0x0083
                           000087   153 _PCON	=	0x0087
                           000088   154 _TCON	=	0x0088
                           000089   155 _TMOD	=	0x0089
                           00008A   156 _TL0	=	0x008a
                           00008B   157 _TL1	=	0x008b
                           00008C   158 _TH0	=	0x008c
                           00008D   159 _TH1	=	0x008d
                           000090   160 _P1	=	0x0090
                           000098   161 _SCON	=	0x0098
                           000099   162 _SBUF	=	0x0099
                           0000A0   163 _P2	=	0x00a0
                           0000A8   164 _IE	=	0x00a8
                           0000B0   165 _P3	=	0x00b0
                           0000B8   166 _IP	=	0x00b8
                           0000C8   167 _T2CON	=	0x00c8
                           0000C9   168 _T2MOD	=	0x00c9
                           0000CA   169 _RCAP2L	=	0x00ca
                           0000CB   170 _RCAP2H	=	0x00cb
                           0000CC   171 _TL2	=	0x00cc
                           0000CD   172 _TH2	=	0x00cd
                           0000D0   173 _PSW	=	0x00d0
                           0000E0   174 _ACC	=	0x00e0
                           0000E0   175 _A	=	0x00e0
                           0000F0   176 _B	=	0x00f0
                                    177 ;--------------------------------------------------------
                                    178 ; special function bits
                                    179 ;--------------------------------------------------------
                                    180 	.area RSEG    (ABS,DATA)
      000000                        181 	.org 0x0000
                           000080   182 _P0_0	=	0x0080
                           000081   183 _P0_1	=	0x0081
                           000082   184 _P0_2	=	0x0082
                           000083   185 _P0_3	=	0x0083
                           000084   186 _P0_4	=	0x0084
                           000085   187 _P0_5	=	0x0085
                           000086   188 _P0_6	=	0x0086
                           000087   189 _P0_7	=	0x0087
                           000088   190 _IT0	=	0x0088
                           000089   191 _IE0	=	0x0089
                           00008A   192 _IT1	=	0x008a
                           00008B   193 _IE1	=	0x008b
                           00008C   194 _TR0	=	0x008c
                           00008D   195 _TF0	=	0x008d
                           00008E   196 _TR1	=	0x008e
                           00008F   197 _TF1	=	0x008f
                           000090   198 _P1_0	=	0x0090
                           000091   199 _P1_1	=	0x0091
                           000092   200 _P1_2	=	0x0092
                           000093   201 _P1_3	=	0x0093
                           000094   202 _P1_4	=	0x0094
                           000095   203 _P1_5	=	0x0095
                           000096   204 _P1_6	=	0x0096
                           000097   205 _P1_7	=	0x0097
                           000090   206 _T2	=	0x0090
                           000091   207 _T2EX	=	0x0091
                           000098   208 _RI	=	0x0098
                           000099   209 _TI	=	0x0099
                           00009A   210 _RB8	=	0x009a
                           00009B   211 _TB8	=	0x009b
                           00009C   212 _REN	=	0x009c
                           00009D   213 _SM2	=	0x009d
                           00009E   214 _SM1	=	0x009e
                           00009F   215 _SM0	=	0x009f
                           0000A0   216 _P2_0	=	0x00a0
                           0000A1   217 _P2_1	=	0x00a1
                           0000A2   218 _P2_2	=	0x00a2
                           0000A3   219 _P2_3	=	0x00a3
                           0000A4   220 _P2_4	=	0x00a4
                           0000A5   221 _P2_5	=	0x00a5
                           0000A6   222 _P2_6	=	0x00a6
                           0000A7   223 _P2_7	=	0x00a7
                           0000A8   224 _EX0	=	0x00a8
                           0000A9   225 _ET0	=	0x00a9
                           0000AA   226 _EX1	=	0x00aa
                           0000AB   227 _ET1	=	0x00ab
                           0000AC   228 _ES	=	0x00ac
                           0000AD   229 _ET2	=	0x00ad
                           0000AF   230 _EA	=	0x00af
                           0000B0   231 _P3_0	=	0x00b0
                           0000B1   232 _P3_1	=	0x00b1
                           0000B2   233 _P3_2	=	0x00b2
                           0000B3   234 _P3_3	=	0x00b3
                           0000B4   235 _P3_4	=	0x00b4
                           0000B5   236 _P3_5	=	0x00b5
                           0000B6   237 _P3_6	=	0x00b6
                           0000B7   238 _P3_7	=	0x00b7
                           0000B0   239 _RXD	=	0x00b0
                           0000B1   240 _TXD	=	0x00b1
                           0000B2   241 _INT0	=	0x00b2
                           0000B3   242 _INT1	=	0x00b3
                           0000B4   243 _T0	=	0x00b4
                           0000B5   244 _T1	=	0x00b5
                           0000B6   245 _WR	=	0x00b6
                           0000B7   246 _RD	=	0x00b7
                           0000B8   247 _PX0	=	0x00b8
                           0000B9   248 _PT0	=	0x00b9
                           0000BA   249 _PX1	=	0x00ba
                           0000BB   250 _PT1	=	0x00bb
                           0000BC   251 _PS	=	0x00bc
                           0000BD   252 _PT2	=	0x00bd
                           0000C8   253 _T2CON_0	=	0x00c8
                           0000C9   254 _T2CON_1	=	0x00c9
                           0000CA   255 _T2CON_2	=	0x00ca
                           0000CB   256 _T2CON_3	=	0x00cb
                           0000CC   257 _T2CON_4	=	0x00cc
                           0000CD   258 _T2CON_5	=	0x00cd
                           0000CE   259 _T2CON_6	=	0x00ce
                           0000CF   260 _T2CON_7	=	0x00cf
                           0000C8   261 _CP_RL2	=	0x00c8
                           0000C9   262 _C_T2	=	0x00c9
                           0000CA   263 _TR2	=	0x00ca
                           0000CB   264 _EXEN2	=	0x00cb
                           0000CC   265 _TCLK	=	0x00cc
                           0000CD   266 _RCLK	=	0x00cd
                           0000CE   267 _EXF2	=	0x00ce
                           0000CF   268 _TF2	=	0x00cf
                           0000D0   269 _P	=	0x00d0
                           0000D1   270 _FL	=	0x00d1
                           0000D2   271 _OV	=	0x00d2
                           0000D3   272 _RS0	=	0x00d3
                           0000D4   273 _RS1	=	0x00d4
                           0000D5   274 _F0	=	0x00d5
                           0000D6   275 _AC	=	0x00d6
                           0000D7   276 _CY	=	0x00d7
                                    277 ;--------------------------------------------------------
                                    278 ; overlayable register banks
                                    279 ;--------------------------------------------------------
                                    280 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        281 	.ds 8
                                    282 ;--------------------------------------------------------
                                    283 ; internal ram data
                                    284 ;--------------------------------------------------------
                                    285 	.area DSEG    (DATA)
                                    286 ;--------------------------------------------------------
                                    287 ; overlayable items in internal ram 
                                    288 ;--------------------------------------------------------
                                    289 ;--------------------------------------------------------
                                    290 ; indirectly addressable internal ram data
                                    291 ;--------------------------------------------------------
                                    292 	.area ISEG    (DATA)
      000000                        293 _digits:
      000000                        294 	.ds 16
                                    295 ;--------------------------------------------------------
                                    296 ; absolute internal ram data
                                    297 ;--------------------------------------------------------
                                    298 	.area IABS    (ABS,DATA)
                                    299 	.area IABS    (ABS,DATA)
                                    300 ;--------------------------------------------------------
                                    301 ; bit data
                                    302 ;--------------------------------------------------------
                                    303 	.area BSEG    (BIT)
                                    304 ;--------------------------------------------------------
                                    305 ; paged external ram data
                                    306 ;--------------------------------------------------------
                                    307 	.area PSEG    (PAG,XDATA)
                                    308 ;--------------------------------------------------------
                                    309 ; external ram data
                                    310 ;--------------------------------------------------------
                                    311 	.area XSEG    (XDATA)
                                    312 ;--------------------------------------------------------
                                    313 ; absolute external ram data
                                    314 ;--------------------------------------------------------
                                    315 	.area XABS    (ABS,XDATA)
                                    316 ;--------------------------------------------------------
                                    317 ; external initialized ram data
                                    318 ;--------------------------------------------------------
                                    319 	.area XISEG   (XDATA)
                                    320 	.area HOME    (CODE)
                                    321 	.area GSINIT0 (CODE)
                                    322 	.area GSINIT1 (CODE)
                                    323 	.area GSINIT2 (CODE)
                                    324 	.area GSINIT3 (CODE)
                                    325 	.area GSINIT4 (CODE)
                                    326 	.area GSINIT5 (CODE)
                                    327 	.area GSINIT  (CODE)
                                    328 	.area GSFINAL (CODE)
                                    329 	.area CSEG    (CODE)
                                    330 ;--------------------------------------------------------
                                    331 ; global & static initialisations
                                    332 ;--------------------------------------------------------
                                    333 	.area HOME    (CODE)
                                    334 	.area GSINIT  (CODE)
                                    335 	.area GSFINAL (CODE)
                                    336 	.area GSINIT  (CODE)
                                    337 ;	sio.c:5: __idata static const char digits[16] = {
      000000 78r00            [12]  338 	mov	r0,#_digits
      000002 76 30            [12]  339 	mov	@r0,#0x30
      000004 78r01            [12]  340 	mov	r0,#(_digits + 0x0001)
      000006 76 31            [12]  341 	mov	@r0,#0x31
      000008 78r02            [12]  342 	mov	r0,#(_digits + 0x0002)
      00000A 76 32            [12]  343 	mov	@r0,#0x32
      00000C 78r03            [12]  344 	mov	r0,#(_digits + 0x0003)
      00000E 76 33            [12]  345 	mov	@r0,#0x33
      000010 78r04            [12]  346 	mov	r0,#(_digits + 0x0004)
      000012 76 34            [12]  347 	mov	@r0,#0x34
      000014 78r05            [12]  348 	mov	r0,#(_digits + 0x0005)
      000016 76 35            [12]  349 	mov	@r0,#0x35
      000018 78r06            [12]  350 	mov	r0,#(_digits + 0x0006)
      00001A 76 36            [12]  351 	mov	@r0,#0x36
      00001C 78r07            [12]  352 	mov	r0,#(_digits + 0x0007)
      00001E 76 37            [12]  353 	mov	@r0,#0x37
      000020 78r08            [12]  354 	mov	r0,#(_digits + 0x0008)
      000022 76 38            [12]  355 	mov	@r0,#0x38
      000024 78r09            [12]  356 	mov	r0,#(_digits + 0x0009)
      000026 76 39            [12]  357 	mov	@r0,#0x39
      000028 78r0A            [12]  358 	mov	r0,#(_digits + 0x000a)
      00002A 76 41            [12]  359 	mov	@r0,#0x41
      00002C 78r0B            [12]  360 	mov	r0,#(_digits + 0x000b)
      00002E 76 42            [12]  361 	mov	@r0,#0x42
      000030 78r0C            [12]  362 	mov	r0,#(_digits + 0x000c)
      000032 76 43            [12]  363 	mov	@r0,#0x43
      000034 78r0D            [12]  364 	mov	r0,#(_digits + 0x000d)
      000036 76 44            [12]  365 	mov	@r0,#0x44
      000038 78r0E            [12]  366 	mov	r0,#(_digits + 0x000e)
      00003A 76 45            [12]  367 	mov	@r0,#0x45
      00003C 78r0F            [12]  368 	mov	r0,#(_digits + 0x000f)
      00003E 76 46            [12]  369 	mov	@r0,#0x46
                                    370 ;--------------------------------------------------------
                                    371 ; Home
                                    372 ;--------------------------------------------------------
                                    373 	.area HOME    (CODE)
                                    374 	.area HOME    (CODE)
                                    375 ;--------------------------------------------------------
                                    376 ; code
                                    377 ;--------------------------------------------------------
                                    378 	.area CSEG    (CODE)
                                    379 ;------------------------------------------------------------
                                    380 ;Allocation info for local variables in function 'putchar'
                                    381 ;------------------------------------------------------------
                                    382 ;c                         Allocated to registers 
                                    383 ;------------------------------------------------------------
                                    384 ;	sio.c:10: int putchar(int c) __naked {
                                    385 ;	-----------------------------------------
                                    386 ;	 function putchar
                                    387 ;	-----------------------------------------
      000000                        388 _putchar:
                                    389 ;	naked function: no prologue.
                                    390 ;	sio.c:18: __endasm;
      000000 C0 E0            [24]  391 	push	acc
      000002 E5 82            [12]  392 	mov	a, dpl
      000004 12 00 3C         [24]  393 	lcall	0x003c
      000007 D0 E0            [24]  394 	pop	acc
      000009 22               [24]  395 	ret
                                    396 ;	sio.c:19: }
                                    397 ;	naked function: no epilogue.
                                    398 ;------------------------------------------------------------
                                    399 ;Allocation info for local variables in function 'getchar'
                                    400 ;------------------------------------------------------------
                                    401 ;	sio.c:21: int getchar(void) __naked {
                                    402 ;	-----------------------------------------
                                    403 ;	 function getchar
                                    404 ;	-----------------------------------------
      00000A                        405 _getchar:
                                    406 ;	naked function: no prologue.
                                    407 ;	sio.c:29: __endasm;
      00000A C0 E0            [24]  408 	push	acc
      00000C 12 00 36         [24]  409 	lcall	0x0036
      00000F F5 82            [12]  410 	mov	dpl, a
      000011 75 83 00         [24]  411 	mov	dph, #0
      000014 D0 E0            [24]  412 	pop	acc
      000016 22               [24]  413 	ret
                                    414 ;	sio.c:30: }
                                    415 ;	naked function: no epilogue.
                                    416 ;------------------------------------------------------------
                                    417 ;Allocation info for local variables in function 'getchar_poll'
                                    418 ;------------------------------------------------------------
                                    419 ;	sio.c:32: int getchar_poll(void) __naked {
                                    420 ;	-----------------------------------------
                                    421 ;	 function getchar_poll
                                    422 ;	-----------------------------------------
      000017                        423 _getchar_poll:
                                    424 ;	naked function: no prologue.
                                    425 ;	sio.c:47: __endasm;
      000017 C0 E0            [24]  426 	push	acc
      000019 C0 F0            [24]  427 	push	b
      00001B 74 FF            [12]  428 	mov	a, #0xff
      00001D F5 F0            [12]  429 	mov	b, a
      00001F 12 00 39         [24]  430 	lcall	0x0039
      000022 40 03            [24]  431 	jc	nochar
      000024 75 F0 00         [24]  432 	mov	b, #0x00
      000027                        433 	nochar:
      000027 F5 82            [12]  434 	mov	dpl, a
      000029 85 F0 83         [24]  435 	mov	dph, b
      00002C D0 F0            [24]  436 	pop	b
      00002E D0 E0            [24]  437 	pop	acc
      000030 22               [24]  438 	ret
                                    439 ;	sio.c:48: }
                                    440 ;	naked function: no epilogue.
                                    441 ;------------------------------------------------------------
                                    442 ;Allocation info for local variables in function 'printstr'
                                    443 ;------------------------------------------------------------
                                    444 ;s                         Allocated to registers 
                                    445 ;------------------------------------------------------------
                                    446 ;	sio.c:50: void printstr(const char *s) {
                                    447 ;	-----------------------------------------
                                    448 ;	 function printstr
                                    449 ;	-----------------------------------------
      000031                        450 _printstr:
                           000007   451 	ar7 = 0x07
                           000006   452 	ar6 = 0x06
                           000005   453 	ar5 = 0x05
                           000004   454 	ar4 = 0x04
                           000003   455 	ar3 = 0x03
                           000002   456 	ar2 = 0x02
                           000001   457 	ar1 = 0x01
                           000000   458 	ar0 = 0x00
      000031 AD 82            [24]  459 	mov	r5,dpl
      000033 AE 83            [24]  460 	mov	r6,dph
      000035 AF F0            [24]  461 	mov	r7,b
                                    462 ;	sio.c:53: return;
      000037                        463 00103$:
                                    464 ;	sio.c:51: for (; *s; s++) putchar((int)*s);
      000037 8D 82            [24]  465 	mov	dpl,r5
      000039 8E 83            [24]  466 	mov	dph,r6
      00003B 8F F0            [24]  467 	mov	b,r7
      00003D 12r00r00         [24]  468 	lcall	__gptrget
      000040 FC               [12]  469 	mov	r4,a
      000041 60 10            [24]  470 	jz	00101$
      000043 7B 00            [12]  471 	mov	r3,#0x00
      000045 8C 82            [24]  472 	mov	dpl,r4
      000047 8B 83            [24]  473 	mov	dph,r3
      000049 12r00r00         [24]  474 	lcall	_putchar
      00004C 0D               [12]  475 	inc	r5
      00004D BD 00 E7         [24]  476 	cjne	r5,#0x00,00103$
      000050 0E               [12]  477 	inc	r6
      000051 80 E4            [24]  478 	sjmp	00103$
      000053                        479 00101$:
                                    480 ;	sio.c:53: return;
                                    481 ;	sio.c:54: }
      000053 22               [24]  482 	ret
                                    483 ;------------------------------------------------------------
                                    484 ;Allocation info for local variables in function 'print8bin'
                                    485 ;------------------------------------------------------------
                                    486 ;d                         Allocated to registers r7 
                                    487 ;mask                      Allocated to registers r6 
                                    488 ;------------------------------------------------------------
                                    489 ;	sio.c:56: void print8bin(unsigned char d) {
                                    490 ;	-----------------------------------------
                                    491 ;	 function print8bin
                                    492 ;	-----------------------------------------
      000054                        493 _print8bin:
      000054 AF 82            [24]  494 	mov	r7,dpl
                                    495 ;	sio.c:59: for (mask = 0x80u; mask; mask >>= 1)
      000056 7E 80            [12]  496 	mov	r6,#0x80
      000058                        497 00102$:
                                    498 ;	sio.c:60: (void)putchar((d & mask) ? (int)'1' : (int)'0');
      000058 EE               [12]  499 	mov	a,r6
      000059 5F               [12]  500 	anl	a,r7
      00005A 60 06            [24]  501 	jz	00106$
      00005C 7C 31            [12]  502 	mov	r4,#0x31
      00005E 7D 00            [12]  503 	mov	r5,#0x00
      000060 80 04            [24]  504 	sjmp	00107$
      000062                        505 00106$:
      000062 7C 30            [12]  506 	mov	r4,#0x30
      000064 7D 00            [12]  507 	mov	r5,#0x00
      000066                        508 00107$:
      000066 8C 82            [24]  509 	mov	dpl,r4
      000068 8D 83            [24]  510 	mov	dph,r5
      00006A 12r00r00         [24]  511 	lcall	_putchar
                                    512 ;	sio.c:59: for (mask = 0x80u; mask; mask >>= 1)
      00006D EE               [12]  513 	mov	a,r6
      00006E C3               [12]  514 	clr	c
      00006F 13               [12]  515 	rrc	a
      000070 FE               [12]  516 	mov	r6,a
      000071 70 E5            [24]  517 	jnz	00102$
                                    518 ;	sio.c:62: return;
                                    519 ;	sio.c:63: }
      000073 22               [24]  520 	ret
                                    521 ;------------------------------------------------------------
                                    522 ;Allocation info for local variables in function 'print16bin'
                                    523 ;------------------------------------------------------------
                                    524 ;d                         Allocated to registers r6 r7 
                                    525 ;mask                      Allocated to registers r4 r5 
                                    526 ;------------------------------------------------------------
                                    527 ;	sio.c:65: void print16bin(unsigned int d) {
                                    528 ;	-----------------------------------------
                                    529 ;	 function print16bin
                                    530 ;	-----------------------------------------
      000074                        531 _print16bin:
      000074 AE 82            [24]  532 	mov	r6,dpl
      000076 AF 83            [24]  533 	mov	r7,dph
                                    534 ;	sio.c:68: for (mask = 0x8000u; mask; mask >>= 1)
      000078 7C 00            [12]  535 	mov	r4,#0x00
      00007A 7D 80            [12]  536 	mov	r5,#0x80
      00007C                        537 00102$:
                                    538 ;	sio.c:69: (void)putchar((d & mask) ? (int)'1' : (int)'0');
      00007C EC               [12]  539 	mov	a,r4
      00007D 5E               [12]  540 	anl	a,r6
      00007E FA               [12]  541 	mov	r2,a
      00007F ED               [12]  542 	mov	a,r5
      000080 5F               [12]  543 	anl	a,r7
      000081 4A               [12]  544 	orl	a,r2
      000082 60 06            [24]  545 	jz	00106$
      000084 7A 31            [12]  546 	mov	r2,#0x31
      000086 7B 00            [12]  547 	mov	r3,#0x00
      000088 80 04            [24]  548 	sjmp	00107$
      00008A                        549 00106$:
      00008A 7A 30            [12]  550 	mov	r2,#0x30
      00008C 7B 00            [12]  551 	mov	r3,#0x00
      00008E                        552 00107$:
      00008E 8A 82            [24]  553 	mov	dpl,r2
      000090 8B 83            [24]  554 	mov	dph,r3
      000092 12r00r00         [24]  555 	lcall	_putchar
                                    556 ;	sio.c:68: for (mask = 0x8000u; mask; mask >>= 1)
      000095 ED               [12]  557 	mov	a,r5
      000096 C3               [12]  558 	clr	c
      000097 13               [12]  559 	rrc	a
      000098 CC               [12]  560 	xch	a,r4
      000099 13               [12]  561 	rrc	a
      00009A CC               [12]  562 	xch	a,r4
      00009B FD               [12]  563 	mov	r5,a
      00009C 4C               [12]  564 	orl	a,r4
      00009D 70 DD            [24]  565 	jnz	00102$
                                    566 ;	sio.c:71: return;
                                    567 ;	sio.c:72: }
      00009F 22               [24]  568 	ret
                                    569 ;------------------------------------------------------------
                                    570 ;Allocation info for local variables in function 'print32bin'
                                    571 ;------------------------------------------------------------
                                    572 ;d                         Allocated to stack - _bp +1
                                    573 ;mask                      Allocated to stack - _bp +5
                                    574 ;------------------------------------------------------------
                                    575 ;	sio.c:74: void print32bin(unsigned long d) {
                                    576 ;	-----------------------------------------
                                    577 ;	 function print32bin
                                    578 ;	-----------------------------------------
      0000A0                        579 _print32bin:
      0000A0 C0*00            [24]  580 	push	_bp
      0000A2 85 81*00         [24]  581 	mov	_bp,sp
      0000A5 C0 82            [24]  582 	push	dpl
      0000A7 C0 83            [24]  583 	push	dph
      0000A9 C0 F0            [24]  584 	push	b
      0000AB C0 E0            [24]  585 	push	acc
      0000AD E5 81            [12]  586 	mov	a,sp
      0000AF 24 04            [12]  587 	add	a,#0x04
      0000B1 F5 81            [12]  588 	mov	sp,a
                                    589 ;	sio.c:77: for (mask = 0x80000000lu; mask; mask >>= 1)
      0000B3 E5*00            [12]  590 	mov	a,_bp
      0000B5 24 05            [12]  591 	add	a,#0x05
      0000B7 F8               [12]  592 	mov	r0,a
      0000B8 E4               [12]  593 	clr	a
      0000B9 F6               [12]  594 	mov	@r0,a
      0000BA 08               [12]  595 	inc	r0
      0000BB F6               [12]  596 	mov	@r0,a
      0000BC 08               [12]  597 	inc	r0
      0000BD F6               [12]  598 	mov	@r0,a
      0000BE 08               [12]  599 	inc	r0
      0000BF 76 80            [12]  600 	mov	@r0,#0x80
      0000C1                        601 00102$:
                                    602 ;	sio.c:78: (void)putchar((d & mask) ? (int)'1' : (int)'0');
      0000C1 A8*00            [24]  603 	mov	r0,_bp
      0000C3 08               [12]  604 	inc	r0
      0000C4 E5*00            [12]  605 	mov	a,_bp
      0000C6 24 05            [12]  606 	add	a,#0x05
      0000C8 F9               [12]  607 	mov	r1,a
      0000C9 E7               [12]  608 	mov	a,@r1
      0000CA 56               [12]  609 	anl	a,@r0
      0000CB FC               [12]  610 	mov	r4,a
      0000CC 09               [12]  611 	inc	r1
      0000CD E7               [12]  612 	mov	a,@r1
      0000CE 08               [12]  613 	inc	r0
      0000CF 56               [12]  614 	anl	a,@r0
      0000D0 FD               [12]  615 	mov	r5,a
      0000D1 09               [12]  616 	inc	r1
      0000D2 E7               [12]  617 	mov	a,@r1
      0000D3 08               [12]  618 	inc	r0
      0000D4 56               [12]  619 	anl	a,@r0
      0000D5 FE               [12]  620 	mov	r6,a
      0000D6 09               [12]  621 	inc	r1
      0000D7 E7               [12]  622 	mov	a,@r1
      0000D8 08               [12]  623 	inc	r0
      0000D9 56               [12]  624 	anl	a,@r0
      0000DA FF               [12]  625 	mov	r7,a
      0000DB EC               [12]  626 	mov	a,r4
      0000DC 4D               [12]  627 	orl	a,r5
      0000DD 4E               [12]  628 	orl	a,r6
      0000DE 4F               [12]  629 	orl	a,r7
      0000DF 60 06            [24]  630 	jz	00106$
      0000E1 7E 31            [12]  631 	mov	r6,#0x31
      0000E3 7F 00            [12]  632 	mov	r7,#0x00
      0000E5 80 04            [24]  633 	sjmp	00107$
      0000E7                        634 00106$:
      0000E7 7E 30            [12]  635 	mov	r6,#0x30
      0000E9 7F 00            [12]  636 	mov	r7,#0x00
      0000EB                        637 00107$:
      0000EB 8E 82            [24]  638 	mov	dpl,r6
      0000ED 8F 83            [24]  639 	mov	dph,r7
      0000EF 12r00r00         [24]  640 	lcall	_putchar
                                    641 ;	sio.c:77: for (mask = 0x80000000lu; mask; mask >>= 1)
      0000F2 E5*00            [12]  642 	mov	a,_bp
      0000F4 24 05            [12]  643 	add	a,#0x05
      0000F6 F8               [12]  644 	mov	r0,a
      0000F7 08               [12]  645 	inc	r0
      0000F8 08               [12]  646 	inc	r0
      0000F9 08               [12]  647 	inc	r0
      0000FA E6               [12]  648 	mov	a,@r0
      0000FB C3               [12]  649 	clr	c
      0000FC 13               [12]  650 	rrc	a
      0000FD F6               [12]  651 	mov	@r0,a
      0000FE 18               [12]  652 	dec	r0
      0000FF E6               [12]  653 	mov	a,@r0
      000100 13               [12]  654 	rrc	a
      000101 F6               [12]  655 	mov	@r0,a
      000102 18               [12]  656 	dec	r0
      000103 E6               [12]  657 	mov	a,@r0
      000104 13               [12]  658 	rrc	a
      000105 F6               [12]  659 	mov	@r0,a
      000106 18               [12]  660 	dec	r0
      000107 E6               [12]  661 	mov	a,@r0
      000108 13               [12]  662 	rrc	a
      000109 F6               [12]  663 	mov	@r0,a
      00010A E5*00            [12]  664 	mov	a,_bp
      00010C 24 05            [12]  665 	add	a,#0x05
      00010E F8               [12]  666 	mov	r0,a
      00010F E6               [12]  667 	mov	a,@r0
      000110 08               [12]  668 	inc	r0
      000111 46               [12]  669 	orl	a,@r0
      000112 08               [12]  670 	inc	r0
      000113 46               [12]  671 	orl	a,@r0
      000114 08               [12]  672 	inc	r0
      000115 46               [12]  673 	orl	a,@r0
      000116 70 A9            [24]  674 	jnz	00102$
                                    675 ;	sio.c:80: return;
                                    676 ;	sio.c:81: }
      000118 85*00 81         [24]  677 	mov	sp,_bp
      00011B D0*00            [24]  678 	pop	_bp
      00011D 22               [24]  679 	ret
                                    680 ;------------------------------------------------------------
                                    681 ;Allocation info for local variables in function 'print8x'
                                    682 ;------------------------------------------------------------
                                    683 ;d                         Allocated to registers r7 
                                    684 ;------------------------------------------------------------
                                    685 ;	sio.c:83: void print8x(unsigned char d) {
                                    686 ;	-----------------------------------------
                                    687 ;	 function print8x
                                    688 ;	-----------------------------------------
      00011E                        689 _print8x:
                                    690 ;	sio.c:84: putchar(digits[(d >> 4) & 0xf]);
      00011E E5 82            [12]  691 	mov	a,dpl
      000120 FF               [12]  692 	mov	r7,a
      000121 C4               [12]  693 	swap	a
      000122 54 0F            [12]  694 	anl	a,#0x0f
      000124 FE               [12]  695 	mov	r6,a
      000125 53 06 0F         [24]  696 	anl	ar6,#0x0f
      000128 EE               [12]  697 	mov	a,r6
      000129 24r00            [12]  698 	add	a,#_digits
      00012B F9               [12]  699 	mov	r1,a
      00012C 87 06            [24]  700 	mov	ar6,@r1
      00012E 7D 00            [12]  701 	mov	r5,#0x00
      000130 8E 82            [24]  702 	mov	dpl,r6
      000132 8D 83            [24]  703 	mov	dph,r5
      000134 12r00r00         [24]  704 	lcall	_putchar
                                    705 ;	sio.c:85: putchar(digits[d & 0xf]);
      000137 53 07 0F         [24]  706 	anl	ar7,#0x0f
      00013A EF               [12]  707 	mov	a,r7
      00013B 24r00            [12]  708 	add	a,#_digits
      00013D F9               [12]  709 	mov	r1,a
      00013E 87 07            [24]  710 	mov	ar7,@r1
      000140 7E 00            [12]  711 	mov	r6,#0x00
      000142 8F 82            [24]  712 	mov	dpl,r7
      000144 8E 83            [24]  713 	mov	dph,r6
                                    714 ;	sio.c:87: return;
                                    715 ;	sio.c:88: }
      000146 02r00r00         [24]  716 	ljmp	_putchar
                                    717 ;------------------------------------------------------------
                                    718 ;Allocation info for local variables in function 'print16x'
                                    719 ;------------------------------------------------------------
                                    720 ;d                         Allocated to registers r6 r7 
                                    721 ;------------------------------------------------------------
                                    722 ;	sio.c:90: void print16x(unsigned int d) {
                                    723 ;	-----------------------------------------
                                    724 ;	 function print16x
                                    725 ;	-----------------------------------------
      000149                        726 _print16x:
      000149 AE 82            [24]  727 	mov	r6,dpl
                                    728 ;	sio.c:91: putchar(digits[(d >> 12) & 0xf]);
      00014B E5 83            [12]  729 	mov	a,dph
      00014D FF               [12]  730 	mov	r7,a
      00014E C4               [12]  731 	swap	a
      00014F 54 0F            [12]  732 	anl	a,#0x0f
      000151 FC               [12]  733 	mov	r4,a
      000152 53 04 0F         [24]  734 	anl	ar4,#0x0f
      000155 EC               [12]  735 	mov	a,r4
      000156 24r00            [12]  736 	add	a,#_digits
      000158 F9               [12]  737 	mov	r1,a
      000159 87 05            [24]  738 	mov	ar5,@r1
      00015B 7C 00            [12]  739 	mov	r4,#0x00
      00015D 8D 82            [24]  740 	mov	dpl,r5
      00015F 8C 83            [24]  741 	mov	dph,r4
      000161 12r00r00         [24]  742 	lcall	_putchar
                                    743 ;	sio.c:92: putchar(digits[(d >> 8) & 0xf]);
      000164 8F 05            [24]  744 	mov	ar5,r7
      000166 53 05 0F         [24]  745 	anl	ar5,#0x0f
      000169 ED               [12]  746 	mov	a,r5
      00016A 24r00            [12]  747 	add	a,#_digits
      00016C F9               [12]  748 	mov	r1,a
      00016D 87 05            [24]  749 	mov	ar5,@r1
      00016F 7C 00            [12]  750 	mov	r4,#0x00
      000171 8D 82            [24]  751 	mov	dpl,r5
      000173 8C 83            [24]  752 	mov	dph,r4
      000175 12r00r00         [24]  753 	lcall	_putchar
                                    754 ;	sio.c:93: putchar(digits[(d >> 4) & 0xf]);
      000178 8E 04            [24]  755 	mov	ar4,r6
      00017A EF               [12]  756 	mov	a,r7
      00017B C4               [12]  757 	swap	a
      00017C CC               [12]  758 	xch	a,r4
      00017D C4               [12]  759 	swap	a
      00017E 54 0F            [12]  760 	anl	a,#0x0f
      000180 6C               [12]  761 	xrl	a,r4
      000181 CC               [12]  762 	xch	a,r4
      000182 54 0F            [12]  763 	anl	a,#0x0f
      000184 CC               [12]  764 	xch	a,r4
      000185 6C               [12]  765 	xrl	a,r4
      000186 CC               [12]  766 	xch	a,r4
      000187 53 04 0F         [24]  767 	anl	ar4,#0x0f
      00018A EC               [12]  768 	mov	a,r4
      00018B 24r00            [12]  769 	add	a,#_digits
      00018D F9               [12]  770 	mov	r1,a
      00018E 87 05            [24]  771 	mov	ar5,@r1
      000190 7C 00            [12]  772 	mov	r4,#0x00
      000192 8D 82            [24]  773 	mov	dpl,r5
      000194 8C 83            [24]  774 	mov	dph,r4
      000196 12r00r00         [24]  775 	lcall	_putchar
                                    776 ;	sio.c:94: putchar(digits[d & 0xf]);
      000199 53 06 0F         [24]  777 	anl	ar6,#0x0f
      00019C EE               [12]  778 	mov	a,r6
      00019D 24r00            [12]  779 	add	a,#_digits
      00019F F9               [12]  780 	mov	r1,a
      0001A0 87 07            [24]  781 	mov	ar7,@r1
      0001A2 7E 00            [12]  782 	mov	r6,#0x00
      0001A4 8F 82            [24]  783 	mov	dpl,r7
      0001A6 8E 83            [24]  784 	mov	dph,r6
                                    785 ;	sio.c:96: return;
                                    786 ;	sio.c:97: }
      0001A8 02r00r00         [24]  787 	ljmp	_putchar
                                    788 ;------------------------------------------------------------
                                    789 ;Allocation info for local variables in function 'print32x'
                                    790 ;------------------------------------------------------------
                                    791 ;d                         Allocated to stack - _bp +1
                                    792 ;------------------------------------------------------------
                                    793 ;	sio.c:99: void print32x(unsigned long d) {
                                    794 ;	-----------------------------------------
                                    795 ;	 function print32x
                                    796 ;	-----------------------------------------
      0001AB                        797 _print32x:
      0001AB C0*00            [24]  798 	push	_bp
      0001AD 85 81*00         [24]  799 	mov	_bp,sp
      0001B0 C0 82            [24]  800 	push	dpl
      0001B2 C0 83            [24]  801 	push	dph
      0001B4 C0 F0            [24]  802 	push	b
      0001B6 C0 E0            [24]  803 	push	acc
                                    804 ;	sio.c:100: putchar(digits[(d >> 28) & 0xf]);
      0001B8 A8*00            [24]  805 	mov	r0,_bp
      0001BA 08               [12]  806 	inc	r0
      0001BB 08               [12]  807 	inc	r0
      0001BC 08               [12]  808 	inc	r0
      0001BD 08               [12]  809 	inc	r0
      0001BE E6               [12]  810 	mov	a,@r0
      0001BF C4               [12]  811 	swap	a
      0001C0 54 0F            [12]  812 	anl	a,#0x0f
      0001C2 FA               [12]  813 	mov	r2,a
      0001C3 53 02 0F         [24]  814 	anl	ar2,#0x0f
      0001C6 E4               [12]  815 	clr	a
      0001C7 EA               [12]  816 	mov	a,r2
      0001C8 24r00            [12]  817 	add	a,#_digits
      0001CA F9               [12]  818 	mov	r1,a
      0001CB 87 07            [24]  819 	mov	ar7,@r1
      0001CD 7E 00            [12]  820 	mov	r6,#0x00
      0001CF 8F 82            [24]  821 	mov	dpl,r7
      0001D1 8E 83            [24]  822 	mov	dph,r6
      0001D3 12r00r00         [24]  823 	lcall	_putchar
                                    824 ;	sio.c:101: putchar(digits[(d >> 24) & 0xf]);
      0001D6 A8*00            [24]  825 	mov	r0,_bp
      0001D8 08               [12]  826 	inc	r0
      0001D9 08               [12]  827 	inc	r0
      0001DA 08               [12]  828 	inc	r0
      0001DB 08               [12]  829 	inc	r0
      0001DC 86 07            [24]  830 	mov	ar7,@r0
      0001DE 53 07 0F         [24]  831 	anl	ar7,#0x0f
      0001E1 EF               [12]  832 	mov	a,r7
      0001E2 24r00            [12]  833 	add	a,#_digits
      0001E4 F9               [12]  834 	mov	r1,a
      0001E5 87 07            [24]  835 	mov	ar7,@r1
      0001E7 7E 00            [12]  836 	mov	r6,#0x00
      0001E9 8F 82            [24]  837 	mov	dpl,r7
      0001EB 8E 83            [24]  838 	mov	dph,r6
      0001ED 12r00r00         [24]  839 	lcall	_putchar
                                    840 ;	sio.c:102: putchar(digits[(d >> 20) & 0xf]);
      0001F0 A8*00            [24]  841 	mov	r0,_bp
      0001F2 08               [12]  842 	inc	r0
      0001F3 08               [12]  843 	inc	r0
      0001F4 08               [12]  844 	inc	r0
      0001F5 86 04            [24]  845 	mov	ar4,@r0
      0001F7 08               [12]  846 	inc	r0
      0001F8 E6               [12]  847 	mov	a,@r0
      0001F9 C4               [12]  848 	swap	a
      0001FA CC               [12]  849 	xch	a,r4
      0001FB C4               [12]  850 	swap	a
      0001FC 54 0F            [12]  851 	anl	a,#0x0f
      0001FE 6C               [12]  852 	xrl	a,r4
      0001FF CC               [12]  853 	xch	a,r4
      000200 54 0F            [12]  854 	anl	a,#0x0f
      000202 CC               [12]  855 	xch	a,r4
      000203 6C               [12]  856 	xrl	a,r4
      000204 CC               [12]  857 	xch	a,r4
      000205 53 04 0F         [24]  858 	anl	ar4,#0x0f
      000208 E4               [12]  859 	clr	a
      000209 EC               [12]  860 	mov	a,r4
      00020A 24r00            [12]  861 	add	a,#_digits
      00020C F9               [12]  862 	mov	r1,a
      00020D 87 07            [24]  863 	mov	ar7,@r1
      00020F 7E 00            [12]  864 	mov	r6,#0x00
      000211 8F 82            [24]  865 	mov	dpl,r7
      000213 8E 83            [24]  866 	mov	dph,r6
      000215 12r00r00         [24]  867 	lcall	_putchar
                                    868 ;	sio.c:103: putchar(digits[(d >> 16) & 0xf]);
      000218 A8*00            [24]  869 	mov	r0,_bp
      00021A 08               [12]  870 	inc	r0
      00021B 08               [12]  871 	inc	r0
      00021C 08               [12]  872 	inc	r0
      00021D 86 07            [24]  873 	mov	ar7,@r0
      00021F 53 07 0F         [24]  874 	anl	ar7,#0x0f
      000222 EF               [12]  875 	mov	a,r7
      000223 24r00            [12]  876 	add	a,#_digits
      000225 F9               [12]  877 	mov	r1,a
      000226 87 07            [24]  878 	mov	ar7,@r1
      000228 7E 00            [12]  879 	mov	r6,#0x00
      00022A 8F 82            [24]  880 	mov	dpl,r7
      00022C 8E 83            [24]  881 	mov	dph,r6
      00022E 12r00r00         [24]  882 	lcall	_putchar
                                    883 ;	sio.c:104: putchar(digits[(d >> 12) & 0xf]);
      000231 A8*00            [24]  884 	mov	r0,_bp
      000233 08               [12]  885 	inc	r0
      000234 08               [12]  886 	inc	r0
      000235 86 04            [24]  887 	mov	ar4,@r0
      000237 08               [12]  888 	inc	r0
      000238 E6               [12]  889 	mov	a,@r0
      000239 C4               [12]  890 	swap	a
      00023A CC               [12]  891 	xch	a,r4
      00023B C4               [12]  892 	swap	a
      00023C 54 0F            [12]  893 	anl	a,#0x0f
      00023E 6C               [12]  894 	xrl	a,r4
      00023F CC               [12]  895 	xch	a,r4
      000240 54 0F            [12]  896 	anl	a,#0x0f
      000242 CC               [12]  897 	xch	a,r4
      000243 6C               [12]  898 	xrl	a,r4
      000244 CC               [12]  899 	xch	a,r4
      000245 FD               [12]  900 	mov	r5,a
      000246 08               [12]  901 	inc	r0
      000247 E6               [12]  902 	mov	a,@r0
      000248 C4               [12]  903 	swap	a
      000249 54 F0            [12]  904 	anl	a,#0xf0
      00024B 4D               [12]  905 	orl	a,r5
      00024C E6               [12]  906 	mov	a,@r0
      00024D C4               [12]  907 	swap	a
      00024E 54 0F            [12]  908 	anl	a,#0x0f
      000250 53 04 0F         [24]  909 	anl	ar4,#0x0f
      000253 E4               [12]  910 	clr	a
      000254 EC               [12]  911 	mov	a,r4
      000255 24r00            [12]  912 	add	a,#_digits
      000257 F9               [12]  913 	mov	r1,a
      000258 87 07            [24]  914 	mov	ar7,@r1
      00025A 7E 00            [12]  915 	mov	r6,#0x00
      00025C 8F 82            [24]  916 	mov	dpl,r7
      00025E 8E 83            [24]  917 	mov	dph,r6
      000260 12r00r00         [24]  918 	lcall	_putchar
                                    919 ;	sio.c:105: putchar(digits[(d >> 8) & 0xf]);
      000263 A8*00            [24]  920 	mov	r0,_bp
      000265 08               [12]  921 	inc	r0
      000266 08               [12]  922 	inc	r0
      000267 86 07            [24]  923 	mov	ar7,@r0
      000269 53 07 0F         [24]  924 	anl	ar7,#0x0f
      00026C EF               [12]  925 	mov	a,r7
      00026D 24r00            [12]  926 	add	a,#_digits
      00026F F9               [12]  927 	mov	r1,a
      000270 87 07            [24]  928 	mov	ar7,@r1
      000272 7E 00            [12]  929 	mov	r6,#0x00
      000274 8F 82            [24]  930 	mov	dpl,r7
      000276 8E 83            [24]  931 	mov	dph,r6
      000278 12r00r00         [24]  932 	lcall	_putchar
                                    933 ;	sio.c:106: putchar(digits[(d >> 4) & 0xf]);
      00027B A8*00            [24]  934 	mov	r0,_bp
      00027D 08               [12]  935 	inc	r0
      00027E 86 04            [24]  936 	mov	ar4,@r0
      000280 08               [12]  937 	inc	r0
      000281 E6               [12]  938 	mov	a,@r0
      000282 C4               [12]  939 	swap	a
      000283 CC               [12]  940 	xch	a,r4
      000284 C4               [12]  941 	swap	a
      000285 54 0F            [12]  942 	anl	a,#0x0f
      000287 6C               [12]  943 	xrl	a,r4
      000288 CC               [12]  944 	xch	a,r4
      000289 54 0F            [12]  945 	anl	a,#0x0f
      00028B CC               [12]  946 	xch	a,r4
      00028C 6C               [12]  947 	xrl	a,r4
      00028D CC               [12]  948 	xch	a,r4
      00028E FD               [12]  949 	mov	r5,a
      00028F 08               [12]  950 	inc	r0
      000290 E6               [12]  951 	mov	a,@r0
      000291 C4               [12]  952 	swap	a
      000292 54 F0            [12]  953 	anl	a,#0xf0
      000294 4D               [12]  954 	orl	a,r5
      000295 86 06            [24]  955 	mov	ar6,@r0
      000297 08               [12]  956 	inc	r0
      000298 E6               [12]  957 	mov	a,@r0
      000299 C4               [12]  958 	swap	a
      00029A CE               [12]  959 	xch	a,r6
      00029B C4               [12]  960 	swap	a
      00029C 54 0F            [12]  961 	anl	a,#0x0f
      00029E 6E               [12]  962 	xrl	a,r6
      00029F CE               [12]  963 	xch	a,r6
      0002A0 54 0F            [12]  964 	anl	a,#0x0f
      0002A2 CE               [12]  965 	xch	a,r6
      0002A3 6E               [12]  966 	xrl	a,r6
      0002A4 CE               [12]  967 	xch	a,r6
      0002A5 53 04 0F         [24]  968 	anl	ar4,#0x0f
      0002A8 E4               [12]  969 	clr	a
      0002A9 EC               [12]  970 	mov	a,r4
      0002AA 24r00            [12]  971 	add	a,#_digits
      0002AC F9               [12]  972 	mov	r1,a
      0002AD 87 07            [24]  973 	mov	ar7,@r1
      0002AF 7E 00            [12]  974 	mov	r6,#0x00
      0002B1 8F 82            [24]  975 	mov	dpl,r7
      0002B3 8E 83            [24]  976 	mov	dph,r6
      0002B5 12r00r00         [24]  977 	lcall	_putchar
                                    978 ;	sio.c:107: putchar(digits[d & 0xf]);
      0002B8 A8*00            [24]  979 	mov	r0,_bp
      0002BA 08               [12]  980 	inc	r0
      0002BB 74 0F            [12]  981 	mov	a,#0x0f
      0002BD 56               [12]  982 	anl	a,@r0
      0002BE FC               [12]  983 	mov	r4,a
      0002BF E4               [12]  984 	clr	a
      0002C0 EC               [12]  985 	mov	a,r4
      0002C1 24r00            [12]  986 	add	a,#_digits
      0002C3 F9               [12]  987 	mov	r1,a
      0002C4 87 07            [24]  988 	mov	ar7,@r1
      0002C6 7E 00            [12]  989 	mov	r6,#0x00
      0002C8 8F 82            [24]  990 	mov	dpl,r7
      0002CA 8E 83            [24]  991 	mov	dph,r6
      0002CC 12r00r00         [24]  992 	lcall	_putchar
                                    993 ;	sio.c:109: return;
                                    994 ;	sio.c:110: }
      0002CF 85*00 81         [24]  995 	mov	sp,_bp
      0002D2 D0*00            [24]  996 	pop	_bp
      0002D4 22               [24]  997 	ret
                                    998 	.area CSEG    (CODE)
                                    999 	.area CONST   (CODE)
                                   1000 	.area XINIT   (CODE)
                                   1001 	.area CABS    (ABS,CODE)
