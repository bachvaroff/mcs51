                   ; PAULMON2, a user-friendly 8051 monitor, by Paul Stoffregen
                   ; Please email comments, suggestions, bugs to paul@pjrc.com
                   
                   ; Version 2.1
                   ;        Some code size improvements, contributed by Alexand
                   ;        Download can now start from main menu prompt
                   
                   ; Version 2.1ab
                   ;        Extensive mods by Atanas Bachvaroff <bachvaroff@gma
                   
                   ; It's free. PAULMON2 is in the public domain. You may copy
                   ; sections of code from PAULMON2 into your own programs, eve
                   ; for commercial purposes. PAULMON2 should only be distribut
                   ; free of charge, but may be bundled as 'value-added' with o
                   ; products, such as development boards, CDROMs, etc. Please
                   ; distribute the PAULMON2.DOC file and other files, not just
                   ; the object code!
                   
                   ; The PAULMON2.EQU and PAULMON2.HDR files contain valuable
                   ; information that could help you to write programs for use
                   ; with PAULMON2.
                   
                   ; PAULMON2 is in the public domain. PAULMON2 is distributed 
                   ; the hope that it will be useful, but without any warranty;
                   ; without even the implied warranty of merchantability or fi
                   ; for a particular purpose. 
                   
                   ; You are probably reading this code to see what it looks li
                   ; and possibly learn something, or to modify it for some rea
                   ; Either is ok, but please remember that this code uses a nu
                   ; of tricks to cram all the functionality into just 4k. As a
                   ; result, the code can be difficult to read, and adding new
                   ; features can be very difficult without growing beyond 4k. 
                   ; add or modify commands in PAULMON2, please consider using 
                   ; "external command" functionality. It is easier to develop
                   ; new commands this way, and you can distribute them to othe
                   ; users. Email paul@pjrc.com if you have new PAULMON2
                   ; commands to contribute to others. Details about adding new
                   ; commands to PAULMON2 (with examples) can be found at:
                   
                   ; http://www.pjrc.com/tech/8051/pm2_docs/addons.html
                   
                   ;---------------------------------------------------------;
                   ;                                                          ;
                   ;            PAULMON2's default configuration              ;
                   ;                                                          ;
                   ;---------------------------------------------------------;
                   
                   ;---------------------------------------------------------;
                   ; These two parameters control where PAULMON2 will be assemb
                   ; and where it will attempt to LJMP at the interrupt vector 
0000:              .equ     base, 0x0000            ; location for PAULMON2
0000:              .equ     vector, 0x2000          ; location to LJMP interrup
                   ;---------------------------------------------------------;
                   
                   ;---------------------------------------------------------;
                   ; These three parameters tell PAULMON2 where the user's memo
                   ; installed. "bmem" and "emem" define the space that will be
                   ; for program headers, user installed commands, start-up pro
                   ; "bmem" and "emem" should be use so they exclude memory are
                   ; perphreal devices may be mapped, as reading memory from an
                   ; may reconfigure it unexpectedly.
0000:              .equ     pgm, 0x2000             ; default location for the 
0000:              .equ     bmem, 0x1000            ; where is the beginning of
0000:              .equ     emem, 0xdfff            ; end of the memory to sear
                   ;---------------------------------------------------------;
                   
                   ;---------------------------------------------------------;
0000:              .equ     psw_init, 0             ; value for psw (which reg 
0000:              .equ     p2_init, 0xff           ; boot time default page is
0000:              .equ     sp_init, 0x17           ; location of the stack
0000:              .equ     sp_reset, 0x07          ; stack on reset
0000:              .equ     mctrl_reset, 11111111b  ; memory controller (P1) on
0000:              .equ     mctrl_shadow, 11111110b         ; memory controller
0000:              .equ     dnld_parm, 0x08                 ; block of 16 bytes
                   ; |00|01|02|03|04|05|06|07|08|09|0a|0b|0c|0d|0e|0f|
                   ;                         \__ sp_reset
                   ; |10|11|12|13|14|15|16|17|
                   ;                         \__ sp_init
                   ;
                   ; |r0|r1|r2|r3|r4|r5|r6|r7|  .  .  .  dnld  .  .  |
                   ; |  .  .  .  dnld  .  .  |
                   ;---------------------------------------------------------;
                   
                   ;---------------------------------------------------------;
                   ; bc = 65536 - (OSC / 32) / baud
                   ;---------------------------------------------------------;
                   ; 0xfffa @ 57600bps @ 11.059MHz
                   ;.equ    bc, 0xfffa
                   ; 0xfff7 @ 38400bps @ 11.059MHz
                   ;.equ    bc, 0xfff7
                   ; 0xffee @ 19200bps @ 11.059MHz
                   ;.equ    bc, 0xffee
                   ; 0xffdc @ 9600bps @ 11.059MHz
                   ;.equ    bc, 0xffdc
                   ; 0xfff7 @ 57600bps @ 16.5888MHz
0000:              .equ     bc, 0xfff7
                   ; 0xffee @ 28800bps @ 16.5888MHz
                   ;.equ    bc, 0xffee
                   ; 0xffe5 @ 19200bps @ 16.5888MHz
                   ;.equ    bc, 0xffe5
                   ; 0xffca @ 9600bps @ 16.5888MHz
                   ;.equ    bc, 0xffca
                   ;---------------------------------------------------------;
                   
                   ;---------------------------------------------------------;
                   ; Key command definitions
0000:              .equ     help_key, '?'           ; help screen
0000:              .equ     dir_key, 'M'            ; directory
0000:              .equ     run_key, 'R'            ; run program
0000:              .equ     dnld_key, 'D'           ; download
0000:              .equ     upld_key, 'U'           ; upload
0000:              .equ     nloc_key, 'N'           ; new memory location
0000:              .equ     jump_key, 'J'           ; jump to memory location
0000:              .equ     dump_key, 'H'           ; hex dump memory
0000:              .equ     intm_key, 'I'           ; hex dump internal memory
0000:              .equ     edit_key, 'E'           ; edit memory
0000:              .equ     clrm_key, 'C'           ; clear memory
0000:              .equ     crc16_key, 'W'          ; calculate crc16
0000:              .equ     baud_key, 'B'           ; reset baudrate
0000:              .equ     eio77_key, '<'          ; enable IO space 0xe000-0x
0000:              .equ     dio77_key, '>'          ; disable IO space 0xe000-0
                   ;---------------------------------------------------------;
                   
                   ;---------------------------------------------------------;
                   ; Common ASCII codes
0000:              .equ     LF, '\n'
0000:              .equ     CR, '\r'
0000:              .equ     ESC, 27
0000:              .equ     SPACE, ' '
                   ;---------------------------------------------------------;
                   
                   ;---------------------------------------------------------;
                   ;                                                          ;
                   ;                     Interrupt Vectors                    ;
                   ;                                                          ;
                   ;---------------------------------------------------------;
                   
                   ; spare the flash by filling the space between vectors
                   ; with "mov r7, a" / 0xff in binary
                   
                   ;------ RESET --------------------------------------------;
0000:              .org     base
0000: 02 08 E8              ljmp    reset
                   ;------ RESET --------------------------------------------;
                   
                   ;------ IE0_VECTOR ---------------------------------------;
0003:              .org     base + 3
0003: 02 20 03              ljmp    vector + 3
0006: FF                    mov     r7, a
0007: FF                    mov     r7, a
0008: FF                    mov     r7, a
0009: FF                    mov     r7, a
000A: FF                    mov     r7, a
                   ;------ IE0_VECTOR ---------------------------------------;
                   
                   ;------ TF0_VECTOR ---------------------------------------;
000B:              .org     base + 11
000B: 02 20 0B              ljmp    vector + 11
000E: FF                    mov     r7, a
000F: FF                    mov     r7, a
0010: FF                    mov     r7, a
0011: FF                    mov     r7, a
0012: FF                    mov     r7, a
                   ;------ TF0_VECTOR ---------------------------------------;
                   
                   ;------ IE1_VECTOR ---------------------------------------;
0013:              .org     base + 19
0013: 02 20 13              ljmp    vector + 19
0016: FF                    mov     r7, a
0017: FF                    mov     r7, a
0018: FF                    mov     r7, a
0019: FF                    mov     r7, a
001A: FF                    mov     r7, a
                   ;------ IE1_VECTOR ---------------------------------------;
                   
                   ;------ TF1_VECTOR ---------------------------------------;
001B:              .org     base + 27
001B: 02 20 1B              ljmp    vector + 27
001E: FF                    mov     r7, a
001F: FF                    mov     r7, a
0020: FF                    mov     r7, a
0021: FF                    mov     r7, a
0022: FF                    mov     r7, a
                   ;------ TF1_VECTOR ---------------------------------------;
                   
                   ;------ SI0_VECTOR ---------------------------------------;
0023:              .org     base + 35
0023: 02 20 23              ljmp    vector + 35
0026: FF                    mov     r7, a
0027: FF                    mov     r7, a
0028: FF                    mov     r7, a
0029: FF                    mov     r7, a
002A: FF                    mov     r7, a
                   ;------ SI0_VECTOR ---------------------------------------;
                   
                   ;------ TF2_VECTOR --- EX2_VECTOR ------------------------;
002B:              .org     base + 43
002B: 02 20 2B              ljmp    vector + 43
002E: FF                    mov     r7, a
002F: FF                    mov     r7, a
0030: FF                    mov     r7, a
0031: FF                    mov     r7, a
0032: FF                    mov     r7, a
                   ;------ TF2_VECTOR --- EX2_VECTOR ------------------------;
                   
                   ;---------------------------------------------------------;
                   ;                                                          ;
                   ;        The jump table for user programs to call          ;
                   ;              subroutines within PAULMON                  ;
                   ;           Update paulmon21.equ accordingly               ;
                   ;                                                          ;
                   ;---------------------------------------------------------;
                   
0033:              .org     base + 51
0033: 02 09 7A              ljmp    setbaud                 ; JMP_TABLE 0x0033
0036: 02 00 72              ljmp    cin             ; JMP_TABLE 0x0036
0039: 02 00 7A              ljmp    cinpoll                 ; JMP_TABLE 0x0039
003C: 02 00 84              ljmp    cout            ; JMP_TABLE 0x003c
                            
003F: 02 01 A2              ljmp    phex            ; JMP_TABLE 0x003f
0042: 02 01 A5              ljmp    phex1           ; JMP_TABLE 0x0042
0045: 02 01 B4              ljmp    phex16          ; JMP_TABLE 0x0045
0048: 02 00 BB              ljmp    pcstr           ; JMP_TABLE 0x0048
004B: 02 09 8F              ljmp    pint8u          ; JMP_TABLE 0x004b
004E: 02 09 95              ljmp    pint8           ; JMP_TABLE 0x004e
0051: 02 09 D3              ljmp    pint16u                 ; JMP_TABLE 0x0051
0054: 02 00 9E              ljmp    crlf            ; JMP_TABLE 0x0054
                            
0057: 02 00 C8              ljmp    ghex            ; JMP_TABLE 0x0057
005A: 02 01 0C              ljmp    ghex16          ; JMP_TABLE 0x005a
                            
005D: 02 01 88              ljmp    asc2hex                 ; JMP_TABLE 0x005d
0060: 02 01 C1              ljmp    upper           ; JMP_TABLE 0x0060
0063: 02 01 CE              ljmp    lenstr          ; JMP_TABLE 0x0063
                            
0066: 02 08 07              ljmp    init_crc16      ; JMP_TABLE 0x0066
0069: 02 08 1B              ljmp    update_crc16    ; JMP_TABLE 0x0069
006C: 02 08 10              ljmp    finish_crc16    ; JMP_TABLE 0x006c
                            
006F: 02 08 77              ljmp    find            ; JMP_TABLE 0x006f
                   
                   ;---------------------------------------------------------;
                   ;                                                          ;
                   ;               Subroutines for serial I/O                 ;
                   ;                                                          ;
                   ;---------------------------------------------------------;
                   
                   cin:
0072: 30 98 FD              jnb     ri, cin
0075: E5 99                 mov     a, sbuf
0077: C2 98                 clr     ri
0079: 22                    ret
                   
                   cinpoll:
007A: D3                    setb    c
007B: 30 98 05              jnb     ri, cinpoll1
007E: E5 99                 mov     a, sbuf
0080: C2 98                 clr     ri
0082: C3                    clr     c
                   cinpoll1:
0083: 22                    ret
                   
                   cout:
0084: 30 99 FD              jnb     ti, cout
0087: C2 99                 clr     ti
0089: F5 99                 mov     sbuf, a
008B: 22                    ret
                            
                   sspace:
008C: C0 E0                 push    acc
008E: 74 20                 mov     a, #SPACE
0090: 11 84                 acall   cout
0092: D0 E0                 pop     acc
0094: 22                    ret
                   
                   dash:
0095: C0 E0                 push    acc
0097: 74 2D                 mov     a, #'-'
0099: 11 84                 acall   cout
009B: D0 E0                 pop     acc
009D: 22                    ret
                   
                   crlf:
009E: C0 E0                 push    acc
00A0: 74 0D                 mov     a, #CR
00A2: 11 84                 acall   cout
00A4: 74 0A                 mov     a, #LF
00A6: 11 84                 acall   cout
00A8: D0 E0                 pop     acc
00AA: 22                    ret
                   
                   cout_sp:
00AB: 11 84                 acall   cout
00AD: 01 8C                 ajmp    sspace
                   
                   dash_sp:
00AF: 11 95                 acall   dash
00B1: 01 8C                 ajmp    sspace
                   
                   dspace:
00B3: 11 8C                 acall   sspace
00B5: 01 8C                 ajmp    sspace
                   
                   dcrlf:
00B7: 11 9E                 acall   crlf
00B9: 01 9E                 ajmp    crlf
                   
                   pcstr:
00BB: C0 E0                 push    acc
                   pcstr1:
00BD: E0                    movx    a, @dptr
00BE: A3                    inc     dptr
00BF: 60 04                 jz      pcstr2
00C1: 11 84                 acall   cout
00C3: 80 F8                 sjmp    pcstr1
                   pcstr2:
00C5: D0 E0                 pop     acc
00C7: 22                    ret
                            
                   ;---------------------------------------------------------;
                   
                   ; get 2 digit hex number from serial port
                   ; c = set if ESC pressed, clear otherwise
                   ; psw.5 = set if return w/ no input, clear otherwise
                   
                   ghex:
                   ghex8:
00C8: C2 D5                 clr     psw.5
                   ghex8c:
00CA: 11 72                 acall   cin     ; get first digit
00CC: 31 C1                 acall   upper
00CE: B4 1B 03              cjne    a, #ESC, ghex8f
                   ghex8d:
00D1: D3                    setb    c
00D2: E4                    clr     a
00D3: 22                    ret
                   ghex8f:
00D4: B4 0D 05              cjne    a, #CR, ghex8h
00D7: D2 D5                 setb    psw.5
00D9: C3                    clr     c
00DA: E4                    clr     a
00DB: 22                    ret
                   ghex8h:
00DC: FA                    mov     r2, a
00DD: 31 88                 acall   asc2hex
00DF: 40 E9                 jc      ghex8c
00E1: CA                    xch     a, r2           ; r2 will hold hex value of
00E2: 11 84                 acall   cout
                   ghex8j:
00E4: 11 72                 acall   cin     ; get second digit
00E6: 31 C1                 acall   upper
00E8: B4 1B 02              cjne    a, #ESC, ghex8k
00EB: 80 E4                 sjmp    ghex8d
                   ghex8k:
00ED: B4 0D 03              cjne    a, #CR, ghex8m
00F0: EA                    mov     a, r2
00F1: C3                    clr     c
00F2: 22                    ret
                   ghex8m:
00F3: B4 08 04              cjne    a, #8, ghex8p
                   ghex8n:
00F6: 11 84                 acall   cout
00F8: 80 D0                 sjmp    ghex8c
                   ghex8p:
00FA: B4 15 02              cjne    a, #21, ghex8q
00FD: 80 F7                 sjmp    ghex8n
                   ghex8q:
00FF: FB                    mov     r3, a
0100: 31 88                 acall   asc2hex
0102: 40 E0                 jc      ghex8j
0104: CB                    xch     a, r3
0105: 11 84                 acall   cout
0107: EA                    mov     a, r2
0108: C4                    swap    a
0109: 4B                    orl     a, r3
010A: C3                    clr     c
010B: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                   ; carry set if esc pressed
                   ; psw.5 set if return pressed w/ no input
                   
                   ghex16:
010C: 7A 00                 mov     r2, #0          ; start out with 0
010E: 7B 00                 mov     r3, #0
0110: 7C 04                 mov     r4, #4          ; number of digits left
0112: C2 D5                 clr     psw.5
                   
                   ghex16c:
0114: 11 72                 acall   cin
0116: 31 C1                 acall   upper
0118: B4 1B 07              cjne    a, #ESC, ghex16d
011B: D3                    setb    c               ; handle esc key
011C: E4                    clr     a
011D: F5 83                 mov     dph, a
011F: F5 82                 mov     dpl, a
0121: 22                    ret
                   ghex16d:
0122: B4 08 02              cjne    a, #8, ghex16f
0125: 80 03                 sjmp    ghex16k
                   ghex16f:
0127: B4 7F 0C              cjne    a, #127, ghex16g        ; handle backspace
                   ghex16k:
012A: BC 04 02              cjne    r4, #4, ghex16e                 ; have they
012D: 80 E5                 sjmp    ghex16c
                   ghex16e:
012F: 11 84                 acall   cout
0131: 31 77                 acall   ghex16y
0133: 0C                    inc     r4
0134: 80 DE                 sjmp    ghex16c
                   ghex16g:
0136: B4 0D 10              cjne    a, #CR, ghex16i                 ; return ke
0139: 8B 83                 mov     dph, r3
013B: 8A 82                 mov     dpl, r2
013D: BC 04 07              cjne    r4, #4, ghex16h
0140: E4                    clr     a
0141: F5 83                 mov     dph, a
0143: F5 82                 mov     dpl, a
0145: D2 D5                 setb    psw.5
                   ghex16h:
0147: C3                    clr     c
0148: 22                    ret
                   ghex16i:
0149: FD                    mov     r5, a                   ; keep copy of orig
014A: 31 88                 acall   asc2hex
014C: 40 C6                 jc      ghex16c
014E: CD                    xch     a, r5
014F: 12 00 84              lcall   cout
0152: ED                    mov     a, r5
0153: C0 E0                 push    acc
0155: 31 66                 acall   ghex16x
0157: D0 E0                 pop     acc
0159: 2A                    add     a, r2
015A: FA                    mov     r2, a
015B: E4                    clr     a
015C: 3B                    addc    a, r3
015D: FB                    mov     r3, a
015E: DC B4                 djnz    r4, ghex16c
0160: C3                    clr     c
0161: 8A 82                 mov     dpl, r2
0163: 8B 83                 mov     dph, r3
0165: 22                    ret
                   
                   ghex16x:
                            ; multiply r3-r2 by 16 (shift left by 4)
0166: EB                    mov     a, r3
0167: C4                    swap    a
0168: 54 F0                 anl     a, #11110000b
016A: FB                    mov     r3, a
016B: EA                    mov     a, r2
016C: C4                    swap    a
016D: 54 0F                 anl     a, #00001111b
016F: 4B                    orl     a, r3
0170: FB                    mov     r3, a
0171: EA                    mov     a, r2
0172: C4                    swap    a
0173: 54 F0                 anl     a, #11110000b
0175: FA                    mov     r2, a
0176: 22                    ret
                   
                   ghex16y:
                            ; divide r3-r2 by 16 (shift right by 4)
0177: EA                    mov     a, r2
0178: C4                    swap    a
0179: 54 0F                 anl     a, #00001111b
017B: FA                    mov     r2, a
017C: EB                    mov     a, r3
017D: C4                    swap    a
017E: 54 F0                 anl     a, #11110000b
0180: 4A                    orl     a, r2
0181: FA                    mov     r2, a
0182: EB                    mov     a, r3
0183: C4                    swap    a
0184: 54 0F                 anl     a, #00001111b
0186: FB                    mov     r3, a
0187: 22                    ret
                   
                   asc2hex:
                            ; carry set if invalid input
0188: 24 D0                 add     a, #208
018A: 50 14                 jnc     hex_not
018C: 24 F6                 add     a, #246
018E: 40 04                 jc      hex_maybe
0190: 24 0A                 add     a, #10
0192: C3                    clr     c
0193: 22                    ret
                   hex_maybe:
0194: 24 F9                 add     a, #249
0196: 50 08                 jnc     hex_not
0198: 24 FA                 add     a, #250
019A: 40 04                 jc      hex_not
019C: 24 10                 add     a, #16
019E: C3                    clr     c
019F: 22                    ret
                   hex_not:
01A0: D3                    setb    c
01A1: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                   ; Highly code efficient resursive call phex contributed
                   ; by Alexander B. Alexandrov <abalex@cbr.spb.ru>
                   
                   phex:
                   phex8:
01A2: 31 A4                 acall   phex_b
                   phex_b:
01A4: C4                    swap    a               ; SWAP A will be twice => A
                   phex1:
01A5: C0 E0                 push    acc
01A7: 54 0F                 anl     a, #15
01A9: 24 90                 add     a, #0x90        ; acc is 0x9X, where X is h
01AB: D4                    da      a               ; if A to F, C=1 and lower 
01AC: 34 40                 addc    a, #0x40
01AE: D4                    da      a
01AF: 11 84                 acall   cout
01B1: D0 E0                 pop     acc
01B3: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                   phex16:
01B4: C0 E0                 push    acc
01B6: E5 83                 mov     a, dph
01B8: 31 A2                 acall   phex
01BA: E5 82                 mov     a, dpl
01BC: 31 A2                 acall   phex
01BE: D0 E0                 pop     acc
01C0: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                   ; converts the ascii code in Acc to uppercase, if it is lowe
                   ; Code efficient (saves 6 byes) upper contributed
                   ; by Alexander B. Alexandrov <abalex@cbr.spb.ru>
                   
                   upper:
01C1: B4 61 00              cjne    a, #97, upper2
                   upper2:
01C4: 40 07                 jc      upper4          ; end if acc < 97
01C6: B4 7B 00              cjne    a, #123, upper3
                   upper3:
01C9: 50 02                 jnc     upper4          ; end if acc >= 123
01CB: 24 E0                 add     a, #224                 ; convert to upperc
                   upper4:
01CD: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                   lenstr:
01CE: 78 00                 mov     r0, #0          ; returns length of a strin
01D0: C0 E0                 push    acc
                   lenstr1:
01D2: E0                    movx    a, @dptr
01D3: 60 04                 jz      lenstr2
01D5: 08                    inc     r0
01D6: A3                    inc     dptr
01D7: 80 F9                 sjmp    lenstr1
                   lenstr2:
01D9: D0 E0                 pop     acc
01DB: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                   menu:
                   ; first we print out the prompt, which isn't as simple
                   ; as it may seem, since external code can add to the
                   ; prompt, so we've got to find and execute all of 'em.
01DC: 90 0A 7B              mov     dptr, #prompt1  ; give 'em the first part o
01DF: 11 BB                 acall   pcstr
01E1: EF                    mov     a, r7
01E2: 31 A2                 acall   phex
01E4: EE                    mov     a, r6
01E5: 31 A2                 acall   phex
01E7: 90 0A 85              mov     dptr, #prompt2
01EA: 11 BB                 acall   pcstr
                   
                   ; now we're finally past the prompt, so let's get some input
01EC: 11 72                 acall   cin             ; get the input, finally
01EE: B4 3A 04              cjne    a, #':', menu0
01F1: 51 F3                 acall   dnld_now
01F3: 80 E7                 sjmp    menu
                   menu0:
01F5: 31 C1                 acall   upper
                   
                   ; push return address onto stack so we can just jump to the 
01F7: 75 F0 DC              mov     b, #(menu & 0xff)       ; we push the retur
01FA: C0 F0                 push    b               ; to save code later...
01FC: 75 F0 01              mov     b, #(menu >> 8)         ; if bogus input, j
01FF: C0 F0                 push    b               ; another prompt.
                   
                   ; first we'll look through memory for a program header that 
                   ; it's a user installed command which matches what the user 
                   
                   ; user installed commands need to avoid changing R6/R7, whic
                   ; the memory pointer. The stack pointer can't be changed obv
                   ; all the other general purpose registers should be availabl
                   ; user commands to alter as they wish.
                   
                   menux:
0201: F5 F0                 mov     b, a            ; now search for external c
0203: 90 10 00              mov     dptr, #bmem
                   menux1:
0206: 12 08 77              lcall   find
0209: 50 22                 jnc     menuxend        ; searched all the commands
020B: 75 82 04              mov     dpl, #4
020E: E0                    movx    a, @dptr
020F: B4 FE 14              cjne    a, #254, menux2         ; only FE is an ext
0212: 05 82                 inc     dpl
0214: E0                    movx    a, @dptr
0215: B5 F0 0E              cjne    a, b, menux2    ; only run if they want it
0218: 11 8C                 acall   sspace
021A: 75 82 20              mov     dpl, #32
021D: 11 BB                 acall   pcstr           ; print command name
021F: 11 9E                 acall   crlf
0221: 75 82 40              mov     dpl, #64
0224: E4                    clr     a
0225: 73                    jmp     @a+dptr                 ; take a leap of fa
                   menux2:
0226: 05 83                 inc     dph
0228: E5 83                 mov     a, dph
022A: B4 E0 D9              cjne    a, #((emem + 1) >> 8) & 0xff, menux1
                   menuxend:
022D: E5 F0                 mov     a, b
                   
                   ; since we didn't find a user installed command, use the bui
                   menui1:
022F: B4 3F 07              cjne    a, #help_key, menui2
0232: 90 0D D8              mov     dptr, #help_cmd2
0235: 11 BB                 acall   pcstr
0237: A1 F7                 ajmp    help
                            
                   menui2:
0239: B4 4D 07              cjne    a, #dir_key, menui3
023C: 90 0D EC              mov     dptr, #dir_cmd
023F: 11 BB                 acall   pcstr
0241: 81 E5                 ajmp    dir
                            
                   menui3:
0243: B4 52 07              cjne    a, #run_key, menui4
0246: 90 0D FA              mov     dptr, #run_cmd
0249: 11 BB                 acall   pcstr
024B: A1 5F                 ajmp    run
                            
                   menui4:
024D: B4 44 07              cjne    a, #dnld_key, menui5
0250: 90 0E 06              mov     dptr, #dnld_cmd
0253: 11 BB                 acall   pcstr
0255: 41 D6                 ajmp    dnld
                            
                   menui5:
0257: B4 55 07              cjne    a, #upld_key, menui6
025A: 90 0E 0F              mov     dptr, #upld_cmd
025D: 11 BB                 acall   pcstr
025F: C1 9D                 ajmp    upld
                            
                   menui6:
0261: B4 4E 07              cjne    a, #nloc_key, menui7
0264: 90 0E 16              mov     dptr, #nloc_cmd
0267: 11 BB                 acall   pcstr
0269: E1 5C                 ajmp    nloc
                            
                   menui7:
026B: B4 4A 07              cjne    a, #jump_key, menui8
026E: 90 0E 23              mov     dptr, #jump_cmd
0271: 11 BB                 acall   pcstr
0273: 81 40                 ajmp    jump
                            
                   menui8:
0275: B4 48 07              cjne    a, #dump_key, menui9
0278: 90 0E 3B              mov     dptr, #dump_cmd
027B: 11 BB                 acall   pcstr
027D: 81 70                 ajmp    dump
                            
                   menui9:
027F: B4 45 07              cjne    a, #edit_key, menui10
0282: 90 0E 6D              mov     dptr, #edit_cmd
0285: 11 BB                 acall   pcstr
0287: 81 B2                 ajmp    edit
                            
                   menui10:
0289: B4 43 07              cjne    a, #clrm_key, menui11
028C: 90 0E 82              mov     dptr, #clrm_cmd
028F: 11 BB                 acall   pcstr
0291: E1 6C                 ajmp    clrm
                            
                   menui11:
0293: B4 49 08              cjne    a, #intm_key, menui12
0296: 90 0E 54              mov     dptr, #intm_cmd
0299: 11 BB                 acall   pcstr
029B: 02 08 47              ljmp    intm
                            
                   menui12:
029E: B4 3C 08              cjne    a, #eio77_key, menui13
02A1: 90 0E A8              mov     dptr, #eio77_cmd
02A4: 11 BB                 acall   pcstr
02A6: 02 08 6D              ljmp    eio77
                            
                   menui13:
02A9: B4 3E 08              cjne    a, #dio77_key, menui14
02AC: 90 0E B7              mov     dptr, #dio77_cmd
02AF: 11 BB                 acall   pcstr
02B1: 02 08 72              ljmp    dio77
                            
                   menui14:
02B4: B4 57 08              cjne    a, #crc16_key, menui15
02B7: 90 0E 98              mov     dptr, #crc16_cmd
02BA: 11 BB                 acall   pcstr
02BC: 02 07 C7              ljmp    calc_crc16
                            
                   menui15:
02BF: B4 42 08              cjne    a, #baud_key, menuiend
02C2: 90 0E C7              mov     dptr, #baud_cmd
02C5: 11 BB                 acall   pcstr
02C7: 02 07 90              ljmp    reset_baud
                   
                   menuiend:
02CA: 01 9E                 ajmp    crlf
                   
                   ;---------------------------------------------------------;
                   
                   r6r7todptr:
02CC: 8E 82                 mov     dpl, r6
02CE: 8F 83                 mov     dph, r7
02D0: 22                    ret
                   
                   dptrtor6r7:
02D1: AE 82                 mov     r6, dpl
02D3: AF 83                 mov     r7, dph
02D5: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                   ; dnlds1 = "Begin sending Intel HEX format file <ESC> to abo
                   ; dnlds2 = "Download aborted"
                   ; dnlds3 = "Download completed"
                   
                   ; 16 byte parameter table: (eight 16 bit values)
                   ;  *   0 = lines received
                   ;  *   1 = bytes received
                   ;  *   2 = bytes written
                   ;  *   3 = bytes unable to write
                   ;  *   4 = incorrect checksums
                   ;  *   5 = unexpected begin of line
                   ;  *   6 = unexpected hex digits (while waiting for bol)
                   ;  *   7 = unexpected non-hex digits (in middle of a line)
                   
                   dnld:
02D6: 90 0B ED              mov     dptr, #dnlds1   ; "begin sending file <ESC>
02D9: 11 BB                 acall   pcstr
02DB: 91 37                 acall   dnld_init
                            
                   dnld1:
                            ; look for begining of line marker ':'
02DD: 11 72                 acall   cin
02DF: B4 1B 02              cjne    a, #ESC, dnld2  ; Test for escape
02E2: 80 70                 sjmp    dnld_esc
                   
                   dnld2:
02E4: B4 3A 02              cjne    a, #':', dnld2b
02E7: 80 10                 sjmp    dnld2d
                   dnld2b:
                            ; check to see if it's a hex digit, error if it is
02E9: 31 88                 acall   asc2hex
02EB: 40 F0                 jc      dnld1
02ED: 79 06                 mov     r1, #6
02EF: 71 66                 acall   dnld_inc
02F1: 80 EA                 sjmp    dnld1
                   
                   dnld_now:
                            ; entry point for main menu detecting ':' character
02F3: 74 3A                 mov     a, #':'
02F5: 11 84                 acall   cout
02F7: 91 37                 acall   dnld_init
                   
                   dnld2d:
02F9: 79 00                 mov     r1, #0
02FB: 71 66                 acall   dnld_inc
                   
                   dnld3:
                            ; begin taking in the line of data
                   ;        mov     a, #'.'
                   ;        acall   cout
02FD: 7C 00                 mov     r4, #0          ; r4 will count up checksum
02FF: 71 85                 acall   dnld_ghex
0301: F8                    mov     r0, a           ; R0 = # of data bytes
                   ;        mov     a, #'.'
                   ;        acall   cout
0302: 71 85                 acall   dnld_ghex
0304: F5 83                 mov     dph, a          ; High byte of load address
0306: 71 85                 acall   dnld_ghex
0308: F5 82                 mov     dpl, a          ; Low byte of load address
030A: 71 85                 acall   dnld_ghex       ; Record type
030C: B4 01 02              cjne    a, #1, dnld4    ; End record?
030F: 80 29                 sjmp    dnld_end
                   dnld4:
0311: 70 1E                 jnz     dnld_unknown    ; is it a unknown record ty
                   dnld5:
0313: E8                    mov     a, r0
0314: 60 10                 jz      dnld_get_cksum
0316: 71 85                 acall   dnld_ghex       ; Get data byte
0318: FA                    mov     r2, a
0319: 79 01                 mov     r1, #1
031B: 71 66                 acall   dnld_inc        ; count total data bytes re
031D: EA                    mov     a, r2
031E: F0                    movx    @dptr, a
031F: 79 02                 mov     r1, #2
0321: 71 66                 acall   dnld_inc
0323: A3                    inc     dptr
0324: D8 ED                 djnz    r0, dnld5
                   dnld_get_cksum:
0326: 71 85                 acall   dnld_ghex       ; get checksum
0328: EC                    mov     a, r4
0329: 60 B2                 jz      dnld1           ; should always add to zero
                   dnld_sumerr:
032B: 79 04                 mov     r1, #4
032D: 71 66                 acall   dnld_inc        ; all we can do it count # 
032F: 80 AC                 sjmp    dnld1
                   
                   dnld_unknown:    ; handle unknown line type
0331: E8                    mov     a, r0
0332: 60 F2                 jz      dnld_get_cksum  ; skip data if size is zero
                   dnld_ukn2:
0334: 71 85                 acall   dnld_ghex       ; consume all of unknown da
0336: D8 FC                 djnz    r0, dnld_ukn2
0338: 80 EC                 sjmp    dnld_get_cksum
                   
                   dnld_end:
                            ; handles the proper end-of-download marker
033A: E8                    mov     a, r0
033B: 60 04                 jz      dnld_end_3      ; should usually be zero
                   dnld_end_2:
033D: 71 85                 acall   dnld_ghex       ; consume all of useless da
033F: D8 F3                 djnz    r0, dnld_ukn2
                   dnld_end_3:
0341: 71 85                 acall   dnld_ghex       ; get the last checksum
0343: EC                    mov     a, r4
0344: 70 E5                 jnz     dnld_sumerr
0346: 71 5D                 acall   dnld_dly
0348: 90 0C 3B              mov     dptr, #dnlds3   ; "download went ok..."
034B: 11 BB                 acall   pcstr
                            ; consume any cr or lf character that may have been
                            ; on the end of the last line
034D: 30 98 7A              jnb     ri, dnld_sum
0350: 11 72                 acall   cin
0352: 80 76                 sjmp    dnld_sum
                   
                   dnld_esc:
                            ; handle esc received in the download stream
0354: 71 5D                 acall   dnld_dly
0356: 90 0C 24              mov     dptr, #dnlds2   ; "download aborted."    
0359: 11 BB                 acall   pcstr
035B: 80 6D                 sjmp    dnld_sum
                   
                   ; a short delay since most terminal emulation programs
                   ; won't be ready to receive anything immediately after
                   ; they've transmitted a file... even on a fast Pentium(tm)
                   ; machine with 16550 uarts!
                   
                   dnld_dly:
035D: 78 00                 mov     r0, #0
                   dnlddly2:
035F: 79 00                 mov     r1, #0
0361: D9 FE                 djnz    r1, *           ; roughly 128k cycles, appo
0363: D8 FA                 djnz    r0, dnlddly2
0365: 22                    ret
                   
                   ; increment parameter specified by R1
                   ; note, values in Acc and R1 are destroyed
                   
                   dnld_inc:
0366: E9                    mov     a, r1
0367: 54 07                 anl     a, #00000111b   ; just in case
0369: 23                    rl      a
036A: 24 08                 add     a, #dnld_parm
036C: F9                    mov     r1, a           ; now r1 points to lsb
036D: 07                    inc     @r1
036E: E7                    mov     a, @r1
036F: 70 02                 jnz     dnldin2
0371: 09                    inc     r1
0372: 07                    inc     @r1
                   dnldin2:
0373: 22                    ret
                   
                   ; get parameter, and inc to next one (@r1)
                   ; carry clear if parameter is zero.
                   ; 16 bit value returned in dptr
                   
                   dnld_gp:
0374: D3                    setb    c
0375: 87 82                 mov     dpl, @r1
0377: 09                    inc     r1
0378: 87 83                 mov     dph, @r1
037A: 09                    inc     r1
037B: E5 82                 mov     a, dpl
037D: 70 05                 jnz     dnldgp2
037F: E5 83                 mov     a, dph
0381: 70 01                 jnz     dnldgp2
0383: C3                    clr     c
                   dnldgp2:
0384: 22                    ret
                   
                   ; a special version of ghex just for the download. Does not
                   ; look for carriage return or backspace. Handles ESC key by
                   ; poping the return address (I know, nasty, but it saves man
                   ; bytes of code in this 4k ROM) and then jumps to the esc
                   ; key handling.  This ghex doesn't echo characters, and if i
                   ; sees ':', it pops the return and jumps to an error handler
                   ; for ':' in the middle of a line. Non-hex digits also jump
                   ; to error handlers, depending on which digit.
                   
                   dnld_ghex:
                   dnldgh1:
0385: 11 72                 acall   cin
0387: 31 C1                 acall   upper
0389: B4 1B 06              cjne    a, #ESC, dnldgh3
                   dnldgh2:
038C: D0 E0                 pop     acc
038E: D0 E0                 pop     acc
0390: 80 C2                 sjmp    dnld_esc
                   dnldgh3:
0392: B4 3A 0A              cjne    a, #':', dnldgh5
                   dnldgh4:
0395: 79 05                 mov     r1, #5          ; handle unexpected beginni
0397: 71 66                 acall   dnld_inc
0399: D0 E0                 pop     acc
039B: D0 E0                 pop     acc
039D: 41 FD                 ajmp    dnld3           ; and now we're on a new li
                   dnldgh5:
039F: 31 88                 acall   asc2hex
03A1: 50 06                 jnc     dnldgh6
03A3: 79 07                 mov     r1, #7
03A5: 71 66                 acall   dnld_inc
03A7: 80 DC                 sjmp    dnldgh1
                   dnldgh6:
03A9: FA                    mov     r2, a           ; keep first digit in r2
                   dnldgh7:
03AA: 11 72                 acall   cin
03AC: 31 C1                 acall   upper
03AE: B4 1B 02              cjne    a, #ESC, dnldgh8
03B1: 80 D9                 sjmp    dnldgh2
                   dnldgh8:
03B3: B4 3A 02              cjne    a, #':', dnldgh9
03B6: 80 DD                 sjmp    dnldgh4
                   dnldgh9:
03B8: 31 88                 acall   asc2hex
03BA: 50 06                 jnc     dnldghA
03BC: 79 07                 mov     r1, #7
03BE: 71 66                 acall   dnld_inc
03C0: 80 E8                 sjmp    dnldgh7
                   dnldghA:
03C2: CA                    xch     a, r2
03C3: C4                    swap    a
03C4: 4A                    orl     a, r2
03C5: FA                    mov     r2, a
03C6: 2C                    add     a, r4           ; add into checksum
03C7: FC                    mov     r4, a
03C8: EA                    mov     a, r2           ; return value in acc
03C9: 22                    ret
                   
                   ; dnlds4 =  "Summary:"
                   ; dnlds5 =  " lines received"
                   ; dnlds6a = " bytes received"
                   ; dnlds6b = " bytes written"
                   
                   ; print out download summary
                   
                   dnld_sum:
03CA: EE                    mov     a, r6
03CB: C0 E0                 push    acc
03CD: EF                    mov     a, r7
03CE: C0 E0                 push    acc
03D0: 90 0C 54              mov     dptr, #dnlds4
03D3: 11 BB                 acall   pcstr
03D5: 79 08                 mov     r1, #dnld_parm
03D7: 7E 5F                 mov     r6, #dnlds5 & 0xff
03D9: 7F 0C                 mov     r7, #dnlds5 >> 8
03DB: 91 33                 acall   dnld_i0
03DD: 7E 72                 mov     r6, #dnlds6a & 0xff
03DF: 7F 0C                 mov     r7, #dnlds6a >> 8
03E1: 91 33                 acall   dnld_i0
03E3: 7E 85                 mov     r6, #dnlds6b & 0xff
03E5: 7F 0C                 mov     r7, #dnlds6b >> 8
03E7: 91 33                 acall   dnld_i0
                   
                   ; now print out error summary
                   
                   dnld_err:
03E9: 7A 05                 mov     r2, #5
                   dnlder2:
03EB: 71 74                 acall   dnld_gp
03ED: 40 09                 jc      dnlder3                 ; any errors?
03EF: DA FA                 djnz    r2, dnlder2
                   ; no errors, so we print the nice message
03F1: 90 0D 22              mov     dptr, #dnlds13
03F4: 11 BB                 acall   pcstr
03F6: 80 25                 sjmp    dlnd_sum_done
                   
                   dnlder3:
                   ; there were errors, so now we print 'em
03F8: 90 0C 97              mov     dptr, #dnlds7
03FB: 11 BB                 acall   pcstr
                   ; but let's not be nasty... only print if necessary
03FD: 79 0E                 mov     r1, #(dnld_parm + 6)
03FF: 7E A1                 mov     r6, #dnlds8 & 0xff
0401: 7F 0C                 mov     r7, #dnlds8 >> 8
0403: 91 25                 acall   dnld_item
0405: 7E BB                 mov     r6, #dnlds9 & 0xff
0407: 7F 0C                 mov     r7, #dnlds9 >> 8
0409: 91 25                 acall   dnld_item
040B: 7E CD                 mov     r6, #dnlds10 & 0xff
040D: 7F 0C                 mov     r7, #dnlds10 >> 8
040F: 91 25                 acall   dnld_item
0411: 7E EA                 mov     r6, #dnlds11 & 0xff
0413: 7F 0C                 mov     r7, #dnlds11 >> 8
0415: 91 25                 acall   dnld_item
0417: 7E 04                 mov     r6, #dnlds12 & 0xff
0419: 7F 0D                 mov     r7, #dnlds12 >> 8
041B: 91 25                 acall   dnld_item
                   dlnd_sum_done:
041D: D0 E0                 pop     acc
041F: FF                    mov     r7, a
0420: D0 E0                 pop     acc
0422: FE                    mov     r6, a
0423: 01 9E                 ajmp    crlf
                   
                   dnld_item:
0425: 71 74                 acall   dnld_gp                 ; error conditions
0427: 50 09                 jnc     dnld_i3
                   dnld_i2:
0429: 11 8C                 acall   sspace
042B: 12 09 D3              lcall   pint16u
042E: 51 CC                 acall   r6r7todptr
0430: 11 BB                 acall   pcstr
                   dnld_i3:
0432: 22                    ret
                   
                   dnld_i0:
0433: 71 74                 acall   dnld_gp                 ; non-error conditi
0435: 80 F2                 sjmp    dnld_i2
                   
                   ; init all dnld parms to zero.
                   
                   dnld_init:
0437: 78 08                 mov     r0, #dnld_parm
                   dnld0:
0439: 76 00                 mov     @r0, #0
043B: 08                    inc     r0
043C: B8 18 FA              cjne    r0, #dnld_parm + 16, dnld0
043F: 22                    ret
                   
                   ; dnlds7:  = "Errors:"
                   ; dnlds8:  = " bytes unable to write"
                   ; dnlds9:  = " incorrect checksums"
                   ; dnlds10: = " unexpected begin of line"
                   ; dnlds11: = " unexpected hex digits"
                   ; dnlds12: = " unexpected non-hex digits"
                   ; dnlds13: = "No errors detected"
                   
                   ;---------------------------------------------------------;
                   
                   jump:
0440: 90 0B 12              mov     dptr, #prompt8
0443: 11 BB                 acall   pcstr
0445: 51 CC                 acall   r6r7todptr
0447: 31 B4                 acall   phex16
0449: 90 0A A1              mov     dptr, #prompt4
044C: 11 BB                 acall   pcstr
044E: 31 0C                 acall   ghex16
0450: 20 D5 06              jb      psw.5, jump3
0453: 50 02                 jnc     jump2
0455: E1 57                 ajmp    abort2
                   jump2:
0457: 51 D1                 acall   dptrtor6r7
                   jump3:
0459: 11 9E                 acall   crlf
045B: 90 0D 39              mov     dptr, #runs1
045E: 11 BB                 acall   pcstr
0460: 51 CC                 acall   r6r7todptr
                   
                   jump_doit:
0462: E4                    clr     a
0463: F5 D0                 mov     psw, a
0465: 75 81 07              mov     sp, #sp_reset
0468: F5 F0                 mov     b, a
046A: 78 FF                 mov     r0, #0xff
                   clrintram:
046C: F6                    mov     @r0, a
046D: D8 FD                 djnz    r0, clrintram
046F: 73                    jmp     @a+dptr
                   
                   ;---------------------------------------------------------;
                   
                   dump:    
0470: 7A 10                 mov     r2, #16                 ; number of lines t
0472: 11 B7                 acall   dcrlf
                   dump1:
0474: 51 CC                 acall   r6r7todptr
0476: 31 B4                 acall   phex16          ; tell 'em the memory locat
0478: 74 3A                 mov     a, #':'
047A: 11 AB                 acall   cout_sp
047C: 7B 10                 mov     r3, #16                 ; r3 counts # of by
047E: 51 CC                 acall   r6r7todptr
                   dump2:
0480: E0                    movx    a, @dptr
0481: A3                    inc     dptr
0482: 31 A2                 acall   phex            ; print each byte in hex
0484: 11 8C                 acall   sspace
0486: DB F8                 djnz    r3, dump2
0488: 11 B3                 acall   dspace          ; print a couple extra spac
048A: 7B 10                 mov     r3, #16
048C: 51 CC                 acall   r6r7todptr
                   dump3:
048E: E0                    movx    a, @dptr
048F: A3                    inc     dptr
0490: 54 7F                 anl     a, #01111111b   ; avoid unprintable charact
0492: B4 7F 01              cjne    a, #127, dump3b
0495: E4                    clr     a               ; avoid 127/255 (delete/rub
                   dump3b:
0496: 24 E0                 add     a, #224
0498: 40 01                 jc      dump4
049A: E4                    clr     a               ; avoid control characters
                   dump4:
049B: 24 20                 add     a, #32
049D: 11 84                 acall   cout
049F: DB ED                 djnz    r3, dump3
04A1: 11 9E                 acall   crlf
04A3: 51 D1                 acall   dptrtor6r7
04A5: 11 7A                 acall   cinpoll
04A7: 40 05                 jc      dump4b
04A9: B4 1B 02              cjne    a, #ESC, dump4b
04AC: 01 9E                 ajmp    crlf
                   dump4b:
04AE: DA C4                 djnz    r2, dump1       ; loop back up to print nex
04B0: 01 9E                 ajmp    crlf
                   
                   ;---------------------------------------------------------;
                   
                   ; edit external ram
                   
                   edit:
04B2: 90 0B 94              mov     dptr, #edits1
04B5: 11 BB                 acall   pcstr
04B7: 51 CC                 acall   r6r7todptr
                   edit1:
04B9: 31 B4                 acall   phex16
04BB: 74 3A                 mov     a, #':'
04BD: 11 AB                 acall   cout_sp
04BF: 74 28                 mov     a, #'('
04C1: 11 84                 acall   cout
04C3: 51 D1                 acall   dptrtor6r7
04C5: E0                    movx    a, @dptr
04C6: 31 A2                 acall   phex
04C8: 90 0B 56              mov     dptr, #prompt10
04CB: 11 BB                 acall   pcstr
04CD: 11 C8                 acall   ghex
04CF: 20 D5 0E              jb      psw.5, edit2
04D2: 40 0C                 jc      edit2
04D4: 51 CC                 acall   r6r7todptr
04D6: F0                    movx    @dptr, a
04D7: 11 9E                 acall   crlf
04D9: 51 CC                 acall   r6r7todptr
04DB: A3                    inc     dptr
04DC: 51 D1                 acall   dptrtor6r7
04DE: 81 B9                 ajmp    edit1
                   edit2:
04E0: 90 0B BD              mov     dptr, #edits2
04E3: 01 BB                 ajmp    pcstr
                   
                   ;---------------------------------------------------------;
                   
                   dir:
04E5: 90 0B 30              mov     dptr, #prompt9
04E8: 11 BB                 acall   pcstr
04EA: 78 15                 mov     r0, #21
                   dir0a:
04EC: 11 8C                 acall   sspace
04EE: D8 FC                 djnz    r0, dir0a
04F0: 90 0B 41              mov     dptr, #prompt9b
04F3: 11 BB                 acall   pcstr
                   
04F5: 75 83 10              mov     dph, #(bmem >> 8)
                   dir1:
04F8: 12 08 77              lcall   find            ; find the next program in 
04FB: 40 02                 jc      dir2
                   dir_end:
04FD: 01 9E                 ajmp    crlf            ; we're done if no more fou
                   dir2:
04FF: 11 B3                 acall   dspace
0501: 75 82 20              mov     dpl, #32        ; print its name
0504: 11 BB                 acall   pcstr
0506: 75 82 20              mov     dpl, #32        ; how long is the name
0509: 31 CE                 acall   lenstr
050B: 74 21                 mov     a, #33
050D: C3                    clr     c
050E: 98                    subb    a, r0
050F: F8                    mov     r0, a
0510: 74 20                 mov     a, #SPACE       ; print the right # of spac
                   dir3:
0512: 11 84                 acall   cout
0514: D8 FC                 djnz    r0, dir3
0516: 75 82 00              mov     dpl, #0
0519: 31 B4                 acall   phex16          ; print the memory location
051B: 78 06                 mov     r0, #6
051D: 74 20                 mov     a, #SPACE
                   dir4:
051F: 11 84                 acall   cout
0521: D8 FC                 djnz    r0, dir4
0523: 75 82 04              mov     dpl, #4                 ; now figure out wh
0526: E0                    movx    a, @dptr
0527: AA 83                 mov     r2, dph                 ; save this, we're 
                   
                   dir5:
0529: B4 FE 05              cjne    a, #254, dir5b
052C: 90 0D AE              mov     dptr, #type1    ; it's an external command
052F: 80 18                 sjmp    dir7
                   dir5b:
0531: B4 FD 05              cjne    a, #253, dir5c
                   dir5bb:
0534: 90 0D C7              mov     dptr, #type4    ; it's a startup routine
0537: 80 10                 sjmp    dir7
                   dir5c:
0539: B4 23 05              cjne    a, #35, dir5d
053C: 90 0D BF              mov     dptr, #type2    ; it's an ordinary program
053F: 80 08                 sjmp    dir7
                   dir5d:
0541: B4 F9 02              cjne    a, #249, dir5e
0544: 80 EE                 sjmp    dir5bb
                   dir5e:
                   dir6:
0546: 90 0D D4              mov     dptr, #type5    ; who knows what the hell i
                   
                   dir7:
0549: 11 BB                 acall   pcstr           ; print out the type
054B: 8A 83                 mov     dph, r2                 ; go back and find 
054D: 11 9E                 acall   crlf
054F: 74 DF                 mov     a, #(emem >> 8)
0551: B5 83 02              cjne    a, dph, dir8    ; did we just print the las
0554: 81 FD                 ajmp    dir_end
                   dir8:
0556: 05 83                 inc     dph
0558: E5 83                 mov     a, dph
055A: B4 E0 9B              cjne    a, #((emem + 1) >> 8) & 0xff, dir1
055D: 81 FD                 ajmp    dir_end
                   
                   ; type1=Ext Command
                   ; type4=Startup
                   ; type2=Program
                   ; type5=???
                   
                   ;---------------------------------------------------------;
                   
                   run:
055F: 11 B7                 acall   dcrlf
0561: 7A FF                 mov     r2, #255        ; first print the menu, cou
0563: 90 10 00              mov     dptr, #bmem
0566: 15 83                 dec     dph
                   run2:
0568: 05 83                 inc     dph
056A: E5 83                 mov     a, dph
056C: B4 E0 02              cjne    a, #((emem + 1) >> 8) & 0xff, run2b
056F: 80 21                 sjmp    run3
                   run2b:
0571: 12 08 77              lcall   find
0574: 50 1C                 jnc     run3            ; have we found 'em all??
0576: 75 82 04              mov     dpl, #4
0579: E0                    movx    a, @dptr
057A: 44 03                 orl     a, #00000011b
057C: F4                    cpl     a
057D: 60 E9                 jz      run2            ; this one doesn't run... f
057F: 11 B3                 acall   dspace
0581: 0A                    inc     r2
0582: 74 41                 mov     a, #'A'                 ; print the key to 
0584: 2A                    add     a, r2
0585: 11 AB                 acall   cout_sp
0587: 11 AF                 acall   dash_sp
0589: 75 82 20              mov     dpl, #32
058C: 11 BB                 acall   pcstr           ; and the command name
058E: 11 9E                 acall   crlf
0590: A1 68                 ajmp    run2            ; and continue doing this
                   run3:
0592: BA FF 05              cjne    r2, #255, run4  ; are there any to run??
0595: 90 0A B5              mov     dptr, #prompt5
0598: 01 BB                 ajmp    pcstr
                   run4:
059A: 90 0A 89              mov     dptr, #prompt3  ; ask the big question!
059D: 11 BB                 acall   pcstr
059F: 74 41                 mov     a, #'A'
05A1: 11 84                 acall   cout
05A3: 11 95                 acall   dash
05A5: 74 41                 mov     a, #'A'                 ; such user friendl
05A7: 2A                    add     a, r2           ; even tell 'em the choices
05A8: 11 84                 acall   cout
05AA: 90 0A A1              mov     dptr, #prompt4
05AD: 11 BB                 acall   pcstr
05AF: 11 72                 acall   cin
05B1: B4 1B 02              cjne    a, #ESC, run4aa         ; they they hit <ES
05B4: 01 9E                 ajmp    crlf
                   run4aa:
05B6: FB                    mov     r3, a
05B7: 74 1F                 mov     a, #31
05B9: C3                    clr     c
05BA: 9A                    subb    a, r2
05BB: EB                    mov     a, r3
05BC: 40 02                 jc      run4a
05BE: 31 C1                 acall   upper
                   run4a:
05C0: 11 84                 acall   cout
05C2: FB                    mov     r3, a
05C3: 11 9E                 acall   crlf
                            ; check to see if it's under 32, if so convert to u
05C5: EB                    mov     a, r3
05C6: 24 BF                 add     a, #(256 - 'A')
05C8: 50 D0                 jnc     run4            ; if they typed less than '
05CA: FB                    mov     r3, a           ; R3 has the number they ty
05CB: EA                    mov     a, r2           ; A=R2 has the maximum numb
05CC: C3                    clr     c
05CD: 9B                    subb    a, r3
05CE: 40 CA                 jc      run4            ; if they typed over the ma
05D0: 0B                    inc     r3
05D1: 90 10 00              mov     dptr, #bmem
05D4: 15 83                 dec     dph
                   run5:
05D6: 05 83                 inc     dph
05D8: E5 83                 mov     a, dph
05DA: B4 E0 02              cjne    a, #((emem + 1) >> 8) & 0xff, run5b
05DD: 80 17                 sjmp    run8
                   run5b:
05DF: 12 08 77              lcall   find
05E2: 50 12                 jnc     run8            ; Shouldn't ever do this ju
05E4: 75 82 04              mov     dpl, #4
05E7: E0                    movx    a, @dptr
05E8: 44 03                 orl     a, #00000011b
05EA: F4                    cpl     a
05EB: 60 E9                 jz      run5            ; this one doesn't run... f
05ED: DB E7                 djnz    r3, run5        ; count til we find the one
05EF: 11 9E                 acall   crlf
05F1: 75 82 40              mov     dpl, #64
05F4: 81 62                 ajmp    jump_doit
                   run8:
05F6: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                   help:
05F7: 90 0D 78              mov     dptr, #help1txt
05FA: 11 BB                 acall   pcstr
                            
05FC: 7C 3F                 mov     r4, #help_key
05FE: 90 0D DD              mov     dptr, #help_cmd
0601: D1 92                 acall   help2
                            
0603: 7C 4D                 mov     r4, #dir_key
0605: 90 0D EC              mov     dptr, #dir_cmd
0608: D1 92                 acall   help2
                            
060A: 7C 52                 mov     r4, #run_key
060C: 90 0D FA              mov     dptr, #run_cmd
060F: D1 92                 acall   help2
                            
0611: 7C 44                 mov     r4, #dnld_key
0613: 90 0E 06              mov     dptr, #dnld_cmd
0616: D1 92                 acall   help2
                            
0618: 7C 55                 mov     r4, #upld_key
061A: 90 0E 0F              mov     dptr, #upld_cmd
061D: D1 92                 acall   help2
                            
061F: 7C 4E                 mov     r4, #nloc_key
0621: 90 0E 16              mov     dptr, #nloc_cmd
0624: D1 92                 acall   help2
                            
0626: 7C 4A                 mov     r4, #jump_key
0628: 90 0E 23              mov     dptr, #jump_cmd
062B: D1 92                 acall   help2
                            
062D: 7C 48                 mov     r4, #dump_key
062F: 90 0E 3B              mov     dptr, #dump_cmd
0632: D1 92                 acall   help2
                            
0634: 7C 49                 mov     r4, #intm_key
0636: 90 0E 54              mov     dptr, #intm_cmd
0639: D1 92                 acall   help2
                            
063B: 7C 45                 mov     r4, #edit_key
063D: 90 0E 6D              mov     dptr, #edit_cmd
0640: D1 92                 acall   help2
                            
0642: 7C 43                 mov     r4, #clrm_key
0644: 90 0E 82              mov     dptr, #clrm_cmd
0647: D1 92                 acall   help2
                            
0649: 7C 42                 mov     r4, #baud_key
064B: 90 0E C7              mov     dptr, #baud_cmd
064E: D1 92                 acall   help2
                            
0650: 7C 57                 mov     r4, #crc16_key
0652: 90 0E 98              mov     dptr, #crc16_cmd
0655: D1 92                 acall   help2
                            
0657: 7C 3C                 mov     r4, #eio77_key
0659: 90 0E A8              mov     dptr, #eio77_cmd
065C: D1 92                 acall   help2
                            
065E: 7C 3E                 mov     r4, #dio77_key
0660: 90 0E B7              mov     dptr, #dio77_cmd
0663: D1 92                 acall   help2
                            
0665: 90 0D 91              mov     dptr, #help2txt
0668: 11 BB                 acall   pcstr
066A: 90 10 00              mov     dptr, #bmem
                   help3:
066D: 12 08 77              lcall   find
0670: 50 1E                 jnc     help4
0672: 75 82 04              mov     dpl, #4
0675: E0                    movx    a, @dptr
0676: B4 FE 10              cjne    a, #254, help3a         ; only FE is an ext
0679: 11 B3                 acall   dspace
067B: 05 82                 inc     dpl
067D: E0                    movx    a, @dptr
067E: 11 AB                 acall   cout_sp
0680: 11 AF                 acall   dash_sp
0682: 75 82 20              mov     dpl, #32
0685: 11 BB                 acall   pcstr
0687: 11 9E                 acall   crlf
                   help3a:
0689: 05 83                 inc     dph
068B: E5 83                 mov     a, dph
068D: B4 E0 DD              cjne    a, #((emem + 1) >> 8) & 0xff, help3
                   help4:   
0690: 01 9E                 ajmp    crlf
                   
                   help2:                           ; print 11 standard lines
0692: 11 B3                 acall   dspace          ; given key in R4 and name 
0694: EC                    mov     a, r4
0695: 11 AB                 acall   cout_sp
0697: 11 AF                 acall   dash_sp
0699: 11 BB                 acall   pcstr
069B: 01 9E                 ajmp    crlf
                   
                   ;---------------------------------------------------------;
                   
                   upld:
069D: F1 25                 acall   get_mem
                            ; assume we've got the beginning address in r3/r2
                            ; and the final address in r5/r4 (r4=lsb)...
                   
                            ; print out what we'll be doing
069F: 90 0D 52              mov     dptr, #uplds3
06A2: 11 BB                 acall   pcstr
06A4: EB                    mov     a, r3
06A5: 31 A2                 acall   phex
06A7: EA                    mov     a, r2
06A8: 31 A2                 acall   phex
06AA: 90 0D 73              mov      dptr, #uplds4
06AD: 11 BB                 acall   pcstr
06AF: ED                    mov     a, r5
06B0: 31 A2                 acall   phex
06B2: EC                    mov     a, r4
06B3: 31 A2                 acall   phex
06B5: 11 9E                 acall   crlf
                   
                            ; need to adjust end location by 1...
06B7: 8D 83                 mov     dph, r5
06B9: 8C 82                 mov     dpl, r4
06BB: A3                    inc     dptr
06BC: AC 82                 mov     r4, dpl
06BE: AD 83                 mov     r5, dph
                   
06C0: 90 0B 01              mov     dptr, #prompt7
06C3: 11 BB                 acall   pcstr
06C5: 11 72                 acall   cin
06C7: B4 1B 02              cjne    a, #ESC, upld2e
06CA: E1 55                 ajmp    abort_it
                   upld2e:
06CC: 11 9E                 acall   crlf
06CE: 8A 82                 mov     dpl, r2
06D0: 8B 83                 mov     dph, r3
                   
                   upld3:
06D2: EC                    mov     a, r4           ; how many more bytes to ou
06D3: C3                    clr     c
06D4: 95 82                 subb    a, dpl
06D6: FA                    mov     r2, a
06D7: ED                    mov     a, r5
06D8: 95 83                 subb    a, dph
06DA: 70 09                 jnz     upld4           ; if >256 left, then do nex
06DC: EA                    mov     a, r2
06DD: 60 32                 jz      upld7           ; if we're all done
06DF: 54 F0                 anl     a, #11110000b
06E1: 70 02                 jnz     upld4           ; if >= 16 left, then do ne
06E3: 80 02                 sjmp    upld5           ; otherwise just finish it 
                   upld4:
06E5: 7A 10                 mov     r2, #16
                   upld5:
06E7: 74 3A                 mov     a, #':'                 ; begin the line
06E9: 11 84                 acall   cout
06EB: EA                    mov     a, r2
06EC: 31 A2                 acall   phex            ; output # of data bytes
06EE: 31 B4                 acall   phex16          ; output memory location
06F0: E5 83                 mov     a, dph
06F2: 25 82                 add     a, dpl
06F4: 2A                    add     a, r2
06F5: FB                    mov     r3, a           ; r3 will become checksum
06F6: E4                    clr     a
06F7: 31 A2                 acall   phex            ; output 00 code for data
                   upld6:
06F9: E0                    movx    a, @dptr
06FA: 31 A2                 acall   phex            ; output each byte
06FC: 2B                    add     a, r3
06FD: FB                    mov     r3, a
06FE: A3                    inc     dptr
06FF: DA F8                 djnz    r2, upld6       ; do however many bytes we 
0701: EB                    mov     a, r3
0702: F4                    cpl     a
0703: 04                    inc     a
0704: 31 A2                 acall   phex            ; and finally the checksum
0706: 11 9E                 acall   crlf
0708: 11 7A                 acall   cinpoll
070A: 40 C6                 jc      upld3
070C: B4 1B C3              cjne    a, #ESC, upld3
070F: 80 44                 sjmp    abort_it
                   upld7:
0711: 74 3A                 mov     a, #':'
0713: 11 84                 acall   cout
0715: E4                    clr     a
0716: 31 A2                 acall   phex
0718: 31 A2                 acall   phex
071A: 31 A2                 acall   phex
071C: 04                    inc     a
071D: 31 A2                 acall   phex
071F: 74 FF                 mov     a, #255
0721: 31 A2                 acall   phex
                   upld8:
0723: 01 B7                 ajmp    dcrlf
                   
                   ;---------------------------------------------------------;
                   
                   ; this thing gets the begin and end locations for
                   ; a few commands. If an esc or enter w/ no input,
                   ; it pops it's own return and returns to the menu
                   ; (nasty programming, but we need tight code for 4k rom)
                   
                   get_mem:
0725: 11 B7                 acall   dcrlf
0727: 90 0B 64              mov     dptr, #beg_str
072A: 11 BB                 acall   pcstr
072C: 31 0C                 acall   ghex16
072E: 40 21                 jc      pop_it
0730: 20 D5 1E              jb      psw.5, pop_it
0733: C0 83                 push    dph
0735: C0 82                 push    dpl
0737: 11 9E                 acall   crlf
0739: 90 0B 75              mov     dptr, #end_str
073C: 11 BB                 acall   pcstr
073E: 31 0C                 acall   ghex16
0740: AD 83                 mov     r5, dph
0742: AC 82                 mov     r4, dpl
0744: D0 E0                 pop     acc
0746: FA                    mov     r2, a
0747: D0 E0                 pop     acc
0749: FB                    mov     r3, a
074A: 40 05                 jc      pop_it
074C: 20 D5 02              jb      psw.5, pop_it
074F: 01 9E                 ajmp    crlf
                   
                   pop_it:
0751: D0 E0                 pop     acc
0753: D0 E0                 pop     acc
                   abort_it:
0755: 11 9E                 acall   crlf
                   abort2:
0757: 90 0A 65              mov     dptr, #abort
075A: 01 BB                 ajmp    pcstr
                   
                   ;---------------------------------------------------------;
                   
                   nloc:
075C: 90 0A EE              mov     dptr, #prompt6
075F: 11 BB                 acall   pcstr
0761: 31 0C                 acall   ghex16
0763: 40 F2                 jc      abort2
0765: 20 D5 EF              jb      psw.5, abort2
0768: 51 D1                 acall   dptrtor6r7
076A: 01 B7                 ajmp    dcrlf
                   
                   ;---------------------------------------------------------;
                   
                   clrm:
076C: F1 25                 acall   get_mem
076E: 90 0B 85              mov     dptr, #sure
0771: 11 BB                 acall   pcstr
0773: 11 72                 acall   cin
0775: 11 84                 acall   cout
0777: 31 C1                 acall   upper
0779: B4 59 D9              cjne    a, #'Y', abort_it
077C: 11 B7                 acall   dcrlf
                   clrm2:
                            ; now we actually do it
077E: 8B 83                 mov     dph, r3
0780: 8A 82                 mov     dpl, r2
                   clrm3:
0782: E4                    clr     a
0783: F0                    movx    @dptr, a
0784: ED                    mov     a, r5
0785: B5 83 05              cjne    a, dph, clrm4
0788: EC                    mov     a, r4
0789: B5 82 01              cjne    a, dpl, clrm4
078C: 22                    ret
                   clrm4:
078D: A3                    inc     dptr
078E: 80 F2                 sjmp    clrm3
                   ;---------------------------------------------------------;
                   
                   reset_baud:
0790: 11 B7                 acall   dcrlf
0792: 90 0E D7              mov     dptr, #baudprompt
0795: 11 BB                 acall   pcstr
                            
0797: 31 0C                 acall   ghex16
0799: 40 25                 jc      bailout
079B: 20 D5 22              jb      psw.5, bailout
079E: C0 82                 push    dpl
07A0: C0 83                 push    dph
                            
07A2: 11 9E                 acall   crlf
07A4: 90 0B 85              mov     dptr, #sure
07A7: 11 BB                 acall   pcstr
07A9: 11 72                 acall   cin
07AB: 11 84                 acall   cout
07AD: 31 C1                 acall   upper
07AF: B4 59 0A              cjne    a, #'Y', bailout_pop
07B2: 11 B7                 acall   dcrlf
                            
07B4: D0 F0                 pop     b
07B6: D0 E0                 pop     acc
07B8: 12 09 7A              lcall   setbaud
07BB: 22                    ret
                            
                   bailout_pop:
07BC: D0 E0                 pop     acc
07BE: D0 E0                 pop     acc
                   bailout:
07C0: 11 9E                 acall   crlf
07C2: 90 0A 65              mov     dptr, #abort
07C5: 01 BB                 ajmp    pcstr
                            
                   ;---------------------------------------------------------;
                   
07C7:              .equ     initial, 0xffff
07C7:              .equ     final, 0x0000
07C7:              .equ     poly, 0x1021
                   
                   calc_crc16:
07C7: F1 25                 acall   get_mem
07C9: 11 9E                 acall   crlf
                            
07CB: 51 CC                 acall   r6r7todptr
07CD: C0 82                 push    dpl
07CF: C0 83                 push    dph
07D1: 8A 82                 mov     dpl, r2
07D3: 8B 83                 mov     dph, r3
                                    
07D5: 7E FF                 mov     r6, #(initial & 0xff)
07D7: 7F FF                 mov     r7, #(initial >> 8)
07D9: 12 08 07              lcall   init_crc16
                            
07DC: 7E 21                 mov     r6, #(poly & 0xff)
07DE: 7F 10                 mov     r7, #(poly >> 8)
                   calc_loop:
07E0: E0                    movx    a, @dptr
07E1: 12 08 1B              lcall   update_crc16
                            
07E4: ED                    mov     a, r5
07E5: B5 83 1C              cjne    a, dph, calc_skip
07E8: EC                    mov     a, r4
07E9: B5 82 18              cjne    a, dpl, calc_skip
                            
07EC: 7E 00                 mov     r6, #(final & 0xff)
07EE: 7F 00                 mov     r7, #(final >> 8)
07F0: 12 08 10              lcall   finish_crc16
                            
07F3: 8A 82                 mov     dpl, r2
07F5: 8B 83                 mov     dph, r3
07F7: 12 01 B4              lcall   phex16
                            
07FA: D0 83                 pop     dph
07FC: D0 82                 pop     dpl
07FE: 12 02 D1              lcall   dptrtor6r7
                            
0801: 02 00 B7              ljmp    dcrlf
                            
                   calc_skip:
0804: A3                    inc     dptr
0805: 80 D9                 sjmp    calc_loop
                            
                   init_crc16:
0807: C0 E0                 push    acc
0809: EE                    mov     a, r6
080A: FA                    mov     r2, a
080B: EF                    mov     a, r7
080C: FB                    mov     r3, a
080D: D0 E0                 pop     acc
080F: 22                    ret
                            
                   finish_crc16:
0810: C0 E0                 push    acc
0812: EA                    mov     a, r2
0813: 6E                    xrl     a, r6
0814: FA                    mov     r2, a
0815: EB                    mov     a, r3
0816: 6F                    xrl     a, r7
0817: FB                    mov     r3, a
0818: D0 E0                 pop     acc
081A: 22                    ret
                            
                   update_crc16:
081B: C0 F0                 push    b
                            
081D: F5 F0                 mov     b, a
081F: 74 80                 mov     a, #0x80
                            
                   loop:
0821: F8                    mov     r0, a
0822: E5 F0                 mov     a, b
                            
0824: 58                    anl     a, r0
0825: 60 02                 jz      skip0
0827: 74 01                 mov     a, #1
                   skip0:
0829: F9                    mov     r1, a
082A: EB                    mov     a, r3
082B: 23                    rl      a
082C: 54 01                 anl     a, #1
082E: 69                    xrl     a, r1
082F: F9                    mov     r1, a
                            
0830: EA                    mov     a, r2
0831: 2A                    add     a, r2
0832: FA                    mov     r2, a
0833: EB                    mov     a, r3
0834: 33                    rlc     a
0835: FB                    mov     r3, a
                            
0836: E9                    mov     a, r1
0837: 60 06                 jz      skip1
                            
0839: EA                    mov     a, r2
083A: 6E                    xrl     a, r6
083B: FA                    mov     r2, a
083C: EB                    mov     a, r3
083D: 6F                    xrl     a, r7
083E: FB                    mov     r3, a
                            
                   skip1:
083F: E8                    mov     a, r0
0840: C3                    clr     c
0841: 13                    rrc     a
0842: 70 DD                 jnz     loop
                            
0844: D0 F0                 pop     b
0846: 22                    ret
                            
                   ;---------------------------------------------------------;
                   
                   intm:
0847: 12 00 9E              lcall   crlf
084A: 78 00                 mov     r0, #0
                   intm2:
084C: 12 00 9E              lcall   crlf
084F: E8                    mov     a, r0
0850: 12 01 A2              lcall   phex
0853: 74 3A                 mov     a, #':'
0855: 12 00 84              lcall   cout
                   intm3:
0858: 12 00 8C              lcall   sspace
085B: E6                    mov     a, @r0
085C: 12 01 A2              lcall   phex
085F: 08                    inc     r0
0860: B8 00 03              cjne    r0, #0, intm4
0863: 02 00 B7              ljmp    dcrlf
                   intm4:
0866: E8                    mov     a, r0
0867: 54 0F                 anl     a, #00001111b
0869: 70 ED                 jnz     intm3
086B: 80 DF                 sjmp    intm2
                   
                   ;---------------------------------------------------------;
                   
                   eio77:
086D: C2 97                 clr     p1.7
086F: 02 00 9E              ljmp    crlf
                            
                   ;---------------------------------------------------------;
                   
                   dio77:
0872: D2 97                 setb    p1.7
0874: 02 00 9E              ljmp    crlf
                   
                   ;---------------------------------------------------------;
                   
                   ; finds the next header in the external memory.
                   ; Input DPTR=point to start search (only MSB used)
                   ; Output DPTR=location of next module
                   ; C=set if a header found, C=clear if no more headers
                   
                   find:
0877: 75 82 00              mov     dpl, #0
087A: E0                    movx    a, @dptr
087B: B4 A5 14              cjne    a, #0xa5, find3
087E: A3                    inc     dptr
087F: E0                    movx    a, @dptr
0880: B4 E5 0F              cjne    a, #0xe5, find3
0883: A3                    inc     dptr
0884: E0                    movx    a, @dptr
0885: B4 E0 0A              cjne    a, #0xe0, find3
0888: A3                    inc     dptr
0889: E0                    movx    a, @dptr
088A: B4 A5 05              cjne    a, #0xa5, find3
088D: 75 82 00              mov     dpl, #0                 ; found one here!
0890: D3                    setb    c
0891: 22                    ret
                   find3:
0892: 74 DF                 mov     a, #(emem >> 8)
0894: B5 83 02              cjne    a, dph, find4   ; did we just check the end
0897: C3                    clr     c
0898: 22                    ret
                   find4:
0899: 05 83                 inc     dph             ; keep on searching
089B: 80 DA                 sjmp    find
                   
                   ;---------------------------------------------------------;
                   
                   ; r2:r3 lssrc:hssrc
                   ; r4:r5 lesrc:hesrc
                   ; r6:r7 ldst:hdst
                   
                   cpycx:
089D: 8A 82                 mov     dpl, r2
089F: 8B 83                 mov     dph, r3
08A1: E4                    clr     a
08A2: 93                    movc    a, @a+dptr
08A3: A3                    inc     dptr
08A4: AA 82                 mov     r2, dpl
08A6: AB 83                 mov     r3, dph
08A8: 8E 82                 mov     dpl, r6
08AA: 8F 83                 mov     dph, r7
08AC: F0                    movx    @dptr, a
08AD: A3                    inc     dptr
08AE: AE 82                 mov     r6, dpl
08B0: AF 83                 mov     r7, dph
08B2: EA                    mov     a, r2
08B3: 8C F0                 mov     b, r4
08B5: B5 F0 E5              cjne    a, b, cpycx
08B8: EB                    mov     a, r3
08B9: 8D F0                 mov     b, r5
08BB: B5 F0 DF              cjne    a, b, cpycx
08BE: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                   ; r2:r3 lssrc:hssrc
                   ; r4:r5 lesrc:hesrc
                   ; r6:r7 ldst:hdst
                   
                   cpyxx:
08BF: 8A 82                 mov     dpl, r2
08C1: 8B 83                 mov     dph, r3
08C3: E0                    movx    a, @dptr
08C4: A3                    inc     dptr
08C5: AA 82                 mov     r2, dpl
08C7: AB 83                 mov     r3, dph
08C9: 8E 82                 mov     dpl, r6
08CB: 8F 83                 mov     dph, r7
08CD: F0                    movx    @dptr, a
08CE: A3                    inc     dptr
08CF: AE 82                 mov     r6, dpl
08D1: AF 83                 mov     r7, dph
08D3: EA                    mov     a, r2
08D4: 8C F0                 mov     b, r4
08D6: B5 F0 E6              cjne    a, b, cpyxx
08D9: EB                    mov     a, r3
08DA: 8D F0                 mov     b, r5
08DC: B5 F0 E0              cjne    a, b, cpyxx
08DF: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                            ;-------- switch_shadow helper subroutine --------
                            switch_shadow:
08E0: 75 90 FE                      mov     p1, #mctrl_shadow
08E3: FF                            mov     r7, a
08E4: FF                            mov     r7, a
08E5: FF                            mov     r7, a
08E6: FF                            mov     r7, a
08E7: 22                            ret
                            switch_shadow_end:
                            ;-------- switch_shadow helper subroutine --------
                   
                   ; initialize the hardware on reset
                   ; copy flash to memory
                   
                   reset:
08E8: E4                    clr     a
08E9: F5 A8                 mov     ie, a
08EB: F5 B8                 mov     ip, a
08ED: 75 90 FF              mov     p1, #mctrl_reset
08F0: FF                    mov     r7, a
08F1: FF                    mov     r7, a
08F2: FF                    mov     r7, a
08F3: FF                    mov     r7, a
08F4: 75 A0 FF              mov     p2, #p2_init
08F7: 75 D0 00              mov     psw, #psw_init
08FA: 75 81 17              mov     sp, #sp_init
                            
08FD: 7A 00                 mov     r2, #0x00       ; lssrc
08FF: 7B 00                 mov     r3, #0x00       ; hssrc         
0901: 7C 00                 mov     r4, #0x00       ; lesrc
0903: 7D 20                 mov     r5, #0x20       ; hesrc         
0905: 7E 00                 mov     r6, #0x00       ; ldst
0907: 7F 00                 mov     r7, #0x00       ; hdst
0909: 12 08 9D              lcall   cpycx
                            
090C: 7A E0                 mov     r2, #(switch_shadow & 0xff)     ; lssrc
090E: 7B 08                 mov     r3, #(switch_shadow >> 8)       ; hssrc    
0910: 7C E8                 mov     r4, #(switch_shadow_end & 0xff)         ; l
0912: 7D 08                 mov     r5, #(switch_shadow_end >> 8)   ; hesrc    
0914: 7E 00                 mov     r6, #(pgm & 0xff)       ; ldst
0916: 7F 20                 mov     r7, #(pgm >> 8)                 ; hdst
0918: 12 08 9D              lcall   cpycx
091B: 12 20 00              lcall   pgm             ; switch_shadow
                            
                   ; initialize the serial port
091E: 74 F7                 mov     a, #(bc & 0xff)         ; lsb
0920: 75 F0 FF              mov     b, #(bc >> 8)   ; msb
0923: 12 09 7A              lcall   setbaud
                            
                   ; run any user initialization programs in external memory
0926: 75 F0 F9              mov     b, #249
0929: 12 09 4E              lcall   stcode
                                    
                   ; run the start-up programs in external memory
092C: 75 F0 FD              mov     b, #253
092F: 12 09 4E              lcall   stcode
                            
0932: 12 00 9E              lcall   crlf
0935: 12 00 9E              lcall   crlf
0938: 12 00 9E              lcall   crlf
093B: 12 00 9E              lcall   crlf
093E: 90 0A 46              mov     dptr, #logon
0941: 12 00 BB              lcall   pcstr
0944: 12 04 E5              lcall   dir
0947: 7E 00                 mov     r6, #(pgm & 0xff)
0949: 7F 20                 mov     r7, #(pgm >> 8)
094B: 02 01 DC              ljmp    menu
                   
                   stcode:
094E: 90 10 00              mov     dptr, #bmem      ; search for startup routi
                   stcode2:
0951: 12 08 77              lcall   find
0954: 50 23                 jnc     stcode5
0956: 75 82 04              mov     dpl, #4
0959: E0                    movx    a, @dptr
095A: B5 F0 15              cjne    a, b, stcode4   ; only startup code if matc
095D: C0 F0                 push    b
095F: C0 83                 push    dph
0961: 74 6E                 mov     a, #(stcode3 & 0xff)
0963: C0 E0                 push    acc
0965: 74 09                 mov     a, #(stcode3 >> 8)
0967: C0 E0                 push    acc
0969: 75 82 40              mov     dpl, #64
096C: E4                    clr     a
096D: 73                    jmp     @a+dptr                 ; jump to the start
                   stcode3:
096E: D0 83                 pop     dph             ; hopefully it'll return to
0970: D0 F0                 pop     b
                   stcode4:
0972: 05 83                 inc     dph
0974: E5 83                 mov     a, dph
0976: B4 E0 D8              cjne    a, #((emem + 1) >> 8) & 0xff, stcode2
                   stcode5:
0979: 22                    ret                     ; now we've executed all of
                   
                   ;---------------------------------------------------------;
                   
                   setbaud:
097A: C2 CA                 clr     tr2
097C: F5 CC                 mov     tl2, a
097E: 85 F0 CD              mov     th2, b
0981: F5 CA                 mov     rcap2l, a
0983: 85 F0 CB              mov     rcap2h, b
0986: 75 C8 30              mov     t2con, #00110000b
0989: 75 98 52              mov     scon, #01010010b
098C: D2 CA                 setb    tr2
098E: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                   ; prints the unsigned 8 bit value in Acc in base 10
                   
                   pint8u:
098F: C0 F0                 push    b
0991: C0 E0                 push    acc
0993: 80 13                 sjmp    pint8b
                   
                   ;---------------------------------------------------------;
                   
                   ; prints the signed 8 bit value in Acc in base 10
                   
                   pint8:
0995: C0 F0                 push    b
0997: C0 E0                 push    acc
0999: 30 E7 0C              jnb     acc.7, pint8b
099C: 74 2D                 mov     a, #'-'
099E: 12 00 84              lcall   cout
09A1: D0 E0                 pop     acc
09A3: C0 E0                 push    acc
09A5: F4                    cpl     a
09A6: 24 01                 add     a, #1
                   pint8b:
09A8: 75 F0 64              mov     b, #100
09AB: 84                    div     ab
09AC: D2 D5                 setb    f0
09AE: 60 07                 jz      pint8c
09B0: C2 D5                 clr     f0
09B2: 24 30                 add     a, #'0'
09B4: 12 00 84              lcall   cout
                   pint8c:
09B7: E5 F0                 mov     a, b
09B9: 75 F0 0A              mov     b, #10
09BC: 84                    div     ab
09BD: 30 D5 02              jnb     f0, pint8d
09C0: 60 05                 jz      pint8e
                   pint8d:
09C2: 24 30                 add     a, #'0'
09C4: 12 00 84              lcall   cout
                   pint8e:
09C7: E5 F0                 mov     a, b
09C9: 24 30                 add     a, #'0'
09CB: 12 00 84              lcall   cout
09CE: D0 E0                 pop     acc
09D0: D0 F0                 pop     b
09D2: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                   ; print 16 bit unsigned integer in DPTR, using base 10.
                   ; warning, destroys r2, r3, r4, r5, psw.5
                   
                   pint16u:
09D3: C0 E0                 push    acc
09D5: E8                    mov     a, r0
09D6: C0 E0                 push    acc
09D8: C2 D5                 clr     psw.5
09DA: AA 82                 mov     r2, dpl
09DC: AB 83                 mov     r3, dph
                   
                   pint16a:
09DE: 7C 10                 mov     r4, #16                 ; ten-thousands dig
09E0: 7D 27                 mov     r5, #39
09E2: 51 31                 acall   pint16x
09E4: 60 07                 jz      pint16b
09E6: 24 30                 add     a, #'0'
09E8: 12 00 84              lcall   cout
09EB: D2 D5                 setb    psw.5
                   
                   pint16b:
09ED: 7C E8                 mov     r4, #232        ; thousands digit
09EF: 7D 03                 mov     r5, #3
09F1: 51 31                 acall   pint16x
09F3: 70 03                 jnz     pint16c
09F5: 30 D5 07              jnb     psw.5, pint16d
                   pint16c:
09F8: 24 30                 add     a, #'0'
09FA: 12 00 84              lcall   cout
09FD: D2 D5                 setb    psw.5
                   
                   pint16d:
09FF: 7C 64                 mov     r4, #100        ; hundreds digit
0A01: 7D 00                 mov     r5, #0
0A03: 51 31                 acall   pint16x
0A05: 70 03                 jnz     pint16e
0A07: 30 D5 07              jnb     psw.5, pint16f
                   pint16e:
0A0A: 24 30                 add     a, #'0'
0A0C: 12 00 84              lcall   cout
0A0F: D2 D5                 setb    psw.5
                   
                   pint16f:
0A11: EA                    mov     a, r2           ; tens digit
0A12: AB F0                 mov     r3, b
0A14: 75 F0 0A              mov     b, #10
0A17: 84                    div     ab
0A18: 70 03                 jnz     pint16g
0A1A: 30 D5 05              jnb     psw.5, pint16h
                   pint16g:
0A1D: 24 30                 add     a, #'0'
0A1F: 12 00 84              lcall   cout
                   
                   pint16h:
0A22: E5 F0                 mov     a, b            ; and finally the ones digi
0A24: 8B F0                 mov     b, r3
0A26: 24 30                 add     a, #'0'
0A28: 12 00 84              lcall   cout
                   
0A2B: D0 E0                 pop     acc
0A2D: F8                    mov     r0, a
0A2E: D0 E0                 pop     acc
0A30: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                   ; ok, it's a cpu hog and a nasty way to divide, but this cod
                   ; requires only 21 bytes! Divides r2-r3 by r4-r5 and leaves
                   ; quotient in r2-r3 and returns remainder in acc. If Intel
                   ; had made a proper divide, then this would be much easier.
                   
                   pint16x:
0A31: 78 00                 mov     r0, #0
                   pint16y:
0A33: 08                    inc     r0
0A34: C3                    clr     c
0A35: EA                    mov     a, r2
0A36: 9C                    subb    a, r4
0A37: FA                    mov     r2, a
0A38: EB                    mov     a, r3
0A39: 9D                    subb    a, r5
0A3A: FB                    mov     r3, a
0A3B: 50 F6                 jnc     pint16y
0A3D: 18                    dec     r0
0A3E: EA                    mov     a, r2
0A3F: 2C                    add     a, r4
0A40: FA                    mov     r2, a
0A41: EB                    mov     a, r3
0A42: 3D                    addc    a, r5
0A43: FB                    mov     r3, a
0A44: E8                    mov     a, r0
0A45: 22                    ret
                   
                   ;---------------------------------------------------------;
                   ;                                                          ;
                   ;         Strings                                          ;
                   ;                                                          ;
                   ;---------------------------------------------------------;
                   
                   logon:
0A46: 50 41 55 4C 
      4D 4F 4E 32 
      20 76 32 2E 
      31 61 62 20 
      32 30 32 34 
      30 34 31 35 
      30 30 0D 0A 
      0D 0A 00              .db     "PAULMON2 v2.1ab 2024041500\r\n\r\n", 0
                            
                   abort:
0A65: 20 20 43 6F 
      6D 6D 61 6E 
      64 20 61 62 
      6F 72 74 65 
      64 0D 0A 0D 
      0A 00                 .db     "  Command aborted\r\n\r\n", 0
                            
                   prompt1:
0A7B: 4C 6F 63 61 
      74 69 6F 6E 
      3A 00                 .db     "Location:", 0
                            
                   prompt2:
0A85: 20 3E 20 00 
                            .db     " > ", 0
                            
                   prompt3:
0A89: 53 65 6C 65 
      63 74 20 70 
      72 6F 67 72 
      61 6D 20 74 
      6F 20 72 75 
      6E 20 28 00 
                            .db     "Select program to run (", 0
                            
                   prompt4:
0AA1: 29 20 6F 72 
      20 45 53 43 
      20 74 6F 20 
      61 62 6F 72 
      74 3A 20 00 
                            .db     ") or ESC to abort: ", 0
                            
                   prompt5:
0AB5: 4E 6F 20 70 
      72 6F 67 72 
      61 6D 20 68 
      65 61 64 65 
      72 73 20 66 
      6F 75 6E 64 
      20 69 6E 20 
      6D 65 6D 6F 
      72 79 2C 20 
      75 73 65 20 
      4A 55 4D 50 
      20 69 6E 73 
      74 65 61 64 
      0D 0A 0D 0A 
      00                    .db     "No program headers found in memory, use JU
                            
                   prompt6:
0AEE: 0D 0A 0D 0A 
      4E 65 77 20 
      6C 6F 63 61 
      74 69 6F 6E 
      3A 20 00              .db     "\r\n\r\nNew location: ", 0
                            
                   prompt7:
0B01: 50 72 65 73 
      73 20 61 6E 
      79 20 6B 65 
      79 2E 2E 2E 
      00                    .db     "Press any key...", 0
                            
                   prompt8:
0B12: 0D 0A 0D 0A 
      4A 75 6D 70 
      20 74 6F 20 
      6D 65 6D 6F 
      72 79 20 6C 
      6F 63 61 74 
      69 6F 6E 20 
      28 00                 .db     "\r\n\r\nJump to memory location (", 0
                            
                   prompt9:
0B30: 0D 0A 0D 0A 
      50 72 6F 67 
      72 61 6D 20 
      4E 61 6D 65 
      00                    .db     "\r\n\r\nProgram Name", 0
                            
                   prompt9b:
0B41: 4C 6F 63 61 
      74 69 6F 6E 
      20 20 20 20 
      20 20 54 79 
      70 65 0D 0A 
      00                    .db     "Location      Type\r\n", 0
                            
                   prompt10:
0B56: 29 20 4E 65 
      77 20 76 61 
      6C 75 65 3A 
      20 00                 .db     ") New value: ", 0
                            
                   beg_str:
0B64: 46 69 72 73 
      74 20 6C 6F 
      63 61 74 69 
      6F 6E 3A 20 
      00                    .db     "First location: ", 0
                            
                   end_str:
0B75: 4C 61 73 74 
      20 6C 6F 63 
      61 74 69 6F 
      6E 3A 20 00 
                            .db     "Last location: ", 0
                            
                   sure:
0B85: 41 72 65 20 
      79 6F 75 20 
      73 75 72 65 
      3F 20 00              .db     "Are you sure? ", 0
                            
                   edits1:
0B94: 0D 0A 0D 0A 
      45 64 69 74 
      69 6E 67 20 
      65 78 74 65 
      72 6E 61 6C 
      20 52 41 4D 
      2C 20 45 53 
      43 20 74 6F 
      20 61 62 6F 
      72 74 0D 0A 
      00                    .db     "\r\n\r\nEditing external RAM, ESC to abort
                            
                   edits2:
0BBD: 20 20 45 64 
      69 74 69 6E 
      67 20 63 6F 
      6D 70 6C 65 
      74 65 2C 20 
      74 68 69 73 
      20 6C 6F 63 
      61 74 69 6F 
      6E 20 75 6E 
      63 68 61 6E 
      67 65 64 0D 
      0A 0D 0A 00 
                            .db     "  Editing complete, this location unchange
                            
                   dnlds1:
0BED: 0D 0A 0D 0A 
      42 65 67 69 
      6E 20 74 72 
      61 6E 73 66 
      65 72 20 6F 
      66 20 49 6E 
      74 65 6C 20 
      68 65 78 20 
      66 69 6C 65 
      2C 20 45 53 
      43 20 74 6F 
      20 61 62 6F 
      72 74 0D 0A 
      0D 0A 00              .db     "\r\n\r\nBegin transfer of Intel hex file, 
                            
                   dnlds2:
0C24: 0D 0A 44 6F 
      77 6E 6C 6F 
      61 64 20 61 
      62 6F 72 74 
      65 64 0D 0A 
      0D 0A 00              .db     "\r\nDownload aborted\r\n\r\n", 0
                            
                   dnlds3:
0C3B: 0D 0A 44 6F 
      77 6E 6C 6F 
      61 64 20 63 
      6F 6D 70 6C 
      65 74 65 64 
      0D 0A 0D 0A 
      00                    .db     "\r\nDownload completed\r\n\r\n", 0
                            
                   dnlds4:
0C54: 53 75 6D 6D 
      61 72 79 3A 
      0D 0A 00              .db     "Summary:\r\n", 0
                            
                   dnlds5:
0C5F: 20 20 6C 69 
      6E 65 73 20 
      72 65 63 65 
      69 76 65 64 
      0D 0A 00              .db     "  lines received\r\n", 0
                            
                   dnlds6a:
0C72: 20 20 62 79 
      74 65 73 20 
      72 65 63 65 
      69 76 65 64 
      0D 0A 00              .db     "  bytes received\r\n", 0
                            
                   dnlds6b:
0C85: 20 20 62 79 
      74 65 73 20 
      77 72 69 74 
      74 65 6E 0D 
      0A 00                 .db     "  bytes written\r\n", 0
                            
                   dnlds7:
0C97: 45 72 72 6F 
      72 73 3A 0D 
      0A 00                 .db     "Errors:\r\n", 0
                            
                   dnlds8:
0CA1: 20 20 62 79 
      74 65 73 20 
      75 6E 61 62 
      6C 65 20 74 
      6F 20 77 72 
      69 74 65 0D 
      0A 00                 .db     "  bytes unable to write\r\n", 0
                            
                   dnlds9:
0CBB: 20 20 62 61 
      64 20 63 68 
      65 63 6B 73 
      75 6D 73 0D 
      0A 00                 .db     "  bad checksums\r\n", 0
                            
                   dnlds10:
0CCD: 20 20 75 6E 
      65 78 70 65 
      63 74 65 64 
      20 62 65 67 
      69 6E 20 6F 
      66 20 6C 69 
      6E 65 0D 0A 
      00                    .db     "  unexpected begin of line\r\n", 0
                            
                   dnlds11:
0CEA: 20 20 75 6E 
      65 78 70 65 
      63 74 65 64 
      20 68 65 78 
      20 64 69 67 
      69 74 73 0D 
      0A 00                 .db     "  unexpected hex digits\r\n", 0
                            
                   dnlds12:
0D04: 20 20 75 6E 
      65 78 70 65 
      63 74 65 64 
      20 6E 6F 6E 
      20 68 65 78 
      20 64 69 67 
      69 74 73 0D 
      0A 00                 .db     "  unexpected non hex digits\r\n", 0
                            
                   dnlds13:
0D22: 4E 6F 20 65 
      72 72 6F 72 
      73 20 64 65 
      74 65 63 74 
      65 64 0D 0A 
      0D 0A 00              .db     "No errors detected\r\n\r\n", 0
                            
                   runs1:
0D39: 0D 0A 52 75 
      6E 6E 69 6E 
      67 20 70 72 
      6F 67 72 61 
      6D 2E 2E 2E 
      0D 0A 0D 0A 
      00                    .db     "\r\nRunning program...\r\n\r\n", 0
                            
                   uplds3:
0D52: 0D 0A 0D 0A 
      53 65 6E 64 
      69 6E 67 20 
      49 6E 74 65 
      6C 20 68 65 
      78 20 66 69 
      6C 65 20 66 
      72 6F 6D 20 
      00                    .db     "\r\n\r\nSending Intel hex file from ", 0
                            
                   uplds4:
0D73: 20 74 6F 20 
      00                    .db     " to ", 0
                            
                   help1txt:
0D78: 0D 0A 0D 0A 
      53 74 61 6E 
      64 61 72 64 
      20 63 6F 6D 
      6D 61 6E 64 
      73 3A 0D 0A 
      00                    .db     "\r\n\r\nStandard commands:\r\n", 0
                            
                   help2txt:
0D91: 0D 0A 55 73 
      65 72 20 69 
      6E 73 74 61 
      6C 6C 65 64 
      20 63 6F 6D 
      6D 61 6E 64 
      73 3A 0D 0A 
      00                    .db     "\r\nUser installed commands:\r\n", 0
                            
                   type1:
0DAE: 45 78 74 65 
      72 6E 61 6C 
      20 63 6F 6D 
      6D 61 6E 64 
      00                    .db     "External command", 0
                            
                   type2:
0DBF: 50 72 6F 67 
      72 61 6D 00 
                            .db     "Program", 0
                            
                   type4:
0DC7: 53 74 61 72 
      74 75 70 20 
      63 6F 64 65 
      00                    .db     "Startup code", 0
                            
                   type5:
0DD4: 3F 3F 3F 00 
                            .db     "???", 0
                            
                   help_cmd2:
0DD8: 48 65 6C 70 
      00                    .db     "Help", 0
                            
                   help_cmd:
0DDD: 54 68 69 73 
      20 68 65 6C 
      70 20 6C 69 
      73 74 00              .db     "This help list", 0
                            
                   dir_cmd:
0DEC: 4C 69 73 74 
      20 70 72 6F 
      67 72 61 6D 
      73 00                 .db     "List programs", 0
                            
                   run_cmd:
0DFA: 52 75 6E 20 
      70 72 6F 67 
      72 61 6D 00 
                            .db     "Run program", 0
                            
                   dnld_cmd:
0E06: 44 6F 77 6E 
      6C 6F 61 64 
      00                    .db     "Download", 0
                            
                   upld_cmd:
0E0F: 55 70 6C 6F 
      61 64 00              .db     "Upload", 0
                            
                   nloc_cmd:
0E16: 4E 65 77 20 
      6C 6F 63 61 
      74 69 6F 6E 
      00                    .db     "New location", 0
                            
                   jump_cmd:
0E23: 4A 75 6D 70 
      20 74 6F 20 
      6D 65 6D 6F 
      72 79 20 6C 
      6F 63 61 74 
      69 6F 6E 00 
                            .db     "Jump to memory location", 0
                            
                   dump_cmd:
0E3B: 48 65 78 20 
      64 75 6D 70 
      20 65 78 74 
      65 72 6E 61 
      6C 20 6D 65 
      6D 6F 72 79 
      00                    .db     "Hex dump external memory", 0
                            
                   intm_cmd:
0E54: 48 65 78 20 
      64 75 6D 70 
      20 69 6E 74 
      65 72 6E 61 
      6C 20 6D 65 
      6D 6F 72 79 
      00                    .db     "Hex dump internal memory", 0
                            
                   edit_cmd:
0E6D: 45 64 69 74 
      20 65 78 74 
      65 72 6E 61 
      6C 20 6D 65 
      6D 6F 72 79 
      00                    .db     "Edit external memory", 0
                            
                   clrm_cmd:
0E82: 43 6C 65 61 
      72 20 65 78 
      74 65 72 6E 
      61 6C 20 6D 
      65 6D 6F 72 
      79 00                 .db     "Clear external memory", 0
                   
                   crc16_cmd:
0E98: 43 61 6C 63 
      75 6C 61 74 
      65 20 43 52 
      43 31 36 00 
                            .db     "Calculate CRC16", 0
                            
                   eio77_cmd:
0EA8: 45 6E 61 62 
      6C 65 20 6E 
      43 53 49 4F 
      37 37 00              .db     "Enable nCSIO77", 0
                   
                   dio77_cmd:
0EB7: 44 69 73 61 
      62 6C 65 20 
      6E 43 53 49 
      4F 37 37 00 
                            .db     "Disable nCSIO77", 0
                            
                   baud_cmd:
0EC7: 52 65 73 65 
      74 20 62 61 
      75 64 20 72 
      61 74 65 00 
                            .db     "Reset baud rate", 0
                            
                   baudprompt:
0ED7: 45 6E 74 65 
      72 20 6E 65 
      77 20 62 61 
      75 64 20 63 
      6F 6E 73 74 
      3A 20 00              .db     "Enter new baud const: ", 0
                   
