                   ; PAULMON2, a user-friendly 8051 monitor, by Paul Stoffregen
                   ; Please email comments, suggestions, bugs to paul@pjrc.com
                   
                   ; Version 2.1
                   ;        Some code size improvements, contributed by Alexand
                   ;        Download can now start from main menu prompt
                   
                   ; It's free. PAULMON2 is in the public domain. You may copy
                   ; sections of code from PAULMON2 into your own programs, eve
                   ; for commercial purposes. PAULMON2 should only be distribut
                   ; free of charge, but may be bundled as 'value-added' with o
                   ; products, such as development boards, CDROMs, etc. Please
                   ; distribute the PAULMON2.DOC file and other files, not just
                   ; the object code!
                   
                   ; The PAULMON2.EQU and PAULMON2.HDR files contain valuable
                   ; information that could help you to write programs for use
                   ; with PAULMON2.
                   
                   ; PAULMON2 is in the public domain. PAULMON2 is distributed 
                   ; the hope that it will be useful, but without any warranty;
                   ; without even the implied warranty of merchantability or fi
                   ; for a particular purpose. 
                   
                   ; You are probably reading this code to see what it looks li
                   ; and possibly learn something, or to modify it for some rea
                   ; Either is ok, but please remember that this code uses a nu
                   ; of tricks to cram all the functionality into just 4k. As a
                   ; result, the code can be difficult to read, and adding new
                   ; features can be very difficult without growing beyond 4k. 
                   ; add or modify commands in PAULMON2, please consider using 
                   ; "external command" functionality. It is easier to develop
                   ; new commands this way, and you can distribute them to othe
                   ; users. Email paul@pjrc.com if you have new PAULMON2
                   ; commands to contribute to others. Details about adding new
                   ; commands to PAULMON2 (with examples) can be found at:
                   
                   ; http://www.pjrc.com/tech/8051/pm2_docs/addons.html
                   
                   ;---------------------------------------------------------;
                   ;                                                          ;
                   ;            PAULMON2's default configuration              ;
                   ;                                                          ;
                   ;---------------------------------------------------------;
                   
                   ; PAULMON2 should be assembled using the modified AS31 assem
                   ; originally written by Ken Stauffer, many small changes by 
                   ; Stoffregen. This free assembler is available on the web at
                   ; http://www.pjrc.com/tech/8051/index.html
                   ; As well, these web pages have a fill-out form which makes 
                   ; very easy to custom configure PAULMON2. Using this form wi
                   ; edit the code for you, run the AS31 assmebler, and send yo
                   ; object code to program into your chip.
                   
                   ; These two parameters control where PAULMON2 will be assemb
                   ; and where it will attempt to LJMP at the interrupt vector 
                   
0000:              .equ     base, 0x0000            ; location for PAULMON2
0000:              .equ     vector, 0x2000          ; location to LJMP interrup
                   
                   ; These three parameters tell PAULMON2 where the user's memo
                   ; installed. "bmem" and "emem" define the space that will be
                   ; for program headers, user installed commands, start-up pro
                   ; "bmem" and "emem" should be use so they exclude memory are
                   ; perphreal devices may be mapped, as reading memory from an
                   ; may reconfigure it unexpectedly.
                   
0000:              .equ     pgm, 0x2000             ; default location for the 
0000:              .equ     bmem, 0x1000            ; where is the beginning of
0000:              .equ     emem, 0xDFFF            ; end of the memory
                   
                   ;---------------------------------------------------------;
                   ; bc = 65536 - (OSC / 32) / baud
                   ;---------------------------------------------------------;
                   ; 0xfffa @ 57600bps @ 11.059MHz
                   ;.equ    bc_h, 0xff
                   ;.equ    bc_l, 0xfa
                   ; 0xfffa @ 38400bps @ 11.059MHz
                   ;.equ    bc_h, 0xff
                   ;.equ    bc_l, 0xf7
                   ; 0xffee @ 19200bps @ 11.059MHz
                   ;.equ    bc_h, 0xff
                   ;.equ    bc_l, 0xee
                   ; 0xffdc @ 9600bps @ 11.059MHz
                   ;.equ    bc_h, 0xff
                   ;.equ    bc_l, 0xdc
                   ;---------------------------------------------------------;
                   ; 0xfff7 @ 57600bps @ 16.5888MHz
0000:              .equ     bc_h, 0xff
0000:              .equ     bc_l, 0xf7
                   ; 0xffee @ 28800bps @ 16.5888MHz
                   ;.equ    bc_h, 0xff
                   ;.equ    bc_l, 0xee
                   ; 0xffe5 @ 19200bps @ 16.5888MHz
                   ;.equ    bc_h, 0xff
                   ;.equ    bc_l, 0xe5
                   ; 0xffca @ 9600bps @ 16.5888MHz
                   ;.equ    bc_h, 0xff
                   ;.equ    bc_l, 0xca
                   ;---------------------------------------------------------;
                   
                   ; Several people didn't like the key definations in PAULMON1
                   ; Actually, I didn't like 'em either, but I never took the t
                   ; to change it.   Eventually I got used to them, but now it'
                   ; really easy to change which keys do what in PAULMON2.   Yo
                   ; can guess what to do below, but don't use lowercase.
                   
0000:              .equ     help_key, '?'           ; help screen
0000:              .equ     dir_key, 'M'            ; directory
0000:              .equ     run_key, 'R'            ; run program
0000:              .equ     dnld_key, 'D'           ; download
0000:              .equ     upld_key, 'U'           ; upload
0000:              .equ     nloc_key, 'N'           ; new memory location
0000:              .equ     jump_key, 'J'           ; jump to memory location
0000:              .equ     dump_key, 'H'           ; hex dump memory
0000:              .equ     intm_key, 'I'           ; hex dump internal memory
0000:              .equ     edit_key, 'E'           ; edit memory
0000:              .equ     clrm_key, 'C'           ; clear memory
0000:              .equ     crc16_key, 'W'          ; calculate crc16
0000:              .equ     baud_key, 'B'           ; reset baudrate
0000:              .equ     eio77_key, '<'
0000:              .equ     dio77_key, '>'
                   
0000:              .equ     psw_init, 0             ; value for psw (which reg 
0000:              .equ     p2_init, 0xff           ; boot time default page is
0000:              .equ     dnld_parm, 0x08                 ; block of 16 bytes
                   ; |00|01|02|03|04|05|06|07|08|09|0a|0b|0c|0d|0e|0f|
                   ;                         \__ sp_reset
                   ; |10|11|12|13|14|15|16|17|
                   ;                         \__ sp_init
                   ;
                   ; |r0|r1|r2|r3|r4|r5|r6|r7|  .  .  .  dnld  .  .  |
                   ; |  .  .  .  dnld  .  .  |
0000:              .equ     sp_init, 0x17           ; location of the stack
0000:              .equ     sp_reset, 0x07
                   
                   ; |P1.7|P1.6|P1.5|P1.4|P1.3|P1.2|P1.1|P1.0|
0000:              .equ     mctrl_reset,    11111111b
0000:              .equ     mctrl_shadow,   11111110b
                   
                   ;---------------------------------------------------------;
                   ;                                                          ;
                   ;                     Interrupt Vectors                    ;
                   ;  (and little bits of code crammed in the empty spaces)  ;
                   ;                                                          ;
                   ;---------------------------------------------------------;
                   
                   ;------ RESET --------------------------------------------;
0000:              .org     base
0000: 02 08 6A              ljmp    reset
                   ;------ RESET --------------------------------------------;
                   
                   ;------ IE0_VECTOR ---------------------------------------;
0003:              .org     base + 3
0003: 02 20 03              ljmp    vector + 3
                   ;------ IE0_VECTOR ---------------------------------------;
                   
                   r6r7todptr:
0006: 8E 82                 mov     dpl, r6
0008: 8F 83                 mov     dph, r7
000A: 22                    ret
                   
                   ;------ TF0_VECTOR ---------------------------------------;
000B:              .org     base + 11
000B: 02 20 0B              ljmp    vector + 11
                   ;------ TF0_VECTOR ---------------------------------------;
                   
                   dptrtor6r7:
000E: AE 82                 mov     r6, dpl
0010: AF 83                 mov     r7, dph
0012: 22                    ret
                   
                   ;------ IE1_VECTOR ---------------------------------------;
0013:              .org     base + 19
0013: 02 20 13              ljmp    vector + 19
                   ;------ IE1_VECTOR ---------------------------------------;
                   
                   dash:
0016: 74 2D                 mov     a, #'-'                 ; seems kinda trivi
0018: 01 70                 ajmp    cout            ; this appears in code, it 
001A: 00                    nop                     ; bytes, but an acall takes
                   
                   ;------ TF1_VECTOR ---------------------------------------;
001B:              .org     base + 27
001B: 02 20 1B              ljmp    vector + 27
                   ;------ TF1_VECTOR ---------------------------------------;
                   
                   cout_sp:
001E: 11 70                 acall   cout
0020: 01 6E                 ajmp    space
0022: 00                    nop
                   
                   ;------ SI0_VECTOR ---------------------------------------;
0023:              .org     base + 35
0023: 02 20 23              ljmp    vector + 35
                   ;------ SI0_VECTOR ---------------------------------------;
                   
                   dash_sp:
0026: 11 16                 acall   dash
0028: 01 6E                 ajmp    space
002A: 00                    nop
                   
                   ;------ TF2_VECTOR --- EX2_VECTOR ------------------------;
002B:              .org     base + 43
002B: 02 20 2B              ljmp    vector + 43
                   ;------ TF2_VECTOR --- EX2_VECTOR ------------------------;
                   
                   ;---------------------------------------------------------;
                   ;                                                          ;
                   ;        The jump table for user programs to call          ;
                   ;              subroutines within PAULMON                  ;
                   ;                                                          ;
                   ;---------------------------------------------------------;
                   
                   ; Update paulmon21.equ accordingly
                   
002E:              .org     base + 46
002E: 21 64                 ajmp    phex1           ; 0x2E
0030: 01 70                 ajmp    cout            ; 0x30
0032: 01 64                 ajmp    cin             ; 0x32
0034: 21 61                 ajmp    phex            ; 0x34
0036: 21 73                 ajmp    phex16          ; 0x36
0038: 21 80                 ajmp    pstr            ; 0x38
003A: 01 87                 ajmp    ghex            ; 0x3A
003C: 01 CB                 ajmp    ghex16          ; 0x3C
003E: 21 B2                 ajmp    esc             ; 0x4E
0040: 21 93                 ajmp    upper           ; 0x40
0042: 02 08 F8              ljmp    setbaud                 ; 0x42
                   pcstr_h:
0045: 02 09 C4              ljmp    pcstr           ; 0x45
0048: 01 7A                 ajmp    crlf            ; 0x48
004A: 02 01 A0              ljmp    lenstr          ; 0x4A
004D: 02 09 0D              ljmp    pint8u          ; 0x4D
0050: 02 09 13              ljmp    pint8           ; 0x50
0053: 02 09 51              ljmp    pint16u                 ; 0x53
0056: 02 08 44              ljmp    find            ; 0x56
0059: 21 47                 ajmp    asc2hex                 ; 0x59
005B: 02 07 D4              ljmp    init_crc16      ; 0x5B
005E: 02 07 E8              ljmp    update_crc16    ; 0x5E
0061: 02 07 DD              ljmp    finish_crc16    ; 0x61
                   
                   ;---------------------------------------------------------;
                   ;                                                          ;
                   ;               Subroutines for serial I/O                 ;
                   ;                                                          ;
                   ;---------------------------------------------------------;
                   
                   cin:
0064: 30 98 FD              jnb     ri, cin
0067: C2 98                 clr     ri
0069: E5 99                 mov     a, sbuf
006B: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                   dspace:
006C: 11 6E                 acall   space
                   space:
006E: 74 20                 mov     a, #' '
                   cout:
0070: 30 99 FD              jnb     ti, cout
0073: C2 99                 clr     ti              ; clr ti before the mov to 
0075: F5 99                 mov     sbuf, a
0077: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                   ; Clearing ti before reading sbuf takes care of the case whe
                   ; interrupts may be enabled... If an interrupt were to happe
                   ; between those two instructions, the serial port will just
                   ; wait a while, but in the other order and the character cou
                   ; finish transmitting (during the interrupt routine) and the
                   ; ti would be cleared and never set again by the hardware, c
                   ; the next call to cout to hang forever!
                   
                   dcrlf:                   ; print two newlines
0078: 11 7A                 acall   crlf
                   crlf:
007A: C0 E0                 push    acc             ; print one newline
007C: 74 0D                 mov     a, #13
007E: 11 70                 acall   cout
0080: 74 0A                 mov     a, #10
0082: 11 70                 acall   cout
0084: D0 E0                 pop     acc
0086: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                   ; get 2 digit hex number from serial port
                   ; c = set if ESC pressed, clear otherwise
                   ; psw.5 = set if return w/ no input, clear otherwise
                   
                   ghex:
                   ghex8:
0087: C2 D5                 clr     psw.5
                   ghex8c:
0089: 11 64                 acall   cin     ; get first digit
008B: 31 93                 acall   upper
008D: B4 1B 03              cjne    a, #27, ghex8f
                   ghex8d:
0090: D3                    setb    c
0091: E4                    clr     a
0092: 22                    ret
                   ghex8f:
0093: B4 0D 05              cjne    a, #13, ghex8h
0096: D2 D5                 setb    psw.5
0098: C3                    clr     c
0099: E4                    clr     a
009A: 22                    ret
                   ghex8h:
009B: FA                    mov     r2, a
009C: 31 47                 acall   asc2hex
009E: 40 E9                 jc      ghex8c
00A0: CA                    xch     a, r2           ; r2 will hold hex value of
00A1: 11 70                 acall   cout
                   ghex8j:
00A3: 11 64                 acall   cin     ; get second digit
00A5: 31 93                 acall   upper
00A7: B4 1B 02              cjne    a, #27, ghex8k
00AA: 80 E4                 sjmp    ghex8d
                   ghex8k:
00AC: B4 0D 03              cjne    a, #13, ghex8m
00AF: EA                    mov     a, r2
00B0: C3                    clr     c
00B1: 22                    ret
                   ghex8m:
00B2: B4 08 04              cjne    a, #8, ghex8p
                   ghex8n:
00B5: 11 70                 acall   cout
00B7: 80 D0                 sjmp    ghex8c
                   ghex8p:
00B9: B4 15 02              cjne    a, #21, ghex8q
00BC: 80 F7                 sjmp    ghex8n
                   ghex8q:
00BE: FB                    mov     r3, a
00BF: 31 47                 acall   asc2hex
00C1: 40 E0                 jc      ghex8j
00C3: CB                    xch     a, r3
00C4: 11 70                 acall   cout
00C6: EA                    mov     a, r2
00C7: C4                    swap    a
00C8: 4B                    orl     a, r3
00C9: C3                    clr     c
00CA: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                   ; carry set if esc pressed
                   ; psw.5 set if return pressed w/ no input
                   
                   ghex16:
00CB: 7A 00                 mov     r2, #0          ; start out with 0
00CD: 7B 00                 mov     r3, #0
00CF: 7C 04                 mov     r4, #4          ; number of digits left
00D1: C2 D5                 clr     psw.5
                   
                   ghex16c:
00D3: 11 64                 acall   cin
00D5: 31 93                 acall   upper
00D7: B4 1B 07              cjne    a, #27, ghex16d
00DA: D3                    setb    c               ; handle esc key
00DB: E4                    clr     a
00DC: F5 83                 mov     dph, a
00DE: F5 82                 mov     dpl, a
00E0: 22                    ret
                   ghex16d:
00E1: B4 08 02              cjne    a, #8, ghex16f
00E4: 80 03                 sjmp    ghex16k
                   ghex16f:
00E6: B4 7F 0C              cjne    a, #127, ghex16g        ; handle backspace
                   ghex16k:
00E9: BC 04 02              cjne    r4, #4, ghex16e                 ; have they
00EC: 80 E5                 sjmp    ghex16c
                   ghex16e:
00EE: 11 70                 acall   cout
00F0: 31 36                 acall   ghex16y
00F2: 0C                    inc     r4
00F3: 80 DE                 sjmp    ghex16c
                   ghex16g:
00F5: B4 0D 10              cjne    a, #13, ghex16i                 ; return ke
00F8: 8B 83                 mov     dph, r3
00FA: 8A 82                 mov     dpl, r2
00FC: BC 04 07              cjne    r4, #4, ghex16h
00FF: E4                    clr     a
0100: F5 83                 mov     dph, a
0102: F5 82                 mov     dpl, a
0104: D2 D5                 setb    psw.5
                   ghex16h:
0106: C3                    clr     c
0107: 22                    ret
                   ghex16i:
0108: FD                    mov     r5, a                   ; keep copy of orig
0109: 31 47                 acall   asc2hex
010B: 40 C6                 jc      ghex16c
010D: CD                    xch     a, r5
010E: 12 00 70              lcall   cout
0111: ED                    mov     a, r5
0112: C0 E0                 push    acc
0114: 31 25                 acall   ghex16x
0116: D0 E0                 pop     acc
0118: 2A                    add     a, r2
0119: FA                    mov     r2, a
011A: E4                    clr     a
011B: 3B                    addc    a, r3
011C: FB                    mov     r3, a
011D: DC B4                 djnz    r4, ghex16c
011F: C3                    clr     c
0120: 8A 82                 mov     dpl, r2
0122: 8B 83                 mov     dph, r3
0124: 22                    ret
                   
                   ghex16x:
                            ; multiply r3-r2 by 16 (shift left by 4)
0125: EB                    mov     a, r3
0126: C4                    swap    a
0127: 54 F0                 anl     a, #11110000b
0129: FB                    mov     r3, a
012A: EA                    mov     a, r2
012B: C4                    swap    a
012C: 54 0F                 anl     a, #00001111b
012E: 4B                    orl     a, r3
012F: FB                    mov     r3, a
0130: EA                    mov     a, r2
0131: C4                    swap    a
0132: 54 F0                 anl     a, #11110000b
0134: FA                    mov     r2, a
0135: 22                    ret
                   
                   ghex16y:
                            ; divide r3-r2 by 16 (shift right by 4)
0136: EA                    mov     a, r2
0137: C4                    swap    a
0138: 54 0F                 anl     a, #00001111b
013A: FA                    mov     r2, a
013B: EB                    mov     a, r3
013C: C4                    swap    a
013D: 54 F0                 anl     a, #11110000b
013F: 4A                    orl     a, r2
0140: FA                    mov     r2, a
0141: EB                    mov     a, r3
0142: C4                    swap    a
0143: 54 0F                 anl     a, #00001111b
0145: FB                    mov     r3, a
0146: 22                    ret
                   
                   asc2hex:
                            ; carry set if invalid input
0147: 24 D0                 add     a, #208
0149: 50 14                 jnc     hex_not
014B: 24 F6                 add     a, #246
014D: 40 04                 jc      hex_maybe
014F: 24 0A                 add     a, #10
0151: C3                    clr     c
0152: 22                    ret
                   hex_maybe:
0153: 24 F9                 add     a, #249
0155: 50 08                 jnc     hex_not
0157: 24 FA                 add     a, #250
0159: 40 04                 jc      hex_not
015B: 24 10                 add     a, #16
015D: C3                    clr     c
015E: 22                    ret
                   hex_not:
015F: D3                    setb    c
0160: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                   ; Highly code efficient resursive call phex contributed
                   ; by Alexander B. Alexandrov <abalex@cbr.spb.ru>
                   
                   phex:
                   phex8:
0161: 31 63                 acall   phex_b
                   phex_b:
0163: C4                    swap    a               ; SWAP A will be twice => A
                   phex1:
0164: C0 E0                 push    acc
0166: 54 0F                 anl     a, #15
0168: 24 90                 add     a, #0x90        ; acc is 0x9X, where X is h
016A: D4                    da      a               ; if A to F, C=1 and lower 
016B: 34 40                 addc    a, #0x40
016D: D4                    da      a
016E: 11 70                 acall   cout
0170: D0 E0                 pop     acc
0172: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                   phex16:
0173: C0 E0                 push    acc
0175: E5 83                 mov     a, dph
0177: 31 61                 acall   phex
0179: E5 82                 mov     a, dpl
017B: 31 61                 acall   phex
017D: D0 E0                 pop     acc
017F: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                   ; a not so well documented feature of pstr is that you can p
                   ; multiple consecutive strings without needing to reload dpt
                   ; (which takes 3 bytes of code!)... this is useful for inser
                   ; numbers or spaces between strings.
                   
                   pstr:
0180: C0 E0                 push    acc
                   pstr1:
0182: E0                    movx    a, @dptr
0183: A3                    inc     dptr
0184: 60 0A                 jz      pstr2
0186: A2 E7                 mov     c, acc.7
0188: 54 7F                 anl     a, #0x7F
018A: 11 70                 acall   cout
018C: 40 02                 jc      pstr2
018E: 80 F2                 sjmp    pstr1
                   pstr2:
0190: D0 E0                 pop     acc
0192: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                   ; converts the ascii code in Acc to uppercase, if it is lowe
                   ; Code efficient (saves 6 byes) upper contributed
                   ; by Alexander B. Alexandrov <abalex@cbr.spb.ru>
                   
                   upper:
0193: B4 61 00              cjne    a, #97, upper2
                   upper2:
0196: 40 07                 jc      upper4          ; end if acc < 97
0198: B4 7B 00              cjne    a, #123, upper3
                   upper3:
019B: 50 02                 jnc     upper4          ; end if acc >= 123
019D: 24 E0                 add     a, #224                 ; convert to upperc
                   upper4:
019F: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                   lenstr:
01A0: 78 00                 mov     r0, #0          ; returns length of a strin
01A2: C0 E0                 push    acc
                   lenstr1:
01A4: E0                    movx    a, @dptr
01A5: 60 08                 jz      lenstr2
01A7: A2 E7                 mov     c, acc.7
01A9: 08                    inc     r0
01AA: 40 03                 Jc      lenstr2
01AC: A3                    inc     dptr
01AD: 80 F5                 sjmp    lenstr1
                   lenstr2:
01AF: D0 E0                 pop     acc
01B1: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                   ; checks to see if <ESC> is waiting on serial port
                   ; C=clear if no <ESC>, C=set if <ESC> pressed
                   ; buffer is flushed
                   
                   esc:
01B2: C0 E0                 push    acc
01B4: C3                    clr     c
01B5: 30 98 08              jnb     ri, esc2
01B8: E5 99                 mov     a, sbuf
01BA: B4 1B 01              cjne    a, #27, esc1
01BD: D3                    setb    c
                   esc1:
01BE: C2 98                 clr     ri
                   esc2:
01C0: D0 E0                 pop     acc
01C2: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                   menu:
                   ; first we print out the prompt, which isn't as simple
                   ; as it may seem, since external code can add to the
                   ; prompt, so we've got to find and execute all of 'em.
01C3: 90 0C 63              mov     dptr, #prompt1          ; give 'em the firs
01C6: 11 45                 acall   pcstr_h
01C8: EF                    mov     a, r7
01C9: 31 61                 acall   phex
01CB: EE                    mov     a, r6
01CC: 31 61                 acall   phex
01CE: 90 0C 6B              mov     dptr, #prompt2
01D1: 31 80                 acall   pstr
                   
                   ; now we're finally past the prompt, so let's get some input
01D3: 11 64                 acall   cin             ; get the input, finally
01D5: B4 3A 04              cjne    a, #':', menu0
01D8: 51 D0                 acall   dnld_now
01DA: 80 E7                 sjmp    menu
                   menu0:
01DC: 31 93                 acall   upper
                   
                   ; push return address onto stack so we can just jump to the 
01DE: 75 F0 C3              mov     b, #(menu & 255)        ; we push the retur
01E1: C0 F0                 push    b                       ; to save code late
01E3: 75 F0 01              mov     b, #(menu >> 8)                 ; if bogus 
01E6: C0 F0                 push    b                       ; another prompt.
                   
                   ; first we'll look through memory for a program header that 
                   ; it's a user installed command which matches what the user 
                   
                   ; user installed commands need to avoid changing R6/R7, whic
                   ; the memory pointer. The stack pointer can't be changed obv
                   ; all the other general purpose registers should be availabl
                   ; user commands to alter as they wish.
                   
                   menux:
01E8: F5 F0                 mov     b, a            ; now search for external c
01EA: 90 10 00              mov     dptr, #bmem
                   menux1:
01ED: 12 08 44              lcall   find
01F0: 50 22                 jnc     menuxend        ; searched all the commands
01F2: 75 82 04              mov     dpl, #4
01F5: E0                    movx    a, @dptr
01F6: B4 FE 14              cjne    a, #254, menux2         ; only FE is an ext
01F9: 05 82                 inc     dpl
01FB: E0                    movx    a, @dptr
01FC: B5 F0 0E              cjne    a, b, menux2    ; only run if they want it
01FF: 11 6E                 acall   space
0201: 75 82 20              mov     dpl, #32
0204: 31 80                 acall   pstr            ; print command name
0206: 11 7A                 acall   crlf
0208: 75 82 40              mov     dpl, #64
020B: E4                    clr     a
020C: 73                    jmp     @a+dptr                 ; take a leap of fa
                   menux2:
020D: 05 83                 inc     dph
020F: E5 83                 mov     a, dph
0211: B4 E0 D9              cjne    a, #((emem + 1) >> 8) & 255, menux1
                   menuxend:
0214: E5 F0                 mov     a, b
                   
                   ; since we didn't find a user installed command, use the bui
                   menui1:
0216: B4 3F 07              cjne    a, #help_key, menui2
0219: 90 0D CB              mov     dptr, #help_cmd2
021C: 11 45                 acall   pcstr_h
021E: A1 CF                 ajmp    help
                            
                   menui2:
0220: B4 4D 07              cjne    a, #dir_key, menui3
0223: 90 0D D3              mov     dptr, #dir_cmd
0226: 11 45                 acall   pcstr_h
0228: 81 BD                 ajmp    dir
                            
                   menui3:
022A: B4 52 07              cjne    a, #run_key, menui4
022D: 90 0D D8              mov     dptr, #run_cmd
0230: 11 45                 acall   pcstr_h
0232: A1 37                 ajmp    run
                            
                   menui4:
0234: B4 44 07              cjne    a, #dnld_key, menui5
0237: 90 0D DC              mov     dptr, #dnld_cmd
023A: 11 45                 acall   pcstr_h
023C: 41 B3                 ajmp    dnld
                            
                   menui5:
023E: B4 55 07              cjne    a, #upld_key, menui6
0241: 90 0D DF              mov     dptr, #upld_cmd
0244: 11 45                 acall   pcstr_h
0246: C1 75                 ajmp    upld
                            
                   menui6:
0248: B4 4E 07              cjne    a, #nloc_key, menui7
024B: 90 0D E2              mov     dptr, #nloc_cmd
024E: 11 45                 acall   pcstr_h
0250: E1 31                 ajmp    nloc
                            
                   menui7:
0252: B4 4A 07              cjne    a, #jump_key, menui8
0255: 90 0D E6              mov     dptr, #jump_cmd
0258: 11 45                 acall   pcstr_h
025A: 81 1D                 ajmp    jump
                            
                   menui8:
025C: B4 48 07              cjne    a, #dump_key, menui9
025F: 90 0D EC              mov     dptr, #dump_cmd
0262: 11 45                 acall   pcstr_h
0264: 81 4D                 ajmp    dump
                            
                   menui9:
0266: B4 45 07              cjne    a, #edit_key, menui10
0269: 90 0D F8              mov     dptr, #edit_cmd
026C: 11 45                 acall   pcstr_h
026E: 81 8A                 ajmp    edit
                            
                   menui10:
0270: B4 43 07              cjne    a, #clrm_key, menui11
0273: 90 0D FD              mov     dptr, #clrm_cmd
0276: 11 45                 acall   pcstr_h
0278: E1 41                 ajmp    clrm
                            
                   menui11:
027A: B4 49 08              cjne    a, #intm_key, menui12
027D: 90 0D F2              mov     dptr, #intm_cmd
0280: 11 45                 acall   pcstr_h
0282: 02 08 14              ljmp    intm
                            
                   menui12:
0285: B4 3C 08              cjne    a, #eio77_key, menui13
0288: 90 0E 11              mov     dptr, #eio77_cmd
028B: 11 45                 acall   pcstr_h
028D: 02 08 3A              ljmp    eio77
                            
                   menui13:
0290: B4 3E 08              cjne    a, #dio77_key, menui14
0293: 90 0E 20              mov     dptr, #dio77_cmd
0296: 11 45                 acall   pcstr_h
0298: 02 08 3F              ljmp    dio77
                            
                   menui14:
029B: B4 57 08              cjne    a, #crc16_key, menui15
029E: 90 0E 01              mov     dptr, #crc16_cmd
02A1: 11 45                 acall   pcstr_h
02A3: 02 07 98              ljmp    calc_crc16
                            
                   menui15:
02A6: B4 42 08              cjne    a, #baud_key, menuiend
02A9: 90 0E 30              mov     dptr, #baud_cmd
02AC: 11 45                 acall   pcstr_h
02AE: 02 07 63              ljmp    reset_baud
                   
                   menuiend:
02B1: 01 7A                 ajmp    crlf
                   
                   ;---------------------------------------------------------;
                   
                   ; dnlds1 = "Begin sending Intel HEX format file <ESC> to abo
                   ; dnlds2 = "Download aborted"
                   ; dnlds3 = "Download completed"
                   
                   ; 16 byte parameter table: (eight 16 bit values)
                   ;  *   0 = lines received
                   ;  *   1 = bytes received
                   ;  *   2 = bytes written
                   ;  *   3 = bytes unable to write
                   ;  *   4 = incorrect checksums
                   ;  *   5 = unexpected begin of line
                   ;  *   6 = unexpected hex digits (while waiting for bol)
                   ;  *   7 = unexpected non-hex digits (in middle of a line)
                   
                   dnld:
02B3: 90 0C FD              mov     dptr, #dnlds1   ; "begin sending file <ESC>
02B6: 11 45                 acall   pcstr_h
02B8: 91 14                 acall   dnld_init
                            
                   dnld1:
                            ; look for begining of line marker ':'
02BA: 11 64                 acall   cin
02BC: B4 1B 02              cjne    a, #27, dnld2   ; Test for escape
02BF: 80 70                 sjmp    dnld_esc
                   
                   dnld2:
02C1: B4 3A 02              cjne    a, #':', dnld2b
02C4: 80 10                 sjmp    dnld2d
                   dnld2b:
                            ; check to see if it's a hex digit, error if it is
02C6: 31 47                 acall   asc2hex
02C8: 40 F0                 jc      dnld1
02CA: 79 06                 mov     r1, #6
02CC: 71 43                 acall   dnld_inc
02CE: 80 EA                 sjmp    dnld1
                   
                   dnld_now:
                            ; entry point for main menu detecting ':' character
02D0: 74 3A                 mov     a, #':'
02D2: 11 70                 acall   cout
02D4: 91 14                 acall   dnld_init
                   
                   dnld2d:
02D6: 79 00                 mov     r1, #0
02D8: 71 43                 acall   dnld_inc
                   
                   dnld3:
                            ; begin taking in the line of data
                            ; mov   a, #'.'
                            ; acall         cout
02DA: 7C 00                 mov     r4, #0          ; r4 will count up checksum
02DC: 71 62                 acall   dnld_ghex
02DE: F8                    mov     r0, a           ; R0 = # of data bytes
                            ; mov   a, #'.'
                            ; acall         cout
02DF: 71 62                 acall   dnld_ghex
02E1: F5 83                 mov     dph, a          ; High byte of load address
02E3: 71 62                 acall   dnld_ghex
02E5: F5 82                 mov     dpl, a          ; Low byte of load address
02E7: 71 62                 acall   dnld_ghex       ; Record type
02E9: B4 01 02              cjne    a, #1, dnld4    ; End record?
02EC: 80 29                 sjmp    dnld_end
                   dnld4:
02EE: 70 1E                 jnz     dnld_unknown    ; is it a unknown record ty
                   dnld5:
02F0: E8                    mov     a, r0
02F1: 60 10                 jz      dnld_get_cksum
02F3: 71 62                 acall   dnld_ghex       ; Get data byte
02F5: FA                    mov     r2, a
02F6: 79 01                 mov     r1, #1
02F8: 71 43                 acall   dnld_inc        ; count total data bytes re
02FA: EA                    mov     a, r2
02FB: F0                    movx    @dptr, a
02FC: 79 02                 mov     r1, #2
02FE: 71 43                 acall   dnld_inc
0300: A3                    inc     dptr
0301: D8 ED                 djnz    r0, dnld5
                   dnld_get_cksum:
0303: 71 62                 acall   dnld_ghex       ; get checksum
0305: EC                    mov     a, r4
0306: 60 B2                 jz      dnld1           ; should always add to zero
                   dnld_sumerr:
0308: 79 04                 mov     r1, #4
030A: 71 43                 acall   dnld_inc        ; all we can do it count # 
030C: 80 AC                 sjmp    dnld1
                   
                   dnld_unknown:    ; handle unknown line type
030E: E8                    mov     a, r0
030F: 60 F2                 jz      dnld_get_cksum  ; skip data if size is zero
                   dnld_ukn2:
0311: 71 62                 acall   dnld_ghex       ; consume all of unknown da
0313: D8 FC                 djnz    r0, dnld_ukn2
0315: 80 EC                 sjmp    dnld_get_cksum
                   
                   dnld_end:
                            ; handles the proper end-of-download marker
0317: E8                    mov     a, r0
0318: 60 04                 jz      dnld_end_3      ; should usually be zero
                   dnld_end_2:
031A: 71 62                 acall   dnld_ghex       ; consume all of useless da
031C: D8 F3                 djnz    r0, dnld_ukn2
                   dnld_end_3:
031E: 71 62                 acall   dnld_ghex       ; get the last checksum
0320: EC                    mov     a, r4
0321: 70 E5                 jnz     dnld_sumerr
0323: 71 3A                 acall   dnld_dly
0325: 90 0D 1C              mov     dptr, #dnlds3   ; "download went ok..."
0328: 11 45                 acall   pcstr_h
                            ; consume any cr or lf character that may have been
                            ; on the end of the last line
032A: 30 98 7A              jnb     ri, dnld_sum
032D: 11 64                 acall   cin
032F: 80 76                 sjmp    dnld_sum
                   
                   dnld_esc:
                            ; handle esc received in the download stream
0331: 71 3A                 acall   dnld_dly
0333: 90 0D 14              mov     dptr, #dnlds2   ; "download aborted."    
0336: 11 45                 acall   pcstr_h
0338: 80 6D                 sjmp    dnld_sum
                   
                   ; a short delay since most terminal emulation programs
                   ; won't be ready to receive anything immediately after
                   ; they've transmitted a file... even on a fast Pentium(tm)
                   ; machine with 16550 uarts!
                   
                   dnld_dly:
033A: 78 00                 mov     r0, #0
                   dnlddly2:
033C: 79 00                 mov     r1, #0
033E: D9 FE                 djnz    r1, *           ; roughly 128k cycles, appo
0340: D8 FA                 djnz    r0, dnlddly2
0342: 22                    ret
                   
                   ; increment parameter specified by R1
                   ; note, values in Acc and R1 are destroyed
                   
                   dnld_inc:
0343: E9                    mov     a, r1
0344: 54 07                 anl     a, #00000111b   ; just in case
0346: 23                    rl      a
0347: 24 08                 add     a, #dnld_parm
0349: F9                    mov     r1, a           ; now r1 points to lsb
034A: 07                    inc     @r1
034B: E7                    mov     a, @r1
034C: 70 02                 jnz     dnldin2
034E: 09                    inc     r1
034F: 07                    inc     @r1
                   dnldin2:
0350: 22                    ret
                   
                   ; get parameter, and inc to next one (@r1)
                   ; carry clear if parameter is zero.
                   ; 16 bit value returned in dptr
                   
                   dnld_gp:
0351: D3                    setb    c
0352: 87 82                 mov     dpl, @r1
0354: 09                    inc     r1
0355: 87 83                 mov     dph, @r1
0357: 09                    inc     r1
0358: E5 82                 mov     a, dpl
035A: 70 05                 jnz     dnldgp2
035C: E5 83                 mov     a, dph
035E: 70 01                 jnz     dnldgp2
0360: C3                    clr     c
                   dnldgp2:
0361: 22                    ret
                   
                   ; a special version of ghex just for the download. Does not
                   ; look for carriage return or backspace. Handles ESC key by
                   ; poping the return address (I know, nasty, but it saves man
                   ; bytes of code in this 4k ROM) and then jumps to the esc
                   ; key handling.  This ghex doesn't echo characters, and if i
                   ; sees ':', it pops the return and jumps to an error handler
                   ; for ':' in the middle of a line. Non-hex digits also jump
                   ; to error handlers, depending on which digit.
                   
                   dnld_ghex:
                   dnldgh1:
0362: 11 64                 acall   cin
0364: 31 93                 acall   upper
0366: B4 1B 06              cjne    a, #27, dnldgh3
                   dnldgh2:
0369: D0 E0                 pop     acc
036B: D0 E0                 pop     acc
036D: 80 C2                 sjmp    dnld_esc
                   dnldgh3:
036F: B4 3A 0A              cjne    a, #':', dnldgh5
                   dnldgh4:
0372: 79 05                 mov     r1, #5          ; handle unexpected beginni
0374: 71 43                 acall   dnld_inc
0376: D0 E0                 pop     acc
0378: D0 E0                 pop     acc
037A: 41 DA                 ajmp    dnld3           ; and now we're on a new li
                   dnldgh5:
037C: 31 47                 acall   asc2hex
037E: 50 06                 jnc     dnldgh6
0380: 79 07                 mov     r1, #7
0382: 71 43                 acall   dnld_inc
0384: 80 DC                 sjmp    dnldgh1
                   dnldgh6:
0386: FA                    mov     r2, a           ; keep first digit in r2
                   dnldgh7:
0387: 11 64                 acall   cin
0389: 31 93                 acall   upper
038B: B4 1B 02              cjne    a, #27, dnldgh8
038E: 80 D9                 sjmp    dnldgh2
                   dnldgh8:
0390: B4 3A 02              cjne    a, #':', dnldgh9
0393: 80 DD                 sjmp    dnldgh4
                   dnldgh9:
0395: 31 47                 acall   asc2hex
0397: 50 06                 jnc     dnldghA
0399: 79 07                 mov     r1, #7
039B: 71 43                 acall   dnld_inc
039D: 80 E8                 sjmp    dnldgh7
                   dnldghA:
039F: CA                    xch     a, r2
03A0: C4                    swap    a
03A1: 4A                    orl     a, r2
03A2: FA                    mov     r2, a
03A3: 2C                    add     a, r4           ; add into checksum
03A4: FC                    mov     r4, a
03A5: EA                    mov     a, r2           ; return value in acc
03A6: 22                    ret
                   
                   ; dnlds4 =  "Summary:"
                   ; dnlds5 =  " lines received"
                   ; dnlds6a = " bytes received"
                   ; dnlds6b = " bytes written"
                   
                   ; print out download summary
                   
                   dnld_sum:
03A7: EE                    mov     a, r6
03A8: C0 E0                 push    acc
03AA: EF                    mov     a, r7
03AB: C0 E0                 push    acc
03AD: 90 0D 23              mov     dptr, #dnlds4
03B0: 11 45                 acall   pcstr_h
03B2: 79 08                 mov     r1, #dnld_parm
03B4: 7E 2C                 mov     r6, #dnlds5 & 255
03B6: 7F 0D                 mov     r7, #dnlds5 >> 8
03B8: 91 10                 acall   dnld_i0
03BA: 7E 32                 mov     r6, #dnlds6a & 255
03BC: 7F 0D                 mov     r7, #dnlds6a >> 8
03BE: 91 10                 acall   dnld_i0
03C0: 7E 37                 mov     r6, #dnlds6b & 255
03C2: 7F 0D                 mov     r7, #dnlds6b >> 8
03C4: 91 10                 acall   dnld_i0
                   
                   ; now print out error summary
                   
                   dnld_err:
03C6: 7A 05                 mov     r2, #5
                   dnlder2:
03C8: 71 51                 acall   dnld_gp
03CA: 40 09                 jc      dnlder3                 ; any errors?
03CC: DA FA                 djnz    r2, dnlder2
                   ; no errors, so we print the nice message
03CE: 90 0D 73              mov     dptr, #dnlds13
03D1: 11 45                 acall   pcstr_h
03D3: 80 25                 sjmp    dlnd_sum_done
                   
                   dnlder3:
                   ; there were errors, so now we print 'em
03D5: 90 0D 42              mov     dptr, #dnlds7
03D8: 11 45                 acall   pcstr_h
                   ; but let's not be nasty... only print if necessary
03DA: 79 0E                 mov     r1, #(dnld_parm + 6)
03DC: 7E 46                 mov     r6, #dnlds8 & 255
03DE: 7F 0D                 mov     r7, #dnlds8 >> 8
03E0: 91 02                 acall   dnld_item
03E2: 7E 57                 mov     r6, #dnlds9 & 255
03E4: 7F 0D                 mov     r7, #dnlds9 >> 8
03E6: 91 02                 acall   dnld_item
03E8: 7E 5F                 mov     r6, #dnlds10 & 255
03EA: 7F 0D                 mov     r7, #dnlds10 >> 8
03EC: 91 02                 acall   dnld_item
03EE: 7E 65                 mov     r6, #dnlds11 & 255
03F0: 7F 0D                 mov     r7, #dnlds11 >> 8
03F2: 91 02                 acall   dnld_item
03F4: 7E 6A                 mov     r6, #dnlds12 & 255
03F6: 7F 0D                 mov     r7, #dnlds12 >> 8
03F8: 91 02                 acall   dnld_item
                   dlnd_sum_done:
03FA: D0 E0                 pop     acc
03FC: FF                    mov     r7, a
03FD: D0 E0                 pop     acc
03FF: FE                    mov     r6, a
0400: 01 7A                 ajmp    crlf
                   
                   dnld_item:
0402: 71 51                 acall   dnld_gp                 ; error conditions
0404: 50 09                 jnc     dnld_i3
                   dnld_i2:
0406: 11 6E                 acall   space
0408: 12 09 51              lcall   pint16u
040B: 11 06                 acall   r6r7todptr
040D: 11 45                 acall   pcstr_h
                   dnld_i3:
040F: 22                    ret
                   
                   dnld_i0:
0410: 71 51                 acall   dnld_gp                 ; non-error conditi
0412: 80 F2                 sjmp    dnld_i2
                   
                   ; init all dnld parms to zero.
                   
                   dnld_init:
0414: 78 08                 mov     r0, #dnld_parm
                   dnld0:
0416: 76 00                 mov     @r0, #0
0418: 08                    inc     r0
0419: B8 18 FA              cjne    r0, #dnld_parm + 16, dnld0
041C: 22                    ret
                   
                   ; dnlds7:  = "Errors:"
                   ; dnlds8:  = " bytes unable to write"
                   ; dnlds9:  = " incorrect checksums"
                   ; dnlds10: = " unexpected begin of line"
                   ; dnlds11: = " unexpected hex digits"
                   ; dnlds12: = " unexpected non-hex digits"
                   ; dnlds13: = "No errors detected"
                   
                   ;---------------------------------------------------------;
                   
                   jump:
041D: 90 0C A5              mov     dptr, #prompt8
0420: 11 45                 acall   pcstr_h
0422: 11 06                 acall   r6r7todptr
0424: 31 73                 acall   phex16
0426: 90 0C 73              mov     dptr, #prompt4
0429: 11 45                 acall   pcstr_h
042B: 11 CB                 acall   ghex16
042D: 20 D5 06              jb      psw.5, jump3
0430: 50 02                 jnc     jump2
0432: E1 2C                 ajmp    abort2
                   jump2:
0434: 11 0E                 acall   dptrtor6r7
                   jump3:
0436: 11 7A                 acall   crlf
0438: 90 0D 81              mov     dptr, #runs1
043B: 11 45                 acall   pcstr_h
043D: 11 06                 acall   r6r7todptr
                   
                   jump_doit:
043F: E4                    clr     a
0440: F5 D0                 mov     psw, a
0442: 75 81 07              mov     sp, #sp_reset
0445: F5 F0                 mov     b, a
0447: 78 FF                 mov     r0, #0xff
                   clrintram:
0449: F6                    mov     @r0, a
044A: D8 FD                 djnz    r0, clrintram
044C: 73                    jmp     @a+dptr
                   
                   ;---------------------------------------------------------;
                   
                   dump:    
044D: 7A 10                 mov     r2, #16                 ; number of lines t
044F: 11 78                 acall   dcrlf
                   dump1:
0451: 11 06                 acall   r6r7todptr
0453: 31 73                 acall   phex16          ; tell 'em the memory locat
0455: 74 3A                 mov     a, #':'
0457: 11 1E                 acall   cout_sp
0459: 7B 10                 mov     r3, #16                 ; r3 counts # of by
045B: 11 06                 acall   r6r7todptr
                   dump2:
045D: E0                    movx    a, @dptr
045E: A3                    inc     dptr
045F: 31 61                 acall   phex            ; print each byte in hex
0461: 11 6E                 acall   space
0463: DB F8                 djnz    r3, dump2
0465: 11 6C                 acall   dspace          ; print a couple extra spac
0467: 7B 10                 mov     r3, #16
0469: 11 06                 acall   r6r7todptr
                   dump3:
046B: E0                    movx    a, @dptr
046C: A3                    inc     dptr
046D: 54 7F                 anl     a, #01111111b   ; avoid unprintable charact
046F: B4 7F 01              cjne    a, #127, dump3b
0472: E4                    clr     a               ; avoid 127/255 (delete/rub
                   dump3b:
0473: 24 E0                 add     a, #224
0475: 40 01                 jc      dump4
0477: E4                    clr     a               ; avoid control characters
                   dump4:
0478: 24 20                 add     a, #32
047A: 11 70                 acall   cout
047C: DB ED                 djnz    r3, dump3
047E: 11 7A                 acall   crlf
0480: 11 0E                 acall   dptrtor6r7
0482: 31 B2                 acall   esc
0484: 40 02                 jc      dump5
0486: DA C9                 djnz    r2, dump1       ; loop back up to print nex
                   dump5:
0488: 01 7A                 ajmp    crlf
                   
                   ;---------------------------------------------------------;
                   
                   ; edit external ram
                   
                   edit:
048A: 90 0C E7              mov     dptr, #edits1
048D: 11 45                 acall   pcstr_h
048F: 11 06                 acall   r6r7todptr
                   edit1:
0491: 31 73                 acall   phex16
0493: 74 3A                 mov     a, #':'
0495: 11 1E                 acall   cout_sp
0497: 74 28                 mov     a, #'('
0499: 11 70                 acall   cout
049B: 11 0E                 acall   dptrtor6r7
049D: E0                    movx    a, @dptr
049E: 31 61                 acall   phex
04A0: 90 0C C0              mov     dptr, #prompt10
04A3: 11 45                 acall   pcstr_h
04A5: 11 87                 acall   ghex
04A7: 20 D5 0E              jb      psw.5, edit2
04AA: 40 0C                 jc      edit2
04AC: 11 06                 acall   r6r7todptr
04AE: F0                    movx    @dptr, a
04AF: 11 7A                 acall   crlf
04B1: 11 06                 acall   r6r7todptr
04B3: A3                    inc     dptr
04B4: 11 0E                 acall   dptrtor6r7
04B6: 81 91                 ajmp    edit1
                   edit2:
04B8: 90 0C F2              mov     dptr, #edits2
04BB: 01 45                 ajmp    pcstr_h
                   
                   ;---------------------------------------------------------;
                   
                   dir:
04BD: 90 0C AF              mov     dptr, #prompt9
04C0: 11 45                 acall   pcstr_h
04C2: 78 15                 mov     r0, #21
                   dir0a:
04C4: 11 6E                 acall   space
04C6: D8 FC                 djnz    r0, dir0a
04C8: 90 0C B6              mov     dptr, #prompt9b
04CB: 11 45                 acall   pcstr_h
                   
04CD: 75 83 10              mov     dph, #(bmem >> 8)
                   dir1:
04D0: 12 08 44              lcall   find            ; find the next program in 
04D3: 40 02                 jc      dir2
                   dir_end:
04D5: 01 7A                 ajmp    crlf            ; we're done if no more fou
                   dir2:
04D7: 11 6C                 acall   dspace
04D9: 75 82 20              mov     dpl, #32        ; print its name
04DC: 31 80                 acall   pstr
04DE: 75 82 20              mov     dpl, #32        ; how long is the name
04E1: 31 A0                 acall   lenstr
04E3: 74 21                 mov     a, #33
04E5: C3                    clr     c
04E6: 98                    subb    a, r0
04E7: F8                    mov     r0, a
04E8: 74 20                 mov     a, #' '                 ; print the right #
                   dir3:
04EA: 11 70                 acall   cout
04EC: D8 FC                 djnz    r0, dir3
04EE: 75 82 00              mov     dpl, #0
04F1: 31 73                 acall   phex16          ; print the memory location
04F3: 78 06                 mov     r0, #6
04F5: 74 20                 mov     a, #' '
                   dir4:
04F7: 11 70                 acall   cout
04F9: D8 FC                 djnz    r0, dir4
04FB: 75 82 04              mov     dpl, #4                 ; now figure out wh
04FE: E0                    movx    a, @dptr
04FF: AA 83                 mov     r2, dph                 ; save this, we're 
                   
                   dir5:
0501: B4 FE 05              cjne    a, #254, dir5b
0504: 90 0D B9              mov     dptr, #type1    ; it's an external command
0507: 80 18                 sjmp    dir7
                   dir5b:
0509: B4 FD 05              cjne    a, #253, dir5c
                   dir5bb:
050C: 90 0D C0              mov     dptr, #type4    ; it's a startup routine
050F: 80 10                 sjmp    dir7
                   dir5c:
0511: B4 23 05              cjne    a, #35, dir5d
0514: 90 0D BD              mov     dptr, #type2    ; it's an ordinary program
0517: 80 08                 sjmp    dir7
                   dir5d:
0519: B4 F9 02              cjne    a, #249, dir5e
051C: 80 EE                 sjmp    dir5bb
                   dir5e:
                   dir6:
051E: 90 0D C7              mov     dptr, #type5    ; who knows what the hell i
                   
                   dir7:
0521: 11 45                 acall   pcstr_h                 ; print out the typ
0523: 8A 83                 mov     dph, r2                 ; go back and find 
0525: 11 7A                 acall   crlf
0527: 74 DF                 mov     a, #(emem >> 8)
0529: B5 83 02              cjne    a, dph, dir8    ; did we just print the las
052C: 81 D5                 ajmp    dir_end
                   dir8:
052E: 05 83                 inc     dph
0530: E5 83                 mov     a, dph
0532: B4 E0 9B              cjne    a, #((emem + 1) >> 8) & 255, dir1
0535: 81 D5                 ajmp    dir_end
                   
                   ; type1=Ext Command
                   ; type4=Startup
                   ; type2=Program
                   ; type5=???
                   
                   ;---------------------------------------------------------;
                   
                   run:
0537: 11 78                 acall   dcrlf
0539: 7A FF                 mov     r2, #255        ; first print the menu, cou
053B: 90 10 00              mov     dptr, #bmem
053E: 15 83                 dec     dph
                   run2:
0540: 05 83                 inc     dph
0542: E5 83                 mov     a, dph
0544: B4 E0 02              cjne    a, #((emem + 1) >> 8) & 255, run2b
0547: 80 21                 sjmp    run3
                   run2b:
0549: 12 08 44              lcall   find
054C: 50 1C                 jnc     run3            ; have we found 'em all??
054E: 75 82 04              mov     dpl, #4
0551: E0                    movx    a, @dptr
0552: 44 03                 orl     a, #00000011b
0554: F4                    cpl     a
0555: 60 E9                 jz      run2            ; this one doesn't run... f
0557: 11 6C                 acall   dspace
0559: 0A                    inc     r2
055A: 74 41                 mov     a, #'A'                 ; print the key to 
055C: 2A                    add     a, r2
055D: 11 1E                 acall   cout_sp
055F: 11 26                 acall   dash_sp
0561: 75 82 20              mov     dpl, #32
0564: 31 80                 acall   pstr            ; and the command name
0566: 11 7A                 acall   crlf
0568: A1 40                 ajmp    run2            ; and continue doing this
                   run3:
056A: BA FF 05              cjne    r2, #255, run4  ; are there any to run??
056D: 90 0C 7C              mov     dptr, #prompt5
0570: 01 45                 ajmp    pcstr_h
                   run4:
0572: 90 0C 6E              mov     dptr, #prompt3  ; ask the big question!
0575: 11 45                 acall   pcstr_h
0577: 74 41                 mov     a, #'A'
0579: 11 70                 acall   cout
057B: 11 16                 acall   dash
057D: 74 41                 mov     a, #'A'                 ; such user friendl
057F: 2A                    add     a, r2           ; even tell 'em the choices
0580: 11 70                 acall   cout
0582: 90 0C 73              mov     dptr, #prompt4
0585: 11 45                 acall   pcstr_h
0587: 11 64                 acall   cin
0589: B4 1B 02              cjne    a, #27, run4aa  ; they they hit <ESC>
058C: 01 7A                 ajmp    crlf
                   run4aa:
058E: FB                    mov     r3, a
058F: 74 1F                 mov     a, #31
0591: C3                    clr     c
0592: 9A                    subb    a, r2
0593: EB                    mov     a, r3
0594: 40 02                 jc      run4a
0596: 31 93                 acall   upper
                   run4a:
0598: 11 70                 acall   cout
059A: FB                    mov     r3, a
059B: 11 7A                 acall   crlf
                            ; check to see if it's under 32, if so convert to u
059D: EB                    mov     a, r3
059E: 24 BF                 add     a, #(256 - 'A')
05A0: 50 D0                 jnc     run4            ; if they typed less than '
05A2: FB                    mov     r3, a           ; R3 has the number they ty
05A3: EA                    mov     a, r2           ; A=R2 has the maximum numb
05A4: C3                    clr     c
05A5: 9B                    subb    a, r3
05A6: 40 CA                 jc      run4            ; if they typed over the ma
05A8: 0B                    inc     r3
05A9: 90 10 00              mov     dptr, #bmem
05AC: 15 83                 dec     dph
                   run5:
05AE: 05 83                 inc     dph
05B0: E5 83                 mov     a, dph
05B2: B4 E0 02              cjne    a, #((emem + 1) >> 8) & 255, run5b
05B5: 80 17                 sjmp    run8
                   run5b:
05B7: 12 08 44              lcall   find
05BA: 50 12                 jnc     run8            ; Shouldn't ever do this ju
05BC: 75 82 04              mov     dpl, #4
05BF: E0                    movx    a, @dptr
05C0: 44 03                 orl     a, #00000011b
05C2: F4                    cpl     a
05C3: 60 E9                 jz      run5            ; this one doesn't run... f
05C5: DB E7                 djnz    r3, run5        ; count til we find the one
05C7: 11 7A                 acall   crlf
05C9: 75 82 40              mov     dpl, #64
05CC: 81 3F                 ajmp    jump_doit
                   run8:
05CE: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                   help:
05CF: 90 0D A1              mov     dptr, #help1txt
05D2: 11 45                 acall   pcstr_h
                            
05D4: 7C 3F                 mov     r4, #help_key
05D6: 90 0D CE              mov     dptr, #help_cmd
05D9: D1 6A                 acall   help2
                            
05DB: 7C 4D                 mov     r4, #dir_key
05DD: 90 0D D3              mov     dptr, #dir_cmd
05E0: D1 6A                 acall   help2
                            
05E2: 7C 52                 mov     r4, #run_key
05E4: 90 0D D8              mov     dptr, #run_cmd
05E7: D1 6A                 acall   help2
                            
05E9: 7C 44                 mov     r4, #dnld_key
05EB: 90 0D DC              mov     dptr, #dnld_cmd
05EE: D1 6A                 acall   help2
                            
05F0: 7C 55                 mov     r4, #upld_key
05F2: 90 0D DF              mov     dptr, #upld_cmd
05F5: D1 6A                 acall   help2
                            
05F7: 7C 4E                 mov     r4, #nloc_key
05F9: 90 0D E2              mov     dptr, #nloc_cmd
05FC: D1 6A                 acall   help2
                            
05FE: 7C 4A                 mov     r4, #jump_key
0600: 90 0D E6              mov     dptr, #jump_cmd
0603: D1 6A                 acall   help2
                            
0605: 7C 48                 mov     r4, #dump_key
0607: 90 0D EC              mov     dptr, #dump_cmd
060A: D1 6A                 acall   help2
                            
060C: 7C 49                 mov     r4, #intm_key
060E: 90 0D F2              mov     dptr, #intm_cmd
0611: D1 6A                 acall   help2
                            
0613: 7C 45                 mov     r4, #edit_key
0615: 90 0D F8              mov     dptr, #edit_cmd
0618: D1 6A                 acall   help2
                            
061A: 7C 43                 mov     r4, #clrm_key
061C: 90 0D FD              mov     dptr, #clrm_cmd
061F: D1 6A                 acall   help2
                            
0621: 7C 42                 mov     r4, #baud_key
0623: 90 0E 30              mov     dptr, #baud_cmd
0626: D1 6A                 acall   help2
                            
0628: 7C 57                 mov     r4, #crc16_key
062A: 90 0E 01              mov     dptr, #crc16_cmd
062D: D1 6A                 acall   help2
                            
062F: 7C 3C                 mov     r4, #eio77_key
0631: 90 0E 11              mov     dptr, #eio77_cmd
0634: D1 6A                 acall   help2
                            
0636: 7C 3E                 mov     r4, #dio77_key
0638: 90 0E 20              mov     dptr, #dio77_cmd
063B: D1 6A                 acall   help2
                            
063D: 90 0D AF              mov     dptr, #help2txt
0640: 11 45                 acall   pcstr_h
0642: 90 10 00              mov     dptr, #bmem
                   help3:
0645: 12 08 44              lcall   find
0648: 50 1E                 jnc     help4
064A: 75 82 04              mov     dpl, #4
064D: E0                    movx    a, @dptr
064E: B4 FE 10              cjne    a, #254, help3a         ; only FE is an ext
0651: 11 6C                 acall   dspace
0653: 05 82                 inc     dpl
0655: E0                    movx    a, @dptr
0656: 11 1E                 acall   cout_sp
0658: 11 26                 acall   dash_sp
065A: 75 82 20              mov     dpl, #32
065D: 31 80                 acall   pstr
065F: 11 7A                 acall   crlf
                   help3a:
0661: 05 83                 inc     dph
0663: E5 83                 mov     a, dph
0665: B4 E0 DD              cjne    a, #((emem + 1) >> 8) & 255, help3
                   help4:   
0668: 01 7A                 ajmp    crlf
                   
                   help2:                           ; print 11 standard lines
066A: 11 6C                 acall   dspace          ; given key in R4 and name 
066C: EC                    mov     a, r4
066D: 11 1E                 acall   cout_sp
066F: 11 26                 acall   dash_sp
0671: 11 45                 acall   pcstr_h
0673: 01 7A                 ajmp    crlf
                   
                   ;---------------------------------------------------------;
                   
                   upld:
0675: D1 FA                 acall   get_mem
                            ; assume we've got the beginning address in r3/r2
                            ; and the final address in r5/r4 (r4=lsb)...
                   
                            ; print out what we'll be doing
0677: 90 0D 8B              mov     dptr, #uplds3
067A: 11 45                 acall   pcstr_h
067C: EB                    mov     a, r3
067D: 31 61                 acall   phex
067F: EA                    mov     a, r2
0680: 31 61                 acall   phex
0682: 90 0D 9C              mov      dptr, #uplds4
0685: 11 45                 acall   pcstr_h
0687: ED                    mov     a, r5
0688: 31 61                 acall   phex
068A: EC                    mov     a, r4
068B: 31 61                 acall   phex
068D: 11 7A                 acall   crlf
                   
                            ; need to adjust end location by 1...
068F: 8D 83                 mov     dph, r5
0691: 8C 82                 mov     dpl, r4
0693: A3                    inc     dptr
0694: AC 82                 mov     r4, dpl
0696: AD 83                 mov     r5, dph
                   
0698: 90 0C 9B              mov     dptr, #prompt7
069B: 11 45                 acall   pcstr_h
069D: 11 64                 acall   cin
069F: B4 1B 02              cjne    a, #27, upld2e
06A2: E1 2A                 ajmp    abort_it
                   upld2e:
06A4: 11 7A                 acall   crlf
06A6: 8A 82                 mov     dpl, r2
06A8: 8B 83                 mov     dph, r3
                   
                   upld3:
06AA: EC                    mov     a, r4           ; how many more bytes to ou
06AB: C3                    clr     c
06AC: 95 82                 subb    a, dpl
06AE: FA                    mov     r2, a
06AF: ED                    mov     a, r5
06B0: 95 83                 subb    a, dph
06B2: 70 09                 jnz     upld4           ; if >256 left, then do nex
06B4: EA                    mov     a, r2
06B5: 60 2F                 jz      upld7           ; if we're all done
06B7: 54 F0                 anl     a, #11110000b
06B9: 70 02                 jnz     upld4           ; if >= 16 left, then do ne
06BB: 80 02                 sjmp    upld5           ; otherwise just finish it 
                   upld4:
06BD: 7A 10                 mov     r2, #16
                   upld5:
06BF: 74 3A                 mov     a, #':'                 ; begin the line
06C1: 11 70                 acall   cout
06C3: EA                    mov     a, r2
06C4: 31 61                 acall   phex            ; output # of data bytes
06C6: 31 73                 acall   phex16          ; output memory location
06C8: E5 83                 mov     a, dph
06CA: 25 82                 add     a, dpl
06CC: 2A                    add     a, r2
06CD: FB                    mov     r3, a           ; r3 will become checksum
06CE: E4                    clr     a
06CF: 31 61                 acall   phex            ; output 00 code for data
                   upld6:
06D1: E0                    movx    a, @dptr
06D2: 31 61                 acall   phex            ; output each byte
06D4: 2B                    add     a, r3
06D5: FB                    mov     r3, a
06D6: A3                    inc     dptr
06D7: DA F8                 djnz    r2, upld6       ; do however many bytes we 
06D9: EB                    mov     a, r3
06DA: F4                    cpl     a
06DB: 04                    inc     a
06DC: 31 61                 acall   phex            ; and finally the checksum
06DE: 11 7A                 acall   crlf
06E0: 31 B2                 acall   esc
06E2: 50 C6                 jnc     upld3           ; keep working if no esc pr
06E4: 80 44                 sjmp    abort_it
                   upld7:
06E6: 74 3A                 mov     a, #':'
06E8: 11 70                 acall   cout
06EA: E4                    clr     a
06EB: 31 61                 acall   phex
06ED: 31 61                 acall   phex
06EF: 31 61                 acall   phex
06F1: 04                    inc     a
06F2: 31 61                 acall   phex
06F4: 74 FF                 mov     a, #255
06F6: 31 61                 acall   phex
                   upld8:
06F8: 01 78                 ajmp    dcrlf
                   
                   ;---------------------------------------------------------;
                   
                   ; this thing gets the begin and end locations for
                   ; a few commands. If an esc or enter w/ no input,
                   ; it pops it's own return and returns to the menu
                   ; (nasty programming, but we need tight code for 4k rom)
                   
                   get_mem:
06FA: 11 78                 acall   dcrlf
06FC: 90 0C C9              mov     dptr, #beg_str
06FF: 11 45                 acall   pcstr_h
0701: 11 CB                 acall   ghex16
0703: 40 21                 jc      pop_it
0705: 20 D5 1E              jb      psw.5, pop_it
0708: C0 83                 push    dph
070A: C0 82                 push    dpl
070C: 11 7A                 acall   crlf
070E: 90 0C D3              mov     dptr, #end_str
0711: 11 45                 acall   pcstr_h
0713: 11 CB                 acall   ghex16
0715: AD 83                 mov     r5, dph
0717: AC 82                 mov     r4, dpl
0719: D0 E0                 pop     acc
071B: FA                    mov     r2, a
071C: D0 E0                 pop     acc
071E: FB                    mov     r3, a
071F: 40 05                 jc      pop_it
0721: 20 D5 02              jb      psw.5, pop_it
0724: 01 7A                 ajmp    crlf
                   
                   pop_it:
0726: D0 E0                 pop     acc
0728: D0 E0                 pop     acc
                   abort_it:
072A: 11 7A                 acall   crlf
                   abort2:
072C: 90 0C 5B              mov     dptr, #abort
072F: 01 45                 ajmp    pcstr_h
                   
                   ;---------------------------------------------------------;
                   
                   nloc:
0731: 90 0C 92              mov     dptr, #prompt6
0734: 11 45                 acall   pcstr_h
0736: 11 CB                 acall   ghex16
0738: 40 F2                 jc      abort2
073A: 20 D5 EF              jb      psw.5, abort2
073D: 11 0E                 acall   dptrtor6r7
073F: 01 78                 ajmp    dcrlf
                   
                   ;---------------------------------------------------------;
                   
                   clrm:
0741: D1 FA                 acall   get_mem
0743: 90 0C DD              mov     dptr, #sure
0746: 11 45                 acall   pcstr_h
0748: 11 64                 acall   cin
074A: 31 93                 acall   upper
074C: B4 59 DB              cjne    a, #'Y', abort_it
074F: 11 78                 acall   dcrlf
                   clrm2:
                            ; now we actually do it
0751: 8B 83                 mov     dph, r3
0753: 8A 82                 mov     dpl, r2
                   clrm3:
0755: E4                    clr     a
0756: F0                    movx    @dptr, a
0757: ED                    mov     a, r5
0758: B5 83 05              cjne    a, dph, clrm4
075B: EC                    mov     a, r4
075C: B5 82 01              cjne    a, dpl, clrm4
075F: 22                    ret
                   clrm4:
0760: A3                    inc     dptr
0761: 80 F2                 sjmp    clrm3
                   ;---------------------------------------------------------;
                   
                   reset_baud:
0763: 11 78                 acall   dcrlf
0765: 90 0E 40              mov     dptr, #baudprompt
0768: 11 45                 acall   pcstr_h
                            
076A: 11 CB                 acall   ghex16
076C: 40 23                 jc      bailout
076E: 20 D5 20              jb      psw.5, bailout
0771: C0 82                 push    dpl
0773: C0 83                 push    dph
                            
0775: 11 7A                 acall   crlf
0777: 90 0C DD              mov     dptr, #sure
077A: 11 45                 acall   pcstr_h
077C: 11 64                 acall   cin
077E: 31 93                 acall   upper
0780: B4 59 0A              cjne    a, #'Y', bailout_pop
0783: 11 78                 acall   dcrlf
                            
0785: D0 F0                 pop     b
0787: D0 E0                 pop     acc
0789: 12 08 F8              lcall   setbaud
078C: 22                    ret
                            
                   bailout_pop:
078D: D0 E0                 pop     acc
078F: D0 E0                 pop     acc
                   bailout:
0791: 11 7A                 acall   crlf
0793: 90 0C 5B              mov     dptr, #abort
0796: 01 45                 ajmp    pcstr_h
                            
                   ;---------------------------------------------------------;
                   
0798:              .equ     initial_l, 0xff
0798:              .equ     initial_h, 0xff
0798:              .equ     final_l, 0x00
0798:              .equ     final_h, 0x00
0798:              .equ     poly_l, 0x21
0798:              .equ     poly_h, 0x10
                   
                   calc_crc16:
0798: D1 FA                 acall   get_mem
079A: 11 7A                 acall   crlf
                            
079C: 11 06                 acall   r6r7todptr
079E: C0 82                 push    dpl
07A0: C0 83                 push    dph
07A2: 8A 82                 mov     dpl, r2
07A4: 8B 83                 mov     dph, r3
                                    
07A6: 7E FF                 mov     r6, #initial_l
07A8: 7F FF                 mov     r7, #initial_h
07AA: F1 D4                 acall   init_crc16
                            
07AC: 7E 21                 mov     r6, #poly_l
07AE: 7F 10                 mov     r7, #poly_h
                   calc_loop:
07B0: E0                    movx    a, @dptr
07B1: 12 07 E8              lcall   update_crc16
                            
07B4: ED                    mov     a, r5
07B5: B5 83 19              cjne    a, dph, calc_skip
07B8: EC                    mov     a, r4
07B9: B5 82 15              cjne    a, dpl, calc_skip
                            
07BC: 7E 00                 mov     r6, #final_l
07BE: 7F 00                 mov     r7, #final_h
07C0: F1 DD                 acall   finish_crc16
                            
07C2: 8A 82                 mov     dpl, r2
07C4: 8B 83                 mov     dph, r3
07C6: 12 01 73              lcall   phex16
                            
07C9: D0 83                 pop     dph
07CB: D0 82                 pop     dpl
07CD: 11 0E                 acall   dptrtor6r7
                            
07CF: 01 78                 ajmp    dcrlf
                            
                   calc_skip:
07D1: A3                    inc     dptr
07D2: 80 DC                 sjmp    calc_loop
                            
                   init_crc16:
07D4: C0 E0                 push    acc
07D6: EE                    mov     a, r6
07D7: FA                    mov     r2, a
07D8: EF                    mov     a, r7
07D9: FB                    mov     r3, a
07DA: D0 E0                 pop     acc
07DC: 22                    ret
                            
                   finish_crc16:
07DD: C0 E0                 push    acc
07DF: EA                    mov     a, r2
07E0: 6E                    xrl     a, r6
07E1: FA                    mov     r2, a
07E2: EB                    mov     a, r3
07E3: 6F                    xrl     a, r7
07E4: FB                    mov     r3, a
07E5: D0 E0                 pop     acc
07E7: 22                    ret
                            
                   update_crc16:
07E8: C0 F0                 push    b
                            
07EA: F5 F0                 mov     b, a
07EC: 74 80                 mov     a, #0x80
                            
                   loop:
07EE: F8                    mov     r0, a
07EF: E5 F0                 mov     a, b
                            
07F1: 58                    anl     a, r0
07F2: 60 02                 jz      skip0
07F4: 74 01                 mov     a, #1
                   skip0:
07F6: F9                    mov     r1, a
07F7: EB                    mov     a, r3
07F8: 23                    rl      a
07F9: 54 01                 anl     a, #1
07FB: 69                    xrl     a, r1
07FC: F9                    mov     r1, a
                            
07FD: EA                    mov     a, r2
07FE: 2A                    add     a, r2
07FF: FA                    mov     r2, a
0800: EB                    mov     a, r3
0801: 33                    rlc     a
0802: FB                    mov     r3, a
                            
0803: E9                    mov     a, r1
0804: 60 06                 jz      skip1
                            
0806: EA                    mov     a, r2
0807: 6E                    xrl     a, r6
0808: FA                    mov     r2, a
0809: EB                    mov     a, r3
080A: 6F                    xrl     a, r7
080B: FB                    mov     r3, a
                            
                   skip1:
080C: E8                    mov     a, r0
080D: C3                    clr     c
080E: 13                    rrc     a
080F: 70 DD                 jnz     loop
                            
0811: D0 F0                 pop     b
0813: 22                    ret
                            
                   ;---------------------------------------------------------;
                   
                   intm:
0814: 12 00 7A              lcall   crlf
0817: 78 00                 mov     r0, #0
                   intm2:
0819: 12 00 7A              lcall   crlf
081C: E8                    mov     a, r0
081D: 12 01 61              lcall   phex
0820: 74 3A                 mov     a, #':'
0822: 12 00 70              lcall   cout
                   intm3:
0825: 12 00 6E              lcall   space
0828: E6                    mov     a, @r0
0829: 12 01 61              lcall   phex
082C: 08                    inc     r0
082D: B8 00 03              cjne    r0, #0, intm4
0830: 02 00 78              ljmp    dcrlf
                   intm4:
0833: E8                    mov     a, r0
0834: 54 0F                 anl     a, #00001111b
0836: 70 ED                 jnz     intm3
0838: 80 DF                 sjmp    intm2
                   
                   ;---------------------------------------------------------;
                   
                   eio77:
083A: C2 97                 clr     p1.7
083C: 02 00 7A              ljmp    crlf
                            
                   ;---------------------------------------------------------;
                   
                   dio77:
083F: D2 97                 setb    p1.7
0841: 02 00 7A              ljmp    crlf
                   
                   ;---------------------------------------------------------;
                   
                   ; finds the next header in the external memory.
                   ; Input DPTR=point to start search (only MSB used)
                   ; Output DPTR=location of next module
                   ; C=set if a header found, C=clear if no more headers
                   
                   find:
0844: 75 82 00              mov     dpl, #0
0847: E0                    movx    a, @dptr
0848: B4 A5 14              cjne    a, #0xA5, find3
084B: A3                    inc     dptr
084C: E0                    movx    a, @dptr
084D: B4 E5 0F              cjne    a, #0xE5, find3
0850: A3                    inc     dptr
0851: E0                    movx    a, @dptr
0852: B4 E0 0A              cjne    a, #0xE0, find3
0855: A3                    inc     dptr
0856: E0                    movx    a, @dptr
0857: B4 A5 05              cjne    a, #0xA5, find3
085A: 75 82 00              mov     dpl, #0                         ; found one
085D: D3                    setb    c
085E: 22                    ret
                   find3:
085F: 74 DF                 mov     a, #(emem >> 8)
0861: B5 83 02              cjne    a, dph, find4           ; did we just check
0864: C3                    clr     c
0865: 22                    ret
                   find4:
0866: 05 83                 inc     dph                     ; keep on searching
0868: 80 DA                 sjmp    find
                   
                   ;---------------------------------------------------------;
                   
                   ; initialize the hardware on reset
                   ; copy flash to memory
                   
                   reset:
086A: E4                    clr     a
086B: F5 A8                 mov     ie, a
086D: F5 B8                 mov     ip, a
086F: 75 D0 00              mov     psw, #psw_init
0872: 75 81 17              mov     sp, #sp_init
0875: 75 A0 FF              mov     p2, #p2_init
                            
                   ; force P1 to output
                   ; internal PFETs P1.7-0 active + external pullup
0878: 75 90 FF              mov     p1, #mctrl_reset
087B: FF                    mov     r7, a
087C: FF                    mov     r7, a
087D: FF                    mov     r7, a
087E: FF                    mov     r7, a
                            
                   begin_cp_shadow:
087F: 90 00 00              mov     dptr, #0x0000
                   cp_byte:
0882: E4                    clr     a
0883: 93                    movc    a, @a+dptr
0884: F0                    movx    @dptr, a
0885: A3                    inc     dptr
0886: E5 83                 mov     a, dph
0888: B4 20 F7              cjne    a, #0x20, cp_byte
                   end_cp_shadow:
                            
                   ; force P1 to output
                   ; internal PFETs P1.7-1 active + external pullup, internal N
088B: 75 90 FE              mov     p1, #mctrl_shadow
088E: FF                    mov     r7, a
088F: FF                    mov     r7, a
0890: FF                    mov     r7, a
0891: FF                    mov     r7, a
                            
                   ; initialize the serial port
0892: 74 F7                 mov     a, #bc_l
0894: 75 F0 FF              mov     b, #bc_h
0897: 12 08 F8              lcall   setbaud
                            
                   ; run any user initialization programs in external memory
089A: 75 F0 F9              mov     b, #249
089D: 12 08 CC              lcall   stcode
                                    
                   ; run the start-up programs in external memory
08A0: 75 F0 FD              mov     b, #253
08A3: 12 08 CC              lcall   stcode
                            
                   ; now print out the nice welcome message
                   welcome:
08A6: 78 18                 mov     r0, #24
                   welcm2:
08A8: 12 00 7A              lcall   crlf
08AB: D8 FB                 djnz    r0, welcm2
08AD: 78 0F                 mov     r0, #15
08AF: 74 20                 mov     a, #' '
                   welcm4:
08B1: 12 00 70              lcall   cout
08B4: D8 FB                 djnz    r0, welcm4
08B6: 90 0C 24              mov     dptr, #logon1
08B9: 12 09 C4              lcall   pcstr
08BC: 90 0C 3D              mov     dptr, #logon2
08BF: 12 09 C4              lcall   pcstr
08C2: 12 04 BD              lcall   dir
08C5: 7E 00                 mov     r6, #(pgm & 255)
08C7: 7F 20                 mov     r7, #(pgm >> 8)
08C9: 02 01 C3              ljmp    menu
                   
                   stcode:
08CC: 90 10 00              mov     dptr, #bmem      ; search for startup routi
                   stcode2:
08CF: 12 08 44              lcall   find
08D2: 50 23                 jnc     stcode5
08D4: 75 82 04              mov     dpl, #4
08D7: E0                    movx    a, @dptr
08D8: B5 F0 15              cjne    a, b, stcode4   ; only startup code if matc
08DB: C0 F0                 push    b
08DD: C0 83                 push    dph
08DF: 74 EC                 mov     a, #(stcode3 & 255)
08E1: C0 E0                 push    acc
08E3: 74 08                 mov     a, #(stcode3 >> 8)
08E5: C0 E0                 push    acc
08E7: 75 82 40              mov     dpl, #64
08EA: E4                    clr     a
08EB: 73                    jmp     @a+dptr                 ; jump to the start
                   stcode3:
08EC: D0 83                 pop     dph             ; hopefully it'll return to
08EE: D0 F0                 pop     b
                   stcode4:
08F0: 05 83                 inc     dph
08F2: E5 83                 mov     a, dph
08F4: B4 E0 D8              cjne    a, #((emem + 1) >> 8) & 255, stcode2
                   stcode5:
08F7: 22                    ret                     ; now we've executed all of
                   
                   ;---------------------------------------------------------;
                   
                   setbaud:
08F8: C2 CA                 clr     tr2
08FA: F5 CC                 mov     tl2, a
08FC: 85 F0 CD              mov     th2, b
08FF: F5 CA                 mov     rcap2l, a
0901: 85 F0 CB              mov     rcap2h, b
0904: 75 C8 30              mov     t2con, #00110000b
0907: 75 98 52              mov     scon, #01010010b
090A: D2 CA                 setb    tr2
090C: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                   ; prints the unsigned 8 bit value in Acc in base 10
                   
                   pint8u:
090D: C0 F0                 push    b
090F: C0 E0                 push    acc
0911: 80 13                 sjmp    pint8b
                   
                   ;---------------------------------------------------------;
                   
                   ; prints the signed 8 bit value in Acc in base 10
                   
                   pint8:
0913: C0 F0                 push    b
0915: C0 E0                 push    acc
0917: 30 E7 0C              jnb     acc.7, pint8b
091A: 74 2D                 mov     a, #'-'
091C: 12 00 70              lcall   cout
091F: D0 E0                 pop     acc
0921: C0 E0                 push    acc
0923: F4                    cpl     a
0924: 24 01                 add     a, #1
                   pint8b:
0926: 75 F0 64              mov     b, #100
0929: 84                    div     ab
092A: D2 D5                 setb    f0
092C: 60 07                 jz      pint8c
092E: C2 D5                 clr     f0
0930: 24 30                 add     a, #'0'
0932: 12 00 70              lcall   cout
                   pint8c:
0935: E5 F0                 mov     a, b
0937: 75 F0 0A              mov     b, #10
093A: 84                    div     ab
093B: 30 D5 02              jnb     f0, pint8d
093E: 60 05                 jz      pint8e
                   pint8d:
0940: 24 30                 add     a, #'0'
0942: 12 00 70              lcall   cout
                   pint8e:
0945: E5 F0                 mov     a, b
0947: 24 30                 add     a, #'0'
0949: 12 00 70              lcall   cout
094C: D0 E0                 pop     acc
094E: D0 F0                 pop     b
0950: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                   ; print 16 bit unsigned integer in DPTR, using base 10.
                   ; warning, destroys r2, r3, r4, r5, psw.5
                   
                   pint16u:
0951: C0 E0                 push    acc
0953: E8                    mov     a, r0
0954: C0 E0                 push    acc
0956: C2 D5                 clr     psw.5
0958: AA 82                 mov     r2, dpl
095A: AB 83                 mov     r3, dph
                   
                   pint16a:
095C: 7C 10                 mov     r4, #16                 ; ten-thousands dig
095E: 7D 27                 mov     r5, #39
0960: 31 AF                 acall   pint16x
0962: 60 07                 jz      pint16b
0964: 24 30                 add     a, #'0'
0966: 12 00 70              lcall   cout
0969: D2 D5                 setb    psw.5
                   
                   pint16b:
096B: 7C E8                 mov     r4, #232        ; thousands digit
096D: 7D 03                 mov     r5, #3
096F: 31 AF                 acall   pint16x
0971: 70 03                 jnz     pint16c
0973: 30 D5 07              jnb     psw.5, pint16d
                   pint16c:
0976: 24 30                 add     a, #'0'
0978: 12 00 70              lcall   cout
097B: D2 D5                 setb    psw.5
                   
                   pint16d:
097D: 7C 64                 mov     r4, #100        ; hundreds digit
097F: 7D 00                 mov     r5, #0
0981: 31 AF                 acall   pint16x
0983: 70 03                 jnz     pint16e
0985: 30 D5 07              jnb     psw.5, pint16f
                   pint16e:
0988: 24 30                 add     a, #'0'
098A: 12 00 70              lcall   cout
098D: D2 D5                 setb    psw.5
                   
                   pint16f:
098F: EA                    mov     a, r2           ; tens digit
0990: AB F0                 mov     r3, b
0992: 75 F0 0A              mov     b, #10
0995: 84                    div     ab
0996: 70 03                 jnz     pint16g
0998: 30 D5 05              jnb     psw.5, pint16h
                   pint16g:
099B: 24 30                 add     a, #'0'
099D: 12 00 70              lcall   cout
                   
                   pint16h:
09A0: E5 F0                 mov     a, b            ; and finally the ones digi
09A2: 8B F0                 mov     b, r3
09A4: 24 30                 add     a, #'0'
09A6: 12 00 70              lcall   cout
                   
09A9: D0 E0                 pop     acc
09AB: F8                    mov     r0, a
09AC: D0 E0                 pop     acc
09AE: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                   ; ok, it's a cpu hog and a nasty way to divide, but this cod
                   ; requires only 21 bytes! Divides r2-r3 by r4-r5 and leaves
                   ; quotient in r2-r3 and returns remainder in acc. If Intel
                   ; had made a proper divide, then this would be much easier.
                   
                   pint16x:
09AF: 78 00                 mov     r0, #0
                   pint16y:
09B1: 08                    inc     r0
09B2: C3                    clr     c
09B3: EA                    mov     a, r2
09B4: 9C                    subb    a, r4
09B5: FA                    mov     r2, a
09B6: EB                    mov     a, r3
09B7: 9D                    subb    a, r5
09B8: FB                    mov     r3, a
09B9: 50 F6                 jnc     pint16y
09BB: 18                    dec     r0
09BC: EA                    mov     a, r2
09BD: 2C                    add     a, r4
09BE: FA                    mov     r2, a
09BF: EB                    mov     a, r3
09C0: 3D                    addc    a, r5
09C1: FB                    mov     r3, a
09C2: E8                    mov     a, r0
09C3: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                   ; pcstr prints the compressed strings. A dictionary of 128 w
                   ; stored in 4 bit packed binary format.  When pcstr finds a 
                   ; a string with the high bit set, it prints the word from th
                   ; A few bytes have special functions and everything else pri
                   ; it were an ordinary string.
                   
                   ; special codes for pcstr:
                   ;    0 = end of string
                   ;   13 = CR/LF
                   ;   14 = CR/LF and end of string
                   ;   31 = next word code should be capitalized
                   
                   pcstr:
09C4: C0 E0                 push    acc
09C6: E8                    mov     a, r0
09C7: C0 E0                 push    acc
09C9: E9                    mov     a, r1
09CA: C0 E0                 push    acc
09CC: EC                    mov     a, r4
09CD: C0 E0                 push    acc
09CF: D2 D1                 setb    psw.1
09D1: D2 D5                 setb    psw.5
                   pcstr1:
09D3: E0                    movx    a, @dptr
09D4: A3                    inc     dptr
09D5: 60 25                 jz      pcstr2
09D7: 20 E7 2E              jb      acc.7, decomp
09DA: 54 7F                 anl     a, #0x7F
                   pcstrs1:
09DC: B4 0D 07              cjne    a, #13, pcstrs2
09DF: 12 00 7A              lcall   crlf
09E2: D2 D1                 setb    psw.1
09E4: 80 ED                 sjmp    pcstr1
                   pcstrs2:
09E6: B4 1F 04              cjne    a, #31, pcstrs3
09E9: C2 D5                 clr     psw.5
09EB: 80 E6                 sjmp    pcstr1
                   pcstrs3:
09ED: B4 0E 05              cjne    a, #14, pcstrs4
09F0: 12 00 7A              lcall   crlf
09F3: 80 07                 sjmp    pcstr2
                   pcstrs4:
09F5: C2 D1                 clr     psw.1
09F7: 12 00 70              lcall   cout
09FA: 80 D7                 sjmp    pcstr1
                   pcstr2:
09FC: D0 E0                 pop     acc
09FE: FC                    mov     r4, a
09FF: D0 E0                 pop     acc
0A01: F9                    mov     r1, a
0A02: D0 E0                 pop     acc
0A04: F8                    mov     r0, a
0A05: D0 E0                 pop     acc
0A07: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                   ; dcomp actually takes care of printing a word from the dict
                   ; dptr = position in packed words table
                   ; r4=0 if next nibble is low, r4=255 if next nibble is high
                   
                   decomp:
0A08: 54 7F                 anl     a, #0x7F
0A0A: F8                    mov     r0, a           ; r0 counts which word
0A0B: 20 D1 03              jb      psw.1, decomp1  ; avoid leading space if fi
0A0E: 12 00 6E              lcall   space
                   decomp1:
0A11: C2 D1                 clr     psw.1
0A13: C0 82                 push    dpl
0A15: C0 83                 push    dph
0A17: 90 0A 7C              mov     dptr, #words
0A1A: 7C 00                 mov     r4, #0
0A1C: E8                    mov     a, r0
0A1D: 60 07                 jz      dcomp3
                            ; here we must seek past all the words in the table
                            ; that come before the one we're supposed to print
0A1F: F9                    mov     r1, a
                   dcomp2:
0A20: 51 6C                 acall   get_next_nibble
0A22: 70 FC                 jnz     dcomp2
                            ; when we get here, a word has been skipped... keep
                            ; this until we're pointing to the correct one
0A24: D9 FA                 djnz    r1, dcomp2
                   dcomp3:
                            ; now we're pointing to the correct word, so all we
                            ; to do is print it out
0A26: 51 6C                 acall   get_next_nibble
0A28: 60 3C                 jz      dcomp_end
0A2A: B4 0F 12              cjne    a, #15, dcomp4
                            ; the character is one of the 12 least commonly use
0A2D: 51 6C                 acall   get_next_nibble
0A2F: 04                    inc     a
0A30: 83                    movc    a, @a+pc
0A31: 80 1E                 sjmp    dcomp5
0A33: 68 66 77 67 
      79 62 78 76 
      6B 71 6A 7A 
                            .db     "hfwgybxvkqjz"
                   dcomp4:
                            ; the character is one of the 14 most commonly used
0A3F: 04                    inc     a
0A40: 83                    movc    a, @a+pc
0A41: 80 0E                 sjmp    dcomp5
0A43: 65 74 61 72 
      6E 69 73 6F 
      6C 75 6D 70 
      64 63                 .db     "etarnisolumpdc"
                   dcomp5:
                            ; decide if it should be uppercase or lowercase
0A51: A2 D5                 mov     c, psw.5
0A53: 92 E5                 mov     acc.5, c
0A55: D2 D5                 setb    psw.5
0A57: B8 14 02              cjne    r0, #20, dcomp6
0A5A: C2 E5                 clr     acc.5
                   dcomp6:
0A5C: B8 0C 02              cjne    r0, #12, dcomp7
0A5F: C2 E5                 clr     acc.5
                   dcomp7:
0A61: 12 00 70              lcall   cout
0A64: 80 C0                 sjmp    dcomp3
                   dcomp_end:
0A66: D0 83                 pop     dph
0A68: D0 82                 pop     dpl
0A6A: 21 D3                 ajmp    pcstr1
                   
                   get_next_nibble:
                            ; ... and update dptr and r4, of course
0A6C: E0                    movx    a, @dptr
0A6D: BC 00 05              cjne    r4, #0, gnn2
0A70: 7C FF                 mov     r4, #255
0A72: 54 0F                 anl     a, #00001111b
0A74: 22                    ret
                   gnn2:
0A75: 7C 00                 mov     r4, #0
0A77: A3                    inc     dptr
0A78: C4                    swap    a
0A79: 54 0F                 anl     a, #00001111b
0A7B: 22                    ret
                   
                   ;---------------------------------------------------------;
                   ;                                                          ;
                   ;         Here begins the data tables and strings          ;
                   ;                                                          ;
                   ;---------------------------------------------------------;
                   
                   ; this is the dictionary of 128 words used by pcstr.
                   
                   words:
0A7C: 82 90 E8 23 
      86 05 4C F8 
                            .db     0x82, 0x90, 0xE8, 0x23, 0x86, 0x05, 0x4C, 0
0A84: 44 B3 B0 B1 
      48 5F F0 11 
                            .db     0x44, 0xB3, 0xB0, 0xB1, 0x48, 0x5F, 0xF0, 0
0A8C: 7F A0 15 7F 
      1C 2E D1 40 
                            .db     0x7F, 0xA0, 0x15, 0x7F, 0x1C, 0x2E, 0xD1, 0
0A94: 5A 50 F1 03 
      BF BA 0C 2F 
                            .db     0x5A, 0x50, 0xF1, 0x03, 0xBF, 0xBA, 0x0C, 0
0A9C: 96 01 8D 3F 
      95 38 0D 6F 
                            .db     0x96, 0x01, 0x8D, 0x3F, 0x95, 0x38, 0x0D, 0
0AA4: 5F 12 07 71 
      0E 56 2F 48 
                            .db     0x5F, 0x12, 0x07, 0x71, 0x0E, 0x56, 0x2F, 0
0AAC: 3B 62 58 20 
      1F 76 70 32 
                            .db     0x3B, 0x62, 0x58, 0x20, 0x1F, 0x76, 0x70, 0
0AB4: 24 40 B8 40 
      E1 61 8F 01 
                            .db     0x24, 0x40, 0xB8, 0x40, 0xE1, 0x61, 0x8F, 0
0ABC: 34 0B CA 89 
      D3 C0 A3 B9 
                            .db     0x34, 0x0B, 0xCA, 0x89, 0xD3, 0xC0, 0xA3, 0
0AC4: 58 80 04 F8 
      02 85 60 25 
                            .db     0x58, 0x80, 0x04, 0xF8, 0x02, 0x85, 0x60, 0
0ACC: 91 F0 92 73 
      1F 10 7F 12 
                            .db     0x91, 0xF0, 0x92, 0x73, 0x1F, 0x10, 0x7F, 0
0AD4: 54 93 10 44 
      48 07 D1 26 
                            .db     0x54, 0x93, 0x10, 0x44, 0x48, 0x07, 0xD1, 0
0ADC: 56 4F D0 F6 
      64 72 E0 B8 
                            .db     0x56, 0x4F, 0xD0, 0xF6, 0x64, 0x72, 0xE0, 0
0AE4: 3B D5 F0 16 
      4F 56 30 6F 
                            .db     0x3B, 0xD5, 0xF0, 0x16, 0x4F, 0x56, 0x30, 0
0AEC: 48 02 5F A8 
      20 1F 01 76 
                            .db     0x48, 0x02, 0x5F, 0xA8, 0x20, 0x1F, 0x01, 0
0AF4: 30 D5 60 25 
      41 A4 2C 60 
                            .db     0x30, 0xD5, 0x60, 0x25, 0x41, 0xA4, 0x2C, 0
0AFC: 05 6F 01 3F 
      26 1F 30 07 
                            .db     0x05, 0x6F, 0x01, 0x3F, 0x26, 0x1F, 0x30, 0
0B04: 8E 1D F0 63 
      99 F0 42 B8 
                            .db     0x8E, 0x1D, 0xF0, 0x63, 0x99, 0xF0, 0x42, 0
0B0C: 20 1F 23 30 
      02 7A D1 60 
                            .db     0x20, 0x1F, 0x23, 0x30, 0x02, 0x7A, 0xD1, 0
0B14: 2F F0 F6 05 
      8F 93 1A 50 
                            .db     0x2F, 0xF0, 0xF6, 0x05, 0x8F, 0x93, 0x1A, 0
0B1C: 28 F0 82 04 
      6F A3 0D 3F 
                            .db     0x28, 0xF0, 0x82, 0x04, 0x6F, 0xA3, 0x0D, 0
0B24: 1F 51 40 23 
      01 3E 05 43 
                            .db     0x1F, 0x51, 0x40, 0x23, 0x01, 0x3E, 0x05, 0
0B2C: 01 7A 01 17 
      64 93 30 2A 
                            .db     0x01, 0x7A, 0x01, 0x17, 0x64, 0x93, 0x30, 0
0B34: 08 8C 24 30 
      99 B0 F3 19 
                            .db     0x08, 0x8C, 0x24, 0x30, 0x99, 0xB0, 0xF3, 0
0B3C: 60 25 41 35 
      09 8E CB 19 
                            .db     0x60, 0x25, 0x41, 0x35, 0x09, 0x8E, 0xCB, 0
0B44: 12 30 05 1F 
      31 1D 04 14 
                            .db     0x12, 0x30, 0x05, 0x1F, 0x31, 0x1D, 0x04, 0
0B4C: 4F 76 12 04 
      AB 27 90 56 
                            .db     0x4F, 0x76, 0x12, 0x04, 0xAB, 0x27, 0x90, 0
0B54: 01 2F A8 D5 
      F0 AA 26 20 
                            .db     0x01, 0x2F, 0xA8, 0xD5, 0xF0, 0xAA, 0x26, 0
0B5C: 5F 1C F0 F3 
      61 FE 01 41 
                            .db     0x5F, 0x1C, 0xF0, 0xF3, 0x61, 0xFE, 0x01, 0
0B64: 73 01 27 C1 
      C0 84 8F D6 
                            .db     0x73, 0x01, 0x27, 0xC1, 0xC0, 0x84, 0x8F, 0
0B6C: 01 87 70 56 
      4F 19 70 1F 
                            .db     0x01, 0x87, 0x70, 0x56, 0x4F, 0x19, 0x70, 0
0B74: A8 D9 90 76 
      02 17 43 FE 
                            .db     0xA8, 0xD9, 0x90, 0x76, 0x02, 0x17, 0x43, 0
0B7C: 01 C1 84 0B 
      15 7F 02 8B 
                            .db     0x01, 0xC1, 0x84, 0x0B, 0x15, 0x7F, 0x02, 0
0B84: 14 30 8F 63 
      39 6F 19 F0 
                            .db     0x14, 0x30, 0x8F, 0x63, 0x39, 0x6F, 0x19, 0
0B8C: 11 C9 10 6D 
      02 3F 91 09 
                            .db     0x11, 0xC9, 0x10, 0x6D, 0x02, 0x3F, 0x91, 0
0B94: 7A 41 D0 BA 
      0C 1D 39 5F 
                            .db     0x7A, 0x41, 0xD0, 0xBA, 0x0C, 0x1D, 0x39, 0
0B9C: 07 F2 11 17 
      20 41 6B 35 
                            .db     0x07, 0xF2, 0x11, 0x17, 0x20, 0x41, 0x6B, 0
0BA4: 09 F7 75 12 
      0B A7 CC 48 
                            .db     0x09, 0xF7, 0x75, 0x12, 0x0B, 0xA7, 0xCC, 0
0BAC: 02 3F 64 12 
      A0 0C 27 E3 
                            .db     0x02, 0x3F, 0x64, 0x12, 0xA0, 0x0C, 0x27, 0
0BB4: 9F C0 14 77 
      70 11 40 71 
                            .db     0x9F, 0xC0, 0x14, 0x77, 0x70, 0x11, 0x40, 0
0BBC: 21 C0 68 25 
      41 F0 62 7F 
                            .db     0x21, 0xC0, 0x68, 0x25, 0x41, 0xF0, 0x62, 0
0BC4: D1 D0 21 E1 
      62 58 B0 F3 
                            .db     0xD1, 0xD0, 0x21, 0xE1, 0x62, 0x58, 0xB0, 0
0BCC: 05 1F 73 30 
      77 B1 6F 19 
                            .db     0x05, 0x1F, 0x73, 0x30, 0x77, 0xB1, 0x6F, 0
0BD4: E0 19 43 E0 
      58 2F F6 A4 
                            .db     0xE0, 0x19, 0x43, 0xE0, 0x58, 0x2F, 0xF6, 0
0BDC: 14 D0 23 03 
      FE 31 F5 14 
                            .db     0x14, 0xD0, 0x23, 0x03, 0xFE, 0x31, 0xF5, 0
0BE4: 30 99 F8 03 
      3F 64 22 51 
                            .db     0x30, 0x99, 0xF8, 0x03, 0x3F, 0x64, 0x22, 0
0BEC: 60 25 41 2F 
      E3 01 56 27 
                            .db     0x60, 0x25, 0x41, 0x2F, 0xE3, 0x01, 0x56, 0
0BF4: 93 09 FE 11 
      FE 79 BA 60 
                            .db     0x93, 0x09, 0xFE, 0x11, 0xFE, 0x79, 0xBA, 0
0BFC: 75 42 EA 62 
      58 A0 E5 1F 
                            .db     0x75, 0x42, 0xEA, 0x62, 0x58, 0xA0, 0xE5, 0
0C04: 53 4F D1 C0 
      A3 09 42 53 
                            .db     0x53, 0x4F, 0xD1, 0xC0, 0xA3, 0x09, 0x42, 0
0C0C: F7 12 04 62 
      1B 30 F5 05 
                            .db     0xF7, 0x12, 0x04, 0x62, 0x1B, 0x30, 0xF5, 0
0C14: F7 69 0C 35 
      1B 70 82 2F 
                            .db     0xF7, 0x69, 0x0C, 0x35, 0x1B, 0x70, 0x82, 0
0C1C: 2F 14 4F 51 
      C0 64 25 00 
                            .db     0x2F, 0x14, 0x4F, 0x51, 0xC0, 0x64, 0x25, 0
                   
                   ; STR
                   
                   logon1:
0C24: 57 65 6C 63 
      6F 6D 65 80 
      94 32 20 76 
      32 2E 31 2C 
      20 62 79 1F 
      F8 1F FE 0D 
      0E                    .db     "Welcome", 128, 148, "2 v2.1, by", 31, 248,
                   
                   logon2:
0C3D: 20 20 53 65 
      65 94 32 2E 
      44 4F 43 2C 
      94 32 2E 45 
      51 55 A4              .db     32, 32, "See", 148, "2.DOC,", 148, "2.EQU",
0C50: 94 32 2E 48 
      44 52 B4 D5 
      8D 2E 0E              .db     148, "2.HDR", 180, 213, 141, '.', 14
                   
                   abort:
0C5B: 20 1F 9E 1F 
      A0 21 0D 0E 
                            .db     ' ', 31, 158, 31, 160, '!', 13, 14
                   
                   prompt1:
0C63: 94 32 20 4C 
      6F 63 3A 00 
                            .db     148, "2 Loc:", 0
                   
                   prompt2:
0C6B: 20 3E A0              .db     " >", 160
                   
                   prompt3:
0C6E: 86 CA 82 28 
      00                    .db     134, 202, 130, '(', 0
                   
                   prompt4:
0C73: 29 2C 95 8C 
      80 C8 3A 20 
      00                    .db     "),", 149, 140, 128, 200, ": ", 0
                   
                   prompt5:
0C7C: 1F 97 82 C3 
      73 C7 A6 83 
      2C                    .db     31, 151, 130, 195, 's', 199, 166, 131, ','
0C85: BA 20 4A 55 
      4D 50 80 86 
      A1 72 82 0D 
      0E                    .db     186, " JUMP", 128, 134, 161, 'r', 130, 13, 
                   
                   prompt6:
0C92: 0D 0D 1F 87 
      83 81 3A 20 
      00                    .db     13, 13, 31, 135, 131, 129, ": ", 0
                   
                   prompt7:
0C9B: 1F E4 FB 20 
      6B 65 79 3A 
      20 00                 .db     31, 228, 251, " key: ", 0
                   
                   prompt8:
0CA5: 0D 0D 1F 88 
      80 83 81 20 
      28 00                 .db     13, 13, 31, 136, 128, 131, 129, " (", 0
                   
                   prompt9:
0CAF: 0D 0D 1F 82 
      1F FD 00              .db     13, 13, 31, 130, 31, 253, 0
                   
                   prompt9b:
0CB6: 1F 81 20 20 
      20 20 20 1F 
      C9 0E                 .db     31, 129, 32, 32, 32, 32, 32, 31, 201, 14
                   
                   prompt10:
0CC0: 29 20 1F 87 
      1F B2 3A 20 
      00                    .db     ") ", 31, 135, 31, 178, ": ", 0
                   
                   beg_str:
0CC9: 46 69 72 73 
      74 1F 81 3A 
      20 00                 .db     "First", 31, 129, ": ", 0
                   
                   end_str:
0CD3: 4C 61 73 74 
      1F 81 3A 20 
      20 00                 .db     "Last", 31, 129, ':', 32, 32, 0
                   
                   sure:
0CDD: 1F B9 A1 20 
      73 75 72 65 
      3F 00                 .db     31, 185, 161, " sure?", 0
                   
                   edits1:
0CE7: 0D 0D 1F 9C 
      9A 92 2C 8C 
      80 C8 0E              .db     13, 13, 31, 156, 154, 146, ',', 140, 128, 2
                   
                   edits2:
0CF2: 20 20 1F 9C 
      C1 2C 8E 81 
      F7 0D 0E              .db     "  ", 31, 156, 193, ',', 142, 129, 247, 13,
                   
                   dnlds1:
0CFD: 0D 0D 1F 9F 
      20 61 73 63 
      69 69 F9 96 
      1F 98 84 89 
                            .db     13, 13, 31, 159, " ascii", 249, 150, 31, 15
0D0D: 2C 95 8C 80 
      A0 0D 0E              .db     ',', 149, 140, 128, 160, 13, 14
                   
                   dnlds2:
0D14: 0D 1F 8A A0 
      65 64 0D 0E 
                            .db     13, 31, 138, 160, "ed", 13, 14
                   
                   dnlds3:
0D1C: 0D 1F 8A C1 
      64 0D 0E              .db     13, 31, 138, 193, 'd', 13, 14
                   
                   dnlds4:
0D23: 53 75 6D 6D 
      61 72 79 3A 
      0E                    .db     "Summary:", 14
                   
                   dnlds5:
0D2C: 20 C6 73 91 
      64 0E                 .db     ' ', 198, 's', 145, 'd', 14
                   
                   dnlds6a:
0D32: 20 8B 91 64 
      0E                    .db     ' ', 139, 145, 'd', 14
                   
                   dnlds6b:
0D37: 20 8B 20 77 
      72 69 74 74 
      65 6E 0E              .db     ' ', 139, " written", 14
                   
                   dnlds7:
0D42: 1F 9B 3A 0E 
                            .db     31, 155, ':', 14
                   
                   dnlds8:
0D46: 20 8B 20 75 
      6E 61 62 6C 
      65 80 20 77 
      72 69 74 65 
      0E                    .db     ' ', 139, " unable", 128, " write", 14
                   
                   dnlds9:
0D57: 20 20 62 61 
      64 F5 73 0E 
                            .db     32, 32, "bad", 245, 's', 14
                   
                   dnlds10:
0D5F: 20 85 9F 96 
      C6 0E                 .db     ' ', 133, 159, 150, 198, 14
                   
                   dnlds11:
0D65: 20 85 84 9D 
      0E                    .db     ' ', 133, 132, 157, 14
                   
                   dnlds12:
0D6A: 20 85 20 6E 
      6F 6E 84 9D 
      0E                    .db     ' ', 133, " non", 132, 157, 14
                   
                   dnlds13:
0D73: 1F 97 9B 20 
      64 65 74 65 
      63 74 65 64 
      0D 0E                 .db     31, 151, 155, " detected", 13, 14
                   
                   runs1:
0D81: 0D 86 6E 69 
      6E 67 82 3A 
      0D 0E                 .db     13, 134, "ning", 130, ':', 13, 14
                   
                   uplds3:
0D8B: 0D 0D 53 65 
      6E 64 69 6E 
      67 1F 98 84 
      89 AC 20 20 
      00                    .db     13, 13, "Sending", 31, 152, 132, 137, 172, 
                   
                   uplds4:
0D9C: 20 80 20 20 
      00                    .db     ' ', 128, 32, 32, 0
                   
                   help1txt:
0DA1: 0D 0D 53 74 
      61 6E 64 61 
      72 64 1F 9E 
      73 0E                 .db     13, 13, "Standard", 31, 158, 's', 14
                   
                   help2txt:
0DAF: 1F DA 1F F4 
      65 64 1F 9E 
      73 0E                 .db     31, 218, 31, 244, "ed", 31, 158, 's', 14
                   
                   type1:
0DB9: 1F 9A 9E 00 
                            .db     31, 154, 158, 0
                   
                   type2:
0DBD: 1F 82 00              .db     31, 130, 0
                   
                   type4:
0DC0: 1F 8F 1F E2 
      1F AA 00              .db     31, 143, 31, 226, 31, 170, 0
                   
                   type5:
0DC7: 3F 3F 3F 00 
                            .db     "???", 0
                   
                   help_cmd2:
0DCB: 1F D7 00              .db     31, 215, 0
                   
                   help_cmd:
0DCE: 1F 8E D7 D1 
      00                    .db     31, 142, 215, 209, 0
                   
                   dir_cmd:
0DD3: 1F D1 82 73 
      00                    .db     31, 209, 130, 's', 0
                   
                   run_cmd:
0DD8: 1F 86 82 00 
                            .db     31, 134, 130, 0
                   
                   dnld_cmd:
0DDC: 1F 8A 00              .db     31, 138, 0
                   
                   upld_cmd:
0DDF: 1F 93 00              .db     31, 147, 0
                   
                   nloc_cmd:
0DE2: 1F 87 81 00 
                            .db     31, 135, 129, 0
                   
                   jump_cmd:
0DE6: 1F 88 80 83 
      81 00                 .db     31, 136, 128, 131, 129, 0
                   
                   dump_cmd:
0DEC: 1F 84 DB 9A 
      83 00                 .db     31, 132, 219, 154, 131, 0
                   
                   intm_cmd:
0DF2: 1F 84 DB C0 
      83 00                 .db     31, 132, 219, 192, 131, 0
                   
                   edit_cmd:
0DF8: 1F 9C 9A 92 
      00                    .db     31, 156, 154, 146, 0
                   
                   clrm_cmd:
0DFD: 1F ED 83 00 
                            .db     31, 237, 131, 0
                   
                   crc16_cmd:
0E01: 43 61 6C 63 
      75 6C 61 74 
      65 20 43 52 
      43 31 36 00 
                            .db     "Calculate CRC16", 0
                            
                   eio77_cmd:
0E11: 45 6E 61 62 
      6C 65 20 6E 
      43 53 49 4F 
      37 37 00              .db     "Enable nCSIO77", 0
                   
                   dio77_cmd:
0E20: 44 69 73 61 
      62 6C 65 20 
      6E 43 53 49 
      4F 37 37 00 
                            .db     "Disable nCSIO77", 0
                            
                   baud_cmd:
0E30: 52 65 73 65 
      74 20 62 61 
      75 64 20 72 
      61 74 65 00 
                            .db     "Reset baud rate", 0
                            
                   baudprompt:
0E40: 45 6E 74 65 
      72 20 6E 65 
      77 20 62 61 
      75 64 20 63 
      6F 6E 73 74 
      3A 20 00              .db     "Enter new baud const: ", 0
                   
