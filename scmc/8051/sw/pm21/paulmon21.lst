                   ; PAULMON2, a user-friendly 8051 monitor, by Paul Stoffregen
                   ; Please email comments, suggestions, bugs to paul@pjrc.com
                   
                   ; Version 2.1
                   ;        Some code size improvements, contributed by Alexand
                   ;        Download can now start from main menu prompt
                   
                   ; It's free. PAULMON2 is in the public domain. You may copy
                   ; sections of code from PAULMON2 into your own programs, eve
                   ; for commercial purposes. PAULMON2 should only be distribut
                   ; free of charge, but may be bundled as 'value-added' with o
                   ; products, such as development boards, CDROMs, etc. Please
                   ; distribute the PAULMON2.DOC file and other files, not just
                   ; the object code!
                   
                   ; The PAULMON2.EQU and PAULMON2.HDR files contain valuable
                   ; information that could help you to write programs for use
                   ; with PAULMON2.
                   
                   ; PAULMON2 is in the public domain. PAULMON2 is distributed 
                   ; the hope that it will be useful, but without any warranty;
                   ; without even the implied warranty of merchantability or fi
                   ; for a particular purpose. 
                   
                   ; You are probably reading this code to see what it looks li
                   ; and possibly learn something, or to modify it for some rea
                   ; Either is ok, but please remember that this code uses a nu
                   ; of tricks to cram all the functionality into just 4k. As a
                   ; result, the code can be difficult to read, and adding new
                   ; features can be very difficult without growing beyond 4k. 
                   ; add or modify commands in PAULMON2, please consider using 
                   ; "external command" functionality. It is easier to develop
                   ; new commands this way, and you can distribute them to othe
                   ; users. Email paul@pjrc.com if you have new PAULMON2
                   ; commands to contribute to others. Details about adding new
                   ; commands to PAULMON2 (with examples) can be found at:
                   
                   ; http://www.pjrc.com/tech/8051/pm2_docs/addons.html
                   
                   ;---------------------------------------------------------;
                   ;                                                          ;
                   ;            PAULMON2's default configuration              ;
                   ;                                                          ;
                   ;---------------------------------------------------------;
                   
                   ; PAULMON2 should be assembled using the modified AS31 assem
                   ; originally written by Ken Stauffer, many small changes by 
                   ; Stoffregen. This free assembler is available on the web at
                   ; http://www.pjrc.com/tech/8051/index.html
                   ; As well, these web pages have a fill-out form which makes 
                   ; very easy to custom configure PAULMON2. Using this form wi
                   ; edit the code for you, run the AS31 assmebler, and send yo
                   ; object code to program into your chip.
                   
                   ; These two parameters control where PAULMON2 will be assemb
                   ; and where it will attempt to LJMP at the interrupt vector 
                   
0000:              .equ     base, 0x0000            ; location for PAULMON2
0000:              .equ     vector, 0x2000          ; location to LJMP interrup
                   
                   ; These three parameters tell PAULMON2 where the user's memo
                   ; installed. "bmem" and "emem" define the space that will be
                   ; for program headers, user installed commands, start-up pro
                   ; "bmem" and "emem" should be use so they exclude memory are
                   ; perphreal devices may be mapped, as reading memory from an
                   ; may reconfigure it unexpectedly.
                   
0000:              .equ     pgm, 0x2000             ; default location for the 
0000:              .equ     bmem, 0x1000            ; where is the beginning of
0000:              .equ     emem, 0xFFFF            ; end of the memory
                   
                   ; To set the baud rate, use this formula
                   ; baud_const = 256 - (crystal / (12 * 16 * baud))
                   
0000:              .equ     baud_const, 255                 ;57600 baud w/ 11.0
                   ;.equ    baud_const, 253                 ;19200 baud w/ 11.0
                   ;.equ    baud_const, 250                 ;9600 baud w/ 11.05
                   ;.equ    baud_const, 252                 ;19200 baud w/ 14.7
                   ;.equ    baud_const, 243                 ;4808 baud w/ 12 MH
                   
0000:              .equ     line_delay, 6           ; num of char times to paus
                   
                   ; Several people didn't like the key definations in PAULMON1
                   ; Actually, I didn't like 'em either, but I never took the t
                   ; to change it.   Eventually I got used to them, but now it'
                   ; really easy to change which keys do what in PAULMON2.   Yo
                   ; can guess what to do below, but don't use lowercase.
                   
0000:              .equ     help_key, '?'           ; help screen
0000:              .equ     dir_key, 'M'            ; directory
0000:              .equ     run_key, 'R'            ; run program
0000:              .equ     dnld_key, 'D'           ; download
0000:              .equ     upld_key, 'U'           ; upload
0000:              .equ     nloc_key, 'N'           ; new memory location
0000:              .equ     jump_key, 'J'           ; jump to memory location
0000:              .equ     dump_key, 'H'           ; hex dump memory
0000:              .equ     intm_key, 'I'           ; hex dump internal memory
0000:              .equ     edit_key, 'E'           ; edit memory
0000:              .equ     clrm_key, 'C'           ; clear memory
0000:              .equ     eio77_key, '<'
0000:              .equ     dio77_key, '>'
                   
                   ; These symbols configure paulmon2's internal memory usage.
                   ; It is usually not a good idea to change these unless you
                   ; know that you really have to.
                   
                   ; |00|01|02|03|04|05|06|07|08|09|0a|0b|0c|0d|0e|0f|10|11|12|
                   ; |r0|r1|r2|r3|r4|r5|r6|r7|  .  .  .  .  .  .  .  dnld  .  .
                   ;                                                           
0000:              .equ     psw_init, 0             ; value for psw (which reg 
0000:              .equ     dnld_parm, 0x08                 ; block of 16 bytes
0000:              .equ     stack, 0x17             ; location of the stack
                   
                   ; |P1.7|P1.6|P1.5|P1.4|P1.3|P1.2|P1.1|P1.0|
0000:              .equ     mctrl_default,  0b11111111
0000:              .equ     mctrl_shadow,   0b11111110
                   
                   ;---------------------------------------------------------;
                   ;                                                          ;
                   ;                     Interrupt Vectors                    ;
                   ;  (and little bits of code crammed in the empty spaces)  ;
                   ;                                                          ;
                   ;---------------------------------------------------------;
                   
                   ;------ RESET --------------------------------------------;
0000:              .org     base
0000: 02 07 9E              ljmp    poweron
                   ;------ RESET --------------------------------------------;
                   
                   ;------ IE0_VECTOR ---------------------------------------;
0003:              .org     base+3
0003: 02 20 03              ljmp    vector+3
                   ;------ IE0_VECTOR ---------------------------------------;
                   
                   r6r7todptr:
0006: 8E 82                 mov     dpl, r6
0008: 8F 83                 mov     dph, r7
000A: 22                    ret
                   
                   ;------ TF0_VECTOR ---------------------------------------;
000B:              .org     base+11
000B: 02 20 0B              ljmp    vector+11
                   ;------ TF0_VECTOR ---------------------------------------;
                   
                   dptrtor6r7:
000E: AE 82                 mov     r6, dpl
0010: AF 83                 mov     r7, dph
0012: 22                    ret
                   
                   ;------ IE1_VECTOR ---------------------------------------;
0013:              .org     base+19
0013: 02 20 13              ljmp    vector+19
                   ;------ IE1_VECTOR ---------------------------------------;
                   
                   dash:
0016: 74 2D                 mov     a, #'-'                 ; seems kinda trivi
0018: 01 6A                 ajmp    cout            ; this appears in code, it 
001A: 00                    nop                     ; bytes, but an acall takes
                   
                   ;------ TF1_VECTOR ---------------------------------------;
001B:              .org     base+27
001B: 02 20 1B              ljmp    vector+27
                   ;------ TF1_VECTOR ---------------------------------------;
                   
                   cout_sp:
001E: 11 6A                 acall   cout
0020: 01 68                 ajmp    space
0022: 00                    nop
                   
                   ;------ SI0_VECTOR ---------------------------------------;
0023:              .org     base+35
0023: 02 20 23              ljmp    vector+35
                   ;------ SI0_VECTOR ---------------------------------------;
                   
                   dash_sp:
0026: 11 16                 acall   dash
0028: 01 68                 ajmp    space
002A: 00                    nop
                   
                   ;------ TF2_VECTOR --- EX2_VECTOR ------------------------;
002B:              .org     base+43
002B: 02 20 2B              ljmp    vector+43
                   ;------ TF2_VECTOR --- EX2_VECTOR ------------------------;
                   
                   ;---------------------------------------------------------;
                   ;                                                          ;
                   ;        The jump table for user programs to call          ;
                   ;              subroutines within PAULMON                  ;
                   ;                                                          ;
                   ;---------------------------------------------------------;
                   
                   ; Never change this line!! Other
                   ; programs depend on these locations
                   ; to access paulmon2 functions
                   
002E:              .org     base+46
002E: 21 5E                 ajmp    phex1           ; 0x2E
0030: 01 6A                 ajmp    cout            ; 0x30
0032: 01 5E                 ajmp    cin             ; 0x32
0034: 21 5B                 ajmp    phex            ; 0x34
0036: 21 6D                 ajmp    phex16          ; 0x36
0038: 21 7A                 ajmp    pstr            ; 0x38
003A: 01 81                 ajmp    ghex            ; 0x3A
003C: 01 C5                 ajmp    ghex16          ; 0x3C
003E: 21 AC                 ajmp    esc             ; 0x4E
0040: 21 8D                 ajmp    upper           ; 0x40
0042: 02 08 28              ljmp    setbaud                 ; 0x42
                   pcstr_h:
0045: 02 09 70              ljmp    pcstr           ; 0x45
0048: 01 74                 ajmp    newline                 ; 0x48
004A: 02 01 9A              ljmp    lenstr          ; 0x4A
004D: 02 08 B9              ljmp    pint8u          ; 0x4D
0050: 02 08 BF              ljmp    pint8           ; 0x50
0053: 02 08 FD              ljmp    pint16u                 ; 0x53
0056: 02 07 78              ljmp    find            ; 0x56
                   cin_filter_h:
0059: 02 08 38              ljmp    cin_filter      ; 0x59
005C: 21 41                 ajmp    asc2hex                 ; 0x5C
                   
                   ;---------------------------------------------------------;
                   ;                                                          ;
                   ;               Subroutines for serial I/O                 ;
                   ;                                                          ;
                   ;---------------------------------------------------------;
                   
                   cin:
005E: 30 98 FD              jnb     ri, cin
0061: C2 98                 clr     ri
0063: E5 99                 mov     a, sbuf
0065: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                   dspace:
0066: 11 68                 acall   space
                   space:
0068: 74 20                 mov     a, #' '
                   cout:
006A: 30 99 FD              jnb     ti, cout
006D: C2 99                 clr     ti              ; clr ti before the mov to 
006F: F5 99                 mov     sbuf, a
0071: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                   ; Clearing ti before reading sbuf takes care of the case whe
                   ; interrupts may be enabled... If an interrupt were to happe
                   ; between those two instructions, the serial port will just
                   ; wait a while, but in the other order and the character cou
                   ; finish transmitting (during the interrupt routine) and the
                   ; ti would be cleared and never set again by the hardware, c
                   ; the next call to cout to hang forever!
                   
                   newline2:                        ; print two newlines
0072: 11 74                 acall   newline
                   newline:
0074: C0 E0                 push    acc             ; print one newline
0076: 74 0D                 mov     a, #13
0078: 11 6A                 acall   cout
007A: 74 0A                 mov     a, #10
007C: 11 6A                 acall   cout
007E: D0 E0                 pop     acc
0080: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                   ; get 2 digit hex number from serial port
                   ; c = set if ESC pressed, clear otherwise
                   ; psw.5 = set if return w/ no input, clear otherwise
                   
                   ghex:
                   ghex8:
0081: C2 D5                 clr     psw.5
                   ghex8c:
0083: 11 59                 acall   cin_filter_h    ; get first digit
0085: 31 8D                 acall   upper
0087: B4 1B 03              cjne    a, #27, ghex8f
                   ghex8d:
008A: D3                    setb    c
008B: E4                    clr     a
008C: 22                    ret
                   ghex8f:
008D: B4 0D 05              cjne    a, #13, ghex8h
0090: D2 D5                 setb    psw.5
0092: C3                    clr     c
0093: E4                    clr     a
0094: 22                    ret
                   ghex8h:
0095: FA                    mov     r2, a
0096: 31 41                 acall   asc2hex
0098: 40 E9                 jc      ghex8c
009A: CA                    xch     a, r2           ; r2 will hold hex value of
009B: 11 6A                 acall   cout
                   ghex8j:
009D: 11 59                 acall   cin_filter_h    ; get second digit
009F: 31 8D                 acall   upper
00A1: B4 1B 02              cjne    a, #27, ghex8k
00A4: 80 E4                 sjmp    ghex8d
                   ghex8k:
00A6: B4 0D 03              cjne    a, #13, ghex8m
00A9: EA                    mov     a, r2
00AA: C3                    clr     c
00AB: 22                    ret
                   ghex8m:
00AC: B4 08 04              cjne    a, #8, ghex8p
                   ghex8n:
00AF: 11 6A                 acall   cout
00B1: 80 D0                 sjmp    ghex8c
                   ghex8p:
00B3: B4 15 02              cjne    a, #21, ghex8q
00B6: 80 F7                 sjmp    ghex8n
                   ghex8q:
00B8: FB                    mov     r3, a
00B9: 31 41                 acall   asc2hex
00BB: 40 E0                 jc      ghex8j
00BD: CB                    xch     a, r3
00BE: 11 6A                 acall   cout
00C0: EA                    mov     a, r2
00C1: C4                    swap    a
00C2: 4B                    orl     a, r3
00C3: C3                    clr     c
00C4: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                   ; carry set if esc pressed
                   ; psw.5 set if return pressed w/ no input
                   
                   ghex16:
00C5: 7A 00                 mov     r2, #0          ; start out with 0
00C7: 7B 00                 mov     r3, #0
00C9: 7C 04                 mov     r4, #4          ; number of digits left
00CB: C2 D5                 clr     psw.5
                   
                   ghex16c:
00CD: 11 59                 acall   cin_filter_h
00CF: 31 8D                 acall   upper
00D1: B4 1B 07              cjne    a, #27, ghex16d
00D4: D3                    setb    c               ; handle esc key
00D5: E4                    clr     a
00D6: F5 83                 mov     dph, a
00D8: F5 82                 mov     dpl, a
00DA: 22                    ret
                   ghex16d:
00DB: B4 08 02              cjne    a, #8, ghex16f
00DE: 80 03                 sjmp    ghex16k
                   ghex16f:
00E0: B4 7F 0C              cjne    a, #127, ghex16g        ; handle backspace
                   ghex16k:
00E3: BC 04 02              cjne    r4, #4, ghex16e                 ; have they
00E6: 80 E5                 sjmp    ghex16c
                   ghex16e:
00E8: 11 6A                 acall   cout
00EA: 31 30                 acall   ghex16y
00EC: 0C                    inc     r4
00ED: 80 DE                 sjmp    ghex16c
                   ghex16g:
00EF: B4 0D 10              cjne    a, #13, ghex16i                 ; return ke
00F2: 8B 83                 mov     dph, r3
00F4: 8A 82                 mov     dpl, r2
00F6: BC 04 07              cjne    r4, #4, ghex16h
00F9: E4                    clr     a
00FA: F5 83                 mov     dph, a
00FC: F5 82                 mov     dpl, a
00FE: D2 D5                 setb    psw.5
                   ghex16h:
0100: C3                    clr     c
0101: 22                    ret
                   ghex16i:
0102: FD                    mov     r5, a                   ; keep copy of orig
0103: 31 41                 acall   asc2hex
0105: 40 C6                 jc      ghex16c
0107: CD                    xch     a, r5
0108: 12 00 6A              lcall   cout
010B: ED                    mov     a, r5
010C: C0 E0                 push    acc
010E: 31 1F                 acall   ghex16x
0110: D0 E0                 pop     acc
0112: 2A                    add     a, r2
0113: FA                    mov     r2, a
0114: E4                    clr     a
0115: 3B                    addc    a, r3
0116: FB                    mov     r3, a
0117: DC B4                 djnz    r4, ghex16c
0119: C3                    clr     c
011A: 8A 82                 mov     dpl, r2
011C: 8B 83                 mov     dph, r3
011E: 22                    ret
                   
                   ghex16x:
                            ; multiply r3-r2 by 16 (shift left by 4)
011F: EB                    mov     a, r3
0120: C4                    swap    a
0121: 54 F0                 anl     a, #11110000b
0123: FB                    mov     r3, a
0124: EA                    mov     a, r2
0125: C4                    swap    a
0126: 54 0F                 anl     a, #00001111b
0128: 4B                    orl     a, r3
0129: FB                    mov     r3, a
012A: EA                    mov     a, r2
012B: C4                    swap    a
012C: 54 F0                 anl     a, #11110000b
012E: FA                    mov     r2, a
012F: 22                    ret
                   
                   ghex16y:
                            ; divide r3-r2 by 16 (shift right by 4)
0130: EA                    mov     a, r2
0131: C4                    swap    a
0132: 54 0F                 anl     a, #00001111b
0134: FA                    mov     r2, a
0135: EB                    mov     a, r3
0136: C4                    swap    a
0137: 54 F0                 anl     a, #11110000b
0139: 4A                    orl     a, r2
013A: FA                    mov     r2, a
013B: EB                    mov     a, r3
013C: C4                    swap    a
013D: 54 0F                 anl     a, #00001111b
013F: FB                    mov     r3, a
0140: 22                    ret
                   
                   asc2hex:
                            ; carry set if invalid input
0141: 24 D0                 add     a, #208
0143: 50 14                 jnc     hex_not
0145: 24 F6                 add     a, #246
0147: 40 04                 jc      hex_maybe
0149: 24 0A                 add     a, #10
014B: C3                    clr     c
014C: 22                    ret
                   hex_maybe:
014D: 24 F9                 add     a, #249
014F: 50 08                 jnc     hex_not
0151: 24 FA                 add     a, #250
0153: 40 04                 jc      hex_not
0155: 24 10                 add     a, #16
0157: C3                    clr     c
0158: 22                    ret
                   hex_not:
0159: D3                    setb    c
015A: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                   ; Highly code efficient resursive call phex contributed
                   ; by Alexander B. Alexandrov <abalex@cbr.spb.ru>
                   
                   phex:
                   phex8:
015B: 31 5D                 acall   phex_b
                   phex_b:
015D: C4                    swap    a               ; SWAP A will be twice => A
                   phex1:
015E: C0 E0                 push    acc
0160: 54 0F                 anl     a, #15
0162: 24 90                 add     a, #0x90        ; acc is 0x9X, where X is h
0164: D4                    da      a               ; if A to F, C=1 and lower 
0165: 34 40                 addc    a, #0x40
0167: D4                    da      a
0168: 11 6A                 acall   cout
016A: D0 E0                 pop     acc
016C: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                   phex16:
016D: C0 E0                 push    acc
016F: E5 83                 mov     a, dph
0171: 31 5B                 acall   phex
0173: E5 82                 mov     a, dpl
0175: 31 5B                 acall   phex
0177: D0 E0                 pop     acc
0179: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                   ; a not so well documented feature of pstr is that you can p
                   ; multiple consecutive strings without needing to reload dpt
                   ; (which takes 3 bytes of code!)... this is useful for inser
                   ; numbers or spaces between strings.
                   
                   pstr:
017A: C0 E0                 push    acc
                   pstr1:
017C: E0                    movx    a, @dptr
017D: A3                    inc     dptr
017E: 60 0A                 jz      pstr2
0180: A2 E7                 mov     c, acc.7
0182: 54 7F                 anl     a, #0x7F
0184: 11 6A                 acall   cout
0186: 40 02                 jc      pstr2
0188: 80 F2                 sjmp    pstr1
                   pstr2:
018A: D0 E0                 pop     acc
018C: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                   ; converts the ascii code in Acc to uppercase, if it is lowe
                   ; Code efficient (saves 6 byes) upper contributed
                   ; by Alexander B. Alexandrov <abalex@cbr.spb.ru>
                   
                   upper:
018D: B4 61 00              cjne    a, #97, upper2
                   upper2:
0190: 40 07                 jc      upper4          ; end if acc < 97
0192: B4 7B 00              cjne    a, #123, upper3
                   upper3:
0195: 50 02                 jnc     upper4          ; end if acc >= 123
0197: 24 E0                 add     a, #224                 ; convert to upperc
                   upper4:
0199: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                   lenstr:
019A: 78 00                 mov     r0, #0          ; returns length of a strin
019C: C0 E0                 push    acc
                   lenstr1:
019E: E0                    movx    a, @dptr
019F: 60 08                 jz      lenstr2
01A1: A2 E7                 mov     c, acc.7
01A3: 08                    inc     r0
01A4: 40 03                 Jc      lenstr2
01A6: A3                    inc     dptr
01A7: 80 F5                 sjmp    lenstr1
                   lenstr2:
01A9: D0 E0                 pop     acc
01AB: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                   ; checks to see if <ESC> is waiting on serial port
                   ; C=clear if no <ESC>, C=set if <ESC> pressed
                   ; buffer is flushed
                   
                   esc:
01AC: C0 E0                 push    acc
01AE: C3                    clr     c
01AF: 30 98 08              jnb     ri, esc2
01B2: E5 99                 mov     a, sbuf
01B4: B4 1B 01              cjne    a, #27, esc1
01B7: D3                    setb    c
                   esc1:
01B8: C2 98                 clr     ri
                   esc2:
01BA: D0 E0                 pop     acc
01BC: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                   menu:
                   ; first we print out the prompt, which isn't as simple
                   ; as it may seem, since external code can add to the
                   ; prompt, so we've got to find and execute all of 'em.
01BD: 90 0C 0F              mov     dptr, #prompt1          ; give 'em the firs
01C0: 11 45                 acall   pcstr_h
01C2: EF                    mov     a, r7
01C3: 31 5B                 acall   phex
01C5: EE                    mov     a, r6
01C6: 31 5B                 acall   phex
01C8: 90 0C 17              mov      dptr, #prompt2
01CB: 31 7A                 acall   pstr
                   
                   ; now we're finally past the prompt, so let's get some input
01CD: 11 59                 acall   cin_filter_h            ; get the input, fi
01CF: B4 3A 04              cjne    a, #':', menu0
01D2: 51 B4                 acall   dnld_now
01D4: 80 E7                 sjmp    menu
                   menu0:
01D6: 31 8D                 acall   upper
                   
                   ; push return address onto stack so we can just jump to the 
01D8: 75 F0 BD              mov     b, #(menu & 255)        ; we push the retur
01DB: C0 F0                 push    b                       ; to save code late
01DD: 75 F0 01              mov     b, #(menu >> 8)                 ; if bogus 
01E0: C0 F0                 push    b                       ; another prompt.
                   
                   ; first we'll look through memory for a program header that 
                   ; it's a user installed command which matches what the user 
                   
                   ; user installed commands need to avoid changing R6/R7, whic
                   ; the memory pointer. The stack pointer can't be changed obv
                   ; all the other general purpose registers should be availabl
                   ; user commands to alter as they wish.
                   
                   menux:
01E2: F5 F0                 mov     b, a            ; now search for external c
01E4: 90 10 00              mov     dptr, #bmem
                   menux1:
01E7: 12 07 78              lcall   find
01EA: 50 22                 jnc     menuxend        ; searched all the commands
01EC: 75 82 04              mov     dpl, #4
01EF: E0                    movx    a, @dptr
01F0: B4 FE 14              cjne    a, #254, menux2         ; only FE is an ext
01F3: 05 82                 inc     dpl
01F5: E0                    movx    a, @dptr
01F6: B5 F0 0E              cjne    a, b, menux2    ; only run if they want it
01F9: 11 68                 acall   space
01FB: 75 82 20              mov     dpl, #32
01FE: 31 7A                 acall   pstr            ; print command name
0200: 11 74                 acall   newline
0202: 75 82 40              mov     dpl, #64
0205: E4                    clr     a
0206: 73                    jmp     @a+dptr                 ; take a leap of fa
                   menux2:
0207: 05 83                 inc     dph
0209: E5 83                 mov     a, dph
020B: B4 00 D9              cjne    a, #((emem+1) >> 8) & 255, menux1
                   menuxend:
020E: E5 F0                 mov     a, b
                   
                   ; since we didn't find a user installed command, use the bui
                   
                   menu1a:
                   menu1b:
0210: B4 3F 07              cjne    a, #help_key, menu1c
0213: 90 0D 77              mov     dptr, #help_cmd2
0216: 11 45                 acall   pcstr_h
0218: A1 B5                 ajmp    help
                   menu1c:
021A: B4 4D 07              cjne    a, #dir_key, menu1d
021D: 90 0D 7F              mov     dptr, #dir_cmd
0220: 11 45                 acall   pcstr_h
0222: 81 A3                 ajmp    dir
                   menu1d:
0224: B4 52 07              cjne    a, #run_key, menu1e
0227: 90 0D 84              mov     dptr, #run_cmd
022A: 11 45                 acall   pcstr_h
022C: A1 1D                 ajmp    run
                   menu1e:
022E: B4 44 07              cjne    a, #dnld_key, menu1f
0231: 90 0D 88              mov     dptr, #dnld_cmd
0234: 11 45                 acall   pcstr_h
0236: 41 97                 ajmp    dnld
                   menu1f:
0238: B4 55 07              cjne    a, #upld_key, menu1g
023B: 90 0D 8B              mov     dptr, #upld_cmd
023E: 11 45                 acall   pcstr_h
0240: C1 4D                 ajmp    upld
                   menu1g:
0242: B4 4E 07              cjne    a, #nloc_key, menu1h
0245: 90 0D 8E              mov     dptr, #nloc_cmd
0248: 11 45                 acall   pcstr_h
024A: E1 3F                 ajmp    nloc
                   menu1h:
024C: B4 4A 07              cjne    a, #jump_key, menu1i
024F: 90 0D 92              mov     dptr, #jump_cmd
0252: 11 45                 acall   pcstr_h
0254: 81 01                 ajmp    jump
                   menu1i:
0256: B4 48 07              cjne    a, #dump_key, menu1j
0259: 90 0D 98              mov     dptr, #dump_cmd
025C: 11 45                 acall   pcstr_h
025E: 81 31                 ajmp    dump
                   menu1j:
0260: B4 45 07              cjne    a, #edit_key, menu1k
0263: 90 0D A4              mov     dptr, #edit_cmd
0266: 11 45                 acall   pcstr_h
0268: 81 70                 ajmp    edit
                   menu1k:
026A: B4 43 07              cjne    a, #clrm_key, menu1l
026D: 90 0D A9              mov     dptr, #clrm_cmd
0270: 11 45                 acall   pcstr_h
0272: E1 1D                 ajmp    clrm
                   menu1l:
0274: B4 49 08              cjne    a, #intm_key, menu1m
0277: 90 0D 9E              mov     dptr, #intm_cmd
027A: 11 45                 acall   pcstr_h
027C: 02 07 4F              ljmp    intm
                   menu1m:
027F: B4 3C 08              cjne    a, #eio77_key, menu1n
0282: 90 0D AD              mov     dptr, #eio77_cmd
0285: 11 45                 acall   pcstr_h
0287: 02 07 70              ljmp    eio77
                   menu1n:
028A: B4 3E 08              cjne    a, #dio77_key, menu1o
028D: 90 0D BC              mov     dptr, #dio77_cmd
0290: 11 45                 acall   pcstr_h
0292: 02 07 74              ljmp    dio77
                   menu1o:
                   
                   ; invalid input, no commands to run...
                   ; at this point, we have not found
                   ; anything to run, so we give up.
                   ; remember, we pushed menu, so newline
                   ; will just return to menu.
                   
                   menu_end:
0295: 01 74                 ajmp    newline
                   
                   ;---------------------------------------------------------;
                   
                   ; dnlds1 = "Begin sending Intel HEX format file <ESC> to abo
                   ; dnlds2 = "Download aborted"
                   ; dnlds3 = "Download completed"
                   
                   ; 16 byte parameter table: (eight 16 bit values)
                   ;  *   0 = lines received
                   ;  *   1 = bytes received
                   ;  *   2 = bytes written
                   ;  *   3 = bytes unable to write
                   ;  *   4 = incorrect checksums
                   ;  *   5 = unexpected begin of line
                   ;  *   6 = unexpected hex digits (while waiting for bol)
                   ;  *   7 = unexpected non-hex digits (in middle of a line)
                   
                   dnld:
0297: 90 0C A9              mov     dptr, #dnlds1   ; "begin sending file <ESC>
029A: 11 45                 acall   pcstr_h
029C: 71 F8                 acall   dnld_init
                            
                   dnld1:
                            ; look for begining of line marker ':'
029E: 11 5E                 acall   cin
02A0: B4 1B 02              cjne    a, #27, dnld2   ; Test for escape
02A3: 80 70                 sjmp    dnld_esc
                   
                   dnld2:
02A5: B4 3A 02              cjne    a, #':', dnld2b
02A8: 80 10                 sjmp    dnld2d
                   dnld2b:
                            ; check to see if it's a hex digit, error if it is
02AA: 31 41                 acall   asc2hex
02AC: 40 F0                 jc      dnld1
02AE: 79 06                 mov     r1, #6
02B0: 71 27                 acall   dnld_inc
02B2: 80 EA                 sjmp    dnld1
                   
                   dnld_now:
                            ; entry point for main menu detecting ":" character
02B4: 74 3A                 mov     a, #':'
02B6: 11 6A                 acall   cout
02B8: 71 F8                 acall   dnld_init
                   
                   dnld2d:
02BA: 79 00                 mov     r1, #0
02BC: 71 27                 acall   dnld_inc
                   
                   dnld3:
                            ; begin taking in the line of data
                            ; mov   a, #'.'
                            ; acall         cout
02BE: 7C 00                 mov     r4, #0          ; r4 will count up checksum
02C0: 71 46                 acall   dnld_ghex
02C2: F8                    mov     r0, a           ; R0 = # of data bytes
                            ; mov   a, #'.'
                            ; acall         cout
02C3: 71 46                 acall   dnld_ghex
02C5: F5 83                 mov     dph, a          ; High byte of load address
02C7: 71 46                 acall   dnld_ghex
02C9: F5 82                 mov     dpl, a          ; Low byte of load address
02CB: 71 46                 acall   dnld_ghex       ; Record type
02CD: B4 01 02              cjne    a, #1, dnld4    ; End record?
02D0: 80 29                 sjmp    dnld_end
                   dnld4:
02D2: 70 1E                 jnz     dnld_unknown    ; is it a unknown record ty
                   dnld5:
02D4: E8                    mov     a, r0
02D5: 60 10                 jz      dnld_get_cksum
02D7: 71 46                 acall   dnld_ghex       ; Get data byte
02D9: FA                    mov     r2, a
02DA: 79 01                 mov     r1, #1
02DC: 71 27                 acall   dnld_inc        ; count total data bytes re
02DE: EA                    mov     a, r2
02DF: F0                    movx    @dptr, a
02E0: 79 02                 mov     r1, #2
02E2: 71 27                 acall   dnld_inc
02E4: A3                    inc     dptr
02E5: D8 ED                 djnz    r0, dnld5
                   dnld_get_cksum:
02E7: 71 46                 acall   dnld_ghex       ; get checksum
02E9: EC                    mov     a, r4
02EA: 60 B2                 jz      dnld1           ; should always add to zero
                   dnld_sumerr:
02EC: 79 04                 mov     r1, #4
02EE: 71 27                 acall   dnld_inc        ; all we can do it count # 
02F0: 80 AC                 sjmp    dnld1
                   
                   dnld_unknown:    ; handle unknown line type
02F2: E8                    mov     a, r0
02F3: 60 F2                 jz      dnld_get_cksum  ; skip data if size is zero
                   dnld_ukn2:
02F5: 71 46                 acall   dnld_ghex       ; consume all of unknown da
02F7: D8 FC                 djnz    r0, dnld_ukn2
02F9: 80 EC                 sjmp    dnld_get_cksum
                   
                   dnld_end:
                            ; handles the proper end-of-download marker
02FB: E8                    mov     a, r0
02FC: 60 04                 jz      dnld_end_3      ; should usually be zero
                   dnld_end_2:
02FE: 71 46                 acall   dnld_ghex       ; consume all of useless da
0300: D8 F3                 djnz    r0, dnld_ukn2
                   dnld_end_3:
0302: 71 46                 acall   dnld_ghex       ; get the last checksum
0304: EC                    mov     a, r4
0305: 70 E5                 jnz     dnld_sumerr
0307: 71 1E                 acall   dnld_dly
0309: 90 0C C8              mov     dptr, #dnlds3   ; "download went ok..."
030C: 11 45                 acall   pcstr_h
                            ; consume any cr or lf character that may have been
                            ; on the end of the last line
030E: 30 98 7A              jnb     ri, dnld_sum
0311: 11 5E                 acall   cin
0313: 80 76                 sjmp    dnld_sum
                   
                   dnld_esc:
                            ; handle esc received in the download stream
0315: 71 1E                 acall   dnld_dly
0317: 90 0C C0              mov     dptr, #dnlds2   ; "download aborted."    
031A: 11 45                 acall   pcstr_h
031C: 80 6D                 sjmp    dnld_sum
                   
                   ; a short delay since most terminal emulation programs
                   ; won't be ready to receive anything immediately after
                   ; they've transmitted a file... even on a fast Pentium(tm)
                   ; machine with 16550 uarts!
                   
                   dnld_dly:
031E: 78 00                 mov     r0, #0
                   dnlddly2:
0320: 79 00                 mov     r1, #0
0322: D9 FE                 djnz    r1, *           ; roughly 128k cycles, appo
0324: D8 FA                 djnz    r0, dnlddly2
0326: 22                    ret
                   
                   ; increment parameter specified by R1
                   ; note, values in Acc and R1 are destroyed
                   
                   dnld_inc:
0327: E9                    mov     a, r1
0328: 54 07                 anl     a, #00000111b   ; just in case
032A: 23                    rl      a
032B: 24 08                 add     a, #dnld_parm
032D: F9                    mov     r1, a           ; now r1 points to lsb
032E: 07                    inc     @r1
032F: E7                    mov     a, @r1
0330: 70 02                 jnz     dnldin2
0332: 09                    inc     r1
0333: 07                    inc     @r1
                   dnldin2:
0334: 22                    ret
                   
                   ; get parameter, and inc to next one (@r1)
                   ; carry clear if parameter is zero.
                   ; 16 bit value returned in dptr
                   
                   dnld_gp:
0335: D3                    setb    c
0336: 87 82                 mov     dpl, @r1
0338: 09                    inc     r1
0339: 87 83                 mov     dph, @r1
033B: 09                    inc     r1
033C: E5 82                 mov     a, dpl
033E: 70 05                 jnz     dnldgp2
0340: E5 83                 mov     a, dph
0342: 70 01                 jnz     dnldgp2
0344: C3                    clr     c
                   dnldgp2:
0345: 22                    ret
                   
                   ; a special version of ghex just for the download. Does not
                   ; look for carriage return or backspace. Handles ESC key by
                   ; poping the return address (I know, nasty, but it saves man
                   ; bytes of code in this 4k ROM) and then jumps to the esc
                   ; key handling.  This ghex doesn't echo characters, and if i
                   ; sees ':', it pops the return and jumps to an error handler
                   ; for ':' in the middle of a line. Non-hex digits also jump
                   ; to error handlers, depending on which digit.
                   
                   dnld_ghex:
                   dnldgh1:
0346: 11 5E                 acall   cin
0348: 31 8D                 acall   upper
034A: B4 1B 06              cjne    a, #27, dnldgh3
                   dnldgh2:
034D: D0 E0                 pop     acc
034F: D0 E0                 pop     acc
0351: 80 C2                 sjmp    dnld_esc
                   dnldgh3:
0353: B4 3A 0A              cjne    a, #':', dnldgh5
                   dnldgh4:
0356: 79 05                 mov     r1, #5          ; handle unexpected beginni
0358: 71 27                 acall   dnld_inc
035A: D0 E0                 pop     acc
035C: D0 E0                 pop     acc
035E: 41 BE                 ajmp    dnld3           ; and now we're on a new li
                   dnldgh5:
0360: 31 41                 acall   asc2hex
0362: 50 06                 jnc     dnldgh6
0364: 79 07                 mov     r1, #7
0366: 71 27                 acall   dnld_inc
0368: 80 DC                 sjmp    dnldgh1
                   dnldgh6:
036A: FA                    mov     r2, a           ; keep first digit in r2
                   dnldgh7:
036B: 11 5E                 acall   cin
036D: 31 8D                 acall   upper
036F: B4 1B 02              cjne    a, #27, dnldgh8
0372: 80 D9                 sjmp    dnldgh2
                   dnldgh8:
0374: B4 3A 02              cjne    a, #':', dnldgh9
0377: 80 DD                 sjmp    dnldgh4
                   dnldgh9:
0379: 31 41                 acall   asc2hex
037B: 50 06                 jnc     dnldghA
037D: 79 07                 mov     r1, #7
037F: 71 27                 acall   dnld_inc
0381: 80 E8                 sjmp    dnldgh7
                   dnldghA:
0383: CA                    xch     a, r2
0384: C4                    swap    a
0385: 4A                    orl     a, r2
0386: FA                    mov     r2, a
0387: 2C                    add     a, r4           ; add into checksum
0388: FC                    mov     r4, a
0389: EA                    mov     a, r2           ; return value in acc
038A: 22                    ret
                   
                   ; dnlds4 =  "Summary:"
                   ; dnlds5 =  " lines received"
                   ; dnlds6a = " bytes received"
                   ; dnlds6b = " bytes written"
                   
                   ; print out download summary
                   
                   dnld_sum:
038B: EE                    mov     a, r6
038C: C0 E0                 push    acc
038E: EF                    mov     a, r7
038F: C0 E0                 push    acc
0391: 90 0C CF              mov     dptr, #dnlds4
0394: 11 45                 acall   pcstr_h
0396: 79 08                 mov     r1, #dnld_parm
0398: 7E D8                 mov     r6, #dnlds5 & 255
039A: 7F 0C                 mov     r7, #dnlds5 >> 8
039C: 71 F4                 acall   dnld_i0
039E: 7E DE                 mov     r6, #dnlds6a & 255
03A0: 7F 0C                 mov     r7, #dnlds6a >> 8
03A2: 71 F4                 acall   dnld_i0
03A4: 7E E3                 mov     r6, #dnlds6b & 255
03A6: 7F 0C                 mov     r7, #dnlds6b >> 8
03A8: 71 F4                 acall   dnld_i0
                   
                   ; now print out error summary
                   
                   dnld_err:
03AA: 7A 05                 mov     r2, #5
                   dnlder2:
03AC: 71 35                 acall   dnld_gp
03AE: 40 09                 jc      dnlder3                 ; any errors?
03B0: DA FA                 djnz    r2, dnlder2
                   ; no errors, so we print the nice message
03B2: 90 0D 1F              mov     dptr, #dnlds13
03B5: 11 45                 acall   pcstr_h
03B7: 80 25                 sjmp    dlnd_sum_done
                   
                   dnlder3:
                   ; there were errors, so now we print 'em
03B9: 90 0C EE              mov     dptr, #dnlds7
03BC: 11 45                 acall   pcstr_h
                   ; but let's not be nasty... only print if necessary
03BE: 79 0E                 mov     r1, #(dnld_parm+6)
03C0: 7E F2                 mov     r6, #dnlds8 & 255
03C2: 7F 0C                 mov     r7, #dnlds8 >> 8
03C4: 71 E6                 acall   dnld_item
03C6: 7E 03                 mov     r6, #dnlds9 & 255
03C8: 7F 0D                 mov     r7, #dnlds9 >> 8
03CA: 71 E6                 acall   dnld_item
03CC: 7E 0B                 mov     r6, #dnlds10 & 255
03CE: 7F 0D                 mov     r7, #dnlds10 >> 8
03D0: 71 E6                 acall   dnld_item
03D2: 7E 11                 mov     r6, #dnlds11 & 255
03D4: 7F 0D                 mov     r7, #dnlds11 >> 8
03D6: 71 E6                 acall   dnld_item
03D8: 7E 16                 mov     r6, #dnlds12 & 255
03DA: 7F 0D                 mov     r7, #dnlds12 >> 8
03DC: 71 E6                 acall   dnld_item
                   dlnd_sum_done:
03DE: D0 E0                 pop     acc
03E0: FF                    mov     r7, a
03E1: D0 E0                 pop     acc
03E3: FE                    mov     r6, a
03E4: 01 74                 ajmp    newline
                   
                   dnld_item:
03E6: 71 35                 acall   dnld_gp                 ; error conditions
03E8: 50 09                 jnc     dnld_i3
                   dnld_i2:
03EA: 11 68                 acall   space
03EC: 12 08 FD              lcall   pint16u
03EF: 11 06                 acall   r6r7todptr
03F1: 11 45                 acall   pcstr_h
                   dnld_i3:
03F3: 22                    ret
                   
                   dnld_i0:
03F4: 71 35                 acall   dnld_gp                 ; non-error conditi
03F6: 80 F2                 sjmp    dnld_i2
                   
                   ; init all dnld parms to zero.
                   
                   dnld_init:
03F8: 78 08                 mov     r0, #dnld_parm
                   dnld0:
03FA: 76 00                 mov     @r0, #0
03FC: 08                    inc     r0
03FD: B8 18 FA              cjne    r0, #dnld_parm + 16, dnld0
0400: 22                    ret
                   
                   ; dnlds7:  = "Errors:"
                   ; dnlds8:  = " bytes unable to write"
                   ; dnlds9:  = " incorrect checksums"
                   ; dnlds10: = " unexpected begin of line"
                   ; dnlds11: = " unexpected hex digits"
                   ; dnlds12: = " unexpected non-hex digits"
                   ; dnlds13: = "No errors detected"
                   
                   ;---------------------------------------------------------;
                   
                   jump:
0401: 90 0C 51              mov     dptr, #prompt8
0404: 11 45                 acall   pcstr_h
0406: 11 06                 acall   r6r7todptr
0408: 31 6D                 acall   phex16
040A: 90 0C 1F              mov     dptr, #prompt4
040D: 11 45                 acall   pcstr_h
040F: 11 C5                 acall   ghex16
0411: 20 D5 06              jb      psw.5, jump3
0414: 50 02                 jnc     jump2
0416: E1 18                 ajmp    abort2
                   jump2:
0418: 11 0E                 acall   dptrtor6r7
                   jump3:
041A: 11 74                 acall   newline
041C: 90 0D 2D              mov     dptr, #runs1
041F: 11 45                 acall   pcstr_h
0421: 11 06                 acall   r6r7todptr
                   
                   jump_doit:
                            ; jump to user code @dptr (this used by run command
0423: E4                    clr     a
0424: F5 D0                 mov     psw, a
0426: F5 F0                 mov     b, a
0428: 78 07                 mov     r0, #7
                   jditclr:
042A: F6                    mov     @r0, a          ; clear r7 to r1
042B: D8 FD                 djnz    r0, jditclr     ; clear r0
042D: 75 81 07              mov     sp, #7          ; start w/ sp=7, like a rea
0430: 73                    jmp     @a+dptr
                   
                   ;---------------------------------------------------------;
                   
                   dump:    
0431: 7A 10                 mov     r2, #16                 ; number of lines t
0433: 11 72                 acall   newline2
                   dump1:
0435: 11 06                 acall   r6r7todptr
0437: 31 6D                 acall   phex16          ; tell 'em the memory locat
0439: 74 3A                 mov     a, #':'
043B: 11 1E                 acall   cout_sp
043D: 7B 10                 mov     r3, #16                 ; r3 counts # of by
043F: 11 06                 acall   r6r7todptr
                   dump2:
0441: E0                    movx    a, @dptr
0442: A3                    inc     dptr
0443: 31 5B                 acall   phex            ; print each byte in hex
0445: 11 68                 acall   space
0447: DB F8                 djnz    r3, dump2
0449: 11 66                 acall   dspace          ; print a couple extra spac
044B: 7B 10                 mov     r3, #16
044D: 11 06                 acall   r6r7todptr
                   dump3:
044F: E0                    movx    a, @dptr
0450: A3                    inc     dptr
0451: 54 7F                 anl     a, #01111111b   ; avoid unprintable charact
0453: B4 7F 01              cjne    a, #127, dump3b
0456: E4                    clr     a               ; avoid 127/255 (delete/rub
                   dump3b:
0457: 24 E0                 add     a, #224
0459: 40 01                 jc      dump4
045B: E4                    clr     a               ; avoid control characters
                   dump4:
045C: 24 20                 add     a, #32
045E: 11 6A                 acall   cout
0460: DB ED                 djnz    r3, dump3
0462: 11 74                 acall   newline
0464: D1 D4                 acall   line_dly
0466: 11 0E                 acall   dptrtor6r7
0468: 31 AC                 acall   esc
046A: 40 02                 jc      dump5
046C: DA C7                 djnz    r2, dump1       ; loop back up to print nex
                   dump5:
046E: 01 74                 ajmp    newline
                   
                   ;---------------------------------------------------------;
                   
                   ; edit external ram
                   
                   edit:
0470: 90 0C 93              mov     dptr, #edits1
0473: 11 45                 acall   pcstr_h
0475: 11 06                 acall   r6r7todptr
                   edit1:
0477: 31 6D                 acall   phex16
0479: 74 3A                 mov     a, #':'
047B: 11 1E                 acall   cout_sp
047D: 74 28                 mov     a, #'('
047F: 11 6A                 acall   cout
0481: 11 0E                 acall   dptrtor6r7
0483: E0                    movx    a, @dptr
0484: 31 5B                 acall   phex
0486: 90 0C 6C              mov     dptr, #prompt10
0489: 11 45                 acall   pcstr_h
048B: 11 81                 acall   ghex
048D: 20 D5 0E              jb      psw.5, edit2
0490: 40 0C                 jc      edit2
0492: 11 06                 acall   r6r7todptr
0494: F0                    movx    @dptr, a
0495: 11 74                 acall   newline
0497: 11 06                 acall   r6r7todptr
0499: A3                    inc     dptr
049A: 11 0E                 acall   dptrtor6r7
049C: 81 77                 ajmp    edit1
                   edit2:
049E: 90 0C 9E              mov     dptr, #edits2
04A1: 01 45                 ajmp    pcstr_h
                   
                   ;---------------------------------------------------------;
                   
                   dir:
04A3: 90 0C 5B              mov     dptr, #prompt9
04A6: 11 45                 acall   pcstr_h
04A8: 78 15                 mov     r0, #21
                   dir0a:
04AA: 11 68                 acall   space
04AC: D8 FC                 djnz    r0, dir0a
04AE: 90 0C 62              mov     dptr, #prompt9b
04B1: 11 45                 acall   pcstr_h
                   
04B3: 75 83 10              mov     dph, #(bmem >> 8)
                   dir1:
04B6: 12 07 78              lcall   find            ; find the next program in 
04B9: 40 02                 jc      dir2
                   dir_end:
04BB: 01 74                 ajmp    newline                 ; we're done if no 
                   dir2:
04BD: 11 66                 acall   dspace
04BF: 75 82 20              mov     dpl, #32        ; print its name
04C2: 31 7A                 acall   pstr
04C4: 75 82 20              mov     dpl, #32        ; how long is the name
04C7: 31 9A                 acall   lenstr
04C9: 74 21                 mov     a, #33
04CB: C3                    clr     c
04CC: 98                    subb    a, r0
04CD: F8                    mov     r0, a
04CE: 74 20                 mov     a, #' '                 ; print the right #
                   dir3:
04D0: 11 6A                 acall   cout
04D2: D8 FC                 djnz    r0, dir3
04D4: 75 82 00              mov     dpl, #0
04D7: 31 6D                 acall   phex16          ; print the memory location
04D9: 78 06                 mov     r0, #6
04DB: 74 20                 mov     a, #' '
                   dir4:
04DD: 11 6A                 acall   cout
04DF: D8 FC                 djnz    r0, dir4
04E1: 75 82 04              mov     dpl, #4                 ; now figure out wh
04E4: E0                    movx    a, @dptr
04E5: AA 83                 mov     r2, dph                 ; save this, we're 
                   
                   dir5:
04E7: B4 FE 05              cjne    a, #254, dir5b
04EA: 90 0D 65              mov     dptr, #type1    ; it's an external command
04ED: 80 18                 sjmp    dir7
                   dir5b:
04EF: B4 FD 05              cjne    a, #253, dir5c
                   dir5bb:
04F2: 90 0D 6C              mov     dptr, #type4    ; it's a startup routine
04F5: 80 10                 sjmp    dir7
                   dir5c:
04F7: B4 23 05              cjne    a, #35, dir5d
04FA: 90 0D 69              mov     dptr, #type2    ; it's an ordinary program
04FD: 80 08                 sjmp    dir7
                   dir5d:
04FF: B4 F9 02              cjne    a, #249, dir5e
0502: 80 EE                 sjmp    dir5bb
                   dir5e:
                   dir6:
0504: 90 0D 73              mov     dptr, #type5    ; who knows what the hell i
                   
                   dir7:
0507: 11 45                 acall   pcstr_h                 ; print out the typ
0509: 8A 83                 mov     dph, r2                 ; go back and find 
050B: 11 74                 acall   newline
050D: 74 FF                 mov     a, #(emem >> 8)
050F: B5 83 02              cjne    a, dph, dir8    ; did we just print the las
0512: 81 BB                 ajmp    dir_end
                   dir8:
0514: 05 83                 inc     dph
0516: E5 83                 mov     a, dph
0518: B4 00 9B              cjne    a, #((emem+1) >> 8) & 255, dir1
051B: 81 BB                 ajmp    dir_end
                   
                   ; type1=Ext Command
                   ; type4=Startup
                   ; type2=Program
                   ; type5=???
                   
                   ;---------------------------------------------------------;
                   
                   run:
051D: 11 72                 acall   newline2
051F: 7A FF                 mov     r2, #255        ; first print the menu, cou
0521: 90 10 00              mov     dptr, #bmem
0524: 15 83                 dec     dph
                   run2:
0526: 05 83                 inc     dph
0528: E5 83                 mov     a, dph
052A: B4 00 02              cjne    a, #((emem+1) >> 8) & 255, run2b
052D: 80 21                 sjmp    run3
                   run2b:
052F: 12 07 78              lcall   find
0532: 50 1C                 jnc     run3            ; have we found 'em all??
0534: 75 82 04              mov     dpl, #4
0537: E0                    movx    a, @dptr
0538: 44 03                 orl     a, #00000011b
053A: F4                    cpl     a
053B: 60 E9                 jz      run2            ; this one doesn't run... f
053D: 11 66                 acall   dspace
053F: 0A                    inc     r2
0540: 74 41                 mov     a, #'A'                 ; print the key to 
0542: 2A                    add     a, r2
0543: 11 1E                 acall   cout_sp
0545: 11 26                 acall   dash_sp
0547: 75 82 20              mov     dpl, #32
054A: 31 7A                 acall   pstr            ; and the command name
054C: 11 74                 acall   newline
054E: A1 26                 ajmp    run2            ; and continue doing this
                   run3:
0550: BA FF 05              cjne    r2, #255, run4  ; are there any to run??
0553: 90 0C 28              mov     dptr, #prompt5
0556: 01 45                 ajmp    pcstr_h
                   run4:
0558: 90 0C 1A              mov     dptr, #prompt3  ; ask the big question!
055B: 11 45                 acall   pcstr_h
055D: 74 41                 mov     a, #'A'
055F: 11 6A                 acall   cout
0561: 11 16                 acall   dash
0563: 74 41                 mov     a, #'A'                 ; such user friendl
0565: 2A                    add     a, r2           ; even tell 'em the choices
0566: 11 6A                 acall   cout
0568: 90 0C 1F              mov     dptr, #prompt4
056B: 11 45                 acall   pcstr_h
056D: 11 59                 acall   cin_filter_h
056F: B4 1B 02              cjne    a, #27, run4aa  ; they they hit <ESC>
0572: 01 74                 ajmp    newline
                   run4aa:
0574: FB                    mov     r3, a
0575: 74 1F                 mov     a, #31
0577: C3                    clr     c
0578: 9A                    subb    a, r2
0579: EB                    mov     a, r3
057A: 40 02                 jc      run4a
057C: 31 8D                 acall   upper
                   run4a:
057E: 11 6A                 acall   cout
0580: FB                    mov     r3, a
0581: 11 74                 acall   newline
                            ; check to see if it's under 32, if so convert to u
0583: EB                    mov     a, r3
0584: 24 BF                 add     a, #(256 - 'A')
0586: 50 D0                 jnc     run4            ; if they typed less than '
0588: FB                    mov     r3, a           ; R3 has the number they ty
0589: EA                    mov     a, r2           ; A=R2 has the maximum numb
058A: C3                    clr     c
058B: 9B                    subb    a, r3
058C: 40 CA                 jc      run4            ; if they typed over the ma
058E: 0B                    inc     r3
058F: 90 10 00              mov     dptr, #bmem
0592: 15 83                 dec     dph
                   run5:
0594: 05 83                 inc     dph
0596: E5 83                 mov     a, dph
0598: B4 00 02              cjne    a, #((emem+1) >> 8) & 255, run5b
059B: 80 17                 sjmp    run8
                   run5b:
059D: 12 07 78              lcall   find
05A0: 50 12                 jnc     run8            ; Shouldn't ever do this ju
05A2: 75 82 04              mov     dpl, #4
05A5: E0                    movx    a, @dptr
05A6: 44 03                 orl     a, #00000011b
05A8: F4                    cpl     a
05A9: 60 E9                 jz      run5            ; this one doesn't run... f
05AB: DB E7                 djnz    r3, run5        ; count til we find the one
05AD: 11 74                 acall   newline
05AF: 75 82 40              mov     dpl, #64
05B2: 81 23                 ajmp    jump_doit
                   run8:
05B4: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                   help:
05B5: 90 0D 4D              mov     dptr, #help1txt
05B8: 11 45                 acall   pcstr_h
05BA: 7C 3F                 mov     r4, #help_key
05BC: 90 0D 7A              mov     dptr, #help_cmd
05BF: D1 42                 acall   help2
05C1: 7C 4D                 mov     r4, #dir_key
05C3: 90 0D 7F              mov      dptr, #dir_cmd
05C6: D1 42                 acall   help2
05C8: 7C 52                 mov     r4, #run_key
05CA: 90 0D 84              mov      dptr, #run_cmd
05CD: D1 42                 acall   help2
05CF: 7C 44                 mov     r4, #dnld_key
05D1: 90 0D 88              mov      dptr, #dnld_cmd
05D4: D1 42                 acall   help2
05D6: 7C 55                 mov     r4, #upld_key
05D8: 90 0D 8B              mov      dptr, #upld_cmd
05DB: D1 42                 acall   help2
05DD: 7C 4E                 mov     r4, #nloc_key
05DF: 90 0D 8E              mov      dptr, #nloc_cmd
05E2: D1 42                 acall   help2
05E4: 7C 4A                 mov     r4, #jump_key
05E6: 90 0D 92              mov      dptr, #jump_cmd
05E9: D1 42                 acall   help2
05EB: 7C 48                 mov     r4, #dump_key
05ED: 90 0D 98              mov      dptr, #dump_cmd
05F0: D1 42                 acall   help2
05F2: 7C 49                 mov     r4, #intm_key
05F4: 90 0D 9E              mov     dptr, #intm_cmd
05F7: D1 42                 acall   help2
05F9: 7C 45                 mov     r4, #edit_key
05FB: 90 0D A4              mov      dptr, #edit_cmd
05FE: D1 42                 acall   help2
0600: 7C 43                 mov     r4, #clrm_key
0602: 90 0D A9              mov      dptr, #clrm_cmd
0605: D1 42                 acall   help2
0607: 7C 3C                 mov     r4, #eio77_key
0609: 90 0D AD              mov     dptr, #eio77_cmd
060C: D1 42                 acall   help2
060E: 7C 3E                 mov     r4, #dio77_key
0610: 90 0D BC              mov     dptr, #dio77_cmd
0613: D1 42                 acall   help2
0615: 90 0D 5B              mov     dptr, #help2txt
0618: 11 45                 acall   pcstr_h
061A: 90 10 00              mov     dptr, #bmem
                   help3:
061D: 12 07 78              lcall   find
0620: 50 1E                 jnc     help4
0622: 75 82 04              mov     dpl, #4
0625: E0                    movx    a, @dptr
0626: B4 FE 10              cjne    a, #254, help3a         ; only FE is an ext
0629: 11 66                 acall   dspace
062B: 05 82                 inc     dpl
062D: E0                    movx    a, @dptr
062E: 11 6A                 acall   cout
0630: 11 26                 acall   dash_sp
0632: 75 82 20              mov     dpl, #32
0635: 31 7A                 acall   pstr
0637: 11 74                 acall   newline
                   help3a:
0639: 05 83                 inc     dph
063B: E5 83                 mov     a, dph
063D: B4 00 DD              cjne    a, #((emem+1) >> 8) & 255, help3
                   help4:   
0640: 01 74                 ajmp    newline
                   
                   help2:                           ; print 11 standard lines
0642: 11 66                 acall   dspace          ; given key in R4 and name 
0644: EC                    mov     a, r4
0645: 11 6A                 acall   cout
0647: 11 26                 acall   dash_sp
0649: 11 45                 acall   pcstr_h
064B: 01 74                 ajmp    newline
                   
                   ;---------------------------------------------------------;
                   
                   upld:
064D: D1 E6                 acall   get_mem
                            ; assume we've got the beginning address in r3/r2
                            ; and the final address in r5/r4 (r4=lsb)...
                   
                            ; print out what we'll be doing
064F: 90 0D 37              mov     dptr, #uplds3
0652: 11 45                 acall   pcstr_h
0654: EB                    mov     a, r3
0655: 31 5B                 acall   phex
0657: EA                    mov     a, r2
0658: 31 5B                 acall   phex
065A: 90 0D 48              mov      dptr, #uplds4
065D: 11 45                 acall   pcstr_h
065F: ED                    mov     a, r5
0660: 31 5B                 acall   phex
0662: EC                    mov     a, r4
0663: 31 5B                 acall   phex
0665: 11 74                 acall   newline
                   
                            ; need to adjust end location by 1...
0667: 8D 83                 mov     dph, r5
0669: 8C 82                 mov     dpl, r4
066B: A3                    inc     dptr
066C: AC 82                 mov     r4, dpl
066E: AD 83                 mov     r5, dph
                   
0670: 90 0C 47              mov     dptr, #prompt7
0673: 11 45                 acall   pcstr_h
0675: 11 5E                 acall   cin
0677: B4 1B 02              cjne    a, #27, upld2e
067A: E1 16                 ajmp    abort_it
                   upld2e:
067C: 11 74                 acall   newline
067E: 8A 82                 mov     dpl, r2
0680: 8B 83                 mov     dph, r3
                   
                   upld3:
0682: EC                    mov     a, r4           ; how many more bytes to ou
0683: C3                    clr     c
0684: 95 82                 subb    a, dpl
0686: FA                    mov     r2, a
0687: ED                    mov     a, r5
0688: 95 83                 subb    a, dph
068A: 70 09                 jnz     upld4           ; if >256 left, then do nex
068C: EA                    mov     a, r2
068D: 60 31                 jz      upld7           ; if we're all done
068F: 54 F0                 anl     a, #11110000b
0691: 70 02                 jnz     upld4           ; if >= 16 left, then do ne
0693: 80 02                 sjmp    upld5           ; otherwise just finish it 
                   upld4:
0695: 7A 10                 mov     r2, #16
                   upld5:
0697: 74 3A                 mov     a, #':'                 ; begin the line
0699: 11 6A                 acall   cout
069B: EA                    mov     a, r2
069C: 31 5B                 acall   phex            ; output # of data bytes
069E: 31 6D                 acall   phex16          ; output memory location
06A0: E5 83                 mov     a, dph
06A2: 25 82                 add     a, dpl
06A4: 2A                    add     a, r2
06A5: FB                    mov     r3, a           ; r3 will become checksum
06A6: E4                    clr     a
06A7: 31 5B                 acall   phex            ; output 00 code for data
                   upld6:
06A9: E0                    movx    a, @dptr
06AA: 31 5B                 acall   phex            ; output each byte
06AC: 2B                    add     a, r3
06AD: FB                    mov     r3, a
06AE: A3                    inc     dptr
06AF: DA F8                 djnz    r2, upld6       ; do however many bytes we 
06B1: EB                    mov     a, r3
06B2: F4                    cpl     a
06B3: 04                    inc     a
06B4: 31 5B                 acall   phex            ; and finally the checksum
06B6: 11 74                 acall   newline
06B8: D1 D4                 acall   line_dly
06BA: 31 AC                 acall   esc
06BC: 50 C4                 jnc     upld3           ; keep working if no esc pr
06BE: 80 56                 sjmp    abort_it
                   upld7:
06C0: 74 3A                 mov     a, #':'
06C2: 11 6A                 acall   cout
06C4: E4                    clr     a
06C5: 31 5B                 acall   phex
06C7: 31 5B                 acall   phex
06C9: 31 5B                 acall   phex
06CB: 04                    inc     a
06CC: 31 5B                 acall   phex
06CE: 74 FF                 mov     a, #255
06D0: 31 5B                 acall   phex
                   upld8:
06D2: 01 72                 ajmp    newline2
                   
                   line_dly:
                            ; a brief delay between line while uploading, so th
                            ; receiving host can be slow (i.e. most windows sof
06D4: E8                    mov     a, r0
06D5: C0 E0                 push    acc
06D7: 78 0C                 mov     r0, #line_delay*2
                   line_d2:
06D9: E5 8C                 mov     a, th0          ; get baud rate const
                   line_d3:
06DB: 04                    inc     a
06DC: 00                    nop
06DD: 00                    nop
06DE: 70 FB                 jnz     line_d3
06E0: D8 F7                 djnz    r0, line_d2
06E2: D0 E0                 pop     acc
06E4: F8                    mov     r0, a
06E5: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                   ; this thing gets the begin and end locations for
                   ; a few commands. If an esc or enter w/ no input,
                   ; it pops it's own return and returns to the menu
                   ; (nasty programming, but we need tight code for 4k rom)
                   
                   get_mem:
06E6: 11 72                 acall   newline2
06E8: 90 0C 75              mov     dptr, #beg_str
06EB: 11 45                 acall   pcstr_h
06ED: 11 C5                 acall   ghex16
06EF: 40 21                 jc      pop_it
06F1: 20 D5 1E              jb      psw.5, pop_it
06F4: C0 83                 push    dph
06F6: C0 82                 push    dpl
06F8: 11 74                 acall   newline
06FA: 90 0C 7F              mov     dptr, #end_str
06FD: 11 45                 acall   pcstr_h
06FF: 11 C5                 acall   ghex16
0701: AD 83                 mov     r5, dph
0703: AC 82                 mov     r4, dpl
0705: D0 E0                 pop     acc
0707: FA                    mov     r2, a
0708: D0 E0                 pop     acc
070A: FB                    mov     r3, a
070B: 40 05                 jc      pop_it
070D: 20 D5 02              jb      psw.5, pop_it
0710: 01 74                 ajmp    newline
                   
                   pop_it:
0712: D0 E0                 pop     acc
0714: D0 E0                 pop     acc
                   abort_it:
0716: 11 74                 acall   newline
                   abort2:
0718: 90 0C 07              mov     dptr, #abort
071B: 01 45                 ajmp    pcstr_h
                   
                   ;---------------------------------------------------------;
                   
                   clrm:
071D: D1 E6                 acall   get_mem
071F: 90 0C 89              mov     dptr, #sure
0722: 11 45                 acall   pcstr_h
0724: 11 59                 acall   cin_filter_h
0726: 31 8D                 acall   upper
0728: B4 59 EB              cjne    a, #'Y', abort_it
072B: 11 72                 acall   newline2
                   clrm2:
                            ; now we actually do it
072D: 8B 83                 mov     dph, r3
072F: 8A 82                 mov     dpl, r2
                   clrm3:
0731: E4                    clr     a
0732: F0                    movx    @dptr, a
0733: ED                    mov     a, r5
0734: B5 83 05              cjne    a, dph, clrm4
0737: EC                    mov     a, r4
0738: B5 82 01              cjne    a, dpl, clrm4
073B: 22                    ret
                   clrm4:
073C: A3                    inc     dptr
073D: 80 F2                 sjmp    clrm3
                   
                   ;---------------------------------------------------------;
                   
                   nloc:
073F: 90 0C 3E              mov     dptr, #prompt6
0742: 11 45                 acall   pcstr_h
0744: 11 C5                 acall   ghex16
0746: 40 D0                 jc      abort2
0748: 20 D5 CD              jb      psw.5, abort2
074B: 11 0E                 acall   dptrtor6r7
074D: 01 72                 ajmp    newline2
                   
                   ;---------------------------------------------------------;
                   
                   intm:
074F: 11 74                 acall   newline
0751: 78 00                 mov     r0, #0
                   intm2:
0753: 11 74                 acall   newline
0755: E8                    mov     a, r0
0756: 31 5B                 acall   phex
0758: 74 3A                 mov     a, #':'
075A: 11 6A                 acall   cout
                   intm3:
075C: 11 68                 acall   space
075E: E6                    mov     a, @r0
075F: 31 5B                 acall   phex
0761: 08                    inc     r0
0762: B8 00 04              cjne    r0, #0, intm4
0765: 11 74                 acall   newline
0767: 01 74                 ajmp    newline
                   intm4:
0769: E8                    mov     a, r0
076A: 54 0F                 anl     a, #00001111b
076C: 70 EE                 jnz     intm3
076E: 80 E3                 sjmp    intm2
                   
                   ;---------------------------------------------------------;
                   
                   eio77:
0770: C2 97                 clr     p1.7
0772: 01 74                 ajmp    newline
                            
                   ;---------------------------------------------------------;
                   
                   dio77:
0774: D2 97                 setb    p1.7
0776: 01 74                 ajmp    newline
                   
                   ;---------------------------------------------------------;
                   
                   ; finds the next header in the external memory.
                   ; Input DPTR=point to start search (only MSB used)
                   ; Output DPTR=location of next module
                   ; C=set if a header found, C=clear if no more headers
                   
                   find:
0778: 75 82 00              mov     dpl, #0
077B: E0                    movx    a, @dptr
077C: B4 A5 14              cjne    a, #0xA5, find3
077F: A3                    inc     dptr
0780: E0                    movx    a, @dptr
0781: B4 E5 0F              cjne    a, #0xE5, find3
0784: A3                    inc     dptr
0785: E0                    movx    a, @dptr
0786: B4 E0 0A              cjne    a, #0xE0, find3
0789: A3                    inc     dptr
078A: E0                    movx    a, @dptr
078B: B4 A5 05              cjne    a, #0xA5, find3
078E: 75 82 00              mov     dpl, #0                         ; found one
0791: D3                    setb    c
0792: 22                    ret
                   find3:
0793: 74 FF                 mov     a, #(emem >> 8)
0795: B5 83 02              cjne    a, dph, find4           ; did we just check
0798: C3                    clr     c
0799: 22                    ret
                   find4:
079A: 05 83                 inc     dph                     ; keep on searching
079C: 80 DA                 sjmp    find
                   
                   ;---------------------------------------------------------;
                   
                   ;---------------------------------------------------------;
                   ;                                                          ;
                   ;        Power-On initialization code and such...          ;
                   ;                                                          ;
                   ;---------------------------------------------------------;
                   
                   ; first the hardware has to get initialized.
                   
                   poweron:
079E: E4                    clr     a
079F: F5 A8                 mov     ie, a           ; all interrupts off
07A1: F5 B8                 mov     ip, a
07A3: 75 D0 00              mov     psw, #psw_init
07A6: 75 81 17              mov     sp, #stack
07A9: 74 FF                 mov     a, #mctrl_default
07AB: F5 90                 mov     p1, a
07AD: FF                    mov     r7, a
07AE: FF                    mov     r7, a
07AF: FF                    mov     r7, a
07B0: FF                    mov     r7, a
                            
                   begin_cp_shadow:
07B1: 90 00 00              mov     dptr, #0x0000
                   cp_byte:
07B4: E4                    clr     a
07B5: 93                    movc    a, @a+dptr
07B6: F0                    movx    @dptr, a
07B7: A3                    inc     dptr
07B8: E5 83                 mov     a, dph
07BA: B4 20 F7              cjne    a, #0x20, cp_byte
                   end_cp_shadow:
07BD: 74 FE                 mov     a, #mctrl_shadow
07BF: F5 90                 mov     p1, a
07C1: FF                    mov     r7, a
07C2: FF                    mov     r7, a
07C3: FF                    mov     r7, a
07C4: FF                    mov     r7, a
                            
                   ; run any user initialization programs in external memory
07C5: 75 F0 F9              mov     b, #249
07C8: 12 07 FA              lcall   stcode
                   
                   ; initialize the serial port
07CB: 12 08 26              lcall   setbaud_reset
                   
                   ; run the start-up programs in external memory
07CE: 75 F0 FD              mov     b, #253
07D1: 12 07 FA              lcall   stcode
                   
                   ; now print out the nice welcome message
                   welcome:
07D4: 78 18                 mov     r0, #24
                   welcm2:
07D6: 12 00 74              lcall   newline
07D9: D8 FB                 djnz    r0, welcm2
07DB: 78 0F                 mov     r0, #15
07DD: 74 20                 mov     a, #' '
                   welcm4:
07DF: 12 00 6A              lcall   cout
07E2: D8 FB                 djnz    r0, welcm4
07E4: 90 0B D0              mov     dptr, #logon1
07E7: 12 09 70              lcall   pcstr
07EA: 90 0B E9              mov     dptr, #logon2
07ED: 12 09 70              lcall   pcstr
07F0: 12 04 A3              lcall   dir
07F3: 7E 00                 mov     r6, #(pgm & 255)
07F5: 7F 20                 mov     r7, #(pgm >> 8)
07F7: 02 01 BD              ljmp    menu
                   
                   stcode:
07FA: 90 10 00              mov     dptr, #bmem      ; search for startup routi
                   stcode2:
07FD: 12 07 78              lcall   find
0800: 50 23                 jnc     stcode5
0802: 75 82 04              mov     dpl, #4
0805: E0                    movx    a, @dptr
0806: B5 F0 15              cjne    a, b, stcode4   ; only startup code if matc
0809: C0 F0                 push    b
080B: C0 83                 push    dph
080D: 74 1A                 mov     a, #(stcode3 & 255)
080F: C0 E0                 push    acc
0811: 74 08                 mov     a, #(stcode3 >> 8)
0813: C0 E0                 push    acc
0815: 75 82 40              mov     dpl, #64
0818: E4                    clr     a
0819: 73                    jmp     @a+dptr                 ; jump to the start
                   stcode3:
081A: D0 83                 pop     dph             ; hopefully it'll return to
081C: D0 F0                 pop     b
                   stcode4:
081E: 05 83                 inc     dph
0820: E5 83                 mov     a, dph
0822: B4 00 D8              cjne    a, #((emem+1) >> 8) & 255, stcode2
                   stcode5:
0825: 22                    ret                     ; now we've executed all of
                   
                   ;---------------------------------------------------------;
                   
                   setbaud_reset:
0826: 74 FF                 mov     a, #baud_const
                   setbaud:
0828: F5 8D                 mov     th1, a
082A: F5 8B                 mov     tl1, a
082C: 75 89 21              mov     tmod, #0x21     ; set timer #1 for 8 bit au
082F: 75 87 80              mov     pcon, #0x80     ; configure built-in uart
0832: 75 98 52              mov     scon, #0x52
0835: D2 8E                 setb    tr1             ; start the baud rate timer
0837: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                   ; this twisted bit of code looks for escape sequences for
                   ; up, down, left, right, pageup, and pagedown, as well
                   ; as ordinary escape and ordinary characters. Escape
                   ; sequences are required to arrive with each character
                   ; nearly back-to-back to the others, otherwise the character
                   ; are treated as ordinary user keystroaks. cin_filter
                   ; returns a single byte when it sees the multi-byte escape
                   ; sequence, as shown here.
                   
                   ; return value    key            escape sequence
                   ;   11 (^K)       up             1B 5B 41
                   ;   10 (^J)       down           1B 5B 42
                   ;   21 (^U)       right          1B 5B 43
                   ;    8 (^H)       left           1B 5B 44
                   ;   25 (^Y)       page up        1B 5B 35 7E
                   ;   26 (^Z)       page down      1B 5B 36 7E
                   
0838:              .equ     esc_char, 27
                   
                   cin_filter:
0838: 30 98 06              jnb     ri, cinf1
083B: 12 00 5E              lcall   cin
083E: B4 1B 51              cjne    a, #esc_char, cinf_end
                            ; if esc was already in sbuf, just ignore it
                   cinf1:
0841: 12 00 5E              lcall   cin
0844: B4 1B 4B              cjne    a, #esc_char, cinf_end
                   cinf2:
0847: 11 A6                 acall   cinf_wait
0849: 20 98 03              jb      ri, cinf4
084C: 74 1B                 mov     a, #esc_char
084E: 22                    ret                     ; an ordinary ESC
                   
                   cinf4:
                            ; if we get here, it's a control code, since a char
                            ; was received shortly after receiving an ESC chara
084F: 12 00 5E              lcall   cin
0852: B4 5B 44              cjne    a, #'[', cinf_consume
0855: 11 A6                 acall   cinf_wait
0857: 30 98 DE              jnb     ri, cin_filter
085A: 12 00 5E              lcall   cin
                   cinf5a:
085D: B4 41 03              cjne    a, #'A', cinf5b
0860: 74 0B                 mov     a, #11
0862: 22                    ret
                   cinf5b:
0863: B4 42 03              cjne    a, #'B', cinf5c
0866: 74 0A                 mov     a, #10
0868: 22                    ret
                   cinf5c:
0869: B4 43 03              cjne    a, #'C', cinf5d
086C: 74 15                 mov     a, #21
086E: 22                    ret
                   cinf5d:
086F: B4 44 03              cjne    a, #'D', cinf5e
0872: 74 08                 mov     a, #8
0874: 22                    ret
                   cinf5e:
0875: B4 35 02              cjne    a, #0x35, cinf5f
0878: 80 07                 sjmp    cinf8
                   cinf5f:
087A: B4 36 02              cjne    a, #0x36, cinf5g
087D: 80 02                 sjmp    cinf8
                   cinf5g:
087F: 80 18                 sjmp    cinf_consume            ; unknown escape se
                   
                   cinf8:
                            ; when we get here, we've got the sequence for page
                            ; but there's one more incoming byte to check...
0881: C0 E0                 push    acc
0883: 11 A6                 acall   cinf_wait
0885: 30 98 0B              jnb     ri, cinf_restart
0888: 12 00 5E              lcall   cin
088B: B4 7E 09              cjne    a, #0x7E, cinf_notpg
088E: D0 E0                 pop     acc
0890: 24 E4                 add     a, #228
                   cinf_end:
0892: 22                    ret
                   cinf_restart:
0893: D0 E0                 pop     acc
0895: 80 A1                 sjmp    cin_filter
                   cinf_notpg:
0897: D0 E0                 pop     acc
                   ; unrecognized escape... eat up everything that's left comin
                   ; quickly, then begin looking again
                   cinf_consume:
0899: 11 A6                 acall   cinf_wait
089B: 30 98 9A              jnb     ri, cin_filter
089E: 12 00 5E              lcall   cin
08A1: B4 1B F5              cjne    a, #esc_char, cinf_consume
08A4: 80 A1                 sjmp    cinf2
                   
                   ; this thing waits for a character to be received for approx
                   ; 4 character transmit time periods. It returns immedately
                   ; or after the entire wait time. It does not remove the char
                   ; from the buffer, so ri should be checked to see if somethi
                   ; actually did show up while it was waiting
08A6:                       .equ    char_delay, 4           ; number of char xm
                   cinf_wait:
08A6: EA                    mov     a, r2
08A7: C0 E0                 push    acc
08A9: 7A 14                 mov     r2, #char_delay*5
                   cinfw2:
08AB: E5 8C                 mov     a, th0
                   cinfw3:
08AD: 20 98 05              jb      ri, cinfw4
08B0: 04                    inc     a
08B1: 70 FA                 jnz     cinfw3
08B3: DA F6                 djnz    r2, cinfw2
                   cinfw4:
08B5: D0 E0                 pop     acc
08B7: FA                    mov     r2, a
08B8: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                   ; prints the unsigned 8 bit value in Acc in base 10
                   
                   pint8u:
08B9: C0 F0                 push    b
08BB: C0 E0                 push    acc
08BD: 80 13                 sjmp    pint8b
                   
                   ;---------------------------------------------------------;
                   
                   ; prints the signed 8 bit value in Acc in base 10
                   
                   pint8:
08BF: C0 F0                 push    b
08C1: C0 E0                 push    acc
08C3: 30 E7 0C              jnb     acc.7, pint8b
08C6: 74 2D                 mov     a, #'-'
08C8: 12 00 6A              lcall   cout
08CB: D0 E0                 pop     acc
08CD: C0 E0                 push    acc
08CF: F4                    cpl     a
08D0: 24 01                 add     a, #1
                   pint8b:
08D2: 75 F0 64              mov     b, #100
08D5: 84                    div     ab
08D6: D2 D5                 setb    f0
08D8: 60 07                 jz      pint8c
08DA: C2 D5                 clr     f0
08DC: 24 30                 add     a, #'0'
08DE: 12 00 6A              lcall   cout
                   pint8c:
08E1: E5 F0                 mov     a, b
08E3: 75 F0 0A              mov     b, #10
08E6: 84                    div     ab
08E7: 30 D5 02              jnb     f0, pint8d
08EA: 60 05                 jz      pint8e
                   pint8d:
08EC: 24 30                 add     a, #'0'
08EE: 12 00 6A              lcall   cout
                   pint8e:
08F1: E5 F0                 mov     a, b
08F3: 24 30                 add     a, #'0'
08F5: 12 00 6A              lcall   cout
08F8: D0 E0                 pop     acc
08FA: D0 F0                 pop     b
08FC: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                   ; print 16 bit unsigned integer in DPTR, using base 10.
                   ; warning, destroys r2, r3, r4, r5, psw.5
                   
                   pint16u:
08FD: C0 E0                 push    acc
08FF: E8                    mov     a, r0
0900: C0 E0                 push    acc
0902: C2 D5                 clr     psw.5
0904: AA 82                 mov     r2, dpl
0906: AB 83                 mov     r3, dph
                   
                   pint16a:
0908: 7C 10                 mov     r4, #16                 ; ten-thousands dig
090A: 7D 27                 mov     r5, #39
090C: 31 5B                 acall   pint16x
090E: 60 07                 jz      pint16b
0910: 24 30                 add     a, #'0'
0912: 12 00 6A              lcall   cout
0915: D2 D5                 setb    psw.5
                   
                   pint16b:
0917: 7C E8                 mov     r4, #232        ; thousands digit
0919: 7D 03                 mov     r5, #3
091B: 31 5B                 acall   pint16x
091D: 70 03                 jnz     pint16c
091F: 30 D5 07              jnb     psw.5, pint16d
                   pint16c:
0922: 24 30                 add     a, #'0'
0924: 12 00 6A              lcall   cout
0927: D2 D5                 setb    psw.5
                   
                   pint16d:
0929: 7C 64                 mov     r4, #100        ; hundreds digit
092B: 7D 00                 mov     r5, #0
092D: 31 5B                 acall   pint16x
092F: 70 03                 jnz     pint16e
0931: 30 D5 07              jnb     psw.5, pint16f
                   pint16e:
0934: 24 30                 add     a, #'0'
0936: 12 00 6A              lcall   cout
0939: D2 D5                 setb    psw.5
                   
                   pint16f:
093B: EA                    mov     a, r2           ; tens digit
093C: AB F0                 mov     r3, b
093E: 75 F0 0A              mov     b, #10
0941: 84                    div     ab
0942: 70 03                 jnz     pint16g
0944: 30 D5 05              jnb     psw.5, pint16h
                   pint16g:
0947: 24 30                 add     a, #'0'
0949: 12 00 6A              lcall   cout
                   
                   pint16h:
094C: E5 F0                 mov     a, b            ; and finally the ones digi
094E: 8B F0                 mov     b, r3
0950: 24 30                 add     a, #'0'
0952: 12 00 6A              lcall   cout
                   
0955: D0 E0                 pop     acc
0957: F8                    mov     r0, a
0958: D0 E0                 pop     acc
095A: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                   ; ok, it's a cpu hog and a nasty way to divide, but this cod
                   ; requires only 21 bytes! Divides r2-r3 by r4-r5 and leaves
                   ; quotient in r2-r3 and returns remainder in acc. If Intel
                   ; had made a proper divide, then this would be much easier.
                   
                   pint16x:
095B: 78 00                 mov     r0, #0
                   pint16y:
095D: 08                    inc     r0
095E: C3                    clr     c
095F: EA                    mov     a, r2
0960: 9C                    subb    a, r4
0961: FA                    mov     r2, a
0962: EB                    mov     a, r3
0963: 9D                    subb    a, r5
0964: FB                    mov     r3, a
0965: 50 F6                 jnc     pint16y
0967: 18                    dec     r0
0968: EA                    mov     a, r2
0969: 2C                    add     a, r4
096A: FA                    mov     r2, a
096B: EB                    mov     a, r3
096C: 3D                    addc    a, r5
096D: FB                    mov     r3, a
096E: E8                    mov     a, r0
096F: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                   ; pcstr prints the compressed strings. A dictionary of 128 w
                   ; stored in 4 bit packed binary format.  When pcstr finds a 
                   ; a string with the high bit set, it prints the word from th
                   ; A few bytes have special functions and everything else pri
                   ; it were an ordinary string.
                   
                   ; special codes for pcstr:
                   ;    0 = end of string
                   ;   13 = CR/LF
                   ;   14 = CR/LF and end of string
                   ;   31 = next word code should be capitalized
                   
                   pcstr:
0970: C0 E0                 push    acc
0972: E8                    mov     a, r0
0973: C0 E0                 push    acc
0975: E9                    mov     a, r1
0976: C0 E0                 push    acc
0978: EC                    mov     a, r4
0979: C0 E0                 push    acc
097B: D2 D1                 setb    psw.1
097D: D2 D5                 setb    psw.5
                   pcstr1:
097F: E0                    movx    a, @dptr
0980: A3                    inc     dptr
0981: 60 25                 jz      pcstr2
0983: 20 E7 2E              jb      acc.7, decomp
0986: 54 7F                 anl     a, #0x7F
                   pcstrs1:
0988: B4 0D 07              cjne    a, #13, pcstrs2
098B: 12 00 74              lcall   newline
098E: D2 D1                 setb    psw.1
0990: 80 ED                 sjmp    pcstr1
                   pcstrs2:
0992: B4 1F 04              cjne    a, #31, pcstrs3
0995: C2 D5                 clr     psw.5
0997: 80 E6                 sjmp    pcstr1
                   pcstrs3:
0999: B4 0E 05              cjne    a, #14, pcstrs4
099C: 12 00 74              lcall   newline
099F: 80 07                 sjmp    pcstr2
                   pcstrs4:
09A1: C2 D1                 clr     psw.1
09A3: 12 00 6A              lcall   cout
09A6: 80 D7                 sjmp    pcstr1
                   pcstr2:
09A8: D0 E0                 pop     acc
09AA: FC                    mov     r4, a
09AB: D0 E0                 pop     acc
09AD: F9                    mov     r1, a
09AE: D0 E0                 pop     acc
09B0: F8                    mov     r0, a
09B1: D0 E0                 pop     acc
09B3: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                   ; dcomp actually takes care of printing a word from the dict
                   ; dptr = position in packed words table
                   ; r4=0 if next nibble is low, r4=255 if next nibble is high
                   
                   decomp:
09B4: 54 7F                 anl     a, #0x7F
09B6: F8                    mov     r0, a           ; r0 counts which word
09B7: 20 D1 03              jb      psw.1, decomp1  ; avoid leading space if fi
09BA: 12 00 68              lcall   space
                   decomp1:
09BD: C2 D1                 clr     psw.1
09BF: C0 82                 push    dpl
09C1: C0 83                 push    dph
09C3: 90 0A 28              mov     dptr, #words
09C6: 7C 00                 mov     r4, #0
09C8: E8                    mov     a, r0
09C9: 60 07                 jz      dcomp3
                            ; here we must seek past all the words in the table
                            ; that come before the one we're supposed to print
09CB: F9                    mov     r1, a
                   dcomp2:
09CC: 51 18                 acall   get_next_nibble
09CE: 70 FC                 jnz     dcomp2
                            ; when we get here, a word has been skipped... keep
                            ; this until we're pointing to the correct one
09D0: D9 FA                 djnz    r1, dcomp2
                   dcomp3:
                            ; now we're pointing to the correct word, so all we
                            ; to do is print it out
09D2: 51 18                 acall   get_next_nibble
09D4: 60 3C                 jz      dcomp_end
09D6: B4 0F 12              cjne    a, #15, dcomp4
                            ; the character is one of the 12 least commonly use
09D9: 51 18                 acall   get_next_nibble
09DB: 04                    inc     a
09DC: 83                    movc    a, @a+pc
09DD: 80 1E                 sjmp    dcomp5
09DF: 68 66 77 67 
      79 62 78 76 
      6B 71 6A 7A 
                            .db     "hfwgybxvkqjz"
                   dcomp4:
                            ; the character is one of the 14 most commonly used
09EB: 04                    inc     a
09EC: 83                    movc    a, @a+pc
09ED: 80 0E                 sjmp    dcomp5
09EF: 65 74 61 72 
      6E 69 73 6F 
      6C 75 6D 70 
      64 63                 .db     "etarnisolumpdc"
                   dcomp5:
                            ; decide if it should be uppercase or lowercase
09FD: A2 D5                 mov     c, psw.5
09FF: 92 E5                 mov     acc.5, c
0A01: D2 D5                 setb    psw.5
0A03: B8 14 02              cjne    r0, #20, dcomp6
0A06: C2 E5                 clr     acc.5
                   dcomp6:
0A08: B8 0C 02              cjne    r0, #12, dcomp7
0A0B: C2 E5                 clr     acc.5
                   dcomp7:
0A0D: 12 00 6A              lcall   cout
0A10: 80 C0                 sjmp    dcomp3
                   dcomp_end:
0A12: D0 83                 pop     dph
0A14: D0 82                 pop     dpl
0A16: 21 7F                 ajmp    pcstr1
                   
                   get_next_nibble:
                            ; ... and update dptr and r4, of course
0A18: E0                    movx    a, @dptr
0A19: BC 00 05              cjne    r4, #0, gnn2
0A1C: 7C FF                 mov     r4, #255
0A1E: 54 0F                 anl     a, #00001111b
0A20: 22                    ret
                   gnn2:
0A21: 7C 00                 mov     r4, #0
0A23: A3                    inc     dptr
0A24: C4                    swap    a
0A25: 54 0F                 anl     a, #00001111b
0A27: 22                    ret
                   
                   ;---------------------------------------------------------;
                   ;                                                          ;
                   ;         Here begins the data tables and strings          ;
                   ;                                                          ;
                   ;---------------------------------------------------------;
                   
                   ; this is the dictionary of 128 words used by pcstr.
                   
                   words:
0A28: 82 90 E8 23 
      86 05 4C F8 
                            .db     0x82, 0x90, 0xE8, 0x23, 0x86, 0x05, 0x4C, 0
0A30: 44 B3 B0 B1 
      48 5F F0 11 
                            .db     0x44, 0xB3, 0xB0, 0xB1, 0x48, 0x5F, 0xF0, 0
0A38: 7F A0 15 7F 
      1C 2E D1 40 
                            .db     0x7F, 0xA0, 0x15, 0x7F, 0x1C, 0x2E, 0xD1, 0
0A40: 5A 50 F1 03 
      BF BA 0C 2F 
                            .db     0x5A, 0x50, 0xF1, 0x03, 0xBF, 0xBA, 0x0C, 0
0A48: 96 01 8D 3F 
      95 38 0D 6F 
                            .db     0x96, 0x01, 0x8D, 0x3F, 0x95, 0x38, 0x0D, 0
0A50: 5F 12 07 71 
      0E 56 2F 48 
                            .db     0x5F, 0x12, 0x07, 0x71, 0x0E, 0x56, 0x2F, 0
0A58: 3B 62 58 20 
      1F 76 70 32 
                            .db     0x3B, 0x62, 0x58, 0x20, 0x1F, 0x76, 0x70, 0
0A60: 24 40 B8 40 
      E1 61 8F 01 
                            .db     0x24, 0x40, 0xB8, 0x40, 0xE1, 0x61, 0x8F, 0
0A68: 34 0B CA 89 
      D3 C0 A3 B9 
                            .db     0x34, 0x0B, 0xCA, 0x89, 0xD3, 0xC0, 0xA3, 0
0A70: 58 80 04 F8 
      02 85 60 25 
                            .db     0x58, 0x80, 0x04, 0xF8, 0x02, 0x85, 0x60, 0
0A78: 91 F0 92 73 
      1F 10 7F 12 
                            .db     0x91, 0xF0, 0x92, 0x73, 0x1F, 0x10, 0x7F, 0
0A80: 54 93 10 44 
      48 07 D1 26 
                            .db     0x54, 0x93, 0x10, 0x44, 0x48, 0x07, 0xD1, 0
0A88: 56 4F D0 F6 
      64 72 E0 B8 
                            .db     0x56, 0x4F, 0xD0, 0xF6, 0x64, 0x72, 0xE0, 0
0A90: 3B D5 F0 16 
      4F 56 30 6F 
                            .db     0x3B, 0xD5, 0xF0, 0x16, 0x4F, 0x56, 0x30, 0
0A98: 48 02 5F A8 
      20 1F 01 76 
                            .db     0x48, 0x02, 0x5F, 0xA8, 0x20, 0x1F, 0x01, 0
0AA0: 30 D5 60 25 
      41 A4 2C 60 
                            .db     0x30, 0xD5, 0x60, 0x25, 0x41, 0xA4, 0x2C, 0
0AA8: 05 6F 01 3F 
      26 1F 30 07 
                            .db     0x05, 0x6F, 0x01, 0x3F, 0x26, 0x1F, 0x30, 0
0AB0: 8E 1D F0 63 
      99 F0 42 B8 
                            .db     0x8E, 0x1D, 0xF0, 0x63, 0x99, 0xF0, 0x42, 0
0AB8: 20 1F 23 30 
      02 7A D1 60 
                            .db     0x20, 0x1F, 0x23, 0x30, 0x02, 0x7A, 0xD1, 0
0AC0: 2F F0 F6 05 
      8F 93 1A 50 
                            .db     0x2F, 0xF0, 0xF6, 0x05, 0x8F, 0x93, 0x1A, 0
0AC8: 28 F0 82 04 
      6F A3 0D 3F 
                            .db     0x28, 0xF0, 0x82, 0x04, 0x6F, 0xA3, 0x0D, 0
0AD0: 1F 51 40 23 
      01 3E 05 43 
                            .db     0x1F, 0x51, 0x40, 0x23, 0x01, 0x3E, 0x05, 0
0AD8: 01 7A 01 17 
      64 93 30 2A 
                            .db     0x01, 0x7A, 0x01, 0x17, 0x64, 0x93, 0x30, 0
0AE0: 08 8C 24 30 
      99 B0 F3 19 
                            .db     0x08, 0x8C, 0x24, 0x30, 0x99, 0xB0, 0xF3, 0
0AE8: 60 25 41 35 
      09 8E CB 19 
                            .db     0x60, 0x25, 0x41, 0x35, 0x09, 0x8E, 0xCB, 0
0AF0: 12 30 05 1F 
      31 1D 04 14 
                            .db     0x12, 0x30, 0x05, 0x1F, 0x31, 0x1D, 0x04, 0
0AF8: 4F 76 12 04 
      AB 27 90 56 
                            .db     0x4F, 0x76, 0x12, 0x04, 0xAB, 0x27, 0x90, 0
0B00: 01 2F A8 D5 
      F0 AA 26 20 
                            .db     0x01, 0x2F, 0xA8, 0xD5, 0xF0, 0xAA, 0x26, 0
0B08: 5F 1C F0 F3 
      61 FE 01 41 
                            .db     0x5F, 0x1C, 0xF0, 0xF3, 0x61, 0xFE, 0x01, 0
0B10: 73 01 27 C1 
      C0 84 8F D6 
                            .db     0x73, 0x01, 0x27, 0xC1, 0xC0, 0x84, 0x8F, 0
0B18: 01 87 70 56 
      4F 19 70 1F 
                            .db     0x01, 0x87, 0x70, 0x56, 0x4F, 0x19, 0x70, 0
0B20: A8 D9 90 76 
      02 17 43 FE 
                            .db     0xA8, 0xD9, 0x90, 0x76, 0x02, 0x17, 0x43, 0
0B28: 01 C1 84 0B 
      15 7F 02 8B 
                            .db     0x01, 0xC1, 0x84, 0x0B, 0x15, 0x7F, 0x02, 0
0B30: 14 30 8F 63 
      39 6F 19 F0 
                            .db     0x14, 0x30, 0x8F, 0x63, 0x39, 0x6F, 0x19, 0
0B38: 11 C9 10 6D 
      02 3F 91 09 
                            .db     0x11, 0xC9, 0x10, 0x6D, 0x02, 0x3F, 0x91, 0
0B40: 7A 41 D0 BA 
      0C 1D 39 5F 
                            .db     0x7A, 0x41, 0xD0, 0xBA, 0x0C, 0x1D, 0x39, 0
0B48: 07 F2 11 17 
      20 41 6B 35 
                            .db     0x07, 0xF2, 0x11, 0x17, 0x20, 0x41, 0x6B, 0
0B50: 09 F7 75 12 
      0B A7 CC 48 
                            .db     0x09, 0xF7, 0x75, 0x12, 0x0B, 0xA7, 0xCC, 0
0B58: 02 3F 64 12 
      A0 0C 27 E3 
                            .db     0x02, 0x3F, 0x64, 0x12, 0xA0, 0x0C, 0x27, 0
0B60: 9F C0 14 77 
      70 11 40 71 
                            .db     0x9F, 0xC0, 0x14, 0x77, 0x70, 0x11, 0x40, 0
0B68: 21 C0 68 25 
      41 F0 62 7F 
                            .db     0x21, 0xC0, 0x68, 0x25, 0x41, 0xF0, 0x62, 0
0B70: D1 D0 21 E1 
      62 58 B0 F3 
                            .db     0xD1, 0xD0, 0x21, 0xE1, 0x62, 0x58, 0xB0, 0
0B78: 05 1F 73 30 
      77 B1 6F 19 
                            .db     0x05, 0x1F, 0x73, 0x30, 0x77, 0xB1, 0x6F, 0
0B80: E0 19 43 E0 
      58 2F F6 A4 
                            .db     0xE0, 0x19, 0x43, 0xE0, 0x58, 0x2F, 0xF6, 0
0B88: 14 D0 23 03 
      FE 31 F5 14 
                            .db     0x14, 0xD0, 0x23, 0x03, 0xFE, 0x31, 0xF5, 0
0B90: 30 99 F8 03 
      3F 64 22 51 
                            .db     0x30, 0x99, 0xF8, 0x03, 0x3F, 0x64, 0x22, 0
0B98: 60 25 41 2F 
      E3 01 56 27 
                            .db     0x60, 0x25, 0x41, 0x2F, 0xE3, 0x01, 0x56, 0
0BA0: 93 09 FE 11 
      FE 79 BA 60 
                            .db     0x93, 0x09, 0xFE, 0x11, 0xFE, 0x79, 0xBA, 0
0BA8: 75 42 EA 62 
      58 A0 E5 1F 
                            .db     0x75, 0x42, 0xEA, 0x62, 0x58, 0xA0, 0xE5, 0
0BB0: 53 4F D1 C0 
      A3 09 42 53 
                            .db     0x53, 0x4F, 0xD1, 0xC0, 0xA3, 0x09, 0x42, 0
0BB8: F7 12 04 62 
      1B 30 F5 05 
                            .db     0xF7, 0x12, 0x04, 0x62, 0x1B, 0x30, 0xF5, 0
0BC0: F7 69 0C 35 
      1B 70 82 2F 
                            .db     0xF7, 0x69, 0x0C, 0x35, 0x1B, 0x70, 0x82, 0
0BC8: 2F 14 4F 51 
      C0 64 25 00 
                            .db     0x2F, 0x14, 0x4F, 0x51, 0xC0, 0x64, 0x25, 0
                   
                   ; STR
                   
                   logon1:
0BD0: 57 65 6C 63 
      6F 6D 65 80 
      94 32 20 76 
      32 2E 31 2C 
      20 62 79 1F 
      F8 1F FE 0D 
      0E                    .db     "Welcome", 128, 148, "2 v2.1, by", 31, 248,
                   
                   logon2:
0BE9: 20 20 53 65 
      65 94 32 2E 
      44 4F 43 2C 
      94 32 2E 45 
      51 55 A4              .db     32, 32, "See", 148, "2.DOC,", 148, "2.EQU",
0BFC: 94 32 2E 48 
      44 52 B4 D5 
      8D 2E 0E              .db     148, "2.HDR", 180, 213, 141, ".", 14
                   
                   abort:
0C07: 20 1F 9E 1F 
      A0 21 0D 0E 
                            .db     " ", 31, 158, 31, 160, "!", 13, 14
                   
                   prompt1:
0C0F: 94 32 20 4C 
      6F 63 3A 00 
                            .db     148, "2 Loc:", 0
                   
                   prompt2:
0C17: 20 3E A0              .db     " >", 160
                   
                   prompt3:
0C1A: 86 CA 82 28 
      00                    .db     134, 202, 130, '(', 0
                   
                   prompt4:
0C1F: 29 2C 95 8C 
      80 C8 3A 20 
      00                    .db     "),", 149, 140, 128, 200, ": ", 0
                   
                   prompt5:
0C28: 1F 97 82 C3 
      73 C7 A6 83 
      2C                    .db     31, 151, 130, 195, "s", 199, 166, 131, ","
0C31: BA 20 4A 55 
      4D 50 80 86 
      A1 72 82 0D 
      0E                    .db     186, " JUMP", 128, 134, 161, "r", 130, 13, 
                   
                   prompt6:
0C3E: 0D 0D 1F 87 
      83 81 3A 20 
      00                    .db     13, 13, 31, 135, 131, 129, ": ", 0
                   
                   prompt7:
0C47: 1F E4 FB 20 
      6B 65 79 3A 
      20 00                 .db     31, 228, 251, " key: ", 0
                   
                   prompt8:
0C51: 0D 0D 1F 88 
      80 83 81 20 
      28 00                 .db     13, 13, 31, 136, 128, 131, 129, " (", 0
                   
                   prompt9:
0C5B: 0D 0D 1F 82 
      1F FD 00              .db     13, 13, 31, 130, 31, 253, 0
                   
                   prompt9b:
0C62: 1F 81 20 20 
      20 20 20 1F 
      C9 0E                 .db     31, 129, 32, 32, 32, 32, 32, 31, 201, 14
                   
                   prompt10:
0C6C: 29 20 1F 87 
      1F B2 3A 20 
      00                    .db     ") ", 31, 135, 31, 178, ": ", 0
                   
                   beg_str:
0C75: 46 69 72 73 
      74 1F 81 3A 
      20 00                 .db     "First", 31, 129, ": ", 0
                   
                   end_str:
0C7F: 4C 61 73 74 
      1F 81 3A 20 
      20 00                 .db     "Last", 31, 129, ":", 32, 32, 0
                   
                   sure:
0C89: 1F B9 A1 20 
      73 75 72 65 
      3F 00                 .db     31, 185, 161, " sure?", 0
                   
                   edits1:
0C93: 0D 0D 1F 9C 
      9A 92 2C 8C 
      80 C8 0E              .db     13, 13, 31, 156, 154, 146, ",", 140, 128, 2
                   
                   edits2:
0C9E: 20 20 1F 9C 
      C1 2C 8E 81 
      F7 0D 0E              .db     "  ", 31, 156, 193, ",", 142, 129, 247, 13,
                   
                   dnlds1:
0CA9: 0D 0D 1F 9F 
      20 61 73 63 
      69 69 F9 96 
      1F 98 84 89 
                            .db     13, 13, 31, 159, " ascii", 249, 150, 31, 15
0CB9: 2C 95 8C 80 
      A0 0D 0E              .db     ",", 149, 140, 128, 160, 13, 14
                   
                   dnlds2:
0CC0: 0D 1F 8A A0 
      65 64 0D 0E 
                            .db     13, 31, 138, 160, "ed", 13, 14
                   
                   dnlds3:
0CC8: 0D 1F 8A C1 
      64 0D 0E              .db     13, 31, 138, 193, "d", 13, 14
                   
                   dnlds4:
0CCF: 53 75 6D 6D 
      61 72 79 3A 
      0E                    .db     "Summary:", 14
                   
                   dnlds5:
0CD8: 20 C6 73 91 
      64 0E                 .db     " ", 198, "s", 145, "d", 14
                   
                   dnlds6a:
0CDE: 20 8B 91 64 
      0E                    .db     " ", 139, 145, "d", 14
                   
                   dnlds6b:
0CE3: 20 8B 20 77 
      72 69 74 74 
      65 6E 0E              .db     " ", 139, " written", 14
                   
                   dnlds7:
0CEE: 1F 9B 3A 0E 
                            .db     31, 155, ":", 14
                   
                   dnlds8:
0CF2: 20 8B 20 75 
      6E 61 62 6C 
      65 80 20 77 
      72 69 74 65 
      0E                    .db     " ", 139, " unable", 128, " write", 14
                   
                   dnlds9:
0D03: 20 20 62 61 
      64 F5 73 0E 
                            .db     32, 32, "bad", 245, "s", 14
                   
                   dnlds10:
0D0B: 20 85 9F 96 
      C6 0E                 .db     " ", 133, 159, 150, 198, 14
                   
                   dnlds11:
0D11: 20 85 84 9D 
      0E                    .db     " ", 133, 132, 157, 14
                   
                   dnlds12:
0D16: 20 85 20 6E 
      6F 6E 84 9D 
      0E                    .db     " ", 133, " non", 132, 157, 14
                   
                   dnlds13:
0D1F: 1F 97 9B 20 
      64 65 74 65 
      63 74 65 64 
      0D 0E                 .db     31, 151, 155, " detected", 13, 14
                   
                   runs1:
0D2D: 0D 86 6E 69 
      6E 67 82 3A 
      0D 0E                 .db     13, 134, "ning", 130, ":", 13, 14
                   
                   uplds3:
0D37: 0D 0D 53 65 
      6E 64 69 6E 
      67 1F 98 84 
      89 AC 20 20 
      00                    .db     13, 13, "Sending", 31, 152, 132, 137, 172, 
                   
                   uplds4:
0D48: 20 80 20 20 
      00                    .db     " ", 128, 32, 32, 0
                   
                   help1txt:
0D4D: 0D 0D 53 74 
      61 6E 64 61 
      72 64 1F 9E 
      73 0E                 .db     13, 13, "Standard", 31, 158, "s", 14
                   
                   help2txt:
0D5B: 1F DA 1F F4 
      65 64 1F 9E 
      73 0E                 .db     31, 218, 31, 244, "ed", 31, 158, "s", 14
                   
                   type1:
0D65: 1F 9A 9E 00 
                            .db     31, 154, 158, 0
                   
                   type2:
0D69: 1F 82 00              .db     31, 130, 0
                   
                   type4:
0D6C: 1F 8F 1F E2 
      1F AA 00              .db     31, 143, 31, 226, 31, 170, 0
                   
                   type5:
0D73: 3F 3F 3F 00 
                            .db     "???", 0
                   
                   help_cmd2:
0D77: 1F D7 00              .db     31, 215, 0
                   
                   help_cmd:
0D7A: 1F 8E D7 D1 
      00                    .db     31, 142, 215, 209, 0
                   
                   dir_cmd:
0D7F: 1F D1 82 73 
      00                    .db     31, 209, 130, "s", 0
                   
                   run_cmd:
0D84: 1F 86 82 00 
                            .db     31, 134, 130, 0
                   
                   dnld_cmd:
0D88: 1F 8A 00              .db     31, 138, 0
                   
                   upld_cmd:
0D8B: 1F 93 00              .db     31, 147, 0
                   
                   nloc_cmd:
0D8E: 1F 87 81 00 
                            .db     31, 135, 129, 0
                   
                   jump_cmd:
0D92: 1F 88 80 83 
      81 00                 .db     31, 136, 128, 131, 129, 0
                   
                   dump_cmd:
0D98: 1F 84 DB 9A 
      83 00                 .db     31, 132, 219, 154, 131, 0
                   
                   intm_cmd:
0D9E: 1F 84 DB C0 
      83 00                 .db     31, 132, 219, 192, 131, 0
                   
                   edit_cmd:
0DA4: 1F 9C 9A 92 
      00                    .db     31, 156, 154, 146, 0
                   
                   clrm_cmd:
0DA9: 1F ED 83 00 
                            .db     31, 237, 131, 0
                   
                   eio77_cmd:
0DAD: 45 6E 61 62 
      6C 65 20 6E 
      43 53 49 4F 
      37 37 00              .db     "Enable nCSIO77", 0
                   
                   dio77_cmd:
0DBC: 44 69 73 61 
      62 6C 65 20 
      6E 43 53 49 
      4F 37 37 00 
                            .db     "Disable nCSIO77", 0
                   
