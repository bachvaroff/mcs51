                   ; PAULMON2, a user-friendly 8051 monitor, by Paul Stoffregen
                   ; Please email comments, suggestions, bugs to paul@pjrc.com
                   
                   ; Version 2.1
                   ;        Some code size improvements, contributed by Alexand
                   ;        Download can now start from main menu prompt
                   
                   ; It's free. PAULMON2 is in the public domain. You may copy
                   ; sections of code from PAULMON2 into your own programs, eve
                   ; for commercial purposes. PAULMON2 should only be distribut
                   ; free of charge, but may be bundled as 'value-added' with o
                   ; products, such as development boards, CDROMs, etc. Please
                   ; distribute the PAULMON2.DOC file and other files, not just
                   ; the object code!
                   
                   ; The PAULMON2.EQU and PAULMON2.HDR files contain valuable
                   ; information that could help you to write programs for use
                   ; with PAULMON2.
                   
                   ; PAULMON2 is in the public domain. PAULMON2 is distributed 
                   ; the hope that it will be useful, but without any warranty;
                   ; without even the implied warranty of merchantability or fi
                   ; for a particular purpose. 
                   
                   ; You are probably reading this code to see what it looks li
                   ; and possibly learn something, or to modify it for some rea
                   ; Either is ok, but please remember that this code uses a nu
                   ; of tricks to cram all the functionality into just 4k. As a
                   ; result, the code can be difficult to read, and adding new
                   ; features can be very difficult without growing beyond 4k. 
                   ; add or modify commands in PAULMON2, please consider using 
                   ; "external command" functionality. It is easier to develop
                   ; new commands this way, and you can distribute them to othe
                   ; users. Email paul@pjrc.com if you have new PAULMON2
                   ; commands to contribute to others. Details about adding new
                   ; commands to PAULMON2 (with examples) can be found at:
                   
                   ; http://www.pjrc.com/tech/8051/pm2_docs/addons.html
                   
                   ;---------------------------------------------------------;
                   ;                                                          ;
                   ;            PAULMON2's default configuration              ;
                   ;                                                          ;
                   ;---------------------------------------------------------;
                   
                   ; PAULMON2 should be assembled using the modified AS31 assem
                   ; originally written by Ken Stauffer, many small changes by 
                   ; Stoffregen. This free assembler is available on the web at
                   ; http://www.pjrc.com/tech/8051/index.html
                   ; As well, these web pages have a fill-out form which makes 
                   ; very easy to custom configure PAULMON2. Using this form wi
                   ; edit the code for you, run the AS31 assmebler, and send yo
                   ; object code to program into your chip.
                   
                   ; These two parameters control where PAULMON2 will be assemb
                   ; and where it will attempt to LJMP at the interrupt vector 
                   
0000:              .equ     base, 0x0000            ; location for PAULMON2
0000:              .equ     vector, 0x2000          ; location to LJMP interrup
                   
                   ; These three parameters tell PAULMON2 where the user's memo
                   ; installed. "bmem" and "emem" define the space that will be
                   ; for program headers, user installed commands, start-up pro
                   ; "bmem" and "emem" should be use so they exclude memory are
                   ; perphreal devices may be mapped, as reading memory from an
                   ; may reconfigure it unexpectedly.
                   
0000:              .equ     pgm, 0x2000             ; default location for the 
0000:              .equ     bmem, 0x1000            ; where is the beginning of
0000:              .equ     emem, 0xFFFF            ; end of the memory
                   
                   ; To set the baud rate, use this formula
                   ; baud_const = 256 - (OSC / 12) / (16 * baud)
                   ; baud_const = 256 - T1 / (16 * baud)
                   
0000:              .equ     tmod_cfg_OSC, 00100001b         ; T1 mode 2, system
0000:              .equ     baud_const, 255                 ; 57600 baud with O
                   ;.equ    baud_const, 253                 ; 19200 baud with O
                   ;.equ    baud_const, 250                 ; 9600 baud with OS
                   ;.equ    baud_const, 254                 ; 38400 baud with O
                   ;.equ    baud_const, 252                 ; 19200 baud with O
                   
0000:              .equ     tmod_cfg_T1, 01100001b  ; T1 mode 2, external oscil
                   ;.equ    baud_const, 255                 ; 115200 baud with 
                   ;.equ    baud_const, 254                 ; 57600 baud with T
                   ;.equ    baud_const, 253                 ; 38400 baud with T
                   ;.equ    baud_const, 250                 ; 19200 baud with T
                   ;.equ    baud_const, 244                 ; 9600 baud with T1
                   ;.equ    baud_const, 232                 ; 4800 baud with T1
                   ;.equ    baud_const, 208                 ; 2400 baud with T1
                   ;.equ    baud_const, 160                 ; 1200 baud with T1
                   ;.equ    baud_const, 64          ; 600 baud with T1 1.8432MH
                   
0000:              .equ     line_delay, 6           ; num of char times to paus
                   
                   ; Several people didn't like the key definations in PAULMON1
                   ; Actually, I didn't like 'em either, but I never took the t
                   ; to change it.   Eventually I got used to them, but now it'
                   ; really easy to change which keys do what in PAULMON2.   Yo
                   ; can guess what to do below, but don't use lowercase.
                   
0000:              .equ     help_key, '?'           ; help screen
0000:              .equ     dir_key, 'M'            ; directory
0000:              .equ     run_key, 'R'            ; run program
0000:              .equ     dnld_key, 'D'           ; download
0000:              .equ     upld_key, 'U'           ; upload
0000:              .equ     nloc_key, 'N'           ; new memory location
0000:              .equ     jump_key, 'J'           ; jump to memory location
0000:              .equ     dump_key, 'H'           ; hex dump memory
0000:              .equ     intm_key, 'I'           ; hex dump internal memory
0000:              .equ     edit_key, 'E'           ; edit memory
0000:              .equ     clrm_key, 'C'           ; clear memory
0000:              .equ     crc16_key, 'W'          ; calculate crc16
0000:              .equ     eio77_key, '<'
0000:              .equ     dio77_key, '>'
                   
                   ; These symbols configure paulmon2's internal memory usage.
                   ; It is usually not a good idea to change these unless you
                   ; know that you really have to.
                   
                   ; |00|01|02|03|04|05|06|07|08|09|0a|0b|0c|0d|0e|0f|10|11|12|
                   ; |r0|r1|r2|r3|r4|r5|r6|r7|  .  .  .  .  .  .  .  dnld  .  .
                   ;                                                           
0000:              .equ     psw_init, 0             ; value for psw (which reg 
0000:              .equ     dnld_parm, 0x08                 ; block of 16 bytes
0000:              .equ     stack, 0x17             ; location of the stack
                   
                   ; |P1.7|P1.6|P1.5|P1.4|P1.3|P1.2|P1.1|P1.0|
0000:              .equ     mctrl_default,  11111111b
0000:              .equ     mctrl_shadow,   11111110b
                   
                   ;---------------------------------------------------------;
                   ;                                                          ;
                   ;                     Interrupt Vectors                    ;
                   ;  (and little bits of code crammed in the empty spaces)  ;
                   ;                                                          ;
                   ;---------------------------------------------------------;
                   
                   ;------ RESET --------------------------------------------;
0000:              .org     base
0000: 02 08 2F              ljmp    reset
                   ;------ RESET --------------------------------------------;
                   
                   ;------ IE0_VECTOR ---------------------------------------;
0003:              .org     base + 3
0003: 02 20 03              ljmp    vector + 3
                   ;------ IE0_VECTOR ---------------------------------------;
                   
                   r6r7todptr:
0006: 8E 82                 mov     dpl, r6
0008: 8F 83                 mov     dph, r7
000A: 22                    ret
                   
                   ;------ TF0_VECTOR ---------------------------------------;
000B:              .org     base + 11
000B: 02 20 0B              ljmp    vector + 11
                   ;------ TF0_VECTOR ---------------------------------------;
                   
                   dptrtor6r7:
000E: AE 82                 mov     r6, dpl
0010: AF 83                 mov     r7, dph
0012: 22                    ret
                   
                   ;------ IE1_VECTOR ---------------------------------------;
0013:              .org     base + 19
0013: 02 20 13              ljmp    vector + 19
                   ;------ IE1_VECTOR ---------------------------------------;
                   
                   dash:
0016: 74 2D                 mov     a, #'-'                 ; seems kinda trivi
0018: 01 73                 ajmp    cout            ; this appears in code, it 
001A: 00                    nop                     ; bytes, but an acall takes
                   
                   ;------ TF1_VECTOR ---------------------------------------;
001B:              .org     base + 27
001B: 02 20 1B              ljmp    vector + 27
                   ;------ TF1_VECTOR ---------------------------------------;
                   
                   cout_sp:
001E: 11 73                 acall   cout
0020: 01 71                 ajmp    space
0022: 00                    nop
                   
                   ;------ SI0_VECTOR ---------------------------------------;
0023:              .org     base + 35
0023: 02 20 23              ljmp    vector + 35
                   ;------ SI0_VECTOR ---------------------------------------;
                   
                   dash_sp:
0026: 11 16                 acall   dash
0028: 01 71                 ajmp    space
002A: 00                    nop
                   
                   ;------ TF2_VECTOR --- EX2_VECTOR ------------------------;
002B:              .org     base + 43
002B: 02 20 2B              ljmp    vector + 43
                   ;------ TF2_VECTOR --- EX2_VECTOR ------------------------;
                   
                   ;---------------------------------------------------------;
                   ;                                                          ;
                   ;        The jump table for user programs to call          ;
                   ;              subroutines within PAULMON                  ;
                   ;                                                          ;
                   ;---------------------------------------------------------;
                   
                   ; Never change this line!! Other
                   ; programs depend on these locations
                   ; to access paulmon2 functions
                   
002E:              .org     base + 46
002E: 21 67                 ajmp    phex1           ; 0x2E
0030: 01 73                 ajmp    cout            ; 0x30
0032: 01 67                 ajmp    cin             ; 0x32
0034: 21 64                 ajmp    phex            ; 0x34
0036: 21 76                 ajmp    phex16          ; 0x36
0038: 21 83                 ajmp    pstr            ; 0x38
003A: 01 8A                 ajmp    ghex            ; 0x3A
003C: 01 CE                 ajmp    ghex16          ; 0x3C
003E: 21 B5                 ajmp    esc             ; 0x4E
0040: 21 96                 ajmp    upper           ; 0x40
0042: 02 08 BC              ljmp    setbaud                 ; 0x42
                   pcstr_h:
0045: 02 0A 04              ljmp    pcstr           ; 0x45
0048: 01 7D                 ajmp    newline                 ; 0x48
004A: 02 01 A3              ljmp    lenstr          ; 0x4A
004D: 02 09 4D              ljmp    pint8u          ; 0x4D
0050: 02 09 53              ljmp    pint8           ; 0x50
0053: 02 09 91              ljmp    pint16u                 ; 0x53
0056: 02 08 09              ljmp    find            ; 0x56
                   cin_filter_h:
0059: 02 08 CC              ljmp    cin_filter      ; 0x59
005C: 21 4A                 ajmp    asc2hex                 ; 0x5C
005E: 02 07 AA              ljmp    init_crc16      ; 0x5E
0061: 02 07 B6              ljmp    update_crc16    ; 0x61
0064: 02 07 AF              ljmp    finish_crc16    ; 0x64
                   
                   ;---------------------------------------------------------;
                   ;                                                          ;
                   ;               Subroutines for serial I/O                 ;
                   ;                                                          ;
                   ;---------------------------------------------------------;
                   
                   cin:
0067: 30 98 FD              jnb     ri, cin
006A: C2 98                 clr     ri
006C: E5 99                 mov     a, sbuf
006E: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                   dspace:
006F: 11 71                 acall   space
                   space:
0071: 74 20                 mov     a, #' '
                   cout:
0073: 30 99 FD              jnb     ti, cout
0076: C2 99                 clr     ti              ; clr ti before the mov to 
0078: F5 99                 mov     sbuf, a
007A: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                   ; Clearing ti before reading sbuf takes care of the case whe
                   ; interrupts may be enabled... If an interrupt were to happe
                   ; between those two instructions, the serial port will just
                   ; wait a while, but in the other order and the character cou
                   ; finish transmitting (during the interrupt routine) and the
                   ; ti would be cleared and never set again by the hardware, c
                   ; the next call to cout to hang forever!
                   
                   newline2:                        ; print two newlines
007B: 11 7D                 acall   newline
                   newline:
007D: C0 E0                 push    acc             ; print one newline
007F: 74 0D                 mov     a, #13
0081: 11 73                 acall   cout
0083: 74 0A                 mov     a, #10
0085: 11 73                 acall   cout
0087: D0 E0                 pop     acc
0089: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                   ; get 2 digit hex number from serial port
                   ; c = set if ESC pressed, clear otherwise
                   ; psw.5 = set if return w/ no input, clear otherwise
                   
                   ghex:
                   ghex8:
008A: C2 D5                 clr     psw.5
                   ghex8c:
008C: 11 59                 acall   cin_filter_h    ; get first digit
008E: 31 96                 acall   upper
0090: B4 1B 03              cjne    a, #27, ghex8f
                   ghex8d:
0093: D3                    setb    c
0094: E4                    clr     a
0095: 22                    ret
                   ghex8f:
0096: B4 0D 05              cjne    a, #13, ghex8h
0099: D2 D5                 setb    psw.5
009B: C3                    clr     c
009C: E4                    clr     a
009D: 22                    ret
                   ghex8h:
009E: FA                    mov     r2, a
009F: 31 4A                 acall   asc2hex
00A1: 40 E9                 jc      ghex8c
00A3: CA                    xch     a, r2           ; r2 will hold hex value of
00A4: 11 73                 acall   cout
                   ghex8j:
00A6: 11 59                 acall   cin_filter_h    ; get second digit
00A8: 31 96                 acall   upper
00AA: B4 1B 02              cjne    a, #27, ghex8k
00AD: 80 E4                 sjmp    ghex8d
                   ghex8k:
00AF: B4 0D 03              cjne    a, #13, ghex8m
00B2: EA                    mov     a, r2
00B3: C3                    clr     c
00B4: 22                    ret
                   ghex8m:
00B5: B4 08 04              cjne    a, #8, ghex8p
                   ghex8n:
00B8: 11 73                 acall   cout
00BA: 80 D0                 sjmp    ghex8c
                   ghex8p:
00BC: B4 15 02              cjne    a, #21, ghex8q
00BF: 80 F7                 sjmp    ghex8n
                   ghex8q:
00C1: FB                    mov     r3, a
00C2: 31 4A                 acall   asc2hex
00C4: 40 E0                 jc      ghex8j
00C6: CB                    xch     a, r3
00C7: 11 73                 acall   cout
00C9: EA                    mov     a, r2
00CA: C4                    swap    a
00CB: 4B                    orl     a, r3
00CC: C3                    clr     c
00CD: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                   ; carry set if esc pressed
                   ; psw.5 set if return pressed w/ no input
                   
                   ghex16:
00CE: 7A 00                 mov     r2, #0          ; start out with 0
00D0: 7B 00                 mov     r3, #0
00D2: 7C 04                 mov     r4, #4          ; number of digits left
00D4: C2 D5                 clr     psw.5
                   
                   ghex16c:
00D6: 11 59                 acall   cin_filter_h
00D8: 31 96                 acall   upper
00DA: B4 1B 07              cjne    a, #27, ghex16d
00DD: D3                    setb    c               ; handle esc key
00DE: E4                    clr     a
00DF: F5 83                 mov     dph, a
00E1: F5 82                 mov     dpl, a
00E3: 22                    ret
                   ghex16d:
00E4: B4 08 02              cjne    a, #8, ghex16f
00E7: 80 03                 sjmp    ghex16k
                   ghex16f:
00E9: B4 7F 0C              cjne    a, #127, ghex16g        ; handle backspace
                   ghex16k:
00EC: BC 04 02              cjne    r4, #4, ghex16e                 ; have they
00EF: 80 E5                 sjmp    ghex16c
                   ghex16e:
00F1: 11 73                 acall   cout
00F3: 31 39                 acall   ghex16y
00F5: 0C                    inc     r4
00F6: 80 DE                 sjmp    ghex16c
                   ghex16g:
00F8: B4 0D 10              cjne    a, #13, ghex16i                 ; return ke
00FB: 8B 83                 mov     dph, r3
00FD: 8A 82                 mov     dpl, r2
00FF: BC 04 07              cjne    r4, #4, ghex16h
0102: E4                    clr     a
0103: F5 83                 mov     dph, a
0105: F5 82                 mov     dpl, a
0107: D2 D5                 setb    psw.5
                   ghex16h:
0109: C3                    clr     c
010A: 22                    ret
                   ghex16i:
010B: FD                    mov     r5, a                   ; keep copy of orig
010C: 31 4A                 acall   asc2hex
010E: 40 C6                 jc      ghex16c
0110: CD                    xch     a, r5
0111: 12 00 73              lcall   cout
0114: ED                    mov     a, r5
0115: C0 E0                 push    acc
0117: 31 28                 acall   ghex16x
0119: D0 E0                 pop     acc
011B: 2A                    add     a, r2
011C: FA                    mov     r2, a
011D: E4                    clr     a
011E: 3B                    addc    a, r3
011F: FB                    mov     r3, a
0120: DC B4                 djnz    r4, ghex16c
0122: C3                    clr     c
0123: 8A 82                 mov     dpl, r2
0125: 8B 83                 mov     dph, r3
0127: 22                    ret
                   
                   ghex16x:
                            ; multiply r3-r2 by 16 (shift left by 4)
0128: EB                    mov     a, r3
0129: C4                    swap    a
012A: 54 F0                 anl     a, #11110000b
012C: FB                    mov     r3, a
012D: EA                    mov     a, r2
012E: C4                    swap    a
012F: 54 0F                 anl     a, #00001111b
0131: 4B                    orl     a, r3
0132: FB                    mov     r3, a
0133: EA                    mov     a, r2
0134: C4                    swap    a
0135: 54 F0                 anl     a, #11110000b
0137: FA                    mov     r2, a
0138: 22                    ret
                   
                   ghex16y:
                            ; divide r3-r2 by 16 (shift right by 4)
0139: EA                    mov     a, r2
013A: C4                    swap    a
013B: 54 0F                 anl     a, #00001111b
013D: FA                    mov     r2, a
013E: EB                    mov     a, r3
013F: C4                    swap    a
0140: 54 F0                 anl     a, #11110000b
0142: 4A                    orl     a, r2
0143: FA                    mov     r2, a
0144: EB                    mov     a, r3
0145: C4                    swap    a
0146: 54 0F                 anl     a, #00001111b
0148: FB                    mov     r3, a
0149: 22                    ret
                   
                   asc2hex:
                            ; carry set if invalid input
014A: 24 D0                 add     a, #208
014C: 50 14                 jnc     hex_not
014E: 24 F6                 add     a, #246
0150: 40 04                 jc      hex_maybe
0152: 24 0A                 add     a, #10
0154: C3                    clr     c
0155: 22                    ret
                   hex_maybe:
0156: 24 F9                 add     a, #249
0158: 50 08                 jnc     hex_not
015A: 24 FA                 add     a, #250
015C: 40 04                 jc      hex_not
015E: 24 10                 add     a, #16
0160: C3                    clr     c
0161: 22                    ret
                   hex_not:
0162: D3                    setb    c
0163: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                   ; Highly code efficient resursive call phex contributed
                   ; by Alexander B. Alexandrov <abalex@cbr.spb.ru>
                   
                   phex:
                   phex8:
0164: 31 66                 acall   phex_b
                   phex_b:
0166: C4                    swap    a               ; SWAP A will be twice => A
                   phex1:
0167: C0 E0                 push    acc
0169: 54 0F                 anl     a, #15
016B: 24 90                 add     a, #0x90        ; acc is 0x9X, where X is h
016D: D4                    da      a               ; if A to F, C=1 and lower 
016E: 34 40                 addc    a, #0x40
0170: D4                    da      a
0171: 11 73                 acall   cout
0173: D0 E0                 pop     acc
0175: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                   phex16:
0176: C0 E0                 push    acc
0178: E5 83                 mov     a, dph
017A: 31 64                 acall   phex
017C: E5 82                 mov     a, dpl
017E: 31 64                 acall   phex
0180: D0 E0                 pop     acc
0182: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                   ; a not so well documented feature of pstr is that you can p
                   ; multiple consecutive strings without needing to reload dpt
                   ; (which takes 3 bytes of code!)... this is useful for inser
                   ; numbers or spaces between strings.
                   
                   pstr:
0183: C0 E0                 push    acc
                   pstr1:
0185: E0                    movx    a, @dptr
0186: A3                    inc     dptr
0187: 60 0A                 jz      pstr2
0189: A2 E7                 mov     c, acc.7
018B: 54 7F                 anl     a, #0x7F
018D: 11 73                 acall   cout
018F: 40 02                 jc      pstr2
0191: 80 F2                 sjmp    pstr1
                   pstr2:
0193: D0 E0                 pop     acc
0195: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                   ; converts the ascii code in Acc to uppercase, if it is lowe
                   ; Code efficient (saves 6 byes) upper contributed
                   ; by Alexander B. Alexandrov <abalex@cbr.spb.ru>
                   
                   upper:
0196: B4 61 00              cjne    a, #97, upper2
                   upper2:
0199: 40 07                 jc      upper4          ; end if acc < 97
019B: B4 7B 00              cjne    a, #123, upper3
                   upper3:
019E: 50 02                 jnc     upper4          ; end if acc >= 123
01A0: 24 E0                 add     a, #224                 ; convert to upperc
                   upper4:
01A2: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                   lenstr:
01A3: 78 00                 mov     r0, #0          ; returns length of a strin
01A5: C0 E0                 push    acc
                   lenstr1:
01A7: E0                    movx    a, @dptr
01A8: 60 08                 jz      lenstr2
01AA: A2 E7                 mov     c, acc.7
01AC: 08                    inc     r0
01AD: 40 03                 Jc      lenstr2
01AF: A3                    inc     dptr
01B0: 80 F5                 sjmp    lenstr1
                   lenstr2:
01B2: D0 E0                 pop     acc
01B4: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                   ; checks to see if <ESC> is waiting on serial port
                   ; C=clear if no <ESC>, C=set if <ESC> pressed
                   ; buffer is flushed
                   
                   esc:
01B5: C0 E0                 push    acc
01B7: C3                    clr     c
01B8: 30 98 08              jnb     ri, esc2
01BB: E5 99                 mov     a, sbuf
01BD: B4 1B 01              cjne    a, #27, esc1
01C0: D3                    setb    c
                   esc1:
01C1: C2 98                 clr     ri
                   esc2:
01C3: D0 E0                 pop     acc
01C5: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                   menu:
                   ; first we print out the prompt, which isn't as simple
                   ; as it may seem, since external code can add to the
                   ; prompt, so we've got to find and execute all of 'em.
01C6: 90 0C A3              mov     dptr, #prompt1          ; give 'em the firs
01C9: 11 45                 acall   pcstr_h
01CB: EF                    mov     a, r7
01CC: 31 64                 acall   phex
01CE: EE                    mov     a, r6
01CF: 31 64                 acall   phex
01D1: 90 0C AB              mov      dptr, #prompt2
01D4: 31 83                 acall   pstr
                   
                   ; now we're finally past the prompt, so let's get some input
01D6: 11 59                 acall   cin_filter_h            ; get the input, fi
01D8: B4 3A 04              cjne    a, #':', menu0
01DB: 51 C8                 acall   dnld_now
01DD: 80 E7                 sjmp    menu
                   menu0:
01DF: 31 96                 acall   upper
                   
                   ; push return address onto stack so we can just jump to the 
01E1: 75 F0 C6              mov     b, #(menu & 255)        ; we push the retur
01E4: C0 F0                 push    b                       ; to save code late
01E6: 75 F0 01              mov     b, #(menu >> 8)                 ; if bogus 
01E9: C0 F0                 push    b                       ; another prompt.
                   
                   ; first we'll look through memory for a program header that 
                   ; it's a user installed command which matches what the user 
                   
                   ; user installed commands need to avoid changing R6/R7, whic
                   ; the memory pointer. The stack pointer can't be changed obv
                   ; all the other general purpose registers should be availabl
                   ; user commands to alter as they wish.
                   
                   menux:
01EB: F5 F0                 mov     b, a            ; now search for external c
01ED: 90 10 00              mov     dptr, #bmem
                   menux1:
01F0: 12 08 09              lcall   find
01F3: 50 22                 jnc     menuxend        ; searched all the commands
01F5: 75 82 04              mov     dpl, #4
01F8: E0                    movx    a, @dptr
01F9: B4 FE 14              cjne    a, #254, menux2         ; only FE is an ext
01FC: 05 82                 inc     dpl
01FE: E0                    movx    a, @dptr
01FF: B5 F0 0E              cjne    a, b, menux2    ; only run if they want it
0202: 11 71                 acall   space
0204: 75 82 20              mov     dpl, #32
0207: 31 83                 acall   pstr            ; print command name
0209: 11 7D                 acall   newline
020B: 75 82 40              mov     dpl, #64
020E: E4                    clr     a
020F: 73                    jmp     @a+dptr                 ; take a leap of fa
                   menux2:
0210: 05 83                 inc     dph
0212: E5 83                 mov     a, dph
0214: B4 00 D9              cjne    a, #((emem + 1) >> 8) & 255, menux1
                   menuxend:
0217: E5 F0                 mov     a, b
                   
                   ; since we didn't find a user installed command, use the bui
                   menui1:
0219: B4 3F 07              cjne    a, #help_key, menui2
021C: 90 0E 0B              mov     dptr, #help_cmd2
021F: 11 45                 acall   pcstr_h
0221: A1 C9                 ajmp    help
                            
                   menui2:
0223: B4 4D 07              cjne    a, #dir_key, menui3
0226: 90 0E 13              mov     dptr, #dir_cmd
0229: 11 45                 acall   pcstr_h
022B: 81 B7                 ajmp    dir
                            
                   menui3:
022D: B4 52 07              cjne    a, #run_key, menui4
0230: 90 0E 18              mov     dptr, #run_cmd
0233: 11 45                 acall   pcstr_h
0235: A1 31                 ajmp    run
                            
                   menui4:
0237: B4 44 07              cjne    a, #dnld_key, menui5
023A: 90 0E 1C              mov     dptr, #dnld_cmd
023D: 11 45                 acall   pcstr_h
023F: 41 AB                 ajmp    dnld
                            
                   menui5:
0241: B4 55 07              cjne    a, #upld_key, menui6
0244: 90 0E 1F              mov     dptr, #upld_cmd
0247: 11 45                 acall   pcstr_h
0249: C1 68                 ajmp    upld
                            
                   menui6:
024B: B4 4E 07              cjne    a, #nloc_key, menui7
024E: 90 0E 22              mov     dptr, #nloc_cmd
0251: 11 45                 acall   pcstr_h
0253: E1 38                 ajmp    nloc
                            
                   menui7:
0255: B4 4A 07              cjne    a, #jump_key, menui8
0258: 90 0E 26              mov     dptr, #jump_cmd
025B: 11 45                 acall   pcstr_h
025D: 81 15                 ajmp    jump
                            
                   menui8:
025F: B4 48 07              cjne    a, #dump_key, menui9
0262: 90 0E 2C              mov     dptr, #dump_cmd
0265: 11 45                 acall   pcstr_h
0267: 81 45                 ajmp    dump
                            
                   menui9:
0269: B4 45 07              cjne    a, #edit_key, menui10
026C: 90 0E 38              mov     dptr, #edit_cmd
026F: 11 45                 acall   pcstr_h
0271: 81 84                 ajmp    edit
                            
                   menui10:
0273: B4 43 07              cjne    a, #clrm_key, menui11
0276: 90 0E 3D              mov     dptr, #clrm_cmd
0279: 11 45                 acall   pcstr_h
027B: E1 48                 ajmp    clrm
                            
                   menui11:
027D: B4 49 08              cjne    a, #intm_key, menui12
0280: 90 0E 32              mov     dptr, #intm_cmd
0283: 11 45                 acall   pcstr_h
0285: 02 07 DE              ljmp    intm
                            
                   menui12:
0288: B4 3C 08              cjne    a, #eio77_key, menui13
028B: 90 0E 5A              mov     dptr, #eio77_cmd
028E: 11 45                 acall   pcstr_h
0290: 02 07 FF              ljmp    eio77
                            
                   menui13:
0293: B4 3E 08              cjne    a, #dio77_key, menui14
0296: 90 0E 69              mov     dptr, #dio77_cmd
0299: 11 45                 acall   pcstr_h
029B: 02 08 04              ljmp    dio77
                            
                   menui14:
029E: B4 57 08              cjne    a, #crc16_key, menuiend
02A1: 90 0E 41              mov     dptr, #crc16_cmd
02A4: 11 45                 acall   pcstr_h
02A6: 02 07 6A              ljmp    calc_crc16
                            
                   menuiend:
02A9: 01 7D                 ajmp    newline
                   
                   ;---------------------------------------------------------;
                   
                   ; dnlds1 = "Begin sending Intel HEX format file <ESC> to abo
                   ; dnlds2 = "Download aborted"
                   ; dnlds3 = "Download completed"
                   
                   ; 16 byte parameter table: (eight 16 bit values)
                   ;  *   0 = lines received
                   ;  *   1 = bytes received
                   ;  *   2 = bytes written
                   ;  *   3 = bytes unable to write
                   ;  *   4 = incorrect checksums
                   ;  *   5 = unexpected begin of line
                   ;  *   6 = unexpected hex digits (while waiting for bol)
                   ;  *   7 = unexpected non-hex digits (in middle of a line)
                   
                   dnld:
02AB: 90 0D 3D              mov     dptr, #dnlds1   ; "begin sending file <ESC>
02AE: 11 45                 acall   pcstr_h
02B0: 91 0C                 acall   dnld_init
                            
                   dnld1:
                            ; look for begining of line marker ':'
02B2: 11 67                 acall   cin
02B4: B4 1B 02              cjne    a, #27, dnld2   ; Test for escape
02B7: 80 70                 sjmp    dnld_esc
                   
                   dnld2:
02B9: B4 3A 02              cjne    a, #':', dnld2b
02BC: 80 10                 sjmp    dnld2d
                   dnld2b:
                            ; check to see if it's a hex digit, error if it is
02BE: 31 4A                 acall   asc2hex
02C0: 40 F0                 jc      dnld1
02C2: 79 06                 mov     r1, #6
02C4: 71 3B                 acall   dnld_inc
02C6: 80 EA                 sjmp    dnld1
                   
                   dnld_now:
                            ; entry point for main menu detecting ':' character
02C8: 74 3A                 mov     a, #':'
02CA: 11 73                 acall   cout
02CC: 91 0C                 acall   dnld_init
                   
                   dnld2d:
02CE: 79 00                 mov     r1, #0
02D0: 71 3B                 acall   dnld_inc
                   
                   dnld3:
                            ; begin taking in the line of data
                            ; mov   a, #'.'
                            ; acall         cout
02D2: 7C 00                 mov     r4, #0          ; r4 will count up checksum
02D4: 71 5A                 acall   dnld_ghex
02D6: F8                    mov     r0, a           ; R0 = # of data bytes
                            ; mov   a, #'.'
                            ; acall         cout
02D7: 71 5A                 acall   dnld_ghex
02D9: F5 83                 mov     dph, a          ; High byte of load address
02DB: 71 5A                 acall   dnld_ghex
02DD: F5 82                 mov     dpl, a          ; Low byte of load address
02DF: 71 5A                 acall   dnld_ghex       ; Record type
02E1: B4 01 02              cjne    a, #1, dnld4    ; End record?
02E4: 80 29                 sjmp    dnld_end
                   dnld4:
02E6: 70 1E                 jnz     dnld_unknown    ; is it a unknown record ty
                   dnld5:
02E8: E8                    mov     a, r0
02E9: 60 10                 jz      dnld_get_cksum
02EB: 71 5A                 acall   dnld_ghex       ; Get data byte
02ED: FA                    mov     r2, a
02EE: 79 01                 mov     r1, #1
02F0: 71 3B                 acall   dnld_inc        ; count total data bytes re
02F2: EA                    mov     a, r2
02F3: F0                    movx    @dptr, a
02F4: 79 02                 mov     r1, #2
02F6: 71 3B                 acall   dnld_inc
02F8: A3                    inc     dptr
02F9: D8 ED                 djnz    r0, dnld5
                   dnld_get_cksum:
02FB: 71 5A                 acall   dnld_ghex       ; get checksum
02FD: EC                    mov     a, r4
02FE: 60 B2                 jz      dnld1           ; should always add to zero
                   dnld_sumerr:
0300: 79 04                 mov     r1, #4
0302: 71 3B                 acall   dnld_inc        ; all we can do it count # 
0304: 80 AC                 sjmp    dnld1
                   
                   dnld_unknown:    ; handle unknown line type
0306: E8                    mov     a, r0
0307: 60 F2                 jz      dnld_get_cksum  ; skip data if size is zero
                   dnld_ukn2:
0309: 71 5A                 acall   dnld_ghex       ; consume all of unknown da
030B: D8 FC                 djnz    r0, dnld_ukn2
030D: 80 EC                 sjmp    dnld_get_cksum
                   
                   dnld_end:
                            ; handles the proper end-of-download marker
030F: E8                    mov     a, r0
0310: 60 04                 jz      dnld_end_3      ; should usually be zero
                   dnld_end_2:
0312: 71 5A                 acall   dnld_ghex       ; consume all of useless da
0314: D8 F3                 djnz    r0, dnld_ukn2
                   dnld_end_3:
0316: 71 5A                 acall   dnld_ghex       ; get the last checksum
0318: EC                    mov     a, r4
0319: 70 E5                 jnz     dnld_sumerr
031B: 71 32                 acall   dnld_dly
031D: 90 0D 5C              mov     dptr, #dnlds3   ; "download went ok..."
0320: 11 45                 acall   pcstr_h
                            ; consume any cr or lf character that may have been
                            ; on the end of the last line
0322: 30 98 7A              jnb     ri, dnld_sum
0325: 11 67                 acall   cin
0327: 80 76                 sjmp    dnld_sum
                   
                   dnld_esc:
                            ; handle esc received in the download stream
0329: 71 32                 acall   dnld_dly
032B: 90 0D 54              mov     dptr, #dnlds2   ; "download aborted."    
032E: 11 45                 acall   pcstr_h
0330: 80 6D                 sjmp    dnld_sum
                   
                   ; a short delay since most terminal emulation programs
                   ; won't be ready to receive anything immediately after
                   ; they've transmitted a file... even on a fast Pentium(tm)
                   ; machine with 16550 uarts!
                   
                   dnld_dly:
0332: 78 00                 mov     r0, #0
                   dnlddly2:
0334: 79 00                 mov     r1, #0
0336: D9 FE                 djnz    r1, *           ; roughly 128k cycles, appo
0338: D8 FA                 djnz    r0, dnlddly2
033A: 22                    ret
                   
                   ; increment parameter specified by R1
                   ; note, values in Acc and R1 are destroyed
                   
                   dnld_inc:
033B: E9                    mov     a, r1
033C: 54 07                 anl     a, #00000111b   ; just in case
033E: 23                    rl      a
033F: 24 08                 add     a, #dnld_parm
0341: F9                    mov     r1, a           ; now r1 points to lsb
0342: 07                    inc     @r1
0343: E7                    mov     a, @r1
0344: 70 02                 jnz     dnldin2
0346: 09                    inc     r1
0347: 07                    inc     @r1
                   dnldin2:
0348: 22                    ret
                   
                   ; get parameter, and inc to next one (@r1)
                   ; carry clear if parameter is zero.
                   ; 16 bit value returned in dptr
                   
                   dnld_gp:
0349: D3                    setb    c
034A: 87 82                 mov     dpl, @r1
034C: 09                    inc     r1
034D: 87 83                 mov     dph, @r1
034F: 09                    inc     r1
0350: E5 82                 mov     a, dpl
0352: 70 05                 jnz     dnldgp2
0354: E5 83                 mov     a, dph
0356: 70 01                 jnz     dnldgp2
0358: C3                    clr     c
                   dnldgp2:
0359: 22                    ret
                   
                   ; a special version of ghex just for the download. Does not
                   ; look for carriage return or backspace. Handles ESC key by
                   ; poping the return address (I know, nasty, but it saves man
                   ; bytes of code in this 4k ROM) and then jumps to the esc
                   ; key handling.  This ghex doesn't echo characters, and if i
                   ; sees ':', it pops the return and jumps to an error handler
                   ; for ':' in the middle of a line. Non-hex digits also jump
                   ; to error handlers, depending on which digit.
                   
                   dnld_ghex:
                   dnldgh1:
035A: 11 67                 acall   cin
035C: 31 96                 acall   upper
035E: B4 1B 06              cjne    a, #27, dnldgh3
                   dnldgh2:
0361: D0 E0                 pop     acc
0363: D0 E0                 pop     acc
0365: 80 C2                 sjmp    dnld_esc
                   dnldgh3:
0367: B4 3A 0A              cjne    a, #':', dnldgh5
                   dnldgh4:
036A: 79 05                 mov     r1, #5          ; handle unexpected beginni
036C: 71 3B                 acall   dnld_inc
036E: D0 E0                 pop     acc
0370: D0 E0                 pop     acc
0372: 41 D2                 ajmp    dnld3           ; and now we're on a new li
                   dnldgh5:
0374: 31 4A                 acall   asc2hex
0376: 50 06                 jnc     dnldgh6
0378: 79 07                 mov     r1, #7
037A: 71 3B                 acall   dnld_inc
037C: 80 DC                 sjmp    dnldgh1
                   dnldgh6:
037E: FA                    mov     r2, a           ; keep first digit in r2
                   dnldgh7:
037F: 11 67                 acall   cin
0381: 31 96                 acall   upper
0383: B4 1B 02              cjne    a, #27, dnldgh8
0386: 80 D9                 sjmp    dnldgh2
                   dnldgh8:
0388: B4 3A 02              cjne    a, #':', dnldgh9
038B: 80 DD                 sjmp    dnldgh4
                   dnldgh9:
038D: 31 4A                 acall   asc2hex
038F: 50 06                 jnc     dnldghA
0391: 79 07                 mov     r1, #7
0393: 71 3B                 acall   dnld_inc
0395: 80 E8                 sjmp    dnldgh7
                   dnldghA:
0397: CA                    xch     a, r2
0398: C4                    swap    a
0399: 4A                    orl     a, r2
039A: FA                    mov     r2, a
039B: 2C                    add     a, r4           ; add into checksum
039C: FC                    mov     r4, a
039D: EA                    mov     a, r2           ; return value in acc
039E: 22                    ret
                   
                   ; dnlds4 =  "Summary:"
                   ; dnlds5 =  " lines received"
                   ; dnlds6a = " bytes received"
                   ; dnlds6b = " bytes written"
                   
                   ; print out download summary
                   
                   dnld_sum:
039F: EE                    mov     a, r6
03A0: C0 E0                 push    acc
03A2: EF                    mov     a, r7
03A3: C0 E0                 push    acc
03A5: 90 0D 63              mov     dptr, #dnlds4
03A8: 11 45                 acall   pcstr_h
03AA: 79 08                 mov     r1, #dnld_parm
03AC: 7E 6C                 mov     r6, #dnlds5 & 255
03AE: 7F 0D                 mov     r7, #dnlds5 >> 8
03B0: 91 08                 acall   dnld_i0
03B2: 7E 72                 mov     r6, #dnlds6a & 255
03B4: 7F 0D                 mov     r7, #dnlds6a >> 8
03B6: 91 08                 acall   dnld_i0
03B8: 7E 77                 mov     r6, #dnlds6b & 255
03BA: 7F 0D                 mov     r7, #dnlds6b >> 8
03BC: 91 08                 acall   dnld_i0
                   
                   ; now print out error summary
                   
                   dnld_err:
03BE: 7A 05                 mov     r2, #5
                   dnlder2:
03C0: 71 49                 acall   dnld_gp
03C2: 40 09                 jc      dnlder3                 ; any errors?
03C4: DA FA                 djnz    r2, dnlder2
                   ; no errors, so we print the nice message
03C6: 90 0D B3              mov     dptr, #dnlds13
03C9: 11 45                 acall   pcstr_h
03CB: 80 25                 sjmp    dlnd_sum_done
                   
                   dnlder3:
                   ; there were errors, so now we print 'em
03CD: 90 0D 82              mov     dptr, #dnlds7
03D0: 11 45                 acall   pcstr_h
                   ; but let's not be nasty... only print if necessary
03D2: 79 0E                 mov     r1, #(dnld_parm + 6)
03D4: 7E 86                 mov     r6, #dnlds8 & 255
03D6: 7F 0D                 mov     r7, #dnlds8 >> 8
03D8: 71 FA                 acall   dnld_item
03DA: 7E 97                 mov     r6, #dnlds9 & 255
03DC: 7F 0D                 mov     r7, #dnlds9 >> 8
03DE: 71 FA                 acall   dnld_item
03E0: 7E 9F                 mov     r6, #dnlds10 & 255
03E2: 7F 0D                 mov     r7, #dnlds10 >> 8
03E4: 71 FA                 acall   dnld_item
03E6: 7E A5                 mov     r6, #dnlds11 & 255
03E8: 7F 0D                 mov     r7, #dnlds11 >> 8
03EA: 71 FA                 acall   dnld_item
03EC: 7E AA                 mov     r6, #dnlds12 & 255
03EE: 7F 0D                 mov     r7, #dnlds12 >> 8
03F0: 71 FA                 acall   dnld_item
                   dlnd_sum_done:
03F2: D0 E0                 pop     acc
03F4: FF                    mov     r7, a
03F5: D0 E0                 pop     acc
03F7: FE                    mov     r6, a
03F8: 01 7D                 ajmp    newline
                   
                   dnld_item:
03FA: 71 49                 acall   dnld_gp                 ; error conditions
03FC: 50 09                 jnc     dnld_i3
                   dnld_i2:
03FE: 11 71                 acall   space
0400: 12 09 91              lcall   pint16u
0403: 11 06                 acall   r6r7todptr
0405: 11 45                 acall   pcstr_h
                   dnld_i3:
0407: 22                    ret
                   
                   dnld_i0:
0408: 71 49                 acall   dnld_gp                 ; non-error conditi
040A: 80 F2                 sjmp    dnld_i2
                   
                   ; init all dnld parms to zero.
                   
                   dnld_init:
040C: 78 08                 mov     r0, #dnld_parm
                   dnld0:
040E: 76 00                 mov     @r0, #0
0410: 08                    inc     r0
0411: B8 18 FA              cjne    r0, #dnld_parm + 16, dnld0
0414: 22                    ret
                   
                   ; dnlds7:  = "Errors:"
                   ; dnlds8:  = " bytes unable to write"
                   ; dnlds9:  = " incorrect checksums"
                   ; dnlds10: = " unexpected begin of line"
                   ; dnlds11: = " unexpected hex digits"
                   ; dnlds12: = " unexpected non-hex digits"
                   ; dnlds13: = "No errors detected"
                   
                   ;---------------------------------------------------------;
                   
                   jump:
0415: 90 0C E5              mov     dptr, #prompt8
0418: 11 45                 acall   pcstr_h
041A: 11 06                 acall   r6r7todptr
041C: 31 76                 acall   phex16
041E: 90 0C B3              mov     dptr, #prompt4
0421: 11 45                 acall   pcstr_h
0423: 11 CE                 acall   ghex16
0425: 20 D5 06              jb      psw.5, jump3
0428: 50 02                 jnc     jump2
042A: E1 33                 ajmp    abort2
                   jump2:
042C: 11 0E                 acall   dptrtor6r7
                   jump3:
042E: 11 7D                 acall   newline
0430: 90 0D C1              mov     dptr, #runs1
0433: 11 45                 acall   pcstr_h
0435: 11 06                 acall   r6r7todptr
                   
                   jump_doit:
                            ; jump to user code @dptr (this used by run command
0437: E4                    clr     a
0438: F5 D0                 mov     psw, a
043A: F5 F0                 mov     b, a
043C: 78 07                 mov     r0, #7
                   jditclr:
043E: F6                    mov     @r0, a          ; clear r7 to r1
043F: D8 FD                 djnz    r0, jditclr     ; clear r0
0441: 75 81 07              mov     sp, #7          ; start with sp=7, like a r
0444: 73                    jmp     @a+dptr
                   
                   ;---------------------------------------------------------;
                   
                   dump:    
0445: 7A 10                 mov     r2, #16                 ; number of lines t
0447: 11 7B                 acall   newline2
                   dump1:
0449: 11 06                 acall   r6r7todptr
044B: 31 76                 acall   phex16          ; tell 'em the memory locat
044D: 74 3A                 mov     a, #':'
044F: 11 1E                 acall   cout_sp
0451: 7B 10                 mov     r3, #16                 ; r3 counts # of by
0453: 11 06                 acall   r6r7todptr
                   dump2:
0455: E0                    movx    a, @dptr
0456: A3                    inc     dptr
0457: 31 64                 acall   phex            ; print each byte in hex
0459: 11 71                 acall   space
045B: DB F8                 djnz    r3, dump2
045D: 11 6F                 acall   dspace          ; print a couple extra spac
045F: 7B 10                 mov     r3, #16
0461: 11 06                 acall   r6r7todptr
                   dump3:
0463: E0                    movx    a, @dptr
0464: A3                    inc     dptr
0465: 54 7F                 anl     a, #01111111b   ; avoid unprintable charact
0467: B4 7F 01              cjne    a, #127, dump3b
046A: E4                    clr     a               ; avoid 127/255 (delete/rub
                   dump3b:
046B: 24 E0                 add     a, #224
046D: 40 01                 jc      dump4
046F: E4                    clr     a               ; avoid control characters
                   dump4:
0470: 24 20                 add     a, #32
0472: 11 73                 acall   cout
0474: DB ED                 djnz    r3, dump3
0476: 11 7D                 acall   newline
0478: D1 EF                 acall   line_dly
047A: 11 0E                 acall   dptrtor6r7
047C: 31 B5                 acall   esc
047E: 40 02                 jc      dump5
0480: DA C7                 djnz    r2, dump1       ; loop back up to print nex
                   dump5:
0482: 01 7D                 ajmp    newline
                   
                   ;---------------------------------------------------------;
                   
                   ; edit external ram
                   
                   edit:
0484: 90 0D 27              mov     dptr, #edits1
0487: 11 45                 acall   pcstr_h
0489: 11 06                 acall   r6r7todptr
                   edit1:
048B: 31 76                 acall   phex16
048D: 74 3A                 mov     a, #':'
048F: 11 1E                 acall   cout_sp
0491: 74 28                 mov     a, #'('
0493: 11 73                 acall   cout
0495: 11 0E                 acall   dptrtor6r7
0497: E0                    movx    a, @dptr
0498: 31 64                 acall   phex
049A: 90 0D 00              mov     dptr, #prompt10
049D: 11 45                 acall   pcstr_h
049F: 11 8A                 acall   ghex
04A1: 20 D5 0E              jb      psw.5, edit2
04A4: 40 0C                 jc      edit2
04A6: 11 06                 acall   r6r7todptr
04A8: F0                    movx    @dptr, a
04A9: 11 7D                 acall   newline
04AB: 11 06                 acall   r6r7todptr
04AD: A3                    inc     dptr
04AE: 11 0E                 acall   dptrtor6r7
04B0: 81 8B                 ajmp    edit1
                   edit2:
04B2: 90 0D 32              mov     dptr, #edits2
04B5: 01 45                 ajmp    pcstr_h
                   
                   ;---------------------------------------------------------;
                   
                   dir:
04B7: 90 0C EF              mov     dptr, #prompt9
04BA: 11 45                 acall   pcstr_h
04BC: 78 15                 mov     r0, #21
                   dir0a:
04BE: 11 71                 acall   space
04C0: D8 FC                 djnz    r0, dir0a
04C2: 90 0C F6              mov     dptr, #prompt9b
04C5: 11 45                 acall   pcstr_h
                   
04C7: 75 83 10              mov     dph, #(bmem >> 8)
                   dir1:
04CA: 12 08 09              lcall   find            ; find the next program in 
04CD: 40 02                 jc      dir2
                   dir_end:
04CF: 01 7D                 ajmp    newline                 ; we're done if no 
                   dir2:
04D1: 11 6F                 acall   dspace
04D3: 75 82 20              mov     dpl, #32        ; print its name
04D6: 31 83                 acall   pstr
04D8: 75 82 20              mov     dpl, #32        ; how long is the name
04DB: 31 A3                 acall   lenstr
04DD: 74 21                 mov     a, #33
04DF: C3                    clr     c
04E0: 98                    subb    a, r0
04E1: F8                    mov     r0, a
04E2: 74 20                 mov     a, #' '                 ; print the right #
                   dir3:
04E4: 11 73                 acall   cout
04E6: D8 FC                 djnz    r0, dir3
04E8: 75 82 00              mov     dpl, #0
04EB: 31 76                 acall   phex16          ; print the memory location
04ED: 78 06                 mov     r0, #6
04EF: 74 20                 mov     a, #' '
                   dir4:
04F1: 11 73                 acall   cout
04F3: D8 FC                 djnz    r0, dir4
04F5: 75 82 04              mov     dpl, #4                 ; now figure out wh
04F8: E0                    movx    a, @dptr
04F9: AA 83                 mov     r2, dph                 ; save this, we're 
                   
                   dir5:
04FB: B4 FE 05              cjne    a, #254, dir5b
04FE: 90 0D F9              mov     dptr, #type1    ; it's an external command
0501: 80 18                 sjmp    dir7
                   dir5b:
0503: B4 FD 05              cjne    a, #253, dir5c
                   dir5bb:
0506: 90 0E 00              mov     dptr, #type4    ; it's a startup routine
0509: 80 10                 sjmp    dir7
                   dir5c:
050B: B4 23 05              cjne    a, #35, dir5d
050E: 90 0D FD              mov     dptr, #type2    ; it's an ordinary program
0511: 80 08                 sjmp    dir7
                   dir5d:
0513: B4 F9 02              cjne    a, #249, dir5e
0516: 80 EE                 sjmp    dir5bb
                   dir5e:
                   dir6:
0518: 90 0E 07              mov     dptr, #type5    ; who knows what the hell i
                   
                   dir7:
051B: 11 45                 acall   pcstr_h                 ; print out the typ
051D: 8A 83                 mov     dph, r2                 ; go back and find 
051F: 11 7D                 acall   newline
0521: 74 FF                 mov     a, #(emem >> 8)
0523: B5 83 02              cjne    a, dph, dir8    ; did we just print the las
0526: 81 CF                 ajmp    dir_end
                   dir8:
0528: 05 83                 inc     dph
052A: E5 83                 mov     a, dph
052C: B4 00 9B              cjne    a, #((emem + 1) >> 8) & 255, dir1
052F: 81 CF                 ajmp    dir_end
                   
                   ; type1=Ext Command
                   ; type4=Startup
                   ; type2=Program
                   ; type5=???
                   
                   ;---------------------------------------------------------;
                   
                   run:
0531: 11 7B                 acall   newline2
0533: 7A FF                 mov     r2, #255        ; first print the menu, cou
0535: 90 10 00              mov     dptr, #bmem
0538: 15 83                 dec     dph
                   run2:
053A: 05 83                 inc     dph
053C: E5 83                 mov     a, dph
053E: B4 00 02              cjne    a, #((emem + 1) >> 8) & 255, run2b
0541: 80 21                 sjmp    run3
                   run2b:
0543: 12 08 09              lcall   find
0546: 50 1C                 jnc     run3            ; have we found 'em all??
0548: 75 82 04              mov     dpl, #4
054B: E0                    movx    a, @dptr
054C: 44 03                 orl     a, #00000011b
054E: F4                    cpl     a
054F: 60 E9                 jz      run2            ; this one doesn't run... f
0551: 11 6F                 acall   dspace
0553: 0A                    inc     r2
0554: 74 41                 mov     a, #'A'                 ; print the key to 
0556: 2A                    add     a, r2
0557: 11 1E                 acall   cout_sp
0559: 11 26                 acall   dash_sp
055B: 75 82 20              mov     dpl, #32
055E: 31 83                 acall   pstr            ; and the command name
0560: 11 7D                 acall   newline
0562: A1 3A                 ajmp    run2            ; and continue doing this
                   run3:
0564: BA FF 05              cjne    r2, #255, run4  ; are there any to run??
0567: 90 0C BC              mov     dptr, #prompt5
056A: 01 45                 ajmp    pcstr_h
                   run4:
056C: 90 0C AE              mov     dptr, #prompt3  ; ask the big question!
056F: 11 45                 acall   pcstr_h
0571: 74 41                 mov     a, #'A'
0573: 11 73                 acall   cout
0575: 11 16                 acall   dash
0577: 74 41                 mov     a, #'A'                 ; such user friendl
0579: 2A                    add     a, r2           ; even tell 'em the choices
057A: 11 73                 acall   cout
057C: 90 0C B3              mov     dptr, #prompt4
057F: 11 45                 acall   pcstr_h
0581: 11 59                 acall   cin_filter_h
0583: B4 1B 02              cjne    a, #27, run4aa  ; they they hit <ESC>
0586: 01 7D                 ajmp    newline
                   run4aa:
0588: FB                    mov     r3, a
0589: 74 1F                 mov     a, #31
058B: C3                    clr     c
058C: 9A                    subb    a, r2
058D: EB                    mov     a, r3
058E: 40 02                 jc      run4a
0590: 31 96                 acall   upper
                   run4a:
0592: 11 73                 acall   cout
0594: FB                    mov     r3, a
0595: 11 7D                 acall   newline
                            ; check to see if it's under 32, if so convert to u
0597: EB                    mov     a, r3
0598: 24 BF                 add     a, #(256 - 'A')
059A: 50 D0                 jnc     run4            ; if they typed less than '
059C: FB                    mov     r3, a           ; R3 has the number they ty
059D: EA                    mov     a, r2           ; A=R2 has the maximum numb
059E: C3                    clr     c
059F: 9B                    subb    a, r3
05A0: 40 CA                 jc      run4            ; if they typed over the ma
05A2: 0B                    inc     r3
05A3: 90 10 00              mov     dptr, #bmem
05A6: 15 83                 dec     dph
                   run5:
05A8: 05 83                 inc     dph
05AA: E5 83                 mov     a, dph
05AC: B4 00 02              cjne    a, #((emem + 1) >> 8) & 255, run5b
05AF: 80 17                 sjmp    run8
                   run5b:
05B1: 12 08 09              lcall   find
05B4: 50 12                 jnc     run8            ; Shouldn't ever do this ju
05B6: 75 82 04              mov     dpl, #4
05B9: E0                    movx    a, @dptr
05BA: 44 03                 orl     a, #00000011b
05BC: F4                    cpl     a
05BD: 60 E9                 jz      run5            ; this one doesn't run... f
05BF: DB E7                 djnz    r3, run5        ; count til we find the one
05C1: 11 7D                 acall   newline
05C3: 75 82 40              mov     dpl, #64
05C6: 81 37                 ajmp    jump_doit
                   run8:
05C8: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                   help:
05C9: 90 0D E1              mov     dptr, #help1txt
05CC: 11 45                 acall   pcstr_h
                            
05CE: 7C 3F                 mov     r4, #help_key
05D0: 90 0E 0E              mov     dptr, #help_cmd
05D3: D1 5D                 acall   help2
                            
05D5: 7C 4D                 mov     r4, #dir_key
05D7: 90 0E 13              mov     dptr, #dir_cmd
05DA: D1 5D                 acall   help2
                            
05DC: 7C 52                 mov     r4, #run_key
05DE: 90 0E 18              mov     dptr, #run_cmd
05E1: D1 5D                 acall   help2
                            
05E3: 7C 44                 mov     r4, #dnld_key
05E5: 90 0E 1C              mov     dptr, #dnld_cmd
05E8: D1 5D                 acall   help2
                            
05EA: 7C 55                 mov     r4, #upld_key
05EC: 90 0E 1F              mov     dptr, #upld_cmd
05EF: D1 5D                 acall   help2
                            
05F1: 7C 4E                 mov     r4, #nloc_key
05F3: 90 0E 22              mov     dptr, #nloc_cmd
05F6: D1 5D                 acall   help2
                            
05F8: 7C 4A                 mov     r4, #jump_key
05FA: 90 0E 26              mov     dptr, #jump_cmd
05FD: D1 5D                 acall   help2
                            
05FF: 7C 48                 mov     r4, #dump_key
0601: 90 0E 2C              mov     dptr, #dump_cmd
0604: D1 5D                 acall   help2
                            
0606: 7C 49                 mov     r4, #intm_key
0608: 90 0E 32              mov     dptr, #intm_cmd
060B: D1 5D                 acall   help2
                            
060D: 7C 45                 mov     r4, #edit_key
060F: 90 0E 38              mov     dptr, #edit_cmd
0612: D1 5D                 acall   help2
                            
0614: 7C 43                 mov     r4, #clrm_key
0616: 90 0E 3D              mov     dptr, #clrm_cmd
0619: D1 5D                 acall   help2
                            
061B: 7C 57                 mov     r4, #crc16_key
061D: 90 0E 41              mov     dptr, #crc16_cmd
0620: D1 5D                 acall   help2
                            
0622: 7C 3C                 mov     r4, #eio77_key
0624: 90 0E 5A              mov     dptr, #eio77_cmd
0627: D1 5D                 acall   help2
                            
0629: 7C 3E                 mov     r4, #dio77_key
062B: 90 0E 69              mov     dptr, #dio77_cmd
062E: D1 5D                 acall   help2
                            
0630: 90 0D EF              mov     dptr, #help2txt
0633: 11 45                 acall   pcstr_h
0635: 90 10 00              mov     dptr, #bmem
                   help3:
0638: 12 08 09              lcall   find
063B: 50 1E                 jnc     help4
063D: 75 82 04              mov     dpl, #4
0640: E0                    movx    a, @dptr
0641: B4 FE 10              cjne    a, #254, help3a         ; only FE is an ext
0644: 11 6F                 acall   dspace
0646: 05 82                 inc     dpl
0648: E0                    movx    a, @dptr
0649: 11 73                 acall   cout
064B: 11 26                 acall   dash_sp
064D: 75 82 20              mov     dpl, #32
0650: 31 83                 acall   pstr
0652: 11 7D                 acall   newline
                   help3a:
0654: 05 83                 inc     dph
0656: E5 83                 mov     a, dph
0658: B4 00 DD              cjne    a, #((emem + 1) >> 8) & 255, help3
                   help4:   
065B: 01 7D                 ajmp    newline
                   
                   help2:                           ; print 11 standard lines
065D: 11 6F                 acall   dspace          ; given key in R4 and name 
065F: EC                    mov     a, r4
0660: 11 73                 acall   cout
0662: 11 26                 acall   dash_sp
0664: 11 45                 acall   pcstr_h
0666: 01 7D                 ajmp    newline
                   
                   ;---------------------------------------------------------;
                   
                   upld:
0668: F1 01                 acall   get_mem
                            ; assume we've got the beginning address in r3/r2
                            ; and the final address in r5/r4 (r4=lsb)...
                   
                            ; print out what we'll be doing
066A: 90 0D CB              mov     dptr, #uplds3
066D: 11 45                 acall   pcstr_h
066F: EB                    mov     a, r3
0670: 31 64                 acall   phex
0672: EA                    mov     a, r2
0673: 31 64                 acall   phex
0675: 90 0D DC              mov      dptr, #uplds4
0678: 11 45                 acall   pcstr_h
067A: ED                    mov     a, r5
067B: 31 64                 acall   phex
067D: EC                    mov     a, r4
067E: 31 64                 acall   phex
0680: 11 7D                 acall   newline
                   
                            ; need to adjust end location by 1...
0682: 8D 83                 mov     dph, r5
0684: 8C 82                 mov     dpl, r4
0686: A3                    inc     dptr
0687: AC 82                 mov     r4, dpl
0689: AD 83                 mov     r5, dph
                   
068B: 90 0C DB              mov     dptr, #prompt7
068E: 11 45                 acall   pcstr_h
0690: 11 67                 acall   cin
0692: B4 1B 02              cjne    a, #27, upld2e
0695: E1 31                 ajmp    abort_it
                   upld2e:
0697: 11 7D                 acall   newline
0699: 8A 82                 mov     dpl, r2
069B: 8B 83                 mov     dph, r3
                   
                   upld3:
069D: EC                    mov     a, r4           ; how many more bytes to ou
069E: C3                    clr     c
069F: 95 82                 subb    a, dpl
06A1: FA                    mov     r2, a
06A2: ED                    mov     a, r5
06A3: 95 83                 subb    a, dph
06A5: 70 09                 jnz     upld4           ; if >256 left, then do nex
06A7: EA                    mov     a, r2
06A8: 60 31                 jz      upld7           ; if we're all done
06AA: 54 F0                 anl     a, #11110000b
06AC: 70 02                 jnz     upld4           ; if >= 16 left, then do ne
06AE: 80 02                 sjmp    upld5           ; otherwise just finish it 
                   upld4:
06B0: 7A 10                 mov     r2, #16
                   upld5:
06B2: 74 3A                 mov     a, #':'                 ; begin the line
06B4: 11 73                 acall   cout
06B6: EA                    mov     a, r2
06B7: 31 64                 acall   phex            ; output # of data bytes
06B9: 31 76                 acall   phex16          ; output memory location
06BB: E5 83                 mov     a, dph
06BD: 25 82                 add     a, dpl
06BF: 2A                    add     a, r2
06C0: FB                    mov     r3, a           ; r3 will become checksum
06C1: E4                    clr     a
06C2: 31 64                 acall   phex            ; output 00 code for data
                   upld6:
06C4: E0                    movx    a, @dptr
06C5: 31 64                 acall   phex            ; output each byte
06C7: 2B                    add     a, r3
06C8: FB                    mov     r3, a
06C9: A3                    inc     dptr
06CA: DA F8                 djnz    r2, upld6       ; do however many bytes we 
06CC: EB                    mov     a, r3
06CD: F4                    cpl     a
06CE: 04                    inc     a
06CF: 31 64                 acall   phex            ; and finally the checksum
06D1: 11 7D                 acall   newline
06D3: D1 EF                 acall   line_dly
06D5: 31 B5                 acall   esc
06D7: 50 C4                 jnc     upld3           ; keep working if no esc pr
06D9: 80 56                 sjmp    abort_it
                   upld7:
06DB: 74 3A                 mov     a, #':'
06DD: 11 73                 acall   cout
06DF: E4                    clr     a
06E0: 31 64                 acall   phex
06E2: 31 64                 acall   phex
06E4: 31 64                 acall   phex
06E6: 04                    inc     a
06E7: 31 64                 acall   phex
06E9: 74 FF                 mov     a, #255
06EB: 31 64                 acall   phex
                   upld8:
06ED: 01 7B                 ajmp    newline2
                   
                   line_dly:
                            ; a brief delay between line while uploading, so th
                            ; receiving host can be slow (i.e. most windows sof
06EF: E8                    mov     a, r0
06F0: C0 E0                 push    acc
06F2: 78 0C                 mov     r0, #line_delay*2
                   line_d2:
06F4: E5 8C                 mov     a, th0          ; get baud rate const
                   line_d3:
06F6: 04                    inc     a
06F7: 00                    nop
06F8: 00                    nop
06F9: 70 FB                 jnz     line_d3
06FB: D8 F7                 djnz    r0, line_d2
06FD: D0 E0                 pop     acc
06FF: F8                    mov     r0, a
0700: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                   ; this thing gets the begin and end locations for
                   ; a few commands. If an esc or enter w/ no input,
                   ; it pops it's own return and returns to the menu
                   ; (nasty programming, but we need tight code for 4k rom)
                   
                   get_mem:
0701: 11 7B                 acall   newline2
0703: 90 0D 09              mov     dptr, #beg_str
0706: 11 45                 acall   pcstr_h
0708: 11 CE                 acall   ghex16
070A: 40 21                 jc      pop_it
070C: 20 D5 1E              jb      psw.5, pop_it
070F: C0 83                 push    dph
0711: C0 82                 push    dpl
0713: 11 7D                 acall   newline
0715: 90 0D 13              mov     dptr, #end_str
0718: 11 45                 acall   pcstr_h
071A: 11 CE                 acall   ghex16
071C: AD 83                 mov     r5, dph
071E: AC 82                 mov     r4, dpl
0720: D0 E0                 pop     acc
0722: FA                    mov     r2, a
0723: D0 E0                 pop     acc
0725: FB                    mov     r3, a
0726: 40 05                 jc      pop_it
0728: 20 D5 02              jb      psw.5, pop_it
072B: 01 7D                 ajmp    newline
                   
                   pop_it:
072D: D0 E0                 pop     acc
072F: D0 E0                 pop     acc
                   abort_it:
0731: 11 7D                 acall   newline
                   abort2:
0733: 90 0C 9B              mov     dptr, #abort
0736: 01 45                 ajmp    pcstr_h
                   
                   ;---------------------------------------------------------;
                   
                   nloc:
0738: 90 0C D2              mov     dptr, #prompt6
073B: 11 45                 acall   pcstr_h
073D: 11 CE                 acall   ghex16
073F: 40 F2                 jc      abort2
0741: 20 D5 EF              jb      psw.5, abort2
0744: 11 0E                 acall   dptrtor6r7
0746: 01 7B                 ajmp    newline2
                   
                   ;---------------------------------------------------------;
                   
                   clrm:
0748: F1 01                 acall   get_mem
074A: 90 0D 1D              mov     dptr, #sure
074D: 11 45                 acall   pcstr_h
074F: 11 59                 acall   cin_filter_h
0751: 31 96                 acall   upper
0753: B4 59 DB              cjne    a, #'Y', abort_it
0756: 11 7B                 acall   newline2
                   clrm2:
                            ; now we actually do it
0758: 8B 83                 mov     dph, r3
075A: 8A 82                 mov     dpl, r2
                   clrm3:
075C: E4                    clr     a
075D: F0                    movx    @dptr, a
075E: ED                    mov     a, r5
075F: B5 83 05              cjne    a, dph, clrm4
0762: EC                    mov     a, r4
0763: B5 82 01              cjne    a, dpl, clrm4
0766: 22                    ret
                   clrm4:
0767: A3                    inc     dptr
0768: 80 F2                 sjmp    clrm3
                   
                   ;---------------------------------------------------------;
                   
076A:              .equ     initial_l, 0xff
076A:              .equ     initial_h, 0xff
076A:              .equ     final_l, 0x00
076A:              .equ     final_h, 0x00
076A:              .equ     poly_l, 0x21
076A:              .equ     poly_h, 0x10
                   
                   calc_crc16:
076A: F1 01                 acall   get_mem
076C: 11 7D                 acall   newline
                            
076E: 11 06                 acall   r6r7todptr
0770: C0 82                 push    dpl
0772: C0 83                 push    dph
                            
0774: 7E FF                 mov     r6, #initial_l
0776: 7F FF                 mov     r7, #initial_h
0778: F1 AA                 acall   init_crc16
                            
077A: AE 21                 mov     r6, poly_l
077C: AF 10                 mov     r7, poly_h
077E: 8B 83                 mov     dph, r3
0780: 8A 82                 mov     dpl, r2
                   calc_loop:
0782: E0                    movx    a, @dptr
0783: F1 B6                 acall   update_crc16
                            
0785: ED                    mov     a, r5
0786: B5 83 1E              cjne    a, dph, calc_skip
0789: EC                    mov     a, r4
078A: B5 82 1A              cjne    a, dpl, calc_skip
                            
078D: 7E 00                 mov     r6, #final_l
078F: 7F 00                 mov     r7, #final_h
0791: F1 AF                 acall   finish_crc16
                            
0793: 90 0E 51              mov     dptr, #crc16_res
0796: 11 45                 acall   pcstr_h
0798: 8A 82                 mov     dpl, r2
079A: 8B 83                 mov     dph, r3
079C: 12 01 76              lcall   phex16
                            
079F: D0 83                 pop     dph
07A1: D0 82                 pop     dpl
07A3: 11 0E                 acall   dptrtor6r7
                            
07A5: 01 7B                 ajmp    newline2
                            
                   calc_skip:
07A7: A3                    inc     dptr
07A8: 80 D8                 sjmp    calc_loop
                            
                   init_crc16:
07AA: EE                    mov     a, r6
07AB: FA                    mov     r2, a
07AC: EF                    mov     a, r7
07AD: FB                    mov     r3, a
07AE: 22                    ret
                                    
                   finish_crc16:
07AF: EA                    mov     a, r2
07B0: 6E                    xrl     a, r6
07B1: FA                    mov     r2, a
07B2: EB                    mov     a, r3
07B3: 6F                    xrl     a, r7
07B4: FB                    mov     r3, a
07B5: 22                    ret
                            
                   update_crc16:
07B6: F5 F0                 mov     b, a
07B8: 74 80                 mov     a, #0x80
                            
                   loop:
07BA: F8                    mov     r0, a
07BB: E5 F0                 mov     a, b
                            
07BD: 58                    anl     a, r0
07BE: 60 02                 jz      skip0
07C0: 74 01                 mov     a, #1
                   skip0:
07C2: F9                    mov     r1, a
07C3: EB                    mov     a, r3
07C4: 23                    rl      a
07C5: 54 01                 anl     a, #1
07C7: 69                    xrl     a, r1
07C8: F9                    mov     r1, a
                            
07C9: EA                    mov     a, r2
07CA: 2A                    add     a, r2
07CB: FA                    mov     r2, a
07CC: EB                    mov     a, r3
07CD: 33                    rlc     a
07CE: FB                    mov     r3, a
                            
07CF: E9                    mov     a, r1
07D0: 60 06                 jz      skip1
                            
07D2: EA                    mov     a, r2
07D3: 6E                    xrl     a, r6
07D4: FA                    mov     r2, a
07D5: EB                    mov     a, r3
07D6: 6F                    xrl     a, r7
07D7: FB                    mov     r3, a
                            
                   skip1:
07D8: E8                    mov     a, r0
07D9: C3                    clr     c
07DA: 13                    rrc     a
07DB: 70 DD                 jnz     loop
                                    
07DD: 22                    ret
                            
                   ;---------------------------------------------------------;
                   
                   intm:
07DE: 11 7D                 acall   newline
07E0: 78 00                 mov     r0, #0
                   intm2:
07E2: 11 7D                 acall   newline
07E4: E8                    mov     a, r0
07E5: 31 64                 acall   phex
07E7: 74 3A                 mov     a, #':'
07E9: 11 73                 acall   cout
                   intm3:
07EB: 11 71                 acall   space
07ED: E6                    mov     a, @r0
07EE: 31 64                 acall   phex
07F0: 08                    inc     r0
07F1: B8 00 04              cjne    r0, #0, intm4
07F4: 11 7D                 acall   newline
07F6: 01 7D                 ajmp    newline
                   intm4:
07F8: E8                    mov     a, r0
07F9: 54 0F                 anl     a, #00001111b
07FB: 70 EE                 jnz     intm3
07FD: 80 E3                 sjmp    intm2
                   
                   ;---------------------------------------------------------;
                   
                   eio77:
07FF: C2 97                 clr     p1.7
0801: 02 00 7D              ljmp    newline
                            
                   ;---------------------------------------------------------;
                   
                   dio77:
0804: D2 97                 setb    p1.7
0806: 02 00 7D              ljmp    newline
                   
                   ;---------------------------------------------------------;
                   
                   ; finds the next header in the external memory.
                   ; Input DPTR=point to start search (only MSB used)
                   ; Output DPTR=location of next module
                   ; C=set if a header found, C=clear if no more headers
                   
                   find:
0809: 75 82 00              mov     dpl, #0
080C: E0                    movx    a, @dptr
080D: B4 A5 14              cjne    a, #0xA5, find3
0810: A3                    inc     dptr
0811: E0                    movx    a, @dptr
0812: B4 E5 0F              cjne    a, #0xE5, find3
0815: A3                    inc     dptr
0816: E0                    movx    a, @dptr
0817: B4 E0 0A              cjne    a, #0xE0, find3
081A: A3                    inc     dptr
081B: E0                    movx    a, @dptr
081C: B4 A5 05              cjne    a, #0xA5, find3
081F: 75 82 00              mov     dpl, #0                         ; found one
0822: D3                    setb    c
0823: 22                    ret
                   find3:
0824: 74 FF                 mov     a, #(emem >> 8)
0826: B5 83 02              cjne    a, dph, find4           ; did we just check
0829: C3                    clr     c
082A: 22                    ret
                   find4:
082B: 05 83                 inc     dph                     ; keep on searching
082D: 80 DA                 sjmp    find
                   
                   ;---------------------------------------------------------;
                   
                   ; initialize the hardware on reset
                   ; copy flash to memory
                   
                   reset:
082F: E4                    clr     a
0830: F5 A8                 mov     ie, a           ; all interrupts off
0832: F5 B8                 mov     ip, a
0834: 75 D0 00              mov     psw, #psw_init
0837: 75 81 17              mov     sp, #stack
                            
                   ; force P1 to output
                   ; internal PFETs P1.7-0 active + external pullup
083A: 74 FF                 mov     a, #mctrl_default
083C: F5 90                 mov     p1, a
083E: FF                    mov     r7, a
083F: FF                    mov     r7, a
0840: FF                    mov     r7, a
0841: FF                    mov     r7, a
                            
                   begin_cp_shadow:
0842: 90 00 00              mov     dptr, #0x0000
                   cp_byte:
0845: E4                    clr     a
0846: 93                    movc    a, @a+dptr
0847: F0                    movx    @dptr, a
0848: A3                    inc     dptr
0849: E5 83                 mov     a, dph
084B: B4 20 F7              cjne    a, #0x20, cp_byte
                   end_cp_shadow:
                   
                   ; force P1 to output
                   ; internal PFETs P1.7-1 active + external pullup, internal N
084E: 74 FE                 mov     a, #mctrl_shadow
0850: F5 90                 mov     p1, a
0852: FF                    mov     r7, a
0853: FF                    mov     r7, a
0854: FF                    mov     r7, a
0855: FF                    mov     r7, a
                            
                   ; run any user initialization programs in external memory
0856: 75 F0 F9              mov     b, #249
0859: 12 08 90              lcall   stcode
                   
                   ; initialize the serial port
085C: 74 FF                 mov     a, #baud_const
085E: 75 F0 21              mov     b, #tmod_cfg_OSC
0861: 12 08 BC              lcall   setbaud
                   
                   ; run the start-up programs in external memory
0864: 75 F0 FD              mov     b, #253
0867: 12 08 90              lcall   stcode
                   
                   ; now print out the nice welcome message
                   welcome:
086A: 78 18                 mov     r0, #24
                   welcm2:
086C: 12 00 7D              lcall   newline
086F: D8 FB                 djnz    r0, welcm2
0871: 78 0F                 mov     r0, #15
0873: 74 20                 mov     a, #' '
                   welcm4:
0875: 12 00 73              lcall   cout
0878: D8 FB                 djnz    r0, welcm4
087A: 90 0C 64              mov     dptr, #logon1
087D: 12 0A 04              lcall   pcstr
0880: 90 0C 7D              mov     dptr, #logon2
0883: 12 0A 04              lcall   pcstr
0886: 12 04 B7              lcall   dir
0889: 7E 00                 mov     r6, #(pgm & 255)
088B: 7F 20                 mov     r7, #(pgm >> 8)
088D: 02 01 C6              ljmp    menu
                   
                   stcode:
0890: 90 10 00              mov     dptr, #bmem      ; search for startup routi
                   stcode2:
0893: 12 08 09              lcall   find
0896: 50 23                 jnc     stcode5
0898: 75 82 04              mov     dpl, #4
089B: E0                    movx    a, @dptr
089C: B5 F0 15              cjne    a, b, stcode4   ; only startup code if matc
089F: C0 F0                 push    b
08A1: C0 83                 push    dph
08A3: 74 B0                 mov     a, #(stcode3 & 255)
08A5: C0 E0                 push    acc
08A7: 74 08                 mov     a, #(stcode3 >> 8)
08A9: C0 E0                 push    acc
08AB: 75 82 40              mov     dpl, #64
08AE: E4                    clr     a
08AF: 73                    jmp     @a+dptr                 ; jump to the start
                   stcode3:
08B0: D0 83                 pop     dph             ; hopefully it'll return to
08B2: D0 F0                 pop     b
                   stcode4:
08B4: 05 83                 inc     dph
08B6: E5 83                 mov     a, dph
08B8: B4 00 D8              cjne    a, #((emem + 1) >> 8) & 255, stcode2
                   stcode5:
08BB: 22                    ret                     ; now we've executed all of
                   
                   ;---------------------------------------------------------;
                   
                   setbaud:
08BC: F5 8D                 mov     th1, a
08BE: F5 8B                 mov     tl1, a
08C0: 85 F0 89              mov     tmod, b
08C3: 75 87 80              mov     pcon, #10000000b
08C6: 75 98 52              mov     scon, #01010010b
08C9: D2 8E                 setb    tr1
08CB: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                   ; this twisted bit of code looks for escape sequences for
                   ; up, down, left, right, pageup, and pagedown, as well
                   ; as ordinary escape and ordinary characters. Escape
                   ; sequences are required to arrive with each character
                   ; nearly back-to-back to the others, otherwise the character
                   ; are treated as ordinary user keystroaks. cin_filter
                   ; returns a single byte when it sees the multi-byte escape
                   ; sequence, as shown here.
                   
                   ; return value    key            escape sequence
                   ;   11 (^K)       up             1B 5B 41
                   ;   10 (^J)       down           1B 5B 42
                   ;   21 (^U)       right          1B 5B 43
                   ;    8 (^H)       left           1B 5B 44
                   ;   25 (^Y)       page up        1B 5B 35 7E
                   ;   26 (^Z)       page down      1B 5B 36 7E
                   
08CC:              .equ     esc_char, 27
                   
                   cin_filter:
08CC: 30 98 06              jnb     ri, cinf1
08CF: 12 00 67              lcall   cin
08D2: B4 1B 51              cjne    a, #esc_char, cinf_end
                            ; if esc was already in sbuf, just ignore it
                   cinf1:
08D5: 12 00 67              lcall   cin
08D8: B4 1B 4B              cjne    a, #esc_char, cinf_end
                   cinf2:
08DB: 31 3A                 acall   cinf_wait
08DD: 20 98 03              jb      ri, cinf4
08E0: 74 1B                 mov     a, #esc_char
08E2: 22                    ret                     ; an ordinary ESC
                   
                   cinf4:
                            ; if we get here, it's a control code, since a char
                            ; was received shortly after receiving an ESC chara
08E3: 12 00 67              lcall   cin
08E6: B4 5B 44              cjne    a, #'[', cinf_consume
08E9: 31 3A                 acall   cinf_wait
08EB: 30 98 DE              jnb     ri, cin_filter
08EE: 12 00 67              lcall   cin
                   cinf5a:
08F1: B4 41 03              cjne    a, #'A', cinf5b
08F4: 74 0B                 mov     a, #11
08F6: 22                    ret
                   cinf5b:
08F7: B4 42 03              cjne    a, #'B', cinf5c
08FA: 74 0A                 mov     a, #10
08FC: 22                    ret
                   cinf5c:
08FD: B4 43 03              cjne    a, #'C', cinf5d
0900: 74 15                 mov     a, #21
0902: 22                    ret
                   cinf5d:
0903: B4 44 03              cjne    a, #'D', cinf5e
0906: 74 08                 mov     a, #8
0908: 22                    ret
                   cinf5e:
0909: B4 35 02              cjne    a, #0x35, cinf5f
090C: 80 07                 sjmp    cinf8
                   cinf5f:
090E: B4 36 02              cjne    a, #0x36, cinf5g
0911: 80 02                 sjmp    cinf8
                   cinf5g:
0913: 80 18                 sjmp    cinf_consume            ; unknown escape se
                   
                   cinf8:
                            ; when we get here, we've got the sequence for page
                            ; but there's one more incoming byte to check...
0915: C0 E0                 push    acc
0917: 31 3A                 acall   cinf_wait
0919: 30 98 0B              jnb     ri, cinf_restart
091C: 12 00 67              lcall   cin
091F: B4 7E 09              cjne    a, #0x7E, cinf_notpg
0922: D0 E0                 pop     acc
0924: 24 E4                 add     a, #228
                   cinf_end:
0926: 22                    ret
                   cinf_restart:
0927: D0 E0                 pop     acc
0929: 80 A1                 sjmp    cin_filter
                   cinf_notpg:
092B: D0 E0                 pop     acc
                   ; unrecognized escape... eat up everything that's left comin
                   ; quickly, then begin looking again
                   cinf_consume:
092D: 31 3A                 acall   cinf_wait
092F: 30 98 9A              jnb     ri, cin_filter
0932: 12 00 67              lcall   cin
0935: B4 1B F5              cjne    a, #esc_char, cinf_consume
0938: 80 A1                 sjmp    cinf2
                   
                   ; this thing waits for a character to be received for approx
                   ; 4 character transmit time periods. It returns immedately
                   ; or after the entire wait time. It does not remove the char
                   ; from the buffer, so ri should be checked to see if somethi
                   ; actually did show up while it was waiting
093A:                       .equ    char_delay, 4           ; number of char xm
                   cinf_wait:
093A: EA                    mov     a, r2
093B: C0 E0                 push    acc
093D: 7A 14                 mov     r2, #char_delay*5
                   cinfw2:
093F: E5 8C                 mov     a, th0
                   cinfw3:
0941: 20 98 05              jb      ri, cinfw4
0944: 04                    inc     a
0945: 70 FA                 jnz     cinfw3
0947: DA F6                 djnz    r2, cinfw2
                   cinfw4:
0949: D0 E0                 pop     acc
094B: FA                    mov     r2, a
094C: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                   ; prints the unsigned 8 bit value in Acc in base 10
                   
                   pint8u:
094D: C0 F0                 push    b
094F: C0 E0                 push    acc
0951: 80 13                 sjmp    pint8b
                   
                   ;---------------------------------------------------------;
                   
                   ; prints the signed 8 bit value in Acc in base 10
                   
                   pint8:
0953: C0 F0                 push    b
0955: C0 E0                 push    acc
0957: 30 E7 0C              jnb     acc.7, pint8b
095A: 74 2D                 mov     a, #'-'
095C: 12 00 73              lcall   cout
095F: D0 E0                 pop     acc
0961: C0 E0                 push    acc
0963: F4                    cpl     a
0964: 24 01                 add     a, #1
                   pint8b:
0966: 75 F0 64              mov     b, #100
0969: 84                    div     ab
096A: D2 D5                 setb    f0
096C: 60 07                 jz      pint8c
096E: C2 D5                 clr     f0
0970: 24 30                 add     a, #'0'
0972: 12 00 73              lcall   cout
                   pint8c:
0975: E5 F0                 mov     a, b
0977: 75 F0 0A              mov     b, #10
097A: 84                    div     ab
097B: 30 D5 02              jnb     f0, pint8d
097E: 60 05                 jz      pint8e
                   pint8d:
0980: 24 30                 add     a, #'0'
0982: 12 00 73              lcall   cout
                   pint8e:
0985: E5 F0                 mov     a, b
0987: 24 30                 add     a, #'0'
0989: 12 00 73              lcall   cout
098C: D0 E0                 pop     acc
098E: D0 F0                 pop     b
0990: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                   ; print 16 bit unsigned integer in DPTR, using base 10.
                   ; warning, destroys r2, r3, r4, r5, psw.5
                   
                   pint16u:
0991: C0 E0                 push    acc
0993: E8                    mov     a, r0
0994: C0 E0                 push    acc
0996: C2 D5                 clr     psw.5
0998: AA 82                 mov     r2, dpl
099A: AB 83                 mov     r3, dph
                   
                   pint16a:
099C: 7C 10                 mov     r4, #16                 ; ten-thousands dig
099E: 7D 27                 mov     r5, #39
09A0: 31 EF                 acall   pint16x
09A2: 60 07                 jz      pint16b
09A4: 24 30                 add     a, #'0'
09A6: 12 00 73              lcall   cout
09A9: D2 D5                 setb    psw.5
                   
                   pint16b:
09AB: 7C E8                 mov     r4, #232        ; thousands digit
09AD: 7D 03                 mov     r5, #3
09AF: 31 EF                 acall   pint16x
09B1: 70 03                 jnz     pint16c
09B3: 30 D5 07              jnb     psw.5, pint16d
                   pint16c:
09B6: 24 30                 add     a, #'0'
09B8: 12 00 73              lcall   cout
09BB: D2 D5                 setb    psw.5
                   
                   pint16d:
09BD: 7C 64                 mov     r4, #100        ; hundreds digit
09BF: 7D 00                 mov     r5, #0
09C1: 31 EF                 acall   pint16x
09C3: 70 03                 jnz     pint16e
09C5: 30 D5 07              jnb     psw.5, pint16f
                   pint16e:
09C8: 24 30                 add     a, #'0'
09CA: 12 00 73              lcall   cout
09CD: D2 D5                 setb    psw.5
                   
                   pint16f:
09CF: EA                    mov     a, r2           ; tens digit
09D0: AB F0                 mov     r3, b
09D2: 75 F0 0A              mov     b, #10
09D5: 84                    div     ab
09D6: 70 03                 jnz     pint16g
09D8: 30 D5 05              jnb     psw.5, pint16h
                   pint16g:
09DB: 24 30                 add     a, #'0'
09DD: 12 00 73              lcall   cout
                   
                   pint16h:
09E0: E5 F0                 mov     a, b            ; and finally the ones digi
09E2: 8B F0                 mov     b, r3
09E4: 24 30                 add     a, #'0'
09E6: 12 00 73              lcall   cout
                   
09E9: D0 E0                 pop     acc
09EB: F8                    mov     r0, a
09EC: D0 E0                 pop     acc
09EE: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                   ; ok, it's a cpu hog and a nasty way to divide, but this cod
                   ; requires only 21 bytes! Divides r2-r3 by r4-r5 and leaves
                   ; quotient in r2-r3 and returns remainder in acc. If Intel
                   ; had made a proper divide, then this would be much easier.
                   
                   pint16x:
09EF: 78 00                 mov     r0, #0
                   pint16y:
09F1: 08                    inc     r0
09F2: C3                    clr     c
09F3: EA                    mov     a, r2
09F4: 9C                    subb    a, r4
09F5: FA                    mov     r2, a
09F6: EB                    mov     a, r3
09F7: 9D                    subb    a, r5
09F8: FB                    mov     r3, a
09F9: 50 F6                 jnc     pint16y
09FB: 18                    dec     r0
09FC: EA                    mov     a, r2
09FD: 2C                    add     a, r4
09FE: FA                    mov     r2, a
09FF: EB                    mov     a, r3
0A00: 3D                    addc    a, r5
0A01: FB                    mov     r3, a
0A02: E8                    mov     a, r0
0A03: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                   ; pcstr prints the compressed strings. A dictionary of 128 w
                   ; stored in 4 bit packed binary format.  When pcstr finds a 
                   ; a string with the high bit set, it prints the word from th
                   ; A few bytes have special functions and everything else pri
                   ; it were an ordinary string.
                   
                   ; special codes for pcstr:
                   ;    0 = end of string
                   ;   13 = CR/LF
                   ;   14 = CR/LF and end of string
                   ;   31 = next word code should be capitalized
                   
                   pcstr:
0A04: C0 E0                 push    acc
0A06: E8                    mov     a, r0
0A07: C0 E0                 push    acc
0A09: E9                    mov     a, r1
0A0A: C0 E0                 push    acc
0A0C: EC                    mov     a, r4
0A0D: C0 E0                 push    acc
0A0F: D2 D1                 setb    psw.1
0A11: D2 D5                 setb    psw.5
                   pcstr1:
0A13: E0                    movx    a, @dptr
0A14: A3                    inc     dptr
0A15: 60 25                 jz      pcstr2
0A17: 20 E7 2E              jb      acc.7, decomp
0A1A: 54 7F                 anl     a, #0x7F
                   pcstrs1:
0A1C: B4 0D 07              cjne    a, #13, pcstrs2
0A1F: 12 00 7D              lcall   newline
0A22: D2 D1                 setb    psw.1
0A24: 80 ED                 sjmp    pcstr1
                   pcstrs2:
0A26: B4 1F 04              cjne    a, #31, pcstrs3
0A29: C2 D5                 clr     psw.5
0A2B: 80 E6                 sjmp    pcstr1
                   pcstrs3:
0A2D: B4 0E 05              cjne    a, #14, pcstrs4
0A30: 12 00 7D              lcall   newline
0A33: 80 07                 sjmp    pcstr2
                   pcstrs4:
0A35: C2 D1                 clr     psw.1
0A37: 12 00 73              lcall   cout
0A3A: 80 D7                 sjmp    pcstr1
                   pcstr2:
0A3C: D0 E0                 pop     acc
0A3E: FC                    mov     r4, a
0A3F: D0 E0                 pop     acc
0A41: F9                    mov     r1, a
0A42: D0 E0                 pop     acc
0A44: F8                    mov     r0, a
0A45: D0 E0                 pop     acc
0A47: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                   ; dcomp actually takes care of printing a word from the dict
                   ; dptr = position in packed words table
                   ; r4=0 if next nibble is low, r4=255 if next nibble is high
                   
                   decomp:
0A48: 54 7F                 anl     a, #0x7F
0A4A: F8                    mov     r0, a           ; r0 counts which word
0A4B: 20 D1 03              jb      psw.1, decomp1  ; avoid leading space if fi
0A4E: 12 00 71              lcall   space
                   decomp1:
0A51: C2 D1                 clr     psw.1
0A53: C0 82                 push    dpl
0A55: C0 83                 push    dph
0A57: 90 0A BC              mov     dptr, #words
0A5A: 7C 00                 mov     r4, #0
0A5C: E8                    mov     a, r0
0A5D: 60 07                 jz      dcomp3
                            ; here we must seek past all the words in the table
                            ; that come before the one we're supposed to print
0A5F: F9                    mov     r1, a
                   dcomp2:
0A60: 51 AC                 acall   get_next_nibble
0A62: 70 FC                 jnz     dcomp2
                            ; when we get here, a word has been skipped... keep
                            ; this until we're pointing to the correct one
0A64: D9 FA                 djnz    r1, dcomp2
                   dcomp3:
                            ; now we're pointing to the correct word, so all we
                            ; to do is print it out
0A66: 51 AC                 acall   get_next_nibble
0A68: 60 3C                 jz      dcomp_end
0A6A: B4 0F 12              cjne    a, #15, dcomp4
                            ; the character is one of the 12 least commonly use
0A6D: 51 AC                 acall   get_next_nibble
0A6F: 04                    inc     a
0A70: 83                    movc    a, @a+pc
0A71: 80 1E                 sjmp    dcomp5
0A73: 68 66 77 67 
      79 62 78 76 
      6B 71 6A 7A 
                            .db     "hfwgybxvkqjz"
                   dcomp4:
                            ; the character is one of the 14 most commonly used
0A7F: 04                    inc     a
0A80: 83                    movc    a, @a+pc
0A81: 80 0E                 sjmp    dcomp5
0A83: 65 74 61 72 
      6E 69 73 6F 
      6C 75 6D 70 
      64 63                 .db     "etarnisolumpdc"
                   dcomp5:
                            ; decide if it should be uppercase or lowercase
0A91: A2 D5                 mov     c, psw.5
0A93: 92 E5                 mov     acc.5, c
0A95: D2 D5                 setb    psw.5
0A97: B8 14 02              cjne    r0, #20, dcomp6
0A9A: C2 E5                 clr     acc.5
                   dcomp6:
0A9C: B8 0C 02              cjne    r0, #12, dcomp7
0A9F: C2 E5                 clr     acc.5
                   dcomp7:
0AA1: 12 00 73              lcall   cout
0AA4: 80 C0                 sjmp    dcomp3
                   dcomp_end:
0AA6: D0 83                 pop     dph
0AA8: D0 82                 pop     dpl
0AAA: 41 13                 ajmp    pcstr1
                   
                   get_next_nibble:
                            ; ... and update dptr and r4, of course
0AAC: E0                    movx    a, @dptr
0AAD: BC 00 05              cjne    r4, #0, gnn2
0AB0: 7C FF                 mov     r4, #255
0AB2: 54 0F                 anl     a, #00001111b
0AB4: 22                    ret
                   gnn2:
0AB5: 7C 00                 mov     r4, #0
0AB7: A3                    inc     dptr
0AB8: C4                    swap    a
0AB9: 54 0F                 anl     a, #00001111b
0ABB: 22                    ret
                   
                   ;---------------------------------------------------------;
                   ;                                                          ;
                   ;         Here begins the data tables and strings          ;
                   ;                                                          ;
                   ;---------------------------------------------------------;
                   
                   ; this is the dictionary of 128 words used by pcstr.
                   
                   words:
0ABC: 82 90 E8 23 
      86 05 4C F8 
                            .db     0x82, 0x90, 0xE8, 0x23, 0x86, 0x05, 0x4C, 0
0AC4: 44 B3 B0 B1 
      48 5F F0 11 
                            .db     0x44, 0xB3, 0xB0, 0xB1, 0x48, 0x5F, 0xF0, 0
0ACC: 7F A0 15 7F 
      1C 2E D1 40 
                            .db     0x7F, 0xA0, 0x15, 0x7F, 0x1C, 0x2E, 0xD1, 0
0AD4: 5A 50 F1 03 
      BF BA 0C 2F 
                            .db     0x5A, 0x50, 0xF1, 0x03, 0xBF, 0xBA, 0x0C, 0
0ADC: 96 01 8D 3F 
      95 38 0D 6F 
                            .db     0x96, 0x01, 0x8D, 0x3F, 0x95, 0x38, 0x0D, 0
0AE4: 5F 12 07 71 
      0E 56 2F 48 
                            .db     0x5F, 0x12, 0x07, 0x71, 0x0E, 0x56, 0x2F, 0
0AEC: 3B 62 58 20 
      1F 76 70 32 
                            .db     0x3B, 0x62, 0x58, 0x20, 0x1F, 0x76, 0x70, 0
0AF4: 24 40 B8 40 
      E1 61 8F 01 
                            .db     0x24, 0x40, 0xB8, 0x40, 0xE1, 0x61, 0x8F, 0
0AFC: 34 0B CA 89 
      D3 C0 A3 B9 
                            .db     0x34, 0x0B, 0xCA, 0x89, 0xD3, 0xC0, 0xA3, 0
0B04: 58 80 04 F8 
      02 85 60 25 
                            .db     0x58, 0x80, 0x04, 0xF8, 0x02, 0x85, 0x60, 0
0B0C: 91 F0 92 73 
      1F 10 7F 12 
                            .db     0x91, 0xF0, 0x92, 0x73, 0x1F, 0x10, 0x7F, 0
0B14: 54 93 10 44 
      48 07 D1 26 
                            .db     0x54, 0x93, 0x10, 0x44, 0x48, 0x07, 0xD1, 0
0B1C: 56 4F D0 F6 
      64 72 E0 B8 
                            .db     0x56, 0x4F, 0xD0, 0xF6, 0x64, 0x72, 0xE0, 0
0B24: 3B D5 F0 16 
      4F 56 30 6F 
                            .db     0x3B, 0xD5, 0xF0, 0x16, 0x4F, 0x56, 0x30, 0
0B2C: 48 02 5F A8 
      20 1F 01 76 
                            .db     0x48, 0x02, 0x5F, 0xA8, 0x20, 0x1F, 0x01, 0
0B34: 30 D5 60 25 
      41 A4 2C 60 
                            .db     0x30, 0xD5, 0x60, 0x25, 0x41, 0xA4, 0x2C, 0
0B3C: 05 6F 01 3F 
      26 1F 30 07 
                            .db     0x05, 0x6F, 0x01, 0x3F, 0x26, 0x1F, 0x30, 0
0B44: 8E 1D F0 63 
      99 F0 42 B8 
                            .db     0x8E, 0x1D, 0xF0, 0x63, 0x99, 0xF0, 0x42, 0
0B4C: 20 1F 23 30 
      02 7A D1 60 
                            .db     0x20, 0x1F, 0x23, 0x30, 0x02, 0x7A, 0xD1, 0
0B54: 2F F0 F6 05 
      8F 93 1A 50 
                            .db     0x2F, 0xF0, 0xF6, 0x05, 0x8F, 0x93, 0x1A, 0
0B5C: 28 F0 82 04 
      6F A3 0D 3F 
                            .db     0x28, 0xF0, 0x82, 0x04, 0x6F, 0xA3, 0x0D, 0
0B64: 1F 51 40 23 
      01 3E 05 43 
                            .db     0x1F, 0x51, 0x40, 0x23, 0x01, 0x3E, 0x05, 0
0B6C: 01 7A 01 17 
      64 93 30 2A 
                            .db     0x01, 0x7A, 0x01, 0x17, 0x64, 0x93, 0x30, 0
0B74: 08 8C 24 30 
      99 B0 F3 19 
                            .db     0x08, 0x8C, 0x24, 0x30, 0x99, 0xB0, 0xF3, 0
0B7C: 60 25 41 35 
      09 8E CB 19 
                            .db     0x60, 0x25, 0x41, 0x35, 0x09, 0x8E, 0xCB, 0
0B84: 12 30 05 1F 
      31 1D 04 14 
                            .db     0x12, 0x30, 0x05, 0x1F, 0x31, 0x1D, 0x04, 0
0B8C: 4F 76 12 04 
      AB 27 90 56 
                            .db     0x4F, 0x76, 0x12, 0x04, 0xAB, 0x27, 0x90, 0
0B94: 01 2F A8 D5 
      F0 AA 26 20 
                            .db     0x01, 0x2F, 0xA8, 0xD5, 0xF0, 0xAA, 0x26, 0
0B9C: 5F 1C F0 F3 
      61 FE 01 41 
                            .db     0x5F, 0x1C, 0xF0, 0xF3, 0x61, 0xFE, 0x01, 0
0BA4: 73 01 27 C1 
      C0 84 8F D6 
                            .db     0x73, 0x01, 0x27, 0xC1, 0xC0, 0x84, 0x8F, 0
0BAC: 01 87 70 56 
      4F 19 70 1F 
                            .db     0x01, 0x87, 0x70, 0x56, 0x4F, 0x19, 0x70, 0
0BB4: A8 D9 90 76 
      02 17 43 FE 
                            .db     0xA8, 0xD9, 0x90, 0x76, 0x02, 0x17, 0x43, 0
0BBC: 01 C1 84 0B 
      15 7F 02 8B 
                            .db     0x01, 0xC1, 0x84, 0x0B, 0x15, 0x7F, 0x02, 0
0BC4: 14 30 8F 63 
      39 6F 19 F0 
                            .db     0x14, 0x30, 0x8F, 0x63, 0x39, 0x6F, 0x19, 0
0BCC: 11 C9 10 6D 
      02 3F 91 09 
                            .db     0x11, 0xC9, 0x10, 0x6D, 0x02, 0x3F, 0x91, 0
0BD4: 7A 41 D0 BA 
      0C 1D 39 5F 
                            .db     0x7A, 0x41, 0xD0, 0xBA, 0x0C, 0x1D, 0x39, 0
0BDC: 07 F2 11 17 
      20 41 6B 35 
                            .db     0x07, 0xF2, 0x11, 0x17, 0x20, 0x41, 0x6B, 0
0BE4: 09 F7 75 12 
      0B A7 CC 48 
                            .db     0x09, 0xF7, 0x75, 0x12, 0x0B, 0xA7, 0xCC, 0
0BEC: 02 3F 64 12 
      A0 0C 27 E3 
                            .db     0x02, 0x3F, 0x64, 0x12, 0xA0, 0x0C, 0x27, 0
0BF4: 9F C0 14 77 
      70 11 40 71 
                            .db     0x9F, 0xC0, 0x14, 0x77, 0x70, 0x11, 0x40, 0
0BFC: 21 C0 68 25 
      41 F0 62 7F 
                            .db     0x21, 0xC0, 0x68, 0x25, 0x41, 0xF0, 0x62, 0
0C04: D1 D0 21 E1 
      62 58 B0 F3 
                            .db     0xD1, 0xD0, 0x21, 0xE1, 0x62, 0x58, 0xB0, 0
0C0C: 05 1F 73 30 
      77 B1 6F 19 
                            .db     0x05, 0x1F, 0x73, 0x30, 0x77, 0xB1, 0x6F, 0
0C14: E0 19 43 E0 
      58 2F F6 A4 
                            .db     0xE0, 0x19, 0x43, 0xE0, 0x58, 0x2F, 0xF6, 0
0C1C: 14 D0 23 03 
      FE 31 F5 14 
                            .db     0x14, 0xD0, 0x23, 0x03, 0xFE, 0x31, 0xF5, 0
0C24: 30 99 F8 03 
      3F 64 22 51 
                            .db     0x30, 0x99, 0xF8, 0x03, 0x3F, 0x64, 0x22, 0
0C2C: 60 25 41 2F 
      E3 01 56 27 
                            .db     0x60, 0x25, 0x41, 0x2F, 0xE3, 0x01, 0x56, 0
0C34: 93 09 FE 11 
      FE 79 BA 60 
                            .db     0x93, 0x09, 0xFE, 0x11, 0xFE, 0x79, 0xBA, 0
0C3C: 75 42 EA 62 
      58 A0 E5 1F 
                            .db     0x75, 0x42, 0xEA, 0x62, 0x58, 0xA0, 0xE5, 0
0C44: 53 4F D1 C0 
      A3 09 42 53 
                            .db     0x53, 0x4F, 0xD1, 0xC0, 0xA3, 0x09, 0x42, 0
0C4C: F7 12 04 62 
      1B 30 F5 05 
                            .db     0xF7, 0x12, 0x04, 0x62, 0x1B, 0x30, 0xF5, 0
0C54: F7 69 0C 35 
      1B 70 82 2F 
                            .db     0xF7, 0x69, 0x0C, 0x35, 0x1B, 0x70, 0x82, 0
0C5C: 2F 14 4F 51 
      C0 64 25 00 
                            .db     0x2F, 0x14, 0x4F, 0x51, 0xC0, 0x64, 0x25, 0
                   
                   ; STR
                   
                   logon1:
0C64: 57 65 6C 63 
      6F 6D 65 80 
      94 32 20 76 
      32 2E 31 2C 
      20 62 79 1F 
      F8 1F FE 0D 
      0E                    .db     "Welcome", 128, 148, "2 v2.1, by", 31, 248,
                   
                   logon2:
0C7D: 20 20 53 65 
      65 94 32 2E 
      44 4F 43 2C 
      94 32 2E 45 
      51 55 A4              .db     32, 32, "See", 148, "2.DOC,", 148, "2.EQU",
0C90: 94 32 2E 48 
      44 52 B4 D5 
      8D 2E 0E              .db     148, "2.HDR", 180, 213, 141, '.', 14
                   
                   abort:
0C9B: 20 1F 9E 1F 
      A0 21 0D 0E 
                            .db     ' ', 31, 158, 31, 160, '!', 13, 14
                   
                   prompt1:
0CA3: 94 32 20 4C 
      6F 63 3A 00 
                            .db     148, "2 Loc:", 0
                   
                   prompt2:
0CAB: 20 3E A0              .db     " >", 160
                   
                   prompt3:
0CAE: 86 CA 82 28 
      00                    .db     134, 202, 130, '(', 0
                   
                   prompt4:
0CB3: 29 2C 95 8C 
      80 C8 3A 20 
      00                    .db     "),", 149, 140, 128, 200, ": ", 0
                   
                   prompt5:
0CBC: 1F 97 82 C3 
      73 C7 A6 83 
      2C                    .db     31, 151, 130, 195, 's', 199, 166, 131, ','
0CC5: BA 20 4A 55 
      4D 50 80 86 
      A1 72 82 0D 
      0E                    .db     186, " JUMP", 128, 134, 161, 'r', 130, 13, 
                   
                   prompt6:
0CD2: 0D 0D 1F 87 
      83 81 3A 20 
      00                    .db     13, 13, 31, 135, 131, 129, ": ", 0
                   
                   prompt7:
0CDB: 1F E4 FB 20 
      6B 65 79 3A 
      20 00                 .db     31, 228, 251, " key: ", 0
                   
                   prompt8:
0CE5: 0D 0D 1F 88 
      80 83 81 20 
      28 00                 .db     13, 13, 31, 136, 128, 131, 129, " (", 0
                   
                   prompt9:
0CEF: 0D 0D 1F 82 
      1F FD 00              .db     13, 13, 31, 130, 31, 253, 0
                   
                   prompt9b:
0CF6: 1F 81 20 20 
      20 20 20 1F 
      C9 0E                 .db     31, 129, 32, 32, 32, 32, 32, 31, 201, 14
                   
                   prompt10:
0D00: 29 20 1F 87 
      1F B2 3A 20 
      00                    .db     ") ", 31, 135, 31, 178, ": ", 0
                   
                   beg_str:
0D09: 46 69 72 73 
      74 1F 81 3A 
      20 00                 .db     "First", 31, 129, ": ", 0
                   
                   end_str:
0D13: 4C 61 73 74 
      1F 81 3A 20 
      20 00                 .db     "Last", 31, 129, ':', 32, 32, 0
                   
                   sure:
0D1D: 1F B9 A1 20 
      73 75 72 65 
      3F 00                 .db     31, 185, 161, " sure?", 0
                   
                   edits1:
0D27: 0D 0D 1F 9C 
      9A 92 2C 8C 
      80 C8 0E              .db     13, 13, 31, 156, 154, 146, ',', 140, 128, 2
                   
                   edits2:
0D32: 20 20 1F 9C 
      C1 2C 8E 81 
      F7 0D 0E              .db     "  ", 31, 156, 193, ',', 142, 129, 247, 13,
                   
                   dnlds1:
0D3D: 0D 0D 1F 9F 
      20 61 73 63 
      69 69 F9 96 
      1F 98 84 89 
                            .db     13, 13, 31, 159, " ascii", 249, 150, 31, 15
0D4D: 2C 95 8C 80 
      A0 0D 0E              .db     ',', 149, 140, 128, 160, 13, 14
                   
                   dnlds2:
0D54: 0D 1F 8A A0 
      65 64 0D 0E 
                            .db     13, 31, 138, 160, "ed", 13, 14
                   
                   dnlds3:
0D5C: 0D 1F 8A C1 
      64 0D 0E              .db     13, 31, 138, 193, 'd', 13, 14
                   
                   dnlds4:
0D63: 53 75 6D 6D 
      61 72 79 3A 
      0E                    .db     "Summary:", 14
                   
                   dnlds5:
0D6C: 20 C6 73 91 
      64 0E                 .db     ' ', 198, 's', 145, 'd', 14
                   
                   dnlds6a:
0D72: 20 8B 91 64 
      0E                    .db     ' ', 139, 145, 'd', 14
                   
                   dnlds6b:
0D77: 20 8B 20 77 
      72 69 74 74 
      65 6E 0E              .db     ' ', 139, " written", 14
                   
                   dnlds7:
0D82: 1F 9B 3A 0E 
                            .db     31, 155, ':', 14
                   
                   dnlds8:
0D86: 20 8B 20 75 
      6E 61 62 6C 
      65 80 20 77 
      72 69 74 65 
      0E                    .db     ' ', 139, " unable", 128, " write", 14
                   
                   dnlds9:
0D97: 20 20 62 61 
      64 F5 73 0E 
                            .db     32, 32, "bad", 245, 's', 14
                   
                   dnlds10:
0D9F: 20 85 9F 96 
      C6 0E                 .db     ' ', 133, 159, 150, 198, 14
                   
                   dnlds11:
0DA5: 20 85 84 9D 
      0E                    .db     ' ', 133, 132, 157, 14
                   
                   dnlds12:
0DAA: 20 85 20 6E 
      6F 6E 84 9D 
      0E                    .db     ' ', 133, " non", 132, 157, 14
                   
                   dnlds13:
0DB3: 1F 97 9B 20 
      64 65 74 65 
      63 74 65 64 
      0D 0E                 .db     31, 151, 155, " detected", 13, 14
                   
                   runs1:
0DC1: 0D 86 6E 69 
      6E 67 82 3A 
      0D 0E                 .db     13, 134, "ning", 130, ':', 13, 14
                   
                   uplds3:
0DCB: 0D 0D 53 65 
      6E 64 69 6E 
      67 1F 98 84 
      89 AC 20 20 
      00                    .db     13, 13, "Sending", 31, 152, 132, 137, 172, 
                   
                   uplds4:
0DDC: 20 80 20 20 
      00                    .db     ' ', 128, 32, 32, 0
                   
                   help1txt:
0DE1: 0D 0D 53 74 
      61 6E 64 61 
      72 64 1F 9E 
      73 0E                 .db     13, 13, "Standard", 31, 158, 's', 14
                   
                   help2txt:
0DEF: 1F DA 1F F4 
      65 64 1F 9E 
      73 0E                 .db     31, 218, 31, 244, "ed", 31, 158, 's', 14
                   
                   type1:
0DF9: 1F 9A 9E 00 
                            .db     31, 154, 158, 0
                   
                   type2:
0DFD: 1F 82 00              .db     31, 130, 0
                   
                   type4:
0E00: 1F 8F 1F E2 
      1F AA 00              .db     31, 143, 31, 226, 31, 170, 0
                   
                   type5:
0E07: 3F 3F 3F 00 
                            .db     "???", 0
                   
                   help_cmd2:
0E0B: 1F D7 00              .db     31, 215, 0
                   
                   help_cmd:
0E0E: 1F 8E D7 D1 
      00                    .db     31, 142, 215, 209, 0
                   
                   dir_cmd:
0E13: 1F D1 82 73 
      00                    .db     31, 209, 130, 's', 0
                   
                   run_cmd:
0E18: 1F 86 82 00 
                            .db     31, 134, 130, 0
                   
                   dnld_cmd:
0E1C: 1F 8A 00              .db     31, 138, 0
                   
                   upld_cmd:
0E1F: 1F 93 00              .db     31, 147, 0
                   
                   nloc_cmd:
0E22: 1F 87 81 00 
                            .db     31, 135, 129, 0
                   
                   jump_cmd:
0E26: 1F 88 80 83 
      81 00                 .db     31, 136, 128, 131, 129, 0
                   
                   dump_cmd:
0E2C: 1F 84 DB 9A 
      83 00                 .db     31, 132, 219, 154, 131, 0
                   
                   intm_cmd:
0E32: 1F 84 DB C0 
      83 00                 .db     31, 132, 219, 192, 131, 0
                   
                   edit_cmd:
0E38: 1F 9C 9A 92 
      00                    .db     31, 156, 154, 146, 0
                   
                   clrm_cmd:
0E3D: 1F ED 83 00 
                            .db     31, 237, 131, 0
                   
                   crc16_cmd:
0E41: 43 61 6C 63 
      75 6C 61 74 
      65 20 43 52 
      43 31 36 00 
                            .db     "Calculate CRC16", 0
                            
                   crc16_res:
0E51: 43 52 43 31 
      36 20 3D 20 
      00                    .db     "CRC16 = ", 0
                            
                   eio77_cmd:
0E5A: 45 6E 61 62 
      6C 65 20 6E 
      43 53 49 4F 
      37 37 00              .db     "Enable nCSIO77", 0
                   
                   dio77_cmd:
0E69: 44 69 73 61 
      62 6C 65 20 
      6E 43 53 49 
      4F 37 37 00 
                            .db     "Disable nCSIO77", 0
                   
