                   ; PAULMON2, a user-friendly 8051 monitor, by Paul Stoffregen
                   ; Please email comments, suggestions, bugs to paul@pjrc.com
                   
                   ; Version 2.1
                   ;        Some code size improvements, contributed by Alexand
                   ;        Download can now start from main menu prompt
                   
                   ; Version 2.1ab
                   ;        Extensive mods by Atanas Bachvaroff <bachvaroff@gma
                   
                   ; It's free. PAULMON2 is in the public domain. You may copy
                   ; sections of code from PAULMON2 into your own programs, eve
                   ; for commercial purposes. PAULMON2 should only be distribut
                   ; free of charge, but may be bundled as 'value-added' with o
                   ; products, such as development boards, CDROMs, etc. Please
                   ; distribute the PAULMON2.DOC file and other files, not just
                   ; the object code!
                   
                   ; The PAULMON2.EQU and PAULMON2.HDR files contain valuable
                   ; information that could help you to write programs for use
                   ; with PAULMON2.
                   
                   ; PAULMON2 is in the public domain. PAULMON2 is distributed 
                   ; the hope that it will be useful, but without any warranty;
                   ; without even the implied warranty of merchantability or fi
                   ; for a particular purpose. 
                   
                   ; You are probably reading this code to see what it looks li
                   ; and possibly learn something, or to modify it for some rea
                   ; Either is ok, but please remember that this code uses a nu
                   ; of tricks to cram all the functionality into just 4k. As a
                   ; result, the code can be difficult to read, and adding new
                   ; features can be very difficult without growing beyond 4k. 
                   ; add or modify commands in PAULMON2, please consider using 
                   ; "external command" functionality. It is easier to develop
                   ; new commands this way, and you can distribute them to othe
                   ; users. Email paul@pjrc.com if you have new PAULMON2
                   ; commands to contribute to others. Details about adding new
                   ; commands to PAULMON2 (with examples) can be found at:
                   
                   ; http://www.pjrc.com/tech/8051/pm2_docs/addons.html
                   
                   ;---------------------------------------------------------;
                   ;                                                          ;
                   ;            PAULMON2's default configuration              ;
                   ;                                                          ;
                   ;---------------------------------------------------------;
                   
                   ;---------------------------------------------------------;
                   ; These two parameters control where PAULMON2 will be assemb
                   ; and where it will attempt to LJMP at the interrupt vector 
0000:              .equ     base, 0x0000            ; location for PAULMON2
0000:              .equ     vector, 0x2000          ; location to LJMP interrup
                   ;---------------------------------------------------------;
                   
                   ;---------------------------------------------------------;
                   ; These three parameters tell PAULMON2 where the user's memo
                   ; installed. "bmem" and "emem" define the space that will be
                   ; for program headers, user installed commands, start-up pro
                   ; "bmem" and "emem" should be use so they exclude memory are
                   ; perphreal devices may be mapped, as reading memory from an
                   ; may reconfigure it unexpectedly.
0000:              .equ     pgm, 0x2000             ; default location for the 
0000:              .equ     bmem, 0x1000            ; where is the beginning of
0000:              .equ     emem, 0xdfff            ; end of the memory to sear
                   ;---------------------------------------------------------;
                   
                   ;---------------------------------------------------------;
0000:              .equ     psw_init, 0             ; value for psw (which reg 
0000:              .equ     p2_init, 0xff           ; boot time default page is
0000:              .equ     sp_init, 0x17           ; location of the stack
0000:              .equ     sp_reset, 0x07          ; stack on reset
0000:              .equ     mctrl_reset, 11111111b  ; memory controller (P1) on
0000:              .equ     mctrl_shadow, 11111110b         ; memory controller
0000:              .equ     dnld_parm, 0x08                 ; block of 16 bytes
                   ; |00|01|02|03|04|05|06|07|08|09|0a|0b|0c|0d|0e|0f|
                   ;                         \__ sp_reset
                   ; |10|11|12|13|14|15|16|17|
                   ;                         \__ sp_init
                   ;
                   ; |r0|r1|r2|r3|r4|r5|r6|r7|  .  .  .  dnld  .  .  |
                   ; |  .  .  .  dnld  .  .  |
                   ;---------------------------------------------------------;
                   
                   ;---------------------------------------------------------;
                   ; bc = 65536 - (OSC / 32) / baud
                   ;---------------------------------------------------------;
                   ; 0xfffa @ 57600bps @ 11.059MHz
                   ;.equ    bc, 0xfffa
                   ; 0xfff7 @ 38400bps @ 11.059MHz
                   ;.equ    bc, 0xfff7
                   ; 0xffee @ 19200bps @ 11.059MHz
                   ;.equ    bc, 0xffee
                   ; 0xffdc @ 9600bps @ 11.059MHz
                   ;.equ    bc, 0xffdc
                   ; 0xfff7 @ 57600bps @ 16.5888MHz
0000:              .equ     bc, 0xfff7
                   ; 0xffee @ 28800bps @ 16.5888MHz
                   ;.equ    bc, 0xffee
                   ; 0xffe5 @ 19200bps @ 16.5888MHz
                   ;.equ    bc, 0xffe5
                   ; 0xffca @ 9600bps @ 16.5888MHz
                   ;.equ    bc, 0xffca
                   ;---------------------------------------------------------;
                   
                   ;---------------------------------------------------------;
                   ; Key command definitions
0000:              .equ     help_key, '?'           ; help screen
0000:              .equ     dir_key, 'M'            ; directory
0000:              .equ     run_key, 'R'            ; run program
0000:              .equ     dnld_key, 'D'           ; download
0000:              .equ     upld_key, 'U'           ; upload
0000:              .equ     nloc_key, 'N'           ; new memory location
0000:              .equ     jump_key, 'J'           ; jump to memory location
0000:              .equ     dump_key, 'H'           ; hex dump memory
0000:              .equ     intm_key, 'I'           ; hex dump internal memory
0000:              .equ     edit_key, 'E'           ; edit memory
0000:              .equ     clrm_key, 'C'           ; clear memory
0000:              .equ     crc16_key, 'W'          ; calculate crc16
0000:              .equ     baud_key, 'B'           ; reset baudrate
0000:              .equ     eio77_key, '<'          ; enable IO space 0xe000-0x
0000:              .equ     dio77_key, '>'          ; disable IO space 0xe000-0
                   ;---------------------------------------------------------;
                   
                   ;---------------------------------------------------------;
                   ; Common ASCII codes
0000:              .equ     LF, '\n'
0000:              .equ     CR, '\r'
0000:              .equ     ESC, 27
0000:              .equ     SPACE, ' '
                   ;---------------------------------------------------------;
                   
                   ;---------------------------------------------------------;
                   ;                                                          ;
                   ;                     Interrupt Vectors                    ;
                   ;                                                          ;
                   ;---------------------------------------------------------;
                   
                   ; spare the flash by filling the space between vectors
                   ; with "mov r7, a" / 0xff in binary
                   
                   ;------ RESET --------------------------------------------;
0000:              .org     base
0000: 02 08 F6              ljmp    reset
                   ;------ RESET --------------------------------------------;
                   
                   ;------ IE0_VECTOR ---------------------------------------;
0003:              .org     base + 3
0003: 02 20 03              ljmp    vector + 3
0006: FF                    mov     r7, a
0007: FF                    mov     r7, a
0008: FF                    mov     r7, a
0009: FF                    mov     r7, a
000A: FF                    mov     r7, a
                   ;------ IE0_VECTOR ---------------------------------------;
                   
                   ;------ TF0_VECTOR ---------------------------------------;
000B:              .org     base + 11
000B: 02 20 0B              ljmp    vector + 11
000E: FF                    mov     r7, a
000F: FF                    mov     r7, a
0010: FF                    mov     r7, a
0011: FF                    mov     r7, a
0012: FF                    mov     r7, a
                   ;------ TF0_VECTOR ---------------------------------------;
                   
                   ;------ IE1_VECTOR ---------------------------------------;
0013:              .org     base + 19
0013: 02 20 13              ljmp    vector + 19
0016: FF                    mov     r7, a
0017: FF                    mov     r7, a
0018: FF                    mov     r7, a
0019: FF                    mov     r7, a
001A: FF                    mov     r7, a
                   ;------ IE1_VECTOR ---------------------------------------;
                   
                   ;------ TF1_VECTOR ---------------------------------------;
001B:              .org     base + 27
001B: 02 20 1B              ljmp    vector + 27
001E: FF                    mov     r7, a
001F: FF                    mov     r7, a
0020: FF                    mov     r7, a
0021: FF                    mov     r7, a
0022: FF                    mov     r7, a
                   ;------ TF1_VECTOR ---------------------------------------;
                   
                   ;------ SI0_VECTOR ---------------------------------------;
0023:              .org     base + 35
0023: 02 20 23              ljmp    vector + 35
0026: FF                    mov     r7, a
0027: FF                    mov     r7, a
0028: FF                    mov     r7, a
0029: FF                    mov     r7, a
002A: FF                    mov     r7, a
                   ;------ SI0_VECTOR ---------------------------------------;
                   
                   ;------ TF2_VECTOR --- EX2_VECTOR ------------------------;
002B:              .org     base + 43
002B: 02 20 2B              ljmp    vector + 43
                   ; the jump table follows immediately after the long jump
                   ; so there's no gap
                   ;        mov     r7, a
                   ;        mov     r7, a
                   ;        mov     r7, a
                   ;        mov     r7, a
                   ;        mov     r7, a
                   ;------ TF2_VECTOR --- EX2_VECTOR ------------------------;
                   
                   ;---------------------------------------------------------;
                   ;                                                          ;
                   ;        The jump table for user programs to call          ;
                   ;              subroutines within PAULMON                  ;
                   ;           Update paulmon21.equ accordingly               ;
                   ;                                                          ;
                   ;---------------------------------------------------------;
                   
002E:              .org     base + 46
002E: 21 97                 ajmp    phex1           ; JMP_TABLE 0x2e
0030: 01 76                 ajmp    cout            ; JMP_TABLE 0x30
0032: 01 64                 ajmp    cin             ; JMP_TABLE 0x32
0034: 21 94                 ajmp    phex            ; JMP_TABLE 0x34
0036: 21 A6                 ajmp    phex16          ; JMP_TABLE 0x36
0038: 21 B3                 ajmp    pstr            ; JMP_TABLE 0x38
003A: 01 BA                 ajmp    ghex            ; JMP_TABLE 0x3a
003C: 01 FE                 ajmp    ghex16          ; JMP_TABLE 0x3c
003E: 21 E1                 ajmp    escape          ; JMP_TABLE 0x4e
0040: 21 C6                 ajmp    upper           ; JMP_TABLE 0x40
0042: 02 09 88              ljmp    setbaud                 ; JMP_TABLE 0x42
0045: 02 00 AD              ljmp    pcstr           ; JMP_TABLE 0x45
0048: 01 90                 ajmp    crlf            ; JMP_TABLE 0x48
004A: 02 01 D3              ljmp    lenstr          ; JMP_TABLE 0x4a
004D: 02 09 9D              ljmp    pint8u          ; JMP_TABLE 0x4d
0050: 02 09 A3              ljmp    pint8           ; JMP_TABLE 0x50
0053: 02 09 E1              ljmp    pint16u                 ; JMP_TABLE 0x53
0056: 02 08 85              ljmp    find            ; JMP_TABLE 0x56
0059: 21 7A                 ajmp    asc2hex                 ; JMP_TABLE 0x59
005B: 02 08 15              ljmp    init_crc16      ; JMP_TABLE 0x5b
005E: 02 08 29              ljmp    update_crc16    ; JMP_TABLE 0x5e
0061: 02 08 1E              ljmp    finish_crc16    ; JMP_TABLE 0x61
                   
                   ;---------------------------------------------------------;
                   ;                                                          ;
                   ;               Subroutines for serial I/O                 ;
                   ;                                                          ;
                   ;---------------------------------------------------------;
                   
                   cin:
0064: 30 98 FD              jnb     ri, cin
0067: E5 99                 mov     a, sbuf
0069: C2 98                 clr     ri
006B: 22                    ret
                   
                   cinpoll:
006C: D3                    setb    c
006D: 30 98 05              jnb     ri, cinp0
0070: E5 99                 mov     a, sbuf
0072: C2 98                 clr     ri
0074: C3                    clr     c
                   cinp0:
0075: 22                    ret
                   
                   cout:
0076: 30 99 FD              jnb     ti, cout
0079: C2 99                 clr     ti
007B: F5 99                 mov     sbuf, a
007D: 22                    ret
                            
                   sspace:
007E: C0 E0                 push    acc
0080: 74 20                 mov     a, #SPACE
0082: 11 76                 acall   cout
0084: D0 E0                 pop     acc
0086: 22                    ret
                   
                   dash:
0087: C0 E0                 push    acc
0089: 74 2D                 mov     a, #'-'
008B: 11 76                 acall   cout
008D: D0 E0                 pop     acc
008F: 22                    ret
                   
                   crlf:
0090: C0 E0                 push    acc
0092: 74 0D                 mov     a, #CR
0094: 11 76                 acall   cout
0096: 74 0A                 mov     a, #LF
0098: 11 76                 acall   cout
009A: D0 E0                 pop     acc
009C: 22                    ret
                   
                   cout_sp:
009D: 11 76                 acall   cout
009F: 01 7E                 ajmp    sspace
                   
                   dash_sp:
00A1: 11 87                 acall   dash
00A3: 01 7E                 ajmp    sspace
                   
                   dspace:
00A5: 11 7E                 acall   sspace
00A7: 01 7E                 ajmp    sspace
                   
                   dcrlf:
00A9: 11 90                 acall   crlf
00AB: 01 90                 ajmp    crlf
                   
                   pcstr:
00AD: C0 E0                 push    acc
                   pcstr1:
00AF: E0                    movx    a, @dptr
00B0: A3                    inc     dptr
00B1: 60 04                 jz      pcstr2
00B3: 11 76                 acall   cout
00B5: 80 F8                 sjmp    pcstr1
                   pcstr2:
00B7: D0 E0                 pop     acc
00B9: 22                    ret
                            
                   ;---------------------------------------------------------;
                   
                   ; get 2 digit hex number from serial port
                   ; c = set if ESC pressed, clear otherwise
                   ; psw.5 = set if return w/ no input, clear otherwise
                   
                   ghex:
                   ghex8:
00BA: C2 D5                 clr     psw.5
                   ghex8c:
00BC: 11 64                 acall   cin     ; get first digit
00BE: 31 C6                 acall   upper
00C0: B4 1B 03              cjne    a, #ESC, ghex8f
                   ghex8d:
00C3: D3                    setb    c
00C4: E4                    clr     a
00C5: 22                    ret
                   ghex8f:
00C6: B4 0D 05              cjne    a, #CR, ghex8h
00C9: D2 D5                 setb    psw.5
00CB: C3                    clr     c
00CC: E4                    clr     a
00CD: 22                    ret
                   ghex8h:
00CE: FA                    mov     r2, a
00CF: 31 7A                 acall   asc2hex
00D1: 40 E9                 jc      ghex8c
00D3: CA                    xch     a, r2           ; r2 will hold hex value of
00D4: 11 76                 acall   cout
                   ghex8j:
00D6: 11 64                 acall   cin     ; get second digit
00D8: 31 C6                 acall   upper
00DA: B4 1B 02              cjne    a, #ESC, ghex8k
00DD: 80 E4                 sjmp    ghex8d
                   ghex8k:
00DF: B4 0D 03              cjne    a, #CR, ghex8m
00E2: EA                    mov     a, r2
00E3: C3                    clr     c
00E4: 22                    ret
                   ghex8m:
00E5: B4 08 04              cjne    a, #8, ghex8p
                   ghex8n:
00E8: 11 76                 acall   cout
00EA: 80 D0                 sjmp    ghex8c
                   ghex8p:
00EC: B4 15 02              cjne    a, #21, ghex8q
00EF: 80 F7                 sjmp    ghex8n
                   ghex8q:
00F1: FB                    mov     r3, a
00F2: 31 7A                 acall   asc2hex
00F4: 40 E0                 jc      ghex8j
00F6: CB                    xch     a, r3
00F7: 11 76                 acall   cout
00F9: EA                    mov     a, r2
00FA: C4                    swap    a
00FB: 4B                    orl     a, r3
00FC: C3                    clr     c
00FD: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                   ; carry set if esc pressed
                   ; psw.5 set if return pressed w/ no input
                   
                   ghex16:
00FE: 7A 00                 mov     r2, #0          ; start out with 0
0100: 7B 00                 mov     r3, #0
0102: 7C 04                 mov     r4, #4          ; number of digits left
0104: C2 D5                 clr     psw.5
                   
                   ghex16c:
0106: 11 64                 acall   cin
0108: 31 C6                 acall   upper
010A: B4 1B 07              cjne    a, #ESC, ghex16d
010D: D3                    setb    c               ; handle esc key
010E: E4                    clr     a
010F: F5 83                 mov     dph, a
0111: F5 82                 mov     dpl, a
0113: 22                    ret
                   ghex16d:
0114: B4 08 02              cjne    a, #8, ghex16f
0117: 80 03                 sjmp    ghex16k
                   ghex16f:
0119: B4 7F 0C              cjne    a, #127, ghex16g        ; handle backspace
                   ghex16k:
011C: BC 04 02              cjne    r4, #4, ghex16e                 ; have they
011F: 80 E5                 sjmp    ghex16c
                   ghex16e:
0121: 11 76                 acall   cout
0123: 31 69                 acall   ghex16y
0125: 0C                    inc     r4
0126: 80 DE                 sjmp    ghex16c
                   ghex16g:
0128: B4 0D 10              cjne    a, #CR, ghex16i                 ; return ke
012B: 8B 83                 mov     dph, r3
012D: 8A 82                 mov     dpl, r2
012F: BC 04 07              cjne    r4, #4, ghex16h
0132: E4                    clr     a
0133: F5 83                 mov     dph, a
0135: F5 82                 mov     dpl, a
0137: D2 D5                 setb    psw.5
                   ghex16h:
0139: C3                    clr     c
013A: 22                    ret
                   ghex16i:
013B: FD                    mov     r5, a                   ; keep copy of orig
013C: 31 7A                 acall   asc2hex
013E: 40 C6                 jc      ghex16c
0140: CD                    xch     a, r5
0141: 12 00 76              lcall   cout
0144: ED                    mov     a, r5
0145: C0 E0                 push    acc
0147: 31 58                 acall   ghex16x
0149: D0 E0                 pop     acc
014B: 2A                    add     a, r2
014C: FA                    mov     r2, a
014D: E4                    clr     a
014E: 3B                    addc    a, r3
014F: FB                    mov     r3, a
0150: DC B4                 djnz    r4, ghex16c
0152: C3                    clr     c
0153: 8A 82                 mov     dpl, r2
0155: 8B 83                 mov     dph, r3
0157: 22                    ret
                   
                   ghex16x:
                            ; multiply r3-r2 by 16 (shift left by 4)
0158: EB                    mov     a, r3
0159: C4                    swap    a
015A: 54 F0                 anl     a, #11110000b
015C: FB                    mov     r3, a
015D: EA                    mov     a, r2
015E: C4                    swap    a
015F: 54 0F                 anl     a, #00001111b
0161: 4B                    orl     a, r3
0162: FB                    mov     r3, a
0163: EA                    mov     a, r2
0164: C4                    swap    a
0165: 54 F0                 anl     a, #11110000b
0167: FA                    mov     r2, a
0168: 22                    ret
                   
                   ghex16y:
                            ; divide r3-r2 by 16 (shift right by 4)
0169: EA                    mov     a, r2
016A: C4                    swap    a
016B: 54 0F                 anl     a, #00001111b
016D: FA                    mov     r2, a
016E: EB                    mov     a, r3
016F: C4                    swap    a
0170: 54 F0                 anl     a, #11110000b
0172: 4A                    orl     a, r2
0173: FA                    mov     r2, a
0174: EB                    mov     a, r3
0175: C4                    swap    a
0176: 54 0F                 anl     a, #00001111b
0178: FB                    mov     r3, a
0179: 22                    ret
                   
                   asc2hex:
                            ; carry set if invalid input
017A: 24 D0                 add     a, #208
017C: 50 14                 jnc     hex_not
017E: 24 F6                 add     a, #246
0180: 40 04                 jc      hex_maybe
0182: 24 0A                 add     a, #10
0184: C3                    clr     c
0185: 22                    ret
                   hex_maybe:
0186: 24 F9                 add     a, #249
0188: 50 08                 jnc     hex_not
018A: 24 FA                 add     a, #250
018C: 40 04                 jc      hex_not
018E: 24 10                 add     a, #16
0190: C3                    clr     c
0191: 22                    ret
                   hex_not:
0192: D3                    setb    c
0193: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                   ; Highly code efficient resursive call phex contributed
                   ; by Alexander B. Alexandrov <abalex@cbr.spb.ru>
                   
                   phex:
                   phex8:
0194: 31 96                 acall   phex_b
                   phex_b:
0196: C4                    swap    a               ; SWAP A will be twice => A
                   phex1:
0197: C0 E0                 push    acc
0199: 54 0F                 anl     a, #15
019B: 24 90                 add     a, #0x90        ; acc is 0x9X, where X is h
019D: D4                    da      a               ; if A to F, C=1 and lower 
019E: 34 40                 addc    a, #0x40
01A0: D4                    da      a
01A1: 11 76                 acall   cout
01A3: D0 E0                 pop     acc
01A5: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                   phex16:
01A6: C0 E0                 push    acc
01A8: E5 83                 mov     a, dph
01AA: 31 94                 acall   phex
01AC: E5 82                 mov     a, dpl
01AE: 31 94                 acall   phex
01B0: D0 E0                 pop     acc
01B2: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                   ; a not so well documented feature of pstr is that you can p
                   ; multiple consecutive strings without needing to reload dpt
                   ; (which takes 3 bytes of code!)... this is useful for inser
                   ; numbers or spaces between strings.
                   
                   pstr:
01B3: C0 E0                 push    acc
                   pstr1:
01B5: E0                    movx    a, @dptr
01B6: A3                    inc     dptr
01B7: 60 0A                 jz      pstr2
01B9: A2 E7                 mov     c, acc.7
01BB: 54 7F                 anl     a, #0x7f
01BD: 11 76                 acall   cout
01BF: 40 02                 jc      pstr2
01C1: 80 F2                 sjmp    pstr1
                   pstr2:
01C3: D0 E0                 pop     acc
01C5: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                   ; converts the ascii code in Acc to uppercase, if it is lowe
                   ; Code efficient (saves 6 byes) upper contributed
                   ; by Alexander B. Alexandrov <abalex@cbr.spb.ru>
                   
                   upper:
01C6: B4 61 00              cjne    a, #97, upper2
                   upper2:
01C9: 40 07                 jc      upper4          ; end if acc < 97
01CB: B4 7B 00              cjne    a, #123, upper3
                   upper3:
01CE: 50 02                 jnc     upper4          ; end if acc >= 123
01D0: 24 E0                 add     a, #224                 ; convert to upperc
                   upper4:
01D2: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                   lenstr:
01D3: 78 00                 mov     r0, #0          ; returns length of a strin
01D5: C0 E0                 push    acc
                   lenstr1:
01D7: E0                    movx    a, @dptr
01D8: 60 04                 jz      lenstr2
01DA: 08                    inc     r0
01DB: A3                    inc     dptr
01DC: 80 F9                 sjmp    lenstr1
                   lenstr2:
01DE: D0 E0                 pop     acc
01E0: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                   ; checks to see if <ESC> is waiting on serial port
                   ; C=clear if no <ESC>, C=set if <ESC> pressed
                   ; buffer is flushed
                   
                   escape:
01E1: C0 E0                 push    acc
01E3: C3                    clr     c
01E4: 30 98 08              jnb     ri, escape2
01E7: E5 99                 mov     a, sbuf
01E9: B4 1B 01              cjne    a, #ESC, escape1
01EC: D3                    setb    c
                   escape1:
01ED: C2 98                 clr     ri
                   escape2:
01EF: D0 E0                 pop     acc
01F1: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                   menu:
                   ; first we print out the prompt, which isn't as simple
                   ; as it may seem, since external code can add to the
                   ; prompt, so we've got to find and execute all of 'em.
01F2: 90 0A 7E              mov     dptr, #prompt1  ; give 'em the first part o
01F5: 11 AD                 acall   pcstr
01F7: EF                    mov     a, r7
01F8: 31 94                 acall   phex
01FA: EE                    mov     a, r6
01FB: 31 94                 acall   phex
01FD: 90 0A 88              mov     dptr, #prompt2
0200: 31 B3                 acall   pstr
                   
                   ; now we're finally past the prompt, so let's get some input
0202: 11 64                 acall   cin             ; get the input, finally
0204: B4 3A 04              cjne    a, #':', menu0
0207: 71 09                 acall   dnld_now
0209: 80 E7                 sjmp    menu
                   menu0:
020B: 31 C6                 acall   upper
                   
                   ; push return address onto stack so we can just jump to the 
020D: 75 F0 F2              mov     b, #(menu & 0xff)       ; we push the retur
0210: C0 F0                 push    b               ; to save code later...
0212: 75 F0 01              mov     b, #(menu >> 8)         ; if bogus input, j
0215: C0 F0                 push    b               ; another prompt.
                   
                   ; first we'll look through memory for a program header that 
                   ; it's a user installed command which matches what the user 
                   
                   ; user installed commands need to avoid changing R6/R7, whic
                   ; the memory pointer. The stack pointer can't be changed obv
                   ; all the other general purpose registers should be availabl
                   ; user commands to alter as they wish.
                   
                   menux:
0217: F5 F0                 mov     b, a            ; now search for external c
0219: 90 10 00              mov     dptr, #bmem
                   menux1:
021C: 12 08 85              lcall   find
021F: 50 22                 jnc     menuxend        ; searched all the commands
0221: 75 82 04              mov     dpl, #4
0224: E0                    movx    a, @dptr
0225: B4 FE 14              cjne    a, #254, menux2         ; only FE is an ext
0228: 05 82                 inc     dpl
022A: E0                    movx    a, @dptr
022B: B5 F0 0E              cjne    a, b, menux2    ; only run if they want it
022E: 11 7E                 acall   sspace
0230: 75 82 20              mov     dpl, #32
0233: 31 B3                 acall   pstr            ; print command name
0235: 11 90                 acall   crlf
0237: 75 82 40              mov     dpl, #64
023A: E4                    clr     a
023B: 73                    jmp     @a+dptr                 ; take a leap of fa
                   menux2:
023C: 05 83                 inc     dph
023E: E5 83                 mov     a, dph
0240: B4 E0 D9              cjne    a, #((emem + 1) >> 8) & 0xff, menux1
                   menuxend:
0243: E5 F0                 mov     a, b
                   
                   ; since we didn't find a user installed command, use the bui
                   menui1:
0245: B4 3F 07              cjne    a, #help_key, menui2
0248: 90 0D D9              mov     dptr, #help_cmd2
024B: 11 AD                 acall   pcstr
024D: C1 08                 ajmp    help
                            
                   menui2:
024F: B4 4D 07              cjne    a, #dir_key, menui3
0252: 90 0D ED              mov     dptr, #dir_cmd
0255: 11 AD                 acall   pcstr
0257: 81 F6                 ajmp    dir
                            
                   menui3:
0259: B4 52 07              cjne    a, #run_key, menui4
025C: 90 0D FB              mov     dptr, #run_cmd
025F: 11 AD                 acall   pcstr
0261: A1 70                 ajmp    run
                            
                   menui4:
0263: B4 44 07              cjne    a, #dnld_key, menui5
0266: 90 0E 07              mov     dptr, #dnld_cmd
0269: 11 AD                 acall   pcstr
026B: 41 EC                 ajmp    dnld
                            
                   menui5:
026D: B4 55 07              cjne    a, #upld_key, menui6
0270: 90 0E 10              mov     dptr, #upld_cmd
0273: 11 AD                 acall   pcstr
0275: C1 AE                 ajmp    upld
                            
                   menui6:
0277: B4 4E 07              cjne    a, #nloc_key, menui7
027A: 90 0E 17              mov     dptr, #nloc_cmd
027D: 11 AD                 acall   pcstr
027F: E1 6A                 ajmp    nloc
                            
                   menui7:
0281: B4 4A 07              cjne    a, #jump_key, menui8
0284: 90 0E 24              mov     dptr, #jump_cmd
0287: 11 AD                 acall   pcstr
0289: 81 56                 ajmp    jump
                            
                   menui8:
028B: B4 48 07              cjne    a, #dump_key, menui9
028E: 90 0E 3C              mov     dptr, #dump_cmd
0291: 11 AD                 acall   pcstr
0293: 81 86                 ajmp    dump
                            
                   menui9:
0295: B4 45 07              cjne    a, #edit_key, menui10
0298: 90 0E 6E              mov     dptr, #edit_cmd
029B: 11 AD                 acall   pcstr
029D: 81 C3                 ajmp    edit
                            
                   menui10:
029F: B4 43 07              cjne    a, #clrm_key, menui11
02A2: 90 0E 83              mov     dptr, #clrm_cmd
02A5: 11 AD                 acall   pcstr
02A7: E1 7A                 ajmp    clrm
                            
                   menui11:
02A9: B4 49 08              cjne    a, #intm_key, menui12
02AC: 90 0E 55              mov     dptr, #intm_cmd
02AF: 11 AD                 acall   pcstr
02B1: 02 08 55              ljmp    intm
                            
                   menui12:
02B4: B4 3C 08              cjne    a, #eio77_key, menui13
02B7: 90 0E A9              mov     dptr, #eio77_cmd
02BA: 11 AD                 acall   pcstr
02BC: 02 08 7B              ljmp    eio77
                            
                   menui13:
02BF: B4 3E 08              cjne    a, #dio77_key, menui14
02C2: 90 0E B8              mov     dptr, #dio77_cmd
02C5: 11 AD                 acall   pcstr
02C7: 02 08 80              ljmp    dio77
                            
                   menui14:
02CA: B4 57 08              cjne    a, #crc16_key, menui15
02CD: 90 0E 99              mov     dptr, #crc16_cmd
02D0: 11 AD                 acall   pcstr
02D2: 02 07 D5              ljmp    calc_crc16
                            
                   menui15:
02D5: B4 42 08              cjne    a, #baud_key, menuiend
02D8: 90 0E C8              mov     dptr, #baud_cmd
02DB: 11 AD                 acall   pcstr
02DD: 02 07 9E              ljmp    reset_baud
                   
                   menuiend:
02E0: 01 90                 ajmp    crlf
                   
                   ;---------------------------------------------------------;
                   
                   r6r7todptr:
02E2: 8E 82                 mov     dpl, r6
02E4: 8F 83                 mov     dph, r7
02E6: 22                    ret
                   
                   dptrtor6r7:
02E7: AE 82                 mov     r6, dpl
02E9: AF 83                 mov     r7, dph
02EB: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                   ; dnlds1 = "Begin sending Intel HEX format file <ESC> to abo
                   ; dnlds2 = "Download aborted"
                   ; dnlds3 = "Download completed"
                   
                   ; 16 byte parameter table: (eight 16 bit values)
                   ;  *   0 = lines received
                   ;  *   1 = bytes received
                   ;  *   2 = bytes written
                   ;  *   3 = bytes unable to write
                   ;  *   4 = incorrect checksums
                   ;  *   5 = unexpected begin of line
                   ;  *   6 = unexpected hex digits (while waiting for bol)
                   ;  *   7 = unexpected non-hex digits (in middle of a line)
                   
                   dnld:
02EC: 90 0B F0              mov     dptr, #dnlds1   ; "begin sending file <ESC>
02EF: 11 AD                 acall   pcstr
02F1: 91 4D                 acall   dnld_init
                            
                   dnld1:
                            ; look for begining of line marker ':'
02F3: 11 64                 acall   cin
02F5: B4 1B 02              cjne    a, #ESC, dnld2  ; Test for escape
02F8: 80 70                 sjmp    dnld_esc
                   
                   dnld2:
02FA: B4 3A 02              cjne    a, #':', dnld2b
02FD: 80 10                 sjmp    dnld2d
                   dnld2b:
                            ; check to see if it's a hex digit, error if it is
02FF: 31 7A                 acall   asc2hex
0301: 40 F0                 jc      dnld1
0303: 79 06                 mov     r1, #6
0305: 71 7C                 acall   dnld_inc
0307: 80 EA                 sjmp    dnld1
                   
                   dnld_now:
                            ; entry point for main menu detecting ':' character
0309: 74 3A                 mov     a, #':'
030B: 11 76                 acall   cout
030D: 91 4D                 acall   dnld_init
                   
                   dnld2d:
030F: 79 00                 mov     r1, #0
0311: 71 7C                 acall   dnld_inc
                   
                   dnld3:
                            ; begin taking in the line of data
                   ;        mov     a, #'.'
                   ;        acall   cout
0313: 7C 00                 mov     r4, #0          ; r4 will count up checksum
0315: 71 9B                 acall   dnld_ghex
0317: F8                    mov     r0, a           ; R0 = # of data bytes
                   ;        mov     a, #'.'
                   ;        acall   cout
0318: 71 9B                 acall   dnld_ghex
031A: F5 83                 mov     dph, a          ; High byte of load address
031C: 71 9B                 acall   dnld_ghex
031E: F5 82                 mov     dpl, a          ; Low byte of load address
0320: 71 9B                 acall   dnld_ghex       ; Record type
0322: B4 01 02              cjne    a, #1, dnld4    ; End record?
0325: 80 29                 sjmp    dnld_end
                   dnld4:
0327: 70 1E                 jnz     dnld_unknown    ; is it a unknown record ty
                   dnld5:
0329: E8                    mov     a, r0
032A: 60 10                 jz      dnld_get_cksum
032C: 71 9B                 acall   dnld_ghex       ; Get data byte
032E: FA                    mov     r2, a
032F: 79 01                 mov     r1, #1
0331: 71 7C                 acall   dnld_inc        ; count total data bytes re
0333: EA                    mov     a, r2
0334: F0                    movx    @dptr, a
0335: 79 02                 mov     r1, #2
0337: 71 7C                 acall   dnld_inc
0339: A3                    inc     dptr
033A: D8 ED                 djnz    r0, dnld5
                   dnld_get_cksum:
033C: 71 9B                 acall   dnld_ghex       ; get checksum
033E: EC                    mov     a, r4
033F: 60 B2                 jz      dnld1           ; should always add to zero
                   dnld_sumerr:
0341: 79 04                 mov     r1, #4
0343: 71 7C                 acall   dnld_inc        ; all we can do it count # 
0345: 80 AC                 sjmp    dnld1
                   
                   dnld_unknown:    ; handle unknown line type
0347: E8                    mov     a, r0
0348: 60 F2                 jz      dnld_get_cksum  ; skip data if size is zero
                   dnld_ukn2:
034A: 71 9B                 acall   dnld_ghex       ; consume all of unknown da
034C: D8 FC                 djnz    r0, dnld_ukn2
034E: 80 EC                 sjmp    dnld_get_cksum
                   
                   dnld_end:
                            ; handles the proper end-of-download marker
0350: E8                    mov     a, r0
0351: 60 04                 jz      dnld_end_3      ; should usually be zero
                   dnld_end_2:
0353: 71 9B                 acall   dnld_ghex       ; consume all of useless da
0355: D8 F3                 djnz    r0, dnld_ukn2
                   dnld_end_3:
0357: 71 9B                 acall   dnld_ghex       ; get the last checksum
0359: EC                    mov     a, r4
035A: 70 E5                 jnz     dnld_sumerr
035C: 71 73                 acall   dnld_dly
035E: 90 0C 3E              mov     dptr, #dnlds3   ; "download went ok..."
0361: 11 AD                 acall   pcstr
                            ; consume any cr or lf character that may have been
                            ; on the end of the last line
0363: 30 98 7A              jnb     ri, dnld_sum
0366: 11 64                 acall   cin
0368: 80 76                 sjmp    dnld_sum
                   
                   dnld_esc:
                            ; handle esc received in the download stream
036A: 71 73                 acall   dnld_dly
036C: 90 0C 27              mov     dptr, #dnlds2   ; "download aborted."    
036F: 11 AD                 acall   pcstr
0371: 80 6D                 sjmp    dnld_sum
                   
                   ; a short delay since most terminal emulation programs
                   ; won't be ready to receive anything immediately after
                   ; they've transmitted a file... even on a fast Pentium(tm)
                   ; machine with 16550 uarts!
                   
                   dnld_dly:
0373: 78 00                 mov     r0, #0
                   dnlddly2:
0375: 79 00                 mov     r1, #0
0377: D9 FE                 djnz    r1, *           ; roughly 128k cycles, appo
0379: D8 FA                 djnz    r0, dnlddly2
037B: 22                    ret
                   
                   ; increment parameter specified by R1
                   ; note, values in Acc and R1 are destroyed
                   
                   dnld_inc:
037C: E9                    mov     a, r1
037D: 54 07                 anl     a, #00000111b   ; just in case
037F: 23                    rl      a
0380: 24 08                 add     a, #dnld_parm
0382: F9                    mov     r1, a           ; now r1 points to lsb
0383: 07                    inc     @r1
0384: E7                    mov     a, @r1
0385: 70 02                 jnz     dnldin2
0387: 09                    inc     r1
0388: 07                    inc     @r1
                   dnldin2:
0389: 22                    ret
                   
                   ; get parameter, and inc to next one (@r1)
                   ; carry clear if parameter is zero.
                   ; 16 bit value returned in dptr
                   
                   dnld_gp:
038A: D3                    setb    c
038B: 87 82                 mov     dpl, @r1
038D: 09                    inc     r1
038E: 87 83                 mov     dph, @r1
0390: 09                    inc     r1
0391: E5 82                 mov     a, dpl
0393: 70 05                 jnz     dnldgp2
0395: E5 83                 mov     a, dph
0397: 70 01                 jnz     dnldgp2
0399: C3                    clr     c
                   dnldgp2:
039A: 22                    ret
                   
                   ; a special version of ghex just for the download. Does not
                   ; look for carriage return or backspace. Handles ESC key by
                   ; poping the return address (I know, nasty, but it saves man
                   ; bytes of code in this 4k ROM) and then jumps to the esc
                   ; key handling.  This ghex doesn't echo characters, and if i
                   ; sees ':', it pops the return and jumps to an error handler
                   ; for ':' in the middle of a line. Non-hex digits also jump
                   ; to error handlers, depending on which digit.
                   
                   dnld_ghex:
                   dnldgh1:
039B: 11 64                 acall   cin
039D: 31 C6                 acall   upper
039F: B4 1B 06              cjne    a, #ESC, dnldgh3
                   dnldgh2:
03A2: D0 E0                 pop     acc
03A4: D0 E0                 pop     acc
03A6: 80 C2                 sjmp    dnld_esc
                   dnldgh3:
03A8: B4 3A 0A              cjne    a, #':', dnldgh5
                   dnldgh4:
03AB: 79 05                 mov     r1, #5          ; handle unexpected beginni
03AD: 71 7C                 acall   dnld_inc
03AF: D0 E0                 pop     acc
03B1: D0 E0                 pop     acc
03B3: 61 13                 ajmp    dnld3           ; and now we're on a new li
                   dnldgh5:
03B5: 31 7A                 acall   asc2hex
03B7: 50 06                 jnc     dnldgh6
03B9: 79 07                 mov     r1, #7
03BB: 71 7C                 acall   dnld_inc
03BD: 80 DC                 sjmp    dnldgh1
                   dnldgh6:
03BF: FA                    mov     r2, a           ; keep first digit in r2
                   dnldgh7:
03C0: 11 64                 acall   cin
03C2: 31 C6                 acall   upper
03C4: B4 1B 02              cjne    a, #ESC, dnldgh8
03C7: 80 D9                 sjmp    dnldgh2
                   dnldgh8:
03C9: B4 3A 02              cjne    a, #':', dnldgh9
03CC: 80 DD                 sjmp    dnldgh4
                   dnldgh9:
03CE: 31 7A                 acall   asc2hex
03D0: 50 06                 jnc     dnldghA
03D2: 79 07                 mov     r1, #7
03D4: 71 7C                 acall   dnld_inc
03D6: 80 E8                 sjmp    dnldgh7
                   dnldghA:
03D8: CA                    xch     a, r2
03D9: C4                    swap    a
03DA: 4A                    orl     a, r2
03DB: FA                    mov     r2, a
03DC: 2C                    add     a, r4           ; add into checksum
03DD: FC                    mov     r4, a
03DE: EA                    mov     a, r2           ; return value in acc
03DF: 22                    ret
                   
                   ; dnlds4 =  "Summary:"
                   ; dnlds5 =  " lines received"
                   ; dnlds6a = " bytes received"
                   ; dnlds6b = " bytes written"
                   
                   ; print out download summary
                   
                   dnld_sum:
03E0: EE                    mov     a, r6
03E1: C0 E0                 push    acc
03E3: EF                    mov     a, r7
03E4: C0 E0                 push    acc
03E6: 90 0C 57              mov     dptr, #dnlds4
03E9: 11 AD                 acall   pcstr
03EB: 79 08                 mov     r1, #dnld_parm
03ED: 7E 62                 mov     r6, #dnlds5 & 0xff
03EF: 7F 0C                 mov     r7, #dnlds5 >> 8
03F1: 91 49                 acall   dnld_i0
03F3: 7E 75                 mov     r6, #dnlds6a & 0xff
03F5: 7F 0C                 mov     r7, #dnlds6a >> 8
03F7: 91 49                 acall   dnld_i0
03F9: 7E 88                 mov     r6, #dnlds6b & 0xff
03FB: 7F 0C                 mov     r7, #dnlds6b >> 8
03FD: 91 49                 acall   dnld_i0
                   
                   ; now print out error summary
                   
                   dnld_err:
03FF: 7A 05                 mov     r2, #5
                   dnlder2:
0401: 71 8A                 acall   dnld_gp
0403: 40 09                 jc      dnlder3                 ; any errors?
0405: DA FA                 djnz    r2, dnlder2
                   ; no errors, so we print the nice message
0407: 90 0D 25              mov     dptr, #dnlds13
040A: 11 AD                 acall   pcstr
040C: 80 25                 sjmp    dlnd_sum_done
                   
                   dnlder3:
                   ; there were errors, so now we print 'em
040E: 90 0C 9A              mov     dptr, #dnlds7
0411: 11 AD                 acall   pcstr
                   ; but let's not be nasty... only print if necessary
0413: 79 0E                 mov     r1, #(dnld_parm + 6)
0415: 7E A4                 mov     r6, #dnlds8 & 0xff
0417: 7F 0C                 mov     r7, #dnlds8 >> 8
0419: 91 3B                 acall   dnld_item
041B: 7E BE                 mov     r6, #dnlds9 & 0xff
041D: 7F 0C                 mov     r7, #dnlds9 >> 8
041F: 91 3B                 acall   dnld_item
0421: 7E D0                 mov     r6, #dnlds10 & 0xff
0423: 7F 0C                 mov     r7, #dnlds10 >> 8
0425: 91 3B                 acall   dnld_item
0427: 7E ED                 mov     r6, #dnlds11 & 0xff
0429: 7F 0C                 mov     r7, #dnlds11 >> 8
042B: 91 3B                 acall   dnld_item
042D: 7E 07                 mov     r6, #dnlds12 & 0xff
042F: 7F 0D                 mov     r7, #dnlds12 >> 8
0431: 91 3B                 acall   dnld_item
                   dlnd_sum_done:
0433: D0 E0                 pop     acc
0435: FF                    mov     r7, a
0436: D0 E0                 pop     acc
0438: FE                    mov     r6, a
0439: 01 90                 ajmp    crlf
                   
                   dnld_item:
043B: 71 8A                 acall   dnld_gp                 ; error conditions
043D: 50 09                 jnc     dnld_i3
                   dnld_i2:
043F: 11 7E                 acall   sspace
0441: 12 09 E1              lcall   pint16u
0444: 51 E2                 acall   r6r7todptr
0446: 11 AD                 acall   pcstr
                   dnld_i3:
0448: 22                    ret
                   
                   dnld_i0:
0449: 71 8A                 acall   dnld_gp                 ; non-error conditi
044B: 80 F2                 sjmp    dnld_i2
                   
                   ; init all dnld parms to zero.
                   
                   dnld_init:
044D: 78 08                 mov     r0, #dnld_parm
                   dnld0:
044F: 76 00                 mov     @r0, #0
0451: 08                    inc     r0
0452: B8 18 FA              cjne    r0, #dnld_parm + 16, dnld0
0455: 22                    ret
                   
                   ; dnlds7:  = "Errors:"
                   ; dnlds8:  = " bytes unable to write"
                   ; dnlds9:  = " incorrect checksums"
                   ; dnlds10: = " unexpected begin of line"
                   ; dnlds11: = " unexpected hex digits"
                   ; dnlds12: = " unexpected non-hex digits"
                   ; dnlds13: = "No errors detected"
                   
                   ;---------------------------------------------------------;
                   
                   jump:
0456: 90 0B 15              mov     dptr, #prompt8
0459: 11 AD                 acall   pcstr
045B: 51 E2                 acall   r6r7todptr
045D: 31 A6                 acall   phex16
045F: 90 0A A4              mov     dptr, #prompt4
0462: 11 AD                 acall   pcstr
0464: 11 FE                 acall   ghex16
0466: 20 D5 06              jb      psw.5, jump3
0469: 50 02                 jnc     jump2
046B: E1 65                 ajmp    abort2
                   jump2:
046D: 51 E7                 acall   dptrtor6r7
                   jump3:
046F: 11 90                 acall   crlf
0471: 90 0D 3C              mov     dptr, #runs1
0474: 11 AD                 acall   pcstr
0476: 51 E2                 acall   r6r7todptr
                   
                   jump_doit:
0478: E4                    clr     a
0479: F5 D0                 mov     psw, a
047B: 75 81 07              mov     sp, #sp_reset
047E: F5 F0                 mov     b, a
0480: 78 FF                 mov     r0, #0xff
                   clrintram:
0482: F6                    mov     @r0, a
0483: D8 FD                 djnz    r0, clrintram
0485: 73                    jmp     @a+dptr
                   
                   ;---------------------------------------------------------;
                   
                   dump:    
0486: 7A 10                 mov     r2, #16                 ; number of lines t
0488: 11 A9                 acall   dcrlf
                   dump1:
048A: 51 E2                 acall   r6r7todptr
048C: 31 A6                 acall   phex16          ; tell 'em the memory locat
048E: 74 3A                 mov     a, #':'
0490: 11 9D                 acall   cout_sp
0492: 7B 10                 mov     r3, #16                 ; r3 counts # of by
0494: 51 E2                 acall   r6r7todptr
                   dump2:
0496: E0                    movx    a, @dptr
0497: A3                    inc     dptr
0498: 31 94                 acall   phex            ; print each byte in hex
049A: 11 7E                 acall   sspace
049C: DB F8                 djnz    r3, dump2
049E: 11 A5                 acall   dspace          ; print a couple extra spac
04A0: 7B 10                 mov     r3, #16
04A2: 51 E2                 acall   r6r7todptr
                   dump3:
04A4: E0                    movx    a, @dptr
04A5: A3                    inc     dptr
04A6: 54 7F                 anl     a, #01111111b   ; avoid unprintable charact
04A8: B4 7F 01              cjne    a, #127, dump3b
04AB: E4                    clr     a               ; avoid 127/255 (delete/rub
                   dump3b:
04AC: 24 E0                 add     a, #224
04AE: 40 01                 jc      dump4
04B0: E4                    clr     a               ; avoid control characters
                   dump4:
04B1: 24 20                 add     a, #32
04B3: 11 76                 acall   cout
04B5: DB ED                 djnz    r3, dump3
04B7: 11 90                 acall   crlf
04B9: 51 E7                 acall   dptrtor6r7
04BB: 31 E1                 acall   escape
04BD: 40 02                 jc      dump5
04BF: DA C9                 djnz    r2, dump1       ; loop back up to print nex
                   dump5:
04C1: 01 90                 ajmp    crlf
                   
                   ;---------------------------------------------------------;
                   
                   ; edit external ram
                   
                   edit:
04C3: 90 0B 97              mov     dptr, #edits1
04C6: 11 AD                 acall   pcstr
04C8: 51 E2                 acall   r6r7todptr
                   edit1:
04CA: 31 A6                 acall   phex16
04CC: 74 3A                 mov     a, #':'
04CE: 11 9D                 acall   cout_sp
04D0: 74 28                 mov     a, #'('
04D2: 11 76                 acall   cout
04D4: 51 E7                 acall   dptrtor6r7
04D6: E0                    movx    a, @dptr
04D7: 31 94                 acall   phex
04D9: 90 0B 59              mov     dptr, #prompt10
04DC: 11 AD                 acall   pcstr
04DE: 11 BA                 acall   ghex
04E0: 20 D5 0E              jb      psw.5, edit2
04E3: 40 0C                 jc      edit2
04E5: 51 E2                 acall   r6r7todptr
04E7: F0                    movx    @dptr, a
04E8: 11 90                 acall   crlf
04EA: 51 E2                 acall   r6r7todptr
04EC: A3                    inc     dptr
04ED: 51 E7                 acall   dptrtor6r7
04EF: 81 CA                 ajmp    edit1
                   edit2:
04F1: 90 0B C0              mov     dptr, #edits2
04F4: 01 AD                 ajmp    pcstr
                   
                   ;---------------------------------------------------------;
                   
                   dir:
04F6: 90 0B 33              mov     dptr, #prompt9
04F9: 11 AD                 acall   pcstr
04FB: 78 15                 mov     r0, #21
                   dir0a:
04FD: 11 7E                 acall   sspace
04FF: D8 FC                 djnz    r0, dir0a
0501: 90 0B 44              mov     dptr, #prompt9b
0504: 11 AD                 acall   pcstr
                   
0506: 75 83 10              mov     dph, #(bmem >> 8)
                   dir1:
0509: 12 08 85              lcall   find            ; find the next program in 
050C: 40 02                 jc      dir2
                   dir_end:
050E: 01 90                 ajmp    crlf            ; we're done if no more fou
                   dir2:
0510: 11 A5                 acall   dspace
0512: 75 82 20              mov     dpl, #32        ; print its name
0515: 31 B3                 acall   pstr
0517: 75 82 20              mov     dpl, #32        ; how long is the name
051A: 31 D3                 acall   lenstr
051C: 74 21                 mov     a, #33
051E: C3                    clr     c
051F: 98                    subb    a, r0
0520: F8                    mov     r0, a
0521: 74 20                 mov     a, #SPACE       ; print the right # of spac
                   dir3:
0523: 11 76                 acall   cout
0525: D8 FC                 djnz    r0, dir3
0527: 75 82 00              mov     dpl, #0
052A: 31 A6                 acall   phex16          ; print the memory location
052C: 78 06                 mov     r0, #6
052E: 74 20                 mov     a, #SPACE
                   dir4:
0530: 11 76                 acall   cout
0532: D8 FC                 djnz    r0, dir4
0534: 75 82 04              mov     dpl, #4                 ; now figure out wh
0537: E0                    movx    a, @dptr
0538: AA 83                 mov     r2, dph                 ; save this, we're 
                   
                   dir5:
053A: B4 FE 05              cjne    a, #254, dir5b
053D: 90 0D AF              mov     dptr, #type1    ; it's an external command
0540: 80 18                 sjmp    dir7
                   dir5b:
0542: B4 FD 05              cjne    a, #253, dir5c
                   dir5bb:
0545: 90 0D C8              mov     dptr, #type4    ; it's a startup routine
0548: 80 10                 sjmp    dir7
                   dir5c:
054A: B4 23 05              cjne    a, #35, dir5d
054D: 90 0D C0              mov     dptr, #type2    ; it's an ordinary program
0550: 80 08                 sjmp    dir7
                   dir5d:
0552: B4 F9 02              cjne    a, #249, dir5e
0555: 80 EE                 sjmp    dir5bb
                   dir5e:
                   dir6:
0557: 90 0D D5              mov     dptr, #type5    ; who knows what the hell i
                   
                   dir7:
055A: 11 AD                 acall   pcstr           ; print out the type
055C: 8A 83                 mov     dph, r2                 ; go back and find 
055E: 11 90                 acall   crlf
0560: 74 DF                 mov     a, #(emem >> 8)
0562: B5 83 02              cjne    a, dph, dir8    ; did we just print the las
0565: A1 0E                 ajmp    dir_end
                   dir8:
0567: 05 83                 inc     dph
0569: E5 83                 mov     a, dph
056B: B4 E0 9B              cjne    a, #((emem + 1) >> 8) & 0xff, dir1
056E: A1 0E                 ajmp    dir_end
                   
                   ; type1=Ext Command
                   ; type4=Startup
                   ; type2=Program
                   ; type5=???
                   
                   ;---------------------------------------------------------;
                   
                   run:
0570: 11 A9                 acall   dcrlf
0572: 7A FF                 mov     r2, #255        ; first print the menu, cou
0574: 90 10 00              mov     dptr, #bmem
0577: 15 83                 dec     dph
                   run2:
0579: 05 83                 inc     dph
057B: E5 83                 mov     a, dph
057D: B4 E0 02              cjne    a, #((emem + 1) >> 8) & 0xff, run2b
0580: 80 21                 sjmp    run3
                   run2b:
0582: 12 08 85              lcall   find
0585: 50 1C                 jnc     run3            ; have we found 'em all??
0587: 75 82 04              mov     dpl, #4
058A: E0                    movx    a, @dptr
058B: 44 03                 orl     a, #00000011b
058D: F4                    cpl     a
058E: 60 E9                 jz      run2            ; this one doesn't run... f
0590: 11 A5                 acall   dspace
0592: 0A                    inc     r2
0593: 74 41                 mov     a, #'A'                 ; print the key to 
0595: 2A                    add     a, r2
0596: 11 9D                 acall   cout_sp
0598: 11 A1                 acall   dash_sp
059A: 75 82 20              mov     dpl, #32
059D: 31 B3                 acall   pstr            ; and the command name
059F: 11 90                 acall   crlf
05A1: A1 79                 ajmp    run2            ; and continue doing this
                   run3:
05A3: BA FF 05              cjne    r2, #255, run4  ; are there any to run??
05A6: 90 0A B8              mov     dptr, #prompt5
05A9: 01 AD                 ajmp    pcstr
                   run4:
05AB: 90 0A 8C              mov     dptr, #prompt3  ; ask the big question!
05AE: 11 AD                 acall   pcstr
05B0: 74 41                 mov     a, #'A'
05B2: 11 76                 acall   cout
05B4: 11 87                 acall   dash
05B6: 74 41                 mov     a, #'A'                 ; such user friendl
05B8: 2A                    add     a, r2           ; even tell 'em the choices
05B9: 11 76                 acall   cout
05BB: 90 0A A4              mov     dptr, #prompt4
05BE: 11 AD                 acall   pcstr
05C0: 11 64                 acall   cin
05C2: B4 1B 02              cjne    a, #ESC, run4aa         ; they they hit <ES
05C5: 01 90                 ajmp    crlf
                   run4aa:
05C7: FB                    mov     r3, a
05C8: 74 1F                 mov     a, #31
05CA: C3                    clr     c
05CB: 9A                    subb    a, r2
05CC: EB                    mov     a, r3
05CD: 40 02                 jc      run4a
05CF: 31 C6                 acall   upper
                   run4a:
05D1: 11 76                 acall   cout
05D3: FB                    mov     r3, a
05D4: 11 90                 acall   crlf
                            ; check to see if it's under 32, if so convert to u
05D6: EB                    mov     a, r3
05D7: 24 BF                 add     a, #(256 - 'A')
05D9: 50 D0                 jnc     run4            ; if they typed less than '
05DB: FB                    mov     r3, a           ; R3 has the number they ty
05DC: EA                    mov     a, r2           ; A=R2 has the maximum numb
05DD: C3                    clr     c
05DE: 9B                    subb    a, r3
05DF: 40 CA                 jc      run4            ; if they typed over the ma
05E1: 0B                    inc     r3
05E2: 90 10 00              mov     dptr, #bmem
05E5: 15 83                 dec     dph
                   run5:
05E7: 05 83                 inc     dph
05E9: E5 83                 mov     a, dph
05EB: B4 E0 02              cjne    a, #((emem + 1) >> 8) & 0xff, run5b
05EE: 80 17                 sjmp    run8
                   run5b:
05F0: 12 08 85              lcall   find
05F3: 50 12                 jnc     run8            ; Shouldn't ever do this ju
05F5: 75 82 04              mov     dpl, #4
05F8: E0                    movx    a, @dptr
05F9: 44 03                 orl     a, #00000011b
05FB: F4                    cpl     a
05FC: 60 E9                 jz      run5            ; this one doesn't run... f
05FE: DB E7                 djnz    r3, run5        ; count til we find the one
0600: 11 90                 acall   crlf
0602: 75 82 40              mov     dpl, #64
0605: 81 78                 ajmp    jump_doit
                   run8:
0607: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                   help:
0608: 90 0D 79              mov     dptr, #help1txt
060B: 11 AD                 acall   pcstr
                            
060D: 7C 3F                 mov     r4, #help_key
060F: 90 0D DE              mov     dptr, #help_cmd
0612: D1 A3                 acall   help2
                            
0614: 7C 4D                 mov     r4, #dir_key
0616: 90 0D ED              mov     dptr, #dir_cmd
0619: D1 A3                 acall   help2
                            
061B: 7C 52                 mov     r4, #run_key
061D: 90 0D FB              mov     dptr, #run_cmd
0620: D1 A3                 acall   help2
                            
0622: 7C 44                 mov     r4, #dnld_key
0624: 90 0E 07              mov     dptr, #dnld_cmd
0627: D1 A3                 acall   help2
                            
0629: 7C 55                 mov     r4, #upld_key
062B: 90 0E 10              mov     dptr, #upld_cmd
062E: D1 A3                 acall   help2
                            
0630: 7C 4E                 mov     r4, #nloc_key
0632: 90 0E 17              mov     dptr, #nloc_cmd
0635: D1 A3                 acall   help2
                            
0637: 7C 4A                 mov     r4, #jump_key
0639: 90 0E 24              mov     dptr, #jump_cmd
063C: D1 A3                 acall   help2
                            
063E: 7C 48                 mov     r4, #dump_key
0640: 90 0E 3C              mov     dptr, #dump_cmd
0643: D1 A3                 acall   help2
                            
0645: 7C 49                 mov     r4, #intm_key
0647: 90 0E 55              mov     dptr, #intm_cmd
064A: D1 A3                 acall   help2
                            
064C: 7C 45                 mov     r4, #edit_key
064E: 90 0E 6E              mov     dptr, #edit_cmd
0651: D1 A3                 acall   help2
                            
0653: 7C 43                 mov     r4, #clrm_key
0655: 90 0E 83              mov     dptr, #clrm_cmd
0658: D1 A3                 acall   help2
                            
065A: 7C 42                 mov     r4, #baud_key
065C: 90 0E C8              mov     dptr, #baud_cmd
065F: D1 A3                 acall   help2
                            
0661: 7C 57                 mov     r4, #crc16_key
0663: 90 0E 99              mov     dptr, #crc16_cmd
0666: D1 A3                 acall   help2
                            
0668: 7C 3C                 mov     r4, #eio77_key
066A: 90 0E A9              mov     dptr, #eio77_cmd
066D: D1 A3                 acall   help2
                            
066F: 7C 3E                 mov     r4, #dio77_key
0671: 90 0E B8              mov     dptr, #dio77_cmd
0674: D1 A3                 acall   help2
                            
0676: 90 0D 92              mov     dptr, #help2txt
0679: 11 AD                 acall   pcstr
067B: 90 10 00              mov     dptr, #bmem
                   help3:
067E: 12 08 85              lcall   find
0681: 50 1E                 jnc     help4
0683: 75 82 04              mov     dpl, #4
0686: E0                    movx    a, @dptr
0687: B4 FE 10              cjne    a, #254, help3a         ; only FE is an ext
068A: 11 A5                 acall   dspace
068C: 05 82                 inc     dpl
068E: E0                    movx    a, @dptr
068F: 11 9D                 acall   cout_sp
0691: 11 A1                 acall   dash_sp
0693: 75 82 20              mov     dpl, #32
0696: 31 B3                 acall   pstr
0698: 11 90                 acall   crlf
                   help3a:
069A: 05 83                 inc     dph
069C: E5 83                 mov     a, dph
069E: B4 E0 DD              cjne    a, #((emem + 1) >> 8) & 0xff, help3
                   help4:   
06A1: 01 90                 ajmp    crlf
                   
                   help2:                           ; print 11 standard lines
06A3: 11 A5                 acall   dspace          ; given key in R4 and name 
06A5: EC                    mov     a, r4
06A6: 11 9D                 acall   cout_sp
06A8: 11 A1                 acall   dash_sp
06AA: 11 AD                 acall   pcstr
06AC: 01 90                 ajmp    crlf
                   
                   ;---------------------------------------------------------;
                   
                   upld:
06AE: F1 33                 acall   get_mem
                            ; assume we've got the beginning address in r3/r2
                            ; and the final address in r5/r4 (r4=lsb)...
                   
                            ; print out what we'll be doing
06B0: 90 0D 53              mov     dptr, #uplds3
06B3: 11 AD                 acall   pcstr
06B5: EB                    mov     a, r3
06B6: 31 94                 acall   phex
06B8: EA                    mov     a, r2
06B9: 31 94                 acall   phex
06BB: 90 0D 74              mov      dptr, #uplds4
06BE: 11 AD                 acall   pcstr
06C0: ED                    mov     a, r5
06C1: 31 94                 acall   phex
06C3: EC                    mov     a, r4
06C4: 31 94                 acall   phex
06C6: 11 90                 acall   crlf
                   
                            ; need to adjust end location by 1...
06C8: 8D 83                 mov     dph, r5
06CA: 8C 82                 mov     dpl, r4
06CC: A3                    inc     dptr
06CD: AC 82                 mov     r4, dpl
06CF: AD 83                 mov     r5, dph
                   
06D1: 90 0B 04              mov     dptr, #prompt7
06D4: 11 AD                 acall   pcstr
06D6: 11 64                 acall   cin
06D8: B4 1B 02              cjne    a, #ESC, upld2e
06DB: E1 63                 ajmp    abort_it
                   upld2e:
06DD: 11 90                 acall   crlf
06DF: 8A 82                 mov     dpl, r2
06E1: 8B 83                 mov     dph, r3
                   
                   upld3:
06E3: EC                    mov     a, r4           ; how many more bytes to ou
06E4: C3                    clr     c
06E5: 95 82                 subb    a, dpl
06E7: FA                    mov     r2, a
06E8: ED                    mov     a, r5
06E9: 95 83                 subb    a, dph
06EB: 70 09                 jnz     upld4           ; if >256 left, then do nex
06ED: EA                    mov     a, r2
06EE: 60 2F                 jz      upld7           ; if we're all done
06F0: 54 F0                 anl     a, #11110000b
06F2: 70 02                 jnz     upld4           ; if >= 16 left, then do ne
06F4: 80 02                 sjmp    upld5           ; otherwise just finish it 
                   upld4:
06F6: 7A 10                 mov     r2, #16
                   upld5:
06F8: 74 3A                 mov     a, #':'                 ; begin the line
06FA: 11 76                 acall   cout
06FC: EA                    mov     a, r2
06FD: 31 94                 acall   phex            ; output # of data bytes
06FF: 31 A6                 acall   phex16          ; output memory location
0701: E5 83                 mov     a, dph
0703: 25 82                 add     a, dpl
0705: 2A                    add     a, r2
0706: FB                    mov     r3, a           ; r3 will become checksum
0707: E4                    clr     a
0708: 31 94                 acall   phex            ; output 00 code for data
                   upld6:
070A: E0                    movx    a, @dptr
070B: 31 94                 acall   phex            ; output each byte
070D: 2B                    add     a, r3
070E: FB                    mov     r3, a
070F: A3                    inc     dptr
0710: DA F8                 djnz    r2, upld6       ; do however many bytes we 
0712: EB                    mov     a, r3
0713: F4                    cpl     a
0714: 04                    inc     a
0715: 31 94                 acall   phex            ; and finally the checksum
0717: 11 90                 acall   crlf
0719: 31 E1                 acall   escape
071B: 50 C6                 jnc     upld3           ; keep working if no esc pr
071D: 80 44                 sjmp    abort_it
                   upld7:
071F: 74 3A                 mov     a, #':'
0721: 11 76                 acall   cout
0723: E4                    clr     a
0724: 31 94                 acall   phex
0726: 31 94                 acall   phex
0728: 31 94                 acall   phex
072A: 04                    inc     a
072B: 31 94                 acall   phex
072D: 74 FF                 mov     a, #255
072F: 31 94                 acall   phex
                   upld8:
0731: 01 A9                 ajmp    dcrlf
                   
                   ;---------------------------------------------------------;
                   
                   ; this thing gets the begin and end locations for
                   ; a few commands. If an esc or enter w/ no input,
                   ; it pops it's own return and returns to the menu
                   ; (nasty programming, but we need tight code for 4k rom)
                   
                   get_mem:
0733: 11 A9                 acall   dcrlf
0735: 90 0B 67              mov     dptr, #beg_str
0738: 11 AD                 acall   pcstr
073A: 11 FE                 acall   ghex16
073C: 40 21                 jc      pop_it
073E: 20 D5 1E              jb      psw.5, pop_it
0741: C0 83                 push    dph
0743: C0 82                 push    dpl
0745: 11 90                 acall   crlf
0747: 90 0B 78              mov     dptr, #end_str
074A: 11 AD                 acall   pcstr
074C: 11 FE                 acall   ghex16
074E: AD 83                 mov     r5, dph
0750: AC 82                 mov     r4, dpl
0752: D0 E0                 pop     acc
0754: FA                    mov     r2, a
0755: D0 E0                 pop     acc
0757: FB                    mov     r3, a
0758: 40 05                 jc      pop_it
075A: 20 D5 02              jb      psw.5, pop_it
075D: 01 90                 ajmp    crlf
                   
                   pop_it:
075F: D0 E0                 pop     acc
0761: D0 E0                 pop     acc
                   abort_it:
0763: 11 90                 acall   crlf
                   abort2:
0765: 90 0A 68              mov     dptr, #abort
0768: 01 AD                 ajmp    pcstr
                   
                   ;---------------------------------------------------------;
                   
                   nloc:
076A: 90 0A F1              mov     dptr, #prompt6
076D: 11 AD                 acall   pcstr
076F: 11 FE                 acall   ghex16
0771: 40 F2                 jc      abort2
0773: 20 D5 EF              jb      psw.5, abort2
0776: 51 E7                 acall   dptrtor6r7
0778: 01 A9                 ajmp    dcrlf
                   
                   ;---------------------------------------------------------;
                   
                   clrm:
077A: F1 33                 acall   get_mem
077C: 90 0B 88              mov     dptr, #sure
077F: 11 AD                 acall   pcstr
0781: 11 64                 acall   cin
0783: 11 76                 acall   cout
0785: 31 C6                 acall   upper
0787: B4 59 D9              cjne    a, #'Y', abort_it
078A: 11 A9                 acall   dcrlf
                   clrm2:
                            ; now we actually do it
078C: 8B 83                 mov     dph, r3
078E: 8A 82                 mov     dpl, r2
                   clrm3:
0790: E4                    clr     a
0791: F0                    movx    @dptr, a
0792: ED                    mov     a, r5
0793: B5 83 05              cjne    a, dph, clrm4
0796: EC                    mov     a, r4
0797: B5 82 01              cjne    a, dpl, clrm4
079A: 22                    ret
                   clrm4:
079B: A3                    inc     dptr
079C: 80 F2                 sjmp    clrm3
                   ;---------------------------------------------------------;
                   
                   reset_baud:
079E: 11 A9                 acall   dcrlf
07A0: 90 0E D8              mov     dptr, #baudprompt
07A3: 11 AD                 acall   pcstr
                            
07A5: 11 FE                 acall   ghex16
07A7: 40 25                 jc      bailout
07A9: 20 D5 22              jb      psw.5, bailout
07AC: C0 82                 push    dpl
07AE: C0 83                 push    dph
                            
07B0: 11 90                 acall   crlf
07B2: 90 0B 88              mov     dptr, #sure
07B5: 11 AD                 acall   pcstr
07B7: 11 64                 acall   cin
07B9: 11 76                 acall   cout
07BB: 31 C6                 acall   upper
07BD: B4 59 0A              cjne    a, #'Y', bailout_pop
07C0: 11 A9                 acall   dcrlf
                            
07C2: D0 F0                 pop     b
07C4: D0 E0                 pop     acc
07C6: 12 09 88              lcall   setbaud
07C9: 22                    ret
                            
                   bailout_pop:
07CA: D0 E0                 pop     acc
07CC: D0 E0                 pop     acc
                   bailout:
07CE: 11 90                 acall   crlf
07D0: 90 0A 68              mov     dptr, #abort
07D3: 01 AD                 ajmp    pcstr
                            
                   ;---------------------------------------------------------;
                   
07D5:              .equ     initial, 0xffff
07D5:              .equ     final, 0x0000
07D5:              .equ     poly, 0x1021
                   
                   calc_crc16:
07D5: F1 33                 acall   get_mem
07D7: 11 90                 acall   crlf
                            
07D9: 51 E2                 acall   r6r7todptr
07DB: C0 82                 push    dpl
07DD: C0 83                 push    dph
07DF: 8A 82                 mov     dpl, r2
07E1: 8B 83                 mov     dph, r3
                                    
07E3: 7E FF                 mov     r6, #(initial & 0xff)
07E5: 7F FF                 mov     r7, #(initial >> 8)
07E7: 12 08 15              lcall   init_crc16
                            
07EA: 7E 21                 mov     r6, #(poly & 0xff)
07EC: 7F 10                 mov     r7, #(poly >> 8)
                   calc_loop:
07EE: E0                    movx    a, @dptr
07EF: 12 08 29              lcall   update_crc16
                            
07F2: ED                    mov     a, r5
07F3: B5 83 1C              cjne    a, dph, calc_skip
07F6: EC                    mov     a, r4
07F7: B5 82 18              cjne    a, dpl, calc_skip
                            
07FA: 7E 00                 mov     r6, #(final & 0xff)
07FC: 7F 00                 mov     r7, #(final >> 8)
07FE: 12 08 1E              lcall   finish_crc16
                            
0801: 8A 82                 mov     dpl, r2
0803: 8B 83                 mov     dph, r3
0805: 12 01 A6              lcall   phex16
                            
0808: D0 83                 pop     dph
080A: D0 82                 pop     dpl
080C: 12 02 E7              lcall   dptrtor6r7
                            
080F: 02 00 A9              ljmp    dcrlf
                            
                   calc_skip:
0812: A3                    inc     dptr
0813: 80 D9                 sjmp    calc_loop
                            
                   init_crc16:
0815: C0 E0                 push    acc
0817: EE                    mov     a, r6
0818: FA                    mov     r2, a
0819: EF                    mov     a, r7
081A: FB                    mov     r3, a
081B: D0 E0                 pop     acc
081D: 22                    ret
                            
                   finish_crc16:
081E: C0 E0                 push    acc
0820: EA                    mov     a, r2
0821: 6E                    xrl     a, r6
0822: FA                    mov     r2, a
0823: EB                    mov     a, r3
0824: 6F                    xrl     a, r7
0825: FB                    mov     r3, a
0826: D0 E0                 pop     acc
0828: 22                    ret
                            
                   update_crc16:
0829: C0 F0                 push    b
                            
082B: F5 F0                 mov     b, a
082D: 74 80                 mov     a, #0x80
                            
                   loop:
082F: F8                    mov     r0, a
0830: E5 F0                 mov     a, b
                            
0832: 58                    anl     a, r0
0833: 60 02                 jz      skip0
0835: 74 01                 mov     a, #1
                   skip0:
0837: F9                    mov     r1, a
0838: EB                    mov     a, r3
0839: 23                    rl      a
083A: 54 01                 anl     a, #1
083C: 69                    xrl     a, r1
083D: F9                    mov     r1, a
                            
083E: EA                    mov     a, r2
083F: 2A                    add     a, r2
0840: FA                    mov     r2, a
0841: EB                    mov     a, r3
0842: 33                    rlc     a
0843: FB                    mov     r3, a
                            
0844: E9                    mov     a, r1
0845: 60 06                 jz      skip1
                            
0847: EA                    mov     a, r2
0848: 6E                    xrl     a, r6
0849: FA                    mov     r2, a
084A: EB                    mov     a, r3
084B: 6F                    xrl     a, r7
084C: FB                    mov     r3, a
                            
                   skip1:
084D: E8                    mov     a, r0
084E: C3                    clr     c
084F: 13                    rrc     a
0850: 70 DD                 jnz     loop
                            
0852: D0 F0                 pop     b
0854: 22                    ret
                            
                   ;---------------------------------------------------------;
                   
                   intm:
0855: 12 00 90              lcall   crlf
0858: 78 00                 mov     r0, #0
                   intm2:
085A: 12 00 90              lcall   crlf
085D: E8                    mov     a, r0
085E: 12 01 94              lcall   phex
0861: 74 3A                 mov     a, #':'
0863: 12 00 76              lcall   cout
                   intm3:
0866: 12 00 7E              lcall   sspace
0869: E6                    mov     a, @r0
086A: 12 01 94              lcall   phex
086D: 08                    inc     r0
086E: B8 00 03              cjne    r0, #0, intm4
0871: 02 00 A9              ljmp    dcrlf
                   intm4:
0874: E8                    mov     a, r0
0875: 54 0F                 anl     a, #00001111b
0877: 70 ED                 jnz     intm3
0879: 80 DF                 sjmp    intm2
                   
                   ;---------------------------------------------------------;
                   
                   eio77:
087B: C2 97                 clr     p1.7
087D: 02 00 90              ljmp    crlf
                            
                   ;---------------------------------------------------------;
                   
                   dio77:
0880: D2 97                 setb    p1.7
0882: 02 00 90              ljmp    crlf
                   
                   ;---------------------------------------------------------;
                   
                   ; finds the next header in the external memory.
                   ; Input DPTR=point to start search (only MSB used)
                   ; Output DPTR=location of next module
                   ; C=set if a header found, C=clear if no more headers
                   
                   find:
0885: 75 82 00              mov     dpl, #0
0888: E0                    movx    a, @dptr
0889: B4 A5 14              cjne    a, #0xa5, find3
088C: A3                    inc     dptr
088D: E0                    movx    a, @dptr
088E: B4 E5 0F              cjne    a, #0xe5, find3
0891: A3                    inc     dptr
0892: E0                    movx    a, @dptr
0893: B4 E0 0A              cjne    a, #0xe0, find3
0896: A3                    inc     dptr
0897: E0                    movx    a, @dptr
0898: B4 A5 05              cjne    a, #0xa5, find3
089B: 75 82 00              mov     dpl, #0                 ; found one here!
089E: D3                    setb    c
089F: 22                    ret
                   find3:
08A0: 74 DF                 mov     a, #(emem >> 8)
08A2: B5 83 02              cjne    a, dph, find4   ; did we just check the end
08A5: C3                    clr     c
08A6: 22                    ret
                   find4:
08A7: 05 83                 inc     dph             ; keep on searching
08A9: 80 DA                 sjmp    find
                   
                   ;---------------------------------------------------------;
                   
                   ; r2:r3 lssrc:hssrc
                   ; r4:r5 lesrc:hesrc
                   ; r6:r7 ldst:hdst
                   
                   cpycx:
08AB: 8A 82                 mov     dpl, r2
08AD: 8B 83                 mov     dph, r3
08AF: E4                    clr     a
08B0: 93                    movc    a, @a+dptr
08B1: A3                    inc     dptr
08B2: AA 82                 mov     r2, dpl
08B4: AB 83                 mov     r3, dph
08B6: 8E 82                 mov     dpl, r6
08B8: 8F 83                 mov     dph, r7
08BA: F0                    movx    @dptr, a
08BB: A3                    inc     dptr
08BC: AE 82                 mov     r6, dpl
08BE: AF 83                 mov     r7, dph
08C0: EA                    mov     a, r2
08C1: 8C F0                 mov     b, r4
08C3: B5 F0 E5              cjne    a, b, cpycx
08C6: EB                    mov     a, r3
08C7: 8D F0                 mov     b, r5
08C9: B5 F0 DF              cjne    a, b, cpycx
08CC: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                   ; r2:r3 lssrc:hssrc
                   ; r4:r5 lesrc:hesrc
                   ; r6:r7 ldst:hdst
                   
                   cpyxx:
08CD: 8A 82                 mov     dpl, r2
08CF: 8B 83                 mov     dph, r3
08D1: E0                    movx    a, @dptr
08D2: A3                    inc     dptr
08D3: AA 82                 mov     r2, dpl
08D5: AB 83                 mov     r3, dph
08D7: 8E 82                 mov     dpl, r6
08D9: 8F 83                 mov     dph, r7
08DB: F0                    movx    @dptr, a
08DC: A3                    inc     dptr
08DD: AE 82                 mov     r6, dpl
08DF: AF 83                 mov     r7, dph
08E1: EA                    mov     a, r2
08E2: 8C F0                 mov     b, r4
08E4: B5 F0 E6              cjne    a, b, cpyxx
08E7: EB                    mov     a, r3
08E8: 8D F0                 mov     b, r5
08EA: B5 F0 E0              cjne    a, b, cpyxx
08ED: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                            ;-------- switch_shadow helper subroutine --------
                            switch_shadow:
08EE: 75 90 FE                      mov     p1, #mctrl_shadow
08F1: FF                            mov     r7, a
08F2: FF                            mov     r7, a
08F3: FF                            mov     r7, a
08F4: FF                            mov     r7, a
08F5: 22                            ret
                            switch_shadow_end:
                            ;-------- switch_shadow helper subroutine --------
                   
                   ; initialize the hardware on reset
                   ; copy flash to memory
                   
                   reset:
08F6: E4                    clr     a
08F7: F5 A8                 mov     ie, a
08F9: F5 B8                 mov     ip, a
08FB: 75 90 FF              mov     p1, #mctrl_reset
08FE: FF                    mov     r7, a
08FF: FF                    mov     r7, a
0900: FF                    mov     r7, a
0901: FF                    mov     r7, a
0902: 75 A0 FF              mov     p2, #p2_init
0905: 75 D0 00              mov     psw, #psw_init
0908: 75 81 17              mov     sp, #sp_init
                            
090B: 7A 00                 mov     r2, #0x00       ; lssrc
090D: 7B 00                 mov     r3, #0x00       ; hssrc         
090F: 7C 00                 mov     r4, #0x00       ; lesrc
0911: 7D 20                 mov     r5, #0x20       ; hesrc         
0913: 7E 00                 mov     r6, #0x00       ; ldst
0915: 7F 00                 mov     r7, #0x00       ; hdst
0917: 12 08 AB              lcall   cpycx
                            
091A: 7A EE                 mov     r2, #(switch_shadow & 0xff)     ; lssrc
091C: 7B 08                 mov     r3, #(switch_shadow >> 8)       ; hssrc    
091E: 7C F6                 mov     r4, #(switch_shadow_end & 0xff)         ; l
0920: 7D 08                 mov     r5, #(switch_shadow_end >> 8)   ; hesrc    
0922: 7E 00                 mov     r6, #(pgm & 0xff)       ; ldst
0924: 7F 20                 mov     r7, #(pgm >> 8)                 ; hdst
0926: 12 08 AB              lcall   cpycx
0929: 12 20 00              lcall   pgm             ; switch_shadow
                            
                   ; initialize the serial port
092C: 74 F7                 mov     a, #(bc & 0xff)         ; lsb
092E: 75 F0 FF              mov     b, #(bc >> 8)   ; msb
0931: 12 09 88              lcall   setbaud
                            
                   ; run any user initialization programs in external memory
0934: 75 F0 F9              mov     b, #249
0937: 12 09 5C              lcall   stcode
                                    
                   ; run the start-up programs in external memory
093A: 75 F0 FD              mov     b, #253
093D: 12 09 5C              lcall   stcode
                            
0940: 12 00 90              lcall   crlf
0943: 12 00 90              lcall   crlf
0946: 12 00 90              lcall   crlf
0949: 12 00 90              lcall   crlf
094C: 90 0A 54              mov     dptr, #logon
094F: 12 00 AD              lcall   pcstr
0952: 12 04 F6              lcall   dir
0955: 7E 00                 mov     r6, #(pgm & 0xff)
0957: 7F 20                 mov     r7, #(pgm >> 8)
0959: 02 01 F2              ljmp    menu
                   
                   stcode:
095C: 90 10 00              mov     dptr, #bmem      ; search for startup routi
                   stcode2:
095F: 12 08 85              lcall   find
0962: 50 23                 jnc     stcode5
0964: 75 82 04              mov     dpl, #4
0967: E0                    movx    a, @dptr
0968: B5 F0 15              cjne    a, b, stcode4   ; only startup code if matc
096B: C0 F0                 push    b
096D: C0 83                 push    dph
096F: 74 7C                 mov     a, #(stcode3 & 0xff)
0971: C0 E0                 push    acc
0973: 74 09                 mov     a, #(stcode3 >> 8)
0975: C0 E0                 push    acc
0977: 75 82 40              mov     dpl, #64
097A: E4                    clr     a
097B: 73                    jmp     @a+dptr                 ; jump to the start
                   stcode3:
097C: D0 83                 pop     dph             ; hopefully it'll return to
097E: D0 F0                 pop     b
                   stcode4:
0980: 05 83                 inc     dph
0982: E5 83                 mov     a, dph
0984: B4 E0 D8              cjne    a, #((emem + 1) >> 8) & 0xff, stcode2
                   stcode5:
0987: 22                    ret                     ; now we've executed all of
                   
                   ;---------------------------------------------------------;
                   
                   setbaud:
0988: C2 CA                 clr     tr2
098A: F5 CC                 mov     tl2, a
098C: 85 F0 CD              mov     th2, b
098F: F5 CA                 mov     rcap2l, a
0991: 85 F0 CB              mov     rcap2h, b
0994: 75 C8 30              mov     t2con, #00110000b
0997: 75 98 52              mov     scon, #01010010b
099A: D2 CA                 setb    tr2
099C: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                   ; prints the unsigned 8 bit value in Acc in base 10
                   
                   pint8u:
099D: C0 F0                 push    b
099F: C0 E0                 push    acc
09A1: 80 13                 sjmp    pint8b
                   
                   ;---------------------------------------------------------;
                   
                   ; prints the signed 8 bit value in Acc in base 10
                   
                   pint8:
09A3: C0 F0                 push    b
09A5: C0 E0                 push    acc
09A7: 30 E7 0C              jnb     acc.7, pint8b
09AA: 74 2D                 mov     a, #'-'
09AC: 12 00 76              lcall   cout
09AF: D0 E0                 pop     acc
09B1: C0 E0                 push    acc
09B3: F4                    cpl     a
09B4: 24 01                 add     a, #1
                   pint8b:
09B6: 75 F0 64              mov     b, #100
09B9: 84                    div     ab
09BA: D2 D5                 setb    f0
09BC: 60 07                 jz      pint8c
09BE: C2 D5                 clr     f0
09C0: 24 30                 add     a, #'0'
09C2: 12 00 76              lcall   cout
                   pint8c:
09C5: E5 F0                 mov     a, b
09C7: 75 F0 0A              mov     b, #10
09CA: 84                    div     ab
09CB: 30 D5 02              jnb     f0, pint8d
09CE: 60 05                 jz      pint8e
                   pint8d:
09D0: 24 30                 add     a, #'0'
09D2: 12 00 76              lcall   cout
                   pint8e:
09D5: E5 F0                 mov     a, b
09D7: 24 30                 add     a, #'0'
09D9: 12 00 76              lcall   cout
09DC: D0 E0                 pop     acc
09DE: D0 F0                 pop     b
09E0: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                   ; print 16 bit unsigned integer in DPTR, using base 10.
                   ; warning, destroys r2, r3, r4, r5, psw.5
                   
                   pint16u:
09E1: C0 E0                 push    acc
09E3: E8                    mov     a, r0
09E4: C0 E0                 push    acc
09E6: C2 D5                 clr     psw.5
09E8: AA 82                 mov     r2, dpl
09EA: AB 83                 mov     r3, dph
                   
                   pint16a:
09EC: 7C 10                 mov     r4, #16                 ; ten-thousands dig
09EE: 7D 27                 mov     r5, #39
09F0: 51 3F                 acall   pint16x
09F2: 60 07                 jz      pint16b
09F4: 24 30                 add     a, #'0'
09F6: 12 00 76              lcall   cout
09F9: D2 D5                 setb    psw.5
                   
                   pint16b:
09FB: 7C E8                 mov     r4, #232        ; thousands digit
09FD: 7D 03                 mov     r5, #3
09FF: 51 3F                 acall   pint16x
0A01: 70 03                 jnz     pint16c
0A03: 30 D5 07              jnb     psw.5, pint16d
                   pint16c:
0A06: 24 30                 add     a, #'0'
0A08: 12 00 76              lcall   cout
0A0B: D2 D5                 setb    psw.5
                   
                   pint16d:
0A0D: 7C 64                 mov     r4, #100        ; hundreds digit
0A0F: 7D 00                 mov     r5, #0
0A11: 51 3F                 acall   pint16x
0A13: 70 03                 jnz     pint16e
0A15: 30 D5 07              jnb     psw.5, pint16f
                   pint16e:
0A18: 24 30                 add     a, #'0'
0A1A: 12 00 76              lcall   cout
0A1D: D2 D5                 setb    psw.5
                   
                   pint16f:
0A1F: EA                    mov     a, r2           ; tens digit
0A20: AB F0                 mov     r3, b
0A22: 75 F0 0A              mov     b, #10
0A25: 84                    div     ab
0A26: 70 03                 jnz     pint16g
0A28: 30 D5 05              jnb     psw.5, pint16h
                   pint16g:
0A2B: 24 30                 add     a, #'0'
0A2D: 12 00 76              lcall   cout
                   
                   pint16h:
0A30: E5 F0                 mov     a, b            ; and finally the ones digi
0A32: 8B F0                 mov     b, r3
0A34: 24 30                 add     a, #'0'
0A36: 12 00 76              lcall   cout
                   
0A39: D0 E0                 pop     acc
0A3B: F8                    mov     r0, a
0A3C: D0 E0                 pop     acc
0A3E: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                   ; ok, it's a cpu hog and a nasty way to divide, but this cod
                   ; requires only 21 bytes! Divides r2-r3 by r4-r5 and leaves
                   ; quotient in r2-r3 and returns remainder in acc. If Intel
                   ; had made a proper divide, then this would be much easier.
                   
                   pint16x:
0A3F: 78 00                 mov     r0, #0
                   pint16y:
0A41: 08                    inc     r0
0A42: C3                    clr     c
0A43: EA                    mov     a, r2
0A44: 9C                    subb    a, r4
0A45: FA                    mov     r2, a
0A46: EB                    mov     a, r3
0A47: 9D                    subb    a, r5
0A48: FB                    mov     r3, a
0A49: 50 F6                 jnc     pint16y
0A4B: 18                    dec     r0
0A4C: EA                    mov     a, r2
0A4D: 2C                    add     a, r4
0A4E: FA                    mov     r2, a
0A4F: EB                    mov     a, r3
0A50: 3D                    addc    a, r5
0A51: FB                    mov     r3, a
0A52: E8                    mov     a, r0
0A53: 22                    ret
                   
                   ;---------------------------------------------------------;
                   ;                                                          ;
                   ;         Strings                                          ;
                   ;                                                          ;
                   ;---------------------------------------------------------;
                   
                   logon:
0A54: 50 41 55 4C 
      4D 4F 4E 32 
      20 76 32 2E 
      31 61 62 0D 
      0A 0D 0A 00 
                            .db     "PAULMON2 v2.1ab\r\n\r\n", 0
                            
                   abort:
0A68: 20 20 43 6F 
      6D 6D 61 6E 
      64 20 61 62 
      6F 72 74 65 
      64 0D 0A 0D 
      0A 00                 .db     "  Command aborted\r\n\r\n", 0
                            
                   prompt1:
0A7E: 4C 6F 63 61 
      74 69 6F 6E 
      3A 00                 .db     "Location:", 0
                            
                   prompt2:
0A88: 20 3E 20 00 
                            .db     " > ", 0
                            
                   prompt3:
0A8C: 53 65 6C 65 
      63 74 20 70 
      72 6F 67 72 
      61 6D 20 74 
      6F 20 72 75 
      6E 20 28 00 
                            .db     "Select program to run (", 0
                            
                   prompt4:
0AA4: 29 20 6F 72 
      20 45 53 43 
      20 74 6F 20 
      61 62 6F 72 
      74 3A 20 00 
                            .db     ") or ESC to abort: ", 0
                            
                   prompt5:
0AB8: 4E 6F 20 70 
      72 6F 67 72 
      61 6D 20 68 
      65 61 64 65 
      72 73 20 66 
      6F 75 6E 64 
      20 69 6E 20 
      6D 65 6D 6F 
      72 79 2C 20 
      75 73 65 20 
      4A 55 4D 50 
      20 69 6E 73 
      74 65 61 64 
      0D 0A 0D 0A 
      00                    .db     "No program headers found in memory, use JU
                            
                   prompt6:
0AF1: 0D 0A 0D 0A 
      4E 65 77 20 
      6C 6F 63 61 
      74 69 6F 6E 
      3A 20 00              .db     "\r\n\r\nNew location: ", 0
                            
                   prompt7:
0B04: 50 72 65 73 
      73 20 61 6E 
      79 20 6B 65 
      79 2E 2E 2E 
      00                    .db     "Press any key...", 0
                            
                   prompt8:
0B15: 0D 0A 0D 0A 
      4A 75 6D 70 
      20 74 6F 20 
      6D 65 6D 6F 
      72 79 20 6C 
      6F 63 61 74 
      69 6F 6E 20 
      28 00                 .db     "\r\n\r\nJump to memory location (", 0
                            
                   prompt9:
0B33: 0D 0A 0D 0A 
      50 72 6F 67 
      72 61 6D 20 
      4E 61 6D 65 
      00                    .db     "\r\n\r\nProgram Name", 0
                            
                   prompt9b:
0B44: 4C 6F 63 61 
      74 69 6F 6E 
      20 20 20 20 
      20 20 54 79 
      70 65 0D 0A 
      00                    .db     "Location      Type\r\n", 0
                            
                   prompt10:
0B59: 29 20 4E 65 
      77 20 76 61 
      6C 75 65 3A 
      20 00                 .db     ") New value: ", 0
                            
                   beg_str:
0B67: 46 69 72 73 
      74 20 6C 6F 
      63 61 74 69 
      6F 6E 3A 20 
      00                    .db     "First location: ", 0
                            
                   end_str:
0B78: 4C 61 73 74 
      20 6C 6F 63 
      61 74 69 6F 
      6E 3A 20 00 
                            .db     "Last location: ", 0
                            
                   sure:
0B88: 41 72 65 20 
      79 6F 75 20 
      73 75 72 65 
      3F 20 00              .db     "Are you sure? ", 0
                            
                   edits1:
0B97: 0D 0A 0D 0A 
      45 64 69 74 
      69 6E 67 20 
      65 78 74 65 
      72 6E 61 6C 
      20 52 41 4D 
      2C 20 45 53 
      43 20 74 6F 
      20 61 62 6F 
      72 74 0D 0A 
      00                    .db     "\r\n\r\nEditing external RAM, ESC to abort
                            
                   edits2:
0BC0: 20 20 45 64 
      69 74 69 6E 
      67 20 63 6F 
      6D 70 6C 65 
      74 65 2C 20 
      74 68 69 73 
      20 6C 6F 63 
      61 74 69 6F 
      6E 20 75 6E 
      63 68 61 6E 
      67 65 64 0D 
      0A 0D 0A 00 
                            .db     "  Editing complete, this location unchange
                            
                   dnlds1:
0BF0: 0D 0A 0D 0A 
      42 65 67 69 
      6E 20 74 72 
      61 6E 73 66 
      65 72 20 6F 
      66 20 49 6E 
      74 65 6C 20 
      68 65 78 20 
      66 69 6C 65 
      2C 20 45 53 
      43 20 74 6F 
      20 61 62 6F 
      72 74 0D 0A 
      0D 0A 00              .db     "\r\n\r\nBegin transfer of Intel hex file, 
                            
                   dnlds2:
0C27: 0D 0A 44 6F 
      77 6E 6C 6F 
      61 64 20 61 
      62 6F 72 74 
      65 64 0D 0A 
      0D 0A 00              .db     "\r\nDownload aborted\r\n\r\n", 0
                            
                   dnlds3:
0C3E: 0D 0A 44 6F 
      77 6E 6C 6F 
      61 64 20 63 
      6F 6D 70 6C 
      65 74 65 64 
      0D 0A 0D 0A 
      00                    .db     "\r\nDownload completed\r\n\r\n", 0
                            
                   dnlds4:
0C57: 53 75 6D 6D 
      61 72 79 3A 
      0D 0A 00              .db     "Summary:\r\n", 0
                            
                   dnlds5:
0C62: 20 20 6C 69 
      6E 65 73 20 
      72 65 63 65 
      69 76 65 64 
      0D 0A 00              .db     "  lines received\r\n", 0
                            
                   dnlds6a:
0C75: 20 20 62 79 
      74 65 73 20 
      72 65 63 65 
      69 76 65 64 
      0D 0A 00              .db     "  bytes received\r\n", 0
                            
                   dnlds6b:
0C88: 20 20 62 79 
      74 65 73 20 
      77 72 69 74 
      74 65 6E 0D 
      0A 00                 .db     "  bytes written\r\n", 0
                            
                   dnlds7:
0C9A: 45 72 72 6F 
      72 73 3A 0D 
      0A 00                 .db     "Errors:\r\n", 0
                            
                   dnlds8:
0CA4: 20 20 62 79 
      74 65 73 20 
      75 6E 61 62 
      6C 65 20 74 
      6F 20 77 72 
      69 74 65 0D 
      0A 00                 .db     "  bytes unable to write\r\n", 0
                            
                   dnlds9:
0CBE: 20 20 62 61 
      64 20 63 68 
      65 63 6B 73 
      75 6D 73 0D 
      0A 00                 .db     "  bad checksums\r\n", 0
                            
                   dnlds10:
0CD0: 20 20 75 6E 
      65 78 70 65 
      63 74 65 64 
      20 62 65 67 
      69 6E 20 6F 
      66 20 6C 69 
      6E 65 0D 0A 
      00                    .db     "  unexpected begin of line\r\n", 0
                            
                   dnlds11:
0CED: 20 20 75 6E 
      65 78 70 65 
      63 74 65 64 
      20 68 65 78 
      20 64 69 67 
      69 74 73 0D 
      0A 00                 .db     "  unexpected hex digits\r\n", 0
                            
                   dnlds12:
0D07: 20 20 75 6E 
      65 78 70 65 
      63 74 65 64 
      20 6E 6F 6E 
      20 68 65 78 
      20 64 69 67 
      69 74 73 0D 
      0A 00                 .db     "  unexpected non hex digits\r\n", 0
                            
                   dnlds13:
0D25: 4E 6F 20 65 
      72 72 6F 72 
      73 20 64 65 
      74 65 63 74 
      65 64 0D 0A 
      0D 0A 00              .db     "No errors detected\r\n\r\n", 0
                            
                   runs1:
0D3C: 0D 0A 72 75 
      6E 6E 69 6E 
      67 20 70 72 
      6F 67 72 61 
      6D 3A 0D 0A 
      0D 0A 00              .db     "\r\nrunning program:\r\n\r\n", 0
                            
                   uplds3:
0D53: 0D 0A 0D 0A 
      53 65 6E 64 
      69 6E 67 20 
      49 6E 74 65 
      6C 20 68 65 
      78 20 66 69 
      6C 65 20 66 
      72 6F 6D 20 
      00                    .db     "\r\n\r\nSending Intel hex file from ", 0
                            
                   uplds4:
0D74: 20 74 6F 20 
      00                    .db     " to ", 0
                            
                   help1txt:
0D79: 0D 0A 0D 0A 
      53 74 61 6E 
      64 61 72 64 
      20 63 6F 6D 
      6D 61 6E 64 
      73 3A 0D 0A 
      00                    .db     "\r\n\r\nStandard commands:\r\n", 0
                            
                   help2txt:
0D92: 0D 0A 55 73 
      65 72 20 69 
      6E 73 74 61 
      6C 6C 65 64 
      20 63 6F 6D 
      6D 61 6E 64 
      73 3A 0D 0A 
      00                    .db     "\r\nUser installed commands:\r\n", 0
                            
                   type1:
0DAF: 45 78 74 65 
      72 6E 61 6C 
      20 63 6F 6D 
      6D 61 6E 64 
      00                    .db     "External command", 0
                            
                   type2:
0DC0: 50 72 6F 67 
      72 61 6D 00 
                            .db     "Program", 0
                            
                   type4:
0DC8: 53 74 61 72 
      74 75 70 20 
      63 6F 64 65 
      00                    .db     "Startup code", 0
                            
                   type5:
0DD5: 3F 3F 3F 00 
                            .db     "???", 0
                            
                   help_cmd2:
0DD9: 48 65 6C 70 
      00                    .db     "Help", 0
                            
                   help_cmd:
0DDE: 54 68 69 73 
      20 68 65 6C 
      70 20 6C 69 
      73 74 00              .db     "This help list", 0
                            
                   dir_cmd:
0DED: 4C 69 73 74 
      20 70 72 6F 
      67 72 61 6D 
      73 00                 .db     "List programs", 0
                            
                   run_cmd:
0DFB: 52 75 6E 20 
      70 72 6F 67 
      72 61 6D 00 
                            .db     "Run program", 0
                            
                   dnld_cmd:
0E07: 44 6F 77 6E 
      6C 6F 61 64 
      00                    .db     "Download", 0
                            
                   upld_cmd:
0E10: 55 70 6C 6F 
      61 64 00              .db     "Upload", 0
                            
                   nloc_cmd:
0E17: 4E 65 77 20 
      6C 6F 63 61 
      74 69 6F 6E 
      00                    .db     "New location", 0
                            
                   jump_cmd:
0E24: 4A 75 6D 70 
      20 74 6F 20 
      6D 65 6D 6F 
      72 79 20 6C 
      6F 63 61 74 
      69 6F 6E 00 
                            .db     "Jump to memory location", 0
                            
                   dump_cmd:
0E3C: 48 65 78 20 
      64 75 6D 70 
      20 65 78 74 
      65 72 6E 61 
      6C 20 6D 65 
      6D 6F 72 79 
      00                    .db     "Hex dump external memory", 0
                            
                   intm_cmd:
0E55: 48 65 78 20 
      64 75 6D 70 
      20 69 6E 74 
      65 72 6E 61 
      6C 20 6D 65 
      6D 6F 72 79 
      00                    .db     "Hex dump internal memory", 0
                            
                   edit_cmd:
0E6E: 45 64 69 74 
      20 65 78 74 
      65 72 6E 61 
      6C 20 6D 65 
      6D 6F 72 79 
      00                    .db     "Edit external memory", 0
                            
                   clrm_cmd:
0E83: 43 6C 65 61 
      72 20 65 78 
      74 65 72 6E 
      61 6C 20 6D 
      65 6D 6F 72 
      79 00                 .db     "Clear external memory", 0
                   
                   crc16_cmd:
0E99: 43 61 6C 63 
      75 6C 61 74 
      65 20 43 52 
      43 31 36 00 
                            .db     "Calculate CRC16", 0
                            
                   eio77_cmd:
0EA9: 45 6E 61 62 
      6C 65 20 6E 
      43 53 49 4F 
      37 37 00              .db     "Enable nCSIO77", 0
                   
                   dio77_cmd:
0EB8: 44 69 73 61 
      62 6C 65 20 
      6E 43 53 49 
      4F 37 37 00 
                            .db     "Disable nCSIO77", 0
                            
                   baud_cmd:
0EC8: 52 65 73 65 
      74 20 62 61 
      75 64 20 72 
      61 74 65 00 
                            .db     "Reset baud rate", 0
                            
                   baudprompt:
0ED8: 45 6E 74 65 
      72 20 6E 65 
      77 20 62 61 
      75 64 20 63 
      6F 6E 73 74 
      3A 20 00              .db     "Enter new baud const: ", 0
                   
