                   ; PAULMON2, a user-friendly 8051 monitor, by Paul Stoffregen
                   ; Please email comments, suggestions, bugs to paul@pjrc.com
                   
                   ; Version 2.1
                   ;        Some code size improvements, contributed by Alexand
                   ;        Download can now start from main menu prompt
                   
                   ; It's free. PAULMON2 is in the public domain. You may copy
                   ; sections of code from PAULMON2 into your own programs, eve
                   ; for commercial purposes. PAULMON2 should only be distribut
                   ; free of charge, but may be bundled as 'value-added' with o
                   ; products, such as development boards, CDROMs, etc. Please
                   ; distribute the PAULMON2.DOC file and other files, not just
                   ; the object code!
                   
                   ; The PAULMON2.EQU and PAULMON2.HDR files contain valuable
                   ; information that could help you to write programs for use
                   ; with PAULMON2.
                   
                   ; PAULMON2 is in the public domain. PAULMON2 is distributed 
                   ; the hope that it will be useful, but without any warranty;
                   ; without even the implied warranty of merchantability or fi
                   ; for a particular purpose. 
                   
                   ; You are probably reading this code to see what it looks li
                   ; and possibly learn something, or to modify it for some rea
                   ; Either is ok, but please remember that this code uses a nu
                   ; of tricks to cram all the functionality into just 4k. As a
                   ; result, the code can be difficult to read, and adding new
                   ; features can be very difficult without growing beyond 4k. 
                   ; add or modify commands in PAULMON2, please consider using 
                   ; "external command" functionality. It is easier to develop
                   ; new commands this way, and you can distribute them to othe
                   ; users. Email paul@pjrc.com if you have new PAULMON2
                   ; commands to contribute to others. Details about adding new
                   ; commands to PAULMON2 (with examples) can be found at:
                   
                   ; http://www.pjrc.com/tech/8051/pm2_docs/addons.html
                   
                   ;---------------------------------------------------------;
                   ;                                                          ;
                   ;            PAULMON2's default configuration              ;
                   ;                                                          ;
                   ;---------------------------------------------------------;
                   
                   ; PAULMON2 should be assembled using the modified AS31 assem
                   ; originally written by Ken Stauffer, many small changes by 
                   ; Stoffregen. This free assembler is available on the web at
                   ; http://www.pjrc.com/tech/8051/index.html
                   ; As well, these web pages have a fill-out form which makes 
                   ; very easy to custom configure PAULMON2. Using this form wi
                   ; edit the code for you, run the AS31 assmebler, and send yo
                   ; object code to program into your chip.
                   
                   ; These two parameters control where PAULMON2 will be assemb
                   ; and where it will attempt to LJMP at the interrupt vector 
                   
0000:              .equ     base, 0x0000            ; location for PAULMON2
0000:              .equ     vector, 0x2000          ; location to LJMP interrup
                   
                   ; These three parameters tell PAULMON2 where the user's memo
                   ; installed. "bmem" and "emem" define the space that will be
                   ; for program headers, user installed commands, start-up pro
                   ; "bmem" and "emem" should be use so they exclude memory are
                   ; perphreal devices may be mapped, as reading memory from an
                   ; may reconfigure it unexpectedly.
                   
0000:              .equ     pgm, 0x2000             ; default location for the 
0000:              .equ     bmem, 0x1000            ; where is the beginning of
0000:              .equ     emem, 0xFFFF            ; end of the memory
                   
                   ; To set the baud rate, use this formula
                   ; baud_const = 256 - (crystal / (12 * 16 * baud))
                   
0000:              .equ     baud_const, 255                 ;57600 baud w/ 11.0
                   ;.equ    baud_const, 253                 ;19200 baud w/ 11.0
                   ;.equ    baud_const, 250                 ;9600 baud w/ 11.05
                   ;.equ    baud_const, 252                 ;19200 baud w/ 14.7
                   ;.equ    baud_const, 243                 ;4808 baud w/ 12 MH
                   
0000:              .equ     line_delay, 6           ; num of char times to paus
                   
                   ; Several people didn't like the key definations in PAULMON1
                   ; Actually, I didn't like 'em either, but I never took the t
                   ; to change it.   Eventually I got used to them, but now it'
                   ; really easy to change which keys do what in PAULMON2.   Yo
                   ; can guess what to do below, but don't use lowercase.
                   
0000:              .equ     help_key, '?'           ; help screen
0000:              .equ     dir_key, 'M'            ; directory
0000:              .equ     run_key, 'R'            ; run program
0000:              .equ     dnld_key, 'D'           ; download
0000:              .equ     upld_key, 'U'           ; upload
0000:              .equ     nloc_key, 'N'           ; new memory location
0000:              .equ     jump_key, 'J'           ; jump to memory location
0000:              .equ     dump_key, 'H'           ; hex dump memory
0000:              .equ     intm_key, 'I'           ; hex dump internal memory
0000:              .equ     edit_key, 'E'           ; edit memory
0000:              .equ     clrm_key, 'C'           ; clear memory
0000:              .equ     eio77_key, '<'
0000:              .equ     dio77_key, '>'
                   
                   ; These symbols configure paulmon2's internal memory usage.
                   ; It is usually not a good idea to change these unless you
                   ; know that you really have to.
                   
                   ; |00|01|02|03|04|05|06|07|08|09|0a|0b|0c|0d|0e|0f|10|11|12|
                   ; |r0|r1|r2|r3|r4|r5|r6|r7|  .  .  .  .  .  .  .  dnld  .  .
                   ;                                                           
0000:              .equ     psw_init, 0             ; value for psw (which reg 
0000:              .equ     dnld_parm, 0x08                 ; block of 16 bytes
0000:              .equ     stack, 0x17             ; location of the stack
                   
                   ; |P1.7|P1.6|P1.5|P1.4|P1.3|P1.2|P1.1|P1.0|
0000:              .equ     mctrl_default,  0b11111111
0000:              .equ     mctrl_shadow,   0b11111110
                   
                   ;---------------------------------------------------------;
                   ;                                                          ;
                   ;                     Interrupt Vectors                    ;
                   ;  (and little bits of code crammed in the empty spaces)  ;
                   ;                                                          ;
                   ;---------------------------------------------------------;
                   
                   ;------ RESET --------------------------------------------;
0000:              .org     base
0000: 02 07 AF              ljmp    poweron
                   ;------ RESET --------------------------------------------;
                   
                   ;------ IE0_VECTOR ---------------------------------------;
0003:              .org     base+3
0003: 02 20 03              ljmp    vector+3
                   ;------ IE0_VECTOR ---------------------------------------;
                   
                   r6r7todptr:
0006: 8E 82                 mov     dpl, r6
0008: 8F 83                 mov     dph, r7
000A: 22                    ret
                   
                   ;------ TF0_VECTOR ---------------------------------------;
000B:              .org     base+11
000B: 02 20 0B              ljmp    vector+11
                   ;------ TF0_VECTOR ---------------------------------------;
                   
                   dptrtor6r7:
000E: AE 82                 mov     r6, dpl
0010: AF 83                 mov     r7, dph
0012: 22                    ret
                   
                   ;------ IE1_VECTOR ---------------------------------------;
0013:              .org     base+19
0013: 02 20 13              ljmp    vector+19
                   ;------ IE1_VECTOR ---------------------------------------;
                   
                   dash:
0016: 74 2D                 mov     a, #'-'                 ; seems kinda trivi
0018: 01 6A                 ajmp    cout            ; this appears in code, it 
001A: 00                    nop                     ; bytes, but an acall takes
                   
                   ;------ TF1_VECTOR ---------------------------------------;
001B:              .org     base+27
001B: 02 20 1B              ljmp    vector+27
                   ;------ TF1_VECTOR ---------------------------------------;
                   
                   cout_sp:
001E: 11 6A                 acall   cout
0020: 01 68                 ajmp    space
0022: 00                    nop
                   
                   ;------ SI0_VECTOR ---------------------------------------;
0023:              .org     base+35
0023: 02 20 23              ljmp    vector+35
                   ;------ SI0_VECTOR ---------------------------------------;
                   
                   dash_sp:
0026: 11 16                 acall   dash
0028: 01 68                 ajmp    space
002A: 00                    nop
                   
                   ;------ TF2_VECTOR --- EX2_VECTOR ------------------------;
002B:              .org     base+43
002B: 02 20 2B              ljmp    vector+43
                   ;------ TF2_VECTOR --- EX2_VECTOR ------------------------;
                   
                   ;---------------------------------------------------------;
                   ;                                                          ;
                   ;        The jump table for user programs to call          ;
                   ;              subroutines within PAULMON                  ;
                   ;                                                          ;
                   ;---------------------------------------------------------;
                   
                   ; Never change this line!! Other
                   ; programs depend on these locations
                   ; to access paulmon2 functions
                   
002E:              .org     base+46
002E: 21 5E                 ajmp    phex1           ; 0x2E
0030: 01 6A                 ajmp    cout            ; 0x30
0032: 01 5E                 ajmp    cin             ; 0x32
0034: 21 5B                 ajmp    phex            ; 0x34
0036: 21 6D                 ajmp    phex16          ; 0x36
0038: 21 7A                 ajmp    pstr            ; 0x38
003A: 01 81                 ajmp    ghex            ; 0x3A
003C: 01 C5                 ajmp    ghex16          ; 0x3C
003E: 21 AE                 ajmp    esc             ; 0x4E
0040: 21 8E                 ajmp    upper           ; 0x40
0042: 02 08 3A              ljmp    setbaud                 ; 0x42
                   pcstr_h:
0045: 02 09 82              ljmp    pcstr           ; 0x45
0048: 01 74                 ajmp    newline                 ; 0x48
004A: 02 01 9B              ljmp    lenstr          ; 0x4A
004D: 02 08 CB              ljmp    pint8u          ; 0x4D
0050: 02 08 D1              ljmp    pint8           ; 0x50
0053: 02 09 0F              ljmp    pint16u                 ; 0x53
0056: 02 07 85              ljmp    find            ; 0x56
                   cin_filter_h:
0059: 02 08 4A              ljmp    cin_filter      ; 0x59
005C: 21 41                 ajmp    asc2hex                 ; 0x5C
                   
                   ;---------------------------------------------------------;
                   ;                                                          ;
                   ;               Subroutines for serial I/O                 ;
                   ;                                                          ;
                   ;---------------------------------------------------------;
                   
                   cin:
005E: 30 98 FD              jnb     ri, cin
0061: C2 98                 clr     ri
0063: E5 99                 mov     a, sbuf
0065: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                   dspace:
0066: 11 68                 acall   space
                   space:
0068: 74 20                 mov     a, #' '
                   cout:
006A: 30 99 FD              jnb     ti, cout
006D: C2 99                 clr     ti              ; clr ti before the mov to 
006F: F5 99                 mov     sbuf, a
0071: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                   ; Clearing ti before reading sbuf takes care of the case whe
                   ; interrupts may be enabled... If an interrupt were to happe
                   ; between those two instructions, the serial port will just
                   ; wait a while, but in the other order and the character cou
                   ; finish transmitting (during the interrupt routine) and the
                   ; ti would be cleared and never set again by the hardware, c
                   ; the next call to cout to hang forever!
                   
                   newline2:                        ; print two newlines
0072: 11 74                 acall   newline
                   newline:
0074: C0 E0                 push    acc             ; print one newline
0076: 74 0D                 mov     a, #13
0078: 11 6A                 acall   cout
007A: 74 0A                 mov     a, #10
007C: 11 6A                 acall   cout
007E: D0 E0                 pop     acc
0080: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                   ; get 2 digit hex number from serial port
                   ; c = set if ESC pressed, clear otherwise
                   ; psw.5 = set if return w/ no input, clear otherwise
                   
                   ghex:
                   ghex8:
0081: C2 D5                 clr     psw.5
                   ghex8c:
0083: 11 59                 acall   cin_filter_h    ; get first digit
0085: 31 8E                 acall   upper
0087: B4 1B 03              cjne    a, #27, ghex8f
                   ghex8d:
008A: D3                    setb    c
008B: E4                    clr     a
008C: 22                    ret
                   ghex8f:
008D: B4 0D 05              cjne    a, #13, ghex8h
0090: D2 D5                 setb    psw.5
0092: C3                    clr     c
0093: E4                    clr     a
0094: 22                    ret
                   ghex8h:
0095: FA                    mov     r2, a
0096: 31 41                 acall   asc2hex
0098: 40 E9                 jc      ghex8c
009A: CA                    xch     a, r2           ; r2 will hold hex value of
009B: 11 6A                 acall   cout
                   ghex8j:
009D: 11 59                 acall   cin_filter_h    ; get second digit
009F: 31 8E                 acall   upper
00A1: B4 1B 02              cjne    a, #27, ghex8k
00A4: 80 E4                 sjmp    ghex8d
                   ghex8k:
00A6: B4 0D 03              cjne    a, #13, ghex8m
00A9: EA                    mov     a, r2
00AA: C3                    clr     c
00AB: 22                    ret
                   ghex8m:
00AC: B4 08 04              cjne    a, #8, ghex8p
                   ghex8n:
00AF: 11 6A                 acall   cout
00B1: 80 D0                 sjmp    ghex8c
                   ghex8p:
00B3: B4 15 02              cjne    a, #21, ghex8q
00B6: 80 F7                 sjmp    ghex8n
                   ghex8q:
00B8: FB                    mov     r3, a
00B9: 31 41                 acall   asc2hex
00BB: 40 E0                 jc      ghex8j
00BD: CB                    xch     a, r3
00BE: 11 6A                 acall   cout
00C0: EA                    mov     a, r2
00C1: C4                    swap    a
00C2: 4B                    orl     a, r3
00C3: C3                    clr     c
00C4: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                   ; carry set if esc pressed
                   ; psw.5 set if return pressed w/ no input
                   
                   ghex16:
00C5: 7A 00                 mov     r2, #0          ; start out with 0
00C7: 7B 00                 mov     r3, #0
00C9: 7C 04                 mov     r4, #4          ; number of digits left
00CB: C2 D5                 clr     psw.5
                   
                   ghex16c:
00CD: 11 59                 acall   cin_filter_h
00CF: 31 8E                 acall   upper
00D1: B4 1B 07              cjne    a, #27, ghex16d
00D4: D3                    setb    c               ; handle esc key
00D5: E4                    clr     a
00D6: F5 83                 mov     dph, a
00D8: F5 82                 mov     dpl, a
00DA: 22                    ret
                   ghex16d:
00DB: B4 08 02              cjne    a, #8, ghex16f
00DE: 80 03                 sjmp    ghex16k
                   ghex16f:
00E0: B4 7F 0C              cjne    a, #127, ghex16g        ; handle backspace
                   ghex16k:
00E3: BC 04 02              cjne    r4, #4, ghex16e                 ; have they
00E6: 80 E5                 sjmp    ghex16c
                   ghex16e:
00E8: 11 6A                 acall   cout
00EA: 31 30                 acall   ghex16y
00EC: 0C                    inc     r4
00ED: 80 DE                 sjmp    ghex16c
                   ghex16g:
00EF: B4 0D 10              cjne    a, #13, ghex16i                 ; return ke
00F2: 8B 83                 mov     dph, r3
00F4: 8A 82                 mov     dpl, r2
00F6: BC 04 07              cjne    r4, #4, ghex16h
00F9: E4                    clr     a
00FA: F5 83                 mov     dph, a
00FC: F5 82                 mov     dpl, a
00FE: D2 D5                 setb    psw.5
                   ghex16h:
0100: C3                    clr     c
0101: 22                    ret
                   ghex16i:
0102: FD                    mov     r5, a                   ; keep copy of orig
0103: 31 41                 acall   asc2hex
0105: 40 C6                 jc      ghex16c
0107: CD                    xch     a, r5
0108: 12 00 6A              lcall   cout
010B: ED                    mov     a, r5
010C: C0 E0                 push    acc
010E: 31 1F                 acall   ghex16x
0110: D0 E0                 pop     acc
0112: 2A                    add     a, r2
0113: FA                    mov     r2, a
0114: E4                    clr     a
0115: 3B                    addc    a, r3
0116: FB                    mov     r3, a
0117: DC B4                 djnz    r4, ghex16c
0119: C3                    clr     c
011A: 8A 82                 mov     dpl, r2
011C: 8B 83                 mov     dph, r3
011E: 22                    ret
                   
                   ghex16x:
                            ; multiply r3-r2 by 16 (shift left by 4)
011F: EB                    mov     a, r3
0120: C4                    swap    a
0121: 54 F0                 anl     a, #11110000b
0123: FB                    mov     r3, a
0124: EA                    mov     a, r2
0125: C4                    swap    a
0126: 54 0F                 anl     a, #00001111b
0128: 4B                    orl     a, r3
0129: FB                    mov     r3, a
012A: EA                    mov     a, r2
012B: C4                    swap    a
012C: 54 F0                 anl     a, #11110000b
012E: FA                    mov     r2, a
012F: 22                    ret
                   
                   ghex16y:
                            ; divide r3-r2 by 16 (shift right by 4)
0130: EA                    mov     a, r2
0131: C4                    swap    a
0132: 54 0F                 anl     a, #00001111b
0134: FA                    mov     r2, a
0135: EB                    mov     a, r3
0136: C4                    swap    a
0137: 54 F0                 anl     a, #11110000b
0139: 4A                    orl     a, r2
013A: FA                    mov     r2, a
013B: EB                    mov     a, r3
013C: C4                    swap    a
013D: 54 0F                 anl     a, #00001111b
013F: FB                    mov     r3, a
0140: 22                    ret
                   
                   asc2hex:
                            ; carry set if invalid input
0141: 24 D0                 add     a, #208
0143: 50 14                 jnc     hex_not
0145: 24 F6                 add     a, #246
0147: 40 04                 jc      hex_maybe
0149: 24 0A                 add     a, #10
014B: C3                    clr     c
014C: 22                    ret
                   hex_maybe:
014D: 24 F9                 add     a, #249
014F: 50 08                 jnc     hex_not
0151: 24 FA                 add     a, #250
0153: 40 04                 jc      hex_not
0155: 24 10                 add     a, #16
0157: C3                    clr     c
0158: 22                    ret
                   hex_not:
0159: D3                    setb    c
015A: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                   ; Highly code efficient resursive call phex contributed
                   ; by Alexander B. Alexandrov <abalex@cbr.spb.ru>
                   
                   phex:
                   phex8:
015B: 31 5D                 acall   phex_b
                   phex_b:
015D: C4                    swap    a               ; SWAP A will be twice => A
                   phex1:
015E: C0 E0                 push    acc
0160: 54 0F                 anl     a, #15
0162: 24 90                 add     a, #0x90        ; acc is 0x9X, where X is h
0164: D4                    da      a               ; if A to F, C=1 and lower 
0165: 34 40                 addc    a, #0x40
0167: D4                    da      a
0168: 11 6A                 acall   cout
016A: D0 E0                 pop     acc
016C: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                   phex16:
016D: C0 E0                 push    acc
016F: E5 83                 mov     a, dph
0171: 31 5B                 acall   phex
0173: E5 82                 mov     a, dpl
0175: 31 5B                 acall   phex
0177: D0 E0                 pop     acc
0179: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                   ; a not so well documented feature of pstr is that you can p
                   ; multiple consecutive strings without needing to reload dpt
                   ; (which takes 3 bytes of code!)... this is useful for inser
                   ; numbers or spaces between strings.
                   
                   pstr:
017A: C0 E0                 push    acc
                   pstr1:
017C: E4                    clr     a
017D: 93                    movc    a, @a+dptr
017E: A3                    inc     dptr
017F: 60 0A                 jz      pstr2
0181: A2 E7                 mov     c, acc.7
0183: 54 7F                 anl     a, #0x7F
0185: 11 6A                 acall   cout
0187: 40 02                 jc      pstr2
0189: 80 F1                 sjmp    pstr1
                   pstr2:
018B: D0 E0                 pop     acc
018D: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                   ; converts the ascii code in Acc to uppercase, if it is lowe
                   ; Code efficient (saves 6 byes) upper contributed
                   ; by Alexander B. Alexandrov <abalex@cbr.spb.ru>
                   
                   upper:
018E: B4 61 00              cjne    a, #97, upper2
                   upper2:
0191: 40 07                 jc      upper4          ; end if acc < 97
0193: B4 7B 00              cjne    a, #123, upper3
                   upper3:
0196: 50 02                 jnc     upper4          ; end if acc >= 123
0198: 24 E0                 add     a, #224                 ; convert to upperc
                   upper4:
019A: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                   lenstr:
019B: 78 00                 mov     r0, #0          ; returns length of a strin
019D: C0 E0                 push    acc
                   lenstr1:
019F: E4                    clr     a
01A0: 93                    movc    a,@a+dptr
01A1: 60 08                 jz      lenstr2
01A3: A2 E7                 mov     c,acc.7
01A5: 08                    inc     r0
01A6: 40 03                 Jc      lenstr2
01A8: A3                    inc     dptr
01A9: 80 F4                 sjmp    lenstr1
                   lenstr2:
01AB: D0 E0                 pop     acc
01AD: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                   ; checks to see if <ESC> is waiting on serial port
                   ; C=clear if no <ESC>, C=set if <ESC> pressed
                   ; buffer is flushed
                   
                   esc:
01AE: C0 E0                 push    acc
01B0: C3                    clr     c
01B1: 30 98 08              jnb     ri,esc2
01B4: E5 99                 mov     a,sbuf
01B6: B4 1B 01              cjne    a,#27,esc1
01B9: D3                    setb    c
                   esc1:
01BA: C2 98                 clr     ri
                   esc2:
01BC: D0 E0                 pop     acc
01BE: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                   menu:
                   ; first we print out the prompt, which isn't as simple
                   ; as it may seem, since external code can add to the
                   ; prompt, so we've got to find and execute all of 'em.
01BF: 90 0C 23              mov     dptr, #prompt1          ; give 'em the firs
01C2: 11 45                 acall   pcstr_h
01C4: EF                    mov     a, r7
01C5: 31 5B                 acall   phex
01C7: EE                    mov     a, r6
01C8: 31 5B                 acall   phex
01CA: 90 0C 2B              mov      dptr, #prompt2
01CD: 31 7A                 acall   pstr
                   
                   ; now we're finally past the prompt, so let's get some input
01CF: 11 59                 acall   cin_filter_h            ; get the input, fi
01D1: B4 3A 04              cjne    a, #':', menu0
01D4: 51 B8                 acall   dnld_now
01D6: 80 E7                 sjmp    menu
                   menu0:
01D8: 31 8E                 acall   upper
                   
                   ; push return address onto stack so we can just jump to the 
01DA: 75 F0 BF              mov     b, #(menu & 255)        ; we push the retur
01DD: C0 F0                 push    b                       ; to save code late
01DF: 75 F0 01              mov     b, #(menu >> 8)                 ; if bogus 
01E2: C0 F0                 push    b                       ; another prompt.
                   
                   ; first we'll look through memory for a program header that 
                   ; it's a user installed command which matches what the user 
                   
                   ; user installed commands need to avoid changing R6/R7, whic
                   ; the memory pointer. The stack pointer can't be changed obv
                   ; all the other general purpose registers should be availabl
                   ; user commands to alter as they wish.
                   
                   menux:
01E4: F5 F0                 mov     b, a            ; now search for external c
01E6: 90 10 00              mov     dptr, #bmem
                   menux1:
01E9: 12 07 85              lcall   find
01EC: 50 24                 jnc     menuxend        ; searched all the commands
01EE: 75 82 04              mov     dpl, #4
01F1: E4                    clr     a
01F2: 93                    movc    a,@a+dptr
01F3: B4 FE 15              cjne    a, #254, menux2         ; only FE is an ext
01F6: 05 82                 inc     dpl
01F8: E4                    clr     a
01F9: 93                    movc    a,@a+dptr
01FA: B5 F0 0E              cjne    a, b, menux2    ; only run if they want it
01FD: 11 68                 acall   space
01FF: 75 82 20              mov     dpl, #32
0202: 31 7A                 acall   pstr            ; print command name
0204: 11 74                 acall   newline
0206: 75 82 40              mov     dpl, #64
0209: E4                    clr     a
020A: 73                    jmp     @a+dptr                 ; take a leap of fa
                   menux2:
020B: 05 83                 inc     dph
020D: E5 83                 mov     a, dph
020F: B4 00 D7              cjne    a, #((emem+1) >> 8) & 255, menux1
                   menuxend:
0212: E5 F0                 mov     a, b
                   
                   ; since we didn't find a user installed command, use the bui
                   
                   menu1a:
                   menu1b:
0214: B4 3F 07              cjne    a, #help_key, menu1c
0217: 90 0D 8B              mov     dptr, #help_cmd2
021A: 11 45                 acall   pcstr_h
021C: A1 BF                 ajmp    help
                   menu1c:
021E: B4 4D 07              cjne    a, #dir_key, menu1d
0221: 90 0D 93              mov     dptr, #dir_cmd
0224: 11 45                 acall   pcstr_h
0226: 81 AA                 ajmp    dir
                   menu1d:
0228: B4 52 07              cjne    a, #run_key, menu1e
022B: 90 0D 98              mov     dptr, #run_cmd
022E: 11 45                 acall   pcstr_h
0230: A1 25                 ajmp    run
                   menu1e:
0232: B4 44 07              cjne    a, #dnld_key, menu1f
0235: 90 0D 9C              mov     dptr, #dnld_cmd
0238: 11 45                 acall   pcstr_h
023A: 41 9B                 ajmp    dnld
                   menu1f:
023C: B4 55 07              cjne    a, #upld_key, menu1g
023F: 90 0D 9F              mov     dptr, #upld_cmd
0242: 11 45                 acall   pcstr_h
0244: C1 59                 ajmp    upld
                   menu1g:
0246: B4 4E 07              cjne    a, #nloc_key, menu1h
0249: 90 0D A2              mov     dptr, #nloc_cmd
024C: 11 45                 acall   pcstr_h
024E: E1 4C                 ajmp    nloc
                   menu1h:
0250: B4 4A 07              cjne    a, #jump_key, menu1i
0253: 90 0D A6              mov     dptr, #jump_cmd
0256: 11 45                 acall   pcstr_h
0258: 81 05                 ajmp    jump
                   menu1i:
025A: B4 48 07              cjne    a, #dump_key, menu1j
025D: 90 0D AC              mov     dptr, #dump_cmd
0260: 11 45                 acall   pcstr_h
0262: 81 35                 ajmp    dump
                   menu1j:
0264: B4 45 07              cjne    a, #edit_key, menu1k
0267: 90 0D B8              mov     dptr, #edit_cmd
026A: 11 45                 acall   pcstr_h
026C: 81 76                 ajmp    edit
                   menu1k:
026E: B4 43 07              cjne    a, #clrm_key, menu1l
0271: 90 0D BD              mov     dptr, #clrm_cmd
0274: 11 45                 acall   pcstr_h
0276: E1 2A                 ajmp    clrm
                   menu1l:
0278: B4 49 08              cjne    a, #intm_key, menu1m
027B: 90 0D B2              mov     dptr, #intm_cmd
027E: 11 45                 acall   pcstr_h
0280: 02 07 5C              ljmp    intm
                   menu1m:
0283: B4 3C 08              cjne    a, #eio77_key, menu1n
0286: 90 0D C1              mov     dptr, #eio77_cmd
0289: 11 45                 acall   pcstr_h
028B: 02 07 7D              ljmp    eio77
                   menu1n:
028E: B4 3E 08              cjne    a, #dio77_key, menu1o
0291: 90 0D D0              mov     dptr, #dio77_cmd
0294: 11 45                 acall   pcstr_h
0296: 02 07 81              ljmp    dio77
                   menu1o:
                   
                   ; invalid input, no commands to run...
                   ; at this point, we have not found
                   ; anything to run, so we give up.
                   ; remember, we pushed menu, so newline
                   ; will just return to menu.
                   
                   menu_end:
0299: 01 74                 ajmp    newline
                   
                   ;---------------------------------------------------------;
                   
                   ; dnlds1 = "Begin sending Intel HEX format file <ESC> to abo
                   ; dnlds2 = "Download aborted"
                   ; dnlds3 = "Download completed"
                   
                   ; 16 byte parameter table: (eight 16 bit values)
                   ;  *   0 = lines received
                   ;  *   1 = bytes received
                   ;  *   2 = bytes written
                   ;  *   3 = bytes unable to write
                   ;  *   4 = incorrect checksums
                   ;  *   5 = unexpected begin of line
                   ;  *   6 = unexpected hex digits (while waiting for bol)
                   ;  *   7 = unexpected non-hex digits (in middle of a line)
                   
                   dnld:
029B: 90 0C BD              mov     dptr, #dnlds1            
029E: 11 45                 acall   pcstr_h                 ;"begin sending fil
02A0: 71 FC                 acall   dnld_init
                            
                   dnld1:
                            ; look for begining of line marker ':'
02A2: 11 5E                 acall   cin
02A4: B4 1B 02              cjne    a, #27, dnld2   ; Test for escape
02A7: 80 70                 sjmp    dnld_esc
                   
                   dnld2:
02A9: B4 3A 02              cjne    a, #':', dnld2b
02AC: 80 10                 sjmp    dnld2d
                   dnld2b:
                            ; check to see if it's a hex digit, error if it is
02AE: 31 41                 acall   asc2hex
02B0: 40 F0                 jc      dnld1
02B2: 79 06                 mov     r1, #6
02B4: 71 2B                 acall   dnld_inc
02B6: 80 EA                 sjmp    dnld1
                   
                   dnld_now:
                            ; entry point for main menu detecting ":" character
02B8: 74 3A                 mov     a, #':'
02BA: 11 6A                 acall   cout
02BC: 71 FC                 acall   dnld_init
                   
                   dnld2d:
02BE: 79 00                 mov     r1, #0
02C0: 71 2B                 acall   dnld_inc
                   
                   dnld3:
                            ; begin taking in the line of data
                            ; mov   a, #'.'
                            ; acall         cout
02C2: 7C 00                 mov     r4, #0          ; r4 will count up checksum
02C4: 71 4A                 acall   dnld_ghex
02C6: F8                    mov     r0, a           ; R0 = # of data bytes
                            ; mov   a, #'.'
                            ; acall         cout
02C7: 71 4A                 acall   dnld_ghex
02C9: F5 83                 mov     dph, a          ; High byte of load address
02CB: 71 4A                 acall   dnld_ghex
02CD: F5 82                 mov     dpl, a          ; Low byte of load address
02CF: 71 4A                 acall   dnld_ghex       ; Record type
02D1: B4 01 02              cjne    a, #1, dnld4    ; End record?
02D4: 80 29                 sjmp    dnld_end
                   dnld4:
02D6: 70 1E                 jnz     dnld_unknown    ; is it a unknown record ty
                   dnld5:
02D8: E8                    mov     a, r0
02D9: 60 10                 jz      dnld_get_cksum
02DB: 71 4A                 acall   dnld_ghex       ; Get data byte
02DD: FA                    mov     r2, a
02DE: 79 01                 mov     r1, #1
02E0: 71 2B                 acall   dnld_inc        ; count total data bytes re
02E2: EA                    mov     a, r2
02E3: F0                    movx    @dptr, a
02E4: 79 02                 mov     r1, #2
02E6: 71 2B                 acall   dnld_inc
02E8: A3                    inc     dptr
02E9: D8 ED                 djnz    r0, dnld5
                   dnld_get_cksum:
02EB: 71 4A                 acall   dnld_ghex       ; get checksum
02ED: EC                    mov     a, r4
02EE: 60 B2                 jz      dnld1           ; should always add to zero
                   dnld_sumerr:
02F0: 79 04                 mov     r1, #4
02F2: 71 2B                 acall   dnld_inc        ; all we can do it count # 
02F4: 80 AC                 sjmp    dnld1
                   
                   dnld_unknown:    ; handle unknown line type
02F6: E8                    mov     a, r0
02F7: 60 F2                 jz      dnld_get_cksum  ; skip data if size is zero
                   dnld_ukn2:
02F9: 71 4A                 acall   dnld_ghex       ; consume all of unknown da
02FB: D8 FC                 djnz    r0, dnld_ukn2
02FD: 80 EC                 sjmp    dnld_get_cksum
                   
                   dnld_end:
                            ; handles the proper end-of-download marker
02FF: E8                    mov     a, r0
0300: 60 04                 jz      dnld_end_3      ; should usually be zero
                   dnld_end_2:
0302: 71 4A                 acall   dnld_ghex       ; consume all of useless da
0304: D8 F3                 djnz    r0, dnld_ukn2
                   dnld_end_3:
0306: 71 4A                 acall   dnld_ghex       ; get the last checksum
0308: EC                    mov     a, r4
0309: 70 E5                 jnz     dnld_sumerr
030B: 71 22                 acall   dnld_dly
030D: 90 0C DC              mov     dptr, #dnlds3
0310: 11 45                 acall   pcstr_h                 ;"download went ok.
                            ; consume any cr or lf character that may have been
                            ; on the end of the last line
0312: 30 98 7A              jnb     ri, dnld_sum
0315: 11 5E                 acall   cin
0317: 80 76                 sjmp    dnld_sum
                   
                   dnld_esc:
                            ; handle esc received in the download stream
0319: 71 22                 acall   dnld_dly
031B: 90 0C D4              mov     dptr, #dnlds2    
031E: 11 45                 acall   pcstr_h                 ;"download aborted.
0320: 80 6D                 sjmp    dnld_sum
                   
                   ; a short delay since most terminal emulation programs
                   ; won't be ready to receive anything immediately after
                   ; they've transmitted a file... even on a fast Pentium(tm)
                   ; machine with 16550 uarts!
                   
                   dnld_dly:
0322: 78 00                 mov     r0, #0
                   dnlddly2:
0324: 79 00                 mov     r1, #0
0326: D9 FE                 djnz    r1, *           ; roughly 128k cycles, appo
0328: D8 FA                 djnz    r0, dnlddly2
032A: 22                    ret
                   
                   ; increment parameter specified by R1
                   ; note, values in Acc and R1 are destroyed
                   
                   dnld_inc:
032B: E9                    mov     a, r1
032C: 54 07                 anl     a, #00000111b   ; just in case
032E: 23                    rl      a
032F: 24 08                 add     a, #dnld_parm
0331: F9                    mov     r1, a           ; now r1 points to lsb
0332: 07                    inc     @r1
0333: E7                    mov     a, @r1
0334: 70 02                 jnz     dnldin2
0336: 09                    inc     r1
0337: 07                    inc     @r1
                   dnldin2:
0338: 22                    ret
                   
                   ; get parameter, and inc to next one (@r1)
                   ; carry clear if parameter is zero.
                   ; 16 bit value returned in dptr
                   
                   dnld_gp:
0339: D3                    setb    c
033A: 87 82                 mov     dpl, @r1
033C: 09                    inc     r1
033D: 87 83                 mov     dph, @r1
033F: 09                    inc     r1
0340: E5 82                 mov     a, dpl
0342: 70 05                 jnz     dnldgp2
0344: E5 83                 mov     a, dph
0346: 70 01                 jnz     dnldgp2
0348: C3                    clr     c
                   dnldgp2:
0349: 22                    ret
                   
                   ; a special version of ghex just for the download. Does not
                   ; look for carriage return or backspace. Handles ESC key by
                   ; poping the return address (I know, nasty, but it saves man
                   ; bytes of code in this 4k ROM) and then jumps to the esc
                   ; key handling.  This ghex doesn't echo characters, and if i
                   ; sees ':', it pops the return and jumps to an error handler
                   ; for ':' in the middle of a line. Non-hex digits also jump
                   ; to error handlers, depending on which digit.
                   
                   dnld_ghex:
                   dnldgh1:
034A: 11 5E                 acall   cin
034C: 31 8E                 acall   upper
034E: B4 1B 06              cjne    a, #27, dnldgh3
                   dnldgh2:
0351: D0 E0                 pop     acc
0353: D0 E0                 pop     acc
0355: 80 C2                 sjmp    dnld_esc
                   dnldgh3:
0357: B4 3A 0A              cjne    a, #':', dnldgh5
                   dnldgh4:
035A: 79 05                 mov     r1, #5          ; handle unexpected beginni
035C: 71 2B                 acall   dnld_inc
035E: D0 E0                 pop     acc
0360: D0 E0                 pop     acc
0362: 41 C2                 ajmp    dnld3           ; and now we're on a new li
                   dnldgh5:
0364: 31 41                 acall   asc2hex
0366: 50 06                 jnc     dnldgh6
0368: 79 07                 mov     r1, #7
036A: 71 2B                 acall   dnld_inc
036C: 80 DC                 sjmp    dnldgh1
                   dnldgh6:
036E: FA                    mov     r2, a           ; keep first digit in r2
                   dnldgh7:
036F: 11 5E                 acall   cin
0371: 31 8E                 acall   upper
0373: B4 1B 02              cjne    a, #27, dnldgh8
0376: 80 D9                 sjmp    dnldgh2
                   dnldgh8:
0378: B4 3A 02              cjne    a, #':', dnldgh9
037B: 80 DD                 sjmp    dnldgh4
                   dnldgh9:
037D: 31 41                 acall   asc2hex
037F: 50 06                 jnc     dnldghA
0381: 79 07                 mov     r1, #7
0383: 71 2B                 acall   dnld_inc
0385: 80 E8                 sjmp    dnldgh7
                   dnldghA:
0387: CA                    xch     a, r2
0388: C4                    swap    a
0389: 4A                    orl     a, r2
038A: FA                    mov     r2, a
038B: 2C                    add     a, r4           ; add into checksum
038C: FC                    mov     r4, a
038D: EA                    mov     a, r2           ; return value in acc
038E: 22                    ret
                   
                   ; dnlds4 =  "Summary:"
                   ; dnlds5 =  " lines received"
                   ; dnlds6a = " bytes received"
                   ; dnlds6b = " bytes written"
                   
                   ; print out download summary
                   
                   dnld_sum:
038F: EE                    mov     a, r6
0390: C0 E0                 push    acc
0392: EF                    mov     a, r7
0393: C0 E0                 push    acc
0395: 90 0C E3              mov     dptr, #dnlds4
0398: 11 45                 acall   pcstr_h
039A: 79 08                 mov     r1, #dnld_parm
039C: 7E EC                 mov     r6, #dnlds5 & 255
039E: 7F 0C                 mov     r7, #dnlds5 >> 8
03A0: 71 F8                 acall   dnld_i0
03A2: 7E F2                 mov     r6, #dnlds6a & 255
03A4: 7F 0C                 mov     r7, #dnlds6a >> 8
03A6: 71 F8                 acall   dnld_i0
03A8: 7E F7                 mov     r6, #dnlds6b & 255
03AA: 7F 0C                 mov     r7, #dnlds6b >> 8
03AC: 71 F8                 acall   dnld_i0
                   
                   ; now print out error summary
                   
                   dnld_err:
03AE: 7A 05                 mov     r2, #5
                   dnlder2:
03B0: 71 39                 acall   dnld_gp
03B2: 40 09                 jc      dnlder3                 ; any errors?
03B4: DA FA                 djnz    r2, dnlder2
                   ; no errors, so we print the nice message
03B6: 90 0D 33              mov     dptr, #dnlds13
03B9: 11 45                 acall   pcstr_h
03BB: 80 25                 sjmp    dlnd_sum_done
                   
                   dnlder3:
                   ; there were errors, so now we print 'em
03BD: 90 0D 02              mov     dptr, #dnlds7
03C0: 11 45                 acall   pcstr_h
                   ; but let's not be nasty... only print if necessary
03C2: 79 0E                 mov     r1, #(dnld_parm+6)
03C4: 7E 06                 mov     r6, #dnlds8 & 255
03C6: 7F 0D                 mov     r7, #dnlds8 >> 8
03C8: 71 EA                 acall   dnld_item
03CA: 7E 17                 mov     r6, #dnlds9 & 255
03CC: 7F 0D                 mov     r7, #dnlds9 >> 8
03CE: 71 EA                 acall   dnld_item
03D0: 7E 1F                 mov     r6, #dnlds10 & 255
03D2: 7F 0D                 mov     r7, #dnlds10 >> 8
03D4: 71 EA                 acall   dnld_item
03D6: 7E 25                 mov     r6, #dnlds11 & 255
03D8: 7F 0D                 mov     r7, #dnlds11 >> 8
03DA: 71 EA                 acall   dnld_item
03DC: 7E 2A                 mov     r6, #dnlds12 & 255
03DE: 7F 0D                 mov     r7, #dnlds12 >> 8
03E0: 71 EA                 acall   dnld_item
                   dlnd_sum_done:
03E2: D0 E0                 pop     acc
03E4: FF                    mov     r7, a
03E5: D0 E0                 pop     acc
03E7: FE                    mov     r6, a
03E8: 01 74                 ajmp    newline
                   
                   dnld_item:
03EA: 71 39                 acall   dnld_gp                 ; error conditions
03EC: 50 09                 jnc     dnld_i3
                   dnld_i2:
03EE: 11 68                 acall   space
03F0: 12 09 0F              lcall   pint16u
03F3: 11 06                 acall   r6r7todptr
03F5: 11 45                 acall   pcstr_h
                   dnld_i3:
03F7: 22                    ret
                   
                   dnld_i0:
03F8: 71 39                 acall   dnld_gp                 ; non-error conditi
03FA: 80 F2                 sjmp    dnld_i2
                   
                   ; init all dnld parms to zero.
                   
                   dnld_init:
03FC: 78 08                 mov     r0, #dnld_parm
                   dnld0:
03FE: 76 00                 mov     @r0, #0
0400: 08                    inc     r0
0401: B8 18 FA              cjne    r0, #dnld_parm + 16, dnld0
0404: 22                    ret
                   
                   ; dnlds7:  = "Errors:"
                   ; dnlds8:  = " bytes unable to write"
                   ; dnlds9:  = " incorrect checksums"
                   ; dnlds10: = " unexpected begin of line"
                   ; dnlds11: = " unexpected hex digits"
                   ; dnlds12: = " unexpected non-hex digits"
                   ; dnlds13: = "No errors detected"
                   
                   ;---------------------------------------------------------;
                   
                   jump:
0405: 90 0C 65              mov     dptr, #prompt8
0408: 11 45                 acall   pcstr_h
040A: 11 06                 acall   r6r7todptr
040C: 31 6D                 acall   phex16
040E: 90 0C 33              mov     dptr, #prompt4
0411: 11 45                 acall   pcstr_h
0413: 11 C5                 acall   ghex16
0415: 20 D5 06              jb      psw.5, jump3
0418: 50 02                 jnc     jump2
041A: E1 25                 ajmp    abort2
                   jump2:
041C: 11 0E                 acall   dptrtor6r7
                   jump3:
041E: 11 74                 acall   newline
0420: 90 0D 41              mov     dptr, #runs1
0423: 11 45                 acall   pcstr_h
0425: 11 06                 acall   r6r7todptr
                   
                   jump_doit:
                            ; jump to user code @dptr (this used by run command
0427: E4                    clr     a
0428: F5 D0                 mov     psw, a
042A: F5 F0                 mov     b, a
042C: 78 07                 mov     r0, #7
                   jditclr:
042E: F6                    mov     @r0, a          ; clear r7 to r1
042F: D8 FD                 djnz    r0, jditclr     ; clear r0
0431: 75 81 07              mov     sp, #7          ; start w/ sp=7, like a rea
0434: 73                    jmp     @a+dptr
                   
                   ;---------------------------------------------------------;
                   
                   dump:    
0435: 7A 10                 mov     r2, #16                 ; number of lines t
0437: 11 72                 acall   newline2
                   dump1:
0439: 11 06                 acall   r6r7todptr
043B: 31 6D                 acall   phex16          ; tell 'em the memory locat
043D: 74 3A                 mov     a,#':'
043F: 11 1E                 acall   cout_sp
0441: 7B 10                 mov     r3, #16                 ; r3 counts # of by
0443: 11 06                 acall   r6r7todptr
                   dump2:
0445: E4                    clr     a
0446: 93                    movc    a, @a+dptr
0447: A3                    inc     dptr
0448: 31 5B                 acall   phex            ; print each byte in hex
044A: 11 68                 acall   space
044C: DB F7                 djnz    r3, dump2
044E: 11 66                 acall   dspace          ; print a couple extra spac
0450: 7B 10                 mov     r3, #16
0452: 11 06                 acall   r6r7todptr
                   dump3:
0454: E4                    clr     a
0455: 93                    movc    a, @a+dptr
0456: A3                    inc     dptr
0457: 54 7F                 anl     a, #01111111b   ; avoid unprintable charact
0459: B4 7F 01              cjne    a, #127, dump3b
045C: E4                    clr     a               ; avoid 127/255 (delete/rub
                   dump3b:
045D: 24 E0                 add     a, #224
045F: 40 01                 jc      dump4
0461: E4                    clr     a               ; avoid control characters
                   dump4:
0462: 24 20                 add     a, #32
0464: 11 6A                 acall   cout
0466: DB EC                 djnz    r3, dump3
0468: 11 74                 acall   newline
046A: D1 E1                 acall   line_dly
046C: 11 0E                 acall   dptrtor6r7
046E: 31 AE                 acall   esc
0470: 40 02                 jc      dump5
0472: DA C5                 djnz    r2, dump1       ; loop back up to print nex
                   dump5:
0474: 01 74                 ajmp    newline
                   
                   ;---------------------------------------------------------;
                   
                   ; edit external ram
                   
                   edit:
0476: 90 0C A7              mov     dptr, #edits1
0479: 11 45                 acall   pcstr_h
047B: 11 06                 acall   r6r7todptr
                   edit1:
047D: 31 6D                 acall   phex16
047F: 74 3A                 mov     a,#':'
0481: 11 1E                 acall   cout_sp
0483: 74 28                 mov     a,#'('
0485: 11 6A                 acall   cout
0487: 11 0E                 acall   dptrtor6r7
0489: E4                    clr     a
048A: 93                    movc    a, @a+dptr
048B: 31 5B                 acall   phex
048D: 90 0C 80              mov     dptr,#prompt10
0490: 11 45                 acall   pcstr_h
0492: 11 81                 acall   ghex
0494: 20 D5 0E              jb      psw.5,edit2
0497: 40 0C                 jc      edit2
0499: 11 06                 acall   r6r7todptr
049B: F0                    movx    @dptr, a
049C: 11 74                 acall   newline
049E: 11 06                 acall   r6r7todptr
04A0: A3                    inc     dptr
04A1: 11 0E                 acall   dptrtor6r7
04A3: 81 7D                 ajmp    edit1
                   edit2:
04A5: 90 0C B2              mov     dptr,#edits2
04A8: 01 45                 ajmp    pcstr_h
                   
                   ;---------------------------------------------------------;
                   
                   dir:
04AA: 90 0C 6F              mov     dptr, #prompt9
04AD: 11 45                 acall   pcstr_h
04AF: 78 15                 mov     r0, #21
                   dir0a:
04B1: 11 68                 acall   space
04B3: D8 FC                 djnz    r0, dir0a
04B5: 90 0C 76              mov     dptr, #prompt9b
04B8: 11 45                 acall   pcstr_h
                   
04BA: 75 83 10              mov     dph, #(bmem >> 8)
                   dir1:
04BD: 12 07 85              lcall   find            ; find the next program in 
04C0: 40 02                 jc      dir2
                   dir_end:
04C2: 01 74                 ajmp    newline                 ; we're done if no 
                   dir2:
04C4: 11 66                 acall   dspace
04C6: 75 82 20              mov     dpl, #32        ; print its name
04C9: 31 7A                 acall   pstr
04CB: 75 82 20              mov     dpl, #32        ; how long is the name
04CE: 31 9B                 acall   lenstr
04D0: 74 21                 mov     a, #33
04D2: C3                    clr     c
04D3: 98                    subb    a, r0
04D4: F8                    mov     r0, a
04D5: 74 20                 mov     a, #' '                 ; print the right #
                   dir3:
04D7: 11 6A                 acall   cout
04D9: D8 FC                 djnz    r0, dir3
04DB: 75 82 00              mov     dpl, #0
04DE: 31 6D                 acall   phex16          ; print the memory location
04E0: 78 06                 mov     r0, #6
04E2: 74 20                 mov     a, #' '
                   dir4:
04E4: 11 6A                 acall   cout
04E6: D8 FC                 djnz    r0, dir4
04E8: 75 82 04              mov     dpl, #4                 ; now figure out wh
04EB: E4                    clr     a
04EC: 93                    movc    a, @a+dptr
04ED: AA 83                 mov     r2, dph                 ; save this, we're 
                   
                   dir5:
04EF: B4 FE 05              cjne    a, #254, dir5b
04F2: 90 0D 79              mov     dptr, #type1    ; it's an external command
04F5: 80 18                 sjmp    dir7
                   dir5b:
04F7: B4 FD 05              cjne    a, #253, dir5c
                   dir5bb:
04FA: 90 0D 80              mov     dptr, #type4    ; it's a startup routine
04FD: 80 10                 sjmp    dir7
                   dir5c:
04FF: B4 23 05              cjne    a, #35, dir5d
0502: 90 0D 7D              mov     dptr, #type2    ; it's an ordinary program
0505: 80 08                 sjmp    dir7
                   dir5d:
0507: B4 F9 02              cjne    a, #249, dir5e
050A: 80 EE                 sjmp    dir5bb
                   dir5e:
                   dir6:
050C: 90 0D 87              mov     dptr, #type5    ; who knows what the hell i
                   
                   dir7:
050F: 11 45                 acall   pcstr_h                 ; print out the typ
0511: 8A 83                 mov     dph, r2                 ; go back and find 
0513: 11 74                 acall   newline
0515: 74 FF                 mov     a, #(emem >> 8)
0517: B5 83 02              cjne    a, dph, dir8    ; did we just print the las
051A: 81 C2                 ajmp    dir_end
                   dir8:
051C: 05 83                 inc     dph
051E: E5 83                 mov     a, dph
0520: B4 00 9A              cjne    a, #((emem+1) >> 8) & 255, dir1
0523: 81 C2                 ajmp    dir_end
                   
                   ; type1=Ext Command
                   ; type4=Startup
                   ; type2=Program
                   ; type5=???
                   
                   ;---------------------------------------------------------;
                   
                   run:
0525: 11 72                 acall   newline2
0527: 7A FF                 mov     r2, #255        ; first print the menu, cou
0529: 90 10 00              mov     dptr, #bmem
052C: 15 83                 dec     dph
                   run2:
052E: 05 83                 inc     dph
0530: E5 83                 mov     a, dph
0532: B4 00 02              cjne    a, #((emem+1) >> 8) & 255, run2b
0535: 80 22                 sjmp    run3
                   run2b:
0537: 12 07 85              lcall   find
053A: 50 1D                 jnc     run3            ; have we found 'em all??
053C: 75 82 04              mov     dpl, #4
053F: E4                    clr     a
0540: 93                    movc    a, @a+dptr
0541: 44 03                 orl     a, #00000011b
0543: F4                    cpl     a
0544: 60 E8                 jz      run2            ; this one doesn't run... f
0546: 11 66                 acall   dspace
0548: 0A                    inc     r2
0549: 74 41                 mov     a, #'A'                 ; print the key to 
054B: 2A                    add     a, r2
054C: 11 1E                 acall   cout_sp
054E: 11 26                 acall   dash_sp
0550: 75 82 20              mov     dpl, #32
0553: 31 7A                 acall   pstr            ; and the command name
0555: 11 74                 acall   newline
0557: A1 2E                 ajmp    run2            ; and continue doing this
                   run3:
0559: BA FF 05              cjne    r2, #255, run4  ; are there any to run??
055C: 90 0C 3C              mov     dptr, #prompt5
055F: 01 45                 ajmp    pcstr_h
                   run4:
0561: 90 0C 2E              mov     dptr, #prompt3  ; ask the big question!
0564: 11 45                 acall   pcstr_h
0566: 74 41                 mov     a, #'A'
0568: 11 6A                 acall   cout
056A: 11 16                 acall   dash
056C: 74 41                 mov     a, #'A'                 ; such user friendl
056E: 2A                    add     a, r2           ; even tell 'em the choices
056F: 11 6A                 acall   cout
0571: 90 0C 33              mov     dptr, #prompt4
0574: 11 45                 acall   pcstr_h
0576: 11 59                 acall   cin_filter_h
0578: B4 1B 02              cjne    a, #27, run4aa  ; they they hit <ESC>
057B: 01 74                 ajmp    newline
                   run4aa:
057D: FB                    mov     r3, a
057E: 74 1F                 mov     a, #31
0580: C3                    clr     c
0581: 9A                    subb    a, r2
0582: EB                    mov     a, r3
0583: 40 02                 jc      run4a
0585: 31 8E                 acall   upper
                   run4a:
0587: 11 6A                 acall   cout
0589: FB                    mov     r3, a
058A: 11 74                 acall   newline
                            ; check to see if it's under 32, if so convert to u
058C: EB                    mov     a, r3
058D: 24 BF                 add     a, #(256 - 'A')
058F: 50 D0                 jnc     run4            ; if they typed less than '
0591: FB                    mov     r3, a           ; R3 has the number they ty
0592: EA                    mov     a, r2           ; A=R2 has the maximum numb
0593: C3                    clr     c
0594: 9B                    subb    a, r3
0595: 40 CA                 jc      run4            ; if they typed over the ma
0597: 0B                    inc     r3
0598: 90 10 00              mov     dptr, #bmem
059B: 15 83                 dec     dph
                   run5:
059D: 05 83                 inc     dph
059F: E5 83                 mov     a, dph
05A1: B4 00 02              cjne    a, #((emem+1) >> 8) & 255, run5b
05A4: 80 18                 sjmp    run8
                   run5b:
05A6: 12 07 85              lcall   find
05A9: 50 13                 jnc     run8            ; Shouldn't ever do this ju
05AB: 75 82 04              mov     dpl, #4
05AE: E4                    clr     a
05AF: 93                    movc    a, @a+dptr
05B0: 44 03                 orl     a, #00000011b
05B2: F4                    cpl     a
05B3: 60 E8                 jz      run5            ; this one doesn't run... f
05B5: DB E6                 djnz    r3, run5        ; count til we find the one
05B7: 11 74                 acall   newline
05B9: 75 82 40              mov     dpl, #64
05BC: 81 27                 ajmp    jump_doit
                   run8:
05BE: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                   help:
05BF: 90 0D 61              mov     dptr, #help1txt
05C2: 11 45                 acall   pcstr_h
05C4: 7C 3F                 mov     r4, #help_key
05C6: 90 0D 8E              mov     dptr, #help_cmd
05C9: D1 4E                 acall   help2
05CB: 7C 4D                 mov     r4, #dir_key
05CD: 90 0D 93              mov      dptr, #dir_cmd
05D0: D1 4E                 acall   help2
05D2: 7C 52                 mov     r4, #run_key
05D4: 90 0D 98              mov      dptr, #run_cmd
05D7: D1 4E                 acall   help2
05D9: 7C 44                 mov     r4, #dnld_key
05DB: 90 0D 9C              mov      dptr, #dnld_cmd
05DE: D1 4E                 acall   help2
05E0: 7C 55                 mov     r4, #upld_key
05E2: 90 0D 9F              mov      dptr, #upld_cmd
05E5: D1 4E                 acall   help2
05E7: 7C 4E                 mov     r4, #nloc_key
05E9: 90 0D A2              mov      dptr, #nloc_cmd
05EC: D1 4E                 acall   help2
05EE: 7C 4A                 mov     r4, #jump_key
05F0: 90 0D A6              mov      dptr, #jump_cmd
05F3: D1 4E                 acall   help2
05F5: 7C 48                 mov     r4, #dump_key
05F7: 90 0D AC              mov      dptr, #dump_cmd
05FA: D1 4E                 acall   help2
05FC: 7C 49                 mov     r4, #intm_key
05FE: 90 0D B2              mov     dptr, #intm_cmd
0601: D1 4E                 acall   help2
0603: 7C 45                 mov     r4, #edit_key
0605: 90 0D B8              mov      dptr, #edit_cmd
0608: D1 4E                 acall   help2
060A: 7C 43                 mov     r4, #clrm_key
060C: 90 0D BD              mov      dptr, #clrm_cmd
060F: D1 4E                 acall   help2
0611: 7C 3C                 mov     r4, #eio77_key
0613: 90 0D C1              mov     dptr, #eio77_cmd
0616: D1 4E                 acall   help2
0618: 7C 3E                 mov     r4, #dio77_key
061A: 90 0D D0              mov     dptr, #dio77_cmd
061D: D1 4E                 acall   help2
061F: 90 0D 6F              mov     dptr, #help2txt
0622: 11 45                 acall   pcstr_h
0624: 90 10 00              mov     dptr, #bmem
                   help3:
0627: 12 07 85              lcall   find
062A: 50 20                 jnc     help4
062C: 75 82 04              mov     dpl, #4
062F: E4                    clr     a
0630: 93                    movc    a,@a+dptr
0631: B4 FE 11              cjne    a, #254, help3a         ; only FE is an ext
0634: 11 66                 acall   dspace
0636: 05 82                 inc     dpl
0638: E4                    clr     a
0639: 93                    movc    a,@a+dptr
063A: 11 6A                 acall   cout
063C: 11 26                 acall   dash_sp
063E: 75 82 20              mov     dpl, #32
0641: 31 7A                 acall   pstr
0643: 11 74                 acall   newline
                   help3a:
0645: 05 83                 inc     dph
0647: E5 83                 mov     a, dph
0649: B4 00 DB              cjne    a, #((emem+1) >> 8) & 255, help3
                   help4:   
064C: 01 74                 ajmp    newline
                   
                   help2:                           ; print 11 standard lines
064E: 11 66                 acall   dspace          ; given key in R4 and name 
0650: EC                    mov     a, r4
0651: 11 6A                 acall   cout
0653: 11 26                 acall   dash_sp
0655: 11 45                 acall   pcstr_h
0657: 01 74                 ajmp    newline
                   
                   ;---------------------------------------------------------;
                   
                   upld:
0659: D1 F3                 acall   get_mem
                            ; assume we've got the beginning address in r3/r2
                            ; and the final address in r5/r4 (r4=lsb)...
                   
                            ; print out what we'll be doing
065B: 90 0D 4B              mov     dptr, #uplds3
065E: 11 45                 acall   pcstr_h
0660: EB                    mov     a, r3
0661: 31 5B                 acall   phex
0663: EA                    mov     a, r2
0664: 31 5B                 acall   phex
0666: 90 0D 5C              mov      dptr, #uplds4
0669: 11 45                 acall   pcstr_h
066B: ED                    mov     a, r5
066C: 31 5B                 acall   phex
066E: EC                    mov     a, r4
066F: 31 5B                 acall   phex
0671: 11 74                 acall   newline
                   
                            ; need to adjust end location by 1...
0673: 8D 83                 mov     dph, r5
0675: 8C 82                 mov     dpl, r4
0677: A3                    inc     dptr
0678: AC 82                 mov     r4, dpl
067A: AD 83                 mov     r5, dph
                   
067C: 90 0C 5B              mov     dptr, #prompt7
067F: 11 45                 acall   pcstr_h
0681: 11 5E                 acall   cin
0683: B4 1B 02              cjne    a, #27, upld2e
0686: E1 23                 ajmp    abort_it
                   upld2e:
0688: 11 74                 acall   newline
068A: 8A 82                 mov     dpl, r2
068C: 8B 83                 mov     dph, r3
                   
                   upld3:
068E: EC                    mov     a, r4           ; how many more bytes to ou
068F: C3                    clr     c
0690: 95 82                 subb    a, dpl
0692: FA                    mov     r2, a
0693: ED                    mov     a, r5
0694: 95 83                 subb    a, dph
0696: 70 09                 jnz     upld4           ; if >256 left, then do nex
0698: EA                    mov     a, r2
0699: 60 32                 jz      upld7           ; if we're all done
069B: 54 F0                 anl     a, #11110000b
069D: 70 02                 jnz     upld4           ; if >= 16 left, then do ne
069F: 80 02                 sjmp    upld5           ; otherwise just finish it 
                   upld4:
06A1: 7A 10                 mov     r2, #16
                   upld5:
06A3: 74 3A                 mov     a, #':'                 ; begin the line
06A5: 11 6A                 acall   cout
06A7: EA                    mov     a, r2
06A8: 31 5B                 acall   phex            ; output # of data bytes
06AA: 31 6D                 acall   phex16          ; output memory location
06AC: E5 83                 mov     a, dph
06AE: 25 82                 add     a, dpl
06B0: 2A                    add     a, r2
06B1: FB                    mov     r3, a           ; r3 will become checksum
06B2: E4                    clr     a
06B3: 31 5B                 acall   phex            ; output 00 code for data
                   upld6:
06B5: E4                    clr     a
06B6: 93                    movc    a, @a+dptr
06B7: 31 5B                 acall   phex            ; output each byte
06B9: 2B                    add     a, r3
06BA: FB                    mov     r3, a
06BB: A3                    inc     dptr
06BC: DA F7                 djnz    r2, upld6       ; do however many bytes we 
06BE: EB                    mov     a, r3
06BF: F4                    cpl     a
06C0: 04                    inc     a
06C1: 31 5B                 acall   phex            ; and finally the checksum
06C3: 11 74                 acall   newline
06C5: D1 E1                 acall   line_dly
06C7: 31 AE                 acall   esc
06C9: 50 C3                 jnc     upld3           ; keep working if no esc pr
06CB: 80 56                 sjmp    abort_it
                   upld7:
06CD: 74 3A                 mov     a, #':'
06CF: 11 6A                 acall   cout
06D1: E4                    clr     a
06D2: 31 5B                 acall   phex
06D4: 31 5B                 acall   phex
06D6: 31 5B                 acall   phex
06D8: 04                    inc     a
06D9: 31 5B                 acall   phex
06DB: 74 FF                 mov     a, #255
06DD: 31 5B                 acall   phex
                   upld8:
06DF: 01 72                 ajmp    newline2
                   
                   line_dly:
                            ; a brief delay between line while uploading, so th
                            ; receiving host can be slow (i.e. most windows sof
06E1: E8                    mov     a, r0
06E2: C0 E0                 push    acc
06E4: 78 0C                 mov     r0, #line_delay*2
                   line_d2:
06E6: E5 8C                 mov     a, th0          ; get baud rate const
                   line_d3:
06E8: 04                    inc     a
06E9: 00                    nop
06EA: 00                    nop
06EB: 70 FB                 jnz     line_d3
06ED: D8 F7                 djnz    r0, line_d2
06EF: D0 E0                 pop     acc
06F1: F8                    mov     r0, a
06F2: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                   ; this thing gets the begin and end locations for
                   ; a few commands. If an esc or enter w/ no input,
                   ; it pops it's own return and returns to the menu
                   ; (nasty programming, but we need tight code for 4k rom)
                   
                   get_mem:
06F3: 11 72                 acall   newline2
06F5: 90 0C 89              mov     dptr, #beg_str
06F8: 11 45                 acall   pcstr_h
06FA: 11 C5                 acall   ghex16
06FC: 40 21                 jc      pop_it
06FE: 20 D5 1E              jb      psw.5, pop_it
0701: C0 83                 push    dph
0703: C0 82                 push    dpl
0705: 11 74                 acall   newline
0707: 90 0C 93              mov     dptr, #end_str
070A: 11 45                 acall   pcstr_h
070C: 11 C5                 acall   ghex16
070E: AD 83                 mov     r5, dph
0710: AC 82                 mov     r4, dpl
0712: D0 E0                 pop     acc
0714: FA                    mov     r2, a
0715: D0 E0                 pop     acc
0717: FB                    mov     r3, a
0718: 40 05                 jc      pop_it
071A: 20 D5 02              jb      psw.5, pop_it
071D: 01 74                 ajmp    newline
                   
                   pop_it:
071F: D0 E0                 pop     acc
0721: D0 E0                 pop     acc
                   abort_it:
0723: 11 74                 acall   newline
                   abort2:
0725: 90 0C 1B              mov     dptr, #abort
0728: 01 45                 ajmp    pcstr_h
                   
                   ;---------------------------------------------------------;
                   
                   clrm:
072A: D1 F3                 acall   get_mem
072C: 90 0C 9D              mov     dptr, #sure
072F: 11 45                 acall   pcstr_h
0731: 11 59                 acall   cin_filter_h
0733: 31 8E                 acall   upper
0735: B4 59 EB              cjne    a, #'Y', abort_it
0738: 11 72                 acall   newline2
                   clrm2:
                            ; now we actually do it
073A: 8B 83                 mov     dph, r3
073C: 8A 82                 mov     dpl, r2
                   clrm3:
073E: E4                    clr     a
073F: F0                    movx    @dptr, a
0740: ED                    mov     a, r5
0741: B5 83 05              cjne    a, dph, clrm4
0744: EC                    mov     a, r4
0745: B5 82 01              cjne    a, dpl, clrm4
0748: 22                    ret
                   clrm4:
0749: A3                    inc     dptr
074A: 80 F2                 sjmp    clrm3
                   
                   ;---------------------------------------------------------;
                   
                   nloc:
074C: 90 0C 52              mov     dptr, #prompt6
074F: 11 45                 acall   pcstr_h
0751: 11 C5                 acall   ghex16
0753: 40 D0                 jc      abort2
0755: 20 D5 CD              jb      psw.5, abort2
0758: 11 0E                 acall   dptrtor6r7
075A: 01 72                 ajmp    newline2
                   
                   ;---------------------------------------------------------;
                   
                   intm:
075C: 11 74                 acall   newline
075E: 78 00                 mov     r0, #0
                   intm2:
0760: 11 74                 acall   newline
0762: E8                    mov     a, r0
0763: 31 5B                 acall   phex
0765: 74 3A                 mov     a, #':'
0767: 11 6A                 acall   cout
                   intm3:
0769: 11 68                 acall   space
076B: E6                    mov     a, @r0
076C: 31 5B                 acall   phex
076E: 08                    inc     r0
076F: B8 00 04              cjne    r0, #0, intm4
0772: 11 74                 acall   newline
0774: 01 74                 ajmp    newline
                   intm4:
0776: E8                    mov     a, r0
0777: 54 0F                 anl     a, #00001111b
0779: 70 EE                 jnz     intm3
077B: 80 E3                 sjmp    intm2
                   
                   ;---------------------------------------------------------;
                   
                   eio77:
077D: C2 97                 clr     p1.7
077F: 01 74                 ajmp    newline
                            
                   ;---------------------------------------------------------;
                   
                   dio77:
0781: D2 97                 setb    p1.7
0783: 01 74                 ajmp    newline
                   
                   ;---------------------------------------------------------;
                   
                   ; finds the next header in the external memory.
                   ; Input DPTR=point to start search (only MSB used)
                   ; Output DPTR=location of next module
                   ; C=set if a header found, C=clear if no more headers
                   
                   find:
0785: 75 82 00              mov     dpl, #0
0788: E4                    clr     a
0789: 93                    movc    a, @a+dptr
078A: B4 A5 17              cjne    a, #0xA5, find3
078D: A3                    inc     dptr
078E: E4                    clr     a
078F: 93                    movc    a, @a+dptr
0790: B4 E5 11              cjne    a, #0xE5, find3
0793: A3                    inc     dptr
0794: E4                    clr     a
0795: 93                    movc    a, @a+dptr
0796: B4 E0 0B              cjne    a, #0xE0, find3
0799: A3                    inc     dptr
079A: E4                    clr     a
079B: 93                    movc    a, @a+dptr
079C: B4 A5 05              cjne    a, #0xA5, find3
079F: 75 82 00              mov     dpl, #0                         ; found one
07A2: D3                    setb    c
07A3: 22                    ret
                   find3:
07A4: 74 FF                 mov     a, #(emem >> 8)
07A6: B5 83 02              cjne    a, dph, find4           ; did we just check
07A9: C3                    clr     c
07AA: 22                    ret
                   find4:
07AB: 05 83                 inc     dph                     ; keep on searching
07AD: 80 D6                 sjmp    find
                   
                   ;---------------------------------------------------------;
                   
                   ;---------------------------------------------------------;
                   ;                                                          ;
                   ;        Power-On initialization code and such...          ;
                   ;                                                          ;
                   ;---------------------------------------------------------;
                   
                   ; first the hardware has to get initialized.
                   
                   poweron:
07AF: E4                    clr     a
07B0: F5 A8                 mov     ie, a           ; all interrupts off
07B2: F5 B8                 mov     ip, a
07B4: 75 D0 00              mov     psw, #psw_init
07B7: 75 81 17              mov     sp, #stack
07BA: 74 FF                 mov     a, #mctrl_default
07BC: F5 90                 mov     p1, a
07BE: FF                    mov     r7, a
07BF: FF                    mov     r7, a
07C0: FF                    mov     r7, a
07C1: FF                    mov     r7, a
                            
                   begin_cp_shadow:
07C2: 90 00 00              mov     dptr, #0x0000
                   cp_byte:
07C5: E4                    clr     a
07C6: 93                    movc    a, @a+dptr
07C7: F0                    movx    @dptr, a
07C8: A3                    inc     dptr
07C9: E5 83                 mov     a, dph
07CB: B4 20 F7              cjne    a, #0x20, cp_byte
                   end_cp_shadow:
07CE: 74 FE                 mov     a, #mctrl_shadow
07D0: F5 90                 mov     p1, a
07D2: FF                    mov     r7, a
07D3: FF                    mov     r7, a
07D4: FF                    mov     r7, a
07D5: FF                    mov     r7, a
                            
                   ; run any user initialization programs in external memory
07D6: 75 F0 F9              mov     b, #249
07D9: 12 08 0B              lcall   stcode
                   
                   ; initialize the serial port
07DC: 12 08 38              lcall   setbaud_reset
                   
                   ; run the start-up programs in external memory
07DF: 75 F0 FD              mov     b, #253
07E2: 12 08 0B              lcall   stcode
                   
                   ; now print out the nice welcome message
                   welcome:
07E5: 78 18                 mov     r0, #24
                   welcm2:
07E7: 12 00 74              lcall   newline
07EA: D8 FB                 djnz    r0, welcm2
07EC: 78 0F                 mov     r0, #15
07EE: 74 20                 mov     a, #' '
                   welcm4:
07F0: 12 00 6A              lcall   cout
07F3: D8 FB                 djnz    r0, welcm4
07F5: 90 0B E4              mov     dptr, #logon1
07F8: 12 09 82              lcall   pcstr
07FB: 90 0B FD              mov     dptr, #logon2
07FE: 12 09 82              lcall   pcstr
0801: 12 04 AA              lcall   dir
0804: 7E 00                 mov     r6, #(pgm & 255)
0806: 7F 20                 mov     r7, #(pgm >> 8)
0808: 02 01 BF              ljmp    menu
                   
                   stcode:
080B: 90 10 00              mov     dptr, #bmem      ; search for startup routi
                   stcode2:
080E: 12 07 85              lcall   find
0811: 50 24                 jnc     stcode5
0813: 75 82 04              mov     dpl, #4
0816: E4                    clr     a
0817: 93                    movc    a, @a+dptr
0818: B5 F0 15              cjne    a, b, stcode4   ; only startup code if matc
081B: C0 F0                 push    b
081D: C0 83                 push    dph
081F: 74 2C                 mov     a, #(stcode3 & 255)
0821: C0 E0                 push    acc
0823: 74 08                 mov     a, #(stcode3 >> 8)
0825: C0 E0                 push    acc
0827: 75 82 40              mov     dpl, #64
082A: E4                    clr     a
082B: 73                    jmp     @a+dptr                 ; jump to the start
                   stcode3:
082C: D0 83                 pop     dph             ; hopefully it'll return to
082E: D0 F0                 pop     b
                   stcode4:
0830: 05 83                 inc     dph
0832: E5 83                 mov     a, dph
0834: B4 00 D7              cjne    a, #((emem+1) >> 8) & 255, stcode2
                   stcode5:
0837: 22                    ret                     ; now we've executed all of
                   
                   ;---------------------------------------------------------;
                   
                   setbaud_reset:
0838: 74 FF                 mov     a, #baud_const  ; skip if user supplied bau
                   setbaud:
083A: F5 8D                 mov     th1, a
083C: F5 8B                 mov     tl1, a
083E: 75 89 21              mov     tmod, #0x21     ; set timer #1 for 8 bit au
0841: 75 87 80              mov     pcon, #0x80     ; configure built-in uart
0844: 75 98 52              mov     scon, #0x52
0847: D2 8E                 setb    tr1             ; start the baud rate timer
0849: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                   ; this twisted bit of code looks for escape sequences for
                   ; up, down, left, right, pageup, and pagedown, as well
                   ; as ordinary escape and ordinary characters. Escape
                   ; sequences are required to arrive with each character
                   ; nearly back-to-back to the others, otherwise the character
                   ; are treated as ordinary user keystroaks. cin_filter
                   ; returns a single byte when it sees the multi-byte escape
                   ; sequence, as shown here.
                   
                   ; return value    key            escape sequence
                   ;   11 (^K)       up             1B 5B 41
                   ;   10 (^J)       down           1B 5B 42
                   ;   21 (^U)       right          1B 5B 43
                   ;    8 (^H)       left           1B 5B 44
                   ;   25 (^Y)       page up        1B 5B 35 7E
                   ;   26 (^Z)       page down      1B 5B 36 7E
                   
084A:              .equ     esc_char, 27
                   
                   cin_filter:
084A: 30 98 06              jnb     ri, cinf1
084D: 12 00 5E              lcall   cin
0850: B4 1B 51              cjne    a, #esc_char, cinf_end
                            ; if esc was already in sbuf, just ignore it
                   cinf1:
0853: 12 00 5E              lcall   cin
0856: B4 1B 4B              cjne    a, #esc_char, cinf_end
                   cinf2:
0859: 11 B8                 acall   cinf_wait
085B: 20 98 03              jb      ri, cinf4
085E: 74 1B                 mov     a, #esc_char
0860: 22                    ret                     ; an ordinary ESC
                   
                   cinf4:
                            ; if we get here, it's a control code, since a char
                            ; was received shortly after receiving an ESC chara
0861: 12 00 5E              lcall   cin
0864: B4 5B 44              cjne    a, #'[', cinf_consume
0867: 11 B8                 acall   cinf_wait
0869: 30 98 DE              jnb     ri, cin_filter
086C: 12 00 5E              lcall   cin
                   cinf5a:
086F: B4 41 03              cjne    a, #'A', cinf5b
0872: 74 0B                 mov     a, #11
0874: 22                    ret
                   cinf5b:
0875: B4 42 03              cjne    a, #'B', cinf5c
0878: 74 0A                 mov     a, #10
087A: 22                    ret
                   cinf5c:
087B: B4 43 03              cjne    a, #'C', cinf5d
087E: 74 15                 mov     a, #21
0880: 22                    ret
                   cinf5d:
0881: B4 44 03              cjne    a, #'D', cinf5e
0884: 74 08                 mov     a, #8
0886: 22                    ret
                   cinf5e:
0887: B4 35 02              cjne    a, #0x35, cinf5f
088A: 80 07                 sjmp    cinf8
                   cinf5f:
088C: B4 36 02              cjne    a, #0x36, cinf5g
088F: 80 02                 sjmp    cinf8
                   cinf5g:
0891: 80 18                 sjmp    cinf_consume            ; unknown escape se
                   
                   cinf8:
                            ; when we get here, we've got the sequence for page
                            ; but there's one more incoming byte to check...
0893: C0 E0                 push    acc
0895: 11 B8                 acall   cinf_wait
0897: 30 98 0B              jnb     ri, cinf_restart
089A: 12 00 5E              lcall   cin
089D: B4 7E 09              cjne    a, #0x7E, cinf_notpg
08A0: D0 E0                 pop     acc
08A2: 24 E4                 add     a, #228
                   cinf_end:
08A4: 22                    ret
                   cinf_restart:
08A5: D0 E0                 pop     acc
08A7: 80 A1                 sjmp    cin_filter
                   cinf_notpg:
08A9: D0 E0                 pop     acc
                   ; unrecognized escape... eat up everything that's left comin
                   ; quickly, then begin looking again
                   cinf_consume:
08AB: 11 B8                 acall   cinf_wait
08AD: 30 98 9A              jnb     ri, cin_filter
08B0: 12 00 5E              lcall   cin
08B3: B4 1B F5              cjne    a, #esc_char, cinf_consume
08B6: 80 A1                 sjmp    cinf2
                   
                   ; this thing waits for a character to be received for approx
                   ; 4 character transmit time periods. It returns immedately
                   ; or after the entire wait time. It does not remove the char
                   ; from the buffer, so ri should be checked to see if somethi
                   ; actually did show up while it was waiting
08B8:                       .equ    char_delay, 4           ; number of char xm
                   cinf_wait:
08B8: EA                    mov     a, r2
08B9: C0 E0                 push    acc
08BB: 7A 14                 mov     r2, #char_delay*5
                   cinfw2:
08BD: E5 8C                 mov     a, th0
                   cinfw3:
08BF: 20 98 05              jb      ri, cinfw4
08C2: 04                    inc     a
08C3: 70 FA                 jnz     cinfw3
08C5: DA F6                 djnz    r2, cinfw2
                   cinfw4:
08C7: D0 E0                 pop     acc
08C9: FA                    mov     r2, a
08CA: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                   ; prints the unsigned 8 bit value in Acc in base 10
                   
                   pint8u:
08CB: C0 F0                 push    b
08CD: C0 E0                 push    acc
08CF: 80 13                 sjmp    pint8b
                   
                   ;---------------------------------------------------------;
                   
                   ; prints the signed 8 bit value in Acc in base 10
                   
                   pint8:
08D1: C0 F0                 push    b
08D3: C0 E0                 push    acc
08D5: 30 E7 0C              jnb     acc.7, pint8b
08D8: 74 2D                 mov     a, #'-'
08DA: 12 00 6A              lcall   cout
08DD: D0 E0                 pop     acc
08DF: C0 E0                 push    acc
08E1: F4                    cpl     a
08E2: 24 01                 add     a, #1
                   pint8b:
08E4: 75 F0 64              mov     b, #100
08E7: 84                    div     ab
08E8: D2 D5                 setb    f0
08EA: 60 07                 jz      pint8c
08EC: C2 D5                 clr     f0
08EE: 24 30                 add     a, #'0'
08F0: 12 00 6A              lcall   cout
                   pint8c:
08F3: E5 F0                 mov     a, b
08F5: 75 F0 0A              mov     b, #10
08F8: 84                    div     ab
08F9: 30 D5 02              jnb     f0, pint8d
08FC: 60 05                 jz      pint8e
                   pint8d:
08FE: 24 30                 add     a, #'0'
0900: 12 00 6A              lcall   cout
                   pint8e:
0903: E5 F0                 mov     a, b
0905: 24 30                 add     a, #'0'
0907: 12 00 6A              lcall   cout
090A: D0 E0                 pop     acc
090C: D0 F0                 pop     b
090E: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                   ; print 16 bit unsigned integer in DPTR, using base 10.
                   ; warning, destroys r2, r3, r4, r5, psw.5
                   
                   pint16u:
090F: C0 E0                 push    acc
0911: E8                    mov     a, r0
0912: C0 E0                 push    acc
0914: C2 D5                 clr     psw.5
0916: AA 82                 mov     r2, dpl
0918: AB 83                 mov     r3, dph
                   
                   pint16a:
091A: 7C 10                 mov     r4, #16                 ; ten-thousands dig
091C: 7D 27                 mov     r5, #39
091E: 31 6D                 acall   pint16x
0920: 60 07                 jz      pint16b
0922: 24 30                 add     a, #'0'
0924: 12 00 6A              lcall   cout
0927: D2 D5                 setb    psw.5
                   
                   pint16b:
0929: 7C E8                 mov     r4, #232        ; thousands digit
092B: 7D 03                 mov     r5, #3
092D: 31 6D                 acall   pint16x
092F: 70 03                 jnz     pint16c
0931: 30 D5 07              jnb     psw.5, pint16d
                   pint16c:
0934: 24 30                 add     a, #'0'
0936: 12 00 6A              lcall   cout
0939: D2 D5                 setb    psw.5
                   
                   pint16d:
093B: 7C 64                 mov     r4, #100        ; hundreds digit
093D: 7D 00                 mov     r5, #0
093F: 31 6D                 acall   pint16x
0941: 70 03                 jnz     pint16e
0943: 30 D5 07              jnb     psw.5, pint16f
                   pint16e:
0946: 24 30                 add     a, #'0'
0948: 12 00 6A              lcall   cout
094B: D2 D5                 setb    psw.5
                   
                   pint16f:
094D: EA                    mov     a, r2           ; tens digit
094E: AB F0                 mov     r3, b
0950: 75 F0 0A              mov     b, #10
0953: 84                    div     ab
0954: 70 03                 jnz     pint16g
0956: 30 D5 05              jnb     psw.5, pint16h
                   pint16g:
0959: 24 30                 add     a, #'0'
095B: 12 00 6A              lcall   cout
                   
                   pint16h:
095E: E5 F0                 mov     a, b            ; and finally the ones digi
0960: 8B F0                 mov     b, r3
0962: 24 30                 add     a, #'0'
0964: 12 00 6A              lcall   cout
                   
0967: D0 E0                 pop     acc
0969: F8                    mov     r0, a
096A: D0 E0                 pop     acc
096C: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                   ; ok, it's a cpu hog and a nasty way to divide, but this cod
                   ; requires only 21 bytes! Divides r2-r3 by r4-r5 and leaves
                   ; quotient in r2-r3 and returns remainder in acc. If Intel
                   ; had made a proper divide, then this would be much easier.
                   
                   pint16x:
096D: 78 00                 mov     r0, #0
                   pint16y:
096F: 08                    inc     r0
0970: C3                    clr     c
0971: EA                    mov     a, r2
0972: 9C                    subb    a, r4
0973: FA                    mov     r2, a
0974: EB                    mov     a, r3
0975: 9D                    subb    a, r5
0976: FB                    mov     r3, a
0977: 50 F6                 jnc     pint16y
0979: 18                    dec     r0
097A: EA                    mov     a, r2
097B: 2C                    add     a, r4
097C: FA                    mov     r2, a
097D: EB                    mov     a, r3
097E: 3D                    addc    a, r5
097F: FB                    mov     r3, a
0980: E8                    mov     a, r0
0981: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                   ; pcstr prints the compressed strings. A dictionary of 128 w
                   ; stored in 4 bit packed binary format.  When pcstr finds a 
                   ; a string with the high bit set, it prints the word from th
                   ; A few bytes have special functions and everything else pri
                   ; it were an ordinary string.
                   
                   ; special codes for pcstr:
                   ;    0 = end of string
                   ;   13 = CR/LF
                   ;   14 = CR/LF and end of string
                   ;   31 = next word code should be capitalized
                   
                   pcstr:
0982: C0 E0                 push    acc
0984: E8                    mov     a, r0
0985: C0 E0                 push    acc
0987: E9                    mov     a, r1
0988: C0 E0                 push    acc
098A: EC                    mov     a, r4
098B: C0 E0                 push    acc
098D: D2 D1                 setb    psw.1
098F: D2 D5                 setb    psw.5
                   pcstr1:
0991: E4                    clr     a
0992: 93                    movc    a, @a+dptr
0993: A3                    inc     dptr
0994: 60 25                 jz      pcstr2
0996: 20 E7 2E              jb      acc.7, decomp
0999: 54 7F                 anl     a, #0x7F
                   pcstrs1:
099B: B4 0D 07              cjne    a, #13, pcstrs2
099E: 12 00 74              lcall   newline
09A1: D2 D1                 setb    psw.1
09A3: 80 EC                 sjmp    pcstr1
                   pcstrs2:
09A5: B4 1F 04              cjne    a, #31, pcstrs3
09A8: C2 D5                 clr     psw.5
09AA: 80 E5                 sjmp    pcstr1
                   pcstrs3:
09AC: B4 0E 05              cjne    a, #14, pcstrs4
09AF: 12 00 74              lcall   newline
09B2: 80 07                 sjmp    pcstr2
                   pcstrs4:
09B4: C2 D1                 clr     psw.1
09B6: 12 00 6A              lcall   cout
09B9: 80 D6                 sjmp    pcstr1
                   pcstr2:
09BB: D0 E0                 pop     acc
09BD: FC                    mov     r4, a
09BE: D0 E0                 pop     acc
09C0: F9                    mov     r1, a
09C1: D0 E0                 pop     acc
09C3: F8                    mov     r0, a
09C4: D0 E0                 pop     acc
09C6: 22                    ret
                   
                   ;---------------------------------------------------------;
                   
                   ; dcomp actually takes care of printing a word from the dict
                   ; dptr = position in packed words table
                   ; r4=0 if next nibble is low, r4=255 if next nibble is high
                   
                   decomp:
09C7: 54 7F                 anl     a, #0x7F
09C9: F8                    mov     r0, a           ; r0 counts which word
09CA: 20 D1 03              jb      psw.1, decomp1  ; avoid leading space if fi
09CD: 12 00 68              lcall   space
                   decomp1:
09D0: C2 D1                 clr     psw.1
09D2: C0 82                 push    dpl
09D4: C0 83                 push    dph
09D6: 90 0A 3C              mov     dptr, #words
09D9: 7C 00                 mov     r4, #0
09DB: E8                    mov     a, r0
09DC: 60 07                 jz      dcomp3
                            ; here we must seek past all the words in the table
                            ; that come before the one we're supposed to print
09DE: F9                    mov     r1, a
                   dcomp2:
09DF: 51 2B                 acall   get_next_nibble
09E1: 70 FC                 jnz     dcomp2
                            ; when we get here, a word has been skipped... keep
                            ; this until we're pointing to the correct one
09E3: D9 FA                 djnz    r1, dcomp2
                   dcomp3:
                            ; now we're pointing to the correct word, so all we
                            ; to do is print it out
09E5: 51 2B                 acall   get_next_nibble
09E7: 60 3C                 jz      dcomp_end
09E9: B4 0F 12              cjne    a, #15, dcomp4
                            ; the character is one of the 12 least commonly use
09EC: 51 2B                 acall   get_next_nibble
09EE: 04                    inc     a
09EF: 83                    movc    a, @a+pc
09F0: 80 1E                 sjmp    dcomp5
09F2: 68 66 77 67 
      79 62 78 76 
      6B 71 6A 7A 
                            .db     "hfwgybxvkqjz"
                   dcomp4:
                            ; the character is one of the 14 most commonly used
09FE: 04                    inc     a
09FF: 83                    movc    a, @a+pc
0A00: 80 0E                 sjmp    dcomp5
0A02: 65 74 61 72 
      6E 69 73 6F 
      6C 75 6D 70 
      64 63                 .db     "etarnisolumpdc"
                   dcomp5:
                            ; decide if it should be uppercase or lowercase
0A10: A2 D5                 mov     c, psw.5
0A12: 92 E5                 mov     acc.5, c
0A14: D2 D5                 setb    psw.5
0A16: B8 14 02              cjne    r0, #20, dcomp6
0A19: C2 E5                 clr     acc.5
                   dcomp6:
0A1B: B8 0C 02              cjne    r0, #12, dcomp7
0A1E: C2 E5                 clr     acc.5
                   dcomp7:
0A20: 12 00 6A              lcall   cout
0A23: 80 C0                 sjmp    dcomp3
                   dcomp_end:
0A25: D0 83                 pop     dph
0A27: D0 82                 pop     dpl
0A29: 21 91                 ajmp    pcstr1
                   
                   get_next_nibble:
                            ;...and update dptr and r4, of course
0A2B: E4                    clr     a
0A2C: 93                    movc    a, @a+dptr
0A2D: BC 00 05              cjne    r4, #0, gnn2
0A30: 7C FF                 mov     r4, #255
0A32: 54 0F                 anl     a, #00001111b
0A34: 22                    ret
                   gnn2:
0A35: 7C 00                 mov     r4, #0
0A37: A3                    inc     dptr
0A38: C4                    swap    a
0A39: 54 0F                 anl     a, #00001111b
0A3B: 22                    ret
                   
                   ;---------------------------------------------------------;
                   ;                                                          ;
                   ;         Here begins the data tables and strings          ;
                   ;                                                          ;
                   ;---------------------------------------------------------;
                   
                   ; this is the dictionary of 128 words used by pcstr.
                   
                   words:
0A3C: 82 90 E8 23 
      86 05 4C F8 
                            .db     0x82, 0x90, 0xE8, 0x23, 0x86, 0x05, 0x4C, 0
0A44: 44 B3 B0 B1 
      48 5F F0 11 
                            .db     0x44, 0xB3, 0xB0, 0xB1, 0x48, 0x5F, 0xF0, 0
0A4C: 7F A0 15 7F 
      1C 2E D1 40 
                            .db     0x7F, 0xA0, 0x15, 0x7F, 0x1C, 0x2E, 0xD1, 0
0A54: 5A 50 F1 03 
      BF BA 0C 2F 
                            .db     0x5A, 0x50, 0xF1, 0x03, 0xBF, 0xBA, 0x0C, 0
0A5C: 96 01 8D 3F 
      95 38 0D 6F 
                            .db     0x96, 0x01, 0x8D, 0x3F, 0x95, 0x38, 0x0D, 0
0A64: 5F 12 07 71 
      0E 56 2F 48 
                            .db     0x5F, 0x12, 0x07, 0x71, 0x0E, 0x56, 0x2F, 0
0A6C: 3B 62 58 20 
      1F 76 70 32 
                            .db     0x3B, 0x62, 0x58, 0x20, 0x1F, 0x76, 0x70, 0
0A74: 24 40 B8 40 
      E1 61 8F 01 
                            .db     0x24, 0x40, 0xB8, 0x40, 0xE1, 0x61, 0x8F, 0
0A7C: 34 0B CA 89 
      D3 C0 A3 B9 
                            .db     0x34, 0x0B, 0xCA, 0x89, 0xD3, 0xC0, 0xA3, 0
0A84: 58 80 04 F8 
      02 85 60 25 
                            .db     0x58, 0x80, 0x04, 0xF8, 0x02, 0x85, 0x60, 0
0A8C: 91 F0 92 73 
      1F 10 7F 12 
                            .db     0x91, 0xF0, 0x92, 0x73, 0x1F, 0x10, 0x7F, 0
0A94: 54 93 10 44 
      48 07 D1 26 
                            .db     0x54, 0x93, 0x10, 0x44, 0x48, 0x07, 0xD1, 0
0A9C: 56 4F D0 F6 
      64 72 E0 B8 
                            .db     0x56, 0x4F, 0xD0, 0xF6, 0x64, 0x72, 0xE0, 0
0AA4: 3B D5 F0 16 
      4F 56 30 6F 
                            .db     0x3B, 0xD5, 0xF0, 0x16, 0x4F, 0x56, 0x30, 0
0AAC: 48 02 5F A8 
      20 1F 01 76 
                            .db     0x48, 0x02, 0x5F, 0xA8, 0x20, 0x1F, 0x01, 0
0AB4: 30 D5 60 25 
      41 A4 2C 60 
                            .db     0x30, 0xD5, 0x60, 0x25, 0x41, 0xA4, 0x2C, 0
0ABC: 05 6F 01 3F 
      26 1F 30 07 
                            .db     0x05, 0x6F, 0x01, 0x3F, 0x26, 0x1F, 0x30, 0
0AC4: 8E 1D F0 63 
      99 F0 42 B8 
                            .db     0x8E, 0x1D, 0xF0, 0x63, 0x99, 0xF0, 0x42, 0
0ACC: 20 1F 23 30 
      02 7A D1 60 
                            .db     0x20, 0x1F, 0x23, 0x30, 0x02, 0x7A, 0xD1, 0
0AD4: 2F F0 F6 05 
      8F 93 1A 50 
                            .db     0x2F, 0xF0, 0xF6, 0x05, 0x8F, 0x93, 0x1A, 0
0ADC: 28 F0 82 04 
      6F A3 0D 3F 
                            .db     0x28, 0xF0, 0x82, 0x04, 0x6F, 0xA3, 0x0D, 0
0AE4: 1F 51 40 23 
      01 3E 05 43 
                            .db     0x1F, 0x51, 0x40, 0x23, 0x01, 0x3E, 0x05, 0
0AEC: 01 7A 01 17 
      64 93 30 2A 
                            .db     0x01, 0x7A, 0x01, 0x17, 0x64, 0x93, 0x30, 0
0AF4: 08 8C 24 30 
      99 B0 F3 19 
                            .db     0x08, 0x8C, 0x24, 0x30, 0x99, 0xB0, 0xF3, 0
0AFC: 60 25 41 35 
      09 8E CB 19 
                            .db     0x60, 0x25, 0x41, 0x35, 0x09, 0x8E, 0xCB, 0
0B04: 12 30 05 1F 
      31 1D 04 14 
                            .db     0x12, 0x30, 0x05, 0x1F, 0x31, 0x1D, 0x04, 0
0B0C: 4F 76 12 04 
      AB 27 90 56 
                            .db     0x4F, 0x76, 0x12, 0x04, 0xAB, 0x27, 0x90, 0
0B14: 01 2F A8 D5 
      F0 AA 26 20 
                            .db     0x01, 0x2F, 0xA8, 0xD5, 0xF0, 0xAA, 0x26, 0
0B1C: 5F 1C F0 F3 
      61 FE 01 41 
                            .db     0x5F, 0x1C, 0xF0, 0xF3, 0x61, 0xFE, 0x01, 0
0B24: 73 01 27 C1 
      C0 84 8F D6 
                            .db     0x73, 0x01, 0x27, 0xC1, 0xC0, 0x84, 0x8F, 0
0B2C: 01 87 70 56 
      4F 19 70 1F 
                            .db     0x01, 0x87, 0x70, 0x56, 0x4F, 0x19, 0x70, 0
0B34: A8 D9 90 76 
      02 17 43 FE 
                            .db     0xA8, 0xD9, 0x90, 0x76, 0x02, 0x17, 0x43, 0
0B3C: 01 C1 84 0B 
      15 7F 02 8B 
                            .db     0x01, 0xC1, 0x84, 0x0B, 0x15, 0x7F, 0x02, 0
0B44: 14 30 8F 63 
      39 6F 19 F0 
                            .db     0x14, 0x30, 0x8F, 0x63, 0x39, 0x6F, 0x19, 0
0B4C: 11 C9 10 6D 
      02 3F 91 09 
                            .db     0x11, 0xC9, 0x10, 0x6D, 0x02, 0x3F, 0x91, 0
0B54: 7A 41 D0 BA 
      0C 1D 39 5F 
                            .db     0x7A, 0x41, 0xD0, 0xBA, 0x0C, 0x1D, 0x39, 0
0B5C: 07 F2 11 17 
      20 41 6B 35 
                            .db     0x07, 0xF2, 0x11, 0x17, 0x20, 0x41, 0x6B, 0
0B64: 09 F7 75 12 
      0B A7 CC 48 
                            .db     0x09, 0xF7, 0x75, 0x12, 0x0B, 0xA7, 0xCC, 0
0B6C: 02 3F 64 12 
      A0 0C 27 E3 
                            .db     0x02, 0x3F, 0x64, 0x12, 0xA0, 0x0C, 0x27, 0
0B74: 9F C0 14 77 
      70 11 40 71 
                            .db     0x9F, 0xC0, 0x14, 0x77, 0x70, 0x11, 0x40, 0
0B7C: 21 C0 68 25 
      41 F0 62 7F 
                            .db     0x21, 0xC0, 0x68, 0x25, 0x41, 0xF0, 0x62, 0
0B84: D1 D0 21 E1 
      62 58 B0 F3 
                            .db     0xD1, 0xD0, 0x21, 0xE1, 0x62, 0x58, 0xB0, 0
0B8C: 05 1F 73 30 
      77 B1 6F 19 
                            .db     0x05, 0x1F, 0x73, 0x30, 0x77, 0xB1, 0x6F, 0
0B94: E0 19 43 E0 
      58 2F F6 A4 
                            .db     0xE0, 0x19, 0x43, 0xE0, 0x58, 0x2F, 0xF6, 0
0B9C: 14 D0 23 03 
      FE 31 F5 14 
                            .db     0x14, 0xD0, 0x23, 0x03, 0xFE, 0x31, 0xF5, 0
0BA4: 30 99 F8 03 
      3F 64 22 51 
                            .db     0x30, 0x99, 0xF8, 0x03, 0x3F, 0x64, 0x22, 0
0BAC: 60 25 41 2F 
      E3 01 56 27 
                            .db     0x60, 0x25, 0x41, 0x2F, 0xE3, 0x01, 0x56, 0
0BB4: 93 09 FE 11 
      FE 79 BA 60 
                            .db     0x93, 0x09, 0xFE, 0x11, 0xFE, 0x79, 0xBA, 0
0BBC: 75 42 EA 62 
      58 A0 E5 1F 
                            .db     0x75, 0x42, 0xEA, 0x62, 0x58, 0xA0, 0xE5, 0
0BC4: 53 4F D1 C0 
      A3 09 42 53 
                            .db     0x53, 0x4F, 0xD1, 0xC0, 0xA3, 0x09, 0x42, 0
0BCC: F7 12 04 62 
      1B 30 F5 05 
                            .db     0xF7, 0x12, 0x04, 0x62, 0x1B, 0x30, 0xF5, 0
0BD4: F7 69 0C 35 
      1B 70 82 2F 
                            .db     0xF7, 0x69, 0x0C, 0x35, 0x1B, 0x70, 0x82, 0
0BDC: 2F 14 4F 51 
      C0 64 25 00 
                            .db     0x2F, 0x14, 0x4F, 0x51, 0xC0, 0x64, 0x25, 0
                   
                   ; STR
                   
                   logon1:
0BE4: 57 65 6C 63 
      6F 6D 65 80 
      94 32 20 76 
      32 2E 31 2C 
      20 62 79 1F 
      F8 1F FE 0D 
      0E                    .db     "Welcome", 128, 148, "2 v2.1, by", 31, 248,
                   
                   logon2:
0BFD: 20 20 53 65 
      65 94 32 2E 
      44 4F 43 2C 
      94 32 2E 45 
      51 55 A4              .db     32, 32, "See", 148, "2.DOC,", 148, "2.EQU",
0C10: 94 32 2E 48 
      44 52 B4 D5 
      8D 2E 0E              .db     148, "2.HDR", 180, 213, 141, ".", 14
                   
                   abort:
0C1B: 20 1F 9E 1F 
      A0 21 0D 0E 
                            .db     " ", 31, 158, 31, 160, "!", 13, 14
                   
                   prompt1:
0C23: 94 32 20 4C 
      6F 63 3A 00 
                            .db     148, "2 Loc:", 0
                   
                   prompt2:
                   ; must follow prompt1
0C2B: 20 3E A0              .db     " >", 160
                   
                   prompt3:
0C2E: 86 CA 82 28 
      00                    .db     134, 202, 130, '(', 0
                   
                   prompt4:
0C33: 29 2C 95 8C 
      80 C8 3A 20 
      00                    .db     "),", 149, 140, 128, 200, ": ", 0
                   
                   prompt5:
0C3C: 1F 97 82 C3 
      73 C7 A6 83 
      2C                    .db     31, 151, 130, 195, "s", 199, 166, 131, ","
0C45: BA 20 4A 55 
      4D 50 80 86 
      A1 72 82 0D 
      0E                    .db     186, " JUMP", 128, 134, 161, "r", 130, 13, 
                   
                   prompt6:
0C52: 0D 0D 1F 87 
      83 81 3A 20 
      00                    .db     13, 13, 31, 135, 131, 129, ": ", 0
                   
                   prompt7:
0C5B: 1F E4 FB 20 
      6B 65 79 3A 
      20 00                 .db     31, 228, 251, " key: ", 0
                   
                   prompt8:
0C65: 0D 0D 1F 88 
      80 83 81 20 
      28 00                 .db     13, 13, 31, 136, 128, 131, 129, " (", 0
                   
                   prompt9:
0C6F: 0D 0D 1F 82 
      1F FD 00              .db     13, 13, 31, 130, 31, 253, 0
                   
                   prompt9b:
                   ; must follow prompt9
0C76: 1F 81 20 20 
      20 20 20 1F 
      C9 0E                 .db     31, 129, 32, 32, 32, 32, 32, 31, 201, 14
                   
                   prompt10:
0C80: 29 20 1F 87 
      1F B2 3A 20 
      00                    .db     ") ", 31, 135, 31, 178, ": ", 0
                   
                   beg_str:
0C89: 46 69 72 73 
      74 1F 81 3A 
      20 00                 .db     "First", 31, 129, ": ", 0
                   
                   end_str:
0C93: 4C 61 73 74 
      1F 81 3A 20 
      20 00                 .db     "Last", 31, 129, ":", 32, 32, 0
                   
                   sure:
0C9D: 1F B9 A1 20 
      73 75 72 65 
      3F 00                 .db     31, 185, 161, " sure?", 0
                   
                   edits1:
0CA7: 0D 0D 1F 9C 
      9A 92 2C 8C 
      80 C8 0E              .db     13, 13, 31, 156, 154, 146, ",", 140, 128, 2
                   
                   edits2:
0CB2: 20 20 1F 9C 
      C1 2C 8E 81 
      F7 0D 0E              .db     "  ", 31, 156, 193, ",", 142, 129, 247, 13,
                   
                   dnlds1:
0CBD: 0D 0D 1F 9F 
      20 61 73 63 
      69 69 F9 96 
      1F 98 84 89 
                            .db     13, 13, 31, 159, " ascii", 249, 150, 31, 15
0CCD: 2C 95 8C 80 
      A0 0D 0E              .db     ",", 149, 140, 128, 160, 13, 14
                   
                   dnlds2:
0CD4: 0D 1F 8A A0 
      65 64 0D 0E 
                            .db     13, 31, 138, 160, "ed", 13, 14
                   
                   dnlds3:
0CDC: 0D 1F 8A C1 
      64 0D 0E              .db     13, 31, 138, 193, "d", 13, 14
                   
                   dnlds4:
0CE3: 53 75 6D 6D 
      61 72 79 3A 
      0E                    .db     "Summary:", 14
                   
                   dnlds5:
0CEC: 20 C6 73 91 
      64 0E                 .db     " ", 198, "s", 145, "d", 14
                   
                   dnlds6a:
0CF2: 20 8B 91 64 
      0E                    .db     " ", 139, 145, "d", 14
                   
                   dnlds6b:
0CF7: 20 8B 20 77 
      72 69 74 74 
      65 6E 0E              .db     " ", 139, " written", 14
                   
                   dnlds7:
0D02: 1F 9B 3A 0E 
                            .db     31, 155, ":", 14
                   
                   dnlds8:
0D06: 20 8B 20 75 
      6E 61 62 6C 
      65 80 20 77 
      72 69 74 65 
      0E                    .db     " ", 139, " unable", 128, " write", 14
                   
                   dnlds9:
0D17: 20 20 62 61 
      64 F5 73 0E 
                            .db     32, 32, "bad", 245, "s", 14
                   
                   dnlds10:
0D1F: 20 85 9F 96 
      C6 0E                 .db     " ", 133, 159, 150, 198, 14
                   
                   dnlds11:
0D25: 20 85 84 9D 
      0E                    .db     " ", 133, 132, 157, 14
                   
                   dnlds12:
0D2A: 20 85 20 6E 
      6F 6E 84 9D 
      0E                    .db     " ", 133, " non", 132, 157, 14
                   
                   dnlds13:
0D33: 1F 97 9B 20 
      64 65 74 65 
      63 74 65 64 
      0D 0E                 .db     31, 151, 155, " detected", 13, 14
                   
                   runs1:
0D41: 0D 86 6E 69 
      6E 67 82 3A 
      0D 0E                 .db     13, 134, "ning", 130, ":", 13, 14
                   
                   uplds3:
0D4B: 0D 0D 53 65 
      6E 64 69 6E 
      67 1F 98 84 
      89 AC 20 20 
      00                    .db     13, 13, "Sending", 31, 152, 132, 137, 172, 
                   
                   uplds4:
                   ; must follow uplds3
0D5C: 20 80 20 20 
      00                    .db     " ", 128, 32, 32, 0
                   
                   help1txt:
0D61: 0D 0D 53 74 
      61 6E 64 61 
      72 64 1F 9E 
      73 0E                 .db     13, 13, "Standard", 31, 158, "s", 14
                   
                   help2txt:
0D6F: 1F DA 1F F4 
      65 64 1F 9E 
      73 0E                 .db     31, 218, 31, 244, "ed", 31, 158, "s", 14
                   
                   type1:
0D79: 1F 9A 9E 00 
                            .db     31, 154, 158, 0
                   
                   type2:
0D7D: 1F 82 00              .db     31, 130, 0
                   
                   type4:
0D80: 1F 8F 1F E2 
      1F AA 00              .db     31, 143, 31, 226, 31, 170, 0
                   
                   type5:
0D87: 3F 3F 3F 00 
                            .db     "???", 0
                   
                   help_cmd2:
0D8B: 1F D7 00              .db     31, 215, 0
                   
                   help_cmd:
0D8E: 1F 8E D7 D1 
      00                    .db     31, 142, 215, 209, 0
                   
                   ; these _cmd string must be in order
                   
                   dir_cmd:
0D93: 1F D1 82 73 
      00                    .db     31, 209, 130, "s", 0
                   
                   run_cmd:
0D98: 1F 86 82 00 
                            .db     31, 134, 130, 0
                   
                   dnld_cmd:
0D9C: 1F 8A 00              .db     31, 138, 0
                   
                   upld_cmd:
0D9F: 1F 93 00              .db     31, 147, 0
                   
                   nloc_cmd:
0DA2: 1F 87 81 00 
                            .db     31, 135, 129, 0
                   
                   jump_cmd:
0DA6: 1F 88 80 83 
      81 00                 .db     31, 136, 128, 131, 129, 0
                   
                   dump_cmd:
0DAC: 1F 84 DB 9A 
      83 00                 .db     31, 132, 219, 154, 131, 0
                   
                   intm_cmd:
0DB2: 1F 84 DB C0 
      83 00                 .db     31, 132, 219, 192, 131, 0
                   
                   edit_cmd:
0DB8: 1F 9C 9A 92 
      00                    .db     31, 156, 154, 146, 0
                   
                   clrm_cmd:
0DBD: 1F ED 83 00 
                            .db     31, 237, 131, 0
                   
                   eio77_cmd:
0DC1: 45 6E 61 62 
      6C 65 20 6E 
      43 53 49 4F 
      37 37 00              .db     "Enable nCSIO77", 0
                   
                   dio77_cmd:
0DD0: 44 69 73 61 
      62 6C 65 20 
      6E 43 53 49 
      4F 37 37 00 
                            .db     "Disable nCSIO77", 0
                   
