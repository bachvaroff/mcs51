                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module calc
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _getchar_poll
                                     13 	.globl _stack_iter_peek
                                     14 	.globl _stack_peek
                                     15 	.globl _stack_pop
                                     16 	.globl _stack_push
                                     17 	.globl _stack_init
                                     18 	.globl _state_exec
                                     19 	.globl _state_init
                                     20 	.globl _isxdigit
                                     21 	.globl _printf
                                     22 	.globl _strtol
                                     23 	.globl _CY
                                     24 	.globl _AC
                                     25 	.globl _F0
                                     26 	.globl _RS1
                                     27 	.globl _RS0
                                     28 	.globl _OV
                                     29 	.globl _FL
                                     30 	.globl _P
                                     31 	.globl _TF2
                                     32 	.globl _EXF2
                                     33 	.globl _RCLK
                                     34 	.globl _TCLK
                                     35 	.globl _EXEN2
                                     36 	.globl _TR2
                                     37 	.globl _C_T2
                                     38 	.globl _CP_RL2
                                     39 	.globl _T2CON_7
                                     40 	.globl _T2CON_6
                                     41 	.globl _T2CON_5
                                     42 	.globl _T2CON_4
                                     43 	.globl _T2CON_3
                                     44 	.globl _T2CON_2
                                     45 	.globl _T2CON_1
                                     46 	.globl _T2CON_0
                                     47 	.globl _PT2
                                     48 	.globl _PS
                                     49 	.globl _PT1
                                     50 	.globl _PX1
                                     51 	.globl _PT0
                                     52 	.globl _PX0
                                     53 	.globl _RD
                                     54 	.globl _WR
                                     55 	.globl _T1
                                     56 	.globl _T0
                                     57 	.globl _INT1
                                     58 	.globl _INT0
                                     59 	.globl _TXD
                                     60 	.globl _RXD
                                     61 	.globl _P3_7
                                     62 	.globl _P3_6
                                     63 	.globl _P3_5
                                     64 	.globl _P3_4
                                     65 	.globl _P3_3
                                     66 	.globl _P3_2
                                     67 	.globl _P3_1
                                     68 	.globl _P3_0
                                     69 	.globl _EA
                                     70 	.globl _ET2
                                     71 	.globl _ES
                                     72 	.globl _ET1
                                     73 	.globl _EX1
                                     74 	.globl _ET0
                                     75 	.globl _EX0
                                     76 	.globl _P2_7
                                     77 	.globl _P2_6
                                     78 	.globl _P2_5
                                     79 	.globl _P2_4
                                     80 	.globl _P2_3
                                     81 	.globl _P2_2
                                     82 	.globl _P2_1
                                     83 	.globl _P2_0
                                     84 	.globl _SM0
                                     85 	.globl _SM1
                                     86 	.globl _SM2
                                     87 	.globl _REN
                                     88 	.globl _TB8
                                     89 	.globl _RB8
                                     90 	.globl _TI
                                     91 	.globl _RI
                                     92 	.globl _T2EX
                                     93 	.globl _T2
                                     94 	.globl _P1_7
                                     95 	.globl _P1_6
                                     96 	.globl _P1_5
                                     97 	.globl _P1_4
                                     98 	.globl _P1_3
                                     99 	.globl _P1_2
                                    100 	.globl _P1_1
                                    101 	.globl _P1_0
                                    102 	.globl _TF1
                                    103 	.globl _TR1
                                    104 	.globl _TF0
                                    105 	.globl _TR0
                                    106 	.globl _IE1
                                    107 	.globl _IT1
                                    108 	.globl _IE0
                                    109 	.globl _IT0
                                    110 	.globl _P0_7
                                    111 	.globl _P0_6
                                    112 	.globl _P0_5
                                    113 	.globl _P0_4
                                    114 	.globl _P0_3
                                    115 	.globl _P0_2
                                    116 	.globl _P0_1
                                    117 	.globl _P0_0
                                    118 	.globl _B
                                    119 	.globl _A
                                    120 	.globl _ACC
                                    121 	.globl _PSW
                                    122 	.globl _TH2
                                    123 	.globl _TL2
                                    124 	.globl _RCAP2H
                                    125 	.globl _RCAP2L
                                    126 	.globl _T2MOD
                                    127 	.globl _T2CON
                                    128 	.globl _IP
                                    129 	.globl _P3
                                    130 	.globl _IE
                                    131 	.globl _P2
                                    132 	.globl _SBUF
                                    133 	.globl _SCON
                                    134 	.globl _P1
                                    135 	.globl _TH1
                                    136 	.globl _TH0
                                    137 	.globl _TL1
                                    138 	.globl _TL0
                                    139 	.globl _TMOD
                                    140 	.globl _TCON
                                    141 	.globl _PCON
                                    142 	.globl _DPH
                                    143 	.globl _DPL
                                    144 	.globl _SP
                                    145 	.globl _P0
                                    146 	.globl _putchar
                                    147 	.globl _getchar
                                    148 ;--------------------------------------------------------
                                    149 ; special function registers
                                    150 ;--------------------------------------------------------
                                    151 	.area RSEG    (ABS,DATA)
      000000                        152 	.org 0x0000
                           000080   153 _P0	=	0x0080
                           000081   154 _SP	=	0x0081
                           000082   155 _DPL	=	0x0082
                           000083   156 _DPH	=	0x0083
                           000087   157 _PCON	=	0x0087
                           000088   158 _TCON	=	0x0088
                           000089   159 _TMOD	=	0x0089
                           00008A   160 _TL0	=	0x008a
                           00008B   161 _TL1	=	0x008b
                           00008C   162 _TH0	=	0x008c
                           00008D   163 _TH1	=	0x008d
                           000090   164 _P1	=	0x0090
                           000098   165 _SCON	=	0x0098
                           000099   166 _SBUF	=	0x0099
                           0000A0   167 _P2	=	0x00a0
                           0000A8   168 _IE	=	0x00a8
                           0000B0   169 _P3	=	0x00b0
                           0000B8   170 _IP	=	0x00b8
                           0000C8   171 _T2CON	=	0x00c8
                           0000C9   172 _T2MOD	=	0x00c9
                           0000CA   173 _RCAP2L	=	0x00ca
                           0000CB   174 _RCAP2H	=	0x00cb
                           0000CC   175 _TL2	=	0x00cc
                           0000CD   176 _TH2	=	0x00cd
                           0000D0   177 _PSW	=	0x00d0
                           0000E0   178 _ACC	=	0x00e0
                           0000E0   179 _A	=	0x00e0
                           0000F0   180 _B	=	0x00f0
                                    181 ;--------------------------------------------------------
                                    182 ; special function bits
                                    183 ;--------------------------------------------------------
                                    184 	.area RSEG    (ABS,DATA)
      000000                        185 	.org 0x0000
                           000080   186 _P0_0	=	0x0080
                           000081   187 _P0_1	=	0x0081
                           000082   188 _P0_2	=	0x0082
                           000083   189 _P0_3	=	0x0083
                           000084   190 _P0_4	=	0x0084
                           000085   191 _P0_5	=	0x0085
                           000086   192 _P0_6	=	0x0086
                           000087   193 _P0_7	=	0x0087
                           000088   194 _IT0	=	0x0088
                           000089   195 _IE0	=	0x0089
                           00008A   196 _IT1	=	0x008a
                           00008B   197 _IE1	=	0x008b
                           00008C   198 _TR0	=	0x008c
                           00008D   199 _TF0	=	0x008d
                           00008E   200 _TR1	=	0x008e
                           00008F   201 _TF1	=	0x008f
                           000090   202 _P1_0	=	0x0090
                           000091   203 _P1_1	=	0x0091
                           000092   204 _P1_2	=	0x0092
                           000093   205 _P1_3	=	0x0093
                           000094   206 _P1_4	=	0x0094
                           000095   207 _P1_5	=	0x0095
                           000096   208 _P1_6	=	0x0096
                           000097   209 _P1_7	=	0x0097
                           000090   210 _T2	=	0x0090
                           000091   211 _T2EX	=	0x0091
                           000098   212 _RI	=	0x0098
                           000099   213 _TI	=	0x0099
                           00009A   214 _RB8	=	0x009a
                           00009B   215 _TB8	=	0x009b
                           00009C   216 _REN	=	0x009c
                           00009D   217 _SM2	=	0x009d
                           00009E   218 _SM1	=	0x009e
                           00009F   219 _SM0	=	0x009f
                           0000A0   220 _P2_0	=	0x00a0
                           0000A1   221 _P2_1	=	0x00a1
                           0000A2   222 _P2_2	=	0x00a2
                           0000A3   223 _P2_3	=	0x00a3
                           0000A4   224 _P2_4	=	0x00a4
                           0000A5   225 _P2_5	=	0x00a5
                           0000A6   226 _P2_6	=	0x00a6
                           0000A7   227 _P2_7	=	0x00a7
                           0000A8   228 _EX0	=	0x00a8
                           0000A9   229 _ET0	=	0x00a9
                           0000AA   230 _EX1	=	0x00aa
                           0000AB   231 _ET1	=	0x00ab
                           0000AC   232 _ES	=	0x00ac
                           0000AD   233 _ET2	=	0x00ad
                           0000AF   234 _EA	=	0x00af
                           0000B0   235 _P3_0	=	0x00b0
                           0000B1   236 _P3_1	=	0x00b1
                           0000B2   237 _P3_2	=	0x00b2
                           0000B3   238 _P3_3	=	0x00b3
                           0000B4   239 _P3_4	=	0x00b4
                           0000B5   240 _P3_5	=	0x00b5
                           0000B6   241 _P3_6	=	0x00b6
                           0000B7   242 _P3_7	=	0x00b7
                           0000B0   243 _RXD	=	0x00b0
                           0000B1   244 _TXD	=	0x00b1
                           0000B2   245 _INT0	=	0x00b2
                           0000B3   246 _INT1	=	0x00b3
                           0000B4   247 _T0	=	0x00b4
                           0000B5   248 _T1	=	0x00b5
                           0000B6   249 _WR	=	0x00b6
                           0000B7   250 _RD	=	0x00b7
                           0000B8   251 _PX0	=	0x00b8
                           0000B9   252 _PT0	=	0x00b9
                           0000BA   253 _PX1	=	0x00ba
                           0000BB   254 _PT1	=	0x00bb
                           0000BC   255 _PS	=	0x00bc
                           0000BD   256 _PT2	=	0x00bd
                           0000C8   257 _T2CON_0	=	0x00c8
                           0000C9   258 _T2CON_1	=	0x00c9
                           0000CA   259 _T2CON_2	=	0x00ca
                           0000CB   260 _T2CON_3	=	0x00cb
                           0000CC   261 _T2CON_4	=	0x00cc
                           0000CD   262 _T2CON_5	=	0x00cd
                           0000CE   263 _T2CON_6	=	0x00ce
                           0000CF   264 _T2CON_7	=	0x00cf
                           0000C8   265 _CP_RL2	=	0x00c8
                           0000C9   266 _C_T2	=	0x00c9
                           0000CA   267 _TR2	=	0x00ca
                           0000CB   268 _EXEN2	=	0x00cb
                           0000CC   269 _TCLK	=	0x00cc
                           0000CD   270 _RCLK	=	0x00cd
                           0000CE   271 _EXF2	=	0x00ce
                           0000CF   272 _TF2	=	0x00cf
                           0000D0   273 _P	=	0x00d0
                           0000D1   274 _FL	=	0x00d1
                           0000D2   275 _OV	=	0x00d2
                           0000D3   276 _RS0	=	0x00d3
                           0000D4   277 _RS1	=	0x00d4
                           0000D5   278 _F0	=	0x00d5
                           0000D6   279 _AC	=	0x00d6
                           0000D7   280 _CY	=	0x00d7
                                    281 ;--------------------------------------------------------
                                    282 ; overlayable register banks
                                    283 ;--------------------------------------------------------
                                    284 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        285 	.ds 8
                                    286 ;--------------------------------------------------------
                                    287 ; internal ram data
                                    288 ;--------------------------------------------------------
                                    289 	.area DSEG    (DATA)
                                    290 ;--------------------------------------------------------
                                    291 ; overlayable items in internal ram 
                                    292 ;--------------------------------------------------------
                                    293 ;--------------------------------------------------------
                                    294 ; Stack segment in internal ram 
                                    295 ;--------------------------------------------------------
                                    296 	.area	SSEG
      000000                        297 __start__stack:
      000000                        298 	.ds	1
                                    299 
                                    300 ;--------------------------------------------------------
                                    301 ; indirectly addressable internal ram data
                                    302 ;--------------------------------------------------------
                                    303 	.area ISEG    (DATA)
                                    304 ;--------------------------------------------------------
                                    305 ; absolute internal ram data
                                    306 ;--------------------------------------------------------
                                    307 	.area IABS    (ABS,DATA)
                                    308 	.area IABS    (ABS,DATA)
                                    309 ;--------------------------------------------------------
                                    310 ; bit data
                                    311 ;--------------------------------------------------------
                                    312 	.area BSEG    (BIT)
                                    313 ;--------------------------------------------------------
                                    314 ; paged external ram data
                                    315 ;--------------------------------------------------------
                                    316 	.area PSEG    (PAG,XDATA)
                                    317 ;--------------------------------------------------------
                                    318 ; external ram data
                                    319 ;--------------------------------------------------------
                                    320 	.area XSEG    (XDATA)
      000000                        321 _s:
      000000                        322 	.ds 12
      00000C                        323 _c:
      00000C                        324 	.ds 8205
                                    325 ;--------------------------------------------------------
                                    326 ; absolute external ram data
                                    327 ;--------------------------------------------------------
                                    328 	.area XABS    (ABS,XDATA)
                                    329 ;--------------------------------------------------------
                                    330 ; external initialized ram data
                                    331 ;--------------------------------------------------------
                                    332 	.area XISEG   (XDATA)
      000000                        333 _deltas:
      000000                        334 	.ds 160
                                    335 	.area HOME    (CODE)
                                    336 	.area GSINIT0 (CODE)
                                    337 	.area GSINIT1 (CODE)
                                    338 	.area GSINIT2 (CODE)
                                    339 	.area GSINIT3 (CODE)
                                    340 	.area GSINIT4 (CODE)
                                    341 	.area GSINIT5 (CODE)
                                    342 	.area GSINIT  (CODE)
                                    343 	.area GSFINAL (CODE)
                                    344 	.area CSEG    (CODE)
                                    345 ;--------------------------------------------------------
                                    346 ; interrupt vector 
                                    347 ;--------------------------------------------------------
                                    348 	.area HOME    (CODE)
      000000                        349 __interrupt_vect:
      000000 02r00r00         [24]  350 	ljmp	__sdcc_gsinit_startup
                                    351 ;--------------------------------------------------------
                                    352 ; global & static initialisations
                                    353 ;--------------------------------------------------------
                                    354 	.area HOME    (CODE)
                                    355 	.area GSINIT  (CODE)
                                    356 	.area GSFINAL (CODE)
                                    357 	.area GSINIT  (CODE)
                                    358 	.globl __sdcc_gsinit_startup
                                    359 	.globl __sdcc_program_startup
                                    360 	.globl __start__stack
                                    361 	.globl __mcs51_genXINIT
                                    362 	.globl __mcs51_genXRAMCLEAR
                                    363 	.globl __mcs51_genRAMCLEAR
                                    364 	.area GSFINAL (CODE)
      000000 02r00r03         [24]  365 	ljmp	__sdcc_program_startup
                                    366 ;--------------------------------------------------------
                                    367 ; Home
                                    368 ;--------------------------------------------------------
                                    369 	.area HOME    (CODE)
                                    370 	.area HOME    (CODE)
      000003                        371 __sdcc_program_startup:
      000003 02r1Er89         [24]  372 	ljmp	_main
                                    373 ;	return from main will return to caller
                                    374 ;--------------------------------------------------------
                                    375 ; code
                                    376 ;--------------------------------------------------------
                                    377 	.area CSEG    (CODE)
                                    378 ;------------------------------------------------------------
                                    379 ;Allocation info for local variables in function 'putchar'
                                    380 ;------------------------------------------------------------
                                    381 ;c                         Allocated to registers 
                                    382 ;------------------------------------------------------------
                                    383 ;	calc.c:15: int putchar(int c) __naked {
                                    384 ;	-----------------------------------------
                                    385 ;	 function putchar
                                    386 ;	-----------------------------------------
      000000                        387 _putchar:
                                    388 ;	naked function: no prologue.
                                    389 ;	calc.c:20: __endasm;
      000000 E5 82            [12]  390 	mov	a, dpl
      000002 02 00 30         [24]  391 	ljmp	0x0030
                                    392 ;	calc.c:21: }
                                    393 ;	naked function: no epilogue.
                                    394 ;------------------------------------------------------------
                                    395 ;Allocation info for local variables in function 'getchar'
                                    396 ;------------------------------------------------------------
                                    397 ;	calc.c:23: int getchar(void) __naked {
                                    398 ;	-----------------------------------------
                                    399 ;	 function getchar
                                    400 ;	-----------------------------------------
      000005                        401 _getchar:
                                    402 ;	naked function: no prologue.
                                    403 ;	calc.c:29: __endasm;
      000005 12 00 32         [24]  404 	lcall	0x0032
      000008 F5 82            [12]  405 	mov	dpl, a
      00000A 75 83 00         [24]  406 	mov	dph, #0
      00000D 22               [24]  407 	ret
                                    408 ;	calc.c:30: }
                                    409 ;	naked function: no epilogue.
                                    410 ;------------------------------------------------------------
                                    411 ;Allocation info for local variables in function 'getchar_poll'
                                    412 ;------------------------------------------------------------
                                    413 ;	calc.c:32: int getchar_poll(void) __naked {
                                    414 ;	-----------------------------------------
                                    415 ;	 function getchar_poll
                                    416 ;	-----------------------------------------
      00000E                        417 _getchar_poll:
                                    418 ;	naked function: no prologue.
                                    419 ;	calc.c:44: __endasm;
      00000E 74 FF            [12]  420 	mov	a, #0xff
      000010 F5 F0            [12]  421 	mov	b, a
      000012 30 98 07         [24]  422 	jnb	ri, nochar
      000015 C2 98            [12]  423 	clr	ri
      000017 E5 99            [12]  424 	mov	a, sbuf
      000019 75 F0 00         [24]  425 	mov	b, #0
      00001C                        426 	nochar:
      00001C F5 82            [12]  427 	mov	dpl, a
      00001E 85 F0 83         [24]  428 	mov	dph, b
      000021 22               [24]  429 	ret
                                    430 ;	calc.c:45: }
                                    431 ;	naked function: no epilogue.
                                    432 ;------------------------------------------------------------
                                    433 ;Allocation info for local variables in function 'printstr'
                                    434 ;------------------------------------------------------------
                                    435 ;s                         Allocated to registers 
                                    436 ;------------------------------------------------------------
                                    437 ;	calc.c:47: static inline void printstr(const char *s) {
                                    438 ;	-----------------------------------------
                                    439 ;	 function printstr
                                    440 ;	-----------------------------------------
      000022                        441 _printstr:
                           000007   442 	ar7 = 0x07
                           000006   443 	ar6 = 0x06
                           000005   444 	ar5 = 0x05
                           000004   445 	ar4 = 0x04
                           000003   446 	ar3 = 0x03
                           000002   447 	ar2 = 0x02
                           000001   448 	ar1 = 0x01
                           000000   449 	ar0 = 0x00
      000022 AD 82            [24]  450 	mov	r5,dpl
      000024 AE 83            [24]  451 	mov	r6,dph
      000026 AF F0            [24]  452 	mov	r7,b
                                    453 ;	calc.c:50: return;
      000028                        454 00103$:
                                    455 ;	calc.c:48: for (; *s; s++) putchar(*s);
      000028 8D 82            [24]  456 	mov	dpl,r5
      00002A 8E 83            [24]  457 	mov	dph,r6
      00002C 8F F0            [24]  458 	mov	b,r7
      00002E 12r00r00         [24]  459 	lcall	__gptrget
      000031 FC               [12]  460 	mov	r4,a
      000032 60 10            [24]  461 	jz	00101$
      000034 7B 00            [12]  462 	mov	r3,#0x00
      000036 8C 82            [24]  463 	mov	dpl,r4
      000038 8B 83            [24]  464 	mov	dph,r3
      00003A 12r00r00         [24]  465 	lcall	_putchar
      00003D 0D               [12]  466 	inc	r5
      00003E BD 00 E7         [24]  467 	cjne	r5,#0x00,00103$
      000041 0E               [12]  468 	inc	r6
      000042 80 E4            [24]  469 	sjmp	00103$
      000044                        470 00101$:
                                    471 ;	calc.c:50: return;
                                    472 ;	calc.c:51: }
      000044 22               [24]  473 	ret
                                    474 ;------------------------------------------------------------
                                    475 ;Allocation info for local variables in function 'printbin'
                                    476 ;------------------------------------------------------------
                                    477 ;d                         Allocated to stack - _bp +1
                                    478 ;mask                      Allocated to stack - _bp +5
                                    479 ;------------------------------------------------------------
                                    480 ;	calc.c:53: static inline void printbin(long d) {
                                    481 ;	-----------------------------------------
                                    482 ;	 function printbin
                                    483 ;	-----------------------------------------
      000045                        484 _printbin:
      000045 C0*00            [24]  485 	push	_bp
      000047 85 81*00         [24]  486 	mov	_bp,sp
      00004A C0 82            [24]  487 	push	dpl
      00004C C0 83            [24]  488 	push	dph
      00004E C0 F0            [24]  489 	push	b
      000050 C0 E0            [24]  490 	push	acc
      000052 E5 81            [12]  491 	mov	a,sp
      000054 24 04            [12]  492 	add	a,#0x04
      000056 F5 81            [12]  493 	mov	sp,a
                                    494 ;	calc.c:56: for (mask = 0x80000000lu; mask; mask >>= 1)
      000058 E5*00            [12]  495 	mov	a,_bp
      00005A 24 05            [12]  496 	add	a,#0x05
      00005C F8               [12]  497 	mov	r0,a
      00005D E4               [12]  498 	clr	a
      00005E F6               [12]  499 	mov	@r0,a
      00005F 08               [12]  500 	inc	r0
      000060 F6               [12]  501 	mov	@r0,a
      000061 08               [12]  502 	inc	r0
      000062 F6               [12]  503 	mov	@r0,a
      000063 08               [12]  504 	inc	r0
      000064 76 80            [12]  505 	mov	@r0,#0x80
      000066                        506 00102$:
                                    507 ;	calc.c:57: (void)putchar((d & mask) ? (int)'1' : (int)'0');
      000066 A8*00            [24]  508 	mov	r0,_bp
      000068 08               [12]  509 	inc	r0
      000069 86 04            [24]  510 	mov	ar4,@r0
      00006B 08               [12]  511 	inc	r0
      00006C 86 05            [24]  512 	mov	ar5,@r0
      00006E 08               [12]  513 	inc	r0
      00006F 86 06            [24]  514 	mov	ar6,@r0
      000071 08               [12]  515 	inc	r0
      000072 86 07            [24]  516 	mov	ar7,@r0
      000074 E5*00            [12]  517 	mov	a,_bp
      000076 24 05            [12]  518 	add	a,#0x05
      000078 F8               [12]  519 	mov	r0,a
      000079 E6               [12]  520 	mov	a,@r0
      00007A 52 04            [12]  521 	anl	ar4,a
      00007C 08               [12]  522 	inc	r0
      00007D E6               [12]  523 	mov	a,@r0
      00007E 52 05            [12]  524 	anl	ar5,a
      000080 08               [12]  525 	inc	r0
      000081 E6               [12]  526 	mov	a,@r0
      000082 52 06            [12]  527 	anl	ar6,a
      000084 08               [12]  528 	inc	r0
      000085 E6               [12]  529 	mov	a,@r0
      000086 52 07            [12]  530 	anl	ar7,a
      000088 EC               [12]  531 	mov	a,r4
      000089 4D               [12]  532 	orl	a,r5
      00008A 4E               [12]  533 	orl	a,r6
      00008B 4F               [12]  534 	orl	a,r7
      00008C 60 06            [24]  535 	jz	00106$
      00008E 7E 31            [12]  536 	mov	r6,#0x31
      000090 7F 00            [12]  537 	mov	r7,#0x00
      000092 80 04            [24]  538 	sjmp	00107$
      000094                        539 00106$:
      000094 7E 30            [12]  540 	mov	r6,#0x30
      000096 7F 00            [12]  541 	mov	r7,#0x00
      000098                        542 00107$:
      000098 8E 82            [24]  543 	mov	dpl,r6
      00009A 8F 83            [24]  544 	mov	dph,r7
      00009C 12r00r00         [24]  545 	lcall	_putchar
                                    546 ;	calc.c:56: for (mask = 0x80000000lu; mask; mask >>= 1)
      00009F E5*00            [12]  547 	mov	a,_bp
      0000A1 24 05            [12]  548 	add	a,#0x05
      0000A3 F8               [12]  549 	mov	r0,a
      0000A4 08               [12]  550 	inc	r0
      0000A5 08               [12]  551 	inc	r0
      0000A6 08               [12]  552 	inc	r0
      0000A7 E6               [12]  553 	mov	a,@r0
      0000A8 C3               [12]  554 	clr	c
      0000A9 13               [12]  555 	rrc	a
      0000AA F6               [12]  556 	mov	@r0,a
      0000AB 18               [12]  557 	dec	r0
      0000AC E6               [12]  558 	mov	a,@r0
      0000AD 13               [12]  559 	rrc	a
      0000AE F6               [12]  560 	mov	@r0,a
      0000AF 18               [12]  561 	dec	r0
      0000B0 E6               [12]  562 	mov	a,@r0
      0000B1 13               [12]  563 	rrc	a
      0000B2 F6               [12]  564 	mov	@r0,a
      0000B3 18               [12]  565 	dec	r0
      0000B4 E6               [12]  566 	mov	a,@r0
      0000B5 13               [12]  567 	rrc	a
      0000B6 F6               [12]  568 	mov	@r0,a
      0000B7 E5*00            [12]  569 	mov	a,_bp
      0000B9 24 05            [12]  570 	add	a,#0x05
      0000BB F8               [12]  571 	mov	r0,a
      0000BC E6               [12]  572 	mov	a,@r0
      0000BD 08               [12]  573 	inc	r0
      0000BE 46               [12]  574 	orl	a,@r0
      0000BF 08               [12]  575 	inc	r0
      0000C0 46               [12]  576 	orl	a,@r0
      0000C1 08               [12]  577 	inc	r0
      0000C2 46               [12]  578 	orl	a,@r0
      0000C3 70 A1            [24]  579 	jnz	00102$
                                    580 ;	calc.c:59: return;
                                    581 ;	calc.c:60: }
      0000C5 85*00 81         [24]  582 	mov	sp,_bp
      0000C8 D0*00            [24]  583 	pop	_bp
      0000CA 22               [24]  584 	ret
                                    585 ;------------------------------------------------------------
                                    586 ;Allocation info for local variables in function 'accumulate'
                                    587 ;------------------------------------------------------------
                                    588 ;delta                     Allocated to stack - _bp -5
                                    589 ;_ctx                      Allocated to registers r5 r6 r7 
                                    590 ;ctx                       Allocated to stack - _bp +8
                                    591 ;d                         Allocated to stack - _bp +11
                                    592 ;sloc0                     Allocated to stack - _bp +1
                                    593 ;sloc1                     Allocated to stack - _bp +4
                                    594 ;------------------------------------------------------------
                                    595 ;	calc.c:84: static int accumulate(void *_ctx, delta_t *delta) __reentrant {
                                    596 ;	-----------------------------------------
                                    597 ;	 function accumulate
                                    598 ;	-----------------------------------------
      0000CB                        599 _accumulate:
      0000CB C0*00            [24]  600 	push	_bp
      0000CD E5 81            [12]  601 	mov	a,sp
      0000CF F5*00            [12]  602 	mov	_bp,a
      0000D1 24 0E            [12]  603 	add	a,#0x0e
      0000D3 F5 81            [12]  604 	mov	sp,a
      0000D5 AD 82            [24]  605 	mov	r5,dpl
      0000D7 AE 83            [24]  606 	mov	r6,dph
      0000D9 AF F0            [24]  607 	mov	r7,b
                                    608 ;	calc.c:85: struct ctx *ctx = (struct ctx *)_ctx;
      0000DB E5*00            [12]  609 	mov	a,_bp
      0000DD 24 08            [12]  610 	add	a,#0x08
      0000DF F8               [12]  611 	mov	r0,a
      0000E0 A6 05            [24]  612 	mov	@r0,ar5
      0000E2 08               [12]  613 	inc	r0
      0000E3 A6 06            [24]  614 	mov	@r0,ar6
      0000E5 08               [12]  615 	inc	r0
      0000E6 A6 07            [24]  616 	mov	@r0,ar7
                                    617 ;	calc.c:90: if (!ctx->acc_valid) {
      0000E8 E5*00            [12]  618 	mov	a,_bp
      0000EA 24 08            [12]  619 	add	a,#0x08
      0000EC F8               [12]  620 	mov	r0,a
      0000ED 74 06            [12]  621 	mov	a,#0x06
      0000EF 26               [12]  622 	add	a,@r0
      0000F0 FA               [12]  623 	mov	r2,a
      0000F1 E4               [12]  624 	clr	a
      0000F2 08               [12]  625 	inc	r0
      0000F3 36               [12]  626 	addc	a,@r0
      0000F4 FB               [12]  627 	mov	r3,a
      0000F5 08               [12]  628 	inc	r0
      0000F6 86 04            [24]  629 	mov	ar4,@r0
      0000F8 8A 82            [24]  630 	mov	dpl,r2
      0000FA 8B 83            [24]  631 	mov	dph,r3
      0000FC 8C F0            [24]  632 	mov	b,r4
      0000FE 12r00r00         [24]  633 	lcall	__gptrget
      000101 70 31            [24]  634 	jnz	00102$
                                    635 ;	calc.c:91: ctx->acc_valid = 1;
      000103 8A 82            [24]  636 	mov	dpl,r2
      000105 8B 83            [24]  637 	mov	dph,r3
      000107 8C F0            [24]  638 	mov	b,r4
      000109 74 01            [12]  639 	mov	a,#0x01
      00010B 12r00r00         [24]  640 	lcall	__gptrput
                                    641 ;	calc.c:92: ctx->acc = 0l;
      00010E E5*00            [12]  642 	mov	a,_bp
      000110 24 08            [12]  643 	add	a,#0x08
      000112 F8               [12]  644 	mov	r0,a
      000113 74 02            [12]  645 	mov	a,#0x02
      000115 26               [12]  646 	add	a,@r0
      000116 FA               [12]  647 	mov	r2,a
      000117 E4               [12]  648 	clr	a
      000118 08               [12]  649 	inc	r0
      000119 36               [12]  650 	addc	a,@r0
      00011A FB               [12]  651 	mov	r3,a
      00011B 08               [12]  652 	inc	r0
      00011C 86 04            [24]  653 	mov	ar4,@r0
      00011E 8A 82            [24]  654 	mov	dpl,r2
      000120 8B 83            [24]  655 	mov	dph,r3
      000122 8C F0            [24]  656 	mov	b,r4
      000124 E4               [12]  657 	clr	a
      000125 12r00r00         [24]  658 	lcall	__gptrput
      000128 A3               [24]  659 	inc	dptr
      000129 12r00r00         [24]  660 	lcall	__gptrput
      00012C A3               [24]  661 	inc	dptr
      00012D 12r00r00         [24]  662 	lcall	__gptrput
      000130 A3               [24]  663 	inc	dptr
      000131 12r00r00         [24]  664 	lcall	__gptrput
      000134                        665 00102$:
                                    666 ;	calc.c:95: d = strtol(ctx->digit, NULL, ctx->base);
      000134 E5*00            [12]  667 	mov	a,_bp
      000136 24 08            [12]  668 	add	a,#0x08
      000138 F8               [12]  669 	mov	r0,a
      000139 86 82            [24]  670 	mov	dpl,@r0
      00013B 08               [12]  671 	inc	r0
      00013C 86 83            [24]  672 	mov	dph,@r0
      00013E 08               [12]  673 	inc	r0
      00013F 86 F0            [24]  674 	mov	b,@r0
      000141 12r00r00         [24]  675 	lcall	__gptrget
      000144 FB               [12]  676 	mov	r3,a
      000145 A3               [24]  677 	inc	dptr
      000146 12r00r00         [24]  678 	lcall	__gptrget
      000149 FC               [12]  679 	mov	r4,a
      00014A E5*00            [12]  680 	mov	a,_bp
      00014C 24 08            [12]  681 	add	a,#0x08
      00014E F8               [12]  682 	mov	r0,a
      00014F 74 07            [12]  683 	mov	a,#0x07
      000151 26               [12]  684 	add	a,@r0
      000152 FA               [12]  685 	mov	r2,a
      000153 E4               [12]  686 	clr	a
      000154 08               [12]  687 	inc	r0
      000155 36               [12]  688 	addc	a,@r0
      000156 FE               [12]  689 	mov	r6,a
      000157 08               [12]  690 	inc	r0
      000158 86 07            [24]  691 	mov	ar7,@r0
      00015A C0 03            [24]  692 	push	ar3
      00015C C0 04            [24]  693 	push	ar4
      00015E E4               [12]  694 	clr	a
      00015F C0 E0            [24]  695 	push	acc
      000161 C0 E0            [24]  696 	push	acc
      000163 C0 E0            [24]  697 	push	acc
      000165 8A 82            [24]  698 	mov	dpl,r2
      000167 8E 83            [24]  699 	mov	dph,r6
      000169 8F F0            [24]  700 	mov	b,r7
      00016B 12r00r00         [24]  701 	lcall	_strtol
      00016E C8               [12]  702 	xch	a,r0
      00016F E5*00            [12]  703 	mov	a,_bp
      000171 24 0B            [12]  704 	add	a,#0x0b
      000173 C8               [12]  705 	xch	a,r0
      000174 A6 82            [24]  706 	mov	@r0,dpl
      000176 08               [12]  707 	inc	r0
      000177 A6 83            [24]  708 	mov	@r0,dph
      000179 08               [12]  709 	inc	r0
      00017A A6 F0            [24]  710 	mov	@r0,b
      00017C 08               [12]  711 	inc	r0
      00017D F6               [12]  712 	mov	@r0,a
      00017E E5 81            [12]  713 	mov	a,sp
      000180 24 FB            [12]  714 	add	a,#0xfb
      000182 F5 81            [12]  715 	mov	sp,a
                                    716 ;	calc.c:96: ctx->acc = ctx->acc * (long)ctx->base + d;
      000184 E5*00            [12]  717 	mov	a,_bp
      000186 24 08            [12]  718 	add	a,#0x08
      000188 F8               [12]  719 	mov	r0,a
      000189 A9*00            [24]  720 	mov	r1,_bp
      00018B 09               [12]  721 	inc	r1
      00018C 74 02            [12]  722 	mov	a,#0x02
      00018E 26               [12]  723 	add	a,@r0
      00018F F7               [12]  724 	mov	@r1,a
      000190 E4               [12]  725 	clr	a
      000191 08               [12]  726 	inc	r0
      000192 36               [12]  727 	addc	a,@r0
      000193 09               [12]  728 	inc	r1
      000194 F7               [12]  729 	mov	@r1,a
      000195 08               [12]  730 	inc	r0
      000196 09               [12]  731 	inc	r1
      000197 E6               [12]  732 	mov	a,@r0
      000198 F7               [12]  733 	mov	@r1,a
      000199 A8*00            [24]  734 	mov	r0,_bp
      00019B 08               [12]  735 	inc	r0
      00019C 86 82            [24]  736 	mov	dpl,@r0
      00019E 08               [12]  737 	inc	r0
      00019F 86 83            [24]  738 	mov	dph,@r0
      0001A1 08               [12]  739 	inc	r0
      0001A2 86 F0            [24]  740 	mov	b,@r0
      0001A4 E5*00            [12]  741 	mov	a,_bp
      0001A6 24 04            [12]  742 	add	a,#0x04
      0001A8 F9               [12]  743 	mov	r1,a
      0001A9 12r00r00         [24]  744 	lcall	__gptrget
      0001AC F7               [12]  745 	mov	@r1,a
      0001AD A3               [24]  746 	inc	dptr
      0001AE 12r00r00         [24]  747 	lcall	__gptrget
      0001B1 09               [12]  748 	inc	r1
      0001B2 F7               [12]  749 	mov	@r1,a
      0001B3 A3               [24]  750 	inc	dptr
      0001B4 12r00r00         [24]  751 	lcall	__gptrget
      0001B7 09               [12]  752 	inc	r1
      0001B8 F7               [12]  753 	mov	@r1,a
      0001B9 A3               [24]  754 	inc	dptr
      0001BA 12r00r00         [24]  755 	lcall	__gptrget
      0001BD 09               [12]  756 	inc	r1
      0001BE F7               [12]  757 	mov	@r1,a
      0001BF E5*00            [12]  758 	mov	a,_bp
      0001C1 24 08            [12]  759 	add	a,#0x08
      0001C3 F8               [12]  760 	mov	r0,a
      0001C4 86 82            [24]  761 	mov	dpl,@r0
      0001C6 08               [12]  762 	inc	r0
      0001C7 86 83            [24]  763 	mov	dph,@r0
      0001C9 08               [12]  764 	inc	r0
      0001CA 86 F0            [24]  765 	mov	b,@r0
      0001CC 12r00r00         [24]  766 	lcall	__gptrget
      0001CF FA               [12]  767 	mov	r2,a
      0001D0 A3               [24]  768 	inc	dptr
      0001D1 12r00r00         [24]  769 	lcall	__gptrget
      0001D4 FB               [12]  770 	mov	r3,a
      0001D5 33               [12]  771 	rlc	a
      0001D6 95 E0            [12]  772 	subb	a,acc
      0001D8 FE               [12]  773 	mov	r6,a
      0001D9 FF               [12]  774 	mov	r7,a
      0001DA C0 02            [24]  775 	push	ar2
      0001DC C0 03            [24]  776 	push	ar3
      0001DE C0 06            [24]  777 	push	ar6
      0001E0 C0 07            [24]  778 	push	ar7
      0001E2 E5*00            [12]  779 	mov	a,_bp
      0001E4 24 04            [12]  780 	add	a,#0x04
      0001E6 F8               [12]  781 	mov	r0,a
      0001E7 86 82            [24]  782 	mov	dpl,@r0
      0001E9 08               [12]  783 	inc	r0
      0001EA 86 83            [24]  784 	mov	dph,@r0
      0001EC 08               [12]  785 	inc	r0
      0001ED 86 F0            [24]  786 	mov	b,@r0
      0001EF 08               [12]  787 	inc	r0
      0001F0 E6               [12]  788 	mov	a,@r0
      0001F1 12r00r00         [24]  789 	lcall	__mullong
      0001F4 AC 82            [24]  790 	mov	r4,dpl
      0001F6 AD 83            [24]  791 	mov	r5,dph
      0001F8 AE F0            [24]  792 	mov	r6,b
      0001FA FF               [12]  793 	mov	r7,a
      0001FB E5 81            [12]  794 	mov	a,sp
      0001FD 24 FC            [12]  795 	add	a,#0xfc
      0001FF F5 81            [12]  796 	mov	sp,a
      000201 E5*00            [12]  797 	mov	a,_bp
      000203 24 0B            [12]  798 	add	a,#0x0b
      000205 F8               [12]  799 	mov	r0,a
      000206 E6               [12]  800 	mov	a,@r0
      000207 2C               [12]  801 	add	a,r4
      000208 FC               [12]  802 	mov	r4,a
      000209 08               [12]  803 	inc	r0
      00020A E6               [12]  804 	mov	a,@r0
      00020B 3D               [12]  805 	addc	a,r5
      00020C FD               [12]  806 	mov	r5,a
      00020D 08               [12]  807 	inc	r0
      00020E E6               [12]  808 	mov	a,@r0
      00020F 3E               [12]  809 	addc	a,r6
      000210 FE               [12]  810 	mov	r6,a
      000211 08               [12]  811 	inc	r0
      000212 E6               [12]  812 	mov	a,@r0
      000213 3F               [12]  813 	addc	a,r7
      000214 FF               [12]  814 	mov	r7,a
      000215 A8*00            [24]  815 	mov	r0,_bp
      000217 08               [12]  816 	inc	r0
      000218 86 82            [24]  817 	mov	dpl,@r0
      00021A 08               [12]  818 	inc	r0
      00021B 86 83            [24]  819 	mov	dph,@r0
      00021D 08               [12]  820 	inc	r0
      00021E 86 F0            [24]  821 	mov	b,@r0
      000220 EC               [12]  822 	mov	a,r4
      000221 12r00r00         [24]  823 	lcall	__gptrput
      000224 A3               [24]  824 	inc	dptr
      000225 ED               [12]  825 	mov	a,r5
      000226 12r00r00         [24]  826 	lcall	__gptrput
      000229 A3               [24]  827 	inc	dptr
      00022A EE               [12]  828 	mov	a,r6
      00022B 12r00r00         [24]  829 	lcall	__gptrput
      00022E A3               [24]  830 	inc	dptr
      00022F EF               [12]  831 	mov	a,r7
      000230 12r00r00         [24]  832 	lcall	__gptrput
                                    833 ;	calc.c:98: return 1;
      000233 90 00 01         [24]  834 	mov	dptr,#0x0001
                                    835 ;	calc.c:99: }
      000236 85*00 81         [24]  836 	mov	sp,_bp
      000239 D0*00            [24]  837 	pop	_bp
      00023B 22               [24]  838 	ret
                                    839 ;------------------------------------------------------------
                                    840 ;Allocation info for local variables in function 'dump_pop'
                                    841 ;------------------------------------------------------------
                                    842 ;delta                     Allocated to stack - _bp -5
                                    843 ;_ctx                      Allocated to registers r5 r6 r7 
                                    844 ;ctx                       Allocated to stack - _bp +5
                                    845 ;d                         Allocated to stack - _bp +8
                                    846 ;r                         Allocated to stack - _bp +2
                                    847 ;__1310720001              Allocated to registers 
                                    848 ;s                         Allocated to registers r5 r6 r7 
                                    849 ;__1966080003              Allocated to registers 
                                    850 ;s                         Allocated to registers r4 r5 r6 
                                    851 ;__1966080005              Allocated to registers 
                                    852 ;s                         Allocated to registers r4 r5 r6 
                                    853 ;__1966080007              Allocated to registers r3 r4 r5 r6 
                                    854 ;d                         Allocated to stack - _bp +12
                                    855 ;mask                      Allocated to stack - _bp +16
                                    856 ;__1966080009              Allocated to registers 
                                    857 ;s                         Allocated to registers r4 r5 r6 
                                    858 ;sloc0                     Allocated to stack - _bp +1
                                    859 ;sloc1                     Allocated to stack - _bp +2
                                    860 ;------------------------------------------------------------
                                    861 ;	calc.c:101: static int dump_pop(void *_ctx, delta_t *delta) __reentrant {
                                    862 ;	-----------------------------------------
                                    863 ;	 function dump_pop
                                    864 ;	-----------------------------------------
      00023C                        865 _dump_pop:
      00023C C0*00            [24]  866 	push	_bp
      00023E E5 81            [12]  867 	mov	a,sp
      000240 F5*00            [12]  868 	mov	_bp,a
      000242 24 13            [12]  869 	add	a,#0x13
      000244 F5 81            [12]  870 	mov	sp,a
      000246 AD 82            [24]  871 	mov	r5,dpl
      000248 AE 83            [24]  872 	mov	r6,dph
      00024A AF F0            [24]  873 	mov	r7,b
                                    874 ;	calc.c:102: struct ctx *ctx = (struct ctx *)_ctx;
      00024C E5*00            [12]  875 	mov	a,_bp
      00024E 24 05            [12]  876 	add	a,#0x05
      000250 F8               [12]  877 	mov	r0,a
      000251 A6 05            [24]  878 	mov	@r0,ar5
      000253 08               [12]  879 	inc	r0
      000254 A6 06            [24]  880 	mov	@r0,ar6
      000256 08               [12]  881 	inc	r0
      000257 A6 07            [24]  882 	mov	@r0,ar7
                                    883 ;	calc.c:106: if (delta->event == EVENT_TERM) printstr("\r\n");
      000259 E5*00            [12]  884 	mov	a,_bp
      00025B 24 FB            [12]  885 	add	a,#0xfb
      00025D F8               [12]  886 	mov	r0,a
      00025E 86 02            [24]  887 	mov	ar2,@r0
      000260 08               [12]  888 	inc	r0
      000261 86 03            [24]  889 	mov	ar3,@r0
      000263 08               [12]  890 	inc	r0
      000264 86 04            [24]  891 	mov	ar4,@r0
      000266 74 02            [12]  892 	mov	a,#0x02
      000268 2A               [12]  893 	add	a,r2
      000269 FA               [12]  894 	mov	r2,a
      00026A E4               [12]  895 	clr	a
      00026B 3B               [12]  896 	addc	a,r3
      00026C FB               [12]  897 	mov	r3,a
      00026D 8A 82            [24]  898 	mov	dpl,r2
      00026F 8B 83            [24]  899 	mov	dph,r3
      000271 8C F0            [24]  900 	mov	b,r4
      000273 12r00r00         [24]  901 	lcall	__gptrget
      000276 FE               [12]  902 	mov	r6,a
      000277 A3               [24]  903 	inc	dptr
      000278 12r00r00         [24]  904 	lcall	__gptrget
      00027B FF               [12]  905 	mov	r7,a
      00027C BE 07 3D         [24]  906 	cjne	r6,#0x07,00102$
      00027F BF 00 3A         [24]  907 	cjne	r7,#0x00,00102$
      000282 7Dr00            [12]  908 	mov	r5,#___str_0
      000284 7Es00            [12]  909 	mov	r6,#(___str_0 >> 8)
      000286 7F 80            [12]  910 	mov	r7,#0x80
                                    911 ;	calc.c:50: return;
      000288                        912 00122$:
                                    913 ;	calc.c:48: for (; *s; s++) putchar(*s);
      000288 8D 82            [24]  914 	mov	dpl,r5
      00028A 8E 83            [24]  915 	mov	dph,r6
      00028C 8F F0            [24]  916 	mov	b,r7
      00028E A8*00            [24]  917 	mov	r0,_bp
      000290 08               [12]  918 	inc	r0
      000291 12r00r00         [24]  919 	lcall	__gptrget
      000294 F6               [12]  920 	mov	@r0,a
      000295 A8*00            [24]  921 	mov	r0,_bp
      000297 08               [12]  922 	inc	r0
      000298 E6               [12]  923 	mov	a,@r0
      000299 60 21            [24]  924 	jz	00102$
      00029B C0 02            [24]  925 	push	ar2
      00029D C0 03            [24]  926 	push	ar3
      00029F C0 04            [24]  927 	push	ar4
      0002A1 A8*00            [24]  928 	mov	r0,_bp
      0002A3 08               [12]  929 	inc	r0
      0002A4 86 03            [24]  930 	mov	ar3,@r0
      0002A6 7C 00            [12]  931 	mov	r4,#0x00
      0002A8 8B 82            [24]  932 	mov	dpl,r3
      0002AA 8C 83            [24]  933 	mov	dph,r4
      0002AC 12r00r00         [24]  934 	lcall	_putchar
      0002AF 0D               [12]  935 	inc	r5
      0002B0 BD 00 01         [24]  936 	cjne	r5,#0x00,00210$
      0002B3 0E               [12]  937 	inc	r6
      0002B4                        938 00210$:
      0002B4 D0 04            [24]  939 	pop	ar4
      0002B6 D0 03            [24]  940 	pop	ar3
      0002B8 D0 02            [24]  941 	pop	ar2
                                    942 ;	calc.c:106: if (delta->event == EVENT_TERM) printstr("\r\n");
      0002BA 80 CC            [24]  943 	sjmp	00122$
      0002BC                        944 00102$:
                                    945 ;	calc.c:108: r = stack_pop(&ctx->s, &d);
      0002BC C0 02            [24]  946 	push	ar2
      0002BE C0 03            [24]  947 	push	ar3
      0002C0 C0 04            [24]  948 	push	ar4
      0002C2 E5*00            [12]  949 	mov	a,_bp
      0002C4 24 08            [12]  950 	add	a,#0x08
      0002C6 FF               [12]  951 	mov	r7,a
      0002C7 A8*00            [24]  952 	mov	r0,_bp
      0002C9 08               [12]  953 	inc	r0
      0002CA 08               [12]  954 	inc	r0
      0002CB A6 07            [24]  955 	mov	@r0,ar7
      0002CD 08               [12]  956 	inc	r0
      0002CE 76 00            [12]  957 	mov	@r0,#0x00
      0002D0 08               [12]  958 	inc	r0
      0002D1 76 40            [12]  959 	mov	@r0,#0x40
      0002D3 E5*00            [12]  960 	mov	a,_bp
      0002D5 24 05            [12]  961 	add	a,#0x05
      0002D7 F8               [12]  962 	mov	r0,a
      0002D8 74 09            [12]  963 	mov	a,#0x09
      0002DA 26               [12]  964 	add	a,@r0
      0002DB FA               [12]  965 	mov	r2,a
      0002DC E4               [12]  966 	clr	a
      0002DD 08               [12]  967 	inc	r0
      0002DE 36               [12]  968 	addc	a,@r0
      0002DF FB               [12]  969 	mov	r3,a
      0002E0 08               [12]  970 	inc	r0
      0002E1 86 06            [24]  971 	mov	ar6,@r0
      0002E3 C0 07            [24]  972 	push	ar7
      0002E5 C0 04            [24]  973 	push	ar4
      0002E7 C0 03            [24]  974 	push	ar3
      0002E9 C0 02            [24]  975 	push	ar2
      0002EB A8*00            [24]  976 	mov	r0,_bp
      0002ED 08               [12]  977 	inc	r0
      0002EE 08               [12]  978 	inc	r0
      0002EF E6               [12]  979 	mov	a,@r0
      0002F0 C0 E0            [24]  980 	push	acc
      0002F2 08               [12]  981 	inc	r0
      0002F3 E6               [12]  982 	mov	a,@r0
      0002F4 C0 E0            [24]  983 	push	acc
      0002F6 08               [12]  984 	inc	r0
      0002F7 E6               [12]  985 	mov	a,@r0
      0002F8 C0 E0            [24]  986 	push	acc
      0002FA 8A 82            [24]  987 	mov	dpl,r2
      0002FC 8B 83            [24]  988 	mov	dph,r3
      0002FE 8E F0            [24]  989 	mov	b,r6
      000300 12r00r00         [24]  990 	lcall	_stack_pop
      000303 AD 82            [24]  991 	mov	r5,dpl
      000305 AE 83            [24]  992 	mov	r6,dph
      000307 15 81            [12]  993 	dec	sp
      000309 15 81            [12]  994 	dec	sp
      00030B 15 81            [12]  995 	dec	sp
      00030D D0 02            [24]  996 	pop	ar2
      00030F D0 03            [24]  997 	pop	ar3
      000311 D0 04            [24]  998 	pop	ar4
      000313 D0 07            [24]  999 	pop	ar7
      000315 A8*00            [24] 1000 	mov	r0,_bp
      000317 08               [12] 1001 	inc	r0
      000318 08               [12] 1002 	inc	r0
      000319 A6 05            [24] 1003 	mov	@r0,ar5
      00031B 08               [12] 1004 	inc	r0
      00031C A6 06            [24] 1005 	mov	@r0,ar6
                                   1006 ;	calc.c:109: if (!r) {
      00031E D0 04            [24] 1007 	pop	ar4
      000320 D0 03            [24] 1008 	pop	ar3
      000322 D0 02            [24] 1009 	pop	ar2
      000324 ED               [12] 1010 	mov	a,r5
      000325 4E               [12] 1011 	orl	a,r6
      000326 70 3D            [24] 1012 	jnz	00154$
                                   1013 ;	calc.c:110: if (delta->event != EVENT_TERM) printstr("stack underflow\r\n");
      000328 8A 82            [24] 1014 	mov	dpl,r2
      00032A 8B 83            [24] 1015 	mov	dph,r3
      00032C 8C F0            [24] 1016 	mov	b,r4
      00032E 12r00r00         [24] 1017 	lcall	__gptrget
      000331 FA               [12] 1018 	mov	r2,a
      000332 A3               [24] 1019 	inc	dptr
      000333 12r00r00         [24] 1020 	lcall	__gptrget
      000336 FB               [12] 1021 	mov	r3,a
      000337 BA 07 06         [24] 1022 	cjne	r2,#0x07,00212$
      00033A BB 00 03         [24] 1023 	cjne	r3,#0x00,00212$
      00033D 02r04rE7         [24] 1024 	ljmp	00110$
      000340                       1025 00212$:
      000340 7Cr03            [12] 1026 	mov	r4,#___str_1
      000342 7Ds00            [12] 1027 	mov	r5,#(___str_1 >> 8)
      000344 7E 80            [12] 1028 	mov	r6,#0x80
                                   1029 ;	calc.c:50: return;
      000346                       1030 00125$:
                                   1031 ;	calc.c:48: for (; *s; s++) putchar(*s);
      000346 8C 82            [24] 1032 	mov	dpl,r4
      000348 8D 83            [24] 1033 	mov	dph,r5
      00034A 8E F0            [24] 1034 	mov	b,r6
      00034C 12r00r00         [24] 1035 	lcall	__gptrget
      00034F FB               [12] 1036 	mov	r3,a
      000350 70 03            [24] 1037 	jnz	00213$
      000352 02r04rE7         [24] 1038 	ljmp	00110$
      000355                       1039 00213$:
      000355 7A 00            [12] 1040 	mov	r2,#0x00
      000357 8B 82            [24] 1041 	mov	dpl,r3
      000359 8A 83            [24] 1042 	mov	dph,r2
      00035B 12r00r00         [24] 1043 	lcall	_putchar
      00035E 0C               [12] 1044 	inc	r4
                                   1045 ;	calc.c:111: } else while (r > 0) {
      00035F BC 00 E4         [24] 1046 	cjne	r4,#0x00,00125$
      000362 0D               [12] 1047 	inc	r5
      000363 80 E1            [24] 1048 	sjmp	00125$
      000365                       1049 00154$:
      000365                       1050 00105$:
      000365 A8*00            [24] 1051 	mov	r0,_bp
      000367 08               [12] 1052 	inc	r0
      000368 08               [12] 1053 	inc	r0
      000369 C3               [12] 1054 	clr	c
      00036A E4               [12] 1055 	clr	a
      00036B 96               [12] 1056 	subb	a,@r0
      00036C 74 80            [12] 1057 	mov	a,#(0x00 ^ 0x80)
      00036E 08               [12] 1058 	inc	r0
      00036F 86 F0            [24] 1059 	mov	b,@r0
      000371 63 F0 80         [24] 1060 	xrl	b,#0x80
      000374 95 F0            [12] 1061 	subb	a,b
      000376 40 03            [24] 1062 	jc	00215$
      000378 02r04rE7         [24] 1063 	ljmp	00110$
      00037B                       1064 00215$:
                                   1065 ;	calc.c:112: printstr("VA ");
      00037B 7Cr15            [12] 1066 	mov	r4,#___str_2
      00037D 7Ds00            [12] 1067 	mov	r5,#(___str_2 >> 8)
      00037F 7E 80            [12] 1068 	mov	r6,#0x80
                                   1069 ;	calc.c:50: return;
      000381                       1070 00128$:
                                   1071 ;	calc.c:48: for (; *s; s++) putchar(*s);
      000381 8C 82            [24] 1072 	mov	dpl,r4
      000383 8D 83            [24] 1073 	mov	dph,r5
      000385 8E F0            [24] 1074 	mov	b,r6
      000387 12r00r00         [24] 1075 	lcall	__gptrget
      00038A FB               [12] 1076 	mov	r3,a
      00038B 60 10            [24] 1077 	jz	00116$
      00038D 7A 00            [12] 1078 	mov	r2,#0x00
      00038F 8B 82            [24] 1079 	mov	dpl,r3
      000391 8A 83            [24] 1080 	mov	dph,r2
      000393 12r00r00         [24] 1081 	lcall	_putchar
      000396 0C               [12] 1082 	inc	r4
                                   1083 ;	calc.c:112: printstr("VA ");
      000397 BC 00 E7         [24] 1084 	cjne	r4,#0x00,00128$
      00039A 0D               [12] 1085 	inc	r5
      00039B 80 E4            [24] 1086 	sjmp	00128$
      00039D                       1087 00116$:
                                   1088 ;	calc.c:113: printf("% 11ld / ", d);
      00039D C0 07            [24] 1089 	push	ar7
      00039F E5*00            [12] 1090 	mov	a,_bp
      0003A1 24 08            [12] 1091 	add	a,#0x08
      0003A3 F8               [12] 1092 	mov	r0,a
      0003A4 E6               [12] 1093 	mov	a,@r0
      0003A5 C0 E0            [24] 1094 	push	acc
      0003A7 08               [12] 1095 	inc	r0
      0003A8 E6               [12] 1096 	mov	a,@r0
      0003A9 C0 E0            [24] 1097 	push	acc
      0003AB 08               [12] 1098 	inc	r0
      0003AC E6               [12] 1099 	mov	a,@r0
      0003AD C0 E0            [24] 1100 	push	acc
      0003AF 08               [12] 1101 	inc	r0
      0003B0 E6               [12] 1102 	mov	a,@r0
      0003B1 C0 E0            [24] 1103 	push	acc
      0003B3 74r19            [12] 1104 	mov	a,#___str_3
      0003B5 C0 E0            [24] 1105 	push	acc
      0003B7 74s00            [12] 1106 	mov	a,#(___str_3 >> 8)
      0003B9 C0 E0            [24] 1107 	push	acc
      0003BB 74 80            [12] 1108 	mov	a,#0x80
      0003BD C0 E0            [24] 1109 	push	acc
      0003BF 12r00r00         [24] 1110 	lcall	_printf
      0003C2 E5 81            [12] 1111 	mov	a,sp
      0003C4 24 F9            [12] 1112 	add	a,#0xf9
      0003C6 F5 81            [12] 1113 	mov	sp,a
                                   1114 ;	calc.c:114: printf("%08lx / ", d);
      0003C8 E5*00            [12] 1115 	mov	a,_bp
      0003CA 24 08            [12] 1116 	add	a,#0x08
      0003CC F8               [12] 1117 	mov	r0,a
      0003CD E6               [12] 1118 	mov	a,@r0
      0003CE C0 E0            [24] 1119 	push	acc
      0003D0 08               [12] 1120 	inc	r0
      0003D1 E6               [12] 1121 	mov	a,@r0
      0003D2 C0 E0            [24] 1122 	push	acc
      0003D4 08               [12] 1123 	inc	r0
      0003D5 E6               [12] 1124 	mov	a,@r0
      0003D6 C0 E0            [24] 1125 	push	acc
      0003D8 08               [12] 1126 	inc	r0
      0003D9 E6               [12] 1127 	mov	a,@r0
      0003DA C0 E0            [24] 1128 	push	acc
      0003DC 74r23            [12] 1129 	mov	a,#___str_4
      0003DE C0 E0            [24] 1130 	push	acc
      0003E0 74s00            [12] 1131 	mov	a,#(___str_4 >> 8)
      0003E2 C0 E0            [24] 1132 	push	acc
      0003E4 74 80            [12] 1133 	mov	a,#0x80
      0003E6 C0 E0            [24] 1134 	push	acc
      0003E8 12r00r00         [24] 1135 	lcall	_printf
      0003EB E5 81            [12] 1136 	mov	a,sp
      0003ED 24 F9            [12] 1137 	add	a,#0xf9
      0003EF F5 81            [12] 1138 	mov	sp,a
      0003F1 D0 07            [24] 1139 	pop	ar7
                                   1140 ;	calc.c:115: printbin(d);
      0003F3 E5*00            [12] 1141 	mov	a,_bp
      0003F5 24 08            [12] 1142 	add	a,#0x08
      0003F7 F8               [12] 1143 	mov	r0,a
      0003F8 86 03            [24] 1144 	mov	ar3,@r0
      0003FA 08               [12] 1145 	inc	r0
      0003FB 86 04            [24] 1146 	mov	ar4,@r0
      0003FD 08               [12] 1147 	inc	r0
      0003FE 86 05            [24] 1148 	mov	ar5,@r0
      000400 08               [12] 1149 	inc	r0
      000401 86 06            [24] 1150 	mov	ar6,@r0
      000403 E5*00            [12] 1151 	mov	a,_bp
      000405 24 0C            [12] 1152 	add	a,#0x0c
      000407 F8               [12] 1153 	mov	r0,a
      000408 A6 03            [24] 1154 	mov	@r0,ar3
      00040A 08               [12] 1155 	inc	r0
      00040B A6 04            [24] 1156 	mov	@r0,ar4
      00040D 08               [12] 1157 	inc	r0
      00040E A6 05            [24] 1158 	mov	@r0,ar5
      000410 08               [12] 1159 	inc	r0
      000411 A6 06            [24] 1160 	mov	@r0,ar6
                                   1161 ;	calc.c:56: for (mask = 0x80000000lu; mask; mask >>= 1)
      000413 E5*00            [12] 1162 	mov	a,_bp
      000415 24 10            [12] 1163 	add	a,#0x10
      000417 F8               [12] 1164 	mov	r0,a
      000418 E4               [12] 1165 	clr	a
      000419 F6               [12] 1166 	mov	@r0,a
      00041A 08               [12] 1167 	inc	r0
      00041B F6               [12] 1168 	mov	@r0,a
      00041C 08               [12] 1169 	inc	r0
      00041D F6               [12] 1170 	mov	@r0,a
      00041E 08               [12] 1171 	inc	r0
      00041F 76 80            [12] 1172 	mov	@r0,#0x80
      000421                       1173 00130$:
                                   1174 ;	calc.c:57: (void)putchar((d & mask) ? (int)'1' : (int)'0');
      000421 C0 07            [24] 1175 	push	ar7
      000423 E5*00            [12] 1176 	mov	a,_bp
      000425 24 0C            [12] 1177 	add	a,#0x0c
      000427 F8               [12] 1178 	mov	r0,a
      000428 86 03            [24] 1179 	mov	ar3,@r0
      00042A 08               [12] 1180 	inc	r0
      00042B 86 05            [24] 1181 	mov	ar5,@r0
      00042D 08               [12] 1182 	inc	r0
      00042E 86 06            [24] 1183 	mov	ar6,@r0
      000430 08               [12] 1184 	inc	r0
      000431 86 07            [24] 1185 	mov	ar7,@r0
      000433 E5*00            [12] 1186 	mov	a,_bp
      000435 24 10            [12] 1187 	add	a,#0x10
      000437 F8               [12] 1188 	mov	r0,a
      000438 E6               [12] 1189 	mov	a,@r0
      000439 52 03            [12] 1190 	anl	ar3,a
      00043B 08               [12] 1191 	inc	r0
      00043C E6               [12] 1192 	mov	a,@r0
      00043D 52 05            [12] 1193 	anl	ar5,a
      00043F 08               [12] 1194 	inc	r0
      000440 E6               [12] 1195 	mov	a,@r0
      000441 52 06            [12] 1196 	anl	ar6,a
      000443 08               [12] 1197 	inc	r0
      000444 E6               [12] 1198 	mov	a,@r0
      000445 52 07            [12] 1199 	anl	ar7,a
      000447 EB               [12] 1200 	mov	a,r3
      000448 4D               [12] 1201 	orl	a,r5
      000449 4E               [12] 1202 	orl	a,r6
      00044A 4F               [12] 1203 	orl	a,r7
      00044B D0 07            [24] 1204 	pop	ar7
      00044D 60 06            [24] 1205 	jz	00137$
      00044F 7D 31            [12] 1206 	mov	r5,#0x31
      000451 7E 00            [12] 1207 	mov	r6,#0x00
      000453 80 04            [24] 1208 	sjmp	00138$
      000455                       1209 00137$:
      000455 7D 30            [12] 1210 	mov	r5,#0x30
      000457 7E 00            [12] 1211 	mov	r6,#0x00
      000459                       1212 00138$:
      000459 8D 82            [24] 1213 	mov	dpl,r5
      00045B 8E 83            [24] 1214 	mov	dph,r6
      00045D 12r00r00         [24] 1215 	lcall	_putchar
                                   1216 ;	calc.c:56: for (mask = 0x80000000lu; mask; mask >>= 1)
      000460 E5*00            [12] 1217 	mov	a,_bp
      000462 24 10            [12] 1218 	add	a,#0x10
      000464 F8               [12] 1219 	mov	r0,a
      000465 08               [12] 1220 	inc	r0
      000466 08               [12] 1221 	inc	r0
      000467 08               [12] 1222 	inc	r0
      000468 E6               [12] 1223 	mov	a,@r0
      000469 C3               [12] 1224 	clr	c
      00046A 13               [12] 1225 	rrc	a
      00046B F6               [12] 1226 	mov	@r0,a
      00046C 18               [12] 1227 	dec	r0
      00046D E6               [12] 1228 	mov	a,@r0
      00046E 13               [12] 1229 	rrc	a
      00046F F6               [12] 1230 	mov	@r0,a
      000470 18               [12] 1231 	dec	r0
      000471 E6               [12] 1232 	mov	a,@r0
      000472 13               [12] 1233 	rrc	a
      000473 F6               [12] 1234 	mov	@r0,a
      000474 18               [12] 1235 	dec	r0
      000475 E6               [12] 1236 	mov	a,@r0
      000476 13               [12] 1237 	rrc	a
      000477 F6               [12] 1238 	mov	@r0,a
      000478 E5*00            [12] 1239 	mov	a,_bp
      00047A 24 10            [12] 1240 	add	a,#0x10
      00047C F8               [12] 1241 	mov	r0,a
      00047D E6               [12] 1242 	mov	a,@r0
      00047E 08               [12] 1243 	inc	r0
      00047F 46               [12] 1244 	orl	a,@r0
      000480 08               [12] 1245 	inc	r0
      000481 46               [12] 1246 	orl	a,@r0
      000482 08               [12] 1247 	inc	r0
      000483 46               [12] 1248 	orl	a,@r0
      000484 70 9B            [24] 1249 	jnz	00130$
                                   1250 ;	calc.c:116: printstr("\r\n");
      000486 7Cr00            [12] 1251 	mov	r4,#___str_0
      000488 7Ds00            [12] 1252 	mov	r5,#(___str_0 >> 8)
      00048A 7E 80            [12] 1253 	mov	r6,#0x80
                                   1254 ;	calc.c:50: return;
      00048C                       1255 00133$:
                                   1256 ;	calc.c:48: for (; *s; s++) putchar(*s);
      00048C 8C 82            [24] 1257 	mov	dpl,r4
      00048E 8D 83            [24] 1258 	mov	dph,r5
      000490 8E F0            [24] 1259 	mov	b,r6
      000492 12r00r00         [24] 1260 	lcall	__gptrget
      000495 FB               [12] 1261 	mov	r3,a
      000496 60 10            [24] 1262 	jz	00120$
      000498 7A 00            [12] 1263 	mov	r2,#0x00
      00049A 8B 82            [24] 1264 	mov	dpl,r3
      00049C 8A 83            [24] 1265 	mov	dph,r2
      00049E 12r00r00         [24] 1266 	lcall	_putchar
      0004A1 0C               [12] 1267 	inc	r4
                                   1268 ;	calc.c:116: printstr("\r\n");
      0004A2 BC 00 E7         [24] 1269 	cjne	r4,#0x00,00133$
      0004A5 0D               [12] 1270 	inc	r5
      0004A6 80 E4            [24] 1271 	sjmp	00133$
      0004A8                       1272 00120$:
                                   1273 ;	calc.c:117: r = stack_pop(&ctx->s, &d);
      0004A8 8F 04            [24] 1274 	mov	ar4,r7
      0004AA 7D 00            [12] 1275 	mov	r5,#0x00
      0004AC 7E 40            [12] 1276 	mov	r6,#0x40
      0004AE C0 07            [24] 1277 	push	ar7
      0004B0 E5*00            [12] 1278 	mov	a,_bp
      0004B2 24 05            [12] 1279 	add	a,#0x05
      0004B4 F8               [12] 1280 	mov	r0,a
      0004B5 74 09            [12] 1281 	mov	a,#0x09
      0004B7 26               [12] 1282 	add	a,@r0
      0004B8 FA               [12] 1283 	mov	r2,a
      0004B9 E4               [12] 1284 	clr	a
      0004BA 08               [12] 1285 	inc	r0
      0004BB 36               [12] 1286 	addc	a,@r0
      0004BC FB               [12] 1287 	mov	r3,a
      0004BD 08               [12] 1288 	inc	r0
      0004BE 86 07            [24] 1289 	mov	ar7,@r0
      0004C0 C0 04            [24] 1290 	push	ar4
      0004C2 C0 05            [24] 1291 	push	ar5
      0004C4 C0 06            [24] 1292 	push	ar6
      0004C6 8A 82            [24] 1293 	mov	dpl,r2
      0004C8 8B 83            [24] 1294 	mov	dph,r3
      0004CA 8F F0            [24] 1295 	mov	b,r7
      0004CC 12r00r00         [24] 1296 	lcall	_stack_pop
      0004CF AE 82            [24] 1297 	mov	r6,dpl
      0004D1 AF 83            [24] 1298 	mov	r7,dph
      0004D3 15 81            [12] 1299 	dec	sp
      0004D5 15 81            [12] 1300 	dec	sp
      0004D7 15 81            [12] 1301 	dec	sp
      0004D9 A8*00            [24] 1302 	mov	r0,_bp
      0004DB 08               [12] 1303 	inc	r0
      0004DC 08               [12] 1304 	inc	r0
      0004DD A6 06            [24] 1305 	mov	@r0,ar6
      0004DF 08               [12] 1306 	inc	r0
      0004E0 A6 07            [24] 1307 	mov	@r0,ar7
      0004E2 D0 07            [24] 1308 	pop	ar7
      0004E4 02r03r65         [24] 1309 	ljmp	00105$
      0004E7                       1310 00110$:
                                   1311 ;	calc.c:120: return 1;
      0004E7 90 00 01         [24] 1312 	mov	dptr,#0x0001
                                   1313 ;	calc.c:121: }
      0004EA 85*00 81         [24] 1314 	mov	sp,_bp
      0004ED D0*00            [24] 1315 	pop	_bp
      0004EF 22               [24] 1316 	ret
                                   1317 ;------------------------------------------------------------
                                   1318 ;Allocation info for local variables in function 'dump_peek'
                                   1319 ;------------------------------------------------------------
                                   1320 ;d                         Allocated to stack - _bp -6
                                   1321 ;_ctx                      Allocated to registers 
                                   1322 ;__1310720011              Allocated to registers 
                                   1323 ;s                         Allocated to registers r5 r6 r7 
                                   1324 ;__1310720013              Allocated to registers r4 r5 r6 r7 
                                   1325 ;d                         Allocated to stack - _bp +1
                                   1326 ;mask                      Allocated to stack - _bp +5
                                   1327 ;__1310720015              Allocated to registers 
                                   1328 ;s                         Allocated to registers r5 r6 r7 
                                   1329 ;------------------------------------------------------------
                                   1330 ;	calc.c:123: static int dump_peek(void *_ctx, long d) __reentrant {
                                   1331 ;	-----------------------------------------
                                   1332 ;	 function dump_peek
                                   1333 ;	-----------------------------------------
      0004F0                       1334 _dump_peek:
      0004F0 C0*00            [24] 1335 	push	_bp
      0004F2 E5 81            [12] 1336 	mov	a,sp
      0004F4 F5*00            [12] 1337 	mov	_bp,a
      0004F6 24 08            [12] 1338 	add	a,#0x08
      0004F8 F5 81            [12] 1339 	mov	sp,a
                                   1340 ;	calc.c:126: printstr("PA ");
      0004FA 7Dr2C            [12] 1341 	mov	r5,#___str_5
      0004FC 7Es00            [12] 1342 	mov	r6,#(___str_5 >> 8)
      0004FE 7F 80            [12] 1343 	mov	r7,#0x80
                                   1344 ;	calc.c:50: return;
      000500                       1345 00108$:
                                   1346 ;	calc.c:48: for (; *s; s++) putchar(*s);
      000500 8D 82            [24] 1347 	mov	dpl,r5
      000502 8E 83            [24] 1348 	mov	dph,r6
      000504 8F F0            [24] 1349 	mov	b,r7
      000506 12r00r00         [24] 1350 	lcall	__gptrget
      000509 FC               [12] 1351 	mov	r4,a
      00050A 60 10            [24] 1352 	jz	00102$
      00050C 7B 00            [12] 1353 	mov	r3,#0x00
      00050E 8C 82            [24] 1354 	mov	dpl,r4
      000510 8B 83            [24] 1355 	mov	dph,r3
      000512 12r00r00         [24] 1356 	lcall	_putchar
      000515 0D               [12] 1357 	inc	r5
                                   1358 ;	calc.c:126: printstr("PA ");
      000516 BD 00 E7         [24] 1359 	cjne	r5,#0x00,00108$
      000519 0E               [12] 1360 	inc	r6
      00051A 80 E4            [24] 1361 	sjmp	00108$
      00051C                       1362 00102$:
                                   1363 ;	calc.c:127: printf("% 11ld / ", d);
      00051C E5*00            [12] 1364 	mov	a,_bp
      00051E 24 FA            [12] 1365 	add	a,#0xfa
      000520 F8               [12] 1366 	mov	r0,a
      000521 E6               [12] 1367 	mov	a,@r0
      000522 C0 E0            [24] 1368 	push	acc
      000524 08               [12] 1369 	inc	r0
      000525 E6               [12] 1370 	mov	a,@r0
      000526 C0 E0            [24] 1371 	push	acc
      000528 08               [12] 1372 	inc	r0
      000529 E6               [12] 1373 	mov	a,@r0
      00052A C0 E0            [24] 1374 	push	acc
      00052C 08               [12] 1375 	inc	r0
      00052D E6               [12] 1376 	mov	a,@r0
      00052E C0 E0            [24] 1377 	push	acc
      000530 74r19            [12] 1378 	mov	a,#___str_3
      000532 C0 E0            [24] 1379 	push	acc
      000534 74s00            [12] 1380 	mov	a,#(___str_3 >> 8)
      000536 C0 E0            [24] 1381 	push	acc
      000538 74 80            [12] 1382 	mov	a,#0x80
      00053A C0 E0            [24] 1383 	push	acc
      00053C 12r00r00         [24] 1384 	lcall	_printf
      00053F E5 81            [12] 1385 	mov	a,sp
      000541 24 F9            [12] 1386 	add	a,#0xf9
      000543 F5 81            [12] 1387 	mov	sp,a
                                   1388 ;	calc.c:128: printf("%08lx / ", d);
      000545 E5*00            [12] 1389 	mov	a,_bp
      000547 24 FA            [12] 1390 	add	a,#0xfa
      000549 F8               [12] 1391 	mov	r0,a
      00054A E6               [12] 1392 	mov	a,@r0
      00054B C0 E0            [24] 1393 	push	acc
      00054D 08               [12] 1394 	inc	r0
      00054E E6               [12] 1395 	mov	a,@r0
      00054F C0 E0            [24] 1396 	push	acc
      000551 08               [12] 1397 	inc	r0
      000552 E6               [12] 1398 	mov	a,@r0
      000553 C0 E0            [24] 1399 	push	acc
      000555 08               [12] 1400 	inc	r0
      000556 E6               [12] 1401 	mov	a,@r0
      000557 C0 E0            [24] 1402 	push	acc
      000559 74r23            [12] 1403 	mov	a,#___str_4
      00055B C0 E0            [24] 1404 	push	acc
      00055D 74s00            [12] 1405 	mov	a,#(___str_4 >> 8)
      00055F C0 E0            [24] 1406 	push	acc
      000561 74 80            [12] 1407 	mov	a,#0x80
      000563 C0 E0            [24] 1408 	push	acc
      000565 12r00r00         [24] 1409 	lcall	_printf
      000568 E5 81            [12] 1410 	mov	a,sp
      00056A 24 F9            [12] 1411 	add	a,#0xf9
      00056C F5 81            [12] 1412 	mov	sp,a
                                   1413 ;	calc.c:129: printbin(d);
      00056E E5*00            [12] 1414 	mov	a,_bp
      000570 24 FA            [12] 1415 	add	a,#0xfa
      000572 F8               [12] 1416 	mov	r0,a
      000573 86 04            [24] 1417 	mov	ar4,@r0
      000575 08               [12] 1418 	inc	r0
      000576 86 05            [24] 1419 	mov	ar5,@r0
      000578 08               [12] 1420 	inc	r0
      000579 86 06            [24] 1421 	mov	ar6,@r0
      00057B 08               [12] 1422 	inc	r0
      00057C 86 07            [24] 1423 	mov	ar7,@r0
      00057E A8*00            [24] 1424 	mov	r0,_bp
      000580 08               [12] 1425 	inc	r0
      000581 A6 04            [24] 1426 	mov	@r0,ar4
      000583 08               [12] 1427 	inc	r0
      000584 A6 05            [24] 1428 	mov	@r0,ar5
      000586 08               [12] 1429 	inc	r0
      000587 A6 06            [24] 1430 	mov	@r0,ar6
      000589 08               [12] 1431 	inc	r0
      00058A A6 07            [24] 1432 	mov	@r0,ar7
                                   1433 ;	calc.c:56: for (mask = 0x80000000lu; mask; mask >>= 1)
      00058C E5*00            [12] 1434 	mov	a,_bp
      00058E 24 05            [12] 1435 	add	a,#0x05
      000590 F8               [12] 1436 	mov	r0,a
      000591 E4               [12] 1437 	clr	a
      000592 F6               [12] 1438 	mov	@r0,a
      000593 08               [12] 1439 	inc	r0
      000594 F6               [12] 1440 	mov	@r0,a
      000595 08               [12] 1441 	inc	r0
      000596 F6               [12] 1442 	mov	@r0,a
      000597 08               [12] 1443 	inc	r0
      000598 76 80            [12] 1444 	mov	@r0,#0x80
      00059A                       1445 00110$:
                                   1446 ;	calc.c:57: (void)putchar((d & mask) ? (int)'1' : (int)'0');
      00059A A8*00            [24] 1447 	mov	r0,_bp
      00059C 08               [12] 1448 	inc	r0
      00059D 86 04            [24] 1449 	mov	ar4,@r0
      00059F 08               [12] 1450 	inc	r0
      0005A0 86 05            [24] 1451 	mov	ar5,@r0
      0005A2 08               [12] 1452 	inc	r0
      0005A3 86 06            [24] 1453 	mov	ar6,@r0
      0005A5 08               [12] 1454 	inc	r0
      0005A6 86 07            [24] 1455 	mov	ar7,@r0
      0005A8 E5*00            [12] 1456 	mov	a,_bp
      0005AA 24 05            [12] 1457 	add	a,#0x05
      0005AC F8               [12] 1458 	mov	r0,a
      0005AD E6               [12] 1459 	mov	a,@r0
      0005AE 52 04            [12] 1460 	anl	ar4,a
      0005B0 08               [12] 1461 	inc	r0
      0005B1 E6               [12] 1462 	mov	a,@r0
      0005B2 52 05            [12] 1463 	anl	ar5,a
      0005B4 08               [12] 1464 	inc	r0
      0005B5 E6               [12] 1465 	mov	a,@r0
      0005B6 52 06            [12] 1466 	anl	ar6,a
      0005B8 08               [12] 1467 	inc	r0
      0005B9 E6               [12] 1468 	mov	a,@r0
      0005BA 52 07            [12] 1469 	anl	ar7,a
      0005BC EC               [12] 1470 	mov	a,r4
      0005BD 4D               [12] 1471 	orl	a,r5
      0005BE 4E               [12] 1472 	orl	a,r6
      0005BF 4F               [12] 1473 	orl	a,r7
      0005C0 60 06            [24] 1474 	jz	00117$
      0005C2 7E 31            [12] 1475 	mov	r6,#0x31
      0005C4 7F 00            [12] 1476 	mov	r7,#0x00
      0005C6 80 04            [24] 1477 	sjmp	00118$
      0005C8                       1478 00117$:
      0005C8 7E 30            [12] 1479 	mov	r6,#0x30
      0005CA 7F 00            [12] 1480 	mov	r7,#0x00
      0005CC                       1481 00118$:
      0005CC 8E 82            [24] 1482 	mov	dpl,r6
      0005CE 8F 83            [24] 1483 	mov	dph,r7
      0005D0 12r00r00         [24] 1484 	lcall	_putchar
                                   1485 ;	calc.c:56: for (mask = 0x80000000lu; mask; mask >>= 1)
      0005D3 E5*00            [12] 1486 	mov	a,_bp
      0005D5 24 05            [12] 1487 	add	a,#0x05
      0005D7 F8               [12] 1488 	mov	r0,a
      0005D8 08               [12] 1489 	inc	r0
      0005D9 08               [12] 1490 	inc	r0
      0005DA 08               [12] 1491 	inc	r0
      0005DB E6               [12] 1492 	mov	a,@r0
      0005DC C3               [12] 1493 	clr	c
      0005DD 13               [12] 1494 	rrc	a
      0005DE F6               [12] 1495 	mov	@r0,a
      0005DF 18               [12] 1496 	dec	r0
      0005E0 E6               [12] 1497 	mov	a,@r0
      0005E1 13               [12] 1498 	rrc	a
      0005E2 F6               [12] 1499 	mov	@r0,a
      0005E3 18               [12] 1500 	dec	r0
      0005E4 E6               [12] 1501 	mov	a,@r0
      0005E5 13               [12] 1502 	rrc	a
      0005E6 F6               [12] 1503 	mov	@r0,a
      0005E7 18               [12] 1504 	dec	r0
      0005E8 E6               [12] 1505 	mov	a,@r0
      0005E9 13               [12] 1506 	rrc	a
      0005EA F6               [12] 1507 	mov	@r0,a
      0005EB E5*00            [12] 1508 	mov	a,_bp
      0005ED 24 05            [12] 1509 	add	a,#0x05
      0005EF F8               [12] 1510 	mov	r0,a
      0005F0 E6               [12] 1511 	mov	a,@r0
      0005F1 08               [12] 1512 	inc	r0
      0005F2 46               [12] 1513 	orl	a,@r0
      0005F3 08               [12] 1514 	inc	r0
      0005F4 46               [12] 1515 	orl	a,@r0
      0005F5 08               [12] 1516 	inc	r0
      0005F6 46               [12] 1517 	orl	a,@r0
      0005F7 70 A1            [24] 1518 	jnz	00110$
                                   1519 ;	calc.c:130: printstr("\r\n");
      0005F9 7Dr00            [12] 1520 	mov	r5,#___str_0
      0005FB 7Es00            [12] 1521 	mov	r6,#(___str_0 >> 8)
      0005FD 7F 80            [12] 1522 	mov	r7,#0x80
                                   1523 ;	calc.c:50: return;
      0005FF                       1524 00113$:
                                   1525 ;	calc.c:48: for (; *s; s++) putchar(*s);
      0005FF 8D 82            [24] 1526 	mov	dpl,r5
      000601 8E 83            [24] 1527 	mov	dph,r6
      000603 8F F0            [24] 1528 	mov	b,r7
      000605 12r00r00         [24] 1529 	lcall	__gptrget
      000608 FC               [12] 1530 	mov	r4,a
      000609 60 10            [24] 1531 	jz	00106$
      00060B 7B 00            [12] 1532 	mov	r3,#0x00
      00060D 8C 82            [24] 1533 	mov	dpl,r4
      00060F 8B 83            [24] 1534 	mov	dph,r3
      000611 12r00r00         [24] 1535 	lcall	_putchar
      000614 0D               [12] 1536 	inc	r5
                                   1537 ;	calc.c:130: printstr("\r\n");
      000615 BD 00 E7         [24] 1538 	cjne	r5,#0x00,00113$
      000618 0E               [12] 1539 	inc	r6
      000619 80 E4            [24] 1540 	sjmp	00113$
      00061B                       1541 00106$:
                                   1542 ;	calc.c:132: return 1;
      00061B 90 00 01         [24] 1543 	mov	dptr,#0x0001
                                   1544 ;	calc.c:133: }
      00061E 85*00 81         [24] 1545 	mov	sp,_bp
      000621 D0*00            [24] 1546 	pop	_bp
      000623 22               [24] 1547 	ret
                                   1548 ;------------------------------------------------------------
                                   1549 ;Allocation info for local variables in function 'operator'
                                   1550 ;------------------------------------------------------------
                                   1551 ;delta                     Allocated to stack - _bp -5
                                   1552 ;_ctx                      Allocated to stack - _bp +1
                                   1553 ;ctx                       Allocated to stack - _bp +4
                                   1554 ;d0                        Allocated to stack - _bp +7
                                   1555 ;d1                        Allocated to stack - _bp +11
                                   1556 ;__1966080017              Allocated to registers 
                                   1557 ;s                         Allocated to registers r5 r6 r7 
                                   1558 ;__1966080019              Allocated to registers 
                                   1559 ;s                         Allocated to registers r5 r6 r7 
                                   1560 ;__2621440021              Allocated to registers 
                                   1561 ;s                         Allocated to registers r5 r6 r7 
                                   1562 ;__2621440023              Allocated to registers r4 r5 r6 r7 
                                   1563 ;d                         Allocated to stack - _bp +15
                                   1564 ;mask                      Allocated to stack - _bp +19
                                   1565 ;__2621440025              Allocated to registers 
                                   1566 ;s                         Allocated to registers r5 r6 r7 
                                   1567 ;__1966080027              Allocated to registers 
                                   1568 ;s                         Allocated to registers r5 r6 r7 
                                   1569 ;__1966080029              Allocated to registers 
                                   1570 ;s                         Allocated to registers r5 r6 r7 
                                   1571 ;__1966080031              Allocated to registers 
                                   1572 ;s                         Allocated to registers r5 r6 r7 
                                   1573 ;__1966080033              Allocated to registers 
                                   1574 ;s                         Allocated to registers r5 r6 r7 
                                   1575 ;__2621440035              Allocated to registers 
                                   1576 ;s                         Allocated to registers r5 r6 r7 
                                   1577 ;__2621440037              Allocated to registers r4 r5 r6 r7 
                                   1578 ;d                         Allocated to stack - _bp +15
                                   1579 ;mask                      Allocated to stack - _bp +19
                                   1580 ;__2621440039              Allocated to registers 
                                   1581 ;s                         Allocated to registers r5 r6 r7 
                                   1582 ;__1966080041              Allocated to registers 
                                   1583 ;s                         Allocated to registers r5 r6 r7 
                                   1584 ;__1966080043              Allocated to registers 
                                   1585 ;s                         Allocated to registers r5 r6 r7 
                                   1586 ;__2621440045              Allocated to registers 
                                   1587 ;s                         Allocated to registers r5 r6 r7 
                                   1588 ;__1966080047              Allocated to registers 
                                   1589 ;s                         Allocated to registers r5 r6 r7 
                                   1590 ;__2621440049              Allocated to registers 
                                   1591 ;s                         Allocated to registers r5 r6 r7 
                                   1592 ;__1966080051              Allocated to registers 
                                   1593 ;s                         Allocated to registers r5 r6 r7 
                                   1594 ;__2621440053              Allocated to registers 
                                   1595 ;s                         Allocated to registers r5 r6 r7 
                                   1596 ;__1966080055              Allocated to registers 
                                   1597 ;s                         Allocated to registers r5 r6 r7 
                                   1598 ;__2621440057              Allocated to registers 
                                   1599 ;s                         Allocated to registers r5 r6 r7 
                                   1600 ;__1966080059              Allocated to registers 
                                   1601 ;s                         Allocated to registers r5 r6 r7 
                                   1602 ;__2621440061              Allocated to registers 
                                   1603 ;s                         Allocated to registers r5 r6 r7 
                                   1604 ;__2621440063              Allocated to registers 
                                   1605 ;s                         Allocated to registers r5 r6 r7 
                                   1606 ;__1966080065              Allocated to registers 
                                   1607 ;s                         Allocated to registers r5 r6 r7 
                                   1608 ;__2621440067              Allocated to registers 
                                   1609 ;s                         Allocated to registers r5 r6 r7 
                                   1610 ;__2621440069              Allocated to registers 
                                   1611 ;s                         Allocated to registers r5 r6 r7 
                                   1612 ;__1966080071              Allocated to registers 
                                   1613 ;s                         Allocated to registers r5 r6 r7 
                                   1614 ;__2621440073              Allocated to registers 
                                   1615 ;s                         Allocated to registers r5 r6 r7 
                                   1616 ;__1966080075              Allocated to registers 
                                   1617 ;s                         Allocated to registers r5 r6 r7 
                                   1618 ;__2621440077              Allocated to registers 
                                   1619 ;s                         Allocated to registers r5 r6 r7 
                                   1620 ;__1966080079              Allocated to registers 
                                   1621 ;s                         Allocated to registers r5 r6 r7 
                                   1622 ;__2621440081              Allocated to registers 
                                   1623 ;s                         Allocated to registers r5 r6 r7 
                                   1624 ;__1966080083              Allocated to registers 
                                   1625 ;s                         Allocated to registers r5 r6 r7 
                                   1626 ;------------------------------------------------------------
                                   1627 ;	calc.c:135: static int operator(void *_ctx, delta_t *delta) __reentrant {
                                   1628 ;	-----------------------------------------
                                   1629 ;	 function operator
                                   1630 ;	-----------------------------------------
      000624                       1631 _operator:
      000624 C0*00            [24] 1632 	push	_bp
      000626 85 81*00         [24] 1633 	mov	_bp,sp
      000629 C0 82            [24] 1634 	push	dpl
      00062B C0 83            [24] 1635 	push	dph
      00062D C0 F0            [24] 1636 	push	b
      00062F E5 81            [12] 1637 	mov	a,sp
      000631 24 13            [12] 1638 	add	a,#0x13
      000633 F5 81            [12] 1639 	mov	sp,a
                                   1640 ;	calc.c:136: struct ctx *ctx = (struct ctx *)_ctx;
      000635 A8*00            [24] 1641 	mov	r0,_bp
      000637 08               [12] 1642 	inc	r0
      000638 E5*00            [12] 1643 	mov	a,_bp
      00063A 24 04            [12] 1644 	add	a,#0x04
      00063C F9               [12] 1645 	mov	r1,a
      00063D E6               [12] 1646 	mov	a,@r0
      00063E F7               [12] 1647 	mov	@r1,a
      00063F 08               [12] 1648 	inc	r0
      000640 09               [12] 1649 	inc	r1
      000641 E6               [12] 1650 	mov	a,@r0
      000642 F7               [12] 1651 	mov	@r1,a
      000643 08               [12] 1652 	inc	r0
      000644 09               [12] 1653 	inc	r1
      000645 E6               [12] 1654 	mov	a,@r0
      000646 F7               [12] 1655 	mov	@r1,a
                                   1656 ;	calc.c:139: switch (ctx->digit[0]) {
      000647 E5*00            [12] 1657 	mov	a,_bp
      000649 24 04            [12] 1658 	add	a,#0x04
      00064B F8               [12] 1659 	mov	r0,a
      00064C 74 07            [12] 1660 	mov	a,#0x07
      00064E 26               [12] 1661 	add	a,@r0
      00064F FD               [12] 1662 	mov	r5,a
      000650 E4               [12] 1663 	clr	a
      000651 08               [12] 1664 	inc	r0
      000652 36               [12] 1665 	addc	a,@r0
      000653 FE               [12] 1666 	mov	r6,a
      000654 08               [12] 1667 	inc	r0
      000655 86 07            [24] 1668 	mov	ar7,@r0
      000657 8D 82            [24] 1669 	mov	dpl,r5
      000659 8E 83            [24] 1670 	mov	dph,r6
      00065B 8F F0            [24] 1671 	mov	b,r7
      00065D 12r00r00         [24] 1672 	lcall	__gptrget
      000660 FF               [12] 1673 	mov	r7,a
      000661 BF 25 03         [24] 1674 	cjne	r7,#0x25,00831$
      000664 02r12r05         [24] 1675 	ljmp	00152$
      000667                       1676 00831$:
      000667 BF 26 03         [24] 1677 	cjne	r7,#0x26,00832$
      00066A 02r14r03         [24] 1678 	ljmp	00162$
      00066D                       1679 00832$:
      00066D BF 2A 03         [24] 1680 	cjne	r7,#0x2a,00833$
      000670 02r0ErA5         [24] 1681 	ljmp	00135$
      000673                       1682 00833$:
      000673 BF 2B 03         [24] 1683 	cjne	r7,#0x2b,00834$
      000676 02r0Cr2E         [24] 1684 	ljmp	00121$
      000679                       1685 00834$:
      000679 BF 2D 03         [24] 1686 	cjne	r7,#0x2d,00835$
      00067C 02r0Dr69         [24] 1687 	ljmp	00128$
      00067F                       1688 00835$:
      00067F BF 2E 03         [24] 1689 	cjne	r7,#0x2e,00836$
      000682 02r08rEE         [24] 1690 	ljmp	00109$
      000685                       1691 00836$:
      000685 BF 2F 03         [24] 1692 	cjne	r7,#0x2f,00837$
      000688 02r10r07         [24] 1693 	ljmp	00142$
      00068B                       1694 00837$:
      00068B BF 50 03         [24] 1695 	cjne	r7,#0x50,00838$
      00068E 02r08r62         [24] 1696 	ljmp	00105$
      000691                       1697 00838$:
      000691 BF 56 03         [24] 1698 	cjne	r7,#0x56,00839$
      000694 02r0Ar93         [24] 1699 	ljmp	00113$
      000697                       1700 00839$:
      000697 BF 5E 03         [24] 1701 	cjne	r7,#0x5e,00840$
      00069A 02r16r79         [24] 1702 	ljmp	00176$
      00069D                       1703 00840$:
      00069D BF 70 02         [24] 1704 	cjne	r7,#0x70,00841$
      0006A0 80 1B            [24] 1705 	sjmp	00101$
      0006A2                       1706 00841$:
      0006A2 BF 76 03         [24] 1707 	cjne	r7,#0x76,00842$
      0006A5 02r08rEE         [24] 1708 	ljmp	00109$
      0006A8                       1709 00842$:
      0006A8 BF 78 03         [24] 1710 	cjne	r7,#0x78,00843$
      0006AB 02r0ArDC         [24] 1711 	ljmp	00114$
      0006AE                       1712 00843$:
      0006AE BF 7C 03         [24] 1713 	cjne	r7,#0x7c,00844$
      0006B1 02r15r3E         [24] 1714 	ljmp	00169$
      0006B4                       1715 00844$:
      0006B4 BF 7E 03         [24] 1716 	cjne	r7,#0x7e,00845$
      0006B7 02r17rB4         [24] 1717 	ljmp	00183$
      0006BA                       1718 00845$:
      0006BA 02r18r55         [24] 1719 	ljmp	00187$
                                   1720 ;	calc.c:140: case 'p':
      0006BD                       1721 00101$:
                                   1722 ;	calc.c:141: printstr("\r\n");
      0006BD 7Dr00            [12] 1723 	mov	r5,#___str_0
      0006BF 7Es00            [12] 1724 	mov	r6,#(___str_0 >> 8)
      0006C1 7F 80            [12] 1725 	mov	r7,#0x80
                                   1726 ;	calc.c:50: return;
      0006C3                       1727 00258$:
                                   1728 ;	calc.c:48: for (; *s; s++) putchar(*s);
      0006C3 8D 82            [24] 1729 	mov	dpl,r5
      0006C5 8E 83            [24] 1730 	mov	dph,r6
      0006C7 8F F0            [24] 1731 	mov	b,r7
      0006C9 12r00r00         [24] 1732 	lcall	__gptrget
      0006CC FC               [12] 1733 	mov	r4,a
      0006CD 60 10            [24] 1734 	jz	00190$
      0006CF 7B 00            [12] 1735 	mov	r3,#0x00
      0006D1 8C 82            [24] 1736 	mov	dpl,r4
      0006D3 8B 83            [24] 1737 	mov	dph,r3
      0006D5 12r00r00         [24] 1738 	lcall	_putchar
      0006D8 0D               [12] 1739 	inc	r5
                                   1740 ;	calc.c:141: printstr("\r\n");
      0006D9 BD 00 E7         [24] 1741 	cjne	r5,#0x00,00258$
      0006DC 0E               [12] 1742 	inc	r6
      0006DD 80 E4            [24] 1743 	sjmp	00258$
      0006DF                       1744 00190$:
                                   1745 ;	calc.c:142: if (!stack_peek(&ctx->s, &d0)) printstr("stack underflow\r\n");
      0006DF E5*00            [12] 1746 	mov	a,_bp
      0006E1 24 07            [12] 1747 	add	a,#0x07
      0006E3 FF               [12] 1748 	mov	r7,a
      0006E4 7E 00            [12] 1749 	mov	r6,#0x00
      0006E6 7D 40            [12] 1750 	mov	r5,#0x40
      0006E8 E5*00            [12] 1751 	mov	a,_bp
      0006EA 24 04            [12] 1752 	add	a,#0x04
      0006EC F8               [12] 1753 	mov	r0,a
      0006ED 74 09            [12] 1754 	mov	a,#0x09
      0006EF 26               [12] 1755 	add	a,@r0
      0006F0 FA               [12] 1756 	mov	r2,a
      0006F1 E4               [12] 1757 	clr	a
      0006F2 08               [12] 1758 	inc	r0
      0006F3 36               [12] 1759 	addc	a,@r0
      0006F4 FB               [12] 1760 	mov	r3,a
      0006F5 08               [12] 1761 	inc	r0
      0006F6 86 04            [24] 1762 	mov	ar4,@r0
      0006F8 C0 07            [24] 1763 	push	ar7
      0006FA C0 06            [24] 1764 	push	ar6
      0006FC C0 05            [24] 1765 	push	ar5
      0006FE 8A 82            [24] 1766 	mov	dpl,r2
      000700 8B 83            [24] 1767 	mov	dph,r3
      000702 8C F0            [24] 1768 	mov	b,r4
      000704 12r00r00         [24] 1769 	lcall	_stack_peek
      000707 AE 82            [24] 1770 	mov	r6,dpl
      000709 AF 83            [24] 1771 	mov	r7,dph
      00070B 15 81            [12] 1772 	dec	sp
      00070D 15 81            [12] 1773 	dec	sp
      00070F 15 81            [12] 1774 	dec	sp
      000711 EE               [12] 1775 	mov	a,r6
      000712 4F               [12] 1776 	orl	a,r7
      000713 70 25            [24] 1777 	jnz	00103$
      000715 7Dr03            [12] 1778 	mov	r5,#___str_1
      000717 7Es00            [12] 1779 	mov	r6,#(___str_1 >> 8)
      000719 7F 80            [12] 1780 	mov	r7,#0x80
                                   1781 ;	calc.c:50: return;
      00071B                       1782 00261$:
                                   1783 ;	calc.c:48: for (; *s; s++) putchar(*s);
      00071B 8D 82            [24] 1784 	mov	dpl,r5
      00071D 8E 83            [24] 1785 	mov	dph,r6
      00071F 8F F0            [24] 1786 	mov	b,r7
      000721 12r00r00         [24] 1787 	lcall	__gptrget
      000724 FC               [12] 1788 	mov	r4,a
      000725 70 03            [24] 1789 	jnz	00849$
      000727 02r18r5A         [24] 1790 	ljmp	00188$
      00072A                       1791 00849$:
      00072A 7B 00            [12] 1792 	mov	r3,#0x00
      00072C 8C 82            [24] 1793 	mov	dpl,r4
      00072E 8B 83            [24] 1794 	mov	dph,r3
      000730 12r00r00         [24] 1795 	lcall	_putchar
      000733 0D               [12] 1796 	inc	r5
                                   1797 ;	calc.c:142: if (!stack_peek(&ctx->s, &d0)) printstr("stack underflow\r\n");
      000734 BD 00 E4         [24] 1798 	cjne	r5,#0x00,00261$
      000737 0E               [12] 1799 	inc	r6
      000738 80 E1            [24] 1800 	sjmp	00261$
      00073A                       1801 00103$:
                                   1802 ;	calc.c:144: printstr("PT ");
      00073A 7Dr30            [12] 1803 	mov	r5,#___str_6
      00073C 7Es00            [12] 1804 	mov	r6,#(___str_6 >> 8)
      00073E 7F 80            [12] 1805 	mov	r7,#0x80
                                   1806 ;	calc.c:50: return;
      000740                       1807 00264$:
                                   1808 ;	calc.c:48: for (; *s; s++) putchar(*s);
      000740 8D 82            [24] 1809 	mov	dpl,r5
      000742 8E 83            [24] 1810 	mov	dph,r6
      000744 8F F0            [24] 1811 	mov	b,r7
      000746 12r00r00         [24] 1812 	lcall	__gptrget
      000749 FC               [12] 1813 	mov	r4,a
      00074A 60 10            [24] 1814 	jz	00194$
      00074C 7B 00            [12] 1815 	mov	r3,#0x00
      00074E 8C 82            [24] 1816 	mov	dpl,r4
      000750 8B 83            [24] 1817 	mov	dph,r3
      000752 12r00r00         [24] 1818 	lcall	_putchar
      000755 0D               [12] 1819 	inc	r5
                                   1820 ;	calc.c:144: printstr("PT ");
      000756 BD 00 E7         [24] 1821 	cjne	r5,#0x00,00264$
      000759 0E               [12] 1822 	inc	r6
      00075A 80 E4            [24] 1823 	sjmp	00264$
      00075C                       1824 00194$:
                                   1825 ;	calc.c:145: printf("% 11ld / ", d0);
      00075C E5*00            [12] 1826 	mov	a,_bp
      00075E 24 07            [12] 1827 	add	a,#0x07
      000760 F8               [12] 1828 	mov	r0,a
      000761 E6               [12] 1829 	mov	a,@r0
      000762 C0 E0            [24] 1830 	push	acc
      000764 08               [12] 1831 	inc	r0
      000765 E6               [12] 1832 	mov	a,@r0
      000766 C0 E0            [24] 1833 	push	acc
      000768 08               [12] 1834 	inc	r0
      000769 E6               [12] 1835 	mov	a,@r0
      00076A C0 E0            [24] 1836 	push	acc
      00076C 08               [12] 1837 	inc	r0
      00076D E6               [12] 1838 	mov	a,@r0
      00076E C0 E0            [24] 1839 	push	acc
      000770 74r19            [12] 1840 	mov	a,#___str_3
      000772 C0 E0            [24] 1841 	push	acc
      000774 74s00            [12] 1842 	mov	a,#(___str_3 >> 8)
      000776 C0 E0            [24] 1843 	push	acc
      000778 74 80            [12] 1844 	mov	a,#0x80
      00077A C0 E0            [24] 1845 	push	acc
      00077C 12r00r00         [24] 1846 	lcall	_printf
      00077F E5 81            [12] 1847 	mov	a,sp
      000781 24 F9            [12] 1848 	add	a,#0xf9
      000783 F5 81            [12] 1849 	mov	sp,a
                                   1850 ;	calc.c:146: printf("%08lx / ", d0);
      000785 E5*00            [12] 1851 	mov	a,_bp
      000787 24 07            [12] 1852 	add	a,#0x07
      000789 F8               [12] 1853 	mov	r0,a
      00078A E6               [12] 1854 	mov	a,@r0
      00078B C0 E0            [24] 1855 	push	acc
      00078D 08               [12] 1856 	inc	r0
      00078E E6               [12] 1857 	mov	a,@r0
      00078F C0 E0            [24] 1858 	push	acc
      000791 08               [12] 1859 	inc	r0
      000792 E6               [12] 1860 	mov	a,@r0
      000793 C0 E0            [24] 1861 	push	acc
      000795 08               [12] 1862 	inc	r0
      000796 E6               [12] 1863 	mov	a,@r0
      000797 C0 E0            [24] 1864 	push	acc
      000799 74r23            [12] 1865 	mov	a,#___str_4
      00079B C0 E0            [24] 1866 	push	acc
      00079D 74s00            [12] 1867 	mov	a,#(___str_4 >> 8)
      00079F C0 E0            [24] 1868 	push	acc
      0007A1 74 80            [12] 1869 	mov	a,#0x80
      0007A3 C0 E0            [24] 1870 	push	acc
      0007A5 12r00r00         [24] 1871 	lcall	_printf
      0007A8 E5 81            [12] 1872 	mov	a,sp
      0007AA 24 F9            [12] 1873 	add	a,#0xf9
      0007AC F5 81            [12] 1874 	mov	sp,a
                                   1875 ;	calc.c:147: printbin(d0);
      0007AE E5*00            [12] 1876 	mov	a,_bp
      0007B0 24 07            [12] 1877 	add	a,#0x07
      0007B2 F8               [12] 1878 	mov	r0,a
      0007B3 86 04            [24] 1879 	mov	ar4,@r0
      0007B5 08               [12] 1880 	inc	r0
      0007B6 86 05            [24] 1881 	mov	ar5,@r0
      0007B8 08               [12] 1882 	inc	r0
      0007B9 86 06            [24] 1883 	mov	ar6,@r0
      0007BB 08               [12] 1884 	inc	r0
      0007BC 86 07            [24] 1885 	mov	ar7,@r0
      0007BE E5*00            [12] 1886 	mov	a,_bp
      0007C0 24 0F            [12] 1887 	add	a,#0x0f
      0007C2 F8               [12] 1888 	mov	r0,a
      0007C3 A6 04            [24] 1889 	mov	@r0,ar4
      0007C5 08               [12] 1890 	inc	r0
      0007C6 A6 05            [24] 1891 	mov	@r0,ar5
      0007C8 08               [12] 1892 	inc	r0
      0007C9 A6 06            [24] 1893 	mov	@r0,ar6
      0007CB 08               [12] 1894 	inc	r0
      0007CC A6 07            [24] 1895 	mov	@r0,ar7
                                   1896 ;	calc.c:56: for (mask = 0x80000000lu; mask; mask >>= 1)
      0007CE E5*00            [12] 1897 	mov	a,_bp
      0007D0 24 13            [12] 1898 	add	a,#0x13
      0007D2 F8               [12] 1899 	mov	r0,a
      0007D3 E4               [12] 1900 	clr	a
      0007D4 F6               [12] 1901 	mov	@r0,a
      0007D5 08               [12] 1902 	inc	r0
      0007D6 F6               [12] 1903 	mov	@r0,a
      0007D7 08               [12] 1904 	inc	r0
      0007D8 F6               [12] 1905 	mov	@r0,a
      0007D9 08               [12] 1906 	inc	r0
      0007DA 76 80            [12] 1907 	mov	@r0,#0x80
      0007DC                       1908 00266$:
                                   1909 ;	calc.c:57: (void)putchar((d & mask) ? (int)'1' : (int)'0');
      0007DC E5*00            [12] 1910 	mov	a,_bp
      0007DE 24 0F            [12] 1911 	add	a,#0x0f
      0007E0 F8               [12] 1912 	mov	r0,a
      0007E1 86 04            [24] 1913 	mov	ar4,@r0
      0007E3 08               [12] 1914 	inc	r0
      0007E4 86 05            [24] 1915 	mov	ar5,@r0
      0007E6 08               [12] 1916 	inc	r0
      0007E7 86 06            [24] 1917 	mov	ar6,@r0
      0007E9 08               [12] 1918 	inc	r0
      0007EA 86 07            [24] 1919 	mov	ar7,@r0
      0007EC E5*00            [12] 1920 	mov	a,_bp
      0007EE 24 13            [12] 1921 	add	a,#0x13
      0007F0 F8               [12] 1922 	mov	r0,a
      0007F1 E6               [12] 1923 	mov	a,@r0
      0007F2 52 04            [12] 1924 	anl	ar4,a
      0007F4 08               [12] 1925 	inc	r0
      0007F5 E6               [12] 1926 	mov	a,@r0
      0007F6 52 05            [12] 1927 	anl	ar5,a
      0007F8 08               [12] 1928 	inc	r0
      0007F9 E6               [12] 1929 	mov	a,@r0
      0007FA 52 06            [12] 1930 	anl	ar6,a
      0007FC 08               [12] 1931 	inc	r0
      0007FD E6               [12] 1932 	mov	a,@r0
      0007FE 52 07            [12] 1933 	anl	ar7,a
      000800 EC               [12] 1934 	mov	a,r4
      000801 4D               [12] 1935 	orl	a,r5
      000802 4E               [12] 1936 	orl	a,r6
      000803 4F               [12] 1937 	orl	a,r7
      000804 60 06            [24] 1938 	jz	00359$
      000806 7E 31            [12] 1939 	mov	r6,#0x31
      000808 7F 00            [12] 1940 	mov	r7,#0x00
      00080A 80 04            [24] 1941 	sjmp	00360$
      00080C                       1942 00359$:
      00080C 7E 30            [12] 1943 	mov	r6,#0x30
      00080E 7F 00            [12] 1944 	mov	r7,#0x00
      000810                       1945 00360$:
      000810 8E 82            [24] 1946 	mov	dpl,r6
      000812 8F 83            [24] 1947 	mov	dph,r7
      000814 12r00r00         [24] 1948 	lcall	_putchar
                                   1949 ;	calc.c:56: for (mask = 0x80000000lu; mask; mask >>= 1)
      000817 E5*00            [12] 1950 	mov	a,_bp
      000819 24 13            [12] 1951 	add	a,#0x13
      00081B F8               [12] 1952 	mov	r0,a
      00081C 08               [12] 1953 	inc	r0
      00081D 08               [12] 1954 	inc	r0
      00081E 08               [12] 1955 	inc	r0
      00081F E6               [12] 1956 	mov	a,@r0
      000820 C3               [12] 1957 	clr	c
      000821 13               [12] 1958 	rrc	a
      000822 F6               [12] 1959 	mov	@r0,a
      000823 18               [12] 1960 	dec	r0
      000824 E6               [12] 1961 	mov	a,@r0
      000825 13               [12] 1962 	rrc	a
      000826 F6               [12] 1963 	mov	@r0,a
      000827 18               [12] 1964 	dec	r0
      000828 E6               [12] 1965 	mov	a,@r0
      000829 13               [12] 1966 	rrc	a
      00082A F6               [12] 1967 	mov	@r0,a
      00082B 18               [12] 1968 	dec	r0
      00082C E6               [12] 1969 	mov	a,@r0
      00082D 13               [12] 1970 	rrc	a
      00082E F6               [12] 1971 	mov	@r0,a
      00082F E5*00            [12] 1972 	mov	a,_bp
      000831 24 13            [12] 1973 	add	a,#0x13
      000833 F8               [12] 1974 	mov	r0,a
      000834 E6               [12] 1975 	mov	a,@r0
      000835 08               [12] 1976 	inc	r0
      000836 46               [12] 1977 	orl	a,@r0
      000837 08               [12] 1978 	inc	r0
      000838 46               [12] 1979 	orl	a,@r0
      000839 08               [12] 1980 	inc	r0
      00083A 46               [12] 1981 	orl	a,@r0
      00083B 70 9F            [24] 1982 	jnz	00266$
                                   1983 ;	calc.c:148: printstr("\r\n");
      00083D 7Dr00            [12] 1984 	mov	r5,#___str_0
      00083F 7Es00            [12] 1985 	mov	r6,#(___str_0 >> 8)
      000841 7F 80            [12] 1986 	mov	r7,#0x80
                                   1987 ;	calc.c:50: return;
      000843                       1988 00269$:
                                   1989 ;	calc.c:48: for (; *s; s++) putchar(*s);
      000843 8D 82            [24] 1990 	mov	dpl,r5
      000845 8E 83            [24] 1991 	mov	dph,r6
      000847 8F F0            [24] 1992 	mov	b,r7
      000849 12r00r00         [24] 1993 	lcall	__gptrget
      00084C FC               [12] 1994 	mov	r4,a
      00084D 70 03            [24] 1995 	jnz	00855$
      00084F 02r18r5A         [24] 1996 	ljmp	00188$
      000852                       1997 00855$:
      000852 7B 00            [12] 1998 	mov	r3,#0x00
      000854 8C 82            [24] 1999 	mov	dpl,r4
      000856 8B 83            [24] 2000 	mov	dph,r3
      000858 12r00r00         [24] 2001 	lcall	_putchar
      00085B 0D               [12] 2002 	inc	r5
                                   2003 ;	calc.c:151: case 'P':
      00085C BD 00 E4         [24] 2004 	cjne	r5,#0x00,00269$
      00085F 0E               [12] 2005 	inc	r6
      000860 80 E1            [24] 2006 	sjmp	00269$
      000862                       2007 00105$:
                                   2008 ;	calc.c:152: printstr("\r\n");
      000862 7Dr00            [12] 2009 	mov	r5,#___str_0
      000864 7Es00            [12] 2010 	mov	r6,#(___str_0 >> 8)
      000866 7F 80            [12] 2011 	mov	r7,#0x80
                                   2012 ;	calc.c:50: return;
      000868                       2013 00272$:
                                   2014 ;	calc.c:48: for (; *s; s++) putchar(*s);
      000868 8D 82            [24] 2015 	mov	dpl,r5
      00086A 8E 83            [24] 2016 	mov	dph,r6
      00086C 8F F0            [24] 2017 	mov	b,r7
      00086E 12r00r00         [24] 2018 	lcall	__gptrget
      000871 FC               [12] 2019 	mov	r4,a
      000872 60 10            [24] 2020 	jz	00200$
      000874 7B 00            [12] 2021 	mov	r3,#0x00
      000876 8C 82            [24] 2022 	mov	dpl,r4
      000878 8B 83            [24] 2023 	mov	dph,r3
      00087A 12r00r00         [24] 2024 	lcall	_putchar
      00087D 0D               [12] 2025 	inc	r5
                                   2026 ;	calc.c:152: printstr("\r\n");
      00087E BD 00 E7         [24] 2027 	cjne	r5,#0x00,00272$
      000881 0E               [12] 2028 	inc	r6
      000882 80 E4            [24] 2029 	sjmp	00272$
      000884                       2030 00200$:
                                   2031 ;	calc.c:153: if (!stack_iter_peek(&ctx->s, dump_peek, ctx)) printstr("stack underflow\r\n");
      000884 E5*00            [12] 2032 	mov	a,_bp
      000886 24 04            [12] 2033 	add	a,#0x04
      000888 F8               [12] 2034 	mov	r0,a
      000889 86 02            [24] 2035 	mov	ar2,@r0
      00088B 08               [12] 2036 	inc	r0
      00088C 86 03            [24] 2037 	mov	ar3,@r0
      00088E 08               [12] 2038 	inc	r0
      00088F 86 04            [24] 2039 	mov	ar4,@r0
      000891 E5*00            [12] 2040 	mov	a,_bp
      000893 24 04            [12] 2041 	add	a,#0x04
      000895 F8               [12] 2042 	mov	r0,a
      000896 74 09            [12] 2043 	mov	a,#0x09
      000898 26               [12] 2044 	add	a,@r0
      000899 FD               [12] 2045 	mov	r5,a
      00089A E4               [12] 2046 	clr	a
      00089B 08               [12] 2047 	inc	r0
      00089C 36               [12] 2048 	addc	a,@r0
      00089D FE               [12] 2049 	mov	r6,a
      00089E 08               [12] 2050 	inc	r0
      00089F 86 07            [24] 2051 	mov	ar7,@r0
      0008A1 C0 02            [24] 2052 	push	ar2
      0008A3 C0 03            [24] 2053 	push	ar3
      0008A5 C0 04            [24] 2054 	push	ar4
      0008A7 74rF0            [12] 2055 	mov	a,#_dump_peek
      0008A9 C0 E0            [24] 2056 	push	acc
      0008AB 74s04            [12] 2057 	mov	a,#(_dump_peek >> 8)
      0008AD C0 E0            [24] 2058 	push	acc
      0008AF 8D 82            [24] 2059 	mov	dpl,r5
      0008B1 8E 83            [24] 2060 	mov	dph,r6
      0008B3 8F F0            [24] 2061 	mov	b,r7
      0008B5 12r00r00         [24] 2062 	lcall	_stack_iter_peek
      0008B8 AE 82            [24] 2063 	mov	r6,dpl
      0008BA AF 83            [24] 2064 	mov	r7,dph
      0008BC E5 81            [12] 2065 	mov	a,sp
      0008BE 24 FB            [12] 2066 	add	a,#0xfb
      0008C0 F5 81            [12] 2067 	mov	sp,a
      0008C2 EE               [12] 2068 	mov	a,r6
      0008C3 4F               [12] 2069 	orl	a,r7
      0008C4 60 03            [24] 2070 	jz	00859$
      0008C6 02r18r5A         [24] 2071 	ljmp	00188$
      0008C9                       2072 00859$:
      0008C9 7Dr03            [12] 2073 	mov	r5,#___str_1
      0008CB 7Es00            [12] 2074 	mov	r6,#(___str_1 >> 8)
      0008CD 7F 80            [12] 2075 	mov	r7,#0x80
                                   2076 ;	calc.c:50: return;
      0008CF                       2077 00275$:
                                   2078 ;	calc.c:48: for (; *s; s++) putchar(*s);
      0008CF 8D 82            [24] 2079 	mov	dpl,r5
      0008D1 8E 83            [24] 2080 	mov	dph,r6
      0008D3 8F F0            [24] 2081 	mov	b,r7
      0008D5 12r00r00         [24] 2082 	lcall	__gptrget
      0008D8 FC               [12] 2083 	mov	r4,a
      0008D9 70 03            [24] 2084 	jnz	00860$
      0008DB 02r18r5A         [24] 2085 	ljmp	00188$
      0008DE                       2086 00860$:
      0008DE 7B 00            [12] 2087 	mov	r3,#0x00
      0008E0 8C 82            [24] 2088 	mov	dpl,r4
      0008E2 8B 83            [24] 2089 	mov	dph,r3
      0008E4 12r00r00         [24] 2090 	lcall	_putchar
      0008E7 0D               [12] 2091 	inc	r5
                                   2092 ;	calc.c:156: case 'v':
      0008E8 BD 00 E4         [24] 2093 	cjne	r5,#0x00,00275$
      0008EB 0E               [12] 2094 	inc	r6
      0008EC 80 E1            [24] 2095 	sjmp	00275$
      0008EE                       2096 00109$:
                                   2097 ;	calc.c:157: printstr("\r\n");
      0008EE 7Dr00            [12] 2098 	mov	r5,#___str_0
      0008F0 7Es00            [12] 2099 	mov	r6,#(___str_0 >> 8)
      0008F2 7F 80            [12] 2100 	mov	r7,#0x80
                                   2101 ;	calc.c:50: return;
      0008F4                       2102 00278$:
                                   2103 ;	calc.c:48: for (; *s; s++) putchar(*s);
      0008F4 8D 82            [24] 2104 	mov	dpl,r5
      0008F6 8E 83            [24] 2105 	mov	dph,r6
      0008F8 8F F0            [24] 2106 	mov	b,r7
      0008FA 12r00r00         [24] 2107 	lcall	__gptrget
      0008FD FC               [12] 2108 	mov	r4,a
      0008FE 60 10            [24] 2109 	jz	00204$
      000900 7B 00            [12] 2110 	mov	r3,#0x00
      000902 8C 82            [24] 2111 	mov	dpl,r4
      000904 8B 83            [24] 2112 	mov	dph,r3
      000906 12r00r00         [24] 2113 	lcall	_putchar
      000909 0D               [12] 2114 	inc	r5
                                   2115 ;	calc.c:157: printstr("\r\n");
      00090A BD 00 E7         [24] 2116 	cjne	r5,#0x00,00278$
      00090D 0E               [12] 2117 	inc	r6
      00090E 80 E4            [24] 2118 	sjmp	00278$
      000910                       2119 00204$:
                                   2120 ;	calc.c:158: if (!stack_pop(&ctx->s, &d0)) printstr("stack underflow\r\n");
      000910 E5*00            [12] 2121 	mov	a,_bp
      000912 24 07            [12] 2122 	add	a,#0x07
      000914 FF               [12] 2123 	mov	r7,a
      000915 7E 00            [12] 2124 	mov	r6,#0x00
      000917 7D 40            [12] 2125 	mov	r5,#0x40
      000919 E5*00            [12] 2126 	mov	a,_bp
      00091B 24 04            [12] 2127 	add	a,#0x04
      00091D F8               [12] 2128 	mov	r0,a
      00091E 74 09            [12] 2129 	mov	a,#0x09
      000920 26               [12] 2130 	add	a,@r0
      000921 FA               [12] 2131 	mov	r2,a
      000922 E4               [12] 2132 	clr	a
      000923 08               [12] 2133 	inc	r0
      000924 36               [12] 2134 	addc	a,@r0
      000925 FB               [12] 2135 	mov	r3,a
      000926 08               [12] 2136 	inc	r0
      000927 86 04            [24] 2137 	mov	ar4,@r0
      000929 C0 07            [24] 2138 	push	ar7
      00092B C0 06            [24] 2139 	push	ar6
      00092D C0 05            [24] 2140 	push	ar5
      00092F 8A 82            [24] 2141 	mov	dpl,r2
      000931 8B 83            [24] 2142 	mov	dph,r3
      000933 8C F0            [24] 2143 	mov	b,r4
      000935 12r00r00         [24] 2144 	lcall	_stack_pop
      000938 AE 82            [24] 2145 	mov	r6,dpl
      00093A AF 83            [24] 2146 	mov	r7,dph
      00093C 15 81            [12] 2147 	dec	sp
      00093E 15 81            [12] 2148 	dec	sp
      000940 15 81            [12] 2149 	dec	sp
      000942 EE               [12] 2150 	mov	a,r6
      000943 4F               [12] 2151 	orl	a,r7
      000944 70 25            [24] 2152 	jnz	00111$
      000946 7Dr03            [12] 2153 	mov	r5,#___str_1
      000948 7Es00            [12] 2154 	mov	r6,#(___str_1 >> 8)
      00094A 7F 80            [12] 2155 	mov	r7,#0x80
                                   2156 ;	calc.c:50: return;
      00094C                       2157 00281$:
                                   2158 ;	calc.c:48: for (; *s; s++) putchar(*s);
      00094C 8D 82            [24] 2159 	mov	dpl,r5
      00094E 8E 83            [24] 2160 	mov	dph,r6
      000950 8F F0            [24] 2161 	mov	b,r7
      000952 12r00r00         [24] 2162 	lcall	__gptrget
      000955 FC               [12] 2163 	mov	r4,a
      000956 70 03            [24] 2164 	jnz	00865$
      000958 02r18r5A         [24] 2165 	ljmp	00188$
      00095B                       2166 00865$:
      00095B 7B 00            [12] 2167 	mov	r3,#0x00
      00095D 8C 82            [24] 2168 	mov	dpl,r4
      00095F 8B 83            [24] 2169 	mov	dph,r3
      000961 12r00r00         [24] 2170 	lcall	_putchar
      000964 0D               [12] 2171 	inc	r5
                                   2172 ;	calc.c:158: if (!stack_pop(&ctx->s, &d0)) printstr("stack underflow\r\n");
      000965 BD 00 E4         [24] 2173 	cjne	r5,#0x00,00281$
      000968 0E               [12] 2174 	inc	r6
      000969 80 E1            [24] 2175 	sjmp	00281$
      00096B                       2176 00111$:
                                   2177 ;	calc.c:160: printstr("VT ");
      00096B 7Dr34            [12] 2178 	mov	r5,#___str_7
      00096D 7Es00            [12] 2179 	mov	r6,#(___str_7 >> 8)
      00096F 7F 80            [12] 2180 	mov	r7,#0x80
                                   2181 ;	calc.c:50: return;
      000971                       2182 00284$:
                                   2183 ;	calc.c:48: for (; *s; s++) putchar(*s);
      000971 8D 82            [24] 2184 	mov	dpl,r5
      000973 8E 83            [24] 2185 	mov	dph,r6
      000975 8F F0            [24] 2186 	mov	b,r7
      000977 12r00r00         [24] 2187 	lcall	__gptrget
      00097A FC               [12] 2188 	mov	r4,a
      00097B 60 10            [24] 2189 	jz	00208$
      00097D 7B 00            [12] 2190 	mov	r3,#0x00
      00097F 8C 82            [24] 2191 	mov	dpl,r4
      000981 8B 83            [24] 2192 	mov	dph,r3
      000983 12r00r00         [24] 2193 	lcall	_putchar
      000986 0D               [12] 2194 	inc	r5
                                   2195 ;	calc.c:160: printstr("VT ");
      000987 BD 00 E7         [24] 2196 	cjne	r5,#0x00,00284$
      00098A 0E               [12] 2197 	inc	r6
      00098B 80 E4            [24] 2198 	sjmp	00284$
      00098D                       2199 00208$:
                                   2200 ;	calc.c:161: printf("% 11ld / ", d0);
      00098D E5*00            [12] 2201 	mov	a,_bp
      00098F 24 07            [12] 2202 	add	a,#0x07
      000991 F8               [12] 2203 	mov	r0,a
      000992 E6               [12] 2204 	mov	a,@r0
      000993 C0 E0            [24] 2205 	push	acc
      000995 08               [12] 2206 	inc	r0
      000996 E6               [12] 2207 	mov	a,@r0
      000997 C0 E0            [24] 2208 	push	acc
      000999 08               [12] 2209 	inc	r0
      00099A E6               [12] 2210 	mov	a,@r0
      00099B C0 E0            [24] 2211 	push	acc
      00099D 08               [12] 2212 	inc	r0
      00099E E6               [12] 2213 	mov	a,@r0
      00099F C0 E0            [24] 2214 	push	acc
      0009A1 74r19            [12] 2215 	mov	a,#___str_3
      0009A3 C0 E0            [24] 2216 	push	acc
      0009A5 74s00            [12] 2217 	mov	a,#(___str_3 >> 8)
      0009A7 C0 E0            [24] 2218 	push	acc
      0009A9 74 80            [12] 2219 	mov	a,#0x80
      0009AB C0 E0            [24] 2220 	push	acc
      0009AD 12r00r00         [24] 2221 	lcall	_printf
      0009B0 E5 81            [12] 2222 	mov	a,sp
      0009B2 24 F9            [12] 2223 	add	a,#0xf9
      0009B4 F5 81            [12] 2224 	mov	sp,a
                                   2225 ;	calc.c:162: printf("%08lx / ", d0);
      0009B6 E5*00            [12] 2226 	mov	a,_bp
      0009B8 24 07            [12] 2227 	add	a,#0x07
      0009BA F8               [12] 2228 	mov	r0,a
      0009BB E6               [12] 2229 	mov	a,@r0
      0009BC C0 E0            [24] 2230 	push	acc
      0009BE 08               [12] 2231 	inc	r0
      0009BF E6               [12] 2232 	mov	a,@r0
      0009C0 C0 E0            [24] 2233 	push	acc
      0009C2 08               [12] 2234 	inc	r0
      0009C3 E6               [12] 2235 	mov	a,@r0
      0009C4 C0 E0            [24] 2236 	push	acc
      0009C6 08               [12] 2237 	inc	r0
      0009C7 E6               [12] 2238 	mov	a,@r0
      0009C8 C0 E0            [24] 2239 	push	acc
      0009CA 74r23            [12] 2240 	mov	a,#___str_4
      0009CC C0 E0            [24] 2241 	push	acc
      0009CE 74s00            [12] 2242 	mov	a,#(___str_4 >> 8)
      0009D0 C0 E0            [24] 2243 	push	acc
      0009D2 74 80            [12] 2244 	mov	a,#0x80
      0009D4 C0 E0            [24] 2245 	push	acc
      0009D6 12r00r00         [24] 2246 	lcall	_printf
      0009D9 E5 81            [12] 2247 	mov	a,sp
      0009DB 24 F9            [12] 2248 	add	a,#0xf9
      0009DD F5 81            [12] 2249 	mov	sp,a
                                   2250 ;	calc.c:163: printbin(d0);
      0009DF E5*00            [12] 2251 	mov	a,_bp
      0009E1 24 07            [12] 2252 	add	a,#0x07
      0009E3 F8               [12] 2253 	mov	r0,a
      0009E4 86 04            [24] 2254 	mov	ar4,@r0
      0009E6 08               [12] 2255 	inc	r0
      0009E7 86 05            [24] 2256 	mov	ar5,@r0
      0009E9 08               [12] 2257 	inc	r0
      0009EA 86 06            [24] 2258 	mov	ar6,@r0
      0009EC 08               [12] 2259 	inc	r0
      0009ED 86 07            [24] 2260 	mov	ar7,@r0
      0009EF E5*00            [12] 2261 	mov	a,_bp
      0009F1 24 0F            [12] 2262 	add	a,#0x0f
      0009F3 F8               [12] 2263 	mov	r0,a
      0009F4 A6 04            [24] 2264 	mov	@r0,ar4
      0009F6 08               [12] 2265 	inc	r0
      0009F7 A6 05            [24] 2266 	mov	@r0,ar5
      0009F9 08               [12] 2267 	inc	r0
      0009FA A6 06            [24] 2268 	mov	@r0,ar6
      0009FC 08               [12] 2269 	inc	r0
      0009FD A6 07            [24] 2270 	mov	@r0,ar7
                                   2271 ;	calc.c:56: for (mask = 0x80000000lu; mask; mask >>= 1)
      0009FF E5*00            [12] 2272 	mov	a,_bp
      000A01 24 13            [12] 2273 	add	a,#0x13
      000A03 F8               [12] 2274 	mov	r0,a
      000A04 E4               [12] 2275 	clr	a
      000A05 F6               [12] 2276 	mov	@r0,a
      000A06 08               [12] 2277 	inc	r0
      000A07 F6               [12] 2278 	mov	@r0,a
      000A08 08               [12] 2279 	inc	r0
      000A09 F6               [12] 2280 	mov	@r0,a
      000A0A 08               [12] 2281 	inc	r0
      000A0B 76 80            [12] 2282 	mov	@r0,#0x80
      000A0D                       2283 00286$:
                                   2284 ;	calc.c:57: (void)putchar((d & mask) ? (int)'1' : (int)'0');
      000A0D E5*00            [12] 2285 	mov	a,_bp
      000A0F 24 0F            [12] 2286 	add	a,#0x0f
      000A11 F8               [12] 2287 	mov	r0,a
      000A12 86 04            [24] 2288 	mov	ar4,@r0
      000A14 08               [12] 2289 	inc	r0
      000A15 86 05            [24] 2290 	mov	ar5,@r0
      000A17 08               [12] 2291 	inc	r0
      000A18 86 06            [24] 2292 	mov	ar6,@r0
      000A1A 08               [12] 2293 	inc	r0
      000A1B 86 07            [24] 2294 	mov	ar7,@r0
      000A1D E5*00            [12] 2295 	mov	a,_bp
      000A1F 24 13            [12] 2296 	add	a,#0x13
      000A21 F8               [12] 2297 	mov	r0,a
      000A22 E6               [12] 2298 	mov	a,@r0
      000A23 52 04            [12] 2299 	anl	ar4,a
      000A25 08               [12] 2300 	inc	r0
      000A26 E6               [12] 2301 	mov	a,@r0
      000A27 52 05            [12] 2302 	anl	ar5,a
      000A29 08               [12] 2303 	inc	r0
      000A2A E6               [12] 2304 	mov	a,@r0
      000A2B 52 06            [12] 2305 	anl	ar6,a
      000A2D 08               [12] 2306 	inc	r0
      000A2E E6               [12] 2307 	mov	a,@r0
      000A2F 52 07            [12] 2308 	anl	ar7,a
      000A31 EC               [12] 2309 	mov	a,r4
      000A32 4D               [12] 2310 	orl	a,r5
      000A33 4E               [12] 2311 	orl	a,r6
      000A34 4F               [12] 2312 	orl	a,r7
      000A35 60 06            [24] 2313 	jz	00361$
      000A37 7E 31            [12] 2314 	mov	r6,#0x31
      000A39 7F 00            [12] 2315 	mov	r7,#0x00
      000A3B 80 04            [24] 2316 	sjmp	00362$
      000A3D                       2317 00361$:
      000A3D 7E 30            [12] 2318 	mov	r6,#0x30
      000A3F 7F 00            [12] 2319 	mov	r7,#0x00
      000A41                       2320 00362$:
      000A41 8E 82            [24] 2321 	mov	dpl,r6
      000A43 8F 83            [24] 2322 	mov	dph,r7
      000A45 12r00r00         [24] 2323 	lcall	_putchar
                                   2324 ;	calc.c:56: for (mask = 0x80000000lu; mask; mask >>= 1)
      000A48 E5*00            [12] 2325 	mov	a,_bp
      000A4A 24 13            [12] 2326 	add	a,#0x13
      000A4C F8               [12] 2327 	mov	r0,a
      000A4D 08               [12] 2328 	inc	r0
      000A4E 08               [12] 2329 	inc	r0
      000A4F 08               [12] 2330 	inc	r0
      000A50 E6               [12] 2331 	mov	a,@r0
      000A51 C3               [12] 2332 	clr	c
      000A52 13               [12] 2333 	rrc	a
      000A53 F6               [12] 2334 	mov	@r0,a
      000A54 18               [12] 2335 	dec	r0
      000A55 E6               [12] 2336 	mov	a,@r0
      000A56 13               [12] 2337 	rrc	a
      000A57 F6               [12] 2338 	mov	@r0,a
      000A58 18               [12] 2339 	dec	r0
      000A59 E6               [12] 2340 	mov	a,@r0
      000A5A 13               [12] 2341 	rrc	a
      000A5B F6               [12] 2342 	mov	@r0,a
      000A5C 18               [12] 2343 	dec	r0
      000A5D E6               [12] 2344 	mov	a,@r0
      000A5E 13               [12] 2345 	rrc	a
      000A5F F6               [12] 2346 	mov	@r0,a
      000A60 E5*00            [12] 2347 	mov	a,_bp
      000A62 24 13            [12] 2348 	add	a,#0x13
      000A64 F8               [12] 2349 	mov	r0,a
      000A65 E6               [12] 2350 	mov	a,@r0
      000A66 08               [12] 2351 	inc	r0
      000A67 46               [12] 2352 	orl	a,@r0
      000A68 08               [12] 2353 	inc	r0
      000A69 46               [12] 2354 	orl	a,@r0
      000A6A 08               [12] 2355 	inc	r0
      000A6B 46               [12] 2356 	orl	a,@r0
      000A6C 70 9F            [24] 2357 	jnz	00286$
                                   2358 ;	calc.c:164: printstr("\r\n");
      000A6E 7Dr00            [12] 2359 	mov	r5,#___str_0
      000A70 7Es00            [12] 2360 	mov	r6,#(___str_0 >> 8)
      000A72 7F 80            [12] 2361 	mov	r7,#0x80
                                   2362 ;	calc.c:50: return;
      000A74                       2363 00289$:
                                   2364 ;	calc.c:48: for (; *s; s++) putchar(*s);
      000A74 8D 82            [24] 2365 	mov	dpl,r5
      000A76 8E 83            [24] 2366 	mov	dph,r6
      000A78 8F F0            [24] 2367 	mov	b,r7
      000A7A 12r00r00         [24] 2368 	lcall	__gptrget
      000A7D FC               [12] 2369 	mov	r4,a
      000A7E 70 03            [24] 2370 	jnz	00871$
      000A80 02r18r5A         [24] 2371 	ljmp	00188$
      000A83                       2372 00871$:
      000A83 7B 00            [12] 2373 	mov	r3,#0x00
      000A85 8C 82            [24] 2374 	mov	dpl,r4
      000A87 8B 83            [24] 2375 	mov	dph,r3
      000A89 12r00r00         [24] 2376 	lcall	_putchar
      000A8C 0D               [12] 2377 	inc	r5
                                   2378 ;	calc.c:167: case 'V':
      000A8D BD 00 E4         [24] 2379 	cjne	r5,#0x00,00289$
      000A90 0E               [12] 2380 	inc	r6
      000A91 80 E1            [24] 2381 	sjmp	00289$
      000A93                       2382 00113$:
                                   2383 ;	calc.c:168: printstr("\r\n");
      000A93 7Dr00            [12] 2384 	mov	r5,#___str_0
      000A95 7Es00            [12] 2385 	mov	r6,#(___str_0 >> 8)
      000A97 7F 80            [12] 2386 	mov	r7,#0x80
                                   2387 ;	calc.c:50: return;
      000A99                       2388 00292$:
                                   2389 ;	calc.c:48: for (; *s; s++) putchar(*s);
      000A99 8D 82            [24] 2390 	mov	dpl,r5
      000A9B 8E 83            [24] 2391 	mov	dph,r6
      000A9D 8F F0            [24] 2392 	mov	b,r7
      000A9F 12r00r00         [24] 2393 	lcall	__gptrget
      000AA2 FC               [12] 2394 	mov	r4,a
      000AA3 60 10            [24] 2395 	jz	00214$
      000AA5 7B 00            [12] 2396 	mov	r3,#0x00
      000AA7 8C 82            [24] 2397 	mov	dpl,r4
      000AA9 8B 83            [24] 2398 	mov	dph,r3
      000AAB 12r00r00         [24] 2399 	lcall	_putchar
      000AAE 0D               [12] 2400 	inc	r5
                                   2401 ;	calc.c:168: printstr("\r\n");
      000AAF BD 00 E7         [24] 2402 	cjne	r5,#0x00,00292$
      000AB2 0E               [12] 2403 	inc	r6
      000AB3 80 E4            [24] 2404 	sjmp	00292$
      000AB5                       2405 00214$:
                                   2406 ;	calc.c:169: (void)dump_pop(_ctx, delta);
      000AB5 E5*00            [12] 2407 	mov	a,_bp
      000AB7 24 FB            [12] 2408 	add	a,#0xfb
      000AB9 F8               [12] 2409 	mov	r0,a
      000ABA E6               [12] 2410 	mov	a,@r0
      000ABB C0 E0            [24] 2411 	push	acc
      000ABD 08               [12] 2412 	inc	r0
      000ABE E6               [12] 2413 	mov	a,@r0
      000ABF C0 E0            [24] 2414 	push	acc
      000AC1 08               [12] 2415 	inc	r0
      000AC2 E6               [12] 2416 	mov	a,@r0
      000AC3 C0 E0            [24] 2417 	push	acc
      000AC5 A8*00            [24] 2418 	mov	r0,_bp
      000AC7 08               [12] 2419 	inc	r0
      000AC8 86 82            [24] 2420 	mov	dpl,@r0
      000ACA 08               [12] 2421 	inc	r0
      000ACB 86 83            [24] 2422 	mov	dph,@r0
      000ACD 08               [12] 2423 	inc	r0
      000ACE 86 F0            [24] 2424 	mov	b,@r0
      000AD0 12r02r3C         [24] 2425 	lcall	_dump_pop
      000AD3 15 81            [12] 2426 	dec	sp
      000AD5 15 81            [12] 2427 	dec	sp
      000AD7 15 81            [12] 2428 	dec	sp
                                   2429 ;	calc.c:170: break;
      000AD9 02r18r5A         [24] 2430 	ljmp	00188$
                                   2431 ;	calc.c:171: case 'x':
      000ADC                       2432 00114$:
                                   2433 ;	calc.c:172: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      000ADC E5*00            [12] 2434 	mov	a,_bp
      000ADE 24 07            [12] 2435 	add	a,#0x07
      000AE0 FF               [12] 2436 	mov	r7,a
      000AE1 7E 00            [12] 2437 	mov	r6,#0x00
      000AE3 7D 40            [12] 2438 	mov	r5,#0x40
      000AE5 E5*00            [12] 2439 	mov	a,_bp
      000AE7 24 04            [12] 2440 	add	a,#0x04
      000AE9 F8               [12] 2441 	mov	r0,a
      000AEA 74 09            [12] 2442 	mov	a,#0x09
      000AEC 26               [12] 2443 	add	a,@r0
      000AED FA               [12] 2444 	mov	r2,a
      000AEE E4               [12] 2445 	clr	a
      000AEF 08               [12] 2446 	inc	r0
      000AF0 36               [12] 2447 	addc	a,@r0
      000AF1 FB               [12] 2448 	mov	r3,a
      000AF2 08               [12] 2449 	inc	r0
      000AF3 86 04            [24] 2450 	mov	ar4,@r0
      000AF5 C0 07            [24] 2451 	push	ar7
      000AF7 C0 06            [24] 2452 	push	ar6
      000AF9 C0 05            [24] 2453 	push	ar5
      000AFB 8A 82            [24] 2454 	mov	dpl,r2
      000AFD 8B 83            [24] 2455 	mov	dph,r3
      000AFF 8C F0            [24] 2456 	mov	b,r4
      000B01 12r00r00         [24] 2457 	lcall	_stack_pop
      000B04 AE 82            [24] 2458 	mov	r6,dpl
      000B06 AF 83            [24] 2459 	mov	r7,dph
      000B08 15 81            [12] 2460 	dec	sp
      000B0A 15 81            [12] 2461 	dec	sp
      000B0C 15 81            [12] 2462 	dec	sp
      000B0E EE               [12] 2463 	mov	a,r6
      000B0F 4F               [12] 2464 	orl	a,r7
      000B10 70 25            [24] 2465 	jnz	00119$
      000B12 7Dr38            [12] 2466 	mov	r5,#___str_8
      000B14 7Es00            [12] 2467 	mov	r6,#(___str_8 >> 8)
      000B16 7F 80            [12] 2468 	mov	r7,#0x80
                                   2469 ;	calc.c:50: return;
      000B18                       2470 00295$:
                                   2471 ;	calc.c:48: for (; *s; s++) putchar(*s);
      000B18 8D 82            [24] 2472 	mov	dpl,r5
      000B1A 8E 83            [24] 2473 	mov	dph,r6
      000B1C 8F F0            [24] 2474 	mov	b,r7
      000B1E 12r00r00         [24] 2475 	lcall	__gptrget
      000B21 FC               [12] 2476 	mov	r4,a
      000B22 70 03            [24] 2477 	jnz	00876$
      000B24 02r18r5A         [24] 2478 	ljmp	00188$
      000B27                       2479 00876$:
      000B27 7B 00            [12] 2480 	mov	r3,#0x00
      000B29 8C 82            [24] 2481 	mov	dpl,r4
      000B2B 8B 83            [24] 2482 	mov	dph,r3
      000B2D 12r00r00         [24] 2483 	lcall	_putchar
      000B30 0D               [12] 2484 	inc	r5
                                   2485 ;	calc.c:172: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      000B31 BD 00 E4         [24] 2486 	cjne	r5,#0x00,00295$
      000B34 0E               [12] 2487 	inc	r6
      000B35 80 E1            [24] 2488 	sjmp	00295$
      000B37                       2489 00119$:
                                   2490 ;	calc.c:173: else if (!stack_pop(&ctx->s, &d1)) {
      000B37 E5*00            [12] 2491 	mov	a,_bp
      000B39 24 0B            [12] 2492 	add	a,#0x0b
      000B3B FF               [12] 2493 	mov	r7,a
      000B3C 7E 00            [12] 2494 	mov	r6,#0x00
      000B3E 7D 40            [12] 2495 	mov	r5,#0x40
      000B40 E5*00            [12] 2496 	mov	a,_bp
      000B42 24 04            [12] 2497 	add	a,#0x04
      000B44 F8               [12] 2498 	mov	r0,a
      000B45 74 09            [12] 2499 	mov	a,#0x09
      000B47 26               [12] 2500 	add	a,@r0
      000B48 FA               [12] 2501 	mov	r2,a
      000B49 E4               [12] 2502 	clr	a
      000B4A 08               [12] 2503 	inc	r0
      000B4B 36               [12] 2504 	addc	a,@r0
      000B4C FB               [12] 2505 	mov	r3,a
      000B4D 08               [12] 2506 	inc	r0
      000B4E 86 04            [24] 2507 	mov	ar4,@r0
      000B50 C0 07            [24] 2508 	push	ar7
      000B52 C0 06            [24] 2509 	push	ar6
      000B54 C0 05            [24] 2510 	push	ar5
      000B56 8A 82            [24] 2511 	mov	dpl,r2
      000B58 8B 83            [24] 2512 	mov	dph,r3
      000B5A 8C F0            [24] 2513 	mov	b,r4
      000B5C 12r00r00         [24] 2514 	lcall	_stack_pop
      000B5F AE 82            [24] 2515 	mov	r6,dpl
      000B61 AF 83            [24] 2516 	mov	r7,dph
      000B63 15 81            [12] 2517 	dec	sp
      000B65 15 81            [12] 2518 	dec	sp
      000B67 15 81            [12] 2519 	dec	sp
      000B69 EE               [12] 2520 	mov	a,r6
      000B6A 4F               [12] 2521 	orl	a,r7
      000B6B 70 58            [24] 2522 	jnz	00116$
                                   2523 ;	calc.c:174: (void)stack_push(&ctx->s, d0);
      000B6D E5*00            [12] 2524 	mov	a,_bp
      000B6F 24 04            [12] 2525 	add	a,#0x04
      000B71 F8               [12] 2526 	mov	r0,a
      000B72 74 09            [12] 2527 	mov	a,#0x09
      000B74 26               [12] 2528 	add	a,@r0
      000B75 FD               [12] 2529 	mov	r5,a
      000B76 E4               [12] 2530 	clr	a
      000B77 08               [12] 2531 	inc	r0
      000B78 36               [12] 2532 	addc	a,@r0
      000B79 FE               [12] 2533 	mov	r6,a
      000B7A 08               [12] 2534 	inc	r0
      000B7B 86 07            [24] 2535 	mov	ar7,@r0
      000B7D E5*00            [12] 2536 	mov	a,_bp
      000B7F 24 07            [12] 2537 	add	a,#0x07
      000B81 F8               [12] 2538 	mov	r0,a
      000B82 E6               [12] 2539 	mov	a,@r0
      000B83 C0 E0            [24] 2540 	push	acc
      000B85 08               [12] 2541 	inc	r0
      000B86 E6               [12] 2542 	mov	a,@r0
      000B87 C0 E0            [24] 2543 	push	acc
      000B89 08               [12] 2544 	inc	r0
      000B8A E6               [12] 2545 	mov	a,@r0
      000B8B C0 E0            [24] 2546 	push	acc
      000B8D 08               [12] 2547 	inc	r0
      000B8E E6               [12] 2548 	mov	a,@r0
      000B8F C0 E0            [24] 2549 	push	acc
      000B91 8D 82            [24] 2550 	mov	dpl,r5
      000B93 8E 83            [24] 2551 	mov	dph,r6
      000B95 8F F0            [24] 2552 	mov	b,r7
      000B97 12r00r00         [24] 2553 	lcall	_stack_push
      000B9A E5 81            [12] 2554 	mov	a,sp
      000B9C 24 FC            [12] 2555 	add	a,#0xfc
      000B9E F5 81            [12] 2556 	mov	sp,a
                                   2557 ;	calc.c:175: printstr("\r\nstack underflow\r\n");
      000BA0 7Dr38            [12] 2558 	mov	r5,#___str_8
      000BA2 7Es00            [12] 2559 	mov	r6,#(___str_8 >> 8)
      000BA4 7F 80            [12] 2560 	mov	r7,#0x80
                                   2561 ;	calc.c:50: return;
      000BA6                       2562 00298$:
                                   2563 ;	calc.c:48: for (; *s; s++) putchar(*s);
      000BA6 8D 82            [24] 2564 	mov	dpl,r5
      000BA8 8E 83            [24] 2565 	mov	dph,r6
      000BAA 8F F0            [24] 2566 	mov	b,r7
      000BAC 12r00r00         [24] 2567 	lcall	__gptrget
      000BAF FC               [12] 2568 	mov	r4,a
      000BB0 70 03            [24] 2569 	jnz	00879$
      000BB2 02r18r5A         [24] 2570 	ljmp	00188$
      000BB5                       2571 00879$:
      000BB5 7B 00            [12] 2572 	mov	r3,#0x00
      000BB7 8C 82            [24] 2573 	mov	dpl,r4
      000BB9 8B 83            [24] 2574 	mov	dph,r3
      000BBB 12r00r00         [24] 2575 	lcall	_putchar
      000BBE 0D               [12] 2576 	inc	r5
                                   2577 ;	calc.c:175: printstr("\r\nstack underflow\r\n");
      000BBF BD 00 E4         [24] 2578 	cjne	r5,#0x00,00298$
      000BC2 0E               [12] 2579 	inc	r6
      000BC3 80 E1            [24] 2580 	sjmp	00298$
      000BC5                       2581 00116$:
                                   2582 ;	calc.c:177: (void)stack_push(&ctx->s, d0);
      000BC5 E5*00            [12] 2583 	mov	a,_bp
      000BC7 24 04            [12] 2584 	add	a,#0x04
      000BC9 F8               [12] 2585 	mov	r0,a
      000BCA 74 09            [12] 2586 	mov	a,#0x09
      000BCC 26               [12] 2587 	add	a,@r0
      000BCD FD               [12] 2588 	mov	r5,a
      000BCE E4               [12] 2589 	clr	a
      000BCF 08               [12] 2590 	inc	r0
      000BD0 36               [12] 2591 	addc	a,@r0
      000BD1 FE               [12] 2592 	mov	r6,a
      000BD2 08               [12] 2593 	inc	r0
      000BD3 86 07            [24] 2594 	mov	ar7,@r0
      000BD5 E5*00            [12] 2595 	mov	a,_bp
      000BD7 24 07            [12] 2596 	add	a,#0x07
      000BD9 F8               [12] 2597 	mov	r0,a
      000BDA E6               [12] 2598 	mov	a,@r0
      000BDB C0 E0            [24] 2599 	push	acc
      000BDD 08               [12] 2600 	inc	r0
      000BDE E6               [12] 2601 	mov	a,@r0
      000BDF C0 E0            [24] 2602 	push	acc
      000BE1 08               [12] 2603 	inc	r0
      000BE2 E6               [12] 2604 	mov	a,@r0
      000BE3 C0 E0            [24] 2605 	push	acc
      000BE5 08               [12] 2606 	inc	r0
      000BE6 E6               [12] 2607 	mov	a,@r0
      000BE7 C0 E0            [24] 2608 	push	acc
      000BE9 8D 82            [24] 2609 	mov	dpl,r5
      000BEB 8E 83            [24] 2610 	mov	dph,r6
      000BED 8F F0            [24] 2611 	mov	b,r7
      000BEF 12r00r00         [24] 2612 	lcall	_stack_push
      000BF2 E5 81            [12] 2613 	mov	a,sp
      000BF4 24 FC            [12] 2614 	add	a,#0xfc
      000BF6 F5 81            [12] 2615 	mov	sp,a
                                   2616 ;	calc.c:178: (void)stack_push(&ctx->s, d1);
      000BF8 E5*00            [12] 2617 	mov	a,_bp
      000BFA 24 04            [12] 2618 	add	a,#0x04
      000BFC F8               [12] 2619 	mov	r0,a
      000BFD 74 09            [12] 2620 	mov	a,#0x09
      000BFF 26               [12] 2621 	add	a,@r0
      000C00 FD               [12] 2622 	mov	r5,a
      000C01 E4               [12] 2623 	clr	a
      000C02 08               [12] 2624 	inc	r0
      000C03 36               [12] 2625 	addc	a,@r0
      000C04 FE               [12] 2626 	mov	r6,a
      000C05 08               [12] 2627 	inc	r0
      000C06 86 07            [24] 2628 	mov	ar7,@r0
      000C08 E5*00            [12] 2629 	mov	a,_bp
      000C0A 24 0B            [12] 2630 	add	a,#0x0b
      000C0C F8               [12] 2631 	mov	r0,a
      000C0D E6               [12] 2632 	mov	a,@r0
      000C0E C0 E0            [24] 2633 	push	acc
      000C10 08               [12] 2634 	inc	r0
      000C11 E6               [12] 2635 	mov	a,@r0
      000C12 C0 E0            [24] 2636 	push	acc
      000C14 08               [12] 2637 	inc	r0
      000C15 E6               [12] 2638 	mov	a,@r0
      000C16 C0 E0            [24] 2639 	push	acc
      000C18 08               [12] 2640 	inc	r0
      000C19 E6               [12] 2641 	mov	a,@r0
      000C1A C0 E0            [24] 2642 	push	acc
      000C1C 8D 82            [24] 2643 	mov	dpl,r5
      000C1E 8E 83            [24] 2644 	mov	dph,r6
      000C20 8F F0            [24] 2645 	mov	b,r7
      000C22 12r00r00         [24] 2646 	lcall	_stack_push
      000C25 E5 81            [12] 2647 	mov	a,sp
      000C27 24 FC            [12] 2648 	add	a,#0xfc
      000C29 F5 81            [12] 2649 	mov	sp,a
                                   2650 ;	calc.c:180: break;
      000C2B 02r18r5A         [24] 2651 	ljmp	00188$
                                   2652 ;	calc.c:181: case '+':
      000C2E                       2653 00121$:
                                   2654 ;	calc.c:182: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      000C2E E5*00            [12] 2655 	mov	a,_bp
      000C30 24 07            [12] 2656 	add	a,#0x07
      000C32 FF               [12] 2657 	mov	r7,a
      000C33 7E 00            [12] 2658 	mov	r6,#0x00
      000C35 7D 40            [12] 2659 	mov	r5,#0x40
      000C37 E5*00            [12] 2660 	mov	a,_bp
      000C39 24 04            [12] 2661 	add	a,#0x04
      000C3B F8               [12] 2662 	mov	r0,a
      000C3C 74 09            [12] 2663 	mov	a,#0x09
      000C3E 26               [12] 2664 	add	a,@r0
      000C3F FA               [12] 2665 	mov	r2,a
      000C40 E4               [12] 2666 	clr	a
      000C41 08               [12] 2667 	inc	r0
      000C42 36               [12] 2668 	addc	a,@r0
      000C43 FB               [12] 2669 	mov	r3,a
      000C44 08               [12] 2670 	inc	r0
      000C45 86 04            [24] 2671 	mov	ar4,@r0
      000C47 C0 07            [24] 2672 	push	ar7
      000C49 C0 06            [24] 2673 	push	ar6
      000C4B C0 05            [24] 2674 	push	ar5
      000C4D 8A 82            [24] 2675 	mov	dpl,r2
      000C4F 8B 83            [24] 2676 	mov	dph,r3
      000C51 8C F0            [24] 2677 	mov	b,r4
      000C53 12r00r00         [24] 2678 	lcall	_stack_pop
      000C56 AE 82            [24] 2679 	mov	r6,dpl
      000C58 AF 83            [24] 2680 	mov	r7,dph
      000C5A 15 81            [12] 2681 	dec	sp
      000C5C 15 81            [12] 2682 	dec	sp
      000C5E 15 81            [12] 2683 	dec	sp
      000C60 EE               [12] 2684 	mov	a,r6
      000C61 4F               [12] 2685 	orl	a,r7
      000C62 70 25            [24] 2686 	jnz	00126$
      000C64 7Dr38            [12] 2687 	mov	r5,#___str_8
      000C66 7Es00            [12] 2688 	mov	r6,#(___str_8 >> 8)
      000C68 7F 80            [12] 2689 	mov	r7,#0x80
                                   2690 ;	calc.c:50: return;
      000C6A                       2691 00301$:
                                   2692 ;	calc.c:48: for (; *s; s++) putchar(*s);
      000C6A 8D 82            [24] 2693 	mov	dpl,r5
      000C6C 8E 83            [24] 2694 	mov	dph,r6
      000C6E 8F F0            [24] 2695 	mov	b,r7
      000C70 12r00r00         [24] 2696 	lcall	__gptrget
      000C73 FC               [12] 2697 	mov	r4,a
      000C74 70 03            [24] 2698 	jnz	00882$
      000C76 02r18r5A         [24] 2699 	ljmp	00188$
      000C79                       2700 00882$:
      000C79 7B 00            [12] 2701 	mov	r3,#0x00
      000C7B 8C 82            [24] 2702 	mov	dpl,r4
      000C7D 8B 83            [24] 2703 	mov	dph,r3
      000C7F 12r00r00         [24] 2704 	lcall	_putchar
      000C82 0D               [12] 2705 	inc	r5
                                   2706 ;	calc.c:182: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      000C83 BD 00 E4         [24] 2707 	cjne	r5,#0x00,00301$
      000C86 0E               [12] 2708 	inc	r6
      000C87 80 E1            [24] 2709 	sjmp	00301$
      000C89                       2710 00126$:
                                   2711 ;	calc.c:183: else if (!stack_pop(&ctx->s, &d1)) {
      000C89 E5*00            [12] 2712 	mov	a,_bp
      000C8B 24 0B            [12] 2713 	add	a,#0x0b
      000C8D FF               [12] 2714 	mov	r7,a
      000C8E 7E 00            [12] 2715 	mov	r6,#0x00
      000C90 7D 40            [12] 2716 	mov	r5,#0x40
      000C92 E5*00            [12] 2717 	mov	a,_bp
      000C94 24 04            [12] 2718 	add	a,#0x04
      000C96 F8               [12] 2719 	mov	r0,a
      000C97 74 09            [12] 2720 	mov	a,#0x09
      000C99 26               [12] 2721 	add	a,@r0
      000C9A FA               [12] 2722 	mov	r2,a
      000C9B E4               [12] 2723 	clr	a
      000C9C 08               [12] 2724 	inc	r0
      000C9D 36               [12] 2725 	addc	a,@r0
      000C9E FB               [12] 2726 	mov	r3,a
      000C9F 08               [12] 2727 	inc	r0
      000CA0 86 04            [24] 2728 	mov	ar4,@r0
      000CA2 C0 07            [24] 2729 	push	ar7
      000CA4 C0 06            [24] 2730 	push	ar6
      000CA6 C0 05            [24] 2731 	push	ar5
      000CA8 8A 82            [24] 2732 	mov	dpl,r2
      000CAA 8B 83            [24] 2733 	mov	dph,r3
      000CAC 8C F0            [24] 2734 	mov	b,r4
      000CAE 12r00r00         [24] 2735 	lcall	_stack_pop
      000CB1 AE 82            [24] 2736 	mov	r6,dpl
      000CB3 AF 83            [24] 2737 	mov	r7,dph
      000CB5 15 81            [12] 2738 	dec	sp
      000CB7 15 81            [12] 2739 	dec	sp
      000CB9 15 81            [12] 2740 	dec	sp
      000CBB EE               [12] 2741 	mov	a,r6
      000CBC 4F               [12] 2742 	orl	a,r7
      000CBD 70 58            [24] 2743 	jnz	00123$
                                   2744 ;	calc.c:184: (void)stack_push(&ctx->s, d0);
      000CBF E5*00            [12] 2745 	mov	a,_bp
      000CC1 24 04            [12] 2746 	add	a,#0x04
      000CC3 F8               [12] 2747 	mov	r0,a
      000CC4 74 09            [12] 2748 	mov	a,#0x09
      000CC6 26               [12] 2749 	add	a,@r0
      000CC7 FD               [12] 2750 	mov	r5,a
      000CC8 E4               [12] 2751 	clr	a
      000CC9 08               [12] 2752 	inc	r0
      000CCA 36               [12] 2753 	addc	a,@r0
      000CCB FE               [12] 2754 	mov	r6,a
      000CCC 08               [12] 2755 	inc	r0
      000CCD 86 07            [24] 2756 	mov	ar7,@r0
      000CCF E5*00            [12] 2757 	mov	a,_bp
      000CD1 24 07            [12] 2758 	add	a,#0x07
      000CD3 F8               [12] 2759 	mov	r0,a
      000CD4 E6               [12] 2760 	mov	a,@r0
      000CD5 C0 E0            [24] 2761 	push	acc
      000CD7 08               [12] 2762 	inc	r0
      000CD8 E6               [12] 2763 	mov	a,@r0
      000CD9 C0 E0            [24] 2764 	push	acc
      000CDB 08               [12] 2765 	inc	r0
      000CDC E6               [12] 2766 	mov	a,@r0
      000CDD C0 E0            [24] 2767 	push	acc
      000CDF 08               [12] 2768 	inc	r0
      000CE0 E6               [12] 2769 	mov	a,@r0
      000CE1 C0 E0            [24] 2770 	push	acc
      000CE3 8D 82            [24] 2771 	mov	dpl,r5
      000CE5 8E 83            [24] 2772 	mov	dph,r6
      000CE7 8F F0            [24] 2773 	mov	b,r7
      000CE9 12r00r00         [24] 2774 	lcall	_stack_push
      000CEC E5 81            [12] 2775 	mov	a,sp
      000CEE 24 FC            [12] 2776 	add	a,#0xfc
      000CF0 F5 81            [12] 2777 	mov	sp,a
                                   2778 ;	calc.c:185: printstr("\r\nstack underflow\r\n");
      000CF2 7Dr38            [12] 2779 	mov	r5,#___str_8
      000CF4 7Es00            [12] 2780 	mov	r6,#(___str_8 >> 8)
      000CF6 7F 80            [12] 2781 	mov	r7,#0x80
                                   2782 ;	calc.c:50: return;
      000CF8                       2783 00304$:
                                   2784 ;	calc.c:48: for (; *s; s++) putchar(*s);
      000CF8 8D 82            [24] 2785 	mov	dpl,r5
      000CFA 8E 83            [24] 2786 	mov	dph,r6
      000CFC 8F F0            [24] 2787 	mov	b,r7
      000CFE 12r00r00         [24] 2788 	lcall	__gptrget
      000D01 FC               [12] 2789 	mov	r4,a
      000D02 70 03            [24] 2790 	jnz	00885$
      000D04 02r18r5A         [24] 2791 	ljmp	00188$
      000D07                       2792 00885$:
      000D07 7B 00            [12] 2793 	mov	r3,#0x00
      000D09 8C 82            [24] 2794 	mov	dpl,r4
      000D0B 8B 83            [24] 2795 	mov	dph,r3
      000D0D 12r00r00         [24] 2796 	lcall	_putchar
      000D10 0D               [12] 2797 	inc	r5
                                   2798 ;	calc.c:185: printstr("\r\nstack underflow\r\n");
      000D11 BD 00 E4         [24] 2799 	cjne	r5,#0x00,00304$
      000D14 0E               [12] 2800 	inc	r6
      000D15 80 E1            [24] 2801 	sjmp	00304$
      000D17                       2802 00123$:
                                   2803 ;	calc.c:187: d1 += d0;
      000D17 E5*00            [12] 2804 	mov	a,_bp
      000D19 24 0B            [12] 2805 	add	a,#0x0b
      000D1B F8               [12] 2806 	mov	r0,a
      000D1C E5*00            [12] 2807 	mov	a,_bp
      000D1E 24 07            [12] 2808 	add	a,#0x07
      000D20 F9               [12] 2809 	mov	r1,a
      000D21 E7               [12] 2810 	mov	a,@r1
      000D22 26               [12] 2811 	add	a,@r0
      000D23 F6               [12] 2812 	mov	@r0,a
      000D24 09               [12] 2813 	inc	r1
      000D25 E7               [12] 2814 	mov	a,@r1
      000D26 08               [12] 2815 	inc	r0
      000D27 36               [12] 2816 	addc	a,@r0
      000D28 F6               [12] 2817 	mov	@r0,a
      000D29 09               [12] 2818 	inc	r1
      000D2A E7               [12] 2819 	mov	a,@r1
      000D2B 08               [12] 2820 	inc	r0
      000D2C 36               [12] 2821 	addc	a,@r0
      000D2D F6               [12] 2822 	mov	@r0,a
      000D2E 09               [12] 2823 	inc	r1
      000D2F E7               [12] 2824 	mov	a,@r1
      000D30 08               [12] 2825 	inc	r0
      000D31 36               [12] 2826 	addc	a,@r0
      000D32 F6               [12] 2827 	mov	@r0,a
                                   2828 ;	calc.c:188: (void)stack_push(&ctx->s, d1);
      000D33 E5*00            [12] 2829 	mov	a,_bp
      000D35 24 04            [12] 2830 	add	a,#0x04
      000D37 F8               [12] 2831 	mov	r0,a
      000D38 74 09            [12] 2832 	mov	a,#0x09
      000D3A 26               [12] 2833 	add	a,@r0
      000D3B FD               [12] 2834 	mov	r5,a
      000D3C E4               [12] 2835 	clr	a
      000D3D 08               [12] 2836 	inc	r0
      000D3E 36               [12] 2837 	addc	a,@r0
      000D3F FE               [12] 2838 	mov	r6,a
      000D40 08               [12] 2839 	inc	r0
      000D41 86 07            [24] 2840 	mov	ar7,@r0
      000D43 E5*00            [12] 2841 	mov	a,_bp
      000D45 24 0B            [12] 2842 	add	a,#0x0b
      000D47 F8               [12] 2843 	mov	r0,a
      000D48 E6               [12] 2844 	mov	a,@r0
      000D49 C0 E0            [24] 2845 	push	acc
      000D4B 08               [12] 2846 	inc	r0
      000D4C E6               [12] 2847 	mov	a,@r0
      000D4D C0 E0            [24] 2848 	push	acc
      000D4F 08               [12] 2849 	inc	r0
      000D50 E6               [12] 2850 	mov	a,@r0
      000D51 C0 E0            [24] 2851 	push	acc
      000D53 08               [12] 2852 	inc	r0
      000D54 E6               [12] 2853 	mov	a,@r0
      000D55 C0 E0            [24] 2854 	push	acc
      000D57 8D 82            [24] 2855 	mov	dpl,r5
      000D59 8E 83            [24] 2856 	mov	dph,r6
      000D5B 8F F0            [24] 2857 	mov	b,r7
      000D5D 12r00r00         [24] 2858 	lcall	_stack_push
      000D60 E5 81            [12] 2859 	mov	a,sp
      000D62 24 FC            [12] 2860 	add	a,#0xfc
      000D64 F5 81            [12] 2861 	mov	sp,a
                                   2862 ;	calc.c:190: break;
      000D66 02r18r5A         [24] 2863 	ljmp	00188$
                                   2864 ;	calc.c:191: case '-':
      000D69                       2865 00128$:
                                   2866 ;	calc.c:192: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      000D69 E5*00            [12] 2867 	mov	a,_bp
      000D6B 24 07            [12] 2868 	add	a,#0x07
      000D6D FF               [12] 2869 	mov	r7,a
      000D6E 7E 00            [12] 2870 	mov	r6,#0x00
      000D70 7D 40            [12] 2871 	mov	r5,#0x40
      000D72 E5*00            [12] 2872 	mov	a,_bp
      000D74 24 04            [12] 2873 	add	a,#0x04
      000D76 F8               [12] 2874 	mov	r0,a
      000D77 74 09            [12] 2875 	mov	a,#0x09
      000D79 26               [12] 2876 	add	a,@r0
      000D7A FA               [12] 2877 	mov	r2,a
      000D7B E4               [12] 2878 	clr	a
      000D7C 08               [12] 2879 	inc	r0
      000D7D 36               [12] 2880 	addc	a,@r0
      000D7E FB               [12] 2881 	mov	r3,a
      000D7F 08               [12] 2882 	inc	r0
      000D80 86 04            [24] 2883 	mov	ar4,@r0
      000D82 C0 07            [24] 2884 	push	ar7
      000D84 C0 06            [24] 2885 	push	ar6
      000D86 C0 05            [24] 2886 	push	ar5
      000D88 8A 82            [24] 2887 	mov	dpl,r2
      000D8A 8B 83            [24] 2888 	mov	dph,r3
      000D8C 8C F0            [24] 2889 	mov	b,r4
      000D8E 12r00r00         [24] 2890 	lcall	_stack_pop
      000D91 AE 82            [24] 2891 	mov	r6,dpl
      000D93 AF 83            [24] 2892 	mov	r7,dph
      000D95 15 81            [12] 2893 	dec	sp
      000D97 15 81            [12] 2894 	dec	sp
      000D99 15 81            [12] 2895 	dec	sp
      000D9B EE               [12] 2896 	mov	a,r6
      000D9C 4F               [12] 2897 	orl	a,r7
      000D9D 70 25            [24] 2898 	jnz	00133$
      000D9F 7Dr38            [12] 2899 	mov	r5,#___str_8
      000DA1 7Es00            [12] 2900 	mov	r6,#(___str_8 >> 8)
      000DA3 7F 80            [12] 2901 	mov	r7,#0x80
                                   2902 ;	calc.c:50: return;
      000DA5                       2903 00307$:
                                   2904 ;	calc.c:48: for (; *s; s++) putchar(*s);
      000DA5 8D 82            [24] 2905 	mov	dpl,r5
      000DA7 8E 83            [24] 2906 	mov	dph,r6
      000DA9 8F F0            [24] 2907 	mov	b,r7
      000DAB 12r00r00         [24] 2908 	lcall	__gptrget
      000DAE FC               [12] 2909 	mov	r4,a
      000DAF 70 03            [24] 2910 	jnz	00888$
      000DB1 02r18r5A         [24] 2911 	ljmp	00188$
      000DB4                       2912 00888$:
      000DB4 7B 00            [12] 2913 	mov	r3,#0x00
      000DB6 8C 82            [24] 2914 	mov	dpl,r4
      000DB8 8B 83            [24] 2915 	mov	dph,r3
      000DBA 12r00r00         [24] 2916 	lcall	_putchar
      000DBD 0D               [12] 2917 	inc	r5
                                   2918 ;	calc.c:192: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      000DBE BD 00 E4         [24] 2919 	cjne	r5,#0x00,00307$
      000DC1 0E               [12] 2920 	inc	r6
      000DC2 80 E1            [24] 2921 	sjmp	00307$
      000DC4                       2922 00133$:
                                   2923 ;	calc.c:193: else if (!stack_pop(&ctx->s, &d1)) {
      000DC4 E5*00            [12] 2924 	mov	a,_bp
      000DC6 24 0B            [12] 2925 	add	a,#0x0b
      000DC8 FF               [12] 2926 	mov	r7,a
      000DC9 7E 00            [12] 2927 	mov	r6,#0x00
      000DCB 7D 40            [12] 2928 	mov	r5,#0x40
      000DCD E5*00            [12] 2929 	mov	a,_bp
      000DCF 24 04            [12] 2930 	add	a,#0x04
      000DD1 F8               [12] 2931 	mov	r0,a
      000DD2 74 09            [12] 2932 	mov	a,#0x09
      000DD4 26               [12] 2933 	add	a,@r0
      000DD5 FA               [12] 2934 	mov	r2,a
      000DD6 E4               [12] 2935 	clr	a
      000DD7 08               [12] 2936 	inc	r0
      000DD8 36               [12] 2937 	addc	a,@r0
      000DD9 FB               [12] 2938 	mov	r3,a
      000DDA 08               [12] 2939 	inc	r0
      000DDB 86 04            [24] 2940 	mov	ar4,@r0
      000DDD C0 07            [24] 2941 	push	ar7
      000DDF C0 06            [24] 2942 	push	ar6
      000DE1 C0 05            [24] 2943 	push	ar5
      000DE3 8A 82            [24] 2944 	mov	dpl,r2
      000DE5 8B 83            [24] 2945 	mov	dph,r3
      000DE7 8C F0            [24] 2946 	mov	b,r4
      000DE9 12r00r00         [24] 2947 	lcall	_stack_pop
      000DEC AE 82            [24] 2948 	mov	r6,dpl
      000DEE AF 83            [24] 2949 	mov	r7,dph
      000DF0 15 81            [12] 2950 	dec	sp
      000DF2 15 81            [12] 2951 	dec	sp
      000DF4 15 81            [12] 2952 	dec	sp
      000DF6 EE               [12] 2953 	mov	a,r6
      000DF7 4F               [12] 2954 	orl	a,r7
      000DF8 70 58            [24] 2955 	jnz	00130$
                                   2956 ;	calc.c:194: (void)stack_push(&ctx->s, d0);
      000DFA E5*00            [12] 2957 	mov	a,_bp
      000DFC 24 04            [12] 2958 	add	a,#0x04
      000DFE F8               [12] 2959 	mov	r0,a
      000DFF 74 09            [12] 2960 	mov	a,#0x09
      000E01 26               [12] 2961 	add	a,@r0
      000E02 FD               [12] 2962 	mov	r5,a
      000E03 E4               [12] 2963 	clr	a
      000E04 08               [12] 2964 	inc	r0
      000E05 36               [12] 2965 	addc	a,@r0
      000E06 FE               [12] 2966 	mov	r6,a
      000E07 08               [12] 2967 	inc	r0
      000E08 86 07            [24] 2968 	mov	ar7,@r0
      000E0A E5*00            [12] 2969 	mov	a,_bp
      000E0C 24 07            [12] 2970 	add	a,#0x07
      000E0E F8               [12] 2971 	mov	r0,a
      000E0F E6               [12] 2972 	mov	a,@r0
      000E10 C0 E0            [24] 2973 	push	acc
      000E12 08               [12] 2974 	inc	r0
      000E13 E6               [12] 2975 	mov	a,@r0
      000E14 C0 E0            [24] 2976 	push	acc
      000E16 08               [12] 2977 	inc	r0
      000E17 E6               [12] 2978 	mov	a,@r0
      000E18 C0 E0            [24] 2979 	push	acc
      000E1A 08               [12] 2980 	inc	r0
      000E1B E6               [12] 2981 	mov	a,@r0
      000E1C C0 E0            [24] 2982 	push	acc
      000E1E 8D 82            [24] 2983 	mov	dpl,r5
      000E20 8E 83            [24] 2984 	mov	dph,r6
      000E22 8F F0            [24] 2985 	mov	b,r7
      000E24 12r00r00         [24] 2986 	lcall	_stack_push
      000E27 E5 81            [12] 2987 	mov	a,sp
      000E29 24 FC            [12] 2988 	add	a,#0xfc
      000E2B F5 81            [12] 2989 	mov	sp,a
                                   2990 ;	calc.c:195: printstr("\r\nstack underflow\r\n");
      000E2D 7Dr38            [12] 2991 	mov	r5,#___str_8
      000E2F 7Es00            [12] 2992 	mov	r6,#(___str_8 >> 8)
      000E31 7F 80            [12] 2993 	mov	r7,#0x80
                                   2994 ;	calc.c:50: return;
      000E33                       2995 00310$:
                                   2996 ;	calc.c:48: for (; *s; s++) putchar(*s);
      000E33 8D 82            [24] 2997 	mov	dpl,r5
      000E35 8E 83            [24] 2998 	mov	dph,r6
      000E37 8F F0            [24] 2999 	mov	b,r7
      000E39 12r00r00         [24] 3000 	lcall	__gptrget
      000E3C FC               [12] 3001 	mov	r4,a
      000E3D 70 03            [24] 3002 	jnz	00891$
      000E3F 02r18r5A         [24] 3003 	ljmp	00188$
      000E42                       3004 00891$:
      000E42 7B 00            [12] 3005 	mov	r3,#0x00
      000E44 8C 82            [24] 3006 	mov	dpl,r4
      000E46 8B 83            [24] 3007 	mov	dph,r3
      000E48 12r00r00         [24] 3008 	lcall	_putchar
      000E4B 0D               [12] 3009 	inc	r5
                                   3010 ;	calc.c:195: printstr("\r\nstack underflow\r\n");
      000E4C BD 00 E4         [24] 3011 	cjne	r5,#0x00,00310$
      000E4F 0E               [12] 3012 	inc	r6
      000E50 80 E1            [24] 3013 	sjmp	00310$
      000E52                       3014 00130$:
                                   3015 ;	calc.c:197: d1 -= d0;
      000E52 E5*00            [12] 3016 	mov	a,_bp
      000E54 24 0B            [12] 3017 	add	a,#0x0b
      000E56 F8               [12] 3018 	mov	r0,a
      000E57 E5*00            [12] 3019 	mov	a,_bp
      000E59 24 07            [12] 3020 	add	a,#0x07
      000E5B F9               [12] 3021 	mov	r1,a
      000E5C E6               [12] 3022 	mov	a,@r0
      000E5D C3               [12] 3023 	clr	c
      000E5E 97               [12] 3024 	subb	a,@r1
      000E5F F6               [12] 3025 	mov	@r0,a
      000E60 08               [12] 3026 	inc	r0
      000E61 E6               [12] 3027 	mov	a,@r0
      000E62 09               [12] 3028 	inc	r1
      000E63 97               [12] 3029 	subb	a,@r1
      000E64 F6               [12] 3030 	mov	@r0,a
      000E65 08               [12] 3031 	inc	r0
      000E66 E6               [12] 3032 	mov	a,@r0
      000E67 09               [12] 3033 	inc	r1
      000E68 97               [12] 3034 	subb	a,@r1
      000E69 F6               [12] 3035 	mov	@r0,a
      000E6A 08               [12] 3036 	inc	r0
      000E6B E6               [12] 3037 	mov	a,@r0
      000E6C 09               [12] 3038 	inc	r1
      000E6D 97               [12] 3039 	subb	a,@r1
      000E6E F6               [12] 3040 	mov	@r0,a
                                   3041 ;	calc.c:198: (void)stack_push(&ctx->s, d1);
      000E6F E5*00            [12] 3042 	mov	a,_bp
      000E71 24 04            [12] 3043 	add	a,#0x04
      000E73 F8               [12] 3044 	mov	r0,a
      000E74 74 09            [12] 3045 	mov	a,#0x09
      000E76 26               [12] 3046 	add	a,@r0
      000E77 FD               [12] 3047 	mov	r5,a
      000E78 E4               [12] 3048 	clr	a
      000E79 08               [12] 3049 	inc	r0
      000E7A 36               [12] 3050 	addc	a,@r0
      000E7B FE               [12] 3051 	mov	r6,a
      000E7C 08               [12] 3052 	inc	r0
      000E7D 86 07            [24] 3053 	mov	ar7,@r0
      000E7F E5*00            [12] 3054 	mov	a,_bp
      000E81 24 0B            [12] 3055 	add	a,#0x0b
      000E83 F8               [12] 3056 	mov	r0,a
      000E84 E6               [12] 3057 	mov	a,@r0
      000E85 C0 E0            [24] 3058 	push	acc
      000E87 08               [12] 3059 	inc	r0
      000E88 E6               [12] 3060 	mov	a,@r0
      000E89 C0 E0            [24] 3061 	push	acc
      000E8B 08               [12] 3062 	inc	r0
      000E8C E6               [12] 3063 	mov	a,@r0
      000E8D C0 E0            [24] 3064 	push	acc
      000E8F 08               [12] 3065 	inc	r0
      000E90 E6               [12] 3066 	mov	a,@r0
      000E91 C0 E0            [24] 3067 	push	acc
      000E93 8D 82            [24] 3068 	mov	dpl,r5
      000E95 8E 83            [24] 3069 	mov	dph,r6
      000E97 8F F0            [24] 3070 	mov	b,r7
      000E99 12r00r00         [24] 3071 	lcall	_stack_push
      000E9C E5 81            [12] 3072 	mov	a,sp
      000E9E 24 FC            [12] 3073 	add	a,#0xfc
      000EA0 F5 81            [12] 3074 	mov	sp,a
                                   3075 ;	calc.c:200: break;
      000EA2 02r18r5A         [24] 3076 	ljmp	00188$
                                   3077 ;	calc.c:201: case '*':
      000EA5                       3078 00135$:
                                   3079 ;	calc.c:202: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      000EA5 E5*00            [12] 3080 	mov	a,_bp
      000EA7 24 07            [12] 3081 	add	a,#0x07
      000EA9 FF               [12] 3082 	mov	r7,a
      000EAA 7E 00            [12] 3083 	mov	r6,#0x00
      000EAC 7D 40            [12] 3084 	mov	r5,#0x40
      000EAE E5*00            [12] 3085 	mov	a,_bp
      000EB0 24 04            [12] 3086 	add	a,#0x04
      000EB2 F8               [12] 3087 	mov	r0,a
      000EB3 74 09            [12] 3088 	mov	a,#0x09
      000EB5 26               [12] 3089 	add	a,@r0
      000EB6 FA               [12] 3090 	mov	r2,a
      000EB7 E4               [12] 3091 	clr	a
      000EB8 08               [12] 3092 	inc	r0
      000EB9 36               [12] 3093 	addc	a,@r0
      000EBA FB               [12] 3094 	mov	r3,a
      000EBB 08               [12] 3095 	inc	r0
      000EBC 86 04            [24] 3096 	mov	ar4,@r0
      000EBE C0 07            [24] 3097 	push	ar7
      000EC0 C0 06            [24] 3098 	push	ar6
      000EC2 C0 05            [24] 3099 	push	ar5
      000EC4 8A 82            [24] 3100 	mov	dpl,r2
      000EC6 8B 83            [24] 3101 	mov	dph,r3
      000EC8 8C F0            [24] 3102 	mov	b,r4
      000ECA 12r00r00         [24] 3103 	lcall	_stack_pop
      000ECD AE 82            [24] 3104 	mov	r6,dpl
      000ECF AF 83            [24] 3105 	mov	r7,dph
      000ED1 15 81            [12] 3106 	dec	sp
      000ED3 15 81            [12] 3107 	dec	sp
      000ED5 15 81            [12] 3108 	dec	sp
      000ED7 EE               [12] 3109 	mov	a,r6
      000ED8 4F               [12] 3110 	orl	a,r7
      000ED9 70 25            [24] 3111 	jnz	00140$
      000EDB 7Dr38            [12] 3112 	mov	r5,#___str_8
      000EDD 7Es00            [12] 3113 	mov	r6,#(___str_8 >> 8)
      000EDF 7F 80            [12] 3114 	mov	r7,#0x80
                                   3115 ;	calc.c:50: return;
      000EE1                       3116 00313$:
                                   3117 ;	calc.c:48: for (; *s; s++) putchar(*s);
      000EE1 8D 82            [24] 3118 	mov	dpl,r5
      000EE3 8E 83            [24] 3119 	mov	dph,r6
      000EE5 8F F0            [24] 3120 	mov	b,r7
      000EE7 12r00r00         [24] 3121 	lcall	__gptrget
      000EEA FC               [12] 3122 	mov	r4,a
      000EEB 70 03            [24] 3123 	jnz	00894$
      000EED 02r18r5A         [24] 3124 	ljmp	00188$
      000EF0                       3125 00894$:
      000EF0 7B 00            [12] 3126 	mov	r3,#0x00
      000EF2 8C 82            [24] 3127 	mov	dpl,r4
      000EF4 8B 83            [24] 3128 	mov	dph,r3
      000EF6 12r00r00         [24] 3129 	lcall	_putchar
      000EF9 0D               [12] 3130 	inc	r5
                                   3131 ;	calc.c:202: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      000EFA BD 00 E4         [24] 3132 	cjne	r5,#0x00,00313$
      000EFD 0E               [12] 3133 	inc	r6
      000EFE 80 E1            [24] 3134 	sjmp	00313$
      000F00                       3135 00140$:
                                   3136 ;	calc.c:203: else if (!stack_pop(&ctx->s, &d1)) {
      000F00 E5*00            [12] 3137 	mov	a,_bp
      000F02 24 0B            [12] 3138 	add	a,#0x0b
      000F04 FF               [12] 3139 	mov	r7,a
      000F05 7E 00            [12] 3140 	mov	r6,#0x00
      000F07 7D 40            [12] 3141 	mov	r5,#0x40
      000F09 E5*00            [12] 3142 	mov	a,_bp
      000F0B 24 04            [12] 3143 	add	a,#0x04
      000F0D F8               [12] 3144 	mov	r0,a
      000F0E 74 09            [12] 3145 	mov	a,#0x09
      000F10 26               [12] 3146 	add	a,@r0
      000F11 FA               [12] 3147 	mov	r2,a
      000F12 E4               [12] 3148 	clr	a
      000F13 08               [12] 3149 	inc	r0
      000F14 36               [12] 3150 	addc	a,@r0
      000F15 FB               [12] 3151 	mov	r3,a
      000F16 08               [12] 3152 	inc	r0
      000F17 86 04            [24] 3153 	mov	ar4,@r0
      000F19 C0 07            [24] 3154 	push	ar7
      000F1B C0 06            [24] 3155 	push	ar6
      000F1D C0 05            [24] 3156 	push	ar5
      000F1F 8A 82            [24] 3157 	mov	dpl,r2
      000F21 8B 83            [24] 3158 	mov	dph,r3
      000F23 8C F0            [24] 3159 	mov	b,r4
      000F25 12r00r00         [24] 3160 	lcall	_stack_pop
      000F28 AE 82            [24] 3161 	mov	r6,dpl
      000F2A AF 83            [24] 3162 	mov	r7,dph
      000F2C 15 81            [12] 3163 	dec	sp
      000F2E 15 81            [12] 3164 	dec	sp
      000F30 15 81            [12] 3165 	dec	sp
      000F32 EE               [12] 3166 	mov	a,r6
      000F33 4F               [12] 3167 	orl	a,r7
      000F34 70 58            [24] 3168 	jnz	00137$
                                   3169 ;	calc.c:204: (void)stack_push(&ctx->s, d0);
      000F36 E5*00            [12] 3170 	mov	a,_bp
      000F38 24 04            [12] 3171 	add	a,#0x04
      000F3A F8               [12] 3172 	mov	r0,a
      000F3B 74 09            [12] 3173 	mov	a,#0x09
      000F3D 26               [12] 3174 	add	a,@r0
      000F3E FD               [12] 3175 	mov	r5,a
      000F3F E4               [12] 3176 	clr	a
      000F40 08               [12] 3177 	inc	r0
      000F41 36               [12] 3178 	addc	a,@r0
      000F42 FE               [12] 3179 	mov	r6,a
      000F43 08               [12] 3180 	inc	r0
      000F44 86 07            [24] 3181 	mov	ar7,@r0
      000F46 E5*00            [12] 3182 	mov	a,_bp
      000F48 24 07            [12] 3183 	add	a,#0x07
      000F4A F8               [12] 3184 	mov	r0,a
      000F4B E6               [12] 3185 	mov	a,@r0
      000F4C C0 E0            [24] 3186 	push	acc
      000F4E 08               [12] 3187 	inc	r0
      000F4F E6               [12] 3188 	mov	a,@r0
      000F50 C0 E0            [24] 3189 	push	acc
      000F52 08               [12] 3190 	inc	r0
      000F53 E6               [12] 3191 	mov	a,@r0
      000F54 C0 E0            [24] 3192 	push	acc
      000F56 08               [12] 3193 	inc	r0
      000F57 E6               [12] 3194 	mov	a,@r0
      000F58 C0 E0            [24] 3195 	push	acc
      000F5A 8D 82            [24] 3196 	mov	dpl,r5
      000F5C 8E 83            [24] 3197 	mov	dph,r6
      000F5E 8F F0            [24] 3198 	mov	b,r7
      000F60 12r00r00         [24] 3199 	lcall	_stack_push
      000F63 E5 81            [12] 3200 	mov	a,sp
      000F65 24 FC            [12] 3201 	add	a,#0xfc
      000F67 F5 81            [12] 3202 	mov	sp,a
                                   3203 ;	calc.c:205: printstr("\r\nstack underflow\r\n");
      000F69 7Dr38            [12] 3204 	mov	r5,#___str_8
      000F6B 7Es00            [12] 3205 	mov	r6,#(___str_8 >> 8)
      000F6D 7F 80            [12] 3206 	mov	r7,#0x80
                                   3207 ;	calc.c:50: return;
      000F6F                       3208 00316$:
                                   3209 ;	calc.c:48: for (; *s; s++) putchar(*s);
      000F6F 8D 82            [24] 3210 	mov	dpl,r5
      000F71 8E 83            [24] 3211 	mov	dph,r6
      000F73 8F F0            [24] 3212 	mov	b,r7
      000F75 12r00r00         [24] 3213 	lcall	__gptrget
      000F78 FC               [12] 3214 	mov	r4,a
      000F79 70 03            [24] 3215 	jnz	00897$
      000F7B 02r18r5A         [24] 3216 	ljmp	00188$
      000F7E                       3217 00897$:
      000F7E 7B 00            [12] 3218 	mov	r3,#0x00
      000F80 8C 82            [24] 3219 	mov	dpl,r4
      000F82 8B 83            [24] 3220 	mov	dph,r3
      000F84 12r00r00         [24] 3221 	lcall	_putchar
      000F87 0D               [12] 3222 	inc	r5
                                   3223 ;	calc.c:205: printstr("\r\nstack underflow\r\n");
      000F88 BD 00 E4         [24] 3224 	cjne	r5,#0x00,00316$
      000F8B 0E               [12] 3225 	inc	r6
      000F8C 80 E1            [24] 3226 	sjmp	00316$
      000F8E                       3227 00137$:
                                   3228 ;	calc.c:207: d1 *= d0;
      000F8E E5*00            [12] 3229 	mov	a,_bp
      000F90 24 07            [12] 3230 	add	a,#0x07
      000F92 F8               [12] 3231 	mov	r0,a
      000F93 E6               [12] 3232 	mov	a,@r0
      000F94 C0 E0            [24] 3233 	push	acc
      000F96 08               [12] 3234 	inc	r0
      000F97 E6               [12] 3235 	mov	a,@r0
      000F98 C0 E0            [24] 3236 	push	acc
      000F9A 08               [12] 3237 	inc	r0
      000F9B E6               [12] 3238 	mov	a,@r0
      000F9C C0 E0            [24] 3239 	push	acc
      000F9E 08               [12] 3240 	inc	r0
      000F9F E6               [12] 3241 	mov	a,@r0
      000FA0 C0 E0            [24] 3242 	push	acc
      000FA2 E5*00            [12] 3243 	mov	a,_bp
      000FA4 24 0B            [12] 3244 	add	a,#0x0b
      000FA6 F8               [12] 3245 	mov	r0,a
      000FA7 86 82            [24] 3246 	mov	dpl,@r0
      000FA9 08               [12] 3247 	inc	r0
      000FAA 86 83            [24] 3248 	mov	dph,@r0
      000FAC 08               [12] 3249 	inc	r0
      000FAD 86 F0            [24] 3250 	mov	b,@r0
      000FAF 08               [12] 3251 	inc	r0
      000FB0 E6               [12] 3252 	mov	a,@r0
      000FB1 12r00r00         [24] 3253 	lcall	__mullong
      000FB4 AC 82            [24] 3254 	mov	r4,dpl
      000FB6 AD 83            [24] 3255 	mov	r5,dph
      000FB8 AE F0            [24] 3256 	mov	r6,b
      000FBA FF               [12] 3257 	mov	r7,a
      000FBB E5 81            [12] 3258 	mov	a,sp
      000FBD 24 FC            [12] 3259 	add	a,#0xfc
      000FBF F5 81            [12] 3260 	mov	sp,a
      000FC1 E5*00            [12] 3261 	mov	a,_bp
      000FC3 24 0B            [12] 3262 	add	a,#0x0b
      000FC5 F8               [12] 3263 	mov	r0,a
      000FC6 A6 04            [24] 3264 	mov	@r0,ar4
      000FC8 08               [12] 3265 	inc	r0
      000FC9 A6 05            [24] 3266 	mov	@r0,ar5
      000FCB 08               [12] 3267 	inc	r0
      000FCC A6 06            [24] 3268 	mov	@r0,ar6
      000FCE 08               [12] 3269 	inc	r0
      000FCF A6 07            [24] 3270 	mov	@r0,ar7
                                   3271 ;	calc.c:208: (void)stack_push(&ctx->s, d1);
      000FD1 E5*00            [12] 3272 	mov	a,_bp
      000FD3 24 04            [12] 3273 	add	a,#0x04
      000FD5 F8               [12] 3274 	mov	r0,a
      000FD6 74 09            [12] 3275 	mov	a,#0x09
      000FD8 26               [12] 3276 	add	a,@r0
      000FD9 FD               [12] 3277 	mov	r5,a
      000FDA E4               [12] 3278 	clr	a
      000FDB 08               [12] 3279 	inc	r0
      000FDC 36               [12] 3280 	addc	a,@r0
      000FDD FE               [12] 3281 	mov	r6,a
      000FDE 08               [12] 3282 	inc	r0
      000FDF 86 07            [24] 3283 	mov	ar7,@r0
      000FE1 E5*00            [12] 3284 	mov	a,_bp
      000FE3 24 0B            [12] 3285 	add	a,#0x0b
      000FE5 F8               [12] 3286 	mov	r0,a
      000FE6 E6               [12] 3287 	mov	a,@r0
      000FE7 C0 E0            [24] 3288 	push	acc
      000FE9 08               [12] 3289 	inc	r0
      000FEA E6               [12] 3290 	mov	a,@r0
      000FEB C0 E0            [24] 3291 	push	acc
      000FED 08               [12] 3292 	inc	r0
      000FEE E6               [12] 3293 	mov	a,@r0
      000FEF C0 E0            [24] 3294 	push	acc
      000FF1 08               [12] 3295 	inc	r0
      000FF2 E6               [12] 3296 	mov	a,@r0
      000FF3 C0 E0            [24] 3297 	push	acc
      000FF5 8D 82            [24] 3298 	mov	dpl,r5
      000FF7 8E 83            [24] 3299 	mov	dph,r6
      000FF9 8F F0            [24] 3300 	mov	b,r7
      000FFB 12r00r00         [24] 3301 	lcall	_stack_push
      000FFE E5 81            [12] 3302 	mov	a,sp
      001000 24 FC            [12] 3303 	add	a,#0xfc
      001002 F5 81            [12] 3304 	mov	sp,a
                                   3305 ;	calc.c:210: break;
      001004 02r18r5A         [24] 3306 	ljmp	00188$
                                   3307 ;	calc.c:211: case '/':
      001007                       3308 00142$:
                                   3309 ;	calc.c:212: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      001007 E5*00            [12] 3310 	mov	a,_bp
      001009 24 07            [12] 3311 	add	a,#0x07
      00100B FF               [12] 3312 	mov	r7,a
      00100C 7E 00            [12] 3313 	mov	r6,#0x00
      00100E 7D 40            [12] 3314 	mov	r5,#0x40
      001010 E5*00            [12] 3315 	mov	a,_bp
      001012 24 04            [12] 3316 	add	a,#0x04
      001014 F8               [12] 3317 	mov	r0,a
      001015 74 09            [12] 3318 	mov	a,#0x09
      001017 26               [12] 3319 	add	a,@r0
      001018 FA               [12] 3320 	mov	r2,a
      001019 E4               [12] 3321 	clr	a
      00101A 08               [12] 3322 	inc	r0
      00101B 36               [12] 3323 	addc	a,@r0
      00101C FB               [12] 3324 	mov	r3,a
      00101D 08               [12] 3325 	inc	r0
      00101E 86 04            [24] 3326 	mov	ar4,@r0
      001020 C0 07            [24] 3327 	push	ar7
      001022 C0 06            [24] 3328 	push	ar6
      001024 C0 05            [24] 3329 	push	ar5
      001026 8A 82            [24] 3330 	mov	dpl,r2
      001028 8B 83            [24] 3331 	mov	dph,r3
      00102A 8C F0            [24] 3332 	mov	b,r4
      00102C 12r00r00         [24] 3333 	lcall	_stack_pop
      00102F AE 82            [24] 3334 	mov	r6,dpl
      001031 AF 83            [24] 3335 	mov	r7,dph
      001033 15 81            [12] 3336 	dec	sp
      001035 15 81            [12] 3337 	dec	sp
      001037 15 81            [12] 3338 	dec	sp
      001039 EE               [12] 3339 	mov	a,r6
      00103A 4F               [12] 3340 	orl	a,r7
      00103B 70 25            [24] 3341 	jnz	00150$
      00103D 7Dr38            [12] 3342 	mov	r5,#___str_8
      00103F 7Es00            [12] 3343 	mov	r6,#(___str_8 >> 8)
      001041 7F 80            [12] 3344 	mov	r7,#0x80
                                   3345 ;	calc.c:50: return;
      001043                       3346 00319$:
                                   3347 ;	calc.c:48: for (; *s; s++) putchar(*s);
      001043 8D 82            [24] 3348 	mov	dpl,r5
      001045 8E 83            [24] 3349 	mov	dph,r6
      001047 8F F0            [24] 3350 	mov	b,r7
      001049 12r00r00         [24] 3351 	lcall	__gptrget
      00104C FC               [12] 3352 	mov	r4,a
      00104D 70 03            [24] 3353 	jnz	00900$
      00104F 02r18r5A         [24] 3354 	ljmp	00188$
      001052                       3355 00900$:
      001052 7B 00            [12] 3356 	mov	r3,#0x00
      001054 8C 82            [24] 3357 	mov	dpl,r4
      001056 8B 83            [24] 3358 	mov	dph,r3
      001058 12r00r00         [24] 3359 	lcall	_putchar
      00105B 0D               [12] 3360 	inc	r5
                                   3361 ;	calc.c:212: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      00105C BD 00 E4         [24] 3362 	cjne	r5,#0x00,00319$
      00105F 0E               [12] 3363 	inc	r6
      001060 80 E1            [24] 3364 	sjmp	00319$
      001062                       3365 00150$:
                                   3366 ;	calc.c:213: else if (!stack_pop(&ctx->s, &d1)) {
      001062 E5*00            [12] 3367 	mov	a,_bp
      001064 24 0B            [12] 3368 	add	a,#0x0b
      001066 FF               [12] 3369 	mov	r7,a
      001067 7E 00            [12] 3370 	mov	r6,#0x00
      001069 7D 40            [12] 3371 	mov	r5,#0x40
      00106B E5*00            [12] 3372 	mov	a,_bp
      00106D 24 04            [12] 3373 	add	a,#0x04
      00106F F8               [12] 3374 	mov	r0,a
      001070 74 09            [12] 3375 	mov	a,#0x09
      001072 26               [12] 3376 	add	a,@r0
      001073 FA               [12] 3377 	mov	r2,a
      001074 E4               [12] 3378 	clr	a
      001075 08               [12] 3379 	inc	r0
      001076 36               [12] 3380 	addc	a,@r0
      001077 FB               [12] 3381 	mov	r3,a
      001078 08               [12] 3382 	inc	r0
      001079 86 04            [24] 3383 	mov	ar4,@r0
      00107B C0 07            [24] 3384 	push	ar7
      00107D C0 06            [24] 3385 	push	ar6
      00107F C0 05            [24] 3386 	push	ar5
      001081 8A 82            [24] 3387 	mov	dpl,r2
      001083 8B 83            [24] 3388 	mov	dph,r3
      001085 8C F0            [24] 3389 	mov	b,r4
      001087 12r00r00         [24] 3390 	lcall	_stack_pop
      00108A AE 82            [24] 3391 	mov	r6,dpl
      00108C AF 83            [24] 3392 	mov	r7,dph
      00108E 15 81            [12] 3393 	dec	sp
      001090 15 81            [12] 3394 	dec	sp
      001092 15 81            [12] 3395 	dec	sp
      001094 EE               [12] 3396 	mov	a,r6
      001095 4F               [12] 3397 	orl	a,r7
      001096 70 58            [24] 3398 	jnz	00147$
                                   3399 ;	calc.c:214: (void)stack_push(&ctx->s, d0);
      001098 E5*00            [12] 3400 	mov	a,_bp
      00109A 24 04            [12] 3401 	add	a,#0x04
      00109C F8               [12] 3402 	mov	r0,a
      00109D 74 09            [12] 3403 	mov	a,#0x09
      00109F 26               [12] 3404 	add	a,@r0
      0010A0 FD               [12] 3405 	mov	r5,a
      0010A1 E4               [12] 3406 	clr	a
      0010A2 08               [12] 3407 	inc	r0
      0010A3 36               [12] 3408 	addc	a,@r0
      0010A4 FE               [12] 3409 	mov	r6,a
      0010A5 08               [12] 3410 	inc	r0
      0010A6 86 07            [24] 3411 	mov	ar7,@r0
      0010A8 E5*00            [12] 3412 	mov	a,_bp
      0010AA 24 07            [12] 3413 	add	a,#0x07
      0010AC F8               [12] 3414 	mov	r0,a
      0010AD E6               [12] 3415 	mov	a,@r0
      0010AE C0 E0            [24] 3416 	push	acc
      0010B0 08               [12] 3417 	inc	r0
      0010B1 E6               [12] 3418 	mov	a,@r0
      0010B2 C0 E0            [24] 3419 	push	acc
      0010B4 08               [12] 3420 	inc	r0
      0010B5 E6               [12] 3421 	mov	a,@r0
      0010B6 C0 E0            [24] 3422 	push	acc
      0010B8 08               [12] 3423 	inc	r0
      0010B9 E6               [12] 3424 	mov	a,@r0
      0010BA C0 E0            [24] 3425 	push	acc
      0010BC 8D 82            [24] 3426 	mov	dpl,r5
      0010BE 8E 83            [24] 3427 	mov	dph,r6
      0010C0 8F F0            [24] 3428 	mov	b,r7
      0010C2 12r00r00         [24] 3429 	lcall	_stack_push
      0010C5 E5 81            [12] 3430 	mov	a,sp
      0010C7 24 FC            [12] 3431 	add	a,#0xfc
      0010C9 F5 81            [12] 3432 	mov	sp,a
                                   3433 ;	calc.c:215: printstr("\r\nstack underflow\r\n");
      0010CB 7Dr38            [12] 3434 	mov	r5,#___str_8
      0010CD 7Es00            [12] 3435 	mov	r6,#(___str_8 >> 8)
      0010CF 7F 80            [12] 3436 	mov	r7,#0x80
                                   3437 ;	calc.c:50: return;
      0010D1                       3438 00322$:
                                   3439 ;	calc.c:48: for (; *s; s++) putchar(*s);
      0010D1 8D 82            [24] 3440 	mov	dpl,r5
      0010D3 8E 83            [24] 3441 	mov	dph,r6
      0010D5 8F F0            [24] 3442 	mov	b,r7
      0010D7 12r00r00         [24] 3443 	lcall	__gptrget
      0010DA FC               [12] 3444 	mov	r4,a
      0010DB 70 03            [24] 3445 	jnz	00903$
      0010DD 02r18r5A         [24] 3446 	ljmp	00188$
      0010E0                       3447 00903$:
      0010E0 7B 00            [12] 3448 	mov	r3,#0x00
      0010E2 8C 82            [24] 3449 	mov	dpl,r4
      0010E4 8B 83            [24] 3450 	mov	dph,r3
      0010E6 12r00r00         [24] 3451 	lcall	_putchar
      0010E9 0D               [12] 3452 	inc	r5
                                   3453 ;	calc.c:215: printstr("\r\nstack underflow\r\n");
      0010EA BD 00 E4         [24] 3454 	cjne	r5,#0x00,00322$
      0010ED 0E               [12] 3455 	inc	r6
      0010EE 80 E1            [24] 3456 	sjmp	00322$
      0010F0                       3457 00147$:
                                   3458 ;	calc.c:216: } else if (!d0) {
      0010F0 E5*00            [12] 3459 	mov	a,_bp
      0010F2 24 07            [12] 3460 	add	a,#0x07
      0010F4 F8               [12] 3461 	mov	r0,a
      0010F5 E6               [12] 3462 	mov	a,@r0
      0010F6 08               [12] 3463 	inc	r0
      0010F7 46               [12] 3464 	orl	a,@r0
      0010F8 08               [12] 3465 	inc	r0
      0010F9 46               [12] 3466 	orl	a,@r0
      0010FA 08               [12] 3467 	inc	r0
      0010FB 46               [12] 3468 	orl	a,@r0
      0010FC 60 03            [24] 3469 	jz	00905$
      0010FE 02r11r8C         [24] 3470 	ljmp	00144$
      001101                       3471 00905$:
                                   3472 ;	calc.c:217: (void)stack_push(&ctx->s, d1);
      001101 E5*00            [12] 3473 	mov	a,_bp
      001103 24 04            [12] 3474 	add	a,#0x04
      001105 F8               [12] 3475 	mov	r0,a
      001106 74 09            [12] 3476 	mov	a,#0x09
      001108 26               [12] 3477 	add	a,@r0
      001109 FD               [12] 3478 	mov	r5,a
      00110A E4               [12] 3479 	clr	a
      00110B 08               [12] 3480 	inc	r0
      00110C 36               [12] 3481 	addc	a,@r0
      00110D FE               [12] 3482 	mov	r6,a
      00110E 08               [12] 3483 	inc	r0
      00110F 86 07            [24] 3484 	mov	ar7,@r0
      001111 E5*00            [12] 3485 	mov	a,_bp
      001113 24 0B            [12] 3486 	add	a,#0x0b
      001115 F8               [12] 3487 	mov	r0,a
      001116 E6               [12] 3488 	mov	a,@r0
      001117 C0 E0            [24] 3489 	push	acc
      001119 08               [12] 3490 	inc	r0
      00111A E6               [12] 3491 	mov	a,@r0
      00111B C0 E0            [24] 3492 	push	acc
      00111D 08               [12] 3493 	inc	r0
      00111E E6               [12] 3494 	mov	a,@r0
      00111F C0 E0            [24] 3495 	push	acc
      001121 08               [12] 3496 	inc	r0
      001122 E6               [12] 3497 	mov	a,@r0
      001123 C0 E0            [24] 3498 	push	acc
      001125 8D 82            [24] 3499 	mov	dpl,r5
      001127 8E 83            [24] 3500 	mov	dph,r6
      001129 8F F0            [24] 3501 	mov	b,r7
      00112B 12r00r00         [24] 3502 	lcall	_stack_push
      00112E E5 81            [12] 3503 	mov	a,sp
      001130 24 FC            [12] 3504 	add	a,#0xfc
      001132 F5 81            [12] 3505 	mov	sp,a
                                   3506 ;	calc.c:218: (void)stack_push(&ctx->s, d0);			
      001134 E5*00            [12] 3507 	mov	a,_bp
      001136 24 04            [12] 3508 	add	a,#0x04
      001138 F8               [12] 3509 	mov	r0,a
      001139 74 09            [12] 3510 	mov	a,#0x09
      00113B 26               [12] 3511 	add	a,@r0
      00113C FD               [12] 3512 	mov	r5,a
      00113D E4               [12] 3513 	clr	a
      00113E 08               [12] 3514 	inc	r0
      00113F 36               [12] 3515 	addc	a,@r0
      001140 FE               [12] 3516 	mov	r6,a
      001141 08               [12] 3517 	inc	r0
      001142 86 07            [24] 3518 	mov	ar7,@r0
      001144 E5*00            [12] 3519 	mov	a,_bp
      001146 24 07            [12] 3520 	add	a,#0x07
      001148 F8               [12] 3521 	mov	r0,a
      001149 E6               [12] 3522 	mov	a,@r0
      00114A C0 E0            [24] 3523 	push	acc
      00114C 08               [12] 3524 	inc	r0
      00114D E6               [12] 3525 	mov	a,@r0
      00114E C0 E0            [24] 3526 	push	acc
      001150 08               [12] 3527 	inc	r0
      001151 E6               [12] 3528 	mov	a,@r0
      001152 C0 E0            [24] 3529 	push	acc
      001154 08               [12] 3530 	inc	r0
      001155 E6               [12] 3531 	mov	a,@r0
      001156 C0 E0            [24] 3532 	push	acc
      001158 8D 82            [24] 3533 	mov	dpl,r5
      00115A 8E 83            [24] 3534 	mov	dph,r6
      00115C 8F F0            [24] 3535 	mov	b,r7
      00115E 12r00r00         [24] 3536 	lcall	_stack_push
      001161 E5 81            [12] 3537 	mov	a,sp
      001163 24 FC            [12] 3538 	add	a,#0xfc
      001165 F5 81            [12] 3539 	mov	sp,a
                                   3540 ;	calc.c:219: printstr("\r\ndivision by zero\r\n");
      001167 7Dr4C            [12] 3541 	mov	r5,#___str_9
      001169 7Es00            [12] 3542 	mov	r6,#(___str_9 >> 8)
      00116B 7F 80            [12] 3543 	mov	r7,#0x80
                                   3544 ;	calc.c:50: return;
      00116D                       3545 00325$:
                                   3546 ;	calc.c:48: for (; *s; s++) putchar(*s);
      00116D 8D 82            [24] 3547 	mov	dpl,r5
      00116F 8E 83            [24] 3548 	mov	dph,r6
      001171 8F F0            [24] 3549 	mov	b,r7
      001173 12r00r00         [24] 3550 	lcall	__gptrget
      001176 FC               [12] 3551 	mov	r4,a
      001177 70 03            [24] 3552 	jnz	00906$
      001179 02r18r5A         [24] 3553 	ljmp	00188$
      00117C                       3554 00906$:
      00117C 7B 00            [12] 3555 	mov	r3,#0x00
      00117E 8C 82            [24] 3556 	mov	dpl,r4
      001180 8B 83            [24] 3557 	mov	dph,r3
      001182 12r00r00         [24] 3558 	lcall	_putchar
      001185 0D               [12] 3559 	inc	r5
                                   3560 ;	calc.c:219: printstr("\r\ndivision by zero\r\n");
      001186 BD 00 E4         [24] 3561 	cjne	r5,#0x00,00325$
      001189 0E               [12] 3562 	inc	r6
      00118A 80 E1            [24] 3563 	sjmp	00325$
      00118C                       3564 00144$:
                                   3565 ;	calc.c:221: d1 /= d0;
      00118C E5*00            [12] 3566 	mov	a,_bp
      00118E 24 07            [12] 3567 	add	a,#0x07
      001190 F8               [12] 3568 	mov	r0,a
      001191 E6               [12] 3569 	mov	a,@r0
      001192 C0 E0            [24] 3570 	push	acc
      001194 08               [12] 3571 	inc	r0
      001195 E6               [12] 3572 	mov	a,@r0
      001196 C0 E0            [24] 3573 	push	acc
      001198 08               [12] 3574 	inc	r0
      001199 E6               [12] 3575 	mov	a,@r0
      00119A C0 E0            [24] 3576 	push	acc
      00119C 08               [12] 3577 	inc	r0
      00119D E6               [12] 3578 	mov	a,@r0
      00119E C0 E0            [24] 3579 	push	acc
      0011A0 E5*00            [12] 3580 	mov	a,_bp
      0011A2 24 0B            [12] 3581 	add	a,#0x0b
      0011A4 F8               [12] 3582 	mov	r0,a
      0011A5 86 82            [24] 3583 	mov	dpl,@r0
      0011A7 08               [12] 3584 	inc	r0
      0011A8 86 83            [24] 3585 	mov	dph,@r0
      0011AA 08               [12] 3586 	inc	r0
      0011AB 86 F0            [24] 3587 	mov	b,@r0
      0011AD 08               [12] 3588 	inc	r0
      0011AE E6               [12] 3589 	mov	a,@r0
      0011AF 12r00r00         [24] 3590 	lcall	__divslong
      0011B2 AC 82            [24] 3591 	mov	r4,dpl
      0011B4 AD 83            [24] 3592 	mov	r5,dph
      0011B6 AE F0            [24] 3593 	mov	r6,b
      0011B8 FF               [12] 3594 	mov	r7,a
      0011B9 E5 81            [12] 3595 	mov	a,sp
      0011BB 24 FC            [12] 3596 	add	a,#0xfc
      0011BD F5 81            [12] 3597 	mov	sp,a
      0011BF E5*00            [12] 3598 	mov	a,_bp
      0011C1 24 0B            [12] 3599 	add	a,#0x0b
      0011C3 F8               [12] 3600 	mov	r0,a
      0011C4 A6 04            [24] 3601 	mov	@r0,ar4
      0011C6 08               [12] 3602 	inc	r0
      0011C7 A6 05            [24] 3603 	mov	@r0,ar5
      0011C9 08               [12] 3604 	inc	r0
      0011CA A6 06            [24] 3605 	mov	@r0,ar6
      0011CC 08               [12] 3606 	inc	r0
      0011CD A6 07            [24] 3607 	mov	@r0,ar7
                                   3608 ;	calc.c:222: (void)stack_push(&ctx->s, d1);
      0011CF E5*00            [12] 3609 	mov	a,_bp
      0011D1 24 04            [12] 3610 	add	a,#0x04
      0011D3 F8               [12] 3611 	mov	r0,a
      0011D4 74 09            [12] 3612 	mov	a,#0x09
      0011D6 26               [12] 3613 	add	a,@r0
      0011D7 FD               [12] 3614 	mov	r5,a
      0011D8 E4               [12] 3615 	clr	a
      0011D9 08               [12] 3616 	inc	r0
      0011DA 36               [12] 3617 	addc	a,@r0
      0011DB FE               [12] 3618 	mov	r6,a
      0011DC 08               [12] 3619 	inc	r0
      0011DD 86 07            [24] 3620 	mov	ar7,@r0
      0011DF E5*00            [12] 3621 	mov	a,_bp
      0011E1 24 0B            [12] 3622 	add	a,#0x0b
      0011E3 F8               [12] 3623 	mov	r0,a
      0011E4 E6               [12] 3624 	mov	a,@r0
      0011E5 C0 E0            [24] 3625 	push	acc
      0011E7 08               [12] 3626 	inc	r0
      0011E8 E6               [12] 3627 	mov	a,@r0
      0011E9 C0 E0            [24] 3628 	push	acc
      0011EB 08               [12] 3629 	inc	r0
      0011EC E6               [12] 3630 	mov	a,@r0
      0011ED C0 E0            [24] 3631 	push	acc
      0011EF 08               [12] 3632 	inc	r0
      0011F0 E6               [12] 3633 	mov	a,@r0
      0011F1 C0 E0            [24] 3634 	push	acc
      0011F3 8D 82            [24] 3635 	mov	dpl,r5
      0011F5 8E 83            [24] 3636 	mov	dph,r6
      0011F7 8F F0            [24] 3637 	mov	b,r7
      0011F9 12r00r00         [24] 3638 	lcall	_stack_push
      0011FC E5 81            [12] 3639 	mov	a,sp
      0011FE 24 FC            [12] 3640 	add	a,#0xfc
      001200 F5 81            [12] 3641 	mov	sp,a
                                   3642 ;	calc.c:224: break;
      001202 02r18r5A         [24] 3643 	ljmp	00188$
                                   3644 ;	calc.c:225: case '%':
      001205                       3645 00152$:
                                   3646 ;	calc.c:226: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      001205 E5*00            [12] 3647 	mov	a,_bp
      001207 24 07            [12] 3648 	add	a,#0x07
      001209 FF               [12] 3649 	mov	r7,a
      00120A 7E 00            [12] 3650 	mov	r6,#0x00
      00120C 7D 40            [12] 3651 	mov	r5,#0x40
      00120E E5*00            [12] 3652 	mov	a,_bp
      001210 24 04            [12] 3653 	add	a,#0x04
      001212 F8               [12] 3654 	mov	r0,a
      001213 74 09            [12] 3655 	mov	a,#0x09
      001215 26               [12] 3656 	add	a,@r0
      001216 FA               [12] 3657 	mov	r2,a
      001217 E4               [12] 3658 	clr	a
      001218 08               [12] 3659 	inc	r0
      001219 36               [12] 3660 	addc	a,@r0
      00121A FB               [12] 3661 	mov	r3,a
      00121B 08               [12] 3662 	inc	r0
      00121C 86 04            [24] 3663 	mov	ar4,@r0
      00121E C0 07            [24] 3664 	push	ar7
      001220 C0 06            [24] 3665 	push	ar6
      001222 C0 05            [24] 3666 	push	ar5
      001224 8A 82            [24] 3667 	mov	dpl,r2
      001226 8B 83            [24] 3668 	mov	dph,r3
      001228 8C F0            [24] 3669 	mov	b,r4
      00122A 12r00r00         [24] 3670 	lcall	_stack_pop
      00122D AE 82            [24] 3671 	mov	r6,dpl
      00122F AF 83            [24] 3672 	mov	r7,dph
      001231 15 81            [12] 3673 	dec	sp
      001233 15 81            [12] 3674 	dec	sp
      001235 15 81            [12] 3675 	dec	sp
      001237 EE               [12] 3676 	mov	a,r6
      001238 4F               [12] 3677 	orl	a,r7
      001239 70 25            [24] 3678 	jnz	00160$
      00123B 7Dr38            [12] 3679 	mov	r5,#___str_8
      00123D 7Es00            [12] 3680 	mov	r6,#(___str_8 >> 8)
      00123F 7F 80            [12] 3681 	mov	r7,#0x80
                                   3682 ;	calc.c:50: return;
      001241                       3683 00328$:
                                   3684 ;	calc.c:48: for (; *s; s++) putchar(*s);
      001241 8D 82            [24] 3685 	mov	dpl,r5
      001243 8E 83            [24] 3686 	mov	dph,r6
      001245 8F F0            [24] 3687 	mov	b,r7
      001247 12r00r00         [24] 3688 	lcall	__gptrget
      00124A FC               [12] 3689 	mov	r4,a
      00124B 70 03            [24] 3690 	jnz	00909$
      00124D 02r18r5A         [24] 3691 	ljmp	00188$
      001250                       3692 00909$:
      001250 7B 00            [12] 3693 	mov	r3,#0x00
      001252 8C 82            [24] 3694 	mov	dpl,r4
      001254 8B 83            [24] 3695 	mov	dph,r3
      001256 12r00r00         [24] 3696 	lcall	_putchar
      001259 0D               [12] 3697 	inc	r5
                                   3698 ;	calc.c:226: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      00125A BD 00 E4         [24] 3699 	cjne	r5,#0x00,00328$
      00125D 0E               [12] 3700 	inc	r6
      00125E 80 E1            [24] 3701 	sjmp	00328$
      001260                       3702 00160$:
                                   3703 ;	calc.c:227: else if (!stack_pop(&ctx->s, &d1)) {
      001260 E5*00            [12] 3704 	mov	a,_bp
      001262 24 0B            [12] 3705 	add	a,#0x0b
      001264 FF               [12] 3706 	mov	r7,a
      001265 7E 00            [12] 3707 	mov	r6,#0x00
      001267 7D 40            [12] 3708 	mov	r5,#0x40
      001269 E5*00            [12] 3709 	mov	a,_bp
      00126B 24 04            [12] 3710 	add	a,#0x04
      00126D F8               [12] 3711 	mov	r0,a
      00126E 74 09            [12] 3712 	mov	a,#0x09
      001270 26               [12] 3713 	add	a,@r0
      001271 FA               [12] 3714 	mov	r2,a
      001272 E4               [12] 3715 	clr	a
      001273 08               [12] 3716 	inc	r0
      001274 36               [12] 3717 	addc	a,@r0
      001275 FB               [12] 3718 	mov	r3,a
      001276 08               [12] 3719 	inc	r0
      001277 86 04            [24] 3720 	mov	ar4,@r0
      001279 C0 07            [24] 3721 	push	ar7
      00127B C0 06            [24] 3722 	push	ar6
      00127D C0 05            [24] 3723 	push	ar5
      00127F 8A 82            [24] 3724 	mov	dpl,r2
      001281 8B 83            [24] 3725 	mov	dph,r3
      001283 8C F0            [24] 3726 	mov	b,r4
      001285 12r00r00         [24] 3727 	lcall	_stack_pop
      001288 AE 82            [24] 3728 	mov	r6,dpl
      00128A AF 83            [24] 3729 	mov	r7,dph
      00128C 15 81            [12] 3730 	dec	sp
      00128E 15 81            [12] 3731 	dec	sp
      001290 15 81            [12] 3732 	dec	sp
      001292 EE               [12] 3733 	mov	a,r6
      001293 4F               [12] 3734 	orl	a,r7
      001294 70 58            [24] 3735 	jnz	00157$
                                   3736 ;	calc.c:228: (void)stack_push(&ctx->s, d0);
      001296 E5*00            [12] 3737 	mov	a,_bp
      001298 24 04            [12] 3738 	add	a,#0x04
      00129A F8               [12] 3739 	mov	r0,a
      00129B 74 09            [12] 3740 	mov	a,#0x09
      00129D 26               [12] 3741 	add	a,@r0
      00129E FD               [12] 3742 	mov	r5,a
      00129F E4               [12] 3743 	clr	a
      0012A0 08               [12] 3744 	inc	r0
      0012A1 36               [12] 3745 	addc	a,@r0
      0012A2 FE               [12] 3746 	mov	r6,a
      0012A3 08               [12] 3747 	inc	r0
      0012A4 86 07            [24] 3748 	mov	ar7,@r0
      0012A6 E5*00            [12] 3749 	mov	a,_bp
      0012A8 24 07            [12] 3750 	add	a,#0x07
      0012AA F8               [12] 3751 	mov	r0,a
      0012AB E6               [12] 3752 	mov	a,@r0
      0012AC C0 E0            [24] 3753 	push	acc
      0012AE 08               [12] 3754 	inc	r0
      0012AF E6               [12] 3755 	mov	a,@r0
      0012B0 C0 E0            [24] 3756 	push	acc
      0012B2 08               [12] 3757 	inc	r0
      0012B3 E6               [12] 3758 	mov	a,@r0
      0012B4 C0 E0            [24] 3759 	push	acc
      0012B6 08               [12] 3760 	inc	r0
      0012B7 E6               [12] 3761 	mov	a,@r0
      0012B8 C0 E0            [24] 3762 	push	acc
      0012BA 8D 82            [24] 3763 	mov	dpl,r5
      0012BC 8E 83            [24] 3764 	mov	dph,r6
      0012BE 8F F0            [24] 3765 	mov	b,r7
      0012C0 12r00r00         [24] 3766 	lcall	_stack_push
      0012C3 E5 81            [12] 3767 	mov	a,sp
      0012C5 24 FC            [12] 3768 	add	a,#0xfc
      0012C7 F5 81            [12] 3769 	mov	sp,a
                                   3770 ;	calc.c:229: printstr("\r\nstack underflow\r\n");
      0012C9 7Dr38            [12] 3771 	mov	r5,#___str_8
      0012CB 7Es00            [12] 3772 	mov	r6,#(___str_8 >> 8)
      0012CD 7F 80            [12] 3773 	mov	r7,#0x80
                                   3774 ;	calc.c:50: return;
      0012CF                       3775 00331$:
                                   3776 ;	calc.c:48: for (; *s; s++) putchar(*s);
      0012CF 8D 82            [24] 3777 	mov	dpl,r5
      0012D1 8E 83            [24] 3778 	mov	dph,r6
      0012D3 8F F0            [24] 3779 	mov	b,r7
      0012D5 12r00r00         [24] 3780 	lcall	__gptrget
      0012D8 FC               [12] 3781 	mov	r4,a
      0012D9 70 03            [24] 3782 	jnz	00912$
      0012DB 02r18r5A         [24] 3783 	ljmp	00188$
      0012DE                       3784 00912$:
      0012DE 7B 00            [12] 3785 	mov	r3,#0x00
      0012E0 8C 82            [24] 3786 	mov	dpl,r4
      0012E2 8B 83            [24] 3787 	mov	dph,r3
      0012E4 12r00r00         [24] 3788 	lcall	_putchar
      0012E7 0D               [12] 3789 	inc	r5
                                   3790 ;	calc.c:229: printstr("\r\nstack underflow\r\n");
      0012E8 BD 00 E4         [24] 3791 	cjne	r5,#0x00,00331$
      0012EB 0E               [12] 3792 	inc	r6
      0012EC 80 E1            [24] 3793 	sjmp	00331$
      0012EE                       3794 00157$:
                                   3795 ;	calc.c:230: } else if (!d0) {
      0012EE E5*00            [12] 3796 	mov	a,_bp
      0012F0 24 07            [12] 3797 	add	a,#0x07
      0012F2 F8               [12] 3798 	mov	r0,a
      0012F3 E6               [12] 3799 	mov	a,@r0
      0012F4 08               [12] 3800 	inc	r0
      0012F5 46               [12] 3801 	orl	a,@r0
      0012F6 08               [12] 3802 	inc	r0
      0012F7 46               [12] 3803 	orl	a,@r0
      0012F8 08               [12] 3804 	inc	r0
      0012F9 46               [12] 3805 	orl	a,@r0
      0012FA 60 03            [24] 3806 	jz	00914$
      0012FC 02r13r8A         [24] 3807 	ljmp	00154$
      0012FF                       3808 00914$:
                                   3809 ;	calc.c:231: (void)stack_push(&ctx->s, d1);
      0012FF E5*00            [12] 3810 	mov	a,_bp
      001301 24 04            [12] 3811 	add	a,#0x04
      001303 F8               [12] 3812 	mov	r0,a
      001304 74 09            [12] 3813 	mov	a,#0x09
      001306 26               [12] 3814 	add	a,@r0
      001307 FD               [12] 3815 	mov	r5,a
      001308 E4               [12] 3816 	clr	a
      001309 08               [12] 3817 	inc	r0
      00130A 36               [12] 3818 	addc	a,@r0
      00130B FE               [12] 3819 	mov	r6,a
      00130C 08               [12] 3820 	inc	r0
      00130D 86 07            [24] 3821 	mov	ar7,@r0
      00130F E5*00            [12] 3822 	mov	a,_bp
      001311 24 0B            [12] 3823 	add	a,#0x0b
      001313 F8               [12] 3824 	mov	r0,a
      001314 E6               [12] 3825 	mov	a,@r0
      001315 C0 E0            [24] 3826 	push	acc
      001317 08               [12] 3827 	inc	r0
      001318 E6               [12] 3828 	mov	a,@r0
      001319 C0 E0            [24] 3829 	push	acc
      00131B 08               [12] 3830 	inc	r0
      00131C E6               [12] 3831 	mov	a,@r0
      00131D C0 E0            [24] 3832 	push	acc
      00131F 08               [12] 3833 	inc	r0
      001320 E6               [12] 3834 	mov	a,@r0
      001321 C0 E0            [24] 3835 	push	acc
      001323 8D 82            [24] 3836 	mov	dpl,r5
      001325 8E 83            [24] 3837 	mov	dph,r6
      001327 8F F0            [24] 3838 	mov	b,r7
      001329 12r00r00         [24] 3839 	lcall	_stack_push
      00132C E5 81            [12] 3840 	mov	a,sp
      00132E 24 FC            [12] 3841 	add	a,#0xfc
      001330 F5 81            [12] 3842 	mov	sp,a
                                   3843 ;	calc.c:232: (void)stack_push(&ctx->s, d0);			
      001332 E5*00            [12] 3844 	mov	a,_bp
      001334 24 04            [12] 3845 	add	a,#0x04
      001336 F8               [12] 3846 	mov	r0,a
      001337 74 09            [12] 3847 	mov	a,#0x09
      001339 26               [12] 3848 	add	a,@r0
      00133A FD               [12] 3849 	mov	r5,a
      00133B E4               [12] 3850 	clr	a
      00133C 08               [12] 3851 	inc	r0
      00133D 36               [12] 3852 	addc	a,@r0
      00133E FE               [12] 3853 	mov	r6,a
      00133F 08               [12] 3854 	inc	r0
      001340 86 07            [24] 3855 	mov	ar7,@r0
      001342 E5*00            [12] 3856 	mov	a,_bp
      001344 24 07            [12] 3857 	add	a,#0x07
      001346 F8               [12] 3858 	mov	r0,a
      001347 E6               [12] 3859 	mov	a,@r0
      001348 C0 E0            [24] 3860 	push	acc
      00134A 08               [12] 3861 	inc	r0
      00134B E6               [12] 3862 	mov	a,@r0
      00134C C0 E0            [24] 3863 	push	acc
      00134E 08               [12] 3864 	inc	r0
      00134F E6               [12] 3865 	mov	a,@r0
      001350 C0 E0            [24] 3866 	push	acc
      001352 08               [12] 3867 	inc	r0
      001353 E6               [12] 3868 	mov	a,@r0
      001354 C0 E0            [24] 3869 	push	acc
      001356 8D 82            [24] 3870 	mov	dpl,r5
      001358 8E 83            [24] 3871 	mov	dph,r6
      00135A 8F F0            [24] 3872 	mov	b,r7
      00135C 12r00r00         [24] 3873 	lcall	_stack_push
      00135F E5 81            [12] 3874 	mov	a,sp
      001361 24 FC            [12] 3875 	add	a,#0xfc
      001363 F5 81            [12] 3876 	mov	sp,a
                                   3877 ;	calc.c:233: printstr("\r\ndivision by zero\r\n");
      001365 7Dr4C            [12] 3878 	mov	r5,#___str_9
      001367 7Es00            [12] 3879 	mov	r6,#(___str_9 >> 8)
      001369 7F 80            [12] 3880 	mov	r7,#0x80
                                   3881 ;	calc.c:50: return;
      00136B                       3882 00334$:
                                   3883 ;	calc.c:48: for (; *s; s++) putchar(*s);
      00136B 8D 82            [24] 3884 	mov	dpl,r5
      00136D 8E 83            [24] 3885 	mov	dph,r6
      00136F 8F F0            [24] 3886 	mov	b,r7
      001371 12r00r00         [24] 3887 	lcall	__gptrget
      001374 FC               [12] 3888 	mov	r4,a
      001375 70 03            [24] 3889 	jnz	00915$
      001377 02r18r5A         [24] 3890 	ljmp	00188$
      00137A                       3891 00915$:
      00137A 7B 00            [12] 3892 	mov	r3,#0x00
      00137C 8C 82            [24] 3893 	mov	dpl,r4
      00137E 8B 83            [24] 3894 	mov	dph,r3
      001380 12r00r00         [24] 3895 	lcall	_putchar
      001383 0D               [12] 3896 	inc	r5
                                   3897 ;	calc.c:233: printstr("\r\ndivision by zero\r\n");
      001384 BD 00 E4         [24] 3898 	cjne	r5,#0x00,00334$
      001387 0E               [12] 3899 	inc	r6
      001388 80 E1            [24] 3900 	sjmp	00334$
      00138A                       3901 00154$:
                                   3902 ;	calc.c:235: d1 %= d0;
      00138A E5*00            [12] 3903 	mov	a,_bp
      00138C 24 07            [12] 3904 	add	a,#0x07
      00138E F8               [12] 3905 	mov	r0,a
      00138F E6               [12] 3906 	mov	a,@r0
      001390 C0 E0            [24] 3907 	push	acc
      001392 08               [12] 3908 	inc	r0
      001393 E6               [12] 3909 	mov	a,@r0
      001394 C0 E0            [24] 3910 	push	acc
      001396 08               [12] 3911 	inc	r0
      001397 E6               [12] 3912 	mov	a,@r0
      001398 C0 E0            [24] 3913 	push	acc
      00139A 08               [12] 3914 	inc	r0
      00139B E6               [12] 3915 	mov	a,@r0
      00139C C0 E0            [24] 3916 	push	acc
      00139E E5*00            [12] 3917 	mov	a,_bp
      0013A0 24 0B            [12] 3918 	add	a,#0x0b
      0013A2 F8               [12] 3919 	mov	r0,a
      0013A3 86 82            [24] 3920 	mov	dpl,@r0
      0013A5 08               [12] 3921 	inc	r0
      0013A6 86 83            [24] 3922 	mov	dph,@r0
      0013A8 08               [12] 3923 	inc	r0
      0013A9 86 F0            [24] 3924 	mov	b,@r0
      0013AB 08               [12] 3925 	inc	r0
      0013AC E6               [12] 3926 	mov	a,@r0
      0013AD 12r00r00         [24] 3927 	lcall	__modslong
      0013B0 AC 82            [24] 3928 	mov	r4,dpl
      0013B2 AD 83            [24] 3929 	mov	r5,dph
      0013B4 AE F0            [24] 3930 	mov	r6,b
      0013B6 FF               [12] 3931 	mov	r7,a
      0013B7 E5 81            [12] 3932 	mov	a,sp
      0013B9 24 FC            [12] 3933 	add	a,#0xfc
      0013BB F5 81            [12] 3934 	mov	sp,a
      0013BD E5*00            [12] 3935 	mov	a,_bp
      0013BF 24 0B            [12] 3936 	add	a,#0x0b
      0013C1 F8               [12] 3937 	mov	r0,a
      0013C2 A6 04            [24] 3938 	mov	@r0,ar4
      0013C4 08               [12] 3939 	inc	r0
      0013C5 A6 05            [24] 3940 	mov	@r0,ar5
      0013C7 08               [12] 3941 	inc	r0
      0013C8 A6 06            [24] 3942 	mov	@r0,ar6
      0013CA 08               [12] 3943 	inc	r0
      0013CB A6 07            [24] 3944 	mov	@r0,ar7
                                   3945 ;	calc.c:236: (void)stack_push(&ctx->s, d1);
      0013CD E5*00            [12] 3946 	mov	a,_bp
      0013CF 24 04            [12] 3947 	add	a,#0x04
      0013D1 F8               [12] 3948 	mov	r0,a
      0013D2 74 09            [12] 3949 	mov	a,#0x09
      0013D4 26               [12] 3950 	add	a,@r0
      0013D5 FD               [12] 3951 	mov	r5,a
      0013D6 E4               [12] 3952 	clr	a
      0013D7 08               [12] 3953 	inc	r0
      0013D8 36               [12] 3954 	addc	a,@r0
      0013D9 FE               [12] 3955 	mov	r6,a
      0013DA 08               [12] 3956 	inc	r0
      0013DB 86 07            [24] 3957 	mov	ar7,@r0
      0013DD E5*00            [12] 3958 	mov	a,_bp
      0013DF 24 0B            [12] 3959 	add	a,#0x0b
      0013E1 F8               [12] 3960 	mov	r0,a
      0013E2 E6               [12] 3961 	mov	a,@r0
      0013E3 C0 E0            [24] 3962 	push	acc
      0013E5 08               [12] 3963 	inc	r0
      0013E6 E6               [12] 3964 	mov	a,@r0
      0013E7 C0 E0            [24] 3965 	push	acc
      0013E9 08               [12] 3966 	inc	r0
      0013EA E6               [12] 3967 	mov	a,@r0
      0013EB C0 E0            [24] 3968 	push	acc
      0013ED 08               [12] 3969 	inc	r0
      0013EE E6               [12] 3970 	mov	a,@r0
      0013EF C0 E0            [24] 3971 	push	acc
      0013F1 8D 82            [24] 3972 	mov	dpl,r5
      0013F3 8E 83            [24] 3973 	mov	dph,r6
      0013F5 8F F0            [24] 3974 	mov	b,r7
      0013F7 12r00r00         [24] 3975 	lcall	_stack_push
      0013FA E5 81            [12] 3976 	mov	a,sp
      0013FC 24 FC            [12] 3977 	add	a,#0xfc
      0013FE F5 81            [12] 3978 	mov	sp,a
                                   3979 ;	calc.c:238: break;
      001400 02r18r5A         [24] 3980 	ljmp	00188$
                                   3981 ;	calc.c:239: case '&':
      001403                       3982 00162$:
                                   3983 ;	calc.c:240: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      001403 E5*00            [12] 3984 	mov	a,_bp
      001405 24 07            [12] 3985 	add	a,#0x07
      001407 FF               [12] 3986 	mov	r7,a
      001408 7E 00            [12] 3987 	mov	r6,#0x00
      00140A 7D 40            [12] 3988 	mov	r5,#0x40
      00140C E5*00            [12] 3989 	mov	a,_bp
      00140E 24 04            [12] 3990 	add	a,#0x04
      001410 F8               [12] 3991 	mov	r0,a
      001411 74 09            [12] 3992 	mov	a,#0x09
      001413 26               [12] 3993 	add	a,@r0
      001414 FA               [12] 3994 	mov	r2,a
      001415 E4               [12] 3995 	clr	a
      001416 08               [12] 3996 	inc	r0
      001417 36               [12] 3997 	addc	a,@r0
      001418 FB               [12] 3998 	mov	r3,a
      001419 08               [12] 3999 	inc	r0
      00141A 86 04            [24] 4000 	mov	ar4,@r0
      00141C C0 07            [24] 4001 	push	ar7
      00141E C0 06            [24] 4002 	push	ar6
      001420 C0 05            [24] 4003 	push	ar5
      001422 8A 82            [24] 4004 	mov	dpl,r2
      001424 8B 83            [24] 4005 	mov	dph,r3
      001426 8C F0            [24] 4006 	mov	b,r4
      001428 12r00r00         [24] 4007 	lcall	_stack_pop
      00142B AE 82            [24] 4008 	mov	r6,dpl
      00142D AF 83            [24] 4009 	mov	r7,dph
      00142F 15 81            [12] 4010 	dec	sp
      001431 15 81            [12] 4011 	dec	sp
      001433 15 81            [12] 4012 	dec	sp
      001435 EE               [12] 4013 	mov	a,r6
      001436 4F               [12] 4014 	orl	a,r7
      001437 70 25            [24] 4015 	jnz	00167$
      001439 7Dr38            [12] 4016 	mov	r5,#___str_8
      00143B 7Es00            [12] 4017 	mov	r6,#(___str_8 >> 8)
      00143D 7F 80            [12] 4018 	mov	r7,#0x80
                                   4019 ;	calc.c:50: return;
      00143F                       4020 00337$:
                                   4021 ;	calc.c:48: for (; *s; s++) putchar(*s);
      00143F 8D 82            [24] 4022 	mov	dpl,r5
      001441 8E 83            [24] 4023 	mov	dph,r6
      001443 8F F0            [24] 4024 	mov	b,r7
      001445 12r00r00         [24] 4025 	lcall	__gptrget
      001448 FC               [12] 4026 	mov	r4,a
      001449 70 03            [24] 4027 	jnz	00918$
      00144B 02r18r5A         [24] 4028 	ljmp	00188$
      00144E                       4029 00918$:
      00144E 7B 00            [12] 4030 	mov	r3,#0x00
      001450 8C 82            [24] 4031 	mov	dpl,r4
      001452 8B 83            [24] 4032 	mov	dph,r3
      001454 12r00r00         [24] 4033 	lcall	_putchar
      001457 0D               [12] 4034 	inc	r5
                                   4035 ;	calc.c:240: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      001458 BD 00 E4         [24] 4036 	cjne	r5,#0x00,00337$
      00145B 0E               [12] 4037 	inc	r6
      00145C 80 E1            [24] 4038 	sjmp	00337$
      00145E                       4039 00167$:
                                   4040 ;	calc.c:241: else if (!stack_pop(&ctx->s, &d1)) {
      00145E E5*00            [12] 4041 	mov	a,_bp
      001460 24 0B            [12] 4042 	add	a,#0x0b
      001462 FF               [12] 4043 	mov	r7,a
      001463 7E 00            [12] 4044 	mov	r6,#0x00
      001465 7D 40            [12] 4045 	mov	r5,#0x40
      001467 E5*00            [12] 4046 	mov	a,_bp
      001469 24 04            [12] 4047 	add	a,#0x04
      00146B F8               [12] 4048 	mov	r0,a
      00146C 74 09            [12] 4049 	mov	a,#0x09
      00146E 26               [12] 4050 	add	a,@r0
      00146F FA               [12] 4051 	mov	r2,a
      001470 E4               [12] 4052 	clr	a
      001471 08               [12] 4053 	inc	r0
      001472 36               [12] 4054 	addc	a,@r0
      001473 FB               [12] 4055 	mov	r3,a
      001474 08               [12] 4056 	inc	r0
      001475 86 04            [24] 4057 	mov	ar4,@r0
      001477 C0 07            [24] 4058 	push	ar7
      001479 C0 06            [24] 4059 	push	ar6
      00147B C0 05            [24] 4060 	push	ar5
      00147D 8A 82            [24] 4061 	mov	dpl,r2
      00147F 8B 83            [24] 4062 	mov	dph,r3
      001481 8C F0            [24] 4063 	mov	b,r4
      001483 12r00r00         [24] 4064 	lcall	_stack_pop
      001486 AE 82            [24] 4065 	mov	r6,dpl
      001488 AF 83            [24] 4066 	mov	r7,dph
      00148A 15 81            [12] 4067 	dec	sp
      00148C 15 81            [12] 4068 	dec	sp
      00148E 15 81            [12] 4069 	dec	sp
      001490 EE               [12] 4070 	mov	a,r6
      001491 4F               [12] 4071 	orl	a,r7
      001492 70 58            [24] 4072 	jnz	00164$
                                   4073 ;	calc.c:242: (void)stack_push(&ctx->s, d0);
      001494 E5*00            [12] 4074 	mov	a,_bp
      001496 24 04            [12] 4075 	add	a,#0x04
      001498 F8               [12] 4076 	mov	r0,a
      001499 74 09            [12] 4077 	mov	a,#0x09
      00149B 26               [12] 4078 	add	a,@r0
      00149C FD               [12] 4079 	mov	r5,a
      00149D E4               [12] 4080 	clr	a
      00149E 08               [12] 4081 	inc	r0
      00149F 36               [12] 4082 	addc	a,@r0
      0014A0 FE               [12] 4083 	mov	r6,a
      0014A1 08               [12] 4084 	inc	r0
      0014A2 86 07            [24] 4085 	mov	ar7,@r0
      0014A4 E5*00            [12] 4086 	mov	a,_bp
      0014A6 24 07            [12] 4087 	add	a,#0x07
      0014A8 F8               [12] 4088 	mov	r0,a
      0014A9 E6               [12] 4089 	mov	a,@r0
      0014AA C0 E0            [24] 4090 	push	acc
      0014AC 08               [12] 4091 	inc	r0
      0014AD E6               [12] 4092 	mov	a,@r0
      0014AE C0 E0            [24] 4093 	push	acc
      0014B0 08               [12] 4094 	inc	r0
      0014B1 E6               [12] 4095 	mov	a,@r0
      0014B2 C0 E0            [24] 4096 	push	acc
      0014B4 08               [12] 4097 	inc	r0
      0014B5 E6               [12] 4098 	mov	a,@r0
      0014B6 C0 E0            [24] 4099 	push	acc
      0014B8 8D 82            [24] 4100 	mov	dpl,r5
      0014BA 8E 83            [24] 4101 	mov	dph,r6
      0014BC 8F F0            [24] 4102 	mov	b,r7
      0014BE 12r00r00         [24] 4103 	lcall	_stack_push
      0014C1 E5 81            [12] 4104 	mov	a,sp
      0014C3 24 FC            [12] 4105 	add	a,#0xfc
      0014C5 F5 81            [12] 4106 	mov	sp,a
                                   4107 ;	calc.c:243: printstr("\r\nstack underflow\r\n");
      0014C7 7Dr38            [12] 4108 	mov	r5,#___str_8
      0014C9 7Es00            [12] 4109 	mov	r6,#(___str_8 >> 8)
      0014CB 7F 80            [12] 4110 	mov	r7,#0x80
                                   4111 ;	calc.c:50: return;
      0014CD                       4112 00340$:
                                   4113 ;	calc.c:48: for (; *s; s++) putchar(*s);
      0014CD 8D 82            [24] 4114 	mov	dpl,r5
      0014CF 8E 83            [24] 4115 	mov	dph,r6
      0014D1 8F F0            [24] 4116 	mov	b,r7
      0014D3 12r00r00         [24] 4117 	lcall	__gptrget
      0014D6 FC               [12] 4118 	mov	r4,a
      0014D7 70 03            [24] 4119 	jnz	00921$
      0014D9 02r18r5A         [24] 4120 	ljmp	00188$
      0014DC                       4121 00921$:
      0014DC 7B 00            [12] 4122 	mov	r3,#0x00
      0014DE 8C 82            [24] 4123 	mov	dpl,r4
      0014E0 8B 83            [24] 4124 	mov	dph,r3
      0014E2 12r00r00         [24] 4125 	lcall	_putchar
      0014E5 0D               [12] 4126 	inc	r5
                                   4127 ;	calc.c:243: printstr("\r\nstack underflow\r\n");
      0014E6 BD 00 E4         [24] 4128 	cjne	r5,#0x00,00340$
      0014E9 0E               [12] 4129 	inc	r6
      0014EA 80 E1            [24] 4130 	sjmp	00340$
      0014EC                       4131 00164$:
                                   4132 ;	calc.c:245: d1 &= d0;
      0014EC E5*00            [12] 4133 	mov	a,_bp
      0014EE 24 0B            [12] 4134 	add	a,#0x0b
      0014F0 F8               [12] 4135 	mov	r0,a
      0014F1 E5*00            [12] 4136 	mov	a,_bp
      0014F3 24 07            [12] 4137 	add	a,#0x07
      0014F5 F9               [12] 4138 	mov	r1,a
      0014F6 E7               [12] 4139 	mov	a,@r1
      0014F7 56               [12] 4140 	anl	a,@r0
      0014F8 F6               [12] 4141 	mov	@r0,a
      0014F9 09               [12] 4142 	inc	r1
      0014FA E7               [12] 4143 	mov	a,@r1
      0014FB 08               [12] 4144 	inc	r0
      0014FC 56               [12] 4145 	anl	a,@r0
      0014FD F6               [12] 4146 	mov	@r0,a
      0014FE 09               [12] 4147 	inc	r1
      0014FF E7               [12] 4148 	mov	a,@r1
      001500 08               [12] 4149 	inc	r0
      001501 56               [12] 4150 	anl	a,@r0
      001502 F6               [12] 4151 	mov	@r0,a
      001503 09               [12] 4152 	inc	r1
      001504 E7               [12] 4153 	mov	a,@r1
      001505 08               [12] 4154 	inc	r0
      001506 56               [12] 4155 	anl	a,@r0
      001507 F6               [12] 4156 	mov	@r0,a
                                   4157 ;	calc.c:246: (void)stack_push(&ctx->s, d1);
      001508 E5*00            [12] 4158 	mov	a,_bp
      00150A 24 04            [12] 4159 	add	a,#0x04
      00150C F8               [12] 4160 	mov	r0,a
      00150D 74 09            [12] 4161 	mov	a,#0x09
      00150F 26               [12] 4162 	add	a,@r0
      001510 FD               [12] 4163 	mov	r5,a
      001511 E4               [12] 4164 	clr	a
      001512 08               [12] 4165 	inc	r0
      001513 36               [12] 4166 	addc	a,@r0
      001514 FE               [12] 4167 	mov	r6,a
      001515 08               [12] 4168 	inc	r0
      001516 86 07            [24] 4169 	mov	ar7,@r0
      001518 E5*00            [12] 4170 	mov	a,_bp
      00151A 24 0B            [12] 4171 	add	a,#0x0b
      00151C F8               [12] 4172 	mov	r0,a
      00151D E6               [12] 4173 	mov	a,@r0
      00151E C0 E0            [24] 4174 	push	acc
      001520 08               [12] 4175 	inc	r0
      001521 E6               [12] 4176 	mov	a,@r0
      001522 C0 E0            [24] 4177 	push	acc
      001524 08               [12] 4178 	inc	r0
      001525 E6               [12] 4179 	mov	a,@r0
      001526 C0 E0            [24] 4180 	push	acc
      001528 08               [12] 4181 	inc	r0
      001529 E6               [12] 4182 	mov	a,@r0
      00152A C0 E0            [24] 4183 	push	acc
      00152C 8D 82            [24] 4184 	mov	dpl,r5
      00152E 8E 83            [24] 4185 	mov	dph,r6
      001530 8F F0            [24] 4186 	mov	b,r7
      001532 12r00r00         [24] 4187 	lcall	_stack_push
      001535 E5 81            [12] 4188 	mov	a,sp
      001537 24 FC            [12] 4189 	add	a,#0xfc
      001539 F5 81            [12] 4190 	mov	sp,a
                                   4191 ;	calc.c:248: break;
      00153B 02r18r5A         [24] 4192 	ljmp	00188$
                                   4193 ;	calc.c:249: case '|':
      00153E                       4194 00169$:
                                   4195 ;	calc.c:250: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      00153E E5*00            [12] 4196 	mov	a,_bp
      001540 24 07            [12] 4197 	add	a,#0x07
      001542 FF               [12] 4198 	mov	r7,a
      001543 7E 00            [12] 4199 	mov	r6,#0x00
      001545 7D 40            [12] 4200 	mov	r5,#0x40
      001547 E5*00            [12] 4201 	mov	a,_bp
      001549 24 04            [12] 4202 	add	a,#0x04
      00154B F8               [12] 4203 	mov	r0,a
      00154C 74 09            [12] 4204 	mov	a,#0x09
      00154E 26               [12] 4205 	add	a,@r0
      00154F FA               [12] 4206 	mov	r2,a
      001550 E4               [12] 4207 	clr	a
      001551 08               [12] 4208 	inc	r0
      001552 36               [12] 4209 	addc	a,@r0
      001553 FB               [12] 4210 	mov	r3,a
      001554 08               [12] 4211 	inc	r0
      001555 86 04            [24] 4212 	mov	ar4,@r0
      001557 C0 07            [24] 4213 	push	ar7
      001559 C0 06            [24] 4214 	push	ar6
      00155B C0 05            [24] 4215 	push	ar5
      00155D 8A 82            [24] 4216 	mov	dpl,r2
      00155F 8B 83            [24] 4217 	mov	dph,r3
      001561 8C F0            [24] 4218 	mov	b,r4
      001563 12r00r00         [24] 4219 	lcall	_stack_pop
      001566 AE 82            [24] 4220 	mov	r6,dpl
      001568 AF 83            [24] 4221 	mov	r7,dph
      00156A 15 81            [12] 4222 	dec	sp
      00156C 15 81            [12] 4223 	dec	sp
      00156E 15 81            [12] 4224 	dec	sp
      001570 EE               [12] 4225 	mov	a,r6
      001571 4F               [12] 4226 	orl	a,r7
      001572 70 25            [24] 4227 	jnz	00174$
      001574 7Dr38            [12] 4228 	mov	r5,#___str_8
      001576 7Es00            [12] 4229 	mov	r6,#(___str_8 >> 8)
      001578 7F 80            [12] 4230 	mov	r7,#0x80
                                   4231 ;	calc.c:50: return;
      00157A                       4232 00343$:
                                   4233 ;	calc.c:48: for (; *s; s++) putchar(*s);
      00157A 8D 82            [24] 4234 	mov	dpl,r5
      00157C 8E 83            [24] 4235 	mov	dph,r6
      00157E 8F F0            [24] 4236 	mov	b,r7
      001580 12r00r00         [24] 4237 	lcall	__gptrget
      001583 FC               [12] 4238 	mov	r4,a
      001584 70 03            [24] 4239 	jnz	00924$
      001586 02r18r5A         [24] 4240 	ljmp	00188$
      001589                       4241 00924$:
      001589 7B 00            [12] 4242 	mov	r3,#0x00
      00158B 8C 82            [24] 4243 	mov	dpl,r4
      00158D 8B 83            [24] 4244 	mov	dph,r3
      00158F 12r00r00         [24] 4245 	lcall	_putchar
      001592 0D               [12] 4246 	inc	r5
                                   4247 ;	calc.c:250: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      001593 BD 00 E4         [24] 4248 	cjne	r5,#0x00,00343$
      001596 0E               [12] 4249 	inc	r6
      001597 80 E1            [24] 4250 	sjmp	00343$
      001599                       4251 00174$:
                                   4252 ;	calc.c:251: else if (!stack_pop(&ctx->s, &d1)) {
      001599 E5*00            [12] 4253 	mov	a,_bp
      00159B 24 0B            [12] 4254 	add	a,#0x0b
      00159D FF               [12] 4255 	mov	r7,a
      00159E 7E 00            [12] 4256 	mov	r6,#0x00
      0015A0 7D 40            [12] 4257 	mov	r5,#0x40
      0015A2 E5*00            [12] 4258 	mov	a,_bp
      0015A4 24 04            [12] 4259 	add	a,#0x04
      0015A6 F8               [12] 4260 	mov	r0,a
      0015A7 74 09            [12] 4261 	mov	a,#0x09
      0015A9 26               [12] 4262 	add	a,@r0
      0015AA FA               [12] 4263 	mov	r2,a
      0015AB E4               [12] 4264 	clr	a
      0015AC 08               [12] 4265 	inc	r0
      0015AD 36               [12] 4266 	addc	a,@r0
      0015AE FB               [12] 4267 	mov	r3,a
      0015AF 08               [12] 4268 	inc	r0
      0015B0 86 04            [24] 4269 	mov	ar4,@r0
      0015B2 C0 07            [24] 4270 	push	ar7
      0015B4 C0 06            [24] 4271 	push	ar6
      0015B6 C0 05            [24] 4272 	push	ar5
      0015B8 8A 82            [24] 4273 	mov	dpl,r2
      0015BA 8B 83            [24] 4274 	mov	dph,r3
      0015BC 8C F0            [24] 4275 	mov	b,r4
      0015BE 12r00r00         [24] 4276 	lcall	_stack_pop
      0015C1 AE 82            [24] 4277 	mov	r6,dpl
      0015C3 AF 83            [24] 4278 	mov	r7,dph
      0015C5 15 81            [12] 4279 	dec	sp
      0015C7 15 81            [12] 4280 	dec	sp
      0015C9 15 81            [12] 4281 	dec	sp
      0015CB EE               [12] 4282 	mov	a,r6
      0015CC 4F               [12] 4283 	orl	a,r7
      0015CD 70 58            [24] 4284 	jnz	00171$
                                   4285 ;	calc.c:252: (void)stack_push(&ctx->s, d0);
      0015CF E5*00            [12] 4286 	mov	a,_bp
      0015D1 24 04            [12] 4287 	add	a,#0x04
      0015D3 F8               [12] 4288 	mov	r0,a
      0015D4 74 09            [12] 4289 	mov	a,#0x09
      0015D6 26               [12] 4290 	add	a,@r0
      0015D7 FD               [12] 4291 	mov	r5,a
      0015D8 E4               [12] 4292 	clr	a
      0015D9 08               [12] 4293 	inc	r0
      0015DA 36               [12] 4294 	addc	a,@r0
      0015DB FE               [12] 4295 	mov	r6,a
      0015DC 08               [12] 4296 	inc	r0
      0015DD 86 07            [24] 4297 	mov	ar7,@r0
      0015DF E5*00            [12] 4298 	mov	a,_bp
      0015E1 24 07            [12] 4299 	add	a,#0x07
      0015E3 F8               [12] 4300 	mov	r0,a
      0015E4 E6               [12] 4301 	mov	a,@r0
      0015E5 C0 E0            [24] 4302 	push	acc
      0015E7 08               [12] 4303 	inc	r0
      0015E8 E6               [12] 4304 	mov	a,@r0
      0015E9 C0 E0            [24] 4305 	push	acc
      0015EB 08               [12] 4306 	inc	r0
      0015EC E6               [12] 4307 	mov	a,@r0
      0015ED C0 E0            [24] 4308 	push	acc
      0015EF 08               [12] 4309 	inc	r0
      0015F0 E6               [12] 4310 	mov	a,@r0
      0015F1 C0 E0            [24] 4311 	push	acc
      0015F3 8D 82            [24] 4312 	mov	dpl,r5
      0015F5 8E 83            [24] 4313 	mov	dph,r6
      0015F7 8F F0            [24] 4314 	mov	b,r7
      0015F9 12r00r00         [24] 4315 	lcall	_stack_push
      0015FC E5 81            [12] 4316 	mov	a,sp
      0015FE 24 FC            [12] 4317 	add	a,#0xfc
      001600 F5 81            [12] 4318 	mov	sp,a
                                   4319 ;	calc.c:253: printstr("\r\nstack underflow\r\n");
      001602 7Dr38            [12] 4320 	mov	r5,#___str_8
      001604 7Es00            [12] 4321 	mov	r6,#(___str_8 >> 8)
      001606 7F 80            [12] 4322 	mov	r7,#0x80
                                   4323 ;	calc.c:50: return;
      001608                       4324 00346$:
                                   4325 ;	calc.c:48: for (; *s; s++) putchar(*s);
      001608 8D 82            [24] 4326 	mov	dpl,r5
      00160A 8E 83            [24] 4327 	mov	dph,r6
      00160C 8F F0            [24] 4328 	mov	b,r7
      00160E 12r00r00         [24] 4329 	lcall	__gptrget
      001611 FC               [12] 4330 	mov	r4,a
      001612 70 03            [24] 4331 	jnz	00927$
      001614 02r18r5A         [24] 4332 	ljmp	00188$
      001617                       4333 00927$:
      001617 7B 00            [12] 4334 	mov	r3,#0x00
      001619 8C 82            [24] 4335 	mov	dpl,r4
      00161B 8B 83            [24] 4336 	mov	dph,r3
      00161D 12r00r00         [24] 4337 	lcall	_putchar
      001620 0D               [12] 4338 	inc	r5
                                   4339 ;	calc.c:253: printstr("\r\nstack underflow\r\n");
      001621 BD 00 E4         [24] 4340 	cjne	r5,#0x00,00346$
      001624 0E               [12] 4341 	inc	r6
      001625 80 E1            [24] 4342 	sjmp	00346$
      001627                       4343 00171$:
                                   4344 ;	calc.c:255: d1 |= d0;
      001627 E5*00            [12] 4345 	mov	a,_bp
      001629 24 0B            [12] 4346 	add	a,#0x0b
      00162B F8               [12] 4347 	mov	r0,a
      00162C E5*00            [12] 4348 	mov	a,_bp
      00162E 24 07            [12] 4349 	add	a,#0x07
      001630 F9               [12] 4350 	mov	r1,a
      001631 E7               [12] 4351 	mov	a,@r1
      001632 46               [12] 4352 	orl	a,@r0
      001633 F6               [12] 4353 	mov	@r0,a
      001634 09               [12] 4354 	inc	r1
      001635 E7               [12] 4355 	mov	a,@r1
      001636 08               [12] 4356 	inc	r0
      001637 46               [12] 4357 	orl	a,@r0
      001638 F6               [12] 4358 	mov	@r0,a
      001639 09               [12] 4359 	inc	r1
      00163A E7               [12] 4360 	mov	a,@r1
      00163B 08               [12] 4361 	inc	r0
      00163C 46               [12] 4362 	orl	a,@r0
      00163D F6               [12] 4363 	mov	@r0,a
      00163E 09               [12] 4364 	inc	r1
      00163F E7               [12] 4365 	mov	a,@r1
      001640 08               [12] 4366 	inc	r0
      001641 46               [12] 4367 	orl	a,@r0
      001642 F6               [12] 4368 	mov	@r0,a
                                   4369 ;	calc.c:256: (void)stack_push(&ctx->s, d1);
      001643 E5*00            [12] 4370 	mov	a,_bp
      001645 24 04            [12] 4371 	add	a,#0x04
      001647 F8               [12] 4372 	mov	r0,a
      001648 74 09            [12] 4373 	mov	a,#0x09
      00164A 26               [12] 4374 	add	a,@r0
      00164B FD               [12] 4375 	mov	r5,a
      00164C E4               [12] 4376 	clr	a
      00164D 08               [12] 4377 	inc	r0
      00164E 36               [12] 4378 	addc	a,@r0
      00164F FE               [12] 4379 	mov	r6,a
      001650 08               [12] 4380 	inc	r0
      001651 86 07            [24] 4381 	mov	ar7,@r0
      001653 E5*00            [12] 4382 	mov	a,_bp
      001655 24 0B            [12] 4383 	add	a,#0x0b
      001657 F8               [12] 4384 	mov	r0,a
      001658 E6               [12] 4385 	mov	a,@r0
      001659 C0 E0            [24] 4386 	push	acc
      00165B 08               [12] 4387 	inc	r0
      00165C E6               [12] 4388 	mov	a,@r0
      00165D C0 E0            [24] 4389 	push	acc
      00165F 08               [12] 4390 	inc	r0
      001660 E6               [12] 4391 	mov	a,@r0
      001661 C0 E0            [24] 4392 	push	acc
      001663 08               [12] 4393 	inc	r0
      001664 E6               [12] 4394 	mov	a,@r0
      001665 C0 E0            [24] 4395 	push	acc
      001667 8D 82            [24] 4396 	mov	dpl,r5
      001669 8E 83            [24] 4397 	mov	dph,r6
      00166B 8F F0            [24] 4398 	mov	b,r7
      00166D 12r00r00         [24] 4399 	lcall	_stack_push
      001670 E5 81            [12] 4400 	mov	a,sp
      001672 24 FC            [12] 4401 	add	a,#0xfc
      001674 F5 81            [12] 4402 	mov	sp,a
                                   4403 ;	calc.c:258: break;
      001676 02r18r5A         [24] 4404 	ljmp	00188$
                                   4405 ;	calc.c:259: case '^':
      001679                       4406 00176$:
                                   4407 ;	calc.c:260: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      001679 E5*00            [12] 4408 	mov	a,_bp
      00167B 24 07            [12] 4409 	add	a,#0x07
      00167D FF               [12] 4410 	mov	r7,a
      00167E 7E 00            [12] 4411 	mov	r6,#0x00
      001680 7D 40            [12] 4412 	mov	r5,#0x40
      001682 E5*00            [12] 4413 	mov	a,_bp
      001684 24 04            [12] 4414 	add	a,#0x04
      001686 F8               [12] 4415 	mov	r0,a
      001687 74 09            [12] 4416 	mov	a,#0x09
      001689 26               [12] 4417 	add	a,@r0
      00168A FA               [12] 4418 	mov	r2,a
      00168B E4               [12] 4419 	clr	a
      00168C 08               [12] 4420 	inc	r0
      00168D 36               [12] 4421 	addc	a,@r0
      00168E FB               [12] 4422 	mov	r3,a
      00168F 08               [12] 4423 	inc	r0
      001690 86 04            [24] 4424 	mov	ar4,@r0
      001692 C0 07            [24] 4425 	push	ar7
      001694 C0 06            [24] 4426 	push	ar6
      001696 C0 05            [24] 4427 	push	ar5
      001698 8A 82            [24] 4428 	mov	dpl,r2
      00169A 8B 83            [24] 4429 	mov	dph,r3
      00169C 8C F0            [24] 4430 	mov	b,r4
      00169E 12r00r00         [24] 4431 	lcall	_stack_pop
      0016A1 AE 82            [24] 4432 	mov	r6,dpl
      0016A3 AF 83            [24] 4433 	mov	r7,dph
      0016A5 15 81            [12] 4434 	dec	sp
      0016A7 15 81            [12] 4435 	dec	sp
      0016A9 15 81            [12] 4436 	dec	sp
      0016AB EE               [12] 4437 	mov	a,r6
      0016AC 4F               [12] 4438 	orl	a,r7
      0016AD 70 25            [24] 4439 	jnz	00181$
      0016AF 7Dr38            [12] 4440 	mov	r5,#___str_8
      0016B1 7Es00            [12] 4441 	mov	r6,#(___str_8 >> 8)
      0016B3 7F 80            [12] 4442 	mov	r7,#0x80
                                   4443 ;	calc.c:50: return;
      0016B5                       4444 00349$:
                                   4445 ;	calc.c:48: for (; *s; s++) putchar(*s);
      0016B5 8D 82            [24] 4446 	mov	dpl,r5
      0016B7 8E 83            [24] 4447 	mov	dph,r6
      0016B9 8F F0            [24] 4448 	mov	b,r7
      0016BB 12r00r00         [24] 4449 	lcall	__gptrget
      0016BE FC               [12] 4450 	mov	r4,a
      0016BF 70 03            [24] 4451 	jnz	00930$
      0016C1 02r18r5A         [24] 4452 	ljmp	00188$
      0016C4                       4453 00930$:
      0016C4 7B 00            [12] 4454 	mov	r3,#0x00
      0016C6 8C 82            [24] 4455 	mov	dpl,r4
      0016C8 8B 83            [24] 4456 	mov	dph,r3
      0016CA 12r00r00         [24] 4457 	lcall	_putchar
      0016CD 0D               [12] 4458 	inc	r5
                                   4459 ;	calc.c:260: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      0016CE BD 00 E4         [24] 4460 	cjne	r5,#0x00,00349$
      0016D1 0E               [12] 4461 	inc	r6
      0016D2 80 E1            [24] 4462 	sjmp	00349$
      0016D4                       4463 00181$:
                                   4464 ;	calc.c:261: else if (!stack_pop(&ctx->s, &d1)) {
      0016D4 E5*00            [12] 4465 	mov	a,_bp
      0016D6 24 0B            [12] 4466 	add	a,#0x0b
      0016D8 FF               [12] 4467 	mov	r7,a
      0016D9 7E 00            [12] 4468 	mov	r6,#0x00
      0016DB 7D 40            [12] 4469 	mov	r5,#0x40
      0016DD E5*00            [12] 4470 	mov	a,_bp
      0016DF 24 04            [12] 4471 	add	a,#0x04
      0016E1 F8               [12] 4472 	mov	r0,a
      0016E2 74 09            [12] 4473 	mov	a,#0x09
      0016E4 26               [12] 4474 	add	a,@r0
      0016E5 FA               [12] 4475 	mov	r2,a
      0016E6 E4               [12] 4476 	clr	a
      0016E7 08               [12] 4477 	inc	r0
      0016E8 36               [12] 4478 	addc	a,@r0
      0016E9 FB               [12] 4479 	mov	r3,a
      0016EA 08               [12] 4480 	inc	r0
      0016EB 86 04            [24] 4481 	mov	ar4,@r0
      0016ED C0 07            [24] 4482 	push	ar7
      0016EF C0 06            [24] 4483 	push	ar6
      0016F1 C0 05            [24] 4484 	push	ar5
      0016F3 8A 82            [24] 4485 	mov	dpl,r2
      0016F5 8B 83            [24] 4486 	mov	dph,r3
      0016F7 8C F0            [24] 4487 	mov	b,r4
      0016F9 12r00r00         [24] 4488 	lcall	_stack_pop
      0016FC AE 82            [24] 4489 	mov	r6,dpl
      0016FE AF 83            [24] 4490 	mov	r7,dph
      001700 15 81            [12] 4491 	dec	sp
      001702 15 81            [12] 4492 	dec	sp
      001704 15 81            [12] 4493 	dec	sp
      001706 EE               [12] 4494 	mov	a,r6
      001707 4F               [12] 4495 	orl	a,r7
      001708 70 58            [24] 4496 	jnz	00178$
                                   4497 ;	calc.c:262: (void)stack_push(&ctx->s, d0);
      00170A E5*00            [12] 4498 	mov	a,_bp
      00170C 24 04            [12] 4499 	add	a,#0x04
      00170E F8               [12] 4500 	mov	r0,a
      00170F 74 09            [12] 4501 	mov	a,#0x09
      001711 26               [12] 4502 	add	a,@r0
      001712 FD               [12] 4503 	mov	r5,a
      001713 E4               [12] 4504 	clr	a
      001714 08               [12] 4505 	inc	r0
      001715 36               [12] 4506 	addc	a,@r0
      001716 FE               [12] 4507 	mov	r6,a
      001717 08               [12] 4508 	inc	r0
      001718 86 07            [24] 4509 	mov	ar7,@r0
      00171A E5*00            [12] 4510 	mov	a,_bp
      00171C 24 07            [12] 4511 	add	a,#0x07
      00171E F8               [12] 4512 	mov	r0,a
      00171F E6               [12] 4513 	mov	a,@r0
      001720 C0 E0            [24] 4514 	push	acc
      001722 08               [12] 4515 	inc	r0
      001723 E6               [12] 4516 	mov	a,@r0
      001724 C0 E0            [24] 4517 	push	acc
      001726 08               [12] 4518 	inc	r0
      001727 E6               [12] 4519 	mov	a,@r0
      001728 C0 E0            [24] 4520 	push	acc
      00172A 08               [12] 4521 	inc	r0
      00172B E6               [12] 4522 	mov	a,@r0
      00172C C0 E0            [24] 4523 	push	acc
      00172E 8D 82            [24] 4524 	mov	dpl,r5
      001730 8E 83            [24] 4525 	mov	dph,r6
      001732 8F F0            [24] 4526 	mov	b,r7
      001734 12r00r00         [24] 4527 	lcall	_stack_push
      001737 E5 81            [12] 4528 	mov	a,sp
      001739 24 FC            [12] 4529 	add	a,#0xfc
      00173B F5 81            [12] 4530 	mov	sp,a
                                   4531 ;	calc.c:263: printstr("\r\nstack underflow\r\n");
      00173D 7Dr38            [12] 4532 	mov	r5,#___str_8
      00173F 7Es00            [12] 4533 	mov	r6,#(___str_8 >> 8)
      001741 7F 80            [12] 4534 	mov	r7,#0x80
                                   4535 ;	calc.c:50: return;
      001743                       4536 00352$:
                                   4537 ;	calc.c:48: for (; *s; s++) putchar(*s);
      001743 8D 82            [24] 4538 	mov	dpl,r5
      001745 8E 83            [24] 4539 	mov	dph,r6
      001747 8F F0            [24] 4540 	mov	b,r7
      001749 12r00r00         [24] 4541 	lcall	__gptrget
      00174C FC               [12] 4542 	mov	r4,a
      00174D 70 03            [24] 4543 	jnz	00933$
      00174F 02r18r5A         [24] 4544 	ljmp	00188$
      001752                       4545 00933$:
      001752 7B 00            [12] 4546 	mov	r3,#0x00
      001754 8C 82            [24] 4547 	mov	dpl,r4
      001756 8B 83            [24] 4548 	mov	dph,r3
      001758 12r00r00         [24] 4549 	lcall	_putchar
      00175B 0D               [12] 4550 	inc	r5
                                   4551 ;	calc.c:263: printstr("\r\nstack underflow\r\n");
      00175C BD 00 E4         [24] 4552 	cjne	r5,#0x00,00352$
      00175F 0E               [12] 4553 	inc	r6
      001760 80 E1            [24] 4554 	sjmp	00352$
      001762                       4555 00178$:
                                   4556 ;	calc.c:265: d1 ^= d0;
      001762 E5*00            [12] 4557 	mov	a,_bp
      001764 24 0B            [12] 4558 	add	a,#0x0b
      001766 F8               [12] 4559 	mov	r0,a
      001767 E5*00            [12] 4560 	mov	a,_bp
      001769 24 07            [12] 4561 	add	a,#0x07
      00176B F9               [12] 4562 	mov	r1,a
      00176C E7               [12] 4563 	mov	a,@r1
      00176D 66               [12] 4564 	xrl	a,@r0
      00176E F6               [12] 4565 	mov	@r0,a
      00176F 09               [12] 4566 	inc	r1
      001770 E7               [12] 4567 	mov	a,@r1
      001771 08               [12] 4568 	inc	r0
      001772 66               [12] 4569 	xrl	a,@r0
      001773 F6               [12] 4570 	mov	@r0,a
      001774 09               [12] 4571 	inc	r1
      001775 E7               [12] 4572 	mov	a,@r1
      001776 08               [12] 4573 	inc	r0
      001777 66               [12] 4574 	xrl	a,@r0
      001778 F6               [12] 4575 	mov	@r0,a
      001779 09               [12] 4576 	inc	r1
      00177A E7               [12] 4577 	mov	a,@r1
      00177B 08               [12] 4578 	inc	r0
      00177C 66               [12] 4579 	xrl	a,@r0
      00177D F6               [12] 4580 	mov	@r0,a
                                   4581 ;	calc.c:266: (void)stack_push(&ctx->s, d1);
      00177E E5*00            [12] 4582 	mov	a,_bp
      001780 24 04            [12] 4583 	add	a,#0x04
      001782 F8               [12] 4584 	mov	r0,a
      001783 74 09            [12] 4585 	mov	a,#0x09
      001785 26               [12] 4586 	add	a,@r0
      001786 FD               [12] 4587 	mov	r5,a
      001787 E4               [12] 4588 	clr	a
      001788 08               [12] 4589 	inc	r0
      001789 36               [12] 4590 	addc	a,@r0
      00178A FE               [12] 4591 	mov	r6,a
      00178B 08               [12] 4592 	inc	r0
      00178C 86 07            [24] 4593 	mov	ar7,@r0
      00178E E5*00            [12] 4594 	mov	a,_bp
      001790 24 0B            [12] 4595 	add	a,#0x0b
      001792 F8               [12] 4596 	mov	r0,a
      001793 E6               [12] 4597 	mov	a,@r0
      001794 C0 E0            [24] 4598 	push	acc
      001796 08               [12] 4599 	inc	r0
      001797 E6               [12] 4600 	mov	a,@r0
      001798 C0 E0            [24] 4601 	push	acc
      00179A 08               [12] 4602 	inc	r0
      00179B E6               [12] 4603 	mov	a,@r0
      00179C C0 E0            [24] 4604 	push	acc
      00179E 08               [12] 4605 	inc	r0
      00179F E6               [12] 4606 	mov	a,@r0
      0017A0 C0 E0            [24] 4607 	push	acc
      0017A2 8D 82            [24] 4608 	mov	dpl,r5
      0017A4 8E 83            [24] 4609 	mov	dph,r6
      0017A6 8F F0            [24] 4610 	mov	b,r7
      0017A8 12r00r00         [24] 4611 	lcall	_stack_push
      0017AB E5 81            [12] 4612 	mov	a,sp
      0017AD 24 FC            [12] 4613 	add	a,#0xfc
      0017AF F5 81            [12] 4614 	mov	sp,a
                                   4615 ;	calc.c:268: break;
      0017B1 02r18r5A         [24] 4616 	ljmp	00188$
                                   4617 ;	calc.c:269: case '~':
      0017B4                       4618 00183$:
                                   4619 ;	calc.c:270: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      0017B4 E5*00            [12] 4620 	mov	a,_bp
      0017B6 24 07            [12] 4621 	add	a,#0x07
      0017B8 FF               [12] 4622 	mov	r7,a
      0017B9 7E 00            [12] 4623 	mov	r6,#0x00
      0017BB 7D 40            [12] 4624 	mov	r5,#0x40
      0017BD E5*00            [12] 4625 	mov	a,_bp
      0017BF 24 04            [12] 4626 	add	a,#0x04
      0017C1 F8               [12] 4627 	mov	r0,a
      0017C2 74 09            [12] 4628 	mov	a,#0x09
      0017C4 26               [12] 4629 	add	a,@r0
      0017C5 FA               [12] 4630 	mov	r2,a
      0017C6 E4               [12] 4631 	clr	a
      0017C7 08               [12] 4632 	inc	r0
      0017C8 36               [12] 4633 	addc	a,@r0
      0017C9 FB               [12] 4634 	mov	r3,a
      0017CA 08               [12] 4635 	inc	r0
      0017CB 86 04            [24] 4636 	mov	ar4,@r0
      0017CD C0 07            [24] 4637 	push	ar7
      0017CF C0 06            [24] 4638 	push	ar6
      0017D1 C0 05            [24] 4639 	push	ar5
      0017D3 8A 82            [24] 4640 	mov	dpl,r2
      0017D5 8B 83            [24] 4641 	mov	dph,r3
      0017D7 8C F0            [24] 4642 	mov	b,r4
      0017D9 12r00r00         [24] 4643 	lcall	_stack_pop
      0017DC AE 82            [24] 4644 	mov	r6,dpl
      0017DE AF 83            [24] 4645 	mov	r7,dph
      0017E0 15 81            [12] 4646 	dec	sp
      0017E2 15 81            [12] 4647 	dec	sp
      0017E4 15 81            [12] 4648 	dec	sp
      0017E6 EE               [12] 4649 	mov	a,r6
      0017E7 4F               [12] 4650 	orl	a,r7
      0017E8 70 22            [24] 4651 	jnz	00185$
      0017EA 7Dr38            [12] 4652 	mov	r5,#___str_8
      0017EC 7Es00            [12] 4653 	mov	r6,#(___str_8 >> 8)
      0017EE 7F 80            [12] 4654 	mov	r7,#0x80
                                   4655 ;	calc.c:50: return;
      0017F0                       4656 00355$:
                                   4657 ;	calc.c:48: for (; *s; s++) putchar(*s);
      0017F0 8D 82            [24] 4658 	mov	dpl,r5
      0017F2 8E 83            [24] 4659 	mov	dph,r6
      0017F4 8F F0            [24] 4660 	mov	b,r7
      0017F6 12r00r00         [24] 4661 	lcall	__gptrget
      0017F9 FC               [12] 4662 	mov	r4,a
      0017FA 60 5E            [24] 4663 	jz	00188$
      0017FC 7B 00            [12] 4664 	mov	r3,#0x00
      0017FE 8C 82            [24] 4665 	mov	dpl,r4
      001800 8B 83            [24] 4666 	mov	dph,r3
      001802 12r00r00         [24] 4667 	lcall	_putchar
      001805 0D               [12] 4668 	inc	r5
                                   4669 ;	calc.c:270: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      001806 BD 00 E7         [24] 4670 	cjne	r5,#0x00,00355$
      001809 0E               [12] 4671 	inc	r6
      00180A 80 E4            [24] 4672 	sjmp	00355$
      00180C                       4673 00185$:
                                   4674 ;	calc.c:272: d0 = ~d0;
      00180C E5*00            [12] 4675 	mov	a,_bp
      00180E 24 07            [12] 4676 	add	a,#0x07
      001810 F8               [12] 4677 	mov	r0,a
      001811 E6               [12] 4678 	mov	a,@r0
      001812 F4               [12] 4679 	cpl	a
      001813 F6               [12] 4680 	mov	@r0,a
      001814 08               [12] 4681 	inc	r0
      001815 E6               [12] 4682 	mov	a,@r0
      001816 F4               [12] 4683 	cpl	a
      001817 F6               [12] 4684 	mov	@r0,a
      001818 08               [12] 4685 	inc	r0
      001819 E6               [12] 4686 	mov	a,@r0
      00181A F4               [12] 4687 	cpl	a
      00181B F6               [12] 4688 	mov	@r0,a
      00181C 08               [12] 4689 	inc	r0
      00181D E6               [12] 4690 	mov	a,@r0
      00181E F4               [12] 4691 	cpl	a
      00181F F6               [12] 4692 	mov	@r0,a
                                   4693 ;	calc.c:273: (void)stack_push(&ctx->s, d0);
      001820 E5*00            [12] 4694 	mov	a,_bp
      001822 24 04            [12] 4695 	add	a,#0x04
      001824 F8               [12] 4696 	mov	r0,a
      001825 74 09            [12] 4697 	mov	a,#0x09
      001827 26               [12] 4698 	add	a,@r0
      001828 FD               [12] 4699 	mov	r5,a
      001829 E4               [12] 4700 	clr	a
      00182A 08               [12] 4701 	inc	r0
      00182B 36               [12] 4702 	addc	a,@r0
      00182C FE               [12] 4703 	mov	r6,a
      00182D 08               [12] 4704 	inc	r0
      00182E 86 07            [24] 4705 	mov	ar7,@r0
      001830 E5*00            [12] 4706 	mov	a,_bp
      001832 24 07            [12] 4707 	add	a,#0x07
      001834 F8               [12] 4708 	mov	r0,a
      001835 E6               [12] 4709 	mov	a,@r0
      001836 C0 E0            [24] 4710 	push	acc
      001838 08               [12] 4711 	inc	r0
      001839 E6               [12] 4712 	mov	a,@r0
      00183A C0 E0            [24] 4713 	push	acc
      00183C 08               [12] 4714 	inc	r0
      00183D E6               [12] 4715 	mov	a,@r0
      00183E C0 E0            [24] 4716 	push	acc
      001840 08               [12] 4717 	inc	r0
      001841 E6               [12] 4718 	mov	a,@r0
      001842 C0 E0            [24] 4719 	push	acc
      001844 8D 82            [24] 4720 	mov	dpl,r5
      001846 8E 83            [24] 4721 	mov	dph,r6
      001848 8F F0            [24] 4722 	mov	b,r7
      00184A 12r00r00         [24] 4723 	lcall	_stack_push
      00184D E5 81            [12] 4724 	mov	a,sp
      00184F 24 FC            [12] 4725 	add	a,#0xfc
      001851 F5 81            [12] 4726 	mov	sp,a
                                   4727 ;	calc.c:275: break;
                                   4728 ;	calc.c:276: default:
      001853 80 05            [24] 4729 	sjmp	00188$
      001855                       4730 00187$:
                                   4731 ;	calc.c:277: return UNDEF;
      001855 90 80 00         [24] 4732 	mov	dptr,#0x8000
                                   4733 ;	calc.c:278: }
      001858 80 03            [24] 4734 	sjmp	00357$
      00185A                       4735 00188$:
                                   4736 ;	calc.c:280: return 1;
      00185A 90 00 01         [24] 4737 	mov	dptr,#0x0001
      00185D                       4738 00357$:
                                   4739 ;	calc.c:281: }
      00185D 85*00 81         [24] 4740 	mov	sp,_bp
      001860 D0*00            [24] 4741 	pop	_bp
      001862 22               [24] 4742 	ret
                                   4743 ;------------------------------------------------------------
                                   4744 ;Allocation info for local variables in function 'push_acc'
                                   4745 ;------------------------------------------------------------
                                   4746 ;delta                     Allocated to stack - _bp -5
                                   4747 ;_ctx                      Allocated to stack - _bp +5
                                   4748 ;ctx                       Allocated to registers r2 r3 r4 
                                   4749 ;__1310720085              Allocated to registers 
                                   4750 ;s                         Allocated to registers r5 r6 r7 
                                   4751 ;sloc0                     Allocated to stack - _bp +1
                                   4752 ;------------------------------------------------------------
                                   4753 ;	calc.c:283: static int push_acc(void *_ctx, delta_t *delta) __reentrant {
                                   4754 ;	-----------------------------------------
                                   4755 ;	 function push_acc
                                   4756 ;	-----------------------------------------
      001863                       4757 _push_acc:
      001863 C0*00            [24] 4758 	push	_bp
      001865 E5 81            [12] 4759 	mov	a,sp
      001867 F5*00            [12] 4760 	mov	_bp,a
      001869 24 07            [12] 4761 	add	a,#0x07
      00186B F5 81            [12] 4762 	mov	sp,a
      00186D C8               [12] 4763 	xch	a,r0
      00186E E5*00            [12] 4764 	mov	a,_bp
      001870 24 05            [12] 4765 	add	a,#0x05
      001872 C8               [12] 4766 	xch	a,r0
      001873 A6 82            [24] 4767 	mov	@r0,dpl
      001875 08               [12] 4768 	inc	r0
      001876 A6 83            [24] 4769 	mov	@r0,dph
      001878 08               [12] 4770 	inc	r0
      001879 A6 F0            [24] 4771 	mov	@r0,b
                                   4772 ;	calc.c:284: struct ctx *ctx = (struct ctx *)_ctx;
      00187B E5*00            [12] 4773 	mov	a,_bp
      00187D 24 05            [12] 4774 	add	a,#0x05
      00187F F8               [12] 4775 	mov	r0,a
      001880 86 02            [24] 4776 	mov	ar2,@r0
      001882 08               [12] 4777 	inc	r0
      001883 86 03            [24] 4778 	mov	ar3,@r0
      001885 08               [12] 4779 	inc	r0
      001886 86 04            [24] 4780 	mov	ar4,@r0
                                   4781 ;	calc.c:288: ctx->acc_valid = 0;
      001888 74 06            [12] 4782 	mov	a,#0x06
      00188A 2A               [12] 4783 	add	a,r2
      00188B FD               [12] 4784 	mov	r5,a
      00188C E4               [12] 4785 	clr	a
      00188D 3B               [12] 4786 	addc	a,r3
      00188E FE               [12] 4787 	mov	r6,a
      00188F 8C 07            [24] 4788 	mov	ar7,r4
      001891 8D 82            [24] 4789 	mov	dpl,r5
      001893 8E 83            [24] 4790 	mov	dph,r6
      001895 8F F0            [24] 4791 	mov	b,r7
      001897 E4               [12] 4792 	clr	a
      001898 12r00r00         [24] 4793 	lcall	__gptrput
                                   4794 ;	calc.c:289: if (!stack_push(&ctx->s, ctx->acc)) printstr("\r\nstack overflow\r\n");
      00189B 74 02            [12] 4795 	mov	a,#0x02
      00189D 2A               [12] 4796 	add	a,r2
      00189E FF               [12] 4797 	mov	r7,a
      00189F E4               [12] 4798 	clr	a
      0018A0 3B               [12] 4799 	addc	a,r3
      0018A1 FD               [12] 4800 	mov	r5,a
      0018A2 8C 06            [24] 4801 	mov	ar6,r4
      0018A4 8F 82            [24] 4802 	mov	dpl,r7
      0018A6 8D 83            [24] 4803 	mov	dph,r5
      0018A8 8E F0            [24] 4804 	mov	b,r6
      0018AA A8*00            [24] 4805 	mov	r0,_bp
      0018AC 08               [12] 4806 	inc	r0
      0018AD 12r00r00         [24] 4807 	lcall	__gptrget
      0018B0 F6               [12] 4808 	mov	@r0,a
      0018B1 A3               [24] 4809 	inc	dptr
      0018B2 12r00r00         [24] 4810 	lcall	__gptrget
      0018B5 08               [12] 4811 	inc	r0
      0018B6 F6               [12] 4812 	mov	@r0,a
      0018B7 A3               [24] 4813 	inc	dptr
      0018B8 12r00r00         [24] 4814 	lcall	__gptrget
      0018BB 08               [12] 4815 	inc	r0
      0018BC F6               [12] 4816 	mov	@r0,a
      0018BD A3               [24] 4817 	inc	dptr
      0018BE 12r00r00         [24] 4818 	lcall	__gptrget
      0018C1 08               [12] 4819 	inc	r0
      0018C2 F6               [12] 4820 	mov	@r0,a
      0018C3 74 09            [12] 4821 	mov	a,#0x09
      0018C5 2A               [12] 4822 	add	a,r2
      0018C6 FA               [12] 4823 	mov	r2,a
      0018C7 E4               [12] 4824 	clr	a
      0018C8 3B               [12] 4825 	addc	a,r3
      0018C9 FB               [12] 4826 	mov	r3,a
      0018CA 8C 07            [24] 4827 	mov	ar7,r4
      0018CC A8*00            [24] 4828 	mov	r0,_bp
      0018CE 08               [12] 4829 	inc	r0
      0018CF E6               [12] 4830 	mov	a,@r0
      0018D0 C0 E0            [24] 4831 	push	acc
      0018D2 08               [12] 4832 	inc	r0
      0018D3 E6               [12] 4833 	mov	a,@r0
      0018D4 C0 E0            [24] 4834 	push	acc
      0018D6 08               [12] 4835 	inc	r0
      0018D7 E6               [12] 4836 	mov	a,@r0
      0018D8 C0 E0            [24] 4837 	push	acc
      0018DA 08               [12] 4838 	inc	r0
      0018DB E6               [12] 4839 	mov	a,@r0
      0018DC C0 E0            [24] 4840 	push	acc
      0018DE 8A 82            [24] 4841 	mov	dpl,r2
      0018E0 8B 83            [24] 4842 	mov	dph,r3
      0018E2 8F F0            [24] 4843 	mov	b,r7
      0018E4 12r00r00         [24] 4844 	lcall	_stack_push
      0018E7 AE 82            [24] 4845 	mov	r6,dpl
      0018E9 AF 83            [24] 4846 	mov	r7,dph
      0018EB E5 81            [12] 4847 	mov	a,sp
      0018ED 24 FC            [12] 4848 	add	a,#0xfc
      0018EF F5 81            [12] 4849 	mov	sp,a
      0018F1 EE               [12] 4850 	mov	a,r6
      0018F2 4F               [12] 4851 	orl	a,r7
      0018F3 70 22            [24] 4852 	jnz	00102$
      0018F5 7Dr61            [12] 4853 	mov	r5,#___str_10
      0018F7 7Es00            [12] 4854 	mov	r6,#(___str_10 >> 8)
      0018F9 7F 80            [12] 4855 	mov	r7,#0x80
                                   4856 ;	calc.c:50: return;
      0018FB                       4857 00109$:
                                   4858 ;	calc.c:48: for (; *s; s++) putchar(*s);
      0018FB 8D 82            [24] 4859 	mov	dpl,r5
      0018FD 8E 83            [24] 4860 	mov	dph,r6
      0018FF 8F F0            [24] 4861 	mov	b,r7
      001901 12r00r00         [24] 4862 	lcall	__gptrget
      001904 FC               [12] 4863 	mov	r4,a
      001905 60 10            [24] 4864 	jz	00102$
      001907 7B 00            [12] 4865 	mov	r3,#0x00
      001909 8C 82            [24] 4866 	mov	dpl,r4
      00190B 8B 83            [24] 4867 	mov	dph,r3
      00190D 12r00r00         [24] 4868 	lcall	_putchar
      001910 0D               [12] 4869 	inc	r5
                                   4870 ;	calc.c:289: if (!stack_push(&ctx->s, ctx->acc)) printstr("\r\nstack overflow\r\n");
      001911 BD 00 E7         [24] 4871 	cjne	r5,#0x00,00109$
      001914 0E               [12] 4872 	inc	r6
      001915 80 E4            [24] 4873 	sjmp	00109$
      001917                       4874 00102$:
                                   4875 ;	calc.c:291: if (delta->event == EVENT_OP) return operator(_ctx, delta);
      001917 E5*00            [12] 4876 	mov	a,_bp
      001919 24 FB            [12] 4877 	add	a,#0xfb
      00191B F8               [12] 4878 	mov	r0,a
      00191C 86 05            [24] 4879 	mov	ar5,@r0
      00191E 08               [12] 4880 	inc	r0
      00191F 86 06            [24] 4881 	mov	ar6,@r0
      001921 08               [12] 4882 	inc	r0
      001922 86 07            [24] 4883 	mov	ar7,@r0
      001924 74 02            [12] 4884 	mov	a,#0x02
      001926 2D               [12] 4885 	add	a,r5
      001927 FA               [12] 4886 	mov	r2,a
      001928 E4               [12] 4887 	clr	a
      001929 3E               [12] 4888 	addc	a,r6
      00192A FB               [12] 4889 	mov	r3,a
      00192B 8F 04            [24] 4890 	mov	ar4,r7
      00192D 8A 82            [24] 4891 	mov	dpl,r2
      00192F 8B 83            [24] 4892 	mov	dph,r3
      001931 8C F0            [24] 4893 	mov	b,r4
      001933 12r00r00         [24] 4894 	lcall	__gptrget
      001936 FA               [12] 4895 	mov	r2,a
      001937 A3               [24] 4896 	inc	dptr
      001938 12r00r00         [24] 4897 	lcall	__gptrget
      00193B FB               [12] 4898 	mov	r3,a
      00193C BA 02 29         [24] 4899 	cjne	r2,#0x02,00104$
      00193F BB 00 26         [24] 4900 	cjne	r3,#0x00,00104$
      001942 C0 05            [24] 4901 	push	ar5
      001944 C0 06            [24] 4902 	push	ar6
      001946 C0 07            [24] 4903 	push	ar7
      001948 E5*00            [12] 4904 	mov	a,_bp
      00194A 24 05            [12] 4905 	add	a,#0x05
      00194C F8               [12] 4906 	mov	r0,a
      00194D 86 82            [24] 4907 	mov	dpl,@r0
      00194F 08               [12] 4908 	inc	r0
      001950 86 83            [24] 4909 	mov	dph,@r0
      001952 08               [12] 4910 	inc	r0
      001953 86 F0            [24] 4911 	mov	b,@r0
      001955 12r06r24         [24] 4912 	lcall	_operator
      001958 AE 82            [24] 4913 	mov	r6,dpl
      00195A AF 83            [24] 4914 	mov	r7,dph
      00195C 15 81            [12] 4915 	dec	sp
      00195E 15 81            [12] 4916 	dec	sp
      001960 15 81            [12] 4917 	dec	sp
      001962 8E 82            [24] 4918 	mov	dpl,r6
      001964 8F 83            [24] 4919 	mov	dph,r7
      001966 80 03            [24] 4920 	sjmp	00111$
      001968                       4921 00104$:
                                   4922 ;	calc.c:292: else return 1;
      001968 90 00 01         [24] 4923 	mov	dptr,#0x0001
      00196B                       4924 00111$:
                                   4925 ;	calc.c:293: }
      00196B 85*00 81         [24] 4926 	mov	sp,_bp
      00196E D0*00            [24] 4927 	pop	_bp
      001970 22               [24] 4928 	ret
                                   4929 ;------------------------------------------------------------
                                   4930 ;Allocation info for local variables in function 'reset_acc'
                                   4931 ;------------------------------------------------------------
                                   4932 ;delta                     Allocated to stack - _bp -5
                                   4933 ;_ctx                      Allocated to registers r5 r6 r7 
                                   4934 ;ctx                       Allocated to registers r5 r6 r7 
                                   4935 ;------------------------------------------------------------
                                   4936 ;	calc.c:295: static int reset_acc(void *_ctx, delta_t *delta) __reentrant {
                                   4937 ;	-----------------------------------------
                                   4938 ;	 function reset_acc
                                   4939 ;	-----------------------------------------
      001971                       4940 _reset_acc:
      001971 C0*00            [24] 4941 	push	_bp
      001973 85 81*00         [24] 4942 	mov	_bp,sp
      001976 AD 82            [24] 4943 	mov	r5,dpl
      001978 AE 83            [24] 4944 	mov	r6,dph
      00197A AF F0            [24] 4945 	mov	r7,b
                                   4946 ;	calc.c:296: struct ctx *ctx = (struct ctx *)_ctx;
                                   4947 ;	calc.c:298: if (delta->event == EVENT_RSTA_I) ctx->acc_valid = 0;
      00197C E5*00            [12] 4948 	mov	a,_bp
      00197E 24 FB            [12] 4949 	add	a,#0xfb
      001980 F8               [12] 4950 	mov	r0,a
      001981 86 02            [24] 4951 	mov	ar2,@r0
      001983 08               [12] 4952 	inc	r0
      001984 86 03            [24] 4953 	mov	ar3,@r0
      001986 08               [12] 4954 	inc	r0
      001987 86 04            [24] 4955 	mov	ar4,@r0
      001989 74 02            [12] 4956 	mov	a,#0x02
      00198B 2A               [12] 4957 	add	a,r2
      00198C FA               [12] 4958 	mov	r2,a
      00198D E4               [12] 4959 	clr	a
      00198E 3B               [12] 4960 	addc	a,r3
      00198F FB               [12] 4961 	mov	r3,a
      001990 8A 82            [24] 4962 	mov	dpl,r2
      001992 8B 83            [24] 4963 	mov	dph,r3
      001994 8C F0            [24] 4964 	mov	b,r4
      001996 12r00r00         [24] 4965 	lcall	__gptrget
      001999 FA               [12] 4966 	mov	r2,a
      00199A A3               [24] 4967 	inc	dptr
      00199B 12r00r00         [24] 4968 	lcall	__gptrget
      00199E FB               [12] 4969 	mov	r3,a
      00199F BA 06 16         [24] 4970 	cjne	r2,#0x06,00102$
      0019A2 BB 00 13         [24] 4971 	cjne	r3,#0x00,00102$
      0019A5 74 06            [12] 4972 	mov	a,#0x06
      0019A7 2D               [12] 4973 	add	a,r5
      0019A8 FA               [12] 4974 	mov	r2,a
      0019A9 E4               [12] 4975 	clr	a
      0019AA 3E               [12] 4976 	addc	a,r6
      0019AB FB               [12] 4977 	mov	r3,a
      0019AC 8F 04            [24] 4978 	mov	ar4,r7
      0019AE 8A 82            [24] 4979 	mov	dpl,r2
      0019B0 8B 83            [24] 4980 	mov	dph,r3
      0019B2 8C F0            [24] 4981 	mov	b,r4
      0019B4 E4               [12] 4982 	clr	a
      0019B5 12r00r00         [24] 4983 	lcall	__gptrput
      0019B8                       4984 00102$:
                                   4985 ;	calc.c:299: ctx->acc = 0l;
      0019B8 74 02            [12] 4986 	mov	a,#0x02
      0019BA 2D               [12] 4987 	add	a,r5
      0019BB FD               [12] 4988 	mov	r5,a
      0019BC E4               [12] 4989 	clr	a
      0019BD 3E               [12] 4990 	addc	a,r6
      0019BE FE               [12] 4991 	mov	r6,a
      0019BF 8D 82            [24] 4992 	mov	dpl,r5
      0019C1 8E 83            [24] 4993 	mov	dph,r6
      0019C3 8F F0            [24] 4994 	mov	b,r7
      0019C5 E4               [12] 4995 	clr	a
      0019C6 12r00r00         [24] 4996 	lcall	__gptrput
      0019C9 A3               [24] 4997 	inc	dptr
      0019CA 12r00r00         [24] 4998 	lcall	__gptrput
      0019CD A3               [24] 4999 	inc	dptr
      0019CE 12r00r00         [24] 5000 	lcall	__gptrput
      0019D1 A3               [24] 5001 	inc	dptr
      0019D2 12r00r00         [24] 5002 	lcall	__gptrput
                                   5003 ;	calc.c:301: return 1;
      0019D5 90 00 01         [24] 5004 	mov	dptr,#0x0001
                                   5005 ;	calc.c:302: }
      0019D8 D0*00            [24] 5006 	pop	_bp
      0019DA 22               [24] 5007 	ret
                                   5008 ;------------------------------------------------------------
                                   5009 ;Allocation info for local variables in function 'reset_base'
                                   5010 ;------------------------------------------------------------
                                   5011 ;delta                     Allocated to stack - _bp -5
                                   5012 ;_ctx                      Allocated to registers r5 r6 r7 
                                   5013 ;ctx                       Allocated to registers r5 r6 r7 
                                   5014 ;------------------------------------------------------------
                                   5015 ;	calc.c:304: static int reset_base(void *_ctx, delta_t *delta) __reentrant {
                                   5016 ;	-----------------------------------------
                                   5017 ;	 function reset_base
                                   5018 ;	-----------------------------------------
      0019DB                       5019 _reset_base:
      0019DB C0*00            [24] 5020 	push	_bp
      0019DD 85 81*00         [24] 5021 	mov	_bp,sp
      0019E0 AD 82            [24] 5022 	mov	r5,dpl
      0019E2 AE 83            [24] 5023 	mov	r6,dph
      0019E4 AF F0            [24] 5024 	mov	r7,b
                                   5025 ;	calc.c:305: struct ctx *ctx = (struct ctx *)_ctx;
                                   5026 ;	calc.c:309: switch (ctx->digit[0]) {
      0019E6 74 07            [12] 5027 	mov	a,#0x07
      0019E8 2D               [12] 5028 	add	a,r5
      0019E9 FA               [12] 5029 	mov	r2,a
      0019EA E4               [12] 5030 	clr	a
      0019EB 3E               [12] 5031 	addc	a,r6
      0019EC FB               [12] 5032 	mov	r3,a
      0019ED 8F 04            [24] 5033 	mov	ar4,r7
      0019EF 8A 82            [24] 5034 	mov	dpl,r2
      0019F1 8B 83            [24] 5035 	mov	dph,r3
      0019F3 8C F0            [24] 5036 	mov	b,r4
      0019F5 12r00r00         [24] 5037 	lcall	__gptrget
      0019F8 FC               [12] 5038 	mov	r4,a
      0019F9 BC 48 02         [24] 5039 	cjne	r4,#0x48,00124$
      0019FC 80 0F            [24] 5040 	sjmp	00101$
      0019FE                       5041 00124$:
      0019FE BC 4F 02         [24] 5042 	cjne	r4,#0x4f,00125$
      001A01 80 2E            [24] 5043 	sjmp	00103$
      001A03                       5044 00125$:
      001A03 BC 68 02         [24] 5045 	cjne	r4,#0x68,00126$
      001A06 80 17            [24] 5046 	sjmp	00102$
      001A08                       5047 00126$:
                                   5048 ;	calc.c:310: case 'H':
      001A08 BC 6F 48         [24] 5049 	cjne	r4,#0x6f,00105$
      001A0B 80 36            [24] 5050 	sjmp	00104$
      001A0D                       5051 00101$:
                                   5052 ;	calc.c:311: ctx->base = 16;
      001A0D 8D 82            [24] 5053 	mov	dpl,r5
      001A0F 8E 83            [24] 5054 	mov	dph,r6
      001A11 8F F0            [24] 5055 	mov	b,r7
      001A13 74 10            [12] 5056 	mov	a,#0x10
      001A15 12r00r00         [24] 5057 	lcall	__gptrput
      001A18 A3               [24] 5058 	inc	dptr
      001A19 E4               [12] 5059 	clr	a
      001A1A 12r00r00         [24] 5060 	lcall	__gptrput
                                   5061 ;	calc.c:312: break;
                                   5062 ;	calc.c:313: case 'h':
      001A1D 80 34            [24] 5063 	sjmp	00105$
      001A1F                       5064 00102$:
                                   5065 ;	calc.c:314: ctx->base = 10;
      001A1F 8D 82            [24] 5066 	mov	dpl,r5
      001A21 8E 83            [24] 5067 	mov	dph,r6
      001A23 8F F0            [24] 5068 	mov	b,r7
      001A25 74 0A            [12] 5069 	mov	a,#0x0a
      001A27 12r00r00         [24] 5070 	lcall	__gptrput
      001A2A A3               [24] 5071 	inc	dptr
      001A2B E4               [12] 5072 	clr	a
      001A2C 12r00r00         [24] 5073 	lcall	__gptrput
                                   5074 ;	calc.c:315: break;
                                   5075 ;	calc.c:316: case 'O':
      001A2F 80 22            [24] 5076 	sjmp	00105$
      001A31                       5077 00103$:
                                   5078 ;	calc.c:317: ctx->base = 8;
      001A31 8D 82            [24] 5079 	mov	dpl,r5
      001A33 8E 83            [24] 5080 	mov	dph,r6
      001A35 8F F0            [24] 5081 	mov	b,r7
      001A37 74 08            [12] 5082 	mov	a,#0x08
      001A39 12r00r00         [24] 5083 	lcall	__gptrput
      001A3C A3               [24] 5084 	inc	dptr
      001A3D E4               [12] 5085 	clr	a
      001A3E 12r00r00         [24] 5086 	lcall	__gptrput
                                   5087 ;	calc.c:318: break;
                                   5088 ;	calc.c:319: case 'o':
      001A41 80 10            [24] 5089 	sjmp	00105$
      001A43                       5090 00104$:
                                   5091 ;	calc.c:320: ctx->base = 2;
      001A43 8D 82            [24] 5092 	mov	dpl,r5
      001A45 8E 83            [24] 5093 	mov	dph,r6
      001A47 8F F0            [24] 5094 	mov	b,r7
      001A49 74 02            [12] 5095 	mov	a,#0x02
      001A4B 12r00r00         [24] 5096 	lcall	__gptrput
      001A4E A3               [24] 5097 	inc	dptr
      001A4F E4               [12] 5098 	clr	a
      001A50 12r00r00         [24] 5099 	lcall	__gptrput
                                   5100 ;	calc.c:322: }
      001A53                       5101 00105$:
                                   5102 ;	calc.c:324: return 1;
      001A53 90 00 01         [24] 5103 	mov	dptr,#0x0001
                                   5104 ;	calc.c:325: }
      001A56 D0*00            [24] 5105 	pop	_bp
      001A58 22               [24] 5106 	ret
                                   5107 ;------------------------------------------------------------
                                   5108 ;Allocation info for local variables in function 'help'
                                   5109 ;------------------------------------------------------------
                                   5110 ;delta                     Allocated to stack - _bp -5
                                   5111 ;_ctx                      Allocated to registers r5 r6 r7 
                                   5112 ;ctx                       Allocated to stack - _bp +4
                                   5113 ;__1310720087              Allocated to registers 
                                   5114 ;d                         Allocated to stack - _bp +7
                                   5115 ;mask                      Allocated to stack - _bp +11
                                   5116 ;__1310720089              Allocated to registers 
                                   5117 ;s                         Allocated to registers r5 r6 r7 
                                   5118 ;__1310720091              Allocated to registers 
                                   5119 ;s                         Allocated to registers r5 r6 r7 
                                   5120 ;__1310720093              Allocated to registers 
                                   5121 ;s                         Allocated to registers r5 r6 r7 
                                   5122 ;__1310720095              Allocated to registers 
                                   5123 ;s                         Allocated to registers r5 r6 r7 
                                   5124 ;__1310720097              Allocated to registers 
                                   5125 ;s                         Allocated to registers r5 r6 r7 
                                   5126 ;__1310720099              Allocated to registers 
                                   5127 ;s                         Allocated to registers r5 r6 r7 
                                   5128 ;__1310720101              Allocated to registers 
                                   5129 ;s                         Allocated to registers r5 r6 r7 
                                   5130 ;__1310720103              Allocated to registers 
                                   5131 ;s                         Allocated to registers r5 r6 r7 
                                   5132 ;__1310720105              Allocated to registers 
                                   5133 ;s                         Allocated to registers r5 r6 r7 
                                   5134 ;__1310720107              Allocated to registers 
                                   5135 ;s                         Allocated to registers r5 r6 r7 
                                   5136 ;__1310720109              Allocated to registers 
                                   5137 ;s                         Allocated to registers r5 r6 r7 
                                   5138 ;__1310720111              Allocated to registers 
                                   5139 ;s                         Allocated to registers r5 r6 r7 
                                   5140 ;__1310720113              Allocated to registers 
                                   5141 ;s                         Allocated to registers r5 r6 r7 
                                   5142 ;__1310720115              Allocated to registers 
                                   5143 ;s                         Allocated to registers r5 r6 r7 
                                   5144 ;__1310720117              Allocated to registers 
                                   5145 ;s                         Allocated to registers r5 r6 r7 
                                   5146 ;__1310720119              Allocated to registers 
                                   5147 ;s                         Allocated to registers r5 r6 r7 
                                   5148 ;__1310720121              Allocated to registers 
                                   5149 ;s                         Allocated to registers r5 r6 r7 
                                   5150 ;__1310720123              Allocated to registers 
                                   5151 ;s                         Allocated to registers r5 r6 r7 
                                   5152 ;__1310720125              Allocated to registers 
                                   5153 ;s                         Allocated to registers r5 r6 r7 
                                   5154 ;sloc0                     Allocated to stack - _bp +1
                                   5155 ;------------------------------------------------------------
                                   5156 ;	calc.c:327: static int help(void *_ctx, delta_t *delta) __reentrant {
                                   5157 ;	-----------------------------------------
                                   5158 ;	 function help
                                   5159 ;	-----------------------------------------
      001A59                       5160 _help:
      001A59 C0*00            [24] 5161 	push	_bp
      001A5B E5 81            [12] 5162 	mov	a,sp
      001A5D F5*00            [12] 5163 	mov	_bp,a
      001A5F 24 0E            [12] 5164 	add	a,#0x0e
      001A61 F5 81            [12] 5165 	mov	sp,a
      001A63 AD 82            [24] 5166 	mov	r5,dpl
      001A65 AE 83            [24] 5167 	mov	r6,dph
      001A67 AF F0            [24] 5168 	mov	r7,b
                                   5169 ;	calc.c:328: struct ctx *ctx = (struct ctx *)_ctx;
      001A69 E5*00            [12] 5170 	mov	a,_bp
      001A6B 24 04            [12] 5171 	add	a,#0x04
      001A6D F8               [12] 5172 	mov	r0,a
      001A6E A6 05            [24] 5173 	mov	@r0,ar5
      001A70 08               [12] 5174 	inc	r0
      001A71 A6 06            [24] 5175 	mov	@r0,ar6
      001A73 08               [12] 5176 	inc	r0
      001A74 A6 07            [24] 5177 	mov	@r0,ar7
                                   5178 ;	calc.c:331: printf("\r\nbase = %d, ", ctx->base);
      001A76 E5*00            [12] 5179 	mov	a,_bp
      001A78 24 04            [12] 5180 	add	a,#0x04
      001A7A F8               [12] 5181 	mov	r0,a
      001A7B 86 82            [24] 5182 	mov	dpl,@r0
      001A7D 08               [12] 5183 	inc	r0
      001A7E 86 83            [24] 5184 	mov	dph,@r0
      001A80 08               [12] 5185 	inc	r0
      001A81 86 F0            [24] 5186 	mov	b,@r0
      001A83 12r00r00         [24] 5187 	lcall	__gptrget
      001A86 FB               [12] 5188 	mov	r3,a
      001A87 A3               [24] 5189 	inc	dptr
      001A88 12r00r00         [24] 5190 	lcall	__gptrget
      001A8B FC               [12] 5191 	mov	r4,a
      001A8C C0 03            [24] 5192 	push	ar3
      001A8E C0 04            [24] 5193 	push	ar4
      001A90 74r74            [12] 5194 	mov	a,#___str_11
      001A92 C0 E0            [24] 5195 	push	acc
      001A94 74s00            [12] 5196 	mov	a,#(___str_11 >> 8)
      001A96 C0 E0            [24] 5197 	push	acc
      001A98 74 80            [12] 5198 	mov	a,#0x80
      001A9A C0 E0            [24] 5199 	push	acc
      001A9C 12r00r00         [24] 5200 	lcall	_printf
      001A9F E5 81            [12] 5201 	mov	a,sp
      001AA1 24 FB            [12] 5202 	add	a,#0xfb
      001AA3 F5 81            [12] 5203 	mov	sp,a
                                   5204 ;	calc.c:332: printf("acc = %ld / ", ctx->acc);
      001AA5 E5*00            [12] 5205 	mov	a,_bp
      001AA7 24 04            [12] 5206 	add	a,#0x04
      001AA9 F8               [12] 5207 	mov	r0,a
      001AAA A9*00            [24] 5208 	mov	r1,_bp
      001AAC 09               [12] 5209 	inc	r1
      001AAD 74 02            [12] 5210 	mov	a,#0x02
      001AAF 26               [12] 5211 	add	a,@r0
      001AB0 F7               [12] 5212 	mov	@r1,a
      001AB1 E4               [12] 5213 	clr	a
      001AB2 08               [12] 5214 	inc	r0
      001AB3 36               [12] 5215 	addc	a,@r0
      001AB4 09               [12] 5216 	inc	r1
      001AB5 F7               [12] 5217 	mov	@r1,a
      001AB6 08               [12] 5218 	inc	r0
      001AB7 09               [12] 5219 	inc	r1
      001AB8 E6               [12] 5220 	mov	a,@r0
      001AB9 F7               [12] 5221 	mov	@r1,a
      001ABA A8*00            [24] 5222 	mov	r0,_bp
      001ABC 08               [12] 5223 	inc	r0
      001ABD 86 82            [24] 5224 	mov	dpl,@r0
      001ABF 08               [12] 5225 	inc	r0
      001AC0 86 83            [24] 5226 	mov	dph,@r0
      001AC2 08               [12] 5227 	inc	r0
      001AC3 86 F0            [24] 5228 	mov	b,@r0
      001AC5 12r00r00         [24] 5229 	lcall	__gptrget
      001AC8 FC               [12] 5230 	mov	r4,a
      001AC9 A3               [24] 5231 	inc	dptr
      001ACA 12r00r00         [24] 5232 	lcall	__gptrget
      001ACD FD               [12] 5233 	mov	r5,a
      001ACE A3               [24] 5234 	inc	dptr
      001ACF 12r00r00         [24] 5235 	lcall	__gptrget
      001AD2 FE               [12] 5236 	mov	r6,a
      001AD3 A3               [24] 5237 	inc	dptr
      001AD4 12r00r00         [24] 5238 	lcall	__gptrget
      001AD7 FF               [12] 5239 	mov	r7,a
      001AD8 C0 04            [24] 5240 	push	ar4
      001ADA C0 05            [24] 5241 	push	ar5
      001ADC C0 06            [24] 5242 	push	ar6
      001ADE C0 07            [24] 5243 	push	ar7
      001AE0 74r82            [12] 5244 	mov	a,#___str_12
      001AE2 C0 E0            [24] 5245 	push	acc
      001AE4 74s00            [12] 5246 	mov	a,#(___str_12 >> 8)
      001AE6 C0 E0            [24] 5247 	push	acc
      001AE8 74 80            [12] 5248 	mov	a,#0x80
      001AEA C0 E0            [24] 5249 	push	acc
      001AEC 12r00r00         [24] 5250 	lcall	_printf
      001AEF E5 81            [12] 5251 	mov	a,sp
      001AF1 24 F9            [12] 5252 	add	a,#0xf9
      001AF3 F5 81            [12] 5253 	mov	sp,a
                                   5254 ;	calc.c:333: printf("%08lx / ", ctx->acc);
      001AF5 A8*00            [24] 5255 	mov	r0,_bp
      001AF7 08               [12] 5256 	inc	r0
      001AF8 86 82            [24] 5257 	mov	dpl,@r0
      001AFA 08               [12] 5258 	inc	r0
      001AFB 86 83            [24] 5259 	mov	dph,@r0
      001AFD 08               [12] 5260 	inc	r0
      001AFE 86 F0            [24] 5261 	mov	b,@r0
      001B00 12r00r00         [24] 5262 	lcall	__gptrget
      001B03 FC               [12] 5263 	mov	r4,a
      001B04 A3               [24] 5264 	inc	dptr
      001B05 12r00r00         [24] 5265 	lcall	__gptrget
      001B08 FD               [12] 5266 	mov	r5,a
      001B09 A3               [24] 5267 	inc	dptr
      001B0A 12r00r00         [24] 5268 	lcall	__gptrget
      001B0D FE               [12] 5269 	mov	r6,a
      001B0E A3               [24] 5270 	inc	dptr
      001B0F 12r00r00         [24] 5271 	lcall	__gptrget
      001B12 FF               [12] 5272 	mov	r7,a
      001B13 C0 04            [24] 5273 	push	ar4
      001B15 C0 05            [24] 5274 	push	ar5
      001B17 C0 06            [24] 5275 	push	ar6
      001B19 C0 07            [24] 5276 	push	ar7
      001B1B 74r23            [12] 5277 	mov	a,#___str_4
      001B1D C0 E0            [24] 5278 	push	acc
      001B1F 74s00            [12] 5279 	mov	a,#(___str_4 >> 8)
      001B21 C0 E0            [24] 5280 	push	acc
      001B23 74 80            [12] 5281 	mov	a,#0x80
      001B25 C0 E0            [24] 5282 	push	acc
      001B27 12r00r00         [24] 5283 	lcall	_printf
      001B2A E5 81            [12] 5284 	mov	a,sp
      001B2C 24 F9            [12] 5285 	add	a,#0xf9
      001B2E F5 81            [12] 5286 	mov	sp,a
                                   5287 ;	calc.c:334: printbin(ctx->acc);
      001B30 A8*00            [24] 5288 	mov	r0,_bp
      001B32 08               [12] 5289 	inc	r0
      001B33 86 82            [24] 5290 	mov	dpl,@r0
      001B35 08               [12] 5291 	inc	r0
      001B36 86 83            [24] 5292 	mov	dph,@r0
      001B38 08               [12] 5293 	inc	r0
      001B39 86 F0            [24] 5294 	mov	b,@r0
      001B3B E5*00            [12] 5295 	mov	a,_bp
      001B3D 24 07            [12] 5296 	add	a,#0x07
      001B3F F9               [12] 5297 	mov	r1,a
      001B40 12r00r00         [24] 5298 	lcall	__gptrget
      001B43 F7               [12] 5299 	mov	@r1,a
      001B44 A3               [24] 5300 	inc	dptr
      001B45 12r00r00         [24] 5301 	lcall	__gptrget
      001B48 09               [12] 5302 	inc	r1
      001B49 F7               [12] 5303 	mov	@r1,a
      001B4A A3               [24] 5304 	inc	dptr
      001B4B 12r00r00         [24] 5305 	lcall	__gptrget
      001B4E 09               [12] 5306 	inc	r1
      001B4F F7               [12] 5307 	mov	@r1,a
      001B50 A3               [24] 5308 	inc	dptr
      001B51 12r00r00         [24] 5309 	lcall	__gptrget
      001B54 09               [12] 5310 	inc	r1
      001B55 F7               [12] 5311 	mov	@r1,a
                                   5312 ;	calc.c:56: for (mask = 0x80000000lu; mask; mask >>= 1)
      001B56 E5*00            [12] 5313 	mov	a,_bp
      001B58 24 0B            [12] 5314 	add	a,#0x0b
      001B5A F8               [12] 5315 	mov	r0,a
      001B5B E4               [12] 5316 	clr	a
      001B5C F6               [12] 5317 	mov	@r0,a
      001B5D 08               [12] 5318 	inc	r0
      001B5E F6               [12] 5319 	mov	@r0,a
      001B5F 08               [12] 5320 	inc	r0
      001B60 F6               [12] 5321 	mov	@r0,a
      001B61 08               [12] 5322 	inc	r0
      001B62 76 80            [12] 5323 	mov	@r0,#0x80
      001B64                       5324 00141$:
                                   5325 ;	calc.c:57: (void)putchar((d & mask) ? (int)'1' : (int)'0');
      001B64 E5*00            [12] 5326 	mov	a,_bp
      001B66 24 07            [12] 5327 	add	a,#0x07
      001B68 F8               [12] 5328 	mov	r0,a
      001B69 86 04            [24] 5329 	mov	ar4,@r0
      001B6B 08               [12] 5330 	inc	r0
      001B6C 86 05            [24] 5331 	mov	ar5,@r0
      001B6E 08               [12] 5332 	inc	r0
      001B6F 86 06            [24] 5333 	mov	ar6,@r0
      001B71 08               [12] 5334 	inc	r0
      001B72 86 07            [24] 5335 	mov	ar7,@r0
      001B74 E5*00            [12] 5336 	mov	a,_bp
      001B76 24 0B            [12] 5337 	add	a,#0x0b
      001B78 F8               [12] 5338 	mov	r0,a
      001B79 E6               [12] 5339 	mov	a,@r0
      001B7A 52 04            [12] 5340 	anl	ar4,a
      001B7C 08               [12] 5341 	inc	r0
      001B7D E6               [12] 5342 	mov	a,@r0
      001B7E 52 05            [12] 5343 	anl	ar5,a
      001B80 08               [12] 5344 	inc	r0
      001B81 E6               [12] 5345 	mov	a,@r0
      001B82 52 06            [12] 5346 	anl	ar6,a
      001B84 08               [12] 5347 	inc	r0
      001B85 E6               [12] 5348 	mov	a,@r0
      001B86 52 07            [12] 5349 	anl	ar7,a
      001B88 EC               [12] 5350 	mov	a,r4
      001B89 4D               [12] 5351 	orl	a,r5
      001B8A 4E               [12] 5352 	orl	a,r6
      001B8B 4F               [12] 5353 	orl	a,r7
      001B8C 60 06            [24] 5354 	jz	00202$
      001B8E 7E 31            [12] 5355 	mov	r6,#0x31
      001B90 7F 00            [12] 5356 	mov	r7,#0x00
      001B92 80 04            [24] 5357 	sjmp	00203$
      001B94                       5358 00202$:
      001B94 7E 30            [12] 5359 	mov	r6,#0x30
      001B96 7F 00            [12] 5360 	mov	r7,#0x00
      001B98                       5361 00203$:
      001B98 8E 82            [24] 5362 	mov	dpl,r6
      001B9A 8F 83            [24] 5363 	mov	dph,r7
      001B9C 12r00r00         [24] 5364 	lcall	_putchar
                                   5365 ;	calc.c:56: for (mask = 0x80000000lu; mask; mask >>= 1)
      001B9F E5*00            [12] 5366 	mov	a,_bp
      001BA1 24 0B            [12] 5367 	add	a,#0x0b
      001BA3 F8               [12] 5368 	mov	r0,a
      001BA4 08               [12] 5369 	inc	r0
      001BA5 08               [12] 5370 	inc	r0
      001BA6 08               [12] 5371 	inc	r0
      001BA7 E6               [12] 5372 	mov	a,@r0
      001BA8 C3               [12] 5373 	clr	c
      001BA9 13               [12] 5374 	rrc	a
      001BAA F6               [12] 5375 	mov	@r0,a
      001BAB 18               [12] 5376 	dec	r0
      001BAC E6               [12] 5377 	mov	a,@r0
      001BAD 13               [12] 5378 	rrc	a
      001BAE F6               [12] 5379 	mov	@r0,a
      001BAF 18               [12] 5380 	dec	r0
      001BB0 E6               [12] 5381 	mov	a,@r0
      001BB1 13               [12] 5382 	rrc	a
      001BB2 F6               [12] 5383 	mov	@r0,a
      001BB3 18               [12] 5384 	dec	r0
      001BB4 E6               [12] 5385 	mov	a,@r0
      001BB5 13               [12] 5386 	rrc	a
      001BB6 F6               [12] 5387 	mov	@r0,a
      001BB7 E5*00            [12] 5388 	mov	a,_bp
      001BB9 24 0B            [12] 5389 	add	a,#0x0b
      001BBB F8               [12] 5390 	mov	r0,a
      001BBC E6               [12] 5391 	mov	a,@r0
      001BBD 08               [12] 5392 	inc	r0
      001BBE 46               [12] 5393 	orl	a,@r0
      001BBF 08               [12] 5394 	inc	r0
      001BC0 46               [12] 5395 	orl	a,@r0
      001BC1 08               [12] 5396 	inc	r0
      001BC2 46               [12] 5397 	orl	a,@r0
      001BC3 70 9F            [24] 5398 	jnz	00141$
                                   5399 ;	calc.c:335: printf(", acc_valid = %d\r\n\r\n", (int)ctx->acc_valid);
      001BC5 E5*00            [12] 5400 	mov	a,_bp
      001BC7 24 04            [12] 5401 	add	a,#0x04
      001BC9 F8               [12] 5402 	mov	r0,a
      001BCA 74 06            [12] 5403 	mov	a,#0x06
      001BCC 26               [12] 5404 	add	a,@r0
      001BCD FD               [12] 5405 	mov	r5,a
      001BCE E4               [12] 5406 	clr	a
      001BCF 08               [12] 5407 	inc	r0
      001BD0 36               [12] 5408 	addc	a,@r0
      001BD1 FE               [12] 5409 	mov	r6,a
      001BD2 08               [12] 5410 	inc	r0
      001BD3 86 07            [24] 5411 	mov	ar7,@r0
      001BD5 8D 82            [24] 5412 	mov	dpl,r5
      001BD7 8E 83            [24] 5413 	mov	dph,r6
      001BD9 8F F0            [24] 5414 	mov	b,r7
      001BDB 12r00r00         [24] 5415 	lcall	__gptrget
      001BDE FD               [12] 5416 	mov	r5,a
      001BDF 7F 00            [12] 5417 	mov	r7,#0x00
      001BE1 C0 05            [24] 5418 	push	ar5
      001BE3 C0 07            [24] 5419 	push	ar7
      001BE5 74r8F            [12] 5420 	mov	a,#___str_13
      001BE7 C0 E0            [24] 5421 	push	acc
      001BE9 74s00            [12] 5422 	mov	a,#(___str_13 >> 8)
      001BEB C0 E0            [24] 5423 	push	acc
      001BED 74 80            [12] 5424 	mov	a,#0x80
      001BEF C0 E0            [24] 5425 	push	acc
      001BF1 12r00r00         [24] 5426 	lcall	_printf
      001BF4 E5 81            [12] 5427 	mov	a,sp
      001BF6 24 FB            [12] 5428 	add	a,#0xfb
      001BF8 F5 81            [12] 5429 	mov	sp,a
                                   5430 ;	calc.c:336: printstr("HhOo\tbase 16 10 8 2\r\n");
      001BFA 7DrA4            [12] 5431 	mov	r5,#___str_14
      001BFC 7Es00            [12] 5432 	mov	r6,#(___str_14 >> 8)
      001BFE 7F 80            [12] 5433 	mov	r7,#0x80
                                   5434 ;	calc.c:50: return;
      001C00                       5435 00144$:
                                   5436 ;	calc.c:48: for (; *s; s++) putchar(*s);
      001C00 8D 82            [24] 5437 	mov	dpl,r5
      001C02 8E 83            [24] 5438 	mov	dph,r6
      001C04 8F F0            [24] 5439 	mov	b,r7
      001C06 12r00r00         [24] 5440 	lcall	__gptrget
      001C09 FC               [12] 5441 	mov	r4,a
      001C0A 60 10            [24] 5442 	jz	00104$
      001C0C 7B 00            [12] 5443 	mov	r3,#0x00
      001C0E 8C 82            [24] 5444 	mov	dpl,r4
      001C10 8B 83            [24] 5445 	mov	dph,r3
      001C12 12r00r00         [24] 5446 	lcall	_putchar
      001C15 0D               [12] 5447 	inc	r5
                                   5448 ;	calc.c:336: printstr("HhOo\tbase 16 10 8 2\r\n");
      001C16 BD 00 E7         [24] 5449 	cjne	r5,#0x00,00144$
      001C19 0E               [12] 5450 	inc	r6
      001C1A 80 E4            [24] 5451 	sjmp	00144$
      001C1C                       5452 00104$:
                                   5453 ;	calc.c:337: printstr("p\tpeek top\r\n");
      001C1C 7DrBA            [12] 5454 	mov	r5,#___str_15
      001C1E 7Es00            [12] 5455 	mov	r6,#(___str_15 >> 8)
      001C20 7F 80            [12] 5456 	mov	r7,#0x80
                                   5457 ;	calc.c:50: return;
      001C22                       5458 00147$:
                                   5459 ;	calc.c:48: for (; *s; s++) putchar(*s);
      001C22 8D 82            [24] 5460 	mov	dpl,r5
      001C24 8E 83            [24] 5461 	mov	dph,r6
      001C26 8F F0            [24] 5462 	mov	b,r7
      001C28 12r00r00         [24] 5463 	lcall	__gptrget
      001C2B FC               [12] 5464 	mov	r4,a
      001C2C 60 10            [24] 5465 	jz	00106$
      001C2E 7B 00            [12] 5466 	mov	r3,#0x00
      001C30 8C 82            [24] 5467 	mov	dpl,r4
      001C32 8B 83            [24] 5468 	mov	dph,r3
      001C34 12r00r00         [24] 5469 	lcall	_putchar
      001C37 0D               [12] 5470 	inc	r5
                                   5471 ;	calc.c:337: printstr("p\tpeek top\r\n");
      001C38 BD 00 E7         [24] 5472 	cjne	r5,#0x00,00147$
      001C3B 0E               [12] 5473 	inc	r6
      001C3C 80 E4            [24] 5474 	sjmp	00147$
      001C3E                       5475 00106$:
                                   5476 ;	calc.c:338: printstr("P\tprint stack\r\n");
      001C3E 7DrC7            [12] 5477 	mov	r5,#___str_16
      001C40 7Es00            [12] 5478 	mov	r6,#(___str_16 >> 8)
      001C42 7F 80            [12] 5479 	mov	r7,#0x80
                                   5480 ;	calc.c:50: return;
      001C44                       5481 00150$:
                                   5482 ;	calc.c:48: for (; *s; s++) putchar(*s);
      001C44 8D 82            [24] 5483 	mov	dpl,r5
      001C46 8E 83            [24] 5484 	mov	dph,r6
      001C48 8F F0            [24] 5485 	mov	b,r7
      001C4A 12r00r00         [24] 5486 	lcall	__gptrget
      001C4D FC               [12] 5487 	mov	r4,a
      001C4E 60 10            [24] 5488 	jz	00108$
      001C50 7B 00            [12] 5489 	mov	r3,#0x00
      001C52 8C 82            [24] 5490 	mov	dpl,r4
      001C54 8B 83            [24] 5491 	mov	dph,r3
      001C56 12r00r00         [24] 5492 	lcall	_putchar
      001C59 0D               [12] 5493 	inc	r5
                                   5494 ;	calc.c:338: printstr("P\tprint stack\r\n");
      001C5A BD 00 E7         [24] 5495 	cjne	r5,#0x00,00150$
      001C5D 0E               [12] 5496 	inc	r6
      001C5E 80 E4            [24] 5497 	sjmp	00150$
      001C60                       5498 00108$:
                                   5499 ;	calc.c:339: printstr("v.\tpop top\r\n");
      001C60 7DrD7            [12] 5500 	mov	r5,#___str_17
      001C62 7Es00            [12] 5501 	mov	r6,#(___str_17 >> 8)
      001C64 7F 80            [12] 5502 	mov	r7,#0x80
                                   5503 ;	calc.c:50: return;
      001C66                       5504 00153$:
                                   5505 ;	calc.c:48: for (; *s; s++) putchar(*s);
      001C66 8D 82            [24] 5506 	mov	dpl,r5
      001C68 8E 83            [24] 5507 	mov	dph,r6
      001C6A 8F F0            [24] 5508 	mov	b,r7
      001C6C 12r00r00         [24] 5509 	lcall	__gptrget
      001C6F FC               [12] 5510 	mov	r4,a
      001C70 60 10            [24] 5511 	jz	00110$
      001C72 7B 00            [12] 5512 	mov	r3,#0x00
      001C74 8C 82            [24] 5513 	mov	dpl,r4
      001C76 8B 83            [24] 5514 	mov	dph,r3
      001C78 12r00r00         [24] 5515 	lcall	_putchar
      001C7B 0D               [12] 5516 	inc	r5
                                   5517 ;	calc.c:339: printstr("v.\tpop top\r\n");
      001C7C BD 00 E7         [24] 5518 	cjne	r5,#0x00,00153$
      001C7F 0E               [12] 5519 	inc	r6
      001C80 80 E4            [24] 5520 	sjmp	00153$
      001C82                       5521 00110$:
                                   5522 ;	calc.c:340: printstr("V\tpop all\r\n");
      001C82 7DrE4            [12] 5523 	mov	r5,#___str_18
      001C84 7Es00            [12] 5524 	mov	r6,#(___str_18 >> 8)
      001C86 7F 80            [12] 5525 	mov	r7,#0x80
                                   5526 ;	calc.c:50: return;
      001C88                       5527 00156$:
                                   5528 ;	calc.c:48: for (; *s; s++) putchar(*s);
      001C88 8D 82            [24] 5529 	mov	dpl,r5
      001C8A 8E 83            [24] 5530 	mov	dph,r6
      001C8C 8F F0            [24] 5531 	mov	b,r7
      001C8E 12r00r00         [24] 5532 	lcall	__gptrget
      001C91 FC               [12] 5533 	mov	r4,a
      001C92 60 10            [24] 5534 	jz	00112$
      001C94 7B 00            [12] 5535 	mov	r3,#0x00
      001C96 8C 82            [24] 5536 	mov	dpl,r4
      001C98 8B 83            [24] 5537 	mov	dph,r3
      001C9A 12r00r00         [24] 5538 	lcall	_putchar
      001C9D 0D               [12] 5539 	inc	r5
                                   5540 ;	calc.c:340: printstr("V\tpop all\r\n");
      001C9E BD 00 E7         [24] 5541 	cjne	r5,#0x00,00156$
      001CA1 0E               [12] 5542 	inc	r6
      001CA2 80 E4            [24] 5543 	sjmp	00156$
      001CA4                       5544 00112$:
                                   5545 ;	calc.c:341: printstr("i\treset acc\r\n");
      001CA4 7DrF0            [12] 5546 	mov	r5,#___str_19
      001CA6 7Es00            [12] 5547 	mov	r6,#(___str_19 >> 8)
      001CA8 7F 80            [12] 5548 	mov	r7,#0x80
                                   5549 ;	calc.c:50: return;
      001CAA                       5550 00159$:
                                   5551 ;	calc.c:48: for (; *s; s++) putchar(*s);
      001CAA 8D 82            [24] 5552 	mov	dpl,r5
      001CAC 8E 83            [24] 5553 	mov	dph,r6
      001CAE 8F F0            [24] 5554 	mov	b,r7
      001CB0 12r00r00         [24] 5555 	lcall	__gptrget
      001CB3 FC               [12] 5556 	mov	r4,a
      001CB4 60 10            [24] 5557 	jz	00114$
      001CB6 7B 00            [12] 5558 	mov	r3,#0x00
      001CB8 8C 82            [24] 5559 	mov	dpl,r4
      001CBA 8B 83            [24] 5560 	mov	dph,r3
      001CBC 12r00r00         [24] 5561 	lcall	_putchar
      001CBF 0D               [12] 5562 	inc	r5
                                   5563 ;	calc.c:341: printstr("i\treset acc\r\n");
      001CC0 BD 00 E7         [24] 5564 	cjne	r5,#0x00,00159$
      001CC3 0E               [12] 5565 	inc	r6
      001CC4 80 E4            [24] 5566 	sjmp	00159$
      001CC6                       5567 00114$:
                                   5568 ;	calc.c:342: printstr("I\treset and discard acc\r\n");
      001CC6 7DrFE            [12] 5569 	mov	r5,#___str_20
      001CC8 7Es00            [12] 5570 	mov	r6,#(___str_20 >> 8)
      001CCA 7F 80            [12] 5571 	mov	r7,#0x80
                                   5572 ;	calc.c:50: return;
      001CCC                       5573 00162$:
                                   5574 ;	calc.c:48: for (; *s; s++) putchar(*s);
      001CCC 8D 82            [24] 5575 	mov	dpl,r5
      001CCE 8E 83            [24] 5576 	mov	dph,r6
      001CD0 8F F0            [24] 5577 	mov	b,r7
      001CD2 12r00r00         [24] 5578 	lcall	__gptrget
      001CD5 FC               [12] 5579 	mov	r4,a
      001CD6 60 10            [24] 5580 	jz	00116$
      001CD8 7B 00            [12] 5581 	mov	r3,#0x00
      001CDA 8C 82            [24] 5582 	mov	dpl,r4
      001CDC 8B 83            [24] 5583 	mov	dph,r3
      001CDE 12r00r00         [24] 5584 	lcall	_putchar
      001CE1 0D               [12] 5585 	inc	r5
                                   5586 ;	calc.c:342: printstr("I\treset and discard acc\r\n");
      001CE2 BD 00 E7         [24] 5587 	cjne	r5,#0x00,00162$
      001CE5 0E               [12] 5588 	inc	r6
      001CE6 80 E4            [24] 5589 	sjmp	00162$
      001CE8                       5590 00116$:
                                   5591 ;	calc.c:343: printstr("x\texchange top 2\r\n");
      001CE8 7Dr18            [12] 5592 	mov	r5,#___str_21
      001CEA 7Es01            [12] 5593 	mov	r6,#(___str_21 >> 8)
      001CEC 7F 80            [12] 5594 	mov	r7,#0x80
                                   5595 ;	calc.c:50: return;
      001CEE                       5596 00165$:
                                   5597 ;	calc.c:48: for (; *s; s++) putchar(*s);
      001CEE 8D 82            [24] 5598 	mov	dpl,r5
      001CF0 8E 83            [24] 5599 	mov	dph,r6
      001CF2 8F F0            [24] 5600 	mov	b,r7
      001CF4 12r00r00         [24] 5601 	lcall	__gptrget
      001CF7 FC               [12] 5602 	mov	r4,a
      001CF8 60 10            [24] 5603 	jz	00118$
      001CFA 7B 00            [12] 5604 	mov	r3,#0x00
      001CFC 8C 82            [24] 5605 	mov	dpl,r4
      001CFE 8B 83            [24] 5606 	mov	dph,r3
      001D00 12r00r00         [24] 5607 	lcall	_putchar
      001D03 0D               [12] 5608 	inc	r5
                                   5609 ;	calc.c:343: printstr("x\texchange top 2\r\n");
      001D04 BD 00 E7         [24] 5610 	cjne	r5,#0x00,00165$
      001D07 0E               [12] 5611 	inc	r6
      001D08 80 E4            [24] 5612 	sjmp	00165$
      001D0A                       5613 00118$:
                                   5614 ;	calc.c:344: printstr("+\tadd top 2\r\n");
      001D0A 7Dr2B            [12] 5615 	mov	r5,#___str_22
      001D0C 7Es01            [12] 5616 	mov	r6,#(___str_22 >> 8)
      001D0E 7F 80            [12] 5617 	mov	r7,#0x80
                                   5618 ;	calc.c:50: return;
      001D10                       5619 00168$:
                                   5620 ;	calc.c:48: for (; *s; s++) putchar(*s);
      001D10 8D 82            [24] 5621 	mov	dpl,r5
      001D12 8E 83            [24] 5622 	mov	dph,r6
      001D14 8F F0            [24] 5623 	mov	b,r7
      001D16 12r00r00         [24] 5624 	lcall	__gptrget
      001D19 FC               [12] 5625 	mov	r4,a
      001D1A 60 10            [24] 5626 	jz	00120$
      001D1C 7B 00            [12] 5627 	mov	r3,#0x00
      001D1E 8C 82            [24] 5628 	mov	dpl,r4
      001D20 8B 83            [24] 5629 	mov	dph,r3
      001D22 12r00r00         [24] 5630 	lcall	_putchar
      001D25 0D               [12] 5631 	inc	r5
                                   5632 ;	calc.c:344: printstr("+\tadd top 2\r\n");
      001D26 BD 00 E7         [24] 5633 	cjne	r5,#0x00,00168$
      001D29 0E               [12] 5634 	inc	r6
      001D2A 80 E4            [24] 5635 	sjmp	00168$
      001D2C                       5636 00120$:
                                   5637 ;	calc.c:345: printstr("-\tsubtract top 2\r\n");
      001D2C 7Dr39            [12] 5638 	mov	r5,#___str_23
      001D2E 7Es01            [12] 5639 	mov	r6,#(___str_23 >> 8)
      001D30 7F 80            [12] 5640 	mov	r7,#0x80
                                   5641 ;	calc.c:50: return;
      001D32                       5642 00171$:
                                   5643 ;	calc.c:48: for (; *s; s++) putchar(*s);
      001D32 8D 82            [24] 5644 	mov	dpl,r5
      001D34 8E 83            [24] 5645 	mov	dph,r6
      001D36 8F F0            [24] 5646 	mov	b,r7
      001D38 12r00r00         [24] 5647 	lcall	__gptrget
      001D3B FC               [12] 5648 	mov	r4,a
      001D3C 60 10            [24] 5649 	jz	00122$
      001D3E 7B 00            [12] 5650 	mov	r3,#0x00
      001D40 8C 82            [24] 5651 	mov	dpl,r4
      001D42 8B 83            [24] 5652 	mov	dph,r3
      001D44 12r00r00         [24] 5653 	lcall	_putchar
      001D47 0D               [12] 5654 	inc	r5
                                   5655 ;	calc.c:345: printstr("-\tsubtract top 2\r\n");
      001D48 BD 00 E7         [24] 5656 	cjne	r5,#0x00,00171$
      001D4B 0E               [12] 5657 	inc	r6
      001D4C 80 E4            [24] 5658 	sjmp	00171$
      001D4E                       5659 00122$:
                                   5660 ;	calc.c:346: printstr("*\tmultiply top 2\r\n");
      001D4E 7Dr4C            [12] 5661 	mov	r5,#___str_24
      001D50 7Es01            [12] 5662 	mov	r6,#(___str_24 >> 8)
      001D52 7F 80            [12] 5663 	mov	r7,#0x80
                                   5664 ;	calc.c:50: return;
      001D54                       5665 00174$:
                                   5666 ;	calc.c:48: for (; *s; s++) putchar(*s);
      001D54 8D 82            [24] 5667 	mov	dpl,r5
      001D56 8E 83            [24] 5668 	mov	dph,r6
      001D58 8F F0            [24] 5669 	mov	b,r7
      001D5A 12r00r00         [24] 5670 	lcall	__gptrget
      001D5D FC               [12] 5671 	mov	r4,a
      001D5E 60 10            [24] 5672 	jz	00124$
      001D60 7B 00            [12] 5673 	mov	r3,#0x00
      001D62 8C 82            [24] 5674 	mov	dpl,r4
      001D64 8B 83            [24] 5675 	mov	dph,r3
      001D66 12r00r00         [24] 5676 	lcall	_putchar
      001D69 0D               [12] 5677 	inc	r5
                                   5678 ;	calc.c:346: printstr("*\tmultiply top 2\r\n");
      001D6A BD 00 E7         [24] 5679 	cjne	r5,#0x00,00174$
      001D6D 0E               [12] 5680 	inc	r6
      001D6E 80 E4            [24] 5681 	sjmp	00174$
      001D70                       5682 00124$:
                                   5683 ;	calc.c:347: printstr("/\tdivide top 2\r\n");
      001D70 7Dr5F            [12] 5684 	mov	r5,#___str_25
      001D72 7Es01            [12] 5685 	mov	r6,#(___str_25 >> 8)
      001D74 7F 80            [12] 5686 	mov	r7,#0x80
                                   5687 ;	calc.c:50: return;
      001D76                       5688 00177$:
                                   5689 ;	calc.c:48: for (; *s; s++) putchar(*s);
      001D76 8D 82            [24] 5690 	mov	dpl,r5
      001D78 8E 83            [24] 5691 	mov	dph,r6
      001D7A 8F F0            [24] 5692 	mov	b,r7
      001D7C 12r00r00         [24] 5693 	lcall	__gptrget
      001D7F FC               [12] 5694 	mov	r4,a
      001D80 60 10            [24] 5695 	jz	00126$
      001D82 7B 00            [12] 5696 	mov	r3,#0x00
      001D84 8C 82            [24] 5697 	mov	dpl,r4
      001D86 8B 83            [24] 5698 	mov	dph,r3
      001D88 12r00r00         [24] 5699 	lcall	_putchar
      001D8B 0D               [12] 5700 	inc	r5
                                   5701 ;	calc.c:347: printstr("/\tdivide top 2\r\n");
      001D8C BD 00 E7         [24] 5702 	cjne	r5,#0x00,00177$
      001D8F 0E               [12] 5703 	inc	r6
      001D90 80 E4            [24] 5704 	sjmp	00177$
      001D92                       5705 00126$:
                                   5706 ;	calc.c:348: printstr("%\tmodulus top 2\r\n");
      001D92 7Dr70            [12] 5707 	mov	r5,#___str_26
      001D94 7Es01            [12] 5708 	mov	r6,#(___str_26 >> 8)
      001D96 7F 80            [12] 5709 	mov	r7,#0x80
                                   5710 ;	calc.c:50: return;
      001D98                       5711 00180$:
                                   5712 ;	calc.c:48: for (; *s; s++) putchar(*s);
      001D98 8D 82            [24] 5713 	mov	dpl,r5
      001D9A 8E 83            [24] 5714 	mov	dph,r6
      001D9C 8F F0            [24] 5715 	mov	b,r7
      001D9E 12r00r00         [24] 5716 	lcall	__gptrget
      001DA1 FC               [12] 5717 	mov	r4,a
      001DA2 60 10            [24] 5718 	jz	00128$
      001DA4 7B 00            [12] 5719 	mov	r3,#0x00
      001DA6 8C 82            [24] 5720 	mov	dpl,r4
      001DA8 8B 83            [24] 5721 	mov	dph,r3
      001DAA 12r00r00         [24] 5722 	lcall	_putchar
      001DAD 0D               [12] 5723 	inc	r5
                                   5724 ;	calc.c:348: printstr("%\tmodulus top 2\r\n");
      001DAE BD 00 E7         [24] 5725 	cjne	r5,#0x00,00180$
      001DB1 0E               [12] 5726 	inc	r6
      001DB2 80 E4            [24] 5727 	sjmp	00180$
      001DB4                       5728 00128$:
                                   5729 ;	calc.c:349: printstr("&\tand top 2\r\n");
      001DB4 7Dr82            [12] 5730 	mov	r5,#___str_27
      001DB6 7Es01            [12] 5731 	mov	r6,#(___str_27 >> 8)
      001DB8 7F 80            [12] 5732 	mov	r7,#0x80
                                   5733 ;	calc.c:50: return;
      001DBA                       5734 00183$:
                                   5735 ;	calc.c:48: for (; *s; s++) putchar(*s);
      001DBA 8D 82            [24] 5736 	mov	dpl,r5
      001DBC 8E 83            [24] 5737 	mov	dph,r6
      001DBE 8F F0            [24] 5738 	mov	b,r7
      001DC0 12r00r00         [24] 5739 	lcall	__gptrget
      001DC3 FC               [12] 5740 	mov	r4,a
      001DC4 60 10            [24] 5741 	jz	00130$
      001DC6 7B 00            [12] 5742 	mov	r3,#0x00
      001DC8 8C 82            [24] 5743 	mov	dpl,r4
      001DCA 8B 83            [24] 5744 	mov	dph,r3
      001DCC 12r00r00         [24] 5745 	lcall	_putchar
      001DCF 0D               [12] 5746 	inc	r5
                                   5747 ;	calc.c:349: printstr("&\tand top 2\r\n");
      001DD0 BD 00 E7         [24] 5748 	cjne	r5,#0x00,00183$
      001DD3 0E               [12] 5749 	inc	r6
      001DD4 80 E4            [24] 5750 	sjmp	00183$
      001DD6                       5751 00130$:
                                   5752 ;	calc.c:350: printstr("|\tor top 2\r\n");
      001DD6 7Dr90            [12] 5753 	mov	r5,#___str_28
      001DD8 7Es01            [12] 5754 	mov	r6,#(___str_28 >> 8)
      001DDA 7F 80            [12] 5755 	mov	r7,#0x80
                                   5756 ;	calc.c:50: return;
      001DDC                       5757 00186$:
                                   5758 ;	calc.c:48: for (; *s; s++) putchar(*s);
      001DDC 8D 82            [24] 5759 	mov	dpl,r5
      001DDE 8E 83            [24] 5760 	mov	dph,r6
      001DE0 8F F0            [24] 5761 	mov	b,r7
      001DE2 12r00r00         [24] 5762 	lcall	__gptrget
      001DE5 FC               [12] 5763 	mov	r4,a
      001DE6 60 10            [24] 5764 	jz	00132$
      001DE8 7B 00            [12] 5765 	mov	r3,#0x00
      001DEA 8C 82            [24] 5766 	mov	dpl,r4
      001DEC 8B 83            [24] 5767 	mov	dph,r3
      001DEE 12r00r00         [24] 5768 	lcall	_putchar
      001DF1 0D               [12] 5769 	inc	r5
                                   5770 ;	calc.c:350: printstr("|\tor top 2\r\n");
      001DF2 BD 00 E7         [24] 5771 	cjne	r5,#0x00,00186$
      001DF5 0E               [12] 5772 	inc	r6
      001DF6 80 E4            [24] 5773 	sjmp	00186$
      001DF8                       5774 00132$:
                                   5775 ;	calc.c:351: printstr("^\txor top 2\r\n");
      001DF8 7Dr9D            [12] 5776 	mov	r5,#___str_29
      001DFA 7Es01            [12] 5777 	mov	r6,#(___str_29 >> 8)
      001DFC 7F 80            [12] 5778 	mov	r7,#0x80
                                   5779 ;	calc.c:50: return;
      001DFE                       5780 00189$:
                                   5781 ;	calc.c:48: for (; *s; s++) putchar(*s);
      001DFE 8D 82            [24] 5782 	mov	dpl,r5
      001E00 8E 83            [24] 5783 	mov	dph,r6
      001E02 8F F0            [24] 5784 	mov	b,r7
      001E04 12r00r00         [24] 5785 	lcall	__gptrget
      001E07 FC               [12] 5786 	mov	r4,a
      001E08 60 10            [24] 5787 	jz	00134$
      001E0A 7B 00            [12] 5788 	mov	r3,#0x00
      001E0C 8C 82            [24] 5789 	mov	dpl,r4
      001E0E 8B 83            [24] 5790 	mov	dph,r3
      001E10 12r00r00         [24] 5791 	lcall	_putchar
      001E13 0D               [12] 5792 	inc	r5
                                   5793 ;	calc.c:351: printstr("^\txor top 2\r\n");
      001E14 BD 00 E7         [24] 5794 	cjne	r5,#0x00,00189$
      001E17 0E               [12] 5795 	inc	r6
      001E18 80 E4            [24] 5796 	sjmp	00189$
      001E1A                       5797 00134$:
                                   5798 ;	calc.c:352: printstr("~\tbitwise not top\r\n");
      001E1A 7DrAB            [12] 5799 	mov	r5,#___str_30
      001E1C 7Es01            [12] 5800 	mov	r6,#(___str_30 >> 8)
      001E1E 7F 80            [12] 5801 	mov	r7,#0x80
                                   5802 ;	calc.c:50: return;
      001E20                       5803 00192$:
                                   5804 ;	calc.c:48: for (; *s; s++) putchar(*s);
      001E20 8D 82            [24] 5805 	mov	dpl,r5
      001E22 8E 83            [24] 5806 	mov	dph,r6
      001E24 8F F0            [24] 5807 	mov	b,r7
      001E26 12r00r00         [24] 5808 	lcall	__gptrget
      001E29 FC               [12] 5809 	mov	r4,a
      001E2A 60 10            [24] 5810 	jz	00136$
      001E2C 7B 00            [12] 5811 	mov	r3,#0x00
      001E2E 8C 82            [24] 5812 	mov	dpl,r4
      001E30 8B 83            [24] 5813 	mov	dph,r3
      001E32 12r00r00         [24] 5814 	lcall	_putchar
      001E35 0D               [12] 5815 	inc	r5
                                   5816 ;	calc.c:352: printstr("~\tbitwise not top\r\n");
      001E36 BD 00 E7         [24] 5817 	cjne	r5,#0x00,00192$
      001E39 0E               [12] 5818 	inc	r6
      001E3A 80 E4            [24] 5819 	sjmp	00192$
      001E3C                       5820 00136$:
                                   5821 ;	calc.c:353: printstr("?\thelp\r\n");
      001E3C 7DrBF            [12] 5822 	mov	r5,#___str_31
      001E3E 7Es01            [12] 5823 	mov	r6,#(___str_31 >> 8)
      001E40 7F 80            [12] 5824 	mov	r7,#0x80
                                   5825 ;	calc.c:50: return;
      001E42                       5826 00195$:
                                   5827 ;	calc.c:48: for (; *s; s++) putchar(*s);
      001E42 8D 82            [24] 5828 	mov	dpl,r5
      001E44 8E 83            [24] 5829 	mov	dph,r6
      001E46 8F F0            [24] 5830 	mov	b,r7
      001E48 12r00r00         [24] 5831 	lcall	__gptrget
      001E4B FC               [12] 5832 	mov	r4,a
      001E4C 60 10            [24] 5833 	jz	00138$
      001E4E 7B 00            [12] 5834 	mov	r3,#0x00
      001E50 8C 82            [24] 5835 	mov	dpl,r4
      001E52 8B 83            [24] 5836 	mov	dph,r3
      001E54 12r00r00         [24] 5837 	lcall	_putchar
      001E57 0D               [12] 5838 	inc	r5
                                   5839 ;	calc.c:353: printstr("?\thelp\r\n");
      001E58 BD 00 E7         [24] 5840 	cjne	r5,#0x00,00195$
      001E5B 0E               [12] 5841 	inc	r6
      001E5C 80 E4            [24] 5842 	sjmp	00195$
      001E5E                       5843 00138$:
                                   5844 ;	calc.c:354: printstr("q\tquit\r\n");
      001E5E 7DrC8            [12] 5845 	mov	r5,#___str_32
      001E60 7Es01            [12] 5846 	mov	r6,#(___str_32 >> 8)
      001E62 7F 80            [12] 5847 	mov	r7,#0x80
                                   5848 ;	calc.c:50: return;
      001E64                       5849 00198$:
                                   5850 ;	calc.c:48: for (; *s; s++) putchar(*s);
      001E64 8D 82            [24] 5851 	mov	dpl,r5
      001E66 8E 83            [24] 5852 	mov	dph,r6
      001E68 8F F0            [24] 5853 	mov	b,r7
      001E6A 12r00r00         [24] 5854 	lcall	__gptrget
      001E6D FC               [12] 5855 	mov	r4,a
      001E6E 60 10            [24] 5856 	jz	00140$
      001E70 7B 00            [12] 5857 	mov	r3,#0x00
      001E72 8C 82            [24] 5858 	mov	dpl,r4
      001E74 8B 83            [24] 5859 	mov	dph,r3
      001E76 12r00r00         [24] 5860 	lcall	_putchar
      001E79 0D               [12] 5861 	inc	r5
                                   5862 ;	calc.c:354: printstr("q\tquit\r\n");
      001E7A BD 00 E7         [24] 5863 	cjne	r5,#0x00,00198$
      001E7D 0E               [12] 5864 	inc	r6
      001E7E 80 E4            [24] 5865 	sjmp	00198$
      001E80                       5866 00140$:
                                   5867 ;	calc.c:356: return 1;
      001E80 90 00 01         [24] 5868 	mov	dptr,#0x0001
                                   5869 ;	calc.c:357: }
      001E83 85*00 81         [24] 5870 	mov	sp,_bp
      001E86 D0*00            [24] 5871 	pop	_bp
      001E88 22               [24] 5872 	ret
                                   5873 ;------------------------------------------------------------
                                   5874 ;Allocation info for local variables in function 'main'
                                   5875 ;------------------------------------------------------------
                                   5876 ;input                     Allocated to registers r6 r7 
                                   5877 ;sloc0                     Allocated to stack - _bp +3
                                   5878 ;------------------------------------------------------------
                                   5879 ;	calc.c:386: void main(void) {
                                   5880 ;	-----------------------------------------
                                   5881 ;	 function main
                                   5882 ;	-----------------------------------------
      001E89                       5883 _main:
                                   5884 ;	calc.c:389: c.base = 10;
      001E89 90r00r0C         [24] 5885 	mov	dptr,#_c
      001E8C 74 0A            [12] 5886 	mov	a,#0x0a
      001E8E F0               [24] 5887 	movx	@dptr,a
      001E8F E4               [12] 5888 	clr	a
      001E90 A3               [24] 5889 	inc	dptr
      001E91 F0               [24] 5890 	movx	@dptr,a
                                   5891 ;	calc.c:390: c.acc = 0l;
      001E92 90r00r0E         [24] 5892 	mov	dptr,#(_c + 0x0002)
      001E95 F0               [24] 5893 	movx	@dptr,a
      001E96 A3               [24] 5894 	inc	dptr
      001E97 F0               [24] 5895 	movx	@dptr,a
      001E98 A3               [24] 5896 	inc	dptr
      001E99 F0               [24] 5897 	movx	@dptr,a
      001E9A A3               [24] 5898 	inc	dptr
      001E9B F0               [24] 5899 	movx	@dptr,a
                                   5900 ;	calc.c:391: c.acc_valid = (char)0;
      001E9C 90r00r12         [24] 5901 	mov	dptr,#(_c + 0x0006)
      001E9F F0               [24] 5902 	movx	@dptr,a
                                   5903 ;	calc.c:392: c.digit[0] = c.digit[1] = '\0';
      001EA0 90r00r14         [24] 5904 	mov	dptr,#(_c + 0x0008)
      001EA3 F0               [24] 5905 	movx	@dptr,a
      001EA4 90r00r13         [24] 5906 	mov	dptr,#(_c + 0x0007)
      001EA7 F0               [24] 5907 	movx	@dptr,a
                                   5908 ;	calc.c:393: stack_init(&c.s);	
      001EA8 90r00r15         [24] 5909 	mov	dptr,#(_c + 0x0009)
      001EAB 75 F0 00         [24] 5910 	mov	b,#0x00
      001EAE 12r00r00         [24] 5911 	lcall	_stack_init
                                   5912 ;	calc.c:394: state_init(&s, STATE_START, STATE_FINAL, UNDEF, deltas, &c);
      001EB1 74r0C            [12] 5913 	mov	a,#_c
      001EB3 C0 E0            [24] 5914 	push	acc
      001EB5 74s00            [12] 5915 	mov	a,#(_c >> 8)
      001EB7 C0 E0            [24] 5916 	push	acc
      001EB9 E4               [12] 5917 	clr	a
      001EBA C0 E0            [24] 5918 	push	acc
      001EBC 74r00            [12] 5919 	mov	a,#_deltas
      001EBE C0 E0            [24] 5920 	push	acc
      001EC0 74s00            [12] 5921 	mov	a,#(_deltas >> 8)
      001EC2 C0 E0            [24] 5922 	push	acc
      001EC4 E4               [12] 5923 	clr	a
      001EC5 C0 E0            [24] 5924 	push	acc
      001EC7 C0 E0            [24] 5925 	push	acc
      001EC9 74 80            [12] 5926 	mov	a,#0x80
      001ECB C0 E0            [24] 5927 	push	acc
      001ECD 74 03            [12] 5928 	mov	a,#0x03
      001ECF C0 E0            [24] 5929 	push	acc
      001ED1 E4               [12] 5930 	clr	a
      001ED2 C0 E0            [24] 5931 	push	acc
      001ED4 C0 E0            [24] 5932 	push	acc
      001ED6 C0 E0            [24] 5933 	push	acc
      001ED8 90r00r00         [24] 5934 	mov	dptr,#_s
      001EDB 75 F0 00         [24] 5935 	mov	b,#0x00
      001EDE 12r00r00         [24] 5936 	lcall	_state_init
      001EE1 E5 81            [12] 5937 	mov	a,sp
      001EE3 24 F4            [12] 5938 	add	a,#0xf4
      001EE5 F5 81            [12] 5939 	mov	sp,a
                                   5940 ;	calc.c:396: while (1) {
      001EE7                       5941 00158$:
                                   5942 ;	calc.c:397: input = getchar();
      001EE7 12r00r05         [24] 5943 	lcall	_getchar
      001EEA AE 82            [24] 5944 	mov	r6,dpl
      001EEC AF 83            [24] 5945 	mov	r7,dph
                                   5946 ;	calc.c:398: c.digit[0] = (char)input;
      001EEE 8E 05            [24] 5947 	mov	ar5,r6
      001EF0 90r00r13         [24] 5948 	mov	dptr,#(_c + 0x0007)
      001EF3 ED               [12] 5949 	mov	a,r5
      001EF4 F0               [24] 5950 	movx	@dptr,a
                                   5951 ;	calc.c:399: (void)putchar(input);
      001EF5 8E 82            [24] 5952 	mov	dpl,r6
      001EF7 8F 83            [24] 5953 	mov	dph,r7
      001EF9 12r00r00         [24] 5954 	lcall	_putchar
                                   5955 ;	calc.c:400: if ((char)input == 'q') {
      001EFC BD 71 29         [24] 5956 	cjne	r5,#0x71,00155$
                                   5957 ;	calc.c:401: if (state_exec(&s, EVENT_TERM) <= 0) break;
      001EFF 74 07            [12] 5958 	mov	a,#0x07
      001F01 C0 E0            [24] 5959 	push	acc
      001F03 E4               [12] 5960 	clr	a
      001F04 C0 E0            [24] 5961 	push	acc
      001F06 90r00r00         [24] 5962 	mov	dptr,#_s
      001F09 75 F0 00         [24] 5963 	mov	b,#0x00
      001F0C 12r00r00         [24] 5964 	lcall	_state_exec
      001F0F AB 82            [24] 5965 	mov	r3,dpl
      001F11 AC 83            [24] 5966 	mov	r4,dph
      001F13 15 81            [12] 5967 	dec	sp
      001F15 15 81            [12] 5968 	dec	sp
      001F17 C3               [12] 5969 	clr	c
      001F18 E4               [12] 5970 	clr	a
      001F19 9B               [12] 5971 	subb	a,r3
      001F1A 74 80            [12] 5972 	mov	a,#(0x00 ^ 0x80)
      001F1C 8C F0            [24] 5973 	mov	b,r4
      001F1E 63 F0 80         [24] 5974 	xrl	b,#0x80
      001F21 95 F0            [12] 5975 	subb	a,b
      001F23 40 C2            [24] 5976 	jc	00158$
      001F25 02r20rDC         [24] 5977 	ljmp	00159$
      001F28                       5978 00155$:
                                   5979 ;	calc.c:402: } else if ((char)input == '?') {
      001F28 BD 3F 29         [24] 5980 	cjne	r5,#0x3f,00152$
                                   5981 ;	calc.c:403: if (state_exec(&s, EVENT_HELP) <= 0) break;
      001F2B 74 03            [12] 5982 	mov	a,#0x03
      001F2D C0 E0            [24] 5983 	push	acc
      001F2F E4               [12] 5984 	clr	a
      001F30 C0 E0            [24] 5985 	push	acc
      001F32 90r00r00         [24] 5986 	mov	dptr,#_s
      001F35 75 F0 00         [24] 5987 	mov	b,#0x00
      001F38 12r00r00         [24] 5988 	lcall	_state_exec
      001F3B AB 82            [24] 5989 	mov	r3,dpl
      001F3D AC 83            [24] 5990 	mov	r4,dph
      001F3F 15 81            [12] 5991 	dec	sp
      001F41 15 81            [12] 5992 	dec	sp
      001F43 C3               [12] 5993 	clr	c
      001F44 E4               [12] 5994 	clr	a
      001F45 9B               [12] 5995 	subb	a,r3
      001F46 74 80            [12] 5996 	mov	a,#(0x00 ^ 0x80)
      001F48 8C F0            [24] 5997 	mov	b,r4
      001F4A 63 F0 80         [24] 5998 	xrl	b,#0x80
      001F4D 95 F0            [12] 5999 	subb	a,b
      001F4F 40 96            [24] 6000 	jc	00158$
      001F51 02r20rDC         [24] 6001 	ljmp	00159$
      001F54                       6002 00152$:
                                   6003 ;	calc.c:404: } else if ((char)input == 'i') {
      001F54 BD 69 2C         [24] 6004 	cjne	r5,#0x69,00149$
                                   6005 ;	calc.c:405: if (state_exec(&s, EVENT_RSTA_i) <= 0) break;
      001F57 74 05            [12] 6006 	mov	a,#0x05
      001F59 C0 E0            [24] 6007 	push	acc
      001F5B E4               [12] 6008 	clr	a
      001F5C C0 E0            [24] 6009 	push	acc
      001F5E 90r00r00         [24] 6010 	mov	dptr,#_s
      001F61 75 F0 00         [24] 6011 	mov	b,#0x00
      001F64 12r00r00         [24] 6012 	lcall	_state_exec
      001F67 AB 82            [24] 6013 	mov	r3,dpl
      001F69 AC 83            [24] 6014 	mov	r4,dph
      001F6B 15 81            [12] 6015 	dec	sp
      001F6D 15 81            [12] 6016 	dec	sp
      001F6F C3               [12] 6017 	clr	c
      001F70 E4               [12] 6018 	clr	a
      001F71 9B               [12] 6019 	subb	a,r3
      001F72 74 80            [12] 6020 	mov	a,#(0x00 ^ 0x80)
      001F74 8C F0            [24] 6021 	mov	b,r4
      001F76 63 F0 80         [24] 6022 	xrl	b,#0x80
      001F79 95 F0            [12] 6023 	subb	a,b
      001F7B 50 03            [24] 6024 	jnc	00298$
      001F7D 02r1ErE7         [24] 6025 	ljmp	00158$
      001F80                       6026 00298$:
      001F80 02r20rDC         [24] 6027 	ljmp	00159$
      001F83                       6028 00149$:
                                   6029 ;	calc.c:406: } else if ((char)input == 'I') {
      001F83 BD 49 2C         [24] 6030 	cjne	r5,#0x49,00146$
                                   6031 ;	calc.c:407: if (state_exec(&s, EVENT_RSTA_I) <= 0) break;
      001F86 74 06            [12] 6032 	mov	a,#0x06
      001F88 C0 E0            [24] 6033 	push	acc
      001F8A E4               [12] 6034 	clr	a
      001F8B C0 E0            [24] 6035 	push	acc
      001F8D 90r00r00         [24] 6036 	mov	dptr,#_s
      001F90 75 F0 00         [24] 6037 	mov	b,#0x00
      001F93 12r00r00         [24] 6038 	lcall	_state_exec
      001F96 AB 82            [24] 6039 	mov	r3,dpl
      001F98 AC 83            [24] 6040 	mov	r4,dph
      001F9A 15 81            [12] 6041 	dec	sp
      001F9C 15 81            [12] 6042 	dec	sp
      001F9E C3               [12] 6043 	clr	c
      001F9F E4               [12] 6044 	clr	a
      001FA0 9B               [12] 6045 	subb	a,r3
      001FA1 74 80            [12] 6046 	mov	a,#(0x00 ^ 0x80)
      001FA3 8C F0            [24] 6047 	mov	b,r4
      001FA5 63 F0 80         [24] 6048 	xrl	b,#0x80
      001FA8 95 F0            [12] 6049 	subb	a,b
      001FAA 50 03            [24] 6050 	jnc	00301$
      001FAC 02r1ErE7         [24] 6051 	ljmp	00158$
      001FAF                       6052 00301$:
      001FAF 02r20rDC         [24] 6053 	ljmp	00159$
      001FB2                       6054 00146$:
                                   6055 ;	calc.c:408: } else if (((char)input == 'h') || ((char)input == 'H') || ((char)input == 'o') || ((char)input == 'O')) {
      001FB2 E4               [12] 6056 	clr	a
      001FB3 BD 68 01         [24] 6057 	cjne	r5,#0x68,00302$
      001FB6 04               [12] 6058 	inc	a
      001FB7                       6059 00302$:
      001FB7 FC               [12] 6060 	mov	r4,a
      001FB8 70 0F            [24] 6061 	jnz	00139$
      001FBA BD 48 01         [24] 6062 	cjne	r5,#0x48,00305$
      001FBD 04               [12] 6063 	inc	a
      001FBE                       6064 00305$:
      001FBE FB               [12] 6065 	mov	r3,a
      001FBF 70 08            [24] 6066 	jnz	00139$
      001FC1 BD 6F 02         [24] 6067 	cjne	r5,#0x6f,00308$
      001FC4 80 03            [24] 6068 	sjmp	00139$
      001FC6                       6069 00308$:
      001FC6 BD 4F 2C         [24] 6070 	cjne	r5,#0x4f,00140$
      001FC9                       6071 00139$:
                                   6072 ;	calc.c:409: if (state_exec(&s, EVENT_BASE) <= 0) break;
      001FC9 74 04            [12] 6073 	mov	a,#0x04
      001FCB C0 E0            [24] 6074 	push	acc
      001FCD E4               [12] 6075 	clr	a
      001FCE C0 E0            [24] 6076 	push	acc
      001FD0 90r00r00         [24] 6077 	mov	dptr,#_s
      001FD3 75 F0 00         [24] 6078 	mov	b,#0x00
      001FD6 12r00r00         [24] 6079 	lcall	_state_exec
      001FD9 AF 82            [24] 6080 	mov	r7,dpl
      001FDB AE 83            [24] 6081 	mov	r6,dph
      001FDD 15 81            [12] 6082 	dec	sp
      001FDF 15 81            [12] 6083 	dec	sp
      001FE1 C3               [12] 6084 	clr	c
      001FE2 E4               [12] 6085 	clr	a
      001FE3 9F               [12] 6086 	subb	a,r7
      001FE4 74 80            [12] 6087 	mov	a,#(0x00 ^ 0x80)
      001FE6 8E F0            [24] 6088 	mov	b,r6
      001FE8 63 F0 80         [24] 6089 	xrl	b,#0x80
      001FEB 95 F0            [12] 6090 	subb	a,b
      001FED 50 03            [24] 6091 	jnc	00311$
      001FEF 02r1ErE7         [24] 6092 	ljmp	00158$
      001FF2                       6093 00311$:
      001FF2 02r20rDC         [24] 6094 	ljmp	00159$
      001FF5                       6095 00140$:
                                   6096 ;	calc.c:410: } else if (isxdigit(input)) {
      001FF5 8E 82            [24] 6097 	mov	dpl,r6
      001FF7 8F 83            [24] 6098 	mov	dph,r7
      001FF9 C0 05            [24] 6099 	push	ar5
      001FFB C0 04            [24] 6100 	push	ar4
      001FFD C0 03            [24] 6101 	push	ar3
      001FFF 12r00r00         [24] 6102 	lcall	_isxdigit
      002002 E5 82            [12] 6103 	mov	a,dpl
      002004 85 83 F0         [24] 6104 	mov	b,dph
      002007 D0 03            [24] 6105 	pop	ar3
      002009 D0 04            [24] 6106 	pop	ar4
      00200B D0 05            [24] 6107 	pop	ar5
      00200D 45 F0            [12] 6108 	orl	a,b
      00200F 60 2C            [24] 6109 	jz	00137$
                                   6110 ;	calc.c:411: if (state_exec(&s, EVENT_DIGIT) <= 0) break;
      002011 74 01            [12] 6111 	mov	a,#0x01
      002013 C0 E0            [24] 6112 	push	acc
      002015 E4               [12] 6113 	clr	a
      002016 C0 E0            [24] 6114 	push	acc
      002018 90r00r00         [24] 6115 	mov	dptr,#_s
      00201B 75 F0 00         [24] 6116 	mov	b,#0x00
      00201E 12r00r00         [24] 6117 	lcall	_state_exec
      002021 AE 82            [24] 6118 	mov	r6,dpl
      002023 AF 83            [24] 6119 	mov	r7,dph
      002025 15 81            [12] 6120 	dec	sp
      002027 15 81            [12] 6121 	dec	sp
      002029 C3               [12] 6122 	clr	c
      00202A E4               [12] 6123 	clr	a
      00202B 9E               [12] 6124 	subb	a,r6
      00202C 74 80            [12] 6125 	mov	a,#(0x00 ^ 0x80)
      00202E 8F F0            [24] 6126 	mov	b,r7
      002030 63 F0 80         [24] 6127 	xrl	b,#0x80
      002033 95 F0            [12] 6128 	subb	a,b
      002035 50 03            [24] 6129 	jnc	00313$
      002037 02r1ErE7         [24] 6130 	ljmp	00158$
      00203A                       6131 00313$:
      00203A 02r20rDC         [24] 6132 	ljmp	00159$
      00203D                       6133 00137$:
                                   6134 ;	calc.c:413: ((char)input == 'h') || ((char)input == 'H') ||
      00203D EC               [12] 6135 	mov	a,r4
      00203E 70 4C            [24] 6136 	jnz	00117$
      002040 EB               [12] 6137 	mov	a,r3
      002041 70 49            [24] 6138 	jnz	00117$
                                   6139 ;	calc.c:414: ((char)input == 'p') || ((char)input == 'P') ||
      002043 BD 70 02         [24] 6140 	cjne	r5,#0x70,00316$
      002046 80 44            [24] 6141 	sjmp	00117$
      002048                       6142 00316$:
      002048 BD 50 02         [24] 6143 	cjne	r5,#0x50,00317$
      00204B 80 3F            [24] 6144 	sjmp	00117$
      00204D                       6145 00317$:
                                   6146 ;	calc.c:415: ((char)input == '.') || ((char)input == 'v') || ((char)input == 'V') ||
      00204D BD 2E 02         [24] 6147 	cjne	r5,#0x2e,00318$
      002050 80 3A            [24] 6148 	sjmp	00117$
      002052                       6149 00318$:
      002052 BD 76 02         [24] 6150 	cjne	r5,#0x76,00319$
      002055 80 35            [24] 6151 	sjmp	00117$
      002057                       6152 00319$:
      002057 BD 56 02         [24] 6153 	cjne	r5,#0x56,00320$
      00205A 80 30            [24] 6154 	sjmp	00117$
      00205C                       6155 00320$:
                                   6156 ;	calc.c:416: ((char)input == 'x') ||
      00205C BD 78 02         [24] 6157 	cjne	r5,#0x78,00321$
      00205F 80 2B            [24] 6158 	sjmp	00117$
      002061                       6159 00321$:
                                   6160 ;	calc.c:417: ((char)input == '+') ||
      002061 BD 2B 02         [24] 6161 	cjne	r5,#0x2b,00322$
      002064 80 26            [24] 6162 	sjmp	00117$
      002066                       6163 00322$:
                                   6164 ;	calc.c:418: ((char)input == '-') ||
      002066 BD 2D 02         [24] 6165 	cjne	r5,#0x2d,00323$
      002069 80 21            [24] 6166 	sjmp	00117$
      00206B                       6167 00323$:
                                   6168 ;	calc.c:419: ((char)input == '*') ||
      00206B BD 2A 02         [24] 6169 	cjne	r5,#0x2a,00324$
      00206E 80 1C            [24] 6170 	sjmp	00117$
      002070                       6171 00324$:
                                   6172 ;	calc.c:420: ((char)input == '/') ||
      002070 BD 2F 02         [24] 6173 	cjne	r5,#0x2f,00325$
      002073 80 17            [24] 6174 	sjmp	00117$
      002075                       6175 00325$:
                                   6176 ;	calc.c:421: ((char)input == '%') ||
      002075 BD 25 02         [24] 6177 	cjne	r5,#0x25,00326$
      002078 80 12            [24] 6178 	sjmp	00117$
      00207A                       6179 00326$:
                                   6180 ;	calc.c:422: ((char)input == '&') ||
      00207A BD 26 02         [24] 6181 	cjne	r5,#0x26,00327$
      00207D 80 0D            [24] 6182 	sjmp	00117$
      00207F                       6183 00327$:
                                   6184 ;	calc.c:423: ((char)input == '|') ||
      00207F BD 7C 02         [24] 6185 	cjne	r5,#0x7c,00328$
      002082 80 08            [24] 6186 	sjmp	00117$
      002084                       6187 00328$:
                                   6188 ;	calc.c:424: ((char)input == '^') ||
      002084 BD 5E 02         [24] 6189 	cjne	r5,#0x5e,00329$
      002087 80 03            [24] 6190 	sjmp	00117$
      002089                       6191 00329$:
                                   6192 ;	calc.c:425: ((char)input == '~')
      002089 BD 7E 29         [24] 6193 	cjne	r5,#0x7e,00118$
      00208C                       6194 00117$:
                                   6195 ;	calc.c:427: if (state_exec(&s, EVENT_OP) <= 0) break;
      00208C 74 02            [12] 6196 	mov	a,#0x02
      00208E C0 E0            [24] 6197 	push	acc
      002090 E4               [12] 6198 	clr	a
      002091 C0 E0            [24] 6199 	push	acc
      002093 90r00r00         [24] 6200 	mov	dptr,#_s
      002096 75 F0 00         [24] 6201 	mov	b,#0x00
      002099 12r00r00         [24] 6202 	lcall	_state_exec
      00209C AE 82            [24] 6203 	mov	r6,dpl
      00209E AF 83            [24] 6204 	mov	r7,dph
      0020A0 15 81            [12] 6205 	dec	sp
      0020A2 15 81            [12] 6206 	dec	sp
      0020A4 C3               [12] 6207 	clr	c
      0020A5 E4               [12] 6208 	clr	a
      0020A6 9E               [12] 6209 	subb	a,r6
      0020A7 74 80            [12] 6210 	mov	a,#(0x00 ^ 0x80)
      0020A9 8F F0            [24] 6211 	mov	b,r7
      0020AB 63 F0 80         [24] 6212 	xrl	b,#0x80
      0020AE 95 F0            [12] 6213 	subb	a,b
      0020B0 50 2A            [24] 6214 	jnc	00159$
      0020B2 02r1ErE7         [24] 6215 	ljmp	00158$
      0020B5                       6216 00118$:
                                   6217 ;	calc.c:429: if (state_exec(&s, EVENT_DELIM) <= 0) break;
      0020B5 E4               [12] 6218 	clr	a
      0020B6 C0 E0            [24] 6219 	push	acc
      0020B8 C0 E0            [24] 6220 	push	acc
      0020BA 90r00r00         [24] 6221 	mov	dptr,#_s
      0020BD 75 F0 00         [24] 6222 	mov	b,#0x00
      0020C0 12r00r00         [24] 6223 	lcall	_state_exec
      0020C3 AE 82            [24] 6224 	mov	r6,dpl
      0020C5 AF 83            [24] 6225 	mov	r7,dph
      0020C7 15 81            [12] 6226 	dec	sp
      0020C9 15 81            [12] 6227 	dec	sp
      0020CB C3               [12] 6228 	clr	c
      0020CC E4               [12] 6229 	clr	a
      0020CD 9E               [12] 6230 	subb	a,r6
      0020CE 74 80            [12] 6231 	mov	a,#(0x00 ^ 0x80)
      0020D0 8F F0            [24] 6232 	mov	b,r7
      0020D2 63 F0 80         [24] 6233 	xrl	b,#0x80
      0020D5 95 F0            [12] 6234 	subb	a,b
      0020D7 50 03            [24] 6235 	jnc	00333$
      0020D9 02r1ErE7         [24] 6236 	ljmp	00158$
      0020DC                       6237 00333$:
      0020DC                       6238 00159$:
                                   6239 ;	calc.c:435: __endasm;
      0020DC 43 87 02         [24] 6240 	orl	pcon, #2
                                   6241 ;	calc.c:436: }
      0020DF 22               [24] 6242 	ret
                                   6243 	.area CSEG    (CODE)
                                   6244 	.area CONST   (CODE)
                                   6245 	.area CONST   (CODE)
      000000                       6246 ___str_0:
      000000 0D                    6247 	.db 0x0d
      000001 0A                    6248 	.db 0x0a
      000002 00                    6249 	.db 0x00
                                   6250 	.area CSEG    (CODE)
                                   6251 	.area CONST   (CODE)
      000003                       6252 ___str_1:
      000003 73 74 61 63 6B 20 75  6253 	.ascii "stack underflow"
             6E 64 65 72 66 6C 6F
             77
      000012 0D                    6254 	.db 0x0d
      000013 0A                    6255 	.db 0x0a
      000014 00                    6256 	.db 0x00
                                   6257 	.area CSEG    (CODE)
                                   6258 	.area CONST   (CODE)
      000015                       6259 ___str_2:
      000015 56 41 20              6260 	.ascii "VA "
      000018 00                    6261 	.db 0x00
                                   6262 	.area CSEG    (CODE)
                                   6263 	.area CONST   (CODE)
      000019                       6264 ___str_3:
      000019 25 20 31 31 6C 64 20  6265 	.ascii "% 11ld / "
             2F 20
      000022 00                    6266 	.db 0x00
                                   6267 	.area CSEG    (CODE)
                                   6268 	.area CONST   (CODE)
      000023                       6269 ___str_4:
      000023 25 30 38 6C 78 20 2F  6270 	.ascii "%08lx / "
             20
      00002B 00                    6271 	.db 0x00
                                   6272 	.area CSEG    (CODE)
                                   6273 	.area CONST   (CODE)
      00002C                       6274 ___str_5:
      00002C 50 41 20              6275 	.ascii "PA "
      00002F 00                    6276 	.db 0x00
                                   6277 	.area CSEG    (CODE)
                                   6278 	.area CONST   (CODE)
      000030                       6279 ___str_6:
      000030 50 54 20              6280 	.ascii "PT "
      000033 00                    6281 	.db 0x00
                                   6282 	.area CSEG    (CODE)
                                   6283 	.area CONST   (CODE)
      000034                       6284 ___str_7:
      000034 56 54 20              6285 	.ascii "VT "
      000037 00                    6286 	.db 0x00
                                   6287 	.area CSEG    (CODE)
                                   6288 	.area CONST   (CODE)
      000038                       6289 ___str_8:
      000038 0D                    6290 	.db 0x0d
      000039 0A                    6291 	.db 0x0a
      00003A 73 74 61 63 6B 20 75  6292 	.ascii "stack underflow"
             6E 64 65 72 66 6C 6F
             77
      000049 0D                    6293 	.db 0x0d
      00004A 0A                    6294 	.db 0x0a
      00004B 00                    6295 	.db 0x00
                                   6296 	.area CSEG    (CODE)
                                   6297 	.area CONST   (CODE)
      00004C                       6298 ___str_9:
      00004C 0D                    6299 	.db 0x0d
      00004D 0A                    6300 	.db 0x0a
      00004E 64 69 76 69 73 69 6F  6301 	.ascii "division by zero"
             6E 20 62 79 20 7A 65
             72 6F
      00005E 0D                    6302 	.db 0x0d
      00005F 0A                    6303 	.db 0x0a
      000060 00                    6304 	.db 0x00
                                   6305 	.area CSEG    (CODE)
                                   6306 	.area CONST   (CODE)
      000061                       6307 ___str_10:
      000061 0D                    6308 	.db 0x0d
      000062 0A                    6309 	.db 0x0a
      000063 73 74 61 63 6B 20 6F  6310 	.ascii "stack overflow"
             76 65 72 66 6C 6F 77
      000071 0D                    6311 	.db 0x0d
      000072 0A                    6312 	.db 0x0a
      000073 00                    6313 	.db 0x00
                                   6314 	.area CSEG    (CODE)
                                   6315 	.area CONST   (CODE)
      000074                       6316 ___str_11:
      000074 0D                    6317 	.db 0x0d
      000075 0A                    6318 	.db 0x0a
      000076 62 61 73 65 20 3D 20  6319 	.ascii "base = %d, "
             25 64 2C 20
      000081 00                    6320 	.db 0x00
                                   6321 	.area CSEG    (CODE)
                                   6322 	.area CONST   (CODE)
      000082                       6323 ___str_12:
      000082 61 63 63 20 3D 20 25  6324 	.ascii "acc = %ld / "
             6C 64 20 2F 20
      00008E 00                    6325 	.db 0x00
                                   6326 	.area CSEG    (CODE)
                                   6327 	.area CONST   (CODE)
      00008F                       6328 ___str_13:
      00008F 2C 20 61 63 63 5F 76  6329 	.ascii ", acc_valid = %d"
             61 6C 69 64 20 3D 20
             25 64
      00009F 0D                    6330 	.db 0x0d
      0000A0 0A                    6331 	.db 0x0a
      0000A1 0D                    6332 	.db 0x0d
      0000A2 0A                    6333 	.db 0x0a
      0000A3 00                    6334 	.db 0x00
                                   6335 	.area CSEG    (CODE)
                                   6336 	.area CONST   (CODE)
      0000A4                       6337 ___str_14:
      0000A4 48 68 4F 6F           6338 	.ascii "HhOo"
      0000A8 09                    6339 	.db 0x09
      0000A9 62 61 73 65 20 31 36  6340 	.ascii "base 16 10 8 2"
             20 31 30 20 38 20 32
      0000B7 0D                    6341 	.db 0x0d
      0000B8 0A                    6342 	.db 0x0a
      0000B9 00                    6343 	.db 0x00
                                   6344 	.area CSEG    (CODE)
                                   6345 	.area CONST   (CODE)
      0000BA                       6346 ___str_15:
      0000BA 70                    6347 	.ascii "p"
      0000BB 09                    6348 	.db 0x09
      0000BC 70 65 65 6B 20 74 6F  6349 	.ascii "peek top"
             70
      0000C4 0D                    6350 	.db 0x0d
      0000C5 0A                    6351 	.db 0x0a
      0000C6 00                    6352 	.db 0x00
                                   6353 	.area CSEG    (CODE)
                                   6354 	.area CONST   (CODE)
      0000C7                       6355 ___str_16:
      0000C7 50                    6356 	.ascii "P"
      0000C8 09                    6357 	.db 0x09
      0000C9 70 72 69 6E 74 20 73  6358 	.ascii "print stack"
             74 61 63 6B
      0000D4 0D                    6359 	.db 0x0d
      0000D5 0A                    6360 	.db 0x0a
      0000D6 00                    6361 	.db 0x00
                                   6362 	.area CSEG    (CODE)
                                   6363 	.area CONST   (CODE)
      0000D7                       6364 ___str_17:
      0000D7 76 2E                 6365 	.ascii "v."
      0000D9 09                    6366 	.db 0x09
      0000DA 70 6F 70 20 74 6F 70  6367 	.ascii "pop top"
      0000E1 0D                    6368 	.db 0x0d
      0000E2 0A                    6369 	.db 0x0a
      0000E3 00                    6370 	.db 0x00
                                   6371 	.area CSEG    (CODE)
                                   6372 	.area CONST   (CODE)
      0000E4                       6373 ___str_18:
      0000E4 56                    6374 	.ascii "V"
      0000E5 09                    6375 	.db 0x09
      0000E6 70 6F 70 20 61 6C 6C  6376 	.ascii "pop all"
      0000ED 0D                    6377 	.db 0x0d
      0000EE 0A                    6378 	.db 0x0a
      0000EF 00                    6379 	.db 0x00
                                   6380 	.area CSEG    (CODE)
                                   6381 	.area CONST   (CODE)
      0000F0                       6382 ___str_19:
      0000F0 69                    6383 	.ascii "i"
      0000F1 09                    6384 	.db 0x09
      0000F2 72 65 73 65 74 20 61  6385 	.ascii "reset acc"
             63 63
      0000FB 0D                    6386 	.db 0x0d
      0000FC 0A                    6387 	.db 0x0a
      0000FD 00                    6388 	.db 0x00
                                   6389 	.area CSEG    (CODE)
                                   6390 	.area CONST   (CODE)
      0000FE                       6391 ___str_20:
      0000FE 49                    6392 	.ascii "I"
      0000FF 09                    6393 	.db 0x09
      000100 72 65 73 65 74 20 61  6394 	.ascii "reset and discard acc"
             6E 64 20 64 69 73 63
             61 72 64 20 61 63 63
      000115 0D                    6395 	.db 0x0d
      000116 0A                    6396 	.db 0x0a
      000117 00                    6397 	.db 0x00
                                   6398 	.area CSEG    (CODE)
                                   6399 	.area CONST   (CODE)
      000118                       6400 ___str_21:
      000118 78                    6401 	.ascii "x"
      000119 09                    6402 	.db 0x09
      00011A 65 78 63 68 61 6E 67  6403 	.ascii "exchange top 2"
             65 20 74 6F 70 20 32
      000128 0D                    6404 	.db 0x0d
      000129 0A                    6405 	.db 0x0a
      00012A 00                    6406 	.db 0x00
                                   6407 	.area CSEG    (CODE)
                                   6408 	.area CONST   (CODE)
      00012B                       6409 ___str_22:
      00012B 2B                    6410 	.ascii "+"
      00012C 09                    6411 	.db 0x09
      00012D 61 64 64 20 74 6F 70  6412 	.ascii "add top 2"
             20 32
      000136 0D                    6413 	.db 0x0d
      000137 0A                    6414 	.db 0x0a
      000138 00                    6415 	.db 0x00
                                   6416 	.area CSEG    (CODE)
                                   6417 	.area CONST   (CODE)
      000139                       6418 ___str_23:
      000139 2D                    6419 	.ascii "-"
      00013A 09                    6420 	.db 0x09
      00013B 73 75 62 74 72 61 63  6421 	.ascii "subtract top 2"
             74 20 74 6F 70 20 32
      000149 0D                    6422 	.db 0x0d
      00014A 0A                    6423 	.db 0x0a
      00014B 00                    6424 	.db 0x00
                                   6425 	.area CSEG    (CODE)
                                   6426 	.area CONST   (CODE)
      00014C                       6427 ___str_24:
      00014C 2A                    6428 	.ascii "*"
      00014D 09                    6429 	.db 0x09
      00014E 6D 75 6C 74 69 70 6C  6430 	.ascii "multiply top 2"
             79 20 74 6F 70 20 32
      00015C 0D                    6431 	.db 0x0d
      00015D 0A                    6432 	.db 0x0a
      00015E 00                    6433 	.db 0x00
                                   6434 	.area CSEG    (CODE)
                                   6435 	.area CONST   (CODE)
      00015F                       6436 ___str_25:
      00015F 2F                    6437 	.ascii "/"
      000160 09                    6438 	.db 0x09
      000161 64 69 76 69 64 65 20  6439 	.ascii "divide top 2"
             74 6F 70 20 32
      00016D 0D                    6440 	.db 0x0d
      00016E 0A                    6441 	.db 0x0a
      00016F 00                    6442 	.db 0x00
                                   6443 	.area CSEG    (CODE)
                                   6444 	.area CONST   (CODE)
      000170                       6445 ___str_26:
      000170 25                    6446 	.ascii "%"
      000171 09                    6447 	.db 0x09
      000172 6D 6F 64 75 6C 75 73  6448 	.ascii "modulus top 2"
             20 74 6F 70 20 32
      00017F 0D                    6449 	.db 0x0d
      000180 0A                    6450 	.db 0x0a
      000181 00                    6451 	.db 0x00
                                   6452 	.area CSEG    (CODE)
                                   6453 	.area CONST   (CODE)
      000182                       6454 ___str_27:
      000182 26                    6455 	.ascii "&"
      000183 09                    6456 	.db 0x09
      000184 61 6E 64 20 74 6F 70  6457 	.ascii "and top 2"
             20 32
      00018D 0D                    6458 	.db 0x0d
      00018E 0A                    6459 	.db 0x0a
      00018F 00                    6460 	.db 0x00
                                   6461 	.area CSEG    (CODE)
                                   6462 	.area CONST   (CODE)
      000190                       6463 ___str_28:
      000190 7C                    6464 	.ascii "|"
      000191 09                    6465 	.db 0x09
      000192 6F 72 20 74 6F 70 20  6466 	.ascii "or top 2"
             32
      00019A 0D                    6467 	.db 0x0d
      00019B 0A                    6468 	.db 0x0a
      00019C 00                    6469 	.db 0x00
                                   6470 	.area CSEG    (CODE)
                                   6471 	.area CONST   (CODE)
      00019D                       6472 ___str_29:
      00019D 5E                    6473 	.ascii "^"
      00019E 09                    6474 	.db 0x09
      00019F 78 6F 72 20 74 6F 70  6475 	.ascii "xor top 2"
             20 32
      0001A8 0D                    6476 	.db 0x0d
      0001A9 0A                    6477 	.db 0x0a
      0001AA 00                    6478 	.db 0x00
                                   6479 	.area CSEG    (CODE)
                                   6480 	.area CONST   (CODE)
      0001AB                       6481 ___str_30:
      0001AB 7E                    6482 	.ascii "~"
      0001AC 09                    6483 	.db 0x09
      0001AD 62 69 74 77 69 73 65  6484 	.ascii "bitwise not top"
             20 6E 6F 74 20 74 6F
             70
      0001BC 0D                    6485 	.db 0x0d
      0001BD 0A                    6486 	.db 0x0a
      0001BE 00                    6487 	.db 0x00
                                   6488 	.area CSEG    (CODE)
                                   6489 	.area CONST   (CODE)
      0001BF                       6490 ___str_31:
      0001BF 3F                    6491 	.ascii "?"
      0001C0 09                    6492 	.db 0x09
      0001C1 68 65 6C 70           6493 	.ascii "help"
      0001C5 0D                    6494 	.db 0x0d
      0001C6 0A                    6495 	.db 0x0a
      0001C7 00                    6496 	.db 0x00
                                   6497 	.area CSEG    (CODE)
                                   6498 	.area CONST   (CODE)
      0001C8                       6499 ___str_32:
      0001C8 71                    6500 	.ascii "q"
      0001C9 09                    6501 	.db 0x09
      0001CA 71 75 69 74           6502 	.ascii "quit"
      0001CE 0D                    6503 	.db 0x0d
      0001CF 0A                    6504 	.db 0x0a
      0001D0 00                    6505 	.db 0x00
                                   6506 	.area CSEG    (CODE)
                                   6507 	.area XINIT   (CODE)
      000000                       6508 __xinit__deltas:
      000000 00 00                 6509 	.byte #0x00, #0x00	;  0
      000002 00 00                 6510 	.byte #0x00, #0x00	;  0
      000004 00 00                 6511 	.byte #0x00, #0x00	;  0
      000006 00 00                 6512 	.byte #0x00,#0x00
      000008 00 00                 6513 	.byte #0x00,#0x00
      00000A 00 00                 6514 	.byte #0x00, #0x00	;  0
      00000C 01 00                 6515 	.byte #0x01, #0x00	;  1
      00000E 02 00                 6516 	.byte #0x02, #0x00	;  2
      000010 00 00                 6517 	.byte #0x00,#0x00
      000012rCBs00                 6518 	.byte _accumulate, (_accumulate >> 8)
      000014 00 00                 6519 	.byte #0x00, #0x00	;  0
      000016 02 00                 6520 	.byte #0x02, #0x00	;  2
      000018 01 00                 6521 	.byte #0x01, #0x00	;  1
      00001A 00 00                 6522 	.byte #0x00,#0x00
      00001Cr24s06                 6523 	.byte _operator, (_operator >> 8)
      00001E 01 00                 6524 	.byte #0x01, #0x00	;  1
      000020 00 00                 6525 	.byte #0x00, #0x00	;  0
      000022 00 00                 6526 	.byte #0x00, #0x00	;  0
      000024 00 00                 6527 	.byte #0x00,#0x00
      000026 00 00                 6528 	.byte #0x00,#0x00
      000028 01 00                 6529 	.byte #0x01, #0x00	;  1
      00002A 02 00                 6530 	.byte #0x02, #0x00	;  2
      00002C 01 00                 6531 	.byte #0x01, #0x00	;  1
      00002E 00 00                 6532 	.byte #0x00,#0x00
      000030r24s06                 6533 	.byte _operator, (_operator >> 8)
      000032 01 00                 6534 	.byte #0x01, #0x00	;  1
      000034 01 00                 6535 	.byte #0x01, #0x00	;  1
      000036 02 00                 6536 	.byte #0x02, #0x00	;  2
      000038 00 00                 6537 	.byte #0x00,#0x00
      00003ArCBs00                 6538 	.byte _accumulate, (_accumulate >> 8)
      00003C 02 00                 6539 	.byte #0x02, #0x00	;  2
      00003E 00 00                 6540 	.byte #0x00, #0x00	;  0
      000040 00 00                 6541 	.byte #0x00, #0x00	;  0
      000042 00 00                 6542 	.byte #0x00,#0x00
      000044r63s18                 6543 	.byte _push_acc, (_push_acc >> 8)
      000046 02 00                 6544 	.byte #0x02, #0x00	;  2
      000048 06 00                 6545 	.byte #0x06, #0x00	;  6
      00004A 00 00                 6546 	.byte #0x00, #0x00	;  0
      00004C 00 00                 6547 	.byte #0x00,#0x00
      00004Er71s19                 6548 	.byte _reset_acc, (_reset_acc >> 8)
      000050 02 00                 6549 	.byte #0x02, #0x00	;  2
      000052 01 00                 6550 	.byte #0x01, #0x00	;  1
      000054 02 00                 6551 	.byte #0x02, #0x00	;  2
      000056 00 00                 6552 	.byte #0x00,#0x00
      000058rCBs00                 6553 	.byte _accumulate, (_accumulate >> 8)
      00005A 02 00                 6554 	.byte #0x02, #0x00	;  2
      00005C 02 00                 6555 	.byte #0x02, #0x00	;  2
      00005E 01 00                 6556 	.byte #0x01, #0x00	;  1
      000060 00 00                 6557 	.byte #0x00,#0x00
      000062r63s18                 6558 	.byte _push_acc, (_push_acc >> 8)
      000064 FF 7F                 6559 	.byte #0xff, #0x7f	;  32767
      000066 05 00                 6560 	.byte #0x05, #0x00	;  5
      000068 FF 7F                 6561 	.byte #0xff, #0x7f	;  32767
      00006A 00 00                 6562 	.byte #0x00,#0x00
      00006Cr71s19                 6563 	.byte _reset_acc, (_reset_acc >> 8)
      00006E FF 7F                 6564 	.byte #0xff, #0x7f	;  32767
      000070 06 00                 6565 	.byte #0x06, #0x00	;  6
      000072 FF 7F                 6566 	.byte #0xff, #0x7f	;  32767
      000074 00 00                 6567 	.byte #0x00,#0x00
      000076 00 00                 6568 	.byte #0x00,#0x00
      000078 FF 7F                 6569 	.byte #0xff, #0x7f	;  32767
      00007A 04 00                 6570 	.byte #0x04, #0x00	;  4
      00007C FF 7F                 6571 	.byte #0xff, #0x7f	;  32767
      00007E 00 00                 6572 	.byte #0x00,#0x00
      000080rDBs19                 6573 	.byte _reset_base, (_reset_base >> 8)
      000082 FF 7F                 6574 	.byte #0xff, #0x7f	;  32767
      000084 03 00                 6575 	.byte #0x03, #0x00	;  3
      000086 FF 7F                 6576 	.byte #0xff, #0x7f	;  32767
      000088 00 00                 6577 	.byte #0x00,#0x00
      00008Ar59s1A                 6578 	.byte _help, (_help >> 8)
      00008C FF 7F                 6579 	.byte #0xff, #0x7f	;  32767
      00008E 07 00                 6580 	.byte #0x07, #0x00	;  7
      000090 03 00                 6581 	.byte #0x03, #0x00	;  3
      000092 00 00                 6582 	.byte #0x00,#0x00
      000094r3Cs02                 6583 	.byte _dump_pop, (_dump_pop >> 8)
      000096 00 80                 6584 	.byte #0x00, #0x80	; -32768
      000098 00 80                 6585 	.byte #0x00, #0x80	; -32768
      00009A 00 80                 6586 	.byte #0x00, #0x80	; -32768
      00009C 00 00                 6587 	.byte #0x00,#0x00
      00009E 00 00                 6588 	.byte #0x00,#0x00
                                   6589 	.area CABS    (ABS,CODE)
