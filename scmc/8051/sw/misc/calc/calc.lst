                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module calc
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _getchar_poll
                                     13 	.globl _state_exec
                                     14 	.globl _state_init
                                     15 	.globl _stack_iter_peek
                                     16 	.globl _stack_peek2
                                     17 	.globl _stack_peek
                                     18 	.globl _stack_pop
                                     19 	.globl _stack_push
                                     20 	.globl _stack_init
                                     21 	.globl _isxdigit
                                     22 	.globl _printf
                                     23 	.globl _strtol
                                     24 	.globl _CY
                                     25 	.globl _AC
                                     26 	.globl _F0
                                     27 	.globl _RS1
                                     28 	.globl _RS0
                                     29 	.globl _OV
                                     30 	.globl _FL
                                     31 	.globl _P
                                     32 	.globl _TF2
                                     33 	.globl _EXF2
                                     34 	.globl _RCLK
                                     35 	.globl _TCLK
                                     36 	.globl _EXEN2
                                     37 	.globl _TR2
                                     38 	.globl _C_T2
                                     39 	.globl _CP_RL2
                                     40 	.globl _T2CON_7
                                     41 	.globl _T2CON_6
                                     42 	.globl _T2CON_5
                                     43 	.globl _T2CON_4
                                     44 	.globl _T2CON_3
                                     45 	.globl _T2CON_2
                                     46 	.globl _T2CON_1
                                     47 	.globl _T2CON_0
                                     48 	.globl _PT2
                                     49 	.globl _PS
                                     50 	.globl _PT1
                                     51 	.globl _PX1
                                     52 	.globl _PT0
                                     53 	.globl _PX0
                                     54 	.globl _RD
                                     55 	.globl _WR
                                     56 	.globl _T1
                                     57 	.globl _T0
                                     58 	.globl _INT1
                                     59 	.globl _INT0
                                     60 	.globl _TXD
                                     61 	.globl _RXD
                                     62 	.globl _P3_7
                                     63 	.globl _P3_6
                                     64 	.globl _P3_5
                                     65 	.globl _P3_4
                                     66 	.globl _P3_3
                                     67 	.globl _P3_2
                                     68 	.globl _P3_1
                                     69 	.globl _P3_0
                                     70 	.globl _EA
                                     71 	.globl _ET2
                                     72 	.globl _ES
                                     73 	.globl _ET1
                                     74 	.globl _EX1
                                     75 	.globl _ET0
                                     76 	.globl _EX0
                                     77 	.globl _P2_7
                                     78 	.globl _P2_6
                                     79 	.globl _P2_5
                                     80 	.globl _P2_4
                                     81 	.globl _P2_3
                                     82 	.globl _P2_2
                                     83 	.globl _P2_1
                                     84 	.globl _P2_0
                                     85 	.globl _SM0
                                     86 	.globl _SM1
                                     87 	.globl _SM2
                                     88 	.globl _REN
                                     89 	.globl _TB8
                                     90 	.globl _RB8
                                     91 	.globl _TI
                                     92 	.globl _RI
                                     93 	.globl _T2EX
                                     94 	.globl _T2
                                     95 	.globl _P1_7
                                     96 	.globl _P1_6
                                     97 	.globl _P1_5
                                     98 	.globl _P1_4
                                     99 	.globl _P1_3
                                    100 	.globl _P1_2
                                    101 	.globl _P1_1
                                    102 	.globl _P1_0
                                    103 	.globl _TF1
                                    104 	.globl _TR1
                                    105 	.globl _TF0
                                    106 	.globl _TR0
                                    107 	.globl _IE1
                                    108 	.globl _IT1
                                    109 	.globl _IE0
                                    110 	.globl _IT0
                                    111 	.globl _P0_7
                                    112 	.globl _P0_6
                                    113 	.globl _P0_5
                                    114 	.globl _P0_4
                                    115 	.globl _P0_3
                                    116 	.globl _P0_2
                                    117 	.globl _P0_1
                                    118 	.globl _P0_0
                                    119 	.globl _B
                                    120 	.globl _A
                                    121 	.globl _ACC
                                    122 	.globl _PSW
                                    123 	.globl _TH2
                                    124 	.globl _TL2
                                    125 	.globl _RCAP2H
                                    126 	.globl _RCAP2L
                                    127 	.globl _T2MOD
                                    128 	.globl _T2CON
                                    129 	.globl _IP
                                    130 	.globl _P3
                                    131 	.globl _IE
                                    132 	.globl _P2
                                    133 	.globl _SBUF
                                    134 	.globl _SCON
                                    135 	.globl _P1
                                    136 	.globl _TH1
                                    137 	.globl _TH0
                                    138 	.globl _TL1
                                    139 	.globl _TL0
                                    140 	.globl _TMOD
                                    141 	.globl _TCON
                                    142 	.globl _PCON
                                    143 	.globl _DPH
                                    144 	.globl _DPL
                                    145 	.globl _SP
                                    146 	.globl _P0
                                    147 	.globl _giant
                                    148 	.globl _putchar
                                    149 	.globl _getchar
                                    150 ;--------------------------------------------------------
                                    151 ; special function registers
                                    152 ;--------------------------------------------------------
                                    153 	.area RSEG    (ABS,DATA)
      000000                        154 	.org 0x0000
                           000080   155 _P0	=	0x0080
                           000081   156 _SP	=	0x0081
                           000082   157 _DPL	=	0x0082
                           000083   158 _DPH	=	0x0083
                           000087   159 _PCON	=	0x0087
                           000088   160 _TCON	=	0x0088
                           000089   161 _TMOD	=	0x0089
                           00008A   162 _TL0	=	0x008a
                           00008B   163 _TL1	=	0x008b
                           00008C   164 _TH0	=	0x008c
                           00008D   165 _TH1	=	0x008d
                           000090   166 _P1	=	0x0090
                           000098   167 _SCON	=	0x0098
                           000099   168 _SBUF	=	0x0099
                           0000A0   169 _P2	=	0x00a0
                           0000A8   170 _IE	=	0x00a8
                           0000B0   171 _P3	=	0x00b0
                           0000B8   172 _IP	=	0x00b8
                           0000C8   173 _T2CON	=	0x00c8
                           0000C9   174 _T2MOD	=	0x00c9
                           0000CA   175 _RCAP2L	=	0x00ca
                           0000CB   176 _RCAP2H	=	0x00cb
                           0000CC   177 _TL2	=	0x00cc
                           0000CD   178 _TH2	=	0x00cd
                           0000D0   179 _PSW	=	0x00d0
                           0000E0   180 _ACC	=	0x00e0
                           0000E0   181 _A	=	0x00e0
                           0000F0   182 _B	=	0x00f0
                                    183 ;--------------------------------------------------------
                                    184 ; special function bits
                                    185 ;--------------------------------------------------------
                                    186 	.area RSEG    (ABS,DATA)
      000000                        187 	.org 0x0000
                           000080   188 _P0_0	=	0x0080
                           000081   189 _P0_1	=	0x0081
                           000082   190 _P0_2	=	0x0082
                           000083   191 _P0_3	=	0x0083
                           000084   192 _P0_4	=	0x0084
                           000085   193 _P0_5	=	0x0085
                           000086   194 _P0_6	=	0x0086
                           000087   195 _P0_7	=	0x0087
                           000088   196 _IT0	=	0x0088
                           000089   197 _IE0	=	0x0089
                           00008A   198 _IT1	=	0x008a
                           00008B   199 _IE1	=	0x008b
                           00008C   200 _TR0	=	0x008c
                           00008D   201 _TF0	=	0x008d
                           00008E   202 _TR1	=	0x008e
                           00008F   203 _TF1	=	0x008f
                           000090   204 _P1_0	=	0x0090
                           000091   205 _P1_1	=	0x0091
                           000092   206 _P1_2	=	0x0092
                           000093   207 _P1_3	=	0x0093
                           000094   208 _P1_4	=	0x0094
                           000095   209 _P1_5	=	0x0095
                           000096   210 _P1_6	=	0x0096
                           000097   211 _P1_7	=	0x0097
                           000090   212 _T2	=	0x0090
                           000091   213 _T2EX	=	0x0091
                           000098   214 _RI	=	0x0098
                           000099   215 _TI	=	0x0099
                           00009A   216 _RB8	=	0x009a
                           00009B   217 _TB8	=	0x009b
                           00009C   218 _REN	=	0x009c
                           00009D   219 _SM2	=	0x009d
                           00009E   220 _SM1	=	0x009e
                           00009F   221 _SM0	=	0x009f
                           0000A0   222 _P2_0	=	0x00a0
                           0000A1   223 _P2_1	=	0x00a1
                           0000A2   224 _P2_2	=	0x00a2
                           0000A3   225 _P2_3	=	0x00a3
                           0000A4   226 _P2_4	=	0x00a4
                           0000A5   227 _P2_5	=	0x00a5
                           0000A6   228 _P2_6	=	0x00a6
                           0000A7   229 _P2_7	=	0x00a7
                           0000A8   230 _EX0	=	0x00a8
                           0000A9   231 _ET0	=	0x00a9
                           0000AA   232 _EX1	=	0x00aa
                           0000AB   233 _ET1	=	0x00ab
                           0000AC   234 _ES	=	0x00ac
                           0000AD   235 _ET2	=	0x00ad
                           0000AF   236 _EA	=	0x00af
                           0000B0   237 _P3_0	=	0x00b0
                           0000B1   238 _P3_1	=	0x00b1
                           0000B2   239 _P3_2	=	0x00b2
                           0000B3   240 _P3_3	=	0x00b3
                           0000B4   241 _P3_4	=	0x00b4
                           0000B5   242 _P3_5	=	0x00b5
                           0000B6   243 _P3_6	=	0x00b6
                           0000B7   244 _P3_7	=	0x00b7
                           0000B0   245 _RXD	=	0x00b0
                           0000B1   246 _TXD	=	0x00b1
                           0000B2   247 _INT0	=	0x00b2
                           0000B3   248 _INT1	=	0x00b3
                           0000B4   249 _T0	=	0x00b4
                           0000B5   250 _T1	=	0x00b5
                           0000B6   251 _WR	=	0x00b6
                           0000B7   252 _RD	=	0x00b7
                           0000B8   253 _PX0	=	0x00b8
                           0000B9   254 _PT0	=	0x00b9
                           0000BA   255 _PX1	=	0x00ba
                           0000BB   256 _PT1	=	0x00bb
                           0000BC   257 _PS	=	0x00bc
                           0000BD   258 _PT2	=	0x00bd
                           0000C8   259 _T2CON_0	=	0x00c8
                           0000C9   260 _T2CON_1	=	0x00c9
                           0000CA   261 _T2CON_2	=	0x00ca
                           0000CB   262 _T2CON_3	=	0x00cb
                           0000CC   263 _T2CON_4	=	0x00cc
                           0000CD   264 _T2CON_5	=	0x00cd
                           0000CE   265 _T2CON_6	=	0x00ce
                           0000CF   266 _T2CON_7	=	0x00cf
                           0000C8   267 _CP_RL2	=	0x00c8
                           0000C9   268 _C_T2	=	0x00c9
                           0000CA   269 _TR2	=	0x00ca
                           0000CB   270 _EXEN2	=	0x00cb
                           0000CC   271 _TCLK	=	0x00cc
                           0000CD   272 _RCLK	=	0x00cd
                           0000CE   273 _EXF2	=	0x00ce
                           0000CF   274 _TF2	=	0x00cf
                           0000D0   275 _P	=	0x00d0
                           0000D1   276 _FL	=	0x00d1
                           0000D2   277 _OV	=	0x00d2
                           0000D3   278 _RS0	=	0x00d3
                           0000D4   279 _RS1	=	0x00d4
                           0000D5   280 _F0	=	0x00d5
                           0000D6   281 _AC	=	0x00d6
                           0000D7   282 _CY	=	0x00d7
                                    283 ;--------------------------------------------------------
                                    284 ; overlayable register banks
                                    285 ;--------------------------------------------------------
                                    286 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        287 	.ds 8
                                    288 ;--------------------------------------------------------
                                    289 ; internal ram data
                                    290 ;--------------------------------------------------------
                                    291 	.area DSEG    (DATA)
                                    292 ;--------------------------------------------------------
                                    293 ; overlayable items in internal ram 
                                    294 ;--------------------------------------------------------
                                    295 ;--------------------------------------------------------
                                    296 ; Stack segment in internal ram 
                                    297 ;--------------------------------------------------------
                                    298 	.area	SSEG
      000000                        299 __start__stack:
      000000                        300 	.ds	1
                                    301 
                                    302 ;--------------------------------------------------------
                                    303 ; indirectly addressable internal ram data
                                    304 ;--------------------------------------------------------
                                    305 	.area ISEG    (DATA)
      000000                        306 _giant::
      000000                        307 	.ds 1
                                    308 ;--------------------------------------------------------
                                    309 ; absolute internal ram data
                                    310 ;--------------------------------------------------------
                                    311 	.area IABS    (ABS,DATA)
                                    312 	.area IABS    (ABS,DATA)
                                    313 ;--------------------------------------------------------
                                    314 ; bit data
                                    315 ;--------------------------------------------------------
                                    316 	.area BSEG    (BIT)
                                    317 ;--------------------------------------------------------
                                    318 ; paged external ram data
                                    319 ;--------------------------------------------------------
                                    320 	.area PSEG    (PAG,XDATA)
                                    321 ;--------------------------------------------------------
                                    322 ; external ram data
                                    323 ;--------------------------------------------------------
                                    324 	.area XSEG    (XDATA)
      000000                        325 _s:
      000000                        326 	.ds 12
      00000C                        327 _c:
      00000C                        328 	.ds 16407
                                    329 ;--------------------------------------------------------
                                    330 ; absolute external ram data
                                    331 ;--------------------------------------------------------
                                    332 	.area XABS    (ABS,XDATA)
                                    333 ;--------------------------------------------------------
                                    334 ; external initialized ram data
                                    335 ;--------------------------------------------------------
                                    336 	.area XISEG   (XDATA)
      000000                        337 _deltas:
      000000                        338 	.ds 170
                                    339 	.area HOME    (CODE)
                                    340 	.area GSINIT0 (CODE)
                                    341 	.area GSINIT1 (CODE)
                                    342 	.area GSINIT2 (CODE)
                                    343 	.area GSINIT3 (CODE)
                                    344 	.area GSINIT4 (CODE)
                                    345 	.area GSINIT5 (CODE)
                                    346 	.area GSINIT  (CODE)
                                    347 	.area GSFINAL (CODE)
                                    348 	.area CSEG    (CODE)
                                    349 ;--------------------------------------------------------
                                    350 ; interrupt vector 
                                    351 ;--------------------------------------------------------
                                    352 	.area HOME    (CODE)
      000000                        353 __interrupt_vect:
      000000 02r00r00         [24]  354 	ljmp	__sdcc_gsinit_startup
                                    355 ;--------------------------------------------------------
                                    356 ; global & static initialisations
                                    357 ;--------------------------------------------------------
                                    358 	.area HOME    (CODE)
                                    359 	.area GSINIT  (CODE)
                                    360 	.area GSFINAL (CODE)
                                    361 	.area GSINIT  (CODE)
                                    362 	.globl __sdcc_gsinit_startup
                                    363 	.globl __sdcc_program_startup
                                    364 	.globl __start__stack
                                    365 	.globl __mcs51_genXINIT
                                    366 	.globl __mcs51_genXRAMCLEAR
                                    367 	.globl __mcs51_genRAMCLEAR
                                    368 	.area GSFINAL (CODE)
      000000 02r00r03         [24]  369 	ljmp	__sdcc_program_startup
                                    370 ;--------------------------------------------------------
                                    371 ; Home
                                    372 ;--------------------------------------------------------
                                    373 	.area HOME    (CODE)
                                    374 	.area HOME    (CODE)
      000003                        375 __sdcc_program_startup:
      000003 02r3Ar40         [24]  376 	ljmp	_main
                                    377 ;	return from main will return to caller
                                    378 ;--------------------------------------------------------
                                    379 ; code
                                    380 ;--------------------------------------------------------
                                    381 	.area CSEG    (CODE)
                                    382 ;------------------------------------------------------------
                                    383 ;Allocation info for local variables in function 'putchar'
                                    384 ;------------------------------------------------------------
                                    385 ;c                         Allocated to registers 
                                    386 ;------------------------------------------------------------
                                    387 ;	calc.c:16: int putchar(int c) __naked {
                                    388 ;	-----------------------------------------
                                    389 ;	 function putchar
                                    390 ;	-----------------------------------------
      000000                        391 _putchar:
                                    392 ;	naked function: no prologue.
                                    393 ;	calc.c:24: __endasm;
      000000 C0 E0            [24]  394 	push	acc
      000002 E5 82            [12]  395 	mov	a, dpl
      000004 12 00 3C         [24]  396 	lcall	0x003c
      000007 D0 E0            [24]  397 	pop	acc
      000009 22               [24]  398 	ret
                                    399 ;	calc.c:25: }
                                    400 ;	naked function: no epilogue.
                                    401 ;------------------------------------------------------------
                                    402 ;Allocation info for local variables in function 'getchar'
                                    403 ;------------------------------------------------------------
                                    404 ;	calc.c:27: int getchar(void) __naked {
                                    405 ;	-----------------------------------------
                                    406 ;	 function getchar
                                    407 ;	-----------------------------------------
      00000A                        408 _getchar:
                                    409 ;	naked function: no prologue.
                                    410 ;	calc.c:35: __endasm;
      00000A C0 E0            [24]  411 	push	acc
      00000C 12 00 36         [24]  412 	lcall	0x0036
      00000F F5 82            [12]  413 	mov	dpl, a
      000011 75 83 00         [24]  414 	mov	dph, #0
      000014 D0 E0            [24]  415 	pop	acc
      000016 22               [24]  416 	ret
                                    417 ;	calc.c:36: }
                                    418 ;	naked function: no epilogue.
                                    419 ;------------------------------------------------------------
                                    420 ;Allocation info for local variables in function 'getchar_poll'
                                    421 ;------------------------------------------------------------
                                    422 ;	calc.c:38: int getchar_poll(void) __naked {
                                    423 ;	-----------------------------------------
                                    424 ;	 function getchar_poll
                                    425 ;	-----------------------------------------
      000017                        426 _getchar_poll:
                                    427 ;	naked function: no prologue.
                                    428 ;	calc.c:53: __endasm;
      000017 C0 E0            [24]  429 	push	acc
      000019 C0 F0            [24]  430 	push	b
      00001B 74 FF            [12]  431 	mov	a, #0xff
      00001D F5 F0            [12]  432 	mov	b, a
      00001F 12 00 39         [24]  433 	lcall	0x0039
      000022 40 03            [24]  434 	jc	nochar
      000024 75 F0 00         [24]  435 	mov	b, #0x00
      000027                        436 	nochar:
      000027 F5 82            [12]  437 	mov	dpl, a
      000029 85 F0 83         [24]  438 	mov	dph, b
      00002C D0 F0            [24]  439 	pop	b
      00002E D0 E0            [24]  440 	pop	acc
      000030 22               [24]  441 	ret
                                    442 ;	calc.c:54: }
                                    443 ;	naked function: no epilogue.
                                    444 ;------------------------------------------------------------
                                    445 ;Allocation info for local variables in function 'accumulate'
                                    446 ;------------------------------------------------------------
                                    447 ;delta                     Allocated to stack - _bp -5
                                    448 ;_ctx                      Allocated to registers r5 r6 r7 
                                    449 ;ctx                       Allocated to stack - _bp +8
                                    450 ;d                         Allocated to stack - _bp +11
                                    451 ;sloc0                     Allocated to stack - _bp +1
                                    452 ;sloc1                     Allocated to stack - _bp +4
                                    453 ;------------------------------------------------------------
                                    454 ;	calc.c:80: static int accumulate(void *_ctx, delta_t *delta) __reentrant {
                                    455 ;	-----------------------------------------
                                    456 ;	 function accumulate
                                    457 ;	-----------------------------------------
      000031                        458 _accumulate:
                           000007   459 	ar7 = 0x07
                           000006   460 	ar6 = 0x06
                           000005   461 	ar5 = 0x05
                           000004   462 	ar4 = 0x04
                           000003   463 	ar3 = 0x03
                           000002   464 	ar2 = 0x02
                           000001   465 	ar1 = 0x01
                           000000   466 	ar0 = 0x00
      000031 C0*00            [24]  467 	push	_bp
      000033 E5 81            [12]  468 	mov	a,sp
      000035 F5*00            [12]  469 	mov	_bp,a
      000037 24 0E            [12]  470 	add	a,#0x0e
      000039 F5 81            [12]  471 	mov	sp,a
      00003B AD 82            [24]  472 	mov	r5,dpl
      00003D AE 83            [24]  473 	mov	r6,dph
      00003F AF F0            [24]  474 	mov	r7,b
                                    475 ;	calc.c:81: calc_ctx_t *ctx = (calc_ctx_t *)_ctx;
      000041 E5*00            [12]  476 	mov	a,_bp
      000043 24 08            [12]  477 	add	a,#0x08
      000045 F8               [12]  478 	mov	r0,a
      000046 A6 05            [24]  479 	mov	@r0,ar5
      000048 08               [12]  480 	inc	r0
      000049 A6 06            [24]  481 	mov	@r0,ar6
      00004B 08               [12]  482 	inc	r0
      00004C A6 07            [24]  483 	mov	@r0,ar7
                                    484 ;	calc.c:86: if (!ctx->acc_valid) {
      00004E E5*00            [12]  485 	mov	a,_bp
      000050 24 08            [12]  486 	add	a,#0x08
      000052 F8               [12]  487 	mov	r0,a
      000053 74 06            [12]  488 	mov	a,#0x06
      000055 26               [12]  489 	add	a,@r0
      000056 FA               [12]  490 	mov	r2,a
      000057 E4               [12]  491 	clr	a
      000058 08               [12]  492 	inc	r0
      000059 36               [12]  493 	addc	a,@r0
      00005A FB               [12]  494 	mov	r3,a
      00005B 08               [12]  495 	inc	r0
      00005C 86 04            [24]  496 	mov	ar4,@r0
      00005E 8A 82            [24]  497 	mov	dpl,r2
      000060 8B 83            [24]  498 	mov	dph,r3
      000062 8C F0            [24]  499 	mov	b,r4
      000064 12r00r00         [24]  500 	lcall	__gptrget
      000067 70 31            [24]  501 	jnz	00102$
                                    502 ;	calc.c:87: ctx->acc_valid = 1;
      000069 8A 82            [24]  503 	mov	dpl,r2
      00006B 8B 83            [24]  504 	mov	dph,r3
      00006D 8C F0            [24]  505 	mov	b,r4
      00006F 74 01            [12]  506 	mov	a,#0x01
      000071 12r00r00         [24]  507 	lcall	__gptrput
                                    508 ;	calc.c:88: ctx->acc = 0l;
      000074 E5*00            [12]  509 	mov	a,_bp
      000076 24 08            [12]  510 	add	a,#0x08
      000078 F8               [12]  511 	mov	r0,a
      000079 74 02            [12]  512 	mov	a,#0x02
      00007B 26               [12]  513 	add	a,@r0
      00007C FA               [12]  514 	mov	r2,a
      00007D E4               [12]  515 	clr	a
      00007E 08               [12]  516 	inc	r0
      00007F 36               [12]  517 	addc	a,@r0
      000080 FB               [12]  518 	mov	r3,a
      000081 08               [12]  519 	inc	r0
      000082 86 04            [24]  520 	mov	ar4,@r0
      000084 8A 82            [24]  521 	mov	dpl,r2
      000086 8B 83            [24]  522 	mov	dph,r3
      000088 8C F0            [24]  523 	mov	b,r4
      00008A E4               [12]  524 	clr	a
      00008B 12r00r00         [24]  525 	lcall	__gptrput
      00008E A3               [24]  526 	inc	dptr
      00008F 12r00r00         [24]  527 	lcall	__gptrput
      000092 A3               [24]  528 	inc	dptr
      000093 12r00r00         [24]  529 	lcall	__gptrput
      000096 A3               [24]  530 	inc	dptr
      000097 12r00r00         [24]  531 	lcall	__gptrput
      00009A                        532 00102$:
                                    533 ;	calc.c:91: d = strtol(ctx->digit, NULL, ctx->base);
      00009A E5*00            [12]  534 	mov	a,_bp
      00009C 24 08            [12]  535 	add	a,#0x08
      00009E F8               [12]  536 	mov	r0,a
      00009F 86 82            [24]  537 	mov	dpl,@r0
      0000A1 08               [12]  538 	inc	r0
      0000A2 86 83            [24]  539 	mov	dph,@r0
      0000A4 08               [12]  540 	inc	r0
      0000A5 86 F0            [24]  541 	mov	b,@r0
      0000A7 12r00r00         [24]  542 	lcall	__gptrget
      0000AA FB               [12]  543 	mov	r3,a
      0000AB A3               [24]  544 	inc	dptr
      0000AC 12r00r00         [24]  545 	lcall	__gptrget
      0000AF FC               [12]  546 	mov	r4,a
      0000B0 E5*00            [12]  547 	mov	a,_bp
      0000B2 24 08            [12]  548 	add	a,#0x08
      0000B4 F8               [12]  549 	mov	r0,a
      0000B5 74 07            [12]  550 	mov	a,#0x07
      0000B7 26               [12]  551 	add	a,@r0
      0000B8 FA               [12]  552 	mov	r2,a
      0000B9 E4               [12]  553 	clr	a
      0000BA 08               [12]  554 	inc	r0
      0000BB 36               [12]  555 	addc	a,@r0
      0000BC FE               [12]  556 	mov	r6,a
      0000BD 08               [12]  557 	inc	r0
      0000BE 86 07            [24]  558 	mov	ar7,@r0
      0000C0 C0 03            [24]  559 	push	ar3
      0000C2 C0 04            [24]  560 	push	ar4
      0000C4 E4               [12]  561 	clr	a
      0000C5 C0 E0            [24]  562 	push	acc
      0000C7 C0 E0            [24]  563 	push	acc
      0000C9 C0 E0            [24]  564 	push	acc
      0000CB 8A 82            [24]  565 	mov	dpl,r2
      0000CD 8E 83            [24]  566 	mov	dph,r6
      0000CF 8F F0            [24]  567 	mov	b,r7
      0000D1 12r00r00         [24]  568 	lcall	_strtol
      0000D4 C8               [12]  569 	xch	a,r0
      0000D5 E5*00            [12]  570 	mov	a,_bp
      0000D7 24 0B            [12]  571 	add	a,#0x0b
      0000D9 C8               [12]  572 	xch	a,r0
      0000DA A6 82            [24]  573 	mov	@r0,dpl
      0000DC 08               [12]  574 	inc	r0
      0000DD A6 83            [24]  575 	mov	@r0,dph
      0000DF 08               [12]  576 	inc	r0
      0000E0 A6 F0            [24]  577 	mov	@r0,b
      0000E2 08               [12]  578 	inc	r0
      0000E3 F6               [12]  579 	mov	@r0,a
      0000E4 E5 81            [12]  580 	mov	a,sp
      0000E6 24 FB            [12]  581 	add	a,#0xfb
      0000E8 F5 81            [12]  582 	mov	sp,a
                                    583 ;	calc.c:92: ctx->acc = ctx->acc * (long)ctx->base + d;
      0000EA E5*00            [12]  584 	mov	a,_bp
      0000EC 24 08            [12]  585 	add	a,#0x08
      0000EE F8               [12]  586 	mov	r0,a
      0000EF A9*00            [24]  587 	mov	r1,_bp
      0000F1 09               [12]  588 	inc	r1
      0000F2 74 02            [12]  589 	mov	a,#0x02
      0000F4 26               [12]  590 	add	a,@r0
      0000F5 F7               [12]  591 	mov	@r1,a
      0000F6 E4               [12]  592 	clr	a
      0000F7 08               [12]  593 	inc	r0
      0000F8 36               [12]  594 	addc	a,@r0
      0000F9 09               [12]  595 	inc	r1
      0000FA F7               [12]  596 	mov	@r1,a
      0000FB 08               [12]  597 	inc	r0
      0000FC 09               [12]  598 	inc	r1
      0000FD E6               [12]  599 	mov	a,@r0
      0000FE F7               [12]  600 	mov	@r1,a
      0000FF A8*00            [24]  601 	mov	r0,_bp
      000101 08               [12]  602 	inc	r0
      000102 86 82            [24]  603 	mov	dpl,@r0
      000104 08               [12]  604 	inc	r0
      000105 86 83            [24]  605 	mov	dph,@r0
      000107 08               [12]  606 	inc	r0
      000108 86 F0            [24]  607 	mov	b,@r0
      00010A E5*00            [12]  608 	mov	a,_bp
      00010C 24 04            [12]  609 	add	a,#0x04
      00010E F9               [12]  610 	mov	r1,a
      00010F 12r00r00         [24]  611 	lcall	__gptrget
      000112 F7               [12]  612 	mov	@r1,a
      000113 A3               [24]  613 	inc	dptr
      000114 12r00r00         [24]  614 	lcall	__gptrget
      000117 09               [12]  615 	inc	r1
      000118 F7               [12]  616 	mov	@r1,a
      000119 A3               [24]  617 	inc	dptr
      00011A 12r00r00         [24]  618 	lcall	__gptrget
      00011D 09               [12]  619 	inc	r1
      00011E F7               [12]  620 	mov	@r1,a
      00011F A3               [24]  621 	inc	dptr
      000120 12r00r00         [24]  622 	lcall	__gptrget
      000123 09               [12]  623 	inc	r1
      000124 F7               [12]  624 	mov	@r1,a
      000125 E5*00            [12]  625 	mov	a,_bp
      000127 24 08            [12]  626 	add	a,#0x08
      000129 F8               [12]  627 	mov	r0,a
      00012A 86 82            [24]  628 	mov	dpl,@r0
      00012C 08               [12]  629 	inc	r0
      00012D 86 83            [24]  630 	mov	dph,@r0
      00012F 08               [12]  631 	inc	r0
      000130 86 F0            [24]  632 	mov	b,@r0
      000132 12r00r00         [24]  633 	lcall	__gptrget
      000135 FA               [12]  634 	mov	r2,a
      000136 A3               [24]  635 	inc	dptr
      000137 12r00r00         [24]  636 	lcall	__gptrget
      00013A FB               [12]  637 	mov	r3,a
      00013B 33               [12]  638 	rlc	a
      00013C 95 E0            [12]  639 	subb	a,acc
      00013E FE               [12]  640 	mov	r6,a
      00013F FF               [12]  641 	mov	r7,a
      000140 C0 02            [24]  642 	push	ar2
      000142 C0 03            [24]  643 	push	ar3
      000144 C0 06            [24]  644 	push	ar6
      000146 C0 07            [24]  645 	push	ar7
      000148 E5*00            [12]  646 	mov	a,_bp
      00014A 24 04            [12]  647 	add	a,#0x04
      00014C F8               [12]  648 	mov	r0,a
      00014D 86 82            [24]  649 	mov	dpl,@r0
      00014F 08               [12]  650 	inc	r0
      000150 86 83            [24]  651 	mov	dph,@r0
      000152 08               [12]  652 	inc	r0
      000153 86 F0            [24]  653 	mov	b,@r0
      000155 08               [12]  654 	inc	r0
      000156 E6               [12]  655 	mov	a,@r0
      000157 12r00r00         [24]  656 	lcall	__mullong
      00015A AC 82            [24]  657 	mov	r4,dpl
      00015C AD 83            [24]  658 	mov	r5,dph
      00015E AE F0            [24]  659 	mov	r6,b
      000160 FF               [12]  660 	mov	r7,a
      000161 E5 81            [12]  661 	mov	a,sp
      000163 24 FC            [12]  662 	add	a,#0xfc
      000165 F5 81            [12]  663 	mov	sp,a
      000167 E5*00            [12]  664 	mov	a,_bp
      000169 24 0B            [12]  665 	add	a,#0x0b
      00016B F8               [12]  666 	mov	r0,a
      00016C E6               [12]  667 	mov	a,@r0
      00016D 2C               [12]  668 	add	a,r4
      00016E FC               [12]  669 	mov	r4,a
      00016F 08               [12]  670 	inc	r0
      000170 E6               [12]  671 	mov	a,@r0
      000171 3D               [12]  672 	addc	a,r5
      000172 FD               [12]  673 	mov	r5,a
      000173 08               [12]  674 	inc	r0
      000174 E6               [12]  675 	mov	a,@r0
      000175 3E               [12]  676 	addc	a,r6
      000176 FE               [12]  677 	mov	r6,a
      000177 08               [12]  678 	inc	r0
      000178 E6               [12]  679 	mov	a,@r0
      000179 3F               [12]  680 	addc	a,r7
      00017A FF               [12]  681 	mov	r7,a
      00017B A8*00            [24]  682 	mov	r0,_bp
      00017D 08               [12]  683 	inc	r0
      00017E 86 82            [24]  684 	mov	dpl,@r0
      000180 08               [12]  685 	inc	r0
      000181 86 83            [24]  686 	mov	dph,@r0
      000183 08               [12]  687 	inc	r0
      000184 86 F0            [24]  688 	mov	b,@r0
      000186 EC               [12]  689 	mov	a,r4
      000187 12r00r00         [24]  690 	lcall	__gptrput
      00018A A3               [24]  691 	inc	dptr
      00018B ED               [12]  692 	mov	a,r5
      00018C 12r00r00         [24]  693 	lcall	__gptrput
      00018F A3               [24]  694 	inc	dptr
      000190 EE               [12]  695 	mov	a,r6
      000191 12r00r00         [24]  696 	lcall	__gptrput
      000194 A3               [24]  697 	inc	dptr
      000195 EF               [12]  698 	mov	a,r7
      000196 12r00r00         [24]  699 	lcall	__gptrput
                                    700 ;	calc.c:94: return 1;
      000199 90 00 01         [24]  701 	mov	dptr,#0x0001
                                    702 ;	calc.c:95: }
      00019C 85*00 81         [24]  703 	mov	sp,_bp
      00019F D0*00            [24]  704 	pop	_bp
      0001A1 22               [24]  705 	ret
                                    706 ;------------------------------------------------------------
                                    707 ;Allocation info for local variables in function 'dump_pop'
                                    708 ;------------------------------------------------------------
                                    709 ;delta                     Allocated to stack - _bp -5
                                    710 ;_ctx                      Allocated to registers r5 r6 r7 
                                    711 ;ctx                       Allocated to stack - _bp +11
                                    712 ;d                         Allocated to stack - _bp +14
                                    713 ;r                         Allocated to registers r5 r6 
                                    714 ;__1310720003              Allocated to registers 
                                    715 ;s                         Allocated to registers r5 r6 r7 
                                    716 ;__1966080005              Allocated to registers 
                                    717 ;s                         Allocated to registers r4 r5 r6 
                                    718 ;__1966080007              Allocated to registers 
                                    719 ;s                         Allocated to registers r3 r4 r5 
                                    720 ;__1966080009              Allocated to stack - _bp +18
                                    721 ;d                         Allocated to registers r3 r4 r5 r6 
                                    722 ;__1310720001              Allocated to registers 
                                    723 ;d                         Allocated to stack - _bp +22
                                    724 ;mask                      Allocated to stack - _bp +26
                                    725 ;__1966080011              Allocated to registers 
                                    726 ;s                         Allocated to registers r3 r4 r5 
                                    727 ;__1966080013              Allocated to registers 
                                    728 ;s                         Allocated to registers r4 r5 r6 
                                    729 ;__3276800015              Allocated to registers 
                                    730 ;s                         Allocated to registers r5 r3 r2 
                                    731 ;__3276800017              Allocated to stack - _bp +18
                                    732 ;d                         Allocated to registers r2 r3 r4 r7 
                                    733 ;__1310720001              Allocated to registers 
                                    734 ;d                         Allocated to stack - _bp +22
                                    735 ;mask                      Allocated to stack - _bp +26
                                    736 ;__3276800019              Allocated to registers 
                                    737 ;s                         Allocated to registers r5 r3 r2 
                                    738 ;sloc0                     Allocated to stack - _bp +1
                                    739 ;sloc1                     Allocated to stack - _bp +2
                                    740 ;sloc2                     Allocated to stack - _bp +5
                                    741 ;sloc3                     Allocated to stack - _bp +8
                                    742 ;------------------------------------------------------------
                                    743 ;	calc.c:97: static int dump_pop(void *_ctx, delta_t *delta) __reentrant {
                                    744 ;	-----------------------------------------
                                    745 ;	 function dump_pop
                                    746 ;	-----------------------------------------
      0001A2                        747 _dump_pop:
      0001A2 C0*00            [24]  748 	push	_bp
      0001A4 E5 81            [12]  749 	mov	a,sp
      0001A6 F5*00            [12]  750 	mov	_bp,a
      0001A8 24 1D            [12]  751 	add	a,#0x1d
      0001AA F5 81            [12]  752 	mov	sp,a
      0001AC AD 82            [24]  753 	mov	r5,dpl
      0001AE AE 83            [24]  754 	mov	r6,dph
      0001B0 AF F0            [24]  755 	mov	r7,b
                                    756 ;	calc.c:98: calc_ctx_t *ctx = (calc_ctx_t *)_ctx;
      0001B2 E5*00            [12]  757 	mov	a,_bp
      0001B4 24 0B            [12]  758 	add	a,#0x0b
      0001B6 F8               [12]  759 	mov	r0,a
      0001B7 A6 05            [24]  760 	mov	@r0,ar5
      0001B9 08               [12]  761 	inc	r0
      0001BA A6 06            [24]  762 	mov	@r0,ar6
      0001BC 08               [12]  763 	inc	r0
      0001BD A6 07            [24]  764 	mov	@r0,ar7
                                    765 ;	calc.c:102: if (delta->event == EVENT_TERM) printstr("\r\n");
      0001BF E5*00            [12]  766 	mov	a,_bp
      0001C1 24 FB            [12]  767 	add	a,#0xfb
      0001C3 F8               [12]  768 	mov	r0,a
      0001C4 86 02            [24]  769 	mov	ar2,@r0
      0001C6 08               [12]  770 	inc	r0
      0001C7 86 03            [24]  771 	mov	ar3,@r0
      0001C9 08               [12]  772 	inc	r0
      0001CA 86 04            [24]  773 	mov	ar4,@r0
      0001CC E5*00            [12]  774 	mov	a,_bp
      0001CE 24 08            [12]  775 	add	a,#0x08
      0001D0 F8               [12]  776 	mov	r0,a
      0001D1 74 02            [12]  777 	mov	a,#0x02
      0001D3 2A               [12]  778 	add	a,r2
      0001D4 F6               [12]  779 	mov	@r0,a
      0001D5 E4               [12]  780 	clr	a
      0001D6 3B               [12]  781 	addc	a,r3
      0001D7 08               [12]  782 	inc	r0
      0001D8 F6               [12]  783 	mov	@r0,a
      0001D9 08               [12]  784 	inc	r0
      0001DA A6 04            [24]  785 	mov	@r0,ar4
      0001DC E5*00            [12]  786 	mov	a,_bp
      0001DE 24 08            [12]  787 	add	a,#0x08
      0001E0 F8               [12]  788 	mov	r0,a
      0001E1 86 82            [24]  789 	mov	dpl,@r0
      0001E3 08               [12]  790 	inc	r0
      0001E4 86 83            [24]  791 	mov	dph,@r0
      0001E6 08               [12]  792 	inc	r0
      0001E7 86 F0            [24]  793 	mov	b,@r0
      0001E9 12r00r00         [24]  794 	lcall	__gptrget
      0001EC FE               [12]  795 	mov	r6,a
      0001ED A3               [24]  796 	inc	dptr
      0001EE 12r00r00         [24]  797 	lcall	__gptrget
      0001F1 FF               [12]  798 	mov	r7,a
      0001F2 BE 08 27         [24]  799 	cjne	r6,#0x08,00102$
      0001F5 BF 00 24         [24]  800 	cjne	r7,#0x00,00102$
      0001F8 7Dr17            [12]  801 	mov	r5,#___str_3
      0001FA 7Es00            [12]  802 	mov	r6,#(___str_3 >> 8)
      0001FC 7F 80            [12]  803 	mov	r7,#0x80
                                    804 ;	calc.c:59: return;
      0001FE                        805 00135$:
                                    806 ;	calc.c:57: for (; *s; s++) putchar(*s);
      0001FE 8D 82            [24]  807 	mov	dpl,r5
      000200 8E 83            [24]  808 	mov	dph,r6
      000202 8F F0            [24]  809 	mov	b,r7
      000204 12r00r00         [24]  810 	lcall	__gptrget
      000207 FC               [12]  811 	mov	r4,a
      000208 60 12            [24]  812 	jz	00102$
      00020A 8C 03            [24]  813 	mov	ar3,r4
      00020C 7C 00            [12]  814 	mov	r4,#0x00
      00020E 8B 82            [24]  815 	mov	dpl,r3
      000210 8C 83            [24]  816 	mov	dph,r4
      000212 12r00r00         [24]  817 	lcall	_putchar
      000215 0D               [12]  818 	inc	r5
                                    819 ;	calc.c:102: if (delta->event == EVENT_TERM) printstr("\r\n");
      000216 BD 00 E5         [24]  820 	cjne	r5,#0x00,00135$
      000219 0E               [12]  821 	inc	r6
      00021A 80 E2            [24]  822 	sjmp	00135$
      00021C                        823 00102$:
                                    824 ;	calc.c:103: r = stack_pop(ctx->ps, &d);
      00021C E5*00            [12]  825 	mov	a,_bp
      00021E 24 0E            [12]  826 	add	a,#0x0e
      000220 FF               [12]  827 	mov	r7,a
      000221 E5*00            [12]  828 	mov	a,_bp
      000223 24 05            [12]  829 	add	a,#0x05
      000225 F8               [12]  830 	mov	r0,a
      000226 A6 07            [24]  831 	mov	@r0,ar7
      000228 08               [12]  832 	inc	r0
      000229 76 00            [12]  833 	mov	@r0,#0x00
      00022B 08               [12]  834 	inc	r0
      00022C 76 40            [12]  835 	mov	@r0,#0x40
      00022E E5*00            [12]  836 	mov	a,_bp
      000230 24 0B            [12]  837 	add	a,#0x0b
      000232 F8               [12]  838 	mov	r0,a
      000233 A9*00            [24]  839 	mov	r1,_bp
      000235 09               [12]  840 	inc	r1
      000236 09               [12]  841 	inc	r1
      000237 74 11            [12]  842 	mov	a,#0x11
      000239 26               [12]  843 	add	a,@r0
      00023A F7               [12]  844 	mov	@r1,a
      00023B 74 40            [12]  845 	mov	a,#0x40
      00023D 08               [12]  846 	inc	r0
      00023E 36               [12]  847 	addc	a,@r0
      00023F 09               [12]  848 	inc	r1
      000240 F7               [12]  849 	mov	@r1,a
      000241 08               [12]  850 	inc	r0
      000242 09               [12]  851 	inc	r1
      000243 E6               [12]  852 	mov	a,@r0
      000244 F7               [12]  853 	mov	@r1,a
      000245 A8*00            [24]  854 	mov	r0,_bp
      000247 08               [12]  855 	inc	r0
      000248 08               [12]  856 	inc	r0
      000249 86 82            [24]  857 	mov	dpl,@r0
      00024B 08               [12]  858 	inc	r0
      00024C 86 83            [24]  859 	mov	dph,@r0
      00024E 08               [12]  860 	inc	r0
      00024F 86 F0            [24]  861 	mov	b,@r0
      000251 12r00r00         [24]  862 	lcall	__gptrget
      000254 FA               [12]  863 	mov	r2,a
      000255 A3               [24]  864 	inc	dptr
      000256 12r00r00         [24]  865 	lcall	__gptrget
      000259 FB               [12]  866 	mov	r3,a
      00025A A3               [24]  867 	inc	dptr
      00025B 12r00r00         [24]  868 	lcall	__gptrget
      00025E FE               [12]  869 	mov	r6,a
      00025F C0 07            [24]  870 	push	ar7
      000261 E5*00            [12]  871 	mov	a,_bp
      000263 24 05            [12]  872 	add	a,#0x05
      000265 F8               [12]  873 	mov	r0,a
      000266 E6               [12]  874 	mov	a,@r0
      000267 C0 E0            [24]  875 	push	acc
      000269 08               [12]  876 	inc	r0
      00026A E6               [12]  877 	mov	a,@r0
      00026B C0 E0            [24]  878 	push	acc
      00026D 08               [12]  879 	inc	r0
      00026E E6               [12]  880 	mov	a,@r0
      00026F C0 E0            [24]  881 	push	acc
      000271 8A 82            [24]  882 	mov	dpl,r2
      000273 8B 83            [24]  883 	mov	dph,r3
      000275 8E F0            [24]  884 	mov	b,r6
      000277 12r00r00         [24]  885 	lcall	_stack_pop
      00027A AE 82            [24]  886 	mov	r6,dpl
      00027C AD 83            [24]  887 	mov	r5,dph
      00027E 15 81            [12]  888 	dec	sp
      000280 15 81            [12]  889 	dec	sp
      000282 15 81            [12]  890 	dec	sp
      000284 D0 07            [24]  891 	pop	ar7
                                    892 ;	calc.c:104: if (!r) {
      000286 EE               [12]  893 	mov	a,r6
      000287 4D               [12]  894 	orl	a,r5
      000288 70 44            [24]  895 	jnz	00183$
                                    896 ;	calc.c:105: if (delta->event != EVENT_TERM) printstr("stack underflow\r\n");
      00028A E5*00            [12]  897 	mov	a,_bp
      00028C 24 08            [12]  898 	add	a,#0x08
      00028E F8               [12]  899 	mov	r0,a
      00028F 86 82            [24]  900 	mov	dpl,@r0
      000291 08               [12]  901 	inc	r0
      000292 86 83            [24]  902 	mov	dph,@r0
      000294 08               [12]  903 	inc	r0
      000295 86 F0            [24]  904 	mov	b,@r0
      000297 12r00r00         [24]  905 	lcall	__gptrget
      00029A FD               [12]  906 	mov	r5,a
      00029B A3               [24]  907 	inc	dptr
      00029C 12r00r00         [24]  908 	lcall	__gptrget
      00029F FE               [12]  909 	mov	r6,a
      0002A0 BD 08 06         [24]  910 	cjne	r5,#0x08,00320$
      0002A3 BE 00 03         [24]  911 	cjne	r6,#0x00,00320$
      0002A6 02r04rAD         [24]  912 	ljmp	00110$
      0002A9                        913 00320$:
      0002A9 7Cr1A            [12]  914 	mov	r4,#___str_4
      0002AB 7Ds00            [12]  915 	mov	r5,#(___str_4 >> 8)
      0002AD 7E 80            [12]  916 	mov	r6,#0x80
                                    917 ;	calc.c:59: return;
      0002AF                        918 00138$:
                                    919 ;	calc.c:57: for (; *s; s++) putchar(*s);
      0002AF 8C 82            [24]  920 	mov	dpl,r4
      0002B1 8D 83            [24]  921 	mov	dph,r5
      0002B3 8E F0            [24]  922 	mov	b,r6
      0002B5 12r00r00         [24]  923 	lcall	__gptrget
      0002B8 FB               [12]  924 	mov	r3,a
      0002B9 70 03            [24]  925 	jnz	00321$
      0002BB 02r04rAD         [24]  926 	ljmp	00110$
      0002BE                        927 00321$:
      0002BE 7A 00            [12]  928 	mov	r2,#0x00
      0002C0 8B 82            [24]  929 	mov	dpl,r3
      0002C2 8A 83            [24]  930 	mov	dph,r2
      0002C4 12r00r00         [24]  931 	lcall	_putchar
      0002C7 0C               [12]  932 	inc	r4
                                    933 ;	calc.c:106: } else while (r > 0) {
      0002C8 BC 00 E4         [24]  934 	cjne	r4,#0x00,00138$
      0002CB 0D               [12]  935 	inc	r5
      0002CC 80 E1            [24]  936 	sjmp	00138$
      0002CE                        937 00183$:
      0002CE A8*00            [24]  938 	mov	r0,_bp
      0002D0 08               [12]  939 	inc	r0
      0002D1 A6 07            [24]  940 	mov	@r0,ar7
      0002D3                        941 00105$:
      0002D3 C3               [12]  942 	clr	c
      0002D4 E4               [12]  943 	clr	a
      0002D5 9E               [12]  944 	subb	a,r6
      0002D6 74 80            [12]  945 	mov	a,#(0x00 ^ 0x80)
      0002D8 8D F0            [24]  946 	mov	b,r5
      0002DA 63 F0 80         [24]  947 	xrl	b,#0x80
      0002DD 95 F0            [12]  948 	subb	a,b
      0002DF 40 03            [24]  949 	jc	00323$
      0002E1 02r04rAD         [24]  950 	ljmp	00110$
      0002E4                        951 00323$:
                                    952 ;	calc.c:107: printstr("PSPA\t");
      0002E4 7Br2C            [12]  953 	mov	r3,#___str_5
      0002E6 7Cs00            [12]  954 	mov	r4,#(___str_5 >> 8)
      0002E8 7D 80            [12]  955 	mov	r5,#0x80
                                    956 ;	calc.c:59: return;
      0002EA                        957 00141$:
                                    958 ;	calc.c:57: for (; *s; s++) putchar(*s);
      0002EA 8B 82            [24]  959 	mov	dpl,r3
      0002EC 8C 83            [24]  960 	mov	dph,r4
      0002EE 8D F0            [24]  961 	mov	b,r5
      0002F0 12r00r00         [24]  962 	lcall	__gptrget
      0002F3 FA               [12]  963 	mov	r2,a
      0002F4 60 10            [24]  964 	jz	00119$
      0002F6 7E 00            [12]  965 	mov	r6,#0x00
      0002F8 8A 82            [24]  966 	mov	dpl,r2
      0002FA 8E 83            [24]  967 	mov	dph,r6
      0002FC 12r00r00         [24]  968 	lcall	_putchar
      0002FF 0B               [12]  969 	inc	r3
                                    970 ;	calc.c:107: printstr("PSPA\t");
      000300 BB 00 E7         [24]  971 	cjne	r3,#0x00,00141$
      000303 0C               [12]  972 	inc	r4
      000304 80 E4            [24]  973 	sjmp	00141$
      000306                        974 00119$:
                                    975 ;	calc.c:108: printall(d);
      000306 E5*00            [12]  976 	mov	a,_bp
      000308 24 0E            [12]  977 	add	a,#0x0e
      00030A F8               [12]  978 	mov	r0,a
      00030B E5*00            [12]  979 	mov	a,_bp
      00030D 24 12            [12]  980 	add	a,#0x12
      00030F F9               [12]  981 	mov	r1,a
      000310 E6               [12]  982 	mov	a,@r0
      000311 F7               [12]  983 	mov	@r1,a
      000312 08               [12]  984 	inc	r0
      000313 09               [12]  985 	inc	r1
      000314 E6               [12]  986 	mov	a,@r0
      000315 F7               [12]  987 	mov	@r1,a
      000316 08               [12]  988 	inc	r0
      000317 09               [12]  989 	inc	r1
      000318 E6               [12]  990 	mov	a,@r0
      000319 F7               [12]  991 	mov	@r1,a
      00031A 08               [12]  992 	inc	r0
      00031B 09               [12]  993 	inc	r1
      00031C E6               [12]  994 	mov	a,@r0
      00031D F7               [12]  995 	mov	@r1,a
      00031E E5*00            [12]  996 	mov	a,_bp
      000320 24 12            [12]  997 	add	a,#0x12
      000322 F8               [12]  998 	mov	r0,a
      000323 86 03            [24]  999 	mov	ar3,@r0
      000325 08               [12] 1000 	inc	r0
      000326 86 04            [24] 1001 	mov	ar4,@r0
      000328 08               [12] 1002 	inc	r0
      000329 86 05            [24] 1003 	mov	ar5,@r0
      00032B 08               [12] 1004 	inc	r0
      00032C 86 06            [24] 1005 	mov	ar6,@r0
                                   1006 ;	calc.c:72: printf("%08lx\t", d);
      00032E C0 07            [24] 1007 	push	ar7
      000330 C0 06            [24] 1008 	push	ar6
      000332 C0 05            [24] 1009 	push	ar5
      000334 C0 04            [24] 1010 	push	ar4
      000336 C0 03            [24] 1011 	push	ar3
      000338 E5*00            [12] 1012 	mov	a,_bp
      00033A 24 12            [12] 1013 	add	a,#0x12
      00033C F8               [12] 1014 	mov	r0,a
      00033D E6               [12] 1015 	mov	a,@r0
      00033E C0 E0            [24] 1016 	push	acc
      000340 08               [12] 1017 	inc	r0
      000341 E6               [12] 1018 	mov	a,@r0
      000342 C0 E0            [24] 1019 	push	acc
      000344 08               [12] 1020 	inc	r0
      000345 E6               [12] 1021 	mov	a,@r0
      000346 C0 E0            [24] 1022 	push	acc
      000348 08               [12] 1023 	inc	r0
      000349 E6               [12] 1024 	mov	a,@r0
      00034A C0 E0            [24] 1025 	push	acc
      00034C 74r00            [12] 1026 	mov	a,#___str_0
      00034E C0 E0            [24] 1027 	push	acc
      000350 74s00            [12] 1028 	mov	a,#(___str_0 >> 8)
      000352 C0 E0            [24] 1029 	push	acc
      000354 74 80            [12] 1030 	mov	a,#0x80
      000356 C0 E0            [24] 1031 	push	acc
      000358 12r00r00         [24] 1032 	lcall	_printf
      00035B E5 81            [12] 1033 	mov	a,sp
      00035D 24 F9            [12] 1034 	add	a,#0xf9
      00035F F5 81            [12] 1035 	mov	sp,a
      000361 D0 03            [24] 1036 	pop	ar3
      000363 D0 04            [24] 1037 	pop	ar4
      000365 D0 05            [24] 1038 	pop	ar5
      000367 D0 06            [24] 1039 	pop	ar6
                                   1040 ;	calc.c:73: printf("% 11ld\t", d);
      000369 C0 06            [24] 1041 	push	ar6
      00036B C0 05            [24] 1042 	push	ar5
      00036D C0 04            [24] 1043 	push	ar4
      00036F C0 03            [24] 1044 	push	ar3
      000371 C0 03            [24] 1045 	push	ar3
      000373 C0 04            [24] 1046 	push	ar4
      000375 C0 05            [24] 1047 	push	ar5
      000377 C0 06            [24] 1048 	push	ar6
      000379 74r07            [12] 1049 	mov	a,#___str_1
      00037B C0 E0            [24] 1050 	push	acc
      00037D 74s00            [12] 1051 	mov	a,#(___str_1 >> 8)
      00037F C0 E0            [24] 1052 	push	acc
      000381 74 80            [12] 1053 	mov	a,#0x80
      000383 C0 E0            [24] 1054 	push	acc
      000385 12r00r00         [24] 1055 	lcall	_printf
      000388 E5 81            [12] 1056 	mov	a,sp
      00038A 24 F9            [12] 1057 	add	a,#0xf9
      00038C F5 81            [12] 1058 	mov	sp,a
      00038E D0 03            [24] 1059 	pop	ar3
      000390 D0 04            [24] 1060 	pop	ar4
      000392 D0 05            [24] 1061 	pop	ar5
      000394 D0 06            [24] 1062 	pop	ar6
                                   1063 ;	calc.c:74: printf("%011lo\t", d);
      000396 C0 06            [24] 1064 	push	ar6
      000398 C0 05            [24] 1065 	push	ar5
      00039A C0 04            [24] 1066 	push	ar4
      00039C C0 03            [24] 1067 	push	ar3
      00039E C0 03            [24] 1068 	push	ar3
      0003A0 C0 04            [24] 1069 	push	ar4
      0003A2 C0 05            [24] 1070 	push	ar5
      0003A4 C0 06            [24] 1071 	push	ar6
      0003A6 74r0F            [12] 1072 	mov	a,#___str_2
      0003A8 C0 E0            [24] 1073 	push	acc
      0003AA 74s00            [12] 1074 	mov	a,#(___str_2 >> 8)
      0003AC C0 E0            [24] 1075 	push	acc
      0003AE 74 80            [12] 1076 	mov	a,#0x80
      0003B0 C0 E0            [24] 1077 	push	acc
      0003B2 12r00r00         [24] 1078 	lcall	_printf
      0003B5 E5 81            [12] 1079 	mov	a,sp
      0003B7 24 F9            [12] 1080 	add	a,#0xf9
      0003B9 F5 81            [12] 1081 	mov	sp,a
      0003BB D0 03            [24] 1082 	pop	ar3
      0003BD D0 04            [24] 1083 	pop	ar4
      0003BF D0 05            [24] 1084 	pop	ar5
      0003C1 D0 06            [24] 1085 	pop	ar6
      0003C3 D0 07            [24] 1086 	pop	ar7
                                   1087 ;	calc.c:75: printbin(d);
      0003C5 E5*00            [12] 1088 	mov	a,_bp
      0003C7 24 16            [12] 1089 	add	a,#0x16
      0003C9 F8               [12] 1090 	mov	r0,a
      0003CA A6 03            [24] 1091 	mov	@r0,ar3
      0003CC 08               [12] 1092 	inc	r0
      0003CD A6 04            [24] 1093 	mov	@r0,ar4
      0003CF 08               [12] 1094 	inc	r0
      0003D0 A6 05            [24] 1095 	mov	@r0,ar5
      0003D2 08               [12] 1096 	inc	r0
      0003D3 A6 06            [24] 1097 	mov	@r0,ar6
                                   1098 ;	calc.c:65: for (mask = 0x80000000lu; mask; mask >>= 1)
      0003D5 E5*00            [12] 1099 	mov	a,_bp
      0003D7 24 1A            [12] 1100 	add	a,#0x1a
      0003D9 F8               [12] 1101 	mov	r0,a
      0003DA E4               [12] 1102 	clr	a
      0003DB F6               [12] 1103 	mov	@r0,a
      0003DC 08               [12] 1104 	inc	r0
      0003DD F6               [12] 1105 	mov	@r0,a
      0003DE 08               [12] 1106 	inc	r0
      0003DF F6               [12] 1107 	mov	@r0,a
      0003E0 08               [12] 1108 	inc	r0
      0003E1 76 80            [12] 1109 	mov	@r0,#0x80
                                   1110 ;	calc.c:122: return 1;
                                   1111 ;	calc.c:65: for (mask = 0x80000000lu; mask; mask >>= 1)
      0003E3                       1112 00143$:
                                   1113 ;	calc.c:66: (void)putchar((d & mask) ? (int)'1' : (int)'0');
      0003E3 E5*00            [12] 1114 	mov	a,_bp
      0003E5 24 16            [12] 1115 	add	a,#0x16
      0003E7 F8               [12] 1116 	mov	r0,a
      0003E8 86 02            [24] 1117 	mov	ar2,@r0
      0003EA 08               [12] 1118 	inc	r0
      0003EB 86 03            [24] 1119 	mov	ar3,@r0
      0003ED 08               [12] 1120 	inc	r0
      0003EE 86 04            [24] 1121 	mov	ar4,@r0
      0003F0 08               [12] 1122 	inc	r0
      0003F1 86 05            [24] 1123 	mov	ar5,@r0
      0003F3 E5*00            [12] 1124 	mov	a,_bp
      0003F5 24 1A            [12] 1125 	add	a,#0x1a
      0003F7 F8               [12] 1126 	mov	r0,a
      0003F8 E6               [12] 1127 	mov	a,@r0
      0003F9 52 02            [12] 1128 	anl	ar2,a
      0003FB 08               [12] 1129 	inc	r0
      0003FC E6               [12] 1130 	mov	a,@r0
      0003FD 52 03            [12] 1131 	anl	ar3,a
      0003FF 08               [12] 1132 	inc	r0
      000400 E6               [12] 1133 	mov	a,@r0
      000401 52 04            [12] 1134 	anl	ar4,a
      000403 08               [12] 1135 	inc	r0
      000404 E6               [12] 1136 	mov	a,@r0
      000405 52 05            [12] 1137 	anl	ar5,a
      000407 EA               [12] 1138 	mov	a,r2
      000408 4B               [12] 1139 	orl	a,r3
      000409 4C               [12] 1140 	orl	a,r4
      00040A 4D               [12] 1141 	orl	a,r5
      00040B 60 06            [24] 1142 	jz	00164$
      00040D 7C 31            [12] 1143 	mov	r4,#0x31
      00040F 7D 00            [12] 1144 	mov	r5,#0x00
      000411 80 04            [24] 1145 	sjmp	00165$
      000413                       1146 00164$:
      000413 7C 30            [12] 1147 	mov	r4,#0x30
      000415 7D 00            [12] 1148 	mov	r5,#0x00
      000417                       1149 00165$:
      000417 8C 82            [24] 1150 	mov	dpl,r4
      000419 8D 83            [24] 1151 	mov	dph,r5
      00041B 12r00r00         [24] 1152 	lcall	_putchar
                                   1153 ;	calc.c:65: for (mask = 0x80000000lu; mask; mask >>= 1)
      00041E E5*00            [12] 1154 	mov	a,_bp
      000420 24 1A            [12] 1155 	add	a,#0x1a
      000422 F8               [12] 1156 	mov	r0,a
      000423 08               [12] 1157 	inc	r0
      000424 08               [12] 1158 	inc	r0
      000425 08               [12] 1159 	inc	r0
      000426 E6               [12] 1160 	mov	a,@r0
      000427 C3               [12] 1161 	clr	c
      000428 13               [12] 1162 	rrc	a
      000429 F6               [12] 1163 	mov	@r0,a
      00042A 18               [12] 1164 	dec	r0
      00042B E6               [12] 1165 	mov	a,@r0
      00042C 13               [12] 1166 	rrc	a
      00042D F6               [12] 1167 	mov	@r0,a
      00042E 18               [12] 1168 	dec	r0
      00042F E6               [12] 1169 	mov	a,@r0
      000430 13               [12] 1170 	rrc	a
      000431 F6               [12] 1171 	mov	@r0,a
      000432 18               [12] 1172 	dec	r0
      000433 E6               [12] 1173 	mov	a,@r0
      000434 13               [12] 1174 	rrc	a
      000435 F6               [12] 1175 	mov	@r0,a
      000436 E5*00            [12] 1176 	mov	a,_bp
      000438 24 1A            [12] 1177 	add	a,#0x1a
      00043A F8               [12] 1178 	mov	r0,a
      00043B E6               [12] 1179 	mov	a,@r0
      00043C 08               [12] 1180 	inc	r0
      00043D 46               [12] 1181 	orl	a,@r0
      00043E 08               [12] 1182 	inc	r0
      00043F 46               [12] 1183 	orl	a,@r0
      000440 08               [12] 1184 	inc	r0
      000441 46               [12] 1185 	orl	a,@r0
      000442 70 9F            [24] 1186 	jnz	00143$
                                   1187 ;	calc.c:109: printstr("\r\n");
      000444 7Br17            [12] 1188 	mov	r3,#___str_3
      000446 7Cs00            [12] 1189 	mov	r4,#(___str_3 >> 8)
      000448 7D 80            [12] 1190 	mov	r5,#0x80
                                   1191 ;	calc.c:59: return;
      00044A                       1192 00146$:
                                   1193 ;	calc.c:57: for (; *s; s++) putchar(*s);
      00044A 8B 82            [24] 1194 	mov	dpl,r3
      00044C 8C 83            [24] 1195 	mov	dph,r4
      00044E 8D F0            [24] 1196 	mov	b,r5
      000450 12r00r00         [24] 1197 	lcall	__gptrget
      000453 FA               [12] 1198 	mov	r2,a
      000454 60 10            [24] 1199 	jz	00124$
      000456 7E 00            [12] 1200 	mov	r6,#0x00
      000458 8A 82            [24] 1201 	mov	dpl,r2
      00045A 8E 83            [24] 1202 	mov	dph,r6
      00045C 12r00r00         [24] 1203 	lcall	_putchar
      00045F 0B               [12] 1204 	inc	r3
                                   1205 ;	calc.c:109: printstr("\r\n");
      000460 BB 00 E7         [24] 1206 	cjne	r3,#0x00,00146$
      000463 0C               [12] 1207 	inc	r4
      000464 80 E4            [24] 1208 	sjmp	00146$
      000466                       1209 00124$:
                                   1210 ;	calc.c:110: r = stack_pop(ctx->ps, &d);
      000466 C0 07            [24] 1211 	push	ar7
      000468 A8*00            [24] 1212 	mov	r0,_bp
      00046A 08               [12] 1213 	inc	r0
      00046B 86 03            [24] 1214 	mov	ar3,@r0
      00046D 7C 00            [12] 1215 	mov	r4,#0x00
      00046F 7D 40            [12] 1216 	mov	r5,#0x40
      000471 A8*00            [24] 1217 	mov	r0,_bp
      000473 08               [12] 1218 	inc	r0
      000474 08               [12] 1219 	inc	r0
      000475 86 82            [24] 1220 	mov	dpl,@r0
      000477 08               [12] 1221 	inc	r0
      000478 86 83            [24] 1222 	mov	dph,@r0
      00047A 08               [12] 1223 	inc	r0
      00047B 86 F0            [24] 1224 	mov	b,@r0
      00047D 12r00r00         [24] 1225 	lcall	__gptrget
      000480 FA               [12] 1226 	mov	r2,a
      000481 A3               [24] 1227 	inc	dptr
      000482 12r00r00         [24] 1228 	lcall	__gptrget
      000485 FE               [12] 1229 	mov	r6,a
      000486 A3               [24] 1230 	inc	dptr
      000487 12r00r00         [24] 1231 	lcall	__gptrget
      00048A FF               [12] 1232 	mov	r7,a
      00048B C0 07            [24] 1233 	push	ar7
      00048D C0 03            [24] 1234 	push	ar3
      00048F C0 04            [24] 1235 	push	ar4
      000491 C0 05            [24] 1236 	push	ar5
      000493 8A 82            [24] 1237 	mov	dpl,r2
      000495 8E 83            [24] 1238 	mov	dph,r6
      000497 8F F0            [24] 1239 	mov	b,r7
      000499 12r00r00         [24] 1240 	lcall	_stack_pop
      00049C AE 82            [24] 1241 	mov	r6,dpl
      00049E AD 83            [24] 1242 	mov	r5,dph
      0004A0 15 81            [12] 1243 	dec	sp
      0004A2 15 81            [12] 1244 	dec	sp
      0004A4 15 81            [12] 1245 	dec	sp
      0004A6 D0 07            [24] 1246 	pop	ar7
      0004A8 D0 07            [24] 1247 	pop	ar7
      0004AA 02r02rD3         [24] 1248 	ljmp	00105$
      0004AD                       1249 00110$:
                                   1250 ;	calc.c:113: if (delta->event == EVENT_TERM) {
      0004AD E5*00            [12] 1251 	mov	a,_bp
      0004AF 24 08            [12] 1252 	add	a,#0x08
      0004B1 F8               [12] 1253 	mov	r0,a
      0004B2 86 82            [24] 1254 	mov	dpl,@r0
      0004B4 08               [12] 1255 	inc	r0
      0004B5 86 83            [24] 1256 	mov	dph,@r0
      0004B7 08               [12] 1257 	inc	r0
      0004B8 86 F0            [24] 1258 	mov	b,@r0
      0004BA 12r00r00         [24] 1259 	lcall	__gptrget
      0004BD FD               [12] 1260 	mov	r5,a
      0004BE A3               [24] 1261 	inc	dptr
      0004BF 12r00r00         [24] 1262 	lcall	__gptrget
      0004C2 FE               [12] 1263 	mov	r6,a
      0004C3 BD 08 05         [24] 1264 	cjne	r5,#0x08,00330$
      0004C6 BE 00 02         [24] 1265 	cjne	r6,#0x00,00330$
      0004C9 80 03            [24] 1266 	sjmp	00331$
      0004CB                       1267 00330$:
      0004CB 02r07r41         [24] 1268 	ljmp	00113$
      0004CE                       1269 00331$:
                                   1270 ;	calc.c:114: printstr("\r\n");
      0004CE 7Cr17            [12] 1271 	mov	r4,#___str_3
      0004D0 7Ds00            [12] 1272 	mov	r5,#(___str_3 >> 8)
      0004D2 7E 80            [12] 1273 	mov	r6,#0x80
                                   1274 ;	calc.c:59: return;
      0004D4                       1275 00149$:
                                   1276 ;	calc.c:57: for (; *s; s++) putchar(*s);
      0004D4 8C 82            [24] 1277 	mov	dpl,r4
      0004D6 8D 83            [24] 1278 	mov	dph,r5
      0004D8 8E F0            [24] 1279 	mov	b,r6
      0004DA 12r00r00         [24] 1280 	lcall	__gptrget
      0004DD FB               [12] 1281 	mov	r3,a
      0004DE 60 10            [24] 1282 	jz	00126$
      0004E0 7A 00            [12] 1283 	mov	r2,#0x00
      0004E2 8B 82            [24] 1284 	mov	dpl,r3
      0004E4 8A 83            [24] 1285 	mov	dph,r2
      0004E6 12r00r00         [24] 1286 	lcall	_putchar
      0004E9 0C               [12] 1287 	inc	r4
                                   1288 ;	calc.c:114: printstr("\r\n");
      0004EA BC 00 E7         [24] 1289 	cjne	r4,#0x00,00149$
      0004ED 0D               [12] 1290 	inc	r5
      0004EE 80 E4            [24] 1291 	sjmp	00149$
      0004F0                       1292 00126$:
                                   1293 ;	calc.c:115: for (r = stack_pop(ctx->ss, &d); r > 0; r = stack_pop(ctx->ss, &d)) {
      0004F0 8F 06            [24] 1294 	mov	ar6,r7
      0004F2 E5*00            [12] 1295 	mov	a,_bp
      0004F4 24 05            [12] 1296 	add	a,#0x05
      0004F6 F8               [12] 1297 	mov	r0,a
      0004F7 A6 06            [24] 1298 	mov	@r0,ar6
      0004F9 08               [12] 1299 	inc	r0
      0004FA 76 00            [12] 1300 	mov	@r0,#0x00
      0004FC 08               [12] 1301 	inc	r0
      0004FD 76 40            [12] 1302 	mov	@r0,#0x40
      0004FF E5*00            [12] 1303 	mov	a,_bp
      000501 24 0B            [12] 1304 	add	a,#0x0b
      000503 F8               [12] 1305 	mov	r0,a
      000504 E5*00            [12] 1306 	mov	a,_bp
      000506 24 08            [12] 1307 	add	a,#0x08
      000508 F9               [12] 1308 	mov	r1,a
      000509 74 14            [12] 1309 	mov	a,#0x14
      00050B 26               [12] 1310 	add	a,@r0
      00050C F7               [12] 1311 	mov	@r1,a
      00050D 74 40            [12] 1312 	mov	a,#0x40
      00050F 08               [12] 1313 	inc	r0
      000510 36               [12] 1314 	addc	a,@r0
      000511 09               [12] 1315 	inc	r1
      000512 F7               [12] 1316 	mov	@r1,a
      000513 08               [12] 1317 	inc	r0
      000514 09               [12] 1318 	inc	r1
      000515 E6               [12] 1319 	mov	a,@r0
      000516 F7               [12] 1320 	mov	@r1,a
      000517 E5*00            [12] 1321 	mov	a,_bp
      000519 24 08            [12] 1322 	add	a,#0x08
      00051B F8               [12] 1323 	mov	r0,a
      00051C 86 82            [24] 1324 	mov	dpl,@r0
      00051E 08               [12] 1325 	inc	r0
      00051F 86 83            [24] 1326 	mov	dph,@r0
      000521 08               [12] 1327 	inc	r0
      000522 86 F0            [24] 1328 	mov	b,@r0
      000524 12r00r00         [24] 1329 	lcall	__gptrget
      000527 FA               [12] 1330 	mov	r2,a
      000528 A3               [24] 1331 	inc	dptr
      000529 12r00r00         [24] 1332 	lcall	__gptrget
      00052C FB               [12] 1333 	mov	r3,a
      00052D A3               [24] 1334 	inc	dptr
      00052E 12r00r00         [24] 1335 	lcall	__gptrget
      000531 FE               [12] 1336 	mov	r6,a
      000532 C0 07            [24] 1337 	push	ar7
      000534 E5*00            [12] 1338 	mov	a,_bp
      000536 24 05            [12] 1339 	add	a,#0x05
      000538 F8               [12] 1340 	mov	r0,a
      000539 E6               [12] 1341 	mov	a,@r0
      00053A C0 E0            [24] 1342 	push	acc
      00053C 08               [12] 1343 	inc	r0
      00053D E6               [12] 1344 	mov	a,@r0
      00053E C0 E0            [24] 1345 	push	acc
      000540 08               [12] 1346 	inc	r0
      000541 E6               [12] 1347 	mov	a,@r0
      000542 C0 E0            [24] 1348 	push	acc
      000544 8A 82            [24] 1349 	mov	dpl,r2
      000546 8B 83            [24] 1350 	mov	dph,r3
      000548 8E F0            [24] 1351 	mov	b,r6
      00054A 12r00r00         [24] 1352 	lcall	_stack_pop
      00054D AD 82            [24] 1353 	mov	r5,dpl
      00054F AE 83            [24] 1354 	mov	r6,dph
      000551 15 81            [12] 1355 	dec	sp
      000553 15 81            [12] 1356 	dec	sp
      000555 15 81            [12] 1357 	dec	sp
      000557 D0 07            [24] 1358 	pop	ar7
      000559                       1359 00160$:
      000559 C3               [12] 1360 	clr	c
      00055A E4               [12] 1361 	clr	a
      00055B 9D               [12] 1362 	subb	a,r5
      00055C 74 80            [12] 1363 	mov	a,#(0x00 ^ 0x80)
      00055E 8E F0            [24] 1364 	mov	b,r6
      000560 63 F0 80         [24] 1365 	xrl	b,#0x80
      000563 95 F0            [12] 1366 	subb	a,b
      000565 40 03            [24] 1367 	jc	00334$
      000567 02r07r41         [24] 1368 	ljmp	00113$
      00056A                       1369 00334$:
                                   1370 ;	calc.c:116: printstr("SSPA\t");
      00056A 7Dr32            [12] 1371 	mov	r5,#___str_6
      00056C 7Bs00            [12] 1372 	mov	r3,#(___str_6 >> 8)
      00056E 7A 80            [12] 1373 	mov	r2,#0x80
                                   1374 ;	calc.c:59: return;
      000570                       1375 00152$:
                                   1376 ;	calc.c:57: for (; *s; s++) putchar(*s);
      000570 8D 82            [24] 1377 	mov	dpl,r5
      000572 8B 83            [24] 1378 	mov	dph,r3
      000574 8A F0            [24] 1379 	mov	b,r2
      000576 12r00r00         [24] 1380 	lcall	__gptrget
      000579 FE               [12] 1381 	mov	r6,a
      00057A 60 16            [24] 1382 	jz	00128$
      00057C C0 07            [24] 1383 	push	ar7
      00057E 8E 04            [24] 1384 	mov	ar4,r6
      000580 7F 00            [12] 1385 	mov	r7,#0x00
      000582 8C 82            [24] 1386 	mov	dpl,r4
      000584 8F 83            [24] 1387 	mov	dph,r7
      000586 12r00r00         [24] 1388 	lcall	_putchar
      000589 0D               [12] 1389 	inc	r5
      00058A BD 00 01         [24] 1390 	cjne	r5,#0x00,00336$
      00058D 0B               [12] 1391 	inc	r3
      00058E                       1392 00336$:
      00058E D0 07            [24] 1393 	pop	ar7
                                   1394 ;	calc.c:116: printstr("SSPA\t");
      000590 80 DE            [24] 1395 	sjmp	00152$
      000592                       1396 00128$:
                                   1397 ;	calc.c:117: printall(d);
      000592 C0 07            [24] 1398 	push	ar7
      000594 E5*00            [12] 1399 	mov	a,_bp
      000596 24 0E            [12] 1400 	add	a,#0x0e
      000598 F8               [12] 1401 	mov	r0,a
      000599 E5*00            [12] 1402 	mov	a,_bp
      00059B 24 12            [12] 1403 	add	a,#0x12
      00059D F9               [12] 1404 	mov	r1,a
      00059E E6               [12] 1405 	mov	a,@r0
      00059F F7               [12] 1406 	mov	@r1,a
      0005A0 08               [12] 1407 	inc	r0
      0005A1 09               [12] 1408 	inc	r1
      0005A2 E6               [12] 1409 	mov	a,@r0
      0005A3 F7               [12] 1410 	mov	@r1,a
      0005A4 08               [12] 1411 	inc	r0
      0005A5 09               [12] 1412 	inc	r1
      0005A6 E6               [12] 1413 	mov	a,@r0
      0005A7 F7               [12] 1414 	mov	@r1,a
      0005A8 08               [12] 1415 	inc	r0
      0005A9 09               [12] 1416 	inc	r1
      0005AA E6               [12] 1417 	mov	a,@r0
      0005AB F7               [12] 1418 	mov	@r1,a
      0005AC E5*00            [12] 1419 	mov	a,_bp
      0005AE 24 12            [12] 1420 	add	a,#0x12
      0005B0 F8               [12] 1421 	mov	r0,a
      0005B1 86 02            [24] 1422 	mov	ar2,@r0
      0005B3 08               [12] 1423 	inc	r0
      0005B4 86 03            [24] 1424 	mov	ar3,@r0
      0005B6 08               [12] 1425 	inc	r0
      0005B7 86 04            [24] 1426 	mov	ar4,@r0
      0005B9 08               [12] 1427 	inc	r0
      0005BA 86 07            [24] 1428 	mov	ar7,@r0
                                   1429 ;	calc.c:72: printf("%08lx\t", d);
      0005BC C0 07            [24] 1430 	push	ar7
      0005BE C0 04            [24] 1431 	push	ar4
      0005C0 C0 03            [24] 1432 	push	ar3
      0005C2 C0 02            [24] 1433 	push	ar2
      0005C4 E5*00            [12] 1434 	mov	a,_bp
      0005C6 24 12            [12] 1435 	add	a,#0x12
      0005C8 F8               [12] 1436 	mov	r0,a
      0005C9 E6               [12] 1437 	mov	a,@r0
      0005CA C0 E0            [24] 1438 	push	acc
      0005CC 08               [12] 1439 	inc	r0
      0005CD E6               [12] 1440 	mov	a,@r0
      0005CE C0 E0            [24] 1441 	push	acc
      0005D0 08               [12] 1442 	inc	r0
      0005D1 E6               [12] 1443 	mov	a,@r0
      0005D2 C0 E0            [24] 1444 	push	acc
      0005D4 08               [12] 1445 	inc	r0
      0005D5 E6               [12] 1446 	mov	a,@r0
      0005D6 C0 E0            [24] 1447 	push	acc
      0005D8 74r00            [12] 1448 	mov	a,#___str_0
      0005DA C0 E0            [24] 1449 	push	acc
      0005DC 74s00            [12] 1450 	mov	a,#(___str_0 >> 8)
      0005DE C0 E0            [24] 1451 	push	acc
      0005E0 74 80            [12] 1452 	mov	a,#0x80
      0005E2 C0 E0            [24] 1453 	push	acc
      0005E4 12r00r00         [24] 1454 	lcall	_printf
      0005E7 E5 81            [12] 1455 	mov	a,sp
      0005E9 24 F9            [12] 1456 	add	a,#0xf9
      0005EB F5 81            [12] 1457 	mov	sp,a
      0005ED D0 02            [24] 1458 	pop	ar2
      0005EF D0 03            [24] 1459 	pop	ar3
      0005F1 D0 04            [24] 1460 	pop	ar4
      0005F3 D0 07            [24] 1461 	pop	ar7
                                   1462 ;	calc.c:73: printf("% 11ld\t", d);
      0005F5 C0 07            [24] 1463 	push	ar7
      0005F7 C0 04            [24] 1464 	push	ar4
      0005F9 C0 03            [24] 1465 	push	ar3
      0005FB C0 02            [24] 1466 	push	ar2
      0005FD C0 02            [24] 1467 	push	ar2
      0005FF C0 03            [24] 1468 	push	ar3
      000601 C0 04            [24] 1469 	push	ar4
      000603 C0 07            [24] 1470 	push	ar7
      000605 74r07            [12] 1471 	mov	a,#___str_1
      000607 C0 E0            [24] 1472 	push	acc
      000609 74s00            [12] 1473 	mov	a,#(___str_1 >> 8)
      00060B C0 E0            [24] 1474 	push	acc
      00060D 74 80            [12] 1475 	mov	a,#0x80
      00060F C0 E0            [24] 1476 	push	acc
      000611 12r00r00         [24] 1477 	lcall	_printf
      000614 E5 81            [12] 1478 	mov	a,sp
      000616 24 F9            [12] 1479 	add	a,#0xf9
      000618 F5 81            [12] 1480 	mov	sp,a
      00061A D0 02            [24] 1481 	pop	ar2
      00061C D0 03            [24] 1482 	pop	ar3
      00061E D0 04            [24] 1483 	pop	ar4
      000620 D0 07            [24] 1484 	pop	ar7
                                   1485 ;	calc.c:74: printf("%011lo\t", d);
      000622 C0 07            [24] 1486 	push	ar7
      000624 C0 04            [24] 1487 	push	ar4
      000626 C0 03            [24] 1488 	push	ar3
      000628 C0 02            [24] 1489 	push	ar2
      00062A C0 02            [24] 1490 	push	ar2
      00062C C0 03            [24] 1491 	push	ar3
      00062E C0 04            [24] 1492 	push	ar4
      000630 C0 07            [24] 1493 	push	ar7
      000632 74r0F            [12] 1494 	mov	a,#___str_2
      000634 C0 E0            [24] 1495 	push	acc
      000636 74s00            [12] 1496 	mov	a,#(___str_2 >> 8)
      000638 C0 E0            [24] 1497 	push	acc
      00063A 74 80            [12] 1498 	mov	a,#0x80
      00063C C0 E0            [24] 1499 	push	acc
      00063E 12r00r00         [24] 1500 	lcall	_printf
      000641 E5 81            [12] 1501 	mov	a,sp
      000643 24 F9            [12] 1502 	add	a,#0xf9
      000645 F5 81            [12] 1503 	mov	sp,a
      000647 D0 02            [24] 1504 	pop	ar2
      000649 D0 03            [24] 1505 	pop	ar3
      00064B D0 04            [24] 1506 	pop	ar4
      00064D D0 07            [24] 1507 	pop	ar7
                                   1508 ;	calc.c:75: printbin(d);
      00064F E5*00            [12] 1509 	mov	a,_bp
      000651 24 16            [12] 1510 	add	a,#0x16
      000653 F8               [12] 1511 	mov	r0,a
      000654 A6 02            [24] 1512 	mov	@r0,ar2
      000656 08               [12] 1513 	inc	r0
      000657 A6 03            [24] 1514 	mov	@r0,ar3
      000659 08               [12] 1515 	inc	r0
      00065A A6 04            [24] 1516 	mov	@r0,ar4
      00065C 08               [12] 1517 	inc	r0
      00065D A6 07            [24] 1518 	mov	@r0,ar7
                                   1519 ;	calc.c:65: for (mask = 0x80000000lu; mask; mask >>= 1)
      00065F E5*00            [12] 1520 	mov	a,_bp
      000661 24 1A            [12] 1521 	add	a,#0x1a
      000663 F8               [12] 1522 	mov	r0,a
      000664 E4               [12] 1523 	clr	a
      000665 F6               [12] 1524 	mov	@r0,a
      000666 08               [12] 1525 	inc	r0
      000667 F6               [12] 1526 	mov	@r0,a
      000668 08               [12] 1527 	inc	r0
      000669 F6               [12] 1528 	mov	@r0,a
      00066A 08               [12] 1529 	inc	r0
      00066B 76 80            [12] 1530 	mov	@r0,#0x80
                                   1531 ;	calc.c:122: return 1;
      00066D D0 07            [24] 1532 	pop	ar7
                                   1533 ;	calc.c:65: for (mask = 0x80000000lu; mask; mask >>= 1)
      00066F                       1534 00154$:
                                   1535 ;	calc.c:66: (void)putchar((d & mask) ? (int)'1' : (int)'0');
      00066F C0 07            [24] 1536 	push	ar7
      000671 E5*00            [12] 1537 	mov	a,_bp
      000673 24 16            [12] 1538 	add	a,#0x16
      000675 F8               [12] 1539 	mov	r0,a
      000676 86 02            [24] 1540 	mov	ar2,@r0
      000678 08               [12] 1541 	inc	r0
      000679 86 03            [24] 1542 	mov	ar3,@r0
      00067B 08               [12] 1543 	inc	r0
      00067C 86 04            [24] 1544 	mov	ar4,@r0
      00067E 08               [12] 1545 	inc	r0
      00067F 86 07            [24] 1546 	mov	ar7,@r0
      000681 E5*00            [12] 1547 	mov	a,_bp
      000683 24 1A            [12] 1548 	add	a,#0x1a
      000685 F8               [12] 1549 	mov	r0,a
      000686 E6               [12] 1550 	mov	a,@r0
      000687 52 02            [12] 1551 	anl	ar2,a
      000689 08               [12] 1552 	inc	r0
      00068A E6               [12] 1553 	mov	a,@r0
      00068B 52 03            [12] 1554 	anl	ar3,a
      00068D 08               [12] 1555 	inc	r0
      00068E E6               [12] 1556 	mov	a,@r0
      00068F 52 04            [12] 1557 	anl	ar4,a
      000691 08               [12] 1558 	inc	r0
      000692 E6               [12] 1559 	mov	a,@r0
      000693 52 07            [12] 1560 	anl	ar7,a
      000695 EA               [12] 1561 	mov	a,r2
      000696 4B               [12] 1562 	orl	a,r3
      000697 4C               [12] 1563 	orl	a,r4
      000698 4F               [12] 1564 	orl	a,r7
      000699 D0 07            [24] 1565 	pop	ar7
      00069B 60 06            [24] 1566 	jz	00166$
      00069D 7B 31            [12] 1567 	mov	r3,#0x31
      00069F 7C 00            [12] 1568 	mov	r4,#0x00
      0006A1 80 04            [24] 1569 	sjmp	00167$
      0006A3                       1570 00166$:
      0006A3 7B 30            [12] 1571 	mov	r3,#0x30
      0006A5 7C 00            [12] 1572 	mov	r4,#0x00
      0006A7                       1573 00167$:
      0006A7 8B 82            [24] 1574 	mov	dpl,r3
      0006A9 8C 83            [24] 1575 	mov	dph,r4
      0006AB 12r00r00         [24] 1576 	lcall	_putchar
                                   1577 ;	calc.c:65: for (mask = 0x80000000lu; mask; mask >>= 1)
      0006AE E5*00            [12] 1578 	mov	a,_bp
      0006B0 24 1A            [12] 1579 	add	a,#0x1a
      0006B2 F8               [12] 1580 	mov	r0,a
      0006B3 08               [12] 1581 	inc	r0
      0006B4 08               [12] 1582 	inc	r0
      0006B5 08               [12] 1583 	inc	r0
      0006B6 E6               [12] 1584 	mov	a,@r0
      0006B7 C3               [12] 1585 	clr	c
      0006B8 13               [12] 1586 	rrc	a
      0006B9 F6               [12] 1587 	mov	@r0,a
      0006BA 18               [12] 1588 	dec	r0
      0006BB E6               [12] 1589 	mov	a,@r0
      0006BC 13               [12] 1590 	rrc	a
      0006BD F6               [12] 1591 	mov	@r0,a
      0006BE 18               [12] 1592 	dec	r0
      0006BF E6               [12] 1593 	mov	a,@r0
      0006C0 13               [12] 1594 	rrc	a
      0006C1 F6               [12] 1595 	mov	@r0,a
      0006C2 18               [12] 1596 	dec	r0
      0006C3 E6               [12] 1597 	mov	a,@r0
      0006C4 13               [12] 1598 	rrc	a
      0006C5 F6               [12] 1599 	mov	@r0,a
      0006C6 E5*00            [12] 1600 	mov	a,_bp
      0006C8 24 1A            [12] 1601 	add	a,#0x1a
      0006CA F8               [12] 1602 	mov	r0,a
      0006CB E6               [12] 1603 	mov	a,@r0
      0006CC 08               [12] 1604 	inc	r0
      0006CD 46               [12] 1605 	orl	a,@r0
      0006CE 08               [12] 1606 	inc	r0
      0006CF 46               [12] 1607 	orl	a,@r0
      0006D0 08               [12] 1608 	inc	r0
      0006D1 46               [12] 1609 	orl	a,@r0
      0006D2 70 9B            [24] 1610 	jnz	00154$
                                   1611 ;	calc.c:118: printstr("\r\n");
      0006D4 7Dr17            [12] 1612 	mov	r5,#___str_3
      0006D6 7Bs00            [12] 1613 	mov	r3,#(___str_3 >> 8)
      0006D8 7A 80            [12] 1614 	mov	r2,#0x80
                                   1615 ;	calc.c:59: return;
      0006DA                       1616 00157$:
                                   1617 ;	calc.c:57: for (; *s; s++) putchar(*s);
      0006DA 8D 82            [24] 1618 	mov	dpl,r5
      0006DC 8B 83            [24] 1619 	mov	dph,r3
      0006DE 8A F0            [24] 1620 	mov	b,r2
      0006E0 12r00r00         [24] 1621 	lcall	__gptrget
      0006E3 FE               [12] 1622 	mov	r6,a
      0006E4 60 16            [24] 1623 	jz	00133$
      0006E6 C0 07            [24] 1624 	push	ar7
      0006E8 8E 04            [24] 1625 	mov	ar4,r6
      0006EA 7F 00            [12] 1626 	mov	r7,#0x00
      0006EC 8C 82            [24] 1627 	mov	dpl,r4
      0006EE 8F 83            [24] 1628 	mov	dph,r7
      0006F0 12r00r00         [24] 1629 	lcall	_putchar
      0006F3 0D               [12] 1630 	inc	r5
      0006F4 BD 00 01         [24] 1631 	cjne	r5,#0x00,00340$
      0006F7 0B               [12] 1632 	inc	r3
      0006F8                       1633 00340$:
      0006F8 D0 07            [24] 1634 	pop	ar7
                                   1635 ;	calc.c:118: printstr("\r\n");
      0006FA 80 DE            [24] 1636 	sjmp	00157$
      0006FC                       1637 00133$:
                                   1638 ;	calc.c:115: for (r = stack_pop(ctx->ss, &d); r > 0; r = stack_pop(ctx->ss, &d)) {
      0006FC 8F 06            [24] 1639 	mov	ar6,r7
      0006FE 7D 00            [12] 1640 	mov	r5,#0x00
      000700 7A 40            [12] 1641 	mov	r2,#0x40
      000702 C0 07            [24] 1642 	push	ar7
      000704 E5*00            [12] 1643 	mov	a,_bp
      000706 24 08            [12] 1644 	add	a,#0x08
      000708 F8               [12] 1645 	mov	r0,a
      000709 86 82            [24] 1646 	mov	dpl,@r0
      00070B 08               [12] 1647 	inc	r0
      00070C 86 83            [24] 1648 	mov	dph,@r0
      00070E 08               [12] 1649 	inc	r0
      00070F 86 F0            [24] 1650 	mov	b,@r0
      000711 12r00r00         [24] 1651 	lcall	__gptrget
      000714 FB               [12] 1652 	mov	r3,a
      000715 A3               [24] 1653 	inc	dptr
      000716 12r00r00         [24] 1654 	lcall	__gptrget
      000719 FC               [12] 1655 	mov	r4,a
      00071A A3               [24] 1656 	inc	dptr
      00071B 12r00r00         [24] 1657 	lcall	__gptrget
      00071E FF               [12] 1658 	mov	r7,a
      00071F C0 06            [24] 1659 	push	ar6
      000721 C0 05            [24] 1660 	push	ar5
      000723 C0 02            [24] 1661 	push	ar2
      000725 8B 82            [24] 1662 	mov	dpl,r3
      000727 8C 83            [24] 1663 	mov	dph,r4
      000729 8F F0            [24] 1664 	mov	b,r7
      00072B 12r00r00         [24] 1665 	lcall	_stack_pop
      00072E AC 82            [24] 1666 	mov	r4,dpl
      000730 AF 83            [24] 1667 	mov	r7,dph
      000732 15 81            [12] 1668 	dec	sp
      000734 15 81            [12] 1669 	dec	sp
      000736 15 81            [12] 1670 	dec	sp
      000738 8C 05            [24] 1671 	mov	ar5,r4
      00073A 8F 06            [24] 1672 	mov	ar6,r7
      00073C D0 07            [24] 1673 	pop	ar7
      00073E 02r05r59         [24] 1674 	ljmp	00160$
      000741                       1675 00113$:
                                   1676 ;	calc.c:122: return 1;
      000741 90 00 01         [24] 1677 	mov	dptr,#0x0001
                                   1678 ;	calc.c:123: }
      000744 85*00 81         [24] 1679 	mov	sp,_bp
      000747 D0*00            [24] 1680 	pop	_bp
      000749 22               [24] 1681 	ret
                                   1682 ;------------------------------------------------------------
                                   1683 ;Allocation info for local variables in function 'dump_peek'
                                   1684 ;------------------------------------------------------------
                                   1685 ;d                         Allocated to stack - _bp -6
                                   1686 ;_ctx                      Allocated to registers 
                                   1687 ;__1310720021              Allocated to registers 
                                   1688 ;s                         Allocated to registers r5 r6 r7 
                                   1689 ;__1310720023              Allocated to registers r4 r5 r6 r7 
                                   1690 ;d                         Allocated to registers 
                                   1691 ;__1310720001              Allocated to registers 
                                   1692 ;d                         Allocated to stack - _bp +1
                                   1693 ;mask                      Allocated to stack - _bp +5
                                   1694 ;__1310720025              Allocated to registers 
                                   1695 ;s                         Allocated to registers r5 r6 r7 
                                   1696 ;------------------------------------------------------------
                                   1697 ;	calc.c:125: static int dump_peek(void *_ctx, long d) __reentrant {
                                   1698 ;	-----------------------------------------
                                   1699 ;	 function dump_peek
                                   1700 ;	-----------------------------------------
      00074A                       1701 _dump_peek:
      00074A C0*00            [24] 1702 	push	_bp
      00074C E5 81            [12] 1703 	mov	a,sp
      00074E F5*00            [12] 1704 	mov	_bp,a
      000750 24 08            [12] 1705 	add	a,#0x08
      000752 F5 81            [12] 1706 	mov	sp,a
                                   1707 ;	calc.c:128: printstr("PSVA\t");
      000754 7Dr38            [12] 1708 	mov	r5,#___str_7
      000756 7Es00            [12] 1709 	mov	r6,#(___str_7 >> 8)
      000758 7F 80            [12] 1710 	mov	r7,#0x80
                                   1711 ;	calc.c:59: return;
      00075A                       1712 00109$:
                                   1713 ;	calc.c:57: for (; *s; s++) putchar(*s);
      00075A 8D 82            [24] 1714 	mov	dpl,r5
      00075C 8E 83            [24] 1715 	mov	dph,r6
      00075E 8F F0            [24] 1716 	mov	b,r7
      000760 12r00r00         [24] 1717 	lcall	__gptrget
      000763 FC               [12] 1718 	mov	r4,a
      000764 60 10            [24] 1719 	jz	00102$
      000766 7B 00            [12] 1720 	mov	r3,#0x00
      000768 8C 82            [24] 1721 	mov	dpl,r4
      00076A 8B 83            [24] 1722 	mov	dph,r3
      00076C 12r00r00         [24] 1723 	lcall	_putchar
      00076F 0D               [12] 1724 	inc	r5
                                   1725 ;	calc.c:128: printstr("PSVA\t");
      000770 BD 00 E7         [24] 1726 	cjne	r5,#0x00,00109$
      000773 0E               [12] 1727 	inc	r6
      000774 80 E4            [24] 1728 	sjmp	00109$
      000776                       1729 00102$:
                                   1730 ;	calc.c:129: printall(d);
      000776 E5*00            [12] 1731 	mov	a,_bp
      000778 24 FA            [12] 1732 	add	a,#0xfa
      00077A F8               [12] 1733 	mov	r0,a
      00077B 86 04            [24] 1734 	mov	ar4,@r0
      00077D 08               [12] 1735 	inc	r0
      00077E 86 05            [24] 1736 	mov	ar5,@r0
      000780 08               [12] 1737 	inc	r0
      000781 86 06            [24] 1738 	mov	ar6,@r0
      000783 08               [12] 1739 	inc	r0
      000784 86 07            [24] 1740 	mov	ar7,@r0
                                   1741 ;	calc.c:72: printf("%08lx\t", d);
      000786 C0 07            [24] 1742 	push	ar7
      000788 C0 06            [24] 1743 	push	ar6
      00078A C0 05            [24] 1744 	push	ar5
      00078C C0 04            [24] 1745 	push	ar4
      00078E C0 04            [24] 1746 	push	ar4
      000790 C0 05            [24] 1747 	push	ar5
      000792 C0 06            [24] 1748 	push	ar6
      000794 C0 07            [24] 1749 	push	ar7
      000796 74r00            [12] 1750 	mov	a,#___str_0
      000798 C0 E0            [24] 1751 	push	acc
      00079A 74s00            [12] 1752 	mov	a,#(___str_0 >> 8)
      00079C C0 E0            [24] 1753 	push	acc
      00079E 74 80            [12] 1754 	mov	a,#0x80
      0007A0 C0 E0            [24] 1755 	push	acc
      0007A2 12r00r00         [24] 1756 	lcall	_printf
      0007A5 E5 81            [12] 1757 	mov	a,sp
      0007A7 24 F9            [12] 1758 	add	a,#0xf9
      0007A9 F5 81            [12] 1759 	mov	sp,a
      0007AB D0 04            [24] 1760 	pop	ar4
      0007AD D0 05            [24] 1761 	pop	ar5
      0007AF D0 06            [24] 1762 	pop	ar6
      0007B1 D0 07            [24] 1763 	pop	ar7
                                   1764 ;	calc.c:73: printf("% 11ld\t", d);
      0007B3 C0 07            [24] 1765 	push	ar7
      0007B5 C0 06            [24] 1766 	push	ar6
      0007B7 C0 05            [24] 1767 	push	ar5
      0007B9 C0 04            [24] 1768 	push	ar4
      0007BB C0 04            [24] 1769 	push	ar4
      0007BD C0 05            [24] 1770 	push	ar5
      0007BF C0 06            [24] 1771 	push	ar6
      0007C1 C0 07            [24] 1772 	push	ar7
      0007C3 74r07            [12] 1773 	mov	a,#___str_1
      0007C5 C0 E0            [24] 1774 	push	acc
      0007C7 74s00            [12] 1775 	mov	a,#(___str_1 >> 8)
      0007C9 C0 E0            [24] 1776 	push	acc
      0007CB 74 80            [12] 1777 	mov	a,#0x80
      0007CD C0 E0            [24] 1778 	push	acc
      0007CF 12r00r00         [24] 1779 	lcall	_printf
      0007D2 E5 81            [12] 1780 	mov	a,sp
      0007D4 24 F9            [12] 1781 	add	a,#0xf9
      0007D6 F5 81            [12] 1782 	mov	sp,a
      0007D8 D0 04            [24] 1783 	pop	ar4
      0007DA D0 05            [24] 1784 	pop	ar5
      0007DC D0 06            [24] 1785 	pop	ar6
      0007DE D0 07            [24] 1786 	pop	ar7
                                   1787 ;	calc.c:74: printf("%011lo\t", d);
      0007E0 C0 07            [24] 1788 	push	ar7
      0007E2 C0 06            [24] 1789 	push	ar6
      0007E4 C0 05            [24] 1790 	push	ar5
      0007E6 C0 04            [24] 1791 	push	ar4
      0007E8 C0 04            [24] 1792 	push	ar4
      0007EA C0 05            [24] 1793 	push	ar5
      0007EC C0 06            [24] 1794 	push	ar6
      0007EE C0 07            [24] 1795 	push	ar7
      0007F0 74r0F            [12] 1796 	mov	a,#___str_2
      0007F2 C0 E0            [24] 1797 	push	acc
      0007F4 74s00            [12] 1798 	mov	a,#(___str_2 >> 8)
      0007F6 C0 E0            [24] 1799 	push	acc
      0007F8 74 80            [12] 1800 	mov	a,#0x80
      0007FA C0 E0            [24] 1801 	push	acc
      0007FC 12r00r00         [24] 1802 	lcall	_printf
      0007FF E5 81            [12] 1803 	mov	a,sp
      000801 24 F9            [12] 1804 	add	a,#0xf9
      000803 F5 81            [12] 1805 	mov	sp,a
      000805 D0 04            [24] 1806 	pop	ar4
      000807 D0 05            [24] 1807 	pop	ar5
      000809 D0 06            [24] 1808 	pop	ar6
      00080B D0 07            [24] 1809 	pop	ar7
                                   1810 ;	calc.c:75: printbin(d);
      00080D A8*00            [24] 1811 	mov	r0,_bp
      00080F 08               [12] 1812 	inc	r0
      000810 A6 04            [24] 1813 	mov	@r0,ar4
      000812 08               [12] 1814 	inc	r0
      000813 A6 05            [24] 1815 	mov	@r0,ar5
      000815 08               [12] 1816 	inc	r0
      000816 A6 06            [24] 1817 	mov	@r0,ar6
      000818 08               [12] 1818 	inc	r0
      000819 A6 07            [24] 1819 	mov	@r0,ar7
                                   1820 ;	calc.c:65: for (mask = 0x80000000lu; mask; mask >>= 1)
      00081B E5*00            [12] 1821 	mov	a,_bp
      00081D 24 05            [12] 1822 	add	a,#0x05
      00081F F8               [12] 1823 	mov	r0,a
      000820 E4               [12] 1824 	clr	a
      000821 F6               [12] 1825 	mov	@r0,a
      000822 08               [12] 1826 	inc	r0
      000823 F6               [12] 1827 	mov	@r0,a
      000824 08               [12] 1828 	inc	r0
      000825 F6               [12] 1829 	mov	@r0,a
      000826 08               [12] 1830 	inc	r0
      000827 76 80            [12] 1831 	mov	@r0,#0x80
      000829                       1832 00111$:
                                   1833 ;	calc.c:66: (void)putchar((d & mask) ? (int)'1' : (int)'0');
      000829 A8*00            [24] 1834 	mov	r0,_bp
      00082B 08               [12] 1835 	inc	r0
      00082C 86 04            [24] 1836 	mov	ar4,@r0
      00082E 08               [12] 1837 	inc	r0
      00082F 86 05            [24] 1838 	mov	ar5,@r0
      000831 08               [12] 1839 	inc	r0
      000832 86 06            [24] 1840 	mov	ar6,@r0
      000834 08               [12] 1841 	inc	r0
      000835 86 07            [24] 1842 	mov	ar7,@r0
      000837 E5*00            [12] 1843 	mov	a,_bp
      000839 24 05            [12] 1844 	add	a,#0x05
      00083B F8               [12] 1845 	mov	r0,a
      00083C E6               [12] 1846 	mov	a,@r0
      00083D 52 04            [12] 1847 	anl	ar4,a
      00083F 08               [12] 1848 	inc	r0
      000840 E6               [12] 1849 	mov	a,@r0
      000841 52 05            [12] 1850 	anl	ar5,a
      000843 08               [12] 1851 	inc	r0
      000844 E6               [12] 1852 	mov	a,@r0
      000845 52 06            [12] 1853 	anl	ar6,a
      000847 08               [12] 1854 	inc	r0
      000848 E6               [12] 1855 	mov	a,@r0
      000849 52 07            [12] 1856 	anl	ar7,a
      00084B EC               [12] 1857 	mov	a,r4
      00084C 4D               [12] 1858 	orl	a,r5
      00084D 4E               [12] 1859 	orl	a,r6
      00084E 4F               [12] 1860 	orl	a,r7
      00084F 60 06            [24] 1861 	jz	00118$
      000851 7E 31            [12] 1862 	mov	r6,#0x31
      000853 7F 00            [12] 1863 	mov	r7,#0x00
      000855 80 04            [24] 1864 	sjmp	00119$
      000857                       1865 00118$:
      000857 7E 30            [12] 1866 	mov	r6,#0x30
      000859 7F 00            [12] 1867 	mov	r7,#0x00
      00085B                       1868 00119$:
      00085B 8E 82            [24] 1869 	mov	dpl,r6
      00085D 8F 83            [24] 1870 	mov	dph,r7
      00085F 12r00r00         [24] 1871 	lcall	_putchar
                                   1872 ;	calc.c:65: for (mask = 0x80000000lu; mask; mask >>= 1)
      000862 E5*00            [12] 1873 	mov	a,_bp
      000864 24 05            [12] 1874 	add	a,#0x05
      000866 F8               [12] 1875 	mov	r0,a
      000867 08               [12] 1876 	inc	r0
      000868 08               [12] 1877 	inc	r0
      000869 08               [12] 1878 	inc	r0
      00086A E6               [12] 1879 	mov	a,@r0
      00086B C3               [12] 1880 	clr	c
      00086C 13               [12] 1881 	rrc	a
      00086D F6               [12] 1882 	mov	@r0,a
      00086E 18               [12] 1883 	dec	r0
      00086F E6               [12] 1884 	mov	a,@r0
      000870 13               [12] 1885 	rrc	a
      000871 F6               [12] 1886 	mov	@r0,a
      000872 18               [12] 1887 	dec	r0
      000873 E6               [12] 1888 	mov	a,@r0
      000874 13               [12] 1889 	rrc	a
      000875 F6               [12] 1890 	mov	@r0,a
      000876 18               [12] 1891 	dec	r0
      000877 E6               [12] 1892 	mov	a,@r0
      000878 13               [12] 1893 	rrc	a
      000879 F6               [12] 1894 	mov	@r0,a
      00087A E5*00            [12] 1895 	mov	a,_bp
      00087C 24 05            [12] 1896 	add	a,#0x05
      00087E F8               [12] 1897 	mov	r0,a
      00087F E6               [12] 1898 	mov	a,@r0
      000880 08               [12] 1899 	inc	r0
      000881 46               [12] 1900 	orl	a,@r0
      000882 08               [12] 1901 	inc	r0
      000883 46               [12] 1902 	orl	a,@r0
      000884 08               [12] 1903 	inc	r0
      000885 46               [12] 1904 	orl	a,@r0
      000886 70 A1            [24] 1905 	jnz	00111$
                                   1906 ;	calc.c:130: printstr("\r\n");
      000888 7Dr17            [12] 1907 	mov	r5,#___str_3
      00088A 7Es00            [12] 1908 	mov	r6,#(___str_3 >> 8)
      00088C 7F 80            [12] 1909 	mov	r7,#0x80
                                   1910 ;	calc.c:59: return;
      00088E                       1911 00114$:
                                   1912 ;	calc.c:57: for (; *s; s++) putchar(*s);
      00088E 8D 82            [24] 1913 	mov	dpl,r5
      000890 8E 83            [24] 1914 	mov	dph,r6
      000892 8F F0            [24] 1915 	mov	b,r7
      000894 12r00r00         [24] 1916 	lcall	__gptrget
      000897 FC               [12] 1917 	mov	r4,a
      000898 60 10            [24] 1918 	jz	00107$
      00089A 7B 00            [12] 1919 	mov	r3,#0x00
      00089C 8C 82            [24] 1920 	mov	dpl,r4
      00089E 8B 83            [24] 1921 	mov	dph,r3
      0008A0 12r00r00         [24] 1922 	lcall	_putchar
      0008A3 0D               [12] 1923 	inc	r5
                                   1924 ;	calc.c:130: printstr("\r\n");
      0008A4 BD 00 E7         [24] 1925 	cjne	r5,#0x00,00114$
      0008A7 0E               [12] 1926 	inc	r6
      0008A8 80 E4            [24] 1927 	sjmp	00114$
      0008AA                       1928 00107$:
                                   1929 ;	calc.c:132: return 1;
      0008AA 90 00 01         [24] 1930 	mov	dptr,#0x0001
                                   1931 ;	calc.c:133: }
      0008AD 85*00 81         [24] 1932 	mov	sp,_bp
      0008B0 D0*00            [24] 1933 	pop	_bp
      0008B2 22               [24] 1934 	ret
                                   1935 ;------------------------------------------------------------
                                   1936 ;Allocation info for local variables in function 'operator'
                                   1937 ;------------------------------------------------------------
                                   1938 ;delta                     Allocated to stack - _bp -5
                                   1939 ;_ctx                      Allocated to stack - _bp +1
                                   1940 ;ctx                       Allocated to stack - _bp +18
                                   1941 ;t0                        Allocated to registers r7 r6 r5 
                                   1942 ;d0                        Allocated to stack - _bp +21
                                   1943 ;d1                        Allocated to stack - _bp +25
                                   1944 ;__1966080027              Allocated to registers 
                                   1945 ;s                         Allocated to registers r7 r6 r5 
                                   1946 ;__1966080029              Allocated to registers 
                                   1947 ;s                         Allocated to registers r7 r6 r5 
                                   1948 ;__2621440031              Allocated to registers 
                                   1949 ;s                         Allocated to registers r7 r6 r5 
                                   1950 ;__2621440033              Allocated to registers r7 r6 r5 r4 
                                   1951 ;d                         Allocated to stack - _bp +29
                                   1952 ;__1310720001              Allocated to registers 
                                   1953 ;d                         Allocated to registers r7 r6 r5 r2 
                                   1954 ;mask                      Allocated to stack - _bp +33
                                   1955 ;__2621440035              Allocated to registers 
                                   1956 ;s                         Allocated to registers r7 r6 r5 
                                   1957 ;__1966080037              Allocated to registers 
                                   1958 ;s                         Allocated to registers r7 r6 r5 
                                   1959 ;__1966080039              Allocated to registers 
                                   1960 ;s                         Allocated to registers r7 r6 r5 
                                   1961 ;__1966080041              Allocated to registers 
                                   1962 ;s                         Allocated to registers r7 r6 r5 
                                   1963 ;__1966080043              Allocated to registers 
                                   1964 ;s                         Allocated to registers r7 r6 r5 
                                   1965 ;__2621440045              Allocated to registers 
                                   1966 ;s                         Allocated to registers r7 r6 r5 
                                   1967 ;__2621440047              Allocated to registers r7 r6 r5 r4 
                                   1968 ;d                         Allocated to stack - _bp +29
                                   1969 ;__1310720001              Allocated to registers 
                                   1970 ;d                         Allocated to registers r7 r6 r5 r2 
                                   1971 ;mask                      Allocated to stack - _bp +33
                                   1972 ;__2621440049              Allocated to registers 
                                   1973 ;s                         Allocated to registers r7 r6 r5 
                                   1974 ;__1966080051              Allocated to registers 
                                   1975 ;s                         Allocated to registers r7 r6 r5 
                                   1976 ;__1966080053              Allocated to registers 
                                   1977 ;s                         Allocated to registers r7 r6 r5 
                                   1978 ;__2621440055              Allocated to registers 
                                   1979 ;s                         Allocated to registers r7 r6 r5 
                                   1980 ;__1966080057              Allocated to registers 
                                   1981 ;s                         Allocated to registers r7 r6 r5 
                                   1982 ;__3276800059              Allocated to registers 
                                   1983 ;s                         Allocated to registers r7 r6 r5 
                                   1984 ;__1966080061              Allocated to registers 
                                   1985 ;s                         Allocated to registers r7 r6 r5 
                                   1986 ;__3276800063              Allocated to registers 
                                   1987 ;s                         Allocated to registers r7 r6 r5 
                                   1988 ;__1966080065              Allocated to registers 
                                   1989 ;s                         Allocated to registers r7 r6 r5 
                                   1990 ;__1966080067              Allocated to registers 
                                   1991 ;s                         Allocated to registers r7 r6 r5 
                                   1992 ;__1966080069              Allocated to registers 
                                   1993 ;s                         Allocated to registers r7 r6 r5 
                                   1994 ;__1966080071              Allocated to registers 
                                   1995 ;s                         Allocated to registers r7 r6 r5 
                                   1996 ;__1966080073              Allocated to registers 
                                   1997 ;s                         Allocated to registers r7 r6 r5 
                                   1998 ;__3276800075              Allocated to registers 
                                   1999 ;s                         Allocated to registers r7 r6 r5 
                                   2000 ;__1966080077              Allocated to registers 
                                   2001 ;s                         Allocated to registers r7 r6 r5 
                                   2002 ;__2621440079              Allocated to registers 
                                   2003 ;s                         Allocated to registers r7 r6 r5 
                                   2004 ;__1966080081              Allocated to registers 
                                   2005 ;s                         Allocated to registers r7 r6 r5 
                                   2006 ;__2621440083              Allocated to registers 
                                   2007 ;s                         Allocated to registers r7 r6 r5 
                                   2008 ;__1966080085              Allocated to registers 
                                   2009 ;s                         Allocated to registers r7 r6 r5 
                                   2010 ;__2621440087              Allocated to registers 
                                   2011 ;s                         Allocated to registers r7 r6 r5 
                                   2012 ;__1966080089              Allocated to registers 
                                   2013 ;s                         Allocated to registers r7 r6 r5 
                                   2014 ;__2621440091              Allocated to registers 
                                   2015 ;s                         Allocated to registers r7 r6 r5 
                                   2016 ;__2621440093              Allocated to registers 
                                   2017 ;s                         Allocated to registers r7 r6 r5 
                                   2018 ;__1966080095              Allocated to registers 
                                   2019 ;s                         Allocated to registers r7 r6 r5 
                                   2020 ;__2621440097              Allocated to registers 
                                   2021 ;s                         Allocated to registers r7 r6 r5 
                                   2022 ;__2621440099              Allocated to registers 
                                   2023 ;s                         Allocated to registers r7 r6 r5 
                                   2024 ;__1966080101              Allocated to registers 
                                   2025 ;s                         Allocated to registers r5 r4 r3 
                                   2026 ;__2621440103              Allocated to registers 
                                   2027 ;s                         Allocated to registers r5 r4 r3 
                                   2028 ;__1966080105              Allocated to registers 
                                   2029 ;s                         Allocated to registers r5 r4 r3 
                                   2030 ;__2621440107              Allocated to registers 
                                   2031 ;s                         Allocated to registers r5 r4 r3 
                                   2032 ;__1966080109              Allocated to registers 
                                   2033 ;s                         Allocated to registers r5 r4 r3 
                                   2034 ;__2621440111              Allocated to registers 
                                   2035 ;s                         Allocated to registers r5 r4 r3 
                                   2036 ;__1966080113              Allocated to registers 
                                   2037 ;s                         Allocated to registers r5 r4 r3 
                                   2038 ;__2621440115              Allocated to registers 
                                   2039 ;s                         Allocated to registers r5 r4 r3 
                                   2040 ;__1966080117              Allocated to registers 
                                   2041 ;s                         Allocated to registers r5 r4 r3 
                                   2042 ;__2621440119              Allocated to registers 
                                   2043 ;s                         Allocated to registers r5 r4 r3 
                                   2044 ;__1966080121              Allocated to registers 
                                   2045 ;s                         Allocated to registers r5 r4 r3 
                                   2046 ;__2621440123              Allocated to registers 
                                   2047 ;s                         Allocated to registers r5 r4 r3 
                                   2048 ;__1966080125              Allocated to registers 
                                   2049 ;s                         Allocated to registers r5 r4 r3 
                                   2050 ;sloc0                     Allocated to stack - _bp +346
                                   2051 ;sloc1                     Allocated to stack - _bp +4
                                   2052 ;sloc2                     Allocated to stack - _bp +7
                                   2053 ;sloc3                     Allocated to stack - _bp +11
                                   2054 ;sloc4                     Allocated to stack - _bp +14
                                   2055 ;------------------------------------------------------------
                                   2056 ;	calc.c:135: static int operator(void *_ctx, delta_t *delta) __reentrant {
                                   2057 ;	-----------------------------------------
                                   2058 ;	 function operator
                                   2059 ;	-----------------------------------------
      0008B3                       2060 _operator:
      0008B3 C0*00            [24] 2061 	push	_bp
      0008B5 85 81*00         [24] 2062 	mov	_bp,sp
      0008B8 C0 82            [24] 2063 	push	dpl
      0008BA C0 83            [24] 2064 	push	dph
      0008BC C0 F0            [24] 2065 	push	b
      0008BE E5 81            [12] 2066 	mov	a,sp
      0008C0 24 21            [12] 2067 	add	a,#0x21
      0008C2 F5 81            [12] 2068 	mov	sp,a
                                   2069 ;	calc.c:136: calc_ctx_t *ctx = (calc_ctx_t *)_ctx;
      0008C4 A8*00            [24] 2070 	mov	r0,_bp
      0008C6 08               [12] 2071 	inc	r0
      0008C7 E5*00            [12] 2072 	mov	a,_bp
      0008C9 24 12            [12] 2073 	add	a,#0x12
      0008CB F9               [12] 2074 	mov	r1,a
      0008CC E6               [12] 2075 	mov	a,@r0
      0008CD F7               [12] 2076 	mov	@r1,a
      0008CE 08               [12] 2077 	inc	r0
      0008CF 09               [12] 2078 	inc	r1
      0008D0 E6               [12] 2079 	mov	a,@r0
      0008D1 F7               [12] 2080 	mov	@r1,a
      0008D2 08               [12] 2081 	inc	r0
      0008D3 09               [12] 2082 	inc	r1
      0008D4 E6               [12] 2083 	mov	a,@r0
      0008D5 F7               [12] 2084 	mov	@r1,a
                                   2085 ;	calc.c:140: switch (ctx->digit[0]) {
      0008D6 E5*00            [12] 2086 	mov	a,_bp
      0008D8 24 12            [12] 2087 	add	a,#0x12
      0008DA F8               [12] 2088 	mov	r0,a
      0008DB 74 07            [12] 2089 	mov	a,#0x07
      0008DD 26               [12] 2090 	add	a,@r0
      0008DE FD               [12] 2091 	mov	r5,a
      0008DF E4               [12] 2092 	clr	a
      0008E0 08               [12] 2093 	inc	r0
      0008E1 36               [12] 2094 	addc	a,@r0
      0008E2 FE               [12] 2095 	mov	r6,a
      0008E3 08               [12] 2096 	inc	r0
      0008E4 86 07            [24] 2097 	mov	ar7,@r0
      0008E6 8D 82            [24] 2098 	mov	dpl,r5
      0008E8 8E 83            [24] 2099 	mov	dph,r6
      0008EA 8F F0            [24] 2100 	mov	b,r7
      0008EC 12r00r00         [24] 2101 	lcall	__gptrget
      0008EF FC               [12] 2102 	mov	r4,a
      0008F0 BC 23 03         [24] 2103 	cjne	r4,#0x23,01234$
      0008F3 02r1Er22         [24] 2104 	ljmp	00189$
      0008F6                       2105 01234$:
      0008F6 BC 25 03         [24] 2106 	cjne	r4,#0x25,01235$
      0008F9 02r1Er22         [24] 2107 	ljmp	00189$
      0008FC                       2108 01235$:
      0008FC BC 26 03         [24] 2109 	cjne	r4,#0x26,01236$
      0008FF 02r21r08         [24] 2110 	ljmp	00202$
      000902                       2111 01236$:
      000902 BC 2A 03         [24] 2112 	cjne	r4,#0x2a,01237$
      000905 02r19r92         [24] 2113 	ljmp	00167$
      000908                       2114 01237$:
      000908 BC 2B 03         [24] 2115 	cjne	r4,#0x2b,01238$
      00090B 02r16r93         [24] 2116 	ljmp	00153$
      00090E                       2117 01238$:
      00090E BC 2D 03         [24] 2118 	cjne	r4,#0x2d,01239$
      000911 02r18r12         [24] 2119 	ljmp	00160$
      000914                       2120 01239$:
      000914 BC 2E 03         [24] 2121 	cjne	r4,#0x2e,01240$
      000917 02r0Cr25         [24] 2122 	ljmp	00109$
      00091A                       2123 01240$:
      00091A BC 2F 03         [24] 2124 	cjne	r4,#0x2f,01241$
      00091D 02r1Br38         [24] 2125 	ljmp	00175$
      000920                       2126 01241$:
      000920 BC 3C 03         [24] 2127 	cjne	r4,#0x3c,01242$
      000923 02r29r23         [24] 2128 	ljmp	00237$
      000926                       2129 01242$:
      000926 BC 3E 03         [24] 2130 	cjne	r4,#0x3e,01243$
      000929 02r25rD6         [24] 2131 	ljmp	00223$
      00092C                       2132 01243$:
      00092C BC 4D 03         [24] 2133 	cjne	r4,#0x4d,01244$
      00092F 02r11r39         [24] 2134 	ljmp	00127$
      000932                       2135 01244$:
      000932 BC 50 03         [24] 2136 	cjne	r4,#0x50,01245$
      000935 02r0Er1B         [24] 2137 	ljmp	00113$
      000938                       2138 01245$:
      000938 BC 54 03         [24] 2139 	cjne	r4,#0x54,01246$
      00093B 02r14r3B         [24] 2140 	ljmp	00145$
      00093E                       2141 01246$:
      00093E BC 55 03         [24] 2142 	cjne	r4,#0x55,01247$
      000941 02r13r54         [24] 2143 	ljmp	00139$
      000944                       2144 01247$:
      000944 BC 56 03         [24] 2145 	cjne	r4,#0x56,01248$
      000947 02r0Br84         [24] 2146 	ljmp	00105$
      00094A                       2147 01248$:
      00094A BC 58 03         [24] 2148 	cjne	r4,#0x58,01249$
      00094D 02r15rF4         [24] 2149 	ljmp	00152$
      000950                       2150 01249$:
      000950 BC 5C 03         [24] 2151 	cjne	r4,#0x5c,01250$
      000953 02r1Br38         [24] 2152 	ljmp	00175$
      000956                       2153 01250$:
      000956 BC 5D 03         [24] 2154 	cjne	r4,#0x5d,01251$
      000959 02r27r74         [24] 2155 	ljmp	00230$
      00095C                       2156 01251$:
      00095C BC 5E 03         [24] 2157 	cjne	r4,#0x5e,01252$
      00095F 02r24r3C         [24] 2158 	ljmp	00216$
      000962                       2159 01252$:
      000962 BC 6D 03         [24] 2160 	cjne	r4,#0x6d,01253$
      000965 02r10r05         [24] 2161 	ljmp	00121$
      000968                       2162 01253$:
      000968 BC 70 03         [24] 2163 	cjne	r4,#0x70,01254$
      00096B 02r0Cr25         [24] 2164 	ljmp	00109$
      00096E                       2165 01254$:
      00096E BC 75 03         [24] 2166 	cjne	r4,#0x75,01255$
      000971 02r12r6D         [24] 2167 	ljmp	00133$
      000974                       2168 01255$:
      000974 BC 76 02         [24] 2169 	cjne	r4,#0x76,01256$
      000977 80 15            [24] 2170 	sjmp	00101$
      000979                       2171 01256$:
      000979 BC 78 03         [24] 2172 	cjne	r4,#0x78,01257$
      00097C 02r0Er64         [24] 2173 	ljmp	00114$
      00097F                       2174 01257$:
      00097F BC 7C 03         [24] 2175 	cjne	r4,#0x7c,01258$
      000982 02r22rA2         [24] 2176 	ljmp	00209$
      000985                       2177 01258$:
      000985 BC 7E 03         [24] 2178 	cjne	r4,#0x7e,01259$
      000988 02r2ArC6         [24] 2179 	ljmp	00244$
      00098B                       2180 01259$:
      00098B 02r2Br9F         [24] 2181 	ljmp	00248$
                                   2182 ;	calc.c:141: case 'v':
      00098E                       2183 00101$:
                                   2184 ;	calc.c:142: printstr("\r\n");
      00098E 7Fr17            [12] 2185 	mov	r7,#___str_3
      000990 7Es00            [12] 2186 	mov	r6,#(___str_3 >> 8)
      000992 7D 80            [12] 2187 	mov	r5,#0x80
                                   2188 ;	calc.c:59: return;
      000994                       2189 00353$:
                                   2190 ;	calc.c:57: for (; *s; s++) putchar(*s);
      000994 8F 82            [24] 2191 	mov	dpl,r7
      000996 8E 83            [24] 2192 	mov	dph,r6
      000998 8D F0            [24] 2193 	mov	b,r5
      00099A 12r00r00         [24] 2194 	lcall	__gptrget
      00099D FC               [12] 2195 	mov	r4,a
      00099E 60 10            [24] 2196 	jz	00251$
      0009A0 7B 00            [12] 2197 	mov	r3,#0x00
      0009A2 8C 82            [24] 2198 	mov	dpl,r4
      0009A4 8B 83            [24] 2199 	mov	dph,r3
      0009A6 12r00r00         [24] 2200 	lcall	_putchar
      0009A9 0F               [12] 2201 	inc	r7
                                   2202 ;	calc.c:142: printstr("\r\n");
      0009AA BF 00 E7         [24] 2203 	cjne	r7,#0x00,00353$
      0009AD 0E               [12] 2204 	inc	r6
      0009AE 80 E4            [24] 2205 	sjmp	00353$
      0009B0                       2206 00251$:
                                   2207 ;	calc.c:143: if (!stack_peek(ctx->ps, &d0)) printstr("stack underflow\r\n");
      0009B0 E5*00            [12] 2208 	mov	a,_bp
      0009B2 24 15            [12] 2209 	add	a,#0x15
      0009B4 FF               [12] 2210 	mov	r7,a
      0009B5 7E 00            [12] 2211 	mov	r6,#0x00
      0009B7 7D 40            [12] 2212 	mov	r5,#0x40
      0009B9 E5*00            [12] 2213 	mov	a,_bp
      0009BB 24 12            [12] 2214 	add	a,#0x12
      0009BD F8               [12] 2215 	mov	r0,a
      0009BE 74 11            [12] 2216 	mov	a,#0x11
      0009C0 26               [12] 2217 	add	a,@r0
      0009C1 FA               [12] 2218 	mov	r2,a
      0009C2 ED               [12] 2219 	mov	a,r5
      0009C3 08               [12] 2220 	inc	r0
      0009C4 36               [12] 2221 	addc	a,@r0
      0009C5 FB               [12] 2222 	mov	r3,a
      0009C6 08               [12] 2223 	inc	r0
      0009C7 86 04            [24] 2224 	mov	ar4,@r0
      0009C9 8A 82            [24] 2225 	mov	dpl,r2
      0009CB 8B 83            [24] 2226 	mov	dph,r3
      0009CD 8C F0            [24] 2227 	mov	b,r4
      0009CF 12r00r00         [24] 2228 	lcall	__gptrget
      0009D2 FA               [12] 2229 	mov	r2,a
      0009D3 A3               [24] 2230 	inc	dptr
      0009D4 12r00r00         [24] 2231 	lcall	__gptrget
      0009D7 FB               [12] 2232 	mov	r3,a
      0009D8 A3               [24] 2233 	inc	dptr
      0009D9 12r00r00         [24] 2234 	lcall	__gptrget
      0009DC FC               [12] 2235 	mov	r4,a
      0009DD C0 07            [24] 2236 	push	ar7
      0009DF C0 06            [24] 2237 	push	ar6
      0009E1 C0 05            [24] 2238 	push	ar5
      0009E3 8A 82            [24] 2239 	mov	dpl,r2
      0009E5 8B 83            [24] 2240 	mov	dph,r3
      0009E7 8C F0            [24] 2241 	mov	b,r4
      0009E9 12r00r00         [24] 2242 	lcall	_stack_peek
      0009EC AB 82            [24] 2243 	mov	r3,dpl
      0009EE AC 83            [24] 2244 	mov	r4,dph
      0009F0 15 81            [12] 2245 	dec	sp
      0009F2 15 81            [12] 2246 	dec	sp
      0009F4 15 81            [12] 2247 	dec	sp
      0009F6 EB               [12] 2248 	mov	a,r3
      0009F7 4C               [12] 2249 	orl	a,r4
      0009F8 70 25            [24] 2250 	jnz	00103$
      0009FA 7Fr1A            [12] 2251 	mov	r7,#___str_4
      0009FC 7Es00            [12] 2252 	mov	r6,#(___str_4 >> 8)
      0009FE 7D 80            [12] 2253 	mov	r5,#0x80
                                   2254 ;	calc.c:59: return;
      000A00                       2255 00356$:
                                   2256 ;	calc.c:57: for (; *s; s++) putchar(*s);
      000A00 8F 82            [24] 2257 	mov	dpl,r7
      000A02 8E 83            [24] 2258 	mov	dph,r6
      000A04 8D F0            [24] 2259 	mov	b,r5
      000A06 12r00r00         [24] 2260 	lcall	__gptrget
      000A09 FC               [12] 2261 	mov	r4,a
      000A0A 70 03            [24] 2262 	jnz	01263$
      000A0C 02r2BrA4         [24] 2263 	ljmp	00249$
      000A0F                       2264 01263$:
      000A0F 7B 00            [12] 2265 	mov	r3,#0x00
      000A11 8C 82            [24] 2266 	mov	dpl,r4
      000A13 8B 83            [24] 2267 	mov	dph,r3
      000A15 12r00r00         [24] 2268 	lcall	_putchar
      000A18 0F               [12] 2269 	inc	r7
                                   2270 ;	calc.c:143: if (!stack_peek(ctx->ps, &d0)) printstr("stack underflow\r\n");
      000A19 BF 00 E4         [24] 2271 	cjne	r7,#0x00,00356$
      000A1C 0E               [12] 2272 	inc	r6
      000A1D 80 E1            [24] 2273 	sjmp	00356$
      000A1F                       2274 00103$:
                                   2275 ;	calc.c:145: printstr("PSVTOP\t");
      000A1F 7Fr3E            [12] 2276 	mov	r7,#___str_8
      000A21 7Es00            [12] 2277 	mov	r6,#(___str_8 >> 8)
      000A23 7D 80            [12] 2278 	mov	r5,#0x80
                                   2279 ;	calc.c:59: return;
      000A25                       2280 00359$:
                                   2281 ;	calc.c:57: for (; *s; s++) putchar(*s);
      000A25 8F 82            [24] 2282 	mov	dpl,r7
      000A27 8E 83            [24] 2283 	mov	dph,r6
      000A29 8D F0            [24] 2284 	mov	b,r5
      000A2B 12r00r00         [24] 2285 	lcall	__gptrget
      000A2E FC               [12] 2286 	mov	r4,a
      000A2F 60 10            [24] 2287 	jz	00255$
      000A31 7B 00            [12] 2288 	mov	r3,#0x00
      000A33 8C 82            [24] 2289 	mov	dpl,r4
      000A35 8B 83            [24] 2290 	mov	dph,r3
      000A37 12r00r00         [24] 2291 	lcall	_putchar
      000A3A 0F               [12] 2292 	inc	r7
                                   2293 ;	calc.c:145: printstr("PSVTOP\t");
      000A3B BF 00 E7         [24] 2294 	cjne	r7,#0x00,00359$
      000A3E 0E               [12] 2295 	inc	r6
      000A3F 80 E4            [24] 2296 	sjmp	00359$
      000A41                       2297 00255$:
                                   2298 ;	calc.c:146: printall(d0);
      000A41 E5*00            [12] 2299 	mov	a,_bp
      000A43 24 15            [12] 2300 	add	a,#0x15
      000A45 F8               [12] 2301 	mov	r0,a
      000A46 86 07            [24] 2302 	mov	ar7,@r0
      000A48 08               [12] 2303 	inc	r0
      000A49 86 06            [24] 2304 	mov	ar6,@r0
      000A4B 08               [12] 2305 	inc	r0
      000A4C 86 05            [24] 2306 	mov	ar5,@r0
      000A4E 08               [12] 2307 	inc	r0
      000A4F 86 04            [24] 2308 	mov	ar4,@r0
      000A51 E5*00            [12] 2309 	mov	a,_bp
      000A53 24 1D            [12] 2310 	add	a,#0x1d
      000A55 F8               [12] 2311 	mov	r0,a
      000A56 A6 07            [24] 2312 	mov	@r0,ar7
      000A58 08               [12] 2313 	inc	r0
      000A59 A6 06            [24] 2314 	mov	@r0,ar6
      000A5B 08               [12] 2315 	inc	r0
      000A5C A6 05            [24] 2316 	mov	@r0,ar5
      000A5E 08               [12] 2317 	inc	r0
      000A5F A6 04            [24] 2318 	mov	@r0,ar4
                                   2319 ;	calc.c:72: printf("%08lx\t", d);
      000A61 C0 07            [24] 2320 	push	ar7
      000A63 C0 06            [24] 2321 	push	ar6
      000A65 C0 05            [24] 2322 	push	ar5
      000A67 C0 04            [24] 2323 	push	ar4
      000A69 74r00            [12] 2324 	mov	a,#___str_0
      000A6B C0 E0            [24] 2325 	push	acc
      000A6D 74s00            [12] 2326 	mov	a,#(___str_0 >> 8)
      000A6F C0 E0            [24] 2327 	push	acc
      000A71 74 80            [12] 2328 	mov	a,#0x80
      000A73 C0 E0            [24] 2329 	push	acc
      000A75 12r00r00         [24] 2330 	lcall	_printf
      000A78 E5 81            [12] 2331 	mov	a,sp
      000A7A 24 F9            [12] 2332 	add	a,#0xf9
      000A7C F5 81            [12] 2333 	mov	sp,a
                                   2334 ;	calc.c:73: printf("% 11ld\t", d);
      000A7E E5*00            [12] 2335 	mov	a,_bp
      000A80 24 1D            [12] 2336 	add	a,#0x1d
      000A82 F8               [12] 2337 	mov	r0,a
      000A83 E6               [12] 2338 	mov	a,@r0
      000A84 C0 E0            [24] 2339 	push	acc
      000A86 08               [12] 2340 	inc	r0
      000A87 E6               [12] 2341 	mov	a,@r0
      000A88 C0 E0            [24] 2342 	push	acc
      000A8A 08               [12] 2343 	inc	r0
      000A8B E6               [12] 2344 	mov	a,@r0
      000A8C C0 E0            [24] 2345 	push	acc
      000A8E 08               [12] 2346 	inc	r0
      000A8F E6               [12] 2347 	mov	a,@r0
      000A90 C0 E0            [24] 2348 	push	acc
      000A92 74r07            [12] 2349 	mov	a,#___str_1
      000A94 C0 E0            [24] 2350 	push	acc
      000A96 74s00            [12] 2351 	mov	a,#(___str_1 >> 8)
      000A98 C0 E0            [24] 2352 	push	acc
      000A9A 74 80            [12] 2353 	mov	a,#0x80
      000A9C C0 E0            [24] 2354 	push	acc
      000A9E 12r00r00         [24] 2355 	lcall	_printf
      000AA1 E5 81            [12] 2356 	mov	a,sp
      000AA3 24 F9            [12] 2357 	add	a,#0xf9
      000AA5 F5 81            [12] 2358 	mov	sp,a
                                   2359 ;	calc.c:74: printf("%011lo\t", d);
      000AA7 E5*00            [12] 2360 	mov	a,_bp
      000AA9 24 1D            [12] 2361 	add	a,#0x1d
      000AAB F8               [12] 2362 	mov	r0,a
      000AAC E6               [12] 2363 	mov	a,@r0
      000AAD C0 E0            [24] 2364 	push	acc
      000AAF 08               [12] 2365 	inc	r0
      000AB0 E6               [12] 2366 	mov	a,@r0
      000AB1 C0 E0            [24] 2367 	push	acc
      000AB3 08               [12] 2368 	inc	r0
      000AB4 E6               [12] 2369 	mov	a,@r0
      000AB5 C0 E0            [24] 2370 	push	acc
      000AB7 08               [12] 2371 	inc	r0
      000AB8 E6               [12] 2372 	mov	a,@r0
      000AB9 C0 E0            [24] 2373 	push	acc
      000ABB 74r0F            [12] 2374 	mov	a,#___str_2
      000ABD C0 E0            [24] 2375 	push	acc
      000ABF 74s00            [12] 2376 	mov	a,#(___str_2 >> 8)
      000AC1 C0 E0            [24] 2377 	push	acc
      000AC3 74 80            [12] 2378 	mov	a,#0x80
      000AC5 C0 E0            [24] 2379 	push	acc
      000AC7 12r00r00         [24] 2380 	lcall	_printf
      000ACA E5 81            [12] 2381 	mov	a,sp
      000ACC 24 F9            [12] 2382 	add	a,#0xf9
      000ACE F5 81            [12] 2383 	mov	sp,a
                                   2384 ;	calc.c:75: printbin(d);
      000AD0 E5*00            [12] 2385 	mov	a,_bp
      000AD2 24 1D            [12] 2386 	add	a,#0x1d
      000AD4 F8               [12] 2387 	mov	r0,a
      000AD5 86 07            [24] 2388 	mov	ar7,@r0
      000AD7 08               [12] 2389 	inc	r0
      000AD8 86 06            [24] 2390 	mov	ar6,@r0
      000ADA 08               [12] 2391 	inc	r0
      000ADB 86 05            [24] 2392 	mov	ar5,@r0
      000ADD 08               [12] 2393 	inc	r0
      000ADE 86 02            [24] 2394 	mov	ar2,@r0
                                   2395 ;	calc.c:65: for (mask = 0x80000000lu; mask; mask >>= 1)
      000AE0 E5*00            [12] 2396 	mov	a,_bp
      000AE2 24 21            [12] 2397 	add	a,#0x21
      000AE4 F8               [12] 2398 	mov	r0,a
      000AE5 E4               [12] 2399 	clr	a
      000AE6 F6               [12] 2400 	mov	@r0,a
      000AE7 08               [12] 2401 	inc	r0
      000AE8 F6               [12] 2402 	mov	@r0,a
      000AE9 08               [12] 2403 	inc	r0
      000AEA F6               [12] 2404 	mov	@r0,a
      000AEB 08               [12] 2405 	inc	r0
      000AEC 76 80            [12] 2406 	mov	@r0,#0x80
      000AEE                       2407 00361$:
                                   2408 ;	calc.c:66: (void)putchar((d & mask) ? (int)'1' : (int)'0');
      000AEE E5*00            [12] 2409 	mov	a,_bp
      000AF0 24 07            [12] 2410 	add	a,#0x07
      000AF2 F8               [12] 2411 	mov	r0,a
      000AF3 A6 07            [24] 2412 	mov	@r0,ar7
      000AF5 08               [12] 2413 	inc	r0
      000AF6 A6 06            [24] 2414 	mov	@r0,ar6
      000AF8 08               [12] 2415 	inc	r0
      000AF9 A6 05            [24] 2416 	mov	@r0,ar5
      000AFB 08               [12] 2417 	inc	r0
      000AFC A6 02            [24] 2418 	mov	@r0,ar2
      000AFE E5*00            [12] 2419 	mov	a,_bp
      000B00 24 07            [12] 2420 	add	a,#0x07
      000B02 F8               [12] 2421 	mov	r0,a
      000B03 E5*00            [12] 2422 	mov	a,_bp
      000B05 24 21            [12] 2423 	add	a,#0x21
      000B07 F9               [12] 2424 	mov	r1,a
      000B08 E7               [12] 2425 	mov	a,@r1
      000B09 56               [12] 2426 	anl	a,@r0
      000B0A F6               [12] 2427 	mov	@r0,a
      000B0B 09               [12] 2428 	inc	r1
      000B0C E7               [12] 2429 	mov	a,@r1
      000B0D 08               [12] 2430 	inc	r0
      000B0E 56               [12] 2431 	anl	a,@r0
      000B0F F6               [12] 2432 	mov	@r0,a
      000B10 09               [12] 2433 	inc	r1
      000B11 E7               [12] 2434 	mov	a,@r1
      000B12 08               [12] 2435 	inc	r0
      000B13 56               [12] 2436 	anl	a,@r0
      000B14 F6               [12] 2437 	mov	@r0,a
      000B15 09               [12] 2438 	inc	r1
      000B16 E7               [12] 2439 	mov	a,@r1
      000B17 08               [12] 2440 	inc	r0
      000B18 56               [12] 2441 	anl	a,@r0
      000B19 F6               [12] 2442 	mov	@r0,a
      000B1A E5*00            [12] 2443 	mov	a,_bp
      000B1C 24 07            [12] 2444 	add	a,#0x07
      000B1E F8               [12] 2445 	mov	r0,a
      000B1F E6               [12] 2446 	mov	a,@r0
      000B20 08               [12] 2447 	inc	r0
      000B21 46               [12] 2448 	orl	a,@r0
      000B22 08               [12] 2449 	inc	r0
      000B23 46               [12] 2450 	orl	a,@r0
      000B24 08               [12] 2451 	inc	r0
      000B25 46               [12] 2452 	orl	a,@r0
      000B26 60 06            [24] 2453 	jz	00502$
      000B28 7B 31            [12] 2454 	mov	r3,#0x31
      000B2A 7C 00            [12] 2455 	mov	r4,#0x00
      000B2C 80 04            [24] 2456 	sjmp	00503$
      000B2E                       2457 00502$:
      000B2E 7B 30            [12] 2458 	mov	r3,#0x30
      000B30 7C 00            [12] 2459 	mov	r4,#0x00
      000B32                       2460 00503$:
      000B32 8B 82            [24] 2461 	mov	dpl,r3
      000B34 8C 83            [24] 2462 	mov	dph,r4
      000B36 12r00r00         [24] 2463 	lcall	_putchar
                                   2464 ;	calc.c:65: for (mask = 0x80000000lu; mask; mask >>= 1)
      000B39 E5*00            [12] 2465 	mov	a,_bp
      000B3B 24 21            [12] 2466 	add	a,#0x21
      000B3D F8               [12] 2467 	mov	r0,a
      000B3E 08               [12] 2468 	inc	r0
      000B3F 08               [12] 2469 	inc	r0
      000B40 08               [12] 2470 	inc	r0
      000B41 E6               [12] 2471 	mov	a,@r0
      000B42 C3               [12] 2472 	clr	c
      000B43 13               [12] 2473 	rrc	a
      000B44 F6               [12] 2474 	mov	@r0,a
      000B45 18               [12] 2475 	dec	r0
      000B46 E6               [12] 2476 	mov	a,@r0
      000B47 13               [12] 2477 	rrc	a
      000B48 F6               [12] 2478 	mov	@r0,a
      000B49 18               [12] 2479 	dec	r0
      000B4A E6               [12] 2480 	mov	a,@r0
      000B4B 13               [12] 2481 	rrc	a
      000B4C F6               [12] 2482 	mov	@r0,a
      000B4D 18               [12] 2483 	dec	r0
      000B4E E6               [12] 2484 	mov	a,@r0
      000B4F 13               [12] 2485 	rrc	a
      000B50 F6               [12] 2486 	mov	@r0,a
      000B51 E5*00            [12] 2487 	mov	a,_bp
      000B53 24 21            [12] 2488 	add	a,#0x21
      000B55 F8               [12] 2489 	mov	r0,a
      000B56 E6               [12] 2490 	mov	a,@r0
      000B57 08               [12] 2491 	inc	r0
      000B58 46               [12] 2492 	orl	a,@r0
      000B59 08               [12] 2493 	inc	r0
      000B5A 46               [12] 2494 	orl	a,@r0
      000B5B 08               [12] 2495 	inc	r0
      000B5C 46               [12] 2496 	orl	a,@r0
      000B5D 70 8F            [24] 2497 	jnz	00361$
                                   2498 ;	calc.c:147: printstr("\r\n");
      000B5F 7Fr17            [12] 2499 	mov	r7,#___str_3
      000B61 7Es00            [12] 2500 	mov	r6,#(___str_3 >> 8)
      000B63 7D 80            [12] 2501 	mov	r5,#0x80
                                   2502 ;	calc.c:59: return;
      000B65                       2503 00364$:
                                   2504 ;	calc.c:57: for (; *s; s++) putchar(*s);
      000B65 8F 82            [24] 2505 	mov	dpl,r7
      000B67 8E 83            [24] 2506 	mov	dph,r6
      000B69 8D F0            [24] 2507 	mov	b,r5
      000B6B 12r00r00         [24] 2508 	lcall	__gptrget
      000B6E FC               [12] 2509 	mov	r4,a
      000B6F 70 03            [24] 2510 	jnz	01269$
      000B71 02r2BrA4         [24] 2511 	ljmp	00249$
      000B74                       2512 01269$:
      000B74 7B 00            [12] 2513 	mov	r3,#0x00
      000B76 8C 82            [24] 2514 	mov	dpl,r4
      000B78 8B 83            [24] 2515 	mov	dph,r3
      000B7A 12r00r00         [24] 2516 	lcall	_putchar
      000B7D 0F               [12] 2517 	inc	r7
                                   2518 ;	calc.c:150: case 'V':
      000B7E BF 00 E4         [24] 2519 	cjne	r7,#0x00,00364$
      000B81 0E               [12] 2520 	inc	r6
      000B82 80 E1            [24] 2521 	sjmp	00364$
      000B84                       2522 00105$:
                                   2523 ;	calc.c:151: printstr("\r\n");
      000B84 7Fr17            [12] 2524 	mov	r7,#___str_3
      000B86 7Es00            [12] 2525 	mov	r6,#(___str_3 >> 8)
      000B88 7D 80            [12] 2526 	mov	r5,#0x80
                                   2527 ;	calc.c:59: return;
      000B8A                       2528 00367$:
                                   2529 ;	calc.c:57: for (; *s; s++) putchar(*s);
      000B8A 8F 82            [24] 2530 	mov	dpl,r7
      000B8C 8E 83            [24] 2531 	mov	dph,r6
      000B8E 8D F0            [24] 2532 	mov	b,r5
      000B90 12r00r00         [24] 2533 	lcall	__gptrget
      000B93 FC               [12] 2534 	mov	r4,a
      000B94 60 10            [24] 2535 	jz	00262$
      000B96 7B 00            [12] 2536 	mov	r3,#0x00
      000B98 8C 82            [24] 2537 	mov	dpl,r4
      000B9A 8B 83            [24] 2538 	mov	dph,r3
      000B9C 12r00r00         [24] 2539 	lcall	_putchar
      000B9F 0F               [12] 2540 	inc	r7
                                   2541 ;	calc.c:151: printstr("\r\n");
      000BA0 BF 00 E7         [24] 2542 	cjne	r7,#0x00,00367$
      000BA3 0E               [12] 2543 	inc	r6
      000BA4 80 E4            [24] 2544 	sjmp	00367$
      000BA6                       2545 00262$:
                                   2546 ;	calc.c:152: if (!stack_iter_peek(ctx->ps, dump_peek, ctx)) printstr("stack underflow\r\n");
      000BA6 E5*00            [12] 2547 	mov	a,_bp
      000BA8 24 12            [12] 2548 	add	a,#0x12
      000BAA F8               [12] 2549 	mov	r0,a
      000BAB 86 07            [24] 2550 	mov	ar7,@r0
      000BAD 08               [12] 2551 	inc	r0
      000BAE 86 06            [24] 2552 	mov	ar6,@r0
      000BB0 08               [12] 2553 	inc	r0
      000BB1 86 05            [24] 2554 	mov	ar5,@r0
      000BB3 E5*00            [12] 2555 	mov	a,_bp
      000BB5 24 12            [12] 2556 	add	a,#0x12
      000BB7 F8               [12] 2557 	mov	r0,a
      000BB8 74 11            [12] 2558 	mov	a,#0x11
      000BBA 26               [12] 2559 	add	a,@r0
      000BBB FA               [12] 2560 	mov	r2,a
      000BBC 74 40            [12] 2561 	mov	a,#0x40
      000BBE 08               [12] 2562 	inc	r0
      000BBF 36               [12] 2563 	addc	a,@r0
      000BC0 FB               [12] 2564 	mov	r3,a
      000BC1 08               [12] 2565 	inc	r0
      000BC2 86 04            [24] 2566 	mov	ar4,@r0
      000BC4 8A 82            [24] 2567 	mov	dpl,r2
      000BC6 8B 83            [24] 2568 	mov	dph,r3
      000BC8 8C F0            [24] 2569 	mov	b,r4
      000BCA 12r00r00         [24] 2570 	lcall	__gptrget
      000BCD FA               [12] 2571 	mov	r2,a
      000BCE A3               [24] 2572 	inc	dptr
      000BCF 12r00r00         [24] 2573 	lcall	__gptrget
      000BD2 FB               [12] 2574 	mov	r3,a
      000BD3 A3               [24] 2575 	inc	dptr
      000BD4 12r00r00         [24] 2576 	lcall	__gptrget
      000BD7 FC               [12] 2577 	mov	r4,a
      000BD8 C0 07            [24] 2578 	push	ar7
      000BDA C0 06            [24] 2579 	push	ar6
      000BDC C0 05            [24] 2580 	push	ar5
      000BDE 74r4A            [12] 2581 	mov	a,#_dump_peek
      000BE0 C0 E0            [24] 2582 	push	acc
      000BE2 74s07            [12] 2583 	mov	a,#(_dump_peek >> 8)
      000BE4 C0 E0            [24] 2584 	push	acc
      000BE6 8A 82            [24] 2585 	mov	dpl,r2
      000BE8 8B 83            [24] 2586 	mov	dph,r3
      000BEA 8C F0            [24] 2587 	mov	b,r4
      000BEC 12r00r00         [24] 2588 	lcall	_stack_iter_peek
      000BEF AB 82            [24] 2589 	mov	r3,dpl
      000BF1 AC 83            [24] 2590 	mov	r4,dph
      000BF3 E5 81            [12] 2591 	mov	a,sp
      000BF5 24 FB            [12] 2592 	add	a,#0xfb
      000BF7 F5 81            [12] 2593 	mov	sp,a
      000BF9 EB               [12] 2594 	mov	a,r3
      000BFA 4C               [12] 2595 	orl	a,r4
      000BFB 60 03            [24] 2596 	jz	01273$
      000BFD 02r2BrA4         [24] 2597 	ljmp	00249$
      000C00                       2598 01273$:
      000C00 7Fr1A            [12] 2599 	mov	r7,#___str_4
      000C02 7Es00            [12] 2600 	mov	r6,#(___str_4 >> 8)
      000C04 7D 80            [12] 2601 	mov	r5,#0x80
                                   2602 ;	calc.c:59: return;
      000C06                       2603 00370$:
                                   2604 ;	calc.c:57: for (; *s; s++) putchar(*s);
      000C06 8F 82            [24] 2605 	mov	dpl,r7
      000C08 8E 83            [24] 2606 	mov	dph,r6
      000C0A 8D F0            [24] 2607 	mov	b,r5
      000C0C 12r00r00         [24] 2608 	lcall	__gptrget
      000C0F FC               [12] 2609 	mov	r4,a
      000C10 70 03            [24] 2610 	jnz	01274$
      000C12 02r2BrA4         [24] 2611 	ljmp	00249$
      000C15                       2612 01274$:
      000C15 7B 00            [12] 2613 	mov	r3,#0x00
      000C17 8C 82            [24] 2614 	mov	dpl,r4
      000C19 8B 83            [24] 2615 	mov	dph,r3
      000C1B 12r00r00         [24] 2616 	lcall	_putchar
      000C1E 0F               [12] 2617 	inc	r7
                                   2618 ;	calc.c:155: case 'p':
      000C1F BF 00 E4         [24] 2619 	cjne	r7,#0x00,00370$
      000C22 0E               [12] 2620 	inc	r6
      000C23 80 E1            [24] 2621 	sjmp	00370$
      000C25                       2622 00109$:
                                   2623 ;	calc.c:156: printstr("\r\n");
      000C25 7Fr17            [12] 2624 	mov	r7,#___str_3
      000C27 7Es00            [12] 2625 	mov	r6,#(___str_3 >> 8)
      000C29 7D 80            [12] 2626 	mov	r5,#0x80
                                   2627 ;	calc.c:59: return;
      000C2B                       2628 00373$:
                                   2629 ;	calc.c:57: for (; *s; s++) putchar(*s);
      000C2B 8F 82            [24] 2630 	mov	dpl,r7
      000C2D 8E 83            [24] 2631 	mov	dph,r6
      000C2F 8D F0            [24] 2632 	mov	b,r5
      000C31 12r00r00         [24] 2633 	lcall	__gptrget
      000C34 FC               [12] 2634 	mov	r4,a
      000C35 60 10            [24] 2635 	jz	00266$
      000C37 7B 00            [12] 2636 	mov	r3,#0x00
      000C39 8C 82            [24] 2637 	mov	dpl,r4
      000C3B 8B 83            [24] 2638 	mov	dph,r3
      000C3D 12r00r00         [24] 2639 	lcall	_putchar
      000C40 0F               [12] 2640 	inc	r7
                                   2641 ;	calc.c:156: printstr("\r\n");
      000C41 BF 00 E7         [24] 2642 	cjne	r7,#0x00,00373$
      000C44 0E               [12] 2643 	inc	r6
      000C45 80 E4            [24] 2644 	sjmp	00373$
      000C47                       2645 00266$:
                                   2646 ;	calc.c:157: if (!stack_pop(ctx->ps, &d0)) printstr("stack underflow\r\n");
      000C47 E5*00            [12] 2647 	mov	a,_bp
      000C49 24 15            [12] 2648 	add	a,#0x15
      000C4B FF               [12] 2649 	mov	r7,a
      000C4C 7E 00            [12] 2650 	mov	r6,#0x00
      000C4E 7D 40            [12] 2651 	mov	r5,#0x40
      000C50 E5*00            [12] 2652 	mov	a,_bp
      000C52 24 12            [12] 2653 	add	a,#0x12
      000C54 F8               [12] 2654 	mov	r0,a
      000C55 74 11            [12] 2655 	mov	a,#0x11
      000C57 26               [12] 2656 	add	a,@r0
      000C58 FA               [12] 2657 	mov	r2,a
      000C59 ED               [12] 2658 	mov	a,r5
      000C5A 08               [12] 2659 	inc	r0
      000C5B 36               [12] 2660 	addc	a,@r0
      000C5C FB               [12] 2661 	mov	r3,a
      000C5D 08               [12] 2662 	inc	r0
      000C5E 86 04            [24] 2663 	mov	ar4,@r0
      000C60 8A 82            [24] 2664 	mov	dpl,r2
      000C62 8B 83            [24] 2665 	mov	dph,r3
      000C64 8C F0            [24] 2666 	mov	b,r4
      000C66 12r00r00         [24] 2667 	lcall	__gptrget
      000C69 FA               [12] 2668 	mov	r2,a
      000C6A A3               [24] 2669 	inc	dptr
      000C6B 12r00r00         [24] 2670 	lcall	__gptrget
      000C6E FB               [12] 2671 	mov	r3,a
      000C6F A3               [24] 2672 	inc	dptr
      000C70 12r00r00         [24] 2673 	lcall	__gptrget
      000C73 FC               [12] 2674 	mov	r4,a
      000C74 C0 07            [24] 2675 	push	ar7
      000C76 C0 06            [24] 2676 	push	ar6
      000C78 C0 05            [24] 2677 	push	ar5
      000C7A 8A 82            [24] 2678 	mov	dpl,r2
      000C7C 8B 83            [24] 2679 	mov	dph,r3
      000C7E 8C F0            [24] 2680 	mov	b,r4
      000C80 12r00r00         [24] 2681 	lcall	_stack_pop
      000C83 AB 82            [24] 2682 	mov	r3,dpl
      000C85 AC 83            [24] 2683 	mov	r4,dph
      000C87 15 81            [12] 2684 	dec	sp
      000C89 15 81            [12] 2685 	dec	sp
      000C8B 15 81            [12] 2686 	dec	sp
      000C8D EB               [12] 2687 	mov	a,r3
      000C8E 4C               [12] 2688 	orl	a,r4
      000C8F 70 25            [24] 2689 	jnz	00111$
      000C91 7Fr1A            [12] 2690 	mov	r7,#___str_4
      000C93 7Es00            [12] 2691 	mov	r6,#(___str_4 >> 8)
      000C95 7D 80            [12] 2692 	mov	r5,#0x80
                                   2693 ;	calc.c:59: return;
      000C97                       2694 00376$:
                                   2695 ;	calc.c:57: for (; *s; s++) putchar(*s);
      000C97 8F 82            [24] 2696 	mov	dpl,r7
      000C99 8E 83            [24] 2697 	mov	dph,r6
      000C9B 8D F0            [24] 2698 	mov	b,r5
      000C9D 12r00r00         [24] 2699 	lcall	__gptrget
      000CA0 FC               [12] 2700 	mov	r4,a
      000CA1 70 03            [24] 2701 	jnz	01279$
      000CA3 02r2BrA4         [24] 2702 	ljmp	00249$
      000CA6                       2703 01279$:
      000CA6 7B 00            [12] 2704 	mov	r3,#0x00
      000CA8 8C 82            [24] 2705 	mov	dpl,r4
      000CAA 8B 83            [24] 2706 	mov	dph,r3
      000CAC 12r00r00         [24] 2707 	lcall	_putchar
      000CAF 0F               [12] 2708 	inc	r7
                                   2709 ;	calc.c:157: if (!stack_pop(ctx->ps, &d0)) printstr("stack underflow\r\n");
      000CB0 BF 00 E4         [24] 2710 	cjne	r7,#0x00,00376$
      000CB3 0E               [12] 2711 	inc	r6
      000CB4 80 E1            [24] 2712 	sjmp	00376$
      000CB6                       2713 00111$:
                                   2714 ;	calc.c:159: printstr("PSPTOP\t");
      000CB6 7Fr46            [12] 2715 	mov	r7,#___str_9
      000CB8 7Es00            [12] 2716 	mov	r6,#(___str_9 >> 8)
      000CBA 7D 80            [12] 2717 	mov	r5,#0x80
                                   2718 ;	calc.c:59: return;
      000CBC                       2719 00379$:
                                   2720 ;	calc.c:57: for (; *s; s++) putchar(*s);
      000CBC 8F 82            [24] 2721 	mov	dpl,r7
      000CBE 8E 83            [24] 2722 	mov	dph,r6
      000CC0 8D F0            [24] 2723 	mov	b,r5
      000CC2 12r00r00         [24] 2724 	lcall	__gptrget
      000CC5 FC               [12] 2725 	mov	r4,a
      000CC6 60 10            [24] 2726 	jz	00270$
      000CC8 7B 00            [12] 2727 	mov	r3,#0x00
      000CCA 8C 82            [24] 2728 	mov	dpl,r4
      000CCC 8B 83            [24] 2729 	mov	dph,r3
      000CCE 12r00r00         [24] 2730 	lcall	_putchar
      000CD1 0F               [12] 2731 	inc	r7
                                   2732 ;	calc.c:159: printstr("PSPTOP\t");
      000CD2 BF 00 E7         [24] 2733 	cjne	r7,#0x00,00379$
      000CD5 0E               [12] 2734 	inc	r6
      000CD6 80 E4            [24] 2735 	sjmp	00379$
      000CD8                       2736 00270$:
                                   2737 ;	calc.c:160: printall(d0);
      000CD8 E5*00            [12] 2738 	mov	a,_bp
      000CDA 24 15            [12] 2739 	add	a,#0x15
      000CDC F8               [12] 2740 	mov	r0,a
      000CDD 86 07            [24] 2741 	mov	ar7,@r0
      000CDF 08               [12] 2742 	inc	r0
      000CE0 86 06            [24] 2743 	mov	ar6,@r0
      000CE2 08               [12] 2744 	inc	r0
      000CE3 86 05            [24] 2745 	mov	ar5,@r0
      000CE5 08               [12] 2746 	inc	r0
      000CE6 86 04            [24] 2747 	mov	ar4,@r0
      000CE8 E5*00            [12] 2748 	mov	a,_bp
      000CEA 24 1D            [12] 2749 	add	a,#0x1d
      000CEC F8               [12] 2750 	mov	r0,a
      000CED A6 07            [24] 2751 	mov	@r0,ar7
      000CEF 08               [12] 2752 	inc	r0
      000CF0 A6 06            [24] 2753 	mov	@r0,ar6
      000CF2 08               [12] 2754 	inc	r0
      000CF3 A6 05            [24] 2755 	mov	@r0,ar5
      000CF5 08               [12] 2756 	inc	r0
      000CF6 A6 04            [24] 2757 	mov	@r0,ar4
                                   2758 ;	calc.c:72: printf("%08lx\t", d);
      000CF8 C0 07            [24] 2759 	push	ar7
      000CFA C0 06            [24] 2760 	push	ar6
      000CFC C0 05            [24] 2761 	push	ar5
      000CFE C0 04            [24] 2762 	push	ar4
      000D00 74r00            [12] 2763 	mov	a,#___str_0
      000D02 C0 E0            [24] 2764 	push	acc
      000D04 74s00            [12] 2765 	mov	a,#(___str_0 >> 8)
      000D06 C0 E0            [24] 2766 	push	acc
      000D08 74 80            [12] 2767 	mov	a,#0x80
      000D0A C0 E0            [24] 2768 	push	acc
      000D0C 12r00r00         [24] 2769 	lcall	_printf
      000D0F E5 81            [12] 2770 	mov	a,sp
      000D11 24 F9            [12] 2771 	add	a,#0xf9
      000D13 F5 81            [12] 2772 	mov	sp,a
                                   2773 ;	calc.c:73: printf("% 11ld\t", d);
      000D15 E5*00            [12] 2774 	mov	a,_bp
      000D17 24 1D            [12] 2775 	add	a,#0x1d
      000D19 F8               [12] 2776 	mov	r0,a
      000D1A E6               [12] 2777 	mov	a,@r0
      000D1B C0 E0            [24] 2778 	push	acc
      000D1D 08               [12] 2779 	inc	r0
      000D1E E6               [12] 2780 	mov	a,@r0
      000D1F C0 E0            [24] 2781 	push	acc
      000D21 08               [12] 2782 	inc	r0
      000D22 E6               [12] 2783 	mov	a,@r0
      000D23 C0 E0            [24] 2784 	push	acc
      000D25 08               [12] 2785 	inc	r0
      000D26 E6               [12] 2786 	mov	a,@r0
      000D27 C0 E0            [24] 2787 	push	acc
      000D29 74r07            [12] 2788 	mov	a,#___str_1
      000D2B C0 E0            [24] 2789 	push	acc
      000D2D 74s00            [12] 2790 	mov	a,#(___str_1 >> 8)
      000D2F C0 E0            [24] 2791 	push	acc
      000D31 74 80            [12] 2792 	mov	a,#0x80
      000D33 C0 E0            [24] 2793 	push	acc
      000D35 12r00r00         [24] 2794 	lcall	_printf
      000D38 E5 81            [12] 2795 	mov	a,sp
      000D3A 24 F9            [12] 2796 	add	a,#0xf9
      000D3C F5 81            [12] 2797 	mov	sp,a
                                   2798 ;	calc.c:74: printf("%011lo\t", d);
      000D3E E5*00            [12] 2799 	mov	a,_bp
      000D40 24 1D            [12] 2800 	add	a,#0x1d
      000D42 F8               [12] 2801 	mov	r0,a
      000D43 E6               [12] 2802 	mov	a,@r0
      000D44 C0 E0            [24] 2803 	push	acc
      000D46 08               [12] 2804 	inc	r0
      000D47 E6               [12] 2805 	mov	a,@r0
      000D48 C0 E0            [24] 2806 	push	acc
      000D4A 08               [12] 2807 	inc	r0
      000D4B E6               [12] 2808 	mov	a,@r0
      000D4C C0 E0            [24] 2809 	push	acc
      000D4E 08               [12] 2810 	inc	r0
      000D4F E6               [12] 2811 	mov	a,@r0
      000D50 C0 E0            [24] 2812 	push	acc
      000D52 74r0F            [12] 2813 	mov	a,#___str_2
      000D54 C0 E0            [24] 2814 	push	acc
      000D56 74s00            [12] 2815 	mov	a,#(___str_2 >> 8)
      000D58 C0 E0            [24] 2816 	push	acc
      000D5A 74 80            [12] 2817 	mov	a,#0x80
      000D5C C0 E0            [24] 2818 	push	acc
      000D5E 12r00r00         [24] 2819 	lcall	_printf
      000D61 E5 81            [12] 2820 	mov	a,sp
      000D63 24 F9            [12] 2821 	add	a,#0xf9
      000D65 F5 81            [12] 2822 	mov	sp,a
                                   2823 ;	calc.c:75: printbin(d);
      000D67 E5*00            [12] 2824 	mov	a,_bp
      000D69 24 1D            [12] 2825 	add	a,#0x1d
      000D6B F8               [12] 2826 	mov	r0,a
      000D6C 86 07            [24] 2827 	mov	ar7,@r0
      000D6E 08               [12] 2828 	inc	r0
      000D6F 86 06            [24] 2829 	mov	ar6,@r0
      000D71 08               [12] 2830 	inc	r0
      000D72 86 05            [24] 2831 	mov	ar5,@r0
      000D74 08               [12] 2832 	inc	r0
      000D75 86 02            [24] 2833 	mov	ar2,@r0
                                   2834 ;	calc.c:65: for (mask = 0x80000000lu; mask; mask >>= 1)
      000D77 E5*00            [12] 2835 	mov	a,_bp
      000D79 24 21            [12] 2836 	add	a,#0x21
      000D7B F8               [12] 2837 	mov	r0,a
      000D7C E4               [12] 2838 	clr	a
      000D7D F6               [12] 2839 	mov	@r0,a
      000D7E 08               [12] 2840 	inc	r0
      000D7F F6               [12] 2841 	mov	@r0,a
      000D80 08               [12] 2842 	inc	r0
      000D81 F6               [12] 2843 	mov	@r0,a
      000D82 08               [12] 2844 	inc	r0
      000D83 76 80            [12] 2845 	mov	@r0,#0x80
      000D85                       2846 00381$:
                                   2847 ;	calc.c:66: (void)putchar((d & mask) ? (int)'1' : (int)'0');
      000D85 E5*00            [12] 2848 	mov	a,_bp
      000D87 24 07            [12] 2849 	add	a,#0x07
      000D89 F8               [12] 2850 	mov	r0,a
      000D8A A6 07            [24] 2851 	mov	@r0,ar7
      000D8C 08               [12] 2852 	inc	r0
      000D8D A6 06            [24] 2853 	mov	@r0,ar6
      000D8F 08               [12] 2854 	inc	r0
      000D90 A6 05            [24] 2855 	mov	@r0,ar5
      000D92 08               [12] 2856 	inc	r0
      000D93 A6 02            [24] 2857 	mov	@r0,ar2
      000D95 E5*00            [12] 2858 	mov	a,_bp
      000D97 24 07            [12] 2859 	add	a,#0x07
      000D99 F8               [12] 2860 	mov	r0,a
      000D9A E5*00            [12] 2861 	mov	a,_bp
      000D9C 24 21            [12] 2862 	add	a,#0x21
      000D9E F9               [12] 2863 	mov	r1,a
      000D9F E7               [12] 2864 	mov	a,@r1
      000DA0 56               [12] 2865 	anl	a,@r0
      000DA1 F6               [12] 2866 	mov	@r0,a
      000DA2 09               [12] 2867 	inc	r1
      000DA3 E7               [12] 2868 	mov	a,@r1
      000DA4 08               [12] 2869 	inc	r0
      000DA5 56               [12] 2870 	anl	a,@r0
      000DA6 F6               [12] 2871 	mov	@r0,a
      000DA7 09               [12] 2872 	inc	r1
      000DA8 E7               [12] 2873 	mov	a,@r1
      000DA9 08               [12] 2874 	inc	r0
      000DAA 56               [12] 2875 	anl	a,@r0
      000DAB F6               [12] 2876 	mov	@r0,a
      000DAC 09               [12] 2877 	inc	r1
      000DAD E7               [12] 2878 	mov	a,@r1
      000DAE 08               [12] 2879 	inc	r0
      000DAF 56               [12] 2880 	anl	a,@r0
      000DB0 F6               [12] 2881 	mov	@r0,a
      000DB1 E5*00            [12] 2882 	mov	a,_bp
      000DB3 24 07            [12] 2883 	add	a,#0x07
      000DB5 F8               [12] 2884 	mov	r0,a
      000DB6 E6               [12] 2885 	mov	a,@r0
      000DB7 08               [12] 2886 	inc	r0
      000DB8 46               [12] 2887 	orl	a,@r0
      000DB9 08               [12] 2888 	inc	r0
      000DBA 46               [12] 2889 	orl	a,@r0
      000DBB 08               [12] 2890 	inc	r0
      000DBC 46               [12] 2891 	orl	a,@r0
      000DBD 60 06            [24] 2892 	jz	00504$
      000DBF 7B 31            [12] 2893 	mov	r3,#0x31
      000DC1 7C 00            [12] 2894 	mov	r4,#0x00
      000DC3 80 04            [24] 2895 	sjmp	00505$
      000DC5                       2896 00504$:
      000DC5 7B 30            [12] 2897 	mov	r3,#0x30
      000DC7 7C 00            [12] 2898 	mov	r4,#0x00
      000DC9                       2899 00505$:
      000DC9 8B 82            [24] 2900 	mov	dpl,r3
      000DCB 8C 83            [24] 2901 	mov	dph,r4
      000DCD 12r00r00         [24] 2902 	lcall	_putchar
                                   2903 ;	calc.c:65: for (mask = 0x80000000lu; mask; mask >>= 1)
      000DD0 E5*00            [12] 2904 	mov	a,_bp
      000DD2 24 21            [12] 2905 	add	a,#0x21
      000DD4 F8               [12] 2906 	mov	r0,a
      000DD5 08               [12] 2907 	inc	r0
      000DD6 08               [12] 2908 	inc	r0
      000DD7 08               [12] 2909 	inc	r0
      000DD8 E6               [12] 2910 	mov	a,@r0
      000DD9 C3               [12] 2911 	clr	c
      000DDA 13               [12] 2912 	rrc	a
      000DDB F6               [12] 2913 	mov	@r0,a
      000DDC 18               [12] 2914 	dec	r0
      000DDD E6               [12] 2915 	mov	a,@r0
      000DDE 13               [12] 2916 	rrc	a
      000DDF F6               [12] 2917 	mov	@r0,a
      000DE0 18               [12] 2918 	dec	r0
      000DE1 E6               [12] 2919 	mov	a,@r0
      000DE2 13               [12] 2920 	rrc	a
      000DE3 F6               [12] 2921 	mov	@r0,a
      000DE4 18               [12] 2922 	dec	r0
      000DE5 E6               [12] 2923 	mov	a,@r0
      000DE6 13               [12] 2924 	rrc	a
      000DE7 F6               [12] 2925 	mov	@r0,a
      000DE8 E5*00            [12] 2926 	mov	a,_bp
      000DEA 24 21            [12] 2927 	add	a,#0x21
      000DEC F8               [12] 2928 	mov	r0,a
      000DED E6               [12] 2929 	mov	a,@r0
      000DEE 08               [12] 2930 	inc	r0
      000DEF 46               [12] 2931 	orl	a,@r0
      000DF0 08               [12] 2932 	inc	r0
      000DF1 46               [12] 2933 	orl	a,@r0
      000DF2 08               [12] 2934 	inc	r0
      000DF3 46               [12] 2935 	orl	a,@r0
      000DF4 70 8F            [24] 2936 	jnz	00381$
                                   2937 ;	calc.c:161: printstr("\r\n");
      000DF6 7Fr17            [12] 2938 	mov	r7,#___str_3
      000DF8 7Es00            [12] 2939 	mov	r6,#(___str_3 >> 8)
      000DFA 7D 80            [12] 2940 	mov	r5,#0x80
                                   2941 ;	calc.c:59: return;
      000DFC                       2942 00384$:
                                   2943 ;	calc.c:57: for (; *s; s++) putchar(*s);
      000DFC 8F 82            [24] 2944 	mov	dpl,r7
      000DFE 8E 83            [24] 2945 	mov	dph,r6
      000E00 8D F0            [24] 2946 	mov	b,r5
      000E02 12r00r00         [24] 2947 	lcall	__gptrget
      000E05 FC               [12] 2948 	mov	r4,a
      000E06 70 03            [24] 2949 	jnz	01285$
      000E08 02r2BrA4         [24] 2950 	ljmp	00249$
      000E0B                       2951 01285$:
      000E0B 7B 00            [12] 2952 	mov	r3,#0x00
      000E0D 8C 82            [24] 2953 	mov	dpl,r4
      000E0F 8B 83            [24] 2954 	mov	dph,r3
      000E11 12r00r00         [24] 2955 	lcall	_putchar
      000E14 0F               [12] 2956 	inc	r7
                                   2957 ;	calc.c:164: case 'P':
      000E15 BF 00 E4         [24] 2958 	cjne	r7,#0x00,00384$
      000E18 0E               [12] 2959 	inc	r6
      000E19 80 E1            [24] 2960 	sjmp	00384$
      000E1B                       2961 00113$:
                                   2962 ;	calc.c:165: printstr("\r\n");
      000E1B 7Fr17            [12] 2963 	mov	r7,#___str_3
      000E1D 7Es00            [12] 2964 	mov	r6,#(___str_3 >> 8)
      000E1F 7D 80            [12] 2965 	mov	r5,#0x80
                                   2966 ;	calc.c:59: return;
      000E21                       2967 00387$:
                                   2968 ;	calc.c:57: for (; *s; s++) putchar(*s);
      000E21 8F 82            [24] 2969 	mov	dpl,r7
      000E23 8E 83            [24] 2970 	mov	dph,r6
      000E25 8D F0            [24] 2971 	mov	b,r5
      000E27 12r00r00         [24] 2972 	lcall	__gptrget
      000E2A FC               [12] 2973 	mov	r4,a
      000E2B 60 10            [24] 2974 	jz	00277$
      000E2D 7B 00            [12] 2975 	mov	r3,#0x00
      000E2F 8C 82            [24] 2976 	mov	dpl,r4
      000E31 8B 83            [24] 2977 	mov	dph,r3
      000E33 12r00r00         [24] 2978 	lcall	_putchar
      000E36 0F               [12] 2979 	inc	r7
                                   2980 ;	calc.c:165: printstr("\r\n");
      000E37 BF 00 E7         [24] 2981 	cjne	r7,#0x00,00387$
      000E3A 0E               [12] 2982 	inc	r6
      000E3B 80 E4            [24] 2983 	sjmp	00387$
      000E3D                       2984 00277$:
                                   2985 ;	calc.c:166: (void)dump_pop(_ctx, delta);
      000E3D E5*00            [12] 2986 	mov	a,_bp
      000E3F 24 FB            [12] 2987 	add	a,#0xfb
      000E41 F8               [12] 2988 	mov	r0,a
      000E42 E6               [12] 2989 	mov	a,@r0
      000E43 C0 E0            [24] 2990 	push	acc
      000E45 08               [12] 2991 	inc	r0
      000E46 E6               [12] 2992 	mov	a,@r0
      000E47 C0 E0            [24] 2993 	push	acc
      000E49 08               [12] 2994 	inc	r0
      000E4A E6               [12] 2995 	mov	a,@r0
      000E4B C0 E0            [24] 2996 	push	acc
      000E4D A8*00            [24] 2997 	mov	r0,_bp
      000E4F 08               [12] 2998 	inc	r0
      000E50 86 82            [24] 2999 	mov	dpl,@r0
      000E52 08               [12] 3000 	inc	r0
      000E53 86 83            [24] 3001 	mov	dph,@r0
      000E55 08               [12] 3002 	inc	r0
      000E56 86 F0            [24] 3003 	mov	b,@r0
      000E58 12r01rA2         [24] 3004 	lcall	_dump_pop
      000E5B 15 81            [12] 3005 	dec	sp
      000E5D 15 81            [12] 3006 	dec	sp
      000E5F 15 81            [12] 3007 	dec	sp
                                   3008 ;	calc.c:167: break;
      000E61 02r2BrA4         [24] 3009 	ljmp	00249$
                                   3010 ;	calc.c:168: case 'x':
      000E64                       3011 00114$:
                                   3012 ;	calc.c:169: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      000E64 E5*00            [12] 3013 	mov	a,_bp
      000E66 24 15            [12] 3014 	add	a,#0x15
      000E68 FF               [12] 3015 	mov	r7,a
      000E69 7E 00            [12] 3016 	mov	r6,#0x00
      000E6B 7D 40            [12] 3017 	mov	r5,#0x40
      000E6D E5*00            [12] 3018 	mov	a,_bp
      000E6F 24 12            [12] 3019 	add	a,#0x12
      000E71 F8               [12] 3020 	mov	r0,a
      000E72 E5*00            [12] 3021 	mov	a,_bp
      000E74 24 07            [12] 3022 	add	a,#0x07
      000E76 F9               [12] 3023 	mov	r1,a
      000E77 74 11            [12] 3024 	mov	a,#0x11
      000E79 26               [12] 3025 	add	a,@r0
      000E7A F7               [12] 3026 	mov	@r1,a
      000E7B 74 40            [12] 3027 	mov	a,#0x40
      000E7D 08               [12] 3028 	inc	r0
      000E7E 36               [12] 3029 	addc	a,@r0
      000E7F 09               [12] 3030 	inc	r1
      000E80 F7               [12] 3031 	mov	@r1,a
      000E81 08               [12] 3032 	inc	r0
      000E82 09               [12] 3033 	inc	r1
      000E83 E6               [12] 3034 	mov	a,@r0
      000E84 F7               [12] 3035 	mov	@r1,a
      000E85 E5*00            [12] 3036 	mov	a,_bp
      000E87 24 07            [12] 3037 	add	a,#0x07
      000E89 F8               [12] 3038 	mov	r0,a
      000E8A 86 82            [24] 3039 	mov	dpl,@r0
      000E8C 08               [12] 3040 	inc	r0
      000E8D 86 83            [24] 3041 	mov	dph,@r0
      000E8F 08               [12] 3042 	inc	r0
      000E90 86 F0            [24] 3043 	mov	b,@r0
      000E92 12r00r00         [24] 3044 	lcall	__gptrget
      000E95 FA               [12] 3045 	mov	r2,a
      000E96 A3               [24] 3046 	inc	dptr
      000E97 12r00r00         [24] 3047 	lcall	__gptrget
      000E9A FB               [12] 3048 	mov	r3,a
      000E9B A3               [24] 3049 	inc	dptr
      000E9C 12r00r00         [24] 3050 	lcall	__gptrget
      000E9F FC               [12] 3051 	mov	r4,a
      000EA0 C0 07            [24] 3052 	push	ar7
      000EA2 C0 06            [24] 3053 	push	ar6
      000EA4 C0 05            [24] 3054 	push	ar5
      000EA6 8A 82            [24] 3055 	mov	dpl,r2
      000EA8 8B 83            [24] 3056 	mov	dph,r3
      000EAA 8C F0            [24] 3057 	mov	b,r4
      000EAC 12r00r00         [24] 3058 	lcall	_stack_pop
      000EAF AB 82            [24] 3059 	mov	r3,dpl
      000EB1 AC 83            [24] 3060 	mov	r4,dph
      000EB3 15 81            [12] 3061 	dec	sp
      000EB5 15 81            [12] 3062 	dec	sp
      000EB7 15 81            [12] 3063 	dec	sp
      000EB9 EB               [12] 3064 	mov	a,r3
      000EBA 4C               [12] 3065 	orl	a,r4
      000EBB 70 25            [24] 3066 	jnz	00119$
      000EBD 7Fr4E            [12] 3067 	mov	r7,#___str_10
      000EBF 7Es00            [12] 3068 	mov	r6,#(___str_10 >> 8)
      000EC1 7D 80            [12] 3069 	mov	r5,#0x80
                                   3070 ;	calc.c:59: return;
      000EC3                       3071 00390$:
                                   3072 ;	calc.c:57: for (; *s; s++) putchar(*s);
      000EC3 8F 82            [24] 3073 	mov	dpl,r7
      000EC5 8E 83            [24] 3074 	mov	dph,r6
      000EC7 8D F0            [24] 3075 	mov	b,r5
      000EC9 12r00r00         [24] 3076 	lcall	__gptrget
      000ECC FC               [12] 3077 	mov	r4,a
      000ECD 70 03            [24] 3078 	jnz	01290$
      000ECF 02r2BrA4         [24] 3079 	ljmp	00249$
      000ED2                       3080 01290$:
      000ED2 7B 00            [12] 3081 	mov	r3,#0x00
      000ED4 8C 82            [24] 3082 	mov	dpl,r4
      000ED6 8B 83            [24] 3083 	mov	dph,r3
      000ED8 12r00r00         [24] 3084 	lcall	_putchar
      000EDB 0F               [12] 3085 	inc	r7
                                   3086 ;	calc.c:169: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      000EDC BF 00 E4         [24] 3087 	cjne	r7,#0x00,00390$
      000EDF 0E               [12] 3088 	inc	r6
      000EE0 80 E1            [24] 3089 	sjmp	00390$
      000EE2                       3090 00119$:
                                   3091 ;	calc.c:170: else if (!stack_pop(ctx->ps, &d1)) {
      000EE2 E5*00            [12] 3092 	mov	a,_bp
      000EE4 24 19            [12] 3093 	add	a,#0x19
      000EE6 FF               [12] 3094 	mov	r7,a
      000EE7 7E 00            [12] 3095 	mov	r6,#0x00
      000EE9 7D 40            [12] 3096 	mov	r5,#0x40
      000EEB E5*00            [12] 3097 	mov	a,_bp
      000EED 24 07            [12] 3098 	add	a,#0x07
      000EEF F8               [12] 3099 	mov	r0,a
      000EF0 86 82            [24] 3100 	mov	dpl,@r0
      000EF2 08               [12] 3101 	inc	r0
      000EF3 86 83            [24] 3102 	mov	dph,@r0
      000EF5 08               [12] 3103 	inc	r0
      000EF6 86 F0            [24] 3104 	mov	b,@r0
      000EF8 12r00r00         [24] 3105 	lcall	__gptrget
      000EFB FA               [12] 3106 	mov	r2,a
      000EFC A3               [24] 3107 	inc	dptr
      000EFD 12r00r00         [24] 3108 	lcall	__gptrget
      000F00 FB               [12] 3109 	mov	r3,a
      000F01 A3               [24] 3110 	inc	dptr
      000F02 12r00r00         [24] 3111 	lcall	__gptrget
      000F05 FC               [12] 3112 	mov	r4,a
      000F06 C0 07            [24] 3113 	push	ar7
      000F08 C0 06            [24] 3114 	push	ar6
      000F0A C0 05            [24] 3115 	push	ar5
      000F0C 8A 82            [24] 3116 	mov	dpl,r2
      000F0E 8B 83            [24] 3117 	mov	dph,r3
      000F10 8C F0            [24] 3118 	mov	b,r4
      000F12 12r00r00         [24] 3119 	lcall	_stack_pop
      000F15 AB 82            [24] 3120 	mov	r3,dpl
      000F17 AC 83            [24] 3121 	mov	r4,dph
      000F19 15 81            [12] 3122 	dec	sp
      000F1B 15 81            [12] 3123 	dec	sp
      000F1D 15 81            [12] 3124 	dec	sp
      000F1F EB               [12] 3125 	mov	a,r3
      000F20 4C               [12] 3126 	orl	a,r4
      000F21 70 63            [24] 3127 	jnz	00116$
                                   3128 ;	calc.c:171: (void)stack_push(ctx->ps, d0);
      000F23 E5*00            [12] 3129 	mov	a,_bp
      000F25 24 07            [12] 3130 	add	a,#0x07
      000F27 F8               [12] 3131 	mov	r0,a
      000F28 86 82            [24] 3132 	mov	dpl,@r0
      000F2A 08               [12] 3133 	inc	r0
      000F2B 86 83            [24] 3134 	mov	dph,@r0
      000F2D 08               [12] 3135 	inc	r0
      000F2E 86 F0            [24] 3136 	mov	b,@r0
      000F30 12r00r00         [24] 3137 	lcall	__gptrget
      000F33 FA               [12] 3138 	mov	r2,a
      000F34 A3               [24] 3139 	inc	dptr
      000F35 12r00r00         [24] 3140 	lcall	__gptrget
      000F38 FB               [12] 3141 	mov	r3,a
      000F39 A3               [24] 3142 	inc	dptr
      000F3A 12r00r00         [24] 3143 	lcall	__gptrget
      000F3D FC               [12] 3144 	mov	r4,a
      000F3E E5*00            [12] 3145 	mov	a,_bp
      000F40 24 15            [12] 3146 	add	a,#0x15
      000F42 F8               [12] 3147 	mov	r0,a
      000F43 E6               [12] 3148 	mov	a,@r0
      000F44 C0 E0            [24] 3149 	push	acc
      000F46 08               [12] 3150 	inc	r0
      000F47 E6               [12] 3151 	mov	a,@r0
      000F48 C0 E0            [24] 3152 	push	acc
      000F4A 08               [12] 3153 	inc	r0
      000F4B E6               [12] 3154 	mov	a,@r0
      000F4C C0 E0            [24] 3155 	push	acc
      000F4E 08               [12] 3156 	inc	r0
      000F4F E6               [12] 3157 	mov	a,@r0
      000F50 C0 E0            [24] 3158 	push	acc
      000F52 8A 82            [24] 3159 	mov	dpl,r2
      000F54 8B 83            [24] 3160 	mov	dph,r3
      000F56 8C F0            [24] 3161 	mov	b,r4
      000F58 12r00r00         [24] 3162 	lcall	_stack_push
      000F5B E5 81            [12] 3163 	mov	a,sp
      000F5D 24 FC            [12] 3164 	add	a,#0xfc
      000F5F F5 81            [12] 3165 	mov	sp,a
                                   3166 ;	calc.c:172: printstr("\r\nstack underflow\r\n");
      000F61 7Fr4E            [12] 3167 	mov	r7,#___str_10
      000F63 7Es00            [12] 3168 	mov	r6,#(___str_10 >> 8)
      000F65 7D 80            [12] 3169 	mov	r5,#0x80
                                   3170 ;	calc.c:59: return;
      000F67                       3171 00393$:
                                   3172 ;	calc.c:57: for (; *s; s++) putchar(*s);
      000F67 8F 82            [24] 3173 	mov	dpl,r7
      000F69 8E 83            [24] 3174 	mov	dph,r6
      000F6B 8D F0            [24] 3175 	mov	b,r5
      000F6D 12r00r00         [24] 3176 	lcall	__gptrget
      000F70 FC               [12] 3177 	mov	r4,a
      000F71 70 03            [24] 3178 	jnz	01293$
      000F73 02r2BrA4         [24] 3179 	ljmp	00249$
      000F76                       3180 01293$:
      000F76 7B 00            [12] 3181 	mov	r3,#0x00
      000F78 8C 82            [24] 3182 	mov	dpl,r4
      000F7A 8B 83            [24] 3183 	mov	dph,r3
      000F7C 12r00r00         [24] 3184 	lcall	_putchar
      000F7F 0F               [12] 3185 	inc	r7
                                   3186 ;	calc.c:172: printstr("\r\nstack underflow\r\n");
      000F80 BF 00 E4         [24] 3187 	cjne	r7,#0x00,00393$
      000F83 0E               [12] 3188 	inc	r6
      000F84 80 E1            [24] 3189 	sjmp	00393$
      000F86                       3190 00116$:
                                   3191 ;	calc.c:174: (void)stack_push(ctx->ps, d0);
      000F86 E5*00            [12] 3192 	mov	a,_bp
      000F88 24 07            [12] 3193 	add	a,#0x07
      000F8A F8               [12] 3194 	mov	r0,a
      000F8B 86 82            [24] 3195 	mov	dpl,@r0
      000F8D 08               [12] 3196 	inc	r0
      000F8E 86 83            [24] 3197 	mov	dph,@r0
      000F90 08               [12] 3198 	inc	r0
      000F91 86 F0            [24] 3199 	mov	b,@r0
      000F93 12r00r00         [24] 3200 	lcall	__gptrget
      000F96 FA               [12] 3201 	mov	r2,a
      000F97 A3               [24] 3202 	inc	dptr
      000F98 12r00r00         [24] 3203 	lcall	__gptrget
      000F9B FB               [12] 3204 	mov	r3,a
      000F9C A3               [24] 3205 	inc	dptr
      000F9D 12r00r00         [24] 3206 	lcall	__gptrget
      000FA0 FC               [12] 3207 	mov	r4,a
      000FA1 E5*00            [12] 3208 	mov	a,_bp
      000FA3 24 15            [12] 3209 	add	a,#0x15
      000FA5 F8               [12] 3210 	mov	r0,a
      000FA6 E6               [12] 3211 	mov	a,@r0
      000FA7 C0 E0            [24] 3212 	push	acc
      000FA9 08               [12] 3213 	inc	r0
      000FAA E6               [12] 3214 	mov	a,@r0
      000FAB C0 E0            [24] 3215 	push	acc
      000FAD 08               [12] 3216 	inc	r0
      000FAE E6               [12] 3217 	mov	a,@r0
      000FAF C0 E0            [24] 3218 	push	acc
      000FB1 08               [12] 3219 	inc	r0
      000FB2 E6               [12] 3220 	mov	a,@r0
      000FB3 C0 E0            [24] 3221 	push	acc
      000FB5 8A 82            [24] 3222 	mov	dpl,r2
      000FB7 8B 83            [24] 3223 	mov	dph,r3
      000FB9 8C F0            [24] 3224 	mov	b,r4
      000FBB 12r00r00         [24] 3225 	lcall	_stack_push
      000FBE E5 81            [12] 3226 	mov	a,sp
      000FC0 24 FC            [12] 3227 	add	a,#0xfc
      000FC2 F5 81            [12] 3228 	mov	sp,a
                                   3229 ;	calc.c:175: (void)stack_push(ctx->ps, d1);
      000FC4 E5*00            [12] 3230 	mov	a,_bp
      000FC6 24 07            [12] 3231 	add	a,#0x07
      000FC8 F8               [12] 3232 	mov	r0,a
      000FC9 86 82            [24] 3233 	mov	dpl,@r0
      000FCB 08               [12] 3234 	inc	r0
      000FCC 86 83            [24] 3235 	mov	dph,@r0
      000FCE 08               [12] 3236 	inc	r0
      000FCF 86 F0            [24] 3237 	mov	b,@r0
      000FD1 12r00r00         [24] 3238 	lcall	__gptrget
      000FD4 FA               [12] 3239 	mov	r2,a
      000FD5 A3               [24] 3240 	inc	dptr
      000FD6 12r00r00         [24] 3241 	lcall	__gptrget
      000FD9 FB               [12] 3242 	mov	r3,a
      000FDA A3               [24] 3243 	inc	dptr
      000FDB 12r00r00         [24] 3244 	lcall	__gptrget
      000FDE FC               [12] 3245 	mov	r4,a
      000FDF E5*00            [12] 3246 	mov	a,_bp
      000FE1 24 19            [12] 3247 	add	a,#0x19
      000FE3 F8               [12] 3248 	mov	r0,a
      000FE4 E6               [12] 3249 	mov	a,@r0
      000FE5 C0 E0            [24] 3250 	push	acc
      000FE7 08               [12] 3251 	inc	r0
      000FE8 E6               [12] 3252 	mov	a,@r0
      000FE9 C0 E0            [24] 3253 	push	acc
      000FEB 08               [12] 3254 	inc	r0
      000FEC E6               [12] 3255 	mov	a,@r0
      000FED C0 E0            [24] 3256 	push	acc
      000FEF 08               [12] 3257 	inc	r0
      000FF0 E6               [12] 3258 	mov	a,@r0
      000FF1 C0 E0            [24] 3259 	push	acc
      000FF3 8A 82            [24] 3260 	mov	dpl,r2
      000FF5 8B 83            [24] 3261 	mov	dph,r3
      000FF7 8C F0            [24] 3262 	mov	b,r4
      000FF9 12r00r00         [24] 3263 	lcall	_stack_push
      000FFC E5 81            [12] 3264 	mov	a,sp
      000FFE 24 FC            [12] 3265 	add	a,#0xfc
      001000 F5 81            [12] 3266 	mov	sp,a
                                   3267 ;	calc.c:177: break;
      001002 02r2BrA4         [24] 3268 	ljmp	00249$
                                   3269 ;	calc.c:178: case 'm':
      001005                       3270 00121$:
                                   3271 ;	calc.c:179: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      001005 E5*00            [12] 3272 	mov	a,_bp
      001007 24 15            [12] 3273 	add	a,#0x15
      001009 FF               [12] 3274 	mov	r7,a
      00100A 7E 00            [12] 3275 	mov	r6,#0x00
      00100C 7D 40            [12] 3276 	mov	r5,#0x40
      00100E E5*00            [12] 3277 	mov	a,_bp
      001010 24 12            [12] 3278 	add	a,#0x12
      001012 F8               [12] 3279 	mov	r0,a
      001013 E5*00            [12] 3280 	mov	a,_bp
      001015 24 07            [12] 3281 	add	a,#0x07
      001017 F9               [12] 3282 	mov	r1,a
      001018 74 11            [12] 3283 	mov	a,#0x11
      00101A 26               [12] 3284 	add	a,@r0
      00101B F7               [12] 3285 	mov	@r1,a
      00101C 74 40            [12] 3286 	mov	a,#0x40
      00101E 08               [12] 3287 	inc	r0
      00101F 36               [12] 3288 	addc	a,@r0
      001020 09               [12] 3289 	inc	r1
      001021 F7               [12] 3290 	mov	@r1,a
      001022 08               [12] 3291 	inc	r0
      001023 09               [12] 3292 	inc	r1
      001024 E6               [12] 3293 	mov	a,@r0
      001025 F7               [12] 3294 	mov	@r1,a
      001026 E5*00            [12] 3295 	mov	a,_bp
      001028 24 07            [12] 3296 	add	a,#0x07
      00102A F8               [12] 3297 	mov	r0,a
      00102B 86 82            [24] 3298 	mov	dpl,@r0
      00102D 08               [12] 3299 	inc	r0
      00102E 86 83            [24] 3300 	mov	dph,@r0
      001030 08               [12] 3301 	inc	r0
      001031 86 F0            [24] 3302 	mov	b,@r0
      001033 12r00r00         [24] 3303 	lcall	__gptrget
      001036 FA               [12] 3304 	mov	r2,a
      001037 A3               [24] 3305 	inc	dptr
      001038 12r00r00         [24] 3306 	lcall	__gptrget
      00103B FB               [12] 3307 	mov	r3,a
      00103C A3               [24] 3308 	inc	dptr
      00103D 12r00r00         [24] 3309 	lcall	__gptrget
      001040 FC               [12] 3310 	mov	r4,a
      001041 C0 07            [24] 3311 	push	ar7
      001043 C0 06            [24] 3312 	push	ar6
      001045 C0 05            [24] 3313 	push	ar5
      001047 8A 82            [24] 3314 	mov	dpl,r2
      001049 8B 83            [24] 3315 	mov	dph,r3
      00104B 8C F0            [24] 3316 	mov	b,r4
      00104D 12r00r00         [24] 3317 	lcall	_stack_pop
      001050 AB 82            [24] 3318 	mov	r3,dpl
      001052 AC 83            [24] 3319 	mov	r4,dph
      001054 15 81            [12] 3320 	dec	sp
      001056 15 81            [12] 3321 	dec	sp
      001058 15 81            [12] 3322 	dec	sp
      00105A EB               [12] 3323 	mov	a,r3
      00105B 4C               [12] 3324 	orl	a,r4
      00105C 70 25            [24] 3325 	jnz	00125$
      00105E 7Fr4E            [12] 3326 	mov	r7,#___str_10
      001060 7Es00            [12] 3327 	mov	r6,#(___str_10 >> 8)
      001062 7D 80            [12] 3328 	mov	r5,#0x80
                                   3329 ;	calc.c:59: return;
      001064                       3330 00396$:
                                   3331 ;	calc.c:57: for (; *s; s++) putchar(*s);
      001064 8F 82            [24] 3332 	mov	dpl,r7
      001066 8E 83            [24] 3333 	mov	dph,r6
      001068 8D F0            [24] 3334 	mov	b,r5
      00106A 12r00r00         [24] 3335 	lcall	__gptrget
      00106D FC               [12] 3336 	mov	r4,a
      00106E 70 03            [24] 3337 	jnz	01296$
      001070 02r2BrA4         [24] 3338 	ljmp	00249$
      001073                       3339 01296$:
      001073 7B 00            [12] 3340 	mov	r3,#0x00
      001075 8C 82            [24] 3341 	mov	dpl,r4
      001077 8B 83            [24] 3342 	mov	dph,r3
      001079 12r00r00         [24] 3343 	lcall	_putchar
      00107C 0F               [12] 3344 	inc	r7
                                   3345 ;	calc.c:179: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      00107D BF 00 E4         [24] 3346 	cjne	r7,#0x00,00396$
      001080 0E               [12] 3347 	inc	r6
      001081 80 E1            [24] 3348 	sjmp	00396$
      001083                       3349 00125$:
                                   3350 ;	calc.c:181: if (!stack_push(ctx->ss, d0)) {
      001083 E5*00            [12] 3351 	mov	a,_bp
      001085 24 12            [12] 3352 	add	a,#0x12
      001087 F8               [12] 3353 	mov	r0,a
      001088 74 14            [12] 3354 	mov	a,#0x14
      00108A 26               [12] 3355 	add	a,@r0
      00108B FA               [12] 3356 	mov	r2,a
      00108C 74 40            [12] 3357 	mov	a,#0x40
      00108E 08               [12] 3358 	inc	r0
      00108F 36               [12] 3359 	addc	a,@r0
      001090 FB               [12] 3360 	mov	r3,a
      001091 08               [12] 3361 	inc	r0
      001092 86 04            [24] 3362 	mov	ar4,@r0
      001094 8A 82            [24] 3363 	mov	dpl,r2
      001096 8B 83            [24] 3364 	mov	dph,r3
      001098 8C F0            [24] 3365 	mov	b,r4
      00109A 12r00r00         [24] 3366 	lcall	__gptrget
      00109D FA               [12] 3367 	mov	r2,a
      00109E A3               [24] 3368 	inc	dptr
      00109F 12r00r00         [24] 3369 	lcall	__gptrget
      0010A2 FB               [12] 3370 	mov	r3,a
      0010A3 A3               [24] 3371 	inc	dptr
      0010A4 12r00r00         [24] 3372 	lcall	__gptrget
      0010A7 FC               [12] 3373 	mov	r4,a
      0010A8 E5*00            [12] 3374 	mov	a,_bp
      0010AA 24 15            [12] 3375 	add	a,#0x15
      0010AC F8               [12] 3376 	mov	r0,a
      0010AD E6               [12] 3377 	mov	a,@r0
      0010AE C0 E0            [24] 3378 	push	acc
      0010B0 08               [12] 3379 	inc	r0
      0010B1 E6               [12] 3380 	mov	a,@r0
      0010B2 C0 E0            [24] 3381 	push	acc
      0010B4 08               [12] 3382 	inc	r0
      0010B5 E6               [12] 3383 	mov	a,@r0
      0010B6 C0 E0            [24] 3384 	push	acc
      0010B8 08               [12] 3385 	inc	r0
      0010B9 E6               [12] 3386 	mov	a,@r0
      0010BA C0 E0            [24] 3387 	push	acc
      0010BC 8A 82            [24] 3388 	mov	dpl,r2
      0010BE 8B 83            [24] 3389 	mov	dph,r3
      0010C0 8C F0            [24] 3390 	mov	b,r4
      0010C2 12r00r00         [24] 3391 	lcall	_stack_push
      0010C5 AB 82            [24] 3392 	mov	r3,dpl
      0010C7 AC 83            [24] 3393 	mov	r4,dph
      0010C9 E5 81            [12] 3394 	mov	a,sp
      0010CB 24 FC            [12] 3395 	add	a,#0xfc
      0010CD F5 81            [12] 3396 	mov	sp,a
      0010CF EB               [12] 3397 	mov	a,r3
      0010D0 4C               [12] 3398 	orl	a,r4
      0010D1 60 03            [24] 3399 	jz	01298$
      0010D3 02r2BrA4         [24] 3400 	ljmp	00249$
      0010D6                       3401 01298$:
                                   3402 ;	calc.c:182: printstr("\r\nsecondary stack overflow\r\n");
      0010D6 7Fr62            [12] 3403 	mov	r7,#___str_11
      0010D8 7Es00            [12] 3404 	mov	r6,#(___str_11 >> 8)
      0010DA 7D 80            [12] 3405 	mov	r5,#0x80
                                   3406 ;	calc.c:59: return;
      0010DC                       3407 00399$:
                                   3408 ;	calc.c:57: for (; *s; s++) putchar(*s);
      0010DC 8F 82            [24] 3409 	mov	dpl,r7
      0010DE 8E 83            [24] 3410 	mov	dph,r6
      0010E0 8D F0            [24] 3411 	mov	b,r5
      0010E2 12r00r00         [24] 3412 	lcall	__gptrget
      0010E5 FC               [12] 3413 	mov	r4,a
      0010E6 60 10            [24] 3414 	jz	00285$
      0010E8 7B 00            [12] 3415 	mov	r3,#0x00
      0010EA 8C 82            [24] 3416 	mov	dpl,r4
      0010EC 8B 83            [24] 3417 	mov	dph,r3
      0010EE 12r00r00         [24] 3418 	lcall	_putchar
      0010F1 0F               [12] 3419 	inc	r7
                                   3420 ;	calc.c:182: printstr("\r\nsecondary stack overflow\r\n");
      0010F2 BF 00 E7         [24] 3421 	cjne	r7,#0x00,00399$
      0010F5 0E               [12] 3422 	inc	r6
      0010F6 80 E4            [24] 3423 	sjmp	00399$
      0010F8                       3424 00285$:
                                   3425 ;	calc.c:183: (void)stack_push(ctx->ps, d0);
      0010F8 E5*00            [12] 3426 	mov	a,_bp
      0010FA 24 07            [12] 3427 	add	a,#0x07
      0010FC F8               [12] 3428 	mov	r0,a
      0010FD 86 82            [24] 3429 	mov	dpl,@r0
      0010FF 08               [12] 3430 	inc	r0
      001100 86 83            [24] 3431 	mov	dph,@r0
      001102 08               [12] 3432 	inc	r0
      001103 86 F0            [24] 3433 	mov	b,@r0
      001105 12r00r00         [24] 3434 	lcall	__gptrget
      001108 FA               [12] 3435 	mov	r2,a
      001109 A3               [24] 3436 	inc	dptr
      00110A 12r00r00         [24] 3437 	lcall	__gptrget
      00110D FB               [12] 3438 	mov	r3,a
      00110E A3               [24] 3439 	inc	dptr
      00110F 12r00r00         [24] 3440 	lcall	__gptrget
      001112 FC               [12] 3441 	mov	r4,a
      001113 E5*00            [12] 3442 	mov	a,_bp
      001115 24 15            [12] 3443 	add	a,#0x15
      001117 F8               [12] 3444 	mov	r0,a
      001118 E6               [12] 3445 	mov	a,@r0
      001119 C0 E0            [24] 3446 	push	acc
      00111B 08               [12] 3447 	inc	r0
      00111C E6               [12] 3448 	mov	a,@r0
      00111D C0 E0            [24] 3449 	push	acc
      00111F 08               [12] 3450 	inc	r0
      001120 E6               [12] 3451 	mov	a,@r0
      001121 C0 E0            [24] 3452 	push	acc
      001123 08               [12] 3453 	inc	r0
      001124 E6               [12] 3454 	mov	a,@r0
      001125 C0 E0            [24] 3455 	push	acc
      001127 8A 82            [24] 3456 	mov	dpl,r2
      001129 8B 83            [24] 3457 	mov	dph,r3
      00112B 8C F0            [24] 3458 	mov	b,r4
      00112D 12r00r00         [24] 3459 	lcall	_stack_push
      001130 E5 81            [12] 3460 	mov	a,sp
      001132 24 FC            [12] 3461 	add	a,#0xfc
      001134 F5 81            [12] 3462 	mov	sp,a
                                   3463 ;	calc.c:186: break;
      001136 02r2BrA4         [24] 3464 	ljmp	00249$
                                   3465 ;	calc.c:187: case 'M':
      001139                       3466 00127$:
                                   3467 ;	calc.c:188: if (!stack_pop(ctx->ss, &d0)) printstr("\r\nsecondary stack underflow\r\n");
      001139 E5*00            [12] 3468 	mov	a,_bp
      00113B 24 15            [12] 3469 	add	a,#0x15
      00113D FF               [12] 3470 	mov	r7,a
      00113E 7E 00            [12] 3471 	mov	r6,#0x00
      001140 7D 40            [12] 3472 	mov	r5,#0x40
      001142 E5*00            [12] 3473 	mov	a,_bp
      001144 24 12            [12] 3474 	add	a,#0x12
      001146 F8               [12] 3475 	mov	r0,a
      001147 E5*00            [12] 3476 	mov	a,_bp
      001149 24 07            [12] 3477 	add	a,#0x07
      00114B F9               [12] 3478 	mov	r1,a
      00114C 74 14            [12] 3479 	mov	a,#0x14
      00114E 26               [12] 3480 	add	a,@r0
      00114F F7               [12] 3481 	mov	@r1,a
      001150 74 40            [12] 3482 	mov	a,#0x40
      001152 08               [12] 3483 	inc	r0
      001153 36               [12] 3484 	addc	a,@r0
      001154 09               [12] 3485 	inc	r1
      001155 F7               [12] 3486 	mov	@r1,a
      001156 08               [12] 3487 	inc	r0
      001157 09               [12] 3488 	inc	r1
      001158 E6               [12] 3489 	mov	a,@r0
      001159 F7               [12] 3490 	mov	@r1,a
      00115A E5*00            [12] 3491 	mov	a,_bp
      00115C 24 07            [12] 3492 	add	a,#0x07
      00115E F8               [12] 3493 	mov	r0,a
      00115F 86 82            [24] 3494 	mov	dpl,@r0
      001161 08               [12] 3495 	inc	r0
      001162 86 83            [24] 3496 	mov	dph,@r0
      001164 08               [12] 3497 	inc	r0
      001165 86 F0            [24] 3498 	mov	b,@r0
      001167 12r00r00         [24] 3499 	lcall	__gptrget
      00116A FA               [12] 3500 	mov	r2,a
      00116B A3               [24] 3501 	inc	dptr
      00116C 12r00r00         [24] 3502 	lcall	__gptrget
      00116F FB               [12] 3503 	mov	r3,a
      001170 A3               [24] 3504 	inc	dptr
      001171 12r00r00         [24] 3505 	lcall	__gptrget
      001174 FC               [12] 3506 	mov	r4,a
      001175 C0 07            [24] 3507 	push	ar7
      001177 C0 06            [24] 3508 	push	ar6
      001179 C0 05            [24] 3509 	push	ar5
      00117B 8A 82            [24] 3510 	mov	dpl,r2
      00117D 8B 83            [24] 3511 	mov	dph,r3
      00117F 8C F0            [24] 3512 	mov	b,r4
      001181 12r00r00         [24] 3513 	lcall	_stack_pop
      001184 AB 82            [24] 3514 	mov	r3,dpl
      001186 AC 83            [24] 3515 	mov	r4,dph
      001188 15 81            [12] 3516 	dec	sp
      00118A 15 81            [12] 3517 	dec	sp
      00118C 15 81            [12] 3518 	dec	sp
      00118E EB               [12] 3519 	mov	a,r3
      00118F 4C               [12] 3520 	orl	a,r4
      001190 70 25            [24] 3521 	jnz	00131$
      001192 7Fr7F            [12] 3522 	mov	r7,#___str_12
      001194 7Es00            [12] 3523 	mov	r6,#(___str_12 >> 8)
      001196 7D 80            [12] 3524 	mov	r5,#0x80
                                   3525 ;	calc.c:59: return;
      001198                       3526 00402$:
                                   3527 ;	calc.c:57: for (; *s; s++) putchar(*s);
      001198 8F 82            [24] 3528 	mov	dpl,r7
      00119A 8E 83            [24] 3529 	mov	dph,r6
      00119C 8D F0            [24] 3530 	mov	b,r5
      00119E 12r00r00         [24] 3531 	lcall	__gptrget
      0011A1 FC               [12] 3532 	mov	r4,a
      0011A2 70 03            [24] 3533 	jnz	01302$
      0011A4 02r2BrA4         [24] 3534 	ljmp	00249$
      0011A7                       3535 01302$:
      0011A7 7B 00            [12] 3536 	mov	r3,#0x00
      0011A9 8C 82            [24] 3537 	mov	dpl,r4
      0011AB 8B 83            [24] 3538 	mov	dph,r3
      0011AD 12r00r00         [24] 3539 	lcall	_putchar
      0011B0 0F               [12] 3540 	inc	r7
                                   3541 ;	calc.c:188: if (!stack_pop(ctx->ss, &d0)) printstr("\r\nsecondary stack underflow\r\n");
      0011B1 BF 00 E4         [24] 3542 	cjne	r7,#0x00,00402$
      0011B4 0E               [12] 3543 	inc	r6
      0011B5 80 E1            [24] 3544 	sjmp	00402$
      0011B7                       3545 00131$:
                                   3546 ;	calc.c:190: if (!stack_push(ctx->ps, d0)) {
      0011B7 E5*00            [12] 3547 	mov	a,_bp
      0011B9 24 12            [12] 3548 	add	a,#0x12
      0011BB F8               [12] 3549 	mov	r0,a
      0011BC 74 11            [12] 3550 	mov	a,#0x11
      0011BE 26               [12] 3551 	add	a,@r0
      0011BF FA               [12] 3552 	mov	r2,a
      0011C0 74 40            [12] 3553 	mov	a,#0x40
      0011C2 08               [12] 3554 	inc	r0
      0011C3 36               [12] 3555 	addc	a,@r0
      0011C4 FB               [12] 3556 	mov	r3,a
      0011C5 08               [12] 3557 	inc	r0
      0011C6 86 04            [24] 3558 	mov	ar4,@r0
      0011C8 8A 82            [24] 3559 	mov	dpl,r2
      0011CA 8B 83            [24] 3560 	mov	dph,r3
      0011CC 8C F0            [24] 3561 	mov	b,r4
      0011CE 12r00r00         [24] 3562 	lcall	__gptrget
      0011D1 FA               [12] 3563 	mov	r2,a
      0011D2 A3               [24] 3564 	inc	dptr
      0011D3 12r00r00         [24] 3565 	lcall	__gptrget
      0011D6 FB               [12] 3566 	mov	r3,a
      0011D7 A3               [24] 3567 	inc	dptr
      0011D8 12r00r00         [24] 3568 	lcall	__gptrget
      0011DB FC               [12] 3569 	mov	r4,a
      0011DC E5*00            [12] 3570 	mov	a,_bp
      0011DE 24 15            [12] 3571 	add	a,#0x15
      0011E0 F8               [12] 3572 	mov	r0,a
      0011E1 E6               [12] 3573 	mov	a,@r0
      0011E2 C0 E0            [24] 3574 	push	acc
      0011E4 08               [12] 3575 	inc	r0
      0011E5 E6               [12] 3576 	mov	a,@r0
      0011E6 C0 E0            [24] 3577 	push	acc
      0011E8 08               [12] 3578 	inc	r0
      0011E9 E6               [12] 3579 	mov	a,@r0
      0011EA C0 E0            [24] 3580 	push	acc
      0011EC 08               [12] 3581 	inc	r0
      0011ED E6               [12] 3582 	mov	a,@r0
      0011EE C0 E0            [24] 3583 	push	acc
      0011F0 8A 82            [24] 3584 	mov	dpl,r2
      0011F2 8B 83            [24] 3585 	mov	dph,r3
      0011F4 8C F0            [24] 3586 	mov	b,r4
      0011F6 12r00r00         [24] 3587 	lcall	_stack_push
      0011F9 AB 82            [24] 3588 	mov	r3,dpl
      0011FB AC 83            [24] 3589 	mov	r4,dph
      0011FD E5 81            [12] 3590 	mov	a,sp
      0011FF 24 FC            [12] 3591 	add	a,#0xfc
      001201 F5 81            [12] 3592 	mov	sp,a
      001203 EB               [12] 3593 	mov	a,r3
      001204 4C               [12] 3594 	orl	a,r4
      001205 60 03            [24] 3595 	jz	01304$
      001207 02r2BrA4         [24] 3596 	ljmp	00249$
      00120A                       3597 01304$:
                                   3598 ;	calc.c:191: printstr("\r\nstack overflow\r\n");
      00120A 7Fr9D            [12] 3599 	mov	r7,#___str_13
      00120C 7Es00            [12] 3600 	mov	r6,#(___str_13 >> 8)
      00120E 7D 80            [12] 3601 	mov	r5,#0x80
                                   3602 ;	calc.c:59: return;
      001210                       3603 00405$:
                                   3604 ;	calc.c:57: for (; *s; s++) putchar(*s);
      001210 8F 82            [24] 3605 	mov	dpl,r7
      001212 8E 83            [24] 3606 	mov	dph,r6
      001214 8D F0            [24] 3607 	mov	b,r5
      001216 12r00r00         [24] 3608 	lcall	__gptrget
      001219 FC               [12] 3609 	mov	r4,a
      00121A 60 10            [24] 3610 	jz	00289$
      00121C 7B 00            [12] 3611 	mov	r3,#0x00
      00121E 8C 82            [24] 3612 	mov	dpl,r4
      001220 8B 83            [24] 3613 	mov	dph,r3
      001222 12r00r00         [24] 3614 	lcall	_putchar
      001225 0F               [12] 3615 	inc	r7
                                   3616 ;	calc.c:191: printstr("\r\nstack overflow\r\n");
      001226 BF 00 E7         [24] 3617 	cjne	r7,#0x00,00405$
      001229 0E               [12] 3618 	inc	r6
      00122A 80 E4            [24] 3619 	sjmp	00405$
      00122C                       3620 00289$:
                                   3621 ;	calc.c:192: (void)stack_push(ctx->ss, d0);
      00122C E5*00            [12] 3622 	mov	a,_bp
      00122E 24 07            [12] 3623 	add	a,#0x07
      001230 F8               [12] 3624 	mov	r0,a
      001231 86 82            [24] 3625 	mov	dpl,@r0
      001233 08               [12] 3626 	inc	r0
      001234 86 83            [24] 3627 	mov	dph,@r0
      001236 08               [12] 3628 	inc	r0
      001237 86 F0            [24] 3629 	mov	b,@r0
      001239 12r00r00         [24] 3630 	lcall	__gptrget
      00123C FA               [12] 3631 	mov	r2,a
      00123D A3               [24] 3632 	inc	dptr
      00123E 12r00r00         [24] 3633 	lcall	__gptrget
      001241 FB               [12] 3634 	mov	r3,a
      001242 A3               [24] 3635 	inc	dptr
      001243 12r00r00         [24] 3636 	lcall	__gptrget
      001246 FC               [12] 3637 	mov	r4,a
      001247 E5*00            [12] 3638 	mov	a,_bp
      001249 24 15            [12] 3639 	add	a,#0x15
      00124B F8               [12] 3640 	mov	r0,a
      00124C E6               [12] 3641 	mov	a,@r0
      00124D C0 E0            [24] 3642 	push	acc
      00124F 08               [12] 3643 	inc	r0
      001250 E6               [12] 3644 	mov	a,@r0
      001251 C0 E0            [24] 3645 	push	acc
      001253 08               [12] 3646 	inc	r0
      001254 E6               [12] 3647 	mov	a,@r0
      001255 C0 E0            [24] 3648 	push	acc
      001257 08               [12] 3649 	inc	r0
      001258 E6               [12] 3650 	mov	a,@r0
      001259 C0 E0            [24] 3651 	push	acc
      00125B 8A 82            [24] 3652 	mov	dpl,r2
      00125D 8B 83            [24] 3653 	mov	dph,r3
      00125F 8C F0            [24] 3654 	mov	b,r4
      001261 12r00r00         [24] 3655 	lcall	_stack_push
      001264 E5 81            [12] 3656 	mov	a,sp
      001266 24 FC            [12] 3657 	add	a,#0xfc
      001268 F5 81            [12] 3658 	mov	sp,a
                                   3659 ;	calc.c:195: break;
      00126A 02r2BrA4         [24] 3660 	ljmp	00249$
                                   3661 ;	calc.c:196: case 'u':
      00126D                       3662 00133$:
                                   3663 ;	calc.c:197: if (!stack_peek(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      00126D E5*00            [12] 3664 	mov	a,_bp
      00126F 24 15            [12] 3665 	add	a,#0x15
      001271 FF               [12] 3666 	mov	r7,a
      001272 7E 00            [12] 3667 	mov	r6,#0x00
      001274 7D 40            [12] 3668 	mov	r5,#0x40
      001276 E5*00            [12] 3669 	mov	a,_bp
      001278 24 12            [12] 3670 	add	a,#0x12
      00127A F8               [12] 3671 	mov	r0,a
      00127B 74 11            [12] 3672 	mov	a,#0x11
      00127D 26               [12] 3673 	add	a,@r0
      00127E FA               [12] 3674 	mov	r2,a
      00127F ED               [12] 3675 	mov	a,r5
      001280 08               [12] 3676 	inc	r0
      001281 36               [12] 3677 	addc	a,@r0
      001282 FB               [12] 3678 	mov	r3,a
      001283 08               [12] 3679 	inc	r0
      001284 86 04            [24] 3680 	mov	ar4,@r0
      001286 8A 82            [24] 3681 	mov	dpl,r2
      001288 8B 83            [24] 3682 	mov	dph,r3
      00128A 8C F0            [24] 3683 	mov	b,r4
      00128C 12r00r00         [24] 3684 	lcall	__gptrget
      00128F FA               [12] 3685 	mov	r2,a
      001290 A3               [24] 3686 	inc	dptr
      001291 12r00r00         [24] 3687 	lcall	__gptrget
      001294 FB               [12] 3688 	mov	r3,a
      001295 A3               [24] 3689 	inc	dptr
      001296 12r00r00         [24] 3690 	lcall	__gptrget
      001299 FC               [12] 3691 	mov	r4,a
      00129A C0 07            [24] 3692 	push	ar7
      00129C C0 06            [24] 3693 	push	ar6
      00129E C0 05            [24] 3694 	push	ar5
      0012A0 8A 82            [24] 3695 	mov	dpl,r2
      0012A2 8B 83            [24] 3696 	mov	dph,r3
      0012A4 8C F0            [24] 3697 	mov	b,r4
      0012A6 12r00r00         [24] 3698 	lcall	_stack_peek
      0012A9 AB 82            [24] 3699 	mov	r3,dpl
      0012AB AC 83            [24] 3700 	mov	r4,dph
      0012AD 15 81            [12] 3701 	dec	sp
      0012AF 15 81            [12] 3702 	dec	sp
      0012B1 15 81            [12] 3703 	dec	sp
      0012B3 EB               [12] 3704 	mov	a,r3
      0012B4 4C               [12] 3705 	orl	a,r4
      0012B5 70 25            [24] 3706 	jnz	00137$
      0012B7 7Fr4E            [12] 3707 	mov	r7,#___str_10
      0012B9 7Es00            [12] 3708 	mov	r6,#(___str_10 >> 8)
      0012BB 7D 80            [12] 3709 	mov	r5,#0x80
                                   3710 ;	calc.c:59: return;
      0012BD                       3711 00408$:
                                   3712 ;	calc.c:57: for (; *s; s++) putchar(*s);
      0012BD 8F 82            [24] 3713 	mov	dpl,r7
      0012BF 8E 83            [24] 3714 	mov	dph,r6
      0012C1 8D F0            [24] 3715 	mov	b,r5
      0012C3 12r00r00         [24] 3716 	lcall	__gptrget
      0012C6 FC               [12] 3717 	mov	r4,a
      0012C7 70 03            [24] 3718 	jnz	01308$
      0012C9 02r2BrA4         [24] 3719 	ljmp	00249$
      0012CC                       3720 01308$:
      0012CC 7B 00            [12] 3721 	mov	r3,#0x00
      0012CE 8C 82            [24] 3722 	mov	dpl,r4
      0012D0 8B 83            [24] 3723 	mov	dph,r3
      0012D2 12r00r00         [24] 3724 	lcall	_putchar
      0012D5 0F               [12] 3725 	inc	r7
                                   3726 ;	calc.c:197: if (!stack_peek(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      0012D6 BF 00 E4         [24] 3727 	cjne	r7,#0x00,00408$
      0012D9 0E               [12] 3728 	inc	r6
      0012DA 80 E1            [24] 3729 	sjmp	00408$
      0012DC                       3730 00137$:
                                   3731 ;	calc.c:198: else if (!stack_push(ctx->ss, d0)) printstr("\r\nsecondary stack overflow\r\n");
      0012DC E5*00            [12] 3732 	mov	a,_bp
      0012DE 24 12            [12] 3733 	add	a,#0x12
      0012E0 F8               [12] 3734 	mov	r0,a
      0012E1 74 14            [12] 3735 	mov	a,#0x14
      0012E3 26               [12] 3736 	add	a,@r0
      0012E4 FA               [12] 3737 	mov	r2,a
      0012E5 74 40            [12] 3738 	mov	a,#0x40
      0012E7 08               [12] 3739 	inc	r0
      0012E8 36               [12] 3740 	addc	a,@r0
      0012E9 FB               [12] 3741 	mov	r3,a
      0012EA 08               [12] 3742 	inc	r0
      0012EB 86 04            [24] 3743 	mov	ar4,@r0
      0012ED 8A 82            [24] 3744 	mov	dpl,r2
      0012EF 8B 83            [24] 3745 	mov	dph,r3
      0012F1 8C F0            [24] 3746 	mov	b,r4
      0012F3 12r00r00         [24] 3747 	lcall	__gptrget
      0012F6 FA               [12] 3748 	mov	r2,a
      0012F7 A3               [24] 3749 	inc	dptr
      0012F8 12r00r00         [24] 3750 	lcall	__gptrget
      0012FB FB               [12] 3751 	mov	r3,a
      0012FC A3               [24] 3752 	inc	dptr
      0012FD 12r00r00         [24] 3753 	lcall	__gptrget
      001300 FC               [12] 3754 	mov	r4,a
      001301 E5*00            [12] 3755 	mov	a,_bp
      001303 24 15            [12] 3756 	add	a,#0x15
      001305 F8               [12] 3757 	mov	r0,a
      001306 E6               [12] 3758 	mov	a,@r0
      001307 C0 E0            [24] 3759 	push	acc
      001309 08               [12] 3760 	inc	r0
      00130A E6               [12] 3761 	mov	a,@r0
      00130B C0 E0            [24] 3762 	push	acc
      00130D 08               [12] 3763 	inc	r0
      00130E E6               [12] 3764 	mov	a,@r0
      00130F C0 E0            [24] 3765 	push	acc
      001311 08               [12] 3766 	inc	r0
      001312 E6               [12] 3767 	mov	a,@r0
      001313 C0 E0            [24] 3768 	push	acc
      001315 8A 82            [24] 3769 	mov	dpl,r2
      001317 8B 83            [24] 3770 	mov	dph,r3
      001319 8C F0            [24] 3771 	mov	b,r4
      00131B 12r00r00         [24] 3772 	lcall	_stack_push
      00131E AB 82            [24] 3773 	mov	r3,dpl
      001320 AC 83            [24] 3774 	mov	r4,dph
      001322 E5 81            [12] 3775 	mov	a,sp
      001324 24 FC            [12] 3776 	add	a,#0xfc
      001326 F5 81            [12] 3777 	mov	sp,a
      001328 EB               [12] 3778 	mov	a,r3
      001329 4C               [12] 3779 	orl	a,r4
      00132A 60 03            [24] 3780 	jz	01310$
      00132C 02r2BrA4         [24] 3781 	ljmp	00249$
      00132F                       3782 01310$:
      00132F 7Fr62            [12] 3783 	mov	r7,#___str_11
      001331 7Es00            [12] 3784 	mov	r6,#(___str_11 >> 8)
      001333 7D 80            [12] 3785 	mov	r5,#0x80
                                   3786 ;	calc.c:59: return;
      001335                       3787 00411$:
                                   3788 ;	calc.c:57: for (; *s; s++) putchar(*s);
      001335 8F 82            [24] 3789 	mov	dpl,r7
      001337 8E 83            [24] 3790 	mov	dph,r6
      001339 8D F0            [24] 3791 	mov	b,r5
      00133B 12r00r00         [24] 3792 	lcall	__gptrget
      00133E FC               [12] 3793 	mov	r4,a
      00133F 70 03            [24] 3794 	jnz	01311$
      001341 02r2BrA4         [24] 3795 	ljmp	00249$
      001344                       3796 01311$:
      001344 7B 00            [12] 3797 	mov	r3,#0x00
      001346 8C 82            [24] 3798 	mov	dpl,r4
      001348 8B 83            [24] 3799 	mov	dph,r3
      00134A 12r00r00         [24] 3800 	lcall	_putchar
      00134D 0F               [12] 3801 	inc	r7
                                   3802 ;	calc.c:200: case 'U':
      00134E BF 00 E4         [24] 3803 	cjne	r7,#0x00,00411$
      001351 0E               [12] 3804 	inc	r6
      001352 80 E1            [24] 3805 	sjmp	00411$
      001354                       3806 00139$:
                                   3807 ;	calc.c:201: if (!stack_peek(ctx->ss, &d0)) printstr("\r\nsecondary stack underflow\r\n");
      001354 E5*00            [12] 3808 	mov	a,_bp
      001356 24 15            [12] 3809 	add	a,#0x15
      001358 FF               [12] 3810 	mov	r7,a
      001359 7E 00            [12] 3811 	mov	r6,#0x00
      00135B 7D 40            [12] 3812 	mov	r5,#0x40
      00135D E5*00            [12] 3813 	mov	a,_bp
      00135F 24 12            [12] 3814 	add	a,#0x12
      001361 F8               [12] 3815 	mov	r0,a
      001362 74 14            [12] 3816 	mov	a,#0x14
      001364 26               [12] 3817 	add	a,@r0
      001365 FA               [12] 3818 	mov	r2,a
      001366 ED               [12] 3819 	mov	a,r5
      001367 08               [12] 3820 	inc	r0
      001368 36               [12] 3821 	addc	a,@r0
      001369 FB               [12] 3822 	mov	r3,a
      00136A 08               [12] 3823 	inc	r0
      00136B 86 04            [24] 3824 	mov	ar4,@r0
      00136D 8A 82            [24] 3825 	mov	dpl,r2
      00136F 8B 83            [24] 3826 	mov	dph,r3
      001371 8C F0            [24] 3827 	mov	b,r4
      001373 12r00r00         [24] 3828 	lcall	__gptrget
      001376 FA               [12] 3829 	mov	r2,a
      001377 A3               [24] 3830 	inc	dptr
      001378 12r00r00         [24] 3831 	lcall	__gptrget
      00137B FB               [12] 3832 	mov	r3,a
      00137C A3               [24] 3833 	inc	dptr
      00137D 12r00r00         [24] 3834 	lcall	__gptrget
      001380 FC               [12] 3835 	mov	r4,a
      001381 C0 07            [24] 3836 	push	ar7
      001383 C0 06            [24] 3837 	push	ar6
      001385 C0 05            [24] 3838 	push	ar5
      001387 8A 82            [24] 3839 	mov	dpl,r2
      001389 8B 83            [24] 3840 	mov	dph,r3
      00138B 8C F0            [24] 3841 	mov	b,r4
      00138D 12r00r00         [24] 3842 	lcall	_stack_peek
      001390 AB 82            [24] 3843 	mov	r3,dpl
      001392 AC 83            [24] 3844 	mov	r4,dph
      001394 15 81            [12] 3845 	dec	sp
      001396 15 81            [12] 3846 	dec	sp
      001398 15 81            [12] 3847 	dec	sp
      00139A EB               [12] 3848 	mov	a,r3
      00139B 4C               [12] 3849 	orl	a,r4
      00139C 70 25            [24] 3850 	jnz	00143$
      00139E 7Fr7F            [12] 3851 	mov	r7,#___str_12
      0013A0 7Es00            [12] 3852 	mov	r6,#(___str_12 >> 8)
      0013A2 7D 80            [12] 3853 	mov	r5,#0x80
                                   3854 ;	calc.c:59: return;
      0013A4                       3855 00414$:
                                   3856 ;	calc.c:57: for (; *s; s++) putchar(*s);
      0013A4 8F 82            [24] 3857 	mov	dpl,r7
      0013A6 8E 83            [24] 3858 	mov	dph,r6
      0013A8 8D F0            [24] 3859 	mov	b,r5
      0013AA 12r00r00         [24] 3860 	lcall	__gptrget
      0013AD FC               [12] 3861 	mov	r4,a
      0013AE 70 03            [24] 3862 	jnz	01314$
      0013B0 02r2BrA4         [24] 3863 	ljmp	00249$
      0013B3                       3864 01314$:
      0013B3 7B 00            [12] 3865 	mov	r3,#0x00
      0013B5 8C 82            [24] 3866 	mov	dpl,r4
      0013B7 8B 83            [24] 3867 	mov	dph,r3
      0013B9 12r00r00         [24] 3868 	lcall	_putchar
      0013BC 0F               [12] 3869 	inc	r7
                                   3870 ;	calc.c:201: if (!stack_peek(ctx->ss, &d0)) printstr("\r\nsecondary stack underflow\r\n");
      0013BD BF 00 E4         [24] 3871 	cjne	r7,#0x00,00414$
      0013C0 0E               [12] 3872 	inc	r6
      0013C1 80 E1            [24] 3873 	sjmp	00414$
      0013C3                       3874 00143$:
                                   3875 ;	calc.c:202: else if (!stack_push(ctx->ps, d0)) printstr("\r\nstack overflow\r\n");
      0013C3 E5*00            [12] 3876 	mov	a,_bp
      0013C5 24 12            [12] 3877 	add	a,#0x12
      0013C7 F8               [12] 3878 	mov	r0,a
      0013C8 74 11            [12] 3879 	mov	a,#0x11
      0013CA 26               [12] 3880 	add	a,@r0
      0013CB FA               [12] 3881 	mov	r2,a
      0013CC 74 40            [12] 3882 	mov	a,#0x40
      0013CE 08               [12] 3883 	inc	r0
      0013CF 36               [12] 3884 	addc	a,@r0
      0013D0 FB               [12] 3885 	mov	r3,a
      0013D1 08               [12] 3886 	inc	r0
      0013D2 86 04            [24] 3887 	mov	ar4,@r0
      0013D4 8A 82            [24] 3888 	mov	dpl,r2
      0013D6 8B 83            [24] 3889 	mov	dph,r3
      0013D8 8C F0            [24] 3890 	mov	b,r4
      0013DA 12r00r00         [24] 3891 	lcall	__gptrget
      0013DD FA               [12] 3892 	mov	r2,a
      0013DE A3               [24] 3893 	inc	dptr
      0013DF 12r00r00         [24] 3894 	lcall	__gptrget
      0013E2 FB               [12] 3895 	mov	r3,a
      0013E3 A3               [24] 3896 	inc	dptr
      0013E4 12r00r00         [24] 3897 	lcall	__gptrget
      0013E7 FC               [12] 3898 	mov	r4,a
      0013E8 E5*00            [12] 3899 	mov	a,_bp
      0013EA 24 15            [12] 3900 	add	a,#0x15
      0013EC F8               [12] 3901 	mov	r0,a
      0013ED E6               [12] 3902 	mov	a,@r0
      0013EE C0 E0            [24] 3903 	push	acc
      0013F0 08               [12] 3904 	inc	r0
      0013F1 E6               [12] 3905 	mov	a,@r0
      0013F2 C0 E0            [24] 3906 	push	acc
      0013F4 08               [12] 3907 	inc	r0
      0013F5 E6               [12] 3908 	mov	a,@r0
      0013F6 C0 E0            [24] 3909 	push	acc
      0013F8 08               [12] 3910 	inc	r0
      0013F9 E6               [12] 3911 	mov	a,@r0
      0013FA C0 E0            [24] 3912 	push	acc
      0013FC 8A 82            [24] 3913 	mov	dpl,r2
      0013FE 8B 83            [24] 3914 	mov	dph,r3
      001400 8C F0            [24] 3915 	mov	b,r4
      001402 12r00r00         [24] 3916 	lcall	_stack_push
      001405 AB 82            [24] 3917 	mov	r3,dpl
      001407 AC 83            [24] 3918 	mov	r4,dph
      001409 E5 81            [12] 3919 	mov	a,sp
      00140B 24 FC            [12] 3920 	add	a,#0xfc
      00140D F5 81            [12] 3921 	mov	sp,a
      00140F EB               [12] 3922 	mov	a,r3
      001410 4C               [12] 3923 	orl	a,r4
      001411 60 03            [24] 3924 	jz	01316$
      001413 02r2BrA4         [24] 3925 	ljmp	00249$
      001416                       3926 01316$:
      001416 7Fr9D            [12] 3927 	mov	r7,#___str_13
      001418 7Es00            [12] 3928 	mov	r6,#(___str_13 >> 8)
      00141A 7D 80            [12] 3929 	mov	r5,#0x80
                                   3930 ;	calc.c:59: return;
      00141C                       3931 00417$:
                                   3932 ;	calc.c:57: for (; *s; s++) putchar(*s);
      00141C 8F 82            [24] 3933 	mov	dpl,r7
      00141E 8E 83            [24] 3934 	mov	dph,r6
      001420 8D F0            [24] 3935 	mov	b,r5
      001422 12r00r00         [24] 3936 	lcall	__gptrget
      001425 FC               [12] 3937 	mov	r4,a
      001426 70 03            [24] 3938 	jnz	01317$
      001428 02r2BrA4         [24] 3939 	ljmp	00249$
      00142B                       3940 01317$:
      00142B 7B 00            [12] 3941 	mov	r3,#0x00
      00142D 8C 82            [24] 3942 	mov	dpl,r4
      00142F 8B 83            [24] 3943 	mov	dph,r3
      001431 12r00r00         [24] 3944 	lcall	_putchar
      001434 0F               [12] 3945 	inc	r7
                                   3946 ;	calc.c:204: case 'T':
      001435 BF 00 E4         [24] 3947 	cjne	r7,#0x00,00417$
      001438 0E               [12] 3948 	inc	r6
      001439 80 E1            [24] 3949 	sjmp	00417$
      00143B                       3950 00145$:
                                   3951 ;	calc.c:205: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      00143B E5*00            [12] 3952 	mov	a,_bp
      00143D 24 15            [12] 3953 	add	a,#0x15
      00143F FF               [12] 3954 	mov	r7,a
      001440 7E 00            [12] 3955 	mov	r6,#0x00
      001442 7D 40            [12] 3956 	mov	r5,#0x40
      001444 E5*00            [12] 3957 	mov	a,_bp
      001446 24 12            [12] 3958 	add	a,#0x12
      001448 F8               [12] 3959 	mov	r0,a
      001449 E5*00            [12] 3960 	mov	a,_bp
      00144B 24 07            [12] 3961 	add	a,#0x07
      00144D F9               [12] 3962 	mov	r1,a
      00144E 74 11            [12] 3963 	mov	a,#0x11
      001450 26               [12] 3964 	add	a,@r0
      001451 F7               [12] 3965 	mov	@r1,a
      001452 74 40            [12] 3966 	mov	a,#0x40
      001454 08               [12] 3967 	inc	r0
      001455 36               [12] 3968 	addc	a,@r0
      001456 09               [12] 3969 	inc	r1
      001457 F7               [12] 3970 	mov	@r1,a
      001458 08               [12] 3971 	inc	r0
      001459 09               [12] 3972 	inc	r1
      00145A E6               [12] 3973 	mov	a,@r0
      00145B F7               [12] 3974 	mov	@r1,a
      00145C E5*00            [12] 3975 	mov	a,_bp
      00145E 24 07            [12] 3976 	add	a,#0x07
      001460 F8               [12] 3977 	mov	r0,a
      001461 86 82            [24] 3978 	mov	dpl,@r0
      001463 08               [12] 3979 	inc	r0
      001464 86 83            [24] 3980 	mov	dph,@r0
      001466 08               [12] 3981 	inc	r0
      001467 86 F0            [24] 3982 	mov	b,@r0
      001469 12r00r00         [24] 3983 	lcall	__gptrget
      00146C FA               [12] 3984 	mov	r2,a
      00146D A3               [24] 3985 	inc	dptr
      00146E 12r00r00         [24] 3986 	lcall	__gptrget
      001471 FB               [12] 3987 	mov	r3,a
      001472 A3               [24] 3988 	inc	dptr
      001473 12r00r00         [24] 3989 	lcall	__gptrget
      001476 FC               [12] 3990 	mov	r4,a
      001477 C0 07            [24] 3991 	push	ar7
      001479 C0 06            [24] 3992 	push	ar6
      00147B C0 05            [24] 3993 	push	ar5
      00147D 8A 82            [24] 3994 	mov	dpl,r2
      00147F 8B 83            [24] 3995 	mov	dph,r3
      001481 8C F0            [24] 3996 	mov	b,r4
      001483 12r00r00         [24] 3997 	lcall	_stack_pop
      001486 AB 82            [24] 3998 	mov	r3,dpl
      001488 AC 83            [24] 3999 	mov	r4,dph
      00148A 15 81            [12] 4000 	dec	sp
      00148C 15 81            [12] 4001 	dec	sp
      00148E 15 81            [12] 4002 	dec	sp
      001490 EB               [12] 4003 	mov	a,r3
      001491 4C               [12] 4004 	orl	a,r4
      001492 70 25            [24] 4005 	jnz	00150$
      001494 7Fr4E            [12] 4006 	mov	r7,#___str_10
      001496 7Es00            [12] 4007 	mov	r6,#(___str_10 >> 8)
      001498 7D 80            [12] 4008 	mov	r5,#0x80
                                   4009 ;	calc.c:59: return;
      00149A                       4010 00420$:
                                   4011 ;	calc.c:57: for (; *s; s++) putchar(*s);
      00149A 8F 82            [24] 4012 	mov	dpl,r7
      00149C 8E 83            [24] 4013 	mov	dph,r6
      00149E 8D F0            [24] 4014 	mov	b,r5
      0014A0 12r00r00         [24] 4015 	lcall	__gptrget
      0014A3 FC               [12] 4016 	mov	r4,a
      0014A4 70 03            [24] 4017 	jnz	01320$
      0014A6 02r2BrA4         [24] 4018 	ljmp	00249$
      0014A9                       4019 01320$:
      0014A9 7B 00            [12] 4020 	mov	r3,#0x00
      0014AB 8C 82            [24] 4021 	mov	dpl,r4
      0014AD 8B 83            [24] 4022 	mov	dph,r3
      0014AF 12r00r00         [24] 4023 	lcall	_putchar
      0014B2 0F               [12] 4024 	inc	r7
                                   4025 ;	calc.c:205: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      0014B3 BF 00 E4         [24] 4026 	cjne	r7,#0x00,00420$
      0014B6 0E               [12] 4027 	inc	r6
      0014B7 80 E1            [24] 4028 	sjmp	00420$
      0014B9                       4029 00150$:
                                   4030 ;	calc.c:207: if (!stack_pop(ctx->ss, &d1)) {
      0014B9 E5*00            [12] 4031 	mov	a,_bp
      0014BB 24 19            [12] 4032 	add	a,#0x19
      0014BD FF               [12] 4033 	mov	r7,a
      0014BE 7E 00            [12] 4034 	mov	r6,#0x00
      0014C0 7D 40            [12] 4035 	mov	r5,#0x40
      0014C2 E5*00            [12] 4036 	mov	a,_bp
      0014C4 24 12            [12] 4037 	add	a,#0x12
      0014C6 F8               [12] 4038 	mov	r0,a
      0014C7 E5*00            [12] 4039 	mov	a,_bp
      0014C9 24 04            [12] 4040 	add	a,#0x04
      0014CB F9               [12] 4041 	mov	r1,a
      0014CC 74 14            [12] 4042 	mov	a,#0x14
      0014CE 26               [12] 4043 	add	a,@r0
      0014CF F7               [12] 4044 	mov	@r1,a
      0014D0 74 40            [12] 4045 	mov	a,#0x40
      0014D2 08               [12] 4046 	inc	r0
      0014D3 36               [12] 4047 	addc	a,@r0
      0014D4 09               [12] 4048 	inc	r1
      0014D5 F7               [12] 4049 	mov	@r1,a
      0014D6 08               [12] 4050 	inc	r0
      0014D7 09               [12] 4051 	inc	r1
      0014D8 E6               [12] 4052 	mov	a,@r0
      0014D9 F7               [12] 4053 	mov	@r1,a
      0014DA E5*00            [12] 4054 	mov	a,_bp
      0014DC 24 04            [12] 4055 	add	a,#0x04
      0014DE F8               [12] 4056 	mov	r0,a
      0014DF 86 82            [24] 4057 	mov	dpl,@r0
      0014E1 08               [12] 4058 	inc	r0
      0014E2 86 83            [24] 4059 	mov	dph,@r0
      0014E4 08               [12] 4060 	inc	r0
      0014E5 86 F0            [24] 4061 	mov	b,@r0
      0014E7 12r00r00         [24] 4062 	lcall	__gptrget
      0014EA FA               [12] 4063 	mov	r2,a
      0014EB A3               [24] 4064 	inc	dptr
      0014EC 12r00r00         [24] 4065 	lcall	__gptrget
      0014EF FB               [12] 4066 	mov	r3,a
      0014F0 A3               [24] 4067 	inc	dptr
      0014F1 12r00r00         [24] 4068 	lcall	__gptrget
      0014F4 FC               [12] 4069 	mov	r4,a
      0014F5 C0 07            [24] 4070 	push	ar7
      0014F7 C0 06            [24] 4071 	push	ar6
      0014F9 C0 05            [24] 4072 	push	ar5
      0014FB 8A 82            [24] 4073 	mov	dpl,r2
      0014FD 8B 83            [24] 4074 	mov	dph,r3
      0014FF 8C F0            [24] 4075 	mov	b,r4
      001501 12r00r00         [24] 4076 	lcall	_stack_pop
      001504 AB 82            [24] 4077 	mov	r3,dpl
      001506 AC 83            [24] 4078 	mov	r4,dph
      001508 15 81            [12] 4079 	dec	sp
      00150A 15 81            [12] 4080 	dec	sp
      00150C 15 81            [12] 4081 	dec	sp
      00150E EB               [12] 4082 	mov	a,r3
      00150F 4C               [12] 4083 	orl	a,r4
      001510 70 63            [24] 4084 	jnz	00147$
                                   4085 ;	calc.c:208: printstr("\r\nsecondary stack underflow\r\n");
      001512 7Fr7F            [12] 4086 	mov	r7,#___str_12
      001514 7Es00            [12] 4087 	mov	r6,#(___str_12 >> 8)
      001516 7D 80            [12] 4088 	mov	r5,#0x80
                                   4089 ;	calc.c:59: return;
      001518                       4090 00423$:
                                   4091 ;	calc.c:57: for (; *s; s++) putchar(*s);
      001518 8F 82            [24] 4092 	mov	dpl,r7
      00151A 8E 83            [24] 4093 	mov	dph,r6
      00151C 8D F0            [24] 4094 	mov	b,r5
      00151E 12r00r00         [24] 4095 	lcall	__gptrget
      001521 FC               [12] 4096 	mov	r4,a
      001522 60 10            [24] 4097 	jz	00301$
      001524 7B 00            [12] 4098 	mov	r3,#0x00
      001526 8C 82            [24] 4099 	mov	dpl,r4
      001528 8B 83            [24] 4100 	mov	dph,r3
      00152A 12r00r00         [24] 4101 	lcall	_putchar
      00152D 0F               [12] 4102 	inc	r7
                                   4103 ;	calc.c:208: printstr("\r\nsecondary stack underflow\r\n");
      00152E BF 00 E7         [24] 4104 	cjne	r7,#0x00,00423$
      001531 0E               [12] 4105 	inc	r6
      001532 80 E4            [24] 4106 	sjmp	00423$
      001534                       4107 00301$:
                                   4108 ;	calc.c:209: (void)stack_push(ctx->ps, d0);
      001534 E5*00            [12] 4109 	mov	a,_bp
      001536 24 07            [12] 4110 	add	a,#0x07
      001538 F8               [12] 4111 	mov	r0,a
      001539 86 82            [24] 4112 	mov	dpl,@r0
      00153B 08               [12] 4113 	inc	r0
      00153C 86 83            [24] 4114 	mov	dph,@r0
      00153E 08               [12] 4115 	inc	r0
      00153F 86 F0            [24] 4116 	mov	b,@r0
      001541 12r00r00         [24] 4117 	lcall	__gptrget
      001544 FA               [12] 4118 	mov	r2,a
      001545 A3               [24] 4119 	inc	dptr
      001546 12r00r00         [24] 4120 	lcall	__gptrget
      001549 FB               [12] 4121 	mov	r3,a
      00154A A3               [24] 4122 	inc	dptr
      00154B 12r00r00         [24] 4123 	lcall	__gptrget
      00154E FC               [12] 4124 	mov	r4,a
      00154F E5*00            [12] 4125 	mov	a,_bp
      001551 24 15            [12] 4126 	add	a,#0x15
      001553 F8               [12] 4127 	mov	r0,a
      001554 E6               [12] 4128 	mov	a,@r0
      001555 C0 E0            [24] 4129 	push	acc
      001557 08               [12] 4130 	inc	r0
      001558 E6               [12] 4131 	mov	a,@r0
      001559 C0 E0            [24] 4132 	push	acc
      00155B 08               [12] 4133 	inc	r0
      00155C E6               [12] 4134 	mov	a,@r0
      00155D C0 E0            [24] 4135 	push	acc
      00155F 08               [12] 4136 	inc	r0
      001560 E6               [12] 4137 	mov	a,@r0
      001561 C0 E0            [24] 4138 	push	acc
      001563 8A 82            [24] 4139 	mov	dpl,r2
      001565 8B 83            [24] 4140 	mov	dph,r3
      001567 8C F0            [24] 4141 	mov	b,r4
      001569 12r00r00         [24] 4142 	lcall	_stack_push
      00156C E5 81            [12] 4143 	mov	a,sp
      00156E 24 FC            [12] 4144 	add	a,#0xfc
      001570 F5 81            [12] 4145 	mov	sp,a
      001572 02r2BrA4         [24] 4146 	ljmp	00249$
      001575                       4147 00147$:
                                   4148 ;	calc.c:211: (void)stack_push(ctx->ps, d1);
      001575 E5*00            [12] 4149 	mov	a,_bp
      001577 24 07            [12] 4150 	add	a,#0x07
      001579 F8               [12] 4151 	mov	r0,a
      00157A 86 82            [24] 4152 	mov	dpl,@r0
      00157C 08               [12] 4153 	inc	r0
      00157D 86 83            [24] 4154 	mov	dph,@r0
      00157F 08               [12] 4155 	inc	r0
      001580 86 F0            [24] 4156 	mov	b,@r0
      001582 12r00r00         [24] 4157 	lcall	__gptrget
      001585 FA               [12] 4158 	mov	r2,a
      001586 A3               [24] 4159 	inc	dptr
      001587 12r00r00         [24] 4160 	lcall	__gptrget
      00158A FB               [12] 4161 	mov	r3,a
      00158B A3               [24] 4162 	inc	dptr
      00158C 12r00r00         [24] 4163 	lcall	__gptrget
      00158F FC               [12] 4164 	mov	r4,a
      001590 E5*00            [12] 4165 	mov	a,_bp
      001592 24 19            [12] 4166 	add	a,#0x19
      001594 F8               [12] 4167 	mov	r0,a
      001595 E6               [12] 4168 	mov	a,@r0
      001596 C0 E0            [24] 4169 	push	acc
      001598 08               [12] 4170 	inc	r0
      001599 E6               [12] 4171 	mov	a,@r0
      00159A C0 E0            [24] 4172 	push	acc
      00159C 08               [12] 4173 	inc	r0
      00159D E6               [12] 4174 	mov	a,@r0
      00159E C0 E0            [24] 4175 	push	acc
      0015A0 08               [12] 4176 	inc	r0
      0015A1 E6               [12] 4177 	mov	a,@r0
      0015A2 C0 E0            [24] 4178 	push	acc
      0015A4 8A 82            [24] 4179 	mov	dpl,r2
      0015A6 8B 83            [24] 4180 	mov	dph,r3
      0015A8 8C F0            [24] 4181 	mov	b,r4
      0015AA 12r00r00         [24] 4182 	lcall	_stack_push
      0015AD E5 81            [12] 4183 	mov	a,sp
      0015AF 24 FC            [12] 4184 	add	a,#0xfc
      0015B1 F5 81            [12] 4185 	mov	sp,a
                                   4186 ;	calc.c:212: (void)stack_push(ctx->ss, d0);
      0015B3 E5*00            [12] 4187 	mov	a,_bp
      0015B5 24 04            [12] 4188 	add	a,#0x04
      0015B7 F8               [12] 4189 	mov	r0,a
      0015B8 86 82            [24] 4190 	mov	dpl,@r0
      0015BA 08               [12] 4191 	inc	r0
      0015BB 86 83            [24] 4192 	mov	dph,@r0
      0015BD 08               [12] 4193 	inc	r0
      0015BE 86 F0            [24] 4194 	mov	b,@r0
      0015C0 12r00r00         [24] 4195 	lcall	__gptrget
      0015C3 FA               [12] 4196 	mov	r2,a
      0015C4 A3               [24] 4197 	inc	dptr
      0015C5 12r00r00         [24] 4198 	lcall	__gptrget
      0015C8 FB               [12] 4199 	mov	r3,a
      0015C9 A3               [24] 4200 	inc	dptr
      0015CA 12r00r00         [24] 4201 	lcall	__gptrget
      0015CD FC               [12] 4202 	mov	r4,a
      0015CE E5*00            [12] 4203 	mov	a,_bp
      0015D0 24 15            [12] 4204 	add	a,#0x15
      0015D2 F8               [12] 4205 	mov	r0,a
      0015D3 E6               [12] 4206 	mov	a,@r0
      0015D4 C0 E0            [24] 4207 	push	acc
      0015D6 08               [12] 4208 	inc	r0
      0015D7 E6               [12] 4209 	mov	a,@r0
      0015D8 C0 E0            [24] 4210 	push	acc
      0015DA 08               [12] 4211 	inc	r0
      0015DB E6               [12] 4212 	mov	a,@r0
      0015DC C0 E0            [24] 4213 	push	acc
      0015DE 08               [12] 4214 	inc	r0
      0015DF E6               [12] 4215 	mov	a,@r0
      0015E0 C0 E0            [24] 4216 	push	acc
      0015E2 8A 82            [24] 4217 	mov	dpl,r2
      0015E4 8B 83            [24] 4218 	mov	dph,r3
      0015E6 8C F0            [24] 4219 	mov	b,r4
      0015E8 12r00r00         [24] 4220 	lcall	_stack_push
      0015EB E5 81            [12] 4221 	mov	a,sp
      0015ED 24 FC            [12] 4222 	add	a,#0xfc
      0015EF F5 81            [12] 4223 	mov	sp,a
                                   4224 ;	calc.c:215: break;
      0015F1 02r2BrA4         [24] 4225 	ljmp	00249$
                                   4226 ;	calc.c:216: case 'X':
      0015F4                       4227 00152$:
                                   4228 ;	calc.c:217: t0 = ctx->ps;
      0015F4 E5*00            [12] 4229 	mov	a,_bp
      0015F6 24 12            [12] 4230 	add	a,#0x12
      0015F8 F8               [12] 4231 	mov	r0,a
      0015F9 E5*00            [12] 4232 	mov	a,_bp
      0015FB 24 0B            [12] 4233 	add	a,#0x0b
      0015FD F9               [12] 4234 	mov	r1,a
      0015FE 74 11            [12] 4235 	mov	a,#0x11
      001600 26               [12] 4236 	add	a,@r0
      001601 F7               [12] 4237 	mov	@r1,a
      001602 74 40            [12] 4238 	mov	a,#0x40
      001604 08               [12] 4239 	inc	r0
      001605 36               [12] 4240 	addc	a,@r0
      001606 09               [12] 4241 	inc	r1
      001607 F7               [12] 4242 	mov	@r1,a
      001608 08               [12] 4243 	inc	r0
      001609 09               [12] 4244 	inc	r1
      00160A E6               [12] 4245 	mov	a,@r0
      00160B F7               [12] 4246 	mov	@r1,a
      00160C E5*00            [12] 4247 	mov	a,_bp
      00160E 24 0B            [12] 4248 	add	a,#0x0b
      001610 F8               [12] 4249 	mov	r0,a
      001611 86 82            [24] 4250 	mov	dpl,@r0
      001613 08               [12] 4251 	inc	r0
      001614 86 83            [24] 4252 	mov	dph,@r0
      001616 08               [12] 4253 	inc	r0
      001617 86 F0            [24] 4254 	mov	b,@r0
      001619 12r00r00         [24] 4255 	lcall	__gptrget
      00161C FF               [12] 4256 	mov	r7,a
      00161D A3               [24] 4257 	inc	dptr
      00161E 12r00r00         [24] 4258 	lcall	__gptrget
      001621 FE               [12] 4259 	mov	r6,a
      001622 A3               [24] 4260 	inc	dptr
      001623 12r00r00         [24] 4261 	lcall	__gptrget
      001626 FD               [12] 4262 	mov	r5,a
                                   4263 ;	calc.c:218: ctx->ps = ctx->ss;
      001627 E5*00            [12] 4264 	mov	a,_bp
      001629 24 12            [12] 4265 	add	a,#0x12
      00162B F8               [12] 4266 	mov	r0,a
      00162C E5*00            [12] 4267 	mov	a,_bp
      00162E 24 07            [12] 4268 	add	a,#0x07
      001630 F9               [12] 4269 	mov	r1,a
      001631 74 14            [12] 4270 	mov	a,#0x14
      001633 26               [12] 4271 	add	a,@r0
      001634 F7               [12] 4272 	mov	@r1,a
      001635 74 40            [12] 4273 	mov	a,#0x40
      001637 08               [12] 4274 	inc	r0
      001638 36               [12] 4275 	addc	a,@r0
      001639 09               [12] 4276 	inc	r1
      00163A F7               [12] 4277 	mov	@r1,a
      00163B 08               [12] 4278 	inc	r0
      00163C 09               [12] 4279 	inc	r1
      00163D E6               [12] 4280 	mov	a,@r0
      00163E F7               [12] 4281 	mov	@r1,a
      00163F E5*00            [12] 4282 	mov	a,_bp
      001641 24 07            [12] 4283 	add	a,#0x07
      001643 F8               [12] 4284 	mov	r0,a
      001644 86 82            [24] 4285 	mov	dpl,@r0
      001646 08               [12] 4286 	inc	r0
      001647 86 83            [24] 4287 	mov	dph,@r0
      001649 08               [12] 4288 	inc	r0
      00164A 86 F0            [24] 4289 	mov	b,@r0
      00164C 12r00r00         [24] 4290 	lcall	__gptrget
      00164F FA               [12] 4291 	mov	r2,a
      001650 A3               [24] 4292 	inc	dptr
      001651 12r00r00         [24] 4293 	lcall	__gptrget
      001654 FB               [12] 4294 	mov	r3,a
      001655 A3               [24] 4295 	inc	dptr
      001656 12r00r00         [24] 4296 	lcall	__gptrget
      001659 FC               [12] 4297 	mov	r4,a
      00165A E5*00            [12] 4298 	mov	a,_bp
      00165C 24 0B            [12] 4299 	add	a,#0x0b
      00165E F8               [12] 4300 	mov	r0,a
      00165F 86 82            [24] 4301 	mov	dpl,@r0
      001661 08               [12] 4302 	inc	r0
      001662 86 83            [24] 4303 	mov	dph,@r0
      001664 08               [12] 4304 	inc	r0
      001665 86 F0            [24] 4305 	mov	b,@r0
      001667 EA               [12] 4306 	mov	a,r2
      001668 12r00r00         [24] 4307 	lcall	__gptrput
      00166B A3               [24] 4308 	inc	dptr
      00166C EB               [12] 4309 	mov	a,r3
      00166D 12r00r00         [24] 4310 	lcall	__gptrput
      001670 A3               [24] 4311 	inc	dptr
      001671 EC               [12] 4312 	mov	a,r4
      001672 12r00r00         [24] 4313 	lcall	__gptrput
                                   4314 ;	calc.c:219: ctx->ss = t0;
      001675 E5*00            [12] 4315 	mov	a,_bp
      001677 24 07            [12] 4316 	add	a,#0x07
      001679 F8               [12] 4317 	mov	r0,a
      00167A 86 82            [24] 4318 	mov	dpl,@r0
      00167C 08               [12] 4319 	inc	r0
      00167D 86 83            [24] 4320 	mov	dph,@r0
      00167F 08               [12] 4321 	inc	r0
      001680 86 F0            [24] 4322 	mov	b,@r0
      001682 EF               [12] 4323 	mov	a,r7
      001683 12r00r00         [24] 4324 	lcall	__gptrput
      001686 A3               [24] 4325 	inc	dptr
      001687 EE               [12] 4326 	mov	a,r6
      001688 12r00r00         [24] 4327 	lcall	__gptrput
      00168B A3               [24] 4328 	inc	dptr
      00168C ED               [12] 4329 	mov	a,r5
      00168D 12r00r00         [24] 4330 	lcall	__gptrput
                                   4331 ;	calc.c:220: break;
      001690 02r2BrA4         [24] 4332 	ljmp	00249$
                                   4333 ;	calc.c:221: case '+':
      001693                       4334 00153$:
                                   4335 ;	calc.c:222: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      001693 E5*00            [12] 4336 	mov	a,_bp
      001695 24 15            [12] 4337 	add	a,#0x15
      001697 FF               [12] 4338 	mov	r7,a
      001698 7E 00            [12] 4339 	mov	r6,#0x00
      00169A 7D 40            [12] 4340 	mov	r5,#0x40
      00169C E5*00            [12] 4341 	mov	a,_bp
      00169E 24 12            [12] 4342 	add	a,#0x12
      0016A0 F8               [12] 4343 	mov	r0,a
      0016A1 E5*00            [12] 4344 	mov	a,_bp
      0016A3 24 0B            [12] 4345 	add	a,#0x0b
      0016A5 F9               [12] 4346 	mov	r1,a
      0016A6 74 11            [12] 4347 	mov	a,#0x11
      0016A8 26               [12] 4348 	add	a,@r0
      0016A9 F7               [12] 4349 	mov	@r1,a
      0016AA 74 40            [12] 4350 	mov	a,#0x40
      0016AC 08               [12] 4351 	inc	r0
      0016AD 36               [12] 4352 	addc	a,@r0
      0016AE 09               [12] 4353 	inc	r1
      0016AF F7               [12] 4354 	mov	@r1,a
      0016B0 08               [12] 4355 	inc	r0
      0016B1 09               [12] 4356 	inc	r1
      0016B2 E6               [12] 4357 	mov	a,@r0
      0016B3 F7               [12] 4358 	mov	@r1,a
      0016B4 E5*00            [12] 4359 	mov	a,_bp
      0016B6 24 0B            [12] 4360 	add	a,#0x0b
      0016B8 F8               [12] 4361 	mov	r0,a
      0016B9 86 82            [24] 4362 	mov	dpl,@r0
      0016BB 08               [12] 4363 	inc	r0
      0016BC 86 83            [24] 4364 	mov	dph,@r0
      0016BE 08               [12] 4365 	inc	r0
      0016BF 86 F0            [24] 4366 	mov	b,@r0
      0016C1 12r00r00         [24] 4367 	lcall	__gptrget
      0016C4 FA               [12] 4368 	mov	r2,a
      0016C5 A3               [24] 4369 	inc	dptr
      0016C6 12r00r00         [24] 4370 	lcall	__gptrget
      0016C9 FB               [12] 4371 	mov	r3,a
      0016CA A3               [24] 4372 	inc	dptr
      0016CB 12r00r00         [24] 4373 	lcall	__gptrget
      0016CE FC               [12] 4374 	mov	r4,a
      0016CF C0 07            [24] 4375 	push	ar7
      0016D1 C0 06            [24] 4376 	push	ar6
      0016D3 C0 05            [24] 4377 	push	ar5
      0016D5 8A 82            [24] 4378 	mov	dpl,r2
      0016D7 8B 83            [24] 4379 	mov	dph,r3
      0016D9 8C F0            [24] 4380 	mov	b,r4
      0016DB 12r00r00         [24] 4381 	lcall	_stack_pop
      0016DE AB 82            [24] 4382 	mov	r3,dpl
      0016E0 AC 83            [24] 4383 	mov	r4,dph
      0016E2 15 81            [12] 4384 	dec	sp
      0016E4 15 81            [12] 4385 	dec	sp
      0016E6 15 81            [12] 4386 	dec	sp
      0016E8 EB               [12] 4387 	mov	a,r3
      0016E9 4C               [12] 4388 	orl	a,r4
      0016EA 70 25            [24] 4389 	jnz	00158$
      0016EC 7Fr4E            [12] 4390 	mov	r7,#___str_10
      0016EE 7Es00            [12] 4391 	mov	r6,#(___str_10 >> 8)
      0016F0 7D 80            [12] 4392 	mov	r5,#0x80
                                   4393 ;	calc.c:59: return;
      0016F2                       4394 00426$:
                                   4395 ;	calc.c:57: for (; *s; s++) putchar(*s);
      0016F2 8F 82            [24] 4396 	mov	dpl,r7
      0016F4 8E 83            [24] 4397 	mov	dph,r6
      0016F6 8D F0            [24] 4398 	mov	b,r5
      0016F8 12r00r00         [24] 4399 	lcall	__gptrget
      0016FB FC               [12] 4400 	mov	r4,a
      0016FC 70 03            [24] 4401 	jnz	01326$
      0016FE 02r2BrA4         [24] 4402 	ljmp	00249$
      001701                       4403 01326$:
      001701 7B 00            [12] 4404 	mov	r3,#0x00
      001703 8C 82            [24] 4405 	mov	dpl,r4
      001705 8B 83            [24] 4406 	mov	dph,r3
      001707 12r00r00         [24] 4407 	lcall	_putchar
      00170A 0F               [12] 4408 	inc	r7
                                   4409 ;	calc.c:222: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      00170B BF 00 E4         [24] 4410 	cjne	r7,#0x00,00426$
      00170E 0E               [12] 4411 	inc	r6
      00170F 80 E1            [24] 4412 	sjmp	00426$
      001711                       4413 00158$:
                                   4414 ;	calc.c:223: else if (!stack_pop(ctx->ps, &d1)) {
      001711 E5*00            [12] 4415 	mov	a,_bp
      001713 24 19            [12] 4416 	add	a,#0x19
      001715 FF               [12] 4417 	mov	r7,a
      001716 7E 00            [12] 4418 	mov	r6,#0x00
      001718 7D 40            [12] 4419 	mov	r5,#0x40
      00171A E5*00            [12] 4420 	mov	a,_bp
      00171C 24 0B            [12] 4421 	add	a,#0x0b
      00171E F8               [12] 4422 	mov	r0,a
      00171F 86 82            [24] 4423 	mov	dpl,@r0
      001721 08               [12] 4424 	inc	r0
      001722 86 83            [24] 4425 	mov	dph,@r0
      001724 08               [12] 4426 	inc	r0
      001725 86 F0            [24] 4427 	mov	b,@r0
      001727 12r00r00         [24] 4428 	lcall	__gptrget
      00172A FA               [12] 4429 	mov	r2,a
      00172B A3               [24] 4430 	inc	dptr
      00172C 12r00r00         [24] 4431 	lcall	__gptrget
      00172F FB               [12] 4432 	mov	r3,a
      001730 A3               [24] 4433 	inc	dptr
      001731 12r00r00         [24] 4434 	lcall	__gptrget
      001734 FC               [12] 4435 	mov	r4,a
      001735 C0 07            [24] 4436 	push	ar7
      001737 C0 06            [24] 4437 	push	ar6
      001739 C0 05            [24] 4438 	push	ar5
      00173B 8A 82            [24] 4439 	mov	dpl,r2
      00173D 8B 83            [24] 4440 	mov	dph,r3
      00173F 8C F0            [24] 4441 	mov	b,r4
      001741 12r00r00         [24] 4442 	lcall	_stack_pop
      001744 AB 82            [24] 4443 	mov	r3,dpl
      001746 AC 83            [24] 4444 	mov	r4,dph
      001748 15 81            [12] 4445 	dec	sp
      00174A 15 81            [12] 4446 	dec	sp
      00174C 15 81            [12] 4447 	dec	sp
      00174E EB               [12] 4448 	mov	a,r3
      00174F 4C               [12] 4449 	orl	a,r4
      001750 70 63            [24] 4450 	jnz	00155$
                                   4451 ;	calc.c:224: (void)stack_push(ctx->ps, d0);
      001752 E5*00            [12] 4452 	mov	a,_bp
      001754 24 0B            [12] 4453 	add	a,#0x0b
      001756 F8               [12] 4454 	mov	r0,a
      001757 86 82            [24] 4455 	mov	dpl,@r0
      001759 08               [12] 4456 	inc	r0
      00175A 86 83            [24] 4457 	mov	dph,@r0
      00175C 08               [12] 4458 	inc	r0
      00175D 86 F0            [24] 4459 	mov	b,@r0
      00175F 12r00r00         [24] 4460 	lcall	__gptrget
      001762 FA               [12] 4461 	mov	r2,a
      001763 A3               [24] 4462 	inc	dptr
      001764 12r00r00         [24] 4463 	lcall	__gptrget
      001767 FB               [12] 4464 	mov	r3,a
      001768 A3               [24] 4465 	inc	dptr
      001769 12r00r00         [24] 4466 	lcall	__gptrget
      00176C FC               [12] 4467 	mov	r4,a
      00176D E5*00            [12] 4468 	mov	a,_bp
      00176F 24 15            [12] 4469 	add	a,#0x15
      001771 F8               [12] 4470 	mov	r0,a
      001772 E6               [12] 4471 	mov	a,@r0
      001773 C0 E0            [24] 4472 	push	acc
      001775 08               [12] 4473 	inc	r0
      001776 E6               [12] 4474 	mov	a,@r0
      001777 C0 E0            [24] 4475 	push	acc
      001779 08               [12] 4476 	inc	r0
      00177A E6               [12] 4477 	mov	a,@r0
      00177B C0 E0            [24] 4478 	push	acc
      00177D 08               [12] 4479 	inc	r0
      00177E E6               [12] 4480 	mov	a,@r0
      00177F C0 E0            [24] 4481 	push	acc
      001781 8A 82            [24] 4482 	mov	dpl,r2
      001783 8B 83            [24] 4483 	mov	dph,r3
      001785 8C F0            [24] 4484 	mov	b,r4
      001787 12r00r00         [24] 4485 	lcall	_stack_push
      00178A E5 81            [12] 4486 	mov	a,sp
      00178C 24 FC            [12] 4487 	add	a,#0xfc
      00178E F5 81            [12] 4488 	mov	sp,a
                                   4489 ;	calc.c:225: printstr("\r\nstack underflow\r\n");
      001790 7Fr4E            [12] 4490 	mov	r7,#___str_10
      001792 7Es00            [12] 4491 	mov	r6,#(___str_10 >> 8)
      001794 7D 80            [12] 4492 	mov	r5,#0x80
                                   4493 ;	calc.c:59: return;
      001796                       4494 00429$:
                                   4495 ;	calc.c:57: for (; *s; s++) putchar(*s);
      001796 8F 82            [24] 4496 	mov	dpl,r7
      001798 8E 83            [24] 4497 	mov	dph,r6
      00179A 8D F0            [24] 4498 	mov	b,r5
      00179C 12r00r00         [24] 4499 	lcall	__gptrget
      00179F FC               [12] 4500 	mov	r4,a
      0017A0 70 03            [24] 4501 	jnz	01329$
      0017A2 02r2BrA4         [24] 4502 	ljmp	00249$
      0017A5                       4503 01329$:
      0017A5 7B 00            [12] 4504 	mov	r3,#0x00
      0017A7 8C 82            [24] 4505 	mov	dpl,r4
      0017A9 8B 83            [24] 4506 	mov	dph,r3
      0017AB 12r00r00         [24] 4507 	lcall	_putchar
      0017AE 0F               [12] 4508 	inc	r7
                                   4509 ;	calc.c:225: printstr("\r\nstack underflow\r\n");
      0017AF BF 00 E4         [24] 4510 	cjne	r7,#0x00,00429$
      0017B2 0E               [12] 4511 	inc	r6
      0017B3 80 E1            [24] 4512 	sjmp	00429$
      0017B5                       4513 00155$:
                                   4514 ;	calc.c:227: d1 += d0;
      0017B5 E5*00            [12] 4515 	mov	a,_bp
      0017B7 24 19            [12] 4516 	add	a,#0x19
      0017B9 F8               [12] 4517 	mov	r0,a
      0017BA E5*00            [12] 4518 	mov	a,_bp
      0017BC 24 15            [12] 4519 	add	a,#0x15
      0017BE F9               [12] 4520 	mov	r1,a
      0017BF E7               [12] 4521 	mov	a,@r1
      0017C0 26               [12] 4522 	add	a,@r0
      0017C1 F6               [12] 4523 	mov	@r0,a
      0017C2 09               [12] 4524 	inc	r1
      0017C3 E7               [12] 4525 	mov	a,@r1
      0017C4 08               [12] 4526 	inc	r0
      0017C5 36               [12] 4527 	addc	a,@r0
      0017C6 F6               [12] 4528 	mov	@r0,a
      0017C7 09               [12] 4529 	inc	r1
      0017C8 E7               [12] 4530 	mov	a,@r1
      0017C9 08               [12] 4531 	inc	r0
      0017CA 36               [12] 4532 	addc	a,@r0
      0017CB F6               [12] 4533 	mov	@r0,a
      0017CC 09               [12] 4534 	inc	r1
      0017CD E7               [12] 4535 	mov	a,@r1
      0017CE 08               [12] 4536 	inc	r0
      0017CF 36               [12] 4537 	addc	a,@r0
      0017D0 F6               [12] 4538 	mov	@r0,a
                                   4539 ;	calc.c:228: (void)stack_push(ctx->ps, d1);
      0017D1 E5*00            [12] 4540 	mov	a,_bp
      0017D3 24 0B            [12] 4541 	add	a,#0x0b
      0017D5 F8               [12] 4542 	mov	r0,a
      0017D6 86 82            [24] 4543 	mov	dpl,@r0
      0017D8 08               [12] 4544 	inc	r0
      0017D9 86 83            [24] 4545 	mov	dph,@r0
      0017DB 08               [12] 4546 	inc	r0
      0017DC 86 F0            [24] 4547 	mov	b,@r0
      0017DE 12r00r00         [24] 4548 	lcall	__gptrget
      0017E1 FA               [12] 4549 	mov	r2,a
      0017E2 A3               [24] 4550 	inc	dptr
      0017E3 12r00r00         [24] 4551 	lcall	__gptrget
      0017E6 FB               [12] 4552 	mov	r3,a
      0017E7 A3               [24] 4553 	inc	dptr
      0017E8 12r00r00         [24] 4554 	lcall	__gptrget
      0017EB FC               [12] 4555 	mov	r4,a
      0017EC E5*00            [12] 4556 	mov	a,_bp
      0017EE 24 19            [12] 4557 	add	a,#0x19
      0017F0 F8               [12] 4558 	mov	r0,a
      0017F1 E6               [12] 4559 	mov	a,@r0
      0017F2 C0 E0            [24] 4560 	push	acc
      0017F4 08               [12] 4561 	inc	r0
      0017F5 E6               [12] 4562 	mov	a,@r0
      0017F6 C0 E0            [24] 4563 	push	acc
      0017F8 08               [12] 4564 	inc	r0
      0017F9 E6               [12] 4565 	mov	a,@r0
      0017FA C0 E0            [24] 4566 	push	acc
      0017FC 08               [12] 4567 	inc	r0
      0017FD E6               [12] 4568 	mov	a,@r0
      0017FE C0 E0            [24] 4569 	push	acc
      001800 8A 82            [24] 4570 	mov	dpl,r2
      001802 8B 83            [24] 4571 	mov	dph,r3
      001804 8C F0            [24] 4572 	mov	b,r4
      001806 12r00r00         [24] 4573 	lcall	_stack_push
      001809 E5 81            [12] 4574 	mov	a,sp
      00180B 24 FC            [12] 4575 	add	a,#0xfc
      00180D F5 81            [12] 4576 	mov	sp,a
                                   4577 ;	calc.c:230: break;
      00180F 02r2BrA4         [24] 4578 	ljmp	00249$
                                   4579 ;	calc.c:231: case '-':
      001812                       4580 00160$:
                                   4581 ;	calc.c:232: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      001812 E5*00            [12] 4582 	mov	a,_bp
      001814 24 15            [12] 4583 	add	a,#0x15
      001816 FF               [12] 4584 	mov	r7,a
      001817 7E 00            [12] 4585 	mov	r6,#0x00
      001819 7D 40            [12] 4586 	mov	r5,#0x40
      00181B E5*00            [12] 4587 	mov	a,_bp
      00181D 24 12            [12] 4588 	add	a,#0x12
      00181F F8               [12] 4589 	mov	r0,a
      001820 E5*00            [12] 4590 	mov	a,_bp
      001822 24 0B            [12] 4591 	add	a,#0x0b
      001824 F9               [12] 4592 	mov	r1,a
      001825 74 11            [12] 4593 	mov	a,#0x11
      001827 26               [12] 4594 	add	a,@r0
      001828 F7               [12] 4595 	mov	@r1,a
      001829 74 40            [12] 4596 	mov	a,#0x40
      00182B 08               [12] 4597 	inc	r0
      00182C 36               [12] 4598 	addc	a,@r0
      00182D 09               [12] 4599 	inc	r1
      00182E F7               [12] 4600 	mov	@r1,a
      00182F 08               [12] 4601 	inc	r0
      001830 09               [12] 4602 	inc	r1
      001831 E6               [12] 4603 	mov	a,@r0
      001832 F7               [12] 4604 	mov	@r1,a
      001833 E5*00            [12] 4605 	mov	a,_bp
      001835 24 0B            [12] 4606 	add	a,#0x0b
      001837 F8               [12] 4607 	mov	r0,a
      001838 86 82            [24] 4608 	mov	dpl,@r0
      00183A 08               [12] 4609 	inc	r0
      00183B 86 83            [24] 4610 	mov	dph,@r0
      00183D 08               [12] 4611 	inc	r0
      00183E 86 F0            [24] 4612 	mov	b,@r0
      001840 12r00r00         [24] 4613 	lcall	__gptrget
      001843 FA               [12] 4614 	mov	r2,a
      001844 A3               [24] 4615 	inc	dptr
      001845 12r00r00         [24] 4616 	lcall	__gptrget
      001848 FB               [12] 4617 	mov	r3,a
      001849 A3               [24] 4618 	inc	dptr
      00184A 12r00r00         [24] 4619 	lcall	__gptrget
      00184D FC               [12] 4620 	mov	r4,a
      00184E C0 07            [24] 4621 	push	ar7
      001850 C0 06            [24] 4622 	push	ar6
      001852 C0 05            [24] 4623 	push	ar5
      001854 8A 82            [24] 4624 	mov	dpl,r2
      001856 8B 83            [24] 4625 	mov	dph,r3
      001858 8C F0            [24] 4626 	mov	b,r4
      00185A 12r00r00         [24] 4627 	lcall	_stack_pop
      00185D AB 82            [24] 4628 	mov	r3,dpl
      00185F AC 83            [24] 4629 	mov	r4,dph
      001861 15 81            [12] 4630 	dec	sp
      001863 15 81            [12] 4631 	dec	sp
      001865 15 81            [12] 4632 	dec	sp
      001867 EB               [12] 4633 	mov	a,r3
      001868 4C               [12] 4634 	orl	a,r4
      001869 70 25            [24] 4635 	jnz	00165$
      00186B 7Fr4E            [12] 4636 	mov	r7,#___str_10
      00186D 7Es00            [12] 4637 	mov	r6,#(___str_10 >> 8)
      00186F 7D 80            [12] 4638 	mov	r5,#0x80
                                   4639 ;	calc.c:59: return;
      001871                       4640 00432$:
                                   4641 ;	calc.c:57: for (; *s; s++) putchar(*s);
      001871 8F 82            [24] 4642 	mov	dpl,r7
      001873 8E 83            [24] 4643 	mov	dph,r6
      001875 8D F0            [24] 4644 	mov	b,r5
      001877 12r00r00         [24] 4645 	lcall	__gptrget
      00187A FC               [12] 4646 	mov	r4,a
      00187B 70 03            [24] 4647 	jnz	01332$
      00187D 02r2BrA4         [24] 4648 	ljmp	00249$
      001880                       4649 01332$:
      001880 7B 00            [12] 4650 	mov	r3,#0x00
      001882 8C 82            [24] 4651 	mov	dpl,r4
      001884 8B 83            [24] 4652 	mov	dph,r3
      001886 12r00r00         [24] 4653 	lcall	_putchar
      001889 0F               [12] 4654 	inc	r7
                                   4655 ;	calc.c:232: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      00188A BF 00 E4         [24] 4656 	cjne	r7,#0x00,00432$
      00188D 0E               [12] 4657 	inc	r6
      00188E 80 E1            [24] 4658 	sjmp	00432$
      001890                       4659 00165$:
                                   4660 ;	calc.c:233: else if (!stack_pop(ctx->ps, &d1)) {
      001890 E5*00            [12] 4661 	mov	a,_bp
      001892 24 19            [12] 4662 	add	a,#0x19
      001894 FF               [12] 4663 	mov	r7,a
      001895 7E 00            [12] 4664 	mov	r6,#0x00
      001897 7D 40            [12] 4665 	mov	r5,#0x40
      001899 E5*00            [12] 4666 	mov	a,_bp
      00189B 24 0B            [12] 4667 	add	a,#0x0b
      00189D F8               [12] 4668 	mov	r0,a
      00189E 86 82            [24] 4669 	mov	dpl,@r0
      0018A0 08               [12] 4670 	inc	r0
      0018A1 86 83            [24] 4671 	mov	dph,@r0
      0018A3 08               [12] 4672 	inc	r0
      0018A4 86 F0            [24] 4673 	mov	b,@r0
      0018A6 12r00r00         [24] 4674 	lcall	__gptrget
      0018A9 FA               [12] 4675 	mov	r2,a
      0018AA A3               [24] 4676 	inc	dptr
      0018AB 12r00r00         [24] 4677 	lcall	__gptrget
      0018AE FB               [12] 4678 	mov	r3,a
      0018AF A3               [24] 4679 	inc	dptr
      0018B0 12r00r00         [24] 4680 	lcall	__gptrget
      0018B3 FC               [12] 4681 	mov	r4,a
      0018B4 C0 07            [24] 4682 	push	ar7
      0018B6 C0 06            [24] 4683 	push	ar6
      0018B8 C0 05            [24] 4684 	push	ar5
      0018BA 8A 82            [24] 4685 	mov	dpl,r2
      0018BC 8B 83            [24] 4686 	mov	dph,r3
      0018BE 8C F0            [24] 4687 	mov	b,r4
      0018C0 12r00r00         [24] 4688 	lcall	_stack_pop
      0018C3 AB 82            [24] 4689 	mov	r3,dpl
      0018C5 AC 83            [24] 4690 	mov	r4,dph
      0018C7 15 81            [12] 4691 	dec	sp
      0018C9 15 81            [12] 4692 	dec	sp
      0018CB 15 81            [12] 4693 	dec	sp
      0018CD EB               [12] 4694 	mov	a,r3
      0018CE 4C               [12] 4695 	orl	a,r4
      0018CF 70 63            [24] 4696 	jnz	00162$
                                   4697 ;	calc.c:234: (void)stack_push(ctx->ps, d0);
      0018D1 E5*00            [12] 4698 	mov	a,_bp
      0018D3 24 0B            [12] 4699 	add	a,#0x0b
      0018D5 F8               [12] 4700 	mov	r0,a
      0018D6 86 82            [24] 4701 	mov	dpl,@r0
      0018D8 08               [12] 4702 	inc	r0
      0018D9 86 83            [24] 4703 	mov	dph,@r0
      0018DB 08               [12] 4704 	inc	r0
      0018DC 86 F0            [24] 4705 	mov	b,@r0
      0018DE 12r00r00         [24] 4706 	lcall	__gptrget
      0018E1 FA               [12] 4707 	mov	r2,a
      0018E2 A3               [24] 4708 	inc	dptr
      0018E3 12r00r00         [24] 4709 	lcall	__gptrget
      0018E6 FB               [12] 4710 	mov	r3,a
      0018E7 A3               [24] 4711 	inc	dptr
      0018E8 12r00r00         [24] 4712 	lcall	__gptrget
      0018EB FC               [12] 4713 	mov	r4,a
      0018EC E5*00            [12] 4714 	mov	a,_bp
      0018EE 24 15            [12] 4715 	add	a,#0x15
      0018F0 F8               [12] 4716 	mov	r0,a
      0018F1 E6               [12] 4717 	mov	a,@r0
      0018F2 C0 E0            [24] 4718 	push	acc
      0018F4 08               [12] 4719 	inc	r0
      0018F5 E6               [12] 4720 	mov	a,@r0
      0018F6 C0 E0            [24] 4721 	push	acc
      0018F8 08               [12] 4722 	inc	r0
      0018F9 E6               [12] 4723 	mov	a,@r0
      0018FA C0 E0            [24] 4724 	push	acc
      0018FC 08               [12] 4725 	inc	r0
      0018FD E6               [12] 4726 	mov	a,@r0
      0018FE C0 E0            [24] 4727 	push	acc
      001900 8A 82            [24] 4728 	mov	dpl,r2
      001902 8B 83            [24] 4729 	mov	dph,r3
      001904 8C F0            [24] 4730 	mov	b,r4
      001906 12r00r00         [24] 4731 	lcall	_stack_push
      001909 E5 81            [12] 4732 	mov	a,sp
      00190B 24 FC            [12] 4733 	add	a,#0xfc
      00190D F5 81            [12] 4734 	mov	sp,a
                                   4735 ;	calc.c:235: printstr("\r\nstack underflow\r\n");
      00190F 7Fr4E            [12] 4736 	mov	r7,#___str_10
      001911 7Es00            [12] 4737 	mov	r6,#(___str_10 >> 8)
      001913 7D 80            [12] 4738 	mov	r5,#0x80
                                   4739 ;	calc.c:59: return;
      001915                       4740 00435$:
                                   4741 ;	calc.c:57: for (; *s; s++) putchar(*s);
      001915 8F 82            [24] 4742 	mov	dpl,r7
      001917 8E 83            [24] 4743 	mov	dph,r6
      001919 8D F0            [24] 4744 	mov	b,r5
      00191B 12r00r00         [24] 4745 	lcall	__gptrget
      00191E FC               [12] 4746 	mov	r4,a
      00191F 70 03            [24] 4747 	jnz	01335$
      001921 02r2BrA4         [24] 4748 	ljmp	00249$
      001924                       4749 01335$:
      001924 7B 00            [12] 4750 	mov	r3,#0x00
      001926 8C 82            [24] 4751 	mov	dpl,r4
      001928 8B 83            [24] 4752 	mov	dph,r3
      00192A 12r00r00         [24] 4753 	lcall	_putchar
      00192D 0F               [12] 4754 	inc	r7
                                   4755 ;	calc.c:235: printstr("\r\nstack underflow\r\n");
      00192E BF 00 E4         [24] 4756 	cjne	r7,#0x00,00435$
      001931 0E               [12] 4757 	inc	r6
      001932 80 E1            [24] 4758 	sjmp	00435$
      001934                       4759 00162$:
                                   4760 ;	calc.c:237: d1 -= d0;
      001934 E5*00            [12] 4761 	mov	a,_bp
      001936 24 19            [12] 4762 	add	a,#0x19
      001938 F8               [12] 4763 	mov	r0,a
      001939 E5*00            [12] 4764 	mov	a,_bp
      00193B 24 15            [12] 4765 	add	a,#0x15
      00193D F9               [12] 4766 	mov	r1,a
      00193E E6               [12] 4767 	mov	a,@r0
      00193F C3               [12] 4768 	clr	c
      001940 97               [12] 4769 	subb	a,@r1
      001941 F6               [12] 4770 	mov	@r0,a
      001942 08               [12] 4771 	inc	r0
      001943 E6               [12] 4772 	mov	a,@r0
      001944 09               [12] 4773 	inc	r1
      001945 97               [12] 4774 	subb	a,@r1
      001946 F6               [12] 4775 	mov	@r0,a
      001947 08               [12] 4776 	inc	r0
      001948 E6               [12] 4777 	mov	a,@r0
      001949 09               [12] 4778 	inc	r1
      00194A 97               [12] 4779 	subb	a,@r1
      00194B F6               [12] 4780 	mov	@r0,a
      00194C 08               [12] 4781 	inc	r0
      00194D E6               [12] 4782 	mov	a,@r0
      00194E 09               [12] 4783 	inc	r1
      00194F 97               [12] 4784 	subb	a,@r1
      001950 F6               [12] 4785 	mov	@r0,a
                                   4786 ;	calc.c:238: (void)stack_push(ctx->ps, d1);
      001951 E5*00            [12] 4787 	mov	a,_bp
      001953 24 0B            [12] 4788 	add	a,#0x0b
      001955 F8               [12] 4789 	mov	r0,a
      001956 86 82            [24] 4790 	mov	dpl,@r0
      001958 08               [12] 4791 	inc	r0
      001959 86 83            [24] 4792 	mov	dph,@r0
      00195B 08               [12] 4793 	inc	r0
      00195C 86 F0            [24] 4794 	mov	b,@r0
      00195E 12r00r00         [24] 4795 	lcall	__gptrget
      001961 FA               [12] 4796 	mov	r2,a
      001962 A3               [24] 4797 	inc	dptr
      001963 12r00r00         [24] 4798 	lcall	__gptrget
      001966 FB               [12] 4799 	mov	r3,a
      001967 A3               [24] 4800 	inc	dptr
      001968 12r00r00         [24] 4801 	lcall	__gptrget
      00196B FC               [12] 4802 	mov	r4,a
      00196C E5*00            [12] 4803 	mov	a,_bp
      00196E 24 19            [12] 4804 	add	a,#0x19
      001970 F8               [12] 4805 	mov	r0,a
      001971 E6               [12] 4806 	mov	a,@r0
      001972 C0 E0            [24] 4807 	push	acc
      001974 08               [12] 4808 	inc	r0
      001975 E6               [12] 4809 	mov	a,@r0
      001976 C0 E0            [24] 4810 	push	acc
      001978 08               [12] 4811 	inc	r0
      001979 E6               [12] 4812 	mov	a,@r0
      00197A C0 E0            [24] 4813 	push	acc
      00197C 08               [12] 4814 	inc	r0
      00197D E6               [12] 4815 	mov	a,@r0
      00197E C0 E0            [24] 4816 	push	acc
      001980 8A 82            [24] 4817 	mov	dpl,r2
      001982 8B 83            [24] 4818 	mov	dph,r3
      001984 8C F0            [24] 4819 	mov	b,r4
      001986 12r00r00         [24] 4820 	lcall	_stack_push
      001989 E5 81            [12] 4821 	mov	a,sp
      00198B 24 FC            [12] 4822 	add	a,#0xfc
      00198D F5 81            [12] 4823 	mov	sp,a
                                   4824 ;	calc.c:240: break;
      00198F 02r2BrA4         [24] 4825 	ljmp	00249$
                                   4826 ;	calc.c:241: case '*':
      001992                       4827 00167$:
                                   4828 ;	calc.c:242: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      001992 E5*00            [12] 4829 	mov	a,_bp
      001994 24 15            [12] 4830 	add	a,#0x15
      001996 FF               [12] 4831 	mov	r7,a
      001997 7E 00            [12] 4832 	mov	r6,#0x00
      001999 7D 40            [12] 4833 	mov	r5,#0x40
      00199B E5*00            [12] 4834 	mov	a,_bp
      00199D 24 12            [12] 4835 	add	a,#0x12
      00199F F8               [12] 4836 	mov	r0,a
      0019A0 E5*00            [12] 4837 	mov	a,_bp
      0019A2 24 0B            [12] 4838 	add	a,#0x0b
      0019A4 F9               [12] 4839 	mov	r1,a
      0019A5 74 11            [12] 4840 	mov	a,#0x11
      0019A7 26               [12] 4841 	add	a,@r0
      0019A8 F7               [12] 4842 	mov	@r1,a
      0019A9 74 40            [12] 4843 	mov	a,#0x40
      0019AB 08               [12] 4844 	inc	r0
      0019AC 36               [12] 4845 	addc	a,@r0
      0019AD 09               [12] 4846 	inc	r1
      0019AE F7               [12] 4847 	mov	@r1,a
      0019AF 08               [12] 4848 	inc	r0
      0019B0 09               [12] 4849 	inc	r1
      0019B1 E6               [12] 4850 	mov	a,@r0
      0019B2 F7               [12] 4851 	mov	@r1,a
      0019B3 E5*00            [12] 4852 	mov	a,_bp
      0019B5 24 0B            [12] 4853 	add	a,#0x0b
      0019B7 F8               [12] 4854 	mov	r0,a
      0019B8 86 82            [24] 4855 	mov	dpl,@r0
      0019BA 08               [12] 4856 	inc	r0
      0019BB 86 83            [24] 4857 	mov	dph,@r0
      0019BD 08               [12] 4858 	inc	r0
      0019BE 86 F0            [24] 4859 	mov	b,@r0
      0019C0 12r00r00         [24] 4860 	lcall	__gptrget
      0019C3 FA               [12] 4861 	mov	r2,a
      0019C4 A3               [24] 4862 	inc	dptr
      0019C5 12r00r00         [24] 4863 	lcall	__gptrget
      0019C8 FB               [12] 4864 	mov	r3,a
      0019C9 A3               [24] 4865 	inc	dptr
      0019CA 12r00r00         [24] 4866 	lcall	__gptrget
      0019CD FC               [12] 4867 	mov	r4,a
      0019CE C0 07            [24] 4868 	push	ar7
      0019D0 C0 06            [24] 4869 	push	ar6
      0019D2 C0 05            [24] 4870 	push	ar5
      0019D4 8A 82            [24] 4871 	mov	dpl,r2
      0019D6 8B 83            [24] 4872 	mov	dph,r3
      0019D8 8C F0            [24] 4873 	mov	b,r4
      0019DA 12r00r00         [24] 4874 	lcall	_stack_pop
      0019DD AB 82            [24] 4875 	mov	r3,dpl
      0019DF AC 83            [24] 4876 	mov	r4,dph
      0019E1 15 81            [12] 4877 	dec	sp
      0019E3 15 81            [12] 4878 	dec	sp
      0019E5 15 81            [12] 4879 	dec	sp
      0019E7 EB               [12] 4880 	mov	a,r3
      0019E8 4C               [12] 4881 	orl	a,r4
      0019E9 70 25            [24] 4882 	jnz	00172$
      0019EB 7Fr4E            [12] 4883 	mov	r7,#___str_10
      0019ED 7Es00            [12] 4884 	mov	r6,#(___str_10 >> 8)
      0019EF 7D 80            [12] 4885 	mov	r5,#0x80
                                   4886 ;	calc.c:59: return;
      0019F1                       4887 00438$:
                                   4888 ;	calc.c:57: for (; *s; s++) putchar(*s);
      0019F1 8F 82            [24] 4889 	mov	dpl,r7
      0019F3 8E 83            [24] 4890 	mov	dph,r6
      0019F5 8D F0            [24] 4891 	mov	b,r5
      0019F7 12r00r00         [24] 4892 	lcall	__gptrget
      0019FA FC               [12] 4893 	mov	r4,a
      0019FB 70 03            [24] 4894 	jnz	01338$
      0019FD 02r2BrA4         [24] 4895 	ljmp	00249$
      001A00                       4896 01338$:
      001A00 7B 00            [12] 4897 	mov	r3,#0x00
      001A02 8C 82            [24] 4898 	mov	dpl,r4
      001A04 8B 83            [24] 4899 	mov	dph,r3
      001A06 12r00r00         [24] 4900 	lcall	_putchar
      001A09 0F               [12] 4901 	inc	r7
                                   4902 ;	calc.c:242: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      001A0A BF 00 E4         [24] 4903 	cjne	r7,#0x00,00438$
      001A0D 0E               [12] 4904 	inc	r6
      001A0E 80 E1            [24] 4905 	sjmp	00438$
      001A10                       4906 00172$:
                                   4907 ;	calc.c:243: else if (!stack_pop(ctx->ps, &d1)) {
      001A10 E5*00            [12] 4908 	mov	a,_bp
      001A12 24 19            [12] 4909 	add	a,#0x19
      001A14 FF               [12] 4910 	mov	r7,a
      001A15 7E 00            [12] 4911 	mov	r6,#0x00
      001A17 7D 40            [12] 4912 	mov	r5,#0x40
      001A19 E5*00            [12] 4913 	mov	a,_bp
      001A1B 24 0B            [12] 4914 	add	a,#0x0b
      001A1D F8               [12] 4915 	mov	r0,a
      001A1E 86 82            [24] 4916 	mov	dpl,@r0
      001A20 08               [12] 4917 	inc	r0
      001A21 86 83            [24] 4918 	mov	dph,@r0
      001A23 08               [12] 4919 	inc	r0
      001A24 86 F0            [24] 4920 	mov	b,@r0
      001A26 12r00r00         [24] 4921 	lcall	__gptrget
      001A29 FA               [12] 4922 	mov	r2,a
      001A2A A3               [24] 4923 	inc	dptr
      001A2B 12r00r00         [24] 4924 	lcall	__gptrget
      001A2E FB               [12] 4925 	mov	r3,a
      001A2F A3               [24] 4926 	inc	dptr
      001A30 12r00r00         [24] 4927 	lcall	__gptrget
      001A33 FC               [12] 4928 	mov	r4,a
      001A34 C0 07            [24] 4929 	push	ar7
      001A36 C0 06            [24] 4930 	push	ar6
      001A38 C0 05            [24] 4931 	push	ar5
      001A3A 8A 82            [24] 4932 	mov	dpl,r2
      001A3C 8B 83            [24] 4933 	mov	dph,r3
      001A3E 8C F0            [24] 4934 	mov	b,r4
      001A40 12r00r00         [24] 4935 	lcall	_stack_pop
      001A43 AB 82            [24] 4936 	mov	r3,dpl
      001A45 AC 83            [24] 4937 	mov	r4,dph
      001A47 15 81            [12] 4938 	dec	sp
      001A49 15 81            [12] 4939 	dec	sp
      001A4B 15 81            [12] 4940 	dec	sp
      001A4D EB               [12] 4941 	mov	a,r3
      001A4E 4C               [12] 4942 	orl	a,r4
      001A4F 70 63            [24] 4943 	jnz	00169$
                                   4944 ;	calc.c:244: (void)stack_push(ctx->ps, d0);
      001A51 E5*00            [12] 4945 	mov	a,_bp
      001A53 24 0B            [12] 4946 	add	a,#0x0b
      001A55 F8               [12] 4947 	mov	r0,a
      001A56 86 82            [24] 4948 	mov	dpl,@r0
      001A58 08               [12] 4949 	inc	r0
      001A59 86 83            [24] 4950 	mov	dph,@r0
      001A5B 08               [12] 4951 	inc	r0
      001A5C 86 F0            [24] 4952 	mov	b,@r0
      001A5E 12r00r00         [24] 4953 	lcall	__gptrget
      001A61 FA               [12] 4954 	mov	r2,a
      001A62 A3               [24] 4955 	inc	dptr
      001A63 12r00r00         [24] 4956 	lcall	__gptrget
      001A66 FB               [12] 4957 	mov	r3,a
      001A67 A3               [24] 4958 	inc	dptr
      001A68 12r00r00         [24] 4959 	lcall	__gptrget
      001A6B FC               [12] 4960 	mov	r4,a
      001A6C E5*00            [12] 4961 	mov	a,_bp
      001A6E 24 15            [12] 4962 	add	a,#0x15
      001A70 F8               [12] 4963 	mov	r0,a
      001A71 E6               [12] 4964 	mov	a,@r0
      001A72 C0 E0            [24] 4965 	push	acc
      001A74 08               [12] 4966 	inc	r0
      001A75 E6               [12] 4967 	mov	a,@r0
      001A76 C0 E0            [24] 4968 	push	acc
      001A78 08               [12] 4969 	inc	r0
      001A79 E6               [12] 4970 	mov	a,@r0
      001A7A C0 E0            [24] 4971 	push	acc
      001A7C 08               [12] 4972 	inc	r0
      001A7D E6               [12] 4973 	mov	a,@r0
      001A7E C0 E0            [24] 4974 	push	acc
      001A80 8A 82            [24] 4975 	mov	dpl,r2
      001A82 8B 83            [24] 4976 	mov	dph,r3
      001A84 8C F0            [24] 4977 	mov	b,r4
      001A86 12r00r00         [24] 4978 	lcall	_stack_push
      001A89 E5 81            [12] 4979 	mov	a,sp
      001A8B 24 FC            [12] 4980 	add	a,#0xfc
      001A8D F5 81            [12] 4981 	mov	sp,a
                                   4982 ;	calc.c:245: printstr("\r\nstack underflow\r\n");
      001A8F 7Fr4E            [12] 4983 	mov	r7,#___str_10
      001A91 7Es00            [12] 4984 	mov	r6,#(___str_10 >> 8)
      001A93 7D 80            [12] 4985 	mov	r5,#0x80
                                   4986 ;	calc.c:59: return;
      001A95                       4987 00441$:
                                   4988 ;	calc.c:57: for (; *s; s++) putchar(*s);
      001A95 8F 82            [24] 4989 	mov	dpl,r7
      001A97 8E 83            [24] 4990 	mov	dph,r6
      001A99 8D F0            [24] 4991 	mov	b,r5
      001A9B 12r00r00         [24] 4992 	lcall	__gptrget
      001A9E FC               [12] 4993 	mov	r4,a
      001A9F 70 03            [24] 4994 	jnz	01341$
      001AA1 02r2BrA4         [24] 4995 	ljmp	00249$
      001AA4                       4996 01341$:
      001AA4 7B 00            [12] 4997 	mov	r3,#0x00
      001AA6 8C 82            [24] 4998 	mov	dpl,r4
      001AA8 8B 83            [24] 4999 	mov	dph,r3
      001AAA 12r00r00         [24] 5000 	lcall	_putchar
      001AAD 0F               [12] 5001 	inc	r7
                                   5002 ;	calc.c:245: printstr("\r\nstack underflow\r\n");
      001AAE BF 00 E4         [24] 5003 	cjne	r7,#0x00,00441$
      001AB1 0E               [12] 5004 	inc	r6
      001AB2 80 E1            [24] 5005 	sjmp	00441$
      001AB4                       5006 00169$:
                                   5007 ;	calc.c:247: d1 *= d0;
      001AB4 E5*00            [12] 5008 	mov	a,_bp
      001AB6 24 15            [12] 5009 	add	a,#0x15
      001AB8 F8               [12] 5010 	mov	r0,a
      001AB9 E6               [12] 5011 	mov	a,@r0
      001ABA C0 E0            [24] 5012 	push	acc
      001ABC 08               [12] 5013 	inc	r0
      001ABD E6               [12] 5014 	mov	a,@r0
      001ABE C0 E0            [24] 5015 	push	acc
      001AC0 08               [12] 5016 	inc	r0
      001AC1 E6               [12] 5017 	mov	a,@r0
      001AC2 C0 E0            [24] 5018 	push	acc
      001AC4 08               [12] 5019 	inc	r0
      001AC5 E6               [12] 5020 	mov	a,@r0
      001AC6 C0 E0            [24] 5021 	push	acc
      001AC8 E5*00            [12] 5022 	mov	a,_bp
      001ACA 24 19            [12] 5023 	add	a,#0x19
      001ACC F8               [12] 5024 	mov	r0,a
      001ACD 86 82            [24] 5025 	mov	dpl,@r0
      001ACF 08               [12] 5026 	inc	r0
      001AD0 86 83            [24] 5027 	mov	dph,@r0
      001AD2 08               [12] 5028 	inc	r0
      001AD3 86 F0            [24] 5029 	mov	b,@r0
      001AD5 08               [12] 5030 	inc	r0
      001AD6 E6               [12] 5031 	mov	a,@r0
      001AD7 12r00r00         [24] 5032 	lcall	__mullong
      001ADA AF 82            [24] 5033 	mov	r7,dpl
      001ADC AE 83            [24] 5034 	mov	r6,dph
      001ADE AD F0            [24] 5035 	mov	r5,b
      001AE0 FC               [12] 5036 	mov	r4,a
      001AE1 E5 81            [12] 5037 	mov	a,sp
      001AE3 24 FC            [12] 5038 	add	a,#0xfc
      001AE5 F5 81            [12] 5039 	mov	sp,a
      001AE7 E5*00            [12] 5040 	mov	a,_bp
      001AE9 24 19            [12] 5041 	add	a,#0x19
      001AEB F8               [12] 5042 	mov	r0,a
      001AEC A6 07            [24] 5043 	mov	@r0,ar7
      001AEE 08               [12] 5044 	inc	r0
      001AEF A6 06            [24] 5045 	mov	@r0,ar6
      001AF1 08               [12] 5046 	inc	r0
      001AF2 A6 05            [24] 5047 	mov	@r0,ar5
      001AF4 08               [12] 5048 	inc	r0
      001AF5 A6 04            [24] 5049 	mov	@r0,ar4
                                   5050 ;	calc.c:248: (void)stack_push(ctx->ps, d1);
      001AF7 E5*00            [12] 5051 	mov	a,_bp
      001AF9 24 0B            [12] 5052 	add	a,#0x0b
      001AFB F8               [12] 5053 	mov	r0,a
      001AFC 86 82            [24] 5054 	mov	dpl,@r0
      001AFE 08               [12] 5055 	inc	r0
      001AFF 86 83            [24] 5056 	mov	dph,@r0
      001B01 08               [12] 5057 	inc	r0
      001B02 86 F0            [24] 5058 	mov	b,@r0
      001B04 12r00r00         [24] 5059 	lcall	__gptrget
      001B07 FA               [12] 5060 	mov	r2,a
      001B08 A3               [24] 5061 	inc	dptr
      001B09 12r00r00         [24] 5062 	lcall	__gptrget
      001B0C FB               [12] 5063 	mov	r3,a
      001B0D A3               [24] 5064 	inc	dptr
      001B0E 12r00r00         [24] 5065 	lcall	__gptrget
      001B11 FC               [12] 5066 	mov	r4,a
      001B12 E5*00            [12] 5067 	mov	a,_bp
      001B14 24 19            [12] 5068 	add	a,#0x19
      001B16 F8               [12] 5069 	mov	r0,a
      001B17 E6               [12] 5070 	mov	a,@r0
      001B18 C0 E0            [24] 5071 	push	acc
      001B1A 08               [12] 5072 	inc	r0
      001B1B E6               [12] 5073 	mov	a,@r0
      001B1C C0 E0            [24] 5074 	push	acc
      001B1E 08               [12] 5075 	inc	r0
      001B1F E6               [12] 5076 	mov	a,@r0
      001B20 C0 E0            [24] 5077 	push	acc
      001B22 08               [12] 5078 	inc	r0
      001B23 E6               [12] 5079 	mov	a,@r0
      001B24 C0 E0            [24] 5080 	push	acc
      001B26 8A 82            [24] 5081 	mov	dpl,r2
      001B28 8B 83            [24] 5082 	mov	dph,r3
      001B2A 8C F0            [24] 5083 	mov	b,r4
      001B2C 12r00r00         [24] 5084 	lcall	_stack_push
      001B2F E5 81            [12] 5085 	mov	a,sp
      001B31 24 FC            [12] 5086 	add	a,#0xfc
      001B33 F5 81            [12] 5087 	mov	sp,a
                                   5088 ;	calc.c:250: break;
      001B35 02r2BrA4         [24] 5089 	ljmp	00249$
                                   5090 ;	calc.c:252: case '\\':
      001B38                       5091 00175$:
                                   5092 ;	calc.c:253: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      001B38 C0 05            [24] 5093 	push	ar5
      001B3A C0 06            [24] 5094 	push	ar6
      001B3C C0 07            [24] 5095 	push	ar7
      001B3E E5*00            [12] 5096 	mov	a,_bp
      001B40 24 15            [12] 5097 	add	a,#0x15
      001B42 FC               [12] 5098 	mov	r4,a
      001B43 7B 00            [12] 5099 	mov	r3,#0x00
      001B45 7A 40            [12] 5100 	mov	r2,#0x40
      001B47 E5*00            [12] 5101 	mov	a,_bp
      001B49 24 12            [12] 5102 	add	a,#0x12
      001B4B F8               [12] 5103 	mov	r0,a
      001B4C E5*00            [12] 5104 	mov	a,_bp
      001B4E 24 0B            [12] 5105 	add	a,#0x0b
      001B50 F9               [12] 5106 	mov	r1,a
      001B51 74 11            [12] 5107 	mov	a,#0x11
      001B53 26               [12] 5108 	add	a,@r0
      001B54 F7               [12] 5109 	mov	@r1,a
      001B55 74 40            [12] 5110 	mov	a,#0x40
      001B57 08               [12] 5111 	inc	r0
      001B58 36               [12] 5112 	addc	a,@r0
      001B59 09               [12] 5113 	inc	r1
      001B5A F7               [12] 5114 	mov	@r1,a
      001B5B 08               [12] 5115 	inc	r0
      001B5C 09               [12] 5116 	inc	r1
      001B5D E6               [12] 5117 	mov	a,@r0
      001B5E F7               [12] 5118 	mov	@r1,a
      001B5F E5*00            [12] 5119 	mov	a,_bp
      001B61 24 0B            [12] 5120 	add	a,#0x0b
      001B63 F8               [12] 5121 	mov	r0,a
      001B64 86 82            [24] 5122 	mov	dpl,@r0
      001B66 08               [12] 5123 	inc	r0
      001B67 86 83            [24] 5124 	mov	dph,@r0
      001B69 08               [12] 5125 	inc	r0
      001B6A 86 F0            [24] 5126 	mov	b,@r0
      001B6C 12r00r00         [24] 5127 	lcall	__gptrget
      001B6F FD               [12] 5128 	mov	r5,a
      001B70 A3               [24] 5129 	inc	dptr
      001B71 12r00r00         [24] 5130 	lcall	__gptrget
      001B74 FE               [12] 5131 	mov	r6,a
      001B75 A3               [24] 5132 	inc	dptr
      001B76 12r00r00         [24] 5133 	lcall	__gptrget
      001B79 FF               [12] 5134 	mov	r7,a
      001B7A C0 05            [24] 5135 	push	ar5
      001B7C C0 04            [24] 5136 	push	ar4
      001B7E C0 03            [24] 5137 	push	ar3
      001B80 C0 02            [24] 5138 	push	ar2
      001B82 8D 82            [24] 5139 	mov	dpl,r5
      001B84 8E 83            [24] 5140 	mov	dph,r6
      001B86 8F F0            [24] 5141 	mov	b,r7
      001B88 12r00r00         [24] 5142 	lcall	_stack_pop
      001B8B AE 82            [24] 5143 	mov	r6,dpl
      001B8D AF 83            [24] 5144 	mov	r7,dph
      001B8F 15 81            [12] 5145 	dec	sp
      001B91 15 81            [12] 5146 	dec	sp
      001B93 15 81            [12] 5147 	dec	sp
      001B95 D0 05            [24] 5148 	pop	ar5
      001B97 EE               [12] 5149 	mov	a,r6
      001B98 4F               [12] 5150 	orl	a,r7
      001B99 D0 07            [24] 5151 	pop	ar7
      001B9B D0 06            [24] 5152 	pop	ar6
      001B9D D0 05            [24] 5153 	pop	ar5
      001B9F 70 25            [24] 5154 	jnz	00186$
      001BA1 7Fr4E            [12] 5155 	mov	r7,#___str_10
      001BA3 7Es00            [12] 5156 	mov	r6,#(___str_10 >> 8)
      001BA5 7D 80            [12] 5157 	mov	r5,#0x80
                                   5158 ;	calc.c:59: return;
      001BA7                       5159 00444$:
                                   5160 ;	calc.c:57: for (; *s; s++) putchar(*s);
      001BA7 8F 82            [24] 5161 	mov	dpl,r7
      001BA9 8E 83            [24] 5162 	mov	dph,r6
      001BAB 8D F0            [24] 5163 	mov	b,r5
      001BAD 12r00r00         [24] 5164 	lcall	__gptrget
      001BB0 FC               [12] 5165 	mov	r4,a
      001BB1 70 03            [24] 5166 	jnz	01344$
      001BB3 02r2BrA4         [24] 5167 	ljmp	00249$
      001BB6                       5168 01344$:
      001BB6 7B 00            [12] 5169 	mov	r3,#0x00
      001BB8 8C 82            [24] 5170 	mov	dpl,r4
      001BBA 8B 83            [24] 5171 	mov	dph,r3
      001BBC 12r00r00         [24] 5172 	lcall	_putchar
      001BBF 0F               [12] 5173 	inc	r7
                                   5174 ;	calc.c:253: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      001BC0 BF 00 E4         [24] 5175 	cjne	r7,#0x00,00444$
      001BC3 0E               [12] 5176 	inc	r6
      001BC4 80 E1            [24] 5177 	sjmp	00444$
      001BC6                       5178 00186$:
                                   5179 ;	calc.c:254: else if (!stack_pop(ctx->ps, &d1)) {
      001BC6 C0 05            [24] 5180 	push	ar5
      001BC8 C0 06            [24] 5181 	push	ar6
      001BCA C0 07            [24] 5182 	push	ar7
      001BCC E5*00            [12] 5183 	mov	a,_bp
      001BCE 24 19            [12] 5184 	add	a,#0x19
      001BD0 FC               [12] 5185 	mov	r4,a
      001BD1 7B 00            [12] 5186 	mov	r3,#0x00
      001BD3 7A 40            [12] 5187 	mov	r2,#0x40
      001BD5 E5*00            [12] 5188 	mov	a,_bp
      001BD7 24 0B            [12] 5189 	add	a,#0x0b
      001BD9 F8               [12] 5190 	mov	r0,a
      001BDA 86 82            [24] 5191 	mov	dpl,@r0
      001BDC 08               [12] 5192 	inc	r0
      001BDD 86 83            [24] 5193 	mov	dph,@r0
      001BDF 08               [12] 5194 	inc	r0
      001BE0 86 F0            [24] 5195 	mov	b,@r0
      001BE2 12r00r00         [24] 5196 	lcall	__gptrget
      001BE5 FD               [12] 5197 	mov	r5,a
      001BE6 A3               [24] 5198 	inc	dptr
      001BE7 12r00r00         [24] 5199 	lcall	__gptrget
      001BEA FE               [12] 5200 	mov	r6,a
      001BEB A3               [24] 5201 	inc	dptr
      001BEC 12r00r00         [24] 5202 	lcall	__gptrget
      001BEF FF               [12] 5203 	mov	r7,a
      001BF0 C0 05            [24] 5204 	push	ar5
      001BF2 C0 04            [24] 5205 	push	ar4
      001BF4 C0 03            [24] 5206 	push	ar3
      001BF6 C0 02            [24] 5207 	push	ar2
      001BF8 8D 82            [24] 5208 	mov	dpl,r5
      001BFA 8E 83            [24] 5209 	mov	dph,r6
      001BFC 8F F0            [24] 5210 	mov	b,r7
      001BFE 12r00r00         [24] 5211 	lcall	_stack_pop
      001C01 AE 82            [24] 5212 	mov	r6,dpl
      001C03 AF 83            [24] 5213 	mov	r7,dph
      001C05 15 81            [12] 5214 	dec	sp
      001C07 15 81            [12] 5215 	dec	sp
      001C09 15 81            [12] 5216 	dec	sp
      001C0B D0 05            [24] 5217 	pop	ar5
      001C0D EE               [12] 5218 	mov	a,r6
      001C0E 4F               [12] 5219 	orl	a,r7
      001C0F D0 07            [24] 5220 	pop	ar7
      001C11 D0 06            [24] 5221 	pop	ar6
      001C13 D0 05            [24] 5222 	pop	ar5
      001C15 70 63            [24] 5223 	jnz	00183$
                                   5224 ;	calc.c:255: (void)stack_push(ctx->ps, d0);
      001C17 E5*00            [12] 5225 	mov	a,_bp
      001C19 24 0B            [12] 5226 	add	a,#0x0b
      001C1B F8               [12] 5227 	mov	r0,a
      001C1C 86 82            [24] 5228 	mov	dpl,@r0
      001C1E 08               [12] 5229 	inc	r0
      001C1F 86 83            [24] 5230 	mov	dph,@r0
      001C21 08               [12] 5231 	inc	r0
      001C22 86 F0            [24] 5232 	mov	b,@r0
      001C24 12r00r00         [24] 5233 	lcall	__gptrget
      001C27 FA               [12] 5234 	mov	r2,a
      001C28 A3               [24] 5235 	inc	dptr
      001C29 12r00r00         [24] 5236 	lcall	__gptrget
      001C2C FB               [12] 5237 	mov	r3,a
      001C2D A3               [24] 5238 	inc	dptr
      001C2E 12r00r00         [24] 5239 	lcall	__gptrget
      001C31 FC               [12] 5240 	mov	r4,a
      001C32 E5*00            [12] 5241 	mov	a,_bp
      001C34 24 15            [12] 5242 	add	a,#0x15
      001C36 F8               [12] 5243 	mov	r0,a
      001C37 E6               [12] 5244 	mov	a,@r0
      001C38 C0 E0            [24] 5245 	push	acc
      001C3A 08               [12] 5246 	inc	r0
      001C3B E6               [12] 5247 	mov	a,@r0
      001C3C C0 E0            [24] 5248 	push	acc
      001C3E 08               [12] 5249 	inc	r0
      001C3F E6               [12] 5250 	mov	a,@r0
      001C40 C0 E0            [24] 5251 	push	acc
      001C42 08               [12] 5252 	inc	r0
      001C43 E6               [12] 5253 	mov	a,@r0
      001C44 C0 E0            [24] 5254 	push	acc
      001C46 8A 82            [24] 5255 	mov	dpl,r2
      001C48 8B 83            [24] 5256 	mov	dph,r3
      001C4A 8C F0            [24] 5257 	mov	b,r4
      001C4C 12r00r00         [24] 5258 	lcall	_stack_push
      001C4F E5 81            [12] 5259 	mov	a,sp
      001C51 24 FC            [12] 5260 	add	a,#0xfc
      001C53 F5 81            [12] 5261 	mov	sp,a
                                   5262 ;	calc.c:256: printstr("\r\nstack underflow\r\n");
      001C55 7Fr4E            [12] 5263 	mov	r7,#___str_10
      001C57 7Es00            [12] 5264 	mov	r6,#(___str_10 >> 8)
      001C59 7D 80            [12] 5265 	mov	r5,#0x80
                                   5266 ;	calc.c:59: return;
      001C5B                       5267 00447$:
                                   5268 ;	calc.c:57: for (; *s; s++) putchar(*s);
      001C5B 8F 82            [24] 5269 	mov	dpl,r7
      001C5D 8E 83            [24] 5270 	mov	dph,r6
      001C5F 8D F0            [24] 5271 	mov	b,r5
      001C61 12r00r00         [24] 5272 	lcall	__gptrget
      001C64 FC               [12] 5273 	mov	r4,a
      001C65 70 03            [24] 5274 	jnz	01347$
      001C67 02r2BrA4         [24] 5275 	ljmp	00249$
      001C6A                       5276 01347$:
      001C6A 7B 00            [12] 5277 	mov	r3,#0x00
      001C6C 8C 82            [24] 5278 	mov	dpl,r4
      001C6E 8B 83            [24] 5279 	mov	dph,r3
      001C70 12r00r00         [24] 5280 	lcall	_putchar
      001C73 0F               [12] 5281 	inc	r7
                                   5282 ;	calc.c:256: printstr("\r\nstack underflow\r\n");
      001C74 BF 00 E4         [24] 5283 	cjne	r7,#0x00,00447$
      001C77 0E               [12] 5284 	inc	r6
      001C78 80 E1            [24] 5285 	sjmp	00447$
      001C7A                       5286 00183$:
                                   5287 ;	calc.c:257: } else if (!d0) {
      001C7A E5*00            [12] 5288 	mov	a,_bp
      001C7C 24 15            [12] 5289 	add	a,#0x15
      001C7E F8               [12] 5290 	mov	r0,a
      001C7F E6               [12] 5291 	mov	a,@r0
      001C80 08               [12] 5292 	inc	r0
      001C81 46               [12] 5293 	orl	a,@r0
      001C82 08               [12] 5294 	inc	r0
      001C83 46               [12] 5295 	orl	a,@r0
      001C84 08               [12] 5296 	inc	r0
      001C85 46               [12] 5297 	orl	a,@r0
      001C86 60 03            [24] 5298 	jz	01349$
      001C88 02r1Dr2C         [24] 5299 	ljmp	00180$
      001C8B                       5300 01349$:
                                   5301 ;	calc.c:258: (void)stack_push(ctx->ps, d1);
      001C8B E5*00            [12] 5302 	mov	a,_bp
      001C8D 24 0B            [12] 5303 	add	a,#0x0b
      001C8F F8               [12] 5304 	mov	r0,a
      001C90 86 82            [24] 5305 	mov	dpl,@r0
      001C92 08               [12] 5306 	inc	r0
      001C93 86 83            [24] 5307 	mov	dph,@r0
      001C95 08               [12] 5308 	inc	r0
      001C96 86 F0            [24] 5309 	mov	b,@r0
      001C98 12r00r00         [24] 5310 	lcall	__gptrget
      001C9B FA               [12] 5311 	mov	r2,a
      001C9C A3               [24] 5312 	inc	dptr
      001C9D 12r00r00         [24] 5313 	lcall	__gptrget
      001CA0 FB               [12] 5314 	mov	r3,a
      001CA1 A3               [24] 5315 	inc	dptr
      001CA2 12r00r00         [24] 5316 	lcall	__gptrget
      001CA5 FC               [12] 5317 	mov	r4,a
      001CA6 E5*00            [12] 5318 	mov	a,_bp
      001CA8 24 19            [12] 5319 	add	a,#0x19
      001CAA F8               [12] 5320 	mov	r0,a
      001CAB E6               [12] 5321 	mov	a,@r0
      001CAC C0 E0            [24] 5322 	push	acc
      001CAE 08               [12] 5323 	inc	r0
      001CAF E6               [12] 5324 	mov	a,@r0
      001CB0 C0 E0            [24] 5325 	push	acc
      001CB2 08               [12] 5326 	inc	r0
      001CB3 E6               [12] 5327 	mov	a,@r0
      001CB4 C0 E0            [24] 5328 	push	acc
      001CB6 08               [12] 5329 	inc	r0
      001CB7 E6               [12] 5330 	mov	a,@r0
      001CB8 C0 E0            [24] 5331 	push	acc
      001CBA 8A 82            [24] 5332 	mov	dpl,r2
      001CBC 8B 83            [24] 5333 	mov	dph,r3
      001CBE 8C F0            [24] 5334 	mov	b,r4
      001CC0 12r00r00         [24] 5335 	lcall	_stack_push
      001CC3 E5 81            [12] 5336 	mov	a,sp
      001CC5 24 FC            [12] 5337 	add	a,#0xfc
      001CC7 F5 81            [12] 5338 	mov	sp,a
                                   5339 ;	calc.c:259: (void)stack_push(ctx->ps, d0);			
      001CC9 E5*00            [12] 5340 	mov	a,_bp
      001CCB 24 0B            [12] 5341 	add	a,#0x0b
      001CCD F8               [12] 5342 	mov	r0,a
      001CCE 86 82            [24] 5343 	mov	dpl,@r0
      001CD0 08               [12] 5344 	inc	r0
      001CD1 86 83            [24] 5345 	mov	dph,@r0
      001CD3 08               [12] 5346 	inc	r0
      001CD4 86 F0            [24] 5347 	mov	b,@r0
      001CD6 12r00r00         [24] 5348 	lcall	__gptrget
      001CD9 FA               [12] 5349 	mov	r2,a
      001CDA A3               [24] 5350 	inc	dptr
      001CDB 12r00r00         [24] 5351 	lcall	__gptrget
      001CDE FB               [12] 5352 	mov	r3,a
      001CDF A3               [24] 5353 	inc	dptr
      001CE0 12r00r00         [24] 5354 	lcall	__gptrget
      001CE3 FC               [12] 5355 	mov	r4,a
      001CE4 E5*00            [12] 5356 	mov	a,_bp
      001CE6 24 15            [12] 5357 	add	a,#0x15
      001CE8 F8               [12] 5358 	mov	r0,a
      001CE9 E6               [12] 5359 	mov	a,@r0
      001CEA C0 E0            [24] 5360 	push	acc
      001CEC 08               [12] 5361 	inc	r0
      001CED E6               [12] 5362 	mov	a,@r0
      001CEE C0 E0            [24] 5363 	push	acc
      001CF0 08               [12] 5364 	inc	r0
      001CF1 E6               [12] 5365 	mov	a,@r0
      001CF2 C0 E0            [24] 5366 	push	acc
      001CF4 08               [12] 5367 	inc	r0
      001CF5 E6               [12] 5368 	mov	a,@r0
      001CF6 C0 E0            [24] 5369 	push	acc
      001CF8 8A 82            [24] 5370 	mov	dpl,r2
      001CFA 8B 83            [24] 5371 	mov	dph,r3
      001CFC 8C F0            [24] 5372 	mov	b,r4
      001CFE 12r00r00         [24] 5373 	lcall	_stack_push
      001D01 E5 81            [12] 5374 	mov	a,sp
      001D03 24 FC            [12] 5375 	add	a,#0xfc
      001D05 F5 81            [12] 5376 	mov	sp,a
                                   5377 ;	calc.c:260: printstr("\r\ndivision by zero\r\n");
      001D07 7FrB0            [12] 5378 	mov	r7,#___str_14
      001D09 7Es00            [12] 5379 	mov	r6,#(___str_14 >> 8)
      001D0B 7D 80            [12] 5380 	mov	r5,#0x80
                                   5381 ;	calc.c:59: return;
      001D0D                       5382 00450$:
                                   5383 ;	calc.c:57: for (; *s; s++) putchar(*s);
      001D0D 8F 82            [24] 5384 	mov	dpl,r7
      001D0F 8E 83            [24] 5385 	mov	dph,r6
      001D11 8D F0            [24] 5386 	mov	b,r5
      001D13 12r00r00         [24] 5387 	lcall	__gptrget
      001D16 FC               [12] 5388 	mov	r4,a
      001D17 70 03            [24] 5389 	jnz	01350$
      001D19 02r2BrA4         [24] 5390 	ljmp	00249$
      001D1C                       5391 01350$:
      001D1C 7B 00            [12] 5392 	mov	r3,#0x00
      001D1E 8C 82            [24] 5393 	mov	dpl,r4
      001D20 8B 83            [24] 5394 	mov	dph,r3
      001D22 12r00r00         [24] 5395 	lcall	_putchar
      001D25 0F               [12] 5396 	inc	r7
                                   5397 ;	calc.c:260: printstr("\r\ndivision by zero\r\n");
      001D26 BF 00 E4         [24] 5398 	cjne	r7,#0x00,00450$
      001D29 0E               [12] 5399 	inc	r6
      001D2A 80 E1            [24] 5400 	sjmp	00450$
      001D2C                       5401 00180$:
                                   5402 ;	calc.c:262: if (ctx->digit[0] == '/') d1 /= d0;
      001D2C 8D 82            [24] 5403 	mov	dpl,r5
      001D2E 8E 83            [24] 5404 	mov	dph,r6
      001D30 8F F0            [24] 5405 	mov	b,r7
      001D32 12r00r00         [24] 5406 	lcall	__gptrget
      001D35 FC               [12] 5407 	mov	r4,a
      001D36 BC 2F 45         [24] 5408 	cjne	r4,#0x2f,00177$
      001D39 E5*00            [12] 5409 	mov	a,_bp
      001D3B 24 15            [12] 5410 	add	a,#0x15
      001D3D F8               [12] 5411 	mov	r0,a
      001D3E E6               [12] 5412 	mov	a,@r0
      001D3F C0 E0            [24] 5413 	push	acc
      001D41 08               [12] 5414 	inc	r0
      001D42 E6               [12] 5415 	mov	a,@r0
      001D43 C0 E0            [24] 5416 	push	acc
      001D45 08               [12] 5417 	inc	r0
      001D46 E6               [12] 5418 	mov	a,@r0
      001D47 C0 E0            [24] 5419 	push	acc
      001D49 08               [12] 5420 	inc	r0
      001D4A E6               [12] 5421 	mov	a,@r0
      001D4B C0 E0            [24] 5422 	push	acc
      001D4D E5*00            [12] 5423 	mov	a,_bp
      001D4F 24 19            [12] 5424 	add	a,#0x19
      001D51 F8               [12] 5425 	mov	r0,a
      001D52 86 82            [24] 5426 	mov	dpl,@r0
      001D54 08               [12] 5427 	inc	r0
      001D55 86 83            [24] 5428 	mov	dph,@r0
      001D57 08               [12] 5429 	inc	r0
      001D58 86 F0            [24] 5430 	mov	b,@r0
      001D5A 08               [12] 5431 	inc	r0
      001D5B E6               [12] 5432 	mov	a,@r0
      001D5C 12r00r00         [24] 5433 	lcall	__divslong
      001D5F AF 82            [24] 5434 	mov	r7,dpl
      001D61 AE 83            [24] 5435 	mov	r6,dph
      001D63 AD F0            [24] 5436 	mov	r5,b
      001D65 FC               [12] 5437 	mov	r4,a
      001D66 E5 81            [12] 5438 	mov	a,sp
      001D68 24 FC            [12] 5439 	add	a,#0xfc
      001D6A F5 81            [12] 5440 	mov	sp,a
      001D6C E5*00            [12] 5441 	mov	a,_bp
      001D6E 24 19            [12] 5442 	add	a,#0x19
      001D70 F8               [12] 5443 	mov	r0,a
      001D71 A6 07            [24] 5444 	mov	@r0,ar7
      001D73 08               [12] 5445 	inc	r0
      001D74 A6 06            [24] 5446 	mov	@r0,ar6
      001D76 08               [12] 5447 	inc	r0
      001D77 A6 05            [24] 5448 	mov	@r0,ar5
      001D79 08               [12] 5449 	inc	r0
      001D7A A6 04            [24] 5450 	mov	@r0,ar4
      001D7C 80 63            [24] 5451 	sjmp	00178$
      001D7E                       5452 00177$:
                                   5453 ;	calc.c:263: else d1 = (unsigned long)d1 / (unsigned long)d0;
      001D7E E5*00            [12] 5454 	mov	a,_bp
      001D80 24 19            [12] 5455 	add	a,#0x19
      001D82 F8               [12] 5456 	mov	r0,a
      001D83 86 07            [24] 5457 	mov	ar7,@r0
      001D85 08               [12] 5458 	inc	r0
      001D86 86 06            [24] 5459 	mov	ar6,@r0
      001D88 08               [12] 5460 	inc	r0
      001D89 86 05            [24] 5461 	mov	ar5,@r0
      001D8B 08               [12] 5462 	inc	r0
      001D8C 86 04            [24] 5463 	mov	ar4,@r0
      001D8E E5*00            [12] 5464 	mov	a,_bp
      001D90 24 15            [12] 5465 	add	a,#0x15
      001D92 F8               [12] 5466 	mov	r0,a
      001D93 E5*00            [12] 5467 	mov	a,_bp
      001D95 24 0E            [12] 5468 	add	a,#0x0e
      001D97 F9               [12] 5469 	mov	r1,a
      001D98 E6               [12] 5470 	mov	a,@r0
      001D99 F7               [12] 5471 	mov	@r1,a
      001D9A 08               [12] 5472 	inc	r0
      001D9B 09               [12] 5473 	inc	r1
      001D9C E6               [12] 5474 	mov	a,@r0
      001D9D F7               [12] 5475 	mov	@r1,a
      001D9E 08               [12] 5476 	inc	r0
      001D9F 09               [12] 5477 	inc	r1
      001DA0 E6               [12] 5478 	mov	a,@r0
      001DA1 F7               [12] 5479 	mov	@r1,a
      001DA2 08               [12] 5480 	inc	r0
      001DA3 09               [12] 5481 	inc	r1
      001DA4 E6               [12] 5482 	mov	a,@r0
      001DA5 F7               [12] 5483 	mov	@r1,a
      001DA6 E5*00            [12] 5484 	mov	a,_bp
      001DA8 24 0E            [12] 5485 	add	a,#0x0e
      001DAA F8               [12] 5486 	mov	r0,a
      001DAB E6               [12] 5487 	mov	a,@r0
      001DAC C0 E0            [24] 5488 	push	acc
      001DAE 08               [12] 5489 	inc	r0
      001DAF E6               [12] 5490 	mov	a,@r0
      001DB0 C0 E0            [24] 5491 	push	acc
      001DB2 08               [12] 5492 	inc	r0
      001DB3 E6               [12] 5493 	mov	a,@r0
      001DB4 C0 E0            [24] 5494 	push	acc
      001DB6 08               [12] 5495 	inc	r0
      001DB7 E6               [12] 5496 	mov	a,@r0
      001DB8 C0 E0            [24] 5497 	push	acc
      001DBA 8F 82            [24] 5498 	mov	dpl,r7
      001DBC 8E 83            [24] 5499 	mov	dph,r6
      001DBE 8D F0            [24] 5500 	mov	b,r5
      001DC0 EC               [12] 5501 	mov	a,r4
      001DC1 12r00r00         [24] 5502 	lcall	__divulong
      001DC4 AF 82            [24] 5503 	mov	r7,dpl
      001DC6 AE 83            [24] 5504 	mov	r6,dph
      001DC8 AD F0            [24] 5505 	mov	r5,b
      001DCA FC               [12] 5506 	mov	r4,a
      001DCB E5 81            [12] 5507 	mov	a,sp
      001DCD 24 FC            [12] 5508 	add	a,#0xfc
      001DCF F5 81            [12] 5509 	mov	sp,a
      001DD1 E5*00            [12] 5510 	mov	a,_bp
      001DD3 24 19            [12] 5511 	add	a,#0x19
      001DD5 F8               [12] 5512 	mov	r0,a
      001DD6 A6 07            [24] 5513 	mov	@r0,ar7
      001DD8 08               [12] 5514 	inc	r0
      001DD9 A6 06            [24] 5515 	mov	@r0,ar6
      001DDB 08               [12] 5516 	inc	r0
      001DDC A6 05            [24] 5517 	mov	@r0,ar5
      001DDE 08               [12] 5518 	inc	r0
      001DDF A6 04            [24] 5519 	mov	@r0,ar4
      001DE1                       5520 00178$:
                                   5521 ;	calc.c:264: (void)stack_push(ctx->ps, d1);
      001DE1 E5*00            [12] 5522 	mov	a,_bp
      001DE3 24 0B            [12] 5523 	add	a,#0x0b
      001DE5 F8               [12] 5524 	mov	r0,a
      001DE6 86 82            [24] 5525 	mov	dpl,@r0
      001DE8 08               [12] 5526 	inc	r0
      001DE9 86 83            [24] 5527 	mov	dph,@r0
      001DEB 08               [12] 5528 	inc	r0
      001DEC 86 F0            [24] 5529 	mov	b,@r0
      001DEE 12r00r00         [24] 5530 	lcall	__gptrget
      001DF1 FA               [12] 5531 	mov	r2,a
      001DF2 A3               [24] 5532 	inc	dptr
      001DF3 12r00r00         [24] 5533 	lcall	__gptrget
      001DF6 FB               [12] 5534 	mov	r3,a
      001DF7 A3               [24] 5535 	inc	dptr
      001DF8 12r00r00         [24] 5536 	lcall	__gptrget
      001DFB FC               [12] 5537 	mov	r4,a
      001DFC E5*00            [12] 5538 	mov	a,_bp
      001DFE 24 19            [12] 5539 	add	a,#0x19
      001E00 F8               [12] 5540 	mov	r0,a
      001E01 E6               [12] 5541 	mov	a,@r0
      001E02 C0 E0            [24] 5542 	push	acc
      001E04 08               [12] 5543 	inc	r0
      001E05 E6               [12] 5544 	mov	a,@r0
      001E06 C0 E0            [24] 5545 	push	acc
      001E08 08               [12] 5546 	inc	r0
      001E09 E6               [12] 5547 	mov	a,@r0
      001E0A C0 E0            [24] 5548 	push	acc
      001E0C 08               [12] 5549 	inc	r0
      001E0D E6               [12] 5550 	mov	a,@r0
      001E0E C0 E0            [24] 5551 	push	acc
      001E10 8A 82            [24] 5552 	mov	dpl,r2
      001E12 8B 83            [24] 5553 	mov	dph,r3
      001E14 8C F0            [24] 5554 	mov	b,r4
      001E16 12r00r00         [24] 5555 	lcall	_stack_push
      001E19 E5 81            [12] 5556 	mov	a,sp
      001E1B 24 FC            [12] 5557 	add	a,#0xfc
      001E1D F5 81            [12] 5558 	mov	sp,a
                                   5559 ;	calc.c:266: break;
      001E1F 02r2BrA4         [24] 5560 	ljmp	00249$
                                   5561 ;	calc.c:268: case '#':
      001E22                       5562 00189$:
                                   5563 ;	calc.c:269: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      001E22 C0 05            [24] 5564 	push	ar5
      001E24 C0 06            [24] 5565 	push	ar6
      001E26 C0 07            [24] 5566 	push	ar7
      001E28 E5*00            [12] 5567 	mov	a,_bp
      001E2A 24 15            [12] 5568 	add	a,#0x15
      001E2C FC               [12] 5569 	mov	r4,a
      001E2D 7B 00            [12] 5570 	mov	r3,#0x00
      001E2F 7A 40            [12] 5571 	mov	r2,#0x40
      001E31 E5*00            [12] 5572 	mov	a,_bp
      001E33 24 12            [12] 5573 	add	a,#0x12
      001E35 F8               [12] 5574 	mov	r0,a
      001E36 E5*00            [12] 5575 	mov	a,_bp
      001E38 24 0E            [12] 5576 	add	a,#0x0e
      001E3A F9               [12] 5577 	mov	r1,a
      001E3B 74 11            [12] 5578 	mov	a,#0x11
      001E3D 26               [12] 5579 	add	a,@r0
      001E3E F7               [12] 5580 	mov	@r1,a
      001E3F 74 40            [12] 5581 	mov	a,#0x40
      001E41 08               [12] 5582 	inc	r0
      001E42 36               [12] 5583 	addc	a,@r0
      001E43 09               [12] 5584 	inc	r1
      001E44 F7               [12] 5585 	mov	@r1,a
      001E45 08               [12] 5586 	inc	r0
      001E46 09               [12] 5587 	inc	r1
      001E47 E6               [12] 5588 	mov	a,@r0
      001E48 F7               [12] 5589 	mov	@r1,a
      001E49 E5*00            [12] 5590 	mov	a,_bp
      001E4B 24 0E            [12] 5591 	add	a,#0x0e
      001E4D F8               [12] 5592 	mov	r0,a
      001E4E 86 82            [24] 5593 	mov	dpl,@r0
      001E50 08               [12] 5594 	inc	r0
      001E51 86 83            [24] 5595 	mov	dph,@r0
      001E53 08               [12] 5596 	inc	r0
      001E54 86 F0            [24] 5597 	mov	b,@r0
      001E56 12r00r00         [24] 5598 	lcall	__gptrget
      001E59 FD               [12] 5599 	mov	r5,a
      001E5A A3               [24] 5600 	inc	dptr
      001E5B 12r00r00         [24] 5601 	lcall	__gptrget
      001E5E FE               [12] 5602 	mov	r6,a
      001E5F A3               [24] 5603 	inc	dptr
      001E60 12r00r00         [24] 5604 	lcall	__gptrget
      001E63 FF               [12] 5605 	mov	r7,a
      001E64 C0 05            [24] 5606 	push	ar5
      001E66 C0 04            [24] 5607 	push	ar4
      001E68 C0 03            [24] 5608 	push	ar3
      001E6A C0 02            [24] 5609 	push	ar2
      001E6C 8D 82            [24] 5610 	mov	dpl,r5
      001E6E 8E 83            [24] 5611 	mov	dph,r6
      001E70 8F F0            [24] 5612 	mov	b,r7
      001E72 12r00r00         [24] 5613 	lcall	_stack_pop
      001E75 AE 82            [24] 5614 	mov	r6,dpl
      001E77 AF 83            [24] 5615 	mov	r7,dph
      001E79 15 81            [12] 5616 	dec	sp
      001E7B 15 81            [12] 5617 	dec	sp
      001E7D 15 81            [12] 5618 	dec	sp
      001E7F D0 05            [24] 5619 	pop	ar5
      001E81 EE               [12] 5620 	mov	a,r6
      001E82 4F               [12] 5621 	orl	a,r7
      001E83 D0 07            [24] 5622 	pop	ar7
      001E85 D0 06            [24] 5623 	pop	ar6
      001E87 D0 05            [24] 5624 	pop	ar5
      001E89 70 25            [24] 5625 	jnz	00200$
      001E8B 7Fr4E            [12] 5626 	mov	r7,#___str_10
      001E8D 7Es00            [12] 5627 	mov	r6,#(___str_10 >> 8)
      001E8F 7D 80            [12] 5628 	mov	r5,#0x80
                                   5629 ;	calc.c:59: return;
      001E91                       5630 00453$:
                                   5631 ;	calc.c:57: for (; *s; s++) putchar(*s);
      001E91 8F 82            [24] 5632 	mov	dpl,r7
      001E93 8E 83            [24] 5633 	mov	dph,r6
      001E95 8D F0            [24] 5634 	mov	b,r5
      001E97 12r00r00         [24] 5635 	lcall	__gptrget
      001E9A FC               [12] 5636 	mov	r4,a
      001E9B 70 03            [24] 5637 	jnz	01355$
      001E9D 02r2BrA4         [24] 5638 	ljmp	00249$
      001EA0                       5639 01355$:
      001EA0 7B 00            [12] 5640 	mov	r3,#0x00
      001EA2 8C 82            [24] 5641 	mov	dpl,r4
      001EA4 8B 83            [24] 5642 	mov	dph,r3
      001EA6 12r00r00         [24] 5643 	lcall	_putchar
      001EA9 0F               [12] 5644 	inc	r7
                                   5645 ;	calc.c:269: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      001EAA BF 00 E4         [24] 5646 	cjne	r7,#0x00,00453$
      001EAD 0E               [12] 5647 	inc	r6
      001EAE 80 E1            [24] 5648 	sjmp	00453$
      001EB0                       5649 00200$:
                                   5650 ;	calc.c:270: else if (!stack_pop(ctx->ps, &d1)) {
      001EB0 C0 05            [24] 5651 	push	ar5
      001EB2 C0 06            [24] 5652 	push	ar6
      001EB4 C0 07            [24] 5653 	push	ar7
      001EB6 E5*00            [12] 5654 	mov	a,_bp
      001EB8 24 19            [12] 5655 	add	a,#0x19
      001EBA FC               [12] 5656 	mov	r4,a
      001EBB 7B 00            [12] 5657 	mov	r3,#0x00
      001EBD 7A 40            [12] 5658 	mov	r2,#0x40
      001EBF E5*00            [12] 5659 	mov	a,_bp
      001EC1 24 0E            [12] 5660 	add	a,#0x0e
      001EC3 F8               [12] 5661 	mov	r0,a
      001EC4 86 82            [24] 5662 	mov	dpl,@r0
      001EC6 08               [12] 5663 	inc	r0
      001EC7 86 83            [24] 5664 	mov	dph,@r0
      001EC9 08               [12] 5665 	inc	r0
      001ECA 86 F0            [24] 5666 	mov	b,@r0
      001ECC 12r00r00         [24] 5667 	lcall	__gptrget
      001ECF FD               [12] 5668 	mov	r5,a
      001ED0 A3               [24] 5669 	inc	dptr
      001ED1 12r00r00         [24] 5670 	lcall	__gptrget
      001ED4 FE               [12] 5671 	mov	r6,a
      001ED5 A3               [24] 5672 	inc	dptr
      001ED6 12r00r00         [24] 5673 	lcall	__gptrget
      001ED9 FF               [12] 5674 	mov	r7,a
      001EDA C0 05            [24] 5675 	push	ar5
      001EDC C0 04            [24] 5676 	push	ar4
      001EDE C0 03            [24] 5677 	push	ar3
      001EE0 C0 02            [24] 5678 	push	ar2
      001EE2 8D 82            [24] 5679 	mov	dpl,r5
      001EE4 8E 83            [24] 5680 	mov	dph,r6
      001EE6 8F F0            [24] 5681 	mov	b,r7
      001EE8 12r00r00         [24] 5682 	lcall	_stack_pop
      001EEB AE 82            [24] 5683 	mov	r6,dpl
      001EED AF 83            [24] 5684 	mov	r7,dph
      001EEF 15 81            [12] 5685 	dec	sp
      001EF1 15 81            [12] 5686 	dec	sp
      001EF3 15 81            [12] 5687 	dec	sp
      001EF5 D0 05            [24] 5688 	pop	ar5
      001EF7 EE               [12] 5689 	mov	a,r6
      001EF8 4F               [12] 5690 	orl	a,r7
      001EF9 D0 07            [24] 5691 	pop	ar7
      001EFB D0 06            [24] 5692 	pop	ar6
      001EFD D0 05            [24] 5693 	pop	ar5
      001EFF 70 63            [24] 5694 	jnz	00197$
                                   5695 ;	calc.c:271: (void)stack_push(ctx->ps, d0);
      001F01 E5*00            [12] 5696 	mov	a,_bp
      001F03 24 0E            [12] 5697 	add	a,#0x0e
      001F05 F8               [12] 5698 	mov	r0,a
      001F06 86 82            [24] 5699 	mov	dpl,@r0
      001F08 08               [12] 5700 	inc	r0
      001F09 86 83            [24] 5701 	mov	dph,@r0
      001F0B 08               [12] 5702 	inc	r0
      001F0C 86 F0            [24] 5703 	mov	b,@r0
      001F0E 12r00r00         [24] 5704 	lcall	__gptrget
      001F11 FA               [12] 5705 	mov	r2,a
      001F12 A3               [24] 5706 	inc	dptr
      001F13 12r00r00         [24] 5707 	lcall	__gptrget
      001F16 FB               [12] 5708 	mov	r3,a
      001F17 A3               [24] 5709 	inc	dptr
      001F18 12r00r00         [24] 5710 	lcall	__gptrget
      001F1B FC               [12] 5711 	mov	r4,a
      001F1C E5*00            [12] 5712 	mov	a,_bp
      001F1E 24 15            [12] 5713 	add	a,#0x15
      001F20 F8               [12] 5714 	mov	r0,a
      001F21 E6               [12] 5715 	mov	a,@r0
      001F22 C0 E0            [24] 5716 	push	acc
      001F24 08               [12] 5717 	inc	r0
      001F25 E6               [12] 5718 	mov	a,@r0
      001F26 C0 E0            [24] 5719 	push	acc
      001F28 08               [12] 5720 	inc	r0
      001F29 E6               [12] 5721 	mov	a,@r0
      001F2A C0 E0            [24] 5722 	push	acc
      001F2C 08               [12] 5723 	inc	r0
      001F2D E6               [12] 5724 	mov	a,@r0
      001F2E C0 E0            [24] 5725 	push	acc
      001F30 8A 82            [24] 5726 	mov	dpl,r2
      001F32 8B 83            [24] 5727 	mov	dph,r3
      001F34 8C F0            [24] 5728 	mov	b,r4
      001F36 12r00r00         [24] 5729 	lcall	_stack_push
      001F39 E5 81            [12] 5730 	mov	a,sp
      001F3B 24 FC            [12] 5731 	add	a,#0xfc
      001F3D F5 81            [12] 5732 	mov	sp,a
                                   5733 ;	calc.c:272: printstr("\r\nstack underflow\r\n");
      001F3F 7Fr4E            [12] 5734 	mov	r7,#___str_10
      001F41 7Es00            [12] 5735 	mov	r6,#(___str_10 >> 8)
      001F43 7D 80            [12] 5736 	mov	r5,#0x80
                                   5737 ;	calc.c:59: return;
      001F45                       5738 00456$:
                                   5739 ;	calc.c:57: for (; *s; s++) putchar(*s);
      001F45 8F 82            [24] 5740 	mov	dpl,r7
      001F47 8E 83            [24] 5741 	mov	dph,r6
      001F49 8D F0            [24] 5742 	mov	b,r5
      001F4B 12r00r00         [24] 5743 	lcall	__gptrget
      001F4E FC               [12] 5744 	mov	r4,a
      001F4F 70 03            [24] 5745 	jnz	01358$
      001F51 02r2BrA4         [24] 5746 	ljmp	00249$
      001F54                       5747 01358$:
      001F54 7B 00            [12] 5748 	mov	r3,#0x00
      001F56 8C 82            [24] 5749 	mov	dpl,r4
      001F58 8B 83            [24] 5750 	mov	dph,r3
      001F5A 12r00r00         [24] 5751 	lcall	_putchar
      001F5D 0F               [12] 5752 	inc	r7
                                   5753 ;	calc.c:272: printstr("\r\nstack underflow\r\n");
      001F5E BF 00 E4         [24] 5754 	cjne	r7,#0x00,00456$
      001F61 0E               [12] 5755 	inc	r6
      001F62 80 E1            [24] 5756 	sjmp	00456$
      001F64                       5757 00197$:
                                   5758 ;	calc.c:273: } else if (!d0) {
      001F64 E5*00            [12] 5759 	mov	a,_bp
      001F66 24 15            [12] 5760 	add	a,#0x15
      001F68 F8               [12] 5761 	mov	r0,a
      001F69 E6               [12] 5762 	mov	a,@r0
      001F6A 08               [12] 5763 	inc	r0
      001F6B 46               [12] 5764 	orl	a,@r0
      001F6C 08               [12] 5765 	inc	r0
      001F6D 46               [12] 5766 	orl	a,@r0
      001F6E 08               [12] 5767 	inc	r0
      001F6F 46               [12] 5768 	orl	a,@r0
      001F70 60 03            [24] 5769 	jz	01360$
      001F72 02r20r16         [24] 5770 	ljmp	00194$
      001F75                       5771 01360$:
                                   5772 ;	calc.c:274: (void)stack_push(ctx->ps, d1);
      001F75 E5*00            [12] 5773 	mov	a,_bp
      001F77 24 0E            [12] 5774 	add	a,#0x0e
      001F79 F8               [12] 5775 	mov	r0,a
      001F7A 86 82            [24] 5776 	mov	dpl,@r0
      001F7C 08               [12] 5777 	inc	r0
      001F7D 86 83            [24] 5778 	mov	dph,@r0
      001F7F 08               [12] 5779 	inc	r0
      001F80 86 F0            [24] 5780 	mov	b,@r0
      001F82 12r00r00         [24] 5781 	lcall	__gptrget
      001F85 FA               [12] 5782 	mov	r2,a
      001F86 A3               [24] 5783 	inc	dptr
      001F87 12r00r00         [24] 5784 	lcall	__gptrget
      001F8A FB               [12] 5785 	mov	r3,a
      001F8B A3               [24] 5786 	inc	dptr
      001F8C 12r00r00         [24] 5787 	lcall	__gptrget
      001F8F FC               [12] 5788 	mov	r4,a
      001F90 E5*00            [12] 5789 	mov	a,_bp
      001F92 24 19            [12] 5790 	add	a,#0x19
      001F94 F8               [12] 5791 	mov	r0,a
      001F95 E6               [12] 5792 	mov	a,@r0
      001F96 C0 E0            [24] 5793 	push	acc
      001F98 08               [12] 5794 	inc	r0
      001F99 E6               [12] 5795 	mov	a,@r0
      001F9A C0 E0            [24] 5796 	push	acc
      001F9C 08               [12] 5797 	inc	r0
      001F9D E6               [12] 5798 	mov	a,@r0
      001F9E C0 E0            [24] 5799 	push	acc
      001FA0 08               [12] 5800 	inc	r0
      001FA1 E6               [12] 5801 	mov	a,@r0
      001FA2 C0 E0            [24] 5802 	push	acc
      001FA4 8A 82            [24] 5803 	mov	dpl,r2
      001FA6 8B 83            [24] 5804 	mov	dph,r3
      001FA8 8C F0            [24] 5805 	mov	b,r4
      001FAA 12r00r00         [24] 5806 	lcall	_stack_push
      001FAD E5 81            [12] 5807 	mov	a,sp
      001FAF 24 FC            [12] 5808 	add	a,#0xfc
      001FB1 F5 81            [12] 5809 	mov	sp,a
                                   5810 ;	calc.c:275: (void)stack_push(ctx->ps, d0);			
      001FB3 E5*00            [12] 5811 	mov	a,_bp
      001FB5 24 0E            [12] 5812 	add	a,#0x0e
      001FB7 F8               [12] 5813 	mov	r0,a
      001FB8 86 82            [24] 5814 	mov	dpl,@r0
      001FBA 08               [12] 5815 	inc	r0
      001FBB 86 83            [24] 5816 	mov	dph,@r0
      001FBD 08               [12] 5817 	inc	r0
      001FBE 86 F0            [24] 5818 	mov	b,@r0
      001FC0 12r00r00         [24] 5819 	lcall	__gptrget
      001FC3 FA               [12] 5820 	mov	r2,a
      001FC4 A3               [24] 5821 	inc	dptr
      001FC5 12r00r00         [24] 5822 	lcall	__gptrget
      001FC8 FB               [12] 5823 	mov	r3,a
      001FC9 A3               [24] 5824 	inc	dptr
      001FCA 12r00r00         [24] 5825 	lcall	__gptrget
      001FCD FC               [12] 5826 	mov	r4,a
      001FCE E5*00            [12] 5827 	mov	a,_bp
      001FD0 24 15            [12] 5828 	add	a,#0x15
      001FD2 F8               [12] 5829 	mov	r0,a
      001FD3 E6               [12] 5830 	mov	a,@r0
      001FD4 C0 E0            [24] 5831 	push	acc
      001FD6 08               [12] 5832 	inc	r0
      001FD7 E6               [12] 5833 	mov	a,@r0
      001FD8 C0 E0            [24] 5834 	push	acc
      001FDA 08               [12] 5835 	inc	r0
      001FDB E6               [12] 5836 	mov	a,@r0
      001FDC C0 E0            [24] 5837 	push	acc
      001FDE 08               [12] 5838 	inc	r0
      001FDF E6               [12] 5839 	mov	a,@r0
      001FE0 C0 E0            [24] 5840 	push	acc
      001FE2 8A 82            [24] 5841 	mov	dpl,r2
      001FE4 8B 83            [24] 5842 	mov	dph,r3
      001FE6 8C F0            [24] 5843 	mov	b,r4
      001FE8 12r00r00         [24] 5844 	lcall	_stack_push
      001FEB E5 81            [12] 5845 	mov	a,sp
      001FED 24 FC            [12] 5846 	add	a,#0xfc
      001FEF F5 81            [12] 5847 	mov	sp,a
                                   5848 ;	calc.c:276: printstr("\r\ndivision by zero\r\n");
      001FF1 7FrB0            [12] 5849 	mov	r7,#___str_14
      001FF3 7Es00            [12] 5850 	mov	r6,#(___str_14 >> 8)
      001FF5 7D 80            [12] 5851 	mov	r5,#0x80
                                   5852 ;	calc.c:59: return;
      001FF7                       5853 00459$:
                                   5854 ;	calc.c:57: for (; *s; s++) putchar(*s);
      001FF7 8F 82            [24] 5855 	mov	dpl,r7
      001FF9 8E 83            [24] 5856 	mov	dph,r6
      001FFB 8D F0            [24] 5857 	mov	b,r5
      001FFD 12r00r00         [24] 5858 	lcall	__gptrget
      002000 FC               [12] 5859 	mov	r4,a
      002001 70 03            [24] 5860 	jnz	01361$
      002003 02r2BrA4         [24] 5861 	ljmp	00249$
      002006                       5862 01361$:
      002006 7B 00            [12] 5863 	mov	r3,#0x00
      002008 8C 82            [24] 5864 	mov	dpl,r4
      00200A 8B 83            [24] 5865 	mov	dph,r3
      00200C 12r00r00         [24] 5866 	lcall	_putchar
      00200F 0F               [12] 5867 	inc	r7
                                   5868 ;	calc.c:276: printstr("\r\ndivision by zero\r\n");
      002010 BF 00 E4         [24] 5869 	cjne	r7,#0x00,00459$
      002013 0E               [12] 5870 	inc	r6
      002014 80 E1            [24] 5871 	sjmp	00459$
      002016                       5872 00194$:
                                   5873 ;	calc.c:278: if (ctx->digit[0] == '%') d1 %= d0;
      002016 8D 82            [24] 5874 	mov	dpl,r5
      002018 8E 83            [24] 5875 	mov	dph,r6
      00201A 8F F0            [24] 5876 	mov	b,r7
      00201C 12r00r00         [24] 5877 	lcall	__gptrget
      00201F FD               [12] 5878 	mov	r5,a
      002020 BD 25 45         [24] 5879 	cjne	r5,#0x25,00191$
      002023 E5*00            [12] 5880 	mov	a,_bp
      002025 24 15            [12] 5881 	add	a,#0x15
      002027 F8               [12] 5882 	mov	r0,a
      002028 E6               [12] 5883 	mov	a,@r0
      002029 C0 E0            [24] 5884 	push	acc
      00202B 08               [12] 5885 	inc	r0
      00202C E6               [12] 5886 	mov	a,@r0
      00202D C0 E0            [24] 5887 	push	acc
      00202F 08               [12] 5888 	inc	r0
      002030 E6               [12] 5889 	mov	a,@r0
      002031 C0 E0            [24] 5890 	push	acc
      002033 08               [12] 5891 	inc	r0
      002034 E6               [12] 5892 	mov	a,@r0
      002035 C0 E0            [24] 5893 	push	acc
      002037 E5*00            [12] 5894 	mov	a,_bp
      002039 24 19            [12] 5895 	add	a,#0x19
      00203B F8               [12] 5896 	mov	r0,a
      00203C 86 82            [24] 5897 	mov	dpl,@r0
      00203E 08               [12] 5898 	inc	r0
      00203F 86 83            [24] 5899 	mov	dph,@r0
      002041 08               [12] 5900 	inc	r0
      002042 86 F0            [24] 5901 	mov	b,@r0
      002044 08               [12] 5902 	inc	r0
      002045 E6               [12] 5903 	mov	a,@r0
      002046 12r00r00         [24] 5904 	lcall	__modslong
      002049 AC 82            [24] 5905 	mov	r4,dpl
      00204B AD 83            [24] 5906 	mov	r5,dph
      00204D AE F0            [24] 5907 	mov	r6,b
      00204F FF               [12] 5908 	mov	r7,a
      002050 E5 81            [12] 5909 	mov	a,sp
      002052 24 FC            [12] 5910 	add	a,#0xfc
      002054 F5 81            [12] 5911 	mov	sp,a
      002056 E5*00            [12] 5912 	mov	a,_bp
      002058 24 19            [12] 5913 	add	a,#0x19
      00205A F8               [12] 5914 	mov	r0,a
      00205B A6 04            [24] 5915 	mov	@r0,ar4
      00205D 08               [12] 5916 	inc	r0
      00205E A6 05            [24] 5917 	mov	@r0,ar5
      002060 08               [12] 5918 	inc	r0
      002061 A6 06            [24] 5919 	mov	@r0,ar6
      002063 08               [12] 5920 	inc	r0
      002064 A6 07            [24] 5921 	mov	@r0,ar7
      002066 80 5F            [24] 5922 	sjmp	00192$
      002068                       5923 00191$:
                                   5924 ;	calc.c:279: else d1 = (unsigned long)d1 % (unsigned long)d0;
      002068 E5*00            [12] 5925 	mov	a,_bp
      00206A 24 19            [12] 5926 	add	a,#0x19
      00206C F8               [12] 5927 	mov	r0,a
      00206D E5*00            [12] 5928 	mov	a,_bp
      00206F 24 07            [12] 5929 	add	a,#0x07
      002071 F9               [12] 5930 	mov	r1,a
      002072 E6               [12] 5931 	mov	a,@r0
      002073 F7               [12] 5932 	mov	@r1,a
      002074 08               [12] 5933 	inc	r0
      002075 09               [12] 5934 	inc	r1
      002076 E6               [12] 5935 	mov	a,@r0
      002077 F7               [12] 5936 	mov	@r1,a
      002078 08               [12] 5937 	inc	r0
      002079 09               [12] 5938 	inc	r1
      00207A E6               [12] 5939 	mov	a,@r0
      00207B F7               [12] 5940 	mov	@r1,a
      00207C 08               [12] 5941 	inc	r0
      00207D 09               [12] 5942 	inc	r1
      00207E E6               [12] 5943 	mov	a,@r0
      00207F F7               [12] 5944 	mov	@r1,a
      002080 E5*00            [12] 5945 	mov	a,_bp
      002082 24 15            [12] 5946 	add	a,#0x15
      002084 F8               [12] 5947 	mov	r0,a
      002085 86 02            [24] 5948 	mov	ar2,@r0
      002087 08               [12] 5949 	inc	r0
      002088 86 03            [24] 5950 	mov	ar3,@r0
      00208A 08               [12] 5951 	inc	r0
      00208B 86 06            [24] 5952 	mov	ar6,@r0
      00208D 08               [12] 5953 	inc	r0
      00208E 86 07            [24] 5954 	mov	ar7,@r0
      002090 C0 02            [24] 5955 	push	ar2
      002092 C0 03            [24] 5956 	push	ar3
      002094 C0 06            [24] 5957 	push	ar6
      002096 C0 07            [24] 5958 	push	ar7
      002098 E5*00            [12] 5959 	mov	a,_bp
      00209A 24 07            [12] 5960 	add	a,#0x07
      00209C F8               [12] 5961 	mov	r0,a
      00209D 86 82            [24] 5962 	mov	dpl,@r0
      00209F 08               [12] 5963 	inc	r0
      0020A0 86 83            [24] 5964 	mov	dph,@r0
      0020A2 08               [12] 5965 	inc	r0
      0020A3 86 F0            [24] 5966 	mov	b,@r0
      0020A5 08               [12] 5967 	inc	r0
      0020A6 E6               [12] 5968 	mov	a,@r0
      0020A7 12r00r00         [24] 5969 	lcall	__modulong
      0020AA AC 82            [24] 5970 	mov	r4,dpl
      0020AC AD 83            [24] 5971 	mov	r5,dph
      0020AE AE F0            [24] 5972 	mov	r6,b
      0020B0 FF               [12] 5973 	mov	r7,a
      0020B1 E5 81            [12] 5974 	mov	a,sp
      0020B3 24 FC            [12] 5975 	add	a,#0xfc
      0020B5 F5 81            [12] 5976 	mov	sp,a
      0020B7 E5*00            [12] 5977 	mov	a,_bp
      0020B9 24 19            [12] 5978 	add	a,#0x19
      0020BB F8               [12] 5979 	mov	r0,a
      0020BC A6 04            [24] 5980 	mov	@r0,ar4
      0020BE 08               [12] 5981 	inc	r0
      0020BF A6 05            [24] 5982 	mov	@r0,ar5
      0020C1 08               [12] 5983 	inc	r0
      0020C2 A6 06            [24] 5984 	mov	@r0,ar6
      0020C4 08               [12] 5985 	inc	r0
      0020C5 A6 07            [24] 5986 	mov	@r0,ar7
      0020C7                       5987 00192$:
                                   5988 ;	calc.c:280: (void)stack_push(ctx->ps, d1);
      0020C7 E5*00            [12] 5989 	mov	a,_bp
      0020C9 24 0E            [12] 5990 	add	a,#0x0e
      0020CB F8               [12] 5991 	mov	r0,a
      0020CC 86 82            [24] 5992 	mov	dpl,@r0
      0020CE 08               [12] 5993 	inc	r0
      0020CF 86 83            [24] 5994 	mov	dph,@r0
      0020D1 08               [12] 5995 	inc	r0
      0020D2 86 F0            [24] 5996 	mov	b,@r0
      0020D4 12r00r00         [24] 5997 	lcall	__gptrget
      0020D7 FD               [12] 5998 	mov	r5,a
      0020D8 A3               [24] 5999 	inc	dptr
      0020D9 12r00r00         [24] 6000 	lcall	__gptrget
      0020DC FE               [12] 6001 	mov	r6,a
      0020DD A3               [24] 6002 	inc	dptr
      0020DE 12r00r00         [24] 6003 	lcall	__gptrget
      0020E1 FF               [12] 6004 	mov	r7,a
      0020E2 E5*00            [12] 6005 	mov	a,_bp
      0020E4 24 19            [12] 6006 	add	a,#0x19
      0020E6 F8               [12] 6007 	mov	r0,a
      0020E7 E6               [12] 6008 	mov	a,@r0
      0020E8 C0 E0            [24] 6009 	push	acc
      0020EA 08               [12] 6010 	inc	r0
      0020EB E6               [12] 6011 	mov	a,@r0
      0020EC C0 E0            [24] 6012 	push	acc
      0020EE 08               [12] 6013 	inc	r0
      0020EF E6               [12] 6014 	mov	a,@r0
      0020F0 C0 E0            [24] 6015 	push	acc
      0020F2 08               [12] 6016 	inc	r0
      0020F3 E6               [12] 6017 	mov	a,@r0
      0020F4 C0 E0            [24] 6018 	push	acc
      0020F6 8D 82            [24] 6019 	mov	dpl,r5
      0020F8 8E 83            [24] 6020 	mov	dph,r6
      0020FA 8F F0            [24] 6021 	mov	b,r7
      0020FC 12r00r00         [24] 6022 	lcall	_stack_push
      0020FF E5 81            [12] 6023 	mov	a,sp
      002101 24 FC            [12] 6024 	add	a,#0xfc
      002103 F5 81            [12] 6025 	mov	sp,a
                                   6026 ;	calc.c:282: break;
      002105 02r2BrA4         [24] 6027 	ljmp	00249$
                                   6028 ;	calc.c:283: case '&':
      002108                       6029 00202$:
                                   6030 ;	calc.c:284: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      002108 E5*00            [12] 6031 	mov	a,_bp
      00210A 24 15            [12] 6032 	add	a,#0x15
      00210C FF               [12] 6033 	mov	r7,a
      00210D E5*00            [12] 6034 	mov	a,_bp
      00210F 24 0E            [12] 6035 	add	a,#0x0e
      002111 F8               [12] 6036 	mov	r0,a
      002112 A6 07            [24] 6037 	mov	@r0,ar7
      002114 08               [12] 6038 	inc	r0
      002115 76 00            [12] 6039 	mov	@r0,#0x00
      002117 08               [12] 6040 	inc	r0
      002118 76 40            [12] 6041 	mov	@r0,#0x40
      00211A E5*00            [12] 6042 	mov	a,_bp
      00211C 24 12            [12] 6043 	add	a,#0x12
      00211E F8               [12] 6044 	mov	r0,a
      00211F 74 11            [12] 6045 	mov	a,#0x11
      002121 26               [12] 6046 	add	a,@r0
      002122 FA               [12] 6047 	mov	r2,a
      002123 74 40            [12] 6048 	mov	a,#0x40
      002125 08               [12] 6049 	inc	r0
      002126 36               [12] 6050 	addc	a,@r0
      002127 FB               [12] 6051 	mov	r3,a
      002128 08               [12] 6052 	inc	r0
      002129 86 04            [24] 6053 	mov	ar4,@r0
      00212B 8A 82            [24] 6054 	mov	dpl,r2
      00212D 8B 83            [24] 6055 	mov	dph,r3
      00212F 8C F0            [24] 6056 	mov	b,r4
      002131 12r00r00         [24] 6057 	lcall	__gptrget
      002134 FD               [12] 6058 	mov	r5,a
      002135 A3               [24] 6059 	inc	dptr
      002136 12r00r00         [24] 6060 	lcall	__gptrget
      002139 FE               [12] 6061 	mov	r6,a
      00213A A3               [24] 6062 	inc	dptr
      00213B 12r00r00         [24] 6063 	lcall	__gptrget
      00213E FF               [12] 6064 	mov	r7,a
      00213F C0 04            [24] 6065 	push	ar4
      002141 C0 03            [24] 6066 	push	ar3
      002143 C0 02            [24] 6067 	push	ar2
      002145 E5*00            [12] 6068 	mov	a,_bp
      002147 24 0E            [12] 6069 	add	a,#0x0e
      002149 F8               [12] 6070 	mov	r0,a
      00214A E6               [12] 6071 	mov	a,@r0
      00214B C0 E0            [24] 6072 	push	acc
      00214D 08               [12] 6073 	inc	r0
      00214E E6               [12] 6074 	mov	a,@r0
      00214F C0 E0            [24] 6075 	push	acc
      002151 08               [12] 6076 	inc	r0
      002152 E6               [12] 6077 	mov	a,@r0
      002153 C0 E0            [24] 6078 	push	acc
      002155 8D 82            [24] 6079 	mov	dpl,r5
      002157 8E 83            [24] 6080 	mov	dph,r6
      002159 8F F0            [24] 6081 	mov	b,r7
      00215B 12r00r00         [24] 6082 	lcall	_stack_pop
      00215E AE 82            [24] 6083 	mov	r6,dpl
      002160 AF 83            [24] 6084 	mov	r7,dph
      002162 15 81            [12] 6085 	dec	sp
      002164 15 81            [12] 6086 	dec	sp
      002166 15 81            [12] 6087 	dec	sp
      002168 D0 02            [24] 6088 	pop	ar2
      00216A D0 03            [24] 6089 	pop	ar3
      00216C D0 04            [24] 6090 	pop	ar4
      00216E EE               [12] 6091 	mov	a,r6
      00216F 4F               [12] 6092 	orl	a,r7
      002170 70 25            [24] 6093 	jnz	00207$
      002172 7Dr4E            [12] 6094 	mov	r5,#___str_10
      002174 7Cs00            [12] 6095 	mov	r4,#(___str_10 >> 8)
      002176 7B 80            [12] 6096 	mov	r3,#0x80
                                   6097 ;	calc.c:59: return;
      002178                       6098 00462$:
                                   6099 ;	calc.c:57: for (; *s; s++) putchar(*s);
      002178 8D 82            [24] 6100 	mov	dpl,r5
      00217A 8C 83            [24] 6101 	mov	dph,r4
      00217C 8B F0            [24] 6102 	mov	b,r3
      00217E 12r00r00         [24] 6103 	lcall	__gptrget
      002181 FF               [12] 6104 	mov	r7,a
      002182 70 03            [24] 6105 	jnz	01366$
      002184 02r2BrA4         [24] 6106 	ljmp	00249$
      002187                       6107 01366$:
      002187 7E 00            [12] 6108 	mov	r6,#0x00
      002189 8F 82            [24] 6109 	mov	dpl,r7
      00218B 8E 83            [24] 6110 	mov	dph,r6
      00218D 12r00r00         [24] 6111 	lcall	_putchar
      002190 0D               [12] 6112 	inc	r5
                                   6113 ;	calc.c:284: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      002191 BD 00 E4         [24] 6114 	cjne	r5,#0x00,00462$
      002194 0C               [12] 6115 	inc	r4
      002195 80 E1            [24] 6116 	sjmp	00462$
      002197                       6117 00207$:
                                   6118 ;	calc.c:285: else if (!stack_pop(ctx->ps, &d1)) {
      002197 E5*00            [12] 6119 	mov	a,_bp
      002199 24 19            [12] 6120 	add	a,#0x19
      00219B FF               [12] 6121 	mov	r7,a
      00219C E5*00            [12] 6122 	mov	a,_bp
      00219E 24 0E            [12] 6123 	add	a,#0x0e
      0021A0 F8               [12] 6124 	mov	r0,a
      0021A1 A6 07            [24] 6125 	mov	@r0,ar7
      0021A3 08               [12] 6126 	inc	r0
      0021A4 76 00            [12] 6127 	mov	@r0,#0x00
      0021A6 08               [12] 6128 	inc	r0
      0021A7 76 40            [12] 6129 	mov	@r0,#0x40
      0021A9 8A 82            [24] 6130 	mov	dpl,r2
      0021AB 8B 83            [24] 6131 	mov	dph,r3
      0021AD 8C F0            [24] 6132 	mov	b,r4
      0021AF 12r00r00         [24] 6133 	lcall	__gptrget
      0021B2 FD               [12] 6134 	mov	r5,a
      0021B3 A3               [24] 6135 	inc	dptr
      0021B4 12r00r00         [24] 6136 	lcall	__gptrget
      0021B7 FE               [12] 6137 	mov	r6,a
      0021B8 A3               [24] 6138 	inc	dptr
      0021B9 12r00r00         [24] 6139 	lcall	__gptrget
      0021BC FF               [12] 6140 	mov	r7,a
      0021BD C0 04            [24] 6141 	push	ar4
      0021BF C0 03            [24] 6142 	push	ar3
      0021C1 C0 02            [24] 6143 	push	ar2
      0021C3 E5*00            [12] 6144 	mov	a,_bp
      0021C5 24 0E            [12] 6145 	add	a,#0x0e
      0021C7 F8               [12] 6146 	mov	r0,a
      0021C8 E6               [12] 6147 	mov	a,@r0
      0021C9 C0 E0            [24] 6148 	push	acc
      0021CB 08               [12] 6149 	inc	r0
      0021CC E6               [12] 6150 	mov	a,@r0
      0021CD C0 E0            [24] 6151 	push	acc
      0021CF 08               [12] 6152 	inc	r0
      0021D0 E6               [12] 6153 	mov	a,@r0
      0021D1 C0 E0            [24] 6154 	push	acc
      0021D3 8D 82            [24] 6155 	mov	dpl,r5
      0021D5 8E 83            [24] 6156 	mov	dph,r6
      0021D7 8F F0            [24] 6157 	mov	b,r7
      0021D9 12r00r00         [24] 6158 	lcall	_stack_pop
      0021DC AE 82            [24] 6159 	mov	r6,dpl
      0021DE AF 83            [24] 6160 	mov	r7,dph
      0021E0 15 81            [12] 6161 	dec	sp
      0021E2 15 81            [12] 6162 	dec	sp
      0021E4 15 81            [12] 6163 	dec	sp
      0021E6 D0 02            [24] 6164 	pop	ar2
      0021E8 D0 03            [24] 6165 	pop	ar3
      0021EA D0 04            [24] 6166 	pop	ar4
      0021EC EE               [12] 6167 	mov	a,r6
      0021ED 4F               [12] 6168 	orl	a,r7
      0021EE 70 5C            [24] 6169 	jnz	00204$
                                   6170 ;	calc.c:286: (void)stack_push(ctx->ps, d0);
      0021F0 8A 82            [24] 6171 	mov	dpl,r2
      0021F2 8B 83            [24] 6172 	mov	dph,r3
      0021F4 8C F0            [24] 6173 	mov	b,r4
      0021F6 12r00r00         [24] 6174 	lcall	__gptrget
      0021F9 FD               [12] 6175 	mov	r5,a
      0021FA A3               [24] 6176 	inc	dptr
      0021FB 12r00r00         [24] 6177 	lcall	__gptrget
      0021FE FE               [12] 6178 	mov	r6,a
      0021FF A3               [24] 6179 	inc	dptr
      002200 12r00r00         [24] 6180 	lcall	__gptrget
      002203 FF               [12] 6181 	mov	r7,a
      002204 E5*00            [12] 6182 	mov	a,_bp
      002206 24 15            [12] 6183 	add	a,#0x15
      002208 F8               [12] 6184 	mov	r0,a
      002209 E6               [12] 6185 	mov	a,@r0
      00220A C0 E0            [24] 6186 	push	acc
      00220C 08               [12] 6187 	inc	r0
      00220D E6               [12] 6188 	mov	a,@r0
      00220E C0 E0            [24] 6189 	push	acc
      002210 08               [12] 6190 	inc	r0
      002211 E6               [12] 6191 	mov	a,@r0
      002212 C0 E0            [24] 6192 	push	acc
      002214 08               [12] 6193 	inc	r0
      002215 E6               [12] 6194 	mov	a,@r0
      002216 C0 E0            [24] 6195 	push	acc
      002218 8D 82            [24] 6196 	mov	dpl,r5
      00221A 8E 83            [24] 6197 	mov	dph,r6
      00221C 8F F0            [24] 6198 	mov	b,r7
      00221E 12r00r00         [24] 6199 	lcall	_stack_push
      002221 E5 81            [12] 6200 	mov	a,sp
      002223 24 FC            [12] 6201 	add	a,#0xfc
      002225 F5 81            [12] 6202 	mov	sp,a
                                   6203 ;	calc.c:287: printstr("\r\nstack underflow\r\n");
      002227 7Dr4E            [12] 6204 	mov	r5,#___str_10
      002229 7Cs00            [12] 6205 	mov	r4,#(___str_10 >> 8)
      00222B 7B 80            [12] 6206 	mov	r3,#0x80
                                   6207 ;	calc.c:59: return;
      00222D                       6208 00465$:
                                   6209 ;	calc.c:57: for (; *s; s++) putchar(*s);
      00222D 8D 82            [24] 6210 	mov	dpl,r5
      00222F 8C 83            [24] 6211 	mov	dph,r4
      002231 8B F0            [24] 6212 	mov	b,r3
      002233 12r00r00         [24] 6213 	lcall	__gptrget
      002236 FF               [12] 6214 	mov	r7,a
      002237 70 03            [24] 6215 	jnz	01369$
      002239 02r2BrA4         [24] 6216 	ljmp	00249$
      00223C                       6217 01369$:
      00223C 7E 00            [12] 6218 	mov	r6,#0x00
      00223E 8F 82            [24] 6219 	mov	dpl,r7
      002240 8E 83            [24] 6220 	mov	dph,r6
      002242 12r00r00         [24] 6221 	lcall	_putchar
      002245 0D               [12] 6222 	inc	r5
                                   6223 ;	calc.c:287: printstr("\r\nstack underflow\r\n");
      002246 BD 00 E4         [24] 6224 	cjne	r5,#0x00,00465$
      002249 0C               [12] 6225 	inc	r4
      00224A 80 E1            [24] 6226 	sjmp	00465$
      00224C                       6227 00204$:
                                   6228 ;	calc.c:289: d1 &= d0;
      00224C E5*00            [12] 6229 	mov	a,_bp
      00224E 24 19            [12] 6230 	add	a,#0x19
      002250 F8               [12] 6231 	mov	r0,a
      002251 E5*00            [12] 6232 	mov	a,_bp
      002253 24 15            [12] 6233 	add	a,#0x15
      002255 F9               [12] 6234 	mov	r1,a
      002256 E7               [12] 6235 	mov	a,@r1
      002257 56               [12] 6236 	anl	a,@r0
      002258 F6               [12] 6237 	mov	@r0,a
      002259 09               [12] 6238 	inc	r1
      00225A E7               [12] 6239 	mov	a,@r1
      00225B 08               [12] 6240 	inc	r0
      00225C 56               [12] 6241 	anl	a,@r0
      00225D F6               [12] 6242 	mov	@r0,a
      00225E 09               [12] 6243 	inc	r1
      00225F E7               [12] 6244 	mov	a,@r1
      002260 08               [12] 6245 	inc	r0
      002261 56               [12] 6246 	anl	a,@r0
      002262 F6               [12] 6247 	mov	@r0,a
      002263 09               [12] 6248 	inc	r1
      002264 E7               [12] 6249 	mov	a,@r1
      002265 08               [12] 6250 	inc	r0
      002266 56               [12] 6251 	anl	a,@r0
      002267 F6               [12] 6252 	mov	@r0,a
                                   6253 ;	calc.c:290: (void)stack_push(ctx->ps, d1);
      002268 8A 82            [24] 6254 	mov	dpl,r2
      00226A 8B 83            [24] 6255 	mov	dph,r3
      00226C 8C F0            [24] 6256 	mov	b,r4
      00226E 12r00r00         [24] 6257 	lcall	__gptrget
      002271 FA               [12] 6258 	mov	r2,a
      002272 A3               [24] 6259 	inc	dptr
      002273 12r00r00         [24] 6260 	lcall	__gptrget
      002276 FB               [12] 6261 	mov	r3,a
      002277 A3               [24] 6262 	inc	dptr
      002278 12r00r00         [24] 6263 	lcall	__gptrget
      00227B FC               [12] 6264 	mov	r4,a
      00227C E5*00            [12] 6265 	mov	a,_bp
      00227E 24 19            [12] 6266 	add	a,#0x19
      002280 F8               [12] 6267 	mov	r0,a
      002281 E6               [12] 6268 	mov	a,@r0
      002282 C0 E0            [24] 6269 	push	acc
      002284 08               [12] 6270 	inc	r0
      002285 E6               [12] 6271 	mov	a,@r0
      002286 C0 E0            [24] 6272 	push	acc
      002288 08               [12] 6273 	inc	r0
      002289 E6               [12] 6274 	mov	a,@r0
      00228A C0 E0            [24] 6275 	push	acc
      00228C 08               [12] 6276 	inc	r0
      00228D E6               [12] 6277 	mov	a,@r0
      00228E C0 E0            [24] 6278 	push	acc
      002290 8A 82            [24] 6279 	mov	dpl,r2
      002292 8B 83            [24] 6280 	mov	dph,r3
      002294 8C F0            [24] 6281 	mov	b,r4
      002296 12r00r00         [24] 6282 	lcall	_stack_push
      002299 E5 81            [12] 6283 	mov	a,sp
      00229B 24 FC            [12] 6284 	add	a,#0xfc
      00229D F5 81            [12] 6285 	mov	sp,a
                                   6286 ;	calc.c:292: break;
      00229F 02r2BrA4         [24] 6287 	ljmp	00249$
                                   6288 ;	calc.c:293: case '|':
      0022A2                       6289 00209$:
                                   6290 ;	calc.c:294: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      0022A2 E5*00            [12] 6291 	mov	a,_bp
      0022A4 24 15            [12] 6292 	add	a,#0x15
      0022A6 FF               [12] 6293 	mov	r7,a
      0022A7 E5*00            [12] 6294 	mov	a,_bp
      0022A9 24 0E            [12] 6295 	add	a,#0x0e
      0022AB F8               [12] 6296 	mov	r0,a
      0022AC A6 07            [24] 6297 	mov	@r0,ar7
      0022AE 08               [12] 6298 	inc	r0
      0022AF 76 00            [12] 6299 	mov	@r0,#0x00
      0022B1 08               [12] 6300 	inc	r0
      0022B2 76 40            [12] 6301 	mov	@r0,#0x40
      0022B4 E5*00            [12] 6302 	mov	a,_bp
      0022B6 24 12            [12] 6303 	add	a,#0x12
      0022B8 F8               [12] 6304 	mov	r0,a
      0022B9 74 11            [12] 6305 	mov	a,#0x11
      0022BB 26               [12] 6306 	add	a,@r0
      0022BC FA               [12] 6307 	mov	r2,a
      0022BD 74 40            [12] 6308 	mov	a,#0x40
      0022BF 08               [12] 6309 	inc	r0
      0022C0 36               [12] 6310 	addc	a,@r0
      0022C1 FB               [12] 6311 	mov	r3,a
      0022C2 08               [12] 6312 	inc	r0
      0022C3 86 04            [24] 6313 	mov	ar4,@r0
      0022C5 8A 82            [24] 6314 	mov	dpl,r2
      0022C7 8B 83            [24] 6315 	mov	dph,r3
      0022C9 8C F0            [24] 6316 	mov	b,r4
      0022CB 12r00r00         [24] 6317 	lcall	__gptrget
      0022CE FD               [12] 6318 	mov	r5,a
      0022CF A3               [24] 6319 	inc	dptr
      0022D0 12r00r00         [24] 6320 	lcall	__gptrget
      0022D3 FE               [12] 6321 	mov	r6,a
      0022D4 A3               [24] 6322 	inc	dptr
      0022D5 12r00r00         [24] 6323 	lcall	__gptrget
      0022D8 FF               [12] 6324 	mov	r7,a
      0022D9 C0 04            [24] 6325 	push	ar4
      0022DB C0 03            [24] 6326 	push	ar3
      0022DD C0 02            [24] 6327 	push	ar2
      0022DF E5*00            [12] 6328 	mov	a,_bp
      0022E1 24 0E            [12] 6329 	add	a,#0x0e
      0022E3 F8               [12] 6330 	mov	r0,a
      0022E4 E6               [12] 6331 	mov	a,@r0
      0022E5 C0 E0            [24] 6332 	push	acc
      0022E7 08               [12] 6333 	inc	r0
      0022E8 E6               [12] 6334 	mov	a,@r0
      0022E9 C0 E0            [24] 6335 	push	acc
      0022EB 08               [12] 6336 	inc	r0
      0022EC E6               [12] 6337 	mov	a,@r0
      0022ED C0 E0            [24] 6338 	push	acc
      0022EF 8D 82            [24] 6339 	mov	dpl,r5
      0022F1 8E 83            [24] 6340 	mov	dph,r6
      0022F3 8F F0            [24] 6341 	mov	b,r7
      0022F5 12r00r00         [24] 6342 	lcall	_stack_pop
      0022F8 AE 82            [24] 6343 	mov	r6,dpl
      0022FA AF 83            [24] 6344 	mov	r7,dph
      0022FC 15 81            [12] 6345 	dec	sp
      0022FE 15 81            [12] 6346 	dec	sp
      002300 15 81            [12] 6347 	dec	sp
      002302 D0 02            [24] 6348 	pop	ar2
      002304 D0 03            [24] 6349 	pop	ar3
      002306 D0 04            [24] 6350 	pop	ar4
      002308 EE               [12] 6351 	mov	a,r6
      002309 4F               [12] 6352 	orl	a,r7
      00230A 70 25            [24] 6353 	jnz	00214$
      00230C 7Dr4E            [12] 6354 	mov	r5,#___str_10
      00230E 7Cs00            [12] 6355 	mov	r4,#(___str_10 >> 8)
      002310 7B 80            [12] 6356 	mov	r3,#0x80
                                   6357 ;	calc.c:59: return;
      002312                       6358 00468$:
                                   6359 ;	calc.c:57: for (; *s; s++) putchar(*s);
      002312 8D 82            [24] 6360 	mov	dpl,r5
      002314 8C 83            [24] 6361 	mov	dph,r4
      002316 8B F0            [24] 6362 	mov	b,r3
      002318 12r00r00         [24] 6363 	lcall	__gptrget
      00231B FF               [12] 6364 	mov	r7,a
      00231C 70 03            [24] 6365 	jnz	01372$
      00231E 02r2BrA4         [24] 6366 	ljmp	00249$
      002321                       6367 01372$:
      002321 7E 00            [12] 6368 	mov	r6,#0x00
      002323 8F 82            [24] 6369 	mov	dpl,r7
      002325 8E 83            [24] 6370 	mov	dph,r6
      002327 12r00r00         [24] 6371 	lcall	_putchar
      00232A 0D               [12] 6372 	inc	r5
                                   6373 ;	calc.c:294: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      00232B BD 00 E4         [24] 6374 	cjne	r5,#0x00,00468$
      00232E 0C               [12] 6375 	inc	r4
      00232F 80 E1            [24] 6376 	sjmp	00468$
      002331                       6377 00214$:
                                   6378 ;	calc.c:295: else if (!stack_pop(ctx->ps, &d1)) {
      002331 E5*00            [12] 6379 	mov	a,_bp
      002333 24 19            [12] 6380 	add	a,#0x19
      002335 FF               [12] 6381 	mov	r7,a
      002336 E5*00            [12] 6382 	mov	a,_bp
      002338 24 0E            [12] 6383 	add	a,#0x0e
      00233A F8               [12] 6384 	mov	r0,a
      00233B A6 07            [24] 6385 	mov	@r0,ar7
      00233D 08               [12] 6386 	inc	r0
      00233E 76 00            [12] 6387 	mov	@r0,#0x00
      002340 08               [12] 6388 	inc	r0
      002341 76 40            [12] 6389 	mov	@r0,#0x40
      002343 8A 82            [24] 6390 	mov	dpl,r2
      002345 8B 83            [24] 6391 	mov	dph,r3
      002347 8C F0            [24] 6392 	mov	b,r4
      002349 12r00r00         [24] 6393 	lcall	__gptrget
      00234C FD               [12] 6394 	mov	r5,a
      00234D A3               [24] 6395 	inc	dptr
      00234E 12r00r00         [24] 6396 	lcall	__gptrget
      002351 FE               [12] 6397 	mov	r6,a
      002352 A3               [24] 6398 	inc	dptr
      002353 12r00r00         [24] 6399 	lcall	__gptrget
      002356 FF               [12] 6400 	mov	r7,a
      002357 C0 04            [24] 6401 	push	ar4
      002359 C0 03            [24] 6402 	push	ar3
      00235B C0 02            [24] 6403 	push	ar2
      00235D E5*00            [12] 6404 	mov	a,_bp
      00235F 24 0E            [12] 6405 	add	a,#0x0e
      002361 F8               [12] 6406 	mov	r0,a
      002362 E6               [12] 6407 	mov	a,@r0
      002363 C0 E0            [24] 6408 	push	acc
      002365 08               [12] 6409 	inc	r0
      002366 E6               [12] 6410 	mov	a,@r0
      002367 C0 E0            [24] 6411 	push	acc
      002369 08               [12] 6412 	inc	r0
      00236A E6               [12] 6413 	mov	a,@r0
      00236B C0 E0            [24] 6414 	push	acc
      00236D 8D 82            [24] 6415 	mov	dpl,r5
      00236F 8E 83            [24] 6416 	mov	dph,r6
      002371 8F F0            [24] 6417 	mov	b,r7
      002373 12r00r00         [24] 6418 	lcall	_stack_pop
      002376 AE 82            [24] 6419 	mov	r6,dpl
      002378 AF 83            [24] 6420 	mov	r7,dph
      00237A 15 81            [12] 6421 	dec	sp
      00237C 15 81            [12] 6422 	dec	sp
      00237E 15 81            [12] 6423 	dec	sp
      002380 D0 02            [24] 6424 	pop	ar2
      002382 D0 03            [24] 6425 	pop	ar3
      002384 D0 04            [24] 6426 	pop	ar4
      002386 EE               [12] 6427 	mov	a,r6
      002387 4F               [12] 6428 	orl	a,r7
      002388 70 5C            [24] 6429 	jnz	00211$
                                   6430 ;	calc.c:296: (void)stack_push(ctx->ps, d0);
      00238A 8A 82            [24] 6431 	mov	dpl,r2
      00238C 8B 83            [24] 6432 	mov	dph,r3
      00238E 8C F0            [24] 6433 	mov	b,r4
      002390 12r00r00         [24] 6434 	lcall	__gptrget
      002393 FD               [12] 6435 	mov	r5,a
      002394 A3               [24] 6436 	inc	dptr
      002395 12r00r00         [24] 6437 	lcall	__gptrget
      002398 FE               [12] 6438 	mov	r6,a
      002399 A3               [24] 6439 	inc	dptr
      00239A 12r00r00         [24] 6440 	lcall	__gptrget
      00239D FF               [12] 6441 	mov	r7,a
      00239E E5*00            [12] 6442 	mov	a,_bp
      0023A0 24 15            [12] 6443 	add	a,#0x15
      0023A2 F8               [12] 6444 	mov	r0,a
      0023A3 E6               [12] 6445 	mov	a,@r0
      0023A4 C0 E0            [24] 6446 	push	acc
      0023A6 08               [12] 6447 	inc	r0
      0023A7 E6               [12] 6448 	mov	a,@r0
      0023A8 C0 E0            [24] 6449 	push	acc
      0023AA 08               [12] 6450 	inc	r0
      0023AB E6               [12] 6451 	mov	a,@r0
      0023AC C0 E0            [24] 6452 	push	acc
      0023AE 08               [12] 6453 	inc	r0
      0023AF E6               [12] 6454 	mov	a,@r0
      0023B0 C0 E0            [24] 6455 	push	acc
      0023B2 8D 82            [24] 6456 	mov	dpl,r5
      0023B4 8E 83            [24] 6457 	mov	dph,r6
      0023B6 8F F0            [24] 6458 	mov	b,r7
      0023B8 12r00r00         [24] 6459 	lcall	_stack_push
      0023BB E5 81            [12] 6460 	mov	a,sp
      0023BD 24 FC            [12] 6461 	add	a,#0xfc
      0023BF F5 81            [12] 6462 	mov	sp,a
                                   6463 ;	calc.c:297: printstr("\r\nstack underflow\r\n");
      0023C1 7Dr4E            [12] 6464 	mov	r5,#___str_10
      0023C3 7Cs00            [12] 6465 	mov	r4,#(___str_10 >> 8)
      0023C5 7B 80            [12] 6466 	mov	r3,#0x80
                                   6467 ;	calc.c:59: return;
      0023C7                       6468 00471$:
                                   6469 ;	calc.c:57: for (; *s; s++) putchar(*s);
      0023C7 8D 82            [24] 6470 	mov	dpl,r5
      0023C9 8C 83            [24] 6471 	mov	dph,r4
      0023CB 8B F0            [24] 6472 	mov	b,r3
      0023CD 12r00r00         [24] 6473 	lcall	__gptrget
      0023D0 FF               [12] 6474 	mov	r7,a
      0023D1 70 03            [24] 6475 	jnz	01375$
      0023D3 02r2BrA4         [24] 6476 	ljmp	00249$
      0023D6                       6477 01375$:
      0023D6 7E 00            [12] 6478 	mov	r6,#0x00
      0023D8 8F 82            [24] 6479 	mov	dpl,r7
      0023DA 8E 83            [24] 6480 	mov	dph,r6
      0023DC 12r00r00         [24] 6481 	lcall	_putchar
      0023DF 0D               [12] 6482 	inc	r5
                                   6483 ;	calc.c:297: printstr("\r\nstack underflow\r\n");
      0023E0 BD 00 E4         [24] 6484 	cjne	r5,#0x00,00471$
      0023E3 0C               [12] 6485 	inc	r4
      0023E4 80 E1            [24] 6486 	sjmp	00471$
      0023E6                       6487 00211$:
                                   6488 ;	calc.c:299: d1 |= d0;
      0023E6 E5*00            [12] 6489 	mov	a,_bp
      0023E8 24 19            [12] 6490 	add	a,#0x19
      0023EA F8               [12] 6491 	mov	r0,a
      0023EB E5*00            [12] 6492 	mov	a,_bp
      0023ED 24 15            [12] 6493 	add	a,#0x15
      0023EF F9               [12] 6494 	mov	r1,a
      0023F0 E7               [12] 6495 	mov	a,@r1
      0023F1 46               [12] 6496 	orl	a,@r0
      0023F2 F6               [12] 6497 	mov	@r0,a
      0023F3 09               [12] 6498 	inc	r1
      0023F4 E7               [12] 6499 	mov	a,@r1
      0023F5 08               [12] 6500 	inc	r0
      0023F6 46               [12] 6501 	orl	a,@r0
      0023F7 F6               [12] 6502 	mov	@r0,a
      0023F8 09               [12] 6503 	inc	r1
      0023F9 E7               [12] 6504 	mov	a,@r1
      0023FA 08               [12] 6505 	inc	r0
      0023FB 46               [12] 6506 	orl	a,@r0
      0023FC F6               [12] 6507 	mov	@r0,a
      0023FD 09               [12] 6508 	inc	r1
      0023FE E7               [12] 6509 	mov	a,@r1
      0023FF 08               [12] 6510 	inc	r0
      002400 46               [12] 6511 	orl	a,@r0
      002401 F6               [12] 6512 	mov	@r0,a
                                   6513 ;	calc.c:300: (void)stack_push(ctx->ps, d1);
      002402 8A 82            [24] 6514 	mov	dpl,r2
      002404 8B 83            [24] 6515 	mov	dph,r3
      002406 8C F0            [24] 6516 	mov	b,r4
      002408 12r00r00         [24] 6517 	lcall	__gptrget
      00240B FA               [12] 6518 	mov	r2,a
      00240C A3               [24] 6519 	inc	dptr
      00240D 12r00r00         [24] 6520 	lcall	__gptrget
      002410 FB               [12] 6521 	mov	r3,a
      002411 A3               [24] 6522 	inc	dptr
      002412 12r00r00         [24] 6523 	lcall	__gptrget
      002415 FC               [12] 6524 	mov	r4,a
      002416 E5*00            [12] 6525 	mov	a,_bp
      002418 24 19            [12] 6526 	add	a,#0x19
      00241A F8               [12] 6527 	mov	r0,a
      00241B E6               [12] 6528 	mov	a,@r0
      00241C C0 E0            [24] 6529 	push	acc
      00241E 08               [12] 6530 	inc	r0
      00241F E6               [12] 6531 	mov	a,@r0
      002420 C0 E0            [24] 6532 	push	acc
      002422 08               [12] 6533 	inc	r0
      002423 E6               [12] 6534 	mov	a,@r0
      002424 C0 E0            [24] 6535 	push	acc
      002426 08               [12] 6536 	inc	r0
      002427 E6               [12] 6537 	mov	a,@r0
      002428 C0 E0            [24] 6538 	push	acc
      00242A 8A 82            [24] 6539 	mov	dpl,r2
      00242C 8B 83            [24] 6540 	mov	dph,r3
      00242E 8C F0            [24] 6541 	mov	b,r4
      002430 12r00r00         [24] 6542 	lcall	_stack_push
      002433 E5 81            [12] 6543 	mov	a,sp
      002435 24 FC            [12] 6544 	add	a,#0xfc
      002437 F5 81            [12] 6545 	mov	sp,a
                                   6546 ;	calc.c:302: break;
      002439 02r2BrA4         [24] 6547 	ljmp	00249$
                                   6548 ;	calc.c:303: case '^':
      00243C                       6549 00216$:
                                   6550 ;	calc.c:304: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      00243C E5*00            [12] 6551 	mov	a,_bp
      00243E 24 15            [12] 6552 	add	a,#0x15
      002440 FF               [12] 6553 	mov	r7,a
      002441 E5*00            [12] 6554 	mov	a,_bp
      002443 24 0E            [12] 6555 	add	a,#0x0e
      002445 F8               [12] 6556 	mov	r0,a
      002446 A6 07            [24] 6557 	mov	@r0,ar7
      002448 08               [12] 6558 	inc	r0
      002449 76 00            [12] 6559 	mov	@r0,#0x00
      00244B 08               [12] 6560 	inc	r0
      00244C 76 40            [12] 6561 	mov	@r0,#0x40
      00244E E5*00            [12] 6562 	mov	a,_bp
      002450 24 12            [12] 6563 	add	a,#0x12
      002452 F8               [12] 6564 	mov	r0,a
      002453 74 11            [12] 6565 	mov	a,#0x11
      002455 26               [12] 6566 	add	a,@r0
      002456 FA               [12] 6567 	mov	r2,a
      002457 74 40            [12] 6568 	mov	a,#0x40
      002459 08               [12] 6569 	inc	r0
      00245A 36               [12] 6570 	addc	a,@r0
      00245B FB               [12] 6571 	mov	r3,a
      00245C 08               [12] 6572 	inc	r0
      00245D 86 04            [24] 6573 	mov	ar4,@r0
      00245F 8A 82            [24] 6574 	mov	dpl,r2
      002461 8B 83            [24] 6575 	mov	dph,r3
      002463 8C F0            [24] 6576 	mov	b,r4
      002465 12r00r00         [24] 6577 	lcall	__gptrget
      002468 FD               [12] 6578 	mov	r5,a
      002469 A3               [24] 6579 	inc	dptr
      00246A 12r00r00         [24] 6580 	lcall	__gptrget
      00246D FE               [12] 6581 	mov	r6,a
      00246E A3               [24] 6582 	inc	dptr
      00246F 12r00r00         [24] 6583 	lcall	__gptrget
      002472 FF               [12] 6584 	mov	r7,a
      002473 C0 04            [24] 6585 	push	ar4
      002475 C0 03            [24] 6586 	push	ar3
      002477 C0 02            [24] 6587 	push	ar2
      002479 E5*00            [12] 6588 	mov	a,_bp
      00247B 24 0E            [12] 6589 	add	a,#0x0e
      00247D F8               [12] 6590 	mov	r0,a
      00247E E6               [12] 6591 	mov	a,@r0
      00247F C0 E0            [24] 6592 	push	acc
      002481 08               [12] 6593 	inc	r0
      002482 E6               [12] 6594 	mov	a,@r0
      002483 C0 E0            [24] 6595 	push	acc
      002485 08               [12] 6596 	inc	r0
      002486 E6               [12] 6597 	mov	a,@r0
      002487 C0 E0            [24] 6598 	push	acc
      002489 8D 82            [24] 6599 	mov	dpl,r5
      00248B 8E 83            [24] 6600 	mov	dph,r6
      00248D 8F F0            [24] 6601 	mov	b,r7
      00248F 12r00r00         [24] 6602 	lcall	_stack_pop
      002492 AE 82            [24] 6603 	mov	r6,dpl
      002494 AF 83            [24] 6604 	mov	r7,dph
      002496 15 81            [12] 6605 	dec	sp
      002498 15 81            [12] 6606 	dec	sp
      00249A 15 81            [12] 6607 	dec	sp
      00249C D0 02            [24] 6608 	pop	ar2
      00249E D0 03            [24] 6609 	pop	ar3
      0024A0 D0 04            [24] 6610 	pop	ar4
      0024A2 EE               [12] 6611 	mov	a,r6
      0024A3 4F               [12] 6612 	orl	a,r7
      0024A4 70 25            [24] 6613 	jnz	00221$
      0024A6 7Dr4E            [12] 6614 	mov	r5,#___str_10
      0024A8 7Cs00            [12] 6615 	mov	r4,#(___str_10 >> 8)
      0024AA 7B 80            [12] 6616 	mov	r3,#0x80
                                   6617 ;	calc.c:59: return;
      0024AC                       6618 00474$:
                                   6619 ;	calc.c:57: for (; *s; s++) putchar(*s);
      0024AC 8D 82            [24] 6620 	mov	dpl,r5
      0024AE 8C 83            [24] 6621 	mov	dph,r4
      0024B0 8B F0            [24] 6622 	mov	b,r3
      0024B2 12r00r00         [24] 6623 	lcall	__gptrget
      0024B5 FF               [12] 6624 	mov	r7,a
      0024B6 70 03            [24] 6625 	jnz	01378$
      0024B8 02r2BrA4         [24] 6626 	ljmp	00249$
      0024BB                       6627 01378$:
      0024BB 7E 00            [12] 6628 	mov	r6,#0x00
      0024BD 8F 82            [24] 6629 	mov	dpl,r7
      0024BF 8E 83            [24] 6630 	mov	dph,r6
      0024C1 12r00r00         [24] 6631 	lcall	_putchar
      0024C4 0D               [12] 6632 	inc	r5
                                   6633 ;	calc.c:304: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      0024C5 BD 00 E4         [24] 6634 	cjne	r5,#0x00,00474$
      0024C8 0C               [12] 6635 	inc	r4
      0024C9 80 E1            [24] 6636 	sjmp	00474$
      0024CB                       6637 00221$:
                                   6638 ;	calc.c:305: else if (!stack_pop(ctx->ps, &d1)) {
      0024CB E5*00            [12] 6639 	mov	a,_bp
      0024CD 24 19            [12] 6640 	add	a,#0x19
      0024CF FF               [12] 6641 	mov	r7,a
      0024D0 E5*00            [12] 6642 	mov	a,_bp
      0024D2 24 0E            [12] 6643 	add	a,#0x0e
      0024D4 F8               [12] 6644 	mov	r0,a
      0024D5 A6 07            [24] 6645 	mov	@r0,ar7
      0024D7 08               [12] 6646 	inc	r0
      0024D8 76 00            [12] 6647 	mov	@r0,#0x00
      0024DA 08               [12] 6648 	inc	r0
      0024DB 76 40            [12] 6649 	mov	@r0,#0x40
      0024DD 8A 82            [24] 6650 	mov	dpl,r2
      0024DF 8B 83            [24] 6651 	mov	dph,r3
      0024E1 8C F0            [24] 6652 	mov	b,r4
      0024E3 12r00r00         [24] 6653 	lcall	__gptrget
      0024E6 FD               [12] 6654 	mov	r5,a
      0024E7 A3               [24] 6655 	inc	dptr
      0024E8 12r00r00         [24] 6656 	lcall	__gptrget
      0024EB FE               [12] 6657 	mov	r6,a
      0024EC A3               [24] 6658 	inc	dptr
      0024ED 12r00r00         [24] 6659 	lcall	__gptrget
      0024F0 FF               [12] 6660 	mov	r7,a
      0024F1 C0 04            [24] 6661 	push	ar4
      0024F3 C0 03            [24] 6662 	push	ar3
      0024F5 C0 02            [24] 6663 	push	ar2
      0024F7 E5*00            [12] 6664 	mov	a,_bp
      0024F9 24 0E            [12] 6665 	add	a,#0x0e
      0024FB F8               [12] 6666 	mov	r0,a
      0024FC E6               [12] 6667 	mov	a,@r0
      0024FD C0 E0            [24] 6668 	push	acc
      0024FF 08               [12] 6669 	inc	r0
      002500 E6               [12] 6670 	mov	a,@r0
      002501 C0 E0            [24] 6671 	push	acc
      002503 08               [12] 6672 	inc	r0
      002504 E6               [12] 6673 	mov	a,@r0
      002505 C0 E0            [24] 6674 	push	acc
      002507 8D 82            [24] 6675 	mov	dpl,r5
      002509 8E 83            [24] 6676 	mov	dph,r6
      00250B 8F F0            [24] 6677 	mov	b,r7
      00250D 12r00r00         [24] 6678 	lcall	_stack_pop
      002510 AE 82            [24] 6679 	mov	r6,dpl
      002512 AF 83            [24] 6680 	mov	r7,dph
      002514 15 81            [12] 6681 	dec	sp
      002516 15 81            [12] 6682 	dec	sp
      002518 15 81            [12] 6683 	dec	sp
      00251A D0 02            [24] 6684 	pop	ar2
      00251C D0 03            [24] 6685 	pop	ar3
      00251E D0 04            [24] 6686 	pop	ar4
      002520 EE               [12] 6687 	mov	a,r6
      002521 4F               [12] 6688 	orl	a,r7
      002522 70 5C            [24] 6689 	jnz	00218$
                                   6690 ;	calc.c:306: (void)stack_push(ctx->ps, d0);
      002524 8A 82            [24] 6691 	mov	dpl,r2
      002526 8B 83            [24] 6692 	mov	dph,r3
      002528 8C F0            [24] 6693 	mov	b,r4
      00252A 12r00r00         [24] 6694 	lcall	__gptrget
      00252D FD               [12] 6695 	mov	r5,a
      00252E A3               [24] 6696 	inc	dptr
      00252F 12r00r00         [24] 6697 	lcall	__gptrget
      002532 FE               [12] 6698 	mov	r6,a
      002533 A3               [24] 6699 	inc	dptr
      002534 12r00r00         [24] 6700 	lcall	__gptrget
      002537 FF               [12] 6701 	mov	r7,a
      002538 E5*00            [12] 6702 	mov	a,_bp
      00253A 24 15            [12] 6703 	add	a,#0x15
      00253C F8               [12] 6704 	mov	r0,a
      00253D E6               [12] 6705 	mov	a,@r0
      00253E C0 E0            [24] 6706 	push	acc
      002540 08               [12] 6707 	inc	r0
      002541 E6               [12] 6708 	mov	a,@r0
      002542 C0 E0            [24] 6709 	push	acc
      002544 08               [12] 6710 	inc	r0
      002545 E6               [12] 6711 	mov	a,@r0
      002546 C0 E0            [24] 6712 	push	acc
      002548 08               [12] 6713 	inc	r0
      002549 E6               [12] 6714 	mov	a,@r0
      00254A C0 E0            [24] 6715 	push	acc
      00254C 8D 82            [24] 6716 	mov	dpl,r5
      00254E 8E 83            [24] 6717 	mov	dph,r6
      002550 8F F0            [24] 6718 	mov	b,r7
      002552 12r00r00         [24] 6719 	lcall	_stack_push
      002555 E5 81            [12] 6720 	mov	a,sp
      002557 24 FC            [12] 6721 	add	a,#0xfc
      002559 F5 81            [12] 6722 	mov	sp,a
                                   6723 ;	calc.c:307: printstr("\r\nstack underflow\r\n");
      00255B 7Dr4E            [12] 6724 	mov	r5,#___str_10
      00255D 7Cs00            [12] 6725 	mov	r4,#(___str_10 >> 8)
      00255F 7B 80            [12] 6726 	mov	r3,#0x80
                                   6727 ;	calc.c:59: return;
      002561                       6728 00477$:
                                   6729 ;	calc.c:57: for (; *s; s++) putchar(*s);
      002561 8D 82            [24] 6730 	mov	dpl,r5
      002563 8C 83            [24] 6731 	mov	dph,r4
      002565 8B F0            [24] 6732 	mov	b,r3
      002567 12r00r00         [24] 6733 	lcall	__gptrget
      00256A FF               [12] 6734 	mov	r7,a
      00256B 70 03            [24] 6735 	jnz	01381$
      00256D 02r2BrA4         [24] 6736 	ljmp	00249$
      002570                       6737 01381$:
      002570 7E 00            [12] 6738 	mov	r6,#0x00
      002572 8F 82            [24] 6739 	mov	dpl,r7
      002574 8E 83            [24] 6740 	mov	dph,r6
      002576 12r00r00         [24] 6741 	lcall	_putchar
      002579 0D               [12] 6742 	inc	r5
                                   6743 ;	calc.c:307: printstr("\r\nstack underflow\r\n");
      00257A BD 00 E4         [24] 6744 	cjne	r5,#0x00,00477$
      00257D 0C               [12] 6745 	inc	r4
      00257E 80 E1            [24] 6746 	sjmp	00477$
      002580                       6747 00218$:
                                   6748 ;	calc.c:309: d1 ^= d0;
      002580 E5*00            [12] 6749 	mov	a,_bp
      002582 24 19            [12] 6750 	add	a,#0x19
      002584 F8               [12] 6751 	mov	r0,a
      002585 E5*00            [12] 6752 	mov	a,_bp
      002587 24 15            [12] 6753 	add	a,#0x15
      002589 F9               [12] 6754 	mov	r1,a
      00258A E7               [12] 6755 	mov	a,@r1
      00258B 66               [12] 6756 	xrl	a,@r0
      00258C F6               [12] 6757 	mov	@r0,a
      00258D 09               [12] 6758 	inc	r1
      00258E E7               [12] 6759 	mov	a,@r1
      00258F 08               [12] 6760 	inc	r0
      002590 66               [12] 6761 	xrl	a,@r0
      002591 F6               [12] 6762 	mov	@r0,a
      002592 09               [12] 6763 	inc	r1
      002593 E7               [12] 6764 	mov	a,@r1
      002594 08               [12] 6765 	inc	r0
      002595 66               [12] 6766 	xrl	a,@r0
      002596 F6               [12] 6767 	mov	@r0,a
      002597 09               [12] 6768 	inc	r1
      002598 E7               [12] 6769 	mov	a,@r1
      002599 08               [12] 6770 	inc	r0
      00259A 66               [12] 6771 	xrl	a,@r0
      00259B F6               [12] 6772 	mov	@r0,a
                                   6773 ;	calc.c:310: (void)stack_push(ctx->ps, d1);
      00259C 8A 82            [24] 6774 	mov	dpl,r2
      00259E 8B 83            [24] 6775 	mov	dph,r3
      0025A0 8C F0            [24] 6776 	mov	b,r4
      0025A2 12r00r00         [24] 6777 	lcall	__gptrget
      0025A5 FA               [12] 6778 	mov	r2,a
      0025A6 A3               [24] 6779 	inc	dptr
      0025A7 12r00r00         [24] 6780 	lcall	__gptrget
      0025AA FB               [12] 6781 	mov	r3,a
      0025AB A3               [24] 6782 	inc	dptr
      0025AC 12r00r00         [24] 6783 	lcall	__gptrget
      0025AF FC               [12] 6784 	mov	r4,a
      0025B0 E5*00            [12] 6785 	mov	a,_bp
      0025B2 24 19            [12] 6786 	add	a,#0x19
      0025B4 F8               [12] 6787 	mov	r0,a
      0025B5 E6               [12] 6788 	mov	a,@r0
      0025B6 C0 E0            [24] 6789 	push	acc
      0025B8 08               [12] 6790 	inc	r0
      0025B9 E6               [12] 6791 	mov	a,@r0
      0025BA C0 E0            [24] 6792 	push	acc
      0025BC 08               [12] 6793 	inc	r0
      0025BD E6               [12] 6794 	mov	a,@r0
      0025BE C0 E0            [24] 6795 	push	acc
      0025C0 08               [12] 6796 	inc	r0
      0025C1 E6               [12] 6797 	mov	a,@r0
      0025C2 C0 E0            [24] 6798 	push	acc
      0025C4 8A 82            [24] 6799 	mov	dpl,r2
      0025C6 8B 83            [24] 6800 	mov	dph,r3
      0025C8 8C F0            [24] 6801 	mov	b,r4
      0025CA 12r00r00         [24] 6802 	lcall	_stack_push
      0025CD E5 81            [12] 6803 	mov	a,sp
      0025CF 24 FC            [12] 6804 	add	a,#0xfc
      0025D1 F5 81            [12] 6805 	mov	sp,a
                                   6806 ;	calc.c:312: break;
      0025D3 02r2BrA4         [24] 6807 	ljmp	00249$
                                   6808 ;	calc.c:313: case '>':
      0025D6                       6809 00223$:
                                   6810 ;	calc.c:314: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      0025D6 E5*00            [12] 6811 	mov	a,_bp
      0025D8 24 15            [12] 6812 	add	a,#0x15
      0025DA FC               [12] 6813 	mov	r4,a
      0025DB 7B 00            [12] 6814 	mov	r3,#0x00
      0025DD 7A 40            [12] 6815 	mov	r2,#0x40
      0025DF E5*00            [12] 6816 	mov	a,_bp
      0025E1 24 12            [12] 6817 	add	a,#0x12
      0025E3 F8               [12] 6818 	mov	r0,a
      0025E4 E5*00            [12] 6819 	mov	a,_bp
      0025E6 24 0B            [12] 6820 	add	a,#0x0b
      0025E8 F9               [12] 6821 	mov	r1,a
      0025E9 74 11            [12] 6822 	mov	a,#0x11
      0025EB 26               [12] 6823 	add	a,@r0
      0025EC F7               [12] 6824 	mov	@r1,a
      0025ED 74 40            [12] 6825 	mov	a,#0x40
      0025EF 08               [12] 6826 	inc	r0
      0025F0 36               [12] 6827 	addc	a,@r0
      0025F1 09               [12] 6828 	inc	r1
      0025F2 F7               [12] 6829 	mov	@r1,a
      0025F3 08               [12] 6830 	inc	r0
      0025F4 09               [12] 6831 	inc	r1
      0025F5 E6               [12] 6832 	mov	a,@r0
      0025F6 F7               [12] 6833 	mov	@r1,a
      0025F7 E5*00            [12] 6834 	mov	a,_bp
      0025F9 24 0B            [12] 6835 	add	a,#0x0b
      0025FB F8               [12] 6836 	mov	r0,a
      0025FC 86 82            [24] 6837 	mov	dpl,@r0
      0025FE 08               [12] 6838 	inc	r0
      0025FF 86 83            [24] 6839 	mov	dph,@r0
      002601 08               [12] 6840 	inc	r0
      002602 86 F0            [24] 6841 	mov	b,@r0
      002604 12r00r00         [24] 6842 	lcall	__gptrget
      002607 FD               [12] 6843 	mov	r5,a
      002608 A3               [24] 6844 	inc	dptr
      002609 12r00r00         [24] 6845 	lcall	__gptrget
      00260C FE               [12] 6846 	mov	r6,a
      00260D A3               [24] 6847 	inc	dptr
      00260E 12r00r00         [24] 6848 	lcall	__gptrget
      002611 FF               [12] 6849 	mov	r7,a
      002612 C0 04            [24] 6850 	push	ar4
      002614 C0 03            [24] 6851 	push	ar3
      002616 C0 02            [24] 6852 	push	ar2
      002618 8D 82            [24] 6853 	mov	dpl,r5
      00261A 8E 83            [24] 6854 	mov	dph,r6
      00261C 8F F0            [24] 6855 	mov	b,r7
      00261E 12r00r00         [24] 6856 	lcall	_stack_pop
      002621 AE 82            [24] 6857 	mov	r6,dpl
      002623 AF 83            [24] 6858 	mov	r7,dph
      002625 15 81            [12] 6859 	dec	sp
      002627 15 81            [12] 6860 	dec	sp
      002629 15 81            [12] 6861 	dec	sp
      00262B EE               [12] 6862 	mov	a,r6
      00262C 4F               [12] 6863 	orl	a,r7
      00262D 70 25            [24] 6864 	jnz	00228$
      00262F 7Dr4E            [12] 6865 	mov	r5,#___str_10
      002631 7Cs00            [12] 6866 	mov	r4,#(___str_10 >> 8)
      002633 7B 80            [12] 6867 	mov	r3,#0x80
                                   6868 ;	calc.c:59: return;
      002635                       6869 00480$:
                                   6870 ;	calc.c:57: for (; *s; s++) putchar(*s);
      002635 8D 82            [24] 6871 	mov	dpl,r5
      002637 8C 83            [24] 6872 	mov	dph,r4
      002639 8B F0            [24] 6873 	mov	b,r3
      00263B 12r00r00         [24] 6874 	lcall	__gptrget
      00263E FF               [12] 6875 	mov	r7,a
      00263F 70 03            [24] 6876 	jnz	01384$
      002641 02r2BrA4         [24] 6877 	ljmp	00249$
      002644                       6878 01384$:
      002644 7E 00            [12] 6879 	mov	r6,#0x00
      002646 8F 82            [24] 6880 	mov	dpl,r7
      002648 8E 83            [24] 6881 	mov	dph,r6
      00264A 12r00r00         [24] 6882 	lcall	_putchar
      00264D 0D               [12] 6883 	inc	r5
                                   6884 ;	calc.c:314: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      00264E BD 00 E4         [24] 6885 	cjne	r5,#0x00,00480$
      002651 0C               [12] 6886 	inc	r4
      002652 80 E1            [24] 6887 	sjmp	00480$
      002654                       6888 00228$:
                                   6889 ;	calc.c:315: else if (!stack_pop(ctx->ps, &d1)) {
      002654 E5*00            [12] 6890 	mov	a,_bp
      002656 24 19            [12] 6891 	add	a,#0x19
      002658 FC               [12] 6892 	mov	r4,a
      002659 7B 00            [12] 6893 	mov	r3,#0x00
      00265B 7A 40            [12] 6894 	mov	r2,#0x40
      00265D E5*00            [12] 6895 	mov	a,_bp
      00265F 24 0B            [12] 6896 	add	a,#0x0b
      002661 F8               [12] 6897 	mov	r0,a
      002662 86 82            [24] 6898 	mov	dpl,@r0
      002664 08               [12] 6899 	inc	r0
      002665 86 83            [24] 6900 	mov	dph,@r0
      002667 08               [12] 6901 	inc	r0
      002668 86 F0            [24] 6902 	mov	b,@r0
      00266A 12r00r00         [24] 6903 	lcall	__gptrget
      00266D FD               [12] 6904 	mov	r5,a
      00266E A3               [24] 6905 	inc	dptr
      00266F 12r00r00         [24] 6906 	lcall	__gptrget
      002672 FE               [12] 6907 	mov	r6,a
      002673 A3               [24] 6908 	inc	dptr
      002674 12r00r00         [24] 6909 	lcall	__gptrget
      002677 FF               [12] 6910 	mov	r7,a
      002678 C0 04            [24] 6911 	push	ar4
      00267A C0 03            [24] 6912 	push	ar3
      00267C C0 02            [24] 6913 	push	ar2
      00267E 8D 82            [24] 6914 	mov	dpl,r5
      002680 8E 83            [24] 6915 	mov	dph,r6
      002682 8F F0            [24] 6916 	mov	b,r7
      002684 12r00r00         [24] 6917 	lcall	_stack_pop
      002687 AE 82            [24] 6918 	mov	r6,dpl
      002689 AF 83            [24] 6919 	mov	r7,dph
      00268B 15 81            [12] 6920 	dec	sp
      00268D 15 81            [12] 6921 	dec	sp
      00268F 15 81            [12] 6922 	dec	sp
      002691 EE               [12] 6923 	mov	a,r6
      002692 4F               [12] 6924 	orl	a,r7
      002693 70 63            [24] 6925 	jnz	00225$
                                   6926 ;	calc.c:316: (void)stack_push(ctx->ps, d0);
      002695 E5*00            [12] 6927 	mov	a,_bp
      002697 24 0B            [12] 6928 	add	a,#0x0b
      002699 F8               [12] 6929 	mov	r0,a
      00269A 86 82            [24] 6930 	mov	dpl,@r0
      00269C 08               [12] 6931 	inc	r0
      00269D 86 83            [24] 6932 	mov	dph,@r0
      00269F 08               [12] 6933 	inc	r0
      0026A0 86 F0            [24] 6934 	mov	b,@r0
      0026A2 12r00r00         [24] 6935 	lcall	__gptrget
      0026A5 FD               [12] 6936 	mov	r5,a
      0026A6 A3               [24] 6937 	inc	dptr
      0026A7 12r00r00         [24] 6938 	lcall	__gptrget
      0026AA FE               [12] 6939 	mov	r6,a
      0026AB A3               [24] 6940 	inc	dptr
      0026AC 12r00r00         [24] 6941 	lcall	__gptrget
      0026AF FF               [12] 6942 	mov	r7,a
      0026B0 E5*00            [12] 6943 	mov	a,_bp
      0026B2 24 15            [12] 6944 	add	a,#0x15
      0026B4 F8               [12] 6945 	mov	r0,a
      0026B5 E6               [12] 6946 	mov	a,@r0
      0026B6 C0 E0            [24] 6947 	push	acc
      0026B8 08               [12] 6948 	inc	r0
      0026B9 E6               [12] 6949 	mov	a,@r0
      0026BA C0 E0            [24] 6950 	push	acc
      0026BC 08               [12] 6951 	inc	r0
      0026BD E6               [12] 6952 	mov	a,@r0
      0026BE C0 E0            [24] 6953 	push	acc
      0026C0 08               [12] 6954 	inc	r0
      0026C1 E6               [12] 6955 	mov	a,@r0
      0026C2 C0 E0            [24] 6956 	push	acc
      0026C4 8D 82            [24] 6957 	mov	dpl,r5
      0026C6 8E 83            [24] 6958 	mov	dph,r6
      0026C8 8F F0            [24] 6959 	mov	b,r7
      0026CA 12r00r00         [24] 6960 	lcall	_stack_push
      0026CD E5 81            [12] 6961 	mov	a,sp
      0026CF 24 FC            [12] 6962 	add	a,#0xfc
      0026D1 F5 81            [12] 6963 	mov	sp,a
                                   6964 ;	calc.c:317: printstr("\r\nstack underflow\r\n");
      0026D3 7Dr4E            [12] 6965 	mov	r5,#___str_10
      0026D5 7Cs00            [12] 6966 	mov	r4,#(___str_10 >> 8)
      0026D7 7B 80            [12] 6967 	mov	r3,#0x80
                                   6968 ;	calc.c:59: return;
      0026D9                       6969 00483$:
                                   6970 ;	calc.c:57: for (; *s; s++) putchar(*s);
      0026D9 8D 82            [24] 6971 	mov	dpl,r5
      0026DB 8C 83            [24] 6972 	mov	dph,r4
      0026DD 8B F0            [24] 6973 	mov	b,r3
      0026DF 12r00r00         [24] 6974 	lcall	__gptrget
      0026E2 FF               [12] 6975 	mov	r7,a
      0026E3 70 03            [24] 6976 	jnz	01387$
      0026E5 02r2BrA4         [24] 6977 	ljmp	00249$
      0026E8                       6978 01387$:
      0026E8 7E 00            [12] 6979 	mov	r6,#0x00
      0026EA 8F 82            [24] 6980 	mov	dpl,r7
      0026EC 8E 83            [24] 6981 	mov	dph,r6
      0026EE 12r00r00         [24] 6982 	lcall	_putchar
      0026F1 0D               [12] 6983 	inc	r5
                                   6984 ;	calc.c:317: printstr("\r\nstack underflow\r\n");
      0026F2 BD 00 E4         [24] 6985 	cjne	r5,#0x00,00483$
      0026F5 0C               [12] 6986 	inc	r4
      0026F6 80 E1            [24] 6987 	sjmp	00483$
      0026F8                       6988 00225$:
                                   6989 ;	calc.c:319: d1 = (unsigned long)d1 >> d0;
      0026F8 E5*00            [12] 6990 	mov	a,_bp
      0026FA 24 19            [12] 6991 	add	a,#0x19
      0026FC F8               [12] 6992 	mov	r0,a
      0026FD 86 04            [24] 6993 	mov	ar4,@r0
      0026FF 08               [12] 6994 	inc	r0
      002700 86 05            [24] 6995 	mov	ar5,@r0
      002702 08               [12] 6996 	inc	r0
      002703 86 06            [24] 6997 	mov	ar6,@r0
      002705 08               [12] 6998 	inc	r0
      002706 86 07            [24] 6999 	mov	ar7,@r0
      002708 E5*00            [12] 7000 	mov	a,_bp
      00270A 24 15            [12] 7001 	add	a,#0x15
      00270C F8               [12] 7002 	mov	r0,a
      00270D 86 F0            [24] 7003 	mov	b,@r0
      00270F 05 F0            [12] 7004 	inc	b
      002711 80 0D            [24] 7005 	sjmp	01390$
      002713                       7006 01389$:
      002713 C3               [12] 7007 	clr	c
      002714 EF               [12] 7008 	mov	a,r7
      002715 13               [12] 7009 	rrc	a
      002716 FF               [12] 7010 	mov	r7,a
      002717 EE               [12] 7011 	mov	a,r6
      002718 13               [12] 7012 	rrc	a
      002719 FE               [12] 7013 	mov	r6,a
      00271A ED               [12] 7014 	mov	a,r5
      00271B 13               [12] 7015 	rrc	a
      00271C FD               [12] 7016 	mov	r5,a
      00271D EC               [12] 7017 	mov	a,r4
      00271E 13               [12] 7018 	rrc	a
      00271F FC               [12] 7019 	mov	r4,a
      002720                       7020 01390$:
      002720 D5 F0 F0         [24] 7021 	djnz	b,01389$
      002723 E5*00            [12] 7022 	mov	a,_bp
      002725 24 19            [12] 7023 	add	a,#0x19
      002727 F8               [12] 7024 	mov	r0,a
      002728 A6 04            [24] 7025 	mov	@r0,ar4
      00272A 08               [12] 7026 	inc	r0
      00272B A6 05            [24] 7027 	mov	@r0,ar5
      00272D 08               [12] 7028 	inc	r0
      00272E A6 06            [24] 7029 	mov	@r0,ar6
      002730 08               [12] 7030 	inc	r0
      002731 A6 07            [24] 7031 	mov	@r0,ar7
                                   7032 ;	calc.c:320: (void)stack_push(ctx->ps, d1);
      002733 E5*00            [12] 7033 	mov	a,_bp
      002735 24 0B            [12] 7034 	add	a,#0x0b
      002737 F8               [12] 7035 	mov	r0,a
      002738 86 82            [24] 7036 	mov	dpl,@r0
      00273A 08               [12] 7037 	inc	r0
      00273B 86 83            [24] 7038 	mov	dph,@r0
      00273D 08               [12] 7039 	inc	r0
      00273E 86 F0            [24] 7040 	mov	b,@r0
      002740 12r00r00         [24] 7041 	lcall	__gptrget
      002743 FD               [12] 7042 	mov	r5,a
      002744 A3               [24] 7043 	inc	dptr
      002745 12r00r00         [24] 7044 	lcall	__gptrget
      002748 FE               [12] 7045 	mov	r6,a
      002749 A3               [24] 7046 	inc	dptr
      00274A 12r00r00         [24] 7047 	lcall	__gptrget
      00274D FF               [12] 7048 	mov	r7,a
      00274E E5*00            [12] 7049 	mov	a,_bp
      002750 24 19            [12] 7050 	add	a,#0x19
      002752 F8               [12] 7051 	mov	r0,a
      002753 E6               [12] 7052 	mov	a,@r0
      002754 C0 E0            [24] 7053 	push	acc
      002756 08               [12] 7054 	inc	r0
      002757 E6               [12] 7055 	mov	a,@r0
      002758 C0 E0            [24] 7056 	push	acc
      00275A 08               [12] 7057 	inc	r0
      00275B E6               [12] 7058 	mov	a,@r0
      00275C C0 E0            [24] 7059 	push	acc
      00275E 08               [12] 7060 	inc	r0
      00275F E6               [12] 7061 	mov	a,@r0
      002760 C0 E0            [24] 7062 	push	acc
      002762 8D 82            [24] 7063 	mov	dpl,r5
      002764 8E 83            [24] 7064 	mov	dph,r6
      002766 8F F0            [24] 7065 	mov	b,r7
      002768 12r00r00         [24] 7066 	lcall	_stack_push
      00276B E5 81            [12] 7067 	mov	a,sp
      00276D 24 FC            [12] 7068 	add	a,#0xfc
      00276F F5 81            [12] 7069 	mov	sp,a
                                   7070 ;	calc.c:322: break;
      002771 02r2BrA4         [24] 7071 	ljmp	00249$
                                   7072 ;	calc.c:323: case ']':
      002774                       7073 00230$:
                                   7074 ;	calc.c:324: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      002774 E5*00            [12] 7075 	mov	a,_bp
      002776 24 15            [12] 7076 	add	a,#0x15
      002778 FF               [12] 7077 	mov	r7,a
      002779 E5*00            [12] 7078 	mov	a,_bp
      00277B 24 0E            [12] 7079 	add	a,#0x0e
      00277D F8               [12] 7080 	mov	r0,a
      00277E A6 07            [24] 7081 	mov	@r0,ar7
      002780 08               [12] 7082 	inc	r0
      002781 76 00            [12] 7083 	mov	@r0,#0x00
      002783 08               [12] 7084 	inc	r0
      002784 76 40            [12] 7085 	mov	@r0,#0x40
      002786 E5*00            [12] 7086 	mov	a,_bp
      002788 24 12            [12] 7087 	add	a,#0x12
      00278A F8               [12] 7088 	mov	r0,a
      00278B 74 11            [12] 7089 	mov	a,#0x11
      00278D 26               [12] 7090 	add	a,@r0
      00278E FA               [12] 7091 	mov	r2,a
      00278F 74 40            [12] 7092 	mov	a,#0x40
      002791 08               [12] 7093 	inc	r0
      002792 36               [12] 7094 	addc	a,@r0
      002793 FB               [12] 7095 	mov	r3,a
      002794 08               [12] 7096 	inc	r0
      002795 86 04            [24] 7097 	mov	ar4,@r0
      002797 8A 82            [24] 7098 	mov	dpl,r2
      002799 8B 83            [24] 7099 	mov	dph,r3
      00279B 8C F0            [24] 7100 	mov	b,r4
      00279D 12r00r00         [24] 7101 	lcall	__gptrget
      0027A0 FD               [12] 7102 	mov	r5,a
      0027A1 A3               [24] 7103 	inc	dptr
      0027A2 12r00r00         [24] 7104 	lcall	__gptrget
      0027A5 FE               [12] 7105 	mov	r6,a
      0027A6 A3               [24] 7106 	inc	dptr
      0027A7 12r00r00         [24] 7107 	lcall	__gptrget
      0027AA FF               [12] 7108 	mov	r7,a
      0027AB C0 04            [24] 7109 	push	ar4
      0027AD C0 03            [24] 7110 	push	ar3
      0027AF C0 02            [24] 7111 	push	ar2
      0027B1 E5*00            [12] 7112 	mov	a,_bp
      0027B3 24 0E            [12] 7113 	add	a,#0x0e
      0027B5 F8               [12] 7114 	mov	r0,a
      0027B6 E6               [12] 7115 	mov	a,@r0
      0027B7 C0 E0            [24] 7116 	push	acc
      0027B9 08               [12] 7117 	inc	r0
      0027BA E6               [12] 7118 	mov	a,@r0
      0027BB C0 E0            [24] 7119 	push	acc
      0027BD 08               [12] 7120 	inc	r0
      0027BE E6               [12] 7121 	mov	a,@r0
      0027BF C0 E0            [24] 7122 	push	acc
      0027C1 8D 82            [24] 7123 	mov	dpl,r5
      0027C3 8E 83            [24] 7124 	mov	dph,r6
      0027C5 8F F0            [24] 7125 	mov	b,r7
      0027C7 12r00r00         [24] 7126 	lcall	_stack_pop
      0027CA AE 82            [24] 7127 	mov	r6,dpl
      0027CC AF 83            [24] 7128 	mov	r7,dph
      0027CE 15 81            [12] 7129 	dec	sp
      0027D0 15 81            [12] 7130 	dec	sp
      0027D2 15 81            [12] 7131 	dec	sp
      0027D4 D0 02            [24] 7132 	pop	ar2
      0027D6 D0 03            [24] 7133 	pop	ar3
      0027D8 D0 04            [24] 7134 	pop	ar4
      0027DA EE               [12] 7135 	mov	a,r6
      0027DB 4F               [12] 7136 	orl	a,r7
      0027DC 70 25            [24] 7137 	jnz	00235$
      0027DE 7Dr4E            [12] 7138 	mov	r5,#___str_10
      0027E0 7Cs00            [12] 7139 	mov	r4,#(___str_10 >> 8)
      0027E2 7B 80            [12] 7140 	mov	r3,#0x80
                                   7141 ;	calc.c:59: return;
      0027E4                       7142 00486$:
                                   7143 ;	calc.c:57: for (; *s; s++) putchar(*s);
      0027E4 8D 82            [24] 7144 	mov	dpl,r5
      0027E6 8C 83            [24] 7145 	mov	dph,r4
      0027E8 8B F0            [24] 7146 	mov	b,r3
      0027EA 12r00r00         [24] 7147 	lcall	__gptrget
      0027ED FF               [12] 7148 	mov	r7,a
      0027EE 70 03            [24] 7149 	jnz	01392$
      0027F0 02r2BrA4         [24] 7150 	ljmp	00249$
      0027F3                       7151 01392$:
      0027F3 7E 00            [12] 7152 	mov	r6,#0x00
      0027F5 8F 82            [24] 7153 	mov	dpl,r7
      0027F7 8E 83            [24] 7154 	mov	dph,r6
      0027F9 12r00r00         [24] 7155 	lcall	_putchar
      0027FC 0D               [12] 7156 	inc	r5
                                   7157 ;	calc.c:324: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      0027FD BD 00 E4         [24] 7158 	cjne	r5,#0x00,00486$
      002800 0C               [12] 7159 	inc	r4
      002801 80 E1            [24] 7160 	sjmp	00486$
      002803                       7161 00235$:
                                   7162 ;	calc.c:325: else if (!stack_pop(ctx->ps, &d1)) {
      002803 E5*00            [12] 7163 	mov	a,_bp
      002805 24 19            [12] 7164 	add	a,#0x19
      002807 FF               [12] 7165 	mov	r7,a
      002808 E5*00            [12] 7166 	mov	a,_bp
      00280A 24 0E            [12] 7167 	add	a,#0x0e
      00280C F8               [12] 7168 	mov	r0,a
      00280D A6 07            [24] 7169 	mov	@r0,ar7
      00280F 08               [12] 7170 	inc	r0
      002810 76 00            [12] 7171 	mov	@r0,#0x00
      002812 08               [12] 7172 	inc	r0
      002813 76 40            [12] 7173 	mov	@r0,#0x40
      002815 8A 82            [24] 7174 	mov	dpl,r2
      002817 8B 83            [24] 7175 	mov	dph,r3
      002819 8C F0            [24] 7176 	mov	b,r4
      00281B 12r00r00         [24] 7177 	lcall	__gptrget
      00281E FD               [12] 7178 	mov	r5,a
      00281F A3               [24] 7179 	inc	dptr
      002820 12r00r00         [24] 7180 	lcall	__gptrget
      002823 FE               [12] 7181 	mov	r6,a
      002824 A3               [24] 7182 	inc	dptr
      002825 12r00r00         [24] 7183 	lcall	__gptrget
      002828 FF               [12] 7184 	mov	r7,a
      002829 C0 04            [24] 7185 	push	ar4
      00282B C0 03            [24] 7186 	push	ar3
      00282D C0 02            [24] 7187 	push	ar2
      00282F E5*00            [12] 7188 	mov	a,_bp
      002831 24 0E            [12] 7189 	add	a,#0x0e
      002833 F8               [12] 7190 	mov	r0,a
      002834 E6               [12] 7191 	mov	a,@r0
      002835 C0 E0            [24] 7192 	push	acc
      002837 08               [12] 7193 	inc	r0
      002838 E6               [12] 7194 	mov	a,@r0
      002839 C0 E0            [24] 7195 	push	acc
      00283B 08               [12] 7196 	inc	r0
      00283C E6               [12] 7197 	mov	a,@r0
      00283D C0 E0            [24] 7198 	push	acc
      00283F 8D 82            [24] 7199 	mov	dpl,r5
      002841 8E 83            [24] 7200 	mov	dph,r6
      002843 8F F0            [24] 7201 	mov	b,r7
      002845 12r00r00         [24] 7202 	lcall	_stack_pop
      002848 AE 82            [24] 7203 	mov	r6,dpl
      00284A AF 83            [24] 7204 	mov	r7,dph
      00284C 15 81            [12] 7205 	dec	sp
      00284E 15 81            [12] 7206 	dec	sp
      002850 15 81            [12] 7207 	dec	sp
      002852 D0 02            [24] 7208 	pop	ar2
      002854 D0 03            [24] 7209 	pop	ar3
      002856 D0 04            [24] 7210 	pop	ar4
      002858 EE               [12] 7211 	mov	a,r6
      002859 4F               [12] 7212 	orl	a,r7
      00285A 70 5C            [24] 7213 	jnz	00232$
                                   7214 ;	calc.c:326: (void)stack_push(ctx->ps, d0);
      00285C 8A 82            [24] 7215 	mov	dpl,r2
      00285E 8B 83            [24] 7216 	mov	dph,r3
      002860 8C F0            [24] 7217 	mov	b,r4
      002862 12r00r00         [24] 7218 	lcall	__gptrget
      002865 FD               [12] 7219 	mov	r5,a
      002866 A3               [24] 7220 	inc	dptr
      002867 12r00r00         [24] 7221 	lcall	__gptrget
      00286A FE               [12] 7222 	mov	r6,a
      00286B A3               [24] 7223 	inc	dptr
      00286C 12r00r00         [24] 7224 	lcall	__gptrget
      00286F FF               [12] 7225 	mov	r7,a
      002870 E5*00            [12] 7226 	mov	a,_bp
      002872 24 15            [12] 7227 	add	a,#0x15
      002874 F8               [12] 7228 	mov	r0,a
      002875 E6               [12] 7229 	mov	a,@r0
      002876 C0 E0            [24] 7230 	push	acc
      002878 08               [12] 7231 	inc	r0
      002879 E6               [12] 7232 	mov	a,@r0
      00287A C0 E0            [24] 7233 	push	acc
      00287C 08               [12] 7234 	inc	r0
      00287D E6               [12] 7235 	mov	a,@r0
      00287E C0 E0            [24] 7236 	push	acc
      002880 08               [12] 7237 	inc	r0
      002881 E6               [12] 7238 	mov	a,@r0
      002882 C0 E0            [24] 7239 	push	acc
      002884 8D 82            [24] 7240 	mov	dpl,r5
      002886 8E 83            [24] 7241 	mov	dph,r6
      002888 8F F0            [24] 7242 	mov	b,r7
      00288A 12r00r00         [24] 7243 	lcall	_stack_push
      00288D E5 81            [12] 7244 	mov	a,sp
      00288F 24 FC            [12] 7245 	add	a,#0xfc
      002891 F5 81            [12] 7246 	mov	sp,a
                                   7247 ;	calc.c:327: printstr("\r\nstack underflow\r\n");
      002893 7Dr4E            [12] 7248 	mov	r5,#___str_10
      002895 7Cs00            [12] 7249 	mov	r4,#(___str_10 >> 8)
      002897 7B 80            [12] 7250 	mov	r3,#0x80
                                   7251 ;	calc.c:59: return;
      002899                       7252 00489$:
                                   7253 ;	calc.c:57: for (; *s; s++) putchar(*s);
      002899 8D 82            [24] 7254 	mov	dpl,r5
      00289B 8C 83            [24] 7255 	mov	dph,r4
      00289D 8B F0            [24] 7256 	mov	b,r3
      00289F 12r00r00         [24] 7257 	lcall	__gptrget
      0028A2 FF               [12] 7258 	mov	r7,a
      0028A3 70 03            [24] 7259 	jnz	01395$
      0028A5 02r2BrA4         [24] 7260 	ljmp	00249$
      0028A8                       7261 01395$:
      0028A8 7E 00            [12] 7262 	mov	r6,#0x00
      0028AA 8F 82            [24] 7263 	mov	dpl,r7
      0028AC 8E 83            [24] 7264 	mov	dph,r6
      0028AE 12r00r00         [24] 7265 	lcall	_putchar
      0028B1 0D               [12] 7266 	inc	r5
                                   7267 ;	calc.c:327: printstr("\r\nstack underflow\r\n");
      0028B2 BD 00 E4         [24] 7268 	cjne	r5,#0x00,00489$
      0028B5 0C               [12] 7269 	inc	r4
      0028B6 80 E1            [24] 7270 	sjmp	00489$
      0028B8                       7271 00232$:
                                   7272 ;	calc.c:329: d1 >>= d0;
      0028B8 E5*00            [12] 7273 	mov	a,_bp
      0028BA 24 15            [12] 7274 	add	a,#0x15
      0028BC F8               [12] 7275 	mov	r0,a
      0028BD 86 F0            [24] 7276 	mov	b,@r0
      0028BF 05 F0            [12] 7277 	inc	b
      0028C1 E5*00            [12] 7278 	mov	a,_bp
      0028C3 24 19            [12] 7279 	add	a,#0x19
      0028C5 F8               [12] 7280 	mov	r0,a
      0028C6 08               [12] 7281 	inc	r0
      0028C7 08               [12] 7282 	inc	r0
      0028C8 08               [12] 7283 	inc	r0
      0028C9 E6               [12] 7284 	mov	a,@r0
      0028CA 33               [12] 7285 	rlc	a
      0028CB 92 D2            [24] 7286 	mov	ov,c
      0028CD 18               [12] 7287 	dec	r0
      0028CE 18               [12] 7288 	dec	r0
      0028CF 18               [12] 7289 	dec	r0
      0028D0 80 14            [24] 7290 	sjmp	01398$
      0028D2                       7291 01397$:
      0028D2 A2 D2            [12] 7292 	mov	c,ov
      0028D4 08               [12] 7293 	inc	r0
      0028D5 08               [12] 7294 	inc	r0
      0028D6 08               [12] 7295 	inc	r0
      0028D7 E6               [12] 7296 	mov	a,@r0
      0028D8 13               [12] 7297 	rrc	a
      0028D9 F6               [12] 7298 	mov	@r0,a
      0028DA 18               [12] 7299 	dec	r0
      0028DB E6               [12] 7300 	mov	a,@r0
      0028DC 13               [12] 7301 	rrc	a
      0028DD F6               [12] 7302 	mov	@r0,a
      0028DE 18               [12] 7303 	dec	r0
      0028DF E6               [12] 7304 	mov	a,@r0
      0028E0 13               [12] 7305 	rrc	a
      0028E1 F6               [12] 7306 	mov	@r0,a
      0028E2 18               [12] 7307 	dec	r0
      0028E3 E6               [12] 7308 	mov	a,@r0
      0028E4 13               [12] 7309 	rrc	a
      0028E5 F6               [12] 7310 	mov	@r0,a
      0028E6                       7311 01398$:
      0028E6 D5 F0 E9         [24] 7312 	djnz	b,01397$
                                   7313 ;	calc.c:330: (void)stack_push(ctx->ps, d1);
      0028E9 8A 82            [24] 7314 	mov	dpl,r2
      0028EB 8B 83            [24] 7315 	mov	dph,r3
      0028ED 8C F0            [24] 7316 	mov	b,r4
      0028EF 12r00r00         [24] 7317 	lcall	__gptrget
      0028F2 FA               [12] 7318 	mov	r2,a
      0028F3 A3               [24] 7319 	inc	dptr
      0028F4 12r00r00         [24] 7320 	lcall	__gptrget
      0028F7 FB               [12] 7321 	mov	r3,a
      0028F8 A3               [24] 7322 	inc	dptr
      0028F9 12r00r00         [24] 7323 	lcall	__gptrget
      0028FC FC               [12] 7324 	mov	r4,a
      0028FD E5*00            [12] 7325 	mov	a,_bp
      0028FF 24 19            [12] 7326 	add	a,#0x19
      002901 F8               [12] 7327 	mov	r0,a
      002902 E6               [12] 7328 	mov	a,@r0
      002903 C0 E0            [24] 7329 	push	acc
      002905 08               [12] 7330 	inc	r0
      002906 E6               [12] 7331 	mov	a,@r0
      002907 C0 E0            [24] 7332 	push	acc
      002909 08               [12] 7333 	inc	r0
      00290A E6               [12] 7334 	mov	a,@r0
      00290B C0 E0            [24] 7335 	push	acc
      00290D 08               [12] 7336 	inc	r0
      00290E E6               [12] 7337 	mov	a,@r0
      00290F C0 E0            [24] 7338 	push	acc
      002911 8A 82            [24] 7339 	mov	dpl,r2
      002913 8B 83            [24] 7340 	mov	dph,r3
      002915 8C F0            [24] 7341 	mov	b,r4
      002917 12r00r00         [24] 7342 	lcall	_stack_push
      00291A E5 81            [12] 7343 	mov	a,sp
      00291C 24 FC            [12] 7344 	add	a,#0xfc
      00291E F5 81            [12] 7345 	mov	sp,a
                                   7346 ;	calc.c:332: break;
      002920 02r2BrA4         [24] 7347 	ljmp	00249$
                                   7348 ;	calc.c:333: case '<':
      002923                       7349 00237$:
                                   7350 ;	calc.c:334: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      002923 E5*00            [12] 7351 	mov	a,_bp
      002925 24 15            [12] 7352 	add	a,#0x15
      002927 FF               [12] 7353 	mov	r7,a
      002928 E5*00            [12] 7354 	mov	a,_bp
      00292A 24 0E            [12] 7355 	add	a,#0x0e
      00292C F8               [12] 7356 	mov	r0,a
      00292D A6 07            [24] 7357 	mov	@r0,ar7
      00292F 08               [12] 7358 	inc	r0
      002930 76 00            [12] 7359 	mov	@r0,#0x00
      002932 08               [12] 7360 	inc	r0
      002933 76 40            [12] 7361 	mov	@r0,#0x40
      002935 E5*00            [12] 7362 	mov	a,_bp
      002937 24 12            [12] 7363 	add	a,#0x12
      002939 F8               [12] 7364 	mov	r0,a
      00293A 74 11            [12] 7365 	mov	a,#0x11
      00293C 26               [12] 7366 	add	a,@r0
      00293D FA               [12] 7367 	mov	r2,a
      00293E 74 40            [12] 7368 	mov	a,#0x40
      002940 08               [12] 7369 	inc	r0
      002941 36               [12] 7370 	addc	a,@r0
      002942 FB               [12] 7371 	mov	r3,a
      002943 08               [12] 7372 	inc	r0
      002944 86 04            [24] 7373 	mov	ar4,@r0
      002946 8A 82            [24] 7374 	mov	dpl,r2
      002948 8B 83            [24] 7375 	mov	dph,r3
      00294A 8C F0            [24] 7376 	mov	b,r4
      00294C 12r00r00         [24] 7377 	lcall	__gptrget
      00294F FD               [12] 7378 	mov	r5,a
      002950 A3               [24] 7379 	inc	dptr
      002951 12r00r00         [24] 7380 	lcall	__gptrget
      002954 FE               [12] 7381 	mov	r6,a
      002955 A3               [24] 7382 	inc	dptr
      002956 12r00r00         [24] 7383 	lcall	__gptrget
      002959 FF               [12] 7384 	mov	r7,a
      00295A C0 04            [24] 7385 	push	ar4
      00295C C0 03            [24] 7386 	push	ar3
      00295E C0 02            [24] 7387 	push	ar2
      002960 E5*00            [12] 7388 	mov	a,_bp
      002962 24 0E            [12] 7389 	add	a,#0x0e
      002964 F8               [12] 7390 	mov	r0,a
      002965 E6               [12] 7391 	mov	a,@r0
      002966 C0 E0            [24] 7392 	push	acc
      002968 08               [12] 7393 	inc	r0
      002969 E6               [12] 7394 	mov	a,@r0
      00296A C0 E0            [24] 7395 	push	acc
      00296C 08               [12] 7396 	inc	r0
      00296D E6               [12] 7397 	mov	a,@r0
      00296E C0 E0            [24] 7398 	push	acc
      002970 8D 82            [24] 7399 	mov	dpl,r5
      002972 8E 83            [24] 7400 	mov	dph,r6
      002974 8F F0            [24] 7401 	mov	b,r7
      002976 12r00r00         [24] 7402 	lcall	_stack_pop
      002979 AE 82            [24] 7403 	mov	r6,dpl
      00297B AF 83            [24] 7404 	mov	r7,dph
      00297D 15 81            [12] 7405 	dec	sp
      00297F 15 81            [12] 7406 	dec	sp
      002981 15 81            [12] 7407 	dec	sp
      002983 D0 02            [24] 7408 	pop	ar2
      002985 D0 03            [24] 7409 	pop	ar3
      002987 D0 04            [24] 7410 	pop	ar4
      002989 EE               [12] 7411 	mov	a,r6
      00298A 4F               [12] 7412 	orl	a,r7
      00298B 70 25            [24] 7413 	jnz	00242$
      00298D 7Dr4E            [12] 7414 	mov	r5,#___str_10
      00298F 7Cs00            [12] 7415 	mov	r4,#(___str_10 >> 8)
      002991 7B 80            [12] 7416 	mov	r3,#0x80
                                   7417 ;	calc.c:59: return;
      002993                       7418 00492$:
                                   7419 ;	calc.c:57: for (; *s; s++) putchar(*s);
      002993 8D 82            [24] 7420 	mov	dpl,r5
      002995 8C 83            [24] 7421 	mov	dph,r4
      002997 8B F0            [24] 7422 	mov	b,r3
      002999 12r00r00         [24] 7423 	lcall	__gptrget
      00299C FF               [12] 7424 	mov	r7,a
      00299D 70 03            [24] 7425 	jnz	01400$
      00299F 02r2BrA4         [24] 7426 	ljmp	00249$
      0029A2                       7427 01400$:
      0029A2 7E 00            [12] 7428 	mov	r6,#0x00
      0029A4 8F 82            [24] 7429 	mov	dpl,r7
      0029A6 8E 83            [24] 7430 	mov	dph,r6
      0029A8 12r00r00         [24] 7431 	lcall	_putchar
      0029AB 0D               [12] 7432 	inc	r5
                                   7433 ;	calc.c:334: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      0029AC BD 00 E4         [24] 7434 	cjne	r5,#0x00,00492$
      0029AF 0C               [12] 7435 	inc	r4
      0029B0 80 E1            [24] 7436 	sjmp	00492$
      0029B2                       7437 00242$:
                                   7438 ;	calc.c:335: else if (!stack_pop(ctx->ps, &d1)) {
      0029B2 E5*00            [12] 7439 	mov	a,_bp
      0029B4 24 19            [12] 7440 	add	a,#0x19
      0029B6 FF               [12] 7441 	mov	r7,a
      0029B7 E5*00            [12] 7442 	mov	a,_bp
      0029B9 24 0E            [12] 7443 	add	a,#0x0e
      0029BB F8               [12] 7444 	mov	r0,a
      0029BC A6 07            [24] 7445 	mov	@r0,ar7
      0029BE 08               [12] 7446 	inc	r0
      0029BF 76 00            [12] 7447 	mov	@r0,#0x00
      0029C1 08               [12] 7448 	inc	r0
      0029C2 76 40            [12] 7449 	mov	@r0,#0x40
      0029C4 8A 82            [24] 7450 	mov	dpl,r2
      0029C6 8B 83            [24] 7451 	mov	dph,r3
      0029C8 8C F0            [24] 7452 	mov	b,r4
      0029CA 12r00r00         [24] 7453 	lcall	__gptrget
      0029CD FD               [12] 7454 	mov	r5,a
      0029CE A3               [24] 7455 	inc	dptr
      0029CF 12r00r00         [24] 7456 	lcall	__gptrget
      0029D2 FE               [12] 7457 	mov	r6,a
      0029D3 A3               [24] 7458 	inc	dptr
      0029D4 12r00r00         [24] 7459 	lcall	__gptrget
      0029D7 FF               [12] 7460 	mov	r7,a
      0029D8 C0 04            [24] 7461 	push	ar4
      0029DA C0 03            [24] 7462 	push	ar3
      0029DC C0 02            [24] 7463 	push	ar2
      0029DE E5*00            [12] 7464 	mov	a,_bp
      0029E0 24 0E            [12] 7465 	add	a,#0x0e
      0029E2 F8               [12] 7466 	mov	r0,a
      0029E3 E6               [12] 7467 	mov	a,@r0
      0029E4 C0 E0            [24] 7468 	push	acc
      0029E6 08               [12] 7469 	inc	r0
      0029E7 E6               [12] 7470 	mov	a,@r0
      0029E8 C0 E0            [24] 7471 	push	acc
      0029EA 08               [12] 7472 	inc	r0
      0029EB E6               [12] 7473 	mov	a,@r0
      0029EC C0 E0            [24] 7474 	push	acc
      0029EE 8D 82            [24] 7475 	mov	dpl,r5
      0029F0 8E 83            [24] 7476 	mov	dph,r6
      0029F2 8F F0            [24] 7477 	mov	b,r7
      0029F4 12r00r00         [24] 7478 	lcall	_stack_pop
      0029F7 AE 82            [24] 7479 	mov	r6,dpl
      0029F9 AF 83            [24] 7480 	mov	r7,dph
      0029FB 15 81            [12] 7481 	dec	sp
      0029FD 15 81            [12] 7482 	dec	sp
      0029FF 15 81            [12] 7483 	dec	sp
      002A01 D0 02            [24] 7484 	pop	ar2
      002A03 D0 03            [24] 7485 	pop	ar3
      002A05 D0 04            [24] 7486 	pop	ar4
      002A07 EE               [12] 7487 	mov	a,r6
      002A08 4F               [12] 7488 	orl	a,r7
      002A09 70 5C            [24] 7489 	jnz	00239$
                                   7490 ;	calc.c:336: (void)stack_push(ctx->ps, d0);
      002A0B 8A 82            [24] 7491 	mov	dpl,r2
      002A0D 8B 83            [24] 7492 	mov	dph,r3
      002A0F 8C F0            [24] 7493 	mov	b,r4
      002A11 12r00r00         [24] 7494 	lcall	__gptrget
      002A14 FD               [12] 7495 	mov	r5,a
      002A15 A3               [24] 7496 	inc	dptr
      002A16 12r00r00         [24] 7497 	lcall	__gptrget
      002A19 FE               [12] 7498 	mov	r6,a
      002A1A A3               [24] 7499 	inc	dptr
      002A1B 12r00r00         [24] 7500 	lcall	__gptrget
      002A1E FF               [12] 7501 	mov	r7,a
      002A1F E5*00            [12] 7502 	mov	a,_bp
      002A21 24 15            [12] 7503 	add	a,#0x15
      002A23 F8               [12] 7504 	mov	r0,a
      002A24 E6               [12] 7505 	mov	a,@r0
      002A25 C0 E0            [24] 7506 	push	acc
      002A27 08               [12] 7507 	inc	r0
      002A28 E6               [12] 7508 	mov	a,@r0
      002A29 C0 E0            [24] 7509 	push	acc
      002A2B 08               [12] 7510 	inc	r0
      002A2C E6               [12] 7511 	mov	a,@r0
      002A2D C0 E0            [24] 7512 	push	acc
      002A2F 08               [12] 7513 	inc	r0
      002A30 E6               [12] 7514 	mov	a,@r0
      002A31 C0 E0            [24] 7515 	push	acc
      002A33 8D 82            [24] 7516 	mov	dpl,r5
      002A35 8E 83            [24] 7517 	mov	dph,r6
      002A37 8F F0            [24] 7518 	mov	b,r7
      002A39 12r00r00         [24] 7519 	lcall	_stack_push
      002A3C E5 81            [12] 7520 	mov	a,sp
      002A3E 24 FC            [12] 7521 	add	a,#0xfc
      002A40 F5 81            [12] 7522 	mov	sp,a
                                   7523 ;	calc.c:337: printstr("\r\nstack underflow\r\n");
      002A42 7Dr4E            [12] 7524 	mov	r5,#___str_10
      002A44 7Cs00            [12] 7525 	mov	r4,#(___str_10 >> 8)
      002A46 7B 80            [12] 7526 	mov	r3,#0x80
                                   7527 ;	calc.c:59: return;
      002A48                       7528 00495$:
                                   7529 ;	calc.c:57: for (; *s; s++) putchar(*s);
      002A48 8D 82            [24] 7530 	mov	dpl,r5
      002A4A 8C 83            [24] 7531 	mov	dph,r4
      002A4C 8B F0            [24] 7532 	mov	b,r3
      002A4E 12r00r00         [24] 7533 	lcall	__gptrget
      002A51 FF               [12] 7534 	mov	r7,a
      002A52 70 03            [24] 7535 	jnz	01403$
      002A54 02r2BrA4         [24] 7536 	ljmp	00249$
      002A57                       7537 01403$:
      002A57 7E 00            [12] 7538 	mov	r6,#0x00
      002A59 8F 82            [24] 7539 	mov	dpl,r7
      002A5B 8E 83            [24] 7540 	mov	dph,r6
      002A5D 12r00r00         [24] 7541 	lcall	_putchar
      002A60 0D               [12] 7542 	inc	r5
                                   7543 ;	calc.c:337: printstr("\r\nstack underflow\r\n");
      002A61 BD 00 E4         [24] 7544 	cjne	r5,#0x00,00495$
      002A64 0C               [12] 7545 	inc	r4
      002A65 80 E1            [24] 7546 	sjmp	00495$
      002A67                       7547 00239$:
                                   7548 ;	calc.c:339: d1 <<= d0;
      002A67 E5*00            [12] 7549 	mov	a,_bp
      002A69 24 15            [12] 7550 	add	a,#0x15
      002A6B F8               [12] 7551 	mov	r0,a
      002A6C 86 F0            [24] 7552 	mov	b,@r0
      002A6E 05 F0            [12] 7553 	inc	b
      002A70 E5*00            [12] 7554 	mov	a,_bp
      002A72 24 19            [12] 7555 	add	a,#0x19
      002A74 F8               [12] 7556 	mov	r0,a
      002A75 80 12            [24] 7557 	sjmp	01406$
      002A77                       7558 01405$:
      002A77 E6               [12] 7559 	mov	a,@r0
      002A78 26               [12] 7560 	add	a,@r0
      002A79 F6               [12] 7561 	mov	@r0,a
      002A7A 08               [12] 7562 	inc	r0
      002A7B E6               [12] 7563 	mov	a,@r0
      002A7C 33               [12] 7564 	rlc	a
      002A7D F6               [12] 7565 	mov	@r0,a
      002A7E 08               [12] 7566 	inc	r0
      002A7F E6               [12] 7567 	mov	a,@r0
      002A80 33               [12] 7568 	rlc	a
      002A81 F6               [12] 7569 	mov	@r0,a
      002A82 08               [12] 7570 	inc	r0
      002A83 E6               [12] 7571 	mov	a,@r0
      002A84 33               [12] 7572 	rlc	a
      002A85 F6               [12] 7573 	mov	@r0,a
      002A86 18               [12] 7574 	dec	r0
      002A87 18               [12] 7575 	dec	r0
      002A88 18               [12] 7576 	dec	r0
      002A89                       7577 01406$:
      002A89 D5 F0 EB         [24] 7578 	djnz	b,01405$
                                   7579 ;	calc.c:340: (void)stack_push(ctx->ps, d1);
      002A8C 8A 82            [24] 7580 	mov	dpl,r2
      002A8E 8B 83            [24] 7581 	mov	dph,r3
      002A90 8C F0            [24] 7582 	mov	b,r4
      002A92 12r00r00         [24] 7583 	lcall	__gptrget
      002A95 FA               [12] 7584 	mov	r2,a
      002A96 A3               [24] 7585 	inc	dptr
      002A97 12r00r00         [24] 7586 	lcall	__gptrget
      002A9A FB               [12] 7587 	mov	r3,a
      002A9B A3               [24] 7588 	inc	dptr
      002A9C 12r00r00         [24] 7589 	lcall	__gptrget
      002A9F FC               [12] 7590 	mov	r4,a
      002AA0 E5*00            [12] 7591 	mov	a,_bp
      002AA2 24 19            [12] 7592 	add	a,#0x19
      002AA4 F8               [12] 7593 	mov	r0,a
      002AA5 E6               [12] 7594 	mov	a,@r0
      002AA6 C0 E0            [24] 7595 	push	acc
      002AA8 08               [12] 7596 	inc	r0
      002AA9 E6               [12] 7597 	mov	a,@r0
      002AAA C0 E0            [24] 7598 	push	acc
      002AAC 08               [12] 7599 	inc	r0
      002AAD E6               [12] 7600 	mov	a,@r0
      002AAE C0 E0            [24] 7601 	push	acc
      002AB0 08               [12] 7602 	inc	r0
      002AB1 E6               [12] 7603 	mov	a,@r0
      002AB2 C0 E0            [24] 7604 	push	acc
      002AB4 8A 82            [24] 7605 	mov	dpl,r2
      002AB6 8B 83            [24] 7606 	mov	dph,r3
      002AB8 8C F0            [24] 7607 	mov	b,r4
      002ABA 12r00r00         [24] 7608 	lcall	_stack_push
      002ABD E5 81            [12] 7609 	mov	a,sp
      002ABF 24 FC            [12] 7610 	add	a,#0xfc
      002AC1 F5 81            [12] 7611 	mov	sp,a
                                   7612 ;	calc.c:342: break;
      002AC3 02r2BrA4         [24] 7613 	ljmp	00249$
                                   7614 ;	calc.c:343: case '~':
      002AC6                       7615 00244$:
                                   7616 ;	calc.c:344: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      002AC6 E5*00            [12] 7617 	mov	a,_bp
      002AC8 24 15            [12] 7618 	add	a,#0x15
      002ACA FF               [12] 7619 	mov	r7,a
      002ACB E5*00            [12] 7620 	mov	a,_bp
      002ACD 24 0E            [12] 7621 	add	a,#0x0e
      002ACF F8               [12] 7622 	mov	r0,a
      002AD0 A6 07            [24] 7623 	mov	@r0,ar7
      002AD2 08               [12] 7624 	inc	r0
      002AD3 76 00            [12] 7625 	mov	@r0,#0x00
      002AD5 08               [12] 7626 	inc	r0
      002AD6 76 40            [12] 7627 	mov	@r0,#0x40
      002AD8 E5*00            [12] 7628 	mov	a,_bp
      002ADA 24 12            [12] 7629 	add	a,#0x12
      002ADC F8               [12] 7630 	mov	r0,a
      002ADD 74 11            [12] 7631 	mov	a,#0x11
      002ADF 26               [12] 7632 	add	a,@r0
      002AE0 FA               [12] 7633 	mov	r2,a
      002AE1 74 40            [12] 7634 	mov	a,#0x40
      002AE3 08               [12] 7635 	inc	r0
      002AE4 36               [12] 7636 	addc	a,@r0
      002AE5 FB               [12] 7637 	mov	r3,a
      002AE6 08               [12] 7638 	inc	r0
      002AE7 86 04            [24] 7639 	mov	ar4,@r0
      002AE9 8A 82            [24] 7640 	mov	dpl,r2
      002AEB 8B 83            [24] 7641 	mov	dph,r3
      002AED 8C F0            [24] 7642 	mov	b,r4
      002AEF 12r00r00         [24] 7643 	lcall	__gptrget
      002AF2 FD               [12] 7644 	mov	r5,a
      002AF3 A3               [24] 7645 	inc	dptr
      002AF4 12r00r00         [24] 7646 	lcall	__gptrget
      002AF7 FE               [12] 7647 	mov	r6,a
      002AF8 A3               [24] 7648 	inc	dptr
      002AF9 12r00r00         [24] 7649 	lcall	__gptrget
      002AFC FF               [12] 7650 	mov	r7,a
      002AFD C0 04            [24] 7651 	push	ar4
      002AFF C0 03            [24] 7652 	push	ar3
      002B01 C0 02            [24] 7653 	push	ar2
      002B03 E5*00            [12] 7654 	mov	a,_bp
      002B05 24 0E            [12] 7655 	add	a,#0x0e
      002B07 F8               [12] 7656 	mov	r0,a
      002B08 E6               [12] 7657 	mov	a,@r0
      002B09 C0 E0            [24] 7658 	push	acc
      002B0B 08               [12] 7659 	inc	r0
      002B0C E6               [12] 7660 	mov	a,@r0
      002B0D C0 E0            [24] 7661 	push	acc
      002B0F 08               [12] 7662 	inc	r0
      002B10 E6               [12] 7663 	mov	a,@r0
      002B11 C0 E0            [24] 7664 	push	acc
      002B13 8D 82            [24] 7665 	mov	dpl,r5
      002B15 8E 83            [24] 7666 	mov	dph,r6
      002B17 8F F0            [24] 7667 	mov	b,r7
      002B19 12r00r00         [24] 7668 	lcall	_stack_pop
      002B1C AE 82            [24] 7669 	mov	r6,dpl
      002B1E AF 83            [24] 7670 	mov	r7,dph
      002B20 15 81            [12] 7671 	dec	sp
      002B22 15 81            [12] 7672 	dec	sp
      002B24 15 81            [12] 7673 	dec	sp
      002B26 D0 02            [24] 7674 	pop	ar2
      002B28 D0 03            [24] 7675 	pop	ar3
      002B2A D0 04            [24] 7676 	pop	ar4
      002B2C EE               [12] 7677 	mov	a,r6
      002B2D 4F               [12] 7678 	orl	a,r7
      002B2E 70 22            [24] 7679 	jnz	00246$
      002B30 7Dr4E            [12] 7680 	mov	r5,#___str_10
      002B32 7Cs00            [12] 7681 	mov	r4,#(___str_10 >> 8)
      002B34 7B 80            [12] 7682 	mov	r3,#0x80
                                   7683 ;	calc.c:59: return;
      002B36                       7684 00498$:
                                   7685 ;	calc.c:57: for (; *s; s++) putchar(*s);
      002B36 8D 82            [24] 7686 	mov	dpl,r5
      002B38 8C 83            [24] 7687 	mov	dph,r4
      002B3A 8B F0            [24] 7688 	mov	b,r3
      002B3C 12r00r00         [24] 7689 	lcall	__gptrget
      002B3F FF               [12] 7690 	mov	r7,a
      002B40 60 62            [24] 7691 	jz	00249$
      002B42 7E 00            [12] 7692 	mov	r6,#0x00
      002B44 8F 82            [24] 7693 	mov	dpl,r7
      002B46 8E 83            [24] 7694 	mov	dph,r6
      002B48 12r00r00         [24] 7695 	lcall	_putchar
      002B4B 0D               [12] 7696 	inc	r5
                                   7697 ;	calc.c:344: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      002B4C BD 00 E7         [24] 7698 	cjne	r5,#0x00,00498$
      002B4F 0C               [12] 7699 	inc	r4
      002B50 80 E4            [24] 7700 	sjmp	00498$
      002B52                       7701 00246$:
                                   7702 ;	calc.c:346: d0 = ~d0;
      002B52 E5*00            [12] 7703 	mov	a,_bp
      002B54 24 15            [12] 7704 	add	a,#0x15
      002B56 F8               [12] 7705 	mov	r0,a
      002B57 E6               [12] 7706 	mov	a,@r0
      002B58 F4               [12] 7707 	cpl	a
      002B59 F6               [12] 7708 	mov	@r0,a
      002B5A 08               [12] 7709 	inc	r0
      002B5B E6               [12] 7710 	mov	a,@r0
      002B5C F4               [12] 7711 	cpl	a
      002B5D F6               [12] 7712 	mov	@r0,a
      002B5E 08               [12] 7713 	inc	r0
      002B5F E6               [12] 7714 	mov	a,@r0
      002B60 F4               [12] 7715 	cpl	a
      002B61 F6               [12] 7716 	mov	@r0,a
      002B62 08               [12] 7717 	inc	r0
      002B63 E6               [12] 7718 	mov	a,@r0
      002B64 F4               [12] 7719 	cpl	a
      002B65 F6               [12] 7720 	mov	@r0,a
                                   7721 ;	calc.c:347: (void)stack_push(ctx->ps, d0);
      002B66 8A 82            [24] 7722 	mov	dpl,r2
      002B68 8B 83            [24] 7723 	mov	dph,r3
      002B6A 8C F0            [24] 7724 	mov	b,r4
      002B6C 12r00r00         [24] 7725 	lcall	__gptrget
      002B6F FA               [12] 7726 	mov	r2,a
      002B70 A3               [24] 7727 	inc	dptr
      002B71 12r00r00         [24] 7728 	lcall	__gptrget
      002B74 FB               [12] 7729 	mov	r3,a
      002B75 A3               [24] 7730 	inc	dptr
      002B76 12r00r00         [24] 7731 	lcall	__gptrget
      002B79 FC               [12] 7732 	mov	r4,a
      002B7A E5*00            [12] 7733 	mov	a,_bp
      002B7C 24 15            [12] 7734 	add	a,#0x15
      002B7E F8               [12] 7735 	mov	r0,a
      002B7F E6               [12] 7736 	mov	a,@r0
      002B80 C0 E0            [24] 7737 	push	acc
      002B82 08               [12] 7738 	inc	r0
      002B83 E6               [12] 7739 	mov	a,@r0
      002B84 C0 E0            [24] 7740 	push	acc
      002B86 08               [12] 7741 	inc	r0
      002B87 E6               [12] 7742 	mov	a,@r0
      002B88 C0 E0            [24] 7743 	push	acc
      002B8A 08               [12] 7744 	inc	r0
      002B8B E6               [12] 7745 	mov	a,@r0
      002B8C C0 E0            [24] 7746 	push	acc
      002B8E 8A 82            [24] 7747 	mov	dpl,r2
      002B90 8B 83            [24] 7748 	mov	dph,r3
      002B92 8C F0            [24] 7749 	mov	b,r4
      002B94 12r00r00         [24] 7750 	lcall	_stack_push
      002B97 E5 81            [12] 7751 	mov	a,sp
      002B99 24 FC            [12] 7752 	add	a,#0xfc
      002B9B F5 81            [12] 7753 	mov	sp,a
                                   7754 ;	calc.c:349: break;
                                   7755 ;	calc.c:350: default:
      002B9D 80 05            [24] 7756 	sjmp	00249$
      002B9F                       7757 00248$:
                                   7758 ;	calc.c:351: return UNDEF;
      002B9F 90 80 00         [24] 7759 	mov	dptr,#0x8000
                                   7760 ;	calc.c:352: }
      002BA2 80 03            [24] 7761 	sjmp	00500$
      002BA4                       7762 00249$:
                                   7763 ;	calc.c:354: return 1;
      002BA4 90 00 01         [24] 7764 	mov	dptr,#0x0001
      002BA7                       7765 00500$:
                                   7766 ;	calc.c:355: }
      002BA7 85*00 81         [24] 7767 	mov	sp,_bp
      002BAA D0*00            [24] 7768 	pop	_bp
      002BAC 22               [24] 7769 	ret
                                   7770 ;------------------------------------------------------------
                                   7771 ;Allocation info for local variables in function 'push_acc'
                                   7772 ;------------------------------------------------------------
                                   7773 ;delta                     Allocated to stack - _bp -5
                                   7774 ;_ctx                      Allocated to stack - _bp +5
                                   7775 ;ctx                       Allocated to registers r2 r3 r4 
                                   7776 ;__1310720127              Allocated to registers 
                                   7777 ;s                         Allocated to registers r5 r6 r7 
                                   7778 ;sloc0                     Allocated to stack - _bp +1
                                   7779 ;------------------------------------------------------------
                                   7780 ;	calc.c:357: static int push_acc(void *_ctx, delta_t *delta) __reentrant {
                                   7781 ;	-----------------------------------------
                                   7782 ;	 function push_acc
                                   7783 ;	-----------------------------------------
      002BAD                       7784 _push_acc:
      002BAD C0*00            [24] 7785 	push	_bp
      002BAF E5 81            [12] 7786 	mov	a,sp
      002BB1 F5*00            [12] 7787 	mov	_bp,a
      002BB3 24 07            [12] 7788 	add	a,#0x07
      002BB5 F5 81            [12] 7789 	mov	sp,a
      002BB7 C8               [12] 7790 	xch	a,r0
      002BB8 E5*00            [12] 7791 	mov	a,_bp
      002BBA 24 05            [12] 7792 	add	a,#0x05
      002BBC C8               [12] 7793 	xch	a,r0
      002BBD A6 82            [24] 7794 	mov	@r0,dpl
      002BBF 08               [12] 7795 	inc	r0
      002BC0 A6 83            [24] 7796 	mov	@r0,dph
      002BC2 08               [12] 7797 	inc	r0
      002BC3 A6 F0            [24] 7798 	mov	@r0,b
                                   7799 ;	calc.c:358: calc_ctx_t *ctx = (calc_ctx_t *)_ctx;
      002BC5 E5*00            [12] 7800 	mov	a,_bp
      002BC7 24 05            [12] 7801 	add	a,#0x05
      002BC9 F8               [12] 7802 	mov	r0,a
      002BCA 86 02            [24] 7803 	mov	ar2,@r0
      002BCC 08               [12] 7804 	inc	r0
      002BCD 86 03            [24] 7805 	mov	ar3,@r0
      002BCF 08               [12] 7806 	inc	r0
      002BD0 86 04            [24] 7807 	mov	ar4,@r0
                                   7808 ;	calc.c:362: ctx->acc_valid = 0;
      002BD2 74 06            [12] 7809 	mov	a,#0x06
      002BD4 2A               [12] 7810 	add	a,r2
      002BD5 FD               [12] 7811 	mov	r5,a
      002BD6 E4               [12] 7812 	clr	a
      002BD7 3B               [12] 7813 	addc	a,r3
      002BD8 FE               [12] 7814 	mov	r6,a
      002BD9 8C 07            [24] 7815 	mov	ar7,r4
      002BDB 8D 82            [24] 7816 	mov	dpl,r5
      002BDD 8E 83            [24] 7817 	mov	dph,r6
      002BDF 8F F0            [24] 7818 	mov	b,r7
      002BE1 E4               [12] 7819 	clr	a
      002BE2 12r00r00         [24] 7820 	lcall	__gptrput
                                   7821 ;	calc.c:363: if (!stack_push(ctx->ps, ctx->acc)) printstr("\r\nstack overflow\r\n");
      002BE5 74 02            [12] 7822 	mov	a,#0x02
      002BE7 2A               [12] 7823 	add	a,r2
      002BE8 FF               [12] 7824 	mov	r7,a
      002BE9 E4               [12] 7825 	clr	a
      002BEA 3B               [12] 7826 	addc	a,r3
      002BEB FD               [12] 7827 	mov	r5,a
      002BEC 8C 06            [24] 7828 	mov	ar6,r4
      002BEE 8F 82            [24] 7829 	mov	dpl,r7
      002BF0 8D 83            [24] 7830 	mov	dph,r5
      002BF2 8E F0            [24] 7831 	mov	b,r6
      002BF4 A8*00            [24] 7832 	mov	r0,_bp
      002BF6 08               [12] 7833 	inc	r0
      002BF7 12r00r00         [24] 7834 	lcall	__gptrget
      002BFA F6               [12] 7835 	mov	@r0,a
      002BFB A3               [24] 7836 	inc	dptr
      002BFC 12r00r00         [24] 7837 	lcall	__gptrget
      002BFF 08               [12] 7838 	inc	r0
      002C00 F6               [12] 7839 	mov	@r0,a
      002C01 A3               [24] 7840 	inc	dptr
      002C02 12r00r00         [24] 7841 	lcall	__gptrget
      002C05 08               [12] 7842 	inc	r0
      002C06 F6               [12] 7843 	mov	@r0,a
      002C07 A3               [24] 7844 	inc	dptr
      002C08 12r00r00         [24] 7845 	lcall	__gptrget
      002C0B 08               [12] 7846 	inc	r0
      002C0C F6               [12] 7847 	mov	@r0,a
      002C0D 74 11            [12] 7848 	mov	a,#0x11
      002C0F 2A               [12] 7849 	add	a,r2
      002C10 FA               [12] 7850 	mov	r2,a
      002C11 74 40            [12] 7851 	mov	a,#0x40
      002C13 3B               [12] 7852 	addc	a,r3
      002C14 FB               [12] 7853 	mov	r3,a
      002C15 8C 07            [24] 7854 	mov	ar7,r4
      002C17 8A 82            [24] 7855 	mov	dpl,r2
      002C19 8B 83            [24] 7856 	mov	dph,r3
      002C1B 8F F0            [24] 7857 	mov	b,r7
      002C1D 12r00r00         [24] 7858 	lcall	__gptrget
      002C20 FA               [12] 7859 	mov	r2,a
      002C21 A3               [24] 7860 	inc	dptr
      002C22 12r00r00         [24] 7861 	lcall	__gptrget
      002C25 FB               [12] 7862 	mov	r3,a
      002C26 A3               [24] 7863 	inc	dptr
      002C27 12r00r00         [24] 7864 	lcall	__gptrget
      002C2A FF               [12] 7865 	mov	r7,a
      002C2B A8*00            [24] 7866 	mov	r0,_bp
      002C2D 08               [12] 7867 	inc	r0
      002C2E E6               [12] 7868 	mov	a,@r0
      002C2F C0 E0            [24] 7869 	push	acc
      002C31 08               [12] 7870 	inc	r0
      002C32 E6               [12] 7871 	mov	a,@r0
      002C33 C0 E0            [24] 7872 	push	acc
      002C35 08               [12] 7873 	inc	r0
      002C36 E6               [12] 7874 	mov	a,@r0
      002C37 C0 E0            [24] 7875 	push	acc
      002C39 08               [12] 7876 	inc	r0
      002C3A E6               [12] 7877 	mov	a,@r0
      002C3B C0 E0            [24] 7878 	push	acc
      002C3D 8A 82            [24] 7879 	mov	dpl,r2
      002C3F 8B 83            [24] 7880 	mov	dph,r3
      002C41 8F F0            [24] 7881 	mov	b,r7
      002C43 12r00r00         [24] 7882 	lcall	_stack_push
      002C46 AE 82            [24] 7883 	mov	r6,dpl
      002C48 AF 83            [24] 7884 	mov	r7,dph
      002C4A E5 81            [12] 7885 	mov	a,sp
      002C4C 24 FC            [12] 7886 	add	a,#0xfc
      002C4E F5 81            [12] 7887 	mov	sp,a
      002C50 EE               [12] 7888 	mov	a,r6
      002C51 4F               [12] 7889 	orl	a,r7
      002C52 70 22            [24] 7890 	jnz	00102$
      002C54 7Dr9D            [12] 7891 	mov	r5,#___str_13
      002C56 7Es00            [12] 7892 	mov	r6,#(___str_13 >> 8)
      002C58 7F 80            [12] 7893 	mov	r7,#0x80
                                   7894 ;	calc.c:59: return;
      002C5A                       7895 00109$:
                                   7896 ;	calc.c:57: for (; *s; s++) putchar(*s);
      002C5A 8D 82            [24] 7897 	mov	dpl,r5
      002C5C 8E 83            [24] 7898 	mov	dph,r6
      002C5E 8F F0            [24] 7899 	mov	b,r7
      002C60 12r00r00         [24] 7900 	lcall	__gptrget
      002C63 FC               [12] 7901 	mov	r4,a
      002C64 60 10            [24] 7902 	jz	00102$
      002C66 7B 00            [12] 7903 	mov	r3,#0x00
      002C68 8C 82            [24] 7904 	mov	dpl,r4
      002C6A 8B 83            [24] 7905 	mov	dph,r3
      002C6C 12r00r00         [24] 7906 	lcall	_putchar
      002C6F 0D               [12] 7907 	inc	r5
                                   7908 ;	calc.c:363: if (!stack_push(ctx->ps, ctx->acc)) printstr("\r\nstack overflow\r\n");
      002C70 BD 00 E7         [24] 7909 	cjne	r5,#0x00,00109$
      002C73 0E               [12] 7910 	inc	r6
      002C74 80 E4            [24] 7911 	sjmp	00109$
      002C76                       7912 00102$:
                                   7913 ;	calc.c:365: if (delta->event == EVENT_OP) return operator(_ctx, delta);
      002C76 E5*00            [12] 7914 	mov	a,_bp
      002C78 24 FB            [12] 7915 	add	a,#0xfb
      002C7A F8               [12] 7916 	mov	r0,a
      002C7B 86 05            [24] 7917 	mov	ar5,@r0
      002C7D 08               [12] 7918 	inc	r0
      002C7E 86 06            [24] 7919 	mov	ar6,@r0
      002C80 08               [12] 7920 	inc	r0
      002C81 86 07            [24] 7921 	mov	ar7,@r0
      002C83 74 02            [12] 7922 	mov	a,#0x02
      002C85 2D               [12] 7923 	add	a,r5
      002C86 FA               [12] 7924 	mov	r2,a
      002C87 E4               [12] 7925 	clr	a
      002C88 3E               [12] 7926 	addc	a,r6
      002C89 FB               [12] 7927 	mov	r3,a
      002C8A 8F 04            [24] 7928 	mov	ar4,r7
      002C8C 8A 82            [24] 7929 	mov	dpl,r2
      002C8E 8B 83            [24] 7930 	mov	dph,r3
      002C90 8C F0            [24] 7931 	mov	b,r4
      002C92 12r00r00         [24] 7932 	lcall	__gptrget
      002C95 FA               [12] 7933 	mov	r2,a
      002C96 A3               [24] 7934 	inc	dptr
      002C97 12r00r00         [24] 7935 	lcall	__gptrget
      002C9A FB               [12] 7936 	mov	r3,a
      002C9B BA 02 29         [24] 7937 	cjne	r2,#0x02,00104$
      002C9E BB 00 26         [24] 7938 	cjne	r3,#0x00,00104$
      002CA1 C0 05            [24] 7939 	push	ar5
      002CA3 C0 06            [24] 7940 	push	ar6
      002CA5 C0 07            [24] 7941 	push	ar7
      002CA7 E5*00            [12] 7942 	mov	a,_bp
      002CA9 24 05            [12] 7943 	add	a,#0x05
      002CAB F8               [12] 7944 	mov	r0,a
      002CAC 86 82            [24] 7945 	mov	dpl,@r0
      002CAE 08               [12] 7946 	inc	r0
      002CAF 86 83            [24] 7947 	mov	dph,@r0
      002CB1 08               [12] 7948 	inc	r0
      002CB2 86 F0            [24] 7949 	mov	b,@r0
      002CB4 12r08rB3         [24] 7950 	lcall	_operator
      002CB7 AE 82            [24] 7951 	mov	r6,dpl
      002CB9 AF 83            [24] 7952 	mov	r7,dph
      002CBB 15 81            [12] 7953 	dec	sp
      002CBD 15 81            [12] 7954 	dec	sp
      002CBF 15 81            [12] 7955 	dec	sp
      002CC1 8E 82            [24] 7956 	mov	dpl,r6
      002CC3 8F 83            [24] 7957 	mov	dph,r7
      002CC5 80 03            [24] 7958 	sjmp	00111$
      002CC7                       7959 00104$:
                                   7960 ;	calc.c:366: else return 1;
      002CC7 90 00 01         [24] 7961 	mov	dptr,#0x0001
      002CCA                       7962 00111$:
                                   7963 ;	calc.c:367: }
      002CCA 85*00 81         [24] 7964 	mov	sp,_bp
      002CCD D0*00            [24] 7965 	pop	_bp
      002CCF 22               [24] 7966 	ret
                                   7967 ;------------------------------------------------------------
                                   7968 ;Allocation info for local variables in function 'reset_acc'
                                   7969 ;------------------------------------------------------------
                                   7970 ;delta                     Allocated to stack - _bp -5
                                   7971 ;_ctx                      Allocated to registers r5 r6 r7 
                                   7972 ;ctx                       Allocated to registers r5 r6 r7 
                                   7973 ;------------------------------------------------------------
                                   7974 ;	calc.c:369: static int reset_acc(void *_ctx, delta_t *delta) __reentrant {
                                   7975 ;	-----------------------------------------
                                   7976 ;	 function reset_acc
                                   7977 ;	-----------------------------------------
      002CD0                       7978 _reset_acc:
      002CD0 C0*00            [24] 7979 	push	_bp
      002CD2 85 81*00         [24] 7980 	mov	_bp,sp
      002CD5 AD 82            [24] 7981 	mov	r5,dpl
      002CD7 AE 83            [24] 7982 	mov	r6,dph
      002CD9 AF F0            [24] 7983 	mov	r7,b
                                   7984 ;	calc.c:370: calc_ctx_t *ctx = (calc_ctx_t *)_ctx;
                                   7985 ;	calc.c:372: if (delta->event == EVENT_RSTA_I) ctx->acc_valid = 0;
      002CDB E5*00            [12] 7986 	mov	a,_bp
      002CDD 24 FB            [12] 7987 	add	a,#0xfb
      002CDF F8               [12] 7988 	mov	r0,a
      002CE0 86 02            [24] 7989 	mov	ar2,@r0
      002CE2 08               [12] 7990 	inc	r0
      002CE3 86 03            [24] 7991 	mov	ar3,@r0
      002CE5 08               [12] 7992 	inc	r0
      002CE6 86 04            [24] 7993 	mov	ar4,@r0
      002CE8 74 02            [12] 7994 	mov	a,#0x02
      002CEA 2A               [12] 7995 	add	a,r2
      002CEB FA               [12] 7996 	mov	r2,a
      002CEC E4               [12] 7997 	clr	a
      002CED 3B               [12] 7998 	addc	a,r3
      002CEE FB               [12] 7999 	mov	r3,a
      002CEF 8A 82            [24] 8000 	mov	dpl,r2
      002CF1 8B 83            [24] 8001 	mov	dph,r3
      002CF3 8C F0            [24] 8002 	mov	b,r4
      002CF5 12r00r00         [24] 8003 	lcall	__gptrget
      002CF8 FA               [12] 8004 	mov	r2,a
      002CF9 A3               [24] 8005 	inc	dptr
      002CFA 12r00r00         [24] 8006 	lcall	__gptrget
      002CFD FB               [12] 8007 	mov	r3,a
      002CFE BA 07 16         [24] 8008 	cjne	r2,#0x07,00102$
      002D01 BB 00 13         [24] 8009 	cjne	r3,#0x00,00102$
      002D04 74 06            [12] 8010 	mov	a,#0x06
      002D06 2D               [12] 8011 	add	a,r5
      002D07 FA               [12] 8012 	mov	r2,a
      002D08 E4               [12] 8013 	clr	a
      002D09 3E               [12] 8014 	addc	a,r6
      002D0A FB               [12] 8015 	mov	r3,a
      002D0B 8F 04            [24] 8016 	mov	ar4,r7
      002D0D 8A 82            [24] 8017 	mov	dpl,r2
      002D0F 8B 83            [24] 8018 	mov	dph,r3
      002D11 8C F0            [24] 8019 	mov	b,r4
      002D13 E4               [12] 8020 	clr	a
      002D14 12r00r00         [24] 8021 	lcall	__gptrput
      002D17                       8022 00102$:
                                   8023 ;	calc.c:373: ctx->acc = 0l;
      002D17 74 02            [12] 8024 	mov	a,#0x02
      002D19 2D               [12] 8025 	add	a,r5
      002D1A FD               [12] 8026 	mov	r5,a
      002D1B E4               [12] 8027 	clr	a
      002D1C 3E               [12] 8028 	addc	a,r6
      002D1D FE               [12] 8029 	mov	r6,a
      002D1E 8D 82            [24] 8030 	mov	dpl,r5
      002D20 8E 83            [24] 8031 	mov	dph,r6
      002D22 8F F0            [24] 8032 	mov	b,r7
      002D24 E4               [12] 8033 	clr	a
      002D25 12r00r00         [24] 8034 	lcall	__gptrput
      002D28 A3               [24] 8035 	inc	dptr
      002D29 12r00r00         [24] 8036 	lcall	__gptrput
      002D2C A3               [24] 8037 	inc	dptr
      002D2D 12r00r00         [24] 8038 	lcall	__gptrput
      002D30 A3               [24] 8039 	inc	dptr
      002D31 12r00r00         [24] 8040 	lcall	__gptrput
                                   8041 ;	calc.c:375: return 1;
      002D34 90 00 01         [24] 8042 	mov	dptr,#0x0001
                                   8043 ;	calc.c:376: }
      002D37 D0*00            [24] 8044 	pop	_bp
      002D39 22               [24] 8045 	ret
                                   8046 ;------------------------------------------------------------
                                   8047 ;Allocation info for local variables in function 'reset_base'
                                   8048 ;------------------------------------------------------------
                                   8049 ;delta                     Allocated to stack - _bp -5
                                   8050 ;_ctx                      Allocated to registers r5 r6 r7 
                                   8051 ;ctx                       Allocated to registers r5 r6 r7 
                                   8052 ;------------------------------------------------------------
                                   8053 ;	calc.c:378: static int reset_base(void *_ctx, delta_t *delta) __reentrant {
                                   8054 ;	-----------------------------------------
                                   8055 ;	 function reset_base
                                   8056 ;	-----------------------------------------
      002D3A                       8057 _reset_base:
      002D3A C0*00            [24] 8058 	push	_bp
      002D3C 85 81*00         [24] 8059 	mov	_bp,sp
      002D3F AD 82            [24] 8060 	mov	r5,dpl
      002D41 AE 83            [24] 8061 	mov	r6,dph
      002D43 AF F0            [24] 8062 	mov	r7,b
                                   8063 ;	calc.c:379: calc_ctx_t *ctx = (calc_ctx_t *)_ctx;
                                   8064 ;	calc.c:383: switch (ctx->digit[0]) {
      002D45 74 07            [12] 8065 	mov	a,#0x07
      002D47 2D               [12] 8066 	add	a,r5
      002D48 FA               [12] 8067 	mov	r2,a
      002D49 E4               [12] 8068 	clr	a
      002D4A 3E               [12] 8069 	addc	a,r6
      002D4B FB               [12] 8070 	mov	r3,a
      002D4C 8F 04            [24] 8071 	mov	ar4,r7
      002D4E 8A 82            [24] 8072 	mov	dpl,r2
      002D50 8B 83            [24] 8073 	mov	dph,r3
      002D52 8C F0            [24] 8074 	mov	b,r4
      002D54 12r00r00         [24] 8075 	lcall	__gptrget
      002D57 FC               [12] 8076 	mov	r4,a
      002D58 BC 48 02         [24] 8077 	cjne	r4,#0x48,00124$
      002D5B 80 0F            [24] 8078 	sjmp	00101$
      002D5D                       8079 00124$:
      002D5D BC 4F 02         [24] 8080 	cjne	r4,#0x4f,00125$
      002D60 80 2E            [24] 8081 	sjmp	00103$
      002D62                       8082 00125$:
      002D62 BC 68 02         [24] 8083 	cjne	r4,#0x68,00126$
      002D65 80 17            [24] 8084 	sjmp	00102$
      002D67                       8085 00126$:
                                   8086 ;	calc.c:384: case 'H':
      002D67 BC 6F 48         [24] 8087 	cjne	r4,#0x6f,00105$
      002D6A 80 36            [24] 8088 	sjmp	00104$
      002D6C                       8089 00101$:
                                   8090 ;	calc.c:385: ctx->base = 16;
      002D6C 8D 82            [24] 8091 	mov	dpl,r5
      002D6E 8E 83            [24] 8092 	mov	dph,r6
      002D70 8F F0            [24] 8093 	mov	b,r7
      002D72 74 10            [12] 8094 	mov	a,#0x10
      002D74 12r00r00         [24] 8095 	lcall	__gptrput
      002D77 A3               [24] 8096 	inc	dptr
      002D78 E4               [12] 8097 	clr	a
      002D79 12r00r00         [24] 8098 	lcall	__gptrput
                                   8099 ;	calc.c:386: break;
                                   8100 ;	calc.c:387: case 'h':
      002D7C 80 34            [24] 8101 	sjmp	00105$
      002D7E                       8102 00102$:
                                   8103 ;	calc.c:388: ctx->base = 10;
      002D7E 8D 82            [24] 8104 	mov	dpl,r5
      002D80 8E 83            [24] 8105 	mov	dph,r6
      002D82 8F F0            [24] 8106 	mov	b,r7
      002D84 74 0A            [12] 8107 	mov	a,#0x0a
      002D86 12r00r00         [24] 8108 	lcall	__gptrput
      002D89 A3               [24] 8109 	inc	dptr
      002D8A E4               [12] 8110 	clr	a
      002D8B 12r00r00         [24] 8111 	lcall	__gptrput
                                   8112 ;	calc.c:389: break;
                                   8113 ;	calc.c:390: case 'O':
      002D8E 80 22            [24] 8114 	sjmp	00105$
      002D90                       8115 00103$:
                                   8116 ;	calc.c:391: ctx->base = 8;
      002D90 8D 82            [24] 8117 	mov	dpl,r5
      002D92 8E 83            [24] 8118 	mov	dph,r6
      002D94 8F F0            [24] 8119 	mov	b,r7
      002D96 74 08            [12] 8120 	mov	a,#0x08
      002D98 12r00r00         [24] 8121 	lcall	__gptrput
      002D9B A3               [24] 8122 	inc	dptr
      002D9C E4               [12] 8123 	clr	a
      002D9D 12r00r00         [24] 8124 	lcall	__gptrput
                                   8125 ;	calc.c:392: break;
                                   8126 ;	calc.c:393: case 'o':
      002DA0 80 10            [24] 8127 	sjmp	00105$
      002DA2                       8128 00104$:
                                   8129 ;	calc.c:394: ctx->base = 2;
      002DA2 8D 82            [24] 8130 	mov	dpl,r5
      002DA4 8E 83            [24] 8131 	mov	dph,r6
      002DA6 8F F0            [24] 8132 	mov	b,r7
      002DA8 74 02            [12] 8133 	mov	a,#0x02
      002DAA 12r00r00         [24] 8134 	lcall	__gptrput
      002DAD A3               [24] 8135 	inc	dptr
      002DAE E4               [12] 8136 	clr	a
      002DAF 12r00r00         [24] 8137 	lcall	__gptrput
                                   8138 ;	calc.c:396: }
      002DB2                       8139 00105$:
                                   8140 ;	calc.c:398: return 1;
      002DB2 90 00 01         [24] 8141 	mov	dptr,#0x0001
                                   8142 ;	calc.c:399: }
      002DB5 D0*00            [24] 8143 	pop	_bp
      002DB7 22               [24] 8144 	ret
                                   8145 ;------------------------------------------------------------
                                   8146 ;Allocation info for local variables in function 'status'
                                   8147 ;------------------------------------------------------------
                                   8148 ;delta                     Allocated to stack - _bp -5
                                   8149 ;_ctx                      Allocated to registers r5 r6 r7 
                                   8150 ;ctx                       Allocated to stack - _bp +9
                                   8151 ;vals                      Allocated to stack - _bp +14
                                   8152 ;n                         Allocated to stack - _bp +12
                                   8153 ;__1310720129              Allocated to registers 
                                   8154 ;s                         Allocated to registers r5 r6 r7 
                                   8155 ;__1310720131              Allocated to registers r5 r6 r7 r4 
                                   8156 ;d                         Allocated to registers 
                                   8157 ;__1310720001              Allocated to registers 
                                   8158 ;d                         Allocated to stack - _bp +22
                                   8159 ;mask                      Allocated to stack - _bp +26
                                   8160 ;__1310720133              Allocated to registers 
                                   8161 ;s                         Allocated to registers r3 r4 r5 
                                   8162 ;__1310720135              Allocated to registers r2 r3 r4 r5 
                                   8163 ;d                         Allocated to registers 
                                   8164 ;__1310720001              Allocated to registers 
                                   8165 ;d                         Allocated to stack - _bp +22
                                   8166 ;mask                      Allocated to stack - _bp +26
                                   8167 ;__1310720137              Allocated to registers 
                                   8168 ;s                         Allocated to registers r3 r4 r5 
                                   8169 ;__1310720139              Allocated to registers r4 r5 r6 r7 
                                   8170 ;d                         Allocated to registers 
                                   8171 ;__1310720001              Allocated to registers 
                                   8172 ;d                         Allocated to stack - _bp +22
                                   8173 ;mask                      Allocated to stack - _bp +26
                                   8174 ;__1310720141              Allocated to registers 
                                   8175 ;s                         Allocated to registers r3 r4 r5 
                                   8176 ;__1310720143              Allocated to registers r2 r3 r4 r5 
                                   8177 ;d                         Allocated to registers 
                                   8178 ;__1310720001              Allocated to registers 
                                   8179 ;d                         Allocated to stack - _bp +22
                                   8180 ;mask                      Allocated to stack - _bp +26
                                   8181 ;__1310720145              Allocated to registers 
                                   8182 ;s                         Allocated to registers r5 r6 r7 
                                   8183 ;__1310720147              Allocated to registers r4 r5 r6 r7 
                                   8184 ;d                         Allocated to registers 
                                   8185 ;__1310720001              Allocated to registers 
                                   8186 ;d                         Allocated to stack - _bp +22
                                   8187 ;mask                      Allocated to stack - _bp +26
                                   8188 ;__1310720149              Allocated to registers 
                                   8189 ;s                         Allocated to registers r5 r6 r7 
                                   8190 ;sloc0                     Allocated to stack - _bp +1
                                   8191 ;sloc1                     Allocated to stack - _bp +4
                                   8192 ;sloc2                     Allocated to stack - _bp +7
                                   8193 ;------------------------------------------------------------
                                   8194 ;	calc.c:401: static int status(void *_ctx, delta_t *delta) __reentrant {
                                   8195 ;	-----------------------------------------
                                   8196 ;	 function status
                                   8197 ;	-----------------------------------------
      002DB8                       8198 _status:
      002DB8 C0*00            [24] 8199 	push	_bp
      002DBA E5 81            [12] 8200 	mov	a,sp
      002DBC F5*00            [12] 8201 	mov	_bp,a
      002DBE 24 1D            [12] 8202 	add	a,#0x1d
      002DC0 F5 81            [12] 8203 	mov	sp,a
      002DC2 AD 82            [24] 8204 	mov	r5,dpl
      002DC4 AE 83            [24] 8205 	mov	r6,dph
      002DC6 AF F0            [24] 8206 	mov	r7,b
                                   8207 ;	calc.c:402: calc_ctx_t *ctx = (calc_ctx_t *)_ctx;
      002DC8 E5*00            [12] 8208 	mov	a,_bp
      002DCA 24 09            [12] 8209 	add	a,#0x09
      002DCC F8               [12] 8210 	mov	r0,a
      002DCD A6 05            [24] 8211 	mov	@r0,ar5
      002DCF 08               [12] 8212 	inc	r0
      002DD0 A6 06            [24] 8213 	mov	@r0,ar6
      002DD2 08               [12] 8214 	inc	r0
      002DD3 A6 07            [24] 8215 	mov	@r0,ar7
                                   8216 ;	calc.c:408: printf("\r\nPS = %p, SS = %p, base = %d\r\n", ctx->ps, ctx->ss, ctx->base);
      002DD5 E5*00            [12] 8217 	mov	a,_bp
      002DD7 24 09            [12] 8218 	add	a,#0x09
      002DD9 F8               [12] 8219 	mov	r0,a
      002DDA 86 82            [24] 8220 	mov	dpl,@r0
      002DDC 08               [12] 8221 	inc	r0
      002DDD 86 83            [24] 8222 	mov	dph,@r0
      002DDF 08               [12] 8223 	inc	r0
      002DE0 86 F0            [24] 8224 	mov	b,@r0
      002DE2 E5*00            [12] 8225 	mov	a,_bp
      002DE4 24 07            [12] 8226 	add	a,#0x07
      002DE6 F9               [12] 8227 	mov	r1,a
      002DE7 12r00r00         [24] 8228 	lcall	__gptrget
      002DEA F7               [12] 8229 	mov	@r1,a
      002DEB A3               [24] 8230 	inc	dptr
      002DEC 12r00r00         [24] 8231 	lcall	__gptrget
      002DEF 09               [12] 8232 	inc	r1
      002DF0 F7               [12] 8233 	mov	@r1,a
      002DF1 E5*00            [12] 8234 	mov	a,_bp
      002DF3 24 09            [12] 8235 	add	a,#0x09
      002DF5 F8               [12] 8236 	mov	r0,a
      002DF6 A9*00            [24] 8237 	mov	r1,_bp
      002DF8 09               [12] 8238 	inc	r1
      002DF9 74 14            [12] 8239 	mov	a,#0x14
      002DFB 26               [12] 8240 	add	a,@r0
      002DFC F7               [12] 8241 	mov	@r1,a
      002DFD 74 40            [12] 8242 	mov	a,#0x40
      002DFF 08               [12] 8243 	inc	r0
      002E00 36               [12] 8244 	addc	a,@r0
      002E01 09               [12] 8245 	inc	r1
      002E02 F7               [12] 8246 	mov	@r1,a
      002E03 08               [12] 8247 	inc	r0
      002E04 09               [12] 8248 	inc	r1
      002E05 E6               [12] 8249 	mov	a,@r0
      002E06 F7               [12] 8250 	mov	@r1,a
      002E07 A8*00            [24] 8251 	mov	r0,_bp
      002E09 08               [12] 8252 	inc	r0
      002E0A 86 82            [24] 8253 	mov	dpl,@r0
      002E0C 08               [12] 8254 	inc	r0
      002E0D 86 83            [24] 8255 	mov	dph,@r0
      002E0F 08               [12] 8256 	inc	r0
      002E10 86 F0            [24] 8257 	mov	b,@r0
      002E12 12r00r00         [24] 8258 	lcall	__gptrget
      002E15 FA               [12] 8259 	mov	r2,a
      002E16 A3               [24] 8260 	inc	dptr
      002E17 12r00r00         [24] 8261 	lcall	__gptrget
      002E1A FE               [12] 8262 	mov	r6,a
      002E1B A3               [24] 8263 	inc	dptr
      002E1C 12r00r00         [24] 8264 	lcall	__gptrget
      002E1F FF               [12] 8265 	mov	r7,a
      002E20 E5*00            [12] 8266 	mov	a,_bp
      002E22 24 09            [12] 8267 	add	a,#0x09
      002E24 F8               [12] 8268 	mov	r0,a
      002E25 E5*00            [12] 8269 	mov	a,_bp
      002E27 24 04            [12] 8270 	add	a,#0x04
      002E29 F9               [12] 8271 	mov	r1,a
      002E2A 74 11            [12] 8272 	mov	a,#0x11
      002E2C 26               [12] 8273 	add	a,@r0
      002E2D F7               [12] 8274 	mov	@r1,a
      002E2E 74 40            [12] 8275 	mov	a,#0x40
      002E30 08               [12] 8276 	inc	r0
      002E31 36               [12] 8277 	addc	a,@r0
      002E32 09               [12] 8278 	inc	r1
      002E33 F7               [12] 8279 	mov	@r1,a
      002E34 08               [12] 8280 	inc	r0
      002E35 09               [12] 8281 	inc	r1
      002E36 E6               [12] 8282 	mov	a,@r0
      002E37 F7               [12] 8283 	mov	@r1,a
      002E38 E5*00            [12] 8284 	mov	a,_bp
      002E3A 24 04            [12] 8285 	add	a,#0x04
      002E3C F8               [12] 8286 	mov	r0,a
      002E3D 86 82            [24] 8287 	mov	dpl,@r0
      002E3F 08               [12] 8288 	inc	r0
      002E40 86 83            [24] 8289 	mov	dph,@r0
      002E42 08               [12] 8290 	inc	r0
      002E43 86 F0            [24] 8291 	mov	b,@r0
      002E45 12r00r00         [24] 8292 	lcall	__gptrget
      002E48 FB               [12] 8293 	mov	r3,a
      002E49 A3               [24] 8294 	inc	dptr
      002E4A 12r00r00         [24] 8295 	lcall	__gptrget
      002E4D FC               [12] 8296 	mov	r4,a
      002E4E A3               [24] 8297 	inc	dptr
      002E4F 12r00r00         [24] 8298 	lcall	__gptrget
      002E52 FD               [12] 8299 	mov	r5,a
      002E53 E5*00            [12] 8300 	mov	a,_bp
      002E55 24 07            [12] 8301 	add	a,#0x07
      002E57 F8               [12] 8302 	mov	r0,a
      002E58 E6               [12] 8303 	mov	a,@r0
      002E59 C0 E0            [24] 8304 	push	acc
      002E5B 08               [12] 8305 	inc	r0
      002E5C E6               [12] 8306 	mov	a,@r0
      002E5D C0 E0            [24] 8307 	push	acc
      002E5F C0 02            [24] 8308 	push	ar2
      002E61 C0 06            [24] 8309 	push	ar6
      002E63 C0 07            [24] 8310 	push	ar7
      002E65 C0 03            [24] 8311 	push	ar3
      002E67 C0 04            [24] 8312 	push	ar4
      002E69 C0 05            [24] 8313 	push	ar5
      002E6B 74rC5            [12] 8314 	mov	a,#___str_15
      002E6D C0 E0            [24] 8315 	push	acc
      002E6F 74s00            [12] 8316 	mov	a,#(___str_15 >> 8)
      002E71 C0 E0            [24] 8317 	push	acc
      002E73 74 80            [12] 8318 	mov	a,#0x80
      002E75 C0 E0            [24] 8319 	push	acc
      002E77 12r00r00         [24] 8320 	lcall	_printf
      002E7A E5 81            [12] 8321 	mov	a,sp
      002E7C 24 F5            [12] 8322 	add	a,#0xf5
      002E7E F5 81            [12] 8323 	mov	sp,a
                                   8324 ;	calc.c:410: printstr("ACC\t");
      002E80 7DrE5            [12] 8325 	mov	r5,#___str_16
      002E82 7Es00            [12] 8326 	mov	r6,#(___str_16 >> 8)
      002E84 7F 80            [12] 8327 	mov	r7,#0x80
                                   8328 ;	calc.c:59: return;
      002E86                       8329 00139$:
                                   8330 ;	calc.c:57: for (; *s; s++) putchar(*s);
      002E86 8D 82            [24] 8331 	mov	dpl,r5
      002E88 8E 83            [24] 8332 	mov	dph,r6
      002E8A 8F F0            [24] 8333 	mov	b,r7
      002E8C 12r00r00         [24] 8334 	lcall	__gptrget
      002E8F FC               [12] 8335 	mov	r4,a
      002E90 60 10            [24] 8336 	jz	00112$
      002E92 7B 00            [12] 8337 	mov	r3,#0x00
      002E94 8C 82            [24] 8338 	mov	dpl,r4
      002E96 8B 83            [24] 8339 	mov	dph,r3
      002E98 12r00r00         [24] 8340 	lcall	_putchar
      002E9B 0D               [12] 8341 	inc	r5
                                   8342 ;	calc.c:410: printstr("ACC\t");
      002E9C BD 00 E7         [24] 8343 	cjne	r5,#0x00,00139$
      002E9F 0E               [12] 8344 	inc	r6
      002EA0 80 E4            [24] 8345 	sjmp	00139$
      002EA2                       8346 00112$:
                                   8347 ;	calc.c:411: if (ctx->acc_valid) printall(ctx->acc);
      002EA2 E5*00            [12] 8348 	mov	a,_bp
      002EA4 24 09            [12] 8349 	add	a,#0x09
      002EA6 F8               [12] 8350 	mov	r0,a
      002EA7 74 06            [12] 8351 	mov	a,#0x06
      002EA9 26               [12] 8352 	add	a,@r0
      002EAA FD               [12] 8353 	mov	r5,a
      002EAB E4               [12] 8354 	clr	a
      002EAC 08               [12] 8355 	inc	r0
      002EAD 36               [12] 8356 	addc	a,@r0
      002EAE FE               [12] 8357 	mov	r6,a
      002EAF 08               [12] 8358 	inc	r0
      002EB0 86 07            [24] 8359 	mov	ar7,@r0
      002EB2 8D 82            [24] 8360 	mov	dpl,r5
      002EB4 8E 83            [24] 8361 	mov	dph,r6
      002EB6 8F F0            [24] 8362 	mov	b,r7
      002EB8 12r00r00         [24] 8363 	lcall	__gptrget
      002EBB 70 03            [24] 8364 	jnz	00321$
      002EBD 02r2FrEF         [24] 8365 	ljmp	00102$
      002EC0                       8366 00321$:
      002EC0 E5*00            [12] 8367 	mov	a,_bp
      002EC2 24 09            [12] 8368 	add	a,#0x09
      002EC4 F8               [12] 8369 	mov	r0,a
      002EC5 74 02            [12] 8370 	mov	a,#0x02
      002EC7 26               [12] 8371 	add	a,@r0
      002EC8 FD               [12] 8372 	mov	r5,a
      002EC9 E4               [12] 8373 	clr	a
      002ECA 08               [12] 8374 	inc	r0
      002ECB 36               [12] 8375 	addc	a,@r0
      002ECC FE               [12] 8376 	mov	r6,a
      002ECD 08               [12] 8377 	inc	r0
      002ECE 86 07            [24] 8378 	mov	ar7,@r0
      002ED0 8D 82            [24] 8379 	mov	dpl,r5
      002ED2 8E 83            [24] 8380 	mov	dph,r6
      002ED4 8F F0            [24] 8381 	mov	b,r7
      002ED6 12r00r00         [24] 8382 	lcall	__gptrget
      002ED9 FD               [12] 8383 	mov	r5,a
      002EDA A3               [24] 8384 	inc	dptr
      002EDB 12r00r00         [24] 8385 	lcall	__gptrget
      002EDE FE               [12] 8386 	mov	r6,a
      002EDF A3               [24] 8387 	inc	dptr
      002EE0 12r00r00         [24] 8388 	lcall	__gptrget
      002EE3 FF               [12] 8389 	mov	r7,a
      002EE4 A3               [24] 8390 	inc	dptr
      002EE5 12r00r00         [24] 8391 	lcall	__gptrget
      002EE8 FC               [12] 8392 	mov	r4,a
                                   8393 ;	calc.c:72: printf("%08lx\t", d);
      002EE9 C0 07            [24] 8394 	push	ar7
      002EEB C0 06            [24] 8395 	push	ar6
      002EED C0 05            [24] 8396 	push	ar5
      002EEF C0 04            [24] 8397 	push	ar4
      002EF1 C0 05            [24] 8398 	push	ar5
      002EF3 C0 06            [24] 8399 	push	ar6
      002EF5 C0 07            [24] 8400 	push	ar7
      002EF7 C0 04            [24] 8401 	push	ar4
      002EF9 74r00            [12] 8402 	mov	a,#___str_0
      002EFB C0 E0            [24] 8403 	push	acc
      002EFD 74s00            [12] 8404 	mov	a,#(___str_0 >> 8)
      002EFF C0 E0            [24] 8405 	push	acc
      002F01 74 80            [12] 8406 	mov	a,#0x80
      002F03 C0 E0            [24] 8407 	push	acc
      002F05 12r00r00         [24] 8408 	lcall	_printf
      002F08 E5 81            [12] 8409 	mov	a,sp
      002F0A 24 F9            [12] 8410 	add	a,#0xf9
      002F0C F5 81            [12] 8411 	mov	sp,a
      002F0E D0 04            [24] 8412 	pop	ar4
      002F10 D0 05            [24] 8413 	pop	ar5
      002F12 D0 06            [24] 8414 	pop	ar6
      002F14 D0 07            [24] 8415 	pop	ar7
                                   8416 ;	calc.c:73: printf("% 11ld\t", d);
      002F16 C0 07            [24] 8417 	push	ar7
      002F18 C0 06            [24] 8418 	push	ar6
      002F1A C0 05            [24] 8419 	push	ar5
      002F1C C0 04            [24] 8420 	push	ar4
      002F1E C0 05            [24] 8421 	push	ar5
      002F20 C0 06            [24] 8422 	push	ar6
      002F22 C0 07            [24] 8423 	push	ar7
      002F24 C0 04            [24] 8424 	push	ar4
      002F26 74r07            [12] 8425 	mov	a,#___str_1
      002F28 C0 E0            [24] 8426 	push	acc
      002F2A 74s00            [12] 8427 	mov	a,#(___str_1 >> 8)
      002F2C C0 E0            [24] 8428 	push	acc
      002F2E 74 80            [12] 8429 	mov	a,#0x80
      002F30 C0 E0            [24] 8430 	push	acc
      002F32 12r00r00         [24] 8431 	lcall	_printf
      002F35 E5 81            [12] 8432 	mov	a,sp
      002F37 24 F9            [12] 8433 	add	a,#0xf9
      002F39 F5 81            [12] 8434 	mov	sp,a
      002F3B D0 04            [24] 8435 	pop	ar4
      002F3D D0 05            [24] 8436 	pop	ar5
      002F3F D0 06            [24] 8437 	pop	ar6
      002F41 D0 07            [24] 8438 	pop	ar7
                                   8439 ;	calc.c:74: printf("%011lo\t", d);
      002F43 C0 07            [24] 8440 	push	ar7
      002F45 C0 06            [24] 8441 	push	ar6
      002F47 C0 05            [24] 8442 	push	ar5
      002F49 C0 04            [24] 8443 	push	ar4
      002F4B C0 05            [24] 8444 	push	ar5
      002F4D C0 06            [24] 8445 	push	ar6
      002F4F C0 07            [24] 8446 	push	ar7
      002F51 C0 04            [24] 8447 	push	ar4
      002F53 74r0F            [12] 8448 	mov	a,#___str_2
      002F55 C0 E0            [24] 8449 	push	acc
      002F57 74s00            [12] 8450 	mov	a,#(___str_2 >> 8)
      002F59 C0 E0            [24] 8451 	push	acc
      002F5B 74 80            [12] 8452 	mov	a,#0x80
      002F5D C0 E0            [24] 8453 	push	acc
      002F5F 12r00r00         [24] 8454 	lcall	_printf
      002F62 E5 81            [12] 8455 	mov	a,sp
      002F64 24 F9            [12] 8456 	add	a,#0xf9
      002F66 F5 81            [12] 8457 	mov	sp,a
      002F68 D0 04            [24] 8458 	pop	ar4
      002F6A D0 05            [24] 8459 	pop	ar5
      002F6C D0 06            [24] 8460 	pop	ar6
      002F6E D0 07            [24] 8461 	pop	ar7
                                   8462 ;	calc.c:75: printbin(d);
      002F70 E5*00            [12] 8463 	mov	a,_bp
      002F72 24 16            [12] 8464 	add	a,#0x16
      002F74 F8               [12] 8465 	mov	r0,a
      002F75 A6 05            [24] 8466 	mov	@r0,ar5
      002F77 08               [12] 8467 	inc	r0
      002F78 A6 06            [24] 8468 	mov	@r0,ar6
      002F7A 08               [12] 8469 	inc	r0
      002F7B A6 07            [24] 8470 	mov	@r0,ar7
      002F7D 08               [12] 8471 	inc	r0
      002F7E A6 04            [24] 8472 	mov	@r0,ar4
                                   8473 ;	calc.c:65: for (mask = 0x80000000lu; mask; mask >>= 1)
      002F80 E5*00            [12] 8474 	mov	a,_bp
      002F82 24 1A            [12] 8475 	add	a,#0x1a
      002F84 F8               [12] 8476 	mov	r0,a
      002F85 E4               [12] 8477 	clr	a
      002F86 F6               [12] 8478 	mov	@r0,a
      002F87 08               [12] 8479 	inc	r0
      002F88 F6               [12] 8480 	mov	@r0,a
      002F89 08               [12] 8481 	inc	r0
      002F8A F6               [12] 8482 	mov	@r0,a
      002F8B 08               [12] 8483 	inc	r0
      002F8C 76 80            [12] 8484 	mov	@r0,#0x80
      002F8E                       8485 00141$:
                                   8486 ;	calc.c:66: (void)putchar((d & mask) ? (int)'1' : (int)'0');
      002F8E E5*00            [12] 8487 	mov	a,_bp
      002F90 24 16            [12] 8488 	add	a,#0x16
      002F92 F8               [12] 8489 	mov	r0,a
      002F93 86 04            [24] 8490 	mov	ar4,@r0
      002F95 08               [12] 8491 	inc	r0
      002F96 86 05            [24] 8492 	mov	ar5,@r0
      002F98 08               [12] 8493 	inc	r0
      002F99 86 06            [24] 8494 	mov	ar6,@r0
      002F9B 08               [12] 8495 	inc	r0
      002F9C 86 07            [24] 8496 	mov	ar7,@r0
      002F9E E5*00            [12] 8497 	mov	a,_bp
      002FA0 24 1A            [12] 8498 	add	a,#0x1a
      002FA2 F8               [12] 8499 	mov	r0,a
      002FA3 E6               [12] 8500 	mov	a,@r0
      002FA4 52 04            [12] 8501 	anl	ar4,a
      002FA6 08               [12] 8502 	inc	r0
      002FA7 E6               [12] 8503 	mov	a,@r0
      002FA8 52 05            [12] 8504 	anl	ar5,a
      002FAA 08               [12] 8505 	inc	r0
      002FAB E6               [12] 8506 	mov	a,@r0
      002FAC 52 06            [12] 8507 	anl	ar6,a
      002FAE 08               [12] 8508 	inc	r0
      002FAF E6               [12] 8509 	mov	a,@r0
      002FB0 52 07            [12] 8510 	anl	ar7,a
      002FB2 EC               [12] 8511 	mov	a,r4
      002FB3 4D               [12] 8512 	orl	a,r5
      002FB4 4E               [12] 8513 	orl	a,r6
      002FB5 4F               [12] 8514 	orl	a,r7
      002FB6 60 06            [24] 8515 	jz	00168$
      002FB8 7E 31            [12] 8516 	mov	r6,#0x31
      002FBA 7F 00            [12] 8517 	mov	r7,#0x00
      002FBC 80 04            [24] 8518 	sjmp	00169$
      002FBE                       8519 00168$:
      002FBE 7E 30            [12] 8520 	mov	r6,#0x30
      002FC0 7F 00            [12] 8521 	mov	r7,#0x00
      002FC2                       8522 00169$:
      002FC2 8E 82            [24] 8523 	mov	dpl,r6
      002FC4 8F 83            [24] 8524 	mov	dph,r7
      002FC6 12r00r00         [24] 8525 	lcall	_putchar
                                   8526 ;	calc.c:65: for (mask = 0x80000000lu; mask; mask >>= 1)
      002FC9 E5*00            [12] 8527 	mov	a,_bp
      002FCB 24 1A            [12] 8528 	add	a,#0x1a
      002FCD F8               [12] 8529 	mov	r0,a
      002FCE 08               [12] 8530 	inc	r0
      002FCF 08               [12] 8531 	inc	r0
      002FD0 08               [12] 8532 	inc	r0
      002FD1 E6               [12] 8533 	mov	a,@r0
      002FD2 C3               [12] 8534 	clr	c
      002FD3 13               [12] 8535 	rrc	a
      002FD4 F6               [12] 8536 	mov	@r0,a
      002FD5 18               [12] 8537 	dec	r0
      002FD6 E6               [12] 8538 	mov	a,@r0
      002FD7 13               [12] 8539 	rrc	a
      002FD8 F6               [12] 8540 	mov	@r0,a
      002FD9 18               [12] 8541 	dec	r0
      002FDA E6               [12] 8542 	mov	a,@r0
      002FDB 13               [12] 8543 	rrc	a
      002FDC F6               [12] 8544 	mov	@r0,a
      002FDD 18               [12] 8545 	dec	r0
      002FDE E6               [12] 8546 	mov	a,@r0
      002FDF 13               [12] 8547 	rrc	a
      002FE0 F6               [12] 8548 	mov	@r0,a
      002FE1 E5*00            [12] 8549 	mov	a,_bp
      002FE3 24 1A            [12] 8550 	add	a,#0x1a
      002FE5 F8               [12] 8551 	mov	r0,a
      002FE6 E6               [12] 8552 	mov	a,@r0
      002FE7 08               [12] 8553 	inc	r0
      002FE8 46               [12] 8554 	orl	a,@r0
      002FE9 08               [12] 8555 	inc	r0
      002FEA 46               [12] 8556 	orl	a,@r0
      002FEB 08               [12] 8557 	inc	r0
      002FEC 46               [12] 8558 	orl	a,@r0
      002FED 70 9F            [24] 8559 	jnz	00141$
                                   8560 ;	calc.c:411: if (ctx->acc_valid) printall(ctx->acc);
      002FEF                       8561 00102$:
                                   8562 ;	calc.c:413: n = stack_peek2(ctx->ps, vals);
      002FEF E5*00            [12] 8563 	mov	a,_bp
      002FF1 24 0E            [12] 8564 	add	a,#0x0e
      002FF3 F9               [12] 8565 	mov	r1,a
      002FF4 FD               [12] 8566 	mov	r5,a
      002FF5 7E 00            [12] 8567 	mov	r6,#0x00
      002FF7 7F 40            [12] 8568 	mov	r7,#0x40
      002FF9 E5*00            [12] 8569 	mov	a,_bp
      002FFB 24 04            [12] 8570 	add	a,#0x04
      002FFD F8               [12] 8571 	mov	r0,a
      002FFE 86 82            [24] 8572 	mov	dpl,@r0
      003000 08               [12] 8573 	inc	r0
      003001 86 83            [24] 8574 	mov	dph,@r0
      003003 08               [12] 8575 	inc	r0
      003004 86 F0            [24] 8576 	mov	b,@r0
      003006 12r00r00         [24] 8577 	lcall	__gptrget
      003009 FA               [12] 8578 	mov	r2,a
      00300A A3               [24] 8579 	inc	dptr
      00300B 12r00r00         [24] 8580 	lcall	__gptrget
      00300E FB               [12] 8581 	mov	r3,a
      00300F A3               [24] 8582 	inc	dptr
      003010 12r00r00         [24] 8583 	lcall	__gptrget
      003013 FC               [12] 8584 	mov	r4,a
      003014 C0 01            [24] 8585 	push	ar1
      003016 C0 05            [24] 8586 	push	ar5
      003018 C0 06            [24] 8587 	push	ar6
      00301A C0 07            [24] 8588 	push	ar7
      00301C 8A 82            [24] 8589 	mov	dpl,r2
      00301E 8B 83            [24] 8590 	mov	dph,r3
      003020 8C F0            [24] 8591 	mov	b,r4
      003022 12r00r00         [24] 8592 	lcall	_stack_peek2
      003025 AE 82            [24] 8593 	mov	r6,dpl
      003027 AF 83            [24] 8594 	mov	r7,dph
      003029 15 81            [12] 8595 	dec	sp
      00302B 15 81            [12] 8596 	dec	sp
      00302D 15 81            [12] 8597 	dec	sp
      00302F D0 01            [24] 8598 	pop	ar1
                                   8599 ;	calc.c:414: printstr("\r\nPSTOP1\t");
      003031 7BrEA            [12] 8600 	mov	r3,#___str_17
      003033 7Cs00            [12] 8601 	mov	r4,#(___str_17 >> 8)
      003035 7D 80            [12] 8602 	mov	r5,#0x80
                                   8603 ;	calc.c:59: return;
      003037                       8604 00144$:
                                   8605 ;	calc.c:57: for (; *s; s++) putchar(*s);
      003037 8B 82            [24] 8606 	mov	dpl,r3
      003039 8C 83            [24] 8607 	mov	dph,r4
      00303B 8D F0            [24] 8608 	mov	b,r5
      00303D 12r00r00         [24] 8609 	lcall	__gptrget
      003040 FA               [12] 8610 	mov	r2,a
      003041 60 18            [24] 8611 	jz	00117$
      003043 C0 06            [24] 8612 	push	ar6
      003045 C0 07            [24] 8613 	push	ar7
      003047 7F 00            [12] 8614 	mov	r7,#0x00
      003049 8A 82            [24] 8615 	mov	dpl,r2
      00304B 8F 83            [24] 8616 	mov	dph,r7
      00304D 12r00r00         [24] 8617 	lcall	_putchar
      003050 0B               [12] 8618 	inc	r3
      003051 BB 00 01         [24] 8619 	cjne	r3,#0x00,00325$
      003054 0C               [12] 8620 	inc	r4
      003055                       8621 00325$:
      003055 D0 07            [24] 8622 	pop	ar7
      003057 D0 06            [24] 8623 	pop	ar6
                                   8624 ;	calc.c:414: printstr("\r\nPSTOP1\t");
      003059 80 DC            [24] 8625 	sjmp	00144$
      00305B                       8626 00117$:
                                   8627 ;	calc.c:415: if (n > 0) printall(vals[1]);
      00305B C3               [12] 8628 	clr	c
      00305C E4               [12] 8629 	clr	a
      00305D 9E               [12] 8630 	subb	a,r6
      00305E 74 80            [12] 8631 	mov	a,#(0x00 ^ 0x80)
      003060 8F F0            [24] 8632 	mov	b,r7
      003062 63 F0 80         [24] 8633 	xrl	b,#0x80
      003065 95 F0            [12] 8634 	subb	a,b
      003067 40 03            [24] 8635 	jc	00326$
      003069 02r31r9D         [24] 8636 	ljmp	00104$
      00306C                       8637 00326$:
      00306C 74 04            [12] 8638 	mov	a,#0x04
      00306E 29               [12] 8639 	add	a,r1
      00306F F8               [12] 8640 	mov	r0,a
      003070 86 02            [24] 8641 	mov	ar2,@r0
      003072 08               [12] 8642 	inc	r0
      003073 86 03            [24] 8643 	mov	ar3,@r0
      003075 08               [12] 8644 	inc	r0
      003076 86 04            [24] 8645 	mov	ar4,@r0
      003078 08               [12] 8646 	inc	r0
      003079 86 05            [24] 8647 	mov	ar5,@r0
                                   8648 ;	calc.c:72: printf("%08lx\t", d);
      00307B C0 07            [24] 8649 	push	ar7
      00307D C0 06            [24] 8650 	push	ar6
      00307F C0 05            [24] 8651 	push	ar5
      003081 C0 04            [24] 8652 	push	ar4
      003083 C0 03            [24] 8653 	push	ar3
      003085 C0 02            [24] 8654 	push	ar2
      003087 C0 01            [24] 8655 	push	ar1
      003089 C0 02            [24] 8656 	push	ar2
      00308B C0 03            [24] 8657 	push	ar3
      00308D C0 04            [24] 8658 	push	ar4
      00308F C0 05            [24] 8659 	push	ar5
      003091 74r00            [12] 8660 	mov	a,#___str_0
      003093 C0 E0            [24] 8661 	push	acc
      003095 74s00            [12] 8662 	mov	a,#(___str_0 >> 8)
      003097 C0 E0            [24] 8663 	push	acc
      003099 74 80            [12] 8664 	mov	a,#0x80
      00309B C0 E0            [24] 8665 	push	acc
      00309D 12r00r00         [24] 8666 	lcall	_printf
      0030A0 E5 81            [12] 8667 	mov	a,sp
      0030A2 24 F9            [12] 8668 	add	a,#0xf9
      0030A4 F5 81            [12] 8669 	mov	sp,a
      0030A6 D0 01            [24] 8670 	pop	ar1
      0030A8 D0 02            [24] 8671 	pop	ar2
      0030AA D0 03            [24] 8672 	pop	ar3
      0030AC D0 04            [24] 8673 	pop	ar4
      0030AE D0 05            [24] 8674 	pop	ar5
                                   8675 ;	calc.c:73: printf("% 11ld\t", d);
      0030B0 C0 05            [24] 8676 	push	ar5
      0030B2 C0 04            [24] 8677 	push	ar4
      0030B4 C0 03            [24] 8678 	push	ar3
      0030B6 C0 02            [24] 8679 	push	ar2
      0030B8 C0 01            [24] 8680 	push	ar1
      0030BA C0 02            [24] 8681 	push	ar2
      0030BC C0 03            [24] 8682 	push	ar3
      0030BE C0 04            [24] 8683 	push	ar4
      0030C0 C0 05            [24] 8684 	push	ar5
      0030C2 74r07            [12] 8685 	mov	a,#___str_1
      0030C4 C0 E0            [24] 8686 	push	acc
      0030C6 74s00            [12] 8687 	mov	a,#(___str_1 >> 8)
      0030C8 C0 E0            [24] 8688 	push	acc
      0030CA 74 80            [12] 8689 	mov	a,#0x80
      0030CC C0 E0            [24] 8690 	push	acc
      0030CE 12r00r00         [24] 8691 	lcall	_printf
      0030D1 E5 81            [12] 8692 	mov	a,sp
      0030D3 24 F9            [12] 8693 	add	a,#0xf9
      0030D5 F5 81            [12] 8694 	mov	sp,a
      0030D7 D0 01            [24] 8695 	pop	ar1
      0030D9 D0 02            [24] 8696 	pop	ar2
      0030DB D0 03            [24] 8697 	pop	ar3
      0030DD D0 04            [24] 8698 	pop	ar4
      0030DF D0 05            [24] 8699 	pop	ar5
                                   8700 ;	calc.c:74: printf("%011lo\t", d);
      0030E1 C0 05            [24] 8701 	push	ar5
      0030E3 C0 04            [24] 8702 	push	ar4
      0030E5 C0 03            [24] 8703 	push	ar3
      0030E7 C0 02            [24] 8704 	push	ar2
      0030E9 C0 01            [24] 8705 	push	ar1
      0030EB C0 02            [24] 8706 	push	ar2
      0030ED C0 03            [24] 8707 	push	ar3
      0030EF C0 04            [24] 8708 	push	ar4
      0030F1 C0 05            [24] 8709 	push	ar5
      0030F3 74r0F            [12] 8710 	mov	a,#___str_2
      0030F5 C0 E0            [24] 8711 	push	acc
      0030F7 74s00            [12] 8712 	mov	a,#(___str_2 >> 8)
      0030F9 C0 E0            [24] 8713 	push	acc
      0030FB 74 80            [12] 8714 	mov	a,#0x80
      0030FD C0 E0            [24] 8715 	push	acc
      0030FF 12r00r00         [24] 8716 	lcall	_printf
      003102 E5 81            [12] 8717 	mov	a,sp
      003104 24 F9            [12] 8718 	add	a,#0xf9
      003106 F5 81            [12] 8719 	mov	sp,a
      003108 D0 01            [24] 8720 	pop	ar1
      00310A D0 02            [24] 8721 	pop	ar2
      00310C D0 03            [24] 8722 	pop	ar3
      00310E D0 04            [24] 8723 	pop	ar4
      003110 D0 05            [24] 8724 	pop	ar5
      003112 D0 06            [24] 8725 	pop	ar6
      003114 D0 07            [24] 8726 	pop	ar7
                                   8727 ;	calc.c:75: printbin(d);
      003116 E5*00            [12] 8728 	mov	a,_bp
      003118 24 16            [12] 8729 	add	a,#0x16
      00311A F8               [12] 8730 	mov	r0,a
      00311B A6 02            [24] 8731 	mov	@r0,ar2
      00311D 08               [12] 8732 	inc	r0
      00311E A6 03            [24] 8733 	mov	@r0,ar3
      003120 08               [12] 8734 	inc	r0
      003121 A6 04            [24] 8735 	mov	@r0,ar4
      003123 08               [12] 8736 	inc	r0
      003124 A6 05            [24] 8737 	mov	@r0,ar5
                                   8738 ;	calc.c:65: for (mask = 0x80000000lu; mask; mask >>= 1)
      003126 E5*00            [12] 8739 	mov	a,_bp
      003128 24 1A            [12] 8740 	add	a,#0x1a
      00312A F8               [12] 8741 	mov	r0,a
      00312B E4               [12] 8742 	clr	a
      00312C F6               [12] 8743 	mov	@r0,a
      00312D 08               [12] 8744 	inc	r0
      00312E F6               [12] 8745 	mov	@r0,a
      00312F 08               [12] 8746 	inc	r0
      003130 F6               [12] 8747 	mov	@r0,a
      003131 08               [12] 8748 	inc	r0
      003132 76 80            [12] 8749 	mov	@r0,#0x80
      003134                       8750 00146$:
                                   8751 ;	calc.c:66: (void)putchar((d & mask) ? (int)'1' : (int)'0');
      003134 C0 06            [24] 8752 	push	ar6
      003136 C0 07            [24] 8753 	push	ar7
      003138 E5*00            [12] 8754 	mov	a,_bp
      00313A 24 16            [12] 8755 	add	a,#0x16
      00313C F8               [12] 8756 	mov	r0,a
      00313D 86 04            [24] 8757 	mov	ar4,@r0
      00313F 08               [12] 8758 	inc	r0
      003140 86 05            [24] 8759 	mov	ar5,@r0
      003142 08               [12] 8760 	inc	r0
      003143 86 06            [24] 8761 	mov	ar6,@r0
      003145 08               [12] 8762 	inc	r0
      003146 86 07            [24] 8763 	mov	ar7,@r0
      003148 E5*00            [12] 8764 	mov	a,_bp
      00314A 24 1A            [12] 8765 	add	a,#0x1a
      00314C F8               [12] 8766 	mov	r0,a
      00314D E6               [12] 8767 	mov	a,@r0
      00314E 52 04            [12] 8768 	anl	ar4,a
      003150 08               [12] 8769 	inc	r0
      003151 E6               [12] 8770 	mov	a,@r0
      003152 52 05            [12] 8771 	anl	ar5,a
      003154 08               [12] 8772 	inc	r0
      003155 E6               [12] 8773 	mov	a,@r0
      003156 52 06            [12] 8774 	anl	ar6,a
      003158 08               [12] 8775 	inc	r0
      003159 E6               [12] 8776 	mov	a,@r0
      00315A 52 07            [12] 8777 	anl	ar7,a
      00315C EC               [12] 8778 	mov	a,r4
      00315D 4D               [12] 8779 	orl	a,r5
      00315E 4E               [12] 8780 	orl	a,r6
      00315F 4F               [12] 8781 	orl	a,r7
      003160 D0 07            [24] 8782 	pop	ar7
      003162 D0 06            [24] 8783 	pop	ar6
      003164 60 06            [24] 8784 	jz	00170$
      003166 7C 31            [12] 8785 	mov	r4,#0x31
      003168 7D 00            [12] 8786 	mov	r5,#0x00
      00316A 80 04            [24] 8787 	sjmp	00171$
      00316C                       8788 00170$:
      00316C 7C 30            [12] 8789 	mov	r4,#0x30
      00316E 7D 00            [12] 8790 	mov	r5,#0x00
      003170                       8791 00171$:
      003170 8C 82            [24] 8792 	mov	dpl,r4
      003172 8D 83            [24] 8793 	mov	dph,r5
      003174 12r00r00         [24] 8794 	lcall	_putchar
                                   8795 ;	calc.c:65: for (mask = 0x80000000lu; mask; mask >>= 1)
      003177 E5*00            [12] 8796 	mov	a,_bp
      003179 24 1A            [12] 8797 	add	a,#0x1a
      00317B F8               [12] 8798 	mov	r0,a
      00317C 08               [12] 8799 	inc	r0
      00317D 08               [12] 8800 	inc	r0
      00317E 08               [12] 8801 	inc	r0
      00317F E6               [12] 8802 	mov	a,@r0
      003180 C3               [12] 8803 	clr	c
      003181 13               [12] 8804 	rrc	a
      003182 F6               [12] 8805 	mov	@r0,a
      003183 18               [12] 8806 	dec	r0
      003184 E6               [12] 8807 	mov	a,@r0
      003185 13               [12] 8808 	rrc	a
      003186 F6               [12] 8809 	mov	@r0,a
      003187 18               [12] 8810 	dec	r0
      003188 E6               [12] 8811 	mov	a,@r0
      003189 13               [12] 8812 	rrc	a
      00318A F6               [12] 8813 	mov	@r0,a
      00318B 18               [12] 8814 	dec	r0
      00318C E6               [12] 8815 	mov	a,@r0
      00318D 13               [12] 8816 	rrc	a
      00318E F6               [12] 8817 	mov	@r0,a
      00318F E5*00            [12] 8818 	mov	a,_bp
      003191 24 1A            [12] 8819 	add	a,#0x1a
      003193 F8               [12] 8820 	mov	r0,a
      003194 E6               [12] 8821 	mov	a,@r0
      003195 08               [12] 8822 	inc	r0
      003196 46               [12] 8823 	orl	a,@r0
      003197 08               [12] 8824 	inc	r0
      003198 46               [12] 8825 	orl	a,@r0
      003199 08               [12] 8826 	inc	r0
      00319A 46               [12] 8827 	orl	a,@r0
      00319B 70 97            [24] 8828 	jnz	00146$
                                   8829 ;	calc.c:415: if (n > 0) printall(vals[1]);
      00319D                       8830 00104$:
                                   8831 ;	calc.c:416: printstr("\r\nPSTOP0\t");
      00319D 7BrF4            [12] 8832 	mov	r3,#___str_18
      00319F 7Cs00            [12] 8833 	mov	r4,#(___str_18 >> 8)
      0031A1 7D 80            [12] 8834 	mov	r5,#0x80
                                   8835 ;	calc.c:59: return;
      0031A3                       8836 00149$:
                                   8837 ;	calc.c:57: for (; *s; s++) putchar(*s);
      0031A3 8B 82            [24] 8838 	mov	dpl,r3
      0031A5 8C 83            [24] 8839 	mov	dph,r4
      0031A7 8D F0            [24] 8840 	mov	b,r5
      0031A9 12r00r00         [24] 8841 	lcall	__gptrget
      0031AC FA               [12] 8842 	mov	r2,a
      0031AD 60 18            [24] 8843 	jz	00122$
      0031AF C0 06            [24] 8844 	push	ar6
      0031B1 C0 07            [24] 8845 	push	ar7
      0031B3 7F 00            [12] 8846 	mov	r7,#0x00
      0031B5 8A 82            [24] 8847 	mov	dpl,r2
      0031B7 8F 83            [24] 8848 	mov	dph,r7
      0031B9 12r00r00         [24] 8849 	lcall	_putchar
      0031BC 0B               [12] 8850 	inc	r3
      0031BD BB 00 01         [24] 8851 	cjne	r3,#0x00,00330$
      0031C0 0C               [12] 8852 	inc	r4
      0031C1                       8853 00330$:
      0031C1 D0 07            [24] 8854 	pop	ar7
      0031C3 D0 06            [24] 8855 	pop	ar6
                                   8856 ;	calc.c:416: printstr("\r\nPSTOP0\t");
      0031C5 80 DC            [24] 8857 	sjmp	00149$
      0031C7                       8858 00122$:
                                   8859 ;	calc.c:417: if (n > 1) printall(vals[0]);
      0031C7 C3               [12] 8860 	clr	c
      0031C8 74 01            [12] 8861 	mov	a,#0x01
      0031CA 9E               [12] 8862 	subb	a,r6
      0031CB 74 80            [12] 8863 	mov	a,#(0x00 ^ 0x80)
      0031CD 8F F0            [24] 8864 	mov	b,r7
      0031CF 63 F0 80         [24] 8865 	xrl	b,#0x80
      0031D2 95 F0            [12] 8866 	subb	a,b
      0031D4 40 03            [24] 8867 	jc	00331$
      0031D6 02r32rFD         [24] 8868 	ljmp	00106$
      0031D9                       8869 00331$:
      0031D9 87 04            [24] 8870 	mov	ar4,@r1
      0031DB 09               [12] 8871 	inc	r1
      0031DC 87 05            [24] 8872 	mov	ar5,@r1
      0031DE 09               [12] 8873 	inc	r1
      0031DF 87 06            [24] 8874 	mov	ar6,@r1
      0031E1 09               [12] 8875 	inc	r1
      0031E2 87 07            [24] 8876 	mov	ar7,@r1
      0031E4 19               [12] 8877 	dec	r1
      0031E5 19               [12] 8878 	dec	r1
      0031E6 19               [12] 8879 	dec	r1
                                   8880 ;	calc.c:72: printf("%08lx\t", d);
      0031E7 C0 07            [24] 8881 	push	ar7
      0031E9 C0 06            [24] 8882 	push	ar6
      0031EB C0 05            [24] 8883 	push	ar5
      0031ED C0 04            [24] 8884 	push	ar4
      0031EF C0 01            [24] 8885 	push	ar1
      0031F1 C0 04            [24] 8886 	push	ar4
      0031F3 C0 05            [24] 8887 	push	ar5
      0031F5 C0 06            [24] 8888 	push	ar6
      0031F7 C0 07            [24] 8889 	push	ar7
      0031F9 74r00            [12] 8890 	mov	a,#___str_0
      0031FB C0 E0            [24] 8891 	push	acc
      0031FD 74s00            [12] 8892 	mov	a,#(___str_0 >> 8)
      0031FF C0 E0            [24] 8893 	push	acc
      003201 74 80            [12] 8894 	mov	a,#0x80
      003203 C0 E0            [24] 8895 	push	acc
      003205 12r00r00         [24] 8896 	lcall	_printf
      003208 E5 81            [12] 8897 	mov	a,sp
      00320A 24 F9            [12] 8898 	add	a,#0xf9
      00320C F5 81            [12] 8899 	mov	sp,a
      00320E D0 01            [24] 8900 	pop	ar1
      003210 D0 04            [24] 8901 	pop	ar4
      003212 D0 05            [24] 8902 	pop	ar5
      003214 D0 06            [24] 8903 	pop	ar6
      003216 D0 07            [24] 8904 	pop	ar7
                                   8905 ;	calc.c:73: printf("% 11ld\t", d);
      003218 C0 07            [24] 8906 	push	ar7
      00321A C0 06            [24] 8907 	push	ar6
      00321C C0 05            [24] 8908 	push	ar5
      00321E C0 04            [24] 8909 	push	ar4
      003220 C0 01            [24] 8910 	push	ar1
      003222 C0 04            [24] 8911 	push	ar4
      003224 C0 05            [24] 8912 	push	ar5
      003226 C0 06            [24] 8913 	push	ar6
      003228 C0 07            [24] 8914 	push	ar7
      00322A 74r07            [12] 8915 	mov	a,#___str_1
      00322C C0 E0            [24] 8916 	push	acc
      00322E 74s00            [12] 8917 	mov	a,#(___str_1 >> 8)
      003230 C0 E0            [24] 8918 	push	acc
      003232 74 80            [12] 8919 	mov	a,#0x80
      003234 C0 E0            [24] 8920 	push	acc
      003236 12r00r00         [24] 8921 	lcall	_printf
      003239 E5 81            [12] 8922 	mov	a,sp
      00323B 24 F9            [12] 8923 	add	a,#0xf9
      00323D F5 81            [12] 8924 	mov	sp,a
      00323F D0 01            [24] 8925 	pop	ar1
      003241 D0 04            [24] 8926 	pop	ar4
      003243 D0 05            [24] 8927 	pop	ar5
      003245 D0 06            [24] 8928 	pop	ar6
      003247 D0 07            [24] 8929 	pop	ar7
                                   8930 ;	calc.c:74: printf("%011lo\t", d);
      003249 C0 07            [24] 8931 	push	ar7
      00324B C0 06            [24] 8932 	push	ar6
      00324D C0 05            [24] 8933 	push	ar5
      00324F C0 04            [24] 8934 	push	ar4
      003251 C0 01            [24] 8935 	push	ar1
      003253 C0 04            [24] 8936 	push	ar4
      003255 C0 05            [24] 8937 	push	ar5
      003257 C0 06            [24] 8938 	push	ar6
      003259 C0 07            [24] 8939 	push	ar7
      00325B 74r0F            [12] 8940 	mov	a,#___str_2
      00325D C0 E0            [24] 8941 	push	acc
      00325F 74s00            [12] 8942 	mov	a,#(___str_2 >> 8)
      003261 C0 E0            [24] 8943 	push	acc
      003263 74 80            [12] 8944 	mov	a,#0x80
      003265 C0 E0            [24] 8945 	push	acc
      003267 12r00r00         [24] 8946 	lcall	_printf
      00326A E5 81            [12] 8947 	mov	a,sp
      00326C 24 F9            [12] 8948 	add	a,#0xf9
      00326E F5 81            [12] 8949 	mov	sp,a
      003270 D0 01            [24] 8950 	pop	ar1
      003272 D0 04            [24] 8951 	pop	ar4
      003274 D0 05            [24] 8952 	pop	ar5
      003276 D0 06            [24] 8953 	pop	ar6
      003278 D0 07            [24] 8954 	pop	ar7
                                   8955 ;	calc.c:75: printbin(d);
      00327A E5*00            [12] 8956 	mov	a,_bp
      00327C 24 16            [12] 8957 	add	a,#0x16
      00327E F8               [12] 8958 	mov	r0,a
      00327F A6 04            [24] 8959 	mov	@r0,ar4
      003281 08               [12] 8960 	inc	r0
      003282 A6 05            [24] 8961 	mov	@r0,ar5
      003284 08               [12] 8962 	inc	r0
      003285 A6 06            [24] 8963 	mov	@r0,ar6
      003287 08               [12] 8964 	inc	r0
      003288 A6 07            [24] 8965 	mov	@r0,ar7
                                   8966 ;	calc.c:65: for (mask = 0x80000000lu; mask; mask >>= 1)
      00328A E5*00            [12] 8967 	mov	a,_bp
      00328C 24 1A            [12] 8968 	add	a,#0x1a
      00328E F8               [12] 8969 	mov	r0,a
      00328F E4               [12] 8970 	clr	a
      003290 F6               [12] 8971 	mov	@r0,a
      003291 08               [12] 8972 	inc	r0
      003292 F6               [12] 8973 	mov	@r0,a
      003293 08               [12] 8974 	inc	r0
      003294 F6               [12] 8975 	mov	@r0,a
      003295 08               [12] 8976 	inc	r0
      003296 76 80            [12] 8977 	mov	@r0,#0x80
      003298                       8978 00151$:
                                   8979 ;	calc.c:66: (void)putchar((d & mask) ? (int)'1' : (int)'0');
      003298 C0 01            [24] 8980 	push	ar1
      00329A E5*00            [12] 8981 	mov	a,_bp
      00329C 24 16            [12] 8982 	add	a,#0x16
      00329E F8               [12] 8983 	mov	r0,a
      00329F 86 04            [24] 8984 	mov	ar4,@r0
      0032A1 08               [12] 8985 	inc	r0
      0032A2 86 05            [24] 8986 	mov	ar5,@r0
      0032A4 08               [12] 8987 	inc	r0
      0032A5 86 06            [24] 8988 	mov	ar6,@r0
      0032A7 08               [12] 8989 	inc	r0
      0032A8 86 07            [24] 8990 	mov	ar7,@r0
      0032AA E5*00            [12] 8991 	mov	a,_bp
      0032AC 24 1A            [12] 8992 	add	a,#0x1a
      0032AE F8               [12] 8993 	mov	r0,a
      0032AF E6               [12] 8994 	mov	a,@r0
      0032B0 52 04            [12] 8995 	anl	ar4,a
      0032B2 08               [12] 8996 	inc	r0
      0032B3 E6               [12] 8997 	mov	a,@r0
      0032B4 52 05            [12] 8998 	anl	ar5,a
      0032B6 08               [12] 8999 	inc	r0
      0032B7 E6               [12] 9000 	mov	a,@r0
      0032B8 52 06            [12] 9001 	anl	ar6,a
      0032BA 08               [12] 9002 	inc	r0
      0032BB E6               [12] 9003 	mov	a,@r0
      0032BC 52 07            [12] 9004 	anl	ar7,a
      0032BE D0 01            [24] 9005 	pop	ar1
      0032C0 EC               [12] 9006 	mov	a,r4
      0032C1 4D               [12] 9007 	orl	a,r5
      0032C2 4E               [12] 9008 	orl	a,r6
      0032C3 4F               [12] 9009 	orl	a,r7
      0032C4 60 06            [24] 9010 	jz	00172$
      0032C6 7E 31            [12] 9011 	mov	r6,#0x31
      0032C8 7F 00            [12] 9012 	mov	r7,#0x00
      0032CA 80 04            [24] 9013 	sjmp	00173$
      0032CC                       9014 00172$:
      0032CC 7E 30            [12] 9015 	mov	r6,#0x30
      0032CE 7F 00            [12] 9016 	mov	r7,#0x00
      0032D0                       9017 00173$:
      0032D0 8E 82            [24] 9018 	mov	dpl,r6
      0032D2 8F 83            [24] 9019 	mov	dph,r7
      0032D4 12r00r00         [24] 9020 	lcall	_putchar
                                   9021 ;	calc.c:65: for (mask = 0x80000000lu; mask; mask >>= 1)
      0032D7 E5*00            [12] 9022 	mov	a,_bp
      0032D9 24 1A            [12] 9023 	add	a,#0x1a
      0032DB F8               [12] 9024 	mov	r0,a
      0032DC 08               [12] 9025 	inc	r0
      0032DD 08               [12] 9026 	inc	r0
      0032DE 08               [12] 9027 	inc	r0
      0032DF E6               [12] 9028 	mov	a,@r0
      0032E0 C3               [12] 9029 	clr	c
      0032E1 13               [12] 9030 	rrc	a
      0032E2 F6               [12] 9031 	mov	@r0,a
      0032E3 18               [12] 9032 	dec	r0
      0032E4 E6               [12] 9033 	mov	a,@r0
      0032E5 13               [12] 9034 	rrc	a
      0032E6 F6               [12] 9035 	mov	@r0,a
      0032E7 18               [12] 9036 	dec	r0
      0032E8 E6               [12] 9037 	mov	a,@r0
      0032E9 13               [12] 9038 	rrc	a
      0032EA F6               [12] 9039 	mov	@r0,a
      0032EB 18               [12] 9040 	dec	r0
      0032EC E6               [12] 9041 	mov	a,@r0
      0032ED 13               [12] 9042 	rrc	a
      0032EE F6               [12] 9043 	mov	@r0,a
      0032EF E5*00            [12] 9044 	mov	a,_bp
      0032F1 24 1A            [12] 9045 	add	a,#0x1a
      0032F3 F8               [12] 9046 	mov	r0,a
      0032F4 E6               [12] 9047 	mov	a,@r0
      0032F5 08               [12] 9048 	inc	r0
      0032F6 46               [12] 9049 	orl	a,@r0
      0032F7 08               [12] 9050 	inc	r0
      0032F8 46               [12] 9051 	orl	a,@r0
      0032F9 08               [12] 9052 	inc	r0
      0032FA 46               [12] 9053 	orl	a,@r0
      0032FB 70 9B            [24] 9054 	jnz	00151$
                                   9055 ;	calc.c:417: if (n > 1) printall(vals[0]);
      0032FD                       9056 00106$:
                                   9057 ;	calc.c:419: n = stack_peek2(ctx->ss, vals);
      0032FD 89 07            [24] 9058 	mov	ar7,r1
      0032FF 7E 00            [12] 9059 	mov	r6,#0x00
      003301 7D 40            [12] 9060 	mov	r5,#0x40
      003303 A8*00            [24] 9061 	mov	r0,_bp
      003305 08               [12] 9062 	inc	r0
      003306 86 82            [24] 9063 	mov	dpl,@r0
      003308 08               [12] 9064 	inc	r0
      003309 86 83            [24] 9065 	mov	dph,@r0
      00330B 08               [12] 9066 	inc	r0
      00330C 86 F0            [24] 9067 	mov	b,@r0
      00330E 12r00r00         [24] 9068 	lcall	__gptrget
      003311 FA               [12] 9069 	mov	r2,a
      003312 A3               [24] 9070 	inc	dptr
      003313 12r00r00         [24] 9071 	lcall	__gptrget
      003316 FB               [12] 9072 	mov	r3,a
      003317 A3               [24] 9073 	inc	dptr
      003318 12r00r00         [24] 9074 	lcall	__gptrget
      00331B FC               [12] 9075 	mov	r4,a
      00331C C0 01            [24] 9076 	push	ar1
      00331E C0 07            [24] 9077 	push	ar7
      003320 C0 06            [24] 9078 	push	ar6
      003322 C0 05            [24] 9079 	push	ar5
      003324 8A 82            [24] 9080 	mov	dpl,r2
      003326 8B 83            [24] 9081 	mov	dph,r3
      003328 8C F0            [24] 9082 	mov	b,r4
      00332A 12r00r00         [24] 9083 	lcall	_stack_peek2
      00332D AE 82            [24] 9084 	mov	r6,dpl
      00332F AF 83            [24] 9085 	mov	r7,dph
      003331 15 81            [12] 9086 	dec	sp
      003333 15 81            [12] 9087 	dec	sp
      003335 15 81            [12] 9088 	dec	sp
      003337 D0 01            [24] 9089 	pop	ar1
      003339 E5*00            [12] 9090 	mov	a,_bp
      00333B 24 0C            [12] 9091 	add	a,#0x0c
      00333D F8               [12] 9092 	mov	r0,a
      00333E A6 06            [24] 9093 	mov	@r0,ar6
      003340 08               [12] 9094 	inc	r0
      003341 A6 07            [24] 9095 	mov	@r0,ar7
                                   9096 ;	calc.c:420: printstr("\r\nSSTOP1\t");
      003343 7BrFE            [12] 9097 	mov	r3,#___str_19
      003345 7Cs00            [12] 9098 	mov	r4,#(___str_19 >> 8)
      003347 7D 80            [12] 9099 	mov	r5,#0x80
                                   9100 ;	calc.c:59: return;
      003349                       9101 00154$:
                                   9102 ;	calc.c:57: for (; *s; s++) putchar(*s);
      003349 8B 82            [24] 9103 	mov	dpl,r3
      00334B 8C 83            [24] 9104 	mov	dph,r4
      00334D 8D F0            [24] 9105 	mov	b,r5
      00334F 12r00r00         [24] 9106 	lcall	__gptrget
      003352 FA               [12] 9107 	mov	r2,a
      003353 60 10            [24] 9108 	jz	00127$
      003355 7F 00            [12] 9109 	mov	r7,#0x00
      003357 8A 82            [24] 9110 	mov	dpl,r2
      003359 8F 83            [24] 9111 	mov	dph,r7
      00335B 12r00r00         [24] 9112 	lcall	_putchar
      00335E 0B               [12] 9113 	inc	r3
                                   9114 ;	calc.c:420: printstr("\r\nSSTOP1\t");
      00335F BB 00 E7         [24] 9115 	cjne	r3,#0x00,00154$
      003362 0C               [12] 9116 	inc	r4
      003363 80 E4            [24] 9117 	sjmp	00154$
      003365                       9118 00127$:
                                   9119 ;	calc.c:421: if (n > 0) printall(vals[1]);
      003365 E5*00            [12] 9120 	mov	a,_bp
      003367 24 0C            [12] 9121 	add	a,#0x0c
      003369 F8               [12] 9122 	mov	r0,a
      00336A C3               [12] 9123 	clr	c
      00336B E4               [12] 9124 	clr	a
      00336C 96               [12] 9125 	subb	a,@r0
      00336D 74 80            [12] 9126 	mov	a,#(0x00 ^ 0x80)
      00336F 08               [12] 9127 	inc	r0
      003370 86 F0            [24] 9128 	mov	b,@r0
      003372 63 F0 80         [24] 9129 	xrl	b,#0x80
      003375 95 F0            [12] 9130 	subb	a,b
      003377 40 03            [24] 9131 	jc	00336$
      003379 02r34rA1         [24] 9132 	ljmp	00108$
      00337C                       9133 00336$:
      00337C 74 04            [12] 9134 	mov	a,#0x04
      00337E 29               [12] 9135 	add	a,r1
      00337F F8               [12] 9136 	mov	r0,a
      003380 86 02            [24] 9137 	mov	ar2,@r0
      003382 08               [12] 9138 	inc	r0
      003383 86 03            [24] 9139 	mov	ar3,@r0
      003385 08               [12] 9140 	inc	r0
      003386 86 04            [24] 9141 	mov	ar4,@r0
      003388 08               [12] 9142 	inc	r0
      003389 86 05            [24] 9143 	mov	ar5,@r0
                                   9144 ;	calc.c:72: printf("%08lx\t", d);
      00338B C0 05            [24] 9145 	push	ar5
      00338D C0 04            [24] 9146 	push	ar4
      00338F C0 03            [24] 9147 	push	ar3
      003391 C0 02            [24] 9148 	push	ar2
      003393 C0 01            [24] 9149 	push	ar1
      003395 C0 02            [24] 9150 	push	ar2
      003397 C0 03            [24] 9151 	push	ar3
      003399 C0 04            [24] 9152 	push	ar4
      00339B C0 05            [24] 9153 	push	ar5
      00339D 74r00            [12] 9154 	mov	a,#___str_0
      00339F C0 E0            [24] 9155 	push	acc
      0033A1 74s00            [12] 9156 	mov	a,#(___str_0 >> 8)
      0033A3 C0 E0            [24] 9157 	push	acc
      0033A5 74 80            [12] 9158 	mov	a,#0x80
      0033A7 C0 E0            [24] 9159 	push	acc
      0033A9 12r00r00         [24] 9160 	lcall	_printf
      0033AC E5 81            [12] 9161 	mov	a,sp
      0033AE 24 F9            [12] 9162 	add	a,#0xf9
      0033B0 F5 81            [12] 9163 	mov	sp,a
      0033B2 D0 01            [24] 9164 	pop	ar1
      0033B4 D0 02            [24] 9165 	pop	ar2
      0033B6 D0 03            [24] 9166 	pop	ar3
      0033B8 D0 04            [24] 9167 	pop	ar4
      0033BA D0 05            [24] 9168 	pop	ar5
                                   9169 ;	calc.c:73: printf("% 11ld\t", d);
      0033BC C0 05            [24] 9170 	push	ar5
      0033BE C0 04            [24] 9171 	push	ar4
      0033C0 C0 03            [24] 9172 	push	ar3
      0033C2 C0 02            [24] 9173 	push	ar2
      0033C4 C0 01            [24] 9174 	push	ar1
      0033C6 C0 02            [24] 9175 	push	ar2
      0033C8 C0 03            [24] 9176 	push	ar3
      0033CA C0 04            [24] 9177 	push	ar4
      0033CC C0 05            [24] 9178 	push	ar5
      0033CE 74r07            [12] 9179 	mov	a,#___str_1
      0033D0 C0 E0            [24] 9180 	push	acc
      0033D2 74s00            [12] 9181 	mov	a,#(___str_1 >> 8)
      0033D4 C0 E0            [24] 9182 	push	acc
      0033D6 74 80            [12] 9183 	mov	a,#0x80
      0033D8 C0 E0            [24] 9184 	push	acc
      0033DA 12r00r00         [24] 9185 	lcall	_printf
      0033DD E5 81            [12] 9186 	mov	a,sp
      0033DF 24 F9            [12] 9187 	add	a,#0xf9
      0033E1 F5 81            [12] 9188 	mov	sp,a
      0033E3 D0 01            [24] 9189 	pop	ar1
      0033E5 D0 02            [24] 9190 	pop	ar2
      0033E7 D0 03            [24] 9191 	pop	ar3
      0033E9 D0 04            [24] 9192 	pop	ar4
      0033EB D0 05            [24] 9193 	pop	ar5
                                   9194 ;	calc.c:74: printf("%011lo\t", d);
      0033ED C0 05            [24] 9195 	push	ar5
      0033EF C0 04            [24] 9196 	push	ar4
      0033F1 C0 03            [24] 9197 	push	ar3
      0033F3 C0 02            [24] 9198 	push	ar2
      0033F5 C0 01            [24] 9199 	push	ar1
      0033F7 C0 02            [24] 9200 	push	ar2
      0033F9 C0 03            [24] 9201 	push	ar3
      0033FB C0 04            [24] 9202 	push	ar4
      0033FD C0 05            [24] 9203 	push	ar5
      0033FF 74r0F            [12] 9204 	mov	a,#___str_2
      003401 C0 E0            [24] 9205 	push	acc
      003403 74s00            [12] 9206 	mov	a,#(___str_2 >> 8)
      003405 C0 E0            [24] 9207 	push	acc
      003407 74 80            [12] 9208 	mov	a,#0x80
      003409 C0 E0            [24] 9209 	push	acc
      00340B 12r00r00         [24] 9210 	lcall	_printf
      00340E E5 81            [12] 9211 	mov	a,sp
      003410 24 F9            [12] 9212 	add	a,#0xf9
      003412 F5 81            [12] 9213 	mov	sp,a
      003414 D0 01            [24] 9214 	pop	ar1
      003416 D0 02            [24] 9215 	pop	ar2
      003418 D0 03            [24] 9216 	pop	ar3
      00341A D0 04            [24] 9217 	pop	ar4
      00341C D0 05            [24] 9218 	pop	ar5
                                   9219 ;	calc.c:75: printbin(d);
      00341E E5*00            [12] 9220 	mov	a,_bp
      003420 24 16            [12] 9221 	add	a,#0x16
      003422 F8               [12] 9222 	mov	r0,a
      003423 A6 02            [24] 9223 	mov	@r0,ar2
      003425 08               [12] 9224 	inc	r0
      003426 A6 03            [24] 9225 	mov	@r0,ar3
      003428 08               [12] 9226 	inc	r0
      003429 A6 04            [24] 9227 	mov	@r0,ar4
      00342B 08               [12] 9228 	inc	r0
      00342C A6 05            [24] 9229 	mov	@r0,ar5
                                   9230 ;	calc.c:65: for (mask = 0x80000000lu; mask; mask >>= 1)
      00342E E5*00            [12] 9231 	mov	a,_bp
      003430 24 1A            [12] 9232 	add	a,#0x1a
      003432 F8               [12] 9233 	mov	r0,a
      003433 E4               [12] 9234 	clr	a
      003434 F6               [12] 9235 	mov	@r0,a
      003435 08               [12] 9236 	inc	r0
      003436 F6               [12] 9237 	mov	@r0,a
      003437 08               [12] 9238 	inc	r0
      003438 F6               [12] 9239 	mov	@r0,a
      003439 08               [12] 9240 	inc	r0
      00343A 76 80            [12] 9241 	mov	@r0,#0x80
      00343C                       9242 00156$:
                                   9243 ;	calc.c:66: (void)putchar((d & mask) ? (int)'1' : (int)'0');
      00343C C0 01            [24] 9244 	push	ar1
      00343E E5*00            [12] 9245 	mov	a,_bp
      003440 24 16            [12] 9246 	add	a,#0x16
      003442 F8               [12] 9247 	mov	r0,a
      003443 86 02            [24] 9248 	mov	ar2,@r0
      003445 08               [12] 9249 	inc	r0
      003446 86 03            [24] 9250 	mov	ar3,@r0
      003448 08               [12] 9251 	inc	r0
      003449 86 05            [24] 9252 	mov	ar5,@r0
      00344B 08               [12] 9253 	inc	r0
      00344C 86 07            [24] 9254 	mov	ar7,@r0
      00344E E5*00            [12] 9255 	mov	a,_bp
      003450 24 1A            [12] 9256 	add	a,#0x1a
      003452 F8               [12] 9257 	mov	r0,a
      003453 E6               [12] 9258 	mov	a,@r0
      003454 52 02            [12] 9259 	anl	ar2,a
      003456 08               [12] 9260 	inc	r0
      003457 E6               [12] 9261 	mov	a,@r0
      003458 52 03            [12] 9262 	anl	ar3,a
      00345A 08               [12] 9263 	inc	r0
      00345B E6               [12] 9264 	mov	a,@r0
      00345C 52 05            [12] 9265 	anl	ar5,a
      00345E 08               [12] 9266 	inc	r0
      00345F E6               [12] 9267 	mov	a,@r0
      003460 52 07            [12] 9268 	anl	ar7,a
      003462 D0 01            [24] 9269 	pop	ar1
      003464 EA               [12] 9270 	mov	a,r2
      003465 4B               [12] 9271 	orl	a,r3
      003466 4D               [12] 9272 	orl	a,r5
      003467 4F               [12] 9273 	orl	a,r7
      003468 60 06            [24] 9274 	jz	00174$
      00346A 7E 31            [12] 9275 	mov	r6,#0x31
      00346C 7F 00            [12] 9276 	mov	r7,#0x00
      00346E 80 04            [24] 9277 	sjmp	00175$
      003470                       9278 00174$:
      003470 7E 30            [12] 9279 	mov	r6,#0x30
      003472 7F 00            [12] 9280 	mov	r7,#0x00
      003474                       9281 00175$:
      003474 8E 82            [24] 9282 	mov	dpl,r6
      003476 8F 83            [24] 9283 	mov	dph,r7
      003478 12r00r00         [24] 9284 	lcall	_putchar
                                   9285 ;	calc.c:65: for (mask = 0x80000000lu; mask; mask >>= 1)
      00347B E5*00            [12] 9286 	mov	a,_bp
      00347D 24 1A            [12] 9287 	add	a,#0x1a
      00347F F8               [12] 9288 	mov	r0,a
      003480 08               [12] 9289 	inc	r0
      003481 08               [12] 9290 	inc	r0
      003482 08               [12] 9291 	inc	r0
      003483 E6               [12] 9292 	mov	a,@r0
      003484 C3               [12] 9293 	clr	c
      003485 13               [12] 9294 	rrc	a
      003486 F6               [12] 9295 	mov	@r0,a
      003487 18               [12] 9296 	dec	r0
      003488 E6               [12] 9297 	mov	a,@r0
      003489 13               [12] 9298 	rrc	a
      00348A F6               [12] 9299 	mov	@r0,a
      00348B 18               [12] 9300 	dec	r0
      00348C E6               [12] 9301 	mov	a,@r0
      00348D 13               [12] 9302 	rrc	a
      00348E F6               [12] 9303 	mov	@r0,a
      00348F 18               [12] 9304 	dec	r0
      003490 E6               [12] 9305 	mov	a,@r0
      003491 13               [12] 9306 	rrc	a
      003492 F6               [12] 9307 	mov	@r0,a
      003493 E5*00            [12] 9308 	mov	a,_bp
      003495 24 1A            [12] 9309 	add	a,#0x1a
      003497 F8               [12] 9310 	mov	r0,a
      003498 E6               [12] 9311 	mov	a,@r0
      003499 08               [12] 9312 	inc	r0
      00349A 46               [12] 9313 	orl	a,@r0
      00349B 08               [12] 9314 	inc	r0
      00349C 46               [12] 9315 	orl	a,@r0
      00349D 08               [12] 9316 	inc	r0
      00349E 46               [12] 9317 	orl	a,@r0
      00349F 70 9B            [24] 9318 	jnz	00156$
                                   9319 ;	calc.c:421: if (n > 0) printall(vals[1]);
      0034A1                       9320 00108$:
                                   9321 ;	calc.c:422: printstr("\r\nSSTOP0\t");
      0034A1 7Dr08            [12] 9322 	mov	r5,#___str_20
      0034A3 7Es01            [12] 9323 	mov	r6,#(___str_20 >> 8)
      0034A5 7F 80            [12] 9324 	mov	r7,#0x80
                                   9325 ;	calc.c:59: return;
      0034A7                       9326 00159$:
                                   9327 ;	calc.c:57: for (; *s; s++) putchar(*s);
      0034A7 8D 82            [24] 9328 	mov	dpl,r5
      0034A9 8E 83            [24] 9329 	mov	dph,r6
      0034AB 8F F0            [24] 9330 	mov	b,r7
      0034AD 12r00r00         [24] 9331 	lcall	__gptrget
      0034B0 FC               [12] 9332 	mov	r4,a
      0034B1 60 10            [24] 9333 	jz	00132$
      0034B3 7B 00            [12] 9334 	mov	r3,#0x00
      0034B5 8C 82            [24] 9335 	mov	dpl,r4
      0034B7 8B 83            [24] 9336 	mov	dph,r3
      0034B9 12r00r00         [24] 9337 	lcall	_putchar
      0034BC 0D               [12] 9338 	inc	r5
                                   9339 ;	calc.c:422: printstr("\r\nSSTOP0\t");
      0034BD BD 00 E7         [24] 9340 	cjne	r5,#0x00,00159$
      0034C0 0E               [12] 9341 	inc	r6
      0034C1 80 E4            [24] 9342 	sjmp	00159$
      0034C3                       9343 00132$:
                                   9344 ;	calc.c:423: if (n > 1) printall(vals[0]);
      0034C3 E5*00            [12] 9345 	mov	a,_bp
      0034C5 24 0C            [12] 9346 	add	a,#0x0c
      0034C7 F8               [12] 9347 	mov	r0,a
      0034C8 C3               [12] 9348 	clr	c
      0034C9 74 01            [12] 9349 	mov	a,#0x01
      0034CB 96               [12] 9350 	subb	a,@r0
      0034CC 74 80            [12] 9351 	mov	a,#(0x00 ^ 0x80)
      0034CE 08               [12] 9352 	inc	r0
      0034CF 86 F0            [24] 9353 	mov	b,@r0
      0034D1 63 F0 80         [24] 9354 	xrl	b,#0x80
      0034D4 95 F0            [12] 9355 	subb	a,b
      0034D6 40 03            [24] 9356 	jc	00341$
      0034D8 02r35rEC         [24] 9357 	ljmp	00110$
      0034DB                       9358 00341$:
      0034DB 87 04            [24] 9359 	mov	ar4,@r1
      0034DD 09               [12] 9360 	inc	r1
      0034DE 87 05            [24] 9361 	mov	ar5,@r1
      0034E0 09               [12] 9362 	inc	r1
      0034E1 87 06            [24] 9363 	mov	ar6,@r1
      0034E3 09               [12] 9364 	inc	r1
      0034E4 87 07            [24] 9365 	mov	ar7,@r1
                                   9366 ;	calc.c:72: printf("%08lx\t", d);
      0034E6 C0 07            [24] 9367 	push	ar7
      0034E8 C0 06            [24] 9368 	push	ar6
      0034EA C0 05            [24] 9369 	push	ar5
      0034EC C0 04            [24] 9370 	push	ar4
      0034EE C0 04            [24] 9371 	push	ar4
      0034F0 C0 05            [24] 9372 	push	ar5
      0034F2 C0 06            [24] 9373 	push	ar6
      0034F4 C0 07            [24] 9374 	push	ar7
      0034F6 74r00            [12] 9375 	mov	a,#___str_0
      0034F8 C0 E0            [24] 9376 	push	acc
      0034FA 74s00            [12] 9377 	mov	a,#(___str_0 >> 8)
      0034FC C0 E0            [24] 9378 	push	acc
      0034FE 74 80            [12] 9379 	mov	a,#0x80
      003500 C0 E0            [24] 9380 	push	acc
      003502 12r00r00         [24] 9381 	lcall	_printf
      003505 E5 81            [12] 9382 	mov	a,sp
      003507 24 F9            [12] 9383 	add	a,#0xf9
      003509 F5 81            [12] 9384 	mov	sp,a
      00350B D0 04            [24] 9385 	pop	ar4
      00350D D0 05            [24] 9386 	pop	ar5
      00350F D0 06            [24] 9387 	pop	ar6
      003511 D0 07            [24] 9388 	pop	ar7
                                   9389 ;	calc.c:73: printf("% 11ld\t", d);
      003513 C0 07            [24] 9390 	push	ar7
      003515 C0 06            [24] 9391 	push	ar6
      003517 C0 05            [24] 9392 	push	ar5
      003519 C0 04            [24] 9393 	push	ar4
      00351B C0 04            [24] 9394 	push	ar4
      00351D C0 05            [24] 9395 	push	ar5
      00351F C0 06            [24] 9396 	push	ar6
      003521 C0 07            [24] 9397 	push	ar7
      003523 74r07            [12] 9398 	mov	a,#___str_1
      003525 C0 E0            [24] 9399 	push	acc
      003527 74s00            [12] 9400 	mov	a,#(___str_1 >> 8)
      003529 C0 E0            [24] 9401 	push	acc
      00352B 74 80            [12] 9402 	mov	a,#0x80
      00352D C0 E0            [24] 9403 	push	acc
      00352F 12r00r00         [24] 9404 	lcall	_printf
      003532 E5 81            [12] 9405 	mov	a,sp
      003534 24 F9            [12] 9406 	add	a,#0xf9
      003536 F5 81            [12] 9407 	mov	sp,a
      003538 D0 04            [24] 9408 	pop	ar4
      00353A D0 05            [24] 9409 	pop	ar5
      00353C D0 06            [24] 9410 	pop	ar6
      00353E D0 07            [24] 9411 	pop	ar7
                                   9412 ;	calc.c:74: printf("%011lo\t", d);
      003540 C0 07            [24] 9413 	push	ar7
      003542 C0 06            [24] 9414 	push	ar6
      003544 C0 05            [24] 9415 	push	ar5
      003546 C0 04            [24] 9416 	push	ar4
      003548 C0 04            [24] 9417 	push	ar4
      00354A C0 05            [24] 9418 	push	ar5
      00354C C0 06            [24] 9419 	push	ar6
      00354E C0 07            [24] 9420 	push	ar7
      003550 74r0F            [12] 9421 	mov	a,#___str_2
      003552 C0 E0            [24] 9422 	push	acc
      003554 74s00            [12] 9423 	mov	a,#(___str_2 >> 8)
      003556 C0 E0            [24] 9424 	push	acc
      003558 74 80            [12] 9425 	mov	a,#0x80
      00355A C0 E0            [24] 9426 	push	acc
      00355C 12r00r00         [24] 9427 	lcall	_printf
      00355F E5 81            [12] 9428 	mov	a,sp
      003561 24 F9            [12] 9429 	add	a,#0xf9
      003563 F5 81            [12] 9430 	mov	sp,a
      003565 D0 04            [24] 9431 	pop	ar4
      003567 D0 05            [24] 9432 	pop	ar5
      003569 D0 06            [24] 9433 	pop	ar6
      00356B D0 07            [24] 9434 	pop	ar7
                                   9435 ;	calc.c:75: printbin(d);
      00356D E5*00            [12] 9436 	mov	a,_bp
      00356F 24 16            [12] 9437 	add	a,#0x16
      003571 F8               [12] 9438 	mov	r0,a
      003572 A6 04            [24] 9439 	mov	@r0,ar4
      003574 08               [12] 9440 	inc	r0
      003575 A6 05            [24] 9441 	mov	@r0,ar5
      003577 08               [12] 9442 	inc	r0
      003578 A6 06            [24] 9443 	mov	@r0,ar6
      00357A 08               [12] 9444 	inc	r0
      00357B A6 07            [24] 9445 	mov	@r0,ar7
                                   9446 ;	calc.c:65: for (mask = 0x80000000lu; mask; mask >>= 1)
      00357D E5*00            [12] 9447 	mov	a,_bp
      00357F 24 1A            [12] 9448 	add	a,#0x1a
      003581 F8               [12] 9449 	mov	r0,a
      003582 E4               [12] 9450 	clr	a
      003583 F6               [12] 9451 	mov	@r0,a
      003584 08               [12] 9452 	inc	r0
      003585 F6               [12] 9453 	mov	@r0,a
      003586 08               [12] 9454 	inc	r0
      003587 F6               [12] 9455 	mov	@r0,a
      003588 08               [12] 9456 	inc	r0
      003589 76 80            [12] 9457 	mov	@r0,#0x80
      00358B                       9458 00161$:
                                   9459 ;	calc.c:66: (void)putchar((d & mask) ? (int)'1' : (int)'0');
      00358B E5*00            [12] 9460 	mov	a,_bp
      00358D 24 16            [12] 9461 	add	a,#0x16
      00358F F8               [12] 9462 	mov	r0,a
      003590 86 04            [24] 9463 	mov	ar4,@r0
      003592 08               [12] 9464 	inc	r0
      003593 86 05            [24] 9465 	mov	ar5,@r0
      003595 08               [12] 9466 	inc	r0
      003596 86 06            [24] 9467 	mov	ar6,@r0
      003598 08               [12] 9468 	inc	r0
      003599 86 07            [24] 9469 	mov	ar7,@r0
      00359B E5*00            [12] 9470 	mov	a,_bp
      00359D 24 1A            [12] 9471 	add	a,#0x1a
      00359F F8               [12] 9472 	mov	r0,a
      0035A0 E6               [12] 9473 	mov	a,@r0
      0035A1 52 04            [12] 9474 	anl	ar4,a
      0035A3 08               [12] 9475 	inc	r0
      0035A4 E6               [12] 9476 	mov	a,@r0
      0035A5 52 05            [12] 9477 	anl	ar5,a
      0035A7 08               [12] 9478 	inc	r0
      0035A8 E6               [12] 9479 	mov	a,@r0
      0035A9 52 06            [12] 9480 	anl	ar6,a
      0035AB 08               [12] 9481 	inc	r0
      0035AC E6               [12] 9482 	mov	a,@r0
      0035AD 52 07            [12] 9483 	anl	ar7,a
      0035AF EC               [12] 9484 	mov	a,r4
      0035B0 4D               [12] 9485 	orl	a,r5
      0035B1 4E               [12] 9486 	orl	a,r6
      0035B2 4F               [12] 9487 	orl	a,r7
      0035B3 60 06            [24] 9488 	jz	00176$
      0035B5 7E 31            [12] 9489 	mov	r6,#0x31
      0035B7 7F 00            [12] 9490 	mov	r7,#0x00
      0035B9 80 04            [24] 9491 	sjmp	00177$
      0035BB                       9492 00176$:
      0035BB 7E 30            [12] 9493 	mov	r6,#0x30
      0035BD 7F 00            [12] 9494 	mov	r7,#0x00
      0035BF                       9495 00177$:
      0035BF 8E 82            [24] 9496 	mov	dpl,r6
      0035C1 8F 83            [24] 9497 	mov	dph,r7
      0035C3 12r00r00         [24] 9498 	lcall	_putchar
                                   9499 ;	calc.c:65: for (mask = 0x80000000lu; mask; mask >>= 1)
      0035C6 E5*00            [12] 9500 	mov	a,_bp
      0035C8 24 1A            [12] 9501 	add	a,#0x1a
      0035CA F8               [12] 9502 	mov	r0,a
      0035CB 08               [12] 9503 	inc	r0
      0035CC 08               [12] 9504 	inc	r0
      0035CD 08               [12] 9505 	inc	r0
      0035CE E6               [12] 9506 	mov	a,@r0
      0035CF C3               [12] 9507 	clr	c
      0035D0 13               [12] 9508 	rrc	a
      0035D1 F6               [12] 9509 	mov	@r0,a
      0035D2 18               [12] 9510 	dec	r0
      0035D3 E6               [12] 9511 	mov	a,@r0
      0035D4 13               [12] 9512 	rrc	a
      0035D5 F6               [12] 9513 	mov	@r0,a
      0035D6 18               [12] 9514 	dec	r0
      0035D7 E6               [12] 9515 	mov	a,@r0
      0035D8 13               [12] 9516 	rrc	a
      0035D9 F6               [12] 9517 	mov	@r0,a
      0035DA 18               [12] 9518 	dec	r0
      0035DB E6               [12] 9519 	mov	a,@r0
      0035DC 13               [12] 9520 	rrc	a
      0035DD F6               [12] 9521 	mov	@r0,a
      0035DE E5*00            [12] 9522 	mov	a,_bp
      0035E0 24 1A            [12] 9523 	add	a,#0x1a
      0035E2 F8               [12] 9524 	mov	r0,a
      0035E3 E6               [12] 9525 	mov	a,@r0
      0035E4 08               [12] 9526 	inc	r0
      0035E5 46               [12] 9527 	orl	a,@r0
      0035E6 08               [12] 9528 	inc	r0
      0035E7 46               [12] 9529 	orl	a,@r0
      0035E8 08               [12] 9530 	inc	r0
      0035E9 46               [12] 9531 	orl	a,@r0
      0035EA 70 9F            [24] 9532 	jnz	00161$
                                   9533 ;	calc.c:423: if (n > 1) printall(vals[0]);
      0035EC                       9534 00110$:
                                   9535 ;	calc.c:424: printstr("\r\n");
      0035EC 7Dr17            [12] 9536 	mov	r5,#___str_3
      0035EE 7Es00            [12] 9537 	mov	r6,#(___str_3 >> 8)
      0035F0 7F 80            [12] 9538 	mov	r7,#0x80
                                   9539 ;	calc.c:59: return;
      0035F2                       9540 00164$:
                                   9541 ;	calc.c:57: for (; *s; s++) putchar(*s);
      0035F2 8D 82            [24] 9542 	mov	dpl,r5
      0035F4 8E 83            [24] 9543 	mov	dph,r6
      0035F6 8F F0            [24] 9544 	mov	b,r7
      0035F8 12r00r00         [24] 9545 	lcall	__gptrget
      0035FB FC               [12] 9546 	mov	r4,a
      0035FC 60 10            [24] 9547 	jz	00137$
      0035FE 7B 00            [12] 9548 	mov	r3,#0x00
      003600 8C 82            [24] 9549 	mov	dpl,r4
      003602 8B 83            [24] 9550 	mov	dph,r3
      003604 12r00r00         [24] 9551 	lcall	_putchar
      003607 0D               [12] 9552 	inc	r5
                                   9553 ;	calc.c:424: printstr("\r\n");
      003608 BD 00 E7         [24] 9554 	cjne	r5,#0x00,00164$
      00360B 0E               [12] 9555 	inc	r6
      00360C 80 E4            [24] 9556 	sjmp	00164$
      00360E                       9557 00137$:
                                   9558 ;	calc.c:426: return 1;
      00360E 90 00 01         [24] 9559 	mov	dptr,#0x0001
                                   9560 ;	calc.c:427: }
      003611 85*00 81         [24] 9561 	mov	sp,_bp
      003614 D0*00            [24] 9562 	pop	_bp
      003616 22               [24] 9563 	ret
                                   9564 ;------------------------------------------------------------
                                   9565 ;Allocation info for local variables in function 'help'
                                   9566 ;------------------------------------------------------------
                                   9567 ;delta                     Allocated to stack - _bp -5
                                   9568 ;_ctx                      Allocated to registers 
                                   9569 ;__1310720151              Allocated to registers 
                                   9570 ;s                         Allocated to registers r5 r6 r7 
                                   9571 ;__1310720153              Allocated to registers 
                                   9572 ;s                         Allocated to registers r5 r6 r7 
                                   9573 ;__1310720155              Allocated to registers 
                                   9574 ;s                         Allocated to registers r5 r6 r7 
                                   9575 ;__1310720157              Allocated to registers 
                                   9576 ;s                         Allocated to registers r5 r6 r7 
                                   9577 ;__1310720159              Allocated to registers 
                                   9578 ;s                         Allocated to registers r5 r6 r7 
                                   9579 ;__1310720161              Allocated to registers 
                                   9580 ;s                         Allocated to registers r5 r6 r7 
                                   9581 ;__1310720163              Allocated to registers 
                                   9582 ;s                         Allocated to registers r5 r6 r7 
                                   9583 ;__1310720165              Allocated to registers 
                                   9584 ;s                         Allocated to registers r5 r6 r7 
                                   9585 ;__1310720167              Allocated to registers 
                                   9586 ;s                         Allocated to registers r5 r6 r7 
                                   9587 ;__1310720169              Allocated to registers 
                                   9588 ;s                         Allocated to registers r5 r6 r7 
                                   9589 ;__1310720171              Allocated to registers 
                                   9590 ;s                         Allocated to registers r5 r6 r7 
                                   9591 ;__1310720173              Allocated to registers 
                                   9592 ;s                         Allocated to registers r5 r6 r7 
                                   9593 ;__1310720175              Allocated to registers 
                                   9594 ;s                         Allocated to registers r5 r6 r7 
                                   9595 ;__1310720177              Allocated to registers 
                                   9596 ;s                         Allocated to registers r5 r6 r7 
                                   9597 ;__1310720179              Allocated to registers 
                                   9598 ;s                         Allocated to registers r5 r6 r7 
                                   9599 ;__1310720181              Allocated to registers 
                                   9600 ;s                         Allocated to registers r5 r6 r7 
                                   9601 ;__1310720183              Allocated to registers 
                                   9602 ;s                         Allocated to registers r5 r6 r7 
                                   9603 ;__1310720185              Allocated to registers 
                                   9604 ;s                         Allocated to registers r5 r6 r7 
                                   9605 ;__1310720187              Allocated to registers 
                                   9606 ;s                         Allocated to registers r5 r6 r7 
                                   9607 ;__1310720189              Allocated to registers 
                                   9608 ;s                         Allocated to registers r5 r6 r7 
                                   9609 ;__1310720191              Allocated to registers 
                                   9610 ;s                         Allocated to registers r5 r6 r7 
                                   9611 ;__1310720193              Allocated to registers 
                                   9612 ;s                         Allocated to registers r5 r6 r7 
                                   9613 ;__1310720195              Allocated to registers 
                                   9614 ;s                         Allocated to registers r5 r6 r7 
                                   9615 ;__1310720197              Allocated to registers 
                                   9616 ;s                         Allocated to registers r5 r6 r7 
                                   9617 ;__1310720199              Allocated to registers 
                                   9618 ;s                         Allocated to registers r5 r6 r7 
                                   9619 ;__1310720201              Allocated to registers 
                                   9620 ;s                         Allocated to registers r5 r6 r7 
                                   9621 ;__1310720203              Allocated to registers 
                                   9622 ;s                         Allocated to registers r5 r6 r7 
                                   9623 ;__1310720205              Allocated to registers 
                                   9624 ;s                         Allocated to registers r5 r6 r7 
                                   9625 ;__1310720207              Allocated to registers 
                                   9626 ;s                         Allocated to registers r5 r6 r7 
                                   9627 ;__1310720209              Allocated to registers 
                                   9628 ;s                         Allocated to registers r5 r6 r7 
                                   9629 ;__1310720211              Allocated to registers 
                                   9630 ;s                         Allocated to registers r5 r6 r7 
                                   9631 ;------------------------------------------------------------
                                   9632 ;	calc.c:429: static int help(void *_ctx, delta_t *delta) __reentrant {
                                   9633 ;	-----------------------------------------
                                   9634 ;	 function help
                                   9635 ;	-----------------------------------------
      003617                       9636 _help:
      003617 C0*00            [24] 9637 	push	_bp
      003619 85 81*00         [24] 9638 	mov	_bp,sp
                                   9639 ;	calc.c:433: printstr("\r\nHhOo\tbase 16 10 8 2\r\n");
      00361C 7Dr12            [12] 9640 	mov	r5,#___str_21
      00361E 7Es01            [12] 9641 	mov	r6,#(___str_21 >> 8)
      003620 7F 80            [12] 9642 	mov	r7,#0x80
                                   9643 ;	calc.c:59: return;
      003622                       9644 00164$:
                                   9645 ;	calc.c:57: for (; *s; s++) putchar(*s);
      003622 8D 82            [24] 9646 	mov	dpl,r5
      003624 8E 83            [24] 9647 	mov	dph,r6
      003626 8F F0            [24] 9648 	mov	b,r7
      003628 12r00r00         [24] 9649 	lcall	__gptrget
      00362B FC               [12] 9650 	mov	r4,a
      00362C 60 10            [24] 9651 	jz	00102$
      00362E 7B 00            [12] 9652 	mov	r3,#0x00
      003630 8C 82            [24] 9653 	mov	dpl,r4
      003632 8B 83            [24] 9654 	mov	dph,r3
      003634 12r00r00         [24] 9655 	lcall	_putchar
      003637 0D               [12] 9656 	inc	r5
                                   9657 ;	calc.c:433: printstr("\r\nHhOo\tbase 16 10 8 2\r\n");
      003638 BD 00 E7         [24] 9658 	cjne	r5,#0x00,00164$
      00363B 0E               [12] 9659 	inc	r6
      00363C 80 E4            [24] 9660 	sjmp	00164$
      00363E                       9661 00102$:
                                   9662 ;	calc.c:434: printstr("p.\tpop top\r\n");
      00363E 7Dr2A            [12] 9663 	mov	r5,#___str_22
      003640 7Es01            [12] 9664 	mov	r6,#(___str_22 >> 8)
      003642 7F 80            [12] 9665 	mov	r7,#0x80
                                   9666 ;	calc.c:59: return;
      003644                       9667 00167$:
                                   9668 ;	calc.c:57: for (; *s; s++) putchar(*s);
      003644 8D 82            [24] 9669 	mov	dpl,r5
      003646 8E 83            [24] 9670 	mov	dph,r6
      003648 8F F0            [24] 9671 	mov	b,r7
      00364A 12r00r00         [24] 9672 	lcall	__gptrget
      00364D FC               [12] 9673 	mov	r4,a
      00364E 60 10            [24] 9674 	jz	00104$
      003650 7B 00            [12] 9675 	mov	r3,#0x00
      003652 8C 82            [24] 9676 	mov	dpl,r4
      003654 8B 83            [24] 9677 	mov	dph,r3
      003656 12r00r00         [24] 9678 	lcall	_putchar
      003659 0D               [12] 9679 	inc	r5
                                   9680 ;	calc.c:434: printstr("p.\tpop top\r\n");
      00365A BD 00 E7         [24] 9681 	cjne	r5,#0x00,00167$
      00365D 0E               [12] 9682 	inc	r6
      00365E 80 E4            [24] 9683 	sjmp	00167$
      003660                       9684 00104$:
                                   9685 ;	calc.c:435: printstr("P\tpop stack\r\n");
      003660 7Dr37            [12] 9686 	mov	r5,#___str_23
      003662 7Es01            [12] 9687 	mov	r6,#(___str_23 >> 8)
      003664 7F 80            [12] 9688 	mov	r7,#0x80
                                   9689 ;	calc.c:59: return;
      003666                       9690 00170$:
                                   9691 ;	calc.c:57: for (; *s; s++) putchar(*s);
      003666 8D 82            [24] 9692 	mov	dpl,r5
      003668 8E 83            [24] 9693 	mov	dph,r6
      00366A 8F F0            [24] 9694 	mov	b,r7
      00366C 12r00r00         [24] 9695 	lcall	__gptrget
      00366F FC               [12] 9696 	mov	r4,a
      003670 60 10            [24] 9697 	jz	00106$
      003672 7B 00            [12] 9698 	mov	r3,#0x00
      003674 8C 82            [24] 9699 	mov	dpl,r4
      003676 8B 83            [24] 9700 	mov	dph,r3
      003678 12r00r00         [24] 9701 	lcall	_putchar
      00367B 0D               [12] 9702 	inc	r5
                                   9703 ;	calc.c:435: printstr("P\tpop stack\r\n");
      00367C BD 00 E7         [24] 9704 	cjne	r5,#0x00,00170$
      00367F 0E               [12] 9705 	inc	r6
      003680 80 E4            [24] 9706 	sjmp	00170$
      003682                       9707 00106$:
                                   9708 ;	calc.c:436: printstr("v\tpeek top\r\n");
      003682 7Dr45            [12] 9709 	mov	r5,#___str_24
      003684 7Es01            [12] 9710 	mov	r6,#(___str_24 >> 8)
      003686 7F 80            [12] 9711 	mov	r7,#0x80
                                   9712 ;	calc.c:59: return;
      003688                       9713 00173$:
                                   9714 ;	calc.c:57: for (; *s; s++) putchar(*s);
      003688 8D 82            [24] 9715 	mov	dpl,r5
      00368A 8E 83            [24] 9716 	mov	dph,r6
      00368C 8F F0            [24] 9717 	mov	b,r7
      00368E 12r00r00         [24] 9718 	lcall	__gptrget
      003691 FC               [12] 9719 	mov	r4,a
      003692 60 10            [24] 9720 	jz	00108$
      003694 7B 00            [12] 9721 	mov	r3,#0x00
      003696 8C 82            [24] 9722 	mov	dpl,r4
      003698 8B 83            [24] 9723 	mov	dph,r3
      00369A 12r00r00         [24] 9724 	lcall	_putchar
      00369D 0D               [12] 9725 	inc	r5
                                   9726 ;	calc.c:436: printstr("v\tpeek top\r\n");
      00369E BD 00 E7         [24] 9727 	cjne	r5,#0x00,00173$
      0036A1 0E               [12] 9728 	inc	r6
      0036A2 80 E4            [24] 9729 	sjmp	00173$
      0036A4                       9730 00108$:
                                   9731 ;	calc.c:437: printstr("V\tpeek stack\r\n");
      0036A4 7Dr52            [12] 9732 	mov	r5,#___str_25
      0036A6 7Es01            [12] 9733 	mov	r6,#(___str_25 >> 8)
      0036A8 7F 80            [12] 9734 	mov	r7,#0x80
                                   9735 ;	calc.c:59: return;
      0036AA                       9736 00176$:
                                   9737 ;	calc.c:57: for (; *s; s++) putchar(*s);
      0036AA 8D 82            [24] 9738 	mov	dpl,r5
      0036AC 8E 83            [24] 9739 	mov	dph,r6
      0036AE 8F F0            [24] 9740 	mov	b,r7
      0036B0 12r00r00         [24] 9741 	lcall	__gptrget
      0036B3 FC               [12] 9742 	mov	r4,a
      0036B4 60 10            [24] 9743 	jz	00110$
      0036B6 7B 00            [12] 9744 	mov	r3,#0x00
      0036B8 8C 82            [24] 9745 	mov	dpl,r4
      0036BA 8B 83            [24] 9746 	mov	dph,r3
      0036BC 12r00r00         [24] 9747 	lcall	_putchar
      0036BF 0D               [12] 9748 	inc	r5
                                   9749 ;	calc.c:437: printstr("V\tpeek stack\r\n");
      0036C0 BD 00 E7         [24] 9750 	cjne	r5,#0x00,00176$
      0036C3 0E               [12] 9751 	inc	r6
      0036C4 80 E4            [24] 9752 	sjmp	00176$
      0036C6                       9753 00110$:
                                   9754 ;	calc.c:438: printstr("i\treset acc\r\n");
      0036C6 7Dr61            [12] 9755 	mov	r5,#___str_26
      0036C8 7Es01            [12] 9756 	mov	r6,#(___str_26 >> 8)
      0036CA 7F 80            [12] 9757 	mov	r7,#0x80
                                   9758 ;	calc.c:59: return;
      0036CC                       9759 00179$:
                                   9760 ;	calc.c:57: for (; *s; s++) putchar(*s);
      0036CC 8D 82            [24] 9761 	mov	dpl,r5
      0036CE 8E 83            [24] 9762 	mov	dph,r6
      0036D0 8F F0            [24] 9763 	mov	b,r7
      0036D2 12r00r00         [24] 9764 	lcall	__gptrget
      0036D5 FC               [12] 9765 	mov	r4,a
      0036D6 60 10            [24] 9766 	jz	00112$
      0036D8 7B 00            [12] 9767 	mov	r3,#0x00
      0036DA 8C 82            [24] 9768 	mov	dpl,r4
      0036DC 8B 83            [24] 9769 	mov	dph,r3
      0036DE 12r00r00         [24] 9770 	lcall	_putchar
      0036E1 0D               [12] 9771 	inc	r5
                                   9772 ;	calc.c:438: printstr("i\treset acc\r\n");
      0036E2 BD 00 E7         [24] 9773 	cjne	r5,#0x00,00179$
      0036E5 0E               [12] 9774 	inc	r6
      0036E6 80 E4            [24] 9775 	sjmp	00179$
      0036E8                       9776 00112$:
                                   9777 ;	calc.c:439: printstr("I\treset and discard acc\r\n");
      0036E8 7Dr6F            [12] 9778 	mov	r5,#___str_27
      0036EA 7Es01            [12] 9779 	mov	r6,#(___str_27 >> 8)
      0036EC 7F 80            [12] 9780 	mov	r7,#0x80
                                   9781 ;	calc.c:59: return;
      0036EE                       9782 00182$:
                                   9783 ;	calc.c:57: for (; *s; s++) putchar(*s);
      0036EE 8D 82            [24] 9784 	mov	dpl,r5
      0036F0 8E 83            [24] 9785 	mov	dph,r6
      0036F2 8F F0            [24] 9786 	mov	b,r7
      0036F4 12r00r00         [24] 9787 	lcall	__gptrget
      0036F7 FC               [12] 9788 	mov	r4,a
      0036F8 60 10            [24] 9789 	jz	00114$
      0036FA 7B 00            [12] 9790 	mov	r3,#0x00
      0036FC 8C 82            [24] 9791 	mov	dpl,r4
      0036FE 8B 83            [24] 9792 	mov	dph,r3
      003700 12r00r00         [24] 9793 	lcall	_putchar
      003703 0D               [12] 9794 	inc	r5
                                   9795 ;	calc.c:439: printstr("I\treset and discard acc\r\n");
      003704 BD 00 E7         [24] 9796 	cjne	r5,#0x00,00182$
      003707 0E               [12] 9797 	inc	r6
      003708 80 E4            [24] 9798 	sjmp	00182$
      00370A                       9799 00114$:
                                   9800 ;	calc.c:440: printstr("x\texchange top 2\r\n");
      00370A 7Dr89            [12] 9801 	mov	r5,#___str_28
      00370C 7Es01            [12] 9802 	mov	r6,#(___str_28 >> 8)
      00370E 7F 80            [12] 9803 	mov	r7,#0x80
                                   9804 ;	calc.c:59: return;
      003710                       9805 00185$:
                                   9806 ;	calc.c:57: for (; *s; s++) putchar(*s);
      003710 8D 82            [24] 9807 	mov	dpl,r5
      003712 8E 83            [24] 9808 	mov	dph,r6
      003714 8F F0            [24] 9809 	mov	b,r7
      003716 12r00r00         [24] 9810 	lcall	__gptrget
      003719 FC               [12] 9811 	mov	r4,a
      00371A 60 10            [24] 9812 	jz	00116$
      00371C 7B 00            [12] 9813 	mov	r3,#0x00
      00371E 8C 82            [24] 9814 	mov	dpl,r4
      003720 8B 83            [24] 9815 	mov	dph,r3
      003722 12r00r00         [24] 9816 	lcall	_putchar
      003725 0D               [12] 9817 	inc	r5
                                   9818 ;	calc.c:440: printstr("x\texchange top 2\r\n");
      003726 BD 00 E7         [24] 9819 	cjne	r5,#0x00,00185$
      003729 0E               [12] 9820 	inc	r6
      00372A 80 E4            [24] 9821 	sjmp	00185$
      00372C                       9822 00116$:
                                   9823 ;	calc.c:441: printstr("X\texchange stacks primary <-> secondary\r\n");
      00372C 7Dr9C            [12] 9824 	mov	r5,#___str_29
      00372E 7Es01            [12] 9825 	mov	r6,#(___str_29 >> 8)
      003730 7F 80            [12] 9826 	mov	r7,#0x80
                                   9827 ;	calc.c:59: return;
      003732                       9828 00188$:
                                   9829 ;	calc.c:57: for (; *s; s++) putchar(*s);
      003732 8D 82            [24] 9830 	mov	dpl,r5
      003734 8E 83            [24] 9831 	mov	dph,r6
      003736 8F F0            [24] 9832 	mov	b,r7
      003738 12r00r00         [24] 9833 	lcall	__gptrget
      00373B FC               [12] 9834 	mov	r4,a
      00373C 60 10            [24] 9835 	jz	00118$
      00373E 7B 00            [12] 9836 	mov	r3,#0x00
      003740 8C 82            [24] 9837 	mov	dpl,r4
      003742 8B 83            [24] 9838 	mov	dph,r3
      003744 12r00r00         [24] 9839 	lcall	_putchar
      003747 0D               [12] 9840 	inc	r5
                                   9841 ;	calc.c:441: printstr("X\texchange stacks primary <-> secondary\r\n");
      003748 BD 00 E7         [24] 9842 	cjne	r5,#0x00,00188$
      00374B 0E               [12] 9843 	inc	r6
      00374C 80 E4            [24] 9844 	sjmp	00188$
      00374E                       9845 00118$:
                                   9846 ;	calc.c:442: printstr("T\texchange tops primary <-> secondary\r\n");
      00374E 7DrC6            [12] 9847 	mov	r5,#___str_30
      003750 7Es01            [12] 9848 	mov	r6,#(___str_30 >> 8)
      003752 7F 80            [12] 9849 	mov	r7,#0x80
                                   9850 ;	calc.c:59: return;
      003754                       9851 00191$:
                                   9852 ;	calc.c:57: for (; *s; s++) putchar(*s);
      003754 8D 82            [24] 9853 	mov	dpl,r5
      003756 8E 83            [24] 9854 	mov	dph,r6
      003758 8F F0            [24] 9855 	mov	b,r7
      00375A 12r00r00         [24] 9856 	lcall	__gptrget
      00375D FC               [12] 9857 	mov	r4,a
      00375E 60 10            [24] 9858 	jz	00120$
      003760 7B 00            [12] 9859 	mov	r3,#0x00
      003762 8C 82            [24] 9860 	mov	dpl,r4
      003764 8B 83            [24] 9861 	mov	dph,r3
      003766 12r00r00         [24] 9862 	lcall	_putchar
      003769 0D               [12] 9863 	inc	r5
                                   9864 ;	calc.c:442: printstr("T\texchange tops primary <-> secondary\r\n");
      00376A BD 00 E7         [24] 9865 	cjne	r5,#0x00,00191$
      00376D 0E               [12] 9866 	inc	r6
      00376E 80 E4            [24] 9867 	sjmp	00191$
      003770                       9868 00120$:
                                   9869 ;	calc.c:443: printstr("U\tcopy top secondary -> primary\r\n");
      003770 7DrEE            [12] 9870 	mov	r5,#___str_31
      003772 7Es01            [12] 9871 	mov	r6,#(___str_31 >> 8)
      003774 7F 80            [12] 9872 	mov	r7,#0x80
                                   9873 ;	calc.c:59: return;
      003776                       9874 00194$:
                                   9875 ;	calc.c:57: for (; *s; s++) putchar(*s);
      003776 8D 82            [24] 9876 	mov	dpl,r5
      003778 8E 83            [24] 9877 	mov	dph,r6
      00377A 8F F0            [24] 9878 	mov	b,r7
      00377C 12r00r00         [24] 9879 	lcall	__gptrget
      00377F FC               [12] 9880 	mov	r4,a
      003780 60 10            [24] 9881 	jz	00122$
      003782 7B 00            [12] 9882 	mov	r3,#0x00
      003784 8C 82            [24] 9883 	mov	dpl,r4
      003786 8B 83            [24] 9884 	mov	dph,r3
      003788 12r00r00         [24] 9885 	lcall	_putchar
      00378B 0D               [12] 9886 	inc	r5
                                   9887 ;	calc.c:443: printstr("U\tcopy top secondary -> primary\r\n");
      00378C BD 00 E7         [24] 9888 	cjne	r5,#0x00,00194$
      00378F 0E               [12] 9889 	inc	r6
      003790 80 E4            [24] 9890 	sjmp	00194$
      003792                       9891 00122$:
                                   9892 ;	calc.c:444: printstr("u\tcopy top primary -> secondary\r\n");
      003792 7Dr10            [12] 9893 	mov	r5,#___str_32
      003794 7Es02            [12] 9894 	mov	r6,#(___str_32 >> 8)
      003796 7F 80            [12] 9895 	mov	r7,#0x80
                                   9896 ;	calc.c:59: return;
      003798                       9897 00197$:
                                   9898 ;	calc.c:57: for (; *s; s++) putchar(*s);
      003798 8D 82            [24] 9899 	mov	dpl,r5
      00379A 8E 83            [24] 9900 	mov	dph,r6
      00379C 8F F0            [24] 9901 	mov	b,r7
      00379E 12r00r00         [24] 9902 	lcall	__gptrget
      0037A1 FC               [12] 9903 	mov	r4,a
      0037A2 60 10            [24] 9904 	jz	00124$
      0037A4 7B 00            [12] 9905 	mov	r3,#0x00
      0037A6 8C 82            [24] 9906 	mov	dpl,r4
      0037A8 8B 83            [24] 9907 	mov	dph,r3
      0037AA 12r00r00         [24] 9908 	lcall	_putchar
      0037AD 0D               [12] 9909 	inc	r5
                                   9910 ;	calc.c:444: printstr("u\tcopy top primary -> secondary\r\n");
      0037AE BD 00 E7         [24] 9911 	cjne	r5,#0x00,00197$
      0037B1 0E               [12] 9912 	inc	r6
      0037B2 80 E4            [24] 9913 	sjmp	00197$
      0037B4                       9914 00124$:
                                   9915 ;	calc.c:445: printstr("M\tmove top secondary -> primary\r\n");
      0037B4 7Dr32            [12] 9916 	mov	r5,#___str_33
      0037B6 7Es02            [12] 9917 	mov	r6,#(___str_33 >> 8)
      0037B8 7F 80            [12] 9918 	mov	r7,#0x80
                                   9919 ;	calc.c:59: return;
      0037BA                       9920 00200$:
                                   9921 ;	calc.c:57: for (; *s; s++) putchar(*s);
      0037BA 8D 82            [24] 9922 	mov	dpl,r5
      0037BC 8E 83            [24] 9923 	mov	dph,r6
      0037BE 8F F0            [24] 9924 	mov	b,r7
      0037C0 12r00r00         [24] 9925 	lcall	__gptrget
      0037C3 FC               [12] 9926 	mov	r4,a
      0037C4 60 10            [24] 9927 	jz	00126$
      0037C6 7B 00            [12] 9928 	mov	r3,#0x00
      0037C8 8C 82            [24] 9929 	mov	dpl,r4
      0037CA 8B 83            [24] 9930 	mov	dph,r3
      0037CC 12r00r00         [24] 9931 	lcall	_putchar
      0037CF 0D               [12] 9932 	inc	r5
                                   9933 ;	calc.c:445: printstr("M\tmove top secondary -> primary\r\n");
      0037D0 BD 00 E7         [24] 9934 	cjne	r5,#0x00,00200$
      0037D3 0E               [12] 9935 	inc	r6
      0037D4 80 E4            [24] 9936 	sjmp	00200$
      0037D6                       9937 00126$:
                                   9938 ;	calc.c:446: printstr("m\tmove top primary -> secondary\r\n");
      0037D6 7Dr54            [12] 9939 	mov	r5,#___str_34
      0037D8 7Es02            [12] 9940 	mov	r6,#(___str_34 >> 8)
      0037DA 7F 80            [12] 9941 	mov	r7,#0x80
                                   9942 ;	calc.c:59: return;
      0037DC                       9943 00203$:
                                   9944 ;	calc.c:57: for (; *s; s++) putchar(*s);
      0037DC 8D 82            [24] 9945 	mov	dpl,r5
      0037DE 8E 83            [24] 9946 	mov	dph,r6
      0037E0 8F F0            [24] 9947 	mov	b,r7
      0037E2 12r00r00         [24] 9948 	lcall	__gptrget
      0037E5 FC               [12] 9949 	mov	r4,a
      0037E6 60 10            [24] 9950 	jz	00128$
      0037E8 7B 00            [12] 9951 	mov	r3,#0x00
      0037EA 8C 82            [24] 9952 	mov	dpl,r4
      0037EC 8B 83            [24] 9953 	mov	dph,r3
      0037EE 12r00r00         [24] 9954 	lcall	_putchar
      0037F1 0D               [12] 9955 	inc	r5
                                   9956 ;	calc.c:446: printstr("m\tmove top primary -> secondary\r\n");
      0037F2 BD 00 E7         [24] 9957 	cjne	r5,#0x00,00203$
      0037F5 0E               [12] 9958 	inc	r6
      0037F6 80 E4            [24] 9959 	sjmp	00203$
      0037F8                       9960 00128$:
                                   9961 ;	calc.c:447: printstr("+\tadd top 2\r\n");
      0037F8 7Dr76            [12] 9962 	mov	r5,#___str_35
      0037FA 7Es02            [12] 9963 	mov	r6,#(___str_35 >> 8)
      0037FC 7F 80            [12] 9964 	mov	r7,#0x80
                                   9965 ;	calc.c:59: return;
      0037FE                       9966 00206$:
                                   9967 ;	calc.c:57: for (; *s; s++) putchar(*s);
      0037FE 8D 82            [24] 9968 	mov	dpl,r5
      003800 8E 83            [24] 9969 	mov	dph,r6
      003802 8F F0            [24] 9970 	mov	b,r7
      003804 12r00r00         [24] 9971 	lcall	__gptrget
      003807 FC               [12] 9972 	mov	r4,a
      003808 60 10            [24] 9973 	jz	00130$
      00380A 7B 00            [12] 9974 	mov	r3,#0x00
      00380C 8C 82            [24] 9975 	mov	dpl,r4
      00380E 8B 83            [24] 9976 	mov	dph,r3
      003810 12r00r00         [24] 9977 	lcall	_putchar
      003813 0D               [12] 9978 	inc	r5
                                   9979 ;	calc.c:447: printstr("+\tadd top 2\r\n");
      003814 BD 00 E7         [24] 9980 	cjne	r5,#0x00,00206$
      003817 0E               [12] 9981 	inc	r6
      003818 80 E4            [24] 9982 	sjmp	00206$
      00381A                       9983 00130$:
                                   9984 ;	calc.c:448: printstr("-\tsubtract top 2\r\n");
      00381A 7Dr84            [12] 9985 	mov	r5,#___str_36
      00381C 7Es02            [12] 9986 	mov	r6,#(___str_36 >> 8)
      00381E 7F 80            [12] 9987 	mov	r7,#0x80
                                   9988 ;	calc.c:59: return;
      003820                       9989 00209$:
                                   9990 ;	calc.c:57: for (; *s; s++) putchar(*s);
      003820 8D 82            [24] 9991 	mov	dpl,r5
      003822 8E 83            [24] 9992 	mov	dph,r6
      003824 8F F0            [24] 9993 	mov	b,r7
      003826 12r00r00         [24] 9994 	lcall	__gptrget
      003829 FC               [12] 9995 	mov	r4,a
      00382A 60 10            [24] 9996 	jz	00132$
      00382C 7B 00            [12] 9997 	mov	r3,#0x00
      00382E 8C 82            [24] 9998 	mov	dpl,r4
      003830 8B 83            [24] 9999 	mov	dph,r3
      003832 12r00r00         [24]10000 	lcall	_putchar
      003835 0D               [12]10001 	inc	r5
                                  10002 ;	calc.c:448: printstr("-\tsubtract top 2\r\n");
      003836 BD 00 E7         [24]10003 	cjne	r5,#0x00,00209$
      003839 0E               [12]10004 	inc	r6
      00383A 80 E4            [24]10005 	sjmp	00209$
      00383C                      10006 00132$:
                                  10007 ;	calc.c:449: printstr("*\tmultiply top 2\r\n");
      00383C 7Dr97            [12]10008 	mov	r5,#___str_37
      00383E 7Es02            [12]10009 	mov	r6,#(___str_37 >> 8)
      003840 7F 80            [12]10010 	mov	r7,#0x80
                                  10011 ;	calc.c:59: return;
      003842                      10012 00212$:
                                  10013 ;	calc.c:57: for (; *s; s++) putchar(*s);
      003842 8D 82            [24]10014 	mov	dpl,r5
      003844 8E 83            [24]10015 	mov	dph,r6
      003846 8F F0            [24]10016 	mov	b,r7
      003848 12r00r00         [24]10017 	lcall	__gptrget
      00384B FC               [12]10018 	mov	r4,a
      00384C 60 10            [24]10019 	jz	00134$
      00384E 7B 00            [12]10020 	mov	r3,#0x00
      003850 8C 82            [24]10021 	mov	dpl,r4
      003852 8B 83            [24]10022 	mov	dph,r3
      003854 12r00r00         [24]10023 	lcall	_putchar
      003857 0D               [12]10024 	inc	r5
                                  10025 ;	calc.c:449: printstr("*\tmultiply top 2\r\n");
      003858 BD 00 E7         [24]10026 	cjne	r5,#0x00,00212$
      00385B 0E               [12]10027 	inc	r6
      00385C 80 E4            [24]10028 	sjmp	00212$
      00385E                      10029 00134$:
                                  10030 ;	calc.c:450: printstr("/\tdivide top 2\r\n");
      00385E 7DrAA            [12]10031 	mov	r5,#___str_38
      003860 7Es02            [12]10032 	mov	r6,#(___str_38 >> 8)
      003862 7F 80            [12]10033 	mov	r7,#0x80
                                  10034 ;	calc.c:59: return;
      003864                      10035 00215$:
                                  10036 ;	calc.c:57: for (; *s; s++) putchar(*s);
      003864 8D 82            [24]10037 	mov	dpl,r5
      003866 8E 83            [24]10038 	mov	dph,r6
      003868 8F F0            [24]10039 	mov	b,r7
      00386A 12r00r00         [24]10040 	lcall	__gptrget
      00386D FC               [12]10041 	mov	r4,a
      00386E 60 10            [24]10042 	jz	00136$
      003870 7B 00            [12]10043 	mov	r3,#0x00
      003872 8C 82            [24]10044 	mov	dpl,r4
      003874 8B 83            [24]10045 	mov	dph,r3
      003876 12r00r00         [24]10046 	lcall	_putchar
      003879 0D               [12]10047 	inc	r5
                                  10048 ;	calc.c:450: printstr("/\tdivide top 2\r\n");
      00387A BD 00 E7         [24]10049 	cjne	r5,#0x00,00215$
      00387D 0E               [12]10050 	inc	r6
      00387E 80 E4            [24]10051 	sjmp	00215$
      003880                      10052 00136$:
                                  10053 ;	calc.c:451: printstr("\\\tdivide top 2 unsigned\r\n");	
      003880 7DrBB            [12]10054 	mov	r5,#___str_39
      003882 7Es02            [12]10055 	mov	r6,#(___str_39 >> 8)
      003884 7F 80            [12]10056 	mov	r7,#0x80
                                  10057 ;	calc.c:59: return;
      003886                      10058 00218$:
                                  10059 ;	calc.c:57: for (; *s; s++) putchar(*s);
      003886 8D 82            [24]10060 	mov	dpl,r5
      003888 8E 83            [24]10061 	mov	dph,r6
      00388A 8F F0            [24]10062 	mov	b,r7
      00388C 12r00r00         [24]10063 	lcall	__gptrget
      00388F FC               [12]10064 	mov	r4,a
      003890 60 10            [24]10065 	jz	00138$
      003892 7B 00            [12]10066 	mov	r3,#0x00
      003894 8C 82            [24]10067 	mov	dpl,r4
      003896 8B 83            [24]10068 	mov	dph,r3
      003898 12r00r00         [24]10069 	lcall	_putchar
      00389B 0D               [12]10070 	inc	r5
                                  10071 ;	calc.c:451: printstr("\\\tdivide top 2 unsigned\r\n");	
      00389C BD 00 E7         [24]10072 	cjne	r5,#0x00,00218$
      00389F 0E               [12]10073 	inc	r6
      0038A0 80 E4            [24]10074 	sjmp	00218$
      0038A2                      10075 00138$:
                                  10076 ;	calc.c:452: printstr("%\tmodulus top 2\r\n");
      0038A2 7DrD5            [12]10077 	mov	r5,#___str_40
      0038A4 7Es02            [12]10078 	mov	r6,#(___str_40 >> 8)
      0038A6 7F 80            [12]10079 	mov	r7,#0x80
                                  10080 ;	calc.c:59: return;
      0038A8                      10081 00221$:
                                  10082 ;	calc.c:57: for (; *s; s++) putchar(*s);
      0038A8 8D 82            [24]10083 	mov	dpl,r5
      0038AA 8E 83            [24]10084 	mov	dph,r6
      0038AC 8F F0            [24]10085 	mov	b,r7
      0038AE 12r00r00         [24]10086 	lcall	__gptrget
      0038B1 FC               [12]10087 	mov	r4,a
      0038B2 60 10            [24]10088 	jz	00140$
      0038B4 7B 00            [12]10089 	mov	r3,#0x00
      0038B6 8C 82            [24]10090 	mov	dpl,r4
      0038B8 8B 83            [24]10091 	mov	dph,r3
      0038BA 12r00r00         [24]10092 	lcall	_putchar
      0038BD 0D               [12]10093 	inc	r5
                                  10094 ;	calc.c:452: printstr("%\tmodulus top 2\r\n");
      0038BE BD 00 E7         [24]10095 	cjne	r5,#0x00,00221$
      0038C1 0E               [12]10096 	inc	r6
      0038C2 80 E4            [24]10097 	sjmp	00221$
      0038C4                      10098 00140$:
                                  10099 ;	calc.c:453: printstr("#\tmodulus top 2 unsigned\r\n");
      0038C4 7DrE7            [12]10100 	mov	r5,#___str_41
      0038C6 7Es02            [12]10101 	mov	r6,#(___str_41 >> 8)
      0038C8 7F 80            [12]10102 	mov	r7,#0x80
                                  10103 ;	calc.c:59: return;
      0038CA                      10104 00224$:
                                  10105 ;	calc.c:57: for (; *s; s++) putchar(*s);
      0038CA 8D 82            [24]10106 	mov	dpl,r5
      0038CC 8E 83            [24]10107 	mov	dph,r6
      0038CE 8F F0            [24]10108 	mov	b,r7
      0038D0 12r00r00         [24]10109 	lcall	__gptrget
      0038D3 FC               [12]10110 	mov	r4,a
      0038D4 60 10            [24]10111 	jz	00142$
      0038D6 7B 00            [12]10112 	mov	r3,#0x00
      0038D8 8C 82            [24]10113 	mov	dpl,r4
      0038DA 8B 83            [24]10114 	mov	dph,r3
      0038DC 12r00r00         [24]10115 	lcall	_putchar
      0038DF 0D               [12]10116 	inc	r5
                                  10117 ;	calc.c:453: printstr("#\tmodulus top 2 unsigned\r\n");
      0038E0 BD 00 E7         [24]10118 	cjne	r5,#0x00,00224$
      0038E3 0E               [12]10119 	inc	r6
      0038E4 80 E4            [24]10120 	sjmp	00224$
      0038E6                      10121 00142$:
                                  10122 ;	calc.c:454: printstr("&\tand top 2\r\n");
      0038E6 7Dr02            [12]10123 	mov	r5,#___str_42
      0038E8 7Es03            [12]10124 	mov	r6,#(___str_42 >> 8)
      0038EA 7F 80            [12]10125 	mov	r7,#0x80
                                  10126 ;	calc.c:59: return;
      0038EC                      10127 00227$:
                                  10128 ;	calc.c:57: for (; *s; s++) putchar(*s);
      0038EC 8D 82            [24]10129 	mov	dpl,r5
      0038EE 8E 83            [24]10130 	mov	dph,r6
      0038F0 8F F0            [24]10131 	mov	b,r7
      0038F2 12r00r00         [24]10132 	lcall	__gptrget
      0038F5 FC               [12]10133 	mov	r4,a
      0038F6 60 10            [24]10134 	jz	00144$
      0038F8 7B 00            [12]10135 	mov	r3,#0x00
      0038FA 8C 82            [24]10136 	mov	dpl,r4
      0038FC 8B 83            [24]10137 	mov	dph,r3
      0038FE 12r00r00         [24]10138 	lcall	_putchar
      003901 0D               [12]10139 	inc	r5
                                  10140 ;	calc.c:454: printstr("&\tand top 2\r\n");
      003902 BD 00 E7         [24]10141 	cjne	r5,#0x00,00227$
      003905 0E               [12]10142 	inc	r6
      003906 80 E4            [24]10143 	sjmp	00227$
      003908                      10144 00144$:
                                  10145 ;	calc.c:455: printstr("|\tor top 2\r\n");
      003908 7Dr10            [12]10146 	mov	r5,#___str_43
      00390A 7Es03            [12]10147 	mov	r6,#(___str_43 >> 8)
      00390C 7F 80            [12]10148 	mov	r7,#0x80
                                  10149 ;	calc.c:59: return;
      00390E                      10150 00230$:
                                  10151 ;	calc.c:57: for (; *s; s++) putchar(*s);
      00390E 8D 82            [24]10152 	mov	dpl,r5
      003910 8E 83            [24]10153 	mov	dph,r6
      003912 8F F0            [24]10154 	mov	b,r7
      003914 12r00r00         [24]10155 	lcall	__gptrget
      003917 FC               [12]10156 	mov	r4,a
      003918 60 10            [24]10157 	jz	00146$
      00391A 7B 00            [12]10158 	mov	r3,#0x00
      00391C 8C 82            [24]10159 	mov	dpl,r4
      00391E 8B 83            [24]10160 	mov	dph,r3
      003920 12r00r00         [24]10161 	lcall	_putchar
      003923 0D               [12]10162 	inc	r5
                                  10163 ;	calc.c:455: printstr("|\tor top 2\r\n");
      003924 BD 00 E7         [24]10164 	cjne	r5,#0x00,00230$
      003927 0E               [12]10165 	inc	r6
      003928 80 E4            [24]10166 	sjmp	00230$
      00392A                      10167 00146$:
                                  10168 ;	calc.c:456: printstr("^\txor top 2\r\n");
      00392A 7Dr1D            [12]10169 	mov	r5,#___str_44
      00392C 7Es03            [12]10170 	mov	r6,#(___str_44 >> 8)
      00392E 7F 80            [12]10171 	mov	r7,#0x80
                                  10172 ;	calc.c:59: return;
      003930                      10173 00233$:
                                  10174 ;	calc.c:57: for (; *s; s++) putchar(*s);
      003930 8D 82            [24]10175 	mov	dpl,r5
      003932 8E 83            [24]10176 	mov	dph,r6
      003934 8F F0            [24]10177 	mov	b,r7
      003936 12r00r00         [24]10178 	lcall	__gptrget
      003939 FC               [12]10179 	mov	r4,a
      00393A 60 10            [24]10180 	jz	00148$
      00393C 7B 00            [12]10181 	mov	r3,#0x00
      00393E 8C 82            [24]10182 	mov	dpl,r4
      003940 8B 83            [24]10183 	mov	dph,r3
      003942 12r00r00         [24]10184 	lcall	_putchar
      003945 0D               [12]10185 	inc	r5
                                  10186 ;	calc.c:456: printstr("^\txor top 2\r\n");
      003946 BD 00 E7         [24]10187 	cjne	r5,#0x00,00233$
      003949 0E               [12]10188 	inc	r6
      00394A 80 E4            [24]10189 	sjmp	00233$
      00394C                      10190 00148$:
                                  10191 ;	calc.c:457: printstr(">\tshift right top 2\r\n");
      00394C 7Dr2B            [12]10192 	mov	r5,#___str_45
      00394E 7Es03            [12]10193 	mov	r6,#(___str_45 >> 8)
      003950 7F 80            [12]10194 	mov	r7,#0x80
                                  10195 ;	calc.c:59: return;
      003952                      10196 00236$:
                                  10197 ;	calc.c:57: for (; *s; s++) putchar(*s);
      003952 8D 82            [24]10198 	mov	dpl,r5
      003954 8E 83            [24]10199 	mov	dph,r6
      003956 8F F0            [24]10200 	mov	b,r7
      003958 12r00r00         [24]10201 	lcall	__gptrget
      00395B FC               [12]10202 	mov	r4,a
      00395C 60 10            [24]10203 	jz	00150$
      00395E 7B 00            [12]10204 	mov	r3,#0x00
      003960 8C 82            [24]10205 	mov	dpl,r4
      003962 8B 83            [24]10206 	mov	dph,r3
      003964 12r00r00         [24]10207 	lcall	_putchar
      003967 0D               [12]10208 	inc	r5
                                  10209 ;	calc.c:457: printstr(">\tshift right top 2\r\n");
      003968 BD 00 E7         [24]10210 	cjne	r5,#0x00,00236$
      00396B 0E               [12]10211 	inc	r6
      00396C 80 E4            [24]10212 	sjmp	00236$
      00396E                      10213 00150$:
                                  10214 ;	calc.c:458: printstr("]\tarithmetic shift right top 2\r\n");
      00396E 7Dr41            [12]10215 	mov	r5,#___str_46
      003970 7Es03            [12]10216 	mov	r6,#(___str_46 >> 8)
      003972 7F 80            [12]10217 	mov	r7,#0x80
                                  10218 ;	calc.c:59: return;
      003974                      10219 00239$:
                                  10220 ;	calc.c:57: for (; *s; s++) putchar(*s);
      003974 8D 82            [24]10221 	mov	dpl,r5
      003976 8E 83            [24]10222 	mov	dph,r6
      003978 8F F0            [24]10223 	mov	b,r7
      00397A 12r00r00         [24]10224 	lcall	__gptrget
      00397D FC               [12]10225 	mov	r4,a
      00397E 60 10            [24]10226 	jz	00152$
      003980 7B 00            [12]10227 	mov	r3,#0x00
      003982 8C 82            [24]10228 	mov	dpl,r4
      003984 8B 83            [24]10229 	mov	dph,r3
      003986 12r00r00         [24]10230 	lcall	_putchar
      003989 0D               [12]10231 	inc	r5
                                  10232 ;	calc.c:458: printstr("]\tarithmetic shift right top 2\r\n");
      00398A BD 00 E7         [24]10233 	cjne	r5,#0x00,00239$
      00398D 0E               [12]10234 	inc	r6
      00398E 80 E4            [24]10235 	sjmp	00239$
      003990                      10236 00152$:
                                  10237 ;	calc.c:459: printstr("<\tshift left top 2\r\n");
      003990 7Dr62            [12]10238 	mov	r5,#___str_47
      003992 7Es03            [12]10239 	mov	r6,#(___str_47 >> 8)
      003994 7F 80            [12]10240 	mov	r7,#0x80
                                  10241 ;	calc.c:59: return;
      003996                      10242 00242$:
                                  10243 ;	calc.c:57: for (; *s; s++) putchar(*s);
      003996 8D 82            [24]10244 	mov	dpl,r5
      003998 8E 83            [24]10245 	mov	dph,r6
      00399A 8F F0            [24]10246 	mov	b,r7
      00399C 12r00r00         [24]10247 	lcall	__gptrget
      00399F FC               [12]10248 	mov	r4,a
      0039A0 60 10            [24]10249 	jz	00154$
      0039A2 7B 00            [12]10250 	mov	r3,#0x00
      0039A4 8C 82            [24]10251 	mov	dpl,r4
      0039A6 8B 83            [24]10252 	mov	dph,r3
      0039A8 12r00r00         [24]10253 	lcall	_putchar
      0039AB 0D               [12]10254 	inc	r5
                                  10255 ;	calc.c:459: printstr("<\tshift left top 2\r\n");
      0039AC BD 00 E7         [24]10256 	cjne	r5,#0x00,00242$
      0039AF 0E               [12]10257 	inc	r6
      0039B0 80 E4            [24]10258 	sjmp	00242$
      0039B2                      10259 00154$:
                                  10260 ;	calc.c:460: printstr("~\tbitwise not top\r\n");
      0039B2 7Dr77            [12]10261 	mov	r5,#___str_48
      0039B4 7Es03            [12]10262 	mov	r6,#(___str_48 >> 8)
      0039B6 7F 80            [12]10263 	mov	r7,#0x80
                                  10264 ;	calc.c:59: return;
      0039B8                      10265 00245$:
                                  10266 ;	calc.c:57: for (; *s; s++) putchar(*s);
      0039B8 8D 82            [24]10267 	mov	dpl,r5
      0039BA 8E 83            [24]10268 	mov	dph,r6
      0039BC 8F F0            [24]10269 	mov	b,r7
      0039BE 12r00r00         [24]10270 	lcall	__gptrget
      0039C1 FC               [12]10271 	mov	r4,a
      0039C2 60 10            [24]10272 	jz	00156$
      0039C4 7B 00            [12]10273 	mov	r3,#0x00
      0039C6 8C 82            [24]10274 	mov	dpl,r4
      0039C8 8B 83            [24]10275 	mov	dph,r3
      0039CA 12r00r00         [24]10276 	lcall	_putchar
      0039CD 0D               [12]10277 	inc	r5
                                  10278 ;	calc.c:460: printstr("~\tbitwise not top\r\n");
      0039CE BD 00 E7         [24]10279 	cjne	r5,#0x00,00245$
      0039D1 0E               [12]10280 	inc	r6
      0039D2 80 E4            [24]10281 	sjmp	00245$
      0039D4                      10282 00156$:
                                  10283 ;	calc.c:461: printstr("s\tstatus\r\n");
      0039D4 7Dr8B            [12]10284 	mov	r5,#___str_49
      0039D6 7Es03            [12]10285 	mov	r6,#(___str_49 >> 8)
      0039D8 7F 80            [12]10286 	mov	r7,#0x80
                                  10287 ;	calc.c:59: return;
      0039DA                      10288 00248$:
                                  10289 ;	calc.c:57: for (; *s; s++) putchar(*s);
      0039DA 8D 82            [24]10290 	mov	dpl,r5
      0039DC 8E 83            [24]10291 	mov	dph,r6
      0039DE 8F F0            [24]10292 	mov	b,r7
      0039E0 12r00r00         [24]10293 	lcall	__gptrget
      0039E3 FC               [12]10294 	mov	r4,a
      0039E4 60 10            [24]10295 	jz	00158$
      0039E6 7B 00            [12]10296 	mov	r3,#0x00
      0039E8 8C 82            [24]10297 	mov	dpl,r4
      0039EA 8B 83            [24]10298 	mov	dph,r3
      0039EC 12r00r00         [24]10299 	lcall	_putchar
      0039EF 0D               [12]10300 	inc	r5
                                  10301 ;	calc.c:461: printstr("s\tstatus\r\n");
      0039F0 BD 00 E7         [24]10302 	cjne	r5,#0x00,00248$
      0039F3 0E               [12]10303 	inc	r6
      0039F4 80 E4            [24]10304 	sjmp	00248$
      0039F6                      10305 00158$:
                                  10306 ;	calc.c:462: printstr("?\thelp\r\n");
      0039F6 7Dr96            [12]10307 	mov	r5,#___str_50
      0039F8 7Es03            [12]10308 	mov	r6,#(___str_50 >> 8)
      0039FA 7F 80            [12]10309 	mov	r7,#0x80
                                  10310 ;	calc.c:59: return;
      0039FC                      10311 00251$:
                                  10312 ;	calc.c:57: for (; *s; s++) putchar(*s);
      0039FC 8D 82            [24]10313 	mov	dpl,r5
      0039FE 8E 83            [24]10314 	mov	dph,r6
      003A00 8F F0            [24]10315 	mov	b,r7
      003A02 12r00r00         [24]10316 	lcall	__gptrget
      003A05 FC               [12]10317 	mov	r4,a
      003A06 60 10            [24]10318 	jz	00160$
      003A08 7B 00            [12]10319 	mov	r3,#0x00
      003A0A 8C 82            [24]10320 	mov	dpl,r4
      003A0C 8B 83            [24]10321 	mov	dph,r3
      003A0E 12r00r00         [24]10322 	lcall	_putchar
      003A11 0D               [12]10323 	inc	r5
                                  10324 ;	calc.c:462: printstr("?\thelp\r\n");
      003A12 BD 00 E7         [24]10325 	cjne	r5,#0x00,00251$
      003A15 0E               [12]10326 	inc	r6
      003A16 80 E4            [24]10327 	sjmp	00251$
      003A18                      10328 00160$:
                                  10329 ;	calc.c:463: printstr("q\tquit\r\n");
      003A18 7Dr9F            [12]10330 	mov	r5,#___str_51
      003A1A 7Es03            [12]10331 	mov	r6,#(___str_51 >> 8)
      003A1C 7F 80            [12]10332 	mov	r7,#0x80
                                  10333 ;	calc.c:59: return;
      003A1E                      10334 00254$:
                                  10335 ;	calc.c:57: for (; *s; s++) putchar(*s);
      003A1E 8D 82            [24]10336 	mov	dpl,r5
      003A20 8E 83            [24]10337 	mov	dph,r6
      003A22 8F F0            [24]10338 	mov	b,r7
      003A24 12r00r00         [24]10339 	lcall	__gptrget
      003A27 FC               [12]10340 	mov	r4,a
      003A28 60 10            [24]10341 	jz	00162$
      003A2A 7B 00            [12]10342 	mov	r3,#0x00
      003A2C 8C 82            [24]10343 	mov	dpl,r4
      003A2E 8B 83            [24]10344 	mov	dph,r3
      003A30 12r00r00         [24]10345 	lcall	_putchar
      003A33 0D               [12]10346 	inc	r5
                                  10347 ;	calc.c:463: printstr("q\tquit\r\n");
      003A34 BD 00 E7         [24]10348 	cjne	r5,#0x00,00254$
      003A37 0E               [12]10349 	inc	r6
      003A38 80 E4            [24]10350 	sjmp	00254$
      003A3A                      10351 00162$:
                                  10352 ;	calc.c:465: return 1;
      003A3A 90 00 01         [24]10353 	mov	dptr,#0x0001
                                  10354 ;	calc.c:466: }
      003A3D D0*00            [24]10355 	pop	_bp
      003A3F 22               [24]10356 	ret
                                  10357 ;------------------------------------------------------------
                                  10358 ;Allocation info for local variables in function 'main'
                                  10359 ;------------------------------------------------------------
                                  10360 ;input                     Allocated to registers r6 r7 
                                  10361 ;__1966080213              Allocated to registers 
                                  10362 ;s                         Allocated to registers r2 r3 r4 
                                  10363 ;__1310720215              Allocated to registers 
                                  10364 ;s                         Allocated to registers r5 r6 r7 
                                  10365 ;sloc0                     Allocated to stack - _bp +1
                                  10366 ;------------------------------------------------------------
                                  10367 ;	calc.c:496: void main(void) {
                                  10368 ;	-----------------------------------------
                                  10369 ;	 function main
                                  10370 ;	-----------------------------------------
      003A40                      10371 _main:
      003A40 C0*00            [24]10372 	push	_bp
      003A42 85 81*00         [24]10373 	mov	_bp,sp
      003A45 05 81            [12]10374 	inc	sp
                                  10375 ;	calc.c:499: giant = 0;
      003A47 78r00            [12]10376 	mov	r0,#_giant
      003A49 76 00            [12]10377 	mov	@r0,#0x00
                                  10378 ;	calc.c:501: c.base = 10;
      003A4B 90r00r0C         [24]10379 	mov	dptr,#_c
      003A4E 74 0A            [12]10380 	mov	a,#0x0a
      003A50 F0               [24]10381 	movx	@dptr,a
      003A51 E4               [12]10382 	clr	a
      003A52 A3               [24]10383 	inc	dptr
      003A53 F0               [24]10384 	movx	@dptr,a
                                  10385 ;	calc.c:502: c.acc = 0l;
      003A54 90r00r0E         [24]10386 	mov	dptr,#(_c + 0x0002)
      003A57 F0               [24]10387 	movx	@dptr,a
      003A58 A3               [24]10388 	inc	dptr
      003A59 F0               [24]10389 	movx	@dptr,a
      003A5A A3               [24]10390 	inc	dptr
      003A5B F0               [24]10391 	movx	@dptr,a
      003A5C A3               [24]10392 	inc	dptr
      003A5D F0               [24]10393 	movx	@dptr,a
                                  10394 ;	calc.c:503: c.acc_valid = (char)0;
      003A5E 90r00r12         [24]10395 	mov	dptr,#(_c + 0x0006)
      003A61 F0               [24]10396 	movx	@dptr,a
                                  10397 ;	calc.c:504: c.digit[0] = c.digit[1] = '\0';
      003A62 90r00r14         [24]10398 	mov	dptr,#(_c + 0x0008)
      003A65 F0               [24]10399 	movx	@dptr,a
      003A66 90r00r13         [24]10400 	mov	dptr,#(_c + 0x0007)
      003A69 F0               [24]10401 	movx	@dptr,a
                                  10402 ;	calc.c:506: c.ps = &c.s0;
      003A6A 90r40r1D         [24]10403 	mov	dptr,#(_c + 0x4011)
      003A6D 74r15            [12]10404 	mov	a,#(_c + 0x0009)
      003A6F F0               [24]10405 	movx	@dptr,a
      003A70 74s00            [12]10406 	mov	a,#((_c + 0x0009) >> 8)
      003A72 A3               [24]10407 	inc	dptr
      003A73 F0               [24]10408 	movx	@dptr,a
      003A74 E4               [12]10409 	clr	a
      003A75 A3               [24]10410 	inc	dptr
      003A76 F0               [24]10411 	movx	@dptr,a
                                  10412 ;	calc.c:507: c.ss = &c.s1;
      003A77 90r40r20         [24]10413 	mov	dptr,#(_c + 0x4014)
      003A7A 74r19            [12]10414 	mov	a,#(_c + 0x200d)
      003A7C F0               [24]10415 	movx	@dptr,a
      003A7D 74s20            [12]10416 	mov	a,#((_c + 0x200d) >> 8)
      003A7F A3               [24]10417 	inc	dptr
      003A80 F0               [24]10418 	movx	@dptr,a
      003A81 E4               [12]10419 	clr	a
      003A82 A3               [24]10420 	inc	dptr
      003A83 F0               [24]10421 	movx	@dptr,a
                                  10422 ;	calc.c:508: stack_init(c.ps);
      003A84 90r00r15         [24]10423 	mov	dptr,#(_c + 0x0009)
      003A87 75 F0 00         [24]10424 	mov	b,#0x00
      003A8A 12r00r00         [24]10425 	lcall	_stack_init
                                  10426 ;	calc.c:509: stack_init(c.ss);
      003A8D 90r40r20         [24]10427 	mov	dptr,#(_c + 0x4014)
      003A90 E0               [24]10428 	movx	a,@dptr
      003A91 FD               [12]10429 	mov	r5,a
      003A92 A3               [24]10430 	inc	dptr
      003A93 E0               [24]10431 	movx	a,@dptr
      003A94 FE               [12]10432 	mov	r6,a
      003A95 A3               [24]10433 	inc	dptr
      003A96 E0               [24]10434 	movx	a,@dptr
      003A97 FF               [12]10435 	mov	r7,a
      003A98 8D 82            [24]10436 	mov	dpl,r5
      003A9A 8E 83            [24]10437 	mov	dph,r6
      003A9C 8F F0            [24]10438 	mov	b,r7
      003A9E 12r00r00         [24]10439 	lcall	_stack_init
                                  10440 ;	calc.c:511: state_init(&s, STATE_START, STATE_FINAL, UNDEF, deltas, &c);
      003AA1 74r0C            [12]10441 	mov	a,#_c
      003AA3 C0 E0            [24]10442 	push	acc
      003AA5 74s00            [12]10443 	mov	a,#(_c >> 8)
      003AA7 C0 E0            [24]10444 	push	acc
      003AA9 E4               [12]10445 	clr	a
      003AAA C0 E0            [24]10446 	push	acc
      003AAC 74r00            [12]10447 	mov	a,#_deltas
      003AAE C0 E0            [24]10448 	push	acc
      003AB0 74s00            [12]10449 	mov	a,#(_deltas >> 8)
      003AB2 C0 E0            [24]10450 	push	acc
      003AB4 E4               [12]10451 	clr	a
      003AB5 C0 E0            [24]10452 	push	acc
      003AB7 C0 E0            [24]10453 	push	acc
      003AB9 74 80            [12]10454 	mov	a,#0x80
      003ABB C0 E0            [24]10455 	push	acc
      003ABD 74 03            [12]10456 	mov	a,#0x03
      003ABF C0 E0            [24]10457 	push	acc
      003AC1 E4               [12]10458 	clr	a
      003AC2 C0 E0            [24]10459 	push	acc
      003AC4 C0 E0            [24]10460 	push	acc
      003AC6 C0 E0            [24]10461 	push	acc
      003AC8 90r00r00         [24]10462 	mov	dptr,#_s
      003ACB 75 F0 00         [24]10463 	mov	b,#0x00
      003ACE 12r00r00         [24]10464 	lcall	_state_init
      003AD1 E5 81            [12]10465 	mov	a,sp
      003AD3 24 F4            [12]10466 	add	a,#0xf4
      003AD5 F5 81            [12]10467 	mov	sp,a
                                  10468 ;	calc.c:513: (void)status(&c, deltas);
      003AD7 74r00            [12]10469 	mov	a,#_deltas
      003AD9 C0 E0            [24]10470 	push	acc
      003ADB 74s00            [12]10471 	mov	a,#(_deltas >> 8)
      003ADD C0 E0            [24]10472 	push	acc
      003ADF E4               [12]10473 	clr	a
      003AE0 C0 E0            [24]10474 	push	acc
      003AE2 90r00r0C         [24]10475 	mov	dptr,#_c
      003AE5 75 F0 00         [24]10476 	mov	b,#0x00
      003AE8 12r2DrB8         [24]10477 	lcall	_status
      003AEB 15 81            [12]10478 	dec	sp
      003AED 15 81            [12]10479 	dec	sp
      003AEF 15 81            [12]10480 	dec	sp
                                  10481 ;	calc.c:515: while (1) {
      003AF1                      10482 00192$:
                                  10483 ;	calc.c:516: input = getchar();
      003AF1 12r00r0A         [24]10484 	lcall	_getchar
      003AF4 AE 82            [24]10485 	mov	r6,dpl
      003AF6 AF 83            [24]10486 	mov	r7,dph
                                  10487 ;	calc.c:517: if (((char)input == '\r') || ((char)input == '\n')) printstr("\r\n");
      003AF8 8E 05            [24]10488 	mov	ar5,r6
      003AFA BD 0D 02         [24]10489 	cjne	r5,#0x0d,00400$
      003AFD 80 03            [24]10490 	sjmp	00101$
      003AFF                      10491 00400$:
      003AFF BD 0A 36         [24]10492 	cjne	r5,#0x0a,00102$
      003B02                      10493 00101$:
      003B02 7Ar17            [12]10494 	mov	r2,#___str_3
      003B04 7Bs00            [12]10495 	mov	r3,#(___str_3 >> 8)
      003B06 7C 80            [12]10496 	mov	r4,#0x80
                                  10497 ;	calc.c:59: return;
      003B08                      10498 00199$:
                                  10499 ;	calc.c:57: for (; *s; s++) putchar(*s);
      003B08 8A 82            [24]10500 	mov	dpl,r2
      003B0A 8B 83            [24]10501 	mov	dph,r3
      003B0C 8C F0            [24]10502 	mov	b,r4
      003B0E A8*00            [24]10503 	mov	r0,_bp
      003B10 08               [12]10504 	inc	r0
      003B11 12r00r00         [24]10505 	lcall	__gptrget
      003B14 F6               [12]10506 	mov	@r0,a
      003B15 A8*00            [24]10507 	mov	r0,_bp
      003B17 08               [12]10508 	inc	r0
      003B18 E6               [12]10509 	mov	a,@r0
      003B19 60 24            [24]10510 	jz	00103$
      003B1B C0 06            [24]10511 	push	ar6
      003B1D C0 07            [24]10512 	push	ar7
      003B1F A8*00            [24]10513 	mov	r0,_bp
      003B21 08               [12]10514 	inc	r0
      003B22 86 06            [24]10515 	mov	ar6,@r0
      003B24 7F 00            [12]10516 	mov	r7,#0x00
      003B26 8E 82            [24]10517 	mov	dpl,r6
      003B28 8F 83            [24]10518 	mov	dph,r7
      003B2A 12r00r00         [24]10519 	lcall	_putchar
      003B2D 0A               [12]10520 	inc	r2
      003B2E BA 00 01         [24]10521 	cjne	r2,#0x00,00404$
      003B31 0B               [12]10522 	inc	r3
      003B32                      10523 00404$:
      003B32 D0 07            [24]10524 	pop	ar7
      003B34 D0 06            [24]10525 	pop	ar6
                                  10526 ;	calc.c:517: if (((char)input == '\r') || ((char)input == '\n')) printstr("\r\n");
      003B36 80 D0            [24]10527 	sjmp	00199$
      003B38                      10528 00102$:
                                  10529 ;	calc.c:518: else (void)putchar(input);
      003B38 8E 82            [24]10530 	mov	dpl,r6
      003B3A 8F 83            [24]10531 	mov	dph,r7
      003B3C 12r00r00         [24]10532 	lcall	_putchar
      003B3F                      10533 00103$:
                                  10534 ;	calc.c:519: c.digit[0] = (char)input;
      003B3F 90r00r13         [24]10535 	mov	dptr,#(_c + 0x0007)
      003B42 ED               [12]10536 	mov	a,r5
      003B43 F0               [24]10537 	movx	@dptr,a
                                  10538 ;	calc.c:521: if ((char)input == 'q') {
      003B44 BD 71 29         [24]10539 	cjne	r5,#0x71,00189$
                                  10540 ;	calc.c:522: if (state_exec(&s, EVENT_TERM) <= 0) break;
      003B47 74 08            [12]10541 	mov	a,#0x08
      003B49 C0 E0            [24]10542 	push	acc
      003B4B E4               [12]10543 	clr	a
      003B4C C0 E0            [24]10544 	push	acc
      003B4E 90r00r00         [24]10545 	mov	dptr,#_s
      003B51 75 F0 00         [24]10546 	mov	b,#0x00
      003B54 12r00r00         [24]10547 	lcall	_state_exec
      003B57 AB 82            [24]10548 	mov	r3,dpl
      003B59 AC 83            [24]10549 	mov	r4,dph
      003B5B 15 81            [12]10550 	dec	sp
      003B5D 15 81            [12]10551 	dec	sp
      003B5F C3               [12]10552 	clr	c
      003B60 E4               [12]10553 	clr	a
      003B61 9B               [12]10554 	subb	a,r3
      003B62 74 80            [12]10555 	mov	a,#(0x00 ^ 0x80)
      003B64 8C F0            [24]10556 	mov	b,r4
      003B66 63 F0 80         [24]10557 	xrl	b,#0x80
      003B69 95 F0            [12]10558 	subb	a,b
      003B6B 40 84            [24]10559 	jc	00192$
      003B6D 02r3Er1F         [24]10560 	ljmp	00193$
      003B70                      10561 00189$:
                                  10562 ;	calc.c:523: } else if ((char)input == 's') {
      003B70 BD 73 2C         [24]10563 	cjne	r5,#0x73,00186$
                                  10564 ;	calc.c:524: if (state_exec(&s, EVENT_STATUS) <= 0) break;
      003B73 74 03            [12]10565 	mov	a,#0x03
      003B75 C0 E0            [24]10566 	push	acc
      003B77 E4               [12]10567 	clr	a
      003B78 C0 E0            [24]10568 	push	acc
      003B7A 90r00r00         [24]10569 	mov	dptr,#_s
      003B7D 75 F0 00         [24]10570 	mov	b,#0x00
      003B80 12r00r00         [24]10571 	lcall	_state_exec
      003B83 AB 82            [24]10572 	mov	r3,dpl
      003B85 AC 83            [24]10573 	mov	r4,dph
      003B87 15 81            [12]10574 	dec	sp
      003B89 15 81            [12]10575 	dec	sp
      003B8B C3               [12]10576 	clr	c
      003B8C E4               [12]10577 	clr	a
      003B8D 9B               [12]10578 	subb	a,r3
      003B8E 74 80            [12]10579 	mov	a,#(0x00 ^ 0x80)
      003B90 8C F0            [24]10580 	mov	b,r4
      003B92 63 F0 80         [24]10581 	xrl	b,#0x80
      003B95 95 F0            [12]10582 	subb	a,b
      003B97 50 03            [24]10583 	jnc	00410$
      003B99 02r3ArF1         [24]10584 	ljmp	00192$
      003B9C                      10585 00410$:
      003B9C 02r3Er1F         [24]10586 	ljmp	00193$
      003B9F                      10587 00186$:
                                  10588 ;	calc.c:525: } else if ((char)input == '?') {
      003B9F BD 3F 2C         [24]10589 	cjne	r5,#0x3f,00183$
                                  10590 ;	calc.c:526: if (state_exec(&s, EVENT_HELP) <= 0) break;
      003BA2 74 04            [12]10591 	mov	a,#0x04
      003BA4 C0 E0            [24]10592 	push	acc
      003BA6 E4               [12]10593 	clr	a
      003BA7 C0 E0            [24]10594 	push	acc
      003BA9 90r00r00         [24]10595 	mov	dptr,#_s
      003BAC 75 F0 00         [24]10596 	mov	b,#0x00
      003BAF 12r00r00         [24]10597 	lcall	_state_exec
      003BB2 AB 82            [24]10598 	mov	r3,dpl
      003BB4 AC 83            [24]10599 	mov	r4,dph
      003BB6 15 81            [12]10600 	dec	sp
      003BB8 15 81            [12]10601 	dec	sp
      003BBA C3               [12]10602 	clr	c
      003BBB E4               [12]10603 	clr	a
      003BBC 9B               [12]10604 	subb	a,r3
      003BBD 74 80            [12]10605 	mov	a,#(0x00 ^ 0x80)
      003BBF 8C F0            [24]10606 	mov	b,r4
      003BC1 63 F0 80         [24]10607 	xrl	b,#0x80
      003BC4 95 F0            [12]10608 	subb	a,b
      003BC6 50 03            [24]10609 	jnc	00413$
      003BC8 02r3ArF1         [24]10610 	ljmp	00192$
      003BCB                      10611 00413$:
      003BCB 02r3Er1F         [24]10612 	ljmp	00193$
      003BCE                      10613 00183$:
                                  10614 ;	calc.c:527: } else if ((char)input == 'i') {
      003BCE BD 69 2C         [24]10615 	cjne	r5,#0x69,00180$
                                  10616 ;	calc.c:528: if (state_exec(&s, EVENT_RSTA_i) <= 0) break;
      003BD1 74 06            [12]10617 	mov	a,#0x06
      003BD3 C0 E0            [24]10618 	push	acc
      003BD5 E4               [12]10619 	clr	a
      003BD6 C0 E0            [24]10620 	push	acc
      003BD8 90r00r00         [24]10621 	mov	dptr,#_s
      003BDB 75 F0 00         [24]10622 	mov	b,#0x00
      003BDE 12r00r00         [24]10623 	lcall	_state_exec
      003BE1 AB 82            [24]10624 	mov	r3,dpl
      003BE3 AC 83            [24]10625 	mov	r4,dph
      003BE5 15 81            [12]10626 	dec	sp
      003BE7 15 81            [12]10627 	dec	sp
      003BE9 C3               [12]10628 	clr	c
      003BEA E4               [12]10629 	clr	a
      003BEB 9B               [12]10630 	subb	a,r3
      003BEC 74 80            [12]10631 	mov	a,#(0x00 ^ 0x80)
      003BEE 8C F0            [24]10632 	mov	b,r4
      003BF0 63 F0 80         [24]10633 	xrl	b,#0x80
      003BF3 95 F0            [12]10634 	subb	a,b
      003BF5 50 03            [24]10635 	jnc	00416$
      003BF7 02r3ArF1         [24]10636 	ljmp	00192$
      003BFA                      10637 00416$:
      003BFA 02r3Er1F         [24]10638 	ljmp	00193$
      003BFD                      10639 00180$:
                                  10640 ;	calc.c:529: } else if ((char)input == 'I') {
      003BFD BD 49 2C         [24]10641 	cjne	r5,#0x49,00177$
                                  10642 ;	calc.c:530: if (state_exec(&s, EVENT_RSTA_I) <= 0) break;
      003C00 74 07            [12]10643 	mov	a,#0x07
      003C02 C0 E0            [24]10644 	push	acc
      003C04 E4               [12]10645 	clr	a
      003C05 C0 E0            [24]10646 	push	acc
      003C07 90r00r00         [24]10647 	mov	dptr,#_s
      003C0A 75 F0 00         [24]10648 	mov	b,#0x00
      003C0D 12r00r00         [24]10649 	lcall	_state_exec
      003C10 AB 82            [24]10650 	mov	r3,dpl
      003C12 AC 83            [24]10651 	mov	r4,dph
      003C14 15 81            [12]10652 	dec	sp
      003C16 15 81            [12]10653 	dec	sp
      003C18 C3               [12]10654 	clr	c
      003C19 E4               [12]10655 	clr	a
      003C1A 9B               [12]10656 	subb	a,r3
      003C1B 74 80            [12]10657 	mov	a,#(0x00 ^ 0x80)
      003C1D 8C F0            [24]10658 	mov	b,r4
      003C1F 63 F0 80         [24]10659 	xrl	b,#0x80
      003C22 95 F0            [12]10660 	subb	a,b
      003C24 50 03            [24]10661 	jnc	00419$
      003C26 02r3ArF1         [24]10662 	ljmp	00192$
      003C29                      10663 00419$:
      003C29 02r3Er1F         [24]10664 	ljmp	00193$
      003C2C                      10665 00177$:
                                  10666 ;	calc.c:532: ((char)input == 'h') || ((char)input == 'H') ||
      003C2C BD 68 02         [24]10667 	cjne	r5,#0x68,00420$
      003C2F 80 0D            [24]10668 	sjmp	00170$
      003C31                      10669 00420$:
      003C31 BD 48 02         [24]10670 	cjne	r5,#0x48,00421$
      003C34 80 08            [24]10671 	sjmp	00170$
      003C36                      10672 00421$:
                                  10673 ;	calc.c:533: ((char)input == 'o') || ((char)input == 'O')
      003C36 BD 6F 02         [24]10674 	cjne	r5,#0x6f,00422$
      003C39 80 03            [24]10675 	sjmp	00170$
      003C3B                      10676 00422$:
      003C3B BD 4F 2C         [24]10677 	cjne	r5,#0x4f,00171$
      003C3E                      10678 00170$:
                                  10679 ;	calc.c:535: if (state_exec(&s, EVENT_BASE) <= 0) break;
      003C3E 74 05            [12]10680 	mov	a,#0x05
      003C40 C0 E0            [24]10681 	push	acc
      003C42 E4               [12]10682 	clr	a
      003C43 C0 E0            [24]10683 	push	acc
      003C45 90r00r00         [24]10684 	mov	dptr,#_s
      003C48 75 F0 00         [24]10685 	mov	b,#0x00
      003C4B 12r00r00         [24]10686 	lcall	_state_exec
      003C4E AB 82            [24]10687 	mov	r3,dpl
      003C50 AC 83            [24]10688 	mov	r4,dph
      003C52 15 81            [12]10689 	dec	sp
      003C54 15 81            [12]10690 	dec	sp
      003C56 C3               [12]10691 	clr	c
      003C57 E4               [12]10692 	clr	a
      003C58 9B               [12]10693 	subb	a,r3
      003C59 74 80            [12]10694 	mov	a,#(0x00 ^ 0x80)
      003C5B 8C F0            [24]10695 	mov	b,r4
      003C5D 63 F0 80         [24]10696 	xrl	b,#0x80
      003C60 95 F0            [12]10697 	subb	a,b
      003C62 50 03            [24]10698 	jnc	00425$
      003C64 02r3ArF1         [24]10699 	ljmp	00192$
      003C67                      10700 00425$:
      003C67 02r3Er1F         [24]10701 	ljmp	00193$
      003C6A                      10702 00171$:
                                  10703 ;	calc.c:536: } else if (isxdigit(input)) {
      003C6A 8E 82            [24]10704 	mov	dpl,r6
      003C6C 8F 83            [24]10705 	mov	dph,r7
      003C6E C0 05            [24]10706 	push	ar5
      003C70 12r00r00         [24]10707 	lcall	_isxdigit
      003C73 E5 82            [12]10708 	mov	a,dpl
      003C75 85 83 F0         [24]10709 	mov	b,dph
      003C78 D0 05            [24]10710 	pop	ar5
      003C7A 45 F0            [12]10711 	orl	a,b
      003C7C 60 2C            [24]10712 	jz	00168$
                                  10713 ;	calc.c:537: if (state_exec(&s, EVENT_DIGIT) <= 0) break;
      003C7E 74 01            [12]10714 	mov	a,#0x01
      003C80 C0 E0            [24]10715 	push	acc
      003C82 E4               [12]10716 	clr	a
      003C83 C0 E0            [24]10717 	push	acc
      003C85 90r00r00         [24]10718 	mov	dptr,#_s
      003C88 75 F0 00         [24]10719 	mov	b,#0x00
      003C8B 12r00r00         [24]10720 	lcall	_state_exec
      003C8E AE 82            [24]10721 	mov	r6,dpl
      003C90 AF 83            [24]10722 	mov	r7,dph
      003C92 15 81            [12]10723 	dec	sp
      003C94 15 81            [12]10724 	dec	sp
      003C96 C3               [12]10725 	clr	c
      003C97 E4               [12]10726 	clr	a
      003C98 9E               [12]10727 	subb	a,r6
      003C99 74 80            [12]10728 	mov	a,#(0x00 ^ 0x80)
      003C9B 8F F0            [24]10729 	mov	b,r7
      003C9D 63 F0 80         [24]10730 	xrl	b,#0x80
      003CA0 95 F0            [12]10731 	subb	a,b
      003CA2 50 03            [24]10732 	jnc	00427$
      003CA4 02r3ArF1         [24]10733 	ljmp	00192$
      003CA7                      10734 00427$:
      003CA7 02r3Er1F         [24]10735 	ljmp	00193$
      003CAA                      10736 00168$:
                                  10737 ;	calc.c:539: ((char)input == 'p') || ((char)input == 'P') ||
      003CAA BD 70 02         [24]10738 	cjne	r5,#0x70,00428$
      003CAD 80 17            [24]10739 	sjmp	00159$
      003CAF                      10740 00428$:
      003CAF BD 50 02         [24]10741 	cjne	r5,#0x50,00429$
      003CB2 80 12            [24]10742 	sjmp	00159$
      003CB4                      10743 00429$:
                                  10744 ;	calc.c:540: ((char)input == 'v') || ((char)input == 'V') ||
      003CB4 BD 76 02         [24]10745 	cjne	r5,#0x76,00430$
      003CB7 80 0D            [24]10746 	sjmp	00159$
      003CB9                      10747 00430$:
      003CB9 BD 56 02         [24]10748 	cjne	r5,#0x56,00431$
      003CBC 80 08            [24]10749 	sjmp	00159$
      003CBE                      10750 00431$:
                                  10751 ;	calc.c:541: ((char)input == '.') ||
      003CBE BD 2E 02         [24]10752 	cjne	r5,#0x2e,00432$
      003CC1 80 03            [24]10753 	sjmp	00159$
      003CC3                      10754 00432$:
                                  10755 ;	calc.c:542: ((char)input == 'x')
      003CC3 BD 78 2C         [24]10756 	cjne	r5,#0x78,00160$
      003CC6                      10757 00159$:
                                  10758 ;	calc.c:544: if (state_exec(&s, EVENT_OP) <= 0) break;
      003CC6 74 02            [12]10759 	mov	a,#0x02
      003CC8 C0 E0            [24]10760 	push	acc
      003CCA E4               [12]10761 	clr	a
      003CCB C0 E0            [24]10762 	push	acc
      003CCD 90r00r00         [24]10763 	mov	dptr,#_s
      003CD0 75 F0 00         [24]10764 	mov	b,#0x00
      003CD3 12r00r00         [24]10765 	lcall	_state_exec
      003CD6 AE 82            [24]10766 	mov	r6,dpl
      003CD8 AF 83            [24]10767 	mov	r7,dph
      003CDA 15 81            [12]10768 	dec	sp
      003CDC 15 81            [12]10769 	dec	sp
      003CDE C3               [12]10770 	clr	c
      003CDF E4               [12]10771 	clr	a
      003CE0 9E               [12]10772 	subb	a,r6
      003CE1 74 80            [12]10773 	mov	a,#(0x00 ^ 0x80)
      003CE3 8F F0            [24]10774 	mov	b,r7
      003CE5 63 F0 80         [24]10775 	xrl	b,#0x80
      003CE8 95 F0            [12]10776 	subb	a,b
      003CEA 50 03            [24]10777 	jnc	00435$
      003CEC 02r3ArF1         [24]10778 	ljmp	00192$
      003CEF                      10779 00435$:
      003CEF 02r3Er1F         [24]10780 	ljmp	00193$
      003CF2                      10781 00160$:
                                  10782 ;	calc.c:546: ((char)input == 'X') || ((char)input == 'T') ||
      003CF2 BD 58 02         [24]10783 	cjne	r5,#0x58,00436$
      003CF5 80 17            [24]10784 	sjmp	00151$
      003CF7                      10785 00436$:
      003CF7 BD 54 02         [24]10786 	cjne	r5,#0x54,00437$
      003CFA 80 12            [24]10787 	sjmp	00151$
      003CFC                      10788 00437$:
                                  10789 ;	calc.c:547: ((char)input == 'm') || ((char)input == 'M') ||
      003CFC BD 6D 02         [24]10790 	cjne	r5,#0x6d,00438$
      003CFF 80 0D            [24]10791 	sjmp	00151$
      003D01                      10792 00438$:
      003D01 BD 4D 02         [24]10793 	cjne	r5,#0x4d,00439$
      003D04 80 08            [24]10794 	sjmp	00151$
      003D06                      10795 00439$:
                                  10796 ;	calc.c:548: ((char)input == 'u') || ((char)input == 'U')
      003D06 BD 75 02         [24]10797 	cjne	r5,#0x75,00440$
      003D09 80 03            [24]10798 	sjmp	00151$
      003D0B                      10799 00440$:
      003D0B BD 55 2C         [24]10800 	cjne	r5,#0x55,00152$
      003D0E                      10801 00151$:
                                  10802 ;	calc.c:550: if (state_exec(&s, EVENT_OP) <= 0) break;
      003D0E 74 02            [12]10803 	mov	a,#0x02
      003D10 C0 E0            [24]10804 	push	acc
      003D12 E4               [12]10805 	clr	a
      003D13 C0 E0            [24]10806 	push	acc
      003D15 90r00r00         [24]10807 	mov	dptr,#_s
      003D18 75 F0 00         [24]10808 	mov	b,#0x00
      003D1B 12r00r00         [24]10809 	lcall	_state_exec
      003D1E AE 82            [24]10810 	mov	r6,dpl
      003D20 AF 83            [24]10811 	mov	r7,dph
      003D22 15 81            [12]10812 	dec	sp
      003D24 15 81            [12]10813 	dec	sp
      003D26 C3               [12]10814 	clr	c
      003D27 E4               [12]10815 	clr	a
      003D28 9E               [12]10816 	subb	a,r6
      003D29 74 80            [12]10817 	mov	a,#(0x00 ^ 0x80)
      003D2B 8F F0            [24]10818 	mov	b,r7
      003D2D 63 F0 80         [24]10819 	xrl	b,#0x80
      003D30 95 F0            [12]10820 	subb	a,b
      003D32 50 03            [24]10821 	jnc	00443$
      003D34 02r3ArF1         [24]10822 	ljmp	00192$
      003D37                      10823 00443$:
      003D37 02r3Er1F         [24]10824 	ljmp	00193$
      003D3A                      10825 00152$:
                                  10826 ;	calc.c:552: ((char)input == '+') || ((char)input == '-')
      003D3A BD 2B 02         [24]10827 	cjne	r5,#0x2b,00444$
      003D3D 80 03            [24]10828 	sjmp	00147$
      003D3F                      10829 00444$:
      003D3F BD 2D 2C         [24]10830 	cjne	r5,#0x2d,00148$
      003D42                      10831 00147$:
                                  10832 ;	calc.c:554: if (state_exec(&s, EVENT_OP) <= 0) break;
      003D42 74 02            [12]10833 	mov	a,#0x02
      003D44 C0 E0            [24]10834 	push	acc
      003D46 E4               [12]10835 	clr	a
      003D47 C0 E0            [24]10836 	push	acc
      003D49 90r00r00         [24]10837 	mov	dptr,#_s
      003D4C 75 F0 00         [24]10838 	mov	b,#0x00
      003D4F 12r00r00         [24]10839 	lcall	_state_exec
      003D52 AE 82            [24]10840 	mov	r6,dpl
      003D54 AF 83            [24]10841 	mov	r7,dph
      003D56 15 81            [12]10842 	dec	sp
      003D58 15 81            [12]10843 	dec	sp
      003D5A C3               [12]10844 	clr	c
      003D5B E4               [12]10845 	clr	a
      003D5C 9E               [12]10846 	subb	a,r6
      003D5D 74 80            [12]10847 	mov	a,#(0x00 ^ 0x80)
      003D5F 8F F0            [24]10848 	mov	b,r7
      003D61 63 F0 80         [24]10849 	xrl	b,#0x80
      003D64 95 F0            [12]10850 	subb	a,b
      003D66 50 03            [24]10851 	jnc	00447$
      003D68 02r3ArF1         [24]10852 	ljmp	00192$
      003D6B                      10853 00447$:
      003D6B 02r3Er1F         [24]10854 	ljmp	00193$
      003D6E                      10855 00148$:
                                  10856 ;	calc.c:556: ((char)input == '*') ||
      003D6E BD 2A 02         [24]10857 	cjne	r5,#0x2a,00448$
      003D71 80 12            [24]10858 	sjmp	00140$
      003D73                      10859 00448$:
                                  10860 ;	calc.c:557: ((char)input == '/') || ((char)input == '\\') ||
      003D73 BD 2F 02         [24]10861 	cjne	r5,#0x2f,00449$
      003D76 80 0D            [24]10862 	sjmp	00140$
      003D78                      10863 00449$:
      003D78 BD 5C 02         [24]10864 	cjne	r5,#0x5c,00450$
      003D7B 80 08            [24]10865 	sjmp	00140$
      003D7D                      10866 00450$:
                                  10867 ;	calc.c:558: ((char)input == '%') || ((char)input == '#')
      003D7D BD 25 02         [24]10868 	cjne	r5,#0x25,00451$
      003D80 80 03            [24]10869 	sjmp	00140$
      003D82                      10870 00451$:
      003D82 BD 23 29         [24]10871 	cjne	r5,#0x23,00141$
      003D85                      10872 00140$:
                                  10873 ;	calc.c:560: if (state_exec(&s, EVENT_OP) <= 0) break;
      003D85 74 02            [12]10874 	mov	a,#0x02
      003D87 C0 E0            [24]10875 	push	acc
      003D89 E4               [12]10876 	clr	a
      003D8A C0 E0            [24]10877 	push	acc
      003D8C 90r00r00         [24]10878 	mov	dptr,#_s
      003D8F 75 F0 00         [24]10879 	mov	b,#0x00
      003D92 12r00r00         [24]10880 	lcall	_state_exec
      003D95 AE 82            [24]10881 	mov	r6,dpl
      003D97 AF 83            [24]10882 	mov	r7,dph
      003D99 15 81            [12]10883 	dec	sp
      003D9B 15 81            [12]10884 	dec	sp
      003D9D C3               [12]10885 	clr	c
      003D9E E4               [12]10886 	clr	a
      003D9F 9E               [12]10887 	subb	a,r6
      003DA0 74 80            [12]10888 	mov	a,#(0x00 ^ 0x80)
      003DA2 8F F0            [24]10889 	mov	b,r7
      003DA4 63 F0 80         [24]10890 	xrl	b,#0x80
      003DA7 95 F0            [12]10891 	subb	a,b
      003DA9 50 74            [24]10892 	jnc	00193$
      003DAB 02r3ArF1         [24]10893 	ljmp	00192$
      003DAE                      10894 00141$:
                                  10895 ;	calc.c:562: ((char)input == '&') ||
      003DAE BD 26 02         [24]10896 	cjne	r5,#0x26,00455$
      003DB1 80 1C            [24]10897 	sjmp	00131$
      003DB3                      10898 00455$:
                                  10899 ;	calc.c:563: ((char)input == '|') || ((char)input == '^') ||
      003DB3 BD 7C 02         [24]10900 	cjne	r5,#0x7c,00456$
      003DB6 80 17            [24]10901 	sjmp	00131$
      003DB8                      10902 00456$:
      003DB8 BD 5E 02         [24]10903 	cjne	r5,#0x5e,00457$
      003DBB 80 12            [24]10904 	sjmp	00131$
      003DBD                      10905 00457$:
                                  10906 ;	calc.c:564: ((char)input == '~') ||
      003DBD BD 7E 02         [24]10907 	cjne	r5,#0x7e,00458$
      003DC0 80 0D            [24]10908 	sjmp	00131$
      003DC2                      10909 00458$:
                                  10910 ;	calc.c:565: ((char)input == '>') || ((char)input == ']') ||
      003DC2 BD 3E 02         [24]10911 	cjne	r5,#0x3e,00459$
      003DC5 80 08            [24]10912 	sjmp	00131$
      003DC7                      10913 00459$:
      003DC7 BD 5D 02         [24]10914 	cjne	r5,#0x5d,00460$
      003DCA 80 03            [24]10915 	sjmp	00131$
      003DCC                      10916 00460$:
                                  10917 ;	calc.c:566: ((char)input == '<')
      003DCC BD 3C 29         [24]10918 	cjne	r5,#0x3c,00132$
      003DCF                      10919 00131$:
                                  10920 ;	calc.c:568: if (state_exec(&s, EVENT_OP) <= 0) break;
      003DCF 74 02            [12]10921 	mov	a,#0x02
      003DD1 C0 E0            [24]10922 	push	acc
      003DD3 E4               [12]10923 	clr	a
      003DD4 C0 E0            [24]10924 	push	acc
      003DD6 90r00r00         [24]10925 	mov	dptr,#_s
      003DD9 75 F0 00         [24]10926 	mov	b,#0x00
      003DDC 12r00r00         [24]10927 	lcall	_state_exec
      003DDF AE 82            [24]10928 	mov	r6,dpl
      003DE1 AF 83            [24]10929 	mov	r7,dph
      003DE3 15 81            [12]10930 	dec	sp
      003DE5 15 81            [12]10931 	dec	sp
      003DE7 C3               [12]10932 	clr	c
      003DE8 E4               [12]10933 	clr	a
      003DE9 9E               [12]10934 	subb	a,r6
      003DEA 74 80            [12]10935 	mov	a,#(0x00 ^ 0x80)
      003DEC 8F F0            [24]10936 	mov	b,r7
      003DEE 63 F0 80         [24]10937 	xrl	b,#0x80
      003DF1 95 F0            [12]10938 	subb	a,b
      003DF3 50 2A            [24]10939 	jnc	00193$
      003DF5 02r3ArF1         [24]10940 	ljmp	00192$
      003DF8                      10941 00132$:
                                  10942 ;	calc.c:570: if (state_exec(&s, EVENT_DELIM) <= 0) break;
      003DF8 E4               [12]10943 	clr	a
      003DF9 C0 E0            [24]10944 	push	acc
      003DFB C0 E0            [24]10945 	push	acc
      003DFD 90r00r00         [24]10946 	mov	dptr,#_s
      003E00 75 F0 00         [24]10947 	mov	b,#0x00
      003E03 12r00r00         [24]10948 	lcall	_state_exec
      003E06 AE 82            [24]10949 	mov	r6,dpl
      003E08 AF 83            [24]10950 	mov	r7,dph
      003E0A 15 81            [12]10951 	dec	sp
      003E0C 15 81            [12]10952 	dec	sp
      003E0E C3               [12]10953 	clr	c
      003E0F E4               [12]10954 	clr	a
      003E10 9E               [12]10955 	subb	a,r6
      003E11 74 80            [12]10956 	mov	a,#(0x00 ^ 0x80)
      003E13 8F F0            [24]10957 	mov	b,r7
      003E15 63 F0 80         [24]10958 	xrl	b,#0x80
      003E18 95 F0            [12]10959 	subb	a,b
      003E1A 50 03            [24]10960 	jnc	00464$
      003E1C 02r3ArF1         [24]10961 	ljmp	00192$
      003E1F                      10962 00464$:
      003E1F                      10963 00193$:
                                  10964 ;	calc.c:574: printstr("TERM\r\n");
      003E1F 7DrA8            [12]10965 	mov	r5,#___str_52
      003E21 7Es03            [12]10966 	mov	r6,#(___str_52 >> 8)
      003E23 7F 80            [12]10967 	mov	r7,#0x80
                                  10968 ;	calc.c:59: return;
      003E25                      10969 00202$:
                                  10970 ;	calc.c:57: for (; *s; s++) putchar(*s);
      003E25 8D 82            [24]10971 	mov	dpl,r5
      003E27 8E 83            [24]10972 	mov	dph,r6
      003E29 8F F0            [24]10973 	mov	b,r7
      003E2B 12r00r00         [24]10974 	lcall	__gptrget
      003E2E FC               [12]10975 	mov	r4,a
      003E2F 60 10            [24]10976 	jz	00197$
      003E31 7B 00            [12]10977 	mov	r3,#0x00
      003E33 8C 82            [24]10978 	mov	dpl,r4
      003E35 8B 83            [24]10979 	mov	dph,r3
      003E37 12r00r00         [24]10980 	lcall	_putchar
      003E3A 0D               [12]10981 	inc	r5
                                  10982 ;	calc.c:574: printstr("TERM\r\n");
      003E3B BD 00 E7         [24]10983 	cjne	r5,#0x00,00202$
      003E3E 0E               [12]10984 	inc	r6
      003E3F 80 E4            [24]10985 	sjmp	00202$
      003E41                      10986 00197$:
                                  10987 ;	calc.c:576: PCON |= 2;
      003E41 43 87 02         [24]10988 	orl	_PCON,#0x02
                                  10989 ;	calc.c:578: return;
                                  10990 ;	calc.c:579: }
      003E44 15 81            [12]10991 	dec	sp
      003E46 D0*00            [24]10992 	pop	_bp
      003E48 22               [24]10993 	ret
                                  10994 	.area CSEG    (CODE)
                                  10995 	.area CONST   (CODE)
                                  10996 	.area CONST   (CODE)
      000000                      10997 ___str_0:
      000000 25 30 38 6C 78       10998 	.ascii "%08lx"
      000005 09                   10999 	.db 0x09
      000006 00                   11000 	.db 0x00
                                  11001 	.area CSEG    (CODE)
                                  11002 	.area CONST   (CODE)
      000007                      11003 ___str_1:
      000007 25 20 31 31 6C 64    11004 	.ascii "% 11ld"
      00000D 09                   11005 	.db 0x09
      00000E 00                   11006 	.db 0x00
                                  11007 	.area CSEG    (CODE)
                                  11008 	.area CONST   (CODE)
      00000F                      11009 ___str_2:
      00000F 25 30 31 31 6C 6F    11010 	.ascii "%011lo"
      000015 09                   11011 	.db 0x09
      000016 00                   11012 	.db 0x00
                                  11013 	.area CSEG    (CODE)
                                  11014 	.area CONST   (CODE)
      000017                      11015 ___str_3:
      000017 0D                   11016 	.db 0x0d
      000018 0A                   11017 	.db 0x0a
      000019 00                   11018 	.db 0x00
                                  11019 	.area CSEG    (CODE)
                                  11020 	.area CONST   (CODE)
      00001A                      11021 ___str_4:
      00001A 73 74 61 63 6B 20 75 11022 	.ascii "stack underflow"
             6E 64 65 72 66 6C 6F
             77
      000029 0D                   11023 	.db 0x0d
      00002A 0A                   11024 	.db 0x0a
      00002B 00                   11025 	.db 0x00
                                  11026 	.area CSEG    (CODE)
                                  11027 	.area CONST   (CODE)
      00002C                      11028 ___str_5:
      00002C 50 53 50 41          11029 	.ascii "PSPA"
      000030 09                   11030 	.db 0x09
      000031 00                   11031 	.db 0x00
                                  11032 	.area CSEG    (CODE)
                                  11033 	.area CONST   (CODE)
      000032                      11034 ___str_6:
      000032 53 53 50 41          11035 	.ascii "SSPA"
      000036 09                   11036 	.db 0x09
      000037 00                   11037 	.db 0x00
                                  11038 	.area CSEG    (CODE)
                                  11039 	.area CONST   (CODE)
      000038                      11040 ___str_7:
      000038 50 53 56 41          11041 	.ascii "PSVA"
      00003C 09                   11042 	.db 0x09
      00003D 00                   11043 	.db 0x00
                                  11044 	.area CSEG    (CODE)
                                  11045 	.area CONST   (CODE)
      00003E                      11046 ___str_8:
      00003E 50 53 56 54 4F 50    11047 	.ascii "PSVTOP"
      000044 09                   11048 	.db 0x09
      000045 00                   11049 	.db 0x00
                                  11050 	.area CSEG    (CODE)
                                  11051 	.area CONST   (CODE)
      000046                      11052 ___str_9:
      000046 50 53 50 54 4F 50    11053 	.ascii "PSPTOP"
      00004C 09                   11054 	.db 0x09
      00004D 00                   11055 	.db 0x00
                                  11056 	.area CSEG    (CODE)
                                  11057 	.area CONST   (CODE)
      00004E                      11058 ___str_10:
      00004E 0D                   11059 	.db 0x0d
      00004F 0A                   11060 	.db 0x0a
      000050 73 74 61 63 6B 20 75 11061 	.ascii "stack underflow"
             6E 64 65 72 66 6C 6F
             77
      00005F 0D                   11062 	.db 0x0d
      000060 0A                   11063 	.db 0x0a
      000061 00                   11064 	.db 0x00
                                  11065 	.area CSEG    (CODE)
                                  11066 	.area CONST   (CODE)
      000062                      11067 ___str_11:
      000062 0D                   11068 	.db 0x0d
      000063 0A                   11069 	.db 0x0a
      000064 73 65 63 6F 6E 64 61 11070 	.ascii "secondary stack overflow"
             72 79 20 73 74 61 63
             6B 20 6F 76 65 72 66
             6C 6F 77
      00007C 0D                   11071 	.db 0x0d
      00007D 0A                   11072 	.db 0x0a
      00007E 00                   11073 	.db 0x00
                                  11074 	.area CSEG    (CODE)
                                  11075 	.area CONST   (CODE)
      00007F                      11076 ___str_12:
      00007F 0D                   11077 	.db 0x0d
      000080 0A                   11078 	.db 0x0a
      000081 73 65 63 6F 6E 64 61 11079 	.ascii "secondary stack underflow"
             72 79 20 73 74 61 63
             6B 20 75 6E 64 65 72
             66 6C 6F 77
      00009A 0D                   11080 	.db 0x0d
      00009B 0A                   11081 	.db 0x0a
      00009C 00                   11082 	.db 0x00
                                  11083 	.area CSEG    (CODE)
                                  11084 	.area CONST   (CODE)
      00009D                      11085 ___str_13:
      00009D 0D                   11086 	.db 0x0d
      00009E 0A                   11087 	.db 0x0a
      00009F 73 74 61 63 6B 20 6F 11088 	.ascii "stack overflow"
             76 65 72 66 6C 6F 77
      0000AD 0D                   11089 	.db 0x0d
      0000AE 0A                   11090 	.db 0x0a
      0000AF 00                   11091 	.db 0x00
                                  11092 	.area CSEG    (CODE)
                                  11093 	.area CONST   (CODE)
      0000B0                      11094 ___str_14:
      0000B0 0D                   11095 	.db 0x0d
      0000B1 0A                   11096 	.db 0x0a
      0000B2 64 69 76 69 73 69 6F 11097 	.ascii "division by zero"
             6E 20 62 79 20 7A 65
             72 6F
      0000C2 0D                   11098 	.db 0x0d
      0000C3 0A                   11099 	.db 0x0a
      0000C4 00                   11100 	.db 0x00
                                  11101 	.area CSEG    (CODE)
                                  11102 	.area CONST   (CODE)
      0000C5                      11103 ___str_15:
      0000C5 0D                   11104 	.db 0x0d
      0000C6 0A                   11105 	.db 0x0a
      0000C7 50 53 20 3D 20 25 70 11106 	.ascii "PS = %p, SS = %p, base = %d"
             2C 20 53 53 20 3D 20
             25 70 2C 20 62 61 73
             65 20 3D 20 25 64
      0000E2 0D                   11107 	.db 0x0d
      0000E3 0A                   11108 	.db 0x0a
      0000E4 00                   11109 	.db 0x00
                                  11110 	.area CSEG    (CODE)
                                  11111 	.area CONST   (CODE)
      0000E5                      11112 ___str_16:
      0000E5 41 43 43             11113 	.ascii "ACC"
      0000E8 09                   11114 	.db 0x09
      0000E9 00                   11115 	.db 0x00
                                  11116 	.area CSEG    (CODE)
                                  11117 	.area CONST   (CODE)
      0000EA                      11118 ___str_17:
      0000EA 0D                   11119 	.db 0x0d
      0000EB 0A                   11120 	.db 0x0a
      0000EC 50 53 54 4F 50 31    11121 	.ascii "PSTOP1"
      0000F2 09                   11122 	.db 0x09
      0000F3 00                   11123 	.db 0x00
                                  11124 	.area CSEG    (CODE)
                                  11125 	.area CONST   (CODE)
      0000F4                      11126 ___str_18:
      0000F4 0D                   11127 	.db 0x0d
      0000F5 0A                   11128 	.db 0x0a
      0000F6 50 53 54 4F 50 30    11129 	.ascii "PSTOP0"
      0000FC 09                   11130 	.db 0x09
      0000FD 00                   11131 	.db 0x00
                                  11132 	.area CSEG    (CODE)
                                  11133 	.area CONST   (CODE)
      0000FE                      11134 ___str_19:
      0000FE 0D                   11135 	.db 0x0d
      0000FF 0A                   11136 	.db 0x0a
      000100 53 53 54 4F 50 31    11137 	.ascii "SSTOP1"
      000106 09                   11138 	.db 0x09
      000107 00                   11139 	.db 0x00
                                  11140 	.area CSEG    (CODE)
                                  11141 	.area CONST   (CODE)
      000108                      11142 ___str_20:
      000108 0D                   11143 	.db 0x0d
      000109 0A                   11144 	.db 0x0a
      00010A 53 53 54 4F 50 30    11145 	.ascii "SSTOP0"
      000110 09                   11146 	.db 0x09
      000111 00                   11147 	.db 0x00
                                  11148 	.area CSEG    (CODE)
                                  11149 	.area CONST   (CODE)
      000112                      11150 ___str_21:
      000112 0D                   11151 	.db 0x0d
      000113 0A                   11152 	.db 0x0a
      000114 48 68 4F 6F          11153 	.ascii "HhOo"
      000118 09                   11154 	.db 0x09
      000119 62 61 73 65 20 31 36 11155 	.ascii "base 16 10 8 2"
             20 31 30 20 38 20 32
      000127 0D                   11156 	.db 0x0d
      000128 0A                   11157 	.db 0x0a
      000129 00                   11158 	.db 0x00
                                  11159 	.area CSEG    (CODE)
                                  11160 	.area CONST   (CODE)
      00012A                      11161 ___str_22:
      00012A 70 2E                11162 	.ascii "p."
      00012C 09                   11163 	.db 0x09
      00012D 70 6F 70 20 74 6F 70 11164 	.ascii "pop top"
      000134 0D                   11165 	.db 0x0d
      000135 0A                   11166 	.db 0x0a
      000136 00                   11167 	.db 0x00
                                  11168 	.area CSEG    (CODE)
                                  11169 	.area CONST   (CODE)
      000137                      11170 ___str_23:
      000137 50                   11171 	.ascii "P"
      000138 09                   11172 	.db 0x09
      000139 70 6F 70 20 73 74 61 11173 	.ascii "pop stack"
             63 6B
      000142 0D                   11174 	.db 0x0d
      000143 0A                   11175 	.db 0x0a
      000144 00                   11176 	.db 0x00
                                  11177 	.area CSEG    (CODE)
                                  11178 	.area CONST   (CODE)
      000145                      11179 ___str_24:
      000145 76                   11180 	.ascii "v"
      000146 09                   11181 	.db 0x09
      000147 70 65 65 6B 20 74 6F 11182 	.ascii "peek top"
             70
      00014F 0D                   11183 	.db 0x0d
      000150 0A                   11184 	.db 0x0a
      000151 00                   11185 	.db 0x00
                                  11186 	.area CSEG    (CODE)
                                  11187 	.area CONST   (CODE)
      000152                      11188 ___str_25:
      000152 56                   11189 	.ascii "V"
      000153 09                   11190 	.db 0x09
      000154 70 65 65 6B 20 73 74 11191 	.ascii "peek stack"
             61 63 6B
      00015E 0D                   11192 	.db 0x0d
      00015F 0A                   11193 	.db 0x0a
      000160 00                   11194 	.db 0x00
                                  11195 	.area CSEG    (CODE)
                                  11196 	.area CONST   (CODE)
      000161                      11197 ___str_26:
      000161 69                   11198 	.ascii "i"
      000162 09                   11199 	.db 0x09
      000163 72 65 73 65 74 20 61 11200 	.ascii "reset acc"
             63 63
      00016C 0D                   11201 	.db 0x0d
      00016D 0A                   11202 	.db 0x0a
      00016E 00                   11203 	.db 0x00
                                  11204 	.area CSEG    (CODE)
                                  11205 	.area CONST   (CODE)
      00016F                      11206 ___str_27:
      00016F 49                   11207 	.ascii "I"
      000170 09                   11208 	.db 0x09
      000171 72 65 73 65 74 20 61 11209 	.ascii "reset and discard acc"
             6E 64 20 64 69 73 63
             61 72 64 20 61 63 63
      000186 0D                   11210 	.db 0x0d
      000187 0A                   11211 	.db 0x0a
      000188 00                   11212 	.db 0x00
                                  11213 	.area CSEG    (CODE)
                                  11214 	.area CONST   (CODE)
      000189                      11215 ___str_28:
      000189 78                   11216 	.ascii "x"
      00018A 09                   11217 	.db 0x09
      00018B 65 78 63 68 61 6E 67 11218 	.ascii "exchange top 2"
             65 20 74 6F 70 20 32
      000199 0D                   11219 	.db 0x0d
      00019A 0A                   11220 	.db 0x0a
      00019B 00                   11221 	.db 0x00
                                  11222 	.area CSEG    (CODE)
                                  11223 	.area CONST   (CODE)
      00019C                      11224 ___str_29:
      00019C 58                   11225 	.ascii "X"
      00019D 09                   11226 	.db 0x09
      00019E 65 78 63 68 61 6E 67 11227 	.ascii "exchange stacks primary <-> secondary"
             65 20 73 74 61 63 6B
             73 20 70 72 69 6D 61
             72 79 20 3C 2D 3E 20
             73 65 63 6F 6E 64 61
             72 79
      0001C3 0D                   11228 	.db 0x0d
      0001C4 0A                   11229 	.db 0x0a
      0001C5 00                   11230 	.db 0x00
                                  11231 	.area CSEG    (CODE)
                                  11232 	.area CONST   (CODE)
      0001C6                      11233 ___str_30:
      0001C6 54                   11234 	.ascii "T"
      0001C7 09                   11235 	.db 0x09
      0001C8 65 78 63 68 61 6E 67 11236 	.ascii "exchange tops primary <-> secondary"
             65 20 74 6F 70 73 20
             70 72 69 6D 61 72 79
             20 3C 2D 3E 20 73 65
             63 6F 6E 64 61 72 79
      0001EB 0D                   11237 	.db 0x0d
      0001EC 0A                   11238 	.db 0x0a
      0001ED 00                   11239 	.db 0x00
                                  11240 	.area CSEG    (CODE)
                                  11241 	.area CONST   (CODE)
      0001EE                      11242 ___str_31:
      0001EE 55                   11243 	.ascii "U"
      0001EF 09                   11244 	.db 0x09
      0001F0 63 6F 70 79 20 74 6F 11245 	.ascii "copy top secondary -> primary"
             70 20 73 65 63 6F 6E
             64 61 72 79 20 2D 3E
             20 70 72 69 6D 61 72
             79
      00020D 0D                   11246 	.db 0x0d
      00020E 0A                   11247 	.db 0x0a
      00020F 00                   11248 	.db 0x00
                                  11249 	.area CSEG    (CODE)
                                  11250 	.area CONST   (CODE)
      000210                      11251 ___str_32:
      000210 75                   11252 	.ascii "u"
      000211 09                   11253 	.db 0x09
      000212 63 6F 70 79 20 74 6F 11254 	.ascii "copy top primary -> secondary"
             70 20 70 72 69 6D 61
             72 79 20 2D 3E 20 73
             65 63 6F 6E 64 61 72
             79
      00022F 0D                   11255 	.db 0x0d
      000230 0A                   11256 	.db 0x0a
      000231 00                   11257 	.db 0x00
                                  11258 	.area CSEG    (CODE)
                                  11259 	.area CONST   (CODE)
      000232                      11260 ___str_33:
      000232 4D                   11261 	.ascii "M"
      000233 09                   11262 	.db 0x09
      000234 6D 6F 76 65 20 74 6F 11263 	.ascii "move top secondary -> primary"
             70 20 73 65 63 6F 6E
             64 61 72 79 20 2D 3E
             20 70 72 69 6D 61 72
             79
      000251 0D                   11264 	.db 0x0d
      000252 0A                   11265 	.db 0x0a
      000253 00                   11266 	.db 0x00
                                  11267 	.area CSEG    (CODE)
                                  11268 	.area CONST   (CODE)
      000254                      11269 ___str_34:
      000254 6D                   11270 	.ascii "m"
      000255 09                   11271 	.db 0x09
      000256 6D 6F 76 65 20 74 6F 11272 	.ascii "move top primary -> secondary"
             70 20 70 72 69 6D 61
             72 79 20 2D 3E 20 73
             65 63 6F 6E 64 61 72
             79
      000273 0D                   11273 	.db 0x0d
      000274 0A                   11274 	.db 0x0a
      000275 00                   11275 	.db 0x00
                                  11276 	.area CSEG    (CODE)
                                  11277 	.area CONST   (CODE)
      000276                      11278 ___str_35:
      000276 2B                   11279 	.ascii "+"
      000277 09                   11280 	.db 0x09
      000278 61 64 64 20 74 6F 70 11281 	.ascii "add top 2"
             20 32
      000281 0D                   11282 	.db 0x0d
      000282 0A                   11283 	.db 0x0a
      000283 00                   11284 	.db 0x00
                                  11285 	.area CSEG    (CODE)
                                  11286 	.area CONST   (CODE)
      000284                      11287 ___str_36:
      000284 2D                   11288 	.ascii "-"
      000285 09                   11289 	.db 0x09
      000286 73 75 62 74 72 61 63 11290 	.ascii "subtract top 2"
             74 20 74 6F 70 20 32
      000294 0D                   11291 	.db 0x0d
      000295 0A                   11292 	.db 0x0a
      000296 00                   11293 	.db 0x00
                                  11294 	.area CSEG    (CODE)
                                  11295 	.area CONST   (CODE)
      000297                      11296 ___str_37:
      000297 2A                   11297 	.ascii "*"
      000298 09                   11298 	.db 0x09
      000299 6D 75 6C 74 69 70 6C 11299 	.ascii "multiply top 2"
             79 20 74 6F 70 20 32
      0002A7 0D                   11300 	.db 0x0d
      0002A8 0A                   11301 	.db 0x0a
      0002A9 00                   11302 	.db 0x00
                                  11303 	.area CSEG    (CODE)
                                  11304 	.area CONST   (CODE)
      0002AA                      11305 ___str_38:
      0002AA 2F                   11306 	.ascii "/"
      0002AB 09                   11307 	.db 0x09
      0002AC 64 69 76 69 64 65 20 11308 	.ascii "divide top 2"
             74 6F 70 20 32
      0002B8 0D                   11309 	.db 0x0d
      0002B9 0A                   11310 	.db 0x0a
      0002BA 00                   11311 	.db 0x00
                                  11312 	.area CSEG    (CODE)
                                  11313 	.area CONST   (CODE)
      0002BB                      11314 ___str_39:
      0002BB 5C                   11315 	.db 0x5c
      0002BC 09                   11316 	.db 0x09
      0002BD 64 69 76 69 64 65 20 11317 	.ascii "divide top 2 unsigned"
             74 6F 70 20 32 20 75
             6E 73 69 67 6E 65 64
      0002D2 0D                   11318 	.db 0x0d
      0002D3 0A                   11319 	.db 0x0a
      0002D4 00                   11320 	.db 0x00
                                  11321 	.area CSEG    (CODE)
                                  11322 	.area CONST   (CODE)
      0002D5                      11323 ___str_40:
      0002D5 25                   11324 	.ascii "%"
      0002D6 09                   11325 	.db 0x09
      0002D7 6D 6F 64 75 6C 75 73 11326 	.ascii "modulus top 2"
             20 74 6F 70 20 32
      0002E4 0D                   11327 	.db 0x0d
      0002E5 0A                   11328 	.db 0x0a
      0002E6 00                   11329 	.db 0x00
                                  11330 	.area CSEG    (CODE)
                                  11331 	.area CONST   (CODE)
      0002E7                      11332 ___str_41:
      0002E7 23                   11333 	.ascii "#"
      0002E8 09                   11334 	.db 0x09
      0002E9 6D 6F 64 75 6C 75 73 11335 	.ascii "modulus top 2 unsigned"
             20 74 6F 70 20 32 20
             75 6E 73 69 67 6E 65
             64
      0002FF 0D                   11336 	.db 0x0d
      000300 0A                   11337 	.db 0x0a
      000301 00                   11338 	.db 0x00
                                  11339 	.area CSEG    (CODE)
                                  11340 	.area CONST   (CODE)
      000302                      11341 ___str_42:
      000302 26                   11342 	.ascii "&"
      000303 09                   11343 	.db 0x09
      000304 61 6E 64 20 74 6F 70 11344 	.ascii "and top 2"
             20 32
      00030D 0D                   11345 	.db 0x0d
      00030E 0A                   11346 	.db 0x0a
      00030F 00                   11347 	.db 0x00
                                  11348 	.area CSEG    (CODE)
                                  11349 	.area CONST   (CODE)
      000310                      11350 ___str_43:
      000310 7C                   11351 	.ascii "|"
      000311 09                   11352 	.db 0x09
      000312 6F 72 20 74 6F 70 20 11353 	.ascii "or top 2"
             32
      00031A 0D                   11354 	.db 0x0d
      00031B 0A                   11355 	.db 0x0a
      00031C 00                   11356 	.db 0x00
                                  11357 	.area CSEG    (CODE)
                                  11358 	.area CONST   (CODE)
      00031D                      11359 ___str_44:
      00031D 5E                   11360 	.ascii "^"
      00031E 09                   11361 	.db 0x09
      00031F 78 6F 72 20 74 6F 70 11362 	.ascii "xor top 2"
             20 32
      000328 0D                   11363 	.db 0x0d
      000329 0A                   11364 	.db 0x0a
      00032A 00                   11365 	.db 0x00
                                  11366 	.area CSEG    (CODE)
                                  11367 	.area CONST   (CODE)
      00032B                      11368 ___str_45:
      00032B 3E                   11369 	.ascii ">"
      00032C 09                   11370 	.db 0x09
      00032D 73 68 69 66 74 20 72 11371 	.ascii "shift right top 2"
             69 67 68 74 20 74 6F
             70 20 32
      00033E 0D                   11372 	.db 0x0d
      00033F 0A                   11373 	.db 0x0a
      000340 00                   11374 	.db 0x00
                                  11375 	.area CSEG    (CODE)
                                  11376 	.area CONST   (CODE)
      000341                      11377 ___str_46:
      000341 5D                   11378 	.ascii "]"
      000342 09                   11379 	.db 0x09
      000343 61 72 69 74 68 6D 65 11380 	.ascii "arithmetic shift right top 2"
             74 69 63 20 73 68 69
             66 74 20 72 69 67 68
             74 20 74 6F 70 20 32
      00035F 0D                   11381 	.db 0x0d
      000360 0A                   11382 	.db 0x0a
      000361 00                   11383 	.db 0x00
                                  11384 	.area CSEG    (CODE)
                                  11385 	.area CONST   (CODE)
      000362                      11386 ___str_47:
      000362 3C                   11387 	.ascii "<"
      000363 09                   11388 	.db 0x09
      000364 73 68 69 66 74 20 6C 11389 	.ascii "shift left top 2"
             65 66 74 20 74 6F 70
             20 32
      000374 0D                   11390 	.db 0x0d
      000375 0A                   11391 	.db 0x0a
      000376 00                   11392 	.db 0x00
                                  11393 	.area CSEG    (CODE)
                                  11394 	.area CONST   (CODE)
      000377                      11395 ___str_48:
      000377 7E                   11396 	.ascii "~"
      000378 09                   11397 	.db 0x09
      000379 62 69 74 77 69 73 65 11398 	.ascii "bitwise not top"
             20 6E 6F 74 20 74 6F
             70
      000388 0D                   11399 	.db 0x0d
      000389 0A                   11400 	.db 0x0a
      00038A 00                   11401 	.db 0x00
                                  11402 	.area CSEG    (CODE)
                                  11403 	.area CONST   (CODE)
      00038B                      11404 ___str_49:
      00038B 73                   11405 	.ascii "s"
      00038C 09                   11406 	.db 0x09
      00038D 73 74 61 74 75 73    11407 	.ascii "status"
      000393 0D                   11408 	.db 0x0d
      000394 0A                   11409 	.db 0x0a
      000395 00                   11410 	.db 0x00
                                  11411 	.area CSEG    (CODE)
                                  11412 	.area CONST   (CODE)
      000396                      11413 ___str_50:
      000396 3F                   11414 	.ascii "?"
      000397 09                   11415 	.db 0x09
      000398 68 65 6C 70          11416 	.ascii "help"
      00039C 0D                   11417 	.db 0x0d
      00039D 0A                   11418 	.db 0x0a
      00039E 00                   11419 	.db 0x00
                                  11420 	.area CSEG    (CODE)
                                  11421 	.area CONST   (CODE)
      00039F                      11422 ___str_51:
      00039F 71                   11423 	.ascii "q"
      0003A0 09                   11424 	.db 0x09
      0003A1 71 75 69 74          11425 	.ascii "quit"
      0003A5 0D                   11426 	.db 0x0d
      0003A6 0A                   11427 	.db 0x0a
      0003A7 00                   11428 	.db 0x00
                                  11429 	.area CSEG    (CODE)
                                  11430 	.area CONST   (CODE)
      0003A8                      11431 ___str_52:
      0003A8 54 45 52 4D          11432 	.ascii "TERM"
      0003AC 0D                   11433 	.db 0x0d
      0003AD 0A                   11434 	.db 0x0a
      0003AE 00                   11435 	.db 0x00
                                  11436 	.area CSEG    (CODE)
                                  11437 	.area XINIT   (CODE)
      000000                      11438 __xinit__deltas:
      000000 00 00                11439 	.byte #0x00, #0x00	;  0
      000002 00 00                11440 	.byte #0x00, #0x00	;  0
      000004 00 00                11441 	.byte #0x00, #0x00	;  0
      000006 00 00                11442 	.byte #0x00,#0x00
      000008 00 00                11443 	.byte #0x00,#0x00
      00000A 00 00                11444 	.byte #0x00, #0x00	;  0
      00000C 01 00                11445 	.byte #0x01, #0x00	;  1
      00000E 02 00                11446 	.byte #0x02, #0x00	;  2
      000010 00 00                11447 	.byte #0x00,#0x00
      000012r31s00                11448 	.byte _accumulate, (_accumulate >> 8)
      000014 00 00                11449 	.byte #0x00, #0x00	;  0
      000016 02 00                11450 	.byte #0x02, #0x00	;  2
      000018 01 00                11451 	.byte #0x01, #0x00	;  1
      00001A 00 00                11452 	.byte #0x00,#0x00
      00001CrB3s08                11453 	.byte _operator, (_operator >> 8)
      00001E 01 00                11454 	.byte #0x01, #0x00	;  1
      000020 00 00                11455 	.byte #0x00, #0x00	;  0
      000022 00 00                11456 	.byte #0x00, #0x00	;  0
      000024 00 00                11457 	.byte #0x00,#0x00
      000026 00 00                11458 	.byte #0x00,#0x00
      000028 01 00                11459 	.byte #0x01, #0x00	;  1
      00002A 02 00                11460 	.byte #0x02, #0x00	;  2
      00002C 01 00                11461 	.byte #0x01, #0x00	;  1
      00002E 00 00                11462 	.byte #0x00,#0x00
      000030rB3s08                11463 	.byte _operator, (_operator >> 8)
      000032 01 00                11464 	.byte #0x01, #0x00	;  1
      000034 01 00                11465 	.byte #0x01, #0x00	;  1
      000036 02 00                11466 	.byte #0x02, #0x00	;  2
      000038 00 00                11467 	.byte #0x00,#0x00
      00003Ar31s00                11468 	.byte _accumulate, (_accumulate >> 8)
      00003C 02 00                11469 	.byte #0x02, #0x00	;  2
      00003E 00 00                11470 	.byte #0x00, #0x00	;  0
      000040 00 00                11471 	.byte #0x00, #0x00	;  0
      000042 00 00                11472 	.byte #0x00,#0x00
      000044rADs2B                11473 	.byte _push_acc, (_push_acc >> 8)
      000046 02 00                11474 	.byte #0x02, #0x00	;  2
      000048 07 00                11475 	.byte #0x07, #0x00	;  7
      00004A 00 00                11476 	.byte #0x00, #0x00	;  0
      00004C 00 00                11477 	.byte #0x00,#0x00
      00004ErD0s2C                11478 	.byte _reset_acc, (_reset_acc >> 8)
      000050 02 00                11479 	.byte #0x02, #0x00	;  2
      000052 01 00                11480 	.byte #0x01, #0x00	;  1
      000054 02 00                11481 	.byte #0x02, #0x00	;  2
      000056 00 00                11482 	.byte #0x00,#0x00
      000058r31s00                11483 	.byte _accumulate, (_accumulate >> 8)
      00005A 02 00                11484 	.byte #0x02, #0x00	;  2
      00005C 02 00                11485 	.byte #0x02, #0x00	;  2
      00005E 01 00                11486 	.byte #0x01, #0x00	;  1
      000060 00 00                11487 	.byte #0x00,#0x00
      000062rADs2B                11488 	.byte _push_acc, (_push_acc >> 8)
      000064 FF 7F                11489 	.byte #0xff, #0x7f	;  32767
      000066 06 00                11490 	.byte #0x06, #0x00	;  6
      000068 FF 7F                11491 	.byte #0xff, #0x7f	;  32767
      00006A 00 00                11492 	.byte #0x00,#0x00
      00006CrD0s2C                11493 	.byte _reset_acc, (_reset_acc >> 8)
      00006E FF 7F                11494 	.byte #0xff, #0x7f	;  32767
      000070 07 00                11495 	.byte #0x07, #0x00	;  7
      000072 FF 7F                11496 	.byte #0xff, #0x7f	;  32767
      000074 00 00                11497 	.byte #0x00,#0x00
      000076 00 00                11498 	.byte #0x00,#0x00
      000078 FF 7F                11499 	.byte #0xff, #0x7f	;  32767
      00007A 05 00                11500 	.byte #0x05, #0x00	;  5
      00007C FF 7F                11501 	.byte #0xff, #0x7f	;  32767
      00007E 00 00                11502 	.byte #0x00,#0x00
      000080r3As2D                11503 	.byte _reset_base, (_reset_base >> 8)
      000082 FF 7F                11504 	.byte #0xff, #0x7f	;  32767
      000084 03 00                11505 	.byte #0x03, #0x00	;  3
      000086 FF 7F                11506 	.byte #0xff, #0x7f	;  32767
      000088 00 00                11507 	.byte #0x00,#0x00
      00008ArB8s2D                11508 	.byte _status, (_status >> 8)
      00008C FF 7F                11509 	.byte #0xff, #0x7f	;  32767
      00008E 04 00                11510 	.byte #0x04, #0x00	;  4
      000090 FF 7F                11511 	.byte #0xff, #0x7f	;  32767
      000092 00 00                11512 	.byte #0x00,#0x00
      000094r17s36                11513 	.byte _help, (_help >> 8)
      000096 FF 7F                11514 	.byte #0xff, #0x7f	;  32767
      000098 08 00                11515 	.byte #0x08, #0x00	;  8
      00009A 03 00                11516 	.byte #0x03, #0x00	;  3
      00009C 00 00                11517 	.byte #0x00,#0x00
      00009ErA2s01                11518 	.byte _dump_pop, (_dump_pop >> 8)
      0000A0 00 80                11519 	.byte #0x00, #0x80	; -32768
      0000A2 00 80                11520 	.byte #0x00, #0x80	; -32768
      0000A4 00 80                11521 	.byte #0x00, #0x80	; -32768
      0000A6 00 00                11522 	.byte #0x00,#0x00
      0000A8 00 00                11523 	.byte #0x00,#0x00
                                  11524 	.area CABS    (ABS,CODE)
