                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module calc
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _getchar_poll
                                     13 	.globl _stack_iter_peek
                                     14 	.globl _stack_peek
                                     15 	.globl _stack_pop
                                     16 	.globl _stack_push
                                     17 	.globl _stack_init
                                     18 	.globl _state_exec
                                     19 	.globl _state_init
                                     20 	.globl _isxdigit
                                     21 	.globl _printf
                                     22 	.globl _strtol
                                     23 	.globl _CY
                                     24 	.globl _AC
                                     25 	.globl _F0
                                     26 	.globl _RS1
                                     27 	.globl _RS0
                                     28 	.globl _OV
                                     29 	.globl _FL
                                     30 	.globl _P
                                     31 	.globl _TF2
                                     32 	.globl _EXF2
                                     33 	.globl _RCLK
                                     34 	.globl _TCLK
                                     35 	.globl _EXEN2
                                     36 	.globl _TR2
                                     37 	.globl _C_T2
                                     38 	.globl _CP_RL2
                                     39 	.globl _T2CON_7
                                     40 	.globl _T2CON_6
                                     41 	.globl _T2CON_5
                                     42 	.globl _T2CON_4
                                     43 	.globl _T2CON_3
                                     44 	.globl _T2CON_2
                                     45 	.globl _T2CON_1
                                     46 	.globl _T2CON_0
                                     47 	.globl _PT2
                                     48 	.globl _PS
                                     49 	.globl _PT1
                                     50 	.globl _PX1
                                     51 	.globl _PT0
                                     52 	.globl _PX0
                                     53 	.globl _RD
                                     54 	.globl _WR
                                     55 	.globl _T1
                                     56 	.globl _T0
                                     57 	.globl _INT1
                                     58 	.globl _INT0
                                     59 	.globl _TXD
                                     60 	.globl _RXD
                                     61 	.globl _P3_7
                                     62 	.globl _P3_6
                                     63 	.globl _P3_5
                                     64 	.globl _P3_4
                                     65 	.globl _P3_3
                                     66 	.globl _P3_2
                                     67 	.globl _P3_1
                                     68 	.globl _P3_0
                                     69 	.globl _EA
                                     70 	.globl _ET2
                                     71 	.globl _ES
                                     72 	.globl _ET1
                                     73 	.globl _EX1
                                     74 	.globl _ET0
                                     75 	.globl _EX0
                                     76 	.globl _P2_7
                                     77 	.globl _P2_6
                                     78 	.globl _P2_5
                                     79 	.globl _P2_4
                                     80 	.globl _P2_3
                                     81 	.globl _P2_2
                                     82 	.globl _P2_1
                                     83 	.globl _P2_0
                                     84 	.globl _SM0
                                     85 	.globl _SM1
                                     86 	.globl _SM2
                                     87 	.globl _REN
                                     88 	.globl _TB8
                                     89 	.globl _RB8
                                     90 	.globl _TI
                                     91 	.globl _RI
                                     92 	.globl _T2EX
                                     93 	.globl _T2
                                     94 	.globl _P1_7
                                     95 	.globl _P1_6
                                     96 	.globl _P1_5
                                     97 	.globl _P1_4
                                     98 	.globl _P1_3
                                     99 	.globl _P1_2
                                    100 	.globl _P1_1
                                    101 	.globl _P1_0
                                    102 	.globl _TF1
                                    103 	.globl _TR1
                                    104 	.globl _TF0
                                    105 	.globl _TR0
                                    106 	.globl _IE1
                                    107 	.globl _IT1
                                    108 	.globl _IE0
                                    109 	.globl _IT0
                                    110 	.globl _P0_7
                                    111 	.globl _P0_6
                                    112 	.globl _P0_5
                                    113 	.globl _P0_4
                                    114 	.globl _P0_3
                                    115 	.globl _P0_2
                                    116 	.globl _P0_1
                                    117 	.globl _P0_0
                                    118 	.globl _B
                                    119 	.globl _A
                                    120 	.globl _ACC
                                    121 	.globl _PSW
                                    122 	.globl _TH2
                                    123 	.globl _TL2
                                    124 	.globl _RCAP2H
                                    125 	.globl _RCAP2L
                                    126 	.globl _T2MOD
                                    127 	.globl _T2CON
                                    128 	.globl _IP
                                    129 	.globl _P3
                                    130 	.globl _IE
                                    131 	.globl _P2
                                    132 	.globl _SBUF
                                    133 	.globl _SCON
                                    134 	.globl _P1
                                    135 	.globl _TH1
                                    136 	.globl _TH0
                                    137 	.globl _TL1
                                    138 	.globl _TL0
                                    139 	.globl _TMOD
                                    140 	.globl _TCON
                                    141 	.globl _PCON
                                    142 	.globl _DPH
                                    143 	.globl _DPL
                                    144 	.globl _SP
                                    145 	.globl _P0
                                    146 	.globl _putchar
                                    147 	.globl _getchar
                                    148 ;--------------------------------------------------------
                                    149 ; special function registers
                                    150 ;--------------------------------------------------------
                                    151 	.area RSEG    (ABS,DATA)
      000000                        152 	.org 0x0000
                           000080   153 _P0	=	0x0080
                           000081   154 _SP	=	0x0081
                           000082   155 _DPL	=	0x0082
                           000083   156 _DPH	=	0x0083
                           000087   157 _PCON	=	0x0087
                           000088   158 _TCON	=	0x0088
                           000089   159 _TMOD	=	0x0089
                           00008A   160 _TL0	=	0x008a
                           00008B   161 _TL1	=	0x008b
                           00008C   162 _TH0	=	0x008c
                           00008D   163 _TH1	=	0x008d
                           000090   164 _P1	=	0x0090
                           000098   165 _SCON	=	0x0098
                           000099   166 _SBUF	=	0x0099
                           0000A0   167 _P2	=	0x00a0
                           0000A8   168 _IE	=	0x00a8
                           0000B0   169 _P3	=	0x00b0
                           0000B8   170 _IP	=	0x00b8
                           0000C8   171 _T2CON	=	0x00c8
                           0000C9   172 _T2MOD	=	0x00c9
                           0000CA   173 _RCAP2L	=	0x00ca
                           0000CB   174 _RCAP2H	=	0x00cb
                           0000CC   175 _TL2	=	0x00cc
                           0000CD   176 _TH2	=	0x00cd
                           0000D0   177 _PSW	=	0x00d0
                           0000E0   178 _ACC	=	0x00e0
                           0000E0   179 _A	=	0x00e0
                           0000F0   180 _B	=	0x00f0
                                    181 ;--------------------------------------------------------
                                    182 ; special function bits
                                    183 ;--------------------------------------------------------
                                    184 	.area RSEG    (ABS,DATA)
      000000                        185 	.org 0x0000
                           000080   186 _P0_0	=	0x0080
                           000081   187 _P0_1	=	0x0081
                           000082   188 _P0_2	=	0x0082
                           000083   189 _P0_3	=	0x0083
                           000084   190 _P0_4	=	0x0084
                           000085   191 _P0_5	=	0x0085
                           000086   192 _P0_6	=	0x0086
                           000087   193 _P0_7	=	0x0087
                           000088   194 _IT0	=	0x0088
                           000089   195 _IE0	=	0x0089
                           00008A   196 _IT1	=	0x008a
                           00008B   197 _IE1	=	0x008b
                           00008C   198 _TR0	=	0x008c
                           00008D   199 _TF0	=	0x008d
                           00008E   200 _TR1	=	0x008e
                           00008F   201 _TF1	=	0x008f
                           000090   202 _P1_0	=	0x0090
                           000091   203 _P1_1	=	0x0091
                           000092   204 _P1_2	=	0x0092
                           000093   205 _P1_3	=	0x0093
                           000094   206 _P1_4	=	0x0094
                           000095   207 _P1_5	=	0x0095
                           000096   208 _P1_6	=	0x0096
                           000097   209 _P1_7	=	0x0097
                           000090   210 _T2	=	0x0090
                           000091   211 _T2EX	=	0x0091
                           000098   212 _RI	=	0x0098
                           000099   213 _TI	=	0x0099
                           00009A   214 _RB8	=	0x009a
                           00009B   215 _TB8	=	0x009b
                           00009C   216 _REN	=	0x009c
                           00009D   217 _SM2	=	0x009d
                           00009E   218 _SM1	=	0x009e
                           00009F   219 _SM0	=	0x009f
                           0000A0   220 _P2_0	=	0x00a0
                           0000A1   221 _P2_1	=	0x00a1
                           0000A2   222 _P2_2	=	0x00a2
                           0000A3   223 _P2_3	=	0x00a3
                           0000A4   224 _P2_4	=	0x00a4
                           0000A5   225 _P2_5	=	0x00a5
                           0000A6   226 _P2_6	=	0x00a6
                           0000A7   227 _P2_7	=	0x00a7
                           0000A8   228 _EX0	=	0x00a8
                           0000A9   229 _ET0	=	0x00a9
                           0000AA   230 _EX1	=	0x00aa
                           0000AB   231 _ET1	=	0x00ab
                           0000AC   232 _ES	=	0x00ac
                           0000AD   233 _ET2	=	0x00ad
                           0000AF   234 _EA	=	0x00af
                           0000B0   235 _P3_0	=	0x00b0
                           0000B1   236 _P3_1	=	0x00b1
                           0000B2   237 _P3_2	=	0x00b2
                           0000B3   238 _P3_3	=	0x00b3
                           0000B4   239 _P3_4	=	0x00b4
                           0000B5   240 _P3_5	=	0x00b5
                           0000B6   241 _P3_6	=	0x00b6
                           0000B7   242 _P3_7	=	0x00b7
                           0000B0   243 _RXD	=	0x00b0
                           0000B1   244 _TXD	=	0x00b1
                           0000B2   245 _INT0	=	0x00b2
                           0000B3   246 _INT1	=	0x00b3
                           0000B4   247 _T0	=	0x00b4
                           0000B5   248 _T1	=	0x00b5
                           0000B6   249 _WR	=	0x00b6
                           0000B7   250 _RD	=	0x00b7
                           0000B8   251 _PX0	=	0x00b8
                           0000B9   252 _PT0	=	0x00b9
                           0000BA   253 _PX1	=	0x00ba
                           0000BB   254 _PT1	=	0x00bb
                           0000BC   255 _PS	=	0x00bc
                           0000BD   256 _PT2	=	0x00bd
                           0000C8   257 _T2CON_0	=	0x00c8
                           0000C9   258 _T2CON_1	=	0x00c9
                           0000CA   259 _T2CON_2	=	0x00ca
                           0000CB   260 _T2CON_3	=	0x00cb
                           0000CC   261 _T2CON_4	=	0x00cc
                           0000CD   262 _T2CON_5	=	0x00cd
                           0000CE   263 _T2CON_6	=	0x00ce
                           0000CF   264 _T2CON_7	=	0x00cf
                           0000C8   265 _CP_RL2	=	0x00c8
                           0000C9   266 _C_T2	=	0x00c9
                           0000CA   267 _TR2	=	0x00ca
                           0000CB   268 _EXEN2	=	0x00cb
                           0000CC   269 _TCLK	=	0x00cc
                           0000CD   270 _RCLK	=	0x00cd
                           0000CE   271 _EXF2	=	0x00ce
                           0000CF   272 _TF2	=	0x00cf
                           0000D0   273 _P	=	0x00d0
                           0000D1   274 _FL	=	0x00d1
                           0000D2   275 _OV	=	0x00d2
                           0000D3   276 _RS0	=	0x00d3
                           0000D4   277 _RS1	=	0x00d4
                           0000D5   278 _F0	=	0x00d5
                           0000D6   279 _AC	=	0x00d6
                           0000D7   280 _CY	=	0x00d7
                                    281 ;--------------------------------------------------------
                                    282 ; overlayable register banks
                                    283 ;--------------------------------------------------------
                                    284 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        285 	.ds 8
                                    286 ;--------------------------------------------------------
                                    287 ; internal ram data
                                    288 ;--------------------------------------------------------
                                    289 	.area DSEG    (DATA)
                                    290 ;--------------------------------------------------------
                                    291 ; overlayable items in internal ram 
                                    292 ;--------------------------------------------------------
                                    293 ;--------------------------------------------------------
                                    294 ; Stack segment in internal ram 
                                    295 ;--------------------------------------------------------
                                    296 	.area	SSEG
      000000                        297 __start__stack:
      000000                        298 	.ds	1
                                    299 
                                    300 ;--------------------------------------------------------
                                    301 ; indirectly addressable internal ram data
                                    302 ;--------------------------------------------------------
                                    303 	.area ISEG    (DATA)
                                    304 ;--------------------------------------------------------
                                    305 ; absolute internal ram data
                                    306 ;--------------------------------------------------------
                                    307 	.area IABS    (ABS,DATA)
                                    308 	.area IABS    (ABS,DATA)
                                    309 ;--------------------------------------------------------
                                    310 ; bit data
                                    311 ;--------------------------------------------------------
                                    312 	.area BSEG    (BIT)
                                    313 ;--------------------------------------------------------
                                    314 ; paged external ram data
                                    315 ;--------------------------------------------------------
                                    316 	.area PSEG    (PAG,XDATA)
                                    317 ;--------------------------------------------------------
                                    318 ; external ram data
                                    319 ;--------------------------------------------------------
                                    320 	.area XSEG    (XDATA)
      000000                        321 _s:
      000000                        322 	.ds 12
      00000C                        323 _c:
      00000C                        324 	.ds 8205
                                    325 ;--------------------------------------------------------
                                    326 ; absolute external ram data
                                    327 ;--------------------------------------------------------
                                    328 	.area XABS    (ABS,XDATA)
                                    329 ;--------------------------------------------------------
                                    330 ; external initialized ram data
                                    331 ;--------------------------------------------------------
                                    332 	.area XISEG   (XDATA)
      000000                        333 _hexp:
      000000                        334 	.ds 3
      000003                        335 _decp:
      000003                        336 	.ds 3
      000006                        337 _hexP:
      000006                        338 	.ds 3
      000009                        339 _decP:
      000009                        340 	.ds 3
      00000C                        341 _hexv:
      00000C                        342 	.ds 3
      00000F                        343 _decv:
      00000F                        344 	.ds 3
      000012                        345 _hexV:
      000012                        346 	.ds 3
      000015                        347 _decV:
      000015                        348 	.ds 3
      000018                        349 _deltas:
      000018                        350 	.ds 160
                                    351 	.area HOME    (CODE)
                                    352 	.area GSINIT0 (CODE)
                                    353 	.area GSINIT1 (CODE)
                                    354 	.area GSINIT2 (CODE)
                                    355 	.area GSINIT3 (CODE)
                                    356 	.area GSINIT4 (CODE)
                                    357 	.area GSINIT5 (CODE)
                                    358 	.area GSINIT  (CODE)
                                    359 	.area GSFINAL (CODE)
                                    360 	.area CSEG    (CODE)
                                    361 ;--------------------------------------------------------
                                    362 ; interrupt vector 
                                    363 ;--------------------------------------------------------
                                    364 	.area HOME    (CODE)
      000000                        365 __interrupt_vect:
      000000 02r00r00         [24]  366 	ljmp	__sdcc_gsinit_startup
                                    367 ;--------------------------------------------------------
                                    368 ; global & static initialisations
                                    369 ;--------------------------------------------------------
                                    370 	.area HOME    (CODE)
                                    371 	.area GSINIT  (CODE)
                                    372 	.area GSFINAL (CODE)
                                    373 	.area GSINIT  (CODE)
                                    374 	.globl __sdcc_gsinit_startup
                                    375 	.globl __sdcc_program_startup
                                    376 	.globl __start__stack
                                    377 	.globl __mcs51_genXINIT
                                    378 	.globl __mcs51_genXRAMCLEAR
                                    379 	.globl __mcs51_genRAMCLEAR
                                    380 	.area GSFINAL (CODE)
      000000 02r00r03         [24]  381 	ljmp	__sdcc_program_startup
                                    382 ;--------------------------------------------------------
                                    383 ; Home
                                    384 ;--------------------------------------------------------
                                    385 	.area HOME    (CODE)
                                    386 	.area HOME    (CODE)
      000003                        387 __sdcc_program_startup:
      000003 02r19rA3         [24]  388 	ljmp	_main
                                    389 ;	return from main will return to caller
                                    390 ;--------------------------------------------------------
                                    391 ; code
                                    392 ;--------------------------------------------------------
                                    393 	.area CSEG    (CODE)
                                    394 ;------------------------------------------------------------
                                    395 ;Allocation info for local variables in function 'putchar'
                                    396 ;------------------------------------------------------------
                                    397 ;c                         Allocated to registers 
                                    398 ;------------------------------------------------------------
                                    399 ;	calc.c:15: int putchar(int c) __naked {
                                    400 ;	-----------------------------------------
                                    401 ;	 function putchar
                                    402 ;	-----------------------------------------
      000000                        403 _putchar:
                                    404 ;	naked function: no prologue.
                                    405 ;	calc.c:20: __endasm;
      000000 E5 82            [12]  406 	mov	a, dpl
      000002 02 00 30         [24]  407 	ljmp	0x0030
                                    408 ;	calc.c:21: }
                                    409 ;	naked function: no epilogue.
                                    410 ;------------------------------------------------------------
                                    411 ;Allocation info for local variables in function 'getchar'
                                    412 ;------------------------------------------------------------
                                    413 ;	calc.c:23: int getchar(void) __naked {
                                    414 ;	-----------------------------------------
                                    415 ;	 function getchar
                                    416 ;	-----------------------------------------
      000005                        417 _getchar:
                                    418 ;	naked function: no prologue.
                                    419 ;	calc.c:29: __endasm;
      000005 12 00 32         [24]  420 	lcall	0x0032
      000008 F5 82            [12]  421 	mov	dpl, a
      00000A 75 83 00         [24]  422 	mov	dph, #0
      00000D 22               [24]  423 	ret
                                    424 ;	calc.c:30: }
                                    425 ;	naked function: no epilogue.
                                    426 ;------------------------------------------------------------
                                    427 ;Allocation info for local variables in function 'getchar_poll'
                                    428 ;------------------------------------------------------------
                                    429 ;	calc.c:32: int getchar_poll(void) __naked {
                                    430 ;	-----------------------------------------
                                    431 ;	 function getchar_poll
                                    432 ;	-----------------------------------------
      00000E                        433 _getchar_poll:
                                    434 ;	naked function: no prologue.
                                    435 ;	calc.c:44: __endasm;
      00000E 74 FF            [12]  436 	mov	a, #0xff
      000010 F5 F0            [12]  437 	mov	b, a
      000012 30 98 07         [24]  438 	jnb	ri, nochar
      000015 C2 98            [12]  439 	clr	ri
      000017 E5 99            [12]  440 	mov	a, sbuf
      000019 75 F0 00         [24]  441 	mov	b, #0
      00001C                        442 	nochar:
      00001C F5 82            [12]  443 	mov	dpl, a
      00001E 85 F0 83         [24]  444 	mov	dph, b
      000021 22               [24]  445 	ret
                                    446 ;	calc.c:45: }
                                    447 ;	naked function: no epilogue.
                                    448 ;------------------------------------------------------------
                                    449 ;Allocation info for local variables in function 'accumulate'
                                    450 ;------------------------------------------------------------
                                    451 ;delta                     Allocated to stack - _bp -5
                                    452 ;_ctx                      Allocated to registers r5 r6 r7 
                                    453 ;ctx                       Allocated to stack - _bp +8
                                    454 ;d                         Allocated to stack - _bp +11
                                    455 ;sloc0                     Allocated to stack - _bp +1
                                    456 ;sloc1                     Allocated to stack - _bp +4
                                    457 ;------------------------------------------------------------
                                    458 ;	calc.c:84: static int accumulate(void *_ctx, delta_t *delta) __reentrant {
                                    459 ;	-----------------------------------------
                                    460 ;	 function accumulate
                                    461 ;	-----------------------------------------
      000022                        462 _accumulate:
                           000007   463 	ar7 = 0x07
                           000006   464 	ar6 = 0x06
                           000005   465 	ar5 = 0x05
                           000004   466 	ar4 = 0x04
                           000003   467 	ar3 = 0x03
                           000002   468 	ar2 = 0x02
                           000001   469 	ar1 = 0x01
                           000000   470 	ar0 = 0x00
      000022 C0*00            [24]  471 	push	_bp
      000024 E5 81            [12]  472 	mov	a,sp
      000026 F5*00            [12]  473 	mov	_bp,a
      000028 24 0E            [12]  474 	add	a,#0x0e
      00002A F5 81            [12]  475 	mov	sp,a
      00002C AD 82            [24]  476 	mov	r5,dpl
      00002E AE 83            [24]  477 	mov	r6,dph
      000030 AF F0            [24]  478 	mov	r7,b
                                    479 ;	calc.c:85: struct ctx *ctx = (struct ctx *)_ctx;
      000032 E5*00            [12]  480 	mov	a,_bp
      000034 24 08            [12]  481 	add	a,#0x08
      000036 F8               [12]  482 	mov	r0,a
      000037 A6 05            [24]  483 	mov	@r0,ar5
      000039 08               [12]  484 	inc	r0
      00003A A6 06            [24]  485 	mov	@r0,ar6
      00003C 08               [12]  486 	inc	r0
      00003D A6 07            [24]  487 	mov	@r0,ar7
                                    488 ;	calc.c:90: if (!ctx->acc_valid) {
      00003F E5*00            [12]  489 	mov	a,_bp
      000041 24 08            [12]  490 	add	a,#0x08
      000043 F8               [12]  491 	mov	r0,a
      000044 74 06            [12]  492 	mov	a,#0x06
      000046 26               [12]  493 	add	a,@r0
      000047 FA               [12]  494 	mov	r2,a
      000048 E4               [12]  495 	clr	a
      000049 08               [12]  496 	inc	r0
      00004A 36               [12]  497 	addc	a,@r0
      00004B FB               [12]  498 	mov	r3,a
      00004C 08               [12]  499 	inc	r0
      00004D 86 04            [24]  500 	mov	ar4,@r0
      00004F 8A 82            [24]  501 	mov	dpl,r2
      000051 8B 83            [24]  502 	mov	dph,r3
      000053 8C F0            [24]  503 	mov	b,r4
      000055 12r00r00         [24]  504 	lcall	__gptrget
      000058 70 31            [24]  505 	jnz	00102$
                                    506 ;	calc.c:91: ctx->acc_valid = 1;
      00005A 8A 82            [24]  507 	mov	dpl,r2
      00005C 8B 83            [24]  508 	mov	dph,r3
      00005E 8C F0            [24]  509 	mov	b,r4
      000060 74 01            [12]  510 	mov	a,#0x01
      000062 12r00r00         [24]  511 	lcall	__gptrput
                                    512 ;	calc.c:92: ctx->acc = 0l;
      000065 E5*00            [12]  513 	mov	a,_bp
      000067 24 08            [12]  514 	add	a,#0x08
      000069 F8               [12]  515 	mov	r0,a
      00006A 74 02            [12]  516 	mov	a,#0x02
      00006C 26               [12]  517 	add	a,@r0
      00006D FA               [12]  518 	mov	r2,a
      00006E E4               [12]  519 	clr	a
      00006F 08               [12]  520 	inc	r0
      000070 36               [12]  521 	addc	a,@r0
      000071 FB               [12]  522 	mov	r3,a
      000072 08               [12]  523 	inc	r0
      000073 86 04            [24]  524 	mov	ar4,@r0
      000075 8A 82            [24]  525 	mov	dpl,r2
      000077 8B 83            [24]  526 	mov	dph,r3
      000079 8C F0            [24]  527 	mov	b,r4
      00007B E4               [12]  528 	clr	a
      00007C 12r00r00         [24]  529 	lcall	__gptrput
      00007F A3               [24]  530 	inc	dptr
      000080 12r00r00         [24]  531 	lcall	__gptrput
      000083 A3               [24]  532 	inc	dptr
      000084 12r00r00         [24]  533 	lcall	__gptrput
      000087 A3               [24]  534 	inc	dptr
      000088 12r00r00         [24]  535 	lcall	__gptrput
      00008B                        536 00102$:
                                    537 ;	calc.c:95: d = strtol(ctx->digit, NULL, ctx->base);
      00008B E5*00            [12]  538 	mov	a,_bp
      00008D 24 08            [12]  539 	add	a,#0x08
      00008F F8               [12]  540 	mov	r0,a
      000090 86 82            [24]  541 	mov	dpl,@r0
      000092 08               [12]  542 	inc	r0
      000093 86 83            [24]  543 	mov	dph,@r0
      000095 08               [12]  544 	inc	r0
      000096 86 F0            [24]  545 	mov	b,@r0
      000098 12r00r00         [24]  546 	lcall	__gptrget
      00009B FB               [12]  547 	mov	r3,a
      00009C A3               [24]  548 	inc	dptr
      00009D 12r00r00         [24]  549 	lcall	__gptrget
      0000A0 FC               [12]  550 	mov	r4,a
      0000A1 E5*00            [12]  551 	mov	a,_bp
      0000A3 24 08            [12]  552 	add	a,#0x08
      0000A5 F8               [12]  553 	mov	r0,a
      0000A6 74 07            [12]  554 	mov	a,#0x07
      0000A8 26               [12]  555 	add	a,@r0
      0000A9 FA               [12]  556 	mov	r2,a
      0000AA E4               [12]  557 	clr	a
      0000AB 08               [12]  558 	inc	r0
      0000AC 36               [12]  559 	addc	a,@r0
      0000AD FE               [12]  560 	mov	r6,a
      0000AE 08               [12]  561 	inc	r0
      0000AF 86 07            [24]  562 	mov	ar7,@r0
      0000B1 C0 03            [24]  563 	push	ar3
      0000B3 C0 04            [24]  564 	push	ar4
      0000B5 E4               [12]  565 	clr	a
      0000B6 C0 E0            [24]  566 	push	acc
      0000B8 C0 E0            [24]  567 	push	acc
      0000BA C0 E0            [24]  568 	push	acc
      0000BC 8A 82            [24]  569 	mov	dpl,r2
      0000BE 8E 83            [24]  570 	mov	dph,r6
      0000C0 8F F0            [24]  571 	mov	b,r7
      0000C2 12r00r00         [24]  572 	lcall	_strtol
      0000C5 C8               [12]  573 	xch	a,r0
      0000C6 E5*00            [12]  574 	mov	a,_bp
      0000C8 24 0B            [12]  575 	add	a,#0x0b
      0000CA C8               [12]  576 	xch	a,r0
      0000CB A6 82            [24]  577 	mov	@r0,dpl
      0000CD 08               [12]  578 	inc	r0
      0000CE A6 83            [24]  579 	mov	@r0,dph
      0000D0 08               [12]  580 	inc	r0
      0000D1 A6 F0            [24]  581 	mov	@r0,b
      0000D3 08               [12]  582 	inc	r0
      0000D4 F6               [12]  583 	mov	@r0,a
      0000D5 E5 81            [12]  584 	mov	a,sp
      0000D7 24 FB            [12]  585 	add	a,#0xfb
      0000D9 F5 81            [12]  586 	mov	sp,a
                                    587 ;	calc.c:96: ctx->acc = ctx->acc * (long)ctx->base + d;
      0000DB E5*00            [12]  588 	mov	a,_bp
      0000DD 24 08            [12]  589 	add	a,#0x08
      0000DF F8               [12]  590 	mov	r0,a
      0000E0 A9*00            [24]  591 	mov	r1,_bp
      0000E2 09               [12]  592 	inc	r1
      0000E3 74 02            [12]  593 	mov	a,#0x02
      0000E5 26               [12]  594 	add	a,@r0
      0000E6 F7               [12]  595 	mov	@r1,a
      0000E7 E4               [12]  596 	clr	a
      0000E8 08               [12]  597 	inc	r0
      0000E9 36               [12]  598 	addc	a,@r0
      0000EA 09               [12]  599 	inc	r1
      0000EB F7               [12]  600 	mov	@r1,a
      0000EC 08               [12]  601 	inc	r0
      0000ED 09               [12]  602 	inc	r1
      0000EE E6               [12]  603 	mov	a,@r0
      0000EF F7               [12]  604 	mov	@r1,a
      0000F0 A8*00            [24]  605 	mov	r0,_bp
      0000F2 08               [12]  606 	inc	r0
      0000F3 86 82            [24]  607 	mov	dpl,@r0
      0000F5 08               [12]  608 	inc	r0
      0000F6 86 83            [24]  609 	mov	dph,@r0
      0000F8 08               [12]  610 	inc	r0
      0000F9 86 F0            [24]  611 	mov	b,@r0
      0000FB E5*00            [12]  612 	mov	a,_bp
      0000FD 24 04            [12]  613 	add	a,#0x04
      0000FF F9               [12]  614 	mov	r1,a
      000100 12r00r00         [24]  615 	lcall	__gptrget
      000103 F7               [12]  616 	mov	@r1,a
      000104 A3               [24]  617 	inc	dptr
      000105 12r00r00         [24]  618 	lcall	__gptrget
      000108 09               [12]  619 	inc	r1
      000109 F7               [12]  620 	mov	@r1,a
      00010A A3               [24]  621 	inc	dptr
      00010B 12r00r00         [24]  622 	lcall	__gptrget
      00010E 09               [12]  623 	inc	r1
      00010F F7               [12]  624 	mov	@r1,a
      000110 A3               [24]  625 	inc	dptr
      000111 12r00r00         [24]  626 	lcall	__gptrget
      000114 09               [12]  627 	inc	r1
      000115 F7               [12]  628 	mov	@r1,a
      000116 E5*00            [12]  629 	mov	a,_bp
      000118 24 08            [12]  630 	add	a,#0x08
      00011A F8               [12]  631 	mov	r0,a
      00011B 86 82            [24]  632 	mov	dpl,@r0
      00011D 08               [12]  633 	inc	r0
      00011E 86 83            [24]  634 	mov	dph,@r0
      000120 08               [12]  635 	inc	r0
      000121 86 F0            [24]  636 	mov	b,@r0
      000123 12r00r00         [24]  637 	lcall	__gptrget
      000126 FA               [12]  638 	mov	r2,a
      000127 A3               [24]  639 	inc	dptr
      000128 12r00r00         [24]  640 	lcall	__gptrget
      00012B FB               [12]  641 	mov	r3,a
      00012C 33               [12]  642 	rlc	a
      00012D 95 E0            [12]  643 	subb	a,acc
      00012F FE               [12]  644 	mov	r6,a
      000130 FF               [12]  645 	mov	r7,a
      000131 C0 02            [24]  646 	push	ar2
      000133 C0 03            [24]  647 	push	ar3
      000135 C0 06            [24]  648 	push	ar6
      000137 C0 07            [24]  649 	push	ar7
      000139 E5*00            [12]  650 	mov	a,_bp
      00013B 24 04            [12]  651 	add	a,#0x04
      00013D F8               [12]  652 	mov	r0,a
      00013E 86 82            [24]  653 	mov	dpl,@r0
      000140 08               [12]  654 	inc	r0
      000141 86 83            [24]  655 	mov	dph,@r0
      000143 08               [12]  656 	inc	r0
      000144 86 F0            [24]  657 	mov	b,@r0
      000146 08               [12]  658 	inc	r0
      000147 E6               [12]  659 	mov	a,@r0
      000148 12r00r00         [24]  660 	lcall	__mullong
      00014B AC 82            [24]  661 	mov	r4,dpl
      00014D AD 83            [24]  662 	mov	r5,dph
      00014F AE F0            [24]  663 	mov	r6,b
      000151 FF               [12]  664 	mov	r7,a
      000152 E5 81            [12]  665 	mov	a,sp
      000154 24 FC            [12]  666 	add	a,#0xfc
      000156 F5 81            [12]  667 	mov	sp,a
      000158 E5*00            [12]  668 	mov	a,_bp
      00015A 24 0B            [12]  669 	add	a,#0x0b
      00015C F8               [12]  670 	mov	r0,a
      00015D E6               [12]  671 	mov	a,@r0
      00015E 2C               [12]  672 	add	a,r4
      00015F FC               [12]  673 	mov	r4,a
      000160 08               [12]  674 	inc	r0
      000161 E6               [12]  675 	mov	a,@r0
      000162 3D               [12]  676 	addc	a,r5
      000163 FD               [12]  677 	mov	r5,a
      000164 08               [12]  678 	inc	r0
      000165 E6               [12]  679 	mov	a,@r0
      000166 3E               [12]  680 	addc	a,r6
      000167 FE               [12]  681 	mov	r6,a
      000168 08               [12]  682 	inc	r0
      000169 E6               [12]  683 	mov	a,@r0
      00016A 3F               [12]  684 	addc	a,r7
      00016B FF               [12]  685 	mov	r7,a
      00016C A8*00            [24]  686 	mov	r0,_bp
      00016E 08               [12]  687 	inc	r0
      00016F 86 82            [24]  688 	mov	dpl,@r0
      000171 08               [12]  689 	inc	r0
      000172 86 83            [24]  690 	mov	dph,@r0
      000174 08               [12]  691 	inc	r0
      000175 86 F0            [24]  692 	mov	b,@r0
      000177 EC               [12]  693 	mov	a,r4
      000178 12r00r00         [24]  694 	lcall	__gptrput
      00017B A3               [24]  695 	inc	dptr
      00017C ED               [12]  696 	mov	a,r5
      00017D 12r00r00         [24]  697 	lcall	__gptrput
      000180 A3               [24]  698 	inc	dptr
      000181 EE               [12]  699 	mov	a,r6
      000182 12r00r00         [24]  700 	lcall	__gptrput
      000185 A3               [24]  701 	inc	dptr
      000186 EF               [12]  702 	mov	a,r7
      000187 12r00r00         [24]  703 	lcall	__gptrput
                                    704 ;	calc.c:98: return 1;
      00018A 90 00 01         [24]  705 	mov	dptr,#0x0001
                                    706 ;	calc.c:99: }
      00018D 85*00 81         [24]  707 	mov	sp,_bp
      000190 D0*00            [24]  708 	pop	_bp
      000192 22               [24]  709 	ret
                                    710 ;------------------------------------------------------------
                                    711 ;Allocation info for local variables in function 'dump_pop'
                                    712 ;------------------------------------------------------------
                                    713 ;delta                     Allocated to stack - _bp -5
                                    714 ;_ctx                      Allocated to registers r5 r6 r7 
                                    715 ;ctx                       Allocated to stack - _bp +5
                                    716 ;d                         Allocated to stack - _bp +8
                                    717 ;r                         Allocated to stack - _bp +2
                                    718 ;__1310720001              Allocated to registers 
                                    719 ;s                         Allocated to registers r5 r6 r7 
                                    720 ;__1966080003              Allocated to registers 
                                    721 ;s                         Allocated to registers r4 r5 r6 
                                    722 ;sloc0                     Allocated to stack - _bp +1
                                    723 ;sloc1                     Allocated to stack - _bp +2
                                    724 ;------------------------------------------------------------
                                    725 ;	calc.c:101: static int dump_pop(void *_ctx, delta_t *delta) __reentrant {
                                    726 ;	-----------------------------------------
                                    727 ;	 function dump_pop
                                    728 ;	-----------------------------------------
      000193                        729 _dump_pop:
      000193 C0*00            [24]  730 	push	_bp
      000195 E5 81            [12]  731 	mov	a,sp
      000197 F5*00            [12]  732 	mov	_bp,a
      000199 24 0B            [12]  733 	add	a,#0x0b
      00019B F5 81            [12]  734 	mov	sp,a
      00019D AD 82            [24]  735 	mov	r5,dpl
      00019F AE 83            [24]  736 	mov	r6,dph
      0001A1 AF F0            [24]  737 	mov	r7,b
                                    738 ;	calc.c:102: struct ctx *ctx = (struct ctx *)_ctx;
      0001A3 E5*00            [12]  739 	mov	a,_bp
      0001A5 24 05            [12]  740 	add	a,#0x05
      0001A7 F8               [12]  741 	mov	r0,a
      0001A8 A6 05            [24]  742 	mov	@r0,ar5
      0001AA 08               [12]  743 	inc	r0
      0001AB A6 06            [24]  744 	mov	@r0,ar6
      0001AD 08               [12]  745 	inc	r0
      0001AE A6 07            [24]  746 	mov	@r0,ar7
                                    747 ;	calc.c:106: if (delta->event == EVENT_TERM) printstr("\r\n");
      0001B0 E5*00            [12]  748 	mov	a,_bp
      0001B2 24 FB            [12]  749 	add	a,#0xfb
      0001B4 F8               [12]  750 	mov	r0,a
      0001B5 86 02            [24]  751 	mov	ar2,@r0
      0001B7 08               [12]  752 	inc	r0
      0001B8 86 03            [24]  753 	mov	ar3,@r0
      0001BA 08               [12]  754 	inc	r0
      0001BB 86 04            [24]  755 	mov	ar4,@r0
      0001BD 74 02            [12]  756 	mov	a,#0x02
      0001BF 2A               [12]  757 	add	a,r2
      0001C0 FA               [12]  758 	mov	r2,a
      0001C1 E4               [12]  759 	clr	a
      0001C2 3B               [12]  760 	addc	a,r3
      0001C3 FB               [12]  761 	mov	r3,a
      0001C4 8A 82            [24]  762 	mov	dpl,r2
      0001C6 8B 83            [24]  763 	mov	dph,r3
      0001C8 8C F0            [24]  764 	mov	b,r4
      0001CA 12r00r00         [24]  765 	lcall	__gptrget
      0001CD FE               [12]  766 	mov	r6,a
      0001CE A3               [24]  767 	inc	dptr
      0001CF 12r00r00         [24]  768 	lcall	__gptrget
      0001D2 FF               [12]  769 	mov	r7,a
      0001D3 BE 07 3D         [24]  770 	cjne	r6,#0x07,00102$
      0001D6 BF 00 3A         [24]  771 	cjne	r7,#0x00,00102$
      0001D9 7Dr00            [12]  772 	mov	r5,#___str_0
      0001DB 7Es00            [12]  773 	mov	r6,#(___str_0 >> 8)
      0001DD 7F 80            [12]  774 	mov	r7,#0x80
                                    775 ;	calc.c:50: return;
      0001DF                        776 00116$:
                                    777 ;	calc.c:48: for (; *s; s++) putchar(*s);
      0001DF 8D 82            [24]  778 	mov	dpl,r5
      0001E1 8E 83            [24]  779 	mov	dph,r6
      0001E3 8F F0            [24]  780 	mov	b,r7
      0001E5 A8*00            [24]  781 	mov	r0,_bp
      0001E7 08               [12]  782 	inc	r0
      0001E8 12r00r00         [24]  783 	lcall	__gptrget
      0001EB F6               [12]  784 	mov	@r0,a
      0001EC A8*00            [24]  785 	mov	r0,_bp
      0001EE 08               [12]  786 	inc	r0
      0001EF E6               [12]  787 	mov	a,@r0
      0001F0 60 21            [24]  788 	jz	00102$
      0001F2 C0 02            [24]  789 	push	ar2
      0001F4 C0 03            [24]  790 	push	ar3
      0001F6 C0 04            [24]  791 	push	ar4
      0001F8 A8*00            [24]  792 	mov	r0,_bp
      0001FA 08               [12]  793 	inc	r0
      0001FB 86 03            [24]  794 	mov	ar3,@r0
      0001FD 7C 00            [12]  795 	mov	r4,#0x00
      0001FF 8B 82            [24]  796 	mov	dpl,r3
      000201 8C 83            [24]  797 	mov	dph,r4
      000203 12r00r00         [24]  798 	lcall	_putchar
      000206 0D               [12]  799 	inc	r5
      000207 BD 00 01         [24]  800 	cjne	r5,#0x00,00170$
      00020A 0E               [12]  801 	inc	r6
      00020B                        802 00170$:
      00020B D0 04            [24]  803 	pop	ar4
      00020D D0 03            [24]  804 	pop	ar3
      00020F D0 02            [24]  805 	pop	ar2
                                    806 ;	calc.c:106: if (delta->event == EVENT_TERM) printstr("\r\n");
      000211 80 CC            [24]  807 	sjmp	00116$
      000213                        808 00102$:
                                    809 ;	calc.c:108: r = stack_pop(&ctx->s, &d);
      000213 C0 02            [24]  810 	push	ar2
      000215 C0 03            [24]  811 	push	ar3
      000217 C0 04            [24]  812 	push	ar4
      000219 E5*00            [12]  813 	mov	a,_bp
      00021B 24 08            [12]  814 	add	a,#0x08
      00021D FF               [12]  815 	mov	r7,a
      00021E A8*00            [24]  816 	mov	r0,_bp
      000220 08               [12]  817 	inc	r0
      000221 08               [12]  818 	inc	r0
      000222 A6 07            [24]  819 	mov	@r0,ar7
      000224 08               [12]  820 	inc	r0
      000225 76 00            [12]  821 	mov	@r0,#0x00
      000227 08               [12]  822 	inc	r0
      000228 76 40            [12]  823 	mov	@r0,#0x40
      00022A E5*00            [12]  824 	mov	a,_bp
      00022C 24 05            [12]  825 	add	a,#0x05
      00022E F8               [12]  826 	mov	r0,a
      00022F 74 09            [12]  827 	mov	a,#0x09
      000231 26               [12]  828 	add	a,@r0
      000232 FA               [12]  829 	mov	r2,a
      000233 E4               [12]  830 	clr	a
      000234 08               [12]  831 	inc	r0
      000235 36               [12]  832 	addc	a,@r0
      000236 FB               [12]  833 	mov	r3,a
      000237 08               [12]  834 	inc	r0
      000238 86 06            [24]  835 	mov	ar6,@r0
      00023A C0 07            [24]  836 	push	ar7
      00023C C0 04            [24]  837 	push	ar4
      00023E C0 03            [24]  838 	push	ar3
      000240 C0 02            [24]  839 	push	ar2
      000242 A8*00            [24]  840 	mov	r0,_bp
      000244 08               [12]  841 	inc	r0
      000245 08               [12]  842 	inc	r0
      000246 E6               [12]  843 	mov	a,@r0
      000247 C0 E0            [24]  844 	push	acc
      000249 08               [12]  845 	inc	r0
      00024A E6               [12]  846 	mov	a,@r0
      00024B C0 E0            [24]  847 	push	acc
      00024D 08               [12]  848 	inc	r0
      00024E E6               [12]  849 	mov	a,@r0
      00024F C0 E0            [24]  850 	push	acc
      000251 8A 82            [24]  851 	mov	dpl,r2
      000253 8B 83            [24]  852 	mov	dph,r3
      000255 8E F0            [24]  853 	mov	b,r6
      000257 12r00r00         [24]  854 	lcall	_stack_pop
      00025A AD 82            [24]  855 	mov	r5,dpl
      00025C AE 83            [24]  856 	mov	r6,dph
      00025E 15 81            [12]  857 	dec	sp
      000260 15 81            [12]  858 	dec	sp
      000262 15 81            [12]  859 	dec	sp
      000264 D0 02            [24]  860 	pop	ar2
      000266 D0 03            [24]  861 	pop	ar3
      000268 D0 04            [24]  862 	pop	ar4
      00026A D0 07            [24]  863 	pop	ar7
      00026C A8*00            [24]  864 	mov	r0,_bp
      00026E 08               [12]  865 	inc	r0
      00026F 08               [12]  866 	inc	r0
      000270 A6 05            [24]  867 	mov	@r0,ar5
      000272 08               [12]  868 	inc	r0
      000273 A6 06            [24]  869 	mov	@r0,ar6
                                    870 ;	calc.c:109: if (!r) {
      000275 D0 04            [24]  871 	pop	ar4
      000277 D0 03            [24]  872 	pop	ar3
      000279 D0 02            [24]  873 	pop	ar2
      00027B ED               [12]  874 	mov	a,r5
      00027C 4E               [12]  875 	orl	a,r6
      00027D 70 3D            [24]  876 	jnz	00134$
                                    877 ;	calc.c:110: if (delta->event != EVENT_TERM) printstr("stack underflow\r\n");
      00027F 8A 82            [24]  878 	mov	dpl,r2
      000281 8B 83            [24]  879 	mov	dph,r3
      000283 8C F0            [24]  880 	mov	b,r4
      000285 12r00r00         [24]  881 	lcall	__gptrget
      000288 FA               [12]  882 	mov	r2,a
      000289 A3               [24]  883 	inc	dptr
      00028A 12r00r00         [24]  884 	lcall	__gptrget
      00028D FB               [12]  885 	mov	r3,a
      00028E BA 07 06         [24]  886 	cjne	r2,#0x07,00172$
      000291 BB 00 03         [24]  887 	cjne	r3,#0x00,00172$
      000294 02r03r6C         [24]  888 	ljmp	00110$
      000297                        889 00172$:
      000297 7Cr03            [12]  890 	mov	r4,#___str_1
      000299 7Ds00            [12]  891 	mov	r5,#(___str_1 >> 8)
      00029B 7E 80            [12]  892 	mov	r6,#0x80
                                    893 ;	calc.c:50: return;
      00029D                        894 00119$:
                                    895 ;	calc.c:48: for (; *s; s++) putchar(*s);
      00029D 8C 82            [24]  896 	mov	dpl,r4
      00029F 8D 83            [24]  897 	mov	dph,r5
      0002A1 8E F0            [24]  898 	mov	b,r6
      0002A3 12r00r00         [24]  899 	lcall	__gptrget
      0002A6 FB               [12]  900 	mov	r3,a
      0002A7 70 03            [24]  901 	jnz	00173$
      0002A9 02r03r6C         [24]  902 	ljmp	00110$
      0002AC                        903 00173$:
      0002AC 7A 00            [12]  904 	mov	r2,#0x00
      0002AE 8B 82            [24]  905 	mov	dpl,r3
      0002B0 8A 83            [24]  906 	mov	dph,r2
      0002B2 12r00r00         [24]  907 	lcall	_putchar
      0002B5 0C               [12]  908 	inc	r4
                                    909 ;	calc.c:111: } else while (r > 0) {
      0002B6 BC 00 E4         [24]  910 	cjne	r4,#0x00,00119$
      0002B9 0D               [12]  911 	inc	r5
      0002BA 80 E1            [24]  912 	sjmp	00119$
      0002BC                        913 00134$:
      0002BC                        914 00105$:
      0002BC A8*00            [24]  915 	mov	r0,_bp
      0002BE 08               [12]  916 	inc	r0
      0002BF 08               [12]  917 	inc	r0
      0002C0 C3               [12]  918 	clr	c
      0002C1 E4               [12]  919 	clr	a
      0002C2 96               [12]  920 	subb	a,@r0
      0002C3 74 80            [12]  921 	mov	a,#(0x00 ^ 0x80)
      0002C5 08               [12]  922 	inc	r0
      0002C6 86 F0            [24]  923 	mov	b,@r0
      0002C8 63 F0 80         [24]  924 	xrl	b,#0x80
      0002CB 95 F0            [12]  925 	subb	a,b
      0002CD 40 03            [24]  926 	jc	00175$
      0002CF 02r03r6C         [24]  927 	ljmp	00110$
      0002D2                        928 00175$:
                                    929 ;	calc.c:112: printf((ctx->base == 16l) ? hexV : decV, d);
      0002D2 E5*00            [12]  930 	mov	a,_bp
      0002D4 24 05            [12]  931 	add	a,#0x05
      0002D6 F8               [12]  932 	mov	r0,a
      0002D7 86 82            [24]  933 	mov	dpl,@r0
      0002D9 08               [12]  934 	inc	r0
      0002DA 86 83            [24]  935 	mov	dph,@r0
      0002DC 08               [12]  936 	inc	r0
      0002DD 86 F0            [24]  937 	mov	b,@r0
      0002DF 12r00r00         [24]  938 	lcall	__gptrget
      0002E2 FD               [12]  939 	mov	r5,a
      0002E3 A3               [24]  940 	inc	dptr
      0002E4 12r00r00         [24]  941 	lcall	__gptrget
      0002E7 FE               [12]  942 	mov	r6,a
      0002E8 BD 10 10         [24]  943 	cjne	r5,#0x10,00123$
      0002EB BE 00 0D         [24]  944 	cjne	r6,#0x00,00123$
      0002EE 90r00r12         [24]  945 	mov	dptr,#_hexV
      0002F1 E0               [24]  946 	movx	a,@dptr
      0002F2 FC               [12]  947 	mov	r4,a
      0002F3 A3               [24]  948 	inc	dptr
      0002F4 E0               [24]  949 	movx	a,@dptr
      0002F5 FD               [12]  950 	mov	r5,a
      0002F6 A3               [24]  951 	inc	dptr
      0002F7 E0               [24]  952 	movx	a,@dptr
      0002F8 FE               [12]  953 	mov	r6,a
      0002F9 80 0B            [24]  954 	sjmp	00124$
      0002FB                        955 00123$:
      0002FB 90r00r15         [24]  956 	mov	dptr,#_decV
      0002FE E0               [24]  957 	movx	a,@dptr
      0002FF FC               [12]  958 	mov	r4,a
      000300 A3               [24]  959 	inc	dptr
      000301 E0               [24]  960 	movx	a,@dptr
      000302 FD               [12]  961 	mov	r5,a
      000303 A3               [24]  962 	inc	dptr
      000304 E0               [24]  963 	movx	a,@dptr
      000305 FE               [12]  964 	mov	r6,a
      000306                        965 00124$:
      000306 C0 07            [24]  966 	push	ar7
      000308 E5*00            [12]  967 	mov	a,_bp
      00030A 24 08            [12]  968 	add	a,#0x08
      00030C F8               [12]  969 	mov	r0,a
      00030D E6               [12]  970 	mov	a,@r0
      00030E C0 E0            [24]  971 	push	acc
      000310 08               [12]  972 	inc	r0
      000311 E6               [12]  973 	mov	a,@r0
      000312 C0 E0            [24]  974 	push	acc
      000314 08               [12]  975 	inc	r0
      000315 E6               [12]  976 	mov	a,@r0
      000316 C0 E0            [24]  977 	push	acc
      000318 08               [12]  978 	inc	r0
      000319 E6               [12]  979 	mov	a,@r0
      00031A C0 E0            [24]  980 	push	acc
      00031C C0 04            [24]  981 	push	ar4
      00031E C0 05            [24]  982 	push	ar5
      000320 C0 06            [24]  983 	push	ar6
      000322 12r00r00         [24]  984 	lcall	_printf
      000325 E5 81            [12]  985 	mov	a,sp
      000327 24 F9            [12]  986 	add	a,#0xf9
      000329 F5 81            [12]  987 	mov	sp,a
      00032B D0 07            [24]  988 	pop	ar7
                                    989 ;	calc.c:113: r = stack_pop(&ctx->s, &d);
      00032D 8F 04            [24]  990 	mov	ar4,r7
      00032F 7D 00            [12]  991 	mov	r5,#0x00
      000331 7E 40            [12]  992 	mov	r6,#0x40
      000333 C0 07            [24]  993 	push	ar7
      000335 E5*00            [12]  994 	mov	a,_bp
      000337 24 05            [12]  995 	add	a,#0x05
      000339 F8               [12]  996 	mov	r0,a
      00033A 74 09            [12]  997 	mov	a,#0x09
      00033C 26               [12]  998 	add	a,@r0
      00033D FA               [12]  999 	mov	r2,a
      00033E E4               [12] 1000 	clr	a
      00033F 08               [12] 1001 	inc	r0
      000340 36               [12] 1002 	addc	a,@r0
      000341 FB               [12] 1003 	mov	r3,a
      000342 08               [12] 1004 	inc	r0
      000343 86 07            [24] 1005 	mov	ar7,@r0
      000345 C0 04            [24] 1006 	push	ar4
      000347 C0 05            [24] 1007 	push	ar5
      000349 C0 06            [24] 1008 	push	ar6
      00034B 8A 82            [24] 1009 	mov	dpl,r2
      00034D 8B 83            [24] 1010 	mov	dph,r3
      00034F 8F F0            [24] 1011 	mov	b,r7
      000351 12r00r00         [24] 1012 	lcall	_stack_pop
      000354 AE 82            [24] 1013 	mov	r6,dpl
      000356 AF 83            [24] 1014 	mov	r7,dph
      000358 15 81            [12] 1015 	dec	sp
      00035A 15 81            [12] 1016 	dec	sp
      00035C 15 81            [12] 1017 	dec	sp
      00035E A8*00            [24] 1018 	mov	r0,_bp
      000360 08               [12] 1019 	inc	r0
      000361 08               [12] 1020 	inc	r0
      000362 A6 06            [24] 1021 	mov	@r0,ar6
      000364 08               [12] 1022 	inc	r0
      000365 A6 07            [24] 1023 	mov	@r0,ar7
      000367 D0 07            [24] 1024 	pop	ar7
      000369 02r02rBC         [24] 1025 	ljmp	00105$
      00036C                       1026 00110$:
                                   1027 ;	calc.c:116: return 1;
      00036C 90 00 01         [24] 1028 	mov	dptr,#0x0001
                                   1029 ;	calc.c:117: }
      00036F 85*00 81         [24] 1030 	mov	sp,_bp
      000372 D0*00            [24] 1031 	pop	_bp
      000374 22               [24] 1032 	ret
                                   1033 ;------------------------------------------------------------
                                   1034 ;Allocation info for local variables in function 'dump_peek'
                                   1035 ;------------------------------------------------------------
                                   1036 ;d                         Allocated to stack - _bp -6
                                   1037 ;_ctx                      Allocated to registers r5 r6 r7 
                                   1038 ;ctx                       Allocated to registers r5 r6 r7 
                                   1039 ;------------------------------------------------------------
                                   1040 ;	calc.c:119: static int dump_peek(void *_ctx, long d) __reentrant {
                                   1041 ;	-----------------------------------------
                                   1042 ;	 function dump_peek
                                   1043 ;	-----------------------------------------
      000375                       1044 _dump_peek:
      000375 C0*00            [24] 1045 	push	_bp
      000377 85 81*00         [24] 1046 	mov	_bp,sp
                                   1047 ;	calc.c:120: struct ctx *ctx = (struct ctx *)_ctx;
                                   1048 ;	calc.c:122: printf((ctx->base == 16l) ? hexP : decP, d);
      00037A 12r00r00         [24] 1049 	lcall	__gptrget
      00037D FD               [12] 1050 	mov	r5,a
      00037E A3               [24] 1051 	inc	dptr
      00037F 12r00r00         [24] 1052 	lcall	__gptrget
      000382 FE               [12] 1053 	mov	r6,a
      000383 BD 10 10         [24] 1054 	cjne	r5,#0x10,00103$
      000386 BE 00 0D         [24] 1055 	cjne	r6,#0x00,00103$
      000389 90r00r06         [24] 1056 	mov	dptr,#_hexP
      00038C E0               [24] 1057 	movx	a,@dptr
      00038D FD               [12] 1058 	mov	r5,a
      00038E A3               [24] 1059 	inc	dptr
      00038F E0               [24] 1060 	movx	a,@dptr
      000390 FE               [12] 1061 	mov	r6,a
      000391 A3               [24] 1062 	inc	dptr
      000392 E0               [24] 1063 	movx	a,@dptr
      000393 FF               [12] 1064 	mov	r7,a
      000394 80 0B            [24] 1065 	sjmp	00104$
      000396                       1066 00103$:
      000396 90r00r09         [24] 1067 	mov	dptr,#_decP
      000399 E0               [24] 1068 	movx	a,@dptr
      00039A FD               [12] 1069 	mov	r5,a
      00039B A3               [24] 1070 	inc	dptr
      00039C E0               [24] 1071 	movx	a,@dptr
      00039D FE               [12] 1072 	mov	r6,a
      00039E A3               [24] 1073 	inc	dptr
      00039F E0               [24] 1074 	movx	a,@dptr
      0003A0 FF               [12] 1075 	mov	r7,a
      0003A1                       1076 00104$:
      0003A1 E5*00            [12] 1077 	mov	a,_bp
      0003A3 24 FA            [12] 1078 	add	a,#0xfa
      0003A5 F8               [12] 1079 	mov	r0,a
      0003A6 E6               [12] 1080 	mov	a,@r0
      0003A7 C0 E0            [24] 1081 	push	acc
      0003A9 08               [12] 1082 	inc	r0
      0003AA E6               [12] 1083 	mov	a,@r0
      0003AB C0 E0            [24] 1084 	push	acc
      0003AD 08               [12] 1085 	inc	r0
      0003AE E6               [12] 1086 	mov	a,@r0
      0003AF C0 E0            [24] 1087 	push	acc
      0003B1 08               [12] 1088 	inc	r0
      0003B2 E6               [12] 1089 	mov	a,@r0
      0003B3 C0 E0            [24] 1090 	push	acc
      0003B5 C0 05            [24] 1091 	push	ar5
      0003B7 C0 06            [24] 1092 	push	ar6
      0003B9 C0 07            [24] 1093 	push	ar7
      0003BB 12r00r00         [24] 1094 	lcall	_printf
      0003BE E5 81            [12] 1095 	mov	a,sp
      0003C0 24 F9            [12] 1096 	add	a,#0xf9
      0003C2 F5 81            [12] 1097 	mov	sp,a
                                   1098 ;	calc.c:124: return 1;
      0003C4 90 00 01         [24] 1099 	mov	dptr,#0x0001
                                   1100 ;	calc.c:125: }
      0003C7 D0*00            [24] 1101 	pop	_bp
      0003C9 22               [24] 1102 	ret
                                   1103 ;------------------------------------------------------------
                                   1104 ;Allocation info for local variables in function 'operator'
                                   1105 ;------------------------------------------------------------
                                   1106 ;delta                     Allocated to stack - _bp -5
                                   1107 ;_ctx                      Allocated to stack - _bp +1
                                   1108 ;ctx                       Allocated to stack - _bp +4
                                   1109 ;d0                        Allocated to stack - _bp +7
                                   1110 ;d1                        Allocated to stack - _bp +11
                                   1111 ;__1966080005              Allocated to registers 
                                   1112 ;s                         Allocated to registers r5 r4 r3 
                                   1113 ;__1966080007              Allocated to registers 
                                   1114 ;s                         Allocated to registers r5 r6 r7 
                                   1115 ;__1966080009              Allocated to registers 
                                   1116 ;s                         Allocated to registers r5 r6 r7 
                                   1117 ;__1966080011              Allocated to registers 
                                   1118 ;s                         Allocated to registers r5 r6 r7 
                                   1119 ;__1966080013              Allocated to registers 
                                   1120 ;s                         Allocated to registers r5 r6 r7 
                                   1121 ;__1966080015              Allocated to registers 
                                   1122 ;s                         Allocated to registers r5 r6 r7 
                                   1123 ;__1966080017              Allocated to registers 
                                   1124 ;s                         Allocated to registers r5 r6 r7 
                                   1125 ;__1966080019              Allocated to registers 
                                   1126 ;s                         Allocated to registers r5 r6 r7 
                                   1127 ;__2621440021              Allocated to registers 
                                   1128 ;s                         Allocated to registers r5 r6 r7 
                                   1129 ;__1966080023              Allocated to registers 
                                   1130 ;s                         Allocated to registers r5 r6 r7 
                                   1131 ;__2621440025              Allocated to registers 
                                   1132 ;s                         Allocated to registers r5 r6 r7 
                                   1133 ;__1966080027              Allocated to registers 
                                   1134 ;s                         Allocated to registers r5 r6 r7 
                                   1135 ;__2621440029              Allocated to registers 
                                   1136 ;s                         Allocated to registers r5 r6 r7 
                                   1137 ;__1966080031              Allocated to registers 
                                   1138 ;s                         Allocated to registers r5 r6 r7 
                                   1139 ;__2621440033              Allocated to registers 
                                   1140 ;s                         Allocated to registers r5 r6 r7 
                                   1141 ;__1966080035              Allocated to registers 
                                   1142 ;s                         Allocated to registers r5 r6 r7 
                                   1143 ;__2621440037              Allocated to registers 
                                   1144 ;s                         Allocated to registers r5 r6 r7 
                                   1145 ;__2621440039              Allocated to registers 
                                   1146 ;s                         Allocated to registers r5 r6 r7 
                                   1147 ;__1966080041              Allocated to registers 
                                   1148 ;s                         Allocated to registers r5 r6 r7 
                                   1149 ;__2621440043              Allocated to registers 
                                   1150 ;s                         Allocated to registers r5 r6 r7 
                                   1151 ;__2621440045              Allocated to registers 
                                   1152 ;s                         Allocated to registers r5 r6 r7 
                                   1153 ;__1966080047              Allocated to registers 
                                   1154 ;s                         Allocated to registers r5 r6 r7 
                                   1155 ;__2621440049              Allocated to registers 
                                   1156 ;s                         Allocated to registers r5 r6 r7 
                                   1157 ;__1966080051              Allocated to registers 
                                   1158 ;s                         Allocated to registers r5 r6 r7 
                                   1159 ;__2621440053              Allocated to registers 
                                   1160 ;s                         Allocated to registers r5 r6 r7 
                                   1161 ;__1966080055              Allocated to registers 
                                   1162 ;s                         Allocated to registers r5 r6 r7 
                                   1163 ;__2621440057              Allocated to registers 
                                   1164 ;s                         Allocated to registers r5 r6 r7 
                                   1165 ;__1966080059              Allocated to registers 
                                   1166 ;s                         Allocated to registers r5 r6 r7 
                                   1167 ;------------------------------------------------------------
                                   1168 ;	calc.c:127: static int operator(void *_ctx, delta_t *delta) __reentrant {
                                   1169 ;	-----------------------------------------
                                   1170 ;	 function operator
                                   1171 ;	-----------------------------------------
      0003CA                       1172 _operator:
      0003CA C0*00            [24] 1173 	push	_bp
      0003CC 85 81*00         [24] 1174 	mov	_bp,sp
      0003CF C0 82            [24] 1175 	push	dpl
      0003D1 C0 83            [24] 1176 	push	dph
      0003D3 C0 F0            [24] 1177 	push	b
      0003D5 E5 81            [12] 1178 	mov	a,sp
      0003D7 24 0B            [12] 1179 	add	a,#0x0b
      0003D9 F5 81            [12] 1180 	mov	sp,a
                                   1181 ;	calc.c:128: struct ctx *ctx = (struct ctx *)_ctx;
      0003DB A8*00            [24] 1182 	mov	r0,_bp
      0003DD 08               [12] 1183 	inc	r0
      0003DE E5*00            [12] 1184 	mov	a,_bp
      0003E0 24 04            [12] 1185 	add	a,#0x04
      0003E2 F9               [12] 1186 	mov	r1,a
      0003E3 E6               [12] 1187 	mov	a,@r0
      0003E4 F7               [12] 1188 	mov	@r1,a
      0003E5 08               [12] 1189 	inc	r0
      0003E6 09               [12] 1190 	inc	r1
      0003E7 E6               [12] 1191 	mov	a,@r0
      0003E8 F7               [12] 1192 	mov	@r1,a
      0003E9 08               [12] 1193 	inc	r0
      0003EA 09               [12] 1194 	inc	r1
      0003EB E6               [12] 1195 	mov	a,@r0
      0003EC F7               [12] 1196 	mov	@r1,a
                                   1197 ;	calc.c:131: switch (ctx->digit[0]) {
      0003ED E5*00            [12] 1198 	mov	a,_bp
      0003EF 24 04            [12] 1199 	add	a,#0x04
      0003F1 F8               [12] 1200 	mov	r0,a
      0003F2 74 07            [12] 1201 	mov	a,#0x07
      0003F4 26               [12] 1202 	add	a,@r0
      0003F5 FD               [12] 1203 	mov	r5,a
      0003F6 E4               [12] 1204 	clr	a
      0003F7 08               [12] 1205 	inc	r0
      0003F8 36               [12] 1206 	addc	a,@r0
      0003F9 FE               [12] 1207 	mov	r6,a
      0003FA 08               [12] 1208 	inc	r0
      0003FB 86 07            [24] 1209 	mov	ar7,@r0
      0003FD 8D 82            [24] 1210 	mov	dpl,r5
      0003FF 8E 83            [24] 1211 	mov	dph,r6
      000401 8F F0            [24] 1212 	mov	b,r7
      000403 12r00r00         [24] 1213 	lcall	__gptrget
      000406 FF               [12] 1214 	mov	r7,a
      000407 BF 25 03         [24] 1215 	cjne	r7,#0x25,00751$
      00040A 02r0Er0F         [24] 1216 	ljmp	00152$
      00040D                       1217 00751$:
      00040D BF 26 03         [24] 1218 	cjne	r7,#0x26,00752$
      000410 02r10r0D         [24] 1219 	ljmp	00162$
      000413                       1220 00752$:
      000413 BF 2A 03         [24] 1221 	cjne	r7,#0x2a,00753$
      000416 02r0ArAF         [24] 1222 	ljmp	00135$
      000419                       1223 00753$:
      000419 BF 2B 03         [24] 1224 	cjne	r7,#0x2b,00754$
      00041C 02r08r38         [24] 1225 	ljmp	00121$
      00041F                       1226 00754$:
      00041F BF 2D 03         [24] 1227 	cjne	r7,#0x2d,00755$
      000422 02r09r73         [24] 1228 	ljmp	00128$
      000425                       1229 00755$:
      000425 BF 2E 03         [24] 1230 	cjne	r7,#0x2e,00756$
      000428 02r05rC6         [24] 1231 	ljmp	00109$
      00042B                       1232 00756$:
      00042B BF 2F 03         [24] 1233 	cjne	r7,#0x2f,00757$
      00042E 02r0Cr11         [24] 1234 	ljmp	00142$
      000431                       1235 00757$:
      000431 BF 50 03         [24] 1236 	cjne	r7,#0x50,00758$
      000434 02r05r3A         [24] 1237 	ljmp	00105$
      000437                       1238 00758$:
      000437 BF 56 03         [24] 1239 	cjne	r7,#0x56,00759$
      00043A 02r06r9D         [24] 1240 	ljmp	00113$
      00043D                       1241 00759$:
      00043D BF 5E 03         [24] 1242 	cjne	r7,#0x5e,00760$
      000440 02r12r83         [24] 1243 	ljmp	00176$
      000443                       1244 00760$:
      000443 BF 70 02         [24] 1245 	cjne	r7,#0x70,00761$
      000446 80 1B            [24] 1246 	sjmp	00101$
      000448                       1247 00761$:
      000448 BF 76 03         [24] 1248 	cjne	r7,#0x76,00762$
      00044B 02r05rC6         [24] 1249 	ljmp	00109$
      00044E                       1250 00762$:
      00044E BF 78 03         [24] 1251 	cjne	r7,#0x78,00763$
      000451 02r06rE6         [24] 1252 	ljmp	00114$
      000454                       1253 00763$:
      000454 BF 7C 03         [24] 1254 	cjne	r7,#0x7c,00764$
      000457 02r11r48         [24] 1255 	ljmp	00169$
      00045A                       1256 00764$:
      00045A BF 7E 03         [24] 1257 	cjne	r7,#0x7e,00765$
      00045D 02r13rBE         [24] 1258 	ljmp	00183$
      000460                       1259 00765$:
      000460 02r14r5F         [24] 1260 	ljmp	00187$
                                   1261 ;	calc.c:132: case 'p':
      000463                       1262 00101$:
                                   1263 ;	calc.c:133: printstr("\r\n");
      000463 7Dr00            [12] 1264 	mov	r5,#___str_0
      000465 7Cs00            [12] 1265 	mov	r4,#(___str_0 >> 8)
      000467 7B 80            [12] 1266 	mov	r3,#0x80
                                   1267 ;	calc.c:50: return;
      000469                       1268 00246$:
                                   1269 ;	calc.c:48: for (; *s; s++) putchar(*s);
      000469 8D 82            [24] 1270 	mov	dpl,r5
      00046B 8C 83            [24] 1271 	mov	dph,r4
      00046D 8B F0            [24] 1272 	mov	b,r3
      00046F 12r00r00         [24] 1273 	lcall	__gptrget
      000472 FF               [12] 1274 	mov	r7,a
      000473 60 10            [24] 1275 	jz	00190$
      000475 7E 00            [12] 1276 	mov	r6,#0x00
      000477 8F 82            [24] 1277 	mov	dpl,r7
      000479 8E 83            [24] 1278 	mov	dph,r6
      00047B 12r00r00         [24] 1279 	lcall	_putchar
      00047E 0D               [12] 1280 	inc	r5
                                   1281 ;	calc.c:133: printstr("\r\n");
      00047F BD 00 E7         [24] 1282 	cjne	r5,#0x00,00246$
      000482 0C               [12] 1283 	inc	r4
      000483 80 E4            [24] 1284 	sjmp	00246$
      000485                       1285 00190$:
                                   1286 ;	calc.c:134: if (!stack_peek(&ctx->s, &d0)) printstr("stack underflow\r\n");
      000485 E5*00            [12] 1287 	mov	a,_bp
      000487 24 07            [12] 1288 	add	a,#0x07
      000489 FF               [12] 1289 	mov	r7,a
      00048A 7E 00            [12] 1290 	mov	r6,#0x00
      00048C 7D 40            [12] 1291 	mov	r5,#0x40
      00048E E5*00            [12] 1292 	mov	a,_bp
      000490 24 04            [12] 1293 	add	a,#0x04
      000492 F8               [12] 1294 	mov	r0,a
      000493 74 09            [12] 1295 	mov	a,#0x09
      000495 26               [12] 1296 	add	a,@r0
      000496 FA               [12] 1297 	mov	r2,a
      000497 E4               [12] 1298 	clr	a
      000498 08               [12] 1299 	inc	r0
      000499 36               [12] 1300 	addc	a,@r0
      00049A FB               [12] 1301 	mov	r3,a
      00049B 08               [12] 1302 	inc	r0
      00049C 86 04            [24] 1303 	mov	ar4,@r0
      00049E C0 07            [24] 1304 	push	ar7
      0004A0 C0 06            [24] 1305 	push	ar6
      0004A2 C0 05            [24] 1306 	push	ar5
      0004A4 8A 82            [24] 1307 	mov	dpl,r2
      0004A6 8B 83            [24] 1308 	mov	dph,r3
      0004A8 8C F0            [24] 1309 	mov	b,r4
      0004AA 12r00r00         [24] 1310 	lcall	_stack_peek
      0004AD AE 82            [24] 1311 	mov	r6,dpl
      0004AF AF 83            [24] 1312 	mov	r7,dph
      0004B1 15 81            [12] 1313 	dec	sp
      0004B3 15 81            [12] 1314 	dec	sp
      0004B5 15 81            [12] 1315 	dec	sp
      0004B7 EE               [12] 1316 	mov	a,r6
      0004B8 4F               [12] 1317 	orl	a,r7
      0004B9 70 25            [24] 1318 	jnz	00103$
      0004BB 7Dr03            [12] 1319 	mov	r5,#___str_1
      0004BD 7Es00            [12] 1320 	mov	r6,#(___str_1 >> 8)
      0004BF 7F 80            [12] 1321 	mov	r7,#0x80
                                   1322 ;	calc.c:50: return;
      0004C1                       1323 00249$:
                                   1324 ;	calc.c:48: for (; *s; s++) putchar(*s);
      0004C1 8D 82            [24] 1325 	mov	dpl,r5
      0004C3 8E 83            [24] 1326 	mov	dph,r6
      0004C5 8F F0            [24] 1327 	mov	b,r7
      0004C7 12r00r00         [24] 1328 	lcall	__gptrget
      0004CA FC               [12] 1329 	mov	r4,a
      0004CB 70 03            [24] 1330 	jnz	00769$
      0004CD 02r14r64         [24] 1331 	ljmp	00188$
      0004D0                       1332 00769$:
      0004D0 7B 00            [12] 1333 	mov	r3,#0x00
      0004D2 8C 82            [24] 1334 	mov	dpl,r4
      0004D4 8B 83            [24] 1335 	mov	dph,r3
      0004D6 12r00r00         [24] 1336 	lcall	_putchar
      0004D9 0D               [12] 1337 	inc	r5
                                   1338 ;	calc.c:134: if (!stack_peek(&ctx->s, &d0)) printstr("stack underflow\r\n");
      0004DA BD 00 E4         [24] 1339 	cjne	r5,#0x00,00249$
      0004DD 0E               [12] 1340 	inc	r6
      0004DE 80 E1            [24] 1341 	sjmp	00249$
      0004E0                       1342 00103$:
                                   1343 ;	calc.c:136: printf((ctx->base == 16l) ? hexp : decp, d0);
      0004E0 E5*00            [12] 1344 	mov	a,_bp
      0004E2 24 04            [12] 1345 	add	a,#0x04
      0004E4 F8               [12] 1346 	mov	r0,a
      0004E5 86 82            [24] 1347 	mov	dpl,@r0
      0004E7 08               [12] 1348 	inc	r0
      0004E8 86 83            [24] 1349 	mov	dph,@r0
      0004EA 08               [12] 1350 	inc	r0
      0004EB 86 F0            [24] 1351 	mov	b,@r0
      0004ED 12r00r00         [24] 1352 	lcall	__gptrget
      0004F0 FE               [12] 1353 	mov	r6,a
      0004F1 A3               [24] 1354 	inc	dptr
      0004F2 12r00r00         [24] 1355 	lcall	__gptrget
      0004F5 FF               [12] 1356 	mov	r7,a
      0004F6 BE 10 10         [24] 1357 	cjne	r6,#0x10,00331$
      0004F9 BF 00 0D         [24] 1358 	cjne	r7,#0x00,00331$
      0004FC 90r00r00         [24] 1359 	mov	dptr,#_hexp
      0004FF E0               [24] 1360 	movx	a,@dptr
      000500 FD               [12] 1361 	mov	r5,a
      000501 A3               [24] 1362 	inc	dptr
      000502 E0               [24] 1363 	movx	a,@dptr
      000503 FE               [12] 1364 	mov	r6,a
      000504 A3               [24] 1365 	inc	dptr
      000505 E0               [24] 1366 	movx	a,@dptr
      000506 FF               [12] 1367 	mov	r7,a
      000507 80 0B            [24] 1368 	sjmp	00332$
      000509                       1369 00331$:
      000509 90r00r03         [24] 1370 	mov	dptr,#_decp
      00050C E0               [24] 1371 	movx	a,@dptr
      00050D FD               [12] 1372 	mov	r5,a
      00050E A3               [24] 1373 	inc	dptr
      00050F E0               [24] 1374 	movx	a,@dptr
      000510 FE               [12] 1375 	mov	r6,a
      000511 A3               [24] 1376 	inc	dptr
      000512 E0               [24] 1377 	movx	a,@dptr
      000513 FF               [12] 1378 	mov	r7,a
      000514                       1379 00332$:
      000514 E5*00            [12] 1380 	mov	a,_bp
      000516 24 07            [12] 1381 	add	a,#0x07
      000518 F8               [12] 1382 	mov	r0,a
      000519 E6               [12] 1383 	mov	a,@r0
      00051A C0 E0            [24] 1384 	push	acc
      00051C 08               [12] 1385 	inc	r0
      00051D E6               [12] 1386 	mov	a,@r0
      00051E C0 E0            [24] 1387 	push	acc
      000520 08               [12] 1388 	inc	r0
      000521 E6               [12] 1389 	mov	a,@r0
      000522 C0 E0            [24] 1390 	push	acc
      000524 08               [12] 1391 	inc	r0
      000525 E6               [12] 1392 	mov	a,@r0
      000526 C0 E0            [24] 1393 	push	acc
      000528 C0 05            [24] 1394 	push	ar5
      00052A C0 06            [24] 1395 	push	ar6
      00052C C0 07            [24] 1396 	push	ar7
      00052E 12r00r00         [24] 1397 	lcall	_printf
      000531 E5 81            [12] 1398 	mov	a,sp
      000533 24 F9            [12] 1399 	add	a,#0xf9
      000535 F5 81            [12] 1400 	mov	sp,a
                                   1401 ;	calc.c:138: break;
      000537 02r14r64         [24] 1402 	ljmp	00188$
                                   1403 ;	calc.c:139: case 'P':
      00053A                       1404 00105$:
                                   1405 ;	calc.c:140: printstr("\r\n");
      00053A 7Dr00            [12] 1406 	mov	r5,#___str_0
      00053C 7Es00            [12] 1407 	mov	r6,#(___str_0 >> 8)
      00053E 7F 80            [12] 1408 	mov	r7,#0x80
                                   1409 ;	calc.c:50: return;
      000540                       1410 00252$:
                                   1411 ;	calc.c:48: for (; *s; s++) putchar(*s);
      000540 8D 82            [24] 1412 	mov	dpl,r5
      000542 8E 83            [24] 1413 	mov	dph,r6
      000544 8F F0            [24] 1414 	mov	b,r7
      000546 12r00r00         [24] 1415 	lcall	__gptrget
      000549 FC               [12] 1416 	mov	r4,a
      00054A 60 10            [24] 1417 	jz	00194$
      00054C 7B 00            [12] 1418 	mov	r3,#0x00
      00054E 8C 82            [24] 1419 	mov	dpl,r4
      000550 8B 83            [24] 1420 	mov	dph,r3
      000552 12r00r00         [24] 1421 	lcall	_putchar
      000555 0D               [12] 1422 	inc	r5
                                   1423 ;	calc.c:140: printstr("\r\n");
      000556 BD 00 E7         [24] 1424 	cjne	r5,#0x00,00252$
      000559 0E               [12] 1425 	inc	r6
      00055A 80 E4            [24] 1426 	sjmp	00252$
      00055C                       1427 00194$:
                                   1428 ;	calc.c:141: if (!stack_iter_peek(&ctx->s, dump_peek, ctx)) printstr("stack underflow\r\n");
      00055C E5*00            [12] 1429 	mov	a,_bp
      00055E 24 04            [12] 1430 	add	a,#0x04
      000560 F8               [12] 1431 	mov	r0,a
      000561 86 02            [24] 1432 	mov	ar2,@r0
      000563 08               [12] 1433 	inc	r0
      000564 86 03            [24] 1434 	mov	ar3,@r0
      000566 08               [12] 1435 	inc	r0
      000567 86 04            [24] 1436 	mov	ar4,@r0
      000569 E5*00            [12] 1437 	mov	a,_bp
      00056B 24 04            [12] 1438 	add	a,#0x04
      00056D F8               [12] 1439 	mov	r0,a
      00056E 74 09            [12] 1440 	mov	a,#0x09
      000570 26               [12] 1441 	add	a,@r0
      000571 FD               [12] 1442 	mov	r5,a
      000572 E4               [12] 1443 	clr	a
      000573 08               [12] 1444 	inc	r0
      000574 36               [12] 1445 	addc	a,@r0
      000575 FE               [12] 1446 	mov	r6,a
      000576 08               [12] 1447 	inc	r0
      000577 86 07            [24] 1448 	mov	ar7,@r0
      000579 C0 02            [24] 1449 	push	ar2
      00057B C0 03            [24] 1450 	push	ar3
      00057D C0 04            [24] 1451 	push	ar4
      00057F 74r75            [12] 1452 	mov	a,#_dump_peek
      000581 C0 E0            [24] 1453 	push	acc
      000583 74s03            [12] 1454 	mov	a,#(_dump_peek >> 8)
      000585 C0 E0            [24] 1455 	push	acc
      000587 8D 82            [24] 1456 	mov	dpl,r5
      000589 8E 83            [24] 1457 	mov	dph,r6
      00058B 8F F0            [24] 1458 	mov	b,r7
      00058D 12r00r00         [24] 1459 	lcall	_stack_iter_peek
      000590 AE 82            [24] 1460 	mov	r6,dpl
      000592 AF 83            [24] 1461 	mov	r7,dph
      000594 E5 81            [12] 1462 	mov	a,sp
      000596 24 FB            [12] 1463 	add	a,#0xfb
      000598 F5 81            [12] 1464 	mov	sp,a
      00059A EE               [12] 1465 	mov	a,r6
      00059B 4F               [12] 1466 	orl	a,r7
      00059C 60 03            [24] 1467 	jz	00775$
      00059E 02r14r64         [24] 1468 	ljmp	00188$
      0005A1                       1469 00775$:
      0005A1 7Dr03            [12] 1470 	mov	r5,#___str_1
      0005A3 7Es00            [12] 1471 	mov	r6,#(___str_1 >> 8)
      0005A5 7F 80            [12] 1472 	mov	r7,#0x80
                                   1473 ;	calc.c:50: return;
      0005A7                       1474 00255$:
                                   1475 ;	calc.c:48: for (; *s; s++) putchar(*s);
      0005A7 8D 82            [24] 1476 	mov	dpl,r5
      0005A9 8E 83            [24] 1477 	mov	dph,r6
      0005AB 8F F0            [24] 1478 	mov	b,r7
      0005AD 12r00r00         [24] 1479 	lcall	__gptrget
      0005B0 FC               [12] 1480 	mov	r4,a
      0005B1 70 03            [24] 1481 	jnz	00776$
      0005B3 02r14r64         [24] 1482 	ljmp	00188$
      0005B6                       1483 00776$:
      0005B6 7B 00            [12] 1484 	mov	r3,#0x00
      0005B8 8C 82            [24] 1485 	mov	dpl,r4
      0005BA 8B 83            [24] 1486 	mov	dph,r3
      0005BC 12r00r00         [24] 1487 	lcall	_putchar
      0005BF 0D               [12] 1488 	inc	r5
                                   1489 ;	calc.c:144: case 'v':
      0005C0 BD 00 E4         [24] 1490 	cjne	r5,#0x00,00255$
      0005C3 0E               [12] 1491 	inc	r6
      0005C4 80 E1            [24] 1492 	sjmp	00255$
      0005C6                       1493 00109$:
                                   1494 ;	calc.c:145: printstr("\r\n");
      0005C6 7Dr00            [12] 1495 	mov	r5,#___str_0
      0005C8 7Es00            [12] 1496 	mov	r6,#(___str_0 >> 8)
      0005CA 7F 80            [12] 1497 	mov	r7,#0x80
                                   1498 ;	calc.c:50: return;
      0005CC                       1499 00258$:
                                   1500 ;	calc.c:48: for (; *s; s++) putchar(*s);
      0005CC 8D 82            [24] 1501 	mov	dpl,r5
      0005CE 8E 83            [24] 1502 	mov	dph,r6
      0005D0 8F F0            [24] 1503 	mov	b,r7
      0005D2 12r00r00         [24] 1504 	lcall	__gptrget
      0005D5 FC               [12] 1505 	mov	r4,a
      0005D6 60 10            [24] 1506 	jz	00198$
      0005D8 7B 00            [12] 1507 	mov	r3,#0x00
      0005DA 8C 82            [24] 1508 	mov	dpl,r4
      0005DC 8B 83            [24] 1509 	mov	dph,r3
      0005DE 12r00r00         [24] 1510 	lcall	_putchar
      0005E1 0D               [12] 1511 	inc	r5
                                   1512 ;	calc.c:145: printstr("\r\n");
      0005E2 BD 00 E7         [24] 1513 	cjne	r5,#0x00,00258$
      0005E5 0E               [12] 1514 	inc	r6
      0005E6 80 E4            [24] 1515 	sjmp	00258$
      0005E8                       1516 00198$:
                                   1517 ;	calc.c:146: if (!stack_pop(&ctx->s, &d0)) printstr("stack underflow\r\n");
      0005E8 E5*00            [12] 1518 	mov	a,_bp
      0005EA 24 07            [12] 1519 	add	a,#0x07
      0005EC FF               [12] 1520 	mov	r7,a
      0005ED 7E 00            [12] 1521 	mov	r6,#0x00
      0005EF 7D 40            [12] 1522 	mov	r5,#0x40
      0005F1 E5*00            [12] 1523 	mov	a,_bp
      0005F3 24 04            [12] 1524 	add	a,#0x04
      0005F5 F8               [12] 1525 	mov	r0,a
      0005F6 74 09            [12] 1526 	mov	a,#0x09
      0005F8 26               [12] 1527 	add	a,@r0
      0005F9 FA               [12] 1528 	mov	r2,a
      0005FA E4               [12] 1529 	clr	a
      0005FB 08               [12] 1530 	inc	r0
      0005FC 36               [12] 1531 	addc	a,@r0
      0005FD FB               [12] 1532 	mov	r3,a
      0005FE 08               [12] 1533 	inc	r0
      0005FF 86 04            [24] 1534 	mov	ar4,@r0
      000601 C0 07            [24] 1535 	push	ar7
      000603 C0 06            [24] 1536 	push	ar6
      000605 C0 05            [24] 1537 	push	ar5
      000607 8A 82            [24] 1538 	mov	dpl,r2
      000609 8B 83            [24] 1539 	mov	dph,r3
      00060B 8C F0            [24] 1540 	mov	b,r4
      00060D 12r00r00         [24] 1541 	lcall	_stack_pop
      000610 AE 82            [24] 1542 	mov	r6,dpl
      000612 AF 83            [24] 1543 	mov	r7,dph
      000614 15 81            [12] 1544 	dec	sp
      000616 15 81            [12] 1545 	dec	sp
      000618 15 81            [12] 1546 	dec	sp
      00061A EE               [12] 1547 	mov	a,r6
      00061B 4F               [12] 1548 	orl	a,r7
      00061C 70 25            [24] 1549 	jnz	00111$
      00061E 7Dr03            [12] 1550 	mov	r5,#___str_1
      000620 7Es00            [12] 1551 	mov	r6,#(___str_1 >> 8)
      000622 7F 80            [12] 1552 	mov	r7,#0x80
                                   1553 ;	calc.c:50: return;
      000624                       1554 00261$:
                                   1555 ;	calc.c:48: for (; *s; s++) putchar(*s);
      000624 8D 82            [24] 1556 	mov	dpl,r5
      000626 8E 83            [24] 1557 	mov	dph,r6
      000628 8F F0            [24] 1558 	mov	b,r7
      00062A 12r00r00         [24] 1559 	lcall	__gptrget
      00062D FC               [12] 1560 	mov	r4,a
      00062E 70 03            [24] 1561 	jnz	00781$
      000630 02r14r64         [24] 1562 	ljmp	00188$
      000633                       1563 00781$:
      000633 7B 00            [12] 1564 	mov	r3,#0x00
      000635 8C 82            [24] 1565 	mov	dpl,r4
      000637 8B 83            [24] 1566 	mov	dph,r3
      000639 12r00r00         [24] 1567 	lcall	_putchar
      00063C 0D               [12] 1568 	inc	r5
                                   1569 ;	calc.c:146: if (!stack_pop(&ctx->s, &d0)) printstr("stack underflow\r\n");
      00063D BD 00 E4         [24] 1570 	cjne	r5,#0x00,00261$
      000640 0E               [12] 1571 	inc	r6
      000641 80 E1            [24] 1572 	sjmp	00261$
      000643                       1573 00111$:
                                   1574 ;	calc.c:147: else printf((ctx->base == 16l) ? hexv : decv, d0);
      000643 E5*00            [12] 1575 	mov	a,_bp
      000645 24 04            [12] 1576 	add	a,#0x04
      000647 F8               [12] 1577 	mov	r0,a
      000648 86 82            [24] 1578 	mov	dpl,@r0
      00064A 08               [12] 1579 	inc	r0
      00064B 86 83            [24] 1580 	mov	dph,@r0
      00064D 08               [12] 1581 	inc	r0
      00064E 86 F0            [24] 1582 	mov	b,@r0
      000650 12r00r00         [24] 1583 	lcall	__gptrget
      000653 FE               [12] 1584 	mov	r6,a
      000654 A3               [24] 1585 	inc	dptr
      000655 12r00r00         [24] 1586 	lcall	__gptrget
      000658 FF               [12] 1587 	mov	r7,a
      000659 BE 10 10         [24] 1588 	cjne	r6,#0x10,00333$
      00065C BF 00 0D         [24] 1589 	cjne	r7,#0x00,00333$
      00065F 90r00r0C         [24] 1590 	mov	dptr,#_hexv
      000662 E0               [24] 1591 	movx	a,@dptr
      000663 FD               [12] 1592 	mov	r5,a
      000664 A3               [24] 1593 	inc	dptr
      000665 E0               [24] 1594 	movx	a,@dptr
      000666 FE               [12] 1595 	mov	r6,a
      000667 A3               [24] 1596 	inc	dptr
      000668 E0               [24] 1597 	movx	a,@dptr
      000669 FF               [12] 1598 	mov	r7,a
      00066A 80 0B            [24] 1599 	sjmp	00334$
      00066C                       1600 00333$:
      00066C 90r00r0F         [24] 1601 	mov	dptr,#_decv
      00066F E0               [24] 1602 	movx	a,@dptr
      000670 FD               [12] 1603 	mov	r5,a
      000671 A3               [24] 1604 	inc	dptr
      000672 E0               [24] 1605 	movx	a,@dptr
      000673 FE               [12] 1606 	mov	r6,a
      000674 A3               [24] 1607 	inc	dptr
      000675 E0               [24] 1608 	movx	a,@dptr
      000676 FF               [12] 1609 	mov	r7,a
      000677                       1610 00334$:
      000677 E5*00            [12] 1611 	mov	a,_bp
      000679 24 07            [12] 1612 	add	a,#0x07
      00067B F8               [12] 1613 	mov	r0,a
      00067C E6               [12] 1614 	mov	a,@r0
      00067D C0 E0            [24] 1615 	push	acc
      00067F 08               [12] 1616 	inc	r0
      000680 E6               [12] 1617 	mov	a,@r0
      000681 C0 E0            [24] 1618 	push	acc
      000683 08               [12] 1619 	inc	r0
      000684 E6               [12] 1620 	mov	a,@r0
      000685 C0 E0            [24] 1621 	push	acc
      000687 08               [12] 1622 	inc	r0
      000688 E6               [12] 1623 	mov	a,@r0
      000689 C0 E0            [24] 1624 	push	acc
      00068B C0 05            [24] 1625 	push	ar5
      00068D C0 06            [24] 1626 	push	ar6
      00068F C0 07            [24] 1627 	push	ar7
      000691 12r00r00         [24] 1628 	lcall	_printf
      000694 E5 81            [12] 1629 	mov	a,sp
      000696 24 F9            [12] 1630 	add	a,#0xf9
      000698 F5 81            [12] 1631 	mov	sp,a
                                   1632 ;	calc.c:148: break;
      00069A 02r14r64         [24] 1633 	ljmp	00188$
                                   1634 ;	calc.c:149: case 'V':
      00069D                       1635 00113$:
                                   1636 ;	calc.c:150: printstr("\r\n");
      00069D 7Dr00            [12] 1637 	mov	r5,#___str_0
      00069F 7Es00            [12] 1638 	mov	r6,#(___str_0 >> 8)
      0006A1 7F 80            [12] 1639 	mov	r7,#0x80
                                   1640 ;	calc.c:50: return;
      0006A3                       1641 00264$:
                                   1642 ;	calc.c:48: for (; *s; s++) putchar(*s);
      0006A3 8D 82            [24] 1643 	mov	dpl,r5
      0006A5 8E 83            [24] 1644 	mov	dph,r6
      0006A7 8F F0            [24] 1645 	mov	b,r7
      0006A9 12r00r00         [24] 1646 	lcall	__gptrget
      0006AC FC               [12] 1647 	mov	r4,a
      0006AD 60 10            [24] 1648 	jz	00202$
      0006AF 7B 00            [12] 1649 	mov	r3,#0x00
      0006B1 8C 82            [24] 1650 	mov	dpl,r4
      0006B3 8B 83            [24] 1651 	mov	dph,r3
      0006B5 12r00r00         [24] 1652 	lcall	_putchar
      0006B8 0D               [12] 1653 	inc	r5
                                   1654 ;	calc.c:150: printstr("\r\n");
      0006B9 BD 00 E7         [24] 1655 	cjne	r5,#0x00,00264$
      0006BC 0E               [12] 1656 	inc	r6
      0006BD 80 E4            [24] 1657 	sjmp	00264$
      0006BF                       1658 00202$:
                                   1659 ;	calc.c:151: (void)dump_pop(_ctx, delta);
      0006BF E5*00            [12] 1660 	mov	a,_bp
      0006C1 24 FB            [12] 1661 	add	a,#0xfb
      0006C3 F8               [12] 1662 	mov	r0,a
      0006C4 E6               [12] 1663 	mov	a,@r0
      0006C5 C0 E0            [24] 1664 	push	acc
      0006C7 08               [12] 1665 	inc	r0
      0006C8 E6               [12] 1666 	mov	a,@r0
      0006C9 C0 E0            [24] 1667 	push	acc
      0006CB 08               [12] 1668 	inc	r0
      0006CC E6               [12] 1669 	mov	a,@r0
      0006CD C0 E0            [24] 1670 	push	acc
      0006CF A8*00            [24] 1671 	mov	r0,_bp
      0006D1 08               [12] 1672 	inc	r0
      0006D2 86 82            [24] 1673 	mov	dpl,@r0
      0006D4 08               [12] 1674 	inc	r0
      0006D5 86 83            [24] 1675 	mov	dph,@r0
      0006D7 08               [12] 1676 	inc	r0
      0006D8 86 F0            [24] 1677 	mov	b,@r0
      0006DA 12r01r93         [24] 1678 	lcall	_dump_pop
      0006DD 15 81            [12] 1679 	dec	sp
      0006DF 15 81            [12] 1680 	dec	sp
      0006E1 15 81            [12] 1681 	dec	sp
                                   1682 ;	calc.c:152: break;
      0006E3 02r14r64         [24] 1683 	ljmp	00188$
                                   1684 ;	calc.c:153: case 'x':
      0006E6                       1685 00114$:
                                   1686 ;	calc.c:154: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      0006E6 E5*00            [12] 1687 	mov	a,_bp
      0006E8 24 07            [12] 1688 	add	a,#0x07
      0006EA FF               [12] 1689 	mov	r7,a
      0006EB 7E 00            [12] 1690 	mov	r6,#0x00
      0006ED 7D 40            [12] 1691 	mov	r5,#0x40
      0006EF E5*00            [12] 1692 	mov	a,_bp
      0006F1 24 04            [12] 1693 	add	a,#0x04
      0006F3 F8               [12] 1694 	mov	r0,a
      0006F4 74 09            [12] 1695 	mov	a,#0x09
      0006F6 26               [12] 1696 	add	a,@r0
      0006F7 FA               [12] 1697 	mov	r2,a
      0006F8 E4               [12] 1698 	clr	a
      0006F9 08               [12] 1699 	inc	r0
      0006FA 36               [12] 1700 	addc	a,@r0
      0006FB FB               [12] 1701 	mov	r3,a
      0006FC 08               [12] 1702 	inc	r0
      0006FD 86 04            [24] 1703 	mov	ar4,@r0
      0006FF C0 07            [24] 1704 	push	ar7
      000701 C0 06            [24] 1705 	push	ar6
      000703 C0 05            [24] 1706 	push	ar5
      000705 8A 82            [24] 1707 	mov	dpl,r2
      000707 8B 83            [24] 1708 	mov	dph,r3
      000709 8C F0            [24] 1709 	mov	b,r4
      00070B 12r00r00         [24] 1710 	lcall	_stack_pop
      00070E AE 82            [24] 1711 	mov	r6,dpl
      000710 AF 83            [24] 1712 	mov	r7,dph
      000712 15 81            [12] 1713 	dec	sp
      000714 15 81            [12] 1714 	dec	sp
      000716 15 81            [12] 1715 	dec	sp
      000718 EE               [12] 1716 	mov	a,r6
      000719 4F               [12] 1717 	orl	a,r7
      00071A 70 25            [24] 1718 	jnz	00119$
      00071C 7Dr15            [12] 1719 	mov	r5,#___str_2
      00071E 7Es00            [12] 1720 	mov	r6,#(___str_2 >> 8)
      000720 7F 80            [12] 1721 	mov	r7,#0x80
                                   1722 ;	calc.c:50: return;
      000722                       1723 00267$:
                                   1724 ;	calc.c:48: for (; *s; s++) putchar(*s);
      000722 8D 82            [24] 1725 	mov	dpl,r5
      000724 8E 83            [24] 1726 	mov	dph,r6
      000726 8F F0            [24] 1727 	mov	b,r7
      000728 12r00r00         [24] 1728 	lcall	__gptrget
      00072B FC               [12] 1729 	mov	r4,a
      00072C 70 03            [24] 1730 	jnz	00788$
      00072E 02r14r64         [24] 1731 	ljmp	00188$
      000731                       1732 00788$:
      000731 7B 00            [12] 1733 	mov	r3,#0x00
      000733 8C 82            [24] 1734 	mov	dpl,r4
      000735 8B 83            [24] 1735 	mov	dph,r3
      000737 12r00r00         [24] 1736 	lcall	_putchar
      00073A 0D               [12] 1737 	inc	r5
                                   1738 ;	calc.c:154: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      00073B BD 00 E4         [24] 1739 	cjne	r5,#0x00,00267$
      00073E 0E               [12] 1740 	inc	r6
      00073F 80 E1            [24] 1741 	sjmp	00267$
      000741                       1742 00119$:
                                   1743 ;	calc.c:155: else if (!stack_pop(&ctx->s, &d1)) {
      000741 E5*00            [12] 1744 	mov	a,_bp
      000743 24 0B            [12] 1745 	add	a,#0x0b
      000745 FF               [12] 1746 	mov	r7,a
      000746 7E 00            [12] 1747 	mov	r6,#0x00
      000748 7D 40            [12] 1748 	mov	r5,#0x40
      00074A E5*00            [12] 1749 	mov	a,_bp
      00074C 24 04            [12] 1750 	add	a,#0x04
      00074E F8               [12] 1751 	mov	r0,a
      00074F 74 09            [12] 1752 	mov	a,#0x09
      000751 26               [12] 1753 	add	a,@r0
      000752 FA               [12] 1754 	mov	r2,a
      000753 E4               [12] 1755 	clr	a
      000754 08               [12] 1756 	inc	r0
      000755 36               [12] 1757 	addc	a,@r0
      000756 FB               [12] 1758 	mov	r3,a
      000757 08               [12] 1759 	inc	r0
      000758 86 04            [24] 1760 	mov	ar4,@r0
      00075A C0 07            [24] 1761 	push	ar7
      00075C C0 06            [24] 1762 	push	ar6
      00075E C0 05            [24] 1763 	push	ar5
      000760 8A 82            [24] 1764 	mov	dpl,r2
      000762 8B 83            [24] 1765 	mov	dph,r3
      000764 8C F0            [24] 1766 	mov	b,r4
      000766 12r00r00         [24] 1767 	lcall	_stack_pop
      000769 AE 82            [24] 1768 	mov	r6,dpl
      00076B AF 83            [24] 1769 	mov	r7,dph
      00076D 15 81            [12] 1770 	dec	sp
      00076F 15 81            [12] 1771 	dec	sp
      000771 15 81            [12] 1772 	dec	sp
      000773 EE               [12] 1773 	mov	a,r6
      000774 4F               [12] 1774 	orl	a,r7
      000775 70 58            [24] 1775 	jnz	00116$
                                   1776 ;	calc.c:156: (void)stack_push(&ctx->s, d0);
      000777 E5*00            [12] 1777 	mov	a,_bp
      000779 24 04            [12] 1778 	add	a,#0x04
      00077B F8               [12] 1779 	mov	r0,a
      00077C 74 09            [12] 1780 	mov	a,#0x09
      00077E 26               [12] 1781 	add	a,@r0
      00077F FD               [12] 1782 	mov	r5,a
      000780 E4               [12] 1783 	clr	a
      000781 08               [12] 1784 	inc	r0
      000782 36               [12] 1785 	addc	a,@r0
      000783 FE               [12] 1786 	mov	r6,a
      000784 08               [12] 1787 	inc	r0
      000785 86 07            [24] 1788 	mov	ar7,@r0
      000787 E5*00            [12] 1789 	mov	a,_bp
      000789 24 07            [12] 1790 	add	a,#0x07
      00078B F8               [12] 1791 	mov	r0,a
      00078C E6               [12] 1792 	mov	a,@r0
      00078D C0 E0            [24] 1793 	push	acc
      00078F 08               [12] 1794 	inc	r0
      000790 E6               [12] 1795 	mov	a,@r0
      000791 C0 E0            [24] 1796 	push	acc
      000793 08               [12] 1797 	inc	r0
      000794 E6               [12] 1798 	mov	a,@r0
      000795 C0 E0            [24] 1799 	push	acc
      000797 08               [12] 1800 	inc	r0
      000798 E6               [12] 1801 	mov	a,@r0
      000799 C0 E0            [24] 1802 	push	acc
      00079B 8D 82            [24] 1803 	mov	dpl,r5
      00079D 8E 83            [24] 1804 	mov	dph,r6
      00079F 8F F0            [24] 1805 	mov	b,r7
      0007A1 12r00r00         [24] 1806 	lcall	_stack_push
      0007A4 E5 81            [12] 1807 	mov	a,sp
      0007A6 24 FC            [12] 1808 	add	a,#0xfc
      0007A8 F5 81            [12] 1809 	mov	sp,a
                                   1810 ;	calc.c:157: printstr("\r\nstack underflow\r\n");
      0007AA 7Dr15            [12] 1811 	mov	r5,#___str_2
      0007AC 7Es00            [12] 1812 	mov	r6,#(___str_2 >> 8)
      0007AE 7F 80            [12] 1813 	mov	r7,#0x80
                                   1814 ;	calc.c:50: return;
      0007B0                       1815 00270$:
                                   1816 ;	calc.c:48: for (; *s; s++) putchar(*s);
      0007B0 8D 82            [24] 1817 	mov	dpl,r5
      0007B2 8E 83            [24] 1818 	mov	dph,r6
      0007B4 8F F0            [24] 1819 	mov	b,r7
      0007B6 12r00r00         [24] 1820 	lcall	__gptrget
      0007B9 FC               [12] 1821 	mov	r4,a
      0007BA 70 03            [24] 1822 	jnz	00791$
      0007BC 02r14r64         [24] 1823 	ljmp	00188$
      0007BF                       1824 00791$:
      0007BF 7B 00            [12] 1825 	mov	r3,#0x00
      0007C1 8C 82            [24] 1826 	mov	dpl,r4
      0007C3 8B 83            [24] 1827 	mov	dph,r3
      0007C5 12r00r00         [24] 1828 	lcall	_putchar
      0007C8 0D               [12] 1829 	inc	r5
                                   1830 ;	calc.c:157: printstr("\r\nstack underflow\r\n");
      0007C9 BD 00 E4         [24] 1831 	cjne	r5,#0x00,00270$
      0007CC 0E               [12] 1832 	inc	r6
      0007CD 80 E1            [24] 1833 	sjmp	00270$
      0007CF                       1834 00116$:
                                   1835 ;	calc.c:159: (void)stack_push(&ctx->s, d0);
      0007CF E5*00            [12] 1836 	mov	a,_bp
      0007D1 24 04            [12] 1837 	add	a,#0x04
      0007D3 F8               [12] 1838 	mov	r0,a
      0007D4 74 09            [12] 1839 	mov	a,#0x09
      0007D6 26               [12] 1840 	add	a,@r0
      0007D7 FD               [12] 1841 	mov	r5,a
      0007D8 E4               [12] 1842 	clr	a
      0007D9 08               [12] 1843 	inc	r0
      0007DA 36               [12] 1844 	addc	a,@r0
      0007DB FE               [12] 1845 	mov	r6,a
      0007DC 08               [12] 1846 	inc	r0
      0007DD 86 07            [24] 1847 	mov	ar7,@r0
      0007DF E5*00            [12] 1848 	mov	a,_bp
      0007E1 24 07            [12] 1849 	add	a,#0x07
      0007E3 F8               [12] 1850 	mov	r0,a
      0007E4 E6               [12] 1851 	mov	a,@r0
      0007E5 C0 E0            [24] 1852 	push	acc
      0007E7 08               [12] 1853 	inc	r0
      0007E8 E6               [12] 1854 	mov	a,@r0
      0007E9 C0 E0            [24] 1855 	push	acc
      0007EB 08               [12] 1856 	inc	r0
      0007EC E6               [12] 1857 	mov	a,@r0
      0007ED C0 E0            [24] 1858 	push	acc
      0007EF 08               [12] 1859 	inc	r0
      0007F0 E6               [12] 1860 	mov	a,@r0
      0007F1 C0 E0            [24] 1861 	push	acc
      0007F3 8D 82            [24] 1862 	mov	dpl,r5
      0007F5 8E 83            [24] 1863 	mov	dph,r6
      0007F7 8F F0            [24] 1864 	mov	b,r7
      0007F9 12r00r00         [24] 1865 	lcall	_stack_push
      0007FC E5 81            [12] 1866 	mov	a,sp
      0007FE 24 FC            [12] 1867 	add	a,#0xfc
      000800 F5 81            [12] 1868 	mov	sp,a
                                   1869 ;	calc.c:160: (void)stack_push(&ctx->s, d1);
      000802 E5*00            [12] 1870 	mov	a,_bp
      000804 24 04            [12] 1871 	add	a,#0x04
      000806 F8               [12] 1872 	mov	r0,a
      000807 74 09            [12] 1873 	mov	a,#0x09
      000809 26               [12] 1874 	add	a,@r0
      00080A FD               [12] 1875 	mov	r5,a
      00080B E4               [12] 1876 	clr	a
      00080C 08               [12] 1877 	inc	r0
      00080D 36               [12] 1878 	addc	a,@r0
      00080E FE               [12] 1879 	mov	r6,a
      00080F 08               [12] 1880 	inc	r0
      000810 86 07            [24] 1881 	mov	ar7,@r0
      000812 E5*00            [12] 1882 	mov	a,_bp
      000814 24 0B            [12] 1883 	add	a,#0x0b
      000816 F8               [12] 1884 	mov	r0,a
      000817 E6               [12] 1885 	mov	a,@r0
      000818 C0 E0            [24] 1886 	push	acc
      00081A 08               [12] 1887 	inc	r0
      00081B E6               [12] 1888 	mov	a,@r0
      00081C C0 E0            [24] 1889 	push	acc
      00081E 08               [12] 1890 	inc	r0
      00081F E6               [12] 1891 	mov	a,@r0
      000820 C0 E0            [24] 1892 	push	acc
      000822 08               [12] 1893 	inc	r0
      000823 E6               [12] 1894 	mov	a,@r0
      000824 C0 E0            [24] 1895 	push	acc
      000826 8D 82            [24] 1896 	mov	dpl,r5
      000828 8E 83            [24] 1897 	mov	dph,r6
      00082A 8F F0            [24] 1898 	mov	b,r7
      00082C 12r00r00         [24] 1899 	lcall	_stack_push
      00082F E5 81            [12] 1900 	mov	a,sp
      000831 24 FC            [12] 1901 	add	a,#0xfc
      000833 F5 81            [12] 1902 	mov	sp,a
                                   1903 ;	calc.c:162: break;
      000835 02r14r64         [24] 1904 	ljmp	00188$
                                   1905 ;	calc.c:163: case '+':
      000838                       1906 00121$:
                                   1907 ;	calc.c:164: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      000838 E5*00            [12] 1908 	mov	a,_bp
      00083A 24 07            [12] 1909 	add	a,#0x07
      00083C FF               [12] 1910 	mov	r7,a
      00083D 7E 00            [12] 1911 	mov	r6,#0x00
      00083F 7D 40            [12] 1912 	mov	r5,#0x40
      000841 E5*00            [12] 1913 	mov	a,_bp
      000843 24 04            [12] 1914 	add	a,#0x04
      000845 F8               [12] 1915 	mov	r0,a
      000846 74 09            [12] 1916 	mov	a,#0x09
      000848 26               [12] 1917 	add	a,@r0
      000849 FA               [12] 1918 	mov	r2,a
      00084A E4               [12] 1919 	clr	a
      00084B 08               [12] 1920 	inc	r0
      00084C 36               [12] 1921 	addc	a,@r0
      00084D FB               [12] 1922 	mov	r3,a
      00084E 08               [12] 1923 	inc	r0
      00084F 86 04            [24] 1924 	mov	ar4,@r0
      000851 C0 07            [24] 1925 	push	ar7
      000853 C0 06            [24] 1926 	push	ar6
      000855 C0 05            [24] 1927 	push	ar5
      000857 8A 82            [24] 1928 	mov	dpl,r2
      000859 8B 83            [24] 1929 	mov	dph,r3
      00085B 8C F0            [24] 1930 	mov	b,r4
      00085D 12r00r00         [24] 1931 	lcall	_stack_pop
      000860 AE 82            [24] 1932 	mov	r6,dpl
      000862 AF 83            [24] 1933 	mov	r7,dph
      000864 15 81            [12] 1934 	dec	sp
      000866 15 81            [12] 1935 	dec	sp
      000868 15 81            [12] 1936 	dec	sp
      00086A EE               [12] 1937 	mov	a,r6
      00086B 4F               [12] 1938 	orl	a,r7
      00086C 70 25            [24] 1939 	jnz	00126$
      00086E 7Dr15            [12] 1940 	mov	r5,#___str_2
      000870 7Es00            [12] 1941 	mov	r6,#(___str_2 >> 8)
      000872 7F 80            [12] 1942 	mov	r7,#0x80
                                   1943 ;	calc.c:50: return;
      000874                       1944 00273$:
                                   1945 ;	calc.c:48: for (; *s; s++) putchar(*s);
      000874 8D 82            [24] 1946 	mov	dpl,r5
      000876 8E 83            [24] 1947 	mov	dph,r6
      000878 8F F0            [24] 1948 	mov	b,r7
      00087A 12r00r00         [24] 1949 	lcall	__gptrget
      00087D FC               [12] 1950 	mov	r4,a
      00087E 70 03            [24] 1951 	jnz	00794$
      000880 02r14r64         [24] 1952 	ljmp	00188$
      000883                       1953 00794$:
      000883 7B 00            [12] 1954 	mov	r3,#0x00
      000885 8C 82            [24] 1955 	mov	dpl,r4
      000887 8B 83            [24] 1956 	mov	dph,r3
      000889 12r00r00         [24] 1957 	lcall	_putchar
      00088C 0D               [12] 1958 	inc	r5
                                   1959 ;	calc.c:164: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      00088D BD 00 E4         [24] 1960 	cjne	r5,#0x00,00273$
      000890 0E               [12] 1961 	inc	r6
      000891 80 E1            [24] 1962 	sjmp	00273$
      000893                       1963 00126$:
                                   1964 ;	calc.c:165: else if (!stack_pop(&ctx->s, &d1)) {
      000893 E5*00            [12] 1965 	mov	a,_bp
      000895 24 0B            [12] 1966 	add	a,#0x0b
      000897 FF               [12] 1967 	mov	r7,a
      000898 7E 00            [12] 1968 	mov	r6,#0x00
      00089A 7D 40            [12] 1969 	mov	r5,#0x40
      00089C E5*00            [12] 1970 	mov	a,_bp
      00089E 24 04            [12] 1971 	add	a,#0x04
      0008A0 F8               [12] 1972 	mov	r0,a
      0008A1 74 09            [12] 1973 	mov	a,#0x09
      0008A3 26               [12] 1974 	add	a,@r0
      0008A4 FA               [12] 1975 	mov	r2,a
      0008A5 E4               [12] 1976 	clr	a
      0008A6 08               [12] 1977 	inc	r0
      0008A7 36               [12] 1978 	addc	a,@r0
      0008A8 FB               [12] 1979 	mov	r3,a
      0008A9 08               [12] 1980 	inc	r0
      0008AA 86 04            [24] 1981 	mov	ar4,@r0
      0008AC C0 07            [24] 1982 	push	ar7
      0008AE C0 06            [24] 1983 	push	ar6
      0008B0 C0 05            [24] 1984 	push	ar5
      0008B2 8A 82            [24] 1985 	mov	dpl,r2
      0008B4 8B 83            [24] 1986 	mov	dph,r3
      0008B6 8C F0            [24] 1987 	mov	b,r4
      0008B8 12r00r00         [24] 1988 	lcall	_stack_pop
      0008BB AE 82            [24] 1989 	mov	r6,dpl
      0008BD AF 83            [24] 1990 	mov	r7,dph
      0008BF 15 81            [12] 1991 	dec	sp
      0008C1 15 81            [12] 1992 	dec	sp
      0008C3 15 81            [12] 1993 	dec	sp
      0008C5 EE               [12] 1994 	mov	a,r6
      0008C6 4F               [12] 1995 	orl	a,r7
      0008C7 70 58            [24] 1996 	jnz	00123$
                                   1997 ;	calc.c:166: (void)stack_push(&ctx->s, d0);
      0008C9 E5*00            [12] 1998 	mov	a,_bp
      0008CB 24 04            [12] 1999 	add	a,#0x04
      0008CD F8               [12] 2000 	mov	r0,a
      0008CE 74 09            [12] 2001 	mov	a,#0x09
      0008D0 26               [12] 2002 	add	a,@r0
      0008D1 FD               [12] 2003 	mov	r5,a
      0008D2 E4               [12] 2004 	clr	a
      0008D3 08               [12] 2005 	inc	r0
      0008D4 36               [12] 2006 	addc	a,@r0
      0008D5 FE               [12] 2007 	mov	r6,a
      0008D6 08               [12] 2008 	inc	r0
      0008D7 86 07            [24] 2009 	mov	ar7,@r0
      0008D9 E5*00            [12] 2010 	mov	a,_bp
      0008DB 24 07            [12] 2011 	add	a,#0x07
      0008DD F8               [12] 2012 	mov	r0,a
      0008DE E6               [12] 2013 	mov	a,@r0
      0008DF C0 E0            [24] 2014 	push	acc
      0008E1 08               [12] 2015 	inc	r0
      0008E2 E6               [12] 2016 	mov	a,@r0
      0008E3 C0 E0            [24] 2017 	push	acc
      0008E5 08               [12] 2018 	inc	r0
      0008E6 E6               [12] 2019 	mov	a,@r0
      0008E7 C0 E0            [24] 2020 	push	acc
      0008E9 08               [12] 2021 	inc	r0
      0008EA E6               [12] 2022 	mov	a,@r0
      0008EB C0 E0            [24] 2023 	push	acc
      0008ED 8D 82            [24] 2024 	mov	dpl,r5
      0008EF 8E 83            [24] 2025 	mov	dph,r6
      0008F1 8F F0            [24] 2026 	mov	b,r7
      0008F3 12r00r00         [24] 2027 	lcall	_stack_push
      0008F6 E5 81            [12] 2028 	mov	a,sp
      0008F8 24 FC            [12] 2029 	add	a,#0xfc
      0008FA F5 81            [12] 2030 	mov	sp,a
                                   2031 ;	calc.c:167: printstr("\r\nstack underflow\r\n");
      0008FC 7Dr15            [12] 2032 	mov	r5,#___str_2
      0008FE 7Es00            [12] 2033 	mov	r6,#(___str_2 >> 8)
      000900 7F 80            [12] 2034 	mov	r7,#0x80
                                   2035 ;	calc.c:50: return;
      000902                       2036 00276$:
                                   2037 ;	calc.c:48: for (; *s; s++) putchar(*s);
      000902 8D 82            [24] 2038 	mov	dpl,r5
      000904 8E 83            [24] 2039 	mov	dph,r6
      000906 8F F0            [24] 2040 	mov	b,r7
      000908 12r00r00         [24] 2041 	lcall	__gptrget
      00090B FC               [12] 2042 	mov	r4,a
      00090C 70 03            [24] 2043 	jnz	00797$
      00090E 02r14r64         [24] 2044 	ljmp	00188$
      000911                       2045 00797$:
      000911 7B 00            [12] 2046 	mov	r3,#0x00
      000913 8C 82            [24] 2047 	mov	dpl,r4
      000915 8B 83            [24] 2048 	mov	dph,r3
      000917 12r00r00         [24] 2049 	lcall	_putchar
      00091A 0D               [12] 2050 	inc	r5
                                   2051 ;	calc.c:167: printstr("\r\nstack underflow\r\n");
      00091B BD 00 E4         [24] 2052 	cjne	r5,#0x00,00276$
      00091E 0E               [12] 2053 	inc	r6
      00091F 80 E1            [24] 2054 	sjmp	00276$
      000921                       2055 00123$:
                                   2056 ;	calc.c:169: d1 += d0;
      000921 E5*00            [12] 2057 	mov	a,_bp
      000923 24 0B            [12] 2058 	add	a,#0x0b
      000925 F8               [12] 2059 	mov	r0,a
      000926 E5*00            [12] 2060 	mov	a,_bp
      000928 24 07            [12] 2061 	add	a,#0x07
      00092A F9               [12] 2062 	mov	r1,a
      00092B E7               [12] 2063 	mov	a,@r1
      00092C 26               [12] 2064 	add	a,@r0
      00092D F6               [12] 2065 	mov	@r0,a
      00092E 09               [12] 2066 	inc	r1
      00092F E7               [12] 2067 	mov	a,@r1
      000930 08               [12] 2068 	inc	r0
      000931 36               [12] 2069 	addc	a,@r0
      000932 F6               [12] 2070 	mov	@r0,a
      000933 09               [12] 2071 	inc	r1
      000934 E7               [12] 2072 	mov	a,@r1
      000935 08               [12] 2073 	inc	r0
      000936 36               [12] 2074 	addc	a,@r0
      000937 F6               [12] 2075 	mov	@r0,a
      000938 09               [12] 2076 	inc	r1
      000939 E7               [12] 2077 	mov	a,@r1
      00093A 08               [12] 2078 	inc	r0
      00093B 36               [12] 2079 	addc	a,@r0
      00093C F6               [12] 2080 	mov	@r0,a
                                   2081 ;	calc.c:170: (void)stack_push(&ctx->s, d1);
      00093D E5*00            [12] 2082 	mov	a,_bp
      00093F 24 04            [12] 2083 	add	a,#0x04
      000941 F8               [12] 2084 	mov	r0,a
      000942 74 09            [12] 2085 	mov	a,#0x09
      000944 26               [12] 2086 	add	a,@r0
      000945 FD               [12] 2087 	mov	r5,a
      000946 E4               [12] 2088 	clr	a
      000947 08               [12] 2089 	inc	r0
      000948 36               [12] 2090 	addc	a,@r0
      000949 FE               [12] 2091 	mov	r6,a
      00094A 08               [12] 2092 	inc	r0
      00094B 86 07            [24] 2093 	mov	ar7,@r0
      00094D E5*00            [12] 2094 	mov	a,_bp
      00094F 24 0B            [12] 2095 	add	a,#0x0b
      000951 F8               [12] 2096 	mov	r0,a
      000952 E6               [12] 2097 	mov	a,@r0
      000953 C0 E0            [24] 2098 	push	acc
      000955 08               [12] 2099 	inc	r0
      000956 E6               [12] 2100 	mov	a,@r0
      000957 C0 E0            [24] 2101 	push	acc
      000959 08               [12] 2102 	inc	r0
      00095A E6               [12] 2103 	mov	a,@r0
      00095B C0 E0            [24] 2104 	push	acc
      00095D 08               [12] 2105 	inc	r0
      00095E E6               [12] 2106 	mov	a,@r0
      00095F C0 E0            [24] 2107 	push	acc
      000961 8D 82            [24] 2108 	mov	dpl,r5
      000963 8E 83            [24] 2109 	mov	dph,r6
      000965 8F F0            [24] 2110 	mov	b,r7
      000967 12r00r00         [24] 2111 	lcall	_stack_push
      00096A E5 81            [12] 2112 	mov	a,sp
      00096C 24 FC            [12] 2113 	add	a,#0xfc
      00096E F5 81            [12] 2114 	mov	sp,a
                                   2115 ;	calc.c:172: break;
      000970 02r14r64         [24] 2116 	ljmp	00188$
                                   2117 ;	calc.c:173: case '-':
      000973                       2118 00128$:
                                   2119 ;	calc.c:174: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      000973 E5*00            [12] 2120 	mov	a,_bp
      000975 24 07            [12] 2121 	add	a,#0x07
      000977 FF               [12] 2122 	mov	r7,a
      000978 7E 00            [12] 2123 	mov	r6,#0x00
      00097A 7D 40            [12] 2124 	mov	r5,#0x40
      00097C E5*00            [12] 2125 	mov	a,_bp
      00097E 24 04            [12] 2126 	add	a,#0x04
      000980 F8               [12] 2127 	mov	r0,a
      000981 74 09            [12] 2128 	mov	a,#0x09
      000983 26               [12] 2129 	add	a,@r0
      000984 FA               [12] 2130 	mov	r2,a
      000985 E4               [12] 2131 	clr	a
      000986 08               [12] 2132 	inc	r0
      000987 36               [12] 2133 	addc	a,@r0
      000988 FB               [12] 2134 	mov	r3,a
      000989 08               [12] 2135 	inc	r0
      00098A 86 04            [24] 2136 	mov	ar4,@r0
      00098C C0 07            [24] 2137 	push	ar7
      00098E C0 06            [24] 2138 	push	ar6
      000990 C0 05            [24] 2139 	push	ar5
      000992 8A 82            [24] 2140 	mov	dpl,r2
      000994 8B 83            [24] 2141 	mov	dph,r3
      000996 8C F0            [24] 2142 	mov	b,r4
      000998 12r00r00         [24] 2143 	lcall	_stack_pop
      00099B AE 82            [24] 2144 	mov	r6,dpl
      00099D AF 83            [24] 2145 	mov	r7,dph
      00099F 15 81            [12] 2146 	dec	sp
      0009A1 15 81            [12] 2147 	dec	sp
      0009A3 15 81            [12] 2148 	dec	sp
      0009A5 EE               [12] 2149 	mov	a,r6
      0009A6 4F               [12] 2150 	orl	a,r7
      0009A7 70 25            [24] 2151 	jnz	00133$
      0009A9 7Dr15            [12] 2152 	mov	r5,#___str_2
      0009AB 7Es00            [12] 2153 	mov	r6,#(___str_2 >> 8)
      0009AD 7F 80            [12] 2154 	mov	r7,#0x80
                                   2155 ;	calc.c:50: return;
      0009AF                       2156 00279$:
                                   2157 ;	calc.c:48: for (; *s; s++) putchar(*s);
      0009AF 8D 82            [24] 2158 	mov	dpl,r5
      0009B1 8E 83            [24] 2159 	mov	dph,r6
      0009B3 8F F0            [24] 2160 	mov	b,r7
      0009B5 12r00r00         [24] 2161 	lcall	__gptrget
      0009B8 FC               [12] 2162 	mov	r4,a
      0009B9 70 03            [24] 2163 	jnz	00800$
      0009BB 02r14r64         [24] 2164 	ljmp	00188$
      0009BE                       2165 00800$:
      0009BE 7B 00            [12] 2166 	mov	r3,#0x00
      0009C0 8C 82            [24] 2167 	mov	dpl,r4
      0009C2 8B 83            [24] 2168 	mov	dph,r3
      0009C4 12r00r00         [24] 2169 	lcall	_putchar
      0009C7 0D               [12] 2170 	inc	r5
                                   2171 ;	calc.c:174: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      0009C8 BD 00 E4         [24] 2172 	cjne	r5,#0x00,00279$
      0009CB 0E               [12] 2173 	inc	r6
      0009CC 80 E1            [24] 2174 	sjmp	00279$
      0009CE                       2175 00133$:
                                   2176 ;	calc.c:175: else if (!stack_pop(&ctx->s, &d1)) {
      0009CE E5*00            [12] 2177 	mov	a,_bp
      0009D0 24 0B            [12] 2178 	add	a,#0x0b
      0009D2 FF               [12] 2179 	mov	r7,a
      0009D3 7E 00            [12] 2180 	mov	r6,#0x00
      0009D5 7D 40            [12] 2181 	mov	r5,#0x40
      0009D7 E5*00            [12] 2182 	mov	a,_bp
      0009D9 24 04            [12] 2183 	add	a,#0x04
      0009DB F8               [12] 2184 	mov	r0,a
      0009DC 74 09            [12] 2185 	mov	a,#0x09
      0009DE 26               [12] 2186 	add	a,@r0
      0009DF FA               [12] 2187 	mov	r2,a
      0009E0 E4               [12] 2188 	clr	a
      0009E1 08               [12] 2189 	inc	r0
      0009E2 36               [12] 2190 	addc	a,@r0
      0009E3 FB               [12] 2191 	mov	r3,a
      0009E4 08               [12] 2192 	inc	r0
      0009E5 86 04            [24] 2193 	mov	ar4,@r0
      0009E7 C0 07            [24] 2194 	push	ar7
      0009E9 C0 06            [24] 2195 	push	ar6
      0009EB C0 05            [24] 2196 	push	ar5
      0009ED 8A 82            [24] 2197 	mov	dpl,r2
      0009EF 8B 83            [24] 2198 	mov	dph,r3
      0009F1 8C F0            [24] 2199 	mov	b,r4
      0009F3 12r00r00         [24] 2200 	lcall	_stack_pop
      0009F6 AE 82            [24] 2201 	mov	r6,dpl
      0009F8 AF 83            [24] 2202 	mov	r7,dph
      0009FA 15 81            [12] 2203 	dec	sp
      0009FC 15 81            [12] 2204 	dec	sp
      0009FE 15 81            [12] 2205 	dec	sp
      000A00 EE               [12] 2206 	mov	a,r6
      000A01 4F               [12] 2207 	orl	a,r7
      000A02 70 58            [24] 2208 	jnz	00130$
                                   2209 ;	calc.c:176: (void)stack_push(&ctx->s, d0);
      000A04 E5*00            [12] 2210 	mov	a,_bp
      000A06 24 04            [12] 2211 	add	a,#0x04
      000A08 F8               [12] 2212 	mov	r0,a
      000A09 74 09            [12] 2213 	mov	a,#0x09
      000A0B 26               [12] 2214 	add	a,@r0
      000A0C FD               [12] 2215 	mov	r5,a
      000A0D E4               [12] 2216 	clr	a
      000A0E 08               [12] 2217 	inc	r0
      000A0F 36               [12] 2218 	addc	a,@r0
      000A10 FE               [12] 2219 	mov	r6,a
      000A11 08               [12] 2220 	inc	r0
      000A12 86 07            [24] 2221 	mov	ar7,@r0
      000A14 E5*00            [12] 2222 	mov	a,_bp
      000A16 24 07            [12] 2223 	add	a,#0x07
      000A18 F8               [12] 2224 	mov	r0,a
      000A19 E6               [12] 2225 	mov	a,@r0
      000A1A C0 E0            [24] 2226 	push	acc
      000A1C 08               [12] 2227 	inc	r0
      000A1D E6               [12] 2228 	mov	a,@r0
      000A1E C0 E0            [24] 2229 	push	acc
      000A20 08               [12] 2230 	inc	r0
      000A21 E6               [12] 2231 	mov	a,@r0
      000A22 C0 E0            [24] 2232 	push	acc
      000A24 08               [12] 2233 	inc	r0
      000A25 E6               [12] 2234 	mov	a,@r0
      000A26 C0 E0            [24] 2235 	push	acc
      000A28 8D 82            [24] 2236 	mov	dpl,r5
      000A2A 8E 83            [24] 2237 	mov	dph,r6
      000A2C 8F F0            [24] 2238 	mov	b,r7
      000A2E 12r00r00         [24] 2239 	lcall	_stack_push
      000A31 E5 81            [12] 2240 	mov	a,sp
      000A33 24 FC            [12] 2241 	add	a,#0xfc
      000A35 F5 81            [12] 2242 	mov	sp,a
                                   2243 ;	calc.c:177: printstr("\r\nstack underflow\r\n");
      000A37 7Dr15            [12] 2244 	mov	r5,#___str_2
      000A39 7Es00            [12] 2245 	mov	r6,#(___str_2 >> 8)
      000A3B 7F 80            [12] 2246 	mov	r7,#0x80
                                   2247 ;	calc.c:50: return;
      000A3D                       2248 00282$:
                                   2249 ;	calc.c:48: for (; *s; s++) putchar(*s);
      000A3D 8D 82            [24] 2250 	mov	dpl,r5
      000A3F 8E 83            [24] 2251 	mov	dph,r6
      000A41 8F F0            [24] 2252 	mov	b,r7
      000A43 12r00r00         [24] 2253 	lcall	__gptrget
      000A46 FC               [12] 2254 	mov	r4,a
      000A47 70 03            [24] 2255 	jnz	00803$
      000A49 02r14r64         [24] 2256 	ljmp	00188$
      000A4C                       2257 00803$:
      000A4C 7B 00            [12] 2258 	mov	r3,#0x00
      000A4E 8C 82            [24] 2259 	mov	dpl,r4
      000A50 8B 83            [24] 2260 	mov	dph,r3
      000A52 12r00r00         [24] 2261 	lcall	_putchar
      000A55 0D               [12] 2262 	inc	r5
                                   2263 ;	calc.c:177: printstr("\r\nstack underflow\r\n");
      000A56 BD 00 E4         [24] 2264 	cjne	r5,#0x00,00282$
      000A59 0E               [12] 2265 	inc	r6
      000A5A 80 E1            [24] 2266 	sjmp	00282$
      000A5C                       2267 00130$:
                                   2268 ;	calc.c:179: d1 -= d0;
      000A5C E5*00            [12] 2269 	mov	a,_bp
      000A5E 24 0B            [12] 2270 	add	a,#0x0b
      000A60 F8               [12] 2271 	mov	r0,a
      000A61 E5*00            [12] 2272 	mov	a,_bp
      000A63 24 07            [12] 2273 	add	a,#0x07
      000A65 F9               [12] 2274 	mov	r1,a
      000A66 E6               [12] 2275 	mov	a,@r0
      000A67 C3               [12] 2276 	clr	c
      000A68 97               [12] 2277 	subb	a,@r1
      000A69 F6               [12] 2278 	mov	@r0,a
      000A6A 08               [12] 2279 	inc	r0
      000A6B E6               [12] 2280 	mov	a,@r0
      000A6C 09               [12] 2281 	inc	r1
      000A6D 97               [12] 2282 	subb	a,@r1
      000A6E F6               [12] 2283 	mov	@r0,a
      000A6F 08               [12] 2284 	inc	r0
      000A70 E6               [12] 2285 	mov	a,@r0
      000A71 09               [12] 2286 	inc	r1
      000A72 97               [12] 2287 	subb	a,@r1
      000A73 F6               [12] 2288 	mov	@r0,a
      000A74 08               [12] 2289 	inc	r0
      000A75 E6               [12] 2290 	mov	a,@r0
      000A76 09               [12] 2291 	inc	r1
      000A77 97               [12] 2292 	subb	a,@r1
      000A78 F6               [12] 2293 	mov	@r0,a
                                   2294 ;	calc.c:180: (void)stack_push(&ctx->s, d1);
      000A79 E5*00            [12] 2295 	mov	a,_bp
      000A7B 24 04            [12] 2296 	add	a,#0x04
      000A7D F8               [12] 2297 	mov	r0,a
      000A7E 74 09            [12] 2298 	mov	a,#0x09
      000A80 26               [12] 2299 	add	a,@r0
      000A81 FD               [12] 2300 	mov	r5,a
      000A82 E4               [12] 2301 	clr	a
      000A83 08               [12] 2302 	inc	r0
      000A84 36               [12] 2303 	addc	a,@r0
      000A85 FE               [12] 2304 	mov	r6,a
      000A86 08               [12] 2305 	inc	r0
      000A87 86 07            [24] 2306 	mov	ar7,@r0
      000A89 E5*00            [12] 2307 	mov	a,_bp
      000A8B 24 0B            [12] 2308 	add	a,#0x0b
      000A8D F8               [12] 2309 	mov	r0,a
      000A8E E6               [12] 2310 	mov	a,@r0
      000A8F C0 E0            [24] 2311 	push	acc
      000A91 08               [12] 2312 	inc	r0
      000A92 E6               [12] 2313 	mov	a,@r0
      000A93 C0 E0            [24] 2314 	push	acc
      000A95 08               [12] 2315 	inc	r0
      000A96 E6               [12] 2316 	mov	a,@r0
      000A97 C0 E0            [24] 2317 	push	acc
      000A99 08               [12] 2318 	inc	r0
      000A9A E6               [12] 2319 	mov	a,@r0
      000A9B C0 E0            [24] 2320 	push	acc
      000A9D 8D 82            [24] 2321 	mov	dpl,r5
      000A9F 8E 83            [24] 2322 	mov	dph,r6
      000AA1 8F F0            [24] 2323 	mov	b,r7
      000AA3 12r00r00         [24] 2324 	lcall	_stack_push
      000AA6 E5 81            [12] 2325 	mov	a,sp
      000AA8 24 FC            [12] 2326 	add	a,#0xfc
      000AAA F5 81            [12] 2327 	mov	sp,a
                                   2328 ;	calc.c:182: break;
      000AAC 02r14r64         [24] 2329 	ljmp	00188$
                                   2330 ;	calc.c:183: case '*':
      000AAF                       2331 00135$:
                                   2332 ;	calc.c:184: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      000AAF E5*00            [12] 2333 	mov	a,_bp
      000AB1 24 07            [12] 2334 	add	a,#0x07
      000AB3 FF               [12] 2335 	mov	r7,a
      000AB4 7E 00            [12] 2336 	mov	r6,#0x00
      000AB6 7D 40            [12] 2337 	mov	r5,#0x40
      000AB8 E5*00            [12] 2338 	mov	a,_bp
      000ABA 24 04            [12] 2339 	add	a,#0x04
      000ABC F8               [12] 2340 	mov	r0,a
      000ABD 74 09            [12] 2341 	mov	a,#0x09
      000ABF 26               [12] 2342 	add	a,@r0
      000AC0 FA               [12] 2343 	mov	r2,a
      000AC1 E4               [12] 2344 	clr	a
      000AC2 08               [12] 2345 	inc	r0
      000AC3 36               [12] 2346 	addc	a,@r0
      000AC4 FB               [12] 2347 	mov	r3,a
      000AC5 08               [12] 2348 	inc	r0
      000AC6 86 04            [24] 2349 	mov	ar4,@r0
      000AC8 C0 07            [24] 2350 	push	ar7
      000ACA C0 06            [24] 2351 	push	ar6
      000ACC C0 05            [24] 2352 	push	ar5
      000ACE 8A 82            [24] 2353 	mov	dpl,r2
      000AD0 8B 83            [24] 2354 	mov	dph,r3
      000AD2 8C F0            [24] 2355 	mov	b,r4
      000AD4 12r00r00         [24] 2356 	lcall	_stack_pop
      000AD7 AE 82            [24] 2357 	mov	r6,dpl
      000AD9 AF 83            [24] 2358 	mov	r7,dph
      000ADB 15 81            [12] 2359 	dec	sp
      000ADD 15 81            [12] 2360 	dec	sp
      000ADF 15 81            [12] 2361 	dec	sp
      000AE1 EE               [12] 2362 	mov	a,r6
      000AE2 4F               [12] 2363 	orl	a,r7
      000AE3 70 25            [24] 2364 	jnz	00140$
      000AE5 7Dr15            [12] 2365 	mov	r5,#___str_2
      000AE7 7Es00            [12] 2366 	mov	r6,#(___str_2 >> 8)
      000AE9 7F 80            [12] 2367 	mov	r7,#0x80
                                   2368 ;	calc.c:50: return;
      000AEB                       2369 00285$:
                                   2370 ;	calc.c:48: for (; *s; s++) putchar(*s);
      000AEB 8D 82            [24] 2371 	mov	dpl,r5
      000AED 8E 83            [24] 2372 	mov	dph,r6
      000AEF 8F F0            [24] 2373 	mov	b,r7
      000AF1 12r00r00         [24] 2374 	lcall	__gptrget
      000AF4 FC               [12] 2375 	mov	r4,a
      000AF5 70 03            [24] 2376 	jnz	00806$
      000AF7 02r14r64         [24] 2377 	ljmp	00188$
      000AFA                       2378 00806$:
      000AFA 7B 00            [12] 2379 	mov	r3,#0x00
      000AFC 8C 82            [24] 2380 	mov	dpl,r4
      000AFE 8B 83            [24] 2381 	mov	dph,r3
      000B00 12r00r00         [24] 2382 	lcall	_putchar
      000B03 0D               [12] 2383 	inc	r5
                                   2384 ;	calc.c:184: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      000B04 BD 00 E4         [24] 2385 	cjne	r5,#0x00,00285$
      000B07 0E               [12] 2386 	inc	r6
      000B08 80 E1            [24] 2387 	sjmp	00285$
      000B0A                       2388 00140$:
                                   2389 ;	calc.c:185: else if (!stack_pop(&ctx->s, &d1)) {
      000B0A E5*00            [12] 2390 	mov	a,_bp
      000B0C 24 0B            [12] 2391 	add	a,#0x0b
      000B0E FF               [12] 2392 	mov	r7,a
      000B0F 7E 00            [12] 2393 	mov	r6,#0x00
      000B11 7D 40            [12] 2394 	mov	r5,#0x40
      000B13 E5*00            [12] 2395 	mov	a,_bp
      000B15 24 04            [12] 2396 	add	a,#0x04
      000B17 F8               [12] 2397 	mov	r0,a
      000B18 74 09            [12] 2398 	mov	a,#0x09
      000B1A 26               [12] 2399 	add	a,@r0
      000B1B FA               [12] 2400 	mov	r2,a
      000B1C E4               [12] 2401 	clr	a
      000B1D 08               [12] 2402 	inc	r0
      000B1E 36               [12] 2403 	addc	a,@r0
      000B1F FB               [12] 2404 	mov	r3,a
      000B20 08               [12] 2405 	inc	r0
      000B21 86 04            [24] 2406 	mov	ar4,@r0
      000B23 C0 07            [24] 2407 	push	ar7
      000B25 C0 06            [24] 2408 	push	ar6
      000B27 C0 05            [24] 2409 	push	ar5
      000B29 8A 82            [24] 2410 	mov	dpl,r2
      000B2B 8B 83            [24] 2411 	mov	dph,r3
      000B2D 8C F0            [24] 2412 	mov	b,r4
      000B2F 12r00r00         [24] 2413 	lcall	_stack_pop
      000B32 AE 82            [24] 2414 	mov	r6,dpl
      000B34 AF 83            [24] 2415 	mov	r7,dph
      000B36 15 81            [12] 2416 	dec	sp
      000B38 15 81            [12] 2417 	dec	sp
      000B3A 15 81            [12] 2418 	dec	sp
      000B3C EE               [12] 2419 	mov	a,r6
      000B3D 4F               [12] 2420 	orl	a,r7
      000B3E 70 58            [24] 2421 	jnz	00137$
                                   2422 ;	calc.c:186: (void)stack_push(&ctx->s, d0);
      000B40 E5*00            [12] 2423 	mov	a,_bp
      000B42 24 04            [12] 2424 	add	a,#0x04
      000B44 F8               [12] 2425 	mov	r0,a
      000B45 74 09            [12] 2426 	mov	a,#0x09
      000B47 26               [12] 2427 	add	a,@r0
      000B48 FD               [12] 2428 	mov	r5,a
      000B49 E4               [12] 2429 	clr	a
      000B4A 08               [12] 2430 	inc	r0
      000B4B 36               [12] 2431 	addc	a,@r0
      000B4C FE               [12] 2432 	mov	r6,a
      000B4D 08               [12] 2433 	inc	r0
      000B4E 86 07            [24] 2434 	mov	ar7,@r0
      000B50 E5*00            [12] 2435 	mov	a,_bp
      000B52 24 07            [12] 2436 	add	a,#0x07
      000B54 F8               [12] 2437 	mov	r0,a
      000B55 E6               [12] 2438 	mov	a,@r0
      000B56 C0 E0            [24] 2439 	push	acc
      000B58 08               [12] 2440 	inc	r0
      000B59 E6               [12] 2441 	mov	a,@r0
      000B5A C0 E0            [24] 2442 	push	acc
      000B5C 08               [12] 2443 	inc	r0
      000B5D E6               [12] 2444 	mov	a,@r0
      000B5E C0 E0            [24] 2445 	push	acc
      000B60 08               [12] 2446 	inc	r0
      000B61 E6               [12] 2447 	mov	a,@r0
      000B62 C0 E0            [24] 2448 	push	acc
      000B64 8D 82            [24] 2449 	mov	dpl,r5
      000B66 8E 83            [24] 2450 	mov	dph,r6
      000B68 8F F0            [24] 2451 	mov	b,r7
      000B6A 12r00r00         [24] 2452 	lcall	_stack_push
      000B6D E5 81            [12] 2453 	mov	a,sp
      000B6F 24 FC            [12] 2454 	add	a,#0xfc
      000B71 F5 81            [12] 2455 	mov	sp,a
                                   2456 ;	calc.c:187: printstr("\r\nstack underflow\r\n");
      000B73 7Dr15            [12] 2457 	mov	r5,#___str_2
      000B75 7Es00            [12] 2458 	mov	r6,#(___str_2 >> 8)
      000B77 7F 80            [12] 2459 	mov	r7,#0x80
                                   2460 ;	calc.c:50: return;
      000B79                       2461 00288$:
                                   2462 ;	calc.c:48: for (; *s; s++) putchar(*s);
      000B79 8D 82            [24] 2463 	mov	dpl,r5
      000B7B 8E 83            [24] 2464 	mov	dph,r6
      000B7D 8F F0            [24] 2465 	mov	b,r7
      000B7F 12r00r00         [24] 2466 	lcall	__gptrget
      000B82 FC               [12] 2467 	mov	r4,a
      000B83 70 03            [24] 2468 	jnz	00809$
      000B85 02r14r64         [24] 2469 	ljmp	00188$
      000B88                       2470 00809$:
      000B88 7B 00            [12] 2471 	mov	r3,#0x00
      000B8A 8C 82            [24] 2472 	mov	dpl,r4
      000B8C 8B 83            [24] 2473 	mov	dph,r3
      000B8E 12r00r00         [24] 2474 	lcall	_putchar
      000B91 0D               [12] 2475 	inc	r5
                                   2476 ;	calc.c:187: printstr("\r\nstack underflow\r\n");
      000B92 BD 00 E4         [24] 2477 	cjne	r5,#0x00,00288$
      000B95 0E               [12] 2478 	inc	r6
      000B96 80 E1            [24] 2479 	sjmp	00288$
      000B98                       2480 00137$:
                                   2481 ;	calc.c:189: d1 *= d0;
      000B98 E5*00            [12] 2482 	mov	a,_bp
      000B9A 24 07            [12] 2483 	add	a,#0x07
      000B9C F8               [12] 2484 	mov	r0,a
      000B9D E6               [12] 2485 	mov	a,@r0
      000B9E C0 E0            [24] 2486 	push	acc
      000BA0 08               [12] 2487 	inc	r0
      000BA1 E6               [12] 2488 	mov	a,@r0
      000BA2 C0 E0            [24] 2489 	push	acc
      000BA4 08               [12] 2490 	inc	r0
      000BA5 E6               [12] 2491 	mov	a,@r0
      000BA6 C0 E0            [24] 2492 	push	acc
      000BA8 08               [12] 2493 	inc	r0
      000BA9 E6               [12] 2494 	mov	a,@r0
      000BAA C0 E0            [24] 2495 	push	acc
      000BAC E5*00            [12] 2496 	mov	a,_bp
      000BAE 24 0B            [12] 2497 	add	a,#0x0b
      000BB0 F8               [12] 2498 	mov	r0,a
      000BB1 86 82            [24] 2499 	mov	dpl,@r0
      000BB3 08               [12] 2500 	inc	r0
      000BB4 86 83            [24] 2501 	mov	dph,@r0
      000BB6 08               [12] 2502 	inc	r0
      000BB7 86 F0            [24] 2503 	mov	b,@r0
      000BB9 08               [12] 2504 	inc	r0
      000BBA E6               [12] 2505 	mov	a,@r0
      000BBB 12r00r00         [24] 2506 	lcall	__mullong
      000BBE AC 82            [24] 2507 	mov	r4,dpl
      000BC0 AD 83            [24] 2508 	mov	r5,dph
      000BC2 AE F0            [24] 2509 	mov	r6,b
      000BC4 FF               [12] 2510 	mov	r7,a
      000BC5 E5 81            [12] 2511 	mov	a,sp
      000BC7 24 FC            [12] 2512 	add	a,#0xfc
      000BC9 F5 81            [12] 2513 	mov	sp,a
      000BCB E5*00            [12] 2514 	mov	a,_bp
      000BCD 24 0B            [12] 2515 	add	a,#0x0b
      000BCF F8               [12] 2516 	mov	r0,a
      000BD0 A6 04            [24] 2517 	mov	@r0,ar4
      000BD2 08               [12] 2518 	inc	r0
      000BD3 A6 05            [24] 2519 	mov	@r0,ar5
      000BD5 08               [12] 2520 	inc	r0
      000BD6 A6 06            [24] 2521 	mov	@r0,ar6
      000BD8 08               [12] 2522 	inc	r0
      000BD9 A6 07            [24] 2523 	mov	@r0,ar7
                                   2524 ;	calc.c:190: (void)stack_push(&ctx->s, d1);
      000BDB E5*00            [12] 2525 	mov	a,_bp
      000BDD 24 04            [12] 2526 	add	a,#0x04
      000BDF F8               [12] 2527 	mov	r0,a
      000BE0 74 09            [12] 2528 	mov	a,#0x09
      000BE2 26               [12] 2529 	add	a,@r0
      000BE3 FD               [12] 2530 	mov	r5,a
      000BE4 E4               [12] 2531 	clr	a
      000BE5 08               [12] 2532 	inc	r0
      000BE6 36               [12] 2533 	addc	a,@r0
      000BE7 FE               [12] 2534 	mov	r6,a
      000BE8 08               [12] 2535 	inc	r0
      000BE9 86 07            [24] 2536 	mov	ar7,@r0
      000BEB E5*00            [12] 2537 	mov	a,_bp
      000BED 24 0B            [12] 2538 	add	a,#0x0b
      000BEF F8               [12] 2539 	mov	r0,a
      000BF0 E6               [12] 2540 	mov	a,@r0
      000BF1 C0 E0            [24] 2541 	push	acc
      000BF3 08               [12] 2542 	inc	r0
      000BF4 E6               [12] 2543 	mov	a,@r0
      000BF5 C0 E0            [24] 2544 	push	acc
      000BF7 08               [12] 2545 	inc	r0
      000BF8 E6               [12] 2546 	mov	a,@r0
      000BF9 C0 E0            [24] 2547 	push	acc
      000BFB 08               [12] 2548 	inc	r0
      000BFC E6               [12] 2549 	mov	a,@r0
      000BFD C0 E0            [24] 2550 	push	acc
      000BFF 8D 82            [24] 2551 	mov	dpl,r5
      000C01 8E 83            [24] 2552 	mov	dph,r6
      000C03 8F F0            [24] 2553 	mov	b,r7
      000C05 12r00r00         [24] 2554 	lcall	_stack_push
      000C08 E5 81            [12] 2555 	mov	a,sp
      000C0A 24 FC            [12] 2556 	add	a,#0xfc
      000C0C F5 81            [12] 2557 	mov	sp,a
                                   2558 ;	calc.c:192: break;
      000C0E 02r14r64         [24] 2559 	ljmp	00188$
                                   2560 ;	calc.c:193: case '/':
      000C11                       2561 00142$:
                                   2562 ;	calc.c:194: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      000C11 E5*00            [12] 2563 	mov	a,_bp
      000C13 24 07            [12] 2564 	add	a,#0x07
      000C15 FF               [12] 2565 	mov	r7,a
      000C16 7E 00            [12] 2566 	mov	r6,#0x00
      000C18 7D 40            [12] 2567 	mov	r5,#0x40
      000C1A E5*00            [12] 2568 	mov	a,_bp
      000C1C 24 04            [12] 2569 	add	a,#0x04
      000C1E F8               [12] 2570 	mov	r0,a
      000C1F 74 09            [12] 2571 	mov	a,#0x09
      000C21 26               [12] 2572 	add	a,@r0
      000C22 FA               [12] 2573 	mov	r2,a
      000C23 E4               [12] 2574 	clr	a
      000C24 08               [12] 2575 	inc	r0
      000C25 36               [12] 2576 	addc	a,@r0
      000C26 FB               [12] 2577 	mov	r3,a
      000C27 08               [12] 2578 	inc	r0
      000C28 86 04            [24] 2579 	mov	ar4,@r0
      000C2A C0 07            [24] 2580 	push	ar7
      000C2C C0 06            [24] 2581 	push	ar6
      000C2E C0 05            [24] 2582 	push	ar5
      000C30 8A 82            [24] 2583 	mov	dpl,r2
      000C32 8B 83            [24] 2584 	mov	dph,r3
      000C34 8C F0            [24] 2585 	mov	b,r4
      000C36 12r00r00         [24] 2586 	lcall	_stack_pop
      000C39 AE 82            [24] 2587 	mov	r6,dpl
      000C3B AF 83            [24] 2588 	mov	r7,dph
      000C3D 15 81            [12] 2589 	dec	sp
      000C3F 15 81            [12] 2590 	dec	sp
      000C41 15 81            [12] 2591 	dec	sp
      000C43 EE               [12] 2592 	mov	a,r6
      000C44 4F               [12] 2593 	orl	a,r7
      000C45 70 25            [24] 2594 	jnz	00150$
      000C47 7Dr15            [12] 2595 	mov	r5,#___str_2
      000C49 7Es00            [12] 2596 	mov	r6,#(___str_2 >> 8)
      000C4B 7F 80            [12] 2597 	mov	r7,#0x80
                                   2598 ;	calc.c:50: return;
      000C4D                       2599 00291$:
                                   2600 ;	calc.c:48: for (; *s; s++) putchar(*s);
      000C4D 8D 82            [24] 2601 	mov	dpl,r5
      000C4F 8E 83            [24] 2602 	mov	dph,r6
      000C51 8F F0            [24] 2603 	mov	b,r7
      000C53 12r00r00         [24] 2604 	lcall	__gptrget
      000C56 FC               [12] 2605 	mov	r4,a
      000C57 70 03            [24] 2606 	jnz	00812$
      000C59 02r14r64         [24] 2607 	ljmp	00188$
      000C5C                       2608 00812$:
      000C5C 7B 00            [12] 2609 	mov	r3,#0x00
      000C5E 8C 82            [24] 2610 	mov	dpl,r4
      000C60 8B 83            [24] 2611 	mov	dph,r3
      000C62 12r00r00         [24] 2612 	lcall	_putchar
      000C65 0D               [12] 2613 	inc	r5
                                   2614 ;	calc.c:194: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      000C66 BD 00 E4         [24] 2615 	cjne	r5,#0x00,00291$
      000C69 0E               [12] 2616 	inc	r6
      000C6A 80 E1            [24] 2617 	sjmp	00291$
      000C6C                       2618 00150$:
                                   2619 ;	calc.c:195: else if (!stack_pop(&ctx->s, &d1)) {
      000C6C E5*00            [12] 2620 	mov	a,_bp
      000C6E 24 0B            [12] 2621 	add	a,#0x0b
      000C70 FF               [12] 2622 	mov	r7,a
      000C71 7E 00            [12] 2623 	mov	r6,#0x00
      000C73 7D 40            [12] 2624 	mov	r5,#0x40
      000C75 E5*00            [12] 2625 	mov	a,_bp
      000C77 24 04            [12] 2626 	add	a,#0x04
      000C79 F8               [12] 2627 	mov	r0,a
      000C7A 74 09            [12] 2628 	mov	a,#0x09
      000C7C 26               [12] 2629 	add	a,@r0
      000C7D FA               [12] 2630 	mov	r2,a
      000C7E E4               [12] 2631 	clr	a
      000C7F 08               [12] 2632 	inc	r0
      000C80 36               [12] 2633 	addc	a,@r0
      000C81 FB               [12] 2634 	mov	r3,a
      000C82 08               [12] 2635 	inc	r0
      000C83 86 04            [24] 2636 	mov	ar4,@r0
      000C85 C0 07            [24] 2637 	push	ar7
      000C87 C0 06            [24] 2638 	push	ar6
      000C89 C0 05            [24] 2639 	push	ar5
      000C8B 8A 82            [24] 2640 	mov	dpl,r2
      000C8D 8B 83            [24] 2641 	mov	dph,r3
      000C8F 8C F0            [24] 2642 	mov	b,r4
      000C91 12r00r00         [24] 2643 	lcall	_stack_pop
      000C94 AE 82            [24] 2644 	mov	r6,dpl
      000C96 AF 83            [24] 2645 	mov	r7,dph
      000C98 15 81            [12] 2646 	dec	sp
      000C9A 15 81            [12] 2647 	dec	sp
      000C9C 15 81            [12] 2648 	dec	sp
      000C9E EE               [12] 2649 	mov	a,r6
      000C9F 4F               [12] 2650 	orl	a,r7
      000CA0 70 58            [24] 2651 	jnz	00147$
                                   2652 ;	calc.c:196: (void)stack_push(&ctx->s, d0);
      000CA2 E5*00            [12] 2653 	mov	a,_bp
      000CA4 24 04            [12] 2654 	add	a,#0x04
      000CA6 F8               [12] 2655 	mov	r0,a
      000CA7 74 09            [12] 2656 	mov	a,#0x09
      000CA9 26               [12] 2657 	add	a,@r0
      000CAA FD               [12] 2658 	mov	r5,a
      000CAB E4               [12] 2659 	clr	a
      000CAC 08               [12] 2660 	inc	r0
      000CAD 36               [12] 2661 	addc	a,@r0
      000CAE FE               [12] 2662 	mov	r6,a
      000CAF 08               [12] 2663 	inc	r0
      000CB0 86 07            [24] 2664 	mov	ar7,@r0
      000CB2 E5*00            [12] 2665 	mov	a,_bp
      000CB4 24 07            [12] 2666 	add	a,#0x07
      000CB6 F8               [12] 2667 	mov	r0,a
      000CB7 E6               [12] 2668 	mov	a,@r0
      000CB8 C0 E0            [24] 2669 	push	acc
      000CBA 08               [12] 2670 	inc	r0
      000CBB E6               [12] 2671 	mov	a,@r0
      000CBC C0 E0            [24] 2672 	push	acc
      000CBE 08               [12] 2673 	inc	r0
      000CBF E6               [12] 2674 	mov	a,@r0
      000CC0 C0 E0            [24] 2675 	push	acc
      000CC2 08               [12] 2676 	inc	r0
      000CC3 E6               [12] 2677 	mov	a,@r0
      000CC4 C0 E0            [24] 2678 	push	acc
      000CC6 8D 82            [24] 2679 	mov	dpl,r5
      000CC8 8E 83            [24] 2680 	mov	dph,r6
      000CCA 8F F0            [24] 2681 	mov	b,r7
      000CCC 12r00r00         [24] 2682 	lcall	_stack_push
      000CCF E5 81            [12] 2683 	mov	a,sp
      000CD1 24 FC            [12] 2684 	add	a,#0xfc
      000CD3 F5 81            [12] 2685 	mov	sp,a
                                   2686 ;	calc.c:197: printstr("\r\nstack underflow\r\n");
      000CD5 7Dr15            [12] 2687 	mov	r5,#___str_2
      000CD7 7Es00            [12] 2688 	mov	r6,#(___str_2 >> 8)
      000CD9 7F 80            [12] 2689 	mov	r7,#0x80
                                   2690 ;	calc.c:50: return;
      000CDB                       2691 00294$:
                                   2692 ;	calc.c:48: for (; *s; s++) putchar(*s);
      000CDB 8D 82            [24] 2693 	mov	dpl,r5
      000CDD 8E 83            [24] 2694 	mov	dph,r6
      000CDF 8F F0            [24] 2695 	mov	b,r7
      000CE1 12r00r00         [24] 2696 	lcall	__gptrget
      000CE4 FC               [12] 2697 	mov	r4,a
      000CE5 70 03            [24] 2698 	jnz	00815$
      000CE7 02r14r64         [24] 2699 	ljmp	00188$
      000CEA                       2700 00815$:
      000CEA 7B 00            [12] 2701 	mov	r3,#0x00
      000CEC 8C 82            [24] 2702 	mov	dpl,r4
      000CEE 8B 83            [24] 2703 	mov	dph,r3
      000CF0 12r00r00         [24] 2704 	lcall	_putchar
      000CF3 0D               [12] 2705 	inc	r5
                                   2706 ;	calc.c:197: printstr("\r\nstack underflow\r\n");
      000CF4 BD 00 E4         [24] 2707 	cjne	r5,#0x00,00294$
      000CF7 0E               [12] 2708 	inc	r6
      000CF8 80 E1            [24] 2709 	sjmp	00294$
      000CFA                       2710 00147$:
                                   2711 ;	calc.c:198: } else if (!d0) {
      000CFA E5*00            [12] 2712 	mov	a,_bp
      000CFC 24 07            [12] 2713 	add	a,#0x07
      000CFE F8               [12] 2714 	mov	r0,a
      000CFF E6               [12] 2715 	mov	a,@r0
      000D00 08               [12] 2716 	inc	r0
      000D01 46               [12] 2717 	orl	a,@r0
      000D02 08               [12] 2718 	inc	r0
      000D03 46               [12] 2719 	orl	a,@r0
      000D04 08               [12] 2720 	inc	r0
      000D05 46               [12] 2721 	orl	a,@r0
      000D06 60 03            [24] 2722 	jz	00817$
      000D08 02r0Dr96         [24] 2723 	ljmp	00144$
      000D0B                       2724 00817$:
                                   2725 ;	calc.c:199: (void)stack_push(&ctx->s, d1);
      000D0B E5*00            [12] 2726 	mov	a,_bp
      000D0D 24 04            [12] 2727 	add	a,#0x04
      000D0F F8               [12] 2728 	mov	r0,a
      000D10 74 09            [12] 2729 	mov	a,#0x09
      000D12 26               [12] 2730 	add	a,@r0
      000D13 FD               [12] 2731 	mov	r5,a
      000D14 E4               [12] 2732 	clr	a
      000D15 08               [12] 2733 	inc	r0
      000D16 36               [12] 2734 	addc	a,@r0
      000D17 FE               [12] 2735 	mov	r6,a
      000D18 08               [12] 2736 	inc	r0
      000D19 86 07            [24] 2737 	mov	ar7,@r0
      000D1B E5*00            [12] 2738 	mov	a,_bp
      000D1D 24 0B            [12] 2739 	add	a,#0x0b
      000D1F F8               [12] 2740 	mov	r0,a
      000D20 E6               [12] 2741 	mov	a,@r0
      000D21 C0 E0            [24] 2742 	push	acc
      000D23 08               [12] 2743 	inc	r0
      000D24 E6               [12] 2744 	mov	a,@r0
      000D25 C0 E0            [24] 2745 	push	acc
      000D27 08               [12] 2746 	inc	r0
      000D28 E6               [12] 2747 	mov	a,@r0
      000D29 C0 E0            [24] 2748 	push	acc
      000D2B 08               [12] 2749 	inc	r0
      000D2C E6               [12] 2750 	mov	a,@r0
      000D2D C0 E0            [24] 2751 	push	acc
      000D2F 8D 82            [24] 2752 	mov	dpl,r5
      000D31 8E 83            [24] 2753 	mov	dph,r6
      000D33 8F F0            [24] 2754 	mov	b,r7
      000D35 12r00r00         [24] 2755 	lcall	_stack_push
      000D38 E5 81            [12] 2756 	mov	a,sp
      000D3A 24 FC            [12] 2757 	add	a,#0xfc
      000D3C F5 81            [12] 2758 	mov	sp,a
                                   2759 ;	calc.c:200: (void)stack_push(&ctx->s, d0);			
      000D3E E5*00            [12] 2760 	mov	a,_bp
      000D40 24 04            [12] 2761 	add	a,#0x04
      000D42 F8               [12] 2762 	mov	r0,a
      000D43 74 09            [12] 2763 	mov	a,#0x09
      000D45 26               [12] 2764 	add	a,@r0
      000D46 FD               [12] 2765 	mov	r5,a
      000D47 E4               [12] 2766 	clr	a
      000D48 08               [12] 2767 	inc	r0
      000D49 36               [12] 2768 	addc	a,@r0
      000D4A FE               [12] 2769 	mov	r6,a
      000D4B 08               [12] 2770 	inc	r0
      000D4C 86 07            [24] 2771 	mov	ar7,@r0
      000D4E E5*00            [12] 2772 	mov	a,_bp
      000D50 24 07            [12] 2773 	add	a,#0x07
      000D52 F8               [12] 2774 	mov	r0,a
      000D53 E6               [12] 2775 	mov	a,@r0
      000D54 C0 E0            [24] 2776 	push	acc
      000D56 08               [12] 2777 	inc	r0
      000D57 E6               [12] 2778 	mov	a,@r0
      000D58 C0 E0            [24] 2779 	push	acc
      000D5A 08               [12] 2780 	inc	r0
      000D5B E6               [12] 2781 	mov	a,@r0
      000D5C C0 E0            [24] 2782 	push	acc
      000D5E 08               [12] 2783 	inc	r0
      000D5F E6               [12] 2784 	mov	a,@r0
      000D60 C0 E0            [24] 2785 	push	acc
      000D62 8D 82            [24] 2786 	mov	dpl,r5
      000D64 8E 83            [24] 2787 	mov	dph,r6
      000D66 8F F0            [24] 2788 	mov	b,r7
      000D68 12r00r00         [24] 2789 	lcall	_stack_push
      000D6B E5 81            [12] 2790 	mov	a,sp
      000D6D 24 FC            [12] 2791 	add	a,#0xfc
      000D6F F5 81            [12] 2792 	mov	sp,a
                                   2793 ;	calc.c:201: printstr("\r\ndivision by zero\r\n");
      000D71 7Dr29            [12] 2794 	mov	r5,#___str_3
      000D73 7Es00            [12] 2795 	mov	r6,#(___str_3 >> 8)
      000D75 7F 80            [12] 2796 	mov	r7,#0x80
                                   2797 ;	calc.c:50: return;
      000D77                       2798 00297$:
                                   2799 ;	calc.c:48: for (; *s; s++) putchar(*s);
      000D77 8D 82            [24] 2800 	mov	dpl,r5
      000D79 8E 83            [24] 2801 	mov	dph,r6
      000D7B 8F F0            [24] 2802 	mov	b,r7
      000D7D 12r00r00         [24] 2803 	lcall	__gptrget
      000D80 FC               [12] 2804 	mov	r4,a
      000D81 70 03            [24] 2805 	jnz	00818$
      000D83 02r14r64         [24] 2806 	ljmp	00188$
      000D86                       2807 00818$:
      000D86 7B 00            [12] 2808 	mov	r3,#0x00
      000D88 8C 82            [24] 2809 	mov	dpl,r4
      000D8A 8B 83            [24] 2810 	mov	dph,r3
      000D8C 12r00r00         [24] 2811 	lcall	_putchar
      000D8F 0D               [12] 2812 	inc	r5
                                   2813 ;	calc.c:201: printstr("\r\ndivision by zero\r\n");
      000D90 BD 00 E4         [24] 2814 	cjne	r5,#0x00,00297$
      000D93 0E               [12] 2815 	inc	r6
      000D94 80 E1            [24] 2816 	sjmp	00297$
      000D96                       2817 00144$:
                                   2818 ;	calc.c:203: d1 /= d0;
      000D96 E5*00            [12] 2819 	mov	a,_bp
      000D98 24 07            [12] 2820 	add	a,#0x07
      000D9A F8               [12] 2821 	mov	r0,a
      000D9B E6               [12] 2822 	mov	a,@r0
      000D9C C0 E0            [24] 2823 	push	acc
      000D9E 08               [12] 2824 	inc	r0
      000D9F E6               [12] 2825 	mov	a,@r0
      000DA0 C0 E0            [24] 2826 	push	acc
      000DA2 08               [12] 2827 	inc	r0
      000DA3 E6               [12] 2828 	mov	a,@r0
      000DA4 C0 E0            [24] 2829 	push	acc
      000DA6 08               [12] 2830 	inc	r0
      000DA7 E6               [12] 2831 	mov	a,@r0
      000DA8 C0 E0            [24] 2832 	push	acc
      000DAA E5*00            [12] 2833 	mov	a,_bp
      000DAC 24 0B            [12] 2834 	add	a,#0x0b
      000DAE F8               [12] 2835 	mov	r0,a
      000DAF 86 82            [24] 2836 	mov	dpl,@r0
      000DB1 08               [12] 2837 	inc	r0
      000DB2 86 83            [24] 2838 	mov	dph,@r0
      000DB4 08               [12] 2839 	inc	r0
      000DB5 86 F0            [24] 2840 	mov	b,@r0
      000DB7 08               [12] 2841 	inc	r0
      000DB8 E6               [12] 2842 	mov	a,@r0
      000DB9 12r00r00         [24] 2843 	lcall	__divslong
      000DBC AC 82            [24] 2844 	mov	r4,dpl
      000DBE AD 83            [24] 2845 	mov	r5,dph
      000DC0 AE F0            [24] 2846 	mov	r6,b
      000DC2 FF               [12] 2847 	mov	r7,a
      000DC3 E5 81            [12] 2848 	mov	a,sp
      000DC5 24 FC            [12] 2849 	add	a,#0xfc
      000DC7 F5 81            [12] 2850 	mov	sp,a
      000DC9 E5*00            [12] 2851 	mov	a,_bp
      000DCB 24 0B            [12] 2852 	add	a,#0x0b
      000DCD F8               [12] 2853 	mov	r0,a
      000DCE A6 04            [24] 2854 	mov	@r0,ar4
      000DD0 08               [12] 2855 	inc	r0
      000DD1 A6 05            [24] 2856 	mov	@r0,ar5
      000DD3 08               [12] 2857 	inc	r0
      000DD4 A6 06            [24] 2858 	mov	@r0,ar6
      000DD6 08               [12] 2859 	inc	r0
      000DD7 A6 07            [24] 2860 	mov	@r0,ar7
                                   2861 ;	calc.c:204: (void)stack_push(&ctx->s, d1);
      000DD9 E5*00            [12] 2862 	mov	a,_bp
      000DDB 24 04            [12] 2863 	add	a,#0x04
      000DDD F8               [12] 2864 	mov	r0,a
      000DDE 74 09            [12] 2865 	mov	a,#0x09
      000DE0 26               [12] 2866 	add	a,@r0
      000DE1 FD               [12] 2867 	mov	r5,a
      000DE2 E4               [12] 2868 	clr	a
      000DE3 08               [12] 2869 	inc	r0
      000DE4 36               [12] 2870 	addc	a,@r0
      000DE5 FE               [12] 2871 	mov	r6,a
      000DE6 08               [12] 2872 	inc	r0
      000DE7 86 07            [24] 2873 	mov	ar7,@r0
      000DE9 E5*00            [12] 2874 	mov	a,_bp
      000DEB 24 0B            [12] 2875 	add	a,#0x0b
      000DED F8               [12] 2876 	mov	r0,a
      000DEE E6               [12] 2877 	mov	a,@r0
      000DEF C0 E0            [24] 2878 	push	acc
      000DF1 08               [12] 2879 	inc	r0
      000DF2 E6               [12] 2880 	mov	a,@r0
      000DF3 C0 E0            [24] 2881 	push	acc
      000DF5 08               [12] 2882 	inc	r0
      000DF6 E6               [12] 2883 	mov	a,@r0
      000DF7 C0 E0            [24] 2884 	push	acc
      000DF9 08               [12] 2885 	inc	r0
      000DFA E6               [12] 2886 	mov	a,@r0
      000DFB C0 E0            [24] 2887 	push	acc
      000DFD 8D 82            [24] 2888 	mov	dpl,r5
      000DFF 8E 83            [24] 2889 	mov	dph,r6
      000E01 8F F0            [24] 2890 	mov	b,r7
      000E03 12r00r00         [24] 2891 	lcall	_stack_push
      000E06 E5 81            [12] 2892 	mov	a,sp
      000E08 24 FC            [12] 2893 	add	a,#0xfc
      000E0A F5 81            [12] 2894 	mov	sp,a
                                   2895 ;	calc.c:206: break;
      000E0C 02r14r64         [24] 2896 	ljmp	00188$
                                   2897 ;	calc.c:207: case '%':
      000E0F                       2898 00152$:
                                   2899 ;	calc.c:208: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      000E0F E5*00            [12] 2900 	mov	a,_bp
      000E11 24 07            [12] 2901 	add	a,#0x07
      000E13 FF               [12] 2902 	mov	r7,a
      000E14 7E 00            [12] 2903 	mov	r6,#0x00
      000E16 7D 40            [12] 2904 	mov	r5,#0x40
      000E18 E5*00            [12] 2905 	mov	a,_bp
      000E1A 24 04            [12] 2906 	add	a,#0x04
      000E1C F8               [12] 2907 	mov	r0,a
      000E1D 74 09            [12] 2908 	mov	a,#0x09
      000E1F 26               [12] 2909 	add	a,@r0
      000E20 FA               [12] 2910 	mov	r2,a
      000E21 E4               [12] 2911 	clr	a
      000E22 08               [12] 2912 	inc	r0
      000E23 36               [12] 2913 	addc	a,@r0
      000E24 FB               [12] 2914 	mov	r3,a
      000E25 08               [12] 2915 	inc	r0
      000E26 86 04            [24] 2916 	mov	ar4,@r0
      000E28 C0 07            [24] 2917 	push	ar7
      000E2A C0 06            [24] 2918 	push	ar6
      000E2C C0 05            [24] 2919 	push	ar5
      000E2E 8A 82            [24] 2920 	mov	dpl,r2
      000E30 8B 83            [24] 2921 	mov	dph,r3
      000E32 8C F0            [24] 2922 	mov	b,r4
      000E34 12r00r00         [24] 2923 	lcall	_stack_pop
      000E37 AE 82            [24] 2924 	mov	r6,dpl
      000E39 AF 83            [24] 2925 	mov	r7,dph
      000E3B 15 81            [12] 2926 	dec	sp
      000E3D 15 81            [12] 2927 	dec	sp
      000E3F 15 81            [12] 2928 	dec	sp
      000E41 EE               [12] 2929 	mov	a,r6
      000E42 4F               [12] 2930 	orl	a,r7
      000E43 70 25            [24] 2931 	jnz	00160$
      000E45 7Dr15            [12] 2932 	mov	r5,#___str_2
      000E47 7Es00            [12] 2933 	mov	r6,#(___str_2 >> 8)
      000E49 7F 80            [12] 2934 	mov	r7,#0x80
                                   2935 ;	calc.c:50: return;
      000E4B                       2936 00300$:
                                   2937 ;	calc.c:48: for (; *s; s++) putchar(*s);
      000E4B 8D 82            [24] 2938 	mov	dpl,r5
      000E4D 8E 83            [24] 2939 	mov	dph,r6
      000E4F 8F F0            [24] 2940 	mov	b,r7
      000E51 12r00r00         [24] 2941 	lcall	__gptrget
      000E54 FC               [12] 2942 	mov	r4,a
      000E55 70 03            [24] 2943 	jnz	00821$
      000E57 02r14r64         [24] 2944 	ljmp	00188$
      000E5A                       2945 00821$:
      000E5A 7B 00            [12] 2946 	mov	r3,#0x00
      000E5C 8C 82            [24] 2947 	mov	dpl,r4
      000E5E 8B 83            [24] 2948 	mov	dph,r3
      000E60 12r00r00         [24] 2949 	lcall	_putchar
      000E63 0D               [12] 2950 	inc	r5
                                   2951 ;	calc.c:208: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      000E64 BD 00 E4         [24] 2952 	cjne	r5,#0x00,00300$
      000E67 0E               [12] 2953 	inc	r6
      000E68 80 E1            [24] 2954 	sjmp	00300$
      000E6A                       2955 00160$:
                                   2956 ;	calc.c:209: else if (!stack_pop(&ctx->s, &d1)) {
      000E6A E5*00            [12] 2957 	mov	a,_bp
      000E6C 24 0B            [12] 2958 	add	a,#0x0b
      000E6E FF               [12] 2959 	mov	r7,a
      000E6F 7E 00            [12] 2960 	mov	r6,#0x00
      000E71 7D 40            [12] 2961 	mov	r5,#0x40
      000E73 E5*00            [12] 2962 	mov	a,_bp
      000E75 24 04            [12] 2963 	add	a,#0x04
      000E77 F8               [12] 2964 	mov	r0,a
      000E78 74 09            [12] 2965 	mov	a,#0x09
      000E7A 26               [12] 2966 	add	a,@r0
      000E7B FA               [12] 2967 	mov	r2,a
      000E7C E4               [12] 2968 	clr	a
      000E7D 08               [12] 2969 	inc	r0
      000E7E 36               [12] 2970 	addc	a,@r0
      000E7F FB               [12] 2971 	mov	r3,a
      000E80 08               [12] 2972 	inc	r0
      000E81 86 04            [24] 2973 	mov	ar4,@r0
      000E83 C0 07            [24] 2974 	push	ar7
      000E85 C0 06            [24] 2975 	push	ar6
      000E87 C0 05            [24] 2976 	push	ar5
      000E89 8A 82            [24] 2977 	mov	dpl,r2
      000E8B 8B 83            [24] 2978 	mov	dph,r3
      000E8D 8C F0            [24] 2979 	mov	b,r4
      000E8F 12r00r00         [24] 2980 	lcall	_stack_pop
      000E92 AE 82            [24] 2981 	mov	r6,dpl
      000E94 AF 83            [24] 2982 	mov	r7,dph
      000E96 15 81            [12] 2983 	dec	sp
      000E98 15 81            [12] 2984 	dec	sp
      000E9A 15 81            [12] 2985 	dec	sp
      000E9C EE               [12] 2986 	mov	a,r6
      000E9D 4F               [12] 2987 	orl	a,r7
      000E9E 70 58            [24] 2988 	jnz	00157$
                                   2989 ;	calc.c:210: (void)stack_push(&ctx->s, d0);
      000EA0 E5*00            [12] 2990 	mov	a,_bp
      000EA2 24 04            [12] 2991 	add	a,#0x04
      000EA4 F8               [12] 2992 	mov	r0,a
      000EA5 74 09            [12] 2993 	mov	a,#0x09
      000EA7 26               [12] 2994 	add	a,@r0
      000EA8 FD               [12] 2995 	mov	r5,a
      000EA9 E4               [12] 2996 	clr	a
      000EAA 08               [12] 2997 	inc	r0
      000EAB 36               [12] 2998 	addc	a,@r0
      000EAC FE               [12] 2999 	mov	r6,a
      000EAD 08               [12] 3000 	inc	r0
      000EAE 86 07            [24] 3001 	mov	ar7,@r0
      000EB0 E5*00            [12] 3002 	mov	a,_bp
      000EB2 24 07            [12] 3003 	add	a,#0x07
      000EB4 F8               [12] 3004 	mov	r0,a
      000EB5 E6               [12] 3005 	mov	a,@r0
      000EB6 C0 E0            [24] 3006 	push	acc
      000EB8 08               [12] 3007 	inc	r0
      000EB9 E6               [12] 3008 	mov	a,@r0
      000EBA C0 E0            [24] 3009 	push	acc
      000EBC 08               [12] 3010 	inc	r0
      000EBD E6               [12] 3011 	mov	a,@r0
      000EBE C0 E0            [24] 3012 	push	acc
      000EC0 08               [12] 3013 	inc	r0
      000EC1 E6               [12] 3014 	mov	a,@r0
      000EC2 C0 E0            [24] 3015 	push	acc
      000EC4 8D 82            [24] 3016 	mov	dpl,r5
      000EC6 8E 83            [24] 3017 	mov	dph,r6
      000EC8 8F F0            [24] 3018 	mov	b,r7
      000ECA 12r00r00         [24] 3019 	lcall	_stack_push
      000ECD E5 81            [12] 3020 	mov	a,sp
      000ECF 24 FC            [12] 3021 	add	a,#0xfc
      000ED1 F5 81            [12] 3022 	mov	sp,a
                                   3023 ;	calc.c:211: printstr("\r\nstack underflow\r\n");
      000ED3 7Dr15            [12] 3024 	mov	r5,#___str_2
      000ED5 7Es00            [12] 3025 	mov	r6,#(___str_2 >> 8)
      000ED7 7F 80            [12] 3026 	mov	r7,#0x80
                                   3027 ;	calc.c:50: return;
      000ED9                       3028 00303$:
                                   3029 ;	calc.c:48: for (; *s; s++) putchar(*s);
      000ED9 8D 82            [24] 3030 	mov	dpl,r5
      000EDB 8E 83            [24] 3031 	mov	dph,r6
      000EDD 8F F0            [24] 3032 	mov	b,r7
      000EDF 12r00r00         [24] 3033 	lcall	__gptrget
      000EE2 FC               [12] 3034 	mov	r4,a
      000EE3 70 03            [24] 3035 	jnz	00824$
      000EE5 02r14r64         [24] 3036 	ljmp	00188$
      000EE8                       3037 00824$:
      000EE8 7B 00            [12] 3038 	mov	r3,#0x00
      000EEA 8C 82            [24] 3039 	mov	dpl,r4
      000EEC 8B 83            [24] 3040 	mov	dph,r3
      000EEE 12r00r00         [24] 3041 	lcall	_putchar
      000EF1 0D               [12] 3042 	inc	r5
                                   3043 ;	calc.c:211: printstr("\r\nstack underflow\r\n");
      000EF2 BD 00 E4         [24] 3044 	cjne	r5,#0x00,00303$
      000EF5 0E               [12] 3045 	inc	r6
      000EF6 80 E1            [24] 3046 	sjmp	00303$
      000EF8                       3047 00157$:
                                   3048 ;	calc.c:212: } else if (!d0) {
      000EF8 E5*00            [12] 3049 	mov	a,_bp
      000EFA 24 07            [12] 3050 	add	a,#0x07
      000EFC F8               [12] 3051 	mov	r0,a
      000EFD E6               [12] 3052 	mov	a,@r0
      000EFE 08               [12] 3053 	inc	r0
      000EFF 46               [12] 3054 	orl	a,@r0
      000F00 08               [12] 3055 	inc	r0
      000F01 46               [12] 3056 	orl	a,@r0
      000F02 08               [12] 3057 	inc	r0
      000F03 46               [12] 3058 	orl	a,@r0
      000F04 60 03            [24] 3059 	jz	00826$
      000F06 02r0Fr94         [24] 3060 	ljmp	00154$
      000F09                       3061 00826$:
                                   3062 ;	calc.c:213: (void)stack_push(&ctx->s, d1);
      000F09 E5*00            [12] 3063 	mov	a,_bp
      000F0B 24 04            [12] 3064 	add	a,#0x04
      000F0D F8               [12] 3065 	mov	r0,a
      000F0E 74 09            [12] 3066 	mov	a,#0x09
      000F10 26               [12] 3067 	add	a,@r0
      000F11 FD               [12] 3068 	mov	r5,a
      000F12 E4               [12] 3069 	clr	a
      000F13 08               [12] 3070 	inc	r0
      000F14 36               [12] 3071 	addc	a,@r0
      000F15 FE               [12] 3072 	mov	r6,a
      000F16 08               [12] 3073 	inc	r0
      000F17 86 07            [24] 3074 	mov	ar7,@r0
      000F19 E5*00            [12] 3075 	mov	a,_bp
      000F1B 24 0B            [12] 3076 	add	a,#0x0b
      000F1D F8               [12] 3077 	mov	r0,a
      000F1E E6               [12] 3078 	mov	a,@r0
      000F1F C0 E0            [24] 3079 	push	acc
      000F21 08               [12] 3080 	inc	r0
      000F22 E6               [12] 3081 	mov	a,@r0
      000F23 C0 E0            [24] 3082 	push	acc
      000F25 08               [12] 3083 	inc	r0
      000F26 E6               [12] 3084 	mov	a,@r0
      000F27 C0 E0            [24] 3085 	push	acc
      000F29 08               [12] 3086 	inc	r0
      000F2A E6               [12] 3087 	mov	a,@r0
      000F2B C0 E0            [24] 3088 	push	acc
      000F2D 8D 82            [24] 3089 	mov	dpl,r5
      000F2F 8E 83            [24] 3090 	mov	dph,r6
      000F31 8F F0            [24] 3091 	mov	b,r7
      000F33 12r00r00         [24] 3092 	lcall	_stack_push
      000F36 E5 81            [12] 3093 	mov	a,sp
      000F38 24 FC            [12] 3094 	add	a,#0xfc
      000F3A F5 81            [12] 3095 	mov	sp,a
                                   3096 ;	calc.c:214: (void)stack_push(&ctx->s, d0);			
      000F3C E5*00            [12] 3097 	mov	a,_bp
      000F3E 24 04            [12] 3098 	add	a,#0x04
      000F40 F8               [12] 3099 	mov	r0,a
      000F41 74 09            [12] 3100 	mov	a,#0x09
      000F43 26               [12] 3101 	add	a,@r0
      000F44 FD               [12] 3102 	mov	r5,a
      000F45 E4               [12] 3103 	clr	a
      000F46 08               [12] 3104 	inc	r0
      000F47 36               [12] 3105 	addc	a,@r0
      000F48 FE               [12] 3106 	mov	r6,a
      000F49 08               [12] 3107 	inc	r0
      000F4A 86 07            [24] 3108 	mov	ar7,@r0
      000F4C E5*00            [12] 3109 	mov	a,_bp
      000F4E 24 07            [12] 3110 	add	a,#0x07
      000F50 F8               [12] 3111 	mov	r0,a
      000F51 E6               [12] 3112 	mov	a,@r0
      000F52 C0 E0            [24] 3113 	push	acc
      000F54 08               [12] 3114 	inc	r0
      000F55 E6               [12] 3115 	mov	a,@r0
      000F56 C0 E0            [24] 3116 	push	acc
      000F58 08               [12] 3117 	inc	r0
      000F59 E6               [12] 3118 	mov	a,@r0
      000F5A C0 E0            [24] 3119 	push	acc
      000F5C 08               [12] 3120 	inc	r0
      000F5D E6               [12] 3121 	mov	a,@r0
      000F5E C0 E0            [24] 3122 	push	acc
      000F60 8D 82            [24] 3123 	mov	dpl,r5
      000F62 8E 83            [24] 3124 	mov	dph,r6
      000F64 8F F0            [24] 3125 	mov	b,r7
      000F66 12r00r00         [24] 3126 	lcall	_stack_push
      000F69 E5 81            [12] 3127 	mov	a,sp
      000F6B 24 FC            [12] 3128 	add	a,#0xfc
      000F6D F5 81            [12] 3129 	mov	sp,a
                                   3130 ;	calc.c:215: printstr("\r\ndivision by zero\r\n");
      000F6F 7Dr29            [12] 3131 	mov	r5,#___str_3
      000F71 7Es00            [12] 3132 	mov	r6,#(___str_3 >> 8)
      000F73 7F 80            [12] 3133 	mov	r7,#0x80
                                   3134 ;	calc.c:50: return;
      000F75                       3135 00306$:
                                   3136 ;	calc.c:48: for (; *s; s++) putchar(*s);
      000F75 8D 82            [24] 3137 	mov	dpl,r5
      000F77 8E 83            [24] 3138 	mov	dph,r6
      000F79 8F F0            [24] 3139 	mov	b,r7
      000F7B 12r00r00         [24] 3140 	lcall	__gptrget
      000F7E FC               [12] 3141 	mov	r4,a
      000F7F 70 03            [24] 3142 	jnz	00827$
      000F81 02r14r64         [24] 3143 	ljmp	00188$
      000F84                       3144 00827$:
      000F84 7B 00            [12] 3145 	mov	r3,#0x00
      000F86 8C 82            [24] 3146 	mov	dpl,r4
      000F88 8B 83            [24] 3147 	mov	dph,r3
      000F8A 12r00r00         [24] 3148 	lcall	_putchar
      000F8D 0D               [12] 3149 	inc	r5
                                   3150 ;	calc.c:215: printstr("\r\ndivision by zero\r\n");
      000F8E BD 00 E4         [24] 3151 	cjne	r5,#0x00,00306$
      000F91 0E               [12] 3152 	inc	r6
      000F92 80 E1            [24] 3153 	sjmp	00306$
      000F94                       3154 00154$:
                                   3155 ;	calc.c:217: d1 %= d0;
      000F94 E5*00            [12] 3156 	mov	a,_bp
      000F96 24 07            [12] 3157 	add	a,#0x07
      000F98 F8               [12] 3158 	mov	r0,a
      000F99 E6               [12] 3159 	mov	a,@r0
      000F9A C0 E0            [24] 3160 	push	acc
      000F9C 08               [12] 3161 	inc	r0
      000F9D E6               [12] 3162 	mov	a,@r0
      000F9E C0 E0            [24] 3163 	push	acc
      000FA0 08               [12] 3164 	inc	r0
      000FA1 E6               [12] 3165 	mov	a,@r0
      000FA2 C0 E0            [24] 3166 	push	acc
      000FA4 08               [12] 3167 	inc	r0
      000FA5 E6               [12] 3168 	mov	a,@r0
      000FA6 C0 E0            [24] 3169 	push	acc
      000FA8 E5*00            [12] 3170 	mov	a,_bp
      000FAA 24 0B            [12] 3171 	add	a,#0x0b
      000FAC F8               [12] 3172 	mov	r0,a
      000FAD 86 82            [24] 3173 	mov	dpl,@r0
      000FAF 08               [12] 3174 	inc	r0
      000FB0 86 83            [24] 3175 	mov	dph,@r0
      000FB2 08               [12] 3176 	inc	r0
      000FB3 86 F0            [24] 3177 	mov	b,@r0
      000FB5 08               [12] 3178 	inc	r0
      000FB6 E6               [12] 3179 	mov	a,@r0
      000FB7 12r00r00         [24] 3180 	lcall	__modslong
      000FBA AC 82            [24] 3181 	mov	r4,dpl
      000FBC AD 83            [24] 3182 	mov	r5,dph
      000FBE AE F0            [24] 3183 	mov	r6,b
      000FC0 FF               [12] 3184 	mov	r7,a
      000FC1 E5 81            [12] 3185 	mov	a,sp
      000FC3 24 FC            [12] 3186 	add	a,#0xfc
      000FC5 F5 81            [12] 3187 	mov	sp,a
      000FC7 E5*00            [12] 3188 	mov	a,_bp
      000FC9 24 0B            [12] 3189 	add	a,#0x0b
      000FCB F8               [12] 3190 	mov	r0,a
      000FCC A6 04            [24] 3191 	mov	@r0,ar4
      000FCE 08               [12] 3192 	inc	r0
      000FCF A6 05            [24] 3193 	mov	@r0,ar5
      000FD1 08               [12] 3194 	inc	r0
      000FD2 A6 06            [24] 3195 	mov	@r0,ar6
      000FD4 08               [12] 3196 	inc	r0
      000FD5 A6 07            [24] 3197 	mov	@r0,ar7
                                   3198 ;	calc.c:218: (void)stack_push(&ctx->s, d1);
      000FD7 E5*00            [12] 3199 	mov	a,_bp
      000FD9 24 04            [12] 3200 	add	a,#0x04
      000FDB F8               [12] 3201 	mov	r0,a
      000FDC 74 09            [12] 3202 	mov	a,#0x09
      000FDE 26               [12] 3203 	add	a,@r0
      000FDF FD               [12] 3204 	mov	r5,a
      000FE0 E4               [12] 3205 	clr	a
      000FE1 08               [12] 3206 	inc	r0
      000FE2 36               [12] 3207 	addc	a,@r0
      000FE3 FE               [12] 3208 	mov	r6,a
      000FE4 08               [12] 3209 	inc	r0
      000FE5 86 07            [24] 3210 	mov	ar7,@r0
      000FE7 E5*00            [12] 3211 	mov	a,_bp
      000FE9 24 0B            [12] 3212 	add	a,#0x0b
      000FEB F8               [12] 3213 	mov	r0,a
      000FEC E6               [12] 3214 	mov	a,@r0
      000FED C0 E0            [24] 3215 	push	acc
      000FEF 08               [12] 3216 	inc	r0
      000FF0 E6               [12] 3217 	mov	a,@r0
      000FF1 C0 E0            [24] 3218 	push	acc
      000FF3 08               [12] 3219 	inc	r0
      000FF4 E6               [12] 3220 	mov	a,@r0
      000FF5 C0 E0            [24] 3221 	push	acc
      000FF7 08               [12] 3222 	inc	r0
      000FF8 E6               [12] 3223 	mov	a,@r0
      000FF9 C0 E0            [24] 3224 	push	acc
      000FFB 8D 82            [24] 3225 	mov	dpl,r5
      000FFD 8E 83            [24] 3226 	mov	dph,r6
      000FFF 8F F0            [24] 3227 	mov	b,r7
      001001 12r00r00         [24] 3228 	lcall	_stack_push
      001004 E5 81            [12] 3229 	mov	a,sp
      001006 24 FC            [12] 3230 	add	a,#0xfc
      001008 F5 81            [12] 3231 	mov	sp,a
                                   3232 ;	calc.c:220: break;
      00100A 02r14r64         [24] 3233 	ljmp	00188$
                                   3234 ;	calc.c:221: case '&':
      00100D                       3235 00162$:
                                   3236 ;	calc.c:222: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      00100D E5*00            [12] 3237 	mov	a,_bp
      00100F 24 07            [12] 3238 	add	a,#0x07
      001011 FF               [12] 3239 	mov	r7,a
      001012 7E 00            [12] 3240 	mov	r6,#0x00
      001014 7D 40            [12] 3241 	mov	r5,#0x40
      001016 E5*00            [12] 3242 	mov	a,_bp
      001018 24 04            [12] 3243 	add	a,#0x04
      00101A F8               [12] 3244 	mov	r0,a
      00101B 74 09            [12] 3245 	mov	a,#0x09
      00101D 26               [12] 3246 	add	a,@r0
      00101E FA               [12] 3247 	mov	r2,a
      00101F E4               [12] 3248 	clr	a
      001020 08               [12] 3249 	inc	r0
      001021 36               [12] 3250 	addc	a,@r0
      001022 FB               [12] 3251 	mov	r3,a
      001023 08               [12] 3252 	inc	r0
      001024 86 04            [24] 3253 	mov	ar4,@r0
      001026 C0 07            [24] 3254 	push	ar7
      001028 C0 06            [24] 3255 	push	ar6
      00102A C0 05            [24] 3256 	push	ar5
      00102C 8A 82            [24] 3257 	mov	dpl,r2
      00102E 8B 83            [24] 3258 	mov	dph,r3
      001030 8C F0            [24] 3259 	mov	b,r4
      001032 12r00r00         [24] 3260 	lcall	_stack_pop
      001035 AE 82            [24] 3261 	mov	r6,dpl
      001037 AF 83            [24] 3262 	mov	r7,dph
      001039 15 81            [12] 3263 	dec	sp
      00103B 15 81            [12] 3264 	dec	sp
      00103D 15 81            [12] 3265 	dec	sp
      00103F EE               [12] 3266 	mov	a,r6
      001040 4F               [12] 3267 	orl	a,r7
      001041 70 25            [24] 3268 	jnz	00167$
      001043 7Dr15            [12] 3269 	mov	r5,#___str_2
      001045 7Es00            [12] 3270 	mov	r6,#(___str_2 >> 8)
      001047 7F 80            [12] 3271 	mov	r7,#0x80
                                   3272 ;	calc.c:50: return;
      001049                       3273 00309$:
                                   3274 ;	calc.c:48: for (; *s; s++) putchar(*s);
      001049 8D 82            [24] 3275 	mov	dpl,r5
      00104B 8E 83            [24] 3276 	mov	dph,r6
      00104D 8F F0            [24] 3277 	mov	b,r7
      00104F 12r00r00         [24] 3278 	lcall	__gptrget
      001052 FC               [12] 3279 	mov	r4,a
      001053 70 03            [24] 3280 	jnz	00830$
      001055 02r14r64         [24] 3281 	ljmp	00188$
      001058                       3282 00830$:
      001058 7B 00            [12] 3283 	mov	r3,#0x00
      00105A 8C 82            [24] 3284 	mov	dpl,r4
      00105C 8B 83            [24] 3285 	mov	dph,r3
      00105E 12r00r00         [24] 3286 	lcall	_putchar
      001061 0D               [12] 3287 	inc	r5
                                   3288 ;	calc.c:222: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      001062 BD 00 E4         [24] 3289 	cjne	r5,#0x00,00309$
      001065 0E               [12] 3290 	inc	r6
      001066 80 E1            [24] 3291 	sjmp	00309$
      001068                       3292 00167$:
                                   3293 ;	calc.c:223: else if (!stack_pop(&ctx->s, &d1)) {
      001068 E5*00            [12] 3294 	mov	a,_bp
      00106A 24 0B            [12] 3295 	add	a,#0x0b
      00106C FF               [12] 3296 	mov	r7,a
      00106D 7E 00            [12] 3297 	mov	r6,#0x00
      00106F 7D 40            [12] 3298 	mov	r5,#0x40
      001071 E5*00            [12] 3299 	mov	a,_bp
      001073 24 04            [12] 3300 	add	a,#0x04
      001075 F8               [12] 3301 	mov	r0,a
      001076 74 09            [12] 3302 	mov	a,#0x09
      001078 26               [12] 3303 	add	a,@r0
      001079 FA               [12] 3304 	mov	r2,a
      00107A E4               [12] 3305 	clr	a
      00107B 08               [12] 3306 	inc	r0
      00107C 36               [12] 3307 	addc	a,@r0
      00107D FB               [12] 3308 	mov	r3,a
      00107E 08               [12] 3309 	inc	r0
      00107F 86 04            [24] 3310 	mov	ar4,@r0
      001081 C0 07            [24] 3311 	push	ar7
      001083 C0 06            [24] 3312 	push	ar6
      001085 C0 05            [24] 3313 	push	ar5
      001087 8A 82            [24] 3314 	mov	dpl,r2
      001089 8B 83            [24] 3315 	mov	dph,r3
      00108B 8C F0            [24] 3316 	mov	b,r4
      00108D 12r00r00         [24] 3317 	lcall	_stack_pop
      001090 AE 82            [24] 3318 	mov	r6,dpl
      001092 AF 83            [24] 3319 	mov	r7,dph
      001094 15 81            [12] 3320 	dec	sp
      001096 15 81            [12] 3321 	dec	sp
      001098 15 81            [12] 3322 	dec	sp
      00109A EE               [12] 3323 	mov	a,r6
      00109B 4F               [12] 3324 	orl	a,r7
      00109C 70 58            [24] 3325 	jnz	00164$
                                   3326 ;	calc.c:224: (void)stack_push(&ctx->s, d0);
      00109E E5*00            [12] 3327 	mov	a,_bp
      0010A0 24 04            [12] 3328 	add	a,#0x04
      0010A2 F8               [12] 3329 	mov	r0,a
      0010A3 74 09            [12] 3330 	mov	a,#0x09
      0010A5 26               [12] 3331 	add	a,@r0
      0010A6 FD               [12] 3332 	mov	r5,a
      0010A7 E4               [12] 3333 	clr	a
      0010A8 08               [12] 3334 	inc	r0
      0010A9 36               [12] 3335 	addc	a,@r0
      0010AA FE               [12] 3336 	mov	r6,a
      0010AB 08               [12] 3337 	inc	r0
      0010AC 86 07            [24] 3338 	mov	ar7,@r0
      0010AE E5*00            [12] 3339 	mov	a,_bp
      0010B0 24 07            [12] 3340 	add	a,#0x07
      0010B2 F8               [12] 3341 	mov	r0,a
      0010B3 E6               [12] 3342 	mov	a,@r0
      0010B4 C0 E0            [24] 3343 	push	acc
      0010B6 08               [12] 3344 	inc	r0
      0010B7 E6               [12] 3345 	mov	a,@r0
      0010B8 C0 E0            [24] 3346 	push	acc
      0010BA 08               [12] 3347 	inc	r0
      0010BB E6               [12] 3348 	mov	a,@r0
      0010BC C0 E0            [24] 3349 	push	acc
      0010BE 08               [12] 3350 	inc	r0
      0010BF E6               [12] 3351 	mov	a,@r0
      0010C0 C0 E0            [24] 3352 	push	acc
      0010C2 8D 82            [24] 3353 	mov	dpl,r5
      0010C4 8E 83            [24] 3354 	mov	dph,r6
      0010C6 8F F0            [24] 3355 	mov	b,r7
      0010C8 12r00r00         [24] 3356 	lcall	_stack_push
      0010CB E5 81            [12] 3357 	mov	a,sp
      0010CD 24 FC            [12] 3358 	add	a,#0xfc
      0010CF F5 81            [12] 3359 	mov	sp,a
                                   3360 ;	calc.c:225: printstr("\r\nstack underflow\r\n");
      0010D1 7Dr15            [12] 3361 	mov	r5,#___str_2
      0010D3 7Es00            [12] 3362 	mov	r6,#(___str_2 >> 8)
      0010D5 7F 80            [12] 3363 	mov	r7,#0x80
                                   3364 ;	calc.c:50: return;
      0010D7                       3365 00312$:
                                   3366 ;	calc.c:48: for (; *s; s++) putchar(*s);
      0010D7 8D 82            [24] 3367 	mov	dpl,r5
      0010D9 8E 83            [24] 3368 	mov	dph,r6
      0010DB 8F F0            [24] 3369 	mov	b,r7
      0010DD 12r00r00         [24] 3370 	lcall	__gptrget
      0010E0 FC               [12] 3371 	mov	r4,a
      0010E1 70 03            [24] 3372 	jnz	00833$
      0010E3 02r14r64         [24] 3373 	ljmp	00188$
      0010E6                       3374 00833$:
      0010E6 7B 00            [12] 3375 	mov	r3,#0x00
      0010E8 8C 82            [24] 3376 	mov	dpl,r4
      0010EA 8B 83            [24] 3377 	mov	dph,r3
      0010EC 12r00r00         [24] 3378 	lcall	_putchar
      0010EF 0D               [12] 3379 	inc	r5
                                   3380 ;	calc.c:225: printstr("\r\nstack underflow\r\n");
      0010F0 BD 00 E4         [24] 3381 	cjne	r5,#0x00,00312$
      0010F3 0E               [12] 3382 	inc	r6
      0010F4 80 E1            [24] 3383 	sjmp	00312$
      0010F6                       3384 00164$:
                                   3385 ;	calc.c:227: d1 &= d0;
      0010F6 E5*00            [12] 3386 	mov	a,_bp
      0010F8 24 0B            [12] 3387 	add	a,#0x0b
      0010FA F8               [12] 3388 	mov	r0,a
      0010FB E5*00            [12] 3389 	mov	a,_bp
      0010FD 24 07            [12] 3390 	add	a,#0x07
      0010FF F9               [12] 3391 	mov	r1,a
      001100 E7               [12] 3392 	mov	a,@r1
      001101 56               [12] 3393 	anl	a,@r0
      001102 F6               [12] 3394 	mov	@r0,a
      001103 09               [12] 3395 	inc	r1
      001104 E7               [12] 3396 	mov	a,@r1
      001105 08               [12] 3397 	inc	r0
      001106 56               [12] 3398 	anl	a,@r0
      001107 F6               [12] 3399 	mov	@r0,a
      001108 09               [12] 3400 	inc	r1
      001109 E7               [12] 3401 	mov	a,@r1
      00110A 08               [12] 3402 	inc	r0
      00110B 56               [12] 3403 	anl	a,@r0
      00110C F6               [12] 3404 	mov	@r0,a
      00110D 09               [12] 3405 	inc	r1
      00110E E7               [12] 3406 	mov	a,@r1
      00110F 08               [12] 3407 	inc	r0
      001110 56               [12] 3408 	anl	a,@r0
      001111 F6               [12] 3409 	mov	@r0,a
                                   3410 ;	calc.c:228: (void)stack_push(&ctx->s, d1);
      001112 E5*00            [12] 3411 	mov	a,_bp
      001114 24 04            [12] 3412 	add	a,#0x04
      001116 F8               [12] 3413 	mov	r0,a
      001117 74 09            [12] 3414 	mov	a,#0x09
      001119 26               [12] 3415 	add	a,@r0
      00111A FD               [12] 3416 	mov	r5,a
      00111B E4               [12] 3417 	clr	a
      00111C 08               [12] 3418 	inc	r0
      00111D 36               [12] 3419 	addc	a,@r0
      00111E FE               [12] 3420 	mov	r6,a
      00111F 08               [12] 3421 	inc	r0
      001120 86 07            [24] 3422 	mov	ar7,@r0
      001122 E5*00            [12] 3423 	mov	a,_bp
      001124 24 0B            [12] 3424 	add	a,#0x0b
      001126 F8               [12] 3425 	mov	r0,a
      001127 E6               [12] 3426 	mov	a,@r0
      001128 C0 E0            [24] 3427 	push	acc
      00112A 08               [12] 3428 	inc	r0
      00112B E6               [12] 3429 	mov	a,@r0
      00112C C0 E0            [24] 3430 	push	acc
      00112E 08               [12] 3431 	inc	r0
      00112F E6               [12] 3432 	mov	a,@r0
      001130 C0 E0            [24] 3433 	push	acc
      001132 08               [12] 3434 	inc	r0
      001133 E6               [12] 3435 	mov	a,@r0
      001134 C0 E0            [24] 3436 	push	acc
      001136 8D 82            [24] 3437 	mov	dpl,r5
      001138 8E 83            [24] 3438 	mov	dph,r6
      00113A 8F F0            [24] 3439 	mov	b,r7
      00113C 12r00r00         [24] 3440 	lcall	_stack_push
      00113F E5 81            [12] 3441 	mov	a,sp
      001141 24 FC            [12] 3442 	add	a,#0xfc
      001143 F5 81            [12] 3443 	mov	sp,a
                                   3444 ;	calc.c:230: break;
      001145 02r14r64         [24] 3445 	ljmp	00188$
                                   3446 ;	calc.c:231: case '|':
      001148                       3447 00169$:
                                   3448 ;	calc.c:232: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      001148 E5*00            [12] 3449 	mov	a,_bp
      00114A 24 07            [12] 3450 	add	a,#0x07
      00114C FF               [12] 3451 	mov	r7,a
      00114D 7E 00            [12] 3452 	mov	r6,#0x00
      00114F 7D 40            [12] 3453 	mov	r5,#0x40
      001151 E5*00            [12] 3454 	mov	a,_bp
      001153 24 04            [12] 3455 	add	a,#0x04
      001155 F8               [12] 3456 	mov	r0,a
      001156 74 09            [12] 3457 	mov	a,#0x09
      001158 26               [12] 3458 	add	a,@r0
      001159 FA               [12] 3459 	mov	r2,a
      00115A E4               [12] 3460 	clr	a
      00115B 08               [12] 3461 	inc	r0
      00115C 36               [12] 3462 	addc	a,@r0
      00115D FB               [12] 3463 	mov	r3,a
      00115E 08               [12] 3464 	inc	r0
      00115F 86 04            [24] 3465 	mov	ar4,@r0
      001161 C0 07            [24] 3466 	push	ar7
      001163 C0 06            [24] 3467 	push	ar6
      001165 C0 05            [24] 3468 	push	ar5
      001167 8A 82            [24] 3469 	mov	dpl,r2
      001169 8B 83            [24] 3470 	mov	dph,r3
      00116B 8C F0            [24] 3471 	mov	b,r4
      00116D 12r00r00         [24] 3472 	lcall	_stack_pop
      001170 AE 82            [24] 3473 	mov	r6,dpl
      001172 AF 83            [24] 3474 	mov	r7,dph
      001174 15 81            [12] 3475 	dec	sp
      001176 15 81            [12] 3476 	dec	sp
      001178 15 81            [12] 3477 	dec	sp
      00117A EE               [12] 3478 	mov	a,r6
      00117B 4F               [12] 3479 	orl	a,r7
      00117C 70 25            [24] 3480 	jnz	00174$
      00117E 7Dr15            [12] 3481 	mov	r5,#___str_2
      001180 7Es00            [12] 3482 	mov	r6,#(___str_2 >> 8)
      001182 7F 80            [12] 3483 	mov	r7,#0x80
                                   3484 ;	calc.c:50: return;
      001184                       3485 00315$:
                                   3486 ;	calc.c:48: for (; *s; s++) putchar(*s);
      001184 8D 82            [24] 3487 	mov	dpl,r5
      001186 8E 83            [24] 3488 	mov	dph,r6
      001188 8F F0            [24] 3489 	mov	b,r7
      00118A 12r00r00         [24] 3490 	lcall	__gptrget
      00118D FC               [12] 3491 	mov	r4,a
      00118E 70 03            [24] 3492 	jnz	00836$
      001190 02r14r64         [24] 3493 	ljmp	00188$
      001193                       3494 00836$:
      001193 7B 00            [12] 3495 	mov	r3,#0x00
      001195 8C 82            [24] 3496 	mov	dpl,r4
      001197 8B 83            [24] 3497 	mov	dph,r3
      001199 12r00r00         [24] 3498 	lcall	_putchar
      00119C 0D               [12] 3499 	inc	r5
                                   3500 ;	calc.c:232: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      00119D BD 00 E4         [24] 3501 	cjne	r5,#0x00,00315$
      0011A0 0E               [12] 3502 	inc	r6
      0011A1 80 E1            [24] 3503 	sjmp	00315$
      0011A3                       3504 00174$:
                                   3505 ;	calc.c:233: else if (!stack_pop(&ctx->s, &d1)) {
      0011A3 E5*00            [12] 3506 	mov	a,_bp
      0011A5 24 0B            [12] 3507 	add	a,#0x0b
      0011A7 FF               [12] 3508 	mov	r7,a
      0011A8 7E 00            [12] 3509 	mov	r6,#0x00
      0011AA 7D 40            [12] 3510 	mov	r5,#0x40
      0011AC E5*00            [12] 3511 	mov	a,_bp
      0011AE 24 04            [12] 3512 	add	a,#0x04
      0011B0 F8               [12] 3513 	mov	r0,a
      0011B1 74 09            [12] 3514 	mov	a,#0x09
      0011B3 26               [12] 3515 	add	a,@r0
      0011B4 FA               [12] 3516 	mov	r2,a
      0011B5 E4               [12] 3517 	clr	a
      0011B6 08               [12] 3518 	inc	r0
      0011B7 36               [12] 3519 	addc	a,@r0
      0011B8 FB               [12] 3520 	mov	r3,a
      0011B9 08               [12] 3521 	inc	r0
      0011BA 86 04            [24] 3522 	mov	ar4,@r0
      0011BC C0 07            [24] 3523 	push	ar7
      0011BE C0 06            [24] 3524 	push	ar6
      0011C0 C0 05            [24] 3525 	push	ar5
      0011C2 8A 82            [24] 3526 	mov	dpl,r2
      0011C4 8B 83            [24] 3527 	mov	dph,r3
      0011C6 8C F0            [24] 3528 	mov	b,r4
      0011C8 12r00r00         [24] 3529 	lcall	_stack_pop
      0011CB AE 82            [24] 3530 	mov	r6,dpl
      0011CD AF 83            [24] 3531 	mov	r7,dph
      0011CF 15 81            [12] 3532 	dec	sp
      0011D1 15 81            [12] 3533 	dec	sp
      0011D3 15 81            [12] 3534 	dec	sp
      0011D5 EE               [12] 3535 	mov	a,r6
      0011D6 4F               [12] 3536 	orl	a,r7
      0011D7 70 58            [24] 3537 	jnz	00171$
                                   3538 ;	calc.c:234: (void)stack_push(&ctx->s, d0);
      0011D9 E5*00            [12] 3539 	mov	a,_bp
      0011DB 24 04            [12] 3540 	add	a,#0x04
      0011DD F8               [12] 3541 	mov	r0,a
      0011DE 74 09            [12] 3542 	mov	a,#0x09
      0011E0 26               [12] 3543 	add	a,@r0
      0011E1 FD               [12] 3544 	mov	r5,a
      0011E2 E4               [12] 3545 	clr	a
      0011E3 08               [12] 3546 	inc	r0
      0011E4 36               [12] 3547 	addc	a,@r0
      0011E5 FE               [12] 3548 	mov	r6,a
      0011E6 08               [12] 3549 	inc	r0
      0011E7 86 07            [24] 3550 	mov	ar7,@r0
      0011E9 E5*00            [12] 3551 	mov	a,_bp
      0011EB 24 07            [12] 3552 	add	a,#0x07
      0011ED F8               [12] 3553 	mov	r0,a
      0011EE E6               [12] 3554 	mov	a,@r0
      0011EF C0 E0            [24] 3555 	push	acc
      0011F1 08               [12] 3556 	inc	r0
      0011F2 E6               [12] 3557 	mov	a,@r0
      0011F3 C0 E0            [24] 3558 	push	acc
      0011F5 08               [12] 3559 	inc	r0
      0011F6 E6               [12] 3560 	mov	a,@r0
      0011F7 C0 E0            [24] 3561 	push	acc
      0011F9 08               [12] 3562 	inc	r0
      0011FA E6               [12] 3563 	mov	a,@r0
      0011FB C0 E0            [24] 3564 	push	acc
      0011FD 8D 82            [24] 3565 	mov	dpl,r5
      0011FF 8E 83            [24] 3566 	mov	dph,r6
      001201 8F F0            [24] 3567 	mov	b,r7
      001203 12r00r00         [24] 3568 	lcall	_stack_push
      001206 E5 81            [12] 3569 	mov	a,sp
      001208 24 FC            [12] 3570 	add	a,#0xfc
      00120A F5 81            [12] 3571 	mov	sp,a
                                   3572 ;	calc.c:235: printstr("\r\nstack underflow\r\n");
      00120C 7Dr15            [12] 3573 	mov	r5,#___str_2
      00120E 7Es00            [12] 3574 	mov	r6,#(___str_2 >> 8)
      001210 7F 80            [12] 3575 	mov	r7,#0x80
                                   3576 ;	calc.c:50: return;
      001212                       3577 00318$:
                                   3578 ;	calc.c:48: for (; *s; s++) putchar(*s);
      001212 8D 82            [24] 3579 	mov	dpl,r5
      001214 8E 83            [24] 3580 	mov	dph,r6
      001216 8F F0            [24] 3581 	mov	b,r7
      001218 12r00r00         [24] 3582 	lcall	__gptrget
      00121B FC               [12] 3583 	mov	r4,a
      00121C 70 03            [24] 3584 	jnz	00839$
      00121E 02r14r64         [24] 3585 	ljmp	00188$
      001221                       3586 00839$:
      001221 7B 00            [12] 3587 	mov	r3,#0x00
      001223 8C 82            [24] 3588 	mov	dpl,r4
      001225 8B 83            [24] 3589 	mov	dph,r3
      001227 12r00r00         [24] 3590 	lcall	_putchar
      00122A 0D               [12] 3591 	inc	r5
                                   3592 ;	calc.c:235: printstr("\r\nstack underflow\r\n");
      00122B BD 00 E4         [24] 3593 	cjne	r5,#0x00,00318$
      00122E 0E               [12] 3594 	inc	r6
      00122F 80 E1            [24] 3595 	sjmp	00318$
      001231                       3596 00171$:
                                   3597 ;	calc.c:237: d1 |= d0;
      001231 E5*00            [12] 3598 	mov	a,_bp
      001233 24 0B            [12] 3599 	add	a,#0x0b
      001235 F8               [12] 3600 	mov	r0,a
      001236 E5*00            [12] 3601 	mov	a,_bp
      001238 24 07            [12] 3602 	add	a,#0x07
      00123A F9               [12] 3603 	mov	r1,a
      00123B E7               [12] 3604 	mov	a,@r1
      00123C 46               [12] 3605 	orl	a,@r0
      00123D F6               [12] 3606 	mov	@r0,a
      00123E 09               [12] 3607 	inc	r1
      00123F E7               [12] 3608 	mov	a,@r1
      001240 08               [12] 3609 	inc	r0
      001241 46               [12] 3610 	orl	a,@r0
      001242 F6               [12] 3611 	mov	@r0,a
      001243 09               [12] 3612 	inc	r1
      001244 E7               [12] 3613 	mov	a,@r1
      001245 08               [12] 3614 	inc	r0
      001246 46               [12] 3615 	orl	a,@r0
      001247 F6               [12] 3616 	mov	@r0,a
      001248 09               [12] 3617 	inc	r1
      001249 E7               [12] 3618 	mov	a,@r1
      00124A 08               [12] 3619 	inc	r0
      00124B 46               [12] 3620 	orl	a,@r0
      00124C F6               [12] 3621 	mov	@r0,a
                                   3622 ;	calc.c:238: (void)stack_push(&ctx->s, d1);
      00124D E5*00            [12] 3623 	mov	a,_bp
      00124F 24 04            [12] 3624 	add	a,#0x04
      001251 F8               [12] 3625 	mov	r0,a
      001252 74 09            [12] 3626 	mov	a,#0x09
      001254 26               [12] 3627 	add	a,@r0
      001255 FD               [12] 3628 	mov	r5,a
      001256 E4               [12] 3629 	clr	a
      001257 08               [12] 3630 	inc	r0
      001258 36               [12] 3631 	addc	a,@r0
      001259 FE               [12] 3632 	mov	r6,a
      00125A 08               [12] 3633 	inc	r0
      00125B 86 07            [24] 3634 	mov	ar7,@r0
      00125D E5*00            [12] 3635 	mov	a,_bp
      00125F 24 0B            [12] 3636 	add	a,#0x0b
      001261 F8               [12] 3637 	mov	r0,a
      001262 E6               [12] 3638 	mov	a,@r0
      001263 C0 E0            [24] 3639 	push	acc
      001265 08               [12] 3640 	inc	r0
      001266 E6               [12] 3641 	mov	a,@r0
      001267 C0 E0            [24] 3642 	push	acc
      001269 08               [12] 3643 	inc	r0
      00126A E6               [12] 3644 	mov	a,@r0
      00126B C0 E0            [24] 3645 	push	acc
      00126D 08               [12] 3646 	inc	r0
      00126E E6               [12] 3647 	mov	a,@r0
      00126F C0 E0            [24] 3648 	push	acc
      001271 8D 82            [24] 3649 	mov	dpl,r5
      001273 8E 83            [24] 3650 	mov	dph,r6
      001275 8F F0            [24] 3651 	mov	b,r7
      001277 12r00r00         [24] 3652 	lcall	_stack_push
      00127A E5 81            [12] 3653 	mov	a,sp
      00127C 24 FC            [12] 3654 	add	a,#0xfc
      00127E F5 81            [12] 3655 	mov	sp,a
                                   3656 ;	calc.c:240: break;
      001280 02r14r64         [24] 3657 	ljmp	00188$
                                   3658 ;	calc.c:241: case '^':
      001283                       3659 00176$:
                                   3660 ;	calc.c:242: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      001283 E5*00            [12] 3661 	mov	a,_bp
      001285 24 07            [12] 3662 	add	a,#0x07
      001287 FF               [12] 3663 	mov	r7,a
      001288 7E 00            [12] 3664 	mov	r6,#0x00
      00128A 7D 40            [12] 3665 	mov	r5,#0x40
      00128C E5*00            [12] 3666 	mov	a,_bp
      00128E 24 04            [12] 3667 	add	a,#0x04
      001290 F8               [12] 3668 	mov	r0,a
      001291 74 09            [12] 3669 	mov	a,#0x09
      001293 26               [12] 3670 	add	a,@r0
      001294 FA               [12] 3671 	mov	r2,a
      001295 E4               [12] 3672 	clr	a
      001296 08               [12] 3673 	inc	r0
      001297 36               [12] 3674 	addc	a,@r0
      001298 FB               [12] 3675 	mov	r3,a
      001299 08               [12] 3676 	inc	r0
      00129A 86 04            [24] 3677 	mov	ar4,@r0
      00129C C0 07            [24] 3678 	push	ar7
      00129E C0 06            [24] 3679 	push	ar6
      0012A0 C0 05            [24] 3680 	push	ar5
      0012A2 8A 82            [24] 3681 	mov	dpl,r2
      0012A4 8B 83            [24] 3682 	mov	dph,r3
      0012A6 8C F0            [24] 3683 	mov	b,r4
      0012A8 12r00r00         [24] 3684 	lcall	_stack_pop
      0012AB AE 82            [24] 3685 	mov	r6,dpl
      0012AD AF 83            [24] 3686 	mov	r7,dph
      0012AF 15 81            [12] 3687 	dec	sp
      0012B1 15 81            [12] 3688 	dec	sp
      0012B3 15 81            [12] 3689 	dec	sp
      0012B5 EE               [12] 3690 	mov	a,r6
      0012B6 4F               [12] 3691 	orl	a,r7
      0012B7 70 25            [24] 3692 	jnz	00181$
      0012B9 7Dr15            [12] 3693 	mov	r5,#___str_2
      0012BB 7Es00            [12] 3694 	mov	r6,#(___str_2 >> 8)
      0012BD 7F 80            [12] 3695 	mov	r7,#0x80
                                   3696 ;	calc.c:50: return;
      0012BF                       3697 00321$:
                                   3698 ;	calc.c:48: for (; *s; s++) putchar(*s);
      0012BF 8D 82            [24] 3699 	mov	dpl,r5
      0012C1 8E 83            [24] 3700 	mov	dph,r6
      0012C3 8F F0            [24] 3701 	mov	b,r7
      0012C5 12r00r00         [24] 3702 	lcall	__gptrget
      0012C8 FC               [12] 3703 	mov	r4,a
      0012C9 70 03            [24] 3704 	jnz	00842$
      0012CB 02r14r64         [24] 3705 	ljmp	00188$
      0012CE                       3706 00842$:
      0012CE 7B 00            [12] 3707 	mov	r3,#0x00
      0012D0 8C 82            [24] 3708 	mov	dpl,r4
      0012D2 8B 83            [24] 3709 	mov	dph,r3
      0012D4 12r00r00         [24] 3710 	lcall	_putchar
      0012D7 0D               [12] 3711 	inc	r5
                                   3712 ;	calc.c:242: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      0012D8 BD 00 E4         [24] 3713 	cjne	r5,#0x00,00321$
      0012DB 0E               [12] 3714 	inc	r6
      0012DC 80 E1            [24] 3715 	sjmp	00321$
      0012DE                       3716 00181$:
                                   3717 ;	calc.c:243: else if (!stack_pop(&ctx->s, &d1)) {
      0012DE E5*00            [12] 3718 	mov	a,_bp
      0012E0 24 0B            [12] 3719 	add	a,#0x0b
      0012E2 FF               [12] 3720 	mov	r7,a
      0012E3 7E 00            [12] 3721 	mov	r6,#0x00
      0012E5 7D 40            [12] 3722 	mov	r5,#0x40
      0012E7 E5*00            [12] 3723 	mov	a,_bp
      0012E9 24 04            [12] 3724 	add	a,#0x04
      0012EB F8               [12] 3725 	mov	r0,a
      0012EC 74 09            [12] 3726 	mov	a,#0x09
      0012EE 26               [12] 3727 	add	a,@r0
      0012EF FA               [12] 3728 	mov	r2,a
      0012F0 E4               [12] 3729 	clr	a
      0012F1 08               [12] 3730 	inc	r0
      0012F2 36               [12] 3731 	addc	a,@r0
      0012F3 FB               [12] 3732 	mov	r3,a
      0012F4 08               [12] 3733 	inc	r0
      0012F5 86 04            [24] 3734 	mov	ar4,@r0
      0012F7 C0 07            [24] 3735 	push	ar7
      0012F9 C0 06            [24] 3736 	push	ar6
      0012FB C0 05            [24] 3737 	push	ar5
      0012FD 8A 82            [24] 3738 	mov	dpl,r2
      0012FF 8B 83            [24] 3739 	mov	dph,r3
      001301 8C F0            [24] 3740 	mov	b,r4
      001303 12r00r00         [24] 3741 	lcall	_stack_pop
      001306 AE 82            [24] 3742 	mov	r6,dpl
      001308 AF 83            [24] 3743 	mov	r7,dph
      00130A 15 81            [12] 3744 	dec	sp
      00130C 15 81            [12] 3745 	dec	sp
      00130E 15 81            [12] 3746 	dec	sp
      001310 EE               [12] 3747 	mov	a,r6
      001311 4F               [12] 3748 	orl	a,r7
      001312 70 58            [24] 3749 	jnz	00178$
                                   3750 ;	calc.c:244: (void)stack_push(&ctx->s, d0);
      001314 E5*00            [12] 3751 	mov	a,_bp
      001316 24 04            [12] 3752 	add	a,#0x04
      001318 F8               [12] 3753 	mov	r0,a
      001319 74 09            [12] 3754 	mov	a,#0x09
      00131B 26               [12] 3755 	add	a,@r0
      00131C FD               [12] 3756 	mov	r5,a
      00131D E4               [12] 3757 	clr	a
      00131E 08               [12] 3758 	inc	r0
      00131F 36               [12] 3759 	addc	a,@r0
      001320 FE               [12] 3760 	mov	r6,a
      001321 08               [12] 3761 	inc	r0
      001322 86 07            [24] 3762 	mov	ar7,@r0
      001324 E5*00            [12] 3763 	mov	a,_bp
      001326 24 07            [12] 3764 	add	a,#0x07
      001328 F8               [12] 3765 	mov	r0,a
      001329 E6               [12] 3766 	mov	a,@r0
      00132A C0 E0            [24] 3767 	push	acc
      00132C 08               [12] 3768 	inc	r0
      00132D E6               [12] 3769 	mov	a,@r0
      00132E C0 E0            [24] 3770 	push	acc
      001330 08               [12] 3771 	inc	r0
      001331 E6               [12] 3772 	mov	a,@r0
      001332 C0 E0            [24] 3773 	push	acc
      001334 08               [12] 3774 	inc	r0
      001335 E6               [12] 3775 	mov	a,@r0
      001336 C0 E0            [24] 3776 	push	acc
      001338 8D 82            [24] 3777 	mov	dpl,r5
      00133A 8E 83            [24] 3778 	mov	dph,r6
      00133C 8F F0            [24] 3779 	mov	b,r7
      00133E 12r00r00         [24] 3780 	lcall	_stack_push
      001341 E5 81            [12] 3781 	mov	a,sp
      001343 24 FC            [12] 3782 	add	a,#0xfc
      001345 F5 81            [12] 3783 	mov	sp,a
                                   3784 ;	calc.c:245: printstr("\r\nstack underflow\r\n");
      001347 7Dr15            [12] 3785 	mov	r5,#___str_2
      001349 7Es00            [12] 3786 	mov	r6,#(___str_2 >> 8)
      00134B 7F 80            [12] 3787 	mov	r7,#0x80
                                   3788 ;	calc.c:50: return;
      00134D                       3789 00324$:
                                   3790 ;	calc.c:48: for (; *s; s++) putchar(*s);
      00134D 8D 82            [24] 3791 	mov	dpl,r5
      00134F 8E 83            [24] 3792 	mov	dph,r6
      001351 8F F0            [24] 3793 	mov	b,r7
      001353 12r00r00         [24] 3794 	lcall	__gptrget
      001356 FC               [12] 3795 	mov	r4,a
      001357 70 03            [24] 3796 	jnz	00845$
      001359 02r14r64         [24] 3797 	ljmp	00188$
      00135C                       3798 00845$:
      00135C 7B 00            [12] 3799 	mov	r3,#0x00
      00135E 8C 82            [24] 3800 	mov	dpl,r4
      001360 8B 83            [24] 3801 	mov	dph,r3
      001362 12r00r00         [24] 3802 	lcall	_putchar
      001365 0D               [12] 3803 	inc	r5
                                   3804 ;	calc.c:245: printstr("\r\nstack underflow\r\n");
      001366 BD 00 E4         [24] 3805 	cjne	r5,#0x00,00324$
      001369 0E               [12] 3806 	inc	r6
      00136A 80 E1            [24] 3807 	sjmp	00324$
      00136C                       3808 00178$:
                                   3809 ;	calc.c:247: d1 ^= d0;
      00136C E5*00            [12] 3810 	mov	a,_bp
      00136E 24 0B            [12] 3811 	add	a,#0x0b
      001370 F8               [12] 3812 	mov	r0,a
      001371 E5*00            [12] 3813 	mov	a,_bp
      001373 24 07            [12] 3814 	add	a,#0x07
      001375 F9               [12] 3815 	mov	r1,a
      001376 E7               [12] 3816 	mov	a,@r1
      001377 66               [12] 3817 	xrl	a,@r0
      001378 F6               [12] 3818 	mov	@r0,a
      001379 09               [12] 3819 	inc	r1
      00137A E7               [12] 3820 	mov	a,@r1
      00137B 08               [12] 3821 	inc	r0
      00137C 66               [12] 3822 	xrl	a,@r0
      00137D F6               [12] 3823 	mov	@r0,a
      00137E 09               [12] 3824 	inc	r1
      00137F E7               [12] 3825 	mov	a,@r1
      001380 08               [12] 3826 	inc	r0
      001381 66               [12] 3827 	xrl	a,@r0
      001382 F6               [12] 3828 	mov	@r0,a
      001383 09               [12] 3829 	inc	r1
      001384 E7               [12] 3830 	mov	a,@r1
      001385 08               [12] 3831 	inc	r0
      001386 66               [12] 3832 	xrl	a,@r0
      001387 F6               [12] 3833 	mov	@r0,a
                                   3834 ;	calc.c:248: (void)stack_push(&ctx->s, d1);
      001388 E5*00            [12] 3835 	mov	a,_bp
      00138A 24 04            [12] 3836 	add	a,#0x04
      00138C F8               [12] 3837 	mov	r0,a
      00138D 74 09            [12] 3838 	mov	a,#0x09
      00138F 26               [12] 3839 	add	a,@r0
      001390 FD               [12] 3840 	mov	r5,a
      001391 E4               [12] 3841 	clr	a
      001392 08               [12] 3842 	inc	r0
      001393 36               [12] 3843 	addc	a,@r0
      001394 FE               [12] 3844 	mov	r6,a
      001395 08               [12] 3845 	inc	r0
      001396 86 07            [24] 3846 	mov	ar7,@r0
      001398 E5*00            [12] 3847 	mov	a,_bp
      00139A 24 0B            [12] 3848 	add	a,#0x0b
      00139C F8               [12] 3849 	mov	r0,a
      00139D E6               [12] 3850 	mov	a,@r0
      00139E C0 E0            [24] 3851 	push	acc
      0013A0 08               [12] 3852 	inc	r0
      0013A1 E6               [12] 3853 	mov	a,@r0
      0013A2 C0 E0            [24] 3854 	push	acc
      0013A4 08               [12] 3855 	inc	r0
      0013A5 E6               [12] 3856 	mov	a,@r0
      0013A6 C0 E0            [24] 3857 	push	acc
      0013A8 08               [12] 3858 	inc	r0
      0013A9 E6               [12] 3859 	mov	a,@r0
      0013AA C0 E0            [24] 3860 	push	acc
      0013AC 8D 82            [24] 3861 	mov	dpl,r5
      0013AE 8E 83            [24] 3862 	mov	dph,r6
      0013B0 8F F0            [24] 3863 	mov	b,r7
      0013B2 12r00r00         [24] 3864 	lcall	_stack_push
      0013B5 E5 81            [12] 3865 	mov	a,sp
      0013B7 24 FC            [12] 3866 	add	a,#0xfc
      0013B9 F5 81            [12] 3867 	mov	sp,a
                                   3868 ;	calc.c:250: break;
      0013BB 02r14r64         [24] 3869 	ljmp	00188$
                                   3870 ;	calc.c:251: case '~':
      0013BE                       3871 00183$:
                                   3872 ;	calc.c:252: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      0013BE E5*00            [12] 3873 	mov	a,_bp
      0013C0 24 07            [12] 3874 	add	a,#0x07
      0013C2 FF               [12] 3875 	mov	r7,a
      0013C3 7E 00            [12] 3876 	mov	r6,#0x00
      0013C5 7D 40            [12] 3877 	mov	r5,#0x40
      0013C7 E5*00            [12] 3878 	mov	a,_bp
      0013C9 24 04            [12] 3879 	add	a,#0x04
      0013CB F8               [12] 3880 	mov	r0,a
      0013CC 74 09            [12] 3881 	mov	a,#0x09
      0013CE 26               [12] 3882 	add	a,@r0
      0013CF FA               [12] 3883 	mov	r2,a
      0013D0 E4               [12] 3884 	clr	a
      0013D1 08               [12] 3885 	inc	r0
      0013D2 36               [12] 3886 	addc	a,@r0
      0013D3 FB               [12] 3887 	mov	r3,a
      0013D4 08               [12] 3888 	inc	r0
      0013D5 86 04            [24] 3889 	mov	ar4,@r0
      0013D7 C0 07            [24] 3890 	push	ar7
      0013D9 C0 06            [24] 3891 	push	ar6
      0013DB C0 05            [24] 3892 	push	ar5
      0013DD 8A 82            [24] 3893 	mov	dpl,r2
      0013DF 8B 83            [24] 3894 	mov	dph,r3
      0013E1 8C F0            [24] 3895 	mov	b,r4
      0013E3 12r00r00         [24] 3896 	lcall	_stack_pop
      0013E6 AE 82            [24] 3897 	mov	r6,dpl
      0013E8 AF 83            [24] 3898 	mov	r7,dph
      0013EA 15 81            [12] 3899 	dec	sp
      0013EC 15 81            [12] 3900 	dec	sp
      0013EE 15 81            [12] 3901 	dec	sp
      0013F0 EE               [12] 3902 	mov	a,r6
      0013F1 4F               [12] 3903 	orl	a,r7
      0013F2 70 22            [24] 3904 	jnz	00185$
      0013F4 7Dr15            [12] 3905 	mov	r5,#___str_2
      0013F6 7Es00            [12] 3906 	mov	r6,#(___str_2 >> 8)
      0013F8 7F 80            [12] 3907 	mov	r7,#0x80
                                   3908 ;	calc.c:50: return;
      0013FA                       3909 00327$:
                                   3910 ;	calc.c:48: for (; *s; s++) putchar(*s);
      0013FA 8D 82            [24] 3911 	mov	dpl,r5
      0013FC 8E 83            [24] 3912 	mov	dph,r6
      0013FE 8F F0            [24] 3913 	mov	b,r7
      001400 12r00r00         [24] 3914 	lcall	__gptrget
      001403 FC               [12] 3915 	mov	r4,a
      001404 60 5E            [24] 3916 	jz	00188$
      001406 7B 00            [12] 3917 	mov	r3,#0x00
      001408 8C 82            [24] 3918 	mov	dpl,r4
      00140A 8B 83            [24] 3919 	mov	dph,r3
      00140C 12r00r00         [24] 3920 	lcall	_putchar
      00140F 0D               [12] 3921 	inc	r5
                                   3922 ;	calc.c:252: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      001410 BD 00 E7         [24] 3923 	cjne	r5,#0x00,00327$
      001413 0E               [12] 3924 	inc	r6
      001414 80 E4            [24] 3925 	sjmp	00327$
      001416                       3926 00185$:
                                   3927 ;	calc.c:254: d0 = ~d0;
      001416 E5*00            [12] 3928 	mov	a,_bp
      001418 24 07            [12] 3929 	add	a,#0x07
      00141A F8               [12] 3930 	mov	r0,a
      00141B E6               [12] 3931 	mov	a,@r0
      00141C F4               [12] 3932 	cpl	a
      00141D F6               [12] 3933 	mov	@r0,a
      00141E 08               [12] 3934 	inc	r0
      00141F E6               [12] 3935 	mov	a,@r0
      001420 F4               [12] 3936 	cpl	a
      001421 F6               [12] 3937 	mov	@r0,a
      001422 08               [12] 3938 	inc	r0
      001423 E6               [12] 3939 	mov	a,@r0
      001424 F4               [12] 3940 	cpl	a
      001425 F6               [12] 3941 	mov	@r0,a
      001426 08               [12] 3942 	inc	r0
      001427 E6               [12] 3943 	mov	a,@r0
      001428 F4               [12] 3944 	cpl	a
      001429 F6               [12] 3945 	mov	@r0,a
                                   3946 ;	calc.c:255: (void)stack_push(&ctx->s, d0);
      00142A E5*00            [12] 3947 	mov	a,_bp
      00142C 24 04            [12] 3948 	add	a,#0x04
      00142E F8               [12] 3949 	mov	r0,a
      00142F 74 09            [12] 3950 	mov	a,#0x09
      001431 26               [12] 3951 	add	a,@r0
      001432 FD               [12] 3952 	mov	r5,a
      001433 E4               [12] 3953 	clr	a
      001434 08               [12] 3954 	inc	r0
      001435 36               [12] 3955 	addc	a,@r0
      001436 FE               [12] 3956 	mov	r6,a
      001437 08               [12] 3957 	inc	r0
      001438 86 07            [24] 3958 	mov	ar7,@r0
      00143A E5*00            [12] 3959 	mov	a,_bp
      00143C 24 07            [12] 3960 	add	a,#0x07
      00143E F8               [12] 3961 	mov	r0,a
      00143F E6               [12] 3962 	mov	a,@r0
      001440 C0 E0            [24] 3963 	push	acc
      001442 08               [12] 3964 	inc	r0
      001443 E6               [12] 3965 	mov	a,@r0
      001444 C0 E0            [24] 3966 	push	acc
      001446 08               [12] 3967 	inc	r0
      001447 E6               [12] 3968 	mov	a,@r0
      001448 C0 E0            [24] 3969 	push	acc
      00144A 08               [12] 3970 	inc	r0
      00144B E6               [12] 3971 	mov	a,@r0
      00144C C0 E0            [24] 3972 	push	acc
      00144E 8D 82            [24] 3973 	mov	dpl,r5
      001450 8E 83            [24] 3974 	mov	dph,r6
      001452 8F F0            [24] 3975 	mov	b,r7
      001454 12r00r00         [24] 3976 	lcall	_stack_push
      001457 E5 81            [12] 3977 	mov	a,sp
      001459 24 FC            [12] 3978 	add	a,#0xfc
      00145B F5 81            [12] 3979 	mov	sp,a
                                   3980 ;	calc.c:257: break;
                                   3981 ;	calc.c:258: default:
      00145D 80 05            [24] 3982 	sjmp	00188$
      00145F                       3983 00187$:
                                   3984 ;	calc.c:259: return UNDEF;
      00145F 90 80 00         [24] 3985 	mov	dptr,#0x8000
                                   3986 ;	calc.c:260: }
      001462 80 03            [24] 3987 	sjmp	00329$
      001464                       3988 00188$:
                                   3989 ;	calc.c:262: return 1;
      001464 90 00 01         [24] 3990 	mov	dptr,#0x0001
      001467                       3991 00329$:
                                   3992 ;	calc.c:263: }
      001467 85*00 81         [24] 3993 	mov	sp,_bp
      00146A D0*00            [24] 3994 	pop	_bp
      00146C 22               [24] 3995 	ret
                                   3996 ;------------------------------------------------------------
                                   3997 ;Allocation info for local variables in function 'push_acc'
                                   3998 ;------------------------------------------------------------
                                   3999 ;delta                     Allocated to stack - _bp -5
                                   4000 ;_ctx                      Allocated to stack - _bp +5
                                   4001 ;ctx                       Allocated to registers r2 r3 r4 
                                   4002 ;__1310720061              Allocated to registers 
                                   4003 ;s                         Allocated to registers r5 r6 r7 
                                   4004 ;sloc0                     Allocated to stack - _bp +1
                                   4005 ;------------------------------------------------------------
                                   4006 ;	calc.c:265: static int push_acc(void *_ctx, delta_t *delta) __reentrant {
                                   4007 ;	-----------------------------------------
                                   4008 ;	 function push_acc
                                   4009 ;	-----------------------------------------
      00146D                       4010 _push_acc:
      00146D C0*00            [24] 4011 	push	_bp
      00146F E5 81            [12] 4012 	mov	a,sp
      001471 F5*00            [12] 4013 	mov	_bp,a
      001473 24 07            [12] 4014 	add	a,#0x07
      001475 F5 81            [12] 4015 	mov	sp,a
      001477 C8               [12] 4016 	xch	a,r0
      001478 E5*00            [12] 4017 	mov	a,_bp
      00147A 24 05            [12] 4018 	add	a,#0x05
      00147C C8               [12] 4019 	xch	a,r0
      00147D A6 82            [24] 4020 	mov	@r0,dpl
      00147F 08               [12] 4021 	inc	r0
      001480 A6 83            [24] 4022 	mov	@r0,dph
      001482 08               [12] 4023 	inc	r0
      001483 A6 F0            [24] 4024 	mov	@r0,b
                                   4025 ;	calc.c:266: struct ctx *ctx = (struct ctx *)_ctx;
      001485 E5*00            [12] 4026 	mov	a,_bp
      001487 24 05            [12] 4027 	add	a,#0x05
      001489 F8               [12] 4028 	mov	r0,a
      00148A 86 02            [24] 4029 	mov	ar2,@r0
      00148C 08               [12] 4030 	inc	r0
      00148D 86 03            [24] 4031 	mov	ar3,@r0
      00148F 08               [12] 4032 	inc	r0
      001490 86 04            [24] 4033 	mov	ar4,@r0
                                   4034 ;	calc.c:269: ctx->acc_valid = 0;
      001492 74 06            [12] 4035 	mov	a,#0x06
      001494 2A               [12] 4036 	add	a,r2
      001495 FD               [12] 4037 	mov	r5,a
      001496 E4               [12] 4038 	clr	a
      001497 3B               [12] 4039 	addc	a,r3
      001498 FE               [12] 4040 	mov	r6,a
      001499 8C 07            [24] 4041 	mov	ar7,r4
      00149B 8D 82            [24] 4042 	mov	dpl,r5
      00149D 8E 83            [24] 4043 	mov	dph,r6
      00149F 8F F0            [24] 4044 	mov	b,r7
      0014A1 E4               [12] 4045 	clr	a
      0014A2 12r00r00         [24] 4046 	lcall	__gptrput
                                   4047 ;	calc.c:270: if (!stack_push(&ctx->s, ctx->acc)) printstr("\r\nstack overflow\r\n");
      0014A5 74 02            [12] 4048 	mov	a,#0x02
      0014A7 2A               [12] 4049 	add	a,r2
      0014A8 FF               [12] 4050 	mov	r7,a
      0014A9 E4               [12] 4051 	clr	a
      0014AA 3B               [12] 4052 	addc	a,r3
      0014AB FD               [12] 4053 	mov	r5,a
      0014AC 8C 06            [24] 4054 	mov	ar6,r4
      0014AE 8F 82            [24] 4055 	mov	dpl,r7
      0014B0 8D 83            [24] 4056 	mov	dph,r5
      0014B2 8E F0            [24] 4057 	mov	b,r6
      0014B4 A8*00            [24] 4058 	mov	r0,_bp
      0014B6 08               [12] 4059 	inc	r0
      0014B7 12r00r00         [24] 4060 	lcall	__gptrget
      0014BA F6               [12] 4061 	mov	@r0,a
      0014BB A3               [24] 4062 	inc	dptr
      0014BC 12r00r00         [24] 4063 	lcall	__gptrget
      0014BF 08               [12] 4064 	inc	r0
      0014C0 F6               [12] 4065 	mov	@r0,a
      0014C1 A3               [24] 4066 	inc	dptr
      0014C2 12r00r00         [24] 4067 	lcall	__gptrget
      0014C5 08               [12] 4068 	inc	r0
      0014C6 F6               [12] 4069 	mov	@r0,a
      0014C7 A3               [24] 4070 	inc	dptr
      0014C8 12r00r00         [24] 4071 	lcall	__gptrget
      0014CB 08               [12] 4072 	inc	r0
      0014CC F6               [12] 4073 	mov	@r0,a
      0014CD 74 09            [12] 4074 	mov	a,#0x09
      0014CF 2A               [12] 4075 	add	a,r2
      0014D0 FA               [12] 4076 	mov	r2,a
      0014D1 E4               [12] 4077 	clr	a
      0014D2 3B               [12] 4078 	addc	a,r3
      0014D3 FB               [12] 4079 	mov	r3,a
      0014D4 8C 07            [24] 4080 	mov	ar7,r4
      0014D6 A8*00            [24] 4081 	mov	r0,_bp
      0014D8 08               [12] 4082 	inc	r0
      0014D9 E6               [12] 4083 	mov	a,@r0
      0014DA C0 E0            [24] 4084 	push	acc
      0014DC 08               [12] 4085 	inc	r0
      0014DD E6               [12] 4086 	mov	a,@r0
      0014DE C0 E0            [24] 4087 	push	acc
      0014E0 08               [12] 4088 	inc	r0
      0014E1 E6               [12] 4089 	mov	a,@r0
      0014E2 C0 E0            [24] 4090 	push	acc
      0014E4 08               [12] 4091 	inc	r0
      0014E5 E6               [12] 4092 	mov	a,@r0
      0014E6 C0 E0            [24] 4093 	push	acc
      0014E8 8A 82            [24] 4094 	mov	dpl,r2
      0014EA 8B 83            [24] 4095 	mov	dph,r3
      0014EC 8F F0            [24] 4096 	mov	b,r7
      0014EE 12r00r00         [24] 4097 	lcall	_stack_push
      0014F1 AE 82            [24] 4098 	mov	r6,dpl
      0014F3 AF 83            [24] 4099 	mov	r7,dph
      0014F5 E5 81            [12] 4100 	mov	a,sp
      0014F7 24 FC            [12] 4101 	add	a,#0xfc
      0014F9 F5 81            [12] 4102 	mov	sp,a
      0014FB EE               [12] 4103 	mov	a,r6
      0014FC 4F               [12] 4104 	orl	a,r7
      0014FD 70 22            [24] 4105 	jnz	00102$
      0014FF 7Dr3E            [12] 4106 	mov	r5,#___str_4
      001501 7Es00            [12] 4107 	mov	r6,#(___str_4 >> 8)
      001503 7F 80            [12] 4108 	mov	r7,#0x80
                                   4109 ;	calc.c:50: return;
      001505                       4110 00109$:
                                   4111 ;	calc.c:48: for (; *s; s++) putchar(*s);
      001505 8D 82            [24] 4112 	mov	dpl,r5
      001507 8E 83            [24] 4113 	mov	dph,r6
      001509 8F F0            [24] 4114 	mov	b,r7
      00150B 12r00r00         [24] 4115 	lcall	__gptrget
      00150E FC               [12] 4116 	mov	r4,a
      00150F 60 10            [24] 4117 	jz	00102$
      001511 7B 00            [12] 4118 	mov	r3,#0x00
      001513 8C 82            [24] 4119 	mov	dpl,r4
      001515 8B 83            [24] 4120 	mov	dph,r3
      001517 12r00r00         [24] 4121 	lcall	_putchar
      00151A 0D               [12] 4122 	inc	r5
                                   4123 ;	calc.c:270: if (!stack_push(&ctx->s, ctx->acc)) printstr("\r\nstack overflow\r\n");
      00151B BD 00 E7         [24] 4124 	cjne	r5,#0x00,00109$
      00151E 0E               [12] 4125 	inc	r6
      00151F 80 E4            [24] 4126 	sjmp	00109$
      001521                       4127 00102$:
                                   4128 ;	calc.c:272: if (delta->event == EVENT_OP) return operator(_ctx, delta);
      001521 E5*00            [12] 4129 	mov	a,_bp
      001523 24 FB            [12] 4130 	add	a,#0xfb
      001525 F8               [12] 4131 	mov	r0,a
      001526 86 05            [24] 4132 	mov	ar5,@r0
      001528 08               [12] 4133 	inc	r0
      001529 86 06            [24] 4134 	mov	ar6,@r0
      00152B 08               [12] 4135 	inc	r0
      00152C 86 07            [24] 4136 	mov	ar7,@r0
      00152E 74 02            [12] 4137 	mov	a,#0x02
      001530 2D               [12] 4138 	add	a,r5
      001531 FA               [12] 4139 	mov	r2,a
      001532 E4               [12] 4140 	clr	a
      001533 3E               [12] 4141 	addc	a,r6
      001534 FB               [12] 4142 	mov	r3,a
      001535 8F 04            [24] 4143 	mov	ar4,r7
      001537 8A 82            [24] 4144 	mov	dpl,r2
      001539 8B 83            [24] 4145 	mov	dph,r3
      00153B 8C F0            [24] 4146 	mov	b,r4
      00153D 12r00r00         [24] 4147 	lcall	__gptrget
      001540 FA               [12] 4148 	mov	r2,a
      001541 A3               [24] 4149 	inc	dptr
      001542 12r00r00         [24] 4150 	lcall	__gptrget
      001545 FB               [12] 4151 	mov	r3,a
      001546 BA 02 29         [24] 4152 	cjne	r2,#0x02,00104$
      001549 BB 00 26         [24] 4153 	cjne	r3,#0x00,00104$
      00154C C0 05            [24] 4154 	push	ar5
      00154E C0 06            [24] 4155 	push	ar6
      001550 C0 07            [24] 4156 	push	ar7
      001552 E5*00            [12] 4157 	mov	a,_bp
      001554 24 05            [12] 4158 	add	a,#0x05
      001556 F8               [12] 4159 	mov	r0,a
      001557 86 82            [24] 4160 	mov	dpl,@r0
      001559 08               [12] 4161 	inc	r0
      00155A 86 83            [24] 4162 	mov	dph,@r0
      00155C 08               [12] 4163 	inc	r0
      00155D 86 F0            [24] 4164 	mov	b,@r0
      00155F 12r03rCA         [24] 4165 	lcall	_operator
      001562 AE 82            [24] 4166 	mov	r6,dpl
      001564 AF 83            [24] 4167 	mov	r7,dph
      001566 15 81            [12] 4168 	dec	sp
      001568 15 81            [12] 4169 	dec	sp
      00156A 15 81            [12] 4170 	dec	sp
      00156C 8E 82            [24] 4171 	mov	dpl,r6
      00156E 8F 83            [24] 4172 	mov	dph,r7
      001570 80 03            [24] 4173 	sjmp	00111$
      001572                       4174 00104$:
                                   4175 ;	calc.c:273: else return 1;
      001572 90 00 01         [24] 4176 	mov	dptr,#0x0001
      001575                       4177 00111$:
                                   4178 ;	calc.c:274: }
      001575 85*00 81         [24] 4179 	mov	sp,_bp
      001578 D0*00            [24] 4180 	pop	_bp
      00157A 22               [24] 4181 	ret
                                   4182 ;------------------------------------------------------------
                                   4183 ;Allocation info for local variables in function 'reset_acc'
                                   4184 ;------------------------------------------------------------
                                   4185 ;delta                     Allocated to stack - _bp -5
                                   4186 ;_ctx                      Allocated to registers r5 r6 r7 
                                   4187 ;ctx                       Allocated to registers r5 r6 r7 
                                   4188 ;------------------------------------------------------------
                                   4189 ;	calc.c:276: static int reset_acc(void *_ctx, delta_t *delta) __reentrant {
                                   4190 ;	-----------------------------------------
                                   4191 ;	 function reset_acc
                                   4192 ;	-----------------------------------------
      00157B                       4193 _reset_acc:
      00157B C0*00            [24] 4194 	push	_bp
      00157D 85 81*00         [24] 4195 	mov	_bp,sp
      001580 AD 82            [24] 4196 	mov	r5,dpl
      001582 AE 83            [24] 4197 	mov	r6,dph
      001584 AF F0            [24] 4198 	mov	r7,b
                                   4199 ;	calc.c:277: struct ctx *ctx = (struct ctx *)_ctx;
                                   4200 ;	calc.c:279: if (delta->event == EVENT_RSTA_I) ctx->acc_valid = 0;
      001586 E5*00            [12] 4201 	mov	a,_bp
      001588 24 FB            [12] 4202 	add	a,#0xfb
      00158A F8               [12] 4203 	mov	r0,a
      00158B 86 02            [24] 4204 	mov	ar2,@r0
      00158D 08               [12] 4205 	inc	r0
      00158E 86 03            [24] 4206 	mov	ar3,@r0
      001590 08               [12] 4207 	inc	r0
      001591 86 04            [24] 4208 	mov	ar4,@r0
      001593 74 02            [12] 4209 	mov	a,#0x02
      001595 2A               [12] 4210 	add	a,r2
      001596 FA               [12] 4211 	mov	r2,a
      001597 E4               [12] 4212 	clr	a
      001598 3B               [12] 4213 	addc	a,r3
      001599 FB               [12] 4214 	mov	r3,a
      00159A 8A 82            [24] 4215 	mov	dpl,r2
      00159C 8B 83            [24] 4216 	mov	dph,r3
      00159E 8C F0            [24] 4217 	mov	b,r4
      0015A0 12r00r00         [24] 4218 	lcall	__gptrget
      0015A3 FA               [12] 4219 	mov	r2,a
      0015A4 A3               [24] 4220 	inc	dptr
      0015A5 12r00r00         [24] 4221 	lcall	__gptrget
      0015A8 FB               [12] 4222 	mov	r3,a
      0015A9 BA 06 16         [24] 4223 	cjne	r2,#0x06,00102$
      0015AC BB 00 13         [24] 4224 	cjne	r3,#0x00,00102$
      0015AF 74 06            [12] 4225 	mov	a,#0x06
      0015B1 2D               [12] 4226 	add	a,r5
      0015B2 FA               [12] 4227 	mov	r2,a
      0015B3 E4               [12] 4228 	clr	a
      0015B4 3E               [12] 4229 	addc	a,r6
      0015B5 FB               [12] 4230 	mov	r3,a
      0015B6 8F 04            [24] 4231 	mov	ar4,r7
      0015B8 8A 82            [24] 4232 	mov	dpl,r2
      0015BA 8B 83            [24] 4233 	mov	dph,r3
      0015BC 8C F0            [24] 4234 	mov	b,r4
      0015BE E4               [12] 4235 	clr	a
      0015BF 12r00r00         [24] 4236 	lcall	__gptrput
      0015C2                       4237 00102$:
                                   4238 ;	calc.c:280: ctx->acc = 0l;
      0015C2 74 02            [12] 4239 	mov	a,#0x02
      0015C4 2D               [12] 4240 	add	a,r5
      0015C5 FD               [12] 4241 	mov	r5,a
      0015C6 E4               [12] 4242 	clr	a
      0015C7 3E               [12] 4243 	addc	a,r6
      0015C8 FE               [12] 4244 	mov	r6,a
      0015C9 8D 82            [24] 4245 	mov	dpl,r5
      0015CB 8E 83            [24] 4246 	mov	dph,r6
      0015CD 8F F0            [24] 4247 	mov	b,r7
      0015CF E4               [12] 4248 	clr	a
      0015D0 12r00r00         [24] 4249 	lcall	__gptrput
      0015D3 A3               [24] 4250 	inc	dptr
      0015D4 12r00r00         [24] 4251 	lcall	__gptrput
      0015D7 A3               [24] 4252 	inc	dptr
      0015D8 12r00r00         [24] 4253 	lcall	__gptrput
      0015DB A3               [24] 4254 	inc	dptr
      0015DC 12r00r00         [24] 4255 	lcall	__gptrput
                                   4256 ;	calc.c:282: return 1;
      0015DF 90 00 01         [24] 4257 	mov	dptr,#0x0001
                                   4258 ;	calc.c:283: }
      0015E2 D0*00            [24] 4259 	pop	_bp
      0015E4 22               [24] 4260 	ret
                                   4261 ;------------------------------------------------------------
                                   4262 ;Allocation info for local variables in function 'reset_base'
                                   4263 ;------------------------------------------------------------
                                   4264 ;delta                     Allocated to stack - _bp -5
                                   4265 ;_ctx                      Allocated to registers r5 r6 r7 
                                   4266 ;ctx                       Allocated to registers r5 r6 r7 
                                   4267 ;------------------------------------------------------------
                                   4268 ;	calc.c:285: static int reset_base(void *_ctx, delta_t *delta) __reentrant {
                                   4269 ;	-----------------------------------------
                                   4270 ;	 function reset_base
                                   4271 ;	-----------------------------------------
      0015E5                       4272 _reset_base:
      0015E5 C0*00            [24] 4273 	push	_bp
      0015E7 85 81*00         [24] 4274 	mov	_bp,sp
      0015EA AD 82            [24] 4275 	mov	r5,dpl
      0015EC AE 83            [24] 4276 	mov	r6,dph
      0015EE AF F0            [24] 4277 	mov	r7,b
                                   4278 ;	calc.c:286: struct ctx *ctx = (struct ctx *)_ctx;
                                   4279 ;	calc.c:288: switch (ctx->digit[0]) {
      0015F0 74 07            [12] 4280 	mov	a,#0x07
      0015F2 2D               [12] 4281 	add	a,r5
      0015F3 FA               [12] 4282 	mov	r2,a
      0015F4 E4               [12] 4283 	clr	a
      0015F5 3E               [12] 4284 	addc	a,r6
      0015F6 FB               [12] 4285 	mov	r3,a
      0015F7 8F 04            [24] 4286 	mov	ar4,r7
      0015F9 8A 82            [24] 4287 	mov	dpl,r2
      0015FB 8B 83            [24] 4288 	mov	dph,r3
      0015FD 8C F0            [24] 4289 	mov	b,r4
      0015FF 12r00r00         [24] 4290 	lcall	__gptrget
      001602 FC               [12] 4291 	mov	r4,a
      001603 BC 48 02         [24] 4292 	cjne	r4,#0x48,00124$
      001606 80 0F            [24] 4293 	sjmp	00101$
      001608                       4294 00124$:
      001608 BC 4F 02         [24] 4295 	cjne	r4,#0x4f,00125$
      00160B 80 2E            [24] 4296 	sjmp	00103$
      00160D                       4297 00125$:
      00160D BC 68 02         [24] 4298 	cjne	r4,#0x68,00126$
      001610 80 17            [24] 4299 	sjmp	00102$
      001612                       4300 00126$:
                                   4301 ;	calc.c:289: case 'H':
      001612 BC 6F 48         [24] 4302 	cjne	r4,#0x6f,00105$
      001615 80 36            [24] 4303 	sjmp	00104$
      001617                       4304 00101$:
                                   4305 ;	calc.c:290: ctx->base = 16;
      001617 8D 82            [24] 4306 	mov	dpl,r5
      001619 8E 83            [24] 4307 	mov	dph,r6
      00161B 8F F0            [24] 4308 	mov	b,r7
      00161D 74 10            [12] 4309 	mov	a,#0x10
      00161F 12r00r00         [24] 4310 	lcall	__gptrput
      001622 A3               [24] 4311 	inc	dptr
      001623 E4               [12] 4312 	clr	a
      001624 12r00r00         [24] 4313 	lcall	__gptrput
                                   4314 ;	calc.c:291: break;
                                   4315 ;	calc.c:292: case 'h':
      001627 80 34            [24] 4316 	sjmp	00105$
      001629                       4317 00102$:
                                   4318 ;	calc.c:293: ctx->base = 10;
      001629 8D 82            [24] 4319 	mov	dpl,r5
      00162B 8E 83            [24] 4320 	mov	dph,r6
      00162D 8F F0            [24] 4321 	mov	b,r7
      00162F 74 0A            [12] 4322 	mov	a,#0x0a
      001631 12r00r00         [24] 4323 	lcall	__gptrput
      001634 A3               [24] 4324 	inc	dptr
      001635 E4               [12] 4325 	clr	a
      001636 12r00r00         [24] 4326 	lcall	__gptrput
                                   4327 ;	calc.c:294: break;
                                   4328 ;	calc.c:295: case 'O':
      001639 80 22            [24] 4329 	sjmp	00105$
      00163B                       4330 00103$:
                                   4331 ;	calc.c:296: ctx->base = 8;
      00163B 8D 82            [24] 4332 	mov	dpl,r5
      00163D 8E 83            [24] 4333 	mov	dph,r6
      00163F 8F F0            [24] 4334 	mov	b,r7
      001641 74 08            [12] 4335 	mov	a,#0x08
      001643 12r00r00         [24] 4336 	lcall	__gptrput
      001646 A3               [24] 4337 	inc	dptr
      001647 E4               [12] 4338 	clr	a
      001648 12r00r00         [24] 4339 	lcall	__gptrput
                                   4340 ;	calc.c:297: break;
                                   4341 ;	calc.c:298: case 'o':
      00164B 80 10            [24] 4342 	sjmp	00105$
      00164D                       4343 00104$:
                                   4344 ;	calc.c:299: ctx->base = 2;
      00164D 8D 82            [24] 4345 	mov	dpl,r5
      00164F 8E 83            [24] 4346 	mov	dph,r6
      001651 8F F0            [24] 4347 	mov	b,r7
      001653 74 02            [12] 4348 	mov	a,#0x02
      001655 12r00r00         [24] 4349 	lcall	__gptrput
      001658 A3               [24] 4350 	inc	dptr
      001659 E4               [12] 4351 	clr	a
      00165A 12r00r00         [24] 4352 	lcall	__gptrput
                                   4353 ;	calc.c:301: }
      00165D                       4354 00105$:
                                   4355 ;	calc.c:303: return 1;
      00165D 90 00 01         [24] 4356 	mov	dptr,#0x0001
                                   4357 ;	calc.c:304: }
      001660 D0*00            [24] 4358 	pop	_bp
      001662 22               [24] 4359 	ret
                                   4360 ;------------------------------------------------------------
                                   4361 ;Allocation info for local variables in function 'help'
                                   4362 ;------------------------------------------------------------
                                   4363 ;delta                     Allocated to stack - _bp -5
                                   4364 ;_ctx                      Allocated to registers r5 r6 r7 
                                   4365 ;ctx                       Allocated to stack - _bp +3
                                   4366 ;__1310720063              Allocated to registers 
                                   4367 ;s                         Allocated to registers r5 r6 r7 
                                   4368 ;__1310720065              Allocated to registers 
                                   4369 ;s                         Allocated to registers r5 r6 r7 
                                   4370 ;__1310720067              Allocated to registers 
                                   4371 ;s                         Allocated to registers r5 r6 r7 
                                   4372 ;__1310720069              Allocated to registers 
                                   4373 ;s                         Allocated to registers r5 r6 r7 
                                   4374 ;__1310720071              Allocated to registers 
                                   4375 ;s                         Allocated to registers r5 r6 r7 
                                   4376 ;__1310720073              Allocated to registers 
                                   4377 ;s                         Allocated to registers r5 r6 r7 
                                   4378 ;__1310720075              Allocated to registers 
                                   4379 ;s                         Allocated to registers r5 r6 r7 
                                   4380 ;__1310720077              Allocated to registers 
                                   4381 ;s                         Allocated to registers r5 r6 r7 
                                   4382 ;__1310720079              Allocated to registers 
                                   4383 ;s                         Allocated to registers r5 r6 r7 
                                   4384 ;__1310720081              Allocated to registers 
                                   4385 ;s                         Allocated to registers r5 r6 r7 
                                   4386 ;__1310720083              Allocated to registers 
                                   4387 ;s                         Allocated to registers r5 r6 r7 
                                   4388 ;__1310720085              Allocated to registers 
                                   4389 ;s                         Allocated to registers r5 r6 r7 
                                   4390 ;__1310720087              Allocated to registers 
                                   4391 ;s                         Allocated to registers r5 r6 r7 
                                   4392 ;__1310720089              Allocated to registers 
                                   4393 ;s                         Allocated to registers r5 r6 r7 
                                   4394 ;__1310720091              Allocated to registers 
                                   4395 ;s                         Allocated to registers r5 r6 r7 
                                   4396 ;__1310720093              Allocated to registers 
                                   4397 ;s                         Allocated to registers r5 r6 r7 
                                   4398 ;__1310720095              Allocated to registers 
                                   4399 ;s                         Allocated to registers r5 r6 r7 
                                   4400 ;__1310720097              Allocated to registers 
                                   4401 ;s                         Allocated to registers r5 r6 r7 
                                   4402 ;__1310720099              Allocated to registers 
                                   4403 ;s                         Allocated to registers r5 r6 r7 
                                   4404 ;sloc0                     Allocated to stack - _bp +1
                                   4405 ;------------------------------------------------------------
                                   4406 ;	calc.c:306: static int help(void *_ctx, delta_t *delta) __reentrant {
                                   4407 ;	-----------------------------------------
                                   4408 ;	 function help
                                   4409 ;	-----------------------------------------
      001663                       4410 _help:
      001663 C0*00            [24] 4411 	push	_bp
      001665 E5 81            [12] 4412 	mov	a,sp
      001667 F5*00            [12] 4413 	mov	_bp,a
      001669 24 05            [12] 4414 	add	a,#0x05
      00166B F5 81            [12] 4415 	mov	sp,a
      00166D AD 82            [24] 4416 	mov	r5,dpl
      00166F AE 83            [24] 4417 	mov	r6,dph
      001671 AF F0            [24] 4418 	mov	r7,b
                                   4419 ;	calc.c:307: struct ctx *ctx = (struct ctx *)_ctx;
      001673 E5*00            [12] 4420 	mov	a,_bp
      001675 24 03            [12] 4421 	add	a,#0x03
      001677 F8               [12] 4422 	mov	r0,a
      001678 A6 05            [24] 4423 	mov	@r0,ar5
      00167A 08               [12] 4424 	inc	r0
      00167B A6 06            [24] 4425 	mov	@r0,ar6
      00167D 08               [12] 4426 	inc	r0
      00167E A6 07            [24] 4427 	mov	@r0,ar7
                                   4428 ;	calc.c:311: ctx->base, ctx->acc, ctx->acc, (int)ctx->acc_valid);
      001680 E5*00            [12] 4429 	mov	a,_bp
      001682 24 03            [12] 4430 	add	a,#0x03
      001684 F8               [12] 4431 	mov	r0,a
      001685 74 06            [12] 4432 	mov	a,#0x06
      001687 26               [12] 4433 	add	a,@r0
      001688 FA               [12] 4434 	mov	r2,a
      001689 E4               [12] 4435 	clr	a
      00168A 08               [12] 4436 	inc	r0
      00168B 36               [12] 4437 	addc	a,@r0
      00168C FB               [12] 4438 	mov	r3,a
      00168D 08               [12] 4439 	inc	r0
      00168E 86 04            [24] 4440 	mov	ar4,@r0
      001690 8A 82            [24] 4441 	mov	dpl,r2
      001692 8B 83            [24] 4442 	mov	dph,r3
      001694 8C F0            [24] 4443 	mov	b,r4
      001696 12r00r00         [24] 4444 	lcall	__gptrget
      001699 FA               [12] 4445 	mov	r2,a
      00169A A8*00            [24] 4446 	mov	r0,_bp
      00169C 08               [12] 4447 	inc	r0
      00169D A6 02            [24] 4448 	mov	@r0,ar2
      00169F 08               [12] 4449 	inc	r0
      0016A0 76 00            [12] 4450 	mov	@r0,#0x00
      0016A2 E5*00            [12] 4451 	mov	a,_bp
      0016A4 24 03            [12] 4452 	add	a,#0x03
      0016A6 F8               [12] 4453 	mov	r0,a
      0016A7 74 02            [12] 4454 	mov	a,#0x02
      0016A9 26               [12] 4455 	add	a,@r0
      0016AA FB               [12] 4456 	mov	r3,a
      0016AB E4               [12] 4457 	clr	a
      0016AC 08               [12] 4458 	inc	r0
      0016AD 36               [12] 4459 	addc	a,@r0
      0016AE FE               [12] 4460 	mov	r6,a
      0016AF 08               [12] 4461 	inc	r0
      0016B0 86 07            [24] 4462 	mov	ar7,@r0
      0016B2 8B 82            [24] 4463 	mov	dpl,r3
      0016B4 8E 83            [24] 4464 	mov	dph,r6
      0016B6 8F F0            [24] 4465 	mov	b,r7
      0016B8 12r00r00         [24] 4466 	lcall	__gptrget
      0016BB FB               [12] 4467 	mov	r3,a
      0016BC A3               [24] 4468 	inc	dptr
      0016BD 12r00r00         [24] 4469 	lcall	__gptrget
      0016C0 FE               [12] 4470 	mov	r6,a
      0016C1 A3               [24] 4471 	inc	dptr
      0016C2 12r00r00         [24] 4472 	lcall	__gptrget
      0016C5 FF               [12] 4473 	mov	r7,a
      0016C6 A3               [24] 4474 	inc	dptr
      0016C7 12r00r00         [24] 4475 	lcall	__gptrget
      0016CA FD               [12] 4476 	mov	r5,a
      0016CB E5*00            [12] 4477 	mov	a,_bp
      0016CD 24 03            [12] 4478 	add	a,#0x03
      0016CF F8               [12] 4479 	mov	r0,a
      0016D0 86 82            [24] 4480 	mov	dpl,@r0
      0016D2 08               [12] 4481 	inc	r0
      0016D3 86 83            [24] 4482 	mov	dph,@r0
      0016D5 08               [12] 4483 	inc	r0
      0016D6 86 F0            [24] 4484 	mov	b,@r0
      0016D8 12r00r00         [24] 4485 	lcall	__gptrget
      0016DB FA               [12] 4486 	mov	r2,a
      0016DC A3               [24] 4487 	inc	dptr
      0016DD 12r00r00         [24] 4488 	lcall	__gptrget
      0016E0 FC               [12] 4489 	mov	r4,a
                                   4490 ;	calc.c:310: printf("\r\nbase = %d, acc = %ld / %0.8lx, acc_valid = %d\r\n\r\n",
      0016E1 A8*00            [24] 4491 	mov	r0,_bp
      0016E3 08               [12] 4492 	inc	r0
      0016E4 E6               [12] 4493 	mov	a,@r0
      0016E5 C0 E0            [24] 4494 	push	acc
      0016E7 08               [12] 4495 	inc	r0
      0016E8 E6               [12] 4496 	mov	a,@r0
      0016E9 C0 E0            [24] 4497 	push	acc
      0016EB C0 03            [24] 4498 	push	ar3
      0016ED C0 06            [24] 4499 	push	ar6
      0016EF C0 07            [24] 4500 	push	ar7
      0016F1 C0 05            [24] 4501 	push	ar5
      0016F3 C0 03            [24] 4502 	push	ar3
      0016F5 C0 06            [24] 4503 	push	ar6
      0016F7 C0 07            [24] 4504 	push	ar7
      0016F9 C0 05            [24] 4505 	push	ar5
      0016FB C0 02            [24] 4506 	push	ar2
      0016FD C0 04            [24] 4507 	push	ar4
      0016FF 74r51            [12] 4508 	mov	a,#___str_5
      001701 C0 E0            [24] 4509 	push	acc
      001703 74s00            [12] 4510 	mov	a,#(___str_5 >> 8)
      001705 C0 E0            [24] 4511 	push	acc
      001707 74 80            [12] 4512 	mov	a,#0x80
      001709 C0 E0            [24] 4513 	push	acc
      00170B 12r00r00         [24] 4514 	lcall	_printf
      00170E E5 81            [12] 4515 	mov	a,sp
      001710 24 F1            [12] 4516 	add	a,#0xf1
      001712 F5 81            [12] 4517 	mov	sp,a
                                   4518 ;	calc.c:312: printstr("HhOo\tbase 16 10 8 2\r\n");
      001714 7Dr85            [12] 4519 	mov	r5,#___str_6
      001716 7Es00            [12] 4520 	mov	r6,#(___str_6 >> 8)
      001718 7F 80            [12] 4521 	mov	r7,#0x80
                                   4522 ;	calc.c:50: return;
      00171A                       4523 00140$:
                                   4524 ;	calc.c:48: for (; *s; s++) putchar(*s);
      00171A 8D 82            [24] 4525 	mov	dpl,r5
      00171C 8E 83            [24] 4526 	mov	dph,r6
      00171E 8F F0            [24] 4527 	mov	b,r7
      001720 12r00r00         [24] 4528 	lcall	__gptrget
      001723 FC               [12] 4529 	mov	r4,a
      001724 60 10            [24] 4530 	jz	00102$
      001726 7B 00            [12] 4531 	mov	r3,#0x00
      001728 8C 82            [24] 4532 	mov	dpl,r4
      00172A 8B 83            [24] 4533 	mov	dph,r3
      00172C 12r00r00         [24] 4534 	lcall	_putchar
      00172F 0D               [12] 4535 	inc	r5
                                   4536 ;	calc.c:312: printstr("HhOo\tbase 16 10 8 2\r\n");
      001730 BD 00 E7         [24] 4537 	cjne	r5,#0x00,00140$
      001733 0E               [12] 4538 	inc	r6
      001734 80 E4            [24] 4539 	sjmp	00140$
      001736                       4540 00102$:
                                   4541 ;	calc.c:313: printstr("p\tpeek top\r\n");
      001736 7Dr9B            [12] 4542 	mov	r5,#___str_7
      001738 7Es00            [12] 4543 	mov	r6,#(___str_7 >> 8)
      00173A 7F 80            [12] 4544 	mov	r7,#0x80
                                   4545 ;	calc.c:50: return;
      00173C                       4546 00143$:
                                   4547 ;	calc.c:48: for (; *s; s++) putchar(*s);
      00173C 8D 82            [24] 4548 	mov	dpl,r5
      00173E 8E 83            [24] 4549 	mov	dph,r6
      001740 8F F0            [24] 4550 	mov	b,r7
      001742 12r00r00         [24] 4551 	lcall	__gptrget
      001745 FC               [12] 4552 	mov	r4,a
      001746 60 10            [24] 4553 	jz	00104$
      001748 7B 00            [12] 4554 	mov	r3,#0x00
      00174A 8C 82            [24] 4555 	mov	dpl,r4
      00174C 8B 83            [24] 4556 	mov	dph,r3
      00174E 12r00r00         [24] 4557 	lcall	_putchar
      001751 0D               [12] 4558 	inc	r5
                                   4559 ;	calc.c:313: printstr("p\tpeek top\r\n");
      001752 BD 00 E7         [24] 4560 	cjne	r5,#0x00,00143$
      001755 0E               [12] 4561 	inc	r6
      001756 80 E4            [24] 4562 	sjmp	00143$
      001758                       4563 00104$:
                                   4564 ;	calc.c:314: printstr("P\tprint stack\r\n");
      001758 7DrA8            [12] 4565 	mov	r5,#___str_8
      00175A 7Es00            [12] 4566 	mov	r6,#(___str_8 >> 8)
      00175C 7F 80            [12] 4567 	mov	r7,#0x80
                                   4568 ;	calc.c:50: return;
      00175E                       4569 00146$:
                                   4570 ;	calc.c:48: for (; *s; s++) putchar(*s);
      00175E 8D 82            [24] 4571 	mov	dpl,r5
      001760 8E 83            [24] 4572 	mov	dph,r6
      001762 8F F0            [24] 4573 	mov	b,r7
      001764 12r00r00         [24] 4574 	lcall	__gptrget
      001767 FC               [12] 4575 	mov	r4,a
      001768 60 10            [24] 4576 	jz	00106$
      00176A 7B 00            [12] 4577 	mov	r3,#0x00
      00176C 8C 82            [24] 4578 	mov	dpl,r4
      00176E 8B 83            [24] 4579 	mov	dph,r3
      001770 12r00r00         [24] 4580 	lcall	_putchar
      001773 0D               [12] 4581 	inc	r5
                                   4582 ;	calc.c:314: printstr("P\tprint stack\r\n");
      001774 BD 00 E7         [24] 4583 	cjne	r5,#0x00,00146$
      001777 0E               [12] 4584 	inc	r6
      001778 80 E4            [24] 4585 	sjmp	00146$
      00177A                       4586 00106$:
                                   4587 ;	calc.c:315: printstr("v.\tpop top\r\n");
      00177A 7DrB8            [12] 4588 	mov	r5,#___str_9
      00177C 7Es00            [12] 4589 	mov	r6,#(___str_9 >> 8)
      00177E 7F 80            [12] 4590 	mov	r7,#0x80
                                   4591 ;	calc.c:50: return;
      001780                       4592 00149$:
                                   4593 ;	calc.c:48: for (; *s; s++) putchar(*s);
      001780 8D 82            [24] 4594 	mov	dpl,r5
      001782 8E 83            [24] 4595 	mov	dph,r6
      001784 8F F0            [24] 4596 	mov	b,r7
      001786 12r00r00         [24] 4597 	lcall	__gptrget
      001789 FC               [12] 4598 	mov	r4,a
      00178A 60 10            [24] 4599 	jz	00108$
      00178C 7B 00            [12] 4600 	mov	r3,#0x00
      00178E 8C 82            [24] 4601 	mov	dpl,r4
      001790 8B 83            [24] 4602 	mov	dph,r3
      001792 12r00r00         [24] 4603 	lcall	_putchar
      001795 0D               [12] 4604 	inc	r5
                                   4605 ;	calc.c:315: printstr("v.\tpop top\r\n");
      001796 BD 00 E7         [24] 4606 	cjne	r5,#0x00,00149$
      001799 0E               [12] 4607 	inc	r6
      00179A 80 E4            [24] 4608 	sjmp	00149$
      00179C                       4609 00108$:
                                   4610 ;	calc.c:316: printstr("V\tpop all\r\n");
      00179C 7DrC5            [12] 4611 	mov	r5,#___str_10
      00179E 7Es00            [12] 4612 	mov	r6,#(___str_10 >> 8)
      0017A0 7F 80            [12] 4613 	mov	r7,#0x80
                                   4614 ;	calc.c:50: return;
      0017A2                       4615 00152$:
                                   4616 ;	calc.c:48: for (; *s; s++) putchar(*s);
      0017A2 8D 82            [24] 4617 	mov	dpl,r5
      0017A4 8E 83            [24] 4618 	mov	dph,r6
      0017A6 8F F0            [24] 4619 	mov	b,r7
      0017A8 12r00r00         [24] 4620 	lcall	__gptrget
      0017AB FC               [12] 4621 	mov	r4,a
      0017AC 60 10            [24] 4622 	jz	00110$
      0017AE 7B 00            [12] 4623 	mov	r3,#0x00
      0017B0 8C 82            [24] 4624 	mov	dpl,r4
      0017B2 8B 83            [24] 4625 	mov	dph,r3
      0017B4 12r00r00         [24] 4626 	lcall	_putchar
      0017B7 0D               [12] 4627 	inc	r5
                                   4628 ;	calc.c:316: printstr("V\tpop all\r\n");
      0017B8 BD 00 E7         [24] 4629 	cjne	r5,#0x00,00152$
      0017BB 0E               [12] 4630 	inc	r6
      0017BC 80 E4            [24] 4631 	sjmp	00152$
      0017BE                       4632 00110$:
                                   4633 ;	calc.c:317: printstr("i\treset acc\r\n");
      0017BE 7DrD1            [12] 4634 	mov	r5,#___str_11
      0017C0 7Es00            [12] 4635 	mov	r6,#(___str_11 >> 8)
      0017C2 7F 80            [12] 4636 	mov	r7,#0x80
                                   4637 ;	calc.c:50: return;
      0017C4                       4638 00155$:
                                   4639 ;	calc.c:48: for (; *s; s++) putchar(*s);
      0017C4 8D 82            [24] 4640 	mov	dpl,r5
      0017C6 8E 83            [24] 4641 	mov	dph,r6
      0017C8 8F F0            [24] 4642 	mov	b,r7
      0017CA 12r00r00         [24] 4643 	lcall	__gptrget
      0017CD FC               [12] 4644 	mov	r4,a
      0017CE 60 10            [24] 4645 	jz	00112$
      0017D0 7B 00            [12] 4646 	mov	r3,#0x00
      0017D2 8C 82            [24] 4647 	mov	dpl,r4
      0017D4 8B 83            [24] 4648 	mov	dph,r3
      0017D6 12r00r00         [24] 4649 	lcall	_putchar
      0017D9 0D               [12] 4650 	inc	r5
                                   4651 ;	calc.c:317: printstr("i\treset acc\r\n");
      0017DA BD 00 E7         [24] 4652 	cjne	r5,#0x00,00155$
      0017DD 0E               [12] 4653 	inc	r6
      0017DE 80 E4            [24] 4654 	sjmp	00155$
      0017E0                       4655 00112$:
                                   4656 ;	calc.c:318: printstr("I\treset and discard acc\r\n");
      0017E0 7DrDF            [12] 4657 	mov	r5,#___str_12
      0017E2 7Es00            [12] 4658 	mov	r6,#(___str_12 >> 8)
      0017E4 7F 80            [12] 4659 	mov	r7,#0x80
                                   4660 ;	calc.c:50: return;
      0017E6                       4661 00158$:
                                   4662 ;	calc.c:48: for (; *s; s++) putchar(*s);
      0017E6 8D 82            [24] 4663 	mov	dpl,r5
      0017E8 8E 83            [24] 4664 	mov	dph,r6
      0017EA 8F F0            [24] 4665 	mov	b,r7
      0017EC 12r00r00         [24] 4666 	lcall	__gptrget
      0017EF FC               [12] 4667 	mov	r4,a
      0017F0 60 10            [24] 4668 	jz	00114$
      0017F2 7B 00            [12] 4669 	mov	r3,#0x00
      0017F4 8C 82            [24] 4670 	mov	dpl,r4
      0017F6 8B 83            [24] 4671 	mov	dph,r3
      0017F8 12r00r00         [24] 4672 	lcall	_putchar
      0017FB 0D               [12] 4673 	inc	r5
                                   4674 ;	calc.c:318: printstr("I\treset and discard acc\r\n");
      0017FC BD 00 E7         [24] 4675 	cjne	r5,#0x00,00158$
      0017FF 0E               [12] 4676 	inc	r6
      001800 80 E4            [24] 4677 	sjmp	00158$
      001802                       4678 00114$:
                                   4679 ;	calc.c:319: printstr("x\texchange top 2\r\n");
      001802 7DrF9            [12] 4680 	mov	r5,#___str_13
      001804 7Es00            [12] 4681 	mov	r6,#(___str_13 >> 8)
      001806 7F 80            [12] 4682 	mov	r7,#0x80
                                   4683 ;	calc.c:50: return;
      001808                       4684 00161$:
                                   4685 ;	calc.c:48: for (; *s; s++) putchar(*s);
      001808 8D 82            [24] 4686 	mov	dpl,r5
      00180A 8E 83            [24] 4687 	mov	dph,r6
      00180C 8F F0            [24] 4688 	mov	b,r7
      00180E 12r00r00         [24] 4689 	lcall	__gptrget
      001811 FC               [12] 4690 	mov	r4,a
      001812 60 10            [24] 4691 	jz	00116$
      001814 7B 00            [12] 4692 	mov	r3,#0x00
      001816 8C 82            [24] 4693 	mov	dpl,r4
      001818 8B 83            [24] 4694 	mov	dph,r3
      00181A 12r00r00         [24] 4695 	lcall	_putchar
      00181D 0D               [12] 4696 	inc	r5
                                   4697 ;	calc.c:319: printstr("x\texchange top 2\r\n");
      00181E BD 00 E7         [24] 4698 	cjne	r5,#0x00,00161$
      001821 0E               [12] 4699 	inc	r6
      001822 80 E4            [24] 4700 	sjmp	00161$
      001824                       4701 00116$:
                                   4702 ;	calc.c:320: printstr("+\tadd top 2\r\n");
      001824 7Dr0C            [12] 4703 	mov	r5,#___str_14
      001826 7Es01            [12] 4704 	mov	r6,#(___str_14 >> 8)
      001828 7F 80            [12] 4705 	mov	r7,#0x80
                                   4706 ;	calc.c:50: return;
      00182A                       4707 00164$:
                                   4708 ;	calc.c:48: for (; *s; s++) putchar(*s);
      00182A 8D 82            [24] 4709 	mov	dpl,r5
      00182C 8E 83            [24] 4710 	mov	dph,r6
      00182E 8F F0            [24] 4711 	mov	b,r7
      001830 12r00r00         [24] 4712 	lcall	__gptrget
      001833 FC               [12] 4713 	mov	r4,a
      001834 60 10            [24] 4714 	jz	00118$
      001836 7B 00            [12] 4715 	mov	r3,#0x00
      001838 8C 82            [24] 4716 	mov	dpl,r4
      00183A 8B 83            [24] 4717 	mov	dph,r3
      00183C 12r00r00         [24] 4718 	lcall	_putchar
      00183F 0D               [12] 4719 	inc	r5
                                   4720 ;	calc.c:320: printstr("+\tadd top 2\r\n");
      001840 BD 00 E7         [24] 4721 	cjne	r5,#0x00,00164$
      001843 0E               [12] 4722 	inc	r6
      001844 80 E4            [24] 4723 	sjmp	00164$
      001846                       4724 00118$:
                                   4725 ;	calc.c:321: printstr("-\tsubtract top 2\r\n");
      001846 7Dr1A            [12] 4726 	mov	r5,#___str_15
      001848 7Es01            [12] 4727 	mov	r6,#(___str_15 >> 8)
      00184A 7F 80            [12] 4728 	mov	r7,#0x80
                                   4729 ;	calc.c:50: return;
      00184C                       4730 00167$:
                                   4731 ;	calc.c:48: for (; *s; s++) putchar(*s);
      00184C 8D 82            [24] 4732 	mov	dpl,r5
      00184E 8E 83            [24] 4733 	mov	dph,r6
      001850 8F F0            [24] 4734 	mov	b,r7
      001852 12r00r00         [24] 4735 	lcall	__gptrget
      001855 FC               [12] 4736 	mov	r4,a
      001856 60 10            [24] 4737 	jz	00120$
      001858 7B 00            [12] 4738 	mov	r3,#0x00
      00185A 8C 82            [24] 4739 	mov	dpl,r4
      00185C 8B 83            [24] 4740 	mov	dph,r3
      00185E 12r00r00         [24] 4741 	lcall	_putchar
      001861 0D               [12] 4742 	inc	r5
                                   4743 ;	calc.c:321: printstr("-\tsubtract top 2\r\n");
      001862 BD 00 E7         [24] 4744 	cjne	r5,#0x00,00167$
      001865 0E               [12] 4745 	inc	r6
      001866 80 E4            [24] 4746 	sjmp	00167$
      001868                       4747 00120$:
                                   4748 ;	calc.c:322: printstr("*\tmultiply top 2\r\n");
      001868 7Dr2D            [12] 4749 	mov	r5,#___str_16
      00186A 7Es01            [12] 4750 	mov	r6,#(___str_16 >> 8)
      00186C 7F 80            [12] 4751 	mov	r7,#0x80
                                   4752 ;	calc.c:50: return;
      00186E                       4753 00170$:
                                   4754 ;	calc.c:48: for (; *s; s++) putchar(*s);
      00186E 8D 82            [24] 4755 	mov	dpl,r5
      001870 8E 83            [24] 4756 	mov	dph,r6
      001872 8F F0            [24] 4757 	mov	b,r7
      001874 12r00r00         [24] 4758 	lcall	__gptrget
      001877 FC               [12] 4759 	mov	r4,a
      001878 60 10            [24] 4760 	jz	00122$
      00187A 7B 00            [12] 4761 	mov	r3,#0x00
      00187C 8C 82            [24] 4762 	mov	dpl,r4
      00187E 8B 83            [24] 4763 	mov	dph,r3
      001880 12r00r00         [24] 4764 	lcall	_putchar
      001883 0D               [12] 4765 	inc	r5
                                   4766 ;	calc.c:322: printstr("*\tmultiply top 2\r\n");
      001884 BD 00 E7         [24] 4767 	cjne	r5,#0x00,00170$
      001887 0E               [12] 4768 	inc	r6
      001888 80 E4            [24] 4769 	sjmp	00170$
      00188A                       4770 00122$:
                                   4771 ;	calc.c:323: printstr("/\tdivide top 2\r\n");
      00188A 7Dr40            [12] 4772 	mov	r5,#___str_17
      00188C 7Es01            [12] 4773 	mov	r6,#(___str_17 >> 8)
      00188E 7F 80            [12] 4774 	mov	r7,#0x80
                                   4775 ;	calc.c:50: return;
      001890                       4776 00173$:
                                   4777 ;	calc.c:48: for (; *s; s++) putchar(*s);
      001890 8D 82            [24] 4778 	mov	dpl,r5
      001892 8E 83            [24] 4779 	mov	dph,r6
      001894 8F F0            [24] 4780 	mov	b,r7
      001896 12r00r00         [24] 4781 	lcall	__gptrget
      001899 FC               [12] 4782 	mov	r4,a
      00189A 60 10            [24] 4783 	jz	00124$
      00189C 7B 00            [12] 4784 	mov	r3,#0x00
      00189E 8C 82            [24] 4785 	mov	dpl,r4
      0018A0 8B 83            [24] 4786 	mov	dph,r3
      0018A2 12r00r00         [24] 4787 	lcall	_putchar
      0018A5 0D               [12] 4788 	inc	r5
                                   4789 ;	calc.c:323: printstr("/\tdivide top 2\r\n");
      0018A6 BD 00 E7         [24] 4790 	cjne	r5,#0x00,00173$
      0018A9 0E               [12] 4791 	inc	r6
      0018AA 80 E4            [24] 4792 	sjmp	00173$
      0018AC                       4793 00124$:
                                   4794 ;	calc.c:324: printstr("%\tmodulus top 2\r\n");
      0018AC 7Dr51            [12] 4795 	mov	r5,#___str_18
      0018AE 7Es01            [12] 4796 	mov	r6,#(___str_18 >> 8)
      0018B0 7F 80            [12] 4797 	mov	r7,#0x80
                                   4798 ;	calc.c:50: return;
      0018B2                       4799 00176$:
                                   4800 ;	calc.c:48: for (; *s; s++) putchar(*s);
      0018B2 8D 82            [24] 4801 	mov	dpl,r5
      0018B4 8E 83            [24] 4802 	mov	dph,r6
      0018B6 8F F0            [24] 4803 	mov	b,r7
      0018B8 12r00r00         [24] 4804 	lcall	__gptrget
      0018BB FC               [12] 4805 	mov	r4,a
      0018BC 60 10            [24] 4806 	jz	00126$
      0018BE 7B 00            [12] 4807 	mov	r3,#0x00
      0018C0 8C 82            [24] 4808 	mov	dpl,r4
      0018C2 8B 83            [24] 4809 	mov	dph,r3
      0018C4 12r00r00         [24] 4810 	lcall	_putchar
      0018C7 0D               [12] 4811 	inc	r5
                                   4812 ;	calc.c:324: printstr("%\tmodulus top 2\r\n");
      0018C8 BD 00 E7         [24] 4813 	cjne	r5,#0x00,00176$
      0018CB 0E               [12] 4814 	inc	r6
      0018CC 80 E4            [24] 4815 	sjmp	00176$
      0018CE                       4816 00126$:
                                   4817 ;	calc.c:325: printstr("&\tand top 2\r\n");
      0018CE 7Dr63            [12] 4818 	mov	r5,#___str_19
      0018D0 7Es01            [12] 4819 	mov	r6,#(___str_19 >> 8)
      0018D2 7F 80            [12] 4820 	mov	r7,#0x80
                                   4821 ;	calc.c:50: return;
      0018D4                       4822 00179$:
                                   4823 ;	calc.c:48: for (; *s; s++) putchar(*s);
      0018D4 8D 82            [24] 4824 	mov	dpl,r5
      0018D6 8E 83            [24] 4825 	mov	dph,r6
      0018D8 8F F0            [24] 4826 	mov	b,r7
      0018DA 12r00r00         [24] 4827 	lcall	__gptrget
      0018DD FC               [12] 4828 	mov	r4,a
      0018DE 60 10            [24] 4829 	jz	00128$
      0018E0 7B 00            [12] 4830 	mov	r3,#0x00
      0018E2 8C 82            [24] 4831 	mov	dpl,r4
      0018E4 8B 83            [24] 4832 	mov	dph,r3
      0018E6 12r00r00         [24] 4833 	lcall	_putchar
      0018E9 0D               [12] 4834 	inc	r5
                                   4835 ;	calc.c:325: printstr("&\tand top 2\r\n");
      0018EA BD 00 E7         [24] 4836 	cjne	r5,#0x00,00179$
      0018ED 0E               [12] 4837 	inc	r6
      0018EE 80 E4            [24] 4838 	sjmp	00179$
      0018F0                       4839 00128$:
                                   4840 ;	calc.c:326: printstr("|\tor top 2\r\n");
      0018F0 7Dr71            [12] 4841 	mov	r5,#___str_20
      0018F2 7Es01            [12] 4842 	mov	r6,#(___str_20 >> 8)
      0018F4 7F 80            [12] 4843 	mov	r7,#0x80
                                   4844 ;	calc.c:50: return;
      0018F6                       4845 00182$:
                                   4846 ;	calc.c:48: for (; *s; s++) putchar(*s);
      0018F6 8D 82            [24] 4847 	mov	dpl,r5
      0018F8 8E 83            [24] 4848 	mov	dph,r6
      0018FA 8F F0            [24] 4849 	mov	b,r7
      0018FC 12r00r00         [24] 4850 	lcall	__gptrget
      0018FF FC               [12] 4851 	mov	r4,a
      001900 60 10            [24] 4852 	jz	00130$
      001902 7B 00            [12] 4853 	mov	r3,#0x00
      001904 8C 82            [24] 4854 	mov	dpl,r4
      001906 8B 83            [24] 4855 	mov	dph,r3
      001908 12r00r00         [24] 4856 	lcall	_putchar
      00190B 0D               [12] 4857 	inc	r5
                                   4858 ;	calc.c:326: printstr("|\tor top 2\r\n");
      00190C BD 00 E7         [24] 4859 	cjne	r5,#0x00,00182$
      00190F 0E               [12] 4860 	inc	r6
      001910 80 E4            [24] 4861 	sjmp	00182$
      001912                       4862 00130$:
                                   4863 ;	calc.c:327: printstr("^\txor top 2\r\n");
      001912 7Dr7E            [12] 4864 	mov	r5,#___str_21
      001914 7Es01            [12] 4865 	mov	r6,#(___str_21 >> 8)
      001916 7F 80            [12] 4866 	mov	r7,#0x80
                                   4867 ;	calc.c:50: return;
      001918                       4868 00185$:
                                   4869 ;	calc.c:48: for (; *s; s++) putchar(*s);
      001918 8D 82            [24] 4870 	mov	dpl,r5
      00191A 8E 83            [24] 4871 	mov	dph,r6
      00191C 8F F0            [24] 4872 	mov	b,r7
      00191E 12r00r00         [24] 4873 	lcall	__gptrget
      001921 FC               [12] 4874 	mov	r4,a
      001922 60 10            [24] 4875 	jz	00132$
      001924 7B 00            [12] 4876 	mov	r3,#0x00
      001926 8C 82            [24] 4877 	mov	dpl,r4
      001928 8B 83            [24] 4878 	mov	dph,r3
      00192A 12r00r00         [24] 4879 	lcall	_putchar
      00192D 0D               [12] 4880 	inc	r5
                                   4881 ;	calc.c:327: printstr("^\txor top 2\r\n");
      00192E BD 00 E7         [24] 4882 	cjne	r5,#0x00,00185$
      001931 0E               [12] 4883 	inc	r6
      001932 80 E4            [24] 4884 	sjmp	00185$
      001934                       4885 00132$:
                                   4886 ;	calc.c:328: printstr("~\tbitwise not top\r\n");
      001934 7Dr8C            [12] 4887 	mov	r5,#___str_22
      001936 7Es01            [12] 4888 	mov	r6,#(___str_22 >> 8)
      001938 7F 80            [12] 4889 	mov	r7,#0x80
                                   4890 ;	calc.c:50: return;
      00193A                       4891 00188$:
                                   4892 ;	calc.c:48: for (; *s; s++) putchar(*s);
      00193A 8D 82            [24] 4893 	mov	dpl,r5
      00193C 8E 83            [24] 4894 	mov	dph,r6
      00193E 8F F0            [24] 4895 	mov	b,r7
      001940 12r00r00         [24] 4896 	lcall	__gptrget
      001943 FC               [12] 4897 	mov	r4,a
      001944 60 10            [24] 4898 	jz	00134$
      001946 7B 00            [12] 4899 	mov	r3,#0x00
      001948 8C 82            [24] 4900 	mov	dpl,r4
      00194A 8B 83            [24] 4901 	mov	dph,r3
      00194C 12r00r00         [24] 4902 	lcall	_putchar
      00194F 0D               [12] 4903 	inc	r5
                                   4904 ;	calc.c:328: printstr("~\tbitwise not top\r\n");
      001950 BD 00 E7         [24] 4905 	cjne	r5,#0x00,00188$
      001953 0E               [12] 4906 	inc	r6
      001954 80 E4            [24] 4907 	sjmp	00188$
      001956                       4908 00134$:
                                   4909 ;	calc.c:329: printstr("?\thelp\r\n");
      001956 7DrA0            [12] 4910 	mov	r5,#___str_23
      001958 7Es01            [12] 4911 	mov	r6,#(___str_23 >> 8)
      00195A 7F 80            [12] 4912 	mov	r7,#0x80
                                   4913 ;	calc.c:50: return;
      00195C                       4914 00191$:
                                   4915 ;	calc.c:48: for (; *s; s++) putchar(*s);
      00195C 8D 82            [24] 4916 	mov	dpl,r5
      00195E 8E 83            [24] 4917 	mov	dph,r6
      001960 8F F0            [24] 4918 	mov	b,r7
      001962 12r00r00         [24] 4919 	lcall	__gptrget
      001965 FC               [12] 4920 	mov	r4,a
      001966 60 10            [24] 4921 	jz	00136$
      001968 7B 00            [12] 4922 	mov	r3,#0x00
      00196A 8C 82            [24] 4923 	mov	dpl,r4
      00196C 8B 83            [24] 4924 	mov	dph,r3
      00196E 12r00r00         [24] 4925 	lcall	_putchar
      001971 0D               [12] 4926 	inc	r5
                                   4927 ;	calc.c:329: printstr("?\thelp\r\n");
      001972 BD 00 E7         [24] 4928 	cjne	r5,#0x00,00191$
      001975 0E               [12] 4929 	inc	r6
      001976 80 E4            [24] 4930 	sjmp	00191$
      001978                       4931 00136$:
                                   4932 ;	calc.c:330: printstr("q\tquit\r\n");
      001978 7DrA9            [12] 4933 	mov	r5,#___str_24
      00197A 7Es01            [12] 4934 	mov	r6,#(___str_24 >> 8)
      00197C 7F 80            [12] 4935 	mov	r7,#0x80
                                   4936 ;	calc.c:50: return;
      00197E                       4937 00194$:
                                   4938 ;	calc.c:48: for (; *s; s++) putchar(*s);
      00197E 8D 82            [24] 4939 	mov	dpl,r5
      001980 8E 83            [24] 4940 	mov	dph,r6
      001982 8F F0            [24] 4941 	mov	b,r7
      001984 12r00r00         [24] 4942 	lcall	__gptrget
      001987 FC               [12] 4943 	mov	r4,a
      001988 60 10            [24] 4944 	jz	00138$
      00198A 7B 00            [12] 4945 	mov	r3,#0x00
      00198C 8C 82            [24] 4946 	mov	dpl,r4
      00198E 8B 83            [24] 4947 	mov	dph,r3
      001990 12r00r00         [24] 4948 	lcall	_putchar
      001993 0D               [12] 4949 	inc	r5
                                   4950 ;	calc.c:330: printstr("q\tquit\r\n");
      001994 BD 00 E7         [24] 4951 	cjne	r5,#0x00,00194$
      001997 0E               [12] 4952 	inc	r6
      001998 80 E4            [24] 4953 	sjmp	00194$
      00199A                       4954 00138$:
                                   4955 ;	calc.c:332: return 1;
      00199A 90 00 01         [24] 4956 	mov	dptr,#0x0001
                                   4957 ;	calc.c:333: }
      00199D 85*00 81         [24] 4958 	mov	sp,_bp
      0019A0 D0*00            [24] 4959 	pop	_bp
      0019A2 22               [24] 4960 	ret
                                   4961 ;------------------------------------------------------------
                                   4962 ;Allocation info for local variables in function 'main'
                                   4963 ;------------------------------------------------------------
                                   4964 ;input                     Allocated to registers r6 r7 
                                   4965 ;sloc0                     Allocated to stack - _bp +3
                                   4966 ;------------------------------------------------------------
                                   4967 ;	calc.c:362: void main(void) {
                                   4968 ;	-----------------------------------------
                                   4969 ;	 function main
                                   4970 ;	-----------------------------------------
      0019A3                       4971 _main:
                                   4972 ;	calc.c:365: c.base = 10;
      0019A3 90r00r0C         [24] 4973 	mov	dptr,#_c
      0019A6 74 0A            [12] 4974 	mov	a,#0x0a
      0019A8 F0               [24] 4975 	movx	@dptr,a
      0019A9 E4               [12] 4976 	clr	a
      0019AA A3               [24] 4977 	inc	dptr
      0019AB F0               [24] 4978 	movx	@dptr,a
                                   4979 ;	calc.c:366: c.acc = 0l;
      0019AC 90r00r0E         [24] 4980 	mov	dptr,#(_c + 0x0002)
      0019AF F0               [24] 4981 	movx	@dptr,a
      0019B0 A3               [24] 4982 	inc	dptr
      0019B1 F0               [24] 4983 	movx	@dptr,a
      0019B2 A3               [24] 4984 	inc	dptr
      0019B3 F0               [24] 4985 	movx	@dptr,a
      0019B4 A3               [24] 4986 	inc	dptr
      0019B5 F0               [24] 4987 	movx	@dptr,a
                                   4988 ;	calc.c:367: c.acc_valid = (char)0;
      0019B6 90r00r12         [24] 4989 	mov	dptr,#(_c + 0x0006)
      0019B9 F0               [24] 4990 	movx	@dptr,a
                                   4991 ;	calc.c:368: c.digit[0] = c.digit[1] = '\0';
      0019BA 90r00r14         [24] 4992 	mov	dptr,#(_c + 0x0008)
      0019BD F0               [24] 4993 	movx	@dptr,a
      0019BE 90r00r13         [24] 4994 	mov	dptr,#(_c + 0x0007)
      0019C1 F0               [24] 4995 	movx	@dptr,a
                                   4996 ;	calc.c:369: stack_init(&c.s);	
      0019C2 90r00r15         [24] 4997 	mov	dptr,#(_c + 0x0009)
      0019C5 75 F0 00         [24] 4998 	mov	b,#0x00
      0019C8 12r00r00         [24] 4999 	lcall	_stack_init
                                   5000 ;	calc.c:370: state_init(&s, STATE_START, STATE_FINAL, UNDEF, deltas, &c);
      0019CB 74r0C            [12] 5001 	mov	a,#_c
      0019CD C0 E0            [24] 5002 	push	acc
      0019CF 74s00            [12] 5003 	mov	a,#(_c >> 8)
      0019D1 C0 E0            [24] 5004 	push	acc
      0019D3 E4               [12] 5005 	clr	a
      0019D4 C0 E0            [24] 5006 	push	acc
      0019D6 74r18            [12] 5007 	mov	a,#_deltas
      0019D8 C0 E0            [24] 5008 	push	acc
      0019DA 74s00            [12] 5009 	mov	a,#(_deltas >> 8)
      0019DC C0 E0            [24] 5010 	push	acc
      0019DE E4               [12] 5011 	clr	a
      0019DF C0 E0            [24] 5012 	push	acc
      0019E1 C0 E0            [24] 5013 	push	acc
      0019E3 74 80            [12] 5014 	mov	a,#0x80
      0019E5 C0 E0            [24] 5015 	push	acc
      0019E7 74 03            [12] 5016 	mov	a,#0x03
      0019E9 C0 E0            [24] 5017 	push	acc
      0019EB E4               [12] 5018 	clr	a
      0019EC C0 E0            [24] 5019 	push	acc
      0019EE C0 E0            [24] 5020 	push	acc
      0019F0 C0 E0            [24] 5021 	push	acc
      0019F2 90r00r00         [24] 5022 	mov	dptr,#_s
      0019F5 75 F0 00         [24] 5023 	mov	b,#0x00
      0019F8 12r00r00         [24] 5024 	lcall	_state_init
      0019FB E5 81            [12] 5025 	mov	a,sp
      0019FD 24 F4            [12] 5026 	add	a,#0xf4
      0019FF F5 81            [12] 5027 	mov	sp,a
                                   5028 ;	calc.c:372: while (1) {
      001A01                       5029 00158$:
                                   5030 ;	calc.c:373: input = getchar();
      001A01 12r00r05         [24] 5031 	lcall	_getchar
      001A04 AE 82            [24] 5032 	mov	r6,dpl
      001A06 AF 83            [24] 5033 	mov	r7,dph
                                   5034 ;	calc.c:374: c.digit[0] = (char)input;
      001A08 8E 05            [24] 5035 	mov	ar5,r6
      001A0A 90r00r13         [24] 5036 	mov	dptr,#(_c + 0x0007)
      001A0D ED               [12] 5037 	mov	a,r5
      001A0E F0               [24] 5038 	movx	@dptr,a
                                   5039 ;	calc.c:375: (void)putchar(input);
      001A0F 8E 82            [24] 5040 	mov	dpl,r6
      001A11 8F 83            [24] 5041 	mov	dph,r7
      001A13 12r00r00         [24] 5042 	lcall	_putchar
                                   5043 ;	calc.c:376: if ((char)input == 'q') {
      001A16 BD 71 29         [24] 5044 	cjne	r5,#0x71,00155$
                                   5045 ;	calc.c:377: if (state_exec(&s, EVENT_TERM) <= 0) break;
      001A19 74 07            [12] 5046 	mov	a,#0x07
      001A1B C0 E0            [24] 5047 	push	acc
      001A1D E4               [12] 5048 	clr	a
      001A1E C0 E0            [24] 5049 	push	acc
      001A20 90r00r00         [24] 5050 	mov	dptr,#_s
      001A23 75 F0 00         [24] 5051 	mov	b,#0x00
      001A26 12r00r00         [24] 5052 	lcall	_state_exec
      001A29 AB 82            [24] 5053 	mov	r3,dpl
      001A2B AC 83            [24] 5054 	mov	r4,dph
      001A2D 15 81            [12] 5055 	dec	sp
      001A2F 15 81            [12] 5056 	dec	sp
      001A31 C3               [12] 5057 	clr	c
      001A32 E4               [12] 5058 	clr	a
      001A33 9B               [12] 5059 	subb	a,r3
      001A34 74 80            [12] 5060 	mov	a,#(0x00 ^ 0x80)
      001A36 8C F0            [24] 5061 	mov	b,r4
      001A38 63 F0 80         [24] 5062 	xrl	b,#0x80
      001A3B 95 F0            [12] 5063 	subb	a,b
      001A3D 40 C2            [24] 5064 	jc	00158$
      001A3F 02r1BrF6         [24] 5065 	ljmp	00159$
      001A42                       5066 00155$:
                                   5067 ;	calc.c:378: } else if ((char)input == '?') {
      001A42 BD 3F 29         [24] 5068 	cjne	r5,#0x3f,00152$
                                   5069 ;	calc.c:379: if (state_exec(&s, EVENT_HELP) <= 0) break;
      001A45 74 03            [12] 5070 	mov	a,#0x03
      001A47 C0 E0            [24] 5071 	push	acc
      001A49 E4               [12] 5072 	clr	a
      001A4A C0 E0            [24] 5073 	push	acc
      001A4C 90r00r00         [24] 5074 	mov	dptr,#_s
      001A4F 75 F0 00         [24] 5075 	mov	b,#0x00
      001A52 12r00r00         [24] 5076 	lcall	_state_exec
      001A55 AB 82            [24] 5077 	mov	r3,dpl
      001A57 AC 83            [24] 5078 	mov	r4,dph
      001A59 15 81            [12] 5079 	dec	sp
      001A5B 15 81            [12] 5080 	dec	sp
      001A5D C3               [12] 5081 	clr	c
      001A5E E4               [12] 5082 	clr	a
      001A5F 9B               [12] 5083 	subb	a,r3
      001A60 74 80            [12] 5084 	mov	a,#(0x00 ^ 0x80)
      001A62 8C F0            [24] 5085 	mov	b,r4
      001A64 63 F0 80         [24] 5086 	xrl	b,#0x80
      001A67 95 F0            [12] 5087 	subb	a,b
      001A69 40 96            [24] 5088 	jc	00158$
      001A6B 02r1BrF6         [24] 5089 	ljmp	00159$
      001A6E                       5090 00152$:
                                   5091 ;	calc.c:380: } else if ((char)input == 'i') {
      001A6E BD 69 2C         [24] 5092 	cjne	r5,#0x69,00149$
                                   5093 ;	calc.c:381: if (state_exec(&s, EVENT_RSTA_i) <= 0) break;
      001A71 74 05            [12] 5094 	mov	a,#0x05
      001A73 C0 E0            [24] 5095 	push	acc
      001A75 E4               [12] 5096 	clr	a
      001A76 C0 E0            [24] 5097 	push	acc
      001A78 90r00r00         [24] 5098 	mov	dptr,#_s
      001A7B 75 F0 00         [24] 5099 	mov	b,#0x00
      001A7E 12r00r00         [24] 5100 	lcall	_state_exec
      001A81 AB 82            [24] 5101 	mov	r3,dpl
      001A83 AC 83            [24] 5102 	mov	r4,dph
      001A85 15 81            [12] 5103 	dec	sp
      001A87 15 81            [12] 5104 	dec	sp
      001A89 C3               [12] 5105 	clr	c
      001A8A E4               [12] 5106 	clr	a
      001A8B 9B               [12] 5107 	subb	a,r3
      001A8C 74 80            [12] 5108 	mov	a,#(0x00 ^ 0x80)
      001A8E 8C F0            [24] 5109 	mov	b,r4
      001A90 63 F0 80         [24] 5110 	xrl	b,#0x80
      001A93 95 F0            [12] 5111 	subb	a,b
      001A95 50 03            [24] 5112 	jnc	00298$
      001A97 02r1Ar01         [24] 5113 	ljmp	00158$
      001A9A                       5114 00298$:
      001A9A 02r1BrF6         [24] 5115 	ljmp	00159$
      001A9D                       5116 00149$:
                                   5117 ;	calc.c:382: } else if ((char)input == 'I') {
      001A9D BD 49 2C         [24] 5118 	cjne	r5,#0x49,00146$
                                   5119 ;	calc.c:383: if (state_exec(&s, EVENT_RSTA_I) <= 0) break;
      001AA0 74 06            [12] 5120 	mov	a,#0x06
      001AA2 C0 E0            [24] 5121 	push	acc
      001AA4 E4               [12] 5122 	clr	a
      001AA5 C0 E0            [24] 5123 	push	acc
      001AA7 90r00r00         [24] 5124 	mov	dptr,#_s
      001AAA 75 F0 00         [24] 5125 	mov	b,#0x00
      001AAD 12r00r00         [24] 5126 	lcall	_state_exec
      001AB0 AB 82            [24] 5127 	mov	r3,dpl
      001AB2 AC 83            [24] 5128 	mov	r4,dph
      001AB4 15 81            [12] 5129 	dec	sp
      001AB6 15 81            [12] 5130 	dec	sp
      001AB8 C3               [12] 5131 	clr	c
      001AB9 E4               [12] 5132 	clr	a
      001ABA 9B               [12] 5133 	subb	a,r3
      001ABB 74 80            [12] 5134 	mov	a,#(0x00 ^ 0x80)
      001ABD 8C F0            [24] 5135 	mov	b,r4
      001ABF 63 F0 80         [24] 5136 	xrl	b,#0x80
      001AC2 95 F0            [12] 5137 	subb	a,b
      001AC4 50 03            [24] 5138 	jnc	00301$
      001AC6 02r1Ar01         [24] 5139 	ljmp	00158$
      001AC9                       5140 00301$:
      001AC9 02r1BrF6         [24] 5141 	ljmp	00159$
      001ACC                       5142 00146$:
                                   5143 ;	calc.c:384: } else if (((char)input == 'h') || ((char)input == 'H') || ((char)input == 'o') || ((char)input == 'O')) {
      001ACC E4               [12] 5144 	clr	a
      001ACD BD 68 01         [24] 5145 	cjne	r5,#0x68,00302$
      001AD0 04               [12] 5146 	inc	a
      001AD1                       5147 00302$:
      001AD1 FC               [12] 5148 	mov	r4,a
      001AD2 70 0F            [24] 5149 	jnz	00139$
      001AD4 BD 48 01         [24] 5150 	cjne	r5,#0x48,00305$
      001AD7 04               [12] 5151 	inc	a
      001AD8                       5152 00305$:
      001AD8 FB               [12] 5153 	mov	r3,a
      001AD9 70 08            [24] 5154 	jnz	00139$
      001ADB BD 6F 02         [24] 5155 	cjne	r5,#0x6f,00308$
      001ADE 80 03            [24] 5156 	sjmp	00139$
      001AE0                       5157 00308$:
      001AE0 BD 4F 2C         [24] 5158 	cjne	r5,#0x4f,00140$
      001AE3                       5159 00139$:
                                   5160 ;	calc.c:385: if (state_exec(&s, EVENT_BASE) <= 0) break;
      001AE3 74 04            [12] 5161 	mov	a,#0x04
      001AE5 C0 E0            [24] 5162 	push	acc
      001AE7 E4               [12] 5163 	clr	a
      001AE8 C0 E0            [24] 5164 	push	acc
      001AEA 90r00r00         [24] 5165 	mov	dptr,#_s
      001AED 75 F0 00         [24] 5166 	mov	b,#0x00
      001AF0 12r00r00         [24] 5167 	lcall	_state_exec
      001AF3 AF 82            [24] 5168 	mov	r7,dpl
      001AF5 AE 83            [24] 5169 	mov	r6,dph
      001AF7 15 81            [12] 5170 	dec	sp
      001AF9 15 81            [12] 5171 	dec	sp
      001AFB C3               [12] 5172 	clr	c
      001AFC E4               [12] 5173 	clr	a
      001AFD 9F               [12] 5174 	subb	a,r7
      001AFE 74 80            [12] 5175 	mov	a,#(0x00 ^ 0x80)
      001B00 8E F0            [24] 5176 	mov	b,r6
      001B02 63 F0 80         [24] 5177 	xrl	b,#0x80
      001B05 95 F0            [12] 5178 	subb	a,b
      001B07 50 03            [24] 5179 	jnc	00311$
      001B09 02r1Ar01         [24] 5180 	ljmp	00158$
      001B0C                       5181 00311$:
      001B0C 02r1BrF6         [24] 5182 	ljmp	00159$
      001B0F                       5183 00140$:
                                   5184 ;	calc.c:386: } else if (isxdigit(input)) {
      001B0F 8E 82            [24] 5185 	mov	dpl,r6
      001B11 8F 83            [24] 5186 	mov	dph,r7
      001B13 C0 05            [24] 5187 	push	ar5
      001B15 C0 04            [24] 5188 	push	ar4
      001B17 C0 03            [24] 5189 	push	ar3
      001B19 12r00r00         [24] 5190 	lcall	_isxdigit
      001B1C E5 82            [12] 5191 	mov	a,dpl
      001B1E 85 83 F0         [24] 5192 	mov	b,dph
      001B21 D0 03            [24] 5193 	pop	ar3
      001B23 D0 04            [24] 5194 	pop	ar4
      001B25 D0 05            [24] 5195 	pop	ar5
      001B27 45 F0            [12] 5196 	orl	a,b
      001B29 60 2C            [24] 5197 	jz	00137$
                                   5198 ;	calc.c:387: if (state_exec(&s, EVENT_DIGIT) <= 0) break;
      001B2B 74 01            [12] 5199 	mov	a,#0x01
      001B2D C0 E0            [24] 5200 	push	acc
      001B2F E4               [12] 5201 	clr	a
      001B30 C0 E0            [24] 5202 	push	acc
      001B32 90r00r00         [24] 5203 	mov	dptr,#_s
      001B35 75 F0 00         [24] 5204 	mov	b,#0x00
      001B38 12r00r00         [24] 5205 	lcall	_state_exec
      001B3B AE 82            [24] 5206 	mov	r6,dpl
      001B3D AF 83            [24] 5207 	mov	r7,dph
      001B3F 15 81            [12] 5208 	dec	sp
      001B41 15 81            [12] 5209 	dec	sp
      001B43 C3               [12] 5210 	clr	c
      001B44 E4               [12] 5211 	clr	a
      001B45 9E               [12] 5212 	subb	a,r6
      001B46 74 80            [12] 5213 	mov	a,#(0x00 ^ 0x80)
      001B48 8F F0            [24] 5214 	mov	b,r7
      001B4A 63 F0 80         [24] 5215 	xrl	b,#0x80
      001B4D 95 F0            [12] 5216 	subb	a,b
      001B4F 50 03            [24] 5217 	jnc	00313$
      001B51 02r1Ar01         [24] 5218 	ljmp	00158$
      001B54                       5219 00313$:
      001B54 02r1BrF6         [24] 5220 	ljmp	00159$
      001B57                       5221 00137$:
                                   5222 ;	calc.c:389: ((char)input == 'h') || ((char)input == 'H') ||
      001B57 EC               [12] 5223 	mov	a,r4
      001B58 70 4C            [24] 5224 	jnz	00117$
      001B5A EB               [12] 5225 	mov	a,r3
      001B5B 70 49            [24] 5226 	jnz	00117$
                                   5227 ;	calc.c:390: ((char)input == 'p') || ((char)input == 'P') ||
      001B5D BD 70 02         [24] 5228 	cjne	r5,#0x70,00316$
      001B60 80 44            [24] 5229 	sjmp	00117$
      001B62                       5230 00316$:
      001B62 BD 50 02         [24] 5231 	cjne	r5,#0x50,00317$
      001B65 80 3F            [24] 5232 	sjmp	00117$
      001B67                       5233 00317$:
                                   5234 ;	calc.c:391: ((char)input == '.') || ((char)input == 'v') || ((char)input == 'V') ||
      001B67 BD 2E 02         [24] 5235 	cjne	r5,#0x2e,00318$
      001B6A 80 3A            [24] 5236 	sjmp	00117$
      001B6C                       5237 00318$:
      001B6C BD 76 02         [24] 5238 	cjne	r5,#0x76,00319$
      001B6F 80 35            [24] 5239 	sjmp	00117$
      001B71                       5240 00319$:
      001B71 BD 56 02         [24] 5241 	cjne	r5,#0x56,00320$
      001B74 80 30            [24] 5242 	sjmp	00117$
      001B76                       5243 00320$:
                                   5244 ;	calc.c:392: ((char)input == 'x') ||
      001B76 BD 78 02         [24] 5245 	cjne	r5,#0x78,00321$
      001B79 80 2B            [24] 5246 	sjmp	00117$
      001B7B                       5247 00321$:
                                   5248 ;	calc.c:393: ((char)input == '+') ||
      001B7B BD 2B 02         [24] 5249 	cjne	r5,#0x2b,00322$
      001B7E 80 26            [24] 5250 	sjmp	00117$
      001B80                       5251 00322$:
                                   5252 ;	calc.c:394: ((char)input == '-') ||
      001B80 BD 2D 02         [24] 5253 	cjne	r5,#0x2d,00323$
      001B83 80 21            [24] 5254 	sjmp	00117$
      001B85                       5255 00323$:
                                   5256 ;	calc.c:395: ((char)input == '*') ||
      001B85 BD 2A 02         [24] 5257 	cjne	r5,#0x2a,00324$
      001B88 80 1C            [24] 5258 	sjmp	00117$
      001B8A                       5259 00324$:
                                   5260 ;	calc.c:396: ((char)input == '/') ||
      001B8A BD 2F 02         [24] 5261 	cjne	r5,#0x2f,00325$
      001B8D 80 17            [24] 5262 	sjmp	00117$
      001B8F                       5263 00325$:
                                   5264 ;	calc.c:397: ((char)input == '%') ||
      001B8F BD 25 02         [24] 5265 	cjne	r5,#0x25,00326$
      001B92 80 12            [24] 5266 	sjmp	00117$
      001B94                       5267 00326$:
                                   5268 ;	calc.c:398: ((char)input == '&') ||
      001B94 BD 26 02         [24] 5269 	cjne	r5,#0x26,00327$
      001B97 80 0D            [24] 5270 	sjmp	00117$
      001B99                       5271 00327$:
                                   5272 ;	calc.c:399: ((char)input == '|') ||
      001B99 BD 7C 02         [24] 5273 	cjne	r5,#0x7c,00328$
      001B9C 80 08            [24] 5274 	sjmp	00117$
      001B9E                       5275 00328$:
                                   5276 ;	calc.c:400: ((char)input == '^') ||
      001B9E BD 5E 02         [24] 5277 	cjne	r5,#0x5e,00329$
      001BA1 80 03            [24] 5278 	sjmp	00117$
      001BA3                       5279 00329$:
                                   5280 ;	calc.c:401: ((char)input == '~')
      001BA3 BD 7E 29         [24] 5281 	cjne	r5,#0x7e,00118$
      001BA6                       5282 00117$:
                                   5283 ;	calc.c:403: if (state_exec(&s, EVENT_OP) <= 0) break;
      001BA6 74 02            [12] 5284 	mov	a,#0x02
      001BA8 C0 E0            [24] 5285 	push	acc
      001BAA E4               [12] 5286 	clr	a
      001BAB C0 E0            [24] 5287 	push	acc
      001BAD 90r00r00         [24] 5288 	mov	dptr,#_s
      001BB0 75 F0 00         [24] 5289 	mov	b,#0x00
      001BB3 12r00r00         [24] 5290 	lcall	_state_exec
      001BB6 AE 82            [24] 5291 	mov	r6,dpl
      001BB8 AF 83            [24] 5292 	mov	r7,dph
      001BBA 15 81            [12] 5293 	dec	sp
      001BBC 15 81            [12] 5294 	dec	sp
      001BBE C3               [12] 5295 	clr	c
      001BBF E4               [12] 5296 	clr	a
      001BC0 9E               [12] 5297 	subb	a,r6
      001BC1 74 80            [12] 5298 	mov	a,#(0x00 ^ 0x80)
      001BC3 8F F0            [24] 5299 	mov	b,r7
      001BC5 63 F0 80         [24] 5300 	xrl	b,#0x80
      001BC8 95 F0            [12] 5301 	subb	a,b
      001BCA 50 2A            [24] 5302 	jnc	00159$
      001BCC 02r1Ar01         [24] 5303 	ljmp	00158$
      001BCF                       5304 00118$:
                                   5305 ;	calc.c:405: if (state_exec(&s, EVENT_DELIM) <= 0) break;
      001BCF E4               [12] 5306 	clr	a
      001BD0 C0 E0            [24] 5307 	push	acc
      001BD2 C0 E0            [24] 5308 	push	acc
      001BD4 90r00r00         [24] 5309 	mov	dptr,#_s
      001BD7 75 F0 00         [24] 5310 	mov	b,#0x00
      001BDA 12r00r00         [24] 5311 	lcall	_state_exec
      001BDD AE 82            [24] 5312 	mov	r6,dpl
      001BDF AF 83            [24] 5313 	mov	r7,dph
      001BE1 15 81            [12] 5314 	dec	sp
      001BE3 15 81            [12] 5315 	dec	sp
      001BE5 C3               [12] 5316 	clr	c
      001BE6 E4               [12] 5317 	clr	a
      001BE7 9E               [12] 5318 	subb	a,r6
      001BE8 74 80            [12] 5319 	mov	a,#(0x00 ^ 0x80)
      001BEA 8F F0            [24] 5320 	mov	b,r7
      001BEC 63 F0 80         [24] 5321 	xrl	b,#0x80
      001BEF 95 F0            [12] 5322 	subb	a,b
      001BF1 50 03            [24] 5323 	jnc	00333$
      001BF3 02r1Ar01         [24] 5324 	ljmp	00158$
      001BF6                       5325 00333$:
      001BF6                       5326 00159$:
                                   5327 ;	calc.c:411: __endasm;
      001BF6 43 87 02         [24] 5328 	orl	pcon, #2
                                   5329 ;	calc.c:412: }
      001BF9 22               [24] 5330 	ret
                                   5331 	.area CSEG    (CODE)
                                   5332 	.area CONST   (CODE)
                                   5333 	.area CONST   (CODE)
      000000                       5334 ___str_0:
      000000 0D                    5335 	.db 0x0d
      000001 0A                    5336 	.db 0x0a
      000002 00                    5337 	.db 0x00
                                   5338 	.area CSEG    (CODE)
                                   5339 	.area CONST   (CODE)
      000003                       5340 ___str_1:
      000003 73 74 61 63 6B 20 75  5341 	.ascii "stack underflow"
             6E 64 65 72 66 6C 6F
             77
      000012 0D                    5342 	.db 0x0d
      000013 0A                    5343 	.db 0x0a
      000014 00                    5344 	.db 0x00
                                   5345 	.area CSEG    (CODE)
                                   5346 	.area CONST   (CODE)
      000015                       5347 ___str_2:
      000015 0D                    5348 	.db 0x0d
      000016 0A                    5349 	.db 0x0a
      000017 73 74 61 63 6B 20 75  5350 	.ascii "stack underflow"
             6E 64 65 72 66 6C 6F
             77
      000026 0D                    5351 	.db 0x0d
      000027 0A                    5352 	.db 0x0a
      000028 00                    5353 	.db 0x00
                                   5354 	.area CSEG    (CODE)
                                   5355 	.area CONST   (CODE)
      000029                       5356 ___str_3:
      000029 0D                    5357 	.db 0x0d
      00002A 0A                    5358 	.db 0x0a
      00002B 64 69 76 69 73 69 6F  5359 	.ascii "division by zero"
             6E 20 62 79 20 7A 65
             72 6F
      00003B 0D                    5360 	.db 0x0d
      00003C 0A                    5361 	.db 0x0a
      00003D 00                    5362 	.db 0x00
                                   5363 	.area CSEG    (CODE)
                                   5364 	.area CONST   (CODE)
      00003E                       5365 ___str_4:
      00003E 0D                    5366 	.db 0x0d
      00003F 0A                    5367 	.db 0x0a
      000040 73 74 61 63 6B 20 6F  5368 	.ascii "stack overflow"
             76 65 72 66 6C 6F 77
      00004E 0D                    5369 	.db 0x0d
      00004F 0A                    5370 	.db 0x0a
      000050 00                    5371 	.db 0x00
                                   5372 	.area CSEG    (CODE)
                                   5373 	.area CONST   (CODE)
      000051                       5374 ___str_5:
      000051 0D                    5375 	.db 0x0d
      000052 0A                    5376 	.db 0x0a
      000053 62 61 73 65 20 3D 20  5377 	.ascii "base = %d, acc = %ld / %0.8lx, acc_valid = %d"
             25 64 2C 20 61 63 63
             20 3D 20 25 6C 64 20
             2F 20 25 30 2E 38 6C
             78 2C 20 61 63 63 5F
             76 61 6C 69 64 20 3D
             20 25 64
      000080 0D                    5378 	.db 0x0d
      000081 0A                    5379 	.db 0x0a
      000082 0D                    5380 	.db 0x0d
      000083 0A                    5381 	.db 0x0a
      000084 00                    5382 	.db 0x00
                                   5383 	.area CSEG    (CODE)
                                   5384 	.area CONST   (CODE)
      000085                       5385 ___str_6:
      000085 48 68 4F 6F           5386 	.ascii "HhOo"
      000089 09                    5387 	.db 0x09
      00008A 62 61 73 65 20 31 36  5388 	.ascii "base 16 10 8 2"
             20 31 30 20 38 20 32
      000098 0D                    5389 	.db 0x0d
      000099 0A                    5390 	.db 0x0a
      00009A 00                    5391 	.db 0x00
                                   5392 	.area CSEG    (CODE)
                                   5393 	.area CONST   (CODE)
      00009B                       5394 ___str_7:
      00009B 70                    5395 	.ascii "p"
      00009C 09                    5396 	.db 0x09
      00009D 70 65 65 6B 20 74 6F  5397 	.ascii "peek top"
             70
      0000A5 0D                    5398 	.db 0x0d
      0000A6 0A                    5399 	.db 0x0a
      0000A7 00                    5400 	.db 0x00
                                   5401 	.area CSEG    (CODE)
                                   5402 	.area CONST   (CODE)
      0000A8                       5403 ___str_8:
      0000A8 50                    5404 	.ascii "P"
      0000A9 09                    5405 	.db 0x09
      0000AA 70 72 69 6E 74 20 73  5406 	.ascii "print stack"
             74 61 63 6B
      0000B5 0D                    5407 	.db 0x0d
      0000B6 0A                    5408 	.db 0x0a
      0000B7 00                    5409 	.db 0x00
                                   5410 	.area CSEG    (CODE)
                                   5411 	.area CONST   (CODE)
      0000B8                       5412 ___str_9:
      0000B8 76 2E                 5413 	.ascii "v."
      0000BA 09                    5414 	.db 0x09
      0000BB 70 6F 70 20 74 6F 70  5415 	.ascii "pop top"
      0000C2 0D                    5416 	.db 0x0d
      0000C3 0A                    5417 	.db 0x0a
      0000C4 00                    5418 	.db 0x00
                                   5419 	.area CSEG    (CODE)
                                   5420 	.area CONST   (CODE)
      0000C5                       5421 ___str_10:
      0000C5 56                    5422 	.ascii "V"
      0000C6 09                    5423 	.db 0x09
      0000C7 70 6F 70 20 61 6C 6C  5424 	.ascii "pop all"
      0000CE 0D                    5425 	.db 0x0d
      0000CF 0A                    5426 	.db 0x0a
      0000D0 00                    5427 	.db 0x00
                                   5428 	.area CSEG    (CODE)
                                   5429 	.area CONST   (CODE)
      0000D1                       5430 ___str_11:
      0000D1 69                    5431 	.ascii "i"
      0000D2 09                    5432 	.db 0x09
      0000D3 72 65 73 65 74 20 61  5433 	.ascii "reset acc"
             63 63
      0000DC 0D                    5434 	.db 0x0d
      0000DD 0A                    5435 	.db 0x0a
      0000DE 00                    5436 	.db 0x00
                                   5437 	.area CSEG    (CODE)
                                   5438 	.area CONST   (CODE)
      0000DF                       5439 ___str_12:
      0000DF 49                    5440 	.ascii "I"
      0000E0 09                    5441 	.db 0x09
      0000E1 72 65 73 65 74 20 61  5442 	.ascii "reset and discard acc"
             6E 64 20 64 69 73 63
             61 72 64 20 61 63 63
      0000F6 0D                    5443 	.db 0x0d
      0000F7 0A                    5444 	.db 0x0a
      0000F8 00                    5445 	.db 0x00
                                   5446 	.area CSEG    (CODE)
                                   5447 	.area CONST   (CODE)
      0000F9                       5448 ___str_13:
      0000F9 78                    5449 	.ascii "x"
      0000FA 09                    5450 	.db 0x09
      0000FB 65 78 63 68 61 6E 67  5451 	.ascii "exchange top 2"
             65 20 74 6F 70 20 32
      000109 0D                    5452 	.db 0x0d
      00010A 0A                    5453 	.db 0x0a
      00010B 00                    5454 	.db 0x00
                                   5455 	.area CSEG    (CODE)
                                   5456 	.area CONST   (CODE)
      00010C                       5457 ___str_14:
      00010C 2B                    5458 	.ascii "+"
      00010D 09                    5459 	.db 0x09
      00010E 61 64 64 20 74 6F 70  5460 	.ascii "add top 2"
             20 32
      000117 0D                    5461 	.db 0x0d
      000118 0A                    5462 	.db 0x0a
      000119 00                    5463 	.db 0x00
                                   5464 	.area CSEG    (CODE)
                                   5465 	.area CONST   (CODE)
      00011A                       5466 ___str_15:
      00011A 2D                    5467 	.ascii "-"
      00011B 09                    5468 	.db 0x09
      00011C 73 75 62 74 72 61 63  5469 	.ascii "subtract top 2"
             74 20 74 6F 70 20 32
      00012A 0D                    5470 	.db 0x0d
      00012B 0A                    5471 	.db 0x0a
      00012C 00                    5472 	.db 0x00
                                   5473 	.area CSEG    (CODE)
                                   5474 	.area CONST   (CODE)
      00012D                       5475 ___str_16:
      00012D 2A                    5476 	.ascii "*"
      00012E 09                    5477 	.db 0x09
      00012F 6D 75 6C 74 69 70 6C  5478 	.ascii "multiply top 2"
             79 20 74 6F 70 20 32
      00013D 0D                    5479 	.db 0x0d
      00013E 0A                    5480 	.db 0x0a
      00013F 00                    5481 	.db 0x00
                                   5482 	.area CSEG    (CODE)
                                   5483 	.area CONST   (CODE)
      000140                       5484 ___str_17:
      000140 2F                    5485 	.ascii "/"
      000141 09                    5486 	.db 0x09
      000142 64 69 76 69 64 65 20  5487 	.ascii "divide top 2"
             74 6F 70 20 32
      00014E 0D                    5488 	.db 0x0d
      00014F 0A                    5489 	.db 0x0a
      000150 00                    5490 	.db 0x00
                                   5491 	.area CSEG    (CODE)
                                   5492 	.area CONST   (CODE)
      000151                       5493 ___str_18:
      000151 25                    5494 	.ascii "%"
      000152 09                    5495 	.db 0x09
      000153 6D 6F 64 75 6C 75 73  5496 	.ascii "modulus top 2"
             20 74 6F 70 20 32
      000160 0D                    5497 	.db 0x0d
      000161 0A                    5498 	.db 0x0a
      000162 00                    5499 	.db 0x00
                                   5500 	.area CSEG    (CODE)
                                   5501 	.area CONST   (CODE)
      000163                       5502 ___str_19:
      000163 26                    5503 	.ascii "&"
      000164 09                    5504 	.db 0x09
      000165 61 6E 64 20 74 6F 70  5505 	.ascii "and top 2"
             20 32
      00016E 0D                    5506 	.db 0x0d
      00016F 0A                    5507 	.db 0x0a
      000170 00                    5508 	.db 0x00
                                   5509 	.area CSEG    (CODE)
                                   5510 	.area CONST   (CODE)
      000171                       5511 ___str_20:
      000171 7C                    5512 	.ascii "|"
      000172 09                    5513 	.db 0x09
      000173 6F 72 20 74 6F 70 20  5514 	.ascii "or top 2"
             32
      00017B 0D                    5515 	.db 0x0d
      00017C 0A                    5516 	.db 0x0a
      00017D 00                    5517 	.db 0x00
                                   5518 	.area CSEG    (CODE)
                                   5519 	.area CONST   (CODE)
      00017E                       5520 ___str_21:
      00017E 5E                    5521 	.ascii "^"
      00017F 09                    5522 	.db 0x09
      000180 78 6F 72 20 74 6F 70  5523 	.ascii "xor top 2"
             20 32
      000189 0D                    5524 	.db 0x0d
      00018A 0A                    5525 	.db 0x0a
      00018B 00                    5526 	.db 0x00
                                   5527 	.area CSEG    (CODE)
                                   5528 	.area CONST   (CODE)
      00018C                       5529 ___str_22:
      00018C 7E                    5530 	.ascii "~"
      00018D 09                    5531 	.db 0x09
      00018E 62 69 74 77 69 73 65  5532 	.ascii "bitwise not top"
             20 6E 6F 74 20 74 6F
             70
      00019D 0D                    5533 	.db 0x0d
      00019E 0A                    5534 	.db 0x0a
      00019F 00                    5535 	.db 0x00
                                   5536 	.area CSEG    (CODE)
                                   5537 	.area CONST   (CODE)
      0001A0                       5538 ___str_23:
      0001A0 3F                    5539 	.ascii "?"
      0001A1 09                    5540 	.db 0x09
      0001A2 68 65 6C 70           5541 	.ascii "help"
      0001A6 0D                    5542 	.db 0x0d
      0001A7 0A                    5543 	.db 0x0a
      0001A8 00                    5544 	.db 0x00
                                   5545 	.area CSEG    (CODE)
                                   5546 	.area CONST   (CODE)
      0001A9                       5547 ___str_24:
      0001A9 71                    5548 	.ascii "q"
      0001AA 09                    5549 	.db 0x09
      0001AB 71 75 69 74           5550 	.ascii "quit"
      0001AF 0D                    5551 	.db 0x0d
      0001B0 0A                    5552 	.db 0x0a
      0001B1 00                    5553 	.db 0x00
                                   5554 	.area CSEG    (CODE)
                                   5555 	.area CONST   (CODE)
      0001B2                       5556 ___str_25:
      0001B2 50 54 20 25 30 2E 38  5557 	.ascii "PT %0.8lx"
             6C 78
      0001BB 0D                    5558 	.db 0x0d
      0001BC 0A                    5559 	.db 0x0a
      0001BD 00                    5560 	.db 0x00
                                   5561 	.area CSEG    (CODE)
                                   5562 	.area CONST   (CODE)
      0001BE                       5563 ___str_26:
      0001BE 50 54 20 25 6C 64     5564 	.ascii "PT %ld"
      0001C4 0D                    5565 	.db 0x0d
      0001C5 0A                    5566 	.db 0x0a
      0001C6 00                    5567 	.db 0x00
                                   5568 	.area CSEG    (CODE)
                                   5569 	.area CONST   (CODE)
      0001C7                       5570 ___str_27:
      0001C7 50 41 20 25 30 2E 38  5571 	.ascii "PA %0.8lx"
             6C 78
      0001D0 0D                    5572 	.db 0x0d
      0001D1 0A                    5573 	.db 0x0a
      0001D2 00                    5574 	.db 0x00
                                   5575 	.area CSEG    (CODE)
                                   5576 	.area CONST   (CODE)
      0001D3                       5577 ___str_28:
      0001D3 50 41 20 25 6C 64     5578 	.ascii "PA %ld"
      0001D9 0D                    5579 	.db 0x0d
      0001DA 0A                    5580 	.db 0x0a
      0001DB 00                    5581 	.db 0x00
                                   5582 	.area CSEG    (CODE)
                                   5583 	.area CONST   (CODE)
      0001DC                       5584 ___str_29:
      0001DC 56 54 20 25 30 2E 38  5585 	.ascii "VT %0.8lx"
             6C 78
      0001E5 0D                    5586 	.db 0x0d
      0001E6 0A                    5587 	.db 0x0a
      0001E7 00                    5588 	.db 0x00
                                   5589 	.area CSEG    (CODE)
                                   5590 	.area CONST   (CODE)
      0001E8                       5591 ___str_30:
      0001E8 56 54 20 25 6C 64     5592 	.ascii "VT %ld"
      0001EE 0D                    5593 	.db 0x0d
      0001EF 0A                    5594 	.db 0x0a
      0001F0 00                    5595 	.db 0x00
                                   5596 	.area CSEG    (CODE)
                                   5597 	.area CONST   (CODE)
      0001F1                       5598 ___str_31:
      0001F1 56 41 20 25 30 2E 38  5599 	.ascii "VA %0.8lx"
             6C 78
      0001FA 0D                    5600 	.db 0x0d
      0001FB 0A                    5601 	.db 0x0a
      0001FC 00                    5602 	.db 0x00
                                   5603 	.area CSEG    (CODE)
                                   5604 	.area CONST   (CODE)
      0001FD                       5605 ___str_32:
      0001FD 56 41 20 25 6C 64     5606 	.ascii "VA %ld"
      000203 0D                    5607 	.db 0x0d
      000204 0A                    5608 	.db 0x0a
      000205 00                    5609 	.db 0x00
                                   5610 	.area CSEG    (CODE)
                                   5611 	.area XINIT   (CODE)
      000000                       5612 __xinit__hexp:
      000000rB2s01 80              5613 	.byte ___str_25, (___str_25 >> 8),#0x80
      000003                       5614 __xinit__decp:
      000003rBEs01 80              5615 	.byte ___str_26, (___str_26 >> 8),#0x80
      000006                       5616 __xinit__hexP:
      000006rC7s01 80              5617 	.byte ___str_27, (___str_27 >> 8),#0x80
      000009                       5618 __xinit__decP:
      000009rD3s01 80              5619 	.byte ___str_28, (___str_28 >> 8),#0x80
      00000C                       5620 __xinit__hexv:
      00000CrDCs01 80              5621 	.byte ___str_29, (___str_29 >> 8),#0x80
      00000F                       5622 __xinit__decv:
      00000FrE8s01 80              5623 	.byte ___str_30, (___str_30 >> 8),#0x80
      000012                       5624 __xinit__hexV:
      000012rF1s01 80              5625 	.byte ___str_31, (___str_31 >> 8),#0x80
      000015                       5626 __xinit__decV:
      000015rFDs01 80              5627 	.byte ___str_32, (___str_32 >> 8),#0x80
      000018                       5628 __xinit__deltas:
      000018 00 00                 5629 	.byte #0x00, #0x00	;  0
      00001A 00 00                 5630 	.byte #0x00, #0x00	;  0
      00001C 00 00                 5631 	.byte #0x00, #0x00	;  0
      00001E 00 00                 5632 	.byte #0x00,#0x00
      000020 00 00                 5633 	.byte #0x00,#0x00
      000022 00 00                 5634 	.byte #0x00, #0x00	;  0
      000024 01 00                 5635 	.byte #0x01, #0x00	;  1
      000026 02 00                 5636 	.byte #0x02, #0x00	;  2
      000028 00 00                 5637 	.byte #0x00,#0x00
      00002Ar22s00                 5638 	.byte _accumulate, (_accumulate >> 8)
      00002C 00 00                 5639 	.byte #0x00, #0x00	;  0
      00002E 02 00                 5640 	.byte #0x02, #0x00	;  2
      000030 01 00                 5641 	.byte #0x01, #0x00	;  1
      000032 00 00                 5642 	.byte #0x00,#0x00
      000034rCAs03                 5643 	.byte _operator, (_operator >> 8)
      000036 01 00                 5644 	.byte #0x01, #0x00	;  1
      000038 00 00                 5645 	.byte #0x00, #0x00	;  0
      00003A 00 00                 5646 	.byte #0x00, #0x00	;  0
      00003C 00 00                 5647 	.byte #0x00,#0x00
      00003E 00 00                 5648 	.byte #0x00,#0x00
      000040 01 00                 5649 	.byte #0x01, #0x00	;  1
      000042 02 00                 5650 	.byte #0x02, #0x00	;  2
      000044 01 00                 5651 	.byte #0x01, #0x00	;  1
      000046 00 00                 5652 	.byte #0x00,#0x00
      000048rCAs03                 5653 	.byte _operator, (_operator >> 8)
      00004A 01 00                 5654 	.byte #0x01, #0x00	;  1
      00004C 01 00                 5655 	.byte #0x01, #0x00	;  1
      00004E 02 00                 5656 	.byte #0x02, #0x00	;  2
      000050 00 00                 5657 	.byte #0x00,#0x00
      000052r22s00                 5658 	.byte _accumulate, (_accumulate >> 8)
      000054 02 00                 5659 	.byte #0x02, #0x00	;  2
      000056 00 00                 5660 	.byte #0x00, #0x00	;  0
      000058 00 00                 5661 	.byte #0x00, #0x00	;  0
      00005A 00 00                 5662 	.byte #0x00,#0x00
      00005Cr6Ds14                 5663 	.byte _push_acc, (_push_acc >> 8)
      00005E 02 00                 5664 	.byte #0x02, #0x00	;  2
      000060 06 00                 5665 	.byte #0x06, #0x00	;  6
      000062 00 00                 5666 	.byte #0x00, #0x00	;  0
      000064 00 00                 5667 	.byte #0x00,#0x00
      000066r7Bs15                 5668 	.byte _reset_acc, (_reset_acc >> 8)
      000068 02 00                 5669 	.byte #0x02, #0x00	;  2
      00006A 01 00                 5670 	.byte #0x01, #0x00	;  1
      00006C 02 00                 5671 	.byte #0x02, #0x00	;  2
      00006E 00 00                 5672 	.byte #0x00,#0x00
      000070r22s00                 5673 	.byte _accumulate, (_accumulate >> 8)
      000072 02 00                 5674 	.byte #0x02, #0x00	;  2
      000074 02 00                 5675 	.byte #0x02, #0x00	;  2
      000076 01 00                 5676 	.byte #0x01, #0x00	;  1
      000078 00 00                 5677 	.byte #0x00,#0x00
      00007Ar6Ds14                 5678 	.byte _push_acc, (_push_acc >> 8)
      00007C FF 7F                 5679 	.byte #0xff, #0x7f	;  32767
      00007E 05 00                 5680 	.byte #0x05, #0x00	;  5
      000080 FF 7F                 5681 	.byte #0xff, #0x7f	;  32767
      000082 00 00                 5682 	.byte #0x00,#0x00
      000084r7Bs15                 5683 	.byte _reset_acc, (_reset_acc >> 8)
      000086 FF 7F                 5684 	.byte #0xff, #0x7f	;  32767
      000088 06 00                 5685 	.byte #0x06, #0x00	;  6
      00008A FF 7F                 5686 	.byte #0xff, #0x7f	;  32767
      00008C 00 00                 5687 	.byte #0x00,#0x00
      00008E 00 00                 5688 	.byte #0x00,#0x00
      000090 FF 7F                 5689 	.byte #0xff, #0x7f	;  32767
      000092 04 00                 5690 	.byte #0x04, #0x00	;  4
      000094 FF 7F                 5691 	.byte #0xff, #0x7f	;  32767
      000096 00 00                 5692 	.byte #0x00,#0x00
      000098rE5s15                 5693 	.byte _reset_base, (_reset_base >> 8)
      00009A FF 7F                 5694 	.byte #0xff, #0x7f	;  32767
      00009C 03 00                 5695 	.byte #0x03, #0x00	;  3
      00009E FF 7F                 5696 	.byte #0xff, #0x7f	;  32767
      0000A0 00 00                 5697 	.byte #0x00,#0x00
      0000A2r63s16                 5698 	.byte _help, (_help >> 8)
      0000A4 FF 7F                 5699 	.byte #0xff, #0x7f	;  32767
      0000A6 07 00                 5700 	.byte #0x07, #0x00	;  7
      0000A8 03 00                 5701 	.byte #0x03, #0x00	;  3
      0000AA 00 00                 5702 	.byte #0x00,#0x00
      0000ACr93s01                 5703 	.byte _dump_pop, (_dump_pop >> 8)
      0000AE 00 80                 5704 	.byte #0x00, #0x80	; -32768
      0000B0 00 80                 5705 	.byte #0x00, #0x80	; -32768
      0000B2 00 80                 5706 	.byte #0x00, #0x80	; -32768
      0000B4 00 00                 5707 	.byte #0x00,#0x00
      0000B6 00 00                 5708 	.byte #0x00,#0x00
                                   5709 	.area CABS    (ABS,CODE)
