                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module calc
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _state_exec
                                     13 	.globl _state_init
                                     14 	.globl _stack_iter_peek
                                     15 	.globl _stack_peek2
                                     16 	.globl _stack_peek
                                     17 	.globl _stack_pop
                                     18 	.globl _stack_push
                                     19 	.globl _stack_init
                                     20 	.globl _getchar
                                     21 	.globl _putchar
                                     22 	.globl _isxdigit
                                     23 	.globl _printf
                                     24 	.globl _strtol
                                     25 	.globl _CY
                                     26 	.globl _AC
                                     27 	.globl _F0
                                     28 	.globl _RS1
                                     29 	.globl _RS0
                                     30 	.globl _OV
                                     31 	.globl _FL
                                     32 	.globl _P
                                     33 	.globl _TF2
                                     34 	.globl _EXF2
                                     35 	.globl _RCLK
                                     36 	.globl _TCLK
                                     37 	.globl _EXEN2
                                     38 	.globl _TR2
                                     39 	.globl _C_T2
                                     40 	.globl _CP_RL2
                                     41 	.globl _T2CON_7
                                     42 	.globl _T2CON_6
                                     43 	.globl _T2CON_5
                                     44 	.globl _T2CON_4
                                     45 	.globl _T2CON_3
                                     46 	.globl _T2CON_2
                                     47 	.globl _T2CON_1
                                     48 	.globl _T2CON_0
                                     49 	.globl _PT2
                                     50 	.globl _PS
                                     51 	.globl _PT1
                                     52 	.globl _PX1
                                     53 	.globl _PT0
                                     54 	.globl _PX0
                                     55 	.globl _RD
                                     56 	.globl _WR
                                     57 	.globl _T1
                                     58 	.globl _T0
                                     59 	.globl _INT1
                                     60 	.globl _INT0
                                     61 	.globl _TXD
                                     62 	.globl _RXD
                                     63 	.globl _P3_7
                                     64 	.globl _P3_6
                                     65 	.globl _P3_5
                                     66 	.globl _P3_4
                                     67 	.globl _P3_3
                                     68 	.globl _P3_2
                                     69 	.globl _P3_1
                                     70 	.globl _P3_0
                                     71 	.globl _EA
                                     72 	.globl _ET2
                                     73 	.globl _ES
                                     74 	.globl _ET1
                                     75 	.globl _EX1
                                     76 	.globl _ET0
                                     77 	.globl _EX0
                                     78 	.globl _P2_7
                                     79 	.globl _P2_6
                                     80 	.globl _P2_5
                                     81 	.globl _P2_4
                                     82 	.globl _P2_3
                                     83 	.globl _P2_2
                                     84 	.globl _P2_1
                                     85 	.globl _P2_0
                                     86 	.globl _SM0
                                     87 	.globl _SM1
                                     88 	.globl _SM2
                                     89 	.globl _REN
                                     90 	.globl _TB8
                                     91 	.globl _RB8
                                     92 	.globl _TI
                                     93 	.globl _RI
                                     94 	.globl _T2EX
                                     95 	.globl _T2
                                     96 	.globl _P1_7
                                     97 	.globl _P1_6
                                     98 	.globl _P1_5
                                     99 	.globl _P1_4
                                    100 	.globl _P1_3
                                    101 	.globl _P1_2
                                    102 	.globl _P1_1
                                    103 	.globl _P1_0
                                    104 	.globl _TF1
                                    105 	.globl _TR1
                                    106 	.globl _TF0
                                    107 	.globl _TR0
                                    108 	.globl _IE1
                                    109 	.globl _IT1
                                    110 	.globl _IE0
                                    111 	.globl _IT0
                                    112 	.globl _P0_7
                                    113 	.globl _P0_6
                                    114 	.globl _P0_5
                                    115 	.globl _P0_4
                                    116 	.globl _P0_3
                                    117 	.globl _P0_2
                                    118 	.globl _P0_1
                                    119 	.globl _P0_0
                                    120 	.globl _B
                                    121 	.globl _A
                                    122 	.globl _ACC
                                    123 	.globl _PSW
                                    124 	.globl _TH2
                                    125 	.globl _TL2
                                    126 	.globl _RCAP2H
                                    127 	.globl _RCAP2L
                                    128 	.globl _T2MOD
                                    129 	.globl _T2CON
                                    130 	.globl _IP
                                    131 	.globl _P3
                                    132 	.globl _IE
                                    133 	.globl _P2
                                    134 	.globl _SBUF
                                    135 	.globl _SCON
                                    136 	.globl _P1
                                    137 	.globl _TH1
                                    138 	.globl _TH0
                                    139 	.globl _TL1
                                    140 	.globl _TL0
                                    141 	.globl _TMOD
                                    142 	.globl _TCON
                                    143 	.globl _PCON
                                    144 	.globl _DPH
                                    145 	.globl _DPL
                                    146 	.globl _SP
                                    147 	.globl _P0
                                    148 	.globl _giant
                                    149 ;--------------------------------------------------------
                                    150 ; special function registers
                                    151 ;--------------------------------------------------------
                                    152 	.area RSEG    (ABS,DATA)
      000000                        153 	.org 0x0000
                           000080   154 _P0	=	0x0080
                           000081   155 _SP	=	0x0081
                           000082   156 _DPL	=	0x0082
                           000083   157 _DPH	=	0x0083
                           000087   158 _PCON	=	0x0087
                           000088   159 _TCON	=	0x0088
                           000089   160 _TMOD	=	0x0089
                           00008A   161 _TL0	=	0x008a
                           00008B   162 _TL1	=	0x008b
                           00008C   163 _TH0	=	0x008c
                           00008D   164 _TH1	=	0x008d
                           000090   165 _P1	=	0x0090
                           000098   166 _SCON	=	0x0098
                           000099   167 _SBUF	=	0x0099
                           0000A0   168 _P2	=	0x00a0
                           0000A8   169 _IE	=	0x00a8
                           0000B0   170 _P3	=	0x00b0
                           0000B8   171 _IP	=	0x00b8
                           0000C8   172 _T2CON	=	0x00c8
                           0000C9   173 _T2MOD	=	0x00c9
                           0000CA   174 _RCAP2L	=	0x00ca
                           0000CB   175 _RCAP2H	=	0x00cb
                           0000CC   176 _TL2	=	0x00cc
                           0000CD   177 _TH2	=	0x00cd
                           0000D0   178 _PSW	=	0x00d0
                           0000E0   179 _ACC	=	0x00e0
                           0000E0   180 _A	=	0x00e0
                           0000F0   181 _B	=	0x00f0
                                    182 ;--------------------------------------------------------
                                    183 ; special function bits
                                    184 ;--------------------------------------------------------
                                    185 	.area RSEG    (ABS,DATA)
      000000                        186 	.org 0x0000
                           000080   187 _P0_0	=	0x0080
                           000081   188 _P0_1	=	0x0081
                           000082   189 _P0_2	=	0x0082
                           000083   190 _P0_3	=	0x0083
                           000084   191 _P0_4	=	0x0084
                           000085   192 _P0_5	=	0x0085
                           000086   193 _P0_6	=	0x0086
                           000087   194 _P0_7	=	0x0087
                           000088   195 _IT0	=	0x0088
                           000089   196 _IE0	=	0x0089
                           00008A   197 _IT1	=	0x008a
                           00008B   198 _IE1	=	0x008b
                           00008C   199 _TR0	=	0x008c
                           00008D   200 _TF0	=	0x008d
                           00008E   201 _TR1	=	0x008e
                           00008F   202 _TF1	=	0x008f
                           000090   203 _P1_0	=	0x0090
                           000091   204 _P1_1	=	0x0091
                           000092   205 _P1_2	=	0x0092
                           000093   206 _P1_3	=	0x0093
                           000094   207 _P1_4	=	0x0094
                           000095   208 _P1_5	=	0x0095
                           000096   209 _P1_6	=	0x0096
                           000097   210 _P1_7	=	0x0097
                           000090   211 _T2	=	0x0090
                           000091   212 _T2EX	=	0x0091
                           000098   213 _RI	=	0x0098
                           000099   214 _TI	=	0x0099
                           00009A   215 _RB8	=	0x009a
                           00009B   216 _TB8	=	0x009b
                           00009C   217 _REN	=	0x009c
                           00009D   218 _SM2	=	0x009d
                           00009E   219 _SM1	=	0x009e
                           00009F   220 _SM0	=	0x009f
                           0000A0   221 _P2_0	=	0x00a0
                           0000A1   222 _P2_1	=	0x00a1
                           0000A2   223 _P2_2	=	0x00a2
                           0000A3   224 _P2_3	=	0x00a3
                           0000A4   225 _P2_4	=	0x00a4
                           0000A5   226 _P2_5	=	0x00a5
                           0000A6   227 _P2_6	=	0x00a6
                           0000A7   228 _P2_7	=	0x00a7
                           0000A8   229 _EX0	=	0x00a8
                           0000A9   230 _ET0	=	0x00a9
                           0000AA   231 _EX1	=	0x00aa
                           0000AB   232 _ET1	=	0x00ab
                           0000AC   233 _ES	=	0x00ac
                           0000AD   234 _ET2	=	0x00ad
                           0000AF   235 _EA	=	0x00af
                           0000B0   236 _P3_0	=	0x00b0
                           0000B1   237 _P3_1	=	0x00b1
                           0000B2   238 _P3_2	=	0x00b2
                           0000B3   239 _P3_3	=	0x00b3
                           0000B4   240 _P3_4	=	0x00b4
                           0000B5   241 _P3_5	=	0x00b5
                           0000B6   242 _P3_6	=	0x00b6
                           0000B7   243 _P3_7	=	0x00b7
                           0000B0   244 _RXD	=	0x00b0
                           0000B1   245 _TXD	=	0x00b1
                           0000B2   246 _INT0	=	0x00b2
                           0000B3   247 _INT1	=	0x00b3
                           0000B4   248 _T0	=	0x00b4
                           0000B5   249 _T1	=	0x00b5
                           0000B6   250 _WR	=	0x00b6
                           0000B7   251 _RD	=	0x00b7
                           0000B8   252 _PX0	=	0x00b8
                           0000B9   253 _PT0	=	0x00b9
                           0000BA   254 _PX1	=	0x00ba
                           0000BB   255 _PT1	=	0x00bb
                           0000BC   256 _PS	=	0x00bc
                           0000BD   257 _PT2	=	0x00bd
                           0000C8   258 _T2CON_0	=	0x00c8
                           0000C9   259 _T2CON_1	=	0x00c9
                           0000CA   260 _T2CON_2	=	0x00ca
                           0000CB   261 _T2CON_3	=	0x00cb
                           0000CC   262 _T2CON_4	=	0x00cc
                           0000CD   263 _T2CON_5	=	0x00cd
                           0000CE   264 _T2CON_6	=	0x00ce
                           0000CF   265 _T2CON_7	=	0x00cf
                           0000C8   266 _CP_RL2	=	0x00c8
                           0000C9   267 _C_T2	=	0x00c9
                           0000CA   268 _TR2	=	0x00ca
                           0000CB   269 _EXEN2	=	0x00cb
                           0000CC   270 _TCLK	=	0x00cc
                           0000CD   271 _RCLK	=	0x00cd
                           0000CE   272 _EXF2	=	0x00ce
                           0000CF   273 _TF2	=	0x00cf
                           0000D0   274 _P	=	0x00d0
                           0000D1   275 _FL	=	0x00d1
                           0000D2   276 _OV	=	0x00d2
                           0000D3   277 _RS0	=	0x00d3
                           0000D4   278 _RS1	=	0x00d4
                           0000D5   279 _F0	=	0x00d5
                           0000D6   280 _AC	=	0x00d6
                           0000D7   281 _CY	=	0x00d7
                                    282 ;--------------------------------------------------------
                                    283 ; overlayable register banks
                                    284 ;--------------------------------------------------------
                                    285 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        286 	.ds 8
                                    287 ;--------------------------------------------------------
                                    288 ; internal ram data
                                    289 ;--------------------------------------------------------
                                    290 	.area DSEG    (DATA)
                                    291 ;--------------------------------------------------------
                                    292 ; overlayable items in internal ram 
                                    293 ;--------------------------------------------------------
                                    294 ;--------------------------------------------------------
                                    295 ; Stack segment in internal ram 
                                    296 ;--------------------------------------------------------
                                    297 	.area	SSEG
      000000                        298 __start__stack:
      000000                        299 	.ds	1
                                    300 
                                    301 ;--------------------------------------------------------
                                    302 ; indirectly addressable internal ram data
                                    303 ;--------------------------------------------------------
                                    304 	.area ISEG    (DATA)
      000000                        305 _giant::
      000000                        306 	.ds 1
                                    307 ;--------------------------------------------------------
                                    308 ; absolute internal ram data
                                    309 ;--------------------------------------------------------
                                    310 	.area IABS    (ABS,DATA)
                                    311 	.area IABS    (ABS,DATA)
                                    312 ;--------------------------------------------------------
                                    313 ; bit data
                                    314 ;--------------------------------------------------------
                                    315 	.area BSEG    (BIT)
                                    316 ;--------------------------------------------------------
                                    317 ; paged external ram data
                                    318 ;--------------------------------------------------------
                                    319 	.area PSEG    (PAG,XDATA)
                                    320 ;--------------------------------------------------------
                                    321 ; external ram data
                                    322 ;--------------------------------------------------------
                                    323 	.area XSEG    (XDATA)
      000000                        324 _s:
      000000                        325 	.ds 12
      00000C                        326 _c:
      00000C                        327 	.ds 16407
                                    328 ;--------------------------------------------------------
                                    329 ; absolute external ram data
                                    330 ;--------------------------------------------------------
                                    331 	.area XABS    (ABS,XDATA)
                                    332 ;--------------------------------------------------------
                                    333 ; external initialized ram data
                                    334 ;--------------------------------------------------------
                                    335 	.area XISEG   (XDATA)
      000000                        336 _deltas:
      000000                        337 	.ds 170
                                    338 	.area HOME    (CODE)
                                    339 	.area GSINIT0 (CODE)
                                    340 	.area GSINIT1 (CODE)
                                    341 	.area GSINIT2 (CODE)
                                    342 	.area GSINIT3 (CODE)
                                    343 	.area GSINIT4 (CODE)
                                    344 	.area GSINIT5 (CODE)
                                    345 	.area GSINIT  (CODE)
                                    346 	.area GSFINAL (CODE)
                                    347 	.area CSEG    (CODE)
                                    348 ;--------------------------------------------------------
                                    349 ; interrupt vector 
                                    350 ;--------------------------------------------------------
                                    351 	.area HOME    (CODE)
      000000                        352 __interrupt_vect:
      000000 02r00r00         [24]  353 	ljmp	__sdcc_gsinit_startup
                                    354 ;--------------------------------------------------------
                                    355 ; global & static initialisations
                                    356 ;--------------------------------------------------------
                                    357 	.area HOME    (CODE)
                                    358 	.area GSINIT  (CODE)
                                    359 	.area GSFINAL (CODE)
                                    360 	.area GSINIT  (CODE)
                                    361 	.globl __sdcc_gsinit_startup
                                    362 	.globl __sdcc_program_startup
                                    363 	.globl __start__stack
                                    364 	.globl __mcs51_genXINIT
                                    365 	.globl __mcs51_genXRAMCLEAR
                                    366 	.globl __mcs51_genRAMCLEAR
                                    367 	.area GSFINAL (CODE)
      000000 02r00r03         [24]  368 	ljmp	__sdcc_program_startup
                                    369 ;--------------------------------------------------------
                                    370 ; Home
                                    371 ;--------------------------------------------------------
                                    372 	.area HOME    (CODE)
                                    373 	.area HOME    (CODE)
      000003                        374 __sdcc_program_startup:
      000003 02r3ErFD         [24]  375 	ljmp	_main
                                    376 ;	return from main will return to caller
                                    377 ;--------------------------------------------------------
                                    378 ; code
                                    379 ;--------------------------------------------------------
                                    380 	.area CSEG    (CODE)
                                    381 ;------------------------------------------------------------
                                    382 ;Allocation info for local variables in function 'accumulate'
                                    383 ;------------------------------------------------------------
                                    384 ;delta                     Allocated to stack - _bp -5
                                    385 ;_ctx                      Allocated to registers r5 r6 r7 
                                    386 ;ctx                       Allocated to stack - _bp +8
                                    387 ;d                         Allocated to stack - _bp +11
                                    388 ;sloc0                     Allocated to stack - _bp +1
                                    389 ;sloc1                     Allocated to stack - _bp +4
                                    390 ;------------------------------------------------------------
                                    391 ;	calc.c:41: static int accumulate(void *_ctx, delta_t *delta) __reentrant {
                                    392 ;	-----------------------------------------
                                    393 ;	 function accumulate
                                    394 ;	-----------------------------------------
      000000                        395 _accumulate:
                           000007   396 	ar7 = 0x07
                           000006   397 	ar6 = 0x06
                           000005   398 	ar5 = 0x05
                           000004   399 	ar4 = 0x04
                           000003   400 	ar3 = 0x03
                           000002   401 	ar2 = 0x02
                           000001   402 	ar1 = 0x01
                           000000   403 	ar0 = 0x00
      000000 C0*00            [24]  404 	push	_bp
      000002 E5 81            [12]  405 	mov	a,sp
      000004 F5*00            [12]  406 	mov	_bp,a
      000006 24 0E            [12]  407 	add	a,#0x0e
      000008 F5 81            [12]  408 	mov	sp,a
      00000A AD 82            [24]  409 	mov	r5,dpl
      00000C AE 83            [24]  410 	mov	r6,dph
      00000E AF F0            [24]  411 	mov	r7,b
                                    412 ;	calc.c:42: calc_ctx_t *ctx = (calc_ctx_t *)_ctx;
      000010 E5*00            [12]  413 	mov	a,_bp
      000012 24 08            [12]  414 	add	a,#0x08
      000014 F8               [12]  415 	mov	r0,a
      000015 A6 05            [24]  416 	mov	@r0,ar5
      000017 08               [12]  417 	inc	r0
      000018 A6 06            [24]  418 	mov	@r0,ar6
      00001A 08               [12]  419 	inc	r0
      00001B A6 07            [24]  420 	mov	@r0,ar7
                                    421 ;	calc.c:47: if (!ctx->acc_valid) {
      00001D E5*00            [12]  422 	mov	a,_bp
      00001F 24 08            [12]  423 	add	a,#0x08
      000021 F8               [12]  424 	mov	r0,a
      000022 74 06            [12]  425 	mov	a,#0x06
      000024 26               [12]  426 	add	a,@r0
      000025 FA               [12]  427 	mov	r2,a
      000026 E4               [12]  428 	clr	a
      000027 08               [12]  429 	inc	r0
      000028 36               [12]  430 	addc	a,@r0
      000029 FB               [12]  431 	mov	r3,a
      00002A 08               [12]  432 	inc	r0
      00002B 86 04            [24]  433 	mov	ar4,@r0
      00002D 8A 82            [24]  434 	mov	dpl,r2
      00002F 8B 83            [24]  435 	mov	dph,r3
      000031 8C F0            [24]  436 	mov	b,r4
      000033 12r00r00         [24]  437 	lcall	__gptrget
      000036 70 31            [24]  438 	jnz	00102$
                                    439 ;	calc.c:48: ctx->acc_valid = 1;
      000038 8A 82            [24]  440 	mov	dpl,r2
      00003A 8B 83            [24]  441 	mov	dph,r3
      00003C 8C F0            [24]  442 	mov	b,r4
      00003E 74 01            [12]  443 	mov	a,#0x01
      000040 12r00r00         [24]  444 	lcall	__gptrput
                                    445 ;	calc.c:49: ctx->acc = 0l;
      000043 E5*00            [12]  446 	mov	a,_bp
      000045 24 08            [12]  447 	add	a,#0x08
      000047 F8               [12]  448 	mov	r0,a
      000048 74 02            [12]  449 	mov	a,#0x02
      00004A 26               [12]  450 	add	a,@r0
      00004B FA               [12]  451 	mov	r2,a
      00004C E4               [12]  452 	clr	a
      00004D 08               [12]  453 	inc	r0
      00004E 36               [12]  454 	addc	a,@r0
      00004F FB               [12]  455 	mov	r3,a
      000050 08               [12]  456 	inc	r0
      000051 86 04            [24]  457 	mov	ar4,@r0
      000053 8A 82            [24]  458 	mov	dpl,r2
      000055 8B 83            [24]  459 	mov	dph,r3
      000057 8C F0            [24]  460 	mov	b,r4
      000059 E4               [12]  461 	clr	a
      00005A 12r00r00         [24]  462 	lcall	__gptrput
      00005D A3               [24]  463 	inc	dptr
      00005E 12r00r00         [24]  464 	lcall	__gptrput
      000061 A3               [24]  465 	inc	dptr
      000062 12r00r00         [24]  466 	lcall	__gptrput
      000065 A3               [24]  467 	inc	dptr
      000066 12r00r00         [24]  468 	lcall	__gptrput
      000069                        469 00102$:
                                    470 ;	calc.c:52: d = strtol(ctx->digit, NULL, ctx->base);
      000069 E5*00            [12]  471 	mov	a,_bp
      00006B 24 08            [12]  472 	add	a,#0x08
      00006D F8               [12]  473 	mov	r0,a
      00006E 86 82            [24]  474 	mov	dpl,@r0
      000070 08               [12]  475 	inc	r0
      000071 86 83            [24]  476 	mov	dph,@r0
      000073 08               [12]  477 	inc	r0
      000074 86 F0            [24]  478 	mov	b,@r0
      000076 12r00r00         [24]  479 	lcall	__gptrget
      000079 FB               [12]  480 	mov	r3,a
      00007A A3               [24]  481 	inc	dptr
      00007B 12r00r00         [24]  482 	lcall	__gptrget
      00007E FC               [12]  483 	mov	r4,a
      00007F E5*00            [12]  484 	mov	a,_bp
      000081 24 08            [12]  485 	add	a,#0x08
      000083 F8               [12]  486 	mov	r0,a
      000084 74 07            [12]  487 	mov	a,#0x07
      000086 26               [12]  488 	add	a,@r0
      000087 FA               [12]  489 	mov	r2,a
      000088 E4               [12]  490 	clr	a
      000089 08               [12]  491 	inc	r0
      00008A 36               [12]  492 	addc	a,@r0
      00008B FE               [12]  493 	mov	r6,a
      00008C 08               [12]  494 	inc	r0
      00008D 86 07            [24]  495 	mov	ar7,@r0
      00008F C0 03            [24]  496 	push	ar3
      000091 C0 04            [24]  497 	push	ar4
      000093 E4               [12]  498 	clr	a
      000094 C0 E0            [24]  499 	push	acc
      000096 C0 E0            [24]  500 	push	acc
      000098 C0 E0            [24]  501 	push	acc
      00009A 8A 82            [24]  502 	mov	dpl,r2
      00009C 8E 83            [24]  503 	mov	dph,r6
      00009E 8F F0            [24]  504 	mov	b,r7
      0000A0 12r00r00         [24]  505 	lcall	_strtol
      0000A3 C8               [12]  506 	xch	a,r0
      0000A4 E5*00            [12]  507 	mov	a,_bp
      0000A6 24 0B            [12]  508 	add	a,#0x0b
      0000A8 C8               [12]  509 	xch	a,r0
      0000A9 A6 82            [24]  510 	mov	@r0,dpl
      0000AB 08               [12]  511 	inc	r0
      0000AC A6 83            [24]  512 	mov	@r0,dph
      0000AE 08               [12]  513 	inc	r0
      0000AF A6 F0            [24]  514 	mov	@r0,b
      0000B1 08               [12]  515 	inc	r0
      0000B2 F6               [12]  516 	mov	@r0,a
      0000B3 E5 81            [12]  517 	mov	a,sp
      0000B5 24 FB            [12]  518 	add	a,#0xfb
      0000B7 F5 81            [12]  519 	mov	sp,a
                                    520 ;	calc.c:53: ctx->acc = ctx->acc * (long)ctx->base + d;
      0000B9 E5*00            [12]  521 	mov	a,_bp
      0000BB 24 08            [12]  522 	add	a,#0x08
      0000BD F8               [12]  523 	mov	r0,a
      0000BE A9*00            [24]  524 	mov	r1,_bp
      0000C0 09               [12]  525 	inc	r1
      0000C1 74 02            [12]  526 	mov	a,#0x02
      0000C3 26               [12]  527 	add	a,@r0
      0000C4 F7               [12]  528 	mov	@r1,a
      0000C5 E4               [12]  529 	clr	a
      0000C6 08               [12]  530 	inc	r0
      0000C7 36               [12]  531 	addc	a,@r0
      0000C8 09               [12]  532 	inc	r1
      0000C9 F7               [12]  533 	mov	@r1,a
      0000CA 08               [12]  534 	inc	r0
      0000CB 09               [12]  535 	inc	r1
      0000CC E6               [12]  536 	mov	a,@r0
      0000CD F7               [12]  537 	mov	@r1,a
      0000CE A8*00            [24]  538 	mov	r0,_bp
      0000D0 08               [12]  539 	inc	r0
      0000D1 86 82            [24]  540 	mov	dpl,@r0
      0000D3 08               [12]  541 	inc	r0
      0000D4 86 83            [24]  542 	mov	dph,@r0
      0000D6 08               [12]  543 	inc	r0
      0000D7 86 F0            [24]  544 	mov	b,@r0
      0000D9 E5*00            [12]  545 	mov	a,_bp
      0000DB 24 04            [12]  546 	add	a,#0x04
      0000DD F9               [12]  547 	mov	r1,a
      0000DE 12r00r00         [24]  548 	lcall	__gptrget
      0000E1 F7               [12]  549 	mov	@r1,a
      0000E2 A3               [24]  550 	inc	dptr
      0000E3 12r00r00         [24]  551 	lcall	__gptrget
      0000E6 09               [12]  552 	inc	r1
      0000E7 F7               [12]  553 	mov	@r1,a
      0000E8 A3               [24]  554 	inc	dptr
      0000E9 12r00r00         [24]  555 	lcall	__gptrget
      0000EC 09               [12]  556 	inc	r1
      0000ED F7               [12]  557 	mov	@r1,a
      0000EE A3               [24]  558 	inc	dptr
      0000EF 12r00r00         [24]  559 	lcall	__gptrget
      0000F2 09               [12]  560 	inc	r1
      0000F3 F7               [12]  561 	mov	@r1,a
      0000F4 E5*00            [12]  562 	mov	a,_bp
      0000F6 24 08            [12]  563 	add	a,#0x08
      0000F8 F8               [12]  564 	mov	r0,a
      0000F9 86 82            [24]  565 	mov	dpl,@r0
      0000FB 08               [12]  566 	inc	r0
      0000FC 86 83            [24]  567 	mov	dph,@r0
      0000FE 08               [12]  568 	inc	r0
      0000FF 86 F0            [24]  569 	mov	b,@r0
      000101 12r00r00         [24]  570 	lcall	__gptrget
      000104 FA               [12]  571 	mov	r2,a
      000105 A3               [24]  572 	inc	dptr
      000106 12r00r00         [24]  573 	lcall	__gptrget
      000109 FB               [12]  574 	mov	r3,a
      00010A 33               [12]  575 	rlc	a
      00010B 95 E0            [12]  576 	subb	a,acc
      00010D FE               [12]  577 	mov	r6,a
      00010E FF               [12]  578 	mov	r7,a
      00010F C0 02            [24]  579 	push	ar2
      000111 C0 03            [24]  580 	push	ar3
      000113 C0 06            [24]  581 	push	ar6
      000115 C0 07            [24]  582 	push	ar7
      000117 E5*00            [12]  583 	mov	a,_bp
      000119 24 04            [12]  584 	add	a,#0x04
      00011B F8               [12]  585 	mov	r0,a
      00011C 86 82            [24]  586 	mov	dpl,@r0
      00011E 08               [12]  587 	inc	r0
      00011F 86 83            [24]  588 	mov	dph,@r0
      000121 08               [12]  589 	inc	r0
      000122 86 F0            [24]  590 	mov	b,@r0
      000124 08               [12]  591 	inc	r0
      000125 E6               [12]  592 	mov	a,@r0
      000126 12r00r00         [24]  593 	lcall	__mullong
      000129 AC 82            [24]  594 	mov	r4,dpl
      00012B AD 83            [24]  595 	mov	r5,dph
      00012D AE F0            [24]  596 	mov	r6,b
      00012F FF               [12]  597 	mov	r7,a
      000130 E5 81            [12]  598 	mov	a,sp
      000132 24 FC            [12]  599 	add	a,#0xfc
      000134 F5 81            [12]  600 	mov	sp,a
      000136 E5*00            [12]  601 	mov	a,_bp
      000138 24 0B            [12]  602 	add	a,#0x0b
      00013A F8               [12]  603 	mov	r0,a
      00013B E6               [12]  604 	mov	a,@r0
      00013C 2C               [12]  605 	add	a,r4
      00013D FC               [12]  606 	mov	r4,a
      00013E 08               [12]  607 	inc	r0
      00013F E6               [12]  608 	mov	a,@r0
      000140 3D               [12]  609 	addc	a,r5
      000141 FD               [12]  610 	mov	r5,a
      000142 08               [12]  611 	inc	r0
      000143 E6               [12]  612 	mov	a,@r0
      000144 3E               [12]  613 	addc	a,r6
      000145 FE               [12]  614 	mov	r6,a
      000146 08               [12]  615 	inc	r0
      000147 E6               [12]  616 	mov	a,@r0
      000148 3F               [12]  617 	addc	a,r7
      000149 FF               [12]  618 	mov	r7,a
      00014A A8*00            [24]  619 	mov	r0,_bp
      00014C 08               [12]  620 	inc	r0
      00014D 86 82            [24]  621 	mov	dpl,@r0
      00014F 08               [12]  622 	inc	r0
      000150 86 83            [24]  623 	mov	dph,@r0
      000152 08               [12]  624 	inc	r0
      000153 86 F0            [24]  625 	mov	b,@r0
      000155 EC               [12]  626 	mov	a,r4
      000156 12r00r00         [24]  627 	lcall	__gptrput
      000159 A3               [24]  628 	inc	dptr
      00015A ED               [12]  629 	mov	a,r5
      00015B 12r00r00         [24]  630 	lcall	__gptrput
      00015E A3               [24]  631 	inc	dptr
      00015F EE               [12]  632 	mov	a,r6
      000160 12r00r00         [24]  633 	lcall	__gptrput
      000163 A3               [24]  634 	inc	dptr
      000164 EF               [12]  635 	mov	a,r7
      000165 12r00r00         [24]  636 	lcall	__gptrput
                                    637 ;	calc.c:55: return 1;
      000168 90 00 01         [24]  638 	mov	dptr,#0x0001
                                    639 ;	calc.c:56: }
      00016B 85*00 81         [24]  640 	mov	sp,_bp
      00016E D0*00            [24]  641 	pop	_bp
      000170 22               [24]  642 	ret
                                    643 ;------------------------------------------------------------
                                    644 ;Allocation info for local variables in function 'dump_pop'
                                    645 ;------------------------------------------------------------
                                    646 ;delta                     Allocated to stack - _bp -5
                                    647 ;_ctx                      Allocated to registers r5 r6 r7 
                                    648 ;ctx                       Allocated to stack - _bp +11
                                    649 ;d                         Allocated to stack - _bp +14
                                    650 ;r                         Allocated to registers r5 r6 
                                    651 ;__1310720003              Allocated to registers 
                                    652 ;s                         Allocated to registers r5 r6 r7 
                                    653 ;__1966080005              Allocated to registers 
                                    654 ;s                         Allocated to registers r4 r5 r6 
                                    655 ;__1966080007              Allocated to registers 
                                    656 ;s                         Allocated to registers r3 r4 r5 
                                    657 ;__1966080009              Allocated to stack - _bp +18
                                    658 ;d                         Allocated to registers r3 r4 r5 r6 
                                    659 ;__1310720001              Allocated to registers 
                                    660 ;d                         Allocated to stack - _bp +22
                                    661 ;mask                      Allocated to stack - _bp +26
                                    662 ;__1966080011              Allocated to registers 
                                    663 ;s                         Allocated to registers r3 r4 r5 
                                    664 ;__1966080013              Allocated to registers 
                                    665 ;s                         Allocated to registers r4 r5 r6 
                                    666 ;__3276800015              Allocated to registers 
                                    667 ;s                         Allocated to registers r5 r3 r2 
                                    668 ;__3276800017              Allocated to stack - _bp +18
                                    669 ;d                         Allocated to registers r2 r3 r4 r7 
                                    670 ;__1310720001              Allocated to registers 
                                    671 ;d                         Allocated to stack - _bp +22
                                    672 ;mask                      Allocated to stack - _bp +26
                                    673 ;__3276800019              Allocated to registers 
                                    674 ;s                         Allocated to registers r5 r3 r2 
                                    675 ;sloc0                     Allocated to stack - _bp +1
                                    676 ;sloc1                     Allocated to stack - _bp +2
                                    677 ;sloc2                     Allocated to stack - _bp +5
                                    678 ;sloc3                     Allocated to stack - _bp +8
                                    679 ;------------------------------------------------------------
                                    680 ;	calc.c:58: static int dump_pop(void *_ctx, delta_t *delta) __reentrant {
                                    681 ;	-----------------------------------------
                                    682 ;	 function dump_pop
                                    683 ;	-----------------------------------------
      000171                        684 _dump_pop:
      000171 C0*00            [24]  685 	push	_bp
      000173 E5 81            [12]  686 	mov	a,sp
      000175 F5*00            [12]  687 	mov	_bp,a
      000177 24 1D            [12]  688 	add	a,#0x1d
      000179 F5 81            [12]  689 	mov	sp,a
      00017B AD 82            [24]  690 	mov	r5,dpl
      00017D AE 83            [24]  691 	mov	r6,dph
      00017F AF F0            [24]  692 	mov	r7,b
                                    693 ;	calc.c:59: calc_ctx_t *ctx = (calc_ctx_t *)_ctx;
      000181 E5*00            [12]  694 	mov	a,_bp
      000183 24 0B            [12]  695 	add	a,#0x0b
      000185 F8               [12]  696 	mov	r0,a
      000186 A6 05            [24]  697 	mov	@r0,ar5
      000188 08               [12]  698 	inc	r0
      000189 A6 06            [24]  699 	mov	@r0,ar6
      00018B 08               [12]  700 	inc	r0
      00018C A6 07            [24]  701 	mov	@r0,ar7
                                    702 ;	calc.c:63: if (delta->event == EVENT_TERM) printstr("\r\n");
      00018E E5*00            [12]  703 	mov	a,_bp
      000190 24 FB            [12]  704 	add	a,#0xfb
      000192 F8               [12]  705 	mov	r0,a
      000193 86 02            [24]  706 	mov	ar2,@r0
      000195 08               [12]  707 	inc	r0
      000196 86 03            [24]  708 	mov	ar3,@r0
      000198 08               [12]  709 	inc	r0
      000199 86 04            [24]  710 	mov	ar4,@r0
      00019B E5*00            [12]  711 	mov	a,_bp
      00019D 24 08            [12]  712 	add	a,#0x08
      00019F F8               [12]  713 	mov	r0,a
      0001A0 74 02            [12]  714 	mov	a,#0x02
      0001A2 2A               [12]  715 	add	a,r2
      0001A3 F6               [12]  716 	mov	@r0,a
      0001A4 E4               [12]  717 	clr	a
      0001A5 3B               [12]  718 	addc	a,r3
      0001A6 08               [12]  719 	inc	r0
      0001A7 F6               [12]  720 	mov	@r0,a
      0001A8 08               [12]  721 	inc	r0
      0001A9 A6 04            [24]  722 	mov	@r0,ar4
      0001AB E5*00            [12]  723 	mov	a,_bp
      0001AD 24 08            [12]  724 	add	a,#0x08
      0001AF F8               [12]  725 	mov	r0,a
      0001B0 86 82            [24]  726 	mov	dpl,@r0
      0001B2 08               [12]  727 	inc	r0
      0001B3 86 83            [24]  728 	mov	dph,@r0
      0001B5 08               [12]  729 	inc	r0
      0001B6 86 F0            [24]  730 	mov	b,@r0
      0001B8 12r00r00         [24]  731 	lcall	__gptrget
      0001BB FE               [12]  732 	mov	r6,a
      0001BC A3               [24]  733 	inc	dptr
      0001BD 12r00r00         [24]  734 	lcall	__gptrget
      0001C0 FF               [12]  735 	mov	r7,a
      0001C1 BE 08 33         [24]  736 	cjne	r6,#0x08,00102$
      0001C4 BF 00 30         [24]  737 	cjne	r7,#0x00,00102$
      0001C7 7Dr17            [12]  738 	mov	r5,#___str_3
      0001C9 7Es00            [12]  739 	mov	r6,#(___str_3 >> 8)
      0001CB 7F 80            [12]  740 	mov	r7,#0x80
                                    741 ;	calc.c:20: return;
      0001CD                        742 00135$:
                                    743 ;	calc.c:18: for (; *s; s++) putchar(*s);
      0001CD 8D 82            [24]  744 	mov	dpl,r5
      0001CF 8E 83            [24]  745 	mov	dph,r6
      0001D1 8F F0            [24]  746 	mov	b,r7
      0001D3 12r00r00         [24]  747 	lcall	__gptrget
      0001D6 FC               [12]  748 	mov	r4,a
      0001D7 60 1E            [24]  749 	jz	00102$
      0001D9 8C 03            [24]  750 	mov	ar3,r4
      0001DB 7C 00            [12]  751 	mov	r4,#0x00
      0001DD 8B 82            [24]  752 	mov	dpl,r3
      0001DF 8C 83            [24]  753 	mov	dph,r4
      0001E1 C0 07            [24]  754 	push	ar7
      0001E3 C0 06            [24]  755 	push	ar6
      0001E5 C0 05            [24]  756 	push	ar5
      0001E7 12r00r00         [24]  757 	lcall	_putchar
      0001EA D0 05            [24]  758 	pop	ar5
      0001EC D0 06            [24]  759 	pop	ar6
      0001EE D0 07            [24]  760 	pop	ar7
      0001F0 0D               [12]  761 	inc	r5
                                    762 ;	calc.c:63: if (delta->event == EVENT_TERM) printstr("\r\n");
      0001F1 BD 00 D9         [24]  763 	cjne	r5,#0x00,00135$
      0001F4 0E               [12]  764 	inc	r6
      0001F5 80 D6            [24]  765 	sjmp	00135$
      0001F7                        766 00102$:
                                    767 ;	calc.c:64: r = stack_pop(ctx->ps, &d);
      0001F7 E5*00            [12]  768 	mov	a,_bp
      0001F9 24 0E            [12]  769 	add	a,#0x0e
      0001FB FF               [12]  770 	mov	r7,a
      0001FC E5*00            [12]  771 	mov	a,_bp
      0001FE 24 05            [12]  772 	add	a,#0x05
      000200 F8               [12]  773 	mov	r0,a
      000201 A6 07            [24]  774 	mov	@r0,ar7
      000203 08               [12]  775 	inc	r0
      000204 76 00            [12]  776 	mov	@r0,#0x00
      000206 08               [12]  777 	inc	r0
      000207 76 40            [12]  778 	mov	@r0,#0x40
      000209 E5*00            [12]  779 	mov	a,_bp
      00020B 24 0B            [12]  780 	add	a,#0x0b
      00020D F8               [12]  781 	mov	r0,a
      00020E A9*00            [24]  782 	mov	r1,_bp
      000210 09               [12]  783 	inc	r1
      000211 09               [12]  784 	inc	r1
      000212 74 11            [12]  785 	mov	a,#0x11
      000214 26               [12]  786 	add	a,@r0
      000215 F7               [12]  787 	mov	@r1,a
      000216 74 40            [12]  788 	mov	a,#0x40
      000218 08               [12]  789 	inc	r0
      000219 36               [12]  790 	addc	a,@r0
      00021A 09               [12]  791 	inc	r1
      00021B F7               [12]  792 	mov	@r1,a
      00021C 08               [12]  793 	inc	r0
      00021D 09               [12]  794 	inc	r1
      00021E E6               [12]  795 	mov	a,@r0
      00021F F7               [12]  796 	mov	@r1,a
      000220 A8*00            [24]  797 	mov	r0,_bp
      000222 08               [12]  798 	inc	r0
      000223 08               [12]  799 	inc	r0
      000224 86 82            [24]  800 	mov	dpl,@r0
      000226 08               [12]  801 	inc	r0
      000227 86 83            [24]  802 	mov	dph,@r0
      000229 08               [12]  803 	inc	r0
      00022A 86 F0            [24]  804 	mov	b,@r0
      00022C 12r00r00         [24]  805 	lcall	__gptrget
      00022F FA               [12]  806 	mov	r2,a
      000230 A3               [24]  807 	inc	dptr
      000231 12r00r00         [24]  808 	lcall	__gptrget
      000234 FB               [12]  809 	mov	r3,a
      000235 A3               [24]  810 	inc	dptr
      000236 12r00r00         [24]  811 	lcall	__gptrget
      000239 FE               [12]  812 	mov	r6,a
      00023A C0 07            [24]  813 	push	ar7
      00023C E5*00            [12]  814 	mov	a,_bp
      00023E 24 05            [12]  815 	add	a,#0x05
      000240 F8               [12]  816 	mov	r0,a
      000241 E6               [12]  817 	mov	a,@r0
      000242 C0 E0            [24]  818 	push	acc
      000244 08               [12]  819 	inc	r0
      000245 E6               [12]  820 	mov	a,@r0
      000246 C0 E0            [24]  821 	push	acc
      000248 08               [12]  822 	inc	r0
      000249 E6               [12]  823 	mov	a,@r0
      00024A C0 E0            [24]  824 	push	acc
      00024C 8A 82            [24]  825 	mov	dpl,r2
      00024E 8B 83            [24]  826 	mov	dph,r3
      000250 8E F0            [24]  827 	mov	b,r6
      000252 12r00r00         [24]  828 	lcall	_stack_pop
      000255 AE 82            [24]  829 	mov	r6,dpl
      000257 AD 83            [24]  830 	mov	r5,dph
      000259 15 81            [12]  831 	dec	sp
      00025B 15 81            [12]  832 	dec	sp
      00025D 15 81            [12]  833 	dec	sp
      00025F D0 07            [24]  834 	pop	ar7
                                    835 ;	calc.c:65: if (!r) {
      000261 EE               [12]  836 	mov	a,r6
      000262 4D               [12]  837 	orl	a,r5
      000263 70 54            [24]  838 	jnz	00183$
                                    839 ;	calc.c:66: if (delta->event != EVENT_TERM) printstr("stack underflow\r\n");
      000265 E5*00            [12]  840 	mov	a,_bp
      000267 24 08            [12]  841 	add	a,#0x08
      000269 F8               [12]  842 	mov	r0,a
      00026A 86 82            [24]  843 	mov	dpl,@r0
      00026C 08               [12]  844 	inc	r0
      00026D 86 83            [24]  845 	mov	dph,@r0
      00026F 08               [12]  846 	inc	r0
      000270 86 F0            [24]  847 	mov	b,@r0
      000272 12r00r00         [24]  848 	lcall	__gptrget
      000275 FD               [12]  849 	mov	r5,a
      000276 A3               [24]  850 	inc	dptr
      000277 12r00r00         [24]  851 	lcall	__gptrget
      00027A FE               [12]  852 	mov	r6,a
      00027B BD 08 06         [24]  853 	cjne	r5,#0x08,00320$
      00027E BE 00 03         [24]  854 	cjne	r6,#0x00,00320$
      000281 02r04rBC         [24]  855 	ljmp	00110$
      000284                        856 00320$:
      000284 7Cr1A            [12]  857 	mov	r4,#___str_4
      000286 7Ds00            [12]  858 	mov	r5,#(___str_4 >> 8)
      000288 7E 80            [12]  859 	mov	r6,#0x80
                                    860 ;	calc.c:20: return;
      00028A                        861 00138$:
                                    862 ;	calc.c:18: for (; *s; s++) putchar(*s);
      00028A 8C 82            [24]  863 	mov	dpl,r4
      00028C 8D 83            [24]  864 	mov	dph,r5
      00028E 8E F0            [24]  865 	mov	b,r6
      000290 12r00r00         [24]  866 	lcall	__gptrget
      000293 FB               [12]  867 	mov	r3,a
      000294 70 03            [24]  868 	jnz	00321$
      000296 02r04rBC         [24]  869 	ljmp	00110$
      000299                        870 00321$:
      000299 7A 00            [12]  871 	mov	r2,#0x00
      00029B 8B 82            [24]  872 	mov	dpl,r3
      00029D 8A 83            [24]  873 	mov	dph,r2
      00029F C0 07            [24]  874 	push	ar7
      0002A1 C0 06            [24]  875 	push	ar6
      0002A3 C0 05            [24]  876 	push	ar5
      0002A5 C0 04            [24]  877 	push	ar4
      0002A7 12r00r00         [24]  878 	lcall	_putchar
      0002AA D0 04            [24]  879 	pop	ar4
      0002AC D0 05            [24]  880 	pop	ar5
      0002AE D0 06            [24]  881 	pop	ar6
      0002B0 D0 07            [24]  882 	pop	ar7
      0002B2 0C               [12]  883 	inc	r4
                                    884 ;	calc.c:67: } else while (r > 0) {
      0002B3 BC 00 D4         [24]  885 	cjne	r4,#0x00,00138$
      0002B6 0D               [12]  886 	inc	r5
      0002B7 80 D1            [24]  887 	sjmp	00138$
      0002B9                        888 00183$:
      0002B9 A8*00            [24]  889 	mov	r0,_bp
      0002BB 08               [12]  890 	inc	r0
      0002BC A6 07            [24]  891 	mov	@r0,ar7
      0002BE                        892 00105$:
      0002BE C3               [12]  893 	clr	c
      0002BF E4               [12]  894 	clr	a
      0002C0 9E               [12]  895 	subb	a,r6
      0002C1 74 80            [12]  896 	mov	a,#(0x00 ^ 0x80)
      0002C3 8D F0            [24]  897 	mov	b,r5
      0002C5 63 F0 80         [24]  898 	xrl	b,#0x80
      0002C8 95 F0            [12]  899 	subb	a,b
      0002CA 40 03            [24]  900 	jc	00323$
      0002CC 02r04rBC         [24]  901 	ljmp	00110$
      0002CF                        902 00323$:
                                    903 ;	calc.c:68: printstr("PSPA\t");
      0002CF 7Br2C            [12]  904 	mov	r3,#___str_5
      0002D1 7Cs00            [12]  905 	mov	r4,#(___str_5 >> 8)
      0002D3 7D 80            [12]  906 	mov	r5,#0x80
                                    907 ;	calc.c:20: return;
      0002D5                        908 00141$:
                                    909 ;	calc.c:18: for (; *s; s++) putchar(*s);
      0002D5 8B 82            [24]  910 	mov	dpl,r3
      0002D7 8C 83            [24]  911 	mov	dph,r4
      0002D9 8D F0            [24]  912 	mov	b,r5
      0002DB 12r00r00         [24]  913 	lcall	__gptrget
      0002DE FA               [12]  914 	mov	r2,a
      0002DF 60 20            [24]  915 	jz	00119$
      0002E1 7E 00            [12]  916 	mov	r6,#0x00
      0002E3 8A 82            [24]  917 	mov	dpl,r2
      0002E5 8E 83            [24]  918 	mov	dph,r6
      0002E7 C0 07            [24]  919 	push	ar7
      0002E9 C0 05            [24]  920 	push	ar5
      0002EB C0 04            [24]  921 	push	ar4
      0002ED C0 03            [24]  922 	push	ar3
      0002EF 12r00r00         [24]  923 	lcall	_putchar
      0002F2 D0 03            [24]  924 	pop	ar3
      0002F4 D0 04            [24]  925 	pop	ar4
      0002F6 D0 05            [24]  926 	pop	ar5
      0002F8 D0 07            [24]  927 	pop	ar7
      0002FA 0B               [12]  928 	inc	r3
                                    929 ;	calc.c:68: printstr("PSPA\t");
      0002FB BB 00 D7         [24]  930 	cjne	r3,#0x00,00141$
      0002FE 0C               [12]  931 	inc	r4
      0002FF 80 D4            [24]  932 	sjmp	00141$
      000301                        933 00119$:
                                    934 ;	calc.c:69: printall(d);
      000301 E5*00            [12]  935 	mov	a,_bp
      000303 24 0E            [12]  936 	add	a,#0x0e
      000305 F8               [12]  937 	mov	r0,a
      000306 E5*00            [12]  938 	mov	a,_bp
      000308 24 12            [12]  939 	add	a,#0x12
      00030A F9               [12]  940 	mov	r1,a
      00030B E6               [12]  941 	mov	a,@r0
      00030C F7               [12]  942 	mov	@r1,a
      00030D 08               [12]  943 	inc	r0
      00030E 09               [12]  944 	inc	r1
      00030F E6               [12]  945 	mov	a,@r0
      000310 F7               [12]  946 	mov	@r1,a
      000311 08               [12]  947 	inc	r0
      000312 09               [12]  948 	inc	r1
      000313 E6               [12]  949 	mov	a,@r0
      000314 F7               [12]  950 	mov	@r1,a
      000315 08               [12]  951 	inc	r0
      000316 09               [12]  952 	inc	r1
      000317 E6               [12]  953 	mov	a,@r0
      000318 F7               [12]  954 	mov	@r1,a
      000319 E5*00            [12]  955 	mov	a,_bp
      00031B 24 12            [12]  956 	add	a,#0x12
      00031D F8               [12]  957 	mov	r0,a
      00031E 86 03            [24]  958 	mov	ar3,@r0
      000320 08               [12]  959 	inc	r0
      000321 86 04            [24]  960 	mov	ar4,@r0
      000323 08               [12]  961 	inc	r0
      000324 86 05            [24]  962 	mov	ar5,@r0
      000326 08               [12]  963 	inc	r0
      000327 86 06            [24]  964 	mov	ar6,@r0
                                    965 ;	calc.c:33: printf("%08lx\t", d);
      000329 C0 07            [24]  966 	push	ar7
      00032B C0 06            [24]  967 	push	ar6
      00032D C0 05            [24]  968 	push	ar5
      00032F C0 04            [24]  969 	push	ar4
      000331 C0 03            [24]  970 	push	ar3
      000333 E5*00            [12]  971 	mov	a,_bp
      000335 24 12            [12]  972 	add	a,#0x12
      000337 F8               [12]  973 	mov	r0,a
      000338 E6               [12]  974 	mov	a,@r0
      000339 C0 E0            [24]  975 	push	acc
      00033B 08               [12]  976 	inc	r0
      00033C E6               [12]  977 	mov	a,@r0
      00033D C0 E0            [24]  978 	push	acc
      00033F 08               [12]  979 	inc	r0
      000340 E6               [12]  980 	mov	a,@r0
      000341 C0 E0            [24]  981 	push	acc
      000343 08               [12]  982 	inc	r0
      000344 E6               [12]  983 	mov	a,@r0
      000345 C0 E0            [24]  984 	push	acc
      000347 74r00            [12]  985 	mov	a,#___str_0
      000349 C0 E0            [24]  986 	push	acc
      00034B 74s00            [12]  987 	mov	a,#(___str_0 >> 8)
      00034D C0 E0            [24]  988 	push	acc
      00034F 74 80            [12]  989 	mov	a,#0x80
      000351 C0 E0            [24]  990 	push	acc
      000353 12r00r00         [24]  991 	lcall	_printf
      000356 E5 81            [12]  992 	mov	a,sp
      000358 24 F9            [12]  993 	add	a,#0xf9
      00035A F5 81            [12]  994 	mov	sp,a
      00035C D0 03            [24]  995 	pop	ar3
      00035E D0 04            [24]  996 	pop	ar4
      000360 D0 05            [24]  997 	pop	ar5
      000362 D0 06            [24]  998 	pop	ar6
                                    999 ;	calc.c:34: printf("% 11ld\t", d);
      000364 C0 06            [24] 1000 	push	ar6
      000366 C0 05            [24] 1001 	push	ar5
      000368 C0 04            [24] 1002 	push	ar4
      00036A C0 03            [24] 1003 	push	ar3
      00036C C0 03            [24] 1004 	push	ar3
      00036E C0 04            [24] 1005 	push	ar4
      000370 C0 05            [24] 1006 	push	ar5
      000372 C0 06            [24] 1007 	push	ar6
      000374 74r07            [12] 1008 	mov	a,#___str_1
      000376 C0 E0            [24] 1009 	push	acc
      000378 74s00            [12] 1010 	mov	a,#(___str_1 >> 8)
      00037A C0 E0            [24] 1011 	push	acc
      00037C 74 80            [12] 1012 	mov	a,#0x80
      00037E C0 E0            [24] 1013 	push	acc
      000380 12r00r00         [24] 1014 	lcall	_printf
      000383 E5 81            [12] 1015 	mov	a,sp
      000385 24 F9            [12] 1016 	add	a,#0xf9
      000387 F5 81            [12] 1017 	mov	sp,a
      000389 D0 03            [24] 1018 	pop	ar3
      00038B D0 04            [24] 1019 	pop	ar4
      00038D D0 05            [24] 1020 	pop	ar5
      00038F D0 06            [24] 1021 	pop	ar6
                                   1022 ;	calc.c:35: printf("%011lo\t", d);
      000391 C0 06            [24] 1023 	push	ar6
      000393 C0 05            [24] 1024 	push	ar5
      000395 C0 04            [24] 1025 	push	ar4
      000397 C0 03            [24] 1026 	push	ar3
      000399 C0 03            [24] 1027 	push	ar3
      00039B C0 04            [24] 1028 	push	ar4
      00039D C0 05            [24] 1029 	push	ar5
      00039F C0 06            [24] 1030 	push	ar6
      0003A1 74r0F            [12] 1031 	mov	a,#___str_2
      0003A3 C0 E0            [24] 1032 	push	acc
      0003A5 74s00            [12] 1033 	mov	a,#(___str_2 >> 8)
      0003A7 C0 E0            [24] 1034 	push	acc
      0003A9 74 80            [12] 1035 	mov	a,#0x80
      0003AB C0 E0            [24] 1036 	push	acc
      0003AD 12r00r00         [24] 1037 	lcall	_printf
      0003B0 E5 81            [12] 1038 	mov	a,sp
      0003B2 24 F9            [12] 1039 	add	a,#0xf9
      0003B4 F5 81            [12] 1040 	mov	sp,a
      0003B6 D0 03            [24] 1041 	pop	ar3
      0003B8 D0 04            [24] 1042 	pop	ar4
      0003BA D0 05            [24] 1043 	pop	ar5
      0003BC D0 06            [24] 1044 	pop	ar6
      0003BE D0 07            [24] 1045 	pop	ar7
                                   1046 ;	calc.c:36: printbin(d);
      0003C0 E5*00            [12] 1047 	mov	a,_bp
      0003C2 24 16            [12] 1048 	add	a,#0x16
      0003C4 F8               [12] 1049 	mov	r0,a
      0003C5 A6 03            [24] 1050 	mov	@r0,ar3
      0003C7 08               [12] 1051 	inc	r0
      0003C8 A6 04            [24] 1052 	mov	@r0,ar4
      0003CA 08               [12] 1053 	inc	r0
      0003CB A6 05            [24] 1054 	mov	@r0,ar5
      0003CD 08               [12] 1055 	inc	r0
      0003CE A6 06            [24] 1056 	mov	@r0,ar6
                                   1057 ;	calc.c:26: for (mask = 0x80000000lu; mask; mask >>= 1)
      0003D0 E5*00            [12] 1058 	mov	a,_bp
      0003D2 24 1A            [12] 1059 	add	a,#0x1a
      0003D4 F8               [12] 1060 	mov	r0,a
      0003D5 E4               [12] 1061 	clr	a
      0003D6 F6               [12] 1062 	mov	@r0,a
      0003D7 08               [12] 1063 	inc	r0
      0003D8 F6               [12] 1064 	mov	@r0,a
      0003D9 08               [12] 1065 	inc	r0
      0003DA F6               [12] 1066 	mov	@r0,a
      0003DB 08               [12] 1067 	inc	r0
      0003DC 76 80            [12] 1068 	mov	@r0,#0x80
                                   1069 ;	calc.c:83: return 1;
                                   1070 ;	calc.c:26: for (mask = 0x80000000lu; mask; mask >>= 1)
      0003DE                       1071 00143$:
                                   1072 ;	calc.c:27: (void)putchar((d & mask) ? (int)'1' : (int)'0');
      0003DE E5*00            [12] 1073 	mov	a,_bp
      0003E0 24 16            [12] 1074 	add	a,#0x16
      0003E2 F8               [12] 1075 	mov	r0,a
      0003E3 86 02            [24] 1076 	mov	ar2,@r0
      0003E5 08               [12] 1077 	inc	r0
      0003E6 86 03            [24] 1078 	mov	ar3,@r0
      0003E8 08               [12] 1079 	inc	r0
      0003E9 86 04            [24] 1080 	mov	ar4,@r0
      0003EB 08               [12] 1081 	inc	r0
      0003EC 86 05            [24] 1082 	mov	ar5,@r0
      0003EE E5*00            [12] 1083 	mov	a,_bp
      0003F0 24 1A            [12] 1084 	add	a,#0x1a
      0003F2 F8               [12] 1085 	mov	r0,a
      0003F3 E6               [12] 1086 	mov	a,@r0
      0003F4 52 02            [12] 1087 	anl	ar2,a
      0003F6 08               [12] 1088 	inc	r0
      0003F7 E6               [12] 1089 	mov	a,@r0
      0003F8 52 03            [12] 1090 	anl	ar3,a
      0003FA 08               [12] 1091 	inc	r0
      0003FB E6               [12] 1092 	mov	a,@r0
      0003FC 52 04            [12] 1093 	anl	ar4,a
      0003FE 08               [12] 1094 	inc	r0
      0003FF E6               [12] 1095 	mov	a,@r0
      000400 52 05            [12] 1096 	anl	ar5,a
      000402 EA               [12] 1097 	mov	a,r2
      000403 4B               [12] 1098 	orl	a,r3
      000404 4C               [12] 1099 	orl	a,r4
      000405 4D               [12] 1100 	orl	a,r5
      000406 60 06            [24] 1101 	jz	00164$
      000408 7C 31            [12] 1102 	mov	r4,#0x31
      00040A 7D 00            [12] 1103 	mov	r5,#0x00
      00040C 80 04            [24] 1104 	sjmp	00165$
      00040E                       1105 00164$:
      00040E 7C 30            [12] 1106 	mov	r4,#0x30
      000410 7D 00            [12] 1107 	mov	r5,#0x00
      000412                       1108 00165$:
      000412 8C 82            [24] 1109 	mov	dpl,r4
      000414 8D 83            [24] 1110 	mov	dph,r5
      000416 C0 07            [24] 1111 	push	ar7
      000418 12r00r00         [24] 1112 	lcall	_putchar
      00041B D0 07            [24] 1113 	pop	ar7
                                   1114 ;	calc.c:26: for (mask = 0x80000000lu; mask; mask >>= 1)
      00041D E5*00            [12] 1115 	mov	a,_bp
      00041F 24 1A            [12] 1116 	add	a,#0x1a
      000421 F8               [12] 1117 	mov	r0,a
      000422 08               [12] 1118 	inc	r0
      000423 08               [12] 1119 	inc	r0
      000424 08               [12] 1120 	inc	r0
      000425 E6               [12] 1121 	mov	a,@r0
      000426 C3               [12] 1122 	clr	c
      000427 13               [12] 1123 	rrc	a
      000428 F6               [12] 1124 	mov	@r0,a
      000429 18               [12] 1125 	dec	r0
      00042A E6               [12] 1126 	mov	a,@r0
      00042B 13               [12] 1127 	rrc	a
      00042C F6               [12] 1128 	mov	@r0,a
      00042D 18               [12] 1129 	dec	r0
      00042E E6               [12] 1130 	mov	a,@r0
      00042F 13               [12] 1131 	rrc	a
      000430 F6               [12] 1132 	mov	@r0,a
      000431 18               [12] 1133 	dec	r0
      000432 E6               [12] 1134 	mov	a,@r0
      000433 13               [12] 1135 	rrc	a
      000434 F6               [12] 1136 	mov	@r0,a
      000435 E5*00            [12] 1137 	mov	a,_bp
      000437 24 1A            [12] 1138 	add	a,#0x1a
      000439 F8               [12] 1139 	mov	r0,a
      00043A E6               [12] 1140 	mov	a,@r0
      00043B 08               [12] 1141 	inc	r0
      00043C 46               [12] 1142 	orl	a,@r0
      00043D 08               [12] 1143 	inc	r0
      00043E 46               [12] 1144 	orl	a,@r0
      00043F 08               [12] 1145 	inc	r0
      000440 46               [12] 1146 	orl	a,@r0
      000441 70 9B            [24] 1147 	jnz	00143$
                                   1148 ;	calc.c:70: printstr("\r\n");
      000443 7Br17            [12] 1149 	mov	r3,#___str_3
      000445 7Cs00            [12] 1150 	mov	r4,#(___str_3 >> 8)
      000447 7D 80            [12] 1151 	mov	r5,#0x80
                                   1152 ;	calc.c:20: return;
      000449                       1153 00146$:
                                   1154 ;	calc.c:18: for (; *s; s++) putchar(*s);
      000449 8B 82            [24] 1155 	mov	dpl,r3
      00044B 8C 83            [24] 1156 	mov	dph,r4
      00044D 8D F0            [24] 1157 	mov	b,r5
      00044F 12r00r00         [24] 1158 	lcall	__gptrget
      000452 FA               [12] 1159 	mov	r2,a
      000453 60 20            [24] 1160 	jz	00124$
      000455 7E 00            [12] 1161 	mov	r6,#0x00
      000457 8A 82            [24] 1162 	mov	dpl,r2
      000459 8E 83            [24] 1163 	mov	dph,r6
      00045B C0 07            [24] 1164 	push	ar7
      00045D C0 05            [24] 1165 	push	ar5
      00045F C0 04            [24] 1166 	push	ar4
      000461 C0 03            [24] 1167 	push	ar3
      000463 12r00r00         [24] 1168 	lcall	_putchar
      000466 D0 03            [24] 1169 	pop	ar3
      000468 D0 04            [24] 1170 	pop	ar4
      00046A D0 05            [24] 1171 	pop	ar5
      00046C D0 07            [24] 1172 	pop	ar7
      00046E 0B               [12] 1173 	inc	r3
                                   1174 ;	calc.c:70: printstr("\r\n");
      00046F BB 00 D7         [24] 1175 	cjne	r3,#0x00,00146$
      000472 0C               [12] 1176 	inc	r4
      000473 80 D4            [24] 1177 	sjmp	00146$
      000475                       1178 00124$:
                                   1179 ;	calc.c:71: r = stack_pop(ctx->ps, &d);
      000475 C0 07            [24] 1180 	push	ar7
      000477 A8*00            [24] 1181 	mov	r0,_bp
      000479 08               [12] 1182 	inc	r0
      00047A 86 03            [24] 1183 	mov	ar3,@r0
      00047C 7C 00            [12] 1184 	mov	r4,#0x00
      00047E 7D 40            [12] 1185 	mov	r5,#0x40
      000480 A8*00            [24] 1186 	mov	r0,_bp
      000482 08               [12] 1187 	inc	r0
      000483 08               [12] 1188 	inc	r0
      000484 86 82            [24] 1189 	mov	dpl,@r0
      000486 08               [12] 1190 	inc	r0
      000487 86 83            [24] 1191 	mov	dph,@r0
      000489 08               [12] 1192 	inc	r0
      00048A 86 F0            [24] 1193 	mov	b,@r0
      00048C 12r00r00         [24] 1194 	lcall	__gptrget
      00048F FA               [12] 1195 	mov	r2,a
      000490 A3               [24] 1196 	inc	dptr
      000491 12r00r00         [24] 1197 	lcall	__gptrget
      000494 FE               [12] 1198 	mov	r6,a
      000495 A3               [24] 1199 	inc	dptr
      000496 12r00r00         [24] 1200 	lcall	__gptrget
      000499 FF               [12] 1201 	mov	r7,a
      00049A C0 07            [24] 1202 	push	ar7
      00049C C0 03            [24] 1203 	push	ar3
      00049E C0 04            [24] 1204 	push	ar4
      0004A0 C0 05            [24] 1205 	push	ar5
      0004A2 8A 82            [24] 1206 	mov	dpl,r2
      0004A4 8E 83            [24] 1207 	mov	dph,r6
      0004A6 8F F0            [24] 1208 	mov	b,r7
      0004A8 12r00r00         [24] 1209 	lcall	_stack_pop
      0004AB AE 82            [24] 1210 	mov	r6,dpl
      0004AD AD 83            [24] 1211 	mov	r5,dph
      0004AF 15 81            [12] 1212 	dec	sp
      0004B1 15 81            [12] 1213 	dec	sp
      0004B3 15 81            [12] 1214 	dec	sp
      0004B5 D0 07            [24] 1215 	pop	ar7
      0004B7 D0 07            [24] 1216 	pop	ar7
      0004B9 02r02rBE         [24] 1217 	ljmp	00105$
      0004BC                       1218 00110$:
                                   1219 ;	calc.c:74: if (delta->event == EVENT_TERM) {
      0004BC E5*00            [12] 1220 	mov	a,_bp
      0004BE 24 08            [12] 1221 	add	a,#0x08
      0004C0 F8               [12] 1222 	mov	r0,a
      0004C1 86 82            [24] 1223 	mov	dpl,@r0
      0004C3 08               [12] 1224 	inc	r0
      0004C4 86 83            [24] 1225 	mov	dph,@r0
      0004C6 08               [12] 1226 	inc	r0
      0004C7 86 F0            [24] 1227 	mov	b,@r0
      0004C9 12r00r00         [24] 1228 	lcall	__gptrget
      0004CC FD               [12] 1229 	mov	r5,a
      0004CD A3               [24] 1230 	inc	dptr
      0004CE 12r00r00         [24] 1231 	lcall	__gptrget
      0004D1 FE               [12] 1232 	mov	r6,a
      0004D2 BD 08 05         [24] 1233 	cjne	r5,#0x08,00330$
      0004D5 BE 00 02         [24] 1234 	cjne	r6,#0x00,00330$
      0004D8 80 03            [24] 1235 	sjmp	00331$
      0004DA                       1236 00330$:
      0004DA 02r07r84         [24] 1237 	ljmp	00113$
      0004DD                       1238 00331$:
                                   1239 ;	calc.c:75: printstr("\r\n");
      0004DD 7Cr17            [12] 1240 	mov	r4,#___str_3
      0004DF 7Ds00            [12] 1241 	mov	r5,#(___str_3 >> 8)
      0004E1 7E 80            [12] 1242 	mov	r6,#0x80
                                   1243 ;	calc.c:20: return;
      0004E3                       1244 00149$:
                                   1245 ;	calc.c:18: for (; *s; s++) putchar(*s);
      0004E3 8C 82            [24] 1246 	mov	dpl,r4
      0004E5 8D 83            [24] 1247 	mov	dph,r5
      0004E7 8E F0            [24] 1248 	mov	b,r6
      0004E9 12r00r00         [24] 1249 	lcall	__gptrget
      0004EC FB               [12] 1250 	mov	r3,a
      0004ED 60 20            [24] 1251 	jz	00126$
      0004EF 7A 00            [12] 1252 	mov	r2,#0x00
      0004F1 8B 82            [24] 1253 	mov	dpl,r3
      0004F3 8A 83            [24] 1254 	mov	dph,r2
      0004F5 C0 07            [24] 1255 	push	ar7
      0004F7 C0 06            [24] 1256 	push	ar6
      0004F9 C0 05            [24] 1257 	push	ar5
      0004FB C0 04            [24] 1258 	push	ar4
      0004FD 12r00r00         [24] 1259 	lcall	_putchar
      000500 D0 04            [24] 1260 	pop	ar4
      000502 D0 05            [24] 1261 	pop	ar5
      000504 D0 06            [24] 1262 	pop	ar6
      000506 D0 07            [24] 1263 	pop	ar7
      000508 0C               [12] 1264 	inc	r4
                                   1265 ;	calc.c:75: printstr("\r\n");
      000509 BC 00 D7         [24] 1266 	cjne	r4,#0x00,00149$
      00050C 0D               [12] 1267 	inc	r5
      00050D 80 D4            [24] 1268 	sjmp	00149$
      00050F                       1269 00126$:
                                   1270 ;	calc.c:76: for (r = stack_pop(ctx->ss, &d); r > 0; r = stack_pop(ctx->ss, &d)) {
      00050F 8F 06            [24] 1271 	mov	ar6,r7
      000511 E5*00            [12] 1272 	mov	a,_bp
      000513 24 05            [12] 1273 	add	a,#0x05
      000515 F8               [12] 1274 	mov	r0,a
      000516 A6 06            [24] 1275 	mov	@r0,ar6
      000518 08               [12] 1276 	inc	r0
      000519 76 00            [12] 1277 	mov	@r0,#0x00
      00051B 08               [12] 1278 	inc	r0
      00051C 76 40            [12] 1279 	mov	@r0,#0x40
      00051E E5*00            [12] 1280 	mov	a,_bp
      000520 24 0B            [12] 1281 	add	a,#0x0b
      000522 F8               [12] 1282 	mov	r0,a
      000523 E5*00            [12] 1283 	mov	a,_bp
      000525 24 08            [12] 1284 	add	a,#0x08
      000527 F9               [12] 1285 	mov	r1,a
      000528 74 14            [12] 1286 	mov	a,#0x14
      00052A 26               [12] 1287 	add	a,@r0
      00052B F7               [12] 1288 	mov	@r1,a
      00052C 74 40            [12] 1289 	mov	a,#0x40
      00052E 08               [12] 1290 	inc	r0
      00052F 36               [12] 1291 	addc	a,@r0
      000530 09               [12] 1292 	inc	r1
      000531 F7               [12] 1293 	mov	@r1,a
      000532 08               [12] 1294 	inc	r0
      000533 09               [12] 1295 	inc	r1
      000534 E6               [12] 1296 	mov	a,@r0
      000535 F7               [12] 1297 	mov	@r1,a
      000536 E5*00            [12] 1298 	mov	a,_bp
      000538 24 08            [12] 1299 	add	a,#0x08
      00053A F8               [12] 1300 	mov	r0,a
      00053B 86 82            [24] 1301 	mov	dpl,@r0
      00053D 08               [12] 1302 	inc	r0
      00053E 86 83            [24] 1303 	mov	dph,@r0
      000540 08               [12] 1304 	inc	r0
      000541 86 F0            [24] 1305 	mov	b,@r0
      000543 12r00r00         [24] 1306 	lcall	__gptrget
      000546 FA               [12] 1307 	mov	r2,a
      000547 A3               [24] 1308 	inc	dptr
      000548 12r00r00         [24] 1309 	lcall	__gptrget
      00054B FB               [12] 1310 	mov	r3,a
      00054C A3               [24] 1311 	inc	dptr
      00054D 12r00r00         [24] 1312 	lcall	__gptrget
      000550 FE               [12] 1313 	mov	r6,a
      000551 C0 07            [24] 1314 	push	ar7
      000553 E5*00            [12] 1315 	mov	a,_bp
      000555 24 05            [12] 1316 	add	a,#0x05
      000557 F8               [12] 1317 	mov	r0,a
      000558 E6               [12] 1318 	mov	a,@r0
      000559 C0 E0            [24] 1319 	push	acc
      00055B 08               [12] 1320 	inc	r0
      00055C E6               [12] 1321 	mov	a,@r0
      00055D C0 E0            [24] 1322 	push	acc
      00055F 08               [12] 1323 	inc	r0
      000560 E6               [12] 1324 	mov	a,@r0
      000561 C0 E0            [24] 1325 	push	acc
      000563 8A 82            [24] 1326 	mov	dpl,r2
      000565 8B 83            [24] 1327 	mov	dph,r3
      000567 8E F0            [24] 1328 	mov	b,r6
      000569 12r00r00         [24] 1329 	lcall	_stack_pop
      00056C AD 82            [24] 1330 	mov	r5,dpl
      00056E AE 83            [24] 1331 	mov	r6,dph
      000570 15 81            [12] 1332 	dec	sp
      000572 15 81            [12] 1333 	dec	sp
      000574 15 81            [12] 1334 	dec	sp
      000576 D0 07            [24] 1335 	pop	ar7
      000578                       1336 00160$:
      000578 C3               [12] 1337 	clr	c
      000579 E4               [12] 1338 	clr	a
      00057A 9D               [12] 1339 	subb	a,r5
      00057B 74 80            [12] 1340 	mov	a,#(0x00 ^ 0x80)
      00057D 8E F0            [24] 1341 	mov	b,r6
      00057F 63 F0 80         [24] 1342 	xrl	b,#0x80
      000582 95 F0            [12] 1343 	subb	a,b
      000584 40 03            [24] 1344 	jc	00334$
      000586 02r07r84         [24] 1345 	ljmp	00113$
      000589                       1346 00334$:
                                   1347 ;	calc.c:77: printstr("SSPA\t");
      000589 7Dr32            [12] 1348 	mov	r5,#___str_6
      00058B 7Bs00            [12] 1349 	mov	r3,#(___str_6 >> 8)
      00058D 7A 80            [12] 1350 	mov	r2,#0x80
                                   1351 ;	calc.c:20: return;
      00058F                       1352 00152$:
                                   1353 ;	calc.c:18: for (; *s; s++) putchar(*s);
      00058F 8D 82            [24] 1354 	mov	dpl,r5
      000591 8B 83            [24] 1355 	mov	dph,r3
      000593 8A F0            [24] 1356 	mov	b,r2
      000595 12r00r00         [24] 1357 	lcall	__gptrget
      000598 FE               [12] 1358 	mov	r6,a
      000599 60 26            [24] 1359 	jz	00128$
      00059B C0 07            [24] 1360 	push	ar7
      00059D 8E 04            [24] 1361 	mov	ar4,r6
      00059F 7F 00            [12] 1362 	mov	r7,#0x00
      0005A1 8C 82            [24] 1363 	mov	dpl,r4
      0005A3 8F 83            [24] 1364 	mov	dph,r7
      0005A5 C0 07            [24] 1365 	push	ar7
      0005A7 C0 05            [24] 1366 	push	ar5
      0005A9 C0 03            [24] 1367 	push	ar3
      0005AB C0 02            [24] 1368 	push	ar2
      0005AD 12r00r00         [24] 1369 	lcall	_putchar
      0005B0 D0 02            [24] 1370 	pop	ar2
      0005B2 D0 03            [24] 1371 	pop	ar3
      0005B4 D0 05            [24] 1372 	pop	ar5
      0005B6 D0 07            [24] 1373 	pop	ar7
      0005B8 0D               [12] 1374 	inc	r5
      0005B9 BD 00 01         [24] 1375 	cjne	r5,#0x00,00336$
      0005BC 0B               [12] 1376 	inc	r3
      0005BD                       1377 00336$:
      0005BD D0 07            [24] 1378 	pop	ar7
                                   1379 ;	calc.c:77: printstr("SSPA\t");
      0005BF 80 CE            [24] 1380 	sjmp	00152$
      0005C1                       1381 00128$:
                                   1382 ;	calc.c:78: printall(d);
      0005C1 C0 07            [24] 1383 	push	ar7
      0005C3 E5*00            [12] 1384 	mov	a,_bp
      0005C5 24 0E            [12] 1385 	add	a,#0x0e
      0005C7 F8               [12] 1386 	mov	r0,a
      0005C8 E5*00            [12] 1387 	mov	a,_bp
      0005CA 24 12            [12] 1388 	add	a,#0x12
      0005CC F9               [12] 1389 	mov	r1,a
      0005CD E6               [12] 1390 	mov	a,@r0
      0005CE F7               [12] 1391 	mov	@r1,a
      0005CF 08               [12] 1392 	inc	r0
      0005D0 09               [12] 1393 	inc	r1
      0005D1 E6               [12] 1394 	mov	a,@r0
      0005D2 F7               [12] 1395 	mov	@r1,a
      0005D3 08               [12] 1396 	inc	r0
      0005D4 09               [12] 1397 	inc	r1
      0005D5 E6               [12] 1398 	mov	a,@r0
      0005D6 F7               [12] 1399 	mov	@r1,a
      0005D7 08               [12] 1400 	inc	r0
      0005D8 09               [12] 1401 	inc	r1
      0005D9 E6               [12] 1402 	mov	a,@r0
      0005DA F7               [12] 1403 	mov	@r1,a
      0005DB E5*00            [12] 1404 	mov	a,_bp
      0005DD 24 12            [12] 1405 	add	a,#0x12
      0005DF F8               [12] 1406 	mov	r0,a
      0005E0 86 02            [24] 1407 	mov	ar2,@r0
      0005E2 08               [12] 1408 	inc	r0
      0005E3 86 03            [24] 1409 	mov	ar3,@r0
      0005E5 08               [12] 1410 	inc	r0
      0005E6 86 04            [24] 1411 	mov	ar4,@r0
      0005E8 08               [12] 1412 	inc	r0
      0005E9 86 07            [24] 1413 	mov	ar7,@r0
                                   1414 ;	calc.c:33: printf("%08lx\t", d);
      0005EB C0 07            [24] 1415 	push	ar7
      0005ED C0 04            [24] 1416 	push	ar4
      0005EF C0 03            [24] 1417 	push	ar3
      0005F1 C0 02            [24] 1418 	push	ar2
      0005F3 E5*00            [12] 1419 	mov	a,_bp
      0005F5 24 12            [12] 1420 	add	a,#0x12
      0005F7 F8               [12] 1421 	mov	r0,a
      0005F8 E6               [12] 1422 	mov	a,@r0
      0005F9 C0 E0            [24] 1423 	push	acc
      0005FB 08               [12] 1424 	inc	r0
      0005FC E6               [12] 1425 	mov	a,@r0
      0005FD C0 E0            [24] 1426 	push	acc
      0005FF 08               [12] 1427 	inc	r0
      000600 E6               [12] 1428 	mov	a,@r0
      000601 C0 E0            [24] 1429 	push	acc
      000603 08               [12] 1430 	inc	r0
      000604 E6               [12] 1431 	mov	a,@r0
      000605 C0 E0            [24] 1432 	push	acc
      000607 74r00            [12] 1433 	mov	a,#___str_0
      000609 C0 E0            [24] 1434 	push	acc
      00060B 74s00            [12] 1435 	mov	a,#(___str_0 >> 8)
      00060D C0 E0            [24] 1436 	push	acc
      00060F 74 80            [12] 1437 	mov	a,#0x80
      000611 C0 E0            [24] 1438 	push	acc
      000613 12r00r00         [24] 1439 	lcall	_printf
      000616 E5 81            [12] 1440 	mov	a,sp
      000618 24 F9            [12] 1441 	add	a,#0xf9
      00061A F5 81            [12] 1442 	mov	sp,a
      00061C D0 02            [24] 1443 	pop	ar2
      00061E D0 03            [24] 1444 	pop	ar3
      000620 D0 04            [24] 1445 	pop	ar4
      000622 D0 07            [24] 1446 	pop	ar7
                                   1447 ;	calc.c:34: printf("% 11ld\t", d);
      000624 C0 07            [24] 1448 	push	ar7
      000626 C0 04            [24] 1449 	push	ar4
      000628 C0 03            [24] 1450 	push	ar3
      00062A C0 02            [24] 1451 	push	ar2
      00062C C0 02            [24] 1452 	push	ar2
      00062E C0 03            [24] 1453 	push	ar3
      000630 C0 04            [24] 1454 	push	ar4
      000632 C0 07            [24] 1455 	push	ar7
      000634 74r07            [12] 1456 	mov	a,#___str_1
      000636 C0 E0            [24] 1457 	push	acc
      000638 74s00            [12] 1458 	mov	a,#(___str_1 >> 8)
      00063A C0 E0            [24] 1459 	push	acc
      00063C 74 80            [12] 1460 	mov	a,#0x80
      00063E C0 E0            [24] 1461 	push	acc
      000640 12r00r00         [24] 1462 	lcall	_printf
      000643 E5 81            [12] 1463 	mov	a,sp
      000645 24 F9            [12] 1464 	add	a,#0xf9
      000647 F5 81            [12] 1465 	mov	sp,a
      000649 D0 02            [24] 1466 	pop	ar2
      00064B D0 03            [24] 1467 	pop	ar3
      00064D D0 04            [24] 1468 	pop	ar4
      00064F D0 07            [24] 1469 	pop	ar7
                                   1470 ;	calc.c:35: printf("%011lo\t", d);
      000651 C0 07            [24] 1471 	push	ar7
      000653 C0 04            [24] 1472 	push	ar4
      000655 C0 03            [24] 1473 	push	ar3
      000657 C0 02            [24] 1474 	push	ar2
      000659 C0 02            [24] 1475 	push	ar2
      00065B C0 03            [24] 1476 	push	ar3
      00065D C0 04            [24] 1477 	push	ar4
      00065F C0 07            [24] 1478 	push	ar7
      000661 74r0F            [12] 1479 	mov	a,#___str_2
      000663 C0 E0            [24] 1480 	push	acc
      000665 74s00            [12] 1481 	mov	a,#(___str_2 >> 8)
      000667 C0 E0            [24] 1482 	push	acc
      000669 74 80            [12] 1483 	mov	a,#0x80
      00066B C0 E0            [24] 1484 	push	acc
      00066D 12r00r00         [24] 1485 	lcall	_printf
      000670 E5 81            [12] 1486 	mov	a,sp
      000672 24 F9            [12] 1487 	add	a,#0xf9
      000674 F5 81            [12] 1488 	mov	sp,a
      000676 D0 02            [24] 1489 	pop	ar2
      000678 D0 03            [24] 1490 	pop	ar3
      00067A D0 04            [24] 1491 	pop	ar4
      00067C D0 07            [24] 1492 	pop	ar7
                                   1493 ;	calc.c:36: printbin(d);
      00067E E5*00            [12] 1494 	mov	a,_bp
      000680 24 16            [12] 1495 	add	a,#0x16
      000682 F8               [12] 1496 	mov	r0,a
      000683 A6 02            [24] 1497 	mov	@r0,ar2
      000685 08               [12] 1498 	inc	r0
      000686 A6 03            [24] 1499 	mov	@r0,ar3
      000688 08               [12] 1500 	inc	r0
      000689 A6 04            [24] 1501 	mov	@r0,ar4
      00068B 08               [12] 1502 	inc	r0
      00068C A6 07            [24] 1503 	mov	@r0,ar7
                                   1504 ;	calc.c:26: for (mask = 0x80000000lu; mask; mask >>= 1)
      00068E E5*00            [12] 1505 	mov	a,_bp
      000690 24 1A            [12] 1506 	add	a,#0x1a
      000692 F8               [12] 1507 	mov	r0,a
      000693 E4               [12] 1508 	clr	a
      000694 F6               [12] 1509 	mov	@r0,a
      000695 08               [12] 1510 	inc	r0
      000696 F6               [12] 1511 	mov	@r0,a
      000697 08               [12] 1512 	inc	r0
      000698 F6               [12] 1513 	mov	@r0,a
      000699 08               [12] 1514 	inc	r0
      00069A 76 80            [12] 1515 	mov	@r0,#0x80
                                   1516 ;	calc.c:83: return 1;
      00069C D0 07            [24] 1517 	pop	ar7
                                   1518 ;	calc.c:26: for (mask = 0x80000000lu; mask; mask >>= 1)
      00069E                       1519 00154$:
                                   1520 ;	calc.c:27: (void)putchar((d & mask) ? (int)'1' : (int)'0');
      00069E C0 07            [24] 1521 	push	ar7
      0006A0 E5*00            [12] 1522 	mov	a,_bp
      0006A2 24 16            [12] 1523 	add	a,#0x16
      0006A4 F8               [12] 1524 	mov	r0,a
      0006A5 86 02            [24] 1525 	mov	ar2,@r0
      0006A7 08               [12] 1526 	inc	r0
      0006A8 86 03            [24] 1527 	mov	ar3,@r0
      0006AA 08               [12] 1528 	inc	r0
      0006AB 86 04            [24] 1529 	mov	ar4,@r0
      0006AD 08               [12] 1530 	inc	r0
      0006AE 86 07            [24] 1531 	mov	ar7,@r0
      0006B0 E5*00            [12] 1532 	mov	a,_bp
      0006B2 24 1A            [12] 1533 	add	a,#0x1a
      0006B4 F8               [12] 1534 	mov	r0,a
      0006B5 E6               [12] 1535 	mov	a,@r0
      0006B6 52 02            [12] 1536 	anl	ar2,a
      0006B8 08               [12] 1537 	inc	r0
      0006B9 E6               [12] 1538 	mov	a,@r0
      0006BA 52 03            [12] 1539 	anl	ar3,a
      0006BC 08               [12] 1540 	inc	r0
      0006BD E6               [12] 1541 	mov	a,@r0
      0006BE 52 04            [12] 1542 	anl	ar4,a
      0006C0 08               [12] 1543 	inc	r0
      0006C1 E6               [12] 1544 	mov	a,@r0
      0006C2 52 07            [12] 1545 	anl	ar7,a
      0006C4 EA               [12] 1546 	mov	a,r2
      0006C5 4B               [12] 1547 	orl	a,r3
      0006C6 4C               [12] 1548 	orl	a,r4
      0006C7 4F               [12] 1549 	orl	a,r7
      0006C8 D0 07            [24] 1550 	pop	ar7
      0006CA 60 06            [24] 1551 	jz	00166$
      0006CC 7B 31            [12] 1552 	mov	r3,#0x31
      0006CE 7C 00            [12] 1553 	mov	r4,#0x00
      0006D0 80 04            [24] 1554 	sjmp	00167$
      0006D2                       1555 00166$:
      0006D2 7B 30            [12] 1556 	mov	r3,#0x30
      0006D4 7C 00            [12] 1557 	mov	r4,#0x00
      0006D6                       1558 00167$:
      0006D6 8B 82            [24] 1559 	mov	dpl,r3
      0006D8 8C 83            [24] 1560 	mov	dph,r4
      0006DA C0 07            [24] 1561 	push	ar7
      0006DC 12r00r00         [24] 1562 	lcall	_putchar
      0006DF D0 07            [24] 1563 	pop	ar7
                                   1564 ;	calc.c:26: for (mask = 0x80000000lu; mask; mask >>= 1)
      0006E1 E5*00            [12] 1565 	mov	a,_bp
      0006E3 24 1A            [12] 1566 	add	a,#0x1a
      0006E5 F8               [12] 1567 	mov	r0,a
      0006E6 08               [12] 1568 	inc	r0
      0006E7 08               [12] 1569 	inc	r0
      0006E8 08               [12] 1570 	inc	r0
      0006E9 E6               [12] 1571 	mov	a,@r0
      0006EA C3               [12] 1572 	clr	c
      0006EB 13               [12] 1573 	rrc	a
      0006EC F6               [12] 1574 	mov	@r0,a
      0006ED 18               [12] 1575 	dec	r0
      0006EE E6               [12] 1576 	mov	a,@r0
      0006EF 13               [12] 1577 	rrc	a
      0006F0 F6               [12] 1578 	mov	@r0,a
      0006F1 18               [12] 1579 	dec	r0
      0006F2 E6               [12] 1580 	mov	a,@r0
      0006F3 13               [12] 1581 	rrc	a
      0006F4 F6               [12] 1582 	mov	@r0,a
      0006F5 18               [12] 1583 	dec	r0
      0006F6 E6               [12] 1584 	mov	a,@r0
      0006F7 13               [12] 1585 	rrc	a
      0006F8 F6               [12] 1586 	mov	@r0,a
      0006F9 E5*00            [12] 1587 	mov	a,_bp
      0006FB 24 1A            [12] 1588 	add	a,#0x1a
      0006FD F8               [12] 1589 	mov	r0,a
      0006FE E6               [12] 1590 	mov	a,@r0
      0006FF 08               [12] 1591 	inc	r0
      000700 46               [12] 1592 	orl	a,@r0
      000701 08               [12] 1593 	inc	r0
      000702 46               [12] 1594 	orl	a,@r0
      000703 08               [12] 1595 	inc	r0
      000704 46               [12] 1596 	orl	a,@r0
      000705 70 97            [24] 1597 	jnz	00154$
                                   1598 ;	calc.c:79: printstr("\r\n");
      000707 7Dr17            [12] 1599 	mov	r5,#___str_3
      000709 7Bs00            [12] 1600 	mov	r3,#(___str_3 >> 8)
      00070B 7A 80            [12] 1601 	mov	r2,#0x80
                                   1602 ;	calc.c:20: return;
      00070D                       1603 00157$:
                                   1604 ;	calc.c:18: for (; *s; s++) putchar(*s);
      00070D 8D 82            [24] 1605 	mov	dpl,r5
      00070F 8B 83            [24] 1606 	mov	dph,r3
      000711 8A F0            [24] 1607 	mov	b,r2
      000713 12r00r00         [24] 1608 	lcall	__gptrget
      000716 FE               [12] 1609 	mov	r6,a
      000717 60 26            [24] 1610 	jz	00133$
      000719 C0 07            [24] 1611 	push	ar7
      00071B 8E 04            [24] 1612 	mov	ar4,r6
      00071D 7F 00            [12] 1613 	mov	r7,#0x00
      00071F 8C 82            [24] 1614 	mov	dpl,r4
      000721 8F 83            [24] 1615 	mov	dph,r7
      000723 C0 07            [24] 1616 	push	ar7
      000725 C0 05            [24] 1617 	push	ar5
      000727 C0 03            [24] 1618 	push	ar3
      000729 C0 02            [24] 1619 	push	ar2
      00072B 12r00r00         [24] 1620 	lcall	_putchar
      00072E D0 02            [24] 1621 	pop	ar2
      000730 D0 03            [24] 1622 	pop	ar3
      000732 D0 05            [24] 1623 	pop	ar5
      000734 D0 07            [24] 1624 	pop	ar7
      000736 0D               [12] 1625 	inc	r5
      000737 BD 00 01         [24] 1626 	cjne	r5,#0x00,00340$
      00073A 0B               [12] 1627 	inc	r3
      00073B                       1628 00340$:
      00073B D0 07            [24] 1629 	pop	ar7
                                   1630 ;	calc.c:79: printstr("\r\n");
      00073D 80 CE            [24] 1631 	sjmp	00157$
      00073F                       1632 00133$:
                                   1633 ;	calc.c:76: for (r = stack_pop(ctx->ss, &d); r > 0; r = stack_pop(ctx->ss, &d)) {
      00073F 8F 06            [24] 1634 	mov	ar6,r7
      000741 7D 00            [12] 1635 	mov	r5,#0x00
      000743 7A 40            [12] 1636 	mov	r2,#0x40
      000745 C0 07            [24] 1637 	push	ar7
      000747 E5*00            [12] 1638 	mov	a,_bp
      000749 24 08            [12] 1639 	add	a,#0x08
      00074B F8               [12] 1640 	mov	r0,a
      00074C 86 82            [24] 1641 	mov	dpl,@r0
      00074E 08               [12] 1642 	inc	r0
      00074F 86 83            [24] 1643 	mov	dph,@r0
      000751 08               [12] 1644 	inc	r0
      000752 86 F0            [24] 1645 	mov	b,@r0
      000754 12r00r00         [24] 1646 	lcall	__gptrget
      000757 FB               [12] 1647 	mov	r3,a
      000758 A3               [24] 1648 	inc	dptr
      000759 12r00r00         [24] 1649 	lcall	__gptrget
      00075C FC               [12] 1650 	mov	r4,a
      00075D A3               [24] 1651 	inc	dptr
      00075E 12r00r00         [24] 1652 	lcall	__gptrget
      000761 FF               [12] 1653 	mov	r7,a
      000762 C0 06            [24] 1654 	push	ar6
      000764 C0 05            [24] 1655 	push	ar5
      000766 C0 02            [24] 1656 	push	ar2
      000768 8B 82            [24] 1657 	mov	dpl,r3
      00076A 8C 83            [24] 1658 	mov	dph,r4
      00076C 8F F0            [24] 1659 	mov	b,r7
      00076E 12r00r00         [24] 1660 	lcall	_stack_pop
      000771 AC 82            [24] 1661 	mov	r4,dpl
      000773 AF 83            [24] 1662 	mov	r7,dph
      000775 15 81            [12] 1663 	dec	sp
      000777 15 81            [12] 1664 	dec	sp
      000779 15 81            [12] 1665 	dec	sp
      00077B 8C 05            [24] 1666 	mov	ar5,r4
      00077D 8F 06            [24] 1667 	mov	ar6,r7
      00077F D0 07            [24] 1668 	pop	ar7
      000781 02r05r78         [24] 1669 	ljmp	00160$
      000784                       1670 00113$:
                                   1671 ;	calc.c:83: return 1;
      000784 90 00 01         [24] 1672 	mov	dptr,#0x0001
                                   1673 ;	calc.c:84: }
      000787 85*00 81         [24] 1674 	mov	sp,_bp
      00078A D0*00            [24] 1675 	pop	_bp
      00078C 22               [24] 1676 	ret
                                   1677 ;------------------------------------------------------------
                                   1678 ;Allocation info for local variables in function 'dump_peek'
                                   1679 ;------------------------------------------------------------
                                   1680 ;d                         Allocated to stack - _bp -6
                                   1681 ;_ctx                      Allocated to registers 
                                   1682 ;__1310720021              Allocated to registers 
                                   1683 ;s                         Allocated to registers r5 r6 r7 
                                   1684 ;__1310720023              Allocated to registers r4 r5 r6 r7 
                                   1685 ;d                         Allocated to registers 
                                   1686 ;__1310720001              Allocated to registers 
                                   1687 ;d                         Allocated to stack - _bp +1
                                   1688 ;mask                      Allocated to stack - _bp +5
                                   1689 ;__1310720025              Allocated to registers 
                                   1690 ;s                         Allocated to registers r5 r6 r7 
                                   1691 ;------------------------------------------------------------
                                   1692 ;	calc.c:86: static int dump_peek(void *_ctx, long d) __reentrant {
                                   1693 ;	-----------------------------------------
                                   1694 ;	 function dump_peek
                                   1695 ;	-----------------------------------------
      00078D                       1696 _dump_peek:
      00078D C0*00            [24] 1697 	push	_bp
      00078F E5 81            [12] 1698 	mov	a,sp
      000791 F5*00            [12] 1699 	mov	_bp,a
      000793 24 08            [12] 1700 	add	a,#0x08
      000795 F5 81            [12] 1701 	mov	sp,a
                                   1702 ;	calc.c:89: printstr("PSVA\t");
      000797 7Dr38            [12] 1703 	mov	r5,#___str_7
      000799 7Es00            [12] 1704 	mov	r6,#(___str_7 >> 8)
      00079B 7F 80            [12] 1705 	mov	r7,#0x80
                                   1706 ;	calc.c:20: return;
      00079D                       1707 00109$:
                                   1708 ;	calc.c:18: for (; *s; s++) putchar(*s);
      00079D 8D 82            [24] 1709 	mov	dpl,r5
      00079F 8E 83            [24] 1710 	mov	dph,r6
      0007A1 8F F0            [24] 1711 	mov	b,r7
      0007A3 12r00r00         [24] 1712 	lcall	__gptrget
      0007A6 FC               [12] 1713 	mov	r4,a
      0007A7 60 1C            [24] 1714 	jz	00102$
      0007A9 7B 00            [12] 1715 	mov	r3,#0x00
      0007AB 8C 82            [24] 1716 	mov	dpl,r4
      0007AD 8B 83            [24] 1717 	mov	dph,r3
      0007AF C0 07            [24] 1718 	push	ar7
      0007B1 C0 06            [24] 1719 	push	ar6
      0007B3 C0 05            [24] 1720 	push	ar5
      0007B5 12r00r00         [24] 1721 	lcall	_putchar
      0007B8 D0 05            [24] 1722 	pop	ar5
      0007BA D0 06            [24] 1723 	pop	ar6
      0007BC D0 07            [24] 1724 	pop	ar7
      0007BE 0D               [12] 1725 	inc	r5
                                   1726 ;	calc.c:89: printstr("PSVA\t");
      0007BF BD 00 DB         [24] 1727 	cjne	r5,#0x00,00109$
      0007C2 0E               [12] 1728 	inc	r6
      0007C3 80 D8            [24] 1729 	sjmp	00109$
      0007C5                       1730 00102$:
                                   1731 ;	calc.c:90: printall(d);
      0007C5 E5*00            [12] 1732 	mov	a,_bp
      0007C7 24 FA            [12] 1733 	add	a,#0xfa
      0007C9 F8               [12] 1734 	mov	r0,a
      0007CA 86 04            [24] 1735 	mov	ar4,@r0
      0007CC 08               [12] 1736 	inc	r0
      0007CD 86 05            [24] 1737 	mov	ar5,@r0
      0007CF 08               [12] 1738 	inc	r0
      0007D0 86 06            [24] 1739 	mov	ar6,@r0
      0007D2 08               [12] 1740 	inc	r0
      0007D3 86 07            [24] 1741 	mov	ar7,@r0
                                   1742 ;	calc.c:33: printf("%08lx\t", d);
      0007D5 C0 07            [24] 1743 	push	ar7
      0007D7 C0 06            [24] 1744 	push	ar6
      0007D9 C0 05            [24] 1745 	push	ar5
      0007DB C0 04            [24] 1746 	push	ar4
      0007DD C0 04            [24] 1747 	push	ar4
      0007DF C0 05            [24] 1748 	push	ar5
      0007E1 C0 06            [24] 1749 	push	ar6
      0007E3 C0 07            [24] 1750 	push	ar7
      0007E5 74r00            [12] 1751 	mov	a,#___str_0
      0007E7 C0 E0            [24] 1752 	push	acc
      0007E9 74s00            [12] 1753 	mov	a,#(___str_0 >> 8)
      0007EB C0 E0            [24] 1754 	push	acc
      0007ED 74 80            [12] 1755 	mov	a,#0x80
      0007EF C0 E0            [24] 1756 	push	acc
      0007F1 12r00r00         [24] 1757 	lcall	_printf
      0007F4 E5 81            [12] 1758 	mov	a,sp
      0007F6 24 F9            [12] 1759 	add	a,#0xf9
      0007F8 F5 81            [12] 1760 	mov	sp,a
      0007FA D0 04            [24] 1761 	pop	ar4
      0007FC D0 05            [24] 1762 	pop	ar5
      0007FE D0 06            [24] 1763 	pop	ar6
      000800 D0 07            [24] 1764 	pop	ar7
                                   1765 ;	calc.c:34: printf("% 11ld\t", d);
      000802 C0 07            [24] 1766 	push	ar7
      000804 C0 06            [24] 1767 	push	ar6
      000806 C0 05            [24] 1768 	push	ar5
      000808 C0 04            [24] 1769 	push	ar4
      00080A C0 04            [24] 1770 	push	ar4
      00080C C0 05            [24] 1771 	push	ar5
      00080E C0 06            [24] 1772 	push	ar6
      000810 C0 07            [24] 1773 	push	ar7
      000812 74r07            [12] 1774 	mov	a,#___str_1
      000814 C0 E0            [24] 1775 	push	acc
      000816 74s00            [12] 1776 	mov	a,#(___str_1 >> 8)
      000818 C0 E0            [24] 1777 	push	acc
      00081A 74 80            [12] 1778 	mov	a,#0x80
      00081C C0 E0            [24] 1779 	push	acc
      00081E 12r00r00         [24] 1780 	lcall	_printf
      000821 E5 81            [12] 1781 	mov	a,sp
      000823 24 F9            [12] 1782 	add	a,#0xf9
      000825 F5 81            [12] 1783 	mov	sp,a
      000827 D0 04            [24] 1784 	pop	ar4
      000829 D0 05            [24] 1785 	pop	ar5
      00082B D0 06            [24] 1786 	pop	ar6
      00082D D0 07            [24] 1787 	pop	ar7
                                   1788 ;	calc.c:35: printf("%011lo\t", d);
      00082F C0 07            [24] 1789 	push	ar7
      000831 C0 06            [24] 1790 	push	ar6
      000833 C0 05            [24] 1791 	push	ar5
      000835 C0 04            [24] 1792 	push	ar4
      000837 C0 04            [24] 1793 	push	ar4
      000839 C0 05            [24] 1794 	push	ar5
      00083B C0 06            [24] 1795 	push	ar6
      00083D C0 07            [24] 1796 	push	ar7
      00083F 74r0F            [12] 1797 	mov	a,#___str_2
      000841 C0 E0            [24] 1798 	push	acc
      000843 74s00            [12] 1799 	mov	a,#(___str_2 >> 8)
      000845 C0 E0            [24] 1800 	push	acc
      000847 74 80            [12] 1801 	mov	a,#0x80
      000849 C0 E0            [24] 1802 	push	acc
      00084B 12r00r00         [24] 1803 	lcall	_printf
      00084E E5 81            [12] 1804 	mov	a,sp
      000850 24 F9            [12] 1805 	add	a,#0xf9
      000852 F5 81            [12] 1806 	mov	sp,a
      000854 D0 04            [24] 1807 	pop	ar4
      000856 D0 05            [24] 1808 	pop	ar5
      000858 D0 06            [24] 1809 	pop	ar6
      00085A D0 07            [24] 1810 	pop	ar7
                                   1811 ;	calc.c:36: printbin(d);
      00085C A8*00            [24] 1812 	mov	r0,_bp
      00085E 08               [12] 1813 	inc	r0
      00085F A6 04            [24] 1814 	mov	@r0,ar4
      000861 08               [12] 1815 	inc	r0
      000862 A6 05            [24] 1816 	mov	@r0,ar5
      000864 08               [12] 1817 	inc	r0
      000865 A6 06            [24] 1818 	mov	@r0,ar6
      000867 08               [12] 1819 	inc	r0
      000868 A6 07            [24] 1820 	mov	@r0,ar7
                                   1821 ;	calc.c:26: for (mask = 0x80000000lu; mask; mask >>= 1)
      00086A E5*00            [12] 1822 	mov	a,_bp
      00086C 24 05            [12] 1823 	add	a,#0x05
      00086E F8               [12] 1824 	mov	r0,a
      00086F E4               [12] 1825 	clr	a
      000870 F6               [12] 1826 	mov	@r0,a
      000871 08               [12] 1827 	inc	r0
      000872 F6               [12] 1828 	mov	@r0,a
      000873 08               [12] 1829 	inc	r0
      000874 F6               [12] 1830 	mov	@r0,a
      000875 08               [12] 1831 	inc	r0
      000876 76 80            [12] 1832 	mov	@r0,#0x80
      000878                       1833 00111$:
                                   1834 ;	calc.c:27: (void)putchar((d & mask) ? (int)'1' : (int)'0');
      000878 A8*00            [24] 1835 	mov	r0,_bp
      00087A 08               [12] 1836 	inc	r0
      00087B 86 04            [24] 1837 	mov	ar4,@r0
      00087D 08               [12] 1838 	inc	r0
      00087E 86 05            [24] 1839 	mov	ar5,@r0
      000880 08               [12] 1840 	inc	r0
      000881 86 06            [24] 1841 	mov	ar6,@r0
      000883 08               [12] 1842 	inc	r0
      000884 86 07            [24] 1843 	mov	ar7,@r0
      000886 E5*00            [12] 1844 	mov	a,_bp
      000888 24 05            [12] 1845 	add	a,#0x05
      00088A F8               [12] 1846 	mov	r0,a
      00088B E6               [12] 1847 	mov	a,@r0
      00088C 52 04            [12] 1848 	anl	ar4,a
      00088E 08               [12] 1849 	inc	r0
      00088F E6               [12] 1850 	mov	a,@r0
      000890 52 05            [12] 1851 	anl	ar5,a
      000892 08               [12] 1852 	inc	r0
      000893 E6               [12] 1853 	mov	a,@r0
      000894 52 06            [12] 1854 	anl	ar6,a
      000896 08               [12] 1855 	inc	r0
      000897 E6               [12] 1856 	mov	a,@r0
      000898 52 07            [12] 1857 	anl	ar7,a
      00089A EC               [12] 1858 	mov	a,r4
      00089B 4D               [12] 1859 	orl	a,r5
      00089C 4E               [12] 1860 	orl	a,r6
      00089D 4F               [12] 1861 	orl	a,r7
      00089E 60 06            [24] 1862 	jz	00118$
      0008A0 7E 31            [12] 1863 	mov	r6,#0x31
      0008A2 7F 00            [12] 1864 	mov	r7,#0x00
      0008A4 80 04            [24] 1865 	sjmp	00119$
      0008A6                       1866 00118$:
      0008A6 7E 30            [12] 1867 	mov	r6,#0x30
      0008A8 7F 00            [12] 1868 	mov	r7,#0x00
      0008AA                       1869 00119$:
      0008AA 8E 82            [24] 1870 	mov	dpl,r6
      0008AC 8F 83            [24] 1871 	mov	dph,r7
      0008AE 12r00r00         [24] 1872 	lcall	_putchar
                                   1873 ;	calc.c:26: for (mask = 0x80000000lu; mask; mask >>= 1)
      0008B1 E5*00            [12] 1874 	mov	a,_bp
      0008B3 24 05            [12] 1875 	add	a,#0x05
      0008B5 F8               [12] 1876 	mov	r0,a
      0008B6 08               [12] 1877 	inc	r0
      0008B7 08               [12] 1878 	inc	r0
      0008B8 08               [12] 1879 	inc	r0
      0008B9 E6               [12] 1880 	mov	a,@r0
      0008BA C3               [12] 1881 	clr	c
      0008BB 13               [12] 1882 	rrc	a
      0008BC F6               [12] 1883 	mov	@r0,a
      0008BD 18               [12] 1884 	dec	r0
      0008BE E6               [12] 1885 	mov	a,@r0
      0008BF 13               [12] 1886 	rrc	a
      0008C0 F6               [12] 1887 	mov	@r0,a
      0008C1 18               [12] 1888 	dec	r0
      0008C2 E6               [12] 1889 	mov	a,@r0
      0008C3 13               [12] 1890 	rrc	a
      0008C4 F6               [12] 1891 	mov	@r0,a
      0008C5 18               [12] 1892 	dec	r0
      0008C6 E6               [12] 1893 	mov	a,@r0
      0008C7 13               [12] 1894 	rrc	a
      0008C8 F6               [12] 1895 	mov	@r0,a
      0008C9 E5*00            [12] 1896 	mov	a,_bp
      0008CB 24 05            [12] 1897 	add	a,#0x05
      0008CD F8               [12] 1898 	mov	r0,a
      0008CE E6               [12] 1899 	mov	a,@r0
      0008CF 08               [12] 1900 	inc	r0
      0008D0 46               [12] 1901 	orl	a,@r0
      0008D1 08               [12] 1902 	inc	r0
      0008D2 46               [12] 1903 	orl	a,@r0
      0008D3 08               [12] 1904 	inc	r0
      0008D4 46               [12] 1905 	orl	a,@r0
      0008D5 70 A1            [24] 1906 	jnz	00111$
                                   1907 ;	calc.c:91: printstr("\r\n");
      0008D7 7Dr17            [12] 1908 	mov	r5,#___str_3
      0008D9 7Es00            [12] 1909 	mov	r6,#(___str_3 >> 8)
      0008DB 7F 80            [12] 1910 	mov	r7,#0x80
                                   1911 ;	calc.c:20: return;
      0008DD                       1912 00114$:
                                   1913 ;	calc.c:18: for (; *s; s++) putchar(*s);
      0008DD 8D 82            [24] 1914 	mov	dpl,r5
      0008DF 8E 83            [24] 1915 	mov	dph,r6
      0008E1 8F F0            [24] 1916 	mov	b,r7
      0008E3 12r00r00         [24] 1917 	lcall	__gptrget
      0008E6 FC               [12] 1918 	mov	r4,a
      0008E7 60 1C            [24] 1919 	jz	00107$
      0008E9 7B 00            [12] 1920 	mov	r3,#0x00
      0008EB 8C 82            [24] 1921 	mov	dpl,r4
      0008ED 8B 83            [24] 1922 	mov	dph,r3
      0008EF C0 07            [24] 1923 	push	ar7
      0008F1 C0 06            [24] 1924 	push	ar6
      0008F3 C0 05            [24] 1925 	push	ar5
      0008F5 12r00r00         [24] 1926 	lcall	_putchar
      0008F8 D0 05            [24] 1927 	pop	ar5
      0008FA D0 06            [24] 1928 	pop	ar6
      0008FC D0 07            [24] 1929 	pop	ar7
      0008FE 0D               [12] 1930 	inc	r5
                                   1931 ;	calc.c:91: printstr("\r\n");
      0008FF BD 00 DB         [24] 1932 	cjne	r5,#0x00,00114$
      000902 0E               [12] 1933 	inc	r6
      000903 80 D8            [24] 1934 	sjmp	00114$
      000905                       1935 00107$:
                                   1936 ;	calc.c:93: return 1;
      000905 90 00 01         [24] 1937 	mov	dptr,#0x0001
                                   1938 ;	calc.c:94: }
      000908 85*00 81         [24] 1939 	mov	sp,_bp
      00090B D0*00            [24] 1940 	pop	_bp
      00090D 22               [24] 1941 	ret
                                   1942 ;------------------------------------------------------------
                                   1943 ;Allocation info for local variables in function 'operator'
                                   1944 ;------------------------------------------------------------
                                   1945 ;delta                     Allocated to stack - _bp -5
                                   1946 ;_ctx                      Allocated to stack - _bp +1
                                   1947 ;ctx                       Allocated to stack - _bp +18
                                   1948 ;t0                        Allocated to registers r7 r6 r5 
                                   1949 ;d0                        Allocated to stack - _bp +21
                                   1950 ;d1                        Allocated to stack - _bp +25
                                   1951 ;__1966080027              Allocated to registers 
                                   1952 ;s                         Allocated to registers r7 r6 r5 
                                   1953 ;__1966080029              Allocated to registers 
                                   1954 ;s                         Allocated to registers r7 r6 r5 
                                   1955 ;__2621440031              Allocated to registers 
                                   1956 ;s                         Allocated to registers r7 r6 r5 
                                   1957 ;__2621440033              Allocated to registers r7 r6 r5 r4 
                                   1958 ;d                         Allocated to stack - _bp +29
                                   1959 ;__1310720001              Allocated to registers 
                                   1960 ;d                         Allocated to registers r7 r6 r5 r2 
                                   1961 ;mask                      Allocated to stack - _bp +33
                                   1962 ;__2621440035              Allocated to registers 
                                   1963 ;s                         Allocated to registers r7 r6 r5 
                                   1964 ;__1966080037              Allocated to registers 
                                   1965 ;s                         Allocated to registers r7 r6 r5 
                                   1966 ;__1966080039              Allocated to registers 
                                   1967 ;s                         Allocated to registers r7 r6 r5 
                                   1968 ;__1966080041              Allocated to registers 
                                   1969 ;s                         Allocated to registers r7 r6 r5 
                                   1970 ;__1966080043              Allocated to registers 
                                   1971 ;s                         Allocated to registers r7 r6 r5 
                                   1972 ;__2621440045              Allocated to registers 
                                   1973 ;s                         Allocated to registers r7 r6 r5 
                                   1974 ;__2621440047              Allocated to registers r7 r6 r5 r4 
                                   1975 ;d                         Allocated to stack - _bp +29
                                   1976 ;__1310720001              Allocated to registers 
                                   1977 ;d                         Allocated to registers r7 r6 r5 r2 
                                   1978 ;mask                      Allocated to stack - _bp +33
                                   1979 ;__2621440049              Allocated to registers 
                                   1980 ;s                         Allocated to registers r7 r6 r5 
                                   1981 ;__1966080051              Allocated to registers 
                                   1982 ;s                         Allocated to registers r7 r6 r5 
                                   1983 ;__1966080053              Allocated to registers 
                                   1984 ;s                         Allocated to registers r7 r6 r5 
                                   1985 ;__2621440055              Allocated to registers 
                                   1986 ;s                         Allocated to registers r7 r6 r5 
                                   1987 ;__1966080057              Allocated to registers 
                                   1988 ;s                         Allocated to registers r7 r6 r5 
                                   1989 ;__3276800059              Allocated to registers 
                                   1990 ;s                         Allocated to registers r7 r6 r5 
                                   1991 ;__1966080061              Allocated to registers 
                                   1992 ;s                         Allocated to registers r7 r6 r5 
                                   1993 ;__3276800063              Allocated to registers 
                                   1994 ;s                         Allocated to registers r7 r6 r5 
                                   1995 ;__1966080065              Allocated to registers 
                                   1996 ;s                         Allocated to registers r7 r6 r5 
                                   1997 ;__1966080067              Allocated to registers 
                                   1998 ;s                         Allocated to registers r7 r6 r5 
                                   1999 ;__1966080069              Allocated to registers 
                                   2000 ;s                         Allocated to registers r7 r6 r5 
                                   2001 ;__1966080071              Allocated to registers 
                                   2002 ;s                         Allocated to registers r7 r6 r5 
                                   2003 ;__1966080073              Allocated to registers 
                                   2004 ;s                         Allocated to registers r7 r6 r5 
                                   2005 ;__3276800075              Allocated to registers 
                                   2006 ;s                         Allocated to registers r7 r6 r5 
                                   2007 ;__1966080077              Allocated to registers 
                                   2008 ;s                         Allocated to registers r7 r6 r5 
                                   2009 ;__2621440079              Allocated to registers 
                                   2010 ;s                         Allocated to registers r7 r6 r5 
                                   2011 ;__1966080081              Allocated to registers 
                                   2012 ;s                         Allocated to registers r7 r6 r5 
                                   2013 ;__2621440083              Allocated to registers 
                                   2014 ;s                         Allocated to registers r7 r6 r5 
                                   2015 ;__1966080085              Allocated to registers 
                                   2016 ;s                         Allocated to registers r7 r6 r5 
                                   2017 ;__2621440087              Allocated to registers 
                                   2018 ;s                         Allocated to registers r7 r6 r5 
                                   2019 ;__1966080089              Allocated to registers 
                                   2020 ;s                         Allocated to registers r7 r6 r5 
                                   2021 ;__2621440091              Allocated to registers 
                                   2022 ;s                         Allocated to registers r7 r6 r5 
                                   2023 ;__2621440093              Allocated to registers 
                                   2024 ;s                         Allocated to registers r7 r6 r5 
                                   2025 ;__1966080095              Allocated to registers 
                                   2026 ;s                         Allocated to registers r7 r6 r5 
                                   2027 ;__2621440097              Allocated to registers 
                                   2028 ;s                         Allocated to registers r7 r6 r5 
                                   2029 ;__2621440099              Allocated to registers 
                                   2030 ;s                         Allocated to registers r7 r6 r5 
                                   2031 ;__1966080101              Allocated to registers 
                                   2032 ;s                         Allocated to registers r5 r4 r3 
                                   2033 ;__2621440103              Allocated to registers 
                                   2034 ;s                         Allocated to registers r5 r4 r3 
                                   2035 ;__1966080105              Allocated to registers 
                                   2036 ;s                         Allocated to registers r5 r4 r3 
                                   2037 ;__2621440107              Allocated to registers 
                                   2038 ;s                         Allocated to registers r5 r4 r3 
                                   2039 ;__1966080109              Allocated to registers 
                                   2040 ;s                         Allocated to registers r5 r4 r3 
                                   2041 ;__2621440111              Allocated to registers 
                                   2042 ;s                         Allocated to registers r5 r4 r3 
                                   2043 ;__1966080113              Allocated to registers 
                                   2044 ;s                         Allocated to registers r5 r4 r3 
                                   2045 ;__2621440115              Allocated to registers 
                                   2046 ;s                         Allocated to registers r5 r4 r3 
                                   2047 ;__1966080117              Allocated to registers 
                                   2048 ;s                         Allocated to registers r5 r4 r3 
                                   2049 ;__2621440119              Allocated to registers 
                                   2050 ;s                         Allocated to registers r5 r4 r3 
                                   2051 ;__1966080121              Allocated to registers 
                                   2052 ;s                         Allocated to registers r5 r4 r3 
                                   2053 ;__2621440123              Allocated to registers 
                                   2054 ;s                         Allocated to registers r5 r4 r3 
                                   2055 ;__1966080125              Allocated to registers 
                                   2056 ;s                         Allocated to registers r5 r4 r3 
                                   2057 ;sloc0                     Allocated to stack - _bp +346
                                   2058 ;sloc1                     Allocated to stack - _bp +4
                                   2059 ;sloc2                     Allocated to stack - _bp +7
                                   2060 ;sloc3                     Allocated to stack - _bp +11
                                   2061 ;sloc4                     Allocated to stack - _bp +14
                                   2062 ;------------------------------------------------------------
                                   2063 ;	calc.c:96: static int operator(void *_ctx, delta_t *delta) __reentrant {
                                   2064 ;	-----------------------------------------
                                   2065 ;	 function operator
                                   2066 ;	-----------------------------------------
      00090E                       2067 _operator:
      00090E C0*00            [24] 2068 	push	_bp
      000910 85 81*00         [24] 2069 	mov	_bp,sp
      000913 C0 82            [24] 2070 	push	dpl
      000915 C0 83            [24] 2071 	push	dph
      000917 C0 F0            [24] 2072 	push	b
      000919 E5 81            [12] 2073 	mov	a,sp
      00091B 24 21            [12] 2074 	add	a,#0x21
      00091D F5 81            [12] 2075 	mov	sp,a
                                   2076 ;	calc.c:97: calc_ctx_t *ctx = (calc_ctx_t *)_ctx;
      00091F A8*00            [24] 2077 	mov	r0,_bp
      000921 08               [12] 2078 	inc	r0
      000922 E5*00            [12] 2079 	mov	a,_bp
      000924 24 12            [12] 2080 	add	a,#0x12
      000926 F9               [12] 2081 	mov	r1,a
      000927 E6               [12] 2082 	mov	a,@r0
      000928 F7               [12] 2083 	mov	@r1,a
      000929 08               [12] 2084 	inc	r0
      00092A 09               [12] 2085 	inc	r1
      00092B E6               [12] 2086 	mov	a,@r0
      00092C F7               [12] 2087 	mov	@r1,a
      00092D 08               [12] 2088 	inc	r0
      00092E 09               [12] 2089 	inc	r1
      00092F E6               [12] 2090 	mov	a,@r0
      000930 F7               [12] 2091 	mov	@r1,a
                                   2092 ;	calc.c:101: switch (ctx->digit[0]) {
      000931 E5*00            [12] 2093 	mov	a,_bp
      000933 24 12            [12] 2094 	add	a,#0x12
      000935 F8               [12] 2095 	mov	r0,a
      000936 74 07            [12] 2096 	mov	a,#0x07
      000938 26               [12] 2097 	add	a,@r0
      000939 FD               [12] 2098 	mov	r5,a
      00093A E4               [12] 2099 	clr	a
      00093B 08               [12] 2100 	inc	r0
      00093C 36               [12] 2101 	addc	a,@r0
      00093D FE               [12] 2102 	mov	r6,a
      00093E 08               [12] 2103 	inc	r0
      00093F 86 07            [24] 2104 	mov	ar7,@r0
      000941 8D 82            [24] 2105 	mov	dpl,r5
      000943 8E 83            [24] 2106 	mov	dph,r6
      000945 8F F0            [24] 2107 	mov	b,r7
      000947 12r00r00         [24] 2108 	lcall	__gptrget
      00094A FC               [12] 2109 	mov	r4,a
      00094B BC 23 03         [24] 2110 	cjne	r4,#0x23,01234$
      00094E 02r20r23         [24] 2111 	ljmp	00189$
      000951                       2112 01234$:
      000951 BC 25 03         [24] 2113 	cjne	r4,#0x25,01235$
      000954 02r20r23         [24] 2114 	ljmp	00189$
      000957                       2115 01235$:
      000957 BC 26 03         [24] 2116 	cjne	r4,#0x26,01236$
      00095A 02r23r2D         [24] 2117 	ljmp	00202$
      00095D                       2118 01236$:
      00095D BC 2A 03         [24] 2119 	cjne	r4,#0x2a,01237$
      000960 02r1Br57         [24] 2120 	ljmp	00167$
      000963                       2121 01237$:
      000963 BC 2B 03         [24] 2122 	cjne	r4,#0x2b,01238$
      000966 02r18r28         [24] 2123 	ljmp	00153$
      000969                       2124 01238$:
      000969 BC 2D 03         [24] 2125 	cjne	r4,#0x2d,01239$
      00096C 02r19rBF         [24] 2126 	ljmp	00160$
      00096F                       2127 01239$:
      00096F BC 2E 03         [24] 2128 	cjne	r4,#0x2e,01240$
      000972 02r0CrDB         [24] 2129 	ljmp	00109$
      000975                       2130 01240$:
      000975 BC 2F 03         [24] 2131 	cjne	r4,#0x2f,01241$
      000978 02r1Dr15         [24] 2132 	ljmp	00175$
      00097B                       2133 01241$:
      00097B BC 3C 03         [24] 2134 	cjne	r4,#0x3c,01242$
      00097E 02r2BrC0         [24] 2135 	ljmp	00237$
      000981                       2136 01242$:
      000981 BC 3E 03         [24] 2137 	cjne	r4,#0x3e,01243$
      000984 02r28r43         [24] 2138 	ljmp	00223$
      000987                       2139 01243$:
      000987 BC 4D 03         [24] 2140 	cjne	r4,#0x4d,01244$
      00098A 02r12r6E         [24] 2141 	ljmp	00127$
      00098D                       2142 01244$:
      00098D BC 50 03         [24] 2143 	cjne	r4,#0x50,01245$
      000990 02r0Fr14         [24] 2144 	ljmp	00113$
      000993                       2145 01245$:
      000993 BC 54 03         [24] 2146 	cjne	r4,#0x54,01246$
      000996 02r15rB8         [24] 2147 	ljmp	00145$
      000999                       2148 01246$:
      000999 BC 55 03         [24] 2149 	cjne	r4,#0x55,01247$
      00099C 02r14rB9         [24] 2150 	ljmp	00139$
      00099F                       2151 01247$:
      00099F BC 56 03         [24] 2152 	cjne	r4,#0x56,01248$
      0009A2 02r0Cr22         [24] 2153 	ljmp	00105$
      0009A5                       2154 01248$:
      0009A5 BC 58 03         [24] 2155 	cjne	r4,#0x58,01249$
      0009A8 02r17r89         [24] 2156 	ljmp	00152$
      0009AB                       2157 01249$:
      0009AB BC 5C 03         [24] 2158 	cjne	r4,#0x5c,01250$
      0009AE 02r1Dr15         [24] 2159 	ljmp	00175$
      0009B1                       2160 01250$:
      0009B1 BC 5D 03         [24] 2161 	cjne	r4,#0x5d,01251$
      0009B4 02r29rF9         [24] 2162 	ljmp	00230$
      0009B7                       2163 01251$:
      0009B7 BC 5E 03         [24] 2164 	cjne	r4,#0x5e,01252$
      0009BA 02r26r91         [24] 2165 	ljmp	00216$
      0009BD                       2166 01252$:
      0009BD BC 6D 03         [24] 2167 	cjne	r4,#0x6d,01253$
      0009C0 02r11r22         [24] 2168 	ljmp	00121$
      0009C3                       2169 01253$:
      0009C3 BC 70 03         [24] 2170 	cjne	r4,#0x70,01254$
      0009C6 02r0CrDB         [24] 2171 	ljmp	00109$
      0009C9                       2172 01254$:
      0009C9 BC 75 03         [24] 2173 	cjne	r4,#0x75,01255$
      0009CC 02r13rBA         [24] 2174 	ljmp	00133$
      0009CF                       2175 01255$:
      0009CF BC 76 02         [24] 2176 	cjne	r4,#0x76,01256$
      0009D2 80 15            [24] 2177 	sjmp	00101$
      0009D4                       2178 01256$:
      0009D4 BC 78 03         [24] 2179 	cjne	r4,#0x78,01257$
      0009D7 02r0Fr69         [24] 2180 	ljmp	00114$
      0009DA                       2181 01257$:
      0009DA BC 7C 03         [24] 2182 	cjne	r4,#0x7c,01258$
      0009DD 02r24rDF         [24] 2183 	ljmp	00209$
      0009E0                       2184 01258$:
      0009E0 BC 7E 03         [24] 2185 	cjne	r4,#0x7e,01259$
      0009E3 02r2Dr7B         [24] 2186 	ljmp	00244$
      0009E6                       2187 01259$:
      0009E6 02r2Er60         [24] 2188 	ljmp	00248$
                                   2189 ;	calc.c:102: case 'v':
      0009E9                       2190 00101$:
                                   2191 ;	calc.c:103: printstr("\r\n");
      0009E9 7Fr17            [12] 2192 	mov	r7,#___str_3
      0009EB 7Es00            [12] 2193 	mov	r6,#(___str_3 >> 8)
      0009ED 7D 80            [12] 2194 	mov	r5,#0x80
                                   2195 ;	calc.c:20: return;
      0009EF                       2196 00353$:
                                   2197 ;	calc.c:18: for (; *s; s++) putchar(*s);
      0009EF 8F 82            [24] 2198 	mov	dpl,r7
      0009F1 8E 83            [24] 2199 	mov	dph,r6
      0009F3 8D F0            [24] 2200 	mov	b,r5
      0009F5 12r00r00         [24] 2201 	lcall	__gptrget
      0009F8 FC               [12] 2202 	mov	r4,a
      0009F9 60 1C            [24] 2203 	jz	00251$
      0009FB 7B 00            [12] 2204 	mov	r3,#0x00
      0009FD 8C 82            [24] 2205 	mov	dpl,r4
      0009FF 8B 83            [24] 2206 	mov	dph,r3
      000A01 C0 07            [24] 2207 	push	ar7
      000A03 C0 06            [24] 2208 	push	ar6
      000A05 C0 05            [24] 2209 	push	ar5
      000A07 12r00r00         [24] 2210 	lcall	_putchar
      000A0A D0 05            [24] 2211 	pop	ar5
      000A0C D0 06            [24] 2212 	pop	ar6
      000A0E D0 07            [24] 2213 	pop	ar7
      000A10 0F               [12] 2214 	inc	r7
                                   2215 ;	calc.c:103: printstr("\r\n");
      000A11 BF 00 DB         [24] 2216 	cjne	r7,#0x00,00353$
      000A14 0E               [12] 2217 	inc	r6
      000A15 80 D8            [24] 2218 	sjmp	00353$
      000A17                       2219 00251$:
                                   2220 ;	calc.c:104: if (!stack_peek(ctx->ps, &d0)) printstr("stack underflow\r\n");
      000A17 E5*00            [12] 2221 	mov	a,_bp
      000A19 24 15            [12] 2222 	add	a,#0x15
      000A1B FF               [12] 2223 	mov	r7,a
      000A1C 7E 00            [12] 2224 	mov	r6,#0x00
      000A1E 7D 40            [12] 2225 	mov	r5,#0x40
      000A20 E5*00            [12] 2226 	mov	a,_bp
      000A22 24 12            [12] 2227 	add	a,#0x12
      000A24 F8               [12] 2228 	mov	r0,a
      000A25 74 11            [12] 2229 	mov	a,#0x11
      000A27 26               [12] 2230 	add	a,@r0
      000A28 FA               [12] 2231 	mov	r2,a
      000A29 ED               [12] 2232 	mov	a,r5
      000A2A 08               [12] 2233 	inc	r0
      000A2B 36               [12] 2234 	addc	a,@r0
      000A2C FB               [12] 2235 	mov	r3,a
      000A2D 08               [12] 2236 	inc	r0
      000A2E 86 04            [24] 2237 	mov	ar4,@r0
      000A30 8A 82            [24] 2238 	mov	dpl,r2
      000A32 8B 83            [24] 2239 	mov	dph,r3
      000A34 8C F0            [24] 2240 	mov	b,r4
      000A36 12r00r00         [24] 2241 	lcall	__gptrget
      000A39 FA               [12] 2242 	mov	r2,a
      000A3A A3               [24] 2243 	inc	dptr
      000A3B 12r00r00         [24] 2244 	lcall	__gptrget
      000A3E FB               [12] 2245 	mov	r3,a
      000A3F A3               [24] 2246 	inc	dptr
      000A40 12r00r00         [24] 2247 	lcall	__gptrget
      000A43 FC               [12] 2248 	mov	r4,a
      000A44 C0 07            [24] 2249 	push	ar7
      000A46 C0 06            [24] 2250 	push	ar6
      000A48 C0 05            [24] 2251 	push	ar5
      000A4A 8A 82            [24] 2252 	mov	dpl,r2
      000A4C 8B 83            [24] 2253 	mov	dph,r3
      000A4E 8C F0            [24] 2254 	mov	b,r4
      000A50 12r00r00         [24] 2255 	lcall	_stack_peek
      000A53 AB 82            [24] 2256 	mov	r3,dpl
      000A55 AC 83            [24] 2257 	mov	r4,dph
      000A57 15 81            [12] 2258 	dec	sp
      000A59 15 81            [12] 2259 	dec	sp
      000A5B 15 81            [12] 2260 	dec	sp
      000A5D EB               [12] 2261 	mov	a,r3
      000A5E 4C               [12] 2262 	orl	a,r4
      000A5F 70 31            [24] 2263 	jnz	00103$
      000A61 7Fr1A            [12] 2264 	mov	r7,#___str_4
      000A63 7Es00            [12] 2265 	mov	r6,#(___str_4 >> 8)
      000A65 7D 80            [12] 2266 	mov	r5,#0x80
                                   2267 ;	calc.c:20: return;
      000A67                       2268 00356$:
                                   2269 ;	calc.c:18: for (; *s; s++) putchar(*s);
      000A67 8F 82            [24] 2270 	mov	dpl,r7
      000A69 8E 83            [24] 2271 	mov	dph,r6
      000A6B 8D F0            [24] 2272 	mov	b,r5
      000A6D 12r00r00         [24] 2273 	lcall	__gptrget
      000A70 FC               [12] 2274 	mov	r4,a
      000A71 70 03            [24] 2275 	jnz	01263$
      000A73 02r2Er65         [24] 2276 	ljmp	00249$
      000A76                       2277 01263$:
      000A76 7B 00            [12] 2278 	mov	r3,#0x00
      000A78 8C 82            [24] 2279 	mov	dpl,r4
      000A7A 8B 83            [24] 2280 	mov	dph,r3
      000A7C C0 07            [24] 2281 	push	ar7
      000A7E C0 06            [24] 2282 	push	ar6
      000A80 C0 05            [24] 2283 	push	ar5
      000A82 12r00r00         [24] 2284 	lcall	_putchar
      000A85 D0 05            [24] 2285 	pop	ar5
      000A87 D0 06            [24] 2286 	pop	ar6
      000A89 D0 07            [24] 2287 	pop	ar7
      000A8B 0F               [12] 2288 	inc	r7
                                   2289 ;	calc.c:104: if (!stack_peek(ctx->ps, &d0)) printstr("stack underflow\r\n");
      000A8C BF 00 D8         [24] 2290 	cjne	r7,#0x00,00356$
      000A8F 0E               [12] 2291 	inc	r6
      000A90 80 D5            [24] 2292 	sjmp	00356$
      000A92                       2293 00103$:
                                   2294 ;	calc.c:106: printstr("PSVTOP\t");
      000A92 7Fr3E            [12] 2295 	mov	r7,#___str_8
      000A94 7Es00            [12] 2296 	mov	r6,#(___str_8 >> 8)
      000A96 7D 80            [12] 2297 	mov	r5,#0x80
                                   2298 ;	calc.c:20: return;
      000A98                       2299 00359$:
                                   2300 ;	calc.c:18: for (; *s; s++) putchar(*s);
      000A98 8F 82            [24] 2301 	mov	dpl,r7
      000A9A 8E 83            [24] 2302 	mov	dph,r6
      000A9C 8D F0            [24] 2303 	mov	b,r5
      000A9E 12r00r00         [24] 2304 	lcall	__gptrget
      000AA1 FC               [12] 2305 	mov	r4,a
      000AA2 60 1C            [24] 2306 	jz	00255$
      000AA4 7B 00            [12] 2307 	mov	r3,#0x00
      000AA6 8C 82            [24] 2308 	mov	dpl,r4
      000AA8 8B 83            [24] 2309 	mov	dph,r3
      000AAA C0 07            [24] 2310 	push	ar7
      000AAC C0 06            [24] 2311 	push	ar6
      000AAE C0 05            [24] 2312 	push	ar5
      000AB0 12r00r00         [24] 2313 	lcall	_putchar
      000AB3 D0 05            [24] 2314 	pop	ar5
      000AB5 D0 06            [24] 2315 	pop	ar6
      000AB7 D0 07            [24] 2316 	pop	ar7
      000AB9 0F               [12] 2317 	inc	r7
                                   2318 ;	calc.c:106: printstr("PSVTOP\t");
      000ABA BF 00 DB         [24] 2319 	cjne	r7,#0x00,00359$
      000ABD 0E               [12] 2320 	inc	r6
      000ABE 80 D8            [24] 2321 	sjmp	00359$
      000AC0                       2322 00255$:
                                   2323 ;	calc.c:107: printall(d0);
      000AC0 E5*00            [12] 2324 	mov	a,_bp
      000AC2 24 15            [12] 2325 	add	a,#0x15
      000AC4 F8               [12] 2326 	mov	r0,a
      000AC5 86 07            [24] 2327 	mov	ar7,@r0
      000AC7 08               [12] 2328 	inc	r0
      000AC8 86 06            [24] 2329 	mov	ar6,@r0
      000ACA 08               [12] 2330 	inc	r0
      000ACB 86 05            [24] 2331 	mov	ar5,@r0
      000ACD 08               [12] 2332 	inc	r0
      000ACE 86 04            [24] 2333 	mov	ar4,@r0
      000AD0 E5*00            [12] 2334 	mov	a,_bp
      000AD2 24 1D            [12] 2335 	add	a,#0x1d
      000AD4 F8               [12] 2336 	mov	r0,a
      000AD5 A6 07            [24] 2337 	mov	@r0,ar7
      000AD7 08               [12] 2338 	inc	r0
      000AD8 A6 06            [24] 2339 	mov	@r0,ar6
      000ADA 08               [12] 2340 	inc	r0
      000ADB A6 05            [24] 2341 	mov	@r0,ar5
      000ADD 08               [12] 2342 	inc	r0
      000ADE A6 04            [24] 2343 	mov	@r0,ar4
                                   2344 ;	calc.c:33: printf("%08lx\t", d);
      000AE0 C0 07            [24] 2345 	push	ar7
      000AE2 C0 06            [24] 2346 	push	ar6
      000AE4 C0 05            [24] 2347 	push	ar5
      000AE6 C0 04            [24] 2348 	push	ar4
      000AE8 74r00            [12] 2349 	mov	a,#___str_0
      000AEA C0 E0            [24] 2350 	push	acc
      000AEC 74s00            [12] 2351 	mov	a,#(___str_0 >> 8)
      000AEE C0 E0            [24] 2352 	push	acc
      000AF0 74 80            [12] 2353 	mov	a,#0x80
      000AF2 C0 E0            [24] 2354 	push	acc
      000AF4 12r00r00         [24] 2355 	lcall	_printf
      000AF7 E5 81            [12] 2356 	mov	a,sp
      000AF9 24 F9            [12] 2357 	add	a,#0xf9
      000AFB F5 81            [12] 2358 	mov	sp,a
                                   2359 ;	calc.c:34: printf("% 11ld\t", d);
      000AFD E5*00            [12] 2360 	mov	a,_bp
      000AFF 24 1D            [12] 2361 	add	a,#0x1d
      000B01 F8               [12] 2362 	mov	r0,a
      000B02 E6               [12] 2363 	mov	a,@r0
      000B03 C0 E0            [24] 2364 	push	acc
      000B05 08               [12] 2365 	inc	r0
      000B06 E6               [12] 2366 	mov	a,@r0
      000B07 C0 E0            [24] 2367 	push	acc
      000B09 08               [12] 2368 	inc	r0
      000B0A E6               [12] 2369 	mov	a,@r0
      000B0B C0 E0            [24] 2370 	push	acc
      000B0D 08               [12] 2371 	inc	r0
      000B0E E6               [12] 2372 	mov	a,@r0
      000B0F C0 E0            [24] 2373 	push	acc
      000B11 74r07            [12] 2374 	mov	a,#___str_1
      000B13 C0 E0            [24] 2375 	push	acc
      000B15 74s00            [12] 2376 	mov	a,#(___str_1 >> 8)
      000B17 C0 E0            [24] 2377 	push	acc
      000B19 74 80            [12] 2378 	mov	a,#0x80
      000B1B C0 E0            [24] 2379 	push	acc
      000B1D 12r00r00         [24] 2380 	lcall	_printf
      000B20 E5 81            [12] 2381 	mov	a,sp
      000B22 24 F9            [12] 2382 	add	a,#0xf9
      000B24 F5 81            [12] 2383 	mov	sp,a
                                   2384 ;	calc.c:35: printf("%011lo\t", d);
      000B26 E5*00            [12] 2385 	mov	a,_bp
      000B28 24 1D            [12] 2386 	add	a,#0x1d
      000B2A F8               [12] 2387 	mov	r0,a
      000B2B E6               [12] 2388 	mov	a,@r0
      000B2C C0 E0            [24] 2389 	push	acc
      000B2E 08               [12] 2390 	inc	r0
      000B2F E6               [12] 2391 	mov	a,@r0
      000B30 C0 E0            [24] 2392 	push	acc
      000B32 08               [12] 2393 	inc	r0
      000B33 E6               [12] 2394 	mov	a,@r0
      000B34 C0 E0            [24] 2395 	push	acc
      000B36 08               [12] 2396 	inc	r0
      000B37 E6               [12] 2397 	mov	a,@r0
      000B38 C0 E0            [24] 2398 	push	acc
      000B3A 74r0F            [12] 2399 	mov	a,#___str_2
      000B3C C0 E0            [24] 2400 	push	acc
      000B3E 74s00            [12] 2401 	mov	a,#(___str_2 >> 8)
      000B40 C0 E0            [24] 2402 	push	acc
      000B42 74 80            [12] 2403 	mov	a,#0x80
      000B44 C0 E0            [24] 2404 	push	acc
      000B46 12r00r00         [24] 2405 	lcall	_printf
      000B49 E5 81            [12] 2406 	mov	a,sp
      000B4B 24 F9            [12] 2407 	add	a,#0xf9
      000B4D F5 81            [12] 2408 	mov	sp,a
                                   2409 ;	calc.c:36: printbin(d);
      000B4F E5*00            [12] 2410 	mov	a,_bp
      000B51 24 1D            [12] 2411 	add	a,#0x1d
      000B53 F8               [12] 2412 	mov	r0,a
      000B54 86 07            [24] 2413 	mov	ar7,@r0
      000B56 08               [12] 2414 	inc	r0
      000B57 86 06            [24] 2415 	mov	ar6,@r0
      000B59 08               [12] 2416 	inc	r0
      000B5A 86 05            [24] 2417 	mov	ar5,@r0
      000B5C 08               [12] 2418 	inc	r0
      000B5D 86 02            [24] 2419 	mov	ar2,@r0
                                   2420 ;	calc.c:26: for (mask = 0x80000000lu; mask; mask >>= 1)
      000B5F E5*00            [12] 2421 	mov	a,_bp
      000B61 24 21            [12] 2422 	add	a,#0x21
      000B63 F8               [12] 2423 	mov	r0,a
      000B64 E4               [12] 2424 	clr	a
      000B65 F6               [12] 2425 	mov	@r0,a
      000B66 08               [12] 2426 	inc	r0
      000B67 F6               [12] 2427 	mov	@r0,a
      000B68 08               [12] 2428 	inc	r0
      000B69 F6               [12] 2429 	mov	@r0,a
      000B6A 08               [12] 2430 	inc	r0
      000B6B 76 80            [12] 2431 	mov	@r0,#0x80
      000B6D                       2432 00361$:
                                   2433 ;	calc.c:27: (void)putchar((d & mask) ? (int)'1' : (int)'0');
      000B6D E5*00            [12] 2434 	mov	a,_bp
      000B6F 24 07            [12] 2435 	add	a,#0x07
      000B71 F8               [12] 2436 	mov	r0,a
      000B72 A6 07            [24] 2437 	mov	@r0,ar7
      000B74 08               [12] 2438 	inc	r0
      000B75 A6 06            [24] 2439 	mov	@r0,ar6
      000B77 08               [12] 2440 	inc	r0
      000B78 A6 05            [24] 2441 	mov	@r0,ar5
      000B7A 08               [12] 2442 	inc	r0
      000B7B A6 02            [24] 2443 	mov	@r0,ar2
      000B7D E5*00            [12] 2444 	mov	a,_bp
      000B7F 24 07            [12] 2445 	add	a,#0x07
      000B81 F8               [12] 2446 	mov	r0,a
      000B82 E5*00            [12] 2447 	mov	a,_bp
      000B84 24 21            [12] 2448 	add	a,#0x21
      000B86 F9               [12] 2449 	mov	r1,a
      000B87 E7               [12] 2450 	mov	a,@r1
      000B88 56               [12] 2451 	anl	a,@r0
      000B89 F6               [12] 2452 	mov	@r0,a
      000B8A 09               [12] 2453 	inc	r1
      000B8B E7               [12] 2454 	mov	a,@r1
      000B8C 08               [12] 2455 	inc	r0
      000B8D 56               [12] 2456 	anl	a,@r0
      000B8E F6               [12] 2457 	mov	@r0,a
      000B8F 09               [12] 2458 	inc	r1
      000B90 E7               [12] 2459 	mov	a,@r1
      000B91 08               [12] 2460 	inc	r0
      000B92 56               [12] 2461 	anl	a,@r0
      000B93 F6               [12] 2462 	mov	@r0,a
      000B94 09               [12] 2463 	inc	r1
      000B95 E7               [12] 2464 	mov	a,@r1
      000B96 08               [12] 2465 	inc	r0
      000B97 56               [12] 2466 	anl	a,@r0
      000B98 F6               [12] 2467 	mov	@r0,a
      000B99 E5*00            [12] 2468 	mov	a,_bp
      000B9B 24 07            [12] 2469 	add	a,#0x07
      000B9D F8               [12] 2470 	mov	r0,a
      000B9E E6               [12] 2471 	mov	a,@r0
      000B9F 08               [12] 2472 	inc	r0
      000BA0 46               [12] 2473 	orl	a,@r0
      000BA1 08               [12] 2474 	inc	r0
      000BA2 46               [12] 2475 	orl	a,@r0
      000BA3 08               [12] 2476 	inc	r0
      000BA4 46               [12] 2477 	orl	a,@r0
      000BA5 60 06            [24] 2478 	jz	00502$
      000BA7 7B 31            [12] 2479 	mov	r3,#0x31
      000BA9 7C 00            [12] 2480 	mov	r4,#0x00
      000BAB 80 04            [24] 2481 	sjmp	00503$
      000BAD                       2482 00502$:
      000BAD 7B 30            [12] 2483 	mov	r3,#0x30
      000BAF 7C 00            [12] 2484 	mov	r4,#0x00
      000BB1                       2485 00503$:
      000BB1 8B 82            [24] 2486 	mov	dpl,r3
      000BB3 8C 83            [24] 2487 	mov	dph,r4
      000BB5 C0 07            [24] 2488 	push	ar7
      000BB7 C0 06            [24] 2489 	push	ar6
      000BB9 C0 05            [24] 2490 	push	ar5
      000BBB C0 02            [24] 2491 	push	ar2
      000BBD 12r00r00         [24] 2492 	lcall	_putchar
      000BC0 D0 02            [24] 2493 	pop	ar2
      000BC2 D0 05            [24] 2494 	pop	ar5
      000BC4 D0 06            [24] 2495 	pop	ar6
      000BC6 D0 07            [24] 2496 	pop	ar7
                                   2497 ;	calc.c:26: for (mask = 0x80000000lu; mask; mask >>= 1)
      000BC8 E5*00            [12] 2498 	mov	a,_bp
      000BCA 24 21            [12] 2499 	add	a,#0x21
      000BCC F8               [12] 2500 	mov	r0,a
      000BCD 08               [12] 2501 	inc	r0
      000BCE 08               [12] 2502 	inc	r0
      000BCF 08               [12] 2503 	inc	r0
      000BD0 E6               [12] 2504 	mov	a,@r0
      000BD1 C3               [12] 2505 	clr	c
      000BD2 13               [12] 2506 	rrc	a
      000BD3 F6               [12] 2507 	mov	@r0,a
      000BD4 18               [12] 2508 	dec	r0
      000BD5 E6               [12] 2509 	mov	a,@r0
      000BD6 13               [12] 2510 	rrc	a
      000BD7 F6               [12] 2511 	mov	@r0,a
      000BD8 18               [12] 2512 	dec	r0
      000BD9 E6               [12] 2513 	mov	a,@r0
      000BDA 13               [12] 2514 	rrc	a
      000BDB F6               [12] 2515 	mov	@r0,a
      000BDC 18               [12] 2516 	dec	r0
      000BDD E6               [12] 2517 	mov	a,@r0
      000BDE 13               [12] 2518 	rrc	a
      000BDF F6               [12] 2519 	mov	@r0,a
      000BE0 E5*00            [12] 2520 	mov	a,_bp
      000BE2 24 21            [12] 2521 	add	a,#0x21
      000BE4 F8               [12] 2522 	mov	r0,a
      000BE5 E6               [12] 2523 	mov	a,@r0
      000BE6 08               [12] 2524 	inc	r0
      000BE7 46               [12] 2525 	orl	a,@r0
      000BE8 08               [12] 2526 	inc	r0
      000BE9 46               [12] 2527 	orl	a,@r0
      000BEA 08               [12] 2528 	inc	r0
      000BEB 46               [12] 2529 	orl	a,@r0
      000BEC 60 03            [24] 2530 	jz	01268$
      000BEE 02r0Br6D         [24] 2531 	ljmp	00361$
      000BF1                       2532 01268$:
                                   2533 ;	calc.c:108: printstr("\r\n");
      000BF1 7Fr17            [12] 2534 	mov	r7,#___str_3
      000BF3 7Es00            [12] 2535 	mov	r6,#(___str_3 >> 8)
      000BF5 7D 80            [12] 2536 	mov	r5,#0x80
                                   2537 ;	calc.c:20: return;
      000BF7                       2538 00364$:
                                   2539 ;	calc.c:18: for (; *s; s++) putchar(*s);
      000BF7 8F 82            [24] 2540 	mov	dpl,r7
      000BF9 8E 83            [24] 2541 	mov	dph,r6
      000BFB 8D F0            [24] 2542 	mov	b,r5
      000BFD 12r00r00         [24] 2543 	lcall	__gptrget
      000C00 FC               [12] 2544 	mov	r4,a
      000C01 70 03            [24] 2545 	jnz	01269$
      000C03 02r2Er65         [24] 2546 	ljmp	00249$
      000C06                       2547 01269$:
      000C06 7B 00            [12] 2548 	mov	r3,#0x00
      000C08 8C 82            [24] 2549 	mov	dpl,r4
      000C0A 8B 83            [24] 2550 	mov	dph,r3
      000C0C C0 07            [24] 2551 	push	ar7
      000C0E C0 06            [24] 2552 	push	ar6
      000C10 C0 05            [24] 2553 	push	ar5
      000C12 12r00r00         [24] 2554 	lcall	_putchar
      000C15 D0 05            [24] 2555 	pop	ar5
      000C17 D0 06            [24] 2556 	pop	ar6
      000C19 D0 07            [24] 2557 	pop	ar7
      000C1B 0F               [12] 2558 	inc	r7
                                   2559 ;	calc.c:111: case 'V':
      000C1C BF 00 D8         [24] 2560 	cjne	r7,#0x00,00364$
      000C1F 0E               [12] 2561 	inc	r6
      000C20 80 D5            [24] 2562 	sjmp	00364$
      000C22                       2563 00105$:
                                   2564 ;	calc.c:112: printstr("\r\n");
      000C22 7Fr17            [12] 2565 	mov	r7,#___str_3
      000C24 7Es00            [12] 2566 	mov	r6,#(___str_3 >> 8)
      000C26 7D 80            [12] 2567 	mov	r5,#0x80
                                   2568 ;	calc.c:20: return;
      000C28                       2569 00367$:
                                   2570 ;	calc.c:18: for (; *s; s++) putchar(*s);
      000C28 8F 82            [24] 2571 	mov	dpl,r7
      000C2A 8E 83            [24] 2572 	mov	dph,r6
      000C2C 8D F0            [24] 2573 	mov	b,r5
      000C2E 12r00r00         [24] 2574 	lcall	__gptrget
      000C31 FC               [12] 2575 	mov	r4,a
      000C32 60 1C            [24] 2576 	jz	00262$
      000C34 7B 00            [12] 2577 	mov	r3,#0x00
      000C36 8C 82            [24] 2578 	mov	dpl,r4
      000C38 8B 83            [24] 2579 	mov	dph,r3
      000C3A C0 07            [24] 2580 	push	ar7
      000C3C C0 06            [24] 2581 	push	ar6
      000C3E C0 05            [24] 2582 	push	ar5
      000C40 12r00r00         [24] 2583 	lcall	_putchar
      000C43 D0 05            [24] 2584 	pop	ar5
      000C45 D0 06            [24] 2585 	pop	ar6
      000C47 D0 07            [24] 2586 	pop	ar7
      000C49 0F               [12] 2587 	inc	r7
                                   2588 ;	calc.c:112: printstr("\r\n");
      000C4A BF 00 DB         [24] 2589 	cjne	r7,#0x00,00367$
      000C4D 0E               [12] 2590 	inc	r6
      000C4E 80 D8            [24] 2591 	sjmp	00367$
      000C50                       2592 00262$:
                                   2593 ;	calc.c:113: if (!stack_iter_peek(ctx->ps, dump_peek, ctx)) printstr("stack underflow\r\n");
      000C50 E5*00            [12] 2594 	mov	a,_bp
      000C52 24 12            [12] 2595 	add	a,#0x12
      000C54 F8               [12] 2596 	mov	r0,a
      000C55 86 07            [24] 2597 	mov	ar7,@r0
      000C57 08               [12] 2598 	inc	r0
      000C58 86 06            [24] 2599 	mov	ar6,@r0
      000C5A 08               [12] 2600 	inc	r0
      000C5B 86 05            [24] 2601 	mov	ar5,@r0
      000C5D E5*00            [12] 2602 	mov	a,_bp
      000C5F 24 12            [12] 2603 	add	a,#0x12
      000C61 F8               [12] 2604 	mov	r0,a
      000C62 74 11            [12] 2605 	mov	a,#0x11
      000C64 26               [12] 2606 	add	a,@r0
      000C65 FA               [12] 2607 	mov	r2,a
      000C66 74 40            [12] 2608 	mov	a,#0x40
      000C68 08               [12] 2609 	inc	r0
      000C69 36               [12] 2610 	addc	a,@r0
      000C6A FB               [12] 2611 	mov	r3,a
      000C6B 08               [12] 2612 	inc	r0
      000C6C 86 04            [24] 2613 	mov	ar4,@r0
      000C6E 8A 82            [24] 2614 	mov	dpl,r2
      000C70 8B 83            [24] 2615 	mov	dph,r3
      000C72 8C F0            [24] 2616 	mov	b,r4
      000C74 12r00r00         [24] 2617 	lcall	__gptrget
      000C77 FA               [12] 2618 	mov	r2,a
      000C78 A3               [24] 2619 	inc	dptr
      000C79 12r00r00         [24] 2620 	lcall	__gptrget
      000C7C FB               [12] 2621 	mov	r3,a
      000C7D A3               [24] 2622 	inc	dptr
      000C7E 12r00r00         [24] 2623 	lcall	__gptrget
      000C81 FC               [12] 2624 	mov	r4,a
      000C82 C0 07            [24] 2625 	push	ar7
      000C84 C0 06            [24] 2626 	push	ar6
      000C86 C0 05            [24] 2627 	push	ar5
      000C88 74r8D            [12] 2628 	mov	a,#_dump_peek
      000C8A C0 E0            [24] 2629 	push	acc
      000C8C 74s07            [12] 2630 	mov	a,#(_dump_peek >> 8)
      000C8E C0 E0            [24] 2631 	push	acc
      000C90 8A 82            [24] 2632 	mov	dpl,r2
      000C92 8B 83            [24] 2633 	mov	dph,r3
      000C94 8C F0            [24] 2634 	mov	b,r4
      000C96 12r00r00         [24] 2635 	lcall	_stack_iter_peek
      000C99 AB 82            [24] 2636 	mov	r3,dpl
      000C9B AC 83            [24] 2637 	mov	r4,dph
      000C9D E5 81            [12] 2638 	mov	a,sp
      000C9F 24 FB            [12] 2639 	add	a,#0xfb
      000CA1 F5 81            [12] 2640 	mov	sp,a
      000CA3 EB               [12] 2641 	mov	a,r3
      000CA4 4C               [12] 2642 	orl	a,r4
      000CA5 60 03            [24] 2643 	jz	01273$
      000CA7 02r2Er65         [24] 2644 	ljmp	00249$
      000CAA                       2645 01273$:
      000CAA 7Fr1A            [12] 2646 	mov	r7,#___str_4
      000CAC 7Es00            [12] 2647 	mov	r6,#(___str_4 >> 8)
      000CAE 7D 80            [12] 2648 	mov	r5,#0x80
                                   2649 ;	calc.c:20: return;
      000CB0                       2650 00370$:
                                   2651 ;	calc.c:18: for (; *s; s++) putchar(*s);
      000CB0 8F 82            [24] 2652 	mov	dpl,r7
      000CB2 8E 83            [24] 2653 	mov	dph,r6
      000CB4 8D F0            [24] 2654 	mov	b,r5
      000CB6 12r00r00         [24] 2655 	lcall	__gptrget
      000CB9 FC               [12] 2656 	mov	r4,a
      000CBA 70 03            [24] 2657 	jnz	01274$
      000CBC 02r2Er65         [24] 2658 	ljmp	00249$
      000CBF                       2659 01274$:
      000CBF 7B 00            [12] 2660 	mov	r3,#0x00
      000CC1 8C 82            [24] 2661 	mov	dpl,r4
      000CC3 8B 83            [24] 2662 	mov	dph,r3
      000CC5 C0 07            [24] 2663 	push	ar7
      000CC7 C0 06            [24] 2664 	push	ar6
      000CC9 C0 05            [24] 2665 	push	ar5
      000CCB 12r00r00         [24] 2666 	lcall	_putchar
      000CCE D0 05            [24] 2667 	pop	ar5
      000CD0 D0 06            [24] 2668 	pop	ar6
      000CD2 D0 07            [24] 2669 	pop	ar7
      000CD4 0F               [12] 2670 	inc	r7
                                   2671 ;	calc.c:116: case 'p':
      000CD5 BF 00 D8         [24] 2672 	cjne	r7,#0x00,00370$
      000CD8 0E               [12] 2673 	inc	r6
      000CD9 80 D5            [24] 2674 	sjmp	00370$
      000CDB                       2675 00109$:
                                   2676 ;	calc.c:117: printstr("\r\n");
      000CDB 7Fr17            [12] 2677 	mov	r7,#___str_3
      000CDD 7Es00            [12] 2678 	mov	r6,#(___str_3 >> 8)
      000CDF 7D 80            [12] 2679 	mov	r5,#0x80
                                   2680 ;	calc.c:20: return;
      000CE1                       2681 00373$:
                                   2682 ;	calc.c:18: for (; *s; s++) putchar(*s);
      000CE1 8F 82            [24] 2683 	mov	dpl,r7
      000CE3 8E 83            [24] 2684 	mov	dph,r6
      000CE5 8D F0            [24] 2685 	mov	b,r5
      000CE7 12r00r00         [24] 2686 	lcall	__gptrget
      000CEA FC               [12] 2687 	mov	r4,a
      000CEB 60 1C            [24] 2688 	jz	00266$
      000CED 7B 00            [12] 2689 	mov	r3,#0x00
      000CEF 8C 82            [24] 2690 	mov	dpl,r4
      000CF1 8B 83            [24] 2691 	mov	dph,r3
      000CF3 C0 07            [24] 2692 	push	ar7
      000CF5 C0 06            [24] 2693 	push	ar6
      000CF7 C0 05            [24] 2694 	push	ar5
      000CF9 12r00r00         [24] 2695 	lcall	_putchar
      000CFC D0 05            [24] 2696 	pop	ar5
      000CFE D0 06            [24] 2697 	pop	ar6
      000D00 D0 07            [24] 2698 	pop	ar7
      000D02 0F               [12] 2699 	inc	r7
                                   2700 ;	calc.c:117: printstr("\r\n");
      000D03 BF 00 DB         [24] 2701 	cjne	r7,#0x00,00373$
      000D06 0E               [12] 2702 	inc	r6
      000D07 80 D8            [24] 2703 	sjmp	00373$
      000D09                       2704 00266$:
                                   2705 ;	calc.c:118: if (!stack_pop(ctx->ps, &d0)) printstr("stack underflow\r\n");
      000D09 E5*00            [12] 2706 	mov	a,_bp
      000D0B 24 15            [12] 2707 	add	a,#0x15
      000D0D FF               [12] 2708 	mov	r7,a
      000D0E 7E 00            [12] 2709 	mov	r6,#0x00
      000D10 7D 40            [12] 2710 	mov	r5,#0x40
      000D12 E5*00            [12] 2711 	mov	a,_bp
      000D14 24 12            [12] 2712 	add	a,#0x12
      000D16 F8               [12] 2713 	mov	r0,a
      000D17 74 11            [12] 2714 	mov	a,#0x11
      000D19 26               [12] 2715 	add	a,@r0
      000D1A FA               [12] 2716 	mov	r2,a
      000D1B ED               [12] 2717 	mov	a,r5
      000D1C 08               [12] 2718 	inc	r0
      000D1D 36               [12] 2719 	addc	a,@r0
      000D1E FB               [12] 2720 	mov	r3,a
      000D1F 08               [12] 2721 	inc	r0
      000D20 86 04            [24] 2722 	mov	ar4,@r0
      000D22 8A 82            [24] 2723 	mov	dpl,r2
      000D24 8B 83            [24] 2724 	mov	dph,r3
      000D26 8C F0            [24] 2725 	mov	b,r4
      000D28 12r00r00         [24] 2726 	lcall	__gptrget
      000D2B FA               [12] 2727 	mov	r2,a
      000D2C A3               [24] 2728 	inc	dptr
      000D2D 12r00r00         [24] 2729 	lcall	__gptrget
      000D30 FB               [12] 2730 	mov	r3,a
      000D31 A3               [24] 2731 	inc	dptr
      000D32 12r00r00         [24] 2732 	lcall	__gptrget
      000D35 FC               [12] 2733 	mov	r4,a
      000D36 C0 07            [24] 2734 	push	ar7
      000D38 C0 06            [24] 2735 	push	ar6
      000D3A C0 05            [24] 2736 	push	ar5
      000D3C 8A 82            [24] 2737 	mov	dpl,r2
      000D3E 8B 83            [24] 2738 	mov	dph,r3
      000D40 8C F0            [24] 2739 	mov	b,r4
      000D42 12r00r00         [24] 2740 	lcall	_stack_pop
      000D45 AB 82            [24] 2741 	mov	r3,dpl
      000D47 AC 83            [24] 2742 	mov	r4,dph
      000D49 15 81            [12] 2743 	dec	sp
      000D4B 15 81            [12] 2744 	dec	sp
      000D4D 15 81            [12] 2745 	dec	sp
      000D4F EB               [12] 2746 	mov	a,r3
      000D50 4C               [12] 2747 	orl	a,r4
      000D51 70 31            [24] 2748 	jnz	00111$
      000D53 7Fr1A            [12] 2749 	mov	r7,#___str_4
      000D55 7Es00            [12] 2750 	mov	r6,#(___str_4 >> 8)
      000D57 7D 80            [12] 2751 	mov	r5,#0x80
                                   2752 ;	calc.c:20: return;
      000D59                       2753 00376$:
                                   2754 ;	calc.c:18: for (; *s; s++) putchar(*s);
      000D59 8F 82            [24] 2755 	mov	dpl,r7
      000D5B 8E 83            [24] 2756 	mov	dph,r6
      000D5D 8D F0            [24] 2757 	mov	b,r5
      000D5F 12r00r00         [24] 2758 	lcall	__gptrget
      000D62 FC               [12] 2759 	mov	r4,a
      000D63 70 03            [24] 2760 	jnz	01279$
      000D65 02r2Er65         [24] 2761 	ljmp	00249$
      000D68                       2762 01279$:
      000D68 7B 00            [12] 2763 	mov	r3,#0x00
      000D6A 8C 82            [24] 2764 	mov	dpl,r4
      000D6C 8B 83            [24] 2765 	mov	dph,r3
      000D6E C0 07            [24] 2766 	push	ar7
      000D70 C0 06            [24] 2767 	push	ar6
      000D72 C0 05            [24] 2768 	push	ar5
      000D74 12r00r00         [24] 2769 	lcall	_putchar
      000D77 D0 05            [24] 2770 	pop	ar5
      000D79 D0 06            [24] 2771 	pop	ar6
      000D7B D0 07            [24] 2772 	pop	ar7
      000D7D 0F               [12] 2773 	inc	r7
                                   2774 ;	calc.c:118: if (!stack_pop(ctx->ps, &d0)) printstr("stack underflow\r\n");
      000D7E BF 00 D8         [24] 2775 	cjne	r7,#0x00,00376$
      000D81 0E               [12] 2776 	inc	r6
      000D82 80 D5            [24] 2777 	sjmp	00376$
      000D84                       2778 00111$:
                                   2779 ;	calc.c:120: printstr("PSPTOP\t");
      000D84 7Fr46            [12] 2780 	mov	r7,#___str_9
      000D86 7Es00            [12] 2781 	mov	r6,#(___str_9 >> 8)
      000D88 7D 80            [12] 2782 	mov	r5,#0x80
                                   2783 ;	calc.c:20: return;
      000D8A                       2784 00379$:
                                   2785 ;	calc.c:18: for (; *s; s++) putchar(*s);
      000D8A 8F 82            [24] 2786 	mov	dpl,r7
      000D8C 8E 83            [24] 2787 	mov	dph,r6
      000D8E 8D F0            [24] 2788 	mov	b,r5
      000D90 12r00r00         [24] 2789 	lcall	__gptrget
      000D93 FC               [12] 2790 	mov	r4,a
      000D94 60 1C            [24] 2791 	jz	00270$
      000D96 7B 00            [12] 2792 	mov	r3,#0x00
      000D98 8C 82            [24] 2793 	mov	dpl,r4
      000D9A 8B 83            [24] 2794 	mov	dph,r3
      000D9C C0 07            [24] 2795 	push	ar7
      000D9E C0 06            [24] 2796 	push	ar6
      000DA0 C0 05            [24] 2797 	push	ar5
      000DA2 12r00r00         [24] 2798 	lcall	_putchar
      000DA5 D0 05            [24] 2799 	pop	ar5
      000DA7 D0 06            [24] 2800 	pop	ar6
      000DA9 D0 07            [24] 2801 	pop	ar7
      000DAB 0F               [12] 2802 	inc	r7
                                   2803 ;	calc.c:120: printstr("PSPTOP\t");
      000DAC BF 00 DB         [24] 2804 	cjne	r7,#0x00,00379$
      000DAF 0E               [12] 2805 	inc	r6
      000DB0 80 D8            [24] 2806 	sjmp	00379$
      000DB2                       2807 00270$:
                                   2808 ;	calc.c:121: printall(d0);
      000DB2 E5*00            [12] 2809 	mov	a,_bp
      000DB4 24 15            [12] 2810 	add	a,#0x15
      000DB6 F8               [12] 2811 	mov	r0,a
      000DB7 86 07            [24] 2812 	mov	ar7,@r0
      000DB9 08               [12] 2813 	inc	r0
      000DBA 86 06            [24] 2814 	mov	ar6,@r0
      000DBC 08               [12] 2815 	inc	r0
      000DBD 86 05            [24] 2816 	mov	ar5,@r0
      000DBF 08               [12] 2817 	inc	r0
      000DC0 86 04            [24] 2818 	mov	ar4,@r0
      000DC2 E5*00            [12] 2819 	mov	a,_bp
      000DC4 24 1D            [12] 2820 	add	a,#0x1d
      000DC6 F8               [12] 2821 	mov	r0,a
      000DC7 A6 07            [24] 2822 	mov	@r0,ar7
      000DC9 08               [12] 2823 	inc	r0
      000DCA A6 06            [24] 2824 	mov	@r0,ar6
      000DCC 08               [12] 2825 	inc	r0
      000DCD A6 05            [24] 2826 	mov	@r0,ar5
      000DCF 08               [12] 2827 	inc	r0
      000DD0 A6 04            [24] 2828 	mov	@r0,ar4
                                   2829 ;	calc.c:33: printf("%08lx\t", d);
      000DD2 C0 07            [24] 2830 	push	ar7
      000DD4 C0 06            [24] 2831 	push	ar6
      000DD6 C0 05            [24] 2832 	push	ar5
      000DD8 C0 04            [24] 2833 	push	ar4
      000DDA 74r00            [12] 2834 	mov	a,#___str_0
      000DDC C0 E0            [24] 2835 	push	acc
      000DDE 74s00            [12] 2836 	mov	a,#(___str_0 >> 8)
      000DE0 C0 E0            [24] 2837 	push	acc
      000DE2 74 80            [12] 2838 	mov	a,#0x80
      000DE4 C0 E0            [24] 2839 	push	acc
      000DE6 12r00r00         [24] 2840 	lcall	_printf
      000DE9 E5 81            [12] 2841 	mov	a,sp
      000DEB 24 F9            [12] 2842 	add	a,#0xf9
      000DED F5 81            [12] 2843 	mov	sp,a
                                   2844 ;	calc.c:34: printf("% 11ld\t", d);
      000DEF E5*00            [12] 2845 	mov	a,_bp
      000DF1 24 1D            [12] 2846 	add	a,#0x1d
      000DF3 F8               [12] 2847 	mov	r0,a
      000DF4 E6               [12] 2848 	mov	a,@r0
      000DF5 C0 E0            [24] 2849 	push	acc
      000DF7 08               [12] 2850 	inc	r0
      000DF8 E6               [12] 2851 	mov	a,@r0
      000DF9 C0 E0            [24] 2852 	push	acc
      000DFB 08               [12] 2853 	inc	r0
      000DFC E6               [12] 2854 	mov	a,@r0
      000DFD C0 E0            [24] 2855 	push	acc
      000DFF 08               [12] 2856 	inc	r0
      000E00 E6               [12] 2857 	mov	a,@r0
      000E01 C0 E0            [24] 2858 	push	acc
      000E03 74r07            [12] 2859 	mov	a,#___str_1
      000E05 C0 E0            [24] 2860 	push	acc
      000E07 74s00            [12] 2861 	mov	a,#(___str_1 >> 8)
      000E09 C0 E0            [24] 2862 	push	acc
      000E0B 74 80            [12] 2863 	mov	a,#0x80
      000E0D C0 E0            [24] 2864 	push	acc
      000E0F 12r00r00         [24] 2865 	lcall	_printf
      000E12 E5 81            [12] 2866 	mov	a,sp
      000E14 24 F9            [12] 2867 	add	a,#0xf9
      000E16 F5 81            [12] 2868 	mov	sp,a
                                   2869 ;	calc.c:35: printf("%011lo\t", d);
      000E18 E5*00            [12] 2870 	mov	a,_bp
      000E1A 24 1D            [12] 2871 	add	a,#0x1d
      000E1C F8               [12] 2872 	mov	r0,a
      000E1D E6               [12] 2873 	mov	a,@r0
      000E1E C0 E0            [24] 2874 	push	acc
      000E20 08               [12] 2875 	inc	r0
      000E21 E6               [12] 2876 	mov	a,@r0
      000E22 C0 E0            [24] 2877 	push	acc
      000E24 08               [12] 2878 	inc	r0
      000E25 E6               [12] 2879 	mov	a,@r0
      000E26 C0 E0            [24] 2880 	push	acc
      000E28 08               [12] 2881 	inc	r0
      000E29 E6               [12] 2882 	mov	a,@r0
      000E2A C0 E0            [24] 2883 	push	acc
      000E2C 74r0F            [12] 2884 	mov	a,#___str_2
      000E2E C0 E0            [24] 2885 	push	acc
      000E30 74s00            [12] 2886 	mov	a,#(___str_2 >> 8)
      000E32 C0 E0            [24] 2887 	push	acc
      000E34 74 80            [12] 2888 	mov	a,#0x80
      000E36 C0 E0            [24] 2889 	push	acc
      000E38 12r00r00         [24] 2890 	lcall	_printf
      000E3B E5 81            [12] 2891 	mov	a,sp
      000E3D 24 F9            [12] 2892 	add	a,#0xf9
      000E3F F5 81            [12] 2893 	mov	sp,a
                                   2894 ;	calc.c:36: printbin(d);
      000E41 E5*00            [12] 2895 	mov	a,_bp
      000E43 24 1D            [12] 2896 	add	a,#0x1d
      000E45 F8               [12] 2897 	mov	r0,a
      000E46 86 07            [24] 2898 	mov	ar7,@r0
      000E48 08               [12] 2899 	inc	r0
      000E49 86 06            [24] 2900 	mov	ar6,@r0
      000E4B 08               [12] 2901 	inc	r0
      000E4C 86 05            [24] 2902 	mov	ar5,@r0
      000E4E 08               [12] 2903 	inc	r0
      000E4F 86 02            [24] 2904 	mov	ar2,@r0
                                   2905 ;	calc.c:26: for (mask = 0x80000000lu; mask; mask >>= 1)
      000E51 E5*00            [12] 2906 	mov	a,_bp
      000E53 24 21            [12] 2907 	add	a,#0x21
      000E55 F8               [12] 2908 	mov	r0,a
      000E56 E4               [12] 2909 	clr	a
      000E57 F6               [12] 2910 	mov	@r0,a
      000E58 08               [12] 2911 	inc	r0
      000E59 F6               [12] 2912 	mov	@r0,a
      000E5A 08               [12] 2913 	inc	r0
      000E5B F6               [12] 2914 	mov	@r0,a
      000E5C 08               [12] 2915 	inc	r0
      000E5D 76 80            [12] 2916 	mov	@r0,#0x80
      000E5F                       2917 00381$:
                                   2918 ;	calc.c:27: (void)putchar((d & mask) ? (int)'1' : (int)'0');
      000E5F E5*00            [12] 2919 	mov	a,_bp
      000E61 24 07            [12] 2920 	add	a,#0x07
      000E63 F8               [12] 2921 	mov	r0,a
      000E64 A6 07            [24] 2922 	mov	@r0,ar7
      000E66 08               [12] 2923 	inc	r0
      000E67 A6 06            [24] 2924 	mov	@r0,ar6
      000E69 08               [12] 2925 	inc	r0
      000E6A A6 05            [24] 2926 	mov	@r0,ar5
      000E6C 08               [12] 2927 	inc	r0
      000E6D A6 02            [24] 2928 	mov	@r0,ar2
      000E6F E5*00            [12] 2929 	mov	a,_bp
      000E71 24 07            [12] 2930 	add	a,#0x07
      000E73 F8               [12] 2931 	mov	r0,a
      000E74 E5*00            [12] 2932 	mov	a,_bp
      000E76 24 21            [12] 2933 	add	a,#0x21
      000E78 F9               [12] 2934 	mov	r1,a
      000E79 E7               [12] 2935 	mov	a,@r1
      000E7A 56               [12] 2936 	anl	a,@r0
      000E7B F6               [12] 2937 	mov	@r0,a
      000E7C 09               [12] 2938 	inc	r1
      000E7D E7               [12] 2939 	mov	a,@r1
      000E7E 08               [12] 2940 	inc	r0
      000E7F 56               [12] 2941 	anl	a,@r0
      000E80 F6               [12] 2942 	mov	@r0,a
      000E81 09               [12] 2943 	inc	r1
      000E82 E7               [12] 2944 	mov	a,@r1
      000E83 08               [12] 2945 	inc	r0
      000E84 56               [12] 2946 	anl	a,@r0
      000E85 F6               [12] 2947 	mov	@r0,a
      000E86 09               [12] 2948 	inc	r1
      000E87 E7               [12] 2949 	mov	a,@r1
      000E88 08               [12] 2950 	inc	r0
      000E89 56               [12] 2951 	anl	a,@r0
      000E8A F6               [12] 2952 	mov	@r0,a
      000E8B E5*00            [12] 2953 	mov	a,_bp
      000E8D 24 07            [12] 2954 	add	a,#0x07
      000E8F F8               [12] 2955 	mov	r0,a
      000E90 E6               [12] 2956 	mov	a,@r0
      000E91 08               [12] 2957 	inc	r0
      000E92 46               [12] 2958 	orl	a,@r0
      000E93 08               [12] 2959 	inc	r0
      000E94 46               [12] 2960 	orl	a,@r0
      000E95 08               [12] 2961 	inc	r0
      000E96 46               [12] 2962 	orl	a,@r0
      000E97 60 06            [24] 2963 	jz	00504$
      000E99 7B 31            [12] 2964 	mov	r3,#0x31
      000E9B 7C 00            [12] 2965 	mov	r4,#0x00
      000E9D 80 04            [24] 2966 	sjmp	00505$
      000E9F                       2967 00504$:
      000E9F 7B 30            [12] 2968 	mov	r3,#0x30
      000EA1 7C 00            [12] 2969 	mov	r4,#0x00
      000EA3                       2970 00505$:
      000EA3 8B 82            [24] 2971 	mov	dpl,r3
      000EA5 8C 83            [24] 2972 	mov	dph,r4
      000EA7 C0 07            [24] 2973 	push	ar7
      000EA9 C0 06            [24] 2974 	push	ar6
      000EAB C0 05            [24] 2975 	push	ar5
      000EAD C0 02            [24] 2976 	push	ar2
      000EAF 12r00r00         [24] 2977 	lcall	_putchar
      000EB2 D0 02            [24] 2978 	pop	ar2
      000EB4 D0 05            [24] 2979 	pop	ar5
      000EB6 D0 06            [24] 2980 	pop	ar6
      000EB8 D0 07            [24] 2981 	pop	ar7
                                   2982 ;	calc.c:26: for (mask = 0x80000000lu; mask; mask >>= 1)
      000EBA E5*00            [12] 2983 	mov	a,_bp
      000EBC 24 21            [12] 2984 	add	a,#0x21
      000EBE F8               [12] 2985 	mov	r0,a
      000EBF 08               [12] 2986 	inc	r0
      000EC0 08               [12] 2987 	inc	r0
      000EC1 08               [12] 2988 	inc	r0
      000EC2 E6               [12] 2989 	mov	a,@r0
      000EC3 C3               [12] 2990 	clr	c
      000EC4 13               [12] 2991 	rrc	a
      000EC5 F6               [12] 2992 	mov	@r0,a
      000EC6 18               [12] 2993 	dec	r0
      000EC7 E6               [12] 2994 	mov	a,@r0
      000EC8 13               [12] 2995 	rrc	a
      000EC9 F6               [12] 2996 	mov	@r0,a
      000ECA 18               [12] 2997 	dec	r0
      000ECB E6               [12] 2998 	mov	a,@r0
      000ECC 13               [12] 2999 	rrc	a
      000ECD F6               [12] 3000 	mov	@r0,a
      000ECE 18               [12] 3001 	dec	r0
      000ECF E6               [12] 3002 	mov	a,@r0
      000ED0 13               [12] 3003 	rrc	a
      000ED1 F6               [12] 3004 	mov	@r0,a
      000ED2 E5*00            [12] 3005 	mov	a,_bp
      000ED4 24 21            [12] 3006 	add	a,#0x21
      000ED6 F8               [12] 3007 	mov	r0,a
      000ED7 E6               [12] 3008 	mov	a,@r0
      000ED8 08               [12] 3009 	inc	r0
      000ED9 46               [12] 3010 	orl	a,@r0
      000EDA 08               [12] 3011 	inc	r0
      000EDB 46               [12] 3012 	orl	a,@r0
      000EDC 08               [12] 3013 	inc	r0
      000EDD 46               [12] 3014 	orl	a,@r0
      000EDE 60 03            [24] 3015 	jz	01284$
      000EE0 02r0Er5F         [24] 3016 	ljmp	00381$
      000EE3                       3017 01284$:
                                   3018 ;	calc.c:122: printstr("\r\n");
      000EE3 7Fr17            [12] 3019 	mov	r7,#___str_3
      000EE5 7Es00            [12] 3020 	mov	r6,#(___str_3 >> 8)
      000EE7 7D 80            [12] 3021 	mov	r5,#0x80
                                   3022 ;	calc.c:20: return;
      000EE9                       3023 00384$:
                                   3024 ;	calc.c:18: for (; *s; s++) putchar(*s);
      000EE9 8F 82            [24] 3025 	mov	dpl,r7
      000EEB 8E 83            [24] 3026 	mov	dph,r6
      000EED 8D F0            [24] 3027 	mov	b,r5
      000EEF 12r00r00         [24] 3028 	lcall	__gptrget
      000EF2 FC               [12] 3029 	mov	r4,a
      000EF3 70 03            [24] 3030 	jnz	01285$
      000EF5 02r2Er65         [24] 3031 	ljmp	00249$
      000EF8                       3032 01285$:
      000EF8 7B 00            [12] 3033 	mov	r3,#0x00
      000EFA 8C 82            [24] 3034 	mov	dpl,r4
      000EFC 8B 83            [24] 3035 	mov	dph,r3
      000EFE C0 07            [24] 3036 	push	ar7
      000F00 C0 06            [24] 3037 	push	ar6
      000F02 C0 05            [24] 3038 	push	ar5
      000F04 12r00r00         [24] 3039 	lcall	_putchar
      000F07 D0 05            [24] 3040 	pop	ar5
      000F09 D0 06            [24] 3041 	pop	ar6
      000F0B D0 07            [24] 3042 	pop	ar7
      000F0D 0F               [12] 3043 	inc	r7
                                   3044 ;	calc.c:125: case 'P':
      000F0E BF 00 D8         [24] 3045 	cjne	r7,#0x00,00384$
      000F11 0E               [12] 3046 	inc	r6
      000F12 80 D5            [24] 3047 	sjmp	00384$
      000F14                       3048 00113$:
                                   3049 ;	calc.c:126: printstr("\r\n");
      000F14 7Fr17            [12] 3050 	mov	r7,#___str_3
      000F16 7Es00            [12] 3051 	mov	r6,#(___str_3 >> 8)
      000F18 7D 80            [12] 3052 	mov	r5,#0x80
                                   3053 ;	calc.c:20: return;
      000F1A                       3054 00387$:
                                   3055 ;	calc.c:18: for (; *s; s++) putchar(*s);
      000F1A 8F 82            [24] 3056 	mov	dpl,r7
      000F1C 8E 83            [24] 3057 	mov	dph,r6
      000F1E 8D F0            [24] 3058 	mov	b,r5
      000F20 12r00r00         [24] 3059 	lcall	__gptrget
      000F23 FC               [12] 3060 	mov	r4,a
      000F24 60 1C            [24] 3061 	jz	00277$
      000F26 7B 00            [12] 3062 	mov	r3,#0x00
      000F28 8C 82            [24] 3063 	mov	dpl,r4
      000F2A 8B 83            [24] 3064 	mov	dph,r3
      000F2C C0 07            [24] 3065 	push	ar7
      000F2E C0 06            [24] 3066 	push	ar6
      000F30 C0 05            [24] 3067 	push	ar5
      000F32 12r00r00         [24] 3068 	lcall	_putchar
      000F35 D0 05            [24] 3069 	pop	ar5
      000F37 D0 06            [24] 3070 	pop	ar6
      000F39 D0 07            [24] 3071 	pop	ar7
      000F3B 0F               [12] 3072 	inc	r7
                                   3073 ;	calc.c:126: printstr("\r\n");
      000F3C BF 00 DB         [24] 3074 	cjne	r7,#0x00,00387$
      000F3F 0E               [12] 3075 	inc	r6
      000F40 80 D8            [24] 3076 	sjmp	00387$
      000F42                       3077 00277$:
                                   3078 ;	calc.c:127: (void)dump_pop(_ctx, delta);
      000F42 E5*00            [12] 3079 	mov	a,_bp
      000F44 24 FB            [12] 3080 	add	a,#0xfb
      000F46 F8               [12] 3081 	mov	r0,a
      000F47 E6               [12] 3082 	mov	a,@r0
      000F48 C0 E0            [24] 3083 	push	acc
      000F4A 08               [12] 3084 	inc	r0
      000F4B E6               [12] 3085 	mov	a,@r0
      000F4C C0 E0            [24] 3086 	push	acc
      000F4E 08               [12] 3087 	inc	r0
      000F4F E6               [12] 3088 	mov	a,@r0
      000F50 C0 E0            [24] 3089 	push	acc
      000F52 A8*00            [24] 3090 	mov	r0,_bp
      000F54 08               [12] 3091 	inc	r0
      000F55 86 82            [24] 3092 	mov	dpl,@r0
      000F57 08               [12] 3093 	inc	r0
      000F58 86 83            [24] 3094 	mov	dph,@r0
      000F5A 08               [12] 3095 	inc	r0
      000F5B 86 F0            [24] 3096 	mov	b,@r0
      000F5D 12r01r71         [24] 3097 	lcall	_dump_pop
      000F60 15 81            [12] 3098 	dec	sp
      000F62 15 81            [12] 3099 	dec	sp
      000F64 15 81            [12] 3100 	dec	sp
                                   3101 ;	calc.c:128: break;
      000F66 02r2Er65         [24] 3102 	ljmp	00249$
                                   3103 ;	calc.c:129: case 'x':
      000F69                       3104 00114$:
                                   3105 ;	calc.c:130: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      000F69 E5*00            [12] 3106 	mov	a,_bp
      000F6B 24 15            [12] 3107 	add	a,#0x15
      000F6D FF               [12] 3108 	mov	r7,a
      000F6E 7E 00            [12] 3109 	mov	r6,#0x00
      000F70 7D 40            [12] 3110 	mov	r5,#0x40
      000F72 E5*00            [12] 3111 	mov	a,_bp
      000F74 24 12            [12] 3112 	add	a,#0x12
      000F76 F8               [12] 3113 	mov	r0,a
      000F77 E5*00            [12] 3114 	mov	a,_bp
      000F79 24 07            [12] 3115 	add	a,#0x07
      000F7B F9               [12] 3116 	mov	r1,a
      000F7C 74 11            [12] 3117 	mov	a,#0x11
      000F7E 26               [12] 3118 	add	a,@r0
      000F7F F7               [12] 3119 	mov	@r1,a
      000F80 74 40            [12] 3120 	mov	a,#0x40
      000F82 08               [12] 3121 	inc	r0
      000F83 36               [12] 3122 	addc	a,@r0
      000F84 09               [12] 3123 	inc	r1
      000F85 F7               [12] 3124 	mov	@r1,a
      000F86 08               [12] 3125 	inc	r0
      000F87 09               [12] 3126 	inc	r1
      000F88 E6               [12] 3127 	mov	a,@r0
      000F89 F7               [12] 3128 	mov	@r1,a
      000F8A E5*00            [12] 3129 	mov	a,_bp
      000F8C 24 07            [12] 3130 	add	a,#0x07
      000F8E F8               [12] 3131 	mov	r0,a
      000F8F 86 82            [24] 3132 	mov	dpl,@r0
      000F91 08               [12] 3133 	inc	r0
      000F92 86 83            [24] 3134 	mov	dph,@r0
      000F94 08               [12] 3135 	inc	r0
      000F95 86 F0            [24] 3136 	mov	b,@r0
      000F97 12r00r00         [24] 3137 	lcall	__gptrget
      000F9A FA               [12] 3138 	mov	r2,a
      000F9B A3               [24] 3139 	inc	dptr
      000F9C 12r00r00         [24] 3140 	lcall	__gptrget
      000F9F FB               [12] 3141 	mov	r3,a
      000FA0 A3               [24] 3142 	inc	dptr
      000FA1 12r00r00         [24] 3143 	lcall	__gptrget
      000FA4 FC               [12] 3144 	mov	r4,a
      000FA5 C0 07            [24] 3145 	push	ar7
      000FA7 C0 06            [24] 3146 	push	ar6
      000FA9 C0 05            [24] 3147 	push	ar5
      000FAB 8A 82            [24] 3148 	mov	dpl,r2
      000FAD 8B 83            [24] 3149 	mov	dph,r3
      000FAF 8C F0            [24] 3150 	mov	b,r4
      000FB1 12r00r00         [24] 3151 	lcall	_stack_pop
      000FB4 AB 82            [24] 3152 	mov	r3,dpl
      000FB6 AC 83            [24] 3153 	mov	r4,dph
      000FB8 15 81            [12] 3154 	dec	sp
      000FBA 15 81            [12] 3155 	dec	sp
      000FBC 15 81            [12] 3156 	dec	sp
      000FBE EB               [12] 3157 	mov	a,r3
      000FBF 4C               [12] 3158 	orl	a,r4
      000FC0 70 31            [24] 3159 	jnz	00119$
      000FC2 7Fr4E            [12] 3160 	mov	r7,#___str_10
      000FC4 7Es00            [12] 3161 	mov	r6,#(___str_10 >> 8)
      000FC6 7D 80            [12] 3162 	mov	r5,#0x80
                                   3163 ;	calc.c:20: return;
      000FC8                       3164 00390$:
                                   3165 ;	calc.c:18: for (; *s; s++) putchar(*s);
      000FC8 8F 82            [24] 3166 	mov	dpl,r7
      000FCA 8E 83            [24] 3167 	mov	dph,r6
      000FCC 8D F0            [24] 3168 	mov	b,r5
      000FCE 12r00r00         [24] 3169 	lcall	__gptrget
      000FD1 FC               [12] 3170 	mov	r4,a
      000FD2 70 03            [24] 3171 	jnz	01290$
      000FD4 02r2Er65         [24] 3172 	ljmp	00249$
      000FD7                       3173 01290$:
      000FD7 7B 00            [12] 3174 	mov	r3,#0x00
      000FD9 8C 82            [24] 3175 	mov	dpl,r4
      000FDB 8B 83            [24] 3176 	mov	dph,r3
      000FDD C0 07            [24] 3177 	push	ar7
      000FDF C0 06            [24] 3178 	push	ar6
      000FE1 C0 05            [24] 3179 	push	ar5
      000FE3 12r00r00         [24] 3180 	lcall	_putchar
      000FE6 D0 05            [24] 3181 	pop	ar5
      000FE8 D0 06            [24] 3182 	pop	ar6
      000FEA D0 07            [24] 3183 	pop	ar7
      000FEC 0F               [12] 3184 	inc	r7
                                   3185 ;	calc.c:130: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      000FED BF 00 D8         [24] 3186 	cjne	r7,#0x00,00390$
      000FF0 0E               [12] 3187 	inc	r6
      000FF1 80 D5            [24] 3188 	sjmp	00390$
      000FF3                       3189 00119$:
                                   3190 ;	calc.c:131: else if (!stack_pop(ctx->ps, &d1)) {
      000FF3 E5*00            [12] 3191 	mov	a,_bp
      000FF5 24 19            [12] 3192 	add	a,#0x19
      000FF7 FF               [12] 3193 	mov	r7,a
      000FF8 7E 00            [12] 3194 	mov	r6,#0x00
      000FFA 7D 40            [12] 3195 	mov	r5,#0x40
      000FFC E5*00            [12] 3196 	mov	a,_bp
      000FFE 24 07            [12] 3197 	add	a,#0x07
      001000 F8               [12] 3198 	mov	r0,a
      001001 86 82            [24] 3199 	mov	dpl,@r0
      001003 08               [12] 3200 	inc	r0
      001004 86 83            [24] 3201 	mov	dph,@r0
      001006 08               [12] 3202 	inc	r0
      001007 86 F0            [24] 3203 	mov	b,@r0
      001009 12r00r00         [24] 3204 	lcall	__gptrget
      00100C FA               [12] 3205 	mov	r2,a
      00100D A3               [24] 3206 	inc	dptr
      00100E 12r00r00         [24] 3207 	lcall	__gptrget
      001011 FB               [12] 3208 	mov	r3,a
      001012 A3               [24] 3209 	inc	dptr
      001013 12r00r00         [24] 3210 	lcall	__gptrget
      001016 FC               [12] 3211 	mov	r4,a
      001017 C0 07            [24] 3212 	push	ar7
      001019 C0 06            [24] 3213 	push	ar6
      00101B C0 05            [24] 3214 	push	ar5
      00101D 8A 82            [24] 3215 	mov	dpl,r2
      00101F 8B 83            [24] 3216 	mov	dph,r3
      001021 8C F0            [24] 3217 	mov	b,r4
      001023 12r00r00         [24] 3218 	lcall	_stack_pop
      001026 AB 82            [24] 3219 	mov	r3,dpl
      001028 AC 83            [24] 3220 	mov	r4,dph
      00102A 15 81            [12] 3221 	dec	sp
      00102C 15 81            [12] 3222 	dec	sp
      00102E 15 81            [12] 3223 	dec	sp
      001030 EB               [12] 3224 	mov	a,r3
      001031 4C               [12] 3225 	orl	a,r4
      001032 70 6F            [24] 3226 	jnz	00116$
                                   3227 ;	calc.c:132: (void)stack_push(ctx->ps, d0);
      001034 E5*00            [12] 3228 	mov	a,_bp
      001036 24 07            [12] 3229 	add	a,#0x07
      001038 F8               [12] 3230 	mov	r0,a
      001039 86 82            [24] 3231 	mov	dpl,@r0
      00103B 08               [12] 3232 	inc	r0
      00103C 86 83            [24] 3233 	mov	dph,@r0
      00103E 08               [12] 3234 	inc	r0
      00103F 86 F0            [24] 3235 	mov	b,@r0
      001041 12r00r00         [24] 3236 	lcall	__gptrget
      001044 FA               [12] 3237 	mov	r2,a
      001045 A3               [24] 3238 	inc	dptr
      001046 12r00r00         [24] 3239 	lcall	__gptrget
      001049 FB               [12] 3240 	mov	r3,a
      00104A A3               [24] 3241 	inc	dptr
      00104B 12r00r00         [24] 3242 	lcall	__gptrget
      00104E FC               [12] 3243 	mov	r4,a
      00104F E5*00            [12] 3244 	mov	a,_bp
      001051 24 15            [12] 3245 	add	a,#0x15
      001053 F8               [12] 3246 	mov	r0,a
      001054 E6               [12] 3247 	mov	a,@r0
      001055 C0 E0            [24] 3248 	push	acc
      001057 08               [12] 3249 	inc	r0
      001058 E6               [12] 3250 	mov	a,@r0
      001059 C0 E0            [24] 3251 	push	acc
      00105B 08               [12] 3252 	inc	r0
      00105C E6               [12] 3253 	mov	a,@r0
      00105D C0 E0            [24] 3254 	push	acc
      00105F 08               [12] 3255 	inc	r0
      001060 E6               [12] 3256 	mov	a,@r0
      001061 C0 E0            [24] 3257 	push	acc
      001063 8A 82            [24] 3258 	mov	dpl,r2
      001065 8B 83            [24] 3259 	mov	dph,r3
      001067 8C F0            [24] 3260 	mov	b,r4
      001069 12r00r00         [24] 3261 	lcall	_stack_push
      00106C E5 81            [12] 3262 	mov	a,sp
      00106E 24 FC            [12] 3263 	add	a,#0xfc
      001070 F5 81            [12] 3264 	mov	sp,a
                                   3265 ;	calc.c:133: printstr("\r\nstack underflow\r\n");
      001072 7Fr4E            [12] 3266 	mov	r7,#___str_10
      001074 7Es00            [12] 3267 	mov	r6,#(___str_10 >> 8)
      001076 7D 80            [12] 3268 	mov	r5,#0x80
                                   3269 ;	calc.c:20: return;
      001078                       3270 00393$:
                                   3271 ;	calc.c:18: for (; *s; s++) putchar(*s);
      001078 8F 82            [24] 3272 	mov	dpl,r7
      00107A 8E 83            [24] 3273 	mov	dph,r6
      00107C 8D F0            [24] 3274 	mov	b,r5
      00107E 12r00r00         [24] 3275 	lcall	__gptrget
      001081 FC               [12] 3276 	mov	r4,a
      001082 70 03            [24] 3277 	jnz	01293$
      001084 02r2Er65         [24] 3278 	ljmp	00249$
      001087                       3279 01293$:
      001087 7B 00            [12] 3280 	mov	r3,#0x00
      001089 8C 82            [24] 3281 	mov	dpl,r4
      00108B 8B 83            [24] 3282 	mov	dph,r3
      00108D C0 07            [24] 3283 	push	ar7
      00108F C0 06            [24] 3284 	push	ar6
      001091 C0 05            [24] 3285 	push	ar5
      001093 12r00r00         [24] 3286 	lcall	_putchar
      001096 D0 05            [24] 3287 	pop	ar5
      001098 D0 06            [24] 3288 	pop	ar6
      00109A D0 07            [24] 3289 	pop	ar7
      00109C 0F               [12] 3290 	inc	r7
                                   3291 ;	calc.c:133: printstr("\r\nstack underflow\r\n");
      00109D BF 00 D8         [24] 3292 	cjne	r7,#0x00,00393$
      0010A0 0E               [12] 3293 	inc	r6
      0010A1 80 D5            [24] 3294 	sjmp	00393$
      0010A3                       3295 00116$:
                                   3296 ;	calc.c:135: (void)stack_push(ctx->ps, d0);
      0010A3 E5*00            [12] 3297 	mov	a,_bp
      0010A5 24 07            [12] 3298 	add	a,#0x07
      0010A7 F8               [12] 3299 	mov	r0,a
      0010A8 86 82            [24] 3300 	mov	dpl,@r0
      0010AA 08               [12] 3301 	inc	r0
      0010AB 86 83            [24] 3302 	mov	dph,@r0
      0010AD 08               [12] 3303 	inc	r0
      0010AE 86 F0            [24] 3304 	mov	b,@r0
      0010B0 12r00r00         [24] 3305 	lcall	__gptrget
      0010B3 FA               [12] 3306 	mov	r2,a
      0010B4 A3               [24] 3307 	inc	dptr
      0010B5 12r00r00         [24] 3308 	lcall	__gptrget
      0010B8 FB               [12] 3309 	mov	r3,a
      0010B9 A3               [24] 3310 	inc	dptr
      0010BA 12r00r00         [24] 3311 	lcall	__gptrget
      0010BD FC               [12] 3312 	mov	r4,a
      0010BE E5*00            [12] 3313 	mov	a,_bp
      0010C0 24 15            [12] 3314 	add	a,#0x15
      0010C2 F8               [12] 3315 	mov	r0,a
      0010C3 E6               [12] 3316 	mov	a,@r0
      0010C4 C0 E0            [24] 3317 	push	acc
      0010C6 08               [12] 3318 	inc	r0
      0010C7 E6               [12] 3319 	mov	a,@r0
      0010C8 C0 E0            [24] 3320 	push	acc
      0010CA 08               [12] 3321 	inc	r0
      0010CB E6               [12] 3322 	mov	a,@r0
      0010CC C0 E0            [24] 3323 	push	acc
      0010CE 08               [12] 3324 	inc	r0
      0010CF E6               [12] 3325 	mov	a,@r0
      0010D0 C0 E0            [24] 3326 	push	acc
      0010D2 8A 82            [24] 3327 	mov	dpl,r2
      0010D4 8B 83            [24] 3328 	mov	dph,r3
      0010D6 8C F0            [24] 3329 	mov	b,r4
      0010D8 12r00r00         [24] 3330 	lcall	_stack_push
      0010DB E5 81            [12] 3331 	mov	a,sp
      0010DD 24 FC            [12] 3332 	add	a,#0xfc
      0010DF F5 81            [12] 3333 	mov	sp,a
                                   3334 ;	calc.c:136: (void)stack_push(ctx->ps, d1);
      0010E1 E5*00            [12] 3335 	mov	a,_bp
      0010E3 24 07            [12] 3336 	add	a,#0x07
      0010E5 F8               [12] 3337 	mov	r0,a
      0010E6 86 82            [24] 3338 	mov	dpl,@r0
      0010E8 08               [12] 3339 	inc	r0
      0010E9 86 83            [24] 3340 	mov	dph,@r0
      0010EB 08               [12] 3341 	inc	r0
      0010EC 86 F0            [24] 3342 	mov	b,@r0
      0010EE 12r00r00         [24] 3343 	lcall	__gptrget
      0010F1 FA               [12] 3344 	mov	r2,a
      0010F2 A3               [24] 3345 	inc	dptr
      0010F3 12r00r00         [24] 3346 	lcall	__gptrget
      0010F6 FB               [12] 3347 	mov	r3,a
      0010F7 A3               [24] 3348 	inc	dptr
      0010F8 12r00r00         [24] 3349 	lcall	__gptrget
      0010FB FC               [12] 3350 	mov	r4,a
      0010FC E5*00            [12] 3351 	mov	a,_bp
      0010FE 24 19            [12] 3352 	add	a,#0x19
      001100 F8               [12] 3353 	mov	r0,a
      001101 E6               [12] 3354 	mov	a,@r0
      001102 C0 E0            [24] 3355 	push	acc
      001104 08               [12] 3356 	inc	r0
      001105 E6               [12] 3357 	mov	a,@r0
      001106 C0 E0            [24] 3358 	push	acc
      001108 08               [12] 3359 	inc	r0
      001109 E6               [12] 3360 	mov	a,@r0
      00110A C0 E0            [24] 3361 	push	acc
      00110C 08               [12] 3362 	inc	r0
      00110D E6               [12] 3363 	mov	a,@r0
      00110E C0 E0            [24] 3364 	push	acc
      001110 8A 82            [24] 3365 	mov	dpl,r2
      001112 8B 83            [24] 3366 	mov	dph,r3
      001114 8C F0            [24] 3367 	mov	b,r4
      001116 12r00r00         [24] 3368 	lcall	_stack_push
      001119 E5 81            [12] 3369 	mov	a,sp
      00111B 24 FC            [12] 3370 	add	a,#0xfc
      00111D F5 81            [12] 3371 	mov	sp,a
                                   3372 ;	calc.c:138: break;
      00111F 02r2Er65         [24] 3373 	ljmp	00249$
                                   3374 ;	calc.c:139: case 'm':
      001122                       3375 00121$:
                                   3376 ;	calc.c:140: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      001122 E5*00            [12] 3377 	mov	a,_bp
      001124 24 15            [12] 3378 	add	a,#0x15
      001126 FF               [12] 3379 	mov	r7,a
      001127 7E 00            [12] 3380 	mov	r6,#0x00
      001129 7D 40            [12] 3381 	mov	r5,#0x40
      00112B E5*00            [12] 3382 	mov	a,_bp
      00112D 24 12            [12] 3383 	add	a,#0x12
      00112F F8               [12] 3384 	mov	r0,a
      001130 E5*00            [12] 3385 	mov	a,_bp
      001132 24 07            [12] 3386 	add	a,#0x07
      001134 F9               [12] 3387 	mov	r1,a
      001135 74 11            [12] 3388 	mov	a,#0x11
      001137 26               [12] 3389 	add	a,@r0
      001138 F7               [12] 3390 	mov	@r1,a
      001139 74 40            [12] 3391 	mov	a,#0x40
      00113B 08               [12] 3392 	inc	r0
      00113C 36               [12] 3393 	addc	a,@r0
      00113D 09               [12] 3394 	inc	r1
      00113E F7               [12] 3395 	mov	@r1,a
      00113F 08               [12] 3396 	inc	r0
      001140 09               [12] 3397 	inc	r1
      001141 E6               [12] 3398 	mov	a,@r0
      001142 F7               [12] 3399 	mov	@r1,a
      001143 E5*00            [12] 3400 	mov	a,_bp
      001145 24 07            [12] 3401 	add	a,#0x07
      001147 F8               [12] 3402 	mov	r0,a
      001148 86 82            [24] 3403 	mov	dpl,@r0
      00114A 08               [12] 3404 	inc	r0
      00114B 86 83            [24] 3405 	mov	dph,@r0
      00114D 08               [12] 3406 	inc	r0
      00114E 86 F0            [24] 3407 	mov	b,@r0
      001150 12r00r00         [24] 3408 	lcall	__gptrget
      001153 FA               [12] 3409 	mov	r2,a
      001154 A3               [24] 3410 	inc	dptr
      001155 12r00r00         [24] 3411 	lcall	__gptrget
      001158 FB               [12] 3412 	mov	r3,a
      001159 A3               [24] 3413 	inc	dptr
      00115A 12r00r00         [24] 3414 	lcall	__gptrget
      00115D FC               [12] 3415 	mov	r4,a
      00115E C0 07            [24] 3416 	push	ar7
      001160 C0 06            [24] 3417 	push	ar6
      001162 C0 05            [24] 3418 	push	ar5
      001164 8A 82            [24] 3419 	mov	dpl,r2
      001166 8B 83            [24] 3420 	mov	dph,r3
      001168 8C F0            [24] 3421 	mov	b,r4
      00116A 12r00r00         [24] 3422 	lcall	_stack_pop
      00116D AB 82            [24] 3423 	mov	r3,dpl
      00116F AC 83            [24] 3424 	mov	r4,dph
      001171 15 81            [12] 3425 	dec	sp
      001173 15 81            [12] 3426 	dec	sp
      001175 15 81            [12] 3427 	dec	sp
      001177 EB               [12] 3428 	mov	a,r3
      001178 4C               [12] 3429 	orl	a,r4
      001179 70 31            [24] 3430 	jnz	00125$
      00117B 7Fr4E            [12] 3431 	mov	r7,#___str_10
      00117D 7Es00            [12] 3432 	mov	r6,#(___str_10 >> 8)
      00117F 7D 80            [12] 3433 	mov	r5,#0x80
                                   3434 ;	calc.c:20: return;
      001181                       3435 00396$:
                                   3436 ;	calc.c:18: for (; *s; s++) putchar(*s);
      001181 8F 82            [24] 3437 	mov	dpl,r7
      001183 8E 83            [24] 3438 	mov	dph,r6
      001185 8D F0            [24] 3439 	mov	b,r5
      001187 12r00r00         [24] 3440 	lcall	__gptrget
      00118A FC               [12] 3441 	mov	r4,a
      00118B 70 03            [24] 3442 	jnz	01296$
      00118D 02r2Er65         [24] 3443 	ljmp	00249$
      001190                       3444 01296$:
      001190 7B 00            [12] 3445 	mov	r3,#0x00
      001192 8C 82            [24] 3446 	mov	dpl,r4
      001194 8B 83            [24] 3447 	mov	dph,r3
      001196 C0 07            [24] 3448 	push	ar7
      001198 C0 06            [24] 3449 	push	ar6
      00119A C0 05            [24] 3450 	push	ar5
      00119C 12r00r00         [24] 3451 	lcall	_putchar
      00119F D0 05            [24] 3452 	pop	ar5
      0011A1 D0 06            [24] 3453 	pop	ar6
      0011A3 D0 07            [24] 3454 	pop	ar7
      0011A5 0F               [12] 3455 	inc	r7
                                   3456 ;	calc.c:140: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      0011A6 BF 00 D8         [24] 3457 	cjne	r7,#0x00,00396$
      0011A9 0E               [12] 3458 	inc	r6
      0011AA 80 D5            [24] 3459 	sjmp	00396$
      0011AC                       3460 00125$:
                                   3461 ;	calc.c:142: if (!stack_push(ctx->ss, d0)) {
      0011AC E5*00            [12] 3462 	mov	a,_bp
      0011AE 24 12            [12] 3463 	add	a,#0x12
      0011B0 F8               [12] 3464 	mov	r0,a
      0011B1 74 14            [12] 3465 	mov	a,#0x14
      0011B3 26               [12] 3466 	add	a,@r0
      0011B4 FA               [12] 3467 	mov	r2,a
      0011B5 74 40            [12] 3468 	mov	a,#0x40
      0011B7 08               [12] 3469 	inc	r0
      0011B8 36               [12] 3470 	addc	a,@r0
      0011B9 FB               [12] 3471 	mov	r3,a
      0011BA 08               [12] 3472 	inc	r0
      0011BB 86 04            [24] 3473 	mov	ar4,@r0
      0011BD 8A 82            [24] 3474 	mov	dpl,r2
      0011BF 8B 83            [24] 3475 	mov	dph,r3
      0011C1 8C F0            [24] 3476 	mov	b,r4
      0011C3 12r00r00         [24] 3477 	lcall	__gptrget
      0011C6 FA               [12] 3478 	mov	r2,a
      0011C7 A3               [24] 3479 	inc	dptr
      0011C8 12r00r00         [24] 3480 	lcall	__gptrget
      0011CB FB               [12] 3481 	mov	r3,a
      0011CC A3               [24] 3482 	inc	dptr
      0011CD 12r00r00         [24] 3483 	lcall	__gptrget
      0011D0 FC               [12] 3484 	mov	r4,a
      0011D1 E5*00            [12] 3485 	mov	a,_bp
      0011D3 24 15            [12] 3486 	add	a,#0x15
      0011D5 F8               [12] 3487 	mov	r0,a
      0011D6 E6               [12] 3488 	mov	a,@r0
      0011D7 C0 E0            [24] 3489 	push	acc
      0011D9 08               [12] 3490 	inc	r0
      0011DA E6               [12] 3491 	mov	a,@r0
      0011DB C0 E0            [24] 3492 	push	acc
      0011DD 08               [12] 3493 	inc	r0
      0011DE E6               [12] 3494 	mov	a,@r0
      0011DF C0 E0            [24] 3495 	push	acc
      0011E1 08               [12] 3496 	inc	r0
      0011E2 E6               [12] 3497 	mov	a,@r0
      0011E3 C0 E0            [24] 3498 	push	acc
      0011E5 8A 82            [24] 3499 	mov	dpl,r2
      0011E7 8B 83            [24] 3500 	mov	dph,r3
      0011E9 8C F0            [24] 3501 	mov	b,r4
      0011EB 12r00r00         [24] 3502 	lcall	_stack_push
      0011EE AB 82            [24] 3503 	mov	r3,dpl
      0011F0 AC 83            [24] 3504 	mov	r4,dph
      0011F2 E5 81            [12] 3505 	mov	a,sp
      0011F4 24 FC            [12] 3506 	add	a,#0xfc
      0011F6 F5 81            [12] 3507 	mov	sp,a
      0011F8 EB               [12] 3508 	mov	a,r3
      0011F9 4C               [12] 3509 	orl	a,r4
      0011FA 60 03            [24] 3510 	jz	01298$
      0011FC 02r2Er65         [24] 3511 	ljmp	00249$
      0011FF                       3512 01298$:
                                   3513 ;	calc.c:143: printstr("\r\nsecondary stack overflow\r\n");
      0011FF 7Fr62            [12] 3514 	mov	r7,#___str_11
      001201 7Es00            [12] 3515 	mov	r6,#(___str_11 >> 8)
      001203 7D 80            [12] 3516 	mov	r5,#0x80
                                   3517 ;	calc.c:20: return;
      001205                       3518 00399$:
                                   3519 ;	calc.c:18: for (; *s; s++) putchar(*s);
      001205 8F 82            [24] 3520 	mov	dpl,r7
      001207 8E 83            [24] 3521 	mov	dph,r6
      001209 8D F0            [24] 3522 	mov	b,r5
      00120B 12r00r00         [24] 3523 	lcall	__gptrget
      00120E FC               [12] 3524 	mov	r4,a
      00120F 60 1C            [24] 3525 	jz	00285$
      001211 7B 00            [12] 3526 	mov	r3,#0x00
      001213 8C 82            [24] 3527 	mov	dpl,r4
      001215 8B 83            [24] 3528 	mov	dph,r3
      001217 C0 07            [24] 3529 	push	ar7
      001219 C0 06            [24] 3530 	push	ar6
      00121B C0 05            [24] 3531 	push	ar5
      00121D 12r00r00         [24] 3532 	lcall	_putchar
      001220 D0 05            [24] 3533 	pop	ar5
      001222 D0 06            [24] 3534 	pop	ar6
      001224 D0 07            [24] 3535 	pop	ar7
      001226 0F               [12] 3536 	inc	r7
                                   3537 ;	calc.c:143: printstr("\r\nsecondary stack overflow\r\n");
      001227 BF 00 DB         [24] 3538 	cjne	r7,#0x00,00399$
      00122A 0E               [12] 3539 	inc	r6
      00122B 80 D8            [24] 3540 	sjmp	00399$
      00122D                       3541 00285$:
                                   3542 ;	calc.c:144: (void)stack_push(ctx->ps, d0);
      00122D E5*00            [12] 3543 	mov	a,_bp
      00122F 24 07            [12] 3544 	add	a,#0x07
      001231 F8               [12] 3545 	mov	r0,a
      001232 86 82            [24] 3546 	mov	dpl,@r0
      001234 08               [12] 3547 	inc	r0
      001235 86 83            [24] 3548 	mov	dph,@r0
      001237 08               [12] 3549 	inc	r0
      001238 86 F0            [24] 3550 	mov	b,@r0
      00123A 12r00r00         [24] 3551 	lcall	__gptrget
      00123D FA               [12] 3552 	mov	r2,a
      00123E A3               [24] 3553 	inc	dptr
      00123F 12r00r00         [24] 3554 	lcall	__gptrget
      001242 FB               [12] 3555 	mov	r3,a
      001243 A3               [24] 3556 	inc	dptr
      001244 12r00r00         [24] 3557 	lcall	__gptrget
      001247 FC               [12] 3558 	mov	r4,a
      001248 E5*00            [12] 3559 	mov	a,_bp
      00124A 24 15            [12] 3560 	add	a,#0x15
      00124C F8               [12] 3561 	mov	r0,a
      00124D E6               [12] 3562 	mov	a,@r0
      00124E C0 E0            [24] 3563 	push	acc
      001250 08               [12] 3564 	inc	r0
      001251 E6               [12] 3565 	mov	a,@r0
      001252 C0 E0            [24] 3566 	push	acc
      001254 08               [12] 3567 	inc	r0
      001255 E6               [12] 3568 	mov	a,@r0
      001256 C0 E0            [24] 3569 	push	acc
      001258 08               [12] 3570 	inc	r0
      001259 E6               [12] 3571 	mov	a,@r0
      00125A C0 E0            [24] 3572 	push	acc
      00125C 8A 82            [24] 3573 	mov	dpl,r2
      00125E 8B 83            [24] 3574 	mov	dph,r3
      001260 8C F0            [24] 3575 	mov	b,r4
      001262 12r00r00         [24] 3576 	lcall	_stack_push
      001265 E5 81            [12] 3577 	mov	a,sp
      001267 24 FC            [12] 3578 	add	a,#0xfc
      001269 F5 81            [12] 3579 	mov	sp,a
                                   3580 ;	calc.c:147: break;
      00126B 02r2Er65         [24] 3581 	ljmp	00249$
                                   3582 ;	calc.c:148: case 'M':
      00126E                       3583 00127$:
                                   3584 ;	calc.c:149: if (!stack_pop(ctx->ss, &d0)) printstr("\r\nsecondary stack underflow\r\n");
      00126E E5*00            [12] 3585 	mov	a,_bp
      001270 24 15            [12] 3586 	add	a,#0x15
      001272 FF               [12] 3587 	mov	r7,a
      001273 7E 00            [12] 3588 	mov	r6,#0x00
      001275 7D 40            [12] 3589 	mov	r5,#0x40
      001277 E5*00            [12] 3590 	mov	a,_bp
      001279 24 12            [12] 3591 	add	a,#0x12
      00127B F8               [12] 3592 	mov	r0,a
      00127C E5*00            [12] 3593 	mov	a,_bp
      00127E 24 07            [12] 3594 	add	a,#0x07
      001280 F9               [12] 3595 	mov	r1,a
      001281 74 14            [12] 3596 	mov	a,#0x14
      001283 26               [12] 3597 	add	a,@r0
      001284 F7               [12] 3598 	mov	@r1,a
      001285 74 40            [12] 3599 	mov	a,#0x40
      001287 08               [12] 3600 	inc	r0
      001288 36               [12] 3601 	addc	a,@r0
      001289 09               [12] 3602 	inc	r1
      00128A F7               [12] 3603 	mov	@r1,a
      00128B 08               [12] 3604 	inc	r0
      00128C 09               [12] 3605 	inc	r1
      00128D E6               [12] 3606 	mov	a,@r0
      00128E F7               [12] 3607 	mov	@r1,a
      00128F E5*00            [12] 3608 	mov	a,_bp
      001291 24 07            [12] 3609 	add	a,#0x07
      001293 F8               [12] 3610 	mov	r0,a
      001294 86 82            [24] 3611 	mov	dpl,@r0
      001296 08               [12] 3612 	inc	r0
      001297 86 83            [24] 3613 	mov	dph,@r0
      001299 08               [12] 3614 	inc	r0
      00129A 86 F0            [24] 3615 	mov	b,@r0
      00129C 12r00r00         [24] 3616 	lcall	__gptrget
      00129F FA               [12] 3617 	mov	r2,a
      0012A0 A3               [24] 3618 	inc	dptr
      0012A1 12r00r00         [24] 3619 	lcall	__gptrget
      0012A4 FB               [12] 3620 	mov	r3,a
      0012A5 A3               [24] 3621 	inc	dptr
      0012A6 12r00r00         [24] 3622 	lcall	__gptrget
      0012A9 FC               [12] 3623 	mov	r4,a
      0012AA C0 07            [24] 3624 	push	ar7
      0012AC C0 06            [24] 3625 	push	ar6
      0012AE C0 05            [24] 3626 	push	ar5
      0012B0 8A 82            [24] 3627 	mov	dpl,r2
      0012B2 8B 83            [24] 3628 	mov	dph,r3
      0012B4 8C F0            [24] 3629 	mov	b,r4
      0012B6 12r00r00         [24] 3630 	lcall	_stack_pop
      0012B9 AB 82            [24] 3631 	mov	r3,dpl
      0012BB AC 83            [24] 3632 	mov	r4,dph
      0012BD 15 81            [12] 3633 	dec	sp
      0012BF 15 81            [12] 3634 	dec	sp
      0012C1 15 81            [12] 3635 	dec	sp
      0012C3 EB               [12] 3636 	mov	a,r3
      0012C4 4C               [12] 3637 	orl	a,r4
      0012C5 70 31            [24] 3638 	jnz	00131$
      0012C7 7Fr7F            [12] 3639 	mov	r7,#___str_12
      0012C9 7Es00            [12] 3640 	mov	r6,#(___str_12 >> 8)
      0012CB 7D 80            [12] 3641 	mov	r5,#0x80
                                   3642 ;	calc.c:20: return;
      0012CD                       3643 00402$:
                                   3644 ;	calc.c:18: for (; *s; s++) putchar(*s);
      0012CD 8F 82            [24] 3645 	mov	dpl,r7
      0012CF 8E 83            [24] 3646 	mov	dph,r6
      0012D1 8D F0            [24] 3647 	mov	b,r5
      0012D3 12r00r00         [24] 3648 	lcall	__gptrget
      0012D6 FC               [12] 3649 	mov	r4,a
      0012D7 70 03            [24] 3650 	jnz	01302$
      0012D9 02r2Er65         [24] 3651 	ljmp	00249$
      0012DC                       3652 01302$:
      0012DC 7B 00            [12] 3653 	mov	r3,#0x00
      0012DE 8C 82            [24] 3654 	mov	dpl,r4
      0012E0 8B 83            [24] 3655 	mov	dph,r3
      0012E2 C0 07            [24] 3656 	push	ar7
      0012E4 C0 06            [24] 3657 	push	ar6
      0012E6 C0 05            [24] 3658 	push	ar5
      0012E8 12r00r00         [24] 3659 	lcall	_putchar
      0012EB D0 05            [24] 3660 	pop	ar5
      0012ED D0 06            [24] 3661 	pop	ar6
      0012EF D0 07            [24] 3662 	pop	ar7
      0012F1 0F               [12] 3663 	inc	r7
                                   3664 ;	calc.c:149: if (!stack_pop(ctx->ss, &d0)) printstr("\r\nsecondary stack underflow\r\n");
      0012F2 BF 00 D8         [24] 3665 	cjne	r7,#0x00,00402$
      0012F5 0E               [12] 3666 	inc	r6
      0012F6 80 D5            [24] 3667 	sjmp	00402$
      0012F8                       3668 00131$:
                                   3669 ;	calc.c:151: if (!stack_push(ctx->ps, d0)) {
      0012F8 E5*00            [12] 3670 	mov	a,_bp
      0012FA 24 12            [12] 3671 	add	a,#0x12
      0012FC F8               [12] 3672 	mov	r0,a
      0012FD 74 11            [12] 3673 	mov	a,#0x11
      0012FF 26               [12] 3674 	add	a,@r0
      001300 FA               [12] 3675 	mov	r2,a
      001301 74 40            [12] 3676 	mov	a,#0x40
      001303 08               [12] 3677 	inc	r0
      001304 36               [12] 3678 	addc	a,@r0
      001305 FB               [12] 3679 	mov	r3,a
      001306 08               [12] 3680 	inc	r0
      001307 86 04            [24] 3681 	mov	ar4,@r0
      001309 8A 82            [24] 3682 	mov	dpl,r2
      00130B 8B 83            [24] 3683 	mov	dph,r3
      00130D 8C F0            [24] 3684 	mov	b,r4
      00130F 12r00r00         [24] 3685 	lcall	__gptrget
      001312 FA               [12] 3686 	mov	r2,a
      001313 A3               [24] 3687 	inc	dptr
      001314 12r00r00         [24] 3688 	lcall	__gptrget
      001317 FB               [12] 3689 	mov	r3,a
      001318 A3               [24] 3690 	inc	dptr
      001319 12r00r00         [24] 3691 	lcall	__gptrget
      00131C FC               [12] 3692 	mov	r4,a
      00131D E5*00            [12] 3693 	mov	a,_bp
      00131F 24 15            [12] 3694 	add	a,#0x15
      001321 F8               [12] 3695 	mov	r0,a
      001322 E6               [12] 3696 	mov	a,@r0
      001323 C0 E0            [24] 3697 	push	acc
      001325 08               [12] 3698 	inc	r0
      001326 E6               [12] 3699 	mov	a,@r0
      001327 C0 E0            [24] 3700 	push	acc
      001329 08               [12] 3701 	inc	r0
      00132A E6               [12] 3702 	mov	a,@r0
      00132B C0 E0            [24] 3703 	push	acc
      00132D 08               [12] 3704 	inc	r0
      00132E E6               [12] 3705 	mov	a,@r0
      00132F C0 E0            [24] 3706 	push	acc
      001331 8A 82            [24] 3707 	mov	dpl,r2
      001333 8B 83            [24] 3708 	mov	dph,r3
      001335 8C F0            [24] 3709 	mov	b,r4
      001337 12r00r00         [24] 3710 	lcall	_stack_push
      00133A AB 82            [24] 3711 	mov	r3,dpl
      00133C AC 83            [24] 3712 	mov	r4,dph
      00133E E5 81            [12] 3713 	mov	a,sp
      001340 24 FC            [12] 3714 	add	a,#0xfc
      001342 F5 81            [12] 3715 	mov	sp,a
      001344 EB               [12] 3716 	mov	a,r3
      001345 4C               [12] 3717 	orl	a,r4
      001346 60 03            [24] 3718 	jz	01304$
      001348 02r2Er65         [24] 3719 	ljmp	00249$
      00134B                       3720 01304$:
                                   3721 ;	calc.c:152: printstr("\r\nstack overflow\r\n");
      00134B 7Fr9D            [12] 3722 	mov	r7,#___str_13
      00134D 7Es00            [12] 3723 	mov	r6,#(___str_13 >> 8)
      00134F 7D 80            [12] 3724 	mov	r5,#0x80
                                   3725 ;	calc.c:20: return;
      001351                       3726 00405$:
                                   3727 ;	calc.c:18: for (; *s; s++) putchar(*s);
      001351 8F 82            [24] 3728 	mov	dpl,r7
      001353 8E 83            [24] 3729 	mov	dph,r6
      001355 8D F0            [24] 3730 	mov	b,r5
      001357 12r00r00         [24] 3731 	lcall	__gptrget
      00135A FC               [12] 3732 	mov	r4,a
      00135B 60 1C            [24] 3733 	jz	00289$
      00135D 7B 00            [12] 3734 	mov	r3,#0x00
      00135F 8C 82            [24] 3735 	mov	dpl,r4
      001361 8B 83            [24] 3736 	mov	dph,r3
      001363 C0 07            [24] 3737 	push	ar7
      001365 C0 06            [24] 3738 	push	ar6
      001367 C0 05            [24] 3739 	push	ar5
      001369 12r00r00         [24] 3740 	lcall	_putchar
      00136C D0 05            [24] 3741 	pop	ar5
      00136E D0 06            [24] 3742 	pop	ar6
      001370 D0 07            [24] 3743 	pop	ar7
      001372 0F               [12] 3744 	inc	r7
                                   3745 ;	calc.c:152: printstr("\r\nstack overflow\r\n");
      001373 BF 00 DB         [24] 3746 	cjne	r7,#0x00,00405$
      001376 0E               [12] 3747 	inc	r6
      001377 80 D8            [24] 3748 	sjmp	00405$
      001379                       3749 00289$:
                                   3750 ;	calc.c:153: (void)stack_push(ctx->ss, d0);
      001379 E5*00            [12] 3751 	mov	a,_bp
      00137B 24 07            [12] 3752 	add	a,#0x07
      00137D F8               [12] 3753 	mov	r0,a
      00137E 86 82            [24] 3754 	mov	dpl,@r0
      001380 08               [12] 3755 	inc	r0
      001381 86 83            [24] 3756 	mov	dph,@r0
      001383 08               [12] 3757 	inc	r0
      001384 86 F0            [24] 3758 	mov	b,@r0
      001386 12r00r00         [24] 3759 	lcall	__gptrget
      001389 FA               [12] 3760 	mov	r2,a
      00138A A3               [24] 3761 	inc	dptr
      00138B 12r00r00         [24] 3762 	lcall	__gptrget
      00138E FB               [12] 3763 	mov	r3,a
      00138F A3               [24] 3764 	inc	dptr
      001390 12r00r00         [24] 3765 	lcall	__gptrget
      001393 FC               [12] 3766 	mov	r4,a
      001394 E5*00            [12] 3767 	mov	a,_bp
      001396 24 15            [12] 3768 	add	a,#0x15
      001398 F8               [12] 3769 	mov	r0,a
      001399 E6               [12] 3770 	mov	a,@r0
      00139A C0 E0            [24] 3771 	push	acc
      00139C 08               [12] 3772 	inc	r0
      00139D E6               [12] 3773 	mov	a,@r0
      00139E C0 E0            [24] 3774 	push	acc
      0013A0 08               [12] 3775 	inc	r0
      0013A1 E6               [12] 3776 	mov	a,@r0
      0013A2 C0 E0            [24] 3777 	push	acc
      0013A4 08               [12] 3778 	inc	r0
      0013A5 E6               [12] 3779 	mov	a,@r0
      0013A6 C0 E0            [24] 3780 	push	acc
      0013A8 8A 82            [24] 3781 	mov	dpl,r2
      0013AA 8B 83            [24] 3782 	mov	dph,r3
      0013AC 8C F0            [24] 3783 	mov	b,r4
      0013AE 12r00r00         [24] 3784 	lcall	_stack_push
      0013B1 E5 81            [12] 3785 	mov	a,sp
      0013B3 24 FC            [12] 3786 	add	a,#0xfc
      0013B5 F5 81            [12] 3787 	mov	sp,a
                                   3788 ;	calc.c:156: break;
      0013B7 02r2Er65         [24] 3789 	ljmp	00249$
                                   3790 ;	calc.c:157: case 'u':
      0013BA                       3791 00133$:
                                   3792 ;	calc.c:158: if (!stack_peek(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      0013BA E5*00            [12] 3793 	mov	a,_bp
      0013BC 24 15            [12] 3794 	add	a,#0x15
      0013BE FF               [12] 3795 	mov	r7,a
      0013BF 7E 00            [12] 3796 	mov	r6,#0x00
      0013C1 7D 40            [12] 3797 	mov	r5,#0x40
      0013C3 E5*00            [12] 3798 	mov	a,_bp
      0013C5 24 12            [12] 3799 	add	a,#0x12
      0013C7 F8               [12] 3800 	mov	r0,a
      0013C8 74 11            [12] 3801 	mov	a,#0x11
      0013CA 26               [12] 3802 	add	a,@r0
      0013CB FA               [12] 3803 	mov	r2,a
      0013CC ED               [12] 3804 	mov	a,r5
      0013CD 08               [12] 3805 	inc	r0
      0013CE 36               [12] 3806 	addc	a,@r0
      0013CF FB               [12] 3807 	mov	r3,a
      0013D0 08               [12] 3808 	inc	r0
      0013D1 86 04            [24] 3809 	mov	ar4,@r0
      0013D3 8A 82            [24] 3810 	mov	dpl,r2
      0013D5 8B 83            [24] 3811 	mov	dph,r3
      0013D7 8C F0            [24] 3812 	mov	b,r4
      0013D9 12r00r00         [24] 3813 	lcall	__gptrget
      0013DC FA               [12] 3814 	mov	r2,a
      0013DD A3               [24] 3815 	inc	dptr
      0013DE 12r00r00         [24] 3816 	lcall	__gptrget
      0013E1 FB               [12] 3817 	mov	r3,a
      0013E2 A3               [24] 3818 	inc	dptr
      0013E3 12r00r00         [24] 3819 	lcall	__gptrget
      0013E6 FC               [12] 3820 	mov	r4,a
      0013E7 C0 07            [24] 3821 	push	ar7
      0013E9 C0 06            [24] 3822 	push	ar6
      0013EB C0 05            [24] 3823 	push	ar5
      0013ED 8A 82            [24] 3824 	mov	dpl,r2
      0013EF 8B 83            [24] 3825 	mov	dph,r3
      0013F1 8C F0            [24] 3826 	mov	b,r4
      0013F3 12r00r00         [24] 3827 	lcall	_stack_peek
      0013F6 AB 82            [24] 3828 	mov	r3,dpl
      0013F8 AC 83            [24] 3829 	mov	r4,dph
      0013FA 15 81            [12] 3830 	dec	sp
      0013FC 15 81            [12] 3831 	dec	sp
      0013FE 15 81            [12] 3832 	dec	sp
      001400 EB               [12] 3833 	mov	a,r3
      001401 4C               [12] 3834 	orl	a,r4
      001402 70 31            [24] 3835 	jnz	00137$
      001404 7Fr4E            [12] 3836 	mov	r7,#___str_10
      001406 7Es00            [12] 3837 	mov	r6,#(___str_10 >> 8)
      001408 7D 80            [12] 3838 	mov	r5,#0x80
                                   3839 ;	calc.c:20: return;
      00140A                       3840 00408$:
                                   3841 ;	calc.c:18: for (; *s; s++) putchar(*s);
      00140A 8F 82            [24] 3842 	mov	dpl,r7
      00140C 8E 83            [24] 3843 	mov	dph,r6
      00140E 8D F0            [24] 3844 	mov	b,r5
      001410 12r00r00         [24] 3845 	lcall	__gptrget
      001413 FC               [12] 3846 	mov	r4,a
      001414 70 03            [24] 3847 	jnz	01308$
      001416 02r2Er65         [24] 3848 	ljmp	00249$
      001419                       3849 01308$:
      001419 7B 00            [12] 3850 	mov	r3,#0x00
      00141B 8C 82            [24] 3851 	mov	dpl,r4
      00141D 8B 83            [24] 3852 	mov	dph,r3
      00141F C0 07            [24] 3853 	push	ar7
      001421 C0 06            [24] 3854 	push	ar6
      001423 C0 05            [24] 3855 	push	ar5
      001425 12r00r00         [24] 3856 	lcall	_putchar
      001428 D0 05            [24] 3857 	pop	ar5
      00142A D0 06            [24] 3858 	pop	ar6
      00142C D0 07            [24] 3859 	pop	ar7
      00142E 0F               [12] 3860 	inc	r7
                                   3861 ;	calc.c:158: if (!stack_peek(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      00142F BF 00 D8         [24] 3862 	cjne	r7,#0x00,00408$
      001432 0E               [12] 3863 	inc	r6
      001433 80 D5            [24] 3864 	sjmp	00408$
      001435                       3865 00137$:
                                   3866 ;	calc.c:159: else if (!stack_push(ctx->ss, d0)) printstr("\r\nsecondary stack overflow\r\n");
      001435 E5*00            [12] 3867 	mov	a,_bp
      001437 24 12            [12] 3868 	add	a,#0x12
      001439 F8               [12] 3869 	mov	r0,a
      00143A 74 14            [12] 3870 	mov	a,#0x14
      00143C 26               [12] 3871 	add	a,@r0
      00143D FA               [12] 3872 	mov	r2,a
      00143E 74 40            [12] 3873 	mov	a,#0x40
      001440 08               [12] 3874 	inc	r0
      001441 36               [12] 3875 	addc	a,@r0
      001442 FB               [12] 3876 	mov	r3,a
      001443 08               [12] 3877 	inc	r0
      001444 86 04            [24] 3878 	mov	ar4,@r0
      001446 8A 82            [24] 3879 	mov	dpl,r2
      001448 8B 83            [24] 3880 	mov	dph,r3
      00144A 8C F0            [24] 3881 	mov	b,r4
      00144C 12r00r00         [24] 3882 	lcall	__gptrget
      00144F FA               [12] 3883 	mov	r2,a
      001450 A3               [24] 3884 	inc	dptr
      001451 12r00r00         [24] 3885 	lcall	__gptrget
      001454 FB               [12] 3886 	mov	r3,a
      001455 A3               [24] 3887 	inc	dptr
      001456 12r00r00         [24] 3888 	lcall	__gptrget
      001459 FC               [12] 3889 	mov	r4,a
      00145A E5*00            [12] 3890 	mov	a,_bp
      00145C 24 15            [12] 3891 	add	a,#0x15
      00145E F8               [12] 3892 	mov	r0,a
      00145F E6               [12] 3893 	mov	a,@r0
      001460 C0 E0            [24] 3894 	push	acc
      001462 08               [12] 3895 	inc	r0
      001463 E6               [12] 3896 	mov	a,@r0
      001464 C0 E0            [24] 3897 	push	acc
      001466 08               [12] 3898 	inc	r0
      001467 E6               [12] 3899 	mov	a,@r0
      001468 C0 E0            [24] 3900 	push	acc
      00146A 08               [12] 3901 	inc	r0
      00146B E6               [12] 3902 	mov	a,@r0
      00146C C0 E0            [24] 3903 	push	acc
      00146E 8A 82            [24] 3904 	mov	dpl,r2
      001470 8B 83            [24] 3905 	mov	dph,r3
      001472 8C F0            [24] 3906 	mov	b,r4
      001474 12r00r00         [24] 3907 	lcall	_stack_push
      001477 AB 82            [24] 3908 	mov	r3,dpl
      001479 AC 83            [24] 3909 	mov	r4,dph
      00147B E5 81            [12] 3910 	mov	a,sp
      00147D 24 FC            [12] 3911 	add	a,#0xfc
      00147F F5 81            [12] 3912 	mov	sp,a
      001481 EB               [12] 3913 	mov	a,r3
      001482 4C               [12] 3914 	orl	a,r4
      001483 60 03            [24] 3915 	jz	01310$
      001485 02r2Er65         [24] 3916 	ljmp	00249$
      001488                       3917 01310$:
      001488 7Fr62            [12] 3918 	mov	r7,#___str_11
      00148A 7Es00            [12] 3919 	mov	r6,#(___str_11 >> 8)
      00148C 7D 80            [12] 3920 	mov	r5,#0x80
                                   3921 ;	calc.c:20: return;
      00148E                       3922 00411$:
                                   3923 ;	calc.c:18: for (; *s; s++) putchar(*s);
      00148E 8F 82            [24] 3924 	mov	dpl,r7
      001490 8E 83            [24] 3925 	mov	dph,r6
      001492 8D F0            [24] 3926 	mov	b,r5
      001494 12r00r00         [24] 3927 	lcall	__gptrget
      001497 FC               [12] 3928 	mov	r4,a
      001498 70 03            [24] 3929 	jnz	01311$
      00149A 02r2Er65         [24] 3930 	ljmp	00249$
      00149D                       3931 01311$:
      00149D 7B 00            [12] 3932 	mov	r3,#0x00
      00149F 8C 82            [24] 3933 	mov	dpl,r4
      0014A1 8B 83            [24] 3934 	mov	dph,r3
      0014A3 C0 07            [24] 3935 	push	ar7
      0014A5 C0 06            [24] 3936 	push	ar6
      0014A7 C0 05            [24] 3937 	push	ar5
      0014A9 12r00r00         [24] 3938 	lcall	_putchar
      0014AC D0 05            [24] 3939 	pop	ar5
      0014AE D0 06            [24] 3940 	pop	ar6
      0014B0 D0 07            [24] 3941 	pop	ar7
      0014B2 0F               [12] 3942 	inc	r7
                                   3943 ;	calc.c:161: case 'U':
      0014B3 BF 00 D8         [24] 3944 	cjne	r7,#0x00,00411$
      0014B6 0E               [12] 3945 	inc	r6
      0014B7 80 D5            [24] 3946 	sjmp	00411$
      0014B9                       3947 00139$:
                                   3948 ;	calc.c:162: if (!stack_peek(ctx->ss, &d0)) printstr("\r\nsecondary stack underflow\r\n");
      0014B9 E5*00            [12] 3949 	mov	a,_bp
      0014BB 24 15            [12] 3950 	add	a,#0x15
      0014BD FF               [12] 3951 	mov	r7,a
      0014BE 7E 00            [12] 3952 	mov	r6,#0x00
      0014C0 7D 40            [12] 3953 	mov	r5,#0x40
      0014C2 E5*00            [12] 3954 	mov	a,_bp
      0014C4 24 12            [12] 3955 	add	a,#0x12
      0014C6 F8               [12] 3956 	mov	r0,a
      0014C7 74 14            [12] 3957 	mov	a,#0x14
      0014C9 26               [12] 3958 	add	a,@r0
      0014CA FA               [12] 3959 	mov	r2,a
      0014CB ED               [12] 3960 	mov	a,r5
      0014CC 08               [12] 3961 	inc	r0
      0014CD 36               [12] 3962 	addc	a,@r0
      0014CE FB               [12] 3963 	mov	r3,a
      0014CF 08               [12] 3964 	inc	r0
      0014D0 86 04            [24] 3965 	mov	ar4,@r0
      0014D2 8A 82            [24] 3966 	mov	dpl,r2
      0014D4 8B 83            [24] 3967 	mov	dph,r3
      0014D6 8C F0            [24] 3968 	mov	b,r4
      0014D8 12r00r00         [24] 3969 	lcall	__gptrget
      0014DB FA               [12] 3970 	mov	r2,a
      0014DC A3               [24] 3971 	inc	dptr
      0014DD 12r00r00         [24] 3972 	lcall	__gptrget
      0014E0 FB               [12] 3973 	mov	r3,a
      0014E1 A3               [24] 3974 	inc	dptr
      0014E2 12r00r00         [24] 3975 	lcall	__gptrget
      0014E5 FC               [12] 3976 	mov	r4,a
      0014E6 C0 07            [24] 3977 	push	ar7
      0014E8 C0 06            [24] 3978 	push	ar6
      0014EA C0 05            [24] 3979 	push	ar5
      0014EC 8A 82            [24] 3980 	mov	dpl,r2
      0014EE 8B 83            [24] 3981 	mov	dph,r3
      0014F0 8C F0            [24] 3982 	mov	b,r4
      0014F2 12r00r00         [24] 3983 	lcall	_stack_peek
      0014F5 AB 82            [24] 3984 	mov	r3,dpl
      0014F7 AC 83            [24] 3985 	mov	r4,dph
      0014F9 15 81            [12] 3986 	dec	sp
      0014FB 15 81            [12] 3987 	dec	sp
      0014FD 15 81            [12] 3988 	dec	sp
      0014FF EB               [12] 3989 	mov	a,r3
      001500 4C               [12] 3990 	orl	a,r4
      001501 70 31            [24] 3991 	jnz	00143$
      001503 7Fr7F            [12] 3992 	mov	r7,#___str_12
      001505 7Es00            [12] 3993 	mov	r6,#(___str_12 >> 8)
      001507 7D 80            [12] 3994 	mov	r5,#0x80
                                   3995 ;	calc.c:20: return;
      001509                       3996 00414$:
                                   3997 ;	calc.c:18: for (; *s; s++) putchar(*s);
      001509 8F 82            [24] 3998 	mov	dpl,r7
      00150B 8E 83            [24] 3999 	mov	dph,r6
      00150D 8D F0            [24] 4000 	mov	b,r5
      00150F 12r00r00         [24] 4001 	lcall	__gptrget
      001512 FC               [12] 4002 	mov	r4,a
      001513 70 03            [24] 4003 	jnz	01314$
      001515 02r2Er65         [24] 4004 	ljmp	00249$
      001518                       4005 01314$:
      001518 7B 00            [12] 4006 	mov	r3,#0x00
      00151A 8C 82            [24] 4007 	mov	dpl,r4
      00151C 8B 83            [24] 4008 	mov	dph,r3
      00151E C0 07            [24] 4009 	push	ar7
      001520 C0 06            [24] 4010 	push	ar6
      001522 C0 05            [24] 4011 	push	ar5
      001524 12r00r00         [24] 4012 	lcall	_putchar
      001527 D0 05            [24] 4013 	pop	ar5
      001529 D0 06            [24] 4014 	pop	ar6
      00152B D0 07            [24] 4015 	pop	ar7
      00152D 0F               [12] 4016 	inc	r7
                                   4017 ;	calc.c:162: if (!stack_peek(ctx->ss, &d0)) printstr("\r\nsecondary stack underflow\r\n");
      00152E BF 00 D8         [24] 4018 	cjne	r7,#0x00,00414$
      001531 0E               [12] 4019 	inc	r6
      001532 80 D5            [24] 4020 	sjmp	00414$
      001534                       4021 00143$:
                                   4022 ;	calc.c:163: else if (!stack_push(ctx->ps, d0)) printstr("\r\nstack overflow\r\n");
      001534 E5*00            [12] 4023 	mov	a,_bp
      001536 24 12            [12] 4024 	add	a,#0x12
      001538 F8               [12] 4025 	mov	r0,a
      001539 74 11            [12] 4026 	mov	a,#0x11
      00153B 26               [12] 4027 	add	a,@r0
      00153C FA               [12] 4028 	mov	r2,a
      00153D 74 40            [12] 4029 	mov	a,#0x40
      00153F 08               [12] 4030 	inc	r0
      001540 36               [12] 4031 	addc	a,@r0
      001541 FB               [12] 4032 	mov	r3,a
      001542 08               [12] 4033 	inc	r0
      001543 86 04            [24] 4034 	mov	ar4,@r0
      001545 8A 82            [24] 4035 	mov	dpl,r2
      001547 8B 83            [24] 4036 	mov	dph,r3
      001549 8C F0            [24] 4037 	mov	b,r4
      00154B 12r00r00         [24] 4038 	lcall	__gptrget
      00154E FA               [12] 4039 	mov	r2,a
      00154F A3               [24] 4040 	inc	dptr
      001550 12r00r00         [24] 4041 	lcall	__gptrget
      001553 FB               [12] 4042 	mov	r3,a
      001554 A3               [24] 4043 	inc	dptr
      001555 12r00r00         [24] 4044 	lcall	__gptrget
      001558 FC               [12] 4045 	mov	r4,a
      001559 E5*00            [12] 4046 	mov	a,_bp
      00155B 24 15            [12] 4047 	add	a,#0x15
      00155D F8               [12] 4048 	mov	r0,a
      00155E E6               [12] 4049 	mov	a,@r0
      00155F C0 E0            [24] 4050 	push	acc
      001561 08               [12] 4051 	inc	r0
      001562 E6               [12] 4052 	mov	a,@r0
      001563 C0 E0            [24] 4053 	push	acc
      001565 08               [12] 4054 	inc	r0
      001566 E6               [12] 4055 	mov	a,@r0
      001567 C0 E0            [24] 4056 	push	acc
      001569 08               [12] 4057 	inc	r0
      00156A E6               [12] 4058 	mov	a,@r0
      00156B C0 E0            [24] 4059 	push	acc
      00156D 8A 82            [24] 4060 	mov	dpl,r2
      00156F 8B 83            [24] 4061 	mov	dph,r3
      001571 8C F0            [24] 4062 	mov	b,r4
      001573 12r00r00         [24] 4063 	lcall	_stack_push
      001576 AB 82            [24] 4064 	mov	r3,dpl
      001578 AC 83            [24] 4065 	mov	r4,dph
      00157A E5 81            [12] 4066 	mov	a,sp
      00157C 24 FC            [12] 4067 	add	a,#0xfc
      00157E F5 81            [12] 4068 	mov	sp,a
      001580 EB               [12] 4069 	mov	a,r3
      001581 4C               [12] 4070 	orl	a,r4
      001582 60 03            [24] 4071 	jz	01316$
      001584 02r2Er65         [24] 4072 	ljmp	00249$
      001587                       4073 01316$:
      001587 7Fr9D            [12] 4074 	mov	r7,#___str_13
      001589 7Es00            [12] 4075 	mov	r6,#(___str_13 >> 8)
      00158B 7D 80            [12] 4076 	mov	r5,#0x80
                                   4077 ;	calc.c:20: return;
      00158D                       4078 00417$:
                                   4079 ;	calc.c:18: for (; *s; s++) putchar(*s);
      00158D 8F 82            [24] 4080 	mov	dpl,r7
      00158F 8E 83            [24] 4081 	mov	dph,r6
      001591 8D F0            [24] 4082 	mov	b,r5
      001593 12r00r00         [24] 4083 	lcall	__gptrget
      001596 FC               [12] 4084 	mov	r4,a
      001597 70 03            [24] 4085 	jnz	01317$
      001599 02r2Er65         [24] 4086 	ljmp	00249$
      00159C                       4087 01317$:
      00159C 7B 00            [12] 4088 	mov	r3,#0x00
      00159E 8C 82            [24] 4089 	mov	dpl,r4
      0015A0 8B 83            [24] 4090 	mov	dph,r3
      0015A2 C0 07            [24] 4091 	push	ar7
      0015A4 C0 06            [24] 4092 	push	ar6
      0015A6 C0 05            [24] 4093 	push	ar5
      0015A8 12r00r00         [24] 4094 	lcall	_putchar
      0015AB D0 05            [24] 4095 	pop	ar5
      0015AD D0 06            [24] 4096 	pop	ar6
      0015AF D0 07            [24] 4097 	pop	ar7
      0015B1 0F               [12] 4098 	inc	r7
                                   4099 ;	calc.c:165: case 'T':
      0015B2 BF 00 D8         [24] 4100 	cjne	r7,#0x00,00417$
      0015B5 0E               [12] 4101 	inc	r6
      0015B6 80 D5            [24] 4102 	sjmp	00417$
      0015B8                       4103 00145$:
                                   4104 ;	calc.c:166: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      0015B8 E5*00            [12] 4105 	mov	a,_bp
      0015BA 24 15            [12] 4106 	add	a,#0x15
      0015BC FF               [12] 4107 	mov	r7,a
      0015BD 7E 00            [12] 4108 	mov	r6,#0x00
      0015BF 7D 40            [12] 4109 	mov	r5,#0x40
      0015C1 E5*00            [12] 4110 	mov	a,_bp
      0015C3 24 12            [12] 4111 	add	a,#0x12
      0015C5 F8               [12] 4112 	mov	r0,a
      0015C6 E5*00            [12] 4113 	mov	a,_bp
      0015C8 24 07            [12] 4114 	add	a,#0x07
      0015CA F9               [12] 4115 	mov	r1,a
      0015CB 74 11            [12] 4116 	mov	a,#0x11
      0015CD 26               [12] 4117 	add	a,@r0
      0015CE F7               [12] 4118 	mov	@r1,a
      0015CF 74 40            [12] 4119 	mov	a,#0x40
      0015D1 08               [12] 4120 	inc	r0
      0015D2 36               [12] 4121 	addc	a,@r0
      0015D3 09               [12] 4122 	inc	r1
      0015D4 F7               [12] 4123 	mov	@r1,a
      0015D5 08               [12] 4124 	inc	r0
      0015D6 09               [12] 4125 	inc	r1
      0015D7 E6               [12] 4126 	mov	a,@r0
      0015D8 F7               [12] 4127 	mov	@r1,a
      0015D9 E5*00            [12] 4128 	mov	a,_bp
      0015DB 24 07            [12] 4129 	add	a,#0x07
      0015DD F8               [12] 4130 	mov	r0,a
      0015DE 86 82            [24] 4131 	mov	dpl,@r0
      0015E0 08               [12] 4132 	inc	r0
      0015E1 86 83            [24] 4133 	mov	dph,@r0
      0015E3 08               [12] 4134 	inc	r0
      0015E4 86 F0            [24] 4135 	mov	b,@r0
      0015E6 12r00r00         [24] 4136 	lcall	__gptrget
      0015E9 FA               [12] 4137 	mov	r2,a
      0015EA A3               [24] 4138 	inc	dptr
      0015EB 12r00r00         [24] 4139 	lcall	__gptrget
      0015EE FB               [12] 4140 	mov	r3,a
      0015EF A3               [24] 4141 	inc	dptr
      0015F0 12r00r00         [24] 4142 	lcall	__gptrget
      0015F3 FC               [12] 4143 	mov	r4,a
      0015F4 C0 07            [24] 4144 	push	ar7
      0015F6 C0 06            [24] 4145 	push	ar6
      0015F8 C0 05            [24] 4146 	push	ar5
      0015FA 8A 82            [24] 4147 	mov	dpl,r2
      0015FC 8B 83            [24] 4148 	mov	dph,r3
      0015FE 8C F0            [24] 4149 	mov	b,r4
      001600 12r00r00         [24] 4150 	lcall	_stack_pop
      001603 AB 82            [24] 4151 	mov	r3,dpl
      001605 AC 83            [24] 4152 	mov	r4,dph
      001607 15 81            [12] 4153 	dec	sp
      001609 15 81            [12] 4154 	dec	sp
      00160B 15 81            [12] 4155 	dec	sp
      00160D EB               [12] 4156 	mov	a,r3
      00160E 4C               [12] 4157 	orl	a,r4
      00160F 70 31            [24] 4158 	jnz	00150$
      001611 7Fr4E            [12] 4159 	mov	r7,#___str_10
      001613 7Es00            [12] 4160 	mov	r6,#(___str_10 >> 8)
      001615 7D 80            [12] 4161 	mov	r5,#0x80
                                   4162 ;	calc.c:20: return;
      001617                       4163 00420$:
                                   4164 ;	calc.c:18: for (; *s; s++) putchar(*s);
      001617 8F 82            [24] 4165 	mov	dpl,r7
      001619 8E 83            [24] 4166 	mov	dph,r6
      00161B 8D F0            [24] 4167 	mov	b,r5
      00161D 12r00r00         [24] 4168 	lcall	__gptrget
      001620 FC               [12] 4169 	mov	r4,a
      001621 70 03            [24] 4170 	jnz	01320$
      001623 02r2Er65         [24] 4171 	ljmp	00249$
      001626                       4172 01320$:
      001626 7B 00            [12] 4173 	mov	r3,#0x00
      001628 8C 82            [24] 4174 	mov	dpl,r4
      00162A 8B 83            [24] 4175 	mov	dph,r3
      00162C C0 07            [24] 4176 	push	ar7
      00162E C0 06            [24] 4177 	push	ar6
      001630 C0 05            [24] 4178 	push	ar5
      001632 12r00r00         [24] 4179 	lcall	_putchar
      001635 D0 05            [24] 4180 	pop	ar5
      001637 D0 06            [24] 4181 	pop	ar6
      001639 D0 07            [24] 4182 	pop	ar7
      00163B 0F               [12] 4183 	inc	r7
                                   4184 ;	calc.c:166: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      00163C BF 00 D8         [24] 4185 	cjne	r7,#0x00,00420$
      00163F 0E               [12] 4186 	inc	r6
      001640 80 D5            [24] 4187 	sjmp	00420$
      001642                       4188 00150$:
                                   4189 ;	calc.c:168: if (!stack_pop(ctx->ss, &d1)) {
      001642 E5*00            [12] 4190 	mov	a,_bp
      001644 24 19            [12] 4191 	add	a,#0x19
      001646 FF               [12] 4192 	mov	r7,a
      001647 7E 00            [12] 4193 	mov	r6,#0x00
      001649 7D 40            [12] 4194 	mov	r5,#0x40
      00164B E5*00            [12] 4195 	mov	a,_bp
      00164D 24 12            [12] 4196 	add	a,#0x12
      00164F F8               [12] 4197 	mov	r0,a
      001650 E5*00            [12] 4198 	mov	a,_bp
      001652 24 04            [12] 4199 	add	a,#0x04
      001654 F9               [12] 4200 	mov	r1,a
      001655 74 14            [12] 4201 	mov	a,#0x14
      001657 26               [12] 4202 	add	a,@r0
      001658 F7               [12] 4203 	mov	@r1,a
      001659 74 40            [12] 4204 	mov	a,#0x40
      00165B 08               [12] 4205 	inc	r0
      00165C 36               [12] 4206 	addc	a,@r0
      00165D 09               [12] 4207 	inc	r1
      00165E F7               [12] 4208 	mov	@r1,a
      00165F 08               [12] 4209 	inc	r0
      001660 09               [12] 4210 	inc	r1
      001661 E6               [12] 4211 	mov	a,@r0
      001662 F7               [12] 4212 	mov	@r1,a
      001663 E5*00            [12] 4213 	mov	a,_bp
      001665 24 04            [12] 4214 	add	a,#0x04
      001667 F8               [12] 4215 	mov	r0,a
      001668 86 82            [24] 4216 	mov	dpl,@r0
      00166A 08               [12] 4217 	inc	r0
      00166B 86 83            [24] 4218 	mov	dph,@r0
      00166D 08               [12] 4219 	inc	r0
      00166E 86 F0            [24] 4220 	mov	b,@r0
      001670 12r00r00         [24] 4221 	lcall	__gptrget
      001673 FA               [12] 4222 	mov	r2,a
      001674 A3               [24] 4223 	inc	dptr
      001675 12r00r00         [24] 4224 	lcall	__gptrget
      001678 FB               [12] 4225 	mov	r3,a
      001679 A3               [24] 4226 	inc	dptr
      00167A 12r00r00         [24] 4227 	lcall	__gptrget
      00167D FC               [12] 4228 	mov	r4,a
      00167E C0 07            [24] 4229 	push	ar7
      001680 C0 06            [24] 4230 	push	ar6
      001682 C0 05            [24] 4231 	push	ar5
      001684 8A 82            [24] 4232 	mov	dpl,r2
      001686 8B 83            [24] 4233 	mov	dph,r3
      001688 8C F0            [24] 4234 	mov	b,r4
      00168A 12r00r00         [24] 4235 	lcall	_stack_pop
      00168D AB 82            [24] 4236 	mov	r3,dpl
      00168F AC 83            [24] 4237 	mov	r4,dph
      001691 15 81            [12] 4238 	dec	sp
      001693 15 81            [12] 4239 	dec	sp
      001695 15 81            [12] 4240 	dec	sp
      001697 EB               [12] 4241 	mov	a,r3
      001698 4C               [12] 4242 	orl	a,r4
      001699 70 6F            [24] 4243 	jnz	00147$
                                   4244 ;	calc.c:169: printstr("\r\nsecondary stack underflow\r\n");
      00169B 7Fr7F            [12] 4245 	mov	r7,#___str_12
      00169D 7Es00            [12] 4246 	mov	r6,#(___str_12 >> 8)
      00169F 7D 80            [12] 4247 	mov	r5,#0x80
                                   4248 ;	calc.c:20: return;
      0016A1                       4249 00423$:
                                   4250 ;	calc.c:18: for (; *s; s++) putchar(*s);
      0016A1 8F 82            [24] 4251 	mov	dpl,r7
      0016A3 8E 83            [24] 4252 	mov	dph,r6
      0016A5 8D F0            [24] 4253 	mov	b,r5
      0016A7 12r00r00         [24] 4254 	lcall	__gptrget
      0016AA FC               [12] 4255 	mov	r4,a
      0016AB 60 1C            [24] 4256 	jz	00301$
      0016AD 7B 00            [12] 4257 	mov	r3,#0x00
      0016AF 8C 82            [24] 4258 	mov	dpl,r4
      0016B1 8B 83            [24] 4259 	mov	dph,r3
      0016B3 C0 07            [24] 4260 	push	ar7
      0016B5 C0 06            [24] 4261 	push	ar6
      0016B7 C0 05            [24] 4262 	push	ar5
      0016B9 12r00r00         [24] 4263 	lcall	_putchar
      0016BC D0 05            [24] 4264 	pop	ar5
      0016BE D0 06            [24] 4265 	pop	ar6
      0016C0 D0 07            [24] 4266 	pop	ar7
      0016C2 0F               [12] 4267 	inc	r7
                                   4268 ;	calc.c:169: printstr("\r\nsecondary stack underflow\r\n");
      0016C3 BF 00 DB         [24] 4269 	cjne	r7,#0x00,00423$
      0016C6 0E               [12] 4270 	inc	r6
      0016C7 80 D8            [24] 4271 	sjmp	00423$
      0016C9                       4272 00301$:
                                   4273 ;	calc.c:170: (void)stack_push(ctx->ps, d0);
      0016C9 E5*00            [12] 4274 	mov	a,_bp
      0016CB 24 07            [12] 4275 	add	a,#0x07
      0016CD F8               [12] 4276 	mov	r0,a
      0016CE 86 82            [24] 4277 	mov	dpl,@r0
      0016D0 08               [12] 4278 	inc	r0
      0016D1 86 83            [24] 4279 	mov	dph,@r0
      0016D3 08               [12] 4280 	inc	r0
      0016D4 86 F0            [24] 4281 	mov	b,@r0
      0016D6 12r00r00         [24] 4282 	lcall	__gptrget
      0016D9 FA               [12] 4283 	mov	r2,a
      0016DA A3               [24] 4284 	inc	dptr
      0016DB 12r00r00         [24] 4285 	lcall	__gptrget
      0016DE FB               [12] 4286 	mov	r3,a
      0016DF A3               [24] 4287 	inc	dptr
      0016E0 12r00r00         [24] 4288 	lcall	__gptrget
      0016E3 FC               [12] 4289 	mov	r4,a
      0016E4 E5*00            [12] 4290 	mov	a,_bp
      0016E6 24 15            [12] 4291 	add	a,#0x15
      0016E8 F8               [12] 4292 	mov	r0,a
      0016E9 E6               [12] 4293 	mov	a,@r0
      0016EA C0 E0            [24] 4294 	push	acc
      0016EC 08               [12] 4295 	inc	r0
      0016ED E6               [12] 4296 	mov	a,@r0
      0016EE C0 E0            [24] 4297 	push	acc
      0016F0 08               [12] 4298 	inc	r0
      0016F1 E6               [12] 4299 	mov	a,@r0
      0016F2 C0 E0            [24] 4300 	push	acc
      0016F4 08               [12] 4301 	inc	r0
      0016F5 E6               [12] 4302 	mov	a,@r0
      0016F6 C0 E0            [24] 4303 	push	acc
      0016F8 8A 82            [24] 4304 	mov	dpl,r2
      0016FA 8B 83            [24] 4305 	mov	dph,r3
      0016FC 8C F0            [24] 4306 	mov	b,r4
      0016FE 12r00r00         [24] 4307 	lcall	_stack_push
      001701 E5 81            [12] 4308 	mov	a,sp
      001703 24 FC            [12] 4309 	add	a,#0xfc
      001705 F5 81            [12] 4310 	mov	sp,a
      001707 02r2Er65         [24] 4311 	ljmp	00249$
      00170A                       4312 00147$:
                                   4313 ;	calc.c:172: (void)stack_push(ctx->ps, d1);
      00170A E5*00            [12] 4314 	mov	a,_bp
      00170C 24 07            [12] 4315 	add	a,#0x07
      00170E F8               [12] 4316 	mov	r0,a
      00170F 86 82            [24] 4317 	mov	dpl,@r0
      001711 08               [12] 4318 	inc	r0
      001712 86 83            [24] 4319 	mov	dph,@r0
      001714 08               [12] 4320 	inc	r0
      001715 86 F0            [24] 4321 	mov	b,@r0
      001717 12r00r00         [24] 4322 	lcall	__gptrget
      00171A FA               [12] 4323 	mov	r2,a
      00171B A3               [24] 4324 	inc	dptr
      00171C 12r00r00         [24] 4325 	lcall	__gptrget
      00171F FB               [12] 4326 	mov	r3,a
      001720 A3               [24] 4327 	inc	dptr
      001721 12r00r00         [24] 4328 	lcall	__gptrget
      001724 FC               [12] 4329 	mov	r4,a
      001725 E5*00            [12] 4330 	mov	a,_bp
      001727 24 19            [12] 4331 	add	a,#0x19
      001729 F8               [12] 4332 	mov	r0,a
      00172A E6               [12] 4333 	mov	a,@r0
      00172B C0 E0            [24] 4334 	push	acc
      00172D 08               [12] 4335 	inc	r0
      00172E E6               [12] 4336 	mov	a,@r0
      00172F C0 E0            [24] 4337 	push	acc
      001731 08               [12] 4338 	inc	r0
      001732 E6               [12] 4339 	mov	a,@r0
      001733 C0 E0            [24] 4340 	push	acc
      001735 08               [12] 4341 	inc	r0
      001736 E6               [12] 4342 	mov	a,@r0
      001737 C0 E0            [24] 4343 	push	acc
      001739 8A 82            [24] 4344 	mov	dpl,r2
      00173B 8B 83            [24] 4345 	mov	dph,r3
      00173D 8C F0            [24] 4346 	mov	b,r4
      00173F 12r00r00         [24] 4347 	lcall	_stack_push
      001742 E5 81            [12] 4348 	mov	a,sp
      001744 24 FC            [12] 4349 	add	a,#0xfc
      001746 F5 81            [12] 4350 	mov	sp,a
                                   4351 ;	calc.c:173: (void)stack_push(ctx->ss, d0);
      001748 E5*00            [12] 4352 	mov	a,_bp
      00174A 24 04            [12] 4353 	add	a,#0x04
      00174C F8               [12] 4354 	mov	r0,a
      00174D 86 82            [24] 4355 	mov	dpl,@r0
      00174F 08               [12] 4356 	inc	r0
      001750 86 83            [24] 4357 	mov	dph,@r0
      001752 08               [12] 4358 	inc	r0
      001753 86 F0            [24] 4359 	mov	b,@r0
      001755 12r00r00         [24] 4360 	lcall	__gptrget
      001758 FA               [12] 4361 	mov	r2,a
      001759 A3               [24] 4362 	inc	dptr
      00175A 12r00r00         [24] 4363 	lcall	__gptrget
      00175D FB               [12] 4364 	mov	r3,a
      00175E A3               [24] 4365 	inc	dptr
      00175F 12r00r00         [24] 4366 	lcall	__gptrget
      001762 FC               [12] 4367 	mov	r4,a
      001763 E5*00            [12] 4368 	mov	a,_bp
      001765 24 15            [12] 4369 	add	a,#0x15
      001767 F8               [12] 4370 	mov	r0,a
      001768 E6               [12] 4371 	mov	a,@r0
      001769 C0 E0            [24] 4372 	push	acc
      00176B 08               [12] 4373 	inc	r0
      00176C E6               [12] 4374 	mov	a,@r0
      00176D C0 E0            [24] 4375 	push	acc
      00176F 08               [12] 4376 	inc	r0
      001770 E6               [12] 4377 	mov	a,@r0
      001771 C0 E0            [24] 4378 	push	acc
      001773 08               [12] 4379 	inc	r0
      001774 E6               [12] 4380 	mov	a,@r0
      001775 C0 E0            [24] 4381 	push	acc
      001777 8A 82            [24] 4382 	mov	dpl,r2
      001779 8B 83            [24] 4383 	mov	dph,r3
      00177B 8C F0            [24] 4384 	mov	b,r4
      00177D 12r00r00         [24] 4385 	lcall	_stack_push
      001780 E5 81            [12] 4386 	mov	a,sp
      001782 24 FC            [12] 4387 	add	a,#0xfc
      001784 F5 81            [12] 4388 	mov	sp,a
                                   4389 ;	calc.c:176: break;
      001786 02r2Er65         [24] 4390 	ljmp	00249$
                                   4391 ;	calc.c:177: case 'X':
      001789                       4392 00152$:
                                   4393 ;	calc.c:178: t0 = ctx->ps;
      001789 E5*00            [12] 4394 	mov	a,_bp
      00178B 24 12            [12] 4395 	add	a,#0x12
      00178D F8               [12] 4396 	mov	r0,a
      00178E E5*00            [12] 4397 	mov	a,_bp
      001790 24 0B            [12] 4398 	add	a,#0x0b
      001792 F9               [12] 4399 	mov	r1,a
      001793 74 11            [12] 4400 	mov	a,#0x11
      001795 26               [12] 4401 	add	a,@r0
      001796 F7               [12] 4402 	mov	@r1,a
      001797 74 40            [12] 4403 	mov	a,#0x40
      001799 08               [12] 4404 	inc	r0
      00179A 36               [12] 4405 	addc	a,@r0
      00179B 09               [12] 4406 	inc	r1
      00179C F7               [12] 4407 	mov	@r1,a
      00179D 08               [12] 4408 	inc	r0
      00179E 09               [12] 4409 	inc	r1
      00179F E6               [12] 4410 	mov	a,@r0
      0017A0 F7               [12] 4411 	mov	@r1,a
      0017A1 E5*00            [12] 4412 	mov	a,_bp
      0017A3 24 0B            [12] 4413 	add	a,#0x0b
      0017A5 F8               [12] 4414 	mov	r0,a
      0017A6 86 82            [24] 4415 	mov	dpl,@r0
      0017A8 08               [12] 4416 	inc	r0
      0017A9 86 83            [24] 4417 	mov	dph,@r0
      0017AB 08               [12] 4418 	inc	r0
      0017AC 86 F0            [24] 4419 	mov	b,@r0
      0017AE 12r00r00         [24] 4420 	lcall	__gptrget
      0017B1 FF               [12] 4421 	mov	r7,a
      0017B2 A3               [24] 4422 	inc	dptr
      0017B3 12r00r00         [24] 4423 	lcall	__gptrget
      0017B6 FE               [12] 4424 	mov	r6,a
      0017B7 A3               [24] 4425 	inc	dptr
      0017B8 12r00r00         [24] 4426 	lcall	__gptrget
      0017BB FD               [12] 4427 	mov	r5,a
                                   4428 ;	calc.c:179: ctx->ps = ctx->ss;
      0017BC E5*00            [12] 4429 	mov	a,_bp
      0017BE 24 12            [12] 4430 	add	a,#0x12
      0017C0 F8               [12] 4431 	mov	r0,a
      0017C1 E5*00            [12] 4432 	mov	a,_bp
      0017C3 24 07            [12] 4433 	add	a,#0x07
      0017C5 F9               [12] 4434 	mov	r1,a
      0017C6 74 14            [12] 4435 	mov	a,#0x14
      0017C8 26               [12] 4436 	add	a,@r0
      0017C9 F7               [12] 4437 	mov	@r1,a
      0017CA 74 40            [12] 4438 	mov	a,#0x40
      0017CC 08               [12] 4439 	inc	r0
      0017CD 36               [12] 4440 	addc	a,@r0
      0017CE 09               [12] 4441 	inc	r1
      0017CF F7               [12] 4442 	mov	@r1,a
      0017D0 08               [12] 4443 	inc	r0
      0017D1 09               [12] 4444 	inc	r1
      0017D2 E6               [12] 4445 	mov	a,@r0
      0017D3 F7               [12] 4446 	mov	@r1,a
      0017D4 E5*00            [12] 4447 	mov	a,_bp
      0017D6 24 07            [12] 4448 	add	a,#0x07
      0017D8 F8               [12] 4449 	mov	r0,a
      0017D9 86 82            [24] 4450 	mov	dpl,@r0
      0017DB 08               [12] 4451 	inc	r0
      0017DC 86 83            [24] 4452 	mov	dph,@r0
      0017DE 08               [12] 4453 	inc	r0
      0017DF 86 F0            [24] 4454 	mov	b,@r0
      0017E1 12r00r00         [24] 4455 	lcall	__gptrget
      0017E4 FA               [12] 4456 	mov	r2,a
      0017E5 A3               [24] 4457 	inc	dptr
      0017E6 12r00r00         [24] 4458 	lcall	__gptrget
      0017E9 FB               [12] 4459 	mov	r3,a
      0017EA A3               [24] 4460 	inc	dptr
      0017EB 12r00r00         [24] 4461 	lcall	__gptrget
      0017EE FC               [12] 4462 	mov	r4,a
      0017EF E5*00            [12] 4463 	mov	a,_bp
      0017F1 24 0B            [12] 4464 	add	a,#0x0b
      0017F3 F8               [12] 4465 	mov	r0,a
      0017F4 86 82            [24] 4466 	mov	dpl,@r0
      0017F6 08               [12] 4467 	inc	r0
      0017F7 86 83            [24] 4468 	mov	dph,@r0
      0017F9 08               [12] 4469 	inc	r0
      0017FA 86 F0            [24] 4470 	mov	b,@r0
      0017FC EA               [12] 4471 	mov	a,r2
      0017FD 12r00r00         [24] 4472 	lcall	__gptrput
      001800 A3               [24] 4473 	inc	dptr
      001801 EB               [12] 4474 	mov	a,r3
      001802 12r00r00         [24] 4475 	lcall	__gptrput
      001805 A3               [24] 4476 	inc	dptr
      001806 EC               [12] 4477 	mov	a,r4
      001807 12r00r00         [24] 4478 	lcall	__gptrput
                                   4479 ;	calc.c:180: ctx->ss = t0;
      00180A E5*00            [12] 4480 	mov	a,_bp
      00180C 24 07            [12] 4481 	add	a,#0x07
      00180E F8               [12] 4482 	mov	r0,a
      00180F 86 82            [24] 4483 	mov	dpl,@r0
      001811 08               [12] 4484 	inc	r0
      001812 86 83            [24] 4485 	mov	dph,@r0
      001814 08               [12] 4486 	inc	r0
      001815 86 F0            [24] 4487 	mov	b,@r0
      001817 EF               [12] 4488 	mov	a,r7
      001818 12r00r00         [24] 4489 	lcall	__gptrput
      00181B A3               [24] 4490 	inc	dptr
      00181C EE               [12] 4491 	mov	a,r6
      00181D 12r00r00         [24] 4492 	lcall	__gptrput
      001820 A3               [24] 4493 	inc	dptr
      001821 ED               [12] 4494 	mov	a,r5
      001822 12r00r00         [24] 4495 	lcall	__gptrput
                                   4496 ;	calc.c:181: break;
      001825 02r2Er65         [24] 4497 	ljmp	00249$
                                   4498 ;	calc.c:182: case '+':
      001828                       4499 00153$:
                                   4500 ;	calc.c:183: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      001828 E5*00            [12] 4501 	mov	a,_bp
      00182A 24 15            [12] 4502 	add	a,#0x15
      00182C FF               [12] 4503 	mov	r7,a
      00182D 7E 00            [12] 4504 	mov	r6,#0x00
      00182F 7D 40            [12] 4505 	mov	r5,#0x40
      001831 E5*00            [12] 4506 	mov	a,_bp
      001833 24 12            [12] 4507 	add	a,#0x12
      001835 F8               [12] 4508 	mov	r0,a
      001836 E5*00            [12] 4509 	mov	a,_bp
      001838 24 0B            [12] 4510 	add	a,#0x0b
      00183A F9               [12] 4511 	mov	r1,a
      00183B 74 11            [12] 4512 	mov	a,#0x11
      00183D 26               [12] 4513 	add	a,@r0
      00183E F7               [12] 4514 	mov	@r1,a
      00183F 74 40            [12] 4515 	mov	a,#0x40
      001841 08               [12] 4516 	inc	r0
      001842 36               [12] 4517 	addc	a,@r0
      001843 09               [12] 4518 	inc	r1
      001844 F7               [12] 4519 	mov	@r1,a
      001845 08               [12] 4520 	inc	r0
      001846 09               [12] 4521 	inc	r1
      001847 E6               [12] 4522 	mov	a,@r0
      001848 F7               [12] 4523 	mov	@r1,a
      001849 E5*00            [12] 4524 	mov	a,_bp
      00184B 24 0B            [12] 4525 	add	a,#0x0b
      00184D F8               [12] 4526 	mov	r0,a
      00184E 86 82            [24] 4527 	mov	dpl,@r0
      001850 08               [12] 4528 	inc	r0
      001851 86 83            [24] 4529 	mov	dph,@r0
      001853 08               [12] 4530 	inc	r0
      001854 86 F0            [24] 4531 	mov	b,@r0
      001856 12r00r00         [24] 4532 	lcall	__gptrget
      001859 FA               [12] 4533 	mov	r2,a
      00185A A3               [24] 4534 	inc	dptr
      00185B 12r00r00         [24] 4535 	lcall	__gptrget
      00185E FB               [12] 4536 	mov	r3,a
      00185F A3               [24] 4537 	inc	dptr
      001860 12r00r00         [24] 4538 	lcall	__gptrget
      001863 FC               [12] 4539 	mov	r4,a
      001864 C0 07            [24] 4540 	push	ar7
      001866 C0 06            [24] 4541 	push	ar6
      001868 C0 05            [24] 4542 	push	ar5
      00186A 8A 82            [24] 4543 	mov	dpl,r2
      00186C 8B 83            [24] 4544 	mov	dph,r3
      00186E 8C F0            [24] 4545 	mov	b,r4
      001870 12r00r00         [24] 4546 	lcall	_stack_pop
      001873 AB 82            [24] 4547 	mov	r3,dpl
      001875 AC 83            [24] 4548 	mov	r4,dph
      001877 15 81            [12] 4549 	dec	sp
      001879 15 81            [12] 4550 	dec	sp
      00187B 15 81            [12] 4551 	dec	sp
      00187D EB               [12] 4552 	mov	a,r3
      00187E 4C               [12] 4553 	orl	a,r4
      00187F 70 31            [24] 4554 	jnz	00158$
      001881 7Fr4E            [12] 4555 	mov	r7,#___str_10
      001883 7Es00            [12] 4556 	mov	r6,#(___str_10 >> 8)
      001885 7D 80            [12] 4557 	mov	r5,#0x80
                                   4558 ;	calc.c:20: return;
      001887                       4559 00426$:
                                   4560 ;	calc.c:18: for (; *s; s++) putchar(*s);
      001887 8F 82            [24] 4561 	mov	dpl,r7
      001889 8E 83            [24] 4562 	mov	dph,r6
      00188B 8D F0            [24] 4563 	mov	b,r5
      00188D 12r00r00         [24] 4564 	lcall	__gptrget
      001890 FC               [12] 4565 	mov	r4,a
      001891 70 03            [24] 4566 	jnz	01326$
      001893 02r2Er65         [24] 4567 	ljmp	00249$
      001896                       4568 01326$:
      001896 7B 00            [12] 4569 	mov	r3,#0x00
      001898 8C 82            [24] 4570 	mov	dpl,r4
      00189A 8B 83            [24] 4571 	mov	dph,r3
      00189C C0 07            [24] 4572 	push	ar7
      00189E C0 06            [24] 4573 	push	ar6
      0018A0 C0 05            [24] 4574 	push	ar5
      0018A2 12r00r00         [24] 4575 	lcall	_putchar
      0018A5 D0 05            [24] 4576 	pop	ar5
      0018A7 D0 06            [24] 4577 	pop	ar6
      0018A9 D0 07            [24] 4578 	pop	ar7
      0018AB 0F               [12] 4579 	inc	r7
                                   4580 ;	calc.c:183: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      0018AC BF 00 D8         [24] 4581 	cjne	r7,#0x00,00426$
      0018AF 0E               [12] 4582 	inc	r6
      0018B0 80 D5            [24] 4583 	sjmp	00426$
      0018B2                       4584 00158$:
                                   4585 ;	calc.c:184: else if (!stack_pop(ctx->ps, &d1)) {
      0018B2 E5*00            [12] 4586 	mov	a,_bp
      0018B4 24 19            [12] 4587 	add	a,#0x19
      0018B6 FF               [12] 4588 	mov	r7,a
      0018B7 7E 00            [12] 4589 	mov	r6,#0x00
      0018B9 7D 40            [12] 4590 	mov	r5,#0x40
      0018BB E5*00            [12] 4591 	mov	a,_bp
      0018BD 24 0B            [12] 4592 	add	a,#0x0b
      0018BF F8               [12] 4593 	mov	r0,a
      0018C0 86 82            [24] 4594 	mov	dpl,@r0
      0018C2 08               [12] 4595 	inc	r0
      0018C3 86 83            [24] 4596 	mov	dph,@r0
      0018C5 08               [12] 4597 	inc	r0
      0018C6 86 F0            [24] 4598 	mov	b,@r0
      0018C8 12r00r00         [24] 4599 	lcall	__gptrget
      0018CB FA               [12] 4600 	mov	r2,a
      0018CC A3               [24] 4601 	inc	dptr
      0018CD 12r00r00         [24] 4602 	lcall	__gptrget
      0018D0 FB               [12] 4603 	mov	r3,a
      0018D1 A3               [24] 4604 	inc	dptr
      0018D2 12r00r00         [24] 4605 	lcall	__gptrget
      0018D5 FC               [12] 4606 	mov	r4,a
      0018D6 C0 07            [24] 4607 	push	ar7
      0018D8 C0 06            [24] 4608 	push	ar6
      0018DA C0 05            [24] 4609 	push	ar5
      0018DC 8A 82            [24] 4610 	mov	dpl,r2
      0018DE 8B 83            [24] 4611 	mov	dph,r3
      0018E0 8C F0            [24] 4612 	mov	b,r4
      0018E2 12r00r00         [24] 4613 	lcall	_stack_pop
      0018E5 AB 82            [24] 4614 	mov	r3,dpl
      0018E7 AC 83            [24] 4615 	mov	r4,dph
      0018E9 15 81            [12] 4616 	dec	sp
      0018EB 15 81            [12] 4617 	dec	sp
      0018ED 15 81            [12] 4618 	dec	sp
      0018EF EB               [12] 4619 	mov	a,r3
      0018F0 4C               [12] 4620 	orl	a,r4
      0018F1 70 6F            [24] 4621 	jnz	00155$
                                   4622 ;	calc.c:185: (void)stack_push(ctx->ps, d0);
      0018F3 E5*00            [12] 4623 	mov	a,_bp
      0018F5 24 0B            [12] 4624 	add	a,#0x0b
      0018F7 F8               [12] 4625 	mov	r0,a
      0018F8 86 82            [24] 4626 	mov	dpl,@r0
      0018FA 08               [12] 4627 	inc	r0
      0018FB 86 83            [24] 4628 	mov	dph,@r0
      0018FD 08               [12] 4629 	inc	r0
      0018FE 86 F0            [24] 4630 	mov	b,@r0
      001900 12r00r00         [24] 4631 	lcall	__gptrget
      001903 FA               [12] 4632 	mov	r2,a
      001904 A3               [24] 4633 	inc	dptr
      001905 12r00r00         [24] 4634 	lcall	__gptrget
      001908 FB               [12] 4635 	mov	r3,a
      001909 A3               [24] 4636 	inc	dptr
      00190A 12r00r00         [24] 4637 	lcall	__gptrget
      00190D FC               [12] 4638 	mov	r4,a
      00190E E5*00            [12] 4639 	mov	a,_bp
      001910 24 15            [12] 4640 	add	a,#0x15
      001912 F8               [12] 4641 	mov	r0,a
      001913 E6               [12] 4642 	mov	a,@r0
      001914 C0 E0            [24] 4643 	push	acc
      001916 08               [12] 4644 	inc	r0
      001917 E6               [12] 4645 	mov	a,@r0
      001918 C0 E0            [24] 4646 	push	acc
      00191A 08               [12] 4647 	inc	r0
      00191B E6               [12] 4648 	mov	a,@r0
      00191C C0 E0            [24] 4649 	push	acc
      00191E 08               [12] 4650 	inc	r0
      00191F E6               [12] 4651 	mov	a,@r0
      001920 C0 E0            [24] 4652 	push	acc
      001922 8A 82            [24] 4653 	mov	dpl,r2
      001924 8B 83            [24] 4654 	mov	dph,r3
      001926 8C F0            [24] 4655 	mov	b,r4
      001928 12r00r00         [24] 4656 	lcall	_stack_push
      00192B E5 81            [12] 4657 	mov	a,sp
      00192D 24 FC            [12] 4658 	add	a,#0xfc
      00192F F5 81            [12] 4659 	mov	sp,a
                                   4660 ;	calc.c:186: printstr("\r\nstack underflow\r\n");
      001931 7Fr4E            [12] 4661 	mov	r7,#___str_10
      001933 7Es00            [12] 4662 	mov	r6,#(___str_10 >> 8)
      001935 7D 80            [12] 4663 	mov	r5,#0x80
                                   4664 ;	calc.c:20: return;
      001937                       4665 00429$:
                                   4666 ;	calc.c:18: for (; *s; s++) putchar(*s);
      001937 8F 82            [24] 4667 	mov	dpl,r7
      001939 8E 83            [24] 4668 	mov	dph,r6
      00193B 8D F0            [24] 4669 	mov	b,r5
      00193D 12r00r00         [24] 4670 	lcall	__gptrget
      001940 FC               [12] 4671 	mov	r4,a
      001941 70 03            [24] 4672 	jnz	01329$
      001943 02r2Er65         [24] 4673 	ljmp	00249$
      001946                       4674 01329$:
      001946 7B 00            [12] 4675 	mov	r3,#0x00
      001948 8C 82            [24] 4676 	mov	dpl,r4
      00194A 8B 83            [24] 4677 	mov	dph,r3
      00194C C0 07            [24] 4678 	push	ar7
      00194E C0 06            [24] 4679 	push	ar6
      001950 C0 05            [24] 4680 	push	ar5
      001952 12r00r00         [24] 4681 	lcall	_putchar
      001955 D0 05            [24] 4682 	pop	ar5
      001957 D0 06            [24] 4683 	pop	ar6
      001959 D0 07            [24] 4684 	pop	ar7
      00195B 0F               [12] 4685 	inc	r7
                                   4686 ;	calc.c:186: printstr("\r\nstack underflow\r\n");
      00195C BF 00 D8         [24] 4687 	cjne	r7,#0x00,00429$
      00195F 0E               [12] 4688 	inc	r6
      001960 80 D5            [24] 4689 	sjmp	00429$
      001962                       4690 00155$:
                                   4691 ;	calc.c:188: d1 += d0;
      001962 E5*00            [12] 4692 	mov	a,_bp
      001964 24 19            [12] 4693 	add	a,#0x19
      001966 F8               [12] 4694 	mov	r0,a
      001967 E5*00            [12] 4695 	mov	a,_bp
      001969 24 15            [12] 4696 	add	a,#0x15
      00196B F9               [12] 4697 	mov	r1,a
      00196C E7               [12] 4698 	mov	a,@r1
      00196D 26               [12] 4699 	add	a,@r0
      00196E F6               [12] 4700 	mov	@r0,a
      00196F 09               [12] 4701 	inc	r1
      001970 E7               [12] 4702 	mov	a,@r1
      001971 08               [12] 4703 	inc	r0
      001972 36               [12] 4704 	addc	a,@r0
      001973 F6               [12] 4705 	mov	@r0,a
      001974 09               [12] 4706 	inc	r1
      001975 E7               [12] 4707 	mov	a,@r1
      001976 08               [12] 4708 	inc	r0
      001977 36               [12] 4709 	addc	a,@r0
      001978 F6               [12] 4710 	mov	@r0,a
      001979 09               [12] 4711 	inc	r1
      00197A E7               [12] 4712 	mov	a,@r1
      00197B 08               [12] 4713 	inc	r0
      00197C 36               [12] 4714 	addc	a,@r0
      00197D F6               [12] 4715 	mov	@r0,a
                                   4716 ;	calc.c:189: (void)stack_push(ctx->ps, d1);
      00197E E5*00            [12] 4717 	mov	a,_bp
      001980 24 0B            [12] 4718 	add	a,#0x0b
      001982 F8               [12] 4719 	mov	r0,a
      001983 86 82            [24] 4720 	mov	dpl,@r0
      001985 08               [12] 4721 	inc	r0
      001986 86 83            [24] 4722 	mov	dph,@r0
      001988 08               [12] 4723 	inc	r0
      001989 86 F0            [24] 4724 	mov	b,@r0
      00198B 12r00r00         [24] 4725 	lcall	__gptrget
      00198E FA               [12] 4726 	mov	r2,a
      00198F A3               [24] 4727 	inc	dptr
      001990 12r00r00         [24] 4728 	lcall	__gptrget
      001993 FB               [12] 4729 	mov	r3,a
      001994 A3               [24] 4730 	inc	dptr
      001995 12r00r00         [24] 4731 	lcall	__gptrget
      001998 FC               [12] 4732 	mov	r4,a
      001999 E5*00            [12] 4733 	mov	a,_bp
      00199B 24 19            [12] 4734 	add	a,#0x19
      00199D F8               [12] 4735 	mov	r0,a
      00199E E6               [12] 4736 	mov	a,@r0
      00199F C0 E0            [24] 4737 	push	acc
      0019A1 08               [12] 4738 	inc	r0
      0019A2 E6               [12] 4739 	mov	a,@r0
      0019A3 C0 E0            [24] 4740 	push	acc
      0019A5 08               [12] 4741 	inc	r0
      0019A6 E6               [12] 4742 	mov	a,@r0
      0019A7 C0 E0            [24] 4743 	push	acc
      0019A9 08               [12] 4744 	inc	r0
      0019AA E6               [12] 4745 	mov	a,@r0
      0019AB C0 E0            [24] 4746 	push	acc
      0019AD 8A 82            [24] 4747 	mov	dpl,r2
      0019AF 8B 83            [24] 4748 	mov	dph,r3
      0019B1 8C F0            [24] 4749 	mov	b,r4
      0019B3 12r00r00         [24] 4750 	lcall	_stack_push
      0019B6 E5 81            [12] 4751 	mov	a,sp
      0019B8 24 FC            [12] 4752 	add	a,#0xfc
      0019BA F5 81            [12] 4753 	mov	sp,a
                                   4754 ;	calc.c:191: break;
      0019BC 02r2Er65         [24] 4755 	ljmp	00249$
                                   4756 ;	calc.c:192: case '-':
      0019BF                       4757 00160$:
                                   4758 ;	calc.c:193: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      0019BF E5*00            [12] 4759 	mov	a,_bp
      0019C1 24 15            [12] 4760 	add	a,#0x15
      0019C3 FF               [12] 4761 	mov	r7,a
      0019C4 7E 00            [12] 4762 	mov	r6,#0x00
      0019C6 7D 40            [12] 4763 	mov	r5,#0x40
      0019C8 E5*00            [12] 4764 	mov	a,_bp
      0019CA 24 12            [12] 4765 	add	a,#0x12
      0019CC F8               [12] 4766 	mov	r0,a
      0019CD E5*00            [12] 4767 	mov	a,_bp
      0019CF 24 0B            [12] 4768 	add	a,#0x0b
      0019D1 F9               [12] 4769 	mov	r1,a
      0019D2 74 11            [12] 4770 	mov	a,#0x11
      0019D4 26               [12] 4771 	add	a,@r0
      0019D5 F7               [12] 4772 	mov	@r1,a
      0019D6 74 40            [12] 4773 	mov	a,#0x40
      0019D8 08               [12] 4774 	inc	r0
      0019D9 36               [12] 4775 	addc	a,@r0
      0019DA 09               [12] 4776 	inc	r1
      0019DB F7               [12] 4777 	mov	@r1,a
      0019DC 08               [12] 4778 	inc	r0
      0019DD 09               [12] 4779 	inc	r1
      0019DE E6               [12] 4780 	mov	a,@r0
      0019DF F7               [12] 4781 	mov	@r1,a
      0019E0 E5*00            [12] 4782 	mov	a,_bp
      0019E2 24 0B            [12] 4783 	add	a,#0x0b
      0019E4 F8               [12] 4784 	mov	r0,a
      0019E5 86 82            [24] 4785 	mov	dpl,@r0
      0019E7 08               [12] 4786 	inc	r0
      0019E8 86 83            [24] 4787 	mov	dph,@r0
      0019EA 08               [12] 4788 	inc	r0
      0019EB 86 F0            [24] 4789 	mov	b,@r0
      0019ED 12r00r00         [24] 4790 	lcall	__gptrget
      0019F0 FA               [12] 4791 	mov	r2,a
      0019F1 A3               [24] 4792 	inc	dptr
      0019F2 12r00r00         [24] 4793 	lcall	__gptrget
      0019F5 FB               [12] 4794 	mov	r3,a
      0019F6 A3               [24] 4795 	inc	dptr
      0019F7 12r00r00         [24] 4796 	lcall	__gptrget
      0019FA FC               [12] 4797 	mov	r4,a
      0019FB C0 07            [24] 4798 	push	ar7
      0019FD C0 06            [24] 4799 	push	ar6
      0019FF C0 05            [24] 4800 	push	ar5
      001A01 8A 82            [24] 4801 	mov	dpl,r2
      001A03 8B 83            [24] 4802 	mov	dph,r3
      001A05 8C F0            [24] 4803 	mov	b,r4
      001A07 12r00r00         [24] 4804 	lcall	_stack_pop
      001A0A AB 82            [24] 4805 	mov	r3,dpl
      001A0C AC 83            [24] 4806 	mov	r4,dph
      001A0E 15 81            [12] 4807 	dec	sp
      001A10 15 81            [12] 4808 	dec	sp
      001A12 15 81            [12] 4809 	dec	sp
      001A14 EB               [12] 4810 	mov	a,r3
      001A15 4C               [12] 4811 	orl	a,r4
      001A16 70 31            [24] 4812 	jnz	00165$
      001A18 7Fr4E            [12] 4813 	mov	r7,#___str_10
      001A1A 7Es00            [12] 4814 	mov	r6,#(___str_10 >> 8)
      001A1C 7D 80            [12] 4815 	mov	r5,#0x80
                                   4816 ;	calc.c:20: return;
      001A1E                       4817 00432$:
                                   4818 ;	calc.c:18: for (; *s; s++) putchar(*s);
      001A1E 8F 82            [24] 4819 	mov	dpl,r7
      001A20 8E 83            [24] 4820 	mov	dph,r6
      001A22 8D F0            [24] 4821 	mov	b,r5
      001A24 12r00r00         [24] 4822 	lcall	__gptrget
      001A27 FC               [12] 4823 	mov	r4,a
      001A28 70 03            [24] 4824 	jnz	01332$
      001A2A 02r2Er65         [24] 4825 	ljmp	00249$
      001A2D                       4826 01332$:
      001A2D 7B 00            [12] 4827 	mov	r3,#0x00
      001A2F 8C 82            [24] 4828 	mov	dpl,r4
      001A31 8B 83            [24] 4829 	mov	dph,r3
      001A33 C0 07            [24] 4830 	push	ar7
      001A35 C0 06            [24] 4831 	push	ar6
      001A37 C0 05            [24] 4832 	push	ar5
      001A39 12r00r00         [24] 4833 	lcall	_putchar
      001A3C D0 05            [24] 4834 	pop	ar5
      001A3E D0 06            [24] 4835 	pop	ar6
      001A40 D0 07            [24] 4836 	pop	ar7
      001A42 0F               [12] 4837 	inc	r7
                                   4838 ;	calc.c:193: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      001A43 BF 00 D8         [24] 4839 	cjne	r7,#0x00,00432$
      001A46 0E               [12] 4840 	inc	r6
      001A47 80 D5            [24] 4841 	sjmp	00432$
      001A49                       4842 00165$:
                                   4843 ;	calc.c:194: else if (!stack_pop(ctx->ps, &d1)) {
      001A49 E5*00            [12] 4844 	mov	a,_bp
      001A4B 24 19            [12] 4845 	add	a,#0x19
      001A4D FF               [12] 4846 	mov	r7,a
      001A4E 7E 00            [12] 4847 	mov	r6,#0x00
      001A50 7D 40            [12] 4848 	mov	r5,#0x40
      001A52 E5*00            [12] 4849 	mov	a,_bp
      001A54 24 0B            [12] 4850 	add	a,#0x0b
      001A56 F8               [12] 4851 	mov	r0,a
      001A57 86 82            [24] 4852 	mov	dpl,@r0
      001A59 08               [12] 4853 	inc	r0
      001A5A 86 83            [24] 4854 	mov	dph,@r0
      001A5C 08               [12] 4855 	inc	r0
      001A5D 86 F0            [24] 4856 	mov	b,@r0
      001A5F 12r00r00         [24] 4857 	lcall	__gptrget
      001A62 FA               [12] 4858 	mov	r2,a
      001A63 A3               [24] 4859 	inc	dptr
      001A64 12r00r00         [24] 4860 	lcall	__gptrget
      001A67 FB               [12] 4861 	mov	r3,a
      001A68 A3               [24] 4862 	inc	dptr
      001A69 12r00r00         [24] 4863 	lcall	__gptrget
      001A6C FC               [12] 4864 	mov	r4,a
      001A6D C0 07            [24] 4865 	push	ar7
      001A6F C0 06            [24] 4866 	push	ar6
      001A71 C0 05            [24] 4867 	push	ar5
      001A73 8A 82            [24] 4868 	mov	dpl,r2
      001A75 8B 83            [24] 4869 	mov	dph,r3
      001A77 8C F0            [24] 4870 	mov	b,r4
      001A79 12r00r00         [24] 4871 	lcall	_stack_pop
      001A7C AB 82            [24] 4872 	mov	r3,dpl
      001A7E AC 83            [24] 4873 	mov	r4,dph
      001A80 15 81            [12] 4874 	dec	sp
      001A82 15 81            [12] 4875 	dec	sp
      001A84 15 81            [12] 4876 	dec	sp
      001A86 EB               [12] 4877 	mov	a,r3
      001A87 4C               [12] 4878 	orl	a,r4
      001A88 70 6F            [24] 4879 	jnz	00162$
                                   4880 ;	calc.c:195: (void)stack_push(ctx->ps, d0);
      001A8A E5*00            [12] 4881 	mov	a,_bp
      001A8C 24 0B            [12] 4882 	add	a,#0x0b
      001A8E F8               [12] 4883 	mov	r0,a
      001A8F 86 82            [24] 4884 	mov	dpl,@r0
      001A91 08               [12] 4885 	inc	r0
      001A92 86 83            [24] 4886 	mov	dph,@r0
      001A94 08               [12] 4887 	inc	r0
      001A95 86 F0            [24] 4888 	mov	b,@r0
      001A97 12r00r00         [24] 4889 	lcall	__gptrget
      001A9A FA               [12] 4890 	mov	r2,a
      001A9B A3               [24] 4891 	inc	dptr
      001A9C 12r00r00         [24] 4892 	lcall	__gptrget
      001A9F FB               [12] 4893 	mov	r3,a
      001AA0 A3               [24] 4894 	inc	dptr
      001AA1 12r00r00         [24] 4895 	lcall	__gptrget
      001AA4 FC               [12] 4896 	mov	r4,a
      001AA5 E5*00            [12] 4897 	mov	a,_bp
      001AA7 24 15            [12] 4898 	add	a,#0x15
      001AA9 F8               [12] 4899 	mov	r0,a
      001AAA E6               [12] 4900 	mov	a,@r0
      001AAB C0 E0            [24] 4901 	push	acc
      001AAD 08               [12] 4902 	inc	r0
      001AAE E6               [12] 4903 	mov	a,@r0
      001AAF C0 E0            [24] 4904 	push	acc
      001AB1 08               [12] 4905 	inc	r0
      001AB2 E6               [12] 4906 	mov	a,@r0
      001AB3 C0 E0            [24] 4907 	push	acc
      001AB5 08               [12] 4908 	inc	r0
      001AB6 E6               [12] 4909 	mov	a,@r0
      001AB7 C0 E0            [24] 4910 	push	acc
      001AB9 8A 82            [24] 4911 	mov	dpl,r2
      001ABB 8B 83            [24] 4912 	mov	dph,r3
      001ABD 8C F0            [24] 4913 	mov	b,r4
      001ABF 12r00r00         [24] 4914 	lcall	_stack_push
      001AC2 E5 81            [12] 4915 	mov	a,sp
      001AC4 24 FC            [12] 4916 	add	a,#0xfc
      001AC6 F5 81            [12] 4917 	mov	sp,a
                                   4918 ;	calc.c:196: printstr("\r\nstack underflow\r\n");
      001AC8 7Fr4E            [12] 4919 	mov	r7,#___str_10
      001ACA 7Es00            [12] 4920 	mov	r6,#(___str_10 >> 8)
      001ACC 7D 80            [12] 4921 	mov	r5,#0x80
                                   4922 ;	calc.c:20: return;
      001ACE                       4923 00435$:
                                   4924 ;	calc.c:18: for (; *s; s++) putchar(*s);
      001ACE 8F 82            [24] 4925 	mov	dpl,r7
      001AD0 8E 83            [24] 4926 	mov	dph,r6
      001AD2 8D F0            [24] 4927 	mov	b,r5
      001AD4 12r00r00         [24] 4928 	lcall	__gptrget
      001AD7 FC               [12] 4929 	mov	r4,a
      001AD8 70 03            [24] 4930 	jnz	01335$
      001ADA 02r2Er65         [24] 4931 	ljmp	00249$
      001ADD                       4932 01335$:
      001ADD 7B 00            [12] 4933 	mov	r3,#0x00
      001ADF 8C 82            [24] 4934 	mov	dpl,r4
      001AE1 8B 83            [24] 4935 	mov	dph,r3
      001AE3 C0 07            [24] 4936 	push	ar7
      001AE5 C0 06            [24] 4937 	push	ar6
      001AE7 C0 05            [24] 4938 	push	ar5
      001AE9 12r00r00         [24] 4939 	lcall	_putchar
      001AEC D0 05            [24] 4940 	pop	ar5
      001AEE D0 06            [24] 4941 	pop	ar6
      001AF0 D0 07            [24] 4942 	pop	ar7
      001AF2 0F               [12] 4943 	inc	r7
                                   4944 ;	calc.c:196: printstr("\r\nstack underflow\r\n");
      001AF3 BF 00 D8         [24] 4945 	cjne	r7,#0x00,00435$
      001AF6 0E               [12] 4946 	inc	r6
      001AF7 80 D5            [24] 4947 	sjmp	00435$
      001AF9                       4948 00162$:
                                   4949 ;	calc.c:198: d1 -= d0;
      001AF9 E5*00            [12] 4950 	mov	a,_bp
      001AFB 24 19            [12] 4951 	add	a,#0x19
      001AFD F8               [12] 4952 	mov	r0,a
      001AFE E5*00            [12] 4953 	mov	a,_bp
      001B00 24 15            [12] 4954 	add	a,#0x15
      001B02 F9               [12] 4955 	mov	r1,a
      001B03 E6               [12] 4956 	mov	a,@r0
      001B04 C3               [12] 4957 	clr	c
      001B05 97               [12] 4958 	subb	a,@r1
      001B06 F6               [12] 4959 	mov	@r0,a
      001B07 08               [12] 4960 	inc	r0
      001B08 E6               [12] 4961 	mov	a,@r0
      001B09 09               [12] 4962 	inc	r1
      001B0A 97               [12] 4963 	subb	a,@r1
      001B0B F6               [12] 4964 	mov	@r0,a
      001B0C 08               [12] 4965 	inc	r0
      001B0D E6               [12] 4966 	mov	a,@r0
      001B0E 09               [12] 4967 	inc	r1
      001B0F 97               [12] 4968 	subb	a,@r1
      001B10 F6               [12] 4969 	mov	@r0,a
      001B11 08               [12] 4970 	inc	r0
      001B12 E6               [12] 4971 	mov	a,@r0
      001B13 09               [12] 4972 	inc	r1
      001B14 97               [12] 4973 	subb	a,@r1
      001B15 F6               [12] 4974 	mov	@r0,a
                                   4975 ;	calc.c:199: (void)stack_push(ctx->ps, d1);
      001B16 E5*00            [12] 4976 	mov	a,_bp
      001B18 24 0B            [12] 4977 	add	a,#0x0b
      001B1A F8               [12] 4978 	mov	r0,a
      001B1B 86 82            [24] 4979 	mov	dpl,@r0
      001B1D 08               [12] 4980 	inc	r0
      001B1E 86 83            [24] 4981 	mov	dph,@r0
      001B20 08               [12] 4982 	inc	r0
      001B21 86 F0            [24] 4983 	mov	b,@r0
      001B23 12r00r00         [24] 4984 	lcall	__gptrget
      001B26 FA               [12] 4985 	mov	r2,a
      001B27 A3               [24] 4986 	inc	dptr
      001B28 12r00r00         [24] 4987 	lcall	__gptrget
      001B2B FB               [12] 4988 	mov	r3,a
      001B2C A3               [24] 4989 	inc	dptr
      001B2D 12r00r00         [24] 4990 	lcall	__gptrget
      001B30 FC               [12] 4991 	mov	r4,a
      001B31 E5*00            [12] 4992 	mov	a,_bp
      001B33 24 19            [12] 4993 	add	a,#0x19
      001B35 F8               [12] 4994 	mov	r0,a
      001B36 E6               [12] 4995 	mov	a,@r0
      001B37 C0 E0            [24] 4996 	push	acc
      001B39 08               [12] 4997 	inc	r0
      001B3A E6               [12] 4998 	mov	a,@r0
      001B3B C0 E0            [24] 4999 	push	acc
      001B3D 08               [12] 5000 	inc	r0
      001B3E E6               [12] 5001 	mov	a,@r0
      001B3F C0 E0            [24] 5002 	push	acc
      001B41 08               [12] 5003 	inc	r0
      001B42 E6               [12] 5004 	mov	a,@r0
      001B43 C0 E0            [24] 5005 	push	acc
      001B45 8A 82            [24] 5006 	mov	dpl,r2
      001B47 8B 83            [24] 5007 	mov	dph,r3
      001B49 8C F0            [24] 5008 	mov	b,r4
      001B4B 12r00r00         [24] 5009 	lcall	_stack_push
      001B4E E5 81            [12] 5010 	mov	a,sp
      001B50 24 FC            [12] 5011 	add	a,#0xfc
      001B52 F5 81            [12] 5012 	mov	sp,a
                                   5013 ;	calc.c:201: break;
      001B54 02r2Er65         [24] 5014 	ljmp	00249$
                                   5015 ;	calc.c:202: case '*':
      001B57                       5016 00167$:
                                   5017 ;	calc.c:203: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      001B57 E5*00            [12] 5018 	mov	a,_bp
      001B59 24 15            [12] 5019 	add	a,#0x15
      001B5B FF               [12] 5020 	mov	r7,a
      001B5C 7E 00            [12] 5021 	mov	r6,#0x00
      001B5E 7D 40            [12] 5022 	mov	r5,#0x40
      001B60 E5*00            [12] 5023 	mov	a,_bp
      001B62 24 12            [12] 5024 	add	a,#0x12
      001B64 F8               [12] 5025 	mov	r0,a
      001B65 E5*00            [12] 5026 	mov	a,_bp
      001B67 24 0B            [12] 5027 	add	a,#0x0b
      001B69 F9               [12] 5028 	mov	r1,a
      001B6A 74 11            [12] 5029 	mov	a,#0x11
      001B6C 26               [12] 5030 	add	a,@r0
      001B6D F7               [12] 5031 	mov	@r1,a
      001B6E 74 40            [12] 5032 	mov	a,#0x40
      001B70 08               [12] 5033 	inc	r0
      001B71 36               [12] 5034 	addc	a,@r0
      001B72 09               [12] 5035 	inc	r1
      001B73 F7               [12] 5036 	mov	@r1,a
      001B74 08               [12] 5037 	inc	r0
      001B75 09               [12] 5038 	inc	r1
      001B76 E6               [12] 5039 	mov	a,@r0
      001B77 F7               [12] 5040 	mov	@r1,a
      001B78 E5*00            [12] 5041 	mov	a,_bp
      001B7A 24 0B            [12] 5042 	add	a,#0x0b
      001B7C F8               [12] 5043 	mov	r0,a
      001B7D 86 82            [24] 5044 	mov	dpl,@r0
      001B7F 08               [12] 5045 	inc	r0
      001B80 86 83            [24] 5046 	mov	dph,@r0
      001B82 08               [12] 5047 	inc	r0
      001B83 86 F0            [24] 5048 	mov	b,@r0
      001B85 12r00r00         [24] 5049 	lcall	__gptrget
      001B88 FA               [12] 5050 	mov	r2,a
      001B89 A3               [24] 5051 	inc	dptr
      001B8A 12r00r00         [24] 5052 	lcall	__gptrget
      001B8D FB               [12] 5053 	mov	r3,a
      001B8E A3               [24] 5054 	inc	dptr
      001B8F 12r00r00         [24] 5055 	lcall	__gptrget
      001B92 FC               [12] 5056 	mov	r4,a
      001B93 C0 07            [24] 5057 	push	ar7
      001B95 C0 06            [24] 5058 	push	ar6
      001B97 C0 05            [24] 5059 	push	ar5
      001B99 8A 82            [24] 5060 	mov	dpl,r2
      001B9B 8B 83            [24] 5061 	mov	dph,r3
      001B9D 8C F0            [24] 5062 	mov	b,r4
      001B9F 12r00r00         [24] 5063 	lcall	_stack_pop
      001BA2 AB 82            [24] 5064 	mov	r3,dpl
      001BA4 AC 83            [24] 5065 	mov	r4,dph
      001BA6 15 81            [12] 5066 	dec	sp
      001BA8 15 81            [12] 5067 	dec	sp
      001BAA 15 81            [12] 5068 	dec	sp
      001BAC EB               [12] 5069 	mov	a,r3
      001BAD 4C               [12] 5070 	orl	a,r4
      001BAE 70 31            [24] 5071 	jnz	00172$
      001BB0 7Fr4E            [12] 5072 	mov	r7,#___str_10
      001BB2 7Es00            [12] 5073 	mov	r6,#(___str_10 >> 8)
      001BB4 7D 80            [12] 5074 	mov	r5,#0x80
                                   5075 ;	calc.c:20: return;
      001BB6                       5076 00438$:
                                   5077 ;	calc.c:18: for (; *s; s++) putchar(*s);
      001BB6 8F 82            [24] 5078 	mov	dpl,r7
      001BB8 8E 83            [24] 5079 	mov	dph,r6
      001BBA 8D F0            [24] 5080 	mov	b,r5
      001BBC 12r00r00         [24] 5081 	lcall	__gptrget
      001BBF FC               [12] 5082 	mov	r4,a
      001BC0 70 03            [24] 5083 	jnz	01338$
      001BC2 02r2Er65         [24] 5084 	ljmp	00249$
      001BC5                       5085 01338$:
      001BC5 7B 00            [12] 5086 	mov	r3,#0x00
      001BC7 8C 82            [24] 5087 	mov	dpl,r4
      001BC9 8B 83            [24] 5088 	mov	dph,r3
      001BCB C0 07            [24] 5089 	push	ar7
      001BCD C0 06            [24] 5090 	push	ar6
      001BCF C0 05            [24] 5091 	push	ar5
      001BD1 12r00r00         [24] 5092 	lcall	_putchar
      001BD4 D0 05            [24] 5093 	pop	ar5
      001BD6 D0 06            [24] 5094 	pop	ar6
      001BD8 D0 07            [24] 5095 	pop	ar7
      001BDA 0F               [12] 5096 	inc	r7
                                   5097 ;	calc.c:203: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      001BDB BF 00 D8         [24] 5098 	cjne	r7,#0x00,00438$
      001BDE 0E               [12] 5099 	inc	r6
      001BDF 80 D5            [24] 5100 	sjmp	00438$
      001BE1                       5101 00172$:
                                   5102 ;	calc.c:204: else if (!stack_pop(ctx->ps, &d1)) {
      001BE1 E5*00            [12] 5103 	mov	a,_bp
      001BE3 24 19            [12] 5104 	add	a,#0x19
      001BE5 FF               [12] 5105 	mov	r7,a
      001BE6 7E 00            [12] 5106 	mov	r6,#0x00
      001BE8 7D 40            [12] 5107 	mov	r5,#0x40
      001BEA E5*00            [12] 5108 	mov	a,_bp
      001BEC 24 0B            [12] 5109 	add	a,#0x0b
      001BEE F8               [12] 5110 	mov	r0,a
      001BEF 86 82            [24] 5111 	mov	dpl,@r0
      001BF1 08               [12] 5112 	inc	r0
      001BF2 86 83            [24] 5113 	mov	dph,@r0
      001BF4 08               [12] 5114 	inc	r0
      001BF5 86 F0            [24] 5115 	mov	b,@r0
      001BF7 12r00r00         [24] 5116 	lcall	__gptrget
      001BFA FA               [12] 5117 	mov	r2,a
      001BFB A3               [24] 5118 	inc	dptr
      001BFC 12r00r00         [24] 5119 	lcall	__gptrget
      001BFF FB               [12] 5120 	mov	r3,a
      001C00 A3               [24] 5121 	inc	dptr
      001C01 12r00r00         [24] 5122 	lcall	__gptrget
      001C04 FC               [12] 5123 	mov	r4,a
      001C05 C0 07            [24] 5124 	push	ar7
      001C07 C0 06            [24] 5125 	push	ar6
      001C09 C0 05            [24] 5126 	push	ar5
      001C0B 8A 82            [24] 5127 	mov	dpl,r2
      001C0D 8B 83            [24] 5128 	mov	dph,r3
      001C0F 8C F0            [24] 5129 	mov	b,r4
      001C11 12r00r00         [24] 5130 	lcall	_stack_pop
      001C14 AB 82            [24] 5131 	mov	r3,dpl
      001C16 AC 83            [24] 5132 	mov	r4,dph
      001C18 15 81            [12] 5133 	dec	sp
      001C1A 15 81            [12] 5134 	dec	sp
      001C1C 15 81            [12] 5135 	dec	sp
      001C1E EB               [12] 5136 	mov	a,r3
      001C1F 4C               [12] 5137 	orl	a,r4
      001C20 70 6F            [24] 5138 	jnz	00169$
                                   5139 ;	calc.c:205: (void)stack_push(ctx->ps, d0);
      001C22 E5*00            [12] 5140 	mov	a,_bp
      001C24 24 0B            [12] 5141 	add	a,#0x0b
      001C26 F8               [12] 5142 	mov	r0,a
      001C27 86 82            [24] 5143 	mov	dpl,@r0
      001C29 08               [12] 5144 	inc	r0
      001C2A 86 83            [24] 5145 	mov	dph,@r0
      001C2C 08               [12] 5146 	inc	r0
      001C2D 86 F0            [24] 5147 	mov	b,@r0
      001C2F 12r00r00         [24] 5148 	lcall	__gptrget
      001C32 FA               [12] 5149 	mov	r2,a
      001C33 A3               [24] 5150 	inc	dptr
      001C34 12r00r00         [24] 5151 	lcall	__gptrget
      001C37 FB               [12] 5152 	mov	r3,a
      001C38 A3               [24] 5153 	inc	dptr
      001C39 12r00r00         [24] 5154 	lcall	__gptrget
      001C3C FC               [12] 5155 	mov	r4,a
      001C3D E5*00            [12] 5156 	mov	a,_bp
      001C3F 24 15            [12] 5157 	add	a,#0x15
      001C41 F8               [12] 5158 	mov	r0,a
      001C42 E6               [12] 5159 	mov	a,@r0
      001C43 C0 E0            [24] 5160 	push	acc
      001C45 08               [12] 5161 	inc	r0
      001C46 E6               [12] 5162 	mov	a,@r0
      001C47 C0 E0            [24] 5163 	push	acc
      001C49 08               [12] 5164 	inc	r0
      001C4A E6               [12] 5165 	mov	a,@r0
      001C4B C0 E0            [24] 5166 	push	acc
      001C4D 08               [12] 5167 	inc	r0
      001C4E E6               [12] 5168 	mov	a,@r0
      001C4F C0 E0            [24] 5169 	push	acc
      001C51 8A 82            [24] 5170 	mov	dpl,r2
      001C53 8B 83            [24] 5171 	mov	dph,r3
      001C55 8C F0            [24] 5172 	mov	b,r4
      001C57 12r00r00         [24] 5173 	lcall	_stack_push
      001C5A E5 81            [12] 5174 	mov	a,sp
      001C5C 24 FC            [12] 5175 	add	a,#0xfc
      001C5E F5 81            [12] 5176 	mov	sp,a
                                   5177 ;	calc.c:206: printstr("\r\nstack underflow\r\n");
      001C60 7Fr4E            [12] 5178 	mov	r7,#___str_10
      001C62 7Es00            [12] 5179 	mov	r6,#(___str_10 >> 8)
      001C64 7D 80            [12] 5180 	mov	r5,#0x80
                                   5181 ;	calc.c:20: return;
      001C66                       5182 00441$:
                                   5183 ;	calc.c:18: for (; *s; s++) putchar(*s);
      001C66 8F 82            [24] 5184 	mov	dpl,r7
      001C68 8E 83            [24] 5185 	mov	dph,r6
      001C6A 8D F0            [24] 5186 	mov	b,r5
      001C6C 12r00r00         [24] 5187 	lcall	__gptrget
      001C6F FC               [12] 5188 	mov	r4,a
      001C70 70 03            [24] 5189 	jnz	01341$
      001C72 02r2Er65         [24] 5190 	ljmp	00249$
      001C75                       5191 01341$:
      001C75 7B 00            [12] 5192 	mov	r3,#0x00
      001C77 8C 82            [24] 5193 	mov	dpl,r4
      001C79 8B 83            [24] 5194 	mov	dph,r3
      001C7B C0 07            [24] 5195 	push	ar7
      001C7D C0 06            [24] 5196 	push	ar6
      001C7F C0 05            [24] 5197 	push	ar5
      001C81 12r00r00         [24] 5198 	lcall	_putchar
      001C84 D0 05            [24] 5199 	pop	ar5
      001C86 D0 06            [24] 5200 	pop	ar6
      001C88 D0 07            [24] 5201 	pop	ar7
      001C8A 0F               [12] 5202 	inc	r7
                                   5203 ;	calc.c:206: printstr("\r\nstack underflow\r\n");
      001C8B BF 00 D8         [24] 5204 	cjne	r7,#0x00,00441$
      001C8E 0E               [12] 5205 	inc	r6
      001C8F 80 D5            [24] 5206 	sjmp	00441$
      001C91                       5207 00169$:
                                   5208 ;	calc.c:208: d1 *= d0;
      001C91 E5*00            [12] 5209 	mov	a,_bp
      001C93 24 15            [12] 5210 	add	a,#0x15
      001C95 F8               [12] 5211 	mov	r0,a
      001C96 E6               [12] 5212 	mov	a,@r0
      001C97 C0 E0            [24] 5213 	push	acc
      001C99 08               [12] 5214 	inc	r0
      001C9A E6               [12] 5215 	mov	a,@r0
      001C9B C0 E0            [24] 5216 	push	acc
      001C9D 08               [12] 5217 	inc	r0
      001C9E E6               [12] 5218 	mov	a,@r0
      001C9F C0 E0            [24] 5219 	push	acc
      001CA1 08               [12] 5220 	inc	r0
      001CA2 E6               [12] 5221 	mov	a,@r0
      001CA3 C0 E0            [24] 5222 	push	acc
      001CA5 E5*00            [12] 5223 	mov	a,_bp
      001CA7 24 19            [12] 5224 	add	a,#0x19
      001CA9 F8               [12] 5225 	mov	r0,a
      001CAA 86 82            [24] 5226 	mov	dpl,@r0
      001CAC 08               [12] 5227 	inc	r0
      001CAD 86 83            [24] 5228 	mov	dph,@r0
      001CAF 08               [12] 5229 	inc	r0
      001CB0 86 F0            [24] 5230 	mov	b,@r0
      001CB2 08               [12] 5231 	inc	r0
      001CB3 E6               [12] 5232 	mov	a,@r0
      001CB4 12r00r00         [24] 5233 	lcall	__mullong
      001CB7 AF 82            [24] 5234 	mov	r7,dpl
      001CB9 AE 83            [24] 5235 	mov	r6,dph
      001CBB AD F0            [24] 5236 	mov	r5,b
      001CBD FC               [12] 5237 	mov	r4,a
      001CBE E5 81            [12] 5238 	mov	a,sp
      001CC0 24 FC            [12] 5239 	add	a,#0xfc
      001CC2 F5 81            [12] 5240 	mov	sp,a
      001CC4 E5*00            [12] 5241 	mov	a,_bp
      001CC6 24 19            [12] 5242 	add	a,#0x19
      001CC8 F8               [12] 5243 	mov	r0,a
      001CC9 A6 07            [24] 5244 	mov	@r0,ar7
      001CCB 08               [12] 5245 	inc	r0
      001CCC A6 06            [24] 5246 	mov	@r0,ar6
      001CCE 08               [12] 5247 	inc	r0
      001CCF A6 05            [24] 5248 	mov	@r0,ar5
      001CD1 08               [12] 5249 	inc	r0
      001CD2 A6 04            [24] 5250 	mov	@r0,ar4
                                   5251 ;	calc.c:209: (void)stack_push(ctx->ps, d1);
      001CD4 E5*00            [12] 5252 	mov	a,_bp
      001CD6 24 0B            [12] 5253 	add	a,#0x0b
      001CD8 F8               [12] 5254 	mov	r0,a
      001CD9 86 82            [24] 5255 	mov	dpl,@r0
      001CDB 08               [12] 5256 	inc	r0
      001CDC 86 83            [24] 5257 	mov	dph,@r0
      001CDE 08               [12] 5258 	inc	r0
      001CDF 86 F0            [24] 5259 	mov	b,@r0
      001CE1 12r00r00         [24] 5260 	lcall	__gptrget
      001CE4 FA               [12] 5261 	mov	r2,a
      001CE5 A3               [24] 5262 	inc	dptr
      001CE6 12r00r00         [24] 5263 	lcall	__gptrget
      001CE9 FB               [12] 5264 	mov	r3,a
      001CEA A3               [24] 5265 	inc	dptr
      001CEB 12r00r00         [24] 5266 	lcall	__gptrget
      001CEE FC               [12] 5267 	mov	r4,a
      001CEF E5*00            [12] 5268 	mov	a,_bp
      001CF1 24 19            [12] 5269 	add	a,#0x19
      001CF3 F8               [12] 5270 	mov	r0,a
      001CF4 E6               [12] 5271 	mov	a,@r0
      001CF5 C0 E0            [24] 5272 	push	acc
      001CF7 08               [12] 5273 	inc	r0
      001CF8 E6               [12] 5274 	mov	a,@r0
      001CF9 C0 E0            [24] 5275 	push	acc
      001CFB 08               [12] 5276 	inc	r0
      001CFC E6               [12] 5277 	mov	a,@r0
      001CFD C0 E0            [24] 5278 	push	acc
      001CFF 08               [12] 5279 	inc	r0
      001D00 E6               [12] 5280 	mov	a,@r0
      001D01 C0 E0            [24] 5281 	push	acc
      001D03 8A 82            [24] 5282 	mov	dpl,r2
      001D05 8B 83            [24] 5283 	mov	dph,r3
      001D07 8C F0            [24] 5284 	mov	b,r4
      001D09 12r00r00         [24] 5285 	lcall	_stack_push
      001D0C E5 81            [12] 5286 	mov	a,sp
      001D0E 24 FC            [12] 5287 	add	a,#0xfc
      001D10 F5 81            [12] 5288 	mov	sp,a
                                   5289 ;	calc.c:211: break;
      001D12 02r2Er65         [24] 5290 	ljmp	00249$
                                   5291 ;	calc.c:213: case '\\':
      001D15                       5292 00175$:
                                   5293 ;	calc.c:214: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      001D15 C0 05            [24] 5294 	push	ar5
      001D17 C0 06            [24] 5295 	push	ar6
      001D19 C0 07            [24] 5296 	push	ar7
      001D1B E5*00            [12] 5297 	mov	a,_bp
      001D1D 24 15            [12] 5298 	add	a,#0x15
      001D1F FC               [12] 5299 	mov	r4,a
      001D20 7B 00            [12] 5300 	mov	r3,#0x00
      001D22 7A 40            [12] 5301 	mov	r2,#0x40
      001D24 E5*00            [12] 5302 	mov	a,_bp
      001D26 24 12            [12] 5303 	add	a,#0x12
      001D28 F8               [12] 5304 	mov	r0,a
      001D29 E5*00            [12] 5305 	mov	a,_bp
      001D2B 24 0B            [12] 5306 	add	a,#0x0b
      001D2D F9               [12] 5307 	mov	r1,a
      001D2E 74 11            [12] 5308 	mov	a,#0x11
      001D30 26               [12] 5309 	add	a,@r0
      001D31 F7               [12] 5310 	mov	@r1,a
      001D32 74 40            [12] 5311 	mov	a,#0x40
      001D34 08               [12] 5312 	inc	r0
      001D35 36               [12] 5313 	addc	a,@r0
      001D36 09               [12] 5314 	inc	r1
      001D37 F7               [12] 5315 	mov	@r1,a
      001D38 08               [12] 5316 	inc	r0
      001D39 09               [12] 5317 	inc	r1
      001D3A E6               [12] 5318 	mov	a,@r0
      001D3B F7               [12] 5319 	mov	@r1,a
      001D3C E5*00            [12] 5320 	mov	a,_bp
      001D3E 24 0B            [12] 5321 	add	a,#0x0b
      001D40 F8               [12] 5322 	mov	r0,a
      001D41 86 82            [24] 5323 	mov	dpl,@r0
      001D43 08               [12] 5324 	inc	r0
      001D44 86 83            [24] 5325 	mov	dph,@r0
      001D46 08               [12] 5326 	inc	r0
      001D47 86 F0            [24] 5327 	mov	b,@r0
      001D49 12r00r00         [24] 5328 	lcall	__gptrget
      001D4C FD               [12] 5329 	mov	r5,a
      001D4D A3               [24] 5330 	inc	dptr
      001D4E 12r00r00         [24] 5331 	lcall	__gptrget
      001D51 FE               [12] 5332 	mov	r6,a
      001D52 A3               [24] 5333 	inc	dptr
      001D53 12r00r00         [24] 5334 	lcall	__gptrget
      001D56 FF               [12] 5335 	mov	r7,a
      001D57 C0 05            [24] 5336 	push	ar5
      001D59 C0 04            [24] 5337 	push	ar4
      001D5B C0 03            [24] 5338 	push	ar3
      001D5D C0 02            [24] 5339 	push	ar2
      001D5F 8D 82            [24] 5340 	mov	dpl,r5
      001D61 8E 83            [24] 5341 	mov	dph,r6
      001D63 8F F0            [24] 5342 	mov	b,r7
      001D65 12r00r00         [24] 5343 	lcall	_stack_pop
      001D68 AE 82            [24] 5344 	mov	r6,dpl
      001D6A AF 83            [24] 5345 	mov	r7,dph
      001D6C 15 81            [12] 5346 	dec	sp
      001D6E 15 81            [12] 5347 	dec	sp
      001D70 15 81            [12] 5348 	dec	sp
      001D72 D0 05            [24] 5349 	pop	ar5
      001D74 EE               [12] 5350 	mov	a,r6
      001D75 4F               [12] 5351 	orl	a,r7
      001D76 D0 07            [24] 5352 	pop	ar7
      001D78 D0 06            [24] 5353 	pop	ar6
      001D7A D0 05            [24] 5354 	pop	ar5
      001D7C 70 31            [24] 5355 	jnz	00186$
      001D7E 7Fr4E            [12] 5356 	mov	r7,#___str_10
      001D80 7Es00            [12] 5357 	mov	r6,#(___str_10 >> 8)
      001D82 7D 80            [12] 5358 	mov	r5,#0x80
                                   5359 ;	calc.c:20: return;
      001D84                       5360 00444$:
                                   5361 ;	calc.c:18: for (; *s; s++) putchar(*s);
      001D84 8F 82            [24] 5362 	mov	dpl,r7
      001D86 8E 83            [24] 5363 	mov	dph,r6
      001D88 8D F0            [24] 5364 	mov	b,r5
      001D8A 12r00r00         [24] 5365 	lcall	__gptrget
      001D8D FC               [12] 5366 	mov	r4,a
      001D8E 70 03            [24] 5367 	jnz	01344$
      001D90 02r2Er65         [24] 5368 	ljmp	00249$
      001D93                       5369 01344$:
      001D93 7B 00            [12] 5370 	mov	r3,#0x00
      001D95 8C 82            [24] 5371 	mov	dpl,r4
      001D97 8B 83            [24] 5372 	mov	dph,r3
      001D99 C0 07            [24] 5373 	push	ar7
      001D9B C0 06            [24] 5374 	push	ar6
      001D9D C0 05            [24] 5375 	push	ar5
      001D9F 12r00r00         [24] 5376 	lcall	_putchar
      001DA2 D0 05            [24] 5377 	pop	ar5
      001DA4 D0 06            [24] 5378 	pop	ar6
      001DA6 D0 07            [24] 5379 	pop	ar7
      001DA8 0F               [12] 5380 	inc	r7
                                   5381 ;	calc.c:214: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      001DA9 BF 00 D8         [24] 5382 	cjne	r7,#0x00,00444$
      001DAC 0E               [12] 5383 	inc	r6
      001DAD 80 D5            [24] 5384 	sjmp	00444$
      001DAF                       5385 00186$:
                                   5386 ;	calc.c:215: else if (!stack_pop(ctx->ps, &d1)) {
      001DAF C0 05            [24] 5387 	push	ar5
      001DB1 C0 06            [24] 5388 	push	ar6
      001DB3 C0 07            [24] 5389 	push	ar7
      001DB5 E5*00            [12] 5390 	mov	a,_bp
      001DB7 24 19            [12] 5391 	add	a,#0x19
      001DB9 FC               [12] 5392 	mov	r4,a
      001DBA 7B 00            [12] 5393 	mov	r3,#0x00
      001DBC 7A 40            [12] 5394 	mov	r2,#0x40
      001DBE E5*00            [12] 5395 	mov	a,_bp
      001DC0 24 0B            [12] 5396 	add	a,#0x0b
      001DC2 F8               [12] 5397 	mov	r0,a
      001DC3 86 82            [24] 5398 	mov	dpl,@r0
      001DC5 08               [12] 5399 	inc	r0
      001DC6 86 83            [24] 5400 	mov	dph,@r0
      001DC8 08               [12] 5401 	inc	r0
      001DC9 86 F0            [24] 5402 	mov	b,@r0
      001DCB 12r00r00         [24] 5403 	lcall	__gptrget
      001DCE FD               [12] 5404 	mov	r5,a
      001DCF A3               [24] 5405 	inc	dptr
      001DD0 12r00r00         [24] 5406 	lcall	__gptrget
      001DD3 FE               [12] 5407 	mov	r6,a
      001DD4 A3               [24] 5408 	inc	dptr
      001DD5 12r00r00         [24] 5409 	lcall	__gptrget
      001DD8 FF               [12] 5410 	mov	r7,a
      001DD9 C0 05            [24] 5411 	push	ar5
      001DDB C0 04            [24] 5412 	push	ar4
      001DDD C0 03            [24] 5413 	push	ar3
      001DDF C0 02            [24] 5414 	push	ar2
      001DE1 8D 82            [24] 5415 	mov	dpl,r5
      001DE3 8E 83            [24] 5416 	mov	dph,r6
      001DE5 8F F0            [24] 5417 	mov	b,r7
      001DE7 12r00r00         [24] 5418 	lcall	_stack_pop
      001DEA AE 82            [24] 5419 	mov	r6,dpl
      001DEC AF 83            [24] 5420 	mov	r7,dph
      001DEE 15 81            [12] 5421 	dec	sp
      001DF0 15 81            [12] 5422 	dec	sp
      001DF2 15 81            [12] 5423 	dec	sp
      001DF4 D0 05            [24] 5424 	pop	ar5
      001DF6 EE               [12] 5425 	mov	a,r6
      001DF7 4F               [12] 5426 	orl	a,r7
      001DF8 D0 07            [24] 5427 	pop	ar7
      001DFA D0 06            [24] 5428 	pop	ar6
      001DFC D0 05            [24] 5429 	pop	ar5
      001DFE 70 6F            [24] 5430 	jnz	00183$
                                   5431 ;	calc.c:216: (void)stack_push(ctx->ps, d0);
      001E00 E5*00            [12] 5432 	mov	a,_bp
      001E02 24 0B            [12] 5433 	add	a,#0x0b
      001E04 F8               [12] 5434 	mov	r0,a
      001E05 86 82            [24] 5435 	mov	dpl,@r0
      001E07 08               [12] 5436 	inc	r0
      001E08 86 83            [24] 5437 	mov	dph,@r0
      001E0A 08               [12] 5438 	inc	r0
      001E0B 86 F0            [24] 5439 	mov	b,@r0
      001E0D 12r00r00         [24] 5440 	lcall	__gptrget
      001E10 FA               [12] 5441 	mov	r2,a
      001E11 A3               [24] 5442 	inc	dptr
      001E12 12r00r00         [24] 5443 	lcall	__gptrget
      001E15 FB               [12] 5444 	mov	r3,a
      001E16 A3               [24] 5445 	inc	dptr
      001E17 12r00r00         [24] 5446 	lcall	__gptrget
      001E1A FC               [12] 5447 	mov	r4,a
      001E1B E5*00            [12] 5448 	mov	a,_bp
      001E1D 24 15            [12] 5449 	add	a,#0x15
      001E1F F8               [12] 5450 	mov	r0,a
      001E20 E6               [12] 5451 	mov	a,@r0
      001E21 C0 E0            [24] 5452 	push	acc
      001E23 08               [12] 5453 	inc	r0
      001E24 E6               [12] 5454 	mov	a,@r0
      001E25 C0 E0            [24] 5455 	push	acc
      001E27 08               [12] 5456 	inc	r0
      001E28 E6               [12] 5457 	mov	a,@r0
      001E29 C0 E0            [24] 5458 	push	acc
      001E2B 08               [12] 5459 	inc	r0
      001E2C E6               [12] 5460 	mov	a,@r0
      001E2D C0 E0            [24] 5461 	push	acc
      001E2F 8A 82            [24] 5462 	mov	dpl,r2
      001E31 8B 83            [24] 5463 	mov	dph,r3
      001E33 8C F0            [24] 5464 	mov	b,r4
      001E35 12r00r00         [24] 5465 	lcall	_stack_push
      001E38 E5 81            [12] 5466 	mov	a,sp
      001E3A 24 FC            [12] 5467 	add	a,#0xfc
      001E3C F5 81            [12] 5468 	mov	sp,a
                                   5469 ;	calc.c:217: printstr("\r\nstack underflow\r\n");
      001E3E 7Fr4E            [12] 5470 	mov	r7,#___str_10
      001E40 7Es00            [12] 5471 	mov	r6,#(___str_10 >> 8)
      001E42 7D 80            [12] 5472 	mov	r5,#0x80
                                   5473 ;	calc.c:20: return;
      001E44                       5474 00447$:
                                   5475 ;	calc.c:18: for (; *s; s++) putchar(*s);
      001E44 8F 82            [24] 5476 	mov	dpl,r7
      001E46 8E 83            [24] 5477 	mov	dph,r6
      001E48 8D F0            [24] 5478 	mov	b,r5
      001E4A 12r00r00         [24] 5479 	lcall	__gptrget
      001E4D FC               [12] 5480 	mov	r4,a
      001E4E 70 03            [24] 5481 	jnz	01347$
      001E50 02r2Er65         [24] 5482 	ljmp	00249$
      001E53                       5483 01347$:
      001E53 7B 00            [12] 5484 	mov	r3,#0x00
      001E55 8C 82            [24] 5485 	mov	dpl,r4
      001E57 8B 83            [24] 5486 	mov	dph,r3
      001E59 C0 07            [24] 5487 	push	ar7
      001E5B C0 06            [24] 5488 	push	ar6
      001E5D C0 05            [24] 5489 	push	ar5
      001E5F 12r00r00         [24] 5490 	lcall	_putchar
      001E62 D0 05            [24] 5491 	pop	ar5
      001E64 D0 06            [24] 5492 	pop	ar6
      001E66 D0 07            [24] 5493 	pop	ar7
      001E68 0F               [12] 5494 	inc	r7
                                   5495 ;	calc.c:217: printstr("\r\nstack underflow\r\n");
      001E69 BF 00 D8         [24] 5496 	cjne	r7,#0x00,00447$
      001E6C 0E               [12] 5497 	inc	r6
      001E6D 80 D5            [24] 5498 	sjmp	00447$
      001E6F                       5499 00183$:
                                   5500 ;	calc.c:218: } else if (!d0) {
      001E6F E5*00            [12] 5501 	mov	a,_bp
      001E71 24 15            [12] 5502 	add	a,#0x15
      001E73 F8               [12] 5503 	mov	r0,a
      001E74 E6               [12] 5504 	mov	a,@r0
      001E75 08               [12] 5505 	inc	r0
      001E76 46               [12] 5506 	orl	a,@r0
      001E77 08               [12] 5507 	inc	r0
      001E78 46               [12] 5508 	orl	a,@r0
      001E79 08               [12] 5509 	inc	r0
      001E7A 46               [12] 5510 	orl	a,@r0
      001E7B 60 03            [24] 5511 	jz	01349$
      001E7D 02r1Fr2D         [24] 5512 	ljmp	00180$
      001E80                       5513 01349$:
                                   5514 ;	calc.c:219: (void)stack_push(ctx->ps, d1);
      001E80 E5*00            [12] 5515 	mov	a,_bp
      001E82 24 0B            [12] 5516 	add	a,#0x0b
      001E84 F8               [12] 5517 	mov	r0,a
      001E85 86 82            [24] 5518 	mov	dpl,@r0
      001E87 08               [12] 5519 	inc	r0
      001E88 86 83            [24] 5520 	mov	dph,@r0
      001E8A 08               [12] 5521 	inc	r0
      001E8B 86 F0            [24] 5522 	mov	b,@r0
      001E8D 12r00r00         [24] 5523 	lcall	__gptrget
      001E90 FA               [12] 5524 	mov	r2,a
      001E91 A3               [24] 5525 	inc	dptr
      001E92 12r00r00         [24] 5526 	lcall	__gptrget
      001E95 FB               [12] 5527 	mov	r3,a
      001E96 A3               [24] 5528 	inc	dptr
      001E97 12r00r00         [24] 5529 	lcall	__gptrget
      001E9A FC               [12] 5530 	mov	r4,a
      001E9B E5*00            [12] 5531 	mov	a,_bp
      001E9D 24 19            [12] 5532 	add	a,#0x19
      001E9F F8               [12] 5533 	mov	r0,a
      001EA0 E6               [12] 5534 	mov	a,@r0
      001EA1 C0 E0            [24] 5535 	push	acc
      001EA3 08               [12] 5536 	inc	r0
      001EA4 E6               [12] 5537 	mov	a,@r0
      001EA5 C0 E0            [24] 5538 	push	acc
      001EA7 08               [12] 5539 	inc	r0
      001EA8 E6               [12] 5540 	mov	a,@r0
      001EA9 C0 E0            [24] 5541 	push	acc
      001EAB 08               [12] 5542 	inc	r0
      001EAC E6               [12] 5543 	mov	a,@r0
      001EAD C0 E0            [24] 5544 	push	acc
      001EAF 8A 82            [24] 5545 	mov	dpl,r2
      001EB1 8B 83            [24] 5546 	mov	dph,r3
      001EB3 8C F0            [24] 5547 	mov	b,r4
      001EB5 12r00r00         [24] 5548 	lcall	_stack_push
      001EB8 E5 81            [12] 5549 	mov	a,sp
      001EBA 24 FC            [12] 5550 	add	a,#0xfc
      001EBC F5 81            [12] 5551 	mov	sp,a
                                   5552 ;	calc.c:220: (void)stack_push(ctx->ps, d0);			
      001EBE E5*00            [12] 5553 	mov	a,_bp
      001EC0 24 0B            [12] 5554 	add	a,#0x0b
      001EC2 F8               [12] 5555 	mov	r0,a
      001EC3 86 82            [24] 5556 	mov	dpl,@r0
      001EC5 08               [12] 5557 	inc	r0
      001EC6 86 83            [24] 5558 	mov	dph,@r0
      001EC8 08               [12] 5559 	inc	r0
      001EC9 86 F0            [24] 5560 	mov	b,@r0
      001ECB 12r00r00         [24] 5561 	lcall	__gptrget
      001ECE FA               [12] 5562 	mov	r2,a
      001ECF A3               [24] 5563 	inc	dptr
      001ED0 12r00r00         [24] 5564 	lcall	__gptrget
      001ED3 FB               [12] 5565 	mov	r3,a
      001ED4 A3               [24] 5566 	inc	dptr
      001ED5 12r00r00         [24] 5567 	lcall	__gptrget
      001ED8 FC               [12] 5568 	mov	r4,a
      001ED9 E5*00            [12] 5569 	mov	a,_bp
      001EDB 24 15            [12] 5570 	add	a,#0x15
      001EDD F8               [12] 5571 	mov	r0,a
      001EDE E6               [12] 5572 	mov	a,@r0
      001EDF C0 E0            [24] 5573 	push	acc
      001EE1 08               [12] 5574 	inc	r0
      001EE2 E6               [12] 5575 	mov	a,@r0
      001EE3 C0 E0            [24] 5576 	push	acc
      001EE5 08               [12] 5577 	inc	r0
      001EE6 E6               [12] 5578 	mov	a,@r0
      001EE7 C0 E0            [24] 5579 	push	acc
      001EE9 08               [12] 5580 	inc	r0
      001EEA E6               [12] 5581 	mov	a,@r0
      001EEB C0 E0            [24] 5582 	push	acc
      001EED 8A 82            [24] 5583 	mov	dpl,r2
      001EEF 8B 83            [24] 5584 	mov	dph,r3
      001EF1 8C F0            [24] 5585 	mov	b,r4
      001EF3 12r00r00         [24] 5586 	lcall	_stack_push
      001EF6 E5 81            [12] 5587 	mov	a,sp
      001EF8 24 FC            [12] 5588 	add	a,#0xfc
      001EFA F5 81            [12] 5589 	mov	sp,a
                                   5590 ;	calc.c:221: printstr("\r\ndivision by zero\r\n");
      001EFC 7FrB0            [12] 5591 	mov	r7,#___str_14
      001EFE 7Es00            [12] 5592 	mov	r6,#(___str_14 >> 8)
      001F00 7D 80            [12] 5593 	mov	r5,#0x80
                                   5594 ;	calc.c:20: return;
      001F02                       5595 00450$:
                                   5596 ;	calc.c:18: for (; *s; s++) putchar(*s);
      001F02 8F 82            [24] 5597 	mov	dpl,r7
      001F04 8E 83            [24] 5598 	mov	dph,r6
      001F06 8D F0            [24] 5599 	mov	b,r5
      001F08 12r00r00         [24] 5600 	lcall	__gptrget
      001F0B FC               [12] 5601 	mov	r4,a
      001F0C 70 03            [24] 5602 	jnz	01350$
      001F0E 02r2Er65         [24] 5603 	ljmp	00249$
      001F11                       5604 01350$:
      001F11 7B 00            [12] 5605 	mov	r3,#0x00
      001F13 8C 82            [24] 5606 	mov	dpl,r4
      001F15 8B 83            [24] 5607 	mov	dph,r3
      001F17 C0 07            [24] 5608 	push	ar7
      001F19 C0 06            [24] 5609 	push	ar6
      001F1B C0 05            [24] 5610 	push	ar5
      001F1D 12r00r00         [24] 5611 	lcall	_putchar
      001F20 D0 05            [24] 5612 	pop	ar5
      001F22 D0 06            [24] 5613 	pop	ar6
      001F24 D0 07            [24] 5614 	pop	ar7
      001F26 0F               [12] 5615 	inc	r7
                                   5616 ;	calc.c:221: printstr("\r\ndivision by zero\r\n");
      001F27 BF 00 D8         [24] 5617 	cjne	r7,#0x00,00450$
      001F2A 0E               [12] 5618 	inc	r6
      001F2B 80 D5            [24] 5619 	sjmp	00450$
      001F2D                       5620 00180$:
                                   5621 ;	calc.c:223: if (ctx->digit[0] == '/') d1 /= d0;
      001F2D 8D 82            [24] 5622 	mov	dpl,r5
      001F2F 8E 83            [24] 5623 	mov	dph,r6
      001F31 8F F0            [24] 5624 	mov	b,r7
      001F33 12r00r00         [24] 5625 	lcall	__gptrget
      001F36 FC               [12] 5626 	mov	r4,a
      001F37 BC 2F 45         [24] 5627 	cjne	r4,#0x2f,00177$
      001F3A E5*00            [12] 5628 	mov	a,_bp
      001F3C 24 15            [12] 5629 	add	a,#0x15
      001F3E F8               [12] 5630 	mov	r0,a
      001F3F E6               [12] 5631 	mov	a,@r0
      001F40 C0 E0            [24] 5632 	push	acc
      001F42 08               [12] 5633 	inc	r0
      001F43 E6               [12] 5634 	mov	a,@r0
      001F44 C0 E0            [24] 5635 	push	acc
      001F46 08               [12] 5636 	inc	r0
      001F47 E6               [12] 5637 	mov	a,@r0
      001F48 C0 E0            [24] 5638 	push	acc
      001F4A 08               [12] 5639 	inc	r0
      001F4B E6               [12] 5640 	mov	a,@r0
      001F4C C0 E0            [24] 5641 	push	acc
      001F4E E5*00            [12] 5642 	mov	a,_bp
      001F50 24 19            [12] 5643 	add	a,#0x19
      001F52 F8               [12] 5644 	mov	r0,a
      001F53 86 82            [24] 5645 	mov	dpl,@r0
      001F55 08               [12] 5646 	inc	r0
      001F56 86 83            [24] 5647 	mov	dph,@r0
      001F58 08               [12] 5648 	inc	r0
      001F59 86 F0            [24] 5649 	mov	b,@r0
      001F5B 08               [12] 5650 	inc	r0
      001F5C E6               [12] 5651 	mov	a,@r0
      001F5D 12r00r00         [24] 5652 	lcall	__divslong
      001F60 AF 82            [24] 5653 	mov	r7,dpl
      001F62 AE 83            [24] 5654 	mov	r6,dph
      001F64 AD F0            [24] 5655 	mov	r5,b
      001F66 FC               [12] 5656 	mov	r4,a
      001F67 E5 81            [12] 5657 	mov	a,sp
      001F69 24 FC            [12] 5658 	add	a,#0xfc
      001F6B F5 81            [12] 5659 	mov	sp,a
      001F6D E5*00            [12] 5660 	mov	a,_bp
      001F6F 24 19            [12] 5661 	add	a,#0x19
      001F71 F8               [12] 5662 	mov	r0,a
      001F72 A6 07            [24] 5663 	mov	@r0,ar7
      001F74 08               [12] 5664 	inc	r0
      001F75 A6 06            [24] 5665 	mov	@r0,ar6
      001F77 08               [12] 5666 	inc	r0
      001F78 A6 05            [24] 5667 	mov	@r0,ar5
      001F7A 08               [12] 5668 	inc	r0
      001F7B A6 04            [24] 5669 	mov	@r0,ar4
      001F7D 80 63            [24] 5670 	sjmp	00178$
      001F7F                       5671 00177$:
                                   5672 ;	calc.c:224: else d1 = (unsigned long)d1 / (unsigned long)d0;
      001F7F E5*00            [12] 5673 	mov	a,_bp
      001F81 24 19            [12] 5674 	add	a,#0x19
      001F83 F8               [12] 5675 	mov	r0,a
      001F84 86 07            [24] 5676 	mov	ar7,@r0
      001F86 08               [12] 5677 	inc	r0
      001F87 86 06            [24] 5678 	mov	ar6,@r0
      001F89 08               [12] 5679 	inc	r0
      001F8A 86 05            [24] 5680 	mov	ar5,@r0
      001F8C 08               [12] 5681 	inc	r0
      001F8D 86 04            [24] 5682 	mov	ar4,@r0
      001F8F E5*00            [12] 5683 	mov	a,_bp
      001F91 24 15            [12] 5684 	add	a,#0x15
      001F93 F8               [12] 5685 	mov	r0,a
      001F94 E5*00            [12] 5686 	mov	a,_bp
      001F96 24 0E            [12] 5687 	add	a,#0x0e
      001F98 F9               [12] 5688 	mov	r1,a
      001F99 E6               [12] 5689 	mov	a,@r0
      001F9A F7               [12] 5690 	mov	@r1,a
      001F9B 08               [12] 5691 	inc	r0
      001F9C 09               [12] 5692 	inc	r1
      001F9D E6               [12] 5693 	mov	a,@r0
      001F9E F7               [12] 5694 	mov	@r1,a
      001F9F 08               [12] 5695 	inc	r0
      001FA0 09               [12] 5696 	inc	r1
      001FA1 E6               [12] 5697 	mov	a,@r0
      001FA2 F7               [12] 5698 	mov	@r1,a
      001FA3 08               [12] 5699 	inc	r0
      001FA4 09               [12] 5700 	inc	r1
      001FA5 E6               [12] 5701 	mov	a,@r0
      001FA6 F7               [12] 5702 	mov	@r1,a
      001FA7 E5*00            [12] 5703 	mov	a,_bp
      001FA9 24 0E            [12] 5704 	add	a,#0x0e
      001FAB F8               [12] 5705 	mov	r0,a
      001FAC E6               [12] 5706 	mov	a,@r0
      001FAD C0 E0            [24] 5707 	push	acc
      001FAF 08               [12] 5708 	inc	r0
      001FB0 E6               [12] 5709 	mov	a,@r0
      001FB1 C0 E0            [24] 5710 	push	acc
      001FB3 08               [12] 5711 	inc	r0
      001FB4 E6               [12] 5712 	mov	a,@r0
      001FB5 C0 E0            [24] 5713 	push	acc
      001FB7 08               [12] 5714 	inc	r0
      001FB8 E6               [12] 5715 	mov	a,@r0
      001FB9 C0 E0            [24] 5716 	push	acc
      001FBB 8F 82            [24] 5717 	mov	dpl,r7
      001FBD 8E 83            [24] 5718 	mov	dph,r6
      001FBF 8D F0            [24] 5719 	mov	b,r5
      001FC1 EC               [12] 5720 	mov	a,r4
      001FC2 12r00r00         [24] 5721 	lcall	__divulong
      001FC5 AF 82            [24] 5722 	mov	r7,dpl
      001FC7 AE 83            [24] 5723 	mov	r6,dph
      001FC9 AD F0            [24] 5724 	mov	r5,b
      001FCB FC               [12] 5725 	mov	r4,a
      001FCC E5 81            [12] 5726 	mov	a,sp
      001FCE 24 FC            [12] 5727 	add	a,#0xfc
      001FD0 F5 81            [12] 5728 	mov	sp,a
      001FD2 E5*00            [12] 5729 	mov	a,_bp
      001FD4 24 19            [12] 5730 	add	a,#0x19
      001FD6 F8               [12] 5731 	mov	r0,a
      001FD7 A6 07            [24] 5732 	mov	@r0,ar7
      001FD9 08               [12] 5733 	inc	r0
      001FDA A6 06            [24] 5734 	mov	@r0,ar6
      001FDC 08               [12] 5735 	inc	r0
      001FDD A6 05            [24] 5736 	mov	@r0,ar5
      001FDF 08               [12] 5737 	inc	r0
      001FE0 A6 04            [24] 5738 	mov	@r0,ar4
      001FE2                       5739 00178$:
                                   5740 ;	calc.c:225: (void)stack_push(ctx->ps, d1);
      001FE2 E5*00            [12] 5741 	mov	a,_bp
      001FE4 24 0B            [12] 5742 	add	a,#0x0b
      001FE6 F8               [12] 5743 	mov	r0,a
      001FE7 86 82            [24] 5744 	mov	dpl,@r0
      001FE9 08               [12] 5745 	inc	r0
      001FEA 86 83            [24] 5746 	mov	dph,@r0
      001FEC 08               [12] 5747 	inc	r0
      001FED 86 F0            [24] 5748 	mov	b,@r0
      001FEF 12r00r00         [24] 5749 	lcall	__gptrget
      001FF2 FA               [12] 5750 	mov	r2,a
      001FF3 A3               [24] 5751 	inc	dptr
      001FF4 12r00r00         [24] 5752 	lcall	__gptrget
      001FF7 FB               [12] 5753 	mov	r3,a
      001FF8 A3               [24] 5754 	inc	dptr
      001FF9 12r00r00         [24] 5755 	lcall	__gptrget
      001FFC FC               [12] 5756 	mov	r4,a
      001FFD E5*00            [12] 5757 	mov	a,_bp
      001FFF 24 19            [12] 5758 	add	a,#0x19
      002001 F8               [12] 5759 	mov	r0,a
      002002 E6               [12] 5760 	mov	a,@r0
      002003 C0 E0            [24] 5761 	push	acc
      002005 08               [12] 5762 	inc	r0
      002006 E6               [12] 5763 	mov	a,@r0
      002007 C0 E0            [24] 5764 	push	acc
      002009 08               [12] 5765 	inc	r0
      00200A E6               [12] 5766 	mov	a,@r0
      00200B C0 E0            [24] 5767 	push	acc
      00200D 08               [12] 5768 	inc	r0
      00200E E6               [12] 5769 	mov	a,@r0
      00200F C0 E0            [24] 5770 	push	acc
      002011 8A 82            [24] 5771 	mov	dpl,r2
      002013 8B 83            [24] 5772 	mov	dph,r3
      002015 8C F0            [24] 5773 	mov	b,r4
      002017 12r00r00         [24] 5774 	lcall	_stack_push
      00201A E5 81            [12] 5775 	mov	a,sp
      00201C 24 FC            [12] 5776 	add	a,#0xfc
      00201E F5 81            [12] 5777 	mov	sp,a
                                   5778 ;	calc.c:227: break;
      002020 02r2Er65         [24] 5779 	ljmp	00249$
                                   5780 ;	calc.c:229: case '#':
      002023                       5781 00189$:
                                   5782 ;	calc.c:230: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      002023 C0 05            [24] 5783 	push	ar5
      002025 C0 06            [24] 5784 	push	ar6
      002027 C0 07            [24] 5785 	push	ar7
      002029 E5*00            [12] 5786 	mov	a,_bp
      00202B 24 15            [12] 5787 	add	a,#0x15
      00202D FC               [12] 5788 	mov	r4,a
      00202E 7B 00            [12] 5789 	mov	r3,#0x00
      002030 7A 40            [12] 5790 	mov	r2,#0x40
      002032 E5*00            [12] 5791 	mov	a,_bp
      002034 24 12            [12] 5792 	add	a,#0x12
      002036 F8               [12] 5793 	mov	r0,a
      002037 E5*00            [12] 5794 	mov	a,_bp
      002039 24 0E            [12] 5795 	add	a,#0x0e
      00203B F9               [12] 5796 	mov	r1,a
      00203C 74 11            [12] 5797 	mov	a,#0x11
      00203E 26               [12] 5798 	add	a,@r0
      00203F F7               [12] 5799 	mov	@r1,a
      002040 74 40            [12] 5800 	mov	a,#0x40
      002042 08               [12] 5801 	inc	r0
      002043 36               [12] 5802 	addc	a,@r0
      002044 09               [12] 5803 	inc	r1
      002045 F7               [12] 5804 	mov	@r1,a
      002046 08               [12] 5805 	inc	r0
      002047 09               [12] 5806 	inc	r1
      002048 E6               [12] 5807 	mov	a,@r0
      002049 F7               [12] 5808 	mov	@r1,a
      00204A E5*00            [12] 5809 	mov	a,_bp
      00204C 24 0E            [12] 5810 	add	a,#0x0e
      00204E F8               [12] 5811 	mov	r0,a
      00204F 86 82            [24] 5812 	mov	dpl,@r0
      002051 08               [12] 5813 	inc	r0
      002052 86 83            [24] 5814 	mov	dph,@r0
      002054 08               [12] 5815 	inc	r0
      002055 86 F0            [24] 5816 	mov	b,@r0
      002057 12r00r00         [24] 5817 	lcall	__gptrget
      00205A FD               [12] 5818 	mov	r5,a
      00205B A3               [24] 5819 	inc	dptr
      00205C 12r00r00         [24] 5820 	lcall	__gptrget
      00205F FE               [12] 5821 	mov	r6,a
      002060 A3               [24] 5822 	inc	dptr
      002061 12r00r00         [24] 5823 	lcall	__gptrget
      002064 FF               [12] 5824 	mov	r7,a
      002065 C0 05            [24] 5825 	push	ar5
      002067 C0 04            [24] 5826 	push	ar4
      002069 C0 03            [24] 5827 	push	ar3
      00206B C0 02            [24] 5828 	push	ar2
      00206D 8D 82            [24] 5829 	mov	dpl,r5
      00206F 8E 83            [24] 5830 	mov	dph,r6
      002071 8F F0            [24] 5831 	mov	b,r7
      002073 12r00r00         [24] 5832 	lcall	_stack_pop
      002076 AE 82            [24] 5833 	mov	r6,dpl
      002078 AF 83            [24] 5834 	mov	r7,dph
      00207A 15 81            [12] 5835 	dec	sp
      00207C 15 81            [12] 5836 	dec	sp
      00207E 15 81            [12] 5837 	dec	sp
      002080 D0 05            [24] 5838 	pop	ar5
      002082 EE               [12] 5839 	mov	a,r6
      002083 4F               [12] 5840 	orl	a,r7
      002084 D0 07            [24] 5841 	pop	ar7
      002086 D0 06            [24] 5842 	pop	ar6
      002088 D0 05            [24] 5843 	pop	ar5
      00208A 70 31            [24] 5844 	jnz	00200$
      00208C 7Fr4E            [12] 5845 	mov	r7,#___str_10
      00208E 7Es00            [12] 5846 	mov	r6,#(___str_10 >> 8)
      002090 7D 80            [12] 5847 	mov	r5,#0x80
                                   5848 ;	calc.c:20: return;
      002092                       5849 00453$:
                                   5850 ;	calc.c:18: for (; *s; s++) putchar(*s);
      002092 8F 82            [24] 5851 	mov	dpl,r7
      002094 8E 83            [24] 5852 	mov	dph,r6
      002096 8D F0            [24] 5853 	mov	b,r5
      002098 12r00r00         [24] 5854 	lcall	__gptrget
      00209B FC               [12] 5855 	mov	r4,a
      00209C 70 03            [24] 5856 	jnz	01355$
      00209E 02r2Er65         [24] 5857 	ljmp	00249$
      0020A1                       5858 01355$:
      0020A1 7B 00            [12] 5859 	mov	r3,#0x00
      0020A3 8C 82            [24] 5860 	mov	dpl,r4
      0020A5 8B 83            [24] 5861 	mov	dph,r3
      0020A7 C0 07            [24] 5862 	push	ar7
      0020A9 C0 06            [24] 5863 	push	ar6
      0020AB C0 05            [24] 5864 	push	ar5
      0020AD 12r00r00         [24] 5865 	lcall	_putchar
      0020B0 D0 05            [24] 5866 	pop	ar5
      0020B2 D0 06            [24] 5867 	pop	ar6
      0020B4 D0 07            [24] 5868 	pop	ar7
      0020B6 0F               [12] 5869 	inc	r7
                                   5870 ;	calc.c:230: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      0020B7 BF 00 D8         [24] 5871 	cjne	r7,#0x00,00453$
      0020BA 0E               [12] 5872 	inc	r6
      0020BB 80 D5            [24] 5873 	sjmp	00453$
      0020BD                       5874 00200$:
                                   5875 ;	calc.c:231: else if (!stack_pop(ctx->ps, &d1)) {
      0020BD C0 05            [24] 5876 	push	ar5
      0020BF C0 06            [24] 5877 	push	ar6
      0020C1 C0 07            [24] 5878 	push	ar7
      0020C3 E5*00            [12] 5879 	mov	a,_bp
      0020C5 24 19            [12] 5880 	add	a,#0x19
      0020C7 FC               [12] 5881 	mov	r4,a
      0020C8 7B 00            [12] 5882 	mov	r3,#0x00
      0020CA 7A 40            [12] 5883 	mov	r2,#0x40
      0020CC E5*00            [12] 5884 	mov	a,_bp
      0020CE 24 0E            [12] 5885 	add	a,#0x0e
      0020D0 F8               [12] 5886 	mov	r0,a
      0020D1 86 82            [24] 5887 	mov	dpl,@r0
      0020D3 08               [12] 5888 	inc	r0
      0020D4 86 83            [24] 5889 	mov	dph,@r0
      0020D6 08               [12] 5890 	inc	r0
      0020D7 86 F0            [24] 5891 	mov	b,@r0
      0020D9 12r00r00         [24] 5892 	lcall	__gptrget
      0020DC FD               [12] 5893 	mov	r5,a
      0020DD A3               [24] 5894 	inc	dptr
      0020DE 12r00r00         [24] 5895 	lcall	__gptrget
      0020E1 FE               [12] 5896 	mov	r6,a
      0020E2 A3               [24] 5897 	inc	dptr
      0020E3 12r00r00         [24] 5898 	lcall	__gptrget
      0020E6 FF               [12] 5899 	mov	r7,a
      0020E7 C0 05            [24] 5900 	push	ar5
      0020E9 C0 04            [24] 5901 	push	ar4
      0020EB C0 03            [24] 5902 	push	ar3
      0020ED C0 02            [24] 5903 	push	ar2
      0020EF 8D 82            [24] 5904 	mov	dpl,r5
      0020F1 8E 83            [24] 5905 	mov	dph,r6
      0020F3 8F F0            [24] 5906 	mov	b,r7
      0020F5 12r00r00         [24] 5907 	lcall	_stack_pop
      0020F8 AE 82            [24] 5908 	mov	r6,dpl
      0020FA AF 83            [24] 5909 	mov	r7,dph
      0020FC 15 81            [12] 5910 	dec	sp
      0020FE 15 81            [12] 5911 	dec	sp
      002100 15 81            [12] 5912 	dec	sp
      002102 D0 05            [24] 5913 	pop	ar5
      002104 EE               [12] 5914 	mov	a,r6
      002105 4F               [12] 5915 	orl	a,r7
      002106 D0 07            [24] 5916 	pop	ar7
      002108 D0 06            [24] 5917 	pop	ar6
      00210A D0 05            [24] 5918 	pop	ar5
      00210C 70 6F            [24] 5919 	jnz	00197$
                                   5920 ;	calc.c:232: (void)stack_push(ctx->ps, d0);
      00210E E5*00            [12] 5921 	mov	a,_bp
      002110 24 0E            [12] 5922 	add	a,#0x0e
      002112 F8               [12] 5923 	mov	r0,a
      002113 86 82            [24] 5924 	mov	dpl,@r0
      002115 08               [12] 5925 	inc	r0
      002116 86 83            [24] 5926 	mov	dph,@r0
      002118 08               [12] 5927 	inc	r0
      002119 86 F0            [24] 5928 	mov	b,@r0
      00211B 12r00r00         [24] 5929 	lcall	__gptrget
      00211E FA               [12] 5930 	mov	r2,a
      00211F A3               [24] 5931 	inc	dptr
      002120 12r00r00         [24] 5932 	lcall	__gptrget
      002123 FB               [12] 5933 	mov	r3,a
      002124 A3               [24] 5934 	inc	dptr
      002125 12r00r00         [24] 5935 	lcall	__gptrget
      002128 FC               [12] 5936 	mov	r4,a
      002129 E5*00            [12] 5937 	mov	a,_bp
      00212B 24 15            [12] 5938 	add	a,#0x15
      00212D F8               [12] 5939 	mov	r0,a
      00212E E6               [12] 5940 	mov	a,@r0
      00212F C0 E0            [24] 5941 	push	acc
      002131 08               [12] 5942 	inc	r0
      002132 E6               [12] 5943 	mov	a,@r0
      002133 C0 E0            [24] 5944 	push	acc
      002135 08               [12] 5945 	inc	r0
      002136 E6               [12] 5946 	mov	a,@r0
      002137 C0 E0            [24] 5947 	push	acc
      002139 08               [12] 5948 	inc	r0
      00213A E6               [12] 5949 	mov	a,@r0
      00213B C0 E0            [24] 5950 	push	acc
      00213D 8A 82            [24] 5951 	mov	dpl,r2
      00213F 8B 83            [24] 5952 	mov	dph,r3
      002141 8C F0            [24] 5953 	mov	b,r4
      002143 12r00r00         [24] 5954 	lcall	_stack_push
      002146 E5 81            [12] 5955 	mov	a,sp
      002148 24 FC            [12] 5956 	add	a,#0xfc
      00214A F5 81            [12] 5957 	mov	sp,a
                                   5958 ;	calc.c:233: printstr("\r\nstack underflow\r\n");
      00214C 7Fr4E            [12] 5959 	mov	r7,#___str_10
      00214E 7Es00            [12] 5960 	mov	r6,#(___str_10 >> 8)
      002150 7D 80            [12] 5961 	mov	r5,#0x80
                                   5962 ;	calc.c:20: return;
      002152                       5963 00456$:
                                   5964 ;	calc.c:18: for (; *s; s++) putchar(*s);
      002152 8F 82            [24] 5965 	mov	dpl,r7
      002154 8E 83            [24] 5966 	mov	dph,r6
      002156 8D F0            [24] 5967 	mov	b,r5
      002158 12r00r00         [24] 5968 	lcall	__gptrget
      00215B FC               [12] 5969 	mov	r4,a
      00215C 70 03            [24] 5970 	jnz	01358$
      00215E 02r2Er65         [24] 5971 	ljmp	00249$
      002161                       5972 01358$:
      002161 7B 00            [12] 5973 	mov	r3,#0x00
      002163 8C 82            [24] 5974 	mov	dpl,r4
      002165 8B 83            [24] 5975 	mov	dph,r3
      002167 C0 07            [24] 5976 	push	ar7
      002169 C0 06            [24] 5977 	push	ar6
      00216B C0 05            [24] 5978 	push	ar5
      00216D 12r00r00         [24] 5979 	lcall	_putchar
      002170 D0 05            [24] 5980 	pop	ar5
      002172 D0 06            [24] 5981 	pop	ar6
      002174 D0 07            [24] 5982 	pop	ar7
      002176 0F               [12] 5983 	inc	r7
                                   5984 ;	calc.c:233: printstr("\r\nstack underflow\r\n");
      002177 BF 00 D8         [24] 5985 	cjne	r7,#0x00,00456$
      00217A 0E               [12] 5986 	inc	r6
      00217B 80 D5            [24] 5987 	sjmp	00456$
      00217D                       5988 00197$:
                                   5989 ;	calc.c:234: } else if (!d0) {
      00217D E5*00            [12] 5990 	mov	a,_bp
      00217F 24 15            [12] 5991 	add	a,#0x15
      002181 F8               [12] 5992 	mov	r0,a
      002182 E6               [12] 5993 	mov	a,@r0
      002183 08               [12] 5994 	inc	r0
      002184 46               [12] 5995 	orl	a,@r0
      002185 08               [12] 5996 	inc	r0
      002186 46               [12] 5997 	orl	a,@r0
      002187 08               [12] 5998 	inc	r0
      002188 46               [12] 5999 	orl	a,@r0
      002189 60 03            [24] 6000 	jz	01360$
      00218B 02r22r3B         [24] 6001 	ljmp	00194$
      00218E                       6002 01360$:
                                   6003 ;	calc.c:235: (void)stack_push(ctx->ps, d1);
      00218E E5*00            [12] 6004 	mov	a,_bp
      002190 24 0E            [12] 6005 	add	a,#0x0e
      002192 F8               [12] 6006 	mov	r0,a
      002193 86 82            [24] 6007 	mov	dpl,@r0
      002195 08               [12] 6008 	inc	r0
      002196 86 83            [24] 6009 	mov	dph,@r0
      002198 08               [12] 6010 	inc	r0
      002199 86 F0            [24] 6011 	mov	b,@r0
      00219B 12r00r00         [24] 6012 	lcall	__gptrget
      00219E FA               [12] 6013 	mov	r2,a
      00219F A3               [24] 6014 	inc	dptr
      0021A0 12r00r00         [24] 6015 	lcall	__gptrget
      0021A3 FB               [12] 6016 	mov	r3,a
      0021A4 A3               [24] 6017 	inc	dptr
      0021A5 12r00r00         [24] 6018 	lcall	__gptrget
      0021A8 FC               [12] 6019 	mov	r4,a
      0021A9 E5*00            [12] 6020 	mov	a,_bp
      0021AB 24 19            [12] 6021 	add	a,#0x19
      0021AD F8               [12] 6022 	mov	r0,a
      0021AE E6               [12] 6023 	mov	a,@r0
      0021AF C0 E0            [24] 6024 	push	acc
      0021B1 08               [12] 6025 	inc	r0
      0021B2 E6               [12] 6026 	mov	a,@r0
      0021B3 C0 E0            [24] 6027 	push	acc
      0021B5 08               [12] 6028 	inc	r0
      0021B6 E6               [12] 6029 	mov	a,@r0
      0021B7 C0 E0            [24] 6030 	push	acc
      0021B9 08               [12] 6031 	inc	r0
      0021BA E6               [12] 6032 	mov	a,@r0
      0021BB C0 E0            [24] 6033 	push	acc
      0021BD 8A 82            [24] 6034 	mov	dpl,r2
      0021BF 8B 83            [24] 6035 	mov	dph,r3
      0021C1 8C F0            [24] 6036 	mov	b,r4
      0021C3 12r00r00         [24] 6037 	lcall	_stack_push
      0021C6 E5 81            [12] 6038 	mov	a,sp
      0021C8 24 FC            [12] 6039 	add	a,#0xfc
      0021CA F5 81            [12] 6040 	mov	sp,a
                                   6041 ;	calc.c:236: (void)stack_push(ctx->ps, d0);			
      0021CC E5*00            [12] 6042 	mov	a,_bp
      0021CE 24 0E            [12] 6043 	add	a,#0x0e
      0021D0 F8               [12] 6044 	mov	r0,a
      0021D1 86 82            [24] 6045 	mov	dpl,@r0
      0021D3 08               [12] 6046 	inc	r0
      0021D4 86 83            [24] 6047 	mov	dph,@r0
      0021D6 08               [12] 6048 	inc	r0
      0021D7 86 F0            [24] 6049 	mov	b,@r0
      0021D9 12r00r00         [24] 6050 	lcall	__gptrget
      0021DC FA               [12] 6051 	mov	r2,a
      0021DD A3               [24] 6052 	inc	dptr
      0021DE 12r00r00         [24] 6053 	lcall	__gptrget
      0021E1 FB               [12] 6054 	mov	r3,a
      0021E2 A3               [24] 6055 	inc	dptr
      0021E3 12r00r00         [24] 6056 	lcall	__gptrget
      0021E6 FC               [12] 6057 	mov	r4,a
      0021E7 E5*00            [12] 6058 	mov	a,_bp
      0021E9 24 15            [12] 6059 	add	a,#0x15
      0021EB F8               [12] 6060 	mov	r0,a
      0021EC E6               [12] 6061 	mov	a,@r0
      0021ED C0 E0            [24] 6062 	push	acc
      0021EF 08               [12] 6063 	inc	r0
      0021F0 E6               [12] 6064 	mov	a,@r0
      0021F1 C0 E0            [24] 6065 	push	acc
      0021F3 08               [12] 6066 	inc	r0
      0021F4 E6               [12] 6067 	mov	a,@r0
      0021F5 C0 E0            [24] 6068 	push	acc
      0021F7 08               [12] 6069 	inc	r0
      0021F8 E6               [12] 6070 	mov	a,@r0
      0021F9 C0 E0            [24] 6071 	push	acc
      0021FB 8A 82            [24] 6072 	mov	dpl,r2
      0021FD 8B 83            [24] 6073 	mov	dph,r3
      0021FF 8C F0            [24] 6074 	mov	b,r4
      002201 12r00r00         [24] 6075 	lcall	_stack_push
      002204 E5 81            [12] 6076 	mov	a,sp
      002206 24 FC            [12] 6077 	add	a,#0xfc
      002208 F5 81            [12] 6078 	mov	sp,a
                                   6079 ;	calc.c:237: printstr("\r\ndivision by zero\r\n");
      00220A 7FrB0            [12] 6080 	mov	r7,#___str_14
      00220C 7Es00            [12] 6081 	mov	r6,#(___str_14 >> 8)
      00220E 7D 80            [12] 6082 	mov	r5,#0x80
                                   6083 ;	calc.c:20: return;
      002210                       6084 00459$:
                                   6085 ;	calc.c:18: for (; *s; s++) putchar(*s);
      002210 8F 82            [24] 6086 	mov	dpl,r7
      002212 8E 83            [24] 6087 	mov	dph,r6
      002214 8D F0            [24] 6088 	mov	b,r5
      002216 12r00r00         [24] 6089 	lcall	__gptrget
      002219 FC               [12] 6090 	mov	r4,a
      00221A 70 03            [24] 6091 	jnz	01361$
      00221C 02r2Er65         [24] 6092 	ljmp	00249$
      00221F                       6093 01361$:
      00221F 7B 00            [12] 6094 	mov	r3,#0x00
      002221 8C 82            [24] 6095 	mov	dpl,r4
      002223 8B 83            [24] 6096 	mov	dph,r3
      002225 C0 07            [24] 6097 	push	ar7
      002227 C0 06            [24] 6098 	push	ar6
      002229 C0 05            [24] 6099 	push	ar5
      00222B 12r00r00         [24] 6100 	lcall	_putchar
      00222E D0 05            [24] 6101 	pop	ar5
      002230 D0 06            [24] 6102 	pop	ar6
      002232 D0 07            [24] 6103 	pop	ar7
      002234 0F               [12] 6104 	inc	r7
                                   6105 ;	calc.c:237: printstr("\r\ndivision by zero\r\n");
      002235 BF 00 D8         [24] 6106 	cjne	r7,#0x00,00459$
      002238 0E               [12] 6107 	inc	r6
      002239 80 D5            [24] 6108 	sjmp	00459$
      00223B                       6109 00194$:
                                   6110 ;	calc.c:239: if (ctx->digit[0] == '%') d1 %= d0;
      00223B 8D 82            [24] 6111 	mov	dpl,r5
      00223D 8E 83            [24] 6112 	mov	dph,r6
      00223F 8F F0            [24] 6113 	mov	b,r7
      002241 12r00r00         [24] 6114 	lcall	__gptrget
      002244 FD               [12] 6115 	mov	r5,a
      002245 BD 25 45         [24] 6116 	cjne	r5,#0x25,00191$
      002248 E5*00            [12] 6117 	mov	a,_bp
      00224A 24 15            [12] 6118 	add	a,#0x15
      00224C F8               [12] 6119 	mov	r0,a
      00224D E6               [12] 6120 	mov	a,@r0
      00224E C0 E0            [24] 6121 	push	acc
      002250 08               [12] 6122 	inc	r0
      002251 E6               [12] 6123 	mov	a,@r0
      002252 C0 E0            [24] 6124 	push	acc
      002254 08               [12] 6125 	inc	r0
      002255 E6               [12] 6126 	mov	a,@r0
      002256 C0 E0            [24] 6127 	push	acc
      002258 08               [12] 6128 	inc	r0
      002259 E6               [12] 6129 	mov	a,@r0
      00225A C0 E0            [24] 6130 	push	acc
      00225C E5*00            [12] 6131 	mov	a,_bp
      00225E 24 19            [12] 6132 	add	a,#0x19
      002260 F8               [12] 6133 	mov	r0,a
      002261 86 82            [24] 6134 	mov	dpl,@r0
      002263 08               [12] 6135 	inc	r0
      002264 86 83            [24] 6136 	mov	dph,@r0
      002266 08               [12] 6137 	inc	r0
      002267 86 F0            [24] 6138 	mov	b,@r0
      002269 08               [12] 6139 	inc	r0
      00226A E6               [12] 6140 	mov	a,@r0
      00226B 12r00r00         [24] 6141 	lcall	__modslong
      00226E AC 82            [24] 6142 	mov	r4,dpl
      002270 AD 83            [24] 6143 	mov	r5,dph
      002272 AE F0            [24] 6144 	mov	r6,b
      002274 FF               [12] 6145 	mov	r7,a
      002275 E5 81            [12] 6146 	mov	a,sp
      002277 24 FC            [12] 6147 	add	a,#0xfc
      002279 F5 81            [12] 6148 	mov	sp,a
      00227B E5*00            [12] 6149 	mov	a,_bp
      00227D 24 19            [12] 6150 	add	a,#0x19
      00227F F8               [12] 6151 	mov	r0,a
      002280 A6 04            [24] 6152 	mov	@r0,ar4
      002282 08               [12] 6153 	inc	r0
      002283 A6 05            [24] 6154 	mov	@r0,ar5
      002285 08               [12] 6155 	inc	r0
      002286 A6 06            [24] 6156 	mov	@r0,ar6
      002288 08               [12] 6157 	inc	r0
      002289 A6 07            [24] 6158 	mov	@r0,ar7
      00228B 80 5F            [24] 6159 	sjmp	00192$
      00228D                       6160 00191$:
                                   6161 ;	calc.c:240: else d1 = (unsigned long)d1 % (unsigned long)d0;
      00228D E5*00            [12] 6162 	mov	a,_bp
      00228F 24 19            [12] 6163 	add	a,#0x19
      002291 F8               [12] 6164 	mov	r0,a
      002292 E5*00            [12] 6165 	mov	a,_bp
      002294 24 07            [12] 6166 	add	a,#0x07
      002296 F9               [12] 6167 	mov	r1,a
      002297 E6               [12] 6168 	mov	a,@r0
      002298 F7               [12] 6169 	mov	@r1,a
      002299 08               [12] 6170 	inc	r0
      00229A 09               [12] 6171 	inc	r1
      00229B E6               [12] 6172 	mov	a,@r0
      00229C F7               [12] 6173 	mov	@r1,a
      00229D 08               [12] 6174 	inc	r0
      00229E 09               [12] 6175 	inc	r1
      00229F E6               [12] 6176 	mov	a,@r0
      0022A0 F7               [12] 6177 	mov	@r1,a
      0022A1 08               [12] 6178 	inc	r0
      0022A2 09               [12] 6179 	inc	r1
      0022A3 E6               [12] 6180 	mov	a,@r0
      0022A4 F7               [12] 6181 	mov	@r1,a
      0022A5 E5*00            [12] 6182 	mov	a,_bp
      0022A7 24 15            [12] 6183 	add	a,#0x15
      0022A9 F8               [12] 6184 	mov	r0,a
      0022AA 86 02            [24] 6185 	mov	ar2,@r0
      0022AC 08               [12] 6186 	inc	r0
      0022AD 86 03            [24] 6187 	mov	ar3,@r0
      0022AF 08               [12] 6188 	inc	r0
      0022B0 86 06            [24] 6189 	mov	ar6,@r0
      0022B2 08               [12] 6190 	inc	r0
      0022B3 86 07            [24] 6191 	mov	ar7,@r0
      0022B5 C0 02            [24] 6192 	push	ar2
      0022B7 C0 03            [24] 6193 	push	ar3
      0022B9 C0 06            [24] 6194 	push	ar6
      0022BB C0 07            [24] 6195 	push	ar7
      0022BD E5*00            [12] 6196 	mov	a,_bp
      0022BF 24 07            [12] 6197 	add	a,#0x07
      0022C1 F8               [12] 6198 	mov	r0,a
      0022C2 86 82            [24] 6199 	mov	dpl,@r0
      0022C4 08               [12] 6200 	inc	r0
      0022C5 86 83            [24] 6201 	mov	dph,@r0
      0022C7 08               [12] 6202 	inc	r0
      0022C8 86 F0            [24] 6203 	mov	b,@r0
      0022CA 08               [12] 6204 	inc	r0
      0022CB E6               [12] 6205 	mov	a,@r0
      0022CC 12r00r00         [24] 6206 	lcall	__modulong
      0022CF AC 82            [24] 6207 	mov	r4,dpl
      0022D1 AD 83            [24] 6208 	mov	r5,dph
      0022D3 AE F0            [24] 6209 	mov	r6,b
      0022D5 FF               [12] 6210 	mov	r7,a
      0022D6 E5 81            [12] 6211 	mov	a,sp
      0022D8 24 FC            [12] 6212 	add	a,#0xfc
      0022DA F5 81            [12] 6213 	mov	sp,a
      0022DC E5*00            [12] 6214 	mov	a,_bp
      0022DE 24 19            [12] 6215 	add	a,#0x19
      0022E0 F8               [12] 6216 	mov	r0,a
      0022E1 A6 04            [24] 6217 	mov	@r0,ar4
      0022E3 08               [12] 6218 	inc	r0
      0022E4 A6 05            [24] 6219 	mov	@r0,ar5
      0022E6 08               [12] 6220 	inc	r0
      0022E7 A6 06            [24] 6221 	mov	@r0,ar6
      0022E9 08               [12] 6222 	inc	r0
      0022EA A6 07            [24] 6223 	mov	@r0,ar7
      0022EC                       6224 00192$:
                                   6225 ;	calc.c:241: (void)stack_push(ctx->ps, d1);
      0022EC E5*00            [12] 6226 	mov	a,_bp
      0022EE 24 0E            [12] 6227 	add	a,#0x0e
      0022F0 F8               [12] 6228 	mov	r0,a
      0022F1 86 82            [24] 6229 	mov	dpl,@r0
      0022F3 08               [12] 6230 	inc	r0
      0022F4 86 83            [24] 6231 	mov	dph,@r0
      0022F6 08               [12] 6232 	inc	r0
      0022F7 86 F0            [24] 6233 	mov	b,@r0
      0022F9 12r00r00         [24] 6234 	lcall	__gptrget
      0022FC FD               [12] 6235 	mov	r5,a
      0022FD A3               [24] 6236 	inc	dptr
      0022FE 12r00r00         [24] 6237 	lcall	__gptrget
      002301 FE               [12] 6238 	mov	r6,a
      002302 A3               [24] 6239 	inc	dptr
      002303 12r00r00         [24] 6240 	lcall	__gptrget
      002306 FF               [12] 6241 	mov	r7,a
      002307 E5*00            [12] 6242 	mov	a,_bp
      002309 24 19            [12] 6243 	add	a,#0x19
      00230B F8               [12] 6244 	mov	r0,a
      00230C E6               [12] 6245 	mov	a,@r0
      00230D C0 E0            [24] 6246 	push	acc
      00230F 08               [12] 6247 	inc	r0
      002310 E6               [12] 6248 	mov	a,@r0
      002311 C0 E0            [24] 6249 	push	acc
      002313 08               [12] 6250 	inc	r0
      002314 E6               [12] 6251 	mov	a,@r0
      002315 C0 E0            [24] 6252 	push	acc
      002317 08               [12] 6253 	inc	r0
      002318 E6               [12] 6254 	mov	a,@r0
      002319 C0 E0            [24] 6255 	push	acc
      00231B 8D 82            [24] 6256 	mov	dpl,r5
      00231D 8E 83            [24] 6257 	mov	dph,r6
      00231F 8F F0            [24] 6258 	mov	b,r7
      002321 12r00r00         [24] 6259 	lcall	_stack_push
      002324 E5 81            [12] 6260 	mov	a,sp
      002326 24 FC            [12] 6261 	add	a,#0xfc
      002328 F5 81            [12] 6262 	mov	sp,a
                                   6263 ;	calc.c:243: break;
      00232A 02r2Er65         [24] 6264 	ljmp	00249$
                                   6265 ;	calc.c:244: case '&':
      00232D                       6266 00202$:
                                   6267 ;	calc.c:245: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      00232D E5*00            [12] 6268 	mov	a,_bp
      00232F 24 15            [12] 6269 	add	a,#0x15
      002331 FF               [12] 6270 	mov	r7,a
      002332 E5*00            [12] 6271 	mov	a,_bp
      002334 24 0E            [12] 6272 	add	a,#0x0e
      002336 F8               [12] 6273 	mov	r0,a
      002337 A6 07            [24] 6274 	mov	@r0,ar7
      002339 08               [12] 6275 	inc	r0
      00233A 76 00            [12] 6276 	mov	@r0,#0x00
      00233C 08               [12] 6277 	inc	r0
      00233D 76 40            [12] 6278 	mov	@r0,#0x40
      00233F E5*00            [12] 6279 	mov	a,_bp
      002341 24 12            [12] 6280 	add	a,#0x12
      002343 F8               [12] 6281 	mov	r0,a
      002344 74 11            [12] 6282 	mov	a,#0x11
      002346 26               [12] 6283 	add	a,@r0
      002347 FA               [12] 6284 	mov	r2,a
      002348 74 40            [12] 6285 	mov	a,#0x40
      00234A 08               [12] 6286 	inc	r0
      00234B 36               [12] 6287 	addc	a,@r0
      00234C FB               [12] 6288 	mov	r3,a
      00234D 08               [12] 6289 	inc	r0
      00234E 86 04            [24] 6290 	mov	ar4,@r0
      002350 8A 82            [24] 6291 	mov	dpl,r2
      002352 8B 83            [24] 6292 	mov	dph,r3
      002354 8C F0            [24] 6293 	mov	b,r4
      002356 12r00r00         [24] 6294 	lcall	__gptrget
      002359 FD               [12] 6295 	mov	r5,a
      00235A A3               [24] 6296 	inc	dptr
      00235B 12r00r00         [24] 6297 	lcall	__gptrget
      00235E FE               [12] 6298 	mov	r6,a
      00235F A3               [24] 6299 	inc	dptr
      002360 12r00r00         [24] 6300 	lcall	__gptrget
      002363 FF               [12] 6301 	mov	r7,a
      002364 C0 04            [24] 6302 	push	ar4
      002366 C0 03            [24] 6303 	push	ar3
      002368 C0 02            [24] 6304 	push	ar2
      00236A E5*00            [12] 6305 	mov	a,_bp
      00236C 24 0E            [12] 6306 	add	a,#0x0e
      00236E F8               [12] 6307 	mov	r0,a
      00236F E6               [12] 6308 	mov	a,@r0
      002370 C0 E0            [24] 6309 	push	acc
      002372 08               [12] 6310 	inc	r0
      002373 E6               [12] 6311 	mov	a,@r0
      002374 C0 E0            [24] 6312 	push	acc
      002376 08               [12] 6313 	inc	r0
      002377 E6               [12] 6314 	mov	a,@r0
      002378 C0 E0            [24] 6315 	push	acc
      00237A 8D 82            [24] 6316 	mov	dpl,r5
      00237C 8E 83            [24] 6317 	mov	dph,r6
      00237E 8F F0            [24] 6318 	mov	b,r7
      002380 12r00r00         [24] 6319 	lcall	_stack_pop
      002383 AE 82            [24] 6320 	mov	r6,dpl
      002385 AF 83            [24] 6321 	mov	r7,dph
      002387 15 81            [12] 6322 	dec	sp
      002389 15 81            [12] 6323 	dec	sp
      00238B 15 81            [12] 6324 	dec	sp
      00238D D0 02            [24] 6325 	pop	ar2
      00238F D0 03            [24] 6326 	pop	ar3
      002391 D0 04            [24] 6327 	pop	ar4
      002393 EE               [12] 6328 	mov	a,r6
      002394 4F               [12] 6329 	orl	a,r7
      002395 70 31            [24] 6330 	jnz	00207$
      002397 7Dr4E            [12] 6331 	mov	r5,#___str_10
      002399 7Cs00            [12] 6332 	mov	r4,#(___str_10 >> 8)
      00239B 7B 80            [12] 6333 	mov	r3,#0x80
                                   6334 ;	calc.c:20: return;
      00239D                       6335 00462$:
                                   6336 ;	calc.c:18: for (; *s; s++) putchar(*s);
      00239D 8D 82            [24] 6337 	mov	dpl,r5
      00239F 8C 83            [24] 6338 	mov	dph,r4
      0023A1 8B F0            [24] 6339 	mov	b,r3
      0023A3 12r00r00         [24] 6340 	lcall	__gptrget
      0023A6 FF               [12] 6341 	mov	r7,a
      0023A7 70 03            [24] 6342 	jnz	01366$
      0023A9 02r2Er65         [24] 6343 	ljmp	00249$
      0023AC                       6344 01366$:
      0023AC 7E 00            [12] 6345 	mov	r6,#0x00
      0023AE 8F 82            [24] 6346 	mov	dpl,r7
      0023B0 8E 83            [24] 6347 	mov	dph,r6
      0023B2 C0 05            [24] 6348 	push	ar5
      0023B4 C0 04            [24] 6349 	push	ar4
      0023B6 C0 03            [24] 6350 	push	ar3
      0023B8 12r00r00         [24] 6351 	lcall	_putchar
      0023BB D0 03            [24] 6352 	pop	ar3
      0023BD D0 04            [24] 6353 	pop	ar4
      0023BF D0 05            [24] 6354 	pop	ar5
      0023C1 0D               [12] 6355 	inc	r5
                                   6356 ;	calc.c:245: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      0023C2 BD 00 D8         [24] 6357 	cjne	r5,#0x00,00462$
      0023C5 0C               [12] 6358 	inc	r4
      0023C6 80 D5            [24] 6359 	sjmp	00462$
      0023C8                       6360 00207$:
                                   6361 ;	calc.c:246: else if (!stack_pop(ctx->ps, &d1)) {
      0023C8 E5*00            [12] 6362 	mov	a,_bp
      0023CA 24 19            [12] 6363 	add	a,#0x19
      0023CC FF               [12] 6364 	mov	r7,a
      0023CD E5*00            [12] 6365 	mov	a,_bp
      0023CF 24 0E            [12] 6366 	add	a,#0x0e
      0023D1 F8               [12] 6367 	mov	r0,a
      0023D2 A6 07            [24] 6368 	mov	@r0,ar7
      0023D4 08               [12] 6369 	inc	r0
      0023D5 76 00            [12] 6370 	mov	@r0,#0x00
      0023D7 08               [12] 6371 	inc	r0
      0023D8 76 40            [12] 6372 	mov	@r0,#0x40
      0023DA 8A 82            [24] 6373 	mov	dpl,r2
      0023DC 8B 83            [24] 6374 	mov	dph,r3
      0023DE 8C F0            [24] 6375 	mov	b,r4
      0023E0 12r00r00         [24] 6376 	lcall	__gptrget
      0023E3 FD               [12] 6377 	mov	r5,a
      0023E4 A3               [24] 6378 	inc	dptr
      0023E5 12r00r00         [24] 6379 	lcall	__gptrget
      0023E8 FE               [12] 6380 	mov	r6,a
      0023E9 A3               [24] 6381 	inc	dptr
      0023EA 12r00r00         [24] 6382 	lcall	__gptrget
      0023ED FF               [12] 6383 	mov	r7,a
      0023EE C0 04            [24] 6384 	push	ar4
      0023F0 C0 03            [24] 6385 	push	ar3
      0023F2 C0 02            [24] 6386 	push	ar2
      0023F4 E5*00            [12] 6387 	mov	a,_bp
      0023F6 24 0E            [12] 6388 	add	a,#0x0e
      0023F8 F8               [12] 6389 	mov	r0,a
      0023F9 E6               [12] 6390 	mov	a,@r0
      0023FA C0 E0            [24] 6391 	push	acc
      0023FC 08               [12] 6392 	inc	r0
      0023FD E6               [12] 6393 	mov	a,@r0
      0023FE C0 E0            [24] 6394 	push	acc
      002400 08               [12] 6395 	inc	r0
      002401 E6               [12] 6396 	mov	a,@r0
      002402 C0 E0            [24] 6397 	push	acc
      002404 8D 82            [24] 6398 	mov	dpl,r5
      002406 8E 83            [24] 6399 	mov	dph,r6
      002408 8F F0            [24] 6400 	mov	b,r7
      00240A 12r00r00         [24] 6401 	lcall	_stack_pop
      00240D AE 82            [24] 6402 	mov	r6,dpl
      00240F AF 83            [24] 6403 	mov	r7,dph
      002411 15 81            [12] 6404 	dec	sp
      002413 15 81            [12] 6405 	dec	sp
      002415 15 81            [12] 6406 	dec	sp
      002417 D0 02            [24] 6407 	pop	ar2
      002419 D0 03            [24] 6408 	pop	ar3
      00241B D0 04            [24] 6409 	pop	ar4
      00241D EE               [12] 6410 	mov	a,r6
      00241E 4F               [12] 6411 	orl	a,r7
      00241F 70 68            [24] 6412 	jnz	00204$
                                   6413 ;	calc.c:247: (void)stack_push(ctx->ps, d0);
      002421 8A 82            [24] 6414 	mov	dpl,r2
      002423 8B 83            [24] 6415 	mov	dph,r3
      002425 8C F0            [24] 6416 	mov	b,r4
      002427 12r00r00         [24] 6417 	lcall	__gptrget
      00242A FD               [12] 6418 	mov	r5,a
      00242B A3               [24] 6419 	inc	dptr
      00242C 12r00r00         [24] 6420 	lcall	__gptrget
      00242F FE               [12] 6421 	mov	r6,a
      002430 A3               [24] 6422 	inc	dptr
      002431 12r00r00         [24] 6423 	lcall	__gptrget
      002434 FF               [12] 6424 	mov	r7,a
      002435 E5*00            [12] 6425 	mov	a,_bp
      002437 24 15            [12] 6426 	add	a,#0x15
      002439 F8               [12] 6427 	mov	r0,a
      00243A E6               [12] 6428 	mov	a,@r0
      00243B C0 E0            [24] 6429 	push	acc
      00243D 08               [12] 6430 	inc	r0
      00243E E6               [12] 6431 	mov	a,@r0
      00243F C0 E0            [24] 6432 	push	acc
      002441 08               [12] 6433 	inc	r0
      002442 E6               [12] 6434 	mov	a,@r0
      002443 C0 E0            [24] 6435 	push	acc
      002445 08               [12] 6436 	inc	r0
      002446 E6               [12] 6437 	mov	a,@r0
      002447 C0 E0            [24] 6438 	push	acc
      002449 8D 82            [24] 6439 	mov	dpl,r5
      00244B 8E 83            [24] 6440 	mov	dph,r6
      00244D 8F F0            [24] 6441 	mov	b,r7
      00244F 12r00r00         [24] 6442 	lcall	_stack_push
      002452 E5 81            [12] 6443 	mov	a,sp
      002454 24 FC            [12] 6444 	add	a,#0xfc
      002456 F5 81            [12] 6445 	mov	sp,a
                                   6446 ;	calc.c:248: printstr("\r\nstack underflow\r\n");
      002458 7Dr4E            [12] 6447 	mov	r5,#___str_10
      00245A 7Cs00            [12] 6448 	mov	r4,#(___str_10 >> 8)
      00245C 7B 80            [12] 6449 	mov	r3,#0x80
                                   6450 ;	calc.c:20: return;
      00245E                       6451 00465$:
                                   6452 ;	calc.c:18: for (; *s; s++) putchar(*s);
      00245E 8D 82            [24] 6453 	mov	dpl,r5
      002460 8C 83            [24] 6454 	mov	dph,r4
      002462 8B F0            [24] 6455 	mov	b,r3
      002464 12r00r00         [24] 6456 	lcall	__gptrget
      002467 FF               [12] 6457 	mov	r7,a
      002468 70 03            [24] 6458 	jnz	01369$
      00246A 02r2Er65         [24] 6459 	ljmp	00249$
      00246D                       6460 01369$:
      00246D 7E 00            [12] 6461 	mov	r6,#0x00
      00246F 8F 82            [24] 6462 	mov	dpl,r7
      002471 8E 83            [24] 6463 	mov	dph,r6
      002473 C0 05            [24] 6464 	push	ar5
      002475 C0 04            [24] 6465 	push	ar4
      002477 C0 03            [24] 6466 	push	ar3
      002479 12r00r00         [24] 6467 	lcall	_putchar
      00247C D0 03            [24] 6468 	pop	ar3
      00247E D0 04            [24] 6469 	pop	ar4
      002480 D0 05            [24] 6470 	pop	ar5
      002482 0D               [12] 6471 	inc	r5
                                   6472 ;	calc.c:248: printstr("\r\nstack underflow\r\n");
      002483 BD 00 D8         [24] 6473 	cjne	r5,#0x00,00465$
      002486 0C               [12] 6474 	inc	r4
      002487 80 D5            [24] 6475 	sjmp	00465$
      002489                       6476 00204$:
                                   6477 ;	calc.c:250: d1 &= d0;
      002489 E5*00            [12] 6478 	mov	a,_bp
      00248B 24 19            [12] 6479 	add	a,#0x19
      00248D F8               [12] 6480 	mov	r0,a
      00248E E5*00            [12] 6481 	mov	a,_bp
      002490 24 15            [12] 6482 	add	a,#0x15
      002492 F9               [12] 6483 	mov	r1,a
      002493 E7               [12] 6484 	mov	a,@r1
      002494 56               [12] 6485 	anl	a,@r0
      002495 F6               [12] 6486 	mov	@r0,a
      002496 09               [12] 6487 	inc	r1
      002497 E7               [12] 6488 	mov	a,@r1
      002498 08               [12] 6489 	inc	r0
      002499 56               [12] 6490 	anl	a,@r0
      00249A F6               [12] 6491 	mov	@r0,a
      00249B 09               [12] 6492 	inc	r1
      00249C E7               [12] 6493 	mov	a,@r1
      00249D 08               [12] 6494 	inc	r0
      00249E 56               [12] 6495 	anl	a,@r0
      00249F F6               [12] 6496 	mov	@r0,a
      0024A0 09               [12] 6497 	inc	r1
      0024A1 E7               [12] 6498 	mov	a,@r1
      0024A2 08               [12] 6499 	inc	r0
      0024A3 56               [12] 6500 	anl	a,@r0
      0024A4 F6               [12] 6501 	mov	@r0,a
                                   6502 ;	calc.c:251: (void)stack_push(ctx->ps, d1);
      0024A5 8A 82            [24] 6503 	mov	dpl,r2
      0024A7 8B 83            [24] 6504 	mov	dph,r3
      0024A9 8C F0            [24] 6505 	mov	b,r4
      0024AB 12r00r00         [24] 6506 	lcall	__gptrget
      0024AE FA               [12] 6507 	mov	r2,a
      0024AF A3               [24] 6508 	inc	dptr
      0024B0 12r00r00         [24] 6509 	lcall	__gptrget
      0024B3 FB               [12] 6510 	mov	r3,a
      0024B4 A3               [24] 6511 	inc	dptr
      0024B5 12r00r00         [24] 6512 	lcall	__gptrget
      0024B8 FC               [12] 6513 	mov	r4,a
      0024B9 E5*00            [12] 6514 	mov	a,_bp
      0024BB 24 19            [12] 6515 	add	a,#0x19
      0024BD F8               [12] 6516 	mov	r0,a
      0024BE E6               [12] 6517 	mov	a,@r0
      0024BF C0 E0            [24] 6518 	push	acc
      0024C1 08               [12] 6519 	inc	r0
      0024C2 E6               [12] 6520 	mov	a,@r0
      0024C3 C0 E0            [24] 6521 	push	acc
      0024C5 08               [12] 6522 	inc	r0
      0024C6 E6               [12] 6523 	mov	a,@r0
      0024C7 C0 E0            [24] 6524 	push	acc
      0024C9 08               [12] 6525 	inc	r0
      0024CA E6               [12] 6526 	mov	a,@r0
      0024CB C0 E0            [24] 6527 	push	acc
      0024CD 8A 82            [24] 6528 	mov	dpl,r2
      0024CF 8B 83            [24] 6529 	mov	dph,r3
      0024D1 8C F0            [24] 6530 	mov	b,r4
      0024D3 12r00r00         [24] 6531 	lcall	_stack_push
      0024D6 E5 81            [12] 6532 	mov	a,sp
      0024D8 24 FC            [12] 6533 	add	a,#0xfc
      0024DA F5 81            [12] 6534 	mov	sp,a
                                   6535 ;	calc.c:253: break;
      0024DC 02r2Er65         [24] 6536 	ljmp	00249$
                                   6537 ;	calc.c:254: case '|':
      0024DF                       6538 00209$:
                                   6539 ;	calc.c:255: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      0024DF E5*00            [12] 6540 	mov	a,_bp
      0024E1 24 15            [12] 6541 	add	a,#0x15
      0024E3 FF               [12] 6542 	mov	r7,a
      0024E4 E5*00            [12] 6543 	mov	a,_bp
      0024E6 24 0E            [12] 6544 	add	a,#0x0e
      0024E8 F8               [12] 6545 	mov	r0,a
      0024E9 A6 07            [24] 6546 	mov	@r0,ar7
      0024EB 08               [12] 6547 	inc	r0
      0024EC 76 00            [12] 6548 	mov	@r0,#0x00
      0024EE 08               [12] 6549 	inc	r0
      0024EF 76 40            [12] 6550 	mov	@r0,#0x40
      0024F1 E5*00            [12] 6551 	mov	a,_bp
      0024F3 24 12            [12] 6552 	add	a,#0x12
      0024F5 F8               [12] 6553 	mov	r0,a
      0024F6 74 11            [12] 6554 	mov	a,#0x11
      0024F8 26               [12] 6555 	add	a,@r0
      0024F9 FA               [12] 6556 	mov	r2,a
      0024FA 74 40            [12] 6557 	mov	a,#0x40
      0024FC 08               [12] 6558 	inc	r0
      0024FD 36               [12] 6559 	addc	a,@r0
      0024FE FB               [12] 6560 	mov	r3,a
      0024FF 08               [12] 6561 	inc	r0
      002500 86 04            [24] 6562 	mov	ar4,@r0
      002502 8A 82            [24] 6563 	mov	dpl,r2
      002504 8B 83            [24] 6564 	mov	dph,r3
      002506 8C F0            [24] 6565 	mov	b,r4
      002508 12r00r00         [24] 6566 	lcall	__gptrget
      00250B FD               [12] 6567 	mov	r5,a
      00250C A3               [24] 6568 	inc	dptr
      00250D 12r00r00         [24] 6569 	lcall	__gptrget
      002510 FE               [12] 6570 	mov	r6,a
      002511 A3               [24] 6571 	inc	dptr
      002512 12r00r00         [24] 6572 	lcall	__gptrget
      002515 FF               [12] 6573 	mov	r7,a
      002516 C0 04            [24] 6574 	push	ar4
      002518 C0 03            [24] 6575 	push	ar3
      00251A C0 02            [24] 6576 	push	ar2
      00251C E5*00            [12] 6577 	mov	a,_bp
      00251E 24 0E            [12] 6578 	add	a,#0x0e
      002520 F8               [12] 6579 	mov	r0,a
      002521 E6               [12] 6580 	mov	a,@r0
      002522 C0 E0            [24] 6581 	push	acc
      002524 08               [12] 6582 	inc	r0
      002525 E6               [12] 6583 	mov	a,@r0
      002526 C0 E0            [24] 6584 	push	acc
      002528 08               [12] 6585 	inc	r0
      002529 E6               [12] 6586 	mov	a,@r0
      00252A C0 E0            [24] 6587 	push	acc
      00252C 8D 82            [24] 6588 	mov	dpl,r5
      00252E 8E 83            [24] 6589 	mov	dph,r6
      002530 8F F0            [24] 6590 	mov	b,r7
      002532 12r00r00         [24] 6591 	lcall	_stack_pop
      002535 AE 82            [24] 6592 	mov	r6,dpl
      002537 AF 83            [24] 6593 	mov	r7,dph
      002539 15 81            [12] 6594 	dec	sp
      00253B 15 81            [12] 6595 	dec	sp
      00253D 15 81            [12] 6596 	dec	sp
      00253F D0 02            [24] 6597 	pop	ar2
      002541 D0 03            [24] 6598 	pop	ar3
      002543 D0 04            [24] 6599 	pop	ar4
      002545 EE               [12] 6600 	mov	a,r6
      002546 4F               [12] 6601 	orl	a,r7
      002547 70 31            [24] 6602 	jnz	00214$
      002549 7Dr4E            [12] 6603 	mov	r5,#___str_10
      00254B 7Cs00            [12] 6604 	mov	r4,#(___str_10 >> 8)
      00254D 7B 80            [12] 6605 	mov	r3,#0x80
                                   6606 ;	calc.c:20: return;
      00254F                       6607 00468$:
                                   6608 ;	calc.c:18: for (; *s; s++) putchar(*s);
      00254F 8D 82            [24] 6609 	mov	dpl,r5
      002551 8C 83            [24] 6610 	mov	dph,r4
      002553 8B F0            [24] 6611 	mov	b,r3
      002555 12r00r00         [24] 6612 	lcall	__gptrget
      002558 FF               [12] 6613 	mov	r7,a
      002559 70 03            [24] 6614 	jnz	01372$
      00255B 02r2Er65         [24] 6615 	ljmp	00249$
      00255E                       6616 01372$:
      00255E 7E 00            [12] 6617 	mov	r6,#0x00
      002560 8F 82            [24] 6618 	mov	dpl,r7
      002562 8E 83            [24] 6619 	mov	dph,r6
      002564 C0 05            [24] 6620 	push	ar5
      002566 C0 04            [24] 6621 	push	ar4
      002568 C0 03            [24] 6622 	push	ar3
      00256A 12r00r00         [24] 6623 	lcall	_putchar
      00256D D0 03            [24] 6624 	pop	ar3
      00256F D0 04            [24] 6625 	pop	ar4
      002571 D0 05            [24] 6626 	pop	ar5
      002573 0D               [12] 6627 	inc	r5
                                   6628 ;	calc.c:255: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      002574 BD 00 D8         [24] 6629 	cjne	r5,#0x00,00468$
      002577 0C               [12] 6630 	inc	r4
      002578 80 D5            [24] 6631 	sjmp	00468$
      00257A                       6632 00214$:
                                   6633 ;	calc.c:256: else if (!stack_pop(ctx->ps, &d1)) {
      00257A E5*00            [12] 6634 	mov	a,_bp
      00257C 24 19            [12] 6635 	add	a,#0x19
      00257E FF               [12] 6636 	mov	r7,a
      00257F E5*00            [12] 6637 	mov	a,_bp
      002581 24 0E            [12] 6638 	add	a,#0x0e
      002583 F8               [12] 6639 	mov	r0,a
      002584 A6 07            [24] 6640 	mov	@r0,ar7
      002586 08               [12] 6641 	inc	r0
      002587 76 00            [12] 6642 	mov	@r0,#0x00
      002589 08               [12] 6643 	inc	r0
      00258A 76 40            [12] 6644 	mov	@r0,#0x40
      00258C 8A 82            [24] 6645 	mov	dpl,r2
      00258E 8B 83            [24] 6646 	mov	dph,r3
      002590 8C F0            [24] 6647 	mov	b,r4
      002592 12r00r00         [24] 6648 	lcall	__gptrget
      002595 FD               [12] 6649 	mov	r5,a
      002596 A3               [24] 6650 	inc	dptr
      002597 12r00r00         [24] 6651 	lcall	__gptrget
      00259A FE               [12] 6652 	mov	r6,a
      00259B A3               [24] 6653 	inc	dptr
      00259C 12r00r00         [24] 6654 	lcall	__gptrget
      00259F FF               [12] 6655 	mov	r7,a
      0025A0 C0 04            [24] 6656 	push	ar4
      0025A2 C0 03            [24] 6657 	push	ar3
      0025A4 C0 02            [24] 6658 	push	ar2
      0025A6 E5*00            [12] 6659 	mov	a,_bp
      0025A8 24 0E            [12] 6660 	add	a,#0x0e
      0025AA F8               [12] 6661 	mov	r0,a
      0025AB E6               [12] 6662 	mov	a,@r0
      0025AC C0 E0            [24] 6663 	push	acc
      0025AE 08               [12] 6664 	inc	r0
      0025AF E6               [12] 6665 	mov	a,@r0
      0025B0 C0 E0            [24] 6666 	push	acc
      0025B2 08               [12] 6667 	inc	r0
      0025B3 E6               [12] 6668 	mov	a,@r0
      0025B4 C0 E0            [24] 6669 	push	acc
      0025B6 8D 82            [24] 6670 	mov	dpl,r5
      0025B8 8E 83            [24] 6671 	mov	dph,r6
      0025BA 8F F0            [24] 6672 	mov	b,r7
      0025BC 12r00r00         [24] 6673 	lcall	_stack_pop
      0025BF AE 82            [24] 6674 	mov	r6,dpl
      0025C1 AF 83            [24] 6675 	mov	r7,dph
      0025C3 15 81            [12] 6676 	dec	sp
      0025C5 15 81            [12] 6677 	dec	sp
      0025C7 15 81            [12] 6678 	dec	sp
      0025C9 D0 02            [24] 6679 	pop	ar2
      0025CB D0 03            [24] 6680 	pop	ar3
      0025CD D0 04            [24] 6681 	pop	ar4
      0025CF EE               [12] 6682 	mov	a,r6
      0025D0 4F               [12] 6683 	orl	a,r7
      0025D1 70 68            [24] 6684 	jnz	00211$
                                   6685 ;	calc.c:257: (void)stack_push(ctx->ps, d0);
      0025D3 8A 82            [24] 6686 	mov	dpl,r2
      0025D5 8B 83            [24] 6687 	mov	dph,r3
      0025D7 8C F0            [24] 6688 	mov	b,r4
      0025D9 12r00r00         [24] 6689 	lcall	__gptrget
      0025DC FD               [12] 6690 	mov	r5,a
      0025DD A3               [24] 6691 	inc	dptr
      0025DE 12r00r00         [24] 6692 	lcall	__gptrget
      0025E1 FE               [12] 6693 	mov	r6,a
      0025E2 A3               [24] 6694 	inc	dptr
      0025E3 12r00r00         [24] 6695 	lcall	__gptrget
      0025E6 FF               [12] 6696 	mov	r7,a
      0025E7 E5*00            [12] 6697 	mov	a,_bp
      0025E9 24 15            [12] 6698 	add	a,#0x15
      0025EB F8               [12] 6699 	mov	r0,a
      0025EC E6               [12] 6700 	mov	a,@r0
      0025ED C0 E0            [24] 6701 	push	acc
      0025EF 08               [12] 6702 	inc	r0
      0025F0 E6               [12] 6703 	mov	a,@r0
      0025F1 C0 E0            [24] 6704 	push	acc
      0025F3 08               [12] 6705 	inc	r0
      0025F4 E6               [12] 6706 	mov	a,@r0
      0025F5 C0 E0            [24] 6707 	push	acc
      0025F7 08               [12] 6708 	inc	r0
      0025F8 E6               [12] 6709 	mov	a,@r0
      0025F9 C0 E0            [24] 6710 	push	acc
      0025FB 8D 82            [24] 6711 	mov	dpl,r5
      0025FD 8E 83            [24] 6712 	mov	dph,r6
      0025FF 8F F0            [24] 6713 	mov	b,r7
      002601 12r00r00         [24] 6714 	lcall	_stack_push
      002604 E5 81            [12] 6715 	mov	a,sp
      002606 24 FC            [12] 6716 	add	a,#0xfc
      002608 F5 81            [12] 6717 	mov	sp,a
                                   6718 ;	calc.c:258: printstr("\r\nstack underflow\r\n");
      00260A 7Dr4E            [12] 6719 	mov	r5,#___str_10
      00260C 7Cs00            [12] 6720 	mov	r4,#(___str_10 >> 8)
      00260E 7B 80            [12] 6721 	mov	r3,#0x80
                                   6722 ;	calc.c:20: return;
      002610                       6723 00471$:
                                   6724 ;	calc.c:18: for (; *s; s++) putchar(*s);
      002610 8D 82            [24] 6725 	mov	dpl,r5
      002612 8C 83            [24] 6726 	mov	dph,r4
      002614 8B F0            [24] 6727 	mov	b,r3
      002616 12r00r00         [24] 6728 	lcall	__gptrget
      002619 FF               [12] 6729 	mov	r7,a
      00261A 70 03            [24] 6730 	jnz	01375$
      00261C 02r2Er65         [24] 6731 	ljmp	00249$
      00261F                       6732 01375$:
      00261F 7E 00            [12] 6733 	mov	r6,#0x00
      002621 8F 82            [24] 6734 	mov	dpl,r7
      002623 8E 83            [24] 6735 	mov	dph,r6
      002625 C0 05            [24] 6736 	push	ar5
      002627 C0 04            [24] 6737 	push	ar4
      002629 C0 03            [24] 6738 	push	ar3
      00262B 12r00r00         [24] 6739 	lcall	_putchar
      00262E D0 03            [24] 6740 	pop	ar3
      002630 D0 04            [24] 6741 	pop	ar4
      002632 D0 05            [24] 6742 	pop	ar5
      002634 0D               [12] 6743 	inc	r5
                                   6744 ;	calc.c:258: printstr("\r\nstack underflow\r\n");
      002635 BD 00 D8         [24] 6745 	cjne	r5,#0x00,00471$
      002638 0C               [12] 6746 	inc	r4
      002639 80 D5            [24] 6747 	sjmp	00471$
      00263B                       6748 00211$:
                                   6749 ;	calc.c:260: d1 |= d0;
      00263B E5*00            [12] 6750 	mov	a,_bp
      00263D 24 19            [12] 6751 	add	a,#0x19
      00263F F8               [12] 6752 	mov	r0,a
      002640 E5*00            [12] 6753 	mov	a,_bp
      002642 24 15            [12] 6754 	add	a,#0x15
      002644 F9               [12] 6755 	mov	r1,a
      002645 E7               [12] 6756 	mov	a,@r1
      002646 46               [12] 6757 	orl	a,@r0
      002647 F6               [12] 6758 	mov	@r0,a
      002648 09               [12] 6759 	inc	r1
      002649 E7               [12] 6760 	mov	a,@r1
      00264A 08               [12] 6761 	inc	r0
      00264B 46               [12] 6762 	orl	a,@r0
      00264C F6               [12] 6763 	mov	@r0,a
      00264D 09               [12] 6764 	inc	r1
      00264E E7               [12] 6765 	mov	a,@r1
      00264F 08               [12] 6766 	inc	r0
      002650 46               [12] 6767 	orl	a,@r0
      002651 F6               [12] 6768 	mov	@r0,a
      002652 09               [12] 6769 	inc	r1
      002653 E7               [12] 6770 	mov	a,@r1
      002654 08               [12] 6771 	inc	r0
      002655 46               [12] 6772 	orl	a,@r0
      002656 F6               [12] 6773 	mov	@r0,a
                                   6774 ;	calc.c:261: (void)stack_push(ctx->ps, d1);
      002657 8A 82            [24] 6775 	mov	dpl,r2
      002659 8B 83            [24] 6776 	mov	dph,r3
      00265B 8C F0            [24] 6777 	mov	b,r4
      00265D 12r00r00         [24] 6778 	lcall	__gptrget
      002660 FA               [12] 6779 	mov	r2,a
      002661 A3               [24] 6780 	inc	dptr
      002662 12r00r00         [24] 6781 	lcall	__gptrget
      002665 FB               [12] 6782 	mov	r3,a
      002666 A3               [24] 6783 	inc	dptr
      002667 12r00r00         [24] 6784 	lcall	__gptrget
      00266A FC               [12] 6785 	mov	r4,a
      00266B E5*00            [12] 6786 	mov	a,_bp
      00266D 24 19            [12] 6787 	add	a,#0x19
      00266F F8               [12] 6788 	mov	r0,a
      002670 E6               [12] 6789 	mov	a,@r0
      002671 C0 E0            [24] 6790 	push	acc
      002673 08               [12] 6791 	inc	r0
      002674 E6               [12] 6792 	mov	a,@r0
      002675 C0 E0            [24] 6793 	push	acc
      002677 08               [12] 6794 	inc	r0
      002678 E6               [12] 6795 	mov	a,@r0
      002679 C0 E0            [24] 6796 	push	acc
      00267B 08               [12] 6797 	inc	r0
      00267C E6               [12] 6798 	mov	a,@r0
      00267D C0 E0            [24] 6799 	push	acc
      00267F 8A 82            [24] 6800 	mov	dpl,r2
      002681 8B 83            [24] 6801 	mov	dph,r3
      002683 8C F0            [24] 6802 	mov	b,r4
      002685 12r00r00         [24] 6803 	lcall	_stack_push
      002688 E5 81            [12] 6804 	mov	a,sp
      00268A 24 FC            [12] 6805 	add	a,#0xfc
      00268C F5 81            [12] 6806 	mov	sp,a
                                   6807 ;	calc.c:263: break;
      00268E 02r2Er65         [24] 6808 	ljmp	00249$
                                   6809 ;	calc.c:264: case '^':
      002691                       6810 00216$:
                                   6811 ;	calc.c:265: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      002691 E5*00            [12] 6812 	mov	a,_bp
      002693 24 15            [12] 6813 	add	a,#0x15
      002695 FF               [12] 6814 	mov	r7,a
      002696 E5*00            [12] 6815 	mov	a,_bp
      002698 24 0E            [12] 6816 	add	a,#0x0e
      00269A F8               [12] 6817 	mov	r0,a
      00269B A6 07            [24] 6818 	mov	@r0,ar7
      00269D 08               [12] 6819 	inc	r0
      00269E 76 00            [12] 6820 	mov	@r0,#0x00
      0026A0 08               [12] 6821 	inc	r0
      0026A1 76 40            [12] 6822 	mov	@r0,#0x40
      0026A3 E5*00            [12] 6823 	mov	a,_bp
      0026A5 24 12            [12] 6824 	add	a,#0x12
      0026A7 F8               [12] 6825 	mov	r0,a
      0026A8 74 11            [12] 6826 	mov	a,#0x11
      0026AA 26               [12] 6827 	add	a,@r0
      0026AB FA               [12] 6828 	mov	r2,a
      0026AC 74 40            [12] 6829 	mov	a,#0x40
      0026AE 08               [12] 6830 	inc	r0
      0026AF 36               [12] 6831 	addc	a,@r0
      0026B0 FB               [12] 6832 	mov	r3,a
      0026B1 08               [12] 6833 	inc	r0
      0026B2 86 04            [24] 6834 	mov	ar4,@r0
      0026B4 8A 82            [24] 6835 	mov	dpl,r2
      0026B6 8B 83            [24] 6836 	mov	dph,r3
      0026B8 8C F0            [24] 6837 	mov	b,r4
      0026BA 12r00r00         [24] 6838 	lcall	__gptrget
      0026BD FD               [12] 6839 	mov	r5,a
      0026BE A3               [24] 6840 	inc	dptr
      0026BF 12r00r00         [24] 6841 	lcall	__gptrget
      0026C2 FE               [12] 6842 	mov	r6,a
      0026C3 A3               [24] 6843 	inc	dptr
      0026C4 12r00r00         [24] 6844 	lcall	__gptrget
      0026C7 FF               [12] 6845 	mov	r7,a
      0026C8 C0 04            [24] 6846 	push	ar4
      0026CA C0 03            [24] 6847 	push	ar3
      0026CC C0 02            [24] 6848 	push	ar2
      0026CE E5*00            [12] 6849 	mov	a,_bp
      0026D0 24 0E            [12] 6850 	add	a,#0x0e
      0026D2 F8               [12] 6851 	mov	r0,a
      0026D3 E6               [12] 6852 	mov	a,@r0
      0026D4 C0 E0            [24] 6853 	push	acc
      0026D6 08               [12] 6854 	inc	r0
      0026D7 E6               [12] 6855 	mov	a,@r0
      0026D8 C0 E0            [24] 6856 	push	acc
      0026DA 08               [12] 6857 	inc	r0
      0026DB E6               [12] 6858 	mov	a,@r0
      0026DC C0 E0            [24] 6859 	push	acc
      0026DE 8D 82            [24] 6860 	mov	dpl,r5
      0026E0 8E 83            [24] 6861 	mov	dph,r6
      0026E2 8F F0            [24] 6862 	mov	b,r7
      0026E4 12r00r00         [24] 6863 	lcall	_stack_pop
      0026E7 AE 82            [24] 6864 	mov	r6,dpl
      0026E9 AF 83            [24] 6865 	mov	r7,dph
      0026EB 15 81            [12] 6866 	dec	sp
      0026ED 15 81            [12] 6867 	dec	sp
      0026EF 15 81            [12] 6868 	dec	sp
      0026F1 D0 02            [24] 6869 	pop	ar2
      0026F3 D0 03            [24] 6870 	pop	ar3
      0026F5 D0 04            [24] 6871 	pop	ar4
      0026F7 EE               [12] 6872 	mov	a,r6
      0026F8 4F               [12] 6873 	orl	a,r7
      0026F9 70 31            [24] 6874 	jnz	00221$
      0026FB 7Dr4E            [12] 6875 	mov	r5,#___str_10
      0026FD 7Cs00            [12] 6876 	mov	r4,#(___str_10 >> 8)
      0026FF 7B 80            [12] 6877 	mov	r3,#0x80
                                   6878 ;	calc.c:20: return;
      002701                       6879 00474$:
                                   6880 ;	calc.c:18: for (; *s; s++) putchar(*s);
      002701 8D 82            [24] 6881 	mov	dpl,r5
      002703 8C 83            [24] 6882 	mov	dph,r4
      002705 8B F0            [24] 6883 	mov	b,r3
      002707 12r00r00         [24] 6884 	lcall	__gptrget
      00270A FF               [12] 6885 	mov	r7,a
      00270B 70 03            [24] 6886 	jnz	01378$
      00270D 02r2Er65         [24] 6887 	ljmp	00249$
      002710                       6888 01378$:
      002710 7E 00            [12] 6889 	mov	r6,#0x00
      002712 8F 82            [24] 6890 	mov	dpl,r7
      002714 8E 83            [24] 6891 	mov	dph,r6
      002716 C0 05            [24] 6892 	push	ar5
      002718 C0 04            [24] 6893 	push	ar4
      00271A C0 03            [24] 6894 	push	ar3
      00271C 12r00r00         [24] 6895 	lcall	_putchar
      00271F D0 03            [24] 6896 	pop	ar3
      002721 D0 04            [24] 6897 	pop	ar4
      002723 D0 05            [24] 6898 	pop	ar5
      002725 0D               [12] 6899 	inc	r5
                                   6900 ;	calc.c:265: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      002726 BD 00 D8         [24] 6901 	cjne	r5,#0x00,00474$
      002729 0C               [12] 6902 	inc	r4
      00272A 80 D5            [24] 6903 	sjmp	00474$
      00272C                       6904 00221$:
                                   6905 ;	calc.c:266: else if (!stack_pop(ctx->ps, &d1)) {
      00272C E5*00            [12] 6906 	mov	a,_bp
      00272E 24 19            [12] 6907 	add	a,#0x19
      002730 FF               [12] 6908 	mov	r7,a
      002731 E5*00            [12] 6909 	mov	a,_bp
      002733 24 0E            [12] 6910 	add	a,#0x0e
      002735 F8               [12] 6911 	mov	r0,a
      002736 A6 07            [24] 6912 	mov	@r0,ar7
      002738 08               [12] 6913 	inc	r0
      002739 76 00            [12] 6914 	mov	@r0,#0x00
      00273B 08               [12] 6915 	inc	r0
      00273C 76 40            [12] 6916 	mov	@r0,#0x40
      00273E 8A 82            [24] 6917 	mov	dpl,r2
      002740 8B 83            [24] 6918 	mov	dph,r3
      002742 8C F0            [24] 6919 	mov	b,r4
      002744 12r00r00         [24] 6920 	lcall	__gptrget
      002747 FD               [12] 6921 	mov	r5,a
      002748 A3               [24] 6922 	inc	dptr
      002749 12r00r00         [24] 6923 	lcall	__gptrget
      00274C FE               [12] 6924 	mov	r6,a
      00274D A3               [24] 6925 	inc	dptr
      00274E 12r00r00         [24] 6926 	lcall	__gptrget
      002751 FF               [12] 6927 	mov	r7,a
      002752 C0 04            [24] 6928 	push	ar4
      002754 C0 03            [24] 6929 	push	ar3
      002756 C0 02            [24] 6930 	push	ar2
      002758 E5*00            [12] 6931 	mov	a,_bp
      00275A 24 0E            [12] 6932 	add	a,#0x0e
      00275C F8               [12] 6933 	mov	r0,a
      00275D E6               [12] 6934 	mov	a,@r0
      00275E C0 E0            [24] 6935 	push	acc
      002760 08               [12] 6936 	inc	r0
      002761 E6               [12] 6937 	mov	a,@r0
      002762 C0 E0            [24] 6938 	push	acc
      002764 08               [12] 6939 	inc	r0
      002765 E6               [12] 6940 	mov	a,@r0
      002766 C0 E0            [24] 6941 	push	acc
      002768 8D 82            [24] 6942 	mov	dpl,r5
      00276A 8E 83            [24] 6943 	mov	dph,r6
      00276C 8F F0            [24] 6944 	mov	b,r7
      00276E 12r00r00         [24] 6945 	lcall	_stack_pop
      002771 AE 82            [24] 6946 	mov	r6,dpl
      002773 AF 83            [24] 6947 	mov	r7,dph
      002775 15 81            [12] 6948 	dec	sp
      002777 15 81            [12] 6949 	dec	sp
      002779 15 81            [12] 6950 	dec	sp
      00277B D0 02            [24] 6951 	pop	ar2
      00277D D0 03            [24] 6952 	pop	ar3
      00277F D0 04            [24] 6953 	pop	ar4
      002781 EE               [12] 6954 	mov	a,r6
      002782 4F               [12] 6955 	orl	a,r7
      002783 70 68            [24] 6956 	jnz	00218$
                                   6957 ;	calc.c:267: (void)stack_push(ctx->ps, d0);
      002785 8A 82            [24] 6958 	mov	dpl,r2
      002787 8B 83            [24] 6959 	mov	dph,r3
      002789 8C F0            [24] 6960 	mov	b,r4
      00278B 12r00r00         [24] 6961 	lcall	__gptrget
      00278E FD               [12] 6962 	mov	r5,a
      00278F A3               [24] 6963 	inc	dptr
      002790 12r00r00         [24] 6964 	lcall	__gptrget
      002793 FE               [12] 6965 	mov	r6,a
      002794 A3               [24] 6966 	inc	dptr
      002795 12r00r00         [24] 6967 	lcall	__gptrget
      002798 FF               [12] 6968 	mov	r7,a
      002799 E5*00            [12] 6969 	mov	a,_bp
      00279B 24 15            [12] 6970 	add	a,#0x15
      00279D F8               [12] 6971 	mov	r0,a
      00279E E6               [12] 6972 	mov	a,@r0
      00279F C0 E0            [24] 6973 	push	acc
      0027A1 08               [12] 6974 	inc	r0
      0027A2 E6               [12] 6975 	mov	a,@r0
      0027A3 C0 E0            [24] 6976 	push	acc
      0027A5 08               [12] 6977 	inc	r0
      0027A6 E6               [12] 6978 	mov	a,@r0
      0027A7 C0 E0            [24] 6979 	push	acc
      0027A9 08               [12] 6980 	inc	r0
      0027AA E6               [12] 6981 	mov	a,@r0
      0027AB C0 E0            [24] 6982 	push	acc
      0027AD 8D 82            [24] 6983 	mov	dpl,r5
      0027AF 8E 83            [24] 6984 	mov	dph,r6
      0027B1 8F F0            [24] 6985 	mov	b,r7
      0027B3 12r00r00         [24] 6986 	lcall	_stack_push
      0027B6 E5 81            [12] 6987 	mov	a,sp
      0027B8 24 FC            [12] 6988 	add	a,#0xfc
      0027BA F5 81            [12] 6989 	mov	sp,a
                                   6990 ;	calc.c:268: printstr("\r\nstack underflow\r\n");
      0027BC 7Dr4E            [12] 6991 	mov	r5,#___str_10
      0027BE 7Cs00            [12] 6992 	mov	r4,#(___str_10 >> 8)
      0027C0 7B 80            [12] 6993 	mov	r3,#0x80
                                   6994 ;	calc.c:20: return;
      0027C2                       6995 00477$:
                                   6996 ;	calc.c:18: for (; *s; s++) putchar(*s);
      0027C2 8D 82            [24] 6997 	mov	dpl,r5
      0027C4 8C 83            [24] 6998 	mov	dph,r4
      0027C6 8B F0            [24] 6999 	mov	b,r3
      0027C8 12r00r00         [24] 7000 	lcall	__gptrget
      0027CB FF               [12] 7001 	mov	r7,a
      0027CC 70 03            [24] 7002 	jnz	01381$
      0027CE 02r2Er65         [24] 7003 	ljmp	00249$
      0027D1                       7004 01381$:
      0027D1 7E 00            [12] 7005 	mov	r6,#0x00
      0027D3 8F 82            [24] 7006 	mov	dpl,r7
      0027D5 8E 83            [24] 7007 	mov	dph,r6
      0027D7 C0 05            [24] 7008 	push	ar5
      0027D9 C0 04            [24] 7009 	push	ar4
      0027DB C0 03            [24] 7010 	push	ar3
      0027DD 12r00r00         [24] 7011 	lcall	_putchar
      0027E0 D0 03            [24] 7012 	pop	ar3
      0027E2 D0 04            [24] 7013 	pop	ar4
      0027E4 D0 05            [24] 7014 	pop	ar5
      0027E6 0D               [12] 7015 	inc	r5
                                   7016 ;	calc.c:268: printstr("\r\nstack underflow\r\n");
      0027E7 BD 00 D8         [24] 7017 	cjne	r5,#0x00,00477$
      0027EA 0C               [12] 7018 	inc	r4
      0027EB 80 D5            [24] 7019 	sjmp	00477$
      0027ED                       7020 00218$:
                                   7021 ;	calc.c:270: d1 ^= d0;
      0027ED E5*00            [12] 7022 	mov	a,_bp
      0027EF 24 19            [12] 7023 	add	a,#0x19
      0027F1 F8               [12] 7024 	mov	r0,a
      0027F2 E5*00            [12] 7025 	mov	a,_bp
      0027F4 24 15            [12] 7026 	add	a,#0x15
      0027F6 F9               [12] 7027 	mov	r1,a
      0027F7 E7               [12] 7028 	mov	a,@r1
      0027F8 66               [12] 7029 	xrl	a,@r0
      0027F9 F6               [12] 7030 	mov	@r0,a
      0027FA 09               [12] 7031 	inc	r1
      0027FB E7               [12] 7032 	mov	a,@r1
      0027FC 08               [12] 7033 	inc	r0
      0027FD 66               [12] 7034 	xrl	a,@r0
      0027FE F6               [12] 7035 	mov	@r0,a
      0027FF 09               [12] 7036 	inc	r1
      002800 E7               [12] 7037 	mov	a,@r1
      002801 08               [12] 7038 	inc	r0
      002802 66               [12] 7039 	xrl	a,@r0
      002803 F6               [12] 7040 	mov	@r0,a
      002804 09               [12] 7041 	inc	r1
      002805 E7               [12] 7042 	mov	a,@r1
      002806 08               [12] 7043 	inc	r0
      002807 66               [12] 7044 	xrl	a,@r0
      002808 F6               [12] 7045 	mov	@r0,a
                                   7046 ;	calc.c:271: (void)stack_push(ctx->ps, d1);
      002809 8A 82            [24] 7047 	mov	dpl,r2
      00280B 8B 83            [24] 7048 	mov	dph,r3
      00280D 8C F0            [24] 7049 	mov	b,r4
      00280F 12r00r00         [24] 7050 	lcall	__gptrget
      002812 FA               [12] 7051 	mov	r2,a
      002813 A3               [24] 7052 	inc	dptr
      002814 12r00r00         [24] 7053 	lcall	__gptrget
      002817 FB               [12] 7054 	mov	r3,a
      002818 A3               [24] 7055 	inc	dptr
      002819 12r00r00         [24] 7056 	lcall	__gptrget
      00281C FC               [12] 7057 	mov	r4,a
      00281D E5*00            [12] 7058 	mov	a,_bp
      00281F 24 19            [12] 7059 	add	a,#0x19
      002821 F8               [12] 7060 	mov	r0,a
      002822 E6               [12] 7061 	mov	a,@r0
      002823 C0 E0            [24] 7062 	push	acc
      002825 08               [12] 7063 	inc	r0
      002826 E6               [12] 7064 	mov	a,@r0
      002827 C0 E0            [24] 7065 	push	acc
      002829 08               [12] 7066 	inc	r0
      00282A E6               [12] 7067 	mov	a,@r0
      00282B C0 E0            [24] 7068 	push	acc
      00282D 08               [12] 7069 	inc	r0
      00282E E6               [12] 7070 	mov	a,@r0
      00282F C0 E0            [24] 7071 	push	acc
      002831 8A 82            [24] 7072 	mov	dpl,r2
      002833 8B 83            [24] 7073 	mov	dph,r3
      002835 8C F0            [24] 7074 	mov	b,r4
      002837 12r00r00         [24] 7075 	lcall	_stack_push
      00283A E5 81            [12] 7076 	mov	a,sp
      00283C 24 FC            [12] 7077 	add	a,#0xfc
      00283E F5 81            [12] 7078 	mov	sp,a
                                   7079 ;	calc.c:273: break;
      002840 02r2Er65         [24] 7080 	ljmp	00249$
                                   7081 ;	calc.c:274: case '>':
      002843                       7082 00223$:
                                   7083 ;	calc.c:275: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      002843 E5*00            [12] 7084 	mov	a,_bp
      002845 24 15            [12] 7085 	add	a,#0x15
      002847 FC               [12] 7086 	mov	r4,a
      002848 7B 00            [12] 7087 	mov	r3,#0x00
      00284A 7A 40            [12] 7088 	mov	r2,#0x40
      00284C E5*00            [12] 7089 	mov	a,_bp
      00284E 24 12            [12] 7090 	add	a,#0x12
      002850 F8               [12] 7091 	mov	r0,a
      002851 E5*00            [12] 7092 	mov	a,_bp
      002853 24 0B            [12] 7093 	add	a,#0x0b
      002855 F9               [12] 7094 	mov	r1,a
      002856 74 11            [12] 7095 	mov	a,#0x11
      002858 26               [12] 7096 	add	a,@r0
      002859 F7               [12] 7097 	mov	@r1,a
      00285A 74 40            [12] 7098 	mov	a,#0x40
      00285C 08               [12] 7099 	inc	r0
      00285D 36               [12] 7100 	addc	a,@r0
      00285E 09               [12] 7101 	inc	r1
      00285F F7               [12] 7102 	mov	@r1,a
      002860 08               [12] 7103 	inc	r0
      002861 09               [12] 7104 	inc	r1
      002862 E6               [12] 7105 	mov	a,@r0
      002863 F7               [12] 7106 	mov	@r1,a
      002864 E5*00            [12] 7107 	mov	a,_bp
      002866 24 0B            [12] 7108 	add	a,#0x0b
      002868 F8               [12] 7109 	mov	r0,a
      002869 86 82            [24] 7110 	mov	dpl,@r0
      00286B 08               [12] 7111 	inc	r0
      00286C 86 83            [24] 7112 	mov	dph,@r0
      00286E 08               [12] 7113 	inc	r0
      00286F 86 F0            [24] 7114 	mov	b,@r0
      002871 12r00r00         [24] 7115 	lcall	__gptrget
      002874 FD               [12] 7116 	mov	r5,a
      002875 A3               [24] 7117 	inc	dptr
      002876 12r00r00         [24] 7118 	lcall	__gptrget
      002879 FE               [12] 7119 	mov	r6,a
      00287A A3               [24] 7120 	inc	dptr
      00287B 12r00r00         [24] 7121 	lcall	__gptrget
      00287E FF               [12] 7122 	mov	r7,a
      00287F C0 04            [24] 7123 	push	ar4
      002881 C0 03            [24] 7124 	push	ar3
      002883 C0 02            [24] 7125 	push	ar2
      002885 8D 82            [24] 7126 	mov	dpl,r5
      002887 8E 83            [24] 7127 	mov	dph,r6
      002889 8F F0            [24] 7128 	mov	b,r7
      00288B 12r00r00         [24] 7129 	lcall	_stack_pop
      00288E AE 82            [24] 7130 	mov	r6,dpl
      002890 AF 83            [24] 7131 	mov	r7,dph
      002892 15 81            [12] 7132 	dec	sp
      002894 15 81            [12] 7133 	dec	sp
      002896 15 81            [12] 7134 	dec	sp
      002898 EE               [12] 7135 	mov	a,r6
      002899 4F               [12] 7136 	orl	a,r7
      00289A 70 31            [24] 7137 	jnz	00228$
      00289C 7Dr4E            [12] 7138 	mov	r5,#___str_10
      00289E 7Cs00            [12] 7139 	mov	r4,#(___str_10 >> 8)
      0028A0 7B 80            [12] 7140 	mov	r3,#0x80
                                   7141 ;	calc.c:20: return;
      0028A2                       7142 00480$:
                                   7143 ;	calc.c:18: for (; *s; s++) putchar(*s);
      0028A2 8D 82            [24] 7144 	mov	dpl,r5
      0028A4 8C 83            [24] 7145 	mov	dph,r4
      0028A6 8B F0            [24] 7146 	mov	b,r3
      0028A8 12r00r00         [24] 7147 	lcall	__gptrget
      0028AB FF               [12] 7148 	mov	r7,a
      0028AC 70 03            [24] 7149 	jnz	01384$
      0028AE 02r2Er65         [24] 7150 	ljmp	00249$
      0028B1                       7151 01384$:
      0028B1 7E 00            [12] 7152 	mov	r6,#0x00
      0028B3 8F 82            [24] 7153 	mov	dpl,r7
      0028B5 8E 83            [24] 7154 	mov	dph,r6
      0028B7 C0 05            [24] 7155 	push	ar5
      0028B9 C0 04            [24] 7156 	push	ar4
      0028BB C0 03            [24] 7157 	push	ar3
      0028BD 12r00r00         [24] 7158 	lcall	_putchar
      0028C0 D0 03            [24] 7159 	pop	ar3
      0028C2 D0 04            [24] 7160 	pop	ar4
      0028C4 D0 05            [24] 7161 	pop	ar5
      0028C6 0D               [12] 7162 	inc	r5
                                   7163 ;	calc.c:275: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      0028C7 BD 00 D8         [24] 7164 	cjne	r5,#0x00,00480$
      0028CA 0C               [12] 7165 	inc	r4
      0028CB 80 D5            [24] 7166 	sjmp	00480$
      0028CD                       7167 00228$:
                                   7168 ;	calc.c:276: else if (!stack_pop(ctx->ps, &d1)) {
      0028CD E5*00            [12] 7169 	mov	a,_bp
      0028CF 24 19            [12] 7170 	add	a,#0x19
      0028D1 FC               [12] 7171 	mov	r4,a
      0028D2 7B 00            [12] 7172 	mov	r3,#0x00
      0028D4 7A 40            [12] 7173 	mov	r2,#0x40
      0028D6 E5*00            [12] 7174 	mov	a,_bp
      0028D8 24 0B            [12] 7175 	add	a,#0x0b
      0028DA F8               [12] 7176 	mov	r0,a
      0028DB 86 82            [24] 7177 	mov	dpl,@r0
      0028DD 08               [12] 7178 	inc	r0
      0028DE 86 83            [24] 7179 	mov	dph,@r0
      0028E0 08               [12] 7180 	inc	r0
      0028E1 86 F0            [24] 7181 	mov	b,@r0
      0028E3 12r00r00         [24] 7182 	lcall	__gptrget
      0028E6 FD               [12] 7183 	mov	r5,a
      0028E7 A3               [24] 7184 	inc	dptr
      0028E8 12r00r00         [24] 7185 	lcall	__gptrget
      0028EB FE               [12] 7186 	mov	r6,a
      0028EC A3               [24] 7187 	inc	dptr
      0028ED 12r00r00         [24] 7188 	lcall	__gptrget
      0028F0 FF               [12] 7189 	mov	r7,a
      0028F1 C0 04            [24] 7190 	push	ar4
      0028F3 C0 03            [24] 7191 	push	ar3
      0028F5 C0 02            [24] 7192 	push	ar2
      0028F7 8D 82            [24] 7193 	mov	dpl,r5
      0028F9 8E 83            [24] 7194 	mov	dph,r6
      0028FB 8F F0            [24] 7195 	mov	b,r7
      0028FD 12r00r00         [24] 7196 	lcall	_stack_pop
      002900 AE 82            [24] 7197 	mov	r6,dpl
      002902 AF 83            [24] 7198 	mov	r7,dph
      002904 15 81            [12] 7199 	dec	sp
      002906 15 81            [12] 7200 	dec	sp
      002908 15 81            [12] 7201 	dec	sp
      00290A EE               [12] 7202 	mov	a,r6
      00290B 4F               [12] 7203 	orl	a,r7
      00290C 70 6F            [24] 7204 	jnz	00225$
                                   7205 ;	calc.c:277: (void)stack_push(ctx->ps, d0);
      00290E E5*00            [12] 7206 	mov	a,_bp
      002910 24 0B            [12] 7207 	add	a,#0x0b
      002912 F8               [12] 7208 	mov	r0,a
      002913 86 82            [24] 7209 	mov	dpl,@r0
      002915 08               [12] 7210 	inc	r0
      002916 86 83            [24] 7211 	mov	dph,@r0
      002918 08               [12] 7212 	inc	r0
      002919 86 F0            [24] 7213 	mov	b,@r0
      00291B 12r00r00         [24] 7214 	lcall	__gptrget
      00291E FD               [12] 7215 	mov	r5,a
      00291F A3               [24] 7216 	inc	dptr
      002920 12r00r00         [24] 7217 	lcall	__gptrget
      002923 FE               [12] 7218 	mov	r6,a
      002924 A3               [24] 7219 	inc	dptr
      002925 12r00r00         [24] 7220 	lcall	__gptrget
      002928 FF               [12] 7221 	mov	r7,a
      002929 E5*00            [12] 7222 	mov	a,_bp
      00292B 24 15            [12] 7223 	add	a,#0x15
      00292D F8               [12] 7224 	mov	r0,a
      00292E E6               [12] 7225 	mov	a,@r0
      00292F C0 E0            [24] 7226 	push	acc
      002931 08               [12] 7227 	inc	r0
      002932 E6               [12] 7228 	mov	a,@r0
      002933 C0 E0            [24] 7229 	push	acc
      002935 08               [12] 7230 	inc	r0
      002936 E6               [12] 7231 	mov	a,@r0
      002937 C0 E0            [24] 7232 	push	acc
      002939 08               [12] 7233 	inc	r0
      00293A E6               [12] 7234 	mov	a,@r0
      00293B C0 E0            [24] 7235 	push	acc
      00293D 8D 82            [24] 7236 	mov	dpl,r5
      00293F 8E 83            [24] 7237 	mov	dph,r6
      002941 8F F0            [24] 7238 	mov	b,r7
      002943 12r00r00         [24] 7239 	lcall	_stack_push
      002946 E5 81            [12] 7240 	mov	a,sp
      002948 24 FC            [12] 7241 	add	a,#0xfc
      00294A F5 81            [12] 7242 	mov	sp,a
                                   7243 ;	calc.c:278: printstr("\r\nstack underflow\r\n");
      00294C 7Dr4E            [12] 7244 	mov	r5,#___str_10
      00294E 7Cs00            [12] 7245 	mov	r4,#(___str_10 >> 8)
      002950 7B 80            [12] 7246 	mov	r3,#0x80
                                   7247 ;	calc.c:20: return;
      002952                       7248 00483$:
                                   7249 ;	calc.c:18: for (; *s; s++) putchar(*s);
      002952 8D 82            [24] 7250 	mov	dpl,r5
      002954 8C 83            [24] 7251 	mov	dph,r4
      002956 8B F0            [24] 7252 	mov	b,r3
      002958 12r00r00         [24] 7253 	lcall	__gptrget
      00295B FF               [12] 7254 	mov	r7,a
      00295C 70 03            [24] 7255 	jnz	01387$
      00295E 02r2Er65         [24] 7256 	ljmp	00249$
      002961                       7257 01387$:
      002961 7E 00            [12] 7258 	mov	r6,#0x00
      002963 8F 82            [24] 7259 	mov	dpl,r7
      002965 8E 83            [24] 7260 	mov	dph,r6
      002967 C0 05            [24] 7261 	push	ar5
      002969 C0 04            [24] 7262 	push	ar4
      00296B C0 03            [24] 7263 	push	ar3
      00296D 12r00r00         [24] 7264 	lcall	_putchar
      002970 D0 03            [24] 7265 	pop	ar3
      002972 D0 04            [24] 7266 	pop	ar4
      002974 D0 05            [24] 7267 	pop	ar5
      002976 0D               [12] 7268 	inc	r5
                                   7269 ;	calc.c:278: printstr("\r\nstack underflow\r\n");
      002977 BD 00 D8         [24] 7270 	cjne	r5,#0x00,00483$
      00297A 0C               [12] 7271 	inc	r4
      00297B 80 D5            [24] 7272 	sjmp	00483$
      00297D                       7273 00225$:
                                   7274 ;	calc.c:280: d1 = (unsigned long)d1 >> d0;
      00297D E5*00            [12] 7275 	mov	a,_bp
      00297F 24 19            [12] 7276 	add	a,#0x19
      002981 F8               [12] 7277 	mov	r0,a
      002982 86 04            [24] 7278 	mov	ar4,@r0
      002984 08               [12] 7279 	inc	r0
      002985 86 05            [24] 7280 	mov	ar5,@r0
      002987 08               [12] 7281 	inc	r0
      002988 86 06            [24] 7282 	mov	ar6,@r0
      00298A 08               [12] 7283 	inc	r0
      00298B 86 07            [24] 7284 	mov	ar7,@r0
      00298D E5*00            [12] 7285 	mov	a,_bp
      00298F 24 15            [12] 7286 	add	a,#0x15
      002991 F8               [12] 7287 	mov	r0,a
      002992 86 F0            [24] 7288 	mov	b,@r0
      002994 05 F0            [12] 7289 	inc	b
      002996 80 0D            [24] 7290 	sjmp	01390$
      002998                       7291 01389$:
      002998 C3               [12] 7292 	clr	c
      002999 EF               [12] 7293 	mov	a,r7
      00299A 13               [12] 7294 	rrc	a
      00299B FF               [12] 7295 	mov	r7,a
      00299C EE               [12] 7296 	mov	a,r6
      00299D 13               [12] 7297 	rrc	a
      00299E FE               [12] 7298 	mov	r6,a
      00299F ED               [12] 7299 	mov	a,r5
      0029A0 13               [12] 7300 	rrc	a
      0029A1 FD               [12] 7301 	mov	r5,a
      0029A2 EC               [12] 7302 	mov	a,r4
      0029A3 13               [12] 7303 	rrc	a
      0029A4 FC               [12] 7304 	mov	r4,a
      0029A5                       7305 01390$:
      0029A5 D5 F0 F0         [24] 7306 	djnz	b,01389$
      0029A8 E5*00            [12] 7307 	mov	a,_bp
      0029AA 24 19            [12] 7308 	add	a,#0x19
      0029AC F8               [12] 7309 	mov	r0,a
      0029AD A6 04            [24] 7310 	mov	@r0,ar4
      0029AF 08               [12] 7311 	inc	r0
      0029B0 A6 05            [24] 7312 	mov	@r0,ar5
      0029B2 08               [12] 7313 	inc	r0
      0029B3 A6 06            [24] 7314 	mov	@r0,ar6
      0029B5 08               [12] 7315 	inc	r0
      0029B6 A6 07            [24] 7316 	mov	@r0,ar7
                                   7317 ;	calc.c:281: (void)stack_push(ctx->ps, d1);
      0029B8 E5*00            [12] 7318 	mov	a,_bp
      0029BA 24 0B            [12] 7319 	add	a,#0x0b
      0029BC F8               [12] 7320 	mov	r0,a
      0029BD 86 82            [24] 7321 	mov	dpl,@r0
      0029BF 08               [12] 7322 	inc	r0
      0029C0 86 83            [24] 7323 	mov	dph,@r0
      0029C2 08               [12] 7324 	inc	r0
      0029C3 86 F0            [24] 7325 	mov	b,@r0
      0029C5 12r00r00         [24] 7326 	lcall	__gptrget
      0029C8 FD               [12] 7327 	mov	r5,a
      0029C9 A3               [24] 7328 	inc	dptr
      0029CA 12r00r00         [24] 7329 	lcall	__gptrget
      0029CD FE               [12] 7330 	mov	r6,a
      0029CE A3               [24] 7331 	inc	dptr
      0029CF 12r00r00         [24] 7332 	lcall	__gptrget
      0029D2 FF               [12] 7333 	mov	r7,a
      0029D3 E5*00            [12] 7334 	mov	a,_bp
      0029D5 24 19            [12] 7335 	add	a,#0x19
      0029D7 F8               [12] 7336 	mov	r0,a
      0029D8 E6               [12] 7337 	mov	a,@r0
      0029D9 C0 E0            [24] 7338 	push	acc
      0029DB 08               [12] 7339 	inc	r0
      0029DC E6               [12] 7340 	mov	a,@r0
      0029DD C0 E0            [24] 7341 	push	acc
      0029DF 08               [12] 7342 	inc	r0
      0029E0 E6               [12] 7343 	mov	a,@r0
      0029E1 C0 E0            [24] 7344 	push	acc
      0029E3 08               [12] 7345 	inc	r0
      0029E4 E6               [12] 7346 	mov	a,@r0
      0029E5 C0 E0            [24] 7347 	push	acc
      0029E7 8D 82            [24] 7348 	mov	dpl,r5
      0029E9 8E 83            [24] 7349 	mov	dph,r6
      0029EB 8F F0            [24] 7350 	mov	b,r7
      0029ED 12r00r00         [24] 7351 	lcall	_stack_push
      0029F0 E5 81            [12] 7352 	mov	a,sp
      0029F2 24 FC            [12] 7353 	add	a,#0xfc
      0029F4 F5 81            [12] 7354 	mov	sp,a
                                   7355 ;	calc.c:283: break;
      0029F6 02r2Er65         [24] 7356 	ljmp	00249$
                                   7357 ;	calc.c:284: case ']':
      0029F9                       7358 00230$:
                                   7359 ;	calc.c:285: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      0029F9 E5*00            [12] 7360 	mov	a,_bp
      0029FB 24 15            [12] 7361 	add	a,#0x15
      0029FD FF               [12] 7362 	mov	r7,a
      0029FE E5*00            [12] 7363 	mov	a,_bp
      002A00 24 0E            [12] 7364 	add	a,#0x0e
      002A02 F8               [12] 7365 	mov	r0,a
      002A03 A6 07            [24] 7366 	mov	@r0,ar7
      002A05 08               [12] 7367 	inc	r0
      002A06 76 00            [12] 7368 	mov	@r0,#0x00
      002A08 08               [12] 7369 	inc	r0
      002A09 76 40            [12] 7370 	mov	@r0,#0x40
      002A0B E5*00            [12] 7371 	mov	a,_bp
      002A0D 24 12            [12] 7372 	add	a,#0x12
      002A0F F8               [12] 7373 	mov	r0,a
      002A10 74 11            [12] 7374 	mov	a,#0x11
      002A12 26               [12] 7375 	add	a,@r0
      002A13 FA               [12] 7376 	mov	r2,a
      002A14 74 40            [12] 7377 	mov	a,#0x40
      002A16 08               [12] 7378 	inc	r0
      002A17 36               [12] 7379 	addc	a,@r0
      002A18 FB               [12] 7380 	mov	r3,a
      002A19 08               [12] 7381 	inc	r0
      002A1A 86 04            [24] 7382 	mov	ar4,@r0
      002A1C 8A 82            [24] 7383 	mov	dpl,r2
      002A1E 8B 83            [24] 7384 	mov	dph,r3
      002A20 8C F0            [24] 7385 	mov	b,r4
      002A22 12r00r00         [24] 7386 	lcall	__gptrget
      002A25 FD               [12] 7387 	mov	r5,a
      002A26 A3               [24] 7388 	inc	dptr
      002A27 12r00r00         [24] 7389 	lcall	__gptrget
      002A2A FE               [12] 7390 	mov	r6,a
      002A2B A3               [24] 7391 	inc	dptr
      002A2C 12r00r00         [24] 7392 	lcall	__gptrget
      002A2F FF               [12] 7393 	mov	r7,a
      002A30 C0 04            [24] 7394 	push	ar4
      002A32 C0 03            [24] 7395 	push	ar3
      002A34 C0 02            [24] 7396 	push	ar2
      002A36 E5*00            [12] 7397 	mov	a,_bp
      002A38 24 0E            [12] 7398 	add	a,#0x0e
      002A3A F8               [12] 7399 	mov	r0,a
      002A3B E6               [12] 7400 	mov	a,@r0
      002A3C C0 E0            [24] 7401 	push	acc
      002A3E 08               [12] 7402 	inc	r0
      002A3F E6               [12] 7403 	mov	a,@r0
      002A40 C0 E0            [24] 7404 	push	acc
      002A42 08               [12] 7405 	inc	r0
      002A43 E6               [12] 7406 	mov	a,@r0
      002A44 C0 E0            [24] 7407 	push	acc
      002A46 8D 82            [24] 7408 	mov	dpl,r5
      002A48 8E 83            [24] 7409 	mov	dph,r6
      002A4A 8F F0            [24] 7410 	mov	b,r7
      002A4C 12r00r00         [24] 7411 	lcall	_stack_pop
      002A4F AE 82            [24] 7412 	mov	r6,dpl
      002A51 AF 83            [24] 7413 	mov	r7,dph
      002A53 15 81            [12] 7414 	dec	sp
      002A55 15 81            [12] 7415 	dec	sp
      002A57 15 81            [12] 7416 	dec	sp
      002A59 D0 02            [24] 7417 	pop	ar2
      002A5B D0 03            [24] 7418 	pop	ar3
      002A5D D0 04            [24] 7419 	pop	ar4
      002A5F EE               [12] 7420 	mov	a,r6
      002A60 4F               [12] 7421 	orl	a,r7
      002A61 70 31            [24] 7422 	jnz	00235$
      002A63 7Dr4E            [12] 7423 	mov	r5,#___str_10
      002A65 7Cs00            [12] 7424 	mov	r4,#(___str_10 >> 8)
      002A67 7B 80            [12] 7425 	mov	r3,#0x80
                                   7426 ;	calc.c:20: return;
      002A69                       7427 00486$:
                                   7428 ;	calc.c:18: for (; *s; s++) putchar(*s);
      002A69 8D 82            [24] 7429 	mov	dpl,r5
      002A6B 8C 83            [24] 7430 	mov	dph,r4
      002A6D 8B F0            [24] 7431 	mov	b,r3
      002A6F 12r00r00         [24] 7432 	lcall	__gptrget
      002A72 FF               [12] 7433 	mov	r7,a
      002A73 70 03            [24] 7434 	jnz	01392$
      002A75 02r2Er65         [24] 7435 	ljmp	00249$
      002A78                       7436 01392$:
      002A78 7E 00            [12] 7437 	mov	r6,#0x00
      002A7A 8F 82            [24] 7438 	mov	dpl,r7
      002A7C 8E 83            [24] 7439 	mov	dph,r6
      002A7E C0 05            [24] 7440 	push	ar5
      002A80 C0 04            [24] 7441 	push	ar4
      002A82 C0 03            [24] 7442 	push	ar3
      002A84 12r00r00         [24] 7443 	lcall	_putchar
      002A87 D0 03            [24] 7444 	pop	ar3
      002A89 D0 04            [24] 7445 	pop	ar4
      002A8B D0 05            [24] 7446 	pop	ar5
      002A8D 0D               [12] 7447 	inc	r5
                                   7448 ;	calc.c:285: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      002A8E BD 00 D8         [24] 7449 	cjne	r5,#0x00,00486$
      002A91 0C               [12] 7450 	inc	r4
      002A92 80 D5            [24] 7451 	sjmp	00486$
      002A94                       7452 00235$:
                                   7453 ;	calc.c:286: else if (!stack_pop(ctx->ps, &d1)) {
      002A94 E5*00            [12] 7454 	mov	a,_bp
      002A96 24 19            [12] 7455 	add	a,#0x19
      002A98 FF               [12] 7456 	mov	r7,a
      002A99 E5*00            [12] 7457 	mov	a,_bp
      002A9B 24 0E            [12] 7458 	add	a,#0x0e
      002A9D F8               [12] 7459 	mov	r0,a
      002A9E A6 07            [24] 7460 	mov	@r0,ar7
      002AA0 08               [12] 7461 	inc	r0
      002AA1 76 00            [12] 7462 	mov	@r0,#0x00
      002AA3 08               [12] 7463 	inc	r0
      002AA4 76 40            [12] 7464 	mov	@r0,#0x40
      002AA6 8A 82            [24] 7465 	mov	dpl,r2
      002AA8 8B 83            [24] 7466 	mov	dph,r3
      002AAA 8C F0            [24] 7467 	mov	b,r4
      002AAC 12r00r00         [24] 7468 	lcall	__gptrget
      002AAF FD               [12] 7469 	mov	r5,a
      002AB0 A3               [24] 7470 	inc	dptr
      002AB1 12r00r00         [24] 7471 	lcall	__gptrget
      002AB4 FE               [12] 7472 	mov	r6,a
      002AB5 A3               [24] 7473 	inc	dptr
      002AB6 12r00r00         [24] 7474 	lcall	__gptrget
      002AB9 FF               [12] 7475 	mov	r7,a
      002ABA C0 04            [24] 7476 	push	ar4
      002ABC C0 03            [24] 7477 	push	ar3
      002ABE C0 02            [24] 7478 	push	ar2
      002AC0 E5*00            [12] 7479 	mov	a,_bp
      002AC2 24 0E            [12] 7480 	add	a,#0x0e
      002AC4 F8               [12] 7481 	mov	r0,a
      002AC5 E6               [12] 7482 	mov	a,@r0
      002AC6 C0 E0            [24] 7483 	push	acc
      002AC8 08               [12] 7484 	inc	r0
      002AC9 E6               [12] 7485 	mov	a,@r0
      002ACA C0 E0            [24] 7486 	push	acc
      002ACC 08               [12] 7487 	inc	r0
      002ACD E6               [12] 7488 	mov	a,@r0
      002ACE C0 E0            [24] 7489 	push	acc
      002AD0 8D 82            [24] 7490 	mov	dpl,r5
      002AD2 8E 83            [24] 7491 	mov	dph,r6
      002AD4 8F F0            [24] 7492 	mov	b,r7
      002AD6 12r00r00         [24] 7493 	lcall	_stack_pop
      002AD9 AE 82            [24] 7494 	mov	r6,dpl
      002ADB AF 83            [24] 7495 	mov	r7,dph
      002ADD 15 81            [12] 7496 	dec	sp
      002ADF 15 81            [12] 7497 	dec	sp
      002AE1 15 81            [12] 7498 	dec	sp
      002AE3 D0 02            [24] 7499 	pop	ar2
      002AE5 D0 03            [24] 7500 	pop	ar3
      002AE7 D0 04            [24] 7501 	pop	ar4
      002AE9 EE               [12] 7502 	mov	a,r6
      002AEA 4F               [12] 7503 	orl	a,r7
      002AEB 70 68            [24] 7504 	jnz	00232$
                                   7505 ;	calc.c:287: (void)stack_push(ctx->ps, d0);
      002AED 8A 82            [24] 7506 	mov	dpl,r2
      002AEF 8B 83            [24] 7507 	mov	dph,r3
      002AF1 8C F0            [24] 7508 	mov	b,r4
      002AF3 12r00r00         [24] 7509 	lcall	__gptrget
      002AF6 FD               [12] 7510 	mov	r5,a
      002AF7 A3               [24] 7511 	inc	dptr
      002AF8 12r00r00         [24] 7512 	lcall	__gptrget
      002AFB FE               [12] 7513 	mov	r6,a
      002AFC A3               [24] 7514 	inc	dptr
      002AFD 12r00r00         [24] 7515 	lcall	__gptrget
      002B00 FF               [12] 7516 	mov	r7,a
      002B01 E5*00            [12] 7517 	mov	a,_bp
      002B03 24 15            [12] 7518 	add	a,#0x15
      002B05 F8               [12] 7519 	mov	r0,a
      002B06 E6               [12] 7520 	mov	a,@r0
      002B07 C0 E0            [24] 7521 	push	acc
      002B09 08               [12] 7522 	inc	r0
      002B0A E6               [12] 7523 	mov	a,@r0
      002B0B C0 E0            [24] 7524 	push	acc
      002B0D 08               [12] 7525 	inc	r0
      002B0E E6               [12] 7526 	mov	a,@r0
      002B0F C0 E0            [24] 7527 	push	acc
      002B11 08               [12] 7528 	inc	r0
      002B12 E6               [12] 7529 	mov	a,@r0
      002B13 C0 E0            [24] 7530 	push	acc
      002B15 8D 82            [24] 7531 	mov	dpl,r5
      002B17 8E 83            [24] 7532 	mov	dph,r6
      002B19 8F F0            [24] 7533 	mov	b,r7
      002B1B 12r00r00         [24] 7534 	lcall	_stack_push
      002B1E E5 81            [12] 7535 	mov	a,sp
      002B20 24 FC            [12] 7536 	add	a,#0xfc
      002B22 F5 81            [12] 7537 	mov	sp,a
                                   7538 ;	calc.c:288: printstr("\r\nstack underflow\r\n");
      002B24 7Dr4E            [12] 7539 	mov	r5,#___str_10
      002B26 7Cs00            [12] 7540 	mov	r4,#(___str_10 >> 8)
      002B28 7B 80            [12] 7541 	mov	r3,#0x80
                                   7542 ;	calc.c:20: return;
      002B2A                       7543 00489$:
                                   7544 ;	calc.c:18: for (; *s; s++) putchar(*s);
      002B2A 8D 82            [24] 7545 	mov	dpl,r5
      002B2C 8C 83            [24] 7546 	mov	dph,r4
      002B2E 8B F0            [24] 7547 	mov	b,r3
      002B30 12r00r00         [24] 7548 	lcall	__gptrget
      002B33 FF               [12] 7549 	mov	r7,a
      002B34 70 03            [24] 7550 	jnz	01395$
      002B36 02r2Er65         [24] 7551 	ljmp	00249$
      002B39                       7552 01395$:
      002B39 7E 00            [12] 7553 	mov	r6,#0x00
      002B3B 8F 82            [24] 7554 	mov	dpl,r7
      002B3D 8E 83            [24] 7555 	mov	dph,r6
      002B3F C0 05            [24] 7556 	push	ar5
      002B41 C0 04            [24] 7557 	push	ar4
      002B43 C0 03            [24] 7558 	push	ar3
      002B45 12r00r00         [24] 7559 	lcall	_putchar
      002B48 D0 03            [24] 7560 	pop	ar3
      002B4A D0 04            [24] 7561 	pop	ar4
      002B4C D0 05            [24] 7562 	pop	ar5
      002B4E 0D               [12] 7563 	inc	r5
                                   7564 ;	calc.c:288: printstr("\r\nstack underflow\r\n");
      002B4F BD 00 D8         [24] 7565 	cjne	r5,#0x00,00489$
      002B52 0C               [12] 7566 	inc	r4
      002B53 80 D5            [24] 7567 	sjmp	00489$
      002B55                       7568 00232$:
                                   7569 ;	calc.c:290: d1 >>= d0;
      002B55 E5*00            [12] 7570 	mov	a,_bp
      002B57 24 15            [12] 7571 	add	a,#0x15
      002B59 F8               [12] 7572 	mov	r0,a
      002B5A 86 F0            [24] 7573 	mov	b,@r0
      002B5C 05 F0            [12] 7574 	inc	b
      002B5E E5*00            [12] 7575 	mov	a,_bp
      002B60 24 19            [12] 7576 	add	a,#0x19
      002B62 F8               [12] 7577 	mov	r0,a
      002B63 08               [12] 7578 	inc	r0
      002B64 08               [12] 7579 	inc	r0
      002B65 08               [12] 7580 	inc	r0
      002B66 E6               [12] 7581 	mov	a,@r0
      002B67 33               [12] 7582 	rlc	a
      002B68 92 D2            [24] 7583 	mov	ov,c
      002B6A 18               [12] 7584 	dec	r0
      002B6B 18               [12] 7585 	dec	r0
      002B6C 18               [12] 7586 	dec	r0
      002B6D 80 14            [24] 7587 	sjmp	01398$
      002B6F                       7588 01397$:
      002B6F A2 D2            [12] 7589 	mov	c,ov
      002B71 08               [12] 7590 	inc	r0
      002B72 08               [12] 7591 	inc	r0
      002B73 08               [12] 7592 	inc	r0
      002B74 E6               [12] 7593 	mov	a,@r0
      002B75 13               [12] 7594 	rrc	a
      002B76 F6               [12] 7595 	mov	@r0,a
      002B77 18               [12] 7596 	dec	r0
      002B78 E6               [12] 7597 	mov	a,@r0
      002B79 13               [12] 7598 	rrc	a
      002B7A F6               [12] 7599 	mov	@r0,a
      002B7B 18               [12] 7600 	dec	r0
      002B7C E6               [12] 7601 	mov	a,@r0
      002B7D 13               [12] 7602 	rrc	a
      002B7E F6               [12] 7603 	mov	@r0,a
      002B7F 18               [12] 7604 	dec	r0
      002B80 E6               [12] 7605 	mov	a,@r0
      002B81 13               [12] 7606 	rrc	a
      002B82 F6               [12] 7607 	mov	@r0,a
      002B83                       7608 01398$:
      002B83 D5 F0 E9         [24] 7609 	djnz	b,01397$
                                   7610 ;	calc.c:291: (void)stack_push(ctx->ps, d1);
      002B86 8A 82            [24] 7611 	mov	dpl,r2
      002B88 8B 83            [24] 7612 	mov	dph,r3
      002B8A 8C F0            [24] 7613 	mov	b,r4
      002B8C 12r00r00         [24] 7614 	lcall	__gptrget
      002B8F FA               [12] 7615 	mov	r2,a
      002B90 A3               [24] 7616 	inc	dptr
      002B91 12r00r00         [24] 7617 	lcall	__gptrget
      002B94 FB               [12] 7618 	mov	r3,a
      002B95 A3               [24] 7619 	inc	dptr
      002B96 12r00r00         [24] 7620 	lcall	__gptrget
      002B99 FC               [12] 7621 	mov	r4,a
      002B9A E5*00            [12] 7622 	mov	a,_bp
      002B9C 24 19            [12] 7623 	add	a,#0x19
      002B9E F8               [12] 7624 	mov	r0,a
      002B9F E6               [12] 7625 	mov	a,@r0
      002BA0 C0 E0            [24] 7626 	push	acc
      002BA2 08               [12] 7627 	inc	r0
      002BA3 E6               [12] 7628 	mov	a,@r0
      002BA4 C0 E0            [24] 7629 	push	acc
      002BA6 08               [12] 7630 	inc	r0
      002BA7 E6               [12] 7631 	mov	a,@r0
      002BA8 C0 E0            [24] 7632 	push	acc
      002BAA 08               [12] 7633 	inc	r0
      002BAB E6               [12] 7634 	mov	a,@r0
      002BAC C0 E0            [24] 7635 	push	acc
      002BAE 8A 82            [24] 7636 	mov	dpl,r2
      002BB0 8B 83            [24] 7637 	mov	dph,r3
      002BB2 8C F0            [24] 7638 	mov	b,r4
      002BB4 12r00r00         [24] 7639 	lcall	_stack_push
      002BB7 E5 81            [12] 7640 	mov	a,sp
      002BB9 24 FC            [12] 7641 	add	a,#0xfc
      002BBB F5 81            [12] 7642 	mov	sp,a
                                   7643 ;	calc.c:293: break;
      002BBD 02r2Er65         [24] 7644 	ljmp	00249$
                                   7645 ;	calc.c:294: case '<':
      002BC0                       7646 00237$:
                                   7647 ;	calc.c:295: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      002BC0 E5*00            [12] 7648 	mov	a,_bp
      002BC2 24 15            [12] 7649 	add	a,#0x15
      002BC4 FF               [12] 7650 	mov	r7,a
      002BC5 E5*00            [12] 7651 	mov	a,_bp
      002BC7 24 0E            [12] 7652 	add	a,#0x0e
      002BC9 F8               [12] 7653 	mov	r0,a
      002BCA A6 07            [24] 7654 	mov	@r0,ar7
      002BCC 08               [12] 7655 	inc	r0
      002BCD 76 00            [12] 7656 	mov	@r0,#0x00
      002BCF 08               [12] 7657 	inc	r0
      002BD0 76 40            [12] 7658 	mov	@r0,#0x40
      002BD2 E5*00            [12] 7659 	mov	a,_bp
      002BD4 24 12            [12] 7660 	add	a,#0x12
      002BD6 F8               [12] 7661 	mov	r0,a
      002BD7 74 11            [12] 7662 	mov	a,#0x11
      002BD9 26               [12] 7663 	add	a,@r0
      002BDA FA               [12] 7664 	mov	r2,a
      002BDB 74 40            [12] 7665 	mov	a,#0x40
      002BDD 08               [12] 7666 	inc	r0
      002BDE 36               [12] 7667 	addc	a,@r0
      002BDF FB               [12] 7668 	mov	r3,a
      002BE0 08               [12] 7669 	inc	r0
      002BE1 86 04            [24] 7670 	mov	ar4,@r0
      002BE3 8A 82            [24] 7671 	mov	dpl,r2
      002BE5 8B 83            [24] 7672 	mov	dph,r3
      002BE7 8C F0            [24] 7673 	mov	b,r4
      002BE9 12r00r00         [24] 7674 	lcall	__gptrget
      002BEC FD               [12] 7675 	mov	r5,a
      002BED A3               [24] 7676 	inc	dptr
      002BEE 12r00r00         [24] 7677 	lcall	__gptrget
      002BF1 FE               [12] 7678 	mov	r6,a
      002BF2 A3               [24] 7679 	inc	dptr
      002BF3 12r00r00         [24] 7680 	lcall	__gptrget
      002BF6 FF               [12] 7681 	mov	r7,a
      002BF7 C0 04            [24] 7682 	push	ar4
      002BF9 C0 03            [24] 7683 	push	ar3
      002BFB C0 02            [24] 7684 	push	ar2
      002BFD E5*00            [12] 7685 	mov	a,_bp
      002BFF 24 0E            [12] 7686 	add	a,#0x0e
      002C01 F8               [12] 7687 	mov	r0,a
      002C02 E6               [12] 7688 	mov	a,@r0
      002C03 C0 E0            [24] 7689 	push	acc
      002C05 08               [12] 7690 	inc	r0
      002C06 E6               [12] 7691 	mov	a,@r0
      002C07 C0 E0            [24] 7692 	push	acc
      002C09 08               [12] 7693 	inc	r0
      002C0A E6               [12] 7694 	mov	a,@r0
      002C0B C0 E0            [24] 7695 	push	acc
      002C0D 8D 82            [24] 7696 	mov	dpl,r5
      002C0F 8E 83            [24] 7697 	mov	dph,r6
      002C11 8F F0            [24] 7698 	mov	b,r7
      002C13 12r00r00         [24] 7699 	lcall	_stack_pop
      002C16 AE 82            [24] 7700 	mov	r6,dpl
      002C18 AF 83            [24] 7701 	mov	r7,dph
      002C1A 15 81            [12] 7702 	dec	sp
      002C1C 15 81            [12] 7703 	dec	sp
      002C1E 15 81            [12] 7704 	dec	sp
      002C20 D0 02            [24] 7705 	pop	ar2
      002C22 D0 03            [24] 7706 	pop	ar3
      002C24 D0 04            [24] 7707 	pop	ar4
      002C26 EE               [12] 7708 	mov	a,r6
      002C27 4F               [12] 7709 	orl	a,r7
      002C28 70 31            [24] 7710 	jnz	00242$
      002C2A 7Dr4E            [12] 7711 	mov	r5,#___str_10
      002C2C 7Cs00            [12] 7712 	mov	r4,#(___str_10 >> 8)
      002C2E 7B 80            [12] 7713 	mov	r3,#0x80
                                   7714 ;	calc.c:20: return;
      002C30                       7715 00492$:
                                   7716 ;	calc.c:18: for (; *s; s++) putchar(*s);
      002C30 8D 82            [24] 7717 	mov	dpl,r5
      002C32 8C 83            [24] 7718 	mov	dph,r4
      002C34 8B F0            [24] 7719 	mov	b,r3
      002C36 12r00r00         [24] 7720 	lcall	__gptrget
      002C39 FF               [12] 7721 	mov	r7,a
      002C3A 70 03            [24] 7722 	jnz	01400$
      002C3C 02r2Er65         [24] 7723 	ljmp	00249$
      002C3F                       7724 01400$:
      002C3F 7E 00            [12] 7725 	mov	r6,#0x00
      002C41 8F 82            [24] 7726 	mov	dpl,r7
      002C43 8E 83            [24] 7727 	mov	dph,r6
      002C45 C0 05            [24] 7728 	push	ar5
      002C47 C0 04            [24] 7729 	push	ar4
      002C49 C0 03            [24] 7730 	push	ar3
      002C4B 12r00r00         [24] 7731 	lcall	_putchar
      002C4E D0 03            [24] 7732 	pop	ar3
      002C50 D0 04            [24] 7733 	pop	ar4
      002C52 D0 05            [24] 7734 	pop	ar5
      002C54 0D               [12] 7735 	inc	r5
                                   7736 ;	calc.c:295: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      002C55 BD 00 D8         [24] 7737 	cjne	r5,#0x00,00492$
      002C58 0C               [12] 7738 	inc	r4
      002C59 80 D5            [24] 7739 	sjmp	00492$
      002C5B                       7740 00242$:
                                   7741 ;	calc.c:296: else if (!stack_pop(ctx->ps, &d1)) {
      002C5B E5*00            [12] 7742 	mov	a,_bp
      002C5D 24 19            [12] 7743 	add	a,#0x19
      002C5F FF               [12] 7744 	mov	r7,a
      002C60 E5*00            [12] 7745 	mov	a,_bp
      002C62 24 0E            [12] 7746 	add	a,#0x0e
      002C64 F8               [12] 7747 	mov	r0,a
      002C65 A6 07            [24] 7748 	mov	@r0,ar7
      002C67 08               [12] 7749 	inc	r0
      002C68 76 00            [12] 7750 	mov	@r0,#0x00
      002C6A 08               [12] 7751 	inc	r0
      002C6B 76 40            [12] 7752 	mov	@r0,#0x40
      002C6D 8A 82            [24] 7753 	mov	dpl,r2
      002C6F 8B 83            [24] 7754 	mov	dph,r3
      002C71 8C F0            [24] 7755 	mov	b,r4
      002C73 12r00r00         [24] 7756 	lcall	__gptrget
      002C76 FD               [12] 7757 	mov	r5,a
      002C77 A3               [24] 7758 	inc	dptr
      002C78 12r00r00         [24] 7759 	lcall	__gptrget
      002C7B FE               [12] 7760 	mov	r6,a
      002C7C A3               [24] 7761 	inc	dptr
      002C7D 12r00r00         [24] 7762 	lcall	__gptrget
      002C80 FF               [12] 7763 	mov	r7,a
      002C81 C0 04            [24] 7764 	push	ar4
      002C83 C0 03            [24] 7765 	push	ar3
      002C85 C0 02            [24] 7766 	push	ar2
      002C87 E5*00            [12] 7767 	mov	a,_bp
      002C89 24 0E            [12] 7768 	add	a,#0x0e
      002C8B F8               [12] 7769 	mov	r0,a
      002C8C E6               [12] 7770 	mov	a,@r0
      002C8D C0 E0            [24] 7771 	push	acc
      002C8F 08               [12] 7772 	inc	r0
      002C90 E6               [12] 7773 	mov	a,@r0
      002C91 C0 E0            [24] 7774 	push	acc
      002C93 08               [12] 7775 	inc	r0
      002C94 E6               [12] 7776 	mov	a,@r0
      002C95 C0 E0            [24] 7777 	push	acc
      002C97 8D 82            [24] 7778 	mov	dpl,r5
      002C99 8E 83            [24] 7779 	mov	dph,r6
      002C9B 8F F0            [24] 7780 	mov	b,r7
      002C9D 12r00r00         [24] 7781 	lcall	_stack_pop
      002CA0 AE 82            [24] 7782 	mov	r6,dpl
      002CA2 AF 83            [24] 7783 	mov	r7,dph
      002CA4 15 81            [12] 7784 	dec	sp
      002CA6 15 81            [12] 7785 	dec	sp
      002CA8 15 81            [12] 7786 	dec	sp
      002CAA D0 02            [24] 7787 	pop	ar2
      002CAC D0 03            [24] 7788 	pop	ar3
      002CAE D0 04            [24] 7789 	pop	ar4
      002CB0 EE               [12] 7790 	mov	a,r6
      002CB1 4F               [12] 7791 	orl	a,r7
      002CB2 70 68            [24] 7792 	jnz	00239$
                                   7793 ;	calc.c:297: (void)stack_push(ctx->ps, d0);
      002CB4 8A 82            [24] 7794 	mov	dpl,r2
      002CB6 8B 83            [24] 7795 	mov	dph,r3
      002CB8 8C F0            [24] 7796 	mov	b,r4
      002CBA 12r00r00         [24] 7797 	lcall	__gptrget
      002CBD FD               [12] 7798 	mov	r5,a
      002CBE A3               [24] 7799 	inc	dptr
      002CBF 12r00r00         [24] 7800 	lcall	__gptrget
      002CC2 FE               [12] 7801 	mov	r6,a
      002CC3 A3               [24] 7802 	inc	dptr
      002CC4 12r00r00         [24] 7803 	lcall	__gptrget
      002CC7 FF               [12] 7804 	mov	r7,a
      002CC8 E5*00            [12] 7805 	mov	a,_bp
      002CCA 24 15            [12] 7806 	add	a,#0x15
      002CCC F8               [12] 7807 	mov	r0,a
      002CCD E6               [12] 7808 	mov	a,@r0
      002CCE C0 E0            [24] 7809 	push	acc
      002CD0 08               [12] 7810 	inc	r0
      002CD1 E6               [12] 7811 	mov	a,@r0
      002CD2 C0 E0            [24] 7812 	push	acc
      002CD4 08               [12] 7813 	inc	r0
      002CD5 E6               [12] 7814 	mov	a,@r0
      002CD6 C0 E0            [24] 7815 	push	acc
      002CD8 08               [12] 7816 	inc	r0
      002CD9 E6               [12] 7817 	mov	a,@r0
      002CDA C0 E0            [24] 7818 	push	acc
      002CDC 8D 82            [24] 7819 	mov	dpl,r5
      002CDE 8E 83            [24] 7820 	mov	dph,r6
      002CE0 8F F0            [24] 7821 	mov	b,r7
      002CE2 12r00r00         [24] 7822 	lcall	_stack_push
      002CE5 E5 81            [12] 7823 	mov	a,sp
      002CE7 24 FC            [12] 7824 	add	a,#0xfc
      002CE9 F5 81            [12] 7825 	mov	sp,a
                                   7826 ;	calc.c:298: printstr("\r\nstack underflow\r\n");
      002CEB 7Dr4E            [12] 7827 	mov	r5,#___str_10
      002CED 7Cs00            [12] 7828 	mov	r4,#(___str_10 >> 8)
      002CEF 7B 80            [12] 7829 	mov	r3,#0x80
                                   7830 ;	calc.c:20: return;
      002CF1                       7831 00495$:
                                   7832 ;	calc.c:18: for (; *s; s++) putchar(*s);
      002CF1 8D 82            [24] 7833 	mov	dpl,r5
      002CF3 8C 83            [24] 7834 	mov	dph,r4
      002CF5 8B F0            [24] 7835 	mov	b,r3
      002CF7 12r00r00         [24] 7836 	lcall	__gptrget
      002CFA FF               [12] 7837 	mov	r7,a
      002CFB 70 03            [24] 7838 	jnz	01403$
      002CFD 02r2Er65         [24] 7839 	ljmp	00249$
      002D00                       7840 01403$:
      002D00 7E 00            [12] 7841 	mov	r6,#0x00
      002D02 8F 82            [24] 7842 	mov	dpl,r7
      002D04 8E 83            [24] 7843 	mov	dph,r6
      002D06 C0 05            [24] 7844 	push	ar5
      002D08 C0 04            [24] 7845 	push	ar4
      002D0A C0 03            [24] 7846 	push	ar3
      002D0C 12r00r00         [24] 7847 	lcall	_putchar
      002D0F D0 03            [24] 7848 	pop	ar3
      002D11 D0 04            [24] 7849 	pop	ar4
      002D13 D0 05            [24] 7850 	pop	ar5
      002D15 0D               [12] 7851 	inc	r5
                                   7852 ;	calc.c:298: printstr("\r\nstack underflow\r\n");
      002D16 BD 00 D8         [24] 7853 	cjne	r5,#0x00,00495$
      002D19 0C               [12] 7854 	inc	r4
      002D1A 80 D5            [24] 7855 	sjmp	00495$
      002D1C                       7856 00239$:
                                   7857 ;	calc.c:300: d1 <<= d0;
      002D1C E5*00            [12] 7858 	mov	a,_bp
      002D1E 24 15            [12] 7859 	add	a,#0x15
      002D20 F8               [12] 7860 	mov	r0,a
      002D21 86 F0            [24] 7861 	mov	b,@r0
      002D23 05 F0            [12] 7862 	inc	b
      002D25 E5*00            [12] 7863 	mov	a,_bp
      002D27 24 19            [12] 7864 	add	a,#0x19
      002D29 F8               [12] 7865 	mov	r0,a
      002D2A 80 12            [24] 7866 	sjmp	01406$
      002D2C                       7867 01405$:
      002D2C E6               [12] 7868 	mov	a,@r0
      002D2D 26               [12] 7869 	add	a,@r0
      002D2E F6               [12] 7870 	mov	@r0,a
      002D2F 08               [12] 7871 	inc	r0
      002D30 E6               [12] 7872 	mov	a,@r0
      002D31 33               [12] 7873 	rlc	a
      002D32 F6               [12] 7874 	mov	@r0,a
      002D33 08               [12] 7875 	inc	r0
      002D34 E6               [12] 7876 	mov	a,@r0
      002D35 33               [12] 7877 	rlc	a
      002D36 F6               [12] 7878 	mov	@r0,a
      002D37 08               [12] 7879 	inc	r0
      002D38 E6               [12] 7880 	mov	a,@r0
      002D39 33               [12] 7881 	rlc	a
      002D3A F6               [12] 7882 	mov	@r0,a
      002D3B 18               [12] 7883 	dec	r0
      002D3C 18               [12] 7884 	dec	r0
      002D3D 18               [12] 7885 	dec	r0
      002D3E                       7886 01406$:
      002D3E D5 F0 EB         [24] 7887 	djnz	b,01405$
                                   7888 ;	calc.c:301: (void)stack_push(ctx->ps, d1);
      002D41 8A 82            [24] 7889 	mov	dpl,r2
      002D43 8B 83            [24] 7890 	mov	dph,r3
      002D45 8C F0            [24] 7891 	mov	b,r4
      002D47 12r00r00         [24] 7892 	lcall	__gptrget
      002D4A FA               [12] 7893 	mov	r2,a
      002D4B A3               [24] 7894 	inc	dptr
      002D4C 12r00r00         [24] 7895 	lcall	__gptrget
      002D4F FB               [12] 7896 	mov	r3,a
      002D50 A3               [24] 7897 	inc	dptr
      002D51 12r00r00         [24] 7898 	lcall	__gptrget
      002D54 FC               [12] 7899 	mov	r4,a
      002D55 E5*00            [12] 7900 	mov	a,_bp
      002D57 24 19            [12] 7901 	add	a,#0x19
      002D59 F8               [12] 7902 	mov	r0,a
      002D5A E6               [12] 7903 	mov	a,@r0
      002D5B C0 E0            [24] 7904 	push	acc
      002D5D 08               [12] 7905 	inc	r0
      002D5E E6               [12] 7906 	mov	a,@r0
      002D5F C0 E0            [24] 7907 	push	acc
      002D61 08               [12] 7908 	inc	r0
      002D62 E6               [12] 7909 	mov	a,@r0
      002D63 C0 E0            [24] 7910 	push	acc
      002D65 08               [12] 7911 	inc	r0
      002D66 E6               [12] 7912 	mov	a,@r0
      002D67 C0 E0            [24] 7913 	push	acc
      002D69 8A 82            [24] 7914 	mov	dpl,r2
      002D6B 8B 83            [24] 7915 	mov	dph,r3
      002D6D 8C F0            [24] 7916 	mov	b,r4
      002D6F 12r00r00         [24] 7917 	lcall	_stack_push
      002D72 E5 81            [12] 7918 	mov	a,sp
      002D74 24 FC            [12] 7919 	add	a,#0xfc
      002D76 F5 81            [12] 7920 	mov	sp,a
                                   7921 ;	calc.c:303: break;
      002D78 02r2Er65         [24] 7922 	ljmp	00249$
                                   7923 ;	calc.c:304: case '~':
      002D7B                       7924 00244$:
                                   7925 ;	calc.c:305: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      002D7B E5*00            [12] 7926 	mov	a,_bp
      002D7D 24 15            [12] 7927 	add	a,#0x15
      002D7F FF               [12] 7928 	mov	r7,a
      002D80 E5*00            [12] 7929 	mov	a,_bp
      002D82 24 0E            [12] 7930 	add	a,#0x0e
      002D84 F8               [12] 7931 	mov	r0,a
      002D85 A6 07            [24] 7932 	mov	@r0,ar7
      002D87 08               [12] 7933 	inc	r0
      002D88 76 00            [12] 7934 	mov	@r0,#0x00
      002D8A 08               [12] 7935 	inc	r0
      002D8B 76 40            [12] 7936 	mov	@r0,#0x40
      002D8D E5*00            [12] 7937 	mov	a,_bp
      002D8F 24 12            [12] 7938 	add	a,#0x12
      002D91 F8               [12] 7939 	mov	r0,a
      002D92 74 11            [12] 7940 	mov	a,#0x11
      002D94 26               [12] 7941 	add	a,@r0
      002D95 FA               [12] 7942 	mov	r2,a
      002D96 74 40            [12] 7943 	mov	a,#0x40
      002D98 08               [12] 7944 	inc	r0
      002D99 36               [12] 7945 	addc	a,@r0
      002D9A FB               [12] 7946 	mov	r3,a
      002D9B 08               [12] 7947 	inc	r0
      002D9C 86 04            [24] 7948 	mov	ar4,@r0
      002D9E 8A 82            [24] 7949 	mov	dpl,r2
      002DA0 8B 83            [24] 7950 	mov	dph,r3
      002DA2 8C F0            [24] 7951 	mov	b,r4
      002DA4 12r00r00         [24] 7952 	lcall	__gptrget
      002DA7 FD               [12] 7953 	mov	r5,a
      002DA8 A3               [24] 7954 	inc	dptr
      002DA9 12r00r00         [24] 7955 	lcall	__gptrget
      002DAC FE               [12] 7956 	mov	r6,a
      002DAD A3               [24] 7957 	inc	dptr
      002DAE 12r00r00         [24] 7958 	lcall	__gptrget
      002DB1 FF               [12] 7959 	mov	r7,a
      002DB2 C0 04            [24] 7960 	push	ar4
      002DB4 C0 03            [24] 7961 	push	ar3
      002DB6 C0 02            [24] 7962 	push	ar2
      002DB8 E5*00            [12] 7963 	mov	a,_bp
      002DBA 24 0E            [12] 7964 	add	a,#0x0e
      002DBC F8               [12] 7965 	mov	r0,a
      002DBD E6               [12] 7966 	mov	a,@r0
      002DBE C0 E0            [24] 7967 	push	acc
      002DC0 08               [12] 7968 	inc	r0
      002DC1 E6               [12] 7969 	mov	a,@r0
      002DC2 C0 E0            [24] 7970 	push	acc
      002DC4 08               [12] 7971 	inc	r0
      002DC5 E6               [12] 7972 	mov	a,@r0
      002DC6 C0 E0            [24] 7973 	push	acc
      002DC8 8D 82            [24] 7974 	mov	dpl,r5
      002DCA 8E 83            [24] 7975 	mov	dph,r6
      002DCC 8F F0            [24] 7976 	mov	b,r7
      002DCE 12r00r00         [24] 7977 	lcall	_stack_pop
      002DD1 AE 82            [24] 7978 	mov	r6,dpl
      002DD3 AF 83            [24] 7979 	mov	r7,dph
      002DD5 15 81            [12] 7980 	dec	sp
      002DD7 15 81            [12] 7981 	dec	sp
      002DD9 15 81            [12] 7982 	dec	sp
      002DDB D0 02            [24] 7983 	pop	ar2
      002DDD D0 03            [24] 7984 	pop	ar3
      002DDF D0 04            [24] 7985 	pop	ar4
      002DE1 EE               [12] 7986 	mov	a,r6
      002DE2 4F               [12] 7987 	orl	a,r7
      002DE3 70 2E            [24] 7988 	jnz	00246$
      002DE5 7Dr4E            [12] 7989 	mov	r5,#___str_10
      002DE7 7Cs00            [12] 7990 	mov	r4,#(___str_10 >> 8)
      002DE9 7B 80            [12] 7991 	mov	r3,#0x80
                                   7992 ;	calc.c:20: return;
      002DEB                       7993 00498$:
                                   7994 ;	calc.c:18: for (; *s; s++) putchar(*s);
      002DEB 8D 82            [24] 7995 	mov	dpl,r5
      002DED 8C 83            [24] 7996 	mov	dph,r4
      002DEF 8B F0            [24] 7997 	mov	b,r3
      002DF1 12r00r00         [24] 7998 	lcall	__gptrget
      002DF4 FF               [12] 7999 	mov	r7,a
      002DF5 60 6E            [24] 8000 	jz	00249$
      002DF7 7E 00            [12] 8001 	mov	r6,#0x00
      002DF9 8F 82            [24] 8002 	mov	dpl,r7
      002DFB 8E 83            [24] 8003 	mov	dph,r6
      002DFD C0 05            [24] 8004 	push	ar5
      002DFF C0 04            [24] 8005 	push	ar4
      002E01 C0 03            [24] 8006 	push	ar3
      002E03 12r00r00         [24] 8007 	lcall	_putchar
      002E06 D0 03            [24] 8008 	pop	ar3
      002E08 D0 04            [24] 8009 	pop	ar4
      002E0A D0 05            [24] 8010 	pop	ar5
      002E0C 0D               [12] 8011 	inc	r5
                                   8012 ;	calc.c:305: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      002E0D BD 00 DB         [24] 8013 	cjne	r5,#0x00,00498$
      002E10 0C               [12] 8014 	inc	r4
      002E11 80 D8            [24] 8015 	sjmp	00498$
      002E13                       8016 00246$:
                                   8017 ;	calc.c:307: d0 = ~d0;
      002E13 E5*00            [12] 8018 	mov	a,_bp
      002E15 24 15            [12] 8019 	add	a,#0x15
      002E17 F8               [12] 8020 	mov	r0,a
      002E18 E6               [12] 8021 	mov	a,@r0
      002E19 F4               [12] 8022 	cpl	a
      002E1A F6               [12] 8023 	mov	@r0,a
      002E1B 08               [12] 8024 	inc	r0
      002E1C E6               [12] 8025 	mov	a,@r0
      002E1D F4               [12] 8026 	cpl	a
      002E1E F6               [12] 8027 	mov	@r0,a
      002E1F 08               [12] 8028 	inc	r0
      002E20 E6               [12] 8029 	mov	a,@r0
      002E21 F4               [12] 8030 	cpl	a
      002E22 F6               [12] 8031 	mov	@r0,a
      002E23 08               [12] 8032 	inc	r0
      002E24 E6               [12] 8033 	mov	a,@r0
      002E25 F4               [12] 8034 	cpl	a
      002E26 F6               [12] 8035 	mov	@r0,a
                                   8036 ;	calc.c:308: (void)stack_push(ctx->ps, d0);
      002E27 8A 82            [24] 8037 	mov	dpl,r2
      002E29 8B 83            [24] 8038 	mov	dph,r3
      002E2B 8C F0            [24] 8039 	mov	b,r4
      002E2D 12r00r00         [24] 8040 	lcall	__gptrget
      002E30 FA               [12] 8041 	mov	r2,a
      002E31 A3               [24] 8042 	inc	dptr
      002E32 12r00r00         [24] 8043 	lcall	__gptrget
      002E35 FB               [12] 8044 	mov	r3,a
      002E36 A3               [24] 8045 	inc	dptr
      002E37 12r00r00         [24] 8046 	lcall	__gptrget
      002E3A FC               [12] 8047 	mov	r4,a
      002E3B E5*00            [12] 8048 	mov	a,_bp
      002E3D 24 15            [12] 8049 	add	a,#0x15
      002E3F F8               [12] 8050 	mov	r0,a
      002E40 E6               [12] 8051 	mov	a,@r0
      002E41 C0 E0            [24] 8052 	push	acc
      002E43 08               [12] 8053 	inc	r0
      002E44 E6               [12] 8054 	mov	a,@r0
      002E45 C0 E0            [24] 8055 	push	acc
      002E47 08               [12] 8056 	inc	r0
      002E48 E6               [12] 8057 	mov	a,@r0
      002E49 C0 E0            [24] 8058 	push	acc
      002E4B 08               [12] 8059 	inc	r0
      002E4C E6               [12] 8060 	mov	a,@r0
      002E4D C0 E0            [24] 8061 	push	acc
      002E4F 8A 82            [24] 8062 	mov	dpl,r2
      002E51 8B 83            [24] 8063 	mov	dph,r3
      002E53 8C F0            [24] 8064 	mov	b,r4
      002E55 12r00r00         [24] 8065 	lcall	_stack_push
      002E58 E5 81            [12] 8066 	mov	a,sp
      002E5A 24 FC            [12] 8067 	add	a,#0xfc
      002E5C F5 81            [12] 8068 	mov	sp,a
                                   8069 ;	calc.c:310: break;
                                   8070 ;	calc.c:311: default:
      002E5E 80 05            [24] 8071 	sjmp	00249$
      002E60                       8072 00248$:
                                   8073 ;	calc.c:312: return UNDEF;
      002E60 90 80 00         [24] 8074 	mov	dptr,#0x8000
                                   8075 ;	calc.c:313: }
      002E63 80 03            [24] 8076 	sjmp	00500$
      002E65                       8077 00249$:
                                   8078 ;	calc.c:315: return 1;
      002E65 90 00 01         [24] 8079 	mov	dptr,#0x0001
      002E68                       8080 00500$:
                                   8081 ;	calc.c:316: }
      002E68 85*00 81         [24] 8082 	mov	sp,_bp
      002E6B D0*00            [24] 8083 	pop	_bp
      002E6D 22               [24] 8084 	ret
                                   8085 ;------------------------------------------------------------
                                   8086 ;Allocation info for local variables in function 'push_acc'
                                   8087 ;------------------------------------------------------------
                                   8088 ;delta                     Allocated to stack - _bp -5
                                   8089 ;_ctx                      Allocated to stack - _bp +5
                                   8090 ;ctx                       Allocated to registers r2 r3 r4 
                                   8091 ;__1310720127              Allocated to registers 
                                   8092 ;s                         Allocated to registers r5 r6 r7 
                                   8093 ;sloc0                     Allocated to stack - _bp +1
                                   8094 ;------------------------------------------------------------
                                   8095 ;	calc.c:318: static int push_acc(void *_ctx, delta_t *delta) __reentrant {
                                   8096 ;	-----------------------------------------
                                   8097 ;	 function push_acc
                                   8098 ;	-----------------------------------------
      002E6E                       8099 _push_acc:
      002E6E C0*00            [24] 8100 	push	_bp
      002E70 E5 81            [12] 8101 	mov	a,sp
      002E72 F5*00            [12] 8102 	mov	_bp,a
      002E74 24 07            [12] 8103 	add	a,#0x07
      002E76 F5 81            [12] 8104 	mov	sp,a
      002E78 C8               [12] 8105 	xch	a,r0
      002E79 E5*00            [12] 8106 	mov	a,_bp
      002E7B 24 05            [12] 8107 	add	a,#0x05
      002E7D C8               [12] 8108 	xch	a,r0
      002E7E A6 82            [24] 8109 	mov	@r0,dpl
      002E80 08               [12] 8110 	inc	r0
      002E81 A6 83            [24] 8111 	mov	@r0,dph
      002E83 08               [12] 8112 	inc	r0
      002E84 A6 F0            [24] 8113 	mov	@r0,b
                                   8114 ;	calc.c:319: calc_ctx_t *ctx = (calc_ctx_t *)_ctx;
      002E86 E5*00            [12] 8115 	mov	a,_bp
      002E88 24 05            [12] 8116 	add	a,#0x05
      002E8A F8               [12] 8117 	mov	r0,a
      002E8B 86 02            [24] 8118 	mov	ar2,@r0
      002E8D 08               [12] 8119 	inc	r0
      002E8E 86 03            [24] 8120 	mov	ar3,@r0
      002E90 08               [12] 8121 	inc	r0
      002E91 86 04            [24] 8122 	mov	ar4,@r0
                                   8123 ;	calc.c:323: ctx->acc_valid = 0;
      002E93 74 06            [12] 8124 	mov	a,#0x06
      002E95 2A               [12] 8125 	add	a,r2
      002E96 FD               [12] 8126 	mov	r5,a
      002E97 E4               [12] 8127 	clr	a
      002E98 3B               [12] 8128 	addc	a,r3
      002E99 FE               [12] 8129 	mov	r6,a
      002E9A 8C 07            [24] 8130 	mov	ar7,r4
      002E9C 8D 82            [24] 8131 	mov	dpl,r5
      002E9E 8E 83            [24] 8132 	mov	dph,r6
      002EA0 8F F0            [24] 8133 	mov	b,r7
      002EA2 E4               [12] 8134 	clr	a
      002EA3 12r00r00         [24] 8135 	lcall	__gptrput
                                   8136 ;	calc.c:324: if (!stack_push(ctx->ps, ctx->acc)) printstr("\r\nstack overflow\r\n");
      002EA6 74 02            [12] 8137 	mov	a,#0x02
      002EA8 2A               [12] 8138 	add	a,r2
      002EA9 FF               [12] 8139 	mov	r7,a
      002EAA E4               [12] 8140 	clr	a
      002EAB 3B               [12] 8141 	addc	a,r3
      002EAC FD               [12] 8142 	mov	r5,a
      002EAD 8C 06            [24] 8143 	mov	ar6,r4
      002EAF 8F 82            [24] 8144 	mov	dpl,r7
      002EB1 8D 83            [24] 8145 	mov	dph,r5
      002EB3 8E F0            [24] 8146 	mov	b,r6
      002EB5 A8*00            [24] 8147 	mov	r0,_bp
      002EB7 08               [12] 8148 	inc	r0
      002EB8 12r00r00         [24] 8149 	lcall	__gptrget
      002EBB F6               [12] 8150 	mov	@r0,a
      002EBC A3               [24] 8151 	inc	dptr
      002EBD 12r00r00         [24] 8152 	lcall	__gptrget
      002EC0 08               [12] 8153 	inc	r0
      002EC1 F6               [12] 8154 	mov	@r0,a
      002EC2 A3               [24] 8155 	inc	dptr
      002EC3 12r00r00         [24] 8156 	lcall	__gptrget
      002EC6 08               [12] 8157 	inc	r0
      002EC7 F6               [12] 8158 	mov	@r0,a
      002EC8 A3               [24] 8159 	inc	dptr
      002EC9 12r00r00         [24] 8160 	lcall	__gptrget
      002ECC 08               [12] 8161 	inc	r0
      002ECD F6               [12] 8162 	mov	@r0,a
      002ECE 74 11            [12] 8163 	mov	a,#0x11
      002ED0 2A               [12] 8164 	add	a,r2
      002ED1 FA               [12] 8165 	mov	r2,a
      002ED2 74 40            [12] 8166 	mov	a,#0x40
      002ED4 3B               [12] 8167 	addc	a,r3
      002ED5 FB               [12] 8168 	mov	r3,a
      002ED6 8C 07            [24] 8169 	mov	ar7,r4
      002ED8 8A 82            [24] 8170 	mov	dpl,r2
      002EDA 8B 83            [24] 8171 	mov	dph,r3
      002EDC 8F F0            [24] 8172 	mov	b,r7
      002EDE 12r00r00         [24] 8173 	lcall	__gptrget
      002EE1 FA               [12] 8174 	mov	r2,a
      002EE2 A3               [24] 8175 	inc	dptr
      002EE3 12r00r00         [24] 8176 	lcall	__gptrget
      002EE6 FB               [12] 8177 	mov	r3,a
      002EE7 A3               [24] 8178 	inc	dptr
      002EE8 12r00r00         [24] 8179 	lcall	__gptrget
      002EEB FF               [12] 8180 	mov	r7,a
      002EEC A8*00            [24] 8181 	mov	r0,_bp
      002EEE 08               [12] 8182 	inc	r0
      002EEF E6               [12] 8183 	mov	a,@r0
      002EF0 C0 E0            [24] 8184 	push	acc
      002EF2 08               [12] 8185 	inc	r0
      002EF3 E6               [12] 8186 	mov	a,@r0
      002EF4 C0 E0            [24] 8187 	push	acc
      002EF6 08               [12] 8188 	inc	r0
      002EF7 E6               [12] 8189 	mov	a,@r0
      002EF8 C0 E0            [24] 8190 	push	acc
      002EFA 08               [12] 8191 	inc	r0
      002EFB E6               [12] 8192 	mov	a,@r0
      002EFC C0 E0            [24] 8193 	push	acc
      002EFE 8A 82            [24] 8194 	mov	dpl,r2
      002F00 8B 83            [24] 8195 	mov	dph,r3
      002F02 8F F0            [24] 8196 	mov	b,r7
      002F04 12r00r00         [24] 8197 	lcall	_stack_push
      002F07 AE 82            [24] 8198 	mov	r6,dpl
      002F09 AF 83            [24] 8199 	mov	r7,dph
      002F0B E5 81            [12] 8200 	mov	a,sp
      002F0D 24 FC            [12] 8201 	add	a,#0xfc
      002F0F F5 81            [12] 8202 	mov	sp,a
      002F11 EE               [12] 8203 	mov	a,r6
      002F12 4F               [12] 8204 	orl	a,r7
      002F13 70 2E            [24] 8205 	jnz	00102$
      002F15 7Dr9D            [12] 8206 	mov	r5,#___str_13
      002F17 7Es00            [12] 8207 	mov	r6,#(___str_13 >> 8)
      002F19 7F 80            [12] 8208 	mov	r7,#0x80
                                   8209 ;	calc.c:20: return;
      002F1B                       8210 00109$:
                                   8211 ;	calc.c:18: for (; *s; s++) putchar(*s);
      002F1B 8D 82            [24] 8212 	mov	dpl,r5
      002F1D 8E 83            [24] 8213 	mov	dph,r6
      002F1F 8F F0            [24] 8214 	mov	b,r7
      002F21 12r00r00         [24] 8215 	lcall	__gptrget
      002F24 FC               [12] 8216 	mov	r4,a
      002F25 60 1C            [24] 8217 	jz	00102$
      002F27 7B 00            [12] 8218 	mov	r3,#0x00
      002F29 8C 82            [24] 8219 	mov	dpl,r4
      002F2B 8B 83            [24] 8220 	mov	dph,r3
      002F2D C0 07            [24] 8221 	push	ar7
      002F2F C0 06            [24] 8222 	push	ar6
      002F31 C0 05            [24] 8223 	push	ar5
      002F33 12r00r00         [24] 8224 	lcall	_putchar
      002F36 D0 05            [24] 8225 	pop	ar5
      002F38 D0 06            [24] 8226 	pop	ar6
      002F3A D0 07            [24] 8227 	pop	ar7
      002F3C 0D               [12] 8228 	inc	r5
                                   8229 ;	calc.c:324: if (!stack_push(ctx->ps, ctx->acc)) printstr("\r\nstack overflow\r\n");
      002F3D BD 00 DB         [24] 8230 	cjne	r5,#0x00,00109$
      002F40 0E               [12] 8231 	inc	r6
      002F41 80 D8            [24] 8232 	sjmp	00109$
      002F43                       8233 00102$:
                                   8234 ;	calc.c:326: if (delta->event == EVENT_OP) return operator(_ctx, delta);
      002F43 E5*00            [12] 8235 	mov	a,_bp
      002F45 24 FB            [12] 8236 	add	a,#0xfb
      002F47 F8               [12] 8237 	mov	r0,a
      002F48 86 05            [24] 8238 	mov	ar5,@r0
      002F4A 08               [12] 8239 	inc	r0
      002F4B 86 06            [24] 8240 	mov	ar6,@r0
      002F4D 08               [12] 8241 	inc	r0
      002F4E 86 07            [24] 8242 	mov	ar7,@r0
      002F50 74 02            [12] 8243 	mov	a,#0x02
      002F52 2D               [12] 8244 	add	a,r5
      002F53 FA               [12] 8245 	mov	r2,a
      002F54 E4               [12] 8246 	clr	a
      002F55 3E               [12] 8247 	addc	a,r6
      002F56 FB               [12] 8248 	mov	r3,a
      002F57 8F 04            [24] 8249 	mov	ar4,r7
      002F59 8A 82            [24] 8250 	mov	dpl,r2
      002F5B 8B 83            [24] 8251 	mov	dph,r3
      002F5D 8C F0            [24] 8252 	mov	b,r4
      002F5F 12r00r00         [24] 8253 	lcall	__gptrget
      002F62 FA               [12] 8254 	mov	r2,a
      002F63 A3               [24] 8255 	inc	dptr
      002F64 12r00r00         [24] 8256 	lcall	__gptrget
      002F67 FB               [12] 8257 	mov	r3,a
      002F68 BA 02 29         [24] 8258 	cjne	r2,#0x02,00104$
      002F6B BB 00 26         [24] 8259 	cjne	r3,#0x00,00104$
      002F6E C0 05            [24] 8260 	push	ar5
      002F70 C0 06            [24] 8261 	push	ar6
      002F72 C0 07            [24] 8262 	push	ar7
      002F74 E5*00            [12] 8263 	mov	a,_bp
      002F76 24 05            [12] 8264 	add	a,#0x05
      002F78 F8               [12] 8265 	mov	r0,a
      002F79 86 82            [24] 8266 	mov	dpl,@r0
      002F7B 08               [12] 8267 	inc	r0
      002F7C 86 83            [24] 8268 	mov	dph,@r0
      002F7E 08               [12] 8269 	inc	r0
      002F7F 86 F0            [24] 8270 	mov	b,@r0
      002F81 12r09r0E         [24] 8271 	lcall	_operator
      002F84 AE 82            [24] 8272 	mov	r6,dpl
      002F86 AF 83            [24] 8273 	mov	r7,dph
      002F88 15 81            [12] 8274 	dec	sp
      002F8A 15 81            [12] 8275 	dec	sp
      002F8C 15 81            [12] 8276 	dec	sp
      002F8E 8E 82            [24] 8277 	mov	dpl,r6
      002F90 8F 83            [24] 8278 	mov	dph,r7
      002F92 80 03            [24] 8279 	sjmp	00111$
      002F94                       8280 00104$:
                                   8281 ;	calc.c:327: else return 1;
      002F94 90 00 01         [24] 8282 	mov	dptr,#0x0001
      002F97                       8283 00111$:
                                   8284 ;	calc.c:328: }
      002F97 85*00 81         [24] 8285 	mov	sp,_bp
      002F9A D0*00            [24] 8286 	pop	_bp
      002F9C 22               [24] 8287 	ret
                                   8288 ;------------------------------------------------------------
                                   8289 ;Allocation info for local variables in function 'reset_acc'
                                   8290 ;------------------------------------------------------------
                                   8291 ;delta                     Allocated to stack - _bp -5
                                   8292 ;_ctx                      Allocated to registers r5 r6 r7 
                                   8293 ;ctx                       Allocated to registers r5 r6 r7 
                                   8294 ;------------------------------------------------------------
                                   8295 ;	calc.c:330: static int reset_acc(void *_ctx, delta_t *delta) __reentrant {
                                   8296 ;	-----------------------------------------
                                   8297 ;	 function reset_acc
                                   8298 ;	-----------------------------------------
      002F9D                       8299 _reset_acc:
      002F9D C0*00            [24] 8300 	push	_bp
      002F9F 85 81*00         [24] 8301 	mov	_bp,sp
      002FA2 AD 82            [24] 8302 	mov	r5,dpl
      002FA4 AE 83            [24] 8303 	mov	r6,dph
      002FA6 AF F0            [24] 8304 	mov	r7,b
                                   8305 ;	calc.c:331: calc_ctx_t *ctx = (calc_ctx_t *)_ctx;
                                   8306 ;	calc.c:333: if (delta->event == EVENT_RSTA_I) ctx->acc_valid = 0;
      002FA8 E5*00            [12] 8307 	mov	a,_bp
      002FAA 24 FB            [12] 8308 	add	a,#0xfb
      002FAC F8               [12] 8309 	mov	r0,a
      002FAD 86 02            [24] 8310 	mov	ar2,@r0
      002FAF 08               [12] 8311 	inc	r0
      002FB0 86 03            [24] 8312 	mov	ar3,@r0
      002FB2 08               [12] 8313 	inc	r0
      002FB3 86 04            [24] 8314 	mov	ar4,@r0
      002FB5 74 02            [12] 8315 	mov	a,#0x02
      002FB7 2A               [12] 8316 	add	a,r2
      002FB8 FA               [12] 8317 	mov	r2,a
      002FB9 E4               [12] 8318 	clr	a
      002FBA 3B               [12] 8319 	addc	a,r3
      002FBB FB               [12] 8320 	mov	r3,a
      002FBC 8A 82            [24] 8321 	mov	dpl,r2
      002FBE 8B 83            [24] 8322 	mov	dph,r3
      002FC0 8C F0            [24] 8323 	mov	b,r4
      002FC2 12r00r00         [24] 8324 	lcall	__gptrget
      002FC5 FA               [12] 8325 	mov	r2,a
      002FC6 A3               [24] 8326 	inc	dptr
      002FC7 12r00r00         [24] 8327 	lcall	__gptrget
      002FCA FB               [12] 8328 	mov	r3,a
      002FCB BA 07 16         [24] 8329 	cjne	r2,#0x07,00102$
      002FCE BB 00 13         [24] 8330 	cjne	r3,#0x00,00102$
      002FD1 74 06            [12] 8331 	mov	a,#0x06
      002FD3 2D               [12] 8332 	add	a,r5
      002FD4 FA               [12] 8333 	mov	r2,a
      002FD5 E4               [12] 8334 	clr	a
      002FD6 3E               [12] 8335 	addc	a,r6
      002FD7 FB               [12] 8336 	mov	r3,a
      002FD8 8F 04            [24] 8337 	mov	ar4,r7
      002FDA 8A 82            [24] 8338 	mov	dpl,r2
      002FDC 8B 83            [24] 8339 	mov	dph,r3
      002FDE 8C F0            [24] 8340 	mov	b,r4
      002FE0 E4               [12] 8341 	clr	a
      002FE1 12r00r00         [24] 8342 	lcall	__gptrput
      002FE4                       8343 00102$:
                                   8344 ;	calc.c:334: ctx->acc = 0l;
      002FE4 74 02            [12] 8345 	mov	a,#0x02
      002FE6 2D               [12] 8346 	add	a,r5
      002FE7 FD               [12] 8347 	mov	r5,a
      002FE8 E4               [12] 8348 	clr	a
      002FE9 3E               [12] 8349 	addc	a,r6
      002FEA FE               [12] 8350 	mov	r6,a
      002FEB 8D 82            [24] 8351 	mov	dpl,r5
      002FED 8E 83            [24] 8352 	mov	dph,r6
      002FEF 8F F0            [24] 8353 	mov	b,r7
      002FF1 E4               [12] 8354 	clr	a
      002FF2 12r00r00         [24] 8355 	lcall	__gptrput
      002FF5 A3               [24] 8356 	inc	dptr
      002FF6 12r00r00         [24] 8357 	lcall	__gptrput
      002FF9 A3               [24] 8358 	inc	dptr
      002FFA 12r00r00         [24] 8359 	lcall	__gptrput
      002FFD A3               [24] 8360 	inc	dptr
      002FFE 12r00r00         [24] 8361 	lcall	__gptrput
                                   8362 ;	calc.c:336: return 1;
      003001 90 00 01         [24] 8363 	mov	dptr,#0x0001
                                   8364 ;	calc.c:337: }
      003004 D0*00            [24] 8365 	pop	_bp
      003006 22               [24] 8366 	ret
                                   8367 ;------------------------------------------------------------
                                   8368 ;Allocation info for local variables in function 'reset_base'
                                   8369 ;------------------------------------------------------------
                                   8370 ;delta                     Allocated to stack - _bp -5
                                   8371 ;_ctx                      Allocated to registers r5 r6 r7 
                                   8372 ;ctx                       Allocated to registers r5 r6 r7 
                                   8373 ;------------------------------------------------------------
                                   8374 ;	calc.c:339: static int reset_base(void *_ctx, delta_t *delta) __reentrant {
                                   8375 ;	-----------------------------------------
                                   8376 ;	 function reset_base
                                   8377 ;	-----------------------------------------
      003007                       8378 _reset_base:
      003007 C0*00            [24] 8379 	push	_bp
      003009 85 81*00         [24] 8380 	mov	_bp,sp
      00300C AD 82            [24] 8381 	mov	r5,dpl
      00300E AE 83            [24] 8382 	mov	r6,dph
      003010 AF F0            [24] 8383 	mov	r7,b
                                   8384 ;	calc.c:340: calc_ctx_t *ctx = (calc_ctx_t *)_ctx;
                                   8385 ;	calc.c:344: switch (ctx->digit[0]) {
      003012 74 07            [12] 8386 	mov	a,#0x07
      003014 2D               [12] 8387 	add	a,r5
      003015 FA               [12] 8388 	mov	r2,a
      003016 E4               [12] 8389 	clr	a
      003017 3E               [12] 8390 	addc	a,r6
      003018 FB               [12] 8391 	mov	r3,a
      003019 8F 04            [24] 8392 	mov	ar4,r7
      00301B 8A 82            [24] 8393 	mov	dpl,r2
      00301D 8B 83            [24] 8394 	mov	dph,r3
      00301F 8C F0            [24] 8395 	mov	b,r4
      003021 12r00r00         [24] 8396 	lcall	__gptrget
      003024 FC               [12] 8397 	mov	r4,a
      003025 BC 48 02         [24] 8398 	cjne	r4,#0x48,00124$
      003028 80 0F            [24] 8399 	sjmp	00101$
      00302A                       8400 00124$:
      00302A BC 4F 02         [24] 8401 	cjne	r4,#0x4f,00125$
      00302D 80 2E            [24] 8402 	sjmp	00103$
      00302F                       8403 00125$:
      00302F BC 68 02         [24] 8404 	cjne	r4,#0x68,00126$
      003032 80 17            [24] 8405 	sjmp	00102$
      003034                       8406 00126$:
                                   8407 ;	calc.c:345: case 'H':
      003034 BC 6F 48         [24] 8408 	cjne	r4,#0x6f,00105$
      003037 80 36            [24] 8409 	sjmp	00104$
      003039                       8410 00101$:
                                   8411 ;	calc.c:346: ctx->base = 16;
      003039 8D 82            [24] 8412 	mov	dpl,r5
      00303B 8E 83            [24] 8413 	mov	dph,r6
      00303D 8F F0            [24] 8414 	mov	b,r7
      00303F 74 10            [12] 8415 	mov	a,#0x10
      003041 12r00r00         [24] 8416 	lcall	__gptrput
      003044 A3               [24] 8417 	inc	dptr
      003045 E4               [12] 8418 	clr	a
      003046 12r00r00         [24] 8419 	lcall	__gptrput
                                   8420 ;	calc.c:347: break;
                                   8421 ;	calc.c:348: case 'h':
      003049 80 34            [24] 8422 	sjmp	00105$
      00304B                       8423 00102$:
                                   8424 ;	calc.c:349: ctx->base = 10;
      00304B 8D 82            [24] 8425 	mov	dpl,r5
      00304D 8E 83            [24] 8426 	mov	dph,r6
      00304F 8F F0            [24] 8427 	mov	b,r7
      003051 74 0A            [12] 8428 	mov	a,#0x0a
      003053 12r00r00         [24] 8429 	lcall	__gptrput
      003056 A3               [24] 8430 	inc	dptr
      003057 E4               [12] 8431 	clr	a
      003058 12r00r00         [24] 8432 	lcall	__gptrput
                                   8433 ;	calc.c:350: break;
                                   8434 ;	calc.c:351: case 'O':
      00305B 80 22            [24] 8435 	sjmp	00105$
      00305D                       8436 00103$:
                                   8437 ;	calc.c:352: ctx->base = 8;
      00305D 8D 82            [24] 8438 	mov	dpl,r5
      00305F 8E 83            [24] 8439 	mov	dph,r6
      003061 8F F0            [24] 8440 	mov	b,r7
      003063 74 08            [12] 8441 	mov	a,#0x08
      003065 12r00r00         [24] 8442 	lcall	__gptrput
      003068 A3               [24] 8443 	inc	dptr
      003069 E4               [12] 8444 	clr	a
      00306A 12r00r00         [24] 8445 	lcall	__gptrput
                                   8446 ;	calc.c:353: break;
                                   8447 ;	calc.c:354: case 'o':
      00306D 80 10            [24] 8448 	sjmp	00105$
      00306F                       8449 00104$:
                                   8450 ;	calc.c:355: ctx->base = 2;
      00306F 8D 82            [24] 8451 	mov	dpl,r5
      003071 8E 83            [24] 8452 	mov	dph,r6
      003073 8F F0            [24] 8453 	mov	b,r7
      003075 74 02            [12] 8454 	mov	a,#0x02
      003077 12r00r00         [24] 8455 	lcall	__gptrput
      00307A A3               [24] 8456 	inc	dptr
      00307B E4               [12] 8457 	clr	a
      00307C 12r00r00         [24] 8458 	lcall	__gptrput
                                   8459 ;	calc.c:357: }
      00307F                       8460 00105$:
                                   8461 ;	calc.c:359: return 1;
      00307F 90 00 01         [24] 8462 	mov	dptr,#0x0001
                                   8463 ;	calc.c:360: }
      003082 D0*00            [24] 8464 	pop	_bp
      003084 22               [24] 8465 	ret
                                   8466 ;------------------------------------------------------------
                                   8467 ;Allocation info for local variables in function 'status'
                                   8468 ;------------------------------------------------------------
                                   8469 ;delta                     Allocated to stack - _bp -5
                                   8470 ;_ctx                      Allocated to registers r5 r6 r7 
                                   8471 ;ctx                       Allocated to stack - _bp +19
                                   8472 ;vals                      Allocated to stack - _bp +11
                                   8473 ;n                         Allocated to stack - _bp +9
                                   8474 ;__1310720129              Allocated to registers 
                                   8475 ;s                         Allocated to registers r5 r6 r7 
                                   8476 ;__1310720131              Allocated to registers r5 r6 r7 r4 
                                   8477 ;d                         Allocated to registers 
                                   8478 ;__1310720001              Allocated to registers 
                                   8479 ;d                         Allocated to stack - _bp +22
                                   8480 ;mask                      Allocated to stack - _bp +26
                                   8481 ;__1310720133              Allocated to registers 
                                   8482 ;s                         Allocated to registers r3 r4 r5 
                                   8483 ;__1310720135              Allocated to registers r2 r3 r4 r5 
                                   8484 ;d                         Allocated to registers 
                                   8485 ;__1310720001              Allocated to registers 
                                   8486 ;d                         Allocated to stack - _bp +22
                                   8487 ;mask                      Allocated to stack - _bp +26
                                   8488 ;__1310720137              Allocated to registers 
                                   8489 ;s                         Allocated to registers r3 r4 r5 
                                   8490 ;__1310720139              Allocated to registers r4 r5 r6 r7 
                                   8491 ;d                         Allocated to registers 
                                   8492 ;__1310720001              Allocated to registers 
                                   8493 ;d                         Allocated to stack - _bp +22
                                   8494 ;mask                      Allocated to stack - _bp +26
                                   8495 ;__1310720141              Allocated to registers 
                                   8496 ;s                         Allocated to registers r3 r4 r5 
                                   8497 ;__1310720143              Allocated to registers r2 r3 r4 r5 
                                   8498 ;d                         Allocated to registers 
                                   8499 ;__1310720001              Allocated to registers 
                                   8500 ;d                         Allocated to stack - _bp +22
                                   8501 ;mask                      Allocated to stack - _bp +26
                                   8502 ;__1310720145              Allocated to registers 
                                   8503 ;s                         Allocated to registers r5 r6 r7 
                                   8504 ;__1310720147              Allocated to registers r4 r5 r6 r7 
                                   8505 ;d                         Allocated to registers 
                                   8506 ;__1310720001              Allocated to registers 
                                   8507 ;d                         Allocated to stack - _bp +22
                                   8508 ;mask                      Allocated to stack - _bp +26
                                   8509 ;__1310720149              Allocated to registers 
                                   8510 ;s                         Allocated to registers r5 r6 r7 
                                   8511 ;sloc0                     Allocated to stack - _bp +1
                                   8512 ;sloc1                     Allocated to stack - _bp +4
                                   8513 ;sloc2                     Allocated to stack - _bp +7
                                   8514 ;------------------------------------------------------------
                                   8515 ;	calc.c:362: static int status(void *_ctx, delta_t *delta) __reentrant {
                                   8516 ;	-----------------------------------------
                                   8517 ;	 function status
                                   8518 ;	-----------------------------------------
      003085                       8519 _status:
      003085 C0*00            [24] 8520 	push	_bp
      003087 E5 81            [12] 8521 	mov	a,sp
      003089 F5*00            [12] 8522 	mov	_bp,a
      00308B 24 1D            [12] 8523 	add	a,#0x1d
      00308D F5 81            [12] 8524 	mov	sp,a
      00308F AD 82            [24] 8525 	mov	r5,dpl
      003091 AE 83            [24] 8526 	mov	r6,dph
      003093 AF F0            [24] 8527 	mov	r7,b
                                   8528 ;	calc.c:363: calc_ctx_t *ctx = (calc_ctx_t *)_ctx;
      003095 E5*00            [12] 8529 	mov	a,_bp
      003097 24 13            [12] 8530 	add	a,#0x13
      003099 F8               [12] 8531 	mov	r0,a
      00309A A6 05            [24] 8532 	mov	@r0,ar5
      00309C 08               [12] 8533 	inc	r0
      00309D A6 06            [24] 8534 	mov	@r0,ar6
      00309F 08               [12] 8535 	inc	r0
      0030A0 A6 07            [24] 8536 	mov	@r0,ar7
                                   8537 ;	calc.c:369: printf("\r\nPS = %p, SS = %p, base = %d\r\n", ctx->ps, ctx->ss, ctx->base);
      0030A2 E5*00            [12] 8538 	mov	a,_bp
      0030A4 24 13            [12] 8539 	add	a,#0x13
      0030A6 F8               [12] 8540 	mov	r0,a
      0030A7 86 82            [24] 8541 	mov	dpl,@r0
      0030A9 08               [12] 8542 	inc	r0
      0030AA 86 83            [24] 8543 	mov	dph,@r0
      0030AC 08               [12] 8544 	inc	r0
      0030AD 86 F0            [24] 8545 	mov	b,@r0
      0030AF E5*00            [12] 8546 	mov	a,_bp
      0030B1 24 07            [12] 8547 	add	a,#0x07
      0030B3 F9               [12] 8548 	mov	r1,a
      0030B4 12r00r00         [24] 8549 	lcall	__gptrget
      0030B7 F7               [12] 8550 	mov	@r1,a
      0030B8 A3               [24] 8551 	inc	dptr
      0030B9 12r00r00         [24] 8552 	lcall	__gptrget
      0030BC 09               [12] 8553 	inc	r1
      0030BD F7               [12] 8554 	mov	@r1,a
      0030BE E5*00            [12] 8555 	mov	a,_bp
      0030C0 24 13            [12] 8556 	add	a,#0x13
      0030C2 F8               [12] 8557 	mov	r0,a
      0030C3 A9*00            [24] 8558 	mov	r1,_bp
      0030C5 09               [12] 8559 	inc	r1
      0030C6 74 14            [12] 8560 	mov	a,#0x14
      0030C8 26               [12] 8561 	add	a,@r0
      0030C9 F7               [12] 8562 	mov	@r1,a
      0030CA 74 40            [12] 8563 	mov	a,#0x40
      0030CC 08               [12] 8564 	inc	r0
      0030CD 36               [12] 8565 	addc	a,@r0
      0030CE 09               [12] 8566 	inc	r1
      0030CF F7               [12] 8567 	mov	@r1,a
      0030D0 08               [12] 8568 	inc	r0
      0030D1 09               [12] 8569 	inc	r1
      0030D2 E6               [12] 8570 	mov	a,@r0
      0030D3 F7               [12] 8571 	mov	@r1,a
      0030D4 A8*00            [24] 8572 	mov	r0,_bp
      0030D6 08               [12] 8573 	inc	r0
      0030D7 86 82            [24] 8574 	mov	dpl,@r0
      0030D9 08               [12] 8575 	inc	r0
      0030DA 86 83            [24] 8576 	mov	dph,@r0
      0030DC 08               [12] 8577 	inc	r0
      0030DD 86 F0            [24] 8578 	mov	b,@r0
      0030DF 12r00r00         [24] 8579 	lcall	__gptrget
      0030E2 FA               [12] 8580 	mov	r2,a
      0030E3 A3               [24] 8581 	inc	dptr
      0030E4 12r00r00         [24] 8582 	lcall	__gptrget
      0030E7 FE               [12] 8583 	mov	r6,a
      0030E8 A3               [24] 8584 	inc	dptr
      0030E9 12r00r00         [24] 8585 	lcall	__gptrget
      0030EC FF               [12] 8586 	mov	r7,a
      0030ED E5*00            [12] 8587 	mov	a,_bp
      0030EF 24 13            [12] 8588 	add	a,#0x13
      0030F1 F8               [12] 8589 	mov	r0,a
      0030F2 E5*00            [12] 8590 	mov	a,_bp
      0030F4 24 04            [12] 8591 	add	a,#0x04
      0030F6 F9               [12] 8592 	mov	r1,a
      0030F7 74 11            [12] 8593 	mov	a,#0x11
      0030F9 26               [12] 8594 	add	a,@r0
      0030FA F7               [12] 8595 	mov	@r1,a
      0030FB 74 40            [12] 8596 	mov	a,#0x40
      0030FD 08               [12] 8597 	inc	r0
      0030FE 36               [12] 8598 	addc	a,@r0
      0030FF 09               [12] 8599 	inc	r1
      003100 F7               [12] 8600 	mov	@r1,a
      003101 08               [12] 8601 	inc	r0
      003102 09               [12] 8602 	inc	r1
      003103 E6               [12] 8603 	mov	a,@r0
      003104 F7               [12] 8604 	mov	@r1,a
      003105 E5*00            [12] 8605 	mov	a,_bp
      003107 24 04            [12] 8606 	add	a,#0x04
      003109 F8               [12] 8607 	mov	r0,a
      00310A 86 82            [24] 8608 	mov	dpl,@r0
      00310C 08               [12] 8609 	inc	r0
      00310D 86 83            [24] 8610 	mov	dph,@r0
      00310F 08               [12] 8611 	inc	r0
      003110 86 F0            [24] 8612 	mov	b,@r0
      003112 12r00r00         [24] 8613 	lcall	__gptrget
      003115 FB               [12] 8614 	mov	r3,a
      003116 A3               [24] 8615 	inc	dptr
      003117 12r00r00         [24] 8616 	lcall	__gptrget
      00311A FC               [12] 8617 	mov	r4,a
      00311B A3               [24] 8618 	inc	dptr
      00311C 12r00r00         [24] 8619 	lcall	__gptrget
      00311F FD               [12] 8620 	mov	r5,a
      003120 E5*00            [12] 8621 	mov	a,_bp
      003122 24 07            [12] 8622 	add	a,#0x07
      003124 F8               [12] 8623 	mov	r0,a
      003125 E6               [12] 8624 	mov	a,@r0
      003126 C0 E0            [24] 8625 	push	acc
      003128 08               [12] 8626 	inc	r0
      003129 E6               [12] 8627 	mov	a,@r0
      00312A C0 E0            [24] 8628 	push	acc
      00312C C0 02            [24] 8629 	push	ar2
      00312E C0 06            [24] 8630 	push	ar6
      003130 C0 07            [24] 8631 	push	ar7
      003132 C0 03            [24] 8632 	push	ar3
      003134 C0 04            [24] 8633 	push	ar4
      003136 C0 05            [24] 8634 	push	ar5
      003138 74rC5            [12] 8635 	mov	a,#___str_15
      00313A C0 E0            [24] 8636 	push	acc
      00313C 74s00            [12] 8637 	mov	a,#(___str_15 >> 8)
      00313E C0 E0            [24] 8638 	push	acc
      003140 74 80            [12] 8639 	mov	a,#0x80
      003142 C0 E0            [24] 8640 	push	acc
      003144 12r00r00         [24] 8641 	lcall	_printf
      003147 E5 81            [12] 8642 	mov	a,sp
      003149 24 F5            [12] 8643 	add	a,#0xf5
      00314B F5 81            [12] 8644 	mov	sp,a
                                   8645 ;	calc.c:371: printstr("ACC\t");
      00314D 7DrE5            [12] 8646 	mov	r5,#___str_16
      00314F 7Es00            [12] 8647 	mov	r6,#(___str_16 >> 8)
      003151 7F 80            [12] 8648 	mov	r7,#0x80
                                   8649 ;	calc.c:20: return;
      003153                       8650 00139$:
                                   8651 ;	calc.c:18: for (; *s; s++) putchar(*s);
      003153 8D 82            [24] 8652 	mov	dpl,r5
      003155 8E 83            [24] 8653 	mov	dph,r6
      003157 8F F0            [24] 8654 	mov	b,r7
      003159 12r00r00         [24] 8655 	lcall	__gptrget
      00315C FC               [12] 8656 	mov	r4,a
      00315D 60 1C            [24] 8657 	jz	00112$
      00315F 7B 00            [12] 8658 	mov	r3,#0x00
      003161 8C 82            [24] 8659 	mov	dpl,r4
      003163 8B 83            [24] 8660 	mov	dph,r3
      003165 C0 07            [24] 8661 	push	ar7
      003167 C0 06            [24] 8662 	push	ar6
      003169 C0 05            [24] 8663 	push	ar5
      00316B 12r00r00         [24] 8664 	lcall	_putchar
      00316E D0 05            [24] 8665 	pop	ar5
      003170 D0 06            [24] 8666 	pop	ar6
      003172 D0 07            [24] 8667 	pop	ar7
      003174 0D               [12] 8668 	inc	r5
                                   8669 ;	calc.c:371: printstr("ACC\t");
      003175 BD 00 DB         [24] 8670 	cjne	r5,#0x00,00139$
      003178 0E               [12] 8671 	inc	r6
      003179 80 D8            [24] 8672 	sjmp	00139$
      00317B                       8673 00112$:
                                   8674 ;	calc.c:372: if (ctx->acc_valid) printall(ctx->acc);
      00317B E5*00            [12] 8675 	mov	a,_bp
      00317D 24 13            [12] 8676 	add	a,#0x13
      00317F F8               [12] 8677 	mov	r0,a
      003180 74 06            [12] 8678 	mov	a,#0x06
      003182 26               [12] 8679 	add	a,@r0
      003183 FD               [12] 8680 	mov	r5,a
      003184 E4               [12] 8681 	clr	a
      003185 08               [12] 8682 	inc	r0
      003186 36               [12] 8683 	addc	a,@r0
      003187 FE               [12] 8684 	mov	r6,a
      003188 08               [12] 8685 	inc	r0
      003189 86 07            [24] 8686 	mov	ar7,@r0
      00318B 8D 82            [24] 8687 	mov	dpl,r5
      00318D 8E 83            [24] 8688 	mov	dph,r6
      00318F 8F F0            [24] 8689 	mov	b,r7
      003191 12r00r00         [24] 8690 	lcall	__gptrget
      003194 70 03            [24] 8691 	jnz	00321$
      003196 02r32rC8         [24] 8692 	ljmp	00102$
      003199                       8693 00321$:
      003199 E5*00            [12] 8694 	mov	a,_bp
      00319B 24 13            [12] 8695 	add	a,#0x13
      00319D F8               [12] 8696 	mov	r0,a
      00319E 74 02            [12] 8697 	mov	a,#0x02
      0031A0 26               [12] 8698 	add	a,@r0
      0031A1 FD               [12] 8699 	mov	r5,a
      0031A2 E4               [12] 8700 	clr	a
      0031A3 08               [12] 8701 	inc	r0
      0031A4 36               [12] 8702 	addc	a,@r0
      0031A5 FE               [12] 8703 	mov	r6,a
      0031A6 08               [12] 8704 	inc	r0
      0031A7 86 07            [24] 8705 	mov	ar7,@r0
      0031A9 8D 82            [24] 8706 	mov	dpl,r5
      0031AB 8E 83            [24] 8707 	mov	dph,r6
      0031AD 8F F0            [24] 8708 	mov	b,r7
      0031AF 12r00r00         [24] 8709 	lcall	__gptrget
      0031B2 FD               [12] 8710 	mov	r5,a
      0031B3 A3               [24] 8711 	inc	dptr
      0031B4 12r00r00         [24] 8712 	lcall	__gptrget
      0031B7 FE               [12] 8713 	mov	r6,a
      0031B8 A3               [24] 8714 	inc	dptr
      0031B9 12r00r00         [24] 8715 	lcall	__gptrget
      0031BC FF               [12] 8716 	mov	r7,a
      0031BD A3               [24] 8717 	inc	dptr
      0031BE 12r00r00         [24] 8718 	lcall	__gptrget
      0031C1 FC               [12] 8719 	mov	r4,a
                                   8720 ;	calc.c:33: printf("%08lx\t", d);
      0031C2 C0 07            [24] 8721 	push	ar7
      0031C4 C0 06            [24] 8722 	push	ar6
      0031C6 C0 05            [24] 8723 	push	ar5
      0031C8 C0 04            [24] 8724 	push	ar4
      0031CA C0 05            [24] 8725 	push	ar5
      0031CC C0 06            [24] 8726 	push	ar6
      0031CE C0 07            [24] 8727 	push	ar7
      0031D0 C0 04            [24] 8728 	push	ar4
      0031D2 74r00            [12] 8729 	mov	a,#___str_0
      0031D4 C0 E0            [24] 8730 	push	acc
      0031D6 74s00            [12] 8731 	mov	a,#(___str_0 >> 8)
      0031D8 C0 E0            [24] 8732 	push	acc
      0031DA 74 80            [12] 8733 	mov	a,#0x80
      0031DC C0 E0            [24] 8734 	push	acc
      0031DE 12r00r00         [24] 8735 	lcall	_printf
      0031E1 E5 81            [12] 8736 	mov	a,sp
      0031E3 24 F9            [12] 8737 	add	a,#0xf9
      0031E5 F5 81            [12] 8738 	mov	sp,a
      0031E7 D0 04            [24] 8739 	pop	ar4
      0031E9 D0 05            [24] 8740 	pop	ar5
      0031EB D0 06            [24] 8741 	pop	ar6
      0031ED D0 07            [24] 8742 	pop	ar7
                                   8743 ;	calc.c:34: printf("% 11ld\t", d);
      0031EF C0 07            [24] 8744 	push	ar7
      0031F1 C0 06            [24] 8745 	push	ar6
      0031F3 C0 05            [24] 8746 	push	ar5
      0031F5 C0 04            [24] 8747 	push	ar4
      0031F7 C0 05            [24] 8748 	push	ar5
      0031F9 C0 06            [24] 8749 	push	ar6
      0031FB C0 07            [24] 8750 	push	ar7
      0031FD C0 04            [24] 8751 	push	ar4
      0031FF 74r07            [12] 8752 	mov	a,#___str_1
      003201 C0 E0            [24] 8753 	push	acc
      003203 74s00            [12] 8754 	mov	a,#(___str_1 >> 8)
      003205 C0 E0            [24] 8755 	push	acc
      003207 74 80            [12] 8756 	mov	a,#0x80
      003209 C0 E0            [24] 8757 	push	acc
      00320B 12r00r00         [24] 8758 	lcall	_printf
      00320E E5 81            [12] 8759 	mov	a,sp
      003210 24 F9            [12] 8760 	add	a,#0xf9
      003212 F5 81            [12] 8761 	mov	sp,a
      003214 D0 04            [24] 8762 	pop	ar4
      003216 D0 05            [24] 8763 	pop	ar5
      003218 D0 06            [24] 8764 	pop	ar6
      00321A D0 07            [24] 8765 	pop	ar7
                                   8766 ;	calc.c:35: printf("%011lo\t", d);
      00321C C0 07            [24] 8767 	push	ar7
      00321E C0 06            [24] 8768 	push	ar6
      003220 C0 05            [24] 8769 	push	ar5
      003222 C0 04            [24] 8770 	push	ar4
      003224 C0 05            [24] 8771 	push	ar5
      003226 C0 06            [24] 8772 	push	ar6
      003228 C0 07            [24] 8773 	push	ar7
      00322A C0 04            [24] 8774 	push	ar4
      00322C 74r0F            [12] 8775 	mov	a,#___str_2
      00322E C0 E0            [24] 8776 	push	acc
      003230 74s00            [12] 8777 	mov	a,#(___str_2 >> 8)
      003232 C0 E0            [24] 8778 	push	acc
      003234 74 80            [12] 8779 	mov	a,#0x80
      003236 C0 E0            [24] 8780 	push	acc
      003238 12r00r00         [24] 8781 	lcall	_printf
      00323B E5 81            [12] 8782 	mov	a,sp
      00323D 24 F9            [12] 8783 	add	a,#0xf9
      00323F F5 81            [12] 8784 	mov	sp,a
      003241 D0 04            [24] 8785 	pop	ar4
      003243 D0 05            [24] 8786 	pop	ar5
      003245 D0 06            [24] 8787 	pop	ar6
      003247 D0 07            [24] 8788 	pop	ar7
                                   8789 ;	calc.c:36: printbin(d);
      003249 E5*00            [12] 8790 	mov	a,_bp
      00324B 24 16            [12] 8791 	add	a,#0x16
      00324D F8               [12] 8792 	mov	r0,a
      00324E A6 05            [24] 8793 	mov	@r0,ar5
      003250 08               [12] 8794 	inc	r0
      003251 A6 06            [24] 8795 	mov	@r0,ar6
      003253 08               [12] 8796 	inc	r0
      003254 A6 07            [24] 8797 	mov	@r0,ar7
      003256 08               [12] 8798 	inc	r0
      003257 A6 04            [24] 8799 	mov	@r0,ar4
                                   8800 ;	calc.c:26: for (mask = 0x80000000lu; mask; mask >>= 1)
      003259 E5*00            [12] 8801 	mov	a,_bp
      00325B 24 1A            [12] 8802 	add	a,#0x1a
      00325D F8               [12] 8803 	mov	r0,a
      00325E E4               [12] 8804 	clr	a
      00325F F6               [12] 8805 	mov	@r0,a
      003260 08               [12] 8806 	inc	r0
      003261 F6               [12] 8807 	mov	@r0,a
      003262 08               [12] 8808 	inc	r0
      003263 F6               [12] 8809 	mov	@r0,a
      003264 08               [12] 8810 	inc	r0
      003265 76 80            [12] 8811 	mov	@r0,#0x80
      003267                       8812 00141$:
                                   8813 ;	calc.c:27: (void)putchar((d & mask) ? (int)'1' : (int)'0');
      003267 E5*00            [12] 8814 	mov	a,_bp
      003269 24 16            [12] 8815 	add	a,#0x16
      00326B F8               [12] 8816 	mov	r0,a
      00326C 86 04            [24] 8817 	mov	ar4,@r0
      00326E 08               [12] 8818 	inc	r0
      00326F 86 05            [24] 8819 	mov	ar5,@r0
      003271 08               [12] 8820 	inc	r0
      003272 86 06            [24] 8821 	mov	ar6,@r0
      003274 08               [12] 8822 	inc	r0
      003275 86 07            [24] 8823 	mov	ar7,@r0
      003277 E5*00            [12] 8824 	mov	a,_bp
      003279 24 1A            [12] 8825 	add	a,#0x1a
      00327B F8               [12] 8826 	mov	r0,a
      00327C E6               [12] 8827 	mov	a,@r0
      00327D 52 04            [12] 8828 	anl	ar4,a
      00327F 08               [12] 8829 	inc	r0
      003280 E6               [12] 8830 	mov	a,@r0
      003281 52 05            [12] 8831 	anl	ar5,a
      003283 08               [12] 8832 	inc	r0
      003284 E6               [12] 8833 	mov	a,@r0
      003285 52 06            [12] 8834 	anl	ar6,a
      003287 08               [12] 8835 	inc	r0
      003288 E6               [12] 8836 	mov	a,@r0
      003289 52 07            [12] 8837 	anl	ar7,a
      00328B EC               [12] 8838 	mov	a,r4
      00328C 4D               [12] 8839 	orl	a,r5
      00328D 4E               [12] 8840 	orl	a,r6
      00328E 4F               [12] 8841 	orl	a,r7
      00328F 60 06            [24] 8842 	jz	00168$
      003291 7E 31            [12] 8843 	mov	r6,#0x31
      003293 7F 00            [12] 8844 	mov	r7,#0x00
      003295 80 04            [24] 8845 	sjmp	00169$
      003297                       8846 00168$:
      003297 7E 30            [12] 8847 	mov	r6,#0x30
      003299 7F 00            [12] 8848 	mov	r7,#0x00
      00329B                       8849 00169$:
      00329B 8E 82            [24] 8850 	mov	dpl,r6
      00329D 8F 83            [24] 8851 	mov	dph,r7
      00329F 12r00r00         [24] 8852 	lcall	_putchar
                                   8853 ;	calc.c:26: for (mask = 0x80000000lu; mask; mask >>= 1)
      0032A2 E5*00            [12] 8854 	mov	a,_bp
      0032A4 24 1A            [12] 8855 	add	a,#0x1a
      0032A6 F8               [12] 8856 	mov	r0,a
      0032A7 08               [12] 8857 	inc	r0
      0032A8 08               [12] 8858 	inc	r0
      0032A9 08               [12] 8859 	inc	r0
      0032AA E6               [12] 8860 	mov	a,@r0
      0032AB C3               [12] 8861 	clr	c
      0032AC 13               [12] 8862 	rrc	a
      0032AD F6               [12] 8863 	mov	@r0,a
      0032AE 18               [12] 8864 	dec	r0
      0032AF E6               [12] 8865 	mov	a,@r0
      0032B0 13               [12] 8866 	rrc	a
      0032B1 F6               [12] 8867 	mov	@r0,a
      0032B2 18               [12] 8868 	dec	r0
      0032B3 E6               [12] 8869 	mov	a,@r0
      0032B4 13               [12] 8870 	rrc	a
      0032B5 F6               [12] 8871 	mov	@r0,a
      0032B6 18               [12] 8872 	dec	r0
      0032B7 E6               [12] 8873 	mov	a,@r0
      0032B8 13               [12] 8874 	rrc	a
      0032B9 F6               [12] 8875 	mov	@r0,a
      0032BA E5*00            [12] 8876 	mov	a,_bp
      0032BC 24 1A            [12] 8877 	add	a,#0x1a
      0032BE F8               [12] 8878 	mov	r0,a
      0032BF E6               [12] 8879 	mov	a,@r0
      0032C0 08               [12] 8880 	inc	r0
      0032C1 46               [12] 8881 	orl	a,@r0
      0032C2 08               [12] 8882 	inc	r0
      0032C3 46               [12] 8883 	orl	a,@r0
      0032C4 08               [12] 8884 	inc	r0
      0032C5 46               [12] 8885 	orl	a,@r0
      0032C6 70 9F            [24] 8886 	jnz	00141$
                                   8887 ;	calc.c:372: if (ctx->acc_valid) printall(ctx->acc);
      0032C8                       8888 00102$:
                                   8889 ;	calc.c:374: n = stack_peek2(ctx->ps, vals);
      0032C8 E5*00            [12] 8890 	mov	a,_bp
      0032CA 24 0B            [12] 8891 	add	a,#0x0b
      0032CC F9               [12] 8892 	mov	r1,a
      0032CD FD               [12] 8893 	mov	r5,a
      0032CE 7E 00            [12] 8894 	mov	r6,#0x00
      0032D0 7F 40            [12] 8895 	mov	r7,#0x40
      0032D2 E5*00            [12] 8896 	mov	a,_bp
      0032D4 24 04            [12] 8897 	add	a,#0x04
      0032D6 F8               [12] 8898 	mov	r0,a
      0032D7 86 82            [24] 8899 	mov	dpl,@r0
      0032D9 08               [12] 8900 	inc	r0
      0032DA 86 83            [24] 8901 	mov	dph,@r0
      0032DC 08               [12] 8902 	inc	r0
      0032DD 86 F0            [24] 8903 	mov	b,@r0
      0032DF 12r00r00         [24] 8904 	lcall	__gptrget
      0032E2 FA               [12] 8905 	mov	r2,a
      0032E3 A3               [24] 8906 	inc	dptr
      0032E4 12r00r00         [24] 8907 	lcall	__gptrget
      0032E7 FB               [12] 8908 	mov	r3,a
      0032E8 A3               [24] 8909 	inc	dptr
      0032E9 12r00r00         [24] 8910 	lcall	__gptrget
      0032EC FC               [12] 8911 	mov	r4,a
      0032ED C0 01            [24] 8912 	push	ar1
      0032EF C0 05            [24] 8913 	push	ar5
      0032F1 C0 06            [24] 8914 	push	ar6
      0032F3 C0 07            [24] 8915 	push	ar7
      0032F5 8A 82            [24] 8916 	mov	dpl,r2
      0032F7 8B 83            [24] 8917 	mov	dph,r3
      0032F9 8C F0            [24] 8918 	mov	b,r4
      0032FB 12r00r00         [24] 8919 	lcall	_stack_peek2
      0032FE AE 82            [24] 8920 	mov	r6,dpl
      003300 AF 83            [24] 8921 	mov	r7,dph
      003302 15 81            [12] 8922 	dec	sp
      003304 15 81            [12] 8923 	dec	sp
      003306 15 81            [12] 8924 	dec	sp
      003308 D0 01            [24] 8925 	pop	ar1
                                   8926 ;	calc.c:375: printstr("\r\nPSTOP1\t");
      00330A 7BrEA            [12] 8927 	mov	r3,#___str_17
      00330C 7Cs00            [12] 8928 	mov	r4,#(___str_17 >> 8)
      00330E 7D 80            [12] 8929 	mov	r5,#0x80
                                   8930 ;	calc.c:20: return;
      003310                       8931 00144$:
                                   8932 ;	calc.c:18: for (; *s; s++) putchar(*s);
      003310 8B 82            [24] 8933 	mov	dpl,r3
      003312 8C 83            [24] 8934 	mov	dph,r4
      003314 8D F0            [24] 8935 	mov	b,r5
      003316 12r00r00         [24] 8936 	lcall	__gptrget
      003319 FA               [12] 8937 	mov	r2,a
      00331A 60 30            [24] 8938 	jz	00117$
      00331C C0 06            [24] 8939 	push	ar6
      00331E C0 07            [24] 8940 	push	ar7
      003320 7F 00            [12] 8941 	mov	r7,#0x00
      003322 8A 82            [24] 8942 	mov	dpl,r2
      003324 8F 83            [24] 8943 	mov	dph,r7
      003326 C0 07            [24] 8944 	push	ar7
      003328 C0 06            [24] 8945 	push	ar6
      00332A C0 05            [24] 8946 	push	ar5
      00332C C0 04            [24] 8947 	push	ar4
      00332E C0 03            [24] 8948 	push	ar3
      003330 C0 01            [24] 8949 	push	ar1
      003332 12r00r00         [24] 8950 	lcall	_putchar
      003335 D0 01            [24] 8951 	pop	ar1
      003337 D0 03            [24] 8952 	pop	ar3
      003339 D0 04            [24] 8953 	pop	ar4
      00333B D0 05            [24] 8954 	pop	ar5
      00333D D0 06            [24] 8955 	pop	ar6
      00333F D0 07            [24] 8956 	pop	ar7
      003341 0B               [12] 8957 	inc	r3
      003342 BB 00 01         [24] 8958 	cjne	r3,#0x00,00325$
      003345 0C               [12] 8959 	inc	r4
      003346                       8960 00325$:
      003346 D0 07            [24] 8961 	pop	ar7
      003348 D0 06            [24] 8962 	pop	ar6
                                   8963 ;	calc.c:375: printstr("\r\nPSTOP1\t");
      00334A 80 C4            [24] 8964 	sjmp	00144$
      00334C                       8965 00117$:
                                   8966 ;	calc.c:376: if (n > 0) printall(vals[1]);
      00334C C3               [12] 8967 	clr	c
      00334D E4               [12] 8968 	clr	a
      00334E 9E               [12] 8969 	subb	a,r6
      00334F 74 80            [12] 8970 	mov	a,#(0x00 ^ 0x80)
      003351 8F F0            [24] 8971 	mov	b,r7
      003353 63 F0 80         [24] 8972 	xrl	b,#0x80
      003356 95 F0            [12] 8973 	subb	a,b
      003358 40 03            [24] 8974 	jc	00326$
      00335A 02r34r9A         [24] 8975 	ljmp	00104$
      00335D                       8976 00326$:
      00335D 74 04            [12] 8977 	mov	a,#0x04
      00335F 29               [12] 8978 	add	a,r1
      003360 F8               [12] 8979 	mov	r0,a
      003361 86 02            [24] 8980 	mov	ar2,@r0
      003363 08               [12] 8981 	inc	r0
      003364 86 03            [24] 8982 	mov	ar3,@r0
      003366 08               [12] 8983 	inc	r0
      003367 86 04            [24] 8984 	mov	ar4,@r0
      003369 08               [12] 8985 	inc	r0
      00336A 86 05            [24] 8986 	mov	ar5,@r0
                                   8987 ;	calc.c:33: printf("%08lx\t", d);
      00336C C0 07            [24] 8988 	push	ar7
      00336E C0 06            [24] 8989 	push	ar6
      003370 C0 05            [24] 8990 	push	ar5
      003372 C0 04            [24] 8991 	push	ar4
      003374 C0 03            [24] 8992 	push	ar3
      003376 C0 02            [24] 8993 	push	ar2
      003378 C0 01            [24] 8994 	push	ar1
      00337A C0 02            [24] 8995 	push	ar2
      00337C C0 03            [24] 8996 	push	ar3
      00337E C0 04            [24] 8997 	push	ar4
      003380 C0 05            [24] 8998 	push	ar5
      003382 74r00            [12] 8999 	mov	a,#___str_0
      003384 C0 E0            [24] 9000 	push	acc
      003386 74s00            [12] 9001 	mov	a,#(___str_0 >> 8)
      003388 C0 E0            [24] 9002 	push	acc
      00338A 74 80            [12] 9003 	mov	a,#0x80
      00338C C0 E0            [24] 9004 	push	acc
      00338E 12r00r00         [24] 9005 	lcall	_printf
      003391 E5 81            [12] 9006 	mov	a,sp
      003393 24 F9            [12] 9007 	add	a,#0xf9
      003395 F5 81            [12] 9008 	mov	sp,a
      003397 D0 01            [24] 9009 	pop	ar1
      003399 D0 02            [24] 9010 	pop	ar2
      00339B D0 03            [24] 9011 	pop	ar3
      00339D D0 04            [24] 9012 	pop	ar4
      00339F D0 05            [24] 9013 	pop	ar5
                                   9014 ;	calc.c:34: printf("% 11ld\t", d);
      0033A1 C0 05            [24] 9015 	push	ar5
      0033A3 C0 04            [24] 9016 	push	ar4
      0033A5 C0 03            [24] 9017 	push	ar3
      0033A7 C0 02            [24] 9018 	push	ar2
      0033A9 C0 01            [24] 9019 	push	ar1
      0033AB C0 02            [24] 9020 	push	ar2
      0033AD C0 03            [24] 9021 	push	ar3
      0033AF C0 04            [24] 9022 	push	ar4
      0033B1 C0 05            [24] 9023 	push	ar5
      0033B3 74r07            [12] 9024 	mov	a,#___str_1
      0033B5 C0 E0            [24] 9025 	push	acc
      0033B7 74s00            [12] 9026 	mov	a,#(___str_1 >> 8)
      0033B9 C0 E0            [24] 9027 	push	acc
      0033BB 74 80            [12] 9028 	mov	a,#0x80
      0033BD C0 E0            [24] 9029 	push	acc
      0033BF 12r00r00         [24] 9030 	lcall	_printf
      0033C2 E5 81            [12] 9031 	mov	a,sp
      0033C4 24 F9            [12] 9032 	add	a,#0xf9
      0033C6 F5 81            [12] 9033 	mov	sp,a
      0033C8 D0 01            [24] 9034 	pop	ar1
      0033CA D0 02            [24] 9035 	pop	ar2
      0033CC D0 03            [24] 9036 	pop	ar3
      0033CE D0 04            [24] 9037 	pop	ar4
      0033D0 D0 05            [24] 9038 	pop	ar5
                                   9039 ;	calc.c:35: printf("%011lo\t", d);
      0033D2 C0 05            [24] 9040 	push	ar5
      0033D4 C0 04            [24] 9041 	push	ar4
      0033D6 C0 03            [24] 9042 	push	ar3
      0033D8 C0 02            [24] 9043 	push	ar2
      0033DA C0 01            [24] 9044 	push	ar1
      0033DC C0 02            [24] 9045 	push	ar2
      0033DE C0 03            [24] 9046 	push	ar3
      0033E0 C0 04            [24] 9047 	push	ar4
      0033E2 C0 05            [24] 9048 	push	ar5
      0033E4 74r0F            [12] 9049 	mov	a,#___str_2
      0033E6 C0 E0            [24] 9050 	push	acc
      0033E8 74s00            [12] 9051 	mov	a,#(___str_2 >> 8)
      0033EA C0 E0            [24] 9052 	push	acc
      0033EC 74 80            [12] 9053 	mov	a,#0x80
      0033EE C0 E0            [24] 9054 	push	acc
      0033F0 12r00r00         [24] 9055 	lcall	_printf
      0033F3 E5 81            [12] 9056 	mov	a,sp
      0033F5 24 F9            [12] 9057 	add	a,#0xf9
      0033F7 F5 81            [12] 9058 	mov	sp,a
      0033F9 D0 01            [24] 9059 	pop	ar1
      0033FB D0 02            [24] 9060 	pop	ar2
      0033FD D0 03            [24] 9061 	pop	ar3
      0033FF D0 04            [24] 9062 	pop	ar4
      003401 D0 05            [24] 9063 	pop	ar5
      003403 D0 06            [24] 9064 	pop	ar6
      003405 D0 07            [24] 9065 	pop	ar7
                                   9066 ;	calc.c:36: printbin(d);
      003407 E5*00            [12] 9067 	mov	a,_bp
      003409 24 16            [12] 9068 	add	a,#0x16
      00340B F8               [12] 9069 	mov	r0,a
      00340C A6 02            [24] 9070 	mov	@r0,ar2
      00340E 08               [12] 9071 	inc	r0
      00340F A6 03            [24] 9072 	mov	@r0,ar3
      003411 08               [12] 9073 	inc	r0
      003412 A6 04            [24] 9074 	mov	@r0,ar4
      003414 08               [12] 9075 	inc	r0
      003415 A6 05            [24] 9076 	mov	@r0,ar5
                                   9077 ;	calc.c:26: for (mask = 0x80000000lu; mask; mask >>= 1)
      003417 E5*00            [12] 9078 	mov	a,_bp
      003419 24 1A            [12] 9079 	add	a,#0x1a
      00341B F8               [12] 9080 	mov	r0,a
      00341C E4               [12] 9081 	clr	a
      00341D F6               [12] 9082 	mov	@r0,a
      00341E 08               [12] 9083 	inc	r0
      00341F F6               [12] 9084 	mov	@r0,a
      003420 08               [12] 9085 	inc	r0
      003421 F6               [12] 9086 	mov	@r0,a
      003422 08               [12] 9087 	inc	r0
      003423 76 80            [12] 9088 	mov	@r0,#0x80
      003425                       9089 00146$:
                                   9090 ;	calc.c:27: (void)putchar((d & mask) ? (int)'1' : (int)'0');
      003425 C0 06            [24] 9091 	push	ar6
      003427 C0 07            [24] 9092 	push	ar7
      003429 E5*00            [12] 9093 	mov	a,_bp
      00342B 24 16            [12] 9094 	add	a,#0x16
      00342D F8               [12] 9095 	mov	r0,a
      00342E 86 04            [24] 9096 	mov	ar4,@r0
      003430 08               [12] 9097 	inc	r0
      003431 86 05            [24] 9098 	mov	ar5,@r0
      003433 08               [12] 9099 	inc	r0
      003434 86 06            [24] 9100 	mov	ar6,@r0
      003436 08               [12] 9101 	inc	r0
      003437 86 07            [24] 9102 	mov	ar7,@r0
      003439 E5*00            [12] 9103 	mov	a,_bp
      00343B 24 1A            [12] 9104 	add	a,#0x1a
      00343D F8               [12] 9105 	mov	r0,a
      00343E E6               [12] 9106 	mov	a,@r0
      00343F 52 04            [12] 9107 	anl	ar4,a
      003441 08               [12] 9108 	inc	r0
      003442 E6               [12] 9109 	mov	a,@r0
      003443 52 05            [12] 9110 	anl	ar5,a
      003445 08               [12] 9111 	inc	r0
      003446 E6               [12] 9112 	mov	a,@r0
      003447 52 06            [12] 9113 	anl	ar6,a
      003449 08               [12] 9114 	inc	r0
      00344A E6               [12] 9115 	mov	a,@r0
      00344B 52 07            [12] 9116 	anl	ar7,a
      00344D EC               [12] 9117 	mov	a,r4
      00344E 4D               [12] 9118 	orl	a,r5
      00344F 4E               [12] 9119 	orl	a,r6
      003450 4F               [12] 9120 	orl	a,r7
      003451 D0 07            [24] 9121 	pop	ar7
      003453 D0 06            [24] 9122 	pop	ar6
      003455 60 06            [24] 9123 	jz	00170$
      003457 7C 31            [12] 9124 	mov	r4,#0x31
      003459 7D 00            [12] 9125 	mov	r5,#0x00
      00345B 80 04            [24] 9126 	sjmp	00171$
      00345D                       9127 00170$:
      00345D 7C 30            [12] 9128 	mov	r4,#0x30
      00345F 7D 00            [12] 9129 	mov	r5,#0x00
      003461                       9130 00171$:
      003461 8C 82            [24] 9131 	mov	dpl,r4
      003463 8D 83            [24] 9132 	mov	dph,r5
      003465 C0 07            [24] 9133 	push	ar7
      003467 C0 06            [24] 9134 	push	ar6
      003469 C0 01            [24] 9135 	push	ar1
      00346B 12r00r00         [24] 9136 	lcall	_putchar
      00346E D0 01            [24] 9137 	pop	ar1
      003470 D0 06            [24] 9138 	pop	ar6
      003472 D0 07            [24] 9139 	pop	ar7
                                   9140 ;	calc.c:26: for (mask = 0x80000000lu; mask; mask >>= 1)
      003474 E5*00            [12] 9141 	mov	a,_bp
      003476 24 1A            [12] 9142 	add	a,#0x1a
      003478 F8               [12] 9143 	mov	r0,a
      003479 08               [12] 9144 	inc	r0
      00347A 08               [12] 9145 	inc	r0
      00347B 08               [12] 9146 	inc	r0
      00347C E6               [12] 9147 	mov	a,@r0
      00347D C3               [12] 9148 	clr	c
      00347E 13               [12] 9149 	rrc	a
      00347F F6               [12] 9150 	mov	@r0,a
      003480 18               [12] 9151 	dec	r0
      003481 E6               [12] 9152 	mov	a,@r0
      003482 13               [12] 9153 	rrc	a
      003483 F6               [12] 9154 	mov	@r0,a
      003484 18               [12] 9155 	dec	r0
      003485 E6               [12] 9156 	mov	a,@r0
      003486 13               [12] 9157 	rrc	a
      003487 F6               [12] 9158 	mov	@r0,a
      003488 18               [12] 9159 	dec	r0
      003489 E6               [12] 9160 	mov	a,@r0
      00348A 13               [12] 9161 	rrc	a
      00348B F6               [12] 9162 	mov	@r0,a
      00348C E5*00            [12] 9163 	mov	a,_bp
      00348E 24 1A            [12] 9164 	add	a,#0x1a
      003490 F8               [12] 9165 	mov	r0,a
      003491 E6               [12] 9166 	mov	a,@r0
      003492 08               [12] 9167 	inc	r0
      003493 46               [12] 9168 	orl	a,@r0
      003494 08               [12] 9169 	inc	r0
      003495 46               [12] 9170 	orl	a,@r0
      003496 08               [12] 9171 	inc	r0
      003497 46               [12] 9172 	orl	a,@r0
      003498 70 8B            [24] 9173 	jnz	00146$
                                   9174 ;	calc.c:376: if (n > 0) printall(vals[1]);
      00349A                       9175 00104$:
                                   9176 ;	calc.c:377: printstr("\r\nPSTOP0\t");
      00349A 7BrF4            [12] 9177 	mov	r3,#___str_18
      00349C 7Cs00            [12] 9178 	mov	r4,#(___str_18 >> 8)
      00349E 7D 80            [12] 9179 	mov	r5,#0x80
                                   9180 ;	calc.c:20: return;
      0034A0                       9181 00149$:
                                   9182 ;	calc.c:18: for (; *s; s++) putchar(*s);
      0034A0 8B 82            [24] 9183 	mov	dpl,r3
      0034A2 8C 83            [24] 9184 	mov	dph,r4
      0034A4 8D F0            [24] 9185 	mov	b,r5
      0034A6 12r00r00         [24] 9186 	lcall	__gptrget
      0034A9 FA               [12] 9187 	mov	r2,a
      0034AA 60 30            [24] 9188 	jz	00122$
      0034AC C0 06            [24] 9189 	push	ar6
      0034AE C0 07            [24] 9190 	push	ar7
      0034B0 7F 00            [12] 9191 	mov	r7,#0x00
      0034B2 8A 82            [24] 9192 	mov	dpl,r2
      0034B4 8F 83            [24] 9193 	mov	dph,r7
      0034B6 C0 07            [24] 9194 	push	ar7
      0034B8 C0 06            [24] 9195 	push	ar6
      0034BA C0 05            [24] 9196 	push	ar5
      0034BC C0 04            [24] 9197 	push	ar4
      0034BE C0 03            [24] 9198 	push	ar3
      0034C0 C0 01            [24] 9199 	push	ar1
      0034C2 12r00r00         [24] 9200 	lcall	_putchar
      0034C5 D0 01            [24] 9201 	pop	ar1
      0034C7 D0 03            [24] 9202 	pop	ar3
      0034C9 D0 04            [24] 9203 	pop	ar4
      0034CB D0 05            [24] 9204 	pop	ar5
      0034CD D0 06            [24] 9205 	pop	ar6
      0034CF D0 07            [24] 9206 	pop	ar7
      0034D1 0B               [12] 9207 	inc	r3
      0034D2 BB 00 01         [24] 9208 	cjne	r3,#0x00,00330$
      0034D5 0C               [12] 9209 	inc	r4
      0034D6                       9210 00330$:
      0034D6 D0 07            [24] 9211 	pop	ar7
      0034D8 D0 06            [24] 9212 	pop	ar6
                                   9213 ;	calc.c:377: printstr("\r\nPSTOP0\t");
      0034DA 80 C4            [24] 9214 	sjmp	00149$
      0034DC                       9215 00122$:
                                   9216 ;	calc.c:378: if (n > 1) printall(vals[0]);
      0034DC C3               [12] 9217 	clr	c
      0034DD 74 01            [12] 9218 	mov	a,#0x01
      0034DF 9E               [12] 9219 	subb	a,r6
      0034E0 74 80            [12] 9220 	mov	a,#(0x00 ^ 0x80)
      0034E2 8F F0            [24] 9221 	mov	b,r7
      0034E4 63 F0 80         [24] 9222 	xrl	b,#0x80
      0034E7 95 F0            [12] 9223 	subb	a,b
      0034E9 40 03            [24] 9224 	jc	00331$
      0034EB 02r36r16         [24] 9225 	ljmp	00106$
      0034EE                       9226 00331$:
      0034EE 87 04            [24] 9227 	mov	ar4,@r1
      0034F0 09               [12] 9228 	inc	r1
      0034F1 87 05            [24] 9229 	mov	ar5,@r1
      0034F3 09               [12] 9230 	inc	r1
      0034F4 87 06            [24] 9231 	mov	ar6,@r1
      0034F6 09               [12] 9232 	inc	r1
      0034F7 87 07            [24] 9233 	mov	ar7,@r1
      0034F9 19               [12] 9234 	dec	r1
      0034FA 19               [12] 9235 	dec	r1
      0034FB 19               [12] 9236 	dec	r1
                                   9237 ;	calc.c:33: printf("%08lx\t", d);
      0034FC C0 07            [24] 9238 	push	ar7
      0034FE C0 06            [24] 9239 	push	ar6
      003500 C0 05            [24] 9240 	push	ar5
      003502 C0 04            [24] 9241 	push	ar4
      003504 C0 01            [24] 9242 	push	ar1
      003506 C0 04            [24] 9243 	push	ar4
      003508 C0 05            [24] 9244 	push	ar5
      00350A C0 06            [24] 9245 	push	ar6
      00350C C0 07            [24] 9246 	push	ar7
      00350E 74r00            [12] 9247 	mov	a,#___str_0
      003510 C0 E0            [24] 9248 	push	acc
      003512 74s00            [12] 9249 	mov	a,#(___str_0 >> 8)
      003514 C0 E0            [24] 9250 	push	acc
      003516 74 80            [12] 9251 	mov	a,#0x80
      003518 C0 E0            [24] 9252 	push	acc
      00351A 12r00r00         [24] 9253 	lcall	_printf
      00351D E5 81            [12] 9254 	mov	a,sp
      00351F 24 F9            [12] 9255 	add	a,#0xf9
      003521 F5 81            [12] 9256 	mov	sp,a
      003523 D0 01            [24] 9257 	pop	ar1
      003525 D0 04            [24] 9258 	pop	ar4
      003527 D0 05            [24] 9259 	pop	ar5
      003529 D0 06            [24] 9260 	pop	ar6
      00352B D0 07            [24] 9261 	pop	ar7
                                   9262 ;	calc.c:34: printf("% 11ld\t", d);
      00352D C0 07            [24] 9263 	push	ar7
      00352F C0 06            [24] 9264 	push	ar6
      003531 C0 05            [24] 9265 	push	ar5
      003533 C0 04            [24] 9266 	push	ar4
      003535 C0 01            [24] 9267 	push	ar1
      003537 C0 04            [24] 9268 	push	ar4
      003539 C0 05            [24] 9269 	push	ar5
      00353B C0 06            [24] 9270 	push	ar6
      00353D C0 07            [24] 9271 	push	ar7
      00353F 74r07            [12] 9272 	mov	a,#___str_1
      003541 C0 E0            [24] 9273 	push	acc
      003543 74s00            [12] 9274 	mov	a,#(___str_1 >> 8)
      003545 C0 E0            [24] 9275 	push	acc
      003547 74 80            [12] 9276 	mov	a,#0x80
      003549 C0 E0            [24] 9277 	push	acc
      00354B 12r00r00         [24] 9278 	lcall	_printf
      00354E E5 81            [12] 9279 	mov	a,sp
      003550 24 F9            [12] 9280 	add	a,#0xf9
      003552 F5 81            [12] 9281 	mov	sp,a
      003554 D0 01            [24] 9282 	pop	ar1
      003556 D0 04            [24] 9283 	pop	ar4
      003558 D0 05            [24] 9284 	pop	ar5
      00355A D0 06            [24] 9285 	pop	ar6
      00355C D0 07            [24] 9286 	pop	ar7
                                   9287 ;	calc.c:35: printf("%011lo\t", d);
      00355E C0 07            [24] 9288 	push	ar7
      003560 C0 06            [24] 9289 	push	ar6
      003562 C0 05            [24] 9290 	push	ar5
      003564 C0 04            [24] 9291 	push	ar4
      003566 C0 01            [24] 9292 	push	ar1
      003568 C0 04            [24] 9293 	push	ar4
      00356A C0 05            [24] 9294 	push	ar5
      00356C C0 06            [24] 9295 	push	ar6
      00356E C0 07            [24] 9296 	push	ar7
      003570 74r0F            [12] 9297 	mov	a,#___str_2
      003572 C0 E0            [24] 9298 	push	acc
      003574 74s00            [12] 9299 	mov	a,#(___str_2 >> 8)
      003576 C0 E0            [24] 9300 	push	acc
      003578 74 80            [12] 9301 	mov	a,#0x80
      00357A C0 E0            [24] 9302 	push	acc
      00357C 12r00r00         [24] 9303 	lcall	_printf
      00357F E5 81            [12] 9304 	mov	a,sp
      003581 24 F9            [12] 9305 	add	a,#0xf9
      003583 F5 81            [12] 9306 	mov	sp,a
      003585 D0 01            [24] 9307 	pop	ar1
      003587 D0 04            [24] 9308 	pop	ar4
      003589 D0 05            [24] 9309 	pop	ar5
      00358B D0 06            [24] 9310 	pop	ar6
      00358D D0 07            [24] 9311 	pop	ar7
                                   9312 ;	calc.c:36: printbin(d);
      00358F E5*00            [12] 9313 	mov	a,_bp
      003591 24 16            [12] 9314 	add	a,#0x16
      003593 F8               [12] 9315 	mov	r0,a
      003594 A6 04            [24] 9316 	mov	@r0,ar4
      003596 08               [12] 9317 	inc	r0
      003597 A6 05            [24] 9318 	mov	@r0,ar5
      003599 08               [12] 9319 	inc	r0
      00359A A6 06            [24] 9320 	mov	@r0,ar6
      00359C 08               [12] 9321 	inc	r0
      00359D A6 07            [24] 9322 	mov	@r0,ar7
                                   9323 ;	calc.c:26: for (mask = 0x80000000lu; mask; mask >>= 1)
      00359F E5*00            [12] 9324 	mov	a,_bp
      0035A1 24 1A            [12] 9325 	add	a,#0x1a
      0035A3 F8               [12] 9326 	mov	r0,a
      0035A4 E4               [12] 9327 	clr	a
      0035A5 F6               [12] 9328 	mov	@r0,a
      0035A6 08               [12] 9329 	inc	r0
      0035A7 F6               [12] 9330 	mov	@r0,a
      0035A8 08               [12] 9331 	inc	r0
      0035A9 F6               [12] 9332 	mov	@r0,a
      0035AA 08               [12] 9333 	inc	r0
      0035AB 76 80            [12] 9334 	mov	@r0,#0x80
      0035AD                       9335 00151$:
                                   9336 ;	calc.c:27: (void)putchar((d & mask) ? (int)'1' : (int)'0');
      0035AD C0 01            [24] 9337 	push	ar1
      0035AF E5*00            [12] 9338 	mov	a,_bp
      0035B1 24 16            [12] 9339 	add	a,#0x16
      0035B3 F8               [12] 9340 	mov	r0,a
      0035B4 86 04            [24] 9341 	mov	ar4,@r0
      0035B6 08               [12] 9342 	inc	r0
      0035B7 86 05            [24] 9343 	mov	ar5,@r0
      0035B9 08               [12] 9344 	inc	r0
      0035BA 86 06            [24] 9345 	mov	ar6,@r0
      0035BC 08               [12] 9346 	inc	r0
      0035BD 86 07            [24] 9347 	mov	ar7,@r0
      0035BF E5*00            [12] 9348 	mov	a,_bp
      0035C1 24 1A            [12] 9349 	add	a,#0x1a
      0035C3 F8               [12] 9350 	mov	r0,a
      0035C4 E6               [12] 9351 	mov	a,@r0
      0035C5 52 04            [12] 9352 	anl	ar4,a
      0035C7 08               [12] 9353 	inc	r0
      0035C8 E6               [12] 9354 	mov	a,@r0
      0035C9 52 05            [12] 9355 	anl	ar5,a
      0035CB 08               [12] 9356 	inc	r0
      0035CC E6               [12] 9357 	mov	a,@r0
      0035CD 52 06            [12] 9358 	anl	ar6,a
      0035CF 08               [12] 9359 	inc	r0
      0035D0 E6               [12] 9360 	mov	a,@r0
      0035D1 52 07            [12] 9361 	anl	ar7,a
      0035D3 D0 01            [24] 9362 	pop	ar1
      0035D5 EC               [12] 9363 	mov	a,r4
      0035D6 4D               [12] 9364 	orl	a,r5
      0035D7 4E               [12] 9365 	orl	a,r6
      0035D8 4F               [12] 9366 	orl	a,r7
      0035D9 60 06            [24] 9367 	jz	00172$
      0035DB 7E 31            [12] 9368 	mov	r6,#0x31
      0035DD 7F 00            [12] 9369 	mov	r7,#0x00
      0035DF 80 04            [24] 9370 	sjmp	00173$
      0035E1                       9371 00172$:
      0035E1 7E 30            [12] 9372 	mov	r6,#0x30
      0035E3 7F 00            [12] 9373 	mov	r7,#0x00
      0035E5                       9374 00173$:
      0035E5 8E 82            [24] 9375 	mov	dpl,r6
      0035E7 8F 83            [24] 9376 	mov	dph,r7
      0035E9 C0 01            [24] 9377 	push	ar1
      0035EB 12r00r00         [24] 9378 	lcall	_putchar
      0035EE D0 01            [24] 9379 	pop	ar1
                                   9380 ;	calc.c:26: for (mask = 0x80000000lu; mask; mask >>= 1)
      0035F0 E5*00            [12] 9381 	mov	a,_bp
      0035F2 24 1A            [12] 9382 	add	a,#0x1a
      0035F4 F8               [12] 9383 	mov	r0,a
      0035F5 08               [12] 9384 	inc	r0
      0035F6 08               [12] 9385 	inc	r0
      0035F7 08               [12] 9386 	inc	r0
      0035F8 E6               [12] 9387 	mov	a,@r0
      0035F9 C3               [12] 9388 	clr	c
      0035FA 13               [12] 9389 	rrc	a
      0035FB F6               [12] 9390 	mov	@r0,a
      0035FC 18               [12] 9391 	dec	r0
      0035FD E6               [12] 9392 	mov	a,@r0
      0035FE 13               [12] 9393 	rrc	a
      0035FF F6               [12] 9394 	mov	@r0,a
      003600 18               [12] 9395 	dec	r0
      003601 E6               [12] 9396 	mov	a,@r0
      003602 13               [12] 9397 	rrc	a
      003603 F6               [12] 9398 	mov	@r0,a
      003604 18               [12] 9399 	dec	r0
      003605 E6               [12] 9400 	mov	a,@r0
      003606 13               [12] 9401 	rrc	a
      003607 F6               [12] 9402 	mov	@r0,a
      003608 E5*00            [12] 9403 	mov	a,_bp
      00360A 24 1A            [12] 9404 	add	a,#0x1a
      00360C F8               [12] 9405 	mov	r0,a
      00360D E6               [12] 9406 	mov	a,@r0
      00360E 08               [12] 9407 	inc	r0
      00360F 46               [12] 9408 	orl	a,@r0
      003610 08               [12] 9409 	inc	r0
      003611 46               [12] 9410 	orl	a,@r0
      003612 08               [12] 9411 	inc	r0
      003613 46               [12] 9412 	orl	a,@r0
      003614 70 97            [24] 9413 	jnz	00151$
                                   9414 ;	calc.c:378: if (n > 1) printall(vals[0]);
      003616                       9415 00106$:
                                   9416 ;	calc.c:380: n = stack_peek2(ctx->ss, vals);
      003616 89 07            [24] 9417 	mov	ar7,r1
      003618 7E 00            [12] 9418 	mov	r6,#0x00
      00361A 7D 40            [12] 9419 	mov	r5,#0x40
      00361C A8*00            [24] 9420 	mov	r0,_bp
      00361E 08               [12] 9421 	inc	r0
      00361F 86 82            [24] 9422 	mov	dpl,@r0
      003621 08               [12] 9423 	inc	r0
      003622 86 83            [24] 9424 	mov	dph,@r0
      003624 08               [12] 9425 	inc	r0
      003625 86 F0            [24] 9426 	mov	b,@r0
      003627 12r00r00         [24] 9427 	lcall	__gptrget
      00362A FA               [12] 9428 	mov	r2,a
      00362B A3               [24] 9429 	inc	dptr
      00362C 12r00r00         [24] 9430 	lcall	__gptrget
      00362F FB               [12] 9431 	mov	r3,a
      003630 A3               [24] 9432 	inc	dptr
      003631 12r00r00         [24] 9433 	lcall	__gptrget
      003634 FC               [12] 9434 	mov	r4,a
      003635 C0 01            [24] 9435 	push	ar1
      003637 C0 07            [24] 9436 	push	ar7
      003639 C0 06            [24] 9437 	push	ar6
      00363B C0 05            [24] 9438 	push	ar5
      00363D 8A 82            [24] 9439 	mov	dpl,r2
      00363F 8B 83            [24] 9440 	mov	dph,r3
      003641 8C F0            [24] 9441 	mov	b,r4
      003643 12r00r00         [24] 9442 	lcall	_stack_peek2
      003646 AE 82            [24] 9443 	mov	r6,dpl
      003648 AF 83            [24] 9444 	mov	r7,dph
      00364A 15 81            [12] 9445 	dec	sp
      00364C 15 81            [12] 9446 	dec	sp
      00364E 15 81            [12] 9447 	dec	sp
      003650 D0 01            [24] 9448 	pop	ar1
      003652 E5*00            [12] 9449 	mov	a,_bp
      003654 24 09            [12] 9450 	add	a,#0x09
      003656 F8               [12] 9451 	mov	r0,a
      003657 A6 06            [24] 9452 	mov	@r0,ar6
      003659 08               [12] 9453 	inc	r0
      00365A A6 07            [24] 9454 	mov	@r0,ar7
                                   9455 ;	calc.c:381: printstr("\r\nSSTOP1\t");
      00365C 7BrFE            [12] 9456 	mov	r3,#___str_19
      00365E 7Cs00            [12] 9457 	mov	r4,#(___str_19 >> 8)
      003660 7D 80            [12] 9458 	mov	r5,#0x80
                                   9459 ;	calc.c:20: return;
      003662                       9460 00154$:
                                   9461 ;	calc.c:18: for (; *s; s++) putchar(*s);
      003662 8B 82            [24] 9462 	mov	dpl,r3
      003664 8C 83            [24] 9463 	mov	dph,r4
      003666 8D F0            [24] 9464 	mov	b,r5
      003668 12r00r00         [24] 9465 	lcall	__gptrget
      00366B FA               [12] 9466 	mov	r2,a
      00366C 60 20            [24] 9467 	jz	00127$
      00366E 7F 00            [12] 9468 	mov	r7,#0x00
      003670 8A 82            [24] 9469 	mov	dpl,r2
      003672 8F 83            [24] 9470 	mov	dph,r7
      003674 C0 05            [24] 9471 	push	ar5
      003676 C0 04            [24] 9472 	push	ar4
      003678 C0 03            [24] 9473 	push	ar3
      00367A C0 01            [24] 9474 	push	ar1
      00367C 12r00r00         [24] 9475 	lcall	_putchar
      00367F D0 01            [24] 9476 	pop	ar1
      003681 D0 03            [24] 9477 	pop	ar3
      003683 D0 04            [24] 9478 	pop	ar4
      003685 D0 05            [24] 9479 	pop	ar5
      003687 0B               [12] 9480 	inc	r3
                                   9481 ;	calc.c:381: printstr("\r\nSSTOP1\t");
      003688 BB 00 D7         [24] 9482 	cjne	r3,#0x00,00154$
      00368B 0C               [12] 9483 	inc	r4
      00368C 80 D4            [24] 9484 	sjmp	00154$
      00368E                       9485 00127$:
                                   9486 ;	calc.c:382: if (n > 0) printall(vals[1]);
      00368E E5*00            [12] 9487 	mov	a,_bp
      003690 24 09            [12] 9488 	add	a,#0x09
      003692 F8               [12] 9489 	mov	r0,a
      003693 C3               [12] 9490 	clr	c
      003694 E4               [12] 9491 	clr	a
      003695 96               [12] 9492 	subb	a,@r0
      003696 74 80            [12] 9493 	mov	a,#(0x00 ^ 0x80)
      003698 08               [12] 9494 	inc	r0
      003699 86 F0            [24] 9495 	mov	b,@r0
      00369B 63 F0 80         [24] 9496 	xrl	b,#0x80
      00369E 95 F0            [12] 9497 	subb	a,b
      0036A0 40 03            [24] 9498 	jc	00336$
      0036A2 02r37rCE         [24] 9499 	ljmp	00108$
      0036A5                       9500 00336$:
      0036A5 74 04            [12] 9501 	mov	a,#0x04
      0036A7 29               [12] 9502 	add	a,r1
      0036A8 F8               [12] 9503 	mov	r0,a
      0036A9 86 02            [24] 9504 	mov	ar2,@r0
      0036AB 08               [12] 9505 	inc	r0
      0036AC 86 03            [24] 9506 	mov	ar3,@r0
      0036AE 08               [12] 9507 	inc	r0
      0036AF 86 04            [24] 9508 	mov	ar4,@r0
      0036B1 08               [12] 9509 	inc	r0
      0036B2 86 05            [24] 9510 	mov	ar5,@r0
                                   9511 ;	calc.c:33: printf("%08lx\t", d);
      0036B4 C0 05            [24] 9512 	push	ar5
      0036B6 C0 04            [24] 9513 	push	ar4
      0036B8 C0 03            [24] 9514 	push	ar3
      0036BA C0 02            [24] 9515 	push	ar2
      0036BC C0 01            [24] 9516 	push	ar1
      0036BE C0 02            [24] 9517 	push	ar2
      0036C0 C0 03            [24] 9518 	push	ar3
      0036C2 C0 04            [24] 9519 	push	ar4
      0036C4 C0 05            [24] 9520 	push	ar5
      0036C6 74r00            [12] 9521 	mov	a,#___str_0
      0036C8 C0 E0            [24] 9522 	push	acc
      0036CA 74s00            [12] 9523 	mov	a,#(___str_0 >> 8)
      0036CC C0 E0            [24] 9524 	push	acc
      0036CE 74 80            [12] 9525 	mov	a,#0x80
      0036D0 C0 E0            [24] 9526 	push	acc
      0036D2 12r00r00         [24] 9527 	lcall	_printf
      0036D5 E5 81            [12] 9528 	mov	a,sp
      0036D7 24 F9            [12] 9529 	add	a,#0xf9
      0036D9 F5 81            [12] 9530 	mov	sp,a
      0036DB D0 01            [24] 9531 	pop	ar1
      0036DD D0 02            [24] 9532 	pop	ar2
      0036DF D0 03            [24] 9533 	pop	ar3
      0036E1 D0 04            [24] 9534 	pop	ar4
      0036E3 D0 05            [24] 9535 	pop	ar5
                                   9536 ;	calc.c:34: printf("% 11ld\t", d);
      0036E5 C0 05            [24] 9537 	push	ar5
      0036E7 C0 04            [24] 9538 	push	ar4
      0036E9 C0 03            [24] 9539 	push	ar3
      0036EB C0 02            [24] 9540 	push	ar2
      0036ED C0 01            [24] 9541 	push	ar1
      0036EF C0 02            [24] 9542 	push	ar2
      0036F1 C0 03            [24] 9543 	push	ar3
      0036F3 C0 04            [24] 9544 	push	ar4
      0036F5 C0 05            [24] 9545 	push	ar5
      0036F7 74r07            [12] 9546 	mov	a,#___str_1
      0036F9 C0 E0            [24] 9547 	push	acc
      0036FB 74s00            [12] 9548 	mov	a,#(___str_1 >> 8)
      0036FD C0 E0            [24] 9549 	push	acc
      0036FF 74 80            [12] 9550 	mov	a,#0x80
      003701 C0 E0            [24] 9551 	push	acc
      003703 12r00r00         [24] 9552 	lcall	_printf
      003706 E5 81            [12] 9553 	mov	a,sp
      003708 24 F9            [12] 9554 	add	a,#0xf9
      00370A F5 81            [12] 9555 	mov	sp,a
      00370C D0 01            [24] 9556 	pop	ar1
      00370E D0 02            [24] 9557 	pop	ar2
      003710 D0 03            [24] 9558 	pop	ar3
      003712 D0 04            [24] 9559 	pop	ar4
      003714 D0 05            [24] 9560 	pop	ar5
                                   9561 ;	calc.c:35: printf("%011lo\t", d);
      003716 C0 05            [24] 9562 	push	ar5
      003718 C0 04            [24] 9563 	push	ar4
      00371A C0 03            [24] 9564 	push	ar3
      00371C C0 02            [24] 9565 	push	ar2
      00371E C0 01            [24] 9566 	push	ar1
      003720 C0 02            [24] 9567 	push	ar2
      003722 C0 03            [24] 9568 	push	ar3
      003724 C0 04            [24] 9569 	push	ar4
      003726 C0 05            [24] 9570 	push	ar5
      003728 74r0F            [12] 9571 	mov	a,#___str_2
      00372A C0 E0            [24] 9572 	push	acc
      00372C 74s00            [12] 9573 	mov	a,#(___str_2 >> 8)
      00372E C0 E0            [24] 9574 	push	acc
      003730 74 80            [12] 9575 	mov	a,#0x80
      003732 C0 E0            [24] 9576 	push	acc
      003734 12r00r00         [24] 9577 	lcall	_printf
      003737 E5 81            [12] 9578 	mov	a,sp
      003739 24 F9            [12] 9579 	add	a,#0xf9
      00373B F5 81            [12] 9580 	mov	sp,a
      00373D D0 01            [24] 9581 	pop	ar1
      00373F D0 02            [24] 9582 	pop	ar2
      003741 D0 03            [24] 9583 	pop	ar3
      003743 D0 04            [24] 9584 	pop	ar4
      003745 D0 05            [24] 9585 	pop	ar5
                                   9586 ;	calc.c:36: printbin(d);
      003747 E5*00            [12] 9587 	mov	a,_bp
      003749 24 16            [12] 9588 	add	a,#0x16
      00374B F8               [12] 9589 	mov	r0,a
      00374C A6 02            [24] 9590 	mov	@r0,ar2
      00374E 08               [12] 9591 	inc	r0
      00374F A6 03            [24] 9592 	mov	@r0,ar3
      003751 08               [12] 9593 	inc	r0
      003752 A6 04            [24] 9594 	mov	@r0,ar4
      003754 08               [12] 9595 	inc	r0
      003755 A6 05            [24] 9596 	mov	@r0,ar5
                                   9597 ;	calc.c:26: for (mask = 0x80000000lu; mask; mask >>= 1)
      003757 E5*00            [12] 9598 	mov	a,_bp
      003759 24 1A            [12] 9599 	add	a,#0x1a
      00375B F8               [12] 9600 	mov	r0,a
      00375C E4               [12] 9601 	clr	a
      00375D F6               [12] 9602 	mov	@r0,a
      00375E 08               [12] 9603 	inc	r0
      00375F F6               [12] 9604 	mov	@r0,a
      003760 08               [12] 9605 	inc	r0
      003761 F6               [12] 9606 	mov	@r0,a
      003762 08               [12] 9607 	inc	r0
      003763 76 80            [12] 9608 	mov	@r0,#0x80
      003765                       9609 00156$:
                                   9610 ;	calc.c:27: (void)putchar((d & mask) ? (int)'1' : (int)'0');
      003765 C0 01            [24] 9611 	push	ar1
      003767 E5*00            [12] 9612 	mov	a,_bp
      003769 24 16            [12] 9613 	add	a,#0x16
      00376B F8               [12] 9614 	mov	r0,a
      00376C 86 02            [24] 9615 	mov	ar2,@r0
      00376E 08               [12] 9616 	inc	r0
      00376F 86 03            [24] 9617 	mov	ar3,@r0
      003771 08               [12] 9618 	inc	r0
      003772 86 05            [24] 9619 	mov	ar5,@r0
      003774 08               [12] 9620 	inc	r0
      003775 86 07            [24] 9621 	mov	ar7,@r0
      003777 E5*00            [12] 9622 	mov	a,_bp
      003779 24 1A            [12] 9623 	add	a,#0x1a
      00377B F8               [12] 9624 	mov	r0,a
      00377C E6               [12] 9625 	mov	a,@r0
      00377D 52 02            [12] 9626 	anl	ar2,a
      00377F 08               [12] 9627 	inc	r0
      003780 E6               [12] 9628 	mov	a,@r0
      003781 52 03            [12] 9629 	anl	ar3,a
      003783 08               [12] 9630 	inc	r0
      003784 E6               [12] 9631 	mov	a,@r0
      003785 52 05            [12] 9632 	anl	ar5,a
      003787 08               [12] 9633 	inc	r0
      003788 E6               [12] 9634 	mov	a,@r0
      003789 52 07            [12] 9635 	anl	ar7,a
      00378B D0 01            [24] 9636 	pop	ar1
      00378D EA               [12] 9637 	mov	a,r2
      00378E 4B               [12] 9638 	orl	a,r3
      00378F 4D               [12] 9639 	orl	a,r5
      003790 4F               [12] 9640 	orl	a,r7
      003791 60 06            [24] 9641 	jz	00174$
      003793 7E 31            [12] 9642 	mov	r6,#0x31
      003795 7F 00            [12] 9643 	mov	r7,#0x00
      003797 80 04            [24] 9644 	sjmp	00175$
      003799                       9645 00174$:
      003799 7E 30            [12] 9646 	mov	r6,#0x30
      00379B 7F 00            [12] 9647 	mov	r7,#0x00
      00379D                       9648 00175$:
      00379D 8E 82            [24] 9649 	mov	dpl,r6
      00379F 8F 83            [24] 9650 	mov	dph,r7
      0037A1 C0 01            [24] 9651 	push	ar1
      0037A3 12r00r00         [24] 9652 	lcall	_putchar
      0037A6 D0 01            [24] 9653 	pop	ar1
                                   9654 ;	calc.c:26: for (mask = 0x80000000lu; mask; mask >>= 1)
      0037A8 E5*00            [12] 9655 	mov	a,_bp
      0037AA 24 1A            [12] 9656 	add	a,#0x1a
      0037AC F8               [12] 9657 	mov	r0,a
      0037AD 08               [12] 9658 	inc	r0
      0037AE 08               [12] 9659 	inc	r0
      0037AF 08               [12] 9660 	inc	r0
      0037B0 E6               [12] 9661 	mov	a,@r0
      0037B1 C3               [12] 9662 	clr	c
      0037B2 13               [12] 9663 	rrc	a
      0037B3 F6               [12] 9664 	mov	@r0,a
      0037B4 18               [12] 9665 	dec	r0
      0037B5 E6               [12] 9666 	mov	a,@r0
      0037B6 13               [12] 9667 	rrc	a
      0037B7 F6               [12] 9668 	mov	@r0,a
      0037B8 18               [12] 9669 	dec	r0
      0037B9 E6               [12] 9670 	mov	a,@r0
      0037BA 13               [12] 9671 	rrc	a
      0037BB F6               [12] 9672 	mov	@r0,a
      0037BC 18               [12] 9673 	dec	r0
      0037BD E6               [12] 9674 	mov	a,@r0
      0037BE 13               [12] 9675 	rrc	a
      0037BF F6               [12] 9676 	mov	@r0,a
      0037C0 E5*00            [12] 9677 	mov	a,_bp
      0037C2 24 1A            [12] 9678 	add	a,#0x1a
      0037C4 F8               [12] 9679 	mov	r0,a
      0037C5 E6               [12] 9680 	mov	a,@r0
      0037C6 08               [12] 9681 	inc	r0
      0037C7 46               [12] 9682 	orl	a,@r0
      0037C8 08               [12] 9683 	inc	r0
      0037C9 46               [12] 9684 	orl	a,@r0
      0037CA 08               [12] 9685 	inc	r0
      0037CB 46               [12] 9686 	orl	a,@r0
      0037CC 70 97            [24] 9687 	jnz	00156$
                                   9688 ;	calc.c:382: if (n > 0) printall(vals[1]);
      0037CE                       9689 00108$:
                                   9690 ;	calc.c:383: printstr("\r\nSSTOP0\t");
      0037CE 7Dr08            [12] 9691 	mov	r5,#___str_20
      0037D0 7Es01            [12] 9692 	mov	r6,#(___str_20 >> 8)
      0037D2 7F 80            [12] 9693 	mov	r7,#0x80
                                   9694 ;	calc.c:20: return;
      0037D4                       9695 00159$:
                                   9696 ;	calc.c:18: for (; *s; s++) putchar(*s);
      0037D4 8D 82            [24] 9697 	mov	dpl,r5
      0037D6 8E 83            [24] 9698 	mov	dph,r6
      0037D8 8F F0            [24] 9699 	mov	b,r7
      0037DA 12r00r00         [24] 9700 	lcall	__gptrget
      0037DD FC               [12] 9701 	mov	r4,a
      0037DE 60 20            [24] 9702 	jz	00132$
      0037E0 7B 00            [12] 9703 	mov	r3,#0x00
      0037E2 8C 82            [24] 9704 	mov	dpl,r4
      0037E4 8B 83            [24] 9705 	mov	dph,r3
      0037E6 C0 07            [24] 9706 	push	ar7
      0037E8 C0 06            [24] 9707 	push	ar6
      0037EA C0 05            [24] 9708 	push	ar5
      0037EC C0 01            [24] 9709 	push	ar1
      0037EE 12r00r00         [24] 9710 	lcall	_putchar
      0037F1 D0 01            [24] 9711 	pop	ar1
      0037F3 D0 05            [24] 9712 	pop	ar5
      0037F5 D0 06            [24] 9713 	pop	ar6
      0037F7 D0 07            [24] 9714 	pop	ar7
      0037F9 0D               [12] 9715 	inc	r5
                                   9716 ;	calc.c:383: printstr("\r\nSSTOP0\t");
      0037FA BD 00 D7         [24] 9717 	cjne	r5,#0x00,00159$
      0037FD 0E               [12] 9718 	inc	r6
      0037FE 80 D4            [24] 9719 	sjmp	00159$
      003800                       9720 00132$:
                                   9721 ;	calc.c:384: if (n > 1) printall(vals[0]);
      003800 E5*00            [12] 9722 	mov	a,_bp
      003802 24 09            [12] 9723 	add	a,#0x09
      003804 F8               [12] 9724 	mov	r0,a
      003805 C3               [12] 9725 	clr	c
      003806 74 01            [12] 9726 	mov	a,#0x01
      003808 96               [12] 9727 	subb	a,@r0
      003809 74 80            [12] 9728 	mov	a,#(0x00 ^ 0x80)
      00380B 08               [12] 9729 	inc	r0
      00380C 86 F0            [24] 9730 	mov	b,@r0
      00380E 63 F0 80         [24] 9731 	xrl	b,#0x80
      003811 95 F0            [12] 9732 	subb	a,b
      003813 40 03            [24] 9733 	jc	00341$
      003815 02r39r29         [24] 9734 	ljmp	00110$
      003818                       9735 00341$:
      003818 87 04            [24] 9736 	mov	ar4,@r1
      00381A 09               [12] 9737 	inc	r1
      00381B 87 05            [24] 9738 	mov	ar5,@r1
      00381D 09               [12] 9739 	inc	r1
      00381E 87 06            [24] 9740 	mov	ar6,@r1
      003820 09               [12] 9741 	inc	r1
      003821 87 07            [24] 9742 	mov	ar7,@r1
                                   9743 ;	calc.c:33: printf("%08lx\t", d);
      003823 C0 07            [24] 9744 	push	ar7
      003825 C0 06            [24] 9745 	push	ar6
      003827 C0 05            [24] 9746 	push	ar5
      003829 C0 04            [24] 9747 	push	ar4
      00382B C0 04            [24] 9748 	push	ar4
      00382D C0 05            [24] 9749 	push	ar5
      00382F C0 06            [24] 9750 	push	ar6
      003831 C0 07            [24] 9751 	push	ar7
      003833 74r00            [12] 9752 	mov	a,#___str_0
      003835 C0 E0            [24] 9753 	push	acc
      003837 74s00            [12] 9754 	mov	a,#(___str_0 >> 8)
      003839 C0 E0            [24] 9755 	push	acc
      00383B 74 80            [12] 9756 	mov	a,#0x80
      00383D C0 E0            [24] 9757 	push	acc
      00383F 12r00r00         [24] 9758 	lcall	_printf
      003842 E5 81            [12] 9759 	mov	a,sp
      003844 24 F9            [12] 9760 	add	a,#0xf9
      003846 F5 81            [12] 9761 	mov	sp,a
      003848 D0 04            [24] 9762 	pop	ar4
      00384A D0 05            [24] 9763 	pop	ar5
      00384C D0 06            [24] 9764 	pop	ar6
      00384E D0 07            [24] 9765 	pop	ar7
                                   9766 ;	calc.c:34: printf("% 11ld\t", d);
      003850 C0 07            [24] 9767 	push	ar7
      003852 C0 06            [24] 9768 	push	ar6
      003854 C0 05            [24] 9769 	push	ar5
      003856 C0 04            [24] 9770 	push	ar4
      003858 C0 04            [24] 9771 	push	ar4
      00385A C0 05            [24] 9772 	push	ar5
      00385C C0 06            [24] 9773 	push	ar6
      00385E C0 07            [24] 9774 	push	ar7
      003860 74r07            [12] 9775 	mov	a,#___str_1
      003862 C0 E0            [24] 9776 	push	acc
      003864 74s00            [12] 9777 	mov	a,#(___str_1 >> 8)
      003866 C0 E0            [24] 9778 	push	acc
      003868 74 80            [12] 9779 	mov	a,#0x80
      00386A C0 E0            [24] 9780 	push	acc
      00386C 12r00r00         [24] 9781 	lcall	_printf
      00386F E5 81            [12] 9782 	mov	a,sp
      003871 24 F9            [12] 9783 	add	a,#0xf9
      003873 F5 81            [12] 9784 	mov	sp,a
      003875 D0 04            [24] 9785 	pop	ar4
      003877 D0 05            [24] 9786 	pop	ar5
      003879 D0 06            [24] 9787 	pop	ar6
      00387B D0 07            [24] 9788 	pop	ar7
                                   9789 ;	calc.c:35: printf("%011lo\t", d);
      00387D C0 07            [24] 9790 	push	ar7
      00387F C0 06            [24] 9791 	push	ar6
      003881 C0 05            [24] 9792 	push	ar5
      003883 C0 04            [24] 9793 	push	ar4
      003885 C0 04            [24] 9794 	push	ar4
      003887 C0 05            [24] 9795 	push	ar5
      003889 C0 06            [24] 9796 	push	ar6
      00388B C0 07            [24] 9797 	push	ar7
      00388D 74r0F            [12] 9798 	mov	a,#___str_2
      00388F C0 E0            [24] 9799 	push	acc
      003891 74s00            [12] 9800 	mov	a,#(___str_2 >> 8)
      003893 C0 E0            [24] 9801 	push	acc
      003895 74 80            [12] 9802 	mov	a,#0x80
      003897 C0 E0            [24] 9803 	push	acc
      003899 12r00r00         [24] 9804 	lcall	_printf
      00389C E5 81            [12] 9805 	mov	a,sp
      00389E 24 F9            [12] 9806 	add	a,#0xf9
      0038A0 F5 81            [12] 9807 	mov	sp,a
      0038A2 D0 04            [24] 9808 	pop	ar4
      0038A4 D0 05            [24] 9809 	pop	ar5
      0038A6 D0 06            [24] 9810 	pop	ar6
      0038A8 D0 07            [24] 9811 	pop	ar7
                                   9812 ;	calc.c:36: printbin(d);
      0038AA E5*00            [12] 9813 	mov	a,_bp
      0038AC 24 16            [12] 9814 	add	a,#0x16
      0038AE F8               [12] 9815 	mov	r0,a
      0038AF A6 04            [24] 9816 	mov	@r0,ar4
      0038B1 08               [12] 9817 	inc	r0
      0038B2 A6 05            [24] 9818 	mov	@r0,ar5
      0038B4 08               [12] 9819 	inc	r0
      0038B5 A6 06            [24] 9820 	mov	@r0,ar6
      0038B7 08               [12] 9821 	inc	r0
      0038B8 A6 07            [24] 9822 	mov	@r0,ar7
                                   9823 ;	calc.c:26: for (mask = 0x80000000lu; mask; mask >>= 1)
      0038BA E5*00            [12] 9824 	mov	a,_bp
      0038BC 24 1A            [12] 9825 	add	a,#0x1a
      0038BE F8               [12] 9826 	mov	r0,a
      0038BF E4               [12] 9827 	clr	a
      0038C0 F6               [12] 9828 	mov	@r0,a
      0038C1 08               [12] 9829 	inc	r0
      0038C2 F6               [12] 9830 	mov	@r0,a
      0038C3 08               [12] 9831 	inc	r0
      0038C4 F6               [12] 9832 	mov	@r0,a
      0038C5 08               [12] 9833 	inc	r0
      0038C6 76 80            [12] 9834 	mov	@r0,#0x80
      0038C8                       9835 00161$:
                                   9836 ;	calc.c:27: (void)putchar((d & mask) ? (int)'1' : (int)'0');
      0038C8 E5*00            [12] 9837 	mov	a,_bp
      0038CA 24 16            [12] 9838 	add	a,#0x16
      0038CC F8               [12] 9839 	mov	r0,a
      0038CD 86 04            [24] 9840 	mov	ar4,@r0
      0038CF 08               [12] 9841 	inc	r0
      0038D0 86 05            [24] 9842 	mov	ar5,@r0
      0038D2 08               [12] 9843 	inc	r0
      0038D3 86 06            [24] 9844 	mov	ar6,@r0
      0038D5 08               [12] 9845 	inc	r0
      0038D6 86 07            [24] 9846 	mov	ar7,@r0
      0038D8 E5*00            [12] 9847 	mov	a,_bp
      0038DA 24 1A            [12] 9848 	add	a,#0x1a
      0038DC F8               [12] 9849 	mov	r0,a
      0038DD E6               [12] 9850 	mov	a,@r0
      0038DE 52 04            [12] 9851 	anl	ar4,a
      0038E0 08               [12] 9852 	inc	r0
      0038E1 E6               [12] 9853 	mov	a,@r0
      0038E2 52 05            [12] 9854 	anl	ar5,a
      0038E4 08               [12] 9855 	inc	r0
      0038E5 E6               [12] 9856 	mov	a,@r0
      0038E6 52 06            [12] 9857 	anl	ar6,a
      0038E8 08               [12] 9858 	inc	r0
      0038E9 E6               [12] 9859 	mov	a,@r0
      0038EA 52 07            [12] 9860 	anl	ar7,a
      0038EC EC               [12] 9861 	mov	a,r4
      0038ED 4D               [12] 9862 	orl	a,r5
      0038EE 4E               [12] 9863 	orl	a,r6
      0038EF 4F               [12] 9864 	orl	a,r7
      0038F0 60 06            [24] 9865 	jz	00176$
      0038F2 7E 31            [12] 9866 	mov	r6,#0x31
      0038F4 7F 00            [12] 9867 	mov	r7,#0x00
      0038F6 80 04            [24] 9868 	sjmp	00177$
      0038F8                       9869 00176$:
      0038F8 7E 30            [12] 9870 	mov	r6,#0x30
      0038FA 7F 00            [12] 9871 	mov	r7,#0x00
      0038FC                       9872 00177$:
      0038FC 8E 82            [24] 9873 	mov	dpl,r6
      0038FE 8F 83            [24] 9874 	mov	dph,r7
      003900 12r00r00         [24] 9875 	lcall	_putchar
                                   9876 ;	calc.c:26: for (mask = 0x80000000lu; mask; mask >>= 1)
      003903 E5*00            [12] 9877 	mov	a,_bp
      003905 24 1A            [12] 9878 	add	a,#0x1a
      003907 F8               [12] 9879 	mov	r0,a
      003908 08               [12] 9880 	inc	r0
      003909 08               [12] 9881 	inc	r0
      00390A 08               [12] 9882 	inc	r0
      00390B E6               [12] 9883 	mov	a,@r0
      00390C C3               [12] 9884 	clr	c
      00390D 13               [12] 9885 	rrc	a
      00390E F6               [12] 9886 	mov	@r0,a
      00390F 18               [12] 9887 	dec	r0
      003910 E6               [12] 9888 	mov	a,@r0
      003911 13               [12] 9889 	rrc	a
      003912 F6               [12] 9890 	mov	@r0,a
      003913 18               [12] 9891 	dec	r0
      003914 E6               [12] 9892 	mov	a,@r0
      003915 13               [12] 9893 	rrc	a
      003916 F6               [12] 9894 	mov	@r0,a
      003917 18               [12] 9895 	dec	r0
      003918 E6               [12] 9896 	mov	a,@r0
      003919 13               [12] 9897 	rrc	a
      00391A F6               [12] 9898 	mov	@r0,a
      00391B E5*00            [12] 9899 	mov	a,_bp
      00391D 24 1A            [12] 9900 	add	a,#0x1a
      00391F F8               [12] 9901 	mov	r0,a
      003920 E6               [12] 9902 	mov	a,@r0
      003921 08               [12] 9903 	inc	r0
      003922 46               [12] 9904 	orl	a,@r0
      003923 08               [12] 9905 	inc	r0
      003924 46               [12] 9906 	orl	a,@r0
      003925 08               [12] 9907 	inc	r0
      003926 46               [12] 9908 	orl	a,@r0
      003927 70 9F            [24] 9909 	jnz	00161$
                                   9910 ;	calc.c:384: if (n > 1) printall(vals[0]);
      003929                       9911 00110$:
                                   9912 ;	calc.c:385: printstr("\r\n");
      003929 7Dr17            [12] 9913 	mov	r5,#___str_3
      00392B 7Es00            [12] 9914 	mov	r6,#(___str_3 >> 8)
      00392D 7F 80            [12] 9915 	mov	r7,#0x80
                                   9916 ;	calc.c:20: return;
      00392F                       9917 00164$:
                                   9918 ;	calc.c:18: for (; *s; s++) putchar(*s);
      00392F 8D 82            [24] 9919 	mov	dpl,r5
      003931 8E 83            [24] 9920 	mov	dph,r6
      003933 8F F0            [24] 9921 	mov	b,r7
      003935 12r00r00         [24] 9922 	lcall	__gptrget
      003938 FC               [12] 9923 	mov	r4,a
      003939 60 1C            [24] 9924 	jz	00137$
      00393B 7B 00            [12] 9925 	mov	r3,#0x00
      00393D 8C 82            [24] 9926 	mov	dpl,r4
      00393F 8B 83            [24] 9927 	mov	dph,r3
      003941 C0 07            [24] 9928 	push	ar7
      003943 C0 06            [24] 9929 	push	ar6
      003945 C0 05            [24] 9930 	push	ar5
      003947 12r00r00         [24] 9931 	lcall	_putchar
      00394A D0 05            [24] 9932 	pop	ar5
      00394C D0 06            [24] 9933 	pop	ar6
      00394E D0 07            [24] 9934 	pop	ar7
      003950 0D               [12] 9935 	inc	r5
                                   9936 ;	calc.c:385: printstr("\r\n");
      003951 BD 00 DB         [24] 9937 	cjne	r5,#0x00,00164$
      003954 0E               [12] 9938 	inc	r6
      003955 80 D8            [24] 9939 	sjmp	00164$
      003957                       9940 00137$:
                                   9941 ;	calc.c:387: return 1;
      003957 90 00 01         [24] 9942 	mov	dptr,#0x0001
                                   9943 ;	calc.c:388: }
      00395A 85*00 81         [24] 9944 	mov	sp,_bp
      00395D D0*00            [24] 9945 	pop	_bp
      00395F 22               [24] 9946 	ret
                                   9947 ;------------------------------------------------------------
                                   9948 ;Allocation info for local variables in function 'help'
                                   9949 ;------------------------------------------------------------
                                   9950 ;delta                     Allocated to stack - _bp -5
                                   9951 ;_ctx                      Allocated to registers 
                                   9952 ;__1310720151              Allocated to registers 
                                   9953 ;s                         Allocated to registers r5 r6 r7 
                                   9954 ;__1310720153              Allocated to registers 
                                   9955 ;s                         Allocated to registers r5 r6 r7 
                                   9956 ;__1310720155              Allocated to registers 
                                   9957 ;s                         Allocated to registers r5 r6 r7 
                                   9958 ;__1310720157              Allocated to registers 
                                   9959 ;s                         Allocated to registers r5 r6 r7 
                                   9960 ;__1310720159              Allocated to registers 
                                   9961 ;s                         Allocated to registers r5 r6 r7 
                                   9962 ;__1310720161              Allocated to registers 
                                   9963 ;s                         Allocated to registers r5 r6 r7 
                                   9964 ;__1310720163              Allocated to registers 
                                   9965 ;s                         Allocated to registers r5 r6 r7 
                                   9966 ;__1310720165              Allocated to registers 
                                   9967 ;s                         Allocated to registers r5 r6 r7 
                                   9968 ;__1310720167              Allocated to registers 
                                   9969 ;s                         Allocated to registers r5 r6 r7 
                                   9970 ;__1310720169              Allocated to registers 
                                   9971 ;s                         Allocated to registers r5 r6 r7 
                                   9972 ;__1310720171              Allocated to registers 
                                   9973 ;s                         Allocated to registers r5 r6 r7 
                                   9974 ;__1310720173              Allocated to registers 
                                   9975 ;s                         Allocated to registers r5 r6 r7 
                                   9976 ;__1310720175              Allocated to registers 
                                   9977 ;s                         Allocated to registers r5 r6 r7 
                                   9978 ;__1310720177              Allocated to registers 
                                   9979 ;s                         Allocated to registers r5 r6 r7 
                                   9980 ;__1310720179              Allocated to registers 
                                   9981 ;s                         Allocated to registers r5 r6 r7 
                                   9982 ;__1310720181              Allocated to registers 
                                   9983 ;s                         Allocated to registers r5 r6 r7 
                                   9984 ;__1310720183              Allocated to registers 
                                   9985 ;s                         Allocated to registers r5 r6 r7 
                                   9986 ;__1310720185              Allocated to registers 
                                   9987 ;s                         Allocated to registers r5 r6 r7 
                                   9988 ;__1310720187              Allocated to registers 
                                   9989 ;s                         Allocated to registers r5 r6 r7 
                                   9990 ;__1310720189              Allocated to registers 
                                   9991 ;s                         Allocated to registers r5 r6 r7 
                                   9992 ;__1310720191              Allocated to registers 
                                   9993 ;s                         Allocated to registers r5 r6 r7 
                                   9994 ;__1310720193              Allocated to registers 
                                   9995 ;s                         Allocated to registers r5 r6 r7 
                                   9996 ;__1310720195              Allocated to registers 
                                   9997 ;s                         Allocated to registers r5 r6 r7 
                                   9998 ;__1310720197              Allocated to registers 
                                   9999 ;s                         Allocated to registers r5 r6 r7 
                                  10000 ;__1310720199              Allocated to registers 
                                  10001 ;s                         Allocated to registers r5 r6 r7 
                                  10002 ;__1310720201              Allocated to registers 
                                  10003 ;s                         Allocated to registers r5 r6 r7 
                                  10004 ;__1310720203              Allocated to registers 
                                  10005 ;s                         Allocated to registers r5 r6 r7 
                                  10006 ;__1310720205              Allocated to registers 
                                  10007 ;s                         Allocated to registers r5 r6 r7 
                                  10008 ;__1310720207              Allocated to registers 
                                  10009 ;s                         Allocated to registers r5 r6 r7 
                                  10010 ;__1310720209              Allocated to registers 
                                  10011 ;s                         Allocated to registers r5 r6 r7 
                                  10012 ;__1310720211              Allocated to registers 
                                  10013 ;s                         Allocated to registers r5 r6 r7 
                                  10014 ;------------------------------------------------------------
                                  10015 ;	calc.c:390: static int help(void *_ctx, delta_t *delta) __reentrant {
                                  10016 ;	-----------------------------------------
                                  10017 ;	 function help
                                  10018 ;	-----------------------------------------
      003960                      10019 _help:
      003960 C0*00            [24]10020 	push	_bp
      003962 85 81*00         [24]10021 	mov	_bp,sp
                                  10022 ;	calc.c:394: printstr("\r\nHhOo\tbase 16 10 8 2\r\n");
      003965 7Dr12            [12]10023 	mov	r5,#___str_21
      003967 7Es01            [12]10024 	mov	r6,#(___str_21 >> 8)
      003969 7F 80            [12]10025 	mov	r7,#0x80
                                  10026 ;	calc.c:20: return;
      00396B                      10027 00164$:
                                  10028 ;	calc.c:18: for (; *s; s++) putchar(*s);
      00396B 8D 82            [24]10029 	mov	dpl,r5
      00396D 8E 83            [24]10030 	mov	dph,r6
      00396F 8F F0            [24]10031 	mov	b,r7
      003971 12r00r00         [24]10032 	lcall	__gptrget
      003974 FC               [12]10033 	mov	r4,a
      003975 60 1C            [24]10034 	jz	00102$
      003977 7B 00            [12]10035 	mov	r3,#0x00
      003979 8C 82            [24]10036 	mov	dpl,r4
      00397B 8B 83            [24]10037 	mov	dph,r3
      00397D C0 07            [24]10038 	push	ar7
      00397F C0 06            [24]10039 	push	ar6
      003981 C0 05            [24]10040 	push	ar5
      003983 12r00r00         [24]10041 	lcall	_putchar
      003986 D0 05            [24]10042 	pop	ar5
      003988 D0 06            [24]10043 	pop	ar6
      00398A D0 07            [24]10044 	pop	ar7
      00398C 0D               [12]10045 	inc	r5
                                  10046 ;	calc.c:394: printstr("\r\nHhOo\tbase 16 10 8 2\r\n");
      00398D BD 00 DB         [24]10047 	cjne	r5,#0x00,00164$
      003990 0E               [12]10048 	inc	r6
      003991 80 D8            [24]10049 	sjmp	00164$
      003993                      10050 00102$:
                                  10051 ;	calc.c:395: printstr("p.\tpop top\r\n");
      003993 7Dr2A            [12]10052 	mov	r5,#___str_22
      003995 7Es01            [12]10053 	mov	r6,#(___str_22 >> 8)
      003997 7F 80            [12]10054 	mov	r7,#0x80
                                  10055 ;	calc.c:20: return;
      003999                      10056 00167$:
                                  10057 ;	calc.c:18: for (; *s; s++) putchar(*s);
      003999 8D 82            [24]10058 	mov	dpl,r5
      00399B 8E 83            [24]10059 	mov	dph,r6
      00399D 8F F0            [24]10060 	mov	b,r7
      00399F 12r00r00         [24]10061 	lcall	__gptrget
      0039A2 FC               [12]10062 	mov	r4,a
      0039A3 60 1C            [24]10063 	jz	00104$
      0039A5 7B 00            [12]10064 	mov	r3,#0x00
      0039A7 8C 82            [24]10065 	mov	dpl,r4
      0039A9 8B 83            [24]10066 	mov	dph,r3
      0039AB C0 07            [24]10067 	push	ar7
      0039AD C0 06            [24]10068 	push	ar6
      0039AF C0 05            [24]10069 	push	ar5
      0039B1 12r00r00         [24]10070 	lcall	_putchar
      0039B4 D0 05            [24]10071 	pop	ar5
      0039B6 D0 06            [24]10072 	pop	ar6
      0039B8 D0 07            [24]10073 	pop	ar7
      0039BA 0D               [12]10074 	inc	r5
                                  10075 ;	calc.c:395: printstr("p.\tpop top\r\n");
      0039BB BD 00 DB         [24]10076 	cjne	r5,#0x00,00167$
      0039BE 0E               [12]10077 	inc	r6
      0039BF 80 D8            [24]10078 	sjmp	00167$
      0039C1                      10079 00104$:
                                  10080 ;	calc.c:396: printstr("P\tpop stack\r\n");
      0039C1 7Dr37            [12]10081 	mov	r5,#___str_23
      0039C3 7Es01            [12]10082 	mov	r6,#(___str_23 >> 8)
      0039C5 7F 80            [12]10083 	mov	r7,#0x80
                                  10084 ;	calc.c:20: return;
      0039C7                      10085 00170$:
                                  10086 ;	calc.c:18: for (; *s; s++) putchar(*s);
      0039C7 8D 82            [24]10087 	mov	dpl,r5
      0039C9 8E 83            [24]10088 	mov	dph,r6
      0039CB 8F F0            [24]10089 	mov	b,r7
      0039CD 12r00r00         [24]10090 	lcall	__gptrget
      0039D0 FC               [12]10091 	mov	r4,a
      0039D1 60 1C            [24]10092 	jz	00106$
      0039D3 7B 00            [12]10093 	mov	r3,#0x00
      0039D5 8C 82            [24]10094 	mov	dpl,r4
      0039D7 8B 83            [24]10095 	mov	dph,r3
      0039D9 C0 07            [24]10096 	push	ar7
      0039DB C0 06            [24]10097 	push	ar6
      0039DD C0 05            [24]10098 	push	ar5
      0039DF 12r00r00         [24]10099 	lcall	_putchar
      0039E2 D0 05            [24]10100 	pop	ar5
      0039E4 D0 06            [24]10101 	pop	ar6
      0039E6 D0 07            [24]10102 	pop	ar7
      0039E8 0D               [12]10103 	inc	r5
                                  10104 ;	calc.c:396: printstr("P\tpop stack\r\n");
      0039E9 BD 00 DB         [24]10105 	cjne	r5,#0x00,00170$
      0039EC 0E               [12]10106 	inc	r6
      0039ED 80 D8            [24]10107 	sjmp	00170$
      0039EF                      10108 00106$:
                                  10109 ;	calc.c:397: printstr("v\tpeek top\r\n");
      0039EF 7Dr45            [12]10110 	mov	r5,#___str_24
      0039F1 7Es01            [12]10111 	mov	r6,#(___str_24 >> 8)
      0039F3 7F 80            [12]10112 	mov	r7,#0x80
                                  10113 ;	calc.c:20: return;
      0039F5                      10114 00173$:
                                  10115 ;	calc.c:18: for (; *s; s++) putchar(*s);
      0039F5 8D 82            [24]10116 	mov	dpl,r5
      0039F7 8E 83            [24]10117 	mov	dph,r6
      0039F9 8F F0            [24]10118 	mov	b,r7
      0039FB 12r00r00         [24]10119 	lcall	__gptrget
      0039FE FC               [12]10120 	mov	r4,a
      0039FF 60 1C            [24]10121 	jz	00108$
      003A01 7B 00            [12]10122 	mov	r3,#0x00
      003A03 8C 82            [24]10123 	mov	dpl,r4
      003A05 8B 83            [24]10124 	mov	dph,r3
      003A07 C0 07            [24]10125 	push	ar7
      003A09 C0 06            [24]10126 	push	ar6
      003A0B C0 05            [24]10127 	push	ar5
      003A0D 12r00r00         [24]10128 	lcall	_putchar
      003A10 D0 05            [24]10129 	pop	ar5
      003A12 D0 06            [24]10130 	pop	ar6
      003A14 D0 07            [24]10131 	pop	ar7
      003A16 0D               [12]10132 	inc	r5
                                  10133 ;	calc.c:397: printstr("v\tpeek top\r\n");
      003A17 BD 00 DB         [24]10134 	cjne	r5,#0x00,00173$
      003A1A 0E               [12]10135 	inc	r6
      003A1B 80 D8            [24]10136 	sjmp	00173$
      003A1D                      10137 00108$:
                                  10138 ;	calc.c:398: printstr("V\tpeek stack\r\n");
      003A1D 7Dr52            [12]10139 	mov	r5,#___str_25
      003A1F 7Es01            [12]10140 	mov	r6,#(___str_25 >> 8)
      003A21 7F 80            [12]10141 	mov	r7,#0x80
                                  10142 ;	calc.c:20: return;
      003A23                      10143 00176$:
                                  10144 ;	calc.c:18: for (; *s; s++) putchar(*s);
      003A23 8D 82            [24]10145 	mov	dpl,r5
      003A25 8E 83            [24]10146 	mov	dph,r6
      003A27 8F F0            [24]10147 	mov	b,r7
      003A29 12r00r00         [24]10148 	lcall	__gptrget
      003A2C FC               [12]10149 	mov	r4,a
      003A2D 60 1C            [24]10150 	jz	00110$
      003A2F 7B 00            [12]10151 	mov	r3,#0x00
      003A31 8C 82            [24]10152 	mov	dpl,r4
      003A33 8B 83            [24]10153 	mov	dph,r3
      003A35 C0 07            [24]10154 	push	ar7
      003A37 C0 06            [24]10155 	push	ar6
      003A39 C0 05            [24]10156 	push	ar5
      003A3B 12r00r00         [24]10157 	lcall	_putchar
      003A3E D0 05            [24]10158 	pop	ar5
      003A40 D0 06            [24]10159 	pop	ar6
      003A42 D0 07            [24]10160 	pop	ar7
      003A44 0D               [12]10161 	inc	r5
                                  10162 ;	calc.c:398: printstr("V\tpeek stack\r\n");
      003A45 BD 00 DB         [24]10163 	cjne	r5,#0x00,00176$
      003A48 0E               [12]10164 	inc	r6
      003A49 80 D8            [24]10165 	sjmp	00176$
      003A4B                      10166 00110$:
                                  10167 ;	calc.c:399: printstr("i\treset acc\r\n");
      003A4B 7Dr61            [12]10168 	mov	r5,#___str_26
      003A4D 7Es01            [12]10169 	mov	r6,#(___str_26 >> 8)
      003A4F 7F 80            [12]10170 	mov	r7,#0x80
                                  10171 ;	calc.c:20: return;
      003A51                      10172 00179$:
                                  10173 ;	calc.c:18: for (; *s; s++) putchar(*s);
      003A51 8D 82            [24]10174 	mov	dpl,r5
      003A53 8E 83            [24]10175 	mov	dph,r6
      003A55 8F F0            [24]10176 	mov	b,r7
      003A57 12r00r00         [24]10177 	lcall	__gptrget
      003A5A FC               [12]10178 	mov	r4,a
      003A5B 60 1C            [24]10179 	jz	00112$
      003A5D 7B 00            [12]10180 	mov	r3,#0x00
      003A5F 8C 82            [24]10181 	mov	dpl,r4
      003A61 8B 83            [24]10182 	mov	dph,r3
      003A63 C0 07            [24]10183 	push	ar7
      003A65 C0 06            [24]10184 	push	ar6
      003A67 C0 05            [24]10185 	push	ar5
      003A69 12r00r00         [24]10186 	lcall	_putchar
      003A6C D0 05            [24]10187 	pop	ar5
      003A6E D0 06            [24]10188 	pop	ar6
      003A70 D0 07            [24]10189 	pop	ar7
      003A72 0D               [12]10190 	inc	r5
                                  10191 ;	calc.c:399: printstr("i\treset acc\r\n");
      003A73 BD 00 DB         [24]10192 	cjne	r5,#0x00,00179$
      003A76 0E               [12]10193 	inc	r6
      003A77 80 D8            [24]10194 	sjmp	00179$
      003A79                      10195 00112$:
                                  10196 ;	calc.c:400: printstr("I\treset and discard acc\r\n");
      003A79 7Dr6F            [12]10197 	mov	r5,#___str_27
      003A7B 7Es01            [12]10198 	mov	r6,#(___str_27 >> 8)
      003A7D 7F 80            [12]10199 	mov	r7,#0x80
                                  10200 ;	calc.c:20: return;
      003A7F                      10201 00182$:
                                  10202 ;	calc.c:18: for (; *s; s++) putchar(*s);
      003A7F 8D 82            [24]10203 	mov	dpl,r5
      003A81 8E 83            [24]10204 	mov	dph,r6
      003A83 8F F0            [24]10205 	mov	b,r7
      003A85 12r00r00         [24]10206 	lcall	__gptrget
      003A88 FC               [12]10207 	mov	r4,a
      003A89 60 1C            [24]10208 	jz	00114$
      003A8B 7B 00            [12]10209 	mov	r3,#0x00
      003A8D 8C 82            [24]10210 	mov	dpl,r4
      003A8F 8B 83            [24]10211 	mov	dph,r3
      003A91 C0 07            [24]10212 	push	ar7
      003A93 C0 06            [24]10213 	push	ar6
      003A95 C0 05            [24]10214 	push	ar5
      003A97 12r00r00         [24]10215 	lcall	_putchar
      003A9A D0 05            [24]10216 	pop	ar5
      003A9C D0 06            [24]10217 	pop	ar6
      003A9E D0 07            [24]10218 	pop	ar7
      003AA0 0D               [12]10219 	inc	r5
                                  10220 ;	calc.c:400: printstr("I\treset and discard acc\r\n");
      003AA1 BD 00 DB         [24]10221 	cjne	r5,#0x00,00182$
      003AA4 0E               [12]10222 	inc	r6
      003AA5 80 D8            [24]10223 	sjmp	00182$
      003AA7                      10224 00114$:
                                  10225 ;	calc.c:401: printstr("x\texchange top 2\r\n");
      003AA7 7Dr89            [12]10226 	mov	r5,#___str_28
      003AA9 7Es01            [12]10227 	mov	r6,#(___str_28 >> 8)
      003AAB 7F 80            [12]10228 	mov	r7,#0x80
                                  10229 ;	calc.c:20: return;
      003AAD                      10230 00185$:
                                  10231 ;	calc.c:18: for (; *s; s++) putchar(*s);
      003AAD 8D 82            [24]10232 	mov	dpl,r5
      003AAF 8E 83            [24]10233 	mov	dph,r6
      003AB1 8F F0            [24]10234 	mov	b,r7
      003AB3 12r00r00         [24]10235 	lcall	__gptrget
      003AB6 FC               [12]10236 	mov	r4,a
      003AB7 60 1C            [24]10237 	jz	00116$
      003AB9 7B 00            [12]10238 	mov	r3,#0x00
      003ABB 8C 82            [24]10239 	mov	dpl,r4
      003ABD 8B 83            [24]10240 	mov	dph,r3
      003ABF C0 07            [24]10241 	push	ar7
      003AC1 C0 06            [24]10242 	push	ar6
      003AC3 C0 05            [24]10243 	push	ar5
      003AC5 12r00r00         [24]10244 	lcall	_putchar
      003AC8 D0 05            [24]10245 	pop	ar5
      003ACA D0 06            [24]10246 	pop	ar6
      003ACC D0 07            [24]10247 	pop	ar7
      003ACE 0D               [12]10248 	inc	r5
                                  10249 ;	calc.c:401: printstr("x\texchange top 2\r\n");
      003ACF BD 00 DB         [24]10250 	cjne	r5,#0x00,00185$
      003AD2 0E               [12]10251 	inc	r6
      003AD3 80 D8            [24]10252 	sjmp	00185$
      003AD5                      10253 00116$:
                                  10254 ;	calc.c:402: printstr("X\texchange stacks primary <-> secondary\r\n");
      003AD5 7Dr9C            [12]10255 	mov	r5,#___str_29
      003AD7 7Es01            [12]10256 	mov	r6,#(___str_29 >> 8)
      003AD9 7F 80            [12]10257 	mov	r7,#0x80
                                  10258 ;	calc.c:20: return;
      003ADB                      10259 00188$:
                                  10260 ;	calc.c:18: for (; *s; s++) putchar(*s);
      003ADB 8D 82            [24]10261 	mov	dpl,r5
      003ADD 8E 83            [24]10262 	mov	dph,r6
      003ADF 8F F0            [24]10263 	mov	b,r7
      003AE1 12r00r00         [24]10264 	lcall	__gptrget
      003AE4 FC               [12]10265 	mov	r4,a
      003AE5 60 1C            [24]10266 	jz	00118$
      003AE7 7B 00            [12]10267 	mov	r3,#0x00
      003AE9 8C 82            [24]10268 	mov	dpl,r4
      003AEB 8B 83            [24]10269 	mov	dph,r3
      003AED C0 07            [24]10270 	push	ar7
      003AEF C0 06            [24]10271 	push	ar6
      003AF1 C0 05            [24]10272 	push	ar5
      003AF3 12r00r00         [24]10273 	lcall	_putchar
      003AF6 D0 05            [24]10274 	pop	ar5
      003AF8 D0 06            [24]10275 	pop	ar6
      003AFA D0 07            [24]10276 	pop	ar7
      003AFC 0D               [12]10277 	inc	r5
                                  10278 ;	calc.c:402: printstr("X\texchange stacks primary <-> secondary\r\n");
      003AFD BD 00 DB         [24]10279 	cjne	r5,#0x00,00188$
      003B00 0E               [12]10280 	inc	r6
      003B01 80 D8            [24]10281 	sjmp	00188$
      003B03                      10282 00118$:
                                  10283 ;	calc.c:403: printstr("T\texchange tops primary <-> secondary\r\n");
      003B03 7DrC6            [12]10284 	mov	r5,#___str_30
      003B05 7Es01            [12]10285 	mov	r6,#(___str_30 >> 8)
      003B07 7F 80            [12]10286 	mov	r7,#0x80
                                  10287 ;	calc.c:20: return;
      003B09                      10288 00191$:
                                  10289 ;	calc.c:18: for (; *s; s++) putchar(*s);
      003B09 8D 82            [24]10290 	mov	dpl,r5
      003B0B 8E 83            [24]10291 	mov	dph,r6
      003B0D 8F F0            [24]10292 	mov	b,r7
      003B0F 12r00r00         [24]10293 	lcall	__gptrget
      003B12 FC               [12]10294 	mov	r4,a
      003B13 60 1C            [24]10295 	jz	00120$
      003B15 7B 00            [12]10296 	mov	r3,#0x00
      003B17 8C 82            [24]10297 	mov	dpl,r4
      003B19 8B 83            [24]10298 	mov	dph,r3
      003B1B C0 07            [24]10299 	push	ar7
      003B1D C0 06            [24]10300 	push	ar6
      003B1F C0 05            [24]10301 	push	ar5
      003B21 12r00r00         [24]10302 	lcall	_putchar
      003B24 D0 05            [24]10303 	pop	ar5
      003B26 D0 06            [24]10304 	pop	ar6
      003B28 D0 07            [24]10305 	pop	ar7
      003B2A 0D               [12]10306 	inc	r5
                                  10307 ;	calc.c:403: printstr("T\texchange tops primary <-> secondary\r\n");
      003B2B BD 00 DB         [24]10308 	cjne	r5,#0x00,00191$
      003B2E 0E               [12]10309 	inc	r6
      003B2F 80 D8            [24]10310 	sjmp	00191$
      003B31                      10311 00120$:
                                  10312 ;	calc.c:404: printstr("U\tcopy top secondary -> primary\r\n");
      003B31 7DrEE            [12]10313 	mov	r5,#___str_31
      003B33 7Es01            [12]10314 	mov	r6,#(___str_31 >> 8)
      003B35 7F 80            [12]10315 	mov	r7,#0x80
                                  10316 ;	calc.c:20: return;
      003B37                      10317 00194$:
                                  10318 ;	calc.c:18: for (; *s; s++) putchar(*s);
      003B37 8D 82            [24]10319 	mov	dpl,r5
      003B39 8E 83            [24]10320 	mov	dph,r6
      003B3B 8F F0            [24]10321 	mov	b,r7
      003B3D 12r00r00         [24]10322 	lcall	__gptrget
      003B40 FC               [12]10323 	mov	r4,a
      003B41 60 1C            [24]10324 	jz	00122$
      003B43 7B 00            [12]10325 	mov	r3,#0x00
      003B45 8C 82            [24]10326 	mov	dpl,r4
      003B47 8B 83            [24]10327 	mov	dph,r3
      003B49 C0 07            [24]10328 	push	ar7
      003B4B C0 06            [24]10329 	push	ar6
      003B4D C0 05            [24]10330 	push	ar5
      003B4F 12r00r00         [24]10331 	lcall	_putchar
      003B52 D0 05            [24]10332 	pop	ar5
      003B54 D0 06            [24]10333 	pop	ar6
      003B56 D0 07            [24]10334 	pop	ar7
      003B58 0D               [12]10335 	inc	r5
                                  10336 ;	calc.c:404: printstr("U\tcopy top secondary -> primary\r\n");
      003B59 BD 00 DB         [24]10337 	cjne	r5,#0x00,00194$
      003B5C 0E               [12]10338 	inc	r6
      003B5D 80 D8            [24]10339 	sjmp	00194$
      003B5F                      10340 00122$:
                                  10341 ;	calc.c:405: printstr("u\tcopy top primary -> secondary\r\n");
      003B5F 7Dr10            [12]10342 	mov	r5,#___str_32
      003B61 7Es02            [12]10343 	mov	r6,#(___str_32 >> 8)
      003B63 7F 80            [12]10344 	mov	r7,#0x80
                                  10345 ;	calc.c:20: return;
      003B65                      10346 00197$:
                                  10347 ;	calc.c:18: for (; *s; s++) putchar(*s);
      003B65 8D 82            [24]10348 	mov	dpl,r5
      003B67 8E 83            [24]10349 	mov	dph,r6
      003B69 8F F0            [24]10350 	mov	b,r7
      003B6B 12r00r00         [24]10351 	lcall	__gptrget
      003B6E FC               [12]10352 	mov	r4,a
      003B6F 60 1C            [24]10353 	jz	00124$
      003B71 7B 00            [12]10354 	mov	r3,#0x00
      003B73 8C 82            [24]10355 	mov	dpl,r4
      003B75 8B 83            [24]10356 	mov	dph,r3
      003B77 C0 07            [24]10357 	push	ar7
      003B79 C0 06            [24]10358 	push	ar6
      003B7B C0 05            [24]10359 	push	ar5
      003B7D 12r00r00         [24]10360 	lcall	_putchar
      003B80 D0 05            [24]10361 	pop	ar5
      003B82 D0 06            [24]10362 	pop	ar6
      003B84 D0 07            [24]10363 	pop	ar7
      003B86 0D               [12]10364 	inc	r5
                                  10365 ;	calc.c:405: printstr("u\tcopy top primary -> secondary\r\n");
      003B87 BD 00 DB         [24]10366 	cjne	r5,#0x00,00197$
      003B8A 0E               [12]10367 	inc	r6
      003B8B 80 D8            [24]10368 	sjmp	00197$
      003B8D                      10369 00124$:
                                  10370 ;	calc.c:406: printstr("M\tmove top secondary -> primary\r\n");
      003B8D 7Dr32            [12]10371 	mov	r5,#___str_33
      003B8F 7Es02            [12]10372 	mov	r6,#(___str_33 >> 8)
      003B91 7F 80            [12]10373 	mov	r7,#0x80
                                  10374 ;	calc.c:20: return;
      003B93                      10375 00200$:
                                  10376 ;	calc.c:18: for (; *s; s++) putchar(*s);
      003B93 8D 82            [24]10377 	mov	dpl,r5
      003B95 8E 83            [24]10378 	mov	dph,r6
      003B97 8F F0            [24]10379 	mov	b,r7
      003B99 12r00r00         [24]10380 	lcall	__gptrget
      003B9C FC               [12]10381 	mov	r4,a
      003B9D 60 1C            [24]10382 	jz	00126$
      003B9F 7B 00            [12]10383 	mov	r3,#0x00
      003BA1 8C 82            [24]10384 	mov	dpl,r4
      003BA3 8B 83            [24]10385 	mov	dph,r3
      003BA5 C0 07            [24]10386 	push	ar7
      003BA7 C0 06            [24]10387 	push	ar6
      003BA9 C0 05            [24]10388 	push	ar5
      003BAB 12r00r00         [24]10389 	lcall	_putchar
      003BAE D0 05            [24]10390 	pop	ar5
      003BB0 D0 06            [24]10391 	pop	ar6
      003BB2 D0 07            [24]10392 	pop	ar7
      003BB4 0D               [12]10393 	inc	r5
                                  10394 ;	calc.c:406: printstr("M\tmove top secondary -> primary\r\n");
      003BB5 BD 00 DB         [24]10395 	cjne	r5,#0x00,00200$
      003BB8 0E               [12]10396 	inc	r6
      003BB9 80 D8            [24]10397 	sjmp	00200$
      003BBB                      10398 00126$:
                                  10399 ;	calc.c:407: printstr("m\tmove top primary -> secondary\r\n");
      003BBB 7Dr54            [12]10400 	mov	r5,#___str_34
      003BBD 7Es02            [12]10401 	mov	r6,#(___str_34 >> 8)
      003BBF 7F 80            [12]10402 	mov	r7,#0x80
                                  10403 ;	calc.c:20: return;
      003BC1                      10404 00203$:
                                  10405 ;	calc.c:18: for (; *s; s++) putchar(*s);
      003BC1 8D 82            [24]10406 	mov	dpl,r5
      003BC3 8E 83            [24]10407 	mov	dph,r6
      003BC5 8F F0            [24]10408 	mov	b,r7
      003BC7 12r00r00         [24]10409 	lcall	__gptrget
      003BCA FC               [12]10410 	mov	r4,a
      003BCB 60 1C            [24]10411 	jz	00128$
      003BCD 7B 00            [12]10412 	mov	r3,#0x00
      003BCF 8C 82            [24]10413 	mov	dpl,r4
      003BD1 8B 83            [24]10414 	mov	dph,r3
      003BD3 C0 07            [24]10415 	push	ar7
      003BD5 C0 06            [24]10416 	push	ar6
      003BD7 C0 05            [24]10417 	push	ar5
      003BD9 12r00r00         [24]10418 	lcall	_putchar
      003BDC D0 05            [24]10419 	pop	ar5
      003BDE D0 06            [24]10420 	pop	ar6
      003BE0 D0 07            [24]10421 	pop	ar7
      003BE2 0D               [12]10422 	inc	r5
                                  10423 ;	calc.c:407: printstr("m\tmove top primary -> secondary\r\n");
      003BE3 BD 00 DB         [24]10424 	cjne	r5,#0x00,00203$
      003BE6 0E               [12]10425 	inc	r6
      003BE7 80 D8            [24]10426 	sjmp	00203$
      003BE9                      10427 00128$:
                                  10428 ;	calc.c:408: printstr("+\tadd top 2\r\n");
      003BE9 7Dr76            [12]10429 	mov	r5,#___str_35
      003BEB 7Es02            [12]10430 	mov	r6,#(___str_35 >> 8)
      003BED 7F 80            [12]10431 	mov	r7,#0x80
                                  10432 ;	calc.c:20: return;
      003BEF                      10433 00206$:
                                  10434 ;	calc.c:18: for (; *s; s++) putchar(*s);
      003BEF 8D 82            [24]10435 	mov	dpl,r5
      003BF1 8E 83            [24]10436 	mov	dph,r6
      003BF3 8F F0            [24]10437 	mov	b,r7
      003BF5 12r00r00         [24]10438 	lcall	__gptrget
      003BF8 FC               [12]10439 	mov	r4,a
      003BF9 60 1C            [24]10440 	jz	00130$
      003BFB 7B 00            [12]10441 	mov	r3,#0x00
      003BFD 8C 82            [24]10442 	mov	dpl,r4
      003BFF 8B 83            [24]10443 	mov	dph,r3
      003C01 C0 07            [24]10444 	push	ar7
      003C03 C0 06            [24]10445 	push	ar6
      003C05 C0 05            [24]10446 	push	ar5
      003C07 12r00r00         [24]10447 	lcall	_putchar
      003C0A D0 05            [24]10448 	pop	ar5
      003C0C D0 06            [24]10449 	pop	ar6
      003C0E D0 07            [24]10450 	pop	ar7
      003C10 0D               [12]10451 	inc	r5
                                  10452 ;	calc.c:408: printstr("+\tadd top 2\r\n");
      003C11 BD 00 DB         [24]10453 	cjne	r5,#0x00,00206$
      003C14 0E               [12]10454 	inc	r6
      003C15 80 D8            [24]10455 	sjmp	00206$
      003C17                      10456 00130$:
                                  10457 ;	calc.c:409: printstr("-\tsubtract top 2\r\n");
      003C17 7Dr84            [12]10458 	mov	r5,#___str_36
      003C19 7Es02            [12]10459 	mov	r6,#(___str_36 >> 8)
      003C1B 7F 80            [12]10460 	mov	r7,#0x80
                                  10461 ;	calc.c:20: return;
      003C1D                      10462 00209$:
                                  10463 ;	calc.c:18: for (; *s; s++) putchar(*s);
      003C1D 8D 82            [24]10464 	mov	dpl,r5
      003C1F 8E 83            [24]10465 	mov	dph,r6
      003C21 8F F0            [24]10466 	mov	b,r7
      003C23 12r00r00         [24]10467 	lcall	__gptrget
      003C26 FC               [12]10468 	mov	r4,a
      003C27 60 1C            [24]10469 	jz	00132$
      003C29 7B 00            [12]10470 	mov	r3,#0x00
      003C2B 8C 82            [24]10471 	mov	dpl,r4
      003C2D 8B 83            [24]10472 	mov	dph,r3
      003C2F C0 07            [24]10473 	push	ar7
      003C31 C0 06            [24]10474 	push	ar6
      003C33 C0 05            [24]10475 	push	ar5
      003C35 12r00r00         [24]10476 	lcall	_putchar
      003C38 D0 05            [24]10477 	pop	ar5
      003C3A D0 06            [24]10478 	pop	ar6
      003C3C D0 07            [24]10479 	pop	ar7
      003C3E 0D               [12]10480 	inc	r5
                                  10481 ;	calc.c:409: printstr("-\tsubtract top 2\r\n");
      003C3F BD 00 DB         [24]10482 	cjne	r5,#0x00,00209$
      003C42 0E               [12]10483 	inc	r6
      003C43 80 D8            [24]10484 	sjmp	00209$
      003C45                      10485 00132$:
                                  10486 ;	calc.c:410: printstr("*\tmultiply top 2\r\n");
      003C45 7Dr97            [12]10487 	mov	r5,#___str_37
      003C47 7Es02            [12]10488 	mov	r6,#(___str_37 >> 8)
      003C49 7F 80            [12]10489 	mov	r7,#0x80
                                  10490 ;	calc.c:20: return;
      003C4B                      10491 00212$:
                                  10492 ;	calc.c:18: for (; *s; s++) putchar(*s);
      003C4B 8D 82            [24]10493 	mov	dpl,r5
      003C4D 8E 83            [24]10494 	mov	dph,r6
      003C4F 8F F0            [24]10495 	mov	b,r7
      003C51 12r00r00         [24]10496 	lcall	__gptrget
      003C54 FC               [12]10497 	mov	r4,a
      003C55 60 1C            [24]10498 	jz	00134$
      003C57 7B 00            [12]10499 	mov	r3,#0x00
      003C59 8C 82            [24]10500 	mov	dpl,r4
      003C5B 8B 83            [24]10501 	mov	dph,r3
      003C5D C0 07            [24]10502 	push	ar7
      003C5F C0 06            [24]10503 	push	ar6
      003C61 C0 05            [24]10504 	push	ar5
      003C63 12r00r00         [24]10505 	lcall	_putchar
      003C66 D0 05            [24]10506 	pop	ar5
      003C68 D0 06            [24]10507 	pop	ar6
      003C6A D0 07            [24]10508 	pop	ar7
      003C6C 0D               [12]10509 	inc	r5
                                  10510 ;	calc.c:410: printstr("*\tmultiply top 2\r\n");
      003C6D BD 00 DB         [24]10511 	cjne	r5,#0x00,00212$
      003C70 0E               [12]10512 	inc	r6
      003C71 80 D8            [24]10513 	sjmp	00212$
      003C73                      10514 00134$:
                                  10515 ;	calc.c:411: printstr("/\tdivide top 2\r\n");
      003C73 7DrAA            [12]10516 	mov	r5,#___str_38
      003C75 7Es02            [12]10517 	mov	r6,#(___str_38 >> 8)
      003C77 7F 80            [12]10518 	mov	r7,#0x80
                                  10519 ;	calc.c:20: return;
      003C79                      10520 00215$:
                                  10521 ;	calc.c:18: for (; *s; s++) putchar(*s);
      003C79 8D 82            [24]10522 	mov	dpl,r5
      003C7B 8E 83            [24]10523 	mov	dph,r6
      003C7D 8F F0            [24]10524 	mov	b,r7
      003C7F 12r00r00         [24]10525 	lcall	__gptrget
      003C82 FC               [12]10526 	mov	r4,a
      003C83 60 1C            [24]10527 	jz	00136$
      003C85 7B 00            [12]10528 	mov	r3,#0x00
      003C87 8C 82            [24]10529 	mov	dpl,r4
      003C89 8B 83            [24]10530 	mov	dph,r3
      003C8B C0 07            [24]10531 	push	ar7
      003C8D C0 06            [24]10532 	push	ar6
      003C8F C0 05            [24]10533 	push	ar5
      003C91 12r00r00         [24]10534 	lcall	_putchar
      003C94 D0 05            [24]10535 	pop	ar5
      003C96 D0 06            [24]10536 	pop	ar6
      003C98 D0 07            [24]10537 	pop	ar7
      003C9A 0D               [12]10538 	inc	r5
                                  10539 ;	calc.c:411: printstr("/\tdivide top 2\r\n");
      003C9B BD 00 DB         [24]10540 	cjne	r5,#0x00,00215$
      003C9E 0E               [12]10541 	inc	r6
      003C9F 80 D8            [24]10542 	sjmp	00215$
      003CA1                      10543 00136$:
                                  10544 ;	calc.c:412: printstr("\\\tdivide top 2 unsigned\r\n");	
      003CA1 7DrBB            [12]10545 	mov	r5,#___str_39
      003CA3 7Es02            [12]10546 	mov	r6,#(___str_39 >> 8)
      003CA5 7F 80            [12]10547 	mov	r7,#0x80
                                  10548 ;	calc.c:20: return;
      003CA7                      10549 00218$:
                                  10550 ;	calc.c:18: for (; *s; s++) putchar(*s);
      003CA7 8D 82            [24]10551 	mov	dpl,r5
      003CA9 8E 83            [24]10552 	mov	dph,r6
      003CAB 8F F0            [24]10553 	mov	b,r7
      003CAD 12r00r00         [24]10554 	lcall	__gptrget
      003CB0 FC               [12]10555 	mov	r4,a
      003CB1 60 1C            [24]10556 	jz	00138$
      003CB3 7B 00            [12]10557 	mov	r3,#0x00
      003CB5 8C 82            [24]10558 	mov	dpl,r4
      003CB7 8B 83            [24]10559 	mov	dph,r3
      003CB9 C0 07            [24]10560 	push	ar7
      003CBB C0 06            [24]10561 	push	ar6
      003CBD C0 05            [24]10562 	push	ar5
      003CBF 12r00r00         [24]10563 	lcall	_putchar
      003CC2 D0 05            [24]10564 	pop	ar5
      003CC4 D0 06            [24]10565 	pop	ar6
      003CC6 D0 07            [24]10566 	pop	ar7
      003CC8 0D               [12]10567 	inc	r5
                                  10568 ;	calc.c:412: printstr("\\\tdivide top 2 unsigned\r\n");	
      003CC9 BD 00 DB         [24]10569 	cjne	r5,#0x00,00218$
      003CCC 0E               [12]10570 	inc	r6
      003CCD 80 D8            [24]10571 	sjmp	00218$
      003CCF                      10572 00138$:
                                  10573 ;	calc.c:413: printstr("%\tmodulus top 2\r\n");
      003CCF 7DrD5            [12]10574 	mov	r5,#___str_40
      003CD1 7Es02            [12]10575 	mov	r6,#(___str_40 >> 8)
      003CD3 7F 80            [12]10576 	mov	r7,#0x80
                                  10577 ;	calc.c:20: return;
      003CD5                      10578 00221$:
                                  10579 ;	calc.c:18: for (; *s; s++) putchar(*s);
      003CD5 8D 82            [24]10580 	mov	dpl,r5
      003CD7 8E 83            [24]10581 	mov	dph,r6
      003CD9 8F F0            [24]10582 	mov	b,r7
      003CDB 12r00r00         [24]10583 	lcall	__gptrget
      003CDE FC               [12]10584 	mov	r4,a
      003CDF 60 1C            [24]10585 	jz	00140$
      003CE1 7B 00            [12]10586 	mov	r3,#0x00
      003CE3 8C 82            [24]10587 	mov	dpl,r4
      003CE5 8B 83            [24]10588 	mov	dph,r3
      003CE7 C0 07            [24]10589 	push	ar7
      003CE9 C0 06            [24]10590 	push	ar6
      003CEB C0 05            [24]10591 	push	ar5
      003CED 12r00r00         [24]10592 	lcall	_putchar
      003CF0 D0 05            [24]10593 	pop	ar5
      003CF2 D0 06            [24]10594 	pop	ar6
      003CF4 D0 07            [24]10595 	pop	ar7
      003CF6 0D               [12]10596 	inc	r5
                                  10597 ;	calc.c:413: printstr("%\tmodulus top 2\r\n");
      003CF7 BD 00 DB         [24]10598 	cjne	r5,#0x00,00221$
      003CFA 0E               [12]10599 	inc	r6
      003CFB 80 D8            [24]10600 	sjmp	00221$
      003CFD                      10601 00140$:
                                  10602 ;	calc.c:414: printstr("#\tmodulus top 2 unsigned\r\n");
      003CFD 7DrE7            [12]10603 	mov	r5,#___str_41
      003CFF 7Es02            [12]10604 	mov	r6,#(___str_41 >> 8)
      003D01 7F 80            [12]10605 	mov	r7,#0x80
                                  10606 ;	calc.c:20: return;
      003D03                      10607 00224$:
                                  10608 ;	calc.c:18: for (; *s; s++) putchar(*s);
      003D03 8D 82            [24]10609 	mov	dpl,r5
      003D05 8E 83            [24]10610 	mov	dph,r6
      003D07 8F F0            [24]10611 	mov	b,r7
      003D09 12r00r00         [24]10612 	lcall	__gptrget
      003D0C FC               [12]10613 	mov	r4,a
      003D0D 60 1C            [24]10614 	jz	00142$
      003D0F 7B 00            [12]10615 	mov	r3,#0x00
      003D11 8C 82            [24]10616 	mov	dpl,r4
      003D13 8B 83            [24]10617 	mov	dph,r3
      003D15 C0 07            [24]10618 	push	ar7
      003D17 C0 06            [24]10619 	push	ar6
      003D19 C0 05            [24]10620 	push	ar5
      003D1B 12r00r00         [24]10621 	lcall	_putchar
      003D1E D0 05            [24]10622 	pop	ar5
      003D20 D0 06            [24]10623 	pop	ar6
      003D22 D0 07            [24]10624 	pop	ar7
      003D24 0D               [12]10625 	inc	r5
                                  10626 ;	calc.c:414: printstr("#\tmodulus top 2 unsigned\r\n");
      003D25 BD 00 DB         [24]10627 	cjne	r5,#0x00,00224$
      003D28 0E               [12]10628 	inc	r6
      003D29 80 D8            [24]10629 	sjmp	00224$
      003D2B                      10630 00142$:
                                  10631 ;	calc.c:415: printstr("&\tand top 2\r\n");
      003D2B 7Dr02            [12]10632 	mov	r5,#___str_42
      003D2D 7Es03            [12]10633 	mov	r6,#(___str_42 >> 8)
      003D2F 7F 80            [12]10634 	mov	r7,#0x80
                                  10635 ;	calc.c:20: return;
      003D31                      10636 00227$:
                                  10637 ;	calc.c:18: for (; *s; s++) putchar(*s);
      003D31 8D 82            [24]10638 	mov	dpl,r5
      003D33 8E 83            [24]10639 	mov	dph,r6
      003D35 8F F0            [24]10640 	mov	b,r7
      003D37 12r00r00         [24]10641 	lcall	__gptrget
      003D3A FC               [12]10642 	mov	r4,a
      003D3B 60 1C            [24]10643 	jz	00144$
      003D3D 7B 00            [12]10644 	mov	r3,#0x00
      003D3F 8C 82            [24]10645 	mov	dpl,r4
      003D41 8B 83            [24]10646 	mov	dph,r3
      003D43 C0 07            [24]10647 	push	ar7
      003D45 C0 06            [24]10648 	push	ar6
      003D47 C0 05            [24]10649 	push	ar5
      003D49 12r00r00         [24]10650 	lcall	_putchar
      003D4C D0 05            [24]10651 	pop	ar5
      003D4E D0 06            [24]10652 	pop	ar6
      003D50 D0 07            [24]10653 	pop	ar7
      003D52 0D               [12]10654 	inc	r5
                                  10655 ;	calc.c:415: printstr("&\tand top 2\r\n");
      003D53 BD 00 DB         [24]10656 	cjne	r5,#0x00,00227$
      003D56 0E               [12]10657 	inc	r6
      003D57 80 D8            [24]10658 	sjmp	00227$
      003D59                      10659 00144$:
                                  10660 ;	calc.c:416: printstr("|\tor top 2\r\n");
      003D59 7Dr10            [12]10661 	mov	r5,#___str_43
      003D5B 7Es03            [12]10662 	mov	r6,#(___str_43 >> 8)
      003D5D 7F 80            [12]10663 	mov	r7,#0x80
                                  10664 ;	calc.c:20: return;
      003D5F                      10665 00230$:
                                  10666 ;	calc.c:18: for (; *s; s++) putchar(*s);
      003D5F 8D 82            [24]10667 	mov	dpl,r5
      003D61 8E 83            [24]10668 	mov	dph,r6
      003D63 8F F0            [24]10669 	mov	b,r7
      003D65 12r00r00         [24]10670 	lcall	__gptrget
      003D68 FC               [12]10671 	mov	r4,a
      003D69 60 1C            [24]10672 	jz	00146$
      003D6B 7B 00            [12]10673 	mov	r3,#0x00
      003D6D 8C 82            [24]10674 	mov	dpl,r4
      003D6F 8B 83            [24]10675 	mov	dph,r3
      003D71 C0 07            [24]10676 	push	ar7
      003D73 C0 06            [24]10677 	push	ar6
      003D75 C0 05            [24]10678 	push	ar5
      003D77 12r00r00         [24]10679 	lcall	_putchar
      003D7A D0 05            [24]10680 	pop	ar5
      003D7C D0 06            [24]10681 	pop	ar6
      003D7E D0 07            [24]10682 	pop	ar7
      003D80 0D               [12]10683 	inc	r5
                                  10684 ;	calc.c:416: printstr("|\tor top 2\r\n");
      003D81 BD 00 DB         [24]10685 	cjne	r5,#0x00,00230$
      003D84 0E               [12]10686 	inc	r6
      003D85 80 D8            [24]10687 	sjmp	00230$
      003D87                      10688 00146$:
                                  10689 ;	calc.c:417: printstr("^\txor top 2\r\n");
      003D87 7Dr1D            [12]10690 	mov	r5,#___str_44
      003D89 7Es03            [12]10691 	mov	r6,#(___str_44 >> 8)
      003D8B 7F 80            [12]10692 	mov	r7,#0x80
                                  10693 ;	calc.c:20: return;
      003D8D                      10694 00233$:
                                  10695 ;	calc.c:18: for (; *s; s++) putchar(*s);
      003D8D 8D 82            [24]10696 	mov	dpl,r5
      003D8F 8E 83            [24]10697 	mov	dph,r6
      003D91 8F F0            [24]10698 	mov	b,r7
      003D93 12r00r00         [24]10699 	lcall	__gptrget
      003D96 FC               [12]10700 	mov	r4,a
      003D97 60 1C            [24]10701 	jz	00148$
      003D99 7B 00            [12]10702 	mov	r3,#0x00
      003D9B 8C 82            [24]10703 	mov	dpl,r4
      003D9D 8B 83            [24]10704 	mov	dph,r3
      003D9F C0 07            [24]10705 	push	ar7
      003DA1 C0 06            [24]10706 	push	ar6
      003DA3 C0 05            [24]10707 	push	ar5
      003DA5 12r00r00         [24]10708 	lcall	_putchar
      003DA8 D0 05            [24]10709 	pop	ar5
      003DAA D0 06            [24]10710 	pop	ar6
      003DAC D0 07            [24]10711 	pop	ar7
      003DAE 0D               [12]10712 	inc	r5
                                  10713 ;	calc.c:417: printstr("^\txor top 2\r\n");
      003DAF BD 00 DB         [24]10714 	cjne	r5,#0x00,00233$
      003DB2 0E               [12]10715 	inc	r6
      003DB3 80 D8            [24]10716 	sjmp	00233$
      003DB5                      10717 00148$:
                                  10718 ;	calc.c:418: printstr(">\tshift right top 2\r\n");
      003DB5 7Dr2B            [12]10719 	mov	r5,#___str_45
      003DB7 7Es03            [12]10720 	mov	r6,#(___str_45 >> 8)
      003DB9 7F 80            [12]10721 	mov	r7,#0x80
                                  10722 ;	calc.c:20: return;
      003DBB                      10723 00236$:
                                  10724 ;	calc.c:18: for (; *s; s++) putchar(*s);
      003DBB 8D 82            [24]10725 	mov	dpl,r5
      003DBD 8E 83            [24]10726 	mov	dph,r6
      003DBF 8F F0            [24]10727 	mov	b,r7
      003DC1 12r00r00         [24]10728 	lcall	__gptrget
      003DC4 FC               [12]10729 	mov	r4,a
      003DC5 60 1C            [24]10730 	jz	00150$
      003DC7 7B 00            [12]10731 	mov	r3,#0x00
      003DC9 8C 82            [24]10732 	mov	dpl,r4
      003DCB 8B 83            [24]10733 	mov	dph,r3
      003DCD C0 07            [24]10734 	push	ar7
      003DCF C0 06            [24]10735 	push	ar6
      003DD1 C0 05            [24]10736 	push	ar5
      003DD3 12r00r00         [24]10737 	lcall	_putchar
      003DD6 D0 05            [24]10738 	pop	ar5
      003DD8 D0 06            [24]10739 	pop	ar6
      003DDA D0 07            [24]10740 	pop	ar7
      003DDC 0D               [12]10741 	inc	r5
                                  10742 ;	calc.c:418: printstr(">\tshift right top 2\r\n");
      003DDD BD 00 DB         [24]10743 	cjne	r5,#0x00,00236$
      003DE0 0E               [12]10744 	inc	r6
      003DE1 80 D8            [24]10745 	sjmp	00236$
      003DE3                      10746 00150$:
                                  10747 ;	calc.c:419: printstr("]\tarithmetic shift right top 2\r\n");
      003DE3 7Dr41            [12]10748 	mov	r5,#___str_46
      003DE5 7Es03            [12]10749 	mov	r6,#(___str_46 >> 8)
      003DE7 7F 80            [12]10750 	mov	r7,#0x80
                                  10751 ;	calc.c:20: return;
      003DE9                      10752 00239$:
                                  10753 ;	calc.c:18: for (; *s; s++) putchar(*s);
      003DE9 8D 82            [24]10754 	mov	dpl,r5
      003DEB 8E 83            [24]10755 	mov	dph,r6
      003DED 8F F0            [24]10756 	mov	b,r7
      003DEF 12r00r00         [24]10757 	lcall	__gptrget
      003DF2 FC               [12]10758 	mov	r4,a
      003DF3 60 1C            [24]10759 	jz	00152$
      003DF5 7B 00            [12]10760 	mov	r3,#0x00
      003DF7 8C 82            [24]10761 	mov	dpl,r4
      003DF9 8B 83            [24]10762 	mov	dph,r3
      003DFB C0 07            [24]10763 	push	ar7
      003DFD C0 06            [24]10764 	push	ar6
      003DFF C0 05            [24]10765 	push	ar5
      003E01 12r00r00         [24]10766 	lcall	_putchar
      003E04 D0 05            [24]10767 	pop	ar5
      003E06 D0 06            [24]10768 	pop	ar6
      003E08 D0 07            [24]10769 	pop	ar7
      003E0A 0D               [12]10770 	inc	r5
                                  10771 ;	calc.c:419: printstr("]\tarithmetic shift right top 2\r\n");
      003E0B BD 00 DB         [24]10772 	cjne	r5,#0x00,00239$
      003E0E 0E               [12]10773 	inc	r6
      003E0F 80 D8            [24]10774 	sjmp	00239$
      003E11                      10775 00152$:
                                  10776 ;	calc.c:420: printstr("<\tshift left top 2\r\n");
      003E11 7Dr62            [12]10777 	mov	r5,#___str_47
      003E13 7Es03            [12]10778 	mov	r6,#(___str_47 >> 8)
      003E15 7F 80            [12]10779 	mov	r7,#0x80
                                  10780 ;	calc.c:20: return;
      003E17                      10781 00242$:
                                  10782 ;	calc.c:18: for (; *s; s++) putchar(*s);
      003E17 8D 82            [24]10783 	mov	dpl,r5
      003E19 8E 83            [24]10784 	mov	dph,r6
      003E1B 8F F0            [24]10785 	mov	b,r7
      003E1D 12r00r00         [24]10786 	lcall	__gptrget
      003E20 FC               [12]10787 	mov	r4,a
      003E21 60 1C            [24]10788 	jz	00154$
      003E23 7B 00            [12]10789 	mov	r3,#0x00
      003E25 8C 82            [24]10790 	mov	dpl,r4
      003E27 8B 83            [24]10791 	mov	dph,r3
      003E29 C0 07            [24]10792 	push	ar7
      003E2B C0 06            [24]10793 	push	ar6
      003E2D C0 05            [24]10794 	push	ar5
      003E2F 12r00r00         [24]10795 	lcall	_putchar
      003E32 D0 05            [24]10796 	pop	ar5
      003E34 D0 06            [24]10797 	pop	ar6
      003E36 D0 07            [24]10798 	pop	ar7
      003E38 0D               [12]10799 	inc	r5
                                  10800 ;	calc.c:420: printstr("<\tshift left top 2\r\n");
      003E39 BD 00 DB         [24]10801 	cjne	r5,#0x00,00242$
      003E3C 0E               [12]10802 	inc	r6
      003E3D 80 D8            [24]10803 	sjmp	00242$
      003E3F                      10804 00154$:
                                  10805 ;	calc.c:421: printstr("~\tbitwise not top\r\n");
      003E3F 7Dr77            [12]10806 	mov	r5,#___str_48
      003E41 7Es03            [12]10807 	mov	r6,#(___str_48 >> 8)
      003E43 7F 80            [12]10808 	mov	r7,#0x80
                                  10809 ;	calc.c:20: return;
      003E45                      10810 00245$:
                                  10811 ;	calc.c:18: for (; *s; s++) putchar(*s);
      003E45 8D 82            [24]10812 	mov	dpl,r5
      003E47 8E 83            [24]10813 	mov	dph,r6
      003E49 8F F0            [24]10814 	mov	b,r7
      003E4B 12r00r00         [24]10815 	lcall	__gptrget
      003E4E FC               [12]10816 	mov	r4,a
      003E4F 60 1C            [24]10817 	jz	00156$
      003E51 7B 00            [12]10818 	mov	r3,#0x00
      003E53 8C 82            [24]10819 	mov	dpl,r4
      003E55 8B 83            [24]10820 	mov	dph,r3
      003E57 C0 07            [24]10821 	push	ar7
      003E59 C0 06            [24]10822 	push	ar6
      003E5B C0 05            [24]10823 	push	ar5
      003E5D 12r00r00         [24]10824 	lcall	_putchar
      003E60 D0 05            [24]10825 	pop	ar5
      003E62 D0 06            [24]10826 	pop	ar6
      003E64 D0 07            [24]10827 	pop	ar7
      003E66 0D               [12]10828 	inc	r5
                                  10829 ;	calc.c:421: printstr("~\tbitwise not top\r\n");
      003E67 BD 00 DB         [24]10830 	cjne	r5,#0x00,00245$
      003E6A 0E               [12]10831 	inc	r6
      003E6B 80 D8            [24]10832 	sjmp	00245$
      003E6D                      10833 00156$:
                                  10834 ;	calc.c:422: printstr("s\tstatus\r\n");
      003E6D 7Dr8B            [12]10835 	mov	r5,#___str_49
      003E6F 7Es03            [12]10836 	mov	r6,#(___str_49 >> 8)
      003E71 7F 80            [12]10837 	mov	r7,#0x80
                                  10838 ;	calc.c:20: return;
      003E73                      10839 00248$:
                                  10840 ;	calc.c:18: for (; *s; s++) putchar(*s);
      003E73 8D 82            [24]10841 	mov	dpl,r5
      003E75 8E 83            [24]10842 	mov	dph,r6
      003E77 8F F0            [24]10843 	mov	b,r7
      003E79 12r00r00         [24]10844 	lcall	__gptrget
      003E7C FC               [12]10845 	mov	r4,a
      003E7D 60 1C            [24]10846 	jz	00158$
      003E7F 7B 00            [12]10847 	mov	r3,#0x00
      003E81 8C 82            [24]10848 	mov	dpl,r4
      003E83 8B 83            [24]10849 	mov	dph,r3
      003E85 C0 07            [24]10850 	push	ar7
      003E87 C0 06            [24]10851 	push	ar6
      003E89 C0 05            [24]10852 	push	ar5
      003E8B 12r00r00         [24]10853 	lcall	_putchar
      003E8E D0 05            [24]10854 	pop	ar5
      003E90 D0 06            [24]10855 	pop	ar6
      003E92 D0 07            [24]10856 	pop	ar7
      003E94 0D               [12]10857 	inc	r5
                                  10858 ;	calc.c:422: printstr("s\tstatus\r\n");
      003E95 BD 00 DB         [24]10859 	cjne	r5,#0x00,00248$
      003E98 0E               [12]10860 	inc	r6
      003E99 80 D8            [24]10861 	sjmp	00248$
      003E9B                      10862 00158$:
                                  10863 ;	calc.c:423: printstr("?\thelp\r\n");
      003E9B 7Dr96            [12]10864 	mov	r5,#___str_50
      003E9D 7Es03            [12]10865 	mov	r6,#(___str_50 >> 8)
      003E9F 7F 80            [12]10866 	mov	r7,#0x80
                                  10867 ;	calc.c:20: return;
      003EA1                      10868 00251$:
                                  10869 ;	calc.c:18: for (; *s; s++) putchar(*s);
      003EA1 8D 82            [24]10870 	mov	dpl,r5
      003EA3 8E 83            [24]10871 	mov	dph,r6
      003EA5 8F F0            [24]10872 	mov	b,r7
      003EA7 12r00r00         [24]10873 	lcall	__gptrget
      003EAA FC               [12]10874 	mov	r4,a
      003EAB 60 1C            [24]10875 	jz	00160$
      003EAD 7B 00            [12]10876 	mov	r3,#0x00
      003EAF 8C 82            [24]10877 	mov	dpl,r4
      003EB1 8B 83            [24]10878 	mov	dph,r3
      003EB3 C0 07            [24]10879 	push	ar7
      003EB5 C0 06            [24]10880 	push	ar6
      003EB7 C0 05            [24]10881 	push	ar5
      003EB9 12r00r00         [24]10882 	lcall	_putchar
      003EBC D0 05            [24]10883 	pop	ar5
      003EBE D0 06            [24]10884 	pop	ar6
      003EC0 D0 07            [24]10885 	pop	ar7
      003EC2 0D               [12]10886 	inc	r5
                                  10887 ;	calc.c:423: printstr("?\thelp\r\n");
      003EC3 BD 00 DB         [24]10888 	cjne	r5,#0x00,00251$
      003EC6 0E               [12]10889 	inc	r6
      003EC7 80 D8            [24]10890 	sjmp	00251$
      003EC9                      10891 00160$:
                                  10892 ;	calc.c:424: printstr("q\tquit\r\n");
      003EC9 7Dr9F            [12]10893 	mov	r5,#___str_51
      003ECB 7Es03            [12]10894 	mov	r6,#(___str_51 >> 8)
      003ECD 7F 80            [12]10895 	mov	r7,#0x80
                                  10896 ;	calc.c:20: return;
      003ECF                      10897 00254$:
                                  10898 ;	calc.c:18: for (; *s; s++) putchar(*s);
      003ECF 8D 82            [24]10899 	mov	dpl,r5
      003ED1 8E 83            [24]10900 	mov	dph,r6
      003ED3 8F F0            [24]10901 	mov	b,r7
      003ED5 12r00r00         [24]10902 	lcall	__gptrget
      003ED8 FC               [12]10903 	mov	r4,a
      003ED9 60 1C            [24]10904 	jz	00162$
      003EDB 7B 00            [12]10905 	mov	r3,#0x00
      003EDD 8C 82            [24]10906 	mov	dpl,r4
      003EDF 8B 83            [24]10907 	mov	dph,r3
      003EE1 C0 07            [24]10908 	push	ar7
      003EE3 C0 06            [24]10909 	push	ar6
      003EE5 C0 05            [24]10910 	push	ar5
      003EE7 12r00r00         [24]10911 	lcall	_putchar
      003EEA D0 05            [24]10912 	pop	ar5
      003EEC D0 06            [24]10913 	pop	ar6
      003EEE D0 07            [24]10914 	pop	ar7
      003EF0 0D               [12]10915 	inc	r5
                                  10916 ;	calc.c:424: printstr("q\tquit\r\n");
      003EF1 BD 00 DB         [24]10917 	cjne	r5,#0x00,00254$
      003EF4 0E               [12]10918 	inc	r6
      003EF5 80 D8            [24]10919 	sjmp	00254$
      003EF7                      10920 00162$:
                                  10921 ;	calc.c:426: return 1;
      003EF7 90 00 01         [24]10922 	mov	dptr,#0x0001
                                  10923 ;	calc.c:427: }
      003EFA D0*00            [24]10924 	pop	_bp
      003EFC 22               [24]10925 	ret
                                  10926 ;------------------------------------------------------------
                                  10927 ;Allocation info for local variables in function 'main'
                                  10928 ;------------------------------------------------------------
                                  10929 ;input                     Allocated to registers r6 r7 
                                  10930 ;__1966080213              Allocated to registers 
                                  10931 ;s                         Allocated to registers r2 r3 r4 
                                  10932 ;__1310720215              Allocated to registers 
                                  10933 ;s                         Allocated to registers r5 r6 r7 
                                  10934 ;sloc0                     Allocated to stack - _bp +1
                                  10935 ;------------------------------------------------------------
                                  10936 ;	calc.c:457: void main(void) {
                                  10937 ;	-----------------------------------------
                                  10938 ;	 function main
                                  10939 ;	-----------------------------------------
      003EFD                      10940 _main:
      003EFD C0*00            [24]10941 	push	_bp
      003EFF 85 81*00         [24]10942 	mov	_bp,sp
      003F02 05 81            [12]10943 	inc	sp
                                  10944 ;	calc.c:460: giant = 0;
      003F04 78r00            [12]10945 	mov	r0,#_giant
      003F06 76 00            [12]10946 	mov	@r0,#0x00
                                  10947 ;	calc.c:462: c.base = 10;
      003F08 90r00r0C         [24]10948 	mov	dptr,#_c
      003F0B 74 0A            [12]10949 	mov	a,#0x0a
      003F0D F0               [24]10950 	movx	@dptr,a
      003F0E E4               [12]10951 	clr	a
      003F0F A3               [24]10952 	inc	dptr
      003F10 F0               [24]10953 	movx	@dptr,a
                                  10954 ;	calc.c:463: c.acc = 0l;
      003F11 90r00r0E         [24]10955 	mov	dptr,#(_c + 0x0002)
      003F14 F0               [24]10956 	movx	@dptr,a
      003F15 A3               [24]10957 	inc	dptr
      003F16 F0               [24]10958 	movx	@dptr,a
      003F17 A3               [24]10959 	inc	dptr
      003F18 F0               [24]10960 	movx	@dptr,a
      003F19 A3               [24]10961 	inc	dptr
      003F1A F0               [24]10962 	movx	@dptr,a
                                  10963 ;	calc.c:464: c.acc_valid = (char)0;
      003F1B 90r00r12         [24]10964 	mov	dptr,#(_c + 0x0006)
      003F1E F0               [24]10965 	movx	@dptr,a
                                  10966 ;	calc.c:465: c.digit[0] = c.digit[1] = '\0';
      003F1F 90r00r14         [24]10967 	mov	dptr,#(_c + 0x0008)
      003F22 F0               [24]10968 	movx	@dptr,a
      003F23 90r00r13         [24]10969 	mov	dptr,#(_c + 0x0007)
      003F26 F0               [24]10970 	movx	@dptr,a
                                  10971 ;	calc.c:467: c.ps = &c.s0;
      003F27 90r40r1D         [24]10972 	mov	dptr,#(_c + 0x4011)
      003F2A 74r15            [12]10973 	mov	a,#(_c + 0x0009)
      003F2C F0               [24]10974 	movx	@dptr,a
      003F2D 74s00            [12]10975 	mov	a,#((_c + 0x0009) >> 8)
      003F2F A3               [24]10976 	inc	dptr
      003F30 F0               [24]10977 	movx	@dptr,a
      003F31 E4               [12]10978 	clr	a
      003F32 A3               [24]10979 	inc	dptr
      003F33 F0               [24]10980 	movx	@dptr,a
                                  10981 ;	calc.c:468: c.ss = &c.s1;
      003F34 90r40r20         [24]10982 	mov	dptr,#(_c + 0x4014)
      003F37 74r19            [12]10983 	mov	a,#(_c + 0x200d)
      003F39 F0               [24]10984 	movx	@dptr,a
      003F3A 74s20            [12]10985 	mov	a,#((_c + 0x200d) >> 8)
      003F3C A3               [24]10986 	inc	dptr
      003F3D F0               [24]10987 	movx	@dptr,a
      003F3E E4               [12]10988 	clr	a
      003F3F A3               [24]10989 	inc	dptr
      003F40 F0               [24]10990 	movx	@dptr,a
                                  10991 ;	calc.c:469: stack_init(c.ps);
      003F41 90r00r15         [24]10992 	mov	dptr,#(_c + 0x0009)
      003F44 75 F0 00         [24]10993 	mov	b,#0x00
      003F47 12r00r00         [24]10994 	lcall	_stack_init
                                  10995 ;	calc.c:470: stack_init(c.ss);
      003F4A 90r40r20         [24]10996 	mov	dptr,#(_c + 0x4014)
      003F4D E0               [24]10997 	movx	a,@dptr
      003F4E FD               [12]10998 	mov	r5,a
      003F4F A3               [24]10999 	inc	dptr
      003F50 E0               [24]11000 	movx	a,@dptr
      003F51 FE               [12]11001 	mov	r6,a
      003F52 A3               [24]11002 	inc	dptr
      003F53 E0               [24]11003 	movx	a,@dptr
      003F54 FF               [12]11004 	mov	r7,a
      003F55 8D 82            [24]11005 	mov	dpl,r5
      003F57 8E 83            [24]11006 	mov	dph,r6
      003F59 8F F0            [24]11007 	mov	b,r7
      003F5B 12r00r00         [24]11008 	lcall	_stack_init
                                  11009 ;	calc.c:472: state_init(&s, STATE_START, STATE_FINAL, UNDEF, deltas, &c);
      003F5E 74r0C            [12]11010 	mov	a,#_c
      003F60 C0 E0            [24]11011 	push	acc
      003F62 74s00            [12]11012 	mov	a,#(_c >> 8)
      003F64 C0 E0            [24]11013 	push	acc
      003F66 E4               [12]11014 	clr	a
      003F67 C0 E0            [24]11015 	push	acc
      003F69 74r00            [12]11016 	mov	a,#_deltas
      003F6B C0 E0            [24]11017 	push	acc
      003F6D 74s00            [12]11018 	mov	a,#(_deltas >> 8)
      003F6F C0 E0            [24]11019 	push	acc
      003F71 E4               [12]11020 	clr	a
      003F72 C0 E0            [24]11021 	push	acc
      003F74 C0 E0            [24]11022 	push	acc
      003F76 74 80            [12]11023 	mov	a,#0x80
      003F78 C0 E0            [24]11024 	push	acc
      003F7A 74 03            [12]11025 	mov	a,#0x03
      003F7C C0 E0            [24]11026 	push	acc
      003F7E E4               [12]11027 	clr	a
      003F7F C0 E0            [24]11028 	push	acc
      003F81 C0 E0            [24]11029 	push	acc
      003F83 C0 E0            [24]11030 	push	acc
      003F85 90r00r00         [24]11031 	mov	dptr,#_s
      003F88 75 F0 00         [24]11032 	mov	b,#0x00
      003F8B 12r00r00         [24]11033 	lcall	_state_init
      003F8E E5 81            [12]11034 	mov	a,sp
      003F90 24 F4            [12]11035 	add	a,#0xf4
      003F92 F5 81            [12]11036 	mov	sp,a
                                  11037 ;	calc.c:474: (void)status(&c, deltas);
      003F94 74r00            [12]11038 	mov	a,#_deltas
      003F96 C0 E0            [24]11039 	push	acc
      003F98 74s00            [12]11040 	mov	a,#(_deltas >> 8)
      003F9A C0 E0            [24]11041 	push	acc
      003F9C E4               [12]11042 	clr	a
      003F9D C0 E0            [24]11043 	push	acc
      003F9F 90r00r0C         [24]11044 	mov	dptr,#_c
      003FA2 75 F0 00         [24]11045 	mov	b,#0x00
      003FA5 12r30r85         [24]11046 	lcall	_status
      003FA8 15 81            [12]11047 	dec	sp
      003FAA 15 81            [12]11048 	dec	sp
      003FAC 15 81            [12]11049 	dec	sp
                                  11050 ;	calc.c:476: while (1) {
      003FAE                      11051 00192$:
                                  11052 ;	calc.c:477: input = getchar();
      003FAE 12r00r00         [24]11053 	lcall	_getchar
      003FB1 AE 82            [24]11054 	mov	r6,dpl
      003FB3 AF 83            [24]11055 	mov	r7,dph
                                  11056 ;	calc.c:478: if (((char)input == '\r') || ((char)input == '\n')) printstr("\r\n");
      003FB5 8E 05            [24]11057 	mov	ar5,r6
      003FB7 BD 0D 02         [24]11058 	cjne	r5,#0x0d,00400$
      003FBA 80 03            [24]11059 	sjmp	00101$
      003FBC                      11060 00400$:
      003FBC BD 0A 4E         [24]11061 	cjne	r5,#0x0a,00102$
      003FBF                      11062 00101$:
      003FBF 7Ar17            [12]11063 	mov	r2,#___str_3
      003FC1 7Bs00            [12]11064 	mov	r3,#(___str_3 >> 8)
      003FC3 7C 80            [12]11065 	mov	r4,#0x80
                                  11066 ;	calc.c:20: return;
      003FC5                      11067 00199$:
                                  11068 ;	calc.c:18: for (; *s; s++) putchar(*s);
      003FC5 8A 82            [24]11069 	mov	dpl,r2
      003FC7 8B 83            [24]11070 	mov	dph,r3
      003FC9 8C F0            [24]11071 	mov	b,r4
      003FCB A8*00            [24]11072 	mov	r0,_bp
      003FCD 08               [12]11073 	inc	r0
      003FCE 12r00r00         [24]11074 	lcall	__gptrget
      003FD1 F6               [12]11075 	mov	@r0,a
      003FD2 A8*00            [24]11076 	mov	r0,_bp
      003FD4 08               [12]11077 	inc	r0
      003FD5 E6               [12]11078 	mov	a,@r0
      003FD6 60 48            [24]11079 	jz	00103$
      003FD8 C0 06            [24]11080 	push	ar6
      003FDA C0 07            [24]11081 	push	ar7
      003FDC A8*00            [24]11082 	mov	r0,_bp
      003FDE 08               [12]11083 	inc	r0
      003FDF 86 06            [24]11084 	mov	ar6,@r0
      003FE1 7F 00            [12]11085 	mov	r7,#0x00
      003FE3 8E 82            [24]11086 	mov	dpl,r6
      003FE5 8F 83            [24]11087 	mov	dph,r7
      003FE7 C0 07            [24]11088 	push	ar7
      003FE9 C0 06            [24]11089 	push	ar6
      003FEB C0 05            [24]11090 	push	ar5
      003FED C0 04            [24]11091 	push	ar4
      003FEF C0 03            [24]11092 	push	ar3
      003FF1 C0 02            [24]11093 	push	ar2
      003FF3 12r00r00         [24]11094 	lcall	_putchar
      003FF6 D0 02            [24]11095 	pop	ar2
      003FF8 D0 03            [24]11096 	pop	ar3
      003FFA D0 04            [24]11097 	pop	ar4
      003FFC D0 05            [24]11098 	pop	ar5
      003FFE D0 06            [24]11099 	pop	ar6
      004000 D0 07            [24]11100 	pop	ar7
      004002 0A               [12]11101 	inc	r2
      004003 BA 00 01         [24]11102 	cjne	r2,#0x00,00404$
      004006 0B               [12]11103 	inc	r3
      004007                      11104 00404$:
      004007 D0 07            [24]11105 	pop	ar7
      004009 D0 06            [24]11106 	pop	ar6
                                  11107 ;	calc.c:478: if (((char)input == '\r') || ((char)input == '\n')) printstr("\r\n");
      00400B 80 B8            [24]11108 	sjmp	00199$
      00400D                      11109 00102$:
                                  11110 ;	calc.c:479: else (void)putchar(input);
      00400D 8E 82            [24]11111 	mov	dpl,r6
      00400F 8F 83            [24]11112 	mov	dph,r7
      004011 C0 07            [24]11113 	push	ar7
      004013 C0 06            [24]11114 	push	ar6
      004015 C0 05            [24]11115 	push	ar5
      004017 12r00r00         [24]11116 	lcall	_putchar
      00401A D0 05            [24]11117 	pop	ar5
      00401C D0 06            [24]11118 	pop	ar6
      00401E D0 07            [24]11119 	pop	ar7
      004020                      11120 00103$:
                                  11121 ;	calc.c:480: c.digit[0] = (char)input;
      004020 90r00r13         [24]11122 	mov	dptr,#(_c + 0x0007)
      004023 ED               [12]11123 	mov	a,r5
      004024 F0               [24]11124 	movx	@dptr,a
                                  11125 ;	calc.c:482: if ((char)input == 'q') {
      004025 BD 71 2C         [24]11126 	cjne	r5,#0x71,00189$
                                  11127 ;	calc.c:483: if (state_exec(&s, EVENT_TERM) <= 0) break;
      004028 74 08            [12]11128 	mov	a,#0x08
      00402A C0 E0            [24]11129 	push	acc
      00402C E4               [12]11130 	clr	a
      00402D C0 E0            [24]11131 	push	acc
      00402F 90r00r00         [24]11132 	mov	dptr,#_s
      004032 75 F0 00         [24]11133 	mov	b,#0x00
      004035 12r00r00         [24]11134 	lcall	_state_exec
      004038 AB 82            [24]11135 	mov	r3,dpl
      00403A AC 83            [24]11136 	mov	r4,dph
      00403C 15 81            [12]11137 	dec	sp
      00403E 15 81            [12]11138 	dec	sp
      004040 C3               [12]11139 	clr	c
      004041 E4               [12]11140 	clr	a
      004042 9B               [12]11141 	subb	a,r3
      004043 74 80            [12]11142 	mov	a,#(0x00 ^ 0x80)
      004045 8C F0            [24]11143 	mov	b,r4
      004047 63 F0 80         [24]11144 	xrl	b,#0x80
      00404A 95 F0            [12]11145 	subb	a,b
      00404C 50 03            [24]11146 	jnc	00407$
      00404E 02r3FrAE         [24]11147 	ljmp	00192$
      004051                      11148 00407$:
      004051 02r43r03         [24]11149 	ljmp	00193$
      004054                      11150 00189$:
                                  11151 ;	calc.c:484: } else if ((char)input == 's') {
      004054 BD 73 2C         [24]11152 	cjne	r5,#0x73,00186$
                                  11153 ;	calc.c:485: if (state_exec(&s, EVENT_STATUS) <= 0) break;
      004057 74 03            [12]11154 	mov	a,#0x03
      004059 C0 E0            [24]11155 	push	acc
      00405B E4               [12]11156 	clr	a
      00405C C0 E0            [24]11157 	push	acc
      00405E 90r00r00         [24]11158 	mov	dptr,#_s
      004061 75 F0 00         [24]11159 	mov	b,#0x00
      004064 12r00r00         [24]11160 	lcall	_state_exec
      004067 AB 82            [24]11161 	mov	r3,dpl
      004069 AC 83            [24]11162 	mov	r4,dph
      00406B 15 81            [12]11163 	dec	sp
      00406D 15 81            [12]11164 	dec	sp
      00406F C3               [12]11165 	clr	c
      004070 E4               [12]11166 	clr	a
      004071 9B               [12]11167 	subb	a,r3
      004072 74 80            [12]11168 	mov	a,#(0x00 ^ 0x80)
      004074 8C F0            [24]11169 	mov	b,r4
      004076 63 F0 80         [24]11170 	xrl	b,#0x80
      004079 95 F0            [12]11171 	subb	a,b
      00407B 50 03            [24]11172 	jnc	00410$
      00407D 02r3FrAE         [24]11173 	ljmp	00192$
      004080                      11174 00410$:
      004080 02r43r03         [24]11175 	ljmp	00193$
      004083                      11176 00186$:
                                  11177 ;	calc.c:486: } else if ((char)input == '?') {
      004083 BD 3F 2C         [24]11178 	cjne	r5,#0x3f,00183$
                                  11179 ;	calc.c:487: if (state_exec(&s, EVENT_HELP) <= 0) break;
      004086 74 04            [12]11180 	mov	a,#0x04
      004088 C0 E0            [24]11181 	push	acc
      00408A E4               [12]11182 	clr	a
      00408B C0 E0            [24]11183 	push	acc
      00408D 90r00r00         [24]11184 	mov	dptr,#_s
      004090 75 F0 00         [24]11185 	mov	b,#0x00
      004093 12r00r00         [24]11186 	lcall	_state_exec
      004096 AB 82            [24]11187 	mov	r3,dpl
      004098 AC 83            [24]11188 	mov	r4,dph
      00409A 15 81            [12]11189 	dec	sp
      00409C 15 81            [12]11190 	dec	sp
      00409E C3               [12]11191 	clr	c
      00409F E4               [12]11192 	clr	a
      0040A0 9B               [12]11193 	subb	a,r3
      0040A1 74 80            [12]11194 	mov	a,#(0x00 ^ 0x80)
      0040A3 8C F0            [24]11195 	mov	b,r4
      0040A5 63 F0 80         [24]11196 	xrl	b,#0x80
      0040A8 95 F0            [12]11197 	subb	a,b
      0040AA 50 03            [24]11198 	jnc	00413$
      0040AC 02r3FrAE         [24]11199 	ljmp	00192$
      0040AF                      11200 00413$:
      0040AF 02r43r03         [24]11201 	ljmp	00193$
      0040B2                      11202 00183$:
                                  11203 ;	calc.c:488: } else if ((char)input == 'i') {
      0040B2 BD 69 2C         [24]11204 	cjne	r5,#0x69,00180$
                                  11205 ;	calc.c:489: if (state_exec(&s, EVENT_RSTA_i) <= 0) break;
      0040B5 74 06            [12]11206 	mov	a,#0x06
      0040B7 C0 E0            [24]11207 	push	acc
      0040B9 E4               [12]11208 	clr	a
      0040BA C0 E0            [24]11209 	push	acc
      0040BC 90r00r00         [24]11210 	mov	dptr,#_s
      0040BF 75 F0 00         [24]11211 	mov	b,#0x00
      0040C2 12r00r00         [24]11212 	lcall	_state_exec
      0040C5 AB 82            [24]11213 	mov	r3,dpl
      0040C7 AC 83            [24]11214 	mov	r4,dph
      0040C9 15 81            [12]11215 	dec	sp
      0040CB 15 81            [12]11216 	dec	sp
      0040CD C3               [12]11217 	clr	c
      0040CE E4               [12]11218 	clr	a
      0040CF 9B               [12]11219 	subb	a,r3
      0040D0 74 80            [12]11220 	mov	a,#(0x00 ^ 0x80)
      0040D2 8C F0            [24]11221 	mov	b,r4
      0040D4 63 F0 80         [24]11222 	xrl	b,#0x80
      0040D7 95 F0            [12]11223 	subb	a,b
      0040D9 50 03            [24]11224 	jnc	00416$
      0040DB 02r3FrAE         [24]11225 	ljmp	00192$
      0040DE                      11226 00416$:
      0040DE 02r43r03         [24]11227 	ljmp	00193$
      0040E1                      11228 00180$:
                                  11229 ;	calc.c:490: } else if ((char)input == 'I') {
      0040E1 BD 49 2C         [24]11230 	cjne	r5,#0x49,00177$
                                  11231 ;	calc.c:491: if (state_exec(&s, EVENT_RSTA_I) <= 0) break;
      0040E4 74 07            [12]11232 	mov	a,#0x07
      0040E6 C0 E0            [24]11233 	push	acc
      0040E8 E4               [12]11234 	clr	a
      0040E9 C0 E0            [24]11235 	push	acc
      0040EB 90r00r00         [24]11236 	mov	dptr,#_s
      0040EE 75 F0 00         [24]11237 	mov	b,#0x00
      0040F1 12r00r00         [24]11238 	lcall	_state_exec
      0040F4 AB 82            [24]11239 	mov	r3,dpl
      0040F6 AC 83            [24]11240 	mov	r4,dph
      0040F8 15 81            [12]11241 	dec	sp
      0040FA 15 81            [12]11242 	dec	sp
      0040FC C3               [12]11243 	clr	c
      0040FD E4               [12]11244 	clr	a
      0040FE 9B               [12]11245 	subb	a,r3
      0040FF 74 80            [12]11246 	mov	a,#(0x00 ^ 0x80)
      004101 8C F0            [24]11247 	mov	b,r4
      004103 63 F0 80         [24]11248 	xrl	b,#0x80
      004106 95 F0            [12]11249 	subb	a,b
      004108 50 03            [24]11250 	jnc	00419$
      00410A 02r3FrAE         [24]11251 	ljmp	00192$
      00410D                      11252 00419$:
      00410D 02r43r03         [24]11253 	ljmp	00193$
      004110                      11254 00177$:
                                  11255 ;	calc.c:493: ((char)input == 'h') || ((char)input == 'H') ||
      004110 BD 68 02         [24]11256 	cjne	r5,#0x68,00420$
      004113 80 0D            [24]11257 	sjmp	00170$
      004115                      11258 00420$:
      004115 BD 48 02         [24]11259 	cjne	r5,#0x48,00421$
      004118 80 08            [24]11260 	sjmp	00170$
      00411A                      11261 00421$:
                                  11262 ;	calc.c:494: ((char)input == 'o') || ((char)input == 'O')
      00411A BD 6F 02         [24]11263 	cjne	r5,#0x6f,00422$
      00411D 80 03            [24]11264 	sjmp	00170$
      00411F                      11265 00422$:
      00411F BD 4F 2C         [24]11266 	cjne	r5,#0x4f,00171$
      004122                      11267 00170$:
                                  11268 ;	calc.c:496: if (state_exec(&s, EVENT_BASE) <= 0) break;
      004122 74 05            [12]11269 	mov	a,#0x05
      004124 C0 E0            [24]11270 	push	acc
      004126 E4               [12]11271 	clr	a
      004127 C0 E0            [24]11272 	push	acc
      004129 90r00r00         [24]11273 	mov	dptr,#_s
      00412C 75 F0 00         [24]11274 	mov	b,#0x00
      00412F 12r00r00         [24]11275 	lcall	_state_exec
      004132 AB 82            [24]11276 	mov	r3,dpl
      004134 AC 83            [24]11277 	mov	r4,dph
      004136 15 81            [12]11278 	dec	sp
      004138 15 81            [12]11279 	dec	sp
      00413A C3               [12]11280 	clr	c
      00413B E4               [12]11281 	clr	a
      00413C 9B               [12]11282 	subb	a,r3
      00413D 74 80            [12]11283 	mov	a,#(0x00 ^ 0x80)
      00413F 8C F0            [24]11284 	mov	b,r4
      004141 63 F0 80         [24]11285 	xrl	b,#0x80
      004144 95 F0            [12]11286 	subb	a,b
      004146 50 03            [24]11287 	jnc	00425$
      004148 02r3FrAE         [24]11288 	ljmp	00192$
      00414B                      11289 00425$:
      00414B 02r43r03         [24]11290 	ljmp	00193$
      00414E                      11291 00171$:
                                  11292 ;	calc.c:497: } else if (isxdigit(input)) {
      00414E 8E 82            [24]11293 	mov	dpl,r6
      004150 8F 83            [24]11294 	mov	dph,r7
      004152 C0 05            [24]11295 	push	ar5
      004154 12r00r00         [24]11296 	lcall	_isxdigit
      004157 E5 82            [12]11297 	mov	a,dpl
      004159 85 83 F0         [24]11298 	mov	b,dph
      00415C D0 05            [24]11299 	pop	ar5
      00415E 45 F0            [12]11300 	orl	a,b
      004160 60 2C            [24]11301 	jz	00168$
                                  11302 ;	calc.c:498: if (state_exec(&s, EVENT_DIGIT) <= 0) break;
      004162 74 01            [12]11303 	mov	a,#0x01
      004164 C0 E0            [24]11304 	push	acc
      004166 E4               [12]11305 	clr	a
      004167 C0 E0            [24]11306 	push	acc
      004169 90r00r00         [24]11307 	mov	dptr,#_s
      00416C 75 F0 00         [24]11308 	mov	b,#0x00
      00416F 12r00r00         [24]11309 	lcall	_state_exec
      004172 AE 82            [24]11310 	mov	r6,dpl
      004174 AF 83            [24]11311 	mov	r7,dph
      004176 15 81            [12]11312 	dec	sp
      004178 15 81            [12]11313 	dec	sp
      00417A C3               [12]11314 	clr	c
      00417B E4               [12]11315 	clr	a
      00417C 9E               [12]11316 	subb	a,r6
      00417D 74 80            [12]11317 	mov	a,#(0x00 ^ 0x80)
      00417F 8F F0            [24]11318 	mov	b,r7
      004181 63 F0 80         [24]11319 	xrl	b,#0x80
      004184 95 F0            [12]11320 	subb	a,b
      004186 50 03            [24]11321 	jnc	00427$
      004188 02r3FrAE         [24]11322 	ljmp	00192$
      00418B                      11323 00427$:
      00418B 02r43r03         [24]11324 	ljmp	00193$
      00418E                      11325 00168$:
                                  11326 ;	calc.c:500: ((char)input == 'p') || ((char)input == 'P') ||
      00418E BD 70 02         [24]11327 	cjne	r5,#0x70,00428$
      004191 80 17            [24]11328 	sjmp	00159$
      004193                      11329 00428$:
      004193 BD 50 02         [24]11330 	cjne	r5,#0x50,00429$
      004196 80 12            [24]11331 	sjmp	00159$
      004198                      11332 00429$:
                                  11333 ;	calc.c:501: ((char)input == 'v') || ((char)input == 'V') ||
      004198 BD 76 02         [24]11334 	cjne	r5,#0x76,00430$
      00419B 80 0D            [24]11335 	sjmp	00159$
      00419D                      11336 00430$:
      00419D BD 56 02         [24]11337 	cjne	r5,#0x56,00431$
      0041A0 80 08            [24]11338 	sjmp	00159$
      0041A2                      11339 00431$:
                                  11340 ;	calc.c:502: ((char)input == '.') ||
      0041A2 BD 2E 02         [24]11341 	cjne	r5,#0x2e,00432$
      0041A5 80 03            [24]11342 	sjmp	00159$
      0041A7                      11343 00432$:
                                  11344 ;	calc.c:503: ((char)input == 'x')
      0041A7 BD 78 2C         [24]11345 	cjne	r5,#0x78,00160$
      0041AA                      11346 00159$:
                                  11347 ;	calc.c:505: if (state_exec(&s, EVENT_OP) <= 0) break;
      0041AA 74 02            [12]11348 	mov	a,#0x02
      0041AC C0 E0            [24]11349 	push	acc
      0041AE E4               [12]11350 	clr	a
      0041AF C0 E0            [24]11351 	push	acc
      0041B1 90r00r00         [24]11352 	mov	dptr,#_s
      0041B4 75 F0 00         [24]11353 	mov	b,#0x00
      0041B7 12r00r00         [24]11354 	lcall	_state_exec
      0041BA AE 82            [24]11355 	mov	r6,dpl
      0041BC AF 83            [24]11356 	mov	r7,dph
      0041BE 15 81            [12]11357 	dec	sp
      0041C0 15 81            [12]11358 	dec	sp
      0041C2 C3               [12]11359 	clr	c
      0041C3 E4               [12]11360 	clr	a
      0041C4 9E               [12]11361 	subb	a,r6
      0041C5 74 80            [12]11362 	mov	a,#(0x00 ^ 0x80)
      0041C7 8F F0            [24]11363 	mov	b,r7
      0041C9 63 F0 80         [24]11364 	xrl	b,#0x80
      0041CC 95 F0            [12]11365 	subb	a,b
      0041CE 50 03            [24]11366 	jnc	00435$
      0041D0 02r3FrAE         [24]11367 	ljmp	00192$
      0041D3                      11368 00435$:
      0041D3 02r43r03         [24]11369 	ljmp	00193$
      0041D6                      11370 00160$:
                                  11371 ;	calc.c:507: ((char)input == 'X') || ((char)input == 'T') ||
      0041D6 BD 58 02         [24]11372 	cjne	r5,#0x58,00436$
      0041D9 80 17            [24]11373 	sjmp	00151$
      0041DB                      11374 00436$:
      0041DB BD 54 02         [24]11375 	cjne	r5,#0x54,00437$
      0041DE 80 12            [24]11376 	sjmp	00151$
      0041E0                      11377 00437$:
                                  11378 ;	calc.c:508: ((char)input == 'm') || ((char)input == 'M') ||
      0041E0 BD 6D 02         [24]11379 	cjne	r5,#0x6d,00438$
      0041E3 80 0D            [24]11380 	sjmp	00151$
      0041E5                      11381 00438$:
      0041E5 BD 4D 02         [24]11382 	cjne	r5,#0x4d,00439$
      0041E8 80 08            [24]11383 	sjmp	00151$
      0041EA                      11384 00439$:
                                  11385 ;	calc.c:509: ((char)input == 'u') || ((char)input == 'U')
      0041EA BD 75 02         [24]11386 	cjne	r5,#0x75,00440$
      0041ED 80 03            [24]11387 	sjmp	00151$
      0041EF                      11388 00440$:
      0041EF BD 55 2C         [24]11389 	cjne	r5,#0x55,00152$
      0041F2                      11390 00151$:
                                  11391 ;	calc.c:511: if (state_exec(&s, EVENT_OP) <= 0) break;
      0041F2 74 02            [12]11392 	mov	a,#0x02
      0041F4 C0 E0            [24]11393 	push	acc
      0041F6 E4               [12]11394 	clr	a
      0041F7 C0 E0            [24]11395 	push	acc
      0041F9 90r00r00         [24]11396 	mov	dptr,#_s
      0041FC 75 F0 00         [24]11397 	mov	b,#0x00
      0041FF 12r00r00         [24]11398 	lcall	_state_exec
      004202 AE 82            [24]11399 	mov	r6,dpl
      004204 AF 83            [24]11400 	mov	r7,dph
      004206 15 81            [12]11401 	dec	sp
      004208 15 81            [12]11402 	dec	sp
      00420A C3               [12]11403 	clr	c
      00420B E4               [12]11404 	clr	a
      00420C 9E               [12]11405 	subb	a,r6
      00420D 74 80            [12]11406 	mov	a,#(0x00 ^ 0x80)
      00420F 8F F0            [24]11407 	mov	b,r7
      004211 63 F0 80         [24]11408 	xrl	b,#0x80
      004214 95 F0            [12]11409 	subb	a,b
      004216 50 03            [24]11410 	jnc	00443$
      004218 02r3FrAE         [24]11411 	ljmp	00192$
      00421B                      11412 00443$:
      00421B 02r43r03         [24]11413 	ljmp	00193$
      00421E                      11414 00152$:
                                  11415 ;	calc.c:513: ((char)input == '+') || ((char)input == '-')
      00421E BD 2B 02         [24]11416 	cjne	r5,#0x2b,00444$
      004221 80 03            [24]11417 	sjmp	00147$
      004223                      11418 00444$:
      004223 BD 2D 2C         [24]11419 	cjne	r5,#0x2d,00148$
      004226                      11420 00147$:
                                  11421 ;	calc.c:515: if (state_exec(&s, EVENT_OP) <= 0) break;
      004226 74 02            [12]11422 	mov	a,#0x02
      004228 C0 E0            [24]11423 	push	acc
      00422A E4               [12]11424 	clr	a
      00422B C0 E0            [24]11425 	push	acc
      00422D 90r00r00         [24]11426 	mov	dptr,#_s
      004230 75 F0 00         [24]11427 	mov	b,#0x00
      004233 12r00r00         [24]11428 	lcall	_state_exec
      004236 AE 82            [24]11429 	mov	r6,dpl
      004238 AF 83            [24]11430 	mov	r7,dph
      00423A 15 81            [12]11431 	dec	sp
      00423C 15 81            [12]11432 	dec	sp
      00423E C3               [12]11433 	clr	c
      00423F E4               [12]11434 	clr	a
      004240 9E               [12]11435 	subb	a,r6
      004241 74 80            [12]11436 	mov	a,#(0x00 ^ 0x80)
      004243 8F F0            [24]11437 	mov	b,r7
      004245 63 F0 80         [24]11438 	xrl	b,#0x80
      004248 95 F0            [12]11439 	subb	a,b
      00424A 50 03            [24]11440 	jnc	00447$
      00424C 02r3FrAE         [24]11441 	ljmp	00192$
      00424F                      11442 00447$:
      00424F 02r43r03         [24]11443 	ljmp	00193$
      004252                      11444 00148$:
                                  11445 ;	calc.c:517: ((char)input == '*') ||
      004252 BD 2A 02         [24]11446 	cjne	r5,#0x2a,00448$
      004255 80 12            [24]11447 	sjmp	00140$
      004257                      11448 00448$:
                                  11449 ;	calc.c:518: ((char)input == '/') || ((char)input == '\\') ||
      004257 BD 2F 02         [24]11450 	cjne	r5,#0x2f,00449$
      00425A 80 0D            [24]11451 	sjmp	00140$
      00425C                      11452 00449$:
      00425C BD 5C 02         [24]11453 	cjne	r5,#0x5c,00450$
      00425F 80 08            [24]11454 	sjmp	00140$
      004261                      11455 00450$:
                                  11456 ;	calc.c:519: ((char)input == '%') || ((char)input == '#')
      004261 BD 25 02         [24]11457 	cjne	r5,#0x25,00451$
      004264 80 03            [24]11458 	sjmp	00140$
      004266                      11459 00451$:
      004266 BD 23 29         [24]11460 	cjne	r5,#0x23,00141$
      004269                      11461 00140$:
                                  11462 ;	calc.c:521: if (state_exec(&s, EVENT_OP) <= 0) break;
      004269 74 02            [12]11463 	mov	a,#0x02
      00426B C0 E0            [24]11464 	push	acc
      00426D E4               [12]11465 	clr	a
      00426E C0 E0            [24]11466 	push	acc
      004270 90r00r00         [24]11467 	mov	dptr,#_s
      004273 75 F0 00         [24]11468 	mov	b,#0x00
      004276 12r00r00         [24]11469 	lcall	_state_exec
      004279 AE 82            [24]11470 	mov	r6,dpl
      00427B AF 83            [24]11471 	mov	r7,dph
      00427D 15 81            [12]11472 	dec	sp
      00427F 15 81            [12]11473 	dec	sp
      004281 C3               [12]11474 	clr	c
      004282 E4               [12]11475 	clr	a
      004283 9E               [12]11476 	subb	a,r6
      004284 74 80            [12]11477 	mov	a,#(0x00 ^ 0x80)
      004286 8F F0            [24]11478 	mov	b,r7
      004288 63 F0 80         [24]11479 	xrl	b,#0x80
      00428B 95 F0            [12]11480 	subb	a,b
      00428D 50 74            [24]11481 	jnc	00193$
      00428F 02r3FrAE         [24]11482 	ljmp	00192$
      004292                      11483 00141$:
                                  11484 ;	calc.c:523: ((char)input == '&') ||
      004292 BD 26 02         [24]11485 	cjne	r5,#0x26,00455$
      004295 80 1C            [24]11486 	sjmp	00131$
      004297                      11487 00455$:
                                  11488 ;	calc.c:524: ((char)input == '|') || ((char)input == '^') ||
      004297 BD 7C 02         [24]11489 	cjne	r5,#0x7c,00456$
      00429A 80 17            [24]11490 	sjmp	00131$
      00429C                      11491 00456$:
      00429C BD 5E 02         [24]11492 	cjne	r5,#0x5e,00457$
      00429F 80 12            [24]11493 	sjmp	00131$
      0042A1                      11494 00457$:
                                  11495 ;	calc.c:525: ((char)input == '~') ||
      0042A1 BD 7E 02         [24]11496 	cjne	r5,#0x7e,00458$
      0042A4 80 0D            [24]11497 	sjmp	00131$
      0042A6                      11498 00458$:
                                  11499 ;	calc.c:526: ((char)input == '>') || ((char)input == ']') ||
      0042A6 BD 3E 02         [24]11500 	cjne	r5,#0x3e,00459$
      0042A9 80 08            [24]11501 	sjmp	00131$
      0042AB                      11502 00459$:
      0042AB BD 5D 02         [24]11503 	cjne	r5,#0x5d,00460$
      0042AE 80 03            [24]11504 	sjmp	00131$
      0042B0                      11505 00460$:
                                  11506 ;	calc.c:527: ((char)input == '<')
      0042B0 BD 3C 29         [24]11507 	cjne	r5,#0x3c,00132$
      0042B3                      11508 00131$:
                                  11509 ;	calc.c:529: if (state_exec(&s, EVENT_OP) <= 0) break;
      0042B3 74 02            [12]11510 	mov	a,#0x02
      0042B5 C0 E0            [24]11511 	push	acc
      0042B7 E4               [12]11512 	clr	a
      0042B8 C0 E0            [24]11513 	push	acc
      0042BA 90r00r00         [24]11514 	mov	dptr,#_s
      0042BD 75 F0 00         [24]11515 	mov	b,#0x00
      0042C0 12r00r00         [24]11516 	lcall	_state_exec
      0042C3 AE 82            [24]11517 	mov	r6,dpl
      0042C5 AF 83            [24]11518 	mov	r7,dph
      0042C7 15 81            [12]11519 	dec	sp
      0042C9 15 81            [12]11520 	dec	sp
      0042CB C3               [12]11521 	clr	c
      0042CC E4               [12]11522 	clr	a
      0042CD 9E               [12]11523 	subb	a,r6
      0042CE 74 80            [12]11524 	mov	a,#(0x00 ^ 0x80)
      0042D0 8F F0            [24]11525 	mov	b,r7
      0042D2 63 F0 80         [24]11526 	xrl	b,#0x80
      0042D5 95 F0            [12]11527 	subb	a,b
      0042D7 50 2A            [24]11528 	jnc	00193$
      0042D9 02r3FrAE         [24]11529 	ljmp	00192$
      0042DC                      11530 00132$:
                                  11531 ;	calc.c:531: if (state_exec(&s, EVENT_DELIM) <= 0) break;
      0042DC E4               [12]11532 	clr	a
      0042DD C0 E0            [24]11533 	push	acc
      0042DF C0 E0            [24]11534 	push	acc
      0042E1 90r00r00         [24]11535 	mov	dptr,#_s
      0042E4 75 F0 00         [24]11536 	mov	b,#0x00
      0042E7 12r00r00         [24]11537 	lcall	_state_exec
      0042EA AE 82            [24]11538 	mov	r6,dpl
      0042EC AF 83            [24]11539 	mov	r7,dph
      0042EE 15 81            [12]11540 	dec	sp
      0042F0 15 81            [12]11541 	dec	sp
      0042F2 C3               [12]11542 	clr	c
      0042F3 E4               [12]11543 	clr	a
      0042F4 9E               [12]11544 	subb	a,r6
      0042F5 74 80            [12]11545 	mov	a,#(0x00 ^ 0x80)
      0042F7 8F F0            [24]11546 	mov	b,r7
      0042F9 63 F0 80         [24]11547 	xrl	b,#0x80
      0042FC 95 F0            [12]11548 	subb	a,b
      0042FE 50 03            [24]11549 	jnc	00464$
      004300 02r3FrAE         [24]11550 	ljmp	00192$
      004303                      11551 00464$:
      004303                      11552 00193$:
                                  11553 ;	calc.c:535: printstr("TERM\r\n");
      004303 7DrA8            [12]11554 	mov	r5,#___str_52
      004305 7Es03            [12]11555 	mov	r6,#(___str_52 >> 8)
      004307 7F 80            [12]11556 	mov	r7,#0x80
                                  11557 ;	calc.c:20: return;
      004309                      11558 00202$:
                                  11559 ;	calc.c:18: for (; *s; s++) putchar(*s);
      004309 8D 82            [24]11560 	mov	dpl,r5
      00430B 8E 83            [24]11561 	mov	dph,r6
      00430D 8F F0            [24]11562 	mov	b,r7
      00430F 12r00r00         [24]11563 	lcall	__gptrget
      004312 FC               [12]11564 	mov	r4,a
      004313 60 1C            [24]11565 	jz	00197$
      004315 7B 00            [12]11566 	mov	r3,#0x00
      004317 8C 82            [24]11567 	mov	dpl,r4
      004319 8B 83            [24]11568 	mov	dph,r3
      00431B C0 07            [24]11569 	push	ar7
      00431D C0 06            [24]11570 	push	ar6
      00431F C0 05            [24]11571 	push	ar5
      004321 12r00r00         [24]11572 	lcall	_putchar
      004324 D0 05            [24]11573 	pop	ar5
      004326 D0 06            [24]11574 	pop	ar6
      004328 D0 07            [24]11575 	pop	ar7
      00432A 0D               [12]11576 	inc	r5
                                  11577 ;	calc.c:535: printstr("TERM\r\n");
      00432B BD 00 DB         [24]11578 	cjne	r5,#0x00,00202$
      00432E 0E               [12]11579 	inc	r6
      00432F 80 D8            [24]11580 	sjmp	00202$
      004331                      11581 00197$:
                                  11582 ;	calc.c:537: PCON |= 2;
      004331 43 87 02         [24]11583 	orl	_PCON,#0x02
                                  11584 ;	calc.c:539: return;
                                  11585 ;	calc.c:540: }
      004334 15 81            [12]11586 	dec	sp
      004336 D0*00            [24]11587 	pop	_bp
      004338 22               [24]11588 	ret
                                  11589 	.area CSEG    (CODE)
                                  11590 	.area CONST   (CODE)
                                  11591 	.area CONST   (CODE)
      000000                      11592 ___str_0:
      000000 25 30 38 6C 78       11593 	.ascii "%08lx"
      000005 09                   11594 	.db 0x09
      000006 00                   11595 	.db 0x00
                                  11596 	.area CSEG    (CODE)
                                  11597 	.area CONST   (CODE)
      000007                      11598 ___str_1:
      000007 25 20 31 31 6C 64    11599 	.ascii "% 11ld"
      00000D 09                   11600 	.db 0x09
      00000E 00                   11601 	.db 0x00
                                  11602 	.area CSEG    (CODE)
                                  11603 	.area CONST   (CODE)
      00000F                      11604 ___str_2:
      00000F 25 30 31 31 6C 6F    11605 	.ascii "%011lo"
      000015 09                   11606 	.db 0x09
      000016 00                   11607 	.db 0x00
                                  11608 	.area CSEG    (CODE)
                                  11609 	.area CONST   (CODE)
      000017                      11610 ___str_3:
      000017 0D                   11611 	.db 0x0d
      000018 0A                   11612 	.db 0x0a
      000019 00                   11613 	.db 0x00
                                  11614 	.area CSEG    (CODE)
                                  11615 	.area CONST   (CODE)
      00001A                      11616 ___str_4:
      00001A 73 74 61 63 6B 20 75 11617 	.ascii "stack underflow"
             6E 64 65 72 66 6C 6F
             77
      000029 0D                   11618 	.db 0x0d
      00002A 0A                   11619 	.db 0x0a
      00002B 00                   11620 	.db 0x00
                                  11621 	.area CSEG    (CODE)
                                  11622 	.area CONST   (CODE)
      00002C                      11623 ___str_5:
      00002C 50 53 50 41          11624 	.ascii "PSPA"
      000030 09                   11625 	.db 0x09
      000031 00                   11626 	.db 0x00
                                  11627 	.area CSEG    (CODE)
                                  11628 	.area CONST   (CODE)
      000032                      11629 ___str_6:
      000032 53 53 50 41          11630 	.ascii "SSPA"
      000036 09                   11631 	.db 0x09
      000037 00                   11632 	.db 0x00
                                  11633 	.area CSEG    (CODE)
                                  11634 	.area CONST   (CODE)
      000038                      11635 ___str_7:
      000038 50 53 56 41          11636 	.ascii "PSVA"
      00003C 09                   11637 	.db 0x09
      00003D 00                   11638 	.db 0x00
                                  11639 	.area CSEG    (CODE)
                                  11640 	.area CONST   (CODE)
      00003E                      11641 ___str_8:
      00003E 50 53 56 54 4F 50    11642 	.ascii "PSVTOP"
      000044 09                   11643 	.db 0x09
      000045 00                   11644 	.db 0x00
                                  11645 	.area CSEG    (CODE)
                                  11646 	.area CONST   (CODE)
      000046                      11647 ___str_9:
      000046 50 53 50 54 4F 50    11648 	.ascii "PSPTOP"
      00004C 09                   11649 	.db 0x09
      00004D 00                   11650 	.db 0x00
                                  11651 	.area CSEG    (CODE)
                                  11652 	.area CONST   (CODE)
      00004E                      11653 ___str_10:
      00004E 0D                   11654 	.db 0x0d
      00004F 0A                   11655 	.db 0x0a
      000050 73 74 61 63 6B 20 75 11656 	.ascii "stack underflow"
             6E 64 65 72 66 6C 6F
             77
      00005F 0D                   11657 	.db 0x0d
      000060 0A                   11658 	.db 0x0a
      000061 00                   11659 	.db 0x00
                                  11660 	.area CSEG    (CODE)
                                  11661 	.area CONST   (CODE)
      000062                      11662 ___str_11:
      000062 0D                   11663 	.db 0x0d
      000063 0A                   11664 	.db 0x0a
      000064 73 65 63 6F 6E 64 61 11665 	.ascii "secondary stack overflow"
             72 79 20 73 74 61 63
             6B 20 6F 76 65 72 66
             6C 6F 77
      00007C 0D                   11666 	.db 0x0d
      00007D 0A                   11667 	.db 0x0a
      00007E 00                   11668 	.db 0x00
                                  11669 	.area CSEG    (CODE)
                                  11670 	.area CONST   (CODE)
      00007F                      11671 ___str_12:
      00007F 0D                   11672 	.db 0x0d
      000080 0A                   11673 	.db 0x0a
      000081 73 65 63 6F 6E 64 61 11674 	.ascii "secondary stack underflow"
             72 79 20 73 74 61 63
             6B 20 75 6E 64 65 72
             66 6C 6F 77
      00009A 0D                   11675 	.db 0x0d
      00009B 0A                   11676 	.db 0x0a
      00009C 00                   11677 	.db 0x00
                                  11678 	.area CSEG    (CODE)
                                  11679 	.area CONST   (CODE)
      00009D                      11680 ___str_13:
      00009D 0D                   11681 	.db 0x0d
      00009E 0A                   11682 	.db 0x0a
      00009F 73 74 61 63 6B 20 6F 11683 	.ascii "stack overflow"
             76 65 72 66 6C 6F 77
      0000AD 0D                   11684 	.db 0x0d
      0000AE 0A                   11685 	.db 0x0a
      0000AF 00                   11686 	.db 0x00
                                  11687 	.area CSEG    (CODE)
                                  11688 	.area CONST   (CODE)
      0000B0                      11689 ___str_14:
      0000B0 0D                   11690 	.db 0x0d
      0000B1 0A                   11691 	.db 0x0a
      0000B2 64 69 76 69 73 69 6F 11692 	.ascii "division by zero"
             6E 20 62 79 20 7A 65
             72 6F
      0000C2 0D                   11693 	.db 0x0d
      0000C3 0A                   11694 	.db 0x0a
      0000C4 00                   11695 	.db 0x00
                                  11696 	.area CSEG    (CODE)
                                  11697 	.area CONST   (CODE)
      0000C5                      11698 ___str_15:
      0000C5 0D                   11699 	.db 0x0d
      0000C6 0A                   11700 	.db 0x0a
      0000C7 50 53 20 3D 20 25 70 11701 	.ascii "PS = %p, SS = %p, base = %d"
             2C 20 53 53 20 3D 20
             25 70 2C 20 62 61 73
             65 20 3D 20 25 64
      0000E2 0D                   11702 	.db 0x0d
      0000E3 0A                   11703 	.db 0x0a
      0000E4 00                   11704 	.db 0x00
                                  11705 	.area CSEG    (CODE)
                                  11706 	.area CONST   (CODE)
      0000E5                      11707 ___str_16:
      0000E5 41 43 43             11708 	.ascii "ACC"
      0000E8 09                   11709 	.db 0x09
      0000E9 00                   11710 	.db 0x00
                                  11711 	.area CSEG    (CODE)
                                  11712 	.area CONST   (CODE)
      0000EA                      11713 ___str_17:
      0000EA 0D                   11714 	.db 0x0d
      0000EB 0A                   11715 	.db 0x0a
      0000EC 50 53 54 4F 50 31    11716 	.ascii "PSTOP1"
      0000F2 09                   11717 	.db 0x09
      0000F3 00                   11718 	.db 0x00
                                  11719 	.area CSEG    (CODE)
                                  11720 	.area CONST   (CODE)
      0000F4                      11721 ___str_18:
      0000F4 0D                   11722 	.db 0x0d
      0000F5 0A                   11723 	.db 0x0a
      0000F6 50 53 54 4F 50 30    11724 	.ascii "PSTOP0"
      0000FC 09                   11725 	.db 0x09
      0000FD 00                   11726 	.db 0x00
                                  11727 	.area CSEG    (CODE)
                                  11728 	.area CONST   (CODE)
      0000FE                      11729 ___str_19:
      0000FE 0D                   11730 	.db 0x0d
      0000FF 0A                   11731 	.db 0x0a
      000100 53 53 54 4F 50 31    11732 	.ascii "SSTOP1"
      000106 09                   11733 	.db 0x09
      000107 00                   11734 	.db 0x00
                                  11735 	.area CSEG    (CODE)
                                  11736 	.area CONST   (CODE)
      000108                      11737 ___str_20:
      000108 0D                   11738 	.db 0x0d
      000109 0A                   11739 	.db 0x0a
      00010A 53 53 54 4F 50 30    11740 	.ascii "SSTOP0"
      000110 09                   11741 	.db 0x09
      000111 00                   11742 	.db 0x00
                                  11743 	.area CSEG    (CODE)
                                  11744 	.area CONST   (CODE)
      000112                      11745 ___str_21:
      000112 0D                   11746 	.db 0x0d
      000113 0A                   11747 	.db 0x0a
      000114 48 68 4F 6F          11748 	.ascii "HhOo"
      000118 09                   11749 	.db 0x09
      000119 62 61 73 65 20 31 36 11750 	.ascii "base 16 10 8 2"
             20 31 30 20 38 20 32
      000127 0D                   11751 	.db 0x0d
      000128 0A                   11752 	.db 0x0a
      000129 00                   11753 	.db 0x00
                                  11754 	.area CSEG    (CODE)
                                  11755 	.area CONST   (CODE)
      00012A                      11756 ___str_22:
      00012A 70 2E                11757 	.ascii "p."
      00012C 09                   11758 	.db 0x09
      00012D 70 6F 70 20 74 6F 70 11759 	.ascii "pop top"
      000134 0D                   11760 	.db 0x0d
      000135 0A                   11761 	.db 0x0a
      000136 00                   11762 	.db 0x00
                                  11763 	.area CSEG    (CODE)
                                  11764 	.area CONST   (CODE)
      000137                      11765 ___str_23:
      000137 50                   11766 	.ascii "P"
      000138 09                   11767 	.db 0x09
      000139 70 6F 70 20 73 74 61 11768 	.ascii "pop stack"
             63 6B
      000142 0D                   11769 	.db 0x0d
      000143 0A                   11770 	.db 0x0a
      000144 00                   11771 	.db 0x00
                                  11772 	.area CSEG    (CODE)
                                  11773 	.area CONST   (CODE)
      000145                      11774 ___str_24:
      000145 76                   11775 	.ascii "v"
      000146 09                   11776 	.db 0x09
      000147 70 65 65 6B 20 74 6F 11777 	.ascii "peek top"
             70
      00014F 0D                   11778 	.db 0x0d
      000150 0A                   11779 	.db 0x0a
      000151 00                   11780 	.db 0x00
                                  11781 	.area CSEG    (CODE)
                                  11782 	.area CONST   (CODE)
      000152                      11783 ___str_25:
      000152 56                   11784 	.ascii "V"
      000153 09                   11785 	.db 0x09
      000154 70 65 65 6B 20 73 74 11786 	.ascii "peek stack"
             61 63 6B
      00015E 0D                   11787 	.db 0x0d
      00015F 0A                   11788 	.db 0x0a
      000160 00                   11789 	.db 0x00
                                  11790 	.area CSEG    (CODE)
                                  11791 	.area CONST   (CODE)
      000161                      11792 ___str_26:
      000161 69                   11793 	.ascii "i"
      000162 09                   11794 	.db 0x09
      000163 72 65 73 65 74 20 61 11795 	.ascii "reset acc"
             63 63
      00016C 0D                   11796 	.db 0x0d
      00016D 0A                   11797 	.db 0x0a
      00016E 00                   11798 	.db 0x00
                                  11799 	.area CSEG    (CODE)
                                  11800 	.area CONST   (CODE)
      00016F                      11801 ___str_27:
      00016F 49                   11802 	.ascii "I"
      000170 09                   11803 	.db 0x09
      000171 72 65 73 65 74 20 61 11804 	.ascii "reset and discard acc"
             6E 64 20 64 69 73 63
             61 72 64 20 61 63 63
      000186 0D                   11805 	.db 0x0d
      000187 0A                   11806 	.db 0x0a
      000188 00                   11807 	.db 0x00
                                  11808 	.area CSEG    (CODE)
                                  11809 	.area CONST   (CODE)
      000189                      11810 ___str_28:
      000189 78                   11811 	.ascii "x"
      00018A 09                   11812 	.db 0x09
      00018B 65 78 63 68 61 6E 67 11813 	.ascii "exchange top 2"
             65 20 74 6F 70 20 32
      000199 0D                   11814 	.db 0x0d
      00019A 0A                   11815 	.db 0x0a
      00019B 00                   11816 	.db 0x00
                                  11817 	.area CSEG    (CODE)
                                  11818 	.area CONST   (CODE)
      00019C                      11819 ___str_29:
      00019C 58                   11820 	.ascii "X"
      00019D 09                   11821 	.db 0x09
      00019E 65 78 63 68 61 6E 67 11822 	.ascii "exchange stacks primary <-> secondary"
             65 20 73 74 61 63 6B
             73 20 70 72 69 6D 61
             72 79 20 3C 2D 3E 20
             73 65 63 6F 6E 64 61
             72 79
      0001C3 0D                   11823 	.db 0x0d
      0001C4 0A                   11824 	.db 0x0a
      0001C5 00                   11825 	.db 0x00
                                  11826 	.area CSEG    (CODE)
                                  11827 	.area CONST   (CODE)
      0001C6                      11828 ___str_30:
      0001C6 54                   11829 	.ascii "T"
      0001C7 09                   11830 	.db 0x09
      0001C8 65 78 63 68 61 6E 67 11831 	.ascii "exchange tops primary <-> secondary"
             65 20 74 6F 70 73 20
             70 72 69 6D 61 72 79
             20 3C 2D 3E 20 73 65
             63 6F 6E 64 61 72 79
      0001EB 0D                   11832 	.db 0x0d
      0001EC 0A                   11833 	.db 0x0a
      0001ED 00                   11834 	.db 0x00
                                  11835 	.area CSEG    (CODE)
                                  11836 	.area CONST   (CODE)
      0001EE                      11837 ___str_31:
      0001EE 55                   11838 	.ascii "U"
      0001EF 09                   11839 	.db 0x09
      0001F0 63 6F 70 79 20 74 6F 11840 	.ascii "copy top secondary -> primary"
             70 20 73 65 63 6F 6E
             64 61 72 79 20 2D 3E
             20 70 72 69 6D 61 72
             79
      00020D 0D                   11841 	.db 0x0d
      00020E 0A                   11842 	.db 0x0a
      00020F 00                   11843 	.db 0x00
                                  11844 	.area CSEG    (CODE)
                                  11845 	.area CONST   (CODE)
      000210                      11846 ___str_32:
      000210 75                   11847 	.ascii "u"
      000211 09                   11848 	.db 0x09
      000212 63 6F 70 79 20 74 6F 11849 	.ascii "copy top primary -> secondary"
             70 20 70 72 69 6D 61
             72 79 20 2D 3E 20 73
             65 63 6F 6E 64 61 72
             79
      00022F 0D                   11850 	.db 0x0d
      000230 0A                   11851 	.db 0x0a
      000231 00                   11852 	.db 0x00
                                  11853 	.area CSEG    (CODE)
                                  11854 	.area CONST   (CODE)
      000232                      11855 ___str_33:
      000232 4D                   11856 	.ascii "M"
      000233 09                   11857 	.db 0x09
      000234 6D 6F 76 65 20 74 6F 11858 	.ascii "move top secondary -> primary"
             70 20 73 65 63 6F 6E
             64 61 72 79 20 2D 3E
             20 70 72 69 6D 61 72
             79
      000251 0D                   11859 	.db 0x0d
      000252 0A                   11860 	.db 0x0a
      000253 00                   11861 	.db 0x00
                                  11862 	.area CSEG    (CODE)
                                  11863 	.area CONST   (CODE)
      000254                      11864 ___str_34:
      000254 6D                   11865 	.ascii "m"
      000255 09                   11866 	.db 0x09
      000256 6D 6F 76 65 20 74 6F 11867 	.ascii "move top primary -> secondary"
             70 20 70 72 69 6D 61
             72 79 20 2D 3E 20 73
             65 63 6F 6E 64 61 72
             79
      000273 0D                   11868 	.db 0x0d
      000274 0A                   11869 	.db 0x0a
      000275 00                   11870 	.db 0x00
                                  11871 	.area CSEG    (CODE)
                                  11872 	.area CONST   (CODE)
      000276                      11873 ___str_35:
      000276 2B                   11874 	.ascii "+"
      000277 09                   11875 	.db 0x09
      000278 61 64 64 20 74 6F 70 11876 	.ascii "add top 2"
             20 32
      000281 0D                   11877 	.db 0x0d
      000282 0A                   11878 	.db 0x0a
      000283 00                   11879 	.db 0x00
                                  11880 	.area CSEG    (CODE)
                                  11881 	.area CONST   (CODE)
      000284                      11882 ___str_36:
      000284 2D                   11883 	.ascii "-"
      000285 09                   11884 	.db 0x09
      000286 73 75 62 74 72 61 63 11885 	.ascii "subtract top 2"
             74 20 74 6F 70 20 32
      000294 0D                   11886 	.db 0x0d
      000295 0A                   11887 	.db 0x0a
      000296 00                   11888 	.db 0x00
                                  11889 	.area CSEG    (CODE)
                                  11890 	.area CONST   (CODE)
      000297                      11891 ___str_37:
      000297 2A                   11892 	.ascii "*"
      000298 09                   11893 	.db 0x09
      000299 6D 75 6C 74 69 70 6C 11894 	.ascii "multiply top 2"
             79 20 74 6F 70 20 32
      0002A7 0D                   11895 	.db 0x0d
      0002A8 0A                   11896 	.db 0x0a
      0002A9 00                   11897 	.db 0x00
                                  11898 	.area CSEG    (CODE)
                                  11899 	.area CONST   (CODE)
      0002AA                      11900 ___str_38:
      0002AA 2F                   11901 	.ascii "/"
      0002AB 09                   11902 	.db 0x09
      0002AC 64 69 76 69 64 65 20 11903 	.ascii "divide top 2"
             74 6F 70 20 32
      0002B8 0D                   11904 	.db 0x0d
      0002B9 0A                   11905 	.db 0x0a
      0002BA 00                   11906 	.db 0x00
                                  11907 	.area CSEG    (CODE)
                                  11908 	.area CONST   (CODE)
      0002BB                      11909 ___str_39:
      0002BB 5C                   11910 	.db 0x5c
      0002BC 09                   11911 	.db 0x09
      0002BD 64 69 76 69 64 65 20 11912 	.ascii "divide top 2 unsigned"
             74 6F 70 20 32 20 75
             6E 73 69 67 6E 65 64
      0002D2 0D                   11913 	.db 0x0d
      0002D3 0A                   11914 	.db 0x0a
      0002D4 00                   11915 	.db 0x00
                                  11916 	.area CSEG    (CODE)
                                  11917 	.area CONST   (CODE)
      0002D5                      11918 ___str_40:
      0002D5 25                   11919 	.ascii "%"
      0002D6 09                   11920 	.db 0x09
      0002D7 6D 6F 64 75 6C 75 73 11921 	.ascii "modulus top 2"
             20 74 6F 70 20 32
      0002E4 0D                   11922 	.db 0x0d
      0002E5 0A                   11923 	.db 0x0a
      0002E6 00                   11924 	.db 0x00
                                  11925 	.area CSEG    (CODE)
                                  11926 	.area CONST   (CODE)
      0002E7                      11927 ___str_41:
      0002E7 23                   11928 	.ascii "#"
      0002E8 09                   11929 	.db 0x09
      0002E9 6D 6F 64 75 6C 75 73 11930 	.ascii "modulus top 2 unsigned"
             20 74 6F 70 20 32 20
             75 6E 73 69 67 6E 65
             64
      0002FF 0D                   11931 	.db 0x0d
      000300 0A                   11932 	.db 0x0a
      000301 00                   11933 	.db 0x00
                                  11934 	.area CSEG    (CODE)
                                  11935 	.area CONST   (CODE)
      000302                      11936 ___str_42:
      000302 26                   11937 	.ascii "&"
      000303 09                   11938 	.db 0x09
      000304 61 6E 64 20 74 6F 70 11939 	.ascii "and top 2"
             20 32
      00030D 0D                   11940 	.db 0x0d
      00030E 0A                   11941 	.db 0x0a
      00030F 00                   11942 	.db 0x00
                                  11943 	.area CSEG    (CODE)
                                  11944 	.area CONST   (CODE)
      000310                      11945 ___str_43:
      000310 7C                   11946 	.ascii "|"
      000311 09                   11947 	.db 0x09
      000312 6F 72 20 74 6F 70 20 11948 	.ascii "or top 2"
             32
      00031A 0D                   11949 	.db 0x0d
      00031B 0A                   11950 	.db 0x0a
      00031C 00                   11951 	.db 0x00
                                  11952 	.area CSEG    (CODE)
                                  11953 	.area CONST   (CODE)
      00031D                      11954 ___str_44:
      00031D 5E                   11955 	.ascii "^"
      00031E 09                   11956 	.db 0x09
      00031F 78 6F 72 20 74 6F 70 11957 	.ascii "xor top 2"
             20 32
      000328 0D                   11958 	.db 0x0d
      000329 0A                   11959 	.db 0x0a
      00032A 00                   11960 	.db 0x00
                                  11961 	.area CSEG    (CODE)
                                  11962 	.area CONST   (CODE)
      00032B                      11963 ___str_45:
      00032B 3E                   11964 	.ascii ">"
      00032C 09                   11965 	.db 0x09
      00032D 73 68 69 66 74 20 72 11966 	.ascii "shift right top 2"
             69 67 68 74 20 74 6F
             70 20 32
      00033E 0D                   11967 	.db 0x0d
      00033F 0A                   11968 	.db 0x0a
      000340 00                   11969 	.db 0x00
                                  11970 	.area CSEG    (CODE)
                                  11971 	.area CONST   (CODE)
      000341                      11972 ___str_46:
      000341 5D                   11973 	.ascii "]"
      000342 09                   11974 	.db 0x09
      000343 61 72 69 74 68 6D 65 11975 	.ascii "arithmetic shift right top 2"
             74 69 63 20 73 68 69
             66 74 20 72 69 67 68
             74 20 74 6F 70 20 32
      00035F 0D                   11976 	.db 0x0d
      000360 0A                   11977 	.db 0x0a
      000361 00                   11978 	.db 0x00
                                  11979 	.area CSEG    (CODE)
                                  11980 	.area CONST   (CODE)
      000362                      11981 ___str_47:
      000362 3C                   11982 	.ascii "<"
      000363 09                   11983 	.db 0x09
      000364 73 68 69 66 74 20 6C 11984 	.ascii "shift left top 2"
             65 66 74 20 74 6F 70
             20 32
      000374 0D                   11985 	.db 0x0d
      000375 0A                   11986 	.db 0x0a
      000376 00                   11987 	.db 0x00
                                  11988 	.area CSEG    (CODE)
                                  11989 	.area CONST   (CODE)
      000377                      11990 ___str_48:
      000377 7E                   11991 	.ascii "~"
      000378 09                   11992 	.db 0x09
      000379 62 69 74 77 69 73 65 11993 	.ascii "bitwise not top"
             20 6E 6F 74 20 74 6F
             70
      000388 0D                   11994 	.db 0x0d
      000389 0A                   11995 	.db 0x0a
      00038A 00                   11996 	.db 0x00
                                  11997 	.area CSEG    (CODE)
                                  11998 	.area CONST   (CODE)
      00038B                      11999 ___str_49:
      00038B 73                   12000 	.ascii "s"
      00038C 09                   12001 	.db 0x09
      00038D 73 74 61 74 75 73    12002 	.ascii "status"
      000393 0D                   12003 	.db 0x0d
      000394 0A                   12004 	.db 0x0a
      000395 00                   12005 	.db 0x00
                                  12006 	.area CSEG    (CODE)
                                  12007 	.area CONST   (CODE)
      000396                      12008 ___str_50:
      000396 3F                   12009 	.ascii "?"
      000397 09                   12010 	.db 0x09
      000398 68 65 6C 70          12011 	.ascii "help"
      00039C 0D                   12012 	.db 0x0d
      00039D 0A                   12013 	.db 0x0a
      00039E 00                   12014 	.db 0x00
                                  12015 	.area CSEG    (CODE)
                                  12016 	.area CONST   (CODE)
      00039F                      12017 ___str_51:
      00039F 71                   12018 	.ascii "q"
      0003A0 09                   12019 	.db 0x09
      0003A1 71 75 69 74          12020 	.ascii "quit"
      0003A5 0D                   12021 	.db 0x0d
      0003A6 0A                   12022 	.db 0x0a
      0003A7 00                   12023 	.db 0x00
                                  12024 	.area CSEG    (CODE)
                                  12025 	.area CONST   (CODE)
      0003A8                      12026 ___str_52:
      0003A8 54 45 52 4D          12027 	.ascii "TERM"
      0003AC 0D                   12028 	.db 0x0d
      0003AD 0A                   12029 	.db 0x0a
      0003AE 00                   12030 	.db 0x00
                                  12031 	.area CSEG    (CODE)
                                  12032 	.area XINIT   (CODE)
      000000                      12033 __xinit__deltas:
      000000 00 00                12034 	.byte #0x00, #0x00	;  0
      000002 00 00                12035 	.byte #0x00, #0x00	;  0
      000004 00 00                12036 	.byte #0x00, #0x00	;  0
      000006 00 00                12037 	.byte #0x00,#0x00
      000008 00 00                12038 	.byte #0x00,#0x00
      00000A 00 00                12039 	.byte #0x00, #0x00	;  0
      00000C 01 00                12040 	.byte #0x01, #0x00	;  1
      00000E 02 00                12041 	.byte #0x02, #0x00	;  2
      000010 00 00                12042 	.byte #0x00,#0x00
      000012r00s00                12043 	.byte _accumulate, (_accumulate >> 8)
      000014 00 00                12044 	.byte #0x00, #0x00	;  0
      000016 02 00                12045 	.byte #0x02, #0x00	;  2
      000018 01 00                12046 	.byte #0x01, #0x00	;  1
      00001A 00 00                12047 	.byte #0x00,#0x00
      00001Cr0Es09                12048 	.byte _operator, (_operator >> 8)
      00001E 01 00                12049 	.byte #0x01, #0x00	;  1
      000020 00 00                12050 	.byte #0x00, #0x00	;  0
      000022 00 00                12051 	.byte #0x00, #0x00	;  0
      000024 00 00                12052 	.byte #0x00,#0x00
      000026 00 00                12053 	.byte #0x00,#0x00
      000028 01 00                12054 	.byte #0x01, #0x00	;  1
      00002A 02 00                12055 	.byte #0x02, #0x00	;  2
      00002C 01 00                12056 	.byte #0x01, #0x00	;  1
      00002E 00 00                12057 	.byte #0x00,#0x00
      000030r0Es09                12058 	.byte _operator, (_operator >> 8)
      000032 01 00                12059 	.byte #0x01, #0x00	;  1
      000034 01 00                12060 	.byte #0x01, #0x00	;  1
      000036 02 00                12061 	.byte #0x02, #0x00	;  2
      000038 00 00                12062 	.byte #0x00,#0x00
      00003Ar00s00                12063 	.byte _accumulate, (_accumulate >> 8)
      00003C 02 00                12064 	.byte #0x02, #0x00	;  2
      00003E 00 00                12065 	.byte #0x00, #0x00	;  0
      000040 00 00                12066 	.byte #0x00, #0x00	;  0
      000042 00 00                12067 	.byte #0x00,#0x00
      000044r6Es2E                12068 	.byte _push_acc, (_push_acc >> 8)
      000046 02 00                12069 	.byte #0x02, #0x00	;  2
      000048 07 00                12070 	.byte #0x07, #0x00	;  7
      00004A 00 00                12071 	.byte #0x00, #0x00	;  0
      00004C 00 00                12072 	.byte #0x00,#0x00
      00004Er9Ds2F                12073 	.byte _reset_acc, (_reset_acc >> 8)
      000050 02 00                12074 	.byte #0x02, #0x00	;  2
      000052 01 00                12075 	.byte #0x01, #0x00	;  1
      000054 02 00                12076 	.byte #0x02, #0x00	;  2
      000056 00 00                12077 	.byte #0x00,#0x00
      000058r00s00                12078 	.byte _accumulate, (_accumulate >> 8)
      00005A 02 00                12079 	.byte #0x02, #0x00	;  2
      00005C 02 00                12080 	.byte #0x02, #0x00	;  2
      00005E 01 00                12081 	.byte #0x01, #0x00	;  1
      000060 00 00                12082 	.byte #0x00,#0x00
      000062r6Es2E                12083 	.byte _push_acc, (_push_acc >> 8)
      000064 FF 7F                12084 	.byte #0xff, #0x7f	;  32767
      000066 06 00                12085 	.byte #0x06, #0x00	;  6
      000068 FF 7F                12086 	.byte #0xff, #0x7f	;  32767
      00006A 00 00                12087 	.byte #0x00,#0x00
      00006Cr9Ds2F                12088 	.byte _reset_acc, (_reset_acc >> 8)
      00006E FF 7F                12089 	.byte #0xff, #0x7f	;  32767
      000070 07 00                12090 	.byte #0x07, #0x00	;  7
      000072 FF 7F                12091 	.byte #0xff, #0x7f	;  32767
      000074 00 00                12092 	.byte #0x00,#0x00
      000076 00 00                12093 	.byte #0x00,#0x00
      000078 FF 7F                12094 	.byte #0xff, #0x7f	;  32767
      00007A 05 00                12095 	.byte #0x05, #0x00	;  5
      00007C FF 7F                12096 	.byte #0xff, #0x7f	;  32767
      00007E 00 00                12097 	.byte #0x00,#0x00
      000080r07s30                12098 	.byte _reset_base, (_reset_base >> 8)
      000082 FF 7F                12099 	.byte #0xff, #0x7f	;  32767
      000084 03 00                12100 	.byte #0x03, #0x00	;  3
      000086 FF 7F                12101 	.byte #0xff, #0x7f	;  32767
      000088 00 00                12102 	.byte #0x00,#0x00
      00008Ar85s30                12103 	.byte _status, (_status >> 8)
      00008C FF 7F                12104 	.byte #0xff, #0x7f	;  32767
      00008E 04 00                12105 	.byte #0x04, #0x00	;  4
      000090 FF 7F                12106 	.byte #0xff, #0x7f	;  32767
      000092 00 00                12107 	.byte #0x00,#0x00
      000094r60s39                12108 	.byte _help, (_help >> 8)
      000096 FF 7F                12109 	.byte #0xff, #0x7f	;  32767
      000098 08 00                12110 	.byte #0x08, #0x00	;  8
      00009A 03 00                12111 	.byte #0x03, #0x00	;  3
      00009C 00 00                12112 	.byte #0x00,#0x00
      00009Er71s01                12113 	.byte _dump_pop, (_dump_pop >> 8)
      0000A0 00 80                12114 	.byte #0x00, #0x80	; -32768
      0000A2 00 80                12115 	.byte #0x00, #0x80	; -32768
      0000A4 00 80                12116 	.byte #0x00, #0x80	; -32768
      0000A6 00 00                12117 	.byte #0x00,#0x00
      0000A8 00 00                12118 	.byte #0x00,#0x00
                                  12119 	.area CABS    (ABS,CODE)
