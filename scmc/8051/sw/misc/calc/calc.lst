                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module calc
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _getchar_poll
                                     13 	.globl _state_exec
                                     14 	.globl _state_init
                                     15 	.globl _stack_iter_peek
                                     16 	.globl _stack_peek2
                                     17 	.globl _stack_peek
                                     18 	.globl _stack_pop
                                     19 	.globl _stack_push
                                     20 	.globl _stack_init
                                     21 	.globl _isxdigit
                                     22 	.globl _printf
                                     23 	.globl _strtol
                                     24 	.globl _CY
                                     25 	.globl _AC
                                     26 	.globl _F0
                                     27 	.globl _RS1
                                     28 	.globl _RS0
                                     29 	.globl _OV
                                     30 	.globl _FL
                                     31 	.globl _P
                                     32 	.globl _TF2
                                     33 	.globl _EXF2
                                     34 	.globl _RCLK
                                     35 	.globl _TCLK
                                     36 	.globl _EXEN2
                                     37 	.globl _TR2
                                     38 	.globl _C_T2
                                     39 	.globl _CP_RL2
                                     40 	.globl _T2CON_7
                                     41 	.globl _T2CON_6
                                     42 	.globl _T2CON_5
                                     43 	.globl _T2CON_4
                                     44 	.globl _T2CON_3
                                     45 	.globl _T2CON_2
                                     46 	.globl _T2CON_1
                                     47 	.globl _T2CON_0
                                     48 	.globl _PT2
                                     49 	.globl _PS
                                     50 	.globl _PT1
                                     51 	.globl _PX1
                                     52 	.globl _PT0
                                     53 	.globl _PX0
                                     54 	.globl _RD
                                     55 	.globl _WR
                                     56 	.globl _T1
                                     57 	.globl _T0
                                     58 	.globl _INT1
                                     59 	.globl _INT0
                                     60 	.globl _TXD
                                     61 	.globl _RXD
                                     62 	.globl _P3_7
                                     63 	.globl _P3_6
                                     64 	.globl _P3_5
                                     65 	.globl _P3_4
                                     66 	.globl _P3_3
                                     67 	.globl _P3_2
                                     68 	.globl _P3_1
                                     69 	.globl _P3_0
                                     70 	.globl _EA
                                     71 	.globl _ET2
                                     72 	.globl _ES
                                     73 	.globl _ET1
                                     74 	.globl _EX1
                                     75 	.globl _ET0
                                     76 	.globl _EX0
                                     77 	.globl _P2_7
                                     78 	.globl _P2_6
                                     79 	.globl _P2_5
                                     80 	.globl _P2_4
                                     81 	.globl _P2_3
                                     82 	.globl _P2_2
                                     83 	.globl _P2_1
                                     84 	.globl _P2_0
                                     85 	.globl _SM0
                                     86 	.globl _SM1
                                     87 	.globl _SM2
                                     88 	.globl _REN
                                     89 	.globl _TB8
                                     90 	.globl _RB8
                                     91 	.globl _TI
                                     92 	.globl _RI
                                     93 	.globl _T2EX
                                     94 	.globl _T2
                                     95 	.globl _P1_7
                                     96 	.globl _P1_6
                                     97 	.globl _P1_5
                                     98 	.globl _P1_4
                                     99 	.globl _P1_3
                                    100 	.globl _P1_2
                                    101 	.globl _P1_1
                                    102 	.globl _P1_0
                                    103 	.globl _TF1
                                    104 	.globl _TR1
                                    105 	.globl _TF0
                                    106 	.globl _TR0
                                    107 	.globl _IE1
                                    108 	.globl _IT1
                                    109 	.globl _IE0
                                    110 	.globl _IT0
                                    111 	.globl _P0_7
                                    112 	.globl _P0_6
                                    113 	.globl _P0_5
                                    114 	.globl _P0_4
                                    115 	.globl _P0_3
                                    116 	.globl _P0_2
                                    117 	.globl _P0_1
                                    118 	.globl _P0_0
                                    119 	.globl _B
                                    120 	.globl _A
                                    121 	.globl _ACC
                                    122 	.globl _PSW
                                    123 	.globl _TH2
                                    124 	.globl _TL2
                                    125 	.globl _RCAP2H
                                    126 	.globl _RCAP2L
                                    127 	.globl _T2MOD
                                    128 	.globl _T2CON
                                    129 	.globl _IP
                                    130 	.globl _P3
                                    131 	.globl _IE
                                    132 	.globl _P2
                                    133 	.globl _SBUF
                                    134 	.globl _SCON
                                    135 	.globl _P1
                                    136 	.globl _TH1
                                    137 	.globl _TH0
                                    138 	.globl _TL1
                                    139 	.globl _TL0
                                    140 	.globl _TMOD
                                    141 	.globl _TCON
                                    142 	.globl _PCON
                                    143 	.globl _DPH
                                    144 	.globl _DPL
                                    145 	.globl _SP
                                    146 	.globl _P0
                                    147 	.globl _putchar
                                    148 	.globl _getchar
                                    149 ;--------------------------------------------------------
                                    150 ; special function registers
                                    151 ;--------------------------------------------------------
                                    152 	.area RSEG    (ABS,DATA)
      000000                        153 	.org 0x0000
                           000080   154 _P0	=	0x0080
                           000081   155 _SP	=	0x0081
                           000082   156 _DPL	=	0x0082
                           000083   157 _DPH	=	0x0083
                           000087   158 _PCON	=	0x0087
                           000088   159 _TCON	=	0x0088
                           000089   160 _TMOD	=	0x0089
                           00008A   161 _TL0	=	0x008a
                           00008B   162 _TL1	=	0x008b
                           00008C   163 _TH0	=	0x008c
                           00008D   164 _TH1	=	0x008d
                           000090   165 _P1	=	0x0090
                           000098   166 _SCON	=	0x0098
                           000099   167 _SBUF	=	0x0099
                           0000A0   168 _P2	=	0x00a0
                           0000A8   169 _IE	=	0x00a8
                           0000B0   170 _P3	=	0x00b0
                           0000B8   171 _IP	=	0x00b8
                           0000C8   172 _T2CON	=	0x00c8
                           0000C9   173 _T2MOD	=	0x00c9
                           0000CA   174 _RCAP2L	=	0x00ca
                           0000CB   175 _RCAP2H	=	0x00cb
                           0000CC   176 _TL2	=	0x00cc
                           0000CD   177 _TH2	=	0x00cd
                           0000D0   178 _PSW	=	0x00d0
                           0000E0   179 _ACC	=	0x00e0
                           0000E0   180 _A	=	0x00e0
                           0000F0   181 _B	=	0x00f0
                                    182 ;--------------------------------------------------------
                                    183 ; special function bits
                                    184 ;--------------------------------------------------------
                                    185 	.area RSEG    (ABS,DATA)
      000000                        186 	.org 0x0000
                           000080   187 _P0_0	=	0x0080
                           000081   188 _P0_1	=	0x0081
                           000082   189 _P0_2	=	0x0082
                           000083   190 _P0_3	=	0x0083
                           000084   191 _P0_4	=	0x0084
                           000085   192 _P0_5	=	0x0085
                           000086   193 _P0_6	=	0x0086
                           000087   194 _P0_7	=	0x0087
                           000088   195 _IT0	=	0x0088
                           000089   196 _IE0	=	0x0089
                           00008A   197 _IT1	=	0x008a
                           00008B   198 _IE1	=	0x008b
                           00008C   199 _TR0	=	0x008c
                           00008D   200 _TF0	=	0x008d
                           00008E   201 _TR1	=	0x008e
                           00008F   202 _TF1	=	0x008f
                           000090   203 _P1_0	=	0x0090
                           000091   204 _P1_1	=	0x0091
                           000092   205 _P1_2	=	0x0092
                           000093   206 _P1_3	=	0x0093
                           000094   207 _P1_4	=	0x0094
                           000095   208 _P1_5	=	0x0095
                           000096   209 _P1_6	=	0x0096
                           000097   210 _P1_7	=	0x0097
                           000090   211 _T2	=	0x0090
                           000091   212 _T2EX	=	0x0091
                           000098   213 _RI	=	0x0098
                           000099   214 _TI	=	0x0099
                           00009A   215 _RB8	=	0x009a
                           00009B   216 _TB8	=	0x009b
                           00009C   217 _REN	=	0x009c
                           00009D   218 _SM2	=	0x009d
                           00009E   219 _SM1	=	0x009e
                           00009F   220 _SM0	=	0x009f
                           0000A0   221 _P2_0	=	0x00a0
                           0000A1   222 _P2_1	=	0x00a1
                           0000A2   223 _P2_2	=	0x00a2
                           0000A3   224 _P2_3	=	0x00a3
                           0000A4   225 _P2_4	=	0x00a4
                           0000A5   226 _P2_5	=	0x00a5
                           0000A6   227 _P2_6	=	0x00a6
                           0000A7   228 _P2_7	=	0x00a7
                           0000A8   229 _EX0	=	0x00a8
                           0000A9   230 _ET0	=	0x00a9
                           0000AA   231 _EX1	=	0x00aa
                           0000AB   232 _ET1	=	0x00ab
                           0000AC   233 _ES	=	0x00ac
                           0000AD   234 _ET2	=	0x00ad
                           0000AF   235 _EA	=	0x00af
                           0000B0   236 _P3_0	=	0x00b0
                           0000B1   237 _P3_1	=	0x00b1
                           0000B2   238 _P3_2	=	0x00b2
                           0000B3   239 _P3_3	=	0x00b3
                           0000B4   240 _P3_4	=	0x00b4
                           0000B5   241 _P3_5	=	0x00b5
                           0000B6   242 _P3_6	=	0x00b6
                           0000B7   243 _P3_7	=	0x00b7
                           0000B0   244 _RXD	=	0x00b0
                           0000B1   245 _TXD	=	0x00b1
                           0000B2   246 _INT0	=	0x00b2
                           0000B3   247 _INT1	=	0x00b3
                           0000B4   248 _T0	=	0x00b4
                           0000B5   249 _T1	=	0x00b5
                           0000B6   250 _WR	=	0x00b6
                           0000B7   251 _RD	=	0x00b7
                           0000B8   252 _PX0	=	0x00b8
                           0000B9   253 _PT0	=	0x00b9
                           0000BA   254 _PX1	=	0x00ba
                           0000BB   255 _PT1	=	0x00bb
                           0000BC   256 _PS	=	0x00bc
                           0000BD   257 _PT2	=	0x00bd
                           0000C8   258 _T2CON_0	=	0x00c8
                           0000C9   259 _T2CON_1	=	0x00c9
                           0000CA   260 _T2CON_2	=	0x00ca
                           0000CB   261 _T2CON_3	=	0x00cb
                           0000CC   262 _T2CON_4	=	0x00cc
                           0000CD   263 _T2CON_5	=	0x00cd
                           0000CE   264 _T2CON_6	=	0x00ce
                           0000CF   265 _T2CON_7	=	0x00cf
                           0000C8   266 _CP_RL2	=	0x00c8
                           0000C9   267 _C_T2	=	0x00c9
                           0000CA   268 _TR2	=	0x00ca
                           0000CB   269 _EXEN2	=	0x00cb
                           0000CC   270 _TCLK	=	0x00cc
                           0000CD   271 _RCLK	=	0x00cd
                           0000CE   272 _EXF2	=	0x00ce
                           0000CF   273 _TF2	=	0x00cf
                           0000D0   274 _P	=	0x00d0
                           0000D1   275 _FL	=	0x00d1
                           0000D2   276 _OV	=	0x00d2
                           0000D3   277 _RS0	=	0x00d3
                           0000D4   278 _RS1	=	0x00d4
                           0000D5   279 _F0	=	0x00d5
                           0000D6   280 _AC	=	0x00d6
                           0000D7   281 _CY	=	0x00d7
                                    282 ;--------------------------------------------------------
                                    283 ; overlayable register banks
                                    284 ;--------------------------------------------------------
                                    285 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        286 	.ds 8
                                    287 ;--------------------------------------------------------
                                    288 ; internal ram data
                                    289 ;--------------------------------------------------------
                                    290 	.area DSEG    (DATA)
                                    291 ;--------------------------------------------------------
                                    292 ; overlayable items in internal ram 
                                    293 ;--------------------------------------------------------
                                    294 ;--------------------------------------------------------
                                    295 ; Stack segment in internal ram 
                                    296 ;--------------------------------------------------------
                                    297 	.area	SSEG
      000000                        298 __start__stack:
      000000                        299 	.ds	1
                                    300 
                                    301 ;--------------------------------------------------------
                                    302 ; indirectly addressable internal ram data
                                    303 ;--------------------------------------------------------
                                    304 	.area ISEG    (DATA)
                                    305 ;--------------------------------------------------------
                                    306 ; absolute internal ram data
                                    307 ;--------------------------------------------------------
                                    308 	.area IABS    (ABS,DATA)
                                    309 	.area IABS    (ABS,DATA)
                                    310 ;--------------------------------------------------------
                                    311 ; bit data
                                    312 ;--------------------------------------------------------
                                    313 	.area BSEG    (BIT)
                                    314 ;--------------------------------------------------------
                                    315 ; paged external ram data
                                    316 ;--------------------------------------------------------
                                    317 	.area PSEG    (PAG,XDATA)
                                    318 ;--------------------------------------------------------
                                    319 ; external ram data
                                    320 ;--------------------------------------------------------
                                    321 	.area XSEG    (XDATA)
      000000                        322 _s:
      000000                        323 	.ds 12
      00000C                        324 _c:
      00000C                        325 	.ds 16409
                                    326 ;--------------------------------------------------------
                                    327 ; absolute external ram data
                                    328 ;--------------------------------------------------------
                                    329 	.area XABS    (ABS,XDATA)
                                    330 ;--------------------------------------------------------
                                    331 ; external initialized ram data
                                    332 ;--------------------------------------------------------
                                    333 	.area XISEG   (XDATA)
      000000                        334 _deltas:
      000000                        335 	.ds 170
                                    336 	.area HOME    (CODE)
                                    337 	.area GSINIT0 (CODE)
                                    338 	.area GSINIT1 (CODE)
                                    339 	.area GSINIT2 (CODE)
                                    340 	.area GSINIT3 (CODE)
                                    341 	.area GSINIT4 (CODE)
                                    342 	.area GSINIT5 (CODE)
                                    343 	.area GSINIT  (CODE)
                                    344 	.area GSFINAL (CODE)
                                    345 	.area CSEG    (CODE)
                                    346 ;--------------------------------------------------------
                                    347 ; interrupt vector 
                                    348 ;--------------------------------------------------------
                                    349 	.area HOME    (CODE)
      000000                        350 __interrupt_vect:
      000000 02r00r00         [24]  351 	ljmp	__sdcc_gsinit_startup
                                    352 ;--------------------------------------------------------
                                    353 ; global & static initialisations
                                    354 ;--------------------------------------------------------
                                    355 	.area HOME    (CODE)
                                    356 	.area GSINIT  (CODE)
                                    357 	.area GSFINAL (CODE)
                                    358 	.area GSINIT  (CODE)
                                    359 	.globl __sdcc_gsinit_startup
                                    360 	.globl __sdcc_program_startup
                                    361 	.globl __start__stack
                                    362 	.globl __mcs51_genXINIT
                                    363 	.globl __mcs51_genXRAMCLEAR
                                    364 	.globl __mcs51_genRAMCLEAR
                                    365 	.area GSFINAL (CODE)
      000000 02r00r03         [24]  366 	ljmp	__sdcc_program_startup
                                    367 ;--------------------------------------------------------
                                    368 ; Home
                                    369 ;--------------------------------------------------------
                                    370 	.area HOME    (CODE)
                                    371 	.area HOME    (CODE)
      000003                        372 __sdcc_program_startup:
      000003 02r38r6B         [24]  373 	ljmp	_main
                                    374 ;	return from main will return to caller
                                    375 ;--------------------------------------------------------
                                    376 ; code
                                    377 ;--------------------------------------------------------
                                    378 	.area CSEG    (CODE)
                                    379 ;------------------------------------------------------------
                                    380 ;Allocation info for local variables in function 'putchar'
                                    381 ;------------------------------------------------------------
                                    382 ;c                         Allocated to registers 
                                    383 ;------------------------------------------------------------
                                    384 ;	calc.c:16: int putchar(int c) __naked {
                                    385 ;	-----------------------------------------
                                    386 ;	 function putchar
                                    387 ;	-----------------------------------------
      000000                        388 _putchar:
                                    389 ;	naked function: no prologue.
                                    390 ;	calc.c:21: __endasm;
      000000 E5 82            [12]  391 	mov	a, dpl
      000002 02 00 30         [24]  392 	ljmp	0x0030
                                    393 ;	calc.c:22: }
                                    394 ;	naked function: no epilogue.
                                    395 ;------------------------------------------------------------
                                    396 ;Allocation info for local variables in function 'getchar'
                                    397 ;------------------------------------------------------------
                                    398 ;	calc.c:24: int getchar(void) __naked {
                                    399 ;	-----------------------------------------
                                    400 ;	 function getchar
                                    401 ;	-----------------------------------------
      000005                        402 _getchar:
                                    403 ;	naked function: no prologue.
                                    404 ;	calc.c:30: __endasm;
      000005 12 00 32         [24]  405 	lcall	0x0032
      000008 F5 82            [12]  406 	mov	dpl, a
      00000A 75 83 00         [24]  407 	mov	dph, #0
      00000D 22               [24]  408 	ret
                                    409 ;	calc.c:31: }
                                    410 ;	naked function: no epilogue.
                                    411 ;------------------------------------------------------------
                                    412 ;Allocation info for local variables in function 'getchar_poll'
                                    413 ;------------------------------------------------------------
                                    414 ;	calc.c:33: int getchar_poll(void) __naked {
                                    415 ;	-----------------------------------------
                                    416 ;	 function getchar_poll
                                    417 ;	-----------------------------------------
      00000E                        418 _getchar_poll:
                                    419 ;	naked function: no prologue.
                                    420 ;	calc.c:45: __endasm;
      00000E 74 FF            [12]  421 	mov	a, #0xff
      000010 F5 F0            [12]  422 	mov	b, a
      000012 30 98 07         [24]  423 	jnb	ri, nochar
      000015 C2 98            [12]  424 	clr	ri
      000017 E5 99            [12]  425 	mov	a, sbuf
      000019 75 F0 00         [24]  426 	mov	b, #0
      00001C                        427 	nochar:
      00001C F5 82            [12]  428 	mov	dpl, a
      00001E 85 F0 83         [24]  429 	mov	dph, b
      000021 22               [24]  430 	ret
                                    431 ;	calc.c:46: }
                                    432 ;	naked function: no epilogue.
                                    433 ;------------------------------------------------------------
                                    434 ;Allocation info for local variables in function 'accumulate'
                                    435 ;------------------------------------------------------------
                                    436 ;delta                     Allocated to stack - _bp -5
                                    437 ;_ctx                      Allocated to registers r5 r6 r7 
                                    438 ;ctx                       Allocated to stack - _bp +8
                                    439 ;d                         Allocated to stack - _bp +11
                                    440 ;sloc0                     Allocated to stack - _bp +1
                                    441 ;sloc1                     Allocated to stack - _bp +4
                                    442 ;------------------------------------------------------------
                                    443 ;	calc.c:71: static int accumulate(void *_ctx, delta_t *delta) __reentrant {
                                    444 ;	-----------------------------------------
                                    445 ;	 function accumulate
                                    446 ;	-----------------------------------------
      000022                        447 _accumulate:
                           000007   448 	ar7 = 0x07
                           000006   449 	ar6 = 0x06
                           000005   450 	ar5 = 0x05
                           000004   451 	ar4 = 0x04
                           000003   452 	ar3 = 0x03
                           000002   453 	ar2 = 0x02
                           000001   454 	ar1 = 0x01
                           000000   455 	ar0 = 0x00
      000022 C0*00            [24]  456 	push	_bp
      000024 E5 81            [12]  457 	mov	a,sp
      000026 F5*00            [12]  458 	mov	_bp,a
      000028 24 0E            [12]  459 	add	a,#0x0e
      00002A F5 81            [12]  460 	mov	sp,a
      00002C AD 82            [24]  461 	mov	r5,dpl
      00002E AE 83            [24]  462 	mov	r6,dph
      000030 AF F0            [24]  463 	mov	r7,b
                                    464 ;	calc.c:72: calc_ctx_t *ctx = (calc_ctx_t *)_ctx;
      000032 E5*00            [12]  465 	mov	a,_bp
      000034 24 08            [12]  466 	add	a,#0x08
      000036 F8               [12]  467 	mov	r0,a
      000037 A6 05            [24]  468 	mov	@r0,ar5
      000039 08               [12]  469 	inc	r0
      00003A A6 06            [24]  470 	mov	@r0,ar6
      00003C 08               [12]  471 	inc	r0
      00003D A6 07            [24]  472 	mov	@r0,ar7
                                    473 ;	calc.c:77: if (!ctx->acc_valid) {
      00003F E5*00            [12]  474 	mov	a,_bp
      000041 24 08            [12]  475 	add	a,#0x08
      000043 F8               [12]  476 	mov	r0,a
      000044 74 06            [12]  477 	mov	a,#0x06
      000046 26               [12]  478 	add	a,@r0
      000047 FA               [12]  479 	mov	r2,a
      000048 E4               [12]  480 	clr	a
      000049 08               [12]  481 	inc	r0
      00004A 36               [12]  482 	addc	a,@r0
      00004B FB               [12]  483 	mov	r3,a
      00004C 08               [12]  484 	inc	r0
      00004D 86 04            [24]  485 	mov	ar4,@r0
      00004F 8A 82            [24]  486 	mov	dpl,r2
      000051 8B 83            [24]  487 	mov	dph,r3
      000053 8C F0            [24]  488 	mov	b,r4
      000055 12r00r00         [24]  489 	lcall	__gptrget
      000058 70 31            [24]  490 	jnz	00102$
                                    491 ;	calc.c:78: ctx->acc_valid = 1;
      00005A 8A 82            [24]  492 	mov	dpl,r2
      00005C 8B 83            [24]  493 	mov	dph,r3
      00005E 8C F0            [24]  494 	mov	b,r4
      000060 74 01            [12]  495 	mov	a,#0x01
      000062 12r00r00         [24]  496 	lcall	__gptrput
                                    497 ;	calc.c:79: ctx->acc = 0l;
      000065 E5*00            [12]  498 	mov	a,_bp
      000067 24 08            [12]  499 	add	a,#0x08
      000069 F8               [12]  500 	mov	r0,a
      00006A 74 02            [12]  501 	mov	a,#0x02
      00006C 26               [12]  502 	add	a,@r0
      00006D FA               [12]  503 	mov	r2,a
      00006E E4               [12]  504 	clr	a
      00006F 08               [12]  505 	inc	r0
      000070 36               [12]  506 	addc	a,@r0
      000071 FB               [12]  507 	mov	r3,a
      000072 08               [12]  508 	inc	r0
      000073 86 04            [24]  509 	mov	ar4,@r0
      000075 8A 82            [24]  510 	mov	dpl,r2
      000077 8B 83            [24]  511 	mov	dph,r3
      000079 8C F0            [24]  512 	mov	b,r4
      00007B E4               [12]  513 	clr	a
      00007C 12r00r00         [24]  514 	lcall	__gptrput
      00007F A3               [24]  515 	inc	dptr
      000080 12r00r00         [24]  516 	lcall	__gptrput
      000083 A3               [24]  517 	inc	dptr
      000084 12r00r00         [24]  518 	lcall	__gptrput
      000087 A3               [24]  519 	inc	dptr
      000088 12r00r00         [24]  520 	lcall	__gptrput
      00008B                        521 00102$:
                                    522 ;	calc.c:82: d = strtol(ctx->digit, NULL, ctx->base);
      00008B E5*00            [12]  523 	mov	a,_bp
      00008D 24 08            [12]  524 	add	a,#0x08
      00008F F8               [12]  525 	mov	r0,a
      000090 86 82            [24]  526 	mov	dpl,@r0
      000092 08               [12]  527 	inc	r0
      000093 86 83            [24]  528 	mov	dph,@r0
      000095 08               [12]  529 	inc	r0
      000096 86 F0            [24]  530 	mov	b,@r0
      000098 12r00r00         [24]  531 	lcall	__gptrget
      00009B FB               [12]  532 	mov	r3,a
      00009C A3               [24]  533 	inc	dptr
      00009D 12r00r00         [24]  534 	lcall	__gptrget
      0000A0 FC               [12]  535 	mov	r4,a
      0000A1 E5*00            [12]  536 	mov	a,_bp
      0000A3 24 08            [12]  537 	add	a,#0x08
      0000A5 F8               [12]  538 	mov	r0,a
      0000A6 74 07            [12]  539 	mov	a,#0x07
      0000A8 26               [12]  540 	add	a,@r0
      0000A9 FA               [12]  541 	mov	r2,a
      0000AA E4               [12]  542 	clr	a
      0000AB 08               [12]  543 	inc	r0
      0000AC 36               [12]  544 	addc	a,@r0
      0000AD FE               [12]  545 	mov	r6,a
      0000AE 08               [12]  546 	inc	r0
      0000AF 86 07            [24]  547 	mov	ar7,@r0
      0000B1 C0 03            [24]  548 	push	ar3
      0000B3 C0 04            [24]  549 	push	ar4
      0000B5 E4               [12]  550 	clr	a
      0000B6 C0 E0            [24]  551 	push	acc
      0000B8 C0 E0            [24]  552 	push	acc
      0000BA C0 E0            [24]  553 	push	acc
      0000BC 8A 82            [24]  554 	mov	dpl,r2
      0000BE 8E 83            [24]  555 	mov	dph,r6
      0000C0 8F F0            [24]  556 	mov	b,r7
      0000C2 12r00r00         [24]  557 	lcall	_strtol
      0000C5 C8               [12]  558 	xch	a,r0
      0000C6 E5*00            [12]  559 	mov	a,_bp
      0000C8 24 0B            [12]  560 	add	a,#0x0b
      0000CA C8               [12]  561 	xch	a,r0
      0000CB A6 82            [24]  562 	mov	@r0,dpl
      0000CD 08               [12]  563 	inc	r0
      0000CE A6 83            [24]  564 	mov	@r0,dph
      0000D0 08               [12]  565 	inc	r0
      0000D1 A6 F0            [24]  566 	mov	@r0,b
      0000D3 08               [12]  567 	inc	r0
      0000D4 F6               [12]  568 	mov	@r0,a
      0000D5 E5 81            [12]  569 	mov	a,sp
      0000D7 24 FB            [12]  570 	add	a,#0xfb
      0000D9 F5 81            [12]  571 	mov	sp,a
                                    572 ;	calc.c:83: ctx->acc = ctx->acc * (long)ctx->base + d;
      0000DB E5*00            [12]  573 	mov	a,_bp
      0000DD 24 08            [12]  574 	add	a,#0x08
      0000DF F8               [12]  575 	mov	r0,a
      0000E0 A9*00            [24]  576 	mov	r1,_bp
      0000E2 09               [12]  577 	inc	r1
      0000E3 74 02            [12]  578 	mov	a,#0x02
      0000E5 26               [12]  579 	add	a,@r0
      0000E6 F7               [12]  580 	mov	@r1,a
      0000E7 E4               [12]  581 	clr	a
      0000E8 08               [12]  582 	inc	r0
      0000E9 36               [12]  583 	addc	a,@r0
      0000EA 09               [12]  584 	inc	r1
      0000EB F7               [12]  585 	mov	@r1,a
      0000EC 08               [12]  586 	inc	r0
      0000ED 09               [12]  587 	inc	r1
      0000EE E6               [12]  588 	mov	a,@r0
      0000EF F7               [12]  589 	mov	@r1,a
      0000F0 A8*00            [24]  590 	mov	r0,_bp
      0000F2 08               [12]  591 	inc	r0
      0000F3 86 82            [24]  592 	mov	dpl,@r0
      0000F5 08               [12]  593 	inc	r0
      0000F6 86 83            [24]  594 	mov	dph,@r0
      0000F8 08               [12]  595 	inc	r0
      0000F9 86 F0            [24]  596 	mov	b,@r0
      0000FB E5*00            [12]  597 	mov	a,_bp
      0000FD 24 04            [12]  598 	add	a,#0x04
      0000FF F9               [12]  599 	mov	r1,a
      000100 12r00r00         [24]  600 	lcall	__gptrget
      000103 F7               [12]  601 	mov	@r1,a
      000104 A3               [24]  602 	inc	dptr
      000105 12r00r00         [24]  603 	lcall	__gptrget
      000108 09               [12]  604 	inc	r1
      000109 F7               [12]  605 	mov	@r1,a
      00010A A3               [24]  606 	inc	dptr
      00010B 12r00r00         [24]  607 	lcall	__gptrget
      00010E 09               [12]  608 	inc	r1
      00010F F7               [12]  609 	mov	@r1,a
      000110 A3               [24]  610 	inc	dptr
      000111 12r00r00         [24]  611 	lcall	__gptrget
      000114 09               [12]  612 	inc	r1
      000115 F7               [12]  613 	mov	@r1,a
      000116 E5*00            [12]  614 	mov	a,_bp
      000118 24 08            [12]  615 	add	a,#0x08
      00011A F8               [12]  616 	mov	r0,a
      00011B 86 82            [24]  617 	mov	dpl,@r0
      00011D 08               [12]  618 	inc	r0
      00011E 86 83            [24]  619 	mov	dph,@r0
      000120 08               [12]  620 	inc	r0
      000121 86 F0            [24]  621 	mov	b,@r0
      000123 12r00r00         [24]  622 	lcall	__gptrget
      000126 FA               [12]  623 	mov	r2,a
      000127 A3               [24]  624 	inc	dptr
      000128 12r00r00         [24]  625 	lcall	__gptrget
      00012B FB               [12]  626 	mov	r3,a
      00012C 33               [12]  627 	rlc	a
      00012D 95 E0            [12]  628 	subb	a,acc
      00012F FE               [12]  629 	mov	r6,a
      000130 FF               [12]  630 	mov	r7,a
      000131 C0 02            [24]  631 	push	ar2
      000133 C0 03            [24]  632 	push	ar3
      000135 C0 06            [24]  633 	push	ar6
      000137 C0 07            [24]  634 	push	ar7
      000139 E5*00            [12]  635 	mov	a,_bp
      00013B 24 04            [12]  636 	add	a,#0x04
      00013D F8               [12]  637 	mov	r0,a
      00013E 86 82            [24]  638 	mov	dpl,@r0
      000140 08               [12]  639 	inc	r0
      000141 86 83            [24]  640 	mov	dph,@r0
      000143 08               [12]  641 	inc	r0
      000144 86 F0            [24]  642 	mov	b,@r0
      000146 08               [12]  643 	inc	r0
      000147 E6               [12]  644 	mov	a,@r0
      000148 12r00r00         [24]  645 	lcall	__mullong
      00014B AC 82            [24]  646 	mov	r4,dpl
      00014D AD 83            [24]  647 	mov	r5,dph
      00014F AE F0            [24]  648 	mov	r6,b
      000151 FF               [12]  649 	mov	r7,a
      000152 E5 81            [12]  650 	mov	a,sp
      000154 24 FC            [12]  651 	add	a,#0xfc
      000156 F5 81            [12]  652 	mov	sp,a
      000158 E5*00            [12]  653 	mov	a,_bp
      00015A 24 0B            [12]  654 	add	a,#0x0b
      00015C F8               [12]  655 	mov	r0,a
      00015D E6               [12]  656 	mov	a,@r0
      00015E 2C               [12]  657 	add	a,r4
      00015F FC               [12]  658 	mov	r4,a
      000160 08               [12]  659 	inc	r0
      000161 E6               [12]  660 	mov	a,@r0
      000162 3D               [12]  661 	addc	a,r5
      000163 FD               [12]  662 	mov	r5,a
      000164 08               [12]  663 	inc	r0
      000165 E6               [12]  664 	mov	a,@r0
      000166 3E               [12]  665 	addc	a,r6
      000167 FE               [12]  666 	mov	r6,a
      000168 08               [12]  667 	inc	r0
      000169 E6               [12]  668 	mov	a,@r0
      00016A 3F               [12]  669 	addc	a,r7
      00016B FF               [12]  670 	mov	r7,a
      00016C A8*00            [24]  671 	mov	r0,_bp
      00016E 08               [12]  672 	inc	r0
      00016F 86 82            [24]  673 	mov	dpl,@r0
      000171 08               [12]  674 	inc	r0
      000172 86 83            [24]  675 	mov	dph,@r0
      000174 08               [12]  676 	inc	r0
      000175 86 F0            [24]  677 	mov	b,@r0
      000177 EC               [12]  678 	mov	a,r4
      000178 12r00r00         [24]  679 	lcall	__gptrput
      00017B A3               [24]  680 	inc	dptr
      00017C ED               [12]  681 	mov	a,r5
      00017D 12r00r00         [24]  682 	lcall	__gptrput
      000180 A3               [24]  683 	inc	dptr
      000181 EE               [12]  684 	mov	a,r6
      000182 12r00r00         [24]  685 	lcall	__gptrput
      000185 A3               [24]  686 	inc	dptr
      000186 EF               [12]  687 	mov	a,r7
      000187 12r00r00         [24]  688 	lcall	__gptrput
                                    689 ;	calc.c:85: return 1;
      00018A 90 00 01         [24]  690 	mov	dptr,#0x0001
                                    691 ;	calc.c:86: }
      00018D 85*00 81         [24]  692 	mov	sp,_bp
      000190 D0*00            [24]  693 	pop	_bp
      000192 22               [24]  694 	ret
                                    695 ;------------------------------------------------------------
                                    696 ;Allocation info for local variables in function 'dump_pop'
                                    697 ;------------------------------------------------------------
                                    698 ;delta                     Allocated to stack - _bp -5
                                    699 ;_ctx                      Allocated to registers r5 r6 r7 
                                    700 ;ctx                       Allocated to stack - _bp +11
                                    701 ;d                         Allocated to stack - _bp +14
                                    702 ;r                         Allocated to registers r5 r6 
                                    703 ;__1310720003              Allocated to registers 
                                    704 ;s                         Allocated to registers r5 r6 r7 
                                    705 ;__1966080005              Allocated to registers 
                                    706 ;s                         Allocated to registers r4 r5 r6 
                                    707 ;__1966080007              Allocated to registers 
                                    708 ;s                         Allocated to registers r3 r4 r5 
                                    709 ;__1966080009              Allocated to stack - _bp +18
                                    710 ;d                         Allocated to registers r3 r4 r5 r6 
                                    711 ;__1310720001              Allocated to registers 
                                    712 ;d                         Allocated to stack - _bp +22
                                    713 ;mask                      Allocated to stack - _bp +26
                                    714 ;__1966080011              Allocated to registers 
                                    715 ;s                         Allocated to registers r3 r4 r5 
                                    716 ;__1966080013              Allocated to registers 
                                    717 ;s                         Allocated to registers r4 r5 r6 
                                    718 ;__3276800015              Allocated to registers 
                                    719 ;s                         Allocated to registers r5 r3 r2 
                                    720 ;__3276800017              Allocated to stack - _bp +18
                                    721 ;d                         Allocated to registers r2 r3 r4 r7 
                                    722 ;__1310720001              Allocated to registers 
                                    723 ;d                         Allocated to stack - _bp +22
                                    724 ;mask                      Allocated to stack - _bp +26
                                    725 ;__3276800019              Allocated to registers 
                                    726 ;s                         Allocated to registers r5 r3 r2 
                                    727 ;sloc0                     Allocated to stack - _bp +1
                                    728 ;sloc1                     Allocated to stack - _bp +2
                                    729 ;sloc2                     Allocated to stack - _bp +5
                                    730 ;sloc3                     Allocated to stack - _bp +8
                                    731 ;------------------------------------------------------------
                                    732 ;	calc.c:88: static int dump_pop(void *_ctx, delta_t *delta) __reentrant {
                                    733 ;	-----------------------------------------
                                    734 ;	 function dump_pop
                                    735 ;	-----------------------------------------
      000193                        736 _dump_pop:
      000193 C0*00            [24]  737 	push	_bp
      000195 E5 81            [12]  738 	mov	a,sp
      000197 F5*00            [12]  739 	mov	_bp,a
      000199 24 1D            [12]  740 	add	a,#0x1d
      00019B F5 81            [12]  741 	mov	sp,a
      00019D AD 82            [24]  742 	mov	r5,dpl
      00019F AE 83            [24]  743 	mov	r6,dph
      0001A1 AF F0            [24]  744 	mov	r7,b
                                    745 ;	calc.c:89: calc_ctx_t *ctx = (calc_ctx_t *)_ctx;
      0001A3 E5*00            [12]  746 	mov	a,_bp
      0001A5 24 0B            [12]  747 	add	a,#0x0b
      0001A7 F8               [12]  748 	mov	r0,a
      0001A8 A6 05            [24]  749 	mov	@r0,ar5
      0001AA 08               [12]  750 	inc	r0
      0001AB A6 06            [24]  751 	mov	@r0,ar6
      0001AD 08               [12]  752 	inc	r0
      0001AE A6 07            [24]  753 	mov	@r0,ar7
                                    754 ;	calc.c:93: if (delta->event == EVENT_TERM) printstr("\r\n");
      0001B0 E5*00            [12]  755 	mov	a,_bp
      0001B2 24 FB            [12]  756 	add	a,#0xfb
      0001B4 F8               [12]  757 	mov	r0,a
      0001B5 86 02            [24]  758 	mov	ar2,@r0
      0001B7 08               [12]  759 	inc	r0
      0001B8 86 03            [24]  760 	mov	ar3,@r0
      0001BA 08               [12]  761 	inc	r0
      0001BB 86 04            [24]  762 	mov	ar4,@r0
      0001BD E5*00            [12]  763 	mov	a,_bp
      0001BF 24 08            [12]  764 	add	a,#0x08
      0001C1 F8               [12]  765 	mov	r0,a
      0001C2 74 02            [12]  766 	mov	a,#0x02
      0001C4 2A               [12]  767 	add	a,r2
      0001C5 F6               [12]  768 	mov	@r0,a
      0001C6 E4               [12]  769 	clr	a
      0001C7 3B               [12]  770 	addc	a,r3
      0001C8 08               [12]  771 	inc	r0
      0001C9 F6               [12]  772 	mov	@r0,a
      0001CA 08               [12]  773 	inc	r0
      0001CB A6 04            [24]  774 	mov	@r0,ar4
      0001CD E5*00            [12]  775 	mov	a,_bp
      0001CF 24 08            [12]  776 	add	a,#0x08
      0001D1 F8               [12]  777 	mov	r0,a
      0001D2 86 82            [24]  778 	mov	dpl,@r0
      0001D4 08               [12]  779 	inc	r0
      0001D5 86 83            [24]  780 	mov	dph,@r0
      0001D7 08               [12]  781 	inc	r0
      0001D8 86 F0            [24]  782 	mov	b,@r0
      0001DA 12r00r00         [24]  783 	lcall	__gptrget
      0001DD FE               [12]  784 	mov	r6,a
      0001DE A3               [24]  785 	inc	dptr
      0001DF 12r00r00         [24]  786 	lcall	__gptrget
      0001E2 FF               [12]  787 	mov	r7,a
      0001E3 BE 08 27         [24]  788 	cjne	r6,#0x08,00102$
      0001E6 BF 00 24         [24]  789 	cjne	r7,#0x00,00102$
      0001E9 7Dr0F            [12]  790 	mov	r5,#___str_2
      0001EB 7Es00            [12]  791 	mov	r6,#(___str_2 >> 8)
      0001ED 7F 80            [12]  792 	mov	r7,#0x80
                                    793 ;	calc.c:51: return;
      0001EF                        794 00135$:
                                    795 ;	calc.c:49: for (; *s; s++) putchar(*s);
      0001EF 8D 82            [24]  796 	mov	dpl,r5
      0001F1 8E 83            [24]  797 	mov	dph,r6
      0001F3 8F F0            [24]  798 	mov	b,r7
      0001F5 12r00r00         [24]  799 	lcall	__gptrget
      0001F8 FC               [12]  800 	mov	r4,a
      0001F9 60 12            [24]  801 	jz	00102$
      0001FB 8C 03            [24]  802 	mov	ar3,r4
      0001FD 7C 00            [12]  803 	mov	r4,#0x00
      0001FF 8B 82            [24]  804 	mov	dpl,r3
      000201 8C 83            [24]  805 	mov	dph,r4
      000203 12r00r00         [24]  806 	lcall	_putchar
      000206 0D               [12]  807 	inc	r5
                                    808 ;	calc.c:93: if (delta->event == EVENT_TERM) printstr("\r\n");
      000207 BD 00 E5         [24]  809 	cjne	r5,#0x00,00135$
      00020A 0E               [12]  810 	inc	r6
      00020B 80 E2            [24]  811 	sjmp	00135$
      00020D                        812 00102$:
                                    813 ;	calc.c:94: r = stack_pop(ctx->ps, &d);
      00020D E5*00            [12]  814 	mov	a,_bp
      00020F 24 0E            [12]  815 	add	a,#0x0e
      000211 FF               [12]  816 	mov	r7,a
      000212 E5*00            [12]  817 	mov	a,_bp
      000214 24 05            [12]  818 	add	a,#0x05
      000216 F8               [12]  819 	mov	r0,a
      000217 A6 07            [24]  820 	mov	@r0,ar7
      000219 08               [12]  821 	inc	r0
      00021A 76 00            [12]  822 	mov	@r0,#0x00
      00021C 08               [12]  823 	inc	r0
      00021D 76 40            [12]  824 	mov	@r0,#0x40
      00021F E5*00            [12]  825 	mov	a,_bp
      000221 24 0B            [12]  826 	add	a,#0x0b
      000223 F8               [12]  827 	mov	r0,a
      000224 A9*00            [24]  828 	mov	r1,_bp
      000226 09               [12]  829 	inc	r1
      000227 09               [12]  830 	inc	r1
      000228 74 13            [12]  831 	mov	a,#0x13
      00022A 26               [12]  832 	add	a,@r0
      00022B F7               [12]  833 	mov	@r1,a
      00022C 74 40            [12]  834 	mov	a,#0x40
      00022E 08               [12]  835 	inc	r0
      00022F 36               [12]  836 	addc	a,@r0
      000230 09               [12]  837 	inc	r1
      000231 F7               [12]  838 	mov	@r1,a
      000232 08               [12]  839 	inc	r0
      000233 09               [12]  840 	inc	r1
      000234 E6               [12]  841 	mov	a,@r0
      000235 F7               [12]  842 	mov	@r1,a
      000236 A8*00            [24]  843 	mov	r0,_bp
      000238 08               [12]  844 	inc	r0
      000239 08               [12]  845 	inc	r0
      00023A 86 82            [24]  846 	mov	dpl,@r0
      00023C 08               [12]  847 	inc	r0
      00023D 86 83            [24]  848 	mov	dph,@r0
      00023F 08               [12]  849 	inc	r0
      000240 86 F0            [24]  850 	mov	b,@r0
      000242 12r00r00         [24]  851 	lcall	__gptrget
      000245 FA               [12]  852 	mov	r2,a
      000246 A3               [24]  853 	inc	dptr
      000247 12r00r00         [24]  854 	lcall	__gptrget
      00024A FB               [12]  855 	mov	r3,a
      00024B A3               [24]  856 	inc	dptr
      00024C 12r00r00         [24]  857 	lcall	__gptrget
      00024F FE               [12]  858 	mov	r6,a
      000250 C0 07            [24]  859 	push	ar7
      000252 E5*00            [12]  860 	mov	a,_bp
      000254 24 05            [12]  861 	add	a,#0x05
      000256 F8               [12]  862 	mov	r0,a
      000257 E6               [12]  863 	mov	a,@r0
      000258 C0 E0            [24]  864 	push	acc
      00025A 08               [12]  865 	inc	r0
      00025B E6               [12]  866 	mov	a,@r0
      00025C C0 E0            [24]  867 	push	acc
      00025E 08               [12]  868 	inc	r0
      00025F E6               [12]  869 	mov	a,@r0
      000260 C0 E0            [24]  870 	push	acc
      000262 8A 82            [24]  871 	mov	dpl,r2
      000264 8B 83            [24]  872 	mov	dph,r3
      000266 8E F0            [24]  873 	mov	b,r6
      000268 12r00r00         [24]  874 	lcall	_stack_pop
      00026B AE 82            [24]  875 	mov	r6,dpl
      00026D AD 83            [24]  876 	mov	r5,dph
      00026F 15 81            [12]  877 	dec	sp
      000271 15 81            [12]  878 	dec	sp
      000273 15 81            [12]  879 	dec	sp
      000275 D0 07            [24]  880 	pop	ar7
                                    881 ;	calc.c:95: if (!r) {
      000277 EE               [12]  882 	mov	a,r6
      000278 4D               [12]  883 	orl	a,r5
      000279 70 44            [24]  884 	jnz	00183$
                                    885 ;	calc.c:96: if (delta->event != EVENT_TERM) printstr("stack underflow\r\n");
      00027B E5*00            [12]  886 	mov	a,_bp
      00027D 24 08            [12]  887 	add	a,#0x08
      00027F F8               [12]  888 	mov	r0,a
      000280 86 82            [24]  889 	mov	dpl,@r0
      000282 08               [12]  890 	inc	r0
      000283 86 83            [24]  891 	mov	dph,@r0
      000285 08               [12]  892 	inc	r0
      000286 86 F0            [24]  893 	mov	b,@r0
      000288 12r00r00         [24]  894 	lcall	__gptrget
      00028B FD               [12]  895 	mov	r5,a
      00028C A3               [24]  896 	inc	dptr
      00028D 12r00r00         [24]  897 	lcall	__gptrget
      000290 FE               [12]  898 	mov	r6,a
      000291 BD 08 06         [24]  899 	cjne	r5,#0x08,00320$
      000294 BE 00 03         [24]  900 	cjne	r6,#0x00,00320$
      000297 02r04r71         [24]  901 	ljmp	00110$
      00029A                        902 00320$:
      00029A 7Cr12            [12]  903 	mov	r4,#___str_3
      00029C 7Ds00            [12]  904 	mov	r5,#(___str_3 >> 8)
      00029E 7E 80            [12]  905 	mov	r6,#0x80
                                    906 ;	calc.c:51: return;
      0002A0                        907 00138$:
                                    908 ;	calc.c:49: for (; *s; s++) putchar(*s);
      0002A0 8C 82            [24]  909 	mov	dpl,r4
      0002A2 8D 83            [24]  910 	mov	dph,r5
      0002A4 8E F0            [24]  911 	mov	b,r6
      0002A6 12r00r00         [24]  912 	lcall	__gptrget
      0002A9 FB               [12]  913 	mov	r3,a
      0002AA 70 03            [24]  914 	jnz	00321$
      0002AC 02r04r71         [24]  915 	ljmp	00110$
      0002AF                        916 00321$:
      0002AF 7A 00            [12]  917 	mov	r2,#0x00
      0002B1 8B 82            [24]  918 	mov	dpl,r3
      0002B3 8A 83            [24]  919 	mov	dph,r2
      0002B5 12r00r00         [24]  920 	lcall	_putchar
      0002B8 0C               [12]  921 	inc	r4
                                    922 ;	calc.c:97: } else while (r > 0) {
      0002B9 BC 00 E4         [24]  923 	cjne	r4,#0x00,00138$
      0002BC 0D               [12]  924 	inc	r5
      0002BD 80 E1            [24]  925 	sjmp	00138$
      0002BF                        926 00183$:
      0002BF A8*00            [24]  927 	mov	r0,_bp
      0002C1 08               [12]  928 	inc	r0
      0002C2 A6 07            [24]  929 	mov	@r0,ar7
      0002C4                        930 00105$:
      0002C4 C3               [12]  931 	clr	c
      0002C5 E4               [12]  932 	clr	a
      0002C6 9E               [12]  933 	subb	a,r6
      0002C7 74 80            [12]  934 	mov	a,#(0x00 ^ 0x80)
      0002C9 8D F0            [24]  935 	mov	b,r5
      0002CB 63 F0 80         [24]  936 	xrl	b,#0x80
      0002CE 95 F0            [12]  937 	subb	a,b
      0002D0 40 03            [24]  938 	jc	00323$
      0002D2 02r04r71         [24]  939 	ljmp	00110$
      0002D5                        940 00323$:
                                    941 ;	calc.c:98: printstr("PSPA\t");
      0002D5 7Br24            [12]  942 	mov	r3,#___str_4
      0002D7 7Cs00            [12]  943 	mov	r4,#(___str_4 >> 8)
      0002D9 7D 80            [12]  944 	mov	r5,#0x80
                                    945 ;	calc.c:51: return;
      0002DB                        946 00141$:
                                    947 ;	calc.c:49: for (; *s; s++) putchar(*s);
      0002DB 8B 82            [24]  948 	mov	dpl,r3
      0002DD 8C 83            [24]  949 	mov	dph,r4
      0002DF 8D F0            [24]  950 	mov	b,r5
      0002E1 12r00r00         [24]  951 	lcall	__gptrget
      0002E4 FA               [12]  952 	mov	r2,a
      0002E5 60 10            [24]  953 	jz	00119$
      0002E7 7E 00            [12]  954 	mov	r6,#0x00
      0002E9 8A 82            [24]  955 	mov	dpl,r2
      0002EB 8E 83            [24]  956 	mov	dph,r6
      0002ED 12r00r00         [24]  957 	lcall	_putchar
      0002F0 0B               [12]  958 	inc	r3
                                    959 ;	calc.c:98: printstr("PSPA\t");
      0002F1 BB 00 E7         [24]  960 	cjne	r3,#0x00,00141$
      0002F4 0C               [12]  961 	inc	r4
      0002F5 80 E4            [24]  962 	sjmp	00141$
      0002F7                        963 00119$:
                                    964 ;	calc.c:99: printall(d);
      0002F7 E5*00            [12]  965 	mov	a,_bp
      0002F9 24 0E            [12]  966 	add	a,#0x0e
      0002FB F8               [12]  967 	mov	r0,a
      0002FC E5*00            [12]  968 	mov	a,_bp
      0002FE 24 12            [12]  969 	add	a,#0x12
      000300 F9               [12]  970 	mov	r1,a
      000301 E6               [12]  971 	mov	a,@r0
      000302 F7               [12]  972 	mov	@r1,a
      000303 08               [12]  973 	inc	r0
      000304 09               [12]  974 	inc	r1
      000305 E6               [12]  975 	mov	a,@r0
      000306 F7               [12]  976 	mov	@r1,a
      000307 08               [12]  977 	inc	r0
      000308 09               [12]  978 	inc	r1
      000309 E6               [12]  979 	mov	a,@r0
      00030A F7               [12]  980 	mov	@r1,a
      00030B 08               [12]  981 	inc	r0
      00030C 09               [12]  982 	inc	r1
      00030D E6               [12]  983 	mov	a,@r0
      00030E F7               [12]  984 	mov	@r1,a
      00030F E5*00            [12]  985 	mov	a,_bp
      000311 24 12            [12]  986 	add	a,#0x12
      000313 F8               [12]  987 	mov	r0,a
      000314 86 03            [24]  988 	mov	ar3,@r0
      000316 08               [12]  989 	inc	r0
      000317 86 04            [24]  990 	mov	ar4,@r0
      000319 08               [12]  991 	inc	r0
      00031A 86 05            [24]  992 	mov	ar5,@r0
      00031C 08               [12]  993 	inc	r0
      00031D 86 06            [24]  994 	mov	ar6,@r0
                                    995 ;	calc.c:64: printf("% 11ld\t", d);
      00031F C0 07            [24]  996 	push	ar7
      000321 C0 06            [24]  997 	push	ar6
      000323 C0 05            [24]  998 	push	ar5
      000325 C0 04            [24]  999 	push	ar4
      000327 C0 03            [24] 1000 	push	ar3
      000329 E5*00            [12] 1001 	mov	a,_bp
      00032B 24 12            [12] 1002 	add	a,#0x12
      00032D F8               [12] 1003 	mov	r0,a
      00032E E6               [12] 1004 	mov	a,@r0
      00032F C0 E0            [24] 1005 	push	acc
      000331 08               [12] 1006 	inc	r0
      000332 E6               [12] 1007 	mov	a,@r0
      000333 C0 E0            [24] 1008 	push	acc
      000335 08               [12] 1009 	inc	r0
      000336 E6               [12] 1010 	mov	a,@r0
      000337 C0 E0            [24] 1011 	push	acc
      000339 08               [12] 1012 	inc	r0
      00033A E6               [12] 1013 	mov	a,@r0
      00033B C0 E0            [24] 1014 	push	acc
      00033D 74r00            [12] 1015 	mov	a,#___str_0
      00033F C0 E0            [24] 1016 	push	acc
      000341 74s00            [12] 1017 	mov	a,#(___str_0 >> 8)
      000343 C0 E0            [24] 1018 	push	acc
      000345 74 80            [12] 1019 	mov	a,#0x80
      000347 C0 E0            [24] 1020 	push	acc
      000349 12r00r00         [24] 1021 	lcall	_printf
      00034C E5 81            [12] 1022 	mov	a,sp
      00034E 24 F9            [12] 1023 	add	a,#0xf9
      000350 F5 81            [12] 1024 	mov	sp,a
      000352 D0 03            [24] 1025 	pop	ar3
      000354 D0 04            [24] 1026 	pop	ar4
      000356 D0 05            [24] 1027 	pop	ar5
      000358 D0 06            [24] 1028 	pop	ar6
                                   1029 ;	calc.c:65: printf("%08lx\t", d);
      00035A C0 06            [24] 1030 	push	ar6
      00035C C0 05            [24] 1031 	push	ar5
      00035E C0 04            [24] 1032 	push	ar4
      000360 C0 03            [24] 1033 	push	ar3
      000362 C0 03            [24] 1034 	push	ar3
      000364 C0 04            [24] 1035 	push	ar4
      000366 C0 05            [24] 1036 	push	ar5
      000368 C0 06            [24] 1037 	push	ar6
      00036A 74r08            [12] 1038 	mov	a,#___str_1
      00036C C0 E0            [24] 1039 	push	acc
      00036E 74s00            [12] 1040 	mov	a,#(___str_1 >> 8)
      000370 C0 E0            [24] 1041 	push	acc
      000372 74 80            [12] 1042 	mov	a,#0x80
      000374 C0 E0            [24] 1043 	push	acc
      000376 12r00r00         [24] 1044 	lcall	_printf
      000379 E5 81            [12] 1045 	mov	a,sp
      00037B 24 F9            [12] 1046 	add	a,#0xf9
      00037D F5 81            [12] 1047 	mov	sp,a
      00037F D0 03            [24] 1048 	pop	ar3
      000381 D0 04            [24] 1049 	pop	ar4
      000383 D0 05            [24] 1050 	pop	ar5
      000385 D0 06            [24] 1051 	pop	ar6
      000387 D0 07            [24] 1052 	pop	ar7
                                   1053 ;	calc.c:66: printbin(d);
      000389 E5*00            [12] 1054 	mov	a,_bp
      00038B 24 16            [12] 1055 	add	a,#0x16
      00038D F8               [12] 1056 	mov	r0,a
      00038E A6 03            [24] 1057 	mov	@r0,ar3
      000390 08               [12] 1058 	inc	r0
      000391 A6 04            [24] 1059 	mov	@r0,ar4
      000393 08               [12] 1060 	inc	r0
      000394 A6 05            [24] 1061 	mov	@r0,ar5
      000396 08               [12] 1062 	inc	r0
      000397 A6 06            [24] 1063 	mov	@r0,ar6
                                   1064 ;	calc.c:57: for (mask = 0x80000000lu; mask; mask >>= 1)
      000399 E5*00            [12] 1065 	mov	a,_bp
      00039B 24 1A            [12] 1066 	add	a,#0x1a
      00039D F8               [12] 1067 	mov	r0,a
      00039E E4               [12] 1068 	clr	a
      00039F F6               [12] 1069 	mov	@r0,a
      0003A0 08               [12] 1070 	inc	r0
      0003A1 F6               [12] 1071 	mov	@r0,a
      0003A2 08               [12] 1072 	inc	r0
      0003A3 F6               [12] 1073 	mov	@r0,a
      0003A4 08               [12] 1074 	inc	r0
      0003A5 76 80            [12] 1075 	mov	@r0,#0x80
                                   1076 ;	calc.c:113: return 1;
                                   1077 ;	calc.c:57: for (mask = 0x80000000lu; mask; mask >>= 1)
      0003A7                       1078 00143$:
                                   1079 ;	calc.c:58: (void)putchar((d & mask) ? (int)'1' : (int)'0');
      0003A7 E5*00            [12] 1080 	mov	a,_bp
      0003A9 24 16            [12] 1081 	add	a,#0x16
      0003AB F8               [12] 1082 	mov	r0,a
      0003AC 86 02            [24] 1083 	mov	ar2,@r0
      0003AE 08               [12] 1084 	inc	r0
      0003AF 86 03            [24] 1085 	mov	ar3,@r0
      0003B1 08               [12] 1086 	inc	r0
      0003B2 86 04            [24] 1087 	mov	ar4,@r0
      0003B4 08               [12] 1088 	inc	r0
      0003B5 86 05            [24] 1089 	mov	ar5,@r0
      0003B7 E5*00            [12] 1090 	mov	a,_bp
      0003B9 24 1A            [12] 1091 	add	a,#0x1a
      0003BB F8               [12] 1092 	mov	r0,a
      0003BC E6               [12] 1093 	mov	a,@r0
      0003BD 52 02            [12] 1094 	anl	ar2,a
      0003BF 08               [12] 1095 	inc	r0
      0003C0 E6               [12] 1096 	mov	a,@r0
      0003C1 52 03            [12] 1097 	anl	ar3,a
      0003C3 08               [12] 1098 	inc	r0
      0003C4 E6               [12] 1099 	mov	a,@r0
      0003C5 52 04            [12] 1100 	anl	ar4,a
      0003C7 08               [12] 1101 	inc	r0
      0003C8 E6               [12] 1102 	mov	a,@r0
      0003C9 52 05            [12] 1103 	anl	ar5,a
      0003CB EA               [12] 1104 	mov	a,r2
      0003CC 4B               [12] 1105 	orl	a,r3
      0003CD 4C               [12] 1106 	orl	a,r4
      0003CE 4D               [12] 1107 	orl	a,r5
      0003CF 60 06            [24] 1108 	jz	00164$
      0003D1 7C 31            [12] 1109 	mov	r4,#0x31
      0003D3 7D 00            [12] 1110 	mov	r5,#0x00
      0003D5 80 04            [24] 1111 	sjmp	00165$
      0003D7                       1112 00164$:
      0003D7 7C 30            [12] 1113 	mov	r4,#0x30
      0003D9 7D 00            [12] 1114 	mov	r5,#0x00
      0003DB                       1115 00165$:
      0003DB 8C 82            [24] 1116 	mov	dpl,r4
      0003DD 8D 83            [24] 1117 	mov	dph,r5
      0003DF 12r00r00         [24] 1118 	lcall	_putchar
                                   1119 ;	calc.c:57: for (mask = 0x80000000lu; mask; mask >>= 1)
      0003E2 E5*00            [12] 1120 	mov	a,_bp
      0003E4 24 1A            [12] 1121 	add	a,#0x1a
      0003E6 F8               [12] 1122 	mov	r0,a
      0003E7 08               [12] 1123 	inc	r0
      0003E8 08               [12] 1124 	inc	r0
      0003E9 08               [12] 1125 	inc	r0
      0003EA E6               [12] 1126 	mov	a,@r0
      0003EB C3               [12] 1127 	clr	c
      0003EC 13               [12] 1128 	rrc	a
      0003ED F6               [12] 1129 	mov	@r0,a
      0003EE 18               [12] 1130 	dec	r0
      0003EF E6               [12] 1131 	mov	a,@r0
      0003F0 13               [12] 1132 	rrc	a
      0003F1 F6               [12] 1133 	mov	@r0,a
      0003F2 18               [12] 1134 	dec	r0
      0003F3 E6               [12] 1135 	mov	a,@r0
      0003F4 13               [12] 1136 	rrc	a
      0003F5 F6               [12] 1137 	mov	@r0,a
      0003F6 18               [12] 1138 	dec	r0
      0003F7 E6               [12] 1139 	mov	a,@r0
      0003F8 13               [12] 1140 	rrc	a
      0003F9 F6               [12] 1141 	mov	@r0,a
      0003FA E5*00            [12] 1142 	mov	a,_bp
      0003FC 24 1A            [12] 1143 	add	a,#0x1a
      0003FE F8               [12] 1144 	mov	r0,a
      0003FF E6               [12] 1145 	mov	a,@r0
      000400 08               [12] 1146 	inc	r0
      000401 46               [12] 1147 	orl	a,@r0
      000402 08               [12] 1148 	inc	r0
      000403 46               [12] 1149 	orl	a,@r0
      000404 08               [12] 1150 	inc	r0
      000405 46               [12] 1151 	orl	a,@r0
      000406 70 9F            [24] 1152 	jnz	00143$
                                   1153 ;	calc.c:100: printstr("\r\n");
      000408 7Br0F            [12] 1154 	mov	r3,#___str_2
      00040A 7Cs00            [12] 1155 	mov	r4,#(___str_2 >> 8)
      00040C 7D 80            [12] 1156 	mov	r5,#0x80
                                   1157 ;	calc.c:51: return;
      00040E                       1158 00146$:
                                   1159 ;	calc.c:49: for (; *s; s++) putchar(*s);
      00040E 8B 82            [24] 1160 	mov	dpl,r3
      000410 8C 83            [24] 1161 	mov	dph,r4
      000412 8D F0            [24] 1162 	mov	b,r5
      000414 12r00r00         [24] 1163 	lcall	__gptrget
      000417 FA               [12] 1164 	mov	r2,a
      000418 60 10            [24] 1165 	jz	00124$
      00041A 7E 00            [12] 1166 	mov	r6,#0x00
      00041C 8A 82            [24] 1167 	mov	dpl,r2
      00041E 8E 83            [24] 1168 	mov	dph,r6
      000420 12r00r00         [24] 1169 	lcall	_putchar
      000423 0B               [12] 1170 	inc	r3
                                   1171 ;	calc.c:100: printstr("\r\n");
      000424 BB 00 E7         [24] 1172 	cjne	r3,#0x00,00146$
      000427 0C               [12] 1173 	inc	r4
      000428 80 E4            [24] 1174 	sjmp	00146$
      00042A                       1175 00124$:
                                   1176 ;	calc.c:101: r = stack_pop(ctx->ps, &d);
      00042A C0 07            [24] 1177 	push	ar7
      00042C A8*00            [24] 1178 	mov	r0,_bp
      00042E 08               [12] 1179 	inc	r0
      00042F 86 03            [24] 1180 	mov	ar3,@r0
      000431 7C 00            [12] 1181 	mov	r4,#0x00
      000433 7D 40            [12] 1182 	mov	r5,#0x40
      000435 A8*00            [24] 1183 	mov	r0,_bp
      000437 08               [12] 1184 	inc	r0
      000438 08               [12] 1185 	inc	r0
      000439 86 82            [24] 1186 	mov	dpl,@r0
      00043B 08               [12] 1187 	inc	r0
      00043C 86 83            [24] 1188 	mov	dph,@r0
      00043E 08               [12] 1189 	inc	r0
      00043F 86 F0            [24] 1190 	mov	b,@r0
      000441 12r00r00         [24] 1191 	lcall	__gptrget
      000444 FA               [12] 1192 	mov	r2,a
      000445 A3               [24] 1193 	inc	dptr
      000446 12r00r00         [24] 1194 	lcall	__gptrget
      000449 FE               [12] 1195 	mov	r6,a
      00044A A3               [24] 1196 	inc	dptr
      00044B 12r00r00         [24] 1197 	lcall	__gptrget
      00044E FF               [12] 1198 	mov	r7,a
      00044F C0 07            [24] 1199 	push	ar7
      000451 C0 03            [24] 1200 	push	ar3
      000453 C0 04            [24] 1201 	push	ar4
      000455 C0 05            [24] 1202 	push	ar5
      000457 8A 82            [24] 1203 	mov	dpl,r2
      000459 8E 83            [24] 1204 	mov	dph,r6
      00045B 8F F0            [24] 1205 	mov	b,r7
      00045D 12r00r00         [24] 1206 	lcall	_stack_pop
      000460 AE 82            [24] 1207 	mov	r6,dpl
      000462 AD 83            [24] 1208 	mov	r5,dph
      000464 15 81            [12] 1209 	dec	sp
      000466 15 81            [12] 1210 	dec	sp
      000468 15 81            [12] 1211 	dec	sp
      00046A D0 07            [24] 1212 	pop	ar7
      00046C D0 07            [24] 1213 	pop	ar7
      00046E 02r02rC4         [24] 1214 	ljmp	00105$
      000471                       1215 00110$:
                                   1216 ;	calc.c:104: if (delta->event == EVENT_TERM) {
      000471 E5*00            [12] 1217 	mov	a,_bp
      000473 24 08            [12] 1218 	add	a,#0x08
      000475 F8               [12] 1219 	mov	r0,a
      000476 86 82            [24] 1220 	mov	dpl,@r0
      000478 08               [12] 1221 	inc	r0
      000479 86 83            [24] 1222 	mov	dph,@r0
      00047B 08               [12] 1223 	inc	r0
      00047C 86 F0            [24] 1224 	mov	b,@r0
      00047E 12r00r00         [24] 1225 	lcall	__gptrget
      000481 FD               [12] 1226 	mov	r5,a
      000482 A3               [24] 1227 	inc	dptr
      000483 12r00r00         [24] 1228 	lcall	__gptrget
      000486 FE               [12] 1229 	mov	r6,a
      000487 BD 08 05         [24] 1230 	cjne	r5,#0x08,00330$
      00048A BE 00 02         [24] 1231 	cjne	r6,#0x00,00330$
      00048D 80 03            [24] 1232 	sjmp	00331$
      00048F                       1233 00330$:
      00048F 02r06rD8         [24] 1234 	ljmp	00113$
      000492                       1235 00331$:
                                   1236 ;	calc.c:105: printstr("\r\n");
      000492 7Cr0F            [12] 1237 	mov	r4,#___str_2
      000494 7Ds00            [12] 1238 	mov	r5,#(___str_2 >> 8)
      000496 7E 80            [12] 1239 	mov	r6,#0x80
                                   1240 ;	calc.c:51: return;
      000498                       1241 00149$:
                                   1242 ;	calc.c:49: for (; *s; s++) putchar(*s);
      000498 8C 82            [24] 1243 	mov	dpl,r4
      00049A 8D 83            [24] 1244 	mov	dph,r5
      00049C 8E F0            [24] 1245 	mov	b,r6
      00049E 12r00r00         [24] 1246 	lcall	__gptrget
      0004A1 FB               [12] 1247 	mov	r3,a
      0004A2 60 10            [24] 1248 	jz	00126$
      0004A4 7A 00            [12] 1249 	mov	r2,#0x00
      0004A6 8B 82            [24] 1250 	mov	dpl,r3
      0004A8 8A 83            [24] 1251 	mov	dph,r2
      0004AA 12r00r00         [24] 1252 	lcall	_putchar
      0004AD 0C               [12] 1253 	inc	r4
                                   1254 ;	calc.c:105: printstr("\r\n");
      0004AE BC 00 E7         [24] 1255 	cjne	r4,#0x00,00149$
      0004B1 0D               [12] 1256 	inc	r5
      0004B2 80 E4            [24] 1257 	sjmp	00149$
      0004B4                       1258 00126$:
                                   1259 ;	calc.c:106: for (r = stack_pop(ctx->ss, &d); r > 0; r = stack_pop(ctx->ss, &d)) {
      0004B4 8F 06            [24] 1260 	mov	ar6,r7
      0004B6 E5*00            [12] 1261 	mov	a,_bp
      0004B8 24 05            [12] 1262 	add	a,#0x05
      0004BA F8               [12] 1263 	mov	r0,a
      0004BB A6 06            [24] 1264 	mov	@r0,ar6
      0004BD 08               [12] 1265 	inc	r0
      0004BE 76 00            [12] 1266 	mov	@r0,#0x00
      0004C0 08               [12] 1267 	inc	r0
      0004C1 76 40            [12] 1268 	mov	@r0,#0x40
      0004C3 E5*00            [12] 1269 	mov	a,_bp
      0004C5 24 0B            [12] 1270 	add	a,#0x0b
      0004C7 F8               [12] 1271 	mov	r0,a
      0004C8 E5*00            [12] 1272 	mov	a,_bp
      0004CA 24 08            [12] 1273 	add	a,#0x08
      0004CC F9               [12] 1274 	mov	r1,a
      0004CD 74 16            [12] 1275 	mov	a,#0x16
      0004CF 26               [12] 1276 	add	a,@r0
      0004D0 F7               [12] 1277 	mov	@r1,a
      0004D1 74 40            [12] 1278 	mov	a,#0x40
      0004D3 08               [12] 1279 	inc	r0
      0004D4 36               [12] 1280 	addc	a,@r0
      0004D5 09               [12] 1281 	inc	r1
      0004D6 F7               [12] 1282 	mov	@r1,a
      0004D7 08               [12] 1283 	inc	r0
      0004D8 09               [12] 1284 	inc	r1
      0004D9 E6               [12] 1285 	mov	a,@r0
      0004DA F7               [12] 1286 	mov	@r1,a
      0004DB E5*00            [12] 1287 	mov	a,_bp
      0004DD 24 08            [12] 1288 	add	a,#0x08
      0004DF F8               [12] 1289 	mov	r0,a
      0004E0 86 82            [24] 1290 	mov	dpl,@r0
      0004E2 08               [12] 1291 	inc	r0
      0004E3 86 83            [24] 1292 	mov	dph,@r0
      0004E5 08               [12] 1293 	inc	r0
      0004E6 86 F0            [24] 1294 	mov	b,@r0
      0004E8 12r00r00         [24] 1295 	lcall	__gptrget
      0004EB FA               [12] 1296 	mov	r2,a
      0004EC A3               [24] 1297 	inc	dptr
      0004ED 12r00r00         [24] 1298 	lcall	__gptrget
      0004F0 FB               [12] 1299 	mov	r3,a
      0004F1 A3               [24] 1300 	inc	dptr
      0004F2 12r00r00         [24] 1301 	lcall	__gptrget
      0004F5 FE               [12] 1302 	mov	r6,a
      0004F6 C0 07            [24] 1303 	push	ar7
      0004F8 E5*00            [12] 1304 	mov	a,_bp
      0004FA 24 05            [12] 1305 	add	a,#0x05
      0004FC F8               [12] 1306 	mov	r0,a
      0004FD E6               [12] 1307 	mov	a,@r0
      0004FE C0 E0            [24] 1308 	push	acc
      000500 08               [12] 1309 	inc	r0
      000501 E6               [12] 1310 	mov	a,@r0
      000502 C0 E0            [24] 1311 	push	acc
      000504 08               [12] 1312 	inc	r0
      000505 E6               [12] 1313 	mov	a,@r0
      000506 C0 E0            [24] 1314 	push	acc
      000508 8A 82            [24] 1315 	mov	dpl,r2
      00050A 8B 83            [24] 1316 	mov	dph,r3
      00050C 8E F0            [24] 1317 	mov	b,r6
      00050E 12r00r00         [24] 1318 	lcall	_stack_pop
      000511 AD 82            [24] 1319 	mov	r5,dpl
      000513 AE 83            [24] 1320 	mov	r6,dph
      000515 15 81            [12] 1321 	dec	sp
      000517 15 81            [12] 1322 	dec	sp
      000519 15 81            [12] 1323 	dec	sp
      00051B D0 07            [24] 1324 	pop	ar7
      00051D                       1325 00160$:
      00051D C3               [12] 1326 	clr	c
      00051E E4               [12] 1327 	clr	a
      00051F 9D               [12] 1328 	subb	a,r5
      000520 74 80            [12] 1329 	mov	a,#(0x00 ^ 0x80)
      000522 8E F0            [24] 1330 	mov	b,r6
      000524 63 F0 80         [24] 1331 	xrl	b,#0x80
      000527 95 F0            [12] 1332 	subb	a,b
      000529 40 03            [24] 1333 	jc	00334$
      00052B 02r06rD8         [24] 1334 	ljmp	00113$
      00052E                       1335 00334$:
                                   1336 ;	calc.c:107: printstr("SSPA\t");
      00052E 7Dr2A            [12] 1337 	mov	r5,#___str_5
      000530 7Bs00            [12] 1338 	mov	r3,#(___str_5 >> 8)
      000532 7A 80            [12] 1339 	mov	r2,#0x80
                                   1340 ;	calc.c:51: return;
      000534                       1341 00152$:
                                   1342 ;	calc.c:49: for (; *s; s++) putchar(*s);
      000534 8D 82            [24] 1343 	mov	dpl,r5
      000536 8B 83            [24] 1344 	mov	dph,r3
      000538 8A F0            [24] 1345 	mov	b,r2
      00053A 12r00r00         [24] 1346 	lcall	__gptrget
      00053D FE               [12] 1347 	mov	r6,a
      00053E 60 16            [24] 1348 	jz	00128$
      000540 C0 07            [24] 1349 	push	ar7
      000542 8E 04            [24] 1350 	mov	ar4,r6
      000544 7F 00            [12] 1351 	mov	r7,#0x00
      000546 8C 82            [24] 1352 	mov	dpl,r4
      000548 8F 83            [24] 1353 	mov	dph,r7
      00054A 12r00r00         [24] 1354 	lcall	_putchar
      00054D 0D               [12] 1355 	inc	r5
      00054E BD 00 01         [24] 1356 	cjne	r5,#0x00,00336$
      000551 0B               [12] 1357 	inc	r3
      000552                       1358 00336$:
      000552 D0 07            [24] 1359 	pop	ar7
                                   1360 ;	calc.c:107: printstr("SSPA\t");
      000554 80 DE            [24] 1361 	sjmp	00152$
      000556                       1362 00128$:
                                   1363 ;	calc.c:108: printall(d);
      000556 C0 07            [24] 1364 	push	ar7
      000558 E5*00            [12] 1365 	mov	a,_bp
      00055A 24 0E            [12] 1366 	add	a,#0x0e
      00055C F8               [12] 1367 	mov	r0,a
      00055D E5*00            [12] 1368 	mov	a,_bp
      00055F 24 12            [12] 1369 	add	a,#0x12
      000561 F9               [12] 1370 	mov	r1,a
      000562 E6               [12] 1371 	mov	a,@r0
      000563 F7               [12] 1372 	mov	@r1,a
      000564 08               [12] 1373 	inc	r0
      000565 09               [12] 1374 	inc	r1
      000566 E6               [12] 1375 	mov	a,@r0
      000567 F7               [12] 1376 	mov	@r1,a
      000568 08               [12] 1377 	inc	r0
      000569 09               [12] 1378 	inc	r1
      00056A E6               [12] 1379 	mov	a,@r0
      00056B F7               [12] 1380 	mov	@r1,a
      00056C 08               [12] 1381 	inc	r0
      00056D 09               [12] 1382 	inc	r1
      00056E E6               [12] 1383 	mov	a,@r0
      00056F F7               [12] 1384 	mov	@r1,a
      000570 E5*00            [12] 1385 	mov	a,_bp
      000572 24 12            [12] 1386 	add	a,#0x12
      000574 F8               [12] 1387 	mov	r0,a
      000575 86 02            [24] 1388 	mov	ar2,@r0
      000577 08               [12] 1389 	inc	r0
      000578 86 03            [24] 1390 	mov	ar3,@r0
      00057A 08               [12] 1391 	inc	r0
      00057B 86 04            [24] 1392 	mov	ar4,@r0
      00057D 08               [12] 1393 	inc	r0
      00057E 86 07            [24] 1394 	mov	ar7,@r0
                                   1395 ;	calc.c:64: printf("% 11ld\t", d);
      000580 C0 07            [24] 1396 	push	ar7
      000582 C0 04            [24] 1397 	push	ar4
      000584 C0 03            [24] 1398 	push	ar3
      000586 C0 02            [24] 1399 	push	ar2
      000588 E5*00            [12] 1400 	mov	a,_bp
      00058A 24 12            [12] 1401 	add	a,#0x12
      00058C F8               [12] 1402 	mov	r0,a
      00058D E6               [12] 1403 	mov	a,@r0
      00058E C0 E0            [24] 1404 	push	acc
      000590 08               [12] 1405 	inc	r0
      000591 E6               [12] 1406 	mov	a,@r0
      000592 C0 E0            [24] 1407 	push	acc
      000594 08               [12] 1408 	inc	r0
      000595 E6               [12] 1409 	mov	a,@r0
      000596 C0 E0            [24] 1410 	push	acc
      000598 08               [12] 1411 	inc	r0
      000599 E6               [12] 1412 	mov	a,@r0
      00059A C0 E0            [24] 1413 	push	acc
      00059C 74r00            [12] 1414 	mov	a,#___str_0
      00059E C0 E0            [24] 1415 	push	acc
      0005A0 74s00            [12] 1416 	mov	a,#(___str_0 >> 8)
      0005A2 C0 E0            [24] 1417 	push	acc
      0005A4 74 80            [12] 1418 	mov	a,#0x80
      0005A6 C0 E0            [24] 1419 	push	acc
      0005A8 12r00r00         [24] 1420 	lcall	_printf
      0005AB E5 81            [12] 1421 	mov	a,sp
      0005AD 24 F9            [12] 1422 	add	a,#0xf9
      0005AF F5 81            [12] 1423 	mov	sp,a
      0005B1 D0 02            [24] 1424 	pop	ar2
      0005B3 D0 03            [24] 1425 	pop	ar3
      0005B5 D0 04            [24] 1426 	pop	ar4
      0005B7 D0 07            [24] 1427 	pop	ar7
                                   1428 ;	calc.c:65: printf("%08lx\t", d);
      0005B9 C0 07            [24] 1429 	push	ar7
      0005BB C0 04            [24] 1430 	push	ar4
      0005BD C0 03            [24] 1431 	push	ar3
      0005BF C0 02            [24] 1432 	push	ar2
      0005C1 C0 02            [24] 1433 	push	ar2
      0005C3 C0 03            [24] 1434 	push	ar3
      0005C5 C0 04            [24] 1435 	push	ar4
      0005C7 C0 07            [24] 1436 	push	ar7
      0005C9 74r08            [12] 1437 	mov	a,#___str_1
      0005CB C0 E0            [24] 1438 	push	acc
      0005CD 74s00            [12] 1439 	mov	a,#(___str_1 >> 8)
      0005CF C0 E0            [24] 1440 	push	acc
      0005D1 74 80            [12] 1441 	mov	a,#0x80
      0005D3 C0 E0            [24] 1442 	push	acc
      0005D5 12r00r00         [24] 1443 	lcall	_printf
      0005D8 E5 81            [12] 1444 	mov	a,sp
      0005DA 24 F9            [12] 1445 	add	a,#0xf9
      0005DC F5 81            [12] 1446 	mov	sp,a
      0005DE D0 02            [24] 1447 	pop	ar2
      0005E0 D0 03            [24] 1448 	pop	ar3
      0005E2 D0 04            [24] 1449 	pop	ar4
      0005E4 D0 07            [24] 1450 	pop	ar7
                                   1451 ;	calc.c:66: printbin(d);
      0005E6 E5*00            [12] 1452 	mov	a,_bp
      0005E8 24 16            [12] 1453 	add	a,#0x16
      0005EA F8               [12] 1454 	mov	r0,a
      0005EB A6 02            [24] 1455 	mov	@r0,ar2
      0005ED 08               [12] 1456 	inc	r0
      0005EE A6 03            [24] 1457 	mov	@r0,ar3
      0005F0 08               [12] 1458 	inc	r0
      0005F1 A6 04            [24] 1459 	mov	@r0,ar4
      0005F3 08               [12] 1460 	inc	r0
      0005F4 A6 07            [24] 1461 	mov	@r0,ar7
                                   1462 ;	calc.c:57: for (mask = 0x80000000lu; mask; mask >>= 1)
      0005F6 E5*00            [12] 1463 	mov	a,_bp
      0005F8 24 1A            [12] 1464 	add	a,#0x1a
      0005FA F8               [12] 1465 	mov	r0,a
      0005FB E4               [12] 1466 	clr	a
      0005FC F6               [12] 1467 	mov	@r0,a
      0005FD 08               [12] 1468 	inc	r0
      0005FE F6               [12] 1469 	mov	@r0,a
      0005FF 08               [12] 1470 	inc	r0
      000600 F6               [12] 1471 	mov	@r0,a
      000601 08               [12] 1472 	inc	r0
      000602 76 80            [12] 1473 	mov	@r0,#0x80
                                   1474 ;	calc.c:113: return 1;
      000604 D0 07            [24] 1475 	pop	ar7
                                   1476 ;	calc.c:57: for (mask = 0x80000000lu; mask; mask >>= 1)
      000606                       1477 00154$:
                                   1478 ;	calc.c:58: (void)putchar((d & mask) ? (int)'1' : (int)'0');
      000606 C0 07            [24] 1479 	push	ar7
      000608 E5*00            [12] 1480 	mov	a,_bp
      00060A 24 16            [12] 1481 	add	a,#0x16
      00060C F8               [12] 1482 	mov	r0,a
      00060D 86 02            [24] 1483 	mov	ar2,@r0
      00060F 08               [12] 1484 	inc	r0
      000610 86 03            [24] 1485 	mov	ar3,@r0
      000612 08               [12] 1486 	inc	r0
      000613 86 04            [24] 1487 	mov	ar4,@r0
      000615 08               [12] 1488 	inc	r0
      000616 86 07            [24] 1489 	mov	ar7,@r0
      000618 E5*00            [12] 1490 	mov	a,_bp
      00061A 24 1A            [12] 1491 	add	a,#0x1a
      00061C F8               [12] 1492 	mov	r0,a
      00061D E6               [12] 1493 	mov	a,@r0
      00061E 52 02            [12] 1494 	anl	ar2,a
      000620 08               [12] 1495 	inc	r0
      000621 E6               [12] 1496 	mov	a,@r0
      000622 52 03            [12] 1497 	anl	ar3,a
      000624 08               [12] 1498 	inc	r0
      000625 E6               [12] 1499 	mov	a,@r0
      000626 52 04            [12] 1500 	anl	ar4,a
      000628 08               [12] 1501 	inc	r0
      000629 E6               [12] 1502 	mov	a,@r0
      00062A 52 07            [12] 1503 	anl	ar7,a
      00062C EA               [12] 1504 	mov	a,r2
      00062D 4B               [12] 1505 	orl	a,r3
      00062E 4C               [12] 1506 	orl	a,r4
      00062F 4F               [12] 1507 	orl	a,r7
      000630 D0 07            [24] 1508 	pop	ar7
      000632 60 06            [24] 1509 	jz	00166$
      000634 7B 31            [12] 1510 	mov	r3,#0x31
      000636 7C 00            [12] 1511 	mov	r4,#0x00
      000638 80 04            [24] 1512 	sjmp	00167$
      00063A                       1513 00166$:
      00063A 7B 30            [12] 1514 	mov	r3,#0x30
      00063C 7C 00            [12] 1515 	mov	r4,#0x00
      00063E                       1516 00167$:
      00063E 8B 82            [24] 1517 	mov	dpl,r3
      000640 8C 83            [24] 1518 	mov	dph,r4
      000642 12r00r00         [24] 1519 	lcall	_putchar
                                   1520 ;	calc.c:57: for (mask = 0x80000000lu; mask; mask >>= 1)
      000645 E5*00            [12] 1521 	mov	a,_bp
      000647 24 1A            [12] 1522 	add	a,#0x1a
      000649 F8               [12] 1523 	mov	r0,a
      00064A 08               [12] 1524 	inc	r0
      00064B 08               [12] 1525 	inc	r0
      00064C 08               [12] 1526 	inc	r0
      00064D E6               [12] 1527 	mov	a,@r0
      00064E C3               [12] 1528 	clr	c
      00064F 13               [12] 1529 	rrc	a
      000650 F6               [12] 1530 	mov	@r0,a
      000651 18               [12] 1531 	dec	r0
      000652 E6               [12] 1532 	mov	a,@r0
      000653 13               [12] 1533 	rrc	a
      000654 F6               [12] 1534 	mov	@r0,a
      000655 18               [12] 1535 	dec	r0
      000656 E6               [12] 1536 	mov	a,@r0
      000657 13               [12] 1537 	rrc	a
      000658 F6               [12] 1538 	mov	@r0,a
      000659 18               [12] 1539 	dec	r0
      00065A E6               [12] 1540 	mov	a,@r0
      00065B 13               [12] 1541 	rrc	a
      00065C F6               [12] 1542 	mov	@r0,a
      00065D E5*00            [12] 1543 	mov	a,_bp
      00065F 24 1A            [12] 1544 	add	a,#0x1a
      000661 F8               [12] 1545 	mov	r0,a
      000662 E6               [12] 1546 	mov	a,@r0
      000663 08               [12] 1547 	inc	r0
      000664 46               [12] 1548 	orl	a,@r0
      000665 08               [12] 1549 	inc	r0
      000666 46               [12] 1550 	orl	a,@r0
      000667 08               [12] 1551 	inc	r0
      000668 46               [12] 1552 	orl	a,@r0
      000669 70 9B            [24] 1553 	jnz	00154$
                                   1554 ;	calc.c:109: printstr("\r\n");
      00066B 7Dr0F            [12] 1555 	mov	r5,#___str_2
      00066D 7Bs00            [12] 1556 	mov	r3,#(___str_2 >> 8)
      00066F 7A 80            [12] 1557 	mov	r2,#0x80
                                   1558 ;	calc.c:51: return;
      000671                       1559 00157$:
                                   1560 ;	calc.c:49: for (; *s; s++) putchar(*s);
      000671 8D 82            [24] 1561 	mov	dpl,r5
      000673 8B 83            [24] 1562 	mov	dph,r3
      000675 8A F0            [24] 1563 	mov	b,r2
      000677 12r00r00         [24] 1564 	lcall	__gptrget
      00067A FE               [12] 1565 	mov	r6,a
      00067B 60 16            [24] 1566 	jz	00133$
      00067D C0 07            [24] 1567 	push	ar7
      00067F 8E 04            [24] 1568 	mov	ar4,r6
      000681 7F 00            [12] 1569 	mov	r7,#0x00
      000683 8C 82            [24] 1570 	mov	dpl,r4
      000685 8F 83            [24] 1571 	mov	dph,r7
      000687 12r00r00         [24] 1572 	lcall	_putchar
      00068A 0D               [12] 1573 	inc	r5
      00068B BD 00 01         [24] 1574 	cjne	r5,#0x00,00340$
      00068E 0B               [12] 1575 	inc	r3
      00068F                       1576 00340$:
      00068F D0 07            [24] 1577 	pop	ar7
                                   1578 ;	calc.c:109: printstr("\r\n");
      000691 80 DE            [24] 1579 	sjmp	00157$
      000693                       1580 00133$:
                                   1581 ;	calc.c:106: for (r = stack_pop(ctx->ss, &d); r > 0; r = stack_pop(ctx->ss, &d)) {
      000693 8F 06            [24] 1582 	mov	ar6,r7
      000695 7D 00            [12] 1583 	mov	r5,#0x00
      000697 7A 40            [12] 1584 	mov	r2,#0x40
      000699 C0 07            [24] 1585 	push	ar7
      00069B E5*00            [12] 1586 	mov	a,_bp
      00069D 24 08            [12] 1587 	add	a,#0x08
      00069F F8               [12] 1588 	mov	r0,a
      0006A0 86 82            [24] 1589 	mov	dpl,@r0
      0006A2 08               [12] 1590 	inc	r0
      0006A3 86 83            [24] 1591 	mov	dph,@r0
      0006A5 08               [12] 1592 	inc	r0
      0006A6 86 F0            [24] 1593 	mov	b,@r0
      0006A8 12r00r00         [24] 1594 	lcall	__gptrget
      0006AB FB               [12] 1595 	mov	r3,a
      0006AC A3               [24] 1596 	inc	dptr
      0006AD 12r00r00         [24] 1597 	lcall	__gptrget
      0006B0 FC               [12] 1598 	mov	r4,a
      0006B1 A3               [24] 1599 	inc	dptr
      0006B2 12r00r00         [24] 1600 	lcall	__gptrget
      0006B5 FF               [12] 1601 	mov	r7,a
      0006B6 C0 06            [24] 1602 	push	ar6
      0006B8 C0 05            [24] 1603 	push	ar5
      0006BA C0 02            [24] 1604 	push	ar2
      0006BC 8B 82            [24] 1605 	mov	dpl,r3
      0006BE 8C 83            [24] 1606 	mov	dph,r4
      0006C0 8F F0            [24] 1607 	mov	b,r7
      0006C2 12r00r00         [24] 1608 	lcall	_stack_pop
      0006C5 AC 82            [24] 1609 	mov	r4,dpl
      0006C7 AF 83            [24] 1610 	mov	r7,dph
      0006C9 15 81            [12] 1611 	dec	sp
      0006CB 15 81            [12] 1612 	dec	sp
      0006CD 15 81            [12] 1613 	dec	sp
      0006CF 8C 05            [24] 1614 	mov	ar5,r4
      0006D1 8F 06            [24] 1615 	mov	ar6,r7
      0006D3 D0 07            [24] 1616 	pop	ar7
      0006D5 02r05r1D         [24] 1617 	ljmp	00160$
      0006D8                       1618 00113$:
                                   1619 ;	calc.c:113: return 1;
      0006D8 90 00 01         [24] 1620 	mov	dptr,#0x0001
                                   1621 ;	calc.c:114: }
      0006DB 85*00 81         [24] 1622 	mov	sp,_bp
      0006DE D0*00            [24] 1623 	pop	_bp
      0006E0 22               [24] 1624 	ret
                                   1625 ;------------------------------------------------------------
                                   1626 ;Allocation info for local variables in function 'dump_peek'
                                   1627 ;------------------------------------------------------------
                                   1628 ;d                         Allocated to stack - _bp -6
                                   1629 ;_ctx                      Allocated to registers 
                                   1630 ;__1310720021              Allocated to registers 
                                   1631 ;s                         Allocated to registers r5 r6 r7 
                                   1632 ;__1310720023              Allocated to registers r4 r5 r6 r7 
                                   1633 ;d                         Allocated to registers 
                                   1634 ;__1310720001              Allocated to registers 
                                   1635 ;d                         Allocated to stack - _bp +1
                                   1636 ;mask                      Allocated to stack - _bp +5
                                   1637 ;__1310720025              Allocated to registers 
                                   1638 ;s                         Allocated to registers r5 r6 r7 
                                   1639 ;------------------------------------------------------------
                                   1640 ;	calc.c:116: static int dump_peek(void *_ctx, long d) __reentrant {
                                   1641 ;	-----------------------------------------
                                   1642 ;	 function dump_peek
                                   1643 ;	-----------------------------------------
      0006E1                       1644 _dump_peek:
      0006E1 C0*00            [24] 1645 	push	_bp
      0006E3 E5 81            [12] 1646 	mov	a,sp
      0006E5 F5*00            [12] 1647 	mov	_bp,a
      0006E7 24 08            [12] 1648 	add	a,#0x08
      0006E9 F5 81            [12] 1649 	mov	sp,a
                                   1650 ;	calc.c:119: printstr("PSVA\t");
      0006EB 7Dr30            [12] 1651 	mov	r5,#___str_6
      0006ED 7Es00            [12] 1652 	mov	r6,#(___str_6 >> 8)
      0006EF 7F 80            [12] 1653 	mov	r7,#0x80
                                   1654 ;	calc.c:51: return;
      0006F1                       1655 00109$:
                                   1656 ;	calc.c:49: for (; *s; s++) putchar(*s);
      0006F1 8D 82            [24] 1657 	mov	dpl,r5
      0006F3 8E 83            [24] 1658 	mov	dph,r6
      0006F5 8F F0            [24] 1659 	mov	b,r7
      0006F7 12r00r00         [24] 1660 	lcall	__gptrget
      0006FA FC               [12] 1661 	mov	r4,a
      0006FB 60 10            [24] 1662 	jz	00102$
      0006FD 7B 00            [12] 1663 	mov	r3,#0x00
      0006FF 8C 82            [24] 1664 	mov	dpl,r4
      000701 8B 83            [24] 1665 	mov	dph,r3
      000703 12r00r00         [24] 1666 	lcall	_putchar
      000706 0D               [12] 1667 	inc	r5
                                   1668 ;	calc.c:119: printstr("PSVA\t");
      000707 BD 00 E7         [24] 1669 	cjne	r5,#0x00,00109$
      00070A 0E               [12] 1670 	inc	r6
      00070B 80 E4            [24] 1671 	sjmp	00109$
      00070D                       1672 00102$:
                                   1673 ;	calc.c:120: printall(d);
      00070D E5*00            [12] 1674 	mov	a,_bp
      00070F 24 FA            [12] 1675 	add	a,#0xfa
      000711 F8               [12] 1676 	mov	r0,a
      000712 86 04            [24] 1677 	mov	ar4,@r0
      000714 08               [12] 1678 	inc	r0
      000715 86 05            [24] 1679 	mov	ar5,@r0
      000717 08               [12] 1680 	inc	r0
      000718 86 06            [24] 1681 	mov	ar6,@r0
      00071A 08               [12] 1682 	inc	r0
      00071B 86 07            [24] 1683 	mov	ar7,@r0
                                   1684 ;	calc.c:64: printf("% 11ld\t", d);
      00071D C0 07            [24] 1685 	push	ar7
      00071F C0 06            [24] 1686 	push	ar6
      000721 C0 05            [24] 1687 	push	ar5
      000723 C0 04            [24] 1688 	push	ar4
      000725 C0 04            [24] 1689 	push	ar4
      000727 C0 05            [24] 1690 	push	ar5
      000729 C0 06            [24] 1691 	push	ar6
      00072B C0 07            [24] 1692 	push	ar7
      00072D 74r00            [12] 1693 	mov	a,#___str_0
      00072F C0 E0            [24] 1694 	push	acc
      000731 74s00            [12] 1695 	mov	a,#(___str_0 >> 8)
      000733 C0 E0            [24] 1696 	push	acc
      000735 74 80            [12] 1697 	mov	a,#0x80
      000737 C0 E0            [24] 1698 	push	acc
      000739 12r00r00         [24] 1699 	lcall	_printf
      00073C E5 81            [12] 1700 	mov	a,sp
      00073E 24 F9            [12] 1701 	add	a,#0xf9
      000740 F5 81            [12] 1702 	mov	sp,a
      000742 D0 04            [24] 1703 	pop	ar4
      000744 D0 05            [24] 1704 	pop	ar5
      000746 D0 06            [24] 1705 	pop	ar6
      000748 D0 07            [24] 1706 	pop	ar7
                                   1707 ;	calc.c:65: printf("%08lx\t", d);
      00074A C0 07            [24] 1708 	push	ar7
      00074C C0 06            [24] 1709 	push	ar6
      00074E C0 05            [24] 1710 	push	ar5
      000750 C0 04            [24] 1711 	push	ar4
      000752 C0 04            [24] 1712 	push	ar4
      000754 C0 05            [24] 1713 	push	ar5
      000756 C0 06            [24] 1714 	push	ar6
      000758 C0 07            [24] 1715 	push	ar7
      00075A 74r08            [12] 1716 	mov	a,#___str_1
      00075C C0 E0            [24] 1717 	push	acc
      00075E 74s00            [12] 1718 	mov	a,#(___str_1 >> 8)
      000760 C0 E0            [24] 1719 	push	acc
      000762 74 80            [12] 1720 	mov	a,#0x80
      000764 C0 E0            [24] 1721 	push	acc
      000766 12r00r00         [24] 1722 	lcall	_printf
      000769 E5 81            [12] 1723 	mov	a,sp
      00076B 24 F9            [12] 1724 	add	a,#0xf9
      00076D F5 81            [12] 1725 	mov	sp,a
      00076F D0 04            [24] 1726 	pop	ar4
      000771 D0 05            [24] 1727 	pop	ar5
      000773 D0 06            [24] 1728 	pop	ar6
      000775 D0 07            [24] 1729 	pop	ar7
                                   1730 ;	calc.c:66: printbin(d);
      000777 A8*00            [24] 1731 	mov	r0,_bp
      000779 08               [12] 1732 	inc	r0
      00077A A6 04            [24] 1733 	mov	@r0,ar4
      00077C 08               [12] 1734 	inc	r0
      00077D A6 05            [24] 1735 	mov	@r0,ar5
      00077F 08               [12] 1736 	inc	r0
      000780 A6 06            [24] 1737 	mov	@r0,ar6
      000782 08               [12] 1738 	inc	r0
      000783 A6 07            [24] 1739 	mov	@r0,ar7
                                   1740 ;	calc.c:57: for (mask = 0x80000000lu; mask; mask >>= 1)
      000785 E5*00            [12] 1741 	mov	a,_bp
      000787 24 05            [12] 1742 	add	a,#0x05
      000789 F8               [12] 1743 	mov	r0,a
      00078A E4               [12] 1744 	clr	a
      00078B F6               [12] 1745 	mov	@r0,a
      00078C 08               [12] 1746 	inc	r0
      00078D F6               [12] 1747 	mov	@r0,a
      00078E 08               [12] 1748 	inc	r0
      00078F F6               [12] 1749 	mov	@r0,a
      000790 08               [12] 1750 	inc	r0
      000791 76 80            [12] 1751 	mov	@r0,#0x80
      000793                       1752 00111$:
                                   1753 ;	calc.c:58: (void)putchar((d & mask) ? (int)'1' : (int)'0');
      000793 A8*00            [24] 1754 	mov	r0,_bp
      000795 08               [12] 1755 	inc	r0
      000796 86 04            [24] 1756 	mov	ar4,@r0
      000798 08               [12] 1757 	inc	r0
      000799 86 05            [24] 1758 	mov	ar5,@r0
      00079B 08               [12] 1759 	inc	r0
      00079C 86 06            [24] 1760 	mov	ar6,@r0
      00079E 08               [12] 1761 	inc	r0
      00079F 86 07            [24] 1762 	mov	ar7,@r0
      0007A1 E5*00            [12] 1763 	mov	a,_bp
      0007A3 24 05            [12] 1764 	add	a,#0x05
      0007A5 F8               [12] 1765 	mov	r0,a
      0007A6 E6               [12] 1766 	mov	a,@r0
      0007A7 52 04            [12] 1767 	anl	ar4,a
      0007A9 08               [12] 1768 	inc	r0
      0007AA E6               [12] 1769 	mov	a,@r0
      0007AB 52 05            [12] 1770 	anl	ar5,a
      0007AD 08               [12] 1771 	inc	r0
      0007AE E6               [12] 1772 	mov	a,@r0
      0007AF 52 06            [12] 1773 	anl	ar6,a
      0007B1 08               [12] 1774 	inc	r0
      0007B2 E6               [12] 1775 	mov	a,@r0
      0007B3 52 07            [12] 1776 	anl	ar7,a
      0007B5 EC               [12] 1777 	mov	a,r4
      0007B6 4D               [12] 1778 	orl	a,r5
      0007B7 4E               [12] 1779 	orl	a,r6
      0007B8 4F               [12] 1780 	orl	a,r7
      0007B9 60 06            [24] 1781 	jz	00118$
      0007BB 7E 31            [12] 1782 	mov	r6,#0x31
      0007BD 7F 00            [12] 1783 	mov	r7,#0x00
      0007BF 80 04            [24] 1784 	sjmp	00119$
      0007C1                       1785 00118$:
      0007C1 7E 30            [12] 1786 	mov	r6,#0x30
      0007C3 7F 00            [12] 1787 	mov	r7,#0x00
      0007C5                       1788 00119$:
      0007C5 8E 82            [24] 1789 	mov	dpl,r6
      0007C7 8F 83            [24] 1790 	mov	dph,r7
      0007C9 12r00r00         [24] 1791 	lcall	_putchar
                                   1792 ;	calc.c:57: for (mask = 0x80000000lu; mask; mask >>= 1)
      0007CC E5*00            [12] 1793 	mov	a,_bp
      0007CE 24 05            [12] 1794 	add	a,#0x05
      0007D0 F8               [12] 1795 	mov	r0,a
      0007D1 08               [12] 1796 	inc	r0
      0007D2 08               [12] 1797 	inc	r0
      0007D3 08               [12] 1798 	inc	r0
      0007D4 E6               [12] 1799 	mov	a,@r0
      0007D5 C3               [12] 1800 	clr	c
      0007D6 13               [12] 1801 	rrc	a
      0007D7 F6               [12] 1802 	mov	@r0,a
      0007D8 18               [12] 1803 	dec	r0
      0007D9 E6               [12] 1804 	mov	a,@r0
      0007DA 13               [12] 1805 	rrc	a
      0007DB F6               [12] 1806 	mov	@r0,a
      0007DC 18               [12] 1807 	dec	r0
      0007DD E6               [12] 1808 	mov	a,@r0
      0007DE 13               [12] 1809 	rrc	a
      0007DF F6               [12] 1810 	mov	@r0,a
      0007E0 18               [12] 1811 	dec	r0
      0007E1 E6               [12] 1812 	mov	a,@r0
      0007E2 13               [12] 1813 	rrc	a
      0007E3 F6               [12] 1814 	mov	@r0,a
      0007E4 E5*00            [12] 1815 	mov	a,_bp
      0007E6 24 05            [12] 1816 	add	a,#0x05
      0007E8 F8               [12] 1817 	mov	r0,a
      0007E9 E6               [12] 1818 	mov	a,@r0
      0007EA 08               [12] 1819 	inc	r0
      0007EB 46               [12] 1820 	orl	a,@r0
      0007EC 08               [12] 1821 	inc	r0
      0007ED 46               [12] 1822 	orl	a,@r0
      0007EE 08               [12] 1823 	inc	r0
      0007EF 46               [12] 1824 	orl	a,@r0
      0007F0 70 A1            [24] 1825 	jnz	00111$
                                   1826 ;	calc.c:121: printstr("\r\n");
      0007F2 7Dr0F            [12] 1827 	mov	r5,#___str_2
      0007F4 7Es00            [12] 1828 	mov	r6,#(___str_2 >> 8)
      0007F6 7F 80            [12] 1829 	mov	r7,#0x80
                                   1830 ;	calc.c:51: return;
      0007F8                       1831 00114$:
                                   1832 ;	calc.c:49: for (; *s; s++) putchar(*s);
      0007F8 8D 82            [24] 1833 	mov	dpl,r5
      0007FA 8E 83            [24] 1834 	mov	dph,r6
      0007FC 8F F0            [24] 1835 	mov	b,r7
      0007FE 12r00r00         [24] 1836 	lcall	__gptrget
      000801 FC               [12] 1837 	mov	r4,a
      000802 60 10            [24] 1838 	jz	00107$
      000804 7B 00            [12] 1839 	mov	r3,#0x00
      000806 8C 82            [24] 1840 	mov	dpl,r4
      000808 8B 83            [24] 1841 	mov	dph,r3
      00080A 12r00r00         [24] 1842 	lcall	_putchar
      00080D 0D               [12] 1843 	inc	r5
                                   1844 ;	calc.c:121: printstr("\r\n");
      00080E BD 00 E7         [24] 1845 	cjne	r5,#0x00,00114$
      000811 0E               [12] 1846 	inc	r6
      000812 80 E4            [24] 1847 	sjmp	00114$
      000814                       1848 00107$:
                                   1849 ;	calc.c:123: return 1;
      000814 90 00 01         [24] 1850 	mov	dptr,#0x0001
                                   1851 ;	calc.c:124: }
      000817 85*00 81         [24] 1852 	mov	sp,_bp
      00081A D0*00            [24] 1853 	pop	_bp
      00081C 22               [24] 1854 	ret
                                   1855 ;------------------------------------------------------------
                                   1856 ;Allocation info for local variables in function 'operator'
                                   1857 ;------------------------------------------------------------
                                   1858 ;delta                     Allocated to stack - _bp -5
                                   1859 ;_ctx                      Allocated to stack - _bp +1
                                   1860 ;ctx                       Allocated to stack - _bp +18
                                   1861 ;t0                        Allocated to registers r7 r6 r5 
                                   1862 ;d0                        Allocated to stack - _bp +21
                                   1863 ;d1                        Allocated to stack - _bp +25
                                   1864 ;__1966080027              Allocated to registers 
                                   1865 ;s                         Allocated to registers r7 r6 r5 
                                   1866 ;__1966080029              Allocated to registers 
                                   1867 ;s                         Allocated to registers r7 r6 r5 
                                   1868 ;__2621440031              Allocated to registers 
                                   1869 ;s                         Allocated to registers r7 r6 r5 
                                   1870 ;__2621440033              Allocated to registers r7 r6 r5 r4 
                                   1871 ;d                         Allocated to stack - _bp +29
                                   1872 ;__1310720001              Allocated to registers 
                                   1873 ;d                         Allocated to registers r7 r6 r5 r2 
                                   1874 ;mask                      Allocated to stack - _bp +33
                                   1875 ;__2621440035              Allocated to registers 
                                   1876 ;s                         Allocated to registers r7 r6 r5 
                                   1877 ;__1966080037              Allocated to registers 
                                   1878 ;s                         Allocated to registers r7 r6 r5 
                                   1879 ;__1966080039              Allocated to registers 
                                   1880 ;s                         Allocated to registers r7 r6 r5 
                                   1881 ;__1966080041              Allocated to registers 
                                   1882 ;s                         Allocated to registers r7 r6 r5 
                                   1883 ;__1966080043              Allocated to registers 
                                   1884 ;s                         Allocated to registers r7 r6 r5 
                                   1885 ;__2621440045              Allocated to registers 
                                   1886 ;s                         Allocated to registers r7 r6 r5 
                                   1887 ;__2621440047              Allocated to registers r7 r6 r5 r4 
                                   1888 ;d                         Allocated to stack - _bp +29
                                   1889 ;__1310720001              Allocated to registers 
                                   1890 ;d                         Allocated to registers r7 r6 r5 r2 
                                   1891 ;mask                      Allocated to stack - _bp +33
                                   1892 ;__2621440049              Allocated to registers 
                                   1893 ;s                         Allocated to registers r7 r6 r5 
                                   1894 ;__1966080051              Allocated to registers 
                                   1895 ;s                         Allocated to registers r7 r6 r5 
                                   1896 ;__1966080053              Allocated to registers 
                                   1897 ;s                         Allocated to registers r7 r6 r5 
                                   1898 ;__2621440055              Allocated to registers 
                                   1899 ;s                         Allocated to registers r7 r6 r5 
                                   1900 ;__1966080057              Allocated to registers 
                                   1901 ;s                         Allocated to registers r7 r6 r5 
                                   1902 ;__3276800059              Allocated to registers 
                                   1903 ;s                         Allocated to registers r7 r6 r5 
                                   1904 ;__1966080061              Allocated to registers 
                                   1905 ;s                         Allocated to registers r7 r6 r5 
                                   1906 ;__3276800063              Allocated to registers 
                                   1907 ;s                         Allocated to registers r7 r6 r5 
                                   1908 ;__1966080065              Allocated to registers 
                                   1909 ;s                         Allocated to registers r7 r6 r5 
                                   1910 ;__1966080067              Allocated to registers 
                                   1911 ;s                         Allocated to registers r7 r6 r5 
                                   1912 ;__1966080069              Allocated to registers 
                                   1913 ;s                         Allocated to registers r7 r6 r5 
                                   1914 ;__1966080071              Allocated to registers 
                                   1915 ;s                         Allocated to registers r7 r6 r5 
                                   1916 ;__1966080073              Allocated to registers 
                                   1917 ;s                         Allocated to registers r7 r6 r5 
                                   1918 ;__3276800075              Allocated to registers 
                                   1919 ;s                         Allocated to registers r7 r6 r5 
                                   1920 ;__1966080077              Allocated to registers 
                                   1921 ;s                         Allocated to registers r7 r6 r5 
                                   1922 ;__2621440079              Allocated to registers 
                                   1923 ;s                         Allocated to registers r7 r6 r5 
                                   1924 ;__1966080081              Allocated to registers 
                                   1925 ;s                         Allocated to registers r7 r6 r5 
                                   1926 ;__2621440083              Allocated to registers 
                                   1927 ;s                         Allocated to registers r7 r6 r5 
                                   1928 ;__1966080085              Allocated to registers 
                                   1929 ;s                         Allocated to registers r7 r6 r5 
                                   1930 ;__2621440087              Allocated to registers 
                                   1931 ;s                         Allocated to registers r7 r6 r5 
                                   1932 ;__1966080089              Allocated to registers 
                                   1933 ;s                         Allocated to registers r7 r6 r5 
                                   1934 ;__2621440091              Allocated to registers 
                                   1935 ;s                         Allocated to registers r7 r6 r5 
                                   1936 ;__2621440093              Allocated to registers 
                                   1937 ;s                         Allocated to registers r7 r6 r5 
                                   1938 ;__1966080095              Allocated to registers 
                                   1939 ;s                         Allocated to registers r7 r6 r5 
                                   1940 ;__2621440097              Allocated to registers 
                                   1941 ;s                         Allocated to registers r7 r6 r5 
                                   1942 ;__2621440099              Allocated to registers 
                                   1943 ;s                         Allocated to registers r7 r6 r5 
                                   1944 ;__1966080101              Allocated to registers 
                                   1945 ;s                         Allocated to registers r5 r4 r3 
                                   1946 ;__2621440103              Allocated to registers 
                                   1947 ;s                         Allocated to registers r5 r4 r3 
                                   1948 ;__1966080105              Allocated to registers 
                                   1949 ;s                         Allocated to registers r5 r4 r3 
                                   1950 ;__2621440107              Allocated to registers 
                                   1951 ;s                         Allocated to registers r5 r4 r3 
                                   1952 ;__1966080109              Allocated to registers 
                                   1953 ;s                         Allocated to registers r5 r4 r3 
                                   1954 ;__2621440111              Allocated to registers 
                                   1955 ;s                         Allocated to registers r5 r4 r3 
                                   1956 ;__1966080113              Allocated to registers 
                                   1957 ;s                         Allocated to registers r5 r4 r3 
                                   1958 ;__2621440115              Allocated to registers 
                                   1959 ;s                         Allocated to registers r5 r4 r3 
                                   1960 ;__1966080117              Allocated to registers 
                                   1961 ;s                         Allocated to registers r5 r4 r3 
                                   1962 ;__2621440119              Allocated to registers 
                                   1963 ;s                         Allocated to registers r5 r4 r3 
                                   1964 ;__1966080121              Allocated to registers 
                                   1965 ;s                         Allocated to registers r5 r4 r3 
                                   1966 ;__2621440123              Allocated to registers 
                                   1967 ;s                         Allocated to registers r5 r4 r3 
                                   1968 ;__1966080125              Allocated to registers 
                                   1969 ;s                         Allocated to registers r5 r4 r3 
                                   1970 ;sloc0                     Allocated to stack - _bp +346
                                   1971 ;sloc1                     Allocated to stack - _bp +4
                                   1972 ;sloc2                     Allocated to stack - _bp +7
                                   1973 ;sloc3                     Allocated to stack - _bp +11
                                   1974 ;sloc4                     Allocated to stack - _bp +14
                                   1975 ;------------------------------------------------------------
                                   1976 ;	calc.c:126: static int operator(void *_ctx, delta_t *delta) __reentrant {
                                   1977 ;	-----------------------------------------
                                   1978 ;	 function operator
                                   1979 ;	-----------------------------------------
      00081D                       1980 _operator:
      00081D C0*00            [24] 1981 	push	_bp
      00081F 85 81*00         [24] 1982 	mov	_bp,sp
      000822 C0 82            [24] 1983 	push	dpl
      000824 C0 83            [24] 1984 	push	dph
      000826 C0 F0            [24] 1985 	push	b
      000828 E5 81            [12] 1986 	mov	a,sp
      00082A 24 21            [12] 1987 	add	a,#0x21
      00082C F5 81            [12] 1988 	mov	sp,a
                                   1989 ;	calc.c:127: calc_ctx_t *ctx = (calc_ctx_t *)_ctx;
      00082E A8*00            [24] 1990 	mov	r0,_bp
      000830 08               [12] 1991 	inc	r0
      000831 E5*00            [12] 1992 	mov	a,_bp
      000833 24 12            [12] 1993 	add	a,#0x12
      000835 F9               [12] 1994 	mov	r1,a
      000836 E6               [12] 1995 	mov	a,@r0
      000837 F7               [12] 1996 	mov	@r1,a
      000838 08               [12] 1997 	inc	r0
      000839 09               [12] 1998 	inc	r1
      00083A E6               [12] 1999 	mov	a,@r0
      00083B F7               [12] 2000 	mov	@r1,a
      00083C 08               [12] 2001 	inc	r0
      00083D 09               [12] 2002 	inc	r1
      00083E E6               [12] 2003 	mov	a,@r0
      00083F F7               [12] 2004 	mov	@r1,a
                                   2005 ;	calc.c:131: switch (ctx->digit[0]) {
      000840 E5*00            [12] 2006 	mov	a,_bp
      000842 24 12            [12] 2007 	add	a,#0x12
      000844 F8               [12] 2008 	mov	r0,a
      000845 74 07            [12] 2009 	mov	a,#0x07
      000847 26               [12] 2010 	add	a,@r0
      000848 FD               [12] 2011 	mov	r5,a
      000849 E4               [12] 2012 	clr	a
      00084A 08               [12] 2013 	inc	r0
      00084B 36               [12] 2014 	addc	a,@r0
      00084C FE               [12] 2015 	mov	r6,a
      00084D 08               [12] 2016 	inc	r0
      00084E 86 07            [24] 2017 	mov	ar7,@r0
      000850 8D 82            [24] 2018 	mov	dpl,r5
      000852 8E 83            [24] 2019 	mov	dph,r6
      000854 8F F0            [24] 2020 	mov	b,r7
      000856 12r00r00         [24] 2021 	lcall	__gptrget
      000859 FC               [12] 2022 	mov	r4,a
      00085A BC 23 03         [24] 2023 	cjne	r4,#0x23,01234$
      00085D 02r1Dr3A         [24] 2024 	ljmp	00189$
      000860                       2025 01234$:
      000860 BC 25 03         [24] 2026 	cjne	r4,#0x25,01235$
      000863 02r1Dr3A         [24] 2027 	ljmp	00189$
      000866                       2028 01235$:
      000866 BC 26 03         [24] 2029 	cjne	r4,#0x26,01236$
      000869 02r20r20         [24] 2030 	ljmp	00202$
      00086C                       2031 01236$:
      00086C BC 2A 03         [24] 2032 	cjne	r4,#0x2a,01237$
      00086F 02r18rAA         [24] 2033 	ljmp	00167$
      000872                       2034 01237$:
      000872 BC 2B 03         [24] 2035 	cjne	r4,#0x2b,01238$
      000875 02r15rAB         [24] 2036 	ljmp	00153$
      000878                       2037 01238$:
      000878 BC 2D 03         [24] 2038 	cjne	r4,#0x2d,01239$
      00087B 02r17r2A         [24] 2039 	ljmp	00160$
      00087E                       2040 01239$:
      00087E BC 2E 03         [24] 2041 	cjne	r4,#0x2e,01240$
      000881 02r0Br66         [24] 2042 	ljmp	00109$
      000884                       2043 01240$:
      000884 BC 2F 03         [24] 2044 	cjne	r4,#0x2f,01241$
      000887 02r1Ar50         [24] 2045 	ljmp	00175$
      00088A                       2046 01241$:
      00088A BC 3C 03         [24] 2047 	cjne	r4,#0x3c,01242$
      00088D 02r28r3B         [24] 2048 	ljmp	00237$
      000890                       2049 01242$:
      000890 BC 3E 03         [24] 2050 	cjne	r4,#0x3e,01243$
      000893 02r24rEE         [24] 2051 	ljmp	00223$
      000896                       2052 01243$:
      000896 BC 4D 03         [24] 2053 	cjne	r4,#0x4d,01244$
      000899 02r10r51         [24] 2054 	ljmp	00127$
      00089C                       2055 01244$:
      00089C BC 50 03         [24] 2056 	cjne	r4,#0x50,01245$
      00089F 02r0Dr33         [24] 2057 	ljmp	00113$
      0008A2                       2058 01245$:
      0008A2 BC 54 03         [24] 2059 	cjne	r4,#0x54,01246$
      0008A5 02r13r53         [24] 2060 	ljmp	00145$
      0008A8                       2061 01246$:
      0008A8 BC 55 03         [24] 2062 	cjne	r4,#0x55,01247$
      0008AB 02r12r6C         [24] 2063 	ljmp	00139$
      0008AE                       2064 01247$:
      0008AE BC 56 03         [24] 2065 	cjne	r4,#0x56,01248$
      0008B1 02r0ArC5         [24] 2066 	ljmp	00105$
      0008B4                       2067 01248$:
      0008B4 BC 58 03         [24] 2068 	cjne	r4,#0x58,01249$
      0008B7 02r15r0C         [24] 2069 	ljmp	00152$
      0008BA                       2070 01249$:
      0008BA BC 5C 03         [24] 2071 	cjne	r4,#0x5c,01250$
      0008BD 02r1Ar50         [24] 2072 	ljmp	00175$
      0008C0                       2073 01250$:
      0008C0 BC 5D 03         [24] 2074 	cjne	r4,#0x5d,01251$
      0008C3 02r26r8C         [24] 2075 	ljmp	00230$
      0008C6                       2076 01251$:
      0008C6 BC 5E 03         [24] 2077 	cjne	r4,#0x5e,01252$
      0008C9 02r23r54         [24] 2078 	ljmp	00216$
      0008CC                       2079 01252$:
      0008CC BC 6D 03         [24] 2080 	cjne	r4,#0x6d,01253$
      0008CF 02r0Fr1D         [24] 2081 	ljmp	00121$
      0008D2                       2082 01253$:
      0008D2 BC 70 03         [24] 2083 	cjne	r4,#0x70,01254$
      0008D5 02r0Br66         [24] 2084 	ljmp	00109$
      0008D8                       2085 01254$:
      0008D8 BC 75 03         [24] 2086 	cjne	r4,#0x75,01255$
      0008DB 02r11r85         [24] 2087 	ljmp	00133$
      0008DE                       2088 01255$:
      0008DE BC 76 02         [24] 2089 	cjne	r4,#0x76,01256$
      0008E1 80 15            [24] 2090 	sjmp	00101$
      0008E3                       2091 01256$:
      0008E3 BC 78 03         [24] 2092 	cjne	r4,#0x78,01257$
      0008E6 02r0Dr7C         [24] 2093 	ljmp	00114$
      0008E9                       2094 01257$:
      0008E9 BC 7C 03         [24] 2095 	cjne	r4,#0x7c,01258$
      0008EC 02r21rBA         [24] 2096 	ljmp	00209$
      0008EF                       2097 01258$:
      0008EF BC 7E 03         [24] 2098 	cjne	r4,#0x7e,01259$
      0008F2 02r29rDE         [24] 2099 	ljmp	00244$
      0008F5                       2100 01259$:
      0008F5 02r2ArB7         [24] 2101 	ljmp	00248$
                                   2102 ;	calc.c:132: case 'v':
      0008F8                       2103 00101$:
                                   2104 ;	calc.c:133: printstr("\r\n");
      0008F8 7Fr0F            [12] 2105 	mov	r7,#___str_2
      0008FA 7Es00            [12] 2106 	mov	r6,#(___str_2 >> 8)
      0008FC 7D 80            [12] 2107 	mov	r5,#0x80
                                   2108 ;	calc.c:51: return;
      0008FE                       2109 00353$:
                                   2110 ;	calc.c:49: for (; *s; s++) putchar(*s);
      0008FE 8F 82            [24] 2111 	mov	dpl,r7
      000900 8E 83            [24] 2112 	mov	dph,r6
      000902 8D F0            [24] 2113 	mov	b,r5
      000904 12r00r00         [24] 2114 	lcall	__gptrget
      000907 FC               [12] 2115 	mov	r4,a
      000908 60 10            [24] 2116 	jz	00251$
      00090A 7B 00            [12] 2117 	mov	r3,#0x00
      00090C 8C 82            [24] 2118 	mov	dpl,r4
      00090E 8B 83            [24] 2119 	mov	dph,r3
      000910 12r00r00         [24] 2120 	lcall	_putchar
      000913 0F               [12] 2121 	inc	r7
                                   2122 ;	calc.c:133: printstr("\r\n");
      000914 BF 00 E7         [24] 2123 	cjne	r7,#0x00,00353$
      000917 0E               [12] 2124 	inc	r6
      000918 80 E4            [24] 2125 	sjmp	00353$
      00091A                       2126 00251$:
                                   2127 ;	calc.c:134: if (!stack_peek(ctx->ps, &d0)) printstr("stack underflow\r\n");
      00091A E5*00            [12] 2128 	mov	a,_bp
      00091C 24 15            [12] 2129 	add	a,#0x15
      00091E FF               [12] 2130 	mov	r7,a
      00091F 7E 00            [12] 2131 	mov	r6,#0x00
      000921 7D 40            [12] 2132 	mov	r5,#0x40
      000923 E5*00            [12] 2133 	mov	a,_bp
      000925 24 12            [12] 2134 	add	a,#0x12
      000927 F8               [12] 2135 	mov	r0,a
      000928 74 13            [12] 2136 	mov	a,#0x13
      00092A 26               [12] 2137 	add	a,@r0
      00092B FA               [12] 2138 	mov	r2,a
      00092C ED               [12] 2139 	mov	a,r5
      00092D 08               [12] 2140 	inc	r0
      00092E 36               [12] 2141 	addc	a,@r0
      00092F FB               [12] 2142 	mov	r3,a
      000930 08               [12] 2143 	inc	r0
      000931 86 04            [24] 2144 	mov	ar4,@r0
      000933 8A 82            [24] 2145 	mov	dpl,r2
      000935 8B 83            [24] 2146 	mov	dph,r3
      000937 8C F0            [24] 2147 	mov	b,r4
      000939 12r00r00         [24] 2148 	lcall	__gptrget
      00093C FA               [12] 2149 	mov	r2,a
      00093D A3               [24] 2150 	inc	dptr
      00093E 12r00r00         [24] 2151 	lcall	__gptrget
      000941 FB               [12] 2152 	mov	r3,a
      000942 A3               [24] 2153 	inc	dptr
      000943 12r00r00         [24] 2154 	lcall	__gptrget
      000946 FC               [12] 2155 	mov	r4,a
      000947 C0 07            [24] 2156 	push	ar7
      000949 C0 06            [24] 2157 	push	ar6
      00094B C0 05            [24] 2158 	push	ar5
      00094D 8A 82            [24] 2159 	mov	dpl,r2
      00094F 8B 83            [24] 2160 	mov	dph,r3
      000951 8C F0            [24] 2161 	mov	b,r4
      000953 12r00r00         [24] 2162 	lcall	_stack_peek
      000956 AB 82            [24] 2163 	mov	r3,dpl
      000958 AC 83            [24] 2164 	mov	r4,dph
      00095A 15 81            [12] 2165 	dec	sp
      00095C 15 81            [12] 2166 	dec	sp
      00095E 15 81            [12] 2167 	dec	sp
      000960 EB               [12] 2168 	mov	a,r3
      000961 4C               [12] 2169 	orl	a,r4
      000962 70 25            [24] 2170 	jnz	00103$
      000964 7Fr12            [12] 2171 	mov	r7,#___str_3
      000966 7Es00            [12] 2172 	mov	r6,#(___str_3 >> 8)
      000968 7D 80            [12] 2173 	mov	r5,#0x80
                                   2174 ;	calc.c:51: return;
      00096A                       2175 00356$:
                                   2176 ;	calc.c:49: for (; *s; s++) putchar(*s);
      00096A 8F 82            [24] 2177 	mov	dpl,r7
      00096C 8E 83            [24] 2178 	mov	dph,r6
      00096E 8D F0            [24] 2179 	mov	b,r5
      000970 12r00r00         [24] 2180 	lcall	__gptrget
      000973 FC               [12] 2181 	mov	r4,a
      000974 70 03            [24] 2182 	jnz	01263$
      000976 02r2ArBC         [24] 2183 	ljmp	00249$
      000979                       2184 01263$:
      000979 7B 00            [12] 2185 	mov	r3,#0x00
      00097B 8C 82            [24] 2186 	mov	dpl,r4
      00097D 8B 83            [24] 2187 	mov	dph,r3
      00097F 12r00r00         [24] 2188 	lcall	_putchar
      000982 0F               [12] 2189 	inc	r7
                                   2190 ;	calc.c:134: if (!stack_peek(ctx->ps, &d0)) printstr("stack underflow\r\n");
      000983 BF 00 E4         [24] 2191 	cjne	r7,#0x00,00356$
      000986 0E               [12] 2192 	inc	r6
      000987 80 E1            [24] 2193 	sjmp	00356$
      000989                       2194 00103$:
                                   2195 ;	calc.c:136: printstr("PSVTOP\t");
      000989 7Fr36            [12] 2196 	mov	r7,#___str_7
      00098B 7Es00            [12] 2197 	mov	r6,#(___str_7 >> 8)
      00098D 7D 80            [12] 2198 	mov	r5,#0x80
                                   2199 ;	calc.c:51: return;
      00098F                       2200 00359$:
                                   2201 ;	calc.c:49: for (; *s; s++) putchar(*s);
      00098F 8F 82            [24] 2202 	mov	dpl,r7
      000991 8E 83            [24] 2203 	mov	dph,r6
      000993 8D F0            [24] 2204 	mov	b,r5
      000995 12r00r00         [24] 2205 	lcall	__gptrget
      000998 FC               [12] 2206 	mov	r4,a
      000999 60 10            [24] 2207 	jz	00255$
      00099B 7B 00            [12] 2208 	mov	r3,#0x00
      00099D 8C 82            [24] 2209 	mov	dpl,r4
      00099F 8B 83            [24] 2210 	mov	dph,r3
      0009A1 12r00r00         [24] 2211 	lcall	_putchar
      0009A4 0F               [12] 2212 	inc	r7
                                   2213 ;	calc.c:136: printstr("PSVTOP\t");
      0009A5 BF 00 E7         [24] 2214 	cjne	r7,#0x00,00359$
      0009A8 0E               [12] 2215 	inc	r6
      0009A9 80 E4            [24] 2216 	sjmp	00359$
      0009AB                       2217 00255$:
                                   2218 ;	calc.c:137: printall(d0);
      0009AB E5*00            [12] 2219 	mov	a,_bp
      0009AD 24 15            [12] 2220 	add	a,#0x15
      0009AF F8               [12] 2221 	mov	r0,a
      0009B0 86 07            [24] 2222 	mov	ar7,@r0
      0009B2 08               [12] 2223 	inc	r0
      0009B3 86 06            [24] 2224 	mov	ar6,@r0
      0009B5 08               [12] 2225 	inc	r0
      0009B6 86 05            [24] 2226 	mov	ar5,@r0
      0009B8 08               [12] 2227 	inc	r0
      0009B9 86 04            [24] 2228 	mov	ar4,@r0
      0009BB E5*00            [12] 2229 	mov	a,_bp
      0009BD 24 1D            [12] 2230 	add	a,#0x1d
      0009BF F8               [12] 2231 	mov	r0,a
      0009C0 A6 07            [24] 2232 	mov	@r0,ar7
      0009C2 08               [12] 2233 	inc	r0
      0009C3 A6 06            [24] 2234 	mov	@r0,ar6
      0009C5 08               [12] 2235 	inc	r0
      0009C6 A6 05            [24] 2236 	mov	@r0,ar5
      0009C8 08               [12] 2237 	inc	r0
      0009C9 A6 04            [24] 2238 	mov	@r0,ar4
                                   2239 ;	calc.c:64: printf("% 11ld\t", d);
      0009CB C0 07            [24] 2240 	push	ar7
      0009CD C0 06            [24] 2241 	push	ar6
      0009CF C0 05            [24] 2242 	push	ar5
      0009D1 C0 04            [24] 2243 	push	ar4
      0009D3 74r00            [12] 2244 	mov	a,#___str_0
      0009D5 C0 E0            [24] 2245 	push	acc
      0009D7 74s00            [12] 2246 	mov	a,#(___str_0 >> 8)
      0009D9 C0 E0            [24] 2247 	push	acc
      0009DB 74 80            [12] 2248 	mov	a,#0x80
      0009DD C0 E0            [24] 2249 	push	acc
      0009DF 12r00r00         [24] 2250 	lcall	_printf
      0009E2 E5 81            [12] 2251 	mov	a,sp
      0009E4 24 F9            [12] 2252 	add	a,#0xf9
      0009E6 F5 81            [12] 2253 	mov	sp,a
                                   2254 ;	calc.c:65: printf("%08lx\t", d);
      0009E8 E5*00            [12] 2255 	mov	a,_bp
      0009EA 24 1D            [12] 2256 	add	a,#0x1d
      0009EC F8               [12] 2257 	mov	r0,a
      0009ED E6               [12] 2258 	mov	a,@r0
      0009EE C0 E0            [24] 2259 	push	acc
      0009F0 08               [12] 2260 	inc	r0
      0009F1 E6               [12] 2261 	mov	a,@r0
      0009F2 C0 E0            [24] 2262 	push	acc
      0009F4 08               [12] 2263 	inc	r0
      0009F5 E6               [12] 2264 	mov	a,@r0
      0009F6 C0 E0            [24] 2265 	push	acc
      0009F8 08               [12] 2266 	inc	r0
      0009F9 E6               [12] 2267 	mov	a,@r0
      0009FA C0 E0            [24] 2268 	push	acc
      0009FC 74r08            [12] 2269 	mov	a,#___str_1
      0009FE C0 E0            [24] 2270 	push	acc
      000A00 74s00            [12] 2271 	mov	a,#(___str_1 >> 8)
      000A02 C0 E0            [24] 2272 	push	acc
      000A04 74 80            [12] 2273 	mov	a,#0x80
      000A06 C0 E0            [24] 2274 	push	acc
      000A08 12r00r00         [24] 2275 	lcall	_printf
      000A0B E5 81            [12] 2276 	mov	a,sp
      000A0D 24 F9            [12] 2277 	add	a,#0xf9
      000A0F F5 81            [12] 2278 	mov	sp,a
                                   2279 ;	calc.c:66: printbin(d);
      000A11 E5*00            [12] 2280 	mov	a,_bp
      000A13 24 1D            [12] 2281 	add	a,#0x1d
      000A15 F8               [12] 2282 	mov	r0,a
      000A16 86 07            [24] 2283 	mov	ar7,@r0
      000A18 08               [12] 2284 	inc	r0
      000A19 86 06            [24] 2285 	mov	ar6,@r0
      000A1B 08               [12] 2286 	inc	r0
      000A1C 86 05            [24] 2287 	mov	ar5,@r0
      000A1E 08               [12] 2288 	inc	r0
      000A1F 86 02            [24] 2289 	mov	ar2,@r0
                                   2290 ;	calc.c:57: for (mask = 0x80000000lu; mask; mask >>= 1)
      000A21 E5*00            [12] 2291 	mov	a,_bp
      000A23 24 21            [12] 2292 	add	a,#0x21
      000A25 F8               [12] 2293 	mov	r0,a
      000A26 E4               [12] 2294 	clr	a
      000A27 F6               [12] 2295 	mov	@r0,a
      000A28 08               [12] 2296 	inc	r0
      000A29 F6               [12] 2297 	mov	@r0,a
      000A2A 08               [12] 2298 	inc	r0
      000A2B F6               [12] 2299 	mov	@r0,a
      000A2C 08               [12] 2300 	inc	r0
      000A2D 76 80            [12] 2301 	mov	@r0,#0x80
      000A2F                       2302 00361$:
                                   2303 ;	calc.c:58: (void)putchar((d & mask) ? (int)'1' : (int)'0');
      000A2F E5*00            [12] 2304 	mov	a,_bp
      000A31 24 07            [12] 2305 	add	a,#0x07
      000A33 F8               [12] 2306 	mov	r0,a
      000A34 A6 07            [24] 2307 	mov	@r0,ar7
      000A36 08               [12] 2308 	inc	r0
      000A37 A6 06            [24] 2309 	mov	@r0,ar6
      000A39 08               [12] 2310 	inc	r0
      000A3A A6 05            [24] 2311 	mov	@r0,ar5
      000A3C 08               [12] 2312 	inc	r0
      000A3D A6 02            [24] 2313 	mov	@r0,ar2
      000A3F E5*00            [12] 2314 	mov	a,_bp
      000A41 24 07            [12] 2315 	add	a,#0x07
      000A43 F8               [12] 2316 	mov	r0,a
      000A44 E5*00            [12] 2317 	mov	a,_bp
      000A46 24 21            [12] 2318 	add	a,#0x21
      000A48 F9               [12] 2319 	mov	r1,a
      000A49 E7               [12] 2320 	mov	a,@r1
      000A4A 56               [12] 2321 	anl	a,@r0
      000A4B F6               [12] 2322 	mov	@r0,a
      000A4C 09               [12] 2323 	inc	r1
      000A4D E7               [12] 2324 	mov	a,@r1
      000A4E 08               [12] 2325 	inc	r0
      000A4F 56               [12] 2326 	anl	a,@r0
      000A50 F6               [12] 2327 	mov	@r0,a
      000A51 09               [12] 2328 	inc	r1
      000A52 E7               [12] 2329 	mov	a,@r1
      000A53 08               [12] 2330 	inc	r0
      000A54 56               [12] 2331 	anl	a,@r0
      000A55 F6               [12] 2332 	mov	@r0,a
      000A56 09               [12] 2333 	inc	r1
      000A57 E7               [12] 2334 	mov	a,@r1
      000A58 08               [12] 2335 	inc	r0
      000A59 56               [12] 2336 	anl	a,@r0
      000A5A F6               [12] 2337 	mov	@r0,a
      000A5B E5*00            [12] 2338 	mov	a,_bp
      000A5D 24 07            [12] 2339 	add	a,#0x07
      000A5F F8               [12] 2340 	mov	r0,a
      000A60 E6               [12] 2341 	mov	a,@r0
      000A61 08               [12] 2342 	inc	r0
      000A62 46               [12] 2343 	orl	a,@r0
      000A63 08               [12] 2344 	inc	r0
      000A64 46               [12] 2345 	orl	a,@r0
      000A65 08               [12] 2346 	inc	r0
      000A66 46               [12] 2347 	orl	a,@r0
      000A67 60 06            [24] 2348 	jz	00502$
      000A69 7B 31            [12] 2349 	mov	r3,#0x31
      000A6B 7C 00            [12] 2350 	mov	r4,#0x00
      000A6D 80 04            [24] 2351 	sjmp	00503$
      000A6F                       2352 00502$:
      000A6F 7B 30            [12] 2353 	mov	r3,#0x30
      000A71 7C 00            [12] 2354 	mov	r4,#0x00
      000A73                       2355 00503$:
      000A73 8B 82            [24] 2356 	mov	dpl,r3
      000A75 8C 83            [24] 2357 	mov	dph,r4
      000A77 12r00r00         [24] 2358 	lcall	_putchar
                                   2359 ;	calc.c:57: for (mask = 0x80000000lu; mask; mask >>= 1)
      000A7A E5*00            [12] 2360 	mov	a,_bp
      000A7C 24 21            [12] 2361 	add	a,#0x21
      000A7E F8               [12] 2362 	mov	r0,a
      000A7F 08               [12] 2363 	inc	r0
      000A80 08               [12] 2364 	inc	r0
      000A81 08               [12] 2365 	inc	r0
      000A82 E6               [12] 2366 	mov	a,@r0
      000A83 C3               [12] 2367 	clr	c
      000A84 13               [12] 2368 	rrc	a
      000A85 F6               [12] 2369 	mov	@r0,a
      000A86 18               [12] 2370 	dec	r0
      000A87 E6               [12] 2371 	mov	a,@r0
      000A88 13               [12] 2372 	rrc	a
      000A89 F6               [12] 2373 	mov	@r0,a
      000A8A 18               [12] 2374 	dec	r0
      000A8B E6               [12] 2375 	mov	a,@r0
      000A8C 13               [12] 2376 	rrc	a
      000A8D F6               [12] 2377 	mov	@r0,a
      000A8E 18               [12] 2378 	dec	r0
      000A8F E6               [12] 2379 	mov	a,@r0
      000A90 13               [12] 2380 	rrc	a
      000A91 F6               [12] 2381 	mov	@r0,a
      000A92 E5*00            [12] 2382 	mov	a,_bp
      000A94 24 21            [12] 2383 	add	a,#0x21
      000A96 F8               [12] 2384 	mov	r0,a
      000A97 E6               [12] 2385 	mov	a,@r0
      000A98 08               [12] 2386 	inc	r0
      000A99 46               [12] 2387 	orl	a,@r0
      000A9A 08               [12] 2388 	inc	r0
      000A9B 46               [12] 2389 	orl	a,@r0
      000A9C 08               [12] 2390 	inc	r0
      000A9D 46               [12] 2391 	orl	a,@r0
      000A9E 70 8F            [24] 2392 	jnz	00361$
                                   2393 ;	calc.c:138: printstr("\r\n");
      000AA0 7Fr0F            [12] 2394 	mov	r7,#___str_2
      000AA2 7Es00            [12] 2395 	mov	r6,#(___str_2 >> 8)
      000AA4 7D 80            [12] 2396 	mov	r5,#0x80
                                   2397 ;	calc.c:51: return;
      000AA6                       2398 00364$:
                                   2399 ;	calc.c:49: for (; *s; s++) putchar(*s);
      000AA6 8F 82            [24] 2400 	mov	dpl,r7
      000AA8 8E 83            [24] 2401 	mov	dph,r6
      000AAA 8D F0            [24] 2402 	mov	b,r5
      000AAC 12r00r00         [24] 2403 	lcall	__gptrget
      000AAF FC               [12] 2404 	mov	r4,a
      000AB0 70 03            [24] 2405 	jnz	01269$
      000AB2 02r2ArBC         [24] 2406 	ljmp	00249$
      000AB5                       2407 01269$:
      000AB5 7B 00            [12] 2408 	mov	r3,#0x00
      000AB7 8C 82            [24] 2409 	mov	dpl,r4
      000AB9 8B 83            [24] 2410 	mov	dph,r3
      000ABB 12r00r00         [24] 2411 	lcall	_putchar
      000ABE 0F               [12] 2412 	inc	r7
                                   2413 ;	calc.c:141: case 'V':
      000ABF BF 00 E4         [24] 2414 	cjne	r7,#0x00,00364$
      000AC2 0E               [12] 2415 	inc	r6
      000AC3 80 E1            [24] 2416 	sjmp	00364$
      000AC5                       2417 00105$:
                                   2418 ;	calc.c:142: printstr("\r\n");
      000AC5 7Fr0F            [12] 2419 	mov	r7,#___str_2
      000AC7 7Es00            [12] 2420 	mov	r6,#(___str_2 >> 8)
      000AC9 7D 80            [12] 2421 	mov	r5,#0x80
                                   2422 ;	calc.c:51: return;
      000ACB                       2423 00367$:
                                   2424 ;	calc.c:49: for (; *s; s++) putchar(*s);
      000ACB 8F 82            [24] 2425 	mov	dpl,r7
      000ACD 8E 83            [24] 2426 	mov	dph,r6
      000ACF 8D F0            [24] 2427 	mov	b,r5
      000AD1 12r00r00         [24] 2428 	lcall	__gptrget
      000AD4 FC               [12] 2429 	mov	r4,a
      000AD5 60 10            [24] 2430 	jz	00262$
      000AD7 7B 00            [12] 2431 	mov	r3,#0x00
      000AD9 8C 82            [24] 2432 	mov	dpl,r4
      000ADB 8B 83            [24] 2433 	mov	dph,r3
      000ADD 12r00r00         [24] 2434 	lcall	_putchar
      000AE0 0F               [12] 2435 	inc	r7
                                   2436 ;	calc.c:142: printstr("\r\n");
      000AE1 BF 00 E7         [24] 2437 	cjne	r7,#0x00,00367$
      000AE4 0E               [12] 2438 	inc	r6
      000AE5 80 E4            [24] 2439 	sjmp	00367$
      000AE7                       2440 00262$:
                                   2441 ;	calc.c:143: if (!stack_iter_peek(ctx->ps, dump_peek, ctx)) printstr("stack underflow\r\n");
      000AE7 E5*00            [12] 2442 	mov	a,_bp
      000AE9 24 12            [12] 2443 	add	a,#0x12
      000AEB F8               [12] 2444 	mov	r0,a
      000AEC 86 07            [24] 2445 	mov	ar7,@r0
      000AEE 08               [12] 2446 	inc	r0
      000AEF 86 06            [24] 2447 	mov	ar6,@r0
      000AF1 08               [12] 2448 	inc	r0
      000AF2 86 05            [24] 2449 	mov	ar5,@r0
      000AF4 E5*00            [12] 2450 	mov	a,_bp
      000AF6 24 12            [12] 2451 	add	a,#0x12
      000AF8 F8               [12] 2452 	mov	r0,a
      000AF9 74 13            [12] 2453 	mov	a,#0x13
      000AFB 26               [12] 2454 	add	a,@r0
      000AFC FA               [12] 2455 	mov	r2,a
      000AFD 74 40            [12] 2456 	mov	a,#0x40
      000AFF 08               [12] 2457 	inc	r0
      000B00 36               [12] 2458 	addc	a,@r0
      000B01 FB               [12] 2459 	mov	r3,a
      000B02 08               [12] 2460 	inc	r0
      000B03 86 04            [24] 2461 	mov	ar4,@r0
      000B05 8A 82            [24] 2462 	mov	dpl,r2
      000B07 8B 83            [24] 2463 	mov	dph,r3
      000B09 8C F0            [24] 2464 	mov	b,r4
      000B0B 12r00r00         [24] 2465 	lcall	__gptrget
      000B0E FA               [12] 2466 	mov	r2,a
      000B0F A3               [24] 2467 	inc	dptr
      000B10 12r00r00         [24] 2468 	lcall	__gptrget
      000B13 FB               [12] 2469 	mov	r3,a
      000B14 A3               [24] 2470 	inc	dptr
      000B15 12r00r00         [24] 2471 	lcall	__gptrget
      000B18 FC               [12] 2472 	mov	r4,a
      000B19 C0 07            [24] 2473 	push	ar7
      000B1B C0 06            [24] 2474 	push	ar6
      000B1D C0 05            [24] 2475 	push	ar5
      000B1F 74rE1            [12] 2476 	mov	a,#_dump_peek
      000B21 C0 E0            [24] 2477 	push	acc
      000B23 74s06            [12] 2478 	mov	a,#(_dump_peek >> 8)
      000B25 C0 E0            [24] 2479 	push	acc
      000B27 8A 82            [24] 2480 	mov	dpl,r2
      000B29 8B 83            [24] 2481 	mov	dph,r3
      000B2B 8C F0            [24] 2482 	mov	b,r4
      000B2D 12r00r00         [24] 2483 	lcall	_stack_iter_peek
      000B30 AB 82            [24] 2484 	mov	r3,dpl
      000B32 AC 83            [24] 2485 	mov	r4,dph
      000B34 E5 81            [12] 2486 	mov	a,sp
      000B36 24 FB            [12] 2487 	add	a,#0xfb
      000B38 F5 81            [12] 2488 	mov	sp,a
      000B3A EB               [12] 2489 	mov	a,r3
      000B3B 4C               [12] 2490 	orl	a,r4
      000B3C 60 03            [24] 2491 	jz	01273$
      000B3E 02r2ArBC         [24] 2492 	ljmp	00249$
      000B41                       2493 01273$:
      000B41 7Fr12            [12] 2494 	mov	r7,#___str_3
      000B43 7Es00            [12] 2495 	mov	r6,#(___str_3 >> 8)
      000B45 7D 80            [12] 2496 	mov	r5,#0x80
                                   2497 ;	calc.c:51: return;
      000B47                       2498 00370$:
                                   2499 ;	calc.c:49: for (; *s; s++) putchar(*s);
      000B47 8F 82            [24] 2500 	mov	dpl,r7
      000B49 8E 83            [24] 2501 	mov	dph,r6
      000B4B 8D F0            [24] 2502 	mov	b,r5
      000B4D 12r00r00         [24] 2503 	lcall	__gptrget
      000B50 FC               [12] 2504 	mov	r4,a
      000B51 70 03            [24] 2505 	jnz	01274$
      000B53 02r2ArBC         [24] 2506 	ljmp	00249$
      000B56                       2507 01274$:
      000B56 7B 00            [12] 2508 	mov	r3,#0x00
      000B58 8C 82            [24] 2509 	mov	dpl,r4
      000B5A 8B 83            [24] 2510 	mov	dph,r3
      000B5C 12r00r00         [24] 2511 	lcall	_putchar
      000B5F 0F               [12] 2512 	inc	r7
                                   2513 ;	calc.c:146: case 'p':
      000B60 BF 00 E4         [24] 2514 	cjne	r7,#0x00,00370$
      000B63 0E               [12] 2515 	inc	r6
      000B64 80 E1            [24] 2516 	sjmp	00370$
      000B66                       2517 00109$:
                                   2518 ;	calc.c:147: printstr("\r\n");
      000B66 7Fr0F            [12] 2519 	mov	r7,#___str_2
      000B68 7Es00            [12] 2520 	mov	r6,#(___str_2 >> 8)
      000B6A 7D 80            [12] 2521 	mov	r5,#0x80
                                   2522 ;	calc.c:51: return;
      000B6C                       2523 00373$:
                                   2524 ;	calc.c:49: for (; *s; s++) putchar(*s);
      000B6C 8F 82            [24] 2525 	mov	dpl,r7
      000B6E 8E 83            [24] 2526 	mov	dph,r6
      000B70 8D F0            [24] 2527 	mov	b,r5
      000B72 12r00r00         [24] 2528 	lcall	__gptrget
      000B75 FC               [12] 2529 	mov	r4,a
      000B76 60 10            [24] 2530 	jz	00266$
      000B78 7B 00            [12] 2531 	mov	r3,#0x00
      000B7A 8C 82            [24] 2532 	mov	dpl,r4
      000B7C 8B 83            [24] 2533 	mov	dph,r3
      000B7E 12r00r00         [24] 2534 	lcall	_putchar
      000B81 0F               [12] 2535 	inc	r7
                                   2536 ;	calc.c:147: printstr("\r\n");
      000B82 BF 00 E7         [24] 2537 	cjne	r7,#0x00,00373$
      000B85 0E               [12] 2538 	inc	r6
      000B86 80 E4            [24] 2539 	sjmp	00373$
      000B88                       2540 00266$:
                                   2541 ;	calc.c:148: if (!stack_pop(ctx->ps, &d0)) printstr("stack underflow\r\n");
      000B88 E5*00            [12] 2542 	mov	a,_bp
      000B8A 24 15            [12] 2543 	add	a,#0x15
      000B8C FF               [12] 2544 	mov	r7,a
      000B8D 7E 00            [12] 2545 	mov	r6,#0x00
      000B8F 7D 40            [12] 2546 	mov	r5,#0x40
      000B91 E5*00            [12] 2547 	mov	a,_bp
      000B93 24 12            [12] 2548 	add	a,#0x12
      000B95 F8               [12] 2549 	mov	r0,a
      000B96 74 13            [12] 2550 	mov	a,#0x13
      000B98 26               [12] 2551 	add	a,@r0
      000B99 FA               [12] 2552 	mov	r2,a
      000B9A ED               [12] 2553 	mov	a,r5
      000B9B 08               [12] 2554 	inc	r0
      000B9C 36               [12] 2555 	addc	a,@r0
      000B9D FB               [12] 2556 	mov	r3,a
      000B9E 08               [12] 2557 	inc	r0
      000B9F 86 04            [24] 2558 	mov	ar4,@r0
      000BA1 8A 82            [24] 2559 	mov	dpl,r2
      000BA3 8B 83            [24] 2560 	mov	dph,r3
      000BA5 8C F0            [24] 2561 	mov	b,r4
      000BA7 12r00r00         [24] 2562 	lcall	__gptrget
      000BAA FA               [12] 2563 	mov	r2,a
      000BAB A3               [24] 2564 	inc	dptr
      000BAC 12r00r00         [24] 2565 	lcall	__gptrget
      000BAF FB               [12] 2566 	mov	r3,a
      000BB0 A3               [24] 2567 	inc	dptr
      000BB1 12r00r00         [24] 2568 	lcall	__gptrget
      000BB4 FC               [12] 2569 	mov	r4,a
      000BB5 C0 07            [24] 2570 	push	ar7
      000BB7 C0 06            [24] 2571 	push	ar6
      000BB9 C0 05            [24] 2572 	push	ar5
      000BBB 8A 82            [24] 2573 	mov	dpl,r2
      000BBD 8B 83            [24] 2574 	mov	dph,r3
      000BBF 8C F0            [24] 2575 	mov	b,r4
      000BC1 12r00r00         [24] 2576 	lcall	_stack_pop
      000BC4 AB 82            [24] 2577 	mov	r3,dpl
      000BC6 AC 83            [24] 2578 	mov	r4,dph
      000BC8 15 81            [12] 2579 	dec	sp
      000BCA 15 81            [12] 2580 	dec	sp
      000BCC 15 81            [12] 2581 	dec	sp
      000BCE EB               [12] 2582 	mov	a,r3
      000BCF 4C               [12] 2583 	orl	a,r4
      000BD0 70 25            [24] 2584 	jnz	00111$
      000BD2 7Fr12            [12] 2585 	mov	r7,#___str_3
      000BD4 7Es00            [12] 2586 	mov	r6,#(___str_3 >> 8)
      000BD6 7D 80            [12] 2587 	mov	r5,#0x80
                                   2588 ;	calc.c:51: return;
      000BD8                       2589 00376$:
                                   2590 ;	calc.c:49: for (; *s; s++) putchar(*s);
      000BD8 8F 82            [24] 2591 	mov	dpl,r7
      000BDA 8E 83            [24] 2592 	mov	dph,r6
      000BDC 8D F0            [24] 2593 	mov	b,r5
      000BDE 12r00r00         [24] 2594 	lcall	__gptrget
      000BE1 FC               [12] 2595 	mov	r4,a
      000BE2 70 03            [24] 2596 	jnz	01279$
      000BE4 02r2ArBC         [24] 2597 	ljmp	00249$
      000BE7                       2598 01279$:
      000BE7 7B 00            [12] 2599 	mov	r3,#0x00
      000BE9 8C 82            [24] 2600 	mov	dpl,r4
      000BEB 8B 83            [24] 2601 	mov	dph,r3
      000BED 12r00r00         [24] 2602 	lcall	_putchar
      000BF0 0F               [12] 2603 	inc	r7
                                   2604 ;	calc.c:148: if (!stack_pop(ctx->ps, &d0)) printstr("stack underflow\r\n");
      000BF1 BF 00 E4         [24] 2605 	cjne	r7,#0x00,00376$
      000BF4 0E               [12] 2606 	inc	r6
      000BF5 80 E1            [24] 2607 	sjmp	00376$
      000BF7                       2608 00111$:
                                   2609 ;	calc.c:150: printstr("PSPTOP\t");
      000BF7 7Fr3E            [12] 2610 	mov	r7,#___str_8
      000BF9 7Es00            [12] 2611 	mov	r6,#(___str_8 >> 8)
      000BFB 7D 80            [12] 2612 	mov	r5,#0x80
                                   2613 ;	calc.c:51: return;
      000BFD                       2614 00379$:
                                   2615 ;	calc.c:49: for (; *s; s++) putchar(*s);
      000BFD 8F 82            [24] 2616 	mov	dpl,r7
      000BFF 8E 83            [24] 2617 	mov	dph,r6
      000C01 8D F0            [24] 2618 	mov	b,r5
      000C03 12r00r00         [24] 2619 	lcall	__gptrget
      000C06 FC               [12] 2620 	mov	r4,a
      000C07 60 10            [24] 2621 	jz	00270$
      000C09 7B 00            [12] 2622 	mov	r3,#0x00
      000C0B 8C 82            [24] 2623 	mov	dpl,r4
      000C0D 8B 83            [24] 2624 	mov	dph,r3
      000C0F 12r00r00         [24] 2625 	lcall	_putchar
      000C12 0F               [12] 2626 	inc	r7
                                   2627 ;	calc.c:150: printstr("PSPTOP\t");
      000C13 BF 00 E7         [24] 2628 	cjne	r7,#0x00,00379$
      000C16 0E               [12] 2629 	inc	r6
      000C17 80 E4            [24] 2630 	sjmp	00379$
      000C19                       2631 00270$:
                                   2632 ;	calc.c:151: printall(d0);
      000C19 E5*00            [12] 2633 	mov	a,_bp
      000C1B 24 15            [12] 2634 	add	a,#0x15
      000C1D F8               [12] 2635 	mov	r0,a
      000C1E 86 07            [24] 2636 	mov	ar7,@r0
      000C20 08               [12] 2637 	inc	r0
      000C21 86 06            [24] 2638 	mov	ar6,@r0
      000C23 08               [12] 2639 	inc	r0
      000C24 86 05            [24] 2640 	mov	ar5,@r0
      000C26 08               [12] 2641 	inc	r0
      000C27 86 04            [24] 2642 	mov	ar4,@r0
      000C29 E5*00            [12] 2643 	mov	a,_bp
      000C2B 24 1D            [12] 2644 	add	a,#0x1d
      000C2D F8               [12] 2645 	mov	r0,a
      000C2E A6 07            [24] 2646 	mov	@r0,ar7
      000C30 08               [12] 2647 	inc	r0
      000C31 A6 06            [24] 2648 	mov	@r0,ar6
      000C33 08               [12] 2649 	inc	r0
      000C34 A6 05            [24] 2650 	mov	@r0,ar5
      000C36 08               [12] 2651 	inc	r0
      000C37 A6 04            [24] 2652 	mov	@r0,ar4
                                   2653 ;	calc.c:64: printf("% 11ld\t", d);
      000C39 C0 07            [24] 2654 	push	ar7
      000C3B C0 06            [24] 2655 	push	ar6
      000C3D C0 05            [24] 2656 	push	ar5
      000C3F C0 04            [24] 2657 	push	ar4
      000C41 74r00            [12] 2658 	mov	a,#___str_0
      000C43 C0 E0            [24] 2659 	push	acc
      000C45 74s00            [12] 2660 	mov	a,#(___str_0 >> 8)
      000C47 C0 E0            [24] 2661 	push	acc
      000C49 74 80            [12] 2662 	mov	a,#0x80
      000C4B C0 E0            [24] 2663 	push	acc
      000C4D 12r00r00         [24] 2664 	lcall	_printf
      000C50 E5 81            [12] 2665 	mov	a,sp
      000C52 24 F9            [12] 2666 	add	a,#0xf9
      000C54 F5 81            [12] 2667 	mov	sp,a
                                   2668 ;	calc.c:65: printf("%08lx\t", d);
      000C56 E5*00            [12] 2669 	mov	a,_bp
      000C58 24 1D            [12] 2670 	add	a,#0x1d
      000C5A F8               [12] 2671 	mov	r0,a
      000C5B E6               [12] 2672 	mov	a,@r0
      000C5C C0 E0            [24] 2673 	push	acc
      000C5E 08               [12] 2674 	inc	r0
      000C5F E6               [12] 2675 	mov	a,@r0
      000C60 C0 E0            [24] 2676 	push	acc
      000C62 08               [12] 2677 	inc	r0
      000C63 E6               [12] 2678 	mov	a,@r0
      000C64 C0 E0            [24] 2679 	push	acc
      000C66 08               [12] 2680 	inc	r0
      000C67 E6               [12] 2681 	mov	a,@r0
      000C68 C0 E0            [24] 2682 	push	acc
      000C6A 74r08            [12] 2683 	mov	a,#___str_1
      000C6C C0 E0            [24] 2684 	push	acc
      000C6E 74s00            [12] 2685 	mov	a,#(___str_1 >> 8)
      000C70 C0 E0            [24] 2686 	push	acc
      000C72 74 80            [12] 2687 	mov	a,#0x80
      000C74 C0 E0            [24] 2688 	push	acc
      000C76 12r00r00         [24] 2689 	lcall	_printf
      000C79 E5 81            [12] 2690 	mov	a,sp
      000C7B 24 F9            [12] 2691 	add	a,#0xf9
      000C7D F5 81            [12] 2692 	mov	sp,a
                                   2693 ;	calc.c:66: printbin(d);
      000C7F E5*00            [12] 2694 	mov	a,_bp
      000C81 24 1D            [12] 2695 	add	a,#0x1d
      000C83 F8               [12] 2696 	mov	r0,a
      000C84 86 07            [24] 2697 	mov	ar7,@r0
      000C86 08               [12] 2698 	inc	r0
      000C87 86 06            [24] 2699 	mov	ar6,@r0
      000C89 08               [12] 2700 	inc	r0
      000C8A 86 05            [24] 2701 	mov	ar5,@r0
      000C8C 08               [12] 2702 	inc	r0
      000C8D 86 02            [24] 2703 	mov	ar2,@r0
                                   2704 ;	calc.c:57: for (mask = 0x80000000lu; mask; mask >>= 1)
      000C8F E5*00            [12] 2705 	mov	a,_bp
      000C91 24 21            [12] 2706 	add	a,#0x21
      000C93 F8               [12] 2707 	mov	r0,a
      000C94 E4               [12] 2708 	clr	a
      000C95 F6               [12] 2709 	mov	@r0,a
      000C96 08               [12] 2710 	inc	r0
      000C97 F6               [12] 2711 	mov	@r0,a
      000C98 08               [12] 2712 	inc	r0
      000C99 F6               [12] 2713 	mov	@r0,a
      000C9A 08               [12] 2714 	inc	r0
      000C9B 76 80            [12] 2715 	mov	@r0,#0x80
      000C9D                       2716 00381$:
                                   2717 ;	calc.c:58: (void)putchar((d & mask) ? (int)'1' : (int)'0');
      000C9D E5*00            [12] 2718 	mov	a,_bp
      000C9F 24 07            [12] 2719 	add	a,#0x07
      000CA1 F8               [12] 2720 	mov	r0,a
      000CA2 A6 07            [24] 2721 	mov	@r0,ar7
      000CA4 08               [12] 2722 	inc	r0
      000CA5 A6 06            [24] 2723 	mov	@r0,ar6
      000CA7 08               [12] 2724 	inc	r0
      000CA8 A6 05            [24] 2725 	mov	@r0,ar5
      000CAA 08               [12] 2726 	inc	r0
      000CAB A6 02            [24] 2727 	mov	@r0,ar2
      000CAD E5*00            [12] 2728 	mov	a,_bp
      000CAF 24 07            [12] 2729 	add	a,#0x07
      000CB1 F8               [12] 2730 	mov	r0,a
      000CB2 E5*00            [12] 2731 	mov	a,_bp
      000CB4 24 21            [12] 2732 	add	a,#0x21
      000CB6 F9               [12] 2733 	mov	r1,a
      000CB7 E7               [12] 2734 	mov	a,@r1
      000CB8 56               [12] 2735 	anl	a,@r0
      000CB9 F6               [12] 2736 	mov	@r0,a
      000CBA 09               [12] 2737 	inc	r1
      000CBB E7               [12] 2738 	mov	a,@r1
      000CBC 08               [12] 2739 	inc	r0
      000CBD 56               [12] 2740 	anl	a,@r0
      000CBE F6               [12] 2741 	mov	@r0,a
      000CBF 09               [12] 2742 	inc	r1
      000CC0 E7               [12] 2743 	mov	a,@r1
      000CC1 08               [12] 2744 	inc	r0
      000CC2 56               [12] 2745 	anl	a,@r0
      000CC3 F6               [12] 2746 	mov	@r0,a
      000CC4 09               [12] 2747 	inc	r1
      000CC5 E7               [12] 2748 	mov	a,@r1
      000CC6 08               [12] 2749 	inc	r0
      000CC7 56               [12] 2750 	anl	a,@r0
      000CC8 F6               [12] 2751 	mov	@r0,a
      000CC9 E5*00            [12] 2752 	mov	a,_bp
      000CCB 24 07            [12] 2753 	add	a,#0x07
      000CCD F8               [12] 2754 	mov	r0,a
      000CCE E6               [12] 2755 	mov	a,@r0
      000CCF 08               [12] 2756 	inc	r0
      000CD0 46               [12] 2757 	orl	a,@r0
      000CD1 08               [12] 2758 	inc	r0
      000CD2 46               [12] 2759 	orl	a,@r0
      000CD3 08               [12] 2760 	inc	r0
      000CD4 46               [12] 2761 	orl	a,@r0
      000CD5 60 06            [24] 2762 	jz	00504$
      000CD7 7B 31            [12] 2763 	mov	r3,#0x31
      000CD9 7C 00            [12] 2764 	mov	r4,#0x00
      000CDB 80 04            [24] 2765 	sjmp	00505$
      000CDD                       2766 00504$:
      000CDD 7B 30            [12] 2767 	mov	r3,#0x30
      000CDF 7C 00            [12] 2768 	mov	r4,#0x00
      000CE1                       2769 00505$:
      000CE1 8B 82            [24] 2770 	mov	dpl,r3
      000CE3 8C 83            [24] 2771 	mov	dph,r4
      000CE5 12r00r00         [24] 2772 	lcall	_putchar
                                   2773 ;	calc.c:57: for (mask = 0x80000000lu; mask; mask >>= 1)
      000CE8 E5*00            [12] 2774 	mov	a,_bp
      000CEA 24 21            [12] 2775 	add	a,#0x21
      000CEC F8               [12] 2776 	mov	r0,a
      000CED 08               [12] 2777 	inc	r0
      000CEE 08               [12] 2778 	inc	r0
      000CEF 08               [12] 2779 	inc	r0
      000CF0 E6               [12] 2780 	mov	a,@r0
      000CF1 C3               [12] 2781 	clr	c
      000CF2 13               [12] 2782 	rrc	a
      000CF3 F6               [12] 2783 	mov	@r0,a
      000CF4 18               [12] 2784 	dec	r0
      000CF5 E6               [12] 2785 	mov	a,@r0
      000CF6 13               [12] 2786 	rrc	a
      000CF7 F6               [12] 2787 	mov	@r0,a
      000CF8 18               [12] 2788 	dec	r0
      000CF9 E6               [12] 2789 	mov	a,@r0
      000CFA 13               [12] 2790 	rrc	a
      000CFB F6               [12] 2791 	mov	@r0,a
      000CFC 18               [12] 2792 	dec	r0
      000CFD E6               [12] 2793 	mov	a,@r0
      000CFE 13               [12] 2794 	rrc	a
      000CFF F6               [12] 2795 	mov	@r0,a
      000D00 E5*00            [12] 2796 	mov	a,_bp
      000D02 24 21            [12] 2797 	add	a,#0x21
      000D04 F8               [12] 2798 	mov	r0,a
      000D05 E6               [12] 2799 	mov	a,@r0
      000D06 08               [12] 2800 	inc	r0
      000D07 46               [12] 2801 	orl	a,@r0
      000D08 08               [12] 2802 	inc	r0
      000D09 46               [12] 2803 	orl	a,@r0
      000D0A 08               [12] 2804 	inc	r0
      000D0B 46               [12] 2805 	orl	a,@r0
      000D0C 70 8F            [24] 2806 	jnz	00381$
                                   2807 ;	calc.c:152: printstr("\r\n");
      000D0E 7Fr0F            [12] 2808 	mov	r7,#___str_2
      000D10 7Es00            [12] 2809 	mov	r6,#(___str_2 >> 8)
      000D12 7D 80            [12] 2810 	mov	r5,#0x80
                                   2811 ;	calc.c:51: return;
      000D14                       2812 00384$:
                                   2813 ;	calc.c:49: for (; *s; s++) putchar(*s);
      000D14 8F 82            [24] 2814 	mov	dpl,r7
      000D16 8E 83            [24] 2815 	mov	dph,r6
      000D18 8D F0            [24] 2816 	mov	b,r5
      000D1A 12r00r00         [24] 2817 	lcall	__gptrget
      000D1D FC               [12] 2818 	mov	r4,a
      000D1E 70 03            [24] 2819 	jnz	01285$
      000D20 02r2ArBC         [24] 2820 	ljmp	00249$
      000D23                       2821 01285$:
      000D23 7B 00            [12] 2822 	mov	r3,#0x00
      000D25 8C 82            [24] 2823 	mov	dpl,r4
      000D27 8B 83            [24] 2824 	mov	dph,r3
      000D29 12r00r00         [24] 2825 	lcall	_putchar
      000D2C 0F               [12] 2826 	inc	r7
                                   2827 ;	calc.c:155: case 'P':
      000D2D BF 00 E4         [24] 2828 	cjne	r7,#0x00,00384$
      000D30 0E               [12] 2829 	inc	r6
      000D31 80 E1            [24] 2830 	sjmp	00384$
      000D33                       2831 00113$:
                                   2832 ;	calc.c:156: printstr("\r\n");
      000D33 7Fr0F            [12] 2833 	mov	r7,#___str_2
      000D35 7Es00            [12] 2834 	mov	r6,#(___str_2 >> 8)
      000D37 7D 80            [12] 2835 	mov	r5,#0x80
                                   2836 ;	calc.c:51: return;
      000D39                       2837 00387$:
                                   2838 ;	calc.c:49: for (; *s; s++) putchar(*s);
      000D39 8F 82            [24] 2839 	mov	dpl,r7
      000D3B 8E 83            [24] 2840 	mov	dph,r6
      000D3D 8D F0            [24] 2841 	mov	b,r5
      000D3F 12r00r00         [24] 2842 	lcall	__gptrget
      000D42 FC               [12] 2843 	mov	r4,a
      000D43 60 10            [24] 2844 	jz	00277$
      000D45 7B 00            [12] 2845 	mov	r3,#0x00
      000D47 8C 82            [24] 2846 	mov	dpl,r4
      000D49 8B 83            [24] 2847 	mov	dph,r3
      000D4B 12r00r00         [24] 2848 	lcall	_putchar
      000D4E 0F               [12] 2849 	inc	r7
                                   2850 ;	calc.c:156: printstr("\r\n");
      000D4F BF 00 E7         [24] 2851 	cjne	r7,#0x00,00387$
      000D52 0E               [12] 2852 	inc	r6
      000D53 80 E4            [24] 2853 	sjmp	00387$
      000D55                       2854 00277$:
                                   2855 ;	calc.c:157: (void)dump_pop(_ctx, delta);
      000D55 E5*00            [12] 2856 	mov	a,_bp
      000D57 24 FB            [12] 2857 	add	a,#0xfb
      000D59 F8               [12] 2858 	mov	r0,a
      000D5A E6               [12] 2859 	mov	a,@r0
      000D5B C0 E0            [24] 2860 	push	acc
      000D5D 08               [12] 2861 	inc	r0
      000D5E E6               [12] 2862 	mov	a,@r0
      000D5F C0 E0            [24] 2863 	push	acc
      000D61 08               [12] 2864 	inc	r0
      000D62 E6               [12] 2865 	mov	a,@r0
      000D63 C0 E0            [24] 2866 	push	acc
      000D65 A8*00            [24] 2867 	mov	r0,_bp
      000D67 08               [12] 2868 	inc	r0
      000D68 86 82            [24] 2869 	mov	dpl,@r0
      000D6A 08               [12] 2870 	inc	r0
      000D6B 86 83            [24] 2871 	mov	dph,@r0
      000D6D 08               [12] 2872 	inc	r0
      000D6E 86 F0            [24] 2873 	mov	b,@r0
      000D70 12r01r93         [24] 2874 	lcall	_dump_pop
      000D73 15 81            [12] 2875 	dec	sp
      000D75 15 81            [12] 2876 	dec	sp
      000D77 15 81            [12] 2877 	dec	sp
                                   2878 ;	calc.c:158: break;
      000D79 02r2ArBC         [24] 2879 	ljmp	00249$
                                   2880 ;	calc.c:159: case 'x':
      000D7C                       2881 00114$:
                                   2882 ;	calc.c:160: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      000D7C E5*00            [12] 2883 	mov	a,_bp
      000D7E 24 15            [12] 2884 	add	a,#0x15
      000D80 FF               [12] 2885 	mov	r7,a
      000D81 7E 00            [12] 2886 	mov	r6,#0x00
      000D83 7D 40            [12] 2887 	mov	r5,#0x40
      000D85 E5*00            [12] 2888 	mov	a,_bp
      000D87 24 12            [12] 2889 	add	a,#0x12
      000D89 F8               [12] 2890 	mov	r0,a
      000D8A E5*00            [12] 2891 	mov	a,_bp
      000D8C 24 07            [12] 2892 	add	a,#0x07
      000D8E F9               [12] 2893 	mov	r1,a
      000D8F 74 13            [12] 2894 	mov	a,#0x13
      000D91 26               [12] 2895 	add	a,@r0
      000D92 F7               [12] 2896 	mov	@r1,a
      000D93 74 40            [12] 2897 	mov	a,#0x40
      000D95 08               [12] 2898 	inc	r0
      000D96 36               [12] 2899 	addc	a,@r0
      000D97 09               [12] 2900 	inc	r1
      000D98 F7               [12] 2901 	mov	@r1,a
      000D99 08               [12] 2902 	inc	r0
      000D9A 09               [12] 2903 	inc	r1
      000D9B E6               [12] 2904 	mov	a,@r0
      000D9C F7               [12] 2905 	mov	@r1,a
      000D9D E5*00            [12] 2906 	mov	a,_bp
      000D9F 24 07            [12] 2907 	add	a,#0x07
      000DA1 F8               [12] 2908 	mov	r0,a
      000DA2 86 82            [24] 2909 	mov	dpl,@r0
      000DA4 08               [12] 2910 	inc	r0
      000DA5 86 83            [24] 2911 	mov	dph,@r0
      000DA7 08               [12] 2912 	inc	r0
      000DA8 86 F0            [24] 2913 	mov	b,@r0
      000DAA 12r00r00         [24] 2914 	lcall	__gptrget
      000DAD FA               [12] 2915 	mov	r2,a
      000DAE A3               [24] 2916 	inc	dptr
      000DAF 12r00r00         [24] 2917 	lcall	__gptrget
      000DB2 FB               [12] 2918 	mov	r3,a
      000DB3 A3               [24] 2919 	inc	dptr
      000DB4 12r00r00         [24] 2920 	lcall	__gptrget
      000DB7 FC               [12] 2921 	mov	r4,a
      000DB8 C0 07            [24] 2922 	push	ar7
      000DBA C0 06            [24] 2923 	push	ar6
      000DBC C0 05            [24] 2924 	push	ar5
      000DBE 8A 82            [24] 2925 	mov	dpl,r2
      000DC0 8B 83            [24] 2926 	mov	dph,r3
      000DC2 8C F0            [24] 2927 	mov	b,r4
      000DC4 12r00r00         [24] 2928 	lcall	_stack_pop
      000DC7 AB 82            [24] 2929 	mov	r3,dpl
      000DC9 AC 83            [24] 2930 	mov	r4,dph
      000DCB 15 81            [12] 2931 	dec	sp
      000DCD 15 81            [12] 2932 	dec	sp
      000DCF 15 81            [12] 2933 	dec	sp
      000DD1 EB               [12] 2934 	mov	a,r3
      000DD2 4C               [12] 2935 	orl	a,r4
      000DD3 70 25            [24] 2936 	jnz	00119$
      000DD5 7Fr46            [12] 2937 	mov	r7,#___str_9
      000DD7 7Es00            [12] 2938 	mov	r6,#(___str_9 >> 8)
      000DD9 7D 80            [12] 2939 	mov	r5,#0x80
                                   2940 ;	calc.c:51: return;
      000DDB                       2941 00390$:
                                   2942 ;	calc.c:49: for (; *s; s++) putchar(*s);
      000DDB 8F 82            [24] 2943 	mov	dpl,r7
      000DDD 8E 83            [24] 2944 	mov	dph,r6
      000DDF 8D F0            [24] 2945 	mov	b,r5
      000DE1 12r00r00         [24] 2946 	lcall	__gptrget
      000DE4 FC               [12] 2947 	mov	r4,a
      000DE5 70 03            [24] 2948 	jnz	01290$
      000DE7 02r2ArBC         [24] 2949 	ljmp	00249$
      000DEA                       2950 01290$:
      000DEA 7B 00            [12] 2951 	mov	r3,#0x00
      000DEC 8C 82            [24] 2952 	mov	dpl,r4
      000DEE 8B 83            [24] 2953 	mov	dph,r3
      000DF0 12r00r00         [24] 2954 	lcall	_putchar
      000DF3 0F               [12] 2955 	inc	r7
                                   2956 ;	calc.c:160: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      000DF4 BF 00 E4         [24] 2957 	cjne	r7,#0x00,00390$
      000DF7 0E               [12] 2958 	inc	r6
      000DF8 80 E1            [24] 2959 	sjmp	00390$
      000DFA                       2960 00119$:
                                   2961 ;	calc.c:161: else if (!stack_pop(ctx->ps, &d1)) {
      000DFA E5*00            [12] 2962 	mov	a,_bp
      000DFC 24 19            [12] 2963 	add	a,#0x19
      000DFE FF               [12] 2964 	mov	r7,a
      000DFF 7E 00            [12] 2965 	mov	r6,#0x00
      000E01 7D 40            [12] 2966 	mov	r5,#0x40
      000E03 E5*00            [12] 2967 	mov	a,_bp
      000E05 24 07            [12] 2968 	add	a,#0x07
      000E07 F8               [12] 2969 	mov	r0,a
      000E08 86 82            [24] 2970 	mov	dpl,@r0
      000E0A 08               [12] 2971 	inc	r0
      000E0B 86 83            [24] 2972 	mov	dph,@r0
      000E0D 08               [12] 2973 	inc	r0
      000E0E 86 F0            [24] 2974 	mov	b,@r0
      000E10 12r00r00         [24] 2975 	lcall	__gptrget
      000E13 FA               [12] 2976 	mov	r2,a
      000E14 A3               [24] 2977 	inc	dptr
      000E15 12r00r00         [24] 2978 	lcall	__gptrget
      000E18 FB               [12] 2979 	mov	r3,a
      000E19 A3               [24] 2980 	inc	dptr
      000E1A 12r00r00         [24] 2981 	lcall	__gptrget
      000E1D FC               [12] 2982 	mov	r4,a
      000E1E C0 07            [24] 2983 	push	ar7
      000E20 C0 06            [24] 2984 	push	ar6
      000E22 C0 05            [24] 2985 	push	ar5
      000E24 8A 82            [24] 2986 	mov	dpl,r2
      000E26 8B 83            [24] 2987 	mov	dph,r3
      000E28 8C F0            [24] 2988 	mov	b,r4
      000E2A 12r00r00         [24] 2989 	lcall	_stack_pop
      000E2D AB 82            [24] 2990 	mov	r3,dpl
      000E2F AC 83            [24] 2991 	mov	r4,dph
      000E31 15 81            [12] 2992 	dec	sp
      000E33 15 81            [12] 2993 	dec	sp
      000E35 15 81            [12] 2994 	dec	sp
      000E37 EB               [12] 2995 	mov	a,r3
      000E38 4C               [12] 2996 	orl	a,r4
      000E39 70 63            [24] 2997 	jnz	00116$
                                   2998 ;	calc.c:162: (void)stack_push(ctx->ps, d0);
      000E3B E5*00            [12] 2999 	mov	a,_bp
      000E3D 24 07            [12] 3000 	add	a,#0x07
      000E3F F8               [12] 3001 	mov	r0,a
      000E40 86 82            [24] 3002 	mov	dpl,@r0
      000E42 08               [12] 3003 	inc	r0
      000E43 86 83            [24] 3004 	mov	dph,@r0
      000E45 08               [12] 3005 	inc	r0
      000E46 86 F0            [24] 3006 	mov	b,@r0
      000E48 12r00r00         [24] 3007 	lcall	__gptrget
      000E4B FA               [12] 3008 	mov	r2,a
      000E4C A3               [24] 3009 	inc	dptr
      000E4D 12r00r00         [24] 3010 	lcall	__gptrget
      000E50 FB               [12] 3011 	mov	r3,a
      000E51 A3               [24] 3012 	inc	dptr
      000E52 12r00r00         [24] 3013 	lcall	__gptrget
      000E55 FC               [12] 3014 	mov	r4,a
      000E56 E5*00            [12] 3015 	mov	a,_bp
      000E58 24 15            [12] 3016 	add	a,#0x15
      000E5A F8               [12] 3017 	mov	r0,a
      000E5B E6               [12] 3018 	mov	a,@r0
      000E5C C0 E0            [24] 3019 	push	acc
      000E5E 08               [12] 3020 	inc	r0
      000E5F E6               [12] 3021 	mov	a,@r0
      000E60 C0 E0            [24] 3022 	push	acc
      000E62 08               [12] 3023 	inc	r0
      000E63 E6               [12] 3024 	mov	a,@r0
      000E64 C0 E0            [24] 3025 	push	acc
      000E66 08               [12] 3026 	inc	r0
      000E67 E6               [12] 3027 	mov	a,@r0
      000E68 C0 E0            [24] 3028 	push	acc
      000E6A 8A 82            [24] 3029 	mov	dpl,r2
      000E6C 8B 83            [24] 3030 	mov	dph,r3
      000E6E 8C F0            [24] 3031 	mov	b,r4
      000E70 12r00r00         [24] 3032 	lcall	_stack_push
      000E73 E5 81            [12] 3033 	mov	a,sp
      000E75 24 FC            [12] 3034 	add	a,#0xfc
      000E77 F5 81            [12] 3035 	mov	sp,a
                                   3036 ;	calc.c:163: printstr("\r\nstack underflow\r\n");
      000E79 7Fr46            [12] 3037 	mov	r7,#___str_9
      000E7B 7Es00            [12] 3038 	mov	r6,#(___str_9 >> 8)
      000E7D 7D 80            [12] 3039 	mov	r5,#0x80
                                   3040 ;	calc.c:51: return;
      000E7F                       3041 00393$:
                                   3042 ;	calc.c:49: for (; *s; s++) putchar(*s);
      000E7F 8F 82            [24] 3043 	mov	dpl,r7
      000E81 8E 83            [24] 3044 	mov	dph,r6
      000E83 8D F0            [24] 3045 	mov	b,r5
      000E85 12r00r00         [24] 3046 	lcall	__gptrget
      000E88 FC               [12] 3047 	mov	r4,a
      000E89 70 03            [24] 3048 	jnz	01293$
      000E8B 02r2ArBC         [24] 3049 	ljmp	00249$
      000E8E                       3050 01293$:
      000E8E 7B 00            [12] 3051 	mov	r3,#0x00
      000E90 8C 82            [24] 3052 	mov	dpl,r4
      000E92 8B 83            [24] 3053 	mov	dph,r3
      000E94 12r00r00         [24] 3054 	lcall	_putchar
      000E97 0F               [12] 3055 	inc	r7
                                   3056 ;	calc.c:163: printstr("\r\nstack underflow\r\n");
      000E98 BF 00 E4         [24] 3057 	cjne	r7,#0x00,00393$
      000E9B 0E               [12] 3058 	inc	r6
      000E9C 80 E1            [24] 3059 	sjmp	00393$
      000E9E                       3060 00116$:
                                   3061 ;	calc.c:165: (void)stack_push(ctx->ps, d0);
      000E9E E5*00            [12] 3062 	mov	a,_bp
      000EA0 24 07            [12] 3063 	add	a,#0x07
      000EA2 F8               [12] 3064 	mov	r0,a
      000EA3 86 82            [24] 3065 	mov	dpl,@r0
      000EA5 08               [12] 3066 	inc	r0
      000EA6 86 83            [24] 3067 	mov	dph,@r0
      000EA8 08               [12] 3068 	inc	r0
      000EA9 86 F0            [24] 3069 	mov	b,@r0
      000EAB 12r00r00         [24] 3070 	lcall	__gptrget
      000EAE FA               [12] 3071 	mov	r2,a
      000EAF A3               [24] 3072 	inc	dptr
      000EB0 12r00r00         [24] 3073 	lcall	__gptrget
      000EB3 FB               [12] 3074 	mov	r3,a
      000EB4 A3               [24] 3075 	inc	dptr
      000EB5 12r00r00         [24] 3076 	lcall	__gptrget
      000EB8 FC               [12] 3077 	mov	r4,a
      000EB9 E5*00            [12] 3078 	mov	a,_bp
      000EBB 24 15            [12] 3079 	add	a,#0x15
      000EBD F8               [12] 3080 	mov	r0,a
      000EBE E6               [12] 3081 	mov	a,@r0
      000EBF C0 E0            [24] 3082 	push	acc
      000EC1 08               [12] 3083 	inc	r0
      000EC2 E6               [12] 3084 	mov	a,@r0
      000EC3 C0 E0            [24] 3085 	push	acc
      000EC5 08               [12] 3086 	inc	r0
      000EC6 E6               [12] 3087 	mov	a,@r0
      000EC7 C0 E0            [24] 3088 	push	acc
      000EC9 08               [12] 3089 	inc	r0
      000ECA E6               [12] 3090 	mov	a,@r0
      000ECB C0 E0            [24] 3091 	push	acc
      000ECD 8A 82            [24] 3092 	mov	dpl,r2
      000ECF 8B 83            [24] 3093 	mov	dph,r3
      000ED1 8C F0            [24] 3094 	mov	b,r4
      000ED3 12r00r00         [24] 3095 	lcall	_stack_push
      000ED6 E5 81            [12] 3096 	mov	a,sp
      000ED8 24 FC            [12] 3097 	add	a,#0xfc
      000EDA F5 81            [12] 3098 	mov	sp,a
                                   3099 ;	calc.c:166: (void)stack_push(ctx->ps, d1);
      000EDC E5*00            [12] 3100 	mov	a,_bp
      000EDE 24 07            [12] 3101 	add	a,#0x07
      000EE0 F8               [12] 3102 	mov	r0,a
      000EE1 86 82            [24] 3103 	mov	dpl,@r0
      000EE3 08               [12] 3104 	inc	r0
      000EE4 86 83            [24] 3105 	mov	dph,@r0
      000EE6 08               [12] 3106 	inc	r0
      000EE7 86 F0            [24] 3107 	mov	b,@r0
      000EE9 12r00r00         [24] 3108 	lcall	__gptrget
      000EEC FA               [12] 3109 	mov	r2,a
      000EED A3               [24] 3110 	inc	dptr
      000EEE 12r00r00         [24] 3111 	lcall	__gptrget
      000EF1 FB               [12] 3112 	mov	r3,a
      000EF2 A3               [24] 3113 	inc	dptr
      000EF3 12r00r00         [24] 3114 	lcall	__gptrget
      000EF6 FC               [12] 3115 	mov	r4,a
      000EF7 E5*00            [12] 3116 	mov	a,_bp
      000EF9 24 19            [12] 3117 	add	a,#0x19
      000EFB F8               [12] 3118 	mov	r0,a
      000EFC E6               [12] 3119 	mov	a,@r0
      000EFD C0 E0            [24] 3120 	push	acc
      000EFF 08               [12] 3121 	inc	r0
      000F00 E6               [12] 3122 	mov	a,@r0
      000F01 C0 E0            [24] 3123 	push	acc
      000F03 08               [12] 3124 	inc	r0
      000F04 E6               [12] 3125 	mov	a,@r0
      000F05 C0 E0            [24] 3126 	push	acc
      000F07 08               [12] 3127 	inc	r0
      000F08 E6               [12] 3128 	mov	a,@r0
      000F09 C0 E0            [24] 3129 	push	acc
      000F0B 8A 82            [24] 3130 	mov	dpl,r2
      000F0D 8B 83            [24] 3131 	mov	dph,r3
      000F0F 8C F0            [24] 3132 	mov	b,r4
      000F11 12r00r00         [24] 3133 	lcall	_stack_push
      000F14 E5 81            [12] 3134 	mov	a,sp
      000F16 24 FC            [12] 3135 	add	a,#0xfc
      000F18 F5 81            [12] 3136 	mov	sp,a
                                   3137 ;	calc.c:168: break;
      000F1A 02r2ArBC         [24] 3138 	ljmp	00249$
                                   3139 ;	calc.c:169: case 'm':
      000F1D                       3140 00121$:
                                   3141 ;	calc.c:170: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      000F1D E5*00            [12] 3142 	mov	a,_bp
      000F1F 24 15            [12] 3143 	add	a,#0x15
      000F21 FF               [12] 3144 	mov	r7,a
      000F22 7E 00            [12] 3145 	mov	r6,#0x00
      000F24 7D 40            [12] 3146 	mov	r5,#0x40
      000F26 E5*00            [12] 3147 	mov	a,_bp
      000F28 24 12            [12] 3148 	add	a,#0x12
      000F2A F8               [12] 3149 	mov	r0,a
      000F2B E5*00            [12] 3150 	mov	a,_bp
      000F2D 24 07            [12] 3151 	add	a,#0x07
      000F2F F9               [12] 3152 	mov	r1,a
      000F30 74 13            [12] 3153 	mov	a,#0x13
      000F32 26               [12] 3154 	add	a,@r0
      000F33 F7               [12] 3155 	mov	@r1,a
      000F34 74 40            [12] 3156 	mov	a,#0x40
      000F36 08               [12] 3157 	inc	r0
      000F37 36               [12] 3158 	addc	a,@r0
      000F38 09               [12] 3159 	inc	r1
      000F39 F7               [12] 3160 	mov	@r1,a
      000F3A 08               [12] 3161 	inc	r0
      000F3B 09               [12] 3162 	inc	r1
      000F3C E6               [12] 3163 	mov	a,@r0
      000F3D F7               [12] 3164 	mov	@r1,a
      000F3E E5*00            [12] 3165 	mov	a,_bp
      000F40 24 07            [12] 3166 	add	a,#0x07
      000F42 F8               [12] 3167 	mov	r0,a
      000F43 86 82            [24] 3168 	mov	dpl,@r0
      000F45 08               [12] 3169 	inc	r0
      000F46 86 83            [24] 3170 	mov	dph,@r0
      000F48 08               [12] 3171 	inc	r0
      000F49 86 F0            [24] 3172 	mov	b,@r0
      000F4B 12r00r00         [24] 3173 	lcall	__gptrget
      000F4E FA               [12] 3174 	mov	r2,a
      000F4F A3               [24] 3175 	inc	dptr
      000F50 12r00r00         [24] 3176 	lcall	__gptrget
      000F53 FB               [12] 3177 	mov	r3,a
      000F54 A3               [24] 3178 	inc	dptr
      000F55 12r00r00         [24] 3179 	lcall	__gptrget
      000F58 FC               [12] 3180 	mov	r4,a
      000F59 C0 07            [24] 3181 	push	ar7
      000F5B C0 06            [24] 3182 	push	ar6
      000F5D C0 05            [24] 3183 	push	ar5
      000F5F 8A 82            [24] 3184 	mov	dpl,r2
      000F61 8B 83            [24] 3185 	mov	dph,r3
      000F63 8C F0            [24] 3186 	mov	b,r4
      000F65 12r00r00         [24] 3187 	lcall	_stack_pop
      000F68 AB 82            [24] 3188 	mov	r3,dpl
      000F6A AC 83            [24] 3189 	mov	r4,dph
      000F6C 15 81            [12] 3190 	dec	sp
      000F6E 15 81            [12] 3191 	dec	sp
      000F70 15 81            [12] 3192 	dec	sp
      000F72 EB               [12] 3193 	mov	a,r3
      000F73 4C               [12] 3194 	orl	a,r4
      000F74 70 25            [24] 3195 	jnz	00125$
      000F76 7Fr46            [12] 3196 	mov	r7,#___str_9
      000F78 7Es00            [12] 3197 	mov	r6,#(___str_9 >> 8)
      000F7A 7D 80            [12] 3198 	mov	r5,#0x80
                                   3199 ;	calc.c:51: return;
      000F7C                       3200 00396$:
                                   3201 ;	calc.c:49: for (; *s; s++) putchar(*s);
      000F7C 8F 82            [24] 3202 	mov	dpl,r7
      000F7E 8E 83            [24] 3203 	mov	dph,r6
      000F80 8D F0            [24] 3204 	mov	b,r5
      000F82 12r00r00         [24] 3205 	lcall	__gptrget
      000F85 FC               [12] 3206 	mov	r4,a
      000F86 70 03            [24] 3207 	jnz	01296$
      000F88 02r2ArBC         [24] 3208 	ljmp	00249$
      000F8B                       3209 01296$:
      000F8B 7B 00            [12] 3210 	mov	r3,#0x00
      000F8D 8C 82            [24] 3211 	mov	dpl,r4
      000F8F 8B 83            [24] 3212 	mov	dph,r3
      000F91 12r00r00         [24] 3213 	lcall	_putchar
      000F94 0F               [12] 3214 	inc	r7
                                   3215 ;	calc.c:170: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      000F95 BF 00 E4         [24] 3216 	cjne	r7,#0x00,00396$
      000F98 0E               [12] 3217 	inc	r6
      000F99 80 E1            [24] 3218 	sjmp	00396$
      000F9B                       3219 00125$:
                                   3220 ;	calc.c:172: if (!stack_push(ctx->ss, d0)) {
      000F9B E5*00            [12] 3221 	mov	a,_bp
      000F9D 24 12            [12] 3222 	add	a,#0x12
      000F9F F8               [12] 3223 	mov	r0,a
      000FA0 74 16            [12] 3224 	mov	a,#0x16
      000FA2 26               [12] 3225 	add	a,@r0
      000FA3 FA               [12] 3226 	mov	r2,a
      000FA4 74 40            [12] 3227 	mov	a,#0x40
      000FA6 08               [12] 3228 	inc	r0
      000FA7 36               [12] 3229 	addc	a,@r0
      000FA8 FB               [12] 3230 	mov	r3,a
      000FA9 08               [12] 3231 	inc	r0
      000FAA 86 04            [24] 3232 	mov	ar4,@r0
      000FAC 8A 82            [24] 3233 	mov	dpl,r2
      000FAE 8B 83            [24] 3234 	mov	dph,r3
      000FB0 8C F0            [24] 3235 	mov	b,r4
      000FB2 12r00r00         [24] 3236 	lcall	__gptrget
      000FB5 FA               [12] 3237 	mov	r2,a
      000FB6 A3               [24] 3238 	inc	dptr
      000FB7 12r00r00         [24] 3239 	lcall	__gptrget
      000FBA FB               [12] 3240 	mov	r3,a
      000FBB A3               [24] 3241 	inc	dptr
      000FBC 12r00r00         [24] 3242 	lcall	__gptrget
      000FBF FC               [12] 3243 	mov	r4,a
      000FC0 E5*00            [12] 3244 	mov	a,_bp
      000FC2 24 15            [12] 3245 	add	a,#0x15
      000FC4 F8               [12] 3246 	mov	r0,a
      000FC5 E6               [12] 3247 	mov	a,@r0
      000FC6 C0 E0            [24] 3248 	push	acc
      000FC8 08               [12] 3249 	inc	r0
      000FC9 E6               [12] 3250 	mov	a,@r0
      000FCA C0 E0            [24] 3251 	push	acc
      000FCC 08               [12] 3252 	inc	r0
      000FCD E6               [12] 3253 	mov	a,@r0
      000FCE C0 E0            [24] 3254 	push	acc
      000FD0 08               [12] 3255 	inc	r0
      000FD1 E6               [12] 3256 	mov	a,@r0
      000FD2 C0 E0            [24] 3257 	push	acc
      000FD4 8A 82            [24] 3258 	mov	dpl,r2
      000FD6 8B 83            [24] 3259 	mov	dph,r3
      000FD8 8C F0            [24] 3260 	mov	b,r4
      000FDA 12r00r00         [24] 3261 	lcall	_stack_push
      000FDD AB 82            [24] 3262 	mov	r3,dpl
      000FDF AC 83            [24] 3263 	mov	r4,dph
      000FE1 E5 81            [12] 3264 	mov	a,sp
      000FE3 24 FC            [12] 3265 	add	a,#0xfc
      000FE5 F5 81            [12] 3266 	mov	sp,a
      000FE7 EB               [12] 3267 	mov	a,r3
      000FE8 4C               [12] 3268 	orl	a,r4
      000FE9 60 03            [24] 3269 	jz	01298$
      000FEB 02r2ArBC         [24] 3270 	ljmp	00249$
      000FEE                       3271 01298$:
                                   3272 ;	calc.c:173: printstr("\r\nsecondary stack overflow\r\n");
      000FEE 7Fr5A            [12] 3273 	mov	r7,#___str_10
      000FF0 7Es00            [12] 3274 	mov	r6,#(___str_10 >> 8)
      000FF2 7D 80            [12] 3275 	mov	r5,#0x80
                                   3276 ;	calc.c:51: return;
      000FF4                       3277 00399$:
                                   3278 ;	calc.c:49: for (; *s; s++) putchar(*s);
      000FF4 8F 82            [24] 3279 	mov	dpl,r7
      000FF6 8E 83            [24] 3280 	mov	dph,r6
      000FF8 8D F0            [24] 3281 	mov	b,r5
      000FFA 12r00r00         [24] 3282 	lcall	__gptrget
      000FFD FC               [12] 3283 	mov	r4,a
      000FFE 60 10            [24] 3284 	jz	00285$
      001000 7B 00            [12] 3285 	mov	r3,#0x00
      001002 8C 82            [24] 3286 	mov	dpl,r4
      001004 8B 83            [24] 3287 	mov	dph,r3
      001006 12r00r00         [24] 3288 	lcall	_putchar
      001009 0F               [12] 3289 	inc	r7
                                   3290 ;	calc.c:173: printstr("\r\nsecondary stack overflow\r\n");
      00100A BF 00 E7         [24] 3291 	cjne	r7,#0x00,00399$
      00100D 0E               [12] 3292 	inc	r6
      00100E 80 E4            [24] 3293 	sjmp	00399$
      001010                       3294 00285$:
                                   3295 ;	calc.c:174: (void)stack_push(ctx->ps, d0);
      001010 E5*00            [12] 3296 	mov	a,_bp
      001012 24 07            [12] 3297 	add	a,#0x07
      001014 F8               [12] 3298 	mov	r0,a
      001015 86 82            [24] 3299 	mov	dpl,@r0
      001017 08               [12] 3300 	inc	r0
      001018 86 83            [24] 3301 	mov	dph,@r0
      00101A 08               [12] 3302 	inc	r0
      00101B 86 F0            [24] 3303 	mov	b,@r0
      00101D 12r00r00         [24] 3304 	lcall	__gptrget
      001020 FA               [12] 3305 	mov	r2,a
      001021 A3               [24] 3306 	inc	dptr
      001022 12r00r00         [24] 3307 	lcall	__gptrget
      001025 FB               [12] 3308 	mov	r3,a
      001026 A3               [24] 3309 	inc	dptr
      001027 12r00r00         [24] 3310 	lcall	__gptrget
      00102A FC               [12] 3311 	mov	r4,a
      00102B E5*00            [12] 3312 	mov	a,_bp
      00102D 24 15            [12] 3313 	add	a,#0x15
      00102F F8               [12] 3314 	mov	r0,a
      001030 E6               [12] 3315 	mov	a,@r0
      001031 C0 E0            [24] 3316 	push	acc
      001033 08               [12] 3317 	inc	r0
      001034 E6               [12] 3318 	mov	a,@r0
      001035 C0 E0            [24] 3319 	push	acc
      001037 08               [12] 3320 	inc	r0
      001038 E6               [12] 3321 	mov	a,@r0
      001039 C0 E0            [24] 3322 	push	acc
      00103B 08               [12] 3323 	inc	r0
      00103C E6               [12] 3324 	mov	a,@r0
      00103D C0 E0            [24] 3325 	push	acc
      00103F 8A 82            [24] 3326 	mov	dpl,r2
      001041 8B 83            [24] 3327 	mov	dph,r3
      001043 8C F0            [24] 3328 	mov	b,r4
      001045 12r00r00         [24] 3329 	lcall	_stack_push
      001048 E5 81            [12] 3330 	mov	a,sp
      00104A 24 FC            [12] 3331 	add	a,#0xfc
      00104C F5 81            [12] 3332 	mov	sp,a
                                   3333 ;	calc.c:177: break;
      00104E 02r2ArBC         [24] 3334 	ljmp	00249$
                                   3335 ;	calc.c:178: case 'M':
      001051                       3336 00127$:
                                   3337 ;	calc.c:179: if (!stack_pop(ctx->ss, &d0)) printstr("\r\nsecondary stack underflow\r\n");
      001051 E5*00            [12] 3338 	mov	a,_bp
      001053 24 15            [12] 3339 	add	a,#0x15
      001055 FF               [12] 3340 	mov	r7,a
      001056 7E 00            [12] 3341 	mov	r6,#0x00
      001058 7D 40            [12] 3342 	mov	r5,#0x40
      00105A E5*00            [12] 3343 	mov	a,_bp
      00105C 24 12            [12] 3344 	add	a,#0x12
      00105E F8               [12] 3345 	mov	r0,a
      00105F E5*00            [12] 3346 	mov	a,_bp
      001061 24 07            [12] 3347 	add	a,#0x07
      001063 F9               [12] 3348 	mov	r1,a
      001064 74 16            [12] 3349 	mov	a,#0x16
      001066 26               [12] 3350 	add	a,@r0
      001067 F7               [12] 3351 	mov	@r1,a
      001068 74 40            [12] 3352 	mov	a,#0x40
      00106A 08               [12] 3353 	inc	r0
      00106B 36               [12] 3354 	addc	a,@r0
      00106C 09               [12] 3355 	inc	r1
      00106D F7               [12] 3356 	mov	@r1,a
      00106E 08               [12] 3357 	inc	r0
      00106F 09               [12] 3358 	inc	r1
      001070 E6               [12] 3359 	mov	a,@r0
      001071 F7               [12] 3360 	mov	@r1,a
      001072 E5*00            [12] 3361 	mov	a,_bp
      001074 24 07            [12] 3362 	add	a,#0x07
      001076 F8               [12] 3363 	mov	r0,a
      001077 86 82            [24] 3364 	mov	dpl,@r0
      001079 08               [12] 3365 	inc	r0
      00107A 86 83            [24] 3366 	mov	dph,@r0
      00107C 08               [12] 3367 	inc	r0
      00107D 86 F0            [24] 3368 	mov	b,@r0
      00107F 12r00r00         [24] 3369 	lcall	__gptrget
      001082 FA               [12] 3370 	mov	r2,a
      001083 A3               [24] 3371 	inc	dptr
      001084 12r00r00         [24] 3372 	lcall	__gptrget
      001087 FB               [12] 3373 	mov	r3,a
      001088 A3               [24] 3374 	inc	dptr
      001089 12r00r00         [24] 3375 	lcall	__gptrget
      00108C FC               [12] 3376 	mov	r4,a
      00108D C0 07            [24] 3377 	push	ar7
      00108F C0 06            [24] 3378 	push	ar6
      001091 C0 05            [24] 3379 	push	ar5
      001093 8A 82            [24] 3380 	mov	dpl,r2
      001095 8B 83            [24] 3381 	mov	dph,r3
      001097 8C F0            [24] 3382 	mov	b,r4
      001099 12r00r00         [24] 3383 	lcall	_stack_pop
      00109C AB 82            [24] 3384 	mov	r3,dpl
      00109E AC 83            [24] 3385 	mov	r4,dph
      0010A0 15 81            [12] 3386 	dec	sp
      0010A2 15 81            [12] 3387 	dec	sp
      0010A4 15 81            [12] 3388 	dec	sp
      0010A6 EB               [12] 3389 	mov	a,r3
      0010A7 4C               [12] 3390 	orl	a,r4
      0010A8 70 25            [24] 3391 	jnz	00131$
      0010AA 7Fr77            [12] 3392 	mov	r7,#___str_11
      0010AC 7Es00            [12] 3393 	mov	r6,#(___str_11 >> 8)
      0010AE 7D 80            [12] 3394 	mov	r5,#0x80
                                   3395 ;	calc.c:51: return;
      0010B0                       3396 00402$:
                                   3397 ;	calc.c:49: for (; *s; s++) putchar(*s);
      0010B0 8F 82            [24] 3398 	mov	dpl,r7
      0010B2 8E 83            [24] 3399 	mov	dph,r6
      0010B4 8D F0            [24] 3400 	mov	b,r5
      0010B6 12r00r00         [24] 3401 	lcall	__gptrget
      0010B9 FC               [12] 3402 	mov	r4,a
      0010BA 70 03            [24] 3403 	jnz	01302$
      0010BC 02r2ArBC         [24] 3404 	ljmp	00249$
      0010BF                       3405 01302$:
      0010BF 7B 00            [12] 3406 	mov	r3,#0x00
      0010C1 8C 82            [24] 3407 	mov	dpl,r4
      0010C3 8B 83            [24] 3408 	mov	dph,r3
      0010C5 12r00r00         [24] 3409 	lcall	_putchar
      0010C8 0F               [12] 3410 	inc	r7
                                   3411 ;	calc.c:179: if (!stack_pop(ctx->ss, &d0)) printstr("\r\nsecondary stack underflow\r\n");
      0010C9 BF 00 E4         [24] 3412 	cjne	r7,#0x00,00402$
      0010CC 0E               [12] 3413 	inc	r6
      0010CD 80 E1            [24] 3414 	sjmp	00402$
      0010CF                       3415 00131$:
                                   3416 ;	calc.c:181: if (!stack_push(ctx->ps, d0)) {
      0010CF E5*00            [12] 3417 	mov	a,_bp
      0010D1 24 12            [12] 3418 	add	a,#0x12
      0010D3 F8               [12] 3419 	mov	r0,a
      0010D4 74 13            [12] 3420 	mov	a,#0x13
      0010D6 26               [12] 3421 	add	a,@r0
      0010D7 FA               [12] 3422 	mov	r2,a
      0010D8 74 40            [12] 3423 	mov	a,#0x40
      0010DA 08               [12] 3424 	inc	r0
      0010DB 36               [12] 3425 	addc	a,@r0
      0010DC FB               [12] 3426 	mov	r3,a
      0010DD 08               [12] 3427 	inc	r0
      0010DE 86 04            [24] 3428 	mov	ar4,@r0
      0010E0 8A 82            [24] 3429 	mov	dpl,r2
      0010E2 8B 83            [24] 3430 	mov	dph,r3
      0010E4 8C F0            [24] 3431 	mov	b,r4
      0010E6 12r00r00         [24] 3432 	lcall	__gptrget
      0010E9 FA               [12] 3433 	mov	r2,a
      0010EA A3               [24] 3434 	inc	dptr
      0010EB 12r00r00         [24] 3435 	lcall	__gptrget
      0010EE FB               [12] 3436 	mov	r3,a
      0010EF A3               [24] 3437 	inc	dptr
      0010F0 12r00r00         [24] 3438 	lcall	__gptrget
      0010F3 FC               [12] 3439 	mov	r4,a
      0010F4 E5*00            [12] 3440 	mov	a,_bp
      0010F6 24 15            [12] 3441 	add	a,#0x15
      0010F8 F8               [12] 3442 	mov	r0,a
      0010F9 E6               [12] 3443 	mov	a,@r0
      0010FA C0 E0            [24] 3444 	push	acc
      0010FC 08               [12] 3445 	inc	r0
      0010FD E6               [12] 3446 	mov	a,@r0
      0010FE C0 E0            [24] 3447 	push	acc
      001100 08               [12] 3448 	inc	r0
      001101 E6               [12] 3449 	mov	a,@r0
      001102 C0 E0            [24] 3450 	push	acc
      001104 08               [12] 3451 	inc	r0
      001105 E6               [12] 3452 	mov	a,@r0
      001106 C0 E0            [24] 3453 	push	acc
      001108 8A 82            [24] 3454 	mov	dpl,r2
      00110A 8B 83            [24] 3455 	mov	dph,r3
      00110C 8C F0            [24] 3456 	mov	b,r4
      00110E 12r00r00         [24] 3457 	lcall	_stack_push
      001111 AB 82            [24] 3458 	mov	r3,dpl
      001113 AC 83            [24] 3459 	mov	r4,dph
      001115 E5 81            [12] 3460 	mov	a,sp
      001117 24 FC            [12] 3461 	add	a,#0xfc
      001119 F5 81            [12] 3462 	mov	sp,a
      00111B EB               [12] 3463 	mov	a,r3
      00111C 4C               [12] 3464 	orl	a,r4
      00111D 60 03            [24] 3465 	jz	01304$
      00111F 02r2ArBC         [24] 3466 	ljmp	00249$
      001122                       3467 01304$:
                                   3468 ;	calc.c:182: printstr("\r\nstack overflow\r\n");
      001122 7Fr95            [12] 3469 	mov	r7,#___str_12
      001124 7Es00            [12] 3470 	mov	r6,#(___str_12 >> 8)
      001126 7D 80            [12] 3471 	mov	r5,#0x80
                                   3472 ;	calc.c:51: return;
      001128                       3473 00405$:
                                   3474 ;	calc.c:49: for (; *s; s++) putchar(*s);
      001128 8F 82            [24] 3475 	mov	dpl,r7
      00112A 8E 83            [24] 3476 	mov	dph,r6
      00112C 8D F0            [24] 3477 	mov	b,r5
      00112E 12r00r00         [24] 3478 	lcall	__gptrget
      001131 FC               [12] 3479 	mov	r4,a
      001132 60 10            [24] 3480 	jz	00289$
      001134 7B 00            [12] 3481 	mov	r3,#0x00
      001136 8C 82            [24] 3482 	mov	dpl,r4
      001138 8B 83            [24] 3483 	mov	dph,r3
      00113A 12r00r00         [24] 3484 	lcall	_putchar
      00113D 0F               [12] 3485 	inc	r7
                                   3486 ;	calc.c:182: printstr("\r\nstack overflow\r\n");
      00113E BF 00 E7         [24] 3487 	cjne	r7,#0x00,00405$
      001141 0E               [12] 3488 	inc	r6
      001142 80 E4            [24] 3489 	sjmp	00405$
      001144                       3490 00289$:
                                   3491 ;	calc.c:183: (void)stack_push(ctx->ss, d0);
      001144 E5*00            [12] 3492 	mov	a,_bp
      001146 24 07            [12] 3493 	add	a,#0x07
      001148 F8               [12] 3494 	mov	r0,a
      001149 86 82            [24] 3495 	mov	dpl,@r0
      00114B 08               [12] 3496 	inc	r0
      00114C 86 83            [24] 3497 	mov	dph,@r0
      00114E 08               [12] 3498 	inc	r0
      00114F 86 F0            [24] 3499 	mov	b,@r0
      001151 12r00r00         [24] 3500 	lcall	__gptrget
      001154 FA               [12] 3501 	mov	r2,a
      001155 A3               [24] 3502 	inc	dptr
      001156 12r00r00         [24] 3503 	lcall	__gptrget
      001159 FB               [12] 3504 	mov	r3,a
      00115A A3               [24] 3505 	inc	dptr
      00115B 12r00r00         [24] 3506 	lcall	__gptrget
      00115E FC               [12] 3507 	mov	r4,a
      00115F E5*00            [12] 3508 	mov	a,_bp
      001161 24 15            [12] 3509 	add	a,#0x15
      001163 F8               [12] 3510 	mov	r0,a
      001164 E6               [12] 3511 	mov	a,@r0
      001165 C0 E0            [24] 3512 	push	acc
      001167 08               [12] 3513 	inc	r0
      001168 E6               [12] 3514 	mov	a,@r0
      001169 C0 E0            [24] 3515 	push	acc
      00116B 08               [12] 3516 	inc	r0
      00116C E6               [12] 3517 	mov	a,@r0
      00116D C0 E0            [24] 3518 	push	acc
      00116F 08               [12] 3519 	inc	r0
      001170 E6               [12] 3520 	mov	a,@r0
      001171 C0 E0            [24] 3521 	push	acc
      001173 8A 82            [24] 3522 	mov	dpl,r2
      001175 8B 83            [24] 3523 	mov	dph,r3
      001177 8C F0            [24] 3524 	mov	b,r4
      001179 12r00r00         [24] 3525 	lcall	_stack_push
      00117C E5 81            [12] 3526 	mov	a,sp
      00117E 24 FC            [12] 3527 	add	a,#0xfc
      001180 F5 81            [12] 3528 	mov	sp,a
                                   3529 ;	calc.c:186: break;
      001182 02r2ArBC         [24] 3530 	ljmp	00249$
                                   3531 ;	calc.c:187: case 'u':
      001185                       3532 00133$:
                                   3533 ;	calc.c:188: if (!stack_peek(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      001185 E5*00            [12] 3534 	mov	a,_bp
      001187 24 15            [12] 3535 	add	a,#0x15
      001189 FF               [12] 3536 	mov	r7,a
      00118A 7E 00            [12] 3537 	mov	r6,#0x00
      00118C 7D 40            [12] 3538 	mov	r5,#0x40
      00118E E5*00            [12] 3539 	mov	a,_bp
      001190 24 12            [12] 3540 	add	a,#0x12
      001192 F8               [12] 3541 	mov	r0,a
      001193 74 13            [12] 3542 	mov	a,#0x13
      001195 26               [12] 3543 	add	a,@r0
      001196 FA               [12] 3544 	mov	r2,a
      001197 ED               [12] 3545 	mov	a,r5
      001198 08               [12] 3546 	inc	r0
      001199 36               [12] 3547 	addc	a,@r0
      00119A FB               [12] 3548 	mov	r3,a
      00119B 08               [12] 3549 	inc	r0
      00119C 86 04            [24] 3550 	mov	ar4,@r0
      00119E 8A 82            [24] 3551 	mov	dpl,r2
      0011A0 8B 83            [24] 3552 	mov	dph,r3
      0011A2 8C F0            [24] 3553 	mov	b,r4
      0011A4 12r00r00         [24] 3554 	lcall	__gptrget
      0011A7 FA               [12] 3555 	mov	r2,a
      0011A8 A3               [24] 3556 	inc	dptr
      0011A9 12r00r00         [24] 3557 	lcall	__gptrget
      0011AC FB               [12] 3558 	mov	r3,a
      0011AD A3               [24] 3559 	inc	dptr
      0011AE 12r00r00         [24] 3560 	lcall	__gptrget
      0011B1 FC               [12] 3561 	mov	r4,a
      0011B2 C0 07            [24] 3562 	push	ar7
      0011B4 C0 06            [24] 3563 	push	ar6
      0011B6 C0 05            [24] 3564 	push	ar5
      0011B8 8A 82            [24] 3565 	mov	dpl,r2
      0011BA 8B 83            [24] 3566 	mov	dph,r3
      0011BC 8C F0            [24] 3567 	mov	b,r4
      0011BE 12r00r00         [24] 3568 	lcall	_stack_peek
      0011C1 AB 82            [24] 3569 	mov	r3,dpl
      0011C3 AC 83            [24] 3570 	mov	r4,dph
      0011C5 15 81            [12] 3571 	dec	sp
      0011C7 15 81            [12] 3572 	dec	sp
      0011C9 15 81            [12] 3573 	dec	sp
      0011CB EB               [12] 3574 	mov	a,r3
      0011CC 4C               [12] 3575 	orl	a,r4
      0011CD 70 25            [24] 3576 	jnz	00137$
      0011CF 7Fr46            [12] 3577 	mov	r7,#___str_9
      0011D1 7Es00            [12] 3578 	mov	r6,#(___str_9 >> 8)
      0011D3 7D 80            [12] 3579 	mov	r5,#0x80
                                   3580 ;	calc.c:51: return;
      0011D5                       3581 00408$:
                                   3582 ;	calc.c:49: for (; *s; s++) putchar(*s);
      0011D5 8F 82            [24] 3583 	mov	dpl,r7
      0011D7 8E 83            [24] 3584 	mov	dph,r6
      0011D9 8D F0            [24] 3585 	mov	b,r5
      0011DB 12r00r00         [24] 3586 	lcall	__gptrget
      0011DE FC               [12] 3587 	mov	r4,a
      0011DF 70 03            [24] 3588 	jnz	01308$
      0011E1 02r2ArBC         [24] 3589 	ljmp	00249$
      0011E4                       3590 01308$:
      0011E4 7B 00            [12] 3591 	mov	r3,#0x00
      0011E6 8C 82            [24] 3592 	mov	dpl,r4
      0011E8 8B 83            [24] 3593 	mov	dph,r3
      0011EA 12r00r00         [24] 3594 	lcall	_putchar
      0011ED 0F               [12] 3595 	inc	r7
                                   3596 ;	calc.c:188: if (!stack_peek(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      0011EE BF 00 E4         [24] 3597 	cjne	r7,#0x00,00408$
      0011F1 0E               [12] 3598 	inc	r6
      0011F2 80 E1            [24] 3599 	sjmp	00408$
      0011F4                       3600 00137$:
                                   3601 ;	calc.c:189: else if (!stack_push(ctx->ss, d0)) printstr("\r\nsecondary stack overflow\r\n");
      0011F4 E5*00            [12] 3602 	mov	a,_bp
      0011F6 24 12            [12] 3603 	add	a,#0x12
      0011F8 F8               [12] 3604 	mov	r0,a
      0011F9 74 16            [12] 3605 	mov	a,#0x16
      0011FB 26               [12] 3606 	add	a,@r0
      0011FC FA               [12] 3607 	mov	r2,a
      0011FD 74 40            [12] 3608 	mov	a,#0x40
      0011FF 08               [12] 3609 	inc	r0
      001200 36               [12] 3610 	addc	a,@r0
      001201 FB               [12] 3611 	mov	r3,a
      001202 08               [12] 3612 	inc	r0
      001203 86 04            [24] 3613 	mov	ar4,@r0
      001205 8A 82            [24] 3614 	mov	dpl,r2
      001207 8B 83            [24] 3615 	mov	dph,r3
      001209 8C F0            [24] 3616 	mov	b,r4
      00120B 12r00r00         [24] 3617 	lcall	__gptrget
      00120E FA               [12] 3618 	mov	r2,a
      00120F A3               [24] 3619 	inc	dptr
      001210 12r00r00         [24] 3620 	lcall	__gptrget
      001213 FB               [12] 3621 	mov	r3,a
      001214 A3               [24] 3622 	inc	dptr
      001215 12r00r00         [24] 3623 	lcall	__gptrget
      001218 FC               [12] 3624 	mov	r4,a
      001219 E5*00            [12] 3625 	mov	a,_bp
      00121B 24 15            [12] 3626 	add	a,#0x15
      00121D F8               [12] 3627 	mov	r0,a
      00121E E6               [12] 3628 	mov	a,@r0
      00121F C0 E0            [24] 3629 	push	acc
      001221 08               [12] 3630 	inc	r0
      001222 E6               [12] 3631 	mov	a,@r0
      001223 C0 E0            [24] 3632 	push	acc
      001225 08               [12] 3633 	inc	r0
      001226 E6               [12] 3634 	mov	a,@r0
      001227 C0 E0            [24] 3635 	push	acc
      001229 08               [12] 3636 	inc	r0
      00122A E6               [12] 3637 	mov	a,@r0
      00122B C0 E0            [24] 3638 	push	acc
      00122D 8A 82            [24] 3639 	mov	dpl,r2
      00122F 8B 83            [24] 3640 	mov	dph,r3
      001231 8C F0            [24] 3641 	mov	b,r4
      001233 12r00r00         [24] 3642 	lcall	_stack_push
      001236 AB 82            [24] 3643 	mov	r3,dpl
      001238 AC 83            [24] 3644 	mov	r4,dph
      00123A E5 81            [12] 3645 	mov	a,sp
      00123C 24 FC            [12] 3646 	add	a,#0xfc
      00123E F5 81            [12] 3647 	mov	sp,a
      001240 EB               [12] 3648 	mov	a,r3
      001241 4C               [12] 3649 	orl	a,r4
      001242 60 03            [24] 3650 	jz	01310$
      001244 02r2ArBC         [24] 3651 	ljmp	00249$
      001247                       3652 01310$:
      001247 7Fr5A            [12] 3653 	mov	r7,#___str_10
      001249 7Es00            [12] 3654 	mov	r6,#(___str_10 >> 8)
      00124B 7D 80            [12] 3655 	mov	r5,#0x80
                                   3656 ;	calc.c:51: return;
      00124D                       3657 00411$:
                                   3658 ;	calc.c:49: for (; *s; s++) putchar(*s);
      00124D 8F 82            [24] 3659 	mov	dpl,r7
      00124F 8E 83            [24] 3660 	mov	dph,r6
      001251 8D F0            [24] 3661 	mov	b,r5
      001253 12r00r00         [24] 3662 	lcall	__gptrget
      001256 FC               [12] 3663 	mov	r4,a
      001257 70 03            [24] 3664 	jnz	01311$
      001259 02r2ArBC         [24] 3665 	ljmp	00249$
      00125C                       3666 01311$:
      00125C 7B 00            [12] 3667 	mov	r3,#0x00
      00125E 8C 82            [24] 3668 	mov	dpl,r4
      001260 8B 83            [24] 3669 	mov	dph,r3
      001262 12r00r00         [24] 3670 	lcall	_putchar
      001265 0F               [12] 3671 	inc	r7
                                   3672 ;	calc.c:191: case 'U':
      001266 BF 00 E4         [24] 3673 	cjne	r7,#0x00,00411$
      001269 0E               [12] 3674 	inc	r6
      00126A 80 E1            [24] 3675 	sjmp	00411$
      00126C                       3676 00139$:
                                   3677 ;	calc.c:192: if (!stack_peek(ctx->ss, &d0)) printstr("\r\nsecondary stack underflow\r\n");
      00126C E5*00            [12] 3678 	mov	a,_bp
      00126E 24 15            [12] 3679 	add	a,#0x15
      001270 FF               [12] 3680 	mov	r7,a
      001271 7E 00            [12] 3681 	mov	r6,#0x00
      001273 7D 40            [12] 3682 	mov	r5,#0x40
      001275 E5*00            [12] 3683 	mov	a,_bp
      001277 24 12            [12] 3684 	add	a,#0x12
      001279 F8               [12] 3685 	mov	r0,a
      00127A 74 16            [12] 3686 	mov	a,#0x16
      00127C 26               [12] 3687 	add	a,@r0
      00127D FA               [12] 3688 	mov	r2,a
      00127E ED               [12] 3689 	mov	a,r5
      00127F 08               [12] 3690 	inc	r0
      001280 36               [12] 3691 	addc	a,@r0
      001281 FB               [12] 3692 	mov	r3,a
      001282 08               [12] 3693 	inc	r0
      001283 86 04            [24] 3694 	mov	ar4,@r0
      001285 8A 82            [24] 3695 	mov	dpl,r2
      001287 8B 83            [24] 3696 	mov	dph,r3
      001289 8C F0            [24] 3697 	mov	b,r4
      00128B 12r00r00         [24] 3698 	lcall	__gptrget
      00128E FA               [12] 3699 	mov	r2,a
      00128F A3               [24] 3700 	inc	dptr
      001290 12r00r00         [24] 3701 	lcall	__gptrget
      001293 FB               [12] 3702 	mov	r3,a
      001294 A3               [24] 3703 	inc	dptr
      001295 12r00r00         [24] 3704 	lcall	__gptrget
      001298 FC               [12] 3705 	mov	r4,a
      001299 C0 07            [24] 3706 	push	ar7
      00129B C0 06            [24] 3707 	push	ar6
      00129D C0 05            [24] 3708 	push	ar5
      00129F 8A 82            [24] 3709 	mov	dpl,r2
      0012A1 8B 83            [24] 3710 	mov	dph,r3
      0012A3 8C F0            [24] 3711 	mov	b,r4
      0012A5 12r00r00         [24] 3712 	lcall	_stack_peek
      0012A8 AB 82            [24] 3713 	mov	r3,dpl
      0012AA AC 83            [24] 3714 	mov	r4,dph
      0012AC 15 81            [12] 3715 	dec	sp
      0012AE 15 81            [12] 3716 	dec	sp
      0012B0 15 81            [12] 3717 	dec	sp
      0012B2 EB               [12] 3718 	mov	a,r3
      0012B3 4C               [12] 3719 	orl	a,r4
      0012B4 70 25            [24] 3720 	jnz	00143$
      0012B6 7Fr77            [12] 3721 	mov	r7,#___str_11
      0012B8 7Es00            [12] 3722 	mov	r6,#(___str_11 >> 8)
      0012BA 7D 80            [12] 3723 	mov	r5,#0x80
                                   3724 ;	calc.c:51: return;
      0012BC                       3725 00414$:
                                   3726 ;	calc.c:49: for (; *s; s++) putchar(*s);
      0012BC 8F 82            [24] 3727 	mov	dpl,r7
      0012BE 8E 83            [24] 3728 	mov	dph,r6
      0012C0 8D F0            [24] 3729 	mov	b,r5
      0012C2 12r00r00         [24] 3730 	lcall	__gptrget
      0012C5 FC               [12] 3731 	mov	r4,a
      0012C6 70 03            [24] 3732 	jnz	01314$
      0012C8 02r2ArBC         [24] 3733 	ljmp	00249$
      0012CB                       3734 01314$:
      0012CB 7B 00            [12] 3735 	mov	r3,#0x00
      0012CD 8C 82            [24] 3736 	mov	dpl,r4
      0012CF 8B 83            [24] 3737 	mov	dph,r3
      0012D1 12r00r00         [24] 3738 	lcall	_putchar
      0012D4 0F               [12] 3739 	inc	r7
                                   3740 ;	calc.c:192: if (!stack_peek(ctx->ss, &d0)) printstr("\r\nsecondary stack underflow\r\n");
      0012D5 BF 00 E4         [24] 3741 	cjne	r7,#0x00,00414$
      0012D8 0E               [12] 3742 	inc	r6
      0012D9 80 E1            [24] 3743 	sjmp	00414$
      0012DB                       3744 00143$:
                                   3745 ;	calc.c:193: else if (!stack_push(ctx->ps, d0)) printstr("\r\nstack overflow\r\n");
      0012DB E5*00            [12] 3746 	mov	a,_bp
      0012DD 24 12            [12] 3747 	add	a,#0x12
      0012DF F8               [12] 3748 	mov	r0,a
      0012E0 74 13            [12] 3749 	mov	a,#0x13
      0012E2 26               [12] 3750 	add	a,@r0
      0012E3 FA               [12] 3751 	mov	r2,a
      0012E4 74 40            [12] 3752 	mov	a,#0x40
      0012E6 08               [12] 3753 	inc	r0
      0012E7 36               [12] 3754 	addc	a,@r0
      0012E8 FB               [12] 3755 	mov	r3,a
      0012E9 08               [12] 3756 	inc	r0
      0012EA 86 04            [24] 3757 	mov	ar4,@r0
      0012EC 8A 82            [24] 3758 	mov	dpl,r2
      0012EE 8B 83            [24] 3759 	mov	dph,r3
      0012F0 8C F0            [24] 3760 	mov	b,r4
      0012F2 12r00r00         [24] 3761 	lcall	__gptrget
      0012F5 FA               [12] 3762 	mov	r2,a
      0012F6 A3               [24] 3763 	inc	dptr
      0012F7 12r00r00         [24] 3764 	lcall	__gptrget
      0012FA FB               [12] 3765 	mov	r3,a
      0012FB A3               [24] 3766 	inc	dptr
      0012FC 12r00r00         [24] 3767 	lcall	__gptrget
      0012FF FC               [12] 3768 	mov	r4,a
      001300 E5*00            [12] 3769 	mov	a,_bp
      001302 24 15            [12] 3770 	add	a,#0x15
      001304 F8               [12] 3771 	mov	r0,a
      001305 E6               [12] 3772 	mov	a,@r0
      001306 C0 E0            [24] 3773 	push	acc
      001308 08               [12] 3774 	inc	r0
      001309 E6               [12] 3775 	mov	a,@r0
      00130A C0 E0            [24] 3776 	push	acc
      00130C 08               [12] 3777 	inc	r0
      00130D E6               [12] 3778 	mov	a,@r0
      00130E C0 E0            [24] 3779 	push	acc
      001310 08               [12] 3780 	inc	r0
      001311 E6               [12] 3781 	mov	a,@r0
      001312 C0 E0            [24] 3782 	push	acc
      001314 8A 82            [24] 3783 	mov	dpl,r2
      001316 8B 83            [24] 3784 	mov	dph,r3
      001318 8C F0            [24] 3785 	mov	b,r4
      00131A 12r00r00         [24] 3786 	lcall	_stack_push
      00131D AB 82            [24] 3787 	mov	r3,dpl
      00131F AC 83            [24] 3788 	mov	r4,dph
      001321 E5 81            [12] 3789 	mov	a,sp
      001323 24 FC            [12] 3790 	add	a,#0xfc
      001325 F5 81            [12] 3791 	mov	sp,a
      001327 EB               [12] 3792 	mov	a,r3
      001328 4C               [12] 3793 	orl	a,r4
      001329 60 03            [24] 3794 	jz	01316$
      00132B 02r2ArBC         [24] 3795 	ljmp	00249$
      00132E                       3796 01316$:
      00132E 7Fr95            [12] 3797 	mov	r7,#___str_12
      001330 7Es00            [12] 3798 	mov	r6,#(___str_12 >> 8)
      001332 7D 80            [12] 3799 	mov	r5,#0x80
                                   3800 ;	calc.c:51: return;
      001334                       3801 00417$:
                                   3802 ;	calc.c:49: for (; *s; s++) putchar(*s);
      001334 8F 82            [24] 3803 	mov	dpl,r7
      001336 8E 83            [24] 3804 	mov	dph,r6
      001338 8D F0            [24] 3805 	mov	b,r5
      00133A 12r00r00         [24] 3806 	lcall	__gptrget
      00133D FC               [12] 3807 	mov	r4,a
      00133E 70 03            [24] 3808 	jnz	01317$
      001340 02r2ArBC         [24] 3809 	ljmp	00249$
      001343                       3810 01317$:
      001343 7B 00            [12] 3811 	mov	r3,#0x00
      001345 8C 82            [24] 3812 	mov	dpl,r4
      001347 8B 83            [24] 3813 	mov	dph,r3
      001349 12r00r00         [24] 3814 	lcall	_putchar
      00134C 0F               [12] 3815 	inc	r7
                                   3816 ;	calc.c:195: case 'T':
      00134D BF 00 E4         [24] 3817 	cjne	r7,#0x00,00417$
      001350 0E               [12] 3818 	inc	r6
      001351 80 E1            [24] 3819 	sjmp	00417$
      001353                       3820 00145$:
                                   3821 ;	calc.c:196: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      001353 E5*00            [12] 3822 	mov	a,_bp
      001355 24 15            [12] 3823 	add	a,#0x15
      001357 FF               [12] 3824 	mov	r7,a
      001358 7E 00            [12] 3825 	mov	r6,#0x00
      00135A 7D 40            [12] 3826 	mov	r5,#0x40
      00135C E5*00            [12] 3827 	mov	a,_bp
      00135E 24 12            [12] 3828 	add	a,#0x12
      001360 F8               [12] 3829 	mov	r0,a
      001361 E5*00            [12] 3830 	mov	a,_bp
      001363 24 07            [12] 3831 	add	a,#0x07
      001365 F9               [12] 3832 	mov	r1,a
      001366 74 13            [12] 3833 	mov	a,#0x13
      001368 26               [12] 3834 	add	a,@r0
      001369 F7               [12] 3835 	mov	@r1,a
      00136A 74 40            [12] 3836 	mov	a,#0x40
      00136C 08               [12] 3837 	inc	r0
      00136D 36               [12] 3838 	addc	a,@r0
      00136E 09               [12] 3839 	inc	r1
      00136F F7               [12] 3840 	mov	@r1,a
      001370 08               [12] 3841 	inc	r0
      001371 09               [12] 3842 	inc	r1
      001372 E6               [12] 3843 	mov	a,@r0
      001373 F7               [12] 3844 	mov	@r1,a
      001374 E5*00            [12] 3845 	mov	a,_bp
      001376 24 07            [12] 3846 	add	a,#0x07
      001378 F8               [12] 3847 	mov	r0,a
      001379 86 82            [24] 3848 	mov	dpl,@r0
      00137B 08               [12] 3849 	inc	r0
      00137C 86 83            [24] 3850 	mov	dph,@r0
      00137E 08               [12] 3851 	inc	r0
      00137F 86 F0            [24] 3852 	mov	b,@r0
      001381 12r00r00         [24] 3853 	lcall	__gptrget
      001384 FA               [12] 3854 	mov	r2,a
      001385 A3               [24] 3855 	inc	dptr
      001386 12r00r00         [24] 3856 	lcall	__gptrget
      001389 FB               [12] 3857 	mov	r3,a
      00138A A3               [24] 3858 	inc	dptr
      00138B 12r00r00         [24] 3859 	lcall	__gptrget
      00138E FC               [12] 3860 	mov	r4,a
      00138F C0 07            [24] 3861 	push	ar7
      001391 C0 06            [24] 3862 	push	ar6
      001393 C0 05            [24] 3863 	push	ar5
      001395 8A 82            [24] 3864 	mov	dpl,r2
      001397 8B 83            [24] 3865 	mov	dph,r3
      001399 8C F0            [24] 3866 	mov	b,r4
      00139B 12r00r00         [24] 3867 	lcall	_stack_pop
      00139E AB 82            [24] 3868 	mov	r3,dpl
      0013A0 AC 83            [24] 3869 	mov	r4,dph
      0013A2 15 81            [12] 3870 	dec	sp
      0013A4 15 81            [12] 3871 	dec	sp
      0013A6 15 81            [12] 3872 	dec	sp
      0013A8 EB               [12] 3873 	mov	a,r3
      0013A9 4C               [12] 3874 	orl	a,r4
      0013AA 70 25            [24] 3875 	jnz	00150$
      0013AC 7Fr46            [12] 3876 	mov	r7,#___str_9
      0013AE 7Es00            [12] 3877 	mov	r6,#(___str_9 >> 8)
      0013B0 7D 80            [12] 3878 	mov	r5,#0x80
                                   3879 ;	calc.c:51: return;
      0013B2                       3880 00420$:
                                   3881 ;	calc.c:49: for (; *s; s++) putchar(*s);
      0013B2 8F 82            [24] 3882 	mov	dpl,r7
      0013B4 8E 83            [24] 3883 	mov	dph,r6
      0013B6 8D F0            [24] 3884 	mov	b,r5
      0013B8 12r00r00         [24] 3885 	lcall	__gptrget
      0013BB FC               [12] 3886 	mov	r4,a
      0013BC 70 03            [24] 3887 	jnz	01320$
      0013BE 02r2ArBC         [24] 3888 	ljmp	00249$
      0013C1                       3889 01320$:
      0013C1 7B 00            [12] 3890 	mov	r3,#0x00
      0013C3 8C 82            [24] 3891 	mov	dpl,r4
      0013C5 8B 83            [24] 3892 	mov	dph,r3
      0013C7 12r00r00         [24] 3893 	lcall	_putchar
      0013CA 0F               [12] 3894 	inc	r7
                                   3895 ;	calc.c:196: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      0013CB BF 00 E4         [24] 3896 	cjne	r7,#0x00,00420$
      0013CE 0E               [12] 3897 	inc	r6
      0013CF 80 E1            [24] 3898 	sjmp	00420$
      0013D1                       3899 00150$:
                                   3900 ;	calc.c:198: if (!stack_pop(ctx->ss, &d1)) {
      0013D1 E5*00            [12] 3901 	mov	a,_bp
      0013D3 24 19            [12] 3902 	add	a,#0x19
      0013D5 FF               [12] 3903 	mov	r7,a
      0013D6 7E 00            [12] 3904 	mov	r6,#0x00
      0013D8 7D 40            [12] 3905 	mov	r5,#0x40
      0013DA E5*00            [12] 3906 	mov	a,_bp
      0013DC 24 12            [12] 3907 	add	a,#0x12
      0013DE F8               [12] 3908 	mov	r0,a
      0013DF E5*00            [12] 3909 	mov	a,_bp
      0013E1 24 04            [12] 3910 	add	a,#0x04
      0013E3 F9               [12] 3911 	mov	r1,a
      0013E4 74 16            [12] 3912 	mov	a,#0x16
      0013E6 26               [12] 3913 	add	a,@r0
      0013E7 F7               [12] 3914 	mov	@r1,a
      0013E8 74 40            [12] 3915 	mov	a,#0x40
      0013EA 08               [12] 3916 	inc	r0
      0013EB 36               [12] 3917 	addc	a,@r0
      0013EC 09               [12] 3918 	inc	r1
      0013ED F7               [12] 3919 	mov	@r1,a
      0013EE 08               [12] 3920 	inc	r0
      0013EF 09               [12] 3921 	inc	r1
      0013F0 E6               [12] 3922 	mov	a,@r0
      0013F1 F7               [12] 3923 	mov	@r1,a
      0013F2 E5*00            [12] 3924 	mov	a,_bp
      0013F4 24 04            [12] 3925 	add	a,#0x04
      0013F6 F8               [12] 3926 	mov	r0,a
      0013F7 86 82            [24] 3927 	mov	dpl,@r0
      0013F9 08               [12] 3928 	inc	r0
      0013FA 86 83            [24] 3929 	mov	dph,@r0
      0013FC 08               [12] 3930 	inc	r0
      0013FD 86 F0            [24] 3931 	mov	b,@r0
      0013FF 12r00r00         [24] 3932 	lcall	__gptrget
      001402 FA               [12] 3933 	mov	r2,a
      001403 A3               [24] 3934 	inc	dptr
      001404 12r00r00         [24] 3935 	lcall	__gptrget
      001407 FB               [12] 3936 	mov	r3,a
      001408 A3               [24] 3937 	inc	dptr
      001409 12r00r00         [24] 3938 	lcall	__gptrget
      00140C FC               [12] 3939 	mov	r4,a
      00140D C0 07            [24] 3940 	push	ar7
      00140F C0 06            [24] 3941 	push	ar6
      001411 C0 05            [24] 3942 	push	ar5
      001413 8A 82            [24] 3943 	mov	dpl,r2
      001415 8B 83            [24] 3944 	mov	dph,r3
      001417 8C F0            [24] 3945 	mov	b,r4
      001419 12r00r00         [24] 3946 	lcall	_stack_pop
      00141C AB 82            [24] 3947 	mov	r3,dpl
      00141E AC 83            [24] 3948 	mov	r4,dph
      001420 15 81            [12] 3949 	dec	sp
      001422 15 81            [12] 3950 	dec	sp
      001424 15 81            [12] 3951 	dec	sp
      001426 EB               [12] 3952 	mov	a,r3
      001427 4C               [12] 3953 	orl	a,r4
      001428 70 63            [24] 3954 	jnz	00147$
                                   3955 ;	calc.c:199: printstr("\r\nsecondary stack underflow\r\n");
      00142A 7Fr77            [12] 3956 	mov	r7,#___str_11
      00142C 7Es00            [12] 3957 	mov	r6,#(___str_11 >> 8)
      00142E 7D 80            [12] 3958 	mov	r5,#0x80
                                   3959 ;	calc.c:51: return;
      001430                       3960 00423$:
                                   3961 ;	calc.c:49: for (; *s; s++) putchar(*s);
      001430 8F 82            [24] 3962 	mov	dpl,r7
      001432 8E 83            [24] 3963 	mov	dph,r6
      001434 8D F0            [24] 3964 	mov	b,r5
      001436 12r00r00         [24] 3965 	lcall	__gptrget
      001439 FC               [12] 3966 	mov	r4,a
      00143A 60 10            [24] 3967 	jz	00301$
      00143C 7B 00            [12] 3968 	mov	r3,#0x00
      00143E 8C 82            [24] 3969 	mov	dpl,r4
      001440 8B 83            [24] 3970 	mov	dph,r3
      001442 12r00r00         [24] 3971 	lcall	_putchar
      001445 0F               [12] 3972 	inc	r7
                                   3973 ;	calc.c:199: printstr("\r\nsecondary stack underflow\r\n");
      001446 BF 00 E7         [24] 3974 	cjne	r7,#0x00,00423$
      001449 0E               [12] 3975 	inc	r6
      00144A 80 E4            [24] 3976 	sjmp	00423$
      00144C                       3977 00301$:
                                   3978 ;	calc.c:200: (void)stack_push(ctx->ps, d0);
      00144C E5*00            [12] 3979 	mov	a,_bp
      00144E 24 07            [12] 3980 	add	a,#0x07
      001450 F8               [12] 3981 	mov	r0,a
      001451 86 82            [24] 3982 	mov	dpl,@r0
      001453 08               [12] 3983 	inc	r0
      001454 86 83            [24] 3984 	mov	dph,@r0
      001456 08               [12] 3985 	inc	r0
      001457 86 F0            [24] 3986 	mov	b,@r0
      001459 12r00r00         [24] 3987 	lcall	__gptrget
      00145C FA               [12] 3988 	mov	r2,a
      00145D A3               [24] 3989 	inc	dptr
      00145E 12r00r00         [24] 3990 	lcall	__gptrget
      001461 FB               [12] 3991 	mov	r3,a
      001462 A3               [24] 3992 	inc	dptr
      001463 12r00r00         [24] 3993 	lcall	__gptrget
      001466 FC               [12] 3994 	mov	r4,a
      001467 E5*00            [12] 3995 	mov	a,_bp
      001469 24 15            [12] 3996 	add	a,#0x15
      00146B F8               [12] 3997 	mov	r0,a
      00146C E6               [12] 3998 	mov	a,@r0
      00146D C0 E0            [24] 3999 	push	acc
      00146F 08               [12] 4000 	inc	r0
      001470 E6               [12] 4001 	mov	a,@r0
      001471 C0 E0            [24] 4002 	push	acc
      001473 08               [12] 4003 	inc	r0
      001474 E6               [12] 4004 	mov	a,@r0
      001475 C0 E0            [24] 4005 	push	acc
      001477 08               [12] 4006 	inc	r0
      001478 E6               [12] 4007 	mov	a,@r0
      001479 C0 E0            [24] 4008 	push	acc
      00147B 8A 82            [24] 4009 	mov	dpl,r2
      00147D 8B 83            [24] 4010 	mov	dph,r3
      00147F 8C F0            [24] 4011 	mov	b,r4
      001481 12r00r00         [24] 4012 	lcall	_stack_push
      001484 E5 81            [12] 4013 	mov	a,sp
      001486 24 FC            [12] 4014 	add	a,#0xfc
      001488 F5 81            [12] 4015 	mov	sp,a
      00148A 02r2ArBC         [24] 4016 	ljmp	00249$
      00148D                       4017 00147$:
                                   4018 ;	calc.c:202: (void)stack_push(ctx->ps, d1);
      00148D E5*00            [12] 4019 	mov	a,_bp
      00148F 24 07            [12] 4020 	add	a,#0x07
      001491 F8               [12] 4021 	mov	r0,a
      001492 86 82            [24] 4022 	mov	dpl,@r0
      001494 08               [12] 4023 	inc	r0
      001495 86 83            [24] 4024 	mov	dph,@r0
      001497 08               [12] 4025 	inc	r0
      001498 86 F0            [24] 4026 	mov	b,@r0
      00149A 12r00r00         [24] 4027 	lcall	__gptrget
      00149D FA               [12] 4028 	mov	r2,a
      00149E A3               [24] 4029 	inc	dptr
      00149F 12r00r00         [24] 4030 	lcall	__gptrget
      0014A2 FB               [12] 4031 	mov	r3,a
      0014A3 A3               [24] 4032 	inc	dptr
      0014A4 12r00r00         [24] 4033 	lcall	__gptrget
      0014A7 FC               [12] 4034 	mov	r4,a
      0014A8 E5*00            [12] 4035 	mov	a,_bp
      0014AA 24 19            [12] 4036 	add	a,#0x19
      0014AC F8               [12] 4037 	mov	r0,a
      0014AD E6               [12] 4038 	mov	a,@r0
      0014AE C0 E0            [24] 4039 	push	acc
      0014B0 08               [12] 4040 	inc	r0
      0014B1 E6               [12] 4041 	mov	a,@r0
      0014B2 C0 E0            [24] 4042 	push	acc
      0014B4 08               [12] 4043 	inc	r0
      0014B5 E6               [12] 4044 	mov	a,@r0
      0014B6 C0 E0            [24] 4045 	push	acc
      0014B8 08               [12] 4046 	inc	r0
      0014B9 E6               [12] 4047 	mov	a,@r0
      0014BA C0 E0            [24] 4048 	push	acc
      0014BC 8A 82            [24] 4049 	mov	dpl,r2
      0014BE 8B 83            [24] 4050 	mov	dph,r3
      0014C0 8C F0            [24] 4051 	mov	b,r4
      0014C2 12r00r00         [24] 4052 	lcall	_stack_push
      0014C5 E5 81            [12] 4053 	mov	a,sp
      0014C7 24 FC            [12] 4054 	add	a,#0xfc
      0014C9 F5 81            [12] 4055 	mov	sp,a
                                   4056 ;	calc.c:203: (void)stack_push(ctx->ss, d0);
      0014CB E5*00            [12] 4057 	mov	a,_bp
      0014CD 24 04            [12] 4058 	add	a,#0x04
      0014CF F8               [12] 4059 	mov	r0,a
      0014D0 86 82            [24] 4060 	mov	dpl,@r0
      0014D2 08               [12] 4061 	inc	r0
      0014D3 86 83            [24] 4062 	mov	dph,@r0
      0014D5 08               [12] 4063 	inc	r0
      0014D6 86 F0            [24] 4064 	mov	b,@r0
      0014D8 12r00r00         [24] 4065 	lcall	__gptrget
      0014DB FA               [12] 4066 	mov	r2,a
      0014DC A3               [24] 4067 	inc	dptr
      0014DD 12r00r00         [24] 4068 	lcall	__gptrget
      0014E0 FB               [12] 4069 	mov	r3,a
      0014E1 A3               [24] 4070 	inc	dptr
      0014E2 12r00r00         [24] 4071 	lcall	__gptrget
      0014E5 FC               [12] 4072 	mov	r4,a
      0014E6 E5*00            [12] 4073 	mov	a,_bp
      0014E8 24 15            [12] 4074 	add	a,#0x15
      0014EA F8               [12] 4075 	mov	r0,a
      0014EB E6               [12] 4076 	mov	a,@r0
      0014EC C0 E0            [24] 4077 	push	acc
      0014EE 08               [12] 4078 	inc	r0
      0014EF E6               [12] 4079 	mov	a,@r0
      0014F0 C0 E0            [24] 4080 	push	acc
      0014F2 08               [12] 4081 	inc	r0
      0014F3 E6               [12] 4082 	mov	a,@r0
      0014F4 C0 E0            [24] 4083 	push	acc
      0014F6 08               [12] 4084 	inc	r0
      0014F7 E6               [12] 4085 	mov	a,@r0
      0014F8 C0 E0            [24] 4086 	push	acc
      0014FA 8A 82            [24] 4087 	mov	dpl,r2
      0014FC 8B 83            [24] 4088 	mov	dph,r3
      0014FE 8C F0            [24] 4089 	mov	b,r4
      001500 12r00r00         [24] 4090 	lcall	_stack_push
      001503 E5 81            [12] 4091 	mov	a,sp
      001505 24 FC            [12] 4092 	add	a,#0xfc
      001507 F5 81            [12] 4093 	mov	sp,a
                                   4094 ;	calc.c:206: break;
      001509 02r2ArBC         [24] 4095 	ljmp	00249$
                                   4096 ;	calc.c:207: case 'X':
      00150C                       4097 00152$:
                                   4098 ;	calc.c:208: t0 = ctx->ps;
      00150C E5*00            [12] 4099 	mov	a,_bp
      00150E 24 12            [12] 4100 	add	a,#0x12
      001510 F8               [12] 4101 	mov	r0,a
      001511 E5*00            [12] 4102 	mov	a,_bp
      001513 24 0B            [12] 4103 	add	a,#0x0b
      001515 F9               [12] 4104 	mov	r1,a
      001516 74 13            [12] 4105 	mov	a,#0x13
      001518 26               [12] 4106 	add	a,@r0
      001519 F7               [12] 4107 	mov	@r1,a
      00151A 74 40            [12] 4108 	mov	a,#0x40
      00151C 08               [12] 4109 	inc	r0
      00151D 36               [12] 4110 	addc	a,@r0
      00151E 09               [12] 4111 	inc	r1
      00151F F7               [12] 4112 	mov	@r1,a
      001520 08               [12] 4113 	inc	r0
      001521 09               [12] 4114 	inc	r1
      001522 E6               [12] 4115 	mov	a,@r0
      001523 F7               [12] 4116 	mov	@r1,a
      001524 E5*00            [12] 4117 	mov	a,_bp
      001526 24 0B            [12] 4118 	add	a,#0x0b
      001528 F8               [12] 4119 	mov	r0,a
      001529 86 82            [24] 4120 	mov	dpl,@r0
      00152B 08               [12] 4121 	inc	r0
      00152C 86 83            [24] 4122 	mov	dph,@r0
      00152E 08               [12] 4123 	inc	r0
      00152F 86 F0            [24] 4124 	mov	b,@r0
      001531 12r00r00         [24] 4125 	lcall	__gptrget
      001534 FF               [12] 4126 	mov	r7,a
      001535 A3               [24] 4127 	inc	dptr
      001536 12r00r00         [24] 4128 	lcall	__gptrget
      001539 FE               [12] 4129 	mov	r6,a
      00153A A3               [24] 4130 	inc	dptr
      00153B 12r00r00         [24] 4131 	lcall	__gptrget
      00153E FD               [12] 4132 	mov	r5,a
                                   4133 ;	calc.c:209: ctx->ps = ctx->ss;
      00153F E5*00            [12] 4134 	mov	a,_bp
      001541 24 12            [12] 4135 	add	a,#0x12
      001543 F8               [12] 4136 	mov	r0,a
      001544 E5*00            [12] 4137 	mov	a,_bp
      001546 24 07            [12] 4138 	add	a,#0x07
      001548 F9               [12] 4139 	mov	r1,a
      001549 74 16            [12] 4140 	mov	a,#0x16
      00154B 26               [12] 4141 	add	a,@r0
      00154C F7               [12] 4142 	mov	@r1,a
      00154D 74 40            [12] 4143 	mov	a,#0x40
      00154F 08               [12] 4144 	inc	r0
      001550 36               [12] 4145 	addc	a,@r0
      001551 09               [12] 4146 	inc	r1
      001552 F7               [12] 4147 	mov	@r1,a
      001553 08               [12] 4148 	inc	r0
      001554 09               [12] 4149 	inc	r1
      001555 E6               [12] 4150 	mov	a,@r0
      001556 F7               [12] 4151 	mov	@r1,a
      001557 E5*00            [12] 4152 	mov	a,_bp
      001559 24 07            [12] 4153 	add	a,#0x07
      00155B F8               [12] 4154 	mov	r0,a
      00155C 86 82            [24] 4155 	mov	dpl,@r0
      00155E 08               [12] 4156 	inc	r0
      00155F 86 83            [24] 4157 	mov	dph,@r0
      001561 08               [12] 4158 	inc	r0
      001562 86 F0            [24] 4159 	mov	b,@r0
      001564 12r00r00         [24] 4160 	lcall	__gptrget
      001567 FA               [12] 4161 	mov	r2,a
      001568 A3               [24] 4162 	inc	dptr
      001569 12r00r00         [24] 4163 	lcall	__gptrget
      00156C FB               [12] 4164 	mov	r3,a
      00156D A3               [24] 4165 	inc	dptr
      00156E 12r00r00         [24] 4166 	lcall	__gptrget
      001571 FC               [12] 4167 	mov	r4,a
      001572 E5*00            [12] 4168 	mov	a,_bp
      001574 24 0B            [12] 4169 	add	a,#0x0b
      001576 F8               [12] 4170 	mov	r0,a
      001577 86 82            [24] 4171 	mov	dpl,@r0
      001579 08               [12] 4172 	inc	r0
      00157A 86 83            [24] 4173 	mov	dph,@r0
      00157C 08               [12] 4174 	inc	r0
      00157D 86 F0            [24] 4175 	mov	b,@r0
      00157F EA               [12] 4176 	mov	a,r2
      001580 12r00r00         [24] 4177 	lcall	__gptrput
      001583 A3               [24] 4178 	inc	dptr
      001584 EB               [12] 4179 	mov	a,r3
      001585 12r00r00         [24] 4180 	lcall	__gptrput
      001588 A3               [24] 4181 	inc	dptr
      001589 EC               [12] 4182 	mov	a,r4
      00158A 12r00r00         [24] 4183 	lcall	__gptrput
                                   4184 ;	calc.c:210: ctx->ss = t0;
      00158D E5*00            [12] 4185 	mov	a,_bp
      00158F 24 07            [12] 4186 	add	a,#0x07
      001591 F8               [12] 4187 	mov	r0,a
      001592 86 82            [24] 4188 	mov	dpl,@r0
      001594 08               [12] 4189 	inc	r0
      001595 86 83            [24] 4190 	mov	dph,@r0
      001597 08               [12] 4191 	inc	r0
      001598 86 F0            [24] 4192 	mov	b,@r0
      00159A EF               [12] 4193 	mov	a,r7
      00159B 12r00r00         [24] 4194 	lcall	__gptrput
      00159E A3               [24] 4195 	inc	dptr
      00159F EE               [12] 4196 	mov	a,r6
      0015A0 12r00r00         [24] 4197 	lcall	__gptrput
      0015A3 A3               [24] 4198 	inc	dptr
      0015A4 ED               [12] 4199 	mov	a,r5
      0015A5 12r00r00         [24] 4200 	lcall	__gptrput
                                   4201 ;	calc.c:211: break;
      0015A8 02r2ArBC         [24] 4202 	ljmp	00249$
                                   4203 ;	calc.c:212: case '+':
      0015AB                       4204 00153$:
                                   4205 ;	calc.c:213: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      0015AB E5*00            [12] 4206 	mov	a,_bp
      0015AD 24 15            [12] 4207 	add	a,#0x15
      0015AF FF               [12] 4208 	mov	r7,a
      0015B0 7E 00            [12] 4209 	mov	r6,#0x00
      0015B2 7D 40            [12] 4210 	mov	r5,#0x40
      0015B4 E5*00            [12] 4211 	mov	a,_bp
      0015B6 24 12            [12] 4212 	add	a,#0x12
      0015B8 F8               [12] 4213 	mov	r0,a
      0015B9 E5*00            [12] 4214 	mov	a,_bp
      0015BB 24 0B            [12] 4215 	add	a,#0x0b
      0015BD F9               [12] 4216 	mov	r1,a
      0015BE 74 13            [12] 4217 	mov	a,#0x13
      0015C0 26               [12] 4218 	add	a,@r0
      0015C1 F7               [12] 4219 	mov	@r1,a
      0015C2 74 40            [12] 4220 	mov	a,#0x40
      0015C4 08               [12] 4221 	inc	r0
      0015C5 36               [12] 4222 	addc	a,@r0
      0015C6 09               [12] 4223 	inc	r1
      0015C7 F7               [12] 4224 	mov	@r1,a
      0015C8 08               [12] 4225 	inc	r0
      0015C9 09               [12] 4226 	inc	r1
      0015CA E6               [12] 4227 	mov	a,@r0
      0015CB F7               [12] 4228 	mov	@r1,a
      0015CC E5*00            [12] 4229 	mov	a,_bp
      0015CE 24 0B            [12] 4230 	add	a,#0x0b
      0015D0 F8               [12] 4231 	mov	r0,a
      0015D1 86 82            [24] 4232 	mov	dpl,@r0
      0015D3 08               [12] 4233 	inc	r0
      0015D4 86 83            [24] 4234 	mov	dph,@r0
      0015D6 08               [12] 4235 	inc	r0
      0015D7 86 F0            [24] 4236 	mov	b,@r0
      0015D9 12r00r00         [24] 4237 	lcall	__gptrget
      0015DC FA               [12] 4238 	mov	r2,a
      0015DD A3               [24] 4239 	inc	dptr
      0015DE 12r00r00         [24] 4240 	lcall	__gptrget
      0015E1 FB               [12] 4241 	mov	r3,a
      0015E2 A3               [24] 4242 	inc	dptr
      0015E3 12r00r00         [24] 4243 	lcall	__gptrget
      0015E6 FC               [12] 4244 	mov	r4,a
      0015E7 C0 07            [24] 4245 	push	ar7
      0015E9 C0 06            [24] 4246 	push	ar6
      0015EB C0 05            [24] 4247 	push	ar5
      0015ED 8A 82            [24] 4248 	mov	dpl,r2
      0015EF 8B 83            [24] 4249 	mov	dph,r3
      0015F1 8C F0            [24] 4250 	mov	b,r4
      0015F3 12r00r00         [24] 4251 	lcall	_stack_pop
      0015F6 AB 82            [24] 4252 	mov	r3,dpl
      0015F8 AC 83            [24] 4253 	mov	r4,dph
      0015FA 15 81            [12] 4254 	dec	sp
      0015FC 15 81            [12] 4255 	dec	sp
      0015FE 15 81            [12] 4256 	dec	sp
      001600 EB               [12] 4257 	mov	a,r3
      001601 4C               [12] 4258 	orl	a,r4
      001602 70 25            [24] 4259 	jnz	00158$
      001604 7Fr46            [12] 4260 	mov	r7,#___str_9
      001606 7Es00            [12] 4261 	mov	r6,#(___str_9 >> 8)
      001608 7D 80            [12] 4262 	mov	r5,#0x80
                                   4263 ;	calc.c:51: return;
      00160A                       4264 00426$:
                                   4265 ;	calc.c:49: for (; *s; s++) putchar(*s);
      00160A 8F 82            [24] 4266 	mov	dpl,r7
      00160C 8E 83            [24] 4267 	mov	dph,r6
      00160E 8D F0            [24] 4268 	mov	b,r5
      001610 12r00r00         [24] 4269 	lcall	__gptrget
      001613 FC               [12] 4270 	mov	r4,a
      001614 70 03            [24] 4271 	jnz	01326$
      001616 02r2ArBC         [24] 4272 	ljmp	00249$
      001619                       4273 01326$:
      001619 7B 00            [12] 4274 	mov	r3,#0x00
      00161B 8C 82            [24] 4275 	mov	dpl,r4
      00161D 8B 83            [24] 4276 	mov	dph,r3
      00161F 12r00r00         [24] 4277 	lcall	_putchar
      001622 0F               [12] 4278 	inc	r7
                                   4279 ;	calc.c:213: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      001623 BF 00 E4         [24] 4280 	cjne	r7,#0x00,00426$
      001626 0E               [12] 4281 	inc	r6
      001627 80 E1            [24] 4282 	sjmp	00426$
      001629                       4283 00158$:
                                   4284 ;	calc.c:214: else if (!stack_pop(ctx->ps, &d1)) {
      001629 E5*00            [12] 4285 	mov	a,_bp
      00162B 24 19            [12] 4286 	add	a,#0x19
      00162D FF               [12] 4287 	mov	r7,a
      00162E 7E 00            [12] 4288 	mov	r6,#0x00
      001630 7D 40            [12] 4289 	mov	r5,#0x40
      001632 E5*00            [12] 4290 	mov	a,_bp
      001634 24 0B            [12] 4291 	add	a,#0x0b
      001636 F8               [12] 4292 	mov	r0,a
      001637 86 82            [24] 4293 	mov	dpl,@r0
      001639 08               [12] 4294 	inc	r0
      00163A 86 83            [24] 4295 	mov	dph,@r0
      00163C 08               [12] 4296 	inc	r0
      00163D 86 F0            [24] 4297 	mov	b,@r0
      00163F 12r00r00         [24] 4298 	lcall	__gptrget
      001642 FA               [12] 4299 	mov	r2,a
      001643 A3               [24] 4300 	inc	dptr
      001644 12r00r00         [24] 4301 	lcall	__gptrget
      001647 FB               [12] 4302 	mov	r3,a
      001648 A3               [24] 4303 	inc	dptr
      001649 12r00r00         [24] 4304 	lcall	__gptrget
      00164C FC               [12] 4305 	mov	r4,a
      00164D C0 07            [24] 4306 	push	ar7
      00164F C0 06            [24] 4307 	push	ar6
      001651 C0 05            [24] 4308 	push	ar5
      001653 8A 82            [24] 4309 	mov	dpl,r2
      001655 8B 83            [24] 4310 	mov	dph,r3
      001657 8C F0            [24] 4311 	mov	b,r4
      001659 12r00r00         [24] 4312 	lcall	_stack_pop
      00165C AB 82            [24] 4313 	mov	r3,dpl
      00165E AC 83            [24] 4314 	mov	r4,dph
      001660 15 81            [12] 4315 	dec	sp
      001662 15 81            [12] 4316 	dec	sp
      001664 15 81            [12] 4317 	dec	sp
      001666 EB               [12] 4318 	mov	a,r3
      001667 4C               [12] 4319 	orl	a,r4
      001668 70 63            [24] 4320 	jnz	00155$
                                   4321 ;	calc.c:215: (void)stack_push(ctx->ps, d0);
      00166A E5*00            [12] 4322 	mov	a,_bp
      00166C 24 0B            [12] 4323 	add	a,#0x0b
      00166E F8               [12] 4324 	mov	r0,a
      00166F 86 82            [24] 4325 	mov	dpl,@r0
      001671 08               [12] 4326 	inc	r0
      001672 86 83            [24] 4327 	mov	dph,@r0
      001674 08               [12] 4328 	inc	r0
      001675 86 F0            [24] 4329 	mov	b,@r0
      001677 12r00r00         [24] 4330 	lcall	__gptrget
      00167A FA               [12] 4331 	mov	r2,a
      00167B A3               [24] 4332 	inc	dptr
      00167C 12r00r00         [24] 4333 	lcall	__gptrget
      00167F FB               [12] 4334 	mov	r3,a
      001680 A3               [24] 4335 	inc	dptr
      001681 12r00r00         [24] 4336 	lcall	__gptrget
      001684 FC               [12] 4337 	mov	r4,a
      001685 E5*00            [12] 4338 	mov	a,_bp
      001687 24 15            [12] 4339 	add	a,#0x15
      001689 F8               [12] 4340 	mov	r0,a
      00168A E6               [12] 4341 	mov	a,@r0
      00168B C0 E0            [24] 4342 	push	acc
      00168D 08               [12] 4343 	inc	r0
      00168E E6               [12] 4344 	mov	a,@r0
      00168F C0 E0            [24] 4345 	push	acc
      001691 08               [12] 4346 	inc	r0
      001692 E6               [12] 4347 	mov	a,@r0
      001693 C0 E0            [24] 4348 	push	acc
      001695 08               [12] 4349 	inc	r0
      001696 E6               [12] 4350 	mov	a,@r0
      001697 C0 E0            [24] 4351 	push	acc
      001699 8A 82            [24] 4352 	mov	dpl,r2
      00169B 8B 83            [24] 4353 	mov	dph,r3
      00169D 8C F0            [24] 4354 	mov	b,r4
      00169F 12r00r00         [24] 4355 	lcall	_stack_push
      0016A2 E5 81            [12] 4356 	mov	a,sp
      0016A4 24 FC            [12] 4357 	add	a,#0xfc
      0016A6 F5 81            [12] 4358 	mov	sp,a
                                   4359 ;	calc.c:216: printstr("\r\nstack underflow\r\n");
      0016A8 7Fr46            [12] 4360 	mov	r7,#___str_9
      0016AA 7Es00            [12] 4361 	mov	r6,#(___str_9 >> 8)
      0016AC 7D 80            [12] 4362 	mov	r5,#0x80
                                   4363 ;	calc.c:51: return;
      0016AE                       4364 00429$:
                                   4365 ;	calc.c:49: for (; *s; s++) putchar(*s);
      0016AE 8F 82            [24] 4366 	mov	dpl,r7
      0016B0 8E 83            [24] 4367 	mov	dph,r6
      0016B2 8D F0            [24] 4368 	mov	b,r5
      0016B4 12r00r00         [24] 4369 	lcall	__gptrget
      0016B7 FC               [12] 4370 	mov	r4,a
      0016B8 70 03            [24] 4371 	jnz	01329$
      0016BA 02r2ArBC         [24] 4372 	ljmp	00249$
      0016BD                       4373 01329$:
      0016BD 7B 00            [12] 4374 	mov	r3,#0x00
      0016BF 8C 82            [24] 4375 	mov	dpl,r4
      0016C1 8B 83            [24] 4376 	mov	dph,r3
      0016C3 12r00r00         [24] 4377 	lcall	_putchar
      0016C6 0F               [12] 4378 	inc	r7
                                   4379 ;	calc.c:216: printstr("\r\nstack underflow\r\n");
      0016C7 BF 00 E4         [24] 4380 	cjne	r7,#0x00,00429$
      0016CA 0E               [12] 4381 	inc	r6
      0016CB 80 E1            [24] 4382 	sjmp	00429$
      0016CD                       4383 00155$:
                                   4384 ;	calc.c:218: d1 += d0;
      0016CD E5*00            [12] 4385 	mov	a,_bp
      0016CF 24 19            [12] 4386 	add	a,#0x19
      0016D1 F8               [12] 4387 	mov	r0,a
      0016D2 E5*00            [12] 4388 	mov	a,_bp
      0016D4 24 15            [12] 4389 	add	a,#0x15
      0016D6 F9               [12] 4390 	mov	r1,a
      0016D7 E7               [12] 4391 	mov	a,@r1
      0016D8 26               [12] 4392 	add	a,@r0
      0016D9 F6               [12] 4393 	mov	@r0,a
      0016DA 09               [12] 4394 	inc	r1
      0016DB E7               [12] 4395 	mov	a,@r1
      0016DC 08               [12] 4396 	inc	r0
      0016DD 36               [12] 4397 	addc	a,@r0
      0016DE F6               [12] 4398 	mov	@r0,a
      0016DF 09               [12] 4399 	inc	r1
      0016E0 E7               [12] 4400 	mov	a,@r1
      0016E1 08               [12] 4401 	inc	r0
      0016E2 36               [12] 4402 	addc	a,@r0
      0016E3 F6               [12] 4403 	mov	@r0,a
      0016E4 09               [12] 4404 	inc	r1
      0016E5 E7               [12] 4405 	mov	a,@r1
      0016E6 08               [12] 4406 	inc	r0
      0016E7 36               [12] 4407 	addc	a,@r0
      0016E8 F6               [12] 4408 	mov	@r0,a
                                   4409 ;	calc.c:219: (void)stack_push(ctx->ps, d1);
      0016E9 E5*00            [12] 4410 	mov	a,_bp
      0016EB 24 0B            [12] 4411 	add	a,#0x0b
      0016ED F8               [12] 4412 	mov	r0,a
      0016EE 86 82            [24] 4413 	mov	dpl,@r0
      0016F0 08               [12] 4414 	inc	r0
      0016F1 86 83            [24] 4415 	mov	dph,@r0
      0016F3 08               [12] 4416 	inc	r0
      0016F4 86 F0            [24] 4417 	mov	b,@r0
      0016F6 12r00r00         [24] 4418 	lcall	__gptrget
      0016F9 FA               [12] 4419 	mov	r2,a
      0016FA A3               [24] 4420 	inc	dptr
      0016FB 12r00r00         [24] 4421 	lcall	__gptrget
      0016FE FB               [12] 4422 	mov	r3,a
      0016FF A3               [24] 4423 	inc	dptr
      001700 12r00r00         [24] 4424 	lcall	__gptrget
      001703 FC               [12] 4425 	mov	r4,a
      001704 E5*00            [12] 4426 	mov	a,_bp
      001706 24 19            [12] 4427 	add	a,#0x19
      001708 F8               [12] 4428 	mov	r0,a
      001709 E6               [12] 4429 	mov	a,@r0
      00170A C0 E0            [24] 4430 	push	acc
      00170C 08               [12] 4431 	inc	r0
      00170D E6               [12] 4432 	mov	a,@r0
      00170E C0 E0            [24] 4433 	push	acc
      001710 08               [12] 4434 	inc	r0
      001711 E6               [12] 4435 	mov	a,@r0
      001712 C0 E0            [24] 4436 	push	acc
      001714 08               [12] 4437 	inc	r0
      001715 E6               [12] 4438 	mov	a,@r0
      001716 C0 E0            [24] 4439 	push	acc
      001718 8A 82            [24] 4440 	mov	dpl,r2
      00171A 8B 83            [24] 4441 	mov	dph,r3
      00171C 8C F0            [24] 4442 	mov	b,r4
      00171E 12r00r00         [24] 4443 	lcall	_stack_push
      001721 E5 81            [12] 4444 	mov	a,sp
      001723 24 FC            [12] 4445 	add	a,#0xfc
      001725 F5 81            [12] 4446 	mov	sp,a
                                   4447 ;	calc.c:221: break;
      001727 02r2ArBC         [24] 4448 	ljmp	00249$
                                   4449 ;	calc.c:222: case '-':
      00172A                       4450 00160$:
                                   4451 ;	calc.c:223: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      00172A E5*00            [12] 4452 	mov	a,_bp
      00172C 24 15            [12] 4453 	add	a,#0x15
      00172E FF               [12] 4454 	mov	r7,a
      00172F 7E 00            [12] 4455 	mov	r6,#0x00
      001731 7D 40            [12] 4456 	mov	r5,#0x40
      001733 E5*00            [12] 4457 	mov	a,_bp
      001735 24 12            [12] 4458 	add	a,#0x12
      001737 F8               [12] 4459 	mov	r0,a
      001738 E5*00            [12] 4460 	mov	a,_bp
      00173A 24 0B            [12] 4461 	add	a,#0x0b
      00173C F9               [12] 4462 	mov	r1,a
      00173D 74 13            [12] 4463 	mov	a,#0x13
      00173F 26               [12] 4464 	add	a,@r0
      001740 F7               [12] 4465 	mov	@r1,a
      001741 74 40            [12] 4466 	mov	a,#0x40
      001743 08               [12] 4467 	inc	r0
      001744 36               [12] 4468 	addc	a,@r0
      001745 09               [12] 4469 	inc	r1
      001746 F7               [12] 4470 	mov	@r1,a
      001747 08               [12] 4471 	inc	r0
      001748 09               [12] 4472 	inc	r1
      001749 E6               [12] 4473 	mov	a,@r0
      00174A F7               [12] 4474 	mov	@r1,a
      00174B E5*00            [12] 4475 	mov	a,_bp
      00174D 24 0B            [12] 4476 	add	a,#0x0b
      00174F F8               [12] 4477 	mov	r0,a
      001750 86 82            [24] 4478 	mov	dpl,@r0
      001752 08               [12] 4479 	inc	r0
      001753 86 83            [24] 4480 	mov	dph,@r0
      001755 08               [12] 4481 	inc	r0
      001756 86 F0            [24] 4482 	mov	b,@r0
      001758 12r00r00         [24] 4483 	lcall	__gptrget
      00175B FA               [12] 4484 	mov	r2,a
      00175C A3               [24] 4485 	inc	dptr
      00175D 12r00r00         [24] 4486 	lcall	__gptrget
      001760 FB               [12] 4487 	mov	r3,a
      001761 A3               [24] 4488 	inc	dptr
      001762 12r00r00         [24] 4489 	lcall	__gptrget
      001765 FC               [12] 4490 	mov	r4,a
      001766 C0 07            [24] 4491 	push	ar7
      001768 C0 06            [24] 4492 	push	ar6
      00176A C0 05            [24] 4493 	push	ar5
      00176C 8A 82            [24] 4494 	mov	dpl,r2
      00176E 8B 83            [24] 4495 	mov	dph,r3
      001770 8C F0            [24] 4496 	mov	b,r4
      001772 12r00r00         [24] 4497 	lcall	_stack_pop
      001775 AB 82            [24] 4498 	mov	r3,dpl
      001777 AC 83            [24] 4499 	mov	r4,dph
      001779 15 81            [12] 4500 	dec	sp
      00177B 15 81            [12] 4501 	dec	sp
      00177D 15 81            [12] 4502 	dec	sp
      00177F EB               [12] 4503 	mov	a,r3
      001780 4C               [12] 4504 	orl	a,r4
      001781 70 25            [24] 4505 	jnz	00165$
      001783 7Fr46            [12] 4506 	mov	r7,#___str_9
      001785 7Es00            [12] 4507 	mov	r6,#(___str_9 >> 8)
      001787 7D 80            [12] 4508 	mov	r5,#0x80
                                   4509 ;	calc.c:51: return;
      001789                       4510 00432$:
                                   4511 ;	calc.c:49: for (; *s; s++) putchar(*s);
      001789 8F 82            [24] 4512 	mov	dpl,r7
      00178B 8E 83            [24] 4513 	mov	dph,r6
      00178D 8D F0            [24] 4514 	mov	b,r5
      00178F 12r00r00         [24] 4515 	lcall	__gptrget
      001792 FC               [12] 4516 	mov	r4,a
      001793 70 03            [24] 4517 	jnz	01332$
      001795 02r2ArBC         [24] 4518 	ljmp	00249$
      001798                       4519 01332$:
      001798 7B 00            [12] 4520 	mov	r3,#0x00
      00179A 8C 82            [24] 4521 	mov	dpl,r4
      00179C 8B 83            [24] 4522 	mov	dph,r3
      00179E 12r00r00         [24] 4523 	lcall	_putchar
      0017A1 0F               [12] 4524 	inc	r7
                                   4525 ;	calc.c:223: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      0017A2 BF 00 E4         [24] 4526 	cjne	r7,#0x00,00432$
      0017A5 0E               [12] 4527 	inc	r6
      0017A6 80 E1            [24] 4528 	sjmp	00432$
      0017A8                       4529 00165$:
                                   4530 ;	calc.c:224: else if (!stack_pop(ctx->ps, &d1)) {
      0017A8 E5*00            [12] 4531 	mov	a,_bp
      0017AA 24 19            [12] 4532 	add	a,#0x19
      0017AC FF               [12] 4533 	mov	r7,a
      0017AD 7E 00            [12] 4534 	mov	r6,#0x00
      0017AF 7D 40            [12] 4535 	mov	r5,#0x40
      0017B1 E5*00            [12] 4536 	mov	a,_bp
      0017B3 24 0B            [12] 4537 	add	a,#0x0b
      0017B5 F8               [12] 4538 	mov	r0,a
      0017B6 86 82            [24] 4539 	mov	dpl,@r0
      0017B8 08               [12] 4540 	inc	r0
      0017B9 86 83            [24] 4541 	mov	dph,@r0
      0017BB 08               [12] 4542 	inc	r0
      0017BC 86 F0            [24] 4543 	mov	b,@r0
      0017BE 12r00r00         [24] 4544 	lcall	__gptrget
      0017C1 FA               [12] 4545 	mov	r2,a
      0017C2 A3               [24] 4546 	inc	dptr
      0017C3 12r00r00         [24] 4547 	lcall	__gptrget
      0017C6 FB               [12] 4548 	mov	r3,a
      0017C7 A3               [24] 4549 	inc	dptr
      0017C8 12r00r00         [24] 4550 	lcall	__gptrget
      0017CB FC               [12] 4551 	mov	r4,a
      0017CC C0 07            [24] 4552 	push	ar7
      0017CE C0 06            [24] 4553 	push	ar6
      0017D0 C0 05            [24] 4554 	push	ar5
      0017D2 8A 82            [24] 4555 	mov	dpl,r2
      0017D4 8B 83            [24] 4556 	mov	dph,r3
      0017D6 8C F0            [24] 4557 	mov	b,r4
      0017D8 12r00r00         [24] 4558 	lcall	_stack_pop
      0017DB AB 82            [24] 4559 	mov	r3,dpl
      0017DD AC 83            [24] 4560 	mov	r4,dph
      0017DF 15 81            [12] 4561 	dec	sp
      0017E1 15 81            [12] 4562 	dec	sp
      0017E3 15 81            [12] 4563 	dec	sp
      0017E5 EB               [12] 4564 	mov	a,r3
      0017E6 4C               [12] 4565 	orl	a,r4
      0017E7 70 63            [24] 4566 	jnz	00162$
                                   4567 ;	calc.c:225: (void)stack_push(ctx->ps, d0);
      0017E9 E5*00            [12] 4568 	mov	a,_bp
      0017EB 24 0B            [12] 4569 	add	a,#0x0b
      0017ED F8               [12] 4570 	mov	r0,a
      0017EE 86 82            [24] 4571 	mov	dpl,@r0
      0017F0 08               [12] 4572 	inc	r0
      0017F1 86 83            [24] 4573 	mov	dph,@r0
      0017F3 08               [12] 4574 	inc	r0
      0017F4 86 F0            [24] 4575 	mov	b,@r0
      0017F6 12r00r00         [24] 4576 	lcall	__gptrget
      0017F9 FA               [12] 4577 	mov	r2,a
      0017FA A3               [24] 4578 	inc	dptr
      0017FB 12r00r00         [24] 4579 	lcall	__gptrget
      0017FE FB               [12] 4580 	mov	r3,a
      0017FF A3               [24] 4581 	inc	dptr
      001800 12r00r00         [24] 4582 	lcall	__gptrget
      001803 FC               [12] 4583 	mov	r4,a
      001804 E5*00            [12] 4584 	mov	a,_bp
      001806 24 15            [12] 4585 	add	a,#0x15
      001808 F8               [12] 4586 	mov	r0,a
      001809 E6               [12] 4587 	mov	a,@r0
      00180A C0 E0            [24] 4588 	push	acc
      00180C 08               [12] 4589 	inc	r0
      00180D E6               [12] 4590 	mov	a,@r0
      00180E C0 E0            [24] 4591 	push	acc
      001810 08               [12] 4592 	inc	r0
      001811 E6               [12] 4593 	mov	a,@r0
      001812 C0 E0            [24] 4594 	push	acc
      001814 08               [12] 4595 	inc	r0
      001815 E6               [12] 4596 	mov	a,@r0
      001816 C0 E0            [24] 4597 	push	acc
      001818 8A 82            [24] 4598 	mov	dpl,r2
      00181A 8B 83            [24] 4599 	mov	dph,r3
      00181C 8C F0            [24] 4600 	mov	b,r4
      00181E 12r00r00         [24] 4601 	lcall	_stack_push
      001821 E5 81            [12] 4602 	mov	a,sp
      001823 24 FC            [12] 4603 	add	a,#0xfc
      001825 F5 81            [12] 4604 	mov	sp,a
                                   4605 ;	calc.c:226: printstr("\r\nstack underflow\r\n");
      001827 7Fr46            [12] 4606 	mov	r7,#___str_9
      001829 7Es00            [12] 4607 	mov	r6,#(___str_9 >> 8)
      00182B 7D 80            [12] 4608 	mov	r5,#0x80
                                   4609 ;	calc.c:51: return;
      00182D                       4610 00435$:
                                   4611 ;	calc.c:49: for (; *s; s++) putchar(*s);
      00182D 8F 82            [24] 4612 	mov	dpl,r7
      00182F 8E 83            [24] 4613 	mov	dph,r6
      001831 8D F0            [24] 4614 	mov	b,r5
      001833 12r00r00         [24] 4615 	lcall	__gptrget
      001836 FC               [12] 4616 	mov	r4,a
      001837 70 03            [24] 4617 	jnz	01335$
      001839 02r2ArBC         [24] 4618 	ljmp	00249$
      00183C                       4619 01335$:
      00183C 7B 00            [12] 4620 	mov	r3,#0x00
      00183E 8C 82            [24] 4621 	mov	dpl,r4
      001840 8B 83            [24] 4622 	mov	dph,r3
      001842 12r00r00         [24] 4623 	lcall	_putchar
      001845 0F               [12] 4624 	inc	r7
                                   4625 ;	calc.c:226: printstr("\r\nstack underflow\r\n");
      001846 BF 00 E4         [24] 4626 	cjne	r7,#0x00,00435$
      001849 0E               [12] 4627 	inc	r6
      00184A 80 E1            [24] 4628 	sjmp	00435$
      00184C                       4629 00162$:
                                   4630 ;	calc.c:228: d1 -= d0;
      00184C E5*00            [12] 4631 	mov	a,_bp
      00184E 24 19            [12] 4632 	add	a,#0x19
      001850 F8               [12] 4633 	mov	r0,a
      001851 E5*00            [12] 4634 	mov	a,_bp
      001853 24 15            [12] 4635 	add	a,#0x15
      001855 F9               [12] 4636 	mov	r1,a
      001856 E6               [12] 4637 	mov	a,@r0
      001857 C3               [12] 4638 	clr	c
      001858 97               [12] 4639 	subb	a,@r1
      001859 F6               [12] 4640 	mov	@r0,a
      00185A 08               [12] 4641 	inc	r0
      00185B E6               [12] 4642 	mov	a,@r0
      00185C 09               [12] 4643 	inc	r1
      00185D 97               [12] 4644 	subb	a,@r1
      00185E F6               [12] 4645 	mov	@r0,a
      00185F 08               [12] 4646 	inc	r0
      001860 E6               [12] 4647 	mov	a,@r0
      001861 09               [12] 4648 	inc	r1
      001862 97               [12] 4649 	subb	a,@r1
      001863 F6               [12] 4650 	mov	@r0,a
      001864 08               [12] 4651 	inc	r0
      001865 E6               [12] 4652 	mov	a,@r0
      001866 09               [12] 4653 	inc	r1
      001867 97               [12] 4654 	subb	a,@r1
      001868 F6               [12] 4655 	mov	@r0,a
                                   4656 ;	calc.c:229: (void)stack_push(ctx->ps, d1);
      001869 E5*00            [12] 4657 	mov	a,_bp
      00186B 24 0B            [12] 4658 	add	a,#0x0b
      00186D F8               [12] 4659 	mov	r0,a
      00186E 86 82            [24] 4660 	mov	dpl,@r0
      001870 08               [12] 4661 	inc	r0
      001871 86 83            [24] 4662 	mov	dph,@r0
      001873 08               [12] 4663 	inc	r0
      001874 86 F0            [24] 4664 	mov	b,@r0
      001876 12r00r00         [24] 4665 	lcall	__gptrget
      001879 FA               [12] 4666 	mov	r2,a
      00187A A3               [24] 4667 	inc	dptr
      00187B 12r00r00         [24] 4668 	lcall	__gptrget
      00187E FB               [12] 4669 	mov	r3,a
      00187F A3               [24] 4670 	inc	dptr
      001880 12r00r00         [24] 4671 	lcall	__gptrget
      001883 FC               [12] 4672 	mov	r4,a
      001884 E5*00            [12] 4673 	mov	a,_bp
      001886 24 19            [12] 4674 	add	a,#0x19
      001888 F8               [12] 4675 	mov	r0,a
      001889 E6               [12] 4676 	mov	a,@r0
      00188A C0 E0            [24] 4677 	push	acc
      00188C 08               [12] 4678 	inc	r0
      00188D E6               [12] 4679 	mov	a,@r0
      00188E C0 E0            [24] 4680 	push	acc
      001890 08               [12] 4681 	inc	r0
      001891 E6               [12] 4682 	mov	a,@r0
      001892 C0 E0            [24] 4683 	push	acc
      001894 08               [12] 4684 	inc	r0
      001895 E6               [12] 4685 	mov	a,@r0
      001896 C0 E0            [24] 4686 	push	acc
      001898 8A 82            [24] 4687 	mov	dpl,r2
      00189A 8B 83            [24] 4688 	mov	dph,r3
      00189C 8C F0            [24] 4689 	mov	b,r4
      00189E 12r00r00         [24] 4690 	lcall	_stack_push
      0018A1 E5 81            [12] 4691 	mov	a,sp
      0018A3 24 FC            [12] 4692 	add	a,#0xfc
      0018A5 F5 81            [12] 4693 	mov	sp,a
                                   4694 ;	calc.c:231: break;
      0018A7 02r2ArBC         [24] 4695 	ljmp	00249$
                                   4696 ;	calc.c:232: case '*':
      0018AA                       4697 00167$:
                                   4698 ;	calc.c:233: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      0018AA E5*00            [12] 4699 	mov	a,_bp
      0018AC 24 15            [12] 4700 	add	a,#0x15
      0018AE FF               [12] 4701 	mov	r7,a
      0018AF 7E 00            [12] 4702 	mov	r6,#0x00
      0018B1 7D 40            [12] 4703 	mov	r5,#0x40
      0018B3 E5*00            [12] 4704 	mov	a,_bp
      0018B5 24 12            [12] 4705 	add	a,#0x12
      0018B7 F8               [12] 4706 	mov	r0,a
      0018B8 E5*00            [12] 4707 	mov	a,_bp
      0018BA 24 0B            [12] 4708 	add	a,#0x0b
      0018BC F9               [12] 4709 	mov	r1,a
      0018BD 74 13            [12] 4710 	mov	a,#0x13
      0018BF 26               [12] 4711 	add	a,@r0
      0018C0 F7               [12] 4712 	mov	@r1,a
      0018C1 74 40            [12] 4713 	mov	a,#0x40
      0018C3 08               [12] 4714 	inc	r0
      0018C4 36               [12] 4715 	addc	a,@r0
      0018C5 09               [12] 4716 	inc	r1
      0018C6 F7               [12] 4717 	mov	@r1,a
      0018C7 08               [12] 4718 	inc	r0
      0018C8 09               [12] 4719 	inc	r1
      0018C9 E6               [12] 4720 	mov	a,@r0
      0018CA F7               [12] 4721 	mov	@r1,a
      0018CB E5*00            [12] 4722 	mov	a,_bp
      0018CD 24 0B            [12] 4723 	add	a,#0x0b
      0018CF F8               [12] 4724 	mov	r0,a
      0018D0 86 82            [24] 4725 	mov	dpl,@r0
      0018D2 08               [12] 4726 	inc	r0
      0018D3 86 83            [24] 4727 	mov	dph,@r0
      0018D5 08               [12] 4728 	inc	r0
      0018D6 86 F0            [24] 4729 	mov	b,@r0
      0018D8 12r00r00         [24] 4730 	lcall	__gptrget
      0018DB FA               [12] 4731 	mov	r2,a
      0018DC A3               [24] 4732 	inc	dptr
      0018DD 12r00r00         [24] 4733 	lcall	__gptrget
      0018E0 FB               [12] 4734 	mov	r3,a
      0018E1 A3               [24] 4735 	inc	dptr
      0018E2 12r00r00         [24] 4736 	lcall	__gptrget
      0018E5 FC               [12] 4737 	mov	r4,a
      0018E6 C0 07            [24] 4738 	push	ar7
      0018E8 C0 06            [24] 4739 	push	ar6
      0018EA C0 05            [24] 4740 	push	ar5
      0018EC 8A 82            [24] 4741 	mov	dpl,r2
      0018EE 8B 83            [24] 4742 	mov	dph,r3
      0018F0 8C F0            [24] 4743 	mov	b,r4
      0018F2 12r00r00         [24] 4744 	lcall	_stack_pop
      0018F5 AB 82            [24] 4745 	mov	r3,dpl
      0018F7 AC 83            [24] 4746 	mov	r4,dph
      0018F9 15 81            [12] 4747 	dec	sp
      0018FB 15 81            [12] 4748 	dec	sp
      0018FD 15 81            [12] 4749 	dec	sp
      0018FF EB               [12] 4750 	mov	a,r3
      001900 4C               [12] 4751 	orl	a,r4
      001901 70 25            [24] 4752 	jnz	00172$
      001903 7Fr46            [12] 4753 	mov	r7,#___str_9
      001905 7Es00            [12] 4754 	mov	r6,#(___str_9 >> 8)
      001907 7D 80            [12] 4755 	mov	r5,#0x80
                                   4756 ;	calc.c:51: return;
      001909                       4757 00438$:
                                   4758 ;	calc.c:49: for (; *s; s++) putchar(*s);
      001909 8F 82            [24] 4759 	mov	dpl,r7
      00190B 8E 83            [24] 4760 	mov	dph,r6
      00190D 8D F0            [24] 4761 	mov	b,r5
      00190F 12r00r00         [24] 4762 	lcall	__gptrget
      001912 FC               [12] 4763 	mov	r4,a
      001913 70 03            [24] 4764 	jnz	01338$
      001915 02r2ArBC         [24] 4765 	ljmp	00249$
      001918                       4766 01338$:
      001918 7B 00            [12] 4767 	mov	r3,#0x00
      00191A 8C 82            [24] 4768 	mov	dpl,r4
      00191C 8B 83            [24] 4769 	mov	dph,r3
      00191E 12r00r00         [24] 4770 	lcall	_putchar
      001921 0F               [12] 4771 	inc	r7
                                   4772 ;	calc.c:233: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      001922 BF 00 E4         [24] 4773 	cjne	r7,#0x00,00438$
      001925 0E               [12] 4774 	inc	r6
      001926 80 E1            [24] 4775 	sjmp	00438$
      001928                       4776 00172$:
                                   4777 ;	calc.c:234: else if (!stack_pop(ctx->ps, &d1)) {
      001928 E5*00            [12] 4778 	mov	a,_bp
      00192A 24 19            [12] 4779 	add	a,#0x19
      00192C FF               [12] 4780 	mov	r7,a
      00192D 7E 00            [12] 4781 	mov	r6,#0x00
      00192F 7D 40            [12] 4782 	mov	r5,#0x40
      001931 E5*00            [12] 4783 	mov	a,_bp
      001933 24 0B            [12] 4784 	add	a,#0x0b
      001935 F8               [12] 4785 	mov	r0,a
      001936 86 82            [24] 4786 	mov	dpl,@r0
      001938 08               [12] 4787 	inc	r0
      001939 86 83            [24] 4788 	mov	dph,@r0
      00193B 08               [12] 4789 	inc	r0
      00193C 86 F0            [24] 4790 	mov	b,@r0
      00193E 12r00r00         [24] 4791 	lcall	__gptrget
      001941 FA               [12] 4792 	mov	r2,a
      001942 A3               [24] 4793 	inc	dptr
      001943 12r00r00         [24] 4794 	lcall	__gptrget
      001946 FB               [12] 4795 	mov	r3,a
      001947 A3               [24] 4796 	inc	dptr
      001948 12r00r00         [24] 4797 	lcall	__gptrget
      00194B FC               [12] 4798 	mov	r4,a
      00194C C0 07            [24] 4799 	push	ar7
      00194E C0 06            [24] 4800 	push	ar6
      001950 C0 05            [24] 4801 	push	ar5
      001952 8A 82            [24] 4802 	mov	dpl,r2
      001954 8B 83            [24] 4803 	mov	dph,r3
      001956 8C F0            [24] 4804 	mov	b,r4
      001958 12r00r00         [24] 4805 	lcall	_stack_pop
      00195B AB 82            [24] 4806 	mov	r3,dpl
      00195D AC 83            [24] 4807 	mov	r4,dph
      00195F 15 81            [12] 4808 	dec	sp
      001961 15 81            [12] 4809 	dec	sp
      001963 15 81            [12] 4810 	dec	sp
      001965 EB               [12] 4811 	mov	a,r3
      001966 4C               [12] 4812 	orl	a,r4
      001967 70 63            [24] 4813 	jnz	00169$
                                   4814 ;	calc.c:235: (void)stack_push(ctx->ps, d0);
      001969 E5*00            [12] 4815 	mov	a,_bp
      00196B 24 0B            [12] 4816 	add	a,#0x0b
      00196D F8               [12] 4817 	mov	r0,a
      00196E 86 82            [24] 4818 	mov	dpl,@r0
      001970 08               [12] 4819 	inc	r0
      001971 86 83            [24] 4820 	mov	dph,@r0
      001973 08               [12] 4821 	inc	r0
      001974 86 F0            [24] 4822 	mov	b,@r0
      001976 12r00r00         [24] 4823 	lcall	__gptrget
      001979 FA               [12] 4824 	mov	r2,a
      00197A A3               [24] 4825 	inc	dptr
      00197B 12r00r00         [24] 4826 	lcall	__gptrget
      00197E FB               [12] 4827 	mov	r3,a
      00197F A3               [24] 4828 	inc	dptr
      001980 12r00r00         [24] 4829 	lcall	__gptrget
      001983 FC               [12] 4830 	mov	r4,a
      001984 E5*00            [12] 4831 	mov	a,_bp
      001986 24 15            [12] 4832 	add	a,#0x15
      001988 F8               [12] 4833 	mov	r0,a
      001989 E6               [12] 4834 	mov	a,@r0
      00198A C0 E0            [24] 4835 	push	acc
      00198C 08               [12] 4836 	inc	r0
      00198D E6               [12] 4837 	mov	a,@r0
      00198E C0 E0            [24] 4838 	push	acc
      001990 08               [12] 4839 	inc	r0
      001991 E6               [12] 4840 	mov	a,@r0
      001992 C0 E0            [24] 4841 	push	acc
      001994 08               [12] 4842 	inc	r0
      001995 E6               [12] 4843 	mov	a,@r0
      001996 C0 E0            [24] 4844 	push	acc
      001998 8A 82            [24] 4845 	mov	dpl,r2
      00199A 8B 83            [24] 4846 	mov	dph,r3
      00199C 8C F0            [24] 4847 	mov	b,r4
      00199E 12r00r00         [24] 4848 	lcall	_stack_push
      0019A1 E5 81            [12] 4849 	mov	a,sp
      0019A3 24 FC            [12] 4850 	add	a,#0xfc
      0019A5 F5 81            [12] 4851 	mov	sp,a
                                   4852 ;	calc.c:236: printstr("\r\nstack underflow\r\n");
      0019A7 7Fr46            [12] 4853 	mov	r7,#___str_9
      0019A9 7Es00            [12] 4854 	mov	r6,#(___str_9 >> 8)
      0019AB 7D 80            [12] 4855 	mov	r5,#0x80
                                   4856 ;	calc.c:51: return;
      0019AD                       4857 00441$:
                                   4858 ;	calc.c:49: for (; *s; s++) putchar(*s);
      0019AD 8F 82            [24] 4859 	mov	dpl,r7
      0019AF 8E 83            [24] 4860 	mov	dph,r6
      0019B1 8D F0            [24] 4861 	mov	b,r5
      0019B3 12r00r00         [24] 4862 	lcall	__gptrget
      0019B6 FC               [12] 4863 	mov	r4,a
      0019B7 70 03            [24] 4864 	jnz	01341$
      0019B9 02r2ArBC         [24] 4865 	ljmp	00249$
      0019BC                       4866 01341$:
      0019BC 7B 00            [12] 4867 	mov	r3,#0x00
      0019BE 8C 82            [24] 4868 	mov	dpl,r4
      0019C0 8B 83            [24] 4869 	mov	dph,r3
      0019C2 12r00r00         [24] 4870 	lcall	_putchar
      0019C5 0F               [12] 4871 	inc	r7
                                   4872 ;	calc.c:236: printstr("\r\nstack underflow\r\n");
      0019C6 BF 00 E4         [24] 4873 	cjne	r7,#0x00,00441$
      0019C9 0E               [12] 4874 	inc	r6
      0019CA 80 E1            [24] 4875 	sjmp	00441$
      0019CC                       4876 00169$:
                                   4877 ;	calc.c:238: d1 *= d0;
      0019CC E5*00            [12] 4878 	mov	a,_bp
      0019CE 24 15            [12] 4879 	add	a,#0x15
      0019D0 F8               [12] 4880 	mov	r0,a
      0019D1 E6               [12] 4881 	mov	a,@r0
      0019D2 C0 E0            [24] 4882 	push	acc
      0019D4 08               [12] 4883 	inc	r0
      0019D5 E6               [12] 4884 	mov	a,@r0
      0019D6 C0 E0            [24] 4885 	push	acc
      0019D8 08               [12] 4886 	inc	r0
      0019D9 E6               [12] 4887 	mov	a,@r0
      0019DA C0 E0            [24] 4888 	push	acc
      0019DC 08               [12] 4889 	inc	r0
      0019DD E6               [12] 4890 	mov	a,@r0
      0019DE C0 E0            [24] 4891 	push	acc
      0019E0 E5*00            [12] 4892 	mov	a,_bp
      0019E2 24 19            [12] 4893 	add	a,#0x19
      0019E4 F8               [12] 4894 	mov	r0,a
      0019E5 86 82            [24] 4895 	mov	dpl,@r0
      0019E7 08               [12] 4896 	inc	r0
      0019E8 86 83            [24] 4897 	mov	dph,@r0
      0019EA 08               [12] 4898 	inc	r0
      0019EB 86 F0            [24] 4899 	mov	b,@r0
      0019ED 08               [12] 4900 	inc	r0
      0019EE E6               [12] 4901 	mov	a,@r0
      0019EF 12r00r00         [24] 4902 	lcall	__mullong
      0019F2 AF 82            [24] 4903 	mov	r7,dpl
      0019F4 AE 83            [24] 4904 	mov	r6,dph
      0019F6 AD F0            [24] 4905 	mov	r5,b
      0019F8 FC               [12] 4906 	mov	r4,a
      0019F9 E5 81            [12] 4907 	mov	a,sp
      0019FB 24 FC            [12] 4908 	add	a,#0xfc
      0019FD F5 81            [12] 4909 	mov	sp,a
      0019FF E5*00            [12] 4910 	mov	a,_bp
      001A01 24 19            [12] 4911 	add	a,#0x19
      001A03 F8               [12] 4912 	mov	r0,a
      001A04 A6 07            [24] 4913 	mov	@r0,ar7
      001A06 08               [12] 4914 	inc	r0
      001A07 A6 06            [24] 4915 	mov	@r0,ar6
      001A09 08               [12] 4916 	inc	r0
      001A0A A6 05            [24] 4917 	mov	@r0,ar5
      001A0C 08               [12] 4918 	inc	r0
      001A0D A6 04            [24] 4919 	mov	@r0,ar4
                                   4920 ;	calc.c:239: (void)stack_push(ctx->ps, d1);
      001A0F E5*00            [12] 4921 	mov	a,_bp
      001A11 24 0B            [12] 4922 	add	a,#0x0b
      001A13 F8               [12] 4923 	mov	r0,a
      001A14 86 82            [24] 4924 	mov	dpl,@r0
      001A16 08               [12] 4925 	inc	r0
      001A17 86 83            [24] 4926 	mov	dph,@r0
      001A19 08               [12] 4927 	inc	r0
      001A1A 86 F0            [24] 4928 	mov	b,@r0
      001A1C 12r00r00         [24] 4929 	lcall	__gptrget
      001A1F FA               [12] 4930 	mov	r2,a
      001A20 A3               [24] 4931 	inc	dptr
      001A21 12r00r00         [24] 4932 	lcall	__gptrget
      001A24 FB               [12] 4933 	mov	r3,a
      001A25 A3               [24] 4934 	inc	dptr
      001A26 12r00r00         [24] 4935 	lcall	__gptrget
      001A29 FC               [12] 4936 	mov	r4,a
      001A2A E5*00            [12] 4937 	mov	a,_bp
      001A2C 24 19            [12] 4938 	add	a,#0x19
      001A2E F8               [12] 4939 	mov	r0,a
      001A2F E6               [12] 4940 	mov	a,@r0
      001A30 C0 E0            [24] 4941 	push	acc
      001A32 08               [12] 4942 	inc	r0
      001A33 E6               [12] 4943 	mov	a,@r0
      001A34 C0 E0            [24] 4944 	push	acc
      001A36 08               [12] 4945 	inc	r0
      001A37 E6               [12] 4946 	mov	a,@r0
      001A38 C0 E0            [24] 4947 	push	acc
      001A3A 08               [12] 4948 	inc	r0
      001A3B E6               [12] 4949 	mov	a,@r0
      001A3C C0 E0            [24] 4950 	push	acc
      001A3E 8A 82            [24] 4951 	mov	dpl,r2
      001A40 8B 83            [24] 4952 	mov	dph,r3
      001A42 8C F0            [24] 4953 	mov	b,r4
      001A44 12r00r00         [24] 4954 	lcall	_stack_push
      001A47 E5 81            [12] 4955 	mov	a,sp
      001A49 24 FC            [12] 4956 	add	a,#0xfc
      001A4B F5 81            [12] 4957 	mov	sp,a
                                   4958 ;	calc.c:241: break;
      001A4D 02r2ArBC         [24] 4959 	ljmp	00249$
                                   4960 ;	calc.c:243: case '\\':
      001A50                       4961 00175$:
                                   4962 ;	calc.c:244: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      001A50 C0 05            [24] 4963 	push	ar5
      001A52 C0 06            [24] 4964 	push	ar6
      001A54 C0 07            [24] 4965 	push	ar7
      001A56 E5*00            [12] 4966 	mov	a,_bp
      001A58 24 15            [12] 4967 	add	a,#0x15
      001A5A FC               [12] 4968 	mov	r4,a
      001A5B 7B 00            [12] 4969 	mov	r3,#0x00
      001A5D 7A 40            [12] 4970 	mov	r2,#0x40
      001A5F E5*00            [12] 4971 	mov	a,_bp
      001A61 24 12            [12] 4972 	add	a,#0x12
      001A63 F8               [12] 4973 	mov	r0,a
      001A64 E5*00            [12] 4974 	mov	a,_bp
      001A66 24 0B            [12] 4975 	add	a,#0x0b
      001A68 F9               [12] 4976 	mov	r1,a
      001A69 74 13            [12] 4977 	mov	a,#0x13
      001A6B 26               [12] 4978 	add	a,@r0
      001A6C F7               [12] 4979 	mov	@r1,a
      001A6D 74 40            [12] 4980 	mov	a,#0x40
      001A6F 08               [12] 4981 	inc	r0
      001A70 36               [12] 4982 	addc	a,@r0
      001A71 09               [12] 4983 	inc	r1
      001A72 F7               [12] 4984 	mov	@r1,a
      001A73 08               [12] 4985 	inc	r0
      001A74 09               [12] 4986 	inc	r1
      001A75 E6               [12] 4987 	mov	a,@r0
      001A76 F7               [12] 4988 	mov	@r1,a
      001A77 E5*00            [12] 4989 	mov	a,_bp
      001A79 24 0B            [12] 4990 	add	a,#0x0b
      001A7B F8               [12] 4991 	mov	r0,a
      001A7C 86 82            [24] 4992 	mov	dpl,@r0
      001A7E 08               [12] 4993 	inc	r0
      001A7F 86 83            [24] 4994 	mov	dph,@r0
      001A81 08               [12] 4995 	inc	r0
      001A82 86 F0            [24] 4996 	mov	b,@r0
      001A84 12r00r00         [24] 4997 	lcall	__gptrget
      001A87 FD               [12] 4998 	mov	r5,a
      001A88 A3               [24] 4999 	inc	dptr
      001A89 12r00r00         [24] 5000 	lcall	__gptrget
      001A8C FE               [12] 5001 	mov	r6,a
      001A8D A3               [24] 5002 	inc	dptr
      001A8E 12r00r00         [24] 5003 	lcall	__gptrget
      001A91 FF               [12] 5004 	mov	r7,a
      001A92 C0 05            [24] 5005 	push	ar5
      001A94 C0 04            [24] 5006 	push	ar4
      001A96 C0 03            [24] 5007 	push	ar3
      001A98 C0 02            [24] 5008 	push	ar2
      001A9A 8D 82            [24] 5009 	mov	dpl,r5
      001A9C 8E 83            [24] 5010 	mov	dph,r6
      001A9E 8F F0            [24] 5011 	mov	b,r7
      001AA0 12r00r00         [24] 5012 	lcall	_stack_pop
      001AA3 AE 82            [24] 5013 	mov	r6,dpl
      001AA5 AF 83            [24] 5014 	mov	r7,dph
      001AA7 15 81            [12] 5015 	dec	sp
      001AA9 15 81            [12] 5016 	dec	sp
      001AAB 15 81            [12] 5017 	dec	sp
      001AAD D0 05            [24] 5018 	pop	ar5
      001AAF EE               [12] 5019 	mov	a,r6
      001AB0 4F               [12] 5020 	orl	a,r7
      001AB1 D0 07            [24] 5021 	pop	ar7
      001AB3 D0 06            [24] 5022 	pop	ar6
      001AB5 D0 05            [24] 5023 	pop	ar5
      001AB7 70 25            [24] 5024 	jnz	00186$
      001AB9 7Fr46            [12] 5025 	mov	r7,#___str_9
      001ABB 7Es00            [12] 5026 	mov	r6,#(___str_9 >> 8)
      001ABD 7D 80            [12] 5027 	mov	r5,#0x80
                                   5028 ;	calc.c:51: return;
      001ABF                       5029 00444$:
                                   5030 ;	calc.c:49: for (; *s; s++) putchar(*s);
      001ABF 8F 82            [24] 5031 	mov	dpl,r7
      001AC1 8E 83            [24] 5032 	mov	dph,r6
      001AC3 8D F0            [24] 5033 	mov	b,r5
      001AC5 12r00r00         [24] 5034 	lcall	__gptrget
      001AC8 FC               [12] 5035 	mov	r4,a
      001AC9 70 03            [24] 5036 	jnz	01344$
      001ACB 02r2ArBC         [24] 5037 	ljmp	00249$
      001ACE                       5038 01344$:
      001ACE 7B 00            [12] 5039 	mov	r3,#0x00
      001AD0 8C 82            [24] 5040 	mov	dpl,r4
      001AD2 8B 83            [24] 5041 	mov	dph,r3
      001AD4 12r00r00         [24] 5042 	lcall	_putchar
      001AD7 0F               [12] 5043 	inc	r7
                                   5044 ;	calc.c:244: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      001AD8 BF 00 E4         [24] 5045 	cjne	r7,#0x00,00444$
      001ADB 0E               [12] 5046 	inc	r6
      001ADC 80 E1            [24] 5047 	sjmp	00444$
      001ADE                       5048 00186$:
                                   5049 ;	calc.c:245: else if (!stack_pop(ctx->ps, &d1)) {
      001ADE C0 05            [24] 5050 	push	ar5
      001AE0 C0 06            [24] 5051 	push	ar6
      001AE2 C0 07            [24] 5052 	push	ar7
      001AE4 E5*00            [12] 5053 	mov	a,_bp
      001AE6 24 19            [12] 5054 	add	a,#0x19
      001AE8 FC               [12] 5055 	mov	r4,a
      001AE9 7B 00            [12] 5056 	mov	r3,#0x00
      001AEB 7A 40            [12] 5057 	mov	r2,#0x40
      001AED E5*00            [12] 5058 	mov	a,_bp
      001AEF 24 0B            [12] 5059 	add	a,#0x0b
      001AF1 F8               [12] 5060 	mov	r0,a
      001AF2 86 82            [24] 5061 	mov	dpl,@r0
      001AF4 08               [12] 5062 	inc	r0
      001AF5 86 83            [24] 5063 	mov	dph,@r0
      001AF7 08               [12] 5064 	inc	r0
      001AF8 86 F0            [24] 5065 	mov	b,@r0
      001AFA 12r00r00         [24] 5066 	lcall	__gptrget
      001AFD FD               [12] 5067 	mov	r5,a
      001AFE A3               [24] 5068 	inc	dptr
      001AFF 12r00r00         [24] 5069 	lcall	__gptrget
      001B02 FE               [12] 5070 	mov	r6,a
      001B03 A3               [24] 5071 	inc	dptr
      001B04 12r00r00         [24] 5072 	lcall	__gptrget
      001B07 FF               [12] 5073 	mov	r7,a
      001B08 C0 05            [24] 5074 	push	ar5
      001B0A C0 04            [24] 5075 	push	ar4
      001B0C C0 03            [24] 5076 	push	ar3
      001B0E C0 02            [24] 5077 	push	ar2
      001B10 8D 82            [24] 5078 	mov	dpl,r5
      001B12 8E 83            [24] 5079 	mov	dph,r6
      001B14 8F F0            [24] 5080 	mov	b,r7
      001B16 12r00r00         [24] 5081 	lcall	_stack_pop
      001B19 AE 82            [24] 5082 	mov	r6,dpl
      001B1B AF 83            [24] 5083 	mov	r7,dph
      001B1D 15 81            [12] 5084 	dec	sp
      001B1F 15 81            [12] 5085 	dec	sp
      001B21 15 81            [12] 5086 	dec	sp
      001B23 D0 05            [24] 5087 	pop	ar5
      001B25 EE               [12] 5088 	mov	a,r6
      001B26 4F               [12] 5089 	orl	a,r7
      001B27 D0 07            [24] 5090 	pop	ar7
      001B29 D0 06            [24] 5091 	pop	ar6
      001B2B D0 05            [24] 5092 	pop	ar5
      001B2D 70 63            [24] 5093 	jnz	00183$
                                   5094 ;	calc.c:246: (void)stack_push(ctx->ps, d0);
      001B2F E5*00            [12] 5095 	mov	a,_bp
      001B31 24 0B            [12] 5096 	add	a,#0x0b
      001B33 F8               [12] 5097 	mov	r0,a
      001B34 86 82            [24] 5098 	mov	dpl,@r0
      001B36 08               [12] 5099 	inc	r0
      001B37 86 83            [24] 5100 	mov	dph,@r0
      001B39 08               [12] 5101 	inc	r0
      001B3A 86 F0            [24] 5102 	mov	b,@r0
      001B3C 12r00r00         [24] 5103 	lcall	__gptrget
      001B3F FA               [12] 5104 	mov	r2,a
      001B40 A3               [24] 5105 	inc	dptr
      001B41 12r00r00         [24] 5106 	lcall	__gptrget
      001B44 FB               [12] 5107 	mov	r3,a
      001B45 A3               [24] 5108 	inc	dptr
      001B46 12r00r00         [24] 5109 	lcall	__gptrget
      001B49 FC               [12] 5110 	mov	r4,a
      001B4A E5*00            [12] 5111 	mov	a,_bp
      001B4C 24 15            [12] 5112 	add	a,#0x15
      001B4E F8               [12] 5113 	mov	r0,a
      001B4F E6               [12] 5114 	mov	a,@r0
      001B50 C0 E0            [24] 5115 	push	acc
      001B52 08               [12] 5116 	inc	r0
      001B53 E6               [12] 5117 	mov	a,@r0
      001B54 C0 E0            [24] 5118 	push	acc
      001B56 08               [12] 5119 	inc	r0
      001B57 E6               [12] 5120 	mov	a,@r0
      001B58 C0 E0            [24] 5121 	push	acc
      001B5A 08               [12] 5122 	inc	r0
      001B5B E6               [12] 5123 	mov	a,@r0
      001B5C C0 E0            [24] 5124 	push	acc
      001B5E 8A 82            [24] 5125 	mov	dpl,r2
      001B60 8B 83            [24] 5126 	mov	dph,r3
      001B62 8C F0            [24] 5127 	mov	b,r4
      001B64 12r00r00         [24] 5128 	lcall	_stack_push
      001B67 E5 81            [12] 5129 	mov	a,sp
      001B69 24 FC            [12] 5130 	add	a,#0xfc
      001B6B F5 81            [12] 5131 	mov	sp,a
                                   5132 ;	calc.c:247: printstr("\r\nstack underflow\r\n");
      001B6D 7Fr46            [12] 5133 	mov	r7,#___str_9
      001B6F 7Es00            [12] 5134 	mov	r6,#(___str_9 >> 8)
      001B71 7D 80            [12] 5135 	mov	r5,#0x80
                                   5136 ;	calc.c:51: return;
      001B73                       5137 00447$:
                                   5138 ;	calc.c:49: for (; *s; s++) putchar(*s);
      001B73 8F 82            [24] 5139 	mov	dpl,r7
      001B75 8E 83            [24] 5140 	mov	dph,r6
      001B77 8D F0            [24] 5141 	mov	b,r5
      001B79 12r00r00         [24] 5142 	lcall	__gptrget
      001B7C FC               [12] 5143 	mov	r4,a
      001B7D 70 03            [24] 5144 	jnz	01347$
      001B7F 02r2ArBC         [24] 5145 	ljmp	00249$
      001B82                       5146 01347$:
      001B82 7B 00            [12] 5147 	mov	r3,#0x00
      001B84 8C 82            [24] 5148 	mov	dpl,r4
      001B86 8B 83            [24] 5149 	mov	dph,r3
      001B88 12r00r00         [24] 5150 	lcall	_putchar
      001B8B 0F               [12] 5151 	inc	r7
                                   5152 ;	calc.c:247: printstr("\r\nstack underflow\r\n");
      001B8C BF 00 E4         [24] 5153 	cjne	r7,#0x00,00447$
      001B8F 0E               [12] 5154 	inc	r6
      001B90 80 E1            [24] 5155 	sjmp	00447$
      001B92                       5156 00183$:
                                   5157 ;	calc.c:248: } else if (!d0) {
      001B92 E5*00            [12] 5158 	mov	a,_bp
      001B94 24 15            [12] 5159 	add	a,#0x15
      001B96 F8               [12] 5160 	mov	r0,a
      001B97 E6               [12] 5161 	mov	a,@r0
      001B98 08               [12] 5162 	inc	r0
      001B99 46               [12] 5163 	orl	a,@r0
      001B9A 08               [12] 5164 	inc	r0
      001B9B 46               [12] 5165 	orl	a,@r0
      001B9C 08               [12] 5166 	inc	r0
      001B9D 46               [12] 5167 	orl	a,@r0
      001B9E 60 03            [24] 5168 	jz	01349$
      001BA0 02r1Cr44         [24] 5169 	ljmp	00180$
      001BA3                       5170 01349$:
                                   5171 ;	calc.c:249: (void)stack_push(ctx->ps, d1);
      001BA3 E5*00            [12] 5172 	mov	a,_bp
      001BA5 24 0B            [12] 5173 	add	a,#0x0b
      001BA7 F8               [12] 5174 	mov	r0,a
      001BA8 86 82            [24] 5175 	mov	dpl,@r0
      001BAA 08               [12] 5176 	inc	r0
      001BAB 86 83            [24] 5177 	mov	dph,@r0
      001BAD 08               [12] 5178 	inc	r0
      001BAE 86 F0            [24] 5179 	mov	b,@r0
      001BB0 12r00r00         [24] 5180 	lcall	__gptrget
      001BB3 FA               [12] 5181 	mov	r2,a
      001BB4 A3               [24] 5182 	inc	dptr
      001BB5 12r00r00         [24] 5183 	lcall	__gptrget
      001BB8 FB               [12] 5184 	mov	r3,a
      001BB9 A3               [24] 5185 	inc	dptr
      001BBA 12r00r00         [24] 5186 	lcall	__gptrget
      001BBD FC               [12] 5187 	mov	r4,a
      001BBE E5*00            [12] 5188 	mov	a,_bp
      001BC0 24 19            [12] 5189 	add	a,#0x19
      001BC2 F8               [12] 5190 	mov	r0,a
      001BC3 E6               [12] 5191 	mov	a,@r0
      001BC4 C0 E0            [24] 5192 	push	acc
      001BC6 08               [12] 5193 	inc	r0
      001BC7 E6               [12] 5194 	mov	a,@r0
      001BC8 C0 E0            [24] 5195 	push	acc
      001BCA 08               [12] 5196 	inc	r0
      001BCB E6               [12] 5197 	mov	a,@r0
      001BCC C0 E0            [24] 5198 	push	acc
      001BCE 08               [12] 5199 	inc	r0
      001BCF E6               [12] 5200 	mov	a,@r0
      001BD0 C0 E0            [24] 5201 	push	acc
      001BD2 8A 82            [24] 5202 	mov	dpl,r2
      001BD4 8B 83            [24] 5203 	mov	dph,r3
      001BD6 8C F0            [24] 5204 	mov	b,r4
      001BD8 12r00r00         [24] 5205 	lcall	_stack_push
      001BDB E5 81            [12] 5206 	mov	a,sp
      001BDD 24 FC            [12] 5207 	add	a,#0xfc
      001BDF F5 81            [12] 5208 	mov	sp,a
                                   5209 ;	calc.c:250: (void)stack_push(ctx->ps, d0);			
      001BE1 E5*00            [12] 5210 	mov	a,_bp
      001BE3 24 0B            [12] 5211 	add	a,#0x0b
      001BE5 F8               [12] 5212 	mov	r0,a
      001BE6 86 82            [24] 5213 	mov	dpl,@r0
      001BE8 08               [12] 5214 	inc	r0
      001BE9 86 83            [24] 5215 	mov	dph,@r0
      001BEB 08               [12] 5216 	inc	r0
      001BEC 86 F0            [24] 5217 	mov	b,@r0
      001BEE 12r00r00         [24] 5218 	lcall	__gptrget
      001BF1 FA               [12] 5219 	mov	r2,a
      001BF2 A3               [24] 5220 	inc	dptr
      001BF3 12r00r00         [24] 5221 	lcall	__gptrget
      001BF6 FB               [12] 5222 	mov	r3,a
      001BF7 A3               [24] 5223 	inc	dptr
      001BF8 12r00r00         [24] 5224 	lcall	__gptrget
      001BFB FC               [12] 5225 	mov	r4,a
      001BFC E5*00            [12] 5226 	mov	a,_bp
      001BFE 24 15            [12] 5227 	add	a,#0x15
      001C00 F8               [12] 5228 	mov	r0,a
      001C01 E6               [12] 5229 	mov	a,@r0
      001C02 C0 E0            [24] 5230 	push	acc
      001C04 08               [12] 5231 	inc	r0
      001C05 E6               [12] 5232 	mov	a,@r0
      001C06 C0 E0            [24] 5233 	push	acc
      001C08 08               [12] 5234 	inc	r0
      001C09 E6               [12] 5235 	mov	a,@r0
      001C0A C0 E0            [24] 5236 	push	acc
      001C0C 08               [12] 5237 	inc	r0
      001C0D E6               [12] 5238 	mov	a,@r0
      001C0E C0 E0            [24] 5239 	push	acc
      001C10 8A 82            [24] 5240 	mov	dpl,r2
      001C12 8B 83            [24] 5241 	mov	dph,r3
      001C14 8C F0            [24] 5242 	mov	b,r4
      001C16 12r00r00         [24] 5243 	lcall	_stack_push
      001C19 E5 81            [12] 5244 	mov	a,sp
      001C1B 24 FC            [12] 5245 	add	a,#0xfc
      001C1D F5 81            [12] 5246 	mov	sp,a
                                   5247 ;	calc.c:251: printstr("\r\ndivision by zero\r\n");
      001C1F 7FrA8            [12] 5248 	mov	r7,#___str_13
      001C21 7Es00            [12] 5249 	mov	r6,#(___str_13 >> 8)
      001C23 7D 80            [12] 5250 	mov	r5,#0x80
                                   5251 ;	calc.c:51: return;
      001C25                       5252 00450$:
                                   5253 ;	calc.c:49: for (; *s; s++) putchar(*s);
      001C25 8F 82            [24] 5254 	mov	dpl,r7
      001C27 8E 83            [24] 5255 	mov	dph,r6
      001C29 8D F0            [24] 5256 	mov	b,r5
      001C2B 12r00r00         [24] 5257 	lcall	__gptrget
      001C2E FC               [12] 5258 	mov	r4,a
      001C2F 70 03            [24] 5259 	jnz	01350$
      001C31 02r2ArBC         [24] 5260 	ljmp	00249$
      001C34                       5261 01350$:
      001C34 7B 00            [12] 5262 	mov	r3,#0x00
      001C36 8C 82            [24] 5263 	mov	dpl,r4
      001C38 8B 83            [24] 5264 	mov	dph,r3
      001C3A 12r00r00         [24] 5265 	lcall	_putchar
      001C3D 0F               [12] 5266 	inc	r7
                                   5267 ;	calc.c:251: printstr("\r\ndivision by zero\r\n");
      001C3E BF 00 E4         [24] 5268 	cjne	r7,#0x00,00450$
      001C41 0E               [12] 5269 	inc	r6
      001C42 80 E1            [24] 5270 	sjmp	00450$
      001C44                       5271 00180$:
                                   5272 ;	calc.c:253: if (ctx->digit[0] == '/') d1 /= d0;
      001C44 8D 82            [24] 5273 	mov	dpl,r5
      001C46 8E 83            [24] 5274 	mov	dph,r6
      001C48 8F F0            [24] 5275 	mov	b,r7
      001C4A 12r00r00         [24] 5276 	lcall	__gptrget
      001C4D FC               [12] 5277 	mov	r4,a
      001C4E BC 2F 45         [24] 5278 	cjne	r4,#0x2f,00177$
      001C51 E5*00            [12] 5279 	mov	a,_bp
      001C53 24 15            [12] 5280 	add	a,#0x15
      001C55 F8               [12] 5281 	mov	r0,a
      001C56 E6               [12] 5282 	mov	a,@r0
      001C57 C0 E0            [24] 5283 	push	acc
      001C59 08               [12] 5284 	inc	r0
      001C5A E6               [12] 5285 	mov	a,@r0
      001C5B C0 E0            [24] 5286 	push	acc
      001C5D 08               [12] 5287 	inc	r0
      001C5E E6               [12] 5288 	mov	a,@r0
      001C5F C0 E0            [24] 5289 	push	acc
      001C61 08               [12] 5290 	inc	r0
      001C62 E6               [12] 5291 	mov	a,@r0
      001C63 C0 E0            [24] 5292 	push	acc
      001C65 E5*00            [12] 5293 	mov	a,_bp
      001C67 24 19            [12] 5294 	add	a,#0x19
      001C69 F8               [12] 5295 	mov	r0,a
      001C6A 86 82            [24] 5296 	mov	dpl,@r0
      001C6C 08               [12] 5297 	inc	r0
      001C6D 86 83            [24] 5298 	mov	dph,@r0
      001C6F 08               [12] 5299 	inc	r0
      001C70 86 F0            [24] 5300 	mov	b,@r0
      001C72 08               [12] 5301 	inc	r0
      001C73 E6               [12] 5302 	mov	a,@r0
      001C74 12r00r00         [24] 5303 	lcall	__divslong
      001C77 AF 82            [24] 5304 	mov	r7,dpl
      001C79 AE 83            [24] 5305 	mov	r6,dph
      001C7B AD F0            [24] 5306 	mov	r5,b
      001C7D FC               [12] 5307 	mov	r4,a
      001C7E E5 81            [12] 5308 	mov	a,sp
      001C80 24 FC            [12] 5309 	add	a,#0xfc
      001C82 F5 81            [12] 5310 	mov	sp,a
      001C84 E5*00            [12] 5311 	mov	a,_bp
      001C86 24 19            [12] 5312 	add	a,#0x19
      001C88 F8               [12] 5313 	mov	r0,a
      001C89 A6 07            [24] 5314 	mov	@r0,ar7
      001C8B 08               [12] 5315 	inc	r0
      001C8C A6 06            [24] 5316 	mov	@r0,ar6
      001C8E 08               [12] 5317 	inc	r0
      001C8F A6 05            [24] 5318 	mov	@r0,ar5
      001C91 08               [12] 5319 	inc	r0
      001C92 A6 04            [24] 5320 	mov	@r0,ar4
      001C94 80 63            [24] 5321 	sjmp	00178$
      001C96                       5322 00177$:
                                   5323 ;	calc.c:254: else d1 = (unsigned long)d1 / (unsigned long)d0;
      001C96 E5*00            [12] 5324 	mov	a,_bp
      001C98 24 19            [12] 5325 	add	a,#0x19
      001C9A F8               [12] 5326 	mov	r0,a
      001C9B 86 07            [24] 5327 	mov	ar7,@r0
      001C9D 08               [12] 5328 	inc	r0
      001C9E 86 06            [24] 5329 	mov	ar6,@r0
      001CA0 08               [12] 5330 	inc	r0
      001CA1 86 05            [24] 5331 	mov	ar5,@r0
      001CA3 08               [12] 5332 	inc	r0
      001CA4 86 04            [24] 5333 	mov	ar4,@r0
      001CA6 E5*00            [12] 5334 	mov	a,_bp
      001CA8 24 15            [12] 5335 	add	a,#0x15
      001CAA F8               [12] 5336 	mov	r0,a
      001CAB E5*00            [12] 5337 	mov	a,_bp
      001CAD 24 0E            [12] 5338 	add	a,#0x0e
      001CAF F9               [12] 5339 	mov	r1,a
      001CB0 E6               [12] 5340 	mov	a,@r0
      001CB1 F7               [12] 5341 	mov	@r1,a
      001CB2 08               [12] 5342 	inc	r0
      001CB3 09               [12] 5343 	inc	r1
      001CB4 E6               [12] 5344 	mov	a,@r0
      001CB5 F7               [12] 5345 	mov	@r1,a
      001CB6 08               [12] 5346 	inc	r0
      001CB7 09               [12] 5347 	inc	r1
      001CB8 E6               [12] 5348 	mov	a,@r0
      001CB9 F7               [12] 5349 	mov	@r1,a
      001CBA 08               [12] 5350 	inc	r0
      001CBB 09               [12] 5351 	inc	r1
      001CBC E6               [12] 5352 	mov	a,@r0
      001CBD F7               [12] 5353 	mov	@r1,a
      001CBE E5*00            [12] 5354 	mov	a,_bp
      001CC0 24 0E            [12] 5355 	add	a,#0x0e
      001CC2 F8               [12] 5356 	mov	r0,a
      001CC3 E6               [12] 5357 	mov	a,@r0
      001CC4 C0 E0            [24] 5358 	push	acc
      001CC6 08               [12] 5359 	inc	r0
      001CC7 E6               [12] 5360 	mov	a,@r0
      001CC8 C0 E0            [24] 5361 	push	acc
      001CCA 08               [12] 5362 	inc	r0
      001CCB E6               [12] 5363 	mov	a,@r0
      001CCC C0 E0            [24] 5364 	push	acc
      001CCE 08               [12] 5365 	inc	r0
      001CCF E6               [12] 5366 	mov	a,@r0
      001CD0 C0 E0            [24] 5367 	push	acc
      001CD2 8F 82            [24] 5368 	mov	dpl,r7
      001CD4 8E 83            [24] 5369 	mov	dph,r6
      001CD6 8D F0            [24] 5370 	mov	b,r5
      001CD8 EC               [12] 5371 	mov	a,r4
      001CD9 12r00r00         [24] 5372 	lcall	__divulong
      001CDC AF 82            [24] 5373 	mov	r7,dpl
      001CDE AE 83            [24] 5374 	mov	r6,dph
      001CE0 AD F0            [24] 5375 	mov	r5,b
      001CE2 FC               [12] 5376 	mov	r4,a
      001CE3 E5 81            [12] 5377 	mov	a,sp
      001CE5 24 FC            [12] 5378 	add	a,#0xfc
      001CE7 F5 81            [12] 5379 	mov	sp,a
      001CE9 E5*00            [12] 5380 	mov	a,_bp
      001CEB 24 19            [12] 5381 	add	a,#0x19
      001CED F8               [12] 5382 	mov	r0,a
      001CEE A6 07            [24] 5383 	mov	@r0,ar7
      001CF0 08               [12] 5384 	inc	r0
      001CF1 A6 06            [24] 5385 	mov	@r0,ar6
      001CF3 08               [12] 5386 	inc	r0
      001CF4 A6 05            [24] 5387 	mov	@r0,ar5
      001CF6 08               [12] 5388 	inc	r0
      001CF7 A6 04            [24] 5389 	mov	@r0,ar4
      001CF9                       5390 00178$:
                                   5391 ;	calc.c:255: (void)stack_push(ctx->ps, d1);
      001CF9 E5*00            [12] 5392 	mov	a,_bp
      001CFB 24 0B            [12] 5393 	add	a,#0x0b
      001CFD F8               [12] 5394 	mov	r0,a
      001CFE 86 82            [24] 5395 	mov	dpl,@r0
      001D00 08               [12] 5396 	inc	r0
      001D01 86 83            [24] 5397 	mov	dph,@r0
      001D03 08               [12] 5398 	inc	r0
      001D04 86 F0            [24] 5399 	mov	b,@r0
      001D06 12r00r00         [24] 5400 	lcall	__gptrget
      001D09 FA               [12] 5401 	mov	r2,a
      001D0A A3               [24] 5402 	inc	dptr
      001D0B 12r00r00         [24] 5403 	lcall	__gptrget
      001D0E FB               [12] 5404 	mov	r3,a
      001D0F A3               [24] 5405 	inc	dptr
      001D10 12r00r00         [24] 5406 	lcall	__gptrget
      001D13 FC               [12] 5407 	mov	r4,a
      001D14 E5*00            [12] 5408 	mov	a,_bp
      001D16 24 19            [12] 5409 	add	a,#0x19
      001D18 F8               [12] 5410 	mov	r0,a
      001D19 E6               [12] 5411 	mov	a,@r0
      001D1A C0 E0            [24] 5412 	push	acc
      001D1C 08               [12] 5413 	inc	r0
      001D1D E6               [12] 5414 	mov	a,@r0
      001D1E C0 E0            [24] 5415 	push	acc
      001D20 08               [12] 5416 	inc	r0
      001D21 E6               [12] 5417 	mov	a,@r0
      001D22 C0 E0            [24] 5418 	push	acc
      001D24 08               [12] 5419 	inc	r0
      001D25 E6               [12] 5420 	mov	a,@r0
      001D26 C0 E0            [24] 5421 	push	acc
      001D28 8A 82            [24] 5422 	mov	dpl,r2
      001D2A 8B 83            [24] 5423 	mov	dph,r3
      001D2C 8C F0            [24] 5424 	mov	b,r4
      001D2E 12r00r00         [24] 5425 	lcall	_stack_push
      001D31 E5 81            [12] 5426 	mov	a,sp
      001D33 24 FC            [12] 5427 	add	a,#0xfc
      001D35 F5 81            [12] 5428 	mov	sp,a
                                   5429 ;	calc.c:257: break;
      001D37 02r2ArBC         [24] 5430 	ljmp	00249$
                                   5431 ;	calc.c:259: case '#':
      001D3A                       5432 00189$:
                                   5433 ;	calc.c:260: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      001D3A C0 05            [24] 5434 	push	ar5
      001D3C C0 06            [24] 5435 	push	ar6
      001D3E C0 07            [24] 5436 	push	ar7
      001D40 E5*00            [12] 5437 	mov	a,_bp
      001D42 24 15            [12] 5438 	add	a,#0x15
      001D44 FC               [12] 5439 	mov	r4,a
      001D45 7B 00            [12] 5440 	mov	r3,#0x00
      001D47 7A 40            [12] 5441 	mov	r2,#0x40
      001D49 E5*00            [12] 5442 	mov	a,_bp
      001D4B 24 12            [12] 5443 	add	a,#0x12
      001D4D F8               [12] 5444 	mov	r0,a
      001D4E E5*00            [12] 5445 	mov	a,_bp
      001D50 24 0E            [12] 5446 	add	a,#0x0e
      001D52 F9               [12] 5447 	mov	r1,a
      001D53 74 13            [12] 5448 	mov	a,#0x13
      001D55 26               [12] 5449 	add	a,@r0
      001D56 F7               [12] 5450 	mov	@r1,a
      001D57 74 40            [12] 5451 	mov	a,#0x40
      001D59 08               [12] 5452 	inc	r0
      001D5A 36               [12] 5453 	addc	a,@r0
      001D5B 09               [12] 5454 	inc	r1
      001D5C F7               [12] 5455 	mov	@r1,a
      001D5D 08               [12] 5456 	inc	r0
      001D5E 09               [12] 5457 	inc	r1
      001D5F E6               [12] 5458 	mov	a,@r0
      001D60 F7               [12] 5459 	mov	@r1,a
      001D61 E5*00            [12] 5460 	mov	a,_bp
      001D63 24 0E            [12] 5461 	add	a,#0x0e
      001D65 F8               [12] 5462 	mov	r0,a
      001D66 86 82            [24] 5463 	mov	dpl,@r0
      001D68 08               [12] 5464 	inc	r0
      001D69 86 83            [24] 5465 	mov	dph,@r0
      001D6B 08               [12] 5466 	inc	r0
      001D6C 86 F0            [24] 5467 	mov	b,@r0
      001D6E 12r00r00         [24] 5468 	lcall	__gptrget
      001D71 FD               [12] 5469 	mov	r5,a
      001D72 A3               [24] 5470 	inc	dptr
      001D73 12r00r00         [24] 5471 	lcall	__gptrget
      001D76 FE               [12] 5472 	mov	r6,a
      001D77 A3               [24] 5473 	inc	dptr
      001D78 12r00r00         [24] 5474 	lcall	__gptrget
      001D7B FF               [12] 5475 	mov	r7,a
      001D7C C0 05            [24] 5476 	push	ar5
      001D7E C0 04            [24] 5477 	push	ar4
      001D80 C0 03            [24] 5478 	push	ar3
      001D82 C0 02            [24] 5479 	push	ar2
      001D84 8D 82            [24] 5480 	mov	dpl,r5
      001D86 8E 83            [24] 5481 	mov	dph,r6
      001D88 8F F0            [24] 5482 	mov	b,r7
      001D8A 12r00r00         [24] 5483 	lcall	_stack_pop
      001D8D AE 82            [24] 5484 	mov	r6,dpl
      001D8F AF 83            [24] 5485 	mov	r7,dph
      001D91 15 81            [12] 5486 	dec	sp
      001D93 15 81            [12] 5487 	dec	sp
      001D95 15 81            [12] 5488 	dec	sp
      001D97 D0 05            [24] 5489 	pop	ar5
      001D99 EE               [12] 5490 	mov	a,r6
      001D9A 4F               [12] 5491 	orl	a,r7
      001D9B D0 07            [24] 5492 	pop	ar7
      001D9D D0 06            [24] 5493 	pop	ar6
      001D9F D0 05            [24] 5494 	pop	ar5
      001DA1 70 25            [24] 5495 	jnz	00200$
      001DA3 7Fr46            [12] 5496 	mov	r7,#___str_9
      001DA5 7Es00            [12] 5497 	mov	r6,#(___str_9 >> 8)
      001DA7 7D 80            [12] 5498 	mov	r5,#0x80
                                   5499 ;	calc.c:51: return;
      001DA9                       5500 00453$:
                                   5501 ;	calc.c:49: for (; *s; s++) putchar(*s);
      001DA9 8F 82            [24] 5502 	mov	dpl,r7
      001DAB 8E 83            [24] 5503 	mov	dph,r6
      001DAD 8D F0            [24] 5504 	mov	b,r5
      001DAF 12r00r00         [24] 5505 	lcall	__gptrget
      001DB2 FC               [12] 5506 	mov	r4,a
      001DB3 70 03            [24] 5507 	jnz	01355$
      001DB5 02r2ArBC         [24] 5508 	ljmp	00249$
      001DB8                       5509 01355$:
      001DB8 7B 00            [12] 5510 	mov	r3,#0x00
      001DBA 8C 82            [24] 5511 	mov	dpl,r4
      001DBC 8B 83            [24] 5512 	mov	dph,r3
      001DBE 12r00r00         [24] 5513 	lcall	_putchar
      001DC1 0F               [12] 5514 	inc	r7
                                   5515 ;	calc.c:260: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      001DC2 BF 00 E4         [24] 5516 	cjne	r7,#0x00,00453$
      001DC5 0E               [12] 5517 	inc	r6
      001DC6 80 E1            [24] 5518 	sjmp	00453$
      001DC8                       5519 00200$:
                                   5520 ;	calc.c:261: else if (!stack_pop(ctx->ps, &d1)) {
      001DC8 C0 05            [24] 5521 	push	ar5
      001DCA C0 06            [24] 5522 	push	ar6
      001DCC C0 07            [24] 5523 	push	ar7
      001DCE E5*00            [12] 5524 	mov	a,_bp
      001DD0 24 19            [12] 5525 	add	a,#0x19
      001DD2 FC               [12] 5526 	mov	r4,a
      001DD3 7B 00            [12] 5527 	mov	r3,#0x00
      001DD5 7A 40            [12] 5528 	mov	r2,#0x40
      001DD7 E5*00            [12] 5529 	mov	a,_bp
      001DD9 24 0E            [12] 5530 	add	a,#0x0e
      001DDB F8               [12] 5531 	mov	r0,a
      001DDC 86 82            [24] 5532 	mov	dpl,@r0
      001DDE 08               [12] 5533 	inc	r0
      001DDF 86 83            [24] 5534 	mov	dph,@r0
      001DE1 08               [12] 5535 	inc	r0
      001DE2 86 F0            [24] 5536 	mov	b,@r0
      001DE4 12r00r00         [24] 5537 	lcall	__gptrget
      001DE7 FD               [12] 5538 	mov	r5,a
      001DE8 A3               [24] 5539 	inc	dptr
      001DE9 12r00r00         [24] 5540 	lcall	__gptrget
      001DEC FE               [12] 5541 	mov	r6,a
      001DED A3               [24] 5542 	inc	dptr
      001DEE 12r00r00         [24] 5543 	lcall	__gptrget
      001DF1 FF               [12] 5544 	mov	r7,a
      001DF2 C0 05            [24] 5545 	push	ar5
      001DF4 C0 04            [24] 5546 	push	ar4
      001DF6 C0 03            [24] 5547 	push	ar3
      001DF8 C0 02            [24] 5548 	push	ar2
      001DFA 8D 82            [24] 5549 	mov	dpl,r5
      001DFC 8E 83            [24] 5550 	mov	dph,r6
      001DFE 8F F0            [24] 5551 	mov	b,r7
      001E00 12r00r00         [24] 5552 	lcall	_stack_pop
      001E03 AE 82            [24] 5553 	mov	r6,dpl
      001E05 AF 83            [24] 5554 	mov	r7,dph
      001E07 15 81            [12] 5555 	dec	sp
      001E09 15 81            [12] 5556 	dec	sp
      001E0B 15 81            [12] 5557 	dec	sp
      001E0D D0 05            [24] 5558 	pop	ar5
      001E0F EE               [12] 5559 	mov	a,r6
      001E10 4F               [12] 5560 	orl	a,r7
      001E11 D0 07            [24] 5561 	pop	ar7
      001E13 D0 06            [24] 5562 	pop	ar6
      001E15 D0 05            [24] 5563 	pop	ar5
      001E17 70 63            [24] 5564 	jnz	00197$
                                   5565 ;	calc.c:262: (void)stack_push(ctx->ps, d0);
      001E19 E5*00            [12] 5566 	mov	a,_bp
      001E1B 24 0E            [12] 5567 	add	a,#0x0e
      001E1D F8               [12] 5568 	mov	r0,a
      001E1E 86 82            [24] 5569 	mov	dpl,@r0
      001E20 08               [12] 5570 	inc	r0
      001E21 86 83            [24] 5571 	mov	dph,@r0
      001E23 08               [12] 5572 	inc	r0
      001E24 86 F0            [24] 5573 	mov	b,@r0
      001E26 12r00r00         [24] 5574 	lcall	__gptrget
      001E29 FA               [12] 5575 	mov	r2,a
      001E2A A3               [24] 5576 	inc	dptr
      001E2B 12r00r00         [24] 5577 	lcall	__gptrget
      001E2E FB               [12] 5578 	mov	r3,a
      001E2F A3               [24] 5579 	inc	dptr
      001E30 12r00r00         [24] 5580 	lcall	__gptrget
      001E33 FC               [12] 5581 	mov	r4,a
      001E34 E5*00            [12] 5582 	mov	a,_bp
      001E36 24 15            [12] 5583 	add	a,#0x15
      001E38 F8               [12] 5584 	mov	r0,a
      001E39 E6               [12] 5585 	mov	a,@r0
      001E3A C0 E0            [24] 5586 	push	acc
      001E3C 08               [12] 5587 	inc	r0
      001E3D E6               [12] 5588 	mov	a,@r0
      001E3E C0 E0            [24] 5589 	push	acc
      001E40 08               [12] 5590 	inc	r0
      001E41 E6               [12] 5591 	mov	a,@r0
      001E42 C0 E0            [24] 5592 	push	acc
      001E44 08               [12] 5593 	inc	r0
      001E45 E6               [12] 5594 	mov	a,@r0
      001E46 C0 E0            [24] 5595 	push	acc
      001E48 8A 82            [24] 5596 	mov	dpl,r2
      001E4A 8B 83            [24] 5597 	mov	dph,r3
      001E4C 8C F0            [24] 5598 	mov	b,r4
      001E4E 12r00r00         [24] 5599 	lcall	_stack_push
      001E51 E5 81            [12] 5600 	mov	a,sp
      001E53 24 FC            [12] 5601 	add	a,#0xfc
      001E55 F5 81            [12] 5602 	mov	sp,a
                                   5603 ;	calc.c:263: printstr("\r\nstack underflow\r\n");
      001E57 7Fr46            [12] 5604 	mov	r7,#___str_9
      001E59 7Es00            [12] 5605 	mov	r6,#(___str_9 >> 8)
      001E5B 7D 80            [12] 5606 	mov	r5,#0x80
                                   5607 ;	calc.c:51: return;
      001E5D                       5608 00456$:
                                   5609 ;	calc.c:49: for (; *s; s++) putchar(*s);
      001E5D 8F 82            [24] 5610 	mov	dpl,r7
      001E5F 8E 83            [24] 5611 	mov	dph,r6
      001E61 8D F0            [24] 5612 	mov	b,r5
      001E63 12r00r00         [24] 5613 	lcall	__gptrget
      001E66 FC               [12] 5614 	mov	r4,a
      001E67 70 03            [24] 5615 	jnz	01358$
      001E69 02r2ArBC         [24] 5616 	ljmp	00249$
      001E6C                       5617 01358$:
      001E6C 7B 00            [12] 5618 	mov	r3,#0x00
      001E6E 8C 82            [24] 5619 	mov	dpl,r4
      001E70 8B 83            [24] 5620 	mov	dph,r3
      001E72 12r00r00         [24] 5621 	lcall	_putchar
      001E75 0F               [12] 5622 	inc	r7
                                   5623 ;	calc.c:263: printstr("\r\nstack underflow\r\n");
      001E76 BF 00 E4         [24] 5624 	cjne	r7,#0x00,00456$
      001E79 0E               [12] 5625 	inc	r6
      001E7A 80 E1            [24] 5626 	sjmp	00456$
      001E7C                       5627 00197$:
                                   5628 ;	calc.c:264: } else if (!d0) {
      001E7C E5*00            [12] 5629 	mov	a,_bp
      001E7E 24 15            [12] 5630 	add	a,#0x15
      001E80 F8               [12] 5631 	mov	r0,a
      001E81 E6               [12] 5632 	mov	a,@r0
      001E82 08               [12] 5633 	inc	r0
      001E83 46               [12] 5634 	orl	a,@r0
      001E84 08               [12] 5635 	inc	r0
      001E85 46               [12] 5636 	orl	a,@r0
      001E86 08               [12] 5637 	inc	r0
      001E87 46               [12] 5638 	orl	a,@r0
      001E88 60 03            [24] 5639 	jz	01360$
      001E8A 02r1Fr2E         [24] 5640 	ljmp	00194$
      001E8D                       5641 01360$:
                                   5642 ;	calc.c:265: (void)stack_push(ctx->ps, d1);
      001E8D E5*00            [12] 5643 	mov	a,_bp
      001E8F 24 0E            [12] 5644 	add	a,#0x0e
      001E91 F8               [12] 5645 	mov	r0,a
      001E92 86 82            [24] 5646 	mov	dpl,@r0
      001E94 08               [12] 5647 	inc	r0
      001E95 86 83            [24] 5648 	mov	dph,@r0
      001E97 08               [12] 5649 	inc	r0
      001E98 86 F0            [24] 5650 	mov	b,@r0
      001E9A 12r00r00         [24] 5651 	lcall	__gptrget
      001E9D FA               [12] 5652 	mov	r2,a
      001E9E A3               [24] 5653 	inc	dptr
      001E9F 12r00r00         [24] 5654 	lcall	__gptrget
      001EA2 FB               [12] 5655 	mov	r3,a
      001EA3 A3               [24] 5656 	inc	dptr
      001EA4 12r00r00         [24] 5657 	lcall	__gptrget
      001EA7 FC               [12] 5658 	mov	r4,a
      001EA8 E5*00            [12] 5659 	mov	a,_bp
      001EAA 24 19            [12] 5660 	add	a,#0x19
      001EAC F8               [12] 5661 	mov	r0,a
      001EAD E6               [12] 5662 	mov	a,@r0
      001EAE C0 E0            [24] 5663 	push	acc
      001EB0 08               [12] 5664 	inc	r0
      001EB1 E6               [12] 5665 	mov	a,@r0
      001EB2 C0 E0            [24] 5666 	push	acc
      001EB4 08               [12] 5667 	inc	r0
      001EB5 E6               [12] 5668 	mov	a,@r0
      001EB6 C0 E0            [24] 5669 	push	acc
      001EB8 08               [12] 5670 	inc	r0
      001EB9 E6               [12] 5671 	mov	a,@r0
      001EBA C0 E0            [24] 5672 	push	acc
      001EBC 8A 82            [24] 5673 	mov	dpl,r2
      001EBE 8B 83            [24] 5674 	mov	dph,r3
      001EC0 8C F0            [24] 5675 	mov	b,r4
      001EC2 12r00r00         [24] 5676 	lcall	_stack_push
      001EC5 E5 81            [12] 5677 	mov	a,sp
      001EC7 24 FC            [12] 5678 	add	a,#0xfc
      001EC9 F5 81            [12] 5679 	mov	sp,a
                                   5680 ;	calc.c:266: (void)stack_push(ctx->ps, d0);			
      001ECB E5*00            [12] 5681 	mov	a,_bp
      001ECD 24 0E            [12] 5682 	add	a,#0x0e
      001ECF F8               [12] 5683 	mov	r0,a
      001ED0 86 82            [24] 5684 	mov	dpl,@r0
      001ED2 08               [12] 5685 	inc	r0
      001ED3 86 83            [24] 5686 	mov	dph,@r0
      001ED5 08               [12] 5687 	inc	r0
      001ED6 86 F0            [24] 5688 	mov	b,@r0
      001ED8 12r00r00         [24] 5689 	lcall	__gptrget
      001EDB FA               [12] 5690 	mov	r2,a
      001EDC A3               [24] 5691 	inc	dptr
      001EDD 12r00r00         [24] 5692 	lcall	__gptrget
      001EE0 FB               [12] 5693 	mov	r3,a
      001EE1 A3               [24] 5694 	inc	dptr
      001EE2 12r00r00         [24] 5695 	lcall	__gptrget
      001EE5 FC               [12] 5696 	mov	r4,a
      001EE6 E5*00            [12] 5697 	mov	a,_bp
      001EE8 24 15            [12] 5698 	add	a,#0x15
      001EEA F8               [12] 5699 	mov	r0,a
      001EEB E6               [12] 5700 	mov	a,@r0
      001EEC C0 E0            [24] 5701 	push	acc
      001EEE 08               [12] 5702 	inc	r0
      001EEF E6               [12] 5703 	mov	a,@r0
      001EF0 C0 E0            [24] 5704 	push	acc
      001EF2 08               [12] 5705 	inc	r0
      001EF3 E6               [12] 5706 	mov	a,@r0
      001EF4 C0 E0            [24] 5707 	push	acc
      001EF6 08               [12] 5708 	inc	r0
      001EF7 E6               [12] 5709 	mov	a,@r0
      001EF8 C0 E0            [24] 5710 	push	acc
      001EFA 8A 82            [24] 5711 	mov	dpl,r2
      001EFC 8B 83            [24] 5712 	mov	dph,r3
      001EFE 8C F0            [24] 5713 	mov	b,r4
      001F00 12r00r00         [24] 5714 	lcall	_stack_push
      001F03 E5 81            [12] 5715 	mov	a,sp
      001F05 24 FC            [12] 5716 	add	a,#0xfc
      001F07 F5 81            [12] 5717 	mov	sp,a
                                   5718 ;	calc.c:267: printstr("\r\ndivision by zero\r\n");
      001F09 7FrA8            [12] 5719 	mov	r7,#___str_13
      001F0B 7Es00            [12] 5720 	mov	r6,#(___str_13 >> 8)
      001F0D 7D 80            [12] 5721 	mov	r5,#0x80
                                   5722 ;	calc.c:51: return;
      001F0F                       5723 00459$:
                                   5724 ;	calc.c:49: for (; *s; s++) putchar(*s);
      001F0F 8F 82            [24] 5725 	mov	dpl,r7
      001F11 8E 83            [24] 5726 	mov	dph,r6
      001F13 8D F0            [24] 5727 	mov	b,r5
      001F15 12r00r00         [24] 5728 	lcall	__gptrget
      001F18 FC               [12] 5729 	mov	r4,a
      001F19 70 03            [24] 5730 	jnz	01361$
      001F1B 02r2ArBC         [24] 5731 	ljmp	00249$
      001F1E                       5732 01361$:
      001F1E 7B 00            [12] 5733 	mov	r3,#0x00
      001F20 8C 82            [24] 5734 	mov	dpl,r4
      001F22 8B 83            [24] 5735 	mov	dph,r3
      001F24 12r00r00         [24] 5736 	lcall	_putchar
      001F27 0F               [12] 5737 	inc	r7
                                   5738 ;	calc.c:267: printstr("\r\ndivision by zero\r\n");
      001F28 BF 00 E4         [24] 5739 	cjne	r7,#0x00,00459$
      001F2B 0E               [12] 5740 	inc	r6
      001F2C 80 E1            [24] 5741 	sjmp	00459$
      001F2E                       5742 00194$:
                                   5743 ;	calc.c:269: if (ctx->digit[0] == '%') d1 %= d0;
      001F2E 8D 82            [24] 5744 	mov	dpl,r5
      001F30 8E 83            [24] 5745 	mov	dph,r6
      001F32 8F F0            [24] 5746 	mov	b,r7
      001F34 12r00r00         [24] 5747 	lcall	__gptrget
      001F37 FD               [12] 5748 	mov	r5,a
      001F38 BD 25 45         [24] 5749 	cjne	r5,#0x25,00191$
      001F3B E5*00            [12] 5750 	mov	a,_bp
      001F3D 24 15            [12] 5751 	add	a,#0x15
      001F3F F8               [12] 5752 	mov	r0,a
      001F40 E6               [12] 5753 	mov	a,@r0
      001F41 C0 E0            [24] 5754 	push	acc
      001F43 08               [12] 5755 	inc	r0
      001F44 E6               [12] 5756 	mov	a,@r0
      001F45 C0 E0            [24] 5757 	push	acc
      001F47 08               [12] 5758 	inc	r0
      001F48 E6               [12] 5759 	mov	a,@r0
      001F49 C0 E0            [24] 5760 	push	acc
      001F4B 08               [12] 5761 	inc	r0
      001F4C E6               [12] 5762 	mov	a,@r0
      001F4D C0 E0            [24] 5763 	push	acc
      001F4F E5*00            [12] 5764 	mov	a,_bp
      001F51 24 19            [12] 5765 	add	a,#0x19
      001F53 F8               [12] 5766 	mov	r0,a
      001F54 86 82            [24] 5767 	mov	dpl,@r0
      001F56 08               [12] 5768 	inc	r0
      001F57 86 83            [24] 5769 	mov	dph,@r0
      001F59 08               [12] 5770 	inc	r0
      001F5A 86 F0            [24] 5771 	mov	b,@r0
      001F5C 08               [12] 5772 	inc	r0
      001F5D E6               [12] 5773 	mov	a,@r0
      001F5E 12r00r00         [24] 5774 	lcall	__modslong
      001F61 AC 82            [24] 5775 	mov	r4,dpl
      001F63 AD 83            [24] 5776 	mov	r5,dph
      001F65 AE F0            [24] 5777 	mov	r6,b
      001F67 FF               [12] 5778 	mov	r7,a
      001F68 E5 81            [12] 5779 	mov	a,sp
      001F6A 24 FC            [12] 5780 	add	a,#0xfc
      001F6C F5 81            [12] 5781 	mov	sp,a
      001F6E E5*00            [12] 5782 	mov	a,_bp
      001F70 24 19            [12] 5783 	add	a,#0x19
      001F72 F8               [12] 5784 	mov	r0,a
      001F73 A6 04            [24] 5785 	mov	@r0,ar4
      001F75 08               [12] 5786 	inc	r0
      001F76 A6 05            [24] 5787 	mov	@r0,ar5
      001F78 08               [12] 5788 	inc	r0
      001F79 A6 06            [24] 5789 	mov	@r0,ar6
      001F7B 08               [12] 5790 	inc	r0
      001F7C A6 07            [24] 5791 	mov	@r0,ar7
      001F7E 80 5F            [24] 5792 	sjmp	00192$
      001F80                       5793 00191$:
                                   5794 ;	calc.c:270: else d1 = (unsigned long)d1 % (unsigned long)d0;
      001F80 E5*00            [12] 5795 	mov	a,_bp
      001F82 24 19            [12] 5796 	add	a,#0x19
      001F84 F8               [12] 5797 	mov	r0,a
      001F85 E5*00            [12] 5798 	mov	a,_bp
      001F87 24 07            [12] 5799 	add	a,#0x07
      001F89 F9               [12] 5800 	mov	r1,a
      001F8A E6               [12] 5801 	mov	a,@r0
      001F8B F7               [12] 5802 	mov	@r1,a
      001F8C 08               [12] 5803 	inc	r0
      001F8D 09               [12] 5804 	inc	r1
      001F8E E6               [12] 5805 	mov	a,@r0
      001F8F F7               [12] 5806 	mov	@r1,a
      001F90 08               [12] 5807 	inc	r0
      001F91 09               [12] 5808 	inc	r1
      001F92 E6               [12] 5809 	mov	a,@r0
      001F93 F7               [12] 5810 	mov	@r1,a
      001F94 08               [12] 5811 	inc	r0
      001F95 09               [12] 5812 	inc	r1
      001F96 E6               [12] 5813 	mov	a,@r0
      001F97 F7               [12] 5814 	mov	@r1,a
      001F98 E5*00            [12] 5815 	mov	a,_bp
      001F9A 24 15            [12] 5816 	add	a,#0x15
      001F9C F8               [12] 5817 	mov	r0,a
      001F9D 86 02            [24] 5818 	mov	ar2,@r0
      001F9F 08               [12] 5819 	inc	r0
      001FA0 86 03            [24] 5820 	mov	ar3,@r0
      001FA2 08               [12] 5821 	inc	r0
      001FA3 86 06            [24] 5822 	mov	ar6,@r0
      001FA5 08               [12] 5823 	inc	r0
      001FA6 86 07            [24] 5824 	mov	ar7,@r0
      001FA8 C0 02            [24] 5825 	push	ar2
      001FAA C0 03            [24] 5826 	push	ar3
      001FAC C0 06            [24] 5827 	push	ar6
      001FAE C0 07            [24] 5828 	push	ar7
      001FB0 E5*00            [12] 5829 	mov	a,_bp
      001FB2 24 07            [12] 5830 	add	a,#0x07
      001FB4 F8               [12] 5831 	mov	r0,a
      001FB5 86 82            [24] 5832 	mov	dpl,@r0
      001FB7 08               [12] 5833 	inc	r0
      001FB8 86 83            [24] 5834 	mov	dph,@r0
      001FBA 08               [12] 5835 	inc	r0
      001FBB 86 F0            [24] 5836 	mov	b,@r0
      001FBD 08               [12] 5837 	inc	r0
      001FBE E6               [12] 5838 	mov	a,@r0
      001FBF 12r00r00         [24] 5839 	lcall	__modulong
      001FC2 AC 82            [24] 5840 	mov	r4,dpl
      001FC4 AD 83            [24] 5841 	mov	r5,dph
      001FC6 AE F0            [24] 5842 	mov	r6,b
      001FC8 FF               [12] 5843 	mov	r7,a
      001FC9 E5 81            [12] 5844 	mov	a,sp
      001FCB 24 FC            [12] 5845 	add	a,#0xfc
      001FCD F5 81            [12] 5846 	mov	sp,a
      001FCF E5*00            [12] 5847 	mov	a,_bp
      001FD1 24 19            [12] 5848 	add	a,#0x19
      001FD3 F8               [12] 5849 	mov	r0,a
      001FD4 A6 04            [24] 5850 	mov	@r0,ar4
      001FD6 08               [12] 5851 	inc	r0
      001FD7 A6 05            [24] 5852 	mov	@r0,ar5
      001FD9 08               [12] 5853 	inc	r0
      001FDA A6 06            [24] 5854 	mov	@r0,ar6
      001FDC 08               [12] 5855 	inc	r0
      001FDD A6 07            [24] 5856 	mov	@r0,ar7
      001FDF                       5857 00192$:
                                   5858 ;	calc.c:271: (void)stack_push(ctx->ps, d1);
      001FDF E5*00            [12] 5859 	mov	a,_bp
      001FE1 24 0E            [12] 5860 	add	a,#0x0e
      001FE3 F8               [12] 5861 	mov	r0,a
      001FE4 86 82            [24] 5862 	mov	dpl,@r0
      001FE6 08               [12] 5863 	inc	r0
      001FE7 86 83            [24] 5864 	mov	dph,@r0
      001FE9 08               [12] 5865 	inc	r0
      001FEA 86 F0            [24] 5866 	mov	b,@r0
      001FEC 12r00r00         [24] 5867 	lcall	__gptrget
      001FEF FD               [12] 5868 	mov	r5,a
      001FF0 A3               [24] 5869 	inc	dptr
      001FF1 12r00r00         [24] 5870 	lcall	__gptrget
      001FF4 FE               [12] 5871 	mov	r6,a
      001FF5 A3               [24] 5872 	inc	dptr
      001FF6 12r00r00         [24] 5873 	lcall	__gptrget
      001FF9 FF               [12] 5874 	mov	r7,a
      001FFA E5*00            [12] 5875 	mov	a,_bp
      001FFC 24 19            [12] 5876 	add	a,#0x19
      001FFE F8               [12] 5877 	mov	r0,a
      001FFF E6               [12] 5878 	mov	a,@r0
      002000 C0 E0            [24] 5879 	push	acc
      002002 08               [12] 5880 	inc	r0
      002003 E6               [12] 5881 	mov	a,@r0
      002004 C0 E0            [24] 5882 	push	acc
      002006 08               [12] 5883 	inc	r0
      002007 E6               [12] 5884 	mov	a,@r0
      002008 C0 E0            [24] 5885 	push	acc
      00200A 08               [12] 5886 	inc	r0
      00200B E6               [12] 5887 	mov	a,@r0
      00200C C0 E0            [24] 5888 	push	acc
      00200E 8D 82            [24] 5889 	mov	dpl,r5
      002010 8E 83            [24] 5890 	mov	dph,r6
      002012 8F F0            [24] 5891 	mov	b,r7
      002014 12r00r00         [24] 5892 	lcall	_stack_push
      002017 E5 81            [12] 5893 	mov	a,sp
      002019 24 FC            [12] 5894 	add	a,#0xfc
      00201B F5 81            [12] 5895 	mov	sp,a
                                   5896 ;	calc.c:273: break;
      00201D 02r2ArBC         [24] 5897 	ljmp	00249$
                                   5898 ;	calc.c:274: case '&':
      002020                       5899 00202$:
                                   5900 ;	calc.c:275: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      002020 E5*00            [12] 5901 	mov	a,_bp
      002022 24 15            [12] 5902 	add	a,#0x15
      002024 FF               [12] 5903 	mov	r7,a
      002025 E5*00            [12] 5904 	mov	a,_bp
      002027 24 0E            [12] 5905 	add	a,#0x0e
      002029 F8               [12] 5906 	mov	r0,a
      00202A A6 07            [24] 5907 	mov	@r0,ar7
      00202C 08               [12] 5908 	inc	r0
      00202D 76 00            [12] 5909 	mov	@r0,#0x00
      00202F 08               [12] 5910 	inc	r0
      002030 76 40            [12] 5911 	mov	@r0,#0x40
      002032 E5*00            [12] 5912 	mov	a,_bp
      002034 24 12            [12] 5913 	add	a,#0x12
      002036 F8               [12] 5914 	mov	r0,a
      002037 74 13            [12] 5915 	mov	a,#0x13
      002039 26               [12] 5916 	add	a,@r0
      00203A FA               [12] 5917 	mov	r2,a
      00203B 74 40            [12] 5918 	mov	a,#0x40
      00203D 08               [12] 5919 	inc	r0
      00203E 36               [12] 5920 	addc	a,@r0
      00203F FB               [12] 5921 	mov	r3,a
      002040 08               [12] 5922 	inc	r0
      002041 86 04            [24] 5923 	mov	ar4,@r0
      002043 8A 82            [24] 5924 	mov	dpl,r2
      002045 8B 83            [24] 5925 	mov	dph,r3
      002047 8C F0            [24] 5926 	mov	b,r4
      002049 12r00r00         [24] 5927 	lcall	__gptrget
      00204C FD               [12] 5928 	mov	r5,a
      00204D A3               [24] 5929 	inc	dptr
      00204E 12r00r00         [24] 5930 	lcall	__gptrget
      002051 FE               [12] 5931 	mov	r6,a
      002052 A3               [24] 5932 	inc	dptr
      002053 12r00r00         [24] 5933 	lcall	__gptrget
      002056 FF               [12] 5934 	mov	r7,a
      002057 C0 04            [24] 5935 	push	ar4
      002059 C0 03            [24] 5936 	push	ar3
      00205B C0 02            [24] 5937 	push	ar2
      00205D E5*00            [12] 5938 	mov	a,_bp
      00205F 24 0E            [12] 5939 	add	a,#0x0e
      002061 F8               [12] 5940 	mov	r0,a
      002062 E6               [12] 5941 	mov	a,@r0
      002063 C0 E0            [24] 5942 	push	acc
      002065 08               [12] 5943 	inc	r0
      002066 E6               [12] 5944 	mov	a,@r0
      002067 C0 E0            [24] 5945 	push	acc
      002069 08               [12] 5946 	inc	r0
      00206A E6               [12] 5947 	mov	a,@r0
      00206B C0 E0            [24] 5948 	push	acc
      00206D 8D 82            [24] 5949 	mov	dpl,r5
      00206F 8E 83            [24] 5950 	mov	dph,r6
      002071 8F F0            [24] 5951 	mov	b,r7
      002073 12r00r00         [24] 5952 	lcall	_stack_pop
      002076 AE 82            [24] 5953 	mov	r6,dpl
      002078 AF 83            [24] 5954 	mov	r7,dph
      00207A 15 81            [12] 5955 	dec	sp
      00207C 15 81            [12] 5956 	dec	sp
      00207E 15 81            [12] 5957 	dec	sp
      002080 D0 02            [24] 5958 	pop	ar2
      002082 D0 03            [24] 5959 	pop	ar3
      002084 D0 04            [24] 5960 	pop	ar4
      002086 EE               [12] 5961 	mov	a,r6
      002087 4F               [12] 5962 	orl	a,r7
      002088 70 25            [24] 5963 	jnz	00207$
      00208A 7Dr46            [12] 5964 	mov	r5,#___str_9
      00208C 7Cs00            [12] 5965 	mov	r4,#(___str_9 >> 8)
      00208E 7B 80            [12] 5966 	mov	r3,#0x80
                                   5967 ;	calc.c:51: return;
      002090                       5968 00462$:
                                   5969 ;	calc.c:49: for (; *s; s++) putchar(*s);
      002090 8D 82            [24] 5970 	mov	dpl,r5
      002092 8C 83            [24] 5971 	mov	dph,r4
      002094 8B F0            [24] 5972 	mov	b,r3
      002096 12r00r00         [24] 5973 	lcall	__gptrget
      002099 FF               [12] 5974 	mov	r7,a
      00209A 70 03            [24] 5975 	jnz	01366$
      00209C 02r2ArBC         [24] 5976 	ljmp	00249$
      00209F                       5977 01366$:
      00209F 7E 00            [12] 5978 	mov	r6,#0x00
      0020A1 8F 82            [24] 5979 	mov	dpl,r7
      0020A3 8E 83            [24] 5980 	mov	dph,r6
      0020A5 12r00r00         [24] 5981 	lcall	_putchar
      0020A8 0D               [12] 5982 	inc	r5
                                   5983 ;	calc.c:275: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      0020A9 BD 00 E4         [24] 5984 	cjne	r5,#0x00,00462$
      0020AC 0C               [12] 5985 	inc	r4
      0020AD 80 E1            [24] 5986 	sjmp	00462$
      0020AF                       5987 00207$:
                                   5988 ;	calc.c:276: else if (!stack_pop(ctx->ps, &d1)) {
      0020AF E5*00            [12] 5989 	mov	a,_bp
      0020B1 24 19            [12] 5990 	add	a,#0x19
      0020B3 FF               [12] 5991 	mov	r7,a
      0020B4 E5*00            [12] 5992 	mov	a,_bp
      0020B6 24 0E            [12] 5993 	add	a,#0x0e
      0020B8 F8               [12] 5994 	mov	r0,a
      0020B9 A6 07            [24] 5995 	mov	@r0,ar7
      0020BB 08               [12] 5996 	inc	r0
      0020BC 76 00            [12] 5997 	mov	@r0,#0x00
      0020BE 08               [12] 5998 	inc	r0
      0020BF 76 40            [12] 5999 	mov	@r0,#0x40
      0020C1 8A 82            [24] 6000 	mov	dpl,r2
      0020C3 8B 83            [24] 6001 	mov	dph,r3
      0020C5 8C F0            [24] 6002 	mov	b,r4
      0020C7 12r00r00         [24] 6003 	lcall	__gptrget
      0020CA FD               [12] 6004 	mov	r5,a
      0020CB A3               [24] 6005 	inc	dptr
      0020CC 12r00r00         [24] 6006 	lcall	__gptrget
      0020CF FE               [12] 6007 	mov	r6,a
      0020D0 A3               [24] 6008 	inc	dptr
      0020D1 12r00r00         [24] 6009 	lcall	__gptrget
      0020D4 FF               [12] 6010 	mov	r7,a
      0020D5 C0 04            [24] 6011 	push	ar4
      0020D7 C0 03            [24] 6012 	push	ar3
      0020D9 C0 02            [24] 6013 	push	ar2
      0020DB E5*00            [12] 6014 	mov	a,_bp
      0020DD 24 0E            [12] 6015 	add	a,#0x0e
      0020DF F8               [12] 6016 	mov	r0,a
      0020E0 E6               [12] 6017 	mov	a,@r0
      0020E1 C0 E0            [24] 6018 	push	acc
      0020E3 08               [12] 6019 	inc	r0
      0020E4 E6               [12] 6020 	mov	a,@r0
      0020E5 C0 E0            [24] 6021 	push	acc
      0020E7 08               [12] 6022 	inc	r0
      0020E8 E6               [12] 6023 	mov	a,@r0
      0020E9 C0 E0            [24] 6024 	push	acc
      0020EB 8D 82            [24] 6025 	mov	dpl,r5
      0020ED 8E 83            [24] 6026 	mov	dph,r6
      0020EF 8F F0            [24] 6027 	mov	b,r7
      0020F1 12r00r00         [24] 6028 	lcall	_stack_pop
      0020F4 AE 82            [24] 6029 	mov	r6,dpl
      0020F6 AF 83            [24] 6030 	mov	r7,dph
      0020F8 15 81            [12] 6031 	dec	sp
      0020FA 15 81            [12] 6032 	dec	sp
      0020FC 15 81            [12] 6033 	dec	sp
      0020FE D0 02            [24] 6034 	pop	ar2
      002100 D0 03            [24] 6035 	pop	ar3
      002102 D0 04            [24] 6036 	pop	ar4
      002104 EE               [12] 6037 	mov	a,r6
      002105 4F               [12] 6038 	orl	a,r7
      002106 70 5C            [24] 6039 	jnz	00204$
                                   6040 ;	calc.c:277: (void)stack_push(ctx->ps, d0);
      002108 8A 82            [24] 6041 	mov	dpl,r2
      00210A 8B 83            [24] 6042 	mov	dph,r3
      00210C 8C F0            [24] 6043 	mov	b,r4
      00210E 12r00r00         [24] 6044 	lcall	__gptrget
      002111 FD               [12] 6045 	mov	r5,a
      002112 A3               [24] 6046 	inc	dptr
      002113 12r00r00         [24] 6047 	lcall	__gptrget
      002116 FE               [12] 6048 	mov	r6,a
      002117 A3               [24] 6049 	inc	dptr
      002118 12r00r00         [24] 6050 	lcall	__gptrget
      00211B FF               [12] 6051 	mov	r7,a
      00211C E5*00            [12] 6052 	mov	a,_bp
      00211E 24 15            [12] 6053 	add	a,#0x15
      002120 F8               [12] 6054 	mov	r0,a
      002121 E6               [12] 6055 	mov	a,@r0
      002122 C0 E0            [24] 6056 	push	acc
      002124 08               [12] 6057 	inc	r0
      002125 E6               [12] 6058 	mov	a,@r0
      002126 C0 E0            [24] 6059 	push	acc
      002128 08               [12] 6060 	inc	r0
      002129 E6               [12] 6061 	mov	a,@r0
      00212A C0 E0            [24] 6062 	push	acc
      00212C 08               [12] 6063 	inc	r0
      00212D E6               [12] 6064 	mov	a,@r0
      00212E C0 E0            [24] 6065 	push	acc
      002130 8D 82            [24] 6066 	mov	dpl,r5
      002132 8E 83            [24] 6067 	mov	dph,r6
      002134 8F F0            [24] 6068 	mov	b,r7
      002136 12r00r00         [24] 6069 	lcall	_stack_push
      002139 E5 81            [12] 6070 	mov	a,sp
      00213B 24 FC            [12] 6071 	add	a,#0xfc
      00213D F5 81            [12] 6072 	mov	sp,a
                                   6073 ;	calc.c:278: printstr("\r\nstack underflow\r\n");
      00213F 7Dr46            [12] 6074 	mov	r5,#___str_9
      002141 7Cs00            [12] 6075 	mov	r4,#(___str_9 >> 8)
      002143 7B 80            [12] 6076 	mov	r3,#0x80
                                   6077 ;	calc.c:51: return;
      002145                       6078 00465$:
                                   6079 ;	calc.c:49: for (; *s; s++) putchar(*s);
      002145 8D 82            [24] 6080 	mov	dpl,r5
      002147 8C 83            [24] 6081 	mov	dph,r4
      002149 8B F0            [24] 6082 	mov	b,r3
      00214B 12r00r00         [24] 6083 	lcall	__gptrget
      00214E FF               [12] 6084 	mov	r7,a
      00214F 70 03            [24] 6085 	jnz	01369$
      002151 02r2ArBC         [24] 6086 	ljmp	00249$
      002154                       6087 01369$:
      002154 7E 00            [12] 6088 	mov	r6,#0x00
      002156 8F 82            [24] 6089 	mov	dpl,r7
      002158 8E 83            [24] 6090 	mov	dph,r6
      00215A 12r00r00         [24] 6091 	lcall	_putchar
      00215D 0D               [12] 6092 	inc	r5
                                   6093 ;	calc.c:278: printstr("\r\nstack underflow\r\n");
      00215E BD 00 E4         [24] 6094 	cjne	r5,#0x00,00465$
      002161 0C               [12] 6095 	inc	r4
      002162 80 E1            [24] 6096 	sjmp	00465$
      002164                       6097 00204$:
                                   6098 ;	calc.c:280: d1 &= d0;
      002164 E5*00            [12] 6099 	mov	a,_bp
      002166 24 19            [12] 6100 	add	a,#0x19
      002168 F8               [12] 6101 	mov	r0,a
      002169 E5*00            [12] 6102 	mov	a,_bp
      00216B 24 15            [12] 6103 	add	a,#0x15
      00216D F9               [12] 6104 	mov	r1,a
      00216E E7               [12] 6105 	mov	a,@r1
      00216F 56               [12] 6106 	anl	a,@r0
      002170 F6               [12] 6107 	mov	@r0,a
      002171 09               [12] 6108 	inc	r1
      002172 E7               [12] 6109 	mov	a,@r1
      002173 08               [12] 6110 	inc	r0
      002174 56               [12] 6111 	anl	a,@r0
      002175 F6               [12] 6112 	mov	@r0,a
      002176 09               [12] 6113 	inc	r1
      002177 E7               [12] 6114 	mov	a,@r1
      002178 08               [12] 6115 	inc	r0
      002179 56               [12] 6116 	anl	a,@r0
      00217A F6               [12] 6117 	mov	@r0,a
      00217B 09               [12] 6118 	inc	r1
      00217C E7               [12] 6119 	mov	a,@r1
      00217D 08               [12] 6120 	inc	r0
      00217E 56               [12] 6121 	anl	a,@r0
      00217F F6               [12] 6122 	mov	@r0,a
                                   6123 ;	calc.c:281: (void)stack_push(ctx->ps, d1);
      002180 8A 82            [24] 6124 	mov	dpl,r2
      002182 8B 83            [24] 6125 	mov	dph,r3
      002184 8C F0            [24] 6126 	mov	b,r4
      002186 12r00r00         [24] 6127 	lcall	__gptrget
      002189 FA               [12] 6128 	mov	r2,a
      00218A A3               [24] 6129 	inc	dptr
      00218B 12r00r00         [24] 6130 	lcall	__gptrget
      00218E FB               [12] 6131 	mov	r3,a
      00218F A3               [24] 6132 	inc	dptr
      002190 12r00r00         [24] 6133 	lcall	__gptrget
      002193 FC               [12] 6134 	mov	r4,a
      002194 E5*00            [12] 6135 	mov	a,_bp
      002196 24 19            [12] 6136 	add	a,#0x19
      002198 F8               [12] 6137 	mov	r0,a
      002199 E6               [12] 6138 	mov	a,@r0
      00219A C0 E0            [24] 6139 	push	acc
      00219C 08               [12] 6140 	inc	r0
      00219D E6               [12] 6141 	mov	a,@r0
      00219E C0 E0            [24] 6142 	push	acc
      0021A0 08               [12] 6143 	inc	r0
      0021A1 E6               [12] 6144 	mov	a,@r0
      0021A2 C0 E0            [24] 6145 	push	acc
      0021A4 08               [12] 6146 	inc	r0
      0021A5 E6               [12] 6147 	mov	a,@r0
      0021A6 C0 E0            [24] 6148 	push	acc
      0021A8 8A 82            [24] 6149 	mov	dpl,r2
      0021AA 8B 83            [24] 6150 	mov	dph,r3
      0021AC 8C F0            [24] 6151 	mov	b,r4
      0021AE 12r00r00         [24] 6152 	lcall	_stack_push
      0021B1 E5 81            [12] 6153 	mov	a,sp
      0021B3 24 FC            [12] 6154 	add	a,#0xfc
      0021B5 F5 81            [12] 6155 	mov	sp,a
                                   6156 ;	calc.c:283: break;
      0021B7 02r2ArBC         [24] 6157 	ljmp	00249$
                                   6158 ;	calc.c:284: case '|':
      0021BA                       6159 00209$:
                                   6160 ;	calc.c:285: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      0021BA E5*00            [12] 6161 	mov	a,_bp
      0021BC 24 15            [12] 6162 	add	a,#0x15
      0021BE FF               [12] 6163 	mov	r7,a
      0021BF E5*00            [12] 6164 	mov	a,_bp
      0021C1 24 0E            [12] 6165 	add	a,#0x0e
      0021C3 F8               [12] 6166 	mov	r0,a
      0021C4 A6 07            [24] 6167 	mov	@r0,ar7
      0021C6 08               [12] 6168 	inc	r0
      0021C7 76 00            [12] 6169 	mov	@r0,#0x00
      0021C9 08               [12] 6170 	inc	r0
      0021CA 76 40            [12] 6171 	mov	@r0,#0x40
      0021CC E5*00            [12] 6172 	mov	a,_bp
      0021CE 24 12            [12] 6173 	add	a,#0x12
      0021D0 F8               [12] 6174 	mov	r0,a
      0021D1 74 13            [12] 6175 	mov	a,#0x13
      0021D3 26               [12] 6176 	add	a,@r0
      0021D4 FA               [12] 6177 	mov	r2,a
      0021D5 74 40            [12] 6178 	mov	a,#0x40
      0021D7 08               [12] 6179 	inc	r0
      0021D8 36               [12] 6180 	addc	a,@r0
      0021D9 FB               [12] 6181 	mov	r3,a
      0021DA 08               [12] 6182 	inc	r0
      0021DB 86 04            [24] 6183 	mov	ar4,@r0
      0021DD 8A 82            [24] 6184 	mov	dpl,r2
      0021DF 8B 83            [24] 6185 	mov	dph,r3
      0021E1 8C F0            [24] 6186 	mov	b,r4
      0021E3 12r00r00         [24] 6187 	lcall	__gptrget
      0021E6 FD               [12] 6188 	mov	r5,a
      0021E7 A3               [24] 6189 	inc	dptr
      0021E8 12r00r00         [24] 6190 	lcall	__gptrget
      0021EB FE               [12] 6191 	mov	r6,a
      0021EC A3               [24] 6192 	inc	dptr
      0021ED 12r00r00         [24] 6193 	lcall	__gptrget
      0021F0 FF               [12] 6194 	mov	r7,a
      0021F1 C0 04            [24] 6195 	push	ar4
      0021F3 C0 03            [24] 6196 	push	ar3
      0021F5 C0 02            [24] 6197 	push	ar2
      0021F7 E5*00            [12] 6198 	mov	a,_bp
      0021F9 24 0E            [12] 6199 	add	a,#0x0e
      0021FB F8               [12] 6200 	mov	r0,a
      0021FC E6               [12] 6201 	mov	a,@r0
      0021FD C0 E0            [24] 6202 	push	acc
      0021FF 08               [12] 6203 	inc	r0
      002200 E6               [12] 6204 	mov	a,@r0
      002201 C0 E0            [24] 6205 	push	acc
      002203 08               [12] 6206 	inc	r0
      002204 E6               [12] 6207 	mov	a,@r0
      002205 C0 E0            [24] 6208 	push	acc
      002207 8D 82            [24] 6209 	mov	dpl,r5
      002209 8E 83            [24] 6210 	mov	dph,r6
      00220B 8F F0            [24] 6211 	mov	b,r7
      00220D 12r00r00         [24] 6212 	lcall	_stack_pop
      002210 AE 82            [24] 6213 	mov	r6,dpl
      002212 AF 83            [24] 6214 	mov	r7,dph
      002214 15 81            [12] 6215 	dec	sp
      002216 15 81            [12] 6216 	dec	sp
      002218 15 81            [12] 6217 	dec	sp
      00221A D0 02            [24] 6218 	pop	ar2
      00221C D0 03            [24] 6219 	pop	ar3
      00221E D0 04            [24] 6220 	pop	ar4
      002220 EE               [12] 6221 	mov	a,r6
      002221 4F               [12] 6222 	orl	a,r7
      002222 70 25            [24] 6223 	jnz	00214$
      002224 7Dr46            [12] 6224 	mov	r5,#___str_9
      002226 7Cs00            [12] 6225 	mov	r4,#(___str_9 >> 8)
      002228 7B 80            [12] 6226 	mov	r3,#0x80
                                   6227 ;	calc.c:51: return;
      00222A                       6228 00468$:
                                   6229 ;	calc.c:49: for (; *s; s++) putchar(*s);
      00222A 8D 82            [24] 6230 	mov	dpl,r5
      00222C 8C 83            [24] 6231 	mov	dph,r4
      00222E 8B F0            [24] 6232 	mov	b,r3
      002230 12r00r00         [24] 6233 	lcall	__gptrget
      002233 FF               [12] 6234 	mov	r7,a
      002234 70 03            [24] 6235 	jnz	01372$
      002236 02r2ArBC         [24] 6236 	ljmp	00249$
      002239                       6237 01372$:
      002239 7E 00            [12] 6238 	mov	r6,#0x00
      00223B 8F 82            [24] 6239 	mov	dpl,r7
      00223D 8E 83            [24] 6240 	mov	dph,r6
      00223F 12r00r00         [24] 6241 	lcall	_putchar
      002242 0D               [12] 6242 	inc	r5
                                   6243 ;	calc.c:285: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      002243 BD 00 E4         [24] 6244 	cjne	r5,#0x00,00468$
      002246 0C               [12] 6245 	inc	r4
      002247 80 E1            [24] 6246 	sjmp	00468$
      002249                       6247 00214$:
                                   6248 ;	calc.c:286: else if (!stack_pop(ctx->ps, &d1)) {
      002249 E5*00            [12] 6249 	mov	a,_bp
      00224B 24 19            [12] 6250 	add	a,#0x19
      00224D FF               [12] 6251 	mov	r7,a
      00224E E5*00            [12] 6252 	mov	a,_bp
      002250 24 0E            [12] 6253 	add	a,#0x0e
      002252 F8               [12] 6254 	mov	r0,a
      002253 A6 07            [24] 6255 	mov	@r0,ar7
      002255 08               [12] 6256 	inc	r0
      002256 76 00            [12] 6257 	mov	@r0,#0x00
      002258 08               [12] 6258 	inc	r0
      002259 76 40            [12] 6259 	mov	@r0,#0x40
      00225B 8A 82            [24] 6260 	mov	dpl,r2
      00225D 8B 83            [24] 6261 	mov	dph,r3
      00225F 8C F0            [24] 6262 	mov	b,r4
      002261 12r00r00         [24] 6263 	lcall	__gptrget
      002264 FD               [12] 6264 	mov	r5,a
      002265 A3               [24] 6265 	inc	dptr
      002266 12r00r00         [24] 6266 	lcall	__gptrget
      002269 FE               [12] 6267 	mov	r6,a
      00226A A3               [24] 6268 	inc	dptr
      00226B 12r00r00         [24] 6269 	lcall	__gptrget
      00226E FF               [12] 6270 	mov	r7,a
      00226F C0 04            [24] 6271 	push	ar4
      002271 C0 03            [24] 6272 	push	ar3
      002273 C0 02            [24] 6273 	push	ar2
      002275 E5*00            [12] 6274 	mov	a,_bp
      002277 24 0E            [12] 6275 	add	a,#0x0e
      002279 F8               [12] 6276 	mov	r0,a
      00227A E6               [12] 6277 	mov	a,@r0
      00227B C0 E0            [24] 6278 	push	acc
      00227D 08               [12] 6279 	inc	r0
      00227E E6               [12] 6280 	mov	a,@r0
      00227F C0 E0            [24] 6281 	push	acc
      002281 08               [12] 6282 	inc	r0
      002282 E6               [12] 6283 	mov	a,@r0
      002283 C0 E0            [24] 6284 	push	acc
      002285 8D 82            [24] 6285 	mov	dpl,r5
      002287 8E 83            [24] 6286 	mov	dph,r6
      002289 8F F0            [24] 6287 	mov	b,r7
      00228B 12r00r00         [24] 6288 	lcall	_stack_pop
      00228E AE 82            [24] 6289 	mov	r6,dpl
      002290 AF 83            [24] 6290 	mov	r7,dph
      002292 15 81            [12] 6291 	dec	sp
      002294 15 81            [12] 6292 	dec	sp
      002296 15 81            [12] 6293 	dec	sp
      002298 D0 02            [24] 6294 	pop	ar2
      00229A D0 03            [24] 6295 	pop	ar3
      00229C D0 04            [24] 6296 	pop	ar4
      00229E EE               [12] 6297 	mov	a,r6
      00229F 4F               [12] 6298 	orl	a,r7
      0022A0 70 5C            [24] 6299 	jnz	00211$
                                   6300 ;	calc.c:287: (void)stack_push(ctx->ps, d0);
      0022A2 8A 82            [24] 6301 	mov	dpl,r2
      0022A4 8B 83            [24] 6302 	mov	dph,r3
      0022A6 8C F0            [24] 6303 	mov	b,r4
      0022A8 12r00r00         [24] 6304 	lcall	__gptrget
      0022AB FD               [12] 6305 	mov	r5,a
      0022AC A3               [24] 6306 	inc	dptr
      0022AD 12r00r00         [24] 6307 	lcall	__gptrget
      0022B0 FE               [12] 6308 	mov	r6,a
      0022B1 A3               [24] 6309 	inc	dptr
      0022B2 12r00r00         [24] 6310 	lcall	__gptrget
      0022B5 FF               [12] 6311 	mov	r7,a
      0022B6 E5*00            [12] 6312 	mov	a,_bp
      0022B8 24 15            [12] 6313 	add	a,#0x15
      0022BA F8               [12] 6314 	mov	r0,a
      0022BB E6               [12] 6315 	mov	a,@r0
      0022BC C0 E0            [24] 6316 	push	acc
      0022BE 08               [12] 6317 	inc	r0
      0022BF E6               [12] 6318 	mov	a,@r0
      0022C0 C0 E0            [24] 6319 	push	acc
      0022C2 08               [12] 6320 	inc	r0
      0022C3 E6               [12] 6321 	mov	a,@r0
      0022C4 C0 E0            [24] 6322 	push	acc
      0022C6 08               [12] 6323 	inc	r0
      0022C7 E6               [12] 6324 	mov	a,@r0
      0022C8 C0 E0            [24] 6325 	push	acc
      0022CA 8D 82            [24] 6326 	mov	dpl,r5
      0022CC 8E 83            [24] 6327 	mov	dph,r6
      0022CE 8F F0            [24] 6328 	mov	b,r7
      0022D0 12r00r00         [24] 6329 	lcall	_stack_push
      0022D3 E5 81            [12] 6330 	mov	a,sp
      0022D5 24 FC            [12] 6331 	add	a,#0xfc
      0022D7 F5 81            [12] 6332 	mov	sp,a
                                   6333 ;	calc.c:288: printstr("\r\nstack underflow\r\n");
      0022D9 7Dr46            [12] 6334 	mov	r5,#___str_9
      0022DB 7Cs00            [12] 6335 	mov	r4,#(___str_9 >> 8)
      0022DD 7B 80            [12] 6336 	mov	r3,#0x80
                                   6337 ;	calc.c:51: return;
      0022DF                       6338 00471$:
                                   6339 ;	calc.c:49: for (; *s; s++) putchar(*s);
      0022DF 8D 82            [24] 6340 	mov	dpl,r5
      0022E1 8C 83            [24] 6341 	mov	dph,r4
      0022E3 8B F0            [24] 6342 	mov	b,r3
      0022E5 12r00r00         [24] 6343 	lcall	__gptrget
      0022E8 FF               [12] 6344 	mov	r7,a
      0022E9 70 03            [24] 6345 	jnz	01375$
      0022EB 02r2ArBC         [24] 6346 	ljmp	00249$
      0022EE                       6347 01375$:
      0022EE 7E 00            [12] 6348 	mov	r6,#0x00
      0022F0 8F 82            [24] 6349 	mov	dpl,r7
      0022F2 8E 83            [24] 6350 	mov	dph,r6
      0022F4 12r00r00         [24] 6351 	lcall	_putchar
      0022F7 0D               [12] 6352 	inc	r5
                                   6353 ;	calc.c:288: printstr("\r\nstack underflow\r\n");
      0022F8 BD 00 E4         [24] 6354 	cjne	r5,#0x00,00471$
      0022FB 0C               [12] 6355 	inc	r4
      0022FC 80 E1            [24] 6356 	sjmp	00471$
      0022FE                       6357 00211$:
                                   6358 ;	calc.c:290: d1 |= d0;
      0022FE E5*00            [12] 6359 	mov	a,_bp
      002300 24 19            [12] 6360 	add	a,#0x19
      002302 F8               [12] 6361 	mov	r0,a
      002303 E5*00            [12] 6362 	mov	a,_bp
      002305 24 15            [12] 6363 	add	a,#0x15
      002307 F9               [12] 6364 	mov	r1,a
      002308 E7               [12] 6365 	mov	a,@r1
      002309 46               [12] 6366 	orl	a,@r0
      00230A F6               [12] 6367 	mov	@r0,a
      00230B 09               [12] 6368 	inc	r1
      00230C E7               [12] 6369 	mov	a,@r1
      00230D 08               [12] 6370 	inc	r0
      00230E 46               [12] 6371 	orl	a,@r0
      00230F F6               [12] 6372 	mov	@r0,a
      002310 09               [12] 6373 	inc	r1
      002311 E7               [12] 6374 	mov	a,@r1
      002312 08               [12] 6375 	inc	r0
      002313 46               [12] 6376 	orl	a,@r0
      002314 F6               [12] 6377 	mov	@r0,a
      002315 09               [12] 6378 	inc	r1
      002316 E7               [12] 6379 	mov	a,@r1
      002317 08               [12] 6380 	inc	r0
      002318 46               [12] 6381 	orl	a,@r0
      002319 F6               [12] 6382 	mov	@r0,a
                                   6383 ;	calc.c:291: (void)stack_push(ctx->ps, d1);
      00231A 8A 82            [24] 6384 	mov	dpl,r2
      00231C 8B 83            [24] 6385 	mov	dph,r3
      00231E 8C F0            [24] 6386 	mov	b,r4
      002320 12r00r00         [24] 6387 	lcall	__gptrget
      002323 FA               [12] 6388 	mov	r2,a
      002324 A3               [24] 6389 	inc	dptr
      002325 12r00r00         [24] 6390 	lcall	__gptrget
      002328 FB               [12] 6391 	mov	r3,a
      002329 A3               [24] 6392 	inc	dptr
      00232A 12r00r00         [24] 6393 	lcall	__gptrget
      00232D FC               [12] 6394 	mov	r4,a
      00232E E5*00            [12] 6395 	mov	a,_bp
      002330 24 19            [12] 6396 	add	a,#0x19
      002332 F8               [12] 6397 	mov	r0,a
      002333 E6               [12] 6398 	mov	a,@r0
      002334 C0 E0            [24] 6399 	push	acc
      002336 08               [12] 6400 	inc	r0
      002337 E6               [12] 6401 	mov	a,@r0
      002338 C0 E0            [24] 6402 	push	acc
      00233A 08               [12] 6403 	inc	r0
      00233B E6               [12] 6404 	mov	a,@r0
      00233C C0 E0            [24] 6405 	push	acc
      00233E 08               [12] 6406 	inc	r0
      00233F E6               [12] 6407 	mov	a,@r0
      002340 C0 E0            [24] 6408 	push	acc
      002342 8A 82            [24] 6409 	mov	dpl,r2
      002344 8B 83            [24] 6410 	mov	dph,r3
      002346 8C F0            [24] 6411 	mov	b,r4
      002348 12r00r00         [24] 6412 	lcall	_stack_push
      00234B E5 81            [12] 6413 	mov	a,sp
      00234D 24 FC            [12] 6414 	add	a,#0xfc
      00234F F5 81            [12] 6415 	mov	sp,a
                                   6416 ;	calc.c:293: break;
      002351 02r2ArBC         [24] 6417 	ljmp	00249$
                                   6418 ;	calc.c:294: case '^':
      002354                       6419 00216$:
                                   6420 ;	calc.c:295: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      002354 E5*00            [12] 6421 	mov	a,_bp
      002356 24 15            [12] 6422 	add	a,#0x15
      002358 FF               [12] 6423 	mov	r7,a
      002359 E5*00            [12] 6424 	mov	a,_bp
      00235B 24 0E            [12] 6425 	add	a,#0x0e
      00235D F8               [12] 6426 	mov	r0,a
      00235E A6 07            [24] 6427 	mov	@r0,ar7
      002360 08               [12] 6428 	inc	r0
      002361 76 00            [12] 6429 	mov	@r0,#0x00
      002363 08               [12] 6430 	inc	r0
      002364 76 40            [12] 6431 	mov	@r0,#0x40
      002366 E5*00            [12] 6432 	mov	a,_bp
      002368 24 12            [12] 6433 	add	a,#0x12
      00236A F8               [12] 6434 	mov	r0,a
      00236B 74 13            [12] 6435 	mov	a,#0x13
      00236D 26               [12] 6436 	add	a,@r0
      00236E FA               [12] 6437 	mov	r2,a
      00236F 74 40            [12] 6438 	mov	a,#0x40
      002371 08               [12] 6439 	inc	r0
      002372 36               [12] 6440 	addc	a,@r0
      002373 FB               [12] 6441 	mov	r3,a
      002374 08               [12] 6442 	inc	r0
      002375 86 04            [24] 6443 	mov	ar4,@r0
      002377 8A 82            [24] 6444 	mov	dpl,r2
      002379 8B 83            [24] 6445 	mov	dph,r3
      00237B 8C F0            [24] 6446 	mov	b,r4
      00237D 12r00r00         [24] 6447 	lcall	__gptrget
      002380 FD               [12] 6448 	mov	r5,a
      002381 A3               [24] 6449 	inc	dptr
      002382 12r00r00         [24] 6450 	lcall	__gptrget
      002385 FE               [12] 6451 	mov	r6,a
      002386 A3               [24] 6452 	inc	dptr
      002387 12r00r00         [24] 6453 	lcall	__gptrget
      00238A FF               [12] 6454 	mov	r7,a
      00238B C0 04            [24] 6455 	push	ar4
      00238D C0 03            [24] 6456 	push	ar3
      00238F C0 02            [24] 6457 	push	ar2
      002391 E5*00            [12] 6458 	mov	a,_bp
      002393 24 0E            [12] 6459 	add	a,#0x0e
      002395 F8               [12] 6460 	mov	r0,a
      002396 E6               [12] 6461 	mov	a,@r0
      002397 C0 E0            [24] 6462 	push	acc
      002399 08               [12] 6463 	inc	r0
      00239A E6               [12] 6464 	mov	a,@r0
      00239B C0 E0            [24] 6465 	push	acc
      00239D 08               [12] 6466 	inc	r0
      00239E E6               [12] 6467 	mov	a,@r0
      00239F C0 E0            [24] 6468 	push	acc
      0023A1 8D 82            [24] 6469 	mov	dpl,r5
      0023A3 8E 83            [24] 6470 	mov	dph,r6
      0023A5 8F F0            [24] 6471 	mov	b,r7
      0023A7 12r00r00         [24] 6472 	lcall	_stack_pop
      0023AA AE 82            [24] 6473 	mov	r6,dpl
      0023AC AF 83            [24] 6474 	mov	r7,dph
      0023AE 15 81            [12] 6475 	dec	sp
      0023B0 15 81            [12] 6476 	dec	sp
      0023B2 15 81            [12] 6477 	dec	sp
      0023B4 D0 02            [24] 6478 	pop	ar2
      0023B6 D0 03            [24] 6479 	pop	ar3
      0023B8 D0 04            [24] 6480 	pop	ar4
      0023BA EE               [12] 6481 	mov	a,r6
      0023BB 4F               [12] 6482 	orl	a,r7
      0023BC 70 25            [24] 6483 	jnz	00221$
      0023BE 7Dr46            [12] 6484 	mov	r5,#___str_9
      0023C0 7Cs00            [12] 6485 	mov	r4,#(___str_9 >> 8)
      0023C2 7B 80            [12] 6486 	mov	r3,#0x80
                                   6487 ;	calc.c:51: return;
      0023C4                       6488 00474$:
                                   6489 ;	calc.c:49: for (; *s; s++) putchar(*s);
      0023C4 8D 82            [24] 6490 	mov	dpl,r5
      0023C6 8C 83            [24] 6491 	mov	dph,r4
      0023C8 8B F0            [24] 6492 	mov	b,r3
      0023CA 12r00r00         [24] 6493 	lcall	__gptrget
      0023CD FF               [12] 6494 	mov	r7,a
      0023CE 70 03            [24] 6495 	jnz	01378$
      0023D0 02r2ArBC         [24] 6496 	ljmp	00249$
      0023D3                       6497 01378$:
      0023D3 7E 00            [12] 6498 	mov	r6,#0x00
      0023D5 8F 82            [24] 6499 	mov	dpl,r7
      0023D7 8E 83            [24] 6500 	mov	dph,r6
      0023D9 12r00r00         [24] 6501 	lcall	_putchar
      0023DC 0D               [12] 6502 	inc	r5
                                   6503 ;	calc.c:295: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      0023DD BD 00 E4         [24] 6504 	cjne	r5,#0x00,00474$
      0023E0 0C               [12] 6505 	inc	r4
      0023E1 80 E1            [24] 6506 	sjmp	00474$
      0023E3                       6507 00221$:
                                   6508 ;	calc.c:296: else if (!stack_pop(ctx->ps, &d1)) {
      0023E3 E5*00            [12] 6509 	mov	a,_bp
      0023E5 24 19            [12] 6510 	add	a,#0x19
      0023E7 FF               [12] 6511 	mov	r7,a
      0023E8 E5*00            [12] 6512 	mov	a,_bp
      0023EA 24 0E            [12] 6513 	add	a,#0x0e
      0023EC F8               [12] 6514 	mov	r0,a
      0023ED A6 07            [24] 6515 	mov	@r0,ar7
      0023EF 08               [12] 6516 	inc	r0
      0023F0 76 00            [12] 6517 	mov	@r0,#0x00
      0023F2 08               [12] 6518 	inc	r0
      0023F3 76 40            [12] 6519 	mov	@r0,#0x40
      0023F5 8A 82            [24] 6520 	mov	dpl,r2
      0023F7 8B 83            [24] 6521 	mov	dph,r3
      0023F9 8C F0            [24] 6522 	mov	b,r4
      0023FB 12r00r00         [24] 6523 	lcall	__gptrget
      0023FE FD               [12] 6524 	mov	r5,a
      0023FF A3               [24] 6525 	inc	dptr
      002400 12r00r00         [24] 6526 	lcall	__gptrget
      002403 FE               [12] 6527 	mov	r6,a
      002404 A3               [24] 6528 	inc	dptr
      002405 12r00r00         [24] 6529 	lcall	__gptrget
      002408 FF               [12] 6530 	mov	r7,a
      002409 C0 04            [24] 6531 	push	ar4
      00240B C0 03            [24] 6532 	push	ar3
      00240D C0 02            [24] 6533 	push	ar2
      00240F E5*00            [12] 6534 	mov	a,_bp
      002411 24 0E            [12] 6535 	add	a,#0x0e
      002413 F8               [12] 6536 	mov	r0,a
      002414 E6               [12] 6537 	mov	a,@r0
      002415 C0 E0            [24] 6538 	push	acc
      002417 08               [12] 6539 	inc	r0
      002418 E6               [12] 6540 	mov	a,@r0
      002419 C0 E0            [24] 6541 	push	acc
      00241B 08               [12] 6542 	inc	r0
      00241C E6               [12] 6543 	mov	a,@r0
      00241D C0 E0            [24] 6544 	push	acc
      00241F 8D 82            [24] 6545 	mov	dpl,r5
      002421 8E 83            [24] 6546 	mov	dph,r6
      002423 8F F0            [24] 6547 	mov	b,r7
      002425 12r00r00         [24] 6548 	lcall	_stack_pop
      002428 AE 82            [24] 6549 	mov	r6,dpl
      00242A AF 83            [24] 6550 	mov	r7,dph
      00242C 15 81            [12] 6551 	dec	sp
      00242E 15 81            [12] 6552 	dec	sp
      002430 15 81            [12] 6553 	dec	sp
      002432 D0 02            [24] 6554 	pop	ar2
      002434 D0 03            [24] 6555 	pop	ar3
      002436 D0 04            [24] 6556 	pop	ar4
      002438 EE               [12] 6557 	mov	a,r6
      002439 4F               [12] 6558 	orl	a,r7
      00243A 70 5C            [24] 6559 	jnz	00218$
                                   6560 ;	calc.c:297: (void)stack_push(ctx->ps, d0);
      00243C 8A 82            [24] 6561 	mov	dpl,r2
      00243E 8B 83            [24] 6562 	mov	dph,r3
      002440 8C F0            [24] 6563 	mov	b,r4
      002442 12r00r00         [24] 6564 	lcall	__gptrget
      002445 FD               [12] 6565 	mov	r5,a
      002446 A3               [24] 6566 	inc	dptr
      002447 12r00r00         [24] 6567 	lcall	__gptrget
      00244A FE               [12] 6568 	mov	r6,a
      00244B A3               [24] 6569 	inc	dptr
      00244C 12r00r00         [24] 6570 	lcall	__gptrget
      00244F FF               [12] 6571 	mov	r7,a
      002450 E5*00            [12] 6572 	mov	a,_bp
      002452 24 15            [12] 6573 	add	a,#0x15
      002454 F8               [12] 6574 	mov	r0,a
      002455 E6               [12] 6575 	mov	a,@r0
      002456 C0 E0            [24] 6576 	push	acc
      002458 08               [12] 6577 	inc	r0
      002459 E6               [12] 6578 	mov	a,@r0
      00245A C0 E0            [24] 6579 	push	acc
      00245C 08               [12] 6580 	inc	r0
      00245D E6               [12] 6581 	mov	a,@r0
      00245E C0 E0            [24] 6582 	push	acc
      002460 08               [12] 6583 	inc	r0
      002461 E6               [12] 6584 	mov	a,@r0
      002462 C0 E0            [24] 6585 	push	acc
      002464 8D 82            [24] 6586 	mov	dpl,r5
      002466 8E 83            [24] 6587 	mov	dph,r6
      002468 8F F0            [24] 6588 	mov	b,r7
      00246A 12r00r00         [24] 6589 	lcall	_stack_push
      00246D E5 81            [12] 6590 	mov	a,sp
      00246F 24 FC            [12] 6591 	add	a,#0xfc
      002471 F5 81            [12] 6592 	mov	sp,a
                                   6593 ;	calc.c:298: printstr("\r\nstack underflow\r\n");
      002473 7Dr46            [12] 6594 	mov	r5,#___str_9
      002475 7Cs00            [12] 6595 	mov	r4,#(___str_9 >> 8)
      002477 7B 80            [12] 6596 	mov	r3,#0x80
                                   6597 ;	calc.c:51: return;
      002479                       6598 00477$:
                                   6599 ;	calc.c:49: for (; *s; s++) putchar(*s);
      002479 8D 82            [24] 6600 	mov	dpl,r5
      00247B 8C 83            [24] 6601 	mov	dph,r4
      00247D 8B F0            [24] 6602 	mov	b,r3
      00247F 12r00r00         [24] 6603 	lcall	__gptrget
      002482 FF               [12] 6604 	mov	r7,a
      002483 70 03            [24] 6605 	jnz	01381$
      002485 02r2ArBC         [24] 6606 	ljmp	00249$
      002488                       6607 01381$:
      002488 7E 00            [12] 6608 	mov	r6,#0x00
      00248A 8F 82            [24] 6609 	mov	dpl,r7
      00248C 8E 83            [24] 6610 	mov	dph,r6
      00248E 12r00r00         [24] 6611 	lcall	_putchar
      002491 0D               [12] 6612 	inc	r5
                                   6613 ;	calc.c:298: printstr("\r\nstack underflow\r\n");
      002492 BD 00 E4         [24] 6614 	cjne	r5,#0x00,00477$
      002495 0C               [12] 6615 	inc	r4
      002496 80 E1            [24] 6616 	sjmp	00477$
      002498                       6617 00218$:
                                   6618 ;	calc.c:300: d1 ^= d0;
      002498 E5*00            [12] 6619 	mov	a,_bp
      00249A 24 19            [12] 6620 	add	a,#0x19
      00249C F8               [12] 6621 	mov	r0,a
      00249D E5*00            [12] 6622 	mov	a,_bp
      00249F 24 15            [12] 6623 	add	a,#0x15
      0024A1 F9               [12] 6624 	mov	r1,a
      0024A2 E7               [12] 6625 	mov	a,@r1
      0024A3 66               [12] 6626 	xrl	a,@r0
      0024A4 F6               [12] 6627 	mov	@r0,a
      0024A5 09               [12] 6628 	inc	r1
      0024A6 E7               [12] 6629 	mov	a,@r1
      0024A7 08               [12] 6630 	inc	r0
      0024A8 66               [12] 6631 	xrl	a,@r0
      0024A9 F6               [12] 6632 	mov	@r0,a
      0024AA 09               [12] 6633 	inc	r1
      0024AB E7               [12] 6634 	mov	a,@r1
      0024AC 08               [12] 6635 	inc	r0
      0024AD 66               [12] 6636 	xrl	a,@r0
      0024AE F6               [12] 6637 	mov	@r0,a
      0024AF 09               [12] 6638 	inc	r1
      0024B0 E7               [12] 6639 	mov	a,@r1
      0024B1 08               [12] 6640 	inc	r0
      0024B2 66               [12] 6641 	xrl	a,@r0
      0024B3 F6               [12] 6642 	mov	@r0,a
                                   6643 ;	calc.c:301: (void)stack_push(ctx->ps, d1);
      0024B4 8A 82            [24] 6644 	mov	dpl,r2
      0024B6 8B 83            [24] 6645 	mov	dph,r3
      0024B8 8C F0            [24] 6646 	mov	b,r4
      0024BA 12r00r00         [24] 6647 	lcall	__gptrget
      0024BD FA               [12] 6648 	mov	r2,a
      0024BE A3               [24] 6649 	inc	dptr
      0024BF 12r00r00         [24] 6650 	lcall	__gptrget
      0024C2 FB               [12] 6651 	mov	r3,a
      0024C3 A3               [24] 6652 	inc	dptr
      0024C4 12r00r00         [24] 6653 	lcall	__gptrget
      0024C7 FC               [12] 6654 	mov	r4,a
      0024C8 E5*00            [12] 6655 	mov	a,_bp
      0024CA 24 19            [12] 6656 	add	a,#0x19
      0024CC F8               [12] 6657 	mov	r0,a
      0024CD E6               [12] 6658 	mov	a,@r0
      0024CE C0 E0            [24] 6659 	push	acc
      0024D0 08               [12] 6660 	inc	r0
      0024D1 E6               [12] 6661 	mov	a,@r0
      0024D2 C0 E0            [24] 6662 	push	acc
      0024D4 08               [12] 6663 	inc	r0
      0024D5 E6               [12] 6664 	mov	a,@r0
      0024D6 C0 E0            [24] 6665 	push	acc
      0024D8 08               [12] 6666 	inc	r0
      0024D9 E6               [12] 6667 	mov	a,@r0
      0024DA C0 E0            [24] 6668 	push	acc
      0024DC 8A 82            [24] 6669 	mov	dpl,r2
      0024DE 8B 83            [24] 6670 	mov	dph,r3
      0024E0 8C F0            [24] 6671 	mov	b,r4
      0024E2 12r00r00         [24] 6672 	lcall	_stack_push
      0024E5 E5 81            [12] 6673 	mov	a,sp
      0024E7 24 FC            [12] 6674 	add	a,#0xfc
      0024E9 F5 81            [12] 6675 	mov	sp,a
                                   6676 ;	calc.c:303: break;
      0024EB 02r2ArBC         [24] 6677 	ljmp	00249$
                                   6678 ;	calc.c:304: case '>':
      0024EE                       6679 00223$:
                                   6680 ;	calc.c:305: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      0024EE E5*00            [12] 6681 	mov	a,_bp
      0024F0 24 15            [12] 6682 	add	a,#0x15
      0024F2 FC               [12] 6683 	mov	r4,a
      0024F3 7B 00            [12] 6684 	mov	r3,#0x00
      0024F5 7A 40            [12] 6685 	mov	r2,#0x40
      0024F7 E5*00            [12] 6686 	mov	a,_bp
      0024F9 24 12            [12] 6687 	add	a,#0x12
      0024FB F8               [12] 6688 	mov	r0,a
      0024FC E5*00            [12] 6689 	mov	a,_bp
      0024FE 24 0B            [12] 6690 	add	a,#0x0b
      002500 F9               [12] 6691 	mov	r1,a
      002501 74 13            [12] 6692 	mov	a,#0x13
      002503 26               [12] 6693 	add	a,@r0
      002504 F7               [12] 6694 	mov	@r1,a
      002505 74 40            [12] 6695 	mov	a,#0x40
      002507 08               [12] 6696 	inc	r0
      002508 36               [12] 6697 	addc	a,@r0
      002509 09               [12] 6698 	inc	r1
      00250A F7               [12] 6699 	mov	@r1,a
      00250B 08               [12] 6700 	inc	r0
      00250C 09               [12] 6701 	inc	r1
      00250D E6               [12] 6702 	mov	a,@r0
      00250E F7               [12] 6703 	mov	@r1,a
      00250F E5*00            [12] 6704 	mov	a,_bp
      002511 24 0B            [12] 6705 	add	a,#0x0b
      002513 F8               [12] 6706 	mov	r0,a
      002514 86 82            [24] 6707 	mov	dpl,@r0
      002516 08               [12] 6708 	inc	r0
      002517 86 83            [24] 6709 	mov	dph,@r0
      002519 08               [12] 6710 	inc	r0
      00251A 86 F0            [24] 6711 	mov	b,@r0
      00251C 12r00r00         [24] 6712 	lcall	__gptrget
      00251F FD               [12] 6713 	mov	r5,a
      002520 A3               [24] 6714 	inc	dptr
      002521 12r00r00         [24] 6715 	lcall	__gptrget
      002524 FE               [12] 6716 	mov	r6,a
      002525 A3               [24] 6717 	inc	dptr
      002526 12r00r00         [24] 6718 	lcall	__gptrget
      002529 FF               [12] 6719 	mov	r7,a
      00252A C0 04            [24] 6720 	push	ar4
      00252C C0 03            [24] 6721 	push	ar3
      00252E C0 02            [24] 6722 	push	ar2
      002530 8D 82            [24] 6723 	mov	dpl,r5
      002532 8E 83            [24] 6724 	mov	dph,r6
      002534 8F F0            [24] 6725 	mov	b,r7
      002536 12r00r00         [24] 6726 	lcall	_stack_pop
      002539 AE 82            [24] 6727 	mov	r6,dpl
      00253B AF 83            [24] 6728 	mov	r7,dph
      00253D 15 81            [12] 6729 	dec	sp
      00253F 15 81            [12] 6730 	dec	sp
      002541 15 81            [12] 6731 	dec	sp
      002543 EE               [12] 6732 	mov	a,r6
      002544 4F               [12] 6733 	orl	a,r7
      002545 70 25            [24] 6734 	jnz	00228$
      002547 7Dr46            [12] 6735 	mov	r5,#___str_9
      002549 7Cs00            [12] 6736 	mov	r4,#(___str_9 >> 8)
      00254B 7B 80            [12] 6737 	mov	r3,#0x80
                                   6738 ;	calc.c:51: return;
      00254D                       6739 00480$:
                                   6740 ;	calc.c:49: for (; *s; s++) putchar(*s);
      00254D 8D 82            [24] 6741 	mov	dpl,r5
      00254F 8C 83            [24] 6742 	mov	dph,r4
      002551 8B F0            [24] 6743 	mov	b,r3
      002553 12r00r00         [24] 6744 	lcall	__gptrget
      002556 FF               [12] 6745 	mov	r7,a
      002557 70 03            [24] 6746 	jnz	01384$
      002559 02r2ArBC         [24] 6747 	ljmp	00249$
      00255C                       6748 01384$:
      00255C 7E 00            [12] 6749 	mov	r6,#0x00
      00255E 8F 82            [24] 6750 	mov	dpl,r7
      002560 8E 83            [24] 6751 	mov	dph,r6
      002562 12r00r00         [24] 6752 	lcall	_putchar
      002565 0D               [12] 6753 	inc	r5
                                   6754 ;	calc.c:305: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      002566 BD 00 E4         [24] 6755 	cjne	r5,#0x00,00480$
      002569 0C               [12] 6756 	inc	r4
      00256A 80 E1            [24] 6757 	sjmp	00480$
      00256C                       6758 00228$:
                                   6759 ;	calc.c:306: else if (!stack_pop(ctx->ps, &d1)) {
      00256C E5*00            [12] 6760 	mov	a,_bp
      00256E 24 19            [12] 6761 	add	a,#0x19
      002570 FC               [12] 6762 	mov	r4,a
      002571 7B 00            [12] 6763 	mov	r3,#0x00
      002573 7A 40            [12] 6764 	mov	r2,#0x40
      002575 E5*00            [12] 6765 	mov	a,_bp
      002577 24 0B            [12] 6766 	add	a,#0x0b
      002579 F8               [12] 6767 	mov	r0,a
      00257A 86 82            [24] 6768 	mov	dpl,@r0
      00257C 08               [12] 6769 	inc	r0
      00257D 86 83            [24] 6770 	mov	dph,@r0
      00257F 08               [12] 6771 	inc	r0
      002580 86 F0            [24] 6772 	mov	b,@r0
      002582 12r00r00         [24] 6773 	lcall	__gptrget
      002585 FD               [12] 6774 	mov	r5,a
      002586 A3               [24] 6775 	inc	dptr
      002587 12r00r00         [24] 6776 	lcall	__gptrget
      00258A FE               [12] 6777 	mov	r6,a
      00258B A3               [24] 6778 	inc	dptr
      00258C 12r00r00         [24] 6779 	lcall	__gptrget
      00258F FF               [12] 6780 	mov	r7,a
      002590 C0 04            [24] 6781 	push	ar4
      002592 C0 03            [24] 6782 	push	ar3
      002594 C0 02            [24] 6783 	push	ar2
      002596 8D 82            [24] 6784 	mov	dpl,r5
      002598 8E 83            [24] 6785 	mov	dph,r6
      00259A 8F F0            [24] 6786 	mov	b,r7
      00259C 12r00r00         [24] 6787 	lcall	_stack_pop
      00259F AE 82            [24] 6788 	mov	r6,dpl
      0025A1 AF 83            [24] 6789 	mov	r7,dph
      0025A3 15 81            [12] 6790 	dec	sp
      0025A5 15 81            [12] 6791 	dec	sp
      0025A7 15 81            [12] 6792 	dec	sp
      0025A9 EE               [12] 6793 	mov	a,r6
      0025AA 4F               [12] 6794 	orl	a,r7
      0025AB 70 63            [24] 6795 	jnz	00225$
                                   6796 ;	calc.c:307: (void)stack_push(ctx->ps, d0);
      0025AD E5*00            [12] 6797 	mov	a,_bp
      0025AF 24 0B            [12] 6798 	add	a,#0x0b
      0025B1 F8               [12] 6799 	mov	r0,a
      0025B2 86 82            [24] 6800 	mov	dpl,@r0
      0025B4 08               [12] 6801 	inc	r0
      0025B5 86 83            [24] 6802 	mov	dph,@r0
      0025B7 08               [12] 6803 	inc	r0
      0025B8 86 F0            [24] 6804 	mov	b,@r0
      0025BA 12r00r00         [24] 6805 	lcall	__gptrget
      0025BD FD               [12] 6806 	mov	r5,a
      0025BE A3               [24] 6807 	inc	dptr
      0025BF 12r00r00         [24] 6808 	lcall	__gptrget
      0025C2 FE               [12] 6809 	mov	r6,a
      0025C3 A3               [24] 6810 	inc	dptr
      0025C4 12r00r00         [24] 6811 	lcall	__gptrget
      0025C7 FF               [12] 6812 	mov	r7,a
      0025C8 E5*00            [12] 6813 	mov	a,_bp
      0025CA 24 15            [12] 6814 	add	a,#0x15
      0025CC F8               [12] 6815 	mov	r0,a
      0025CD E6               [12] 6816 	mov	a,@r0
      0025CE C0 E0            [24] 6817 	push	acc
      0025D0 08               [12] 6818 	inc	r0
      0025D1 E6               [12] 6819 	mov	a,@r0
      0025D2 C0 E0            [24] 6820 	push	acc
      0025D4 08               [12] 6821 	inc	r0
      0025D5 E6               [12] 6822 	mov	a,@r0
      0025D6 C0 E0            [24] 6823 	push	acc
      0025D8 08               [12] 6824 	inc	r0
      0025D9 E6               [12] 6825 	mov	a,@r0
      0025DA C0 E0            [24] 6826 	push	acc
      0025DC 8D 82            [24] 6827 	mov	dpl,r5
      0025DE 8E 83            [24] 6828 	mov	dph,r6
      0025E0 8F F0            [24] 6829 	mov	b,r7
      0025E2 12r00r00         [24] 6830 	lcall	_stack_push
      0025E5 E5 81            [12] 6831 	mov	a,sp
      0025E7 24 FC            [12] 6832 	add	a,#0xfc
      0025E9 F5 81            [12] 6833 	mov	sp,a
                                   6834 ;	calc.c:308: printstr("\r\nstack underflow\r\n");
      0025EB 7Dr46            [12] 6835 	mov	r5,#___str_9
      0025ED 7Cs00            [12] 6836 	mov	r4,#(___str_9 >> 8)
      0025EF 7B 80            [12] 6837 	mov	r3,#0x80
                                   6838 ;	calc.c:51: return;
      0025F1                       6839 00483$:
                                   6840 ;	calc.c:49: for (; *s; s++) putchar(*s);
      0025F1 8D 82            [24] 6841 	mov	dpl,r5
      0025F3 8C 83            [24] 6842 	mov	dph,r4
      0025F5 8B F0            [24] 6843 	mov	b,r3
      0025F7 12r00r00         [24] 6844 	lcall	__gptrget
      0025FA FF               [12] 6845 	mov	r7,a
      0025FB 70 03            [24] 6846 	jnz	01387$
      0025FD 02r2ArBC         [24] 6847 	ljmp	00249$
      002600                       6848 01387$:
      002600 7E 00            [12] 6849 	mov	r6,#0x00
      002602 8F 82            [24] 6850 	mov	dpl,r7
      002604 8E 83            [24] 6851 	mov	dph,r6
      002606 12r00r00         [24] 6852 	lcall	_putchar
      002609 0D               [12] 6853 	inc	r5
                                   6854 ;	calc.c:308: printstr("\r\nstack underflow\r\n");
      00260A BD 00 E4         [24] 6855 	cjne	r5,#0x00,00483$
      00260D 0C               [12] 6856 	inc	r4
      00260E 80 E1            [24] 6857 	sjmp	00483$
      002610                       6858 00225$:
                                   6859 ;	calc.c:310: d1 = (unsigned long)d1 >> d0;
      002610 E5*00            [12] 6860 	mov	a,_bp
      002612 24 19            [12] 6861 	add	a,#0x19
      002614 F8               [12] 6862 	mov	r0,a
      002615 86 04            [24] 6863 	mov	ar4,@r0
      002617 08               [12] 6864 	inc	r0
      002618 86 05            [24] 6865 	mov	ar5,@r0
      00261A 08               [12] 6866 	inc	r0
      00261B 86 06            [24] 6867 	mov	ar6,@r0
      00261D 08               [12] 6868 	inc	r0
      00261E 86 07            [24] 6869 	mov	ar7,@r0
      002620 E5*00            [12] 6870 	mov	a,_bp
      002622 24 15            [12] 6871 	add	a,#0x15
      002624 F8               [12] 6872 	mov	r0,a
      002625 86 F0            [24] 6873 	mov	b,@r0
      002627 05 F0            [12] 6874 	inc	b
      002629 80 0D            [24] 6875 	sjmp	01390$
      00262B                       6876 01389$:
      00262B C3               [12] 6877 	clr	c
      00262C EF               [12] 6878 	mov	a,r7
      00262D 13               [12] 6879 	rrc	a
      00262E FF               [12] 6880 	mov	r7,a
      00262F EE               [12] 6881 	mov	a,r6
      002630 13               [12] 6882 	rrc	a
      002631 FE               [12] 6883 	mov	r6,a
      002632 ED               [12] 6884 	mov	a,r5
      002633 13               [12] 6885 	rrc	a
      002634 FD               [12] 6886 	mov	r5,a
      002635 EC               [12] 6887 	mov	a,r4
      002636 13               [12] 6888 	rrc	a
      002637 FC               [12] 6889 	mov	r4,a
      002638                       6890 01390$:
      002638 D5 F0 F0         [24] 6891 	djnz	b,01389$
      00263B E5*00            [12] 6892 	mov	a,_bp
      00263D 24 19            [12] 6893 	add	a,#0x19
      00263F F8               [12] 6894 	mov	r0,a
      002640 A6 04            [24] 6895 	mov	@r0,ar4
      002642 08               [12] 6896 	inc	r0
      002643 A6 05            [24] 6897 	mov	@r0,ar5
      002645 08               [12] 6898 	inc	r0
      002646 A6 06            [24] 6899 	mov	@r0,ar6
      002648 08               [12] 6900 	inc	r0
      002649 A6 07            [24] 6901 	mov	@r0,ar7
                                   6902 ;	calc.c:311: (void)stack_push(ctx->ps, d1);
      00264B E5*00            [12] 6903 	mov	a,_bp
      00264D 24 0B            [12] 6904 	add	a,#0x0b
      00264F F8               [12] 6905 	mov	r0,a
      002650 86 82            [24] 6906 	mov	dpl,@r0
      002652 08               [12] 6907 	inc	r0
      002653 86 83            [24] 6908 	mov	dph,@r0
      002655 08               [12] 6909 	inc	r0
      002656 86 F0            [24] 6910 	mov	b,@r0
      002658 12r00r00         [24] 6911 	lcall	__gptrget
      00265B FD               [12] 6912 	mov	r5,a
      00265C A3               [24] 6913 	inc	dptr
      00265D 12r00r00         [24] 6914 	lcall	__gptrget
      002660 FE               [12] 6915 	mov	r6,a
      002661 A3               [24] 6916 	inc	dptr
      002662 12r00r00         [24] 6917 	lcall	__gptrget
      002665 FF               [12] 6918 	mov	r7,a
      002666 E5*00            [12] 6919 	mov	a,_bp
      002668 24 19            [12] 6920 	add	a,#0x19
      00266A F8               [12] 6921 	mov	r0,a
      00266B E6               [12] 6922 	mov	a,@r0
      00266C C0 E0            [24] 6923 	push	acc
      00266E 08               [12] 6924 	inc	r0
      00266F E6               [12] 6925 	mov	a,@r0
      002670 C0 E0            [24] 6926 	push	acc
      002672 08               [12] 6927 	inc	r0
      002673 E6               [12] 6928 	mov	a,@r0
      002674 C0 E0            [24] 6929 	push	acc
      002676 08               [12] 6930 	inc	r0
      002677 E6               [12] 6931 	mov	a,@r0
      002678 C0 E0            [24] 6932 	push	acc
      00267A 8D 82            [24] 6933 	mov	dpl,r5
      00267C 8E 83            [24] 6934 	mov	dph,r6
      00267E 8F F0            [24] 6935 	mov	b,r7
      002680 12r00r00         [24] 6936 	lcall	_stack_push
      002683 E5 81            [12] 6937 	mov	a,sp
      002685 24 FC            [12] 6938 	add	a,#0xfc
      002687 F5 81            [12] 6939 	mov	sp,a
                                   6940 ;	calc.c:313: break;
      002689 02r2ArBC         [24] 6941 	ljmp	00249$
                                   6942 ;	calc.c:314: case ']':
      00268C                       6943 00230$:
                                   6944 ;	calc.c:315: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      00268C E5*00            [12] 6945 	mov	a,_bp
      00268E 24 15            [12] 6946 	add	a,#0x15
      002690 FF               [12] 6947 	mov	r7,a
      002691 E5*00            [12] 6948 	mov	a,_bp
      002693 24 0E            [12] 6949 	add	a,#0x0e
      002695 F8               [12] 6950 	mov	r0,a
      002696 A6 07            [24] 6951 	mov	@r0,ar7
      002698 08               [12] 6952 	inc	r0
      002699 76 00            [12] 6953 	mov	@r0,#0x00
      00269B 08               [12] 6954 	inc	r0
      00269C 76 40            [12] 6955 	mov	@r0,#0x40
      00269E E5*00            [12] 6956 	mov	a,_bp
      0026A0 24 12            [12] 6957 	add	a,#0x12
      0026A2 F8               [12] 6958 	mov	r0,a
      0026A3 74 13            [12] 6959 	mov	a,#0x13
      0026A5 26               [12] 6960 	add	a,@r0
      0026A6 FA               [12] 6961 	mov	r2,a
      0026A7 74 40            [12] 6962 	mov	a,#0x40
      0026A9 08               [12] 6963 	inc	r0
      0026AA 36               [12] 6964 	addc	a,@r0
      0026AB FB               [12] 6965 	mov	r3,a
      0026AC 08               [12] 6966 	inc	r0
      0026AD 86 04            [24] 6967 	mov	ar4,@r0
      0026AF 8A 82            [24] 6968 	mov	dpl,r2
      0026B1 8B 83            [24] 6969 	mov	dph,r3
      0026B3 8C F0            [24] 6970 	mov	b,r4
      0026B5 12r00r00         [24] 6971 	lcall	__gptrget
      0026B8 FD               [12] 6972 	mov	r5,a
      0026B9 A3               [24] 6973 	inc	dptr
      0026BA 12r00r00         [24] 6974 	lcall	__gptrget
      0026BD FE               [12] 6975 	mov	r6,a
      0026BE A3               [24] 6976 	inc	dptr
      0026BF 12r00r00         [24] 6977 	lcall	__gptrget
      0026C2 FF               [12] 6978 	mov	r7,a
      0026C3 C0 04            [24] 6979 	push	ar4
      0026C5 C0 03            [24] 6980 	push	ar3
      0026C7 C0 02            [24] 6981 	push	ar2
      0026C9 E5*00            [12] 6982 	mov	a,_bp
      0026CB 24 0E            [12] 6983 	add	a,#0x0e
      0026CD F8               [12] 6984 	mov	r0,a
      0026CE E6               [12] 6985 	mov	a,@r0
      0026CF C0 E0            [24] 6986 	push	acc
      0026D1 08               [12] 6987 	inc	r0
      0026D2 E6               [12] 6988 	mov	a,@r0
      0026D3 C0 E0            [24] 6989 	push	acc
      0026D5 08               [12] 6990 	inc	r0
      0026D6 E6               [12] 6991 	mov	a,@r0
      0026D7 C0 E0            [24] 6992 	push	acc
      0026D9 8D 82            [24] 6993 	mov	dpl,r5
      0026DB 8E 83            [24] 6994 	mov	dph,r6
      0026DD 8F F0            [24] 6995 	mov	b,r7
      0026DF 12r00r00         [24] 6996 	lcall	_stack_pop
      0026E2 AE 82            [24] 6997 	mov	r6,dpl
      0026E4 AF 83            [24] 6998 	mov	r7,dph
      0026E6 15 81            [12] 6999 	dec	sp
      0026E8 15 81            [12] 7000 	dec	sp
      0026EA 15 81            [12] 7001 	dec	sp
      0026EC D0 02            [24] 7002 	pop	ar2
      0026EE D0 03            [24] 7003 	pop	ar3
      0026F0 D0 04            [24] 7004 	pop	ar4
      0026F2 EE               [12] 7005 	mov	a,r6
      0026F3 4F               [12] 7006 	orl	a,r7
      0026F4 70 25            [24] 7007 	jnz	00235$
      0026F6 7Dr46            [12] 7008 	mov	r5,#___str_9
      0026F8 7Cs00            [12] 7009 	mov	r4,#(___str_9 >> 8)
      0026FA 7B 80            [12] 7010 	mov	r3,#0x80
                                   7011 ;	calc.c:51: return;
      0026FC                       7012 00486$:
                                   7013 ;	calc.c:49: for (; *s; s++) putchar(*s);
      0026FC 8D 82            [24] 7014 	mov	dpl,r5
      0026FE 8C 83            [24] 7015 	mov	dph,r4
      002700 8B F0            [24] 7016 	mov	b,r3
      002702 12r00r00         [24] 7017 	lcall	__gptrget
      002705 FF               [12] 7018 	mov	r7,a
      002706 70 03            [24] 7019 	jnz	01392$
      002708 02r2ArBC         [24] 7020 	ljmp	00249$
      00270B                       7021 01392$:
      00270B 7E 00            [12] 7022 	mov	r6,#0x00
      00270D 8F 82            [24] 7023 	mov	dpl,r7
      00270F 8E 83            [24] 7024 	mov	dph,r6
      002711 12r00r00         [24] 7025 	lcall	_putchar
      002714 0D               [12] 7026 	inc	r5
                                   7027 ;	calc.c:315: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      002715 BD 00 E4         [24] 7028 	cjne	r5,#0x00,00486$
      002718 0C               [12] 7029 	inc	r4
      002719 80 E1            [24] 7030 	sjmp	00486$
      00271B                       7031 00235$:
                                   7032 ;	calc.c:316: else if (!stack_pop(ctx->ps, &d1)) {
      00271B E5*00            [12] 7033 	mov	a,_bp
      00271D 24 19            [12] 7034 	add	a,#0x19
      00271F FF               [12] 7035 	mov	r7,a
      002720 E5*00            [12] 7036 	mov	a,_bp
      002722 24 0E            [12] 7037 	add	a,#0x0e
      002724 F8               [12] 7038 	mov	r0,a
      002725 A6 07            [24] 7039 	mov	@r0,ar7
      002727 08               [12] 7040 	inc	r0
      002728 76 00            [12] 7041 	mov	@r0,#0x00
      00272A 08               [12] 7042 	inc	r0
      00272B 76 40            [12] 7043 	mov	@r0,#0x40
      00272D 8A 82            [24] 7044 	mov	dpl,r2
      00272F 8B 83            [24] 7045 	mov	dph,r3
      002731 8C F0            [24] 7046 	mov	b,r4
      002733 12r00r00         [24] 7047 	lcall	__gptrget
      002736 FD               [12] 7048 	mov	r5,a
      002737 A3               [24] 7049 	inc	dptr
      002738 12r00r00         [24] 7050 	lcall	__gptrget
      00273B FE               [12] 7051 	mov	r6,a
      00273C A3               [24] 7052 	inc	dptr
      00273D 12r00r00         [24] 7053 	lcall	__gptrget
      002740 FF               [12] 7054 	mov	r7,a
      002741 C0 04            [24] 7055 	push	ar4
      002743 C0 03            [24] 7056 	push	ar3
      002745 C0 02            [24] 7057 	push	ar2
      002747 E5*00            [12] 7058 	mov	a,_bp
      002749 24 0E            [12] 7059 	add	a,#0x0e
      00274B F8               [12] 7060 	mov	r0,a
      00274C E6               [12] 7061 	mov	a,@r0
      00274D C0 E0            [24] 7062 	push	acc
      00274F 08               [12] 7063 	inc	r0
      002750 E6               [12] 7064 	mov	a,@r0
      002751 C0 E0            [24] 7065 	push	acc
      002753 08               [12] 7066 	inc	r0
      002754 E6               [12] 7067 	mov	a,@r0
      002755 C0 E0            [24] 7068 	push	acc
      002757 8D 82            [24] 7069 	mov	dpl,r5
      002759 8E 83            [24] 7070 	mov	dph,r6
      00275B 8F F0            [24] 7071 	mov	b,r7
      00275D 12r00r00         [24] 7072 	lcall	_stack_pop
      002760 AE 82            [24] 7073 	mov	r6,dpl
      002762 AF 83            [24] 7074 	mov	r7,dph
      002764 15 81            [12] 7075 	dec	sp
      002766 15 81            [12] 7076 	dec	sp
      002768 15 81            [12] 7077 	dec	sp
      00276A D0 02            [24] 7078 	pop	ar2
      00276C D0 03            [24] 7079 	pop	ar3
      00276E D0 04            [24] 7080 	pop	ar4
      002770 EE               [12] 7081 	mov	a,r6
      002771 4F               [12] 7082 	orl	a,r7
      002772 70 5C            [24] 7083 	jnz	00232$
                                   7084 ;	calc.c:317: (void)stack_push(ctx->ps, d0);
      002774 8A 82            [24] 7085 	mov	dpl,r2
      002776 8B 83            [24] 7086 	mov	dph,r3
      002778 8C F0            [24] 7087 	mov	b,r4
      00277A 12r00r00         [24] 7088 	lcall	__gptrget
      00277D FD               [12] 7089 	mov	r5,a
      00277E A3               [24] 7090 	inc	dptr
      00277F 12r00r00         [24] 7091 	lcall	__gptrget
      002782 FE               [12] 7092 	mov	r6,a
      002783 A3               [24] 7093 	inc	dptr
      002784 12r00r00         [24] 7094 	lcall	__gptrget
      002787 FF               [12] 7095 	mov	r7,a
      002788 E5*00            [12] 7096 	mov	a,_bp
      00278A 24 15            [12] 7097 	add	a,#0x15
      00278C F8               [12] 7098 	mov	r0,a
      00278D E6               [12] 7099 	mov	a,@r0
      00278E C0 E0            [24] 7100 	push	acc
      002790 08               [12] 7101 	inc	r0
      002791 E6               [12] 7102 	mov	a,@r0
      002792 C0 E0            [24] 7103 	push	acc
      002794 08               [12] 7104 	inc	r0
      002795 E6               [12] 7105 	mov	a,@r0
      002796 C0 E0            [24] 7106 	push	acc
      002798 08               [12] 7107 	inc	r0
      002799 E6               [12] 7108 	mov	a,@r0
      00279A C0 E0            [24] 7109 	push	acc
      00279C 8D 82            [24] 7110 	mov	dpl,r5
      00279E 8E 83            [24] 7111 	mov	dph,r6
      0027A0 8F F0            [24] 7112 	mov	b,r7
      0027A2 12r00r00         [24] 7113 	lcall	_stack_push
      0027A5 E5 81            [12] 7114 	mov	a,sp
      0027A7 24 FC            [12] 7115 	add	a,#0xfc
      0027A9 F5 81            [12] 7116 	mov	sp,a
                                   7117 ;	calc.c:318: printstr("\r\nstack underflow\r\n");
      0027AB 7Dr46            [12] 7118 	mov	r5,#___str_9
      0027AD 7Cs00            [12] 7119 	mov	r4,#(___str_9 >> 8)
      0027AF 7B 80            [12] 7120 	mov	r3,#0x80
                                   7121 ;	calc.c:51: return;
      0027B1                       7122 00489$:
                                   7123 ;	calc.c:49: for (; *s; s++) putchar(*s);
      0027B1 8D 82            [24] 7124 	mov	dpl,r5
      0027B3 8C 83            [24] 7125 	mov	dph,r4
      0027B5 8B F0            [24] 7126 	mov	b,r3
      0027B7 12r00r00         [24] 7127 	lcall	__gptrget
      0027BA FF               [12] 7128 	mov	r7,a
      0027BB 70 03            [24] 7129 	jnz	01395$
      0027BD 02r2ArBC         [24] 7130 	ljmp	00249$
      0027C0                       7131 01395$:
      0027C0 7E 00            [12] 7132 	mov	r6,#0x00
      0027C2 8F 82            [24] 7133 	mov	dpl,r7
      0027C4 8E 83            [24] 7134 	mov	dph,r6
      0027C6 12r00r00         [24] 7135 	lcall	_putchar
      0027C9 0D               [12] 7136 	inc	r5
                                   7137 ;	calc.c:318: printstr("\r\nstack underflow\r\n");
      0027CA BD 00 E4         [24] 7138 	cjne	r5,#0x00,00489$
      0027CD 0C               [12] 7139 	inc	r4
      0027CE 80 E1            [24] 7140 	sjmp	00489$
      0027D0                       7141 00232$:
                                   7142 ;	calc.c:320: d1 >>= d0;
      0027D0 E5*00            [12] 7143 	mov	a,_bp
      0027D2 24 15            [12] 7144 	add	a,#0x15
      0027D4 F8               [12] 7145 	mov	r0,a
      0027D5 86 F0            [24] 7146 	mov	b,@r0
      0027D7 05 F0            [12] 7147 	inc	b
      0027D9 E5*00            [12] 7148 	mov	a,_bp
      0027DB 24 19            [12] 7149 	add	a,#0x19
      0027DD F8               [12] 7150 	mov	r0,a
      0027DE 08               [12] 7151 	inc	r0
      0027DF 08               [12] 7152 	inc	r0
      0027E0 08               [12] 7153 	inc	r0
      0027E1 E6               [12] 7154 	mov	a,@r0
      0027E2 33               [12] 7155 	rlc	a
      0027E3 92 D2            [24] 7156 	mov	ov,c
      0027E5 18               [12] 7157 	dec	r0
      0027E6 18               [12] 7158 	dec	r0
      0027E7 18               [12] 7159 	dec	r0
      0027E8 80 14            [24] 7160 	sjmp	01398$
      0027EA                       7161 01397$:
      0027EA A2 D2            [12] 7162 	mov	c,ov
      0027EC 08               [12] 7163 	inc	r0
      0027ED 08               [12] 7164 	inc	r0
      0027EE 08               [12] 7165 	inc	r0
      0027EF E6               [12] 7166 	mov	a,@r0
      0027F0 13               [12] 7167 	rrc	a
      0027F1 F6               [12] 7168 	mov	@r0,a
      0027F2 18               [12] 7169 	dec	r0
      0027F3 E6               [12] 7170 	mov	a,@r0
      0027F4 13               [12] 7171 	rrc	a
      0027F5 F6               [12] 7172 	mov	@r0,a
      0027F6 18               [12] 7173 	dec	r0
      0027F7 E6               [12] 7174 	mov	a,@r0
      0027F8 13               [12] 7175 	rrc	a
      0027F9 F6               [12] 7176 	mov	@r0,a
      0027FA 18               [12] 7177 	dec	r0
      0027FB E6               [12] 7178 	mov	a,@r0
      0027FC 13               [12] 7179 	rrc	a
      0027FD F6               [12] 7180 	mov	@r0,a
      0027FE                       7181 01398$:
      0027FE D5 F0 E9         [24] 7182 	djnz	b,01397$
                                   7183 ;	calc.c:321: (void)stack_push(ctx->ps, d1);
      002801 8A 82            [24] 7184 	mov	dpl,r2
      002803 8B 83            [24] 7185 	mov	dph,r3
      002805 8C F0            [24] 7186 	mov	b,r4
      002807 12r00r00         [24] 7187 	lcall	__gptrget
      00280A FA               [12] 7188 	mov	r2,a
      00280B A3               [24] 7189 	inc	dptr
      00280C 12r00r00         [24] 7190 	lcall	__gptrget
      00280F FB               [12] 7191 	mov	r3,a
      002810 A3               [24] 7192 	inc	dptr
      002811 12r00r00         [24] 7193 	lcall	__gptrget
      002814 FC               [12] 7194 	mov	r4,a
      002815 E5*00            [12] 7195 	mov	a,_bp
      002817 24 19            [12] 7196 	add	a,#0x19
      002819 F8               [12] 7197 	mov	r0,a
      00281A E6               [12] 7198 	mov	a,@r0
      00281B C0 E0            [24] 7199 	push	acc
      00281D 08               [12] 7200 	inc	r0
      00281E E6               [12] 7201 	mov	a,@r0
      00281F C0 E0            [24] 7202 	push	acc
      002821 08               [12] 7203 	inc	r0
      002822 E6               [12] 7204 	mov	a,@r0
      002823 C0 E0            [24] 7205 	push	acc
      002825 08               [12] 7206 	inc	r0
      002826 E6               [12] 7207 	mov	a,@r0
      002827 C0 E0            [24] 7208 	push	acc
      002829 8A 82            [24] 7209 	mov	dpl,r2
      00282B 8B 83            [24] 7210 	mov	dph,r3
      00282D 8C F0            [24] 7211 	mov	b,r4
      00282F 12r00r00         [24] 7212 	lcall	_stack_push
      002832 E5 81            [12] 7213 	mov	a,sp
      002834 24 FC            [12] 7214 	add	a,#0xfc
      002836 F5 81            [12] 7215 	mov	sp,a
                                   7216 ;	calc.c:323: break;
      002838 02r2ArBC         [24] 7217 	ljmp	00249$
                                   7218 ;	calc.c:324: case '<':
      00283B                       7219 00237$:
                                   7220 ;	calc.c:325: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      00283B E5*00            [12] 7221 	mov	a,_bp
      00283D 24 15            [12] 7222 	add	a,#0x15
      00283F FF               [12] 7223 	mov	r7,a
      002840 E5*00            [12] 7224 	mov	a,_bp
      002842 24 0E            [12] 7225 	add	a,#0x0e
      002844 F8               [12] 7226 	mov	r0,a
      002845 A6 07            [24] 7227 	mov	@r0,ar7
      002847 08               [12] 7228 	inc	r0
      002848 76 00            [12] 7229 	mov	@r0,#0x00
      00284A 08               [12] 7230 	inc	r0
      00284B 76 40            [12] 7231 	mov	@r0,#0x40
      00284D E5*00            [12] 7232 	mov	a,_bp
      00284F 24 12            [12] 7233 	add	a,#0x12
      002851 F8               [12] 7234 	mov	r0,a
      002852 74 13            [12] 7235 	mov	a,#0x13
      002854 26               [12] 7236 	add	a,@r0
      002855 FA               [12] 7237 	mov	r2,a
      002856 74 40            [12] 7238 	mov	a,#0x40
      002858 08               [12] 7239 	inc	r0
      002859 36               [12] 7240 	addc	a,@r0
      00285A FB               [12] 7241 	mov	r3,a
      00285B 08               [12] 7242 	inc	r0
      00285C 86 04            [24] 7243 	mov	ar4,@r0
      00285E 8A 82            [24] 7244 	mov	dpl,r2
      002860 8B 83            [24] 7245 	mov	dph,r3
      002862 8C F0            [24] 7246 	mov	b,r4
      002864 12r00r00         [24] 7247 	lcall	__gptrget
      002867 FD               [12] 7248 	mov	r5,a
      002868 A3               [24] 7249 	inc	dptr
      002869 12r00r00         [24] 7250 	lcall	__gptrget
      00286C FE               [12] 7251 	mov	r6,a
      00286D A3               [24] 7252 	inc	dptr
      00286E 12r00r00         [24] 7253 	lcall	__gptrget
      002871 FF               [12] 7254 	mov	r7,a
      002872 C0 04            [24] 7255 	push	ar4
      002874 C0 03            [24] 7256 	push	ar3
      002876 C0 02            [24] 7257 	push	ar2
      002878 E5*00            [12] 7258 	mov	a,_bp
      00287A 24 0E            [12] 7259 	add	a,#0x0e
      00287C F8               [12] 7260 	mov	r0,a
      00287D E6               [12] 7261 	mov	a,@r0
      00287E C0 E0            [24] 7262 	push	acc
      002880 08               [12] 7263 	inc	r0
      002881 E6               [12] 7264 	mov	a,@r0
      002882 C0 E0            [24] 7265 	push	acc
      002884 08               [12] 7266 	inc	r0
      002885 E6               [12] 7267 	mov	a,@r0
      002886 C0 E0            [24] 7268 	push	acc
      002888 8D 82            [24] 7269 	mov	dpl,r5
      00288A 8E 83            [24] 7270 	mov	dph,r6
      00288C 8F F0            [24] 7271 	mov	b,r7
      00288E 12r00r00         [24] 7272 	lcall	_stack_pop
      002891 AE 82            [24] 7273 	mov	r6,dpl
      002893 AF 83            [24] 7274 	mov	r7,dph
      002895 15 81            [12] 7275 	dec	sp
      002897 15 81            [12] 7276 	dec	sp
      002899 15 81            [12] 7277 	dec	sp
      00289B D0 02            [24] 7278 	pop	ar2
      00289D D0 03            [24] 7279 	pop	ar3
      00289F D0 04            [24] 7280 	pop	ar4
      0028A1 EE               [12] 7281 	mov	a,r6
      0028A2 4F               [12] 7282 	orl	a,r7
      0028A3 70 25            [24] 7283 	jnz	00242$
      0028A5 7Dr46            [12] 7284 	mov	r5,#___str_9
      0028A7 7Cs00            [12] 7285 	mov	r4,#(___str_9 >> 8)
      0028A9 7B 80            [12] 7286 	mov	r3,#0x80
                                   7287 ;	calc.c:51: return;
      0028AB                       7288 00492$:
                                   7289 ;	calc.c:49: for (; *s; s++) putchar(*s);
      0028AB 8D 82            [24] 7290 	mov	dpl,r5
      0028AD 8C 83            [24] 7291 	mov	dph,r4
      0028AF 8B F0            [24] 7292 	mov	b,r3
      0028B1 12r00r00         [24] 7293 	lcall	__gptrget
      0028B4 FF               [12] 7294 	mov	r7,a
      0028B5 70 03            [24] 7295 	jnz	01400$
      0028B7 02r2ArBC         [24] 7296 	ljmp	00249$
      0028BA                       7297 01400$:
      0028BA 7E 00            [12] 7298 	mov	r6,#0x00
      0028BC 8F 82            [24] 7299 	mov	dpl,r7
      0028BE 8E 83            [24] 7300 	mov	dph,r6
      0028C0 12r00r00         [24] 7301 	lcall	_putchar
      0028C3 0D               [12] 7302 	inc	r5
                                   7303 ;	calc.c:325: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      0028C4 BD 00 E4         [24] 7304 	cjne	r5,#0x00,00492$
      0028C7 0C               [12] 7305 	inc	r4
      0028C8 80 E1            [24] 7306 	sjmp	00492$
      0028CA                       7307 00242$:
                                   7308 ;	calc.c:326: else if (!stack_pop(ctx->ps, &d1)) {
      0028CA E5*00            [12] 7309 	mov	a,_bp
      0028CC 24 19            [12] 7310 	add	a,#0x19
      0028CE FF               [12] 7311 	mov	r7,a
      0028CF E5*00            [12] 7312 	mov	a,_bp
      0028D1 24 0E            [12] 7313 	add	a,#0x0e
      0028D3 F8               [12] 7314 	mov	r0,a
      0028D4 A6 07            [24] 7315 	mov	@r0,ar7
      0028D6 08               [12] 7316 	inc	r0
      0028D7 76 00            [12] 7317 	mov	@r0,#0x00
      0028D9 08               [12] 7318 	inc	r0
      0028DA 76 40            [12] 7319 	mov	@r0,#0x40
      0028DC 8A 82            [24] 7320 	mov	dpl,r2
      0028DE 8B 83            [24] 7321 	mov	dph,r3
      0028E0 8C F0            [24] 7322 	mov	b,r4
      0028E2 12r00r00         [24] 7323 	lcall	__gptrget
      0028E5 FD               [12] 7324 	mov	r5,a
      0028E6 A3               [24] 7325 	inc	dptr
      0028E7 12r00r00         [24] 7326 	lcall	__gptrget
      0028EA FE               [12] 7327 	mov	r6,a
      0028EB A3               [24] 7328 	inc	dptr
      0028EC 12r00r00         [24] 7329 	lcall	__gptrget
      0028EF FF               [12] 7330 	mov	r7,a
      0028F0 C0 04            [24] 7331 	push	ar4
      0028F2 C0 03            [24] 7332 	push	ar3
      0028F4 C0 02            [24] 7333 	push	ar2
      0028F6 E5*00            [12] 7334 	mov	a,_bp
      0028F8 24 0E            [12] 7335 	add	a,#0x0e
      0028FA F8               [12] 7336 	mov	r0,a
      0028FB E6               [12] 7337 	mov	a,@r0
      0028FC C0 E0            [24] 7338 	push	acc
      0028FE 08               [12] 7339 	inc	r0
      0028FF E6               [12] 7340 	mov	a,@r0
      002900 C0 E0            [24] 7341 	push	acc
      002902 08               [12] 7342 	inc	r0
      002903 E6               [12] 7343 	mov	a,@r0
      002904 C0 E0            [24] 7344 	push	acc
      002906 8D 82            [24] 7345 	mov	dpl,r5
      002908 8E 83            [24] 7346 	mov	dph,r6
      00290A 8F F0            [24] 7347 	mov	b,r7
      00290C 12r00r00         [24] 7348 	lcall	_stack_pop
      00290F AE 82            [24] 7349 	mov	r6,dpl
      002911 AF 83            [24] 7350 	mov	r7,dph
      002913 15 81            [12] 7351 	dec	sp
      002915 15 81            [12] 7352 	dec	sp
      002917 15 81            [12] 7353 	dec	sp
      002919 D0 02            [24] 7354 	pop	ar2
      00291B D0 03            [24] 7355 	pop	ar3
      00291D D0 04            [24] 7356 	pop	ar4
      00291F EE               [12] 7357 	mov	a,r6
      002920 4F               [12] 7358 	orl	a,r7
      002921 70 5C            [24] 7359 	jnz	00239$
                                   7360 ;	calc.c:327: (void)stack_push(ctx->ps, d0);
      002923 8A 82            [24] 7361 	mov	dpl,r2
      002925 8B 83            [24] 7362 	mov	dph,r3
      002927 8C F0            [24] 7363 	mov	b,r4
      002929 12r00r00         [24] 7364 	lcall	__gptrget
      00292C FD               [12] 7365 	mov	r5,a
      00292D A3               [24] 7366 	inc	dptr
      00292E 12r00r00         [24] 7367 	lcall	__gptrget
      002931 FE               [12] 7368 	mov	r6,a
      002932 A3               [24] 7369 	inc	dptr
      002933 12r00r00         [24] 7370 	lcall	__gptrget
      002936 FF               [12] 7371 	mov	r7,a
      002937 E5*00            [12] 7372 	mov	a,_bp
      002939 24 15            [12] 7373 	add	a,#0x15
      00293B F8               [12] 7374 	mov	r0,a
      00293C E6               [12] 7375 	mov	a,@r0
      00293D C0 E0            [24] 7376 	push	acc
      00293F 08               [12] 7377 	inc	r0
      002940 E6               [12] 7378 	mov	a,@r0
      002941 C0 E0            [24] 7379 	push	acc
      002943 08               [12] 7380 	inc	r0
      002944 E6               [12] 7381 	mov	a,@r0
      002945 C0 E0            [24] 7382 	push	acc
      002947 08               [12] 7383 	inc	r0
      002948 E6               [12] 7384 	mov	a,@r0
      002949 C0 E0            [24] 7385 	push	acc
      00294B 8D 82            [24] 7386 	mov	dpl,r5
      00294D 8E 83            [24] 7387 	mov	dph,r6
      00294F 8F F0            [24] 7388 	mov	b,r7
      002951 12r00r00         [24] 7389 	lcall	_stack_push
      002954 E5 81            [12] 7390 	mov	a,sp
      002956 24 FC            [12] 7391 	add	a,#0xfc
      002958 F5 81            [12] 7392 	mov	sp,a
                                   7393 ;	calc.c:328: printstr("\r\nstack underflow\r\n");
      00295A 7Dr46            [12] 7394 	mov	r5,#___str_9
      00295C 7Cs00            [12] 7395 	mov	r4,#(___str_9 >> 8)
      00295E 7B 80            [12] 7396 	mov	r3,#0x80
                                   7397 ;	calc.c:51: return;
      002960                       7398 00495$:
                                   7399 ;	calc.c:49: for (; *s; s++) putchar(*s);
      002960 8D 82            [24] 7400 	mov	dpl,r5
      002962 8C 83            [24] 7401 	mov	dph,r4
      002964 8B F0            [24] 7402 	mov	b,r3
      002966 12r00r00         [24] 7403 	lcall	__gptrget
      002969 FF               [12] 7404 	mov	r7,a
      00296A 70 03            [24] 7405 	jnz	01403$
      00296C 02r2ArBC         [24] 7406 	ljmp	00249$
      00296F                       7407 01403$:
      00296F 7E 00            [12] 7408 	mov	r6,#0x00
      002971 8F 82            [24] 7409 	mov	dpl,r7
      002973 8E 83            [24] 7410 	mov	dph,r6
      002975 12r00r00         [24] 7411 	lcall	_putchar
      002978 0D               [12] 7412 	inc	r5
                                   7413 ;	calc.c:328: printstr("\r\nstack underflow\r\n");
      002979 BD 00 E4         [24] 7414 	cjne	r5,#0x00,00495$
      00297C 0C               [12] 7415 	inc	r4
      00297D 80 E1            [24] 7416 	sjmp	00495$
      00297F                       7417 00239$:
                                   7418 ;	calc.c:330: d1 <<= d0;
      00297F E5*00            [12] 7419 	mov	a,_bp
      002981 24 15            [12] 7420 	add	a,#0x15
      002983 F8               [12] 7421 	mov	r0,a
      002984 86 F0            [24] 7422 	mov	b,@r0
      002986 05 F0            [12] 7423 	inc	b
      002988 E5*00            [12] 7424 	mov	a,_bp
      00298A 24 19            [12] 7425 	add	a,#0x19
      00298C F8               [12] 7426 	mov	r0,a
      00298D 80 12            [24] 7427 	sjmp	01406$
      00298F                       7428 01405$:
      00298F E6               [12] 7429 	mov	a,@r0
      002990 26               [12] 7430 	add	a,@r0
      002991 F6               [12] 7431 	mov	@r0,a
      002992 08               [12] 7432 	inc	r0
      002993 E6               [12] 7433 	mov	a,@r0
      002994 33               [12] 7434 	rlc	a
      002995 F6               [12] 7435 	mov	@r0,a
      002996 08               [12] 7436 	inc	r0
      002997 E6               [12] 7437 	mov	a,@r0
      002998 33               [12] 7438 	rlc	a
      002999 F6               [12] 7439 	mov	@r0,a
      00299A 08               [12] 7440 	inc	r0
      00299B E6               [12] 7441 	mov	a,@r0
      00299C 33               [12] 7442 	rlc	a
      00299D F6               [12] 7443 	mov	@r0,a
      00299E 18               [12] 7444 	dec	r0
      00299F 18               [12] 7445 	dec	r0
      0029A0 18               [12] 7446 	dec	r0
      0029A1                       7447 01406$:
      0029A1 D5 F0 EB         [24] 7448 	djnz	b,01405$
                                   7449 ;	calc.c:331: (void)stack_push(ctx->ps, d1);
      0029A4 8A 82            [24] 7450 	mov	dpl,r2
      0029A6 8B 83            [24] 7451 	mov	dph,r3
      0029A8 8C F0            [24] 7452 	mov	b,r4
      0029AA 12r00r00         [24] 7453 	lcall	__gptrget
      0029AD FA               [12] 7454 	mov	r2,a
      0029AE A3               [24] 7455 	inc	dptr
      0029AF 12r00r00         [24] 7456 	lcall	__gptrget
      0029B2 FB               [12] 7457 	mov	r3,a
      0029B3 A3               [24] 7458 	inc	dptr
      0029B4 12r00r00         [24] 7459 	lcall	__gptrget
      0029B7 FC               [12] 7460 	mov	r4,a
      0029B8 E5*00            [12] 7461 	mov	a,_bp
      0029BA 24 19            [12] 7462 	add	a,#0x19
      0029BC F8               [12] 7463 	mov	r0,a
      0029BD E6               [12] 7464 	mov	a,@r0
      0029BE C0 E0            [24] 7465 	push	acc
      0029C0 08               [12] 7466 	inc	r0
      0029C1 E6               [12] 7467 	mov	a,@r0
      0029C2 C0 E0            [24] 7468 	push	acc
      0029C4 08               [12] 7469 	inc	r0
      0029C5 E6               [12] 7470 	mov	a,@r0
      0029C6 C0 E0            [24] 7471 	push	acc
      0029C8 08               [12] 7472 	inc	r0
      0029C9 E6               [12] 7473 	mov	a,@r0
      0029CA C0 E0            [24] 7474 	push	acc
      0029CC 8A 82            [24] 7475 	mov	dpl,r2
      0029CE 8B 83            [24] 7476 	mov	dph,r3
      0029D0 8C F0            [24] 7477 	mov	b,r4
      0029D2 12r00r00         [24] 7478 	lcall	_stack_push
      0029D5 E5 81            [12] 7479 	mov	a,sp
      0029D7 24 FC            [12] 7480 	add	a,#0xfc
      0029D9 F5 81            [12] 7481 	mov	sp,a
                                   7482 ;	calc.c:333: break;
      0029DB 02r2ArBC         [24] 7483 	ljmp	00249$
                                   7484 ;	calc.c:334: case '~':
      0029DE                       7485 00244$:
                                   7486 ;	calc.c:335: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      0029DE E5*00            [12] 7487 	mov	a,_bp
      0029E0 24 15            [12] 7488 	add	a,#0x15
      0029E2 FF               [12] 7489 	mov	r7,a
      0029E3 E5*00            [12] 7490 	mov	a,_bp
      0029E5 24 0E            [12] 7491 	add	a,#0x0e
      0029E7 F8               [12] 7492 	mov	r0,a
      0029E8 A6 07            [24] 7493 	mov	@r0,ar7
      0029EA 08               [12] 7494 	inc	r0
      0029EB 76 00            [12] 7495 	mov	@r0,#0x00
      0029ED 08               [12] 7496 	inc	r0
      0029EE 76 40            [12] 7497 	mov	@r0,#0x40
      0029F0 E5*00            [12] 7498 	mov	a,_bp
      0029F2 24 12            [12] 7499 	add	a,#0x12
      0029F4 F8               [12] 7500 	mov	r0,a
      0029F5 74 13            [12] 7501 	mov	a,#0x13
      0029F7 26               [12] 7502 	add	a,@r0
      0029F8 FA               [12] 7503 	mov	r2,a
      0029F9 74 40            [12] 7504 	mov	a,#0x40
      0029FB 08               [12] 7505 	inc	r0
      0029FC 36               [12] 7506 	addc	a,@r0
      0029FD FB               [12] 7507 	mov	r3,a
      0029FE 08               [12] 7508 	inc	r0
      0029FF 86 04            [24] 7509 	mov	ar4,@r0
      002A01 8A 82            [24] 7510 	mov	dpl,r2
      002A03 8B 83            [24] 7511 	mov	dph,r3
      002A05 8C F0            [24] 7512 	mov	b,r4
      002A07 12r00r00         [24] 7513 	lcall	__gptrget
      002A0A FD               [12] 7514 	mov	r5,a
      002A0B A3               [24] 7515 	inc	dptr
      002A0C 12r00r00         [24] 7516 	lcall	__gptrget
      002A0F FE               [12] 7517 	mov	r6,a
      002A10 A3               [24] 7518 	inc	dptr
      002A11 12r00r00         [24] 7519 	lcall	__gptrget
      002A14 FF               [12] 7520 	mov	r7,a
      002A15 C0 04            [24] 7521 	push	ar4
      002A17 C0 03            [24] 7522 	push	ar3
      002A19 C0 02            [24] 7523 	push	ar2
      002A1B E5*00            [12] 7524 	mov	a,_bp
      002A1D 24 0E            [12] 7525 	add	a,#0x0e
      002A1F F8               [12] 7526 	mov	r0,a
      002A20 E6               [12] 7527 	mov	a,@r0
      002A21 C0 E0            [24] 7528 	push	acc
      002A23 08               [12] 7529 	inc	r0
      002A24 E6               [12] 7530 	mov	a,@r0
      002A25 C0 E0            [24] 7531 	push	acc
      002A27 08               [12] 7532 	inc	r0
      002A28 E6               [12] 7533 	mov	a,@r0
      002A29 C0 E0            [24] 7534 	push	acc
      002A2B 8D 82            [24] 7535 	mov	dpl,r5
      002A2D 8E 83            [24] 7536 	mov	dph,r6
      002A2F 8F F0            [24] 7537 	mov	b,r7
      002A31 12r00r00         [24] 7538 	lcall	_stack_pop
      002A34 AE 82            [24] 7539 	mov	r6,dpl
      002A36 AF 83            [24] 7540 	mov	r7,dph
      002A38 15 81            [12] 7541 	dec	sp
      002A3A 15 81            [12] 7542 	dec	sp
      002A3C 15 81            [12] 7543 	dec	sp
      002A3E D0 02            [24] 7544 	pop	ar2
      002A40 D0 03            [24] 7545 	pop	ar3
      002A42 D0 04            [24] 7546 	pop	ar4
      002A44 EE               [12] 7547 	mov	a,r6
      002A45 4F               [12] 7548 	orl	a,r7
      002A46 70 22            [24] 7549 	jnz	00246$
      002A48 7Dr46            [12] 7550 	mov	r5,#___str_9
      002A4A 7Cs00            [12] 7551 	mov	r4,#(___str_9 >> 8)
      002A4C 7B 80            [12] 7552 	mov	r3,#0x80
                                   7553 ;	calc.c:51: return;
      002A4E                       7554 00498$:
                                   7555 ;	calc.c:49: for (; *s; s++) putchar(*s);
      002A4E 8D 82            [24] 7556 	mov	dpl,r5
      002A50 8C 83            [24] 7557 	mov	dph,r4
      002A52 8B F0            [24] 7558 	mov	b,r3
      002A54 12r00r00         [24] 7559 	lcall	__gptrget
      002A57 FF               [12] 7560 	mov	r7,a
      002A58 60 62            [24] 7561 	jz	00249$
      002A5A 7E 00            [12] 7562 	mov	r6,#0x00
      002A5C 8F 82            [24] 7563 	mov	dpl,r7
      002A5E 8E 83            [24] 7564 	mov	dph,r6
      002A60 12r00r00         [24] 7565 	lcall	_putchar
      002A63 0D               [12] 7566 	inc	r5
                                   7567 ;	calc.c:335: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      002A64 BD 00 E7         [24] 7568 	cjne	r5,#0x00,00498$
      002A67 0C               [12] 7569 	inc	r4
      002A68 80 E4            [24] 7570 	sjmp	00498$
      002A6A                       7571 00246$:
                                   7572 ;	calc.c:337: d0 = ~d0;
      002A6A E5*00            [12] 7573 	mov	a,_bp
      002A6C 24 15            [12] 7574 	add	a,#0x15
      002A6E F8               [12] 7575 	mov	r0,a
      002A6F E6               [12] 7576 	mov	a,@r0
      002A70 F4               [12] 7577 	cpl	a
      002A71 F6               [12] 7578 	mov	@r0,a
      002A72 08               [12] 7579 	inc	r0
      002A73 E6               [12] 7580 	mov	a,@r0
      002A74 F4               [12] 7581 	cpl	a
      002A75 F6               [12] 7582 	mov	@r0,a
      002A76 08               [12] 7583 	inc	r0
      002A77 E6               [12] 7584 	mov	a,@r0
      002A78 F4               [12] 7585 	cpl	a
      002A79 F6               [12] 7586 	mov	@r0,a
      002A7A 08               [12] 7587 	inc	r0
      002A7B E6               [12] 7588 	mov	a,@r0
      002A7C F4               [12] 7589 	cpl	a
      002A7D F6               [12] 7590 	mov	@r0,a
                                   7591 ;	calc.c:338: (void)stack_push(ctx->ps, d0);
      002A7E 8A 82            [24] 7592 	mov	dpl,r2
      002A80 8B 83            [24] 7593 	mov	dph,r3
      002A82 8C F0            [24] 7594 	mov	b,r4
      002A84 12r00r00         [24] 7595 	lcall	__gptrget
      002A87 FA               [12] 7596 	mov	r2,a
      002A88 A3               [24] 7597 	inc	dptr
      002A89 12r00r00         [24] 7598 	lcall	__gptrget
      002A8C FB               [12] 7599 	mov	r3,a
      002A8D A3               [24] 7600 	inc	dptr
      002A8E 12r00r00         [24] 7601 	lcall	__gptrget
      002A91 FC               [12] 7602 	mov	r4,a
      002A92 E5*00            [12] 7603 	mov	a,_bp
      002A94 24 15            [12] 7604 	add	a,#0x15
      002A96 F8               [12] 7605 	mov	r0,a
      002A97 E6               [12] 7606 	mov	a,@r0
      002A98 C0 E0            [24] 7607 	push	acc
      002A9A 08               [12] 7608 	inc	r0
      002A9B E6               [12] 7609 	mov	a,@r0
      002A9C C0 E0            [24] 7610 	push	acc
      002A9E 08               [12] 7611 	inc	r0
      002A9F E6               [12] 7612 	mov	a,@r0
      002AA0 C0 E0            [24] 7613 	push	acc
      002AA2 08               [12] 7614 	inc	r0
      002AA3 E6               [12] 7615 	mov	a,@r0
      002AA4 C0 E0            [24] 7616 	push	acc
      002AA6 8A 82            [24] 7617 	mov	dpl,r2
      002AA8 8B 83            [24] 7618 	mov	dph,r3
      002AAA 8C F0            [24] 7619 	mov	b,r4
      002AAC 12r00r00         [24] 7620 	lcall	_stack_push
      002AAF E5 81            [12] 7621 	mov	a,sp
      002AB1 24 FC            [12] 7622 	add	a,#0xfc
      002AB3 F5 81            [12] 7623 	mov	sp,a
                                   7624 ;	calc.c:340: break;
                                   7625 ;	calc.c:341: default:
      002AB5 80 05            [24] 7626 	sjmp	00249$
      002AB7                       7627 00248$:
                                   7628 ;	calc.c:342: return UNDEF;
      002AB7 90 80 00         [24] 7629 	mov	dptr,#0x8000
                                   7630 ;	calc.c:343: }
      002ABA 80 03            [24] 7631 	sjmp	00500$
      002ABC                       7632 00249$:
                                   7633 ;	calc.c:345: return 1;
      002ABC 90 00 01         [24] 7634 	mov	dptr,#0x0001
      002ABF                       7635 00500$:
                                   7636 ;	calc.c:346: }
      002ABF 85*00 81         [24] 7637 	mov	sp,_bp
      002AC2 D0*00            [24] 7638 	pop	_bp
      002AC4 22               [24] 7639 	ret
                                   7640 ;------------------------------------------------------------
                                   7641 ;Allocation info for local variables in function 'push_acc'
                                   7642 ;------------------------------------------------------------
                                   7643 ;delta                     Allocated to stack - _bp -5
                                   7644 ;_ctx                      Allocated to stack - _bp +5
                                   7645 ;ctx                       Allocated to registers r2 r3 r4 
                                   7646 ;__1310720127              Allocated to registers 
                                   7647 ;s                         Allocated to registers r5 r6 r7 
                                   7648 ;sloc0                     Allocated to stack - _bp +1
                                   7649 ;------------------------------------------------------------
                                   7650 ;	calc.c:348: static int push_acc(void *_ctx, delta_t *delta) __reentrant {
                                   7651 ;	-----------------------------------------
                                   7652 ;	 function push_acc
                                   7653 ;	-----------------------------------------
      002AC5                       7654 _push_acc:
      002AC5 C0*00            [24] 7655 	push	_bp
      002AC7 E5 81            [12] 7656 	mov	a,sp
      002AC9 F5*00            [12] 7657 	mov	_bp,a
      002ACB 24 07            [12] 7658 	add	a,#0x07
      002ACD F5 81            [12] 7659 	mov	sp,a
      002ACF C8               [12] 7660 	xch	a,r0
      002AD0 E5*00            [12] 7661 	mov	a,_bp
      002AD2 24 05            [12] 7662 	add	a,#0x05
      002AD4 C8               [12] 7663 	xch	a,r0
      002AD5 A6 82            [24] 7664 	mov	@r0,dpl
      002AD7 08               [12] 7665 	inc	r0
      002AD8 A6 83            [24] 7666 	mov	@r0,dph
      002ADA 08               [12] 7667 	inc	r0
      002ADB A6 F0            [24] 7668 	mov	@r0,b
                                   7669 ;	calc.c:349: calc_ctx_t *ctx = (calc_ctx_t *)_ctx;
      002ADD E5*00            [12] 7670 	mov	a,_bp
      002ADF 24 05            [12] 7671 	add	a,#0x05
      002AE1 F8               [12] 7672 	mov	r0,a
      002AE2 86 02            [24] 7673 	mov	ar2,@r0
      002AE4 08               [12] 7674 	inc	r0
      002AE5 86 03            [24] 7675 	mov	ar3,@r0
      002AE7 08               [12] 7676 	inc	r0
      002AE8 86 04            [24] 7677 	mov	ar4,@r0
                                   7678 ;	calc.c:353: ctx->acc_valid = 0;
      002AEA 74 06            [12] 7679 	mov	a,#0x06
      002AEC 2A               [12] 7680 	add	a,r2
      002AED FD               [12] 7681 	mov	r5,a
      002AEE E4               [12] 7682 	clr	a
      002AEF 3B               [12] 7683 	addc	a,r3
      002AF0 FE               [12] 7684 	mov	r6,a
      002AF1 8C 07            [24] 7685 	mov	ar7,r4
      002AF3 8D 82            [24] 7686 	mov	dpl,r5
      002AF5 8E 83            [24] 7687 	mov	dph,r6
      002AF7 8F F0            [24] 7688 	mov	b,r7
      002AF9 E4               [12] 7689 	clr	a
      002AFA 12r00r00         [24] 7690 	lcall	__gptrput
                                   7691 ;	calc.c:354: if (!stack_push(ctx->ps, ctx->acc)) printstr("\r\nstack overflow\r\n");
      002AFD 74 02            [12] 7692 	mov	a,#0x02
      002AFF 2A               [12] 7693 	add	a,r2
      002B00 FF               [12] 7694 	mov	r7,a
      002B01 E4               [12] 7695 	clr	a
      002B02 3B               [12] 7696 	addc	a,r3
      002B03 FD               [12] 7697 	mov	r5,a
      002B04 8C 06            [24] 7698 	mov	ar6,r4
      002B06 8F 82            [24] 7699 	mov	dpl,r7
      002B08 8D 83            [24] 7700 	mov	dph,r5
      002B0A 8E F0            [24] 7701 	mov	b,r6
      002B0C A8*00            [24] 7702 	mov	r0,_bp
      002B0E 08               [12] 7703 	inc	r0
      002B0F 12r00r00         [24] 7704 	lcall	__gptrget
      002B12 F6               [12] 7705 	mov	@r0,a
      002B13 A3               [24] 7706 	inc	dptr
      002B14 12r00r00         [24] 7707 	lcall	__gptrget
      002B17 08               [12] 7708 	inc	r0
      002B18 F6               [12] 7709 	mov	@r0,a
      002B19 A3               [24] 7710 	inc	dptr
      002B1A 12r00r00         [24] 7711 	lcall	__gptrget
      002B1D 08               [12] 7712 	inc	r0
      002B1E F6               [12] 7713 	mov	@r0,a
      002B1F A3               [24] 7714 	inc	dptr
      002B20 12r00r00         [24] 7715 	lcall	__gptrget
      002B23 08               [12] 7716 	inc	r0
      002B24 F6               [12] 7717 	mov	@r0,a
      002B25 74 13            [12] 7718 	mov	a,#0x13
      002B27 2A               [12] 7719 	add	a,r2
      002B28 FA               [12] 7720 	mov	r2,a
      002B29 74 40            [12] 7721 	mov	a,#0x40
      002B2B 3B               [12] 7722 	addc	a,r3
      002B2C FB               [12] 7723 	mov	r3,a
      002B2D 8C 07            [24] 7724 	mov	ar7,r4
      002B2F 8A 82            [24] 7725 	mov	dpl,r2
      002B31 8B 83            [24] 7726 	mov	dph,r3
      002B33 8F F0            [24] 7727 	mov	b,r7
      002B35 12r00r00         [24] 7728 	lcall	__gptrget
      002B38 FA               [12] 7729 	mov	r2,a
      002B39 A3               [24] 7730 	inc	dptr
      002B3A 12r00r00         [24] 7731 	lcall	__gptrget
      002B3D FB               [12] 7732 	mov	r3,a
      002B3E A3               [24] 7733 	inc	dptr
      002B3F 12r00r00         [24] 7734 	lcall	__gptrget
      002B42 FF               [12] 7735 	mov	r7,a
      002B43 A8*00            [24] 7736 	mov	r0,_bp
      002B45 08               [12] 7737 	inc	r0
      002B46 E6               [12] 7738 	mov	a,@r0
      002B47 C0 E0            [24] 7739 	push	acc
      002B49 08               [12] 7740 	inc	r0
      002B4A E6               [12] 7741 	mov	a,@r0
      002B4B C0 E0            [24] 7742 	push	acc
      002B4D 08               [12] 7743 	inc	r0
      002B4E E6               [12] 7744 	mov	a,@r0
      002B4F C0 E0            [24] 7745 	push	acc
      002B51 08               [12] 7746 	inc	r0
      002B52 E6               [12] 7747 	mov	a,@r0
      002B53 C0 E0            [24] 7748 	push	acc
      002B55 8A 82            [24] 7749 	mov	dpl,r2
      002B57 8B 83            [24] 7750 	mov	dph,r3
      002B59 8F F0            [24] 7751 	mov	b,r7
      002B5B 12r00r00         [24] 7752 	lcall	_stack_push
      002B5E AE 82            [24] 7753 	mov	r6,dpl
      002B60 AF 83            [24] 7754 	mov	r7,dph
      002B62 E5 81            [12] 7755 	mov	a,sp
      002B64 24 FC            [12] 7756 	add	a,#0xfc
      002B66 F5 81            [12] 7757 	mov	sp,a
      002B68 EE               [12] 7758 	mov	a,r6
      002B69 4F               [12] 7759 	orl	a,r7
      002B6A 70 22            [24] 7760 	jnz	00102$
      002B6C 7Dr95            [12] 7761 	mov	r5,#___str_12
      002B6E 7Es00            [12] 7762 	mov	r6,#(___str_12 >> 8)
      002B70 7F 80            [12] 7763 	mov	r7,#0x80
                                   7764 ;	calc.c:51: return;
      002B72                       7765 00109$:
                                   7766 ;	calc.c:49: for (; *s; s++) putchar(*s);
      002B72 8D 82            [24] 7767 	mov	dpl,r5
      002B74 8E 83            [24] 7768 	mov	dph,r6
      002B76 8F F0            [24] 7769 	mov	b,r7
      002B78 12r00r00         [24] 7770 	lcall	__gptrget
      002B7B FC               [12] 7771 	mov	r4,a
      002B7C 60 10            [24] 7772 	jz	00102$
      002B7E 7B 00            [12] 7773 	mov	r3,#0x00
      002B80 8C 82            [24] 7774 	mov	dpl,r4
      002B82 8B 83            [24] 7775 	mov	dph,r3
      002B84 12r00r00         [24] 7776 	lcall	_putchar
      002B87 0D               [12] 7777 	inc	r5
                                   7778 ;	calc.c:354: if (!stack_push(ctx->ps, ctx->acc)) printstr("\r\nstack overflow\r\n");
      002B88 BD 00 E7         [24] 7779 	cjne	r5,#0x00,00109$
      002B8B 0E               [12] 7780 	inc	r6
      002B8C 80 E4            [24] 7781 	sjmp	00109$
      002B8E                       7782 00102$:
                                   7783 ;	calc.c:356: if (delta->event == EVENT_OP) return operator(_ctx, delta);
      002B8E E5*00            [12] 7784 	mov	a,_bp
      002B90 24 FB            [12] 7785 	add	a,#0xfb
      002B92 F8               [12] 7786 	mov	r0,a
      002B93 86 05            [24] 7787 	mov	ar5,@r0
      002B95 08               [12] 7788 	inc	r0
      002B96 86 06            [24] 7789 	mov	ar6,@r0
      002B98 08               [12] 7790 	inc	r0
      002B99 86 07            [24] 7791 	mov	ar7,@r0
      002B9B 74 02            [12] 7792 	mov	a,#0x02
      002B9D 2D               [12] 7793 	add	a,r5
      002B9E FA               [12] 7794 	mov	r2,a
      002B9F E4               [12] 7795 	clr	a
      002BA0 3E               [12] 7796 	addc	a,r6
      002BA1 FB               [12] 7797 	mov	r3,a
      002BA2 8F 04            [24] 7798 	mov	ar4,r7
      002BA4 8A 82            [24] 7799 	mov	dpl,r2
      002BA6 8B 83            [24] 7800 	mov	dph,r3
      002BA8 8C F0            [24] 7801 	mov	b,r4
      002BAA 12r00r00         [24] 7802 	lcall	__gptrget
      002BAD FA               [12] 7803 	mov	r2,a
      002BAE A3               [24] 7804 	inc	dptr
      002BAF 12r00r00         [24] 7805 	lcall	__gptrget
      002BB2 FB               [12] 7806 	mov	r3,a
      002BB3 BA 02 29         [24] 7807 	cjne	r2,#0x02,00104$
      002BB6 BB 00 26         [24] 7808 	cjne	r3,#0x00,00104$
      002BB9 C0 05            [24] 7809 	push	ar5
      002BBB C0 06            [24] 7810 	push	ar6
      002BBD C0 07            [24] 7811 	push	ar7
      002BBF E5*00            [12] 7812 	mov	a,_bp
      002BC1 24 05            [12] 7813 	add	a,#0x05
      002BC3 F8               [12] 7814 	mov	r0,a
      002BC4 86 82            [24] 7815 	mov	dpl,@r0
      002BC6 08               [12] 7816 	inc	r0
      002BC7 86 83            [24] 7817 	mov	dph,@r0
      002BC9 08               [12] 7818 	inc	r0
      002BCA 86 F0            [24] 7819 	mov	b,@r0
      002BCC 12r08r1D         [24] 7820 	lcall	_operator
      002BCF AE 82            [24] 7821 	mov	r6,dpl
      002BD1 AF 83            [24] 7822 	mov	r7,dph
      002BD3 15 81            [12] 7823 	dec	sp
      002BD5 15 81            [12] 7824 	dec	sp
      002BD7 15 81            [12] 7825 	dec	sp
      002BD9 8E 82            [24] 7826 	mov	dpl,r6
      002BDB 8F 83            [24] 7827 	mov	dph,r7
      002BDD 80 03            [24] 7828 	sjmp	00111$
      002BDF                       7829 00104$:
                                   7830 ;	calc.c:357: else return 1;
      002BDF 90 00 01         [24] 7831 	mov	dptr,#0x0001
      002BE2                       7832 00111$:
                                   7833 ;	calc.c:358: }
      002BE2 85*00 81         [24] 7834 	mov	sp,_bp
      002BE5 D0*00            [24] 7835 	pop	_bp
      002BE7 22               [24] 7836 	ret
                                   7837 ;------------------------------------------------------------
                                   7838 ;Allocation info for local variables in function 'reset_acc'
                                   7839 ;------------------------------------------------------------
                                   7840 ;delta                     Allocated to stack - _bp -5
                                   7841 ;_ctx                      Allocated to registers r5 r6 r7 
                                   7842 ;ctx                       Allocated to registers r5 r6 r7 
                                   7843 ;------------------------------------------------------------
                                   7844 ;	calc.c:360: static int reset_acc(void *_ctx, delta_t *delta) __reentrant {
                                   7845 ;	-----------------------------------------
                                   7846 ;	 function reset_acc
                                   7847 ;	-----------------------------------------
      002BE8                       7848 _reset_acc:
      002BE8 C0*00            [24] 7849 	push	_bp
      002BEA 85 81*00         [24] 7850 	mov	_bp,sp
      002BED AD 82            [24] 7851 	mov	r5,dpl
      002BEF AE 83            [24] 7852 	mov	r6,dph
      002BF1 AF F0            [24] 7853 	mov	r7,b
                                   7854 ;	calc.c:361: calc_ctx_t *ctx = (calc_ctx_t *)_ctx;
                                   7855 ;	calc.c:363: if (delta->event == EVENT_RSTA_I) ctx->acc_valid = 0;
      002BF3 E5*00            [12] 7856 	mov	a,_bp
      002BF5 24 FB            [12] 7857 	add	a,#0xfb
      002BF7 F8               [12] 7858 	mov	r0,a
      002BF8 86 02            [24] 7859 	mov	ar2,@r0
      002BFA 08               [12] 7860 	inc	r0
      002BFB 86 03            [24] 7861 	mov	ar3,@r0
      002BFD 08               [12] 7862 	inc	r0
      002BFE 86 04            [24] 7863 	mov	ar4,@r0
      002C00 74 02            [12] 7864 	mov	a,#0x02
      002C02 2A               [12] 7865 	add	a,r2
      002C03 FA               [12] 7866 	mov	r2,a
      002C04 E4               [12] 7867 	clr	a
      002C05 3B               [12] 7868 	addc	a,r3
      002C06 FB               [12] 7869 	mov	r3,a
      002C07 8A 82            [24] 7870 	mov	dpl,r2
      002C09 8B 83            [24] 7871 	mov	dph,r3
      002C0B 8C F0            [24] 7872 	mov	b,r4
      002C0D 12r00r00         [24] 7873 	lcall	__gptrget
      002C10 FA               [12] 7874 	mov	r2,a
      002C11 A3               [24] 7875 	inc	dptr
      002C12 12r00r00         [24] 7876 	lcall	__gptrget
      002C15 FB               [12] 7877 	mov	r3,a
      002C16 BA 07 16         [24] 7878 	cjne	r2,#0x07,00102$
      002C19 BB 00 13         [24] 7879 	cjne	r3,#0x00,00102$
      002C1C 74 06            [12] 7880 	mov	a,#0x06
      002C1E 2D               [12] 7881 	add	a,r5
      002C1F FA               [12] 7882 	mov	r2,a
      002C20 E4               [12] 7883 	clr	a
      002C21 3E               [12] 7884 	addc	a,r6
      002C22 FB               [12] 7885 	mov	r3,a
      002C23 8F 04            [24] 7886 	mov	ar4,r7
      002C25 8A 82            [24] 7887 	mov	dpl,r2
      002C27 8B 83            [24] 7888 	mov	dph,r3
      002C29 8C F0            [24] 7889 	mov	b,r4
      002C2B E4               [12] 7890 	clr	a
      002C2C 12r00r00         [24] 7891 	lcall	__gptrput
      002C2F                       7892 00102$:
                                   7893 ;	calc.c:364: ctx->acc = 0l;
      002C2F 74 02            [12] 7894 	mov	a,#0x02
      002C31 2D               [12] 7895 	add	a,r5
      002C32 FD               [12] 7896 	mov	r5,a
      002C33 E4               [12] 7897 	clr	a
      002C34 3E               [12] 7898 	addc	a,r6
      002C35 FE               [12] 7899 	mov	r6,a
      002C36 8D 82            [24] 7900 	mov	dpl,r5
      002C38 8E 83            [24] 7901 	mov	dph,r6
      002C3A 8F F0            [24] 7902 	mov	b,r7
      002C3C E4               [12] 7903 	clr	a
      002C3D 12r00r00         [24] 7904 	lcall	__gptrput
      002C40 A3               [24] 7905 	inc	dptr
      002C41 12r00r00         [24] 7906 	lcall	__gptrput
      002C44 A3               [24] 7907 	inc	dptr
      002C45 12r00r00         [24] 7908 	lcall	__gptrput
      002C48 A3               [24] 7909 	inc	dptr
      002C49 12r00r00         [24] 7910 	lcall	__gptrput
                                   7911 ;	calc.c:366: return 1;
      002C4C 90 00 01         [24] 7912 	mov	dptr,#0x0001
                                   7913 ;	calc.c:367: }
      002C4F D0*00            [24] 7914 	pop	_bp
      002C51 22               [24] 7915 	ret
                                   7916 ;------------------------------------------------------------
                                   7917 ;Allocation info for local variables in function 'reset_base'
                                   7918 ;------------------------------------------------------------
                                   7919 ;delta                     Allocated to stack - _bp -5
                                   7920 ;_ctx                      Allocated to registers r5 r6 r7 
                                   7921 ;ctx                       Allocated to registers r5 r6 r7 
                                   7922 ;------------------------------------------------------------
                                   7923 ;	calc.c:369: static int reset_base(void *_ctx, delta_t *delta) __reentrant {
                                   7924 ;	-----------------------------------------
                                   7925 ;	 function reset_base
                                   7926 ;	-----------------------------------------
      002C52                       7927 _reset_base:
      002C52 C0*00            [24] 7928 	push	_bp
      002C54 85 81*00         [24] 7929 	mov	_bp,sp
      002C57 AD 82            [24] 7930 	mov	r5,dpl
      002C59 AE 83            [24] 7931 	mov	r6,dph
      002C5B AF F0            [24] 7932 	mov	r7,b
                                   7933 ;	calc.c:370: calc_ctx_t *ctx = (calc_ctx_t *)_ctx;
                                   7934 ;	calc.c:374: switch (ctx->digit[0]) {
      002C5D 74 07            [12] 7935 	mov	a,#0x07
      002C5F 2D               [12] 7936 	add	a,r5
      002C60 FA               [12] 7937 	mov	r2,a
      002C61 E4               [12] 7938 	clr	a
      002C62 3E               [12] 7939 	addc	a,r6
      002C63 FB               [12] 7940 	mov	r3,a
      002C64 8F 04            [24] 7941 	mov	ar4,r7
      002C66 8A 82            [24] 7942 	mov	dpl,r2
      002C68 8B 83            [24] 7943 	mov	dph,r3
      002C6A 8C F0            [24] 7944 	mov	b,r4
      002C6C 12r00r00         [24] 7945 	lcall	__gptrget
      002C6F FC               [12] 7946 	mov	r4,a
      002C70 BC 48 02         [24] 7947 	cjne	r4,#0x48,00124$
      002C73 80 0F            [24] 7948 	sjmp	00101$
      002C75                       7949 00124$:
      002C75 BC 4F 02         [24] 7950 	cjne	r4,#0x4f,00125$
      002C78 80 2E            [24] 7951 	sjmp	00103$
      002C7A                       7952 00125$:
      002C7A BC 68 02         [24] 7953 	cjne	r4,#0x68,00126$
      002C7D 80 17            [24] 7954 	sjmp	00102$
      002C7F                       7955 00126$:
                                   7956 ;	calc.c:375: case 'H':
      002C7F BC 6F 48         [24] 7957 	cjne	r4,#0x6f,00105$
      002C82 80 36            [24] 7958 	sjmp	00104$
      002C84                       7959 00101$:
                                   7960 ;	calc.c:376: ctx->base = 16;
      002C84 8D 82            [24] 7961 	mov	dpl,r5
      002C86 8E 83            [24] 7962 	mov	dph,r6
      002C88 8F F0            [24] 7963 	mov	b,r7
      002C8A 74 10            [12] 7964 	mov	a,#0x10
      002C8C 12r00r00         [24] 7965 	lcall	__gptrput
      002C8F A3               [24] 7966 	inc	dptr
      002C90 E4               [12] 7967 	clr	a
      002C91 12r00r00         [24] 7968 	lcall	__gptrput
                                   7969 ;	calc.c:377: break;
                                   7970 ;	calc.c:378: case 'h':
      002C94 80 34            [24] 7971 	sjmp	00105$
      002C96                       7972 00102$:
                                   7973 ;	calc.c:379: ctx->base = 10;
      002C96 8D 82            [24] 7974 	mov	dpl,r5
      002C98 8E 83            [24] 7975 	mov	dph,r6
      002C9A 8F F0            [24] 7976 	mov	b,r7
      002C9C 74 0A            [12] 7977 	mov	a,#0x0a
      002C9E 12r00r00         [24] 7978 	lcall	__gptrput
      002CA1 A3               [24] 7979 	inc	dptr
      002CA2 E4               [12] 7980 	clr	a
      002CA3 12r00r00         [24] 7981 	lcall	__gptrput
                                   7982 ;	calc.c:380: break;
                                   7983 ;	calc.c:381: case 'O':
      002CA6 80 22            [24] 7984 	sjmp	00105$
      002CA8                       7985 00103$:
                                   7986 ;	calc.c:382: ctx->base = 8;
      002CA8 8D 82            [24] 7987 	mov	dpl,r5
      002CAA 8E 83            [24] 7988 	mov	dph,r6
      002CAC 8F F0            [24] 7989 	mov	b,r7
      002CAE 74 08            [12] 7990 	mov	a,#0x08
      002CB0 12r00r00         [24] 7991 	lcall	__gptrput
      002CB3 A3               [24] 7992 	inc	dptr
      002CB4 E4               [12] 7993 	clr	a
      002CB5 12r00r00         [24] 7994 	lcall	__gptrput
                                   7995 ;	calc.c:383: break;
                                   7996 ;	calc.c:384: case 'o':
      002CB8 80 10            [24] 7997 	sjmp	00105$
      002CBA                       7998 00104$:
                                   7999 ;	calc.c:385: ctx->base = 2;
      002CBA 8D 82            [24] 8000 	mov	dpl,r5
      002CBC 8E 83            [24] 8001 	mov	dph,r6
      002CBE 8F F0            [24] 8002 	mov	b,r7
      002CC0 74 02            [12] 8003 	mov	a,#0x02
      002CC2 12r00r00         [24] 8004 	lcall	__gptrput
      002CC5 A3               [24] 8005 	inc	dptr
      002CC6 E4               [12] 8006 	clr	a
      002CC7 12r00r00         [24] 8007 	lcall	__gptrput
                                   8008 ;	calc.c:387: }
      002CCA                       8009 00105$:
                                   8010 ;	calc.c:389: return 1;
      002CCA 90 00 01         [24] 8011 	mov	dptr,#0x0001
                                   8012 ;	calc.c:390: }
      002CCD D0*00            [24] 8013 	pop	_bp
      002CCF 22               [24] 8014 	ret
                                   8015 ;------------------------------------------------------------
                                   8016 ;Allocation info for local variables in function 'status'
                                   8017 ;------------------------------------------------------------
                                   8018 ;delta                     Allocated to stack - _bp -5
                                   8019 ;_ctx                      Allocated to registers r5 r6 r7 
                                   8020 ;ctx                       Allocated to stack - _bp +17
                                   8021 ;vals                      Allocated to stack - _bp +9
                                   8022 ;n                         Allocated to stack - _bp +20
                                   8023 ;__1310720129              Allocated to registers 
                                   8024 ;s                         Allocated to registers r5 r6 r7 
                                   8025 ;__1310720131              Allocated to registers r5 r6 r7 r4 
                                   8026 ;d                         Allocated to registers 
                                   8027 ;__1310720001              Allocated to registers 
                                   8028 ;d                         Allocated to stack - _bp +22
                                   8029 ;mask                      Allocated to stack - _bp +26
                                   8030 ;__1310720133              Allocated to registers 
                                   8031 ;s                         Allocated to registers r3 r4 r5 
                                   8032 ;__1310720135              Allocated to registers r2 r3 r4 r5 
                                   8033 ;d                         Allocated to registers 
                                   8034 ;__1310720001              Allocated to registers 
                                   8035 ;d                         Allocated to stack - _bp +22
                                   8036 ;mask                      Allocated to stack - _bp +26
                                   8037 ;__1310720137              Allocated to registers 
                                   8038 ;s                         Allocated to registers r3 r4 r5 
                                   8039 ;__1310720139              Allocated to registers r4 r5 r6 r7 
                                   8040 ;d                         Allocated to registers 
                                   8041 ;__1310720001              Allocated to registers 
                                   8042 ;d                         Allocated to stack - _bp +22
                                   8043 ;mask                      Allocated to stack - _bp +26
                                   8044 ;__1310720141              Allocated to registers 
                                   8045 ;s                         Allocated to registers r3 r4 r5 
                                   8046 ;__1310720143              Allocated to registers r2 r3 r4 r5 
                                   8047 ;d                         Allocated to registers 
                                   8048 ;__1310720001              Allocated to registers 
                                   8049 ;d                         Allocated to stack - _bp +22
                                   8050 ;mask                      Allocated to stack - _bp +26
                                   8051 ;__1310720145              Allocated to registers 
                                   8052 ;s                         Allocated to registers r5 r6 r7 
                                   8053 ;__1310720147              Allocated to registers r4 r5 r6 r7 
                                   8054 ;d                         Allocated to registers 
                                   8055 ;__1310720001              Allocated to registers 
                                   8056 ;d                         Allocated to stack - _bp +22
                                   8057 ;mask                      Allocated to stack - _bp +26
                                   8058 ;__1310720149              Allocated to registers 
                                   8059 ;s                         Allocated to registers r5 r6 r7 
                                   8060 ;sloc0                     Allocated to stack - _bp +1
                                   8061 ;sloc1                     Allocated to stack - _bp +4
                                   8062 ;sloc2                     Allocated to stack - _bp +7
                                   8063 ;------------------------------------------------------------
                                   8064 ;	calc.c:392: static int status(void *_ctx, delta_t *delta) __reentrant {
                                   8065 ;	-----------------------------------------
                                   8066 ;	 function status
                                   8067 ;	-----------------------------------------
      002CD0                       8068 _status:
      002CD0 C0*00            [24] 8069 	push	_bp
      002CD2 E5 81            [12] 8070 	mov	a,sp
      002CD4 F5*00            [12] 8071 	mov	_bp,a
      002CD6 24 1D            [12] 8072 	add	a,#0x1d
      002CD8 F5 81            [12] 8073 	mov	sp,a
      002CDA AD 82            [24] 8074 	mov	r5,dpl
      002CDC AE 83            [24] 8075 	mov	r6,dph
      002CDE AF F0            [24] 8076 	mov	r7,b
                                   8077 ;	calc.c:393: calc_ctx_t *ctx = (calc_ctx_t *)_ctx;
      002CE0 E5*00            [12] 8078 	mov	a,_bp
      002CE2 24 11            [12] 8079 	add	a,#0x11
      002CE4 F8               [12] 8080 	mov	r0,a
      002CE5 A6 05            [24] 8081 	mov	@r0,ar5
      002CE7 08               [12] 8082 	inc	r0
      002CE8 A6 06            [24] 8083 	mov	@r0,ar6
      002CEA 08               [12] 8084 	inc	r0
      002CEB A6 07            [24] 8085 	mov	@r0,ar7
                                   8086 ;	calc.c:399: printf("\r\nPS = %p, SS = %p, base = %d\r\n", ctx->ps, ctx->ss, ctx->base);
      002CED E5*00            [12] 8087 	mov	a,_bp
      002CEF 24 11            [12] 8088 	add	a,#0x11
      002CF1 F8               [12] 8089 	mov	r0,a
      002CF2 86 82            [24] 8090 	mov	dpl,@r0
      002CF4 08               [12] 8091 	inc	r0
      002CF5 86 83            [24] 8092 	mov	dph,@r0
      002CF7 08               [12] 8093 	inc	r0
      002CF8 86 F0            [24] 8094 	mov	b,@r0
      002CFA E5*00            [12] 8095 	mov	a,_bp
      002CFC 24 07            [12] 8096 	add	a,#0x07
      002CFE F9               [12] 8097 	mov	r1,a
      002CFF 12r00r00         [24] 8098 	lcall	__gptrget
      002D02 F7               [12] 8099 	mov	@r1,a
      002D03 A3               [24] 8100 	inc	dptr
      002D04 12r00r00         [24] 8101 	lcall	__gptrget
      002D07 09               [12] 8102 	inc	r1
      002D08 F7               [12] 8103 	mov	@r1,a
      002D09 E5*00            [12] 8104 	mov	a,_bp
      002D0B 24 11            [12] 8105 	add	a,#0x11
      002D0D F8               [12] 8106 	mov	r0,a
      002D0E A9*00            [24] 8107 	mov	r1,_bp
      002D10 09               [12] 8108 	inc	r1
      002D11 74 16            [12] 8109 	mov	a,#0x16
      002D13 26               [12] 8110 	add	a,@r0
      002D14 F7               [12] 8111 	mov	@r1,a
      002D15 74 40            [12] 8112 	mov	a,#0x40
      002D17 08               [12] 8113 	inc	r0
      002D18 36               [12] 8114 	addc	a,@r0
      002D19 09               [12] 8115 	inc	r1
      002D1A F7               [12] 8116 	mov	@r1,a
      002D1B 08               [12] 8117 	inc	r0
      002D1C 09               [12] 8118 	inc	r1
      002D1D E6               [12] 8119 	mov	a,@r0
      002D1E F7               [12] 8120 	mov	@r1,a
      002D1F A8*00            [24] 8121 	mov	r0,_bp
      002D21 08               [12] 8122 	inc	r0
      002D22 86 82            [24] 8123 	mov	dpl,@r0
      002D24 08               [12] 8124 	inc	r0
      002D25 86 83            [24] 8125 	mov	dph,@r0
      002D27 08               [12] 8126 	inc	r0
      002D28 86 F0            [24] 8127 	mov	b,@r0
      002D2A 12r00r00         [24] 8128 	lcall	__gptrget
      002D2D FA               [12] 8129 	mov	r2,a
      002D2E A3               [24] 8130 	inc	dptr
      002D2F 12r00r00         [24] 8131 	lcall	__gptrget
      002D32 FE               [12] 8132 	mov	r6,a
      002D33 A3               [24] 8133 	inc	dptr
      002D34 12r00r00         [24] 8134 	lcall	__gptrget
      002D37 FF               [12] 8135 	mov	r7,a
      002D38 E5*00            [12] 8136 	mov	a,_bp
      002D3A 24 11            [12] 8137 	add	a,#0x11
      002D3C F8               [12] 8138 	mov	r0,a
      002D3D E5*00            [12] 8139 	mov	a,_bp
      002D3F 24 04            [12] 8140 	add	a,#0x04
      002D41 F9               [12] 8141 	mov	r1,a
      002D42 74 13            [12] 8142 	mov	a,#0x13
      002D44 26               [12] 8143 	add	a,@r0
      002D45 F7               [12] 8144 	mov	@r1,a
      002D46 74 40            [12] 8145 	mov	a,#0x40
      002D48 08               [12] 8146 	inc	r0
      002D49 36               [12] 8147 	addc	a,@r0
      002D4A 09               [12] 8148 	inc	r1
      002D4B F7               [12] 8149 	mov	@r1,a
      002D4C 08               [12] 8150 	inc	r0
      002D4D 09               [12] 8151 	inc	r1
      002D4E E6               [12] 8152 	mov	a,@r0
      002D4F F7               [12] 8153 	mov	@r1,a
      002D50 E5*00            [12] 8154 	mov	a,_bp
      002D52 24 04            [12] 8155 	add	a,#0x04
      002D54 F8               [12] 8156 	mov	r0,a
      002D55 86 82            [24] 8157 	mov	dpl,@r0
      002D57 08               [12] 8158 	inc	r0
      002D58 86 83            [24] 8159 	mov	dph,@r0
      002D5A 08               [12] 8160 	inc	r0
      002D5B 86 F0            [24] 8161 	mov	b,@r0
      002D5D 12r00r00         [24] 8162 	lcall	__gptrget
      002D60 FB               [12] 8163 	mov	r3,a
      002D61 A3               [24] 8164 	inc	dptr
      002D62 12r00r00         [24] 8165 	lcall	__gptrget
      002D65 FC               [12] 8166 	mov	r4,a
      002D66 A3               [24] 8167 	inc	dptr
      002D67 12r00r00         [24] 8168 	lcall	__gptrget
      002D6A FD               [12] 8169 	mov	r5,a
      002D6B E5*00            [12] 8170 	mov	a,_bp
      002D6D 24 07            [12] 8171 	add	a,#0x07
      002D6F F8               [12] 8172 	mov	r0,a
      002D70 E6               [12] 8173 	mov	a,@r0
      002D71 C0 E0            [24] 8174 	push	acc
      002D73 08               [12] 8175 	inc	r0
      002D74 E6               [12] 8176 	mov	a,@r0
      002D75 C0 E0            [24] 8177 	push	acc
      002D77 C0 02            [24] 8178 	push	ar2
      002D79 C0 06            [24] 8179 	push	ar6
      002D7B C0 07            [24] 8180 	push	ar7
      002D7D C0 03            [24] 8181 	push	ar3
      002D7F C0 04            [24] 8182 	push	ar4
      002D81 C0 05            [24] 8183 	push	ar5
      002D83 74rBD            [12] 8184 	mov	a,#___str_14
      002D85 C0 E0            [24] 8185 	push	acc
      002D87 74s00            [12] 8186 	mov	a,#(___str_14 >> 8)
      002D89 C0 E0            [24] 8187 	push	acc
      002D8B 74 80            [12] 8188 	mov	a,#0x80
      002D8D C0 E0            [24] 8189 	push	acc
      002D8F 12r00r00         [24] 8190 	lcall	_printf
      002D92 E5 81            [12] 8191 	mov	a,sp
      002D94 24 F5            [12] 8192 	add	a,#0xf5
      002D96 F5 81            [12] 8193 	mov	sp,a
                                   8194 ;	calc.c:401: printstr("ACC\t");
      002D98 7DrDD            [12] 8195 	mov	r5,#___str_15
      002D9A 7Es00            [12] 8196 	mov	r6,#(___str_15 >> 8)
      002D9C 7F 80            [12] 8197 	mov	r7,#0x80
                                   8198 ;	calc.c:51: return;
      002D9E                       8199 00139$:
                                   8200 ;	calc.c:49: for (; *s; s++) putchar(*s);
      002D9E 8D 82            [24] 8201 	mov	dpl,r5
      002DA0 8E 83            [24] 8202 	mov	dph,r6
      002DA2 8F F0            [24] 8203 	mov	b,r7
      002DA4 12r00r00         [24] 8204 	lcall	__gptrget
      002DA7 FC               [12] 8205 	mov	r4,a
      002DA8 60 10            [24] 8206 	jz	00112$
      002DAA 7B 00            [12] 8207 	mov	r3,#0x00
      002DAC 8C 82            [24] 8208 	mov	dpl,r4
      002DAE 8B 83            [24] 8209 	mov	dph,r3
      002DB0 12r00r00         [24] 8210 	lcall	_putchar
      002DB3 0D               [12] 8211 	inc	r5
                                   8212 ;	calc.c:401: printstr("ACC\t");
      002DB4 BD 00 E7         [24] 8213 	cjne	r5,#0x00,00139$
      002DB7 0E               [12] 8214 	inc	r6
      002DB8 80 E4            [24] 8215 	sjmp	00139$
      002DBA                       8216 00112$:
                                   8217 ;	calc.c:402: if (ctx->acc_valid) printall(ctx->acc);
      002DBA E5*00            [12] 8218 	mov	a,_bp
      002DBC 24 11            [12] 8219 	add	a,#0x11
      002DBE F8               [12] 8220 	mov	r0,a
      002DBF 74 06            [12] 8221 	mov	a,#0x06
      002DC1 26               [12] 8222 	add	a,@r0
      002DC2 FD               [12] 8223 	mov	r5,a
      002DC3 E4               [12] 8224 	clr	a
      002DC4 08               [12] 8225 	inc	r0
      002DC5 36               [12] 8226 	addc	a,@r0
      002DC6 FE               [12] 8227 	mov	r6,a
      002DC7 08               [12] 8228 	inc	r0
      002DC8 86 07            [24] 8229 	mov	ar7,@r0
      002DCA 8D 82            [24] 8230 	mov	dpl,r5
      002DCC 8E 83            [24] 8231 	mov	dph,r6
      002DCE 8F F0            [24] 8232 	mov	b,r7
      002DD0 12r00r00         [24] 8233 	lcall	__gptrget
      002DD3 70 03            [24] 8234 	jnz	00321$
      002DD5 02r2ErDA         [24] 8235 	ljmp	00102$
      002DD8                       8236 00321$:
      002DD8 E5*00            [12] 8237 	mov	a,_bp
      002DDA 24 11            [12] 8238 	add	a,#0x11
      002DDC F8               [12] 8239 	mov	r0,a
      002DDD 74 02            [12] 8240 	mov	a,#0x02
      002DDF 26               [12] 8241 	add	a,@r0
      002DE0 FD               [12] 8242 	mov	r5,a
      002DE1 E4               [12] 8243 	clr	a
      002DE2 08               [12] 8244 	inc	r0
      002DE3 36               [12] 8245 	addc	a,@r0
      002DE4 FE               [12] 8246 	mov	r6,a
      002DE5 08               [12] 8247 	inc	r0
      002DE6 86 07            [24] 8248 	mov	ar7,@r0
      002DE8 8D 82            [24] 8249 	mov	dpl,r5
      002DEA 8E 83            [24] 8250 	mov	dph,r6
      002DEC 8F F0            [24] 8251 	mov	b,r7
      002DEE 12r00r00         [24] 8252 	lcall	__gptrget
      002DF1 FD               [12] 8253 	mov	r5,a
      002DF2 A3               [24] 8254 	inc	dptr
      002DF3 12r00r00         [24] 8255 	lcall	__gptrget
      002DF6 FE               [12] 8256 	mov	r6,a
      002DF7 A3               [24] 8257 	inc	dptr
      002DF8 12r00r00         [24] 8258 	lcall	__gptrget
      002DFB FF               [12] 8259 	mov	r7,a
      002DFC A3               [24] 8260 	inc	dptr
      002DFD 12r00r00         [24] 8261 	lcall	__gptrget
      002E00 FC               [12] 8262 	mov	r4,a
                                   8263 ;	calc.c:64: printf("% 11ld\t", d);
      002E01 C0 07            [24] 8264 	push	ar7
      002E03 C0 06            [24] 8265 	push	ar6
      002E05 C0 05            [24] 8266 	push	ar5
      002E07 C0 04            [24] 8267 	push	ar4
      002E09 C0 05            [24] 8268 	push	ar5
      002E0B C0 06            [24] 8269 	push	ar6
      002E0D C0 07            [24] 8270 	push	ar7
      002E0F C0 04            [24] 8271 	push	ar4
      002E11 74r00            [12] 8272 	mov	a,#___str_0
      002E13 C0 E0            [24] 8273 	push	acc
      002E15 74s00            [12] 8274 	mov	a,#(___str_0 >> 8)
      002E17 C0 E0            [24] 8275 	push	acc
      002E19 74 80            [12] 8276 	mov	a,#0x80
      002E1B C0 E0            [24] 8277 	push	acc
      002E1D 12r00r00         [24] 8278 	lcall	_printf
      002E20 E5 81            [12] 8279 	mov	a,sp
      002E22 24 F9            [12] 8280 	add	a,#0xf9
      002E24 F5 81            [12] 8281 	mov	sp,a
      002E26 D0 04            [24] 8282 	pop	ar4
      002E28 D0 05            [24] 8283 	pop	ar5
      002E2A D0 06            [24] 8284 	pop	ar6
      002E2C D0 07            [24] 8285 	pop	ar7
                                   8286 ;	calc.c:65: printf("%08lx\t", d);
      002E2E C0 07            [24] 8287 	push	ar7
      002E30 C0 06            [24] 8288 	push	ar6
      002E32 C0 05            [24] 8289 	push	ar5
      002E34 C0 04            [24] 8290 	push	ar4
      002E36 C0 05            [24] 8291 	push	ar5
      002E38 C0 06            [24] 8292 	push	ar6
      002E3A C0 07            [24] 8293 	push	ar7
      002E3C C0 04            [24] 8294 	push	ar4
      002E3E 74r08            [12] 8295 	mov	a,#___str_1
      002E40 C0 E0            [24] 8296 	push	acc
      002E42 74s00            [12] 8297 	mov	a,#(___str_1 >> 8)
      002E44 C0 E0            [24] 8298 	push	acc
      002E46 74 80            [12] 8299 	mov	a,#0x80
      002E48 C0 E0            [24] 8300 	push	acc
      002E4A 12r00r00         [24] 8301 	lcall	_printf
      002E4D E5 81            [12] 8302 	mov	a,sp
      002E4F 24 F9            [12] 8303 	add	a,#0xf9
      002E51 F5 81            [12] 8304 	mov	sp,a
      002E53 D0 04            [24] 8305 	pop	ar4
      002E55 D0 05            [24] 8306 	pop	ar5
      002E57 D0 06            [24] 8307 	pop	ar6
      002E59 D0 07            [24] 8308 	pop	ar7
                                   8309 ;	calc.c:66: printbin(d);
      002E5B E5*00            [12] 8310 	mov	a,_bp
      002E5D 24 16            [12] 8311 	add	a,#0x16
      002E5F F8               [12] 8312 	mov	r0,a
      002E60 A6 05            [24] 8313 	mov	@r0,ar5
      002E62 08               [12] 8314 	inc	r0
      002E63 A6 06            [24] 8315 	mov	@r0,ar6
      002E65 08               [12] 8316 	inc	r0
      002E66 A6 07            [24] 8317 	mov	@r0,ar7
      002E68 08               [12] 8318 	inc	r0
      002E69 A6 04            [24] 8319 	mov	@r0,ar4
                                   8320 ;	calc.c:57: for (mask = 0x80000000lu; mask; mask >>= 1)
      002E6B E5*00            [12] 8321 	mov	a,_bp
      002E6D 24 1A            [12] 8322 	add	a,#0x1a
      002E6F F8               [12] 8323 	mov	r0,a
      002E70 E4               [12] 8324 	clr	a
      002E71 F6               [12] 8325 	mov	@r0,a
      002E72 08               [12] 8326 	inc	r0
      002E73 F6               [12] 8327 	mov	@r0,a
      002E74 08               [12] 8328 	inc	r0
      002E75 F6               [12] 8329 	mov	@r0,a
      002E76 08               [12] 8330 	inc	r0
      002E77 76 80            [12] 8331 	mov	@r0,#0x80
      002E79                       8332 00141$:
                                   8333 ;	calc.c:58: (void)putchar((d & mask) ? (int)'1' : (int)'0');
      002E79 E5*00            [12] 8334 	mov	a,_bp
      002E7B 24 16            [12] 8335 	add	a,#0x16
      002E7D F8               [12] 8336 	mov	r0,a
      002E7E 86 04            [24] 8337 	mov	ar4,@r0
      002E80 08               [12] 8338 	inc	r0
      002E81 86 05            [24] 8339 	mov	ar5,@r0
      002E83 08               [12] 8340 	inc	r0
      002E84 86 06            [24] 8341 	mov	ar6,@r0
      002E86 08               [12] 8342 	inc	r0
      002E87 86 07            [24] 8343 	mov	ar7,@r0
      002E89 E5*00            [12] 8344 	mov	a,_bp
      002E8B 24 1A            [12] 8345 	add	a,#0x1a
      002E8D F8               [12] 8346 	mov	r0,a
      002E8E E6               [12] 8347 	mov	a,@r0
      002E8F 52 04            [12] 8348 	anl	ar4,a
      002E91 08               [12] 8349 	inc	r0
      002E92 E6               [12] 8350 	mov	a,@r0
      002E93 52 05            [12] 8351 	anl	ar5,a
      002E95 08               [12] 8352 	inc	r0
      002E96 E6               [12] 8353 	mov	a,@r0
      002E97 52 06            [12] 8354 	anl	ar6,a
      002E99 08               [12] 8355 	inc	r0
      002E9A E6               [12] 8356 	mov	a,@r0
      002E9B 52 07            [12] 8357 	anl	ar7,a
      002E9D EC               [12] 8358 	mov	a,r4
      002E9E 4D               [12] 8359 	orl	a,r5
      002E9F 4E               [12] 8360 	orl	a,r6
      002EA0 4F               [12] 8361 	orl	a,r7
      002EA1 60 06            [24] 8362 	jz	00168$
      002EA3 7E 31            [12] 8363 	mov	r6,#0x31
      002EA5 7F 00            [12] 8364 	mov	r7,#0x00
      002EA7 80 04            [24] 8365 	sjmp	00169$
      002EA9                       8366 00168$:
      002EA9 7E 30            [12] 8367 	mov	r6,#0x30
      002EAB 7F 00            [12] 8368 	mov	r7,#0x00
      002EAD                       8369 00169$:
      002EAD 8E 82            [24] 8370 	mov	dpl,r6
      002EAF 8F 83            [24] 8371 	mov	dph,r7
      002EB1 12r00r00         [24] 8372 	lcall	_putchar
                                   8373 ;	calc.c:57: for (mask = 0x80000000lu; mask; mask >>= 1)
      002EB4 E5*00            [12] 8374 	mov	a,_bp
      002EB6 24 1A            [12] 8375 	add	a,#0x1a
      002EB8 F8               [12] 8376 	mov	r0,a
      002EB9 08               [12] 8377 	inc	r0
      002EBA 08               [12] 8378 	inc	r0
      002EBB 08               [12] 8379 	inc	r0
      002EBC E6               [12] 8380 	mov	a,@r0
      002EBD C3               [12] 8381 	clr	c
      002EBE 13               [12] 8382 	rrc	a
      002EBF F6               [12] 8383 	mov	@r0,a
      002EC0 18               [12] 8384 	dec	r0
      002EC1 E6               [12] 8385 	mov	a,@r0
      002EC2 13               [12] 8386 	rrc	a
      002EC3 F6               [12] 8387 	mov	@r0,a
      002EC4 18               [12] 8388 	dec	r0
      002EC5 E6               [12] 8389 	mov	a,@r0
      002EC6 13               [12] 8390 	rrc	a
      002EC7 F6               [12] 8391 	mov	@r0,a
      002EC8 18               [12] 8392 	dec	r0
      002EC9 E6               [12] 8393 	mov	a,@r0
      002ECA 13               [12] 8394 	rrc	a
      002ECB F6               [12] 8395 	mov	@r0,a
      002ECC E5*00            [12] 8396 	mov	a,_bp
      002ECE 24 1A            [12] 8397 	add	a,#0x1a
      002ED0 F8               [12] 8398 	mov	r0,a
      002ED1 E6               [12] 8399 	mov	a,@r0
      002ED2 08               [12] 8400 	inc	r0
      002ED3 46               [12] 8401 	orl	a,@r0
      002ED4 08               [12] 8402 	inc	r0
      002ED5 46               [12] 8403 	orl	a,@r0
      002ED6 08               [12] 8404 	inc	r0
      002ED7 46               [12] 8405 	orl	a,@r0
      002ED8 70 9F            [24] 8406 	jnz	00141$
                                   8407 ;	calc.c:402: if (ctx->acc_valid) printall(ctx->acc);
      002EDA                       8408 00102$:
                                   8409 ;	calc.c:404: n = stack_peek2(ctx->ps, vals);
      002EDA E5*00            [12] 8410 	mov	a,_bp
      002EDC 24 09            [12] 8411 	add	a,#0x09
      002EDE F9               [12] 8412 	mov	r1,a
      002EDF FD               [12] 8413 	mov	r5,a
      002EE0 7E 00            [12] 8414 	mov	r6,#0x00
      002EE2 7F 40            [12] 8415 	mov	r7,#0x40
      002EE4 E5*00            [12] 8416 	mov	a,_bp
      002EE6 24 04            [12] 8417 	add	a,#0x04
      002EE8 F8               [12] 8418 	mov	r0,a
      002EE9 86 82            [24] 8419 	mov	dpl,@r0
      002EEB 08               [12] 8420 	inc	r0
      002EEC 86 83            [24] 8421 	mov	dph,@r0
      002EEE 08               [12] 8422 	inc	r0
      002EEF 86 F0            [24] 8423 	mov	b,@r0
      002EF1 12r00r00         [24] 8424 	lcall	__gptrget
      002EF4 FA               [12] 8425 	mov	r2,a
      002EF5 A3               [24] 8426 	inc	dptr
      002EF6 12r00r00         [24] 8427 	lcall	__gptrget
      002EF9 FB               [12] 8428 	mov	r3,a
      002EFA A3               [24] 8429 	inc	dptr
      002EFB 12r00r00         [24] 8430 	lcall	__gptrget
      002EFE FC               [12] 8431 	mov	r4,a
      002EFF C0 01            [24] 8432 	push	ar1
      002F01 C0 05            [24] 8433 	push	ar5
      002F03 C0 06            [24] 8434 	push	ar6
      002F05 C0 07            [24] 8435 	push	ar7
      002F07 8A 82            [24] 8436 	mov	dpl,r2
      002F09 8B 83            [24] 8437 	mov	dph,r3
      002F0B 8C F0            [24] 8438 	mov	b,r4
      002F0D 12r00r00         [24] 8439 	lcall	_stack_peek2
      002F10 AE 82            [24] 8440 	mov	r6,dpl
      002F12 AF 83            [24] 8441 	mov	r7,dph
      002F14 15 81            [12] 8442 	dec	sp
      002F16 15 81            [12] 8443 	dec	sp
      002F18 15 81            [12] 8444 	dec	sp
      002F1A D0 01            [24] 8445 	pop	ar1
                                   8446 ;	calc.c:405: printstr("\r\nPSTOP1\t");
      002F1C 7BrE2            [12] 8447 	mov	r3,#___str_16
      002F1E 7Cs00            [12] 8448 	mov	r4,#(___str_16 >> 8)
      002F20 7D 80            [12] 8449 	mov	r5,#0x80
                                   8450 ;	calc.c:51: return;
      002F22                       8451 00144$:
                                   8452 ;	calc.c:49: for (; *s; s++) putchar(*s);
      002F22 8B 82            [24] 8453 	mov	dpl,r3
      002F24 8C 83            [24] 8454 	mov	dph,r4
      002F26 8D F0            [24] 8455 	mov	b,r5
      002F28 12r00r00         [24] 8456 	lcall	__gptrget
      002F2B FA               [12] 8457 	mov	r2,a
      002F2C 60 18            [24] 8458 	jz	00117$
      002F2E C0 06            [24] 8459 	push	ar6
      002F30 C0 07            [24] 8460 	push	ar7
      002F32 7F 00            [12] 8461 	mov	r7,#0x00
      002F34 8A 82            [24] 8462 	mov	dpl,r2
      002F36 8F 83            [24] 8463 	mov	dph,r7
      002F38 12r00r00         [24] 8464 	lcall	_putchar
      002F3B 0B               [12] 8465 	inc	r3
      002F3C BB 00 01         [24] 8466 	cjne	r3,#0x00,00325$
      002F3F 0C               [12] 8467 	inc	r4
      002F40                       8468 00325$:
      002F40 D0 07            [24] 8469 	pop	ar7
      002F42 D0 06            [24] 8470 	pop	ar6
                                   8471 ;	calc.c:405: printstr("\r\nPSTOP1\t");
      002F44 80 DC            [24] 8472 	sjmp	00144$
      002F46                       8473 00117$:
                                   8474 ;	calc.c:406: if (n > 0) printall(vals[1]);
      002F46 C3               [12] 8475 	clr	c
      002F47 E4               [12] 8476 	clr	a
      002F48 9E               [12] 8477 	subb	a,r6
      002F49 74 80            [12] 8478 	mov	a,#(0x00 ^ 0x80)
      002F4B 8F F0            [24] 8479 	mov	b,r7
      002F4D 63 F0 80         [24] 8480 	xrl	b,#0x80
      002F50 95 F0            [12] 8481 	subb	a,b
      002F52 40 03            [24] 8482 	jc	00326$
      002F54 02r30r57         [24] 8483 	ljmp	00104$
      002F57                       8484 00326$:
      002F57 74 04            [12] 8485 	mov	a,#0x04
      002F59 29               [12] 8486 	add	a,r1
      002F5A F8               [12] 8487 	mov	r0,a
      002F5B 86 02            [24] 8488 	mov	ar2,@r0
      002F5D 08               [12] 8489 	inc	r0
      002F5E 86 03            [24] 8490 	mov	ar3,@r0
      002F60 08               [12] 8491 	inc	r0
      002F61 86 04            [24] 8492 	mov	ar4,@r0
      002F63 08               [12] 8493 	inc	r0
      002F64 86 05            [24] 8494 	mov	ar5,@r0
                                   8495 ;	calc.c:64: printf("% 11ld\t", d);
      002F66 C0 07            [24] 8496 	push	ar7
      002F68 C0 06            [24] 8497 	push	ar6
      002F6A C0 05            [24] 8498 	push	ar5
      002F6C C0 04            [24] 8499 	push	ar4
      002F6E C0 03            [24] 8500 	push	ar3
      002F70 C0 02            [24] 8501 	push	ar2
      002F72 C0 01            [24] 8502 	push	ar1
      002F74 C0 02            [24] 8503 	push	ar2
      002F76 C0 03            [24] 8504 	push	ar3
      002F78 C0 04            [24] 8505 	push	ar4
      002F7A C0 05            [24] 8506 	push	ar5
      002F7C 74r00            [12] 8507 	mov	a,#___str_0
      002F7E C0 E0            [24] 8508 	push	acc
      002F80 74s00            [12] 8509 	mov	a,#(___str_0 >> 8)
      002F82 C0 E0            [24] 8510 	push	acc
      002F84 74 80            [12] 8511 	mov	a,#0x80
      002F86 C0 E0            [24] 8512 	push	acc
      002F88 12r00r00         [24] 8513 	lcall	_printf
      002F8B E5 81            [12] 8514 	mov	a,sp
      002F8D 24 F9            [12] 8515 	add	a,#0xf9
      002F8F F5 81            [12] 8516 	mov	sp,a
      002F91 D0 01            [24] 8517 	pop	ar1
      002F93 D0 02            [24] 8518 	pop	ar2
      002F95 D0 03            [24] 8519 	pop	ar3
      002F97 D0 04            [24] 8520 	pop	ar4
      002F99 D0 05            [24] 8521 	pop	ar5
                                   8522 ;	calc.c:65: printf("%08lx\t", d);
      002F9B C0 05            [24] 8523 	push	ar5
      002F9D C0 04            [24] 8524 	push	ar4
      002F9F C0 03            [24] 8525 	push	ar3
      002FA1 C0 02            [24] 8526 	push	ar2
      002FA3 C0 01            [24] 8527 	push	ar1
      002FA5 C0 02            [24] 8528 	push	ar2
      002FA7 C0 03            [24] 8529 	push	ar3
      002FA9 C0 04            [24] 8530 	push	ar4
      002FAB C0 05            [24] 8531 	push	ar5
      002FAD 74r08            [12] 8532 	mov	a,#___str_1
      002FAF C0 E0            [24] 8533 	push	acc
      002FB1 74s00            [12] 8534 	mov	a,#(___str_1 >> 8)
      002FB3 C0 E0            [24] 8535 	push	acc
      002FB5 74 80            [12] 8536 	mov	a,#0x80
      002FB7 C0 E0            [24] 8537 	push	acc
      002FB9 12r00r00         [24] 8538 	lcall	_printf
      002FBC E5 81            [12] 8539 	mov	a,sp
      002FBE 24 F9            [12] 8540 	add	a,#0xf9
      002FC0 F5 81            [12] 8541 	mov	sp,a
      002FC2 D0 01            [24] 8542 	pop	ar1
      002FC4 D0 02            [24] 8543 	pop	ar2
      002FC6 D0 03            [24] 8544 	pop	ar3
      002FC8 D0 04            [24] 8545 	pop	ar4
      002FCA D0 05            [24] 8546 	pop	ar5
      002FCC D0 06            [24] 8547 	pop	ar6
      002FCE D0 07            [24] 8548 	pop	ar7
                                   8549 ;	calc.c:66: printbin(d);
      002FD0 E5*00            [12] 8550 	mov	a,_bp
      002FD2 24 16            [12] 8551 	add	a,#0x16
      002FD4 F8               [12] 8552 	mov	r0,a
      002FD5 A6 02            [24] 8553 	mov	@r0,ar2
      002FD7 08               [12] 8554 	inc	r0
      002FD8 A6 03            [24] 8555 	mov	@r0,ar3
      002FDA 08               [12] 8556 	inc	r0
      002FDB A6 04            [24] 8557 	mov	@r0,ar4
      002FDD 08               [12] 8558 	inc	r0
      002FDE A6 05            [24] 8559 	mov	@r0,ar5
                                   8560 ;	calc.c:57: for (mask = 0x80000000lu; mask; mask >>= 1)
      002FE0 E5*00            [12] 8561 	mov	a,_bp
      002FE2 24 1A            [12] 8562 	add	a,#0x1a
      002FE4 F8               [12] 8563 	mov	r0,a
      002FE5 E4               [12] 8564 	clr	a
      002FE6 F6               [12] 8565 	mov	@r0,a
      002FE7 08               [12] 8566 	inc	r0
      002FE8 F6               [12] 8567 	mov	@r0,a
      002FE9 08               [12] 8568 	inc	r0
      002FEA F6               [12] 8569 	mov	@r0,a
      002FEB 08               [12] 8570 	inc	r0
      002FEC 76 80            [12] 8571 	mov	@r0,#0x80
      002FEE                       8572 00146$:
                                   8573 ;	calc.c:58: (void)putchar((d & mask) ? (int)'1' : (int)'0');
      002FEE C0 06            [24] 8574 	push	ar6
      002FF0 C0 07            [24] 8575 	push	ar7
      002FF2 E5*00            [12] 8576 	mov	a,_bp
      002FF4 24 16            [12] 8577 	add	a,#0x16
      002FF6 F8               [12] 8578 	mov	r0,a
      002FF7 86 04            [24] 8579 	mov	ar4,@r0
      002FF9 08               [12] 8580 	inc	r0
      002FFA 86 05            [24] 8581 	mov	ar5,@r0
      002FFC 08               [12] 8582 	inc	r0
      002FFD 86 06            [24] 8583 	mov	ar6,@r0
      002FFF 08               [12] 8584 	inc	r0
      003000 86 07            [24] 8585 	mov	ar7,@r0
      003002 E5*00            [12] 8586 	mov	a,_bp
      003004 24 1A            [12] 8587 	add	a,#0x1a
      003006 F8               [12] 8588 	mov	r0,a
      003007 E6               [12] 8589 	mov	a,@r0
      003008 52 04            [12] 8590 	anl	ar4,a
      00300A 08               [12] 8591 	inc	r0
      00300B E6               [12] 8592 	mov	a,@r0
      00300C 52 05            [12] 8593 	anl	ar5,a
      00300E 08               [12] 8594 	inc	r0
      00300F E6               [12] 8595 	mov	a,@r0
      003010 52 06            [12] 8596 	anl	ar6,a
      003012 08               [12] 8597 	inc	r0
      003013 E6               [12] 8598 	mov	a,@r0
      003014 52 07            [12] 8599 	anl	ar7,a
      003016 EC               [12] 8600 	mov	a,r4
      003017 4D               [12] 8601 	orl	a,r5
      003018 4E               [12] 8602 	orl	a,r6
      003019 4F               [12] 8603 	orl	a,r7
      00301A D0 07            [24] 8604 	pop	ar7
      00301C D0 06            [24] 8605 	pop	ar6
      00301E 60 06            [24] 8606 	jz	00170$
      003020 7C 31            [12] 8607 	mov	r4,#0x31
      003022 7D 00            [12] 8608 	mov	r5,#0x00
      003024 80 04            [24] 8609 	sjmp	00171$
      003026                       8610 00170$:
      003026 7C 30            [12] 8611 	mov	r4,#0x30
      003028 7D 00            [12] 8612 	mov	r5,#0x00
      00302A                       8613 00171$:
      00302A 8C 82            [24] 8614 	mov	dpl,r4
      00302C 8D 83            [24] 8615 	mov	dph,r5
      00302E 12r00r00         [24] 8616 	lcall	_putchar
                                   8617 ;	calc.c:57: for (mask = 0x80000000lu; mask; mask >>= 1)
      003031 E5*00            [12] 8618 	mov	a,_bp
      003033 24 1A            [12] 8619 	add	a,#0x1a
      003035 F8               [12] 8620 	mov	r0,a
      003036 08               [12] 8621 	inc	r0
      003037 08               [12] 8622 	inc	r0
      003038 08               [12] 8623 	inc	r0
      003039 E6               [12] 8624 	mov	a,@r0
      00303A C3               [12] 8625 	clr	c
      00303B 13               [12] 8626 	rrc	a
      00303C F6               [12] 8627 	mov	@r0,a
      00303D 18               [12] 8628 	dec	r0
      00303E E6               [12] 8629 	mov	a,@r0
      00303F 13               [12] 8630 	rrc	a
      003040 F6               [12] 8631 	mov	@r0,a
      003041 18               [12] 8632 	dec	r0
      003042 E6               [12] 8633 	mov	a,@r0
      003043 13               [12] 8634 	rrc	a
      003044 F6               [12] 8635 	mov	@r0,a
      003045 18               [12] 8636 	dec	r0
      003046 E6               [12] 8637 	mov	a,@r0
      003047 13               [12] 8638 	rrc	a
      003048 F6               [12] 8639 	mov	@r0,a
      003049 E5*00            [12] 8640 	mov	a,_bp
      00304B 24 1A            [12] 8641 	add	a,#0x1a
      00304D F8               [12] 8642 	mov	r0,a
      00304E E6               [12] 8643 	mov	a,@r0
      00304F 08               [12] 8644 	inc	r0
      003050 46               [12] 8645 	orl	a,@r0
      003051 08               [12] 8646 	inc	r0
      003052 46               [12] 8647 	orl	a,@r0
      003053 08               [12] 8648 	inc	r0
      003054 46               [12] 8649 	orl	a,@r0
      003055 70 97            [24] 8650 	jnz	00146$
                                   8651 ;	calc.c:406: if (n > 0) printall(vals[1]);
      003057                       8652 00104$:
                                   8653 ;	calc.c:407: printstr("\r\nPSTOP0\t");
      003057 7BrEC            [12] 8654 	mov	r3,#___str_17
      003059 7Cs00            [12] 8655 	mov	r4,#(___str_17 >> 8)
      00305B 7D 80            [12] 8656 	mov	r5,#0x80
                                   8657 ;	calc.c:51: return;
      00305D                       8658 00149$:
                                   8659 ;	calc.c:49: for (; *s; s++) putchar(*s);
      00305D 8B 82            [24] 8660 	mov	dpl,r3
      00305F 8C 83            [24] 8661 	mov	dph,r4
      003061 8D F0            [24] 8662 	mov	b,r5
      003063 12r00r00         [24] 8663 	lcall	__gptrget
      003066 FA               [12] 8664 	mov	r2,a
      003067 60 18            [24] 8665 	jz	00122$
      003069 C0 06            [24] 8666 	push	ar6
      00306B C0 07            [24] 8667 	push	ar7
      00306D 7F 00            [12] 8668 	mov	r7,#0x00
      00306F 8A 82            [24] 8669 	mov	dpl,r2
      003071 8F 83            [24] 8670 	mov	dph,r7
      003073 12r00r00         [24] 8671 	lcall	_putchar
      003076 0B               [12] 8672 	inc	r3
      003077 BB 00 01         [24] 8673 	cjne	r3,#0x00,00330$
      00307A 0C               [12] 8674 	inc	r4
      00307B                       8675 00330$:
      00307B D0 07            [24] 8676 	pop	ar7
      00307D D0 06            [24] 8677 	pop	ar6
                                   8678 ;	calc.c:407: printstr("\r\nPSTOP0\t");
      00307F 80 DC            [24] 8679 	sjmp	00149$
      003081                       8680 00122$:
                                   8681 ;	calc.c:408: if (n > 1) printall(vals[0]);
      003081 C3               [12] 8682 	clr	c
      003082 74 01            [12] 8683 	mov	a,#0x01
      003084 9E               [12] 8684 	subb	a,r6
      003085 74 80            [12] 8685 	mov	a,#(0x00 ^ 0x80)
      003087 8F F0            [24] 8686 	mov	b,r7
      003089 63 F0 80         [24] 8687 	xrl	b,#0x80
      00308C 95 F0            [12] 8688 	subb	a,b
      00308E 40 03            [24] 8689 	jc	00331$
      003090 02r31r86         [24] 8690 	ljmp	00106$
      003093                       8691 00331$:
      003093 87 04            [24] 8692 	mov	ar4,@r1
      003095 09               [12] 8693 	inc	r1
      003096 87 05            [24] 8694 	mov	ar5,@r1
      003098 09               [12] 8695 	inc	r1
      003099 87 06            [24] 8696 	mov	ar6,@r1
      00309B 09               [12] 8697 	inc	r1
      00309C 87 07            [24] 8698 	mov	ar7,@r1
      00309E 19               [12] 8699 	dec	r1
      00309F 19               [12] 8700 	dec	r1
      0030A0 19               [12] 8701 	dec	r1
                                   8702 ;	calc.c:64: printf("% 11ld\t", d);
      0030A1 C0 07            [24] 8703 	push	ar7
      0030A3 C0 06            [24] 8704 	push	ar6
      0030A5 C0 05            [24] 8705 	push	ar5
      0030A7 C0 04            [24] 8706 	push	ar4
      0030A9 C0 01            [24] 8707 	push	ar1
      0030AB C0 04            [24] 8708 	push	ar4
      0030AD C0 05            [24] 8709 	push	ar5
      0030AF C0 06            [24] 8710 	push	ar6
      0030B1 C0 07            [24] 8711 	push	ar7
      0030B3 74r00            [12] 8712 	mov	a,#___str_0
      0030B5 C0 E0            [24] 8713 	push	acc
      0030B7 74s00            [12] 8714 	mov	a,#(___str_0 >> 8)
      0030B9 C0 E0            [24] 8715 	push	acc
      0030BB 74 80            [12] 8716 	mov	a,#0x80
      0030BD C0 E0            [24] 8717 	push	acc
      0030BF 12r00r00         [24] 8718 	lcall	_printf
      0030C2 E5 81            [12] 8719 	mov	a,sp
      0030C4 24 F9            [12] 8720 	add	a,#0xf9
      0030C6 F5 81            [12] 8721 	mov	sp,a
      0030C8 D0 01            [24] 8722 	pop	ar1
      0030CA D0 04            [24] 8723 	pop	ar4
      0030CC D0 05            [24] 8724 	pop	ar5
      0030CE D0 06            [24] 8725 	pop	ar6
      0030D0 D0 07            [24] 8726 	pop	ar7
                                   8727 ;	calc.c:65: printf("%08lx\t", d);
      0030D2 C0 07            [24] 8728 	push	ar7
      0030D4 C0 06            [24] 8729 	push	ar6
      0030D6 C0 05            [24] 8730 	push	ar5
      0030D8 C0 04            [24] 8731 	push	ar4
      0030DA C0 01            [24] 8732 	push	ar1
      0030DC C0 04            [24] 8733 	push	ar4
      0030DE C0 05            [24] 8734 	push	ar5
      0030E0 C0 06            [24] 8735 	push	ar6
      0030E2 C0 07            [24] 8736 	push	ar7
      0030E4 74r08            [12] 8737 	mov	a,#___str_1
      0030E6 C0 E0            [24] 8738 	push	acc
      0030E8 74s00            [12] 8739 	mov	a,#(___str_1 >> 8)
      0030EA C0 E0            [24] 8740 	push	acc
      0030EC 74 80            [12] 8741 	mov	a,#0x80
      0030EE C0 E0            [24] 8742 	push	acc
      0030F0 12r00r00         [24] 8743 	lcall	_printf
      0030F3 E5 81            [12] 8744 	mov	a,sp
      0030F5 24 F9            [12] 8745 	add	a,#0xf9
      0030F7 F5 81            [12] 8746 	mov	sp,a
      0030F9 D0 01            [24] 8747 	pop	ar1
      0030FB D0 04            [24] 8748 	pop	ar4
      0030FD D0 05            [24] 8749 	pop	ar5
      0030FF D0 06            [24] 8750 	pop	ar6
      003101 D0 07            [24] 8751 	pop	ar7
                                   8752 ;	calc.c:66: printbin(d);
      003103 E5*00            [12] 8753 	mov	a,_bp
      003105 24 16            [12] 8754 	add	a,#0x16
      003107 F8               [12] 8755 	mov	r0,a
      003108 A6 04            [24] 8756 	mov	@r0,ar4
      00310A 08               [12] 8757 	inc	r0
      00310B A6 05            [24] 8758 	mov	@r0,ar5
      00310D 08               [12] 8759 	inc	r0
      00310E A6 06            [24] 8760 	mov	@r0,ar6
      003110 08               [12] 8761 	inc	r0
      003111 A6 07            [24] 8762 	mov	@r0,ar7
                                   8763 ;	calc.c:57: for (mask = 0x80000000lu; mask; mask >>= 1)
      003113 E5*00            [12] 8764 	mov	a,_bp
      003115 24 1A            [12] 8765 	add	a,#0x1a
      003117 F8               [12] 8766 	mov	r0,a
      003118 E4               [12] 8767 	clr	a
      003119 F6               [12] 8768 	mov	@r0,a
      00311A 08               [12] 8769 	inc	r0
      00311B F6               [12] 8770 	mov	@r0,a
      00311C 08               [12] 8771 	inc	r0
      00311D F6               [12] 8772 	mov	@r0,a
      00311E 08               [12] 8773 	inc	r0
      00311F 76 80            [12] 8774 	mov	@r0,#0x80
      003121                       8775 00151$:
                                   8776 ;	calc.c:58: (void)putchar((d & mask) ? (int)'1' : (int)'0');
      003121 C0 01            [24] 8777 	push	ar1
      003123 E5*00            [12] 8778 	mov	a,_bp
      003125 24 16            [12] 8779 	add	a,#0x16
      003127 F8               [12] 8780 	mov	r0,a
      003128 86 04            [24] 8781 	mov	ar4,@r0
      00312A 08               [12] 8782 	inc	r0
      00312B 86 05            [24] 8783 	mov	ar5,@r0
      00312D 08               [12] 8784 	inc	r0
      00312E 86 06            [24] 8785 	mov	ar6,@r0
      003130 08               [12] 8786 	inc	r0
      003131 86 07            [24] 8787 	mov	ar7,@r0
      003133 E5*00            [12] 8788 	mov	a,_bp
      003135 24 1A            [12] 8789 	add	a,#0x1a
      003137 F8               [12] 8790 	mov	r0,a
      003138 E6               [12] 8791 	mov	a,@r0
      003139 52 04            [12] 8792 	anl	ar4,a
      00313B 08               [12] 8793 	inc	r0
      00313C E6               [12] 8794 	mov	a,@r0
      00313D 52 05            [12] 8795 	anl	ar5,a
      00313F 08               [12] 8796 	inc	r0
      003140 E6               [12] 8797 	mov	a,@r0
      003141 52 06            [12] 8798 	anl	ar6,a
      003143 08               [12] 8799 	inc	r0
      003144 E6               [12] 8800 	mov	a,@r0
      003145 52 07            [12] 8801 	anl	ar7,a
      003147 D0 01            [24] 8802 	pop	ar1
      003149 EC               [12] 8803 	mov	a,r4
      00314A 4D               [12] 8804 	orl	a,r5
      00314B 4E               [12] 8805 	orl	a,r6
      00314C 4F               [12] 8806 	orl	a,r7
      00314D 60 06            [24] 8807 	jz	00172$
      00314F 7E 31            [12] 8808 	mov	r6,#0x31
      003151 7F 00            [12] 8809 	mov	r7,#0x00
      003153 80 04            [24] 8810 	sjmp	00173$
      003155                       8811 00172$:
      003155 7E 30            [12] 8812 	mov	r6,#0x30
      003157 7F 00            [12] 8813 	mov	r7,#0x00
      003159                       8814 00173$:
      003159 8E 82            [24] 8815 	mov	dpl,r6
      00315B 8F 83            [24] 8816 	mov	dph,r7
      00315D 12r00r00         [24] 8817 	lcall	_putchar
                                   8818 ;	calc.c:57: for (mask = 0x80000000lu; mask; mask >>= 1)
      003160 E5*00            [12] 8819 	mov	a,_bp
      003162 24 1A            [12] 8820 	add	a,#0x1a
      003164 F8               [12] 8821 	mov	r0,a
      003165 08               [12] 8822 	inc	r0
      003166 08               [12] 8823 	inc	r0
      003167 08               [12] 8824 	inc	r0
      003168 E6               [12] 8825 	mov	a,@r0
      003169 C3               [12] 8826 	clr	c
      00316A 13               [12] 8827 	rrc	a
      00316B F6               [12] 8828 	mov	@r0,a
      00316C 18               [12] 8829 	dec	r0
      00316D E6               [12] 8830 	mov	a,@r0
      00316E 13               [12] 8831 	rrc	a
      00316F F6               [12] 8832 	mov	@r0,a
      003170 18               [12] 8833 	dec	r0
      003171 E6               [12] 8834 	mov	a,@r0
      003172 13               [12] 8835 	rrc	a
      003173 F6               [12] 8836 	mov	@r0,a
      003174 18               [12] 8837 	dec	r0
      003175 E6               [12] 8838 	mov	a,@r0
      003176 13               [12] 8839 	rrc	a
      003177 F6               [12] 8840 	mov	@r0,a
      003178 E5*00            [12] 8841 	mov	a,_bp
      00317A 24 1A            [12] 8842 	add	a,#0x1a
      00317C F8               [12] 8843 	mov	r0,a
      00317D E6               [12] 8844 	mov	a,@r0
      00317E 08               [12] 8845 	inc	r0
      00317F 46               [12] 8846 	orl	a,@r0
      003180 08               [12] 8847 	inc	r0
      003181 46               [12] 8848 	orl	a,@r0
      003182 08               [12] 8849 	inc	r0
      003183 46               [12] 8850 	orl	a,@r0
      003184 70 9B            [24] 8851 	jnz	00151$
                                   8852 ;	calc.c:408: if (n > 1) printall(vals[0]);
      003186                       8853 00106$:
                                   8854 ;	calc.c:410: n = stack_peek2(ctx->ss, vals);
      003186 89 07            [24] 8855 	mov	ar7,r1
      003188 7E 00            [12] 8856 	mov	r6,#0x00
      00318A 7D 40            [12] 8857 	mov	r5,#0x40
      00318C A8*00            [24] 8858 	mov	r0,_bp
      00318E 08               [12] 8859 	inc	r0
      00318F 86 82            [24] 8860 	mov	dpl,@r0
      003191 08               [12] 8861 	inc	r0
      003192 86 83            [24] 8862 	mov	dph,@r0
      003194 08               [12] 8863 	inc	r0
      003195 86 F0            [24] 8864 	mov	b,@r0
      003197 12r00r00         [24] 8865 	lcall	__gptrget
      00319A FA               [12] 8866 	mov	r2,a
      00319B A3               [24] 8867 	inc	dptr
      00319C 12r00r00         [24] 8868 	lcall	__gptrget
      00319F FB               [12] 8869 	mov	r3,a
      0031A0 A3               [24] 8870 	inc	dptr
      0031A1 12r00r00         [24] 8871 	lcall	__gptrget
      0031A4 FC               [12] 8872 	mov	r4,a
      0031A5 C0 01            [24] 8873 	push	ar1
      0031A7 C0 07            [24] 8874 	push	ar7
      0031A9 C0 06            [24] 8875 	push	ar6
      0031AB C0 05            [24] 8876 	push	ar5
      0031AD 8A 82            [24] 8877 	mov	dpl,r2
      0031AF 8B 83            [24] 8878 	mov	dph,r3
      0031B1 8C F0            [24] 8879 	mov	b,r4
      0031B3 12r00r00         [24] 8880 	lcall	_stack_peek2
      0031B6 AE 82            [24] 8881 	mov	r6,dpl
      0031B8 AF 83            [24] 8882 	mov	r7,dph
      0031BA 15 81            [12] 8883 	dec	sp
      0031BC 15 81            [12] 8884 	dec	sp
      0031BE 15 81            [12] 8885 	dec	sp
      0031C0 D0 01            [24] 8886 	pop	ar1
      0031C2 E5*00            [12] 8887 	mov	a,_bp
      0031C4 24 14            [12] 8888 	add	a,#0x14
      0031C6 F8               [12] 8889 	mov	r0,a
      0031C7 A6 06            [24] 8890 	mov	@r0,ar6
      0031C9 08               [12] 8891 	inc	r0
      0031CA A6 07            [24] 8892 	mov	@r0,ar7
                                   8893 ;	calc.c:411: printstr("\r\nSSTOP1\t");
      0031CC 7BrF6            [12] 8894 	mov	r3,#___str_18
      0031CE 7Cs00            [12] 8895 	mov	r4,#(___str_18 >> 8)
      0031D0 7D 80            [12] 8896 	mov	r5,#0x80
                                   8897 ;	calc.c:51: return;
      0031D2                       8898 00154$:
                                   8899 ;	calc.c:49: for (; *s; s++) putchar(*s);
      0031D2 8B 82            [24] 8900 	mov	dpl,r3
      0031D4 8C 83            [24] 8901 	mov	dph,r4
      0031D6 8D F0            [24] 8902 	mov	b,r5
      0031D8 12r00r00         [24] 8903 	lcall	__gptrget
      0031DB FA               [12] 8904 	mov	r2,a
      0031DC 60 10            [24] 8905 	jz	00127$
      0031DE 7F 00            [12] 8906 	mov	r7,#0x00
      0031E0 8A 82            [24] 8907 	mov	dpl,r2
      0031E2 8F 83            [24] 8908 	mov	dph,r7
      0031E4 12r00r00         [24] 8909 	lcall	_putchar
      0031E7 0B               [12] 8910 	inc	r3
                                   8911 ;	calc.c:411: printstr("\r\nSSTOP1\t");
      0031E8 BB 00 E7         [24] 8912 	cjne	r3,#0x00,00154$
      0031EB 0C               [12] 8913 	inc	r4
      0031EC 80 E4            [24] 8914 	sjmp	00154$
      0031EE                       8915 00127$:
                                   8916 ;	calc.c:412: if (n > 0) printall(vals[1]);
      0031EE E5*00            [12] 8917 	mov	a,_bp
      0031F0 24 14            [12] 8918 	add	a,#0x14
      0031F2 F8               [12] 8919 	mov	r0,a
      0031F3 C3               [12] 8920 	clr	c
      0031F4 E4               [12] 8921 	clr	a
      0031F5 96               [12] 8922 	subb	a,@r0
      0031F6 74 80            [12] 8923 	mov	a,#(0x00 ^ 0x80)
      0031F8 08               [12] 8924 	inc	r0
      0031F9 86 F0            [24] 8925 	mov	b,@r0
      0031FB 63 F0 80         [24] 8926 	xrl	b,#0x80
      0031FE 95 F0            [12] 8927 	subb	a,b
      003200 40 03            [24] 8928 	jc	00336$
      003202 02r32rF9         [24] 8929 	ljmp	00108$
      003205                       8930 00336$:
      003205 74 04            [12] 8931 	mov	a,#0x04
      003207 29               [12] 8932 	add	a,r1
      003208 F8               [12] 8933 	mov	r0,a
      003209 86 02            [24] 8934 	mov	ar2,@r0
      00320B 08               [12] 8935 	inc	r0
      00320C 86 03            [24] 8936 	mov	ar3,@r0
      00320E 08               [12] 8937 	inc	r0
      00320F 86 04            [24] 8938 	mov	ar4,@r0
      003211 08               [12] 8939 	inc	r0
      003212 86 05            [24] 8940 	mov	ar5,@r0
                                   8941 ;	calc.c:64: printf("% 11ld\t", d);
      003214 C0 05            [24] 8942 	push	ar5
      003216 C0 04            [24] 8943 	push	ar4
      003218 C0 03            [24] 8944 	push	ar3
      00321A C0 02            [24] 8945 	push	ar2
      00321C C0 01            [24] 8946 	push	ar1
      00321E C0 02            [24] 8947 	push	ar2
      003220 C0 03            [24] 8948 	push	ar3
      003222 C0 04            [24] 8949 	push	ar4
      003224 C0 05            [24] 8950 	push	ar5
      003226 74r00            [12] 8951 	mov	a,#___str_0
      003228 C0 E0            [24] 8952 	push	acc
      00322A 74s00            [12] 8953 	mov	a,#(___str_0 >> 8)
      00322C C0 E0            [24] 8954 	push	acc
      00322E 74 80            [12] 8955 	mov	a,#0x80
      003230 C0 E0            [24] 8956 	push	acc
      003232 12r00r00         [24] 8957 	lcall	_printf
      003235 E5 81            [12] 8958 	mov	a,sp
      003237 24 F9            [12] 8959 	add	a,#0xf9
      003239 F5 81            [12] 8960 	mov	sp,a
      00323B D0 01            [24] 8961 	pop	ar1
      00323D D0 02            [24] 8962 	pop	ar2
      00323F D0 03            [24] 8963 	pop	ar3
      003241 D0 04            [24] 8964 	pop	ar4
      003243 D0 05            [24] 8965 	pop	ar5
                                   8966 ;	calc.c:65: printf("%08lx\t", d);
      003245 C0 05            [24] 8967 	push	ar5
      003247 C0 04            [24] 8968 	push	ar4
      003249 C0 03            [24] 8969 	push	ar3
      00324B C0 02            [24] 8970 	push	ar2
      00324D C0 01            [24] 8971 	push	ar1
      00324F C0 02            [24] 8972 	push	ar2
      003251 C0 03            [24] 8973 	push	ar3
      003253 C0 04            [24] 8974 	push	ar4
      003255 C0 05            [24] 8975 	push	ar5
      003257 74r08            [12] 8976 	mov	a,#___str_1
      003259 C0 E0            [24] 8977 	push	acc
      00325B 74s00            [12] 8978 	mov	a,#(___str_1 >> 8)
      00325D C0 E0            [24] 8979 	push	acc
      00325F 74 80            [12] 8980 	mov	a,#0x80
      003261 C0 E0            [24] 8981 	push	acc
      003263 12r00r00         [24] 8982 	lcall	_printf
      003266 E5 81            [12] 8983 	mov	a,sp
      003268 24 F9            [12] 8984 	add	a,#0xf9
      00326A F5 81            [12] 8985 	mov	sp,a
      00326C D0 01            [24] 8986 	pop	ar1
      00326E D0 02            [24] 8987 	pop	ar2
      003270 D0 03            [24] 8988 	pop	ar3
      003272 D0 04            [24] 8989 	pop	ar4
      003274 D0 05            [24] 8990 	pop	ar5
                                   8991 ;	calc.c:66: printbin(d);
      003276 E5*00            [12] 8992 	mov	a,_bp
      003278 24 16            [12] 8993 	add	a,#0x16
      00327A F8               [12] 8994 	mov	r0,a
      00327B A6 02            [24] 8995 	mov	@r0,ar2
      00327D 08               [12] 8996 	inc	r0
      00327E A6 03            [24] 8997 	mov	@r0,ar3
      003280 08               [12] 8998 	inc	r0
      003281 A6 04            [24] 8999 	mov	@r0,ar4
      003283 08               [12] 9000 	inc	r0
      003284 A6 05            [24] 9001 	mov	@r0,ar5
                                   9002 ;	calc.c:57: for (mask = 0x80000000lu; mask; mask >>= 1)
      003286 E5*00            [12] 9003 	mov	a,_bp
      003288 24 1A            [12] 9004 	add	a,#0x1a
      00328A F8               [12] 9005 	mov	r0,a
      00328B E4               [12] 9006 	clr	a
      00328C F6               [12] 9007 	mov	@r0,a
      00328D 08               [12] 9008 	inc	r0
      00328E F6               [12] 9009 	mov	@r0,a
      00328F 08               [12] 9010 	inc	r0
      003290 F6               [12] 9011 	mov	@r0,a
      003291 08               [12] 9012 	inc	r0
      003292 76 80            [12] 9013 	mov	@r0,#0x80
      003294                       9014 00156$:
                                   9015 ;	calc.c:58: (void)putchar((d & mask) ? (int)'1' : (int)'0');
      003294 C0 01            [24] 9016 	push	ar1
      003296 E5*00            [12] 9017 	mov	a,_bp
      003298 24 16            [12] 9018 	add	a,#0x16
      00329A F8               [12] 9019 	mov	r0,a
      00329B 86 02            [24] 9020 	mov	ar2,@r0
      00329D 08               [12] 9021 	inc	r0
      00329E 86 03            [24] 9022 	mov	ar3,@r0
      0032A0 08               [12] 9023 	inc	r0
      0032A1 86 05            [24] 9024 	mov	ar5,@r0
      0032A3 08               [12] 9025 	inc	r0
      0032A4 86 07            [24] 9026 	mov	ar7,@r0
      0032A6 E5*00            [12] 9027 	mov	a,_bp
      0032A8 24 1A            [12] 9028 	add	a,#0x1a
      0032AA F8               [12] 9029 	mov	r0,a
      0032AB E6               [12] 9030 	mov	a,@r0
      0032AC 52 02            [12] 9031 	anl	ar2,a
      0032AE 08               [12] 9032 	inc	r0
      0032AF E6               [12] 9033 	mov	a,@r0
      0032B0 52 03            [12] 9034 	anl	ar3,a
      0032B2 08               [12] 9035 	inc	r0
      0032B3 E6               [12] 9036 	mov	a,@r0
      0032B4 52 05            [12] 9037 	anl	ar5,a
      0032B6 08               [12] 9038 	inc	r0
      0032B7 E6               [12] 9039 	mov	a,@r0
      0032B8 52 07            [12] 9040 	anl	ar7,a
      0032BA D0 01            [24] 9041 	pop	ar1
      0032BC EA               [12] 9042 	mov	a,r2
      0032BD 4B               [12] 9043 	orl	a,r3
      0032BE 4D               [12] 9044 	orl	a,r5
      0032BF 4F               [12] 9045 	orl	a,r7
      0032C0 60 06            [24] 9046 	jz	00174$
      0032C2 7E 31            [12] 9047 	mov	r6,#0x31
      0032C4 7F 00            [12] 9048 	mov	r7,#0x00
      0032C6 80 04            [24] 9049 	sjmp	00175$
      0032C8                       9050 00174$:
      0032C8 7E 30            [12] 9051 	mov	r6,#0x30
      0032CA 7F 00            [12] 9052 	mov	r7,#0x00
      0032CC                       9053 00175$:
      0032CC 8E 82            [24] 9054 	mov	dpl,r6
      0032CE 8F 83            [24] 9055 	mov	dph,r7
      0032D0 12r00r00         [24] 9056 	lcall	_putchar
                                   9057 ;	calc.c:57: for (mask = 0x80000000lu; mask; mask >>= 1)
      0032D3 E5*00            [12] 9058 	mov	a,_bp
      0032D5 24 1A            [12] 9059 	add	a,#0x1a
      0032D7 F8               [12] 9060 	mov	r0,a
      0032D8 08               [12] 9061 	inc	r0
      0032D9 08               [12] 9062 	inc	r0
      0032DA 08               [12] 9063 	inc	r0
      0032DB E6               [12] 9064 	mov	a,@r0
      0032DC C3               [12] 9065 	clr	c
      0032DD 13               [12] 9066 	rrc	a
      0032DE F6               [12] 9067 	mov	@r0,a
      0032DF 18               [12] 9068 	dec	r0
      0032E0 E6               [12] 9069 	mov	a,@r0
      0032E1 13               [12] 9070 	rrc	a
      0032E2 F6               [12] 9071 	mov	@r0,a
      0032E3 18               [12] 9072 	dec	r0
      0032E4 E6               [12] 9073 	mov	a,@r0
      0032E5 13               [12] 9074 	rrc	a
      0032E6 F6               [12] 9075 	mov	@r0,a
      0032E7 18               [12] 9076 	dec	r0
      0032E8 E6               [12] 9077 	mov	a,@r0
      0032E9 13               [12] 9078 	rrc	a
      0032EA F6               [12] 9079 	mov	@r0,a
      0032EB E5*00            [12] 9080 	mov	a,_bp
      0032ED 24 1A            [12] 9081 	add	a,#0x1a
      0032EF F8               [12] 9082 	mov	r0,a
      0032F0 E6               [12] 9083 	mov	a,@r0
      0032F1 08               [12] 9084 	inc	r0
      0032F2 46               [12] 9085 	orl	a,@r0
      0032F3 08               [12] 9086 	inc	r0
      0032F4 46               [12] 9087 	orl	a,@r0
      0032F5 08               [12] 9088 	inc	r0
      0032F6 46               [12] 9089 	orl	a,@r0
      0032F7 70 9B            [24] 9090 	jnz	00156$
                                   9091 ;	calc.c:412: if (n > 0) printall(vals[1]);
      0032F9                       9092 00108$:
                                   9093 ;	calc.c:413: printstr("\r\nSSTOP0\t");
      0032F9 7Dr00            [12] 9094 	mov	r5,#___str_19
      0032FB 7Es01            [12] 9095 	mov	r6,#(___str_19 >> 8)
      0032FD 7F 80            [12] 9096 	mov	r7,#0x80
                                   9097 ;	calc.c:51: return;
      0032FF                       9098 00159$:
                                   9099 ;	calc.c:49: for (; *s; s++) putchar(*s);
      0032FF 8D 82            [24] 9100 	mov	dpl,r5
      003301 8E 83            [24] 9101 	mov	dph,r6
      003303 8F F0            [24] 9102 	mov	b,r7
      003305 12r00r00         [24] 9103 	lcall	__gptrget
      003308 FC               [12] 9104 	mov	r4,a
      003309 60 10            [24] 9105 	jz	00132$
      00330B 7B 00            [12] 9106 	mov	r3,#0x00
      00330D 8C 82            [24] 9107 	mov	dpl,r4
      00330F 8B 83            [24] 9108 	mov	dph,r3
      003311 12r00r00         [24] 9109 	lcall	_putchar
      003314 0D               [12] 9110 	inc	r5
                                   9111 ;	calc.c:413: printstr("\r\nSSTOP0\t");
      003315 BD 00 E7         [24] 9112 	cjne	r5,#0x00,00159$
      003318 0E               [12] 9113 	inc	r6
      003319 80 E4            [24] 9114 	sjmp	00159$
      00331B                       9115 00132$:
                                   9116 ;	calc.c:414: if (n > 1) printall(vals[0]);
      00331B E5*00            [12] 9117 	mov	a,_bp
      00331D 24 14            [12] 9118 	add	a,#0x14
      00331F F8               [12] 9119 	mov	r0,a
      003320 C3               [12] 9120 	clr	c
      003321 74 01            [12] 9121 	mov	a,#0x01
      003323 96               [12] 9122 	subb	a,@r0
      003324 74 80            [12] 9123 	mov	a,#(0x00 ^ 0x80)
      003326 08               [12] 9124 	inc	r0
      003327 86 F0            [24] 9125 	mov	b,@r0
      003329 63 F0 80         [24] 9126 	xrl	b,#0x80
      00332C 95 F0            [12] 9127 	subb	a,b
      00332E 40 03            [24] 9128 	jc	00341$
      003330 02r34r17         [24] 9129 	ljmp	00110$
      003333                       9130 00341$:
      003333 87 04            [24] 9131 	mov	ar4,@r1
      003335 09               [12] 9132 	inc	r1
      003336 87 05            [24] 9133 	mov	ar5,@r1
      003338 09               [12] 9134 	inc	r1
      003339 87 06            [24] 9135 	mov	ar6,@r1
      00333B 09               [12] 9136 	inc	r1
      00333C 87 07            [24] 9137 	mov	ar7,@r1
                                   9138 ;	calc.c:64: printf("% 11ld\t", d);
      00333E C0 07            [24] 9139 	push	ar7
      003340 C0 06            [24] 9140 	push	ar6
      003342 C0 05            [24] 9141 	push	ar5
      003344 C0 04            [24] 9142 	push	ar4
      003346 C0 04            [24] 9143 	push	ar4
      003348 C0 05            [24] 9144 	push	ar5
      00334A C0 06            [24] 9145 	push	ar6
      00334C C0 07            [24] 9146 	push	ar7
      00334E 74r00            [12] 9147 	mov	a,#___str_0
      003350 C0 E0            [24] 9148 	push	acc
      003352 74s00            [12] 9149 	mov	a,#(___str_0 >> 8)
      003354 C0 E0            [24] 9150 	push	acc
      003356 74 80            [12] 9151 	mov	a,#0x80
      003358 C0 E0            [24] 9152 	push	acc
      00335A 12r00r00         [24] 9153 	lcall	_printf
      00335D E5 81            [12] 9154 	mov	a,sp
      00335F 24 F9            [12] 9155 	add	a,#0xf9
      003361 F5 81            [12] 9156 	mov	sp,a
      003363 D0 04            [24] 9157 	pop	ar4
      003365 D0 05            [24] 9158 	pop	ar5
      003367 D0 06            [24] 9159 	pop	ar6
      003369 D0 07            [24] 9160 	pop	ar7
                                   9161 ;	calc.c:65: printf("%08lx\t", d);
      00336B C0 07            [24] 9162 	push	ar7
      00336D C0 06            [24] 9163 	push	ar6
      00336F C0 05            [24] 9164 	push	ar5
      003371 C0 04            [24] 9165 	push	ar4
      003373 C0 04            [24] 9166 	push	ar4
      003375 C0 05            [24] 9167 	push	ar5
      003377 C0 06            [24] 9168 	push	ar6
      003379 C0 07            [24] 9169 	push	ar7
      00337B 74r08            [12] 9170 	mov	a,#___str_1
      00337D C0 E0            [24] 9171 	push	acc
      00337F 74s00            [12] 9172 	mov	a,#(___str_1 >> 8)
      003381 C0 E0            [24] 9173 	push	acc
      003383 74 80            [12] 9174 	mov	a,#0x80
      003385 C0 E0            [24] 9175 	push	acc
      003387 12r00r00         [24] 9176 	lcall	_printf
      00338A E5 81            [12] 9177 	mov	a,sp
      00338C 24 F9            [12] 9178 	add	a,#0xf9
      00338E F5 81            [12] 9179 	mov	sp,a
      003390 D0 04            [24] 9180 	pop	ar4
      003392 D0 05            [24] 9181 	pop	ar5
      003394 D0 06            [24] 9182 	pop	ar6
      003396 D0 07            [24] 9183 	pop	ar7
                                   9184 ;	calc.c:66: printbin(d);
      003398 E5*00            [12] 9185 	mov	a,_bp
      00339A 24 16            [12] 9186 	add	a,#0x16
      00339C F8               [12] 9187 	mov	r0,a
      00339D A6 04            [24] 9188 	mov	@r0,ar4
      00339F 08               [12] 9189 	inc	r0
      0033A0 A6 05            [24] 9190 	mov	@r0,ar5
      0033A2 08               [12] 9191 	inc	r0
      0033A3 A6 06            [24] 9192 	mov	@r0,ar6
      0033A5 08               [12] 9193 	inc	r0
      0033A6 A6 07            [24] 9194 	mov	@r0,ar7
                                   9195 ;	calc.c:57: for (mask = 0x80000000lu; mask; mask >>= 1)
      0033A8 E5*00            [12] 9196 	mov	a,_bp
      0033AA 24 1A            [12] 9197 	add	a,#0x1a
      0033AC F8               [12] 9198 	mov	r0,a
      0033AD E4               [12] 9199 	clr	a
      0033AE F6               [12] 9200 	mov	@r0,a
      0033AF 08               [12] 9201 	inc	r0
      0033B0 F6               [12] 9202 	mov	@r0,a
      0033B1 08               [12] 9203 	inc	r0
      0033B2 F6               [12] 9204 	mov	@r0,a
      0033B3 08               [12] 9205 	inc	r0
      0033B4 76 80            [12] 9206 	mov	@r0,#0x80
      0033B6                       9207 00161$:
                                   9208 ;	calc.c:58: (void)putchar((d & mask) ? (int)'1' : (int)'0');
      0033B6 E5*00            [12] 9209 	mov	a,_bp
      0033B8 24 16            [12] 9210 	add	a,#0x16
      0033BA F8               [12] 9211 	mov	r0,a
      0033BB 86 04            [24] 9212 	mov	ar4,@r0
      0033BD 08               [12] 9213 	inc	r0
      0033BE 86 05            [24] 9214 	mov	ar5,@r0
      0033C0 08               [12] 9215 	inc	r0
      0033C1 86 06            [24] 9216 	mov	ar6,@r0
      0033C3 08               [12] 9217 	inc	r0
      0033C4 86 07            [24] 9218 	mov	ar7,@r0
      0033C6 E5*00            [12] 9219 	mov	a,_bp
      0033C8 24 1A            [12] 9220 	add	a,#0x1a
      0033CA F8               [12] 9221 	mov	r0,a
      0033CB E6               [12] 9222 	mov	a,@r0
      0033CC 52 04            [12] 9223 	anl	ar4,a
      0033CE 08               [12] 9224 	inc	r0
      0033CF E6               [12] 9225 	mov	a,@r0
      0033D0 52 05            [12] 9226 	anl	ar5,a
      0033D2 08               [12] 9227 	inc	r0
      0033D3 E6               [12] 9228 	mov	a,@r0
      0033D4 52 06            [12] 9229 	anl	ar6,a
      0033D6 08               [12] 9230 	inc	r0
      0033D7 E6               [12] 9231 	mov	a,@r0
      0033D8 52 07            [12] 9232 	anl	ar7,a
      0033DA EC               [12] 9233 	mov	a,r4
      0033DB 4D               [12] 9234 	orl	a,r5
      0033DC 4E               [12] 9235 	orl	a,r6
      0033DD 4F               [12] 9236 	orl	a,r7
      0033DE 60 06            [24] 9237 	jz	00176$
      0033E0 7E 31            [12] 9238 	mov	r6,#0x31
      0033E2 7F 00            [12] 9239 	mov	r7,#0x00
      0033E4 80 04            [24] 9240 	sjmp	00177$
      0033E6                       9241 00176$:
      0033E6 7E 30            [12] 9242 	mov	r6,#0x30
      0033E8 7F 00            [12] 9243 	mov	r7,#0x00
      0033EA                       9244 00177$:
      0033EA 8E 82            [24] 9245 	mov	dpl,r6
      0033EC 8F 83            [24] 9246 	mov	dph,r7
      0033EE 12r00r00         [24] 9247 	lcall	_putchar
                                   9248 ;	calc.c:57: for (mask = 0x80000000lu; mask; mask >>= 1)
      0033F1 E5*00            [12] 9249 	mov	a,_bp
      0033F3 24 1A            [12] 9250 	add	a,#0x1a
      0033F5 F8               [12] 9251 	mov	r0,a
      0033F6 08               [12] 9252 	inc	r0
      0033F7 08               [12] 9253 	inc	r0
      0033F8 08               [12] 9254 	inc	r0
      0033F9 E6               [12] 9255 	mov	a,@r0
      0033FA C3               [12] 9256 	clr	c
      0033FB 13               [12] 9257 	rrc	a
      0033FC F6               [12] 9258 	mov	@r0,a
      0033FD 18               [12] 9259 	dec	r0
      0033FE E6               [12] 9260 	mov	a,@r0
      0033FF 13               [12] 9261 	rrc	a
      003400 F6               [12] 9262 	mov	@r0,a
      003401 18               [12] 9263 	dec	r0
      003402 E6               [12] 9264 	mov	a,@r0
      003403 13               [12] 9265 	rrc	a
      003404 F6               [12] 9266 	mov	@r0,a
      003405 18               [12] 9267 	dec	r0
      003406 E6               [12] 9268 	mov	a,@r0
      003407 13               [12] 9269 	rrc	a
      003408 F6               [12] 9270 	mov	@r0,a
      003409 E5*00            [12] 9271 	mov	a,_bp
      00340B 24 1A            [12] 9272 	add	a,#0x1a
      00340D F8               [12] 9273 	mov	r0,a
      00340E E6               [12] 9274 	mov	a,@r0
      00340F 08               [12] 9275 	inc	r0
      003410 46               [12] 9276 	orl	a,@r0
      003411 08               [12] 9277 	inc	r0
      003412 46               [12] 9278 	orl	a,@r0
      003413 08               [12] 9279 	inc	r0
      003414 46               [12] 9280 	orl	a,@r0
      003415 70 9F            [24] 9281 	jnz	00161$
                                   9282 ;	calc.c:414: if (n > 1) printall(vals[0]);
      003417                       9283 00110$:
                                   9284 ;	calc.c:415: printstr("\r\n");
      003417 7Dr0F            [12] 9285 	mov	r5,#___str_2
      003419 7Es00            [12] 9286 	mov	r6,#(___str_2 >> 8)
      00341B 7F 80            [12] 9287 	mov	r7,#0x80
                                   9288 ;	calc.c:51: return;
      00341D                       9289 00164$:
                                   9290 ;	calc.c:49: for (; *s; s++) putchar(*s);
      00341D 8D 82            [24] 9291 	mov	dpl,r5
      00341F 8E 83            [24] 9292 	mov	dph,r6
      003421 8F F0            [24] 9293 	mov	b,r7
      003423 12r00r00         [24] 9294 	lcall	__gptrget
      003426 FC               [12] 9295 	mov	r4,a
      003427 60 10            [24] 9296 	jz	00137$
      003429 7B 00            [12] 9297 	mov	r3,#0x00
      00342B 8C 82            [24] 9298 	mov	dpl,r4
      00342D 8B 83            [24] 9299 	mov	dph,r3
      00342F 12r00r00         [24] 9300 	lcall	_putchar
      003432 0D               [12] 9301 	inc	r5
                                   9302 ;	calc.c:415: printstr("\r\n");
      003433 BD 00 E7         [24] 9303 	cjne	r5,#0x00,00164$
      003436 0E               [12] 9304 	inc	r6
      003437 80 E4            [24] 9305 	sjmp	00164$
      003439                       9306 00137$:
                                   9307 ;	calc.c:417: return 1;
      003439 90 00 01         [24] 9308 	mov	dptr,#0x0001
                                   9309 ;	calc.c:418: }
      00343C 85*00 81         [24] 9310 	mov	sp,_bp
      00343F D0*00            [24] 9311 	pop	_bp
      003441 22               [24] 9312 	ret
                                   9313 ;------------------------------------------------------------
                                   9314 ;Allocation info for local variables in function 'help'
                                   9315 ;------------------------------------------------------------
                                   9316 ;delta                     Allocated to stack - _bp -5
                                   9317 ;_ctx                      Allocated to registers 
                                   9318 ;__1310720151              Allocated to registers 
                                   9319 ;s                         Allocated to registers r5 r6 r7 
                                   9320 ;__1310720153              Allocated to registers 
                                   9321 ;s                         Allocated to registers r5 r6 r7 
                                   9322 ;__1310720155              Allocated to registers 
                                   9323 ;s                         Allocated to registers r5 r6 r7 
                                   9324 ;__1310720157              Allocated to registers 
                                   9325 ;s                         Allocated to registers r5 r6 r7 
                                   9326 ;__1310720159              Allocated to registers 
                                   9327 ;s                         Allocated to registers r5 r6 r7 
                                   9328 ;__1310720161              Allocated to registers 
                                   9329 ;s                         Allocated to registers r5 r6 r7 
                                   9330 ;__1310720163              Allocated to registers 
                                   9331 ;s                         Allocated to registers r5 r6 r7 
                                   9332 ;__1310720165              Allocated to registers 
                                   9333 ;s                         Allocated to registers r5 r6 r7 
                                   9334 ;__1310720167              Allocated to registers 
                                   9335 ;s                         Allocated to registers r5 r6 r7 
                                   9336 ;__1310720169              Allocated to registers 
                                   9337 ;s                         Allocated to registers r5 r6 r7 
                                   9338 ;__1310720171              Allocated to registers 
                                   9339 ;s                         Allocated to registers r5 r6 r7 
                                   9340 ;__1310720173              Allocated to registers 
                                   9341 ;s                         Allocated to registers r5 r6 r7 
                                   9342 ;__1310720175              Allocated to registers 
                                   9343 ;s                         Allocated to registers r5 r6 r7 
                                   9344 ;__1310720177              Allocated to registers 
                                   9345 ;s                         Allocated to registers r5 r6 r7 
                                   9346 ;__1310720179              Allocated to registers 
                                   9347 ;s                         Allocated to registers r5 r6 r7 
                                   9348 ;__1310720181              Allocated to registers 
                                   9349 ;s                         Allocated to registers r5 r6 r7 
                                   9350 ;__1310720183              Allocated to registers 
                                   9351 ;s                         Allocated to registers r5 r6 r7 
                                   9352 ;__1310720185              Allocated to registers 
                                   9353 ;s                         Allocated to registers r5 r6 r7 
                                   9354 ;__1310720187              Allocated to registers 
                                   9355 ;s                         Allocated to registers r5 r6 r7 
                                   9356 ;__1310720189              Allocated to registers 
                                   9357 ;s                         Allocated to registers r5 r6 r7 
                                   9358 ;__1310720191              Allocated to registers 
                                   9359 ;s                         Allocated to registers r5 r6 r7 
                                   9360 ;__1310720193              Allocated to registers 
                                   9361 ;s                         Allocated to registers r5 r6 r7 
                                   9362 ;__1310720195              Allocated to registers 
                                   9363 ;s                         Allocated to registers r5 r6 r7 
                                   9364 ;__1310720197              Allocated to registers 
                                   9365 ;s                         Allocated to registers r5 r6 r7 
                                   9366 ;__1310720199              Allocated to registers 
                                   9367 ;s                         Allocated to registers r5 r6 r7 
                                   9368 ;__1310720201              Allocated to registers 
                                   9369 ;s                         Allocated to registers r5 r6 r7 
                                   9370 ;__1310720203              Allocated to registers 
                                   9371 ;s                         Allocated to registers r5 r6 r7 
                                   9372 ;__1310720205              Allocated to registers 
                                   9373 ;s                         Allocated to registers r5 r6 r7 
                                   9374 ;__1310720207              Allocated to registers 
                                   9375 ;s                         Allocated to registers r5 r6 r7 
                                   9376 ;__1310720209              Allocated to registers 
                                   9377 ;s                         Allocated to registers r5 r6 r7 
                                   9378 ;__1310720211              Allocated to registers 
                                   9379 ;s                         Allocated to registers r5 r6 r7 
                                   9380 ;------------------------------------------------------------
                                   9381 ;	calc.c:420: static int help(void *_ctx, delta_t *delta) __reentrant {
                                   9382 ;	-----------------------------------------
                                   9383 ;	 function help
                                   9384 ;	-----------------------------------------
      003442                       9385 _help:
      003442 C0*00            [24] 9386 	push	_bp
      003444 85 81*00         [24] 9387 	mov	_bp,sp
                                   9388 ;	calc.c:424: printstr("\r\nHhOo\tbase 16 10 8 2\r\n");
      003447 7Dr0A            [12] 9389 	mov	r5,#___str_20
      003449 7Es01            [12] 9390 	mov	r6,#(___str_20 >> 8)
      00344B 7F 80            [12] 9391 	mov	r7,#0x80
                                   9392 ;	calc.c:51: return;
      00344D                       9393 00164$:
                                   9394 ;	calc.c:49: for (; *s; s++) putchar(*s);
      00344D 8D 82            [24] 9395 	mov	dpl,r5
      00344F 8E 83            [24] 9396 	mov	dph,r6
      003451 8F F0            [24] 9397 	mov	b,r7
      003453 12r00r00         [24] 9398 	lcall	__gptrget
      003456 FC               [12] 9399 	mov	r4,a
      003457 60 10            [24] 9400 	jz	00102$
      003459 7B 00            [12] 9401 	mov	r3,#0x00
      00345B 8C 82            [24] 9402 	mov	dpl,r4
      00345D 8B 83            [24] 9403 	mov	dph,r3
      00345F 12r00r00         [24] 9404 	lcall	_putchar
      003462 0D               [12] 9405 	inc	r5
                                   9406 ;	calc.c:424: printstr("\r\nHhOo\tbase 16 10 8 2\r\n");
      003463 BD 00 E7         [24] 9407 	cjne	r5,#0x00,00164$
      003466 0E               [12] 9408 	inc	r6
      003467 80 E4            [24] 9409 	sjmp	00164$
      003469                       9410 00102$:
                                   9411 ;	calc.c:425: printstr("p.\tpop top\r\n");
      003469 7Dr22            [12] 9412 	mov	r5,#___str_21
      00346B 7Es01            [12] 9413 	mov	r6,#(___str_21 >> 8)
      00346D 7F 80            [12] 9414 	mov	r7,#0x80
                                   9415 ;	calc.c:51: return;
      00346F                       9416 00167$:
                                   9417 ;	calc.c:49: for (; *s; s++) putchar(*s);
      00346F 8D 82            [24] 9418 	mov	dpl,r5
      003471 8E 83            [24] 9419 	mov	dph,r6
      003473 8F F0            [24] 9420 	mov	b,r7
      003475 12r00r00         [24] 9421 	lcall	__gptrget
      003478 FC               [12] 9422 	mov	r4,a
      003479 60 10            [24] 9423 	jz	00104$
      00347B 7B 00            [12] 9424 	mov	r3,#0x00
      00347D 8C 82            [24] 9425 	mov	dpl,r4
      00347F 8B 83            [24] 9426 	mov	dph,r3
      003481 12r00r00         [24] 9427 	lcall	_putchar
      003484 0D               [12] 9428 	inc	r5
                                   9429 ;	calc.c:425: printstr("p.\tpop top\r\n");
      003485 BD 00 E7         [24] 9430 	cjne	r5,#0x00,00167$
      003488 0E               [12] 9431 	inc	r6
      003489 80 E4            [24] 9432 	sjmp	00167$
      00348B                       9433 00104$:
                                   9434 ;	calc.c:426: printstr("P\tpop stack\r\n");
      00348B 7Dr2F            [12] 9435 	mov	r5,#___str_22
      00348D 7Es01            [12] 9436 	mov	r6,#(___str_22 >> 8)
      00348F 7F 80            [12] 9437 	mov	r7,#0x80
                                   9438 ;	calc.c:51: return;
      003491                       9439 00170$:
                                   9440 ;	calc.c:49: for (; *s; s++) putchar(*s);
      003491 8D 82            [24] 9441 	mov	dpl,r5
      003493 8E 83            [24] 9442 	mov	dph,r6
      003495 8F F0            [24] 9443 	mov	b,r7
      003497 12r00r00         [24] 9444 	lcall	__gptrget
      00349A FC               [12] 9445 	mov	r4,a
      00349B 60 10            [24] 9446 	jz	00106$
      00349D 7B 00            [12] 9447 	mov	r3,#0x00
      00349F 8C 82            [24] 9448 	mov	dpl,r4
      0034A1 8B 83            [24] 9449 	mov	dph,r3
      0034A3 12r00r00         [24] 9450 	lcall	_putchar
      0034A6 0D               [12] 9451 	inc	r5
                                   9452 ;	calc.c:426: printstr("P\tpop stack\r\n");
      0034A7 BD 00 E7         [24] 9453 	cjne	r5,#0x00,00170$
      0034AA 0E               [12] 9454 	inc	r6
      0034AB 80 E4            [24] 9455 	sjmp	00170$
      0034AD                       9456 00106$:
                                   9457 ;	calc.c:427: printstr("v\tpeek top\r\n");
      0034AD 7Dr3D            [12] 9458 	mov	r5,#___str_23
      0034AF 7Es01            [12] 9459 	mov	r6,#(___str_23 >> 8)
      0034B1 7F 80            [12] 9460 	mov	r7,#0x80
                                   9461 ;	calc.c:51: return;
      0034B3                       9462 00173$:
                                   9463 ;	calc.c:49: for (; *s; s++) putchar(*s);
      0034B3 8D 82            [24] 9464 	mov	dpl,r5
      0034B5 8E 83            [24] 9465 	mov	dph,r6
      0034B7 8F F0            [24] 9466 	mov	b,r7
      0034B9 12r00r00         [24] 9467 	lcall	__gptrget
      0034BC FC               [12] 9468 	mov	r4,a
      0034BD 60 10            [24] 9469 	jz	00108$
      0034BF 7B 00            [12] 9470 	mov	r3,#0x00
      0034C1 8C 82            [24] 9471 	mov	dpl,r4
      0034C3 8B 83            [24] 9472 	mov	dph,r3
      0034C5 12r00r00         [24] 9473 	lcall	_putchar
      0034C8 0D               [12] 9474 	inc	r5
                                   9475 ;	calc.c:427: printstr("v\tpeek top\r\n");
      0034C9 BD 00 E7         [24] 9476 	cjne	r5,#0x00,00173$
      0034CC 0E               [12] 9477 	inc	r6
      0034CD 80 E4            [24] 9478 	sjmp	00173$
      0034CF                       9479 00108$:
                                   9480 ;	calc.c:428: printstr("V\tpeek stack\r\n");
      0034CF 7Dr4A            [12] 9481 	mov	r5,#___str_24
      0034D1 7Es01            [12] 9482 	mov	r6,#(___str_24 >> 8)
      0034D3 7F 80            [12] 9483 	mov	r7,#0x80
                                   9484 ;	calc.c:51: return;
      0034D5                       9485 00176$:
                                   9486 ;	calc.c:49: for (; *s; s++) putchar(*s);
      0034D5 8D 82            [24] 9487 	mov	dpl,r5
      0034D7 8E 83            [24] 9488 	mov	dph,r6
      0034D9 8F F0            [24] 9489 	mov	b,r7
      0034DB 12r00r00         [24] 9490 	lcall	__gptrget
      0034DE FC               [12] 9491 	mov	r4,a
      0034DF 60 10            [24] 9492 	jz	00110$
      0034E1 7B 00            [12] 9493 	mov	r3,#0x00
      0034E3 8C 82            [24] 9494 	mov	dpl,r4
      0034E5 8B 83            [24] 9495 	mov	dph,r3
      0034E7 12r00r00         [24] 9496 	lcall	_putchar
      0034EA 0D               [12] 9497 	inc	r5
                                   9498 ;	calc.c:428: printstr("V\tpeek stack\r\n");
      0034EB BD 00 E7         [24] 9499 	cjne	r5,#0x00,00176$
      0034EE 0E               [12] 9500 	inc	r6
      0034EF 80 E4            [24] 9501 	sjmp	00176$
      0034F1                       9502 00110$:
                                   9503 ;	calc.c:429: printstr("i\treset acc\r\n");
      0034F1 7Dr59            [12] 9504 	mov	r5,#___str_25
      0034F3 7Es01            [12] 9505 	mov	r6,#(___str_25 >> 8)
      0034F5 7F 80            [12] 9506 	mov	r7,#0x80
                                   9507 ;	calc.c:51: return;
      0034F7                       9508 00179$:
                                   9509 ;	calc.c:49: for (; *s; s++) putchar(*s);
      0034F7 8D 82            [24] 9510 	mov	dpl,r5
      0034F9 8E 83            [24] 9511 	mov	dph,r6
      0034FB 8F F0            [24] 9512 	mov	b,r7
      0034FD 12r00r00         [24] 9513 	lcall	__gptrget
      003500 FC               [12] 9514 	mov	r4,a
      003501 60 10            [24] 9515 	jz	00112$
      003503 7B 00            [12] 9516 	mov	r3,#0x00
      003505 8C 82            [24] 9517 	mov	dpl,r4
      003507 8B 83            [24] 9518 	mov	dph,r3
      003509 12r00r00         [24] 9519 	lcall	_putchar
      00350C 0D               [12] 9520 	inc	r5
                                   9521 ;	calc.c:429: printstr("i\treset acc\r\n");
      00350D BD 00 E7         [24] 9522 	cjne	r5,#0x00,00179$
      003510 0E               [12] 9523 	inc	r6
      003511 80 E4            [24] 9524 	sjmp	00179$
      003513                       9525 00112$:
                                   9526 ;	calc.c:430: printstr("I\treset and discard acc\r\n");
      003513 7Dr67            [12] 9527 	mov	r5,#___str_26
      003515 7Es01            [12] 9528 	mov	r6,#(___str_26 >> 8)
      003517 7F 80            [12] 9529 	mov	r7,#0x80
                                   9530 ;	calc.c:51: return;
      003519                       9531 00182$:
                                   9532 ;	calc.c:49: for (; *s; s++) putchar(*s);
      003519 8D 82            [24] 9533 	mov	dpl,r5
      00351B 8E 83            [24] 9534 	mov	dph,r6
      00351D 8F F0            [24] 9535 	mov	b,r7
      00351F 12r00r00         [24] 9536 	lcall	__gptrget
      003522 FC               [12] 9537 	mov	r4,a
      003523 60 10            [24] 9538 	jz	00114$
      003525 7B 00            [12] 9539 	mov	r3,#0x00
      003527 8C 82            [24] 9540 	mov	dpl,r4
      003529 8B 83            [24] 9541 	mov	dph,r3
      00352B 12r00r00         [24] 9542 	lcall	_putchar
      00352E 0D               [12] 9543 	inc	r5
                                   9544 ;	calc.c:430: printstr("I\treset and discard acc\r\n");
      00352F BD 00 E7         [24] 9545 	cjne	r5,#0x00,00182$
      003532 0E               [12] 9546 	inc	r6
      003533 80 E4            [24] 9547 	sjmp	00182$
      003535                       9548 00114$:
                                   9549 ;	calc.c:431: printstr("x\texchange top 2\r\n");
      003535 7Dr81            [12] 9550 	mov	r5,#___str_27
      003537 7Es01            [12] 9551 	mov	r6,#(___str_27 >> 8)
      003539 7F 80            [12] 9552 	mov	r7,#0x80
                                   9553 ;	calc.c:51: return;
      00353B                       9554 00185$:
                                   9555 ;	calc.c:49: for (; *s; s++) putchar(*s);
      00353B 8D 82            [24] 9556 	mov	dpl,r5
      00353D 8E 83            [24] 9557 	mov	dph,r6
      00353F 8F F0            [24] 9558 	mov	b,r7
      003541 12r00r00         [24] 9559 	lcall	__gptrget
      003544 FC               [12] 9560 	mov	r4,a
      003545 60 10            [24] 9561 	jz	00116$
      003547 7B 00            [12] 9562 	mov	r3,#0x00
      003549 8C 82            [24] 9563 	mov	dpl,r4
      00354B 8B 83            [24] 9564 	mov	dph,r3
      00354D 12r00r00         [24] 9565 	lcall	_putchar
      003550 0D               [12] 9566 	inc	r5
                                   9567 ;	calc.c:431: printstr("x\texchange top 2\r\n");
      003551 BD 00 E7         [24] 9568 	cjne	r5,#0x00,00185$
      003554 0E               [12] 9569 	inc	r6
      003555 80 E4            [24] 9570 	sjmp	00185$
      003557                       9571 00116$:
                                   9572 ;	calc.c:432: printstr("X\texchange stacks primary <-> secondary\r\n");
      003557 7Dr94            [12] 9573 	mov	r5,#___str_28
      003559 7Es01            [12] 9574 	mov	r6,#(___str_28 >> 8)
      00355B 7F 80            [12] 9575 	mov	r7,#0x80
                                   9576 ;	calc.c:51: return;
      00355D                       9577 00188$:
                                   9578 ;	calc.c:49: for (; *s; s++) putchar(*s);
      00355D 8D 82            [24] 9579 	mov	dpl,r5
      00355F 8E 83            [24] 9580 	mov	dph,r6
      003561 8F F0            [24] 9581 	mov	b,r7
      003563 12r00r00         [24] 9582 	lcall	__gptrget
      003566 FC               [12] 9583 	mov	r4,a
      003567 60 10            [24] 9584 	jz	00118$
      003569 7B 00            [12] 9585 	mov	r3,#0x00
      00356B 8C 82            [24] 9586 	mov	dpl,r4
      00356D 8B 83            [24] 9587 	mov	dph,r3
      00356F 12r00r00         [24] 9588 	lcall	_putchar
      003572 0D               [12] 9589 	inc	r5
                                   9590 ;	calc.c:432: printstr("X\texchange stacks primary <-> secondary\r\n");
      003573 BD 00 E7         [24] 9591 	cjne	r5,#0x00,00188$
      003576 0E               [12] 9592 	inc	r6
      003577 80 E4            [24] 9593 	sjmp	00188$
      003579                       9594 00118$:
                                   9595 ;	calc.c:433: printstr("T\texchange tops primary <-> secondary\r\n");
      003579 7DrBE            [12] 9596 	mov	r5,#___str_29
      00357B 7Es01            [12] 9597 	mov	r6,#(___str_29 >> 8)
      00357D 7F 80            [12] 9598 	mov	r7,#0x80
                                   9599 ;	calc.c:51: return;
      00357F                       9600 00191$:
                                   9601 ;	calc.c:49: for (; *s; s++) putchar(*s);
      00357F 8D 82            [24] 9602 	mov	dpl,r5
      003581 8E 83            [24] 9603 	mov	dph,r6
      003583 8F F0            [24] 9604 	mov	b,r7
      003585 12r00r00         [24] 9605 	lcall	__gptrget
      003588 FC               [12] 9606 	mov	r4,a
      003589 60 10            [24] 9607 	jz	00120$
      00358B 7B 00            [12] 9608 	mov	r3,#0x00
      00358D 8C 82            [24] 9609 	mov	dpl,r4
      00358F 8B 83            [24] 9610 	mov	dph,r3
      003591 12r00r00         [24] 9611 	lcall	_putchar
      003594 0D               [12] 9612 	inc	r5
                                   9613 ;	calc.c:433: printstr("T\texchange tops primary <-> secondary\r\n");
      003595 BD 00 E7         [24] 9614 	cjne	r5,#0x00,00191$
      003598 0E               [12] 9615 	inc	r6
      003599 80 E4            [24] 9616 	sjmp	00191$
      00359B                       9617 00120$:
                                   9618 ;	calc.c:434: printstr("U\tcopy top secondary -> primary\r\n");
      00359B 7DrE6            [12] 9619 	mov	r5,#___str_30
      00359D 7Es01            [12] 9620 	mov	r6,#(___str_30 >> 8)
      00359F 7F 80            [12] 9621 	mov	r7,#0x80
                                   9622 ;	calc.c:51: return;
      0035A1                       9623 00194$:
                                   9624 ;	calc.c:49: for (; *s; s++) putchar(*s);
      0035A1 8D 82            [24] 9625 	mov	dpl,r5
      0035A3 8E 83            [24] 9626 	mov	dph,r6
      0035A5 8F F0            [24] 9627 	mov	b,r7
      0035A7 12r00r00         [24] 9628 	lcall	__gptrget
      0035AA FC               [12] 9629 	mov	r4,a
      0035AB 60 10            [24] 9630 	jz	00122$
      0035AD 7B 00            [12] 9631 	mov	r3,#0x00
      0035AF 8C 82            [24] 9632 	mov	dpl,r4
      0035B1 8B 83            [24] 9633 	mov	dph,r3
      0035B3 12r00r00         [24] 9634 	lcall	_putchar
      0035B6 0D               [12] 9635 	inc	r5
                                   9636 ;	calc.c:434: printstr("U\tcopy top secondary -> primary\r\n");
      0035B7 BD 00 E7         [24] 9637 	cjne	r5,#0x00,00194$
      0035BA 0E               [12] 9638 	inc	r6
      0035BB 80 E4            [24] 9639 	sjmp	00194$
      0035BD                       9640 00122$:
                                   9641 ;	calc.c:435: printstr("u\tcopy top primary -> secondary\r\n");
      0035BD 7Dr08            [12] 9642 	mov	r5,#___str_31
      0035BF 7Es02            [12] 9643 	mov	r6,#(___str_31 >> 8)
      0035C1 7F 80            [12] 9644 	mov	r7,#0x80
                                   9645 ;	calc.c:51: return;
      0035C3                       9646 00197$:
                                   9647 ;	calc.c:49: for (; *s; s++) putchar(*s);
      0035C3 8D 82            [24] 9648 	mov	dpl,r5
      0035C5 8E 83            [24] 9649 	mov	dph,r6
      0035C7 8F F0            [24] 9650 	mov	b,r7
      0035C9 12r00r00         [24] 9651 	lcall	__gptrget
      0035CC FC               [12] 9652 	mov	r4,a
      0035CD 60 10            [24] 9653 	jz	00124$
      0035CF 7B 00            [12] 9654 	mov	r3,#0x00
      0035D1 8C 82            [24] 9655 	mov	dpl,r4
      0035D3 8B 83            [24] 9656 	mov	dph,r3
      0035D5 12r00r00         [24] 9657 	lcall	_putchar
      0035D8 0D               [12] 9658 	inc	r5
                                   9659 ;	calc.c:435: printstr("u\tcopy top primary -> secondary\r\n");
      0035D9 BD 00 E7         [24] 9660 	cjne	r5,#0x00,00197$
      0035DC 0E               [12] 9661 	inc	r6
      0035DD 80 E4            [24] 9662 	sjmp	00197$
      0035DF                       9663 00124$:
                                   9664 ;	calc.c:436: printstr("M\tmove top secondary -> primary\r\n");
      0035DF 7Dr2A            [12] 9665 	mov	r5,#___str_32
      0035E1 7Es02            [12] 9666 	mov	r6,#(___str_32 >> 8)
      0035E3 7F 80            [12] 9667 	mov	r7,#0x80
                                   9668 ;	calc.c:51: return;
      0035E5                       9669 00200$:
                                   9670 ;	calc.c:49: for (; *s; s++) putchar(*s);
      0035E5 8D 82            [24] 9671 	mov	dpl,r5
      0035E7 8E 83            [24] 9672 	mov	dph,r6
      0035E9 8F F0            [24] 9673 	mov	b,r7
      0035EB 12r00r00         [24] 9674 	lcall	__gptrget
      0035EE FC               [12] 9675 	mov	r4,a
      0035EF 60 10            [24] 9676 	jz	00126$
      0035F1 7B 00            [12] 9677 	mov	r3,#0x00
      0035F3 8C 82            [24] 9678 	mov	dpl,r4
      0035F5 8B 83            [24] 9679 	mov	dph,r3
      0035F7 12r00r00         [24] 9680 	lcall	_putchar
      0035FA 0D               [12] 9681 	inc	r5
                                   9682 ;	calc.c:436: printstr("M\tmove top secondary -> primary\r\n");
      0035FB BD 00 E7         [24] 9683 	cjne	r5,#0x00,00200$
      0035FE 0E               [12] 9684 	inc	r6
      0035FF 80 E4            [24] 9685 	sjmp	00200$
      003601                       9686 00126$:
                                   9687 ;	calc.c:437: printstr("m\tmove top primary -> secondary\r\n");
      003601 7Dr4C            [12] 9688 	mov	r5,#___str_33
      003603 7Es02            [12] 9689 	mov	r6,#(___str_33 >> 8)
      003605 7F 80            [12] 9690 	mov	r7,#0x80
                                   9691 ;	calc.c:51: return;
      003607                       9692 00203$:
                                   9693 ;	calc.c:49: for (; *s; s++) putchar(*s);
      003607 8D 82            [24] 9694 	mov	dpl,r5
      003609 8E 83            [24] 9695 	mov	dph,r6
      00360B 8F F0            [24] 9696 	mov	b,r7
      00360D 12r00r00         [24] 9697 	lcall	__gptrget
      003610 FC               [12] 9698 	mov	r4,a
      003611 60 10            [24] 9699 	jz	00128$
      003613 7B 00            [12] 9700 	mov	r3,#0x00
      003615 8C 82            [24] 9701 	mov	dpl,r4
      003617 8B 83            [24] 9702 	mov	dph,r3
      003619 12r00r00         [24] 9703 	lcall	_putchar
      00361C 0D               [12] 9704 	inc	r5
                                   9705 ;	calc.c:437: printstr("m\tmove top primary -> secondary\r\n");
      00361D BD 00 E7         [24] 9706 	cjne	r5,#0x00,00203$
      003620 0E               [12] 9707 	inc	r6
      003621 80 E4            [24] 9708 	sjmp	00203$
      003623                       9709 00128$:
                                   9710 ;	calc.c:438: printstr("+\tadd top 2\r\n");
      003623 7Dr6E            [12] 9711 	mov	r5,#___str_34
      003625 7Es02            [12] 9712 	mov	r6,#(___str_34 >> 8)
      003627 7F 80            [12] 9713 	mov	r7,#0x80
                                   9714 ;	calc.c:51: return;
      003629                       9715 00206$:
                                   9716 ;	calc.c:49: for (; *s; s++) putchar(*s);
      003629 8D 82            [24] 9717 	mov	dpl,r5
      00362B 8E 83            [24] 9718 	mov	dph,r6
      00362D 8F F0            [24] 9719 	mov	b,r7
      00362F 12r00r00         [24] 9720 	lcall	__gptrget
      003632 FC               [12] 9721 	mov	r4,a
      003633 60 10            [24] 9722 	jz	00130$
      003635 7B 00            [12] 9723 	mov	r3,#0x00
      003637 8C 82            [24] 9724 	mov	dpl,r4
      003639 8B 83            [24] 9725 	mov	dph,r3
      00363B 12r00r00         [24] 9726 	lcall	_putchar
      00363E 0D               [12] 9727 	inc	r5
                                   9728 ;	calc.c:438: printstr("+\tadd top 2\r\n");
      00363F BD 00 E7         [24] 9729 	cjne	r5,#0x00,00206$
      003642 0E               [12] 9730 	inc	r6
      003643 80 E4            [24] 9731 	sjmp	00206$
      003645                       9732 00130$:
                                   9733 ;	calc.c:439: printstr("-\tsubtract top 2\r\n");
      003645 7Dr7C            [12] 9734 	mov	r5,#___str_35
      003647 7Es02            [12] 9735 	mov	r6,#(___str_35 >> 8)
      003649 7F 80            [12] 9736 	mov	r7,#0x80
                                   9737 ;	calc.c:51: return;
      00364B                       9738 00209$:
                                   9739 ;	calc.c:49: for (; *s; s++) putchar(*s);
      00364B 8D 82            [24] 9740 	mov	dpl,r5
      00364D 8E 83            [24] 9741 	mov	dph,r6
      00364F 8F F0            [24] 9742 	mov	b,r7
      003651 12r00r00         [24] 9743 	lcall	__gptrget
      003654 FC               [12] 9744 	mov	r4,a
      003655 60 10            [24] 9745 	jz	00132$
      003657 7B 00            [12] 9746 	mov	r3,#0x00
      003659 8C 82            [24] 9747 	mov	dpl,r4
      00365B 8B 83            [24] 9748 	mov	dph,r3
      00365D 12r00r00         [24] 9749 	lcall	_putchar
      003660 0D               [12] 9750 	inc	r5
                                   9751 ;	calc.c:439: printstr("-\tsubtract top 2\r\n");
      003661 BD 00 E7         [24] 9752 	cjne	r5,#0x00,00209$
      003664 0E               [12] 9753 	inc	r6
      003665 80 E4            [24] 9754 	sjmp	00209$
      003667                       9755 00132$:
                                   9756 ;	calc.c:440: printstr("*\tmultiply top 2\r\n");
      003667 7Dr8F            [12] 9757 	mov	r5,#___str_36
      003669 7Es02            [12] 9758 	mov	r6,#(___str_36 >> 8)
      00366B 7F 80            [12] 9759 	mov	r7,#0x80
                                   9760 ;	calc.c:51: return;
      00366D                       9761 00212$:
                                   9762 ;	calc.c:49: for (; *s; s++) putchar(*s);
      00366D 8D 82            [24] 9763 	mov	dpl,r5
      00366F 8E 83            [24] 9764 	mov	dph,r6
      003671 8F F0            [24] 9765 	mov	b,r7
      003673 12r00r00         [24] 9766 	lcall	__gptrget
      003676 FC               [12] 9767 	mov	r4,a
      003677 60 10            [24] 9768 	jz	00134$
      003679 7B 00            [12] 9769 	mov	r3,#0x00
      00367B 8C 82            [24] 9770 	mov	dpl,r4
      00367D 8B 83            [24] 9771 	mov	dph,r3
      00367F 12r00r00         [24] 9772 	lcall	_putchar
      003682 0D               [12] 9773 	inc	r5
                                   9774 ;	calc.c:440: printstr("*\tmultiply top 2\r\n");
      003683 BD 00 E7         [24] 9775 	cjne	r5,#0x00,00212$
      003686 0E               [12] 9776 	inc	r6
      003687 80 E4            [24] 9777 	sjmp	00212$
      003689                       9778 00134$:
                                   9779 ;	calc.c:441: printstr("/\tdivide top 2\r\n");
      003689 7DrA2            [12] 9780 	mov	r5,#___str_37
      00368B 7Es02            [12] 9781 	mov	r6,#(___str_37 >> 8)
      00368D 7F 80            [12] 9782 	mov	r7,#0x80
                                   9783 ;	calc.c:51: return;
      00368F                       9784 00215$:
                                   9785 ;	calc.c:49: for (; *s; s++) putchar(*s);
      00368F 8D 82            [24] 9786 	mov	dpl,r5
      003691 8E 83            [24] 9787 	mov	dph,r6
      003693 8F F0            [24] 9788 	mov	b,r7
      003695 12r00r00         [24] 9789 	lcall	__gptrget
      003698 FC               [12] 9790 	mov	r4,a
      003699 60 10            [24] 9791 	jz	00136$
      00369B 7B 00            [12] 9792 	mov	r3,#0x00
      00369D 8C 82            [24] 9793 	mov	dpl,r4
      00369F 8B 83            [24] 9794 	mov	dph,r3
      0036A1 12r00r00         [24] 9795 	lcall	_putchar
      0036A4 0D               [12] 9796 	inc	r5
                                   9797 ;	calc.c:441: printstr("/\tdivide top 2\r\n");
      0036A5 BD 00 E7         [24] 9798 	cjne	r5,#0x00,00215$
      0036A8 0E               [12] 9799 	inc	r6
      0036A9 80 E4            [24] 9800 	sjmp	00215$
      0036AB                       9801 00136$:
                                   9802 ;	calc.c:442: printstr("\\\tdivide top 2 unsigned\r\n");	
      0036AB 7DrB3            [12] 9803 	mov	r5,#___str_38
      0036AD 7Es02            [12] 9804 	mov	r6,#(___str_38 >> 8)
      0036AF 7F 80            [12] 9805 	mov	r7,#0x80
                                   9806 ;	calc.c:51: return;
      0036B1                       9807 00218$:
                                   9808 ;	calc.c:49: for (; *s; s++) putchar(*s);
      0036B1 8D 82            [24] 9809 	mov	dpl,r5
      0036B3 8E 83            [24] 9810 	mov	dph,r6
      0036B5 8F F0            [24] 9811 	mov	b,r7
      0036B7 12r00r00         [24] 9812 	lcall	__gptrget
      0036BA FC               [12] 9813 	mov	r4,a
      0036BB 60 10            [24] 9814 	jz	00138$
      0036BD 7B 00            [12] 9815 	mov	r3,#0x00
      0036BF 8C 82            [24] 9816 	mov	dpl,r4
      0036C1 8B 83            [24] 9817 	mov	dph,r3
      0036C3 12r00r00         [24] 9818 	lcall	_putchar
      0036C6 0D               [12] 9819 	inc	r5
                                   9820 ;	calc.c:442: printstr("\\\tdivide top 2 unsigned\r\n");	
      0036C7 BD 00 E7         [24] 9821 	cjne	r5,#0x00,00218$
      0036CA 0E               [12] 9822 	inc	r6
      0036CB 80 E4            [24] 9823 	sjmp	00218$
      0036CD                       9824 00138$:
                                   9825 ;	calc.c:443: printstr("%\tmodulus top 2\r\n");
      0036CD 7DrCD            [12] 9826 	mov	r5,#___str_39
      0036CF 7Es02            [12] 9827 	mov	r6,#(___str_39 >> 8)
      0036D1 7F 80            [12] 9828 	mov	r7,#0x80
                                   9829 ;	calc.c:51: return;
      0036D3                       9830 00221$:
                                   9831 ;	calc.c:49: for (; *s; s++) putchar(*s);
      0036D3 8D 82            [24] 9832 	mov	dpl,r5
      0036D5 8E 83            [24] 9833 	mov	dph,r6
      0036D7 8F F0            [24] 9834 	mov	b,r7
      0036D9 12r00r00         [24] 9835 	lcall	__gptrget
      0036DC FC               [12] 9836 	mov	r4,a
      0036DD 60 10            [24] 9837 	jz	00140$
      0036DF 7B 00            [12] 9838 	mov	r3,#0x00
      0036E1 8C 82            [24] 9839 	mov	dpl,r4
      0036E3 8B 83            [24] 9840 	mov	dph,r3
      0036E5 12r00r00         [24] 9841 	lcall	_putchar
      0036E8 0D               [12] 9842 	inc	r5
                                   9843 ;	calc.c:443: printstr("%\tmodulus top 2\r\n");
      0036E9 BD 00 E7         [24] 9844 	cjne	r5,#0x00,00221$
      0036EC 0E               [12] 9845 	inc	r6
      0036ED 80 E4            [24] 9846 	sjmp	00221$
      0036EF                       9847 00140$:
                                   9848 ;	calc.c:444: printstr("#\tmodulus top 2 unsigned\r\n");
      0036EF 7DrDF            [12] 9849 	mov	r5,#___str_40
      0036F1 7Es02            [12] 9850 	mov	r6,#(___str_40 >> 8)
      0036F3 7F 80            [12] 9851 	mov	r7,#0x80
                                   9852 ;	calc.c:51: return;
      0036F5                       9853 00224$:
                                   9854 ;	calc.c:49: for (; *s; s++) putchar(*s);
      0036F5 8D 82            [24] 9855 	mov	dpl,r5
      0036F7 8E 83            [24] 9856 	mov	dph,r6
      0036F9 8F F0            [24] 9857 	mov	b,r7
      0036FB 12r00r00         [24] 9858 	lcall	__gptrget
      0036FE FC               [12] 9859 	mov	r4,a
      0036FF 60 10            [24] 9860 	jz	00142$
      003701 7B 00            [12] 9861 	mov	r3,#0x00
      003703 8C 82            [24] 9862 	mov	dpl,r4
      003705 8B 83            [24] 9863 	mov	dph,r3
      003707 12r00r00         [24] 9864 	lcall	_putchar
      00370A 0D               [12] 9865 	inc	r5
                                   9866 ;	calc.c:444: printstr("#\tmodulus top 2 unsigned\r\n");
      00370B BD 00 E7         [24] 9867 	cjne	r5,#0x00,00224$
      00370E 0E               [12] 9868 	inc	r6
      00370F 80 E4            [24] 9869 	sjmp	00224$
      003711                       9870 00142$:
                                   9871 ;	calc.c:445: printstr("&\tand top 2\r\n");
      003711 7DrFA            [12] 9872 	mov	r5,#___str_41
      003713 7Es02            [12] 9873 	mov	r6,#(___str_41 >> 8)
      003715 7F 80            [12] 9874 	mov	r7,#0x80
                                   9875 ;	calc.c:51: return;
      003717                       9876 00227$:
                                   9877 ;	calc.c:49: for (; *s; s++) putchar(*s);
      003717 8D 82            [24] 9878 	mov	dpl,r5
      003719 8E 83            [24] 9879 	mov	dph,r6
      00371B 8F F0            [24] 9880 	mov	b,r7
      00371D 12r00r00         [24] 9881 	lcall	__gptrget
      003720 FC               [12] 9882 	mov	r4,a
      003721 60 10            [24] 9883 	jz	00144$
      003723 7B 00            [12] 9884 	mov	r3,#0x00
      003725 8C 82            [24] 9885 	mov	dpl,r4
      003727 8B 83            [24] 9886 	mov	dph,r3
      003729 12r00r00         [24] 9887 	lcall	_putchar
      00372C 0D               [12] 9888 	inc	r5
                                   9889 ;	calc.c:445: printstr("&\tand top 2\r\n");
      00372D BD 00 E7         [24] 9890 	cjne	r5,#0x00,00227$
      003730 0E               [12] 9891 	inc	r6
      003731 80 E4            [24] 9892 	sjmp	00227$
      003733                       9893 00144$:
                                   9894 ;	calc.c:446: printstr("|\tor top 2\r\n");
      003733 7Dr08            [12] 9895 	mov	r5,#___str_42
      003735 7Es03            [12] 9896 	mov	r6,#(___str_42 >> 8)
      003737 7F 80            [12] 9897 	mov	r7,#0x80
                                   9898 ;	calc.c:51: return;
      003739                       9899 00230$:
                                   9900 ;	calc.c:49: for (; *s; s++) putchar(*s);
      003739 8D 82            [24] 9901 	mov	dpl,r5
      00373B 8E 83            [24] 9902 	mov	dph,r6
      00373D 8F F0            [24] 9903 	mov	b,r7
      00373F 12r00r00         [24] 9904 	lcall	__gptrget
      003742 FC               [12] 9905 	mov	r4,a
      003743 60 10            [24] 9906 	jz	00146$
      003745 7B 00            [12] 9907 	mov	r3,#0x00
      003747 8C 82            [24] 9908 	mov	dpl,r4
      003749 8B 83            [24] 9909 	mov	dph,r3
      00374B 12r00r00         [24] 9910 	lcall	_putchar
      00374E 0D               [12] 9911 	inc	r5
                                   9912 ;	calc.c:446: printstr("|\tor top 2\r\n");
      00374F BD 00 E7         [24] 9913 	cjne	r5,#0x00,00230$
      003752 0E               [12] 9914 	inc	r6
      003753 80 E4            [24] 9915 	sjmp	00230$
      003755                       9916 00146$:
                                   9917 ;	calc.c:447: printstr("^\txor top 2\r\n");
      003755 7Dr15            [12] 9918 	mov	r5,#___str_43
      003757 7Es03            [12] 9919 	mov	r6,#(___str_43 >> 8)
      003759 7F 80            [12] 9920 	mov	r7,#0x80
                                   9921 ;	calc.c:51: return;
      00375B                       9922 00233$:
                                   9923 ;	calc.c:49: for (; *s; s++) putchar(*s);
      00375B 8D 82            [24] 9924 	mov	dpl,r5
      00375D 8E 83            [24] 9925 	mov	dph,r6
      00375F 8F F0            [24] 9926 	mov	b,r7
      003761 12r00r00         [24] 9927 	lcall	__gptrget
      003764 FC               [12] 9928 	mov	r4,a
      003765 60 10            [24] 9929 	jz	00148$
      003767 7B 00            [12] 9930 	mov	r3,#0x00
      003769 8C 82            [24] 9931 	mov	dpl,r4
      00376B 8B 83            [24] 9932 	mov	dph,r3
      00376D 12r00r00         [24] 9933 	lcall	_putchar
      003770 0D               [12] 9934 	inc	r5
                                   9935 ;	calc.c:447: printstr("^\txor top 2\r\n");
      003771 BD 00 E7         [24] 9936 	cjne	r5,#0x00,00233$
      003774 0E               [12] 9937 	inc	r6
      003775 80 E4            [24] 9938 	sjmp	00233$
      003777                       9939 00148$:
                                   9940 ;	calc.c:448: printstr(">\tshift right top 2\r\n");
      003777 7Dr23            [12] 9941 	mov	r5,#___str_44
      003779 7Es03            [12] 9942 	mov	r6,#(___str_44 >> 8)
      00377B 7F 80            [12] 9943 	mov	r7,#0x80
                                   9944 ;	calc.c:51: return;
      00377D                       9945 00236$:
                                   9946 ;	calc.c:49: for (; *s; s++) putchar(*s);
      00377D 8D 82            [24] 9947 	mov	dpl,r5
      00377F 8E 83            [24] 9948 	mov	dph,r6
      003781 8F F0            [24] 9949 	mov	b,r7
      003783 12r00r00         [24] 9950 	lcall	__gptrget
      003786 FC               [12] 9951 	mov	r4,a
      003787 60 10            [24] 9952 	jz	00150$
      003789 7B 00            [12] 9953 	mov	r3,#0x00
      00378B 8C 82            [24] 9954 	mov	dpl,r4
      00378D 8B 83            [24] 9955 	mov	dph,r3
      00378F 12r00r00         [24] 9956 	lcall	_putchar
      003792 0D               [12] 9957 	inc	r5
                                   9958 ;	calc.c:448: printstr(">\tshift right top 2\r\n");
      003793 BD 00 E7         [24] 9959 	cjne	r5,#0x00,00236$
      003796 0E               [12] 9960 	inc	r6
      003797 80 E4            [24] 9961 	sjmp	00236$
      003799                       9962 00150$:
                                   9963 ;	calc.c:449: printstr("]\tarithmetic shift right top 2\r\n");
      003799 7Dr39            [12] 9964 	mov	r5,#___str_45
      00379B 7Es03            [12] 9965 	mov	r6,#(___str_45 >> 8)
      00379D 7F 80            [12] 9966 	mov	r7,#0x80
                                   9967 ;	calc.c:51: return;
      00379F                       9968 00239$:
                                   9969 ;	calc.c:49: for (; *s; s++) putchar(*s);
      00379F 8D 82            [24] 9970 	mov	dpl,r5
      0037A1 8E 83            [24] 9971 	mov	dph,r6
      0037A3 8F F0            [24] 9972 	mov	b,r7
      0037A5 12r00r00         [24] 9973 	lcall	__gptrget
      0037A8 FC               [12] 9974 	mov	r4,a
      0037A9 60 10            [24] 9975 	jz	00152$
      0037AB 7B 00            [12] 9976 	mov	r3,#0x00
      0037AD 8C 82            [24] 9977 	mov	dpl,r4
      0037AF 8B 83            [24] 9978 	mov	dph,r3
      0037B1 12r00r00         [24] 9979 	lcall	_putchar
      0037B4 0D               [12] 9980 	inc	r5
                                   9981 ;	calc.c:449: printstr("]\tarithmetic shift right top 2\r\n");
      0037B5 BD 00 E7         [24] 9982 	cjne	r5,#0x00,00239$
      0037B8 0E               [12] 9983 	inc	r6
      0037B9 80 E4            [24] 9984 	sjmp	00239$
      0037BB                       9985 00152$:
                                   9986 ;	calc.c:450: printstr("<\tshift left top 2\r\n");
      0037BB 7Dr5A            [12] 9987 	mov	r5,#___str_46
      0037BD 7Es03            [12] 9988 	mov	r6,#(___str_46 >> 8)
      0037BF 7F 80            [12] 9989 	mov	r7,#0x80
                                   9990 ;	calc.c:51: return;
      0037C1                       9991 00242$:
                                   9992 ;	calc.c:49: for (; *s; s++) putchar(*s);
      0037C1 8D 82            [24] 9993 	mov	dpl,r5
      0037C3 8E 83            [24] 9994 	mov	dph,r6
      0037C5 8F F0            [24] 9995 	mov	b,r7
      0037C7 12r00r00         [24] 9996 	lcall	__gptrget
      0037CA FC               [12] 9997 	mov	r4,a
      0037CB 60 10            [24] 9998 	jz	00154$
      0037CD 7B 00            [12] 9999 	mov	r3,#0x00
      0037CF 8C 82            [24]10000 	mov	dpl,r4
      0037D1 8B 83            [24]10001 	mov	dph,r3
      0037D3 12r00r00         [24]10002 	lcall	_putchar
      0037D6 0D               [12]10003 	inc	r5
                                  10004 ;	calc.c:450: printstr("<\tshift left top 2\r\n");
      0037D7 BD 00 E7         [24]10005 	cjne	r5,#0x00,00242$
      0037DA 0E               [12]10006 	inc	r6
      0037DB 80 E4            [24]10007 	sjmp	00242$
      0037DD                      10008 00154$:
                                  10009 ;	calc.c:451: printstr("~\tbitwise not top\r\n");
      0037DD 7Dr6F            [12]10010 	mov	r5,#___str_47
      0037DF 7Es03            [12]10011 	mov	r6,#(___str_47 >> 8)
      0037E1 7F 80            [12]10012 	mov	r7,#0x80
                                  10013 ;	calc.c:51: return;
      0037E3                      10014 00245$:
                                  10015 ;	calc.c:49: for (; *s; s++) putchar(*s);
      0037E3 8D 82            [24]10016 	mov	dpl,r5
      0037E5 8E 83            [24]10017 	mov	dph,r6
      0037E7 8F F0            [24]10018 	mov	b,r7
      0037E9 12r00r00         [24]10019 	lcall	__gptrget
      0037EC FC               [12]10020 	mov	r4,a
      0037ED 60 10            [24]10021 	jz	00156$
      0037EF 7B 00            [12]10022 	mov	r3,#0x00
      0037F1 8C 82            [24]10023 	mov	dpl,r4
      0037F3 8B 83            [24]10024 	mov	dph,r3
      0037F5 12r00r00         [24]10025 	lcall	_putchar
      0037F8 0D               [12]10026 	inc	r5
                                  10027 ;	calc.c:451: printstr("~\tbitwise not top\r\n");
      0037F9 BD 00 E7         [24]10028 	cjne	r5,#0x00,00245$
      0037FC 0E               [12]10029 	inc	r6
      0037FD 80 E4            [24]10030 	sjmp	00245$
      0037FF                      10031 00156$:
                                  10032 ;	calc.c:452: printstr("s\tstatus\r\n");
      0037FF 7Dr83            [12]10033 	mov	r5,#___str_48
      003801 7Es03            [12]10034 	mov	r6,#(___str_48 >> 8)
      003803 7F 80            [12]10035 	mov	r7,#0x80
                                  10036 ;	calc.c:51: return;
      003805                      10037 00248$:
                                  10038 ;	calc.c:49: for (; *s; s++) putchar(*s);
      003805 8D 82            [24]10039 	mov	dpl,r5
      003807 8E 83            [24]10040 	mov	dph,r6
      003809 8F F0            [24]10041 	mov	b,r7
      00380B 12r00r00         [24]10042 	lcall	__gptrget
      00380E FC               [12]10043 	mov	r4,a
      00380F 60 10            [24]10044 	jz	00158$
      003811 7B 00            [12]10045 	mov	r3,#0x00
      003813 8C 82            [24]10046 	mov	dpl,r4
      003815 8B 83            [24]10047 	mov	dph,r3
      003817 12r00r00         [24]10048 	lcall	_putchar
      00381A 0D               [12]10049 	inc	r5
                                  10050 ;	calc.c:452: printstr("s\tstatus\r\n");
      00381B BD 00 E7         [24]10051 	cjne	r5,#0x00,00248$
      00381E 0E               [12]10052 	inc	r6
      00381F 80 E4            [24]10053 	sjmp	00248$
      003821                      10054 00158$:
                                  10055 ;	calc.c:453: printstr("?\thelp\r\n");
      003821 7Dr8E            [12]10056 	mov	r5,#___str_49
      003823 7Es03            [12]10057 	mov	r6,#(___str_49 >> 8)
      003825 7F 80            [12]10058 	mov	r7,#0x80
                                  10059 ;	calc.c:51: return;
      003827                      10060 00251$:
                                  10061 ;	calc.c:49: for (; *s; s++) putchar(*s);
      003827 8D 82            [24]10062 	mov	dpl,r5
      003829 8E 83            [24]10063 	mov	dph,r6
      00382B 8F F0            [24]10064 	mov	b,r7
      00382D 12r00r00         [24]10065 	lcall	__gptrget
      003830 FC               [12]10066 	mov	r4,a
      003831 60 10            [24]10067 	jz	00160$
      003833 7B 00            [12]10068 	mov	r3,#0x00
      003835 8C 82            [24]10069 	mov	dpl,r4
      003837 8B 83            [24]10070 	mov	dph,r3
      003839 12r00r00         [24]10071 	lcall	_putchar
      00383C 0D               [12]10072 	inc	r5
                                  10073 ;	calc.c:453: printstr("?\thelp\r\n");
      00383D BD 00 E7         [24]10074 	cjne	r5,#0x00,00251$
      003840 0E               [12]10075 	inc	r6
      003841 80 E4            [24]10076 	sjmp	00251$
      003843                      10077 00160$:
                                  10078 ;	calc.c:454: printstr("q\tquit\r\n");
      003843 7Dr97            [12]10079 	mov	r5,#___str_50
      003845 7Es03            [12]10080 	mov	r6,#(___str_50 >> 8)
      003847 7F 80            [12]10081 	mov	r7,#0x80
                                  10082 ;	calc.c:51: return;
      003849                      10083 00254$:
                                  10084 ;	calc.c:49: for (; *s; s++) putchar(*s);
      003849 8D 82            [24]10085 	mov	dpl,r5
      00384B 8E 83            [24]10086 	mov	dph,r6
      00384D 8F F0            [24]10087 	mov	b,r7
      00384F 12r00r00         [24]10088 	lcall	__gptrget
      003852 FC               [12]10089 	mov	r4,a
      003853 60 10            [24]10090 	jz	00162$
      003855 7B 00            [12]10091 	mov	r3,#0x00
      003857 8C 82            [24]10092 	mov	dpl,r4
      003859 8B 83            [24]10093 	mov	dph,r3
      00385B 12r00r00         [24]10094 	lcall	_putchar
      00385E 0D               [12]10095 	inc	r5
                                  10096 ;	calc.c:454: printstr("q\tquit\r\n");
      00385F BD 00 E7         [24]10097 	cjne	r5,#0x00,00254$
      003862 0E               [12]10098 	inc	r6
      003863 80 E4            [24]10099 	sjmp	00254$
      003865                      10100 00162$:
                                  10101 ;	calc.c:456: return 1;
      003865 90 00 01         [24]10102 	mov	dptr,#0x0001
                                  10103 ;	calc.c:457: }
      003868 D0*00            [24]10104 	pop	_bp
      00386A 22               [24]10105 	ret
                                  10106 ;------------------------------------------------------------
                                  10107 ;Allocation info for local variables in function 'main'
                                  10108 ;------------------------------------------------------------
                                  10109 ;input                     Allocated to registers r6 r7 
                                  10110 ;__1966080213              Allocated to registers 
                                  10111 ;s                         Allocated to registers r2 r3 r4 
                                  10112 ;__1310720215              Allocated to registers 
                                  10113 ;s                         Allocated to registers r5 r6 r7 
                                  10114 ;sloc0                     Allocated to stack - _bp +1
                                  10115 ;------------------------------------------------------------
                                  10116 ;	calc.c:487: void main(void) {
                                  10117 ;	-----------------------------------------
                                  10118 ;	 function main
                                  10119 ;	-----------------------------------------
      00386B                      10120 _main:
      00386B C0*00            [24]10121 	push	_bp
      00386D 85 81*00         [24]10122 	mov	_bp,sp
      003870 05 81            [12]10123 	inc	sp
                                  10124 ;	calc.c:490: c.base = 10;
      003872 90r00r0C         [24]10125 	mov	dptr,#_c
      003875 74 0A            [12]10126 	mov	a,#0x0a
      003877 F0               [24]10127 	movx	@dptr,a
      003878 E4               [12]10128 	clr	a
      003879 A3               [24]10129 	inc	dptr
      00387A F0               [24]10130 	movx	@dptr,a
                                  10131 ;	calc.c:491: c.acc = 0l;
      00387B 90r00r0E         [24]10132 	mov	dptr,#(_c + 0x0002)
      00387E F0               [24]10133 	movx	@dptr,a
      00387F A3               [24]10134 	inc	dptr
      003880 F0               [24]10135 	movx	@dptr,a
      003881 A3               [24]10136 	inc	dptr
      003882 F0               [24]10137 	movx	@dptr,a
      003883 A3               [24]10138 	inc	dptr
      003884 F0               [24]10139 	movx	@dptr,a
                                  10140 ;	calc.c:492: c.acc_valid = (char)0;
      003885 90r00r12         [24]10141 	mov	dptr,#(_c + 0x0006)
      003888 F0               [24]10142 	movx	@dptr,a
                                  10143 ;	calc.c:493: c.digit[0] = c.digit[1] = '\0';
      003889 90r00r14         [24]10144 	mov	dptr,#(_c + 0x0008)
      00388C F0               [24]10145 	movx	@dptr,a
      00388D 90r00r13         [24]10146 	mov	dptr,#(_c + 0x0007)
      003890 F0               [24]10147 	movx	@dptr,a
                                  10148 ;	calc.c:495: c.ps = &c.s0;
      003891 90r40r1F         [24]10149 	mov	dptr,#(_c + 0x4013)
      003894 74r15            [12]10150 	mov	a,#(_c + 0x0009)
      003896 F0               [24]10151 	movx	@dptr,a
      003897 74s00            [12]10152 	mov	a,#((_c + 0x0009) >> 8)
      003899 A3               [24]10153 	inc	dptr
      00389A F0               [24]10154 	movx	@dptr,a
      00389B E4               [12]10155 	clr	a
      00389C A3               [24]10156 	inc	dptr
      00389D F0               [24]10157 	movx	@dptr,a
                                  10158 ;	calc.c:496: c.ss = &c.s1;
      00389E 90r40r22         [24]10159 	mov	dptr,#(_c + 0x4016)
      0038A1 74r1A            [12]10160 	mov	a,#(_c + 0x200e)
      0038A3 F0               [24]10161 	movx	@dptr,a
      0038A4 74s20            [12]10162 	mov	a,#((_c + 0x200e) >> 8)
      0038A6 A3               [24]10163 	inc	dptr
      0038A7 F0               [24]10164 	movx	@dptr,a
      0038A8 E4               [12]10165 	clr	a
      0038A9 A3               [24]10166 	inc	dptr
      0038AA F0               [24]10167 	movx	@dptr,a
                                  10168 ;	calc.c:497: stack_init(c.ps);
      0038AB 90r00r15         [24]10169 	mov	dptr,#(_c + 0x0009)
      0038AE 75 F0 00         [24]10170 	mov	b,#0x00
      0038B1 12r00r00         [24]10171 	lcall	_stack_init
                                  10172 ;	calc.c:498: stack_init(c.ss);
      0038B4 90r40r22         [24]10173 	mov	dptr,#(_c + 0x4016)
      0038B7 E0               [24]10174 	movx	a,@dptr
      0038B8 FD               [12]10175 	mov	r5,a
      0038B9 A3               [24]10176 	inc	dptr
      0038BA E0               [24]10177 	movx	a,@dptr
      0038BB FE               [12]10178 	mov	r6,a
      0038BC A3               [24]10179 	inc	dptr
      0038BD E0               [24]10180 	movx	a,@dptr
      0038BE FF               [12]10181 	mov	r7,a
      0038BF 8D 82            [24]10182 	mov	dpl,r5
      0038C1 8E 83            [24]10183 	mov	dph,r6
      0038C3 8F F0            [24]10184 	mov	b,r7
      0038C5 12r00r00         [24]10185 	lcall	_stack_init
                                  10186 ;	calc.c:500: state_init(&s, STATE_START, STATE_FINAL, UNDEF, deltas, &c);
      0038C8 74r0C            [12]10187 	mov	a,#_c
      0038CA C0 E0            [24]10188 	push	acc
      0038CC 74s00            [12]10189 	mov	a,#(_c >> 8)
      0038CE C0 E0            [24]10190 	push	acc
      0038D0 E4               [12]10191 	clr	a
      0038D1 C0 E0            [24]10192 	push	acc
      0038D3 74r00            [12]10193 	mov	a,#_deltas
      0038D5 C0 E0            [24]10194 	push	acc
      0038D7 74s00            [12]10195 	mov	a,#(_deltas >> 8)
      0038D9 C0 E0            [24]10196 	push	acc
      0038DB E4               [12]10197 	clr	a
      0038DC C0 E0            [24]10198 	push	acc
      0038DE C0 E0            [24]10199 	push	acc
      0038E0 74 80            [12]10200 	mov	a,#0x80
      0038E2 C0 E0            [24]10201 	push	acc
      0038E4 74 03            [12]10202 	mov	a,#0x03
      0038E6 C0 E0            [24]10203 	push	acc
      0038E8 E4               [12]10204 	clr	a
      0038E9 C0 E0            [24]10205 	push	acc
      0038EB C0 E0            [24]10206 	push	acc
      0038ED C0 E0            [24]10207 	push	acc
      0038EF 90r00r00         [24]10208 	mov	dptr,#_s
      0038F2 75 F0 00         [24]10209 	mov	b,#0x00
      0038F5 12r00r00         [24]10210 	lcall	_state_init
      0038F8 E5 81            [12]10211 	mov	a,sp
      0038FA 24 F4            [12]10212 	add	a,#0xf4
      0038FC F5 81            [12]10213 	mov	sp,a
                                  10214 ;	calc.c:502: (void)status(&c, deltas);
      0038FE 74r00            [12]10215 	mov	a,#_deltas
      003900 C0 E0            [24]10216 	push	acc
      003902 74s00            [12]10217 	mov	a,#(_deltas >> 8)
      003904 C0 E0            [24]10218 	push	acc
      003906 E4               [12]10219 	clr	a
      003907 C0 E0            [24]10220 	push	acc
      003909 90r00r0C         [24]10221 	mov	dptr,#_c
      00390C 75 F0 00         [24]10222 	mov	b,#0x00
      00390F 12r2CrD0         [24]10223 	lcall	_status
      003912 15 81            [12]10224 	dec	sp
      003914 15 81            [12]10225 	dec	sp
      003916 15 81            [12]10226 	dec	sp
                                  10227 ;	calc.c:504: while (1) {
      003918                      10228 00192$:
                                  10229 ;	calc.c:505: input = getchar();
      003918 12r00r05         [24]10230 	lcall	_getchar
      00391B AE 82            [24]10231 	mov	r6,dpl
      00391D AF 83            [24]10232 	mov	r7,dph
                                  10233 ;	calc.c:506: if (((char)input == '\r') || ((char)input == '\n')) printstr("\r\n");
      00391F 8E 05            [24]10234 	mov	ar5,r6
      003921 BD 0D 02         [24]10235 	cjne	r5,#0x0d,00400$
      003924 80 03            [24]10236 	sjmp	00101$
      003926                      10237 00400$:
      003926 BD 0A 36         [24]10238 	cjne	r5,#0x0a,00102$
      003929                      10239 00101$:
      003929 7Ar0F            [12]10240 	mov	r2,#___str_2
      00392B 7Bs00            [12]10241 	mov	r3,#(___str_2 >> 8)
      00392D 7C 80            [12]10242 	mov	r4,#0x80
                                  10243 ;	calc.c:51: return;
      00392F                      10244 00199$:
                                  10245 ;	calc.c:49: for (; *s; s++) putchar(*s);
      00392F 8A 82            [24]10246 	mov	dpl,r2
      003931 8B 83            [24]10247 	mov	dph,r3
      003933 8C F0            [24]10248 	mov	b,r4
      003935 A8*00            [24]10249 	mov	r0,_bp
      003937 08               [12]10250 	inc	r0
      003938 12r00r00         [24]10251 	lcall	__gptrget
      00393B F6               [12]10252 	mov	@r0,a
      00393C A8*00            [24]10253 	mov	r0,_bp
      00393E 08               [12]10254 	inc	r0
      00393F E6               [12]10255 	mov	a,@r0
      003940 60 24            [24]10256 	jz	00103$
      003942 C0 06            [24]10257 	push	ar6
      003944 C0 07            [24]10258 	push	ar7
      003946 A8*00            [24]10259 	mov	r0,_bp
      003948 08               [12]10260 	inc	r0
      003949 86 06            [24]10261 	mov	ar6,@r0
      00394B 7F 00            [12]10262 	mov	r7,#0x00
      00394D 8E 82            [24]10263 	mov	dpl,r6
      00394F 8F 83            [24]10264 	mov	dph,r7
      003951 12r00r00         [24]10265 	lcall	_putchar
      003954 0A               [12]10266 	inc	r2
      003955 BA 00 01         [24]10267 	cjne	r2,#0x00,00404$
      003958 0B               [12]10268 	inc	r3
      003959                      10269 00404$:
      003959 D0 07            [24]10270 	pop	ar7
      00395B D0 06            [24]10271 	pop	ar6
                                  10272 ;	calc.c:506: if (((char)input == '\r') || ((char)input == '\n')) printstr("\r\n");
      00395D 80 D0            [24]10273 	sjmp	00199$
      00395F                      10274 00102$:
                                  10275 ;	calc.c:507: else (void)putchar(input);
      00395F 8E 82            [24]10276 	mov	dpl,r6
      003961 8F 83            [24]10277 	mov	dph,r7
      003963 12r00r00         [24]10278 	lcall	_putchar
      003966                      10279 00103$:
                                  10280 ;	calc.c:508: c.digit[0] = (char)input;
      003966 90r00r13         [24]10281 	mov	dptr,#(_c + 0x0007)
      003969 ED               [12]10282 	mov	a,r5
      00396A F0               [24]10283 	movx	@dptr,a
                                  10284 ;	calc.c:510: if ((char)input == 'q') {
      00396B BD 71 29         [24]10285 	cjne	r5,#0x71,00189$
                                  10286 ;	calc.c:511: if (state_exec(&s, EVENT_TERM) <= 0) break;
      00396E 74 08            [12]10287 	mov	a,#0x08
      003970 C0 E0            [24]10288 	push	acc
      003972 E4               [12]10289 	clr	a
      003973 C0 E0            [24]10290 	push	acc
      003975 90r00r00         [24]10291 	mov	dptr,#_s
      003978 75 F0 00         [24]10292 	mov	b,#0x00
      00397B 12r00r00         [24]10293 	lcall	_state_exec
      00397E AB 82            [24]10294 	mov	r3,dpl
      003980 AC 83            [24]10295 	mov	r4,dph
      003982 15 81            [12]10296 	dec	sp
      003984 15 81            [12]10297 	dec	sp
      003986 C3               [12]10298 	clr	c
      003987 E4               [12]10299 	clr	a
      003988 9B               [12]10300 	subb	a,r3
      003989 74 80            [12]10301 	mov	a,#(0x00 ^ 0x80)
      00398B 8C F0            [24]10302 	mov	b,r4
      00398D 63 F0 80         [24]10303 	xrl	b,#0x80
      003990 95 F0            [12]10304 	subb	a,b
      003992 40 84            [24]10305 	jc	00192$
      003994 02r3Cr46         [24]10306 	ljmp	00193$
      003997                      10307 00189$:
                                  10308 ;	calc.c:512: } else if ((char)input == 's') {
      003997 BD 73 2C         [24]10309 	cjne	r5,#0x73,00186$
                                  10310 ;	calc.c:513: if (state_exec(&s, EVENT_STATUS) <= 0) break;
      00399A 74 03            [12]10311 	mov	a,#0x03
      00399C C0 E0            [24]10312 	push	acc
      00399E E4               [12]10313 	clr	a
      00399F C0 E0            [24]10314 	push	acc
      0039A1 90r00r00         [24]10315 	mov	dptr,#_s
      0039A4 75 F0 00         [24]10316 	mov	b,#0x00
      0039A7 12r00r00         [24]10317 	lcall	_state_exec
      0039AA AB 82            [24]10318 	mov	r3,dpl
      0039AC AC 83            [24]10319 	mov	r4,dph
      0039AE 15 81            [12]10320 	dec	sp
      0039B0 15 81            [12]10321 	dec	sp
      0039B2 C3               [12]10322 	clr	c
      0039B3 E4               [12]10323 	clr	a
      0039B4 9B               [12]10324 	subb	a,r3
      0039B5 74 80            [12]10325 	mov	a,#(0x00 ^ 0x80)
      0039B7 8C F0            [24]10326 	mov	b,r4
      0039B9 63 F0 80         [24]10327 	xrl	b,#0x80
      0039BC 95 F0            [12]10328 	subb	a,b
      0039BE 50 03            [24]10329 	jnc	00410$
      0039C0 02r39r18         [24]10330 	ljmp	00192$
      0039C3                      10331 00410$:
      0039C3 02r3Cr46         [24]10332 	ljmp	00193$
      0039C6                      10333 00186$:
                                  10334 ;	calc.c:514: } else if ((char)input == '?') {
      0039C6 BD 3F 2C         [24]10335 	cjne	r5,#0x3f,00183$
                                  10336 ;	calc.c:515: if (state_exec(&s, EVENT_HELP) <= 0) break;
      0039C9 74 04            [12]10337 	mov	a,#0x04
      0039CB C0 E0            [24]10338 	push	acc
      0039CD E4               [12]10339 	clr	a
      0039CE C0 E0            [24]10340 	push	acc
      0039D0 90r00r00         [24]10341 	mov	dptr,#_s
      0039D3 75 F0 00         [24]10342 	mov	b,#0x00
      0039D6 12r00r00         [24]10343 	lcall	_state_exec
      0039D9 AB 82            [24]10344 	mov	r3,dpl
      0039DB AC 83            [24]10345 	mov	r4,dph
      0039DD 15 81            [12]10346 	dec	sp
      0039DF 15 81            [12]10347 	dec	sp
      0039E1 C3               [12]10348 	clr	c
      0039E2 E4               [12]10349 	clr	a
      0039E3 9B               [12]10350 	subb	a,r3
      0039E4 74 80            [12]10351 	mov	a,#(0x00 ^ 0x80)
      0039E6 8C F0            [24]10352 	mov	b,r4
      0039E8 63 F0 80         [24]10353 	xrl	b,#0x80
      0039EB 95 F0            [12]10354 	subb	a,b
      0039ED 50 03            [24]10355 	jnc	00413$
      0039EF 02r39r18         [24]10356 	ljmp	00192$
      0039F2                      10357 00413$:
      0039F2 02r3Cr46         [24]10358 	ljmp	00193$
      0039F5                      10359 00183$:
                                  10360 ;	calc.c:516: } else if ((char)input == 'i') {
      0039F5 BD 69 2C         [24]10361 	cjne	r5,#0x69,00180$
                                  10362 ;	calc.c:517: if (state_exec(&s, EVENT_RSTA_i) <= 0) break;
      0039F8 74 06            [12]10363 	mov	a,#0x06
      0039FA C0 E0            [24]10364 	push	acc
      0039FC E4               [12]10365 	clr	a
      0039FD C0 E0            [24]10366 	push	acc
      0039FF 90r00r00         [24]10367 	mov	dptr,#_s
      003A02 75 F0 00         [24]10368 	mov	b,#0x00
      003A05 12r00r00         [24]10369 	lcall	_state_exec
      003A08 AB 82            [24]10370 	mov	r3,dpl
      003A0A AC 83            [24]10371 	mov	r4,dph
      003A0C 15 81            [12]10372 	dec	sp
      003A0E 15 81            [12]10373 	dec	sp
      003A10 C3               [12]10374 	clr	c
      003A11 E4               [12]10375 	clr	a
      003A12 9B               [12]10376 	subb	a,r3
      003A13 74 80            [12]10377 	mov	a,#(0x00 ^ 0x80)
      003A15 8C F0            [24]10378 	mov	b,r4
      003A17 63 F0 80         [24]10379 	xrl	b,#0x80
      003A1A 95 F0            [12]10380 	subb	a,b
      003A1C 50 03            [24]10381 	jnc	00416$
      003A1E 02r39r18         [24]10382 	ljmp	00192$
      003A21                      10383 00416$:
      003A21 02r3Cr46         [24]10384 	ljmp	00193$
      003A24                      10385 00180$:
                                  10386 ;	calc.c:518: } else if ((char)input == 'I') {
      003A24 BD 49 2C         [24]10387 	cjne	r5,#0x49,00177$
                                  10388 ;	calc.c:519: if (state_exec(&s, EVENT_RSTA_I) <= 0) break;
      003A27 74 07            [12]10389 	mov	a,#0x07
      003A29 C0 E0            [24]10390 	push	acc
      003A2B E4               [12]10391 	clr	a
      003A2C C0 E0            [24]10392 	push	acc
      003A2E 90r00r00         [24]10393 	mov	dptr,#_s
      003A31 75 F0 00         [24]10394 	mov	b,#0x00
      003A34 12r00r00         [24]10395 	lcall	_state_exec
      003A37 AB 82            [24]10396 	mov	r3,dpl
      003A39 AC 83            [24]10397 	mov	r4,dph
      003A3B 15 81            [12]10398 	dec	sp
      003A3D 15 81            [12]10399 	dec	sp
      003A3F C3               [12]10400 	clr	c
      003A40 E4               [12]10401 	clr	a
      003A41 9B               [12]10402 	subb	a,r3
      003A42 74 80            [12]10403 	mov	a,#(0x00 ^ 0x80)
      003A44 8C F0            [24]10404 	mov	b,r4
      003A46 63 F0 80         [24]10405 	xrl	b,#0x80
      003A49 95 F0            [12]10406 	subb	a,b
      003A4B 50 03            [24]10407 	jnc	00419$
      003A4D 02r39r18         [24]10408 	ljmp	00192$
      003A50                      10409 00419$:
      003A50 02r3Cr46         [24]10410 	ljmp	00193$
      003A53                      10411 00177$:
                                  10412 ;	calc.c:521: ((char)input == 'h') || ((char)input == 'H') ||
      003A53 BD 68 02         [24]10413 	cjne	r5,#0x68,00420$
      003A56 80 0D            [24]10414 	sjmp	00170$
      003A58                      10415 00420$:
      003A58 BD 48 02         [24]10416 	cjne	r5,#0x48,00421$
      003A5B 80 08            [24]10417 	sjmp	00170$
      003A5D                      10418 00421$:
                                  10419 ;	calc.c:522: ((char)input == 'o') || ((char)input == 'O')
      003A5D BD 6F 02         [24]10420 	cjne	r5,#0x6f,00422$
      003A60 80 03            [24]10421 	sjmp	00170$
      003A62                      10422 00422$:
      003A62 BD 4F 2C         [24]10423 	cjne	r5,#0x4f,00171$
      003A65                      10424 00170$:
                                  10425 ;	calc.c:524: if (state_exec(&s, EVENT_BASE) <= 0) break;
      003A65 74 05            [12]10426 	mov	a,#0x05
      003A67 C0 E0            [24]10427 	push	acc
      003A69 E4               [12]10428 	clr	a
      003A6A C0 E0            [24]10429 	push	acc
      003A6C 90r00r00         [24]10430 	mov	dptr,#_s
      003A6F 75 F0 00         [24]10431 	mov	b,#0x00
      003A72 12r00r00         [24]10432 	lcall	_state_exec
      003A75 AB 82            [24]10433 	mov	r3,dpl
      003A77 AC 83            [24]10434 	mov	r4,dph
      003A79 15 81            [12]10435 	dec	sp
      003A7B 15 81            [12]10436 	dec	sp
      003A7D C3               [12]10437 	clr	c
      003A7E E4               [12]10438 	clr	a
      003A7F 9B               [12]10439 	subb	a,r3
      003A80 74 80            [12]10440 	mov	a,#(0x00 ^ 0x80)
      003A82 8C F0            [24]10441 	mov	b,r4
      003A84 63 F0 80         [24]10442 	xrl	b,#0x80
      003A87 95 F0            [12]10443 	subb	a,b
      003A89 50 03            [24]10444 	jnc	00425$
      003A8B 02r39r18         [24]10445 	ljmp	00192$
      003A8E                      10446 00425$:
      003A8E 02r3Cr46         [24]10447 	ljmp	00193$
      003A91                      10448 00171$:
                                  10449 ;	calc.c:525: } else if (isxdigit(input)) {
      003A91 8E 82            [24]10450 	mov	dpl,r6
      003A93 8F 83            [24]10451 	mov	dph,r7
      003A95 C0 05            [24]10452 	push	ar5
      003A97 12r00r00         [24]10453 	lcall	_isxdigit
      003A9A E5 82            [12]10454 	mov	a,dpl
      003A9C 85 83 F0         [24]10455 	mov	b,dph
      003A9F D0 05            [24]10456 	pop	ar5
      003AA1 45 F0            [12]10457 	orl	a,b
      003AA3 60 2C            [24]10458 	jz	00168$
                                  10459 ;	calc.c:526: if (state_exec(&s, EVENT_DIGIT) <= 0) break;
      003AA5 74 01            [12]10460 	mov	a,#0x01
      003AA7 C0 E0            [24]10461 	push	acc
      003AA9 E4               [12]10462 	clr	a
      003AAA C0 E0            [24]10463 	push	acc
      003AAC 90r00r00         [24]10464 	mov	dptr,#_s
      003AAF 75 F0 00         [24]10465 	mov	b,#0x00
      003AB2 12r00r00         [24]10466 	lcall	_state_exec
      003AB5 AE 82            [24]10467 	mov	r6,dpl
      003AB7 AF 83            [24]10468 	mov	r7,dph
      003AB9 15 81            [12]10469 	dec	sp
      003ABB 15 81            [12]10470 	dec	sp
      003ABD C3               [12]10471 	clr	c
      003ABE E4               [12]10472 	clr	a
      003ABF 9E               [12]10473 	subb	a,r6
      003AC0 74 80            [12]10474 	mov	a,#(0x00 ^ 0x80)
      003AC2 8F F0            [24]10475 	mov	b,r7
      003AC4 63 F0 80         [24]10476 	xrl	b,#0x80
      003AC7 95 F0            [12]10477 	subb	a,b
      003AC9 50 03            [24]10478 	jnc	00427$
      003ACB 02r39r18         [24]10479 	ljmp	00192$
      003ACE                      10480 00427$:
      003ACE 02r3Cr46         [24]10481 	ljmp	00193$
      003AD1                      10482 00168$:
                                  10483 ;	calc.c:528: ((char)input == 'p') || ((char)input == 'P') ||
      003AD1 BD 70 02         [24]10484 	cjne	r5,#0x70,00428$
      003AD4 80 17            [24]10485 	sjmp	00159$
      003AD6                      10486 00428$:
      003AD6 BD 50 02         [24]10487 	cjne	r5,#0x50,00429$
      003AD9 80 12            [24]10488 	sjmp	00159$
      003ADB                      10489 00429$:
                                  10490 ;	calc.c:529: ((char)input == 'v') || ((char)input == 'V') ||
      003ADB BD 76 02         [24]10491 	cjne	r5,#0x76,00430$
      003ADE 80 0D            [24]10492 	sjmp	00159$
      003AE0                      10493 00430$:
      003AE0 BD 56 02         [24]10494 	cjne	r5,#0x56,00431$
      003AE3 80 08            [24]10495 	sjmp	00159$
      003AE5                      10496 00431$:
                                  10497 ;	calc.c:530: ((char)input == '.') ||
      003AE5 BD 2E 02         [24]10498 	cjne	r5,#0x2e,00432$
      003AE8 80 03            [24]10499 	sjmp	00159$
      003AEA                      10500 00432$:
                                  10501 ;	calc.c:531: ((char)input == 'x')
      003AEA BD 78 2C         [24]10502 	cjne	r5,#0x78,00160$
      003AED                      10503 00159$:
                                  10504 ;	calc.c:533: if (state_exec(&s, EVENT_OP) <= 0) break;
      003AED 74 02            [12]10505 	mov	a,#0x02
      003AEF C0 E0            [24]10506 	push	acc
      003AF1 E4               [12]10507 	clr	a
      003AF2 C0 E0            [24]10508 	push	acc
      003AF4 90r00r00         [24]10509 	mov	dptr,#_s
      003AF7 75 F0 00         [24]10510 	mov	b,#0x00
      003AFA 12r00r00         [24]10511 	lcall	_state_exec
      003AFD AE 82            [24]10512 	mov	r6,dpl
      003AFF AF 83            [24]10513 	mov	r7,dph
      003B01 15 81            [12]10514 	dec	sp
      003B03 15 81            [12]10515 	dec	sp
      003B05 C3               [12]10516 	clr	c
      003B06 E4               [12]10517 	clr	a
      003B07 9E               [12]10518 	subb	a,r6
      003B08 74 80            [12]10519 	mov	a,#(0x00 ^ 0x80)
      003B0A 8F F0            [24]10520 	mov	b,r7
      003B0C 63 F0 80         [24]10521 	xrl	b,#0x80
      003B0F 95 F0            [12]10522 	subb	a,b
      003B11 50 03            [24]10523 	jnc	00435$
      003B13 02r39r18         [24]10524 	ljmp	00192$
      003B16                      10525 00435$:
      003B16 02r3Cr46         [24]10526 	ljmp	00193$
      003B19                      10527 00160$:
                                  10528 ;	calc.c:535: ((char)input == 'X') || ((char)input == 'T') ||
      003B19 BD 58 02         [24]10529 	cjne	r5,#0x58,00436$
      003B1C 80 17            [24]10530 	sjmp	00151$
      003B1E                      10531 00436$:
      003B1E BD 54 02         [24]10532 	cjne	r5,#0x54,00437$
      003B21 80 12            [24]10533 	sjmp	00151$
      003B23                      10534 00437$:
                                  10535 ;	calc.c:536: ((char)input == 'm') || ((char)input == 'M') ||
      003B23 BD 6D 02         [24]10536 	cjne	r5,#0x6d,00438$
      003B26 80 0D            [24]10537 	sjmp	00151$
      003B28                      10538 00438$:
      003B28 BD 4D 02         [24]10539 	cjne	r5,#0x4d,00439$
      003B2B 80 08            [24]10540 	sjmp	00151$
      003B2D                      10541 00439$:
                                  10542 ;	calc.c:537: ((char)input == 'u') || ((char)input == 'U')
      003B2D BD 75 02         [24]10543 	cjne	r5,#0x75,00440$
      003B30 80 03            [24]10544 	sjmp	00151$
      003B32                      10545 00440$:
      003B32 BD 55 2C         [24]10546 	cjne	r5,#0x55,00152$
      003B35                      10547 00151$:
                                  10548 ;	calc.c:539: if (state_exec(&s, EVENT_OP) <= 0) break;
      003B35 74 02            [12]10549 	mov	a,#0x02
      003B37 C0 E0            [24]10550 	push	acc
      003B39 E4               [12]10551 	clr	a
      003B3A C0 E0            [24]10552 	push	acc
      003B3C 90r00r00         [24]10553 	mov	dptr,#_s
      003B3F 75 F0 00         [24]10554 	mov	b,#0x00
      003B42 12r00r00         [24]10555 	lcall	_state_exec
      003B45 AE 82            [24]10556 	mov	r6,dpl
      003B47 AF 83            [24]10557 	mov	r7,dph
      003B49 15 81            [12]10558 	dec	sp
      003B4B 15 81            [12]10559 	dec	sp
      003B4D C3               [12]10560 	clr	c
      003B4E E4               [12]10561 	clr	a
      003B4F 9E               [12]10562 	subb	a,r6
      003B50 74 80            [12]10563 	mov	a,#(0x00 ^ 0x80)
      003B52 8F F0            [24]10564 	mov	b,r7
      003B54 63 F0 80         [24]10565 	xrl	b,#0x80
      003B57 95 F0            [12]10566 	subb	a,b
      003B59 50 03            [24]10567 	jnc	00443$
      003B5B 02r39r18         [24]10568 	ljmp	00192$
      003B5E                      10569 00443$:
      003B5E 02r3Cr46         [24]10570 	ljmp	00193$
      003B61                      10571 00152$:
                                  10572 ;	calc.c:541: ((char)input == '+') || ((char)input == '-')
      003B61 BD 2B 02         [24]10573 	cjne	r5,#0x2b,00444$
      003B64 80 03            [24]10574 	sjmp	00147$
      003B66                      10575 00444$:
      003B66 BD 2D 2C         [24]10576 	cjne	r5,#0x2d,00148$
      003B69                      10577 00147$:
                                  10578 ;	calc.c:543: if (state_exec(&s, EVENT_OP) <= 0) break;
      003B69 74 02            [12]10579 	mov	a,#0x02
      003B6B C0 E0            [24]10580 	push	acc
      003B6D E4               [12]10581 	clr	a
      003B6E C0 E0            [24]10582 	push	acc
      003B70 90r00r00         [24]10583 	mov	dptr,#_s
      003B73 75 F0 00         [24]10584 	mov	b,#0x00
      003B76 12r00r00         [24]10585 	lcall	_state_exec
      003B79 AE 82            [24]10586 	mov	r6,dpl
      003B7B AF 83            [24]10587 	mov	r7,dph
      003B7D 15 81            [12]10588 	dec	sp
      003B7F 15 81            [12]10589 	dec	sp
      003B81 C3               [12]10590 	clr	c
      003B82 E4               [12]10591 	clr	a
      003B83 9E               [12]10592 	subb	a,r6
      003B84 74 80            [12]10593 	mov	a,#(0x00 ^ 0x80)
      003B86 8F F0            [24]10594 	mov	b,r7
      003B88 63 F0 80         [24]10595 	xrl	b,#0x80
      003B8B 95 F0            [12]10596 	subb	a,b
      003B8D 50 03            [24]10597 	jnc	00447$
      003B8F 02r39r18         [24]10598 	ljmp	00192$
      003B92                      10599 00447$:
      003B92 02r3Cr46         [24]10600 	ljmp	00193$
      003B95                      10601 00148$:
                                  10602 ;	calc.c:545: ((char)input == '*') ||
      003B95 BD 2A 02         [24]10603 	cjne	r5,#0x2a,00448$
      003B98 80 12            [24]10604 	sjmp	00140$
      003B9A                      10605 00448$:
                                  10606 ;	calc.c:546: ((char)input == '/') || ((char)input == '\\') ||
      003B9A BD 2F 02         [24]10607 	cjne	r5,#0x2f,00449$
      003B9D 80 0D            [24]10608 	sjmp	00140$
      003B9F                      10609 00449$:
      003B9F BD 5C 02         [24]10610 	cjne	r5,#0x5c,00450$
      003BA2 80 08            [24]10611 	sjmp	00140$
      003BA4                      10612 00450$:
                                  10613 ;	calc.c:547: ((char)input == '%') || ((char)input == '#')
      003BA4 BD 25 02         [24]10614 	cjne	r5,#0x25,00451$
      003BA7 80 03            [24]10615 	sjmp	00140$
      003BA9                      10616 00451$:
      003BA9 BD 23 29         [24]10617 	cjne	r5,#0x23,00141$
      003BAC                      10618 00140$:
                                  10619 ;	calc.c:549: if (state_exec(&s, EVENT_OP) <= 0) break;
      003BAC 74 02            [12]10620 	mov	a,#0x02
      003BAE C0 E0            [24]10621 	push	acc
      003BB0 E4               [12]10622 	clr	a
      003BB1 C0 E0            [24]10623 	push	acc
      003BB3 90r00r00         [24]10624 	mov	dptr,#_s
      003BB6 75 F0 00         [24]10625 	mov	b,#0x00
      003BB9 12r00r00         [24]10626 	lcall	_state_exec
      003BBC AE 82            [24]10627 	mov	r6,dpl
      003BBE AF 83            [24]10628 	mov	r7,dph
      003BC0 15 81            [12]10629 	dec	sp
      003BC2 15 81            [12]10630 	dec	sp
      003BC4 C3               [12]10631 	clr	c
      003BC5 E4               [12]10632 	clr	a
      003BC6 9E               [12]10633 	subb	a,r6
      003BC7 74 80            [12]10634 	mov	a,#(0x00 ^ 0x80)
      003BC9 8F F0            [24]10635 	mov	b,r7
      003BCB 63 F0 80         [24]10636 	xrl	b,#0x80
      003BCE 95 F0            [12]10637 	subb	a,b
      003BD0 50 74            [24]10638 	jnc	00193$
      003BD2 02r39r18         [24]10639 	ljmp	00192$
      003BD5                      10640 00141$:
                                  10641 ;	calc.c:551: ((char)input == '&') ||
      003BD5 BD 26 02         [24]10642 	cjne	r5,#0x26,00455$
      003BD8 80 1C            [24]10643 	sjmp	00131$
      003BDA                      10644 00455$:
                                  10645 ;	calc.c:552: ((char)input == '|') || ((char)input == '^') ||
      003BDA BD 7C 02         [24]10646 	cjne	r5,#0x7c,00456$
      003BDD 80 17            [24]10647 	sjmp	00131$
      003BDF                      10648 00456$:
      003BDF BD 5E 02         [24]10649 	cjne	r5,#0x5e,00457$
      003BE2 80 12            [24]10650 	sjmp	00131$
      003BE4                      10651 00457$:
                                  10652 ;	calc.c:553: ((char)input == '~') ||
      003BE4 BD 7E 02         [24]10653 	cjne	r5,#0x7e,00458$
      003BE7 80 0D            [24]10654 	sjmp	00131$
      003BE9                      10655 00458$:
                                  10656 ;	calc.c:554: ((char)input == '>') || ((char)input == ']') ||
      003BE9 BD 3E 02         [24]10657 	cjne	r5,#0x3e,00459$
      003BEC 80 08            [24]10658 	sjmp	00131$
      003BEE                      10659 00459$:
      003BEE BD 5D 02         [24]10660 	cjne	r5,#0x5d,00460$
      003BF1 80 03            [24]10661 	sjmp	00131$
      003BF3                      10662 00460$:
                                  10663 ;	calc.c:555: ((char)input == '<')
      003BF3 BD 3C 29         [24]10664 	cjne	r5,#0x3c,00132$
      003BF6                      10665 00131$:
                                  10666 ;	calc.c:557: if (state_exec(&s, EVENT_OP) <= 0) break;
      003BF6 74 02            [12]10667 	mov	a,#0x02
      003BF8 C0 E0            [24]10668 	push	acc
      003BFA E4               [12]10669 	clr	a
      003BFB C0 E0            [24]10670 	push	acc
      003BFD 90r00r00         [24]10671 	mov	dptr,#_s
      003C00 75 F0 00         [24]10672 	mov	b,#0x00
      003C03 12r00r00         [24]10673 	lcall	_state_exec
      003C06 AE 82            [24]10674 	mov	r6,dpl
      003C08 AF 83            [24]10675 	mov	r7,dph
      003C0A 15 81            [12]10676 	dec	sp
      003C0C 15 81            [12]10677 	dec	sp
      003C0E C3               [12]10678 	clr	c
      003C0F E4               [12]10679 	clr	a
      003C10 9E               [12]10680 	subb	a,r6
      003C11 74 80            [12]10681 	mov	a,#(0x00 ^ 0x80)
      003C13 8F F0            [24]10682 	mov	b,r7
      003C15 63 F0 80         [24]10683 	xrl	b,#0x80
      003C18 95 F0            [12]10684 	subb	a,b
      003C1A 50 2A            [24]10685 	jnc	00193$
      003C1C 02r39r18         [24]10686 	ljmp	00192$
      003C1F                      10687 00132$:
                                  10688 ;	calc.c:559: if (state_exec(&s, EVENT_DELIM) <= 0) break;
      003C1F E4               [12]10689 	clr	a
      003C20 C0 E0            [24]10690 	push	acc
      003C22 C0 E0            [24]10691 	push	acc
      003C24 90r00r00         [24]10692 	mov	dptr,#_s
      003C27 75 F0 00         [24]10693 	mov	b,#0x00
      003C2A 12r00r00         [24]10694 	lcall	_state_exec
      003C2D AE 82            [24]10695 	mov	r6,dpl
      003C2F AF 83            [24]10696 	mov	r7,dph
      003C31 15 81            [12]10697 	dec	sp
      003C33 15 81            [12]10698 	dec	sp
      003C35 C3               [12]10699 	clr	c
      003C36 E4               [12]10700 	clr	a
      003C37 9E               [12]10701 	subb	a,r6
      003C38 74 80            [12]10702 	mov	a,#(0x00 ^ 0x80)
      003C3A 8F F0            [24]10703 	mov	b,r7
      003C3C 63 F0 80         [24]10704 	xrl	b,#0x80
      003C3F 95 F0            [12]10705 	subb	a,b
      003C41 50 03            [24]10706 	jnc	00464$
      003C43 02r39r18         [24]10707 	ljmp	00192$
      003C46                      10708 00464$:
      003C46                      10709 00193$:
                                  10710 ;	calc.c:563: printstr("TERM\r\n");
      003C46 7DrA0            [12]10711 	mov	r5,#___str_51
      003C48 7Es03            [12]10712 	mov	r6,#(___str_51 >> 8)
      003C4A 7F 80            [12]10713 	mov	r7,#0x80
                                  10714 ;	calc.c:51: return;
      003C4C                      10715 00202$:
                                  10716 ;	calc.c:49: for (; *s; s++) putchar(*s);
      003C4C 8D 82            [24]10717 	mov	dpl,r5
      003C4E 8E 83            [24]10718 	mov	dph,r6
      003C50 8F F0            [24]10719 	mov	b,r7
      003C52 12r00r00         [24]10720 	lcall	__gptrget
      003C55 FC               [12]10721 	mov	r4,a
      003C56 60 10            [24]10722 	jz	00197$
      003C58 7B 00            [12]10723 	mov	r3,#0x00
      003C5A 8C 82            [24]10724 	mov	dpl,r4
      003C5C 8B 83            [24]10725 	mov	dph,r3
      003C5E 12r00r00         [24]10726 	lcall	_putchar
      003C61 0D               [12]10727 	inc	r5
                                  10728 ;	calc.c:563: printstr("TERM\r\n");
      003C62 BD 00 E7         [24]10729 	cjne	r5,#0x00,00202$
      003C65 0E               [12]10730 	inc	r6
      003C66 80 E4            [24]10731 	sjmp	00202$
      003C68                      10732 00197$:
                                  10733 ;	calc.c:565: PCON |= 2;
      003C68 43 87 02         [24]10734 	orl	_PCON,#0x02
                                  10735 ;	calc.c:567: return;
                                  10736 ;	calc.c:568: }
      003C6B 15 81            [12]10737 	dec	sp
      003C6D D0*00            [24]10738 	pop	_bp
      003C6F 22               [24]10739 	ret
                                  10740 	.area CSEG    (CODE)
                                  10741 	.area CONST   (CODE)
                                  10742 	.area CONST   (CODE)
      000000                      10743 ___str_0:
      000000 25 20 31 31 6C 64    10744 	.ascii "% 11ld"
      000006 09                   10745 	.db 0x09
      000007 00                   10746 	.db 0x00
                                  10747 	.area CSEG    (CODE)
                                  10748 	.area CONST   (CODE)
      000008                      10749 ___str_1:
      000008 25 30 38 6C 78       10750 	.ascii "%08lx"
      00000D 09                   10751 	.db 0x09
      00000E 00                   10752 	.db 0x00
                                  10753 	.area CSEG    (CODE)
                                  10754 	.area CONST   (CODE)
      00000F                      10755 ___str_2:
      00000F 0D                   10756 	.db 0x0d
      000010 0A                   10757 	.db 0x0a
      000011 00                   10758 	.db 0x00
                                  10759 	.area CSEG    (CODE)
                                  10760 	.area CONST   (CODE)
      000012                      10761 ___str_3:
      000012 73 74 61 63 6B 20 75 10762 	.ascii "stack underflow"
             6E 64 65 72 66 6C 6F
             77
      000021 0D                   10763 	.db 0x0d
      000022 0A                   10764 	.db 0x0a
      000023 00                   10765 	.db 0x00
                                  10766 	.area CSEG    (CODE)
                                  10767 	.area CONST   (CODE)
      000024                      10768 ___str_4:
      000024 50 53 50 41          10769 	.ascii "PSPA"
      000028 09                   10770 	.db 0x09
      000029 00                   10771 	.db 0x00
                                  10772 	.area CSEG    (CODE)
                                  10773 	.area CONST   (CODE)
      00002A                      10774 ___str_5:
      00002A 53 53 50 41          10775 	.ascii "SSPA"
      00002E 09                   10776 	.db 0x09
      00002F 00                   10777 	.db 0x00
                                  10778 	.area CSEG    (CODE)
                                  10779 	.area CONST   (CODE)
      000030                      10780 ___str_6:
      000030 50 53 56 41          10781 	.ascii "PSVA"
      000034 09                   10782 	.db 0x09
      000035 00                   10783 	.db 0x00
                                  10784 	.area CSEG    (CODE)
                                  10785 	.area CONST   (CODE)
      000036                      10786 ___str_7:
      000036 50 53 56 54 4F 50    10787 	.ascii "PSVTOP"
      00003C 09                   10788 	.db 0x09
      00003D 00                   10789 	.db 0x00
                                  10790 	.area CSEG    (CODE)
                                  10791 	.area CONST   (CODE)
      00003E                      10792 ___str_8:
      00003E 50 53 50 54 4F 50    10793 	.ascii "PSPTOP"
      000044 09                   10794 	.db 0x09
      000045 00                   10795 	.db 0x00
                                  10796 	.area CSEG    (CODE)
                                  10797 	.area CONST   (CODE)
      000046                      10798 ___str_9:
      000046 0D                   10799 	.db 0x0d
      000047 0A                   10800 	.db 0x0a
      000048 73 74 61 63 6B 20 75 10801 	.ascii "stack underflow"
             6E 64 65 72 66 6C 6F
             77
      000057 0D                   10802 	.db 0x0d
      000058 0A                   10803 	.db 0x0a
      000059 00                   10804 	.db 0x00
                                  10805 	.area CSEG    (CODE)
                                  10806 	.area CONST   (CODE)
      00005A                      10807 ___str_10:
      00005A 0D                   10808 	.db 0x0d
      00005B 0A                   10809 	.db 0x0a
      00005C 73 65 63 6F 6E 64 61 10810 	.ascii "secondary stack overflow"
             72 79 20 73 74 61 63
             6B 20 6F 76 65 72 66
             6C 6F 77
      000074 0D                   10811 	.db 0x0d
      000075 0A                   10812 	.db 0x0a
      000076 00                   10813 	.db 0x00
                                  10814 	.area CSEG    (CODE)
                                  10815 	.area CONST   (CODE)
      000077                      10816 ___str_11:
      000077 0D                   10817 	.db 0x0d
      000078 0A                   10818 	.db 0x0a
      000079 73 65 63 6F 6E 64 61 10819 	.ascii "secondary stack underflow"
             72 79 20 73 74 61 63
             6B 20 75 6E 64 65 72
             66 6C 6F 77
      000092 0D                   10820 	.db 0x0d
      000093 0A                   10821 	.db 0x0a
      000094 00                   10822 	.db 0x00
                                  10823 	.area CSEG    (CODE)
                                  10824 	.area CONST   (CODE)
      000095                      10825 ___str_12:
      000095 0D                   10826 	.db 0x0d
      000096 0A                   10827 	.db 0x0a
      000097 73 74 61 63 6B 20 6F 10828 	.ascii "stack overflow"
             76 65 72 66 6C 6F 77
      0000A5 0D                   10829 	.db 0x0d
      0000A6 0A                   10830 	.db 0x0a
      0000A7 00                   10831 	.db 0x00
                                  10832 	.area CSEG    (CODE)
                                  10833 	.area CONST   (CODE)
      0000A8                      10834 ___str_13:
      0000A8 0D                   10835 	.db 0x0d
      0000A9 0A                   10836 	.db 0x0a
      0000AA 64 69 76 69 73 69 6F 10837 	.ascii "division by zero"
             6E 20 62 79 20 7A 65
             72 6F
      0000BA 0D                   10838 	.db 0x0d
      0000BB 0A                   10839 	.db 0x0a
      0000BC 00                   10840 	.db 0x00
                                  10841 	.area CSEG    (CODE)
                                  10842 	.area CONST   (CODE)
      0000BD                      10843 ___str_14:
      0000BD 0D                   10844 	.db 0x0d
      0000BE 0A                   10845 	.db 0x0a
      0000BF 50 53 20 3D 20 25 70 10846 	.ascii "PS = %p, SS = %p, base = %d"
             2C 20 53 53 20 3D 20
             25 70 2C 20 62 61 73
             65 20 3D 20 25 64
      0000DA 0D                   10847 	.db 0x0d
      0000DB 0A                   10848 	.db 0x0a
      0000DC 00                   10849 	.db 0x00
                                  10850 	.area CSEG    (CODE)
                                  10851 	.area CONST   (CODE)
      0000DD                      10852 ___str_15:
      0000DD 41 43 43             10853 	.ascii "ACC"
      0000E0 09                   10854 	.db 0x09
      0000E1 00                   10855 	.db 0x00
                                  10856 	.area CSEG    (CODE)
                                  10857 	.area CONST   (CODE)
      0000E2                      10858 ___str_16:
      0000E2 0D                   10859 	.db 0x0d
      0000E3 0A                   10860 	.db 0x0a
      0000E4 50 53 54 4F 50 31    10861 	.ascii "PSTOP1"
      0000EA 09                   10862 	.db 0x09
      0000EB 00                   10863 	.db 0x00
                                  10864 	.area CSEG    (CODE)
                                  10865 	.area CONST   (CODE)
      0000EC                      10866 ___str_17:
      0000EC 0D                   10867 	.db 0x0d
      0000ED 0A                   10868 	.db 0x0a
      0000EE 50 53 54 4F 50 30    10869 	.ascii "PSTOP0"
      0000F4 09                   10870 	.db 0x09
      0000F5 00                   10871 	.db 0x00
                                  10872 	.area CSEG    (CODE)
                                  10873 	.area CONST   (CODE)
      0000F6                      10874 ___str_18:
      0000F6 0D                   10875 	.db 0x0d
      0000F7 0A                   10876 	.db 0x0a
      0000F8 53 53 54 4F 50 31    10877 	.ascii "SSTOP1"
      0000FE 09                   10878 	.db 0x09
      0000FF 00                   10879 	.db 0x00
                                  10880 	.area CSEG    (CODE)
                                  10881 	.area CONST   (CODE)
      000100                      10882 ___str_19:
      000100 0D                   10883 	.db 0x0d
      000101 0A                   10884 	.db 0x0a
      000102 53 53 54 4F 50 30    10885 	.ascii "SSTOP0"
      000108 09                   10886 	.db 0x09
      000109 00                   10887 	.db 0x00
                                  10888 	.area CSEG    (CODE)
                                  10889 	.area CONST   (CODE)
      00010A                      10890 ___str_20:
      00010A 0D                   10891 	.db 0x0d
      00010B 0A                   10892 	.db 0x0a
      00010C 48 68 4F 6F          10893 	.ascii "HhOo"
      000110 09                   10894 	.db 0x09
      000111 62 61 73 65 20 31 36 10895 	.ascii "base 16 10 8 2"
             20 31 30 20 38 20 32
      00011F 0D                   10896 	.db 0x0d
      000120 0A                   10897 	.db 0x0a
      000121 00                   10898 	.db 0x00
                                  10899 	.area CSEG    (CODE)
                                  10900 	.area CONST   (CODE)
      000122                      10901 ___str_21:
      000122 70 2E                10902 	.ascii "p."
      000124 09                   10903 	.db 0x09
      000125 70 6F 70 20 74 6F 70 10904 	.ascii "pop top"
      00012C 0D                   10905 	.db 0x0d
      00012D 0A                   10906 	.db 0x0a
      00012E 00                   10907 	.db 0x00
                                  10908 	.area CSEG    (CODE)
                                  10909 	.area CONST   (CODE)
      00012F                      10910 ___str_22:
      00012F 50                   10911 	.ascii "P"
      000130 09                   10912 	.db 0x09
      000131 70 6F 70 20 73 74 61 10913 	.ascii "pop stack"
             63 6B
      00013A 0D                   10914 	.db 0x0d
      00013B 0A                   10915 	.db 0x0a
      00013C 00                   10916 	.db 0x00
                                  10917 	.area CSEG    (CODE)
                                  10918 	.area CONST   (CODE)
      00013D                      10919 ___str_23:
      00013D 76                   10920 	.ascii "v"
      00013E 09                   10921 	.db 0x09
      00013F 70 65 65 6B 20 74 6F 10922 	.ascii "peek top"
             70
      000147 0D                   10923 	.db 0x0d
      000148 0A                   10924 	.db 0x0a
      000149 00                   10925 	.db 0x00
                                  10926 	.area CSEG    (CODE)
                                  10927 	.area CONST   (CODE)
      00014A                      10928 ___str_24:
      00014A 56                   10929 	.ascii "V"
      00014B 09                   10930 	.db 0x09
      00014C 70 65 65 6B 20 73 74 10931 	.ascii "peek stack"
             61 63 6B
      000156 0D                   10932 	.db 0x0d
      000157 0A                   10933 	.db 0x0a
      000158 00                   10934 	.db 0x00
                                  10935 	.area CSEG    (CODE)
                                  10936 	.area CONST   (CODE)
      000159                      10937 ___str_25:
      000159 69                   10938 	.ascii "i"
      00015A 09                   10939 	.db 0x09
      00015B 72 65 73 65 74 20 61 10940 	.ascii "reset acc"
             63 63
      000164 0D                   10941 	.db 0x0d
      000165 0A                   10942 	.db 0x0a
      000166 00                   10943 	.db 0x00
                                  10944 	.area CSEG    (CODE)
                                  10945 	.area CONST   (CODE)
      000167                      10946 ___str_26:
      000167 49                   10947 	.ascii "I"
      000168 09                   10948 	.db 0x09
      000169 72 65 73 65 74 20 61 10949 	.ascii "reset and discard acc"
             6E 64 20 64 69 73 63
             61 72 64 20 61 63 63
      00017E 0D                   10950 	.db 0x0d
      00017F 0A                   10951 	.db 0x0a
      000180 00                   10952 	.db 0x00
                                  10953 	.area CSEG    (CODE)
                                  10954 	.area CONST   (CODE)
      000181                      10955 ___str_27:
      000181 78                   10956 	.ascii "x"
      000182 09                   10957 	.db 0x09
      000183 65 78 63 68 61 6E 67 10958 	.ascii "exchange top 2"
             65 20 74 6F 70 20 32
      000191 0D                   10959 	.db 0x0d
      000192 0A                   10960 	.db 0x0a
      000193 00                   10961 	.db 0x00
                                  10962 	.area CSEG    (CODE)
                                  10963 	.area CONST   (CODE)
      000194                      10964 ___str_28:
      000194 58                   10965 	.ascii "X"
      000195 09                   10966 	.db 0x09
      000196 65 78 63 68 61 6E 67 10967 	.ascii "exchange stacks primary <-> secondary"
             65 20 73 74 61 63 6B
             73 20 70 72 69 6D 61
             72 79 20 3C 2D 3E 20
             73 65 63 6F 6E 64 61
             72 79
      0001BB 0D                   10968 	.db 0x0d
      0001BC 0A                   10969 	.db 0x0a
      0001BD 00                   10970 	.db 0x00
                                  10971 	.area CSEG    (CODE)
                                  10972 	.area CONST   (CODE)
      0001BE                      10973 ___str_29:
      0001BE 54                   10974 	.ascii "T"
      0001BF 09                   10975 	.db 0x09
      0001C0 65 78 63 68 61 6E 67 10976 	.ascii "exchange tops primary <-> secondary"
             65 20 74 6F 70 73 20
             70 72 69 6D 61 72 79
             20 3C 2D 3E 20 73 65
             63 6F 6E 64 61 72 79
      0001E3 0D                   10977 	.db 0x0d
      0001E4 0A                   10978 	.db 0x0a
      0001E5 00                   10979 	.db 0x00
                                  10980 	.area CSEG    (CODE)
                                  10981 	.area CONST   (CODE)
      0001E6                      10982 ___str_30:
      0001E6 55                   10983 	.ascii "U"
      0001E7 09                   10984 	.db 0x09
      0001E8 63 6F 70 79 20 74 6F 10985 	.ascii "copy top secondary -> primary"
             70 20 73 65 63 6F 6E
             64 61 72 79 20 2D 3E
             20 70 72 69 6D 61 72
             79
      000205 0D                   10986 	.db 0x0d
      000206 0A                   10987 	.db 0x0a
      000207 00                   10988 	.db 0x00
                                  10989 	.area CSEG    (CODE)
                                  10990 	.area CONST   (CODE)
      000208                      10991 ___str_31:
      000208 75                   10992 	.ascii "u"
      000209 09                   10993 	.db 0x09
      00020A 63 6F 70 79 20 74 6F 10994 	.ascii "copy top primary -> secondary"
             70 20 70 72 69 6D 61
             72 79 20 2D 3E 20 73
             65 63 6F 6E 64 61 72
             79
      000227 0D                   10995 	.db 0x0d
      000228 0A                   10996 	.db 0x0a
      000229 00                   10997 	.db 0x00
                                  10998 	.area CSEG    (CODE)
                                  10999 	.area CONST   (CODE)
      00022A                      11000 ___str_32:
      00022A 4D                   11001 	.ascii "M"
      00022B 09                   11002 	.db 0x09
      00022C 6D 6F 76 65 20 74 6F 11003 	.ascii "move top secondary -> primary"
             70 20 73 65 63 6F 6E
             64 61 72 79 20 2D 3E
             20 70 72 69 6D 61 72
             79
      000249 0D                   11004 	.db 0x0d
      00024A 0A                   11005 	.db 0x0a
      00024B 00                   11006 	.db 0x00
                                  11007 	.area CSEG    (CODE)
                                  11008 	.area CONST   (CODE)
      00024C                      11009 ___str_33:
      00024C 6D                   11010 	.ascii "m"
      00024D 09                   11011 	.db 0x09
      00024E 6D 6F 76 65 20 74 6F 11012 	.ascii "move top primary -> secondary"
             70 20 70 72 69 6D 61
             72 79 20 2D 3E 20 73
             65 63 6F 6E 64 61 72
             79
      00026B 0D                   11013 	.db 0x0d
      00026C 0A                   11014 	.db 0x0a
      00026D 00                   11015 	.db 0x00
                                  11016 	.area CSEG    (CODE)
                                  11017 	.area CONST   (CODE)
      00026E                      11018 ___str_34:
      00026E 2B                   11019 	.ascii "+"
      00026F 09                   11020 	.db 0x09
      000270 61 64 64 20 74 6F 70 11021 	.ascii "add top 2"
             20 32
      000279 0D                   11022 	.db 0x0d
      00027A 0A                   11023 	.db 0x0a
      00027B 00                   11024 	.db 0x00
                                  11025 	.area CSEG    (CODE)
                                  11026 	.area CONST   (CODE)
      00027C                      11027 ___str_35:
      00027C 2D                   11028 	.ascii "-"
      00027D 09                   11029 	.db 0x09
      00027E 73 75 62 74 72 61 63 11030 	.ascii "subtract top 2"
             74 20 74 6F 70 20 32
      00028C 0D                   11031 	.db 0x0d
      00028D 0A                   11032 	.db 0x0a
      00028E 00                   11033 	.db 0x00
                                  11034 	.area CSEG    (CODE)
                                  11035 	.area CONST   (CODE)
      00028F                      11036 ___str_36:
      00028F 2A                   11037 	.ascii "*"
      000290 09                   11038 	.db 0x09
      000291 6D 75 6C 74 69 70 6C 11039 	.ascii "multiply top 2"
             79 20 74 6F 70 20 32
      00029F 0D                   11040 	.db 0x0d
      0002A0 0A                   11041 	.db 0x0a
      0002A1 00                   11042 	.db 0x00
                                  11043 	.area CSEG    (CODE)
                                  11044 	.area CONST   (CODE)
      0002A2                      11045 ___str_37:
      0002A2 2F                   11046 	.ascii "/"
      0002A3 09                   11047 	.db 0x09
      0002A4 64 69 76 69 64 65 20 11048 	.ascii "divide top 2"
             74 6F 70 20 32
      0002B0 0D                   11049 	.db 0x0d
      0002B1 0A                   11050 	.db 0x0a
      0002B2 00                   11051 	.db 0x00
                                  11052 	.area CSEG    (CODE)
                                  11053 	.area CONST   (CODE)
      0002B3                      11054 ___str_38:
      0002B3 5C                   11055 	.db 0x5c
      0002B4 09                   11056 	.db 0x09
      0002B5 64 69 76 69 64 65 20 11057 	.ascii "divide top 2 unsigned"
             74 6F 70 20 32 20 75
             6E 73 69 67 6E 65 64
      0002CA 0D                   11058 	.db 0x0d
      0002CB 0A                   11059 	.db 0x0a
      0002CC 00                   11060 	.db 0x00
                                  11061 	.area CSEG    (CODE)
                                  11062 	.area CONST   (CODE)
      0002CD                      11063 ___str_39:
      0002CD 25                   11064 	.ascii "%"
      0002CE 09                   11065 	.db 0x09
      0002CF 6D 6F 64 75 6C 75 73 11066 	.ascii "modulus top 2"
             20 74 6F 70 20 32
      0002DC 0D                   11067 	.db 0x0d
      0002DD 0A                   11068 	.db 0x0a
      0002DE 00                   11069 	.db 0x00
                                  11070 	.area CSEG    (CODE)
                                  11071 	.area CONST   (CODE)
      0002DF                      11072 ___str_40:
      0002DF 23                   11073 	.ascii "#"
      0002E0 09                   11074 	.db 0x09
      0002E1 6D 6F 64 75 6C 75 73 11075 	.ascii "modulus top 2 unsigned"
             20 74 6F 70 20 32 20
             75 6E 73 69 67 6E 65
             64
      0002F7 0D                   11076 	.db 0x0d
      0002F8 0A                   11077 	.db 0x0a
      0002F9 00                   11078 	.db 0x00
                                  11079 	.area CSEG    (CODE)
                                  11080 	.area CONST   (CODE)
      0002FA                      11081 ___str_41:
      0002FA 26                   11082 	.ascii "&"
      0002FB 09                   11083 	.db 0x09
      0002FC 61 6E 64 20 74 6F 70 11084 	.ascii "and top 2"
             20 32
      000305 0D                   11085 	.db 0x0d
      000306 0A                   11086 	.db 0x0a
      000307 00                   11087 	.db 0x00
                                  11088 	.area CSEG    (CODE)
                                  11089 	.area CONST   (CODE)
      000308                      11090 ___str_42:
      000308 7C                   11091 	.ascii "|"
      000309 09                   11092 	.db 0x09
      00030A 6F 72 20 74 6F 70 20 11093 	.ascii "or top 2"
             32
      000312 0D                   11094 	.db 0x0d
      000313 0A                   11095 	.db 0x0a
      000314 00                   11096 	.db 0x00
                                  11097 	.area CSEG    (CODE)
                                  11098 	.area CONST   (CODE)
      000315                      11099 ___str_43:
      000315 5E                   11100 	.ascii "^"
      000316 09                   11101 	.db 0x09
      000317 78 6F 72 20 74 6F 70 11102 	.ascii "xor top 2"
             20 32
      000320 0D                   11103 	.db 0x0d
      000321 0A                   11104 	.db 0x0a
      000322 00                   11105 	.db 0x00
                                  11106 	.area CSEG    (CODE)
                                  11107 	.area CONST   (CODE)
      000323                      11108 ___str_44:
      000323 3E                   11109 	.ascii ">"
      000324 09                   11110 	.db 0x09
      000325 73 68 69 66 74 20 72 11111 	.ascii "shift right top 2"
             69 67 68 74 20 74 6F
             70 20 32
      000336 0D                   11112 	.db 0x0d
      000337 0A                   11113 	.db 0x0a
      000338 00                   11114 	.db 0x00
                                  11115 	.area CSEG    (CODE)
                                  11116 	.area CONST   (CODE)
      000339                      11117 ___str_45:
      000339 5D                   11118 	.ascii "]"
      00033A 09                   11119 	.db 0x09
      00033B 61 72 69 74 68 6D 65 11120 	.ascii "arithmetic shift right top 2"
             74 69 63 20 73 68 69
             66 74 20 72 69 67 68
             74 20 74 6F 70 20 32
      000357 0D                   11121 	.db 0x0d
      000358 0A                   11122 	.db 0x0a
      000359 00                   11123 	.db 0x00
                                  11124 	.area CSEG    (CODE)
                                  11125 	.area CONST   (CODE)
      00035A                      11126 ___str_46:
      00035A 3C                   11127 	.ascii "<"
      00035B 09                   11128 	.db 0x09
      00035C 73 68 69 66 74 20 6C 11129 	.ascii "shift left top 2"
             65 66 74 20 74 6F 70
             20 32
      00036C 0D                   11130 	.db 0x0d
      00036D 0A                   11131 	.db 0x0a
      00036E 00                   11132 	.db 0x00
                                  11133 	.area CSEG    (CODE)
                                  11134 	.area CONST   (CODE)
      00036F                      11135 ___str_47:
      00036F 7E                   11136 	.ascii "~"
      000370 09                   11137 	.db 0x09
      000371 62 69 74 77 69 73 65 11138 	.ascii "bitwise not top"
             20 6E 6F 74 20 74 6F
             70
      000380 0D                   11139 	.db 0x0d
      000381 0A                   11140 	.db 0x0a
      000382 00                   11141 	.db 0x00
                                  11142 	.area CSEG    (CODE)
                                  11143 	.area CONST   (CODE)
      000383                      11144 ___str_48:
      000383 73                   11145 	.ascii "s"
      000384 09                   11146 	.db 0x09
      000385 73 74 61 74 75 73    11147 	.ascii "status"
      00038B 0D                   11148 	.db 0x0d
      00038C 0A                   11149 	.db 0x0a
      00038D 00                   11150 	.db 0x00
                                  11151 	.area CSEG    (CODE)
                                  11152 	.area CONST   (CODE)
      00038E                      11153 ___str_49:
      00038E 3F                   11154 	.ascii "?"
      00038F 09                   11155 	.db 0x09
      000390 68 65 6C 70          11156 	.ascii "help"
      000394 0D                   11157 	.db 0x0d
      000395 0A                   11158 	.db 0x0a
      000396 00                   11159 	.db 0x00
                                  11160 	.area CSEG    (CODE)
                                  11161 	.area CONST   (CODE)
      000397                      11162 ___str_50:
      000397 71                   11163 	.ascii "q"
      000398 09                   11164 	.db 0x09
      000399 71 75 69 74          11165 	.ascii "quit"
      00039D 0D                   11166 	.db 0x0d
      00039E 0A                   11167 	.db 0x0a
      00039F 00                   11168 	.db 0x00
                                  11169 	.area CSEG    (CODE)
                                  11170 	.area CONST   (CODE)
      0003A0                      11171 ___str_51:
      0003A0 54 45 52 4D          11172 	.ascii "TERM"
      0003A4 0D                   11173 	.db 0x0d
      0003A5 0A                   11174 	.db 0x0a
      0003A6 00                   11175 	.db 0x00
                                  11176 	.area CSEG    (CODE)
                                  11177 	.area XINIT   (CODE)
      000000                      11178 __xinit__deltas:
      000000 00 00                11179 	.byte #0x00, #0x00	;  0
      000002 00 00                11180 	.byte #0x00, #0x00	;  0
      000004 00 00                11181 	.byte #0x00, #0x00	;  0
      000006 00 00                11182 	.byte #0x00,#0x00
      000008 00 00                11183 	.byte #0x00,#0x00
      00000A 00 00                11184 	.byte #0x00, #0x00	;  0
      00000C 01 00                11185 	.byte #0x01, #0x00	;  1
      00000E 02 00                11186 	.byte #0x02, #0x00	;  2
      000010 00 00                11187 	.byte #0x00,#0x00
      000012r22s00                11188 	.byte _accumulate, (_accumulate >> 8)
      000014 00 00                11189 	.byte #0x00, #0x00	;  0
      000016 02 00                11190 	.byte #0x02, #0x00	;  2
      000018 01 00                11191 	.byte #0x01, #0x00	;  1
      00001A 00 00                11192 	.byte #0x00,#0x00
      00001Cr1Ds08                11193 	.byte _operator, (_operator >> 8)
      00001E 01 00                11194 	.byte #0x01, #0x00	;  1
      000020 00 00                11195 	.byte #0x00, #0x00	;  0
      000022 00 00                11196 	.byte #0x00, #0x00	;  0
      000024 00 00                11197 	.byte #0x00,#0x00
      000026 00 00                11198 	.byte #0x00,#0x00
      000028 01 00                11199 	.byte #0x01, #0x00	;  1
      00002A 02 00                11200 	.byte #0x02, #0x00	;  2
      00002C 01 00                11201 	.byte #0x01, #0x00	;  1
      00002E 00 00                11202 	.byte #0x00,#0x00
      000030r1Ds08                11203 	.byte _operator, (_operator >> 8)
      000032 01 00                11204 	.byte #0x01, #0x00	;  1
      000034 01 00                11205 	.byte #0x01, #0x00	;  1
      000036 02 00                11206 	.byte #0x02, #0x00	;  2
      000038 00 00                11207 	.byte #0x00,#0x00
      00003Ar22s00                11208 	.byte _accumulate, (_accumulate >> 8)
      00003C 02 00                11209 	.byte #0x02, #0x00	;  2
      00003E 00 00                11210 	.byte #0x00, #0x00	;  0
      000040 00 00                11211 	.byte #0x00, #0x00	;  0
      000042 00 00                11212 	.byte #0x00,#0x00
      000044rC5s2A                11213 	.byte _push_acc, (_push_acc >> 8)
      000046 02 00                11214 	.byte #0x02, #0x00	;  2
      000048 07 00                11215 	.byte #0x07, #0x00	;  7
      00004A 00 00                11216 	.byte #0x00, #0x00	;  0
      00004C 00 00                11217 	.byte #0x00,#0x00
      00004ErE8s2B                11218 	.byte _reset_acc, (_reset_acc >> 8)
      000050 02 00                11219 	.byte #0x02, #0x00	;  2
      000052 01 00                11220 	.byte #0x01, #0x00	;  1
      000054 02 00                11221 	.byte #0x02, #0x00	;  2
      000056 00 00                11222 	.byte #0x00,#0x00
      000058r22s00                11223 	.byte _accumulate, (_accumulate >> 8)
      00005A 02 00                11224 	.byte #0x02, #0x00	;  2
      00005C 02 00                11225 	.byte #0x02, #0x00	;  2
      00005E 01 00                11226 	.byte #0x01, #0x00	;  1
      000060 00 00                11227 	.byte #0x00,#0x00
      000062rC5s2A                11228 	.byte _push_acc, (_push_acc >> 8)
      000064 FF 7F                11229 	.byte #0xff, #0x7f	;  32767
      000066 06 00                11230 	.byte #0x06, #0x00	;  6
      000068 FF 7F                11231 	.byte #0xff, #0x7f	;  32767
      00006A 00 00                11232 	.byte #0x00,#0x00
      00006CrE8s2B                11233 	.byte _reset_acc, (_reset_acc >> 8)
      00006E FF 7F                11234 	.byte #0xff, #0x7f	;  32767
      000070 07 00                11235 	.byte #0x07, #0x00	;  7
      000072 FF 7F                11236 	.byte #0xff, #0x7f	;  32767
      000074 00 00                11237 	.byte #0x00,#0x00
      000076 00 00                11238 	.byte #0x00,#0x00
      000078 FF 7F                11239 	.byte #0xff, #0x7f	;  32767
      00007A 05 00                11240 	.byte #0x05, #0x00	;  5
      00007C FF 7F                11241 	.byte #0xff, #0x7f	;  32767
      00007E 00 00                11242 	.byte #0x00,#0x00
      000080r52s2C                11243 	.byte _reset_base, (_reset_base >> 8)
      000082 FF 7F                11244 	.byte #0xff, #0x7f	;  32767
      000084 03 00                11245 	.byte #0x03, #0x00	;  3
      000086 FF 7F                11246 	.byte #0xff, #0x7f	;  32767
      000088 00 00                11247 	.byte #0x00,#0x00
      00008ArD0s2C                11248 	.byte _status, (_status >> 8)
      00008C FF 7F                11249 	.byte #0xff, #0x7f	;  32767
      00008E 04 00                11250 	.byte #0x04, #0x00	;  4
      000090 FF 7F                11251 	.byte #0xff, #0x7f	;  32767
      000092 00 00                11252 	.byte #0x00,#0x00
      000094r42s34                11253 	.byte _help, (_help >> 8)
      000096 FF 7F                11254 	.byte #0xff, #0x7f	;  32767
      000098 08 00                11255 	.byte #0x08, #0x00	;  8
      00009A 03 00                11256 	.byte #0x03, #0x00	;  3
      00009C 00 00                11257 	.byte #0x00,#0x00
      00009Er93s01                11258 	.byte _dump_pop, (_dump_pop >> 8)
      0000A0 00 80                11259 	.byte #0x00, #0x80	; -32768
      0000A2 00 80                11260 	.byte #0x00, #0x80	; -32768
      0000A4 00 80                11261 	.byte #0x00, #0x80	; -32768
      0000A6 00 00                11262 	.byte #0x00,#0x00
      0000A8 00 00                11263 	.byte #0x00,#0x00
                                  11264 	.area CABS    (ABS,CODE)
