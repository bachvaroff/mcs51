                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module calc
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _getchar_poll
                                     13 	.globl _stack_iter_peek
                                     14 	.globl _stack_peek
                                     15 	.globl _stack_pop
                                     16 	.globl _stack_push
                                     17 	.globl _stack_init
                                     18 	.globl _state_exec
                                     19 	.globl _state_init
                                     20 	.globl _isxdigit
                                     21 	.globl _printf
                                     22 	.globl _strtol
                                     23 	.globl _CY
                                     24 	.globl _AC
                                     25 	.globl _F0
                                     26 	.globl _RS1
                                     27 	.globl _RS0
                                     28 	.globl _OV
                                     29 	.globl _FL
                                     30 	.globl _P
                                     31 	.globl _TF2
                                     32 	.globl _EXF2
                                     33 	.globl _RCLK
                                     34 	.globl _TCLK
                                     35 	.globl _EXEN2
                                     36 	.globl _TR2
                                     37 	.globl _C_T2
                                     38 	.globl _CP_RL2
                                     39 	.globl _T2CON_7
                                     40 	.globl _T2CON_6
                                     41 	.globl _T2CON_5
                                     42 	.globl _T2CON_4
                                     43 	.globl _T2CON_3
                                     44 	.globl _T2CON_2
                                     45 	.globl _T2CON_1
                                     46 	.globl _T2CON_0
                                     47 	.globl _PT2
                                     48 	.globl _PS
                                     49 	.globl _PT1
                                     50 	.globl _PX1
                                     51 	.globl _PT0
                                     52 	.globl _PX0
                                     53 	.globl _RD
                                     54 	.globl _WR
                                     55 	.globl _T1
                                     56 	.globl _T0
                                     57 	.globl _INT1
                                     58 	.globl _INT0
                                     59 	.globl _TXD
                                     60 	.globl _RXD
                                     61 	.globl _P3_7
                                     62 	.globl _P3_6
                                     63 	.globl _P3_5
                                     64 	.globl _P3_4
                                     65 	.globl _P3_3
                                     66 	.globl _P3_2
                                     67 	.globl _P3_1
                                     68 	.globl _P3_0
                                     69 	.globl _EA
                                     70 	.globl _ET2
                                     71 	.globl _ES
                                     72 	.globl _ET1
                                     73 	.globl _EX1
                                     74 	.globl _ET0
                                     75 	.globl _EX0
                                     76 	.globl _P2_7
                                     77 	.globl _P2_6
                                     78 	.globl _P2_5
                                     79 	.globl _P2_4
                                     80 	.globl _P2_3
                                     81 	.globl _P2_2
                                     82 	.globl _P2_1
                                     83 	.globl _P2_0
                                     84 	.globl _SM0
                                     85 	.globl _SM1
                                     86 	.globl _SM2
                                     87 	.globl _REN
                                     88 	.globl _TB8
                                     89 	.globl _RB8
                                     90 	.globl _TI
                                     91 	.globl _RI
                                     92 	.globl _T2EX
                                     93 	.globl _T2
                                     94 	.globl _P1_7
                                     95 	.globl _P1_6
                                     96 	.globl _P1_5
                                     97 	.globl _P1_4
                                     98 	.globl _P1_3
                                     99 	.globl _P1_2
                                    100 	.globl _P1_1
                                    101 	.globl _P1_0
                                    102 	.globl _TF1
                                    103 	.globl _TR1
                                    104 	.globl _TF0
                                    105 	.globl _TR0
                                    106 	.globl _IE1
                                    107 	.globl _IT1
                                    108 	.globl _IE0
                                    109 	.globl _IT0
                                    110 	.globl _P0_7
                                    111 	.globl _P0_6
                                    112 	.globl _P0_5
                                    113 	.globl _P0_4
                                    114 	.globl _P0_3
                                    115 	.globl _P0_2
                                    116 	.globl _P0_1
                                    117 	.globl _P0_0
                                    118 	.globl _B
                                    119 	.globl _A
                                    120 	.globl _ACC
                                    121 	.globl _PSW
                                    122 	.globl _TH2
                                    123 	.globl _TL2
                                    124 	.globl _RCAP2H
                                    125 	.globl _RCAP2L
                                    126 	.globl _T2MOD
                                    127 	.globl _T2CON
                                    128 	.globl _IP
                                    129 	.globl _P3
                                    130 	.globl _IE
                                    131 	.globl _P2
                                    132 	.globl _SBUF
                                    133 	.globl _SCON
                                    134 	.globl _P1
                                    135 	.globl _TH1
                                    136 	.globl _TH0
                                    137 	.globl _TL1
                                    138 	.globl _TL0
                                    139 	.globl _TMOD
                                    140 	.globl _TCON
                                    141 	.globl _PCON
                                    142 	.globl _DPH
                                    143 	.globl _DPL
                                    144 	.globl _SP
                                    145 	.globl _P0
                                    146 	.globl _putchar
                                    147 	.globl _getchar
                                    148 ;--------------------------------------------------------
                                    149 ; special function registers
                                    150 ;--------------------------------------------------------
                                    151 	.area RSEG    (ABS,DATA)
      000000                        152 	.org 0x0000
                           000080   153 _P0	=	0x0080
                           000081   154 _SP	=	0x0081
                           000082   155 _DPL	=	0x0082
                           000083   156 _DPH	=	0x0083
                           000087   157 _PCON	=	0x0087
                           000088   158 _TCON	=	0x0088
                           000089   159 _TMOD	=	0x0089
                           00008A   160 _TL0	=	0x008a
                           00008B   161 _TL1	=	0x008b
                           00008C   162 _TH0	=	0x008c
                           00008D   163 _TH1	=	0x008d
                           000090   164 _P1	=	0x0090
                           000098   165 _SCON	=	0x0098
                           000099   166 _SBUF	=	0x0099
                           0000A0   167 _P2	=	0x00a0
                           0000A8   168 _IE	=	0x00a8
                           0000B0   169 _P3	=	0x00b0
                           0000B8   170 _IP	=	0x00b8
                           0000C8   171 _T2CON	=	0x00c8
                           0000C9   172 _T2MOD	=	0x00c9
                           0000CA   173 _RCAP2L	=	0x00ca
                           0000CB   174 _RCAP2H	=	0x00cb
                           0000CC   175 _TL2	=	0x00cc
                           0000CD   176 _TH2	=	0x00cd
                           0000D0   177 _PSW	=	0x00d0
                           0000E0   178 _ACC	=	0x00e0
                           0000E0   179 _A	=	0x00e0
                           0000F0   180 _B	=	0x00f0
                                    181 ;--------------------------------------------------------
                                    182 ; special function bits
                                    183 ;--------------------------------------------------------
                                    184 	.area RSEG    (ABS,DATA)
      000000                        185 	.org 0x0000
                           000080   186 _P0_0	=	0x0080
                           000081   187 _P0_1	=	0x0081
                           000082   188 _P0_2	=	0x0082
                           000083   189 _P0_3	=	0x0083
                           000084   190 _P0_4	=	0x0084
                           000085   191 _P0_5	=	0x0085
                           000086   192 _P0_6	=	0x0086
                           000087   193 _P0_7	=	0x0087
                           000088   194 _IT0	=	0x0088
                           000089   195 _IE0	=	0x0089
                           00008A   196 _IT1	=	0x008a
                           00008B   197 _IE1	=	0x008b
                           00008C   198 _TR0	=	0x008c
                           00008D   199 _TF0	=	0x008d
                           00008E   200 _TR1	=	0x008e
                           00008F   201 _TF1	=	0x008f
                           000090   202 _P1_0	=	0x0090
                           000091   203 _P1_1	=	0x0091
                           000092   204 _P1_2	=	0x0092
                           000093   205 _P1_3	=	0x0093
                           000094   206 _P1_4	=	0x0094
                           000095   207 _P1_5	=	0x0095
                           000096   208 _P1_6	=	0x0096
                           000097   209 _P1_7	=	0x0097
                           000090   210 _T2	=	0x0090
                           000091   211 _T2EX	=	0x0091
                           000098   212 _RI	=	0x0098
                           000099   213 _TI	=	0x0099
                           00009A   214 _RB8	=	0x009a
                           00009B   215 _TB8	=	0x009b
                           00009C   216 _REN	=	0x009c
                           00009D   217 _SM2	=	0x009d
                           00009E   218 _SM1	=	0x009e
                           00009F   219 _SM0	=	0x009f
                           0000A0   220 _P2_0	=	0x00a0
                           0000A1   221 _P2_1	=	0x00a1
                           0000A2   222 _P2_2	=	0x00a2
                           0000A3   223 _P2_3	=	0x00a3
                           0000A4   224 _P2_4	=	0x00a4
                           0000A5   225 _P2_5	=	0x00a5
                           0000A6   226 _P2_6	=	0x00a6
                           0000A7   227 _P2_7	=	0x00a7
                           0000A8   228 _EX0	=	0x00a8
                           0000A9   229 _ET0	=	0x00a9
                           0000AA   230 _EX1	=	0x00aa
                           0000AB   231 _ET1	=	0x00ab
                           0000AC   232 _ES	=	0x00ac
                           0000AD   233 _ET2	=	0x00ad
                           0000AF   234 _EA	=	0x00af
                           0000B0   235 _P3_0	=	0x00b0
                           0000B1   236 _P3_1	=	0x00b1
                           0000B2   237 _P3_2	=	0x00b2
                           0000B3   238 _P3_3	=	0x00b3
                           0000B4   239 _P3_4	=	0x00b4
                           0000B5   240 _P3_5	=	0x00b5
                           0000B6   241 _P3_6	=	0x00b6
                           0000B7   242 _P3_7	=	0x00b7
                           0000B0   243 _RXD	=	0x00b0
                           0000B1   244 _TXD	=	0x00b1
                           0000B2   245 _INT0	=	0x00b2
                           0000B3   246 _INT1	=	0x00b3
                           0000B4   247 _T0	=	0x00b4
                           0000B5   248 _T1	=	0x00b5
                           0000B6   249 _WR	=	0x00b6
                           0000B7   250 _RD	=	0x00b7
                           0000B8   251 _PX0	=	0x00b8
                           0000B9   252 _PT0	=	0x00b9
                           0000BA   253 _PX1	=	0x00ba
                           0000BB   254 _PT1	=	0x00bb
                           0000BC   255 _PS	=	0x00bc
                           0000BD   256 _PT2	=	0x00bd
                           0000C8   257 _T2CON_0	=	0x00c8
                           0000C9   258 _T2CON_1	=	0x00c9
                           0000CA   259 _T2CON_2	=	0x00ca
                           0000CB   260 _T2CON_3	=	0x00cb
                           0000CC   261 _T2CON_4	=	0x00cc
                           0000CD   262 _T2CON_5	=	0x00cd
                           0000CE   263 _T2CON_6	=	0x00ce
                           0000CF   264 _T2CON_7	=	0x00cf
                           0000C8   265 _CP_RL2	=	0x00c8
                           0000C9   266 _C_T2	=	0x00c9
                           0000CA   267 _TR2	=	0x00ca
                           0000CB   268 _EXEN2	=	0x00cb
                           0000CC   269 _TCLK	=	0x00cc
                           0000CD   270 _RCLK	=	0x00cd
                           0000CE   271 _EXF2	=	0x00ce
                           0000CF   272 _TF2	=	0x00cf
                           0000D0   273 _P	=	0x00d0
                           0000D1   274 _FL	=	0x00d1
                           0000D2   275 _OV	=	0x00d2
                           0000D3   276 _RS0	=	0x00d3
                           0000D4   277 _RS1	=	0x00d4
                           0000D5   278 _F0	=	0x00d5
                           0000D6   279 _AC	=	0x00d6
                           0000D7   280 _CY	=	0x00d7
                                    281 ;--------------------------------------------------------
                                    282 ; overlayable register banks
                                    283 ;--------------------------------------------------------
                                    284 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        285 	.ds 8
                                    286 ;--------------------------------------------------------
                                    287 ; internal ram data
                                    288 ;--------------------------------------------------------
                                    289 	.area DSEG    (DATA)
                                    290 ;--------------------------------------------------------
                                    291 ; overlayable items in internal ram 
                                    292 ;--------------------------------------------------------
                                    293 ;--------------------------------------------------------
                                    294 ; Stack segment in internal ram 
                                    295 ;--------------------------------------------------------
                                    296 	.area	SSEG
      000000                        297 __start__stack:
      000000                        298 	.ds	1
                                    299 
                                    300 ;--------------------------------------------------------
                                    301 ; indirectly addressable internal ram data
                                    302 ;--------------------------------------------------------
                                    303 	.area ISEG    (DATA)
                                    304 ;--------------------------------------------------------
                                    305 ; absolute internal ram data
                                    306 ;--------------------------------------------------------
                                    307 	.area IABS    (ABS,DATA)
                                    308 	.area IABS    (ABS,DATA)
                                    309 ;--------------------------------------------------------
                                    310 ; bit data
                                    311 ;--------------------------------------------------------
                                    312 	.area BSEG    (BIT)
                                    313 ;--------------------------------------------------------
                                    314 ; paged external ram data
                                    315 ;--------------------------------------------------------
                                    316 	.area PSEG    (PAG,XDATA)
                                    317 ;--------------------------------------------------------
                                    318 ; external ram data
                                    319 ;--------------------------------------------------------
                                    320 	.area XSEG    (XDATA)
      000000                        321 _s:
      000000                        322 	.ds 12
      00000C                        323 _c:
      00000C                        324 	.ds 8205
                                    325 ;--------------------------------------------------------
                                    326 ; absolute external ram data
                                    327 ;--------------------------------------------------------
                                    328 	.area XABS    (ABS,XDATA)
                                    329 ;--------------------------------------------------------
                                    330 ; external initialized ram data
                                    331 ;--------------------------------------------------------
                                    332 	.area XISEG   (XDATA)
      000000                        333 _deltas:
      000000                        334 	.ds 160
                                    335 	.area HOME    (CODE)
                                    336 	.area GSINIT0 (CODE)
                                    337 	.area GSINIT1 (CODE)
                                    338 	.area GSINIT2 (CODE)
                                    339 	.area GSINIT3 (CODE)
                                    340 	.area GSINIT4 (CODE)
                                    341 	.area GSINIT5 (CODE)
                                    342 	.area GSINIT  (CODE)
                                    343 	.area GSFINAL (CODE)
                                    344 	.area CSEG    (CODE)
                                    345 ;--------------------------------------------------------
                                    346 ; interrupt vector 
                                    347 ;--------------------------------------------------------
                                    348 	.area HOME    (CODE)
      000000                        349 __interrupt_vect:
      000000 02r00r00         [24]  350 	ljmp	__sdcc_gsinit_startup
                                    351 ;--------------------------------------------------------
                                    352 ; global & static initialisations
                                    353 ;--------------------------------------------------------
                                    354 	.area HOME    (CODE)
                                    355 	.area GSINIT  (CODE)
                                    356 	.area GSFINAL (CODE)
                                    357 	.area GSINIT  (CODE)
                                    358 	.globl __sdcc_gsinit_startup
                                    359 	.globl __sdcc_program_startup
                                    360 	.globl __start__stack
                                    361 	.globl __mcs51_genXINIT
                                    362 	.globl __mcs51_genXRAMCLEAR
                                    363 	.globl __mcs51_genRAMCLEAR
                                    364 	.area GSFINAL (CODE)
      000000 02r00r03         [24]  365 	ljmp	__sdcc_program_startup
                                    366 ;--------------------------------------------------------
                                    367 ; Home
                                    368 ;--------------------------------------------------------
                                    369 	.area HOME    (CODE)
                                    370 	.area HOME    (CODE)
      000003                        371 __sdcc_program_startup:
      000003 02r1FrFD         [24]  372 	ljmp	_main
                                    373 ;	return from main will return to caller
                                    374 ;--------------------------------------------------------
                                    375 ; code
                                    376 ;--------------------------------------------------------
                                    377 	.area CSEG    (CODE)
                                    378 ;------------------------------------------------------------
                                    379 ;Allocation info for local variables in function 'putchar'
                                    380 ;------------------------------------------------------------
                                    381 ;c                         Allocated to registers 
                                    382 ;------------------------------------------------------------
                                    383 ;	calc.c:15: int putchar(int c) __naked {
                                    384 ;	-----------------------------------------
                                    385 ;	 function putchar
                                    386 ;	-----------------------------------------
      000000                        387 _putchar:
                                    388 ;	naked function: no prologue.
                                    389 ;	calc.c:20: __endasm;
      000000 E5 82            [12]  390 	mov	a, dpl
      000002 02 00 30         [24]  391 	ljmp	0x0030
                                    392 ;	calc.c:21: }
                                    393 ;	naked function: no epilogue.
                                    394 ;------------------------------------------------------------
                                    395 ;Allocation info for local variables in function 'getchar'
                                    396 ;------------------------------------------------------------
                                    397 ;	calc.c:23: int getchar(void) __naked {
                                    398 ;	-----------------------------------------
                                    399 ;	 function getchar
                                    400 ;	-----------------------------------------
      000005                        401 _getchar:
                                    402 ;	naked function: no prologue.
                                    403 ;	calc.c:29: __endasm;
      000005 12 00 32         [24]  404 	lcall	0x0032
      000008 F5 82            [12]  405 	mov	dpl, a
      00000A 75 83 00         [24]  406 	mov	dph, #0
      00000D 22               [24]  407 	ret
                                    408 ;	calc.c:30: }
                                    409 ;	naked function: no epilogue.
                                    410 ;------------------------------------------------------------
                                    411 ;Allocation info for local variables in function 'getchar_poll'
                                    412 ;------------------------------------------------------------
                                    413 ;	calc.c:32: int getchar_poll(void) __naked {
                                    414 ;	-----------------------------------------
                                    415 ;	 function getchar_poll
                                    416 ;	-----------------------------------------
      00000E                        417 _getchar_poll:
                                    418 ;	naked function: no prologue.
                                    419 ;	calc.c:44: __endasm;
      00000E 74 FF            [12]  420 	mov	a, #0xff
      000010 F5 F0            [12]  421 	mov	b, a
      000012 30 98 07         [24]  422 	jnb	ri, nochar
      000015 C2 98            [12]  423 	clr	ri
      000017 E5 99            [12]  424 	mov	a, sbuf
      000019 75 F0 00         [24]  425 	mov	b, #0
      00001C                        426 	nochar:
      00001C F5 82            [12]  427 	mov	dpl, a
      00001E 85 F0 83         [24]  428 	mov	dph, b
      000021 22               [24]  429 	ret
                                    430 ;	calc.c:45: }
                                    431 ;	naked function: no epilogue.
                                    432 ;------------------------------------------------------------
                                    433 ;Allocation info for local variables in function 'printstr'
                                    434 ;------------------------------------------------------------
                                    435 ;s                         Allocated to registers 
                                    436 ;------------------------------------------------------------
                                    437 ;	calc.c:47: static inline void printstr(const char *s) {
                                    438 ;	-----------------------------------------
                                    439 ;	 function printstr
                                    440 ;	-----------------------------------------
      000022                        441 _printstr:
                           000007   442 	ar7 = 0x07
                           000006   443 	ar6 = 0x06
                           000005   444 	ar5 = 0x05
                           000004   445 	ar4 = 0x04
                           000003   446 	ar3 = 0x03
                           000002   447 	ar2 = 0x02
                           000001   448 	ar1 = 0x01
                           000000   449 	ar0 = 0x00
      000022 AD 82            [24]  450 	mov	r5,dpl
      000024 AE 83            [24]  451 	mov	r6,dph
      000026 AF F0            [24]  452 	mov	r7,b
                                    453 ;	calc.c:50: return;
      000028                        454 00103$:
                                    455 ;	calc.c:48: for (; *s; s++) putchar(*s);
      000028 8D 82            [24]  456 	mov	dpl,r5
      00002A 8E 83            [24]  457 	mov	dph,r6
      00002C 8F F0            [24]  458 	mov	b,r7
      00002E 12r00r00         [24]  459 	lcall	__gptrget
      000031 FC               [12]  460 	mov	r4,a
      000032 60 10            [24]  461 	jz	00101$
      000034 7B 00            [12]  462 	mov	r3,#0x00
      000036 8C 82            [24]  463 	mov	dpl,r4
      000038 8B 83            [24]  464 	mov	dph,r3
      00003A 12r00r00         [24]  465 	lcall	_putchar
      00003D 0D               [12]  466 	inc	r5
      00003E BD 00 E7         [24]  467 	cjne	r5,#0x00,00103$
      000041 0E               [12]  468 	inc	r6
      000042 80 E4            [24]  469 	sjmp	00103$
      000044                        470 00101$:
                                    471 ;	calc.c:50: return;
                                    472 ;	calc.c:51: }
      000044 22               [24]  473 	ret
                                    474 ;------------------------------------------------------------
                                    475 ;Allocation info for local variables in function 'printbin'
                                    476 ;------------------------------------------------------------
                                    477 ;d                         Allocated to stack - _bp +1
                                    478 ;mask                      Allocated to stack - _bp +5
                                    479 ;------------------------------------------------------------
                                    480 ;	calc.c:53: static inline void printbin(long d) {
                                    481 ;	-----------------------------------------
                                    482 ;	 function printbin
                                    483 ;	-----------------------------------------
      000045                        484 _printbin:
      000045 C0*00            [24]  485 	push	_bp
      000047 85 81*00         [24]  486 	mov	_bp,sp
      00004A C0 82            [24]  487 	push	dpl
      00004C C0 83            [24]  488 	push	dph
      00004E C0 F0            [24]  489 	push	b
      000050 C0 E0            [24]  490 	push	acc
      000052 E5 81            [12]  491 	mov	a,sp
      000054 24 04            [12]  492 	add	a,#0x04
      000056 F5 81            [12]  493 	mov	sp,a
                                    494 ;	calc.c:56: for (mask = 0x80000000lu; mask; mask >>= 1)
      000058 E5*00            [12]  495 	mov	a,_bp
      00005A 24 05            [12]  496 	add	a,#0x05
      00005C F8               [12]  497 	mov	r0,a
      00005D E4               [12]  498 	clr	a
      00005E F6               [12]  499 	mov	@r0,a
      00005F 08               [12]  500 	inc	r0
      000060 F6               [12]  501 	mov	@r0,a
      000061 08               [12]  502 	inc	r0
      000062 F6               [12]  503 	mov	@r0,a
      000063 08               [12]  504 	inc	r0
      000064 76 80            [12]  505 	mov	@r0,#0x80
      000066                        506 00102$:
                                    507 ;	calc.c:57: (void)putchar((d & mask) ? (int)'1' : (int)'0');
      000066 A8*00            [24]  508 	mov	r0,_bp
      000068 08               [12]  509 	inc	r0
      000069 86 04            [24]  510 	mov	ar4,@r0
      00006B 08               [12]  511 	inc	r0
      00006C 86 05            [24]  512 	mov	ar5,@r0
      00006E 08               [12]  513 	inc	r0
      00006F 86 06            [24]  514 	mov	ar6,@r0
      000071 08               [12]  515 	inc	r0
      000072 86 07            [24]  516 	mov	ar7,@r0
      000074 E5*00            [12]  517 	mov	a,_bp
      000076 24 05            [12]  518 	add	a,#0x05
      000078 F8               [12]  519 	mov	r0,a
      000079 E6               [12]  520 	mov	a,@r0
      00007A 52 04            [12]  521 	anl	ar4,a
      00007C 08               [12]  522 	inc	r0
      00007D E6               [12]  523 	mov	a,@r0
      00007E 52 05            [12]  524 	anl	ar5,a
      000080 08               [12]  525 	inc	r0
      000081 E6               [12]  526 	mov	a,@r0
      000082 52 06            [12]  527 	anl	ar6,a
      000084 08               [12]  528 	inc	r0
      000085 E6               [12]  529 	mov	a,@r0
      000086 52 07            [12]  530 	anl	ar7,a
      000088 EC               [12]  531 	mov	a,r4
      000089 4D               [12]  532 	orl	a,r5
      00008A 4E               [12]  533 	orl	a,r6
      00008B 4F               [12]  534 	orl	a,r7
      00008C 60 06            [24]  535 	jz	00106$
      00008E 7E 31            [12]  536 	mov	r6,#0x31
      000090 7F 00            [12]  537 	mov	r7,#0x00
      000092 80 04            [24]  538 	sjmp	00107$
      000094                        539 00106$:
      000094 7E 30            [12]  540 	mov	r6,#0x30
      000096 7F 00            [12]  541 	mov	r7,#0x00
      000098                        542 00107$:
      000098 8E 82            [24]  543 	mov	dpl,r6
      00009A 8F 83            [24]  544 	mov	dph,r7
      00009C 12r00r00         [24]  545 	lcall	_putchar
                                    546 ;	calc.c:56: for (mask = 0x80000000lu; mask; mask >>= 1)
      00009F E5*00            [12]  547 	mov	a,_bp
      0000A1 24 05            [12]  548 	add	a,#0x05
      0000A3 F8               [12]  549 	mov	r0,a
      0000A4 08               [12]  550 	inc	r0
      0000A5 08               [12]  551 	inc	r0
      0000A6 08               [12]  552 	inc	r0
      0000A7 E6               [12]  553 	mov	a,@r0
      0000A8 C3               [12]  554 	clr	c
      0000A9 13               [12]  555 	rrc	a
      0000AA F6               [12]  556 	mov	@r0,a
      0000AB 18               [12]  557 	dec	r0
      0000AC E6               [12]  558 	mov	a,@r0
      0000AD 13               [12]  559 	rrc	a
      0000AE F6               [12]  560 	mov	@r0,a
      0000AF 18               [12]  561 	dec	r0
      0000B0 E6               [12]  562 	mov	a,@r0
      0000B1 13               [12]  563 	rrc	a
      0000B2 F6               [12]  564 	mov	@r0,a
      0000B3 18               [12]  565 	dec	r0
      0000B4 E6               [12]  566 	mov	a,@r0
      0000B5 13               [12]  567 	rrc	a
      0000B6 F6               [12]  568 	mov	@r0,a
      0000B7 E5*00            [12]  569 	mov	a,_bp
      0000B9 24 05            [12]  570 	add	a,#0x05
      0000BB F8               [12]  571 	mov	r0,a
      0000BC E6               [12]  572 	mov	a,@r0
      0000BD 08               [12]  573 	inc	r0
      0000BE 46               [12]  574 	orl	a,@r0
      0000BF 08               [12]  575 	inc	r0
      0000C0 46               [12]  576 	orl	a,@r0
      0000C1 08               [12]  577 	inc	r0
      0000C2 46               [12]  578 	orl	a,@r0
      0000C3 70 A1            [24]  579 	jnz	00102$
                                    580 ;	calc.c:59: return;
                                    581 ;	calc.c:60: }
      0000C5 85*00 81         [24]  582 	mov	sp,_bp
      0000C8 D0*00            [24]  583 	pop	_bp
      0000CA 22               [24]  584 	ret
                                    585 ;------------------------------------------------------------
                                    586 ;Allocation info for local variables in function 'accumulate'
                                    587 ;------------------------------------------------------------
                                    588 ;delta                     Allocated to stack - _bp -5
                                    589 ;_ctx                      Allocated to registers r5 r6 r7 
                                    590 ;ctx                       Allocated to stack - _bp +8
                                    591 ;d                         Allocated to stack - _bp +11
                                    592 ;sloc0                     Allocated to stack - _bp +1
                                    593 ;sloc1                     Allocated to stack - _bp +4
                                    594 ;------------------------------------------------------------
                                    595 ;	calc.c:84: static int accumulate(void *_ctx, delta_t *delta) __reentrant {
                                    596 ;	-----------------------------------------
                                    597 ;	 function accumulate
                                    598 ;	-----------------------------------------
      0000CB                        599 _accumulate:
      0000CB C0*00            [24]  600 	push	_bp
      0000CD E5 81            [12]  601 	mov	a,sp
      0000CF F5*00            [12]  602 	mov	_bp,a
      0000D1 24 0E            [12]  603 	add	a,#0x0e
      0000D3 F5 81            [12]  604 	mov	sp,a
      0000D5 AD 82            [24]  605 	mov	r5,dpl
      0000D7 AE 83            [24]  606 	mov	r6,dph
      0000D9 AF F0            [24]  607 	mov	r7,b
                                    608 ;	calc.c:85: struct ctx *ctx = (struct ctx *)_ctx;
      0000DB E5*00            [12]  609 	mov	a,_bp
      0000DD 24 08            [12]  610 	add	a,#0x08
      0000DF F8               [12]  611 	mov	r0,a
      0000E0 A6 05            [24]  612 	mov	@r0,ar5
      0000E2 08               [12]  613 	inc	r0
      0000E3 A6 06            [24]  614 	mov	@r0,ar6
      0000E5 08               [12]  615 	inc	r0
      0000E6 A6 07            [24]  616 	mov	@r0,ar7
                                    617 ;	calc.c:90: if (!ctx->acc_valid) {
      0000E8 E5*00            [12]  618 	mov	a,_bp
      0000EA 24 08            [12]  619 	add	a,#0x08
      0000EC F8               [12]  620 	mov	r0,a
      0000ED 74 06            [12]  621 	mov	a,#0x06
      0000EF 26               [12]  622 	add	a,@r0
      0000F0 FA               [12]  623 	mov	r2,a
      0000F1 E4               [12]  624 	clr	a
      0000F2 08               [12]  625 	inc	r0
      0000F3 36               [12]  626 	addc	a,@r0
      0000F4 FB               [12]  627 	mov	r3,a
      0000F5 08               [12]  628 	inc	r0
      0000F6 86 04            [24]  629 	mov	ar4,@r0
      0000F8 8A 82            [24]  630 	mov	dpl,r2
      0000FA 8B 83            [24]  631 	mov	dph,r3
      0000FC 8C F0            [24]  632 	mov	b,r4
      0000FE 12r00r00         [24]  633 	lcall	__gptrget
      000101 70 31            [24]  634 	jnz	00102$
                                    635 ;	calc.c:91: ctx->acc_valid = 1;
      000103 8A 82            [24]  636 	mov	dpl,r2
      000105 8B 83            [24]  637 	mov	dph,r3
      000107 8C F0            [24]  638 	mov	b,r4
      000109 74 01            [12]  639 	mov	a,#0x01
      00010B 12r00r00         [24]  640 	lcall	__gptrput
                                    641 ;	calc.c:92: ctx->acc = 0l;
      00010E E5*00            [12]  642 	mov	a,_bp
      000110 24 08            [12]  643 	add	a,#0x08
      000112 F8               [12]  644 	mov	r0,a
      000113 74 02            [12]  645 	mov	a,#0x02
      000115 26               [12]  646 	add	a,@r0
      000116 FA               [12]  647 	mov	r2,a
      000117 E4               [12]  648 	clr	a
      000118 08               [12]  649 	inc	r0
      000119 36               [12]  650 	addc	a,@r0
      00011A FB               [12]  651 	mov	r3,a
      00011B 08               [12]  652 	inc	r0
      00011C 86 04            [24]  653 	mov	ar4,@r0
      00011E 8A 82            [24]  654 	mov	dpl,r2
      000120 8B 83            [24]  655 	mov	dph,r3
      000122 8C F0            [24]  656 	mov	b,r4
      000124 E4               [12]  657 	clr	a
      000125 12r00r00         [24]  658 	lcall	__gptrput
      000128 A3               [24]  659 	inc	dptr
      000129 12r00r00         [24]  660 	lcall	__gptrput
      00012C A3               [24]  661 	inc	dptr
      00012D 12r00r00         [24]  662 	lcall	__gptrput
      000130 A3               [24]  663 	inc	dptr
      000131 12r00r00         [24]  664 	lcall	__gptrput
      000134                        665 00102$:
                                    666 ;	calc.c:95: d = strtol(ctx->digit, NULL, ctx->base);
      000134 E5*00            [12]  667 	mov	a,_bp
      000136 24 08            [12]  668 	add	a,#0x08
      000138 F8               [12]  669 	mov	r0,a
      000139 86 82            [24]  670 	mov	dpl,@r0
      00013B 08               [12]  671 	inc	r0
      00013C 86 83            [24]  672 	mov	dph,@r0
      00013E 08               [12]  673 	inc	r0
      00013F 86 F0            [24]  674 	mov	b,@r0
      000141 12r00r00         [24]  675 	lcall	__gptrget
      000144 FB               [12]  676 	mov	r3,a
      000145 A3               [24]  677 	inc	dptr
      000146 12r00r00         [24]  678 	lcall	__gptrget
      000149 FC               [12]  679 	mov	r4,a
      00014A E5*00            [12]  680 	mov	a,_bp
      00014C 24 08            [12]  681 	add	a,#0x08
      00014E F8               [12]  682 	mov	r0,a
      00014F 74 07            [12]  683 	mov	a,#0x07
      000151 26               [12]  684 	add	a,@r0
      000152 FA               [12]  685 	mov	r2,a
      000153 E4               [12]  686 	clr	a
      000154 08               [12]  687 	inc	r0
      000155 36               [12]  688 	addc	a,@r0
      000156 FE               [12]  689 	mov	r6,a
      000157 08               [12]  690 	inc	r0
      000158 86 07            [24]  691 	mov	ar7,@r0
      00015A C0 03            [24]  692 	push	ar3
      00015C C0 04            [24]  693 	push	ar4
      00015E E4               [12]  694 	clr	a
      00015F C0 E0            [24]  695 	push	acc
      000161 C0 E0            [24]  696 	push	acc
      000163 C0 E0            [24]  697 	push	acc
      000165 8A 82            [24]  698 	mov	dpl,r2
      000167 8E 83            [24]  699 	mov	dph,r6
      000169 8F F0            [24]  700 	mov	b,r7
      00016B 12r00r00         [24]  701 	lcall	_strtol
      00016E C8               [12]  702 	xch	a,r0
      00016F E5*00            [12]  703 	mov	a,_bp
      000171 24 0B            [12]  704 	add	a,#0x0b
      000173 C8               [12]  705 	xch	a,r0
      000174 A6 82            [24]  706 	mov	@r0,dpl
      000176 08               [12]  707 	inc	r0
      000177 A6 83            [24]  708 	mov	@r0,dph
      000179 08               [12]  709 	inc	r0
      00017A A6 F0            [24]  710 	mov	@r0,b
      00017C 08               [12]  711 	inc	r0
      00017D F6               [12]  712 	mov	@r0,a
      00017E E5 81            [12]  713 	mov	a,sp
      000180 24 FB            [12]  714 	add	a,#0xfb
      000182 F5 81            [12]  715 	mov	sp,a
                                    716 ;	calc.c:96: ctx->acc = ctx->acc * (long)ctx->base + d;
      000184 E5*00            [12]  717 	mov	a,_bp
      000186 24 08            [12]  718 	add	a,#0x08
      000188 F8               [12]  719 	mov	r0,a
      000189 A9*00            [24]  720 	mov	r1,_bp
      00018B 09               [12]  721 	inc	r1
      00018C 74 02            [12]  722 	mov	a,#0x02
      00018E 26               [12]  723 	add	a,@r0
      00018F F7               [12]  724 	mov	@r1,a
      000190 E4               [12]  725 	clr	a
      000191 08               [12]  726 	inc	r0
      000192 36               [12]  727 	addc	a,@r0
      000193 09               [12]  728 	inc	r1
      000194 F7               [12]  729 	mov	@r1,a
      000195 08               [12]  730 	inc	r0
      000196 09               [12]  731 	inc	r1
      000197 E6               [12]  732 	mov	a,@r0
      000198 F7               [12]  733 	mov	@r1,a
      000199 A8*00            [24]  734 	mov	r0,_bp
      00019B 08               [12]  735 	inc	r0
      00019C 86 82            [24]  736 	mov	dpl,@r0
      00019E 08               [12]  737 	inc	r0
      00019F 86 83            [24]  738 	mov	dph,@r0
      0001A1 08               [12]  739 	inc	r0
      0001A2 86 F0            [24]  740 	mov	b,@r0
      0001A4 E5*00            [12]  741 	mov	a,_bp
      0001A6 24 04            [12]  742 	add	a,#0x04
      0001A8 F9               [12]  743 	mov	r1,a
      0001A9 12r00r00         [24]  744 	lcall	__gptrget
      0001AC F7               [12]  745 	mov	@r1,a
      0001AD A3               [24]  746 	inc	dptr
      0001AE 12r00r00         [24]  747 	lcall	__gptrget
      0001B1 09               [12]  748 	inc	r1
      0001B2 F7               [12]  749 	mov	@r1,a
      0001B3 A3               [24]  750 	inc	dptr
      0001B4 12r00r00         [24]  751 	lcall	__gptrget
      0001B7 09               [12]  752 	inc	r1
      0001B8 F7               [12]  753 	mov	@r1,a
      0001B9 A3               [24]  754 	inc	dptr
      0001BA 12r00r00         [24]  755 	lcall	__gptrget
      0001BD 09               [12]  756 	inc	r1
      0001BE F7               [12]  757 	mov	@r1,a
      0001BF E5*00            [12]  758 	mov	a,_bp
      0001C1 24 08            [12]  759 	add	a,#0x08
      0001C3 F8               [12]  760 	mov	r0,a
      0001C4 86 82            [24]  761 	mov	dpl,@r0
      0001C6 08               [12]  762 	inc	r0
      0001C7 86 83            [24]  763 	mov	dph,@r0
      0001C9 08               [12]  764 	inc	r0
      0001CA 86 F0            [24]  765 	mov	b,@r0
      0001CC 12r00r00         [24]  766 	lcall	__gptrget
      0001CF FA               [12]  767 	mov	r2,a
      0001D0 A3               [24]  768 	inc	dptr
      0001D1 12r00r00         [24]  769 	lcall	__gptrget
      0001D4 FB               [12]  770 	mov	r3,a
      0001D5 33               [12]  771 	rlc	a
      0001D6 95 E0            [12]  772 	subb	a,acc
      0001D8 FE               [12]  773 	mov	r6,a
      0001D9 FF               [12]  774 	mov	r7,a
      0001DA C0 02            [24]  775 	push	ar2
      0001DC C0 03            [24]  776 	push	ar3
      0001DE C0 06            [24]  777 	push	ar6
      0001E0 C0 07            [24]  778 	push	ar7
      0001E2 E5*00            [12]  779 	mov	a,_bp
      0001E4 24 04            [12]  780 	add	a,#0x04
      0001E6 F8               [12]  781 	mov	r0,a
      0001E7 86 82            [24]  782 	mov	dpl,@r0
      0001E9 08               [12]  783 	inc	r0
      0001EA 86 83            [24]  784 	mov	dph,@r0
      0001EC 08               [12]  785 	inc	r0
      0001ED 86 F0            [24]  786 	mov	b,@r0
      0001EF 08               [12]  787 	inc	r0
      0001F0 E6               [12]  788 	mov	a,@r0
      0001F1 12r00r00         [24]  789 	lcall	__mullong
      0001F4 AC 82            [24]  790 	mov	r4,dpl
      0001F6 AD 83            [24]  791 	mov	r5,dph
      0001F8 AE F0            [24]  792 	mov	r6,b
      0001FA FF               [12]  793 	mov	r7,a
      0001FB E5 81            [12]  794 	mov	a,sp
      0001FD 24 FC            [12]  795 	add	a,#0xfc
      0001FF F5 81            [12]  796 	mov	sp,a
      000201 E5*00            [12]  797 	mov	a,_bp
      000203 24 0B            [12]  798 	add	a,#0x0b
      000205 F8               [12]  799 	mov	r0,a
      000206 E6               [12]  800 	mov	a,@r0
      000207 2C               [12]  801 	add	a,r4
      000208 FC               [12]  802 	mov	r4,a
      000209 08               [12]  803 	inc	r0
      00020A E6               [12]  804 	mov	a,@r0
      00020B 3D               [12]  805 	addc	a,r5
      00020C FD               [12]  806 	mov	r5,a
      00020D 08               [12]  807 	inc	r0
      00020E E6               [12]  808 	mov	a,@r0
      00020F 3E               [12]  809 	addc	a,r6
      000210 FE               [12]  810 	mov	r6,a
      000211 08               [12]  811 	inc	r0
      000212 E6               [12]  812 	mov	a,@r0
      000213 3F               [12]  813 	addc	a,r7
      000214 FF               [12]  814 	mov	r7,a
      000215 A8*00            [24]  815 	mov	r0,_bp
      000217 08               [12]  816 	inc	r0
      000218 86 82            [24]  817 	mov	dpl,@r0
      00021A 08               [12]  818 	inc	r0
      00021B 86 83            [24]  819 	mov	dph,@r0
      00021D 08               [12]  820 	inc	r0
      00021E 86 F0            [24]  821 	mov	b,@r0
      000220 EC               [12]  822 	mov	a,r4
      000221 12r00r00         [24]  823 	lcall	__gptrput
      000224 A3               [24]  824 	inc	dptr
      000225 ED               [12]  825 	mov	a,r5
      000226 12r00r00         [24]  826 	lcall	__gptrput
      000229 A3               [24]  827 	inc	dptr
      00022A EE               [12]  828 	mov	a,r6
      00022B 12r00r00         [24]  829 	lcall	__gptrput
      00022E A3               [24]  830 	inc	dptr
      00022F EF               [12]  831 	mov	a,r7
      000230 12r00r00         [24]  832 	lcall	__gptrput
                                    833 ;	calc.c:98: return 1;
      000233 90 00 01         [24]  834 	mov	dptr,#0x0001
                                    835 ;	calc.c:99: }
      000236 85*00 81         [24]  836 	mov	sp,_bp
      000239 D0*00            [24]  837 	pop	_bp
      00023B 22               [24]  838 	ret
                                    839 ;------------------------------------------------------------
                                    840 ;Allocation info for local variables in function 'dump_pop'
                                    841 ;------------------------------------------------------------
                                    842 ;delta                     Allocated to stack - _bp -5
                                    843 ;_ctx                      Allocated to registers r5 r6 r7 
                                    844 ;ctx                       Allocated to stack - _bp +5
                                    845 ;d                         Allocated to stack - _bp +8
                                    846 ;r                         Allocated to stack - _bp +2
                                    847 ;__1310720001              Allocated to registers 
                                    848 ;s                         Allocated to registers r5 r6 r7 
                                    849 ;__1966080003              Allocated to registers 
                                    850 ;s                         Allocated to registers r4 r5 r6 
                                    851 ;__1966080005              Allocated to registers 
                                    852 ;s                         Allocated to registers r4 r5 r6 
                                    853 ;__1966080007              Allocated to registers r3 r4 r5 r6 
                                    854 ;d                         Allocated to stack - _bp +12
                                    855 ;mask                      Allocated to stack - _bp +16
                                    856 ;__1966080009              Allocated to registers 
                                    857 ;s                         Allocated to registers r4 r5 r6 
                                    858 ;sloc0                     Allocated to stack - _bp +1
                                    859 ;sloc1                     Allocated to stack - _bp +2
                                    860 ;------------------------------------------------------------
                                    861 ;	calc.c:101: static int dump_pop(void *_ctx, delta_t *delta) __reentrant {
                                    862 ;	-----------------------------------------
                                    863 ;	 function dump_pop
                                    864 ;	-----------------------------------------
      00023C                        865 _dump_pop:
      00023C C0*00            [24]  866 	push	_bp
      00023E E5 81            [12]  867 	mov	a,sp
      000240 F5*00            [12]  868 	mov	_bp,a
      000242 24 13            [12]  869 	add	a,#0x13
      000244 F5 81            [12]  870 	mov	sp,a
      000246 AD 82            [24]  871 	mov	r5,dpl
      000248 AE 83            [24]  872 	mov	r6,dph
      00024A AF F0            [24]  873 	mov	r7,b
                                    874 ;	calc.c:102: struct ctx *ctx = (struct ctx *)_ctx;
      00024C E5*00            [12]  875 	mov	a,_bp
      00024E 24 05            [12]  876 	add	a,#0x05
      000250 F8               [12]  877 	mov	r0,a
      000251 A6 05            [24]  878 	mov	@r0,ar5
      000253 08               [12]  879 	inc	r0
      000254 A6 06            [24]  880 	mov	@r0,ar6
      000256 08               [12]  881 	inc	r0
      000257 A6 07            [24]  882 	mov	@r0,ar7
                                    883 ;	calc.c:106: if (delta->event == EVENT_TERM) printstr("\r\n");
      000259 E5*00            [12]  884 	mov	a,_bp
      00025B 24 FB            [12]  885 	add	a,#0xfb
      00025D F8               [12]  886 	mov	r0,a
      00025E 86 02            [24]  887 	mov	ar2,@r0
      000260 08               [12]  888 	inc	r0
      000261 86 03            [24]  889 	mov	ar3,@r0
      000263 08               [12]  890 	inc	r0
      000264 86 04            [24]  891 	mov	ar4,@r0
      000266 74 02            [12]  892 	mov	a,#0x02
      000268 2A               [12]  893 	add	a,r2
      000269 FA               [12]  894 	mov	r2,a
      00026A E4               [12]  895 	clr	a
      00026B 3B               [12]  896 	addc	a,r3
      00026C FB               [12]  897 	mov	r3,a
      00026D 8A 82            [24]  898 	mov	dpl,r2
      00026F 8B 83            [24]  899 	mov	dph,r3
      000271 8C F0            [24]  900 	mov	b,r4
      000273 12r00r00         [24]  901 	lcall	__gptrget
      000276 FE               [12]  902 	mov	r6,a
      000277 A3               [24]  903 	inc	dptr
      000278 12r00r00         [24]  904 	lcall	__gptrget
      00027B FF               [12]  905 	mov	r7,a
      00027C BE 07 3D         [24]  906 	cjne	r6,#0x07,00102$
      00027F BF 00 3A         [24]  907 	cjne	r7,#0x00,00102$
      000282 7Dr00            [12]  908 	mov	r5,#___str_0
      000284 7Es00            [12]  909 	mov	r6,#(___str_0 >> 8)
      000286 7F 80            [12]  910 	mov	r7,#0x80
                                    911 ;	calc.c:50: return;
      000288                        912 00122$:
                                    913 ;	calc.c:48: for (; *s; s++) putchar(*s);
      000288 8D 82            [24]  914 	mov	dpl,r5
      00028A 8E 83            [24]  915 	mov	dph,r6
      00028C 8F F0            [24]  916 	mov	b,r7
      00028E A8*00            [24]  917 	mov	r0,_bp
      000290 08               [12]  918 	inc	r0
      000291 12r00r00         [24]  919 	lcall	__gptrget
      000294 F6               [12]  920 	mov	@r0,a
      000295 A8*00            [24]  921 	mov	r0,_bp
      000297 08               [12]  922 	inc	r0
      000298 E6               [12]  923 	mov	a,@r0
      000299 60 21            [24]  924 	jz	00102$
      00029B C0 02            [24]  925 	push	ar2
      00029D C0 03            [24]  926 	push	ar3
      00029F C0 04            [24]  927 	push	ar4
      0002A1 A8*00            [24]  928 	mov	r0,_bp
      0002A3 08               [12]  929 	inc	r0
      0002A4 86 03            [24]  930 	mov	ar3,@r0
      0002A6 7C 00            [12]  931 	mov	r4,#0x00
      0002A8 8B 82            [24]  932 	mov	dpl,r3
      0002AA 8C 83            [24]  933 	mov	dph,r4
      0002AC 12r00r00         [24]  934 	lcall	_putchar
      0002AF 0D               [12]  935 	inc	r5
      0002B0 BD 00 01         [24]  936 	cjne	r5,#0x00,00210$
      0002B3 0E               [12]  937 	inc	r6
      0002B4                        938 00210$:
      0002B4 D0 04            [24]  939 	pop	ar4
      0002B6 D0 03            [24]  940 	pop	ar3
      0002B8 D0 02            [24]  941 	pop	ar2
                                    942 ;	calc.c:106: if (delta->event == EVENT_TERM) printstr("\r\n");
      0002BA 80 CC            [24]  943 	sjmp	00122$
      0002BC                        944 00102$:
                                    945 ;	calc.c:108: r = stack_pop(&ctx->s, &d);
      0002BC C0 02            [24]  946 	push	ar2
      0002BE C0 03            [24]  947 	push	ar3
      0002C0 C0 04            [24]  948 	push	ar4
      0002C2 E5*00            [12]  949 	mov	a,_bp
      0002C4 24 08            [12]  950 	add	a,#0x08
      0002C6 FF               [12]  951 	mov	r7,a
      0002C7 A8*00            [24]  952 	mov	r0,_bp
      0002C9 08               [12]  953 	inc	r0
      0002CA 08               [12]  954 	inc	r0
      0002CB A6 07            [24]  955 	mov	@r0,ar7
      0002CD 08               [12]  956 	inc	r0
      0002CE 76 00            [12]  957 	mov	@r0,#0x00
      0002D0 08               [12]  958 	inc	r0
      0002D1 76 40            [12]  959 	mov	@r0,#0x40
      0002D3 E5*00            [12]  960 	mov	a,_bp
      0002D5 24 05            [12]  961 	add	a,#0x05
      0002D7 F8               [12]  962 	mov	r0,a
      0002D8 74 09            [12]  963 	mov	a,#0x09
      0002DA 26               [12]  964 	add	a,@r0
      0002DB FA               [12]  965 	mov	r2,a
      0002DC E4               [12]  966 	clr	a
      0002DD 08               [12]  967 	inc	r0
      0002DE 36               [12]  968 	addc	a,@r0
      0002DF FB               [12]  969 	mov	r3,a
      0002E0 08               [12]  970 	inc	r0
      0002E1 86 06            [24]  971 	mov	ar6,@r0
      0002E3 C0 07            [24]  972 	push	ar7
      0002E5 C0 04            [24]  973 	push	ar4
      0002E7 C0 03            [24]  974 	push	ar3
      0002E9 C0 02            [24]  975 	push	ar2
      0002EB A8*00            [24]  976 	mov	r0,_bp
      0002ED 08               [12]  977 	inc	r0
      0002EE 08               [12]  978 	inc	r0
      0002EF E6               [12]  979 	mov	a,@r0
      0002F0 C0 E0            [24]  980 	push	acc
      0002F2 08               [12]  981 	inc	r0
      0002F3 E6               [12]  982 	mov	a,@r0
      0002F4 C0 E0            [24]  983 	push	acc
      0002F6 08               [12]  984 	inc	r0
      0002F7 E6               [12]  985 	mov	a,@r0
      0002F8 C0 E0            [24]  986 	push	acc
      0002FA 8A 82            [24]  987 	mov	dpl,r2
      0002FC 8B 83            [24]  988 	mov	dph,r3
      0002FE 8E F0            [24]  989 	mov	b,r6
      000300 12r00r00         [24]  990 	lcall	_stack_pop
      000303 AD 82            [24]  991 	mov	r5,dpl
      000305 AE 83            [24]  992 	mov	r6,dph
      000307 15 81            [12]  993 	dec	sp
      000309 15 81            [12]  994 	dec	sp
      00030B 15 81            [12]  995 	dec	sp
      00030D D0 02            [24]  996 	pop	ar2
      00030F D0 03            [24]  997 	pop	ar3
      000311 D0 04            [24]  998 	pop	ar4
      000313 D0 07            [24]  999 	pop	ar7
      000315 A8*00            [24] 1000 	mov	r0,_bp
      000317 08               [12] 1001 	inc	r0
      000318 08               [12] 1002 	inc	r0
      000319 A6 05            [24] 1003 	mov	@r0,ar5
      00031B 08               [12] 1004 	inc	r0
      00031C A6 06            [24] 1005 	mov	@r0,ar6
                                   1006 ;	calc.c:109: if (!r) {
      00031E D0 04            [24] 1007 	pop	ar4
      000320 D0 03            [24] 1008 	pop	ar3
      000322 D0 02            [24] 1009 	pop	ar2
      000324 ED               [12] 1010 	mov	a,r5
      000325 4E               [12] 1011 	orl	a,r6
      000326 70 3D            [24] 1012 	jnz	00154$
                                   1013 ;	calc.c:110: if (delta->event != EVENT_TERM) printstr("stack underflow\r\n");
      000328 8A 82            [24] 1014 	mov	dpl,r2
      00032A 8B 83            [24] 1015 	mov	dph,r3
      00032C 8C F0            [24] 1016 	mov	b,r4
      00032E 12r00r00         [24] 1017 	lcall	__gptrget
      000331 FA               [12] 1018 	mov	r2,a
      000332 A3               [24] 1019 	inc	dptr
      000333 12r00r00         [24] 1020 	lcall	__gptrget
      000336 FB               [12] 1021 	mov	r3,a
      000337 BA 07 06         [24] 1022 	cjne	r2,#0x07,00212$
      00033A BB 00 03         [24] 1023 	cjne	r3,#0x00,00212$
      00033D 02r04rE7         [24] 1024 	ljmp	00110$
      000340                       1025 00212$:
      000340 7Cr03            [12] 1026 	mov	r4,#___str_1
      000342 7Ds00            [12] 1027 	mov	r5,#(___str_1 >> 8)
      000344 7E 80            [12] 1028 	mov	r6,#0x80
                                   1029 ;	calc.c:50: return;
      000346                       1030 00125$:
                                   1031 ;	calc.c:48: for (; *s; s++) putchar(*s);
      000346 8C 82            [24] 1032 	mov	dpl,r4
      000348 8D 83            [24] 1033 	mov	dph,r5
      00034A 8E F0            [24] 1034 	mov	b,r6
      00034C 12r00r00         [24] 1035 	lcall	__gptrget
      00034F FB               [12] 1036 	mov	r3,a
      000350 70 03            [24] 1037 	jnz	00213$
      000352 02r04rE7         [24] 1038 	ljmp	00110$
      000355                       1039 00213$:
      000355 7A 00            [12] 1040 	mov	r2,#0x00
      000357 8B 82            [24] 1041 	mov	dpl,r3
      000359 8A 83            [24] 1042 	mov	dph,r2
      00035B 12r00r00         [24] 1043 	lcall	_putchar
      00035E 0C               [12] 1044 	inc	r4
                                   1045 ;	calc.c:111: } else while (r > 0) {
      00035F BC 00 E4         [24] 1046 	cjne	r4,#0x00,00125$
      000362 0D               [12] 1047 	inc	r5
      000363 80 E1            [24] 1048 	sjmp	00125$
      000365                       1049 00154$:
      000365                       1050 00105$:
      000365 A8*00            [24] 1051 	mov	r0,_bp
      000367 08               [12] 1052 	inc	r0
      000368 08               [12] 1053 	inc	r0
      000369 C3               [12] 1054 	clr	c
      00036A E4               [12] 1055 	clr	a
      00036B 96               [12] 1056 	subb	a,@r0
      00036C 74 80            [12] 1057 	mov	a,#(0x00 ^ 0x80)
      00036E 08               [12] 1058 	inc	r0
      00036F 86 F0            [24] 1059 	mov	b,@r0
      000371 63 F0 80         [24] 1060 	xrl	b,#0x80
      000374 95 F0            [12] 1061 	subb	a,b
      000376 40 03            [24] 1062 	jc	00215$
      000378 02r04rE7         [24] 1063 	ljmp	00110$
      00037B                       1064 00215$:
                                   1065 ;	calc.c:112: printstr("VA ");
      00037B 7Cr15            [12] 1066 	mov	r4,#___str_2
      00037D 7Ds00            [12] 1067 	mov	r5,#(___str_2 >> 8)
      00037F 7E 80            [12] 1068 	mov	r6,#0x80
                                   1069 ;	calc.c:50: return;
      000381                       1070 00128$:
                                   1071 ;	calc.c:48: for (; *s; s++) putchar(*s);
      000381 8C 82            [24] 1072 	mov	dpl,r4
      000383 8D 83            [24] 1073 	mov	dph,r5
      000385 8E F0            [24] 1074 	mov	b,r6
      000387 12r00r00         [24] 1075 	lcall	__gptrget
      00038A FB               [12] 1076 	mov	r3,a
      00038B 60 10            [24] 1077 	jz	00116$
      00038D 7A 00            [12] 1078 	mov	r2,#0x00
      00038F 8B 82            [24] 1079 	mov	dpl,r3
      000391 8A 83            [24] 1080 	mov	dph,r2
      000393 12r00r00         [24] 1081 	lcall	_putchar
      000396 0C               [12] 1082 	inc	r4
                                   1083 ;	calc.c:112: printstr("VA ");
      000397 BC 00 E7         [24] 1084 	cjne	r4,#0x00,00128$
      00039A 0D               [12] 1085 	inc	r5
      00039B 80 E4            [24] 1086 	sjmp	00128$
      00039D                       1087 00116$:
                                   1088 ;	calc.c:113: printf("% 11ld / ", d);
      00039D C0 07            [24] 1089 	push	ar7
      00039F E5*00            [12] 1090 	mov	a,_bp
      0003A1 24 08            [12] 1091 	add	a,#0x08
      0003A3 F8               [12] 1092 	mov	r0,a
      0003A4 E6               [12] 1093 	mov	a,@r0
      0003A5 C0 E0            [24] 1094 	push	acc
      0003A7 08               [12] 1095 	inc	r0
      0003A8 E6               [12] 1096 	mov	a,@r0
      0003A9 C0 E0            [24] 1097 	push	acc
      0003AB 08               [12] 1098 	inc	r0
      0003AC E6               [12] 1099 	mov	a,@r0
      0003AD C0 E0            [24] 1100 	push	acc
      0003AF 08               [12] 1101 	inc	r0
      0003B0 E6               [12] 1102 	mov	a,@r0
      0003B1 C0 E0            [24] 1103 	push	acc
      0003B3 74r19            [12] 1104 	mov	a,#___str_3
      0003B5 C0 E0            [24] 1105 	push	acc
      0003B7 74s00            [12] 1106 	mov	a,#(___str_3 >> 8)
      0003B9 C0 E0            [24] 1107 	push	acc
      0003BB 74 80            [12] 1108 	mov	a,#0x80
      0003BD C0 E0            [24] 1109 	push	acc
      0003BF 12r00r00         [24] 1110 	lcall	_printf
      0003C2 E5 81            [12] 1111 	mov	a,sp
      0003C4 24 F9            [12] 1112 	add	a,#0xf9
      0003C6 F5 81            [12] 1113 	mov	sp,a
                                   1114 ;	calc.c:114: printf("%08lx / ", d);
      0003C8 E5*00            [12] 1115 	mov	a,_bp
      0003CA 24 08            [12] 1116 	add	a,#0x08
      0003CC F8               [12] 1117 	mov	r0,a
      0003CD E6               [12] 1118 	mov	a,@r0
      0003CE C0 E0            [24] 1119 	push	acc
      0003D0 08               [12] 1120 	inc	r0
      0003D1 E6               [12] 1121 	mov	a,@r0
      0003D2 C0 E0            [24] 1122 	push	acc
      0003D4 08               [12] 1123 	inc	r0
      0003D5 E6               [12] 1124 	mov	a,@r0
      0003D6 C0 E0            [24] 1125 	push	acc
      0003D8 08               [12] 1126 	inc	r0
      0003D9 E6               [12] 1127 	mov	a,@r0
      0003DA C0 E0            [24] 1128 	push	acc
      0003DC 74r23            [12] 1129 	mov	a,#___str_4
      0003DE C0 E0            [24] 1130 	push	acc
      0003E0 74s00            [12] 1131 	mov	a,#(___str_4 >> 8)
      0003E2 C0 E0            [24] 1132 	push	acc
      0003E4 74 80            [12] 1133 	mov	a,#0x80
      0003E6 C0 E0            [24] 1134 	push	acc
      0003E8 12r00r00         [24] 1135 	lcall	_printf
      0003EB E5 81            [12] 1136 	mov	a,sp
      0003ED 24 F9            [12] 1137 	add	a,#0xf9
      0003EF F5 81            [12] 1138 	mov	sp,a
      0003F1 D0 07            [24] 1139 	pop	ar7
                                   1140 ;	calc.c:115: printbin(d);
      0003F3 E5*00            [12] 1141 	mov	a,_bp
      0003F5 24 08            [12] 1142 	add	a,#0x08
      0003F7 F8               [12] 1143 	mov	r0,a
      0003F8 86 03            [24] 1144 	mov	ar3,@r0
      0003FA 08               [12] 1145 	inc	r0
      0003FB 86 04            [24] 1146 	mov	ar4,@r0
      0003FD 08               [12] 1147 	inc	r0
      0003FE 86 05            [24] 1148 	mov	ar5,@r0
      000400 08               [12] 1149 	inc	r0
      000401 86 06            [24] 1150 	mov	ar6,@r0
      000403 E5*00            [12] 1151 	mov	a,_bp
      000405 24 0C            [12] 1152 	add	a,#0x0c
      000407 F8               [12] 1153 	mov	r0,a
      000408 A6 03            [24] 1154 	mov	@r0,ar3
      00040A 08               [12] 1155 	inc	r0
      00040B A6 04            [24] 1156 	mov	@r0,ar4
      00040D 08               [12] 1157 	inc	r0
      00040E A6 05            [24] 1158 	mov	@r0,ar5
      000410 08               [12] 1159 	inc	r0
      000411 A6 06            [24] 1160 	mov	@r0,ar6
                                   1161 ;	calc.c:56: for (mask = 0x80000000lu; mask; mask >>= 1)
      000413 E5*00            [12] 1162 	mov	a,_bp
      000415 24 10            [12] 1163 	add	a,#0x10
      000417 F8               [12] 1164 	mov	r0,a
      000418 E4               [12] 1165 	clr	a
      000419 F6               [12] 1166 	mov	@r0,a
      00041A 08               [12] 1167 	inc	r0
      00041B F6               [12] 1168 	mov	@r0,a
      00041C 08               [12] 1169 	inc	r0
      00041D F6               [12] 1170 	mov	@r0,a
      00041E 08               [12] 1171 	inc	r0
      00041F 76 80            [12] 1172 	mov	@r0,#0x80
      000421                       1173 00130$:
                                   1174 ;	calc.c:57: (void)putchar((d & mask) ? (int)'1' : (int)'0');
      000421 C0 07            [24] 1175 	push	ar7
      000423 E5*00            [12] 1176 	mov	a,_bp
      000425 24 0C            [12] 1177 	add	a,#0x0c
      000427 F8               [12] 1178 	mov	r0,a
      000428 86 03            [24] 1179 	mov	ar3,@r0
      00042A 08               [12] 1180 	inc	r0
      00042B 86 05            [24] 1181 	mov	ar5,@r0
      00042D 08               [12] 1182 	inc	r0
      00042E 86 06            [24] 1183 	mov	ar6,@r0
      000430 08               [12] 1184 	inc	r0
      000431 86 07            [24] 1185 	mov	ar7,@r0
      000433 E5*00            [12] 1186 	mov	a,_bp
      000435 24 10            [12] 1187 	add	a,#0x10
      000437 F8               [12] 1188 	mov	r0,a
      000438 E6               [12] 1189 	mov	a,@r0
      000439 52 03            [12] 1190 	anl	ar3,a
      00043B 08               [12] 1191 	inc	r0
      00043C E6               [12] 1192 	mov	a,@r0
      00043D 52 05            [12] 1193 	anl	ar5,a
      00043F 08               [12] 1194 	inc	r0
      000440 E6               [12] 1195 	mov	a,@r0
      000441 52 06            [12] 1196 	anl	ar6,a
      000443 08               [12] 1197 	inc	r0
      000444 E6               [12] 1198 	mov	a,@r0
      000445 52 07            [12] 1199 	anl	ar7,a
      000447 EB               [12] 1200 	mov	a,r3
      000448 4D               [12] 1201 	orl	a,r5
      000449 4E               [12] 1202 	orl	a,r6
      00044A 4F               [12] 1203 	orl	a,r7
      00044B D0 07            [24] 1204 	pop	ar7
      00044D 60 06            [24] 1205 	jz	00137$
      00044F 7D 31            [12] 1206 	mov	r5,#0x31
      000451 7E 00            [12] 1207 	mov	r6,#0x00
      000453 80 04            [24] 1208 	sjmp	00138$
      000455                       1209 00137$:
      000455 7D 30            [12] 1210 	mov	r5,#0x30
      000457 7E 00            [12] 1211 	mov	r6,#0x00
      000459                       1212 00138$:
      000459 8D 82            [24] 1213 	mov	dpl,r5
      00045B 8E 83            [24] 1214 	mov	dph,r6
      00045D 12r00r00         [24] 1215 	lcall	_putchar
                                   1216 ;	calc.c:56: for (mask = 0x80000000lu; mask; mask >>= 1)
      000460 E5*00            [12] 1217 	mov	a,_bp
      000462 24 10            [12] 1218 	add	a,#0x10
      000464 F8               [12] 1219 	mov	r0,a
      000465 08               [12] 1220 	inc	r0
      000466 08               [12] 1221 	inc	r0
      000467 08               [12] 1222 	inc	r0
      000468 E6               [12] 1223 	mov	a,@r0
      000469 C3               [12] 1224 	clr	c
      00046A 13               [12] 1225 	rrc	a
      00046B F6               [12] 1226 	mov	@r0,a
      00046C 18               [12] 1227 	dec	r0
      00046D E6               [12] 1228 	mov	a,@r0
      00046E 13               [12] 1229 	rrc	a
      00046F F6               [12] 1230 	mov	@r0,a
      000470 18               [12] 1231 	dec	r0
      000471 E6               [12] 1232 	mov	a,@r0
      000472 13               [12] 1233 	rrc	a
      000473 F6               [12] 1234 	mov	@r0,a
      000474 18               [12] 1235 	dec	r0
      000475 E6               [12] 1236 	mov	a,@r0
      000476 13               [12] 1237 	rrc	a
      000477 F6               [12] 1238 	mov	@r0,a
      000478 E5*00            [12] 1239 	mov	a,_bp
      00047A 24 10            [12] 1240 	add	a,#0x10
      00047C F8               [12] 1241 	mov	r0,a
      00047D E6               [12] 1242 	mov	a,@r0
      00047E 08               [12] 1243 	inc	r0
      00047F 46               [12] 1244 	orl	a,@r0
      000480 08               [12] 1245 	inc	r0
      000481 46               [12] 1246 	orl	a,@r0
      000482 08               [12] 1247 	inc	r0
      000483 46               [12] 1248 	orl	a,@r0
      000484 70 9B            [24] 1249 	jnz	00130$
                                   1250 ;	calc.c:116: printstr("\r\n");
      000486 7Cr00            [12] 1251 	mov	r4,#___str_0
      000488 7Ds00            [12] 1252 	mov	r5,#(___str_0 >> 8)
      00048A 7E 80            [12] 1253 	mov	r6,#0x80
                                   1254 ;	calc.c:50: return;
      00048C                       1255 00133$:
                                   1256 ;	calc.c:48: for (; *s; s++) putchar(*s);
      00048C 8C 82            [24] 1257 	mov	dpl,r4
      00048E 8D 83            [24] 1258 	mov	dph,r5
      000490 8E F0            [24] 1259 	mov	b,r6
      000492 12r00r00         [24] 1260 	lcall	__gptrget
      000495 FB               [12] 1261 	mov	r3,a
      000496 60 10            [24] 1262 	jz	00120$
      000498 7A 00            [12] 1263 	mov	r2,#0x00
      00049A 8B 82            [24] 1264 	mov	dpl,r3
      00049C 8A 83            [24] 1265 	mov	dph,r2
      00049E 12r00r00         [24] 1266 	lcall	_putchar
      0004A1 0C               [12] 1267 	inc	r4
                                   1268 ;	calc.c:116: printstr("\r\n");
      0004A2 BC 00 E7         [24] 1269 	cjne	r4,#0x00,00133$
      0004A5 0D               [12] 1270 	inc	r5
      0004A6 80 E4            [24] 1271 	sjmp	00133$
      0004A8                       1272 00120$:
                                   1273 ;	calc.c:117: r = stack_pop(&ctx->s, &d);
      0004A8 8F 04            [24] 1274 	mov	ar4,r7
      0004AA 7D 00            [12] 1275 	mov	r5,#0x00
      0004AC 7E 40            [12] 1276 	mov	r6,#0x40
      0004AE C0 07            [24] 1277 	push	ar7
      0004B0 E5*00            [12] 1278 	mov	a,_bp
      0004B2 24 05            [12] 1279 	add	a,#0x05
      0004B4 F8               [12] 1280 	mov	r0,a
      0004B5 74 09            [12] 1281 	mov	a,#0x09
      0004B7 26               [12] 1282 	add	a,@r0
      0004B8 FA               [12] 1283 	mov	r2,a
      0004B9 E4               [12] 1284 	clr	a
      0004BA 08               [12] 1285 	inc	r0
      0004BB 36               [12] 1286 	addc	a,@r0
      0004BC FB               [12] 1287 	mov	r3,a
      0004BD 08               [12] 1288 	inc	r0
      0004BE 86 07            [24] 1289 	mov	ar7,@r0
      0004C0 C0 04            [24] 1290 	push	ar4
      0004C2 C0 05            [24] 1291 	push	ar5
      0004C4 C0 06            [24] 1292 	push	ar6
      0004C6 8A 82            [24] 1293 	mov	dpl,r2
      0004C8 8B 83            [24] 1294 	mov	dph,r3
      0004CA 8F F0            [24] 1295 	mov	b,r7
      0004CC 12r00r00         [24] 1296 	lcall	_stack_pop
      0004CF AE 82            [24] 1297 	mov	r6,dpl
      0004D1 AF 83            [24] 1298 	mov	r7,dph
      0004D3 15 81            [12] 1299 	dec	sp
      0004D5 15 81            [12] 1300 	dec	sp
      0004D7 15 81            [12] 1301 	dec	sp
      0004D9 A8*00            [24] 1302 	mov	r0,_bp
      0004DB 08               [12] 1303 	inc	r0
      0004DC 08               [12] 1304 	inc	r0
      0004DD A6 06            [24] 1305 	mov	@r0,ar6
      0004DF 08               [12] 1306 	inc	r0
      0004E0 A6 07            [24] 1307 	mov	@r0,ar7
      0004E2 D0 07            [24] 1308 	pop	ar7
      0004E4 02r03r65         [24] 1309 	ljmp	00105$
      0004E7                       1310 00110$:
                                   1311 ;	calc.c:120: return 1;
      0004E7 90 00 01         [24] 1312 	mov	dptr,#0x0001
                                   1313 ;	calc.c:121: }
      0004EA 85*00 81         [24] 1314 	mov	sp,_bp
      0004ED D0*00            [24] 1315 	pop	_bp
      0004EF 22               [24] 1316 	ret
                                   1317 ;------------------------------------------------------------
                                   1318 ;Allocation info for local variables in function 'dump_peek'
                                   1319 ;------------------------------------------------------------
                                   1320 ;d                         Allocated to stack - _bp -6
                                   1321 ;_ctx                      Allocated to registers 
                                   1322 ;__1310720011              Allocated to registers 
                                   1323 ;s                         Allocated to registers r5 r6 r7 
                                   1324 ;__1310720013              Allocated to registers r4 r5 r6 r7 
                                   1325 ;d                         Allocated to stack - _bp +1
                                   1326 ;mask                      Allocated to stack - _bp +5
                                   1327 ;__1310720015              Allocated to registers 
                                   1328 ;s                         Allocated to registers r5 r6 r7 
                                   1329 ;------------------------------------------------------------
                                   1330 ;	calc.c:123: static int dump_peek(void *_ctx, long d) __reentrant {
                                   1331 ;	-----------------------------------------
                                   1332 ;	 function dump_peek
                                   1333 ;	-----------------------------------------
      0004F0                       1334 _dump_peek:
      0004F0 C0*00            [24] 1335 	push	_bp
      0004F2 E5 81            [12] 1336 	mov	a,sp
      0004F4 F5*00            [12] 1337 	mov	_bp,a
      0004F6 24 08            [12] 1338 	add	a,#0x08
      0004F8 F5 81            [12] 1339 	mov	sp,a
                                   1340 ;	calc.c:126: printstr("PA ");
      0004FA 7Dr2C            [12] 1341 	mov	r5,#___str_5
      0004FC 7Es00            [12] 1342 	mov	r6,#(___str_5 >> 8)
      0004FE 7F 80            [12] 1343 	mov	r7,#0x80
                                   1344 ;	calc.c:50: return;
      000500                       1345 00108$:
                                   1346 ;	calc.c:48: for (; *s; s++) putchar(*s);
      000500 8D 82            [24] 1347 	mov	dpl,r5
      000502 8E 83            [24] 1348 	mov	dph,r6
      000504 8F F0            [24] 1349 	mov	b,r7
      000506 12r00r00         [24] 1350 	lcall	__gptrget
      000509 FC               [12] 1351 	mov	r4,a
      00050A 60 10            [24] 1352 	jz	00102$
      00050C 7B 00            [12] 1353 	mov	r3,#0x00
      00050E 8C 82            [24] 1354 	mov	dpl,r4
      000510 8B 83            [24] 1355 	mov	dph,r3
      000512 12r00r00         [24] 1356 	lcall	_putchar
      000515 0D               [12] 1357 	inc	r5
                                   1358 ;	calc.c:126: printstr("PA ");
      000516 BD 00 E7         [24] 1359 	cjne	r5,#0x00,00108$
      000519 0E               [12] 1360 	inc	r6
      00051A 80 E4            [24] 1361 	sjmp	00108$
      00051C                       1362 00102$:
                                   1363 ;	calc.c:127: printf("% 11ld / ", d);
      00051C E5*00            [12] 1364 	mov	a,_bp
      00051E 24 FA            [12] 1365 	add	a,#0xfa
      000520 F8               [12] 1366 	mov	r0,a
      000521 E6               [12] 1367 	mov	a,@r0
      000522 C0 E0            [24] 1368 	push	acc
      000524 08               [12] 1369 	inc	r0
      000525 E6               [12] 1370 	mov	a,@r0
      000526 C0 E0            [24] 1371 	push	acc
      000528 08               [12] 1372 	inc	r0
      000529 E6               [12] 1373 	mov	a,@r0
      00052A C0 E0            [24] 1374 	push	acc
      00052C 08               [12] 1375 	inc	r0
      00052D E6               [12] 1376 	mov	a,@r0
      00052E C0 E0            [24] 1377 	push	acc
      000530 74r19            [12] 1378 	mov	a,#___str_3
      000532 C0 E0            [24] 1379 	push	acc
      000534 74s00            [12] 1380 	mov	a,#(___str_3 >> 8)
      000536 C0 E0            [24] 1381 	push	acc
      000538 74 80            [12] 1382 	mov	a,#0x80
      00053A C0 E0            [24] 1383 	push	acc
      00053C 12r00r00         [24] 1384 	lcall	_printf
      00053F E5 81            [12] 1385 	mov	a,sp
      000541 24 F9            [12] 1386 	add	a,#0xf9
      000543 F5 81            [12] 1387 	mov	sp,a
                                   1388 ;	calc.c:128: printf("%08lx / ", d);
      000545 E5*00            [12] 1389 	mov	a,_bp
      000547 24 FA            [12] 1390 	add	a,#0xfa
      000549 F8               [12] 1391 	mov	r0,a
      00054A E6               [12] 1392 	mov	a,@r0
      00054B C0 E0            [24] 1393 	push	acc
      00054D 08               [12] 1394 	inc	r0
      00054E E6               [12] 1395 	mov	a,@r0
      00054F C0 E0            [24] 1396 	push	acc
      000551 08               [12] 1397 	inc	r0
      000552 E6               [12] 1398 	mov	a,@r0
      000553 C0 E0            [24] 1399 	push	acc
      000555 08               [12] 1400 	inc	r0
      000556 E6               [12] 1401 	mov	a,@r0
      000557 C0 E0            [24] 1402 	push	acc
      000559 74r23            [12] 1403 	mov	a,#___str_4
      00055B C0 E0            [24] 1404 	push	acc
      00055D 74s00            [12] 1405 	mov	a,#(___str_4 >> 8)
      00055F C0 E0            [24] 1406 	push	acc
      000561 74 80            [12] 1407 	mov	a,#0x80
      000563 C0 E0            [24] 1408 	push	acc
      000565 12r00r00         [24] 1409 	lcall	_printf
      000568 E5 81            [12] 1410 	mov	a,sp
      00056A 24 F9            [12] 1411 	add	a,#0xf9
      00056C F5 81            [12] 1412 	mov	sp,a
                                   1413 ;	calc.c:129: printbin(d);
      00056E E5*00            [12] 1414 	mov	a,_bp
      000570 24 FA            [12] 1415 	add	a,#0xfa
      000572 F8               [12] 1416 	mov	r0,a
      000573 86 04            [24] 1417 	mov	ar4,@r0
      000575 08               [12] 1418 	inc	r0
      000576 86 05            [24] 1419 	mov	ar5,@r0
      000578 08               [12] 1420 	inc	r0
      000579 86 06            [24] 1421 	mov	ar6,@r0
      00057B 08               [12] 1422 	inc	r0
      00057C 86 07            [24] 1423 	mov	ar7,@r0
      00057E A8*00            [24] 1424 	mov	r0,_bp
      000580 08               [12] 1425 	inc	r0
      000581 A6 04            [24] 1426 	mov	@r0,ar4
      000583 08               [12] 1427 	inc	r0
      000584 A6 05            [24] 1428 	mov	@r0,ar5
      000586 08               [12] 1429 	inc	r0
      000587 A6 06            [24] 1430 	mov	@r0,ar6
      000589 08               [12] 1431 	inc	r0
      00058A A6 07            [24] 1432 	mov	@r0,ar7
                                   1433 ;	calc.c:56: for (mask = 0x80000000lu; mask; mask >>= 1)
      00058C E5*00            [12] 1434 	mov	a,_bp
      00058E 24 05            [12] 1435 	add	a,#0x05
      000590 F8               [12] 1436 	mov	r0,a
      000591 E4               [12] 1437 	clr	a
      000592 F6               [12] 1438 	mov	@r0,a
      000593 08               [12] 1439 	inc	r0
      000594 F6               [12] 1440 	mov	@r0,a
      000595 08               [12] 1441 	inc	r0
      000596 F6               [12] 1442 	mov	@r0,a
      000597 08               [12] 1443 	inc	r0
      000598 76 80            [12] 1444 	mov	@r0,#0x80
      00059A                       1445 00110$:
                                   1446 ;	calc.c:57: (void)putchar((d & mask) ? (int)'1' : (int)'0');
      00059A A8*00            [24] 1447 	mov	r0,_bp
      00059C 08               [12] 1448 	inc	r0
      00059D 86 04            [24] 1449 	mov	ar4,@r0
      00059F 08               [12] 1450 	inc	r0
      0005A0 86 05            [24] 1451 	mov	ar5,@r0
      0005A2 08               [12] 1452 	inc	r0
      0005A3 86 06            [24] 1453 	mov	ar6,@r0
      0005A5 08               [12] 1454 	inc	r0
      0005A6 86 07            [24] 1455 	mov	ar7,@r0
      0005A8 E5*00            [12] 1456 	mov	a,_bp
      0005AA 24 05            [12] 1457 	add	a,#0x05
      0005AC F8               [12] 1458 	mov	r0,a
      0005AD E6               [12] 1459 	mov	a,@r0
      0005AE 52 04            [12] 1460 	anl	ar4,a
      0005B0 08               [12] 1461 	inc	r0
      0005B1 E6               [12] 1462 	mov	a,@r0
      0005B2 52 05            [12] 1463 	anl	ar5,a
      0005B4 08               [12] 1464 	inc	r0
      0005B5 E6               [12] 1465 	mov	a,@r0
      0005B6 52 06            [12] 1466 	anl	ar6,a
      0005B8 08               [12] 1467 	inc	r0
      0005B9 E6               [12] 1468 	mov	a,@r0
      0005BA 52 07            [12] 1469 	anl	ar7,a
      0005BC EC               [12] 1470 	mov	a,r4
      0005BD 4D               [12] 1471 	orl	a,r5
      0005BE 4E               [12] 1472 	orl	a,r6
      0005BF 4F               [12] 1473 	orl	a,r7
      0005C0 60 06            [24] 1474 	jz	00117$
      0005C2 7E 31            [12] 1475 	mov	r6,#0x31
      0005C4 7F 00            [12] 1476 	mov	r7,#0x00
      0005C6 80 04            [24] 1477 	sjmp	00118$
      0005C8                       1478 00117$:
      0005C8 7E 30            [12] 1479 	mov	r6,#0x30
      0005CA 7F 00            [12] 1480 	mov	r7,#0x00
      0005CC                       1481 00118$:
      0005CC 8E 82            [24] 1482 	mov	dpl,r6
      0005CE 8F 83            [24] 1483 	mov	dph,r7
      0005D0 12r00r00         [24] 1484 	lcall	_putchar
                                   1485 ;	calc.c:56: for (mask = 0x80000000lu; mask; mask >>= 1)
      0005D3 E5*00            [12] 1486 	mov	a,_bp
      0005D5 24 05            [12] 1487 	add	a,#0x05
      0005D7 F8               [12] 1488 	mov	r0,a
      0005D8 08               [12] 1489 	inc	r0
      0005D9 08               [12] 1490 	inc	r0
      0005DA 08               [12] 1491 	inc	r0
      0005DB E6               [12] 1492 	mov	a,@r0
      0005DC C3               [12] 1493 	clr	c
      0005DD 13               [12] 1494 	rrc	a
      0005DE F6               [12] 1495 	mov	@r0,a
      0005DF 18               [12] 1496 	dec	r0
      0005E0 E6               [12] 1497 	mov	a,@r0
      0005E1 13               [12] 1498 	rrc	a
      0005E2 F6               [12] 1499 	mov	@r0,a
      0005E3 18               [12] 1500 	dec	r0
      0005E4 E6               [12] 1501 	mov	a,@r0
      0005E5 13               [12] 1502 	rrc	a
      0005E6 F6               [12] 1503 	mov	@r0,a
      0005E7 18               [12] 1504 	dec	r0
      0005E8 E6               [12] 1505 	mov	a,@r0
      0005E9 13               [12] 1506 	rrc	a
      0005EA F6               [12] 1507 	mov	@r0,a
      0005EB E5*00            [12] 1508 	mov	a,_bp
      0005ED 24 05            [12] 1509 	add	a,#0x05
      0005EF F8               [12] 1510 	mov	r0,a
      0005F0 E6               [12] 1511 	mov	a,@r0
      0005F1 08               [12] 1512 	inc	r0
      0005F2 46               [12] 1513 	orl	a,@r0
      0005F3 08               [12] 1514 	inc	r0
      0005F4 46               [12] 1515 	orl	a,@r0
      0005F5 08               [12] 1516 	inc	r0
      0005F6 46               [12] 1517 	orl	a,@r0
      0005F7 70 A1            [24] 1518 	jnz	00110$
                                   1519 ;	calc.c:130: printstr("\r\n");
      0005F9 7Dr00            [12] 1520 	mov	r5,#___str_0
      0005FB 7Es00            [12] 1521 	mov	r6,#(___str_0 >> 8)
      0005FD 7F 80            [12] 1522 	mov	r7,#0x80
                                   1523 ;	calc.c:50: return;
      0005FF                       1524 00113$:
                                   1525 ;	calc.c:48: for (; *s; s++) putchar(*s);
      0005FF 8D 82            [24] 1526 	mov	dpl,r5
      000601 8E 83            [24] 1527 	mov	dph,r6
      000603 8F F0            [24] 1528 	mov	b,r7
      000605 12r00r00         [24] 1529 	lcall	__gptrget
      000608 FC               [12] 1530 	mov	r4,a
      000609 60 10            [24] 1531 	jz	00106$
      00060B 7B 00            [12] 1532 	mov	r3,#0x00
      00060D 8C 82            [24] 1533 	mov	dpl,r4
      00060F 8B 83            [24] 1534 	mov	dph,r3
      000611 12r00r00         [24] 1535 	lcall	_putchar
      000614 0D               [12] 1536 	inc	r5
                                   1537 ;	calc.c:130: printstr("\r\n");
      000615 BD 00 E7         [24] 1538 	cjne	r5,#0x00,00113$
      000618 0E               [12] 1539 	inc	r6
      000619 80 E4            [24] 1540 	sjmp	00113$
      00061B                       1541 00106$:
                                   1542 ;	calc.c:132: return 1;
      00061B 90 00 01         [24] 1543 	mov	dptr,#0x0001
                                   1544 ;	calc.c:133: }
      00061E 85*00 81         [24] 1545 	mov	sp,_bp
      000621 D0*00            [24] 1546 	pop	_bp
      000623 22               [24] 1547 	ret
                                   1548 ;------------------------------------------------------------
                                   1549 ;Allocation info for local variables in function 'operator'
                                   1550 ;------------------------------------------------------------
                                   1551 ;delta                     Allocated to stack - _bp -5
                                   1552 ;_ctx                      Allocated to stack - _bp +1
                                   1553 ;ctx                       Allocated to stack - _bp +12
                                   1554 ;d0                        Allocated to stack - _bp +15
                                   1555 ;d1                        Allocated to stack - _bp +19
                                   1556 ;__1966080017              Allocated to registers 
                                   1557 ;s                         Allocated to registers r7 r6 r5 
                                   1558 ;__1966080019              Allocated to registers 
                                   1559 ;s                         Allocated to registers r7 r6 r5 
                                   1560 ;__2621440021              Allocated to registers 
                                   1561 ;s                         Allocated to registers r7 r6 r5 
                                   1562 ;__2621440023              Allocated to registers r7 r6 r5 r4 
                                   1563 ;d                         Allocated to stack - _bp +23
                                   1564 ;mask                      Allocated to stack - _bp +27
                                   1565 ;__2621440025              Allocated to registers 
                                   1566 ;s                         Allocated to registers r7 r6 r5 
                                   1567 ;__1966080027              Allocated to registers 
                                   1568 ;s                         Allocated to registers r7 r6 r5 
                                   1569 ;__1966080029              Allocated to registers 
                                   1570 ;s                         Allocated to registers r7 r6 r5 
                                   1571 ;__1966080031              Allocated to registers 
                                   1572 ;s                         Allocated to registers r7 r6 r5 
                                   1573 ;__1966080033              Allocated to registers 
                                   1574 ;s                         Allocated to registers r7 r6 r5 
                                   1575 ;__2621440035              Allocated to registers 
                                   1576 ;s                         Allocated to registers r7 r6 r5 
                                   1577 ;__2621440037              Allocated to registers r7 r6 r5 r4 
                                   1578 ;d                         Allocated to stack - _bp +23
                                   1579 ;mask                      Allocated to stack - _bp +27
                                   1580 ;__2621440039              Allocated to registers 
                                   1581 ;s                         Allocated to registers r7 r6 r5 
                                   1582 ;__1966080041              Allocated to registers 
                                   1583 ;s                         Allocated to registers r7 r6 r5 
                                   1584 ;__1966080043              Allocated to registers 
                                   1585 ;s                         Allocated to registers r7 r6 r5 
                                   1586 ;__2621440045              Allocated to registers 
                                   1587 ;s                         Allocated to registers r7 r6 r5 
                                   1588 ;__1966080047              Allocated to registers 
                                   1589 ;s                         Allocated to registers r7 r6 r5 
                                   1590 ;__2621440049              Allocated to registers 
                                   1591 ;s                         Allocated to registers r7 r6 r5 
                                   1592 ;__1966080051              Allocated to registers 
                                   1593 ;s                         Allocated to registers r7 r6 r5 
                                   1594 ;__2621440053              Allocated to registers 
                                   1595 ;s                         Allocated to registers r7 r6 r5 
                                   1596 ;__1966080055              Allocated to registers 
                                   1597 ;s                         Allocated to registers r7 r6 r5 
                                   1598 ;__2621440057              Allocated to registers 
                                   1599 ;s                         Allocated to registers r7 r6 r5 
                                   1600 ;__1966080059              Allocated to registers 
                                   1601 ;s                         Allocated to registers r7 r6 r5 
                                   1602 ;__2621440061              Allocated to registers 
                                   1603 ;s                         Allocated to registers r7 r6 r5 
                                   1604 ;__2621440063              Allocated to registers 
                                   1605 ;s                         Allocated to registers r7 r6 r5 
                                   1606 ;__1966080065              Allocated to registers 
                                   1607 ;s                         Allocated to registers r7 r6 r5 
                                   1608 ;__2621440067              Allocated to registers 
                                   1609 ;s                         Allocated to registers r7 r6 r5 
                                   1610 ;__2621440069              Allocated to registers 
                                   1611 ;s                         Allocated to registers r7 r6 r5 
                                   1612 ;__1966080071              Allocated to registers 
                                   1613 ;s                         Allocated to registers r5 r6 r7 
                                   1614 ;__2621440073              Allocated to registers 
                                   1615 ;s                         Allocated to registers r5 r6 r7 
                                   1616 ;__1966080075              Allocated to registers 
                                   1617 ;s                         Allocated to registers r5 r6 r7 
                                   1618 ;__2621440077              Allocated to registers 
                                   1619 ;s                         Allocated to registers r5 r6 r7 
                                   1620 ;__1966080079              Allocated to registers 
                                   1621 ;s                         Allocated to registers r5 r6 r7 
                                   1622 ;__2621440081              Allocated to registers 
                                   1623 ;s                         Allocated to registers r5 r6 r7 
                                   1624 ;__1966080083              Allocated to registers 
                                   1625 ;s                         Allocated to registers r5 r6 r7 
                                   1626 ;sloc0                     Allocated to stack - _bp +231
                                   1627 ;sloc1                     Allocated to stack - _bp +232
                                   1628 ;sloc2                     Allocated to stack - _bp +4
                                   1629 ;sloc3                     Allocated to stack - _bp +8
                                   1630 ;------------------------------------------------------------
                                   1631 ;	calc.c:135: static int operator(void *_ctx, delta_t *delta) __reentrant {
                                   1632 ;	-----------------------------------------
                                   1633 ;	 function operator
                                   1634 ;	-----------------------------------------
      000624                       1635 _operator:
      000624 C0*00            [24] 1636 	push	_bp
      000626 85 81*00         [24] 1637 	mov	_bp,sp
      000629 C0 82            [24] 1638 	push	dpl
      00062B C0 83            [24] 1639 	push	dph
      00062D C0 F0            [24] 1640 	push	b
      00062F E5 81            [12] 1641 	mov	a,sp
      000631 24 1B            [12] 1642 	add	a,#0x1b
      000633 F5 81            [12] 1643 	mov	sp,a
                                   1644 ;	calc.c:136: struct ctx *ctx = (struct ctx *)_ctx;
      000635 A8*00            [24] 1645 	mov	r0,_bp
      000637 08               [12] 1646 	inc	r0
      000638 E5*00            [12] 1647 	mov	a,_bp
      00063A 24 0C            [12] 1648 	add	a,#0x0c
      00063C F9               [12] 1649 	mov	r1,a
      00063D E6               [12] 1650 	mov	a,@r0
      00063E F7               [12] 1651 	mov	@r1,a
      00063F 08               [12] 1652 	inc	r0
      000640 09               [12] 1653 	inc	r1
      000641 E6               [12] 1654 	mov	a,@r0
      000642 F7               [12] 1655 	mov	@r1,a
      000643 08               [12] 1656 	inc	r0
      000644 09               [12] 1657 	inc	r1
      000645 E6               [12] 1658 	mov	a,@r0
      000646 F7               [12] 1659 	mov	@r1,a
                                   1660 ;	calc.c:139: switch (ctx->digit[0]) {
      000647 E5*00            [12] 1661 	mov	a,_bp
      000649 24 0C            [12] 1662 	add	a,#0x0c
      00064B F8               [12] 1663 	mov	r0,a
      00064C 74 07            [12] 1664 	mov	a,#0x07
      00064E 26               [12] 1665 	add	a,@r0
      00064F FD               [12] 1666 	mov	r5,a
      000650 E4               [12] 1667 	clr	a
      000651 08               [12] 1668 	inc	r0
      000652 36               [12] 1669 	addc	a,@r0
      000653 FE               [12] 1670 	mov	r6,a
      000654 08               [12] 1671 	inc	r0
      000655 86 07            [24] 1672 	mov	ar7,@r0
      000657 8D 82            [24] 1673 	mov	dpl,r5
      000659 8E 83            [24] 1674 	mov	dph,r6
      00065B 8F F0            [24] 1675 	mov	b,r7
      00065D 12r00r00         [24] 1676 	lcall	__gptrget
      000660 FC               [12] 1677 	mov	r4,a
      000661 BC 23 03         [24] 1678 	cjne	r4,#0x23,00855$
      000664 02r12rA7         [24] 1679 	ljmp	00157$
      000667                       1680 00855$:
      000667 BC 25 03         [24] 1681 	cjne	r4,#0x25,00856$
      00066A 02r12rA7         [24] 1682 	ljmp	00157$
      00066D                       1683 00856$:
      00066D BC 26 03         [24] 1684 	cjne	r4,#0x26,00857$
      000670 02r15r33         [24] 1685 	ljmp	00170$
      000673                       1686 00857$:
      000673 BC 2A 03         [24] 1687 	cjne	r4,#0x2a,00858$
      000676 02r0ErB5         [24] 1688 	ljmp	00135$
      000679                       1689 00858$:
      000679 BC 2B 03         [24] 1690 	cjne	r4,#0x2b,00859$
      00067C 02r0Cr3E         [24] 1691 	ljmp	00121$
      00067F                       1692 00859$:
      00067F BC 2D 03         [24] 1693 	cjne	r4,#0x2d,00860$
      000682 02r0Dr79         [24] 1694 	ljmp	00128$
      000685                       1695 00860$:
      000685 BC 2E 03         [24] 1696 	cjne	r4,#0x2e,00861$
      000688 02r08rFC         [24] 1697 	ljmp	00109$
      00068B                       1698 00861$:
      00068B BC 2F 03         [24] 1699 	cjne	r4,#0x2f,00862$
      00068E 02r10r17         [24] 1700 	ljmp	00143$
      000691                       1701 00862$:
      000691 BC 50 03         [24] 1702 	cjne	r4,#0x50,00863$
      000694 02r08r70         [24] 1703 	ljmp	00105$
      000697                       1704 00863$:
      000697 BC 56 03         [24] 1705 	cjne	r4,#0x56,00864$
      00069A 02r0ArA3         [24] 1706 	ljmp	00113$
      00069D                       1707 00864$:
      00069D BC 5C 03         [24] 1708 	cjne	r4,#0x5c,00865$
      0006A0 02r10r17         [24] 1709 	ljmp	00143$
      0006A3                       1710 00865$:
      0006A3 BC 5E 03         [24] 1711 	cjne	r4,#0x5e,00866$
      0006A6 02r17rA9         [24] 1712 	ljmp	00184$
      0006A9                       1713 00866$:
      0006A9 BC 70 02         [24] 1714 	cjne	r4,#0x70,00867$
      0006AC 80 1B            [24] 1715 	sjmp	00101$
      0006AE                       1716 00867$:
      0006AE BC 76 03         [24] 1717 	cjne	r4,#0x76,00868$
      0006B1 02r08rFC         [24] 1718 	ljmp	00109$
      0006B4                       1719 00868$:
      0006B4 BC 78 03         [24] 1720 	cjne	r4,#0x78,00869$
      0006B7 02r0ArEC         [24] 1721 	ljmp	00114$
      0006BA                       1722 00869$:
      0006BA BC 7C 03         [24] 1723 	cjne	r4,#0x7c,00870$
      0006BD 02r16r6E         [24] 1724 	ljmp	00177$
      0006C0                       1725 00870$:
      0006C0 BC 7E 03         [24] 1726 	cjne	r4,#0x7e,00871$
      0006C3 02r18rE4         [24] 1727 	ljmp	00191$
      0006C6                       1728 00871$:
      0006C6 02r19r85         [24] 1729 	ljmp	00195$
                                   1730 ;	calc.c:140: case 'p':
      0006C9                       1731 00101$:
                                   1732 ;	calc.c:141: printstr("\r\n");
      0006C9 7Fr00            [12] 1733 	mov	r7,#___str_0
      0006CB 7Es00            [12] 1734 	mov	r6,#(___str_0 >> 8)
      0006CD 7D 80            [12] 1735 	mov	r5,#0x80
                                   1736 ;	calc.c:50: return;
      0006CF                       1737 00266$:
                                   1738 ;	calc.c:48: for (; *s; s++) putchar(*s);
      0006CF 8F 82            [24] 1739 	mov	dpl,r7
      0006D1 8E 83            [24] 1740 	mov	dph,r6
      0006D3 8D F0            [24] 1741 	mov	b,r5
      0006D5 12r00r00         [24] 1742 	lcall	__gptrget
      0006D8 FC               [12] 1743 	mov	r4,a
      0006D9 60 10            [24] 1744 	jz	00198$
      0006DB 7B 00            [12] 1745 	mov	r3,#0x00
      0006DD 8C 82            [24] 1746 	mov	dpl,r4
      0006DF 8B 83            [24] 1747 	mov	dph,r3
      0006E1 12r00r00         [24] 1748 	lcall	_putchar
      0006E4 0F               [12] 1749 	inc	r7
                                   1750 ;	calc.c:141: printstr("\r\n");
      0006E5 BF 00 E7         [24] 1751 	cjne	r7,#0x00,00266$
      0006E8 0E               [12] 1752 	inc	r6
      0006E9 80 E4            [24] 1753 	sjmp	00266$
      0006EB                       1754 00198$:
                                   1755 ;	calc.c:142: if (!stack_peek(&ctx->s, &d0)) printstr("stack underflow\r\n");
      0006EB E5*00            [12] 1756 	mov	a,_bp
      0006ED 24 0F            [12] 1757 	add	a,#0x0f
      0006EF FF               [12] 1758 	mov	r7,a
      0006F0 7E 00            [12] 1759 	mov	r6,#0x00
      0006F2 7D 40            [12] 1760 	mov	r5,#0x40
      0006F4 E5*00            [12] 1761 	mov	a,_bp
      0006F6 24 0C            [12] 1762 	add	a,#0x0c
      0006F8 F8               [12] 1763 	mov	r0,a
      0006F9 74 09            [12] 1764 	mov	a,#0x09
      0006FB 26               [12] 1765 	add	a,@r0
      0006FC FA               [12] 1766 	mov	r2,a
      0006FD E4               [12] 1767 	clr	a
      0006FE 08               [12] 1768 	inc	r0
      0006FF 36               [12] 1769 	addc	a,@r0
      000700 FB               [12] 1770 	mov	r3,a
      000701 08               [12] 1771 	inc	r0
      000702 86 04            [24] 1772 	mov	ar4,@r0
      000704 C0 07            [24] 1773 	push	ar7
      000706 C0 06            [24] 1774 	push	ar6
      000708 C0 05            [24] 1775 	push	ar5
      00070A 8A 82            [24] 1776 	mov	dpl,r2
      00070C 8B 83            [24] 1777 	mov	dph,r3
      00070E 8C F0            [24] 1778 	mov	b,r4
      000710 12r00r00         [24] 1779 	lcall	_stack_peek
      000713 AB 82            [24] 1780 	mov	r3,dpl
      000715 AC 83            [24] 1781 	mov	r4,dph
      000717 15 81            [12] 1782 	dec	sp
      000719 15 81            [12] 1783 	dec	sp
      00071B 15 81            [12] 1784 	dec	sp
      00071D EB               [12] 1785 	mov	a,r3
      00071E 4C               [12] 1786 	orl	a,r4
      00071F 70 25            [24] 1787 	jnz	00103$
      000721 7Fr03            [12] 1788 	mov	r7,#___str_1
      000723 7Es00            [12] 1789 	mov	r6,#(___str_1 >> 8)
      000725 7D 80            [12] 1790 	mov	r5,#0x80
                                   1791 ;	calc.c:50: return;
      000727                       1792 00269$:
                                   1793 ;	calc.c:48: for (; *s; s++) putchar(*s);
      000727 8F 82            [24] 1794 	mov	dpl,r7
      000729 8E 83            [24] 1795 	mov	dph,r6
      00072B 8D F0            [24] 1796 	mov	b,r5
      00072D 12r00r00         [24] 1797 	lcall	__gptrget
      000730 FC               [12] 1798 	mov	r4,a
      000731 70 03            [24] 1799 	jnz	00875$
      000733 02r19r8A         [24] 1800 	ljmp	00196$
      000736                       1801 00875$:
      000736 7B 00            [12] 1802 	mov	r3,#0x00
      000738 8C 82            [24] 1803 	mov	dpl,r4
      00073A 8B 83            [24] 1804 	mov	dph,r3
      00073C 12r00r00         [24] 1805 	lcall	_putchar
      00073F 0F               [12] 1806 	inc	r7
                                   1807 ;	calc.c:142: if (!stack_peek(&ctx->s, &d0)) printstr("stack underflow\r\n");
      000740 BF 00 E4         [24] 1808 	cjne	r7,#0x00,00269$
      000743 0E               [12] 1809 	inc	r6
      000744 80 E1            [24] 1810 	sjmp	00269$
      000746                       1811 00103$:
                                   1812 ;	calc.c:144: printstr("PT ");
      000746 7Fr30            [12] 1813 	mov	r7,#___str_6
      000748 7Es00            [12] 1814 	mov	r6,#(___str_6 >> 8)
      00074A 7D 80            [12] 1815 	mov	r5,#0x80
                                   1816 ;	calc.c:50: return;
      00074C                       1817 00272$:
                                   1818 ;	calc.c:48: for (; *s; s++) putchar(*s);
      00074C 8F 82            [24] 1819 	mov	dpl,r7
      00074E 8E 83            [24] 1820 	mov	dph,r6
      000750 8D F0            [24] 1821 	mov	b,r5
      000752 12r00r00         [24] 1822 	lcall	__gptrget
      000755 FC               [12] 1823 	mov	r4,a
      000756 60 10            [24] 1824 	jz	00202$
      000758 7B 00            [12] 1825 	mov	r3,#0x00
      00075A 8C 82            [24] 1826 	mov	dpl,r4
      00075C 8B 83            [24] 1827 	mov	dph,r3
      00075E 12r00r00         [24] 1828 	lcall	_putchar
      000761 0F               [12] 1829 	inc	r7
                                   1830 ;	calc.c:144: printstr("PT ");
      000762 BF 00 E7         [24] 1831 	cjne	r7,#0x00,00272$
      000765 0E               [12] 1832 	inc	r6
      000766 80 E4            [24] 1833 	sjmp	00272$
      000768                       1834 00202$:
                                   1835 ;	calc.c:145: printf("% 11ld / ", d0);
      000768 E5*00            [12] 1836 	mov	a,_bp
      00076A 24 0F            [12] 1837 	add	a,#0x0f
      00076C F8               [12] 1838 	mov	r0,a
      00076D E6               [12] 1839 	mov	a,@r0
      00076E C0 E0            [24] 1840 	push	acc
      000770 08               [12] 1841 	inc	r0
      000771 E6               [12] 1842 	mov	a,@r0
      000772 C0 E0            [24] 1843 	push	acc
      000774 08               [12] 1844 	inc	r0
      000775 E6               [12] 1845 	mov	a,@r0
      000776 C0 E0            [24] 1846 	push	acc
      000778 08               [12] 1847 	inc	r0
      000779 E6               [12] 1848 	mov	a,@r0
      00077A C0 E0            [24] 1849 	push	acc
      00077C 74r19            [12] 1850 	mov	a,#___str_3
      00077E C0 E0            [24] 1851 	push	acc
      000780 74s00            [12] 1852 	mov	a,#(___str_3 >> 8)
      000782 C0 E0            [24] 1853 	push	acc
      000784 74 80            [12] 1854 	mov	a,#0x80
      000786 C0 E0            [24] 1855 	push	acc
      000788 12r00r00         [24] 1856 	lcall	_printf
      00078B E5 81            [12] 1857 	mov	a,sp
      00078D 24 F9            [12] 1858 	add	a,#0xf9
      00078F F5 81            [12] 1859 	mov	sp,a
                                   1860 ;	calc.c:146: printf("%08lx / ", d0);
      000791 E5*00            [12] 1861 	mov	a,_bp
      000793 24 0F            [12] 1862 	add	a,#0x0f
      000795 F8               [12] 1863 	mov	r0,a
      000796 E6               [12] 1864 	mov	a,@r0
      000797 C0 E0            [24] 1865 	push	acc
      000799 08               [12] 1866 	inc	r0
      00079A E6               [12] 1867 	mov	a,@r0
      00079B C0 E0            [24] 1868 	push	acc
      00079D 08               [12] 1869 	inc	r0
      00079E E6               [12] 1870 	mov	a,@r0
      00079F C0 E0            [24] 1871 	push	acc
      0007A1 08               [12] 1872 	inc	r0
      0007A2 E6               [12] 1873 	mov	a,@r0
      0007A3 C0 E0            [24] 1874 	push	acc
      0007A5 74r23            [12] 1875 	mov	a,#___str_4
      0007A7 C0 E0            [24] 1876 	push	acc
      0007A9 74s00            [12] 1877 	mov	a,#(___str_4 >> 8)
      0007AB C0 E0            [24] 1878 	push	acc
      0007AD 74 80            [12] 1879 	mov	a,#0x80
      0007AF C0 E0            [24] 1880 	push	acc
      0007B1 12r00r00         [24] 1881 	lcall	_printf
      0007B4 E5 81            [12] 1882 	mov	a,sp
      0007B6 24 F9            [12] 1883 	add	a,#0xf9
      0007B8 F5 81            [12] 1884 	mov	sp,a
                                   1885 ;	calc.c:147: printbin(d0);
      0007BA E5*00            [12] 1886 	mov	a,_bp
      0007BC 24 0F            [12] 1887 	add	a,#0x0f
      0007BE F8               [12] 1888 	mov	r0,a
      0007BF 86 07            [24] 1889 	mov	ar7,@r0
      0007C1 08               [12] 1890 	inc	r0
      0007C2 86 06            [24] 1891 	mov	ar6,@r0
      0007C4 08               [12] 1892 	inc	r0
      0007C5 86 05            [24] 1893 	mov	ar5,@r0
      0007C7 08               [12] 1894 	inc	r0
      0007C8 86 04            [24] 1895 	mov	ar4,@r0
      0007CA 8C 02            [24] 1896 	mov	ar2,r4
                                   1897 ;	calc.c:56: for (mask = 0x80000000lu; mask; mask >>= 1)
      0007CC E5*00            [12] 1898 	mov	a,_bp
      0007CE 24 1B            [12] 1899 	add	a,#0x1b
      0007D0 F8               [12] 1900 	mov	r0,a
      0007D1 E4               [12] 1901 	clr	a
      0007D2 F6               [12] 1902 	mov	@r0,a
      0007D3 08               [12] 1903 	inc	r0
      0007D4 F6               [12] 1904 	mov	@r0,a
      0007D5 08               [12] 1905 	inc	r0
      0007D6 F6               [12] 1906 	mov	@r0,a
      0007D7 08               [12] 1907 	inc	r0
      0007D8 76 80            [12] 1908 	mov	@r0,#0x80
      0007DA                       1909 00274$:
                                   1910 ;	calc.c:57: (void)putchar((d & mask) ? (int)'1' : (int)'0');
      0007DA E5*00            [12] 1911 	mov	a,_bp
      0007DC 24 04            [12] 1912 	add	a,#0x04
      0007DE F8               [12] 1913 	mov	r0,a
      0007DF A6 07            [24] 1914 	mov	@r0,ar7
      0007E1 08               [12] 1915 	inc	r0
      0007E2 A6 06            [24] 1916 	mov	@r0,ar6
      0007E4 08               [12] 1917 	inc	r0
      0007E5 A6 05            [24] 1918 	mov	@r0,ar5
      0007E7 08               [12] 1919 	inc	r0
      0007E8 A6 02            [24] 1920 	mov	@r0,ar2
      0007EA E5*00            [12] 1921 	mov	a,_bp
      0007EC 24 04            [12] 1922 	add	a,#0x04
      0007EE F8               [12] 1923 	mov	r0,a
      0007EF E5*00            [12] 1924 	mov	a,_bp
      0007F1 24 1B            [12] 1925 	add	a,#0x1b
      0007F3 F9               [12] 1926 	mov	r1,a
      0007F4 E7               [12] 1927 	mov	a,@r1
      0007F5 56               [12] 1928 	anl	a,@r0
      0007F6 F6               [12] 1929 	mov	@r0,a
      0007F7 09               [12] 1930 	inc	r1
      0007F8 E7               [12] 1931 	mov	a,@r1
      0007F9 08               [12] 1932 	inc	r0
      0007FA 56               [12] 1933 	anl	a,@r0
      0007FB F6               [12] 1934 	mov	@r0,a
      0007FC 09               [12] 1935 	inc	r1
      0007FD E7               [12] 1936 	mov	a,@r1
      0007FE 08               [12] 1937 	inc	r0
      0007FF 56               [12] 1938 	anl	a,@r0
      000800 F6               [12] 1939 	mov	@r0,a
      000801 09               [12] 1940 	inc	r1
      000802 E7               [12] 1941 	mov	a,@r1
      000803 08               [12] 1942 	inc	r0
      000804 56               [12] 1943 	anl	a,@r0
      000805 F6               [12] 1944 	mov	@r0,a
      000806 E5*00            [12] 1945 	mov	a,_bp
      000808 24 04            [12] 1946 	add	a,#0x04
      00080A F8               [12] 1947 	mov	r0,a
      00080B E6               [12] 1948 	mov	a,@r0
      00080C 08               [12] 1949 	inc	r0
      00080D 46               [12] 1950 	orl	a,@r0
      00080E 08               [12] 1951 	inc	r0
      00080F 46               [12] 1952 	orl	a,@r0
      000810 08               [12] 1953 	inc	r0
      000811 46               [12] 1954 	orl	a,@r0
      000812 60 06            [24] 1955 	jz	00367$
      000814 7B 31            [12] 1956 	mov	r3,#0x31
      000816 7C 00            [12] 1957 	mov	r4,#0x00
      000818 80 04            [24] 1958 	sjmp	00368$
      00081A                       1959 00367$:
      00081A 7B 30            [12] 1960 	mov	r3,#0x30
      00081C 7C 00            [12] 1961 	mov	r4,#0x00
      00081E                       1962 00368$:
      00081E 8B 82            [24] 1963 	mov	dpl,r3
      000820 8C 83            [24] 1964 	mov	dph,r4
      000822 12r00r00         [24] 1965 	lcall	_putchar
                                   1966 ;	calc.c:56: for (mask = 0x80000000lu; mask; mask >>= 1)
      000825 E5*00            [12] 1967 	mov	a,_bp
      000827 24 1B            [12] 1968 	add	a,#0x1b
      000829 F8               [12] 1969 	mov	r0,a
      00082A 08               [12] 1970 	inc	r0
      00082B 08               [12] 1971 	inc	r0
      00082C 08               [12] 1972 	inc	r0
      00082D E6               [12] 1973 	mov	a,@r0
      00082E C3               [12] 1974 	clr	c
      00082F 13               [12] 1975 	rrc	a
      000830 F6               [12] 1976 	mov	@r0,a
      000831 18               [12] 1977 	dec	r0
      000832 E6               [12] 1978 	mov	a,@r0
      000833 13               [12] 1979 	rrc	a
      000834 F6               [12] 1980 	mov	@r0,a
      000835 18               [12] 1981 	dec	r0
      000836 E6               [12] 1982 	mov	a,@r0
      000837 13               [12] 1983 	rrc	a
      000838 F6               [12] 1984 	mov	@r0,a
      000839 18               [12] 1985 	dec	r0
      00083A E6               [12] 1986 	mov	a,@r0
      00083B 13               [12] 1987 	rrc	a
      00083C F6               [12] 1988 	mov	@r0,a
      00083D E5*00            [12] 1989 	mov	a,_bp
      00083F 24 1B            [12] 1990 	add	a,#0x1b
      000841 F8               [12] 1991 	mov	r0,a
      000842 E6               [12] 1992 	mov	a,@r0
      000843 08               [12] 1993 	inc	r0
      000844 46               [12] 1994 	orl	a,@r0
      000845 08               [12] 1995 	inc	r0
      000846 46               [12] 1996 	orl	a,@r0
      000847 08               [12] 1997 	inc	r0
      000848 46               [12] 1998 	orl	a,@r0
      000849 70 8F            [24] 1999 	jnz	00274$
                                   2000 ;	calc.c:148: printstr("\r\n");
      00084B 7Fr00            [12] 2001 	mov	r7,#___str_0
      00084D 7Es00            [12] 2002 	mov	r6,#(___str_0 >> 8)
      00084F 7D 80            [12] 2003 	mov	r5,#0x80
                                   2004 ;	calc.c:50: return;
      000851                       2005 00277$:
                                   2006 ;	calc.c:48: for (; *s; s++) putchar(*s);
      000851 8F 82            [24] 2007 	mov	dpl,r7
      000853 8E 83            [24] 2008 	mov	dph,r6
      000855 8D F0            [24] 2009 	mov	b,r5
      000857 12r00r00         [24] 2010 	lcall	__gptrget
      00085A FC               [12] 2011 	mov	r4,a
      00085B 70 03            [24] 2012 	jnz	00881$
      00085D 02r19r8A         [24] 2013 	ljmp	00196$
      000860                       2014 00881$:
      000860 7B 00            [12] 2015 	mov	r3,#0x00
      000862 8C 82            [24] 2016 	mov	dpl,r4
      000864 8B 83            [24] 2017 	mov	dph,r3
      000866 12r00r00         [24] 2018 	lcall	_putchar
      000869 0F               [12] 2019 	inc	r7
                                   2020 ;	calc.c:151: case 'P':
      00086A BF 00 E4         [24] 2021 	cjne	r7,#0x00,00277$
      00086D 0E               [12] 2022 	inc	r6
      00086E 80 E1            [24] 2023 	sjmp	00277$
      000870                       2024 00105$:
                                   2025 ;	calc.c:152: printstr("\r\n");
      000870 7Fr00            [12] 2026 	mov	r7,#___str_0
      000872 7Es00            [12] 2027 	mov	r6,#(___str_0 >> 8)
      000874 7D 80            [12] 2028 	mov	r5,#0x80
                                   2029 ;	calc.c:50: return;
      000876                       2030 00280$:
                                   2031 ;	calc.c:48: for (; *s; s++) putchar(*s);
      000876 8F 82            [24] 2032 	mov	dpl,r7
      000878 8E 83            [24] 2033 	mov	dph,r6
      00087A 8D F0            [24] 2034 	mov	b,r5
      00087C 12r00r00         [24] 2035 	lcall	__gptrget
      00087F FC               [12] 2036 	mov	r4,a
      000880 60 10            [24] 2037 	jz	00208$
      000882 7B 00            [12] 2038 	mov	r3,#0x00
      000884 8C 82            [24] 2039 	mov	dpl,r4
      000886 8B 83            [24] 2040 	mov	dph,r3
      000888 12r00r00         [24] 2041 	lcall	_putchar
      00088B 0F               [12] 2042 	inc	r7
                                   2043 ;	calc.c:152: printstr("\r\n");
      00088C BF 00 E7         [24] 2044 	cjne	r7,#0x00,00280$
      00088F 0E               [12] 2045 	inc	r6
      000890 80 E4            [24] 2046 	sjmp	00280$
      000892                       2047 00208$:
                                   2048 ;	calc.c:153: if (!stack_iter_peek(&ctx->s, dump_peek, ctx)) printstr("stack underflow\r\n");
      000892 E5*00            [12] 2049 	mov	a,_bp
      000894 24 0C            [12] 2050 	add	a,#0x0c
      000896 F8               [12] 2051 	mov	r0,a
      000897 86 07            [24] 2052 	mov	ar7,@r0
      000899 08               [12] 2053 	inc	r0
      00089A 86 06            [24] 2054 	mov	ar6,@r0
      00089C 08               [12] 2055 	inc	r0
      00089D 86 05            [24] 2056 	mov	ar5,@r0
      00089F E5*00            [12] 2057 	mov	a,_bp
      0008A1 24 0C            [12] 2058 	add	a,#0x0c
      0008A3 F8               [12] 2059 	mov	r0,a
      0008A4 74 09            [12] 2060 	mov	a,#0x09
      0008A6 26               [12] 2061 	add	a,@r0
      0008A7 FA               [12] 2062 	mov	r2,a
      0008A8 E4               [12] 2063 	clr	a
      0008A9 08               [12] 2064 	inc	r0
      0008AA 36               [12] 2065 	addc	a,@r0
      0008AB FB               [12] 2066 	mov	r3,a
      0008AC 08               [12] 2067 	inc	r0
      0008AD 86 04            [24] 2068 	mov	ar4,@r0
      0008AF C0 07            [24] 2069 	push	ar7
      0008B1 C0 06            [24] 2070 	push	ar6
      0008B3 C0 05            [24] 2071 	push	ar5
      0008B5 74rF0            [12] 2072 	mov	a,#_dump_peek
      0008B7 C0 E0            [24] 2073 	push	acc
      0008B9 74s04            [12] 2074 	mov	a,#(_dump_peek >> 8)
      0008BB C0 E0            [24] 2075 	push	acc
      0008BD 8A 82            [24] 2076 	mov	dpl,r2
      0008BF 8B 83            [24] 2077 	mov	dph,r3
      0008C1 8C F0            [24] 2078 	mov	b,r4
      0008C3 12r00r00         [24] 2079 	lcall	_stack_iter_peek
      0008C6 AB 82            [24] 2080 	mov	r3,dpl
      0008C8 AC 83            [24] 2081 	mov	r4,dph
      0008CA E5 81            [12] 2082 	mov	a,sp
      0008CC 24 FB            [12] 2083 	add	a,#0xfb
      0008CE F5 81            [12] 2084 	mov	sp,a
      0008D0 EB               [12] 2085 	mov	a,r3
      0008D1 4C               [12] 2086 	orl	a,r4
      0008D2 60 03            [24] 2087 	jz	00885$
      0008D4 02r19r8A         [24] 2088 	ljmp	00196$
      0008D7                       2089 00885$:
      0008D7 7Fr03            [12] 2090 	mov	r7,#___str_1
      0008D9 7Es00            [12] 2091 	mov	r6,#(___str_1 >> 8)
      0008DB 7D 80            [12] 2092 	mov	r5,#0x80
                                   2093 ;	calc.c:50: return;
      0008DD                       2094 00283$:
                                   2095 ;	calc.c:48: for (; *s; s++) putchar(*s);
      0008DD 8F 82            [24] 2096 	mov	dpl,r7
      0008DF 8E 83            [24] 2097 	mov	dph,r6
      0008E1 8D F0            [24] 2098 	mov	b,r5
      0008E3 12r00r00         [24] 2099 	lcall	__gptrget
      0008E6 FC               [12] 2100 	mov	r4,a
      0008E7 70 03            [24] 2101 	jnz	00886$
      0008E9 02r19r8A         [24] 2102 	ljmp	00196$
      0008EC                       2103 00886$:
      0008EC 7B 00            [12] 2104 	mov	r3,#0x00
      0008EE 8C 82            [24] 2105 	mov	dpl,r4
      0008F0 8B 83            [24] 2106 	mov	dph,r3
      0008F2 12r00r00         [24] 2107 	lcall	_putchar
      0008F5 0F               [12] 2108 	inc	r7
                                   2109 ;	calc.c:156: case 'v':
      0008F6 BF 00 E4         [24] 2110 	cjne	r7,#0x00,00283$
      0008F9 0E               [12] 2111 	inc	r6
      0008FA 80 E1            [24] 2112 	sjmp	00283$
      0008FC                       2113 00109$:
                                   2114 ;	calc.c:157: printstr("\r\n");
      0008FC 7Fr00            [12] 2115 	mov	r7,#___str_0
      0008FE 7Es00            [12] 2116 	mov	r6,#(___str_0 >> 8)
      000900 7D 80            [12] 2117 	mov	r5,#0x80
                                   2118 ;	calc.c:50: return;
      000902                       2119 00286$:
                                   2120 ;	calc.c:48: for (; *s; s++) putchar(*s);
      000902 8F 82            [24] 2121 	mov	dpl,r7
      000904 8E 83            [24] 2122 	mov	dph,r6
      000906 8D F0            [24] 2123 	mov	b,r5
      000908 12r00r00         [24] 2124 	lcall	__gptrget
      00090B FC               [12] 2125 	mov	r4,a
      00090C 60 10            [24] 2126 	jz	00212$
      00090E 7B 00            [12] 2127 	mov	r3,#0x00
      000910 8C 82            [24] 2128 	mov	dpl,r4
      000912 8B 83            [24] 2129 	mov	dph,r3
      000914 12r00r00         [24] 2130 	lcall	_putchar
      000917 0F               [12] 2131 	inc	r7
                                   2132 ;	calc.c:157: printstr("\r\n");
      000918 BF 00 E7         [24] 2133 	cjne	r7,#0x00,00286$
      00091B 0E               [12] 2134 	inc	r6
      00091C 80 E4            [24] 2135 	sjmp	00286$
      00091E                       2136 00212$:
                                   2137 ;	calc.c:158: if (!stack_pop(&ctx->s, &d0)) printstr("stack underflow\r\n");
      00091E E5*00            [12] 2138 	mov	a,_bp
      000920 24 0F            [12] 2139 	add	a,#0x0f
      000922 FF               [12] 2140 	mov	r7,a
      000923 7E 00            [12] 2141 	mov	r6,#0x00
      000925 7D 40            [12] 2142 	mov	r5,#0x40
      000927 E5*00            [12] 2143 	mov	a,_bp
      000929 24 0C            [12] 2144 	add	a,#0x0c
      00092B F8               [12] 2145 	mov	r0,a
      00092C 74 09            [12] 2146 	mov	a,#0x09
      00092E 26               [12] 2147 	add	a,@r0
      00092F FA               [12] 2148 	mov	r2,a
      000930 E4               [12] 2149 	clr	a
      000931 08               [12] 2150 	inc	r0
      000932 36               [12] 2151 	addc	a,@r0
      000933 FB               [12] 2152 	mov	r3,a
      000934 08               [12] 2153 	inc	r0
      000935 86 04            [24] 2154 	mov	ar4,@r0
      000937 C0 07            [24] 2155 	push	ar7
      000939 C0 06            [24] 2156 	push	ar6
      00093B C0 05            [24] 2157 	push	ar5
      00093D 8A 82            [24] 2158 	mov	dpl,r2
      00093F 8B 83            [24] 2159 	mov	dph,r3
      000941 8C F0            [24] 2160 	mov	b,r4
      000943 12r00r00         [24] 2161 	lcall	_stack_pop
      000946 AB 82            [24] 2162 	mov	r3,dpl
      000948 AC 83            [24] 2163 	mov	r4,dph
      00094A 15 81            [12] 2164 	dec	sp
      00094C 15 81            [12] 2165 	dec	sp
      00094E 15 81            [12] 2166 	dec	sp
      000950 EB               [12] 2167 	mov	a,r3
      000951 4C               [12] 2168 	orl	a,r4
      000952 70 25            [24] 2169 	jnz	00111$
      000954 7Fr03            [12] 2170 	mov	r7,#___str_1
      000956 7Es00            [12] 2171 	mov	r6,#(___str_1 >> 8)
      000958 7D 80            [12] 2172 	mov	r5,#0x80
                                   2173 ;	calc.c:50: return;
      00095A                       2174 00289$:
                                   2175 ;	calc.c:48: for (; *s; s++) putchar(*s);
      00095A 8F 82            [24] 2176 	mov	dpl,r7
      00095C 8E 83            [24] 2177 	mov	dph,r6
      00095E 8D F0            [24] 2178 	mov	b,r5
      000960 12r00r00         [24] 2179 	lcall	__gptrget
      000963 FC               [12] 2180 	mov	r4,a
      000964 70 03            [24] 2181 	jnz	00891$
      000966 02r19r8A         [24] 2182 	ljmp	00196$
      000969                       2183 00891$:
      000969 7B 00            [12] 2184 	mov	r3,#0x00
      00096B 8C 82            [24] 2185 	mov	dpl,r4
      00096D 8B 83            [24] 2186 	mov	dph,r3
      00096F 12r00r00         [24] 2187 	lcall	_putchar
      000972 0F               [12] 2188 	inc	r7
                                   2189 ;	calc.c:158: if (!stack_pop(&ctx->s, &d0)) printstr("stack underflow\r\n");
      000973 BF 00 E4         [24] 2190 	cjne	r7,#0x00,00289$
      000976 0E               [12] 2191 	inc	r6
      000977 80 E1            [24] 2192 	sjmp	00289$
      000979                       2193 00111$:
                                   2194 ;	calc.c:160: printstr("VT ");
      000979 7Fr34            [12] 2195 	mov	r7,#___str_7
      00097B 7Es00            [12] 2196 	mov	r6,#(___str_7 >> 8)
      00097D 7D 80            [12] 2197 	mov	r5,#0x80
                                   2198 ;	calc.c:50: return;
      00097F                       2199 00292$:
                                   2200 ;	calc.c:48: for (; *s; s++) putchar(*s);
      00097F 8F 82            [24] 2201 	mov	dpl,r7
      000981 8E 83            [24] 2202 	mov	dph,r6
      000983 8D F0            [24] 2203 	mov	b,r5
      000985 12r00r00         [24] 2204 	lcall	__gptrget
      000988 FC               [12] 2205 	mov	r4,a
      000989 60 10            [24] 2206 	jz	00216$
      00098B 7B 00            [12] 2207 	mov	r3,#0x00
      00098D 8C 82            [24] 2208 	mov	dpl,r4
      00098F 8B 83            [24] 2209 	mov	dph,r3
      000991 12r00r00         [24] 2210 	lcall	_putchar
      000994 0F               [12] 2211 	inc	r7
                                   2212 ;	calc.c:160: printstr("VT ");
      000995 BF 00 E7         [24] 2213 	cjne	r7,#0x00,00292$
      000998 0E               [12] 2214 	inc	r6
      000999 80 E4            [24] 2215 	sjmp	00292$
      00099B                       2216 00216$:
                                   2217 ;	calc.c:161: printf("% 11ld / ", d0);
      00099B E5*00            [12] 2218 	mov	a,_bp
      00099D 24 0F            [12] 2219 	add	a,#0x0f
      00099F F8               [12] 2220 	mov	r0,a
      0009A0 E6               [12] 2221 	mov	a,@r0
      0009A1 C0 E0            [24] 2222 	push	acc
      0009A3 08               [12] 2223 	inc	r0
      0009A4 E6               [12] 2224 	mov	a,@r0
      0009A5 C0 E0            [24] 2225 	push	acc
      0009A7 08               [12] 2226 	inc	r0
      0009A8 E6               [12] 2227 	mov	a,@r0
      0009A9 C0 E0            [24] 2228 	push	acc
      0009AB 08               [12] 2229 	inc	r0
      0009AC E6               [12] 2230 	mov	a,@r0
      0009AD C0 E0            [24] 2231 	push	acc
      0009AF 74r19            [12] 2232 	mov	a,#___str_3
      0009B1 C0 E0            [24] 2233 	push	acc
      0009B3 74s00            [12] 2234 	mov	a,#(___str_3 >> 8)
      0009B5 C0 E0            [24] 2235 	push	acc
      0009B7 74 80            [12] 2236 	mov	a,#0x80
      0009B9 C0 E0            [24] 2237 	push	acc
      0009BB 12r00r00         [24] 2238 	lcall	_printf
      0009BE E5 81            [12] 2239 	mov	a,sp
      0009C0 24 F9            [12] 2240 	add	a,#0xf9
      0009C2 F5 81            [12] 2241 	mov	sp,a
                                   2242 ;	calc.c:162: printf("%08lx / ", d0);
      0009C4 E5*00            [12] 2243 	mov	a,_bp
      0009C6 24 0F            [12] 2244 	add	a,#0x0f
      0009C8 F8               [12] 2245 	mov	r0,a
      0009C9 E6               [12] 2246 	mov	a,@r0
      0009CA C0 E0            [24] 2247 	push	acc
      0009CC 08               [12] 2248 	inc	r0
      0009CD E6               [12] 2249 	mov	a,@r0
      0009CE C0 E0            [24] 2250 	push	acc
      0009D0 08               [12] 2251 	inc	r0
      0009D1 E6               [12] 2252 	mov	a,@r0
      0009D2 C0 E0            [24] 2253 	push	acc
      0009D4 08               [12] 2254 	inc	r0
      0009D5 E6               [12] 2255 	mov	a,@r0
      0009D6 C0 E0            [24] 2256 	push	acc
      0009D8 74r23            [12] 2257 	mov	a,#___str_4
      0009DA C0 E0            [24] 2258 	push	acc
      0009DC 74s00            [12] 2259 	mov	a,#(___str_4 >> 8)
      0009DE C0 E0            [24] 2260 	push	acc
      0009E0 74 80            [12] 2261 	mov	a,#0x80
      0009E2 C0 E0            [24] 2262 	push	acc
      0009E4 12r00r00         [24] 2263 	lcall	_printf
      0009E7 E5 81            [12] 2264 	mov	a,sp
      0009E9 24 F9            [12] 2265 	add	a,#0xf9
      0009EB F5 81            [12] 2266 	mov	sp,a
                                   2267 ;	calc.c:163: printbin(d0);
      0009ED E5*00            [12] 2268 	mov	a,_bp
      0009EF 24 0F            [12] 2269 	add	a,#0x0f
      0009F1 F8               [12] 2270 	mov	r0,a
      0009F2 86 07            [24] 2271 	mov	ar7,@r0
      0009F4 08               [12] 2272 	inc	r0
      0009F5 86 06            [24] 2273 	mov	ar6,@r0
      0009F7 08               [12] 2274 	inc	r0
      0009F8 86 05            [24] 2275 	mov	ar5,@r0
      0009FA 08               [12] 2276 	inc	r0
      0009FB 86 04            [24] 2277 	mov	ar4,@r0
      0009FD 8C 02            [24] 2278 	mov	ar2,r4
                                   2279 ;	calc.c:56: for (mask = 0x80000000lu; mask; mask >>= 1)
      0009FF E5*00            [12] 2280 	mov	a,_bp
      000A01 24 1B            [12] 2281 	add	a,#0x1b
      000A03 F8               [12] 2282 	mov	r0,a
      000A04 E4               [12] 2283 	clr	a
      000A05 F6               [12] 2284 	mov	@r0,a
      000A06 08               [12] 2285 	inc	r0
      000A07 F6               [12] 2286 	mov	@r0,a
      000A08 08               [12] 2287 	inc	r0
      000A09 F6               [12] 2288 	mov	@r0,a
      000A0A 08               [12] 2289 	inc	r0
      000A0B 76 80            [12] 2290 	mov	@r0,#0x80
      000A0D                       2291 00294$:
                                   2292 ;	calc.c:57: (void)putchar((d & mask) ? (int)'1' : (int)'0');
      000A0D E5*00            [12] 2293 	mov	a,_bp
      000A0F 24 04            [12] 2294 	add	a,#0x04
      000A11 F8               [12] 2295 	mov	r0,a
      000A12 A6 07            [24] 2296 	mov	@r0,ar7
      000A14 08               [12] 2297 	inc	r0
      000A15 A6 06            [24] 2298 	mov	@r0,ar6
      000A17 08               [12] 2299 	inc	r0
      000A18 A6 05            [24] 2300 	mov	@r0,ar5
      000A1A 08               [12] 2301 	inc	r0
      000A1B A6 02            [24] 2302 	mov	@r0,ar2
      000A1D E5*00            [12] 2303 	mov	a,_bp
      000A1F 24 04            [12] 2304 	add	a,#0x04
      000A21 F8               [12] 2305 	mov	r0,a
      000A22 E5*00            [12] 2306 	mov	a,_bp
      000A24 24 1B            [12] 2307 	add	a,#0x1b
      000A26 F9               [12] 2308 	mov	r1,a
      000A27 E7               [12] 2309 	mov	a,@r1
      000A28 56               [12] 2310 	anl	a,@r0
      000A29 F6               [12] 2311 	mov	@r0,a
      000A2A 09               [12] 2312 	inc	r1
      000A2B E7               [12] 2313 	mov	a,@r1
      000A2C 08               [12] 2314 	inc	r0
      000A2D 56               [12] 2315 	anl	a,@r0
      000A2E F6               [12] 2316 	mov	@r0,a
      000A2F 09               [12] 2317 	inc	r1
      000A30 E7               [12] 2318 	mov	a,@r1
      000A31 08               [12] 2319 	inc	r0
      000A32 56               [12] 2320 	anl	a,@r0
      000A33 F6               [12] 2321 	mov	@r0,a
      000A34 09               [12] 2322 	inc	r1
      000A35 E7               [12] 2323 	mov	a,@r1
      000A36 08               [12] 2324 	inc	r0
      000A37 56               [12] 2325 	anl	a,@r0
      000A38 F6               [12] 2326 	mov	@r0,a
      000A39 E5*00            [12] 2327 	mov	a,_bp
      000A3B 24 04            [12] 2328 	add	a,#0x04
      000A3D F8               [12] 2329 	mov	r0,a
      000A3E E6               [12] 2330 	mov	a,@r0
      000A3F 08               [12] 2331 	inc	r0
      000A40 46               [12] 2332 	orl	a,@r0
      000A41 08               [12] 2333 	inc	r0
      000A42 46               [12] 2334 	orl	a,@r0
      000A43 08               [12] 2335 	inc	r0
      000A44 46               [12] 2336 	orl	a,@r0
      000A45 60 06            [24] 2337 	jz	00369$
      000A47 7B 31            [12] 2338 	mov	r3,#0x31
      000A49 7C 00            [12] 2339 	mov	r4,#0x00
      000A4B 80 04            [24] 2340 	sjmp	00370$
      000A4D                       2341 00369$:
      000A4D 7B 30            [12] 2342 	mov	r3,#0x30
      000A4F 7C 00            [12] 2343 	mov	r4,#0x00
      000A51                       2344 00370$:
      000A51 8B 82            [24] 2345 	mov	dpl,r3
      000A53 8C 83            [24] 2346 	mov	dph,r4
      000A55 12r00r00         [24] 2347 	lcall	_putchar
                                   2348 ;	calc.c:56: for (mask = 0x80000000lu; mask; mask >>= 1)
      000A58 E5*00            [12] 2349 	mov	a,_bp
      000A5A 24 1B            [12] 2350 	add	a,#0x1b
      000A5C F8               [12] 2351 	mov	r0,a
      000A5D 08               [12] 2352 	inc	r0
      000A5E 08               [12] 2353 	inc	r0
      000A5F 08               [12] 2354 	inc	r0
      000A60 E6               [12] 2355 	mov	a,@r0
      000A61 C3               [12] 2356 	clr	c
      000A62 13               [12] 2357 	rrc	a
      000A63 F6               [12] 2358 	mov	@r0,a
      000A64 18               [12] 2359 	dec	r0
      000A65 E6               [12] 2360 	mov	a,@r0
      000A66 13               [12] 2361 	rrc	a
      000A67 F6               [12] 2362 	mov	@r0,a
      000A68 18               [12] 2363 	dec	r0
      000A69 E6               [12] 2364 	mov	a,@r0
      000A6A 13               [12] 2365 	rrc	a
      000A6B F6               [12] 2366 	mov	@r0,a
      000A6C 18               [12] 2367 	dec	r0
      000A6D E6               [12] 2368 	mov	a,@r0
      000A6E 13               [12] 2369 	rrc	a
      000A6F F6               [12] 2370 	mov	@r0,a
      000A70 E5*00            [12] 2371 	mov	a,_bp
      000A72 24 1B            [12] 2372 	add	a,#0x1b
      000A74 F8               [12] 2373 	mov	r0,a
      000A75 E6               [12] 2374 	mov	a,@r0
      000A76 08               [12] 2375 	inc	r0
      000A77 46               [12] 2376 	orl	a,@r0
      000A78 08               [12] 2377 	inc	r0
      000A79 46               [12] 2378 	orl	a,@r0
      000A7A 08               [12] 2379 	inc	r0
      000A7B 46               [12] 2380 	orl	a,@r0
      000A7C 70 8F            [24] 2381 	jnz	00294$
                                   2382 ;	calc.c:164: printstr("\r\n");
      000A7E 7Fr00            [12] 2383 	mov	r7,#___str_0
      000A80 7Es00            [12] 2384 	mov	r6,#(___str_0 >> 8)
      000A82 7D 80            [12] 2385 	mov	r5,#0x80
                                   2386 ;	calc.c:50: return;
      000A84                       2387 00297$:
                                   2388 ;	calc.c:48: for (; *s; s++) putchar(*s);
      000A84 8F 82            [24] 2389 	mov	dpl,r7
      000A86 8E 83            [24] 2390 	mov	dph,r6
      000A88 8D F0            [24] 2391 	mov	b,r5
      000A8A 12r00r00         [24] 2392 	lcall	__gptrget
      000A8D FC               [12] 2393 	mov	r4,a
      000A8E 70 03            [24] 2394 	jnz	00897$
      000A90 02r19r8A         [24] 2395 	ljmp	00196$
      000A93                       2396 00897$:
      000A93 7B 00            [12] 2397 	mov	r3,#0x00
      000A95 8C 82            [24] 2398 	mov	dpl,r4
      000A97 8B 83            [24] 2399 	mov	dph,r3
      000A99 12r00r00         [24] 2400 	lcall	_putchar
      000A9C 0F               [12] 2401 	inc	r7
                                   2402 ;	calc.c:167: case 'V':
      000A9D BF 00 E4         [24] 2403 	cjne	r7,#0x00,00297$
      000AA0 0E               [12] 2404 	inc	r6
      000AA1 80 E1            [24] 2405 	sjmp	00297$
      000AA3                       2406 00113$:
                                   2407 ;	calc.c:168: printstr("\r\n");
      000AA3 7Fr00            [12] 2408 	mov	r7,#___str_0
      000AA5 7Es00            [12] 2409 	mov	r6,#(___str_0 >> 8)
      000AA7 7D 80            [12] 2410 	mov	r5,#0x80
                                   2411 ;	calc.c:50: return;
      000AA9                       2412 00300$:
                                   2413 ;	calc.c:48: for (; *s; s++) putchar(*s);
      000AA9 8F 82            [24] 2414 	mov	dpl,r7
      000AAB 8E 83            [24] 2415 	mov	dph,r6
      000AAD 8D F0            [24] 2416 	mov	b,r5
      000AAF 12r00r00         [24] 2417 	lcall	__gptrget
      000AB2 FC               [12] 2418 	mov	r4,a
      000AB3 60 10            [24] 2419 	jz	00222$
      000AB5 7B 00            [12] 2420 	mov	r3,#0x00
      000AB7 8C 82            [24] 2421 	mov	dpl,r4
      000AB9 8B 83            [24] 2422 	mov	dph,r3
      000ABB 12r00r00         [24] 2423 	lcall	_putchar
      000ABE 0F               [12] 2424 	inc	r7
                                   2425 ;	calc.c:168: printstr("\r\n");
      000ABF BF 00 E7         [24] 2426 	cjne	r7,#0x00,00300$
      000AC2 0E               [12] 2427 	inc	r6
      000AC3 80 E4            [24] 2428 	sjmp	00300$
      000AC5                       2429 00222$:
                                   2430 ;	calc.c:169: (void)dump_pop(_ctx, delta);
      000AC5 E5*00            [12] 2431 	mov	a,_bp
      000AC7 24 FB            [12] 2432 	add	a,#0xfb
      000AC9 F8               [12] 2433 	mov	r0,a
      000ACA E6               [12] 2434 	mov	a,@r0
      000ACB C0 E0            [24] 2435 	push	acc
      000ACD 08               [12] 2436 	inc	r0
      000ACE E6               [12] 2437 	mov	a,@r0
      000ACF C0 E0            [24] 2438 	push	acc
      000AD1 08               [12] 2439 	inc	r0
      000AD2 E6               [12] 2440 	mov	a,@r0
      000AD3 C0 E0            [24] 2441 	push	acc
      000AD5 A8*00            [24] 2442 	mov	r0,_bp
      000AD7 08               [12] 2443 	inc	r0
      000AD8 86 82            [24] 2444 	mov	dpl,@r0
      000ADA 08               [12] 2445 	inc	r0
      000ADB 86 83            [24] 2446 	mov	dph,@r0
      000ADD 08               [12] 2447 	inc	r0
      000ADE 86 F0            [24] 2448 	mov	b,@r0
      000AE0 12r02r3C         [24] 2449 	lcall	_dump_pop
      000AE3 15 81            [12] 2450 	dec	sp
      000AE5 15 81            [12] 2451 	dec	sp
      000AE7 15 81            [12] 2452 	dec	sp
                                   2453 ;	calc.c:170: break;
      000AE9 02r19r8A         [24] 2454 	ljmp	00196$
                                   2455 ;	calc.c:171: case 'x':
      000AEC                       2456 00114$:
                                   2457 ;	calc.c:172: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      000AEC E5*00            [12] 2458 	mov	a,_bp
      000AEE 24 0F            [12] 2459 	add	a,#0x0f
      000AF0 FF               [12] 2460 	mov	r7,a
      000AF1 7E 00            [12] 2461 	mov	r6,#0x00
      000AF3 7D 40            [12] 2462 	mov	r5,#0x40
      000AF5 E5*00            [12] 2463 	mov	a,_bp
      000AF7 24 0C            [12] 2464 	add	a,#0x0c
      000AF9 F8               [12] 2465 	mov	r0,a
      000AFA 74 09            [12] 2466 	mov	a,#0x09
      000AFC 26               [12] 2467 	add	a,@r0
      000AFD FA               [12] 2468 	mov	r2,a
      000AFE E4               [12] 2469 	clr	a
      000AFF 08               [12] 2470 	inc	r0
      000B00 36               [12] 2471 	addc	a,@r0
      000B01 FB               [12] 2472 	mov	r3,a
      000B02 08               [12] 2473 	inc	r0
      000B03 86 04            [24] 2474 	mov	ar4,@r0
      000B05 C0 07            [24] 2475 	push	ar7
      000B07 C0 06            [24] 2476 	push	ar6
      000B09 C0 05            [24] 2477 	push	ar5
      000B0B 8A 82            [24] 2478 	mov	dpl,r2
      000B0D 8B 83            [24] 2479 	mov	dph,r3
      000B0F 8C F0            [24] 2480 	mov	b,r4
      000B11 12r00r00         [24] 2481 	lcall	_stack_pop
      000B14 AB 82            [24] 2482 	mov	r3,dpl
      000B16 AC 83            [24] 2483 	mov	r4,dph
      000B18 15 81            [12] 2484 	dec	sp
      000B1A 15 81            [12] 2485 	dec	sp
      000B1C 15 81            [12] 2486 	dec	sp
      000B1E EB               [12] 2487 	mov	a,r3
      000B1F 4C               [12] 2488 	orl	a,r4
      000B20 70 25            [24] 2489 	jnz	00119$
      000B22 7Fr38            [12] 2490 	mov	r7,#___str_8
      000B24 7Es00            [12] 2491 	mov	r6,#(___str_8 >> 8)
      000B26 7D 80            [12] 2492 	mov	r5,#0x80
                                   2493 ;	calc.c:50: return;
      000B28                       2494 00303$:
                                   2495 ;	calc.c:48: for (; *s; s++) putchar(*s);
      000B28 8F 82            [24] 2496 	mov	dpl,r7
      000B2A 8E 83            [24] 2497 	mov	dph,r6
      000B2C 8D F0            [24] 2498 	mov	b,r5
      000B2E 12r00r00         [24] 2499 	lcall	__gptrget
      000B31 FC               [12] 2500 	mov	r4,a
      000B32 70 03            [24] 2501 	jnz	00902$
      000B34 02r19r8A         [24] 2502 	ljmp	00196$
      000B37                       2503 00902$:
      000B37 7B 00            [12] 2504 	mov	r3,#0x00
      000B39 8C 82            [24] 2505 	mov	dpl,r4
      000B3B 8B 83            [24] 2506 	mov	dph,r3
      000B3D 12r00r00         [24] 2507 	lcall	_putchar
      000B40 0F               [12] 2508 	inc	r7
                                   2509 ;	calc.c:172: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      000B41 BF 00 E4         [24] 2510 	cjne	r7,#0x00,00303$
      000B44 0E               [12] 2511 	inc	r6
      000B45 80 E1            [24] 2512 	sjmp	00303$
      000B47                       2513 00119$:
                                   2514 ;	calc.c:173: else if (!stack_pop(&ctx->s, &d1)) {
      000B47 E5*00            [12] 2515 	mov	a,_bp
      000B49 24 13            [12] 2516 	add	a,#0x13
      000B4B FF               [12] 2517 	mov	r7,a
      000B4C 7E 00            [12] 2518 	mov	r6,#0x00
      000B4E 7D 40            [12] 2519 	mov	r5,#0x40
      000B50 E5*00            [12] 2520 	mov	a,_bp
      000B52 24 0C            [12] 2521 	add	a,#0x0c
      000B54 F8               [12] 2522 	mov	r0,a
      000B55 74 09            [12] 2523 	mov	a,#0x09
      000B57 26               [12] 2524 	add	a,@r0
      000B58 FA               [12] 2525 	mov	r2,a
      000B59 E4               [12] 2526 	clr	a
      000B5A 08               [12] 2527 	inc	r0
      000B5B 36               [12] 2528 	addc	a,@r0
      000B5C FB               [12] 2529 	mov	r3,a
      000B5D 08               [12] 2530 	inc	r0
      000B5E 86 04            [24] 2531 	mov	ar4,@r0
      000B60 C0 07            [24] 2532 	push	ar7
      000B62 C0 06            [24] 2533 	push	ar6
      000B64 C0 05            [24] 2534 	push	ar5
      000B66 8A 82            [24] 2535 	mov	dpl,r2
      000B68 8B 83            [24] 2536 	mov	dph,r3
      000B6A 8C F0            [24] 2537 	mov	b,r4
      000B6C 12r00r00         [24] 2538 	lcall	_stack_pop
      000B6F AB 82            [24] 2539 	mov	r3,dpl
      000B71 AC 83            [24] 2540 	mov	r4,dph
      000B73 15 81            [12] 2541 	dec	sp
      000B75 15 81            [12] 2542 	dec	sp
      000B77 15 81            [12] 2543 	dec	sp
      000B79 EB               [12] 2544 	mov	a,r3
      000B7A 4C               [12] 2545 	orl	a,r4
      000B7B 70 58            [24] 2546 	jnz	00116$
                                   2547 ;	calc.c:174: (void)stack_push(&ctx->s, d0);
      000B7D E5*00            [12] 2548 	mov	a,_bp
      000B7F 24 0C            [12] 2549 	add	a,#0x0c
      000B81 F8               [12] 2550 	mov	r0,a
      000B82 74 09            [12] 2551 	mov	a,#0x09
      000B84 26               [12] 2552 	add	a,@r0
      000B85 FA               [12] 2553 	mov	r2,a
      000B86 E4               [12] 2554 	clr	a
      000B87 08               [12] 2555 	inc	r0
      000B88 36               [12] 2556 	addc	a,@r0
      000B89 FB               [12] 2557 	mov	r3,a
      000B8A 08               [12] 2558 	inc	r0
      000B8B 86 04            [24] 2559 	mov	ar4,@r0
      000B8D E5*00            [12] 2560 	mov	a,_bp
      000B8F 24 0F            [12] 2561 	add	a,#0x0f
      000B91 F8               [12] 2562 	mov	r0,a
      000B92 E6               [12] 2563 	mov	a,@r0
      000B93 C0 E0            [24] 2564 	push	acc
      000B95 08               [12] 2565 	inc	r0
      000B96 E6               [12] 2566 	mov	a,@r0
      000B97 C0 E0            [24] 2567 	push	acc
      000B99 08               [12] 2568 	inc	r0
      000B9A E6               [12] 2569 	mov	a,@r0
      000B9B C0 E0            [24] 2570 	push	acc
      000B9D 08               [12] 2571 	inc	r0
      000B9E E6               [12] 2572 	mov	a,@r0
      000B9F C0 E0            [24] 2573 	push	acc
      000BA1 8A 82            [24] 2574 	mov	dpl,r2
      000BA3 8B 83            [24] 2575 	mov	dph,r3
      000BA5 8C F0            [24] 2576 	mov	b,r4
      000BA7 12r00r00         [24] 2577 	lcall	_stack_push
      000BAA E5 81            [12] 2578 	mov	a,sp
      000BAC 24 FC            [12] 2579 	add	a,#0xfc
      000BAE F5 81            [12] 2580 	mov	sp,a
                                   2581 ;	calc.c:175: printstr("\r\nstack underflow\r\n");
      000BB0 7Fr38            [12] 2582 	mov	r7,#___str_8
      000BB2 7Es00            [12] 2583 	mov	r6,#(___str_8 >> 8)
      000BB4 7D 80            [12] 2584 	mov	r5,#0x80
                                   2585 ;	calc.c:50: return;
      000BB6                       2586 00306$:
                                   2587 ;	calc.c:48: for (; *s; s++) putchar(*s);
      000BB6 8F 82            [24] 2588 	mov	dpl,r7
      000BB8 8E 83            [24] 2589 	mov	dph,r6
      000BBA 8D F0            [24] 2590 	mov	b,r5
      000BBC 12r00r00         [24] 2591 	lcall	__gptrget
      000BBF FC               [12] 2592 	mov	r4,a
      000BC0 70 03            [24] 2593 	jnz	00905$
      000BC2 02r19r8A         [24] 2594 	ljmp	00196$
      000BC5                       2595 00905$:
      000BC5 7B 00            [12] 2596 	mov	r3,#0x00
      000BC7 8C 82            [24] 2597 	mov	dpl,r4
      000BC9 8B 83            [24] 2598 	mov	dph,r3
      000BCB 12r00r00         [24] 2599 	lcall	_putchar
      000BCE 0F               [12] 2600 	inc	r7
                                   2601 ;	calc.c:175: printstr("\r\nstack underflow\r\n");
      000BCF BF 00 E4         [24] 2602 	cjne	r7,#0x00,00306$
      000BD2 0E               [12] 2603 	inc	r6
      000BD3 80 E1            [24] 2604 	sjmp	00306$
      000BD5                       2605 00116$:
                                   2606 ;	calc.c:177: (void)stack_push(&ctx->s, d0);
      000BD5 E5*00            [12] 2607 	mov	a,_bp
      000BD7 24 0C            [12] 2608 	add	a,#0x0c
      000BD9 F8               [12] 2609 	mov	r0,a
      000BDA 74 09            [12] 2610 	mov	a,#0x09
      000BDC 26               [12] 2611 	add	a,@r0
      000BDD FA               [12] 2612 	mov	r2,a
      000BDE E4               [12] 2613 	clr	a
      000BDF 08               [12] 2614 	inc	r0
      000BE0 36               [12] 2615 	addc	a,@r0
      000BE1 FB               [12] 2616 	mov	r3,a
      000BE2 08               [12] 2617 	inc	r0
      000BE3 86 04            [24] 2618 	mov	ar4,@r0
      000BE5 E5*00            [12] 2619 	mov	a,_bp
      000BE7 24 0F            [12] 2620 	add	a,#0x0f
      000BE9 F8               [12] 2621 	mov	r0,a
      000BEA E6               [12] 2622 	mov	a,@r0
      000BEB C0 E0            [24] 2623 	push	acc
      000BED 08               [12] 2624 	inc	r0
      000BEE E6               [12] 2625 	mov	a,@r0
      000BEF C0 E0            [24] 2626 	push	acc
      000BF1 08               [12] 2627 	inc	r0
      000BF2 E6               [12] 2628 	mov	a,@r0
      000BF3 C0 E0            [24] 2629 	push	acc
      000BF5 08               [12] 2630 	inc	r0
      000BF6 E6               [12] 2631 	mov	a,@r0
      000BF7 C0 E0            [24] 2632 	push	acc
      000BF9 8A 82            [24] 2633 	mov	dpl,r2
      000BFB 8B 83            [24] 2634 	mov	dph,r3
      000BFD 8C F0            [24] 2635 	mov	b,r4
      000BFF 12r00r00         [24] 2636 	lcall	_stack_push
      000C02 E5 81            [12] 2637 	mov	a,sp
      000C04 24 FC            [12] 2638 	add	a,#0xfc
      000C06 F5 81            [12] 2639 	mov	sp,a
                                   2640 ;	calc.c:178: (void)stack_push(&ctx->s, d1);
      000C08 E5*00            [12] 2641 	mov	a,_bp
      000C0A 24 0C            [12] 2642 	add	a,#0x0c
      000C0C F8               [12] 2643 	mov	r0,a
      000C0D 74 09            [12] 2644 	mov	a,#0x09
      000C0F 26               [12] 2645 	add	a,@r0
      000C10 FA               [12] 2646 	mov	r2,a
      000C11 E4               [12] 2647 	clr	a
      000C12 08               [12] 2648 	inc	r0
      000C13 36               [12] 2649 	addc	a,@r0
      000C14 FB               [12] 2650 	mov	r3,a
      000C15 08               [12] 2651 	inc	r0
      000C16 86 04            [24] 2652 	mov	ar4,@r0
      000C18 E5*00            [12] 2653 	mov	a,_bp
      000C1A 24 13            [12] 2654 	add	a,#0x13
      000C1C F8               [12] 2655 	mov	r0,a
      000C1D E6               [12] 2656 	mov	a,@r0
      000C1E C0 E0            [24] 2657 	push	acc
      000C20 08               [12] 2658 	inc	r0
      000C21 E6               [12] 2659 	mov	a,@r0
      000C22 C0 E0            [24] 2660 	push	acc
      000C24 08               [12] 2661 	inc	r0
      000C25 E6               [12] 2662 	mov	a,@r0
      000C26 C0 E0            [24] 2663 	push	acc
      000C28 08               [12] 2664 	inc	r0
      000C29 E6               [12] 2665 	mov	a,@r0
      000C2A C0 E0            [24] 2666 	push	acc
      000C2C 8A 82            [24] 2667 	mov	dpl,r2
      000C2E 8B 83            [24] 2668 	mov	dph,r3
      000C30 8C F0            [24] 2669 	mov	b,r4
      000C32 12r00r00         [24] 2670 	lcall	_stack_push
      000C35 E5 81            [12] 2671 	mov	a,sp
      000C37 24 FC            [12] 2672 	add	a,#0xfc
      000C39 F5 81            [12] 2673 	mov	sp,a
                                   2674 ;	calc.c:180: break;
      000C3B 02r19r8A         [24] 2675 	ljmp	00196$
                                   2676 ;	calc.c:181: case '+':
      000C3E                       2677 00121$:
                                   2678 ;	calc.c:182: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      000C3E E5*00            [12] 2679 	mov	a,_bp
      000C40 24 0F            [12] 2680 	add	a,#0x0f
      000C42 FF               [12] 2681 	mov	r7,a
      000C43 7E 00            [12] 2682 	mov	r6,#0x00
      000C45 7D 40            [12] 2683 	mov	r5,#0x40
      000C47 E5*00            [12] 2684 	mov	a,_bp
      000C49 24 0C            [12] 2685 	add	a,#0x0c
      000C4B F8               [12] 2686 	mov	r0,a
      000C4C 74 09            [12] 2687 	mov	a,#0x09
      000C4E 26               [12] 2688 	add	a,@r0
      000C4F FA               [12] 2689 	mov	r2,a
      000C50 E4               [12] 2690 	clr	a
      000C51 08               [12] 2691 	inc	r0
      000C52 36               [12] 2692 	addc	a,@r0
      000C53 FB               [12] 2693 	mov	r3,a
      000C54 08               [12] 2694 	inc	r0
      000C55 86 04            [24] 2695 	mov	ar4,@r0
      000C57 C0 07            [24] 2696 	push	ar7
      000C59 C0 06            [24] 2697 	push	ar6
      000C5B C0 05            [24] 2698 	push	ar5
      000C5D 8A 82            [24] 2699 	mov	dpl,r2
      000C5F 8B 83            [24] 2700 	mov	dph,r3
      000C61 8C F0            [24] 2701 	mov	b,r4
      000C63 12r00r00         [24] 2702 	lcall	_stack_pop
      000C66 AB 82            [24] 2703 	mov	r3,dpl
      000C68 AC 83            [24] 2704 	mov	r4,dph
      000C6A 15 81            [12] 2705 	dec	sp
      000C6C 15 81            [12] 2706 	dec	sp
      000C6E 15 81            [12] 2707 	dec	sp
      000C70 EB               [12] 2708 	mov	a,r3
      000C71 4C               [12] 2709 	orl	a,r4
      000C72 70 25            [24] 2710 	jnz	00126$
      000C74 7Fr38            [12] 2711 	mov	r7,#___str_8
      000C76 7Es00            [12] 2712 	mov	r6,#(___str_8 >> 8)
      000C78 7D 80            [12] 2713 	mov	r5,#0x80
                                   2714 ;	calc.c:50: return;
      000C7A                       2715 00309$:
                                   2716 ;	calc.c:48: for (; *s; s++) putchar(*s);
      000C7A 8F 82            [24] 2717 	mov	dpl,r7
      000C7C 8E 83            [24] 2718 	mov	dph,r6
      000C7E 8D F0            [24] 2719 	mov	b,r5
      000C80 12r00r00         [24] 2720 	lcall	__gptrget
      000C83 FC               [12] 2721 	mov	r4,a
      000C84 70 03            [24] 2722 	jnz	00908$
      000C86 02r19r8A         [24] 2723 	ljmp	00196$
      000C89                       2724 00908$:
      000C89 7B 00            [12] 2725 	mov	r3,#0x00
      000C8B 8C 82            [24] 2726 	mov	dpl,r4
      000C8D 8B 83            [24] 2727 	mov	dph,r3
      000C8F 12r00r00         [24] 2728 	lcall	_putchar
      000C92 0F               [12] 2729 	inc	r7
                                   2730 ;	calc.c:182: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      000C93 BF 00 E4         [24] 2731 	cjne	r7,#0x00,00309$
      000C96 0E               [12] 2732 	inc	r6
      000C97 80 E1            [24] 2733 	sjmp	00309$
      000C99                       2734 00126$:
                                   2735 ;	calc.c:183: else if (!stack_pop(&ctx->s, &d1)) {
      000C99 E5*00            [12] 2736 	mov	a,_bp
      000C9B 24 13            [12] 2737 	add	a,#0x13
      000C9D FF               [12] 2738 	mov	r7,a
      000C9E 7E 00            [12] 2739 	mov	r6,#0x00
      000CA0 7D 40            [12] 2740 	mov	r5,#0x40
      000CA2 E5*00            [12] 2741 	mov	a,_bp
      000CA4 24 0C            [12] 2742 	add	a,#0x0c
      000CA6 F8               [12] 2743 	mov	r0,a
      000CA7 74 09            [12] 2744 	mov	a,#0x09
      000CA9 26               [12] 2745 	add	a,@r0
      000CAA FA               [12] 2746 	mov	r2,a
      000CAB E4               [12] 2747 	clr	a
      000CAC 08               [12] 2748 	inc	r0
      000CAD 36               [12] 2749 	addc	a,@r0
      000CAE FB               [12] 2750 	mov	r3,a
      000CAF 08               [12] 2751 	inc	r0
      000CB0 86 04            [24] 2752 	mov	ar4,@r0
      000CB2 C0 07            [24] 2753 	push	ar7
      000CB4 C0 06            [24] 2754 	push	ar6
      000CB6 C0 05            [24] 2755 	push	ar5
      000CB8 8A 82            [24] 2756 	mov	dpl,r2
      000CBA 8B 83            [24] 2757 	mov	dph,r3
      000CBC 8C F0            [24] 2758 	mov	b,r4
      000CBE 12r00r00         [24] 2759 	lcall	_stack_pop
      000CC1 AB 82            [24] 2760 	mov	r3,dpl
      000CC3 AC 83            [24] 2761 	mov	r4,dph
      000CC5 15 81            [12] 2762 	dec	sp
      000CC7 15 81            [12] 2763 	dec	sp
      000CC9 15 81            [12] 2764 	dec	sp
      000CCB EB               [12] 2765 	mov	a,r3
      000CCC 4C               [12] 2766 	orl	a,r4
      000CCD 70 58            [24] 2767 	jnz	00123$
                                   2768 ;	calc.c:184: (void)stack_push(&ctx->s, d0);
      000CCF E5*00            [12] 2769 	mov	a,_bp
      000CD1 24 0C            [12] 2770 	add	a,#0x0c
      000CD3 F8               [12] 2771 	mov	r0,a
      000CD4 74 09            [12] 2772 	mov	a,#0x09
      000CD6 26               [12] 2773 	add	a,@r0
      000CD7 FA               [12] 2774 	mov	r2,a
      000CD8 E4               [12] 2775 	clr	a
      000CD9 08               [12] 2776 	inc	r0
      000CDA 36               [12] 2777 	addc	a,@r0
      000CDB FB               [12] 2778 	mov	r3,a
      000CDC 08               [12] 2779 	inc	r0
      000CDD 86 04            [24] 2780 	mov	ar4,@r0
      000CDF E5*00            [12] 2781 	mov	a,_bp
      000CE1 24 0F            [12] 2782 	add	a,#0x0f
      000CE3 F8               [12] 2783 	mov	r0,a
      000CE4 E6               [12] 2784 	mov	a,@r0
      000CE5 C0 E0            [24] 2785 	push	acc
      000CE7 08               [12] 2786 	inc	r0
      000CE8 E6               [12] 2787 	mov	a,@r0
      000CE9 C0 E0            [24] 2788 	push	acc
      000CEB 08               [12] 2789 	inc	r0
      000CEC E6               [12] 2790 	mov	a,@r0
      000CED C0 E0            [24] 2791 	push	acc
      000CEF 08               [12] 2792 	inc	r0
      000CF0 E6               [12] 2793 	mov	a,@r0
      000CF1 C0 E0            [24] 2794 	push	acc
      000CF3 8A 82            [24] 2795 	mov	dpl,r2
      000CF5 8B 83            [24] 2796 	mov	dph,r3
      000CF7 8C F0            [24] 2797 	mov	b,r4
      000CF9 12r00r00         [24] 2798 	lcall	_stack_push
      000CFC E5 81            [12] 2799 	mov	a,sp
      000CFE 24 FC            [12] 2800 	add	a,#0xfc
      000D00 F5 81            [12] 2801 	mov	sp,a
                                   2802 ;	calc.c:185: printstr("\r\nstack underflow\r\n");
      000D02 7Fr38            [12] 2803 	mov	r7,#___str_8
      000D04 7Es00            [12] 2804 	mov	r6,#(___str_8 >> 8)
      000D06 7D 80            [12] 2805 	mov	r5,#0x80
                                   2806 ;	calc.c:50: return;
      000D08                       2807 00312$:
                                   2808 ;	calc.c:48: for (; *s; s++) putchar(*s);
      000D08 8F 82            [24] 2809 	mov	dpl,r7
      000D0A 8E 83            [24] 2810 	mov	dph,r6
      000D0C 8D F0            [24] 2811 	mov	b,r5
      000D0E 12r00r00         [24] 2812 	lcall	__gptrget
      000D11 FC               [12] 2813 	mov	r4,a
      000D12 70 03            [24] 2814 	jnz	00911$
      000D14 02r19r8A         [24] 2815 	ljmp	00196$
      000D17                       2816 00911$:
      000D17 7B 00            [12] 2817 	mov	r3,#0x00
      000D19 8C 82            [24] 2818 	mov	dpl,r4
      000D1B 8B 83            [24] 2819 	mov	dph,r3
      000D1D 12r00r00         [24] 2820 	lcall	_putchar
      000D20 0F               [12] 2821 	inc	r7
                                   2822 ;	calc.c:185: printstr("\r\nstack underflow\r\n");
      000D21 BF 00 E4         [24] 2823 	cjne	r7,#0x00,00312$
      000D24 0E               [12] 2824 	inc	r6
      000D25 80 E1            [24] 2825 	sjmp	00312$
      000D27                       2826 00123$:
                                   2827 ;	calc.c:187: d1 += d0;
      000D27 E5*00            [12] 2828 	mov	a,_bp
      000D29 24 13            [12] 2829 	add	a,#0x13
      000D2B F8               [12] 2830 	mov	r0,a
      000D2C E5*00            [12] 2831 	mov	a,_bp
      000D2E 24 0F            [12] 2832 	add	a,#0x0f
      000D30 F9               [12] 2833 	mov	r1,a
      000D31 E7               [12] 2834 	mov	a,@r1
      000D32 26               [12] 2835 	add	a,@r0
      000D33 F6               [12] 2836 	mov	@r0,a
      000D34 09               [12] 2837 	inc	r1
      000D35 E7               [12] 2838 	mov	a,@r1
      000D36 08               [12] 2839 	inc	r0
      000D37 36               [12] 2840 	addc	a,@r0
      000D38 F6               [12] 2841 	mov	@r0,a
      000D39 09               [12] 2842 	inc	r1
      000D3A E7               [12] 2843 	mov	a,@r1
      000D3B 08               [12] 2844 	inc	r0
      000D3C 36               [12] 2845 	addc	a,@r0
      000D3D F6               [12] 2846 	mov	@r0,a
      000D3E 09               [12] 2847 	inc	r1
      000D3F E7               [12] 2848 	mov	a,@r1
      000D40 08               [12] 2849 	inc	r0
      000D41 36               [12] 2850 	addc	a,@r0
      000D42 F6               [12] 2851 	mov	@r0,a
                                   2852 ;	calc.c:188: (void)stack_push(&ctx->s, d1);
      000D43 E5*00            [12] 2853 	mov	a,_bp
      000D45 24 0C            [12] 2854 	add	a,#0x0c
      000D47 F8               [12] 2855 	mov	r0,a
      000D48 74 09            [12] 2856 	mov	a,#0x09
      000D4A 26               [12] 2857 	add	a,@r0
      000D4B FA               [12] 2858 	mov	r2,a
      000D4C E4               [12] 2859 	clr	a
      000D4D 08               [12] 2860 	inc	r0
      000D4E 36               [12] 2861 	addc	a,@r0
      000D4F FB               [12] 2862 	mov	r3,a
      000D50 08               [12] 2863 	inc	r0
      000D51 86 04            [24] 2864 	mov	ar4,@r0
      000D53 E5*00            [12] 2865 	mov	a,_bp
      000D55 24 13            [12] 2866 	add	a,#0x13
      000D57 F8               [12] 2867 	mov	r0,a
      000D58 E6               [12] 2868 	mov	a,@r0
      000D59 C0 E0            [24] 2869 	push	acc
      000D5B 08               [12] 2870 	inc	r0
      000D5C E6               [12] 2871 	mov	a,@r0
      000D5D C0 E0            [24] 2872 	push	acc
      000D5F 08               [12] 2873 	inc	r0
      000D60 E6               [12] 2874 	mov	a,@r0
      000D61 C0 E0            [24] 2875 	push	acc
      000D63 08               [12] 2876 	inc	r0
      000D64 E6               [12] 2877 	mov	a,@r0
      000D65 C0 E0            [24] 2878 	push	acc
      000D67 8A 82            [24] 2879 	mov	dpl,r2
      000D69 8B 83            [24] 2880 	mov	dph,r3
      000D6B 8C F0            [24] 2881 	mov	b,r4
      000D6D 12r00r00         [24] 2882 	lcall	_stack_push
      000D70 E5 81            [12] 2883 	mov	a,sp
      000D72 24 FC            [12] 2884 	add	a,#0xfc
      000D74 F5 81            [12] 2885 	mov	sp,a
                                   2886 ;	calc.c:190: break;
      000D76 02r19r8A         [24] 2887 	ljmp	00196$
                                   2888 ;	calc.c:191: case '-':
      000D79                       2889 00128$:
                                   2890 ;	calc.c:192: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      000D79 E5*00            [12] 2891 	mov	a,_bp
      000D7B 24 0F            [12] 2892 	add	a,#0x0f
      000D7D FF               [12] 2893 	mov	r7,a
      000D7E 7E 00            [12] 2894 	mov	r6,#0x00
      000D80 7D 40            [12] 2895 	mov	r5,#0x40
      000D82 E5*00            [12] 2896 	mov	a,_bp
      000D84 24 0C            [12] 2897 	add	a,#0x0c
      000D86 F8               [12] 2898 	mov	r0,a
      000D87 74 09            [12] 2899 	mov	a,#0x09
      000D89 26               [12] 2900 	add	a,@r0
      000D8A FA               [12] 2901 	mov	r2,a
      000D8B E4               [12] 2902 	clr	a
      000D8C 08               [12] 2903 	inc	r0
      000D8D 36               [12] 2904 	addc	a,@r0
      000D8E FB               [12] 2905 	mov	r3,a
      000D8F 08               [12] 2906 	inc	r0
      000D90 86 04            [24] 2907 	mov	ar4,@r0
      000D92 C0 07            [24] 2908 	push	ar7
      000D94 C0 06            [24] 2909 	push	ar6
      000D96 C0 05            [24] 2910 	push	ar5
      000D98 8A 82            [24] 2911 	mov	dpl,r2
      000D9A 8B 83            [24] 2912 	mov	dph,r3
      000D9C 8C F0            [24] 2913 	mov	b,r4
      000D9E 12r00r00         [24] 2914 	lcall	_stack_pop
      000DA1 AB 82            [24] 2915 	mov	r3,dpl
      000DA3 AC 83            [24] 2916 	mov	r4,dph
      000DA5 15 81            [12] 2917 	dec	sp
      000DA7 15 81            [12] 2918 	dec	sp
      000DA9 15 81            [12] 2919 	dec	sp
      000DAB EB               [12] 2920 	mov	a,r3
      000DAC 4C               [12] 2921 	orl	a,r4
      000DAD 70 25            [24] 2922 	jnz	00133$
      000DAF 7Fr38            [12] 2923 	mov	r7,#___str_8
      000DB1 7Es00            [12] 2924 	mov	r6,#(___str_8 >> 8)
      000DB3 7D 80            [12] 2925 	mov	r5,#0x80
                                   2926 ;	calc.c:50: return;
      000DB5                       2927 00315$:
                                   2928 ;	calc.c:48: for (; *s; s++) putchar(*s);
      000DB5 8F 82            [24] 2929 	mov	dpl,r7
      000DB7 8E 83            [24] 2930 	mov	dph,r6
      000DB9 8D F0            [24] 2931 	mov	b,r5
      000DBB 12r00r00         [24] 2932 	lcall	__gptrget
      000DBE FC               [12] 2933 	mov	r4,a
      000DBF 70 03            [24] 2934 	jnz	00914$
      000DC1 02r19r8A         [24] 2935 	ljmp	00196$
      000DC4                       2936 00914$:
      000DC4 7B 00            [12] 2937 	mov	r3,#0x00
      000DC6 8C 82            [24] 2938 	mov	dpl,r4
      000DC8 8B 83            [24] 2939 	mov	dph,r3
      000DCA 12r00r00         [24] 2940 	lcall	_putchar
      000DCD 0F               [12] 2941 	inc	r7
                                   2942 ;	calc.c:192: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      000DCE BF 00 E4         [24] 2943 	cjne	r7,#0x00,00315$
      000DD1 0E               [12] 2944 	inc	r6
      000DD2 80 E1            [24] 2945 	sjmp	00315$
      000DD4                       2946 00133$:
                                   2947 ;	calc.c:193: else if (!stack_pop(&ctx->s, &d1)) {
      000DD4 E5*00            [12] 2948 	mov	a,_bp
      000DD6 24 13            [12] 2949 	add	a,#0x13
      000DD8 FF               [12] 2950 	mov	r7,a
      000DD9 7E 00            [12] 2951 	mov	r6,#0x00
      000DDB 7D 40            [12] 2952 	mov	r5,#0x40
      000DDD E5*00            [12] 2953 	mov	a,_bp
      000DDF 24 0C            [12] 2954 	add	a,#0x0c
      000DE1 F8               [12] 2955 	mov	r0,a
      000DE2 74 09            [12] 2956 	mov	a,#0x09
      000DE4 26               [12] 2957 	add	a,@r0
      000DE5 FA               [12] 2958 	mov	r2,a
      000DE6 E4               [12] 2959 	clr	a
      000DE7 08               [12] 2960 	inc	r0
      000DE8 36               [12] 2961 	addc	a,@r0
      000DE9 FB               [12] 2962 	mov	r3,a
      000DEA 08               [12] 2963 	inc	r0
      000DEB 86 04            [24] 2964 	mov	ar4,@r0
      000DED C0 07            [24] 2965 	push	ar7
      000DEF C0 06            [24] 2966 	push	ar6
      000DF1 C0 05            [24] 2967 	push	ar5
      000DF3 8A 82            [24] 2968 	mov	dpl,r2
      000DF5 8B 83            [24] 2969 	mov	dph,r3
      000DF7 8C F0            [24] 2970 	mov	b,r4
      000DF9 12r00r00         [24] 2971 	lcall	_stack_pop
      000DFC AB 82            [24] 2972 	mov	r3,dpl
      000DFE AC 83            [24] 2973 	mov	r4,dph
      000E00 15 81            [12] 2974 	dec	sp
      000E02 15 81            [12] 2975 	dec	sp
      000E04 15 81            [12] 2976 	dec	sp
      000E06 EB               [12] 2977 	mov	a,r3
      000E07 4C               [12] 2978 	orl	a,r4
      000E08 70 58            [24] 2979 	jnz	00130$
                                   2980 ;	calc.c:194: (void)stack_push(&ctx->s, d0);
      000E0A E5*00            [12] 2981 	mov	a,_bp
      000E0C 24 0C            [12] 2982 	add	a,#0x0c
      000E0E F8               [12] 2983 	mov	r0,a
      000E0F 74 09            [12] 2984 	mov	a,#0x09
      000E11 26               [12] 2985 	add	a,@r0
      000E12 FA               [12] 2986 	mov	r2,a
      000E13 E4               [12] 2987 	clr	a
      000E14 08               [12] 2988 	inc	r0
      000E15 36               [12] 2989 	addc	a,@r0
      000E16 FB               [12] 2990 	mov	r3,a
      000E17 08               [12] 2991 	inc	r0
      000E18 86 04            [24] 2992 	mov	ar4,@r0
      000E1A E5*00            [12] 2993 	mov	a,_bp
      000E1C 24 0F            [12] 2994 	add	a,#0x0f
      000E1E F8               [12] 2995 	mov	r0,a
      000E1F E6               [12] 2996 	mov	a,@r0
      000E20 C0 E0            [24] 2997 	push	acc
      000E22 08               [12] 2998 	inc	r0
      000E23 E6               [12] 2999 	mov	a,@r0
      000E24 C0 E0            [24] 3000 	push	acc
      000E26 08               [12] 3001 	inc	r0
      000E27 E6               [12] 3002 	mov	a,@r0
      000E28 C0 E0            [24] 3003 	push	acc
      000E2A 08               [12] 3004 	inc	r0
      000E2B E6               [12] 3005 	mov	a,@r0
      000E2C C0 E0            [24] 3006 	push	acc
      000E2E 8A 82            [24] 3007 	mov	dpl,r2
      000E30 8B 83            [24] 3008 	mov	dph,r3
      000E32 8C F0            [24] 3009 	mov	b,r4
      000E34 12r00r00         [24] 3010 	lcall	_stack_push
      000E37 E5 81            [12] 3011 	mov	a,sp
      000E39 24 FC            [12] 3012 	add	a,#0xfc
      000E3B F5 81            [12] 3013 	mov	sp,a
                                   3014 ;	calc.c:195: printstr("\r\nstack underflow\r\n");
      000E3D 7Fr38            [12] 3015 	mov	r7,#___str_8
      000E3F 7Es00            [12] 3016 	mov	r6,#(___str_8 >> 8)
      000E41 7D 80            [12] 3017 	mov	r5,#0x80
                                   3018 ;	calc.c:50: return;
      000E43                       3019 00318$:
                                   3020 ;	calc.c:48: for (; *s; s++) putchar(*s);
      000E43 8F 82            [24] 3021 	mov	dpl,r7
      000E45 8E 83            [24] 3022 	mov	dph,r6
      000E47 8D F0            [24] 3023 	mov	b,r5
      000E49 12r00r00         [24] 3024 	lcall	__gptrget
      000E4C FC               [12] 3025 	mov	r4,a
      000E4D 70 03            [24] 3026 	jnz	00917$
      000E4F 02r19r8A         [24] 3027 	ljmp	00196$
      000E52                       3028 00917$:
      000E52 7B 00            [12] 3029 	mov	r3,#0x00
      000E54 8C 82            [24] 3030 	mov	dpl,r4
      000E56 8B 83            [24] 3031 	mov	dph,r3
      000E58 12r00r00         [24] 3032 	lcall	_putchar
      000E5B 0F               [12] 3033 	inc	r7
                                   3034 ;	calc.c:195: printstr("\r\nstack underflow\r\n");
      000E5C BF 00 E4         [24] 3035 	cjne	r7,#0x00,00318$
      000E5F 0E               [12] 3036 	inc	r6
      000E60 80 E1            [24] 3037 	sjmp	00318$
      000E62                       3038 00130$:
                                   3039 ;	calc.c:197: d1 -= d0;
      000E62 E5*00            [12] 3040 	mov	a,_bp
      000E64 24 13            [12] 3041 	add	a,#0x13
      000E66 F8               [12] 3042 	mov	r0,a
      000E67 E5*00            [12] 3043 	mov	a,_bp
      000E69 24 0F            [12] 3044 	add	a,#0x0f
      000E6B F9               [12] 3045 	mov	r1,a
      000E6C E6               [12] 3046 	mov	a,@r0
      000E6D C3               [12] 3047 	clr	c
      000E6E 97               [12] 3048 	subb	a,@r1
      000E6F F6               [12] 3049 	mov	@r0,a
      000E70 08               [12] 3050 	inc	r0
      000E71 E6               [12] 3051 	mov	a,@r0
      000E72 09               [12] 3052 	inc	r1
      000E73 97               [12] 3053 	subb	a,@r1
      000E74 F6               [12] 3054 	mov	@r0,a
      000E75 08               [12] 3055 	inc	r0
      000E76 E6               [12] 3056 	mov	a,@r0
      000E77 09               [12] 3057 	inc	r1
      000E78 97               [12] 3058 	subb	a,@r1
      000E79 F6               [12] 3059 	mov	@r0,a
      000E7A 08               [12] 3060 	inc	r0
      000E7B E6               [12] 3061 	mov	a,@r0
      000E7C 09               [12] 3062 	inc	r1
      000E7D 97               [12] 3063 	subb	a,@r1
      000E7E F6               [12] 3064 	mov	@r0,a
                                   3065 ;	calc.c:198: (void)stack_push(&ctx->s, d1);
      000E7F E5*00            [12] 3066 	mov	a,_bp
      000E81 24 0C            [12] 3067 	add	a,#0x0c
      000E83 F8               [12] 3068 	mov	r0,a
      000E84 74 09            [12] 3069 	mov	a,#0x09
      000E86 26               [12] 3070 	add	a,@r0
      000E87 FA               [12] 3071 	mov	r2,a
      000E88 E4               [12] 3072 	clr	a
      000E89 08               [12] 3073 	inc	r0
      000E8A 36               [12] 3074 	addc	a,@r0
      000E8B FB               [12] 3075 	mov	r3,a
      000E8C 08               [12] 3076 	inc	r0
      000E8D 86 04            [24] 3077 	mov	ar4,@r0
      000E8F E5*00            [12] 3078 	mov	a,_bp
      000E91 24 13            [12] 3079 	add	a,#0x13
      000E93 F8               [12] 3080 	mov	r0,a
      000E94 E6               [12] 3081 	mov	a,@r0
      000E95 C0 E0            [24] 3082 	push	acc
      000E97 08               [12] 3083 	inc	r0
      000E98 E6               [12] 3084 	mov	a,@r0
      000E99 C0 E0            [24] 3085 	push	acc
      000E9B 08               [12] 3086 	inc	r0
      000E9C E6               [12] 3087 	mov	a,@r0
      000E9D C0 E0            [24] 3088 	push	acc
      000E9F 08               [12] 3089 	inc	r0
      000EA0 E6               [12] 3090 	mov	a,@r0
      000EA1 C0 E0            [24] 3091 	push	acc
      000EA3 8A 82            [24] 3092 	mov	dpl,r2
      000EA5 8B 83            [24] 3093 	mov	dph,r3
      000EA7 8C F0            [24] 3094 	mov	b,r4
      000EA9 12r00r00         [24] 3095 	lcall	_stack_push
      000EAC E5 81            [12] 3096 	mov	a,sp
      000EAE 24 FC            [12] 3097 	add	a,#0xfc
      000EB0 F5 81            [12] 3098 	mov	sp,a
                                   3099 ;	calc.c:200: break;
      000EB2 02r19r8A         [24] 3100 	ljmp	00196$
                                   3101 ;	calc.c:201: case '*':
      000EB5                       3102 00135$:
                                   3103 ;	calc.c:202: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      000EB5 E5*00            [12] 3104 	mov	a,_bp
      000EB7 24 0F            [12] 3105 	add	a,#0x0f
      000EB9 FF               [12] 3106 	mov	r7,a
      000EBA 7E 00            [12] 3107 	mov	r6,#0x00
      000EBC 7D 40            [12] 3108 	mov	r5,#0x40
      000EBE E5*00            [12] 3109 	mov	a,_bp
      000EC0 24 0C            [12] 3110 	add	a,#0x0c
      000EC2 F8               [12] 3111 	mov	r0,a
      000EC3 74 09            [12] 3112 	mov	a,#0x09
      000EC5 26               [12] 3113 	add	a,@r0
      000EC6 FA               [12] 3114 	mov	r2,a
      000EC7 E4               [12] 3115 	clr	a
      000EC8 08               [12] 3116 	inc	r0
      000EC9 36               [12] 3117 	addc	a,@r0
      000ECA FB               [12] 3118 	mov	r3,a
      000ECB 08               [12] 3119 	inc	r0
      000ECC 86 04            [24] 3120 	mov	ar4,@r0
      000ECE C0 07            [24] 3121 	push	ar7
      000ED0 C0 06            [24] 3122 	push	ar6
      000ED2 C0 05            [24] 3123 	push	ar5
      000ED4 8A 82            [24] 3124 	mov	dpl,r2
      000ED6 8B 83            [24] 3125 	mov	dph,r3
      000ED8 8C F0            [24] 3126 	mov	b,r4
      000EDA 12r00r00         [24] 3127 	lcall	_stack_pop
      000EDD AB 82            [24] 3128 	mov	r3,dpl
      000EDF AC 83            [24] 3129 	mov	r4,dph
      000EE1 15 81            [12] 3130 	dec	sp
      000EE3 15 81            [12] 3131 	dec	sp
      000EE5 15 81            [12] 3132 	dec	sp
      000EE7 EB               [12] 3133 	mov	a,r3
      000EE8 4C               [12] 3134 	orl	a,r4
      000EE9 70 25            [24] 3135 	jnz	00140$
      000EEB 7Fr38            [12] 3136 	mov	r7,#___str_8
      000EED 7Es00            [12] 3137 	mov	r6,#(___str_8 >> 8)
      000EEF 7D 80            [12] 3138 	mov	r5,#0x80
                                   3139 ;	calc.c:50: return;
      000EF1                       3140 00321$:
                                   3141 ;	calc.c:48: for (; *s; s++) putchar(*s);
      000EF1 8F 82            [24] 3142 	mov	dpl,r7
      000EF3 8E 83            [24] 3143 	mov	dph,r6
      000EF5 8D F0            [24] 3144 	mov	b,r5
      000EF7 12r00r00         [24] 3145 	lcall	__gptrget
      000EFA FC               [12] 3146 	mov	r4,a
      000EFB 70 03            [24] 3147 	jnz	00920$
      000EFD 02r19r8A         [24] 3148 	ljmp	00196$
      000F00                       3149 00920$:
      000F00 7B 00            [12] 3150 	mov	r3,#0x00
      000F02 8C 82            [24] 3151 	mov	dpl,r4
      000F04 8B 83            [24] 3152 	mov	dph,r3
      000F06 12r00r00         [24] 3153 	lcall	_putchar
      000F09 0F               [12] 3154 	inc	r7
                                   3155 ;	calc.c:202: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      000F0A BF 00 E4         [24] 3156 	cjne	r7,#0x00,00321$
      000F0D 0E               [12] 3157 	inc	r6
      000F0E 80 E1            [24] 3158 	sjmp	00321$
      000F10                       3159 00140$:
                                   3160 ;	calc.c:203: else if (!stack_pop(&ctx->s, &d1)) {
      000F10 E5*00            [12] 3161 	mov	a,_bp
      000F12 24 13            [12] 3162 	add	a,#0x13
      000F14 FF               [12] 3163 	mov	r7,a
      000F15 7E 00            [12] 3164 	mov	r6,#0x00
      000F17 7D 40            [12] 3165 	mov	r5,#0x40
      000F19 E5*00            [12] 3166 	mov	a,_bp
      000F1B 24 0C            [12] 3167 	add	a,#0x0c
      000F1D F8               [12] 3168 	mov	r0,a
      000F1E 74 09            [12] 3169 	mov	a,#0x09
      000F20 26               [12] 3170 	add	a,@r0
      000F21 FA               [12] 3171 	mov	r2,a
      000F22 E4               [12] 3172 	clr	a
      000F23 08               [12] 3173 	inc	r0
      000F24 36               [12] 3174 	addc	a,@r0
      000F25 FB               [12] 3175 	mov	r3,a
      000F26 08               [12] 3176 	inc	r0
      000F27 86 04            [24] 3177 	mov	ar4,@r0
      000F29 C0 07            [24] 3178 	push	ar7
      000F2B C0 06            [24] 3179 	push	ar6
      000F2D C0 05            [24] 3180 	push	ar5
      000F2F 8A 82            [24] 3181 	mov	dpl,r2
      000F31 8B 83            [24] 3182 	mov	dph,r3
      000F33 8C F0            [24] 3183 	mov	b,r4
      000F35 12r00r00         [24] 3184 	lcall	_stack_pop
      000F38 AB 82            [24] 3185 	mov	r3,dpl
      000F3A AC 83            [24] 3186 	mov	r4,dph
      000F3C 15 81            [12] 3187 	dec	sp
      000F3E 15 81            [12] 3188 	dec	sp
      000F40 15 81            [12] 3189 	dec	sp
      000F42 EB               [12] 3190 	mov	a,r3
      000F43 4C               [12] 3191 	orl	a,r4
      000F44 70 58            [24] 3192 	jnz	00137$
                                   3193 ;	calc.c:204: (void)stack_push(&ctx->s, d0);
      000F46 E5*00            [12] 3194 	mov	a,_bp
      000F48 24 0C            [12] 3195 	add	a,#0x0c
      000F4A F8               [12] 3196 	mov	r0,a
      000F4B 74 09            [12] 3197 	mov	a,#0x09
      000F4D 26               [12] 3198 	add	a,@r0
      000F4E FA               [12] 3199 	mov	r2,a
      000F4F E4               [12] 3200 	clr	a
      000F50 08               [12] 3201 	inc	r0
      000F51 36               [12] 3202 	addc	a,@r0
      000F52 FB               [12] 3203 	mov	r3,a
      000F53 08               [12] 3204 	inc	r0
      000F54 86 04            [24] 3205 	mov	ar4,@r0
      000F56 E5*00            [12] 3206 	mov	a,_bp
      000F58 24 0F            [12] 3207 	add	a,#0x0f
      000F5A F8               [12] 3208 	mov	r0,a
      000F5B E6               [12] 3209 	mov	a,@r0
      000F5C C0 E0            [24] 3210 	push	acc
      000F5E 08               [12] 3211 	inc	r0
      000F5F E6               [12] 3212 	mov	a,@r0
      000F60 C0 E0            [24] 3213 	push	acc
      000F62 08               [12] 3214 	inc	r0
      000F63 E6               [12] 3215 	mov	a,@r0
      000F64 C0 E0            [24] 3216 	push	acc
      000F66 08               [12] 3217 	inc	r0
      000F67 E6               [12] 3218 	mov	a,@r0
      000F68 C0 E0            [24] 3219 	push	acc
      000F6A 8A 82            [24] 3220 	mov	dpl,r2
      000F6C 8B 83            [24] 3221 	mov	dph,r3
      000F6E 8C F0            [24] 3222 	mov	b,r4
      000F70 12r00r00         [24] 3223 	lcall	_stack_push
      000F73 E5 81            [12] 3224 	mov	a,sp
      000F75 24 FC            [12] 3225 	add	a,#0xfc
      000F77 F5 81            [12] 3226 	mov	sp,a
                                   3227 ;	calc.c:205: printstr("\r\nstack underflow\r\n");
      000F79 7Fr38            [12] 3228 	mov	r7,#___str_8
      000F7B 7Es00            [12] 3229 	mov	r6,#(___str_8 >> 8)
      000F7D 7D 80            [12] 3230 	mov	r5,#0x80
                                   3231 ;	calc.c:50: return;
      000F7F                       3232 00324$:
                                   3233 ;	calc.c:48: for (; *s; s++) putchar(*s);
      000F7F 8F 82            [24] 3234 	mov	dpl,r7
      000F81 8E 83            [24] 3235 	mov	dph,r6
      000F83 8D F0            [24] 3236 	mov	b,r5
      000F85 12r00r00         [24] 3237 	lcall	__gptrget
      000F88 FC               [12] 3238 	mov	r4,a
      000F89 70 03            [24] 3239 	jnz	00923$
      000F8B 02r19r8A         [24] 3240 	ljmp	00196$
      000F8E                       3241 00923$:
      000F8E 7B 00            [12] 3242 	mov	r3,#0x00
      000F90 8C 82            [24] 3243 	mov	dpl,r4
      000F92 8B 83            [24] 3244 	mov	dph,r3
      000F94 12r00r00         [24] 3245 	lcall	_putchar
      000F97 0F               [12] 3246 	inc	r7
                                   3247 ;	calc.c:205: printstr("\r\nstack underflow\r\n");
      000F98 BF 00 E4         [24] 3248 	cjne	r7,#0x00,00324$
      000F9B 0E               [12] 3249 	inc	r6
      000F9C 80 E1            [24] 3250 	sjmp	00324$
      000F9E                       3251 00137$:
                                   3252 ;	calc.c:207: d1 *= d0;
      000F9E E5*00            [12] 3253 	mov	a,_bp
      000FA0 24 0F            [12] 3254 	add	a,#0x0f
      000FA2 F8               [12] 3255 	mov	r0,a
      000FA3 E6               [12] 3256 	mov	a,@r0
      000FA4 C0 E0            [24] 3257 	push	acc
      000FA6 08               [12] 3258 	inc	r0
      000FA7 E6               [12] 3259 	mov	a,@r0
      000FA8 C0 E0            [24] 3260 	push	acc
      000FAA 08               [12] 3261 	inc	r0
      000FAB E6               [12] 3262 	mov	a,@r0
      000FAC C0 E0            [24] 3263 	push	acc
      000FAE 08               [12] 3264 	inc	r0
      000FAF E6               [12] 3265 	mov	a,@r0
      000FB0 C0 E0            [24] 3266 	push	acc
      000FB2 E5*00            [12] 3267 	mov	a,_bp
      000FB4 24 13            [12] 3268 	add	a,#0x13
      000FB6 F8               [12] 3269 	mov	r0,a
      000FB7 86 82            [24] 3270 	mov	dpl,@r0
      000FB9 08               [12] 3271 	inc	r0
      000FBA 86 83            [24] 3272 	mov	dph,@r0
      000FBC 08               [12] 3273 	inc	r0
      000FBD 86 F0            [24] 3274 	mov	b,@r0
      000FBF 08               [12] 3275 	inc	r0
      000FC0 E6               [12] 3276 	mov	a,@r0
      000FC1 12r00r00         [24] 3277 	lcall	__mullong
      000FC4 AF 82            [24] 3278 	mov	r7,dpl
      000FC6 AE 83            [24] 3279 	mov	r6,dph
      000FC8 AD F0            [24] 3280 	mov	r5,b
      000FCA FC               [12] 3281 	mov	r4,a
      000FCB E5 81            [12] 3282 	mov	a,sp
      000FCD 24 FC            [12] 3283 	add	a,#0xfc
      000FCF F5 81            [12] 3284 	mov	sp,a
      000FD1 E5*00            [12] 3285 	mov	a,_bp
      000FD3 24 13            [12] 3286 	add	a,#0x13
      000FD5 F8               [12] 3287 	mov	r0,a
      000FD6 A6 07            [24] 3288 	mov	@r0,ar7
      000FD8 08               [12] 3289 	inc	r0
      000FD9 A6 06            [24] 3290 	mov	@r0,ar6
      000FDB 08               [12] 3291 	inc	r0
      000FDC A6 05            [24] 3292 	mov	@r0,ar5
      000FDE 08               [12] 3293 	inc	r0
      000FDF A6 04            [24] 3294 	mov	@r0,ar4
                                   3295 ;	calc.c:208: (void)stack_push(&ctx->s, d1);
      000FE1 E5*00            [12] 3296 	mov	a,_bp
      000FE3 24 0C            [12] 3297 	add	a,#0x0c
      000FE5 F8               [12] 3298 	mov	r0,a
      000FE6 74 09            [12] 3299 	mov	a,#0x09
      000FE8 26               [12] 3300 	add	a,@r0
      000FE9 FA               [12] 3301 	mov	r2,a
      000FEA E4               [12] 3302 	clr	a
      000FEB 08               [12] 3303 	inc	r0
      000FEC 36               [12] 3304 	addc	a,@r0
      000FED FB               [12] 3305 	mov	r3,a
      000FEE 08               [12] 3306 	inc	r0
      000FEF 86 04            [24] 3307 	mov	ar4,@r0
      000FF1 E5*00            [12] 3308 	mov	a,_bp
      000FF3 24 13            [12] 3309 	add	a,#0x13
      000FF5 F8               [12] 3310 	mov	r0,a
      000FF6 E6               [12] 3311 	mov	a,@r0
      000FF7 C0 E0            [24] 3312 	push	acc
      000FF9 08               [12] 3313 	inc	r0
      000FFA E6               [12] 3314 	mov	a,@r0
      000FFB C0 E0            [24] 3315 	push	acc
      000FFD 08               [12] 3316 	inc	r0
      000FFE E6               [12] 3317 	mov	a,@r0
      000FFF C0 E0            [24] 3318 	push	acc
      001001 08               [12] 3319 	inc	r0
      001002 E6               [12] 3320 	mov	a,@r0
      001003 C0 E0            [24] 3321 	push	acc
      001005 8A 82            [24] 3322 	mov	dpl,r2
      001007 8B 83            [24] 3323 	mov	dph,r3
      001009 8C F0            [24] 3324 	mov	b,r4
      00100B 12r00r00         [24] 3325 	lcall	_stack_push
      00100E E5 81            [12] 3326 	mov	a,sp
      001010 24 FC            [12] 3327 	add	a,#0xfc
      001012 F5 81            [12] 3328 	mov	sp,a
                                   3329 ;	calc.c:210: break;
      001014 02r19r8A         [24] 3330 	ljmp	00196$
                                   3331 ;	calc.c:212: case '\\':
      001017                       3332 00143$:
                                   3333 ;	calc.c:213: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      001017 C0 05            [24] 3334 	push	ar5
      001019 C0 06            [24] 3335 	push	ar6
      00101B C0 07            [24] 3336 	push	ar7
      00101D E5*00            [12] 3337 	mov	a,_bp
      00101F 24 0F            [12] 3338 	add	a,#0x0f
      001021 FC               [12] 3339 	mov	r4,a
      001022 7B 00            [12] 3340 	mov	r3,#0x00
      001024 7A 40            [12] 3341 	mov	r2,#0x40
      001026 E5*00            [12] 3342 	mov	a,_bp
      001028 24 0C            [12] 3343 	add	a,#0x0c
      00102A F8               [12] 3344 	mov	r0,a
      00102B 74 09            [12] 3345 	mov	a,#0x09
      00102D 26               [12] 3346 	add	a,@r0
      00102E FD               [12] 3347 	mov	r5,a
      00102F E4               [12] 3348 	clr	a
      001030 08               [12] 3349 	inc	r0
      001031 36               [12] 3350 	addc	a,@r0
      001032 FE               [12] 3351 	mov	r6,a
      001033 08               [12] 3352 	inc	r0
      001034 86 07            [24] 3353 	mov	ar7,@r0
      001036 C0 05            [24] 3354 	push	ar5
      001038 C0 04            [24] 3355 	push	ar4
      00103A C0 03            [24] 3356 	push	ar3
      00103C C0 02            [24] 3357 	push	ar2
      00103E 8D 82            [24] 3358 	mov	dpl,r5
      001040 8E 83            [24] 3359 	mov	dph,r6
      001042 8F F0            [24] 3360 	mov	b,r7
      001044 12r00r00         [24] 3361 	lcall	_stack_pop
      001047 AE 82            [24] 3362 	mov	r6,dpl
      001049 AF 83            [24] 3363 	mov	r7,dph
      00104B 15 81            [12] 3364 	dec	sp
      00104D 15 81            [12] 3365 	dec	sp
      00104F 15 81            [12] 3366 	dec	sp
      001051 D0 05            [24] 3367 	pop	ar5
      001053 EE               [12] 3368 	mov	a,r6
      001054 4F               [12] 3369 	orl	a,r7
      001055 D0 07            [24] 3370 	pop	ar7
      001057 D0 06            [24] 3371 	pop	ar6
      001059 D0 05            [24] 3372 	pop	ar5
      00105B 70 25            [24] 3373 	jnz	00154$
      00105D 7Fr38            [12] 3374 	mov	r7,#___str_8
      00105F 7Es00            [12] 3375 	mov	r6,#(___str_8 >> 8)
      001061 7D 80            [12] 3376 	mov	r5,#0x80
                                   3377 ;	calc.c:50: return;
      001063                       3378 00327$:
                                   3379 ;	calc.c:48: for (; *s; s++) putchar(*s);
      001063 8F 82            [24] 3380 	mov	dpl,r7
      001065 8E 83            [24] 3381 	mov	dph,r6
      001067 8D F0            [24] 3382 	mov	b,r5
      001069 12r00r00         [24] 3383 	lcall	__gptrget
      00106C FC               [12] 3384 	mov	r4,a
      00106D 70 03            [24] 3385 	jnz	00926$
      00106F 02r19r8A         [24] 3386 	ljmp	00196$
      001072                       3387 00926$:
      001072 7B 00            [12] 3388 	mov	r3,#0x00
      001074 8C 82            [24] 3389 	mov	dpl,r4
      001076 8B 83            [24] 3390 	mov	dph,r3
      001078 12r00r00         [24] 3391 	lcall	_putchar
      00107B 0F               [12] 3392 	inc	r7
                                   3393 ;	calc.c:213: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      00107C BF 00 E4         [24] 3394 	cjne	r7,#0x00,00327$
      00107F 0E               [12] 3395 	inc	r6
      001080 80 E1            [24] 3396 	sjmp	00327$
      001082                       3397 00154$:
                                   3398 ;	calc.c:214: else if (!stack_pop(&ctx->s, &d1)) {
      001082 C0 05            [24] 3399 	push	ar5
      001084 C0 06            [24] 3400 	push	ar6
      001086 C0 07            [24] 3401 	push	ar7
      001088 E5*00            [12] 3402 	mov	a,_bp
      00108A 24 13            [12] 3403 	add	a,#0x13
      00108C FC               [12] 3404 	mov	r4,a
      00108D 7B 00            [12] 3405 	mov	r3,#0x00
      00108F 7A 40            [12] 3406 	mov	r2,#0x40
      001091 E5*00            [12] 3407 	mov	a,_bp
      001093 24 0C            [12] 3408 	add	a,#0x0c
      001095 F8               [12] 3409 	mov	r0,a
      001096 74 09            [12] 3410 	mov	a,#0x09
      001098 26               [12] 3411 	add	a,@r0
      001099 FD               [12] 3412 	mov	r5,a
      00109A E4               [12] 3413 	clr	a
      00109B 08               [12] 3414 	inc	r0
      00109C 36               [12] 3415 	addc	a,@r0
      00109D FE               [12] 3416 	mov	r6,a
      00109E 08               [12] 3417 	inc	r0
      00109F 86 07            [24] 3418 	mov	ar7,@r0
      0010A1 C0 05            [24] 3419 	push	ar5
      0010A3 C0 04            [24] 3420 	push	ar4
      0010A5 C0 03            [24] 3421 	push	ar3
      0010A7 C0 02            [24] 3422 	push	ar2
      0010A9 8D 82            [24] 3423 	mov	dpl,r5
      0010AB 8E 83            [24] 3424 	mov	dph,r6
      0010AD 8F F0            [24] 3425 	mov	b,r7
      0010AF 12r00r00         [24] 3426 	lcall	_stack_pop
      0010B2 AE 82            [24] 3427 	mov	r6,dpl
      0010B4 AF 83            [24] 3428 	mov	r7,dph
      0010B6 15 81            [12] 3429 	dec	sp
      0010B8 15 81            [12] 3430 	dec	sp
      0010BA 15 81            [12] 3431 	dec	sp
      0010BC D0 05            [24] 3432 	pop	ar5
      0010BE EE               [12] 3433 	mov	a,r6
      0010BF 4F               [12] 3434 	orl	a,r7
      0010C0 D0 07            [24] 3435 	pop	ar7
      0010C2 D0 06            [24] 3436 	pop	ar6
      0010C4 D0 05            [24] 3437 	pop	ar5
      0010C6 70 58            [24] 3438 	jnz	00151$
                                   3439 ;	calc.c:215: (void)stack_push(&ctx->s, d0);
      0010C8 E5*00            [12] 3440 	mov	a,_bp
      0010CA 24 0C            [12] 3441 	add	a,#0x0c
      0010CC F8               [12] 3442 	mov	r0,a
      0010CD 74 09            [12] 3443 	mov	a,#0x09
      0010CF 26               [12] 3444 	add	a,@r0
      0010D0 FA               [12] 3445 	mov	r2,a
      0010D1 E4               [12] 3446 	clr	a
      0010D2 08               [12] 3447 	inc	r0
      0010D3 36               [12] 3448 	addc	a,@r0
      0010D4 FB               [12] 3449 	mov	r3,a
      0010D5 08               [12] 3450 	inc	r0
      0010D6 86 04            [24] 3451 	mov	ar4,@r0
      0010D8 E5*00            [12] 3452 	mov	a,_bp
      0010DA 24 0F            [12] 3453 	add	a,#0x0f
      0010DC F8               [12] 3454 	mov	r0,a
      0010DD E6               [12] 3455 	mov	a,@r0
      0010DE C0 E0            [24] 3456 	push	acc
      0010E0 08               [12] 3457 	inc	r0
      0010E1 E6               [12] 3458 	mov	a,@r0
      0010E2 C0 E0            [24] 3459 	push	acc
      0010E4 08               [12] 3460 	inc	r0
      0010E5 E6               [12] 3461 	mov	a,@r0
      0010E6 C0 E0            [24] 3462 	push	acc
      0010E8 08               [12] 3463 	inc	r0
      0010E9 E6               [12] 3464 	mov	a,@r0
      0010EA C0 E0            [24] 3465 	push	acc
      0010EC 8A 82            [24] 3466 	mov	dpl,r2
      0010EE 8B 83            [24] 3467 	mov	dph,r3
      0010F0 8C F0            [24] 3468 	mov	b,r4
      0010F2 12r00r00         [24] 3469 	lcall	_stack_push
      0010F5 E5 81            [12] 3470 	mov	a,sp
      0010F7 24 FC            [12] 3471 	add	a,#0xfc
      0010F9 F5 81            [12] 3472 	mov	sp,a
                                   3473 ;	calc.c:216: printstr("\r\nstack underflow\r\n");
      0010FB 7Fr38            [12] 3474 	mov	r7,#___str_8
      0010FD 7Es00            [12] 3475 	mov	r6,#(___str_8 >> 8)
      0010FF 7D 80            [12] 3476 	mov	r5,#0x80
                                   3477 ;	calc.c:50: return;
      001101                       3478 00330$:
                                   3479 ;	calc.c:48: for (; *s; s++) putchar(*s);
      001101 8F 82            [24] 3480 	mov	dpl,r7
      001103 8E 83            [24] 3481 	mov	dph,r6
      001105 8D F0            [24] 3482 	mov	b,r5
      001107 12r00r00         [24] 3483 	lcall	__gptrget
      00110A FC               [12] 3484 	mov	r4,a
      00110B 70 03            [24] 3485 	jnz	00929$
      00110D 02r19r8A         [24] 3486 	ljmp	00196$
      001110                       3487 00929$:
      001110 7B 00            [12] 3488 	mov	r3,#0x00
      001112 8C 82            [24] 3489 	mov	dpl,r4
      001114 8B 83            [24] 3490 	mov	dph,r3
      001116 12r00r00         [24] 3491 	lcall	_putchar
      001119 0F               [12] 3492 	inc	r7
                                   3493 ;	calc.c:216: printstr("\r\nstack underflow\r\n");
      00111A BF 00 E4         [24] 3494 	cjne	r7,#0x00,00330$
      00111D 0E               [12] 3495 	inc	r6
      00111E 80 E1            [24] 3496 	sjmp	00330$
      001120                       3497 00151$:
                                   3498 ;	calc.c:217: } else if (!d0) {
      001120 E5*00            [12] 3499 	mov	a,_bp
      001122 24 0F            [12] 3500 	add	a,#0x0f
      001124 F8               [12] 3501 	mov	r0,a
      001125 E6               [12] 3502 	mov	a,@r0
      001126 08               [12] 3503 	inc	r0
      001127 46               [12] 3504 	orl	a,@r0
      001128 08               [12] 3505 	inc	r0
      001129 46               [12] 3506 	orl	a,@r0
      00112A 08               [12] 3507 	inc	r0
      00112B 46               [12] 3508 	orl	a,@r0
      00112C 60 03            [24] 3509 	jz	00931$
      00112E 02r11rBC         [24] 3510 	ljmp	00148$
      001131                       3511 00931$:
                                   3512 ;	calc.c:218: (void)stack_push(&ctx->s, d1);
      001131 E5*00            [12] 3513 	mov	a,_bp
      001133 24 0C            [12] 3514 	add	a,#0x0c
      001135 F8               [12] 3515 	mov	r0,a
      001136 74 09            [12] 3516 	mov	a,#0x09
      001138 26               [12] 3517 	add	a,@r0
      001139 FA               [12] 3518 	mov	r2,a
      00113A E4               [12] 3519 	clr	a
      00113B 08               [12] 3520 	inc	r0
      00113C 36               [12] 3521 	addc	a,@r0
      00113D FB               [12] 3522 	mov	r3,a
      00113E 08               [12] 3523 	inc	r0
      00113F 86 04            [24] 3524 	mov	ar4,@r0
      001141 E5*00            [12] 3525 	mov	a,_bp
      001143 24 13            [12] 3526 	add	a,#0x13
      001145 F8               [12] 3527 	mov	r0,a
      001146 E6               [12] 3528 	mov	a,@r0
      001147 C0 E0            [24] 3529 	push	acc
      001149 08               [12] 3530 	inc	r0
      00114A E6               [12] 3531 	mov	a,@r0
      00114B C0 E0            [24] 3532 	push	acc
      00114D 08               [12] 3533 	inc	r0
      00114E E6               [12] 3534 	mov	a,@r0
      00114F C0 E0            [24] 3535 	push	acc
      001151 08               [12] 3536 	inc	r0
      001152 E6               [12] 3537 	mov	a,@r0
      001153 C0 E0            [24] 3538 	push	acc
      001155 8A 82            [24] 3539 	mov	dpl,r2
      001157 8B 83            [24] 3540 	mov	dph,r3
      001159 8C F0            [24] 3541 	mov	b,r4
      00115B 12r00r00         [24] 3542 	lcall	_stack_push
      00115E E5 81            [12] 3543 	mov	a,sp
      001160 24 FC            [12] 3544 	add	a,#0xfc
      001162 F5 81            [12] 3545 	mov	sp,a
                                   3546 ;	calc.c:219: (void)stack_push(&ctx->s, d0);			
      001164 E5*00            [12] 3547 	mov	a,_bp
      001166 24 0C            [12] 3548 	add	a,#0x0c
      001168 F8               [12] 3549 	mov	r0,a
      001169 74 09            [12] 3550 	mov	a,#0x09
      00116B 26               [12] 3551 	add	a,@r0
      00116C FA               [12] 3552 	mov	r2,a
      00116D E4               [12] 3553 	clr	a
      00116E 08               [12] 3554 	inc	r0
      00116F 36               [12] 3555 	addc	a,@r0
      001170 FB               [12] 3556 	mov	r3,a
      001171 08               [12] 3557 	inc	r0
      001172 86 04            [24] 3558 	mov	ar4,@r0
      001174 E5*00            [12] 3559 	mov	a,_bp
      001176 24 0F            [12] 3560 	add	a,#0x0f
      001178 F8               [12] 3561 	mov	r0,a
      001179 E6               [12] 3562 	mov	a,@r0
      00117A C0 E0            [24] 3563 	push	acc
      00117C 08               [12] 3564 	inc	r0
      00117D E6               [12] 3565 	mov	a,@r0
      00117E C0 E0            [24] 3566 	push	acc
      001180 08               [12] 3567 	inc	r0
      001181 E6               [12] 3568 	mov	a,@r0
      001182 C0 E0            [24] 3569 	push	acc
      001184 08               [12] 3570 	inc	r0
      001185 E6               [12] 3571 	mov	a,@r0
      001186 C0 E0            [24] 3572 	push	acc
      001188 8A 82            [24] 3573 	mov	dpl,r2
      00118A 8B 83            [24] 3574 	mov	dph,r3
      00118C 8C F0            [24] 3575 	mov	b,r4
      00118E 12r00r00         [24] 3576 	lcall	_stack_push
      001191 E5 81            [12] 3577 	mov	a,sp
      001193 24 FC            [12] 3578 	add	a,#0xfc
      001195 F5 81            [12] 3579 	mov	sp,a
                                   3580 ;	calc.c:220: printstr("\r\ndivision by zero\r\n");
      001197 7Fr4C            [12] 3581 	mov	r7,#___str_9
      001199 7Es00            [12] 3582 	mov	r6,#(___str_9 >> 8)
      00119B 7D 80            [12] 3583 	mov	r5,#0x80
                                   3584 ;	calc.c:50: return;
      00119D                       3585 00333$:
                                   3586 ;	calc.c:48: for (; *s; s++) putchar(*s);
      00119D 8F 82            [24] 3587 	mov	dpl,r7
      00119F 8E 83            [24] 3588 	mov	dph,r6
      0011A1 8D F0            [24] 3589 	mov	b,r5
      0011A3 12r00r00         [24] 3590 	lcall	__gptrget
      0011A6 FC               [12] 3591 	mov	r4,a
      0011A7 70 03            [24] 3592 	jnz	00932$
      0011A9 02r19r8A         [24] 3593 	ljmp	00196$
      0011AC                       3594 00932$:
      0011AC 7B 00            [12] 3595 	mov	r3,#0x00
      0011AE 8C 82            [24] 3596 	mov	dpl,r4
      0011B0 8B 83            [24] 3597 	mov	dph,r3
      0011B2 12r00r00         [24] 3598 	lcall	_putchar
      0011B5 0F               [12] 3599 	inc	r7
                                   3600 ;	calc.c:220: printstr("\r\ndivision by zero\r\n");
      0011B6 BF 00 E4         [24] 3601 	cjne	r7,#0x00,00333$
      0011B9 0E               [12] 3602 	inc	r6
      0011BA 80 E1            [24] 3603 	sjmp	00333$
      0011BC                       3604 00148$:
                                   3605 ;	calc.c:222: if (ctx->digit[0] == '/') d1 /= d0;
      0011BC 8D 82            [24] 3606 	mov	dpl,r5
      0011BE 8E 83            [24] 3607 	mov	dph,r6
      0011C0 8F F0            [24] 3608 	mov	b,r7
      0011C2 12r00r00         [24] 3609 	lcall	__gptrget
      0011C5 FC               [12] 3610 	mov	r4,a
      0011C6 BC 2F 45         [24] 3611 	cjne	r4,#0x2f,00145$
      0011C9 E5*00            [12] 3612 	mov	a,_bp
      0011CB 24 0F            [12] 3613 	add	a,#0x0f
      0011CD F8               [12] 3614 	mov	r0,a
      0011CE E6               [12] 3615 	mov	a,@r0
      0011CF C0 E0            [24] 3616 	push	acc
      0011D1 08               [12] 3617 	inc	r0
      0011D2 E6               [12] 3618 	mov	a,@r0
      0011D3 C0 E0            [24] 3619 	push	acc
      0011D5 08               [12] 3620 	inc	r0
      0011D6 E6               [12] 3621 	mov	a,@r0
      0011D7 C0 E0            [24] 3622 	push	acc
      0011D9 08               [12] 3623 	inc	r0
      0011DA E6               [12] 3624 	mov	a,@r0
      0011DB C0 E0            [24] 3625 	push	acc
      0011DD E5*00            [12] 3626 	mov	a,_bp
      0011DF 24 13            [12] 3627 	add	a,#0x13
      0011E1 F8               [12] 3628 	mov	r0,a
      0011E2 86 82            [24] 3629 	mov	dpl,@r0
      0011E4 08               [12] 3630 	inc	r0
      0011E5 86 83            [24] 3631 	mov	dph,@r0
      0011E7 08               [12] 3632 	inc	r0
      0011E8 86 F0            [24] 3633 	mov	b,@r0
      0011EA 08               [12] 3634 	inc	r0
      0011EB E6               [12] 3635 	mov	a,@r0
      0011EC 12r00r00         [24] 3636 	lcall	__divslong
      0011EF AF 82            [24] 3637 	mov	r7,dpl
      0011F1 AE 83            [24] 3638 	mov	r6,dph
      0011F3 AD F0            [24] 3639 	mov	r5,b
      0011F5 FC               [12] 3640 	mov	r4,a
      0011F6 E5 81            [12] 3641 	mov	a,sp
      0011F8 24 FC            [12] 3642 	add	a,#0xfc
      0011FA F5 81            [12] 3643 	mov	sp,a
      0011FC E5*00            [12] 3644 	mov	a,_bp
      0011FE 24 13            [12] 3645 	add	a,#0x13
      001200 F8               [12] 3646 	mov	r0,a
      001201 A6 07            [24] 3647 	mov	@r0,ar7
      001203 08               [12] 3648 	inc	r0
      001204 A6 06            [24] 3649 	mov	@r0,ar6
      001206 08               [12] 3650 	inc	r0
      001207 A6 05            [24] 3651 	mov	@r0,ar5
      001209 08               [12] 3652 	inc	r0
      00120A A6 04            [24] 3653 	mov	@r0,ar4
      00120C 80 63            [24] 3654 	sjmp	00146$
      00120E                       3655 00145$:
                                   3656 ;	calc.c:223: else d1 = (unsigned long)d1 / (unsigned long)d0;
      00120E E5*00            [12] 3657 	mov	a,_bp
      001210 24 13            [12] 3658 	add	a,#0x13
      001212 F8               [12] 3659 	mov	r0,a
      001213 86 07            [24] 3660 	mov	ar7,@r0
      001215 08               [12] 3661 	inc	r0
      001216 86 06            [24] 3662 	mov	ar6,@r0
      001218 08               [12] 3663 	inc	r0
      001219 86 05            [24] 3664 	mov	ar5,@r0
      00121B 08               [12] 3665 	inc	r0
      00121C 86 04            [24] 3666 	mov	ar4,@r0
      00121E E5*00            [12] 3667 	mov	a,_bp
      001220 24 0F            [12] 3668 	add	a,#0x0f
      001222 F8               [12] 3669 	mov	r0,a
      001223 E5*00            [12] 3670 	mov	a,_bp
      001225 24 08            [12] 3671 	add	a,#0x08
      001227 F9               [12] 3672 	mov	r1,a
      001228 E6               [12] 3673 	mov	a,@r0
      001229 F7               [12] 3674 	mov	@r1,a
      00122A 08               [12] 3675 	inc	r0
      00122B 09               [12] 3676 	inc	r1
      00122C E6               [12] 3677 	mov	a,@r0
      00122D F7               [12] 3678 	mov	@r1,a
      00122E 08               [12] 3679 	inc	r0
      00122F 09               [12] 3680 	inc	r1
      001230 E6               [12] 3681 	mov	a,@r0
      001231 F7               [12] 3682 	mov	@r1,a
      001232 08               [12] 3683 	inc	r0
      001233 09               [12] 3684 	inc	r1
      001234 E6               [12] 3685 	mov	a,@r0
      001235 F7               [12] 3686 	mov	@r1,a
      001236 E5*00            [12] 3687 	mov	a,_bp
      001238 24 08            [12] 3688 	add	a,#0x08
      00123A F8               [12] 3689 	mov	r0,a
      00123B E6               [12] 3690 	mov	a,@r0
      00123C C0 E0            [24] 3691 	push	acc
      00123E 08               [12] 3692 	inc	r0
      00123F E6               [12] 3693 	mov	a,@r0
      001240 C0 E0            [24] 3694 	push	acc
      001242 08               [12] 3695 	inc	r0
      001243 E6               [12] 3696 	mov	a,@r0
      001244 C0 E0            [24] 3697 	push	acc
      001246 08               [12] 3698 	inc	r0
      001247 E6               [12] 3699 	mov	a,@r0
      001248 C0 E0            [24] 3700 	push	acc
      00124A 8F 82            [24] 3701 	mov	dpl,r7
      00124C 8E 83            [24] 3702 	mov	dph,r6
      00124E 8D F0            [24] 3703 	mov	b,r5
      001250 EC               [12] 3704 	mov	a,r4
      001251 12r00r00         [24] 3705 	lcall	__divulong
      001254 AF 82            [24] 3706 	mov	r7,dpl
      001256 AE 83            [24] 3707 	mov	r6,dph
      001258 AD F0            [24] 3708 	mov	r5,b
      00125A FC               [12] 3709 	mov	r4,a
      00125B E5 81            [12] 3710 	mov	a,sp
      00125D 24 FC            [12] 3711 	add	a,#0xfc
      00125F F5 81            [12] 3712 	mov	sp,a
      001261 E5*00            [12] 3713 	mov	a,_bp
      001263 24 13            [12] 3714 	add	a,#0x13
      001265 F8               [12] 3715 	mov	r0,a
      001266 A6 07            [24] 3716 	mov	@r0,ar7
      001268 08               [12] 3717 	inc	r0
      001269 A6 06            [24] 3718 	mov	@r0,ar6
      00126B 08               [12] 3719 	inc	r0
      00126C A6 05            [24] 3720 	mov	@r0,ar5
      00126E 08               [12] 3721 	inc	r0
      00126F A6 04            [24] 3722 	mov	@r0,ar4
      001271                       3723 00146$:
                                   3724 ;	calc.c:224: (void)stack_push(&ctx->s, d1);
      001271 E5*00            [12] 3725 	mov	a,_bp
      001273 24 0C            [12] 3726 	add	a,#0x0c
      001275 F8               [12] 3727 	mov	r0,a
      001276 74 09            [12] 3728 	mov	a,#0x09
      001278 26               [12] 3729 	add	a,@r0
      001279 FA               [12] 3730 	mov	r2,a
      00127A E4               [12] 3731 	clr	a
      00127B 08               [12] 3732 	inc	r0
      00127C 36               [12] 3733 	addc	a,@r0
      00127D FB               [12] 3734 	mov	r3,a
      00127E 08               [12] 3735 	inc	r0
      00127F 86 04            [24] 3736 	mov	ar4,@r0
      001281 E5*00            [12] 3737 	mov	a,_bp
      001283 24 13            [12] 3738 	add	a,#0x13
      001285 F8               [12] 3739 	mov	r0,a
      001286 E6               [12] 3740 	mov	a,@r0
      001287 C0 E0            [24] 3741 	push	acc
      001289 08               [12] 3742 	inc	r0
      00128A E6               [12] 3743 	mov	a,@r0
      00128B C0 E0            [24] 3744 	push	acc
      00128D 08               [12] 3745 	inc	r0
      00128E E6               [12] 3746 	mov	a,@r0
      00128F C0 E0            [24] 3747 	push	acc
      001291 08               [12] 3748 	inc	r0
      001292 E6               [12] 3749 	mov	a,@r0
      001293 C0 E0            [24] 3750 	push	acc
      001295 8A 82            [24] 3751 	mov	dpl,r2
      001297 8B 83            [24] 3752 	mov	dph,r3
      001299 8C F0            [24] 3753 	mov	b,r4
      00129B 12r00r00         [24] 3754 	lcall	_stack_push
      00129E E5 81            [12] 3755 	mov	a,sp
      0012A0 24 FC            [12] 3756 	add	a,#0xfc
      0012A2 F5 81            [12] 3757 	mov	sp,a
                                   3758 ;	calc.c:226: break;
      0012A4 02r19r8A         [24] 3759 	ljmp	00196$
                                   3760 ;	calc.c:228: case '#':
      0012A7                       3761 00157$:
                                   3762 ;	calc.c:229: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      0012A7 C0 05            [24] 3763 	push	ar5
      0012A9 C0 06            [24] 3764 	push	ar6
      0012AB C0 07            [24] 3765 	push	ar7
      0012AD E5*00            [12] 3766 	mov	a,_bp
      0012AF 24 0F            [12] 3767 	add	a,#0x0f
      0012B1 FC               [12] 3768 	mov	r4,a
      0012B2 7B 00            [12] 3769 	mov	r3,#0x00
      0012B4 7A 40            [12] 3770 	mov	r2,#0x40
      0012B6 E5*00            [12] 3771 	mov	a,_bp
      0012B8 24 0C            [12] 3772 	add	a,#0x0c
      0012BA F8               [12] 3773 	mov	r0,a
      0012BB 74 09            [12] 3774 	mov	a,#0x09
      0012BD 26               [12] 3775 	add	a,@r0
      0012BE FD               [12] 3776 	mov	r5,a
      0012BF E4               [12] 3777 	clr	a
      0012C0 08               [12] 3778 	inc	r0
      0012C1 36               [12] 3779 	addc	a,@r0
      0012C2 FE               [12] 3780 	mov	r6,a
      0012C3 08               [12] 3781 	inc	r0
      0012C4 86 07            [24] 3782 	mov	ar7,@r0
      0012C6 C0 05            [24] 3783 	push	ar5
      0012C8 C0 04            [24] 3784 	push	ar4
      0012CA C0 03            [24] 3785 	push	ar3
      0012CC C0 02            [24] 3786 	push	ar2
      0012CE 8D 82            [24] 3787 	mov	dpl,r5
      0012D0 8E 83            [24] 3788 	mov	dph,r6
      0012D2 8F F0            [24] 3789 	mov	b,r7
      0012D4 12r00r00         [24] 3790 	lcall	_stack_pop
      0012D7 AE 82            [24] 3791 	mov	r6,dpl
      0012D9 AF 83            [24] 3792 	mov	r7,dph
      0012DB 15 81            [12] 3793 	dec	sp
      0012DD 15 81            [12] 3794 	dec	sp
      0012DF 15 81            [12] 3795 	dec	sp
      0012E1 D0 05            [24] 3796 	pop	ar5
      0012E3 EE               [12] 3797 	mov	a,r6
      0012E4 4F               [12] 3798 	orl	a,r7
      0012E5 D0 07            [24] 3799 	pop	ar7
      0012E7 D0 06            [24] 3800 	pop	ar6
      0012E9 D0 05            [24] 3801 	pop	ar5
      0012EB 70 25            [24] 3802 	jnz	00168$
      0012ED 7Fr38            [12] 3803 	mov	r7,#___str_8
      0012EF 7Es00            [12] 3804 	mov	r6,#(___str_8 >> 8)
      0012F1 7D 80            [12] 3805 	mov	r5,#0x80
                                   3806 ;	calc.c:50: return;
      0012F3                       3807 00336$:
                                   3808 ;	calc.c:48: for (; *s; s++) putchar(*s);
      0012F3 8F 82            [24] 3809 	mov	dpl,r7
      0012F5 8E 83            [24] 3810 	mov	dph,r6
      0012F7 8D F0            [24] 3811 	mov	b,r5
      0012F9 12r00r00         [24] 3812 	lcall	__gptrget
      0012FC FC               [12] 3813 	mov	r4,a
      0012FD 70 03            [24] 3814 	jnz	00937$
      0012FF 02r19r8A         [24] 3815 	ljmp	00196$
      001302                       3816 00937$:
      001302 7B 00            [12] 3817 	mov	r3,#0x00
      001304 8C 82            [24] 3818 	mov	dpl,r4
      001306 8B 83            [24] 3819 	mov	dph,r3
      001308 12r00r00         [24] 3820 	lcall	_putchar
      00130B 0F               [12] 3821 	inc	r7
                                   3822 ;	calc.c:229: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      00130C BF 00 E4         [24] 3823 	cjne	r7,#0x00,00336$
      00130F 0E               [12] 3824 	inc	r6
      001310 80 E1            [24] 3825 	sjmp	00336$
      001312                       3826 00168$:
                                   3827 ;	calc.c:230: else if (!stack_pop(&ctx->s, &d1)) {
      001312 C0 05            [24] 3828 	push	ar5
      001314 C0 06            [24] 3829 	push	ar6
      001316 C0 07            [24] 3830 	push	ar7
      001318 E5*00            [12] 3831 	mov	a,_bp
      00131A 24 13            [12] 3832 	add	a,#0x13
      00131C FC               [12] 3833 	mov	r4,a
      00131D 7B 00            [12] 3834 	mov	r3,#0x00
      00131F 7A 40            [12] 3835 	mov	r2,#0x40
      001321 E5*00            [12] 3836 	mov	a,_bp
      001323 24 0C            [12] 3837 	add	a,#0x0c
      001325 F8               [12] 3838 	mov	r0,a
      001326 74 09            [12] 3839 	mov	a,#0x09
      001328 26               [12] 3840 	add	a,@r0
      001329 FD               [12] 3841 	mov	r5,a
      00132A E4               [12] 3842 	clr	a
      00132B 08               [12] 3843 	inc	r0
      00132C 36               [12] 3844 	addc	a,@r0
      00132D FE               [12] 3845 	mov	r6,a
      00132E 08               [12] 3846 	inc	r0
      00132F 86 07            [24] 3847 	mov	ar7,@r0
      001331 C0 05            [24] 3848 	push	ar5
      001333 C0 04            [24] 3849 	push	ar4
      001335 C0 03            [24] 3850 	push	ar3
      001337 C0 02            [24] 3851 	push	ar2
      001339 8D 82            [24] 3852 	mov	dpl,r5
      00133B 8E 83            [24] 3853 	mov	dph,r6
      00133D 8F F0            [24] 3854 	mov	b,r7
      00133F 12r00r00         [24] 3855 	lcall	_stack_pop
      001342 AE 82            [24] 3856 	mov	r6,dpl
      001344 AF 83            [24] 3857 	mov	r7,dph
      001346 15 81            [12] 3858 	dec	sp
      001348 15 81            [12] 3859 	dec	sp
      00134A 15 81            [12] 3860 	dec	sp
      00134C D0 05            [24] 3861 	pop	ar5
      00134E EE               [12] 3862 	mov	a,r6
      00134F 4F               [12] 3863 	orl	a,r7
      001350 D0 07            [24] 3864 	pop	ar7
      001352 D0 06            [24] 3865 	pop	ar6
      001354 D0 05            [24] 3866 	pop	ar5
      001356 70 58            [24] 3867 	jnz	00165$
                                   3868 ;	calc.c:231: (void)stack_push(&ctx->s, d0);
      001358 E5*00            [12] 3869 	mov	a,_bp
      00135A 24 0C            [12] 3870 	add	a,#0x0c
      00135C F8               [12] 3871 	mov	r0,a
      00135D 74 09            [12] 3872 	mov	a,#0x09
      00135F 26               [12] 3873 	add	a,@r0
      001360 FA               [12] 3874 	mov	r2,a
      001361 E4               [12] 3875 	clr	a
      001362 08               [12] 3876 	inc	r0
      001363 36               [12] 3877 	addc	a,@r0
      001364 FB               [12] 3878 	mov	r3,a
      001365 08               [12] 3879 	inc	r0
      001366 86 04            [24] 3880 	mov	ar4,@r0
      001368 E5*00            [12] 3881 	mov	a,_bp
      00136A 24 0F            [12] 3882 	add	a,#0x0f
      00136C F8               [12] 3883 	mov	r0,a
      00136D E6               [12] 3884 	mov	a,@r0
      00136E C0 E0            [24] 3885 	push	acc
      001370 08               [12] 3886 	inc	r0
      001371 E6               [12] 3887 	mov	a,@r0
      001372 C0 E0            [24] 3888 	push	acc
      001374 08               [12] 3889 	inc	r0
      001375 E6               [12] 3890 	mov	a,@r0
      001376 C0 E0            [24] 3891 	push	acc
      001378 08               [12] 3892 	inc	r0
      001379 E6               [12] 3893 	mov	a,@r0
      00137A C0 E0            [24] 3894 	push	acc
      00137C 8A 82            [24] 3895 	mov	dpl,r2
      00137E 8B 83            [24] 3896 	mov	dph,r3
      001380 8C F0            [24] 3897 	mov	b,r4
      001382 12r00r00         [24] 3898 	lcall	_stack_push
      001385 E5 81            [12] 3899 	mov	a,sp
      001387 24 FC            [12] 3900 	add	a,#0xfc
      001389 F5 81            [12] 3901 	mov	sp,a
                                   3902 ;	calc.c:232: printstr("\r\nstack underflow\r\n");
      00138B 7Fr38            [12] 3903 	mov	r7,#___str_8
      00138D 7Es00            [12] 3904 	mov	r6,#(___str_8 >> 8)
      00138F 7D 80            [12] 3905 	mov	r5,#0x80
                                   3906 ;	calc.c:50: return;
      001391                       3907 00339$:
                                   3908 ;	calc.c:48: for (; *s; s++) putchar(*s);
      001391 8F 82            [24] 3909 	mov	dpl,r7
      001393 8E 83            [24] 3910 	mov	dph,r6
      001395 8D F0            [24] 3911 	mov	b,r5
      001397 12r00r00         [24] 3912 	lcall	__gptrget
      00139A FC               [12] 3913 	mov	r4,a
      00139B 70 03            [24] 3914 	jnz	00940$
      00139D 02r19r8A         [24] 3915 	ljmp	00196$
      0013A0                       3916 00940$:
      0013A0 7B 00            [12] 3917 	mov	r3,#0x00
      0013A2 8C 82            [24] 3918 	mov	dpl,r4
      0013A4 8B 83            [24] 3919 	mov	dph,r3
      0013A6 12r00r00         [24] 3920 	lcall	_putchar
      0013A9 0F               [12] 3921 	inc	r7
                                   3922 ;	calc.c:232: printstr("\r\nstack underflow\r\n");
      0013AA BF 00 E4         [24] 3923 	cjne	r7,#0x00,00339$
      0013AD 0E               [12] 3924 	inc	r6
      0013AE 80 E1            [24] 3925 	sjmp	00339$
      0013B0                       3926 00165$:
                                   3927 ;	calc.c:233: } else if (!d0) {
      0013B0 E5*00            [12] 3928 	mov	a,_bp
      0013B2 24 0F            [12] 3929 	add	a,#0x0f
      0013B4 F8               [12] 3930 	mov	r0,a
      0013B5 E6               [12] 3931 	mov	a,@r0
      0013B6 08               [12] 3932 	inc	r0
      0013B7 46               [12] 3933 	orl	a,@r0
      0013B8 08               [12] 3934 	inc	r0
      0013B9 46               [12] 3935 	orl	a,@r0
      0013BA 08               [12] 3936 	inc	r0
      0013BB 46               [12] 3937 	orl	a,@r0
      0013BC 60 03            [24] 3938 	jz	00942$
      0013BE 02r14r4C         [24] 3939 	ljmp	00162$
      0013C1                       3940 00942$:
                                   3941 ;	calc.c:234: (void)stack_push(&ctx->s, d1);
      0013C1 E5*00            [12] 3942 	mov	a,_bp
      0013C3 24 0C            [12] 3943 	add	a,#0x0c
      0013C5 F8               [12] 3944 	mov	r0,a
      0013C6 74 09            [12] 3945 	mov	a,#0x09
      0013C8 26               [12] 3946 	add	a,@r0
      0013C9 FA               [12] 3947 	mov	r2,a
      0013CA E4               [12] 3948 	clr	a
      0013CB 08               [12] 3949 	inc	r0
      0013CC 36               [12] 3950 	addc	a,@r0
      0013CD FB               [12] 3951 	mov	r3,a
      0013CE 08               [12] 3952 	inc	r0
      0013CF 86 04            [24] 3953 	mov	ar4,@r0
      0013D1 E5*00            [12] 3954 	mov	a,_bp
      0013D3 24 13            [12] 3955 	add	a,#0x13
      0013D5 F8               [12] 3956 	mov	r0,a
      0013D6 E6               [12] 3957 	mov	a,@r0
      0013D7 C0 E0            [24] 3958 	push	acc
      0013D9 08               [12] 3959 	inc	r0
      0013DA E6               [12] 3960 	mov	a,@r0
      0013DB C0 E0            [24] 3961 	push	acc
      0013DD 08               [12] 3962 	inc	r0
      0013DE E6               [12] 3963 	mov	a,@r0
      0013DF C0 E0            [24] 3964 	push	acc
      0013E1 08               [12] 3965 	inc	r0
      0013E2 E6               [12] 3966 	mov	a,@r0
      0013E3 C0 E0            [24] 3967 	push	acc
      0013E5 8A 82            [24] 3968 	mov	dpl,r2
      0013E7 8B 83            [24] 3969 	mov	dph,r3
      0013E9 8C F0            [24] 3970 	mov	b,r4
      0013EB 12r00r00         [24] 3971 	lcall	_stack_push
      0013EE E5 81            [12] 3972 	mov	a,sp
      0013F0 24 FC            [12] 3973 	add	a,#0xfc
      0013F2 F5 81            [12] 3974 	mov	sp,a
                                   3975 ;	calc.c:235: (void)stack_push(&ctx->s, d0);			
      0013F4 E5*00            [12] 3976 	mov	a,_bp
      0013F6 24 0C            [12] 3977 	add	a,#0x0c
      0013F8 F8               [12] 3978 	mov	r0,a
      0013F9 74 09            [12] 3979 	mov	a,#0x09
      0013FB 26               [12] 3980 	add	a,@r0
      0013FC FA               [12] 3981 	mov	r2,a
      0013FD E4               [12] 3982 	clr	a
      0013FE 08               [12] 3983 	inc	r0
      0013FF 36               [12] 3984 	addc	a,@r0
      001400 FB               [12] 3985 	mov	r3,a
      001401 08               [12] 3986 	inc	r0
      001402 86 04            [24] 3987 	mov	ar4,@r0
      001404 E5*00            [12] 3988 	mov	a,_bp
      001406 24 0F            [12] 3989 	add	a,#0x0f
      001408 F8               [12] 3990 	mov	r0,a
      001409 E6               [12] 3991 	mov	a,@r0
      00140A C0 E0            [24] 3992 	push	acc
      00140C 08               [12] 3993 	inc	r0
      00140D E6               [12] 3994 	mov	a,@r0
      00140E C0 E0            [24] 3995 	push	acc
      001410 08               [12] 3996 	inc	r0
      001411 E6               [12] 3997 	mov	a,@r0
      001412 C0 E0            [24] 3998 	push	acc
      001414 08               [12] 3999 	inc	r0
      001415 E6               [12] 4000 	mov	a,@r0
      001416 C0 E0            [24] 4001 	push	acc
      001418 8A 82            [24] 4002 	mov	dpl,r2
      00141A 8B 83            [24] 4003 	mov	dph,r3
      00141C 8C F0            [24] 4004 	mov	b,r4
      00141E 12r00r00         [24] 4005 	lcall	_stack_push
      001421 E5 81            [12] 4006 	mov	a,sp
      001423 24 FC            [12] 4007 	add	a,#0xfc
      001425 F5 81            [12] 4008 	mov	sp,a
                                   4009 ;	calc.c:236: printstr("\r\ndivision by zero\r\n");
      001427 7Fr4C            [12] 4010 	mov	r7,#___str_9
      001429 7Es00            [12] 4011 	mov	r6,#(___str_9 >> 8)
      00142B 7D 80            [12] 4012 	mov	r5,#0x80
                                   4013 ;	calc.c:50: return;
      00142D                       4014 00342$:
                                   4015 ;	calc.c:48: for (; *s; s++) putchar(*s);
      00142D 8F 82            [24] 4016 	mov	dpl,r7
      00142F 8E 83            [24] 4017 	mov	dph,r6
      001431 8D F0            [24] 4018 	mov	b,r5
      001433 12r00r00         [24] 4019 	lcall	__gptrget
      001436 FC               [12] 4020 	mov	r4,a
      001437 70 03            [24] 4021 	jnz	00943$
      001439 02r19r8A         [24] 4022 	ljmp	00196$
      00143C                       4023 00943$:
      00143C 7B 00            [12] 4024 	mov	r3,#0x00
      00143E 8C 82            [24] 4025 	mov	dpl,r4
      001440 8B 83            [24] 4026 	mov	dph,r3
      001442 12r00r00         [24] 4027 	lcall	_putchar
      001445 0F               [12] 4028 	inc	r7
                                   4029 ;	calc.c:236: printstr("\r\ndivision by zero\r\n");
      001446 BF 00 E4         [24] 4030 	cjne	r7,#0x00,00342$
      001449 0E               [12] 4031 	inc	r6
      00144A 80 E1            [24] 4032 	sjmp	00342$
      00144C                       4033 00162$:
                                   4034 ;	calc.c:238: if (ctx->digit[0] == '%') d1 %= d0;
      00144C 8D 82            [24] 4035 	mov	dpl,r5
      00144E 8E 83            [24] 4036 	mov	dph,r6
      001450 8F F0            [24] 4037 	mov	b,r7
      001452 12r00r00         [24] 4038 	lcall	__gptrget
      001455 FD               [12] 4039 	mov	r5,a
      001456 BD 25 45         [24] 4040 	cjne	r5,#0x25,00159$
      001459 E5*00            [12] 4041 	mov	a,_bp
      00145B 24 0F            [12] 4042 	add	a,#0x0f
      00145D F8               [12] 4043 	mov	r0,a
      00145E E6               [12] 4044 	mov	a,@r0
      00145F C0 E0            [24] 4045 	push	acc
      001461 08               [12] 4046 	inc	r0
      001462 E6               [12] 4047 	mov	a,@r0
      001463 C0 E0            [24] 4048 	push	acc
      001465 08               [12] 4049 	inc	r0
      001466 E6               [12] 4050 	mov	a,@r0
      001467 C0 E0            [24] 4051 	push	acc
      001469 08               [12] 4052 	inc	r0
      00146A E6               [12] 4053 	mov	a,@r0
      00146B C0 E0            [24] 4054 	push	acc
      00146D E5*00            [12] 4055 	mov	a,_bp
      00146F 24 13            [12] 4056 	add	a,#0x13
      001471 F8               [12] 4057 	mov	r0,a
      001472 86 82            [24] 4058 	mov	dpl,@r0
      001474 08               [12] 4059 	inc	r0
      001475 86 83            [24] 4060 	mov	dph,@r0
      001477 08               [12] 4061 	inc	r0
      001478 86 F0            [24] 4062 	mov	b,@r0
      00147A 08               [12] 4063 	inc	r0
      00147B E6               [12] 4064 	mov	a,@r0
      00147C 12r00r00         [24] 4065 	lcall	__modslong
      00147F AC 82            [24] 4066 	mov	r4,dpl
      001481 AD 83            [24] 4067 	mov	r5,dph
      001483 AE F0            [24] 4068 	mov	r6,b
      001485 FF               [12] 4069 	mov	r7,a
      001486 E5 81            [12] 4070 	mov	a,sp
      001488 24 FC            [12] 4071 	add	a,#0xfc
      00148A F5 81            [12] 4072 	mov	sp,a
      00148C E5*00            [12] 4073 	mov	a,_bp
      00148E 24 13            [12] 4074 	add	a,#0x13
      001490 F8               [12] 4075 	mov	r0,a
      001491 A6 04            [24] 4076 	mov	@r0,ar4
      001493 08               [12] 4077 	inc	r0
      001494 A6 05            [24] 4078 	mov	@r0,ar5
      001496 08               [12] 4079 	inc	r0
      001497 A6 06            [24] 4080 	mov	@r0,ar6
      001499 08               [12] 4081 	inc	r0
      00149A A6 07            [24] 4082 	mov	@r0,ar7
      00149C 80 5F            [24] 4083 	sjmp	00160$
      00149E                       4084 00159$:
                                   4085 ;	calc.c:239: else d1 = (unsigned long)d1 % (unsigned long)d0;
      00149E E5*00            [12] 4086 	mov	a,_bp
      0014A0 24 13            [12] 4087 	add	a,#0x13
      0014A2 F8               [12] 4088 	mov	r0,a
      0014A3 E5*00            [12] 4089 	mov	a,_bp
      0014A5 24 08            [12] 4090 	add	a,#0x08
      0014A7 F9               [12] 4091 	mov	r1,a
      0014A8 E6               [12] 4092 	mov	a,@r0
      0014A9 F7               [12] 4093 	mov	@r1,a
      0014AA 08               [12] 4094 	inc	r0
      0014AB 09               [12] 4095 	inc	r1
      0014AC E6               [12] 4096 	mov	a,@r0
      0014AD F7               [12] 4097 	mov	@r1,a
      0014AE 08               [12] 4098 	inc	r0
      0014AF 09               [12] 4099 	inc	r1
      0014B0 E6               [12] 4100 	mov	a,@r0
      0014B1 F7               [12] 4101 	mov	@r1,a
      0014B2 08               [12] 4102 	inc	r0
      0014B3 09               [12] 4103 	inc	r1
      0014B4 E6               [12] 4104 	mov	a,@r0
      0014B5 F7               [12] 4105 	mov	@r1,a
      0014B6 E5*00            [12] 4106 	mov	a,_bp
      0014B8 24 0F            [12] 4107 	add	a,#0x0f
      0014BA F8               [12] 4108 	mov	r0,a
      0014BB 86 02            [24] 4109 	mov	ar2,@r0
      0014BD 08               [12] 4110 	inc	r0
      0014BE 86 03            [24] 4111 	mov	ar3,@r0
      0014C0 08               [12] 4112 	inc	r0
      0014C1 86 06            [24] 4113 	mov	ar6,@r0
      0014C3 08               [12] 4114 	inc	r0
      0014C4 86 07            [24] 4115 	mov	ar7,@r0
      0014C6 C0 02            [24] 4116 	push	ar2
      0014C8 C0 03            [24] 4117 	push	ar3
      0014CA C0 06            [24] 4118 	push	ar6
      0014CC C0 07            [24] 4119 	push	ar7
      0014CE E5*00            [12] 4120 	mov	a,_bp
      0014D0 24 08            [12] 4121 	add	a,#0x08
      0014D2 F8               [12] 4122 	mov	r0,a
      0014D3 86 82            [24] 4123 	mov	dpl,@r0
      0014D5 08               [12] 4124 	inc	r0
      0014D6 86 83            [24] 4125 	mov	dph,@r0
      0014D8 08               [12] 4126 	inc	r0
      0014D9 86 F0            [24] 4127 	mov	b,@r0
      0014DB 08               [12] 4128 	inc	r0
      0014DC E6               [12] 4129 	mov	a,@r0
      0014DD 12r00r00         [24] 4130 	lcall	__modulong
      0014E0 AC 82            [24] 4131 	mov	r4,dpl
      0014E2 AD 83            [24] 4132 	mov	r5,dph
      0014E4 AE F0            [24] 4133 	mov	r6,b
      0014E6 FF               [12] 4134 	mov	r7,a
      0014E7 E5 81            [12] 4135 	mov	a,sp
      0014E9 24 FC            [12] 4136 	add	a,#0xfc
      0014EB F5 81            [12] 4137 	mov	sp,a
      0014ED E5*00            [12] 4138 	mov	a,_bp
      0014EF 24 13            [12] 4139 	add	a,#0x13
      0014F1 F8               [12] 4140 	mov	r0,a
      0014F2 A6 04            [24] 4141 	mov	@r0,ar4
      0014F4 08               [12] 4142 	inc	r0
      0014F5 A6 05            [24] 4143 	mov	@r0,ar5
      0014F7 08               [12] 4144 	inc	r0
      0014F8 A6 06            [24] 4145 	mov	@r0,ar6
      0014FA 08               [12] 4146 	inc	r0
      0014FB A6 07            [24] 4147 	mov	@r0,ar7
      0014FD                       4148 00160$:
                                   4149 ;	calc.c:240: (void)stack_push(&ctx->s, d1);
      0014FD E5*00            [12] 4150 	mov	a,_bp
      0014FF 24 0C            [12] 4151 	add	a,#0x0c
      001501 F8               [12] 4152 	mov	r0,a
      001502 74 09            [12] 4153 	mov	a,#0x09
      001504 26               [12] 4154 	add	a,@r0
      001505 FD               [12] 4155 	mov	r5,a
      001506 E4               [12] 4156 	clr	a
      001507 08               [12] 4157 	inc	r0
      001508 36               [12] 4158 	addc	a,@r0
      001509 FE               [12] 4159 	mov	r6,a
      00150A 08               [12] 4160 	inc	r0
      00150B 86 07            [24] 4161 	mov	ar7,@r0
      00150D E5*00            [12] 4162 	mov	a,_bp
      00150F 24 13            [12] 4163 	add	a,#0x13
      001511 F8               [12] 4164 	mov	r0,a
      001512 E6               [12] 4165 	mov	a,@r0
      001513 C0 E0            [24] 4166 	push	acc
      001515 08               [12] 4167 	inc	r0
      001516 E6               [12] 4168 	mov	a,@r0
      001517 C0 E0            [24] 4169 	push	acc
      001519 08               [12] 4170 	inc	r0
      00151A E6               [12] 4171 	mov	a,@r0
      00151B C0 E0            [24] 4172 	push	acc
      00151D 08               [12] 4173 	inc	r0
      00151E E6               [12] 4174 	mov	a,@r0
      00151F C0 E0            [24] 4175 	push	acc
      001521 8D 82            [24] 4176 	mov	dpl,r5
      001523 8E 83            [24] 4177 	mov	dph,r6
      001525 8F F0            [24] 4178 	mov	b,r7
      001527 12r00r00         [24] 4179 	lcall	_stack_push
      00152A E5 81            [12] 4180 	mov	a,sp
      00152C 24 FC            [12] 4181 	add	a,#0xfc
      00152E F5 81            [12] 4182 	mov	sp,a
                                   4183 ;	calc.c:242: break;
      001530 02r19r8A         [24] 4184 	ljmp	00196$
                                   4185 ;	calc.c:243: case '&':
      001533                       4186 00170$:
                                   4187 ;	calc.c:244: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      001533 E5*00            [12] 4188 	mov	a,_bp
      001535 24 0F            [12] 4189 	add	a,#0x0f
      001537 FF               [12] 4190 	mov	r7,a
      001538 7E 00            [12] 4191 	mov	r6,#0x00
      00153A 7D 40            [12] 4192 	mov	r5,#0x40
      00153C E5*00            [12] 4193 	mov	a,_bp
      00153E 24 0C            [12] 4194 	add	a,#0x0c
      001540 F8               [12] 4195 	mov	r0,a
      001541 74 09            [12] 4196 	mov	a,#0x09
      001543 26               [12] 4197 	add	a,@r0
      001544 FA               [12] 4198 	mov	r2,a
      001545 E4               [12] 4199 	clr	a
      001546 08               [12] 4200 	inc	r0
      001547 36               [12] 4201 	addc	a,@r0
      001548 FB               [12] 4202 	mov	r3,a
      001549 08               [12] 4203 	inc	r0
      00154A 86 04            [24] 4204 	mov	ar4,@r0
      00154C C0 07            [24] 4205 	push	ar7
      00154E C0 06            [24] 4206 	push	ar6
      001550 C0 05            [24] 4207 	push	ar5
      001552 8A 82            [24] 4208 	mov	dpl,r2
      001554 8B 83            [24] 4209 	mov	dph,r3
      001556 8C F0            [24] 4210 	mov	b,r4
      001558 12r00r00         [24] 4211 	lcall	_stack_pop
      00155B AE 82            [24] 4212 	mov	r6,dpl
      00155D AF 83            [24] 4213 	mov	r7,dph
      00155F 15 81            [12] 4214 	dec	sp
      001561 15 81            [12] 4215 	dec	sp
      001563 15 81            [12] 4216 	dec	sp
      001565 EE               [12] 4217 	mov	a,r6
      001566 4F               [12] 4218 	orl	a,r7
      001567 70 25            [24] 4219 	jnz	00175$
      001569 7Dr38            [12] 4220 	mov	r5,#___str_8
      00156B 7Es00            [12] 4221 	mov	r6,#(___str_8 >> 8)
      00156D 7F 80            [12] 4222 	mov	r7,#0x80
                                   4223 ;	calc.c:50: return;
      00156F                       4224 00345$:
                                   4225 ;	calc.c:48: for (; *s; s++) putchar(*s);
      00156F 8D 82            [24] 4226 	mov	dpl,r5
      001571 8E 83            [24] 4227 	mov	dph,r6
      001573 8F F0            [24] 4228 	mov	b,r7
      001575 12r00r00         [24] 4229 	lcall	__gptrget
      001578 FC               [12] 4230 	mov	r4,a
      001579 70 03            [24] 4231 	jnz	00948$
      00157B 02r19r8A         [24] 4232 	ljmp	00196$
      00157E                       4233 00948$:
      00157E 7B 00            [12] 4234 	mov	r3,#0x00
      001580 8C 82            [24] 4235 	mov	dpl,r4
      001582 8B 83            [24] 4236 	mov	dph,r3
      001584 12r00r00         [24] 4237 	lcall	_putchar
      001587 0D               [12] 4238 	inc	r5
                                   4239 ;	calc.c:244: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      001588 BD 00 E4         [24] 4240 	cjne	r5,#0x00,00345$
      00158B 0E               [12] 4241 	inc	r6
      00158C 80 E1            [24] 4242 	sjmp	00345$
      00158E                       4243 00175$:
                                   4244 ;	calc.c:245: else if (!stack_pop(&ctx->s, &d1)) {
      00158E E5*00            [12] 4245 	mov	a,_bp
      001590 24 13            [12] 4246 	add	a,#0x13
      001592 FF               [12] 4247 	mov	r7,a
      001593 7E 00            [12] 4248 	mov	r6,#0x00
      001595 7D 40            [12] 4249 	mov	r5,#0x40
      001597 E5*00            [12] 4250 	mov	a,_bp
      001599 24 0C            [12] 4251 	add	a,#0x0c
      00159B F8               [12] 4252 	mov	r0,a
      00159C 74 09            [12] 4253 	mov	a,#0x09
      00159E 26               [12] 4254 	add	a,@r0
      00159F FA               [12] 4255 	mov	r2,a
      0015A0 E4               [12] 4256 	clr	a
      0015A1 08               [12] 4257 	inc	r0
      0015A2 36               [12] 4258 	addc	a,@r0
      0015A3 FB               [12] 4259 	mov	r3,a
      0015A4 08               [12] 4260 	inc	r0
      0015A5 86 04            [24] 4261 	mov	ar4,@r0
      0015A7 C0 07            [24] 4262 	push	ar7
      0015A9 C0 06            [24] 4263 	push	ar6
      0015AB C0 05            [24] 4264 	push	ar5
      0015AD 8A 82            [24] 4265 	mov	dpl,r2
      0015AF 8B 83            [24] 4266 	mov	dph,r3
      0015B1 8C F0            [24] 4267 	mov	b,r4
      0015B3 12r00r00         [24] 4268 	lcall	_stack_pop
      0015B6 AE 82            [24] 4269 	mov	r6,dpl
      0015B8 AF 83            [24] 4270 	mov	r7,dph
      0015BA 15 81            [12] 4271 	dec	sp
      0015BC 15 81            [12] 4272 	dec	sp
      0015BE 15 81            [12] 4273 	dec	sp
      0015C0 EE               [12] 4274 	mov	a,r6
      0015C1 4F               [12] 4275 	orl	a,r7
      0015C2 70 58            [24] 4276 	jnz	00172$
                                   4277 ;	calc.c:246: (void)stack_push(&ctx->s, d0);
      0015C4 E5*00            [12] 4278 	mov	a,_bp
      0015C6 24 0C            [12] 4279 	add	a,#0x0c
      0015C8 F8               [12] 4280 	mov	r0,a
      0015C9 74 09            [12] 4281 	mov	a,#0x09
      0015CB 26               [12] 4282 	add	a,@r0
      0015CC FD               [12] 4283 	mov	r5,a
      0015CD E4               [12] 4284 	clr	a
      0015CE 08               [12] 4285 	inc	r0
      0015CF 36               [12] 4286 	addc	a,@r0
      0015D0 FE               [12] 4287 	mov	r6,a
      0015D1 08               [12] 4288 	inc	r0
      0015D2 86 07            [24] 4289 	mov	ar7,@r0
      0015D4 E5*00            [12] 4290 	mov	a,_bp
      0015D6 24 0F            [12] 4291 	add	a,#0x0f
      0015D8 F8               [12] 4292 	mov	r0,a
      0015D9 E6               [12] 4293 	mov	a,@r0
      0015DA C0 E0            [24] 4294 	push	acc
      0015DC 08               [12] 4295 	inc	r0
      0015DD E6               [12] 4296 	mov	a,@r0
      0015DE C0 E0            [24] 4297 	push	acc
      0015E0 08               [12] 4298 	inc	r0
      0015E1 E6               [12] 4299 	mov	a,@r0
      0015E2 C0 E0            [24] 4300 	push	acc
      0015E4 08               [12] 4301 	inc	r0
      0015E5 E6               [12] 4302 	mov	a,@r0
      0015E6 C0 E0            [24] 4303 	push	acc
      0015E8 8D 82            [24] 4304 	mov	dpl,r5
      0015EA 8E 83            [24] 4305 	mov	dph,r6
      0015EC 8F F0            [24] 4306 	mov	b,r7
      0015EE 12r00r00         [24] 4307 	lcall	_stack_push
      0015F1 E5 81            [12] 4308 	mov	a,sp
      0015F3 24 FC            [12] 4309 	add	a,#0xfc
      0015F5 F5 81            [12] 4310 	mov	sp,a
                                   4311 ;	calc.c:247: printstr("\r\nstack underflow\r\n");
      0015F7 7Dr38            [12] 4312 	mov	r5,#___str_8
      0015F9 7Es00            [12] 4313 	mov	r6,#(___str_8 >> 8)
      0015FB 7F 80            [12] 4314 	mov	r7,#0x80
                                   4315 ;	calc.c:50: return;
      0015FD                       4316 00348$:
                                   4317 ;	calc.c:48: for (; *s; s++) putchar(*s);
      0015FD 8D 82            [24] 4318 	mov	dpl,r5
      0015FF 8E 83            [24] 4319 	mov	dph,r6
      001601 8F F0            [24] 4320 	mov	b,r7
      001603 12r00r00         [24] 4321 	lcall	__gptrget
      001606 FC               [12] 4322 	mov	r4,a
      001607 70 03            [24] 4323 	jnz	00951$
      001609 02r19r8A         [24] 4324 	ljmp	00196$
      00160C                       4325 00951$:
      00160C 7B 00            [12] 4326 	mov	r3,#0x00
      00160E 8C 82            [24] 4327 	mov	dpl,r4
      001610 8B 83            [24] 4328 	mov	dph,r3
      001612 12r00r00         [24] 4329 	lcall	_putchar
      001615 0D               [12] 4330 	inc	r5
                                   4331 ;	calc.c:247: printstr("\r\nstack underflow\r\n");
      001616 BD 00 E4         [24] 4332 	cjne	r5,#0x00,00348$
      001619 0E               [12] 4333 	inc	r6
      00161A 80 E1            [24] 4334 	sjmp	00348$
      00161C                       4335 00172$:
                                   4336 ;	calc.c:249: d1 &= d0;
      00161C E5*00            [12] 4337 	mov	a,_bp
      00161E 24 13            [12] 4338 	add	a,#0x13
      001620 F8               [12] 4339 	mov	r0,a
      001621 E5*00            [12] 4340 	mov	a,_bp
      001623 24 0F            [12] 4341 	add	a,#0x0f
      001625 F9               [12] 4342 	mov	r1,a
      001626 E7               [12] 4343 	mov	a,@r1
      001627 56               [12] 4344 	anl	a,@r0
      001628 F6               [12] 4345 	mov	@r0,a
      001629 09               [12] 4346 	inc	r1
      00162A E7               [12] 4347 	mov	a,@r1
      00162B 08               [12] 4348 	inc	r0
      00162C 56               [12] 4349 	anl	a,@r0
      00162D F6               [12] 4350 	mov	@r0,a
      00162E 09               [12] 4351 	inc	r1
      00162F E7               [12] 4352 	mov	a,@r1
      001630 08               [12] 4353 	inc	r0
      001631 56               [12] 4354 	anl	a,@r0
      001632 F6               [12] 4355 	mov	@r0,a
      001633 09               [12] 4356 	inc	r1
      001634 E7               [12] 4357 	mov	a,@r1
      001635 08               [12] 4358 	inc	r0
      001636 56               [12] 4359 	anl	a,@r0
      001637 F6               [12] 4360 	mov	@r0,a
                                   4361 ;	calc.c:250: (void)stack_push(&ctx->s, d1);
      001638 E5*00            [12] 4362 	mov	a,_bp
      00163A 24 0C            [12] 4363 	add	a,#0x0c
      00163C F8               [12] 4364 	mov	r0,a
      00163D 74 09            [12] 4365 	mov	a,#0x09
      00163F 26               [12] 4366 	add	a,@r0
      001640 FD               [12] 4367 	mov	r5,a
      001641 E4               [12] 4368 	clr	a
      001642 08               [12] 4369 	inc	r0
      001643 36               [12] 4370 	addc	a,@r0
      001644 FE               [12] 4371 	mov	r6,a
      001645 08               [12] 4372 	inc	r0
      001646 86 07            [24] 4373 	mov	ar7,@r0
      001648 E5*00            [12] 4374 	mov	a,_bp
      00164A 24 13            [12] 4375 	add	a,#0x13
      00164C F8               [12] 4376 	mov	r0,a
      00164D E6               [12] 4377 	mov	a,@r0
      00164E C0 E0            [24] 4378 	push	acc
      001650 08               [12] 4379 	inc	r0
      001651 E6               [12] 4380 	mov	a,@r0
      001652 C0 E0            [24] 4381 	push	acc
      001654 08               [12] 4382 	inc	r0
      001655 E6               [12] 4383 	mov	a,@r0
      001656 C0 E0            [24] 4384 	push	acc
      001658 08               [12] 4385 	inc	r0
      001659 E6               [12] 4386 	mov	a,@r0
      00165A C0 E0            [24] 4387 	push	acc
      00165C 8D 82            [24] 4388 	mov	dpl,r5
      00165E 8E 83            [24] 4389 	mov	dph,r6
      001660 8F F0            [24] 4390 	mov	b,r7
      001662 12r00r00         [24] 4391 	lcall	_stack_push
      001665 E5 81            [12] 4392 	mov	a,sp
      001667 24 FC            [12] 4393 	add	a,#0xfc
      001669 F5 81            [12] 4394 	mov	sp,a
                                   4395 ;	calc.c:252: break;
      00166B 02r19r8A         [24] 4396 	ljmp	00196$
                                   4397 ;	calc.c:253: case '|':
      00166E                       4398 00177$:
                                   4399 ;	calc.c:254: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      00166E E5*00            [12] 4400 	mov	a,_bp
      001670 24 0F            [12] 4401 	add	a,#0x0f
      001672 FF               [12] 4402 	mov	r7,a
      001673 7E 00            [12] 4403 	mov	r6,#0x00
      001675 7D 40            [12] 4404 	mov	r5,#0x40
      001677 E5*00            [12] 4405 	mov	a,_bp
      001679 24 0C            [12] 4406 	add	a,#0x0c
      00167B F8               [12] 4407 	mov	r0,a
      00167C 74 09            [12] 4408 	mov	a,#0x09
      00167E 26               [12] 4409 	add	a,@r0
      00167F FA               [12] 4410 	mov	r2,a
      001680 E4               [12] 4411 	clr	a
      001681 08               [12] 4412 	inc	r0
      001682 36               [12] 4413 	addc	a,@r0
      001683 FB               [12] 4414 	mov	r3,a
      001684 08               [12] 4415 	inc	r0
      001685 86 04            [24] 4416 	mov	ar4,@r0
      001687 C0 07            [24] 4417 	push	ar7
      001689 C0 06            [24] 4418 	push	ar6
      00168B C0 05            [24] 4419 	push	ar5
      00168D 8A 82            [24] 4420 	mov	dpl,r2
      00168F 8B 83            [24] 4421 	mov	dph,r3
      001691 8C F0            [24] 4422 	mov	b,r4
      001693 12r00r00         [24] 4423 	lcall	_stack_pop
      001696 AE 82            [24] 4424 	mov	r6,dpl
      001698 AF 83            [24] 4425 	mov	r7,dph
      00169A 15 81            [12] 4426 	dec	sp
      00169C 15 81            [12] 4427 	dec	sp
      00169E 15 81            [12] 4428 	dec	sp
      0016A0 EE               [12] 4429 	mov	a,r6
      0016A1 4F               [12] 4430 	orl	a,r7
      0016A2 70 25            [24] 4431 	jnz	00182$
      0016A4 7Dr38            [12] 4432 	mov	r5,#___str_8
      0016A6 7Es00            [12] 4433 	mov	r6,#(___str_8 >> 8)
      0016A8 7F 80            [12] 4434 	mov	r7,#0x80
                                   4435 ;	calc.c:50: return;
      0016AA                       4436 00351$:
                                   4437 ;	calc.c:48: for (; *s; s++) putchar(*s);
      0016AA 8D 82            [24] 4438 	mov	dpl,r5
      0016AC 8E 83            [24] 4439 	mov	dph,r6
      0016AE 8F F0            [24] 4440 	mov	b,r7
      0016B0 12r00r00         [24] 4441 	lcall	__gptrget
      0016B3 FC               [12] 4442 	mov	r4,a
      0016B4 70 03            [24] 4443 	jnz	00954$
      0016B6 02r19r8A         [24] 4444 	ljmp	00196$
      0016B9                       4445 00954$:
      0016B9 7B 00            [12] 4446 	mov	r3,#0x00
      0016BB 8C 82            [24] 4447 	mov	dpl,r4
      0016BD 8B 83            [24] 4448 	mov	dph,r3
      0016BF 12r00r00         [24] 4449 	lcall	_putchar
      0016C2 0D               [12] 4450 	inc	r5
                                   4451 ;	calc.c:254: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      0016C3 BD 00 E4         [24] 4452 	cjne	r5,#0x00,00351$
      0016C6 0E               [12] 4453 	inc	r6
      0016C7 80 E1            [24] 4454 	sjmp	00351$
      0016C9                       4455 00182$:
                                   4456 ;	calc.c:255: else if (!stack_pop(&ctx->s, &d1)) {
      0016C9 E5*00            [12] 4457 	mov	a,_bp
      0016CB 24 13            [12] 4458 	add	a,#0x13
      0016CD FF               [12] 4459 	mov	r7,a
      0016CE 7E 00            [12] 4460 	mov	r6,#0x00
      0016D0 7D 40            [12] 4461 	mov	r5,#0x40
      0016D2 E5*00            [12] 4462 	mov	a,_bp
      0016D4 24 0C            [12] 4463 	add	a,#0x0c
      0016D6 F8               [12] 4464 	mov	r0,a
      0016D7 74 09            [12] 4465 	mov	a,#0x09
      0016D9 26               [12] 4466 	add	a,@r0
      0016DA FA               [12] 4467 	mov	r2,a
      0016DB E4               [12] 4468 	clr	a
      0016DC 08               [12] 4469 	inc	r0
      0016DD 36               [12] 4470 	addc	a,@r0
      0016DE FB               [12] 4471 	mov	r3,a
      0016DF 08               [12] 4472 	inc	r0
      0016E0 86 04            [24] 4473 	mov	ar4,@r0
      0016E2 C0 07            [24] 4474 	push	ar7
      0016E4 C0 06            [24] 4475 	push	ar6
      0016E6 C0 05            [24] 4476 	push	ar5
      0016E8 8A 82            [24] 4477 	mov	dpl,r2
      0016EA 8B 83            [24] 4478 	mov	dph,r3
      0016EC 8C F0            [24] 4479 	mov	b,r4
      0016EE 12r00r00         [24] 4480 	lcall	_stack_pop
      0016F1 AE 82            [24] 4481 	mov	r6,dpl
      0016F3 AF 83            [24] 4482 	mov	r7,dph
      0016F5 15 81            [12] 4483 	dec	sp
      0016F7 15 81            [12] 4484 	dec	sp
      0016F9 15 81            [12] 4485 	dec	sp
      0016FB EE               [12] 4486 	mov	a,r6
      0016FC 4F               [12] 4487 	orl	a,r7
      0016FD 70 58            [24] 4488 	jnz	00179$
                                   4489 ;	calc.c:256: (void)stack_push(&ctx->s, d0);
      0016FF E5*00            [12] 4490 	mov	a,_bp
      001701 24 0C            [12] 4491 	add	a,#0x0c
      001703 F8               [12] 4492 	mov	r0,a
      001704 74 09            [12] 4493 	mov	a,#0x09
      001706 26               [12] 4494 	add	a,@r0
      001707 FD               [12] 4495 	mov	r5,a
      001708 E4               [12] 4496 	clr	a
      001709 08               [12] 4497 	inc	r0
      00170A 36               [12] 4498 	addc	a,@r0
      00170B FE               [12] 4499 	mov	r6,a
      00170C 08               [12] 4500 	inc	r0
      00170D 86 07            [24] 4501 	mov	ar7,@r0
      00170F E5*00            [12] 4502 	mov	a,_bp
      001711 24 0F            [12] 4503 	add	a,#0x0f
      001713 F8               [12] 4504 	mov	r0,a
      001714 E6               [12] 4505 	mov	a,@r0
      001715 C0 E0            [24] 4506 	push	acc
      001717 08               [12] 4507 	inc	r0
      001718 E6               [12] 4508 	mov	a,@r0
      001719 C0 E0            [24] 4509 	push	acc
      00171B 08               [12] 4510 	inc	r0
      00171C E6               [12] 4511 	mov	a,@r0
      00171D C0 E0            [24] 4512 	push	acc
      00171F 08               [12] 4513 	inc	r0
      001720 E6               [12] 4514 	mov	a,@r0
      001721 C0 E0            [24] 4515 	push	acc
      001723 8D 82            [24] 4516 	mov	dpl,r5
      001725 8E 83            [24] 4517 	mov	dph,r6
      001727 8F F0            [24] 4518 	mov	b,r7
      001729 12r00r00         [24] 4519 	lcall	_stack_push
      00172C E5 81            [12] 4520 	mov	a,sp
      00172E 24 FC            [12] 4521 	add	a,#0xfc
      001730 F5 81            [12] 4522 	mov	sp,a
                                   4523 ;	calc.c:257: printstr("\r\nstack underflow\r\n");
      001732 7Dr38            [12] 4524 	mov	r5,#___str_8
      001734 7Es00            [12] 4525 	mov	r6,#(___str_8 >> 8)
      001736 7F 80            [12] 4526 	mov	r7,#0x80
                                   4527 ;	calc.c:50: return;
      001738                       4528 00354$:
                                   4529 ;	calc.c:48: for (; *s; s++) putchar(*s);
      001738 8D 82            [24] 4530 	mov	dpl,r5
      00173A 8E 83            [24] 4531 	mov	dph,r6
      00173C 8F F0            [24] 4532 	mov	b,r7
      00173E 12r00r00         [24] 4533 	lcall	__gptrget
      001741 FC               [12] 4534 	mov	r4,a
      001742 70 03            [24] 4535 	jnz	00957$
      001744 02r19r8A         [24] 4536 	ljmp	00196$
      001747                       4537 00957$:
      001747 7B 00            [12] 4538 	mov	r3,#0x00
      001749 8C 82            [24] 4539 	mov	dpl,r4
      00174B 8B 83            [24] 4540 	mov	dph,r3
      00174D 12r00r00         [24] 4541 	lcall	_putchar
      001750 0D               [12] 4542 	inc	r5
                                   4543 ;	calc.c:257: printstr("\r\nstack underflow\r\n");
      001751 BD 00 E4         [24] 4544 	cjne	r5,#0x00,00354$
      001754 0E               [12] 4545 	inc	r6
      001755 80 E1            [24] 4546 	sjmp	00354$
      001757                       4547 00179$:
                                   4548 ;	calc.c:259: d1 |= d0;
      001757 E5*00            [12] 4549 	mov	a,_bp
      001759 24 13            [12] 4550 	add	a,#0x13
      00175B F8               [12] 4551 	mov	r0,a
      00175C E5*00            [12] 4552 	mov	a,_bp
      00175E 24 0F            [12] 4553 	add	a,#0x0f
      001760 F9               [12] 4554 	mov	r1,a
      001761 E7               [12] 4555 	mov	a,@r1
      001762 46               [12] 4556 	orl	a,@r0
      001763 F6               [12] 4557 	mov	@r0,a
      001764 09               [12] 4558 	inc	r1
      001765 E7               [12] 4559 	mov	a,@r1
      001766 08               [12] 4560 	inc	r0
      001767 46               [12] 4561 	orl	a,@r0
      001768 F6               [12] 4562 	mov	@r0,a
      001769 09               [12] 4563 	inc	r1
      00176A E7               [12] 4564 	mov	a,@r1
      00176B 08               [12] 4565 	inc	r0
      00176C 46               [12] 4566 	orl	a,@r0
      00176D F6               [12] 4567 	mov	@r0,a
      00176E 09               [12] 4568 	inc	r1
      00176F E7               [12] 4569 	mov	a,@r1
      001770 08               [12] 4570 	inc	r0
      001771 46               [12] 4571 	orl	a,@r0
      001772 F6               [12] 4572 	mov	@r0,a
                                   4573 ;	calc.c:260: (void)stack_push(&ctx->s, d1);
      001773 E5*00            [12] 4574 	mov	a,_bp
      001775 24 0C            [12] 4575 	add	a,#0x0c
      001777 F8               [12] 4576 	mov	r0,a
      001778 74 09            [12] 4577 	mov	a,#0x09
      00177A 26               [12] 4578 	add	a,@r0
      00177B FD               [12] 4579 	mov	r5,a
      00177C E4               [12] 4580 	clr	a
      00177D 08               [12] 4581 	inc	r0
      00177E 36               [12] 4582 	addc	a,@r0
      00177F FE               [12] 4583 	mov	r6,a
      001780 08               [12] 4584 	inc	r0
      001781 86 07            [24] 4585 	mov	ar7,@r0
      001783 E5*00            [12] 4586 	mov	a,_bp
      001785 24 13            [12] 4587 	add	a,#0x13
      001787 F8               [12] 4588 	mov	r0,a
      001788 E6               [12] 4589 	mov	a,@r0
      001789 C0 E0            [24] 4590 	push	acc
      00178B 08               [12] 4591 	inc	r0
      00178C E6               [12] 4592 	mov	a,@r0
      00178D C0 E0            [24] 4593 	push	acc
      00178F 08               [12] 4594 	inc	r0
      001790 E6               [12] 4595 	mov	a,@r0
      001791 C0 E0            [24] 4596 	push	acc
      001793 08               [12] 4597 	inc	r0
      001794 E6               [12] 4598 	mov	a,@r0
      001795 C0 E0            [24] 4599 	push	acc
      001797 8D 82            [24] 4600 	mov	dpl,r5
      001799 8E 83            [24] 4601 	mov	dph,r6
      00179B 8F F0            [24] 4602 	mov	b,r7
      00179D 12r00r00         [24] 4603 	lcall	_stack_push
      0017A0 E5 81            [12] 4604 	mov	a,sp
      0017A2 24 FC            [12] 4605 	add	a,#0xfc
      0017A4 F5 81            [12] 4606 	mov	sp,a
                                   4607 ;	calc.c:262: break;
      0017A6 02r19r8A         [24] 4608 	ljmp	00196$
                                   4609 ;	calc.c:263: case '^':
      0017A9                       4610 00184$:
                                   4611 ;	calc.c:264: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      0017A9 E5*00            [12] 4612 	mov	a,_bp
      0017AB 24 0F            [12] 4613 	add	a,#0x0f
      0017AD FF               [12] 4614 	mov	r7,a
      0017AE 7E 00            [12] 4615 	mov	r6,#0x00
      0017B0 7D 40            [12] 4616 	mov	r5,#0x40
      0017B2 E5*00            [12] 4617 	mov	a,_bp
      0017B4 24 0C            [12] 4618 	add	a,#0x0c
      0017B6 F8               [12] 4619 	mov	r0,a
      0017B7 74 09            [12] 4620 	mov	a,#0x09
      0017B9 26               [12] 4621 	add	a,@r0
      0017BA FA               [12] 4622 	mov	r2,a
      0017BB E4               [12] 4623 	clr	a
      0017BC 08               [12] 4624 	inc	r0
      0017BD 36               [12] 4625 	addc	a,@r0
      0017BE FB               [12] 4626 	mov	r3,a
      0017BF 08               [12] 4627 	inc	r0
      0017C0 86 04            [24] 4628 	mov	ar4,@r0
      0017C2 C0 07            [24] 4629 	push	ar7
      0017C4 C0 06            [24] 4630 	push	ar6
      0017C6 C0 05            [24] 4631 	push	ar5
      0017C8 8A 82            [24] 4632 	mov	dpl,r2
      0017CA 8B 83            [24] 4633 	mov	dph,r3
      0017CC 8C F0            [24] 4634 	mov	b,r4
      0017CE 12r00r00         [24] 4635 	lcall	_stack_pop
      0017D1 AE 82            [24] 4636 	mov	r6,dpl
      0017D3 AF 83            [24] 4637 	mov	r7,dph
      0017D5 15 81            [12] 4638 	dec	sp
      0017D7 15 81            [12] 4639 	dec	sp
      0017D9 15 81            [12] 4640 	dec	sp
      0017DB EE               [12] 4641 	mov	a,r6
      0017DC 4F               [12] 4642 	orl	a,r7
      0017DD 70 25            [24] 4643 	jnz	00189$
      0017DF 7Dr38            [12] 4644 	mov	r5,#___str_8
      0017E1 7Es00            [12] 4645 	mov	r6,#(___str_8 >> 8)
      0017E3 7F 80            [12] 4646 	mov	r7,#0x80
                                   4647 ;	calc.c:50: return;
      0017E5                       4648 00357$:
                                   4649 ;	calc.c:48: for (; *s; s++) putchar(*s);
      0017E5 8D 82            [24] 4650 	mov	dpl,r5
      0017E7 8E 83            [24] 4651 	mov	dph,r6
      0017E9 8F F0            [24] 4652 	mov	b,r7
      0017EB 12r00r00         [24] 4653 	lcall	__gptrget
      0017EE FC               [12] 4654 	mov	r4,a
      0017EF 70 03            [24] 4655 	jnz	00960$
      0017F1 02r19r8A         [24] 4656 	ljmp	00196$
      0017F4                       4657 00960$:
      0017F4 7B 00            [12] 4658 	mov	r3,#0x00
      0017F6 8C 82            [24] 4659 	mov	dpl,r4
      0017F8 8B 83            [24] 4660 	mov	dph,r3
      0017FA 12r00r00         [24] 4661 	lcall	_putchar
      0017FD 0D               [12] 4662 	inc	r5
                                   4663 ;	calc.c:264: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      0017FE BD 00 E4         [24] 4664 	cjne	r5,#0x00,00357$
      001801 0E               [12] 4665 	inc	r6
      001802 80 E1            [24] 4666 	sjmp	00357$
      001804                       4667 00189$:
                                   4668 ;	calc.c:265: else if (!stack_pop(&ctx->s, &d1)) {
      001804 E5*00            [12] 4669 	mov	a,_bp
      001806 24 13            [12] 4670 	add	a,#0x13
      001808 FF               [12] 4671 	mov	r7,a
      001809 7E 00            [12] 4672 	mov	r6,#0x00
      00180B 7D 40            [12] 4673 	mov	r5,#0x40
      00180D E5*00            [12] 4674 	mov	a,_bp
      00180F 24 0C            [12] 4675 	add	a,#0x0c
      001811 F8               [12] 4676 	mov	r0,a
      001812 74 09            [12] 4677 	mov	a,#0x09
      001814 26               [12] 4678 	add	a,@r0
      001815 FA               [12] 4679 	mov	r2,a
      001816 E4               [12] 4680 	clr	a
      001817 08               [12] 4681 	inc	r0
      001818 36               [12] 4682 	addc	a,@r0
      001819 FB               [12] 4683 	mov	r3,a
      00181A 08               [12] 4684 	inc	r0
      00181B 86 04            [24] 4685 	mov	ar4,@r0
      00181D C0 07            [24] 4686 	push	ar7
      00181F C0 06            [24] 4687 	push	ar6
      001821 C0 05            [24] 4688 	push	ar5
      001823 8A 82            [24] 4689 	mov	dpl,r2
      001825 8B 83            [24] 4690 	mov	dph,r3
      001827 8C F0            [24] 4691 	mov	b,r4
      001829 12r00r00         [24] 4692 	lcall	_stack_pop
      00182C AE 82            [24] 4693 	mov	r6,dpl
      00182E AF 83            [24] 4694 	mov	r7,dph
      001830 15 81            [12] 4695 	dec	sp
      001832 15 81            [12] 4696 	dec	sp
      001834 15 81            [12] 4697 	dec	sp
      001836 EE               [12] 4698 	mov	a,r6
      001837 4F               [12] 4699 	orl	a,r7
      001838 70 58            [24] 4700 	jnz	00186$
                                   4701 ;	calc.c:266: (void)stack_push(&ctx->s, d0);
      00183A E5*00            [12] 4702 	mov	a,_bp
      00183C 24 0C            [12] 4703 	add	a,#0x0c
      00183E F8               [12] 4704 	mov	r0,a
      00183F 74 09            [12] 4705 	mov	a,#0x09
      001841 26               [12] 4706 	add	a,@r0
      001842 FD               [12] 4707 	mov	r5,a
      001843 E4               [12] 4708 	clr	a
      001844 08               [12] 4709 	inc	r0
      001845 36               [12] 4710 	addc	a,@r0
      001846 FE               [12] 4711 	mov	r6,a
      001847 08               [12] 4712 	inc	r0
      001848 86 07            [24] 4713 	mov	ar7,@r0
      00184A E5*00            [12] 4714 	mov	a,_bp
      00184C 24 0F            [12] 4715 	add	a,#0x0f
      00184E F8               [12] 4716 	mov	r0,a
      00184F E6               [12] 4717 	mov	a,@r0
      001850 C0 E0            [24] 4718 	push	acc
      001852 08               [12] 4719 	inc	r0
      001853 E6               [12] 4720 	mov	a,@r0
      001854 C0 E0            [24] 4721 	push	acc
      001856 08               [12] 4722 	inc	r0
      001857 E6               [12] 4723 	mov	a,@r0
      001858 C0 E0            [24] 4724 	push	acc
      00185A 08               [12] 4725 	inc	r0
      00185B E6               [12] 4726 	mov	a,@r0
      00185C C0 E0            [24] 4727 	push	acc
      00185E 8D 82            [24] 4728 	mov	dpl,r5
      001860 8E 83            [24] 4729 	mov	dph,r6
      001862 8F F0            [24] 4730 	mov	b,r7
      001864 12r00r00         [24] 4731 	lcall	_stack_push
      001867 E5 81            [12] 4732 	mov	a,sp
      001869 24 FC            [12] 4733 	add	a,#0xfc
      00186B F5 81            [12] 4734 	mov	sp,a
                                   4735 ;	calc.c:267: printstr("\r\nstack underflow\r\n");
      00186D 7Dr38            [12] 4736 	mov	r5,#___str_8
      00186F 7Es00            [12] 4737 	mov	r6,#(___str_8 >> 8)
      001871 7F 80            [12] 4738 	mov	r7,#0x80
                                   4739 ;	calc.c:50: return;
      001873                       4740 00360$:
                                   4741 ;	calc.c:48: for (; *s; s++) putchar(*s);
      001873 8D 82            [24] 4742 	mov	dpl,r5
      001875 8E 83            [24] 4743 	mov	dph,r6
      001877 8F F0            [24] 4744 	mov	b,r7
      001879 12r00r00         [24] 4745 	lcall	__gptrget
      00187C FC               [12] 4746 	mov	r4,a
      00187D 70 03            [24] 4747 	jnz	00963$
      00187F 02r19r8A         [24] 4748 	ljmp	00196$
      001882                       4749 00963$:
      001882 7B 00            [12] 4750 	mov	r3,#0x00
      001884 8C 82            [24] 4751 	mov	dpl,r4
      001886 8B 83            [24] 4752 	mov	dph,r3
      001888 12r00r00         [24] 4753 	lcall	_putchar
      00188B 0D               [12] 4754 	inc	r5
                                   4755 ;	calc.c:267: printstr("\r\nstack underflow\r\n");
      00188C BD 00 E4         [24] 4756 	cjne	r5,#0x00,00360$
      00188F 0E               [12] 4757 	inc	r6
      001890 80 E1            [24] 4758 	sjmp	00360$
      001892                       4759 00186$:
                                   4760 ;	calc.c:269: d1 ^= d0;
      001892 E5*00            [12] 4761 	mov	a,_bp
      001894 24 13            [12] 4762 	add	a,#0x13
      001896 F8               [12] 4763 	mov	r0,a
      001897 E5*00            [12] 4764 	mov	a,_bp
      001899 24 0F            [12] 4765 	add	a,#0x0f
      00189B F9               [12] 4766 	mov	r1,a
      00189C E7               [12] 4767 	mov	a,@r1
      00189D 66               [12] 4768 	xrl	a,@r0
      00189E F6               [12] 4769 	mov	@r0,a
      00189F 09               [12] 4770 	inc	r1
      0018A0 E7               [12] 4771 	mov	a,@r1
      0018A1 08               [12] 4772 	inc	r0
      0018A2 66               [12] 4773 	xrl	a,@r0
      0018A3 F6               [12] 4774 	mov	@r0,a
      0018A4 09               [12] 4775 	inc	r1
      0018A5 E7               [12] 4776 	mov	a,@r1
      0018A6 08               [12] 4777 	inc	r0
      0018A7 66               [12] 4778 	xrl	a,@r0
      0018A8 F6               [12] 4779 	mov	@r0,a
      0018A9 09               [12] 4780 	inc	r1
      0018AA E7               [12] 4781 	mov	a,@r1
      0018AB 08               [12] 4782 	inc	r0
      0018AC 66               [12] 4783 	xrl	a,@r0
      0018AD F6               [12] 4784 	mov	@r0,a
                                   4785 ;	calc.c:270: (void)stack_push(&ctx->s, d1);
      0018AE E5*00            [12] 4786 	mov	a,_bp
      0018B0 24 0C            [12] 4787 	add	a,#0x0c
      0018B2 F8               [12] 4788 	mov	r0,a
      0018B3 74 09            [12] 4789 	mov	a,#0x09
      0018B5 26               [12] 4790 	add	a,@r0
      0018B6 FD               [12] 4791 	mov	r5,a
      0018B7 E4               [12] 4792 	clr	a
      0018B8 08               [12] 4793 	inc	r0
      0018B9 36               [12] 4794 	addc	a,@r0
      0018BA FE               [12] 4795 	mov	r6,a
      0018BB 08               [12] 4796 	inc	r0
      0018BC 86 07            [24] 4797 	mov	ar7,@r0
      0018BE E5*00            [12] 4798 	mov	a,_bp
      0018C0 24 13            [12] 4799 	add	a,#0x13
      0018C2 F8               [12] 4800 	mov	r0,a
      0018C3 E6               [12] 4801 	mov	a,@r0
      0018C4 C0 E0            [24] 4802 	push	acc
      0018C6 08               [12] 4803 	inc	r0
      0018C7 E6               [12] 4804 	mov	a,@r0
      0018C8 C0 E0            [24] 4805 	push	acc
      0018CA 08               [12] 4806 	inc	r0
      0018CB E6               [12] 4807 	mov	a,@r0
      0018CC C0 E0            [24] 4808 	push	acc
      0018CE 08               [12] 4809 	inc	r0
      0018CF E6               [12] 4810 	mov	a,@r0
      0018D0 C0 E0            [24] 4811 	push	acc
      0018D2 8D 82            [24] 4812 	mov	dpl,r5
      0018D4 8E 83            [24] 4813 	mov	dph,r6
      0018D6 8F F0            [24] 4814 	mov	b,r7
      0018D8 12r00r00         [24] 4815 	lcall	_stack_push
      0018DB E5 81            [12] 4816 	mov	a,sp
      0018DD 24 FC            [12] 4817 	add	a,#0xfc
      0018DF F5 81            [12] 4818 	mov	sp,a
                                   4819 ;	calc.c:272: break;
      0018E1 02r19r8A         [24] 4820 	ljmp	00196$
                                   4821 ;	calc.c:273: case '~':
      0018E4                       4822 00191$:
                                   4823 ;	calc.c:274: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      0018E4 E5*00            [12] 4824 	mov	a,_bp
      0018E6 24 0F            [12] 4825 	add	a,#0x0f
      0018E8 FF               [12] 4826 	mov	r7,a
      0018E9 7E 00            [12] 4827 	mov	r6,#0x00
      0018EB 7D 40            [12] 4828 	mov	r5,#0x40
      0018ED E5*00            [12] 4829 	mov	a,_bp
      0018EF 24 0C            [12] 4830 	add	a,#0x0c
      0018F1 F8               [12] 4831 	mov	r0,a
      0018F2 74 09            [12] 4832 	mov	a,#0x09
      0018F4 26               [12] 4833 	add	a,@r0
      0018F5 FA               [12] 4834 	mov	r2,a
      0018F6 E4               [12] 4835 	clr	a
      0018F7 08               [12] 4836 	inc	r0
      0018F8 36               [12] 4837 	addc	a,@r0
      0018F9 FB               [12] 4838 	mov	r3,a
      0018FA 08               [12] 4839 	inc	r0
      0018FB 86 04            [24] 4840 	mov	ar4,@r0
      0018FD C0 07            [24] 4841 	push	ar7
      0018FF C0 06            [24] 4842 	push	ar6
      001901 C0 05            [24] 4843 	push	ar5
      001903 8A 82            [24] 4844 	mov	dpl,r2
      001905 8B 83            [24] 4845 	mov	dph,r3
      001907 8C F0            [24] 4846 	mov	b,r4
      001909 12r00r00         [24] 4847 	lcall	_stack_pop
      00190C AE 82            [24] 4848 	mov	r6,dpl
      00190E AF 83            [24] 4849 	mov	r7,dph
      001910 15 81            [12] 4850 	dec	sp
      001912 15 81            [12] 4851 	dec	sp
      001914 15 81            [12] 4852 	dec	sp
      001916 EE               [12] 4853 	mov	a,r6
      001917 4F               [12] 4854 	orl	a,r7
      001918 70 22            [24] 4855 	jnz	00193$
      00191A 7Dr38            [12] 4856 	mov	r5,#___str_8
      00191C 7Es00            [12] 4857 	mov	r6,#(___str_8 >> 8)
      00191E 7F 80            [12] 4858 	mov	r7,#0x80
                                   4859 ;	calc.c:50: return;
      001920                       4860 00363$:
                                   4861 ;	calc.c:48: for (; *s; s++) putchar(*s);
      001920 8D 82            [24] 4862 	mov	dpl,r5
      001922 8E 83            [24] 4863 	mov	dph,r6
      001924 8F F0            [24] 4864 	mov	b,r7
      001926 12r00r00         [24] 4865 	lcall	__gptrget
      001929 FC               [12] 4866 	mov	r4,a
      00192A 60 5E            [24] 4867 	jz	00196$
      00192C 7B 00            [12] 4868 	mov	r3,#0x00
      00192E 8C 82            [24] 4869 	mov	dpl,r4
      001930 8B 83            [24] 4870 	mov	dph,r3
      001932 12r00r00         [24] 4871 	lcall	_putchar
      001935 0D               [12] 4872 	inc	r5
                                   4873 ;	calc.c:274: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      001936 BD 00 E7         [24] 4874 	cjne	r5,#0x00,00363$
      001939 0E               [12] 4875 	inc	r6
      00193A 80 E4            [24] 4876 	sjmp	00363$
      00193C                       4877 00193$:
                                   4878 ;	calc.c:276: d0 = ~d0;
      00193C E5*00            [12] 4879 	mov	a,_bp
      00193E 24 0F            [12] 4880 	add	a,#0x0f
      001940 F8               [12] 4881 	mov	r0,a
      001941 E6               [12] 4882 	mov	a,@r0
      001942 F4               [12] 4883 	cpl	a
      001943 F6               [12] 4884 	mov	@r0,a
      001944 08               [12] 4885 	inc	r0
      001945 E6               [12] 4886 	mov	a,@r0
      001946 F4               [12] 4887 	cpl	a
      001947 F6               [12] 4888 	mov	@r0,a
      001948 08               [12] 4889 	inc	r0
      001949 E6               [12] 4890 	mov	a,@r0
      00194A F4               [12] 4891 	cpl	a
      00194B F6               [12] 4892 	mov	@r0,a
      00194C 08               [12] 4893 	inc	r0
      00194D E6               [12] 4894 	mov	a,@r0
      00194E F4               [12] 4895 	cpl	a
      00194F F6               [12] 4896 	mov	@r0,a
                                   4897 ;	calc.c:277: (void)stack_push(&ctx->s, d0);
      001950 E5*00            [12] 4898 	mov	a,_bp
      001952 24 0C            [12] 4899 	add	a,#0x0c
      001954 F8               [12] 4900 	mov	r0,a
      001955 74 09            [12] 4901 	mov	a,#0x09
      001957 26               [12] 4902 	add	a,@r0
      001958 FD               [12] 4903 	mov	r5,a
      001959 E4               [12] 4904 	clr	a
      00195A 08               [12] 4905 	inc	r0
      00195B 36               [12] 4906 	addc	a,@r0
      00195C FE               [12] 4907 	mov	r6,a
      00195D 08               [12] 4908 	inc	r0
      00195E 86 07            [24] 4909 	mov	ar7,@r0
      001960 E5*00            [12] 4910 	mov	a,_bp
      001962 24 0F            [12] 4911 	add	a,#0x0f
      001964 F8               [12] 4912 	mov	r0,a
      001965 E6               [12] 4913 	mov	a,@r0
      001966 C0 E0            [24] 4914 	push	acc
      001968 08               [12] 4915 	inc	r0
      001969 E6               [12] 4916 	mov	a,@r0
      00196A C0 E0            [24] 4917 	push	acc
      00196C 08               [12] 4918 	inc	r0
      00196D E6               [12] 4919 	mov	a,@r0
      00196E C0 E0            [24] 4920 	push	acc
      001970 08               [12] 4921 	inc	r0
      001971 E6               [12] 4922 	mov	a,@r0
      001972 C0 E0            [24] 4923 	push	acc
      001974 8D 82            [24] 4924 	mov	dpl,r5
      001976 8E 83            [24] 4925 	mov	dph,r6
      001978 8F F0            [24] 4926 	mov	b,r7
      00197A 12r00r00         [24] 4927 	lcall	_stack_push
      00197D E5 81            [12] 4928 	mov	a,sp
      00197F 24 FC            [12] 4929 	add	a,#0xfc
      001981 F5 81            [12] 4930 	mov	sp,a
                                   4931 ;	calc.c:279: break;
                                   4932 ;	calc.c:280: default:
      001983 80 05            [24] 4933 	sjmp	00196$
      001985                       4934 00195$:
                                   4935 ;	calc.c:281: return UNDEF;
      001985 90 80 00         [24] 4936 	mov	dptr,#0x8000
                                   4937 ;	calc.c:282: }
      001988 80 03            [24] 4938 	sjmp	00365$
      00198A                       4939 00196$:
                                   4940 ;	calc.c:284: return 1;
      00198A 90 00 01         [24] 4941 	mov	dptr,#0x0001
      00198D                       4942 00365$:
                                   4943 ;	calc.c:285: }
      00198D 85*00 81         [24] 4944 	mov	sp,_bp
      001990 D0*00            [24] 4945 	pop	_bp
      001992 22               [24] 4946 	ret
                                   4947 ;------------------------------------------------------------
                                   4948 ;Allocation info for local variables in function 'push_acc'
                                   4949 ;------------------------------------------------------------
                                   4950 ;delta                     Allocated to stack - _bp -5
                                   4951 ;_ctx                      Allocated to stack - _bp +5
                                   4952 ;ctx                       Allocated to registers r2 r3 r4 
                                   4953 ;__1310720085              Allocated to registers 
                                   4954 ;s                         Allocated to registers r5 r6 r7 
                                   4955 ;sloc0                     Allocated to stack - _bp +1
                                   4956 ;------------------------------------------------------------
                                   4957 ;	calc.c:287: static int push_acc(void *_ctx, delta_t *delta) __reentrant {
                                   4958 ;	-----------------------------------------
                                   4959 ;	 function push_acc
                                   4960 ;	-----------------------------------------
      001993                       4961 _push_acc:
      001993 C0*00            [24] 4962 	push	_bp
      001995 E5 81            [12] 4963 	mov	a,sp
      001997 F5*00            [12] 4964 	mov	_bp,a
      001999 24 07            [12] 4965 	add	a,#0x07
      00199B F5 81            [12] 4966 	mov	sp,a
      00199D C8               [12] 4967 	xch	a,r0
      00199E E5*00            [12] 4968 	mov	a,_bp
      0019A0 24 05            [12] 4969 	add	a,#0x05
      0019A2 C8               [12] 4970 	xch	a,r0
      0019A3 A6 82            [24] 4971 	mov	@r0,dpl
      0019A5 08               [12] 4972 	inc	r0
      0019A6 A6 83            [24] 4973 	mov	@r0,dph
      0019A8 08               [12] 4974 	inc	r0
      0019A9 A6 F0            [24] 4975 	mov	@r0,b
                                   4976 ;	calc.c:288: struct ctx *ctx = (struct ctx *)_ctx;
      0019AB E5*00            [12] 4977 	mov	a,_bp
      0019AD 24 05            [12] 4978 	add	a,#0x05
      0019AF F8               [12] 4979 	mov	r0,a
      0019B0 86 02            [24] 4980 	mov	ar2,@r0
      0019B2 08               [12] 4981 	inc	r0
      0019B3 86 03            [24] 4982 	mov	ar3,@r0
      0019B5 08               [12] 4983 	inc	r0
      0019B6 86 04            [24] 4984 	mov	ar4,@r0
                                   4985 ;	calc.c:292: ctx->acc_valid = 0;
      0019B8 74 06            [12] 4986 	mov	a,#0x06
      0019BA 2A               [12] 4987 	add	a,r2
      0019BB FD               [12] 4988 	mov	r5,a
      0019BC E4               [12] 4989 	clr	a
      0019BD 3B               [12] 4990 	addc	a,r3
      0019BE FE               [12] 4991 	mov	r6,a
      0019BF 8C 07            [24] 4992 	mov	ar7,r4
      0019C1 8D 82            [24] 4993 	mov	dpl,r5
      0019C3 8E 83            [24] 4994 	mov	dph,r6
      0019C5 8F F0            [24] 4995 	mov	b,r7
      0019C7 E4               [12] 4996 	clr	a
      0019C8 12r00r00         [24] 4997 	lcall	__gptrput
                                   4998 ;	calc.c:293: if (!stack_push(&ctx->s, ctx->acc)) printstr("\r\nstack overflow\r\n");
      0019CB 74 02            [12] 4999 	mov	a,#0x02
      0019CD 2A               [12] 5000 	add	a,r2
      0019CE FF               [12] 5001 	mov	r7,a
      0019CF E4               [12] 5002 	clr	a
      0019D0 3B               [12] 5003 	addc	a,r3
      0019D1 FD               [12] 5004 	mov	r5,a
      0019D2 8C 06            [24] 5005 	mov	ar6,r4
      0019D4 8F 82            [24] 5006 	mov	dpl,r7
      0019D6 8D 83            [24] 5007 	mov	dph,r5
      0019D8 8E F0            [24] 5008 	mov	b,r6
      0019DA A8*00            [24] 5009 	mov	r0,_bp
      0019DC 08               [12] 5010 	inc	r0
      0019DD 12r00r00         [24] 5011 	lcall	__gptrget
      0019E0 F6               [12] 5012 	mov	@r0,a
      0019E1 A3               [24] 5013 	inc	dptr
      0019E2 12r00r00         [24] 5014 	lcall	__gptrget
      0019E5 08               [12] 5015 	inc	r0
      0019E6 F6               [12] 5016 	mov	@r0,a
      0019E7 A3               [24] 5017 	inc	dptr
      0019E8 12r00r00         [24] 5018 	lcall	__gptrget
      0019EB 08               [12] 5019 	inc	r0
      0019EC F6               [12] 5020 	mov	@r0,a
      0019ED A3               [24] 5021 	inc	dptr
      0019EE 12r00r00         [24] 5022 	lcall	__gptrget
      0019F1 08               [12] 5023 	inc	r0
      0019F2 F6               [12] 5024 	mov	@r0,a
      0019F3 74 09            [12] 5025 	mov	a,#0x09
      0019F5 2A               [12] 5026 	add	a,r2
      0019F6 FA               [12] 5027 	mov	r2,a
      0019F7 E4               [12] 5028 	clr	a
      0019F8 3B               [12] 5029 	addc	a,r3
      0019F9 FB               [12] 5030 	mov	r3,a
      0019FA 8C 07            [24] 5031 	mov	ar7,r4
      0019FC A8*00            [24] 5032 	mov	r0,_bp
      0019FE 08               [12] 5033 	inc	r0
      0019FF E6               [12] 5034 	mov	a,@r0
      001A00 C0 E0            [24] 5035 	push	acc
      001A02 08               [12] 5036 	inc	r0
      001A03 E6               [12] 5037 	mov	a,@r0
      001A04 C0 E0            [24] 5038 	push	acc
      001A06 08               [12] 5039 	inc	r0
      001A07 E6               [12] 5040 	mov	a,@r0
      001A08 C0 E0            [24] 5041 	push	acc
      001A0A 08               [12] 5042 	inc	r0
      001A0B E6               [12] 5043 	mov	a,@r0
      001A0C C0 E0            [24] 5044 	push	acc
      001A0E 8A 82            [24] 5045 	mov	dpl,r2
      001A10 8B 83            [24] 5046 	mov	dph,r3
      001A12 8F F0            [24] 5047 	mov	b,r7
      001A14 12r00r00         [24] 5048 	lcall	_stack_push
      001A17 AE 82            [24] 5049 	mov	r6,dpl
      001A19 AF 83            [24] 5050 	mov	r7,dph
      001A1B E5 81            [12] 5051 	mov	a,sp
      001A1D 24 FC            [12] 5052 	add	a,#0xfc
      001A1F F5 81            [12] 5053 	mov	sp,a
      001A21 EE               [12] 5054 	mov	a,r6
      001A22 4F               [12] 5055 	orl	a,r7
      001A23 70 22            [24] 5056 	jnz	00102$
      001A25 7Dr61            [12] 5057 	mov	r5,#___str_10
      001A27 7Es00            [12] 5058 	mov	r6,#(___str_10 >> 8)
      001A29 7F 80            [12] 5059 	mov	r7,#0x80
                                   5060 ;	calc.c:50: return;
      001A2B                       5061 00109$:
                                   5062 ;	calc.c:48: for (; *s; s++) putchar(*s);
      001A2B 8D 82            [24] 5063 	mov	dpl,r5
      001A2D 8E 83            [24] 5064 	mov	dph,r6
      001A2F 8F F0            [24] 5065 	mov	b,r7
      001A31 12r00r00         [24] 5066 	lcall	__gptrget
      001A34 FC               [12] 5067 	mov	r4,a
      001A35 60 10            [24] 5068 	jz	00102$
      001A37 7B 00            [12] 5069 	mov	r3,#0x00
      001A39 8C 82            [24] 5070 	mov	dpl,r4
      001A3B 8B 83            [24] 5071 	mov	dph,r3
      001A3D 12r00r00         [24] 5072 	lcall	_putchar
      001A40 0D               [12] 5073 	inc	r5
                                   5074 ;	calc.c:293: if (!stack_push(&ctx->s, ctx->acc)) printstr("\r\nstack overflow\r\n");
      001A41 BD 00 E7         [24] 5075 	cjne	r5,#0x00,00109$
      001A44 0E               [12] 5076 	inc	r6
      001A45 80 E4            [24] 5077 	sjmp	00109$
      001A47                       5078 00102$:
                                   5079 ;	calc.c:295: if (delta->event == EVENT_OP) return operator(_ctx, delta);
      001A47 E5*00            [12] 5080 	mov	a,_bp
      001A49 24 FB            [12] 5081 	add	a,#0xfb
      001A4B F8               [12] 5082 	mov	r0,a
      001A4C 86 05            [24] 5083 	mov	ar5,@r0
      001A4E 08               [12] 5084 	inc	r0
      001A4F 86 06            [24] 5085 	mov	ar6,@r0
      001A51 08               [12] 5086 	inc	r0
      001A52 86 07            [24] 5087 	mov	ar7,@r0
      001A54 74 02            [12] 5088 	mov	a,#0x02
      001A56 2D               [12] 5089 	add	a,r5
      001A57 FA               [12] 5090 	mov	r2,a
      001A58 E4               [12] 5091 	clr	a
      001A59 3E               [12] 5092 	addc	a,r6
      001A5A FB               [12] 5093 	mov	r3,a
      001A5B 8F 04            [24] 5094 	mov	ar4,r7
      001A5D 8A 82            [24] 5095 	mov	dpl,r2
      001A5F 8B 83            [24] 5096 	mov	dph,r3
      001A61 8C F0            [24] 5097 	mov	b,r4
      001A63 12r00r00         [24] 5098 	lcall	__gptrget
      001A66 FA               [12] 5099 	mov	r2,a
      001A67 A3               [24] 5100 	inc	dptr
      001A68 12r00r00         [24] 5101 	lcall	__gptrget
      001A6B FB               [12] 5102 	mov	r3,a
      001A6C BA 02 29         [24] 5103 	cjne	r2,#0x02,00104$
      001A6F BB 00 26         [24] 5104 	cjne	r3,#0x00,00104$
      001A72 C0 05            [24] 5105 	push	ar5
      001A74 C0 06            [24] 5106 	push	ar6
      001A76 C0 07            [24] 5107 	push	ar7
      001A78 E5*00            [12] 5108 	mov	a,_bp
      001A7A 24 05            [12] 5109 	add	a,#0x05
      001A7C F8               [12] 5110 	mov	r0,a
      001A7D 86 82            [24] 5111 	mov	dpl,@r0
      001A7F 08               [12] 5112 	inc	r0
      001A80 86 83            [24] 5113 	mov	dph,@r0
      001A82 08               [12] 5114 	inc	r0
      001A83 86 F0            [24] 5115 	mov	b,@r0
      001A85 12r06r24         [24] 5116 	lcall	_operator
      001A88 AE 82            [24] 5117 	mov	r6,dpl
      001A8A AF 83            [24] 5118 	mov	r7,dph
      001A8C 15 81            [12] 5119 	dec	sp
      001A8E 15 81            [12] 5120 	dec	sp
      001A90 15 81            [12] 5121 	dec	sp
      001A92 8E 82            [24] 5122 	mov	dpl,r6
      001A94 8F 83            [24] 5123 	mov	dph,r7
      001A96 80 03            [24] 5124 	sjmp	00111$
      001A98                       5125 00104$:
                                   5126 ;	calc.c:296: else return 1;
      001A98 90 00 01         [24] 5127 	mov	dptr,#0x0001
      001A9B                       5128 00111$:
                                   5129 ;	calc.c:297: }
      001A9B 85*00 81         [24] 5130 	mov	sp,_bp
      001A9E D0*00            [24] 5131 	pop	_bp
      001AA0 22               [24] 5132 	ret
                                   5133 ;------------------------------------------------------------
                                   5134 ;Allocation info for local variables in function 'reset_acc'
                                   5135 ;------------------------------------------------------------
                                   5136 ;delta                     Allocated to stack - _bp -5
                                   5137 ;_ctx                      Allocated to registers r5 r6 r7 
                                   5138 ;ctx                       Allocated to registers r5 r6 r7 
                                   5139 ;------------------------------------------------------------
                                   5140 ;	calc.c:299: static int reset_acc(void *_ctx, delta_t *delta) __reentrant {
                                   5141 ;	-----------------------------------------
                                   5142 ;	 function reset_acc
                                   5143 ;	-----------------------------------------
      001AA1                       5144 _reset_acc:
      001AA1 C0*00            [24] 5145 	push	_bp
      001AA3 85 81*00         [24] 5146 	mov	_bp,sp
      001AA6 AD 82            [24] 5147 	mov	r5,dpl
      001AA8 AE 83            [24] 5148 	mov	r6,dph
      001AAA AF F0            [24] 5149 	mov	r7,b
                                   5150 ;	calc.c:300: struct ctx *ctx = (struct ctx *)_ctx;
                                   5151 ;	calc.c:302: if (delta->event == EVENT_RSTA_I) ctx->acc_valid = 0;
      001AAC E5*00            [12] 5152 	mov	a,_bp
      001AAE 24 FB            [12] 5153 	add	a,#0xfb
      001AB0 F8               [12] 5154 	mov	r0,a
      001AB1 86 02            [24] 5155 	mov	ar2,@r0
      001AB3 08               [12] 5156 	inc	r0
      001AB4 86 03            [24] 5157 	mov	ar3,@r0
      001AB6 08               [12] 5158 	inc	r0
      001AB7 86 04            [24] 5159 	mov	ar4,@r0
      001AB9 74 02            [12] 5160 	mov	a,#0x02
      001ABB 2A               [12] 5161 	add	a,r2
      001ABC FA               [12] 5162 	mov	r2,a
      001ABD E4               [12] 5163 	clr	a
      001ABE 3B               [12] 5164 	addc	a,r3
      001ABF FB               [12] 5165 	mov	r3,a
      001AC0 8A 82            [24] 5166 	mov	dpl,r2
      001AC2 8B 83            [24] 5167 	mov	dph,r3
      001AC4 8C F0            [24] 5168 	mov	b,r4
      001AC6 12r00r00         [24] 5169 	lcall	__gptrget
      001AC9 FA               [12] 5170 	mov	r2,a
      001ACA A3               [24] 5171 	inc	dptr
      001ACB 12r00r00         [24] 5172 	lcall	__gptrget
      001ACE FB               [12] 5173 	mov	r3,a
      001ACF BA 06 16         [24] 5174 	cjne	r2,#0x06,00102$
      001AD2 BB 00 13         [24] 5175 	cjne	r3,#0x00,00102$
      001AD5 74 06            [12] 5176 	mov	a,#0x06
      001AD7 2D               [12] 5177 	add	a,r5
      001AD8 FA               [12] 5178 	mov	r2,a
      001AD9 E4               [12] 5179 	clr	a
      001ADA 3E               [12] 5180 	addc	a,r6
      001ADB FB               [12] 5181 	mov	r3,a
      001ADC 8F 04            [24] 5182 	mov	ar4,r7
      001ADE 8A 82            [24] 5183 	mov	dpl,r2
      001AE0 8B 83            [24] 5184 	mov	dph,r3
      001AE2 8C F0            [24] 5185 	mov	b,r4
      001AE4 E4               [12] 5186 	clr	a
      001AE5 12r00r00         [24] 5187 	lcall	__gptrput
      001AE8                       5188 00102$:
                                   5189 ;	calc.c:303: ctx->acc = 0l;
      001AE8 74 02            [12] 5190 	mov	a,#0x02
      001AEA 2D               [12] 5191 	add	a,r5
      001AEB FD               [12] 5192 	mov	r5,a
      001AEC E4               [12] 5193 	clr	a
      001AED 3E               [12] 5194 	addc	a,r6
      001AEE FE               [12] 5195 	mov	r6,a
      001AEF 8D 82            [24] 5196 	mov	dpl,r5
      001AF1 8E 83            [24] 5197 	mov	dph,r6
      001AF3 8F F0            [24] 5198 	mov	b,r7
      001AF5 E4               [12] 5199 	clr	a
      001AF6 12r00r00         [24] 5200 	lcall	__gptrput
      001AF9 A3               [24] 5201 	inc	dptr
      001AFA 12r00r00         [24] 5202 	lcall	__gptrput
      001AFD A3               [24] 5203 	inc	dptr
      001AFE 12r00r00         [24] 5204 	lcall	__gptrput
      001B01 A3               [24] 5205 	inc	dptr
      001B02 12r00r00         [24] 5206 	lcall	__gptrput
                                   5207 ;	calc.c:305: return 1;
      001B05 90 00 01         [24] 5208 	mov	dptr,#0x0001
                                   5209 ;	calc.c:306: }
      001B08 D0*00            [24] 5210 	pop	_bp
      001B0A 22               [24] 5211 	ret
                                   5212 ;------------------------------------------------------------
                                   5213 ;Allocation info for local variables in function 'reset_base'
                                   5214 ;------------------------------------------------------------
                                   5215 ;delta                     Allocated to stack - _bp -5
                                   5216 ;_ctx                      Allocated to registers r5 r6 r7 
                                   5217 ;ctx                       Allocated to registers r5 r6 r7 
                                   5218 ;------------------------------------------------------------
                                   5219 ;	calc.c:308: static int reset_base(void *_ctx, delta_t *delta) __reentrant {
                                   5220 ;	-----------------------------------------
                                   5221 ;	 function reset_base
                                   5222 ;	-----------------------------------------
      001B0B                       5223 _reset_base:
      001B0B C0*00            [24] 5224 	push	_bp
      001B0D 85 81*00         [24] 5225 	mov	_bp,sp
      001B10 AD 82            [24] 5226 	mov	r5,dpl
      001B12 AE 83            [24] 5227 	mov	r6,dph
      001B14 AF F0            [24] 5228 	mov	r7,b
                                   5229 ;	calc.c:309: struct ctx *ctx = (struct ctx *)_ctx;
                                   5230 ;	calc.c:313: switch (ctx->digit[0]) {
      001B16 74 07            [12] 5231 	mov	a,#0x07
      001B18 2D               [12] 5232 	add	a,r5
      001B19 FA               [12] 5233 	mov	r2,a
      001B1A E4               [12] 5234 	clr	a
      001B1B 3E               [12] 5235 	addc	a,r6
      001B1C FB               [12] 5236 	mov	r3,a
      001B1D 8F 04            [24] 5237 	mov	ar4,r7
      001B1F 8A 82            [24] 5238 	mov	dpl,r2
      001B21 8B 83            [24] 5239 	mov	dph,r3
      001B23 8C F0            [24] 5240 	mov	b,r4
      001B25 12r00r00         [24] 5241 	lcall	__gptrget
      001B28 FC               [12] 5242 	mov	r4,a
      001B29 BC 48 02         [24] 5243 	cjne	r4,#0x48,00124$
      001B2C 80 0F            [24] 5244 	sjmp	00101$
      001B2E                       5245 00124$:
      001B2E BC 4F 02         [24] 5246 	cjne	r4,#0x4f,00125$
      001B31 80 2E            [24] 5247 	sjmp	00103$
      001B33                       5248 00125$:
      001B33 BC 68 02         [24] 5249 	cjne	r4,#0x68,00126$
      001B36 80 17            [24] 5250 	sjmp	00102$
      001B38                       5251 00126$:
                                   5252 ;	calc.c:314: case 'H':
      001B38 BC 6F 48         [24] 5253 	cjne	r4,#0x6f,00105$
      001B3B 80 36            [24] 5254 	sjmp	00104$
      001B3D                       5255 00101$:
                                   5256 ;	calc.c:315: ctx->base = 16;
      001B3D 8D 82            [24] 5257 	mov	dpl,r5
      001B3F 8E 83            [24] 5258 	mov	dph,r6
      001B41 8F F0            [24] 5259 	mov	b,r7
      001B43 74 10            [12] 5260 	mov	a,#0x10
      001B45 12r00r00         [24] 5261 	lcall	__gptrput
      001B48 A3               [24] 5262 	inc	dptr
      001B49 E4               [12] 5263 	clr	a
      001B4A 12r00r00         [24] 5264 	lcall	__gptrput
                                   5265 ;	calc.c:316: break;
                                   5266 ;	calc.c:317: case 'h':
      001B4D 80 34            [24] 5267 	sjmp	00105$
      001B4F                       5268 00102$:
                                   5269 ;	calc.c:318: ctx->base = 10;
      001B4F 8D 82            [24] 5270 	mov	dpl,r5
      001B51 8E 83            [24] 5271 	mov	dph,r6
      001B53 8F F0            [24] 5272 	mov	b,r7
      001B55 74 0A            [12] 5273 	mov	a,#0x0a
      001B57 12r00r00         [24] 5274 	lcall	__gptrput
      001B5A A3               [24] 5275 	inc	dptr
      001B5B E4               [12] 5276 	clr	a
      001B5C 12r00r00         [24] 5277 	lcall	__gptrput
                                   5278 ;	calc.c:319: break;
                                   5279 ;	calc.c:320: case 'O':
      001B5F 80 22            [24] 5280 	sjmp	00105$
      001B61                       5281 00103$:
                                   5282 ;	calc.c:321: ctx->base = 8;
      001B61 8D 82            [24] 5283 	mov	dpl,r5
      001B63 8E 83            [24] 5284 	mov	dph,r6
      001B65 8F F0            [24] 5285 	mov	b,r7
      001B67 74 08            [12] 5286 	mov	a,#0x08
      001B69 12r00r00         [24] 5287 	lcall	__gptrput
      001B6C A3               [24] 5288 	inc	dptr
      001B6D E4               [12] 5289 	clr	a
      001B6E 12r00r00         [24] 5290 	lcall	__gptrput
                                   5291 ;	calc.c:322: break;
                                   5292 ;	calc.c:323: case 'o':
      001B71 80 10            [24] 5293 	sjmp	00105$
      001B73                       5294 00104$:
                                   5295 ;	calc.c:324: ctx->base = 2;
      001B73 8D 82            [24] 5296 	mov	dpl,r5
      001B75 8E 83            [24] 5297 	mov	dph,r6
      001B77 8F F0            [24] 5298 	mov	b,r7
      001B79 74 02            [12] 5299 	mov	a,#0x02
      001B7B 12r00r00         [24] 5300 	lcall	__gptrput
      001B7E A3               [24] 5301 	inc	dptr
      001B7F E4               [12] 5302 	clr	a
      001B80 12r00r00         [24] 5303 	lcall	__gptrput
                                   5304 ;	calc.c:326: }
      001B83                       5305 00105$:
                                   5306 ;	calc.c:328: return 1;
      001B83 90 00 01         [24] 5307 	mov	dptr,#0x0001
                                   5308 ;	calc.c:329: }
      001B86 D0*00            [24] 5309 	pop	_bp
      001B88 22               [24] 5310 	ret
                                   5311 ;------------------------------------------------------------
                                   5312 ;Allocation info for local variables in function 'help'
                                   5313 ;------------------------------------------------------------
                                   5314 ;delta                     Allocated to stack - _bp -5
                                   5315 ;_ctx                      Allocated to registers r5 r6 r7 
                                   5316 ;ctx                       Allocated to stack - _bp +4
                                   5317 ;__1310720087              Allocated to registers 
                                   5318 ;d                         Allocated to stack - _bp +7
                                   5319 ;mask                      Allocated to stack - _bp +11
                                   5320 ;__1310720089              Allocated to registers 
                                   5321 ;s                         Allocated to registers r5 r6 r7 
                                   5322 ;__1310720091              Allocated to registers 
                                   5323 ;s                         Allocated to registers r5 r6 r7 
                                   5324 ;__1310720093              Allocated to registers 
                                   5325 ;s                         Allocated to registers r5 r6 r7 
                                   5326 ;__1310720095              Allocated to registers 
                                   5327 ;s                         Allocated to registers r5 r6 r7 
                                   5328 ;__1310720097              Allocated to registers 
                                   5329 ;s                         Allocated to registers r5 r6 r7 
                                   5330 ;__1310720099              Allocated to registers 
                                   5331 ;s                         Allocated to registers r5 r6 r7 
                                   5332 ;__1310720101              Allocated to registers 
                                   5333 ;s                         Allocated to registers r5 r6 r7 
                                   5334 ;__1310720103              Allocated to registers 
                                   5335 ;s                         Allocated to registers r5 r6 r7 
                                   5336 ;__1310720105              Allocated to registers 
                                   5337 ;s                         Allocated to registers r5 r6 r7 
                                   5338 ;__1310720107              Allocated to registers 
                                   5339 ;s                         Allocated to registers r5 r6 r7 
                                   5340 ;__1310720109              Allocated to registers 
                                   5341 ;s                         Allocated to registers r5 r6 r7 
                                   5342 ;__1310720111              Allocated to registers 
                                   5343 ;s                         Allocated to registers r5 r6 r7 
                                   5344 ;__1310720113              Allocated to registers 
                                   5345 ;s                         Allocated to registers r5 r6 r7 
                                   5346 ;__1310720115              Allocated to registers 
                                   5347 ;s                         Allocated to registers r5 r6 r7 
                                   5348 ;__1310720117              Allocated to registers 
                                   5349 ;s                         Allocated to registers r5 r6 r7 
                                   5350 ;__1310720119              Allocated to registers 
                                   5351 ;s                         Allocated to registers r5 r6 r7 
                                   5352 ;__1310720121              Allocated to registers 
                                   5353 ;s                         Allocated to registers r5 r6 r7 
                                   5354 ;__1310720123              Allocated to registers 
                                   5355 ;s                         Allocated to registers r5 r6 r7 
                                   5356 ;__1310720125              Allocated to registers 
                                   5357 ;s                         Allocated to registers r5 r6 r7 
                                   5358 ;__1310720127              Allocated to registers 
                                   5359 ;s                         Allocated to registers r5 r6 r7 
                                   5360 ;__1310720129              Allocated to registers 
                                   5361 ;s                         Allocated to registers r5 r6 r7 
                                   5362 ;sloc0                     Allocated to stack - _bp +1
                                   5363 ;------------------------------------------------------------
                                   5364 ;	calc.c:331: static int help(void *_ctx, delta_t *delta) __reentrant {
                                   5365 ;	-----------------------------------------
                                   5366 ;	 function help
                                   5367 ;	-----------------------------------------
      001B89                       5368 _help:
      001B89 C0*00            [24] 5369 	push	_bp
      001B8B E5 81            [12] 5370 	mov	a,sp
      001B8D F5*00            [12] 5371 	mov	_bp,a
      001B8F 24 0E            [12] 5372 	add	a,#0x0e
      001B91 F5 81            [12] 5373 	mov	sp,a
      001B93 AD 82            [24] 5374 	mov	r5,dpl
      001B95 AE 83            [24] 5375 	mov	r6,dph
      001B97 AF F0            [24] 5376 	mov	r7,b
                                   5377 ;	calc.c:332: struct ctx *ctx = (struct ctx *)_ctx;
      001B99 E5*00            [12] 5378 	mov	a,_bp
      001B9B 24 04            [12] 5379 	add	a,#0x04
      001B9D F8               [12] 5380 	mov	r0,a
      001B9E A6 05            [24] 5381 	mov	@r0,ar5
      001BA0 08               [12] 5382 	inc	r0
      001BA1 A6 06            [24] 5383 	mov	@r0,ar6
      001BA3 08               [12] 5384 	inc	r0
      001BA4 A6 07            [24] 5385 	mov	@r0,ar7
                                   5386 ;	calc.c:335: printf("\r\nbase = %d, ", ctx->base);
      001BA6 E5*00            [12] 5387 	mov	a,_bp
      001BA8 24 04            [12] 5388 	add	a,#0x04
      001BAA F8               [12] 5389 	mov	r0,a
      001BAB 86 82            [24] 5390 	mov	dpl,@r0
      001BAD 08               [12] 5391 	inc	r0
      001BAE 86 83            [24] 5392 	mov	dph,@r0
      001BB0 08               [12] 5393 	inc	r0
      001BB1 86 F0            [24] 5394 	mov	b,@r0
      001BB3 12r00r00         [24] 5395 	lcall	__gptrget
      001BB6 FB               [12] 5396 	mov	r3,a
      001BB7 A3               [24] 5397 	inc	dptr
      001BB8 12r00r00         [24] 5398 	lcall	__gptrget
      001BBB FC               [12] 5399 	mov	r4,a
      001BBC C0 03            [24] 5400 	push	ar3
      001BBE C0 04            [24] 5401 	push	ar4
      001BC0 74r74            [12] 5402 	mov	a,#___str_11
      001BC2 C0 E0            [24] 5403 	push	acc
      001BC4 74s00            [12] 5404 	mov	a,#(___str_11 >> 8)
      001BC6 C0 E0            [24] 5405 	push	acc
      001BC8 74 80            [12] 5406 	mov	a,#0x80
      001BCA C0 E0            [24] 5407 	push	acc
      001BCC 12r00r00         [24] 5408 	lcall	_printf
      001BCF E5 81            [12] 5409 	mov	a,sp
      001BD1 24 FB            [12] 5410 	add	a,#0xfb
      001BD3 F5 81            [12] 5411 	mov	sp,a
                                   5412 ;	calc.c:336: printf("acc = %ld / ", ctx->acc);
      001BD5 E5*00            [12] 5413 	mov	a,_bp
      001BD7 24 04            [12] 5414 	add	a,#0x04
      001BD9 F8               [12] 5415 	mov	r0,a
      001BDA A9*00            [24] 5416 	mov	r1,_bp
      001BDC 09               [12] 5417 	inc	r1
      001BDD 74 02            [12] 5418 	mov	a,#0x02
      001BDF 26               [12] 5419 	add	a,@r0
      001BE0 F7               [12] 5420 	mov	@r1,a
      001BE1 E4               [12] 5421 	clr	a
      001BE2 08               [12] 5422 	inc	r0
      001BE3 36               [12] 5423 	addc	a,@r0
      001BE4 09               [12] 5424 	inc	r1
      001BE5 F7               [12] 5425 	mov	@r1,a
      001BE6 08               [12] 5426 	inc	r0
      001BE7 09               [12] 5427 	inc	r1
      001BE8 E6               [12] 5428 	mov	a,@r0
      001BE9 F7               [12] 5429 	mov	@r1,a
      001BEA A8*00            [24] 5430 	mov	r0,_bp
      001BEC 08               [12] 5431 	inc	r0
      001BED 86 82            [24] 5432 	mov	dpl,@r0
      001BEF 08               [12] 5433 	inc	r0
      001BF0 86 83            [24] 5434 	mov	dph,@r0
      001BF2 08               [12] 5435 	inc	r0
      001BF3 86 F0            [24] 5436 	mov	b,@r0
      001BF5 12r00r00         [24] 5437 	lcall	__gptrget
      001BF8 FC               [12] 5438 	mov	r4,a
      001BF9 A3               [24] 5439 	inc	dptr
      001BFA 12r00r00         [24] 5440 	lcall	__gptrget
      001BFD FD               [12] 5441 	mov	r5,a
      001BFE A3               [24] 5442 	inc	dptr
      001BFF 12r00r00         [24] 5443 	lcall	__gptrget
      001C02 FE               [12] 5444 	mov	r6,a
      001C03 A3               [24] 5445 	inc	dptr
      001C04 12r00r00         [24] 5446 	lcall	__gptrget
      001C07 FF               [12] 5447 	mov	r7,a
      001C08 C0 04            [24] 5448 	push	ar4
      001C0A C0 05            [24] 5449 	push	ar5
      001C0C C0 06            [24] 5450 	push	ar6
      001C0E C0 07            [24] 5451 	push	ar7
      001C10 74r82            [12] 5452 	mov	a,#___str_12
      001C12 C0 E0            [24] 5453 	push	acc
      001C14 74s00            [12] 5454 	mov	a,#(___str_12 >> 8)
      001C16 C0 E0            [24] 5455 	push	acc
      001C18 74 80            [12] 5456 	mov	a,#0x80
      001C1A C0 E0            [24] 5457 	push	acc
      001C1C 12r00r00         [24] 5458 	lcall	_printf
      001C1F E5 81            [12] 5459 	mov	a,sp
      001C21 24 F9            [12] 5460 	add	a,#0xf9
      001C23 F5 81            [12] 5461 	mov	sp,a
                                   5462 ;	calc.c:337: printf("%08lx / ", ctx->acc);
      001C25 A8*00            [24] 5463 	mov	r0,_bp
      001C27 08               [12] 5464 	inc	r0
      001C28 86 82            [24] 5465 	mov	dpl,@r0
      001C2A 08               [12] 5466 	inc	r0
      001C2B 86 83            [24] 5467 	mov	dph,@r0
      001C2D 08               [12] 5468 	inc	r0
      001C2E 86 F0            [24] 5469 	mov	b,@r0
      001C30 12r00r00         [24] 5470 	lcall	__gptrget
      001C33 FC               [12] 5471 	mov	r4,a
      001C34 A3               [24] 5472 	inc	dptr
      001C35 12r00r00         [24] 5473 	lcall	__gptrget
      001C38 FD               [12] 5474 	mov	r5,a
      001C39 A3               [24] 5475 	inc	dptr
      001C3A 12r00r00         [24] 5476 	lcall	__gptrget
      001C3D FE               [12] 5477 	mov	r6,a
      001C3E A3               [24] 5478 	inc	dptr
      001C3F 12r00r00         [24] 5479 	lcall	__gptrget
      001C42 FF               [12] 5480 	mov	r7,a
      001C43 C0 04            [24] 5481 	push	ar4
      001C45 C0 05            [24] 5482 	push	ar5
      001C47 C0 06            [24] 5483 	push	ar6
      001C49 C0 07            [24] 5484 	push	ar7
      001C4B 74r23            [12] 5485 	mov	a,#___str_4
      001C4D C0 E0            [24] 5486 	push	acc
      001C4F 74s00            [12] 5487 	mov	a,#(___str_4 >> 8)
      001C51 C0 E0            [24] 5488 	push	acc
      001C53 74 80            [12] 5489 	mov	a,#0x80
      001C55 C0 E0            [24] 5490 	push	acc
      001C57 12r00r00         [24] 5491 	lcall	_printf
      001C5A E5 81            [12] 5492 	mov	a,sp
      001C5C 24 F9            [12] 5493 	add	a,#0xf9
      001C5E F5 81            [12] 5494 	mov	sp,a
                                   5495 ;	calc.c:338: printbin(ctx->acc);
      001C60 A8*00            [24] 5496 	mov	r0,_bp
      001C62 08               [12] 5497 	inc	r0
      001C63 86 82            [24] 5498 	mov	dpl,@r0
      001C65 08               [12] 5499 	inc	r0
      001C66 86 83            [24] 5500 	mov	dph,@r0
      001C68 08               [12] 5501 	inc	r0
      001C69 86 F0            [24] 5502 	mov	b,@r0
      001C6B E5*00            [12] 5503 	mov	a,_bp
      001C6D 24 07            [12] 5504 	add	a,#0x07
      001C6F F9               [12] 5505 	mov	r1,a
      001C70 12r00r00         [24] 5506 	lcall	__gptrget
      001C73 F7               [12] 5507 	mov	@r1,a
      001C74 A3               [24] 5508 	inc	dptr
      001C75 12r00r00         [24] 5509 	lcall	__gptrget
      001C78 09               [12] 5510 	inc	r1
      001C79 F7               [12] 5511 	mov	@r1,a
      001C7A A3               [24] 5512 	inc	dptr
      001C7B 12r00r00         [24] 5513 	lcall	__gptrget
      001C7E 09               [12] 5514 	inc	r1
      001C7F F7               [12] 5515 	mov	@r1,a
      001C80 A3               [24] 5516 	inc	dptr
      001C81 12r00r00         [24] 5517 	lcall	__gptrget
      001C84 09               [12] 5518 	inc	r1
      001C85 F7               [12] 5519 	mov	@r1,a
                                   5520 ;	calc.c:56: for (mask = 0x80000000lu; mask; mask >>= 1)
      001C86 E5*00            [12] 5521 	mov	a,_bp
      001C88 24 0B            [12] 5522 	add	a,#0x0b
      001C8A F8               [12] 5523 	mov	r0,a
      001C8B E4               [12] 5524 	clr	a
      001C8C F6               [12] 5525 	mov	@r0,a
      001C8D 08               [12] 5526 	inc	r0
      001C8E F6               [12] 5527 	mov	@r0,a
      001C8F 08               [12] 5528 	inc	r0
      001C90 F6               [12] 5529 	mov	@r0,a
      001C91 08               [12] 5530 	inc	r0
      001C92 76 80            [12] 5531 	mov	@r0,#0x80
      001C94                       5532 00145$:
                                   5533 ;	calc.c:57: (void)putchar((d & mask) ? (int)'1' : (int)'0');
      001C94 E5*00            [12] 5534 	mov	a,_bp
      001C96 24 07            [12] 5535 	add	a,#0x07
      001C98 F8               [12] 5536 	mov	r0,a
      001C99 86 04            [24] 5537 	mov	ar4,@r0
      001C9B 08               [12] 5538 	inc	r0
      001C9C 86 05            [24] 5539 	mov	ar5,@r0
      001C9E 08               [12] 5540 	inc	r0
      001C9F 86 06            [24] 5541 	mov	ar6,@r0
      001CA1 08               [12] 5542 	inc	r0
      001CA2 86 07            [24] 5543 	mov	ar7,@r0
      001CA4 E5*00            [12] 5544 	mov	a,_bp
      001CA6 24 0B            [12] 5545 	add	a,#0x0b
      001CA8 F8               [12] 5546 	mov	r0,a
      001CA9 E6               [12] 5547 	mov	a,@r0
      001CAA 52 04            [12] 5548 	anl	ar4,a
      001CAC 08               [12] 5549 	inc	r0
      001CAD E6               [12] 5550 	mov	a,@r0
      001CAE 52 05            [12] 5551 	anl	ar5,a
      001CB0 08               [12] 5552 	inc	r0
      001CB1 E6               [12] 5553 	mov	a,@r0
      001CB2 52 06            [12] 5554 	anl	ar6,a
      001CB4 08               [12] 5555 	inc	r0
      001CB5 E6               [12] 5556 	mov	a,@r0
      001CB6 52 07            [12] 5557 	anl	ar7,a
      001CB8 EC               [12] 5558 	mov	a,r4
      001CB9 4D               [12] 5559 	orl	a,r5
      001CBA 4E               [12] 5560 	orl	a,r6
      001CBB 4F               [12] 5561 	orl	a,r7
      001CBC 60 06            [24] 5562 	jz	00212$
      001CBE 7E 31            [12] 5563 	mov	r6,#0x31
      001CC0 7F 00            [12] 5564 	mov	r7,#0x00
      001CC2 80 04            [24] 5565 	sjmp	00213$
      001CC4                       5566 00212$:
      001CC4 7E 30            [12] 5567 	mov	r6,#0x30
      001CC6 7F 00            [12] 5568 	mov	r7,#0x00
      001CC8                       5569 00213$:
      001CC8 8E 82            [24] 5570 	mov	dpl,r6
      001CCA 8F 83            [24] 5571 	mov	dph,r7
      001CCC 12r00r00         [24] 5572 	lcall	_putchar
                                   5573 ;	calc.c:56: for (mask = 0x80000000lu; mask; mask >>= 1)
      001CCF E5*00            [12] 5574 	mov	a,_bp
      001CD1 24 0B            [12] 5575 	add	a,#0x0b
      001CD3 F8               [12] 5576 	mov	r0,a
      001CD4 08               [12] 5577 	inc	r0
      001CD5 08               [12] 5578 	inc	r0
      001CD6 08               [12] 5579 	inc	r0
      001CD7 E6               [12] 5580 	mov	a,@r0
      001CD8 C3               [12] 5581 	clr	c
      001CD9 13               [12] 5582 	rrc	a
      001CDA F6               [12] 5583 	mov	@r0,a
      001CDB 18               [12] 5584 	dec	r0
      001CDC E6               [12] 5585 	mov	a,@r0
      001CDD 13               [12] 5586 	rrc	a
      001CDE F6               [12] 5587 	mov	@r0,a
      001CDF 18               [12] 5588 	dec	r0
      001CE0 E6               [12] 5589 	mov	a,@r0
      001CE1 13               [12] 5590 	rrc	a
      001CE2 F6               [12] 5591 	mov	@r0,a
      001CE3 18               [12] 5592 	dec	r0
      001CE4 E6               [12] 5593 	mov	a,@r0
      001CE5 13               [12] 5594 	rrc	a
      001CE6 F6               [12] 5595 	mov	@r0,a
      001CE7 E5*00            [12] 5596 	mov	a,_bp
      001CE9 24 0B            [12] 5597 	add	a,#0x0b
      001CEB F8               [12] 5598 	mov	r0,a
      001CEC E6               [12] 5599 	mov	a,@r0
      001CED 08               [12] 5600 	inc	r0
      001CEE 46               [12] 5601 	orl	a,@r0
      001CEF 08               [12] 5602 	inc	r0
      001CF0 46               [12] 5603 	orl	a,@r0
      001CF1 08               [12] 5604 	inc	r0
      001CF2 46               [12] 5605 	orl	a,@r0
      001CF3 70 9F            [24] 5606 	jnz	00145$
                                   5607 ;	calc.c:339: printf(", acc_valid = %d\r\n\r\n", (int)ctx->acc_valid);
      001CF5 E5*00            [12] 5608 	mov	a,_bp
      001CF7 24 04            [12] 5609 	add	a,#0x04
      001CF9 F8               [12] 5610 	mov	r0,a
      001CFA 74 06            [12] 5611 	mov	a,#0x06
      001CFC 26               [12] 5612 	add	a,@r0
      001CFD FD               [12] 5613 	mov	r5,a
      001CFE E4               [12] 5614 	clr	a
      001CFF 08               [12] 5615 	inc	r0
      001D00 36               [12] 5616 	addc	a,@r0
      001D01 FE               [12] 5617 	mov	r6,a
      001D02 08               [12] 5618 	inc	r0
      001D03 86 07            [24] 5619 	mov	ar7,@r0
      001D05 8D 82            [24] 5620 	mov	dpl,r5
      001D07 8E 83            [24] 5621 	mov	dph,r6
      001D09 8F F0            [24] 5622 	mov	b,r7
      001D0B 12r00r00         [24] 5623 	lcall	__gptrget
      001D0E FD               [12] 5624 	mov	r5,a
      001D0F 7F 00            [12] 5625 	mov	r7,#0x00
      001D11 C0 05            [24] 5626 	push	ar5
      001D13 C0 07            [24] 5627 	push	ar7
      001D15 74r8F            [12] 5628 	mov	a,#___str_13
      001D17 C0 E0            [24] 5629 	push	acc
      001D19 74s00            [12] 5630 	mov	a,#(___str_13 >> 8)
      001D1B C0 E0            [24] 5631 	push	acc
      001D1D 74 80            [12] 5632 	mov	a,#0x80
      001D1F C0 E0            [24] 5633 	push	acc
      001D21 12r00r00         [24] 5634 	lcall	_printf
      001D24 E5 81            [12] 5635 	mov	a,sp
      001D26 24 FB            [12] 5636 	add	a,#0xfb
      001D28 F5 81            [12] 5637 	mov	sp,a
                                   5638 ;	calc.c:340: printstr("HhOo\tbase 16 10 8 2\r\n");
      001D2A 7DrA4            [12] 5639 	mov	r5,#___str_14
      001D2C 7Es00            [12] 5640 	mov	r6,#(___str_14 >> 8)
      001D2E 7F 80            [12] 5641 	mov	r7,#0x80
                                   5642 ;	calc.c:50: return;
      001D30                       5643 00148$:
                                   5644 ;	calc.c:48: for (; *s; s++) putchar(*s);
      001D30 8D 82            [24] 5645 	mov	dpl,r5
      001D32 8E 83            [24] 5646 	mov	dph,r6
      001D34 8F F0            [24] 5647 	mov	b,r7
      001D36 12r00r00         [24] 5648 	lcall	__gptrget
      001D39 FC               [12] 5649 	mov	r4,a
      001D3A 60 10            [24] 5650 	jz	00104$
      001D3C 7B 00            [12] 5651 	mov	r3,#0x00
      001D3E 8C 82            [24] 5652 	mov	dpl,r4
      001D40 8B 83            [24] 5653 	mov	dph,r3
      001D42 12r00r00         [24] 5654 	lcall	_putchar
      001D45 0D               [12] 5655 	inc	r5
                                   5656 ;	calc.c:340: printstr("HhOo\tbase 16 10 8 2\r\n");
      001D46 BD 00 E7         [24] 5657 	cjne	r5,#0x00,00148$
      001D49 0E               [12] 5658 	inc	r6
      001D4A 80 E4            [24] 5659 	sjmp	00148$
      001D4C                       5660 00104$:
                                   5661 ;	calc.c:341: printstr("p\tpeek top\r\n");
      001D4C 7DrBA            [12] 5662 	mov	r5,#___str_15
      001D4E 7Es00            [12] 5663 	mov	r6,#(___str_15 >> 8)
      001D50 7F 80            [12] 5664 	mov	r7,#0x80
                                   5665 ;	calc.c:50: return;
      001D52                       5666 00151$:
                                   5667 ;	calc.c:48: for (; *s; s++) putchar(*s);
      001D52 8D 82            [24] 5668 	mov	dpl,r5
      001D54 8E 83            [24] 5669 	mov	dph,r6
      001D56 8F F0            [24] 5670 	mov	b,r7
      001D58 12r00r00         [24] 5671 	lcall	__gptrget
      001D5B FC               [12] 5672 	mov	r4,a
      001D5C 60 10            [24] 5673 	jz	00106$
      001D5E 7B 00            [12] 5674 	mov	r3,#0x00
      001D60 8C 82            [24] 5675 	mov	dpl,r4
      001D62 8B 83            [24] 5676 	mov	dph,r3
      001D64 12r00r00         [24] 5677 	lcall	_putchar
      001D67 0D               [12] 5678 	inc	r5
                                   5679 ;	calc.c:341: printstr("p\tpeek top\r\n");
      001D68 BD 00 E7         [24] 5680 	cjne	r5,#0x00,00151$
      001D6B 0E               [12] 5681 	inc	r6
      001D6C 80 E4            [24] 5682 	sjmp	00151$
      001D6E                       5683 00106$:
                                   5684 ;	calc.c:342: printstr("P\tprint stack\r\n");
      001D6E 7DrC7            [12] 5685 	mov	r5,#___str_16
      001D70 7Es00            [12] 5686 	mov	r6,#(___str_16 >> 8)
      001D72 7F 80            [12] 5687 	mov	r7,#0x80
                                   5688 ;	calc.c:50: return;
      001D74                       5689 00154$:
                                   5690 ;	calc.c:48: for (; *s; s++) putchar(*s);
      001D74 8D 82            [24] 5691 	mov	dpl,r5
      001D76 8E 83            [24] 5692 	mov	dph,r6
      001D78 8F F0            [24] 5693 	mov	b,r7
      001D7A 12r00r00         [24] 5694 	lcall	__gptrget
      001D7D FC               [12] 5695 	mov	r4,a
      001D7E 60 10            [24] 5696 	jz	00108$
      001D80 7B 00            [12] 5697 	mov	r3,#0x00
      001D82 8C 82            [24] 5698 	mov	dpl,r4
      001D84 8B 83            [24] 5699 	mov	dph,r3
      001D86 12r00r00         [24] 5700 	lcall	_putchar
      001D89 0D               [12] 5701 	inc	r5
                                   5702 ;	calc.c:342: printstr("P\tprint stack\r\n");
      001D8A BD 00 E7         [24] 5703 	cjne	r5,#0x00,00154$
      001D8D 0E               [12] 5704 	inc	r6
      001D8E 80 E4            [24] 5705 	sjmp	00154$
      001D90                       5706 00108$:
                                   5707 ;	calc.c:343: printstr("v.\tpop top\r\n");
      001D90 7DrD7            [12] 5708 	mov	r5,#___str_17
      001D92 7Es00            [12] 5709 	mov	r6,#(___str_17 >> 8)
      001D94 7F 80            [12] 5710 	mov	r7,#0x80
                                   5711 ;	calc.c:50: return;
      001D96                       5712 00157$:
                                   5713 ;	calc.c:48: for (; *s; s++) putchar(*s);
      001D96 8D 82            [24] 5714 	mov	dpl,r5
      001D98 8E 83            [24] 5715 	mov	dph,r6
      001D9A 8F F0            [24] 5716 	mov	b,r7
      001D9C 12r00r00         [24] 5717 	lcall	__gptrget
      001D9F FC               [12] 5718 	mov	r4,a
      001DA0 60 10            [24] 5719 	jz	00110$
      001DA2 7B 00            [12] 5720 	mov	r3,#0x00
      001DA4 8C 82            [24] 5721 	mov	dpl,r4
      001DA6 8B 83            [24] 5722 	mov	dph,r3
      001DA8 12r00r00         [24] 5723 	lcall	_putchar
      001DAB 0D               [12] 5724 	inc	r5
                                   5725 ;	calc.c:343: printstr("v.\tpop top\r\n");
      001DAC BD 00 E7         [24] 5726 	cjne	r5,#0x00,00157$
      001DAF 0E               [12] 5727 	inc	r6
      001DB0 80 E4            [24] 5728 	sjmp	00157$
      001DB2                       5729 00110$:
                                   5730 ;	calc.c:344: printstr("V\tpop all\r\n");
      001DB2 7DrE4            [12] 5731 	mov	r5,#___str_18
      001DB4 7Es00            [12] 5732 	mov	r6,#(___str_18 >> 8)
      001DB6 7F 80            [12] 5733 	mov	r7,#0x80
                                   5734 ;	calc.c:50: return;
      001DB8                       5735 00160$:
                                   5736 ;	calc.c:48: for (; *s; s++) putchar(*s);
      001DB8 8D 82            [24] 5737 	mov	dpl,r5
      001DBA 8E 83            [24] 5738 	mov	dph,r6
      001DBC 8F F0            [24] 5739 	mov	b,r7
      001DBE 12r00r00         [24] 5740 	lcall	__gptrget
      001DC1 FC               [12] 5741 	mov	r4,a
      001DC2 60 10            [24] 5742 	jz	00112$
      001DC4 7B 00            [12] 5743 	mov	r3,#0x00
      001DC6 8C 82            [24] 5744 	mov	dpl,r4
      001DC8 8B 83            [24] 5745 	mov	dph,r3
      001DCA 12r00r00         [24] 5746 	lcall	_putchar
      001DCD 0D               [12] 5747 	inc	r5
                                   5748 ;	calc.c:344: printstr("V\tpop all\r\n");
      001DCE BD 00 E7         [24] 5749 	cjne	r5,#0x00,00160$
      001DD1 0E               [12] 5750 	inc	r6
      001DD2 80 E4            [24] 5751 	sjmp	00160$
      001DD4                       5752 00112$:
                                   5753 ;	calc.c:345: printstr("i\treset acc\r\n");
      001DD4 7DrF0            [12] 5754 	mov	r5,#___str_19
      001DD6 7Es00            [12] 5755 	mov	r6,#(___str_19 >> 8)
      001DD8 7F 80            [12] 5756 	mov	r7,#0x80
                                   5757 ;	calc.c:50: return;
      001DDA                       5758 00163$:
                                   5759 ;	calc.c:48: for (; *s; s++) putchar(*s);
      001DDA 8D 82            [24] 5760 	mov	dpl,r5
      001DDC 8E 83            [24] 5761 	mov	dph,r6
      001DDE 8F F0            [24] 5762 	mov	b,r7
      001DE0 12r00r00         [24] 5763 	lcall	__gptrget
      001DE3 FC               [12] 5764 	mov	r4,a
      001DE4 60 10            [24] 5765 	jz	00114$
      001DE6 7B 00            [12] 5766 	mov	r3,#0x00
      001DE8 8C 82            [24] 5767 	mov	dpl,r4
      001DEA 8B 83            [24] 5768 	mov	dph,r3
      001DEC 12r00r00         [24] 5769 	lcall	_putchar
      001DEF 0D               [12] 5770 	inc	r5
                                   5771 ;	calc.c:345: printstr("i\treset acc\r\n");
      001DF0 BD 00 E7         [24] 5772 	cjne	r5,#0x00,00163$
      001DF3 0E               [12] 5773 	inc	r6
      001DF4 80 E4            [24] 5774 	sjmp	00163$
      001DF6                       5775 00114$:
                                   5776 ;	calc.c:346: printstr("I\treset and discard acc\r\n");
      001DF6 7DrFE            [12] 5777 	mov	r5,#___str_20
      001DF8 7Es00            [12] 5778 	mov	r6,#(___str_20 >> 8)
      001DFA 7F 80            [12] 5779 	mov	r7,#0x80
                                   5780 ;	calc.c:50: return;
      001DFC                       5781 00166$:
                                   5782 ;	calc.c:48: for (; *s; s++) putchar(*s);
      001DFC 8D 82            [24] 5783 	mov	dpl,r5
      001DFE 8E 83            [24] 5784 	mov	dph,r6
      001E00 8F F0            [24] 5785 	mov	b,r7
      001E02 12r00r00         [24] 5786 	lcall	__gptrget
      001E05 FC               [12] 5787 	mov	r4,a
      001E06 60 10            [24] 5788 	jz	00116$
      001E08 7B 00            [12] 5789 	mov	r3,#0x00
      001E0A 8C 82            [24] 5790 	mov	dpl,r4
      001E0C 8B 83            [24] 5791 	mov	dph,r3
      001E0E 12r00r00         [24] 5792 	lcall	_putchar
      001E11 0D               [12] 5793 	inc	r5
                                   5794 ;	calc.c:346: printstr("I\treset and discard acc\r\n");
      001E12 BD 00 E7         [24] 5795 	cjne	r5,#0x00,00166$
      001E15 0E               [12] 5796 	inc	r6
      001E16 80 E4            [24] 5797 	sjmp	00166$
      001E18                       5798 00116$:
                                   5799 ;	calc.c:347: printstr("x\texchange top 2\r\n");
      001E18 7Dr18            [12] 5800 	mov	r5,#___str_21
      001E1A 7Es01            [12] 5801 	mov	r6,#(___str_21 >> 8)
      001E1C 7F 80            [12] 5802 	mov	r7,#0x80
                                   5803 ;	calc.c:50: return;
      001E1E                       5804 00169$:
                                   5805 ;	calc.c:48: for (; *s; s++) putchar(*s);
      001E1E 8D 82            [24] 5806 	mov	dpl,r5
      001E20 8E 83            [24] 5807 	mov	dph,r6
      001E22 8F F0            [24] 5808 	mov	b,r7
      001E24 12r00r00         [24] 5809 	lcall	__gptrget
      001E27 FC               [12] 5810 	mov	r4,a
      001E28 60 10            [24] 5811 	jz	00118$
      001E2A 7B 00            [12] 5812 	mov	r3,#0x00
      001E2C 8C 82            [24] 5813 	mov	dpl,r4
      001E2E 8B 83            [24] 5814 	mov	dph,r3
      001E30 12r00r00         [24] 5815 	lcall	_putchar
      001E33 0D               [12] 5816 	inc	r5
                                   5817 ;	calc.c:347: printstr("x\texchange top 2\r\n");
      001E34 BD 00 E7         [24] 5818 	cjne	r5,#0x00,00169$
      001E37 0E               [12] 5819 	inc	r6
      001E38 80 E4            [24] 5820 	sjmp	00169$
      001E3A                       5821 00118$:
                                   5822 ;	calc.c:348: printstr("+\tadd top 2\r\n");
      001E3A 7Dr2B            [12] 5823 	mov	r5,#___str_22
      001E3C 7Es01            [12] 5824 	mov	r6,#(___str_22 >> 8)
      001E3E 7F 80            [12] 5825 	mov	r7,#0x80
                                   5826 ;	calc.c:50: return;
      001E40                       5827 00172$:
                                   5828 ;	calc.c:48: for (; *s; s++) putchar(*s);
      001E40 8D 82            [24] 5829 	mov	dpl,r5
      001E42 8E 83            [24] 5830 	mov	dph,r6
      001E44 8F F0            [24] 5831 	mov	b,r7
      001E46 12r00r00         [24] 5832 	lcall	__gptrget
      001E49 FC               [12] 5833 	mov	r4,a
      001E4A 60 10            [24] 5834 	jz	00120$
      001E4C 7B 00            [12] 5835 	mov	r3,#0x00
      001E4E 8C 82            [24] 5836 	mov	dpl,r4
      001E50 8B 83            [24] 5837 	mov	dph,r3
      001E52 12r00r00         [24] 5838 	lcall	_putchar
      001E55 0D               [12] 5839 	inc	r5
                                   5840 ;	calc.c:348: printstr("+\tadd top 2\r\n");
      001E56 BD 00 E7         [24] 5841 	cjne	r5,#0x00,00172$
      001E59 0E               [12] 5842 	inc	r6
      001E5A 80 E4            [24] 5843 	sjmp	00172$
      001E5C                       5844 00120$:
                                   5845 ;	calc.c:349: printstr("-\tsubtract top 2\r\n");
      001E5C 7Dr39            [12] 5846 	mov	r5,#___str_23
      001E5E 7Es01            [12] 5847 	mov	r6,#(___str_23 >> 8)
      001E60 7F 80            [12] 5848 	mov	r7,#0x80
                                   5849 ;	calc.c:50: return;
      001E62                       5850 00175$:
                                   5851 ;	calc.c:48: for (; *s; s++) putchar(*s);
      001E62 8D 82            [24] 5852 	mov	dpl,r5
      001E64 8E 83            [24] 5853 	mov	dph,r6
      001E66 8F F0            [24] 5854 	mov	b,r7
      001E68 12r00r00         [24] 5855 	lcall	__gptrget
      001E6B FC               [12] 5856 	mov	r4,a
      001E6C 60 10            [24] 5857 	jz	00122$
      001E6E 7B 00            [12] 5858 	mov	r3,#0x00
      001E70 8C 82            [24] 5859 	mov	dpl,r4
      001E72 8B 83            [24] 5860 	mov	dph,r3
      001E74 12r00r00         [24] 5861 	lcall	_putchar
      001E77 0D               [12] 5862 	inc	r5
                                   5863 ;	calc.c:349: printstr("-\tsubtract top 2\r\n");
      001E78 BD 00 E7         [24] 5864 	cjne	r5,#0x00,00175$
      001E7B 0E               [12] 5865 	inc	r6
      001E7C 80 E4            [24] 5866 	sjmp	00175$
      001E7E                       5867 00122$:
                                   5868 ;	calc.c:350: printstr("*\tmultiply top 2\r\n");
      001E7E 7Dr4C            [12] 5869 	mov	r5,#___str_24
      001E80 7Es01            [12] 5870 	mov	r6,#(___str_24 >> 8)
      001E82 7F 80            [12] 5871 	mov	r7,#0x80
                                   5872 ;	calc.c:50: return;
      001E84                       5873 00178$:
                                   5874 ;	calc.c:48: for (; *s; s++) putchar(*s);
      001E84 8D 82            [24] 5875 	mov	dpl,r5
      001E86 8E 83            [24] 5876 	mov	dph,r6
      001E88 8F F0            [24] 5877 	mov	b,r7
      001E8A 12r00r00         [24] 5878 	lcall	__gptrget
      001E8D FC               [12] 5879 	mov	r4,a
      001E8E 60 10            [24] 5880 	jz	00124$
      001E90 7B 00            [12] 5881 	mov	r3,#0x00
      001E92 8C 82            [24] 5882 	mov	dpl,r4
      001E94 8B 83            [24] 5883 	mov	dph,r3
      001E96 12r00r00         [24] 5884 	lcall	_putchar
      001E99 0D               [12] 5885 	inc	r5
                                   5886 ;	calc.c:350: printstr("*\tmultiply top 2\r\n");
      001E9A BD 00 E7         [24] 5887 	cjne	r5,#0x00,00178$
      001E9D 0E               [12] 5888 	inc	r6
      001E9E 80 E4            [24] 5889 	sjmp	00178$
      001EA0                       5890 00124$:
                                   5891 ;	calc.c:351: printstr("/\tdivide top 2\r\n");
      001EA0 7Dr5F            [12] 5892 	mov	r5,#___str_25
      001EA2 7Es01            [12] 5893 	mov	r6,#(___str_25 >> 8)
      001EA4 7F 80            [12] 5894 	mov	r7,#0x80
                                   5895 ;	calc.c:50: return;
      001EA6                       5896 00181$:
                                   5897 ;	calc.c:48: for (; *s; s++) putchar(*s);
      001EA6 8D 82            [24] 5898 	mov	dpl,r5
      001EA8 8E 83            [24] 5899 	mov	dph,r6
      001EAA 8F F0            [24] 5900 	mov	b,r7
      001EAC 12r00r00         [24] 5901 	lcall	__gptrget
      001EAF FC               [12] 5902 	mov	r4,a
      001EB0 60 10            [24] 5903 	jz	00126$
      001EB2 7B 00            [12] 5904 	mov	r3,#0x00
      001EB4 8C 82            [24] 5905 	mov	dpl,r4
      001EB6 8B 83            [24] 5906 	mov	dph,r3
      001EB8 12r00r00         [24] 5907 	lcall	_putchar
      001EBB 0D               [12] 5908 	inc	r5
                                   5909 ;	calc.c:351: printstr("/\tdivide top 2\r\n");
      001EBC BD 00 E7         [24] 5910 	cjne	r5,#0x00,00181$
      001EBF 0E               [12] 5911 	inc	r6
      001EC0 80 E4            [24] 5912 	sjmp	00181$
      001EC2                       5913 00126$:
                                   5914 ;	calc.c:352: printstr("\\\tdivide top 2 unsigned\r\n");	
      001EC2 7Dr70            [12] 5915 	mov	r5,#___str_26
      001EC4 7Es01            [12] 5916 	mov	r6,#(___str_26 >> 8)
      001EC6 7F 80            [12] 5917 	mov	r7,#0x80
                                   5918 ;	calc.c:50: return;
      001EC8                       5919 00184$:
                                   5920 ;	calc.c:48: for (; *s; s++) putchar(*s);
      001EC8 8D 82            [24] 5921 	mov	dpl,r5
      001ECA 8E 83            [24] 5922 	mov	dph,r6
      001ECC 8F F0            [24] 5923 	mov	b,r7
      001ECE 12r00r00         [24] 5924 	lcall	__gptrget
      001ED1 FC               [12] 5925 	mov	r4,a
      001ED2 60 10            [24] 5926 	jz	00128$
      001ED4 7B 00            [12] 5927 	mov	r3,#0x00
      001ED6 8C 82            [24] 5928 	mov	dpl,r4
      001ED8 8B 83            [24] 5929 	mov	dph,r3
      001EDA 12r00r00         [24] 5930 	lcall	_putchar
      001EDD 0D               [12] 5931 	inc	r5
                                   5932 ;	calc.c:352: printstr("\\\tdivide top 2 unsigned\r\n");	
      001EDE BD 00 E7         [24] 5933 	cjne	r5,#0x00,00184$
      001EE1 0E               [12] 5934 	inc	r6
      001EE2 80 E4            [24] 5935 	sjmp	00184$
      001EE4                       5936 00128$:
                                   5937 ;	calc.c:353: printstr("%\tmodulus top 2\r\n");
      001EE4 7Dr8A            [12] 5938 	mov	r5,#___str_27
      001EE6 7Es01            [12] 5939 	mov	r6,#(___str_27 >> 8)
      001EE8 7F 80            [12] 5940 	mov	r7,#0x80
                                   5941 ;	calc.c:50: return;
      001EEA                       5942 00187$:
                                   5943 ;	calc.c:48: for (; *s; s++) putchar(*s);
      001EEA 8D 82            [24] 5944 	mov	dpl,r5
      001EEC 8E 83            [24] 5945 	mov	dph,r6
      001EEE 8F F0            [24] 5946 	mov	b,r7
      001EF0 12r00r00         [24] 5947 	lcall	__gptrget
      001EF3 FC               [12] 5948 	mov	r4,a
      001EF4 60 10            [24] 5949 	jz	00130$
      001EF6 7B 00            [12] 5950 	mov	r3,#0x00
      001EF8 8C 82            [24] 5951 	mov	dpl,r4
      001EFA 8B 83            [24] 5952 	mov	dph,r3
      001EFC 12r00r00         [24] 5953 	lcall	_putchar
      001EFF 0D               [12] 5954 	inc	r5
                                   5955 ;	calc.c:353: printstr("%\tmodulus top 2\r\n");
      001F00 BD 00 E7         [24] 5956 	cjne	r5,#0x00,00187$
      001F03 0E               [12] 5957 	inc	r6
      001F04 80 E4            [24] 5958 	sjmp	00187$
      001F06                       5959 00130$:
                                   5960 ;	calc.c:354: printstr("#\tmodulus top 2 unsigned\r\n");
      001F06 7Dr9C            [12] 5961 	mov	r5,#___str_28
      001F08 7Es01            [12] 5962 	mov	r6,#(___str_28 >> 8)
      001F0A 7F 80            [12] 5963 	mov	r7,#0x80
                                   5964 ;	calc.c:50: return;
      001F0C                       5965 00190$:
                                   5966 ;	calc.c:48: for (; *s; s++) putchar(*s);
      001F0C 8D 82            [24] 5967 	mov	dpl,r5
      001F0E 8E 83            [24] 5968 	mov	dph,r6
      001F10 8F F0            [24] 5969 	mov	b,r7
      001F12 12r00r00         [24] 5970 	lcall	__gptrget
      001F15 FC               [12] 5971 	mov	r4,a
      001F16 60 10            [24] 5972 	jz	00132$
      001F18 7B 00            [12] 5973 	mov	r3,#0x00
      001F1A 8C 82            [24] 5974 	mov	dpl,r4
      001F1C 8B 83            [24] 5975 	mov	dph,r3
      001F1E 12r00r00         [24] 5976 	lcall	_putchar
      001F21 0D               [12] 5977 	inc	r5
                                   5978 ;	calc.c:354: printstr("#\tmodulus top 2 unsigned\r\n");
      001F22 BD 00 E7         [24] 5979 	cjne	r5,#0x00,00190$
      001F25 0E               [12] 5980 	inc	r6
      001F26 80 E4            [24] 5981 	sjmp	00190$
      001F28                       5982 00132$:
                                   5983 ;	calc.c:355: printstr("&\tand top 2\r\n");
      001F28 7DrB7            [12] 5984 	mov	r5,#___str_29
      001F2A 7Es01            [12] 5985 	mov	r6,#(___str_29 >> 8)
      001F2C 7F 80            [12] 5986 	mov	r7,#0x80
                                   5987 ;	calc.c:50: return;
      001F2E                       5988 00193$:
                                   5989 ;	calc.c:48: for (; *s; s++) putchar(*s);
      001F2E 8D 82            [24] 5990 	mov	dpl,r5
      001F30 8E 83            [24] 5991 	mov	dph,r6
      001F32 8F F0            [24] 5992 	mov	b,r7
      001F34 12r00r00         [24] 5993 	lcall	__gptrget
      001F37 FC               [12] 5994 	mov	r4,a
      001F38 60 10            [24] 5995 	jz	00134$
      001F3A 7B 00            [12] 5996 	mov	r3,#0x00
      001F3C 8C 82            [24] 5997 	mov	dpl,r4
      001F3E 8B 83            [24] 5998 	mov	dph,r3
      001F40 12r00r00         [24] 5999 	lcall	_putchar
      001F43 0D               [12] 6000 	inc	r5
                                   6001 ;	calc.c:355: printstr("&\tand top 2\r\n");
      001F44 BD 00 E7         [24] 6002 	cjne	r5,#0x00,00193$
      001F47 0E               [12] 6003 	inc	r6
      001F48 80 E4            [24] 6004 	sjmp	00193$
      001F4A                       6005 00134$:
                                   6006 ;	calc.c:356: printstr("|\tor top 2\r\n");
      001F4A 7DrC5            [12] 6007 	mov	r5,#___str_30
      001F4C 7Es01            [12] 6008 	mov	r6,#(___str_30 >> 8)
      001F4E 7F 80            [12] 6009 	mov	r7,#0x80
                                   6010 ;	calc.c:50: return;
      001F50                       6011 00196$:
                                   6012 ;	calc.c:48: for (; *s; s++) putchar(*s);
      001F50 8D 82            [24] 6013 	mov	dpl,r5
      001F52 8E 83            [24] 6014 	mov	dph,r6
      001F54 8F F0            [24] 6015 	mov	b,r7
      001F56 12r00r00         [24] 6016 	lcall	__gptrget
      001F59 FC               [12] 6017 	mov	r4,a
      001F5A 60 10            [24] 6018 	jz	00136$
      001F5C 7B 00            [12] 6019 	mov	r3,#0x00
      001F5E 8C 82            [24] 6020 	mov	dpl,r4
      001F60 8B 83            [24] 6021 	mov	dph,r3
      001F62 12r00r00         [24] 6022 	lcall	_putchar
      001F65 0D               [12] 6023 	inc	r5
                                   6024 ;	calc.c:356: printstr("|\tor top 2\r\n");
      001F66 BD 00 E7         [24] 6025 	cjne	r5,#0x00,00196$
      001F69 0E               [12] 6026 	inc	r6
      001F6A 80 E4            [24] 6027 	sjmp	00196$
      001F6C                       6028 00136$:
                                   6029 ;	calc.c:357: printstr("^\txor top 2\r\n");
      001F6C 7DrD2            [12] 6030 	mov	r5,#___str_31
      001F6E 7Es01            [12] 6031 	mov	r6,#(___str_31 >> 8)
      001F70 7F 80            [12] 6032 	mov	r7,#0x80
                                   6033 ;	calc.c:50: return;
      001F72                       6034 00199$:
                                   6035 ;	calc.c:48: for (; *s; s++) putchar(*s);
      001F72 8D 82            [24] 6036 	mov	dpl,r5
      001F74 8E 83            [24] 6037 	mov	dph,r6
      001F76 8F F0            [24] 6038 	mov	b,r7
      001F78 12r00r00         [24] 6039 	lcall	__gptrget
      001F7B FC               [12] 6040 	mov	r4,a
      001F7C 60 10            [24] 6041 	jz	00138$
      001F7E 7B 00            [12] 6042 	mov	r3,#0x00
      001F80 8C 82            [24] 6043 	mov	dpl,r4
      001F82 8B 83            [24] 6044 	mov	dph,r3
      001F84 12r00r00         [24] 6045 	lcall	_putchar
      001F87 0D               [12] 6046 	inc	r5
                                   6047 ;	calc.c:357: printstr("^\txor top 2\r\n");
      001F88 BD 00 E7         [24] 6048 	cjne	r5,#0x00,00199$
      001F8B 0E               [12] 6049 	inc	r6
      001F8C 80 E4            [24] 6050 	sjmp	00199$
      001F8E                       6051 00138$:
                                   6052 ;	calc.c:358: printstr("~\tbitwise not top\r\n");
      001F8E 7DrE0            [12] 6053 	mov	r5,#___str_32
      001F90 7Es01            [12] 6054 	mov	r6,#(___str_32 >> 8)
      001F92 7F 80            [12] 6055 	mov	r7,#0x80
                                   6056 ;	calc.c:50: return;
      001F94                       6057 00202$:
                                   6058 ;	calc.c:48: for (; *s; s++) putchar(*s);
      001F94 8D 82            [24] 6059 	mov	dpl,r5
      001F96 8E 83            [24] 6060 	mov	dph,r6
      001F98 8F F0            [24] 6061 	mov	b,r7
      001F9A 12r00r00         [24] 6062 	lcall	__gptrget
      001F9D FC               [12] 6063 	mov	r4,a
      001F9E 60 10            [24] 6064 	jz	00140$
      001FA0 7B 00            [12] 6065 	mov	r3,#0x00
      001FA2 8C 82            [24] 6066 	mov	dpl,r4
      001FA4 8B 83            [24] 6067 	mov	dph,r3
      001FA6 12r00r00         [24] 6068 	lcall	_putchar
      001FA9 0D               [12] 6069 	inc	r5
                                   6070 ;	calc.c:358: printstr("~\tbitwise not top\r\n");
      001FAA BD 00 E7         [24] 6071 	cjne	r5,#0x00,00202$
      001FAD 0E               [12] 6072 	inc	r6
      001FAE 80 E4            [24] 6073 	sjmp	00202$
      001FB0                       6074 00140$:
                                   6075 ;	calc.c:359: printstr("?\thelp\r\n");
      001FB0 7DrF4            [12] 6076 	mov	r5,#___str_33
      001FB2 7Es01            [12] 6077 	mov	r6,#(___str_33 >> 8)
      001FB4 7F 80            [12] 6078 	mov	r7,#0x80
                                   6079 ;	calc.c:50: return;
      001FB6                       6080 00205$:
                                   6081 ;	calc.c:48: for (; *s; s++) putchar(*s);
      001FB6 8D 82            [24] 6082 	mov	dpl,r5
      001FB8 8E 83            [24] 6083 	mov	dph,r6
      001FBA 8F F0            [24] 6084 	mov	b,r7
      001FBC 12r00r00         [24] 6085 	lcall	__gptrget
      001FBF FC               [12] 6086 	mov	r4,a
      001FC0 60 10            [24] 6087 	jz	00142$
      001FC2 7B 00            [12] 6088 	mov	r3,#0x00
      001FC4 8C 82            [24] 6089 	mov	dpl,r4
      001FC6 8B 83            [24] 6090 	mov	dph,r3
      001FC8 12r00r00         [24] 6091 	lcall	_putchar
      001FCB 0D               [12] 6092 	inc	r5
                                   6093 ;	calc.c:359: printstr("?\thelp\r\n");
      001FCC BD 00 E7         [24] 6094 	cjne	r5,#0x00,00205$
      001FCF 0E               [12] 6095 	inc	r6
      001FD0 80 E4            [24] 6096 	sjmp	00205$
      001FD2                       6097 00142$:
                                   6098 ;	calc.c:360: printstr("q\tquit\r\n");
      001FD2 7DrFD            [12] 6099 	mov	r5,#___str_34
      001FD4 7Es01            [12] 6100 	mov	r6,#(___str_34 >> 8)
      001FD6 7F 80            [12] 6101 	mov	r7,#0x80
                                   6102 ;	calc.c:50: return;
      001FD8                       6103 00208$:
                                   6104 ;	calc.c:48: for (; *s; s++) putchar(*s);
      001FD8 8D 82            [24] 6105 	mov	dpl,r5
      001FDA 8E 83            [24] 6106 	mov	dph,r6
      001FDC 8F F0            [24] 6107 	mov	b,r7
      001FDE 12r00r00         [24] 6108 	lcall	__gptrget
      001FE1 FC               [12] 6109 	mov	r4,a
      001FE2 60 10            [24] 6110 	jz	00144$
      001FE4 7B 00            [12] 6111 	mov	r3,#0x00
      001FE6 8C 82            [24] 6112 	mov	dpl,r4
      001FE8 8B 83            [24] 6113 	mov	dph,r3
      001FEA 12r00r00         [24] 6114 	lcall	_putchar
      001FED 0D               [12] 6115 	inc	r5
                                   6116 ;	calc.c:360: printstr("q\tquit\r\n");
      001FEE BD 00 E7         [24] 6117 	cjne	r5,#0x00,00208$
      001FF1 0E               [12] 6118 	inc	r6
      001FF2 80 E4            [24] 6119 	sjmp	00208$
      001FF4                       6120 00144$:
                                   6121 ;	calc.c:362: return 1;
      001FF4 90 00 01         [24] 6122 	mov	dptr,#0x0001
                                   6123 ;	calc.c:363: }
      001FF7 85*00 81         [24] 6124 	mov	sp,_bp
      001FFA D0*00            [24] 6125 	pop	_bp
      001FFC 22               [24] 6126 	ret
                                   6127 ;------------------------------------------------------------
                                   6128 ;Allocation info for local variables in function 'main'
                                   6129 ;------------------------------------------------------------
                                   6130 ;input                     Allocated to registers r6 r7 
                                   6131 ;------------------------------------------------------------
                                   6132 ;	calc.c:392: void main(void) {
                                   6133 ;	-----------------------------------------
                                   6134 ;	 function main
                                   6135 ;	-----------------------------------------
      001FFD                       6136 _main:
                                   6137 ;	calc.c:395: c.base = 10;
      001FFD 90r00r0C         [24] 6138 	mov	dptr,#_c
      002000 74 0A            [12] 6139 	mov	a,#0x0a
      002002 F0               [24] 6140 	movx	@dptr,a
      002003 E4               [12] 6141 	clr	a
      002004 A3               [24] 6142 	inc	dptr
      002005 F0               [24] 6143 	movx	@dptr,a
                                   6144 ;	calc.c:396: c.acc = 0l;
      002006 90r00r0E         [24] 6145 	mov	dptr,#(_c + 0x0002)
      002009 F0               [24] 6146 	movx	@dptr,a
      00200A A3               [24] 6147 	inc	dptr
      00200B F0               [24] 6148 	movx	@dptr,a
      00200C A3               [24] 6149 	inc	dptr
      00200D F0               [24] 6150 	movx	@dptr,a
      00200E A3               [24] 6151 	inc	dptr
      00200F F0               [24] 6152 	movx	@dptr,a
                                   6153 ;	calc.c:397: c.acc_valid = (char)0;
      002010 90r00r12         [24] 6154 	mov	dptr,#(_c + 0x0006)
      002013 F0               [24] 6155 	movx	@dptr,a
                                   6156 ;	calc.c:398: c.digit[0] = c.digit[1] = '\0';
      002014 90r00r14         [24] 6157 	mov	dptr,#(_c + 0x0008)
      002017 F0               [24] 6158 	movx	@dptr,a
      002018 90r00r13         [24] 6159 	mov	dptr,#(_c + 0x0007)
      00201B F0               [24] 6160 	movx	@dptr,a
                                   6161 ;	calc.c:399: stack_init(&c.s);	
      00201C 90r00r15         [24] 6162 	mov	dptr,#(_c + 0x0009)
      00201F 75 F0 00         [24] 6163 	mov	b,#0x00
      002022 12r00r00         [24] 6164 	lcall	_stack_init
                                   6165 ;	calc.c:400: state_init(&s, STATE_START, STATE_FINAL, UNDEF, deltas, &c);
      002025 74r0C            [12] 6166 	mov	a,#_c
      002027 C0 E0            [24] 6167 	push	acc
      002029 74s00            [12] 6168 	mov	a,#(_c >> 8)
      00202B C0 E0            [24] 6169 	push	acc
      00202D E4               [12] 6170 	clr	a
      00202E C0 E0            [24] 6171 	push	acc
      002030 74r00            [12] 6172 	mov	a,#_deltas
      002032 C0 E0            [24] 6173 	push	acc
      002034 74s00            [12] 6174 	mov	a,#(_deltas >> 8)
      002036 C0 E0            [24] 6175 	push	acc
      002038 E4               [12] 6176 	clr	a
      002039 C0 E0            [24] 6177 	push	acc
      00203B C0 E0            [24] 6178 	push	acc
      00203D 74 80            [12] 6179 	mov	a,#0x80
      00203F C0 E0            [24] 6180 	push	acc
      002041 74 03            [12] 6181 	mov	a,#0x03
      002043 C0 E0            [24] 6182 	push	acc
      002045 E4               [12] 6183 	clr	a
      002046 C0 E0            [24] 6184 	push	acc
      002048 C0 E0            [24] 6185 	push	acc
      00204A C0 E0            [24] 6186 	push	acc
      00204C 90r00r00         [24] 6187 	mov	dptr,#_s
      00204F 75 F0 00         [24] 6188 	mov	b,#0x00
      002052 12r00r00         [24] 6189 	lcall	_state_init
      002055 E5 81            [12] 6190 	mov	a,sp
      002057 24 F4            [12] 6191 	add	a,#0xf4
      002059 F5 81            [12] 6192 	mov	sp,a
                                   6193 ;	calc.c:402: while (1) {
      00205B                       6194 00170$:
                                   6195 ;	calc.c:403: input = getchar();
      00205B 12r00r05         [24] 6196 	lcall	_getchar
                                   6197 ;	calc.c:404: (void)putchar(input);
      00205E AE 82            [24] 6198 	mov	r6,dpl
      002060 AF 83            [24] 6199 	mov  r7,dph
      002062 12r00r00         [24] 6200 	lcall	_putchar
                                   6201 ;	calc.c:405: c.digit[0] = (char)input;
      002065 8E 05            [24] 6202 	mov	ar5,r6
      002067 90r00r13         [24] 6203 	mov	dptr,#(_c + 0x0007)
      00206A ED               [12] 6204 	mov	a,r5
      00206B F0               [24] 6205 	movx	@dptr,a
                                   6206 ;	calc.c:407: if ((char)input == 'q') {
      00206C BD 71 29         [24] 6207 	cjne	r5,#0x71,00167$
                                   6208 ;	calc.c:408: if (state_exec(&s, EVENT_TERM) <= 0) break;
      00206F 74 07            [12] 6209 	mov	a,#0x07
      002071 C0 E0            [24] 6210 	push	acc
      002073 E4               [12] 6211 	clr	a
      002074 C0 E0            [24] 6212 	push	acc
      002076 90r00r00         [24] 6213 	mov	dptr,#_s
      002079 75 F0 00         [24] 6214 	mov	b,#0x00
      00207C 12r00r00         [24] 6215 	lcall	_state_exec
      00207F AB 82            [24] 6216 	mov	r3,dpl
      002081 AC 83            [24] 6217 	mov	r4,dph
      002083 15 81            [12] 6218 	dec	sp
      002085 15 81            [12] 6219 	dec	sp
      002087 C3               [12] 6220 	clr	c
      002088 E4               [12] 6221 	clr	a
      002089 9B               [12] 6222 	subb	a,r3
      00208A 74 80            [12] 6223 	mov	a,#(0x00 ^ 0x80)
      00208C 8C F0            [24] 6224 	mov	b,r4
      00208E 63 F0 80         [24] 6225 	xrl	b,#0x80
      002091 95 F0            [12] 6226 	subb	a,b
      002093 40 C6            [24] 6227 	jc	00170$
      002095 02r22rBE         [24] 6228 	ljmp	00171$
      002098                       6229 00167$:
                                   6230 ;	calc.c:409: } else if ((char)input == '?') {
      002098 BD 3F 29         [24] 6231 	cjne	r5,#0x3f,00164$
                                   6232 ;	calc.c:410: if (state_exec(&s, EVENT_HELP) <= 0) break;
      00209B 74 03            [12] 6233 	mov	a,#0x03
      00209D C0 E0            [24] 6234 	push	acc
      00209F E4               [12] 6235 	clr	a
      0020A0 C0 E0            [24] 6236 	push	acc
      0020A2 90r00r00         [24] 6237 	mov	dptr,#_s
      0020A5 75 F0 00         [24] 6238 	mov	b,#0x00
      0020A8 12r00r00         [24] 6239 	lcall	_state_exec
      0020AB AB 82            [24] 6240 	mov	r3,dpl
      0020AD AC 83            [24] 6241 	mov	r4,dph
      0020AF 15 81            [12] 6242 	dec	sp
      0020B1 15 81            [12] 6243 	dec	sp
      0020B3 C3               [12] 6244 	clr	c
      0020B4 E4               [12] 6245 	clr	a
      0020B5 9B               [12] 6246 	subb	a,r3
      0020B6 74 80            [12] 6247 	mov	a,#(0x00 ^ 0x80)
      0020B8 8C F0            [24] 6248 	mov	b,r4
      0020BA 63 F0 80         [24] 6249 	xrl	b,#0x80
      0020BD 95 F0            [12] 6250 	subb	a,b
      0020BF 40 9A            [24] 6251 	jc	00170$
      0020C1 02r22rBE         [24] 6252 	ljmp	00171$
      0020C4                       6253 00164$:
                                   6254 ;	calc.c:411: } else if ((char)input == 'i') {
      0020C4 BD 69 2C         [24] 6255 	cjne	r5,#0x69,00161$
                                   6256 ;	calc.c:412: if (state_exec(&s, EVENT_RSTA_i) <= 0) break;
      0020C7 74 05            [12] 6257 	mov	a,#0x05
      0020C9 C0 E0            [24] 6258 	push	acc
      0020CB E4               [12] 6259 	clr	a
      0020CC C0 E0            [24] 6260 	push	acc
      0020CE 90r00r00         [24] 6261 	mov	dptr,#_s
      0020D1 75 F0 00         [24] 6262 	mov	b,#0x00
      0020D4 12r00r00         [24] 6263 	lcall	_state_exec
      0020D7 AB 82            [24] 6264 	mov	r3,dpl
      0020D9 AC 83            [24] 6265 	mov	r4,dph
      0020DB 15 81            [12] 6266 	dec	sp
      0020DD 15 81            [12] 6267 	dec	sp
      0020DF C3               [12] 6268 	clr	c
      0020E0 E4               [12] 6269 	clr	a
      0020E1 9B               [12] 6270 	subb	a,r3
      0020E2 74 80            [12] 6271 	mov	a,#(0x00 ^ 0x80)
      0020E4 8C F0            [24] 6272 	mov	b,r4
      0020E6 63 F0 80         [24] 6273 	xrl	b,#0x80
      0020E9 95 F0            [12] 6274 	subb	a,b
      0020EB 50 03            [24] 6275 	jnc	00310$
      0020ED 02r20r5B         [24] 6276 	ljmp	00170$
      0020F0                       6277 00310$:
      0020F0 02r22rBE         [24] 6278 	ljmp	00171$
      0020F3                       6279 00161$:
                                   6280 ;	calc.c:413: } else if ((char)input == 'I') {
      0020F3 BD 49 2C         [24] 6281 	cjne	r5,#0x49,00158$
                                   6282 ;	calc.c:414: if (state_exec(&s, EVENT_RSTA_I) <= 0) break;
      0020F6 74 06            [12] 6283 	mov	a,#0x06
      0020F8 C0 E0            [24] 6284 	push	acc
      0020FA E4               [12] 6285 	clr	a
      0020FB C0 E0            [24] 6286 	push	acc
      0020FD 90r00r00         [24] 6287 	mov	dptr,#_s
      002100 75 F0 00         [24] 6288 	mov	b,#0x00
      002103 12r00r00         [24] 6289 	lcall	_state_exec
      002106 AB 82            [24] 6290 	mov	r3,dpl
      002108 AC 83            [24] 6291 	mov	r4,dph
      00210A 15 81            [12] 6292 	dec	sp
      00210C 15 81            [12] 6293 	dec	sp
      00210E C3               [12] 6294 	clr	c
      00210F E4               [12] 6295 	clr	a
      002110 9B               [12] 6296 	subb	a,r3
      002111 74 80            [12] 6297 	mov	a,#(0x00 ^ 0x80)
      002113 8C F0            [24] 6298 	mov	b,r4
      002115 63 F0 80         [24] 6299 	xrl	b,#0x80
      002118 95 F0            [12] 6300 	subb	a,b
      00211A 50 03            [24] 6301 	jnc	00313$
      00211C 02r20r5B         [24] 6302 	ljmp	00170$
      00211F                       6303 00313$:
      00211F 02r22rBE         [24] 6304 	ljmp	00171$
      002122                       6305 00158$:
                                   6306 ;	calc.c:416: ((char)input == 'h') || ((char)input == 'H') ||
      002122 BD 68 02         [24] 6307 	cjne	r5,#0x68,00314$
      002125 80 0D            [24] 6308 	sjmp	00151$
      002127                       6309 00314$:
      002127 BD 48 02         [24] 6310 	cjne	r5,#0x48,00315$
      00212A 80 08            [24] 6311 	sjmp	00151$
      00212C                       6312 00315$:
                                   6313 ;	calc.c:417: ((char)input == 'o') || ((char)input == 'O')
      00212C BD 6F 02         [24] 6314 	cjne	r5,#0x6f,00316$
      00212F 80 03            [24] 6315 	sjmp	00151$
      002131                       6316 00316$:
      002131 BD 4F 2C         [24] 6317 	cjne	r5,#0x4f,00152$
      002134                       6318 00151$:
                                   6319 ;	calc.c:419: if (state_exec(&s, EVENT_BASE) <= 0) break;
      002134 74 04            [12] 6320 	mov	a,#0x04
      002136 C0 E0            [24] 6321 	push	acc
      002138 E4               [12] 6322 	clr	a
      002139 C0 E0            [24] 6323 	push	acc
      00213B 90r00r00         [24] 6324 	mov	dptr,#_s
      00213E 75 F0 00         [24] 6325 	mov	b,#0x00
      002141 12r00r00         [24] 6326 	lcall	_state_exec
      002144 AB 82            [24] 6327 	mov	r3,dpl
      002146 AC 83            [24] 6328 	mov	r4,dph
      002148 15 81            [12] 6329 	dec	sp
      00214A 15 81            [12] 6330 	dec	sp
      00214C C3               [12] 6331 	clr	c
      00214D E4               [12] 6332 	clr	a
      00214E 9B               [12] 6333 	subb	a,r3
      00214F 74 80            [12] 6334 	mov	a,#(0x00 ^ 0x80)
      002151 8C F0            [24] 6335 	mov	b,r4
      002153 63 F0 80         [24] 6336 	xrl	b,#0x80
      002156 95 F0            [12] 6337 	subb	a,b
      002158 50 03            [24] 6338 	jnc	00319$
      00215A 02r20r5B         [24] 6339 	ljmp	00170$
      00215D                       6340 00319$:
      00215D 02r22rBE         [24] 6341 	ljmp	00171$
      002160                       6342 00152$:
                                   6343 ;	calc.c:420: } else if (isxdigit(input)) {
      002160 8E 82            [24] 6344 	mov	dpl,r6
      002162 8F 83            [24] 6345 	mov	dph,r7
      002164 C0 05            [24] 6346 	push	ar5
      002166 12r00r00         [24] 6347 	lcall	_isxdigit
      002169 E5 82            [12] 6348 	mov	a,dpl
      00216B 85 83 F0         [24] 6349 	mov	b,dph
      00216E D0 05            [24] 6350 	pop	ar5
      002170 45 F0            [12] 6351 	orl	a,b
      002172 60 2C            [24] 6352 	jz	00149$
                                   6353 ;	calc.c:421: if (state_exec(&s, EVENT_DIGIT) <= 0) break;
      002174 74 01            [12] 6354 	mov	a,#0x01
      002176 C0 E0            [24] 6355 	push	acc
      002178 E4               [12] 6356 	clr	a
      002179 C0 E0            [24] 6357 	push	acc
      00217B 90r00r00         [24] 6358 	mov	dptr,#_s
      00217E 75 F0 00         [24] 6359 	mov	b,#0x00
      002181 12r00r00         [24] 6360 	lcall	_state_exec
      002184 AE 82            [24] 6361 	mov	r6,dpl
      002186 AF 83            [24] 6362 	mov	r7,dph
      002188 15 81            [12] 6363 	dec	sp
      00218A 15 81            [12] 6364 	dec	sp
      00218C C3               [12] 6365 	clr	c
      00218D E4               [12] 6366 	clr	a
      00218E 9E               [12] 6367 	subb	a,r6
      00218F 74 80            [12] 6368 	mov	a,#(0x00 ^ 0x80)
      002191 8F F0            [24] 6369 	mov	b,r7
      002193 63 F0 80         [24] 6370 	xrl	b,#0x80
      002196 95 F0            [12] 6371 	subb	a,b
      002198 50 03            [24] 6372 	jnc	00321$
      00219A 02r20r5B         [24] 6373 	ljmp	00170$
      00219D                       6374 00321$:
      00219D 02r22rBE         [24] 6375 	ljmp	00171$
      0021A0                       6376 00149$:
                                   6377 ;	calc.c:423: ((char)input == 'p') || ((char)input == 'P') ||
      0021A0 BD 70 02         [24] 6378 	cjne	r5,#0x70,00322$
      0021A3 80 17            [24] 6379 	sjmp	00140$
      0021A5                       6380 00322$:
      0021A5 BD 50 02         [24] 6381 	cjne	r5,#0x50,00323$
      0021A8 80 12            [24] 6382 	sjmp	00140$
      0021AA                       6383 00323$:
                                   6384 ;	calc.c:424: ((char)input == 'v') || ((char)input == 'V') ||
      0021AA BD 76 02         [24] 6385 	cjne	r5,#0x76,00324$
      0021AD 80 0D            [24] 6386 	sjmp	00140$
      0021AF                       6387 00324$:
      0021AF BD 56 02         [24] 6388 	cjne	r5,#0x56,00325$
      0021B2 80 08            [24] 6389 	sjmp	00140$
      0021B4                       6390 00325$:
                                   6391 ;	calc.c:425: ((char)input == '.') ||
      0021B4 BD 2E 02         [24] 6392 	cjne	r5,#0x2e,00326$
      0021B7 80 03            [24] 6393 	sjmp	00140$
      0021B9                       6394 00326$:
                                   6395 ;	calc.c:426: ((char)input == 'x')
      0021B9 BD 78 2C         [24] 6396 	cjne	r5,#0x78,00141$
      0021BC                       6397 00140$:
                                   6398 ;	calc.c:428: if (state_exec(&s, EVENT_OP) <= 0) break;
      0021BC 74 02            [12] 6399 	mov	a,#0x02
      0021BE C0 E0            [24] 6400 	push	acc
      0021C0 E4               [12] 6401 	clr	a
      0021C1 C0 E0            [24] 6402 	push	acc
      0021C3 90r00r00         [24] 6403 	mov	dptr,#_s
      0021C6 75 F0 00         [24] 6404 	mov	b,#0x00
      0021C9 12r00r00         [24] 6405 	lcall	_state_exec
      0021CC AE 82            [24] 6406 	mov	r6,dpl
      0021CE AF 83            [24] 6407 	mov	r7,dph
      0021D0 15 81            [12] 6408 	dec	sp
      0021D2 15 81            [12] 6409 	dec	sp
      0021D4 C3               [12] 6410 	clr	c
      0021D5 E4               [12] 6411 	clr	a
      0021D6 9E               [12] 6412 	subb	a,r6
      0021D7 74 80            [12] 6413 	mov	a,#(0x00 ^ 0x80)
      0021D9 8F F0            [24] 6414 	mov	b,r7
      0021DB 63 F0 80         [24] 6415 	xrl	b,#0x80
      0021DE 95 F0            [12] 6416 	subb	a,b
      0021E0 50 03            [24] 6417 	jnc	00329$
      0021E2 02r20r5B         [24] 6418 	ljmp	00170$
      0021E5                       6419 00329$:
      0021E5 02r22rBE         [24] 6420 	ljmp	00171$
      0021E8                       6421 00141$:
                                   6422 ;	calc.c:430: ((char)input == '+') || ((char)input == '-')
      0021E8 BD 2B 02         [24] 6423 	cjne	r5,#0x2b,00330$
      0021EB 80 03            [24] 6424 	sjmp	00136$
      0021ED                       6425 00330$:
      0021ED BD 2D 2C         [24] 6426 	cjne	r5,#0x2d,00137$
      0021F0                       6427 00136$:
                                   6428 ;	calc.c:432: if (state_exec(&s, EVENT_OP) <= 0) break;
      0021F0 74 02            [12] 6429 	mov	a,#0x02
      0021F2 C0 E0            [24] 6430 	push	acc
      0021F4 E4               [12] 6431 	clr	a
      0021F5 C0 E0            [24] 6432 	push	acc
      0021F7 90r00r00         [24] 6433 	mov	dptr,#_s
      0021FA 75 F0 00         [24] 6434 	mov	b,#0x00
      0021FD 12r00r00         [24] 6435 	lcall	_state_exec
      002200 AE 82            [24] 6436 	mov	r6,dpl
      002202 AF 83            [24] 6437 	mov	r7,dph
      002204 15 81            [12] 6438 	dec	sp
      002206 15 81            [12] 6439 	dec	sp
      002208 C3               [12] 6440 	clr	c
      002209 E4               [12] 6441 	clr	a
      00220A 9E               [12] 6442 	subb	a,r6
      00220B 74 80            [12] 6443 	mov	a,#(0x00 ^ 0x80)
      00220D 8F F0            [24] 6444 	mov	b,r7
      00220F 63 F0 80         [24] 6445 	xrl	b,#0x80
      002212 95 F0            [12] 6446 	subb	a,b
      002214 50 03            [24] 6447 	jnc	00333$
      002216 02r20r5B         [24] 6448 	ljmp	00170$
      002219                       6449 00333$:
      002219 02r22rBE         [24] 6450 	ljmp	00171$
      00221C                       6451 00137$:
                                   6452 ;	calc.c:434: ((char)input == '*') ||
      00221C BD 2A 02         [24] 6453 	cjne	r5,#0x2a,00334$
      00221F 80 12            [24] 6454 	sjmp	00129$
      002221                       6455 00334$:
                                   6456 ;	calc.c:435: ((char)input == '/') || ((char)input == '\\') ||
      002221 BD 2F 02         [24] 6457 	cjne	r5,#0x2f,00335$
      002224 80 0D            [24] 6458 	sjmp	00129$
      002226                       6459 00335$:
      002226 BD 5C 02         [24] 6460 	cjne	r5,#0x5c,00336$
      002229 80 08            [24] 6461 	sjmp	00129$
      00222B                       6462 00336$:
                                   6463 ;	calc.c:436: ((char)input == '%') || ((char)input == '#')
      00222B BD 25 02         [24] 6464 	cjne	r5,#0x25,00337$
      00222E 80 03            [24] 6465 	sjmp	00129$
      002230                       6466 00337$:
      002230 BD 23 29         [24] 6467 	cjne	r5,#0x23,00130$
      002233                       6468 00129$:
                                   6469 ;	calc.c:438: if (state_exec(&s, EVENT_OP) <= 0) break;
      002233 74 02            [12] 6470 	mov	a,#0x02
      002235 C0 E0            [24] 6471 	push	acc
      002237 E4               [12] 6472 	clr	a
      002238 C0 E0            [24] 6473 	push	acc
      00223A 90r00r00         [24] 6474 	mov	dptr,#_s
      00223D 75 F0 00         [24] 6475 	mov	b,#0x00
      002240 12r00r00         [24] 6476 	lcall	_state_exec
      002243 AE 82            [24] 6477 	mov	r6,dpl
      002245 AF 83            [24] 6478 	mov	r7,dph
      002247 15 81            [12] 6479 	dec	sp
      002249 15 81            [12] 6480 	dec	sp
      00224B C3               [12] 6481 	clr	c
      00224C E4               [12] 6482 	clr	a
      00224D 9E               [12] 6483 	subb	a,r6
      00224E 74 80            [12] 6484 	mov	a,#(0x00 ^ 0x80)
      002250 8F F0            [24] 6485 	mov	b,r7
      002252 63 F0 80         [24] 6486 	xrl	b,#0x80
      002255 95 F0            [12] 6487 	subb	a,b
      002257 50 65            [24] 6488 	jnc	00171$
      002259 02r20r5B         [24] 6489 	ljmp	00170$
      00225C                       6490 00130$:
                                   6491 ;	calc.c:440: ((char)input == '&') ||
      00225C BD 26 02         [24] 6492 	cjne	r5,#0x26,00341$
      00225F 80 0D            [24] 6493 	sjmp	00123$
      002261                       6494 00341$:
                                   6495 ;	calc.c:441: ((char)input == '|') || ((char)input == '^') ||
      002261 BD 7C 02         [24] 6496 	cjne	r5,#0x7c,00342$
      002264 80 08            [24] 6497 	sjmp	00123$
      002266                       6498 00342$:
      002266 BD 5E 02         [24] 6499 	cjne	r5,#0x5e,00343$
      002269 80 03            [24] 6500 	sjmp	00123$
      00226B                       6501 00343$:
                                   6502 ;	calc.c:442: ((char)input == '~')
      00226B BD 7E 29         [24] 6503 	cjne	r5,#0x7e,00124$
      00226E                       6504 00123$:
                                   6505 ;	calc.c:444: if (state_exec(&s, EVENT_OP) <= 0) break;
      00226E 74 02            [12] 6506 	mov	a,#0x02
      002270 C0 E0            [24] 6507 	push	acc
      002272 E4               [12] 6508 	clr	a
      002273 C0 E0            [24] 6509 	push	acc
      002275 90r00r00         [24] 6510 	mov	dptr,#_s
      002278 75 F0 00         [24] 6511 	mov	b,#0x00
      00227B 12r00r00         [24] 6512 	lcall	_state_exec
      00227E AE 82            [24] 6513 	mov	r6,dpl
      002280 AF 83            [24] 6514 	mov	r7,dph
      002282 15 81            [12] 6515 	dec	sp
      002284 15 81            [12] 6516 	dec	sp
      002286 C3               [12] 6517 	clr	c
      002287 E4               [12] 6518 	clr	a
      002288 9E               [12] 6519 	subb	a,r6
      002289 74 80            [12] 6520 	mov	a,#(0x00 ^ 0x80)
      00228B 8F F0            [24] 6521 	mov	b,r7
      00228D 63 F0 80         [24] 6522 	xrl	b,#0x80
      002290 95 F0            [12] 6523 	subb	a,b
      002292 50 2A            [24] 6524 	jnc	00171$
      002294 02r20r5B         [24] 6525 	ljmp	00170$
      002297                       6526 00124$:
                                   6527 ;	calc.c:446: if (state_exec(&s, EVENT_DELIM) <= 0) break;
      002297 E4               [12] 6528 	clr	a
      002298 C0 E0            [24] 6529 	push	acc
      00229A C0 E0            [24] 6530 	push	acc
      00229C 90r00r00         [24] 6531 	mov	dptr,#_s
      00229F 75 F0 00         [24] 6532 	mov	b,#0x00
      0022A2 12r00r00         [24] 6533 	lcall	_state_exec
      0022A5 AE 82            [24] 6534 	mov	r6,dpl
      0022A7 AF 83            [24] 6535 	mov	r7,dph
      0022A9 15 81            [12] 6536 	dec	sp
      0022AB 15 81            [12] 6537 	dec	sp
      0022AD C3               [12] 6538 	clr	c
      0022AE E4               [12] 6539 	clr	a
      0022AF 9E               [12] 6540 	subb	a,r6
      0022B0 74 80            [12] 6541 	mov	a,#(0x00 ^ 0x80)
      0022B2 8F F0            [24] 6542 	mov	b,r7
      0022B4 63 F0 80         [24] 6543 	xrl	b,#0x80
      0022B7 95 F0            [12] 6544 	subb	a,b
      0022B9 50 03            [24] 6545 	jnc	00347$
      0022BB 02r20r5B         [24] 6546 	ljmp	00170$
      0022BE                       6547 00347$:
      0022BE                       6548 00171$:
                                   6549 ;	calc.c:452: __endasm;
      0022BE 43 87 02         [24] 6550 	orl	pcon, #2
                                   6551 ;	calc.c:453: }
      0022C1 22               [24] 6552 	ret
                                   6553 	.area CSEG    (CODE)
                                   6554 	.area CONST   (CODE)
                                   6555 	.area CONST   (CODE)
      000000                       6556 ___str_0:
      000000 0D                    6557 	.db 0x0d
      000001 0A                    6558 	.db 0x0a
      000002 00                    6559 	.db 0x00
                                   6560 	.area CSEG    (CODE)
                                   6561 	.area CONST   (CODE)
      000003                       6562 ___str_1:
      000003 73 74 61 63 6B 20 75  6563 	.ascii "stack underflow"
             6E 64 65 72 66 6C 6F
             77
      000012 0D                    6564 	.db 0x0d
      000013 0A                    6565 	.db 0x0a
      000014 00                    6566 	.db 0x00
                                   6567 	.area CSEG    (CODE)
                                   6568 	.area CONST   (CODE)
      000015                       6569 ___str_2:
      000015 56 41 20              6570 	.ascii "VA "
      000018 00                    6571 	.db 0x00
                                   6572 	.area CSEG    (CODE)
                                   6573 	.area CONST   (CODE)
      000019                       6574 ___str_3:
      000019 25 20 31 31 6C 64 20  6575 	.ascii "% 11ld / "
             2F 20
      000022 00                    6576 	.db 0x00
                                   6577 	.area CSEG    (CODE)
                                   6578 	.area CONST   (CODE)
      000023                       6579 ___str_4:
      000023 25 30 38 6C 78 20 2F  6580 	.ascii "%08lx / "
             20
      00002B 00                    6581 	.db 0x00
                                   6582 	.area CSEG    (CODE)
                                   6583 	.area CONST   (CODE)
      00002C                       6584 ___str_5:
      00002C 50 41 20              6585 	.ascii "PA "
      00002F 00                    6586 	.db 0x00
                                   6587 	.area CSEG    (CODE)
                                   6588 	.area CONST   (CODE)
      000030                       6589 ___str_6:
      000030 50 54 20              6590 	.ascii "PT "
      000033 00                    6591 	.db 0x00
                                   6592 	.area CSEG    (CODE)
                                   6593 	.area CONST   (CODE)
      000034                       6594 ___str_7:
      000034 56 54 20              6595 	.ascii "VT "
      000037 00                    6596 	.db 0x00
                                   6597 	.area CSEG    (CODE)
                                   6598 	.area CONST   (CODE)
      000038                       6599 ___str_8:
      000038 0D                    6600 	.db 0x0d
      000039 0A                    6601 	.db 0x0a
      00003A 73 74 61 63 6B 20 75  6602 	.ascii "stack underflow"
             6E 64 65 72 66 6C 6F
             77
      000049 0D                    6603 	.db 0x0d
      00004A 0A                    6604 	.db 0x0a
      00004B 00                    6605 	.db 0x00
                                   6606 	.area CSEG    (CODE)
                                   6607 	.area CONST   (CODE)
      00004C                       6608 ___str_9:
      00004C 0D                    6609 	.db 0x0d
      00004D 0A                    6610 	.db 0x0a
      00004E 64 69 76 69 73 69 6F  6611 	.ascii "division by zero"
             6E 20 62 79 20 7A 65
             72 6F
      00005E 0D                    6612 	.db 0x0d
      00005F 0A                    6613 	.db 0x0a
      000060 00                    6614 	.db 0x00
                                   6615 	.area CSEG    (CODE)
                                   6616 	.area CONST   (CODE)
      000061                       6617 ___str_10:
      000061 0D                    6618 	.db 0x0d
      000062 0A                    6619 	.db 0x0a
      000063 73 74 61 63 6B 20 6F  6620 	.ascii "stack overflow"
             76 65 72 66 6C 6F 77
      000071 0D                    6621 	.db 0x0d
      000072 0A                    6622 	.db 0x0a
      000073 00                    6623 	.db 0x00
                                   6624 	.area CSEG    (CODE)
                                   6625 	.area CONST   (CODE)
      000074                       6626 ___str_11:
      000074 0D                    6627 	.db 0x0d
      000075 0A                    6628 	.db 0x0a
      000076 62 61 73 65 20 3D 20  6629 	.ascii "base = %d, "
             25 64 2C 20
      000081 00                    6630 	.db 0x00
                                   6631 	.area CSEG    (CODE)
                                   6632 	.area CONST   (CODE)
      000082                       6633 ___str_12:
      000082 61 63 63 20 3D 20 25  6634 	.ascii "acc = %ld / "
             6C 64 20 2F 20
      00008E 00                    6635 	.db 0x00
                                   6636 	.area CSEG    (CODE)
                                   6637 	.area CONST   (CODE)
      00008F                       6638 ___str_13:
      00008F 2C 20 61 63 63 5F 76  6639 	.ascii ", acc_valid = %d"
             61 6C 69 64 20 3D 20
             25 64
      00009F 0D                    6640 	.db 0x0d
      0000A0 0A                    6641 	.db 0x0a
      0000A1 0D                    6642 	.db 0x0d
      0000A2 0A                    6643 	.db 0x0a
      0000A3 00                    6644 	.db 0x00
                                   6645 	.area CSEG    (CODE)
                                   6646 	.area CONST   (CODE)
      0000A4                       6647 ___str_14:
      0000A4 48 68 4F 6F           6648 	.ascii "HhOo"
      0000A8 09                    6649 	.db 0x09
      0000A9 62 61 73 65 20 31 36  6650 	.ascii "base 16 10 8 2"
             20 31 30 20 38 20 32
      0000B7 0D                    6651 	.db 0x0d
      0000B8 0A                    6652 	.db 0x0a
      0000B9 00                    6653 	.db 0x00
                                   6654 	.area CSEG    (CODE)
                                   6655 	.area CONST   (CODE)
      0000BA                       6656 ___str_15:
      0000BA 70                    6657 	.ascii "p"
      0000BB 09                    6658 	.db 0x09
      0000BC 70 65 65 6B 20 74 6F  6659 	.ascii "peek top"
             70
      0000C4 0D                    6660 	.db 0x0d
      0000C5 0A                    6661 	.db 0x0a
      0000C6 00                    6662 	.db 0x00
                                   6663 	.area CSEG    (CODE)
                                   6664 	.area CONST   (CODE)
      0000C7                       6665 ___str_16:
      0000C7 50                    6666 	.ascii "P"
      0000C8 09                    6667 	.db 0x09
      0000C9 70 72 69 6E 74 20 73  6668 	.ascii "print stack"
             74 61 63 6B
      0000D4 0D                    6669 	.db 0x0d
      0000D5 0A                    6670 	.db 0x0a
      0000D6 00                    6671 	.db 0x00
                                   6672 	.area CSEG    (CODE)
                                   6673 	.area CONST   (CODE)
      0000D7                       6674 ___str_17:
      0000D7 76 2E                 6675 	.ascii "v."
      0000D9 09                    6676 	.db 0x09
      0000DA 70 6F 70 20 74 6F 70  6677 	.ascii "pop top"
      0000E1 0D                    6678 	.db 0x0d
      0000E2 0A                    6679 	.db 0x0a
      0000E3 00                    6680 	.db 0x00
                                   6681 	.area CSEG    (CODE)
                                   6682 	.area CONST   (CODE)
      0000E4                       6683 ___str_18:
      0000E4 56                    6684 	.ascii "V"
      0000E5 09                    6685 	.db 0x09
      0000E6 70 6F 70 20 61 6C 6C  6686 	.ascii "pop all"
      0000ED 0D                    6687 	.db 0x0d
      0000EE 0A                    6688 	.db 0x0a
      0000EF 00                    6689 	.db 0x00
                                   6690 	.area CSEG    (CODE)
                                   6691 	.area CONST   (CODE)
      0000F0                       6692 ___str_19:
      0000F0 69                    6693 	.ascii "i"
      0000F1 09                    6694 	.db 0x09
      0000F2 72 65 73 65 74 20 61  6695 	.ascii "reset acc"
             63 63
      0000FB 0D                    6696 	.db 0x0d
      0000FC 0A                    6697 	.db 0x0a
      0000FD 00                    6698 	.db 0x00
                                   6699 	.area CSEG    (CODE)
                                   6700 	.area CONST   (CODE)
      0000FE                       6701 ___str_20:
      0000FE 49                    6702 	.ascii "I"
      0000FF 09                    6703 	.db 0x09
      000100 72 65 73 65 74 20 61  6704 	.ascii "reset and discard acc"
             6E 64 20 64 69 73 63
             61 72 64 20 61 63 63
      000115 0D                    6705 	.db 0x0d
      000116 0A                    6706 	.db 0x0a
      000117 00                    6707 	.db 0x00
                                   6708 	.area CSEG    (CODE)
                                   6709 	.area CONST   (CODE)
      000118                       6710 ___str_21:
      000118 78                    6711 	.ascii "x"
      000119 09                    6712 	.db 0x09
      00011A 65 78 63 68 61 6E 67  6713 	.ascii "exchange top 2"
             65 20 74 6F 70 20 32
      000128 0D                    6714 	.db 0x0d
      000129 0A                    6715 	.db 0x0a
      00012A 00                    6716 	.db 0x00
                                   6717 	.area CSEG    (CODE)
                                   6718 	.area CONST   (CODE)
      00012B                       6719 ___str_22:
      00012B 2B                    6720 	.ascii "+"
      00012C 09                    6721 	.db 0x09
      00012D 61 64 64 20 74 6F 70  6722 	.ascii "add top 2"
             20 32
      000136 0D                    6723 	.db 0x0d
      000137 0A                    6724 	.db 0x0a
      000138 00                    6725 	.db 0x00
                                   6726 	.area CSEG    (CODE)
                                   6727 	.area CONST   (CODE)
      000139                       6728 ___str_23:
      000139 2D                    6729 	.ascii "-"
      00013A 09                    6730 	.db 0x09
      00013B 73 75 62 74 72 61 63  6731 	.ascii "subtract top 2"
             74 20 74 6F 70 20 32
      000149 0D                    6732 	.db 0x0d
      00014A 0A                    6733 	.db 0x0a
      00014B 00                    6734 	.db 0x00
                                   6735 	.area CSEG    (CODE)
                                   6736 	.area CONST   (CODE)
      00014C                       6737 ___str_24:
      00014C 2A                    6738 	.ascii "*"
      00014D 09                    6739 	.db 0x09
      00014E 6D 75 6C 74 69 70 6C  6740 	.ascii "multiply top 2"
             79 20 74 6F 70 20 32
      00015C 0D                    6741 	.db 0x0d
      00015D 0A                    6742 	.db 0x0a
      00015E 00                    6743 	.db 0x00
                                   6744 	.area CSEG    (CODE)
                                   6745 	.area CONST   (CODE)
      00015F                       6746 ___str_25:
      00015F 2F                    6747 	.ascii "/"
      000160 09                    6748 	.db 0x09
      000161 64 69 76 69 64 65 20  6749 	.ascii "divide top 2"
             74 6F 70 20 32
      00016D 0D                    6750 	.db 0x0d
      00016E 0A                    6751 	.db 0x0a
      00016F 00                    6752 	.db 0x00
                                   6753 	.area CSEG    (CODE)
                                   6754 	.area CONST   (CODE)
      000170                       6755 ___str_26:
      000170 5C                    6756 	.db 0x5c
      000171 09                    6757 	.db 0x09
      000172 64 69 76 69 64 65 20  6758 	.ascii "divide top 2 unsigned"
             74 6F 70 20 32 20 75
             6E 73 69 67 6E 65 64
      000187 0D                    6759 	.db 0x0d
      000188 0A                    6760 	.db 0x0a
      000189 00                    6761 	.db 0x00
                                   6762 	.area CSEG    (CODE)
                                   6763 	.area CONST   (CODE)
      00018A                       6764 ___str_27:
      00018A 25                    6765 	.ascii "%"
      00018B 09                    6766 	.db 0x09
      00018C 6D 6F 64 75 6C 75 73  6767 	.ascii "modulus top 2"
             20 74 6F 70 20 32
      000199 0D                    6768 	.db 0x0d
      00019A 0A                    6769 	.db 0x0a
      00019B 00                    6770 	.db 0x00
                                   6771 	.area CSEG    (CODE)
                                   6772 	.area CONST   (CODE)
      00019C                       6773 ___str_28:
      00019C 23                    6774 	.ascii "#"
      00019D 09                    6775 	.db 0x09
      00019E 6D 6F 64 75 6C 75 73  6776 	.ascii "modulus top 2 unsigned"
             20 74 6F 70 20 32 20
             75 6E 73 69 67 6E 65
             64
      0001B4 0D                    6777 	.db 0x0d
      0001B5 0A                    6778 	.db 0x0a
      0001B6 00                    6779 	.db 0x00
                                   6780 	.area CSEG    (CODE)
                                   6781 	.area CONST   (CODE)
      0001B7                       6782 ___str_29:
      0001B7 26                    6783 	.ascii "&"
      0001B8 09                    6784 	.db 0x09
      0001B9 61 6E 64 20 74 6F 70  6785 	.ascii "and top 2"
             20 32
      0001C2 0D                    6786 	.db 0x0d
      0001C3 0A                    6787 	.db 0x0a
      0001C4 00                    6788 	.db 0x00
                                   6789 	.area CSEG    (CODE)
                                   6790 	.area CONST   (CODE)
      0001C5                       6791 ___str_30:
      0001C5 7C                    6792 	.ascii "|"
      0001C6 09                    6793 	.db 0x09
      0001C7 6F 72 20 74 6F 70 20  6794 	.ascii "or top 2"
             32
      0001CF 0D                    6795 	.db 0x0d
      0001D0 0A                    6796 	.db 0x0a
      0001D1 00                    6797 	.db 0x00
                                   6798 	.area CSEG    (CODE)
                                   6799 	.area CONST   (CODE)
      0001D2                       6800 ___str_31:
      0001D2 5E                    6801 	.ascii "^"
      0001D3 09                    6802 	.db 0x09
      0001D4 78 6F 72 20 74 6F 70  6803 	.ascii "xor top 2"
             20 32
      0001DD 0D                    6804 	.db 0x0d
      0001DE 0A                    6805 	.db 0x0a
      0001DF 00                    6806 	.db 0x00
                                   6807 	.area CSEG    (CODE)
                                   6808 	.area CONST   (CODE)
      0001E0                       6809 ___str_32:
      0001E0 7E                    6810 	.ascii "~"
      0001E1 09                    6811 	.db 0x09
      0001E2 62 69 74 77 69 73 65  6812 	.ascii "bitwise not top"
             20 6E 6F 74 20 74 6F
             70
      0001F1 0D                    6813 	.db 0x0d
      0001F2 0A                    6814 	.db 0x0a
      0001F3 00                    6815 	.db 0x00
                                   6816 	.area CSEG    (CODE)
                                   6817 	.area CONST   (CODE)
      0001F4                       6818 ___str_33:
      0001F4 3F                    6819 	.ascii "?"
      0001F5 09                    6820 	.db 0x09
      0001F6 68 65 6C 70           6821 	.ascii "help"
      0001FA 0D                    6822 	.db 0x0d
      0001FB 0A                    6823 	.db 0x0a
      0001FC 00                    6824 	.db 0x00
                                   6825 	.area CSEG    (CODE)
                                   6826 	.area CONST   (CODE)
      0001FD                       6827 ___str_34:
      0001FD 71                    6828 	.ascii "q"
      0001FE 09                    6829 	.db 0x09
      0001FF 71 75 69 74           6830 	.ascii "quit"
      000203 0D                    6831 	.db 0x0d
      000204 0A                    6832 	.db 0x0a
      000205 00                    6833 	.db 0x00
                                   6834 	.area CSEG    (CODE)
                                   6835 	.area XINIT   (CODE)
      000000                       6836 __xinit__deltas:
      000000 00 00                 6837 	.byte #0x00, #0x00	;  0
      000002 00 00                 6838 	.byte #0x00, #0x00	;  0
      000004 00 00                 6839 	.byte #0x00, #0x00	;  0
      000006 00 00                 6840 	.byte #0x00,#0x00
      000008 00 00                 6841 	.byte #0x00,#0x00
      00000A 00 00                 6842 	.byte #0x00, #0x00	;  0
      00000C 01 00                 6843 	.byte #0x01, #0x00	;  1
      00000E 02 00                 6844 	.byte #0x02, #0x00	;  2
      000010 00 00                 6845 	.byte #0x00,#0x00
      000012rCBs00                 6846 	.byte _accumulate, (_accumulate >> 8)
      000014 00 00                 6847 	.byte #0x00, #0x00	;  0
      000016 02 00                 6848 	.byte #0x02, #0x00	;  2
      000018 01 00                 6849 	.byte #0x01, #0x00	;  1
      00001A 00 00                 6850 	.byte #0x00,#0x00
      00001Cr24s06                 6851 	.byte _operator, (_operator >> 8)
      00001E 01 00                 6852 	.byte #0x01, #0x00	;  1
      000020 00 00                 6853 	.byte #0x00, #0x00	;  0
      000022 00 00                 6854 	.byte #0x00, #0x00	;  0
      000024 00 00                 6855 	.byte #0x00,#0x00
      000026 00 00                 6856 	.byte #0x00,#0x00
      000028 01 00                 6857 	.byte #0x01, #0x00	;  1
      00002A 02 00                 6858 	.byte #0x02, #0x00	;  2
      00002C 01 00                 6859 	.byte #0x01, #0x00	;  1
      00002E 00 00                 6860 	.byte #0x00,#0x00
      000030r24s06                 6861 	.byte _operator, (_operator >> 8)
      000032 01 00                 6862 	.byte #0x01, #0x00	;  1
      000034 01 00                 6863 	.byte #0x01, #0x00	;  1
      000036 02 00                 6864 	.byte #0x02, #0x00	;  2
      000038 00 00                 6865 	.byte #0x00,#0x00
      00003ArCBs00                 6866 	.byte _accumulate, (_accumulate >> 8)
      00003C 02 00                 6867 	.byte #0x02, #0x00	;  2
      00003E 00 00                 6868 	.byte #0x00, #0x00	;  0
      000040 00 00                 6869 	.byte #0x00, #0x00	;  0
      000042 00 00                 6870 	.byte #0x00,#0x00
      000044r93s19                 6871 	.byte _push_acc, (_push_acc >> 8)
      000046 02 00                 6872 	.byte #0x02, #0x00	;  2
      000048 06 00                 6873 	.byte #0x06, #0x00	;  6
      00004A 00 00                 6874 	.byte #0x00, #0x00	;  0
      00004C 00 00                 6875 	.byte #0x00,#0x00
      00004ErA1s1A                 6876 	.byte _reset_acc, (_reset_acc >> 8)
      000050 02 00                 6877 	.byte #0x02, #0x00	;  2
      000052 01 00                 6878 	.byte #0x01, #0x00	;  1
      000054 02 00                 6879 	.byte #0x02, #0x00	;  2
      000056 00 00                 6880 	.byte #0x00,#0x00
      000058rCBs00                 6881 	.byte _accumulate, (_accumulate >> 8)
      00005A 02 00                 6882 	.byte #0x02, #0x00	;  2
      00005C 02 00                 6883 	.byte #0x02, #0x00	;  2
      00005E 01 00                 6884 	.byte #0x01, #0x00	;  1
      000060 00 00                 6885 	.byte #0x00,#0x00
      000062r93s19                 6886 	.byte _push_acc, (_push_acc >> 8)
      000064 FF 7F                 6887 	.byte #0xff, #0x7f	;  32767
      000066 05 00                 6888 	.byte #0x05, #0x00	;  5
      000068 FF 7F                 6889 	.byte #0xff, #0x7f	;  32767
      00006A 00 00                 6890 	.byte #0x00,#0x00
      00006CrA1s1A                 6891 	.byte _reset_acc, (_reset_acc >> 8)
      00006E FF 7F                 6892 	.byte #0xff, #0x7f	;  32767
      000070 06 00                 6893 	.byte #0x06, #0x00	;  6
      000072 FF 7F                 6894 	.byte #0xff, #0x7f	;  32767
      000074 00 00                 6895 	.byte #0x00,#0x00
      000076 00 00                 6896 	.byte #0x00,#0x00
      000078 FF 7F                 6897 	.byte #0xff, #0x7f	;  32767
      00007A 04 00                 6898 	.byte #0x04, #0x00	;  4
      00007C FF 7F                 6899 	.byte #0xff, #0x7f	;  32767
      00007E 00 00                 6900 	.byte #0x00,#0x00
      000080r0Bs1B                 6901 	.byte _reset_base, (_reset_base >> 8)
      000082 FF 7F                 6902 	.byte #0xff, #0x7f	;  32767
      000084 03 00                 6903 	.byte #0x03, #0x00	;  3
      000086 FF 7F                 6904 	.byte #0xff, #0x7f	;  32767
      000088 00 00                 6905 	.byte #0x00,#0x00
      00008Ar89s1B                 6906 	.byte _help, (_help >> 8)
      00008C FF 7F                 6907 	.byte #0xff, #0x7f	;  32767
      00008E 07 00                 6908 	.byte #0x07, #0x00	;  7
      000090 03 00                 6909 	.byte #0x03, #0x00	;  3
      000092 00 00                 6910 	.byte #0x00,#0x00
      000094r3Cs02                 6911 	.byte _dump_pop, (_dump_pop >> 8)
      000096 00 80                 6912 	.byte #0x00, #0x80	; -32768
      000098 00 80                 6913 	.byte #0x00, #0x80	; -32768
      00009A 00 80                 6914 	.byte #0x00, #0x80	; -32768
      00009C 00 00                 6915 	.byte #0x00,#0x00
      00009E 00 00                 6916 	.byte #0x00,#0x00
                                   6917 	.area CABS    (ABS,CODE)
