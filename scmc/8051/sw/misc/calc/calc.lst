                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module calc
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _getchar_poll
                                     13 	.globl _stack_iter_peek
                                     14 	.globl _stack_peek
                                     15 	.globl _stack_pop
                                     16 	.globl _stack_push
                                     17 	.globl _stack_init
                                     18 	.globl _state_exec
                                     19 	.globl _state_init
                                     20 	.globl _isxdigit
                                     21 	.globl _printf
                                     22 	.globl _strtol
                                     23 	.globl _CY
                                     24 	.globl _AC
                                     25 	.globl _F0
                                     26 	.globl _RS1
                                     27 	.globl _RS0
                                     28 	.globl _OV
                                     29 	.globl _FL
                                     30 	.globl _P
                                     31 	.globl _TF2
                                     32 	.globl _EXF2
                                     33 	.globl _RCLK
                                     34 	.globl _TCLK
                                     35 	.globl _EXEN2
                                     36 	.globl _TR2
                                     37 	.globl _C_T2
                                     38 	.globl _CP_RL2
                                     39 	.globl _T2CON_7
                                     40 	.globl _T2CON_6
                                     41 	.globl _T2CON_5
                                     42 	.globl _T2CON_4
                                     43 	.globl _T2CON_3
                                     44 	.globl _T2CON_2
                                     45 	.globl _T2CON_1
                                     46 	.globl _T2CON_0
                                     47 	.globl _PT2
                                     48 	.globl _PS
                                     49 	.globl _PT1
                                     50 	.globl _PX1
                                     51 	.globl _PT0
                                     52 	.globl _PX0
                                     53 	.globl _RD
                                     54 	.globl _WR
                                     55 	.globl _T1
                                     56 	.globl _T0
                                     57 	.globl _INT1
                                     58 	.globl _INT0
                                     59 	.globl _TXD
                                     60 	.globl _RXD
                                     61 	.globl _P3_7
                                     62 	.globl _P3_6
                                     63 	.globl _P3_5
                                     64 	.globl _P3_4
                                     65 	.globl _P3_3
                                     66 	.globl _P3_2
                                     67 	.globl _P3_1
                                     68 	.globl _P3_0
                                     69 	.globl _EA
                                     70 	.globl _ET2
                                     71 	.globl _ES
                                     72 	.globl _ET1
                                     73 	.globl _EX1
                                     74 	.globl _ET0
                                     75 	.globl _EX0
                                     76 	.globl _P2_7
                                     77 	.globl _P2_6
                                     78 	.globl _P2_5
                                     79 	.globl _P2_4
                                     80 	.globl _P2_3
                                     81 	.globl _P2_2
                                     82 	.globl _P2_1
                                     83 	.globl _P2_0
                                     84 	.globl _SM0
                                     85 	.globl _SM1
                                     86 	.globl _SM2
                                     87 	.globl _REN
                                     88 	.globl _TB8
                                     89 	.globl _RB8
                                     90 	.globl _TI
                                     91 	.globl _RI
                                     92 	.globl _T2EX
                                     93 	.globl _T2
                                     94 	.globl _P1_7
                                     95 	.globl _P1_6
                                     96 	.globl _P1_5
                                     97 	.globl _P1_4
                                     98 	.globl _P1_3
                                     99 	.globl _P1_2
                                    100 	.globl _P1_1
                                    101 	.globl _P1_0
                                    102 	.globl _TF1
                                    103 	.globl _TR1
                                    104 	.globl _TF0
                                    105 	.globl _TR0
                                    106 	.globl _IE1
                                    107 	.globl _IT1
                                    108 	.globl _IE0
                                    109 	.globl _IT0
                                    110 	.globl _P0_7
                                    111 	.globl _P0_6
                                    112 	.globl _P0_5
                                    113 	.globl _P0_4
                                    114 	.globl _P0_3
                                    115 	.globl _P0_2
                                    116 	.globl _P0_1
                                    117 	.globl _P0_0
                                    118 	.globl _B
                                    119 	.globl _A
                                    120 	.globl _ACC
                                    121 	.globl _PSW
                                    122 	.globl _TH2
                                    123 	.globl _TL2
                                    124 	.globl _RCAP2H
                                    125 	.globl _RCAP2L
                                    126 	.globl _T2MOD
                                    127 	.globl _T2CON
                                    128 	.globl _IP
                                    129 	.globl _P3
                                    130 	.globl _IE
                                    131 	.globl _P2
                                    132 	.globl _SBUF
                                    133 	.globl _SCON
                                    134 	.globl _P1
                                    135 	.globl _TH1
                                    136 	.globl _TH0
                                    137 	.globl _TL1
                                    138 	.globl _TL0
                                    139 	.globl _TMOD
                                    140 	.globl _TCON
                                    141 	.globl _PCON
                                    142 	.globl _DPH
                                    143 	.globl _DPL
                                    144 	.globl _SP
                                    145 	.globl _P0
                                    146 	.globl _putchar
                                    147 	.globl _getchar
                                    148 ;--------------------------------------------------------
                                    149 ; special function registers
                                    150 ;--------------------------------------------------------
                                    151 	.area RSEG    (ABS,DATA)
      000000                        152 	.org 0x0000
                           000080   153 _P0	=	0x0080
                           000081   154 _SP	=	0x0081
                           000082   155 _DPL	=	0x0082
                           000083   156 _DPH	=	0x0083
                           000087   157 _PCON	=	0x0087
                           000088   158 _TCON	=	0x0088
                           000089   159 _TMOD	=	0x0089
                           00008A   160 _TL0	=	0x008a
                           00008B   161 _TL1	=	0x008b
                           00008C   162 _TH0	=	0x008c
                           00008D   163 _TH1	=	0x008d
                           000090   164 _P1	=	0x0090
                           000098   165 _SCON	=	0x0098
                           000099   166 _SBUF	=	0x0099
                           0000A0   167 _P2	=	0x00a0
                           0000A8   168 _IE	=	0x00a8
                           0000B0   169 _P3	=	0x00b0
                           0000B8   170 _IP	=	0x00b8
                           0000C8   171 _T2CON	=	0x00c8
                           0000C9   172 _T2MOD	=	0x00c9
                           0000CA   173 _RCAP2L	=	0x00ca
                           0000CB   174 _RCAP2H	=	0x00cb
                           0000CC   175 _TL2	=	0x00cc
                           0000CD   176 _TH2	=	0x00cd
                           0000D0   177 _PSW	=	0x00d0
                           0000E0   178 _ACC	=	0x00e0
                           0000E0   179 _A	=	0x00e0
                           0000F0   180 _B	=	0x00f0
                                    181 ;--------------------------------------------------------
                                    182 ; special function bits
                                    183 ;--------------------------------------------------------
                                    184 	.area RSEG    (ABS,DATA)
      000000                        185 	.org 0x0000
                           000080   186 _P0_0	=	0x0080
                           000081   187 _P0_1	=	0x0081
                           000082   188 _P0_2	=	0x0082
                           000083   189 _P0_3	=	0x0083
                           000084   190 _P0_4	=	0x0084
                           000085   191 _P0_5	=	0x0085
                           000086   192 _P0_6	=	0x0086
                           000087   193 _P0_7	=	0x0087
                           000088   194 _IT0	=	0x0088
                           000089   195 _IE0	=	0x0089
                           00008A   196 _IT1	=	0x008a
                           00008B   197 _IE1	=	0x008b
                           00008C   198 _TR0	=	0x008c
                           00008D   199 _TF0	=	0x008d
                           00008E   200 _TR1	=	0x008e
                           00008F   201 _TF1	=	0x008f
                           000090   202 _P1_0	=	0x0090
                           000091   203 _P1_1	=	0x0091
                           000092   204 _P1_2	=	0x0092
                           000093   205 _P1_3	=	0x0093
                           000094   206 _P1_4	=	0x0094
                           000095   207 _P1_5	=	0x0095
                           000096   208 _P1_6	=	0x0096
                           000097   209 _P1_7	=	0x0097
                           000090   210 _T2	=	0x0090
                           000091   211 _T2EX	=	0x0091
                           000098   212 _RI	=	0x0098
                           000099   213 _TI	=	0x0099
                           00009A   214 _RB8	=	0x009a
                           00009B   215 _TB8	=	0x009b
                           00009C   216 _REN	=	0x009c
                           00009D   217 _SM2	=	0x009d
                           00009E   218 _SM1	=	0x009e
                           00009F   219 _SM0	=	0x009f
                           0000A0   220 _P2_0	=	0x00a0
                           0000A1   221 _P2_1	=	0x00a1
                           0000A2   222 _P2_2	=	0x00a2
                           0000A3   223 _P2_3	=	0x00a3
                           0000A4   224 _P2_4	=	0x00a4
                           0000A5   225 _P2_5	=	0x00a5
                           0000A6   226 _P2_6	=	0x00a6
                           0000A7   227 _P2_7	=	0x00a7
                           0000A8   228 _EX0	=	0x00a8
                           0000A9   229 _ET0	=	0x00a9
                           0000AA   230 _EX1	=	0x00aa
                           0000AB   231 _ET1	=	0x00ab
                           0000AC   232 _ES	=	0x00ac
                           0000AD   233 _ET2	=	0x00ad
                           0000AF   234 _EA	=	0x00af
                           0000B0   235 _P3_0	=	0x00b0
                           0000B1   236 _P3_1	=	0x00b1
                           0000B2   237 _P3_2	=	0x00b2
                           0000B3   238 _P3_3	=	0x00b3
                           0000B4   239 _P3_4	=	0x00b4
                           0000B5   240 _P3_5	=	0x00b5
                           0000B6   241 _P3_6	=	0x00b6
                           0000B7   242 _P3_7	=	0x00b7
                           0000B0   243 _RXD	=	0x00b0
                           0000B1   244 _TXD	=	0x00b1
                           0000B2   245 _INT0	=	0x00b2
                           0000B3   246 _INT1	=	0x00b3
                           0000B4   247 _T0	=	0x00b4
                           0000B5   248 _T1	=	0x00b5
                           0000B6   249 _WR	=	0x00b6
                           0000B7   250 _RD	=	0x00b7
                           0000B8   251 _PX0	=	0x00b8
                           0000B9   252 _PT0	=	0x00b9
                           0000BA   253 _PX1	=	0x00ba
                           0000BB   254 _PT1	=	0x00bb
                           0000BC   255 _PS	=	0x00bc
                           0000BD   256 _PT2	=	0x00bd
                           0000C8   257 _T2CON_0	=	0x00c8
                           0000C9   258 _T2CON_1	=	0x00c9
                           0000CA   259 _T2CON_2	=	0x00ca
                           0000CB   260 _T2CON_3	=	0x00cb
                           0000CC   261 _T2CON_4	=	0x00cc
                           0000CD   262 _T2CON_5	=	0x00cd
                           0000CE   263 _T2CON_6	=	0x00ce
                           0000CF   264 _T2CON_7	=	0x00cf
                           0000C8   265 _CP_RL2	=	0x00c8
                           0000C9   266 _C_T2	=	0x00c9
                           0000CA   267 _TR2	=	0x00ca
                           0000CB   268 _EXEN2	=	0x00cb
                           0000CC   269 _TCLK	=	0x00cc
                           0000CD   270 _RCLK	=	0x00cd
                           0000CE   271 _EXF2	=	0x00ce
                           0000CF   272 _TF2	=	0x00cf
                           0000D0   273 _P	=	0x00d0
                           0000D1   274 _FL	=	0x00d1
                           0000D2   275 _OV	=	0x00d2
                           0000D3   276 _RS0	=	0x00d3
                           0000D4   277 _RS1	=	0x00d4
                           0000D5   278 _F0	=	0x00d5
                           0000D6   279 _AC	=	0x00d6
                           0000D7   280 _CY	=	0x00d7
                                    281 ;--------------------------------------------------------
                                    282 ; overlayable register banks
                                    283 ;--------------------------------------------------------
                                    284 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        285 	.ds 8
                                    286 ;--------------------------------------------------------
                                    287 ; internal ram data
                                    288 ;--------------------------------------------------------
                                    289 	.area DSEG    (DATA)
                                    290 ;--------------------------------------------------------
                                    291 ; overlayable items in internal ram 
                                    292 ;--------------------------------------------------------
                                    293 ;--------------------------------------------------------
                                    294 ; Stack segment in internal ram 
                                    295 ;--------------------------------------------------------
                                    296 	.area	SSEG
      000000                        297 __start__stack:
      000000                        298 	.ds	1
                                    299 
                                    300 ;--------------------------------------------------------
                                    301 ; indirectly addressable internal ram data
                                    302 ;--------------------------------------------------------
                                    303 	.area ISEG    (DATA)
                                    304 ;--------------------------------------------------------
                                    305 ; absolute internal ram data
                                    306 ;--------------------------------------------------------
                                    307 	.area IABS    (ABS,DATA)
                                    308 	.area IABS    (ABS,DATA)
                                    309 ;--------------------------------------------------------
                                    310 ; bit data
                                    311 ;--------------------------------------------------------
                                    312 	.area BSEG    (BIT)
                                    313 ;--------------------------------------------------------
                                    314 ; paged external ram data
                                    315 ;--------------------------------------------------------
                                    316 	.area PSEG    (PAG,XDATA)
                                    317 ;--------------------------------------------------------
                                    318 ; external ram data
                                    319 ;--------------------------------------------------------
                                    320 	.area XSEG    (XDATA)
      000000                        321 _s:
      000000                        322 	.ds 12
      00000C                        323 _c:
      00000C                        324 	.ds 8205
                                    325 ;--------------------------------------------------------
                                    326 ; absolute external ram data
                                    327 ;--------------------------------------------------------
                                    328 	.area XABS    (ABS,XDATA)
                                    329 ;--------------------------------------------------------
                                    330 ; external initialized ram data
                                    331 ;--------------------------------------------------------
                                    332 	.area XISEG   (XDATA)
      000000                        333 _deltas:
      000000                        334 	.ds 160
                                    335 	.area HOME    (CODE)
                                    336 	.area GSINIT0 (CODE)
                                    337 	.area GSINIT1 (CODE)
                                    338 	.area GSINIT2 (CODE)
                                    339 	.area GSINIT3 (CODE)
                                    340 	.area GSINIT4 (CODE)
                                    341 	.area GSINIT5 (CODE)
                                    342 	.area GSINIT  (CODE)
                                    343 	.area GSFINAL (CODE)
                                    344 	.area CSEG    (CODE)
                                    345 ;--------------------------------------------------------
                                    346 ; interrupt vector 
                                    347 ;--------------------------------------------------------
                                    348 	.area HOME    (CODE)
      000000                        349 __interrupt_vect:
      000000 02r00r00         [24]  350 	ljmp	__sdcc_gsinit_startup
                                    351 ;--------------------------------------------------------
                                    352 ; global & static initialisations
                                    353 ;--------------------------------------------------------
                                    354 	.area HOME    (CODE)
                                    355 	.area GSINIT  (CODE)
                                    356 	.area GSFINAL (CODE)
                                    357 	.area GSINIT  (CODE)
                                    358 	.globl __sdcc_gsinit_startup
                                    359 	.globl __sdcc_program_startup
                                    360 	.globl __start__stack
                                    361 	.globl __mcs51_genXINIT
                                    362 	.globl __mcs51_genXRAMCLEAR
                                    363 	.globl __mcs51_genRAMCLEAR
                                    364 	.area GSFINAL (CODE)
      000000 02r00r03         [24]  365 	ljmp	__sdcc_program_startup
                                    366 ;--------------------------------------------------------
                                    367 ; Home
                                    368 ;--------------------------------------------------------
                                    369 	.area HOME    (CODE)
                                    370 	.area HOME    (CODE)
      000003                        371 __sdcc_program_startup:
      000003 02r1DrED         [24]  372 	ljmp	_main
                                    373 ;	return from main will return to caller
                                    374 ;--------------------------------------------------------
                                    375 ; code
                                    376 ;--------------------------------------------------------
                                    377 	.area CSEG    (CODE)
                                    378 ;------------------------------------------------------------
                                    379 ;Allocation info for local variables in function 'putchar'
                                    380 ;------------------------------------------------------------
                                    381 ;c                         Allocated to registers 
                                    382 ;------------------------------------------------------------
                                    383 ;	calc.c:15: int putchar(int c) __naked {
                                    384 ;	-----------------------------------------
                                    385 ;	 function putchar
                                    386 ;	-----------------------------------------
      000000                        387 _putchar:
                                    388 ;	naked function: no prologue.
                                    389 ;	calc.c:20: __endasm;
      000000 E5 82            [12]  390 	mov	a, dpl
      000002 02 00 30         [24]  391 	ljmp	0x0030
                                    392 ;	calc.c:21: }
                                    393 ;	naked function: no epilogue.
                                    394 ;------------------------------------------------------------
                                    395 ;Allocation info for local variables in function 'getchar'
                                    396 ;------------------------------------------------------------
                                    397 ;	calc.c:23: int getchar(void) __naked {
                                    398 ;	-----------------------------------------
                                    399 ;	 function getchar
                                    400 ;	-----------------------------------------
      000005                        401 _getchar:
                                    402 ;	naked function: no prologue.
                                    403 ;	calc.c:29: __endasm;
      000005 12 00 32         [24]  404 	lcall	0x0032
      000008 F5 82            [12]  405 	mov	dpl, a
      00000A 75 83 00         [24]  406 	mov	dph, #0
      00000D 22               [24]  407 	ret
                                    408 ;	calc.c:30: }
                                    409 ;	naked function: no epilogue.
                                    410 ;------------------------------------------------------------
                                    411 ;Allocation info for local variables in function 'getchar_poll'
                                    412 ;------------------------------------------------------------
                                    413 ;	calc.c:32: int getchar_poll(void) __naked {
                                    414 ;	-----------------------------------------
                                    415 ;	 function getchar_poll
                                    416 ;	-----------------------------------------
      00000E                        417 _getchar_poll:
                                    418 ;	naked function: no prologue.
                                    419 ;	calc.c:44: __endasm;
      00000E 74 FF            [12]  420 	mov	a, #0xff
      000010 F5 F0            [12]  421 	mov	b, a
      000012 30 98 07         [24]  422 	jnb	ri, nochar
      000015 C2 98            [12]  423 	clr	ri
      000017 E5 99            [12]  424 	mov	a, sbuf
      000019 75 F0 00         [24]  425 	mov	b, #0
      00001C                        426 	nochar:
      00001C F5 82            [12]  427 	mov	dpl, a
      00001E 85 F0 83         [24]  428 	mov	dph, b
      000021 22               [24]  429 	ret
                                    430 ;	calc.c:45: }
                                    431 ;	naked function: no epilogue.
                                    432 ;------------------------------------------------------------
                                    433 ;Allocation info for local variables in function 'printstr'
                                    434 ;------------------------------------------------------------
                                    435 ;s                         Allocated to registers 
                                    436 ;------------------------------------------------------------
                                    437 ;	calc.c:47: static inline void printstr(const char *s) {
                                    438 ;	-----------------------------------------
                                    439 ;	 function printstr
                                    440 ;	-----------------------------------------
      000022                        441 _printstr:
                           000007   442 	ar7 = 0x07
                           000006   443 	ar6 = 0x06
                           000005   444 	ar5 = 0x05
                           000004   445 	ar4 = 0x04
                           000003   446 	ar3 = 0x03
                           000002   447 	ar2 = 0x02
                           000001   448 	ar1 = 0x01
                           000000   449 	ar0 = 0x00
      000022 AD 82            [24]  450 	mov	r5,dpl
      000024 AE 83            [24]  451 	mov	r6,dph
      000026 AF F0            [24]  452 	mov	r7,b
                                    453 ;	calc.c:50: return;
      000028                        454 00103$:
                                    455 ;	calc.c:48: for (; *s; s++) putchar(*s);
      000028 8D 82            [24]  456 	mov	dpl,r5
      00002A 8E 83            [24]  457 	mov	dph,r6
      00002C 8F F0            [24]  458 	mov	b,r7
      00002E 12r00r00         [24]  459 	lcall	__gptrget
      000031 FC               [12]  460 	mov	r4,a
      000032 60 10            [24]  461 	jz	00101$
      000034 7B 00            [12]  462 	mov	r3,#0x00
      000036 8C 82            [24]  463 	mov	dpl,r4
      000038 8B 83            [24]  464 	mov	dph,r3
      00003A 12r00r00         [24]  465 	lcall	_putchar
      00003D 0D               [12]  466 	inc	r5
      00003E BD 00 E7         [24]  467 	cjne	r5,#0x00,00103$
      000041 0E               [12]  468 	inc	r6
      000042 80 E4            [24]  469 	sjmp	00103$
      000044                        470 00101$:
                                    471 ;	calc.c:50: return;
                                    472 ;	calc.c:51: }
      000044 22               [24]  473 	ret
                                    474 ;------------------------------------------------------------
                                    475 ;Allocation info for local variables in function 'printbin'
                                    476 ;------------------------------------------------------------
                                    477 ;d                         Allocated to stack - _bp +1
                                    478 ;mask                      Allocated to stack - _bp +5
                                    479 ;------------------------------------------------------------
                                    480 ;	calc.c:53: static inline void printbin(long d) {
                                    481 ;	-----------------------------------------
                                    482 ;	 function printbin
                                    483 ;	-----------------------------------------
      000045                        484 _printbin:
      000045 C0*00            [24]  485 	push	_bp
      000047 85 81*00         [24]  486 	mov	_bp,sp
      00004A C0 82            [24]  487 	push	dpl
      00004C C0 83            [24]  488 	push	dph
      00004E C0 F0            [24]  489 	push	b
      000050 C0 E0            [24]  490 	push	acc
      000052 E5 81            [12]  491 	mov	a,sp
      000054 24 04            [12]  492 	add	a,#0x04
      000056 F5 81            [12]  493 	mov	sp,a
                                    494 ;	calc.c:56: for (mask = 0x80000000lu; mask; mask >>= 1)
      000058 E5*00            [12]  495 	mov	a,_bp
      00005A 24 05            [12]  496 	add	a,#0x05
      00005C F8               [12]  497 	mov	r0,a
      00005D E4               [12]  498 	clr	a
      00005E F6               [12]  499 	mov	@r0,a
      00005F 08               [12]  500 	inc	r0
      000060 F6               [12]  501 	mov	@r0,a
      000061 08               [12]  502 	inc	r0
      000062 F6               [12]  503 	mov	@r0,a
      000063 08               [12]  504 	inc	r0
      000064 76 80            [12]  505 	mov	@r0,#0x80
      000066                        506 00102$:
                                    507 ;	calc.c:57: (void)putchar((d & mask) ? (int)'1' : (int)'0');
      000066 A8*00            [24]  508 	mov	r0,_bp
      000068 08               [12]  509 	inc	r0
      000069 86 04            [24]  510 	mov	ar4,@r0
      00006B 08               [12]  511 	inc	r0
      00006C 86 05            [24]  512 	mov	ar5,@r0
      00006E 08               [12]  513 	inc	r0
      00006F 86 06            [24]  514 	mov	ar6,@r0
      000071 08               [12]  515 	inc	r0
      000072 86 07            [24]  516 	mov	ar7,@r0
      000074 E5*00            [12]  517 	mov	a,_bp
      000076 24 05            [12]  518 	add	a,#0x05
      000078 F8               [12]  519 	mov	r0,a
      000079 E6               [12]  520 	mov	a,@r0
      00007A 52 04            [12]  521 	anl	ar4,a
      00007C 08               [12]  522 	inc	r0
      00007D E6               [12]  523 	mov	a,@r0
      00007E 52 05            [12]  524 	anl	ar5,a
      000080 08               [12]  525 	inc	r0
      000081 E6               [12]  526 	mov	a,@r0
      000082 52 06            [12]  527 	anl	ar6,a
      000084 08               [12]  528 	inc	r0
      000085 E6               [12]  529 	mov	a,@r0
      000086 52 07            [12]  530 	anl	ar7,a
      000088 EC               [12]  531 	mov	a,r4
      000089 4D               [12]  532 	orl	a,r5
      00008A 4E               [12]  533 	orl	a,r6
      00008B 4F               [12]  534 	orl	a,r7
      00008C 60 06            [24]  535 	jz	00106$
      00008E 7E 31            [12]  536 	mov	r6,#0x31
      000090 7F 00            [12]  537 	mov	r7,#0x00
      000092 80 04            [24]  538 	sjmp	00107$
      000094                        539 00106$:
      000094 7E 30            [12]  540 	mov	r6,#0x30
      000096 7F 00            [12]  541 	mov	r7,#0x00
      000098                        542 00107$:
      000098 8E 82            [24]  543 	mov	dpl,r6
      00009A 8F 83            [24]  544 	mov	dph,r7
      00009C 12r00r00         [24]  545 	lcall	_putchar
                                    546 ;	calc.c:56: for (mask = 0x80000000lu; mask; mask >>= 1)
      00009F E5*00            [12]  547 	mov	a,_bp
      0000A1 24 05            [12]  548 	add	a,#0x05
      0000A3 F8               [12]  549 	mov	r0,a
      0000A4 08               [12]  550 	inc	r0
      0000A5 08               [12]  551 	inc	r0
      0000A6 08               [12]  552 	inc	r0
      0000A7 E6               [12]  553 	mov	a,@r0
      0000A8 C3               [12]  554 	clr	c
      0000A9 13               [12]  555 	rrc	a
      0000AA F6               [12]  556 	mov	@r0,a
      0000AB 18               [12]  557 	dec	r0
      0000AC E6               [12]  558 	mov	a,@r0
      0000AD 13               [12]  559 	rrc	a
      0000AE F6               [12]  560 	mov	@r0,a
      0000AF 18               [12]  561 	dec	r0
      0000B0 E6               [12]  562 	mov	a,@r0
      0000B1 13               [12]  563 	rrc	a
      0000B2 F6               [12]  564 	mov	@r0,a
      0000B3 18               [12]  565 	dec	r0
      0000B4 E6               [12]  566 	mov	a,@r0
      0000B5 13               [12]  567 	rrc	a
      0000B6 F6               [12]  568 	mov	@r0,a
      0000B7 E5*00            [12]  569 	mov	a,_bp
      0000B9 24 05            [12]  570 	add	a,#0x05
      0000BB F8               [12]  571 	mov	r0,a
      0000BC E6               [12]  572 	mov	a,@r0
      0000BD 08               [12]  573 	inc	r0
      0000BE 46               [12]  574 	orl	a,@r0
      0000BF 08               [12]  575 	inc	r0
      0000C0 46               [12]  576 	orl	a,@r0
      0000C1 08               [12]  577 	inc	r0
      0000C2 46               [12]  578 	orl	a,@r0
      0000C3 70 A1            [24]  579 	jnz	00102$
                                    580 ;	calc.c:59: return;
                                    581 ;	calc.c:60: }
      0000C5 85*00 81         [24]  582 	mov	sp,_bp
      0000C8 D0*00            [24]  583 	pop	_bp
      0000CA 22               [24]  584 	ret
                                    585 ;------------------------------------------------------------
                                    586 ;Allocation info for local variables in function 'accumulate'
                                    587 ;------------------------------------------------------------
                                    588 ;delta                     Allocated to stack - _bp -5
                                    589 ;_ctx                      Allocated to registers r5 r6 r7 
                                    590 ;ctx                       Allocated to stack - _bp +8
                                    591 ;d                         Allocated to stack - _bp +11
                                    592 ;sloc0                     Allocated to stack - _bp +1
                                    593 ;sloc1                     Allocated to stack - _bp +4
                                    594 ;------------------------------------------------------------
                                    595 ;	calc.c:84: static int accumulate(void *_ctx, delta_t *delta) __reentrant {
                                    596 ;	-----------------------------------------
                                    597 ;	 function accumulate
                                    598 ;	-----------------------------------------
      0000CB                        599 _accumulate:
      0000CB C0*00            [24]  600 	push	_bp
      0000CD E5 81            [12]  601 	mov	a,sp
      0000CF F5*00            [12]  602 	mov	_bp,a
      0000D1 24 0E            [12]  603 	add	a,#0x0e
      0000D3 F5 81            [12]  604 	mov	sp,a
      0000D5 AD 82            [24]  605 	mov	r5,dpl
      0000D7 AE 83            [24]  606 	mov	r6,dph
      0000D9 AF F0            [24]  607 	mov	r7,b
                                    608 ;	calc.c:85: struct ctx *ctx = (struct ctx *)_ctx;
      0000DB E5*00            [12]  609 	mov	a,_bp
      0000DD 24 08            [12]  610 	add	a,#0x08
      0000DF F8               [12]  611 	mov	r0,a
      0000E0 A6 05            [24]  612 	mov	@r0,ar5
      0000E2 08               [12]  613 	inc	r0
      0000E3 A6 06            [24]  614 	mov	@r0,ar6
      0000E5 08               [12]  615 	inc	r0
      0000E6 A6 07            [24]  616 	mov	@r0,ar7
                                    617 ;	calc.c:90: if (!ctx->acc_valid) {
      0000E8 E5*00            [12]  618 	mov	a,_bp
      0000EA 24 08            [12]  619 	add	a,#0x08
      0000EC F8               [12]  620 	mov	r0,a
      0000ED 74 06            [12]  621 	mov	a,#0x06
      0000EF 26               [12]  622 	add	a,@r0
      0000F0 FA               [12]  623 	mov	r2,a
      0000F1 E4               [12]  624 	clr	a
      0000F2 08               [12]  625 	inc	r0
      0000F3 36               [12]  626 	addc	a,@r0
      0000F4 FB               [12]  627 	mov	r3,a
      0000F5 08               [12]  628 	inc	r0
      0000F6 86 04            [24]  629 	mov	ar4,@r0
      0000F8 8A 82            [24]  630 	mov	dpl,r2
      0000FA 8B 83            [24]  631 	mov	dph,r3
      0000FC 8C F0            [24]  632 	mov	b,r4
      0000FE 12r00r00         [24]  633 	lcall	__gptrget
      000101 70 31            [24]  634 	jnz	00102$
                                    635 ;	calc.c:91: ctx->acc_valid = 1;
      000103 8A 82            [24]  636 	mov	dpl,r2
      000105 8B 83            [24]  637 	mov	dph,r3
      000107 8C F0            [24]  638 	mov	b,r4
      000109 74 01            [12]  639 	mov	a,#0x01
      00010B 12r00r00         [24]  640 	lcall	__gptrput
                                    641 ;	calc.c:92: ctx->acc = 0l;
      00010E E5*00            [12]  642 	mov	a,_bp
      000110 24 08            [12]  643 	add	a,#0x08
      000112 F8               [12]  644 	mov	r0,a
      000113 74 02            [12]  645 	mov	a,#0x02
      000115 26               [12]  646 	add	a,@r0
      000116 FA               [12]  647 	mov	r2,a
      000117 E4               [12]  648 	clr	a
      000118 08               [12]  649 	inc	r0
      000119 36               [12]  650 	addc	a,@r0
      00011A FB               [12]  651 	mov	r3,a
      00011B 08               [12]  652 	inc	r0
      00011C 86 04            [24]  653 	mov	ar4,@r0
      00011E 8A 82            [24]  654 	mov	dpl,r2
      000120 8B 83            [24]  655 	mov	dph,r3
      000122 8C F0            [24]  656 	mov	b,r4
      000124 E4               [12]  657 	clr	a
      000125 12r00r00         [24]  658 	lcall	__gptrput
      000128 A3               [24]  659 	inc	dptr
      000129 12r00r00         [24]  660 	lcall	__gptrput
      00012C A3               [24]  661 	inc	dptr
      00012D 12r00r00         [24]  662 	lcall	__gptrput
      000130 A3               [24]  663 	inc	dptr
      000131 12r00r00         [24]  664 	lcall	__gptrput
      000134                        665 00102$:
                                    666 ;	calc.c:95: d = strtol(ctx->digit, NULL, ctx->base);
      000134 E5*00            [12]  667 	mov	a,_bp
      000136 24 08            [12]  668 	add	a,#0x08
      000138 F8               [12]  669 	mov	r0,a
      000139 86 82            [24]  670 	mov	dpl,@r0
      00013B 08               [12]  671 	inc	r0
      00013C 86 83            [24]  672 	mov	dph,@r0
      00013E 08               [12]  673 	inc	r0
      00013F 86 F0            [24]  674 	mov	b,@r0
      000141 12r00r00         [24]  675 	lcall	__gptrget
      000144 FB               [12]  676 	mov	r3,a
      000145 A3               [24]  677 	inc	dptr
      000146 12r00r00         [24]  678 	lcall	__gptrget
      000149 FC               [12]  679 	mov	r4,a
      00014A E5*00            [12]  680 	mov	a,_bp
      00014C 24 08            [12]  681 	add	a,#0x08
      00014E F8               [12]  682 	mov	r0,a
      00014F 74 07            [12]  683 	mov	a,#0x07
      000151 26               [12]  684 	add	a,@r0
      000152 FA               [12]  685 	mov	r2,a
      000153 E4               [12]  686 	clr	a
      000154 08               [12]  687 	inc	r0
      000155 36               [12]  688 	addc	a,@r0
      000156 FE               [12]  689 	mov	r6,a
      000157 08               [12]  690 	inc	r0
      000158 86 07            [24]  691 	mov	ar7,@r0
      00015A C0 03            [24]  692 	push	ar3
      00015C C0 04            [24]  693 	push	ar4
      00015E E4               [12]  694 	clr	a
      00015F C0 E0            [24]  695 	push	acc
      000161 C0 E0            [24]  696 	push	acc
      000163 C0 E0            [24]  697 	push	acc
      000165 8A 82            [24]  698 	mov	dpl,r2
      000167 8E 83            [24]  699 	mov	dph,r6
      000169 8F F0            [24]  700 	mov	b,r7
      00016B 12r00r00         [24]  701 	lcall	_strtol
      00016E C8               [12]  702 	xch	a,r0
      00016F E5*00            [12]  703 	mov	a,_bp
      000171 24 0B            [12]  704 	add	a,#0x0b
      000173 C8               [12]  705 	xch	a,r0
      000174 A6 82            [24]  706 	mov	@r0,dpl
      000176 08               [12]  707 	inc	r0
      000177 A6 83            [24]  708 	mov	@r0,dph
      000179 08               [12]  709 	inc	r0
      00017A A6 F0            [24]  710 	mov	@r0,b
      00017C 08               [12]  711 	inc	r0
      00017D F6               [12]  712 	mov	@r0,a
      00017E E5 81            [12]  713 	mov	a,sp
      000180 24 FB            [12]  714 	add	a,#0xfb
      000182 F5 81            [12]  715 	mov	sp,a
                                    716 ;	calc.c:96: ctx->acc = ctx->acc * (long)ctx->base + d;
      000184 E5*00            [12]  717 	mov	a,_bp
      000186 24 08            [12]  718 	add	a,#0x08
      000188 F8               [12]  719 	mov	r0,a
      000189 A9*00            [24]  720 	mov	r1,_bp
      00018B 09               [12]  721 	inc	r1
      00018C 74 02            [12]  722 	mov	a,#0x02
      00018E 26               [12]  723 	add	a,@r0
      00018F F7               [12]  724 	mov	@r1,a
      000190 E4               [12]  725 	clr	a
      000191 08               [12]  726 	inc	r0
      000192 36               [12]  727 	addc	a,@r0
      000193 09               [12]  728 	inc	r1
      000194 F7               [12]  729 	mov	@r1,a
      000195 08               [12]  730 	inc	r0
      000196 09               [12]  731 	inc	r1
      000197 E6               [12]  732 	mov	a,@r0
      000198 F7               [12]  733 	mov	@r1,a
      000199 A8*00            [24]  734 	mov	r0,_bp
      00019B 08               [12]  735 	inc	r0
      00019C 86 82            [24]  736 	mov	dpl,@r0
      00019E 08               [12]  737 	inc	r0
      00019F 86 83            [24]  738 	mov	dph,@r0
      0001A1 08               [12]  739 	inc	r0
      0001A2 86 F0            [24]  740 	mov	b,@r0
      0001A4 E5*00            [12]  741 	mov	a,_bp
      0001A6 24 04            [12]  742 	add	a,#0x04
      0001A8 F9               [12]  743 	mov	r1,a
      0001A9 12r00r00         [24]  744 	lcall	__gptrget
      0001AC F7               [12]  745 	mov	@r1,a
      0001AD A3               [24]  746 	inc	dptr
      0001AE 12r00r00         [24]  747 	lcall	__gptrget
      0001B1 09               [12]  748 	inc	r1
      0001B2 F7               [12]  749 	mov	@r1,a
      0001B3 A3               [24]  750 	inc	dptr
      0001B4 12r00r00         [24]  751 	lcall	__gptrget
      0001B7 09               [12]  752 	inc	r1
      0001B8 F7               [12]  753 	mov	@r1,a
      0001B9 A3               [24]  754 	inc	dptr
      0001BA 12r00r00         [24]  755 	lcall	__gptrget
      0001BD 09               [12]  756 	inc	r1
      0001BE F7               [12]  757 	mov	@r1,a
      0001BF E5*00            [12]  758 	mov	a,_bp
      0001C1 24 08            [12]  759 	add	a,#0x08
      0001C3 F8               [12]  760 	mov	r0,a
      0001C4 86 82            [24]  761 	mov	dpl,@r0
      0001C6 08               [12]  762 	inc	r0
      0001C7 86 83            [24]  763 	mov	dph,@r0
      0001C9 08               [12]  764 	inc	r0
      0001CA 86 F0            [24]  765 	mov	b,@r0
      0001CC 12r00r00         [24]  766 	lcall	__gptrget
      0001CF FA               [12]  767 	mov	r2,a
      0001D0 A3               [24]  768 	inc	dptr
      0001D1 12r00r00         [24]  769 	lcall	__gptrget
      0001D4 FB               [12]  770 	mov	r3,a
      0001D5 33               [12]  771 	rlc	a
      0001D6 95 E0            [12]  772 	subb	a,acc
      0001D8 FE               [12]  773 	mov	r6,a
      0001D9 FF               [12]  774 	mov	r7,a
      0001DA C0 02            [24]  775 	push	ar2
      0001DC C0 03            [24]  776 	push	ar3
      0001DE C0 06            [24]  777 	push	ar6
      0001E0 C0 07            [24]  778 	push	ar7
      0001E2 E5*00            [12]  779 	mov	a,_bp
      0001E4 24 04            [12]  780 	add	a,#0x04
      0001E6 F8               [12]  781 	mov	r0,a
      0001E7 86 82            [24]  782 	mov	dpl,@r0
      0001E9 08               [12]  783 	inc	r0
      0001EA 86 83            [24]  784 	mov	dph,@r0
      0001EC 08               [12]  785 	inc	r0
      0001ED 86 F0            [24]  786 	mov	b,@r0
      0001EF 08               [12]  787 	inc	r0
      0001F0 E6               [12]  788 	mov	a,@r0
      0001F1 12r00r00         [24]  789 	lcall	__mullong
      0001F4 AC 82            [24]  790 	mov	r4,dpl
      0001F6 AD 83            [24]  791 	mov	r5,dph
      0001F8 AE F0            [24]  792 	mov	r6,b
      0001FA FF               [12]  793 	mov	r7,a
      0001FB E5 81            [12]  794 	mov	a,sp
      0001FD 24 FC            [12]  795 	add	a,#0xfc
      0001FF F5 81            [12]  796 	mov	sp,a
      000201 E5*00            [12]  797 	mov	a,_bp
      000203 24 0B            [12]  798 	add	a,#0x0b
      000205 F8               [12]  799 	mov	r0,a
      000206 E6               [12]  800 	mov	a,@r0
      000207 2C               [12]  801 	add	a,r4
      000208 FC               [12]  802 	mov	r4,a
      000209 08               [12]  803 	inc	r0
      00020A E6               [12]  804 	mov	a,@r0
      00020B 3D               [12]  805 	addc	a,r5
      00020C FD               [12]  806 	mov	r5,a
      00020D 08               [12]  807 	inc	r0
      00020E E6               [12]  808 	mov	a,@r0
      00020F 3E               [12]  809 	addc	a,r6
      000210 FE               [12]  810 	mov	r6,a
      000211 08               [12]  811 	inc	r0
      000212 E6               [12]  812 	mov	a,@r0
      000213 3F               [12]  813 	addc	a,r7
      000214 FF               [12]  814 	mov	r7,a
      000215 A8*00            [24]  815 	mov	r0,_bp
      000217 08               [12]  816 	inc	r0
      000218 86 82            [24]  817 	mov	dpl,@r0
      00021A 08               [12]  818 	inc	r0
      00021B 86 83            [24]  819 	mov	dph,@r0
      00021D 08               [12]  820 	inc	r0
      00021E 86 F0            [24]  821 	mov	b,@r0
      000220 EC               [12]  822 	mov	a,r4
      000221 12r00r00         [24]  823 	lcall	__gptrput
      000224 A3               [24]  824 	inc	dptr
      000225 ED               [12]  825 	mov	a,r5
      000226 12r00r00         [24]  826 	lcall	__gptrput
      000229 A3               [24]  827 	inc	dptr
      00022A EE               [12]  828 	mov	a,r6
      00022B 12r00r00         [24]  829 	lcall	__gptrput
      00022E A3               [24]  830 	inc	dptr
      00022F EF               [12]  831 	mov	a,r7
      000230 12r00r00         [24]  832 	lcall	__gptrput
                                    833 ;	calc.c:98: return 1;
      000233 90 00 01         [24]  834 	mov	dptr,#0x0001
                                    835 ;	calc.c:99: }
      000236 85*00 81         [24]  836 	mov	sp,_bp
      000239 D0*00            [24]  837 	pop	_bp
      00023B 22               [24]  838 	ret
                                    839 ;------------------------------------------------------------
                                    840 ;Allocation info for local variables in function 'dump_pop'
                                    841 ;------------------------------------------------------------
                                    842 ;delta                     Allocated to stack - _bp -5
                                    843 ;_ctx                      Allocated to registers r5 r6 r7 
                                    844 ;ctx                       Allocated to stack - _bp +5
                                    845 ;d                         Allocated to stack - _bp +8
                                    846 ;r                         Allocated to stack - _bp +2
                                    847 ;__1310720001              Allocated to registers 
                                    848 ;s                         Allocated to registers r5 r6 r7 
                                    849 ;__1966080003              Allocated to registers 
                                    850 ;s                         Allocated to registers r4 r5 r6 
                                    851 ;__1966080005              Allocated to registers 
                                    852 ;s                         Allocated to registers r4 r5 r6 
                                    853 ;__1966080007              Allocated to registers r3 r4 r5 r6 
                                    854 ;d                         Allocated to stack - _bp +12
                                    855 ;mask                      Allocated to stack - _bp +16
                                    856 ;__1966080009              Allocated to registers 
                                    857 ;s                         Allocated to registers r4 r5 r6 
                                    858 ;sloc0                     Allocated to stack - _bp +1
                                    859 ;sloc1                     Allocated to stack - _bp +2
                                    860 ;------------------------------------------------------------
                                    861 ;	calc.c:101: static int dump_pop(void *_ctx, delta_t *delta) __reentrant {
                                    862 ;	-----------------------------------------
                                    863 ;	 function dump_pop
                                    864 ;	-----------------------------------------
      00023C                        865 _dump_pop:
      00023C C0*00            [24]  866 	push	_bp
      00023E E5 81            [12]  867 	mov	a,sp
      000240 F5*00            [12]  868 	mov	_bp,a
      000242 24 13            [12]  869 	add	a,#0x13
      000244 F5 81            [12]  870 	mov	sp,a
      000246 AD 82            [24]  871 	mov	r5,dpl
      000248 AE 83            [24]  872 	mov	r6,dph
      00024A AF F0            [24]  873 	mov	r7,b
                                    874 ;	calc.c:102: struct ctx *ctx = (struct ctx *)_ctx;
      00024C E5*00            [12]  875 	mov	a,_bp
      00024E 24 05            [12]  876 	add	a,#0x05
      000250 F8               [12]  877 	mov	r0,a
      000251 A6 05            [24]  878 	mov	@r0,ar5
      000253 08               [12]  879 	inc	r0
      000254 A6 06            [24]  880 	mov	@r0,ar6
      000256 08               [12]  881 	inc	r0
      000257 A6 07            [24]  882 	mov	@r0,ar7
                                    883 ;	calc.c:106: if (delta->event == EVENT_TERM) printstr("\r\n");
      000259 E5*00            [12]  884 	mov	a,_bp
      00025B 24 FB            [12]  885 	add	a,#0xfb
      00025D F8               [12]  886 	mov	r0,a
      00025E 86 02            [24]  887 	mov	ar2,@r0
      000260 08               [12]  888 	inc	r0
      000261 86 03            [24]  889 	mov	ar3,@r0
      000263 08               [12]  890 	inc	r0
      000264 86 04            [24]  891 	mov	ar4,@r0
      000266 74 02            [12]  892 	mov	a,#0x02
      000268 2A               [12]  893 	add	a,r2
      000269 FA               [12]  894 	mov	r2,a
      00026A E4               [12]  895 	clr	a
      00026B 3B               [12]  896 	addc	a,r3
      00026C FB               [12]  897 	mov	r3,a
      00026D 8A 82            [24]  898 	mov	dpl,r2
      00026F 8B 83            [24]  899 	mov	dph,r3
      000271 8C F0            [24]  900 	mov	b,r4
      000273 12r00r00         [24]  901 	lcall	__gptrget
      000276 FE               [12]  902 	mov	r6,a
      000277 A3               [24]  903 	inc	dptr
      000278 12r00r00         [24]  904 	lcall	__gptrget
      00027B FF               [12]  905 	mov	r7,a
      00027C BE 07 3D         [24]  906 	cjne	r6,#0x07,00102$
      00027F BF 00 3A         [24]  907 	cjne	r7,#0x00,00102$
      000282 7Dr00            [12]  908 	mov	r5,#___str_0
      000284 7Es00            [12]  909 	mov	r6,#(___str_0 >> 8)
      000286 7F 80            [12]  910 	mov	r7,#0x80
                                    911 ;	calc.c:50: return;
      000288                        912 00122$:
                                    913 ;	calc.c:48: for (; *s; s++) putchar(*s);
      000288 8D 82            [24]  914 	mov	dpl,r5
      00028A 8E 83            [24]  915 	mov	dph,r6
      00028C 8F F0            [24]  916 	mov	b,r7
      00028E A8*00            [24]  917 	mov	r0,_bp
      000290 08               [12]  918 	inc	r0
      000291 12r00r00         [24]  919 	lcall	__gptrget
      000294 F6               [12]  920 	mov	@r0,a
      000295 A8*00            [24]  921 	mov	r0,_bp
      000297 08               [12]  922 	inc	r0
      000298 E6               [12]  923 	mov	a,@r0
      000299 60 21            [24]  924 	jz	00102$
      00029B C0 02            [24]  925 	push	ar2
      00029D C0 03            [24]  926 	push	ar3
      00029F C0 04            [24]  927 	push	ar4
      0002A1 A8*00            [24]  928 	mov	r0,_bp
      0002A3 08               [12]  929 	inc	r0
      0002A4 86 03            [24]  930 	mov	ar3,@r0
      0002A6 7C 00            [12]  931 	mov	r4,#0x00
      0002A8 8B 82            [24]  932 	mov	dpl,r3
      0002AA 8C 83            [24]  933 	mov	dph,r4
      0002AC 12r00r00         [24]  934 	lcall	_putchar
      0002AF 0D               [12]  935 	inc	r5
      0002B0 BD 00 01         [24]  936 	cjne	r5,#0x00,00210$
      0002B3 0E               [12]  937 	inc	r6
      0002B4                        938 00210$:
      0002B4 D0 04            [24]  939 	pop	ar4
      0002B6 D0 03            [24]  940 	pop	ar3
      0002B8 D0 02            [24]  941 	pop	ar2
                                    942 ;	calc.c:106: if (delta->event == EVENT_TERM) printstr("\r\n");
      0002BA 80 CC            [24]  943 	sjmp	00122$
      0002BC                        944 00102$:
                                    945 ;	calc.c:108: r = stack_pop(&ctx->s, &d);
      0002BC C0 02            [24]  946 	push	ar2
      0002BE C0 03            [24]  947 	push	ar3
      0002C0 C0 04            [24]  948 	push	ar4
      0002C2 E5*00            [12]  949 	mov	a,_bp
      0002C4 24 08            [12]  950 	add	a,#0x08
      0002C6 FF               [12]  951 	mov	r7,a
      0002C7 A8*00            [24]  952 	mov	r0,_bp
      0002C9 08               [12]  953 	inc	r0
      0002CA 08               [12]  954 	inc	r0
      0002CB A6 07            [24]  955 	mov	@r0,ar7
      0002CD 08               [12]  956 	inc	r0
      0002CE 76 00            [12]  957 	mov	@r0,#0x00
      0002D0 08               [12]  958 	inc	r0
      0002D1 76 40            [12]  959 	mov	@r0,#0x40
      0002D3 E5*00            [12]  960 	mov	a,_bp
      0002D5 24 05            [12]  961 	add	a,#0x05
      0002D7 F8               [12]  962 	mov	r0,a
      0002D8 74 09            [12]  963 	mov	a,#0x09
      0002DA 26               [12]  964 	add	a,@r0
      0002DB FA               [12]  965 	mov	r2,a
      0002DC E4               [12]  966 	clr	a
      0002DD 08               [12]  967 	inc	r0
      0002DE 36               [12]  968 	addc	a,@r0
      0002DF FB               [12]  969 	mov	r3,a
      0002E0 08               [12]  970 	inc	r0
      0002E1 86 06            [24]  971 	mov	ar6,@r0
      0002E3 C0 07            [24]  972 	push	ar7
      0002E5 C0 04            [24]  973 	push	ar4
      0002E7 C0 03            [24]  974 	push	ar3
      0002E9 C0 02            [24]  975 	push	ar2
      0002EB A8*00            [24]  976 	mov	r0,_bp
      0002ED 08               [12]  977 	inc	r0
      0002EE 08               [12]  978 	inc	r0
      0002EF E6               [12]  979 	mov	a,@r0
      0002F0 C0 E0            [24]  980 	push	acc
      0002F2 08               [12]  981 	inc	r0
      0002F3 E6               [12]  982 	mov	a,@r0
      0002F4 C0 E0            [24]  983 	push	acc
      0002F6 08               [12]  984 	inc	r0
      0002F7 E6               [12]  985 	mov	a,@r0
      0002F8 C0 E0            [24]  986 	push	acc
      0002FA 8A 82            [24]  987 	mov	dpl,r2
      0002FC 8B 83            [24]  988 	mov	dph,r3
      0002FE 8E F0            [24]  989 	mov	b,r6
      000300 12r00r00         [24]  990 	lcall	_stack_pop
      000303 AD 82            [24]  991 	mov	r5,dpl
      000305 AE 83            [24]  992 	mov	r6,dph
      000307 15 81            [12]  993 	dec	sp
      000309 15 81            [12]  994 	dec	sp
      00030B 15 81            [12]  995 	dec	sp
      00030D D0 02            [24]  996 	pop	ar2
      00030F D0 03            [24]  997 	pop	ar3
      000311 D0 04            [24]  998 	pop	ar4
      000313 D0 07            [24]  999 	pop	ar7
      000315 A8*00            [24] 1000 	mov	r0,_bp
      000317 08               [12] 1001 	inc	r0
      000318 08               [12] 1002 	inc	r0
      000319 A6 05            [24] 1003 	mov	@r0,ar5
      00031B 08               [12] 1004 	inc	r0
      00031C A6 06            [24] 1005 	mov	@r0,ar6
                                   1006 ;	calc.c:109: if (!r) {
      00031E D0 04            [24] 1007 	pop	ar4
      000320 D0 03            [24] 1008 	pop	ar3
      000322 D0 02            [24] 1009 	pop	ar2
      000324 ED               [12] 1010 	mov	a,r5
      000325 4E               [12] 1011 	orl	a,r6
      000326 70 3D            [24] 1012 	jnz	00154$
                                   1013 ;	calc.c:110: if (delta->event != EVENT_TERM) printstr("stack underflow\r\n");
      000328 8A 82            [24] 1014 	mov	dpl,r2
      00032A 8B 83            [24] 1015 	mov	dph,r3
      00032C 8C F0            [24] 1016 	mov	b,r4
      00032E 12r00r00         [24] 1017 	lcall	__gptrget
      000331 FA               [12] 1018 	mov	r2,a
      000332 A3               [24] 1019 	inc	dptr
      000333 12r00r00         [24] 1020 	lcall	__gptrget
      000336 FB               [12] 1021 	mov	r3,a
      000337 BA 07 06         [24] 1022 	cjne	r2,#0x07,00212$
      00033A BB 00 03         [24] 1023 	cjne	r3,#0x00,00212$
      00033D 02r04rD2         [24] 1024 	ljmp	00110$
      000340                       1025 00212$:
      000340 7Cr03            [12] 1026 	mov	r4,#___str_1
      000342 7Ds00            [12] 1027 	mov	r5,#(___str_1 >> 8)
      000344 7E 80            [12] 1028 	mov	r6,#0x80
                                   1029 ;	calc.c:50: return;
      000346                       1030 00125$:
                                   1031 ;	calc.c:48: for (; *s; s++) putchar(*s);
      000346 8C 82            [24] 1032 	mov	dpl,r4
      000348 8D 83            [24] 1033 	mov	dph,r5
      00034A 8E F0            [24] 1034 	mov	b,r6
      00034C 12r00r00         [24] 1035 	lcall	__gptrget
      00034F FB               [12] 1036 	mov	r3,a
      000350 70 03            [24] 1037 	jnz	00213$
      000352 02r04rD2         [24] 1038 	ljmp	00110$
      000355                       1039 00213$:
      000355 7A 00            [12] 1040 	mov	r2,#0x00
      000357 8B 82            [24] 1041 	mov	dpl,r3
      000359 8A 83            [24] 1042 	mov	dph,r2
      00035B 12r00r00         [24] 1043 	lcall	_putchar
      00035E 0C               [12] 1044 	inc	r4
                                   1045 ;	calc.c:111: } else while (r > 0) {
      00035F BC 00 E4         [24] 1046 	cjne	r4,#0x00,00125$
      000362 0D               [12] 1047 	inc	r5
      000363 80 E1            [24] 1048 	sjmp	00125$
      000365                       1049 00154$:
      000365                       1050 00105$:
      000365 A8*00            [24] 1051 	mov	r0,_bp
      000367 08               [12] 1052 	inc	r0
      000368 08               [12] 1053 	inc	r0
      000369 C3               [12] 1054 	clr	c
      00036A E4               [12] 1055 	clr	a
      00036B 96               [12] 1056 	subb	a,@r0
      00036C 74 80            [12] 1057 	mov	a,#(0x00 ^ 0x80)
      00036E 08               [12] 1058 	inc	r0
      00036F 86 F0            [24] 1059 	mov	b,@r0
      000371 63 F0 80         [24] 1060 	xrl	b,#0x80
      000374 95 F0            [12] 1061 	subb	a,b
      000376 40 03            [24] 1062 	jc	00215$
      000378 02r04rD2         [24] 1063 	ljmp	00110$
      00037B                       1064 00215$:
                                   1065 ;	calc.c:112: printstr("VA ");
      00037B 7Cr15            [12] 1066 	mov	r4,#___str_2
      00037D 7Ds00            [12] 1067 	mov	r5,#(___str_2 >> 8)
      00037F 7E 80            [12] 1068 	mov	r6,#0x80
                                   1069 ;	calc.c:50: return;
      000381                       1070 00128$:
                                   1071 ;	calc.c:48: for (; *s; s++) putchar(*s);
      000381 8C 82            [24] 1072 	mov	dpl,r4
      000383 8D 83            [24] 1073 	mov	dph,r5
      000385 8E F0            [24] 1074 	mov	b,r6
      000387 12r00r00         [24] 1075 	lcall	__gptrget
      00038A FB               [12] 1076 	mov	r3,a
      00038B 60 10            [24] 1077 	jz	00116$
      00038D 7A 00            [12] 1078 	mov	r2,#0x00
      00038F 8B 82            [24] 1079 	mov	dpl,r3
      000391 8A 83            [24] 1080 	mov	dph,r2
      000393 12r00r00         [24] 1081 	lcall	_putchar
      000396 0C               [12] 1082 	inc	r4
                                   1083 ;	calc.c:112: printstr("VA ");
      000397 BC 00 E7         [24] 1084 	cjne	r4,#0x00,00128$
      00039A 0D               [12] 1085 	inc	r5
      00039B 80 E4            [24] 1086 	sjmp	00128$
      00039D                       1087 00116$:
                                   1088 ;	calc.c:113: printf("% 11ld / %08lx / ", d, d);
      00039D C0 07            [24] 1089 	push	ar7
      00039F E5*00            [12] 1090 	mov	a,_bp
      0003A1 24 08            [12] 1091 	add	a,#0x08
      0003A3 F8               [12] 1092 	mov	r0,a
      0003A4 E6               [12] 1093 	mov	a,@r0
      0003A5 C0 E0            [24] 1094 	push	acc
      0003A7 08               [12] 1095 	inc	r0
      0003A8 E6               [12] 1096 	mov	a,@r0
      0003A9 C0 E0            [24] 1097 	push	acc
      0003AB 08               [12] 1098 	inc	r0
      0003AC E6               [12] 1099 	mov	a,@r0
      0003AD C0 E0            [24] 1100 	push	acc
      0003AF 08               [12] 1101 	inc	r0
      0003B0 E6               [12] 1102 	mov	a,@r0
      0003B1 C0 E0            [24] 1103 	push	acc
      0003B3 E5*00            [12] 1104 	mov	a,_bp
      0003B5 24 08            [12] 1105 	add	a,#0x08
      0003B7 F8               [12] 1106 	mov	r0,a
      0003B8 E6               [12] 1107 	mov	a,@r0
      0003B9 C0 E0            [24] 1108 	push	acc
      0003BB 08               [12] 1109 	inc	r0
      0003BC E6               [12] 1110 	mov	a,@r0
      0003BD C0 E0            [24] 1111 	push	acc
      0003BF 08               [12] 1112 	inc	r0
      0003C0 E6               [12] 1113 	mov	a,@r0
      0003C1 C0 E0            [24] 1114 	push	acc
      0003C3 08               [12] 1115 	inc	r0
      0003C4 E6               [12] 1116 	mov	a,@r0
      0003C5 C0 E0            [24] 1117 	push	acc
      0003C7 74r19            [12] 1118 	mov	a,#___str_3
      0003C9 C0 E0            [24] 1119 	push	acc
      0003CB 74s00            [12] 1120 	mov	a,#(___str_3 >> 8)
      0003CD C0 E0            [24] 1121 	push	acc
      0003CF 74 80            [12] 1122 	mov	a,#0x80
      0003D1 C0 E0            [24] 1123 	push	acc
      0003D3 12r00r00         [24] 1124 	lcall	_printf
      0003D6 E5 81            [12] 1125 	mov	a,sp
      0003D8 24 F5            [12] 1126 	add	a,#0xf5
      0003DA F5 81            [12] 1127 	mov	sp,a
      0003DC D0 07            [24] 1128 	pop	ar7
                                   1129 ;	calc.c:114: printbin(d);
      0003DE E5*00            [12] 1130 	mov	a,_bp
      0003E0 24 08            [12] 1131 	add	a,#0x08
      0003E2 F8               [12] 1132 	mov	r0,a
      0003E3 86 03            [24] 1133 	mov	ar3,@r0
      0003E5 08               [12] 1134 	inc	r0
      0003E6 86 04            [24] 1135 	mov	ar4,@r0
      0003E8 08               [12] 1136 	inc	r0
      0003E9 86 05            [24] 1137 	mov	ar5,@r0
      0003EB 08               [12] 1138 	inc	r0
      0003EC 86 06            [24] 1139 	mov	ar6,@r0
      0003EE E5*00            [12] 1140 	mov	a,_bp
      0003F0 24 0C            [12] 1141 	add	a,#0x0c
      0003F2 F8               [12] 1142 	mov	r0,a
      0003F3 A6 03            [24] 1143 	mov	@r0,ar3
      0003F5 08               [12] 1144 	inc	r0
      0003F6 A6 04            [24] 1145 	mov	@r0,ar4
      0003F8 08               [12] 1146 	inc	r0
      0003F9 A6 05            [24] 1147 	mov	@r0,ar5
      0003FB 08               [12] 1148 	inc	r0
      0003FC A6 06            [24] 1149 	mov	@r0,ar6
                                   1150 ;	calc.c:56: for (mask = 0x80000000lu; mask; mask >>= 1)
      0003FE E5*00            [12] 1151 	mov	a,_bp
      000400 24 10            [12] 1152 	add	a,#0x10
      000402 F8               [12] 1153 	mov	r0,a
      000403 E4               [12] 1154 	clr	a
      000404 F6               [12] 1155 	mov	@r0,a
      000405 08               [12] 1156 	inc	r0
      000406 F6               [12] 1157 	mov	@r0,a
      000407 08               [12] 1158 	inc	r0
      000408 F6               [12] 1159 	mov	@r0,a
      000409 08               [12] 1160 	inc	r0
      00040A 76 80            [12] 1161 	mov	@r0,#0x80
      00040C                       1162 00130$:
                                   1163 ;	calc.c:57: (void)putchar((d & mask) ? (int)'1' : (int)'0');
      00040C C0 07            [24] 1164 	push	ar7
      00040E E5*00            [12] 1165 	mov	a,_bp
      000410 24 0C            [12] 1166 	add	a,#0x0c
      000412 F8               [12] 1167 	mov	r0,a
      000413 86 03            [24] 1168 	mov	ar3,@r0
      000415 08               [12] 1169 	inc	r0
      000416 86 05            [24] 1170 	mov	ar5,@r0
      000418 08               [12] 1171 	inc	r0
      000419 86 06            [24] 1172 	mov	ar6,@r0
      00041B 08               [12] 1173 	inc	r0
      00041C 86 07            [24] 1174 	mov	ar7,@r0
      00041E E5*00            [12] 1175 	mov	a,_bp
      000420 24 10            [12] 1176 	add	a,#0x10
      000422 F8               [12] 1177 	mov	r0,a
      000423 E6               [12] 1178 	mov	a,@r0
      000424 52 03            [12] 1179 	anl	ar3,a
      000426 08               [12] 1180 	inc	r0
      000427 E6               [12] 1181 	mov	a,@r0
      000428 52 05            [12] 1182 	anl	ar5,a
      00042A 08               [12] 1183 	inc	r0
      00042B E6               [12] 1184 	mov	a,@r0
      00042C 52 06            [12] 1185 	anl	ar6,a
      00042E 08               [12] 1186 	inc	r0
      00042F E6               [12] 1187 	mov	a,@r0
      000430 52 07            [12] 1188 	anl	ar7,a
      000432 EB               [12] 1189 	mov	a,r3
      000433 4D               [12] 1190 	orl	a,r5
      000434 4E               [12] 1191 	orl	a,r6
      000435 4F               [12] 1192 	orl	a,r7
      000436 D0 07            [24] 1193 	pop	ar7
      000438 60 06            [24] 1194 	jz	00137$
      00043A 7D 31            [12] 1195 	mov	r5,#0x31
      00043C 7E 00            [12] 1196 	mov	r6,#0x00
      00043E 80 04            [24] 1197 	sjmp	00138$
      000440                       1198 00137$:
      000440 7D 30            [12] 1199 	mov	r5,#0x30
      000442 7E 00            [12] 1200 	mov	r6,#0x00
      000444                       1201 00138$:
      000444 8D 82            [24] 1202 	mov	dpl,r5
      000446 8E 83            [24] 1203 	mov	dph,r6
      000448 12r00r00         [24] 1204 	lcall	_putchar
                                   1205 ;	calc.c:56: for (mask = 0x80000000lu; mask; mask >>= 1)
      00044B E5*00            [12] 1206 	mov	a,_bp
      00044D 24 10            [12] 1207 	add	a,#0x10
      00044F F8               [12] 1208 	mov	r0,a
      000450 08               [12] 1209 	inc	r0
      000451 08               [12] 1210 	inc	r0
      000452 08               [12] 1211 	inc	r0
      000453 E6               [12] 1212 	mov	a,@r0
      000454 C3               [12] 1213 	clr	c
      000455 13               [12] 1214 	rrc	a
      000456 F6               [12] 1215 	mov	@r0,a
      000457 18               [12] 1216 	dec	r0
      000458 E6               [12] 1217 	mov	a,@r0
      000459 13               [12] 1218 	rrc	a
      00045A F6               [12] 1219 	mov	@r0,a
      00045B 18               [12] 1220 	dec	r0
      00045C E6               [12] 1221 	mov	a,@r0
      00045D 13               [12] 1222 	rrc	a
      00045E F6               [12] 1223 	mov	@r0,a
      00045F 18               [12] 1224 	dec	r0
      000460 E6               [12] 1225 	mov	a,@r0
      000461 13               [12] 1226 	rrc	a
      000462 F6               [12] 1227 	mov	@r0,a
      000463 E5*00            [12] 1228 	mov	a,_bp
      000465 24 10            [12] 1229 	add	a,#0x10
      000467 F8               [12] 1230 	mov	r0,a
      000468 E6               [12] 1231 	mov	a,@r0
      000469 08               [12] 1232 	inc	r0
      00046A 46               [12] 1233 	orl	a,@r0
      00046B 08               [12] 1234 	inc	r0
      00046C 46               [12] 1235 	orl	a,@r0
      00046D 08               [12] 1236 	inc	r0
      00046E 46               [12] 1237 	orl	a,@r0
      00046F 70 9B            [24] 1238 	jnz	00130$
                                   1239 ;	calc.c:115: printstr("\r\n");
      000471 7Cr00            [12] 1240 	mov	r4,#___str_0
      000473 7Ds00            [12] 1241 	mov	r5,#(___str_0 >> 8)
      000475 7E 80            [12] 1242 	mov	r6,#0x80
                                   1243 ;	calc.c:50: return;
      000477                       1244 00133$:
                                   1245 ;	calc.c:48: for (; *s; s++) putchar(*s);
      000477 8C 82            [24] 1246 	mov	dpl,r4
      000479 8D 83            [24] 1247 	mov	dph,r5
      00047B 8E F0            [24] 1248 	mov	b,r6
      00047D 12r00r00         [24] 1249 	lcall	__gptrget
      000480 FB               [12] 1250 	mov	r3,a
      000481 60 10            [24] 1251 	jz	00120$
      000483 7A 00            [12] 1252 	mov	r2,#0x00
      000485 8B 82            [24] 1253 	mov	dpl,r3
      000487 8A 83            [24] 1254 	mov	dph,r2
      000489 12r00r00         [24] 1255 	lcall	_putchar
      00048C 0C               [12] 1256 	inc	r4
                                   1257 ;	calc.c:115: printstr("\r\n");
      00048D BC 00 E7         [24] 1258 	cjne	r4,#0x00,00133$
      000490 0D               [12] 1259 	inc	r5
      000491 80 E4            [24] 1260 	sjmp	00133$
      000493                       1261 00120$:
                                   1262 ;	calc.c:116: r = stack_pop(&ctx->s, &d);
      000493 8F 04            [24] 1263 	mov	ar4,r7
      000495 7D 00            [12] 1264 	mov	r5,#0x00
      000497 7E 40            [12] 1265 	mov	r6,#0x40
      000499 C0 07            [24] 1266 	push	ar7
      00049B E5*00            [12] 1267 	mov	a,_bp
      00049D 24 05            [12] 1268 	add	a,#0x05
      00049F F8               [12] 1269 	mov	r0,a
      0004A0 74 09            [12] 1270 	mov	a,#0x09
      0004A2 26               [12] 1271 	add	a,@r0
      0004A3 FA               [12] 1272 	mov	r2,a
      0004A4 E4               [12] 1273 	clr	a
      0004A5 08               [12] 1274 	inc	r0
      0004A6 36               [12] 1275 	addc	a,@r0
      0004A7 FB               [12] 1276 	mov	r3,a
      0004A8 08               [12] 1277 	inc	r0
      0004A9 86 07            [24] 1278 	mov	ar7,@r0
      0004AB C0 04            [24] 1279 	push	ar4
      0004AD C0 05            [24] 1280 	push	ar5
      0004AF C0 06            [24] 1281 	push	ar6
      0004B1 8A 82            [24] 1282 	mov	dpl,r2
      0004B3 8B 83            [24] 1283 	mov	dph,r3
      0004B5 8F F0            [24] 1284 	mov	b,r7
      0004B7 12r00r00         [24] 1285 	lcall	_stack_pop
      0004BA AE 82            [24] 1286 	mov	r6,dpl
      0004BC AF 83            [24] 1287 	mov	r7,dph
      0004BE 15 81            [12] 1288 	dec	sp
      0004C0 15 81            [12] 1289 	dec	sp
      0004C2 15 81            [12] 1290 	dec	sp
      0004C4 A8*00            [24] 1291 	mov	r0,_bp
      0004C6 08               [12] 1292 	inc	r0
      0004C7 08               [12] 1293 	inc	r0
      0004C8 A6 06            [24] 1294 	mov	@r0,ar6
      0004CA 08               [12] 1295 	inc	r0
      0004CB A6 07            [24] 1296 	mov	@r0,ar7
      0004CD D0 07            [24] 1297 	pop	ar7
      0004CF 02r03r65         [24] 1298 	ljmp	00105$
      0004D2                       1299 00110$:
                                   1300 ;	calc.c:119: return 1;
      0004D2 90 00 01         [24] 1301 	mov	dptr,#0x0001
                                   1302 ;	calc.c:120: }
      0004D5 85*00 81         [24] 1303 	mov	sp,_bp
      0004D8 D0*00            [24] 1304 	pop	_bp
      0004DA 22               [24] 1305 	ret
                                   1306 ;------------------------------------------------------------
                                   1307 ;Allocation info for local variables in function 'dump_peek'
                                   1308 ;------------------------------------------------------------
                                   1309 ;d                         Allocated to stack - _bp -6
                                   1310 ;_ctx                      Allocated to registers 
                                   1311 ;__1310720011              Allocated to registers 
                                   1312 ;s                         Allocated to registers r5 r6 r7 
                                   1313 ;__1310720013              Allocated to registers r4 r5 r6 r7 
                                   1314 ;d                         Allocated to stack - _bp +1
                                   1315 ;mask                      Allocated to stack - _bp +5
                                   1316 ;__1310720015              Allocated to registers 
                                   1317 ;s                         Allocated to registers r5 r6 r7 
                                   1318 ;------------------------------------------------------------
                                   1319 ;	calc.c:122: static int dump_peek(void *_ctx, long d) __reentrant {
                                   1320 ;	-----------------------------------------
                                   1321 ;	 function dump_peek
                                   1322 ;	-----------------------------------------
      0004DB                       1323 _dump_peek:
      0004DB C0*00            [24] 1324 	push	_bp
      0004DD E5 81            [12] 1325 	mov	a,sp
      0004DF F5*00            [12] 1326 	mov	_bp,a
      0004E1 24 08            [12] 1327 	add	a,#0x08
      0004E3 F5 81            [12] 1328 	mov	sp,a
                                   1329 ;	calc.c:125: printstr("PA ");
      0004E5 7Dr2B            [12] 1330 	mov	r5,#___str_4
      0004E7 7Es00            [12] 1331 	mov	r6,#(___str_4 >> 8)
      0004E9 7F 80            [12] 1332 	mov	r7,#0x80
                                   1333 ;	calc.c:50: return;
      0004EB                       1334 00108$:
                                   1335 ;	calc.c:48: for (; *s; s++) putchar(*s);
      0004EB 8D 82            [24] 1336 	mov	dpl,r5
      0004ED 8E 83            [24] 1337 	mov	dph,r6
      0004EF 8F F0            [24] 1338 	mov	b,r7
      0004F1 12r00r00         [24] 1339 	lcall	__gptrget
      0004F4 FC               [12] 1340 	mov	r4,a
      0004F5 60 10            [24] 1341 	jz	00102$
      0004F7 7B 00            [12] 1342 	mov	r3,#0x00
      0004F9 8C 82            [24] 1343 	mov	dpl,r4
      0004FB 8B 83            [24] 1344 	mov	dph,r3
      0004FD 12r00r00         [24] 1345 	lcall	_putchar
      000500 0D               [12] 1346 	inc	r5
                                   1347 ;	calc.c:125: printstr("PA ");
      000501 BD 00 E7         [24] 1348 	cjne	r5,#0x00,00108$
      000504 0E               [12] 1349 	inc	r6
      000505 80 E4            [24] 1350 	sjmp	00108$
      000507                       1351 00102$:
                                   1352 ;	calc.c:126: printf("% 11ld / %08lx / ", d, d);
      000507 E5*00            [12] 1353 	mov	a,_bp
      000509 24 FA            [12] 1354 	add	a,#0xfa
      00050B F8               [12] 1355 	mov	r0,a
      00050C E6               [12] 1356 	mov	a,@r0
      00050D C0 E0            [24] 1357 	push	acc
      00050F 08               [12] 1358 	inc	r0
      000510 E6               [12] 1359 	mov	a,@r0
      000511 C0 E0            [24] 1360 	push	acc
      000513 08               [12] 1361 	inc	r0
      000514 E6               [12] 1362 	mov	a,@r0
      000515 C0 E0            [24] 1363 	push	acc
      000517 08               [12] 1364 	inc	r0
      000518 E6               [12] 1365 	mov	a,@r0
      000519 C0 E0            [24] 1366 	push	acc
      00051B E5*00            [12] 1367 	mov	a,_bp
      00051D 24 FA            [12] 1368 	add	a,#0xfa
      00051F F8               [12] 1369 	mov	r0,a
      000520 E6               [12] 1370 	mov	a,@r0
      000521 C0 E0            [24] 1371 	push	acc
      000523 08               [12] 1372 	inc	r0
      000524 E6               [12] 1373 	mov	a,@r0
      000525 C0 E0            [24] 1374 	push	acc
      000527 08               [12] 1375 	inc	r0
      000528 E6               [12] 1376 	mov	a,@r0
      000529 C0 E0            [24] 1377 	push	acc
      00052B 08               [12] 1378 	inc	r0
      00052C E6               [12] 1379 	mov	a,@r0
      00052D C0 E0            [24] 1380 	push	acc
      00052F 74r19            [12] 1381 	mov	a,#___str_3
      000531 C0 E0            [24] 1382 	push	acc
      000533 74s00            [12] 1383 	mov	a,#(___str_3 >> 8)
      000535 C0 E0            [24] 1384 	push	acc
      000537 74 80            [12] 1385 	mov	a,#0x80
      000539 C0 E0            [24] 1386 	push	acc
      00053B 12r00r00         [24] 1387 	lcall	_printf
      00053E E5 81            [12] 1388 	mov	a,sp
      000540 24 F5            [12] 1389 	add	a,#0xf5
      000542 F5 81            [12] 1390 	mov	sp,a
                                   1391 ;	calc.c:127: printbin(d);
      000544 E5*00            [12] 1392 	mov	a,_bp
      000546 24 FA            [12] 1393 	add	a,#0xfa
      000548 F8               [12] 1394 	mov	r0,a
      000549 86 04            [24] 1395 	mov	ar4,@r0
      00054B 08               [12] 1396 	inc	r0
      00054C 86 05            [24] 1397 	mov	ar5,@r0
      00054E 08               [12] 1398 	inc	r0
      00054F 86 06            [24] 1399 	mov	ar6,@r0
      000551 08               [12] 1400 	inc	r0
      000552 86 07            [24] 1401 	mov	ar7,@r0
      000554 A8*00            [24] 1402 	mov	r0,_bp
      000556 08               [12] 1403 	inc	r0
      000557 A6 04            [24] 1404 	mov	@r0,ar4
      000559 08               [12] 1405 	inc	r0
      00055A A6 05            [24] 1406 	mov	@r0,ar5
      00055C 08               [12] 1407 	inc	r0
      00055D A6 06            [24] 1408 	mov	@r0,ar6
      00055F 08               [12] 1409 	inc	r0
      000560 A6 07            [24] 1410 	mov	@r0,ar7
                                   1411 ;	calc.c:56: for (mask = 0x80000000lu; mask; mask >>= 1)
      000562 E5*00            [12] 1412 	mov	a,_bp
      000564 24 05            [12] 1413 	add	a,#0x05
      000566 F8               [12] 1414 	mov	r0,a
      000567 E4               [12] 1415 	clr	a
      000568 F6               [12] 1416 	mov	@r0,a
      000569 08               [12] 1417 	inc	r0
      00056A F6               [12] 1418 	mov	@r0,a
      00056B 08               [12] 1419 	inc	r0
      00056C F6               [12] 1420 	mov	@r0,a
      00056D 08               [12] 1421 	inc	r0
      00056E 76 80            [12] 1422 	mov	@r0,#0x80
      000570                       1423 00110$:
                                   1424 ;	calc.c:57: (void)putchar((d & mask) ? (int)'1' : (int)'0');
      000570 A8*00            [24] 1425 	mov	r0,_bp
      000572 08               [12] 1426 	inc	r0
      000573 86 04            [24] 1427 	mov	ar4,@r0
      000575 08               [12] 1428 	inc	r0
      000576 86 05            [24] 1429 	mov	ar5,@r0
      000578 08               [12] 1430 	inc	r0
      000579 86 06            [24] 1431 	mov	ar6,@r0
      00057B 08               [12] 1432 	inc	r0
      00057C 86 07            [24] 1433 	mov	ar7,@r0
      00057E E5*00            [12] 1434 	mov	a,_bp
      000580 24 05            [12] 1435 	add	a,#0x05
      000582 F8               [12] 1436 	mov	r0,a
      000583 E6               [12] 1437 	mov	a,@r0
      000584 52 04            [12] 1438 	anl	ar4,a
      000586 08               [12] 1439 	inc	r0
      000587 E6               [12] 1440 	mov	a,@r0
      000588 52 05            [12] 1441 	anl	ar5,a
      00058A 08               [12] 1442 	inc	r0
      00058B E6               [12] 1443 	mov	a,@r0
      00058C 52 06            [12] 1444 	anl	ar6,a
      00058E 08               [12] 1445 	inc	r0
      00058F E6               [12] 1446 	mov	a,@r0
      000590 52 07            [12] 1447 	anl	ar7,a
      000592 EC               [12] 1448 	mov	a,r4
      000593 4D               [12] 1449 	orl	a,r5
      000594 4E               [12] 1450 	orl	a,r6
      000595 4F               [12] 1451 	orl	a,r7
      000596 60 06            [24] 1452 	jz	00117$
      000598 7E 31            [12] 1453 	mov	r6,#0x31
      00059A 7F 00            [12] 1454 	mov	r7,#0x00
      00059C 80 04            [24] 1455 	sjmp	00118$
      00059E                       1456 00117$:
      00059E 7E 30            [12] 1457 	mov	r6,#0x30
      0005A0 7F 00            [12] 1458 	mov	r7,#0x00
      0005A2                       1459 00118$:
      0005A2 8E 82            [24] 1460 	mov	dpl,r6
      0005A4 8F 83            [24] 1461 	mov	dph,r7
      0005A6 12r00r00         [24] 1462 	lcall	_putchar
                                   1463 ;	calc.c:56: for (mask = 0x80000000lu; mask; mask >>= 1)
      0005A9 E5*00            [12] 1464 	mov	a,_bp
      0005AB 24 05            [12] 1465 	add	a,#0x05
      0005AD F8               [12] 1466 	mov	r0,a
      0005AE 08               [12] 1467 	inc	r0
      0005AF 08               [12] 1468 	inc	r0
      0005B0 08               [12] 1469 	inc	r0
      0005B1 E6               [12] 1470 	mov	a,@r0
      0005B2 C3               [12] 1471 	clr	c
      0005B3 13               [12] 1472 	rrc	a
      0005B4 F6               [12] 1473 	mov	@r0,a
      0005B5 18               [12] 1474 	dec	r0
      0005B6 E6               [12] 1475 	mov	a,@r0
      0005B7 13               [12] 1476 	rrc	a
      0005B8 F6               [12] 1477 	mov	@r0,a
      0005B9 18               [12] 1478 	dec	r0
      0005BA E6               [12] 1479 	mov	a,@r0
      0005BB 13               [12] 1480 	rrc	a
      0005BC F6               [12] 1481 	mov	@r0,a
      0005BD 18               [12] 1482 	dec	r0
      0005BE E6               [12] 1483 	mov	a,@r0
      0005BF 13               [12] 1484 	rrc	a
      0005C0 F6               [12] 1485 	mov	@r0,a
      0005C1 E5*00            [12] 1486 	mov	a,_bp
      0005C3 24 05            [12] 1487 	add	a,#0x05
      0005C5 F8               [12] 1488 	mov	r0,a
      0005C6 E6               [12] 1489 	mov	a,@r0
      0005C7 08               [12] 1490 	inc	r0
      0005C8 46               [12] 1491 	orl	a,@r0
      0005C9 08               [12] 1492 	inc	r0
      0005CA 46               [12] 1493 	orl	a,@r0
      0005CB 08               [12] 1494 	inc	r0
      0005CC 46               [12] 1495 	orl	a,@r0
      0005CD 70 A1            [24] 1496 	jnz	00110$
                                   1497 ;	calc.c:128: printstr("\r\n");
      0005CF 7Dr00            [12] 1498 	mov	r5,#___str_0
      0005D1 7Es00            [12] 1499 	mov	r6,#(___str_0 >> 8)
      0005D3 7F 80            [12] 1500 	mov	r7,#0x80
                                   1501 ;	calc.c:50: return;
      0005D5                       1502 00113$:
                                   1503 ;	calc.c:48: for (; *s; s++) putchar(*s);
      0005D5 8D 82            [24] 1504 	mov	dpl,r5
      0005D7 8E 83            [24] 1505 	mov	dph,r6
      0005D9 8F F0            [24] 1506 	mov	b,r7
      0005DB 12r00r00         [24] 1507 	lcall	__gptrget
      0005DE FC               [12] 1508 	mov	r4,a
      0005DF 60 10            [24] 1509 	jz	00106$
      0005E1 7B 00            [12] 1510 	mov	r3,#0x00
      0005E3 8C 82            [24] 1511 	mov	dpl,r4
      0005E5 8B 83            [24] 1512 	mov	dph,r3
      0005E7 12r00r00         [24] 1513 	lcall	_putchar
      0005EA 0D               [12] 1514 	inc	r5
                                   1515 ;	calc.c:128: printstr("\r\n");
      0005EB BD 00 E7         [24] 1516 	cjne	r5,#0x00,00113$
      0005EE 0E               [12] 1517 	inc	r6
      0005EF 80 E4            [24] 1518 	sjmp	00113$
      0005F1                       1519 00106$:
                                   1520 ;	calc.c:130: return 1;
      0005F1 90 00 01         [24] 1521 	mov	dptr,#0x0001
                                   1522 ;	calc.c:131: }
      0005F4 85*00 81         [24] 1523 	mov	sp,_bp
      0005F7 D0*00            [24] 1524 	pop	_bp
      0005F9 22               [24] 1525 	ret
                                   1526 ;------------------------------------------------------------
                                   1527 ;Allocation info for local variables in function 'operator'
                                   1528 ;------------------------------------------------------------
                                   1529 ;delta                     Allocated to stack - _bp -5
                                   1530 ;_ctx                      Allocated to stack - _bp +1
                                   1531 ;ctx                       Allocated to stack - _bp +4
                                   1532 ;d0                        Allocated to stack - _bp +7
                                   1533 ;d1                        Allocated to stack - _bp +11
                                   1534 ;__1966080017              Allocated to registers 
                                   1535 ;s                         Allocated to registers r5 r6 r7 
                                   1536 ;__1966080019              Allocated to registers 
                                   1537 ;s                         Allocated to registers r5 r6 r7 
                                   1538 ;__2621440021              Allocated to registers 
                                   1539 ;s                         Allocated to registers r5 r6 r7 
                                   1540 ;__2621440023              Allocated to registers r4 r5 r6 r7 
                                   1541 ;d                         Allocated to stack - _bp +15
                                   1542 ;mask                      Allocated to stack - _bp +19
                                   1543 ;__2621440025              Allocated to registers 
                                   1544 ;s                         Allocated to registers r5 r6 r7 
                                   1545 ;__1966080027              Allocated to registers 
                                   1546 ;s                         Allocated to registers r5 r6 r7 
                                   1547 ;__1966080029              Allocated to registers 
                                   1548 ;s                         Allocated to registers r5 r6 r7 
                                   1549 ;__1966080031              Allocated to registers 
                                   1550 ;s                         Allocated to registers r5 r6 r7 
                                   1551 ;__1966080033              Allocated to registers 
                                   1552 ;s                         Allocated to registers r5 r6 r7 
                                   1553 ;__2621440035              Allocated to registers 
                                   1554 ;s                         Allocated to registers r5 r6 r7 
                                   1555 ;__2621440037              Allocated to registers r4 r5 r6 r7 
                                   1556 ;d                         Allocated to stack - _bp +15
                                   1557 ;mask                      Allocated to stack - _bp +19
                                   1558 ;__2621440039              Allocated to registers 
                                   1559 ;s                         Allocated to registers r5 r6 r7 
                                   1560 ;__1966080041              Allocated to registers 
                                   1561 ;s                         Allocated to registers r5 r6 r7 
                                   1562 ;__1966080043              Allocated to registers 
                                   1563 ;s                         Allocated to registers r5 r6 r7 
                                   1564 ;__2621440045              Allocated to registers 
                                   1565 ;s                         Allocated to registers r5 r6 r7 
                                   1566 ;__1966080047              Allocated to registers 
                                   1567 ;s                         Allocated to registers r5 r6 r7 
                                   1568 ;__2621440049              Allocated to registers 
                                   1569 ;s                         Allocated to registers r5 r6 r7 
                                   1570 ;__1966080051              Allocated to registers 
                                   1571 ;s                         Allocated to registers r5 r6 r7 
                                   1572 ;__2621440053              Allocated to registers 
                                   1573 ;s                         Allocated to registers r5 r6 r7 
                                   1574 ;__1966080055              Allocated to registers 
                                   1575 ;s                         Allocated to registers r5 r6 r7 
                                   1576 ;__2621440057              Allocated to registers 
                                   1577 ;s                         Allocated to registers r5 r6 r7 
                                   1578 ;__1966080059              Allocated to registers 
                                   1579 ;s                         Allocated to registers r5 r6 r7 
                                   1580 ;__2621440061              Allocated to registers 
                                   1581 ;s                         Allocated to registers r5 r6 r7 
                                   1582 ;__2621440063              Allocated to registers 
                                   1583 ;s                         Allocated to registers r5 r6 r7 
                                   1584 ;__1966080065              Allocated to registers 
                                   1585 ;s                         Allocated to registers r5 r6 r7 
                                   1586 ;__2621440067              Allocated to registers 
                                   1587 ;s                         Allocated to registers r5 r6 r7 
                                   1588 ;__2621440069              Allocated to registers 
                                   1589 ;s                         Allocated to registers r5 r6 r7 
                                   1590 ;__1966080071              Allocated to registers 
                                   1591 ;s                         Allocated to registers r5 r6 r7 
                                   1592 ;__2621440073              Allocated to registers 
                                   1593 ;s                         Allocated to registers r5 r6 r7 
                                   1594 ;__1966080075              Allocated to registers 
                                   1595 ;s                         Allocated to registers r5 r6 r7 
                                   1596 ;__2621440077              Allocated to registers 
                                   1597 ;s                         Allocated to registers r5 r6 r7 
                                   1598 ;__1966080079              Allocated to registers 
                                   1599 ;s                         Allocated to registers r5 r6 r7 
                                   1600 ;__2621440081              Allocated to registers 
                                   1601 ;s                         Allocated to registers r5 r6 r7 
                                   1602 ;__1966080083              Allocated to registers 
                                   1603 ;s                         Allocated to registers r5 r6 r7 
                                   1604 ;------------------------------------------------------------
                                   1605 ;	calc.c:133: static int operator(void *_ctx, delta_t *delta) __reentrant {
                                   1606 ;	-----------------------------------------
                                   1607 ;	 function operator
                                   1608 ;	-----------------------------------------
      0005FA                       1609 _operator:
      0005FA C0*00            [24] 1610 	push	_bp
      0005FC 85 81*00         [24] 1611 	mov	_bp,sp
      0005FF C0 82            [24] 1612 	push	dpl
      000601 C0 83            [24] 1613 	push	dph
      000603 C0 F0            [24] 1614 	push	b
      000605 E5 81            [12] 1615 	mov	a,sp
      000607 24 13            [12] 1616 	add	a,#0x13
      000609 F5 81            [12] 1617 	mov	sp,a
                                   1618 ;	calc.c:134: struct ctx *ctx = (struct ctx *)_ctx;
      00060B A8*00            [24] 1619 	mov	r0,_bp
      00060D 08               [12] 1620 	inc	r0
      00060E E5*00            [12] 1621 	mov	a,_bp
      000610 24 04            [12] 1622 	add	a,#0x04
      000612 F9               [12] 1623 	mov	r1,a
      000613 E6               [12] 1624 	mov	a,@r0
      000614 F7               [12] 1625 	mov	@r1,a
      000615 08               [12] 1626 	inc	r0
      000616 09               [12] 1627 	inc	r1
      000617 E6               [12] 1628 	mov	a,@r0
      000618 F7               [12] 1629 	mov	@r1,a
      000619 08               [12] 1630 	inc	r0
      00061A 09               [12] 1631 	inc	r1
      00061B E6               [12] 1632 	mov	a,@r0
      00061C F7               [12] 1633 	mov	@r1,a
                                   1634 ;	calc.c:137: switch (ctx->digit[0]) {
      00061D E5*00            [12] 1635 	mov	a,_bp
      00061F 24 04            [12] 1636 	add	a,#0x04
      000621 F8               [12] 1637 	mov	r0,a
      000622 74 07            [12] 1638 	mov	a,#0x07
      000624 26               [12] 1639 	add	a,@r0
      000625 FD               [12] 1640 	mov	r5,a
      000626 E4               [12] 1641 	clr	a
      000627 08               [12] 1642 	inc	r0
      000628 36               [12] 1643 	addc	a,@r0
      000629 FE               [12] 1644 	mov	r6,a
      00062A 08               [12] 1645 	inc	r0
      00062B 86 07            [24] 1646 	mov	ar7,@r0
      00062D 8D 82            [24] 1647 	mov	dpl,r5
      00062F 8E 83            [24] 1648 	mov	dph,r6
      000631 8F F0            [24] 1649 	mov	b,r7
      000633 12r00r00         [24] 1650 	lcall	__gptrget
      000636 FF               [12] 1651 	mov	r7,a
      000637 BF 25 03         [24] 1652 	cjne	r7,#0x25,00831$
      00063A 02r11rB1         [24] 1653 	ljmp	00152$
      00063D                       1654 00831$:
      00063D BF 26 03         [24] 1655 	cjne	r7,#0x26,00832$
      000640 02r13rAF         [24] 1656 	ljmp	00162$
      000643                       1657 00832$:
      000643 BF 2A 03         [24] 1658 	cjne	r7,#0x2a,00833$
      000646 02r0Er51         [24] 1659 	ljmp	00135$
      000649                       1660 00833$:
      000649 BF 2B 03         [24] 1661 	cjne	r7,#0x2b,00834$
      00064C 02r0BrDA         [24] 1662 	ljmp	00121$
      00064F                       1663 00834$:
      00064F BF 2D 03         [24] 1664 	cjne	r7,#0x2d,00835$
      000652 02r0Dr15         [24] 1665 	ljmp	00128$
      000655                       1666 00835$:
      000655 BF 2E 03         [24] 1667 	cjne	r7,#0x2e,00836$
      000658 02r08rAF         [24] 1668 	ljmp	00109$
      00065B                       1669 00836$:
      00065B BF 2F 03         [24] 1670 	cjne	r7,#0x2f,00837$
      00065E 02r0FrB3         [24] 1671 	ljmp	00142$
      000661                       1672 00837$:
      000661 BF 50 03         [24] 1673 	cjne	r7,#0x50,00838$
      000664 02r08r23         [24] 1674 	ljmp	00105$
      000667                       1675 00838$:
      000667 BF 56 03         [24] 1676 	cjne	r7,#0x56,00839$
      00066A 02r0Ar3F         [24] 1677 	ljmp	00113$
      00066D                       1678 00839$:
      00066D BF 5E 03         [24] 1679 	cjne	r7,#0x5e,00840$
      000670 02r16r25         [24] 1680 	ljmp	00176$
      000673                       1681 00840$:
      000673 BF 70 02         [24] 1682 	cjne	r7,#0x70,00841$
      000676 80 1B            [24] 1683 	sjmp	00101$
      000678                       1684 00841$:
      000678 BF 76 03         [24] 1685 	cjne	r7,#0x76,00842$
      00067B 02r08rAF         [24] 1686 	ljmp	00109$
      00067E                       1687 00842$:
      00067E BF 78 03         [24] 1688 	cjne	r7,#0x78,00843$
      000681 02r0Ar88         [24] 1689 	ljmp	00114$
      000684                       1690 00843$:
      000684 BF 7C 03         [24] 1691 	cjne	r7,#0x7c,00844$
      000687 02r14rEA         [24] 1692 	ljmp	00169$
      00068A                       1693 00844$:
      00068A BF 7E 03         [24] 1694 	cjne	r7,#0x7e,00845$
      00068D 02r17r60         [24] 1695 	ljmp	00183$
      000690                       1696 00845$:
      000690 02r18r01         [24] 1697 	ljmp	00187$
                                   1698 ;	calc.c:138: case 'p':
      000693                       1699 00101$:
                                   1700 ;	calc.c:139: printstr("\r\n");
      000693 7Dr00            [12] 1701 	mov	r5,#___str_0
      000695 7Es00            [12] 1702 	mov	r6,#(___str_0 >> 8)
      000697 7F 80            [12] 1703 	mov	r7,#0x80
                                   1704 ;	calc.c:50: return;
      000699                       1705 00258$:
                                   1706 ;	calc.c:48: for (; *s; s++) putchar(*s);
      000699 8D 82            [24] 1707 	mov	dpl,r5
      00069B 8E 83            [24] 1708 	mov	dph,r6
      00069D 8F F0            [24] 1709 	mov	b,r7
      00069F 12r00r00         [24] 1710 	lcall	__gptrget
      0006A2 FC               [12] 1711 	mov	r4,a
      0006A3 60 10            [24] 1712 	jz	00190$
      0006A5 7B 00            [12] 1713 	mov	r3,#0x00
      0006A7 8C 82            [24] 1714 	mov	dpl,r4
      0006A9 8B 83            [24] 1715 	mov	dph,r3
      0006AB 12r00r00         [24] 1716 	lcall	_putchar
      0006AE 0D               [12] 1717 	inc	r5
                                   1718 ;	calc.c:139: printstr("\r\n");
      0006AF BD 00 E7         [24] 1719 	cjne	r5,#0x00,00258$
      0006B2 0E               [12] 1720 	inc	r6
      0006B3 80 E4            [24] 1721 	sjmp	00258$
      0006B5                       1722 00190$:
                                   1723 ;	calc.c:140: if (!stack_peek(&ctx->s, &d0)) printstr("stack underflow\r\n");
      0006B5 E5*00            [12] 1724 	mov	a,_bp
      0006B7 24 07            [12] 1725 	add	a,#0x07
      0006B9 FF               [12] 1726 	mov	r7,a
      0006BA 7E 00            [12] 1727 	mov	r6,#0x00
      0006BC 7D 40            [12] 1728 	mov	r5,#0x40
      0006BE E5*00            [12] 1729 	mov	a,_bp
      0006C0 24 04            [12] 1730 	add	a,#0x04
      0006C2 F8               [12] 1731 	mov	r0,a
      0006C3 74 09            [12] 1732 	mov	a,#0x09
      0006C5 26               [12] 1733 	add	a,@r0
      0006C6 FA               [12] 1734 	mov	r2,a
      0006C7 E4               [12] 1735 	clr	a
      0006C8 08               [12] 1736 	inc	r0
      0006C9 36               [12] 1737 	addc	a,@r0
      0006CA FB               [12] 1738 	mov	r3,a
      0006CB 08               [12] 1739 	inc	r0
      0006CC 86 04            [24] 1740 	mov	ar4,@r0
      0006CE C0 07            [24] 1741 	push	ar7
      0006D0 C0 06            [24] 1742 	push	ar6
      0006D2 C0 05            [24] 1743 	push	ar5
      0006D4 8A 82            [24] 1744 	mov	dpl,r2
      0006D6 8B 83            [24] 1745 	mov	dph,r3
      0006D8 8C F0            [24] 1746 	mov	b,r4
      0006DA 12r00r00         [24] 1747 	lcall	_stack_peek
      0006DD AE 82            [24] 1748 	mov	r6,dpl
      0006DF AF 83            [24] 1749 	mov	r7,dph
      0006E1 15 81            [12] 1750 	dec	sp
      0006E3 15 81            [12] 1751 	dec	sp
      0006E5 15 81            [12] 1752 	dec	sp
      0006E7 EE               [12] 1753 	mov	a,r6
      0006E8 4F               [12] 1754 	orl	a,r7
      0006E9 70 25            [24] 1755 	jnz	00103$
      0006EB 7Dr03            [12] 1756 	mov	r5,#___str_1
      0006ED 7Es00            [12] 1757 	mov	r6,#(___str_1 >> 8)
      0006EF 7F 80            [12] 1758 	mov	r7,#0x80
                                   1759 ;	calc.c:50: return;
      0006F1                       1760 00261$:
                                   1761 ;	calc.c:48: for (; *s; s++) putchar(*s);
      0006F1 8D 82            [24] 1762 	mov	dpl,r5
      0006F3 8E 83            [24] 1763 	mov	dph,r6
      0006F5 8F F0            [24] 1764 	mov	b,r7
      0006F7 12r00r00         [24] 1765 	lcall	__gptrget
      0006FA FC               [12] 1766 	mov	r4,a
      0006FB 70 03            [24] 1767 	jnz	00849$
      0006FD 02r18r06         [24] 1768 	ljmp	00188$
      000700                       1769 00849$:
      000700 7B 00            [12] 1770 	mov	r3,#0x00
      000702 8C 82            [24] 1771 	mov	dpl,r4
      000704 8B 83            [24] 1772 	mov	dph,r3
      000706 12r00r00         [24] 1773 	lcall	_putchar
      000709 0D               [12] 1774 	inc	r5
                                   1775 ;	calc.c:140: if (!stack_peek(&ctx->s, &d0)) printstr("stack underflow\r\n");
      00070A BD 00 E4         [24] 1776 	cjne	r5,#0x00,00261$
      00070D 0E               [12] 1777 	inc	r6
      00070E 80 E1            [24] 1778 	sjmp	00261$
      000710                       1779 00103$:
                                   1780 ;	calc.c:142: printstr("PT ");
      000710 7Dr2F            [12] 1781 	mov	r5,#___str_5
      000712 7Es00            [12] 1782 	mov	r6,#(___str_5 >> 8)
      000714 7F 80            [12] 1783 	mov	r7,#0x80
                                   1784 ;	calc.c:50: return;
      000716                       1785 00264$:
                                   1786 ;	calc.c:48: for (; *s; s++) putchar(*s);
      000716 8D 82            [24] 1787 	mov	dpl,r5
      000718 8E 83            [24] 1788 	mov	dph,r6
      00071A 8F F0            [24] 1789 	mov	b,r7
      00071C 12r00r00         [24] 1790 	lcall	__gptrget
      00071F FC               [12] 1791 	mov	r4,a
      000720 60 10            [24] 1792 	jz	00194$
      000722 7B 00            [12] 1793 	mov	r3,#0x00
      000724 8C 82            [24] 1794 	mov	dpl,r4
      000726 8B 83            [24] 1795 	mov	dph,r3
      000728 12r00r00         [24] 1796 	lcall	_putchar
      00072B 0D               [12] 1797 	inc	r5
                                   1798 ;	calc.c:142: printstr("PT ");
      00072C BD 00 E7         [24] 1799 	cjne	r5,#0x00,00264$
      00072F 0E               [12] 1800 	inc	r6
      000730 80 E4            [24] 1801 	sjmp	00264$
      000732                       1802 00194$:
                                   1803 ;	calc.c:143: printf("% 11ld / %08lx / ", d0, d0);
      000732 E5*00            [12] 1804 	mov	a,_bp
      000734 24 07            [12] 1805 	add	a,#0x07
      000736 F8               [12] 1806 	mov	r0,a
      000737 E6               [12] 1807 	mov	a,@r0
      000738 C0 E0            [24] 1808 	push	acc
      00073A 08               [12] 1809 	inc	r0
      00073B E6               [12] 1810 	mov	a,@r0
      00073C C0 E0            [24] 1811 	push	acc
      00073E 08               [12] 1812 	inc	r0
      00073F E6               [12] 1813 	mov	a,@r0
      000740 C0 E0            [24] 1814 	push	acc
      000742 08               [12] 1815 	inc	r0
      000743 E6               [12] 1816 	mov	a,@r0
      000744 C0 E0            [24] 1817 	push	acc
      000746 E5*00            [12] 1818 	mov	a,_bp
      000748 24 07            [12] 1819 	add	a,#0x07
      00074A F8               [12] 1820 	mov	r0,a
      00074B E6               [12] 1821 	mov	a,@r0
      00074C C0 E0            [24] 1822 	push	acc
      00074E 08               [12] 1823 	inc	r0
      00074F E6               [12] 1824 	mov	a,@r0
      000750 C0 E0            [24] 1825 	push	acc
      000752 08               [12] 1826 	inc	r0
      000753 E6               [12] 1827 	mov	a,@r0
      000754 C0 E0            [24] 1828 	push	acc
      000756 08               [12] 1829 	inc	r0
      000757 E6               [12] 1830 	mov	a,@r0
      000758 C0 E0            [24] 1831 	push	acc
      00075A 74r19            [12] 1832 	mov	a,#___str_3
      00075C C0 E0            [24] 1833 	push	acc
      00075E 74s00            [12] 1834 	mov	a,#(___str_3 >> 8)
      000760 C0 E0            [24] 1835 	push	acc
      000762 74 80            [12] 1836 	mov	a,#0x80
      000764 C0 E0            [24] 1837 	push	acc
      000766 12r00r00         [24] 1838 	lcall	_printf
      000769 E5 81            [12] 1839 	mov	a,sp
      00076B 24 F5            [12] 1840 	add	a,#0xf5
      00076D F5 81            [12] 1841 	mov	sp,a
                                   1842 ;	calc.c:144: printbin(d0);
      00076F E5*00            [12] 1843 	mov	a,_bp
      000771 24 07            [12] 1844 	add	a,#0x07
      000773 F8               [12] 1845 	mov	r0,a
      000774 86 04            [24] 1846 	mov	ar4,@r0
      000776 08               [12] 1847 	inc	r0
      000777 86 05            [24] 1848 	mov	ar5,@r0
      000779 08               [12] 1849 	inc	r0
      00077A 86 06            [24] 1850 	mov	ar6,@r0
      00077C 08               [12] 1851 	inc	r0
      00077D 86 07            [24] 1852 	mov	ar7,@r0
      00077F E5*00            [12] 1853 	mov	a,_bp
      000781 24 0F            [12] 1854 	add	a,#0x0f
      000783 F8               [12] 1855 	mov	r0,a
      000784 A6 04            [24] 1856 	mov	@r0,ar4
      000786 08               [12] 1857 	inc	r0
      000787 A6 05            [24] 1858 	mov	@r0,ar5
      000789 08               [12] 1859 	inc	r0
      00078A A6 06            [24] 1860 	mov	@r0,ar6
      00078C 08               [12] 1861 	inc	r0
      00078D A6 07            [24] 1862 	mov	@r0,ar7
                                   1863 ;	calc.c:56: for (mask = 0x80000000lu; mask; mask >>= 1)
      00078F E5*00            [12] 1864 	mov	a,_bp
      000791 24 13            [12] 1865 	add	a,#0x13
      000793 F8               [12] 1866 	mov	r0,a
      000794 E4               [12] 1867 	clr	a
      000795 F6               [12] 1868 	mov	@r0,a
      000796 08               [12] 1869 	inc	r0
      000797 F6               [12] 1870 	mov	@r0,a
      000798 08               [12] 1871 	inc	r0
      000799 F6               [12] 1872 	mov	@r0,a
      00079A 08               [12] 1873 	inc	r0
      00079B 76 80            [12] 1874 	mov	@r0,#0x80
      00079D                       1875 00266$:
                                   1876 ;	calc.c:57: (void)putchar((d & mask) ? (int)'1' : (int)'0');
      00079D E5*00            [12] 1877 	mov	a,_bp
      00079F 24 0F            [12] 1878 	add	a,#0x0f
      0007A1 F8               [12] 1879 	mov	r0,a
      0007A2 86 04            [24] 1880 	mov	ar4,@r0
      0007A4 08               [12] 1881 	inc	r0
      0007A5 86 05            [24] 1882 	mov	ar5,@r0
      0007A7 08               [12] 1883 	inc	r0
      0007A8 86 06            [24] 1884 	mov	ar6,@r0
      0007AA 08               [12] 1885 	inc	r0
      0007AB 86 07            [24] 1886 	mov	ar7,@r0
      0007AD E5*00            [12] 1887 	mov	a,_bp
      0007AF 24 13            [12] 1888 	add	a,#0x13
      0007B1 F8               [12] 1889 	mov	r0,a
      0007B2 E6               [12] 1890 	mov	a,@r0
      0007B3 52 04            [12] 1891 	anl	ar4,a
      0007B5 08               [12] 1892 	inc	r0
      0007B6 E6               [12] 1893 	mov	a,@r0
      0007B7 52 05            [12] 1894 	anl	ar5,a
      0007B9 08               [12] 1895 	inc	r0
      0007BA E6               [12] 1896 	mov	a,@r0
      0007BB 52 06            [12] 1897 	anl	ar6,a
      0007BD 08               [12] 1898 	inc	r0
      0007BE E6               [12] 1899 	mov	a,@r0
      0007BF 52 07            [12] 1900 	anl	ar7,a
      0007C1 EC               [12] 1901 	mov	a,r4
      0007C2 4D               [12] 1902 	orl	a,r5
      0007C3 4E               [12] 1903 	orl	a,r6
      0007C4 4F               [12] 1904 	orl	a,r7
      0007C5 60 06            [24] 1905 	jz	00359$
      0007C7 7E 31            [12] 1906 	mov	r6,#0x31
      0007C9 7F 00            [12] 1907 	mov	r7,#0x00
      0007CB 80 04            [24] 1908 	sjmp	00360$
      0007CD                       1909 00359$:
      0007CD 7E 30            [12] 1910 	mov	r6,#0x30
      0007CF 7F 00            [12] 1911 	mov	r7,#0x00
      0007D1                       1912 00360$:
      0007D1 8E 82            [24] 1913 	mov	dpl,r6
      0007D3 8F 83            [24] 1914 	mov	dph,r7
      0007D5 12r00r00         [24] 1915 	lcall	_putchar
                                   1916 ;	calc.c:56: for (mask = 0x80000000lu; mask; mask >>= 1)
      0007D8 E5*00            [12] 1917 	mov	a,_bp
      0007DA 24 13            [12] 1918 	add	a,#0x13
      0007DC F8               [12] 1919 	mov	r0,a
      0007DD 08               [12] 1920 	inc	r0
      0007DE 08               [12] 1921 	inc	r0
      0007DF 08               [12] 1922 	inc	r0
      0007E0 E6               [12] 1923 	mov	a,@r0
      0007E1 C3               [12] 1924 	clr	c
      0007E2 13               [12] 1925 	rrc	a
      0007E3 F6               [12] 1926 	mov	@r0,a
      0007E4 18               [12] 1927 	dec	r0
      0007E5 E6               [12] 1928 	mov	a,@r0
      0007E6 13               [12] 1929 	rrc	a
      0007E7 F6               [12] 1930 	mov	@r0,a
      0007E8 18               [12] 1931 	dec	r0
      0007E9 E6               [12] 1932 	mov	a,@r0
      0007EA 13               [12] 1933 	rrc	a
      0007EB F6               [12] 1934 	mov	@r0,a
      0007EC 18               [12] 1935 	dec	r0
      0007ED E6               [12] 1936 	mov	a,@r0
      0007EE 13               [12] 1937 	rrc	a
      0007EF F6               [12] 1938 	mov	@r0,a
      0007F0 E5*00            [12] 1939 	mov	a,_bp
      0007F2 24 13            [12] 1940 	add	a,#0x13
      0007F4 F8               [12] 1941 	mov	r0,a
      0007F5 E6               [12] 1942 	mov	a,@r0
      0007F6 08               [12] 1943 	inc	r0
      0007F7 46               [12] 1944 	orl	a,@r0
      0007F8 08               [12] 1945 	inc	r0
      0007F9 46               [12] 1946 	orl	a,@r0
      0007FA 08               [12] 1947 	inc	r0
      0007FB 46               [12] 1948 	orl	a,@r0
      0007FC 70 9F            [24] 1949 	jnz	00266$
                                   1950 ;	calc.c:145: printstr("\r\n");
      0007FE 7Dr00            [12] 1951 	mov	r5,#___str_0
      000800 7Es00            [12] 1952 	mov	r6,#(___str_0 >> 8)
      000802 7F 80            [12] 1953 	mov	r7,#0x80
                                   1954 ;	calc.c:50: return;
      000804                       1955 00269$:
                                   1956 ;	calc.c:48: for (; *s; s++) putchar(*s);
      000804 8D 82            [24] 1957 	mov	dpl,r5
      000806 8E 83            [24] 1958 	mov	dph,r6
      000808 8F F0            [24] 1959 	mov	b,r7
      00080A 12r00r00         [24] 1960 	lcall	__gptrget
      00080D FC               [12] 1961 	mov	r4,a
      00080E 70 03            [24] 1962 	jnz	00855$
      000810 02r18r06         [24] 1963 	ljmp	00188$
      000813                       1964 00855$:
      000813 7B 00            [12] 1965 	mov	r3,#0x00
      000815 8C 82            [24] 1966 	mov	dpl,r4
      000817 8B 83            [24] 1967 	mov	dph,r3
      000819 12r00r00         [24] 1968 	lcall	_putchar
      00081C 0D               [12] 1969 	inc	r5
                                   1970 ;	calc.c:148: case 'P':
      00081D BD 00 E4         [24] 1971 	cjne	r5,#0x00,00269$
      000820 0E               [12] 1972 	inc	r6
      000821 80 E1            [24] 1973 	sjmp	00269$
      000823                       1974 00105$:
                                   1975 ;	calc.c:149: printstr("\r\n");
      000823 7Dr00            [12] 1976 	mov	r5,#___str_0
      000825 7Es00            [12] 1977 	mov	r6,#(___str_0 >> 8)
      000827 7F 80            [12] 1978 	mov	r7,#0x80
                                   1979 ;	calc.c:50: return;
      000829                       1980 00272$:
                                   1981 ;	calc.c:48: for (; *s; s++) putchar(*s);
      000829 8D 82            [24] 1982 	mov	dpl,r5
      00082B 8E 83            [24] 1983 	mov	dph,r6
      00082D 8F F0            [24] 1984 	mov	b,r7
      00082F 12r00r00         [24] 1985 	lcall	__gptrget
      000832 FC               [12] 1986 	mov	r4,a
      000833 60 10            [24] 1987 	jz	00200$
      000835 7B 00            [12] 1988 	mov	r3,#0x00
      000837 8C 82            [24] 1989 	mov	dpl,r4
      000839 8B 83            [24] 1990 	mov	dph,r3
      00083B 12r00r00         [24] 1991 	lcall	_putchar
      00083E 0D               [12] 1992 	inc	r5
                                   1993 ;	calc.c:149: printstr("\r\n");
      00083F BD 00 E7         [24] 1994 	cjne	r5,#0x00,00272$
      000842 0E               [12] 1995 	inc	r6
      000843 80 E4            [24] 1996 	sjmp	00272$
      000845                       1997 00200$:
                                   1998 ;	calc.c:150: if (!stack_iter_peek(&ctx->s, dump_peek, ctx)) printstr("stack underflow\r\n");
      000845 E5*00            [12] 1999 	mov	a,_bp
      000847 24 04            [12] 2000 	add	a,#0x04
      000849 F8               [12] 2001 	mov	r0,a
      00084A 86 02            [24] 2002 	mov	ar2,@r0
      00084C 08               [12] 2003 	inc	r0
      00084D 86 03            [24] 2004 	mov	ar3,@r0
      00084F 08               [12] 2005 	inc	r0
      000850 86 04            [24] 2006 	mov	ar4,@r0
      000852 E5*00            [12] 2007 	mov	a,_bp
      000854 24 04            [12] 2008 	add	a,#0x04
      000856 F8               [12] 2009 	mov	r0,a
      000857 74 09            [12] 2010 	mov	a,#0x09
      000859 26               [12] 2011 	add	a,@r0
      00085A FD               [12] 2012 	mov	r5,a
      00085B E4               [12] 2013 	clr	a
      00085C 08               [12] 2014 	inc	r0
      00085D 36               [12] 2015 	addc	a,@r0
      00085E FE               [12] 2016 	mov	r6,a
      00085F 08               [12] 2017 	inc	r0
      000860 86 07            [24] 2018 	mov	ar7,@r0
      000862 C0 02            [24] 2019 	push	ar2
      000864 C0 03            [24] 2020 	push	ar3
      000866 C0 04            [24] 2021 	push	ar4
      000868 74rDB            [12] 2022 	mov	a,#_dump_peek
      00086A C0 E0            [24] 2023 	push	acc
      00086C 74s04            [12] 2024 	mov	a,#(_dump_peek >> 8)
      00086E C0 E0            [24] 2025 	push	acc
      000870 8D 82            [24] 2026 	mov	dpl,r5
      000872 8E 83            [24] 2027 	mov	dph,r6
      000874 8F F0            [24] 2028 	mov	b,r7
      000876 12r00r00         [24] 2029 	lcall	_stack_iter_peek
      000879 AE 82            [24] 2030 	mov	r6,dpl
      00087B AF 83            [24] 2031 	mov	r7,dph
      00087D E5 81            [12] 2032 	mov	a,sp
      00087F 24 FB            [12] 2033 	add	a,#0xfb
      000881 F5 81            [12] 2034 	mov	sp,a
      000883 EE               [12] 2035 	mov	a,r6
      000884 4F               [12] 2036 	orl	a,r7
      000885 60 03            [24] 2037 	jz	00859$
      000887 02r18r06         [24] 2038 	ljmp	00188$
      00088A                       2039 00859$:
      00088A 7Dr03            [12] 2040 	mov	r5,#___str_1
      00088C 7Es00            [12] 2041 	mov	r6,#(___str_1 >> 8)
      00088E 7F 80            [12] 2042 	mov	r7,#0x80
                                   2043 ;	calc.c:50: return;
      000890                       2044 00275$:
                                   2045 ;	calc.c:48: for (; *s; s++) putchar(*s);
      000890 8D 82            [24] 2046 	mov	dpl,r5
      000892 8E 83            [24] 2047 	mov	dph,r6
      000894 8F F0            [24] 2048 	mov	b,r7
      000896 12r00r00         [24] 2049 	lcall	__gptrget
      000899 FC               [12] 2050 	mov	r4,a
      00089A 70 03            [24] 2051 	jnz	00860$
      00089C 02r18r06         [24] 2052 	ljmp	00188$
      00089F                       2053 00860$:
      00089F 7B 00            [12] 2054 	mov	r3,#0x00
      0008A1 8C 82            [24] 2055 	mov	dpl,r4
      0008A3 8B 83            [24] 2056 	mov	dph,r3
      0008A5 12r00r00         [24] 2057 	lcall	_putchar
      0008A8 0D               [12] 2058 	inc	r5
                                   2059 ;	calc.c:153: case 'v':
      0008A9 BD 00 E4         [24] 2060 	cjne	r5,#0x00,00275$
      0008AC 0E               [12] 2061 	inc	r6
      0008AD 80 E1            [24] 2062 	sjmp	00275$
      0008AF                       2063 00109$:
                                   2064 ;	calc.c:154: printstr("\r\n");
      0008AF 7Dr00            [12] 2065 	mov	r5,#___str_0
      0008B1 7Es00            [12] 2066 	mov	r6,#(___str_0 >> 8)
      0008B3 7F 80            [12] 2067 	mov	r7,#0x80
                                   2068 ;	calc.c:50: return;
      0008B5                       2069 00278$:
                                   2070 ;	calc.c:48: for (; *s; s++) putchar(*s);
      0008B5 8D 82            [24] 2071 	mov	dpl,r5
      0008B7 8E 83            [24] 2072 	mov	dph,r6
      0008B9 8F F0            [24] 2073 	mov	b,r7
      0008BB 12r00r00         [24] 2074 	lcall	__gptrget
      0008BE FC               [12] 2075 	mov	r4,a
      0008BF 60 10            [24] 2076 	jz	00204$
      0008C1 7B 00            [12] 2077 	mov	r3,#0x00
      0008C3 8C 82            [24] 2078 	mov	dpl,r4
      0008C5 8B 83            [24] 2079 	mov	dph,r3
      0008C7 12r00r00         [24] 2080 	lcall	_putchar
      0008CA 0D               [12] 2081 	inc	r5
                                   2082 ;	calc.c:154: printstr("\r\n");
      0008CB BD 00 E7         [24] 2083 	cjne	r5,#0x00,00278$
      0008CE 0E               [12] 2084 	inc	r6
      0008CF 80 E4            [24] 2085 	sjmp	00278$
      0008D1                       2086 00204$:
                                   2087 ;	calc.c:155: if (!stack_pop(&ctx->s, &d0)) printstr("stack underflow\r\n");
      0008D1 E5*00            [12] 2088 	mov	a,_bp
      0008D3 24 07            [12] 2089 	add	a,#0x07
      0008D5 FF               [12] 2090 	mov	r7,a
      0008D6 7E 00            [12] 2091 	mov	r6,#0x00
      0008D8 7D 40            [12] 2092 	mov	r5,#0x40
      0008DA E5*00            [12] 2093 	mov	a,_bp
      0008DC 24 04            [12] 2094 	add	a,#0x04
      0008DE F8               [12] 2095 	mov	r0,a
      0008DF 74 09            [12] 2096 	mov	a,#0x09
      0008E1 26               [12] 2097 	add	a,@r0
      0008E2 FA               [12] 2098 	mov	r2,a
      0008E3 E4               [12] 2099 	clr	a
      0008E4 08               [12] 2100 	inc	r0
      0008E5 36               [12] 2101 	addc	a,@r0
      0008E6 FB               [12] 2102 	mov	r3,a
      0008E7 08               [12] 2103 	inc	r0
      0008E8 86 04            [24] 2104 	mov	ar4,@r0
      0008EA C0 07            [24] 2105 	push	ar7
      0008EC C0 06            [24] 2106 	push	ar6
      0008EE C0 05            [24] 2107 	push	ar5
      0008F0 8A 82            [24] 2108 	mov	dpl,r2
      0008F2 8B 83            [24] 2109 	mov	dph,r3
      0008F4 8C F0            [24] 2110 	mov	b,r4
      0008F6 12r00r00         [24] 2111 	lcall	_stack_pop
      0008F9 AE 82            [24] 2112 	mov	r6,dpl
      0008FB AF 83            [24] 2113 	mov	r7,dph
      0008FD 15 81            [12] 2114 	dec	sp
      0008FF 15 81            [12] 2115 	dec	sp
      000901 15 81            [12] 2116 	dec	sp
      000903 EE               [12] 2117 	mov	a,r6
      000904 4F               [12] 2118 	orl	a,r7
      000905 70 25            [24] 2119 	jnz	00111$
      000907 7Dr03            [12] 2120 	mov	r5,#___str_1
      000909 7Es00            [12] 2121 	mov	r6,#(___str_1 >> 8)
      00090B 7F 80            [12] 2122 	mov	r7,#0x80
                                   2123 ;	calc.c:50: return;
      00090D                       2124 00281$:
                                   2125 ;	calc.c:48: for (; *s; s++) putchar(*s);
      00090D 8D 82            [24] 2126 	mov	dpl,r5
      00090F 8E 83            [24] 2127 	mov	dph,r6
      000911 8F F0            [24] 2128 	mov	b,r7
      000913 12r00r00         [24] 2129 	lcall	__gptrget
      000916 FC               [12] 2130 	mov	r4,a
      000917 70 03            [24] 2131 	jnz	00865$
      000919 02r18r06         [24] 2132 	ljmp	00188$
      00091C                       2133 00865$:
      00091C 7B 00            [12] 2134 	mov	r3,#0x00
      00091E 8C 82            [24] 2135 	mov	dpl,r4
      000920 8B 83            [24] 2136 	mov	dph,r3
      000922 12r00r00         [24] 2137 	lcall	_putchar
      000925 0D               [12] 2138 	inc	r5
                                   2139 ;	calc.c:155: if (!stack_pop(&ctx->s, &d0)) printstr("stack underflow\r\n");
      000926 BD 00 E4         [24] 2140 	cjne	r5,#0x00,00281$
      000929 0E               [12] 2141 	inc	r6
      00092A 80 E1            [24] 2142 	sjmp	00281$
      00092C                       2143 00111$:
                                   2144 ;	calc.c:157: printstr("VT ");
      00092C 7Dr33            [12] 2145 	mov	r5,#___str_6
      00092E 7Es00            [12] 2146 	mov	r6,#(___str_6 >> 8)
      000930 7F 80            [12] 2147 	mov	r7,#0x80
                                   2148 ;	calc.c:50: return;
      000932                       2149 00284$:
                                   2150 ;	calc.c:48: for (; *s; s++) putchar(*s);
      000932 8D 82            [24] 2151 	mov	dpl,r5
      000934 8E 83            [24] 2152 	mov	dph,r6
      000936 8F F0            [24] 2153 	mov	b,r7
      000938 12r00r00         [24] 2154 	lcall	__gptrget
      00093B FC               [12] 2155 	mov	r4,a
      00093C 60 10            [24] 2156 	jz	00208$
      00093E 7B 00            [12] 2157 	mov	r3,#0x00
      000940 8C 82            [24] 2158 	mov	dpl,r4
      000942 8B 83            [24] 2159 	mov	dph,r3
      000944 12r00r00         [24] 2160 	lcall	_putchar
      000947 0D               [12] 2161 	inc	r5
                                   2162 ;	calc.c:157: printstr("VT ");
      000948 BD 00 E7         [24] 2163 	cjne	r5,#0x00,00284$
      00094B 0E               [12] 2164 	inc	r6
      00094C 80 E4            [24] 2165 	sjmp	00284$
      00094E                       2166 00208$:
                                   2167 ;	calc.c:158: printf("% 11ld / %08lx / ", d0, d0);
      00094E E5*00            [12] 2168 	mov	a,_bp
      000950 24 07            [12] 2169 	add	a,#0x07
      000952 F8               [12] 2170 	mov	r0,a
      000953 E6               [12] 2171 	mov	a,@r0
      000954 C0 E0            [24] 2172 	push	acc
      000956 08               [12] 2173 	inc	r0
      000957 E6               [12] 2174 	mov	a,@r0
      000958 C0 E0            [24] 2175 	push	acc
      00095A 08               [12] 2176 	inc	r0
      00095B E6               [12] 2177 	mov	a,@r0
      00095C C0 E0            [24] 2178 	push	acc
      00095E 08               [12] 2179 	inc	r0
      00095F E6               [12] 2180 	mov	a,@r0
      000960 C0 E0            [24] 2181 	push	acc
      000962 E5*00            [12] 2182 	mov	a,_bp
      000964 24 07            [12] 2183 	add	a,#0x07
      000966 F8               [12] 2184 	mov	r0,a
      000967 E6               [12] 2185 	mov	a,@r0
      000968 C0 E0            [24] 2186 	push	acc
      00096A 08               [12] 2187 	inc	r0
      00096B E6               [12] 2188 	mov	a,@r0
      00096C C0 E0            [24] 2189 	push	acc
      00096E 08               [12] 2190 	inc	r0
      00096F E6               [12] 2191 	mov	a,@r0
      000970 C0 E0            [24] 2192 	push	acc
      000972 08               [12] 2193 	inc	r0
      000973 E6               [12] 2194 	mov	a,@r0
      000974 C0 E0            [24] 2195 	push	acc
      000976 74r19            [12] 2196 	mov	a,#___str_3
      000978 C0 E0            [24] 2197 	push	acc
      00097A 74s00            [12] 2198 	mov	a,#(___str_3 >> 8)
      00097C C0 E0            [24] 2199 	push	acc
      00097E 74 80            [12] 2200 	mov	a,#0x80
      000980 C0 E0            [24] 2201 	push	acc
      000982 12r00r00         [24] 2202 	lcall	_printf
      000985 E5 81            [12] 2203 	mov	a,sp
      000987 24 F5            [12] 2204 	add	a,#0xf5
      000989 F5 81            [12] 2205 	mov	sp,a
                                   2206 ;	calc.c:159: printbin(d0);
      00098B E5*00            [12] 2207 	mov	a,_bp
      00098D 24 07            [12] 2208 	add	a,#0x07
      00098F F8               [12] 2209 	mov	r0,a
      000990 86 04            [24] 2210 	mov	ar4,@r0
      000992 08               [12] 2211 	inc	r0
      000993 86 05            [24] 2212 	mov	ar5,@r0
      000995 08               [12] 2213 	inc	r0
      000996 86 06            [24] 2214 	mov	ar6,@r0
      000998 08               [12] 2215 	inc	r0
      000999 86 07            [24] 2216 	mov	ar7,@r0
      00099B E5*00            [12] 2217 	mov	a,_bp
      00099D 24 0F            [12] 2218 	add	a,#0x0f
      00099F F8               [12] 2219 	mov	r0,a
      0009A0 A6 04            [24] 2220 	mov	@r0,ar4
      0009A2 08               [12] 2221 	inc	r0
      0009A3 A6 05            [24] 2222 	mov	@r0,ar5
      0009A5 08               [12] 2223 	inc	r0
      0009A6 A6 06            [24] 2224 	mov	@r0,ar6
      0009A8 08               [12] 2225 	inc	r0
      0009A9 A6 07            [24] 2226 	mov	@r0,ar7
                                   2227 ;	calc.c:56: for (mask = 0x80000000lu; mask; mask >>= 1)
      0009AB E5*00            [12] 2228 	mov	a,_bp
      0009AD 24 13            [12] 2229 	add	a,#0x13
      0009AF F8               [12] 2230 	mov	r0,a
      0009B0 E4               [12] 2231 	clr	a
      0009B1 F6               [12] 2232 	mov	@r0,a
      0009B2 08               [12] 2233 	inc	r0
      0009B3 F6               [12] 2234 	mov	@r0,a
      0009B4 08               [12] 2235 	inc	r0
      0009B5 F6               [12] 2236 	mov	@r0,a
      0009B6 08               [12] 2237 	inc	r0
      0009B7 76 80            [12] 2238 	mov	@r0,#0x80
      0009B9                       2239 00286$:
                                   2240 ;	calc.c:57: (void)putchar((d & mask) ? (int)'1' : (int)'0');
      0009B9 E5*00            [12] 2241 	mov	a,_bp
      0009BB 24 0F            [12] 2242 	add	a,#0x0f
      0009BD F8               [12] 2243 	mov	r0,a
      0009BE 86 04            [24] 2244 	mov	ar4,@r0
      0009C0 08               [12] 2245 	inc	r0
      0009C1 86 05            [24] 2246 	mov	ar5,@r0
      0009C3 08               [12] 2247 	inc	r0
      0009C4 86 06            [24] 2248 	mov	ar6,@r0
      0009C6 08               [12] 2249 	inc	r0
      0009C7 86 07            [24] 2250 	mov	ar7,@r0
      0009C9 E5*00            [12] 2251 	mov	a,_bp
      0009CB 24 13            [12] 2252 	add	a,#0x13
      0009CD F8               [12] 2253 	mov	r0,a
      0009CE E6               [12] 2254 	mov	a,@r0
      0009CF 52 04            [12] 2255 	anl	ar4,a
      0009D1 08               [12] 2256 	inc	r0
      0009D2 E6               [12] 2257 	mov	a,@r0
      0009D3 52 05            [12] 2258 	anl	ar5,a
      0009D5 08               [12] 2259 	inc	r0
      0009D6 E6               [12] 2260 	mov	a,@r0
      0009D7 52 06            [12] 2261 	anl	ar6,a
      0009D9 08               [12] 2262 	inc	r0
      0009DA E6               [12] 2263 	mov	a,@r0
      0009DB 52 07            [12] 2264 	anl	ar7,a
      0009DD EC               [12] 2265 	mov	a,r4
      0009DE 4D               [12] 2266 	orl	a,r5
      0009DF 4E               [12] 2267 	orl	a,r6
      0009E0 4F               [12] 2268 	orl	a,r7
      0009E1 60 06            [24] 2269 	jz	00361$
      0009E3 7E 31            [12] 2270 	mov	r6,#0x31
      0009E5 7F 00            [12] 2271 	mov	r7,#0x00
      0009E7 80 04            [24] 2272 	sjmp	00362$
      0009E9                       2273 00361$:
      0009E9 7E 30            [12] 2274 	mov	r6,#0x30
      0009EB 7F 00            [12] 2275 	mov	r7,#0x00
      0009ED                       2276 00362$:
      0009ED 8E 82            [24] 2277 	mov	dpl,r6
      0009EF 8F 83            [24] 2278 	mov	dph,r7
      0009F1 12r00r00         [24] 2279 	lcall	_putchar
                                   2280 ;	calc.c:56: for (mask = 0x80000000lu; mask; mask >>= 1)
      0009F4 E5*00            [12] 2281 	mov	a,_bp
      0009F6 24 13            [12] 2282 	add	a,#0x13
      0009F8 F8               [12] 2283 	mov	r0,a
      0009F9 08               [12] 2284 	inc	r0
      0009FA 08               [12] 2285 	inc	r0
      0009FB 08               [12] 2286 	inc	r0
      0009FC E6               [12] 2287 	mov	a,@r0
      0009FD C3               [12] 2288 	clr	c
      0009FE 13               [12] 2289 	rrc	a
      0009FF F6               [12] 2290 	mov	@r0,a
      000A00 18               [12] 2291 	dec	r0
      000A01 E6               [12] 2292 	mov	a,@r0
      000A02 13               [12] 2293 	rrc	a
      000A03 F6               [12] 2294 	mov	@r0,a
      000A04 18               [12] 2295 	dec	r0
      000A05 E6               [12] 2296 	mov	a,@r0
      000A06 13               [12] 2297 	rrc	a
      000A07 F6               [12] 2298 	mov	@r0,a
      000A08 18               [12] 2299 	dec	r0
      000A09 E6               [12] 2300 	mov	a,@r0
      000A0A 13               [12] 2301 	rrc	a
      000A0B F6               [12] 2302 	mov	@r0,a
      000A0C E5*00            [12] 2303 	mov	a,_bp
      000A0E 24 13            [12] 2304 	add	a,#0x13
      000A10 F8               [12] 2305 	mov	r0,a
      000A11 E6               [12] 2306 	mov	a,@r0
      000A12 08               [12] 2307 	inc	r0
      000A13 46               [12] 2308 	orl	a,@r0
      000A14 08               [12] 2309 	inc	r0
      000A15 46               [12] 2310 	orl	a,@r0
      000A16 08               [12] 2311 	inc	r0
      000A17 46               [12] 2312 	orl	a,@r0
      000A18 70 9F            [24] 2313 	jnz	00286$
                                   2314 ;	calc.c:160: printstr("\r\n");
      000A1A 7Dr00            [12] 2315 	mov	r5,#___str_0
      000A1C 7Es00            [12] 2316 	mov	r6,#(___str_0 >> 8)
      000A1E 7F 80            [12] 2317 	mov	r7,#0x80
                                   2318 ;	calc.c:50: return;
      000A20                       2319 00289$:
                                   2320 ;	calc.c:48: for (; *s; s++) putchar(*s);
      000A20 8D 82            [24] 2321 	mov	dpl,r5
      000A22 8E 83            [24] 2322 	mov	dph,r6
      000A24 8F F0            [24] 2323 	mov	b,r7
      000A26 12r00r00         [24] 2324 	lcall	__gptrget
      000A29 FC               [12] 2325 	mov	r4,a
      000A2A 70 03            [24] 2326 	jnz	00871$
      000A2C 02r18r06         [24] 2327 	ljmp	00188$
      000A2F                       2328 00871$:
      000A2F 7B 00            [12] 2329 	mov	r3,#0x00
      000A31 8C 82            [24] 2330 	mov	dpl,r4
      000A33 8B 83            [24] 2331 	mov	dph,r3
      000A35 12r00r00         [24] 2332 	lcall	_putchar
      000A38 0D               [12] 2333 	inc	r5
                                   2334 ;	calc.c:163: case 'V':
      000A39 BD 00 E4         [24] 2335 	cjne	r5,#0x00,00289$
      000A3C 0E               [12] 2336 	inc	r6
      000A3D 80 E1            [24] 2337 	sjmp	00289$
      000A3F                       2338 00113$:
                                   2339 ;	calc.c:164: printstr("\r\n");
      000A3F 7Dr00            [12] 2340 	mov	r5,#___str_0
      000A41 7Es00            [12] 2341 	mov	r6,#(___str_0 >> 8)
      000A43 7F 80            [12] 2342 	mov	r7,#0x80
                                   2343 ;	calc.c:50: return;
      000A45                       2344 00292$:
                                   2345 ;	calc.c:48: for (; *s; s++) putchar(*s);
      000A45 8D 82            [24] 2346 	mov	dpl,r5
      000A47 8E 83            [24] 2347 	mov	dph,r6
      000A49 8F F0            [24] 2348 	mov	b,r7
      000A4B 12r00r00         [24] 2349 	lcall	__gptrget
      000A4E FC               [12] 2350 	mov	r4,a
      000A4F 60 10            [24] 2351 	jz	00214$
      000A51 7B 00            [12] 2352 	mov	r3,#0x00
      000A53 8C 82            [24] 2353 	mov	dpl,r4
      000A55 8B 83            [24] 2354 	mov	dph,r3
      000A57 12r00r00         [24] 2355 	lcall	_putchar
      000A5A 0D               [12] 2356 	inc	r5
                                   2357 ;	calc.c:164: printstr("\r\n");
      000A5B BD 00 E7         [24] 2358 	cjne	r5,#0x00,00292$
      000A5E 0E               [12] 2359 	inc	r6
      000A5F 80 E4            [24] 2360 	sjmp	00292$
      000A61                       2361 00214$:
                                   2362 ;	calc.c:165: (void)dump_pop(_ctx, delta);
      000A61 E5*00            [12] 2363 	mov	a,_bp
      000A63 24 FB            [12] 2364 	add	a,#0xfb
      000A65 F8               [12] 2365 	mov	r0,a
      000A66 E6               [12] 2366 	mov	a,@r0
      000A67 C0 E0            [24] 2367 	push	acc
      000A69 08               [12] 2368 	inc	r0
      000A6A E6               [12] 2369 	mov	a,@r0
      000A6B C0 E0            [24] 2370 	push	acc
      000A6D 08               [12] 2371 	inc	r0
      000A6E E6               [12] 2372 	mov	a,@r0
      000A6F C0 E0            [24] 2373 	push	acc
      000A71 A8*00            [24] 2374 	mov	r0,_bp
      000A73 08               [12] 2375 	inc	r0
      000A74 86 82            [24] 2376 	mov	dpl,@r0
      000A76 08               [12] 2377 	inc	r0
      000A77 86 83            [24] 2378 	mov	dph,@r0
      000A79 08               [12] 2379 	inc	r0
      000A7A 86 F0            [24] 2380 	mov	b,@r0
      000A7C 12r02r3C         [24] 2381 	lcall	_dump_pop
      000A7F 15 81            [12] 2382 	dec	sp
      000A81 15 81            [12] 2383 	dec	sp
      000A83 15 81            [12] 2384 	dec	sp
                                   2385 ;	calc.c:166: break;
      000A85 02r18r06         [24] 2386 	ljmp	00188$
                                   2387 ;	calc.c:167: case 'x':
      000A88                       2388 00114$:
                                   2389 ;	calc.c:168: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      000A88 E5*00            [12] 2390 	mov	a,_bp
      000A8A 24 07            [12] 2391 	add	a,#0x07
      000A8C FF               [12] 2392 	mov	r7,a
      000A8D 7E 00            [12] 2393 	mov	r6,#0x00
      000A8F 7D 40            [12] 2394 	mov	r5,#0x40
      000A91 E5*00            [12] 2395 	mov	a,_bp
      000A93 24 04            [12] 2396 	add	a,#0x04
      000A95 F8               [12] 2397 	mov	r0,a
      000A96 74 09            [12] 2398 	mov	a,#0x09
      000A98 26               [12] 2399 	add	a,@r0
      000A99 FA               [12] 2400 	mov	r2,a
      000A9A E4               [12] 2401 	clr	a
      000A9B 08               [12] 2402 	inc	r0
      000A9C 36               [12] 2403 	addc	a,@r0
      000A9D FB               [12] 2404 	mov	r3,a
      000A9E 08               [12] 2405 	inc	r0
      000A9F 86 04            [24] 2406 	mov	ar4,@r0
      000AA1 C0 07            [24] 2407 	push	ar7
      000AA3 C0 06            [24] 2408 	push	ar6
      000AA5 C0 05            [24] 2409 	push	ar5
      000AA7 8A 82            [24] 2410 	mov	dpl,r2
      000AA9 8B 83            [24] 2411 	mov	dph,r3
      000AAB 8C F0            [24] 2412 	mov	b,r4
      000AAD 12r00r00         [24] 2413 	lcall	_stack_pop
      000AB0 AE 82            [24] 2414 	mov	r6,dpl
      000AB2 AF 83            [24] 2415 	mov	r7,dph
      000AB4 15 81            [12] 2416 	dec	sp
      000AB6 15 81            [12] 2417 	dec	sp
      000AB8 15 81            [12] 2418 	dec	sp
      000ABA EE               [12] 2419 	mov	a,r6
      000ABB 4F               [12] 2420 	orl	a,r7
      000ABC 70 25            [24] 2421 	jnz	00119$
      000ABE 7Dr37            [12] 2422 	mov	r5,#___str_7
      000AC0 7Es00            [12] 2423 	mov	r6,#(___str_7 >> 8)
      000AC2 7F 80            [12] 2424 	mov	r7,#0x80
                                   2425 ;	calc.c:50: return;
      000AC4                       2426 00295$:
                                   2427 ;	calc.c:48: for (; *s; s++) putchar(*s);
      000AC4 8D 82            [24] 2428 	mov	dpl,r5
      000AC6 8E 83            [24] 2429 	mov	dph,r6
      000AC8 8F F0            [24] 2430 	mov	b,r7
      000ACA 12r00r00         [24] 2431 	lcall	__gptrget
      000ACD FC               [12] 2432 	mov	r4,a
      000ACE 70 03            [24] 2433 	jnz	00876$
      000AD0 02r18r06         [24] 2434 	ljmp	00188$
      000AD3                       2435 00876$:
      000AD3 7B 00            [12] 2436 	mov	r3,#0x00
      000AD5 8C 82            [24] 2437 	mov	dpl,r4
      000AD7 8B 83            [24] 2438 	mov	dph,r3
      000AD9 12r00r00         [24] 2439 	lcall	_putchar
      000ADC 0D               [12] 2440 	inc	r5
                                   2441 ;	calc.c:168: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      000ADD BD 00 E4         [24] 2442 	cjne	r5,#0x00,00295$
      000AE0 0E               [12] 2443 	inc	r6
      000AE1 80 E1            [24] 2444 	sjmp	00295$
      000AE3                       2445 00119$:
                                   2446 ;	calc.c:169: else if (!stack_pop(&ctx->s, &d1)) {
      000AE3 E5*00            [12] 2447 	mov	a,_bp
      000AE5 24 0B            [12] 2448 	add	a,#0x0b
      000AE7 FF               [12] 2449 	mov	r7,a
      000AE8 7E 00            [12] 2450 	mov	r6,#0x00
      000AEA 7D 40            [12] 2451 	mov	r5,#0x40
      000AEC E5*00            [12] 2452 	mov	a,_bp
      000AEE 24 04            [12] 2453 	add	a,#0x04
      000AF0 F8               [12] 2454 	mov	r0,a
      000AF1 74 09            [12] 2455 	mov	a,#0x09
      000AF3 26               [12] 2456 	add	a,@r0
      000AF4 FA               [12] 2457 	mov	r2,a
      000AF5 E4               [12] 2458 	clr	a
      000AF6 08               [12] 2459 	inc	r0
      000AF7 36               [12] 2460 	addc	a,@r0
      000AF8 FB               [12] 2461 	mov	r3,a
      000AF9 08               [12] 2462 	inc	r0
      000AFA 86 04            [24] 2463 	mov	ar4,@r0
      000AFC C0 07            [24] 2464 	push	ar7
      000AFE C0 06            [24] 2465 	push	ar6
      000B00 C0 05            [24] 2466 	push	ar5
      000B02 8A 82            [24] 2467 	mov	dpl,r2
      000B04 8B 83            [24] 2468 	mov	dph,r3
      000B06 8C F0            [24] 2469 	mov	b,r4
      000B08 12r00r00         [24] 2470 	lcall	_stack_pop
      000B0B AE 82            [24] 2471 	mov	r6,dpl
      000B0D AF 83            [24] 2472 	mov	r7,dph
      000B0F 15 81            [12] 2473 	dec	sp
      000B11 15 81            [12] 2474 	dec	sp
      000B13 15 81            [12] 2475 	dec	sp
      000B15 EE               [12] 2476 	mov	a,r6
      000B16 4F               [12] 2477 	orl	a,r7
      000B17 70 58            [24] 2478 	jnz	00116$
                                   2479 ;	calc.c:170: (void)stack_push(&ctx->s, d0);
      000B19 E5*00            [12] 2480 	mov	a,_bp
      000B1B 24 04            [12] 2481 	add	a,#0x04
      000B1D F8               [12] 2482 	mov	r0,a
      000B1E 74 09            [12] 2483 	mov	a,#0x09
      000B20 26               [12] 2484 	add	a,@r0
      000B21 FD               [12] 2485 	mov	r5,a
      000B22 E4               [12] 2486 	clr	a
      000B23 08               [12] 2487 	inc	r0
      000B24 36               [12] 2488 	addc	a,@r0
      000B25 FE               [12] 2489 	mov	r6,a
      000B26 08               [12] 2490 	inc	r0
      000B27 86 07            [24] 2491 	mov	ar7,@r0
      000B29 E5*00            [12] 2492 	mov	a,_bp
      000B2B 24 07            [12] 2493 	add	a,#0x07
      000B2D F8               [12] 2494 	mov	r0,a
      000B2E E6               [12] 2495 	mov	a,@r0
      000B2F C0 E0            [24] 2496 	push	acc
      000B31 08               [12] 2497 	inc	r0
      000B32 E6               [12] 2498 	mov	a,@r0
      000B33 C0 E0            [24] 2499 	push	acc
      000B35 08               [12] 2500 	inc	r0
      000B36 E6               [12] 2501 	mov	a,@r0
      000B37 C0 E0            [24] 2502 	push	acc
      000B39 08               [12] 2503 	inc	r0
      000B3A E6               [12] 2504 	mov	a,@r0
      000B3B C0 E0            [24] 2505 	push	acc
      000B3D 8D 82            [24] 2506 	mov	dpl,r5
      000B3F 8E 83            [24] 2507 	mov	dph,r6
      000B41 8F F0            [24] 2508 	mov	b,r7
      000B43 12r00r00         [24] 2509 	lcall	_stack_push
      000B46 E5 81            [12] 2510 	mov	a,sp
      000B48 24 FC            [12] 2511 	add	a,#0xfc
      000B4A F5 81            [12] 2512 	mov	sp,a
                                   2513 ;	calc.c:171: printstr("\r\nstack underflow\r\n");
      000B4C 7Dr37            [12] 2514 	mov	r5,#___str_7
      000B4E 7Es00            [12] 2515 	mov	r6,#(___str_7 >> 8)
      000B50 7F 80            [12] 2516 	mov	r7,#0x80
                                   2517 ;	calc.c:50: return;
      000B52                       2518 00298$:
                                   2519 ;	calc.c:48: for (; *s; s++) putchar(*s);
      000B52 8D 82            [24] 2520 	mov	dpl,r5
      000B54 8E 83            [24] 2521 	mov	dph,r6
      000B56 8F F0            [24] 2522 	mov	b,r7
      000B58 12r00r00         [24] 2523 	lcall	__gptrget
      000B5B FC               [12] 2524 	mov	r4,a
      000B5C 70 03            [24] 2525 	jnz	00879$
      000B5E 02r18r06         [24] 2526 	ljmp	00188$
      000B61                       2527 00879$:
      000B61 7B 00            [12] 2528 	mov	r3,#0x00
      000B63 8C 82            [24] 2529 	mov	dpl,r4
      000B65 8B 83            [24] 2530 	mov	dph,r3
      000B67 12r00r00         [24] 2531 	lcall	_putchar
      000B6A 0D               [12] 2532 	inc	r5
                                   2533 ;	calc.c:171: printstr("\r\nstack underflow\r\n");
      000B6B BD 00 E4         [24] 2534 	cjne	r5,#0x00,00298$
      000B6E 0E               [12] 2535 	inc	r6
      000B6F 80 E1            [24] 2536 	sjmp	00298$
      000B71                       2537 00116$:
                                   2538 ;	calc.c:173: (void)stack_push(&ctx->s, d0);
      000B71 E5*00            [12] 2539 	mov	a,_bp
      000B73 24 04            [12] 2540 	add	a,#0x04
      000B75 F8               [12] 2541 	mov	r0,a
      000B76 74 09            [12] 2542 	mov	a,#0x09
      000B78 26               [12] 2543 	add	a,@r0
      000B79 FD               [12] 2544 	mov	r5,a
      000B7A E4               [12] 2545 	clr	a
      000B7B 08               [12] 2546 	inc	r0
      000B7C 36               [12] 2547 	addc	a,@r0
      000B7D FE               [12] 2548 	mov	r6,a
      000B7E 08               [12] 2549 	inc	r0
      000B7F 86 07            [24] 2550 	mov	ar7,@r0
      000B81 E5*00            [12] 2551 	mov	a,_bp
      000B83 24 07            [12] 2552 	add	a,#0x07
      000B85 F8               [12] 2553 	mov	r0,a
      000B86 E6               [12] 2554 	mov	a,@r0
      000B87 C0 E0            [24] 2555 	push	acc
      000B89 08               [12] 2556 	inc	r0
      000B8A E6               [12] 2557 	mov	a,@r0
      000B8B C0 E0            [24] 2558 	push	acc
      000B8D 08               [12] 2559 	inc	r0
      000B8E E6               [12] 2560 	mov	a,@r0
      000B8F C0 E0            [24] 2561 	push	acc
      000B91 08               [12] 2562 	inc	r0
      000B92 E6               [12] 2563 	mov	a,@r0
      000B93 C0 E0            [24] 2564 	push	acc
      000B95 8D 82            [24] 2565 	mov	dpl,r5
      000B97 8E 83            [24] 2566 	mov	dph,r6
      000B99 8F F0            [24] 2567 	mov	b,r7
      000B9B 12r00r00         [24] 2568 	lcall	_stack_push
      000B9E E5 81            [12] 2569 	mov	a,sp
      000BA0 24 FC            [12] 2570 	add	a,#0xfc
      000BA2 F5 81            [12] 2571 	mov	sp,a
                                   2572 ;	calc.c:174: (void)stack_push(&ctx->s, d1);
      000BA4 E5*00            [12] 2573 	mov	a,_bp
      000BA6 24 04            [12] 2574 	add	a,#0x04
      000BA8 F8               [12] 2575 	mov	r0,a
      000BA9 74 09            [12] 2576 	mov	a,#0x09
      000BAB 26               [12] 2577 	add	a,@r0
      000BAC FD               [12] 2578 	mov	r5,a
      000BAD E4               [12] 2579 	clr	a
      000BAE 08               [12] 2580 	inc	r0
      000BAF 36               [12] 2581 	addc	a,@r0
      000BB0 FE               [12] 2582 	mov	r6,a
      000BB1 08               [12] 2583 	inc	r0
      000BB2 86 07            [24] 2584 	mov	ar7,@r0
      000BB4 E5*00            [12] 2585 	mov	a,_bp
      000BB6 24 0B            [12] 2586 	add	a,#0x0b
      000BB8 F8               [12] 2587 	mov	r0,a
      000BB9 E6               [12] 2588 	mov	a,@r0
      000BBA C0 E0            [24] 2589 	push	acc
      000BBC 08               [12] 2590 	inc	r0
      000BBD E6               [12] 2591 	mov	a,@r0
      000BBE C0 E0            [24] 2592 	push	acc
      000BC0 08               [12] 2593 	inc	r0
      000BC1 E6               [12] 2594 	mov	a,@r0
      000BC2 C0 E0            [24] 2595 	push	acc
      000BC4 08               [12] 2596 	inc	r0
      000BC5 E6               [12] 2597 	mov	a,@r0
      000BC6 C0 E0            [24] 2598 	push	acc
      000BC8 8D 82            [24] 2599 	mov	dpl,r5
      000BCA 8E 83            [24] 2600 	mov	dph,r6
      000BCC 8F F0            [24] 2601 	mov	b,r7
      000BCE 12r00r00         [24] 2602 	lcall	_stack_push
      000BD1 E5 81            [12] 2603 	mov	a,sp
      000BD3 24 FC            [12] 2604 	add	a,#0xfc
      000BD5 F5 81            [12] 2605 	mov	sp,a
                                   2606 ;	calc.c:176: break;
      000BD7 02r18r06         [24] 2607 	ljmp	00188$
                                   2608 ;	calc.c:177: case '+':
      000BDA                       2609 00121$:
                                   2610 ;	calc.c:178: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      000BDA E5*00            [12] 2611 	mov	a,_bp
      000BDC 24 07            [12] 2612 	add	a,#0x07
      000BDE FF               [12] 2613 	mov	r7,a
      000BDF 7E 00            [12] 2614 	mov	r6,#0x00
      000BE1 7D 40            [12] 2615 	mov	r5,#0x40
      000BE3 E5*00            [12] 2616 	mov	a,_bp
      000BE5 24 04            [12] 2617 	add	a,#0x04
      000BE7 F8               [12] 2618 	mov	r0,a
      000BE8 74 09            [12] 2619 	mov	a,#0x09
      000BEA 26               [12] 2620 	add	a,@r0
      000BEB FA               [12] 2621 	mov	r2,a
      000BEC E4               [12] 2622 	clr	a
      000BED 08               [12] 2623 	inc	r0
      000BEE 36               [12] 2624 	addc	a,@r0
      000BEF FB               [12] 2625 	mov	r3,a
      000BF0 08               [12] 2626 	inc	r0
      000BF1 86 04            [24] 2627 	mov	ar4,@r0
      000BF3 C0 07            [24] 2628 	push	ar7
      000BF5 C0 06            [24] 2629 	push	ar6
      000BF7 C0 05            [24] 2630 	push	ar5
      000BF9 8A 82            [24] 2631 	mov	dpl,r2
      000BFB 8B 83            [24] 2632 	mov	dph,r3
      000BFD 8C F0            [24] 2633 	mov	b,r4
      000BFF 12r00r00         [24] 2634 	lcall	_stack_pop
      000C02 AE 82            [24] 2635 	mov	r6,dpl
      000C04 AF 83            [24] 2636 	mov	r7,dph
      000C06 15 81            [12] 2637 	dec	sp
      000C08 15 81            [12] 2638 	dec	sp
      000C0A 15 81            [12] 2639 	dec	sp
      000C0C EE               [12] 2640 	mov	a,r6
      000C0D 4F               [12] 2641 	orl	a,r7
      000C0E 70 25            [24] 2642 	jnz	00126$
      000C10 7Dr37            [12] 2643 	mov	r5,#___str_7
      000C12 7Es00            [12] 2644 	mov	r6,#(___str_7 >> 8)
      000C14 7F 80            [12] 2645 	mov	r7,#0x80
                                   2646 ;	calc.c:50: return;
      000C16                       2647 00301$:
                                   2648 ;	calc.c:48: for (; *s; s++) putchar(*s);
      000C16 8D 82            [24] 2649 	mov	dpl,r5
      000C18 8E 83            [24] 2650 	mov	dph,r6
      000C1A 8F F0            [24] 2651 	mov	b,r7
      000C1C 12r00r00         [24] 2652 	lcall	__gptrget
      000C1F FC               [12] 2653 	mov	r4,a
      000C20 70 03            [24] 2654 	jnz	00882$
      000C22 02r18r06         [24] 2655 	ljmp	00188$
      000C25                       2656 00882$:
      000C25 7B 00            [12] 2657 	mov	r3,#0x00
      000C27 8C 82            [24] 2658 	mov	dpl,r4
      000C29 8B 83            [24] 2659 	mov	dph,r3
      000C2B 12r00r00         [24] 2660 	lcall	_putchar
      000C2E 0D               [12] 2661 	inc	r5
                                   2662 ;	calc.c:178: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      000C2F BD 00 E4         [24] 2663 	cjne	r5,#0x00,00301$
      000C32 0E               [12] 2664 	inc	r6
      000C33 80 E1            [24] 2665 	sjmp	00301$
      000C35                       2666 00126$:
                                   2667 ;	calc.c:179: else if (!stack_pop(&ctx->s, &d1)) {
      000C35 E5*00            [12] 2668 	mov	a,_bp
      000C37 24 0B            [12] 2669 	add	a,#0x0b
      000C39 FF               [12] 2670 	mov	r7,a
      000C3A 7E 00            [12] 2671 	mov	r6,#0x00
      000C3C 7D 40            [12] 2672 	mov	r5,#0x40
      000C3E E5*00            [12] 2673 	mov	a,_bp
      000C40 24 04            [12] 2674 	add	a,#0x04
      000C42 F8               [12] 2675 	mov	r0,a
      000C43 74 09            [12] 2676 	mov	a,#0x09
      000C45 26               [12] 2677 	add	a,@r0
      000C46 FA               [12] 2678 	mov	r2,a
      000C47 E4               [12] 2679 	clr	a
      000C48 08               [12] 2680 	inc	r0
      000C49 36               [12] 2681 	addc	a,@r0
      000C4A FB               [12] 2682 	mov	r3,a
      000C4B 08               [12] 2683 	inc	r0
      000C4C 86 04            [24] 2684 	mov	ar4,@r0
      000C4E C0 07            [24] 2685 	push	ar7
      000C50 C0 06            [24] 2686 	push	ar6
      000C52 C0 05            [24] 2687 	push	ar5
      000C54 8A 82            [24] 2688 	mov	dpl,r2
      000C56 8B 83            [24] 2689 	mov	dph,r3
      000C58 8C F0            [24] 2690 	mov	b,r4
      000C5A 12r00r00         [24] 2691 	lcall	_stack_pop
      000C5D AE 82            [24] 2692 	mov	r6,dpl
      000C5F AF 83            [24] 2693 	mov	r7,dph
      000C61 15 81            [12] 2694 	dec	sp
      000C63 15 81            [12] 2695 	dec	sp
      000C65 15 81            [12] 2696 	dec	sp
      000C67 EE               [12] 2697 	mov	a,r6
      000C68 4F               [12] 2698 	orl	a,r7
      000C69 70 58            [24] 2699 	jnz	00123$
                                   2700 ;	calc.c:180: (void)stack_push(&ctx->s, d0);
      000C6B E5*00            [12] 2701 	mov	a,_bp
      000C6D 24 04            [12] 2702 	add	a,#0x04
      000C6F F8               [12] 2703 	mov	r0,a
      000C70 74 09            [12] 2704 	mov	a,#0x09
      000C72 26               [12] 2705 	add	a,@r0
      000C73 FD               [12] 2706 	mov	r5,a
      000C74 E4               [12] 2707 	clr	a
      000C75 08               [12] 2708 	inc	r0
      000C76 36               [12] 2709 	addc	a,@r0
      000C77 FE               [12] 2710 	mov	r6,a
      000C78 08               [12] 2711 	inc	r0
      000C79 86 07            [24] 2712 	mov	ar7,@r0
      000C7B E5*00            [12] 2713 	mov	a,_bp
      000C7D 24 07            [12] 2714 	add	a,#0x07
      000C7F F8               [12] 2715 	mov	r0,a
      000C80 E6               [12] 2716 	mov	a,@r0
      000C81 C0 E0            [24] 2717 	push	acc
      000C83 08               [12] 2718 	inc	r0
      000C84 E6               [12] 2719 	mov	a,@r0
      000C85 C0 E0            [24] 2720 	push	acc
      000C87 08               [12] 2721 	inc	r0
      000C88 E6               [12] 2722 	mov	a,@r0
      000C89 C0 E0            [24] 2723 	push	acc
      000C8B 08               [12] 2724 	inc	r0
      000C8C E6               [12] 2725 	mov	a,@r0
      000C8D C0 E0            [24] 2726 	push	acc
      000C8F 8D 82            [24] 2727 	mov	dpl,r5
      000C91 8E 83            [24] 2728 	mov	dph,r6
      000C93 8F F0            [24] 2729 	mov	b,r7
      000C95 12r00r00         [24] 2730 	lcall	_stack_push
      000C98 E5 81            [12] 2731 	mov	a,sp
      000C9A 24 FC            [12] 2732 	add	a,#0xfc
      000C9C F5 81            [12] 2733 	mov	sp,a
                                   2734 ;	calc.c:181: printstr("\r\nstack underflow\r\n");
      000C9E 7Dr37            [12] 2735 	mov	r5,#___str_7
      000CA0 7Es00            [12] 2736 	mov	r6,#(___str_7 >> 8)
      000CA2 7F 80            [12] 2737 	mov	r7,#0x80
                                   2738 ;	calc.c:50: return;
      000CA4                       2739 00304$:
                                   2740 ;	calc.c:48: for (; *s; s++) putchar(*s);
      000CA4 8D 82            [24] 2741 	mov	dpl,r5
      000CA6 8E 83            [24] 2742 	mov	dph,r6
      000CA8 8F F0            [24] 2743 	mov	b,r7
      000CAA 12r00r00         [24] 2744 	lcall	__gptrget
      000CAD FC               [12] 2745 	mov	r4,a
      000CAE 70 03            [24] 2746 	jnz	00885$
      000CB0 02r18r06         [24] 2747 	ljmp	00188$
      000CB3                       2748 00885$:
      000CB3 7B 00            [12] 2749 	mov	r3,#0x00
      000CB5 8C 82            [24] 2750 	mov	dpl,r4
      000CB7 8B 83            [24] 2751 	mov	dph,r3
      000CB9 12r00r00         [24] 2752 	lcall	_putchar
      000CBC 0D               [12] 2753 	inc	r5
                                   2754 ;	calc.c:181: printstr("\r\nstack underflow\r\n");
      000CBD BD 00 E4         [24] 2755 	cjne	r5,#0x00,00304$
      000CC0 0E               [12] 2756 	inc	r6
      000CC1 80 E1            [24] 2757 	sjmp	00304$
      000CC3                       2758 00123$:
                                   2759 ;	calc.c:183: d1 += d0;
      000CC3 E5*00            [12] 2760 	mov	a,_bp
      000CC5 24 0B            [12] 2761 	add	a,#0x0b
      000CC7 F8               [12] 2762 	mov	r0,a
      000CC8 E5*00            [12] 2763 	mov	a,_bp
      000CCA 24 07            [12] 2764 	add	a,#0x07
      000CCC F9               [12] 2765 	mov	r1,a
      000CCD E7               [12] 2766 	mov	a,@r1
      000CCE 26               [12] 2767 	add	a,@r0
      000CCF F6               [12] 2768 	mov	@r0,a
      000CD0 09               [12] 2769 	inc	r1
      000CD1 E7               [12] 2770 	mov	a,@r1
      000CD2 08               [12] 2771 	inc	r0
      000CD3 36               [12] 2772 	addc	a,@r0
      000CD4 F6               [12] 2773 	mov	@r0,a
      000CD5 09               [12] 2774 	inc	r1
      000CD6 E7               [12] 2775 	mov	a,@r1
      000CD7 08               [12] 2776 	inc	r0
      000CD8 36               [12] 2777 	addc	a,@r0
      000CD9 F6               [12] 2778 	mov	@r0,a
      000CDA 09               [12] 2779 	inc	r1
      000CDB E7               [12] 2780 	mov	a,@r1
      000CDC 08               [12] 2781 	inc	r0
      000CDD 36               [12] 2782 	addc	a,@r0
      000CDE F6               [12] 2783 	mov	@r0,a
                                   2784 ;	calc.c:184: (void)stack_push(&ctx->s, d1);
      000CDF E5*00            [12] 2785 	mov	a,_bp
      000CE1 24 04            [12] 2786 	add	a,#0x04
      000CE3 F8               [12] 2787 	mov	r0,a
      000CE4 74 09            [12] 2788 	mov	a,#0x09
      000CE6 26               [12] 2789 	add	a,@r0
      000CE7 FD               [12] 2790 	mov	r5,a
      000CE8 E4               [12] 2791 	clr	a
      000CE9 08               [12] 2792 	inc	r0
      000CEA 36               [12] 2793 	addc	a,@r0
      000CEB FE               [12] 2794 	mov	r6,a
      000CEC 08               [12] 2795 	inc	r0
      000CED 86 07            [24] 2796 	mov	ar7,@r0
      000CEF E5*00            [12] 2797 	mov	a,_bp
      000CF1 24 0B            [12] 2798 	add	a,#0x0b
      000CF3 F8               [12] 2799 	mov	r0,a
      000CF4 E6               [12] 2800 	mov	a,@r0
      000CF5 C0 E0            [24] 2801 	push	acc
      000CF7 08               [12] 2802 	inc	r0
      000CF8 E6               [12] 2803 	mov	a,@r0
      000CF9 C0 E0            [24] 2804 	push	acc
      000CFB 08               [12] 2805 	inc	r0
      000CFC E6               [12] 2806 	mov	a,@r0
      000CFD C0 E0            [24] 2807 	push	acc
      000CFF 08               [12] 2808 	inc	r0
      000D00 E6               [12] 2809 	mov	a,@r0
      000D01 C0 E0            [24] 2810 	push	acc
      000D03 8D 82            [24] 2811 	mov	dpl,r5
      000D05 8E 83            [24] 2812 	mov	dph,r6
      000D07 8F F0            [24] 2813 	mov	b,r7
      000D09 12r00r00         [24] 2814 	lcall	_stack_push
      000D0C E5 81            [12] 2815 	mov	a,sp
      000D0E 24 FC            [12] 2816 	add	a,#0xfc
      000D10 F5 81            [12] 2817 	mov	sp,a
                                   2818 ;	calc.c:186: break;
      000D12 02r18r06         [24] 2819 	ljmp	00188$
                                   2820 ;	calc.c:187: case '-':
      000D15                       2821 00128$:
                                   2822 ;	calc.c:188: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      000D15 E5*00            [12] 2823 	mov	a,_bp
      000D17 24 07            [12] 2824 	add	a,#0x07
      000D19 FF               [12] 2825 	mov	r7,a
      000D1A 7E 00            [12] 2826 	mov	r6,#0x00
      000D1C 7D 40            [12] 2827 	mov	r5,#0x40
      000D1E E5*00            [12] 2828 	mov	a,_bp
      000D20 24 04            [12] 2829 	add	a,#0x04
      000D22 F8               [12] 2830 	mov	r0,a
      000D23 74 09            [12] 2831 	mov	a,#0x09
      000D25 26               [12] 2832 	add	a,@r0
      000D26 FA               [12] 2833 	mov	r2,a
      000D27 E4               [12] 2834 	clr	a
      000D28 08               [12] 2835 	inc	r0
      000D29 36               [12] 2836 	addc	a,@r0
      000D2A FB               [12] 2837 	mov	r3,a
      000D2B 08               [12] 2838 	inc	r0
      000D2C 86 04            [24] 2839 	mov	ar4,@r0
      000D2E C0 07            [24] 2840 	push	ar7
      000D30 C0 06            [24] 2841 	push	ar6
      000D32 C0 05            [24] 2842 	push	ar5
      000D34 8A 82            [24] 2843 	mov	dpl,r2
      000D36 8B 83            [24] 2844 	mov	dph,r3
      000D38 8C F0            [24] 2845 	mov	b,r4
      000D3A 12r00r00         [24] 2846 	lcall	_stack_pop
      000D3D AE 82            [24] 2847 	mov	r6,dpl
      000D3F AF 83            [24] 2848 	mov	r7,dph
      000D41 15 81            [12] 2849 	dec	sp
      000D43 15 81            [12] 2850 	dec	sp
      000D45 15 81            [12] 2851 	dec	sp
      000D47 EE               [12] 2852 	mov	a,r6
      000D48 4F               [12] 2853 	orl	a,r7
      000D49 70 25            [24] 2854 	jnz	00133$
      000D4B 7Dr37            [12] 2855 	mov	r5,#___str_7
      000D4D 7Es00            [12] 2856 	mov	r6,#(___str_7 >> 8)
      000D4F 7F 80            [12] 2857 	mov	r7,#0x80
                                   2858 ;	calc.c:50: return;
      000D51                       2859 00307$:
                                   2860 ;	calc.c:48: for (; *s; s++) putchar(*s);
      000D51 8D 82            [24] 2861 	mov	dpl,r5
      000D53 8E 83            [24] 2862 	mov	dph,r6
      000D55 8F F0            [24] 2863 	mov	b,r7
      000D57 12r00r00         [24] 2864 	lcall	__gptrget
      000D5A FC               [12] 2865 	mov	r4,a
      000D5B 70 03            [24] 2866 	jnz	00888$
      000D5D 02r18r06         [24] 2867 	ljmp	00188$
      000D60                       2868 00888$:
      000D60 7B 00            [12] 2869 	mov	r3,#0x00
      000D62 8C 82            [24] 2870 	mov	dpl,r4
      000D64 8B 83            [24] 2871 	mov	dph,r3
      000D66 12r00r00         [24] 2872 	lcall	_putchar
      000D69 0D               [12] 2873 	inc	r5
                                   2874 ;	calc.c:188: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      000D6A BD 00 E4         [24] 2875 	cjne	r5,#0x00,00307$
      000D6D 0E               [12] 2876 	inc	r6
      000D6E 80 E1            [24] 2877 	sjmp	00307$
      000D70                       2878 00133$:
                                   2879 ;	calc.c:189: else if (!stack_pop(&ctx->s, &d1)) {
      000D70 E5*00            [12] 2880 	mov	a,_bp
      000D72 24 0B            [12] 2881 	add	a,#0x0b
      000D74 FF               [12] 2882 	mov	r7,a
      000D75 7E 00            [12] 2883 	mov	r6,#0x00
      000D77 7D 40            [12] 2884 	mov	r5,#0x40
      000D79 E5*00            [12] 2885 	mov	a,_bp
      000D7B 24 04            [12] 2886 	add	a,#0x04
      000D7D F8               [12] 2887 	mov	r0,a
      000D7E 74 09            [12] 2888 	mov	a,#0x09
      000D80 26               [12] 2889 	add	a,@r0
      000D81 FA               [12] 2890 	mov	r2,a
      000D82 E4               [12] 2891 	clr	a
      000D83 08               [12] 2892 	inc	r0
      000D84 36               [12] 2893 	addc	a,@r0
      000D85 FB               [12] 2894 	mov	r3,a
      000D86 08               [12] 2895 	inc	r0
      000D87 86 04            [24] 2896 	mov	ar4,@r0
      000D89 C0 07            [24] 2897 	push	ar7
      000D8B C0 06            [24] 2898 	push	ar6
      000D8D C0 05            [24] 2899 	push	ar5
      000D8F 8A 82            [24] 2900 	mov	dpl,r2
      000D91 8B 83            [24] 2901 	mov	dph,r3
      000D93 8C F0            [24] 2902 	mov	b,r4
      000D95 12r00r00         [24] 2903 	lcall	_stack_pop
      000D98 AE 82            [24] 2904 	mov	r6,dpl
      000D9A AF 83            [24] 2905 	mov	r7,dph
      000D9C 15 81            [12] 2906 	dec	sp
      000D9E 15 81            [12] 2907 	dec	sp
      000DA0 15 81            [12] 2908 	dec	sp
      000DA2 EE               [12] 2909 	mov	a,r6
      000DA3 4F               [12] 2910 	orl	a,r7
      000DA4 70 58            [24] 2911 	jnz	00130$
                                   2912 ;	calc.c:190: (void)stack_push(&ctx->s, d0);
      000DA6 E5*00            [12] 2913 	mov	a,_bp
      000DA8 24 04            [12] 2914 	add	a,#0x04
      000DAA F8               [12] 2915 	mov	r0,a
      000DAB 74 09            [12] 2916 	mov	a,#0x09
      000DAD 26               [12] 2917 	add	a,@r0
      000DAE FD               [12] 2918 	mov	r5,a
      000DAF E4               [12] 2919 	clr	a
      000DB0 08               [12] 2920 	inc	r0
      000DB1 36               [12] 2921 	addc	a,@r0
      000DB2 FE               [12] 2922 	mov	r6,a
      000DB3 08               [12] 2923 	inc	r0
      000DB4 86 07            [24] 2924 	mov	ar7,@r0
      000DB6 E5*00            [12] 2925 	mov	a,_bp
      000DB8 24 07            [12] 2926 	add	a,#0x07
      000DBA F8               [12] 2927 	mov	r0,a
      000DBB E6               [12] 2928 	mov	a,@r0
      000DBC C0 E0            [24] 2929 	push	acc
      000DBE 08               [12] 2930 	inc	r0
      000DBF E6               [12] 2931 	mov	a,@r0
      000DC0 C0 E0            [24] 2932 	push	acc
      000DC2 08               [12] 2933 	inc	r0
      000DC3 E6               [12] 2934 	mov	a,@r0
      000DC4 C0 E0            [24] 2935 	push	acc
      000DC6 08               [12] 2936 	inc	r0
      000DC7 E6               [12] 2937 	mov	a,@r0
      000DC8 C0 E0            [24] 2938 	push	acc
      000DCA 8D 82            [24] 2939 	mov	dpl,r5
      000DCC 8E 83            [24] 2940 	mov	dph,r6
      000DCE 8F F0            [24] 2941 	mov	b,r7
      000DD0 12r00r00         [24] 2942 	lcall	_stack_push
      000DD3 E5 81            [12] 2943 	mov	a,sp
      000DD5 24 FC            [12] 2944 	add	a,#0xfc
      000DD7 F5 81            [12] 2945 	mov	sp,a
                                   2946 ;	calc.c:191: printstr("\r\nstack underflow\r\n");
      000DD9 7Dr37            [12] 2947 	mov	r5,#___str_7
      000DDB 7Es00            [12] 2948 	mov	r6,#(___str_7 >> 8)
      000DDD 7F 80            [12] 2949 	mov	r7,#0x80
                                   2950 ;	calc.c:50: return;
      000DDF                       2951 00310$:
                                   2952 ;	calc.c:48: for (; *s; s++) putchar(*s);
      000DDF 8D 82            [24] 2953 	mov	dpl,r5
      000DE1 8E 83            [24] 2954 	mov	dph,r6
      000DE3 8F F0            [24] 2955 	mov	b,r7
      000DE5 12r00r00         [24] 2956 	lcall	__gptrget
      000DE8 FC               [12] 2957 	mov	r4,a
      000DE9 70 03            [24] 2958 	jnz	00891$
      000DEB 02r18r06         [24] 2959 	ljmp	00188$
      000DEE                       2960 00891$:
      000DEE 7B 00            [12] 2961 	mov	r3,#0x00
      000DF0 8C 82            [24] 2962 	mov	dpl,r4
      000DF2 8B 83            [24] 2963 	mov	dph,r3
      000DF4 12r00r00         [24] 2964 	lcall	_putchar
      000DF7 0D               [12] 2965 	inc	r5
                                   2966 ;	calc.c:191: printstr("\r\nstack underflow\r\n");
      000DF8 BD 00 E4         [24] 2967 	cjne	r5,#0x00,00310$
      000DFB 0E               [12] 2968 	inc	r6
      000DFC 80 E1            [24] 2969 	sjmp	00310$
      000DFE                       2970 00130$:
                                   2971 ;	calc.c:193: d1 -= d0;
      000DFE E5*00            [12] 2972 	mov	a,_bp
      000E00 24 0B            [12] 2973 	add	a,#0x0b
      000E02 F8               [12] 2974 	mov	r0,a
      000E03 E5*00            [12] 2975 	mov	a,_bp
      000E05 24 07            [12] 2976 	add	a,#0x07
      000E07 F9               [12] 2977 	mov	r1,a
      000E08 E6               [12] 2978 	mov	a,@r0
      000E09 C3               [12] 2979 	clr	c
      000E0A 97               [12] 2980 	subb	a,@r1
      000E0B F6               [12] 2981 	mov	@r0,a
      000E0C 08               [12] 2982 	inc	r0
      000E0D E6               [12] 2983 	mov	a,@r0
      000E0E 09               [12] 2984 	inc	r1
      000E0F 97               [12] 2985 	subb	a,@r1
      000E10 F6               [12] 2986 	mov	@r0,a
      000E11 08               [12] 2987 	inc	r0
      000E12 E6               [12] 2988 	mov	a,@r0
      000E13 09               [12] 2989 	inc	r1
      000E14 97               [12] 2990 	subb	a,@r1
      000E15 F6               [12] 2991 	mov	@r0,a
      000E16 08               [12] 2992 	inc	r0
      000E17 E6               [12] 2993 	mov	a,@r0
      000E18 09               [12] 2994 	inc	r1
      000E19 97               [12] 2995 	subb	a,@r1
      000E1A F6               [12] 2996 	mov	@r0,a
                                   2997 ;	calc.c:194: (void)stack_push(&ctx->s, d1);
      000E1B E5*00            [12] 2998 	mov	a,_bp
      000E1D 24 04            [12] 2999 	add	a,#0x04
      000E1F F8               [12] 3000 	mov	r0,a
      000E20 74 09            [12] 3001 	mov	a,#0x09
      000E22 26               [12] 3002 	add	a,@r0
      000E23 FD               [12] 3003 	mov	r5,a
      000E24 E4               [12] 3004 	clr	a
      000E25 08               [12] 3005 	inc	r0
      000E26 36               [12] 3006 	addc	a,@r0
      000E27 FE               [12] 3007 	mov	r6,a
      000E28 08               [12] 3008 	inc	r0
      000E29 86 07            [24] 3009 	mov	ar7,@r0
      000E2B E5*00            [12] 3010 	mov	a,_bp
      000E2D 24 0B            [12] 3011 	add	a,#0x0b
      000E2F F8               [12] 3012 	mov	r0,a
      000E30 E6               [12] 3013 	mov	a,@r0
      000E31 C0 E0            [24] 3014 	push	acc
      000E33 08               [12] 3015 	inc	r0
      000E34 E6               [12] 3016 	mov	a,@r0
      000E35 C0 E0            [24] 3017 	push	acc
      000E37 08               [12] 3018 	inc	r0
      000E38 E6               [12] 3019 	mov	a,@r0
      000E39 C0 E0            [24] 3020 	push	acc
      000E3B 08               [12] 3021 	inc	r0
      000E3C E6               [12] 3022 	mov	a,@r0
      000E3D C0 E0            [24] 3023 	push	acc
      000E3F 8D 82            [24] 3024 	mov	dpl,r5
      000E41 8E 83            [24] 3025 	mov	dph,r6
      000E43 8F F0            [24] 3026 	mov	b,r7
      000E45 12r00r00         [24] 3027 	lcall	_stack_push
      000E48 E5 81            [12] 3028 	mov	a,sp
      000E4A 24 FC            [12] 3029 	add	a,#0xfc
      000E4C F5 81            [12] 3030 	mov	sp,a
                                   3031 ;	calc.c:196: break;
      000E4E 02r18r06         [24] 3032 	ljmp	00188$
                                   3033 ;	calc.c:197: case '*':
      000E51                       3034 00135$:
                                   3035 ;	calc.c:198: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      000E51 E5*00            [12] 3036 	mov	a,_bp
      000E53 24 07            [12] 3037 	add	a,#0x07
      000E55 FF               [12] 3038 	mov	r7,a
      000E56 7E 00            [12] 3039 	mov	r6,#0x00
      000E58 7D 40            [12] 3040 	mov	r5,#0x40
      000E5A E5*00            [12] 3041 	mov	a,_bp
      000E5C 24 04            [12] 3042 	add	a,#0x04
      000E5E F8               [12] 3043 	mov	r0,a
      000E5F 74 09            [12] 3044 	mov	a,#0x09
      000E61 26               [12] 3045 	add	a,@r0
      000E62 FA               [12] 3046 	mov	r2,a
      000E63 E4               [12] 3047 	clr	a
      000E64 08               [12] 3048 	inc	r0
      000E65 36               [12] 3049 	addc	a,@r0
      000E66 FB               [12] 3050 	mov	r3,a
      000E67 08               [12] 3051 	inc	r0
      000E68 86 04            [24] 3052 	mov	ar4,@r0
      000E6A C0 07            [24] 3053 	push	ar7
      000E6C C0 06            [24] 3054 	push	ar6
      000E6E C0 05            [24] 3055 	push	ar5
      000E70 8A 82            [24] 3056 	mov	dpl,r2
      000E72 8B 83            [24] 3057 	mov	dph,r3
      000E74 8C F0            [24] 3058 	mov	b,r4
      000E76 12r00r00         [24] 3059 	lcall	_stack_pop
      000E79 AE 82            [24] 3060 	mov	r6,dpl
      000E7B AF 83            [24] 3061 	mov	r7,dph
      000E7D 15 81            [12] 3062 	dec	sp
      000E7F 15 81            [12] 3063 	dec	sp
      000E81 15 81            [12] 3064 	dec	sp
      000E83 EE               [12] 3065 	mov	a,r6
      000E84 4F               [12] 3066 	orl	a,r7
      000E85 70 25            [24] 3067 	jnz	00140$
      000E87 7Dr37            [12] 3068 	mov	r5,#___str_7
      000E89 7Es00            [12] 3069 	mov	r6,#(___str_7 >> 8)
      000E8B 7F 80            [12] 3070 	mov	r7,#0x80
                                   3071 ;	calc.c:50: return;
      000E8D                       3072 00313$:
                                   3073 ;	calc.c:48: for (; *s; s++) putchar(*s);
      000E8D 8D 82            [24] 3074 	mov	dpl,r5
      000E8F 8E 83            [24] 3075 	mov	dph,r6
      000E91 8F F0            [24] 3076 	mov	b,r7
      000E93 12r00r00         [24] 3077 	lcall	__gptrget
      000E96 FC               [12] 3078 	mov	r4,a
      000E97 70 03            [24] 3079 	jnz	00894$
      000E99 02r18r06         [24] 3080 	ljmp	00188$
      000E9C                       3081 00894$:
      000E9C 7B 00            [12] 3082 	mov	r3,#0x00
      000E9E 8C 82            [24] 3083 	mov	dpl,r4
      000EA0 8B 83            [24] 3084 	mov	dph,r3
      000EA2 12r00r00         [24] 3085 	lcall	_putchar
      000EA5 0D               [12] 3086 	inc	r5
                                   3087 ;	calc.c:198: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      000EA6 BD 00 E4         [24] 3088 	cjne	r5,#0x00,00313$
      000EA9 0E               [12] 3089 	inc	r6
      000EAA 80 E1            [24] 3090 	sjmp	00313$
      000EAC                       3091 00140$:
                                   3092 ;	calc.c:199: else if (!stack_pop(&ctx->s, &d1)) {
      000EAC E5*00            [12] 3093 	mov	a,_bp
      000EAE 24 0B            [12] 3094 	add	a,#0x0b
      000EB0 FF               [12] 3095 	mov	r7,a
      000EB1 7E 00            [12] 3096 	mov	r6,#0x00
      000EB3 7D 40            [12] 3097 	mov	r5,#0x40
      000EB5 E5*00            [12] 3098 	mov	a,_bp
      000EB7 24 04            [12] 3099 	add	a,#0x04
      000EB9 F8               [12] 3100 	mov	r0,a
      000EBA 74 09            [12] 3101 	mov	a,#0x09
      000EBC 26               [12] 3102 	add	a,@r0
      000EBD FA               [12] 3103 	mov	r2,a
      000EBE E4               [12] 3104 	clr	a
      000EBF 08               [12] 3105 	inc	r0
      000EC0 36               [12] 3106 	addc	a,@r0
      000EC1 FB               [12] 3107 	mov	r3,a
      000EC2 08               [12] 3108 	inc	r0
      000EC3 86 04            [24] 3109 	mov	ar4,@r0
      000EC5 C0 07            [24] 3110 	push	ar7
      000EC7 C0 06            [24] 3111 	push	ar6
      000EC9 C0 05            [24] 3112 	push	ar5
      000ECB 8A 82            [24] 3113 	mov	dpl,r2
      000ECD 8B 83            [24] 3114 	mov	dph,r3
      000ECF 8C F0            [24] 3115 	mov	b,r4
      000ED1 12r00r00         [24] 3116 	lcall	_stack_pop
      000ED4 AE 82            [24] 3117 	mov	r6,dpl
      000ED6 AF 83            [24] 3118 	mov	r7,dph
      000ED8 15 81            [12] 3119 	dec	sp
      000EDA 15 81            [12] 3120 	dec	sp
      000EDC 15 81            [12] 3121 	dec	sp
      000EDE EE               [12] 3122 	mov	a,r6
      000EDF 4F               [12] 3123 	orl	a,r7
      000EE0 70 58            [24] 3124 	jnz	00137$
                                   3125 ;	calc.c:200: (void)stack_push(&ctx->s, d0);
      000EE2 E5*00            [12] 3126 	mov	a,_bp
      000EE4 24 04            [12] 3127 	add	a,#0x04
      000EE6 F8               [12] 3128 	mov	r0,a
      000EE7 74 09            [12] 3129 	mov	a,#0x09
      000EE9 26               [12] 3130 	add	a,@r0
      000EEA FD               [12] 3131 	mov	r5,a
      000EEB E4               [12] 3132 	clr	a
      000EEC 08               [12] 3133 	inc	r0
      000EED 36               [12] 3134 	addc	a,@r0
      000EEE FE               [12] 3135 	mov	r6,a
      000EEF 08               [12] 3136 	inc	r0
      000EF0 86 07            [24] 3137 	mov	ar7,@r0
      000EF2 E5*00            [12] 3138 	mov	a,_bp
      000EF4 24 07            [12] 3139 	add	a,#0x07
      000EF6 F8               [12] 3140 	mov	r0,a
      000EF7 E6               [12] 3141 	mov	a,@r0
      000EF8 C0 E0            [24] 3142 	push	acc
      000EFA 08               [12] 3143 	inc	r0
      000EFB E6               [12] 3144 	mov	a,@r0
      000EFC C0 E0            [24] 3145 	push	acc
      000EFE 08               [12] 3146 	inc	r0
      000EFF E6               [12] 3147 	mov	a,@r0
      000F00 C0 E0            [24] 3148 	push	acc
      000F02 08               [12] 3149 	inc	r0
      000F03 E6               [12] 3150 	mov	a,@r0
      000F04 C0 E0            [24] 3151 	push	acc
      000F06 8D 82            [24] 3152 	mov	dpl,r5
      000F08 8E 83            [24] 3153 	mov	dph,r6
      000F0A 8F F0            [24] 3154 	mov	b,r7
      000F0C 12r00r00         [24] 3155 	lcall	_stack_push
      000F0F E5 81            [12] 3156 	mov	a,sp
      000F11 24 FC            [12] 3157 	add	a,#0xfc
      000F13 F5 81            [12] 3158 	mov	sp,a
                                   3159 ;	calc.c:201: printstr("\r\nstack underflow\r\n");
      000F15 7Dr37            [12] 3160 	mov	r5,#___str_7
      000F17 7Es00            [12] 3161 	mov	r6,#(___str_7 >> 8)
      000F19 7F 80            [12] 3162 	mov	r7,#0x80
                                   3163 ;	calc.c:50: return;
      000F1B                       3164 00316$:
                                   3165 ;	calc.c:48: for (; *s; s++) putchar(*s);
      000F1B 8D 82            [24] 3166 	mov	dpl,r5
      000F1D 8E 83            [24] 3167 	mov	dph,r6
      000F1F 8F F0            [24] 3168 	mov	b,r7
      000F21 12r00r00         [24] 3169 	lcall	__gptrget
      000F24 FC               [12] 3170 	mov	r4,a
      000F25 70 03            [24] 3171 	jnz	00897$
      000F27 02r18r06         [24] 3172 	ljmp	00188$
      000F2A                       3173 00897$:
      000F2A 7B 00            [12] 3174 	mov	r3,#0x00
      000F2C 8C 82            [24] 3175 	mov	dpl,r4
      000F2E 8B 83            [24] 3176 	mov	dph,r3
      000F30 12r00r00         [24] 3177 	lcall	_putchar
      000F33 0D               [12] 3178 	inc	r5
                                   3179 ;	calc.c:201: printstr("\r\nstack underflow\r\n");
      000F34 BD 00 E4         [24] 3180 	cjne	r5,#0x00,00316$
      000F37 0E               [12] 3181 	inc	r6
      000F38 80 E1            [24] 3182 	sjmp	00316$
      000F3A                       3183 00137$:
                                   3184 ;	calc.c:203: d1 *= d0;
      000F3A E5*00            [12] 3185 	mov	a,_bp
      000F3C 24 07            [12] 3186 	add	a,#0x07
      000F3E F8               [12] 3187 	mov	r0,a
      000F3F E6               [12] 3188 	mov	a,@r0
      000F40 C0 E0            [24] 3189 	push	acc
      000F42 08               [12] 3190 	inc	r0
      000F43 E6               [12] 3191 	mov	a,@r0
      000F44 C0 E0            [24] 3192 	push	acc
      000F46 08               [12] 3193 	inc	r0
      000F47 E6               [12] 3194 	mov	a,@r0
      000F48 C0 E0            [24] 3195 	push	acc
      000F4A 08               [12] 3196 	inc	r0
      000F4B E6               [12] 3197 	mov	a,@r0
      000F4C C0 E0            [24] 3198 	push	acc
      000F4E E5*00            [12] 3199 	mov	a,_bp
      000F50 24 0B            [12] 3200 	add	a,#0x0b
      000F52 F8               [12] 3201 	mov	r0,a
      000F53 86 82            [24] 3202 	mov	dpl,@r0
      000F55 08               [12] 3203 	inc	r0
      000F56 86 83            [24] 3204 	mov	dph,@r0
      000F58 08               [12] 3205 	inc	r0
      000F59 86 F0            [24] 3206 	mov	b,@r0
      000F5B 08               [12] 3207 	inc	r0
      000F5C E6               [12] 3208 	mov	a,@r0
      000F5D 12r00r00         [24] 3209 	lcall	__mullong
      000F60 AC 82            [24] 3210 	mov	r4,dpl
      000F62 AD 83            [24] 3211 	mov	r5,dph
      000F64 AE F0            [24] 3212 	mov	r6,b
      000F66 FF               [12] 3213 	mov	r7,a
      000F67 E5 81            [12] 3214 	mov	a,sp
      000F69 24 FC            [12] 3215 	add	a,#0xfc
      000F6B F5 81            [12] 3216 	mov	sp,a
      000F6D E5*00            [12] 3217 	mov	a,_bp
      000F6F 24 0B            [12] 3218 	add	a,#0x0b
      000F71 F8               [12] 3219 	mov	r0,a
      000F72 A6 04            [24] 3220 	mov	@r0,ar4
      000F74 08               [12] 3221 	inc	r0
      000F75 A6 05            [24] 3222 	mov	@r0,ar5
      000F77 08               [12] 3223 	inc	r0
      000F78 A6 06            [24] 3224 	mov	@r0,ar6
      000F7A 08               [12] 3225 	inc	r0
      000F7B A6 07            [24] 3226 	mov	@r0,ar7
                                   3227 ;	calc.c:204: (void)stack_push(&ctx->s, d1);
      000F7D E5*00            [12] 3228 	mov	a,_bp
      000F7F 24 04            [12] 3229 	add	a,#0x04
      000F81 F8               [12] 3230 	mov	r0,a
      000F82 74 09            [12] 3231 	mov	a,#0x09
      000F84 26               [12] 3232 	add	a,@r0
      000F85 FD               [12] 3233 	mov	r5,a
      000F86 E4               [12] 3234 	clr	a
      000F87 08               [12] 3235 	inc	r0
      000F88 36               [12] 3236 	addc	a,@r0
      000F89 FE               [12] 3237 	mov	r6,a
      000F8A 08               [12] 3238 	inc	r0
      000F8B 86 07            [24] 3239 	mov	ar7,@r0
      000F8D E5*00            [12] 3240 	mov	a,_bp
      000F8F 24 0B            [12] 3241 	add	a,#0x0b
      000F91 F8               [12] 3242 	mov	r0,a
      000F92 E6               [12] 3243 	mov	a,@r0
      000F93 C0 E0            [24] 3244 	push	acc
      000F95 08               [12] 3245 	inc	r0
      000F96 E6               [12] 3246 	mov	a,@r0
      000F97 C0 E0            [24] 3247 	push	acc
      000F99 08               [12] 3248 	inc	r0
      000F9A E6               [12] 3249 	mov	a,@r0
      000F9B C0 E0            [24] 3250 	push	acc
      000F9D 08               [12] 3251 	inc	r0
      000F9E E6               [12] 3252 	mov	a,@r0
      000F9F C0 E0            [24] 3253 	push	acc
      000FA1 8D 82            [24] 3254 	mov	dpl,r5
      000FA3 8E 83            [24] 3255 	mov	dph,r6
      000FA5 8F F0            [24] 3256 	mov	b,r7
      000FA7 12r00r00         [24] 3257 	lcall	_stack_push
      000FAA E5 81            [12] 3258 	mov	a,sp
      000FAC 24 FC            [12] 3259 	add	a,#0xfc
      000FAE F5 81            [12] 3260 	mov	sp,a
                                   3261 ;	calc.c:206: break;
      000FB0 02r18r06         [24] 3262 	ljmp	00188$
                                   3263 ;	calc.c:207: case '/':
      000FB3                       3264 00142$:
                                   3265 ;	calc.c:208: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      000FB3 E5*00            [12] 3266 	mov	a,_bp
      000FB5 24 07            [12] 3267 	add	a,#0x07
      000FB7 FF               [12] 3268 	mov	r7,a
      000FB8 7E 00            [12] 3269 	mov	r6,#0x00
      000FBA 7D 40            [12] 3270 	mov	r5,#0x40
      000FBC E5*00            [12] 3271 	mov	a,_bp
      000FBE 24 04            [12] 3272 	add	a,#0x04
      000FC0 F8               [12] 3273 	mov	r0,a
      000FC1 74 09            [12] 3274 	mov	a,#0x09
      000FC3 26               [12] 3275 	add	a,@r0
      000FC4 FA               [12] 3276 	mov	r2,a
      000FC5 E4               [12] 3277 	clr	a
      000FC6 08               [12] 3278 	inc	r0
      000FC7 36               [12] 3279 	addc	a,@r0
      000FC8 FB               [12] 3280 	mov	r3,a
      000FC9 08               [12] 3281 	inc	r0
      000FCA 86 04            [24] 3282 	mov	ar4,@r0
      000FCC C0 07            [24] 3283 	push	ar7
      000FCE C0 06            [24] 3284 	push	ar6
      000FD0 C0 05            [24] 3285 	push	ar5
      000FD2 8A 82            [24] 3286 	mov	dpl,r2
      000FD4 8B 83            [24] 3287 	mov	dph,r3
      000FD6 8C F0            [24] 3288 	mov	b,r4
      000FD8 12r00r00         [24] 3289 	lcall	_stack_pop
      000FDB AE 82            [24] 3290 	mov	r6,dpl
      000FDD AF 83            [24] 3291 	mov	r7,dph
      000FDF 15 81            [12] 3292 	dec	sp
      000FE1 15 81            [12] 3293 	dec	sp
      000FE3 15 81            [12] 3294 	dec	sp
      000FE5 EE               [12] 3295 	mov	a,r6
      000FE6 4F               [12] 3296 	orl	a,r7
      000FE7 70 25            [24] 3297 	jnz	00150$
      000FE9 7Dr37            [12] 3298 	mov	r5,#___str_7
      000FEB 7Es00            [12] 3299 	mov	r6,#(___str_7 >> 8)
      000FED 7F 80            [12] 3300 	mov	r7,#0x80
                                   3301 ;	calc.c:50: return;
      000FEF                       3302 00319$:
                                   3303 ;	calc.c:48: for (; *s; s++) putchar(*s);
      000FEF 8D 82            [24] 3304 	mov	dpl,r5
      000FF1 8E 83            [24] 3305 	mov	dph,r6
      000FF3 8F F0            [24] 3306 	mov	b,r7
      000FF5 12r00r00         [24] 3307 	lcall	__gptrget
      000FF8 FC               [12] 3308 	mov	r4,a
      000FF9 70 03            [24] 3309 	jnz	00900$
      000FFB 02r18r06         [24] 3310 	ljmp	00188$
      000FFE                       3311 00900$:
      000FFE 7B 00            [12] 3312 	mov	r3,#0x00
      001000 8C 82            [24] 3313 	mov	dpl,r4
      001002 8B 83            [24] 3314 	mov	dph,r3
      001004 12r00r00         [24] 3315 	lcall	_putchar
      001007 0D               [12] 3316 	inc	r5
                                   3317 ;	calc.c:208: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      001008 BD 00 E4         [24] 3318 	cjne	r5,#0x00,00319$
      00100B 0E               [12] 3319 	inc	r6
      00100C 80 E1            [24] 3320 	sjmp	00319$
      00100E                       3321 00150$:
                                   3322 ;	calc.c:209: else if (!stack_pop(&ctx->s, &d1)) {
      00100E E5*00            [12] 3323 	mov	a,_bp
      001010 24 0B            [12] 3324 	add	a,#0x0b
      001012 FF               [12] 3325 	mov	r7,a
      001013 7E 00            [12] 3326 	mov	r6,#0x00
      001015 7D 40            [12] 3327 	mov	r5,#0x40
      001017 E5*00            [12] 3328 	mov	a,_bp
      001019 24 04            [12] 3329 	add	a,#0x04
      00101B F8               [12] 3330 	mov	r0,a
      00101C 74 09            [12] 3331 	mov	a,#0x09
      00101E 26               [12] 3332 	add	a,@r0
      00101F FA               [12] 3333 	mov	r2,a
      001020 E4               [12] 3334 	clr	a
      001021 08               [12] 3335 	inc	r0
      001022 36               [12] 3336 	addc	a,@r0
      001023 FB               [12] 3337 	mov	r3,a
      001024 08               [12] 3338 	inc	r0
      001025 86 04            [24] 3339 	mov	ar4,@r0
      001027 C0 07            [24] 3340 	push	ar7
      001029 C0 06            [24] 3341 	push	ar6
      00102B C0 05            [24] 3342 	push	ar5
      00102D 8A 82            [24] 3343 	mov	dpl,r2
      00102F 8B 83            [24] 3344 	mov	dph,r3
      001031 8C F0            [24] 3345 	mov	b,r4
      001033 12r00r00         [24] 3346 	lcall	_stack_pop
      001036 AE 82            [24] 3347 	mov	r6,dpl
      001038 AF 83            [24] 3348 	mov	r7,dph
      00103A 15 81            [12] 3349 	dec	sp
      00103C 15 81            [12] 3350 	dec	sp
      00103E 15 81            [12] 3351 	dec	sp
      001040 EE               [12] 3352 	mov	a,r6
      001041 4F               [12] 3353 	orl	a,r7
      001042 70 58            [24] 3354 	jnz	00147$
                                   3355 ;	calc.c:210: (void)stack_push(&ctx->s, d0);
      001044 E5*00            [12] 3356 	mov	a,_bp
      001046 24 04            [12] 3357 	add	a,#0x04
      001048 F8               [12] 3358 	mov	r0,a
      001049 74 09            [12] 3359 	mov	a,#0x09
      00104B 26               [12] 3360 	add	a,@r0
      00104C FD               [12] 3361 	mov	r5,a
      00104D E4               [12] 3362 	clr	a
      00104E 08               [12] 3363 	inc	r0
      00104F 36               [12] 3364 	addc	a,@r0
      001050 FE               [12] 3365 	mov	r6,a
      001051 08               [12] 3366 	inc	r0
      001052 86 07            [24] 3367 	mov	ar7,@r0
      001054 E5*00            [12] 3368 	mov	a,_bp
      001056 24 07            [12] 3369 	add	a,#0x07
      001058 F8               [12] 3370 	mov	r0,a
      001059 E6               [12] 3371 	mov	a,@r0
      00105A C0 E0            [24] 3372 	push	acc
      00105C 08               [12] 3373 	inc	r0
      00105D E6               [12] 3374 	mov	a,@r0
      00105E C0 E0            [24] 3375 	push	acc
      001060 08               [12] 3376 	inc	r0
      001061 E6               [12] 3377 	mov	a,@r0
      001062 C0 E0            [24] 3378 	push	acc
      001064 08               [12] 3379 	inc	r0
      001065 E6               [12] 3380 	mov	a,@r0
      001066 C0 E0            [24] 3381 	push	acc
      001068 8D 82            [24] 3382 	mov	dpl,r5
      00106A 8E 83            [24] 3383 	mov	dph,r6
      00106C 8F F0            [24] 3384 	mov	b,r7
      00106E 12r00r00         [24] 3385 	lcall	_stack_push
      001071 E5 81            [12] 3386 	mov	a,sp
      001073 24 FC            [12] 3387 	add	a,#0xfc
      001075 F5 81            [12] 3388 	mov	sp,a
                                   3389 ;	calc.c:211: printstr("\r\nstack underflow\r\n");
      001077 7Dr37            [12] 3390 	mov	r5,#___str_7
      001079 7Es00            [12] 3391 	mov	r6,#(___str_7 >> 8)
      00107B 7F 80            [12] 3392 	mov	r7,#0x80
                                   3393 ;	calc.c:50: return;
      00107D                       3394 00322$:
                                   3395 ;	calc.c:48: for (; *s; s++) putchar(*s);
      00107D 8D 82            [24] 3396 	mov	dpl,r5
      00107F 8E 83            [24] 3397 	mov	dph,r6
      001081 8F F0            [24] 3398 	mov	b,r7
      001083 12r00r00         [24] 3399 	lcall	__gptrget
      001086 FC               [12] 3400 	mov	r4,a
      001087 70 03            [24] 3401 	jnz	00903$
      001089 02r18r06         [24] 3402 	ljmp	00188$
      00108C                       3403 00903$:
      00108C 7B 00            [12] 3404 	mov	r3,#0x00
      00108E 8C 82            [24] 3405 	mov	dpl,r4
      001090 8B 83            [24] 3406 	mov	dph,r3
      001092 12r00r00         [24] 3407 	lcall	_putchar
      001095 0D               [12] 3408 	inc	r5
                                   3409 ;	calc.c:211: printstr("\r\nstack underflow\r\n");
      001096 BD 00 E4         [24] 3410 	cjne	r5,#0x00,00322$
      001099 0E               [12] 3411 	inc	r6
      00109A 80 E1            [24] 3412 	sjmp	00322$
      00109C                       3413 00147$:
                                   3414 ;	calc.c:212: } else if (!d0) {
      00109C E5*00            [12] 3415 	mov	a,_bp
      00109E 24 07            [12] 3416 	add	a,#0x07
      0010A0 F8               [12] 3417 	mov	r0,a
      0010A1 E6               [12] 3418 	mov	a,@r0
      0010A2 08               [12] 3419 	inc	r0
      0010A3 46               [12] 3420 	orl	a,@r0
      0010A4 08               [12] 3421 	inc	r0
      0010A5 46               [12] 3422 	orl	a,@r0
      0010A6 08               [12] 3423 	inc	r0
      0010A7 46               [12] 3424 	orl	a,@r0
      0010A8 60 03            [24] 3425 	jz	00905$
      0010AA 02r11r38         [24] 3426 	ljmp	00144$
      0010AD                       3427 00905$:
                                   3428 ;	calc.c:213: (void)stack_push(&ctx->s, d1);
      0010AD E5*00            [12] 3429 	mov	a,_bp
      0010AF 24 04            [12] 3430 	add	a,#0x04
      0010B1 F8               [12] 3431 	mov	r0,a
      0010B2 74 09            [12] 3432 	mov	a,#0x09
      0010B4 26               [12] 3433 	add	a,@r0
      0010B5 FD               [12] 3434 	mov	r5,a
      0010B6 E4               [12] 3435 	clr	a
      0010B7 08               [12] 3436 	inc	r0
      0010B8 36               [12] 3437 	addc	a,@r0
      0010B9 FE               [12] 3438 	mov	r6,a
      0010BA 08               [12] 3439 	inc	r0
      0010BB 86 07            [24] 3440 	mov	ar7,@r0
      0010BD E5*00            [12] 3441 	mov	a,_bp
      0010BF 24 0B            [12] 3442 	add	a,#0x0b
      0010C1 F8               [12] 3443 	mov	r0,a
      0010C2 E6               [12] 3444 	mov	a,@r0
      0010C3 C0 E0            [24] 3445 	push	acc
      0010C5 08               [12] 3446 	inc	r0
      0010C6 E6               [12] 3447 	mov	a,@r0
      0010C7 C0 E0            [24] 3448 	push	acc
      0010C9 08               [12] 3449 	inc	r0
      0010CA E6               [12] 3450 	mov	a,@r0
      0010CB C0 E0            [24] 3451 	push	acc
      0010CD 08               [12] 3452 	inc	r0
      0010CE E6               [12] 3453 	mov	a,@r0
      0010CF C0 E0            [24] 3454 	push	acc
      0010D1 8D 82            [24] 3455 	mov	dpl,r5
      0010D3 8E 83            [24] 3456 	mov	dph,r6
      0010D5 8F F0            [24] 3457 	mov	b,r7
      0010D7 12r00r00         [24] 3458 	lcall	_stack_push
      0010DA E5 81            [12] 3459 	mov	a,sp
      0010DC 24 FC            [12] 3460 	add	a,#0xfc
      0010DE F5 81            [12] 3461 	mov	sp,a
                                   3462 ;	calc.c:214: (void)stack_push(&ctx->s, d0);			
      0010E0 E5*00            [12] 3463 	mov	a,_bp
      0010E2 24 04            [12] 3464 	add	a,#0x04
      0010E4 F8               [12] 3465 	mov	r0,a
      0010E5 74 09            [12] 3466 	mov	a,#0x09
      0010E7 26               [12] 3467 	add	a,@r0
      0010E8 FD               [12] 3468 	mov	r5,a
      0010E9 E4               [12] 3469 	clr	a
      0010EA 08               [12] 3470 	inc	r0
      0010EB 36               [12] 3471 	addc	a,@r0
      0010EC FE               [12] 3472 	mov	r6,a
      0010ED 08               [12] 3473 	inc	r0
      0010EE 86 07            [24] 3474 	mov	ar7,@r0
      0010F0 E5*00            [12] 3475 	mov	a,_bp
      0010F2 24 07            [12] 3476 	add	a,#0x07
      0010F4 F8               [12] 3477 	mov	r0,a
      0010F5 E6               [12] 3478 	mov	a,@r0
      0010F6 C0 E0            [24] 3479 	push	acc
      0010F8 08               [12] 3480 	inc	r0
      0010F9 E6               [12] 3481 	mov	a,@r0
      0010FA C0 E0            [24] 3482 	push	acc
      0010FC 08               [12] 3483 	inc	r0
      0010FD E6               [12] 3484 	mov	a,@r0
      0010FE C0 E0            [24] 3485 	push	acc
      001100 08               [12] 3486 	inc	r0
      001101 E6               [12] 3487 	mov	a,@r0
      001102 C0 E0            [24] 3488 	push	acc
      001104 8D 82            [24] 3489 	mov	dpl,r5
      001106 8E 83            [24] 3490 	mov	dph,r6
      001108 8F F0            [24] 3491 	mov	b,r7
      00110A 12r00r00         [24] 3492 	lcall	_stack_push
      00110D E5 81            [12] 3493 	mov	a,sp
      00110F 24 FC            [12] 3494 	add	a,#0xfc
      001111 F5 81            [12] 3495 	mov	sp,a
                                   3496 ;	calc.c:215: printstr("\r\ndivision by zero\r\n");
      001113 7Dr4B            [12] 3497 	mov	r5,#___str_8
      001115 7Es00            [12] 3498 	mov	r6,#(___str_8 >> 8)
      001117 7F 80            [12] 3499 	mov	r7,#0x80
                                   3500 ;	calc.c:50: return;
      001119                       3501 00325$:
                                   3502 ;	calc.c:48: for (; *s; s++) putchar(*s);
      001119 8D 82            [24] 3503 	mov	dpl,r5
      00111B 8E 83            [24] 3504 	mov	dph,r6
      00111D 8F F0            [24] 3505 	mov	b,r7
      00111F 12r00r00         [24] 3506 	lcall	__gptrget
      001122 FC               [12] 3507 	mov	r4,a
      001123 70 03            [24] 3508 	jnz	00906$
      001125 02r18r06         [24] 3509 	ljmp	00188$
      001128                       3510 00906$:
      001128 7B 00            [12] 3511 	mov	r3,#0x00
      00112A 8C 82            [24] 3512 	mov	dpl,r4
      00112C 8B 83            [24] 3513 	mov	dph,r3
      00112E 12r00r00         [24] 3514 	lcall	_putchar
      001131 0D               [12] 3515 	inc	r5
                                   3516 ;	calc.c:215: printstr("\r\ndivision by zero\r\n");
      001132 BD 00 E4         [24] 3517 	cjne	r5,#0x00,00325$
      001135 0E               [12] 3518 	inc	r6
      001136 80 E1            [24] 3519 	sjmp	00325$
      001138                       3520 00144$:
                                   3521 ;	calc.c:217: d1 /= d0;
      001138 E5*00            [12] 3522 	mov	a,_bp
      00113A 24 07            [12] 3523 	add	a,#0x07
      00113C F8               [12] 3524 	mov	r0,a
      00113D E6               [12] 3525 	mov	a,@r0
      00113E C0 E0            [24] 3526 	push	acc
      001140 08               [12] 3527 	inc	r0
      001141 E6               [12] 3528 	mov	a,@r0
      001142 C0 E0            [24] 3529 	push	acc
      001144 08               [12] 3530 	inc	r0
      001145 E6               [12] 3531 	mov	a,@r0
      001146 C0 E0            [24] 3532 	push	acc
      001148 08               [12] 3533 	inc	r0
      001149 E6               [12] 3534 	mov	a,@r0
      00114A C0 E0            [24] 3535 	push	acc
      00114C E5*00            [12] 3536 	mov	a,_bp
      00114E 24 0B            [12] 3537 	add	a,#0x0b
      001150 F8               [12] 3538 	mov	r0,a
      001151 86 82            [24] 3539 	mov	dpl,@r0
      001153 08               [12] 3540 	inc	r0
      001154 86 83            [24] 3541 	mov	dph,@r0
      001156 08               [12] 3542 	inc	r0
      001157 86 F0            [24] 3543 	mov	b,@r0
      001159 08               [12] 3544 	inc	r0
      00115A E6               [12] 3545 	mov	a,@r0
      00115B 12r00r00         [24] 3546 	lcall	__divslong
      00115E AC 82            [24] 3547 	mov	r4,dpl
      001160 AD 83            [24] 3548 	mov	r5,dph
      001162 AE F0            [24] 3549 	mov	r6,b
      001164 FF               [12] 3550 	mov	r7,a
      001165 E5 81            [12] 3551 	mov	a,sp
      001167 24 FC            [12] 3552 	add	a,#0xfc
      001169 F5 81            [12] 3553 	mov	sp,a
      00116B E5*00            [12] 3554 	mov	a,_bp
      00116D 24 0B            [12] 3555 	add	a,#0x0b
      00116F F8               [12] 3556 	mov	r0,a
      001170 A6 04            [24] 3557 	mov	@r0,ar4
      001172 08               [12] 3558 	inc	r0
      001173 A6 05            [24] 3559 	mov	@r0,ar5
      001175 08               [12] 3560 	inc	r0
      001176 A6 06            [24] 3561 	mov	@r0,ar6
      001178 08               [12] 3562 	inc	r0
      001179 A6 07            [24] 3563 	mov	@r0,ar7
                                   3564 ;	calc.c:218: (void)stack_push(&ctx->s, d1);
      00117B E5*00            [12] 3565 	mov	a,_bp
      00117D 24 04            [12] 3566 	add	a,#0x04
      00117F F8               [12] 3567 	mov	r0,a
      001180 74 09            [12] 3568 	mov	a,#0x09
      001182 26               [12] 3569 	add	a,@r0
      001183 FD               [12] 3570 	mov	r5,a
      001184 E4               [12] 3571 	clr	a
      001185 08               [12] 3572 	inc	r0
      001186 36               [12] 3573 	addc	a,@r0
      001187 FE               [12] 3574 	mov	r6,a
      001188 08               [12] 3575 	inc	r0
      001189 86 07            [24] 3576 	mov	ar7,@r0
      00118B E5*00            [12] 3577 	mov	a,_bp
      00118D 24 0B            [12] 3578 	add	a,#0x0b
      00118F F8               [12] 3579 	mov	r0,a
      001190 E6               [12] 3580 	mov	a,@r0
      001191 C0 E0            [24] 3581 	push	acc
      001193 08               [12] 3582 	inc	r0
      001194 E6               [12] 3583 	mov	a,@r0
      001195 C0 E0            [24] 3584 	push	acc
      001197 08               [12] 3585 	inc	r0
      001198 E6               [12] 3586 	mov	a,@r0
      001199 C0 E0            [24] 3587 	push	acc
      00119B 08               [12] 3588 	inc	r0
      00119C E6               [12] 3589 	mov	a,@r0
      00119D C0 E0            [24] 3590 	push	acc
      00119F 8D 82            [24] 3591 	mov	dpl,r5
      0011A1 8E 83            [24] 3592 	mov	dph,r6
      0011A3 8F F0            [24] 3593 	mov	b,r7
      0011A5 12r00r00         [24] 3594 	lcall	_stack_push
      0011A8 E5 81            [12] 3595 	mov	a,sp
      0011AA 24 FC            [12] 3596 	add	a,#0xfc
      0011AC F5 81            [12] 3597 	mov	sp,a
                                   3598 ;	calc.c:220: break;
      0011AE 02r18r06         [24] 3599 	ljmp	00188$
                                   3600 ;	calc.c:221: case '%':
      0011B1                       3601 00152$:
                                   3602 ;	calc.c:222: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      0011B1 E5*00            [12] 3603 	mov	a,_bp
      0011B3 24 07            [12] 3604 	add	a,#0x07
      0011B5 FF               [12] 3605 	mov	r7,a
      0011B6 7E 00            [12] 3606 	mov	r6,#0x00
      0011B8 7D 40            [12] 3607 	mov	r5,#0x40
      0011BA E5*00            [12] 3608 	mov	a,_bp
      0011BC 24 04            [12] 3609 	add	a,#0x04
      0011BE F8               [12] 3610 	mov	r0,a
      0011BF 74 09            [12] 3611 	mov	a,#0x09
      0011C1 26               [12] 3612 	add	a,@r0
      0011C2 FA               [12] 3613 	mov	r2,a
      0011C3 E4               [12] 3614 	clr	a
      0011C4 08               [12] 3615 	inc	r0
      0011C5 36               [12] 3616 	addc	a,@r0
      0011C6 FB               [12] 3617 	mov	r3,a
      0011C7 08               [12] 3618 	inc	r0
      0011C8 86 04            [24] 3619 	mov	ar4,@r0
      0011CA C0 07            [24] 3620 	push	ar7
      0011CC C0 06            [24] 3621 	push	ar6
      0011CE C0 05            [24] 3622 	push	ar5
      0011D0 8A 82            [24] 3623 	mov	dpl,r2
      0011D2 8B 83            [24] 3624 	mov	dph,r3
      0011D4 8C F0            [24] 3625 	mov	b,r4
      0011D6 12r00r00         [24] 3626 	lcall	_stack_pop
      0011D9 AE 82            [24] 3627 	mov	r6,dpl
      0011DB AF 83            [24] 3628 	mov	r7,dph
      0011DD 15 81            [12] 3629 	dec	sp
      0011DF 15 81            [12] 3630 	dec	sp
      0011E1 15 81            [12] 3631 	dec	sp
      0011E3 EE               [12] 3632 	mov	a,r6
      0011E4 4F               [12] 3633 	orl	a,r7
      0011E5 70 25            [24] 3634 	jnz	00160$
      0011E7 7Dr37            [12] 3635 	mov	r5,#___str_7
      0011E9 7Es00            [12] 3636 	mov	r6,#(___str_7 >> 8)
      0011EB 7F 80            [12] 3637 	mov	r7,#0x80
                                   3638 ;	calc.c:50: return;
      0011ED                       3639 00328$:
                                   3640 ;	calc.c:48: for (; *s; s++) putchar(*s);
      0011ED 8D 82            [24] 3641 	mov	dpl,r5
      0011EF 8E 83            [24] 3642 	mov	dph,r6
      0011F1 8F F0            [24] 3643 	mov	b,r7
      0011F3 12r00r00         [24] 3644 	lcall	__gptrget
      0011F6 FC               [12] 3645 	mov	r4,a
      0011F7 70 03            [24] 3646 	jnz	00909$
      0011F9 02r18r06         [24] 3647 	ljmp	00188$
      0011FC                       3648 00909$:
      0011FC 7B 00            [12] 3649 	mov	r3,#0x00
      0011FE 8C 82            [24] 3650 	mov	dpl,r4
      001200 8B 83            [24] 3651 	mov	dph,r3
      001202 12r00r00         [24] 3652 	lcall	_putchar
      001205 0D               [12] 3653 	inc	r5
                                   3654 ;	calc.c:222: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      001206 BD 00 E4         [24] 3655 	cjne	r5,#0x00,00328$
      001209 0E               [12] 3656 	inc	r6
      00120A 80 E1            [24] 3657 	sjmp	00328$
      00120C                       3658 00160$:
                                   3659 ;	calc.c:223: else if (!stack_pop(&ctx->s, &d1)) {
      00120C E5*00            [12] 3660 	mov	a,_bp
      00120E 24 0B            [12] 3661 	add	a,#0x0b
      001210 FF               [12] 3662 	mov	r7,a
      001211 7E 00            [12] 3663 	mov	r6,#0x00
      001213 7D 40            [12] 3664 	mov	r5,#0x40
      001215 E5*00            [12] 3665 	mov	a,_bp
      001217 24 04            [12] 3666 	add	a,#0x04
      001219 F8               [12] 3667 	mov	r0,a
      00121A 74 09            [12] 3668 	mov	a,#0x09
      00121C 26               [12] 3669 	add	a,@r0
      00121D FA               [12] 3670 	mov	r2,a
      00121E E4               [12] 3671 	clr	a
      00121F 08               [12] 3672 	inc	r0
      001220 36               [12] 3673 	addc	a,@r0
      001221 FB               [12] 3674 	mov	r3,a
      001222 08               [12] 3675 	inc	r0
      001223 86 04            [24] 3676 	mov	ar4,@r0
      001225 C0 07            [24] 3677 	push	ar7
      001227 C0 06            [24] 3678 	push	ar6
      001229 C0 05            [24] 3679 	push	ar5
      00122B 8A 82            [24] 3680 	mov	dpl,r2
      00122D 8B 83            [24] 3681 	mov	dph,r3
      00122F 8C F0            [24] 3682 	mov	b,r4
      001231 12r00r00         [24] 3683 	lcall	_stack_pop
      001234 AE 82            [24] 3684 	mov	r6,dpl
      001236 AF 83            [24] 3685 	mov	r7,dph
      001238 15 81            [12] 3686 	dec	sp
      00123A 15 81            [12] 3687 	dec	sp
      00123C 15 81            [12] 3688 	dec	sp
      00123E EE               [12] 3689 	mov	a,r6
      00123F 4F               [12] 3690 	orl	a,r7
      001240 70 58            [24] 3691 	jnz	00157$
                                   3692 ;	calc.c:224: (void)stack_push(&ctx->s, d0);
      001242 E5*00            [12] 3693 	mov	a,_bp
      001244 24 04            [12] 3694 	add	a,#0x04
      001246 F8               [12] 3695 	mov	r0,a
      001247 74 09            [12] 3696 	mov	a,#0x09
      001249 26               [12] 3697 	add	a,@r0
      00124A FD               [12] 3698 	mov	r5,a
      00124B E4               [12] 3699 	clr	a
      00124C 08               [12] 3700 	inc	r0
      00124D 36               [12] 3701 	addc	a,@r0
      00124E FE               [12] 3702 	mov	r6,a
      00124F 08               [12] 3703 	inc	r0
      001250 86 07            [24] 3704 	mov	ar7,@r0
      001252 E5*00            [12] 3705 	mov	a,_bp
      001254 24 07            [12] 3706 	add	a,#0x07
      001256 F8               [12] 3707 	mov	r0,a
      001257 E6               [12] 3708 	mov	a,@r0
      001258 C0 E0            [24] 3709 	push	acc
      00125A 08               [12] 3710 	inc	r0
      00125B E6               [12] 3711 	mov	a,@r0
      00125C C0 E0            [24] 3712 	push	acc
      00125E 08               [12] 3713 	inc	r0
      00125F E6               [12] 3714 	mov	a,@r0
      001260 C0 E0            [24] 3715 	push	acc
      001262 08               [12] 3716 	inc	r0
      001263 E6               [12] 3717 	mov	a,@r0
      001264 C0 E0            [24] 3718 	push	acc
      001266 8D 82            [24] 3719 	mov	dpl,r5
      001268 8E 83            [24] 3720 	mov	dph,r6
      00126A 8F F0            [24] 3721 	mov	b,r7
      00126C 12r00r00         [24] 3722 	lcall	_stack_push
      00126F E5 81            [12] 3723 	mov	a,sp
      001271 24 FC            [12] 3724 	add	a,#0xfc
      001273 F5 81            [12] 3725 	mov	sp,a
                                   3726 ;	calc.c:225: printstr("\r\nstack underflow\r\n");
      001275 7Dr37            [12] 3727 	mov	r5,#___str_7
      001277 7Es00            [12] 3728 	mov	r6,#(___str_7 >> 8)
      001279 7F 80            [12] 3729 	mov	r7,#0x80
                                   3730 ;	calc.c:50: return;
      00127B                       3731 00331$:
                                   3732 ;	calc.c:48: for (; *s; s++) putchar(*s);
      00127B 8D 82            [24] 3733 	mov	dpl,r5
      00127D 8E 83            [24] 3734 	mov	dph,r6
      00127F 8F F0            [24] 3735 	mov	b,r7
      001281 12r00r00         [24] 3736 	lcall	__gptrget
      001284 FC               [12] 3737 	mov	r4,a
      001285 70 03            [24] 3738 	jnz	00912$
      001287 02r18r06         [24] 3739 	ljmp	00188$
      00128A                       3740 00912$:
      00128A 7B 00            [12] 3741 	mov	r3,#0x00
      00128C 8C 82            [24] 3742 	mov	dpl,r4
      00128E 8B 83            [24] 3743 	mov	dph,r3
      001290 12r00r00         [24] 3744 	lcall	_putchar
      001293 0D               [12] 3745 	inc	r5
                                   3746 ;	calc.c:225: printstr("\r\nstack underflow\r\n");
      001294 BD 00 E4         [24] 3747 	cjne	r5,#0x00,00331$
      001297 0E               [12] 3748 	inc	r6
      001298 80 E1            [24] 3749 	sjmp	00331$
      00129A                       3750 00157$:
                                   3751 ;	calc.c:226: } else if (!d0) {
      00129A E5*00            [12] 3752 	mov	a,_bp
      00129C 24 07            [12] 3753 	add	a,#0x07
      00129E F8               [12] 3754 	mov	r0,a
      00129F E6               [12] 3755 	mov	a,@r0
      0012A0 08               [12] 3756 	inc	r0
      0012A1 46               [12] 3757 	orl	a,@r0
      0012A2 08               [12] 3758 	inc	r0
      0012A3 46               [12] 3759 	orl	a,@r0
      0012A4 08               [12] 3760 	inc	r0
      0012A5 46               [12] 3761 	orl	a,@r0
      0012A6 60 03            [24] 3762 	jz	00914$
      0012A8 02r13r36         [24] 3763 	ljmp	00154$
      0012AB                       3764 00914$:
                                   3765 ;	calc.c:227: (void)stack_push(&ctx->s, d1);
      0012AB E5*00            [12] 3766 	mov	a,_bp
      0012AD 24 04            [12] 3767 	add	a,#0x04
      0012AF F8               [12] 3768 	mov	r0,a
      0012B0 74 09            [12] 3769 	mov	a,#0x09
      0012B2 26               [12] 3770 	add	a,@r0
      0012B3 FD               [12] 3771 	mov	r5,a
      0012B4 E4               [12] 3772 	clr	a
      0012B5 08               [12] 3773 	inc	r0
      0012B6 36               [12] 3774 	addc	a,@r0
      0012B7 FE               [12] 3775 	mov	r6,a
      0012B8 08               [12] 3776 	inc	r0
      0012B9 86 07            [24] 3777 	mov	ar7,@r0
      0012BB E5*00            [12] 3778 	mov	a,_bp
      0012BD 24 0B            [12] 3779 	add	a,#0x0b
      0012BF F8               [12] 3780 	mov	r0,a
      0012C0 E6               [12] 3781 	mov	a,@r0
      0012C1 C0 E0            [24] 3782 	push	acc
      0012C3 08               [12] 3783 	inc	r0
      0012C4 E6               [12] 3784 	mov	a,@r0
      0012C5 C0 E0            [24] 3785 	push	acc
      0012C7 08               [12] 3786 	inc	r0
      0012C8 E6               [12] 3787 	mov	a,@r0
      0012C9 C0 E0            [24] 3788 	push	acc
      0012CB 08               [12] 3789 	inc	r0
      0012CC E6               [12] 3790 	mov	a,@r0
      0012CD C0 E0            [24] 3791 	push	acc
      0012CF 8D 82            [24] 3792 	mov	dpl,r5
      0012D1 8E 83            [24] 3793 	mov	dph,r6
      0012D3 8F F0            [24] 3794 	mov	b,r7
      0012D5 12r00r00         [24] 3795 	lcall	_stack_push
      0012D8 E5 81            [12] 3796 	mov	a,sp
      0012DA 24 FC            [12] 3797 	add	a,#0xfc
      0012DC F5 81            [12] 3798 	mov	sp,a
                                   3799 ;	calc.c:228: (void)stack_push(&ctx->s, d0);			
      0012DE E5*00            [12] 3800 	mov	a,_bp
      0012E0 24 04            [12] 3801 	add	a,#0x04
      0012E2 F8               [12] 3802 	mov	r0,a
      0012E3 74 09            [12] 3803 	mov	a,#0x09
      0012E5 26               [12] 3804 	add	a,@r0
      0012E6 FD               [12] 3805 	mov	r5,a
      0012E7 E4               [12] 3806 	clr	a
      0012E8 08               [12] 3807 	inc	r0
      0012E9 36               [12] 3808 	addc	a,@r0
      0012EA FE               [12] 3809 	mov	r6,a
      0012EB 08               [12] 3810 	inc	r0
      0012EC 86 07            [24] 3811 	mov	ar7,@r0
      0012EE E5*00            [12] 3812 	mov	a,_bp
      0012F0 24 07            [12] 3813 	add	a,#0x07
      0012F2 F8               [12] 3814 	mov	r0,a
      0012F3 E6               [12] 3815 	mov	a,@r0
      0012F4 C0 E0            [24] 3816 	push	acc
      0012F6 08               [12] 3817 	inc	r0
      0012F7 E6               [12] 3818 	mov	a,@r0
      0012F8 C0 E0            [24] 3819 	push	acc
      0012FA 08               [12] 3820 	inc	r0
      0012FB E6               [12] 3821 	mov	a,@r0
      0012FC C0 E0            [24] 3822 	push	acc
      0012FE 08               [12] 3823 	inc	r0
      0012FF E6               [12] 3824 	mov	a,@r0
      001300 C0 E0            [24] 3825 	push	acc
      001302 8D 82            [24] 3826 	mov	dpl,r5
      001304 8E 83            [24] 3827 	mov	dph,r6
      001306 8F F0            [24] 3828 	mov	b,r7
      001308 12r00r00         [24] 3829 	lcall	_stack_push
      00130B E5 81            [12] 3830 	mov	a,sp
      00130D 24 FC            [12] 3831 	add	a,#0xfc
      00130F F5 81            [12] 3832 	mov	sp,a
                                   3833 ;	calc.c:229: printstr("\r\ndivision by zero\r\n");
      001311 7Dr4B            [12] 3834 	mov	r5,#___str_8
      001313 7Es00            [12] 3835 	mov	r6,#(___str_8 >> 8)
      001315 7F 80            [12] 3836 	mov	r7,#0x80
                                   3837 ;	calc.c:50: return;
      001317                       3838 00334$:
                                   3839 ;	calc.c:48: for (; *s; s++) putchar(*s);
      001317 8D 82            [24] 3840 	mov	dpl,r5
      001319 8E 83            [24] 3841 	mov	dph,r6
      00131B 8F F0            [24] 3842 	mov	b,r7
      00131D 12r00r00         [24] 3843 	lcall	__gptrget
      001320 FC               [12] 3844 	mov	r4,a
      001321 70 03            [24] 3845 	jnz	00915$
      001323 02r18r06         [24] 3846 	ljmp	00188$
      001326                       3847 00915$:
      001326 7B 00            [12] 3848 	mov	r3,#0x00
      001328 8C 82            [24] 3849 	mov	dpl,r4
      00132A 8B 83            [24] 3850 	mov	dph,r3
      00132C 12r00r00         [24] 3851 	lcall	_putchar
      00132F 0D               [12] 3852 	inc	r5
                                   3853 ;	calc.c:229: printstr("\r\ndivision by zero\r\n");
      001330 BD 00 E4         [24] 3854 	cjne	r5,#0x00,00334$
      001333 0E               [12] 3855 	inc	r6
      001334 80 E1            [24] 3856 	sjmp	00334$
      001336                       3857 00154$:
                                   3858 ;	calc.c:231: d1 %= d0;
      001336 E5*00            [12] 3859 	mov	a,_bp
      001338 24 07            [12] 3860 	add	a,#0x07
      00133A F8               [12] 3861 	mov	r0,a
      00133B E6               [12] 3862 	mov	a,@r0
      00133C C0 E0            [24] 3863 	push	acc
      00133E 08               [12] 3864 	inc	r0
      00133F E6               [12] 3865 	mov	a,@r0
      001340 C0 E0            [24] 3866 	push	acc
      001342 08               [12] 3867 	inc	r0
      001343 E6               [12] 3868 	mov	a,@r0
      001344 C0 E0            [24] 3869 	push	acc
      001346 08               [12] 3870 	inc	r0
      001347 E6               [12] 3871 	mov	a,@r0
      001348 C0 E0            [24] 3872 	push	acc
      00134A E5*00            [12] 3873 	mov	a,_bp
      00134C 24 0B            [12] 3874 	add	a,#0x0b
      00134E F8               [12] 3875 	mov	r0,a
      00134F 86 82            [24] 3876 	mov	dpl,@r0
      001351 08               [12] 3877 	inc	r0
      001352 86 83            [24] 3878 	mov	dph,@r0
      001354 08               [12] 3879 	inc	r0
      001355 86 F0            [24] 3880 	mov	b,@r0
      001357 08               [12] 3881 	inc	r0
      001358 E6               [12] 3882 	mov	a,@r0
      001359 12r00r00         [24] 3883 	lcall	__modslong
      00135C AC 82            [24] 3884 	mov	r4,dpl
      00135E AD 83            [24] 3885 	mov	r5,dph
      001360 AE F0            [24] 3886 	mov	r6,b
      001362 FF               [12] 3887 	mov	r7,a
      001363 E5 81            [12] 3888 	mov	a,sp
      001365 24 FC            [12] 3889 	add	a,#0xfc
      001367 F5 81            [12] 3890 	mov	sp,a
      001369 E5*00            [12] 3891 	mov	a,_bp
      00136B 24 0B            [12] 3892 	add	a,#0x0b
      00136D F8               [12] 3893 	mov	r0,a
      00136E A6 04            [24] 3894 	mov	@r0,ar4
      001370 08               [12] 3895 	inc	r0
      001371 A6 05            [24] 3896 	mov	@r0,ar5
      001373 08               [12] 3897 	inc	r0
      001374 A6 06            [24] 3898 	mov	@r0,ar6
      001376 08               [12] 3899 	inc	r0
      001377 A6 07            [24] 3900 	mov	@r0,ar7
                                   3901 ;	calc.c:232: (void)stack_push(&ctx->s, d1);
      001379 E5*00            [12] 3902 	mov	a,_bp
      00137B 24 04            [12] 3903 	add	a,#0x04
      00137D F8               [12] 3904 	mov	r0,a
      00137E 74 09            [12] 3905 	mov	a,#0x09
      001380 26               [12] 3906 	add	a,@r0
      001381 FD               [12] 3907 	mov	r5,a
      001382 E4               [12] 3908 	clr	a
      001383 08               [12] 3909 	inc	r0
      001384 36               [12] 3910 	addc	a,@r0
      001385 FE               [12] 3911 	mov	r6,a
      001386 08               [12] 3912 	inc	r0
      001387 86 07            [24] 3913 	mov	ar7,@r0
      001389 E5*00            [12] 3914 	mov	a,_bp
      00138B 24 0B            [12] 3915 	add	a,#0x0b
      00138D F8               [12] 3916 	mov	r0,a
      00138E E6               [12] 3917 	mov	a,@r0
      00138F C0 E0            [24] 3918 	push	acc
      001391 08               [12] 3919 	inc	r0
      001392 E6               [12] 3920 	mov	a,@r0
      001393 C0 E0            [24] 3921 	push	acc
      001395 08               [12] 3922 	inc	r0
      001396 E6               [12] 3923 	mov	a,@r0
      001397 C0 E0            [24] 3924 	push	acc
      001399 08               [12] 3925 	inc	r0
      00139A E6               [12] 3926 	mov	a,@r0
      00139B C0 E0            [24] 3927 	push	acc
      00139D 8D 82            [24] 3928 	mov	dpl,r5
      00139F 8E 83            [24] 3929 	mov	dph,r6
      0013A1 8F F0            [24] 3930 	mov	b,r7
      0013A3 12r00r00         [24] 3931 	lcall	_stack_push
      0013A6 E5 81            [12] 3932 	mov	a,sp
      0013A8 24 FC            [12] 3933 	add	a,#0xfc
      0013AA F5 81            [12] 3934 	mov	sp,a
                                   3935 ;	calc.c:234: break;
      0013AC 02r18r06         [24] 3936 	ljmp	00188$
                                   3937 ;	calc.c:235: case '&':
      0013AF                       3938 00162$:
                                   3939 ;	calc.c:236: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      0013AF E5*00            [12] 3940 	mov	a,_bp
      0013B1 24 07            [12] 3941 	add	a,#0x07
      0013B3 FF               [12] 3942 	mov	r7,a
      0013B4 7E 00            [12] 3943 	mov	r6,#0x00
      0013B6 7D 40            [12] 3944 	mov	r5,#0x40
      0013B8 E5*00            [12] 3945 	mov	a,_bp
      0013BA 24 04            [12] 3946 	add	a,#0x04
      0013BC F8               [12] 3947 	mov	r0,a
      0013BD 74 09            [12] 3948 	mov	a,#0x09
      0013BF 26               [12] 3949 	add	a,@r0
      0013C0 FA               [12] 3950 	mov	r2,a
      0013C1 E4               [12] 3951 	clr	a
      0013C2 08               [12] 3952 	inc	r0
      0013C3 36               [12] 3953 	addc	a,@r0
      0013C4 FB               [12] 3954 	mov	r3,a
      0013C5 08               [12] 3955 	inc	r0
      0013C6 86 04            [24] 3956 	mov	ar4,@r0
      0013C8 C0 07            [24] 3957 	push	ar7
      0013CA C0 06            [24] 3958 	push	ar6
      0013CC C0 05            [24] 3959 	push	ar5
      0013CE 8A 82            [24] 3960 	mov	dpl,r2
      0013D0 8B 83            [24] 3961 	mov	dph,r3
      0013D2 8C F0            [24] 3962 	mov	b,r4
      0013D4 12r00r00         [24] 3963 	lcall	_stack_pop
      0013D7 AE 82            [24] 3964 	mov	r6,dpl
      0013D9 AF 83            [24] 3965 	mov	r7,dph
      0013DB 15 81            [12] 3966 	dec	sp
      0013DD 15 81            [12] 3967 	dec	sp
      0013DF 15 81            [12] 3968 	dec	sp
      0013E1 EE               [12] 3969 	mov	a,r6
      0013E2 4F               [12] 3970 	orl	a,r7
      0013E3 70 25            [24] 3971 	jnz	00167$
      0013E5 7Dr37            [12] 3972 	mov	r5,#___str_7
      0013E7 7Es00            [12] 3973 	mov	r6,#(___str_7 >> 8)
      0013E9 7F 80            [12] 3974 	mov	r7,#0x80
                                   3975 ;	calc.c:50: return;
      0013EB                       3976 00337$:
                                   3977 ;	calc.c:48: for (; *s; s++) putchar(*s);
      0013EB 8D 82            [24] 3978 	mov	dpl,r5
      0013ED 8E 83            [24] 3979 	mov	dph,r6
      0013EF 8F F0            [24] 3980 	mov	b,r7
      0013F1 12r00r00         [24] 3981 	lcall	__gptrget
      0013F4 FC               [12] 3982 	mov	r4,a
      0013F5 70 03            [24] 3983 	jnz	00918$
      0013F7 02r18r06         [24] 3984 	ljmp	00188$
      0013FA                       3985 00918$:
      0013FA 7B 00            [12] 3986 	mov	r3,#0x00
      0013FC 8C 82            [24] 3987 	mov	dpl,r4
      0013FE 8B 83            [24] 3988 	mov	dph,r3
      001400 12r00r00         [24] 3989 	lcall	_putchar
      001403 0D               [12] 3990 	inc	r5
                                   3991 ;	calc.c:236: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      001404 BD 00 E4         [24] 3992 	cjne	r5,#0x00,00337$
      001407 0E               [12] 3993 	inc	r6
      001408 80 E1            [24] 3994 	sjmp	00337$
      00140A                       3995 00167$:
                                   3996 ;	calc.c:237: else if (!stack_pop(&ctx->s, &d1)) {
      00140A E5*00            [12] 3997 	mov	a,_bp
      00140C 24 0B            [12] 3998 	add	a,#0x0b
      00140E FF               [12] 3999 	mov	r7,a
      00140F 7E 00            [12] 4000 	mov	r6,#0x00
      001411 7D 40            [12] 4001 	mov	r5,#0x40
      001413 E5*00            [12] 4002 	mov	a,_bp
      001415 24 04            [12] 4003 	add	a,#0x04
      001417 F8               [12] 4004 	mov	r0,a
      001418 74 09            [12] 4005 	mov	a,#0x09
      00141A 26               [12] 4006 	add	a,@r0
      00141B FA               [12] 4007 	mov	r2,a
      00141C E4               [12] 4008 	clr	a
      00141D 08               [12] 4009 	inc	r0
      00141E 36               [12] 4010 	addc	a,@r0
      00141F FB               [12] 4011 	mov	r3,a
      001420 08               [12] 4012 	inc	r0
      001421 86 04            [24] 4013 	mov	ar4,@r0
      001423 C0 07            [24] 4014 	push	ar7
      001425 C0 06            [24] 4015 	push	ar6
      001427 C0 05            [24] 4016 	push	ar5
      001429 8A 82            [24] 4017 	mov	dpl,r2
      00142B 8B 83            [24] 4018 	mov	dph,r3
      00142D 8C F0            [24] 4019 	mov	b,r4
      00142F 12r00r00         [24] 4020 	lcall	_stack_pop
      001432 AE 82            [24] 4021 	mov	r6,dpl
      001434 AF 83            [24] 4022 	mov	r7,dph
      001436 15 81            [12] 4023 	dec	sp
      001438 15 81            [12] 4024 	dec	sp
      00143A 15 81            [12] 4025 	dec	sp
      00143C EE               [12] 4026 	mov	a,r6
      00143D 4F               [12] 4027 	orl	a,r7
      00143E 70 58            [24] 4028 	jnz	00164$
                                   4029 ;	calc.c:238: (void)stack_push(&ctx->s, d0);
      001440 E5*00            [12] 4030 	mov	a,_bp
      001442 24 04            [12] 4031 	add	a,#0x04
      001444 F8               [12] 4032 	mov	r0,a
      001445 74 09            [12] 4033 	mov	a,#0x09
      001447 26               [12] 4034 	add	a,@r0
      001448 FD               [12] 4035 	mov	r5,a
      001449 E4               [12] 4036 	clr	a
      00144A 08               [12] 4037 	inc	r0
      00144B 36               [12] 4038 	addc	a,@r0
      00144C FE               [12] 4039 	mov	r6,a
      00144D 08               [12] 4040 	inc	r0
      00144E 86 07            [24] 4041 	mov	ar7,@r0
      001450 E5*00            [12] 4042 	mov	a,_bp
      001452 24 07            [12] 4043 	add	a,#0x07
      001454 F8               [12] 4044 	mov	r0,a
      001455 E6               [12] 4045 	mov	a,@r0
      001456 C0 E0            [24] 4046 	push	acc
      001458 08               [12] 4047 	inc	r0
      001459 E6               [12] 4048 	mov	a,@r0
      00145A C0 E0            [24] 4049 	push	acc
      00145C 08               [12] 4050 	inc	r0
      00145D E6               [12] 4051 	mov	a,@r0
      00145E C0 E0            [24] 4052 	push	acc
      001460 08               [12] 4053 	inc	r0
      001461 E6               [12] 4054 	mov	a,@r0
      001462 C0 E0            [24] 4055 	push	acc
      001464 8D 82            [24] 4056 	mov	dpl,r5
      001466 8E 83            [24] 4057 	mov	dph,r6
      001468 8F F0            [24] 4058 	mov	b,r7
      00146A 12r00r00         [24] 4059 	lcall	_stack_push
      00146D E5 81            [12] 4060 	mov	a,sp
      00146F 24 FC            [12] 4061 	add	a,#0xfc
      001471 F5 81            [12] 4062 	mov	sp,a
                                   4063 ;	calc.c:239: printstr("\r\nstack underflow\r\n");
      001473 7Dr37            [12] 4064 	mov	r5,#___str_7
      001475 7Es00            [12] 4065 	mov	r6,#(___str_7 >> 8)
      001477 7F 80            [12] 4066 	mov	r7,#0x80
                                   4067 ;	calc.c:50: return;
      001479                       4068 00340$:
                                   4069 ;	calc.c:48: for (; *s; s++) putchar(*s);
      001479 8D 82            [24] 4070 	mov	dpl,r5
      00147B 8E 83            [24] 4071 	mov	dph,r6
      00147D 8F F0            [24] 4072 	mov	b,r7
      00147F 12r00r00         [24] 4073 	lcall	__gptrget
      001482 FC               [12] 4074 	mov	r4,a
      001483 70 03            [24] 4075 	jnz	00921$
      001485 02r18r06         [24] 4076 	ljmp	00188$
      001488                       4077 00921$:
      001488 7B 00            [12] 4078 	mov	r3,#0x00
      00148A 8C 82            [24] 4079 	mov	dpl,r4
      00148C 8B 83            [24] 4080 	mov	dph,r3
      00148E 12r00r00         [24] 4081 	lcall	_putchar
      001491 0D               [12] 4082 	inc	r5
                                   4083 ;	calc.c:239: printstr("\r\nstack underflow\r\n");
      001492 BD 00 E4         [24] 4084 	cjne	r5,#0x00,00340$
      001495 0E               [12] 4085 	inc	r6
      001496 80 E1            [24] 4086 	sjmp	00340$
      001498                       4087 00164$:
                                   4088 ;	calc.c:241: d1 &= d0;
      001498 E5*00            [12] 4089 	mov	a,_bp
      00149A 24 0B            [12] 4090 	add	a,#0x0b
      00149C F8               [12] 4091 	mov	r0,a
      00149D E5*00            [12] 4092 	mov	a,_bp
      00149F 24 07            [12] 4093 	add	a,#0x07
      0014A1 F9               [12] 4094 	mov	r1,a
      0014A2 E7               [12] 4095 	mov	a,@r1
      0014A3 56               [12] 4096 	anl	a,@r0
      0014A4 F6               [12] 4097 	mov	@r0,a
      0014A5 09               [12] 4098 	inc	r1
      0014A6 E7               [12] 4099 	mov	a,@r1
      0014A7 08               [12] 4100 	inc	r0
      0014A8 56               [12] 4101 	anl	a,@r0
      0014A9 F6               [12] 4102 	mov	@r0,a
      0014AA 09               [12] 4103 	inc	r1
      0014AB E7               [12] 4104 	mov	a,@r1
      0014AC 08               [12] 4105 	inc	r0
      0014AD 56               [12] 4106 	anl	a,@r0
      0014AE F6               [12] 4107 	mov	@r0,a
      0014AF 09               [12] 4108 	inc	r1
      0014B0 E7               [12] 4109 	mov	a,@r1
      0014B1 08               [12] 4110 	inc	r0
      0014B2 56               [12] 4111 	anl	a,@r0
      0014B3 F6               [12] 4112 	mov	@r0,a
                                   4113 ;	calc.c:242: (void)stack_push(&ctx->s, d1);
      0014B4 E5*00            [12] 4114 	mov	a,_bp
      0014B6 24 04            [12] 4115 	add	a,#0x04
      0014B8 F8               [12] 4116 	mov	r0,a
      0014B9 74 09            [12] 4117 	mov	a,#0x09
      0014BB 26               [12] 4118 	add	a,@r0
      0014BC FD               [12] 4119 	mov	r5,a
      0014BD E4               [12] 4120 	clr	a
      0014BE 08               [12] 4121 	inc	r0
      0014BF 36               [12] 4122 	addc	a,@r0
      0014C0 FE               [12] 4123 	mov	r6,a
      0014C1 08               [12] 4124 	inc	r0
      0014C2 86 07            [24] 4125 	mov	ar7,@r0
      0014C4 E5*00            [12] 4126 	mov	a,_bp
      0014C6 24 0B            [12] 4127 	add	a,#0x0b
      0014C8 F8               [12] 4128 	mov	r0,a
      0014C9 E6               [12] 4129 	mov	a,@r0
      0014CA C0 E0            [24] 4130 	push	acc
      0014CC 08               [12] 4131 	inc	r0
      0014CD E6               [12] 4132 	mov	a,@r0
      0014CE C0 E0            [24] 4133 	push	acc
      0014D0 08               [12] 4134 	inc	r0
      0014D1 E6               [12] 4135 	mov	a,@r0
      0014D2 C0 E0            [24] 4136 	push	acc
      0014D4 08               [12] 4137 	inc	r0
      0014D5 E6               [12] 4138 	mov	a,@r0
      0014D6 C0 E0            [24] 4139 	push	acc
      0014D8 8D 82            [24] 4140 	mov	dpl,r5
      0014DA 8E 83            [24] 4141 	mov	dph,r6
      0014DC 8F F0            [24] 4142 	mov	b,r7
      0014DE 12r00r00         [24] 4143 	lcall	_stack_push
      0014E1 E5 81            [12] 4144 	mov	a,sp
      0014E3 24 FC            [12] 4145 	add	a,#0xfc
      0014E5 F5 81            [12] 4146 	mov	sp,a
                                   4147 ;	calc.c:244: break;
      0014E7 02r18r06         [24] 4148 	ljmp	00188$
                                   4149 ;	calc.c:245: case '|':
      0014EA                       4150 00169$:
                                   4151 ;	calc.c:246: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      0014EA E5*00            [12] 4152 	mov	a,_bp
      0014EC 24 07            [12] 4153 	add	a,#0x07
      0014EE FF               [12] 4154 	mov	r7,a
      0014EF 7E 00            [12] 4155 	mov	r6,#0x00
      0014F1 7D 40            [12] 4156 	mov	r5,#0x40
      0014F3 E5*00            [12] 4157 	mov	a,_bp
      0014F5 24 04            [12] 4158 	add	a,#0x04
      0014F7 F8               [12] 4159 	mov	r0,a
      0014F8 74 09            [12] 4160 	mov	a,#0x09
      0014FA 26               [12] 4161 	add	a,@r0
      0014FB FA               [12] 4162 	mov	r2,a
      0014FC E4               [12] 4163 	clr	a
      0014FD 08               [12] 4164 	inc	r0
      0014FE 36               [12] 4165 	addc	a,@r0
      0014FF FB               [12] 4166 	mov	r3,a
      001500 08               [12] 4167 	inc	r0
      001501 86 04            [24] 4168 	mov	ar4,@r0
      001503 C0 07            [24] 4169 	push	ar7
      001505 C0 06            [24] 4170 	push	ar6
      001507 C0 05            [24] 4171 	push	ar5
      001509 8A 82            [24] 4172 	mov	dpl,r2
      00150B 8B 83            [24] 4173 	mov	dph,r3
      00150D 8C F0            [24] 4174 	mov	b,r4
      00150F 12r00r00         [24] 4175 	lcall	_stack_pop
      001512 AE 82            [24] 4176 	mov	r6,dpl
      001514 AF 83            [24] 4177 	mov	r7,dph
      001516 15 81            [12] 4178 	dec	sp
      001518 15 81            [12] 4179 	dec	sp
      00151A 15 81            [12] 4180 	dec	sp
      00151C EE               [12] 4181 	mov	a,r6
      00151D 4F               [12] 4182 	orl	a,r7
      00151E 70 25            [24] 4183 	jnz	00174$
      001520 7Dr37            [12] 4184 	mov	r5,#___str_7
      001522 7Es00            [12] 4185 	mov	r6,#(___str_7 >> 8)
      001524 7F 80            [12] 4186 	mov	r7,#0x80
                                   4187 ;	calc.c:50: return;
      001526                       4188 00343$:
                                   4189 ;	calc.c:48: for (; *s; s++) putchar(*s);
      001526 8D 82            [24] 4190 	mov	dpl,r5
      001528 8E 83            [24] 4191 	mov	dph,r6
      00152A 8F F0            [24] 4192 	mov	b,r7
      00152C 12r00r00         [24] 4193 	lcall	__gptrget
      00152F FC               [12] 4194 	mov	r4,a
      001530 70 03            [24] 4195 	jnz	00924$
      001532 02r18r06         [24] 4196 	ljmp	00188$
      001535                       4197 00924$:
      001535 7B 00            [12] 4198 	mov	r3,#0x00
      001537 8C 82            [24] 4199 	mov	dpl,r4
      001539 8B 83            [24] 4200 	mov	dph,r3
      00153B 12r00r00         [24] 4201 	lcall	_putchar
      00153E 0D               [12] 4202 	inc	r5
                                   4203 ;	calc.c:246: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      00153F BD 00 E4         [24] 4204 	cjne	r5,#0x00,00343$
      001542 0E               [12] 4205 	inc	r6
      001543 80 E1            [24] 4206 	sjmp	00343$
      001545                       4207 00174$:
                                   4208 ;	calc.c:247: else if (!stack_pop(&ctx->s, &d1)) {
      001545 E5*00            [12] 4209 	mov	a,_bp
      001547 24 0B            [12] 4210 	add	a,#0x0b
      001549 FF               [12] 4211 	mov	r7,a
      00154A 7E 00            [12] 4212 	mov	r6,#0x00
      00154C 7D 40            [12] 4213 	mov	r5,#0x40
      00154E E5*00            [12] 4214 	mov	a,_bp
      001550 24 04            [12] 4215 	add	a,#0x04
      001552 F8               [12] 4216 	mov	r0,a
      001553 74 09            [12] 4217 	mov	a,#0x09
      001555 26               [12] 4218 	add	a,@r0
      001556 FA               [12] 4219 	mov	r2,a
      001557 E4               [12] 4220 	clr	a
      001558 08               [12] 4221 	inc	r0
      001559 36               [12] 4222 	addc	a,@r0
      00155A FB               [12] 4223 	mov	r3,a
      00155B 08               [12] 4224 	inc	r0
      00155C 86 04            [24] 4225 	mov	ar4,@r0
      00155E C0 07            [24] 4226 	push	ar7
      001560 C0 06            [24] 4227 	push	ar6
      001562 C0 05            [24] 4228 	push	ar5
      001564 8A 82            [24] 4229 	mov	dpl,r2
      001566 8B 83            [24] 4230 	mov	dph,r3
      001568 8C F0            [24] 4231 	mov	b,r4
      00156A 12r00r00         [24] 4232 	lcall	_stack_pop
      00156D AE 82            [24] 4233 	mov	r6,dpl
      00156F AF 83            [24] 4234 	mov	r7,dph
      001571 15 81            [12] 4235 	dec	sp
      001573 15 81            [12] 4236 	dec	sp
      001575 15 81            [12] 4237 	dec	sp
      001577 EE               [12] 4238 	mov	a,r6
      001578 4F               [12] 4239 	orl	a,r7
      001579 70 58            [24] 4240 	jnz	00171$
                                   4241 ;	calc.c:248: (void)stack_push(&ctx->s, d0);
      00157B E5*00            [12] 4242 	mov	a,_bp
      00157D 24 04            [12] 4243 	add	a,#0x04
      00157F F8               [12] 4244 	mov	r0,a
      001580 74 09            [12] 4245 	mov	a,#0x09
      001582 26               [12] 4246 	add	a,@r0
      001583 FD               [12] 4247 	mov	r5,a
      001584 E4               [12] 4248 	clr	a
      001585 08               [12] 4249 	inc	r0
      001586 36               [12] 4250 	addc	a,@r0
      001587 FE               [12] 4251 	mov	r6,a
      001588 08               [12] 4252 	inc	r0
      001589 86 07            [24] 4253 	mov	ar7,@r0
      00158B E5*00            [12] 4254 	mov	a,_bp
      00158D 24 07            [12] 4255 	add	a,#0x07
      00158F F8               [12] 4256 	mov	r0,a
      001590 E6               [12] 4257 	mov	a,@r0
      001591 C0 E0            [24] 4258 	push	acc
      001593 08               [12] 4259 	inc	r0
      001594 E6               [12] 4260 	mov	a,@r0
      001595 C0 E0            [24] 4261 	push	acc
      001597 08               [12] 4262 	inc	r0
      001598 E6               [12] 4263 	mov	a,@r0
      001599 C0 E0            [24] 4264 	push	acc
      00159B 08               [12] 4265 	inc	r0
      00159C E6               [12] 4266 	mov	a,@r0
      00159D C0 E0            [24] 4267 	push	acc
      00159F 8D 82            [24] 4268 	mov	dpl,r5
      0015A1 8E 83            [24] 4269 	mov	dph,r6
      0015A3 8F F0            [24] 4270 	mov	b,r7
      0015A5 12r00r00         [24] 4271 	lcall	_stack_push
      0015A8 E5 81            [12] 4272 	mov	a,sp
      0015AA 24 FC            [12] 4273 	add	a,#0xfc
      0015AC F5 81            [12] 4274 	mov	sp,a
                                   4275 ;	calc.c:249: printstr("\r\nstack underflow\r\n");
      0015AE 7Dr37            [12] 4276 	mov	r5,#___str_7
      0015B0 7Es00            [12] 4277 	mov	r6,#(___str_7 >> 8)
      0015B2 7F 80            [12] 4278 	mov	r7,#0x80
                                   4279 ;	calc.c:50: return;
      0015B4                       4280 00346$:
                                   4281 ;	calc.c:48: for (; *s; s++) putchar(*s);
      0015B4 8D 82            [24] 4282 	mov	dpl,r5
      0015B6 8E 83            [24] 4283 	mov	dph,r6
      0015B8 8F F0            [24] 4284 	mov	b,r7
      0015BA 12r00r00         [24] 4285 	lcall	__gptrget
      0015BD FC               [12] 4286 	mov	r4,a
      0015BE 70 03            [24] 4287 	jnz	00927$
      0015C0 02r18r06         [24] 4288 	ljmp	00188$
      0015C3                       4289 00927$:
      0015C3 7B 00            [12] 4290 	mov	r3,#0x00
      0015C5 8C 82            [24] 4291 	mov	dpl,r4
      0015C7 8B 83            [24] 4292 	mov	dph,r3
      0015C9 12r00r00         [24] 4293 	lcall	_putchar
      0015CC 0D               [12] 4294 	inc	r5
                                   4295 ;	calc.c:249: printstr("\r\nstack underflow\r\n");
      0015CD BD 00 E4         [24] 4296 	cjne	r5,#0x00,00346$
      0015D0 0E               [12] 4297 	inc	r6
      0015D1 80 E1            [24] 4298 	sjmp	00346$
      0015D3                       4299 00171$:
                                   4300 ;	calc.c:251: d1 |= d0;
      0015D3 E5*00            [12] 4301 	mov	a,_bp
      0015D5 24 0B            [12] 4302 	add	a,#0x0b
      0015D7 F8               [12] 4303 	mov	r0,a
      0015D8 E5*00            [12] 4304 	mov	a,_bp
      0015DA 24 07            [12] 4305 	add	a,#0x07
      0015DC F9               [12] 4306 	mov	r1,a
      0015DD E7               [12] 4307 	mov	a,@r1
      0015DE 46               [12] 4308 	orl	a,@r0
      0015DF F6               [12] 4309 	mov	@r0,a
      0015E0 09               [12] 4310 	inc	r1
      0015E1 E7               [12] 4311 	mov	a,@r1
      0015E2 08               [12] 4312 	inc	r0
      0015E3 46               [12] 4313 	orl	a,@r0
      0015E4 F6               [12] 4314 	mov	@r0,a
      0015E5 09               [12] 4315 	inc	r1
      0015E6 E7               [12] 4316 	mov	a,@r1
      0015E7 08               [12] 4317 	inc	r0
      0015E8 46               [12] 4318 	orl	a,@r0
      0015E9 F6               [12] 4319 	mov	@r0,a
      0015EA 09               [12] 4320 	inc	r1
      0015EB E7               [12] 4321 	mov	a,@r1
      0015EC 08               [12] 4322 	inc	r0
      0015ED 46               [12] 4323 	orl	a,@r0
      0015EE F6               [12] 4324 	mov	@r0,a
                                   4325 ;	calc.c:252: (void)stack_push(&ctx->s, d1);
      0015EF E5*00            [12] 4326 	mov	a,_bp
      0015F1 24 04            [12] 4327 	add	a,#0x04
      0015F3 F8               [12] 4328 	mov	r0,a
      0015F4 74 09            [12] 4329 	mov	a,#0x09
      0015F6 26               [12] 4330 	add	a,@r0
      0015F7 FD               [12] 4331 	mov	r5,a
      0015F8 E4               [12] 4332 	clr	a
      0015F9 08               [12] 4333 	inc	r0
      0015FA 36               [12] 4334 	addc	a,@r0
      0015FB FE               [12] 4335 	mov	r6,a
      0015FC 08               [12] 4336 	inc	r0
      0015FD 86 07            [24] 4337 	mov	ar7,@r0
      0015FF E5*00            [12] 4338 	mov	a,_bp
      001601 24 0B            [12] 4339 	add	a,#0x0b
      001603 F8               [12] 4340 	mov	r0,a
      001604 E6               [12] 4341 	mov	a,@r0
      001605 C0 E0            [24] 4342 	push	acc
      001607 08               [12] 4343 	inc	r0
      001608 E6               [12] 4344 	mov	a,@r0
      001609 C0 E0            [24] 4345 	push	acc
      00160B 08               [12] 4346 	inc	r0
      00160C E6               [12] 4347 	mov	a,@r0
      00160D C0 E0            [24] 4348 	push	acc
      00160F 08               [12] 4349 	inc	r0
      001610 E6               [12] 4350 	mov	a,@r0
      001611 C0 E0            [24] 4351 	push	acc
      001613 8D 82            [24] 4352 	mov	dpl,r5
      001615 8E 83            [24] 4353 	mov	dph,r6
      001617 8F F0            [24] 4354 	mov	b,r7
      001619 12r00r00         [24] 4355 	lcall	_stack_push
      00161C E5 81            [12] 4356 	mov	a,sp
      00161E 24 FC            [12] 4357 	add	a,#0xfc
      001620 F5 81            [12] 4358 	mov	sp,a
                                   4359 ;	calc.c:254: break;
      001622 02r18r06         [24] 4360 	ljmp	00188$
                                   4361 ;	calc.c:255: case '^':
      001625                       4362 00176$:
                                   4363 ;	calc.c:256: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      001625 E5*00            [12] 4364 	mov	a,_bp
      001627 24 07            [12] 4365 	add	a,#0x07
      001629 FF               [12] 4366 	mov	r7,a
      00162A 7E 00            [12] 4367 	mov	r6,#0x00
      00162C 7D 40            [12] 4368 	mov	r5,#0x40
      00162E E5*00            [12] 4369 	mov	a,_bp
      001630 24 04            [12] 4370 	add	a,#0x04
      001632 F8               [12] 4371 	mov	r0,a
      001633 74 09            [12] 4372 	mov	a,#0x09
      001635 26               [12] 4373 	add	a,@r0
      001636 FA               [12] 4374 	mov	r2,a
      001637 E4               [12] 4375 	clr	a
      001638 08               [12] 4376 	inc	r0
      001639 36               [12] 4377 	addc	a,@r0
      00163A FB               [12] 4378 	mov	r3,a
      00163B 08               [12] 4379 	inc	r0
      00163C 86 04            [24] 4380 	mov	ar4,@r0
      00163E C0 07            [24] 4381 	push	ar7
      001640 C0 06            [24] 4382 	push	ar6
      001642 C0 05            [24] 4383 	push	ar5
      001644 8A 82            [24] 4384 	mov	dpl,r2
      001646 8B 83            [24] 4385 	mov	dph,r3
      001648 8C F0            [24] 4386 	mov	b,r4
      00164A 12r00r00         [24] 4387 	lcall	_stack_pop
      00164D AE 82            [24] 4388 	mov	r6,dpl
      00164F AF 83            [24] 4389 	mov	r7,dph
      001651 15 81            [12] 4390 	dec	sp
      001653 15 81            [12] 4391 	dec	sp
      001655 15 81            [12] 4392 	dec	sp
      001657 EE               [12] 4393 	mov	a,r6
      001658 4F               [12] 4394 	orl	a,r7
      001659 70 25            [24] 4395 	jnz	00181$
      00165B 7Dr37            [12] 4396 	mov	r5,#___str_7
      00165D 7Es00            [12] 4397 	mov	r6,#(___str_7 >> 8)
      00165F 7F 80            [12] 4398 	mov	r7,#0x80
                                   4399 ;	calc.c:50: return;
      001661                       4400 00349$:
                                   4401 ;	calc.c:48: for (; *s; s++) putchar(*s);
      001661 8D 82            [24] 4402 	mov	dpl,r5
      001663 8E 83            [24] 4403 	mov	dph,r6
      001665 8F F0            [24] 4404 	mov	b,r7
      001667 12r00r00         [24] 4405 	lcall	__gptrget
      00166A FC               [12] 4406 	mov	r4,a
      00166B 70 03            [24] 4407 	jnz	00930$
      00166D 02r18r06         [24] 4408 	ljmp	00188$
      001670                       4409 00930$:
      001670 7B 00            [12] 4410 	mov	r3,#0x00
      001672 8C 82            [24] 4411 	mov	dpl,r4
      001674 8B 83            [24] 4412 	mov	dph,r3
      001676 12r00r00         [24] 4413 	lcall	_putchar
      001679 0D               [12] 4414 	inc	r5
                                   4415 ;	calc.c:256: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      00167A BD 00 E4         [24] 4416 	cjne	r5,#0x00,00349$
      00167D 0E               [12] 4417 	inc	r6
      00167E 80 E1            [24] 4418 	sjmp	00349$
      001680                       4419 00181$:
                                   4420 ;	calc.c:257: else if (!stack_pop(&ctx->s, &d1)) {
      001680 E5*00            [12] 4421 	mov	a,_bp
      001682 24 0B            [12] 4422 	add	a,#0x0b
      001684 FF               [12] 4423 	mov	r7,a
      001685 7E 00            [12] 4424 	mov	r6,#0x00
      001687 7D 40            [12] 4425 	mov	r5,#0x40
      001689 E5*00            [12] 4426 	mov	a,_bp
      00168B 24 04            [12] 4427 	add	a,#0x04
      00168D F8               [12] 4428 	mov	r0,a
      00168E 74 09            [12] 4429 	mov	a,#0x09
      001690 26               [12] 4430 	add	a,@r0
      001691 FA               [12] 4431 	mov	r2,a
      001692 E4               [12] 4432 	clr	a
      001693 08               [12] 4433 	inc	r0
      001694 36               [12] 4434 	addc	a,@r0
      001695 FB               [12] 4435 	mov	r3,a
      001696 08               [12] 4436 	inc	r0
      001697 86 04            [24] 4437 	mov	ar4,@r0
      001699 C0 07            [24] 4438 	push	ar7
      00169B C0 06            [24] 4439 	push	ar6
      00169D C0 05            [24] 4440 	push	ar5
      00169F 8A 82            [24] 4441 	mov	dpl,r2
      0016A1 8B 83            [24] 4442 	mov	dph,r3
      0016A3 8C F0            [24] 4443 	mov	b,r4
      0016A5 12r00r00         [24] 4444 	lcall	_stack_pop
      0016A8 AE 82            [24] 4445 	mov	r6,dpl
      0016AA AF 83            [24] 4446 	mov	r7,dph
      0016AC 15 81            [12] 4447 	dec	sp
      0016AE 15 81            [12] 4448 	dec	sp
      0016B0 15 81            [12] 4449 	dec	sp
      0016B2 EE               [12] 4450 	mov	a,r6
      0016B3 4F               [12] 4451 	orl	a,r7
      0016B4 70 58            [24] 4452 	jnz	00178$
                                   4453 ;	calc.c:258: (void)stack_push(&ctx->s, d0);
      0016B6 E5*00            [12] 4454 	mov	a,_bp
      0016B8 24 04            [12] 4455 	add	a,#0x04
      0016BA F8               [12] 4456 	mov	r0,a
      0016BB 74 09            [12] 4457 	mov	a,#0x09
      0016BD 26               [12] 4458 	add	a,@r0
      0016BE FD               [12] 4459 	mov	r5,a
      0016BF E4               [12] 4460 	clr	a
      0016C0 08               [12] 4461 	inc	r0
      0016C1 36               [12] 4462 	addc	a,@r0
      0016C2 FE               [12] 4463 	mov	r6,a
      0016C3 08               [12] 4464 	inc	r0
      0016C4 86 07            [24] 4465 	mov	ar7,@r0
      0016C6 E5*00            [12] 4466 	mov	a,_bp
      0016C8 24 07            [12] 4467 	add	a,#0x07
      0016CA F8               [12] 4468 	mov	r0,a
      0016CB E6               [12] 4469 	mov	a,@r0
      0016CC C0 E0            [24] 4470 	push	acc
      0016CE 08               [12] 4471 	inc	r0
      0016CF E6               [12] 4472 	mov	a,@r0
      0016D0 C0 E0            [24] 4473 	push	acc
      0016D2 08               [12] 4474 	inc	r0
      0016D3 E6               [12] 4475 	mov	a,@r0
      0016D4 C0 E0            [24] 4476 	push	acc
      0016D6 08               [12] 4477 	inc	r0
      0016D7 E6               [12] 4478 	mov	a,@r0
      0016D8 C0 E0            [24] 4479 	push	acc
      0016DA 8D 82            [24] 4480 	mov	dpl,r5
      0016DC 8E 83            [24] 4481 	mov	dph,r6
      0016DE 8F F0            [24] 4482 	mov	b,r7
      0016E0 12r00r00         [24] 4483 	lcall	_stack_push
      0016E3 E5 81            [12] 4484 	mov	a,sp
      0016E5 24 FC            [12] 4485 	add	a,#0xfc
      0016E7 F5 81            [12] 4486 	mov	sp,a
                                   4487 ;	calc.c:259: printstr("\r\nstack underflow\r\n");
      0016E9 7Dr37            [12] 4488 	mov	r5,#___str_7
      0016EB 7Es00            [12] 4489 	mov	r6,#(___str_7 >> 8)
      0016ED 7F 80            [12] 4490 	mov	r7,#0x80
                                   4491 ;	calc.c:50: return;
      0016EF                       4492 00352$:
                                   4493 ;	calc.c:48: for (; *s; s++) putchar(*s);
      0016EF 8D 82            [24] 4494 	mov	dpl,r5
      0016F1 8E 83            [24] 4495 	mov	dph,r6
      0016F3 8F F0            [24] 4496 	mov	b,r7
      0016F5 12r00r00         [24] 4497 	lcall	__gptrget
      0016F8 FC               [12] 4498 	mov	r4,a
      0016F9 70 03            [24] 4499 	jnz	00933$
      0016FB 02r18r06         [24] 4500 	ljmp	00188$
      0016FE                       4501 00933$:
      0016FE 7B 00            [12] 4502 	mov	r3,#0x00
      001700 8C 82            [24] 4503 	mov	dpl,r4
      001702 8B 83            [24] 4504 	mov	dph,r3
      001704 12r00r00         [24] 4505 	lcall	_putchar
      001707 0D               [12] 4506 	inc	r5
                                   4507 ;	calc.c:259: printstr("\r\nstack underflow\r\n");
      001708 BD 00 E4         [24] 4508 	cjne	r5,#0x00,00352$
      00170B 0E               [12] 4509 	inc	r6
      00170C 80 E1            [24] 4510 	sjmp	00352$
      00170E                       4511 00178$:
                                   4512 ;	calc.c:261: d1 ^= d0;
      00170E E5*00            [12] 4513 	mov	a,_bp
      001710 24 0B            [12] 4514 	add	a,#0x0b
      001712 F8               [12] 4515 	mov	r0,a
      001713 E5*00            [12] 4516 	mov	a,_bp
      001715 24 07            [12] 4517 	add	a,#0x07
      001717 F9               [12] 4518 	mov	r1,a
      001718 E7               [12] 4519 	mov	a,@r1
      001719 66               [12] 4520 	xrl	a,@r0
      00171A F6               [12] 4521 	mov	@r0,a
      00171B 09               [12] 4522 	inc	r1
      00171C E7               [12] 4523 	mov	a,@r1
      00171D 08               [12] 4524 	inc	r0
      00171E 66               [12] 4525 	xrl	a,@r0
      00171F F6               [12] 4526 	mov	@r0,a
      001720 09               [12] 4527 	inc	r1
      001721 E7               [12] 4528 	mov	a,@r1
      001722 08               [12] 4529 	inc	r0
      001723 66               [12] 4530 	xrl	a,@r0
      001724 F6               [12] 4531 	mov	@r0,a
      001725 09               [12] 4532 	inc	r1
      001726 E7               [12] 4533 	mov	a,@r1
      001727 08               [12] 4534 	inc	r0
      001728 66               [12] 4535 	xrl	a,@r0
      001729 F6               [12] 4536 	mov	@r0,a
                                   4537 ;	calc.c:262: (void)stack_push(&ctx->s, d1);
      00172A E5*00            [12] 4538 	mov	a,_bp
      00172C 24 04            [12] 4539 	add	a,#0x04
      00172E F8               [12] 4540 	mov	r0,a
      00172F 74 09            [12] 4541 	mov	a,#0x09
      001731 26               [12] 4542 	add	a,@r0
      001732 FD               [12] 4543 	mov	r5,a
      001733 E4               [12] 4544 	clr	a
      001734 08               [12] 4545 	inc	r0
      001735 36               [12] 4546 	addc	a,@r0
      001736 FE               [12] 4547 	mov	r6,a
      001737 08               [12] 4548 	inc	r0
      001738 86 07            [24] 4549 	mov	ar7,@r0
      00173A E5*00            [12] 4550 	mov	a,_bp
      00173C 24 0B            [12] 4551 	add	a,#0x0b
      00173E F8               [12] 4552 	mov	r0,a
      00173F E6               [12] 4553 	mov	a,@r0
      001740 C0 E0            [24] 4554 	push	acc
      001742 08               [12] 4555 	inc	r0
      001743 E6               [12] 4556 	mov	a,@r0
      001744 C0 E0            [24] 4557 	push	acc
      001746 08               [12] 4558 	inc	r0
      001747 E6               [12] 4559 	mov	a,@r0
      001748 C0 E0            [24] 4560 	push	acc
      00174A 08               [12] 4561 	inc	r0
      00174B E6               [12] 4562 	mov	a,@r0
      00174C C0 E0            [24] 4563 	push	acc
      00174E 8D 82            [24] 4564 	mov	dpl,r5
      001750 8E 83            [24] 4565 	mov	dph,r6
      001752 8F F0            [24] 4566 	mov	b,r7
      001754 12r00r00         [24] 4567 	lcall	_stack_push
      001757 E5 81            [12] 4568 	mov	a,sp
      001759 24 FC            [12] 4569 	add	a,#0xfc
      00175B F5 81            [12] 4570 	mov	sp,a
                                   4571 ;	calc.c:264: break;
      00175D 02r18r06         [24] 4572 	ljmp	00188$
                                   4573 ;	calc.c:265: case '~':
      001760                       4574 00183$:
                                   4575 ;	calc.c:266: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      001760 E5*00            [12] 4576 	mov	a,_bp
      001762 24 07            [12] 4577 	add	a,#0x07
      001764 FF               [12] 4578 	mov	r7,a
      001765 7E 00            [12] 4579 	mov	r6,#0x00
      001767 7D 40            [12] 4580 	mov	r5,#0x40
      001769 E5*00            [12] 4581 	mov	a,_bp
      00176B 24 04            [12] 4582 	add	a,#0x04
      00176D F8               [12] 4583 	mov	r0,a
      00176E 74 09            [12] 4584 	mov	a,#0x09
      001770 26               [12] 4585 	add	a,@r0
      001771 FA               [12] 4586 	mov	r2,a
      001772 E4               [12] 4587 	clr	a
      001773 08               [12] 4588 	inc	r0
      001774 36               [12] 4589 	addc	a,@r0
      001775 FB               [12] 4590 	mov	r3,a
      001776 08               [12] 4591 	inc	r0
      001777 86 04            [24] 4592 	mov	ar4,@r0
      001779 C0 07            [24] 4593 	push	ar7
      00177B C0 06            [24] 4594 	push	ar6
      00177D C0 05            [24] 4595 	push	ar5
      00177F 8A 82            [24] 4596 	mov	dpl,r2
      001781 8B 83            [24] 4597 	mov	dph,r3
      001783 8C F0            [24] 4598 	mov	b,r4
      001785 12r00r00         [24] 4599 	lcall	_stack_pop
      001788 AE 82            [24] 4600 	mov	r6,dpl
      00178A AF 83            [24] 4601 	mov	r7,dph
      00178C 15 81            [12] 4602 	dec	sp
      00178E 15 81            [12] 4603 	dec	sp
      001790 15 81            [12] 4604 	dec	sp
      001792 EE               [12] 4605 	mov	a,r6
      001793 4F               [12] 4606 	orl	a,r7
      001794 70 22            [24] 4607 	jnz	00185$
      001796 7Dr37            [12] 4608 	mov	r5,#___str_7
      001798 7Es00            [12] 4609 	mov	r6,#(___str_7 >> 8)
      00179A 7F 80            [12] 4610 	mov	r7,#0x80
                                   4611 ;	calc.c:50: return;
      00179C                       4612 00355$:
                                   4613 ;	calc.c:48: for (; *s; s++) putchar(*s);
      00179C 8D 82            [24] 4614 	mov	dpl,r5
      00179E 8E 83            [24] 4615 	mov	dph,r6
      0017A0 8F F0            [24] 4616 	mov	b,r7
      0017A2 12r00r00         [24] 4617 	lcall	__gptrget
      0017A5 FC               [12] 4618 	mov	r4,a
      0017A6 60 5E            [24] 4619 	jz	00188$
      0017A8 7B 00            [12] 4620 	mov	r3,#0x00
      0017AA 8C 82            [24] 4621 	mov	dpl,r4
      0017AC 8B 83            [24] 4622 	mov	dph,r3
      0017AE 12r00r00         [24] 4623 	lcall	_putchar
      0017B1 0D               [12] 4624 	inc	r5
                                   4625 ;	calc.c:266: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      0017B2 BD 00 E7         [24] 4626 	cjne	r5,#0x00,00355$
      0017B5 0E               [12] 4627 	inc	r6
      0017B6 80 E4            [24] 4628 	sjmp	00355$
      0017B8                       4629 00185$:
                                   4630 ;	calc.c:268: d0 = ~d0;
      0017B8 E5*00            [12] 4631 	mov	a,_bp
      0017BA 24 07            [12] 4632 	add	a,#0x07
      0017BC F8               [12] 4633 	mov	r0,a
      0017BD E6               [12] 4634 	mov	a,@r0
      0017BE F4               [12] 4635 	cpl	a
      0017BF F6               [12] 4636 	mov	@r0,a
      0017C0 08               [12] 4637 	inc	r0
      0017C1 E6               [12] 4638 	mov	a,@r0
      0017C2 F4               [12] 4639 	cpl	a
      0017C3 F6               [12] 4640 	mov	@r0,a
      0017C4 08               [12] 4641 	inc	r0
      0017C5 E6               [12] 4642 	mov	a,@r0
      0017C6 F4               [12] 4643 	cpl	a
      0017C7 F6               [12] 4644 	mov	@r0,a
      0017C8 08               [12] 4645 	inc	r0
      0017C9 E6               [12] 4646 	mov	a,@r0
      0017CA F4               [12] 4647 	cpl	a
      0017CB F6               [12] 4648 	mov	@r0,a
                                   4649 ;	calc.c:269: (void)stack_push(&ctx->s, d0);
      0017CC E5*00            [12] 4650 	mov	a,_bp
      0017CE 24 04            [12] 4651 	add	a,#0x04
      0017D0 F8               [12] 4652 	mov	r0,a
      0017D1 74 09            [12] 4653 	mov	a,#0x09
      0017D3 26               [12] 4654 	add	a,@r0
      0017D4 FD               [12] 4655 	mov	r5,a
      0017D5 E4               [12] 4656 	clr	a
      0017D6 08               [12] 4657 	inc	r0
      0017D7 36               [12] 4658 	addc	a,@r0
      0017D8 FE               [12] 4659 	mov	r6,a
      0017D9 08               [12] 4660 	inc	r0
      0017DA 86 07            [24] 4661 	mov	ar7,@r0
      0017DC E5*00            [12] 4662 	mov	a,_bp
      0017DE 24 07            [12] 4663 	add	a,#0x07
      0017E0 F8               [12] 4664 	mov	r0,a
      0017E1 E6               [12] 4665 	mov	a,@r0
      0017E2 C0 E0            [24] 4666 	push	acc
      0017E4 08               [12] 4667 	inc	r0
      0017E5 E6               [12] 4668 	mov	a,@r0
      0017E6 C0 E0            [24] 4669 	push	acc
      0017E8 08               [12] 4670 	inc	r0
      0017E9 E6               [12] 4671 	mov	a,@r0
      0017EA C0 E0            [24] 4672 	push	acc
      0017EC 08               [12] 4673 	inc	r0
      0017ED E6               [12] 4674 	mov	a,@r0
      0017EE C0 E0            [24] 4675 	push	acc
      0017F0 8D 82            [24] 4676 	mov	dpl,r5
      0017F2 8E 83            [24] 4677 	mov	dph,r6
      0017F4 8F F0            [24] 4678 	mov	b,r7
      0017F6 12r00r00         [24] 4679 	lcall	_stack_push
      0017F9 E5 81            [12] 4680 	mov	a,sp
      0017FB 24 FC            [12] 4681 	add	a,#0xfc
      0017FD F5 81            [12] 4682 	mov	sp,a
                                   4683 ;	calc.c:271: break;
                                   4684 ;	calc.c:272: default:
      0017FF 80 05            [24] 4685 	sjmp	00188$
      001801                       4686 00187$:
                                   4687 ;	calc.c:273: return UNDEF;
      001801 90 80 00         [24] 4688 	mov	dptr,#0x8000
                                   4689 ;	calc.c:274: }
      001804 80 03            [24] 4690 	sjmp	00357$
      001806                       4691 00188$:
                                   4692 ;	calc.c:276: return 1;
      001806 90 00 01         [24] 4693 	mov	dptr,#0x0001
      001809                       4694 00357$:
                                   4695 ;	calc.c:277: }
      001809 85*00 81         [24] 4696 	mov	sp,_bp
      00180C D0*00            [24] 4697 	pop	_bp
      00180E 22               [24] 4698 	ret
                                   4699 ;------------------------------------------------------------
                                   4700 ;Allocation info for local variables in function 'push_acc'
                                   4701 ;------------------------------------------------------------
                                   4702 ;delta                     Allocated to stack - _bp -5
                                   4703 ;_ctx                      Allocated to stack - _bp +5
                                   4704 ;ctx                       Allocated to registers r2 r3 r4 
                                   4705 ;__1310720085              Allocated to registers 
                                   4706 ;s                         Allocated to registers r5 r6 r7 
                                   4707 ;sloc0                     Allocated to stack - _bp +1
                                   4708 ;------------------------------------------------------------
                                   4709 ;	calc.c:279: static int push_acc(void *_ctx, delta_t *delta) __reentrant {
                                   4710 ;	-----------------------------------------
                                   4711 ;	 function push_acc
                                   4712 ;	-----------------------------------------
      00180F                       4713 _push_acc:
      00180F C0*00            [24] 4714 	push	_bp
      001811 E5 81            [12] 4715 	mov	a,sp
      001813 F5*00            [12] 4716 	mov	_bp,a
      001815 24 07            [12] 4717 	add	a,#0x07
      001817 F5 81            [12] 4718 	mov	sp,a
      001819 C8               [12] 4719 	xch	a,r0
      00181A E5*00            [12] 4720 	mov	a,_bp
      00181C 24 05            [12] 4721 	add	a,#0x05
      00181E C8               [12] 4722 	xch	a,r0
      00181F A6 82            [24] 4723 	mov	@r0,dpl
      001821 08               [12] 4724 	inc	r0
      001822 A6 83            [24] 4725 	mov	@r0,dph
      001824 08               [12] 4726 	inc	r0
      001825 A6 F0            [24] 4727 	mov	@r0,b
                                   4728 ;	calc.c:280: struct ctx *ctx = (struct ctx *)_ctx;
      001827 E5*00            [12] 4729 	mov	a,_bp
      001829 24 05            [12] 4730 	add	a,#0x05
      00182B F8               [12] 4731 	mov	r0,a
      00182C 86 02            [24] 4732 	mov	ar2,@r0
      00182E 08               [12] 4733 	inc	r0
      00182F 86 03            [24] 4734 	mov	ar3,@r0
      001831 08               [12] 4735 	inc	r0
      001832 86 04            [24] 4736 	mov	ar4,@r0
                                   4737 ;	calc.c:284: ctx->acc_valid = 0;
      001834 74 06            [12] 4738 	mov	a,#0x06
      001836 2A               [12] 4739 	add	a,r2
      001837 FD               [12] 4740 	mov	r5,a
      001838 E4               [12] 4741 	clr	a
      001839 3B               [12] 4742 	addc	a,r3
      00183A FE               [12] 4743 	mov	r6,a
      00183B 8C 07            [24] 4744 	mov	ar7,r4
      00183D 8D 82            [24] 4745 	mov	dpl,r5
      00183F 8E 83            [24] 4746 	mov	dph,r6
      001841 8F F0            [24] 4747 	mov	b,r7
      001843 E4               [12] 4748 	clr	a
      001844 12r00r00         [24] 4749 	lcall	__gptrput
                                   4750 ;	calc.c:285: if (!stack_push(&ctx->s, ctx->acc)) printstr("\r\nstack overflow\r\n");
      001847 74 02            [12] 4751 	mov	a,#0x02
      001849 2A               [12] 4752 	add	a,r2
      00184A FF               [12] 4753 	mov	r7,a
      00184B E4               [12] 4754 	clr	a
      00184C 3B               [12] 4755 	addc	a,r3
      00184D FD               [12] 4756 	mov	r5,a
      00184E 8C 06            [24] 4757 	mov	ar6,r4
      001850 8F 82            [24] 4758 	mov	dpl,r7
      001852 8D 83            [24] 4759 	mov	dph,r5
      001854 8E F0            [24] 4760 	mov	b,r6
      001856 A8*00            [24] 4761 	mov	r0,_bp
      001858 08               [12] 4762 	inc	r0
      001859 12r00r00         [24] 4763 	lcall	__gptrget
      00185C F6               [12] 4764 	mov	@r0,a
      00185D A3               [24] 4765 	inc	dptr
      00185E 12r00r00         [24] 4766 	lcall	__gptrget
      001861 08               [12] 4767 	inc	r0
      001862 F6               [12] 4768 	mov	@r0,a
      001863 A3               [24] 4769 	inc	dptr
      001864 12r00r00         [24] 4770 	lcall	__gptrget
      001867 08               [12] 4771 	inc	r0
      001868 F6               [12] 4772 	mov	@r0,a
      001869 A3               [24] 4773 	inc	dptr
      00186A 12r00r00         [24] 4774 	lcall	__gptrget
      00186D 08               [12] 4775 	inc	r0
      00186E F6               [12] 4776 	mov	@r0,a
      00186F 74 09            [12] 4777 	mov	a,#0x09
      001871 2A               [12] 4778 	add	a,r2
      001872 FA               [12] 4779 	mov	r2,a
      001873 E4               [12] 4780 	clr	a
      001874 3B               [12] 4781 	addc	a,r3
      001875 FB               [12] 4782 	mov	r3,a
      001876 8C 07            [24] 4783 	mov	ar7,r4
      001878 A8*00            [24] 4784 	mov	r0,_bp
      00187A 08               [12] 4785 	inc	r0
      00187B E6               [12] 4786 	mov	a,@r0
      00187C C0 E0            [24] 4787 	push	acc
      00187E 08               [12] 4788 	inc	r0
      00187F E6               [12] 4789 	mov	a,@r0
      001880 C0 E0            [24] 4790 	push	acc
      001882 08               [12] 4791 	inc	r0
      001883 E6               [12] 4792 	mov	a,@r0
      001884 C0 E0            [24] 4793 	push	acc
      001886 08               [12] 4794 	inc	r0
      001887 E6               [12] 4795 	mov	a,@r0
      001888 C0 E0            [24] 4796 	push	acc
      00188A 8A 82            [24] 4797 	mov	dpl,r2
      00188C 8B 83            [24] 4798 	mov	dph,r3
      00188E 8F F0            [24] 4799 	mov	b,r7
      001890 12r00r00         [24] 4800 	lcall	_stack_push
      001893 AE 82            [24] 4801 	mov	r6,dpl
      001895 AF 83            [24] 4802 	mov	r7,dph
      001897 E5 81            [12] 4803 	mov	a,sp
      001899 24 FC            [12] 4804 	add	a,#0xfc
      00189B F5 81            [12] 4805 	mov	sp,a
      00189D EE               [12] 4806 	mov	a,r6
      00189E 4F               [12] 4807 	orl	a,r7
      00189F 70 22            [24] 4808 	jnz	00102$
      0018A1 7Dr60            [12] 4809 	mov	r5,#___str_9
      0018A3 7Es00            [12] 4810 	mov	r6,#(___str_9 >> 8)
      0018A5 7F 80            [12] 4811 	mov	r7,#0x80
                                   4812 ;	calc.c:50: return;
      0018A7                       4813 00109$:
                                   4814 ;	calc.c:48: for (; *s; s++) putchar(*s);
      0018A7 8D 82            [24] 4815 	mov	dpl,r5
      0018A9 8E 83            [24] 4816 	mov	dph,r6
      0018AB 8F F0            [24] 4817 	mov	b,r7
      0018AD 12r00r00         [24] 4818 	lcall	__gptrget
      0018B0 FC               [12] 4819 	mov	r4,a
      0018B1 60 10            [24] 4820 	jz	00102$
      0018B3 7B 00            [12] 4821 	mov	r3,#0x00
      0018B5 8C 82            [24] 4822 	mov	dpl,r4
      0018B7 8B 83            [24] 4823 	mov	dph,r3
      0018B9 12r00r00         [24] 4824 	lcall	_putchar
      0018BC 0D               [12] 4825 	inc	r5
                                   4826 ;	calc.c:285: if (!stack_push(&ctx->s, ctx->acc)) printstr("\r\nstack overflow\r\n");
      0018BD BD 00 E7         [24] 4827 	cjne	r5,#0x00,00109$
      0018C0 0E               [12] 4828 	inc	r6
      0018C1 80 E4            [24] 4829 	sjmp	00109$
      0018C3                       4830 00102$:
                                   4831 ;	calc.c:287: if (delta->event == EVENT_OP) return operator(_ctx, delta);
      0018C3 E5*00            [12] 4832 	mov	a,_bp
      0018C5 24 FB            [12] 4833 	add	a,#0xfb
      0018C7 F8               [12] 4834 	mov	r0,a
      0018C8 86 05            [24] 4835 	mov	ar5,@r0
      0018CA 08               [12] 4836 	inc	r0
      0018CB 86 06            [24] 4837 	mov	ar6,@r0
      0018CD 08               [12] 4838 	inc	r0
      0018CE 86 07            [24] 4839 	mov	ar7,@r0
      0018D0 74 02            [12] 4840 	mov	a,#0x02
      0018D2 2D               [12] 4841 	add	a,r5
      0018D3 FA               [12] 4842 	mov	r2,a
      0018D4 E4               [12] 4843 	clr	a
      0018D5 3E               [12] 4844 	addc	a,r6
      0018D6 FB               [12] 4845 	mov	r3,a
      0018D7 8F 04            [24] 4846 	mov	ar4,r7
      0018D9 8A 82            [24] 4847 	mov	dpl,r2
      0018DB 8B 83            [24] 4848 	mov	dph,r3
      0018DD 8C F0            [24] 4849 	mov	b,r4
      0018DF 12r00r00         [24] 4850 	lcall	__gptrget
      0018E2 FA               [12] 4851 	mov	r2,a
      0018E3 A3               [24] 4852 	inc	dptr
      0018E4 12r00r00         [24] 4853 	lcall	__gptrget
      0018E7 FB               [12] 4854 	mov	r3,a
      0018E8 BA 02 29         [24] 4855 	cjne	r2,#0x02,00104$
      0018EB BB 00 26         [24] 4856 	cjne	r3,#0x00,00104$
      0018EE C0 05            [24] 4857 	push	ar5
      0018F0 C0 06            [24] 4858 	push	ar6
      0018F2 C0 07            [24] 4859 	push	ar7
      0018F4 E5*00            [12] 4860 	mov	a,_bp
      0018F6 24 05            [12] 4861 	add	a,#0x05
      0018F8 F8               [12] 4862 	mov	r0,a
      0018F9 86 82            [24] 4863 	mov	dpl,@r0
      0018FB 08               [12] 4864 	inc	r0
      0018FC 86 83            [24] 4865 	mov	dph,@r0
      0018FE 08               [12] 4866 	inc	r0
      0018FF 86 F0            [24] 4867 	mov	b,@r0
      001901 12r05rFA         [24] 4868 	lcall	_operator
      001904 AE 82            [24] 4869 	mov	r6,dpl
      001906 AF 83            [24] 4870 	mov	r7,dph
      001908 15 81            [12] 4871 	dec	sp
      00190A 15 81            [12] 4872 	dec	sp
      00190C 15 81            [12] 4873 	dec	sp
      00190E 8E 82            [24] 4874 	mov	dpl,r6
      001910 8F 83            [24] 4875 	mov	dph,r7
      001912 80 03            [24] 4876 	sjmp	00111$
      001914                       4877 00104$:
                                   4878 ;	calc.c:288: else return 1;
      001914 90 00 01         [24] 4879 	mov	dptr,#0x0001
      001917                       4880 00111$:
                                   4881 ;	calc.c:289: }
      001917 85*00 81         [24] 4882 	mov	sp,_bp
      00191A D0*00            [24] 4883 	pop	_bp
      00191C 22               [24] 4884 	ret
                                   4885 ;------------------------------------------------------------
                                   4886 ;Allocation info for local variables in function 'reset_acc'
                                   4887 ;------------------------------------------------------------
                                   4888 ;delta                     Allocated to stack - _bp -5
                                   4889 ;_ctx                      Allocated to registers r5 r6 r7 
                                   4890 ;ctx                       Allocated to registers r5 r6 r7 
                                   4891 ;------------------------------------------------------------
                                   4892 ;	calc.c:291: static int reset_acc(void *_ctx, delta_t *delta) __reentrant {
                                   4893 ;	-----------------------------------------
                                   4894 ;	 function reset_acc
                                   4895 ;	-----------------------------------------
      00191D                       4896 _reset_acc:
      00191D C0*00            [24] 4897 	push	_bp
      00191F 85 81*00         [24] 4898 	mov	_bp,sp
      001922 AD 82            [24] 4899 	mov	r5,dpl
      001924 AE 83            [24] 4900 	mov	r6,dph
      001926 AF F0            [24] 4901 	mov	r7,b
                                   4902 ;	calc.c:292: struct ctx *ctx = (struct ctx *)_ctx;
                                   4903 ;	calc.c:294: if (delta->event == EVENT_RSTA_I) ctx->acc_valid = 0;
      001928 E5*00            [12] 4904 	mov	a,_bp
      00192A 24 FB            [12] 4905 	add	a,#0xfb
      00192C F8               [12] 4906 	mov	r0,a
      00192D 86 02            [24] 4907 	mov	ar2,@r0
      00192F 08               [12] 4908 	inc	r0
      001930 86 03            [24] 4909 	mov	ar3,@r0
      001932 08               [12] 4910 	inc	r0
      001933 86 04            [24] 4911 	mov	ar4,@r0
      001935 74 02            [12] 4912 	mov	a,#0x02
      001937 2A               [12] 4913 	add	a,r2
      001938 FA               [12] 4914 	mov	r2,a
      001939 E4               [12] 4915 	clr	a
      00193A 3B               [12] 4916 	addc	a,r3
      00193B FB               [12] 4917 	mov	r3,a
      00193C 8A 82            [24] 4918 	mov	dpl,r2
      00193E 8B 83            [24] 4919 	mov	dph,r3
      001940 8C F0            [24] 4920 	mov	b,r4
      001942 12r00r00         [24] 4921 	lcall	__gptrget
      001945 FA               [12] 4922 	mov	r2,a
      001946 A3               [24] 4923 	inc	dptr
      001947 12r00r00         [24] 4924 	lcall	__gptrget
      00194A FB               [12] 4925 	mov	r3,a
      00194B BA 06 16         [24] 4926 	cjne	r2,#0x06,00102$
      00194E BB 00 13         [24] 4927 	cjne	r3,#0x00,00102$
      001951 74 06            [12] 4928 	mov	a,#0x06
      001953 2D               [12] 4929 	add	a,r5
      001954 FA               [12] 4930 	mov	r2,a
      001955 E4               [12] 4931 	clr	a
      001956 3E               [12] 4932 	addc	a,r6
      001957 FB               [12] 4933 	mov	r3,a
      001958 8F 04            [24] 4934 	mov	ar4,r7
      00195A 8A 82            [24] 4935 	mov	dpl,r2
      00195C 8B 83            [24] 4936 	mov	dph,r3
      00195E 8C F0            [24] 4937 	mov	b,r4
      001960 E4               [12] 4938 	clr	a
      001961 12r00r00         [24] 4939 	lcall	__gptrput
      001964                       4940 00102$:
                                   4941 ;	calc.c:295: ctx->acc = 0l;
      001964 74 02            [12] 4942 	mov	a,#0x02
      001966 2D               [12] 4943 	add	a,r5
      001967 FD               [12] 4944 	mov	r5,a
      001968 E4               [12] 4945 	clr	a
      001969 3E               [12] 4946 	addc	a,r6
      00196A FE               [12] 4947 	mov	r6,a
      00196B 8D 82            [24] 4948 	mov	dpl,r5
      00196D 8E 83            [24] 4949 	mov	dph,r6
      00196F 8F F0            [24] 4950 	mov	b,r7
      001971 E4               [12] 4951 	clr	a
      001972 12r00r00         [24] 4952 	lcall	__gptrput
      001975 A3               [24] 4953 	inc	dptr
      001976 12r00r00         [24] 4954 	lcall	__gptrput
      001979 A3               [24] 4955 	inc	dptr
      00197A 12r00r00         [24] 4956 	lcall	__gptrput
      00197D A3               [24] 4957 	inc	dptr
      00197E 12r00r00         [24] 4958 	lcall	__gptrput
                                   4959 ;	calc.c:297: return 1;
      001981 90 00 01         [24] 4960 	mov	dptr,#0x0001
                                   4961 ;	calc.c:298: }
      001984 D0*00            [24] 4962 	pop	_bp
      001986 22               [24] 4963 	ret
                                   4964 ;------------------------------------------------------------
                                   4965 ;Allocation info for local variables in function 'reset_base'
                                   4966 ;------------------------------------------------------------
                                   4967 ;delta                     Allocated to stack - _bp -5
                                   4968 ;_ctx                      Allocated to registers r5 r6 r7 
                                   4969 ;ctx                       Allocated to registers r5 r6 r7 
                                   4970 ;------------------------------------------------------------
                                   4971 ;	calc.c:300: static int reset_base(void *_ctx, delta_t *delta) __reentrant {
                                   4972 ;	-----------------------------------------
                                   4973 ;	 function reset_base
                                   4974 ;	-----------------------------------------
      001987                       4975 _reset_base:
      001987 C0*00            [24] 4976 	push	_bp
      001989 85 81*00         [24] 4977 	mov	_bp,sp
      00198C AD 82            [24] 4978 	mov	r5,dpl
      00198E AE 83            [24] 4979 	mov	r6,dph
      001990 AF F0            [24] 4980 	mov	r7,b
                                   4981 ;	calc.c:301: struct ctx *ctx = (struct ctx *)_ctx;
                                   4982 ;	calc.c:305: switch (ctx->digit[0]) {
      001992 74 07            [12] 4983 	mov	a,#0x07
      001994 2D               [12] 4984 	add	a,r5
      001995 FA               [12] 4985 	mov	r2,a
      001996 E4               [12] 4986 	clr	a
      001997 3E               [12] 4987 	addc	a,r6
      001998 FB               [12] 4988 	mov	r3,a
      001999 8F 04            [24] 4989 	mov	ar4,r7
      00199B 8A 82            [24] 4990 	mov	dpl,r2
      00199D 8B 83            [24] 4991 	mov	dph,r3
      00199F 8C F0            [24] 4992 	mov	b,r4
      0019A1 12r00r00         [24] 4993 	lcall	__gptrget
      0019A4 FC               [12] 4994 	mov	r4,a
      0019A5 BC 48 02         [24] 4995 	cjne	r4,#0x48,00124$
      0019A8 80 0F            [24] 4996 	sjmp	00101$
      0019AA                       4997 00124$:
      0019AA BC 4F 02         [24] 4998 	cjne	r4,#0x4f,00125$
      0019AD 80 2E            [24] 4999 	sjmp	00103$
      0019AF                       5000 00125$:
      0019AF BC 68 02         [24] 5001 	cjne	r4,#0x68,00126$
      0019B2 80 17            [24] 5002 	sjmp	00102$
      0019B4                       5003 00126$:
                                   5004 ;	calc.c:306: case 'H':
      0019B4 BC 6F 48         [24] 5005 	cjne	r4,#0x6f,00105$
      0019B7 80 36            [24] 5006 	sjmp	00104$
      0019B9                       5007 00101$:
                                   5008 ;	calc.c:307: ctx->base = 16;
      0019B9 8D 82            [24] 5009 	mov	dpl,r5
      0019BB 8E 83            [24] 5010 	mov	dph,r6
      0019BD 8F F0            [24] 5011 	mov	b,r7
      0019BF 74 10            [12] 5012 	mov	a,#0x10
      0019C1 12r00r00         [24] 5013 	lcall	__gptrput
      0019C4 A3               [24] 5014 	inc	dptr
      0019C5 E4               [12] 5015 	clr	a
      0019C6 12r00r00         [24] 5016 	lcall	__gptrput
                                   5017 ;	calc.c:308: break;
                                   5018 ;	calc.c:309: case 'h':
      0019C9 80 34            [24] 5019 	sjmp	00105$
      0019CB                       5020 00102$:
                                   5021 ;	calc.c:310: ctx->base = 10;
      0019CB 8D 82            [24] 5022 	mov	dpl,r5
      0019CD 8E 83            [24] 5023 	mov	dph,r6
      0019CF 8F F0            [24] 5024 	mov	b,r7
      0019D1 74 0A            [12] 5025 	mov	a,#0x0a
      0019D3 12r00r00         [24] 5026 	lcall	__gptrput
      0019D6 A3               [24] 5027 	inc	dptr
      0019D7 E4               [12] 5028 	clr	a
      0019D8 12r00r00         [24] 5029 	lcall	__gptrput
                                   5030 ;	calc.c:311: break;
                                   5031 ;	calc.c:312: case 'O':
      0019DB 80 22            [24] 5032 	sjmp	00105$
      0019DD                       5033 00103$:
                                   5034 ;	calc.c:313: ctx->base = 8;
      0019DD 8D 82            [24] 5035 	mov	dpl,r5
      0019DF 8E 83            [24] 5036 	mov	dph,r6
      0019E1 8F F0            [24] 5037 	mov	b,r7
      0019E3 74 08            [12] 5038 	mov	a,#0x08
      0019E5 12r00r00         [24] 5039 	lcall	__gptrput
      0019E8 A3               [24] 5040 	inc	dptr
      0019E9 E4               [12] 5041 	clr	a
      0019EA 12r00r00         [24] 5042 	lcall	__gptrput
                                   5043 ;	calc.c:314: break;
                                   5044 ;	calc.c:315: case 'o':
      0019ED 80 10            [24] 5045 	sjmp	00105$
      0019EF                       5046 00104$:
                                   5047 ;	calc.c:316: ctx->base = 2;
      0019EF 8D 82            [24] 5048 	mov	dpl,r5
      0019F1 8E 83            [24] 5049 	mov	dph,r6
      0019F3 8F F0            [24] 5050 	mov	b,r7
      0019F5 74 02            [12] 5051 	mov	a,#0x02
      0019F7 12r00r00         [24] 5052 	lcall	__gptrput
      0019FA A3               [24] 5053 	inc	dptr
      0019FB E4               [12] 5054 	clr	a
      0019FC 12r00r00         [24] 5055 	lcall	__gptrput
                                   5056 ;	calc.c:318: }
      0019FF                       5057 00105$:
                                   5058 ;	calc.c:320: return 1;
      0019FF 90 00 01         [24] 5059 	mov	dptr,#0x0001
                                   5060 ;	calc.c:321: }
      001A02 D0*00            [24] 5061 	pop	_bp
      001A04 22               [24] 5062 	ret
                                   5063 ;------------------------------------------------------------
                                   5064 ;Allocation info for local variables in function 'help'
                                   5065 ;------------------------------------------------------------
                                   5066 ;delta                     Allocated to stack - _bp -5
                                   5067 ;_ctx                      Allocated to registers r5 r6 r7 
                                   5068 ;ctx                       Allocated to stack - _bp +4
                                   5069 ;__1310720087              Allocated to registers 
                                   5070 ;d                         Allocated to stack - _bp +7
                                   5071 ;mask                      Allocated to stack - _bp +11
                                   5072 ;__1310720089              Allocated to registers 
                                   5073 ;s                         Allocated to registers r5 r6 r7 
                                   5074 ;__1310720091              Allocated to registers 
                                   5075 ;s                         Allocated to registers r5 r6 r7 
                                   5076 ;__1310720093              Allocated to registers 
                                   5077 ;s                         Allocated to registers r5 r6 r7 
                                   5078 ;__1310720095              Allocated to registers 
                                   5079 ;s                         Allocated to registers r5 r6 r7 
                                   5080 ;__1310720097              Allocated to registers 
                                   5081 ;s                         Allocated to registers r5 r6 r7 
                                   5082 ;__1310720099              Allocated to registers 
                                   5083 ;s                         Allocated to registers r5 r6 r7 
                                   5084 ;__1310720101              Allocated to registers 
                                   5085 ;s                         Allocated to registers r5 r6 r7 
                                   5086 ;__1310720103              Allocated to registers 
                                   5087 ;s                         Allocated to registers r5 r6 r7 
                                   5088 ;__1310720105              Allocated to registers 
                                   5089 ;s                         Allocated to registers r5 r6 r7 
                                   5090 ;__1310720107              Allocated to registers 
                                   5091 ;s                         Allocated to registers r5 r6 r7 
                                   5092 ;__1310720109              Allocated to registers 
                                   5093 ;s                         Allocated to registers r5 r6 r7 
                                   5094 ;__1310720111              Allocated to registers 
                                   5095 ;s                         Allocated to registers r5 r6 r7 
                                   5096 ;__1310720113              Allocated to registers 
                                   5097 ;s                         Allocated to registers r5 r6 r7 
                                   5098 ;__1310720115              Allocated to registers 
                                   5099 ;s                         Allocated to registers r5 r6 r7 
                                   5100 ;__1310720117              Allocated to registers 
                                   5101 ;s                         Allocated to registers r5 r6 r7 
                                   5102 ;__1310720119              Allocated to registers 
                                   5103 ;s                         Allocated to registers r5 r6 r7 
                                   5104 ;__1310720121              Allocated to registers 
                                   5105 ;s                         Allocated to registers r5 r6 r7 
                                   5106 ;__1310720123              Allocated to registers 
                                   5107 ;s                         Allocated to registers r5 r6 r7 
                                   5108 ;__1310720125              Allocated to registers 
                                   5109 ;s                         Allocated to registers r5 r6 r7 
                                   5110 ;sloc0                     Allocated to stack - _bp +1
                                   5111 ;------------------------------------------------------------
                                   5112 ;	calc.c:323: static int help(void *_ctx, delta_t *delta) __reentrant {
                                   5113 ;	-----------------------------------------
                                   5114 ;	 function help
                                   5115 ;	-----------------------------------------
      001A05                       5116 _help:
      001A05 C0*00            [24] 5117 	push	_bp
      001A07 E5 81            [12] 5118 	mov	a,sp
      001A09 F5*00            [12] 5119 	mov	_bp,a
      001A0B 24 0E            [12] 5120 	add	a,#0x0e
      001A0D F5 81            [12] 5121 	mov	sp,a
      001A0F AD 82            [24] 5122 	mov	r5,dpl
      001A11 AE 83            [24] 5123 	mov	r6,dph
      001A13 AF F0            [24] 5124 	mov	r7,b
                                   5125 ;	calc.c:324: struct ctx *ctx = (struct ctx *)_ctx;
      001A15 E5*00            [12] 5126 	mov	a,_bp
      001A17 24 04            [12] 5127 	add	a,#0x04
      001A19 F8               [12] 5128 	mov	r0,a
      001A1A A6 05            [24] 5129 	mov	@r0,ar5
      001A1C 08               [12] 5130 	inc	r0
      001A1D A6 06            [24] 5131 	mov	@r0,ar6
      001A1F 08               [12] 5132 	inc	r0
      001A20 A6 07            [24] 5133 	mov	@r0,ar7
                                   5134 ;	calc.c:327: printf("\r\nbase = %d, acc = %ld / %08lx / ", ctx->base, ctx->acc, ctx->acc);
      001A22 E5*00            [12] 5135 	mov	a,_bp
      001A24 24 04            [12] 5136 	add	a,#0x04
      001A26 F8               [12] 5137 	mov	r0,a
      001A27 A9*00            [24] 5138 	mov	r1,_bp
      001A29 09               [12] 5139 	inc	r1
      001A2A 74 02            [12] 5140 	mov	a,#0x02
      001A2C 26               [12] 5141 	add	a,@r0
      001A2D F7               [12] 5142 	mov	@r1,a
      001A2E E4               [12] 5143 	clr	a
      001A2F 08               [12] 5144 	inc	r0
      001A30 36               [12] 5145 	addc	a,@r0
      001A31 09               [12] 5146 	inc	r1
      001A32 F7               [12] 5147 	mov	@r1,a
      001A33 08               [12] 5148 	inc	r0
      001A34 09               [12] 5149 	inc	r1
      001A35 E6               [12] 5150 	mov	a,@r0
      001A36 F7               [12] 5151 	mov	@r1,a
      001A37 A8*00            [24] 5152 	mov	r0,_bp
      001A39 08               [12] 5153 	inc	r0
      001A3A 86 82            [24] 5154 	mov	dpl,@r0
      001A3C 08               [12] 5155 	inc	r0
      001A3D 86 83            [24] 5156 	mov	dph,@r0
      001A3F 08               [12] 5157 	inc	r0
      001A40 86 F0            [24] 5158 	mov	b,@r0
      001A42 12r00r00         [24] 5159 	lcall	__gptrget
      001A45 FC               [12] 5160 	mov	r4,a
      001A46 A3               [24] 5161 	inc	dptr
      001A47 12r00r00         [24] 5162 	lcall	__gptrget
      001A4A FD               [12] 5163 	mov	r5,a
      001A4B A3               [24] 5164 	inc	dptr
      001A4C 12r00r00         [24] 5165 	lcall	__gptrget
      001A4F FE               [12] 5166 	mov	r6,a
      001A50 A3               [24] 5167 	inc	dptr
      001A51 12r00r00         [24] 5168 	lcall	__gptrget
      001A54 FF               [12] 5169 	mov	r7,a
      001A55 E5*00            [12] 5170 	mov	a,_bp
      001A57 24 04            [12] 5171 	add	a,#0x04
      001A59 F8               [12] 5172 	mov	r0,a
      001A5A 86 82            [24] 5173 	mov	dpl,@r0
      001A5C 08               [12] 5174 	inc	r0
      001A5D 86 83            [24] 5175 	mov	dph,@r0
      001A5F 08               [12] 5176 	inc	r0
      001A60 86 F0            [24] 5177 	mov	b,@r0
      001A62 12r00r00         [24] 5178 	lcall	__gptrget
      001A65 FA               [12] 5179 	mov	r2,a
      001A66 A3               [24] 5180 	inc	dptr
      001A67 12r00r00         [24] 5181 	lcall	__gptrget
      001A6A FB               [12] 5182 	mov	r3,a
      001A6B C0 04            [24] 5183 	push	ar4
      001A6D C0 05            [24] 5184 	push	ar5
      001A6F C0 06            [24] 5185 	push	ar6
      001A71 C0 07            [24] 5186 	push	ar7
      001A73 C0 04            [24] 5187 	push	ar4
      001A75 C0 05            [24] 5188 	push	ar5
      001A77 C0 06            [24] 5189 	push	ar6
      001A79 C0 07            [24] 5190 	push	ar7
      001A7B C0 02            [24] 5191 	push	ar2
      001A7D C0 03            [24] 5192 	push	ar3
      001A7F 74r73            [12] 5193 	mov	a,#___str_10
      001A81 C0 E0            [24] 5194 	push	acc
      001A83 74s00            [12] 5195 	mov	a,#(___str_10 >> 8)
      001A85 C0 E0            [24] 5196 	push	acc
      001A87 74 80            [12] 5197 	mov	a,#0x80
      001A89 C0 E0            [24] 5198 	push	acc
      001A8B 12r00r00         [24] 5199 	lcall	_printf
      001A8E E5 81            [12] 5200 	mov	a,sp
      001A90 24 F3            [12] 5201 	add	a,#0xf3
      001A92 F5 81            [12] 5202 	mov	sp,a
                                   5203 ;	calc.c:328: printbin(ctx->acc);
      001A94 A8*00            [24] 5204 	mov	r0,_bp
      001A96 08               [12] 5205 	inc	r0
      001A97 86 82            [24] 5206 	mov	dpl,@r0
      001A99 08               [12] 5207 	inc	r0
      001A9A 86 83            [24] 5208 	mov	dph,@r0
      001A9C 08               [12] 5209 	inc	r0
      001A9D 86 F0            [24] 5210 	mov	b,@r0
      001A9F E5*00            [12] 5211 	mov	a,_bp
      001AA1 24 07            [12] 5212 	add	a,#0x07
      001AA3 F9               [12] 5213 	mov	r1,a
      001AA4 12r00r00         [24] 5214 	lcall	__gptrget
      001AA7 F7               [12] 5215 	mov	@r1,a
      001AA8 A3               [24] 5216 	inc	dptr
      001AA9 12r00r00         [24] 5217 	lcall	__gptrget
      001AAC 09               [12] 5218 	inc	r1
      001AAD F7               [12] 5219 	mov	@r1,a
      001AAE A3               [24] 5220 	inc	dptr
      001AAF 12r00r00         [24] 5221 	lcall	__gptrget
      001AB2 09               [12] 5222 	inc	r1
      001AB3 F7               [12] 5223 	mov	@r1,a
      001AB4 A3               [24] 5224 	inc	dptr
      001AB5 12r00r00         [24] 5225 	lcall	__gptrget
      001AB8 09               [12] 5226 	inc	r1
      001AB9 F7               [12] 5227 	mov	@r1,a
                                   5228 ;	calc.c:56: for (mask = 0x80000000lu; mask; mask >>= 1)
      001ABA E5*00            [12] 5229 	mov	a,_bp
      001ABC 24 0B            [12] 5230 	add	a,#0x0b
      001ABE F8               [12] 5231 	mov	r0,a
      001ABF E4               [12] 5232 	clr	a
      001AC0 F6               [12] 5233 	mov	@r0,a
      001AC1 08               [12] 5234 	inc	r0
      001AC2 F6               [12] 5235 	mov	@r0,a
      001AC3 08               [12] 5236 	inc	r0
      001AC4 F6               [12] 5237 	mov	@r0,a
      001AC5 08               [12] 5238 	inc	r0
      001AC6 76 80            [12] 5239 	mov	@r0,#0x80
      001AC8                       5240 00141$:
                                   5241 ;	calc.c:57: (void)putchar((d & mask) ? (int)'1' : (int)'0');
      001AC8 E5*00            [12] 5242 	mov	a,_bp
      001ACA 24 07            [12] 5243 	add	a,#0x07
      001ACC F8               [12] 5244 	mov	r0,a
      001ACD 86 04            [24] 5245 	mov	ar4,@r0
      001ACF 08               [12] 5246 	inc	r0
      001AD0 86 05            [24] 5247 	mov	ar5,@r0
      001AD2 08               [12] 5248 	inc	r0
      001AD3 86 06            [24] 5249 	mov	ar6,@r0
      001AD5 08               [12] 5250 	inc	r0
      001AD6 86 07            [24] 5251 	mov	ar7,@r0
      001AD8 E5*00            [12] 5252 	mov	a,_bp
      001ADA 24 0B            [12] 5253 	add	a,#0x0b
      001ADC F8               [12] 5254 	mov	r0,a
      001ADD E6               [12] 5255 	mov	a,@r0
      001ADE 52 04            [12] 5256 	anl	ar4,a
      001AE0 08               [12] 5257 	inc	r0
      001AE1 E6               [12] 5258 	mov	a,@r0
      001AE2 52 05            [12] 5259 	anl	ar5,a
      001AE4 08               [12] 5260 	inc	r0
      001AE5 E6               [12] 5261 	mov	a,@r0
      001AE6 52 06            [12] 5262 	anl	ar6,a
      001AE8 08               [12] 5263 	inc	r0
      001AE9 E6               [12] 5264 	mov	a,@r0
      001AEA 52 07            [12] 5265 	anl	ar7,a
      001AEC EC               [12] 5266 	mov	a,r4
      001AED 4D               [12] 5267 	orl	a,r5
      001AEE 4E               [12] 5268 	orl	a,r6
      001AEF 4F               [12] 5269 	orl	a,r7
      001AF0 60 06            [24] 5270 	jz	00202$
      001AF2 7E 31            [12] 5271 	mov	r6,#0x31
      001AF4 7F 00            [12] 5272 	mov	r7,#0x00
      001AF6 80 04            [24] 5273 	sjmp	00203$
      001AF8                       5274 00202$:
      001AF8 7E 30            [12] 5275 	mov	r6,#0x30
      001AFA 7F 00            [12] 5276 	mov	r7,#0x00
      001AFC                       5277 00203$:
      001AFC 8E 82            [24] 5278 	mov	dpl,r6
      001AFE 8F 83            [24] 5279 	mov	dph,r7
      001B00 12r00r00         [24] 5280 	lcall	_putchar
                                   5281 ;	calc.c:56: for (mask = 0x80000000lu; mask; mask >>= 1)
      001B03 E5*00            [12] 5282 	mov	a,_bp
      001B05 24 0B            [12] 5283 	add	a,#0x0b
      001B07 F8               [12] 5284 	mov	r0,a
      001B08 08               [12] 5285 	inc	r0
      001B09 08               [12] 5286 	inc	r0
      001B0A 08               [12] 5287 	inc	r0
      001B0B E6               [12] 5288 	mov	a,@r0
      001B0C C3               [12] 5289 	clr	c
      001B0D 13               [12] 5290 	rrc	a
      001B0E F6               [12] 5291 	mov	@r0,a
      001B0F 18               [12] 5292 	dec	r0
      001B10 E6               [12] 5293 	mov	a,@r0
      001B11 13               [12] 5294 	rrc	a
      001B12 F6               [12] 5295 	mov	@r0,a
      001B13 18               [12] 5296 	dec	r0
      001B14 E6               [12] 5297 	mov	a,@r0
      001B15 13               [12] 5298 	rrc	a
      001B16 F6               [12] 5299 	mov	@r0,a
      001B17 18               [12] 5300 	dec	r0
      001B18 E6               [12] 5301 	mov	a,@r0
      001B19 13               [12] 5302 	rrc	a
      001B1A F6               [12] 5303 	mov	@r0,a
      001B1B E5*00            [12] 5304 	mov	a,_bp
      001B1D 24 0B            [12] 5305 	add	a,#0x0b
      001B1F F8               [12] 5306 	mov	r0,a
      001B20 E6               [12] 5307 	mov	a,@r0
      001B21 08               [12] 5308 	inc	r0
      001B22 46               [12] 5309 	orl	a,@r0
      001B23 08               [12] 5310 	inc	r0
      001B24 46               [12] 5311 	orl	a,@r0
      001B25 08               [12] 5312 	inc	r0
      001B26 46               [12] 5313 	orl	a,@r0
      001B27 70 9F            [24] 5314 	jnz	00141$
                                   5315 ;	calc.c:329: printf(", acc_valid = %d\r\n\r\n", (int)ctx->acc_valid);
      001B29 E5*00            [12] 5316 	mov	a,_bp
      001B2B 24 04            [12] 5317 	add	a,#0x04
      001B2D F8               [12] 5318 	mov	r0,a
      001B2E 74 06            [12] 5319 	mov	a,#0x06
      001B30 26               [12] 5320 	add	a,@r0
      001B31 FD               [12] 5321 	mov	r5,a
      001B32 E4               [12] 5322 	clr	a
      001B33 08               [12] 5323 	inc	r0
      001B34 36               [12] 5324 	addc	a,@r0
      001B35 FE               [12] 5325 	mov	r6,a
      001B36 08               [12] 5326 	inc	r0
      001B37 86 07            [24] 5327 	mov	ar7,@r0
      001B39 8D 82            [24] 5328 	mov	dpl,r5
      001B3B 8E 83            [24] 5329 	mov	dph,r6
      001B3D 8F F0            [24] 5330 	mov	b,r7
      001B3F 12r00r00         [24] 5331 	lcall	__gptrget
      001B42 FD               [12] 5332 	mov	r5,a
      001B43 7F 00            [12] 5333 	mov	r7,#0x00
      001B45 C0 05            [24] 5334 	push	ar5
      001B47 C0 07            [24] 5335 	push	ar7
      001B49 74r95            [12] 5336 	mov	a,#___str_11
      001B4B C0 E0            [24] 5337 	push	acc
      001B4D 74s00            [12] 5338 	mov	a,#(___str_11 >> 8)
      001B4F C0 E0            [24] 5339 	push	acc
      001B51 74 80            [12] 5340 	mov	a,#0x80
      001B53 C0 E0            [24] 5341 	push	acc
      001B55 12r00r00         [24] 5342 	lcall	_printf
      001B58 E5 81            [12] 5343 	mov	a,sp
      001B5A 24 FB            [12] 5344 	add	a,#0xfb
      001B5C F5 81            [12] 5345 	mov	sp,a
                                   5346 ;	calc.c:330: printstr("HhOo\tbase 16 10 8 2\r\n");
      001B5E 7DrAA            [12] 5347 	mov	r5,#___str_12
      001B60 7Es00            [12] 5348 	mov	r6,#(___str_12 >> 8)
      001B62 7F 80            [12] 5349 	mov	r7,#0x80
                                   5350 ;	calc.c:50: return;
      001B64                       5351 00144$:
                                   5352 ;	calc.c:48: for (; *s; s++) putchar(*s);
      001B64 8D 82            [24] 5353 	mov	dpl,r5
      001B66 8E 83            [24] 5354 	mov	dph,r6
      001B68 8F F0            [24] 5355 	mov	b,r7
      001B6A 12r00r00         [24] 5356 	lcall	__gptrget
      001B6D FC               [12] 5357 	mov	r4,a
      001B6E 60 10            [24] 5358 	jz	00104$
      001B70 7B 00            [12] 5359 	mov	r3,#0x00
      001B72 8C 82            [24] 5360 	mov	dpl,r4
      001B74 8B 83            [24] 5361 	mov	dph,r3
      001B76 12r00r00         [24] 5362 	lcall	_putchar
      001B79 0D               [12] 5363 	inc	r5
                                   5364 ;	calc.c:330: printstr("HhOo\tbase 16 10 8 2\r\n");
      001B7A BD 00 E7         [24] 5365 	cjne	r5,#0x00,00144$
      001B7D 0E               [12] 5366 	inc	r6
      001B7E 80 E4            [24] 5367 	sjmp	00144$
      001B80                       5368 00104$:
                                   5369 ;	calc.c:331: printstr("p\tpeek top\r\n");
      001B80 7DrC0            [12] 5370 	mov	r5,#___str_13
      001B82 7Es00            [12] 5371 	mov	r6,#(___str_13 >> 8)
      001B84 7F 80            [12] 5372 	mov	r7,#0x80
                                   5373 ;	calc.c:50: return;
      001B86                       5374 00147$:
                                   5375 ;	calc.c:48: for (; *s; s++) putchar(*s);
      001B86 8D 82            [24] 5376 	mov	dpl,r5
      001B88 8E 83            [24] 5377 	mov	dph,r6
      001B8A 8F F0            [24] 5378 	mov	b,r7
      001B8C 12r00r00         [24] 5379 	lcall	__gptrget
      001B8F FC               [12] 5380 	mov	r4,a
      001B90 60 10            [24] 5381 	jz	00106$
      001B92 7B 00            [12] 5382 	mov	r3,#0x00
      001B94 8C 82            [24] 5383 	mov	dpl,r4
      001B96 8B 83            [24] 5384 	mov	dph,r3
      001B98 12r00r00         [24] 5385 	lcall	_putchar
      001B9B 0D               [12] 5386 	inc	r5
                                   5387 ;	calc.c:331: printstr("p\tpeek top\r\n");
      001B9C BD 00 E7         [24] 5388 	cjne	r5,#0x00,00147$
      001B9F 0E               [12] 5389 	inc	r6
      001BA0 80 E4            [24] 5390 	sjmp	00147$
      001BA2                       5391 00106$:
                                   5392 ;	calc.c:332: printstr("P\tprint stack\r\n");
      001BA2 7DrCD            [12] 5393 	mov	r5,#___str_14
      001BA4 7Es00            [12] 5394 	mov	r6,#(___str_14 >> 8)
      001BA6 7F 80            [12] 5395 	mov	r7,#0x80
                                   5396 ;	calc.c:50: return;
      001BA8                       5397 00150$:
                                   5398 ;	calc.c:48: for (; *s; s++) putchar(*s);
      001BA8 8D 82            [24] 5399 	mov	dpl,r5
      001BAA 8E 83            [24] 5400 	mov	dph,r6
      001BAC 8F F0            [24] 5401 	mov	b,r7
      001BAE 12r00r00         [24] 5402 	lcall	__gptrget
      001BB1 FC               [12] 5403 	mov	r4,a
      001BB2 60 10            [24] 5404 	jz	00108$
      001BB4 7B 00            [12] 5405 	mov	r3,#0x00
      001BB6 8C 82            [24] 5406 	mov	dpl,r4
      001BB8 8B 83            [24] 5407 	mov	dph,r3
      001BBA 12r00r00         [24] 5408 	lcall	_putchar
      001BBD 0D               [12] 5409 	inc	r5
                                   5410 ;	calc.c:332: printstr("P\tprint stack\r\n");
      001BBE BD 00 E7         [24] 5411 	cjne	r5,#0x00,00150$
      001BC1 0E               [12] 5412 	inc	r6
      001BC2 80 E4            [24] 5413 	sjmp	00150$
      001BC4                       5414 00108$:
                                   5415 ;	calc.c:333: printstr("v.\tpop top\r\n");
      001BC4 7DrDD            [12] 5416 	mov	r5,#___str_15
      001BC6 7Es00            [12] 5417 	mov	r6,#(___str_15 >> 8)
      001BC8 7F 80            [12] 5418 	mov	r7,#0x80
                                   5419 ;	calc.c:50: return;
      001BCA                       5420 00153$:
                                   5421 ;	calc.c:48: for (; *s; s++) putchar(*s);
      001BCA 8D 82            [24] 5422 	mov	dpl,r5
      001BCC 8E 83            [24] 5423 	mov	dph,r6
      001BCE 8F F0            [24] 5424 	mov	b,r7
      001BD0 12r00r00         [24] 5425 	lcall	__gptrget
      001BD3 FC               [12] 5426 	mov	r4,a
      001BD4 60 10            [24] 5427 	jz	00110$
      001BD6 7B 00            [12] 5428 	mov	r3,#0x00
      001BD8 8C 82            [24] 5429 	mov	dpl,r4
      001BDA 8B 83            [24] 5430 	mov	dph,r3
      001BDC 12r00r00         [24] 5431 	lcall	_putchar
      001BDF 0D               [12] 5432 	inc	r5
                                   5433 ;	calc.c:333: printstr("v.\tpop top\r\n");
      001BE0 BD 00 E7         [24] 5434 	cjne	r5,#0x00,00153$
      001BE3 0E               [12] 5435 	inc	r6
      001BE4 80 E4            [24] 5436 	sjmp	00153$
      001BE6                       5437 00110$:
                                   5438 ;	calc.c:334: printstr("V\tpop all\r\n");
      001BE6 7DrEA            [12] 5439 	mov	r5,#___str_16
      001BE8 7Es00            [12] 5440 	mov	r6,#(___str_16 >> 8)
      001BEA 7F 80            [12] 5441 	mov	r7,#0x80
                                   5442 ;	calc.c:50: return;
      001BEC                       5443 00156$:
                                   5444 ;	calc.c:48: for (; *s; s++) putchar(*s);
      001BEC 8D 82            [24] 5445 	mov	dpl,r5
      001BEE 8E 83            [24] 5446 	mov	dph,r6
      001BF0 8F F0            [24] 5447 	mov	b,r7
      001BF2 12r00r00         [24] 5448 	lcall	__gptrget
      001BF5 FC               [12] 5449 	mov	r4,a
      001BF6 60 10            [24] 5450 	jz	00112$
      001BF8 7B 00            [12] 5451 	mov	r3,#0x00
      001BFA 8C 82            [24] 5452 	mov	dpl,r4
      001BFC 8B 83            [24] 5453 	mov	dph,r3
      001BFE 12r00r00         [24] 5454 	lcall	_putchar
      001C01 0D               [12] 5455 	inc	r5
                                   5456 ;	calc.c:334: printstr("V\tpop all\r\n");
      001C02 BD 00 E7         [24] 5457 	cjne	r5,#0x00,00156$
      001C05 0E               [12] 5458 	inc	r6
      001C06 80 E4            [24] 5459 	sjmp	00156$
      001C08                       5460 00112$:
                                   5461 ;	calc.c:335: printstr("i\treset acc\r\n");
      001C08 7DrF6            [12] 5462 	mov	r5,#___str_17
      001C0A 7Es00            [12] 5463 	mov	r6,#(___str_17 >> 8)
      001C0C 7F 80            [12] 5464 	mov	r7,#0x80
                                   5465 ;	calc.c:50: return;
      001C0E                       5466 00159$:
                                   5467 ;	calc.c:48: for (; *s; s++) putchar(*s);
      001C0E 8D 82            [24] 5468 	mov	dpl,r5
      001C10 8E 83            [24] 5469 	mov	dph,r6
      001C12 8F F0            [24] 5470 	mov	b,r7
      001C14 12r00r00         [24] 5471 	lcall	__gptrget
      001C17 FC               [12] 5472 	mov	r4,a
      001C18 60 10            [24] 5473 	jz	00114$
      001C1A 7B 00            [12] 5474 	mov	r3,#0x00
      001C1C 8C 82            [24] 5475 	mov	dpl,r4
      001C1E 8B 83            [24] 5476 	mov	dph,r3
      001C20 12r00r00         [24] 5477 	lcall	_putchar
      001C23 0D               [12] 5478 	inc	r5
                                   5479 ;	calc.c:335: printstr("i\treset acc\r\n");
      001C24 BD 00 E7         [24] 5480 	cjne	r5,#0x00,00159$
      001C27 0E               [12] 5481 	inc	r6
      001C28 80 E4            [24] 5482 	sjmp	00159$
      001C2A                       5483 00114$:
                                   5484 ;	calc.c:336: printstr("I\treset and discard acc\r\n");
      001C2A 7Dr04            [12] 5485 	mov	r5,#___str_18
      001C2C 7Es01            [12] 5486 	mov	r6,#(___str_18 >> 8)
      001C2E 7F 80            [12] 5487 	mov	r7,#0x80
                                   5488 ;	calc.c:50: return;
      001C30                       5489 00162$:
                                   5490 ;	calc.c:48: for (; *s; s++) putchar(*s);
      001C30 8D 82            [24] 5491 	mov	dpl,r5
      001C32 8E 83            [24] 5492 	mov	dph,r6
      001C34 8F F0            [24] 5493 	mov	b,r7
      001C36 12r00r00         [24] 5494 	lcall	__gptrget
      001C39 FC               [12] 5495 	mov	r4,a
      001C3A 60 10            [24] 5496 	jz	00116$
      001C3C 7B 00            [12] 5497 	mov	r3,#0x00
      001C3E 8C 82            [24] 5498 	mov	dpl,r4
      001C40 8B 83            [24] 5499 	mov	dph,r3
      001C42 12r00r00         [24] 5500 	lcall	_putchar
      001C45 0D               [12] 5501 	inc	r5
                                   5502 ;	calc.c:336: printstr("I\treset and discard acc\r\n");
      001C46 BD 00 E7         [24] 5503 	cjne	r5,#0x00,00162$
      001C49 0E               [12] 5504 	inc	r6
      001C4A 80 E4            [24] 5505 	sjmp	00162$
      001C4C                       5506 00116$:
                                   5507 ;	calc.c:337: printstr("x\texchange top 2\r\n");
      001C4C 7Dr1E            [12] 5508 	mov	r5,#___str_19
      001C4E 7Es01            [12] 5509 	mov	r6,#(___str_19 >> 8)
      001C50 7F 80            [12] 5510 	mov	r7,#0x80
                                   5511 ;	calc.c:50: return;
      001C52                       5512 00165$:
                                   5513 ;	calc.c:48: for (; *s; s++) putchar(*s);
      001C52 8D 82            [24] 5514 	mov	dpl,r5
      001C54 8E 83            [24] 5515 	mov	dph,r6
      001C56 8F F0            [24] 5516 	mov	b,r7
      001C58 12r00r00         [24] 5517 	lcall	__gptrget
      001C5B FC               [12] 5518 	mov	r4,a
      001C5C 60 10            [24] 5519 	jz	00118$
      001C5E 7B 00            [12] 5520 	mov	r3,#0x00
      001C60 8C 82            [24] 5521 	mov	dpl,r4
      001C62 8B 83            [24] 5522 	mov	dph,r3
      001C64 12r00r00         [24] 5523 	lcall	_putchar
      001C67 0D               [12] 5524 	inc	r5
                                   5525 ;	calc.c:337: printstr("x\texchange top 2\r\n");
      001C68 BD 00 E7         [24] 5526 	cjne	r5,#0x00,00165$
      001C6B 0E               [12] 5527 	inc	r6
      001C6C 80 E4            [24] 5528 	sjmp	00165$
      001C6E                       5529 00118$:
                                   5530 ;	calc.c:338: printstr("+\tadd top 2\r\n");
      001C6E 7Dr31            [12] 5531 	mov	r5,#___str_20
      001C70 7Es01            [12] 5532 	mov	r6,#(___str_20 >> 8)
      001C72 7F 80            [12] 5533 	mov	r7,#0x80
                                   5534 ;	calc.c:50: return;
      001C74                       5535 00168$:
                                   5536 ;	calc.c:48: for (; *s; s++) putchar(*s);
      001C74 8D 82            [24] 5537 	mov	dpl,r5
      001C76 8E 83            [24] 5538 	mov	dph,r6
      001C78 8F F0            [24] 5539 	mov	b,r7
      001C7A 12r00r00         [24] 5540 	lcall	__gptrget
      001C7D FC               [12] 5541 	mov	r4,a
      001C7E 60 10            [24] 5542 	jz	00120$
      001C80 7B 00            [12] 5543 	mov	r3,#0x00
      001C82 8C 82            [24] 5544 	mov	dpl,r4
      001C84 8B 83            [24] 5545 	mov	dph,r3
      001C86 12r00r00         [24] 5546 	lcall	_putchar
      001C89 0D               [12] 5547 	inc	r5
                                   5548 ;	calc.c:338: printstr("+\tadd top 2\r\n");
      001C8A BD 00 E7         [24] 5549 	cjne	r5,#0x00,00168$
      001C8D 0E               [12] 5550 	inc	r6
      001C8E 80 E4            [24] 5551 	sjmp	00168$
      001C90                       5552 00120$:
                                   5553 ;	calc.c:339: printstr("-\tsubtract top 2\r\n");
      001C90 7Dr3F            [12] 5554 	mov	r5,#___str_21
      001C92 7Es01            [12] 5555 	mov	r6,#(___str_21 >> 8)
      001C94 7F 80            [12] 5556 	mov	r7,#0x80
                                   5557 ;	calc.c:50: return;
      001C96                       5558 00171$:
                                   5559 ;	calc.c:48: for (; *s; s++) putchar(*s);
      001C96 8D 82            [24] 5560 	mov	dpl,r5
      001C98 8E 83            [24] 5561 	mov	dph,r6
      001C9A 8F F0            [24] 5562 	mov	b,r7
      001C9C 12r00r00         [24] 5563 	lcall	__gptrget
      001C9F FC               [12] 5564 	mov	r4,a
      001CA0 60 10            [24] 5565 	jz	00122$
      001CA2 7B 00            [12] 5566 	mov	r3,#0x00
      001CA4 8C 82            [24] 5567 	mov	dpl,r4
      001CA6 8B 83            [24] 5568 	mov	dph,r3
      001CA8 12r00r00         [24] 5569 	lcall	_putchar
      001CAB 0D               [12] 5570 	inc	r5
                                   5571 ;	calc.c:339: printstr("-\tsubtract top 2\r\n");
      001CAC BD 00 E7         [24] 5572 	cjne	r5,#0x00,00171$
      001CAF 0E               [12] 5573 	inc	r6
      001CB0 80 E4            [24] 5574 	sjmp	00171$
      001CB2                       5575 00122$:
                                   5576 ;	calc.c:340: printstr("*\tmultiply top 2\r\n");
      001CB2 7Dr52            [12] 5577 	mov	r5,#___str_22
      001CB4 7Es01            [12] 5578 	mov	r6,#(___str_22 >> 8)
      001CB6 7F 80            [12] 5579 	mov	r7,#0x80
                                   5580 ;	calc.c:50: return;
      001CB8                       5581 00174$:
                                   5582 ;	calc.c:48: for (; *s; s++) putchar(*s);
      001CB8 8D 82            [24] 5583 	mov	dpl,r5
      001CBA 8E 83            [24] 5584 	mov	dph,r6
      001CBC 8F F0            [24] 5585 	mov	b,r7
      001CBE 12r00r00         [24] 5586 	lcall	__gptrget
      001CC1 FC               [12] 5587 	mov	r4,a
      001CC2 60 10            [24] 5588 	jz	00124$
      001CC4 7B 00            [12] 5589 	mov	r3,#0x00
      001CC6 8C 82            [24] 5590 	mov	dpl,r4
      001CC8 8B 83            [24] 5591 	mov	dph,r3
      001CCA 12r00r00         [24] 5592 	lcall	_putchar
      001CCD 0D               [12] 5593 	inc	r5
                                   5594 ;	calc.c:340: printstr("*\tmultiply top 2\r\n");
      001CCE BD 00 E7         [24] 5595 	cjne	r5,#0x00,00174$
      001CD1 0E               [12] 5596 	inc	r6
      001CD2 80 E4            [24] 5597 	sjmp	00174$
      001CD4                       5598 00124$:
                                   5599 ;	calc.c:341: printstr("/\tdivide top 2\r\n");
      001CD4 7Dr65            [12] 5600 	mov	r5,#___str_23
      001CD6 7Es01            [12] 5601 	mov	r6,#(___str_23 >> 8)
      001CD8 7F 80            [12] 5602 	mov	r7,#0x80
                                   5603 ;	calc.c:50: return;
      001CDA                       5604 00177$:
                                   5605 ;	calc.c:48: for (; *s; s++) putchar(*s);
      001CDA 8D 82            [24] 5606 	mov	dpl,r5
      001CDC 8E 83            [24] 5607 	mov	dph,r6
      001CDE 8F F0            [24] 5608 	mov	b,r7
      001CE0 12r00r00         [24] 5609 	lcall	__gptrget
      001CE3 FC               [12] 5610 	mov	r4,a
      001CE4 60 10            [24] 5611 	jz	00126$
      001CE6 7B 00            [12] 5612 	mov	r3,#0x00
      001CE8 8C 82            [24] 5613 	mov	dpl,r4
      001CEA 8B 83            [24] 5614 	mov	dph,r3
      001CEC 12r00r00         [24] 5615 	lcall	_putchar
      001CEF 0D               [12] 5616 	inc	r5
                                   5617 ;	calc.c:341: printstr("/\tdivide top 2\r\n");
      001CF0 BD 00 E7         [24] 5618 	cjne	r5,#0x00,00177$
      001CF3 0E               [12] 5619 	inc	r6
      001CF4 80 E4            [24] 5620 	sjmp	00177$
      001CF6                       5621 00126$:
                                   5622 ;	calc.c:342: printstr("%\tmodulus top 2\r\n");
      001CF6 7Dr76            [12] 5623 	mov	r5,#___str_24
      001CF8 7Es01            [12] 5624 	mov	r6,#(___str_24 >> 8)
      001CFA 7F 80            [12] 5625 	mov	r7,#0x80
                                   5626 ;	calc.c:50: return;
      001CFC                       5627 00180$:
                                   5628 ;	calc.c:48: for (; *s; s++) putchar(*s);
      001CFC 8D 82            [24] 5629 	mov	dpl,r5
      001CFE 8E 83            [24] 5630 	mov	dph,r6
      001D00 8F F0            [24] 5631 	mov	b,r7
      001D02 12r00r00         [24] 5632 	lcall	__gptrget
      001D05 FC               [12] 5633 	mov	r4,a
      001D06 60 10            [24] 5634 	jz	00128$
      001D08 7B 00            [12] 5635 	mov	r3,#0x00
      001D0A 8C 82            [24] 5636 	mov	dpl,r4
      001D0C 8B 83            [24] 5637 	mov	dph,r3
      001D0E 12r00r00         [24] 5638 	lcall	_putchar
      001D11 0D               [12] 5639 	inc	r5
                                   5640 ;	calc.c:342: printstr("%\tmodulus top 2\r\n");
      001D12 BD 00 E7         [24] 5641 	cjne	r5,#0x00,00180$
      001D15 0E               [12] 5642 	inc	r6
      001D16 80 E4            [24] 5643 	sjmp	00180$
      001D18                       5644 00128$:
                                   5645 ;	calc.c:343: printstr("&\tand top 2\r\n");
      001D18 7Dr88            [12] 5646 	mov	r5,#___str_25
      001D1A 7Es01            [12] 5647 	mov	r6,#(___str_25 >> 8)
      001D1C 7F 80            [12] 5648 	mov	r7,#0x80
                                   5649 ;	calc.c:50: return;
      001D1E                       5650 00183$:
                                   5651 ;	calc.c:48: for (; *s; s++) putchar(*s);
      001D1E 8D 82            [24] 5652 	mov	dpl,r5
      001D20 8E 83            [24] 5653 	mov	dph,r6
      001D22 8F F0            [24] 5654 	mov	b,r7
      001D24 12r00r00         [24] 5655 	lcall	__gptrget
      001D27 FC               [12] 5656 	mov	r4,a
      001D28 60 10            [24] 5657 	jz	00130$
      001D2A 7B 00            [12] 5658 	mov	r3,#0x00
      001D2C 8C 82            [24] 5659 	mov	dpl,r4
      001D2E 8B 83            [24] 5660 	mov	dph,r3
      001D30 12r00r00         [24] 5661 	lcall	_putchar
      001D33 0D               [12] 5662 	inc	r5
                                   5663 ;	calc.c:343: printstr("&\tand top 2\r\n");
      001D34 BD 00 E7         [24] 5664 	cjne	r5,#0x00,00183$
      001D37 0E               [12] 5665 	inc	r6
      001D38 80 E4            [24] 5666 	sjmp	00183$
      001D3A                       5667 00130$:
                                   5668 ;	calc.c:344: printstr("|\tor top 2\r\n");
      001D3A 7Dr96            [12] 5669 	mov	r5,#___str_26
      001D3C 7Es01            [12] 5670 	mov	r6,#(___str_26 >> 8)
      001D3E 7F 80            [12] 5671 	mov	r7,#0x80
                                   5672 ;	calc.c:50: return;
      001D40                       5673 00186$:
                                   5674 ;	calc.c:48: for (; *s; s++) putchar(*s);
      001D40 8D 82            [24] 5675 	mov	dpl,r5
      001D42 8E 83            [24] 5676 	mov	dph,r6
      001D44 8F F0            [24] 5677 	mov	b,r7
      001D46 12r00r00         [24] 5678 	lcall	__gptrget
      001D49 FC               [12] 5679 	mov	r4,a
      001D4A 60 10            [24] 5680 	jz	00132$
      001D4C 7B 00            [12] 5681 	mov	r3,#0x00
      001D4E 8C 82            [24] 5682 	mov	dpl,r4
      001D50 8B 83            [24] 5683 	mov	dph,r3
      001D52 12r00r00         [24] 5684 	lcall	_putchar
      001D55 0D               [12] 5685 	inc	r5
                                   5686 ;	calc.c:344: printstr("|\tor top 2\r\n");
      001D56 BD 00 E7         [24] 5687 	cjne	r5,#0x00,00186$
      001D59 0E               [12] 5688 	inc	r6
      001D5A 80 E4            [24] 5689 	sjmp	00186$
      001D5C                       5690 00132$:
                                   5691 ;	calc.c:345: printstr("^\txor top 2\r\n");
      001D5C 7DrA3            [12] 5692 	mov	r5,#___str_27
      001D5E 7Es01            [12] 5693 	mov	r6,#(___str_27 >> 8)
      001D60 7F 80            [12] 5694 	mov	r7,#0x80
                                   5695 ;	calc.c:50: return;
      001D62                       5696 00189$:
                                   5697 ;	calc.c:48: for (; *s; s++) putchar(*s);
      001D62 8D 82            [24] 5698 	mov	dpl,r5
      001D64 8E 83            [24] 5699 	mov	dph,r6
      001D66 8F F0            [24] 5700 	mov	b,r7
      001D68 12r00r00         [24] 5701 	lcall	__gptrget
      001D6B FC               [12] 5702 	mov	r4,a
      001D6C 60 10            [24] 5703 	jz	00134$
      001D6E 7B 00            [12] 5704 	mov	r3,#0x00
      001D70 8C 82            [24] 5705 	mov	dpl,r4
      001D72 8B 83            [24] 5706 	mov	dph,r3
      001D74 12r00r00         [24] 5707 	lcall	_putchar
      001D77 0D               [12] 5708 	inc	r5
                                   5709 ;	calc.c:345: printstr("^\txor top 2\r\n");
      001D78 BD 00 E7         [24] 5710 	cjne	r5,#0x00,00189$
      001D7B 0E               [12] 5711 	inc	r6
      001D7C 80 E4            [24] 5712 	sjmp	00189$
      001D7E                       5713 00134$:
                                   5714 ;	calc.c:346: printstr("~\tbitwise not top\r\n");
      001D7E 7DrB1            [12] 5715 	mov	r5,#___str_28
      001D80 7Es01            [12] 5716 	mov	r6,#(___str_28 >> 8)
      001D82 7F 80            [12] 5717 	mov	r7,#0x80
                                   5718 ;	calc.c:50: return;
      001D84                       5719 00192$:
                                   5720 ;	calc.c:48: for (; *s; s++) putchar(*s);
      001D84 8D 82            [24] 5721 	mov	dpl,r5
      001D86 8E 83            [24] 5722 	mov	dph,r6
      001D88 8F F0            [24] 5723 	mov	b,r7
      001D8A 12r00r00         [24] 5724 	lcall	__gptrget
      001D8D FC               [12] 5725 	mov	r4,a
      001D8E 60 10            [24] 5726 	jz	00136$
      001D90 7B 00            [12] 5727 	mov	r3,#0x00
      001D92 8C 82            [24] 5728 	mov	dpl,r4
      001D94 8B 83            [24] 5729 	mov	dph,r3
      001D96 12r00r00         [24] 5730 	lcall	_putchar
      001D99 0D               [12] 5731 	inc	r5
                                   5732 ;	calc.c:346: printstr("~\tbitwise not top\r\n");
      001D9A BD 00 E7         [24] 5733 	cjne	r5,#0x00,00192$
      001D9D 0E               [12] 5734 	inc	r6
      001D9E 80 E4            [24] 5735 	sjmp	00192$
      001DA0                       5736 00136$:
                                   5737 ;	calc.c:347: printstr("?\thelp\r\n");
      001DA0 7DrC5            [12] 5738 	mov	r5,#___str_29
      001DA2 7Es01            [12] 5739 	mov	r6,#(___str_29 >> 8)
      001DA4 7F 80            [12] 5740 	mov	r7,#0x80
                                   5741 ;	calc.c:50: return;
      001DA6                       5742 00195$:
                                   5743 ;	calc.c:48: for (; *s; s++) putchar(*s);
      001DA6 8D 82            [24] 5744 	mov	dpl,r5
      001DA8 8E 83            [24] 5745 	mov	dph,r6
      001DAA 8F F0            [24] 5746 	mov	b,r7
      001DAC 12r00r00         [24] 5747 	lcall	__gptrget
      001DAF FC               [12] 5748 	mov	r4,a
      001DB0 60 10            [24] 5749 	jz	00138$
      001DB2 7B 00            [12] 5750 	mov	r3,#0x00
      001DB4 8C 82            [24] 5751 	mov	dpl,r4
      001DB6 8B 83            [24] 5752 	mov	dph,r3
      001DB8 12r00r00         [24] 5753 	lcall	_putchar
      001DBB 0D               [12] 5754 	inc	r5
                                   5755 ;	calc.c:347: printstr("?\thelp\r\n");
      001DBC BD 00 E7         [24] 5756 	cjne	r5,#0x00,00195$
      001DBF 0E               [12] 5757 	inc	r6
      001DC0 80 E4            [24] 5758 	sjmp	00195$
      001DC2                       5759 00138$:
                                   5760 ;	calc.c:348: printstr("q\tquit\r\n");
      001DC2 7DrCE            [12] 5761 	mov	r5,#___str_30
      001DC4 7Es01            [12] 5762 	mov	r6,#(___str_30 >> 8)
      001DC6 7F 80            [12] 5763 	mov	r7,#0x80
                                   5764 ;	calc.c:50: return;
      001DC8                       5765 00198$:
                                   5766 ;	calc.c:48: for (; *s; s++) putchar(*s);
      001DC8 8D 82            [24] 5767 	mov	dpl,r5
      001DCA 8E 83            [24] 5768 	mov	dph,r6
      001DCC 8F F0            [24] 5769 	mov	b,r7
      001DCE 12r00r00         [24] 5770 	lcall	__gptrget
      001DD1 FC               [12] 5771 	mov	r4,a
      001DD2 60 10            [24] 5772 	jz	00140$
      001DD4 7B 00            [12] 5773 	mov	r3,#0x00
      001DD6 8C 82            [24] 5774 	mov	dpl,r4
      001DD8 8B 83            [24] 5775 	mov	dph,r3
      001DDA 12r00r00         [24] 5776 	lcall	_putchar
      001DDD 0D               [12] 5777 	inc	r5
                                   5778 ;	calc.c:348: printstr("q\tquit\r\n");
      001DDE BD 00 E7         [24] 5779 	cjne	r5,#0x00,00198$
      001DE1 0E               [12] 5780 	inc	r6
      001DE2 80 E4            [24] 5781 	sjmp	00198$
      001DE4                       5782 00140$:
                                   5783 ;	calc.c:350: return 1;
      001DE4 90 00 01         [24] 5784 	mov	dptr,#0x0001
                                   5785 ;	calc.c:351: }
      001DE7 85*00 81         [24] 5786 	mov	sp,_bp
      001DEA D0*00            [24] 5787 	pop	_bp
      001DEC 22               [24] 5788 	ret
                                   5789 ;------------------------------------------------------------
                                   5790 ;Allocation info for local variables in function 'main'
                                   5791 ;------------------------------------------------------------
                                   5792 ;input                     Allocated to registers r6 r7 
                                   5793 ;sloc0                     Allocated to stack - _bp +3
                                   5794 ;------------------------------------------------------------
                                   5795 ;	calc.c:380: void main(void) {
                                   5796 ;	-----------------------------------------
                                   5797 ;	 function main
                                   5798 ;	-----------------------------------------
      001DED                       5799 _main:
                                   5800 ;	calc.c:383: c.base = 10;
      001DED 90r00r0C         [24] 5801 	mov	dptr,#_c
      001DF0 74 0A            [12] 5802 	mov	a,#0x0a
      001DF2 F0               [24] 5803 	movx	@dptr,a
      001DF3 E4               [12] 5804 	clr	a
      001DF4 A3               [24] 5805 	inc	dptr
      001DF5 F0               [24] 5806 	movx	@dptr,a
                                   5807 ;	calc.c:384: c.acc = 0l;
      001DF6 90r00r0E         [24] 5808 	mov	dptr,#(_c + 0x0002)
      001DF9 F0               [24] 5809 	movx	@dptr,a
      001DFA A3               [24] 5810 	inc	dptr
      001DFB F0               [24] 5811 	movx	@dptr,a
      001DFC A3               [24] 5812 	inc	dptr
      001DFD F0               [24] 5813 	movx	@dptr,a
      001DFE A3               [24] 5814 	inc	dptr
      001DFF F0               [24] 5815 	movx	@dptr,a
                                   5816 ;	calc.c:385: c.acc_valid = (char)0;
      001E00 90r00r12         [24] 5817 	mov	dptr,#(_c + 0x0006)
      001E03 F0               [24] 5818 	movx	@dptr,a
                                   5819 ;	calc.c:386: c.digit[0] = c.digit[1] = '\0';
      001E04 90r00r14         [24] 5820 	mov	dptr,#(_c + 0x0008)
      001E07 F0               [24] 5821 	movx	@dptr,a
      001E08 90r00r13         [24] 5822 	mov	dptr,#(_c + 0x0007)
      001E0B F0               [24] 5823 	movx	@dptr,a
                                   5824 ;	calc.c:387: stack_init(&c.s);	
      001E0C 90r00r15         [24] 5825 	mov	dptr,#(_c + 0x0009)
      001E0F 75 F0 00         [24] 5826 	mov	b,#0x00
      001E12 12r00r00         [24] 5827 	lcall	_stack_init
                                   5828 ;	calc.c:388: state_init(&s, STATE_START, STATE_FINAL, UNDEF, deltas, &c);
      001E15 74r0C            [12] 5829 	mov	a,#_c
      001E17 C0 E0            [24] 5830 	push	acc
      001E19 74s00            [12] 5831 	mov	a,#(_c >> 8)
      001E1B C0 E0            [24] 5832 	push	acc
      001E1D E4               [12] 5833 	clr	a
      001E1E C0 E0            [24] 5834 	push	acc
      001E20 74r00            [12] 5835 	mov	a,#_deltas
      001E22 C0 E0            [24] 5836 	push	acc
      001E24 74s00            [12] 5837 	mov	a,#(_deltas >> 8)
      001E26 C0 E0            [24] 5838 	push	acc
      001E28 E4               [12] 5839 	clr	a
      001E29 C0 E0            [24] 5840 	push	acc
      001E2B C0 E0            [24] 5841 	push	acc
      001E2D 74 80            [12] 5842 	mov	a,#0x80
      001E2F C0 E0            [24] 5843 	push	acc
      001E31 74 03            [12] 5844 	mov	a,#0x03
      001E33 C0 E0            [24] 5845 	push	acc
      001E35 E4               [12] 5846 	clr	a
      001E36 C0 E0            [24] 5847 	push	acc
      001E38 C0 E0            [24] 5848 	push	acc
      001E3A C0 E0            [24] 5849 	push	acc
      001E3C 90r00r00         [24] 5850 	mov	dptr,#_s
      001E3F 75 F0 00         [24] 5851 	mov	b,#0x00
      001E42 12r00r00         [24] 5852 	lcall	_state_init
      001E45 E5 81            [12] 5853 	mov	a,sp
      001E47 24 F4            [12] 5854 	add	a,#0xf4
      001E49 F5 81            [12] 5855 	mov	sp,a
                                   5856 ;	calc.c:390: while (1) {
      001E4B                       5857 00158$:
                                   5858 ;	calc.c:391: input = getchar();
      001E4B 12r00r05         [24] 5859 	lcall	_getchar
      001E4E AE 82            [24] 5860 	mov	r6,dpl
      001E50 AF 83            [24] 5861 	mov	r7,dph
                                   5862 ;	calc.c:392: c.digit[0] = (char)input;
      001E52 8E 05            [24] 5863 	mov	ar5,r6
      001E54 90r00r13         [24] 5864 	mov	dptr,#(_c + 0x0007)
      001E57 ED               [12] 5865 	mov	a,r5
      001E58 F0               [24] 5866 	movx	@dptr,a
                                   5867 ;	calc.c:393: (void)putchar(input);
      001E59 8E 82            [24] 5868 	mov	dpl,r6
      001E5B 8F 83            [24] 5869 	mov	dph,r7
      001E5D 12r00r00         [24] 5870 	lcall	_putchar
                                   5871 ;	calc.c:394: if ((char)input == 'q') {
      001E60 BD 71 29         [24] 5872 	cjne	r5,#0x71,00155$
                                   5873 ;	calc.c:395: if (state_exec(&s, EVENT_TERM) <= 0) break;
      001E63 74 07            [12] 5874 	mov	a,#0x07
      001E65 C0 E0            [24] 5875 	push	acc
      001E67 E4               [12] 5876 	clr	a
      001E68 C0 E0            [24] 5877 	push	acc
      001E6A 90r00r00         [24] 5878 	mov	dptr,#_s
      001E6D 75 F0 00         [24] 5879 	mov	b,#0x00
      001E70 12r00r00         [24] 5880 	lcall	_state_exec
      001E73 AB 82            [24] 5881 	mov	r3,dpl
      001E75 AC 83            [24] 5882 	mov	r4,dph
      001E77 15 81            [12] 5883 	dec	sp
      001E79 15 81            [12] 5884 	dec	sp
      001E7B C3               [12] 5885 	clr	c
      001E7C E4               [12] 5886 	clr	a
      001E7D 9B               [12] 5887 	subb	a,r3
      001E7E 74 80            [12] 5888 	mov	a,#(0x00 ^ 0x80)
      001E80 8C F0            [24] 5889 	mov	b,r4
      001E82 63 F0 80         [24] 5890 	xrl	b,#0x80
      001E85 95 F0            [12] 5891 	subb	a,b
      001E87 40 C2            [24] 5892 	jc	00158$
      001E89 02r20r40         [24] 5893 	ljmp	00159$
      001E8C                       5894 00155$:
                                   5895 ;	calc.c:396: } else if ((char)input == '?') {
      001E8C BD 3F 29         [24] 5896 	cjne	r5,#0x3f,00152$
                                   5897 ;	calc.c:397: if (state_exec(&s, EVENT_HELP) <= 0) break;
      001E8F 74 03            [12] 5898 	mov	a,#0x03
      001E91 C0 E0            [24] 5899 	push	acc
      001E93 E4               [12] 5900 	clr	a
      001E94 C0 E0            [24] 5901 	push	acc
      001E96 90r00r00         [24] 5902 	mov	dptr,#_s
      001E99 75 F0 00         [24] 5903 	mov	b,#0x00
      001E9C 12r00r00         [24] 5904 	lcall	_state_exec
      001E9F AB 82            [24] 5905 	mov	r3,dpl
      001EA1 AC 83            [24] 5906 	mov	r4,dph
      001EA3 15 81            [12] 5907 	dec	sp
      001EA5 15 81            [12] 5908 	dec	sp
      001EA7 C3               [12] 5909 	clr	c
      001EA8 E4               [12] 5910 	clr	a
      001EA9 9B               [12] 5911 	subb	a,r3
      001EAA 74 80            [12] 5912 	mov	a,#(0x00 ^ 0x80)
      001EAC 8C F0            [24] 5913 	mov	b,r4
      001EAE 63 F0 80         [24] 5914 	xrl	b,#0x80
      001EB1 95 F0            [12] 5915 	subb	a,b
      001EB3 40 96            [24] 5916 	jc	00158$
      001EB5 02r20r40         [24] 5917 	ljmp	00159$
      001EB8                       5918 00152$:
                                   5919 ;	calc.c:398: } else if ((char)input == 'i') {
      001EB8 BD 69 2C         [24] 5920 	cjne	r5,#0x69,00149$
                                   5921 ;	calc.c:399: if (state_exec(&s, EVENT_RSTA_i) <= 0) break;
      001EBB 74 05            [12] 5922 	mov	a,#0x05
      001EBD C0 E0            [24] 5923 	push	acc
      001EBF E4               [12] 5924 	clr	a
      001EC0 C0 E0            [24] 5925 	push	acc
      001EC2 90r00r00         [24] 5926 	mov	dptr,#_s
      001EC5 75 F0 00         [24] 5927 	mov	b,#0x00
      001EC8 12r00r00         [24] 5928 	lcall	_state_exec
      001ECB AB 82            [24] 5929 	mov	r3,dpl
      001ECD AC 83            [24] 5930 	mov	r4,dph
      001ECF 15 81            [12] 5931 	dec	sp
      001ED1 15 81            [12] 5932 	dec	sp
      001ED3 C3               [12] 5933 	clr	c
      001ED4 E4               [12] 5934 	clr	a
      001ED5 9B               [12] 5935 	subb	a,r3
      001ED6 74 80            [12] 5936 	mov	a,#(0x00 ^ 0x80)
      001ED8 8C F0            [24] 5937 	mov	b,r4
      001EDA 63 F0 80         [24] 5938 	xrl	b,#0x80
      001EDD 95 F0            [12] 5939 	subb	a,b
      001EDF 50 03            [24] 5940 	jnc	00298$
      001EE1 02r1Er4B         [24] 5941 	ljmp	00158$
      001EE4                       5942 00298$:
      001EE4 02r20r40         [24] 5943 	ljmp	00159$
      001EE7                       5944 00149$:
                                   5945 ;	calc.c:400: } else if ((char)input == 'I') {
      001EE7 BD 49 2C         [24] 5946 	cjne	r5,#0x49,00146$
                                   5947 ;	calc.c:401: if (state_exec(&s, EVENT_RSTA_I) <= 0) break;
      001EEA 74 06            [12] 5948 	mov	a,#0x06
      001EEC C0 E0            [24] 5949 	push	acc
      001EEE E4               [12] 5950 	clr	a
      001EEF C0 E0            [24] 5951 	push	acc
      001EF1 90r00r00         [24] 5952 	mov	dptr,#_s
      001EF4 75 F0 00         [24] 5953 	mov	b,#0x00
      001EF7 12r00r00         [24] 5954 	lcall	_state_exec
      001EFA AB 82            [24] 5955 	mov	r3,dpl
      001EFC AC 83            [24] 5956 	mov	r4,dph
      001EFE 15 81            [12] 5957 	dec	sp
      001F00 15 81            [12] 5958 	dec	sp
      001F02 C3               [12] 5959 	clr	c
      001F03 E4               [12] 5960 	clr	a
      001F04 9B               [12] 5961 	subb	a,r3
      001F05 74 80            [12] 5962 	mov	a,#(0x00 ^ 0x80)
      001F07 8C F0            [24] 5963 	mov	b,r4
      001F09 63 F0 80         [24] 5964 	xrl	b,#0x80
      001F0C 95 F0            [12] 5965 	subb	a,b
      001F0E 50 03            [24] 5966 	jnc	00301$
      001F10 02r1Er4B         [24] 5967 	ljmp	00158$
      001F13                       5968 00301$:
      001F13 02r20r40         [24] 5969 	ljmp	00159$
      001F16                       5970 00146$:
                                   5971 ;	calc.c:402: } else if (((char)input == 'h') || ((char)input == 'H') || ((char)input == 'o') || ((char)input == 'O')) {
      001F16 E4               [12] 5972 	clr	a
      001F17 BD 68 01         [24] 5973 	cjne	r5,#0x68,00302$
      001F1A 04               [12] 5974 	inc	a
      001F1B                       5975 00302$:
      001F1B FC               [12] 5976 	mov	r4,a
      001F1C 70 0F            [24] 5977 	jnz	00139$
      001F1E BD 48 01         [24] 5978 	cjne	r5,#0x48,00305$
      001F21 04               [12] 5979 	inc	a
      001F22                       5980 00305$:
      001F22 FB               [12] 5981 	mov	r3,a
      001F23 70 08            [24] 5982 	jnz	00139$
      001F25 BD 6F 02         [24] 5983 	cjne	r5,#0x6f,00308$
      001F28 80 03            [24] 5984 	sjmp	00139$
      001F2A                       5985 00308$:
      001F2A BD 4F 2C         [24] 5986 	cjne	r5,#0x4f,00140$
      001F2D                       5987 00139$:
                                   5988 ;	calc.c:403: if (state_exec(&s, EVENT_BASE) <= 0) break;
      001F2D 74 04            [12] 5989 	mov	a,#0x04
      001F2F C0 E0            [24] 5990 	push	acc
      001F31 E4               [12] 5991 	clr	a
      001F32 C0 E0            [24] 5992 	push	acc
      001F34 90r00r00         [24] 5993 	mov	dptr,#_s
      001F37 75 F0 00         [24] 5994 	mov	b,#0x00
      001F3A 12r00r00         [24] 5995 	lcall	_state_exec
      001F3D AF 82            [24] 5996 	mov	r7,dpl
      001F3F AE 83            [24] 5997 	mov	r6,dph
      001F41 15 81            [12] 5998 	dec	sp
      001F43 15 81            [12] 5999 	dec	sp
      001F45 C3               [12] 6000 	clr	c
      001F46 E4               [12] 6001 	clr	a
      001F47 9F               [12] 6002 	subb	a,r7
      001F48 74 80            [12] 6003 	mov	a,#(0x00 ^ 0x80)
      001F4A 8E F0            [24] 6004 	mov	b,r6
      001F4C 63 F0 80         [24] 6005 	xrl	b,#0x80
      001F4F 95 F0            [12] 6006 	subb	a,b
      001F51 50 03            [24] 6007 	jnc	00311$
      001F53 02r1Er4B         [24] 6008 	ljmp	00158$
      001F56                       6009 00311$:
      001F56 02r20r40         [24] 6010 	ljmp	00159$
      001F59                       6011 00140$:
                                   6012 ;	calc.c:404: } else if (isxdigit(input)) {
      001F59 8E 82            [24] 6013 	mov	dpl,r6
      001F5B 8F 83            [24] 6014 	mov	dph,r7
      001F5D C0 05            [24] 6015 	push	ar5
      001F5F C0 04            [24] 6016 	push	ar4
      001F61 C0 03            [24] 6017 	push	ar3
      001F63 12r00r00         [24] 6018 	lcall	_isxdigit
      001F66 E5 82            [12] 6019 	mov	a,dpl
      001F68 85 83 F0         [24] 6020 	mov	b,dph
      001F6B D0 03            [24] 6021 	pop	ar3
      001F6D D0 04            [24] 6022 	pop	ar4
      001F6F D0 05            [24] 6023 	pop	ar5
      001F71 45 F0            [12] 6024 	orl	a,b
      001F73 60 2C            [24] 6025 	jz	00137$
                                   6026 ;	calc.c:405: if (state_exec(&s, EVENT_DIGIT) <= 0) break;
      001F75 74 01            [12] 6027 	mov	a,#0x01
      001F77 C0 E0            [24] 6028 	push	acc
      001F79 E4               [12] 6029 	clr	a
      001F7A C0 E0            [24] 6030 	push	acc
      001F7C 90r00r00         [24] 6031 	mov	dptr,#_s
      001F7F 75 F0 00         [24] 6032 	mov	b,#0x00
      001F82 12r00r00         [24] 6033 	lcall	_state_exec
      001F85 AE 82            [24] 6034 	mov	r6,dpl
      001F87 AF 83            [24] 6035 	mov	r7,dph
      001F89 15 81            [12] 6036 	dec	sp
      001F8B 15 81            [12] 6037 	dec	sp
      001F8D C3               [12] 6038 	clr	c
      001F8E E4               [12] 6039 	clr	a
      001F8F 9E               [12] 6040 	subb	a,r6
      001F90 74 80            [12] 6041 	mov	a,#(0x00 ^ 0x80)
      001F92 8F F0            [24] 6042 	mov	b,r7
      001F94 63 F0 80         [24] 6043 	xrl	b,#0x80
      001F97 95 F0            [12] 6044 	subb	a,b
      001F99 50 03            [24] 6045 	jnc	00313$
      001F9B 02r1Er4B         [24] 6046 	ljmp	00158$
      001F9E                       6047 00313$:
      001F9E 02r20r40         [24] 6048 	ljmp	00159$
      001FA1                       6049 00137$:
                                   6050 ;	calc.c:407: ((char)input == 'h') || ((char)input == 'H') ||
      001FA1 EC               [12] 6051 	mov	a,r4
      001FA2 70 4C            [24] 6052 	jnz	00117$
      001FA4 EB               [12] 6053 	mov	a,r3
      001FA5 70 49            [24] 6054 	jnz	00117$
                                   6055 ;	calc.c:408: ((char)input == 'p') || ((char)input == 'P') ||
      001FA7 BD 70 02         [24] 6056 	cjne	r5,#0x70,00316$
      001FAA 80 44            [24] 6057 	sjmp	00117$
      001FAC                       6058 00316$:
      001FAC BD 50 02         [24] 6059 	cjne	r5,#0x50,00317$
      001FAF 80 3F            [24] 6060 	sjmp	00117$
      001FB1                       6061 00317$:
                                   6062 ;	calc.c:409: ((char)input == '.') || ((char)input == 'v') || ((char)input == 'V') ||
      001FB1 BD 2E 02         [24] 6063 	cjne	r5,#0x2e,00318$
      001FB4 80 3A            [24] 6064 	sjmp	00117$
      001FB6                       6065 00318$:
      001FB6 BD 76 02         [24] 6066 	cjne	r5,#0x76,00319$
      001FB9 80 35            [24] 6067 	sjmp	00117$
      001FBB                       6068 00319$:
      001FBB BD 56 02         [24] 6069 	cjne	r5,#0x56,00320$
      001FBE 80 30            [24] 6070 	sjmp	00117$
      001FC0                       6071 00320$:
                                   6072 ;	calc.c:410: ((char)input == 'x') ||
      001FC0 BD 78 02         [24] 6073 	cjne	r5,#0x78,00321$
      001FC3 80 2B            [24] 6074 	sjmp	00117$
      001FC5                       6075 00321$:
                                   6076 ;	calc.c:411: ((char)input == '+') ||
      001FC5 BD 2B 02         [24] 6077 	cjne	r5,#0x2b,00322$
      001FC8 80 26            [24] 6078 	sjmp	00117$
      001FCA                       6079 00322$:
                                   6080 ;	calc.c:412: ((char)input == '-') ||
      001FCA BD 2D 02         [24] 6081 	cjne	r5,#0x2d,00323$
      001FCD 80 21            [24] 6082 	sjmp	00117$
      001FCF                       6083 00323$:
                                   6084 ;	calc.c:413: ((char)input == '*') ||
      001FCF BD 2A 02         [24] 6085 	cjne	r5,#0x2a,00324$
      001FD2 80 1C            [24] 6086 	sjmp	00117$
      001FD4                       6087 00324$:
                                   6088 ;	calc.c:414: ((char)input == '/') ||
      001FD4 BD 2F 02         [24] 6089 	cjne	r5,#0x2f,00325$
      001FD7 80 17            [24] 6090 	sjmp	00117$
      001FD9                       6091 00325$:
                                   6092 ;	calc.c:415: ((char)input == '%') ||
      001FD9 BD 25 02         [24] 6093 	cjne	r5,#0x25,00326$
      001FDC 80 12            [24] 6094 	sjmp	00117$
      001FDE                       6095 00326$:
                                   6096 ;	calc.c:416: ((char)input == '&') ||
      001FDE BD 26 02         [24] 6097 	cjne	r5,#0x26,00327$
      001FE1 80 0D            [24] 6098 	sjmp	00117$
      001FE3                       6099 00327$:
                                   6100 ;	calc.c:417: ((char)input == '|') ||
      001FE3 BD 7C 02         [24] 6101 	cjne	r5,#0x7c,00328$
      001FE6 80 08            [24] 6102 	sjmp	00117$
      001FE8                       6103 00328$:
                                   6104 ;	calc.c:418: ((char)input == '^') ||
      001FE8 BD 5E 02         [24] 6105 	cjne	r5,#0x5e,00329$
      001FEB 80 03            [24] 6106 	sjmp	00117$
      001FED                       6107 00329$:
                                   6108 ;	calc.c:419: ((char)input == '~')
      001FED BD 7E 29         [24] 6109 	cjne	r5,#0x7e,00118$
      001FF0                       6110 00117$:
                                   6111 ;	calc.c:421: if (state_exec(&s, EVENT_OP) <= 0) break;
      001FF0 74 02            [12] 6112 	mov	a,#0x02
      001FF2 C0 E0            [24] 6113 	push	acc
      001FF4 E4               [12] 6114 	clr	a
      001FF5 C0 E0            [24] 6115 	push	acc
      001FF7 90r00r00         [24] 6116 	mov	dptr,#_s
      001FFA 75 F0 00         [24] 6117 	mov	b,#0x00
      001FFD 12r00r00         [24] 6118 	lcall	_state_exec
      002000 AE 82            [24] 6119 	mov	r6,dpl
      002002 AF 83            [24] 6120 	mov	r7,dph
      002004 15 81            [12] 6121 	dec	sp
      002006 15 81            [12] 6122 	dec	sp
      002008 C3               [12] 6123 	clr	c
      002009 E4               [12] 6124 	clr	a
      00200A 9E               [12] 6125 	subb	a,r6
      00200B 74 80            [12] 6126 	mov	a,#(0x00 ^ 0x80)
      00200D 8F F0            [24] 6127 	mov	b,r7
      00200F 63 F0 80         [24] 6128 	xrl	b,#0x80
      002012 95 F0            [12] 6129 	subb	a,b
      002014 50 2A            [24] 6130 	jnc	00159$
      002016 02r1Er4B         [24] 6131 	ljmp	00158$
      002019                       6132 00118$:
                                   6133 ;	calc.c:423: if (state_exec(&s, EVENT_DELIM) <= 0) break;
      002019 E4               [12] 6134 	clr	a
      00201A C0 E0            [24] 6135 	push	acc
      00201C C0 E0            [24] 6136 	push	acc
      00201E 90r00r00         [24] 6137 	mov	dptr,#_s
      002021 75 F0 00         [24] 6138 	mov	b,#0x00
      002024 12r00r00         [24] 6139 	lcall	_state_exec
      002027 AE 82            [24] 6140 	mov	r6,dpl
      002029 AF 83            [24] 6141 	mov	r7,dph
      00202B 15 81            [12] 6142 	dec	sp
      00202D 15 81            [12] 6143 	dec	sp
      00202F C3               [12] 6144 	clr	c
      002030 E4               [12] 6145 	clr	a
      002031 9E               [12] 6146 	subb	a,r6
      002032 74 80            [12] 6147 	mov	a,#(0x00 ^ 0x80)
      002034 8F F0            [24] 6148 	mov	b,r7
      002036 63 F0 80         [24] 6149 	xrl	b,#0x80
      002039 95 F0            [12] 6150 	subb	a,b
      00203B 50 03            [24] 6151 	jnc	00333$
      00203D 02r1Er4B         [24] 6152 	ljmp	00158$
      002040                       6153 00333$:
      002040                       6154 00159$:
                                   6155 ;	calc.c:429: __endasm;
      002040 43 87 02         [24] 6156 	orl	pcon, #2
                                   6157 ;	calc.c:430: }
      002043 22               [24] 6158 	ret
                                   6159 	.area CSEG    (CODE)
                                   6160 	.area CONST   (CODE)
                                   6161 	.area CONST   (CODE)
      000000                       6162 ___str_0:
      000000 0D                    6163 	.db 0x0d
      000001 0A                    6164 	.db 0x0a
      000002 00                    6165 	.db 0x00
                                   6166 	.area CSEG    (CODE)
                                   6167 	.area CONST   (CODE)
      000003                       6168 ___str_1:
      000003 73 74 61 63 6B 20 75  6169 	.ascii "stack underflow"
             6E 64 65 72 66 6C 6F
             77
      000012 0D                    6170 	.db 0x0d
      000013 0A                    6171 	.db 0x0a
      000014 00                    6172 	.db 0x00
                                   6173 	.area CSEG    (CODE)
                                   6174 	.area CONST   (CODE)
      000015                       6175 ___str_2:
      000015 56 41 20              6176 	.ascii "VA "
      000018 00                    6177 	.db 0x00
                                   6178 	.area CSEG    (CODE)
                                   6179 	.area CONST   (CODE)
      000019                       6180 ___str_3:
      000019 25 20 31 31 6C 64 20  6181 	.ascii "% 11ld / %08lx / "
             2F 20 25 30 38 6C 78
             20 2F 20
      00002A 00                    6182 	.db 0x00
                                   6183 	.area CSEG    (CODE)
                                   6184 	.area CONST   (CODE)
      00002B                       6185 ___str_4:
      00002B 50 41 20              6186 	.ascii "PA "
      00002E 00                    6187 	.db 0x00
                                   6188 	.area CSEG    (CODE)
                                   6189 	.area CONST   (CODE)
      00002F                       6190 ___str_5:
      00002F 50 54 20              6191 	.ascii "PT "
      000032 00                    6192 	.db 0x00
                                   6193 	.area CSEG    (CODE)
                                   6194 	.area CONST   (CODE)
      000033                       6195 ___str_6:
      000033 56 54 20              6196 	.ascii "VT "
      000036 00                    6197 	.db 0x00
                                   6198 	.area CSEG    (CODE)
                                   6199 	.area CONST   (CODE)
      000037                       6200 ___str_7:
      000037 0D                    6201 	.db 0x0d
      000038 0A                    6202 	.db 0x0a
      000039 73 74 61 63 6B 20 75  6203 	.ascii "stack underflow"
             6E 64 65 72 66 6C 6F
             77
      000048 0D                    6204 	.db 0x0d
      000049 0A                    6205 	.db 0x0a
      00004A 00                    6206 	.db 0x00
                                   6207 	.area CSEG    (CODE)
                                   6208 	.area CONST   (CODE)
      00004B                       6209 ___str_8:
      00004B 0D                    6210 	.db 0x0d
      00004C 0A                    6211 	.db 0x0a
      00004D 64 69 76 69 73 69 6F  6212 	.ascii "division by zero"
             6E 20 62 79 20 7A 65
             72 6F
      00005D 0D                    6213 	.db 0x0d
      00005E 0A                    6214 	.db 0x0a
      00005F 00                    6215 	.db 0x00
                                   6216 	.area CSEG    (CODE)
                                   6217 	.area CONST   (CODE)
      000060                       6218 ___str_9:
      000060 0D                    6219 	.db 0x0d
      000061 0A                    6220 	.db 0x0a
      000062 73 74 61 63 6B 20 6F  6221 	.ascii "stack overflow"
             76 65 72 66 6C 6F 77
      000070 0D                    6222 	.db 0x0d
      000071 0A                    6223 	.db 0x0a
      000072 00                    6224 	.db 0x00
                                   6225 	.area CSEG    (CODE)
                                   6226 	.area CONST   (CODE)
      000073                       6227 ___str_10:
      000073 0D                    6228 	.db 0x0d
      000074 0A                    6229 	.db 0x0a
      000075 62 61 73 65 20 3D 20  6230 	.ascii "base = %d, acc = %ld / %08lx / "
             25 64 2C 20 61 63 63
             20 3D 20 25 6C 64 20
             2F 20 25 30 38 6C 78
             20 2F 20
      000094 00                    6231 	.db 0x00
                                   6232 	.area CSEG    (CODE)
                                   6233 	.area CONST   (CODE)
      000095                       6234 ___str_11:
      000095 2C 20 61 63 63 5F 76  6235 	.ascii ", acc_valid = %d"
             61 6C 69 64 20 3D 20
             25 64
      0000A5 0D                    6236 	.db 0x0d
      0000A6 0A                    6237 	.db 0x0a
      0000A7 0D                    6238 	.db 0x0d
      0000A8 0A                    6239 	.db 0x0a
      0000A9 00                    6240 	.db 0x00
                                   6241 	.area CSEG    (CODE)
                                   6242 	.area CONST   (CODE)
      0000AA                       6243 ___str_12:
      0000AA 48 68 4F 6F           6244 	.ascii "HhOo"
      0000AE 09                    6245 	.db 0x09
      0000AF 62 61 73 65 20 31 36  6246 	.ascii "base 16 10 8 2"
             20 31 30 20 38 20 32
      0000BD 0D                    6247 	.db 0x0d
      0000BE 0A                    6248 	.db 0x0a
      0000BF 00                    6249 	.db 0x00
                                   6250 	.area CSEG    (CODE)
                                   6251 	.area CONST   (CODE)
      0000C0                       6252 ___str_13:
      0000C0 70                    6253 	.ascii "p"
      0000C1 09                    6254 	.db 0x09
      0000C2 70 65 65 6B 20 74 6F  6255 	.ascii "peek top"
             70
      0000CA 0D                    6256 	.db 0x0d
      0000CB 0A                    6257 	.db 0x0a
      0000CC 00                    6258 	.db 0x00
                                   6259 	.area CSEG    (CODE)
                                   6260 	.area CONST   (CODE)
      0000CD                       6261 ___str_14:
      0000CD 50                    6262 	.ascii "P"
      0000CE 09                    6263 	.db 0x09
      0000CF 70 72 69 6E 74 20 73  6264 	.ascii "print stack"
             74 61 63 6B
      0000DA 0D                    6265 	.db 0x0d
      0000DB 0A                    6266 	.db 0x0a
      0000DC 00                    6267 	.db 0x00
                                   6268 	.area CSEG    (CODE)
                                   6269 	.area CONST   (CODE)
      0000DD                       6270 ___str_15:
      0000DD 76 2E                 6271 	.ascii "v."
      0000DF 09                    6272 	.db 0x09
      0000E0 70 6F 70 20 74 6F 70  6273 	.ascii "pop top"
      0000E7 0D                    6274 	.db 0x0d
      0000E8 0A                    6275 	.db 0x0a
      0000E9 00                    6276 	.db 0x00
                                   6277 	.area CSEG    (CODE)
                                   6278 	.area CONST   (CODE)
      0000EA                       6279 ___str_16:
      0000EA 56                    6280 	.ascii "V"
      0000EB 09                    6281 	.db 0x09
      0000EC 70 6F 70 20 61 6C 6C  6282 	.ascii "pop all"
      0000F3 0D                    6283 	.db 0x0d
      0000F4 0A                    6284 	.db 0x0a
      0000F5 00                    6285 	.db 0x00
                                   6286 	.area CSEG    (CODE)
                                   6287 	.area CONST   (CODE)
      0000F6                       6288 ___str_17:
      0000F6 69                    6289 	.ascii "i"
      0000F7 09                    6290 	.db 0x09
      0000F8 72 65 73 65 74 20 61  6291 	.ascii "reset acc"
             63 63
      000101 0D                    6292 	.db 0x0d
      000102 0A                    6293 	.db 0x0a
      000103 00                    6294 	.db 0x00
                                   6295 	.area CSEG    (CODE)
                                   6296 	.area CONST   (CODE)
      000104                       6297 ___str_18:
      000104 49                    6298 	.ascii "I"
      000105 09                    6299 	.db 0x09
      000106 72 65 73 65 74 20 61  6300 	.ascii "reset and discard acc"
             6E 64 20 64 69 73 63
             61 72 64 20 61 63 63
      00011B 0D                    6301 	.db 0x0d
      00011C 0A                    6302 	.db 0x0a
      00011D 00                    6303 	.db 0x00
                                   6304 	.area CSEG    (CODE)
                                   6305 	.area CONST   (CODE)
      00011E                       6306 ___str_19:
      00011E 78                    6307 	.ascii "x"
      00011F 09                    6308 	.db 0x09
      000120 65 78 63 68 61 6E 67  6309 	.ascii "exchange top 2"
             65 20 74 6F 70 20 32
      00012E 0D                    6310 	.db 0x0d
      00012F 0A                    6311 	.db 0x0a
      000130 00                    6312 	.db 0x00
                                   6313 	.area CSEG    (CODE)
                                   6314 	.area CONST   (CODE)
      000131                       6315 ___str_20:
      000131 2B                    6316 	.ascii "+"
      000132 09                    6317 	.db 0x09
      000133 61 64 64 20 74 6F 70  6318 	.ascii "add top 2"
             20 32
      00013C 0D                    6319 	.db 0x0d
      00013D 0A                    6320 	.db 0x0a
      00013E 00                    6321 	.db 0x00
                                   6322 	.area CSEG    (CODE)
                                   6323 	.area CONST   (CODE)
      00013F                       6324 ___str_21:
      00013F 2D                    6325 	.ascii "-"
      000140 09                    6326 	.db 0x09
      000141 73 75 62 74 72 61 63  6327 	.ascii "subtract top 2"
             74 20 74 6F 70 20 32
      00014F 0D                    6328 	.db 0x0d
      000150 0A                    6329 	.db 0x0a
      000151 00                    6330 	.db 0x00
                                   6331 	.area CSEG    (CODE)
                                   6332 	.area CONST   (CODE)
      000152                       6333 ___str_22:
      000152 2A                    6334 	.ascii "*"
      000153 09                    6335 	.db 0x09
      000154 6D 75 6C 74 69 70 6C  6336 	.ascii "multiply top 2"
             79 20 74 6F 70 20 32
      000162 0D                    6337 	.db 0x0d
      000163 0A                    6338 	.db 0x0a
      000164 00                    6339 	.db 0x00
                                   6340 	.area CSEG    (CODE)
                                   6341 	.area CONST   (CODE)
      000165                       6342 ___str_23:
      000165 2F                    6343 	.ascii "/"
      000166 09                    6344 	.db 0x09
      000167 64 69 76 69 64 65 20  6345 	.ascii "divide top 2"
             74 6F 70 20 32
      000173 0D                    6346 	.db 0x0d
      000174 0A                    6347 	.db 0x0a
      000175 00                    6348 	.db 0x00
                                   6349 	.area CSEG    (CODE)
                                   6350 	.area CONST   (CODE)
      000176                       6351 ___str_24:
      000176 25                    6352 	.ascii "%"
      000177 09                    6353 	.db 0x09
      000178 6D 6F 64 75 6C 75 73  6354 	.ascii "modulus top 2"
             20 74 6F 70 20 32
      000185 0D                    6355 	.db 0x0d
      000186 0A                    6356 	.db 0x0a
      000187 00                    6357 	.db 0x00
                                   6358 	.area CSEG    (CODE)
                                   6359 	.area CONST   (CODE)
      000188                       6360 ___str_25:
      000188 26                    6361 	.ascii "&"
      000189 09                    6362 	.db 0x09
      00018A 61 6E 64 20 74 6F 70  6363 	.ascii "and top 2"
             20 32
      000193 0D                    6364 	.db 0x0d
      000194 0A                    6365 	.db 0x0a
      000195 00                    6366 	.db 0x00
                                   6367 	.area CSEG    (CODE)
                                   6368 	.area CONST   (CODE)
      000196                       6369 ___str_26:
      000196 7C                    6370 	.ascii "|"
      000197 09                    6371 	.db 0x09
      000198 6F 72 20 74 6F 70 20  6372 	.ascii "or top 2"
             32
      0001A0 0D                    6373 	.db 0x0d
      0001A1 0A                    6374 	.db 0x0a
      0001A2 00                    6375 	.db 0x00
                                   6376 	.area CSEG    (CODE)
                                   6377 	.area CONST   (CODE)
      0001A3                       6378 ___str_27:
      0001A3 5E                    6379 	.ascii "^"
      0001A4 09                    6380 	.db 0x09
      0001A5 78 6F 72 20 74 6F 70  6381 	.ascii "xor top 2"
             20 32
      0001AE 0D                    6382 	.db 0x0d
      0001AF 0A                    6383 	.db 0x0a
      0001B0 00                    6384 	.db 0x00
                                   6385 	.area CSEG    (CODE)
                                   6386 	.area CONST   (CODE)
      0001B1                       6387 ___str_28:
      0001B1 7E                    6388 	.ascii "~"
      0001B2 09                    6389 	.db 0x09
      0001B3 62 69 74 77 69 73 65  6390 	.ascii "bitwise not top"
             20 6E 6F 74 20 74 6F
             70
      0001C2 0D                    6391 	.db 0x0d
      0001C3 0A                    6392 	.db 0x0a
      0001C4 00                    6393 	.db 0x00
                                   6394 	.area CSEG    (CODE)
                                   6395 	.area CONST   (CODE)
      0001C5                       6396 ___str_29:
      0001C5 3F                    6397 	.ascii "?"
      0001C6 09                    6398 	.db 0x09
      0001C7 68 65 6C 70           6399 	.ascii "help"
      0001CB 0D                    6400 	.db 0x0d
      0001CC 0A                    6401 	.db 0x0a
      0001CD 00                    6402 	.db 0x00
                                   6403 	.area CSEG    (CODE)
                                   6404 	.area CONST   (CODE)
      0001CE                       6405 ___str_30:
      0001CE 71                    6406 	.ascii "q"
      0001CF 09                    6407 	.db 0x09
      0001D0 71 75 69 74           6408 	.ascii "quit"
      0001D4 0D                    6409 	.db 0x0d
      0001D5 0A                    6410 	.db 0x0a
      0001D6 00                    6411 	.db 0x00
                                   6412 	.area CSEG    (CODE)
                                   6413 	.area XINIT   (CODE)
      000000                       6414 __xinit__deltas:
      000000 00 00                 6415 	.byte #0x00, #0x00	;  0
      000002 00 00                 6416 	.byte #0x00, #0x00	;  0
      000004 00 00                 6417 	.byte #0x00, #0x00	;  0
      000006 00 00                 6418 	.byte #0x00,#0x00
      000008 00 00                 6419 	.byte #0x00,#0x00
      00000A 00 00                 6420 	.byte #0x00, #0x00	;  0
      00000C 01 00                 6421 	.byte #0x01, #0x00	;  1
      00000E 02 00                 6422 	.byte #0x02, #0x00	;  2
      000010 00 00                 6423 	.byte #0x00,#0x00
      000012rCBs00                 6424 	.byte _accumulate, (_accumulate >> 8)
      000014 00 00                 6425 	.byte #0x00, #0x00	;  0
      000016 02 00                 6426 	.byte #0x02, #0x00	;  2
      000018 01 00                 6427 	.byte #0x01, #0x00	;  1
      00001A 00 00                 6428 	.byte #0x00,#0x00
      00001CrFAs05                 6429 	.byte _operator, (_operator >> 8)
      00001E 01 00                 6430 	.byte #0x01, #0x00	;  1
      000020 00 00                 6431 	.byte #0x00, #0x00	;  0
      000022 00 00                 6432 	.byte #0x00, #0x00	;  0
      000024 00 00                 6433 	.byte #0x00,#0x00
      000026 00 00                 6434 	.byte #0x00,#0x00
      000028 01 00                 6435 	.byte #0x01, #0x00	;  1
      00002A 02 00                 6436 	.byte #0x02, #0x00	;  2
      00002C 01 00                 6437 	.byte #0x01, #0x00	;  1
      00002E 00 00                 6438 	.byte #0x00,#0x00
      000030rFAs05                 6439 	.byte _operator, (_operator >> 8)
      000032 01 00                 6440 	.byte #0x01, #0x00	;  1
      000034 01 00                 6441 	.byte #0x01, #0x00	;  1
      000036 02 00                 6442 	.byte #0x02, #0x00	;  2
      000038 00 00                 6443 	.byte #0x00,#0x00
      00003ArCBs00                 6444 	.byte _accumulate, (_accumulate >> 8)
      00003C 02 00                 6445 	.byte #0x02, #0x00	;  2
      00003E 00 00                 6446 	.byte #0x00, #0x00	;  0
      000040 00 00                 6447 	.byte #0x00, #0x00	;  0
      000042 00 00                 6448 	.byte #0x00,#0x00
      000044r0Fs18                 6449 	.byte _push_acc, (_push_acc >> 8)
      000046 02 00                 6450 	.byte #0x02, #0x00	;  2
      000048 06 00                 6451 	.byte #0x06, #0x00	;  6
      00004A 00 00                 6452 	.byte #0x00, #0x00	;  0
      00004C 00 00                 6453 	.byte #0x00,#0x00
      00004Er1Ds19                 6454 	.byte _reset_acc, (_reset_acc >> 8)
      000050 02 00                 6455 	.byte #0x02, #0x00	;  2
      000052 01 00                 6456 	.byte #0x01, #0x00	;  1
      000054 02 00                 6457 	.byte #0x02, #0x00	;  2
      000056 00 00                 6458 	.byte #0x00,#0x00
      000058rCBs00                 6459 	.byte _accumulate, (_accumulate >> 8)
      00005A 02 00                 6460 	.byte #0x02, #0x00	;  2
      00005C 02 00                 6461 	.byte #0x02, #0x00	;  2
      00005E 01 00                 6462 	.byte #0x01, #0x00	;  1
      000060 00 00                 6463 	.byte #0x00,#0x00
      000062r0Fs18                 6464 	.byte _push_acc, (_push_acc >> 8)
      000064 FF 7F                 6465 	.byte #0xff, #0x7f	;  32767
      000066 05 00                 6466 	.byte #0x05, #0x00	;  5
      000068 FF 7F                 6467 	.byte #0xff, #0x7f	;  32767
      00006A 00 00                 6468 	.byte #0x00,#0x00
      00006Cr1Ds19                 6469 	.byte _reset_acc, (_reset_acc >> 8)
      00006E FF 7F                 6470 	.byte #0xff, #0x7f	;  32767
      000070 06 00                 6471 	.byte #0x06, #0x00	;  6
      000072 FF 7F                 6472 	.byte #0xff, #0x7f	;  32767
      000074 00 00                 6473 	.byte #0x00,#0x00
      000076 00 00                 6474 	.byte #0x00,#0x00
      000078 FF 7F                 6475 	.byte #0xff, #0x7f	;  32767
      00007A 04 00                 6476 	.byte #0x04, #0x00	;  4
      00007C FF 7F                 6477 	.byte #0xff, #0x7f	;  32767
      00007E 00 00                 6478 	.byte #0x00,#0x00
      000080r87s19                 6479 	.byte _reset_base, (_reset_base >> 8)
      000082 FF 7F                 6480 	.byte #0xff, #0x7f	;  32767
      000084 03 00                 6481 	.byte #0x03, #0x00	;  3
      000086 FF 7F                 6482 	.byte #0xff, #0x7f	;  32767
      000088 00 00                 6483 	.byte #0x00,#0x00
      00008Ar05s1A                 6484 	.byte _help, (_help >> 8)
      00008C FF 7F                 6485 	.byte #0xff, #0x7f	;  32767
      00008E 07 00                 6486 	.byte #0x07, #0x00	;  7
      000090 03 00                 6487 	.byte #0x03, #0x00	;  3
      000092 00 00                 6488 	.byte #0x00,#0x00
      000094r3Cs02                 6489 	.byte _dump_pop, (_dump_pop >> 8)
      000096 00 80                 6490 	.byte #0x00, #0x80	; -32768
      000098 00 80                 6491 	.byte #0x00, #0x80	; -32768
      00009A 00 80                 6492 	.byte #0x00, #0x80	; -32768
      00009C 00 00                 6493 	.byte #0x00,#0x00
      00009E 00 00                 6494 	.byte #0x00,#0x00
                                   6495 	.area CABS    (ABS,CODE)
