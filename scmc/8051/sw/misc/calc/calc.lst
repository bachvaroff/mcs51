                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module calc
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _getchar_poll
                                     13 	.globl _state_exec
                                     14 	.globl _state_init
                                     15 	.globl _stack_iter_peek
                                     16 	.globl _stack_peek
                                     17 	.globl _stack_pop
                                     18 	.globl _stack_push
                                     19 	.globl _stack_init
                                     20 	.globl _isxdigit
                                     21 	.globl _printf
                                     22 	.globl _strtol
                                     23 	.globl _CY
                                     24 	.globl _AC
                                     25 	.globl _F0
                                     26 	.globl _RS1
                                     27 	.globl _RS0
                                     28 	.globl _OV
                                     29 	.globl _FL
                                     30 	.globl _P
                                     31 	.globl _TF2
                                     32 	.globl _EXF2
                                     33 	.globl _RCLK
                                     34 	.globl _TCLK
                                     35 	.globl _EXEN2
                                     36 	.globl _TR2
                                     37 	.globl _C_T2
                                     38 	.globl _CP_RL2
                                     39 	.globl _T2CON_7
                                     40 	.globl _T2CON_6
                                     41 	.globl _T2CON_5
                                     42 	.globl _T2CON_4
                                     43 	.globl _T2CON_3
                                     44 	.globl _T2CON_2
                                     45 	.globl _T2CON_1
                                     46 	.globl _T2CON_0
                                     47 	.globl _PT2
                                     48 	.globl _PS
                                     49 	.globl _PT1
                                     50 	.globl _PX1
                                     51 	.globl _PT0
                                     52 	.globl _PX0
                                     53 	.globl _RD
                                     54 	.globl _WR
                                     55 	.globl _T1
                                     56 	.globl _T0
                                     57 	.globl _INT1
                                     58 	.globl _INT0
                                     59 	.globl _TXD
                                     60 	.globl _RXD
                                     61 	.globl _P3_7
                                     62 	.globl _P3_6
                                     63 	.globl _P3_5
                                     64 	.globl _P3_4
                                     65 	.globl _P3_3
                                     66 	.globl _P3_2
                                     67 	.globl _P3_1
                                     68 	.globl _P3_0
                                     69 	.globl _EA
                                     70 	.globl _ET2
                                     71 	.globl _ES
                                     72 	.globl _ET1
                                     73 	.globl _EX1
                                     74 	.globl _ET0
                                     75 	.globl _EX0
                                     76 	.globl _P2_7
                                     77 	.globl _P2_6
                                     78 	.globl _P2_5
                                     79 	.globl _P2_4
                                     80 	.globl _P2_3
                                     81 	.globl _P2_2
                                     82 	.globl _P2_1
                                     83 	.globl _P2_0
                                     84 	.globl _SM0
                                     85 	.globl _SM1
                                     86 	.globl _SM2
                                     87 	.globl _REN
                                     88 	.globl _TB8
                                     89 	.globl _RB8
                                     90 	.globl _TI
                                     91 	.globl _RI
                                     92 	.globl _T2EX
                                     93 	.globl _T2
                                     94 	.globl _P1_7
                                     95 	.globl _P1_6
                                     96 	.globl _P1_5
                                     97 	.globl _P1_4
                                     98 	.globl _P1_3
                                     99 	.globl _P1_2
                                    100 	.globl _P1_1
                                    101 	.globl _P1_0
                                    102 	.globl _TF1
                                    103 	.globl _TR1
                                    104 	.globl _TF0
                                    105 	.globl _TR0
                                    106 	.globl _IE1
                                    107 	.globl _IT1
                                    108 	.globl _IE0
                                    109 	.globl _IT0
                                    110 	.globl _P0_7
                                    111 	.globl _P0_6
                                    112 	.globl _P0_5
                                    113 	.globl _P0_4
                                    114 	.globl _P0_3
                                    115 	.globl _P0_2
                                    116 	.globl _P0_1
                                    117 	.globl _P0_0
                                    118 	.globl _B
                                    119 	.globl _A
                                    120 	.globl _ACC
                                    121 	.globl _PSW
                                    122 	.globl _TH2
                                    123 	.globl _TL2
                                    124 	.globl _RCAP2H
                                    125 	.globl _RCAP2L
                                    126 	.globl _T2MOD
                                    127 	.globl _T2CON
                                    128 	.globl _IP
                                    129 	.globl _P3
                                    130 	.globl _IE
                                    131 	.globl _P2
                                    132 	.globl _SBUF
                                    133 	.globl _SCON
                                    134 	.globl _P1
                                    135 	.globl _TH1
                                    136 	.globl _TH0
                                    137 	.globl _TL1
                                    138 	.globl _TL0
                                    139 	.globl _TMOD
                                    140 	.globl _TCON
                                    141 	.globl _PCON
                                    142 	.globl _DPH
                                    143 	.globl _DPL
                                    144 	.globl _SP
                                    145 	.globl _P0
                                    146 	.globl _putchar
                                    147 	.globl _getchar
                                    148 ;--------------------------------------------------------
                                    149 ; special function registers
                                    150 ;--------------------------------------------------------
                                    151 	.area RSEG    (ABS,DATA)
      000000                        152 	.org 0x0000
                           000080   153 _P0	=	0x0080
                           000081   154 _SP	=	0x0081
                           000082   155 _DPL	=	0x0082
                           000083   156 _DPH	=	0x0083
                           000087   157 _PCON	=	0x0087
                           000088   158 _TCON	=	0x0088
                           000089   159 _TMOD	=	0x0089
                           00008A   160 _TL0	=	0x008a
                           00008B   161 _TL1	=	0x008b
                           00008C   162 _TH0	=	0x008c
                           00008D   163 _TH1	=	0x008d
                           000090   164 _P1	=	0x0090
                           000098   165 _SCON	=	0x0098
                           000099   166 _SBUF	=	0x0099
                           0000A0   167 _P2	=	0x00a0
                           0000A8   168 _IE	=	0x00a8
                           0000B0   169 _P3	=	0x00b0
                           0000B8   170 _IP	=	0x00b8
                           0000C8   171 _T2CON	=	0x00c8
                           0000C9   172 _T2MOD	=	0x00c9
                           0000CA   173 _RCAP2L	=	0x00ca
                           0000CB   174 _RCAP2H	=	0x00cb
                           0000CC   175 _TL2	=	0x00cc
                           0000CD   176 _TH2	=	0x00cd
                           0000D0   177 _PSW	=	0x00d0
                           0000E0   178 _ACC	=	0x00e0
                           0000E0   179 _A	=	0x00e0
                           0000F0   180 _B	=	0x00f0
                                    181 ;--------------------------------------------------------
                                    182 ; special function bits
                                    183 ;--------------------------------------------------------
                                    184 	.area RSEG    (ABS,DATA)
      000000                        185 	.org 0x0000
                           000080   186 _P0_0	=	0x0080
                           000081   187 _P0_1	=	0x0081
                           000082   188 _P0_2	=	0x0082
                           000083   189 _P0_3	=	0x0083
                           000084   190 _P0_4	=	0x0084
                           000085   191 _P0_5	=	0x0085
                           000086   192 _P0_6	=	0x0086
                           000087   193 _P0_7	=	0x0087
                           000088   194 _IT0	=	0x0088
                           000089   195 _IE0	=	0x0089
                           00008A   196 _IT1	=	0x008a
                           00008B   197 _IE1	=	0x008b
                           00008C   198 _TR0	=	0x008c
                           00008D   199 _TF0	=	0x008d
                           00008E   200 _TR1	=	0x008e
                           00008F   201 _TF1	=	0x008f
                           000090   202 _P1_0	=	0x0090
                           000091   203 _P1_1	=	0x0091
                           000092   204 _P1_2	=	0x0092
                           000093   205 _P1_3	=	0x0093
                           000094   206 _P1_4	=	0x0094
                           000095   207 _P1_5	=	0x0095
                           000096   208 _P1_6	=	0x0096
                           000097   209 _P1_7	=	0x0097
                           000090   210 _T2	=	0x0090
                           000091   211 _T2EX	=	0x0091
                           000098   212 _RI	=	0x0098
                           000099   213 _TI	=	0x0099
                           00009A   214 _RB8	=	0x009a
                           00009B   215 _TB8	=	0x009b
                           00009C   216 _REN	=	0x009c
                           00009D   217 _SM2	=	0x009d
                           00009E   218 _SM1	=	0x009e
                           00009F   219 _SM0	=	0x009f
                           0000A0   220 _P2_0	=	0x00a0
                           0000A1   221 _P2_1	=	0x00a1
                           0000A2   222 _P2_2	=	0x00a2
                           0000A3   223 _P2_3	=	0x00a3
                           0000A4   224 _P2_4	=	0x00a4
                           0000A5   225 _P2_5	=	0x00a5
                           0000A6   226 _P2_6	=	0x00a6
                           0000A7   227 _P2_7	=	0x00a7
                           0000A8   228 _EX0	=	0x00a8
                           0000A9   229 _ET0	=	0x00a9
                           0000AA   230 _EX1	=	0x00aa
                           0000AB   231 _ET1	=	0x00ab
                           0000AC   232 _ES	=	0x00ac
                           0000AD   233 _ET2	=	0x00ad
                           0000AF   234 _EA	=	0x00af
                           0000B0   235 _P3_0	=	0x00b0
                           0000B1   236 _P3_1	=	0x00b1
                           0000B2   237 _P3_2	=	0x00b2
                           0000B3   238 _P3_3	=	0x00b3
                           0000B4   239 _P3_4	=	0x00b4
                           0000B5   240 _P3_5	=	0x00b5
                           0000B6   241 _P3_6	=	0x00b6
                           0000B7   242 _P3_7	=	0x00b7
                           0000B0   243 _RXD	=	0x00b0
                           0000B1   244 _TXD	=	0x00b1
                           0000B2   245 _INT0	=	0x00b2
                           0000B3   246 _INT1	=	0x00b3
                           0000B4   247 _T0	=	0x00b4
                           0000B5   248 _T1	=	0x00b5
                           0000B6   249 _WR	=	0x00b6
                           0000B7   250 _RD	=	0x00b7
                           0000B8   251 _PX0	=	0x00b8
                           0000B9   252 _PT0	=	0x00b9
                           0000BA   253 _PX1	=	0x00ba
                           0000BB   254 _PT1	=	0x00bb
                           0000BC   255 _PS	=	0x00bc
                           0000BD   256 _PT2	=	0x00bd
                           0000C8   257 _T2CON_0	=	0x00c8
                           0000C9   258 _T2CON_1	=	0x00c9
                           0000CA   259 _T2CON_2	=	0x00ca
                           0000CB   260 _T2CON_3	=	0x00cb
                           0000CC   261 _T2CON_4	=	0x00cc
                           0000CD   262 _T2CON_5	=	0x00cd
                           0000CE   263 _T2CON_6	=	0x00ce
                           0000CF   264 _T2CON_7	=	0x00cf
                           0000C8   265 _CP_RL2	=	0x00c8
                           0000C9   266 _C_T2	=	0x00c9
                           0000CA   267 _TR2	=	0x00ca
                           0000CB   268 _EXEN2	=	0x00cb
                           0000CC   269 _TCLK	=	0x00cc
                           0000CD   270 _RCLK	=	0x00cd
                           0000CE   271 _EXF2	=	0x00ce
                           0000CF   272 _TF2	=	0x00cf
                           0000D0   273 _P	=	0x00d0
                           0000D1   274 _FL	=	0x00d1
                           0000D2   275 _OV	=	0x00d2
                           0000D3   276 _RS0	=	0x00d3
                           0000D4   277 _RS1	=	0x00d4
                           0000D5   278 _F0	=	0x00d5
                           0000D6   279 _AC	=	0x00d6
                           0000D7   280 _CY	=	0x00d7
                                    281 ;--------------------------------------------------------
                                    282 ; overlayable register banks
                                    283 ;--------------------------------------------------------
                                    284 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        285 	.ds 8
                                    286 ;--------------------------------------------------------
                                    287 ; internal ram data
                                    288 ;--------------------------------------------------------
                                    289 	.area DSEG    (DATA)
                                    290 ;--------------------------------------------------------
                                    291 ; overlayable items in internal ram 
                                    292 ;--------------------------------------------------------
                                    293 ;--------------------------------------------------------
                                    294 ; Stack segment in internal ram 
                                    295 ;--------------------------------------------------------
                                    296 	.area	SSEG
      000000                        297 __start__stack:
      000000                        298 	.ds	1
                                    299 
                                    300 ;--------------------------------------------------------
                                    301 ; indirectly addressable internal ram data
                                    302 ;--------------------------------------------------------
                                    303 	.area ISEG    (DATA)
                                    304 ;--------------------------------------------------------
                                    305 ; absolute internal ram data
                                    306 ;--------------------------------------------------------
                                    307 	.area IABS    (ABS,DATA)
                                    308 	.area IABS    (ABS,DATA)
                                    309 ;--------------------------------------------------------
                                    310 ; bit data
                                    311 ;--------------------------------------------------------
                                    312 	.area BSEG    (BIT)
                                    313 ;--------------------------------------------------------
                                    314 ; paged external ram data
                                    315 ;--------------------------------------------------------
                                    316 	.area PSEG    (PAG,XDATA)
                                    317 ;--------------------------------------------------------
                                    318 ; external ram data
                                    319 ;--------------------------------------------------------
                                    320 	.area XSEG    (XDATA)
      000000                        321 _s:
      000000                        322 	.ds 12
      00000C                        323 _c:
      00000C                        324 	.ds 16407
                                    325 ;--------------------------------------------------------
                                    326 ; absolute external ram data
                                    327 ;--------------------------------------------------------
                                    328 	.area XABS    (ABS,XDATA)
                                    329 ;--------------------------------------------------------
                                    330 ; external initialized ram data
                                    331 ;--------------------------------------------------------
                                    332 	.area XISEG   (XDATA)
      000000                        333 _deltas:
      000000                        334 	.ds 170
                                    335 	.area HOME    (CODE)
                                    336 	.area GSINIT0 (CODE)
                                    337 	.area GSINIT1 (CODE)
                                    338 	.area GSINIT2 (CODE)
                                    339 	.area GSINIT3 (CODE)
                                    340 	.area GSINIT4 (CODE)
                                    341 	.area GSINIT5 (CODE)
                                    342 	.area GSINIT  (CODE)
                                    343 	.area GSFINAL (CODE)
                                    344 	.area CSEG    (CODE)
                                    345 ;--------------------------------------------------------
                                    346 ; interrupt vector 
                                    347 ;--------------------------------------------------------
                                    348 	.area HOME    (CODE)
      000000                        349 __interrupt_vect:
      000000 02r00r00         [24]  350 	ljmp	__sdcc_gsinit_startup
                                    351 ;--------------------------------------------------------
                                    352 ; global & static initialisations
                                    353 ;--------------------------------------------------------
                                    354 	.area HOME    (CODE)
                                    355 	.area GSINIT  (CODE)
                                    356 	.area GSFINAL (CODE)
                                    357 	.area GSINIT  (CODE)
                                    358 	.globl __sdcc_gsinit_startup
                                    359 	.globl __sdcc_program_startup
                                    360 	.globl __start__stack
                                    361 	.globl __mcs51_genXINIT
                                    362 	.globl __mcs51_genXRAMCLEAR
                                    363 	.globl __mcs51_genRAMCLEAR
                                    364 	.area GSFINAL (CODE)
      000000 02r00r03         [24]  365 	ljmp	__sdcc_program_startup
                                    366 ;--------------------------------------------------------
                                    367 ; Home
                                    368 ;--------------------------------------------------------
                                    369 	.area HOME    (CODE)
                                    370 	.area HOME    (CODE)
      000003                        371 __sdcc_program_startup:
      000003 02r32r91         [24]  372 	ljmp	_main
                                    373 ;	return from main will return to caller
                                    374 ;--------------------------------------------------------
                                    375 ; code
                                    376 ;--------------------------------------------------------
                                    377 	.area CSEG    (CODE)
                                    378 ;------------------------------------------------------------
                                    379 ;Allocation info for local variables in function 'putchar'
                                    380 ;------------------------------------------------------------
                                    381 ;c                         Allocated to registers 
                                    382 ;------------------------------------------------------------
                                    383 ;	calc.c:16: int putchar(int c) __naked {
                                    384 ;	-----------------------------------------
                                    385 ;	 function putchar
                                    386 ;	-----------------------------------------
      000000                        387 _putchar:
                                    388 ;	naked function: no prologue.
                                    389 ;	calc.c:21: __endasm;
      000000 E5 82            [12]  390 	mov	a, dpl
      000002 02 00 30         [24]  391 	ljmp	0x0030
                                    392 ;	calc.c:22: }
                                    393 ;	naked function: no epilogue.
                                    394 ;------------------------------------------------------------
                                    395 ;Allocation info for local variables in function 'getchar'
                                    396 ;------------------------------------------------------------
                                    397 ;	calc.c:24: int getchar(void) __naked {
                                    398 ;	-----------------------------------------
                                    399 ;	 function getchar
                                    400 ;	-----------------------------------------
      000005                        401 _getchar:
                                    402 ;	naked function: no prologue.
                                    403 ;	calc.c:30: __endasm;
      000005 12 00 32         [24]  404 	lcall	0x0032
      000008 F5 82            [12]  405 	mov	dpl, a
      00000A 75 83 00         [24]  406 	mov	dph, #0
      00000D 22               [24]  407 	ret
                                    408 ;	calc.c:31: }
                                    409 ;	naked function: no epilogue.
                                    410 ;------------------------------------------------------------
                                    411 ;Allocation info for local variables in function 'getchar_poll'
                                    412 ;------------------------------------------------------------
                                    413 ;	calc.c:33: int getchar_poll(void) __naked {
                                    414 ;	-----------------------------------------
                                    415 ;	 function getchar_poll
                                    416 ;	-----------------------------------------
      00000E                        417 _getchar_poll:
                                    418 ;	naked function: no prologue.
                                    419 ;	calc.c:45: __endasm;
      00000E 74 FF            [12]  420 	mov	a, #0xff
      000010 F5 F0            [12]  421 	mov	b, a
      000012 30 98 07         [24]  422 	jnb	ri, nochar
      000015 C2 98            [12]  423 	clr	ri
      000017 E5 99            [12]  424 	mov	a, sbuf
      000019 75 F0 00         [24]  425 	mov	b, #0
      00001C                        426 	nochar:
      00001C F5 82            [12]  427 	mov	dpl, a
      00001E 85 F0 83         [24]  428 	mov	dph, b
      000021 22               [24]  429 	ret
                                    430 ;	calc.c:46: }
                                    431 ;	naked function: no epilogue.
                                    432 ;------------------------------------------------------------
                                    433 ;Allocation info for local variables in function 'accumulate'
                                    434 ;------------------------------------------------------------
                                    435 ;delta                     Allocated to stack - _bp -5
                                    436 ;_ctx                      Allocated to registers r5 r6 r7 
                                    437 ;ctx                       Allocated to stack - _bp +8
                                    438 ;d                         Allocated to stack - _bp +11
                                    439 ;sloc0                     Allocated to stack - _bp +1
                                    440 ;sloc1                     Allocated to stack - _bp +4
                                    441 ;------------------------------------------------------------
                                    442 ;	calc.c:63: static int accumulate(void *_ctx, delta_t *delta) __reentrant {
                                    443 ;	-----------------------------------------
                                    444 ;	 function accumulate
                                    445 ;	-----------------------------------------
      000022                        446 _accumulate:
                           000007   447 	ar7 = 0x07
                           000006   448 	ar6 = 0x06
                           000005   449 	ar5 = 0x05
                           000004   450 	ar4 = 0x04
                           000003   451 	ar3 = 0x03
                           000002   452 	ar2 = 0x02
                           000001   453 	ar1 = 0x01
                           000000   454 	ar0 = 0x00
      000022 C0*00            [24]  455 	push	_bp
      000024 E5 81            [12]  456 	mov	a,sp
      000026 F5*00            [12]  457 	mov	_bp,a
      000028 24 0E            [12]  458 	add	a,#0x0e
      00002A F5 81            [12]  459 	mov	sp,a
      00002C AD 82            [24]  460 	mov	r5,dpl
      00002E AE 83            [24]  461 	mov	r6,dph
      000030 AF F0            [24]  462 	mov	r7,b
                                    463 ;	calc.c:64: calc_ctx_t *ctx = (calc_ctx_t *)_ctx;
      000032 E5*00            [12]  464 	mov	a,_bp
      000034 24 08            [12]  465 	add	a,#0x08
      000036 F8               [12]  466 	mov	r0,a
      000037 A6 05            [24]  467 	mov	@r0,ar5
      000039 08               [12]  468 	inc	r0
      00003A A6 06            [24]  469 	mov	@r0,ar6
      00003C 08               [12]  470 	inc	r0
      00003D A6 07            [24]  471 	mov	@r0,ar7
                                    472 ;	calc.c:69: if (!ctx->acc_valid) {
      00003F E5*00            [12]  473 	mov	a,_bp
      000041 24 08            [12]  474 	add	a,#0x08
      000043 F8               [12]  475 	mov	r0,a
      000044 74 06            [12]  476 	mov	a,#0x06
      000046 26               [12]  477 	add	a,@r0
      000047 FA               [12]  478 	mov	r2,a
      000048 E4               [12]  479 	clr	a
      000049 08               [12]  480 	inc	r0
      00004A 36               [12]  481 	addc	a,@r0
      00004B FB               [12]  482 	mov	r3,a
      00004C 08               [12]  483 	inc	r0
      00004D 86 04            [24]  484 	mov	ar4,@r0
      00004F 8A 82            [24]  485 	mov	dpl,r2
      000051 8B 83            [24]  486 	mov	dph,r3
      000053 8C F0            [24]  487 	mov	b,r4
      000055 12r00r00         [24]  488 	lcall	__gptrget
      000058 70 31            [24]  489 	jnz	00102$
                                    490 ;	calc.c:70: ctx->acc_valid = 1;
      00005A 8A 82            [24]  491 	mov	dpl,r2
      00005C 8B 83            [24]  492 	mov	dph,r3
      00005E 8C F0            [24]  493 	mov	b,r4
      000060 74 01            [12]  494 	mov	a,#0x01
      000062 12r00r00         [24]  495 	lcall	__gptrput
                                    496 ;	calc.c:71: ctx->acc = 0l;
      000065 E5*00            [12]  497 	mov	a,_bp
      000067 24 08            [12]  498 	add	a,#0x08
      000069 F8               [12]  499 	mov	r0,a
      00006A 74 02            [12]  500 	mov	a,#0x02
      00006C 26               [12]  501 	add	a,@r0
      00006D FA               [12]  502 	mov	r2,a
      00006E E4               [12]  503 	clr	a
      00006F 08               [12]  504 	inc	r0
      000070 36               [12]  505 	addc	a,@r0
      000071 FB               [12]  506 	mov	r3,a
      000072 08               [12]  507 	inc	r0
      000073 86 04            [24]  508 	mov	ar4,@r0
      000075 8A 82            [24]  509 	mov	dpl,r2
      000077 8B 83            [24]  510 	mov	dph,r3
      000079 8C F0            [24]  511 	mov	b,r4
      00007B E4               [12]  512 	clr	a
      00007C 12r00r00         [24]  513 	lcall	__gptrput
      00007F A3               [24]  514 	inc	dptr
      000080 12r00r00         [24]  515 	lcall	__gptrput
      000083 A3               [24]  516 	inc	dptr
      000084 12r00r00         [24]  517 	lcall	__gptrput
      000087 A3               [24]  518 	inc	dptr
      000088 12r00r00         [24]  519 	lcall	__gptrput
      00008B                        520 00102$:
                                    521 ;	calc.c:74: d = strtol(ctx->digit, NULL, ctx->base);
      00008B E5*00            [12]  522 	mov	a,_bp
      00008D 24 08            [12]  523 	add	a,#0x08
      00008F F8               [12]  524 	mov	r0,a
      000090 86 82            [24]  525 	mov	dpl,@r0
      000092 08               [12]  526 	inc	r0
      000093 86 83            [24]  527 	mov	dph,@r0
      000095 08               [12]  528 	inc	r0
      000096 86 F0            [24]  529 	mov	b,@r0
      000098 12r00r00         [24]  530 	lcall	__gptrget
      00009B FB               [12]  531 	mov	r3,a
      00009C A3               [24]  532 	inc	dptr
      00009D 12r00r00         [24]  533 	lcall	__gptrget
      0000A0 FC               [12]  534 	mov	r4,a
      0000A1 E5*00            [12]  535 	mov	a,_bp
      0000A3 24 08            [12]  536 	add	a,#0x08
      0000A5 F8               [12]  537 	mov	r0,a
      0000A6 74 07            [12]  538 	mov	a,#0x07
      0000A8 26               [12]  539 	add	a,@r0
      0000A9 FA               [12]  540 	mov	r2,a
      0000AA E4               [12]  541 	clr	a
      0000AB 08               [12]  542 	inc	r0
      0000AC 36               [12]  543 	addc	a,@r0
      0000AD FE               [12]  544 	mov	r6,a
      0000AE 08               [12]  545 	inc	r0
      0000AF 86 07            [24]  546 	mov	ar7,@r0
      0000B1 C0 03            [24]  547 	push	ar3
      0000B3 C0 04            [24]  548 	push	ar4
      0000B5 E4               [12]  549 	clr	a
      0000B6 C0 E0            [24]  550 	push	acc
      0000B8 C0 E0            [24]  551 	push	acc
      0000BA C0 E0            [24]  552 	push	acc
      0000BC 8A 82            [24]  553 	mov	dpl,r2
      0000BE 8E 83            [24]  554 	mov	dph,r6
      0000C0 8F F0            [24]  555 	mov	b,r7
      0000C2 12r00r00         [24]  556 	lcall	_strtol
      0000C5 C8               [12]  557 	xch	a,r0
      0000C6 E5*00            [12]  558 	mov	a,_bp
      0000C8 24 0B            [12]  559 	add	a,#0x0b
      0000CA C8               [12]  560 	xch	a,r0
      0000CB A6 82            [24]  561 	mov	@r0,dpl
      0000CD 08               [12]  562 	inc	r0
      0000CE A6 83            [24]  563 	mov	@r0,dph
      0000D0 08               [12]  564 	inc	r0
      0000D1 A6 F0            [24]  565 	mov	@r0,b
      0000D3 08               [12]  566 	inc	r0
      0000D4 F6               [12]  567 	mov	@r0,a
      0000D5 E5 81            [12]  568 	mov	a,sp
      0000D7 24 FB            [12]  569 	add	a,#0xfb
      0000D9 F5 81            [12]  570 	mov	sp,a
                                    571 ;	calc.c:75: ctx->acc = ctx->acc * (long)ctx->base + d;
      0000DB E5*00            [12]  572 	mov	a,_bp
      0000DD 24 08            [12]  573 	add	a,#0x08
      0000DF F8               [12]  574 	mov	r0,a
      0000E0 A9*00            [24]  575 	mov	r1,_bp
      0000E2 09               [12]  576 	inc	r1
      0000E3 74 02            [12]  577 	mov	a,#0x02
      0000E5 26               [12]  578 	add	a,@r0
      0000E6 F7               [12]  579 	mov	@r1,a
      0000E7 E4               [12]  580 	clr	a
      0000E8 08               [12]  581 	inc	r0
      0000E9 36               [12]  582 	addc	a,@r0
      0000EA 09               [12]  583 	inc	r1
      0000EB F7               [12]  584 	mov	@r1,a
      0000EC 08               [12]  585 	inc	r0
      0000ED 09               [12]  586 	inc	r1
      0000EE E6               [12]  587 	mov	a,@r0
      0000EF F7               [12]  588 	mov	@r1,a
      0000F0 A8*00            [24]  589 	mov	r0,_bp
      0000F2 08               [12]  590 	inc	r0
      0000F3 86 82            [24]  591 	mov	dpl,@r0
      0000F5 08               [12]  592 	inc	r0
      0000F6 86 83            [24]  593 	mov	dph,@r0
      0000F8 08               [12]  594 	inc	r0
      0000F9 86 F0            [24]  595 	mov	b,@r0
      0000FB E5*00            [12]  596 	mov	a,_bp
      0000FD 24 04            [12]  597 	add	a,#0x04
      0000FF F9               [12]  598 	mov	r1,a
      000100 12r00r00         [24]  599 	lcall	__gptrget
      000103 F7               [12]  600 	mov	@r1,a
      000104 A3               [24]  601 	inc	dptr
      000105 12r00r00         [24]  602 	lcall	__gptrget
      000108 09               [12]  603 	inc	r1
      000109 F7               [12]  604 	mov	@r1,a
      00010A A3               [24]  605 	inc	dptr
      00010B 12r00r00         [24]  606 	lcall	__gptrget
      00010E 09               [12]  607 	inc	r1
      00010F F7               [12]  608 	mov	@r1,a
      000110 A3               [24]  609 	inc	dptr
      000111 12r00r00         [24]  610 	lcall	__gptrget
      000114 09               [12]  611 	inc	r1
      000115 F7               [12]  612 	mov	@r1,a
      000116 E5*00            [12]  613 	mov	a,_bp
      000118 24 08            [12]  614 	add	a,#0x08
      00011A F8               [12]  615 	mov	r0,a
      00011B 86 82            [24]  616 	mov	dpl,@r0
      00011D 08               [12]  617 	inc	r0
      00011E 86 83            [24]  618 	mov	dph,@r0
      000120 08               [12]  619 	inc	r0
      000121 86 F0            [24]  620 	mov	b,@r0
      000123 12r00r00         [24]  621 	lcall	__gptrget
      000126 FA               [12]  622 	mov	r2,a
      000127 A3               [24]  623 	inc	dptr
      000128 12r00r00         [24]  624 	lcall	__gptrget
      00012B FB               [12]  625 	mov	r3,a
      00012C 33               [12]  626 	rlc	a
      00012D 95 E0            [12]  627 	subb	a,acc
      00012F FE               [12]  628 	mov	r6,a
      000130 FF               [12]  629 	mov	r7,a
      000131 C0 02            [24]  630 	push	ar2
      000133 C0 03            [24]  631 	push	ar3
      000135 C0 06            [24]  632 	push	ar6
      000137 C0 07            [24]  633 	push	ar7
      000139 E5*00            [12]  634 	mov	a,_bp
      00013B 24 04            [12]  635 	add	a,#0x04
      00013D F8               [12]  636 	mov	r0,a
      00013E 86 82            [24]  637 	mov	dpl,@r0
      000140 08               [12]  638 	inc	r0
      000141 86 83            [24]  639 	mov	dph,@r0
      000143 08               [12]  640 	inc	r0
      000144 86 F0            [24]  641 	mov	b,@r0
      000146 08               [12]  642 	inc	r0
      000147 E6               [12]  643 	mov	a,@r0
      000148 12r00r00         [24]  644 	lcall	__mullong
      00014B AC 82            [24]  645 	mov	r4,dpl
      00014D AD 83            [24]  646 	mov	r5,dph
      00014F AE F0            [24]  647 	mov	r6,b
      000151 FF               [12]  648 	mov	r7,a
      000152 E5 81            [12]  649 	mov	a,sp
      000154 24 FC            [12]  650 	add	a,#0xfc
      000156 F5 81            [12]  651 	mov	sp,a
      000158 E5*00            [12]  652 	mov	a,_bp
      00015A 24 0B            [12]  653 	add	a,#0x0b
      00015C F8               [12]  654 	mov	r0,a
      00015D E6               [12]  655 	mov	a,@r0
      00015E 2C               [12]  656 	add	a,r4
      00015F FC               [12]  657 	mov	r4,a
      000160 08               [12]  658 	inc	r0
      000161 E6               [12]  659 	mov	a,@r0
      000162 3D               [12]  660 	addc	a,r5
      000163 FD               [12]  661 	mov	r5,a
      000164 08               [12]  662 	inc	r0
      000165 E6               [12]  663 	mov	a,@r0
      000166 3E               [12]  664 	addc	a,r6
      000167 FE               [12]  665 	mov	r6,a
      000168 08               [12]  666 	inc	r0
      000169 E6               [12]  667 	mov	a,@r0
      00016A 3F               [12]  668 	addc	a,r7
      00016B FF               [12]  669 	mov	r7,a
      00016C A8*00            [24]  670 	mov	r0,_bp
      00016E 08               [12]  671 	inc	r0
      00016F 86 82            [24]  672 	mov	dpl,@r0
      000171 08               [12]  673 	inc	r0
      000172 86 83            [24]  674 	mov	dph,@r0
      000174 08               [12]  675 	inc	r0
      000175 86 F0            [24]  676 	mov	b,@r0
      000177 EC               [12]  677 	mov	a,r4
      000178 12r00r00         [24]  678 	lcall	__gptrput
      00017B A3               [24]  679 	inc	dptr
      00017C ED               [12]  680 	mov	a,r5
      00017D 12r00r00         [24]  681 	lcall	__gptrput
      000180 A3               [24]  682 	inc	dptr
      000181 EE               [12]  683 	mov	a,r6
      000182 12r00r00         [24]  684 	lcall	__gptrput
      000185 A3               [24]  685 	inc	dptr
      000186 EF               [12]  686 	mov	a,r7
      000187 12r00r00         [24]  687 	lcall	__gptrput
                                    688 ;	calc.c:77: return 1;
      00018A 90 00 01         [24]  689 	mov	dptr,#0x0001
                                    690 ;	calc.c:78: }
      00018D 85*00 81         [24]  691 	mov	sp,_bp
      000190 D0*00            [24]  692 	pop	_bp
      000192 22               [24]  693 	ret
                                    694 ;------------------------------------------------------------
                                    695 ;Allocation info for local variables in function 'dump_pop'
                                    696 ;------------------------------------------------------------
                                    697 ;delta                     Allocated to stack - _bp -5
                                    698 ;_ctx                      Allocated to registers r5 r6 r7 
                                    699 ;ctx                       Allocated to stack - _bp +11
                                    700 ;d                         Allocated to stack - _bp +14
                                    701 ;r                         Allocated to registers r5 r6 
                                    702 ;__1310720001              Allocated to registers 
                                    703 ;s                         Allocated to registers r5 r6 r7 
                                    704 ;__1966080003              Allocated to registers 
                                    705 ;s                         Allocated to registers r4 r5 r6 
                                    706 ;__1966080005              Allocated to registers 
                                    707 ;s                         Allocated to registers r3 r4 r5 
                                    708 ;__1966080007              Allocated to registers r2 r3 r4 r5 
                                    709 ;d                         Allocated to stack - _bp +18
                                    710 ;mask                      Allocated to stack - _bp +22
                                    711 ;__1966080009              Allocated to registers 
                                    712 ;s                         Allocated to registers r3 r4 r5 
                                    713 ;__1966080011              Allocated to registers 
                                    714 ;s                         Allocated to registers r4 r5 r6 
                                    715 ;__3276800013              Allocated to registers 
                                    716 ;s                         Allocated to registers r5 r3 r2 
                                    717 ;__3276800015              Allocated to registers r2 r3 r4 r7 
                                    718 ;d                         Allocated to stack - _bp +18
                                    719 ;mask                      Allocated to stack - _bp +22
                                    720 ;__3276800017              Allocated to registers 
                                    721 ;s                         Allocated to registers r5 r3 r2 
                                    722 ;sloc0                     Allocated to stack - _bp +1
                                    723 ;sloc1                     Allocated to stack - _bp +2
                                    724 ;sloc2                     Allocated to stack - _bp +5
                                    725 ;sloc3                     Allocated to stack - _bp +8
                                    726 ;------------------------------------------------------------
                                    727 ;	calc.c:80: static int dump_pop(void *_ctx, delta_t *delta) __reentrant {
                                    728 ;	-----------------------------------------
                                    729 ;	 function dump_pop
                                    730 ;	-----------------------------------------
      000193                        731 _dump_pop:
      000193 C0*00            [24]  732 	push	_bp
      000195 E5 81            [12]  733 	mov	a,sp
      000197 F5*00            [12]  734 	mov	_bp,a
      000199 24 19            [12]  735 	add	a,#0x19
      00019B F5 81            [12]  736 	mov	sp,a
      00019D AD 82            [24]  737 	mov	r5,dpl
      00019F AE 83            [24]  738 	mov	r6,dph
      0001A1 AF F0            [24]  739 	mov	r7,b
                                    740 ;	calc.c:81: calc_ctx_t *ctx = (calc_ctx_t *)_ctx;
      0001A3 E5*00            [12]  741 	mov	a,_bp
      0001A5 24 0B            [12]  742 	add	a,#0x0b
      0001A7 F8               [12]  743 	mov	r0,a
      0001A8 A6 05            [24]  744 	mov	@r0,ar5
      0001AA 08               [12]  745 	inc	r0
      0001AB A6 06            [24]  746 	mov	@r0,ar6
      0001AD 08               [12]  747 	inc	r0
      0001AE A6 07            [24]  748 	mov	@r0,ar7
                                    749 ;	calc.c:85: if (delta->event == EVENT_TERM) printstr("\r\nPS\r\n");
      0001B0 E5*00            [12]  750 	mov	a,_bp
      0001B2 24 FB            [12]  751 	add	a,#0xfb
      0001B4 F8               [12]  752 	mov	r0,a
      0001B5 86 02            [24]  753 	mov	ar2,@r0
      0001B7 08               [12]  754 	inc	r0
      0001B8 86 03            [24]  755 	mov	ar3,@r0
      0001BA 08               [12]  756 	inc	r0
      0001BB 86 04            [24]  757 	mov	ar4,@r0
      0001BD E5*00            [12]  758 	mov	a,_bp
      0001BF 24 08            [12]  759 	add	a,#0x08
      0001C1 F8               [12]  760 	mov	r0,a
      0001C2 74 02            [12]  761 	mov	a,#0x02
      0001C4 2A               [12]  762 	add	a,r2
      0001C5 F6               [12]  763 	mov	@r0,a
      0001C6 E4               [12]  764 	clr	a
      0001C7 3B               [12]  765 	addc	a,r3
      0001C8 08               [12]  766 	inc	r0
      0001C9 F6               [12]  767 	mov	@r0,a
      0001CA 08               [12]  768 	inc	r0
      0001CB A6 04            [24]  769 	mov	@r0,ar4
      0001CD E5*00            [12]  770 	mov	a,_bp
      0001CF 24 08            [12]  771 	add	a,#0x08
      0001D1 F8               [12]  772 	mov	r0,a
      0001D2 86 82            [24]  773 	mov	dpl,@r0
      0001D4 08               [12]  774 	inc	r0
      0001D5 86 83            [24]  775 	mov	dph,@r0
      0001D7 08               [12]  776 	inc	r0
      0001D8 86 F0            [24]  777 	mov	b,@r0
      0001DA 12r00r00         [24]  778 	lcall	__gptrget
      0001DD FE               [12]  779 	mov	r6,a
      0001DE A3               [24]  780 	inc	dptr
      0001DF 12r00r00         [24]  781 	lcall	__gptrget
      0001E2 FF               [12]  782 	mov	r7,a
      0001E3 BE 08 27         [24]  783 	cjne	r6,#0x08,00102$
      0001E6 BF 00 24         [24]  784 	cjne	r7,#0x00,00102$
      0001E9 7Dr00            [12]  785 	mov	r5,#___str_0
      0001EB 7Es00            [12]  786 	mov	r6,#(___str_0 >> 8)
      0001ED 7F 80            [12]  787 	mov	r7,#0x80
                                    788 ;	calc.c:51: return;
      0001EF                        789 00133$:
                                    790 ;	calc.c:49: for (; *s; s++) putchar(*s);
      0001EF 8D 82            [24]  791 	mov	dpl,r5
      0001F1 8E 83            [24]  792 	mov	dph,r6
      0001F3 8F F0            [24]  793 	mov	b,r7
      0001F5 12r00r00         [24]  794 	lcall	__gptrget
      0001F8 FC               [12]  795 	mov	r4,a
      0001F9 60 12            [24]  796 	jz	00102$
      0001FB 8C 03            [24]  797 	mov	ar3,r4
      0001FD 7C 00            [12]  798 	mov	r4,#0x00
      0001FF 8B 82            [24]  799 	mov	dpl,r3
      000201 8C 83            [24]  800 	mov	dph,r4
      000203 12r00r00         [24]  801 	lcall	_putchar
      000206 0D               [12]  802 	inc	r5
                                    803 ;	calc.c:85: if (delta->event == EVENT_TERM) printstr("\r\nPS\r\n");
      000207 BD 00 E5         [24]  804 	cjne	r5,#0x00,00133$
      00020A 0E               [12]  805 	inc	r6
      00020B 80 E2            [24]  806 	sjmp	00133$
      00020D                        807 00102$:
                                    808 ;	calc.c:86: r = stack_pop(ctx->ps, &d);
      00020D E5*00            [12]  809 	mov	a,_bp
      00020F 24 0E            [12]  810 	add	a,#0x0e
      000211 FF               [12]  811 	mov	r7,a
      000212 E5*00            [12]  812 	mov	a,_bp
      000214 24 05            [12]  813 	add	a,#0x05
      000216 F8               [12]  814 	mov	r0,a
      000217 A6 07            [24]  815 	mov	@r0,ar7
      000219 08               [12]  816 	inc	r0
      00021A 76 00            [12]  817 	mov	@r0,#0x00
      00021C 08               [12]  818 	inc	r0
      00021D 76 40            [12]  819 	mov	@r0,#0x40
      00021F E5*00            [12]  820 	mov	a,_bp
      000221 24 0B            [12]  821 	add	a,#0x0b
      000223 F8               [12]  822 	mov	r0,a
      000224 A9*00            [24]  823 	mov	r1,_bp
      000226 09               [12]  824 	inc	r1
      000227 09               [12]  825 	inc	r1
      000228 74 11            [12]  826 	mov	a,#0x11
      00022A 26               [12]  827 	add	a,@r0
      00022B F7               [12]  828 	mov	@r1,a
      00022C 74 40            [12]  829 	mov	a,#0x40
      00022E 08               [12]  830 	inc	r0
      00022F 36               [12]  831 	addc	a,@r0
      000230 09               [12]  832 	inc	r1
      000231 F7               [12]  833 	mov	@r1,a
      000232 08               [12]  834 	inc	r0
      000233 09               [12]  835 	inc	r1
      000234 E6               [12]  836 	mov	a,@r0
      000235 F7               [12]  837 	mov	@r1,a
      000236 A8*00            [24]  838 	mov	r0,_bp
      000238 08               [12]  839 	inc	r0
      000239 08               [12]  840 	inc	r0
      00023A 86 82            [24]  841 	mov	dpl,@r0
      00023C 08               [12]  842 	inc	r0
      00023D 86 83            [24]  843 	mov	dph,@r0
      00023F 08               [12]  844 	inc	r0
      000240 86 F0            [24]  845 	mov	b,@r0
      000242 12r00r00         [24]  846 	lcall	__gptrget
      000245 FA               [12]  847 	mov	r2,a
      000246 A3               [24]  848 	inc	dptr
      000247 12r00r00         [24]  849 	lcall	__gptrget
      00024A FB               [12]  850 	mov	r3,a
      00024B A3               [24]  851 	inc	dptr
      00024C 12r00r00         [24]  852 	lcall	__gptrget
      00024F FE               [12]  853 	mov	r6,a
      000250 C0 07            [24]  854 	push	ar7
      000252 E5*00            [12]  855 	mov	a,_bp
      000254 24 05            [12]  856 	add	a,#0x05
      000256 F8               [12]  857 	mov	r0,a
      000257 E6               [12]  858 	mov	a,@r0
      000258 C0 E0            [24]  859 	push	acc
      00025A 08               [12]  860 	inc	r0
      00025B E6               [12]  861 	mov	a,@r0
      00025C C0 E0            [24]  862 	push	acc
      00025E 08               [12]  863 	inc	r0
      00025F E6               [12]  864 	mov	a,@r0
      000260 C0 E0            [24]  865 	push	acc
      000262 8A 82            [24]  866 	mov	dpl,r2
      000264 8B 83            [24]  867 	mov	dph,r3
      000266 8E F0            [24]  868 	mov	b,r6
      000268 12r00r00         [24]  869 	lcall	_stack_pop
      00026B AE 82            [24]  870 	mov	r6,dpl
      00026D AD 83            [24]  871 	mov	r5,dph
      00026F 15 81            [12]  872 	dec	sp
      000271 15 81            [12]  873 	dec	sp
      000273 15 81            [12]  874 	dec	sp
      000275 D0 07            [24]  875 	pop	ar7
                                    876 ;	calc.c:87: if (!r) {
      000277 EE               [12]  877 	mov	a,r6
      000278 4D               [12]  878 	orl	a,r5
      000279 70 44            [24]  879 	jnz	00181$
                                    880 ;	calc.c:88: if (delta->event != EVENT_TERM) printstr("stack underflow\r\n");
      00027B E5*00            [12]  881 	mov	a,_bp
      00027D 24 08            [12]  882 	add	a,#0x08
      00027F F8               [12]  883 	mov	r0,a
      000280 86 82            [24]  884 	mov	dpl,@r0
      000282 08               [12]  885 	inc	r0
      000283 86 83            [24]  886 	mov	dph,@r0
      000285 08               [12]  887 	inc	r0
      000286 86 F0            [24]  888 	mov	b,@r0
      000288 12r00r00         [24]  889 	lcall	__gptrget
      00028B FD               [12]  890 	mov	r5,a
      00028C A3               [24]  891 	inc	dptr
      00028D 12r00r00         [24]  892 	lcall	__gptrget
      000290 FE               [12]  893 	mov	r6,a
      000291 BD 08 06         [24]  894 	cjne	r5,#0x08,00318$
      000294 BE 00 03         [24]  895 	cjne	r6,#0x00,00318$
      000297 02r04r45         [24]  896 	ljmp	00110$
      00029A                        897 00318$:
      00029A 7Cr07            [12]  898 	mov	r4,#___str_1
      00029C 7Ds00            [12]  899 	mov	r5,#(___str_1 >> 8)
      00029E 7E 80            [12]  900 	mov	r6,#0x80
                                    901 ;	calc.c:51: return;
      0002A0                        902 00136$:
                                    903 ;	calc.c:49: for (; *s; s++) putchar(*s);
      0002A0 8C 82            [24]  904 	mov	dpl,r4
      0002A2 8D 83            [24]  905 	mov	dph,r5
      0002A4 8E F0            [24]  906 	mov	b,r6
      0002A6 12r00r00         [24]  907 	lcall	__gptrget
      0002A9 FB               [12]  908 	mov	r3,a
      0002AA 70 03            [24]  909 	jnz	00319$
      0002AC 02r04r45         [24]  910 	ljmp	00110$
      0002AF                        911 00319$:
      0002AF 7A 00            [12]  912 	mov	r2,#0x00
      0002B1 8B 82            [24]  913 	mov	dpl,r3
      0002B3 8A 83            [24]  914 	mov	dph,r2
      0002B5 12r00r00         [24]  915 	lcall	_putchar
      0002B8 0C               [12]  916 	inc	r4
                                    917 ;	calc.c:89: } else while (r > 0) {
      0002B9 BC 00 E4         [24]  918 	cjne	r4,#0x00,00136$
      0002BC 0D               [12]  919 	inc	r5
      0002BD 80 E1            [24]  920 	sjmp	00136$
      0002BF                        921 00181$:
      0002BF A8*00            [24]  922 	mov	r0,_bp
      0002C1 08               [12]  923 	inc	r0
      0002C2 A6 07            [24]  924 	mov	@r0,ar7
      0002C4                        925 00105$:
      0002C4 C3               [12]  926 	clr	c
      0002C5 E4               [12]  927 	clr	a
      0002C6 9E               [12]  928 	subb	a,r6
      0002C7 74 80            [12]  929 	mov	a,#(0x00 ^ 0x80)
      0002C9 8D F0            [24]  930 	mov	b,r5
      0002CB 63 F0 80         [24]  931 	xrl	b,#0x80
      0002CE 95 F0            [12]  932 	subb	a,b
      0002D0 40 03            [24]  933 	jc	00321$
      0002D2 02r04r45         [24]  934 	ljmp	00110$
      0002D5                        935 00321$:
                                    936 ;	calc.c:90: printstr("VA ");
      0002D5 7Br19            [12]  937 	mov	r3,#___str_2
      0002D7 7Cs00            [12]  938 	mov	r4,#(___str_2 >> 8)
      0002D9 7D 80            [12]  939 	mov	r5,#0x80
                                    940 ;	calc.c:51: return;
      0002DB                        941 00139$:
                                    942 ;	calc.c:49: for (; *s; s++) putchar(*s);
      0002DB 8B 82            [24]  943 	mov	dpl,r3
      0002DD 8C 83            [24]  944 	mov	dph,r4
      0002DF 8D F0            [24]  945 	mov	b,r5
      0002E1 12r00r00         [24]  946 	lcall	__gptrget
      0002E4 FA               [12]  947 	mov	r2,a
      0002E5 60 10            [24]  948 	jz	00119$
      0002E7 7E 00            [12]  949 	mov	r6,#0x00
      0002E9 8A 82            [24]  950 	mov	dpl,r2
      0002EB 8E 83            [24]  951 	mov	dph,r6
      0002ED 12r00r00         [24]  952 	lcall	_putchar
      0002F0 0B               [12]  953 	inc	r3
                                    954 ;	calc.c:90: printstr("VA ");
      0002F1 BB 00 E7         [24]  955 	cjne	r3,#0x00,00139$
      0002F4 0C               [12]  956 	inc	r4
      0002F5 80 E4            [24]  957 	sjmp	00139$
      0002F7                        958 00119$:
                                    959 ;	calc.c:91: printf("% 11ld / ", d);
      0002F7 C0 07            [24]  960 	push	ar7
      0002F9 E5*00            [12]  961 	mov	a,_bp
      0002FB 24 0E            [12]  962 	add	a,#0x0e
      0002FD F8               [12]  963 	mov	r0,a
      0002FE E6               [12]  964 	mov	a,@r0
      0002FF C0 E0            [24]  965 	push	acc
      000301 08               [12]  966 	inc	r0
      000302 E6               [12]  967 	mov	a,@r0
      000303 C0 E0            [24]  968 	push	acc
      000305 08               [12]  969 	inc	r0
      000306 E6               [12]  970 	mov	a,@r0
      000307 C0 E0            [24]  971 	push	acc
      000309 08               [12]  972 	inc	r0
      00030A E6               [12]  973 	mov	a,@r0
      00030B C0 E0            [24]  974 	push	acc
      00030D 74r1D            [12]  975 	mov	a,#___str_3
      00030F C0 E0            [24]  976 	push	acc
      000311 74s00            [12]  977 	mov	a,#(___str_3 >> 8)
      000313 C0 E0            [24]  978 	push	acc
      000315 74 80            [12]  979 	mov	a,#0x80
      000317 C0 E0            [24]  980 	push	acc
      000319 12r00r00         [24]  981 	lcall	_printf
      00031C E5 81            [12]  982 	mov	a,sp
      00031E 24 F9            [12]  983 	add	a,#0xf9
      000320 F5 81            [12]  984 	mov	sp,a
                                    985 ;	calc.c:92: printf("%08lx / ", d);
      000322 E5*00            [12]  986 	mov	a,_bp
      000324 24 0E            [12]  987 	add	a,#0x0e
      000326 F8               [12]  988 	mov	r0,a
      000327 E6               [12]  989 	mov	a,@r0
      000328 C0 E0            [24]  990 	push	acc
      00032A 08               [12]  991 	inc	r0
      00032B E6               [12]  992 	mov	a,@r0
      00032C C0 E0            [24]  993 	push	acc
      00032E 08               [12]  994 	inc	r0
      00032F E6               [12]  995 	mov	a,@r0
      000330 C0 E0            [24]  996 	push	acc
      000332 08               [12]  997 	inc	r0
      000333 E6               [12]  998 	mov	a,@r0
      000334 C0 E0            [24]  999 	push	acc
      000336 74r27            [12] 1000 	mov	a,#___str_4
      000338 C0 E0            [24] 1001 	push	acc
      00033A 74s00            [12] 1002 	mov	a,#(___str_4 >> 8)
      00033C C0 E0            [24] 1003 	push	acc
      00033E 74 80            [12] 1004 	mov	a,#0x80
      000340 C0 E0            [24] 1005 	push	acc
      000342 12r00r00         [24] 1006 	lcall	_printf
      000345 E5 81            [12] 1007 	mov	a,sp
      000347 24 F9            [12] 1008 	add	a,#0xf9
      000349 F5 81            [12] 1009 	mov	sp,a
      00034B D0 07            [24] 1010 	pop	ar7
                                   1011 ;	calc.c:93: printbin(d);
      00034D E5*00            [12] 1012 	mov	a,_bp
      00034F 24 0E            [12] 1013 	add	a,#0x0e
      000351 F8               [12] 1014 	mov	r0,a
      000352 86 02            [24] 1015 	mov	ar2,@r0
      000354 08               [12] 1016 	inc	r0
      000355 86 03            [24] 1017 	mov	ar3,@r0
      000357 08               [12] 1018 	inc	r0
      000358 86 04            [24] 1019 	mov	ar4,@r0
      00035A 08               [12] 1020 	inc	r0
      00035B 86 05            [24] 1021 	mov	ar5,@r0
      00035D E5*00            [12] 1022 	mov	a,_bp
      00035F 24 12            [12] 1023 	add	a,#0x12
      000361 F8               [12] 1024 	mov	r0,a
      000362 A6 02            [24] 1025 	mov	@r0,ar2
      000364 08               [12] 1026 	inc	r0
      000365 A6 03            [24] 1027 	mov	@r0,ar3
      000367 08               [12] 1028 	inc	r0
      000368 A6 04            [24] 1029 	mov	@r0,ar4
      00036A 08               [12] 1030 	inc	r0
      00036B A6 05            [24] 1031 	mov	@r0,ar5
                                   1032 ;	calc.c:57: for (mask = 0x80000000lu; mask; mask >>= 1)
      00036D E5*00            [12] 1033 	mov	a,_bp
      00036F 24 16            [12] 1034 	add	a,#0x16
      000371 F8               [12] 1035 	mov	r0,a
      000372 E4               [12] 1036 	clr	a
      000373 F6               [12] 1037 	mov	@r0,a
      000374 08               [12] 1038 	inc	r0
      000375 F6               [12] 1039 	mov	@r0,a
      000376 08               [12] 1040 	inc	r0
      000377 F6               [12] 1041 	mov	@r0,a
      000378 08               [12] 1042 	inc	r0
      000379 76 80            [12] 1043 	mov	@r0,#0x80
      00037B                       1044 00141$:
                                   1045 ;	calc.c:58: (void)putchar((d & mask) ? (int)'1' : (int)'0');
      00037B E5*00            [12] 1046 	mov	a,_bp
      00037D 24 12            [12] 1047 	add	a,#0x12
      00037F F8               [12] 1048 	mov	r0,a
      000380 86 03            [24] 1049 	mov	ar3,@r0
      000382 08               [12] 1050 	inc	r0
      000383 86 04            [24] 1051 	mov	ar4,@r0
      000385 08               [12] 1052 	inc	r0
      000386 86 05            [24] 1053 	mov	ar5,@r0
      000388 08               [12] 1054 	inc	r0
      000389 86 06            [24] 1055 	mov	ar6,@r0
      00038B E5*00            [12] 1056 	mov	a,_bp
      00038D 24 16            [12] 1057 	add	a,#0x16
      00038F F8               [12] 1058 	mov	r0,a
      000390 E6               [12] 1059 	mov	a,@r0
      000391 52 03            [12] 1060 	anl	ar3,a
      000393 08               [12] 1061 	inc	r0
      000394 E6               [12] 1062 	mov	a,@r0
      000395 52 04            [12] 1063 	anl	ar4,a
      000397 08               [12] 1064 	inc	r0
      000398 E6               [12] 1065 	mov	a,@r0
      000399 52 05            [12] 1066 	anl	ar5,a
      00039B 08               [12] 1067 	inc	r0
      00039C E6               [12] 1068 	mov	a,@r0
      00039D 52 06            [12] 1069 	anl	ar6,a
      00039F EB               [12] 1070 	mov	a,r3
      0003A0 4C               [12] 1071 	orl	a,r4
      0003A1 4D               [12] 1072 	orl	a,r5
      0003A2 4E               [12] 1073 	orl	a,r6
      0003A3 60 06            [24] 1074 	jz	00162$
      0003A5 7C 31            [12] 1075 	mov	r4,#0x31
      0003A7 7D 00            [12] 1076 	mov	r5,#0x00
      0003A9 80 04            [24] 1077 	sjmp	00163$
      0003AB                       1078 00162$:
      0003AB 7C 30            [12] 1079 	mov	r4,#0x30
      0003AD 7D 00            [12] 1080 	mov	r5,#0x00
      0003AF                       1081 00163$:
      0003AF 8C 82            [24] 1082 	mov	dpl,r4
      0003B1 8D 83            [24] 1083 	mov	dph,r5
      0003B3 12r00r00         [24] 1084 	lcall	_putchar
                                   1085 ;	calc.c:57: for (mask = 0x80000000lu; mask; mask >>= 1)
      0003B6 E5*00            [12] 1086 	mov	a,_bp
      0003B8 24 16            [12] 1087 	add	a,#0x16
      0003BA F8               [12] 1088 	mov	r0,a
      0003BB 08               [12] 1089 	inc	r0
      0003BC 08               [12] 1090 	inc	r0
      0003BD 08               [12] 1091 	inc	r0
      0003BE E6               [12] 1092 	mov	a,@r0
      0003BF C3               [12] 1093 	clr	c
      0003C0 13               [12] 1094 	rrc	a
      0003C1 F6               [12] 1095 	mov	@r0,a
      0003C2 18               [12] 1096 	dec	r0
      0003C3 E6               [12] 1097 	mov	a,@r0
      0003C4 13               [12] 1098 	rrc	a
      0003C5 F6               [12] 1099 	mov	@r0,a
      0003C6 18               [12] 1100 	dec	r0
      0003C7 E6               [12] 1101 	mov	a,@r0
      0003C8 13               [12] 1102 	rrc	a
      0003C9 F6               [12] 1103 	mov	@r0,a
      0003CA 18               [12] 1104 	dec	r0
      0003CB E6               [12] 1105 	mov	a,@r0
      0003CC 13               [12] 1106 	rrc	a
      0003CD F6               [12] 1107 	mov	@r0,a
      0003CE E5*00            [12] 1108 	mov	a,_bp
      0003D0 24 16            [12] 1109 	add	a,#0x16
      0003D2 F8               [12] 1110 	mov	r0,a
      0003D3 E6               [12] 1111 	mov	a,@r0
      0003D4 08               [12] 1112 	inc	r0
      0003D5 46               [12] 1113 	orl	a,@r0
      0003D6 08               [12] 1114 	inc	r0
      0003D7 46               [12] 1115 	orl	a,@r0
      0003D8 08               [12] 1116 	inc	r0
      0003D9 46               [12] 1117 	orl	a,@r0
      0003DA 70 9F            [24] 1118 	jnz	00141$
                                   1119 ;	calc.c:94: printstr("\r\n");
      0003DC 7Br30            [12] 1120 	mov	r3,#___str_5
      0003DE 7Cs00            [12] 1121 	mov	r4,#(___str_5 >> 8)
      0003E0 7D 80            [12] 1122 	mov	r5,#0x80
                                   1123 ;	calc.c:51: return;
      0003E2                       1124 00144$:
                                   1125 ;	calc.c:49: for (; *s; s++) putchar(*s);
      0003E2 8B 82            [24] 1126 	mov	dpl,r3
      0003E4 8C 83            [24] 1127 	mov	dph,r4
      0003E6 8D F0            [24] 1128 	mov	b,r5
      0003E8 12r00r00         [24] 1129 	lcall	__gptrget
      0003EB FA               [12] 1130 	mov	r2,a
      0003EC 60 10            [24] 1131 	jz	00123$
      0003EE 7E 00            [12] 1132 	mov	r6,#0x00
      0003F0 8A 82            [24] 1133 	mov	dpl,r2
      0003F2 8E 83            [24] 1134 	mov	dph,r6
      0003F4 12r00r00         [24] 1135 	lcall	_putchar
      0003F7 0B               [12] 1136 	inc	r3
                                   1137 ;	calc.c:94: printstr("\r\n");
      0003F8 BB 00 E7         [24] 1138 	cjne	r3,#0x00,00144$
      0003FB 0C               [12] 1139 	inc	r4
      0003FC 80 E4            [24] 1140 	sjmp	00144$
      0003FE                       1141 00123$:
                                   1142 ;	calc.c:95: r = stack_pop(ctx->ps, &d);
      0003FE C0 07            [24] 1143 	push	ar7
      000400 A8*00            [24] 1144 	mov	r0,_bp
      000402 08               [12] 1145 	inc	r0
      000403 86 03            [24] 1146 	mov	ar3,@r0
      000405 7C 00            [12] 1147 	mov	r4,#0x00
      000407 7D 40            [12] 1148 	mov	r5,#0x40
      000409 A8*00            [24] 1149 	mov	r0,_bp
      00040B 08               [12] 1150 	inc	r0
      00040C 08               [12] 1151 	inc	r0
      00040D 86 82            [24] 1152 	mov	dpl,@r0
      00040F 08               [12] 1153 	inc	r0
      000410 86 83            [24] 1154 	mov	dph,@r0
      000412 08               [12] 1155 	inc	r0
      000413 86 F0            [24] 1156 	mov	b,@r0
      000415 12r00r00         [24] 1157 	lcall	__gptrget
      000418 FA               [12] 1158 	mov	r2,a
      000419 A3               [24] 1159 	inc	dptr
      00041A 12r00r00         [24] 1160 	lcall	__gptrget
      00041D FE               [12] 1161 	mov	r6,a
      00041E A3               [24] 1162 	inc	dptr
      00041F 12r00r00         [24] 1163 	lcall	__gptrget
      000422 FF               [12] 1164 	mov	r7,a
      000423 C0 07            [24] 1165 	push	ar7
      000425 C0 03            [24] 1166 	push	ar3
      000427 C0 04            [24] 1167 	push	ar4
      000429 C0 05            [24] 1168 	push	ar5
      00042B 8A 82            [24] 1169 	mov	dpl,r2
      00042D 8E 83            [24] 1170 	mov	dph,r6
      00042F 8F F0            [24] 1171 	mov	b,r7
      000431 12r00r00         [24] 1172 	lcall	_stack_pop
      000434 AE 82            [24] 1173 	mov	r6,dpl
      000436 AD 83            [24] 1174 	mov	r5,dph
      000438 15 81            [12] 1175 	dec	sp
      00043A 15 81            [12] 1176 	dec	sp
      00043C 15 81            [12] 1177 	dec	sp
      00043E D0 07            [24] 1178 	pop	ar7
      000440 D0 07            [24] 1179 	pop	ar7
      000442 02r02rC4         [24] 1180 	ljmp	00105$
      000445                       1181 00110$:
                                   1182 ;	calc.c:98: if (delta->event == EVENT_TERM) {
      000445 E5*00            [12] 1183 	mov	a,_bp
      000447 24 08            [12] 1184 	add	a,#0x08
      000449 F8               [12] 1185 	mov	r0,a
      00044A 86 82            [24] 1186 	mov	dpl,@r0
      00044C 08               [12] 1187 	inc	r0
      00044D 86 83            [24] 1188 	mov	dph,@r0
      00044F 08               [12] 1189 	inc	r0
      000450 86 F0            [24] 1190 	mov	b,@r0
      000452 12r00r00         [24] 1191 	lcall	__gptrget
      000455 FD               [12] 1192 	mov	r5,a
      000456 A3               [24] 1193 	inc	dptr
      000457 12r00r00         [24] 1194 	lcall	__gptrget
      00045A FE               [12] 1195 	mov	r6,a
      00045B BD 08 05         [24] 1196 	cjne	r5,#0x08,00328$
      00045E BE 00 02         [24] 1197 	cjne	r6,#0x00,00328$
      000461 80 03            [24] 1198 	sjmp	00329$
      000463                       1199 00328$:
      000463 02r06r84         [24] 1200 	ljmp	00113$
      000466                       1201 00329$:
                                   1202 ;	calc.c:99: printstr("SS\r\n");
      000466 7Cr33            [12] 1203 	mov	r4,#___str_6
      000468 7Ds00            [12] 1204 	mov	r5,#(___str_6 >> 8)
      00046A 7E 80            [12] 1205 	mov	r6,#0x80
                                   1206 ;	calc.c:51: return;
      00046C                       1207 00147$:
                                   1208 ;	calc.c:49: for (; *s; s++) putchar(*s);
      00046C 8C 82            [24] 1209 	mov	dpl,r4
      00046E 8D 83            [24] 1210 	mov	dph,r5
      000470 8E F0            [24] 1211 	mov	b,r6
      000472 12r00r00         [24] 1212 	lcall	__gptrget
      000475 FB               [12] 1213 	mov	r3,a
      000476 60 10            [24] 1214 	jz	00125$
      000478 7A 00            [12] 1215 	mov	r2,#0x00
      00047A 8B 82            [24] 1216 	mov	dpl,r3
      00047C 8A 83            [24] 1217 	mov	dph,r2
      00047E 12r00r00         [24] 1218 	lcall	_putchar
      000481 0C               [12] 1219 	inc	r4
                                   1220 ;	calc.c:99: printstr("SS\r\n");
      000482 BC 00 E7         [24] 1221 	cjne	r4,#0x00,00147$
      000485 0D               [12] 1222 	inc	r5
      000486 80 E4            [24] 1223 	sjmp	00147$
      000488                       1224 00125$:
                                   1225 ;	calc.c:100: for (r = stack_pop(ctx->ss, &d); r > 0; r = stack_pop(ctx->ss, &d)) {
      000488 8F 06            [24] 1226 	mov	ar6,r7
      00048A E5*00            [12] 1227 	mov	a,_bp
      00048C 24 05            [12] 1228 	add	a,#0x05
      00048E F8               [12] 1229 	mov	r0,a
      00048F A6 06            [24] 1230 	mov	@r0,ar6
      000491 08               [12] 1231 	inc	r0
      000492 76 00            [12] 1232 	mov	@r0,#0x00
      000494 08               [12] 1233 	inc	r0
      000495 76 40            [12] 1234 	mov	@r0,#0x40
      000497 E5*00            [12] 1235 	mov	a,_bp
      000499 24 0B            [12] 1236 	add	a,#0x0b
      00049B F8               [12] 1237 	mov	r0,a
      00049C E5*00            [12] 1238 	mov	a,_bp
      00049E 24 08            [12] 1239 	add	a,#0x08
      0004A0 F9               [12] 1240 	mov	r1,a
      0004A1 74 14            [12] 1241 	mov	a,#0x14
      0004A3 26               [12] 1242 	add	a,@r0
      0004A4 F7               [12] 1243 	mov	@r1,a
      0004A5 74 40            [12] 1244 	mov	a,#0x40
      0004A7 08               [12] 1245 	inc	r0
      0004A8 36               [12] 1246 	addc	a,@r0
      0004A9 09               [12] 1247 	inc	r1
      0004AA F7               [12] 1248 	mov	@r1,a
      0004AB 08               [12] 1249 	inc	r0
      0004AC 09               [12] 1250 	inc	r1
      0004AD E6               [12] 1251 	mov	a,@r0
      0004AE F7               [12] 1252 	mov	@r1,a
      0004AF E5*00            [12] 1253 	mov	a,_bp
      0004B1 24 08            [12] 1254 	add	a,#0x08
      0004B3 F8               [12] 1255 	mov	r0,a
      0004B4 86 82            [24] 1256 	mov	dpl,@r0
      0004B6 08               [12] 1257 	inc	r0
      0004B7 86 83            [24] 1258 	mov	dph,@r0
      0004B9 08               [12] 1259 	inc	r0
      0004BA 86 F0            [24] 1260 	mov	b,@r0
      0004BC 12r00r00         [24] 1261 	lcall	__gptrget
      0004BF FA               [12] 1262 	mov	r2,a
      0004C0 A3               [24] 1263 	inc	dptr
      0004C1 12r00r00         [24] 1264 	lcall	__gptrget
      0004C4 FB               [12] 1265 	mov	r3,a
      0004C5 A3               [24] 1266 	inc	dptr
      0004C6 12r00r00         [24] 1267 	lcall	__gptrget
      0004C9 FE               [12] 1268 	mov	r6,a
      0004CA C0 07            [24] 1269 	push	ar7
      0004CC E5*00            [12] 1270 	mov	a,_bp
      0004CE 24 05            [12] 1271 	add	a,#0x05
      0004D0 F8               [12] 1272 	mov	r0,a
      0004D1 E6               [12] 1273 	mov	a,@r0
      0004D2 C0 E0            [24] 1274 	push	acc
      0004D4 08               [12] 1275 	inc	r0
      0004D5 E6               [12] 1276 	mov	a,@r0
      0004D6 C0 E0            [24] 1277 	push	acc
      0004D8 08               [12] 1278 	inc	r0
      0004D9 E6               [12] 1279 	mov	a,@r0
      0004DA C0 E0            [24] 1280 	push	acc
      0004DC 8A 82            [24] 1281 	mov	dpl,r2
      0004DE 8B 83            [24] 1282 	mov	dph,r3
      0004E0 8E F0            [24] 1283 	mov	b,r6
      0004E2 12r00r00         [24] 1284 	lcall	_stack_pop
      0004E5 AD 82            [24] 1285 	mov	r5,dpl
      0004E7 AE 83            [24] 1286 	mov	r6,dph
      0004E9 15 81            [12] 1287 	dec	sp
      0004EB 15 81            [12] 1288 	dec	sp
      0004ED 15 81            [12] 1289 	dec	sp
      0004EF D0 07            [24] 1290 	pop	ar7
      0004F1                       1291 00158$:
      0004F1 C3               [12] 1292 	clr	c
      0004F2 E4               [12] 1293 	clr	a
      0004F3 9D               [12] 1294 	subb	a,r5
      0004F4 74 80            [12] 1295 	mov	a,#(0x00 ^ 0x80)
      0004F6 8E F0            [24] 1296 	mov	b,r6
      0004F8 63 F0 80         [24] 1297 	xrl	b,#0x80
      0004FB 95 F0            [12] 1298 	subb	a,b
      0004FD 40 03            [24] 1299 	jc	00332$
      0004FF 02r06r84         [24] 1300 	ljmp	00113$
      000502                       1301 00332$:
                                   1302 ;	calc.c:101: printstr("VA ");
      000502 7Dr19            [12] 1303 	mov	r5,#___str_2
      000504 7Bs00            [12] 1304 	mov	r3,#(___str_2 >> 8)
      000506 7A 80            [12] 1305 	mov	r2,#0x80
                                   1306 ;	calc.c:51: return;
      000508                       1307 00150$:
                                   1308 ;	calc.c:49: for (; *s; s++) putchar(*s);
      000508 8D 82            [24] 1309 	mov	dpl,r5
      00050A 8B 83            [24] 1310 	mov	dph,r3
      00050C 8A F0            [24] 1311 	mov	b,r2
      00050E 12r00r00         [24] 1312 	lcall	__gptrget
      000511 FE               [12] 1313 	mov	r6,a
      000512 60 16            [24] 1314 	jz	00127$
      000514 C0 07            [24] 1315 	push	ar7
      000516 8E 04            [24] 1316 	mov	ar4,r6
      000518 7F 00            [12] 1317 	mov	r7,#0x00
      00051A 8C 82            [24] 1318 	mov	dpl,r4
      00051C 8F 83            [24] 1319 	mov	dph,r7
      00051E 12r00r00         [24] 1320 	lcall	_putchar
      000521 0D               [12] 1321 	inc	r5
      000522 BD 00 01         [24] 1322 	cjne	r5,#0x00,00334$
      000525 0B               [12] 1323 	inc	r3
      000526                       1324 00334$:
      000526 D0 07            [24] 1325 	pop	ar7
                                   1326 ;	calc.c:101: printstr("VA ");
      000528 80 DE            [24] 1327 	sjmp	00150$
      00052A                       1328 00127$:
                                   1329 ;	calc.c:102: printf("% 11ld / ", d);
      00052A C0 07            [24] 1330 	push	ar7
      00052C C0 07            [24] 1331 	push	ar7
      00052E E5*00            [12] 1332 	mov	a,_bp
      000530 24 0E            [12] 1333 	add	a,#0x0e
      000532 F8               [12] 1334 	mov	r0,a
      000533 E6               [12] 1335 	mov	a,@r0
      000534 C0 E0            [24] 1336 	push	acc
      000536 08               [12] 1337 	inc	r0
      000537 E6               [12] 1338 	mov	a,@r0
      000538 C0 E0            [24] 1339 	push	acc
      00053A 08               [12] 1340 	inc	r0
      00053B E6               [12] 1341 	mov	a,@r0
      00053C C0 E0            [24] 1342 	push	acc
      00053E 08               [12] 1343 	inc	r0
      00053F E6               [12] 1344 	mov	a,@r0
      000540 C0 E0            [24] 1345 	push	acc
      000542 74r1D            [12] 1346 	mov	a,#___str_3
      000544 C0 E0            [24] 1347 	push	acc
      000546 74s00            [12] 1348 	mov	a,#(___str_3 >> 8)
      000548 C0 E0            [24] 1349 	push	acc
      00054A 74 80            [12] 1350 	mov	a,#0x80
      00054C C0 E0            [24] 1351 	push	acc
      00054E 12r00r00         [24] 1352 	lcall	_printf
      000551 E5 81            [12] 1353 	mov	a,sp
      000553 24 F9            [12] 1354 	add	a,#0xf9
      000555 F5 81            [12] 1355 	mov	sp,a
                                   1356 ;	calc.c:103: printf("%08lx / ", d);
      000557 E5*00            [12] 1357 	mov	a,_bp
      000559 24 0E            [12] 1358 	add	a,#0x0e
      00055B F8               [12] 1359 	mov	r0,a
      00055C E6               [12] 1360 	mov	a,@r0
      00055D C0 E0            [24] 1361 	push	acc
      00055F 08               [12] 1362 	inc	r0
      000560 E6               [12] 1363 	mov	a,@r0
      000561 C0 E0            [24] 1364 	push	acc
      000563 08               [12] 1365 	inc	r0
      000564 E6               [12] 1366 	mov	a,@r0
      000565 C0 E0            [24] 1367 	push	acc
      000567 08               [12] 1368 	inc	r0
      000568 E6               [12] 1369 	mov	a,@r0
      000569 C0 E0            [24] 1370 	push	acc
      00056B 74r27            [12] 1371 	mov	a,#___str_4
      00056D C0 E0            [24] 1372 	push	acc
      00056F 74s00            [12] 1373 	mov	a,#(___str_4 >> 8)
      000571 C0 E0            [24] 1374 	push	acc
      000573 74 80            [12] 1375 	mov	a,#0x80
      000575 C0 E0            [24] 1376 	push	acc
      000577 12r00r00         [24] 1377 	lcall	_printf
      00057A E5 81            [12] 1378 	mov	a,sp
      00057C 24 F9            [12] 1379 	add	a,#0xf9
      00057E F5 81            [12] 1380 	mov	sp,a
      000580 D0 07            [24] 1381 	pop	ar7
                                   1382 ;	calc.c:104: printbin(d);
      000582 E5*00            [12] 1383 	mov	a,_bp
      000584 24 0E            [12] 1384 	add	a,#0x0e
      000586 F8               [12] 1385 	mov	r0,a
      000587 86 02            [24] 1386 	mov	ar2,@r0
      000589 08               [12] 1387 	inc	r0
      00058A 86 03            [24] 1388 	mov	ar3,@r0
      00058C 08               [12] 1389 	inc	r0
      00058D 86 04            [24] 1390 	mov	ar4,@r0
      00058F 08               [12] 1391 	inc	r0
      000590 86 07            [24] 1392 	mov	ar7,@r0
      000592 E5*00            [12] 1393 	mov	a,_bp
      000594 24 12            [12] 1394 	add	a,#0x12
      000596 F8               [12] 1395 	mov	r0,a
      000597 A6 02            [24] 1396 	mov	@r0,ar2
      000599 08               [12] 1397 	inc	r0
      00059A A6 03            [24] 1398 	mov	@r0,ar3
      00059C 08               [12] 1399 	inc	r0
      00059D A6 04            [24] 1400 	mov	@r0,ar4
      00059F 08               [12] 1401 	inc	r0
      0005A0 A6 07            [24] 1402 	mov	@r0,ar7
                                   1403 ;	calc.c:57: for (mask = 0x80000000lu; mask; mask >>= 1)
      0005A2 E5*00            [12] 1404 	mov	a,_bp
      0005A4 24 16            [12] 1405 	add	a,#0x16
      0005A6 F8               [12] 1406 	mov	r0,a
      0005A7 E4               [12] 1407 	clr	a
      0005A8 F6               [12] 1408 	mov	@r0,a
      0005A9 08               [12] 1409 	inc	r0
      0005AA F6               [12] 1410 	mov	@r0,a
      0005AB 08               [12] 1411 	inc	r0
      0005AC F6               [12] 1412 	mov	@r0,a
      0005AD 08               [12] 1413 	inc	r0
      0005AE 76 80            [12] 1414 	mov	@r0,#0x80
                                   1415 ;	calc.c:109: return 1;
      0005B0 D0 07            [24] 1416 	pop	ar7
                                   1417 ;	calc.c:57: for (mask = 0x80000000lu; mask; mask >>= 1)
      0005B2                       1418 00152$:
                                   1419 ;	calc.c:58: (void)putchar((d & mask) ? (int)'1' : (int)'0');
      0005B2 C0 07            [24] 1420 	push	ar7
      0005B4 E5*00            [12] 1421 	mov	a,_bp
      0005B6 24 12            [12] 1422 	add	a,#0x12
      0005B8 F8               [12] 1423 	mov	r0,a
      0005B9 86 02            [24] 1424 	mov	ar2,@r0
      0005BB 08               [12] 1425 	inc	r0
      0005BC 86 03            [24] 1426 	mov	ar3,@r0
      0005BE 08               [12] 1427 	inc	r0
      0005BF 86 04            [24] 1428 	mov	ar4,@r0
      0005C1 08               [12] 1429 	inc	r0
      0005C2 86 07            [24] 1430 	mov	ar7,@r0
      0005C4 E5*00            [12] 1431 	mov	a,_bp
      0005C6 24 16            [12] 1432 	add	a,#0x16
      0005C8 F8               [12] 1433 	mov	r0,a
      0005C9 E6               [12] 1434 	mov	a,@r0
      0005CA 52 02            [12] 1435 	anl	ar2,a
      0005CC 08               [12] 1436 	inc	r0
      0005CD E6               [12] 1437 	mov	a,@r0
      0005CE 52 03            [12] 1438 	anl	ar3,a
      0005D0 08               [12] 1439 	inc	r0
      0005D1 E6               [12] 1440 	mov	a,@r0
      0005D2 52 04            [12] 1441 	anl	ar4,a
      0005D4 08               [12] 1442 	inc	r0
      0005D5 E6               [12] 1443 	mov	a,@r0
      0005D6 52 07            [12] 1444 	anl	ar7,a
      0005D8 EA               [12] 1445 	mov	a,r2
      0005D9 4B               [12] 1446 	orl	a,r3
      0005DA 4C               [12] 1447 	orl	a,r4
      0005DB 4F               [12] 1448 	orl	a,r7
      0005DC D0 07            [24] 1449 	pop	ar7
      0005DE 60 06            [24] 1450 	jz	00164$
      0005E0 7B 31            [12] 1451 	mov	r3,#0x31
      0005E2 7C 00            [12] 1452 	mov	r4,#0x00
      0005E4 80 04            [24] 1453 	sjmp	00165$
      0005E6                       1454 00164$:
      0005E6 7B 30            [12] 1455 	mov	r3,#0x30
      0005E8 7C 00            [12] 1456 	mov	r4,#0x00
      0005EA                       1457 00165$:
      0005EA 8B 82            [24] 1458 	mov	dpl,r3
      0005EC 8C 83            [24] 1459 	mov	dph,r4
      0005EE 12r00r00         [24] 1460 	lcall	_putchar
                                   1461 ;	calc.c:57: for (mask = 0x80000000lu; mask; mask >>= 1)
      0005F1 E5*00            [12] 1462 	mov	a,_bp
      0005F3 24 16            [12] 1463 	add	a,#0x16
      0005F5 F8               [12] 1464 	mov	r0,a
      0005F6 08               [12] 1465 	inc	r0
      0005F7 08               [12] 1466 	inc	r0
      0005F8 08               [12] 1467 	inc	r0
      0005F9 E6               [12] 1468 	mov	a,@r0
      0005FA C3               [12] 1469 	clr	c
      0005FB 13               [12] 1470 	rrc	a
      0005FC F6               [12] 1471 	mov	@r0,a
      0005FD 18               [12] 1472 	dec	r0
      0005FE E6               [12] 1473 	mov	a,@r0
      0005FF 13               [12] 1474 	rrc	a
      000600 F6               [12] 1475 	mov	@r0,a
      000601 18               [12] 1476 	dec	r0
      000602 E6               [12] 1477 	mov	a,@r0
      000603 13               [12] 1478 	rrc	a
      000604 F6               [12] 1479 	mov	@r0,a
      000605 18               [12] 1480 	dec	r0
      000606 E6               [12] 1481 	mov	a,@r0
      000607 13               [12] 1482 	rrc	a
      000608 F6               [12] 1483 	mov	@r0,a
      000609 E5*00            [12] 1484 	mov	a,_bp
      00060B 24 16            [12] 1485 	add	a,#0x16
      00060D F8               [12] 1486 	mov	r0,a
      00060E E6               [12] 1487 	mov	a,@r0
      00060F 08               [12] 1488 	inc	r0
      000610 46               [12] 1489 	orl	a,@r0
      000611 08               [12] 1490 	inc	r0
      000612 46               [12] 1491 	orl	a,@r0
      000613 08               [12] 1492 	inc	r0
      000614 46               [12] 1493 	orl	a,@r0
      000615 70 9B            [24] 1494 	jnz	00152$
                                   1495 ;	calc.c:105: printstr("\r\n");
      000617 7Dr30            [12] 1496 	mov	r5,#___str_5
      000619 7Bs00            [12] 1497 	mov	r3,#(___str_5 >> 8)
      00061B 7A 80            [12] 1498 	mov	r2,#0x80
                                   1499 ;	calc.c:51: return;
      00061D                       1500 00155$:
                                   1501 ;	calc.c:49: for (; *s; s++) putchar(*s);
      00061D 8D 82            [24] 1502 	mov	dpl,r5
      00061F 8B 83            [24] 1503 	mov	dph,r3
      000621 8A F0            [24] 1504 	mov	b,r2
      000623 12r00r00         [24] 1505 	lcall	__gptrget
      000626 FE               [12] 1506 	mov	r6,a
      000627 60 16            [24] 1507 	jz	00131$
      000629 C0 07            [24] 1508 	push	ar7
      00062B 8E 04            [24] 1509 	mov	ar4,r6
      00062D 7F 00            [12] 1510 	mov	r7,#0x00
      00062F 8C 82            [24] 1511 	mov	dpl,r4
      000631 8F 83            [24] 1512 	mov	dph,r7
      000633 12r00r00         [24] 1513 	lcall	_putchar
      000636 0D               [12] 1514 	inc	r5
      000637 BD 00 01         [24] 1515 	cjne	r5,#0x00,00338$
      00063A 0B               [12] 1516 	inc	r3
      00063B                       1517 00338$:
      00063B D0 07            [24] 1518 	pop	ar7
                                   1519 ;	calc.c:105: printstr("\r\n");
      00063D 80 DE            [24] 1520 	sjmp	00155$
      00063F                       1521 00131$:
                                   1522 ;	calc.c:100: for (r = stack_pop(ctx->ss, &d); r > 0; r = stack_pop(ctx->ss, &d)) {
      00063F 8F 06            [24] 1523 	mov	ar6,r7
      000641 7D 00            [12] 1524 	mov	r5,#0x00
      000643 7A 40            [12] 1525 	mov	r2,#0x40
      000645 C0 07            [24] 1526 	push	ar7
      000647 E5*00            [12] 1527 	mov	a,_bp
      000649 24 08            [12] 1528 	add	a,#0x08
      00064B F8               [12] 1529 	mov	r0,a
      00064C 86 82            [24] 1530 	mov	dpl,@r0
      00064E 08               [12] 1531 	inc	r0
      00064F 86 83            [24] 1532 	mov	dph,@r0
      000651 08               [12] 1533 	inc	r0
      000652 86 F0            [24] 1534 	mov	b,@r0
      000654 12r00r00         [24] 1535 	lcall	__gptrget
      000657 FB               [12] 1536 	mov	r3,a
      000658 A3               [24] 1537 	inc	dptr
      000659 12r00r00         [24] 1538 	lcall	__gptrget
      00065C FC               [12] 1539 	mov	r4,a
      00065D A3               [24] 1540 	inc	dptr
      00065E 12r00r00         [24] 1541 	lcall	__gptrget
      000661 FF               [12] 1542 	mov	r7,a
      000662 C0 06            [24] 1543 	push	ar6
      000664 C0 05            [24] 1544 	push	ar5
      000666 C0 02            [24] 1545 	push	ar2
      000668 8B 82            [24] 1546 	mov	dpl,r3
      00066A 8C 83            [24] 1547 	mov	dph,r4
      00066C 8F F0            [24] 1548 	mov	b,r7
      00066E 12r00r00         [24] 1549 	lcall	_stack_pop
      000671 AC 82            [24] 1550 	mov	r4,dpl
      000673 AF 83            [24] 1551 	mov	r7,dph
      000675 15 81            [12] 1552 	dec	sp
      000677 15 81            [12] 1553 	dec	sp
      000679 15 81            [12] 1554 	dec	sp
      00067B 8C 05            [24] 1555 	mov	ar5,r4
      00067D 8F 06            [24] 1556 	mov	ar6,r7
      00067F D0 07            [24] 1557 	pop	ar7
      000681 02r04rF1         [24] 1558 	ljmp	00158$
      000684                       1559 00113$:
                                   1560 ;	calc.c:109: return 1;
      000684 90 00 01         [24] 1561 	mov	dptr,#0x0001
                                   1562 ;	calc.c:110: }
      000687 85*00 81         [24] 1563 	mov	sp,_bp
      00068A D0*00            [24] 1564 	pop	_bp
      00068C 22               [24] 1565 	ret
                                   1566 ;------------------------------------------------------------
                                   1567 ;Allocation info for local variables in function 'dump_peek'
                                   1568 ;------------------------------------------------------------
                                   1569 ;d                         Allocated to stack - _bp -6
                                   1570 ;_ctx                      Allocated to registers 
                                   1571 ;__1310720019              Allocated to registers 
                                   1572 ;s                         Allocated to registers r5 r6 r7 
                                   1573 ;__1310720021              Allocated to registers r4 r5 r6 r7 
                                   1574 ;d                         Allocated to stack - _bp +1
                                   1575 ;mask                      Allocated to stack - _bp +5
                                   1576 ;__1310720023              Allocated to registers 
                                   1577 ;s                         Allocated to registers r5 r6 r7 
                                   1578 ;------------------------------------------------------------
                                   1579 ;	calc.c:112: static int dump_peek(void *_ctx, long d) __reentrant {
                                   1580 ;	-----------------------------------------
                                   1581 ;	 function dump_peek
                                   1582 ;	-----------------------------------------
      00068D                       1583 _dump_peek:
      00068D C0*00            [24] 1584 	push	_bp
      00068F E5 81            [12] 1585 	mov	a,sp
      000691 F5*00            [12] 1586 	mov	_bp,a
      000693 24 08            [12] 1587 	add	a,#0x08
      000695 F5 81            [12] 1588 	mov	sp,a
                                   1589 ;	calc.c:115: printstr("PA ");
      000697 7Dr38            [12] 1590 	mov	r5,#___str_7
      000699 7Es00            [12] 1591 	mov	r6,#(___str_7 >> 8)
      00069B 7F 80            [12] 1592 	mov	r7,#0x80
                                   1593 ;	calc.c:51: return;
      00069D                       1594 00108$:
                                   1595 ;	calc.c:49: for (; *s; s++) putchar(*s);
      00069D 8D 82            [24] 1596 	mov	dpl,r5
      00069F 8E 83            [24] 1597 	mov	dph,r6
      0006A1 8F F0            [24] 1598 	mov	b,r7
      0006A3 12r00r00         [24] 1599 	lcall	__gptrget
      0006A6 FC               [12] 1600 	mov	r4,a
      0006A7 60 10            [24] 1601 	jz	00102$
      0006A9 7B 00            [12] 1602 	mov	r3,#0x00
      0006AB 8C 82            [24] 1603 	mov	dpl,r4
      0006AD 8B 83            [24] 1604 	mov	dph,r3
      0006AF 12r00r00         [24] 1605 	lcall	_putchar
      0006B2 0D               [12] 1606 	inc	r5
                                   1607 ;	calc.c:115: printstr("PA ");
      0006B3 BD 00 E7         [24] 1608 	cjne	r5,#0x00,00108$
      0006B6 0E               [12] 1609 	inc	r6
      0006B7 80 E4            [24] 1610 	sjmp	00108$
      0006B9                       1611 00102$:
                                   1612 ;	calc.c:116: printf("% 11ld / ", d);
      0006B9 E5*00            [12] 1613 	mov	a,_bp
      0006BB 24 FA            [12] 1614 	add	a,#0xfa
      0006BD F8               [12] 1615 	mov	r0,a
      0006BE E6               [12] 1616 	mov	a,@r0
      0006BF C0 E0            [24] 1617 	push	acc
      0006C1 08               [12] 1618 	inc	r0
      0006C2 E6               [12] 1619 	mov	a,@r0
      0006C3 C0 E0            [24] 1620 	push	acc
      0006C5 08               [12] 1621 	inc	r0
      0006C6 E6               [12] 1622 	mov	a,@r0
      0006C7 C0 E0            [24] 1623 	push	acc
      0006C9 08               [12] 1624 	inc	r0
      0006CA E6               [12] 1625 	mov	a,@r0
      0006CB C0 E0            [24] 1626 	push	acc
      0006CD 74r1D            [12] 1627 	mov	a,#___str_3
      0006CF C0 E0            [24] 1628 	push	acc
      0006D1 74s00            [12] 1629 	mov	a,#(___str_3 >> 8)
      0006D3 C0 E0            [24] 1630 	push	acc
      0006D5 74 80            [12] 1631 	mov	a,#0x80
      0006D7 C0 E0            [24] 1632 	push	acc
      0006D9 12r00r00         [24] 1633 	lcall	_printf
      0006DC E5 81            [12] 1634 	mov	a,sp
      0006DE 24 F9            [12] 1635 	add	a,#0xf9
      0006E0 F5 81            [12] 1636 	mov	sp,a
                                   1637 ;	calc.c:117: printf("%08lx / ", d);
      0006E2 E5*00            [12] 1638 	mov	a,_bp
      0006E4 24 FA            [12] 1639 	add	a,#0xfa
      0006E6 F8               [12] 1640 	mov	r0,a
      0006E7 E6               [12] 1641 	mov	a,@r0
      0006E8 C0 E0            [24] 1642 	push	acc
      0006EA 08               [12] 1643 	inc	r0
      0006EB E6               [12] 1644 	mov	a,@r0
      0006EC C0 E0            [24] 1645 	push	acc
      0006EE 08               [12] 1646 	inc	r0
      0006EF E6               [12] 1647 	mov	a,@r0
      0006F0 C0 E0            [24] 1648 	push	acc
      0006F2 08               [12] 1649 	inc	r0
      0006F3 E6               [12] 1650 	mov	a,@r0
      0006F4 C0 E0            [24] 1651 	push	acc
      0006F6 74r27            [12] 1652 	mov	a,#___str_4
      0006F8 C0 E0            [24] 1653 	push	acc
      0006FA 74s00            [12] 1654 	mov	a,#(___str_4 >> 8)
      0006FC C0 E0            [24] 1655 	push	acc
      0006FE 74 80            [12] 1656 	mov	a,#0x80
      000700 C0 E0            [24] 1657 	push	acc
      000702 12r00r00         [24] 1658 	lcall	_printf
      000705 E5 81            [12] 1659 	mov	a,sp
      000707 24 F9            [12] 1660 	add	a,#0xf9
      000709 F5 81            [12] 1661 	mov	sp,a
                                   1662 ;	calc.c:118: printbin(d);
      00070B E5*00            [12] 1663 	mov	a,_bp
      00070D 24 FA            [12] 1664 	add	a,#0xfa
      00070F F8               [12] 1665 	mov	r0,a
      000710 86 04            [24] 1666 	mov	ar4,@r0
      000712 08               [12] 1667 	inc	r0
      000713 86 05            [24] 1668 	mov	ar5,@r0
      000715 08               [12] 1669 	inc	r0
      000716 86 06            [24] 1670 	mov	ar6,@r0
      000718 08               [12] 1671 	inc	r0
      000719 86 07            [24] 1672 	mov	ar7,@r0
      00071B A8*00            [24] 1673 	mov	r0,_bp
      00071D 08               [12] 1674 	inc	r0
      00071E A6 04            [24] 1675 	mov	@r0,ar4
      000720 08               [12] 1676 	inc	r0
      000721 A6 05            [24] 1677 	mov	@r0,ar5
      000723 08               [12] 1678 	inc	r0
      000724 A6 06            [24] 1679 	mov	@r0,ar6
      000726 08               [12] 1680 	inc	r0
      000727 A6 07            [24] 1681 	mov	@r0,ar7
                                   1682 ;	calc.c:57: for (mask = 0x80000000lu; mask; mask >>= 1)
      000729 E5*00            [12] 1683 	mov	a,_bp
      00072B 24 05            [12] 1684 	add	a,#0x05
      00072D F8               [12] 1685 	mov	r0,a
      00072E E4               [12] 1686 	clr	a
      00072F F6               [12] 1687 	mov	@r0,a
      000730 08               [12] 1688 	inc	r0
      000731 F6               [12] 1689 	mov	@r0,a
      000732 08               [12] 1690 	inc	r0
      000733 F6               [12] 1691 	mov	@r0,a
      000734 08               [12] 1692 	inc	r0
      000735 76 80            [12] 1693 	mov	@r0,#0x80
      000737                       1694 00110$:
                                   1695 ;	calc.c:58: (void)putchar((d & mask) ? (int)'1' : (int)'0');
      000737 A8*00            [24] 1696 	mov	r0,_bp
      000739 08               [12] 1697 	inc	r0
      00073A 86 04            [24] 1698 	mov	ar4,@r0
      00073C 08               [12] 1699 	inc	r0
      00073D 86 05            [24] 1700 	mov	ar5,@r0
      00073F 08               [12] 1701 	inc	r0
      000740 86 06            [24] 1702 	mov	ar6,@r0
      000742 08               [12] 1703 	inc	r0
      000743 86 07            [24] 1704 	mov	ar7,@r0
      000745 E5*00            [12] 1705 	mov	a,_bp
      000747 24 05            [12] 1706 	add	a,#0x05
      000749 F8               [12] 1707 	mov	r0,a
      00074A E6               [12] 1708 	mov	a,@r0
      00074B 52 04            [12] 1709 	anl	ar4,a
      00074D 08               [12] 1710 	inc	r0
      00074E E6               [12] 1711 	mov	a,@r0
      00074F 52 05            [12] 1712 	anl	ar5,a
      000751 08               [12] 1713 	inc	r0
      000752 E6               [12] 1714 	mov	a,@r0
      000753 52 06            [12] 1715 	anl	ar6,a
      000755 08               [12] 1716 	inc	r0
      000756 E6               [12] 1717 	mov	a,@r0
      000757 52 07            [12] 1718 	anl	ar7,a
      000759 EC               [12] 1719 	mov	a,r4
      00075A 4D               [12] 1720 	orl	a,r5
      00075B 4E               [12] 1721 	orl	a,r6
      00075C 4F               [12] 1722 	orl	a,r7
      00075D 60 06            [24] 1723 	jz	00117$
      00075F 7E 31            [12] 1724 	mov	r6,#0x31
      000761 7F 00            [12] 1725 	mov	r7,#0x00
      000763 80 04            [24] 1726 	sjmp	00118$
      000765                       1727 00117$:
      000765 7E 30            [12] 1728 	mov	r6,#0x30
      000767 7F 00            [12] 1729 	mov	r7,#0x00
      000769                       1730 00118$:
      000769 8E 82            [24] 1731 	mov	dpl,r6
      00076B 8F 83            [24] 1732 	mov	dph,r7
      00076D 12r00r00         [24] 1733 	lcall	_putchar
                                   1734 ;	calc.c:57: for (mask = 0x80000000lu; mask; mask >>= 1)
      000770 E5*00            [12] 1735 	mov	a,_bp
      000772 24 05            [12] 1736 	add	a,#0x05
      000774 F8               [12] 1737 	mov	r0,a
      000775 08               [12] 1738 	inc	r0
      000776 08               [12] 1739 	inc	r0
      000777 08               [12] 1740 	inc	r0
      000778 E6               [12] 1741 	mov	a,@r0
      000779 C3               [12] 1742 	clr	c
      00077A 13               [12] 1743 	rrc	a
      00077B F6               [12] 1744 	mov	@r0,a
      00077C 18               [12] 1745 	dec	r0
      00077D E6               [12] 1746 	mov	a,@r0
      00077E 13               [12] 1747 	rrc	a
      00077F F6               [12] 1748 	mov	@r0,a
      000780 18               [12] 1749 	dec	r0
      000781 E6               [12] 1750 	mov	a,@r0
      000782 13               [12] 1751 	rrc	a
      000783 F6               [12] 1752 	mov	@r0,a
      000784 18               [12] 1753 	dec	r0
      000785 E6               [12] 1754 	mov	a,@r0
      000786 13               [12] 1755 	rrc	a
      000787 F6               [12] 1756 	mov	@r0,a
      000788 E5*00            [12] 1757 	mov	a,_bp
      00078A 24 05            [12] 1758 	add	a,#0x05
      00078C F8               [12] 1759 	mov	r0,a
      00078D E6               [12] 1760 	mov	a,@r0
      00078E 08               [12] 1761 	inc	r0
      00078F 46               [12] 1762 	orl	a,@r0
      000790 08               [12] 1763 	inc	r0
      000791 46               [12] 1764 	orl	a,@r0
      000792 08               [12] 1765 	inc	r0
      000793 46               [12] 1766 	orl	a,@r0
      000794 70 A1            [24] 1767 	jnz	00110$
                                   1768 ;	calc.c:119: printstr("\r\n");
      000796 7Dr30            [12] 1769 	mov	r5,#___str_5
      000798 7Es00            [12] 1770 	mov	r6,#(___str_5 >> 8)
      00079A 7F 80            [12] 1771 	mov	r7,#0x80
                                   1772 ;	calc.c:51: return;
      00079C                       1773 00113$:
                                   1774 ;	calc.c:49: for (; *s; s++) putchar(*s);
      00079C 8D 82            [24] 1775 	mov	dpl,r5
      00079E 8E 83            [24] 1776 	mov	dph,r6
      0007A0 8F F0            [24] 1777 	mov	b,r7
      0007A2 12r00r00         [24] 1778 	lcall	__gptrget
      0007A5 FC               [12] 1779 	mov	r4,a
      0007A6 60 10            [24] 1780 	jz	00106$
      0007A8 7B 00            [12] 1781 	mov	r3,#0x00
      0007AA 8C 82            [24] 1782 	mov	dpl,r4
      0007AC 8B 83            [24] 1783 	mov	dph,r3
      0007AE 12r00r00         [24] 1784 	lcall	_putchar
      0007B1 0D               [12] 1785 	inc	r5
                                   1786 ;	calc.c:119: printstr("\r\n");
      0007B2 BD 00 E7         [24] 1787 	cjne	r5,#0x00,00113$
      0007B5 0E               [12] 1788 	inc	r6
      0007B6 80 E4            [24] 1789 	sjmp	00113$
      0007B8                       1790 00106$:
                                   1791 ;	calc.c:121: return 1;
      0007B8 90 00 01         [24] 1792 	mov	dptr,#0x0001
                                   1793 ;	calc.c:122: }
      0007BB 85*00 81         [24] 1794 	mov	sp,_bp
      0007BE D0*00            [24] 1795 	pop	_bp
      0007C0 22               [24] 1796 	ret
                                   1797 ;------------------------------------------------------------
                                   1798 ;Allocation info for local variables in function 'operator'
                                   1799 ;------------------------------------------------------------
                                   1800 ;delta                     Allocated to stack - _bp -5
                                   1801 ;_ctx                      Allocated to stack - _bp +1
                                   1802 ;ctx                       Allocated to stack - _bp +18
                                   1803 ;t0                        Allocated to registers r7 r6 r5 
                                   1804 ;d0                        Allocated to stack - _bp +21
                                   1805 ;d1                        Allocated to stack - _bp +25
                                   1806 ;__1966080025              Allocated to registers 
                                   1807 ;s                         Allocated to registers r7 r6 r5 
                                   1808 ;__1966080027              Allocated to registers 
                                   1809 ;s                         Allocated to registers r7 r6 r5 
                                   1810 ;__2621440029              Allocated to registers 
                                   1811 ;s                         Allocated to registers r7 r6 r5 
                                   1812 ;__2621440031              Allocated to registers r7 r6 r5 r4 
                                   1813 ;d                         Allocated to registers r7 r6 r5 r2 
                                   1814 ;mask                      Allocated to stack - _bp +29
                                   1815 ;__2621440033              Allocated to registers 
                                   1816 ;s                         Allocated to registers r7 r6 r5 
                                   1817 ;__1966080035              Allocated to registers 
                                   1818 ;s                         Allocated to registers r7 r6 r5 
                                   1819 ;__1966080037              Allocated to registers 
                                   1820 ;s                         Allocated to registers r7 r6 r5 
                                   1821 ;__1966080039              Allocated to registers 
                                   1822 ;s                         Allocated to registers r7 r6 r5 
                                   1823 ;__1966080041              Allocated to registers 
                                   1824 ;s                         Allocated to registers r7 r6 r5 
                                   1825 ;__2621440043              Allocated to registers 
                                   1826 ;s                         Allocated to registers r7 r6 r5 
                                   1827 ;__2621440045              Allocated to registers r7 r6 r5 r4 
                                   1828 ;d                         Allocated to registers r7 r6 r5 r2 
                                   1829 ;mask                      Allocated to stack - _bp +29
                                   1830 ;__2621440047              Allocated to registers 
                                   1831 ;s                         Allocated to registers r7 r6 r5 
                                   1832 ;__1966080049              Allocated to registers 
                                   1833 ;s                         Allocated to registers r7 r6 r5 
                                   1834 ;__1966080051              Allocated to registers 
                                   1835 ;s                         Allocated to registers r7 r6 r5 
                                   1836 ;__2621440053              Allocated to registers 
                                   1837 ;s                         Allocated to registers r7 r6 r5 
                                   1838 ;__1966080055              Allocated to registers 
                                   1839 ;s                         Allocated to registers r7 r6 r5 
                                   1840 ;__3276800057              Allocated to registers 
                                   1841 ;s                         Allocated to registers r7 r6 r5 
                                   1842 ;__1966080059              Allocated to registers 
                                   1843 ;s                         Allocated to registers r7 r6 r5 
                                   1844 ;__3276800061              Allocated to registers 
                                   1845 ;s                         Allocated to registers r7 r6 r5 
                                   1846 ;__1966080063              Allocated to registers 
                                   1847 ;s                         Allocated to registers r7 r6 r5 
                                   1848 ;__1966080065              Allocated to registers 
                                   1849 ;s                         Allocated to registers r7 r6 r5 
                                   1850 ;__1966080067              Allocated to registers 
                                   1851 ;s                         Allocated to registers r7 r6 r5 
                                   1852 ;__1966080069              Allocated to registers 
                                   1853 ;s                         Allocated to registers r7 r6 r5 
                                   1854 ;__1966080071              Allocated to registers 
                                   1855 ;s                         Allocated to registers r7 r6 r5 
                                   1856 ;__3276800073              Allocated to registers 
                                   1857 ;s                         Allocated to registers r7 r6 r5 
                                   1858 ;__1966080075              Allocated to registers 
                                   1859 ;s                         Allocated to registers r7 r6 r5 
                                   1860 ;__2621440077              Allocated to registers 
                                   1861 ;s                         Allocated to registers r7 r6 r5 
                                   1862 ;__1966080079              Allocated to registers 
                                   1863 ;s                         Allocated to registers r7 r6 r5 
                                   1864 ;__2621440081              Allocated to registers 
                                   1865 ;s                         Allocated to registers r7 r6 r5 
                                   1866 ;__1966080083              Allocated to registers 
                                   1867 ;s                         Allocated to registers r7 r6 r5 
                                   1868 ;__2621440085              Allocated to registers 
                                   1869 ;s                         Allocated to registers r7 r6 r5 
                                   1870 ;__1966080087              Allocated to registers 
                                   1871 ;s                         Allocated to registers r7 r6 r5 
                                   1872 ;__2621440089              Allocated to registers 
                                   1873 ;s                         Allocated to registers r7 r6 r5 
                                   1874 ;__2621440091              Allocated to registers 
                                   1875 ;s                         Allocated to registers r7 r6 r5 
                                   1876 ;__1966080093              Allocated to registers 
                                   1877 ;s                         Allocated to registers r7 r6 r5 
                                   1878 ;__2621440095              Allocated to registers 
                                   1879 ;s                         Allocated to registers r7 r6 r5 
                                   1880 ;__2621440097              Allocated to registers 
                                   1881 ;s                         Allocated to registers r7 r6 r5 
                                   1882 ;__1966080099              Allocated to registers 
                                   1883 ;s                         Allocated to registers r5 r4 r3 
                                   1884 ;__2621440101              Allocated to registers 
                                   1885 ;s                         Allocated to registers r5 r4 r3 
                                   1886 ;__1966080103              Allocated to registers 
                                   1887 ;s                         Allocated to registers r5 r4 r3 
                                   1888 ;__2621440105              Allocated to registers 
                                   1889 ;s                         Allocated to registers r5 r4 r3 
                                   1890 ;__1966080107              Allocated to registers 
                                   1891 ;s                         Allocated to registers r5 r4 r3 
                                   1892 ;__2621440109              Allocated to registers 
                                   1893 ;s                         Allocated to registers r5 r4 r3 
                                   1894 ;__1966080111              Allocated to registers 
                                   1895 ;s                         Allocated to registers r5 r4 r3 
                                   1896 ;__2621440113              Allocated to registers 
                                   1897 ;s                         Allocated to registers r5 r4 r3 
                                   1898 ;__1966080115              Allocated to registers 
                                   1899 ;s                         Allocated to registers r5 r4 r3 
                                   1900 ;__2621440117              Allocated to registers 
                                   1901 ;s                         Allocated to registers r5 r4 r3 
                                   1902 ;__1966080119              Allocated to registers 
                                   1903 ;s                         Allocated to registers r5 r4 r3 
                                   1904 ;__2621440121              Allocated to registers 
                                   1905 ;s                         Allocated to registers r5 r4 r3 
                                   1906 ;__1966080123              Allocated to registers 
                                   1907 ;s                         Allocated to registers r5 r4 r3 
                                   1908 ;sloc0                     Allocated to stack - _bp +330
                                   1909 ;sloc1                     Allocated to stack - _bp +4
                                   1910 ;sloc2                     Allocated to stack - _bp +7
                                   1911 ;sloc3                     Allocated to stack - _bp +11
                                   1912 ;sloc4                     Allocated to stack - _bp +14
                                   1913 ;------------------------------------------------------------
                                   1914 ;	calc.c:124: static int operator(void *_ctx, delta_t *delta) __reentrant {
                                   1915 ;	-----------------------------------------
                                   1916 ;	 function operator
                                   1917 ;	-----------------------------------------
      0007C1                       1918 _operator:
      0007C1 C0*00            [24] 1919 	push	_bp
      0007C3 85 81*00         [24] 1920 	mov	_bp,sp
      0007C6 C0 82            [24] 1921 	push	dpl
      0007C8 C0 83            [24] 1922 	push	dph
      0007CA C0 F0            [24] 1923 	push	b
      0007CC E5 81            [12] 1924 	mov	a,sp
      0007CE 24 1D            [12] 1925 	add	a,#0x1d
      0007D0 F5 81            [12] 1926 	mov	sp,a
                                   1927 ;	calc.c:125: calc_ctx_t *ctx = (calc_ctx_t *)_ctx;
      0007D2 A8*00            [24] 1928 	mov	r0,_bp
      0007D4 08               [12] 1929 	inc	r0
      0007D5 E5*00            [12] 1930 	mov	a,_bp
      0007D7 24 12            [12] 1931 	add	a,#0x12
      0007D9 F9               [12] 1932 	mov	r1,a
      0007DA E6               [12] 1933 	mov	a,@r0
      0007DB F7               [12] 1934 	mov	@r1,a
      0007DC 08               [12] 1935 	inc	r0
      0007DD 09               [12] 1936 	inc	r1
      0007DE E6               [12] 1937 	mov	a,@r0
      0007DF F7               [12] 1938 	mov	@r1,a
      0007E0 08               [12] 1939 	inc	r0
      0007E1 09               [12] 1940 	inc	r1
      0007E2 E6               [12] 1941 	mov	a,@r0
      0007E3 F7               [12] 1942 	mov	@r1,a
                                   1943 ;	calc.c:129: switch (ctx->digit[0]) {
      0007E4 E5*00            [12] 1944 	mov	a,_bp
      0007E6 24 12            [12] 1945 	add	a,#0x12
      0007E8 F8               [12] 1946 	mov	r0,a
      0007E9 74 07            [12] 1947 	mov	a,#0x07
      0007EB 26               [12] 1948 	add	a,@r0
      0007EC FD               [12] 1949 	mov	r5,a
      0007ED E4               [12] 1950 	clr	a
      0007EE 08               [12] 1951 	inc	r0
      0007EF 36               [12] 1952 	addc	a,@r0
      0007F0 FE               [12] 1953 	mov	r6,a
      0007F1 08               [12] 1954 	inc	r0
      0007F2 86 07            [24] 1955 	mov	ar7,@r0
      0007F4 8D 82            [24] 1956 	mov	dpl,r5
      0007F6 8E 83            [24] 1957 	mov	dph,r6
      0007F8 8F F0            [24] 1958 	mov	b,r7
      0007FA 12r00r00         [24] 1959 	lcall	__gptrget
      0007FD FC               [12] 1960 	mov	r4,a
      0007FE BC 23 03         [24] 1961 	cjne	r4,#0x23,01232$
      000801 02r1CrBA         [24] 1962 	ljmp	00189$
      000804                       1963 01232$:
      000804 BC 25 03         [24] 1964 	cjne	r4,#0x25,01233$
      000807 02r1CrBA         [24] 1965 	ljmp	00189$
      00080A                       1966 01233$:
      00080A BC 26 03         [24] 1967 	cjne	r4,#0x26,01234$
      00080D 02r1FrA0         [24] 1968 	ljmp	00202$
      000810                       1969 01234$:
      000810 BC 2A 03         [24] 1970 	cjne	r4,#0x2a,01235$
      000813 02r18r2A         [24] 1971 	ljmp	00167$
      000816                       1972 01235$:
      000816 BC 2B 03         [24] 1973 	cjne	r4,#0x2b,01236$
      000819 02r15r2B         [24] 1974 	ljmp	00153$
      00081C                       1975 01236$:
      00081C BC 2D 03         [24] 1976 	cjne	r4,#0x2d,01237$
      00081F 02r16rAA         [24] 1977 	ljmp	00160$
      000822                       1978 01237$:
      000822 BC 2E 03         [24] 1979 	cjne	r4,#0x2e,01238$
      000825 02r0ArF8         [24] 1980 	ljmp	00109$
      000828                       1981 01238$:
      000828 BC 2F 03         [24] 1982 	cjne	r4,#0x2f,01239$
      00082B 02r19rD0         [24] 1983 	ljmp	00175$
      00082E                       1984 01239$:
      00082E BC 3C 03         [24] 1985 	cjne	r4,#0x3c,01240$
      000831 02r27rC5         [24] 1986 	ljmp	00237$
      000834                       1987 01240$:
      000834 BC 3E 03         [24] 1988 	cjne	r4,#0x3e,01241$
      000837 02r24r6E         [24] 1989 	ljmp	00223$
      00083A                       1990 01241$:
      00083A BC 4D 03         [24] 1991 	cjne	r4,#0x4d,01242$
      00083D 02r0FrD1         [24] 1992 	ljmp	00127$
      000840                       1993 01242$:
      000840 BC 50 03         [24] 1994 	cjne	r4,#0x50,01243$
      000843 02r0Ar57         [24] 1995 	ljmp	00105$
      000846                       1996 01243$:
      000846 BC 54 03         [24] 1997 	cjne	r4,#0x54,01244$
      000849 02r12rD3         [24] 1998 	ljmp	00145$
      00084C                       1999 01244$:
      00084C BC 55 03         [24] 2000 	cjne	r4,#0x55,01245$
      00084F 02r11rEC         [24] 2001 	ljmp	00139$
      000852                       2002 01245$:
      000852 BC 56 03         [24] 2003 	cjne	r4,#0x56,01246$
      000855 02r0CrB3         [24] 2004 	ljmp	00113$
      000858                       2005 01246$:
      000858 BC 58 03         [24] 2006 	cjne	r4,#0x58,01247$
      00085B 02r14r8C         [24] 2007 	ljmp	00152$
      00085E                       2008 01247$:
      00085E BC 5C 03         [24] 2009 	cjne	r4,#0x5c,01248$
      000861 02r19rD0         [24] 2010 	ljmp	00175$
      000864                       2011 01248$:
      000864 BC 5D 03         [24] 2012 	cjne	r4,#0x5d,01249$
      000867 02r26r11         [24] 2013 	ljmp	00230$
      00086A                       2014 01249$:
      00086A BC 5E 03         [24] 2015 	cjne	r4,#0x5e,01250$
      00086D 02r22rD4         [24] 2016 	ljmp	00216$
      000870                       2017 01250$:
      000870 BC 6D 03         [24] 2018 	cjne	r4,#0x6d,01251$
      000873 02r0Er9D         [24] 2019 	ljmp	00121$
      000876                       2020 01251$:
      000876 BC 70 02         [24] 2021 	cjne	r4,#0x70,01252$
      000879 80 21            [24] 2022 	sjmp	00101$
      00087B                       2023 01252$:
      00087B BC 75 03         [24] 2024 	cjne	r4,#0x75,01253$
      00087E 02r11r05         [24] 2025 	ljmp	00133$
      000881                       2026 01253$:
      000881 BC 76 03         [24] 2027 	cjne	r4,#0x76,01254$
      000884 02r0ArF8         [24] 2028 	ljmp	00109$
      000887                       2029 01254$:
      000887 BC 78 03         [24] 2030 	cjne	r4,#0x78,01255$
      00088A 02r0CrFC         [24] 2031 	ljmp	00114$
      00088D                       2032 01255$:
      00088D BC 7C 03         [24] 2033 	cjne	r4,#0x7c,01256$
      000890 02r21r3A         [24] 2034 	ljmp	00209$
      000893                       2035 01256$:
      000893 BC 7E 03         [24] 2036 	cjne	r4,#0x7e,01257$
      000896 02r29r68         [24] 2037 	ljmp	00244$
      000899                       2038 01257$:
      000899 02r2Ar41         [24] 2039 	ljmp	00248$
                                   2040 ;	calc.c:130: case 'p':
      00089C                       2041 00101$:
                                   2042 ;	calc.c:131: printstr("\r\n");
      00089C 7Fr30            [12] 2043 	mov	r7,#___str_5
      00089E 7Es00            [12] 2044 	mov	r6,#(___str_5 >> 8)
      0008A0 7D 80            [12] 2045 	mov	r5,#0x80
                                   2046 ;	calc.c:51: return;
      0008A2                       2047 00351$:
                                   2048 ;	calc.c:49: for (; *s; s++) putchar(*s);
      0008A2 8F 82            [24] 2049 	mov	dpl,r7
      0008A4 8E 83            [24] 2050 	mov	dph,r6
      0008A6 8D F0            [24] 2051 	mov	b,r5
      0008A8 12r00r00         [24] 2052 	lcall	__gptrget
      0008AB FC               [12] 2053 	mov	r4,a
      0008AC 60 10            [24] 2054 	jz	00251$
      0008AE 7B 00            [12] 2055 	mov	r3,#0x00
      0008B0 8C 82            [24] 2056 	mov	dpl,r4
      0008B2 8B 83            [24] 2057 	mov	dph,r3
      0008B4 12r00r00         [24] 2058 	lcall	_putchar
      0008B7 0F               [12] 2059 	inc	r7
                                   2060 ;	calc.c:131: printstr("\r\n");
      0008B8 BF 00 E7         [24] 2061 	cjne	r7,#0x00,00351$
      0008BB 0E               [12] 2062 	inc	r6
      0008BC 80 E4            [24] 2063 	sjmp	00351$
      0008BE                       2064 00251$:
                                   2065 ;	calc.c:132: if (!stack_peek(ctx->ps, &d0)) printstr("stack underflow\r\n");
      0008BE E5*00            [12] 2066 	mov	a,_bp
      0008C0 24 15            [12] 2067 	add	a,#0x15
      0008C2 FF               [12] 2068 	mov	r7,a
      0008C3 7E 00            [12] 2069 	mov	r6,#0x00
      0008C5 7D 40            [12] 2070 	mov	r5,#0x40
      0008C7 E5*00            [12] 2071 	mov	a,_bp
      0008C9 24 12            [12] 2072 	add	a,#0x12
      0008CB F8               [12] 2073 	mov	r0,a
      0008CC 74 11            [12] 2074 	mov	a,#0x11
      0008CE 26               [12] 2075 	add	a,@r0
      0008CF FA               [12] 2076 	mov	r2,a
      0008D0 ED               [12] 2077 	mov	a,r5
      0008D1 08               [12] 2078 	inc	r0
      0008D2 36               [12] 2079 	addc	a,@r0
      0008D3 FB               [12] 2080 	mov	r3,a
      0008D4 08               [12] 2081 	inc	r0
      0008D5 86 04            [24] 2082 	mov	ar4,@r0
      0008D7 8A 82            [24] 2083 	mov	dpl,r2
      0008D9 8B 83            [24] 2084 	mov	dph,r3
      0008DB 8C F0            [24] 2085 	mov	b,r4
      0008DD 12r00r00         [24] 2086 	lcall	__gptrget
      0008E0 FA               [12] 2087 	mov	r2,a
      0008E1 A3               [24] 2088 	inc	dptr
      0008E2 12r00r00         [24] 2089 	lcall	__gptrget
      0008E5 FB               [12] 2090 	mov	r3,a
      0008E6 A3               [24] 2091 	inc	dptr
      0008E7 12r00r00         [24] 2092 	lcall	__gptrget
      0008EA FC               [12] 2093 	mov	r4,a
      0008EB C0 07            [24] 2094 	push	ar7
      0008ED C0 06            [24] 2095 	push	ar6
      0008EF C0 05            [24] 2096 	push	ar5
      0008F1 8A 82            [24] 2097 	mov	dpl,r2
      0008F3 8B 83            [24] 2098 	mov	dph,r3
      0008F5 8C F0            [24] 2099 	mov	b,r4
      0008F7 12r00r00         [24] 2100 	lcall	_stack_peek
      0008FA AB 82            [24] 2101 	mov	r3,dpl
      0008FC AC 83            [24] 2102 	mov	r4,dph
      0008FE 15 81            [12] 2103 	dec	sp
      000900 15 81            [12] 2104 	dec	sp
      000902 15 81            [12] 2105 	dec	sp
      000904 EB               [12] 2106 	mov	a,r3
      000905 4C               [12] 2107 	orl	a,r4
      000906 70 25            [24] 2108 	jnz	00103$
      000908 7Fr07            [12] 2109 	mov	r7,#___str_1
      00090A 7Es00            [12] 2110 	mov	r6,#(___str_1 >> 8)
      00090C 7D 80            [12] 2111 	mov	r5,#0x80
                                   2112 ;	calc.c:51: return;
      00090E                       2113 00354$:
                                   2114 ;	calc.c:49: for (; *s; s++) putchar(*s);
      00090E 8F 82            [24] 2115 	mov	dpl,r7
      000910 8E 83            [24] 2116 	mov	dph,r6
      000912 8D F0            [24] 2117 	mov	b,r5
      000914 12r00r00         [24] 2118 	lcall	__gptrget
      000917 FC               [12] 2119 	mov	r4,a
      000918 70 03            [24] 2120 	jnz	01261$
      00091A 02r2Ar46         [24] 2121 	ljmp	00249$
      00091D                       2122 01261$:
      00091D 7B 00            [12] 2123 	mov	r3,#0x00
      00091F 8C 82            [24] 2124 	mov	dpl,r4
      000921 8B 83            [24] 2125 	mov	dph,r3
      000923 12r00r00         [24] 2126 	lcall	_putchar
      000926 0F               [12] 2127 	inc	r7
                                   2128 ;	calc.c:132: if (!stack_peek(ctx->ps, &d0)) printstr("stack underflow\r\n");
      000927 BF 00 E4         [24] 2129 	cjne	r7,#0x00,00354$
      00092A 0E               [12] 2130 	inc	r6
      00092B 80 E1            [24] 2131 	sjmp	00354$
      00092D                       2132 00103$:
                                   2133 ;	calc.c:134: printstr("PT ");
      00092D 7Fr3C            [12] 2134 	mov	r7,#___str_8
      00092F 7Es00            [12] 2135 	mov	r6,#(___str_8 >> 8)
      000931 7D 80            [12] 2136 	mov	r5,#0x80
                                   2137 ;	calc.c:51: return;
      000933                       2138 00357$:
                                   2139 ;	calc.c:49: for (; *s; s++) putchar(*s);
      000933 8F 82            [24] 2140 	mov	dpl,r7
      000935 8E 83            [24] 2141 	mov	dph,r6
      000937 8D F0            [24] 2142 	mov	b,r5
      000939 12r00r00         [24] 2143 	lcall	__gptrget
      00093C FC               [12] 2144 	mov	r4,a
      00093D 60 10            [24] 2145 	jz	00255$
      00093F 7B 00            [12] 2146 	mov	r3,#0x00
      000941 8C 82            [24] 2147 	mov	dpl,r4
      000943 8B 83            [24] 2148 	mov	dph,r3
      000945 12r00r00         [24] 2149 	lcall	_putchar
      000948 0F               [12] 2150 	inc	r7
                                   2151 ;	calc.c:134: printstr("PT ");
      000949 BF 00 E7         [24] 2152 	cjne	r7,#0x00,00357$
      00094C 0E               [12] 2153 	inc	r6
      00094D 80 E4            [24] 2154 	sjmp	00357$
      00094F                       2155 00255$:
                                   2156 ;	calc.c:135: printf("% 11ld / ", d0);
      00094F E5*00            [12] 2157 	mov	a,_bp
      000951 24 15            [12] 2158 	add	a,#0x15
      000953 F8               [12] 2159 	mov	r0,a
      000954 E6               [12] 2160 	mov	a,@r0
      000955 C0 E0            [24] 2161 	push	acc
      000957 08               [12] 2162 	inc	r0
      000958 E6               [12] 2163 	mov	a,@r0
      000959 C0 E0            [24] 2164 	push	acc
      00095B 08               [12] 2165 	inc	r0
      00095C E6               [12] 2166 	mov	a,@r0
      00095D C0 E0            [24] 2167 	push	acc
      00095F 08               [12] 2168 	inc	r0
      000960 E6               [12] 2169 	mov	a,@r0
      000961 C0 E0            [24] 2170 	push	acc
      000963 74r1D            [12] 2171 	mov	a,#___str_3
      000965 C0 E0            [24] 2172 	push	acc
      000967 74s00            [12] 2173 	mov	a,#(___str_3 >> 8)
      000969 C0 E0            [24] 2174 	push	acc
      00096B 74 80            [12] 2175 	mov	a,#0x80
      00096D C0 E0            [24] 2176 	push	acc
      00096F 12r00r00         [24] 2177 	lcall	_printf
      000972 E5 81            [12] 2178 	mov	a,sp
      000974 24 F9            [12] 2179 	add	a,#0xf9
      000976 F5 81            [12] 2180 	mov	sp,a
                                   2181 ;	calc.c:136: printf("%08lx / ", d0);
      000978 E5*00            [12] 2182 	mov	a,_bp
      00097A 24 15            [12] 2183 	add	a,#0x15
      00097C F8               [12] 2184 	mov	r0,a
      00097D E6               [12] 2185 	mov	a,@r0
      00097E C0 E0            [24] 2186 	push	acc
      000980 08               [12] 2187 	inc	r0
      000981 E6               [12] 2188 	mov	a,@r0
      000982 C0 E0            [24] 2189 	push	acc
      000984 08               [12] 2190 	inc	r0
      000985 E6               [12] 2191 	mov	a,@r0
      000986 C0 E0            [24] 2192 	push	acc
      000988 08               [12] 2193 	inc	r0
      000989 E6               [12] 2194 	mov	a,@r0
      00098A C0 E0            [24] 2195 	push	acc
      00098C 74r27            [12] 2196 	mov	a,#___str_4
      00098E C0 E0            [24] 2197 	push	acc
      000990 74s00            [12] 2198 	mov	a,#(___str_4 >> 8)
      000992 C0 E0            [24] 2199 	push	acc
      000994 74 80            [12] 2200 	mov	a,#0x80
      000996 C0 E0            [24] 2201 	push	acc
      000998 12r00r00         [24] 2202 	lcall	_printf
      00099B E5 81            [12] 2203 	mov	a,sp
      00099D 24 F9            [12] 2204 	add	a,#0xf9
      00099F F5 81            [12] 2205 	mov	sp,a
                                   2206 ;	calc.c:137: printbin(d0);
      0009A1 E5*00            [12] 2207 	mov	a,_bp
      0009A3 24 15            [12] 2208 	add	a,#0x15
      0009A5 F8               [12] 2209 	mov	r0,a
      0009A6 86 07            [24] 2210 	mov	ar7,@r0
      0009A8 08               [12] 2211 	inc	r0
      0009A9 86 06            [24] 2212 	mov	ar6,@r0
      0009AB 08               [12] 2213 	inc	r0
      0009AC 86 05            [24] 2214 	mov	ar5,@r0
      0009AE 08               [12] 2215 	inc	r0
      0009AF 86 04            [24] 2216 	mov	ar4,@r0
      0009B1 8C 02            [24] 2217 	mov	ar2,r4
                                   2218 ;	calc.c:57: for (mask = 0x80000000lu; mask; mask >>= 1)
      0009B3 E5*00            [12] 2219 	mov	a,_bp
      0009B5 24 1D            [12] 2220 	add	a,#0x1d
      0009B7 F8               [12] 2221 	mov	r0,a
      0009B8 E4               [12] 2222 	clr	a
      0009B9 F6               [12] 2223 	mov	@r0,a
      0009BA 08               [12] 2224 	inc	r0
      0009BB F6               [12] 2225 	mov	@r0,a
      0009BC 08               [12] 2226 	inc	r0
      0009BD F6               [12] 2227 	mov	@r0,a
      0009BE 08               [12] 2228 	inc	r0
      0009BF 76 80            [12] 2229 	mov	@r0,#0x80
      0009C1                       2230 00359$:
                                   2231 ;	calc.c:58: (void)putchar((d & mask) ? (int)'1' : (int)'0');
      0009C1 E5*00            [12] 2232 	mov	a,_bp
      0009C3 24 07            [12] 2233 	add	a,#0x07
      0009C5 F8               [12] 2234 	mov	r0,a
      0009C6 A6 07            [24] 2235 	mov	@r0,ar7
      0009C8 08               [12] 2236 	inc	r0
      0009C9 A6 06            [24] 2237 	mov	@r0,ar6
      0009CB 08               [12] 2238 	inc	r0
      0009CC A6 05            [24] 2239 	mov	@r0,ar5
      0009CE 08               [12] 2240 	inc	r0
      0009CF A6 02            [24] 2241 	mov	@r0,ar2
      0009D1 E5*00            [12] 2242 	mov	a,_bp
      0009D3 24 07            [12] 2243 	add	a,#0x07
      0009D5 F8               [12] 2244 	mov	r0,a
      0009D6 E5*00            [12] 2245 	mov	a,_bp
      0009D8 24 1D            [12] 2246 	add	a,#0x1d
      0009DA F9               [12] 2247 	mov	r1,a
      0009DB E7               [12] 2248 	mov	a,@r1
      0009DC 56               [12] 2249 	anl	a,@r0
      0009DD F6               [12] 2250 	mov	@r0,a
      0009DE 09               [12] 2251 	inc	r1
      0009DF E7               [12] 2252 	mov	a,@r1
      0009E0 08               [12] 2253 	inc	r0
      0009E1 56               [12] 2254 	anl	a,@r0
      0009E2 F6               [12] 2255 	mov	@r0,a
      0009E3 09               [12] 2256 	inc	r1
      0009E4 E7               [12] 2257 	mov	a,@r1
      0009E5 08               [12] 2258 	inc	r0
      0009E6 56               [12] 2259 	anl	a,@r0
      0009E7 F6               [12] 2260 	mov	@r0,a
      0009E8 09               [12] 2261 	inc	r1
      0009E9 E7               [12] 2262 	mov	a,@r1
      0009EA 08               [12] 2263 	inc	r0
      0009EB 56               [12] 2264 	anl	a,@r0
      0009EC F6               [12] 2265 	mov	@r0,a
      0009ED E5*00            [12] 2266 	mov	a,_bp
      0009EF 24 07            [12] 2267 	add	a,#0x07
      0009F1 F8               [12] 2268 	mov	r0,a
      0009F2 E6               [12] 2269 	mov	a,@r0
      0009F3 08               [12] 2270 	inc	r0
      0009F4 46               [12] 2271 	orl	a,@r0
      0009F5 08               [12] 2272 	inc	r0
      0009F6 46               [12] 2273 	orl	a,@r0
      0009F7 08               [12] 2274 	inc	r0
      0009F8 46               [12] 2275 	orl	a,@r0
      0009F9 60 06            [24] 2276 	jz	00500$
      0009FB 7B 31            [12] 2277 	mov	r3,#0x31
      0009FD 7C 00            [12] 2278 	mov	r4,#0x00
      0009FF 80 04            [24] 2279 	sjmp	00501$
      000A01                       2280 00500$:
      000A01 7B 30            [12] 2281 	mov	r3,#0x30
      000A03 7C 00            [12] 2282 	mov	r4,#0x00
      000A05                       2283 00501$:
      000A05 8B 82            [24] 2284 	mov	dpl,r3
      000A07 8C 83            [24] 2285 	mov	dph,r4
      000A09 12r00r00         [24] 2286 	lcall	_putchar
                                   2287 ;	calc.c:57: for (mask = 0x80000000lu; mask; mask >>= 1)
      000A0C E5*00            [12] 2288 	mov	a,_bp
      000A0E 24 1D            [12] 2289 	add	a,#0x1d
      000A10 F8               [12] 2290 	mov	r0,a
      000A11 08               [12] 2291 	inc	r0
      000A12 08               [12] 2292 	inc	r0
      000A13 08               [12] 2293 	inc	r0
      000A14 E6               [12] 2294 	mov	a,@r0
      000A15 C3               [12] 2295 	clr	c
      000A16 13               [12] 2296 	rrc	a
      000A17 F6               [12] 2297 	mov	@r0,a
      000A18 18               [12] 2298 	dec	r0
      000A19 E6               [12] 2299 	mov	a,@r0
      000A1A 13               [12] 2300 	rrc	a
      000A1B F6               [12] 2301 	mov	@r0,a
      000A1C 18               [12] 2302 	dec	r0
      000A1D E6               [12] 2303 	mov	a,@r0
      000A1E 13               [12] 2304 	rrc	a
      000A1F F6               [12] 2305 	mov	@r0,a
      000A20 18               [12] 2306 	dec	r0
      000A21 E6               [12] 2307 	mov	a,@r0
      000A22 13               [12] 2308 	rrc	a
      000A23 F6               [12] 2309 	mov	@r0,a
      000A24 E5*00            [12] 2310 	mov	a,_bp
      000A26 24 1D            [12] 2311 	add	a,#0x1d
      000A28 F8               [12] 2312 	mov	r0,a
      000A29 E6               [12] 2313 	mov	a,@r0
      000A2A 08               [12] 2314 	inc	r0
      000A2B 46               [12] 2315 	orl	a,@r0
      000A2C 08               [12] 2316 	inc	r0
      000A2D 46               [12] 2317 	orl	a,@r0
      000A2E 08               [12] 2318 	inc	r0
      000A2F 46               [12] 2319 	orl	a,@r0
      000A30 70 8F            [24] 2320 	jnz	00359$
                                   2321 ;	calc.c:138: printstr("\r\n");
      000A32 7Fr30            [12] 2322 	mov	r7,#___str_5
      000A34 7Es00            [12] 2323 	mov	r6,#(___str_5 >> 8)
      000A36 7D 80            [12] 2324 	mov	r5,#0x80
                                   2325 ;	calc.c:51: return;
      000A38                       2326 00362$:
                                   2327 ;	calc.c:49: for (; *s; s++) putchar(*s);
      000A38 8F 82            [24] 2328 	mov	dpl,r7
      000A3A 8E 83            [24] 2329 	mov	dph,r6
      000A3C 8D F0            [24] 2330 	mov	b,r5
      000A3E 12r00r00         [24] 2331 	lcall	__gptrget
      000A41 FC               [12] 2332 	mov	r4,a
      000A42 70 03            [24] 2333 	jnz	01267$
      000A44 02r2Ar46         [24] 2334 	ljmp	00249$
      000A47                       2335 01267$:
      000A47 7B 00            [12] 2336 	mov	r3,#0x00
      000A49 8C 82            [24] 2337 	mov	dpl,r4
      000A4B 8B 83            [24] 2338 	mov	dph,r3
      000A4D 12r00r00         [24] 2339 	lcall	_putchar
      000A50 0F               [12] 2340 	inc	r7
                                   2341 ;	calc.c:141: case 'P':
      000A51 BF 00 E4         [24] 2342 	cjne	r7,#0x00,00362$
      000A54 0E               [12] 2343 	inc	r6
      000A55 80 E1            [24] 2344 	sjmp	00362$
      000A57                       2345 00105$:
                                   2346 ;	calc.c:142: printstr("\r\n");
      000A57 7Fr30            [12] 2347 	mov	r7,#___str_5
      000A59 7Es00            [12] 2348 	mov	r6,#(___str_5 >> 8)
      000A5B 7D 80            [12] 2349 	mov	r5,#0x80
                                   2350 ;	calc.c:51: return;
      000A5D                       2351 00365$:
                                   2352 ;	calc.c:49: for (; *s; s++) putchar(*s);
      000A5D 8F 82            [24] 2353 	mov	dpl,r7
      000A5F 8E 83            [24] 2354 	mov	dph,r6
      000A61 8D F0            [24] 2355 	mov	b,r5
      000A63 12r00r00         [24] 2356 	lcall	__gptrget
      000A66 FC               [12] 2357 	mov	r4,a
      000A67 60 10            [24] 2358 	jz	00261$
      000A69 7B 00            [12] 2359 	mov	r3,#0x00
      000A6B 8C 82            [24] 2360 	mov	dpl,r4
      000A6D 8B 83            [24] 2361 	mov	dph,r3
      000A6F 12r00r00         [24] 2362 	lcall	_putchar
      000A72 0F               [12] 2363 	inc	r7
                                   2364 ;	calc.c:142: printstr("\r\n");
      000A73 BF 00 E7         [24] 2365 	cjne	r7,#0x00,00365$
      000A76 0E               [12] 2366 	inc	r6
      000A77 80 E4            [24] 2367 	sjmp	00365$
      000A79                       2368 00261$:
                                   2369 ;	calc.c:143: if (!stack_iter_peek(ctx->ps, dump_peek, ctx)) printstr("stack underflow\r\n");
      000A79 E5*00            [12] 2370 	mov	a,_bp
      000A7B 24 12            [12] 2371 	add	a,#0x12
      000A7D F8               [12] 2372 	mov	r0,a
      000A7E 86 07            [24] 2373 	mov	ar7,@r0
      000A80 08               [12] 2374 	inc	r0
      000A81 86 06            [24] 2375 	mov	ar6,@r0
      000A83 08               [12] 2376 	inc	r0
      000A84 86 05            [24] 2377 	mov	ar5,@r0
      000A86 E5*00            [12] 2378 	mov	a,_bp
      000A88 24 12            [12] 2379 	add	a,#0x12
      000A8A F8               [12] 2380 	mov	r0,a
      000A8B 74 11            [12] 2381 	mov	a,#0x11
      000A8D 26               [12] 2382 	add	a,@r0
      000A8E FA               [12] 2383 	mov	r2,a
      000A8F 74 40            [12] 2384 	mov	a,#0x40
      000A91 08               [12] 2385 	inc	r0
      000A92 36               [12] 2386 	addc	a,@r0
      000A93 FB               [12] 2387 	mov	r3,a
      000A94 08               [12] 2388 	inc	r0
      000A95 86 04            [24] 2389 	mov	ar4,@r0
      000A97 8A 82            [24] 2390 	mov	dpl,r2
      000A99 8B 83            [24] 2391 	mov	dph,r3
      000A9B 8C F0            [24] 2392 	mov	b,r4
      000A9D 12r00r00         [24] 2393 	lcall	__gptrget
      000AA0 FA               [12] 2394 	mov	r2,a
      000AA1 A3               [24] 2395 	inc	dptr
      000AA2 12r00r00         [24] 2396 	lcall	__gptrget
      000AA5 FB               [12] 2397 	mov	r3,a
      000AA6 A3               [24] 2398 	inc	dptr
      000AA7 12r00r00         [24] 2399 	lcall	__gptrget
      000AAA FC               [12] 2400 	mov	r4,a
      000AAB C0 07            [24] 2401 	push	ar7
      000AAD C0 06            [24] 2402 	push	ar6
      000AAF C0 05            [24] 2403 	push	ar5
      000AB1 74r8D            [12] 2404 	mov	a,#_dump_peek
      000AB3 C0 E0            [24] 2405 	push	acc
      000AB5 74s06            [12] 2406 	mov	a,#(_dump_peek >> 8)
      000AB7 C0 E0            [24] 2407 	push	acc
      000AB9 8A 82            [24] 2408 	mov	dpl,r2
      000ABB 8B 83            [24] 2409 	mov	dph,r3
      000ABD 8C F0            [24] 2410 	mov	b,r4
      000ABF 12r00r00         [24] 2411 	lcall	_stack_iter_peek
      000AC2 AB 82            [24] 2412 	mov	r3,dpl
      000AC4 AC 83            [24] 2413 	mov	r4,dph
      000AC6 E5 81            [12] 2414 	mov	a,sp
      000AC8 24 FB            [12] 2415 	add	a,#0xfb
      000ACA F5 81            [12] 2416 	mov	sp,a
      000ACC EB               [12] 2417 	mov	a,r3
      000ACD 4C               [12] 2418 	orl	a,r4
      000ACE 60 03            [24] 2419 	jz	01271$
      000AD0 02r2Ar46         [24] 2420 	ljmp	00249$
      000AD3                       2421 01271$:
      000AD3 7Fr07            [12] 2422 	mov	r7,#___str_1
      000AD5 7Es00            [12] 2423 	mov	r6,#(___str_1 >> 8)
      000AD7 7D 80            [12] 2424 	mov	r5,#0x80
                                   2425 ;	calc.c:51: return;
      000AD9                       2426 00368$:
                                   2427 ;	calc.c:49: for (; *s; s++) putchar(*s);
      000AD9 8F 82            [24] 2428 	mov	dpl,r7
      000ADB 8E 83            [24] 2429 	mov	dph,r6
      000ADD 8D F0            [24] 2430 	mov	b,r5
      000ADF 12r00r00         [24] 2431 	lcall	__gptrget
      000AE2 FC               [12] 2432 	mov	r4,a
      000AE3 70 03            [24] 2433 	jnz	01272$
      000AE5 02r2Ar46         [24] 2434 	ljmp	00249$
      000AE8                       2435 01272$:
      000AE8 7B 00            [12] 2436 	mov	r3,#0x00
      000AEA 8C 82            [24] 2437 	mov	dpl,r4
      000AEC 8B 83            [24] 2438 	mov	dph,r3
      000AEE 12r00r00         [24] 2439 	lcall	_putchar
      000AF1 0F               [12] 2440 	inc	r7
                                   2441 ;	calc.c:146: case 'v':
      000AF2 BF 00 E4         [24] 2442 	cjne	r7,#0x00,00368$
      000AF5 0E               [12] 2443 	inc	r6
      000AF6 80 E1            [24] 2444 	sjmp	00368$
      000AF8                       2445 00109$:
                                   2446 ;	calc.c:147: printstr("\r\n");
      000AF8 7Fr30            [12] 2447 	mov	r7,#___str_5
      000AFA 7Es00            [12] 2448 	mov	r6,#(___str_5 >> 8)
      000AFC 7D 80            [12] 2449 	mov	r5,#0x80
                                   2450 ;	calc.c:51: return;
      000AFE                       2451 00371$:
                                   2452 ;	calc.c:49: for (; *s; s++) putchar(*s);
      000AFE 8F 82            [24] 2453 	mov	dpl,r7
      000B00 8E 83            [24] 2454 	mov	dph,r6
      000B02 8D F0            [24] 2455 	mov	b,r5
      000B04 12r00r00         [24] 2456 	lcall	__gptrget
      000B07 FC               [12] 2457 	mov	r4,a
      000B08 60 10            [24] 2458 	jz	00265$
      000B0A 7B 00            [12] 2459 	mov	r3,#0x00
      000B0C 8C 82            [24] 2460 	mov	dpl,r4
      000B0E 8B 83            [24] 2461 	mov	dph,r3
      000B10 12r00r00         [24] 2462 	lcall	_putchar
      000B13 0F               [12] 2463 	inc	r7
                                   2464 ;	calc.c:147: printstr("\r\n");
      000B14 BF 00 E7         [24] 2465 	cjne	r7,#0x00,00371$
      000B17 0E               [12] 2466 	inc	r6
      000B18 80 E4            [24] 2467 	sjmp	00371$
      000B1A                       2468 00265$:
                                   2469 ;	calc.c:148: if (!stack_pop(ctx->ps, &d0)) printstr("stack underflow\r\n");
      000B1A E5*00            [12] 2470 	mov	a,_bp
      000B1C 24 15            [12] 2471 	add	a,#0x15
      000B1E FF               [12] 2472 	mov	r7,a
      000B1F 7E 00            [12] 2473 	mov	r6,#0x00
      000B21 7D 40            [12] 2474 	mov	r5,#0x40
      000B23 E5*00            [12] 2475 	mov	a,_bp
      000B25 24 12            [12] 2476 	add	a,#0x12
      000B27 F8               [12] 2477 	mov	r0,a
      000B28 74 11            [12] 2478 	mov	a,#0x11
      000B2A 26               [12] 2479 	add	a,@r0
      000B2B FA               [12] 2480 	mov	r2,a
      000B2C ED               [12] 2481 	mov	a,r5
      000B2D 08               [12] 2482 	inc	r0
      000B2E 36               [12] 2483 	addc	a,@r0
      000B2F FB               [12] 2484 	mov	r3,a
      000B30 08               [12] 2485 	inc	r0
      000B31 86 04            [24] 2486 	mov	ar4,@r0
      000B33 8A 82            [24] 2487 	mov	dpl,r2
      000B35 8B 83            [24] 2488 	mov	dph,r3
      000B37 8C F0            [24] 2489 	mov	b,r4
      000B39 12r00r00         [24] 2490 	lcall	__gptrget
      000B3C FA               [12] 2491 	mov	r2,a
      000B3D A3               [24] 2492 	inc	dptr
      000B3E 12r00r00         [24] 2493 	lcall	__gptrget
      000B41 FB               [12] 2494 	mov	r3,a
      000B42 A3               [24] 2495 	inc	dptr
      000B43 12r00r00         [24] 2496 	lcall	__gptrget
      000B46 FC               [12] 2497 	mov	r4,a
      000B47 C0 07            [24] 2498 	push	ar7
      000B49 C0 06            [24] 2499 	push	ar6
      000B4B C0 05            [24] 2500 	push	ar5
      000B4D 8A 82            [24] 2501 	mov	dpl,r2
      000B4F 8B 83            [24] 2502 	mov	dph,r3
      000B51 8C F0            [24] 2503 	mov	b,r4
      000B53 12r00r00         [24] 2504 	lcall	_stack_pop
      000B56 AB 82            [24] 2505 	mov	r3,dpl
      000B58 AC 83            [24] 2506 	mov	r4,dph
      000B5A 15 81            [12] 2507 	dec	sp
      000B5C 15 81            [12] 2508 	dec	sp
      000B5E 15 81            [12] 2509 	dec	sp
      000B60 EB               [12] 2510 	mov	a,r3
      000B61 4C               [12] 2511 	orl	a,r4
      000B62 70 25            [24] 2512 	jnz	00111$
      000B64 7Fr07            [12] 2513 	mov	r7,#___str_1
      000B66 7Es00            [12] 2514 	mov	r6,#(___str_1 >> 8)
      000B68 7D 80            [12] 2515 	mov	r5,#0x80
                                   2516 ;	calc.c:51: return;
      000B6A                       2517 00374$:
                                   2518 ;	calc.c:49: for (; *s; s++) putchar(*s);
      000B6A 8F 82            [24] 2519 	mov	dpl,r7
      000B6C 8E 83            [24] 2520 	mov	dph,r6
      000B6E 8D F0            [24] 2521 	mov	b,r5
      000B70 12r00r00         [24] 2522 	lcall	__gptrget
      000B73 FC               [12] 2523 	mov	r4,a
      000B74 70 03            [24] 2524 	jnz	01277$
      000B76 02r2Ar46         [24] 2525 	ljmp	00249$
      000B79                       2526 01277$:
      000B79 7B 00            [12] 2527 	mov	r3,#0x00
      000B7B 8C 82            [24] 2528 	mov	dpl,r4
      000B7D 8B 83            [24] 2529 	mov	dph,r3
      000B7F 12r00r00         [24] 2530 	lcall	_putchar
      000B82 0F               [12] 2531 	inc	r7
                                   2532 ;	calc.c:148: if (!stack_pop(ctx->ps, &d0)) printstr("stack underflow\r\n");
      000B83 BF 00 E4         [24] 2533 	cjne	r7,#0x00,00374$
      000B86 0E               [12] 2534 	inc	r6
      000B87 80 E1            [24] 2535 	sjmp	00374$
      000B89                       2536 00111$:
                                   2537 ;	calc.c:150: printstr("VT ");
      000B89 7Fr40            [12] 2538 	mov	r7,#___str_9
      000B8B 7Es00            [12] 2539 	mov	r6,#(___str_9 >> 8)
      000B8D 7D 80            [12] 2540 	mov	r5,#0x80
                                   2541 ;	calc.c:51: return;
      000B8F                       2542 00377$:
                                   2543 ;	calc.c:49: for (; *s; s++) putchar(*s);
      000B8F 8F 82            [24] 2544 	mov	dpl,r7
      000B91 8E 83            [24] 2545 	mov	dph,r6
      000B93 8D F0            [24] 2546 	mov	b,r5
      000B95 12r00r00         [24] 2547 	lcall	__gptrget
      000B98 FC               [12] 2548 	mov	r4,a
      000B99 60 10            [24] 2549 	jz	00269$
      000B9B 7B 00            [12] 2550 	mov	r3,#0x00
      000B9D 8C 82            [24] 2551 	mov	dpl,r4
      000B9F 8B 83            [24] 2552 	mov	dph,r3
      000BA1 12r00r00         [24] 2553 	lcall	_putchar
      000BA4 0F               [12] 2554 	inc	r7
                                   2555 ;	calc.c:150: printstr("VT ");
      000BA5 BF 00 E7         [24] 2556 	cjne	r7,#0x00,00377$
      000BA8 0E               [12] 2557 	inc	r6
      000BA9 80 E4            [24] 2558 	sjmp	00377$
      000BAB                       2559 00269$:
                                   2560 ;	calc.c:151: printf("% 11ld / ", d0);
      000BAB E5*00            [12] 2561 	mov	a,_bp
      000BAD 24 15            [12] 2562 	add	a,#0x15
      000BAF F8               [12] 2563 	mov	r0,a
      000BB0 E6               [12] 2564 	mov	a,@r0
      000BB1 C0 E0            [24] 2565 	push	acc
      000BB3 08               [12] 2566 	inc	r0
      000BB4 E6               [12] 2567 	mov	a,@r0
      000BB5 C0 E0            [24] 2568 	push	acc
      000BB7 08               [12] 2569 	inc	r0
      000BB8 E6               [12] 2570 	mov	a,@r0
      000BB9 C0 E0            [24] 2571 	push	acc
      000BBB 08               [12] 2572 	inc	r0
      000BBC E6               [12] 2573 	mov	a,@r0
      000BBD C0 E0            [24] 2574 	push	acc
      000BBF 74r1D            [12] 2575 	mov	a,#___str_3
      000BC1 C0 E0            [24] 2576 	push	acc
      000BC3 74s00            [12] 2577 	mov	a,#(___str_3 >> 8)
      000BC5 C0 E0            [24] 2578 	push	acc
      000BC7 74 80            [12] 2579 	mov	a,#0x80
      000BC9 C0 E0            [24] 2580 	push	acc
      000BCB 12r00r00         [24] 2581 	lcall	_printf
      000BCE E5 81            [12] 2582 	mov	a,sp
      000BD0 24 F9            [12] 2583 	add	a,#0xf9
      000BD2 F5 81            [12] 2584 	mov	sp,a
                                   2585 ;	calc.c:152: printf("%08lx / ", d0);
      000BD4 E5*00            [12] 2586 	mov	a,_bp
      000BD6 24 15            [12] 2587 	add	a,#0x15
      000BD8 F8               [12] 2588 	mov	r0,a
      000BD9 E6               [12] 2589 	mov	a,@r0
      000BDA C0 E0            [24] 2590 	push	acc
      000BDC 08               [12] 2591 	inc	r0
      000BDD E6               [12] 2592 	mov	a,@r0
      000BDE C0 E0            [24] 2593 	push	acc
      000BE0 08               [12] 2594 	inc	r0
      000BE1 E6               [12] 2595 	mov	a,@r0
      000BE2 C0 E0            [24] 2596 	push	acc
      000BE4 08               [12] 2597 	inc	r0
      000BE5 E6               [12] 2598 	mov	a,@r0
      000BE6 C0 E0            [24] 2599 	push	acc
      000BE8 74r27            [12] 2600 	mov	a,#___str_4
      000BEA C0 E0            [24] 2601 	push	acc
      000BEC 74s00            [12] 2602 	mov	a,#(___str_4 >> 8)
      000BEE C0 E0            [24] 2603 	push	acc
      000BF0 74 80            [12] 2604 	mov	a,#0x80
      000BF2 C0 E0            [24] 2605 	push	acc
      000BF4 12r00r00         [24] 2606 	lcall	_printf
      000BF7 E5 81            [12] 2607 	mov	a,sp
      000BF9 24 F9            [12] 2608 	add	a,#0xf9
      000BFB F5 81            [12] 2609 	mov	sp,a
                                   2610 ;	calc.c:153: printbin(d0);
      000BFD E5*00            [12] 2611 	mov	a,_bp
      000BFF 24 15            [12] 2612 	add	a,#0x15
      000C01 F8               [12] 2613 	mov	r0,a
      000C02 86 07            [24] 2614 	mov	ar7,@r0
      000C04 08               [12] 2615 	inc	r0
      000C05 86 06            [24] 2616 	mov	ar6,@r0
      000C07 08               [12] 2617 	inc	r0
      000C08 86 05            [24] 2618 	mov	ar5,@r0
      000C0A 08               [12] 2619 	inc	r0
      000C0B 86 04            [24] 2620 	mov	ar4,@r0
      000C0D 8C 02            [24] 2621 	mov	ar2,r4
                                   2622 ;	calc.c:57: for (mask = 0x80000000lu; mask; mask >>= 1)
      000C0F E5*00            [12] 2623 	mov	a,_bp
      000C11 24 1D            [12] 2624 	add	a,#0x1d
      000C13 F8               [12] 2625 	mov	r0,a
      000C14 E4               [12] 2626 	clr	a
      000C15 F6               [12] 2627 	mov	@r0,a
      000C16 08               [12] 2628 	inc	r0
      000C17 F6               [12] 2629 	mov	@r0,a
      000C18 08               [12] 2630 	inc	r0
      000C19 F6               [12] 2631 	mov	@r0,a
      000C1A 08               [12] 2632 	inc	r0
      000C1B 76 80            [12] 2633 	mov	@r0,#0x80
      000C1D                       2634 00379$:
                                   2635 ;	calc.c:58: (void)putchar((d & mask) ? (int)'1' : (int)'0');
      000C1D E5*00            [12] 2636 	mov	a,_bp
      000C1F 24 07            [12] 2637 	add	a,#0x07
      000C21 F8               [12] 2638 	mov	r0,a
      000C22 A6 07            [24] 2639 	mov	@r0,ar7
      000C24 08               [12] 2640 	inc	r0
      000C25 A6 06            [24] 2641 	mov	@r0,ar6
      000C27 08               [12] 2642 	inc	r0
      000C28 A6 05            [24] 2643 	mov	@r0,ar5
      000C2A 08               [12] 2644 	inc	r0
      000C2B A6 02            [24] 2645 	mov	@r0,ar2
      000C2D E5*00            [12] 2646 	mov	a,_bp
      000C2F 24 07            [12] 2647 	add	a,#0x07
      000C31 F8               [12] 2648 	mov	r0,a
      000C32 E5*00            [12] 2649 	mov	a,_bp
      000C34 24 1D            [12] 2650 	add	a,#0x1d
      000C36 F9               [12] 2651 	mov	r1,a
      000C37 E7               [12] 2652 	mov	a,@r1
      000C38 56               [12] 2653 	anl	a,@r0
      000C39 F6               [12] 2654 	mov	@r0,a
      000C3A 09               [12] 2655 	inc	r1
      000C3B E7               [12] 2656 	mov	a,@r1
      000C3C 08               [12] 2657 	inc	r0
      000C3D 56               [12] 2658 	anl	a,@r0
      000C3E F6               [12] 2659 	mov	@r0,a
      000C3F 09               [12] 2660 	inc	r1
      000C40 E7               [12] 2661 	mov	a,@r1
      000C41 08               [12] 2662 	inc	r0
      000C42 56               [12] 2663 	anl	a,@r0
      000C43 F6               [12] 2664 	mov	@r0,a
      000C44 09               [12] 2665 	inc	r1
      000C45 E7               [12] 2666 	mov	a,@r1
      000C46 08               [12] 2667 	inc	r0
      000C47 56               [12] 2668 	anl	a,@r0
      000C48 F6               [12] 2669 	mov	@r0,a
      000C49 E5*00            [12] 2670 	mov	a,_bp
      000C4B 24 07            [12] 2671 	add	a,#0x07
      000C4D F8               [12] 2672 	mov	r0,a
      000C4E E6               [12] 2673 	mov	a,@r0
      000C4F 08               [12] 2674 	inc	r0
      000C50 46               [12] 2675 	orl	a,@r0
      000C51 08               [12] 2676 	inc	r0
      000C52 46               [12] 2677 	orl	a,@r0
      000C53 08               [12] 2678 	inc	r0
      000C54 46               [12] 2679 	orl	a,@r0
      000C55 60 06            [24] 2680 	jz	00502$
      000C57 7B 31            [12] 2681 	mov	r3,#0x31
      000C59 7C 00            [12] 2682 	mov	r4,#0x00
      000C5B 80 04            [24] 2683 	sjmp	00503$
      000C5D                       2684 00502$:
      000C5D 7B 30            [12] 2685 	mov	r3,#0x30
      000C5F 7C 00            [12] 2686 	mov	r4,#0x00
      000C61                       2687 00503$:
      000C61 8B 82            [24] 2688 	mov	dpl,r3
      000C63 8C 83            [24] 2689 	mov	dph,r4
      000C65 12r00r00         [24] 2690 	lcall	_putchar
                                   2691 ;	calc.c:57: for (mask = 0x80000000lu; mask; mask >>= 1)
      000C68 E5*00            [12] 2692 	mov	a,_bp
      000C6A 24 1D            [12] 2693 	add	a,#0x1d
      000C6C F8               [12] 2694 	mov	r0,a
      000C6D 08               [12] 2695 	inc	r0
      000C6E 08               [12] 2696 	inc	r0
      000C6F 08               [12] 2697 	inc	r0
      000C70 E6               [12] 2698 	mov	a,@r0
      000C71 C3               [12] 2699 	clr	c
      000C72 13               [12] 2700 	rrc	a
      000C73 F6               [12] 2701 	mov	@r0,a
      000C74 18               [12] 2702 	dec	r0
      000C75 E6               [12] 2703 	mov	a,@r0
      000C76 13               [12] 2704 	rrc	a
      000C77 F6               [12] 2705 	mov	@r0,a
      000C78 18               [12] 2706 	dec	r0
      000C79 E6               [12] 2707 	mov	a,@r0
      000C7A 13               [12] 2708 	rrc	a
      000C7B F6               [12] 2709 	mov	@r0,a
      000C7C 18               [12] 2710 	dec	r0
      000C7D E6               [12] 2711 	mov	a,@r0
      000C7E 13               [12] 2712 	rrc	a
      000C7F F6               [12] 2713 	mov	@r0,a
      000C80 E5*00            [12] 2714 	mov	a,_bp
      000C82 24 1D            [12] 2715 	add	a,#0x1d
      000C84 F8               [12] 2716 	mov	r0,a
      000C85 E6               [12] 2717 	mov	a,@r0
      000C86 08               [12] 2718 	inc	r0
      000C87 46               [12] 2719 	orl	a,@r0
      000C88 08               [12] 2720 	inc	r0
      000C89 46               [12] 2721 	orl	a,@r0
      000C8A 08               [12] 2722 	inc	r0
      000C8B 46               [12] 2723 	orl	a,@r0
      000C8C 70 8F            [24] 2724 	jnz	00379$
                                   2725 ;	calc.c:154: printstr("\r\n");
      000C8E 7Fr30            [12] 2726 	mov	r7,#___str_5
      000C90 7Es00            [12] 2727 	mov	r6,#(___str_5 >> 8)
      000C92 7D 80            [12] 2728 	mov	r5,#0x80
                                   2729 ;	calc.c:51: return;
      000C94                       2730 00382$:
                                   2731 ;	calc.c:49: for (; *s; s++) putchar(*s);
      000C94 8F 82            [24] 2732 	mov	dpl,r7
      000C96 8E 83            [24] 2733 	mov	dph,r6
      000C98 8D F0            [24] 2734 	mov	b,r5
      000C9A 12r00r00         [24] 2735 	lcall	__gptrget
      000C9D FC               [12] 2736 	mov	r4,a
      000C9E 70 03            [24] 2737 	jnz	01283$
      000CA0 02r2Ar46         [24] 2738 	ljmp	00249$
      000CA3                       2739 01283$:
      000CA3 7B 00            [12] 2740 	mov	r3,#0x00
      000CA5 8C 82            [24] 2741 	mov	dpl,r4
      000CA7 8B 83            [24] 2742 	mov	dph,r3
      000CA9 12r00r00         [24] 2743 	lcall	_putchar
      000CAC 0F               [12] 2744 	inc	r7
                                   2745 ;	calc.c:157: case 'V':
      000CAD BF 00 E4         [24] 2746 	cjne	r7,#0x00,00382$
      000CB0 0E               [12] 2747 	inc	r6
      000CB1 80 E1            [24] 2748 	sjmp	00382$
      000CB3                       2749 00113$:
                                   2750 ;	calc.c:158: printstr("\r\n");
      000CB3 7Fr30            [12] 2751 	mov	r7,#___str_5
      000CB5 7Es00            [12] 2752 	mov	r6,#(___str_5 >> 8)
      000CB7 7D 80            [12] 2753 	mov	r5,#0x80
                                   2754 ;	calc.c:51: return;
      000CB9                       2755 00385$:
                                   2756 ;	calc.c:49: for (; *s; s++) putchar(*s);
      000CB9 8F 82            [24] 2757 	mov	dpl,r7
      000CBB 8E 83            [24] 2758 	mov	dph,r6
      000CBD 8D F0            [24] 2759 	mov	b,r5
      000CBF 12r00r00         [24] 2760 	lcall	__gptrget
      000CC2 FC               [12] 2761 	mov	r4,a
      000CC3 60 10            [24] 2762 	jz	00275$
      000CC5 7B 00            [12] 2763 	mov	r3,#0x00
      000CC7 8C 82            [24] 2764 	mov	dpl,r4
      000CC9 8B 83            [24] 2765 	mov	dph,r3
      000CCB 12r00r00         [24] 2766 	lcall	_putchar
      000CCE 0F               [12] 2767 	inc	r7
                                   2768 ;	calc.c:158: printstr("\r\n");
      000CCF BF 00 E7         [24] 2769 	cjne	r7,#0x00,00385$
      000CD2 0E               [12] 2770 	inc	r6
      000CD3 80 E4            [24] 2771 	sjmp	00385$
      000CD5                       2772 00275$:
                                   2773 ;	calc.c:159: (void)dump_pop(_ctx, delta);
      000CD5 E5*00            [12] 2774 	mov	a,_bp
      000CD7 24 FB            [12] 2775 	add	a,#0xfb
      000CD9 F8               [12] 2776 	mov	r0,a
      000CDA E6               [12] 2777 	mov	a,@r0
      000CDB C0 E0            [24] 2778 	push	acc
      000CDD 08               [12] 2779 	inc	r0
      000CDE E6               [12] 2780 	mov	a,@r0
      000CDF C0 E0            [24] 2781 	push	acc
      000CE1 08               [12] 2782 	inc	r0
      000CE2 E6               [12] 2783 	mov	a,@r0
      000CE3 C0 E0            [24] 2784 	push	acc
      000CE5 A8*00            [24] 2785 	mov	r0,_bp
      000CE7 08               [12] 2786 	inc	r0
      000CE8 86 82            [24] 2787 	mov	dpl,@r0
      000CEA 08               [12] 2788 	inc	r0
      000CEB 86 83            [24] 2789 	mov	dph,@r0
      000CED 08               [12] 2790 	inc	r0
      000CEE 86 F0            [24] 2791 	mov	b,@r0
      000CF0 12r01r93         [24] 2792 	lcall	_dump_pop
      000CF3 15 81            [12] 2793 	dec	sp
      000CF5 15 81            [12] 2794 	dec	sp
      000CF7 15 81            [12] 2795 	dec	sp
                                   2796 ;	calc.c:160: break;
      000CF9 02r2Ar46         [24] 2797 	ljmp	00249$
                                   2798 ;	calc.c:161: case 'x':
      000CFC                       2799 00114$:
                                   2800 ;	calc.c:162: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      000CFC E5*00            [12] 2801 	mov	a,_bp
      000CFE 24 15            [12] 2802 	add	a,#0x15
      000D00 FF               [12] 2803 	mov	r7,a
      000D01 7E 00            [12] 2804 	mov	r6,#0x00
      000D03 7D 40            [12] 2805 	mov	r5,#0x40
      000D05 E5*00            [12] 2806 	mov	a,_bp
      000D07 24 12            [12] 2807 	add	a,#0x12
      000D09 F8               [12] 2808 	mov	r0,a
      000D0A E5*00            [12] 2809 	mov	a,_bp
      000D0C 24 07            [12] 2810 	add	a,#0x07
      000D0E F9               [12] 2811 	mov	r1,a
      000D0F 74 11            [12] 2812 	mov	a,#0x11
      000D11 26               [12] 2813 	add	a,@r0
      000D12 F7               [12] 2814 	mov	@r1,a
      000D13 74 40            [12] 2815 	mov	a,#0x40
      000D15 08               [12] 2816 	inc	r0
      000D16 36               [12] 2817 	addc	a,@r0
      000D17 09               [12] 2818 	inc	r1
      000D18 F7               [12] 2819 	mov	@r1,a
      000D19 08               [12] 2820 	inc	r0
      000D1A 09               [12] 2821 	inc	r1
      000D1B E6               [12] 2822 	mov	a,@r0
      000D1C F7               [12] 2823 	mov	@r1,a
      000D1D E5*00            [12] 2824 	mov	a,_bp
      000D1F 24 07            [12] 2825 	add	a,#0x07
      000D21 F8               [12] 2826 	mov	r0,a
      000D22 86 82            [24] 2827 	mov	dpl,@r0
      000D24 08               [12] 2828 	inc	r0
      000D25 86 83            [24] 2829 	mov	dph,@r0
      000D27 08               [12] 2830 	inc	r0
      000D28 86 F0            [24] 2831 	mov	b,@r0
      000D2A 12r00r00         [24] 2832 	lcall	__gptrget
      000D2D FA               [12] 2833 	mov	r2,a
      000D2E A3               [24] 2834 	inc	dptr
      000D2F 12r00r00         [24] 2835 	lcall	__gptrget
      000D32 FB               [12] 2836 	mov	r3,a
      000D33 A3               [24] 2837 	inc	dptr
      000D34 12r00r00         [24] 2838 	lcall	__gptrget
      000D37 FC               [12] 2839 	mov	r4,a
      000D38 C0 07            [24] 2840 	push	ar7
      000D3A C0 06            [24] 2841 	push	ar6
      000D3C C0 05            [24] 2842 	push	ar5
      000D3E 8A 82            [24] 2843 	mov	dpl,r2
      000D40 8B 83            [24] 2844 	mov	dph,r3
      000D42 8C F0            [24] 2845 	mov	b,r4
      000D44 12r00r00         [24] 2846 	lcall	_stack_pop
      000D47 AB 82            [24] 2847 	mov	r3,dpl
      000D49 AC 83            [24] 2848 	mov	r4,dph
      000D4B 15 81            [12] 2849 	dec	sp
      000D4D 15 81            [12] 2850 	dec	sp
      000D4F 15 81            [12] 2851 	dec	sp
      000D51 EB               [12] 2852 	mov	a,r3
      000D52 4C               [12] 2853 	orl	a,r4
      000D53 70 25            [24] 2854 	jnz	00119$
      000D55 7Fr44            [12] 2855 	mov	r7,#___str_10
      000D57 7Es00            [12] 2856 	mov	r6,#(___str_10 >> 8)
      000D59 7D 80            [12] 2857 	mov	r5,#0x80
                                   2858 ;	calc.c:51: return;
      000D5B                       2859 00388$:
                                   2860 ;	calc.c:49: for (; *s; s++) putchar(*s);
      000D5B 8F 82            [24] 2861 	mov	dpl,r7
      000D5D 8E 83            [24] 2862 	mov	dph,r6
      000D5F 8D F0            [24] 2863 	mov	b,r5
      000D61 12r00r00         [24] 2864 	lcall	__gptrget
      000D64 FC               [12] 2865 	mov	r4,a
      000D65 70 03            [24] 2866 	jnz	01288$
      000D67 02r2Ar46         [24] 2867 	ljmp	00249$
      000D6A                       2868 01288$:
      000D6A 7B 00            [12] 2869 	mov	r3,#0x00
      000D6C 8C 82            [24] 2870 	mov	dpl,r4
      000D6E 8B 83            [24] 2871 	mov	dph,r3
      000D70 12r00r00         [24] 2872 	lcall	_putchar
      000D73 0F               [12] 2873 	inc	r7
                                   2874 ;	calc.c:162: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      000D74 BF 00 E4         [24] 2875 	cjne	r7,#0x00,00388$
      000D77 0E               [12] 2876 	inc	r6
      000D78 80 E1            [24] 2877 	sjmp	00388$
      000D7A                       2878 00119$:
                                   2879 ;	calc.c:163: else if (!stack_pop(ctx->ps, &d1)) {
      000D7A E5*00            [12] 2880 	mov	a,_bp
      000D7C 24 19            [12] 2881 	add	a,#0x19
      000D7E FF               [12] 2882 	mov	r7,a
      000D7F 7E 00            [12] 2883 	mov	r6,#0x00
      000D81 7D 40            [12] 2884 	mov	r5,#0x40
      000D83 E5*00            [12] 2885 	mov	a,_bp
      000D85 24 07            [12] 2886 	add	a,#0x07
      000D87 F8               [12] 2887 	mov	r0,a
      000D88 86 82            [24] 2888 	mov	dpl,@r0
      000D8A 08               [12] 2889 	inc	r0
      000D8B 86 83            [24] 2890 	mov	dph,@r0
      000D8D 08               [12] 2891 	inc	r0
      000D8E 86 F0            [24] 2892 	mov	b,@r0
      000D90 12r00r00         [24] 2893 	lcall	__gptrget
      000D93 FA               [12] 2894 	mov	r2,a
      000D94 A3               [24] 2895 	inc	dptr
      000D95 12r00r00         [24] 2896 	lcall	__gptrget
      000D98 FB               [12] 2897 	mov	r3,a
      000D99 A3               [24] 2898 	inc	dptr
      000D9A 12r00r00         [24] 2899 	lcall	__gptrget
      000D9D FC               [12] 2900 	mov	r4,a
      000D9E C0 07            [24] 2901 	push	ar7
      000DA0 C0 06            [24] 2902 	push	ar6
      000DA2 C0 05            [24] 2903 	push	ar5
      000DA4 8A 82            [24] 2904 	mov	dpl,r2
      000DA6 8B 83            [24] 2905 	mov	dph,r3
      000DA8 8C F0            [24] 2906 	mov	b,r4
      000DAA 12r00r00         [24] 2907 	lcall	_stack_pop
      000DAD AB 82            [24] 2908 	mov	r3,dpl
      000DAF AC 83            [24] 2909 	mov	r4,dph
      000DB1 15 81            [12] 2910 	dec	sp
      000DB3 15 81            [12] 2911 	dec	sp
      000DB5 15 81            [12] 2912 	dec	sp
      000DB7 EB               [12] 2913 	mov	a,r3
      000DB8 4C               [12] 2914 	orl	a,r4
      000DB9 70 63            [24] 2915 	jnz	00116$
                                   2916 ;	calc.c:164: (void)stack_push(ctx->ps, d0);
      000DBB E5*00            [12] 2917 	mov	a,_bp
      000DBD 24 07            [12] 2918 	add	a,#0x07
      000DBF F8               [12] 2919 	mov	r0,a
      000DC0 86 82            [24] 2920 	mov	dpl,@r0
      000DC2 08               [12] 2921 	inc	r0
      000DC3 86 83            [24] 2922 	mov	dph,@r0
      000DC5 08               [12] 2923 	inc	r0
      000DC6 86 F0            [24] 2924 	mov	b,@r0
      000DC8 12r00r00         [24] 2925 	lcall	__gptrget
      000DCB FA               [12] 2926 	mov	r2,a
      000DCC A3               [24] 2927 	inc	dptr
      000DCD 12r00r00         [24] 2928 	lcall	__gptrget
      000DD0 FB               [12] 2929 	mov	r3,a
      000DD1 A3               [24] 2930 	inc	dptr
      000DD2 12r00r00         [24] 2931 	lcall	__gptrget
      000DD5 FC               [12] 2932 	mov	r4,a
      000DD6 E5*00            [12] 2933 	mov	a,_bp
      000DD8 24 15            [12] 2934 	add	a,#0x15
      000DDA F8               [12] 2935 	mov	r0,a
      000DDB E6               [12] 2936 	mov	a,@r0
      000DDC C0 E0            [24] 2937 	push	acc
      000DDE 08               [12] 2938 	inc	r0
      000DDF E6               [12] 2939 	mov	a,@r0
      000DE0 C0 E0            [24] 2940 	push	acc
      000DE2 08               [12] 2941 	inc	r0
      000DE3 E6               [12] 2942 	mov	a,@r0
      000DE4 C0 E0            [24] 2943 	push	acc
      000DE6 08               [12] 2944 	inc	r0
      000DE7 E6               [12] 2945 	mov	a,@r0
      000DE8 C0 E0            [24] 2946 	push	acc
      000DEA 8A 82            [24] 2947 	mov	dpl,r2
      000DEC 8B 83            [24] 2948 	mov	dph,r3
      000DEE 8C F0            [24] 2949 	mov	b,r4
      000DF0 12r00r00         [24] 2950 	lcall	_stack_push
      000DF3 E5 81            [12] 2951 	mov	a,sp
      000DF5 24 FC            [12] 2952 	add	a,#0xfc
      000DF7 F5 81            [12] 2953 	mov	sp,a
                                   2954 ;	calc.c:165: printstr("\r\nstack underflow\r\n");
      000DF9 7Fr44            [12] 2955 	mov	r7,#___str_10
      000DFB 7Es00            [12] 2956 	mov	r6,#(___str_10 >> 8)
      000DFD 7D 80            [12] 2957 	mov	r5,#0x80
                                   2958 ;	calc.c:51: return;
      000DFF                       2959 00391$:
                                   2960 ;	calc.c:49: for (; *s; s++) putchar(*s);
      000DFF 8F 82            [24] 2961 	mov	dpl,r7
      000E01 8E 83            [24] 2962 	mov	dph,r6
      000E03 8D F0            [24] 2963 	mov	b,r5
      000E05 12r00r00         [24] 2964 	lcall	__gptrget
      000E08 FC               [12] 2965 	mov	r4,a
      000E09 70 03            [24] 2966 	jnz	01291$
      000E0B 02r2Ar46         [24] 2967 	ljmp	00249$
      000E0E                       2968 01291$:
      000E0E 7B 00            [12] 2969 	mov	r3,#0x00
      000E10 8C 82            [24] 2970 	mov	dpl,r4
      000E12 8B 83            [24] 2971 	mov	dph,r3
      000E14 12r00r00         [24] 2972 	lcall	_putchar
      000E17 0F               [12] 2973 	inc	r7
                                   2974 ;	calc.c:165: printstr("\r\nstack underflow\r\n");
      000E18 BF 00 E4         [24] 2975 	cjne	r7,#0x00,00391$
      000E1B 0E               [12] 2976 	inc	r6
      000E1C 80 E1            [24] 2977 	sjmp	00391$
      000E1E                       2978 00116$:
                                   2979 ;	calc.c:167: (void)stack_push(ctx->ps, d0);
      000E1E E5*00            [12] 2980 	mov	a,_bp
      000E20 24 07            [12] 2981 	add	a,#0x07
      000E22 F8               [12] 2982 	mov	r0,a
      000E23 86 82            [24] 2983 	mov	dpl,@r0
      000E25 08               [12] 2984 	inc	r0
      000E26 86 83            [24] 2985 	mov	dph,@r0
      000E28 08               [12] 2986 	inc	r0
      000E29 86 F0            [24] 2987 	mov	b,@r0
      000E2B 12r00r00         [24] 2988 	lcall	__gptrget
      000E2E FA               [12] 2989 	mov	r2,a
      000E2F A3               [24] 2990 	inc	dptr
      000E30 12r00r00         [24] 2991 	lcall	__gptrget
      000E33 FB               [12] 2992 	mov	r3,a
      000E34 A3               [24] 2993 	inc	dptr
      000E35 12r00r00         [24] 2994 	lcall	__gptrget
      000E38 FC               [12] 2995 	mov	r4,a
      000E39 E5*00            [12] 2996 	mov	a,_bp
      000E3B 24 15            [12] 2997 	add	a,#0x15
      000E3D F8               [12] 2998 	mov	r0,a
      000E3E E6               [12] 2999 	mov	a,@r0
      000E3F C0 E0            [24] 3000 	push	acc
      000E41 08               [12] 3001 	inc	r0
      000E42 E6               [12] 3002 	mov	a,@r0
      000E43 C0 E0            [24] 3003 	push	acc
      000E45 08               [12] 3004 	inc	r0
      000E46 E6               [12] 3005 	mov	a,@r0
      000E47 C0 E0            [24] 3006 	push	acc
      000E49 08               [12] 3007 	inc	r0
      000E4A E6               [12] 3008 	mov	a,@r0
      000E4B C0 E0            [24] 3009 	push	acc
      000E4D 8A 82            [24] 3010 	mov	dpl,r2
      000E4F 8B 83            [24] 3011 	mov	dph,r3
      000E51 8C F0            [24] 3012 	mov	b,r4
      000E53 12r00r00         [24] 3013 	lcall	_stack_push
      000E56 E5 81            [12] 3014 	mov	a,sp
      000E58 24 FC            [12] 3015 	add	a,#0xfc
      000E5A F5 81            [12] 3016 	mov	sp,a
                                   3017 ;	calc.c:168: (void)stack_push(ctx->ps, d1);
      000E5C E5*00            [12] 3018 	mov	a,_bp
      000E5E 24 07            [12] 3019 	add	a,#0x07
      000E60 F8               [12] 3020 	mov	r0,a
      000E61 86 82            [24] 3021 	mov	dpl,@r0
      000E63 08               [12] 3022 	inc	r0
      000E64 86 83            [24] 3023 	mov	dph,@r0
      000E66 08               [12] 3024 	inc	r0
      000E67 86 F0            [24] 3025 	mov	b,@r0
      000E69 12r00r00         [24] 3026 	lcall	__gptrget
      000E6C FA               [12] 3027 	mov	r2,a
      000E6D A3               [24] 3028 	inc	dptr
      000E6E 12r00r00         [24] 3029 	lcall	__gptrget
      000E71 FB               [12] 3030 	mov	r3,a
      000E72 A3               [24] 3031 	inc	dptr
      000E73 12r00r00         [24] 3032 	lcall	__gptrget
      000E76 FC               [12] 3033 	mov	r4,a
      000E77 E5*00            [12] 3034 	mov	a,_bp
      000E79 24 19            [12] 3035 	add	a,#0x19
      000E7B F8               [12] 3036 	mov	r0,a
      000E7C E6               [12] 3037 	mov	a,@r0
      000E7D C0 E0            [24] 3038 	push	acc
      000E7F 08               [12] 3039 	inc	r0
      000E80 E6               [12] 3040 	mov	a,@r0
      000E81 C0 E0            [24] 3041 	push	acc
      000E83 08               [12] 3042 	inc	r0
      000E84 E6               [12] 3043 	mov	a,@r0
      000E85 C0 E0            [24] 3044 	push	acc
      000E87 08               [12] 3045 	inc	r0
      000E88 E6               [12] 3046 	mov	a,@r0
      000E89 C0 E0            [24] 3047 	push	acc
      000E8B 8A 82            [24] 3048 	mov	dpl,r2
      000E8D 8B 83            [24] 3049 	mov	dph,r3
      000E8F 8C F0            [24] 3050 	mov	b,r4
      000E91 12r00r00         [24] 3051 	lcall	_stack_push
      000E94 E5 81            [12] 3052 	mov	a,sp
      000E96 24 FC            [12] 3053 	add	a,#0xfc
      000E98 F5 81            [12] 3054 	mov	sp,a
                                   3055 ;	calc.c:170: break;
      000E9A 02r2Ar46         [24] 3056 	ljmp	00249$
                                   3057 ;	calc.c:171: case 'm':
      000E9D                       3058 00121$:
                                   3059 ;	calc.c:172: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      000E9D E5*00            [12] 3060 	mov	a,_bp
      000E9F 24 15            [12] 3061 	add	a,#0x15
      000EA1 FF               [12] 3062 	mov	r7,a
      000EA2 7E 00            [12] 3063 	mov	r6,#0x00
      000EA4 7D 40            [12] 3064 	mov	r5,#0x40
      000EA6 E5*00            [12] 3065 	mov	a,_bp
      000EA8 24 12            [12] 3066 	add	a,#0x12
      000EAA F8               [12] 3067 	mov	r0,a
      000EAB E5*00            [12] 3068 	mov	a,_bp
      000EAD 24 07            [12] 3069 	add	a,#0x07
      000EAF F9               [12] 3070 	mov	r1,a
      000EB0 74 11            [12] 3071 	mov	a,#0x11
      000EB2 26               [12] 3072 	add	a,@r0
      000EB3 F7               [12] 3073 	mov	@r1,a
      000EB4 74 40            [12] 3074 	mov	a,#0x40
      000EB6 08               [12] 3075 	inc	r0
      000EB7 36               [12] 3076 	addc	a,@r0
      000EB8 09               [12] 3077 	inc	r1
      000EB9 F7               [12] 3078 	mov	@r1,a
      000EBA 08               [12] 3079 	inc	r0
      000EBB 09               [12] 3080 	inc	r1
      000EBC E6               [12] 3081 	mov	a,@r0
      000EBD F7               [12] 3082 	mov	@r1,a
      000EBE E5*00            [12] 3083 	mov	a,_bp
      000EC0 24 07            [12] 3084 	add	a,#0x07
      000EC2 F8               [12] 3085 	mov	r0,a
      000EC3 86 82            [24] 3086 	mov	dpl,@r0
      000EC5 08               [12] 3087 	inc	r0
      000EC6 86 83            [24] 3088 	mov	dph,@r0
      000EC8 08               [12] 3089 	inc	r0
      000EC9 86 F0            [24] 3090 	mov	b,@r0
      000ECB 12r00r00         [24] 3091 	lcall	__gptrget
      000ECE FA               [12] 3092 	mov	r2,a
      000ECF A3               [24] 3093 	inc	dptr
      000ED0 12r00r00         [24] 3094 	lcall	__gptrget
      000ED3 FB               [12] 3095 	mov	r3,a
      000ED4 A3               [24] 3096 	inc	dptr
      000ED5 12r00r00         [24] 3097 	lcall	__gptrget
      000ED8 FC               [12] 3098 	mov	r4,a
      000ED9 C0 07            [24] 3099 	push	ar7
      000EDB C0 06            [24] 3100 	push	ar6
      000EDD C0 05            [24] 3101 	push	ar5
      000EDF 8A 82            [24] 3102 	mov	dpl,r2
      000EE1 8B 83            [24] 3103 	mov	dph,r3
      000EE3 8C F0            [24] 3104 	mov	b,r4
      000EE5 12r00r00         [24] 3105 	lcall	_stack_pop
      000EE8 AB 82            [24] 3106 	mov	r3,dpl
      000EEA AC 83            [24] 3107 	mov	r4,dph
      000EEC 15 81            [12] 3108 	dec	sp
      000EEE 15 81            [12] 3109 	dec	sp
      000EF0 15 81            [12] 3110 	dec	sp
      000EF2 EB               [12] 3111 	mov	a,r3
      000EF3 4C               [12] 3112 	orl	a,r4
      000EF4 70 25            [24] 3113 	jnz	00125$
      000EF6 7Fr44            [12] 3114 	mov	r7,#___str_10
      000EF8 7Es00            [12] 3115 	mov	r6,#(___str_10 >> 8)
      000EFA 7D 80            [12] 3116 	mov	r5,#0x80
                                   3117 ;	calc.c:51: return;
      000EFC                       3118 00394$:
                                   3119 ;	calc.c:49: for (; *s; s++) putchar(*s);
      000EFC 8F 82            [24] 3120 	mov	dpl,r7
      000EFE 8E 83            [24] 3121 	mov	dph,r6
      000F00 8D F0            [24] 3122 	mov	b,r5
      000F02 12r00r00         [24] 3123 	lcall	__gptrget
      000F05 FC               [12] 3124 	mov	r4,a
      000F06 70 03            [24] 3125 	jnz	01294$
      000F08 02r2Ar46         [24] 3126 	ljmp	00249$
      000F0B                       3127 01294$:
      000F0B 7B 00            [12] 3128 	mov	r3,#0x00
      000F0D 8C 82            [24] 3129 	mov	dpl,r4
      000F0F 8B 83            [24] 3130 	mov	dph,r3
      000F11 12r00r00         [24] 3131 	lcall	_putchar
      000F14 0F               [12] 3132 	inc	r7
                                   3133 ;	calc.c:172: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      000F15 BF 00 E4         [24] 3134 	cjne	r7,#0x00,00394$
      000F18 0E               [12] 3135 	inc	r6
      000F19 80 E1            [24] 3136 	sjmp	00394$
      000F1B                       3137 00125$:
                                   3138 ;	calc.c:174: if (!stack_push(ctx->ss, d0)) {
      000F1B E5*00            [12] 3139 	mov	a,_bp
      000F1D 24 12            [12] 3140 	add	a,#0x12
      000F1F F8               [12] 3141 	mov	r0,a
      000F20 74 14            [12] 3142 	mov	a,#0x14
      000F22 26               [12] 3143 	add	a,@r0
      000F23 FA               [12] 3144 	mov	r2,a
      000F24 74 40            [12] 3145 	mov	a,#0x40
      000F26 08               [12] 3146 	inc	r0
      000F27 36               [12] 3147 	addc	a,@r0
      000F28 FB               [12] 3148 	mov	r3,a
      000F29 08               [12] 3149 	inc	r0
      000F2A 86 04            [24] 3150 	mov	ar4,@r0
      000F2C 8A 82            [24] 3151 	mov	dpl,r2
      000F2E 8B 83            [24] 3152 	mov	dph,r3
      000F30 8C F0            [24] 3153 	mov	b,r4
      000F32 12r00r00         [24] 3154 	lcall	__gptrget
      000F35 FA               [12] 3155 	mov	r2,a
      000F36 A3               [24] 3156 	inc	dptr
      000F37 12r00r00         [24] 3157 	lcall	__gptrget
      000F3A FB               [12] 3158 	mov	r3,a
      000F3B A3               [24] 3159 	inc	dptr
      000F3C 12r00r00         [24] 3160 	lcall	__gptrget
      000F3F FC               [12] 3161 	mov	r4,a
      000F40 E5*00            [12] 3162 	mov	a,_bp
      000F42 24 15            [12] 3163 	add	a,#0x15
      000F44 F8               [12] 3164 	mov	r0,a
      000F45 E6               [12] 3165 	mov	a,@r0
      000F46 C0 E0            [24] 3166 	push	acc
      000F48 08               [12] 3167 	inc	r0
      000F49 E6               [12] 3168 	mov	a,@r0
      000F4A C0 E0            [24] 3169 	push	acc
      000F4C 08               [12] 3170 	inc	r0
      000F4D E6               [12] 3171 	mov	a,@r0
      000F4E C0 E0            [24] 3172 	push	acc
      000F50 08               [12] 3173 	inc	r0
      000F51 E6               [12] 3174 	mov	a,@r0
      000F52 C0 E0            [24] 3175 	push	acc
      000F54 8A 82            [24] 3176 	mov	dpl,r2
      000F56 8B 83            [24] 3177 	mov	dph,r3
      000F58 8C F0            [24] 3178 	mov	b,r4
      000F5A 12r00r00         [24] 3179 	lcall	_stack_push
      000F5D AB 82            [24] 3180 	mov	r3,dpl
      000F5F AC 83            [24] 3181 	mov	r4,dph
      000F61 E5 81            [12] 3182 	mov	a,sp
      000F63 24 FC            [12] 3183 	add	a,#0xfc
      000F65 F5 81            [12] 3184 	mov	sp,a
      000F67 EB               [12] 3185 	mov	a,r3
      000F68 4C               [12] 3186 	orl	a,r4
      000F69 60 03            [24] 3187 	jz	01296$
      000F6B 02r2Ar46         [24] 3188 	ljmp	00249$
      000F6E                       3189 01296$:
                                   3190 ;	calc.c:175: printstr("\r\nsecondary stack overflow\r\n");
      000F6E 7Fr58            [12] 3191 	mov	r7,#___str_11
      000F70 7Es00            [12] 3192 	mov	r6,#(___str_11 >> 8)
      000F72 7D 80            [12] 3193 	mov	r5,#0x80
                                   3194 ;	calc.c:51: return;
      000F74                       3195 00397$:
                                   3196 ;	calc.c:49: for (; *s; s++) putchar(*s);
      000F74 8F 82            [24] 3197 	mov	dpl,r7
      000F76 8E 83            [24] 3198 	mov	dph,r6
      000F78 8D F0            [24] 3199 	mov	b,r5
      000F7A 12r00r00         [24] 3200 	lcall	__gptrget
      000F7D FC               [12] 3201 	mov	r4,a
      000F7E 60 10            [24] 3202 	jz	00283$
      000F80 7B 00            [12] 3203 	mov	r3,#0x00
      000F82 8C 82            [24] 3204 	mov	dpl,r4
      000F84 8B 83            [24] 3205 	mov	dph,r3
      000F86 12r00r00         [24] 3206 	lcall	_putchar
      000F89 0F               [12] 3207 	inc	r7
                                   3208 ;	calc.c:175: printstr("\r\nsecondary stack overflow\r\n");
      000F8A BF 00 E7         [24] 3209 	cjne	r7,#0x00,00397$
      000F8D 0E               [12] 3210 	inc	r6
      000F8E 80 E4            [24] 3211 	sjmp	00397$
      000F90                       3212 00283$:
                                   3213 ;	calc.c:176: (void)stack_push(ctx->ps, d0);
      000F90 E5*00            [12] 3214 	mov	a,_bp
      000F92 24 07            [12] 3215 	add	a,#0x07
      000F94 F8               [12] 3216 	mov	r0,a
      000F95 86 82            [24] 3217 	mov	dpl,@r0
      000F97 08               [12] 3218 	inc	r0
      000F98 86 83            [24] 3219 	mov	dph,@r0
      000F9A 08               [12] 3220 	inc	r0
      000F9B 86 F0            [24] 3221 	mov	b,@r0
      000F9D 12r00r00         [24] 3222 	lcall	__gptrget
      000FA0 FA               [12] 3223 	mov	r2,a
      000FA1 A3               [24] 3224 	inc	dptr
      000FA2 12r00r00         [24] 3225 	lcall	__gptrget
      000FA5 FB               [12] 3226 	mov	r3,a
      000FA6 A3               [24] 3227 	inc	dptr
      000FA7 12r00r00         [24] 3228 	lcall	__gptrget
      000FAA FC               [12] 3229 	mov	r4,a
      000FAB E5*00            [12] 3230 	mov	a,_bp
      000FAD 24 15            [12] 3231 	add	a,#0x15
      000FAF F8               [12] 3232 	mov	r0,a
      000FB0 E6               [12] 3233 	mov	a,@r0
      000FB1 C0 E0            [24] 3234 	push	acc
      000FB3 08               [12] 3235 	inc	r0
      000FB4 E6               [12] 3236 	mov	a,@r0
      000FB5 C0 E0            [24] 3237 	push	acc
      000FB7 08               [12] 3238 	inc	r0
      000FB8 E6               [12] 3239 	mov	a,@r0
      000FB9 C0 E0            [24] 3240 	push	acc
      000FBB 08               [12] 3241 	inc	r0
      000FBC E6               [12] 3242 	mov	a,@r0
      000FBD C0 E0            [24] 3243 	push	acc
      000FBF 8A 82            [24] 3244 	mov	dpl,r2
      000FC1 8B 83            [24] 3245 	mov	dph,r3
      000FC3 8C F0            [24] 3246 	mov	b,r4
      000FC5 12r00r00         [24] 3247 	lcall	_stack_push
      000FC8 E5 81            [12] 3248 	mov	a,sp
      000FCA 24 FC            [12] 3249 	add	a,#0xfc
      000FCC F5 81            [12] 3250 	mov	sp,a
                                   3251 ;	calc.c:179: break;
      000FCE 02r2Ar46         [24] 3252 	ljmp	00249$
                                   3253 ;	calc.c:180: case 'M':
      000FD1                       3254 00127$:
                                   3255 ;	calc.c:181: if (!stack_pop(ctx->ss, &d0)) printstr("\r\nsecondary stack underflow\r\n");
      000FD1 E5*00            [12] 3256 	mov	a,_bp
      000FD3 24 15            [12] 3257 	add	a,#0x15
      000FD5 FF               [12] 3258 	mov	r7,a
      000FD6 7E 00            [12] 3259 	mov	r6,#0x00
      000FD8 7D 40            [12] 3260 	mov	r5,#0x40
      000FDA E5*00            [12] 3261 	mov	a,_bp
      000FDC 24 12            [12] 3262 	add	a,#0x12
      000FDE F8               [12] 3263 	mov	r0,a
      000FDF E5*00            [12] 3264 	mov	a,_bp
      000FE1 24 07            [12] 3265 	add	a,#0x07
      000FE3 F9               [12] 3266 	mov	r1,a
      000FE4 74 14            [12] 3267 	mov	a,#0x14
      000FE6 26               [12] 3268 	add	a,@r0
      000FE7 F7               [12] 3269 	mov	@r1,a
      000FE8 74 40            [12] 3270 	mov	a,#0x40
      000FEA 08               [12] 3271 	inc	r0
      000FEB 36               [12] 3272 	addc	a,@r0
      000FEC 09               [12] 3273 	inc	r1
      000FED F7               [12] 3274 	mov	@r1,a
      000FEE 08               [12] 3275 	inc	r0
      000FEF 09               [12] 3276 	inc	r1
      000FF0 E6               [12] 3277 	mov	a,@r0
      000FF1 F7               [12] 3278 	mov	@r1,a
      000FF2 E5*00            [12] 3279 	mov	a,_bp
      000FF4 24 07            [12] 3280 	add	a,#0x07
      000FF6 F8               [12] 3281 	mov	r0,a
      000FF7 86 82            [24] 3282 	mov	dpl,@r0
      000FF9 08               [12] 3283 	inc	r0
      000FFA 86 83            [24] 3284 	mov	dph,@r0
      000FFC 08               [12] 3285 	inc	r0
      000FFD 86 F0            [24] 3286 	mov	b,@r0
      000FFF 12r00r00         [24] 3287 	lcall	__gptrget
      001002 FA               [12] 3288 	mov	r2,a
      001003 A3               [24] 3289 	inc	dptr
      001004 12r00r00         [24] 3290 	lcall	__gptrget
      001007 FB               [12] 3291 	mov	r3,a
      001008 A3               [24] 3292 	inc	dptr
      001009 12r00r00         [24] 3293 	lcall	__gptrget
      00100C FC               [12] 3294 	mov	r4,a
      00100D C0 07            [24] 3295 	push	ar7
      00100F C0 06            [24] 3296 	push	ar6
      001011 C0 05            [24] 3297 	push	ar5
      001013 8A 82            [24] 3298 	mov	dpl,r2
      001015 8B 83            [24] 3299 	mov	dph,r3
      001017 8C F0            [24] 3300 	mov	b,r4
      001019 12r00r00         [24] 3301 	lcall	_stack_pop
      00101C AB 82            [24] 3302 	mov	r3,dpl
      00101E AC 83            [24] 3303 	mov	r4,dph
      001020 15 81            [12] 3304 	dec	sp
      001022 15 81            [12] 3305 	dec	sp
      001024 15 81            [12] 3306 	dec	sp
      001026 EB               [12] 3307 	mov	a,r3
      001027 4C               [12] 3308 	orl	a,r4
      001028 70 25            [24] 3309 	jnz	00131$
      00102A 7Fr75            [12] 3310 	mov	r7,#___str_12
      00102C 7Es00            [12] 3311 	mov	r6,#(___str_12 >> 8)
      00102E 7D 80            [12] 3312 	mov	r5,#0x80
                                   3313 ;	calc.c:51: return;
      001030                       3314 00400$:
                                   3315 ;	calc.c:49: for (; *s; s++) putchar(*s);
      001030 8F 82            [24] 3316 	mov	dpl,r7
      001032 8E 83            [24] 3317 	mov	dph,r6
      001034 8D F0            [24] 3318 	mov	b,r5
      001036 12r00r00         [24] 3319 	lcall	__gptrget
      001039 FC               [12] 3320 	mov	r4,a
      00103A 70 03            [24] 3321 	jnz	01300$
      00103C 02r2Ar46         [24] 3322 	ljmp	00249$
      00103F                       3323 01300$:
      00103F 7B 00            [12] 3324 	mov	r3,#0x00
      001041 8C 82            [24] 3325 	mov	dpl,r4
      001043 8B 83            [24] 3326 	mov	dph,r3
      001045 12r00r00         [24] 3327 	lcall	_putchar
      001048 0F               [12] 3328 	inc	r7
                                   3329 ;	calc.c:181: if (!stack_pop(ctx->ss, &d0)) printstr("\r\nsecondary stack underflow\r\n");
      001049 BF 00 E4         [24] 3330 	cjne	r7,#0x00,00400$
      00104C 0E               [12] 3331 	inc	r6
      00104D 80 E1            [24] 3332 	sjmp	00400$
      00104F                       3333 00131$:
                                   3334 ;	calc.c:183: if (!stack_push(ctx->ps, d0)) {
      00104F E5*00            [12] 3335 	mov	a,_bp
      001051 24 12            [12] 3336 	add	a,#0x12
      001053 F8               [12] 3337 	mov	r0,a
      001054 74 11            [12] 3338 	mov	a,#0x11
      001056 26               [12] 3339 	add	a,@r0
      001057 FA               [12] 3340 	mov	r2,a
      001058 74 40            [12] 3341 	mov	a,#0x40
      00105A 08               [12] 3342 	inc	r0
      00105B 36               [12] 3343 	addc	a,@r0
      00105C FB               [12] 3344 	mov	r3,a
      00105D 08               [12] 3345 	inc	r0
      00105E 86 04            [24] 3346 	mov	ar4,@r0
      001060 8A 82            [24] 3347 	mov	dpl,r2
      001062 8B 83            [24] 3348 	mov	dph,r3
      001064 8C F0            [24] 3349 	mov	b,r4
      001066 12r00r00         [24] 3350 	lcall	__gptrget
      001069 FA               [12] 3351 	mov	r2,a
      00106A A3               [24] 3352 	inc	dptr
      00106B 12r00r00         [24] 3353 	lcall	__gptrget
      00106E FB               [12] 3354 	mov	r3,a
      00106F A3               [24] 3355 	inc	dptr
      001070 12r00r00         [24] 3356 	lcall	__gptrget
      001073 FC               [12] 3357 	mov	r4,a
      001074 E5*00            [12] 3358 	mov	a,_bp
      001076 24 15            [12] 3359 	add	a,#0x15
      001078 F8               [12] 3360 	mov	r0,a
      001079 E6               [12] 3361 	mov	a,@r0
      00107A C0 E0            [24] 3362 	push	acc
      00107C 08               [12] 3363 	inc	r0
      00107D E6               [12] 3364 	mov	a,@r0
      00107E C0 E0            [24] 3365 	push	acc
      001080 08               [12] 3366 	inc	r0
      001081 E6               [12] 3367 	mov	a,@r0
      001082 C0 E0            [24] 3368 	push	acc
      001084 08               [12] 3369 	inc	r0
      001085 E6               [12] 3370 	mov	a,@r0
      001086 C0 E0            [24] 3371 	push	acc
      001088 8A 82            [24] 3372 	mov	dpl,r2
      00108A 8B 83            [24] 3373 	mov	dph,r3
      00108C 8C F0            [24] 3374 	mov	b,r4
      00108E 12r00r00         [24] 3375 	lcall	_stack_push
      001091 AB 82            [24] 3376 	mov	r3,dpl
      001093 AC 83            [24] 3377 	mov	r4,dph
      001095 E5 81            [12] 3378 	mov	a,sp
      001097 24 FC            [12] 3379 	add	a,#0xfc
      001099 F5 81            [12] 3380 	mov	sp,a
      00109B EB               [12] 3381 	mov	a,r3
      00109C 4C               [12] 3382 	orl	a,r4
      00109D 60 03            [24] 3383 	jz	01302$
      00109F 02r2Ar46         [24] 3384 	ljmp	00249$
      0010A2                       3385 01302$:
                                   3386 ;	calc.c:184: printstr("\r\nstack overflow\r\n");
      0010A2 7Fr93            [12] 3387 	mov	r7,#___str_13
      0010A4 7Es00            [12] 3388 	mov	r6,#(___str_13 >> 8)
      0010A6 7D 80            [12] 3389 	mov	r5,#0x80
                                   3390 ;	calc.c:51: return;
      0010A8                       3391 00403$:
                                   3392 ;	calc.c:49: for (; *s; s++) putchar(*s);
      0010A8 8F 82            [24] 3393 	mov	dpl,r7
      0010AA 8E 83            [24] 3394 	mov	dph,r6
      0010AC 8D F0            [24] 3395 	mov	b,r5
      0010AE 12r00r00         [24] 3396 	lcall	__gptrget
      0010B1 FC               [12] 3397 	mov	r4,a
      0010B2 60 10            [24] 3398 	jz	00287$
      0010B4 7B 00            [12] 3399 	mov	r3,#0x00
      0010B6 8C 82            [24] 3400 	mov	dpl,r4
      0010B8 8B 83            [24] 3401 	mov	dph,r3
      0010BA 12r00r00         [24] 3402 	lcall	_putchar
      0010BD 0F               [12] 3403 	inc	r7
                                   3404 ;	calc.c:184: printstr("\r\nstack overflow\r\n");
      0010BE BF 00 E7         [24] 3405 	cjne	r7,#0x00,00403$
      0010C1 0E               [12] 3406 	inc	r6
      0010C2 80 E4            [24] 3407 	sjmp	00403$
      0010C4                       3408 00287$:
                                   3409 ;	calc.c:185: (void)stack_push(ctx->ss, d0);
      0010C4 E5*00            [12] 3410 	mov	a,_bp
      0010C6 24 07            [12] 3411 	add	a,#0x07
      0010C8 F8               [12] 3412 	mov	r0,a
      0010C9 86 82            [24] 3413 	mov	dpl,@r0
      0010CB 08               [12] 3414 	inc	r0
      0010CC 86 83            [24] 3415 	mov	dph,@r0
      0010CE 08               [12] 3416 	inc	r0
      0010CF 86 F0            [24] 3417 	mov	b,@r0
      0010D1 12r00r00         [24] 3418 	lcall	__gptrget
      0010D4 FA               [12] 3419 	mov	r2,a
      0010D5 A3               [24] 3420 	inc	dptr
      0010D6 12r00r00         [24] 3421 	lcall	__gptrget
      0010D9 FB               [12] 3422 	mov	r3,a
      0010DA A3               [24] 3423 	inc	dptr
      0010DB 12r00r00         [24] 3424 	lcall	__gptrget
      0010DE FC               [12] 3425 	mov	r4,a
      0010DF E5*00            [12] 3426 	mov	a,_bp
      0010E1 24 15            [12] 3427 	add	a,#0x15
      0010E3 F8               [12] 3428 	mov	r0,a
      0010E4 E6               [12] 3429 	mov	a,@r0
      0010E5 C0 E0            [24] 3430 	push	acc
      0010E7 08               [12] 3431 	inc	r0
      0010E8 E6               [12] 3432 	mov	a,@r0
      0010E9 C0 E0            [24] 3433 	push	acc
      0010EB 08               [12] 3434 	inc	r0
      0010EC E6               [12] 3435 	mov	a,@r0
      0010ED C0 E0            [24] 3436 	push	acc
      0010EF 08               [12] 3437 	inc	r0
      0010F0 E6               [12] 3438 	mov	a,@r0
      0010F1 C0 E0            [24] 3439 	push	acc
      0010F3 8A 82            [24] 3440 	mov	dpl,r2
      0010F5 8B 83            [24] 3441 	mov	dph,r3
      0010F7 8C F0            [24] 3442 	mov	b,r4
      0010F9 12r00r00         [24] 3443 	lcall	_stack_push
      0010FC E5 81            [12] 3444 	mov	a,sp
      0010FE 24 FC            [12] 3445 	add	a,#0xfc
      001100 F5 81            [12] 3446 	mov	sp,a
                                   3447 ;	calc.c:188: break;
      001102 02r2Ar46         [24] 3448 	ljmp	00249$
                                   3449 ;	calc.c:189: case 'u':
      001105                       3450 00133$:
                                   3451 ;	calc.c:190: if (!stack_peek(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      001105 E5*00            [12] 3452 	mov	a,_bp
      001107 24 15            [12] 3453 	add	a,#0x15
      001109 FF               [12] 3454 	mov	r7,a
      00110A 7E 00            [12] 3455 	mov	r6,#0x00
      00110C 7D 40            [12] 3456 	mov	r5,#0x40
      00110E E5*00            [12] 3457 	mov	a,_bp
      001110 24 12            [12] 3458 	add	a,#0x12
      001112 F8               [12] 3459 	mov	r0,a
      001113 74 11            [12] 3460 	mov	a,#0x11
      001115 26               [12] 3461 	add	a,@r0
      001116 FA               [12] 3462 	mov	r2,a
      001117 ED               [12] 3463 	mov	a,r5
      001118 08               [12] 3464 	inc	r0
      001119 36               [12] 3465 	addc	a,@r0
      00111A FB               [12] 3466 	mov	r3,a
      00111B 08               [12] 3467 	inc	r0
      00111C 86 04            [24] 3468 	mov	ar4,@r0
      00111E 8A 82            [24] 3469 	mov	dpl,r2
      001120 8B 83            [24] 3470 	mov	dph,r3
      001122 8C F0            [24] 3471 	mov	b,r4
      001124 12r00r00         [24] 3472 	lcall	__gptrget
      001127 FA               [12] 3473 	mov	r2,a
      001128 A3               [24] 3474 	inc	dptr
      001129 12r00r00         [24] 3475 	lcall	__gptrget
      00112C FB               [12] 3476 	mov	r3,a
      00112D A3               [24] 3477 	inc	dptr
      00112E 12r00r00         [24] 3478 	lcall	__gptrget
      001131 FC               [12] 3479 	mov	r4,a
      001132 C0 07            [24] 3480 	push	ar7
      001134 C0 06            [24] 3481 	push	ar6
      001136 C0 05            [24] 3482 	push	ar5
      001138 8A 82            [24] 3483 	mov	dpl,r2
      00113A 8B 83            [24] 3484 	mov	dph,r3
      00113C 8C F0            [24] 3485 	mov	b,r4
      00113E 12r00r00         [24] 3486 	lcall	_stack_peek
      001141 AB 82            [24] 3487 	mov	r3,dpl
      001143 AC 83            [24] 3488 	mov	r4,dph
      001145 15 81            [12] 3489 	dec	sp
      001147 15 81            [12] 3490 	dec	sp
      001149 15 81            [12] 3491 	dec	sp
      00114B EB               [12] 3492 	mov	a,r3
      00114C 4C               [12] 3493 	orl	a,r4
      00114D 70 25            [24] 3494 	jnz	00137$
      00114F 7Fr44            [12] 3495 	mov	r7,#___str_10
      001151 7Es00            [12] 3496 	mov	r6,#(___str_10 >> 8)
      001153 7D 80            [12] 3497 	mov	r5,#0x80
                                   3498 ;	calc.c:51: return;
      001155                       3499 00406$:
                                   3500 ;	calc.c:49: for (; *s; s++) putchar(*s);
      001155 8F 82            [24] 3501 	mov	dpl,r7
      001157 8E 83            [24] 3502 	mov	dph,r6
      001159 8D F0            [24] 3503 	mov	b,r5
      00115B 12r00r00         [24] 3504 	lcall	__gptrget
      00115E FC               [12] 3505 	mov	r4,a
      00115F 70 03            [24] 3506 	jnz	01306$
      001161 02r2Ar46         [24] 3507 	ljmp	00249$
      001164                       3508 01306$:
      001164 7B 00            [12] 3509 	mov	r3,#0x00
      001166 8C 82            [24] 3510 	mov	dpl,r4
      001168 8B 83            [24] 3511 	mov	dph,r3
      00116A 12r00r00         [24] 3512 	lcall	_putchar
      00116D 0F               [12] 3513 	inc	r7
                                   3514 ;	calc.c:190: if (!stack_peek(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      00116E BF 00 E4         [24] 3515 	cjne	r7,#0x00,00406$
      001171 0E               [12] 3516 	inc	r6
      001172 80 E1            [24] 3517 	sjmp	00406$
      001174                       3518 00137$:
                                   3519 ;	calc.c:191: else if (!stack_push(ctx->ss, d0)) printstr("\r\nsecondary stack overflow\r\n");
      001174 E5*00            [12] 3520 	mov	a,_bp
      001176 24 12            [12] 3521 	add	a,#0x12
      001178 F8               [12] 3522 	mov	r0,a
      001179 74 14            [12] 3523 	mov	a,#0x14
      00117B 26               [12] 3524 	add	a,@r0
      00117C FA               [12] 3525 	mov	r2,a
      00117D 74 40            [12] 3526 	mov	a,#0x40
      00117F 08               [12] 3527 	inc	r0
      001180 36               [12] 3528 	addc	a,@r0
      001181 FB               [12] 3529 	mov	r3,a
      001182 08               [12] 3530 	inc	r0
      001183 86 04            [24] 3531 	mov	ar4,@r0
      001185 8A 82            [24] 3532 	mov	dpl,r2
      001187 8B 83            [24] 3533 	mov	dph,r3
      001189 8C F0            [24] 3534 	mov	b,r4
      00118B 12r00r00         [24] 3535 	lcall	__gptrget
      00118E FA               [12] 3536 	mov	r2,a
      00118F A3               [24] 3537 	inc	dptr
      001190 12r00r00         [24] 3538 	lcall	__gptrget
      001193 FB               [12] 3539 	mov	r3,a
      001194 A3               [24] 3540 	inc	dptr
      001195 12r00r00         [24] 3541 	lcall	__gptrget
      001198 FC               [12] 3542 	mov	r4,a
      001199 E5*00            [12] 3543 	mov	a,_bp
      00119B 24 15            [12] 3544 	add	a,#0x15
      00119D F8               [12] 3545 	mov	r0,a
      00119E E6               [12] 3546 	mov	a,@r0
      00119F C0 E0            [24] 3547 	push	acc
      0011A1 08               [12] 3548 	inc	r0
      0011A2 E6               [12] 3549 	mov	a,@r0
      0011A3 C0 E0            [24] 3550 	push	acc
      0011A5 08               [12] 3551 	inc	r0
      0011A6 E6               [12] 3552 	mov	a,@r0
      0011A7 C0 E0            [24] 3553 	push	acc
      0011A9 08               [12] 3554 	inc	r0
      0011AA E6               [12] 3555 	mov	a,@r0
      0011AB C0 E0            [24] 3556 	push	acc
      0011AD 8A 82            [24] 3557 	mov	dpl,r2
      0011AF 8B 83            [24] 3558 	mov	dph,r3
      0011B1 8C F0            [24] 3559 	mov	b,r4
      0011B3 12r00r00         [24] 3560 	lcall	_stack_push
      0011B6 AB 82            [24] 3561 	mov	r3,dpl
      0011B8 AC 83            [24] 3562 	mov	r4,dph
      0011BA E5 81            [12] 3563 	mov	a,sp
      0011BC 24 FC            [12] 3564 	add	a,#0xfc
      0011BE F5 81            [12] 3565 	mov	sp,a
      0011C0 EB               [12] 3566 	mov	a,r3
      0011C1 4C               [12] 3567 	orl	a,r4
      0011C2 60 03            [24] 3568 	jz	01308$
      0011C4 02r2Ar46         [24] 3569 	ljmp	00249$
      0011C7                       3570 01308$:
      0011C7 7Fr58            [12] 3571 	mov	r7,#___str_11
      0011C9 7Es00            [12] 3572 	mov	r6,#(___str_11 >> 8)
      0011CB 7D 80            [12] 3573 	mov	r5,#0x80
                                   3574 ;	calc.c:51: return;
      0011CD                       3575 00409$:
                                   3576 ;	calc.c:49: for (; *s; s++) putchar(*s);
      0011CD 8F 82            [24] 3577 	mov	dpl,r7
      0011CF 8E 83            [24] 3578 	mov	dph,r6
      0011D1 8D F0            [24] 3579 	mov	b,r5
      0011D3 12r00r00         [24] 3580 	lcall	__gptrget
      0011D6 FC               [12] 3581 	mov	r4,a
      0011D7 70 03            [24] 3582 	jnz	01309$
      0011D9 02r2Ar46         [24] 3583 	ljmp	00249$
      0011DC                       3584 01309$:
      0011DC 7B 00            [12] 3585 	mov	r3,#0x00
      0011DE 8C 82            [24] 3586 	mov	dpl,r4
      0011E0 8B 83            [24] 3587 	mov	dph,r3
      0011E2 12r00r00         [24] 3588 	lcall	_putchar
      0011E5 0F               [12] 3589 	inc	r7
                                   3590 ;	calc.c:193: case 'U':
      0011E6 BF 00 E4         [24] 3591 	cjne	r7,#0x00,00409$
      0011E9 0E               [12] 3592 	inc	r6
      0011EA 80 E1            [24] 3593 	sjmp	00409$
      0011EC                       3594 00139$:
                                   3595 ;	calc.c:194: if (!stack_peek(ctx->ss, &d0)) printstr("\r\nsecondary stack underflow\r\n");
      0011EC E5*00            [12] 3596 	mov	a,_bp
      0011EE 24 15            [12] 3597 	add	a,#0x15
      0011F0 FF               [12] 3598 	mov	r7,a
      0011F1 7E 00            [12] 3599 	mov	r6,#0x00
      0011F3 7D 40            [12] 3600 	mov	r5,#0x40
      0011F5 E5*00            [12] 3601 	mov	a,_bp
      0011F7 24 12            [12] 3602 	add	a,#0x12
      0011F9 F8               [12] 3603 	mov	r0,a
      0011FA 74 14            [12] 3604 	mov	a,#0x14
      0011FC 26               [12] 3605 	add	a,@r0
      0011FD FA               [12] 3606 	mov	r2,a
      0011FE ED               [12] 3607 	mov	a,r5
      0011FF 08               [12] 3608 	inc	r0
      001200 36               [12] 3609 	addc	a,@r0
      001201 FB               [12] 3610 	mov	r3,a
      001202 08               [12] 3611 	inc	r0
      001203 86 04            [24] 3612 	mov	ar4,@r0
      001205 8A 82            [24] 3613 	mov	dpl,r2
      001207 8B 83            [24] 3614 	mov	dph,r3
      001209 8C F0            [24] 3615 	mov	b,r4
      00120B 12r00r00         [24] 3616 	lcall	__gptrget
      00120E FA               [12] 3617 	mov	r2,a
      00120F A3               [24] 3618 	inc	dptr
      001210 12r00r00         [24] 3619 	lcall	__gptrget
      001213 FB               [12] 3620 	mov	r3,a
      001214 A3               [24] 3621 	inc	dptr
      001215 12r00r00         [24] 3622 	lcall	__gptrget
      001218 FC               [12] 3623 	mov	r4,a
      001219 C0 07            [24] 3624 	push	ar7
      00121B C0 06            [24] 3625 	push	ar6
      00121D C0 05            [24] 3626 	push	ar5
      00121F 8A 82            [24] 3627 	mov	dpl,r2
      001221 8B 83            [24] 3628 	mov	dph,r3
      001223 8C F0            [24] 3629 	mov	b,r4
      001225 12r00r00         [24] 3630 	lcall	_stack_peek
      001228 AB 82            [24] 3631 	mov	r3,dpl
      00122A AC 83            [24] 3632 	mov	r4,dph
      00122C 15 81            [12] 3633 	dec	sp
      00122E 15 81            [12] 3634 	dec	sp
      001230 15 81            [12] 3635 	dec	sp
      001232 EB               [12] 3636 	mov	a,r3
      001233 4C               [12] 3637 	orl	a,r4
      001234 70 25            [24] 3638 	jnz	00143$
      001236 7Fr75            [12] 3639 	mov	r7,#___str_12
      001238 7Es00            [12] 3640 	mov	r6,#(___str_12 >> 8)
      00123A 7D 80            [12] 3641 	mov	r5,#0x80
                                   3642 ;	calc.c:51: return;
      00123C                       3643 00412$:
                                   3644 ;	calc.c:49: for (; *s; s++) putchar(*s);
      00123C 8F 82            [24] 3645 	mov	dpl,r7
      00123E 8E 83            [24] 3646 	mov	dph,r6
      001240 8D F0            [24] 3647 	mov	b,r5
      001242 12r00r00         [24] 3648 	lcall	__gptrget
      001245 FC               [12] 3649 	mov	r4,a
      001246 70 03            [24] 3650 	jnz	01312$
      001248 02r2Ar46         [24] 3651 	ljmp	00249$
      00124B                       3652 01312$:
      00124B 7B 00            [12] 3653 	mov	r3,#0x00
      00124D 8C 82            [24] 3654 	mov	dpl,r4
      00124F 8B 83            [24] 3655 	mov	dph,r3
      001251 12r00r00         [24] 3656 	lcall	_putchar
      001254 0F               [12] 3657 	inc	r7
                                   3658 ;	calc.c:194: if (!stack_peek(ctx->ss, &d0)) printstr("\r\nsecondary stack underflow\r\n");
      001255 BF 00 E4         [24] 3659 	cjne	r7,#0x00,00412$
      001258 0E               [12] 3660 	inc	r6
      001259 80 E1            [24] 3661 	sjmp	00412$
      00125B                       3662 00143$:
                                   3663 ;	calc.c:195: else if (!stack_push(ctx->ps, d0)) printstr("\r\nstack overflow\r\n");
      00125B E5*00            [12] 3664 	mov	a,_bp
      00125D 24 12            [12] 3665 	add	a,#0x12
      00125F F8               [12] 3666 	mov	r0,a
      001260 74 11            [12] 3667 	mov	a,#0x11
      001262 26               [12] 3668 	add	a,@r0
      001263 FA               [12] 3669 	mov	r2,a
      001264 74 40            [12] 3670 	mov	a,#0x40
      001266 08               [12] 3671 	inc	r0
      001267 36               [12] 3672 	addc	a,@r0
      001268 FB               [12] 3673 	mov	r3,a
      001269 08               [12] 3674 	inc	r0
      00126A 86 04            [24] 3675 	mov	ar4,@r0
      00126C 8A 82            [24] 3676 	mov	dpl,r2
      00126E 8B 83            [24] 3677 	mov	dph,r3
      001270 8C F0            [24] 3678 	mov	b,r4
      001272 12r00r00         [24] 3679 	lcall	__gptrget
      001275 FA               [12] 3680 	mov	r2,a
      001276 A3               [24] 3681 	inc	dptr
      001277 12r00r00         [24] 3682 	lcall	__gptrget
      00127A FB               [12] 3683 	mov	r3,a
      00127B A3               [24] 3684 	inc	dptr
      00127C 12r00r00         [24] 3685 	lcall	__gptrget
      00127F FC               [12] 3686 	mov	r4,a
      001280 E5*00            [12] 3687 	mov	a,_bp
      001282 24 15            [12] 3688 	add	a,#0x15
      001284 F8               [12] 3689 	mov	r0,a
      001285 E6               [12] 3690 	mov	a,@r0
      001286 C0 E0            [24] 3691 	push	acc
      001288 08               [12] 3692 	inc	r0
      001289 E6               [12] 3693 	mov	a,@r0
      00128A C0 E0            [24] 3694 	push	acc
      00128C 08               [12] 3695 	inc	r0
      00128D E6               [12] 3696 	mov	a,@r0
      00128E C0 E0            [24] 3697 	push	acc
      001290 08               [12] 3698 	inc	r0
      001291 E6               [12] 3699 	mov	a,@r0
      001292 C0 E0            [24] 3700 	push	acc
      001294 8A 82            [24] 3701 	mov	dpl,r2
      001296 8B 83            [24] 3702 	mov	dph,r3
      001298 8C F0            [24] 3703 	mov	b,r4
      00129A 12r00r00         [24] 3704 	lcall	_stack_push
      00129D AB 82            [24] 3705 	mov	r3,dpl
      00129F AC 83            [24] 3706 	mov	r4,dph
      0012A1 E5 81            [12] 3707 	mov	a,sp
      0012A3 24 FC            [12] 3708 	add	a,#0xfc
      0012A5 F5 81            [12] 3709 	mov	sp,a
      0012A7 EB               [12] 3710 	mov	a,r3
      0012A8 4C               [12] 3711 	orl	a,r4
      0012A9 60 03            [24] 3712 	jz	01314$
      0012AB 02r2Ar46         [24] 3713 	ljmp	00249$
      0012AE                       3714 01314$:
      0012AE 7Fr93            [12] 3715 	mov	r7,#___str_13
      0012B0 7Es00            [12] 3716 	mov	r6,#(___str_13 >> 8)
      0012B2 7D 80            [12] 3717 	mov	r5,#0x80
                                   3718 ;	calc.c:51: return;
      0012B4                       3719 00415$:
                                   3720 ;	calc.c:49: for (; *s; s++) putchar(*s);
      0012B4 8F 82            [24] 3721 	mov	dpl,r7
      0012B6 8E 83            [24] 3722 	mov	dph,r6
      0012B8 8D F0            [24] 3723 	mov	b,r5
      0012BA 12r00r00         [24] 3724 	lcall	__gptrget
      0012BD FC               [12] 3725 	mov	r4,a
      0012BE 70 03            [24] 3726 	jnz	01315$
      0012C0 02r2Ar46         [24] 3727 	ljmp	00249$
      0012C3                       3728 01315$:
      0012C3 7B 00            [12] 3729 	mov	r3,#0x00
      0012C5 8C 82            [24] 3730 	mov	dpl,r4
      0012C7 8B 83            [24] 3731 	mov	dph,r3
      0012C9 12r00r00         [24] 3732 	lcall	_putchar
      0012CC 0F               [12] 3733 	inc	r7
                                   3734 ;	calc.c:197: case 'T':
      0012CD BF 00 E4         [24] 3735 	cjne	r7,#0x00,00415$
      0012D0 0E               [12] 3736 	inc	r6
      0012D1 80 E1            [24] 3737 	sjmp	00415$
      0012D3                       3738 00145$:
                                   3739 ;	calc.c:198: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      0012D3 E5*00            [12] 3740 	mov	a,_bp
      0012D5 24 15            [12] 3741 	add	a,#0x15
      0012D7 FF               [12] 3742 	mov	r7,a
      0012D8 7E 00            [12] 3743 	mov	r6,#0x00
      0012DA 7D 40            [12] 3744 	mov	r5,#0x40
      0012DC E5*00            [12] 3745 	mov	a,_bp
      0012DE 24 12            [12] 3746 	add	a,#0x12
      0012E0 F8               [12] 3747 	mov	r0,a
      0012E1 E5*00            [12] 3748 	mov	a,_bp
      0012E3 24 07            [12] 3749 	add	a,#0x07
      0012E5 F9               [12] 3750 	mov	r1,a
      0012E6 74 11            [12] 3751 	mov	a,#0x11
      0012E8 26               [12] 3752 	add	a,@r0
      0012E9 F7               [12] 3753 	mov	@r1,a
      0012EA 74 40            [12] 3754 	mov	a,#0x40
      0012EC 08               [12] 3755 	inc	r0
      0012ED 36               [12] 3756 	addc	a,@r0
      0012EE 09               [12] 3757 	inc	r1
      0012EF F7               [12] 3758 	mov	@r1,a
      0012F0 08               [12] 3759 	inc	r0
      0012F1 09               [12] 3760 	inc	r1
      0012F2 E6               [12] 3761 	mov	a,@r0
      0012F3 F7               [12] 3762 	mov	@r1,a
      0012F4 E5*00            [12] 3763 	mov	a,_bp
      0012F6 24 07            [12] 3764 	add	a,#0x07
      0012F8 F8               [12] 3765 	mov	r0,a
      0012F9 86 82            [24] 3766 	mov	dpl,@r0
      0012FB 08               [12] 3767 	inc	r0
      0012FC 86 83            [24] 3768 	mov	dph,@r0
      0012FE 08               [12] 3769 	inc	r0
      0012FF 86 F0            [24] 3770 	mov	b,@r0
      001301 12r00r00         [24] 3771 	lcall	__gptrget
      001304 FA               [12] 3772 	mov	r2,a
      001305 A3               [24] 3773 	inc	dptr
      001306 12r00r00         [24] 3774 	lcall	__gptrget
      001309 FB               [12] 3775 	mov	r3,a
      00130A A3               [24] 3776 	inc	dptr
      00130B 12r00r00         [24] 3777 	lcall	__gptrget
      00130E FC               [12] 3778 	mov	r4,a
      00130F C0 07            [24] 3779 	push	ar7
      001311 C0 06            [24] 3780 	push	ar6
      001313 C0 05            [24] 3781 	push	ar5
      001315 8A 82            [24] 3782 	mov	dpl,r2
      001317 8B 83            [24] 3783 	mov	dph,r3
      001319 8C F0            [24] 3784 	mov	b,r4
      00131B 12r00r00         [24] 3785 	lcall	_stack_pop
      00131E AB 82            [24] 3786 	mov	r3,dpl
      001320 AC 83            [24] 3787 	mov	r4,dph
      001322 15 81            [12] 3788 	dec	sp
      001324 15 81            [12] 3789 	dec	sp
      001326 15 81            [12] 3790 	dec	sp
      001328 EB               [12] 3791 	mov	a,r3
      001329 4C               [12] 3792 	orl	a,r4
      00132A 70 25            [24] 3793 	jnz	00150$
      00132C 7Fr44            [12] 3794 	mov	r7,#___str_10
      00132E 7Es00            [12] 3795 	mov	r6,#(___str_10 >> 8)
      001330 7D 80            [12] 3796 	mov	r5,#0x80
                                   3797 ;	calc.c:51: return;
      001332                       3798 00418$:
                                   3799 ;	calc.c:49: for (; *s; s++) putchar(*s);
      001332 8F 82            [24] 3800 	mov	dpl,r7
      001334 8E 83            [24] 3801 	mov	dph,r6
      001336 8D F0            [24] 3802 	mov	b,r5
      001338 12r00r00         [24] 3803 	lcall	__gptrget
      00133B FC               [12] 3804 	mov	r4,a
      00133C 70 03            [24] 3805 	jnz	01318$
      00133E 02r2Ar46         [24] 3806 	ljmp	00249$
      001341                       3807 01318$:
      001341 7B 00            [12] 3808 	mov	r3,#0x00
      001343 8C 82            [24] 3809 	mov	dpl,r4
      001345 8B 83            [24] 3810 	mov	dph,r3
      001347 12r00r00         [24] 3811 	lcall	_putchar
      00134A 0F               [12] 3812 	inc	r7
                                   3813 ;	calc.c:198: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      00134B BF 00 E4         [24] 3814 	cjne	r7,#0x00,00418$
      00134E 0E               [12] 3815 	inc	r6
      00134F 80 E1            [24] 3816 	sjmp	00418$
      001351                       3817 00150$:
                                   3818 ;	calc.c:200: if (!stack_pop(ctx->ss, &d1)) {
      001351 E5*00            [12] 3819 	mov	a,_bp
      001353 24 19            [12] 3820 	add	a,#0x19
      001355 FF               [12] 3821 	mov	r7,a
      001356 7E 00            [12] 3822 	mov	r6,#0x00
      001358 7D 40            [12] 3823 	mov	r5,#0x40
      00135A E5*00            [12] 3824 	mov	a,_bp
      00135C 24 12            [12] 3825 	add	a,#0x12
      00135E F8               [12] 3826 	mov	r0,a
      00135F E5*00            [12] 3827 	mov	a,_bp
      001361 24 04            [12] 3828 	add	a,#0x04
      001363 F9               [12] 3829 	mov	r1,a
      001364 74 14            [12] 3830 	mov	a,#0x14
      001366 26               [12] 3831 	add	a,@r0
      001367 F7               [12] 3832 	mov	@r1,a
      001368 74 40            [12] 3833 	mov	a,#0x40
      00136A 08               [12] 3834 	inc	r0
      00136B 36               [12] 3835 	addc	a,@r0
      00136C 09               [12] 3836 	inc	r1
      00136D F7               [12] 3837 	mov	@r1,a
      00136E 08               [12] 3838 	inc	r0
      00136F 09               [12] 3839 	inc	r1
      001370 E6               [12] 3840 	mov	a,@r0
      001371 F7               [12] 3841 	mov	@r1,a
      001372 E5*00            [12] 3842 	mov	a,_bp
      001374 24 04            [12] 3843 	add	a,#0x04
      001376 F8               [12] 3844 	mov	r0,a
      001377 86 82            [24] 3845 	mov	dpl,@r0
      001379 08               [12] 3846 	inc	r0
      00137A 86 83            [24] 3847 	mov	dph,@r0
      00137C 08               [12] 3848 	inc	r0
      00137D 86 F0            [24] 3849 	mov	b,@r0
      00137F 12r00r00         [24] 3850 	lcall	__gptrget
      001382 FA               [12] 3851 	mov	r2,a
      001383 A3               [24] 3852 	inc	dptr
      001384 12r00r00         [24] 3853 	lcall	__gptrget
      001387 FB               [12] 3854 	mov	r3,a
      001388 A3               [24] 3855 	inc	dptr
      001389 12r00r00         [24] 3856 	lcall	__gptrget
      00138C FC               [12] 3857 	mov	r4,a
      00138D C0 07            [24] 3858 	push	ar7
      00138F C0 06            [24] 3859 	push	ar6
      001391 C0 05            [24] 3860 	push	ar5
      001393 8A 82            [24] 3861 	mov	dpl,r2
      001395 8B 83            [24] 3862 	mov	dph,r3
      001397 8C F0            [24] 3863 	mov	b,r4
      001399 12r00r00         [24] 3864 	lcall	_stack_pop
      00139C AB 82            [24] 3865 	mov	r3,dpl
      00139E AC 83            [24] 3866 	mov	r4,dph
      0013A0 15 81            [12] 3867 	dec	sp
      0013A2 15 81            [12] 3868 	dec	sp
      0013A4 15 81            [12] 3869 	dec	sp
      0013A6 EB               [12] 3870 	mov	a,r3
      0013A7 4C               [12] 3871 	orl	a,r4
      0013A8 70 63            [24] 3872 	jnz	00147$
                                   3873 ;	calc.c:201: printstr("\r\nsecondary stack underflow\r\n");
      0013AA 7Fr75            [12] 3874 	mov	r7,#___str_12
      0013AC 7Es00            [12] 3875 	mov	r6,#(___str_12 >> 8)
      0013AE 7D 80            [12] 3876 	mov	r5,#0x80
                                   3877 ;	calc.c:51: return;
      0013B0                       3878 00421$:
                                   3879 ;	calc.c:49: for (; *s; s++) putchar(*s);
      0013B0 8F 82            [24] 3880 	mov	dpl,r7
      0013B2 8E 83            [24] 3881 	mov	dph,r6
      0013B4 8D F0            [24] 3882 	mov	b,r5
      0013B6 12r00r00         [24] 3883 	lcall	__gptrget
      0013B9 FC               [12] 3884 	mov	r4,a
      0013BA 60 10            [24] 3885 	jz	00299$
      0013BC 7B 00            [12] 3886 	mov	r3,#0x00
      0013BE 8C 82            [24] 3887 	mov	dpl,r4
      0013C0 8B 83            [24] 3888 	mov	dph,r3
      0013C2 12r00r00         [24] 3889 	lcall	_putchar
      0013C5 0F               [12] 3890 	inc	r7
                                   3891 ;	calc.c:201: printstr("\r\nsecondary stack underflow\r\n");
      0013C6 BF 00 E7         [24] 3892 	cjne	r7,#0x00,00421$
      0013C9 0E               [12] 3893 	inc	r6
      0013CA 80 E4            [24] 3894 	sjmp	00421$
      0013CC                       3895 00299$:
                                   3896 ;	calc.c:202: (void)stack_push(ctx->ps, d0);
      0013CC E5*00            [12] 3897 	mov	a,_bp
      0013CE 24 07            [12] 3898 	add	a,#0x07
      0013D0 F8               [12] 3899 	mov	r0,a
      0013D1 86 82            [24] 3900 	mov	dpl,@r0
      0013D3 08               [12] 3901 	inc	r0
      0013D4 86 83            [24] 3902 	mov	dph,@r0
      0013D6 08               [12] 3903 	inc	r0
      0013D7 86 F0            [24] 3904 	mov	b,@r0
      0013D9 12r00r00         [24] 3905 	lcall	__gptrget
      0013DC FA               [12] 3906 	mov	r2,a
      0013DD A3               [24] 3907 	inc	dptr
      0013DE 12r00r00         [24] 3908 	lcall	__gptrget
      0013E1 FB               [12] 3909 	mov	r3,a
      0013E2 A3               [24] 3910 	inc	dptr
      0013E3 12r00r00         [24] 3911 	lcall	__gptrget
      0013E6 FC               [12] 3912 	mov	r4,a
      0013E7 E5*00            [12] 3913 	mov	a,_bp
      0013E9 24 15            [12] 3914 	add	a,#0x15
      0013EB F8               [12] 3915 	mov	r0,a
      0013EC E6               [12] 3916 	mov	a,@r0
      0013ED C0 E0            [24] 3917 	push	acc
      0013EF 08               [12] 3918 	inc	r0
      0013F0 E6               [12] 3919 	mov	a,@r0
      0013F1 C0 E0            [24] 3920 	push	acc
      0013F3 08               [12] 3921 	inc	r0
      0013F4 E6               [12] 3922 	mov	a,@r0
      0013F5 C0 E0            [24] 3923 	push	acc
      0013F7 08               [12] 3924 	inc	r0
      0013F8 E6               [12] 3925 	mov	a,@r0
      0013F9 C0 E0            [24] 3926 	push	acc
      0013FB 8A 82            [24] 3927 	mov	dpl,r2
      0013FD 8B 83            [24] 3928 	mov	dph,r3
      0013FF 8C F0            [24] 3929 	mov	b,r4
      001401 12r00r00         [24] 3930 	lcall	_stack_push
      001404 E5 81            [12] 3931 	mov	a,sp
      001406 24 FC            [12] 3932 	add	a,#0xfc
      001408 F5 81            [12] 3933 	mov	sp,a
      00140A 02r2Ar46         [24] 3934 	ljmp	00249$
      00140D                       3935 00147$:
                                   3936 ;	calc.c:204: (void)stack_push(ctx->ps, d1);
      00140D E5*00            [12] 3937 	mov	a,_bp
      00140F 24 07            [12] 3938 	add	a,#0x07
      001411 F8               [12] 3939 	mov	r0,a
      001412 86 82            [24] 3940 	mov	dpl,@r0
      001414 08               [12] 3941 	inc	r0
      001415 86 83            [24] 3942 	mov	dph,@r0
      001417 08               [12] 3943 	inc	r0
      001418 86 F0            [24] 3944 	mov	b,@r0
      00141A 12r00r00         [24] 3945 	lcall	__gptrget
      00141D FA               [12] 3946 	mov	r2,a
      00141E A3               [24] 3947 	inc	dptr
      00141F 12r00r00         [24] 3948 	lcall	__gptrget
      001422 FB               [12] 3949 	mov	r3,a
      001423 A3               [24] 3950 	inc	dptr
      001424 12r00r00         [24] 3951 	lcall	__gptrget
      001427 FC               [12] 3952 	mov	r4,a
      001428 E5*00            [12] 3953 	mov	a,_bp
      00142A 24 19            [12] 3954 	add	a,#0x19
      00142C F8               [12] 3955 	mov	r0,a
      00142D E6               [12] 3956 	mov	a,@r0
      00142E C0 E0            [24] 3957 	push	acc
      001430 08               [12] 3958 	inc	r0
      001431 E6               [12] 3959 	mov	a,@r0
      001432 C0 E0            [24] 3960 	push	acc
      001434 08               [12] 3961 	inc	r0
      001435 E6               [12] 3962 	mov	a,@r0
      001436 C0 E0            [24] 3963 	push	acc
      001438 08               [12] 3964 	inc	r0
      001439 E6               [12] 3965 	mov	a,@r0
      00143A C0 E0            [24] 3966 	push	acc
      00143C 8A 82            [24] 3967 	mov	dpl,r2
      00143E 8B 83            [24] 3968 	mov	dph,r3
      001440 8C F0            [24] 3969 	mov	b,r4
      001442 12r00r00         [24] 3970 	lcall	_stack_push
      001445 E5 81            [12] 3971 	mov	a,sp
      001447 24 FC            [12] 3972 	add	a,#0xfc
      001449 F5 81            [12] 3973 	mov	sp,a
                                   3974 ;	calc.c:205: (void)stack_push(ctx->ss, d0);
      00144B E5*00            [12] 3975 	mov	a,_bp
      00144D 24 04            [12] 3976 	add	a,#0x04
      00144F F8               [12] 3977 	mov	r0,a
      001450 86 82            [24] 3978 	mov	dpl,@r0
      001452 08               [12] 3979 	inc	r0
      001453 86 83            [24] 3980 	mov	dph,@r0
      001455 08               [12] 3981 	inc	r0
      001456 86 F0            [24] 3982 	mov	b,@r0
      001458 12r00r00         [24] 3983 	lcall	__gptrget
      00145B FA               [12] 3984 	mov	r2,a
      00145C A3               [24] 3985 	inc	dptr
      00145D 12r00r00         [24] 3986 	lcall	__gptrget
      001460 FB               [12] 3987 	mov	r3,a
      001461 A3               [24] 3988 	inc	dptr
      001462 12r00r00         [24] 3989 	lcall	__gptrget
      001465 FC               [12] 3990 	mov	r4,a
      001466 E5*00            [12] 3991 	mov	a,_bp
      001468 24 15            [12] 3992 	add	a,#0x15
      00146A F8               [12] 3993 	mov	r0,a
      00146B E6               [12] 3994 	mov	a,@r0
      00146C C0 E0            [24] 3995 	push	acc
      00146E 08               [12] 3996 	inc	r0
      00146F E6               [12] 3997 	mov	a,@r0
      001470 C0 E0            [24] 3998 	push	acc
      001472 08               [12] 3999 	inc	r0
      001473 E6               [12] 4000 	mov	a,@r0
      001474 C0 E0            [24] 4001 	push	acc
      001476 08               [12] 4002 	inc	r0
      001477 E6               [12] 4003 	mov	a,@r0
      001478 C0 E0            [24] 4004 	push	acc
      00147A 8A 82            [24] 4005 	mov	dpl,r2
      00147C 8B 83            [24] 4006 	mov	dph,r3
      00147E 8C F0            [24] 4007 	mov	b,r4
      001480 12r00r00         [24] 4008 	lcall	_stack_push
      001483 E5 81            [12] 4009 	mov	a,sp
      001485 24 FC            [12] 4010 	add	a,#0xfc
      001487 F5 81            [12] 4011 	mov	sp,a
                                   4012 ;	calc.c:208: break;
      001489 02r2Ar46         [24] 4013 	ljmp	00249$
                                   4014 ;	calc.c:209: case 'X':
      00148C                       4015 00152$:
                                   4016 ;	calc.c:210: t0 = ctx->ps;
      00148C E5*00            [12] 4017 	mov	a,_bp
      00148E 24 12            [12] 4018 	add	a,#0x12
      001490 F8               [12] 4019 	mov	r0,a
      001491 E5*00            [12] 4020 	mov	a,_bp
      001493 24 0B            [12] 4021 	add	a,#0x0b
      001495 F9               [12] 4022 	mov	r1,a
      001496 74 11            [12] 4023 	mov	a,#0x11
      001498 26               [12] 4024 	add	a,@r0
      001499 F7               [12] 4025 	mov	@r1,a
      00149A 74 40            [12] 4026 	mov	a,#0x40
      00149C 08               [12] 4027 	inc	r0
      00149D 36               [12] 4028 	addc	a,@r0
      00149E 09               [12] 4029 	inc	r1
      00149F F7               [12] 4030 	mov	@r1,a
      0014A0 08               [12] 4031 	inc	r0
      0014A1 09               [12] 4032 	inc	r1
      0014A2 E6               [12] 4033 	mov	a,@r0
      0014A3 F7               [12] 4034 	mov	@r1,a
      0014A4 E5*00            [12] 4035 	mov	a,_bp
      0014A6 24 0B            [12] 4036 	add	a,#0x0b
      0014A8 F8               [12] 4037 	mov	r0,a
      0014A9 86 82            [24] 4038 	mov	dpl,@r0
      0014AB 08               [12] 4039 	inc	r0
      0014AC 86 83            [24] 4040 	mov	dph,@r0
      0014AE 08               [12] 4041 	inc	r0
      0014AF 86 F0            [24] 4042 	mov	b,@r0
      0014B1 12r00r00         [24] 4043 	lcall	__gptrget
      0014B4 FF               [12] 4044 	mov	r7,a
      0014B5 A3               [24] 4045 	inc	dptr
      0014B6 12r00r00         [24] 4046 	lcall	__gptrget
      0014B9 FE               [12] 4047 	mov	r6,a
      0014BA A3               [24] 4048 	inc	dptr
      0014BB 12r00r00         [24] 4049 	lcall	__gptrget
      0014BE FD               [12] 4050 	mov	r5,a
                                   4051 ;	calc.c:211: ctx->ps = ctx->ss;
      0014BF E5*00            [12] 4052 	mov	a,_bp
      0014C1 24 12            [12] 4053 	add	a,#0x12
      0014C3 F8               [12] 4054 	mov	r0,a
      0014C4 E5*00            [12] 4055 	mov	a,_bp
      0014C6 24 07            [12] 4056 	add	a,#0x07
      0014C8 F9               [12] 4057 	mov	r1,a
      0014C9 74 14            [12] 4058 	mov	a,#0x14
      0014CB 26               [12] 4059 	add	a,@r0
      0014CC F7               [12] 4060 	mov	@r1,a
      0014CD 74 40            [12] 4061 	mov	a,#0x40
      0014CF 08               [12] 4062 	inc	r0
      0014D0 36               [12] 4063 	addc	a,@r0
      0014D1 09               [12] 4064 	inc	r1
      0014D2 F7               [12] 4065 	mov	@r1,a
      0014D3 08               [12] 4066 	inc	r0
      0014D4 09               [12] 4067 	inc	r1
      0014D5 E6               [12] 4068 	mov	a,@r0
      0014D6 F7               [12] 4069 	mov	@r1,a
      0014D7 E5*00            [12] 4070 	mov	a,_bp
      0014D9 24 07            [12] 4071 	add	a,#0x07
      0014DB F8               [12] 4072 	mov	r0,a
      0014DC 86 82            [24] 4073 	mov	dpl,@r0
      0014DE 08               [12] 4074 	inc	r0
      0014DF 86 83            [24] 4075 	mov	dph,@r0
      0014E1 08               [12] 4076 	inc	r0
      0014E2 86 F0            [24] 4077 	mov	b,@r0
      0014E4 12r00r00         [24] 4078 	lcall	__gptrget
      0014E7 FA               [12] 4079 	mov	r2,a
      0014E8 A3               [24] 4080 	inc	dptr
      0014E9 12r00r00         [24] 4081 	lcall	__gptrget
      0014EC FB               [12] 4082 	mov	r3,a
      0014ED A3               [24] 4083 	inc	dptr
      0014EE 12r00r00         [24] 4084 	lcall	__gptrget
      0014F1 FC               [12] 4085 	mov	r4,a
      0014F2 E5*00            [12] 4086 	mov	a,_bp
      0014F4 24 0B            [12] 4087 	add	a,#0x0b
      0014F6 F8               [12] 4088 	mov	r0,a
      0014F7 86 82            [24] 4089 	mov	dpl,@r0
      0014F9 08               [12] 4090 	inc	r0
      0014FA 86 83            [24] 4091 	mov	dph,@r0
      0014FC 08               [12] 4092 	inc	r0
      0014FD 86 F0            [24] 4093 	mov	b,@r0
      0014FF EA               [12] 4094 	mov	a,r2
      001500 12r00r00         [24] 4095 	lcall	__gptrput
      001503 A3               [24] 4096 	inc	dptr
      001504 EB               [12] 4097 	mov	a,r3
      001505 12r00r00         [24] 4098 	lcall	__gptrput
      001508 A3               [24] 4099 	inc	dptr
      001509 EC               [12] 4100 	mov	a,r4
      00150A 12r00r00         [24] 4101 	lcall	__gptrput
                                   4102 ;	calc.c:212: ctx->ss = t0;
      00150D E5*00            [12] 4103 	mov	a,_bp
      00150F 24 07            [12] 4104 	add	a,#0x07
      001511 F8               [12] 4105 	mov	r0,a
      001512 86 82            [24] 4106 	mov	dpl,@r0
      001514 08               [12] 4107 	inc	r0
      001515 86 83            [24] 4108 	mov	dph,@r0
      001517 08               [12] 4109 	inc	r0
      001518 86 F0            [24] 4110 	mov	b,@r0
      00151A EF               [12] 4111 	mov	a,r7
      00151B 12r00r00         [24] 4112 	lcall	__gptrput
      00151E A3               [24] 4113 	inc	dptr
      00151F EE               [12] 4114 	mov	a,r6
      001520 12r00r00         [24] 4115 	lcall	__gptrput
      001523 A3               [24] 4116 	inc	dptr
      001524 ED               [12] 4117 	mov	a,r5
      001525 12r00r00         [24] 4118 	lcall	__gptrput
                                   4119 ;	calc.c:213: break;
      001528 02r2Ar46         [24] 4120 	ljmp	00249$
                                   4121 ;	calc.c:214: case '+':
      00152B                       4122 00153$:
                                   4123 ;	calc.c:215: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      00152B E5*00            [12] 4124 	mov	a,_bp
      00152D 24 15            [12] 4125 	add	a,#0x15
      00152F FF               [12] 4126 	mov	r7,a
      001530 7E 00            [12] 4127 	mov	r6,#0x00
      001532 7D 40            [12] 4128 	mov	r5,#0x40
      001534 E5*00            [12] 4129 	mov	a,_bp
      001536 24 12            [12] 4130 	add	a,#0x12
      001538 F8               [12] 4131 	mov	r0,a
      001539 E5*00            [12] 4132 	mov	a,_bp
      00153B 24 0B            [12] 4133 	add	a,#0x0b
      00153D F9               [12] 4134 	mov	r1,a
      00153E 74 11            [12] 4135 	mov	a,#0x11
      001540 26               [12] 4136 	add	a,@r0
      001541 F7               [12] 4137 	mov	@r1,a
      001542 74 40            [12] 4138 	mov	a,#0x40
      001544 08               [12] 4139 	inc	r0
      001545 36               [12] 4140 	addc	a,@r0
      001546 09               [12] 4141 	inc	r1
      001547 F7               [12] 4142 	mov	@r1,a
      001548 08               [12] 4143 	inc	r0
      001549 09               [12] 4144 	inc	r1
      00154A E6               [12] 4145 	mov	a,@r0
      00154B F7               [12] 4146 	mov	@r1,a
      00154C E5*00            [12] 4147 	mov	a,_bp
      00154E 24 0B            [12] 4148 	add	a,#0x0b
      001550 F8               [12] 4149 	mov	r0,a
      001551 86 82            [24] 4150 	mov	dpl,@r0
      001553 08               [12] 4151 	inc	r0
      001554 86 83            [24] 4152 	mov	dph,@r0
      001556 08               [12] 4153 	inc	r0
      001557 86 F0            [24] 4154 	mov	b,@r0
      001559 12r00r00         [24] 4155 	lcall	__gptrget
      00155C FA               [12] 4156 	mov	r2,a
      00155D A3               [24] 4157 	inc	dptr
      00155E 12r00r00         [24] 4158 	lcall	__gptrget
      001561 FB               [12] 4159 	mov	r3,a
      001562 A3               [24] 4160 	inc	dptr
      001563 12r00r00         [24] 4161 	lcall	__gptrget
      001566 FC               [12] 4162 	mov	r4,a
      001567 C0 07            [24] 4163 	push	ar7
      001569 C0 06            [24] 4164 	push	ar6
      00156B C0 05            [24] 4165 	push	ar5
      00156D 8A 82            [24] 4166 	mov	dpl,r2
      00156F 8B 83            [24] 4167 	mov	dph,r3
      001571 8C F0            [24] 4168 	mov	b,r4
      001573 12r00r00         [24] 4169 	lcall	_stack_pop
      001576 AB 82            [24] 4170 	mov	r3,dpl
      001578 AC 83            [24] 4171 	mov	r4,dph
      00157A 15 81            [12] 4172 	dec	sp
      00157C 15 81            [12] 4173 	dec	sp
      00157E 15 81            [12] 4174 	dec	sp
      001580 EB               [12] 4175 	mov	a,r3
      001581 4C               [12] 4176 	orl	a,r4
      001582 70 25            [24] 4177 	jnz	00158$
      001584 7Fr44            [12] 4178 	mov	r7,#___str_10
      001586 7Es00            [12] 4179 	mov	r6,#(___str_10 >> 8)
      001588 7D 80            [12] 4180 	mov	r5,#0x80
                                   4181 ;	calc.c:51: return;
      00158A                       4182 00424$:
                                   4183 ;	calc.c:49: for (; *s; s++) putchar(*s);
      00158A 8F 82            [24] 4184 	mov	dpl,r7
      00158C 8E 83            [24] 4185 	mov	dph,r6
      00158E 8D F0            [24] 4186 	mov	b,r5
      001590 12r00r00         [24] 4187 	lcall	__gptrget
      001593 FC               [12] 4188 	mov	r4,a
      001594 70 03            [24] 4189 	jnz	01324$
      001596 02r2Ar46         [24] 4190 	ljmp	00249$
      001599                       4191 01324$:
      001599 7B 00            [12] 4192 	mov	r3,#0x00
      00159B 8C 82            [24] 4193 	mov	dpl,r4
      00159D 8B 83            [24] 4194 	mov	dph,r3
      00159F 12r00r00         [24] 4195 	lcall	_putchar
      0015A2 0F               [12] 4196 	inc	r7
                                   4197 ;	calc.c:215: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      0015A3 BF 00 E4         [24] 4198 	cjne	r7,#0x00,00424$
      0015A6 0E               [12] 4199 	inc	r6
      0015A7 80 E1            [24] 4200 	sjmp	00424$
      0015A9                       4201 00158$:
                                   4202 ;	calc.c:216: else if (!stack_pop(ctx->ps, &d1)) {
      0015A9 E5*00            [12] 4203 	mov	a,_bp
      0015AB 24 19            [12] 4204 	add	a,#0x19
      0015AD FF               [12] 4205 	mov	r7,a
      0015AE 7E 00            [12] 4206 	mov	r6,#0x00
      0015B0 7D 40            [12] 4207 	mov	r5,#0x40
      0015B2 E5*00            [12] 4208 	mov	a,_bp
      0015B4 24 0B            [12] 4209 	add	a,#0x0b
      0015B6 F8               [12] 4210 	mov	r0,a
      0015B7 86 82            [24] 4211 	mov	dpl,@r0
      0015B9 08               [12] 4212 	inc	r0
      0015BA 86 83            [24] 4213 	mov	dph,@r0
      0015BC 08               [12] 4214 	inc	r0
      0015BD 86 F0            [24] 4215 	mov	b,@r0
      0015BF 12r00r00         [24] 4216 	lcall	__gptrget
      0015C2 FA               [12] 4217 	mov	r2,a
      0015C3 A3               [24] 4218 	inc	dptr
      0015C4 12r00r00         [24] 4219 	lcall	__gptrget
      0015C7 FB               [12] 4220 	mov	r3,a
      0015C8 A3               [24] 4221 	inc	dptr
      0015C9 12r00r00         [24] 4222 	lcall	__gptrget
      0015CC FC               [12] 4223 	mov	r4,a
      0015CD C0 07            [24] 4224 	push	ar7
      0015CF C0 06            [24] 4225 	push	ar6
      0015D1 C0 05            [24] 4226 	push	ar5
      0015D3 8A 82            [24] 4227 	mov	dpl,r2
      0015D5 8B 83            [24] 4228 	mov	dph,r3
      0015D7 8C F0            [24] 4229 	mov	b,r4
      0015D9 12r00r00         [24] 4230 	lcall	_stack_pop
      0015DC AB 82            [24] 4231 	mov	r3,dpl
      0015DE AC 83            [24] 4232 	mov	r4,dph
      0015E0 15 81            [12] 4233 	dec	sp
      0015E2 15 81            [12] 4234 	dec	sp
      0015E4 15 81            [12] 4235 	dec	sp
      0015E6 EB               [12] 4236 	mov	a,r3
      0015E7 4C               [12] 4237 	orl	a,r4
      0015E8 70 63            [24] 4238 	jnz	00155$
                                   4239 ;	calc.c:217: (void)stack_push(ctx->ps, d0);
      0015EA E5*00            [12] 4240 	mov	a,_bp
      0015EC 24 0B            [12] 4241 	add	a,#0x0b
      0015EE F8               [12] 4242 	mov	r0,a
      0015EF 86 82            [24] 4243 	mov	dpl,@r0
      0015F1 08               [12] 4244 	inc	r0
      0015F2 86 83            [24] 4245 	mov	dph,@r0
      0015F4 08               [12] 4246 	inc	r0
      0015F5 86 F0            [24] 4247 	mov	b,@r0
      0015F7 12r00r00         [24] 4248 	lcall	__gptrget
      0015FA FA               [12] 4249 	mov	r2,a
      0015FB A3               [24] 4250 	inc	dptr
      0015FC 12r00r00         [24] 4251 	lcall	__gptrget
      0015FF FB               [12] 4252 	mov	r3,a
      001600 A3               [24] 4253 	inc	dptr
      001601 12r00r00         [24] 4254 	lcall	__gptrget
      001604 FC               [12] 4255 	mov	r4,a
      001605 E5*00            [12] 4256 	mov	a,_bp
      001607 24 15            [12] 4257 	add	a,#0x15
      001609 F8               [12] 4258 	mov	r0,a
      00160A E6               [12] 4259 	mov	a,@r0
      00160B C0 E0            [24] 4260 	push	acc
      00160D 08               [12] 4261 	inc	r0
      00160E E6               [12] 4262 	mov	a,@r0
      00160F C0 E0            [24] 4263 	push	acc
      001611 08               [12] 4264 	inc	r0
      001612 E6               [12] 4265 	mov	a,@r0
      001613 C0 E0            [24] 4266 	push	acc
      001615 08               [12] 4267 	inc	r0
      001616 E6               [12] 4268 	mov	a,@r0
      001617 C0 E0            [24] 4269 	push	acc
      001619 8A 82            [24] 4270 	mov	dpl,r2
      00161B 8B 83            [24] 4271 	mov	dph,r3
      00161D 8C F0            [24] 4272 	mov	b,r4
      00161F 12r00r00         [24] 4273 	lcall	_stack_push
      001622 E5 81            [12] 4274 	mov	a,sp
      001624 24 FC            [12] 4275 	add	a,#0xfc
      001626 F5 81            [12] 4276 	mov	sp,a
                                   4277 ;	calc.c:218: printstr("\r\nstack underflow\r\n");
      001628 7Fr44            [12] 4278 	mov	r7,#___str_10
      00162A 7Es00            [12] 4279 	mov	r6,#(___str_10 >> 8)
      00162C 7D 80            [12] 4280 	mov	r5,#0x80
                                   4281 ;	calc.c:51: return;
      00162E                       4282 00427$:
                                   4283 ;	calc.c:49: for (; *s; s++) putchar(*s);
      00162E 8F 82            [24] 4284 	mov	dpl,r7
      001630 8E 83            [24] 4285 	mov	dph,r6
      001632 8D F0            [24] 4286 	mov	b,r5
      001634 12r00r00         [24] 4287 	lcall	__gptrget
      001637 FC               [12] 4288 	mov	r4,a
      001638 70 03            [24] 4289 	jnz	01327$
      00163A 02r2Ar46         [24] 4290 	ljmp	00249$
      00163D                       4291 01327$:
      00163D 7B 00            [12] 4292 	mov	r3,#0x00
      00163F 8C 82            [24] 4293 	mov	dpl,r4
      001641 8B 83            [24] 4294 	mov	dph,r3
      001643 12r00r00         [24] 4295 	lcall	_putchar
      001646 0F               [12] 4296 	inc	r7
                                   4297 ;	calc.c:218: printstr("\r\nstack underflow\r\n");
      001647 BF 00 E4         [24] 4298 	cjne	r7,#0x00,00427$
      00164A 0E               [12] 4299 	inc	r6
      00164B 80 E1            [24] 4300 	sjmp	00427$
      00164D                       4301 00155$:
                                   4302 ;	calc.c:220: d1 += d0;
      00164D E5*00            [12] 4303 	mov	a,_bp
      00164F 24 19            [12] 4304 	add	a,#0x19
      001651 F8               [12] 4305 	mov	r0,a
      001652 E5*00            [12] 4306 	mov	a,_bp
      001654 24 15            [12] 4307 	add	a,#0x15
      001656 F9               [12] 4308 	mov	r1,a
      001657 E7               [12] 4309 	mov	a,@r1
      001658 26               [12] 4310 	add	a,@r0
      001659 F6               [12] 4311 	mov	@r0,a
      00165A 09               [12] 4312 	inc	r1
      00165B E7               [12] 4313 	mov	a,@r1
      00165C 08               [12] 4314 	inc	r0
      00165D 36               [12] 4315 	addc	a,@r0
      00165E F6               [12] 4316 	mov	@r0,a
      00165F 09               [12] 4317 	inc	r1
      001660 E7               [12] 4318 	mov	a,@r1
      001661 08               [12] 4319 	inc	r0
      001662 36               [12] 4320 	addc	a,@r0
      001663 F6               [12] 4321 	mov	@r0,a
      001664 09               [12] 4322 	inc	r1
      001665 E7               [12] 4323 	mov	a,@r1
      001666 08               [12] 4324 	inc	r0
      001667 36               [12] 4325 	addc	a,@r0
      001668 F6               [12] 4326 	mov	@r0,a
                                   4327 ;	calc.c:221: (void)stack_push(ctx->ps, d1);
      001669 E5*00            [12] 4328 	mov	a,_bp
      00166B 24 0B            [12] 4329 	add	a,#0x0b
      00166D F8               [12] 4330 	mov	r0,a
      00166E 86 82            [24] 4331 	mov	dpl,@r0
      001670 08               [12] 4332 	inc	r0
      001671 86 83            [24] 4333 	mov	dph,@r0
      001673 08               [12] 4334 	inc	r0
      001674 86 F0            [24] 4335 	mov	b,@r0
      001676 12r00r00         [24] 4336 	lcall	__gptrget
      001679 FA               [12] 4337 	mov	r2,a
      00167A A3               [24] 4338 	inc	dptr
      00167B 12r00r00         [24] 4339 	lcall	__gptrget
      00167E FB               [12] 4340 	mov	r3,a
      00167F A3               [24] 4341 	inc	dptr
      001680 12r00r00         [24] 4342 	lcall	__gptrget
      001683 FC               [12] 4343 	mov	r4,a
      001684 E5*00            [12] 4344 	mov	a,_bp
      001686 24 19            [12] 4345 	add	a,#0x19
      001688 F8               [12] 4346 	mov	r0,a
      001689 E6               [12] 4347 	mov	a,@r0
      00168A C0 E0            [24] 4348 	push	acc
      00168C 08               [12] 4349 	inc	r0
      00168D E6               [12] 4350 	mov	a,@r0
      00168E C0 E0            [24] 4351 	push	acc
      001690 08               [12] 4352 	inc	r0
      001691 E6               [12] 4353 	mov	a,@r0
      001692 C0 E0            [24] 4354 	push	acc
      001694 08               [12] 4355 	inc	r0
      001695 E6               [12] 4356 	mov	a,@r0
      001696 C0 E0            [24] 4357 	push	acc
      001698 8A 82            [24] 4358 	mov	dpl,r2
      00169A 8B 83            [24] 4359 	mov	dph,r3
      00169C 8C F0            [24] 4360 	mov	b,r4
      00169E 12r00r00         [24] 4361 	lcall	_stack_push
      0016A1 E5 81            [12] 4362 	mov	a,sp
      0016A3 24 FC            [12] 4363 	add	a,#0xfc
      0016A5 F5 81            [12] 4364 	mov	sp,a
                                   4365 ;	calc.c:223: break;
      0016A7 02r2Ar46         [24] 4366 	ljmp	00249$
                                   4367 ;	calc.c:224: case '-':
      0016AA                       4368 00160$:
                                   4369 ;	calc.c:225: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      0016AA E5*00            [12] 4370 	mov	a,_bp
      0016AC 24 15            [12] 4371 	add	a,#0x15
      0016AE FF               [12] 4372 	mov	r7,a
      0016AF 7E 00            [12] 4373 	mov	r6,#0x00
      0016B1 7D 40            [12] 4374 	mov	r5,#0x40
      0016B3 E5*00            [12] 4375 	mov	a,_bp
      0016B5 24 12            [12] 4376 	add	a,#0x12
      0016B7 F8               [12] 4377 	mov	r0,a
      0016B8 E5*00            [12] 4378 	mov	a,_bp
      0016BA 24 0B            [12] 4379 	add	a,#0x0b
      0016BC F9               [12] 4380 	mov	r1,a
      0016BD 74 11            [12] 4381 	mov	a,#0x11
      0016BF 26               [12] 4382 	add	a,@r0
      0016C0 F7               [12] 4383 	mov	@r1,a
      0016C1 74 40            [12] 4384 	mov	a,#0x40
      0016C3 08               [12] 4385 	inc	r0
      0016C4 36               [12] 4386 	addc	a,@r0
      0016C5 09               [12] 4387 	inc	r1
      0016C6 F7               [12] 4388 	mov	@r1,a
      0016C7 08               [12] 4389 	inc	r0
      0016C8 09               [12] 4390 	inc	r1
      0016C9 E6               [12] 4391 	mov	a,@r0
      0016CA F7               [12] 4392 	mov	@r1,a
      0016CB E5*00            [12] 4393 	mov	a,_bp
      0016CD 24 0B            [12] 4394 	add	a,#0x0b
      0016CF F8               [12] 4395 	mov	r0,a
      0016D0 86 82            [24] 4396 	mov	dpl,@r0
      0016D2 08               [12] 4397 	inc	r0
      0016D3 86 83            [24] 4398 	mov	dph,@r0
      0016D5 08               [12] 4399 	inc	r0
      0016D6 86 F0            [24] 4400 	mov	b,@r0
      0016D8 12r00r00         [24] 4401 	lcall	__gptrget
      0016DB FA               [12] 4402 	mov	r2,a
      0016DC A3               [24] 4403 	inc	dptr
      0016DD 12r00r00         [24] 4404 	lcall	__gptrget
      0016E0 FB               [12] 4405 	mov	r3,a
      0016E1 A3               [24] 4406 	inc	dptr
      0016E2 12r00r00         [24] 4407 	lcall	__gptrget
      0016E5 FC               [12] 4408 	mov	r4,a
      0016E6 C0 07            [24] 4409 	push	ar7
      0016E8 C0 06            [24] 4410 	push	ar6
      0016EA C0 05            [24] 4411 	push	ar5
      0016EC 8A 82            [24] 4412 	mov	dpl,r2
      0016EE 8B 83            [24] 4413 	mov	dph,r3
      0016F0 8C F0            [24] 4414 	mov	b,r4
      0016F2 12r00r00         [24] 4415 	lcall	_stack_pop
      0016F5 AB 82            [24] 4416 	mov	r3,dpl
      0016F7 AC 83            [24] 4417 	mov	r4,dph
      0016F9 15 81            [12] 4418 	dec	sp
      0016FB 15 81            [12] 4419 	dec	sp
      0016FD 15 81            [12] 4420 	dec	sp
      0016FF EB               [12] 4421 	mov	a,r3
      001700 4C               [12] 4422 	orl	a,r4
      001701 70 25            [24] 4423 	jnz	00165$
      001703 7Fr44            [12] 4424 	mov	r7,#___str_10
      001705 7Es00            [12] 4425 	mov	r6,#(___str_10 >> 8)
      001707 7D 80            [12] 4426 	mov	r5,#0x80
                                   4427 ;	calc.c:51: return;
      001709                       4428 00430$:
                                   4429 ;	calc.c:49: for (; *s; s++) putchar(*s);
      001709 8F 82            [24] 4430 	mov	dpl,r7
      00170B 8E 83            [24] 4431 	mov	dph,r6
      00170D 8D F0            [24] 4432 	mov	b,r5
      00170F 12r00r00         [24] 4433 	lcall	__gptrget
      001712 FC               [12] 4434 	mov	r4,a
      001713 70 03            [24] 4435 	jnz	01330$
      001715 02r2Ar46         [24] 4436 	ljmp	00249$
      001718                       4437 01330$:
      001718 7B 00            [12] 4438 	mov	r3,#0x00
      00171A 8C 82            [24] 4439 	mov	dpl,r4
      00171C 8B 83            [24] 4440 	mov	dph,r3
      00171E 12r00r00         [24] 4441 	lcall	_putchar
      001721 0F               [12] 4442 	inc	r7
                                   4443 ;	calc.c:225: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      001722 BF 00 E4         [24] 4444 	cjne	r7,#0x00,00430$
      001725 0E               [12] 4445 	inc	r6
      001726 80 E1            [24] 4446 	sjmp	00430$
      001728                       4447 00165$:
                                   4448 ;	calc.c:226: else if (!stack_pop(ctx->ps, &d1)) {
      001728 E5*00            [12] 4449 	mov	a,_bp
      00172A 24 19            [12] 4450 	add	a,#0x19
      00172C FF               [12] 4451 	mov	r7,a
      00172D 7E 00            [12] 4452 	mov	r6,#0x00
      00172F 7D 40            [12] 4453 	mov	r5,#0x40
      001731 E5*00            [12] 4454 	mov	a,_bp
      001733 24 0B            [12] 4455 	add	a,#0x0b
      001735 F8               [12] 4456 	mov	r0,a
      001736 86 82            [24] 4457 	mov	dpl,@r0
      001738 08               [12] 4458 	inc	r0
      001739 86 83            [24] 4459 	mov	dph,@r0
      00173B 08               [12] 4460 	inc	r0
      00173C 86 F0            [24] 4461 	mov	b,@r0
      00173E 12r00r00         [24] 4462 	lcall	__gptrget
      001741 FA               [12] 4463 	mov	r2,a
      001742 A3               [24] 4464 	inc	dptr
      001743 12r00r00         [24] 4465 	lcall	__gptrget
      001746 FB               [12] 4466 	mov	r3,a
      001747 A3               [24] 4467 	inc	dptr
      001748 12r00r00         [24] 4468 	lcall	__gptrget
      00174B FC               [12] 4469 	mov	r4,a
      00174C C0 07            [24] 4470 	push	ar7
      00174E C0 06            [24] 4471 	push	ar6
      001750 C0 05            [24] 4472 	push	ar5
      001752 8A 82            [24] 4473 	mov	dpl,r2
      001754 8B 83            [24] 4474 	mov	dph,r3
      001756 8C F0            [24] 4475 	mov	b,r4
      001758 12r00r00         [24] 4476 	lcall	_stack_pop
      00175B AB 82            [24] 4477 	mov	r3,dpl
      00175D AC 83            [24] 4478 	mov	r4,dph
      00175F 15 81            [12] 4479 	dec	sp
      001761 15 81            [12] 4480 	dec	sp
      001763 15 81            [12] 4481 	dec	sp
      001765 EB               [12] 4482 	mov	a,r3
      001766 4C               [12] 4483 	orl	a,r4
      001767 70 63            [24] 4484 	jnz	00162$
                                   4485 ;	calc.c:227: (void)stack_push(ctx->ps, d0);
      001769 E5*00            [12] 4486 	mov	a,_bp
      00176B 24 0B            [12] 4487 	add	a,#0x0b
      00176D F8               [12] 4488 	mov	r0,a
      00176E 86 82            [24] 4489 	mov	dpl,@r0
      001770 08               [12] 4490 	inc	r0
      001771 86 83            [24] 4491 	mov	dph,@r0
      001773 08               [12] 4492 	inc	r0
      001774 86 F0            [24] 4493 	mov	b,@r0
      001776 12r00r00         [24] 4494 	lcall	__gptrget
      001779 FA               [12] 4495 	mov	r2,a
      00177A A3               [24] 4496 	inc	dptr
      00177B 12r00r00         [24] 4497 	lcall	__gptrget
      00177E FB               [12] 4498 	mov	r3,a
      00177F A3               [24] 4499 	inc	dptr
      001780 12r00r00         [24] 4500 	lcall	__gptrget
      001783 FC               [12] 4501 	mov	r4,a
      001784 E5*00            [12] 4502 	mov	a,_bp
      001786 24 15            [12] 4503 	add	a,#0x15
      001788 F8               [12] 4504 	mov	r0,a
      001789 E6               [12] 4505 	mov	a,@r0
      00178A C0 E0            [24] 4506 	push	acc
      00178C 08               [12] 4507 	inc	r0
      00178D E6               [12] 4508 	mov	a,@r0
      00178E C0 E0            [24] 4509 	push	acc
      001790 08               [12] 4510 	inc	r0
      001791 E6               [12] 4511 	mov	a,@r0
      001792 C0 E0            [24] 4512 	push	acc
      001794 08               [12] 4513 	inc	r0
      001795 E6               [12] 4514 	mov	a,@r0
      001796 C0 E0            [24] 4515 	push	acc
      001798 8A 82            [24] 4516 	mov	dpl,r2
      00179A 8B 83            [24] 4517 	mov	dph,r3
      00179C 8C F0            [24] 4518 	mov	b,r4
      00179E 12r00r00         [24] 4519 	lcall	_stack_push
      0017A1 E5 81            [12] 4520 	mov	a,sp
      0017A3 24 FC            [12] 4521 	add	a,#0xfc
      0017A5 F5 81            [12] 4522 	mov	sp,a
                                   4523 ;	calc.c:228: printstr("\r\nstack underflow\r\n");
      0017A7 7Fr44            [12] 4524 	mov	r7,#___str_10
      0017A9 7Es00            [12] 4525 	mov	r6,#(___str_10 >> 8)
      0017AB 7D 80            [12] 4526 	mov	r5,#0x80
                                   4527 ;	calc.c:51: return;
      0017AD                       4528 00433$:
                                   4529 ;	calc.c:49: for (; *s; s++) putchar(*s);
      0017AD 8F 82            [24] 4530 	mov	dpl,r7
      0017AF 8E 83            [24] 4531 	mov	dph,r6
      0017B1 8D F0            [24] 4532 	mov	b,r5
      0017B3 12r00r00         [24] 4533 	lcall	__gptrget
      0017B6 FC               [12] 4534 	mov	r4,a
      0017B7 70 03            [24] 4535 	jnz	01333$
      0017B9 02r2Ar46         [24] 4536 	ljmp	00249$
      0017BC                       4537 01333$:
      0017BC 7B 00            [12] 4538 	mov	r3,#0x00
      0017BE 8C 82            [24] 4539 	mov	dpl,r4
      0017C0 8B 83            [24] 4540 	mov	dph,r3
      0017C2 12r00r00         [24] 4541 	lcall	_putchar
      0017C5 0F               [12] 4542 	inc	r7
                                   4543 ;	calc.c:228: printstr("\r\nstack underflow\r\n");
      0017C6 BF 00 E4         [24] 4544 	cjne	r7,#0x00,00433$
      0017C9 0E               [12] 4545 	inc	r6
      0017CA 80 E1            [24] 4546 	sjmp	00433$
      0017CC                       4547 00162$:
                                   4548 ;	calc.c:230: d1 -= d0;
      0017CC E5*00            [12] 4549 	mov	a,_bp
      0017CE 24 19            [12] 4550 	add	a,#0x19
      0017D0 F8               [12] 4551 	mov	r0,a
      0017D1 E5*00            [12] 4552 	mov	a,_bp
      0017D3 24 15            [12] 4553 	add	a,#0x15
      0017D5 F9               [12] 4554 	mov	r1,a
      0017D6 E6               [12] 4555 	mov	a,@r0
      0017D7 C3               [12] 4556 	clr	c
      0017D8 97               [12] 4557 	subb	a,@r1
      0017D9 F6               [12] 4558 	mov	@r0,a
      0017DA 08               [12] 4559 	inc	r0
      0017DB E6               [12] 4560 	mov	a,@r0
      0017DC 09               [12] 4561 	inc	r1
      0017DD 97               [12] 4562 	subb	a,@r1
      0017DE F6               [12] 4563 	mov	@r0,a
      0017DF 08               [12] 4564 	inc	r0
      0017E0 E6               [12] 4565 	mov	a,@r0
      0017E1 09               [12] 4566 	inc	r1
      0017E2 97               [12] 4567 	subb	a,@r1
      0017E3 F6               [12] 4568 	mov	@r0,a
      0017E4 08               [12] 4569 	inc	r0
      0017E5 E6               [12] 4570 	mov	a,@r0
      0017E6 09               [12] 4571 	inc	r1
      0017E7 97               [12] 4572 	subb	a,@r1
      0017E8 F6               [12] 4573 	mov	@r0,a
                                   4574 ;	calc.c:231: (void)stack_push(ctx->ps, d1);
      0017E9 E5*00            [12] 4575 	mov	a,_bp
      0017EB 24 0B            [12] 4576 	add	a,#0x0b
      0017ED F8               [12] 4577 	mov	r0,a
      0017EE 86 82            [24] 4578 	mov	dpl,@r0
      0017F0 08               [12] 4579 	inc	r0
      0017F1 86 83            [24] 4580 	mov	dph,@r0
      0017F3 08               [12] 4581 	inc	r0
      0017F4 86 F0            [24] 4582 	mov	b,@r0
      0017F6 12r00r00         [24] 4583 	lcall	__gptrget
      0017F9 FA               [12] 4584 	mov	r2,a
      0017FA A3               [24] 4585 	inc	dptr
      0017FB 12r00r00         [24] 4586 	lcall	__gptrget
      0017FE FB               [12] 4587 	mov	r3,a
      0017FF A3               [24] 4588 	inc	dptr
      001800 12r00r00         [24] 4589 	lcall	__gptrget
      001803 FC               [12] 4590 	mov	r4,a
      001804 E5*00            [12] 4591 	mov	a,_bp
      001806 24 19            [12] 4592 	add	a,#0x19
      001808 F8               [12] 4593 	mov	r0,a
      001809 E6               [12] 4594 	mov	a,@r0
      00180A C0 E0            [24] 4595 	push	acc
      00180C 08               [12] 4596 	inc	r0
      00180D E6               [12] 4597 	mov	a,@r0
      00180E C0 E0            [24] 4598 	push	acc
      001810 08               [12] 4599 	inc	r0
      001811 E6               [12] 4600 	mov	a,@r0
      001812 C0 E0            [24] 4601 	push	acc
      001814 08               [12] 4602 	inc	r0
      001815 E6               [12] 4603 	mov	a,@r0
      001816 C0 E0            [24] 4604 	push	acc
      001818 8A 82            [24] 4605 	mov	dpl,r2
      00181A 8B 83            [24] 4606 	mov	dph,r3
      00181C 8C F0            [24] 4607 	mov	b,r4
      00181E 12r00r00         [24] 4608 	lcall	_stack_push
      001821 E5 81            [12] 4609 	mov	a,sp
      001823 24 FC            [12] 4610 	add	a,#0xfc
      001825 F5 81            [12] 4611 	mov	sp,a
                                   4612 ;	calc.c:233: break;
      001827 02r2Ar46         [24] 4613 	ljmp	00249$
                                   4614 ;	calc.c:234: case '*':
      00182A                       4615 00167$:
                                   4616 ;	calc.c:235: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      00182A E5*00            [12] 4617 	mov	a,_bp
      00182C 24 15            [12] 4618 	add	a,#0x15
      00182E FF               [12] 4619 	mov	r7,a
      00182F 7E 00            [12] 4620 	mov	r6,#0x00
      001831 7D 40            [12] 4621 	mov	r5,#0x40
      001833 E5*00            [12] 4622 	mov	a,_bp
      001835 24 12            [12] 4623 	add	a,#0x12
      001837 F8               [12] 4624 	mov	r0,a
      001838 E5*00            [12] 4625 	mov	a,_bp
      00183A 24 0B            [12] 4626 	add	a,#0x0b
      00183C F9               [12] 4627 	mov	r1,a
      00183D 74 11            [12] 4628 	mov	a,#0x11
      00183F 26               [12] 4629 	add	a,@r0
      001840 F7               [12] 4630 	mov	@r1,a
      001841 74 40            [12] 4631 	mov	a,#0x40
      001843 08               [12] 4632 	inc	r0
      001844 36               [12] 4633 	addc	a,@r0
      001845 09               [12] 4634 	inc	r1
      001846 F7               [12] 4635 	mov	@r1,a
      001847 08               [12] 4636 	inc	r0
      001848 09               [12] 4637 	inc	r1
      001849 E6               [12] 4638 	mov	a,@r0
      00184A F7               [12] 4639 	mov	@r1,a
      00184B E5*00            [12] 4640 	mov	a,_bp
      00184D 24 0B            [12] 4641 	add	a,#0x0b
      00184F F8               [12] 4642 	mov	r0,a
      001850 86 82            [24] 4643 	mov	dpl,@r0
      001852 08               [12] 4644 	inc	r0
      001853 86 83            [24] 4645 	mov	dph,@r0
      001855 08               [12] 4646 	inc	r0
      001856 86 F0            [24] 4647 	mov	b,@r0
      001858 12r00r00         [24] 4648 	lcall	__gptrget
      00185B FA               [12] 4649 	mov	r2,a
      00185C A3               [24] 4650 	inc	dptr
      00185D 12r00r00         [24] 4651 	lcall	__gptrget
      001860 FB               [12] 4652 	mov	r3,a
      001861 A3               [24] 4653 	inc	dptr
      001862 12r00r00         [24] 4654 	lcall	__gptrget
      001865 FC               [12] 4655 	mov	r4,a
      001866 C0 07            [24] 4656 	push	ar7
      001868 C0 06            [24] 4657 	push	ar6
      00186A C0 05            [24] 4658 	push	ar5
      00186C 8A 82            [24] 4659 	mov	dpl,r2
      00186E 8B 83            [24] 4660 	mov	dph,r3
      001870 8C F0            [24] 4661 	mov	b,r4
      001872 12r00r00         [24] 4662 	lcall	_stack_pop
      001875 AB 82            [24] 4663 	mov	r3,dpl
      001877 AC 83            [24] 4664 	mov	r4,dph
      001879 15 81            [12] 4665 	dec	sp
      00187B 15 81            [12] 4666 	dec	sp
      00187D 15 81            [12] 4667 	dec	sp
      00187F EB               [12] 4668 	mov	a,r3
      001880 4C               [12] 4669 	orl	a,r4
      001881 70 25            [24] 4670 	jnz	00172$
      001883 7Fr44            [12] 4671 	mov	r7,#___str_10
      001885 7Es00            [12] 4672 	mov	r6,#(___str_10 >> 8)
      001887 7D 80            [12] 4673 	mov	r5,#0x80
                                   4674 ;	calc.c:51: return;
      001889                       4675 00436$:
                                   4676 ;	calc.c:49: for (; *s; s++) putchar(*s);
      001889 8F 82            [24] 4677 	mov	dpl,r7
      00188B 8E 83            [24] 4678 	mov	dph,r6
      00188D 8D F0            [24] 4679 	mov	b,r5
      00188F 12r00r00         [24] 4680 	lcall	__gptrget
      001892 FC               [12] 4681 	mov	r4,a
      001893 70 03            [24] 4682 	jnz	01336$
      001895 02r2Ar46         [24] 4683 	ljmp	00249$
      001898                       4684 01336$:
      001898 7B 00            [12] 4685 	mov	r3,#0x00
      00189A 8C 82            [24] 4686 	mov	dpl,r4
      00189C 8B 83            [24] 4687 	mov	dph,r3
      00189E 12r00r00         [24] 4688 	lcall	_putchar
      0018A1 0F               [12] 4689 	inc	r7
                                   4690 ;	calc.c:235: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      0018A2 BF 00 E4         [24] 4691 	cjne	r7,#0x00,00436$
      0018A5 0E               [12] 4692 	inc	r6
      0018A6 80 E1            [24] 4693 	sjmp	00436$
      0018A8                       4694 00172$:
                                   4695 ;	calc.c:236: else if (!stack_pop(ctx->ps, &d1)) {
      0018A8 E5*00            [12] 4696 	mov	a,_bp
      0018AA 24 19            [12] 4697 	add	a,#0x19
      0018AC FF               [12] 4698 	mov	r7,a
      0018AD 7E 00            [12] 4699 	mov	r6,#0x00
      0018AF 7D 40            [12] 4700 	mov	r5,#0x40
      0018B1 E5*00            [12] 4701 	mov	a,_bp
      0018B3 24 0B            [12] 4702 	add	a,#0x0b
      0018B5 F8               [12] 4703 	mov	r0,a
      0018B6 86 82            [24] 4704 	mov	dpl,@r0
      0018B8 08               [12] 4705 	inc	r0
      0018B9 86 83            [24] 4706 	mov	dph,@r0
      0018BB 08               [12] 4707 	inc	r0
      0018BC 86 F0            [24] 4708 	mov	b,@r0
      0018BE 12r00r00         [24] 4709 	lcall	__gptrget
      0018C1 FA               [12] 4710 	mov	r2,a
      0018C2 A3               [24] 4711 	inc	dptr
      0018C3 12r00r00         [24] 4712 	lcall	__gptrget
      0018C6 FB               [12] 4713 	mov	r3,a
      0018C7 A3               [24] 4714 	inc	dptr
      0018C8 12r00r00         [24] 4715 	lcall	__gptrget
      0018CB FC               [12] 4716 	mov	r4,a
      0018CC C0 07            [24] 4717 	push	ar7
      0018CE C0 06            [24] 4718 	push	ar6
      0018D0 C0 05            [24] 4719 	push	ar5
      0018D2 8A 82            [24] 4720 	mov	dpl,r2
      0018D4 8B 83            [24] 4721 	mov	dph,r3
      0018D6 8C F0            [24] 4722 	mov	b,r4
      0018D8 12r00r00         [24] 4723 	lcall	_stack_pop
      0018DB AB 82            [24] 4724 	mov	r3,dpl
      0018DD AC 83            [24] 4725 	mov	r4,dph
      0018DF 15 81            [12] 4726 	dec	sp
      0018E1 15 81            [12] 4727 	dec	sp
      0018E3 15 81            [12] 4728 	dec	sp
      0018E5 EB               [12] 4729 	mov	a,r3
      0018E6 4C               [12] 4730 	orl	a,r4
      0018E7 70 63            [24] 4731 	jnz	00169$
                                   4732 ;	calc.c:237: (void)stack_push(ctx->ps, d0);
      0018E9 E5*00            [12] 4733 	mov	a,_bp
      0018EB 24 0B            [12] 4734 	add	a,#0x0b
      0018ED F8               [12] 4735 	mov	r0,a
      0018EE 86 82            [24] 4736 	mov	dpl,@r0
      0018F0 08               [12] 4737 	inc	r0
      0018F1 86 83            [24] 4738 	mov	dph,@r0
      0018F3 08               [12] 4739 	inc	r0
      0018F4 86 F0            [24] 4740 	mov	b,@r0
      0018F6 12r00r00         [24] 4741 	lcall	__gptrget
      0018F9 FA               [12] 4742 	mov	r2,a
      0018FA A3               [24] 4743 	inc	dptr
      0018FB 12r00r00         [24] 4744 	lcall	__gptrget
      0018FE FB               [12] 4745 	mov	r3,a
      0018FF A3               [24] 4746 	inc	dptr
      001900 12r00r00         [24] 4747 	lcall	__gptrget
      001903 FC               [12] 4748 	mov	r4,a
      001904 E5*00            [12] 4749 	mov	a,_bp
      001906 24 15            [12] 4750 	add	a,#0x15
      001908 F8               [12] 4751 	mov	r0,a
      001909 E6               [12] 4752 	mov	a,@r0
      00190A C0 E0            [24] 4753 	push	acc
      00190C 08               [12] 4754 	inc	r0
      00190D E6               [12] 4755 	mov	a,@r0
      00190E C0 E0            [24] 4756 	push	acc
      001910 08               [12] 4757 	inc	r0
      001911 E6               [12] 4758 	mov	a,@r0
      001912 C0 E0            [24] 4759 	push	acc
      001914 08               [12] 4760 	inc	r0
      001915 E6               [12] 4761 	mov	a,@r0
      001916 C0 E0            [24] 4762 	push	acc
      001918 8A 82            [24] 4763 	mov	dpl,r2
      00191A 8B 83            [24] 4764 	mov	dph,r3
      00191C 8C F0            [24] 4765 	mov	b,r4
      00191E 12r00r00         [24] 4766 	lcall	_stack_push
      001921 E5 81            [12] 4767 	mov	a,sp
      001923 24 FC            [12] 4768 	add	a,#0xfc
      001925 F5 81            [12] 4769 	mov	sp,a
                                   4770 ;	calc.c:238: printstr("\r\nstack underflow\r\n");
      001927 7Fr44            [12] 4771 	mov	r7,#___str_10
      001929 7Es00            [12] 4772 	mov	r6,#(___str_10 >> 8)
      00192B 7D 80            [12] 4773 	mov	r5,#0x80
                                   4774 ;	calc.c:51: return;
      00192D                       4775 00439$:
                                   4776 ;	calc.c:49: for (; *s; s++) putchar(*s);
      00192D 8F 82            [24] 4777 	mov	dpl,r7
      00192F 8E 83            [24] 4778 	mov	dph,r6
      001931 8D F0            [24] 4779 	mov	b,r5
      001933 12r00r00         [24] 4780 	lcall	__gptrget
      001936 FC               [12] 4781 	mov	r4,a
      001937 70 03            [24] 4782 	jnz	01339$
      001939 02r2Ar46         [24] 4783 	ljmp	00249$
      00193C                       4784 01339$:
      00193C 7B 00            [12] 4785 	mov	r3,#0x00
      00193E 8C 82            [24] 4786 	mov	dpl,r4
      001940 8B 83            [24] 4787 	mov	dph,r3
      001942 12r00r00         [24] 4788 	lcall	_putchar
      001945 0F               [12] 4789 	inc	r7
                                   4790 ;	calc.c:238: printstr("\r\nstack underflow\r\n");
      001946 BF 00 E4         [24] 4791 	cjne	r7,#0x00,00439$
      001949 0E               [12] 4792 	inc	r6
      00194A 80 E1            [24] 4793 	sjmp	00439$
      00194C                       4794 00169$:
                                   4795 ;	calc.c:240: d1 *= d0;
      00194C E5*00            [12] 4796 	mov	a,_bp
      00194E 24 15            [12] 4797 	add	a,#0x15
      001950 F8               [12] 4798 	mov	r0,a
      001951 E6               [12] 4799 	mov	a,@r0
      001952 C0 E0            [24] 4800 	push	acc
      001954 08               [12] 4801 	inc	r0
      001955 E6               [12] 4802 	mov	a,@r0
      001956 C0 E0            [24] 4803 	push	acc
      001958 08               [12] 4804 	inc	r0
      001959 E6               [12] 4805 	mov	a,@r0
      00195A C0 E0            [24] 4806 	push	acc
      00195C 08               [12] 4807 	inc	r0
      00195D E6               [12] 4808 	mov	a,@r0
      00195E C0 E0            [24] 4809 	push	acc
      001960 E5*00            [12] 4810 	mov	a,_bp
      001962 24 19            [12] 4811 	add	a,#0x19
      001964 F8               [12] 4812 	mov	r0,a
      001965 86 82            [24] 4813 	mov	dpl,@r0
      001967 08               [12] 4814 	inc	r0
      001968 86 83            [24] 4815 	mov	dph,@r0
      00196A 08               [12] 4816 	inc	r0
      00196B 86 F0            [24] 4817 	mov	b,@r0
      00196D 08               [12] 4818 	inc	r0
      00196E E6               [12] 4819 	mov	a,@r0
      00196F 12r00r00         [24] 4820 	lcall	__mullong
      001972 AF 82            [24] 4821 	mov	r7,dpl
      001974 AE 83            [24] 4822 	mov	r6,dph
      001976 AD F0            [24] 4823 	mov	r5,b
      001978 FC               [12] 4824 	mov	r4,a
      001979 E5 81            [12] 4825 	mov	a,sp
      00197B 24 FC            [12] 4826 	add	a,#0xfc
      00197D F5 81            [12] 4827 	mov	sp,a
      00197F E5*00            [12] 4828 	mov	a,_bp
      001981 24 19            [12] 4829 	add	a,#0x19
      001983 F8               [12] 4830 	mov	r0,a
      001984 A6 07            [24] 4831 	mov	@r0,ar7
      001986 08               [12] 4832 	inc	r0
      001987 A6 06            [24] 4833 	mov	@r0,ar6
      001989 08               [12] 4834 	inc	r0
      00198A A6 05            [24] 4835 	mov	@r0,ar5
      00198C 08               [12] 4836 	inc	r0
      00198D A6 04            [24] 4837 	mov	@r0,ar4
                                   4838 ;	calc.c:241: (void)stack_push(ctx->ps, d1);
      00198F E5*00            [12] 4839 	mov	a,_bp
      001991 24 0B            [12] 4840 	add	a,#0x0b
      001993 F8               [12] 4841 	mov	r0,a
      001994 86 82            [24] 4842 	mov	dpl,@r0
      001996 08               [12] 4843 	inc	r0
      001997 86 83            [24] 4844 	mov	dph,@r0
      001999 08               [12] 4845 	inc	r0
      00199A 86 F0            [24] 4846 	mov	b,@r0
      00199C 12r00r00         [24] 4847 	lcall	__gptrget
      00199F FA               [12] 4848 	mov	r2,a
      0019A0 A3               [24] 4849 	inc	dptr
      0019A1 12r00r00         [24] 4850 	lcall	__gptrget
      0019A4 FB               [12] 4851 	mov	r3,a
      0019A5 A3               [24] 4852 	inc	dptr
      0019A6 12r00r00         [24] 4853 	lcall	__gptrget
      0019A9 FC               [12] 4854 	mov	r4,a
      0019AA E5*00            [12] 4855 	mov	a,_bp
      0019AC 24 19            [12] 4856 	add	a,#0x19
      0019AE F8               [12] 4857 	mov	r0,a
      0019AF E6               [12] 4858 	mov	a,@r0
      0019B0 C0 E0            [24] 4859 	push	acc
      0019B2 08               [12] 4860 	inc	r0
      0019B3 E6               [12] 4861 	mov	a,@r0
      0019B4 C0 E0            [24] 4862 	push	acc
      0019B6 08               [12] 4863 	inc	r0
      0019B7 E6               [12] 4864 	mov	a,@r0
      0019B8 C0 E0            [24] 4865 	push	acc
      0019BA 08               [12] 4866 	inc	r0
      0019BB E6               [12] 4867 	mov	a,@r0
      0019BC C0 E0            [24] 4868 	push	acc
      0019BE 8A 82            [24] 4869 	mov	dpl,r2
      0019C0 8B 83            [24] 4870 	mov	dph,r3
      0019C2 8C F0            [24] 4871 	mov	b,r4
      0019C4 12r00r00         [24] 4872 	lcall	_stack_push
      0019C7 E5 81            [12] 4873 	mov	a,sp
      0019C9 24 FC            [12] 4874 	add	a,#0xfc
      0019CB F5 81            [12] 4875 	mov	sp,a
                                   4876 ;	calc.c:243: break;
      0019CD 02r2Ar46         [24] 4877 	ljmp	00249$
                                   4878 ;	calc.c:245: case '\\':
      0019D0                       4879 00175$:
                                   4880 ;	calc.c:246: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      0019D0 C0 05            [24] 4881 	push	ar5
      0019D2 C0 06            [24] 4882 	push	ar6
      0019D4 C0 07            [24] 4883 	push	ar7
      0019D6 E5*00            [12] 4884 	mov	a,_bp
      0019D8 24 15            [12] 4885 	add	a,#0x15
      0019DA FC               [12] 4886 	mov	r4,a
      0019DB 7B 00            [12] 4887 	mov	r3,#0x00
      0019DD 7A 40            [12] 4888 	mov	r2,#0x40
      0019DF E5*00            [12] 4889 	mov	a,_bp
      0019E1 24 12            [12] 4890 	add	a,#0x12
      0019E3 F8               [12] 4891 	mov	r0,a
      0019E4 E5*00            [12] 4892 	mov	a,_bp
      0019E6 24 0B            [12] 4893 	add	a,#0x0b
      0019E8 F9               [12] 4894 	mov	r1,a
      0019E9 74 11            [12] 4895 	mov	a,#0x11
      0019EB 26               [12] 4896 	add	a,@r0
      0019EC F7               [12] 4897 	mov	@r1,a
      0019ED 74 40            [12] 4898 	mov	a,#0x40
      0019EF 08               [12] 4899 	inc	r0
      0019F0 36               [12] 4900 	addc	a,@r0
      0019F1 09               [12] 4901 	inc	r1
      0019F2 F7               [12] 4902 	mov	@r1,a
      0019F3 08               [12] 4903 	inc	r0
      0019F4 09               [12] 4904 	inc	r1
      0019F5 E6               [12] 4905 	mov	a,@r0
      0019F6 F7               [12] 4906 	mov	@r1,a
      0019F7 E5*00            [12] 4907 	mov	a,_bp
      0019F9 24 0B            [12] 4908 	add	a,#0x0b
      0019FB F8               [12] 4909 	mov	r0,a
      0019FC 86 82            [24] 4910 	mov	dpl,@r0
      0019FE 08               [12] 4911 	inc	r0
      0019FF 86 83            [24] 4912 	mov	dph,@r0
      001A01 08               [12] 4913 	inc	r0
      001A02 86 F0            [24] 4914 	mov	b,@r0
      001A04 12r00r00         [24] 4915 	lcall	__gptrget
      001A07 FD               [12] 4916 	mov	r5,a
      001A08 A3               [24] 4917 	inc	dptr
      001A09 12r00r00         [24] 4918 	lcall	__gptrget
      001A0C FE               [12] 4919 	mov	r6,a
      001A0D A3               [24] 4920 	inc	dptr
      001A0E 12r00r00         [24] 4921 	lcall	__gptrget
      001A11 FF               [12] 4922 	mov	r7,a
      001A12 C0 05            [24] 4923 	push	ar5
      001A14 C0 04            [24] 4924 	push	ar4
      001A16 C0 03            [24] 4925 	push	ar3
      001A18 C0 02            [24] 4926 	push	ar2
      001A1A 8D 82            [24] 4927 	mov	dpl,r5
      001A1C 8E 83            [24] 4928 	mov	dph,r6
      001A1E 8F F0            [24] 4929 	mov	b,r7
      001A20 12r00r00         [24] 4930 	lcall	_stack_pop
      001A23 AE 82            [24] 4931 	mov	r6,dpl
      001A25 AF 83            [24] 4932 	mov	r7,dph
      001A27 15 81            [12] 4933 	dec	sp
      001A29 15 81            [12] 4934 	dec	sp
      001A2B 15 81            [12] 4935 	dec	sp
      001A2D D0 05            [24] 4936 	pop	ar5
      001A2F EE               [12] 4937 	mov	a,r6
      001A30 4F               [12] 4938 	orl	a,r7
      001A31 D0 07            [24] 4939 	pop	ar7
      001A33 D0 06            [24] 4940 	pop	ar6
      001A35 D0 05            [24] 4941 	pop	ar5
      001A37 70 25            [24] 4942 	jnz	00186$
      001A39 7Fr44            [12] 4943 	mov	r7,#___str_10
      001A3B 7Es00            [12] 4944 	mov	r6,#(___str_10 >> 8)
      001A3D 7D 80            [12] 4945 	mov	r5,#0x80
                                   4946 ;	calc.c:51: return;
      001A3F                       4947 00442$:
                                   4948 ;	calc.c:49: for (; *s; s++) putchar(*s);
      001A3F 8F 82            [24] 4949 	mov	dpl,r7
      001A41 8E 83            [24] 4950 	mov	dph,r6
      001A43 8D F0            [24] 4951 	mov	b,r5
      001A45 12r00r00         [24] 4952 	lcall	__gptrget
      001A48 FC               [12] 4953 	mov	r4,a
      001A49 70 03            [24] 4954 	jnz	01342$
      001A4B 02r2Ar46         [24] 4955 	ljmp	00249$
      001A4E                       4956 01342$:
      001A4E 7B 00            [12] 4957 	mov	r3,#0x00
      001A50 8C 82            [24] 4958 	mov	dpl,r4
      001A52 8B 83            [24] 4959 	mov	dph,r3
      001A54 12r00r00         [24] 4960 	lcall	_putchar
      001A57 0F               [12] 4961 	inc	r7
                                   4962 ;	calc.c:246: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      001A58 BF 00 E4         [24] 4963 	cjne	r7,#0x00,00442$
      001A5B 0E               [12] 4964 	inc	r6
      001A5C 80 E1            [24] 4965 	sjmp	00442$
      001A5E                       4966 00186$:
                                   4967 ;	calc.c:247: else if (!stack_pop(ctx->ps, &d1)) {
      001A5E C0 05            [24] 4968 	push	ar5
      001A60 C0 06            [24] 4969 	push	ar6
      001A62 C0 07            [24] 4970 	push	ar7
      001A64 E5*00            [12] 4971 	mov	a,_bp
      001A66 24 19            [12] 4972 	add	a,#0x19
      001A68 FC               [12] 4973 	mov	r4,a
      001A69 7B 00            [12] 4974 	mov	r3,#0x00
      001A6B 7A 40            [12] 4975 	mov	r2,#0x40
      001A6D E5*00            [12] 4976 	mov	a,_bp
      001A6F 24 0B            [12] 4977 	add	a,#0x0b
      001A71 F8               [12] 4978 	mov	r0,a
      001A72 86 82            [24] 4979 	mov	dpl,@r0
      001A74 08               [12] 4980 	inc	r0
      001A75 86 83            [24] 4981 	mov	dph,@r0
      001A77 08               [12] 4982 	inc	r0
      001A78 86 F0            [24] 4983 	mov	b,@r0
      001A7A 12r00r00         [24] 4984 	lcall	__gptrget
      001A7D FD               [12] 4985 	mov	r5,a
      001A7E A3               [24] 4986 	inc	dptr
      001A7F 12r00r00         [24] 4987 	lcall	__gptrget
      001A82 FE               [12] 4988 	mov	r6,a
      001A83 A3               [24] 4989 	inc	dptr
      001A84 12r00r00         [24] 4990 	lcall	__gptrget
      001A87 FF               [12] 4991 	mov	r7,a
      001A88 C0 05            [24] 4992 	push	ar5
      001A8A C0 04            [24] 4993 	push	ar4
      001A8C C0 03            [24] 4994 	push	ar3
      001A8E C0 02            [24] 4995 	push	ar2
      001A90 8D 82            [24] 4996 	mov	dpl,r5
      001A92 8E 83            [24] 4997 	mov	dph,r6
      001A94 8F F0            [24] 4998 	mov	b,r7
      001A96 12r00r00         [24] 4999 	lcall	_stack_pop
      001A99 AE 82            [24] 5000 	mov	r6,dpl
      001A9B AF 83            [24] 5001 	mov	r7,dph
      001A9D 15 81            [12] 5002 	dec	sp
      001A9F 15 81            [12] 5003 	dec	sp
      001AA1 15 81            [12] 5004 	dec	sp
      001AA3 D0 05            [24] 5005 	pop	ar5
      001AA5 EE               [12] 5006 	mov	a,r6
      001AA6 4F               [12] 5007 	orl	a,r7
      001AA7 D0 07            [24] 5008 	pop	ar7
      001AA9 D0 06            [24] 5009 	pop	ar6
      001AAB D0 05            [24] 5010 	pop	ar5
      001AAD 70 63            [24] 5011 	jnz	00183$
                                   5012 ;	calc.c:248: (void)stack_push(ctx->ps, d0);
      001AAF E5*00            [12] 5013 	mov	a,_bp
      001AB1 24 0B            [12] 5014 	add	a,#0x0b
      001AB3 F8               [12] 5015 	mov	r0,a
      001AB4 86 82            [24] 5016 	mov	dpl,@r0
      001AB6 08               [12] 5017 	inc	r0
      001AB7 86 83            [24] 5018 	mov	dph,@r0
      001AB9 08               [12] 5019 	inc	r0
      001ABA 86 F0            [24] 5020 	mov	b,@r0
      001ABC 12r00r00         [24] 5021 	lcall	__gptrget
      001ABF FA               [12] 5022 	mov	r2,a
      001AC0 A3               [24] 5023 	inc	dptr
      001AC1 12r00r00         [24] 5024 	lcall	__gptrget
      001AC4 FB               [12] 5025 	mov	r3,a
      001AC5 A3               [24] 5026 	inc	dptr
      001AC6 12r00r00         [24] 5027 	lcall	__gptrget
      001AC9 FC               [12] 5028 	mov	r4,a
      001ACA E5*00            [12] 5029 	mov	a,_bp
      001ACC 24 15            [12] 5030 	add	a,#0x15
      001ACE F8               [12] 5031 	mov	r0,a
      001ACF E6               [12] 5032 	mov	a,@r0
      001AD0 C0 E0            [24] 5033 	push	acc
      001AD2 08               [12] 5034 	inc	r0
      001AD3 E6               [12] 5035 	mov	a,@r0
      001AD4 C0 E0            [24] 5036 	push	acc
      001AD6 08               [12] 5037 	inc	r0
      001AD7 E6               [12] 5038 	mov	a,@r0
      001AD8 C0 E0            [24] 5039 	push	acc
      001ADA 08               [12] 5040 	inc	r0
      001ADB E6               [12] 5041 	mov	a,@r0
      001ADC C0 E0            [24] 5042 	push	acc
      001ADE 8A 82            [24] 5043 	mov	dpl,r2
      001AE0 8B 83            [24] 5044 	mov	dph,r3
      001AE2 8C F0            [24] 5045 	mov	b,r4
      001AE4 12r00r00         [24] 5046 	lcall	_stack_push
      001AE7 E5 81            [12] 5047 	mov	a,sp
      001AE9 24 FC            [12] 5048 	add	a,#0xfc
      001AEB F5 81            [12] 5049 	mov	sp,a
                                   5050 ;	calc.c:249: printstr("\r\nstack underflow\r\n");
      001AED 7Fr44            [12] 5051 	mov	r7,#___str_10
      001AEF 7Es00            [12] 5052 	mov	r6,#(___str_10 >> 8)
      001AF1 7D 80            [12] 5053 	mov	r5,#0x80
                                   5054 ;	calc.c:51: return;
      001AF3                       5055 00445$:
                                   5056 ;	calc.c:49: for (; *s; s++) putchar(*s);
      001AF3 8F 82            [24] 5057 	mov	dpl,r7
      001AF5 8E 83            [24] 5058 	mov	dph,r6
      001AF7 8D F0            [24] 5059 	mov	b,r5
      001AF9 12r00r00         [24] 5060 	lcall	__gptrget
      001AFC FC               [12] 5061 	mov	r4,a
      001AFD 70 03            [24] 5062 	jnz	01345$
      001AFF 02r2Ar46         [24] 5063 	ljmp	00249$
      001B02                       5064 01345$:
      001B02 7B 00            [12] 5065 	mov	r3,#0x00
      001B04 8C 82            [24] 5066 	mov	dpl,r4
      001B06 8B 83            [24] 5067 	mov	dph,r3
      001B08 12r00r00         [24] 5068 	lcall	_putchar
      001B0B 0F               [12] 5069 	inc	r7
                                   5070 ;	calc.c:249: printstr("\r\nstack underflow\r\n");
      001B0C BF 00 E4         [24] 5071 	cjne	r7,#0x00,00445$
      001B0F 0E               [12] 5072 	inc	r6
      001B10 80 E1            [24] 5073 	sjmp	00445$
      001B12                       5074 00183$:
                                   5075 ;	calc.c:250: } else if (!d0) {
      001B12 E5*00            [12] 5076 	mov	a,_bp
      001B14 24 15            [12] 5077 	add	a,#0x15
      001B16 F8               [12] 5078 	mov	r0,a
      001B17 E6               [12] 5079 	mov	a,@r0
      001B18 08               [12] 5080 	inc	r0
      001B19 46               [12] 5081 	orl	a,@r0
      001B1A 08               [12] 5082 	inc	r0
      001B1B 46               [12] 5083 	orl	a,@r0
      001B1C 08               [12] 5084 	inc	r0
      001B1D 46               [12] 5085 	orl	a,@r0
      001B1E 60 03            [24] 5086 	jz	01347$
      001B20 02r1BrC4         [24] 5087 	ljmp	00180$
      001B23                       5088 01347$:
                                   5089 ;	calc.c:251: (void)stack_push(ctx->ps, d1);
      001B23 E5*00            [12] 5090 	mov	a,_bp
      001B25 24 0B            [12] 5091 	add	a,#0x0b
      001B27 F8               [12] 5092 	mov	r0,a
      001B28 86 82            [24] 5093 	mov	dpl,@r0
      001B2A 08               [12] 5094 	inc	r0
      001B2B 86 83            [24] 5095 	mov	dph,@r0
      001B2D 08               [12] 5096 	inc	r0
      001B2E 86 F0            [24] 5097 	mov	b,@r0
      001B30 12r00r00         [24] 5098 	lcall	__gptrget
      001B33 FA               [12] 5099 	mov	r2,a
      001B34 A3               [24] 5100 	inc	dptr
      001B35 12r00r00         [24] 5101 	lcall	__gptrget
      001B38 FB               [12] 5102 	mov	r3,a
      001B39 A3               [24] 5103 	inc	dptr
      001B3A 12r00r00         [24] 5104 	lcall	__gptrget
      001B3D FC               [12] 5105 	mov	r4,a
      001B3E E5*00            [12] 5106 	mov	a,_bp
      001B40 24 19            [12] 5107 	add	a,#0x19
      001B42 F8               [12] 5108 	mov	r0,a
      001B43 E6               [12] 5109 	mov	a,@r0
      001B44 C0 E0            [24] 5110 	push	acc
      001B46 08               [12] 5111 	inc	r0
      001B47 E6               [12] 5112 	mov	a,@r0
      001B48 C0 E0            [24] 5113 	push	acc
      001B4A 08               [12] 5114 	inc	r0
      001B4B E6               [12] 5115 	mov	a,@r0
      001B4C C0 E0            [24] 5116 	push	acc
      001B4E 08               [12] 5117 	inc	r0
      001B4F E6               [12] 5118 	mov	a,@r0
      001B50 C0 E0            [24] 5119 	push	acc
      001B52 8A 82            [24] 5120 	mov	dpl,r2
      001B54 8B 83            [24] 5121 	mov	dph,r3
      001B56 8C F0            [24] 5122 	mov	b,r4
      001B58 12r00r00         [24] 5123 	lcall	_stack_push
      001B5B E5 81            [12] 5124 	mov	a,sp
      001B5D 24 FC            [12] 5125 	add	a,#0xfc
      001B5F F5 81            [12] 5126 	mov	sp,a
                                   5127 ;	calc.c:252: (void)stack_push(ctx->ps, d0);			
      001B61 E5*00            [12] 5128 	mov	a,_bp
      001B63 24 0B            [12] 5129 	add	a,#0x0b
      001B65 F8               [12] 5130 	mov	r0,a
      001B66 86 82            [24] 5131 	mov	dpl,@r0
      001B68 08               [12] 5132 	inc	r0
      001B69 86 83            [24] 5133 	mov	dph,@r0
      001B6B 08               [12] 5134 	inc	r0
      001B6C 86 F0            [24] 5135 	mov	b,@r0
      001B6E 12r00r00         [24] 5136 	lcall	__gptrget
      001B71 FA               [12] 5137 	mov	r2,a
      001B72 A3               [24] 5138 	inc	dptr
      001B73 12r00r00         [24] 5139 	lcall	__gptrget
      001B76 FB               [12] 5140 	mov	r3,a
      001B77 A3               [24] 5141 	inc	dptr
      001B78 12r00r00         [24] 5142 	lcall	__gptrget
      001B7B FC               [12] 5143 	mov	r4,a
      001B7C E5*00            [12] 5144 	mov	a,_bp
      001B7E 24 15            [12] 5145 	add	a,#0x15
      001B80 F8               [12] 5146 	mov	r0,a
      001B81 E6               [12] 5147 	mov	a,@r0
      001B82 C0 E0            [24] 5148 	push	acc
      001B84 08               [12] 5149 	inc	r0
      001B85 E6               [12] 5150 	mov	a,@r0
      001B86 C0 E0            [24] 5151 	push	acc
      001B88 08               [12] 5152 	inc	r0
      001B89 E6               [12] 5153 	mov	a,@r0
      001B8A C0 E0            [24] 5154 	push	acc
      001B8C 08               [12] 5155 	inc	r0
      001B8D E6               [12] 5156 	mov	a,@r0
      001B8E C0 E0            [24] 5157 	push	acc
      001B90 8A 82            [24] 5158 	mov	dpl,r2
      001B92 8B 83            [24] 5159 	mov	dph,r3
      001B94 8C F0            [24] 5160 	mov	b,r4
      001B96 12r00r00         [24] 5161 	lcall	_stack_push
      001B99 E5 81            [12] 5162 	mov	a,sp
      001B9B 24 FC            [12] 5163 	add	a,#0xfc
      001B9D F5 81            [12] 5164 	mov	sp,a
                                   5165 ;	calc.c:253: printstr("\r\ndivision by zero\r\n");
      001B9F 7FrA6            [12] 5166 	mov	r7,#___str_14
      001BA1 7Es00            [12] 5167 	mov	r6,#(___str_14 >> 8)
      001BA3 7D 80            [12] 5168 	mov	r5,#0x80
                                   5169 ;	calc.c:51: return;
      001BA5                       5170 00448$:
                                   5171 ;	calc.c:49: for (; *s; s++) putchar(*s);
      001BA5 8F 82            [24] 5172 	mov	dpl,r7
      001BA7 8E 83            [24] 5173 	mov	dph,r6
      001BA9 8D F0            [24] 5174 	mov	b,r5
      001BAB 12r00r00         [24] 5175 	lcall	__gptrget
      001BAE FC               [12] 5176 	mov	r4,a
      001BAF 70 03            [24] 5177 	jnz	01348$
      001BB1 02r2Ar46         [24] 5178 	ljmp	00249$
      001BB4                       5179 01348$:
      001BB4 7B 00            [12] 5180 	mov	r3,#0x00
      001BB6 8C 82            [24] 5181 	mov	dpl,r4
      001BB8 8B 83            [24] 5182 	mov	dph,r3
      001BBA 12r00r00         [24] 5183 	lcall	_putchar
      001BBD 0F               [12] 5184 	inc	r7
                                   5185 ;	calc.c:253: printstr("\r\ndivision by zero\r\n");
      001BBE BF 00 E4         [24] 5186 	cjne	r7,#0x00,00448$
      001BC1 0E               [12] 5187 	inc	r6
      001BC2 80 E1            [24] 5188 	sjmp	00448$
      001BC4                       5189 00180$:
                                   5190 ;	calc.c:255: if (ctx->digit[0] == '/') d1 /= d0;
      001BC4 8D 82            [24] 5191 	mov	dpl,r5
      001BC6 8E 83            [24] 5192 	mov	dph,r6
      001BC8 8F F0            [24] 5193 	mov	b,r7
      001BCA 12r00r00         [24] 5194 	lcall	__gptrget
      001BCD FC               [12] 5195 	mov	r4,a
      001BCE BC 2F 45         [24] 5196 	cjne	r4,#0x2f,00177$
      001BD1 E5*00            [12] 5197 	mov	a,_bp
      001BD3 24 15            [12] 5198 	add	a,#0x15
      001BD5 F8               [12] 5199 	mov	r0,a
      001BD6 E6               [12] 5200 	mov	a,@r0
      001BD7 C0 E0            [24] 5201 	push	acc
      001BD9 08               [12] 5202 	inc	r0
      001BDA E6               [12] 5203 	mov	a,@r0
      001BDB C0 E0            [24] 5204 	push	acc
      001BDD 08               [12] 5205 	inc	r0
      001BDE E6               [12] 5206 	mov	a,@r0
      001BDF C0 E0            [24] 5207 	push	acc
      001BE1 08               [12] 5208 	inc	r0
      001BE2 E6               [12] 5209 	mov	a,@r0
      001BE3 C0 E0            [24] 5210 	push	acc
      001BE5 E5*00            [12] 5211 	mov	a,_bp
      001BE7 24 19            [12] 5212 	add	a,#0x19
      001BE9 F8               [12] 5213 	mov	r0,a
      001BEA 86 82            [24] 5214 	mov	dpl,@r0
      001BEC 08               [12] 5215 	inc	r0
      001BED 86 83            [24] 5216 	mov	dph,@r0
      001BEF 08               [12] 5217 	inc	r0
      001BF0 86 F0            [24] 5218 	mov	b,@r0
      001BF2 08               [12] 5219 	inc	r0
      001BF3 E6               [12] 5220 	mov	a,@r0
      001BF4 12r00r00         [24] 5221 	lcall	__divslong
      001BF7 AF 82            [24] 5222 	mov	r7,dpl
      001BF9 AE 83            [24] 5223 	mov	r6,dph
      001BFB AD F0            [24] 5224 	mov	r5,b
      001BFD FC               [12] 5225 	mov	r4,a
      001BFE E5 81            [12] 5226 	mov	a,sp
      001C00 24 FC            [12] 5227 	add	a,#0xfc
      001C02 F5 81            [12] 5228 	mov	sp,a
      001C04 E5*00            [12] 5229 	mov	a,_bp
      001C06 24 19            [12] 5230 	add	a,#0x19
      001C08 F8               [12] 5231 	mov	r0,a
      001C09 A6 07            [24] 5232 	mov	@r0,ar7
      001C0B 08               [12] 5233 	inc	r0
      001C0C A6 06            [24] 5234 	mov	@r0,ar6
      001C0E 08               [12] 5235 	inc	r0
      001C0F A6 05            [24] 5236 	mov	@r0,ar5
      001C11 08               [12] 5237 	inc	r0
      001C12 A6 04            [24] 5238 	mov	@r0,ar4
      001C14 80 63            [24] 5239 	sjmp	00178$
      001C16                       5240 00177$:
                                   5241 ;	calc.c:256: else d1 = (unsigned long)d1 / (unsigned long)d0;
      001C16 E5*00            [12] 5242 	mov	a,_bp
      001C18 24 19            [12] 5243 	add	a,#0x19
      001C1A F8               [12] 5244 	mov	r0,a
      001C1B 86 07            [24] 5245 	mov	ar7,@r0
      001C1D 08               [12] 5246 	inc	r0
      001C1E 86 06            [24] 5247 	mov	ar6,@r0
      001C20 08               [12] 5248 	inc	r0
      001C21 86 05            [24] 5249 	mov	ar5,@r0
      001C23 08               [12] 5250 	inc	r0
      001C24 86 04            [24] 5251 	mov	ar4,@r0
      001C26 E5*00            [12] 5252 	mov	a,_bp
      001C28 24 15            [12] 5253 	add	a,#0x15
      001C2A F8               [12] 5254 	mov	r0,a
      001C2B E5*00            [12] 5255 	mov	a,_bp
      001C2D 24 0E            [12] 5256 	add	a,#0x0e
      001C2F F9               [12] 5257 	mov	r1,a
      001C30 E6               [12] 5258 	mov	a,@r0
      001C31 F7               [12] 5259 	mov	@r1,a
      001C32 08               [12] 5260 	inc	r0
      001C33 09               [12] 5261 	inc	r1
      001C34 E6               [12] 5262 	mov	a,@r0
      001C35 F7               [12] 5263 	mov	@r1,a
      001C36 08               [12] 5264 	inc	r0
      001C37 09               [12] 5265 	inc	r1
      001C38 E6               [12] 5266 	mov	a,@r0
      001C39 F7               [12] 5267 	mov	@r1,a
      001C3A 08               [12] 5268 	inc	r0
      001C3B 09               [12] 5269 	inc	r1
      001C3C E6               [12] 5270 	mov	a,@r0
      001C3D F7               [12] 5271 	mov	@r1,a
      001C3E E5*00            [12] 5272 	mov	a,_bp
      001C40 24 0E            [12] 5273 	add	a,#0x0e
      001C42 F8               [12] 5274 	mov	r0,a
      001C43 E6               [12] 5275 	mov	a,@r0
      001C44 C0 E0            [24] 5276 	push	acc
      001C46 08               [12] 5277 	inc	r0
      001C47 E6               [12] 5278 	mov	a,@r0
      001C48 C0 E0            [24] 5279 	push	acc
      001C4A 08               [12] 5280 	inc	r0
      001C4B E6               [12] 5281 	mov	a,@r0
      001C4C C0 E0            [24] 5282 	push	acc
      001C4E 08               [12] 5283 	inc	r0
      001C4F E6               [12] 5284 	mov	a,@r0
      001C50 C0 E0            [24] 5285 	push	acc
      001C52 8F 82            [24] 5286 	mov	dpl,r7
      001C54 8E 83            [24] 5287 	mov	dph,r6
      001C56 8D F0            [24] 5288 	mov	b,r5
      001C58 EC               [12] 5289 	mov	a,r4
      001C59 12r00r00         [24] 5290 	lcall	__divulong
      001C5C AF 82            [24] 5291 	mov	r7,dpl
      001C5E AE 83            [24] 5292 	mov	r6,dph
      001C60 AD F0            [24] 5293 	mov	r5,b
      001C62 FC               [12] 5294 	mov	r4,a
      001C63 E5 81            [12] 5295 	mov	a,sp
      001C65 24 FC            [12] 5296 	add	a,#0xfc
      001C67 F5 81            [12] 5297 	mov	sp,a
      001C69 E5*00            [12] 5298 	mov	a,_bp
      001C6B 24 19            [12] 5299 	add	a,#0x19
      001C6D F8               [12] 5300 	mov	r0,a
      001C6E A6 07            [24] 5301 	mov	@r0,ar7
      001C70 08               [12] 5302 	inc	r0
      001C71 A6 06            [24] 5303 	mov	@r0,ar6
      001C73 08               [12] 5304 	inc	r0
      001C74 A6 05            [24] 5305 	mov	@r0,ar5
      001C76 08               [12] 5306 	inc	r0
      001C77 A6 04            [24] 5307 	mov	@r0,ar4
      001C79                       5308 00178$:
                                   5309 ;	calc.c:257: (void)stack_push(ctx->ps, d1);
      001C79 E5*00            [12] 5310 	mov	a,_bp
      001C7B 24 0B            [12] 5311 	add	a,#0x0b
      001C7D F8               [12] 5312 	mov	r0,a
      001C7E 86 82            [24] 5313 	mov	dpl,@r0
      001C80 08               [12] 5314 	inc	r0
      001C81 86 83            [24] 5315 	mov	dph,@r0
      001C83 08               [12] 5316 	inc	r0
      001C84 86 F0            [24] 5317 	mov	b,@r0
      001C86 12r00r00         [24] 5318 	lcall	__gptrget
      001C89 FA               [12] 5319 	mov	r2,a
      001C8A A3               [24] 5320 	inc	dptr
      001C8B 12r00r00         [24] 5321 	lcall	__gptrget
      001C8E FB               [12] 5322 	mov	r3,a
      001C8F A3               [24] 5323 	inc	dptr
      001C90 12r00r00         [24] 5324 	lcall	__gptrget
      001C93 FC               [12] 5325 	mov	r4,a
      001C94 E5*00            [12] 5326 	mov	a,_bp
      001C96 24 19            [12] 5327 	add	a,#0x19
      001C98 F8               [12] 5328 	mov	r0,a
      001C99 E6               [12] 5329 	mov	a,@r0
      001C9A C0 E0            [24] 5330 	push	acc
      001C9C 08               [12] 5331 	inc	r0
      001C9D E6               [12] 5332 	mov	a,@r0
      001C9E C0 E0            [24] 5333 	push	acc
      001CA0 08               [12] 5334 	inc	r0
      001CA1 E6               [12] 5335 	mov	a,@r0
      001CA2 C0 E0            [24] 5336 	push	acc
      001CA4 08               [12] 5337 	inc	r0
      001CA5 E6               [12] 5338 	mov	a,@r0
      001CA6 C0 E0            [24] 5339 	push	acc
      001CA8 8A 82            [24] 5340 	mov	dpl,r2
      001CAA 8B 83            [24] 5341 	mov	dph,r3
      001CAC 8C F0            [24] 5342 	mov	b,r4
      001CAE 12r00r00         [24] 5343 	lcall	_stack_push
      001CB1 E5 81            [12] 5344 	mov	a,sp
      001CB3 24 FC            [12] 5345 	add	a,#0xfc
      001CB5 F5 81            [12] 5346 	mov	sp,a
                                   5347 ;	calc.c:259: break;
      001CB7 02r2Ar46         [24] 5348 	ljmp	00249$
                                   5349 ;	calc.c:261: case '#':
      001CBA                       5350 00189$:
                                   5351 ;	calc.c:262: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      001CBA C0 05            [24] 5352 	push	ar5
      001CBC C0 06            [24] 5353 	push	ar6
      001CBE C0 07            [24] 5354 	push	ar7
      001CC0 E5*00            [12] 5355 	mov	a,_bp
      001CC2 24 15            [12] 5356 	add	a,#0x15
      001CC4 FC               [12] 5357 	mov	r4,a
      001CC5 7B 00            [12] 5358 	mov	r3,#0x00
      001CC7 7A 40            [12] 5359 	mov	r2,#0x40
      001CC9 E5*00            [12] 5360 	mov	a,_bp
      001CCB 24 12            [12] 5361 	add	a,#0x12
      001CCD F8               [12] 5362 	mov	r0,a
      001CCE E5*00            [12] 5363 	mov	a,_bp
      001CD0 24 0E            [12] 5364 	add	a,#0x0e
      001CD2 F9               [12] 5365 	mov	r1,a
      001CD3 74 11            [12] 5366 	mov	a,#0x11
      001CD5 26               [12] 5367 	add	a,@r0
      001CD6 F7               [12] 5368 	mov	@r1,a
      001CD7 74 40            [12] 5369 	mov	a,#0x40
      001CD9 08               [12] 5370 	inc	r0
      001CDA 36               [12] 5371 	addc	a,@r0
      001CDB 09               [12] 5372 	inc	r1
      001CDC F7               [12] 5373 	mov	@r1,a
      001CDD 08               [12] 5374 	inc	r0
      001CDE 09               [12] 5375 	inc	r1
      001CDF E6               [12] 5376 	mov	a,@r0
      001CE0 F7               [12] 5377 	mov	@r1,a
      001CE1 E5*00            [12] 5378 	mov	a,_bp
      001CE3 24 0E            [12] 5379 	add	a,#0x0e
      001CE5 F8               [12] 5380 	mov	r0,a
      001CE6 86 82            [24] 5381 	mov	dpl,@r0
      001CE8 08               [12] 5382 	inc	r0
      001CE9 86 83            [24] 5383 	mov	dph,@r0
      001CEB 08               [12] 5384 	inc	r0
      001CEC 86 F0            [24] 5385 	mov	b,@r0
      001CEE 12r00r00         [24] 5386 	lcall	__gptrget
      001CF1 FD               [12] 5387 	mov	r5,a
      001CF2 A3               [24] 5388 	inc	dptr
      001CF3 12r00r00         [24] 5389 	lcall	__gptrget
      001CF6 FE               [12] 5390 	mov	r6,a
      001CF7 A3               [24] 5391 	inc	dptr
      001CF8 12r00r00         [24] 5392 	lcall	__gptrget
      001CFB FF               [12] 5393 	mov	r7,a
      001CFC C0 05            [24] 5394 	push	ar5
      001CFE C0 04            [24] 5395 	push	ar4
      001D00 C0 03            [24] 5396 	push	ar3
      001D02 C0 02            [24] 5397 	push	ar2
      001D04 8D 82            [24] 5398 	mov	dpl,r5
      001D06 8E 83            [24] 5399 	mov	dph,r6
      001D08 8F F0            [24] 5400 	mov	b,r7
      001D0A 12r00r00         [24] 5401 	lcall	_stack_pop
      001D0D AE 82            [24] 5402 	mov	r6,dpl
      001D0F AF 83            [24] 5403 	mov	r7,dph
      001D11 15 81            [12] 5404 	dec	sp
      001D13 15 81            [12] 5405 	dec	sp
      001D15 15 81            [12] 5406 	dec	sp
      001D17 D0 05            [24] 5407 	pop	ar5
      001D19 EE               [12] 5408 	mov	a,r6
      001D1A 4F               [12] 5409 	orl	a,r7
      001D1B D0 07            [24] 5410 	pop	ar7
      001D1D D0 06            [24] 5411 	pop	ar6
      001D1F D0 05            [24] 5412 	pop	ar5
      001D21 70 25            [24] 5413 	jnz	00200$
      001D23 7Fr44            [12] 5414 	mov	r7,#___str_10
      001D25 7Es00            [12] 5415 	mov	r6,#(___str_10 >> 8)
      001D27 7D 80            [12] 5416 	mov	r5,#0x80
                                   5417 ;	calc.c:51: return;
      001D29                       5418 00451$:
                                   5419 ;	calc.c:49: for (; *s; s++) putchar(*s);
      001D29 8F 82            [24] 5420 	mov	dpl,r7
      001D2B 8E 83            [24] 5421 	mov	dph,r6
      001D2D 8D F0            [24] 5422 	mov	b,r5
      001D2F 12r00r00         [24] 5423 	lcall	__gptrget
      001D32 FC               [12] 5424 	mov	r4,a
      001D33 70 03            [24] 5425 	jnz	01353$
      001D35 02r2Ar46         [24] 5426 	ljmp	00249$
      001D38                       5427 01353$:
      001D38 7B 00            [12] 5428 	mov	r3,#0x00
      001D3A 8C 82            [24] 5429 	mov	dpl,r4
      001D3C 8B 83            [24] 5430 	mov	dph,r3
      001D3E 12r00r00         [24] 5431 	lcall	_putchar
      001D41 0F               [12] 5432 	inc	r7
                                   5433 ;	calc.c:262: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      001D42 BF 00 E4         [24] 5434 	cjne	r7,#0x00,00451$
      001D45 0E               [12] 5435 	inc	r6
      001D46 80 E1            [24] 5436 	sjmp	00451$
      001D48                       5437 00200$:
                                   5438 ;	calc.c:263: else if (!stack_pop(ctx->ps, &d1)) {
      001D48 C0 05            [24] 5439 	push	ar5
      001D4A C0 06            [24] 5440 	push	ar6
      001D4C C0 07            [24] 5441 	push	ar7
      001D4E E5*00            [12] 5442 	mov	a,_bp
      001D50 24 19            [12] 5443 	add	a,#0x19
      001D52 FC               [12] 5444 	mov	r4,a
      001D53 7B 00            [12] 5445 	mov	r3,#0x00
      001D55 7A 40            [12] 5446 	mov	r2,#0x40
      001D57 E5*00            [12] 5447 	mov	a,_bp
      001D59 24 0E            [12] 5448 	add	a,#0x0e
      001D5B F8               [12] 5449 	mov	r0,a
      001D5C 86 82            [24] 5450 	mov	dpl,@r0
      001D5E 08               [12] 5451 	inc	r0
      001D5F 86 83            [24] 5452 	mov	dph,@r0
      001D61 08               [12] 5453 	inc	r0
      001D62 86 F0            [24] 5454 	mov	b,@r0
      001D64 12r00r00         [24] 5455 	lcall	__gptrget
      001D67 FD               [12] 5456 	mov	r5,a
      001D68 A3               [24] 5457 	inc	dptr
      001D69 12r00r00         [24] 5458 	lcall	__gptrget
      001D6C FE               [12] 5459 	mov	r6,a
      001D6D A3               [24] 5460 	inc	dptr
      001D6E 12r00r00         [24] 5461 	lcall	__gptrget
      001D71 FF               [12] 5462 	mov	r7,a
      001D72 C0 05            [24] 5463 	push	ar5
      001D74 C0 04            [24] 5464 	push	ar4
      001D76 C0 03            [24] 5465 	push	ar3
      001D78 C0 02            [24] 5466 	push	ar2
      001D7A 8D 82            [24] 5467 	mov	dpl,r5
      001D7C 8E 83            [24] 5468 	mov	dph,r6
      001D7E 8F F0            [24] 5469 	mov	b,r7
      001D80 12r00r00         [24] 5470 	lcall	_stack_pop
      001D83 AE 82            [24] 5471 	mov	r6,dpl
      001D85 AF 83            [24] 5472 	mov	r7,dph
      001D87 15 81            [12] 5473 	dec	sp
      001D89 15 81            [12] 5474 	dec	sp
      001D8B 15 81            [12] 5475 	dec	sp
      001D8D D0 05            [24] 5476 	pop	ar5
      001D8F EE               [12] 5477 	mov	a,r6
      001D90 4F               [12] 5478 	orl	a,r7
      001D91 D0 07            [24] 5479 	pop	ar7
      001D93 D0 06            [24] 5480 	pop	ar6
      001D95 D0 05            [24] 5481 	pop	ar5
      001D97 70 63            [24] 5482 	jnz	00197$
                                   5483 ;	calc.c:264: (void)stack_push(ctx->ps, d0);
      001D99 E5*00            [12] 5484 	mov	a,_bp
      001D9B 24 0E            [12] 5485 	add	a,#0x0e
      001D9D F8               [12] 5486 	mov	r0,a
      001D9E 86 82            [24] 5487 	mov	dpl,@r0
      001DA0 08               [12] 5488 	inc	r0
      001DA1 86 83            [24] 5489 	mov	dph,@r0
      001DA3 08               [12] 5490 	inc	r0
      001DA4 86 F0            [24] 5491 	mov	b,@r0
      001DA6 12r00r00         [24] 5492 	lcall	__gptrget
      001DA9 FA               [12] 5493 	mov	r2,a
      001DAA A3               [24] 5494 	inc	dptr
      001DAB 12r00r00         [24] 5495 	lcall	__gptrget
      001DAE FB               [12] 5496 	mov	r3,a
      001DAF A3               [24] 5497 	inc	dptr
      001DB0 12r00r00         [24] 5498 	lcall	__gptrget
      001DB3 FC               [12] 5499 	mov	r4,a
      001DB4 E5*00            [12] 5500 	mov	a,_bp
      001DB6 24 15            [12] 5501 	add	a,#0x15
      001DB8 F8               [12] 5502 	mov	r0,a
      001DB9 E6               [12] 5503 	mov	a,@r0
      001DBA C0 E0            [24] 5504 	push	acc
      001DBC 08               [12] 5505 	inc	r0
      001DBD E6               [12] 5506 	mov	a,@r0
      001DBE C0 E0            [24] 5507 	push	acc
      001DC0 08               [12] 5508 	inc	r0
      001DC1 E6               [12] 5509 	mov	a,@r0
      001DC2 C0 E0            [24] 5510 	push	acc
      001DC4 08               [12] 5511 	inc	r0
      001DC5 E6               [12] 5512 	mov	a,@r0
      001DC6 C0 E0            [24] 5513 	push	acc
      001DC8 8A 82            [24] 5514 	mov	dpl,r2
      001DCA 8B 83            [24] 5515 	mov	dph,r3
      001DCC 8C F0            [24] 5516 	mov	b,r4
      001DCE 12r00r00         [24] 5517 	lcall	_stack_push
      001DD1 E5 81            [12] 5518 	mov	a,sp
      001DD3 24 FC            [12] 5519 	add	a,#0xfc
      001DD5 F5 81            [12] 5520 	mov	sp,a
                                   5521 ;	calc.c:265: printstr("\r\nstack underflow\r\n");
      001DD7 7Fr44            [12] 5522 	mov	r7,#___str_10
      001DD9 7Es00            [12] 5523 	mov	r6,#(___str_10 >> 8)
      001DDB 7D 80            [12] 5524 	mov	r5,#0x80
                                   5525 ;	calc.c:51: return;
      001DDD                       5526 00454$:
                                   5527 ;	calc.c:49: for (; *s; s++) putchar(*s);
      001DDD 8F 82            [24] 5528 	mov	dpl,r7
      001DDF 8E 83            [24] 5529 	mov	dph,r6
      001DE1 8D F0            [24] 5530 	mov	b,r5
      001DE3 12r00r00         [24] 5531 	lcall	__gptrget
      001DE6 FC               [12] 5532 	mov	r4,a
      001DE7 70 03            [24] 5533 	jnz	01356$
      001DE9 02r2Ar46         [24] 5534 	ljmp	00249$
      001DEC                       5535 01356$:
      001DEC 7B 00            [12] 5536 	mov	r3,#0x00
      001DEE 8C 82            [24] 5537 	mov	dpl,r4
      001DF0 8B 83            [24] 5538 	mov	dph,r3
      001DF2 12r00r00         [24] 5539 	lcall	_putchar
      001DF5 0F               [12] 5540 	inc	r7
                                   5541 ;	calc.c:265: printstr("\r\nstack underflow\r\n");
      001DF6 BF 00 E4         [24] 5542 	cjne	r7,#0x00,00454$
      001DF9 0E               [12] 5543 	inc	r6
      001DFA 80 E1            [24] 5544 	sjmp	00454$
      001DFC                       5545 00197$:
                                   5546 ;	calc.c:266: } else if (!d0) {
      001DFC E5*00            [12] 5547 	mov	a,_bp
      001DFE 24 15            [12] 5548 	add	a,#0x15
      001E00 F8               [12] 5549 	mov	r0,a
      001E01 E6               [12] 5550 	mov	a,@r0
      001E02 08               [12] 5551 	inc	r0
      001E03 46               [12] 5552 	orl	a,@r0
      001E04 08               [12] 5553 	inc	r0
      001E05 46               [12] 5554 	orl	a,@r0
      001E06 08               [12] 5555 	inc	r0
      001E07 46               [12] 5556 	orl	a,@r0
      001E08 60 03            [24] 5557 	jz	01358$
      001E0A 02r1ErAE         [24] 5558 	ljmp	00194$
      001E0D                       5559 01358$:
                                   5560 ;	calc.c:267: (void)stack_push(ctx->ps, d1);
      001E0D E5*00            [12] 5561 	mov	a,_bp
      001E0F 24 0E            [12] 5562 	add	a,#0x0e
      001E11 F8               [12] 5563 	mov	r0,a
      001E12 86 82            [24] 5564 	mov	dpl,@r0
      001E14 08               [12] 5565 	inc	r0
      001E15 86 83            [24] 5566 	mov	dph,@r0
      001E17 08               [12] 5567 	inc	r0
      001E18 86 F0            [24] 5568 	mov	b,@r0
      001E1A 12r00r00         [24] 5569 	lcall	__gptrget
      001E1D FA               [12] 5570 	mov	r2,a
      001E1E A3               [24] 5571 	inc	dptr
      001E1F 12r00r00         [24] 5572 	lcall	__gptrget
      001E22 FB               [12] 5573 	mov	r3,a
      001E23 A3               [24] 5574 	inc	dptr
      001E24 12r00r00         [24] 5575 	lcall	__gptrget
      001E27 FC               [12] 5576 	mov	r4,a
      001E28 E5*00            [12] 5577 	mov	a,_bp
      001E2A 24 19            [12] 5578 	add	a,#0x19
      001E2C F8               [12] 5579 	mov	r0,a
      001E2D E6               [12] 5580 	mov	a,@r0
      001E2E C0 E0            [24] 5581 	push	acc
      001E30 08               [12] 5582 	inc	r0
      001E31 E6               [12] 5583 	mov	a,@r0
      001E32 C0 E0            [24] 5584 	push	acc
      001E34 08               [12] 5585 	inc	r0
      001E35 E6               [12] 5586 	mov	a,@r0
      001E36 C0 E0            [24] 5587 	push	acc
      001E38 08               [12] 5588 	inc	r0
      001E39 E6               [12] 5589 	mov	a,@r0
      001E3A C0 E0            [24] 5590 	push	acc
      001E3C 8A 82            [24] 5591 	mov	dpl,r2
      001E3E 8B 83            [24] 5592 	mov	dph,r3
      001E40 8C F0            [24] 5593 	mov	b,r4
      001E42 12r00r00         [24] 5594 	lcall	_stack_push
      001E45 E5 81            [12] 5595 	mov	a,sp
      001E47 24 FC            [12] 5596 	add	a,#0xfc
      001E49 F5 81            [12] 5597 	mov	sp,a
                                   5598 ;	calc.c:268: (void)stack_push(ctx->ps, d0);			
      001E4B E5*00            [12] 5599 	mov	a,_bp
      001E4D 24 0E            [12] 5600 	add	a,#0x0e
      001E4F F8               [12] 5601 	mov	r0,a
      001E50 86 82            [24] 5602 	mov	dpl,@r0
      001E52 08               [12] 5603 	inc	r0
      001E53 86 83            [24] 5604 	mov	dph,@r0
      001E55 08               [12] 5605 	inc	r0
      001E56 86 F0            [24] 5606 	mov	b,@r0
      001E58 12r00r00         [24] 5607 	lcall	__gptrget
      001E5B FA               [12] 5608 	mov	r2,a
      001E5C A3               [24] 5609 	inc	dptr
      001E5D 12r00r00         [24] 5610 	lcall	__gptrget
      001E60 FB               [12] 5611 	mov	r3,a
      001E61 A3               [24] 5612 	inc	dptr
      001E62 12r00r00         [24] 5613 	lcall	__gptrget
      001E65 FC               [12] 5614 	mov	r4,a
      001E66 E5*00            [12] 5615 	mov	a,_bp
      001E68 24 15            [12] 5616 	add	a,#0x15
      001E6A F8               [12] 5617 	mov	r0,a
      001E6B E6               [12] 5618 	mov	a,@r0
      001E6C C0 E0            [24] 5619 	push	acc
      001E6E 08               [12] 5620 	inc	r0
      001E6F E6               [12] 5621 	mov	a,@r0
      001E70 C0 E0            [24] 5622 	push	acc
      001E72 08               [12] 5623 	inc	r0
      001E73 E6               [12] 5624 	mov	a,@r0
      001E74 C0 E0            [24] 5625 	push	acc
      001E76 08               [12] 5626 	inc	r0
      001E77 E6               [12] 5627 	mov	a,@r0
      001E78 C0 E0            [24] 5628 	push	acc
      001E7A 8A 82            [24] 5629 	mov	dpl,r2
      001E7C 8B 83            [24] 5630 	mov	dph,r3
      001E7E 8C F0            [24] 5631 	mov	b,r4
      001E80 12r00r00         [24] 5632 	lcall	_stack_push
      001E83 E5 81            [12] 5633 	mov	a,sp
      001E85 24 FC            [12] 5634 	add	a,#0xfc
      001E87 F5 81            [12] 5635 	mov	sp,a
                                   5636 ;	calc.c:269: printstr("\r\ndivision by zero\r\n");
      001E89 7FrA6            [12] 5637 	mov	r7,#___str_14
      001E8B 7Es00            [12] 5638 	mov	r6,#(___str_14 >> 8)
      001E8D 7D 80            [12] 5639 	mov	r5,#0x80
                                   5640 ;	calc.c:51: return;
      001E8F                       5641 00457$:
                                   5642 ;	calc.c:49: for (; *s; s++) putchar(*s);
      001E8F 8F 82            [24] 5643 	mov	dpl,r7
      001E91 8E 83            [24] 5644 	mov	dph,r6
      001E93 8D F0            [24] 5645 	mov	b,r5
      001E95 12r00r00         [24] 5646 	lcall	__gptrget
      001E98 FC               [12] 5647 	mov	r4,a
      001E99 70 03            [24] 5648 	jnz	01359$
      001E9B 02r2Ar46         [24] 5649 	ljmp	00249$
      001E9E                       5650 01359$:
      001E9E 7B 00            [12] 5651 	mov	r3,#0x00
      001EA0 8C 82            [24] 5652 	mov	dpl,r4
      001EA2 8B 83            [24] 5653 	mov	dph,r3
      001EA4 12r00r00         [24] 5654 	lcall	_putchar
      001EA7 0F               [12] 5655 	inc	r7
                                   5656 ;	calc.c:269: printstr("\r\ndivision by zero\r\n");
      001EA8 BF 00 E4         [24] 5657 	cjne	r7,#0x00,00457$
      001EAB 0E               [12] 5658 	inc	r6
      001EAC 80 E1            [24] 5659 	sjmp	00457$
      001EAE                       5660 00194$:
                                   5661 ;	calc.c:271: if (ctx->digit[0] == '%') d1 %= d0;
      001EAE 8D 82            [24] 5662 	mov	dpl,r5
      001EB0 8E 83            [24] 5663 	mov	dph,r6
      001EB2 8F F0            [24] 5664 	mov	b,r7
      001EB4 12r00r00         [24] 5665 	lcall	__gptrget
      001EB7 FD               [12] 5666 	mov	r5,a
      001EB8 BD 25 45         [24] 5667 	cjne	r5,#0x25,00191$
      001EBB E5*00            [12] 5668 	mov	a,_bp
      001EBD 24 15            [12] 5669 	add	a,#0x15
      001EBF F8               [12] 5670 	mov	r0,a
      001EC0 E6               [12] 5671 	mov	a,@r0
      001EC1 C0 E0            [24] 5672 	push	acc
      001EC3 08               [12] 5673 	inc	r0
      001EC4 E6               [12] 5674 	mov	a,@r0
      001EC5 C0 E0            [24] 5675 	push	acc
      001EC7 08               [12] 5676 	inc	r0
      001EC8 E6               [12] 5677 	mov	a,@r0
      001EC9 C0 E0            [24] 5678 	push	acc
      001ECB 08               [12] 5679 	inc	r0
      001ECC E6               [12] 5680 	mov	a,@r0
      001ECD C0 E0            [24] 5681 	push	acc
      001ECF E5*00            [12] 5682 	mov	a,_bp
      001ED1 24 19            [12] 5683 	add	a,#0x19
      001ED3 F8               [12] 5684 	mov	r0,a
      001ED4 86 82            [24] 5685 	mov	dpl,@r0
      001ED6 08               [12] 5686 	inc	r0
      001ED7 86 83            [24] 5687 	mov	dph,@r0
      001ED9 08               [12] 5688 	inc	r0
      001EDA 86 F0            [24] 5689 	mov	b,@r0
      001EDC 08               [12] 5690 	inc	r0
      001EDD E6               [12] 5691 	mov	a,@r0
      001EDE 12r00r00         [24] 5692 	lcall	__modslong
      001EE1 AC 82            [24] 5693 	mov	r4,dpl
      001EE3 AD 83            [24] 5694 	mov	r5,dph
      001EE5 AE F0            [24] 5695 	mov	r6,b
      001EE7 FF               [12] 5696 	mov	r7,a
      001EE8 E5 81            [12] 5697 	mov	a,sp
      001EEA 24 FC            [12] 5698 	add	a,#0xfc
      001EEC F5 81            [12] 5699 	mov	sp,a
      001EEE E5*00            [12] 5700 	mov	a,_bp
      001EF0 24 19            [12] 5701 	add	a,#0x19
      001EF2 F8               [12] 5702 	mov	r0,a
      001EF3 A6 04            [24] 5703 	mov	@r0,ar4
      001EF5 08               [12] 5704 	inc	r0
      001EF6 A6 05            [24] 5705 	mov	@r0,ar5
      001EF8 08               [12] 5706 	inc	r0
      001EF9 A6 06            [24] 5707 	mov	@r0,ar6
      001EFB 08               [12] 5708 	inc	r0
      001EFC A6 07            [24] 5709 	mov	@r0,ar7
      001EFE 80 5F            [24] 5710 	sjmp	00192$
      001F00                       5711 00191$:
                                   5712 ;	calc.c:272: else d1 = (unsigned long)d1 % (unsigned long)d0;
      001F00 E5*00            [12] 5713 	mov	a,_bp
      001F02 24 19            [12] 5714 	add	a,#0x19
      001F04 F8               [12] 5715 	mov	r0,a
      001F05 E5*00            [12] 5716 	mov	a,_bp
      001F07 24 07            [12] 5717 	add	a,#0x07
      001F09 F9               [12] 5718 	mov	r1,a
      001F0A E6               [12] 5719 	mov	a,@r0
      001F0B F7               [12] 5720 	mov	@r1,a
      001F0C 08               [12] 5721 	inc	r0
      001F0D 09               [12] 5722 	inc	r1
      001F0E E6               [12] 5723 	mov	a,@r0
      001F0F F7               [12] 5724 	mov	@r1,a
      001F10 08               [12] 5725 	inc	r0
      001F11 09               [12] 5726 	inc	r1
      001F12 E6               [12] 5727 	mov	a,@r0
      001F13 F7               [12] 5728 	mov	@r1,a
      001F14 08               [12] 5729 	inc	r0
      001F15 09               [12] 5730 	inc	r1
      001F16 E6               [12] 5731 	mov	a,@r0
      001F17 F7               [12] 5732 	mov	@r1,a
      001F18 E5*00            [12] 5733 	mov	a,_bp
      001F1A 24 15            [12] 5734 	add	a,#0x15
      001F1C F8               [12] 5735 	mov	r0,a
      001F1D 86 02            [24] 5736 	mov	ar2,@r0
      001F1F 08               [12] 5737 	inc	r0
      001F20 86 03            [24] 5738 	mov	ar3,@r0
      001F22 08               [12] 5739 	inc	r0
      001F23 86 06            [24] 5740 	mov	ar6,@r0
      001F25 08               [12] 5741 	inc	r0
      001F26 86 07            [24] 5742 	mov	ar7,@r0
      001F28 C0 02            [24] 5743 	push	ar2
      001F2A C0 03            [24] 5744 	push	ar3
      001F2C C0 06            [24] 5745 	push	ar6
      001F2E C0 07            [24] 5746 	push	ar7
      001F30 E5*00            [12] 5747 	mov	a,_bp
      001F32 24 07            [12] 5748 	add	a,#0x07
      001F34 F8               [12] 5749 	mov	r0,a
      001F35 86 82            [24] 5750 	mov	dpl,@r0
      001F37 08               [12] 5751 	inc	r0
      001F38 86 83            [24] 5752 	mov	dph,@r0
      001F3A 08               [12] 5753 	inc	r0
      001F3B 86 F0            [24] 5754 	mov	b,@r0
      001F3D 08               [12] 5755 	inc	r0
      001F3E E6               [12] 5756 	mov	a,@r0
      001F3F 12r00r00         [24] 5757 	lcall	__modulong
      001F42 AC 82            [24] 5758 	mov	r4,dpl
      001F44 AD 83            [24] 5759 	mov	r5,dph
      001F46 AE F0            [24] 5760 	mov	r6,b
      001F48 FF               [12] 5761 	mov	r7,a
      001F49 E5 81            [12] 5762 	mov	a,sp
      001F4B 24 FC            [12] 5763 	add	a,#0xfc
      001F4D F5 81            [12] 5764 	mov	sp,a
      001F4F E5*00            [12] 5765 	mov	a,_bp
      001F51 24 19            [12] 5766 	add	a,#0x19
      001F53 F8               [12] 5767 	mov	r0,a
      001F54 A6 04            [24] 5768 	mov	@r0,ar4
      001F56 08               [12] 5769 	inc	r0
      001F57 A6 05            [24] 5770 	mov	@r0,ar5
      001F59 08               [12] 5771 	inc	r0
      001F5A A6 06            [24] 5772 	mov	@r0,ar6
      001F5C 08               [12] 5773 	inc	r0
      001F5D A6 07            [24] 5774 	mov	@r0,ar7
      001F5F                       5775 00192$:
                                   5776 ;	calc.c:273: (void)stack_push(ctx->ps, d1);
      001F5F E5*00            [12] 5777 	mov	a,_bp
      001F61 24 0E            [12] 5778 	add	a,#0x0e
      001F63 F8               [12] 5779 	mov	r0,a
      001F64 86 82            [24] 5780 	mov	dpl,@r0
      001F66 08               [12] 5781 	inc	r0
      001F67 86 83            [24] 5782 	mov	dph,@r0
      001F69 08               [12] 5783 	inc	r0
      001F6A 86 F0            [24] 5784 	mov	b,@r0
      001F6C 12r00r00         [24] 5785 	lcall	__gptrget
      001F6F FD               [12] 5786 	mov	r5,a
      001F70 A3               [24] 5787 	inc	dptr
      001F71 12r00r00         [24] 5788 	lcall	__gptrget
      001F74 FE               [12] 5789 	mov	r6,a
      001F75 A3               [24] 5790 	inc	dptr
      001F76 12r00r00         [24] 5791 	lcall	__gptrget
      001F79 FF               [12] 5792 	mov	r7,a
      001F7A E5*00            [12] 5793 	mov	a,_bp
      001F7C 24 19            [12] 5794 	add	a,#0x19
      001F7E F8               [12] 5795 	mov	r0,a
      001F7F E6               [12] 5796 	mov	a,@r0
      001F80 C0 E0            [24] 5797 	push	acc
      001F82 08               [12] 5798 	inc	r0
      001F83 E6               [12] 5799 	mov	a,@r0
      001F84 C0 E0            [24] 5800 	push	acc
      001F86 08               [12] 5801 	inc	r0
      001F87 E6               [12] 5802 	mov	a,@r0
      001F88 C0 E0            [24] 5803 	push	acc
      001F8A 08               [12] 5804 	inc	r0
      001F8B E6               [12] 5805 	mov	a,@r0
      001F8C C0 E0            [24] 5806 	push	acc
      001F8E 8D 82            [24] 5807 	mov	dpl,r5
      001F90 8E 83            [24] 5808 	mov	dph,r6
      001F92 8F F0            [24] 5809 	mov	b,r7
      001F94 12r00r00         [24] 5810 	lcall	_stack_push
      001F97 E5 81            [12] 5811 	mov	a,sp
      001F99 24 FC            [12] 5812 	add	a,#0xfc
      001F9B F5 81            [12] 5813 	mov	sp,a
                                   5814 ;	calc.c:275: break;
      001F9D 02r2Ar46         [24] 5815 	ljmp	00249$
                                   5816 ;	calc.c:276: case '&':
      001FA0                       5817 00202$:
                                   5818 ;	calc.c:277: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      001FA0 E5*00            [12] 5819 	mov	a,_bp
      001FA2 24 15            [12] 5820 	add	a,#0x15
      001FA4 FF               [12] 5821 	mov	r7,a
      001FA5 E5*00            [12] 5822 	mov	a,_bp
      001FA7 24 0E            [12] 5823 	add	a,#0x0e
      001FA9 F8               [12] 5824 	mov	r0,a
      001FAA A6 07            [24] 5825 	mov	@r0,ar7
      001FAC 08               [12] 5826 	inc	r0
      001FAD 76 00            [12] 5827 	mov	@r0,#0x00
      001FAF 08               [12] 5828 	inc	r0
      001FB0 76 40            [12] 5829 	mov	@r0,#0x40
      001FB2 E5*00            [12] 5830 	mov	a,_bp
      001FB4 24 12            [12] 5831 	add	a,#0x12
      001FB6 F8               [12] 5832 	mov	r0,a
      001FB7 74 11            [12] 5833 	mov	a,#0x11
      001FB9 26               [12] 5834 	add	a,@r0
      001FBA FA               [12] 5835 	mov	r2,a
      001FBB 74 40            [12] 5836 	mov	a,#0x40
      001FBD 08               [12] 5837 	inc	r0
      001FBE 36               [12] 5838 	addc	a,@r0
      001FBF FB               [12] 5839 	mov	r3,a
      001FC0 08               [12] 5840 	inc	r0
      001FC1 86 04            [24] 5841 	mov	ar4,@r0
      001FC3 8A 82            [24] 5842 	mov	dpl,r2
      001FC5 8B 83            [24] 5843 	mov	dph,r3
      001FC7 8C F0            [24] 5844 	mov	b,r4
      001FC9 12r00r00         [24] 5845 	lcall	__gptrget
      001FCC FD               [12] 5846 	mov	r5,a
      001FCD A3               [24] 5847 	inc	dptr
      001FCE 12r00r00         [24] 5848 	lcall	__gptrget
      001FD1 FE               [12] 5849 	mov	r6,a
      001FD2 A3               [24] 5850 	inc	dptr
      001FD3 12r00r00         [24] 5851 	lcall	__gptrget
      001FD6 FF               [12] 5852 	mov	r7,a
      001FD7 C0 04            [24] 5853 	push	ar4
      001FD9 C0 03            [24] 5854 	push	ar3
      001FDB C0 02            [24] 5855 	push	ar2
      001FDD E5*00            [12] 5856 	mov	a,_bp
      001FDF 24 0E            [12] 5857 	add	a,#0x0e
      001FE1 F8               [12] 5858 	mov	r0,a
      001FE2 E6               [12] 5859 	mov	a,@r0
      001FE3 C0 E0            [24] 5860 	push	acc
      001FE5 08               [12] 5861 	inc	r0
      001FE6 E6               [12] 5862 	mov	a,@r0
      001FE7 C0 E0            [24] 5863 	push	acc
      001FE9 08               [12] 5864 	inc	r0
      001FEA E6               [12] 5865 	mov	a,@r0
      001FEB C0 E0            [24] 5866 	push	acc
      001FED 8D 82            [24] 5867 	mov	dpl,r5
      001FEF 8E 83            [24] 5868 	mov	dph,r6
      001FF1 8F F0            [24] 5869 	mov	b,r7
      001FF3 12r00r00         [24] 5870 	lcall	_stack_pop
      001FF6 AE 82            [24] 5871 	mov	r6,dpl
      001FF8 AF 83            [24] 5872 	mov	r7,dph
      001FFA 15 81            [12] 5873 	dec	sp
      001FFC 15 81            [12] 5874 	dec	sp
      001FFE 15 81            [12] 5875 	dec	sp
      002000 D0 02            [24] 5876 	pop	ar2
      002002 D0 03            [24] 5877 	pop	ar3
      002004 D0 04            [24] 5878 	pop	ar4
      002006 EE               [12] 5879 	mov	a,r6
      002007 4F               [12] 5880 	orl	a,r7
      002008 70 25            [24] 5881 	jnz	00207$
      00200A 7Dr44            [12] 5882 	mov	r5,#___str_10
      00200C 7Cs00            [12] 5883 	mov	r4,#(___str_10 >> 8)
      00200E 7B 80            [12] 5884 	mov	r3,#0x80
                                   5885 ;	calc.c:51: return;
      002010                       5886 00460$:
                                   5887 ;	calc.c:49: for (; *s; s++) putchar(*s);
      002010 8D 82            [24] 5888 	mov	dpl,r5
      002012 8C 83            [24] 5889 	mov	dph,r4
      002014 8B F0            [24] 5890 	mov	b,r3
      002016 12r00r00         [24] 5891 	lcall	__gptrget
      002019 FF               [12] 5892 	mov	r7,a
      00201A 70 03            [24] 5893 	jnz	01364$
      00201C 02r2Ar46         [24] 5894 	ljmp	00249$
      00201F                       5895 01364$:
      00201F 7E 00            [12] 5896 	mov	r6,#0x00
      002021 8F 82            [24] 5897 	mov	dpl,r7
      002023 8E 83            [24] 5898 	mov	dph,r6
      002025 12r00r00         [24] 5899 	lcall	_putchar
      002028 0D               [12] 5900 	inc	r5
                                   5901 ;	calc.c:277: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      002029 BD 00 E4         [24] 5902 	cjne	r5,#0x00,00460$
      00202C 0C               [12] 5903 	inc	r4
      00202D 80 E1            [24] 5904 	sjmp	00460$
      00202F                       5905 00207$:
                                   5906 ;	calc.c:278: else if (!stack_pop(ctx->ps, &d1)) {
      00202F E5*00            [12] 5907 	mov	a,_bp
      002031 24 19            [12] 5908 	add	a,#0x19
      002033 FF               [12] 5909 	mov	r7,a
      002034 E5*00            [12] 5910 	mov	a,_bp
      002036 24 0E            [12] 5911 	add	a,#0x0e
      002038 F8               [12] 5912 	mov	r0,a
      002039 A6 07            [24] 5913 	mov	@r0,ar7
      00203B 08               [12] 5914 	inc	r0
      00203C 76 00            [12] 5915 	mov	@r0,#0x00
      00203E 08               [12] 5916 	inc	r0
      00203F 76 40            [12] 5917 	mov	@r0,#0x40
      002041 8A 82            [24] 5918 	mov	dpl,r2
      002043 8B 83            [24] 5919 	mov	dph,r3
      002045 8C F0            [24] 5920 	mov	b,r4
      002047 12r00r00         [24] 5921 	lcall	__gptrget
      00204A FD               [12] 5922 	mov	r5,a
      00204B A3               [24] 5923 	inc	dptr
      00204C 12r00r00         [24] 5924 	lcall	__gptrget
      00204F FE               [12] 5925 	mov	r6,a
      002050 A3               [24] 5926 	inc	dptr
      002051 12r00r00         [24] 5927 	lcall	__gptrget
      002054 FF               [12] 5928 	mov	r7,a
      002055 C0 04            [24] 5929 	push	ar4
      002057 C0 03            [24] 5930 	push	ar3
      002059 C0 02            [24] 5931 	push	ar2
      00205B E5*00            [12] 5932 	mov	a,_bp
      00205D 24 0E            [12] 5933 	add	a,#0x0e
      00205F F8               [12] 5934 	mov	r0,a
      002060 E6               [12] 5935 	mov	a,@r0
      002061 C0 E0            [24] 5936 	push	acc
      002063 08               [12] 5937 	inc	r0
      002064 E6               [12] 5938 	mov	a,@r0
      002065 C0 E0            [24] 5939 	push	acc
      002067 08               [12] 5940 	inc	r0
      002068 E6               [12] 5941 	mov	a,@r0
      002069 C0 E0            [24] 5942 	push	acc
      00206B 8D 82            [24] 5943 	mov	dpl,r5
      00206D 8E 83            [24] 5944 	mov	dph,r6
      00206F 8F F0            [24] 5945 	mov	b,r7
      002071 12r00r00         [24] 5946 	lcall	_stack_pop
      002074 AE 82            [24] 5947 	mov	r6,dpl
      002076 AF 83            [24] 5948 	mov	r7,dph
      002078 15 81            [12] 5949 	dec	sp
      00207A 15 81            [12] 5950 	dec	sp
      00207C 15 81            [12] 5951 	dec	sp
      00207E D0 02            [24] 5952 	pop	ar2
      002080 D0 03            [24] 5953 	pop	ar3
      002082 D0 04            [24] 5954 	pop	ar4
      002084 EE               [12] 5955 	mov	a,r6
      002085 4F               [12] 5956 	orl	a,r7
      002086 70 5C            [24] 5957 	jnz	00204$
                                   5958 ;	calc.c:279: (void)stack_push(ctx->ps, d0);
      002088 8A 82            [24] 5959 	mov	dpl,r2
      00208A 8B 83            [24] 5960 	mov	dph,r3
      00208C 8C F0            [24] 5961 	mov	b,r4
      00208E 12r00r00         [24] 5962 	lcall	__gptrget
      002091 FD               [12] 5963 	mov	r5,a
      002092 A3               [24] 5964 	inc	dptr
      002093 12r00r00         [24] 5965 	lcall	__gptrget
      002096 FE               [12] 5966 	mov	r6,a
      002097 A3               [24] 5967 	inc	dptr
      002098 12r00r00         [24] 5968 	lcall	__gptrget
      00209B FF               [12] 5969 	mov	r7,a
      00209C E5*00            [12] 5970 	mov	a,_bp
      00209E 24 15            [12] 5971 	add	a,#0x15
      0020A0 F8               [12] 5972 	mov	r0,a
      0020A1 E6               [12] 5973 	mov	a,@r0
      0020A2 C0 E0            [24] 5974 	push	acc
      0020A4 08               [12] 5975 	inc	r0
      0020A5 E6               [12] 5976 	mov	a,@r0
      0020A6 C0 E0            [24] 5977 	push	acc
      0020A8 08               [12] 5978 	inc	r0
      0020A9 E6               [12] 5979 	mov	a,@r0
      0020AA C0 E0            [24] 5980 	push	acc
      0020AC 08               [12] 5981 	inc	r0
      0020AD E6               [12] 5982 	mov	a,@r0
      0020AE C0 E0            [24] 5983 	push	acc
      0020B0 8D 82            [24] 5984 	mov	dpl,r5
      0020B2 8E 83            [24] 5985 	mov	dph,r6
      0020B4 8F F0            [24] 5986 	mov	b,r7
      0020B6 12r00r00         [24] 5987 	lcall	_stack_push
      0020B9 E5 81            [12] 5988 	mov	a,sp
      0020BB 24 FC            [12] 5989 	add	a,#0xfc
      0020BD F5 81            [12] 5990 	mov	sp,a
                                   5991 ;	calc.c:280: printstr("\r\nstack underflow\r\n");
      0020BF 7Dr44            [12] 5992 	mov	r5,#___str_10
      0020C1 7Cs00            [12] 5993 	mov	r4,#(___str_10 >> 8)
      0020C3 7B 80            [12] 5994 	mov	r3,#0x80
                                   5995 ;	calc.c:51: return;
      0020C5                       5996 00463$:
                                   5997 ;	calc.c:49: for (; *s; s++) putchar(*s);
      0020C5 8D 82            [24] 5998 	mov	dpl,r5
      0020C7 8C 83            [24] 5999 	mov	dph,r4
      0020C9 8B F0            [24] 6000 	mov	b,r3
      0020CB 12r00r00         [24] 6001 	lcall	__gptrget
      0020CE FF               [12] 6002 	mov	r7,a
      0020CF 70 03            [24] 6003 	jnz	01367$
      0020D1 02r2Ar46         [24] 6004 	ljmp	00249$
      0020D4                       6005 01367$:
      0020D4 7E 00            [12] 6006 	mov	r6,#0x00
      0020D6 8F 82            [24] 6007 	mov	dpl,r7
      0020D8 8E 83            [24] 6008 	mov	dph,r6
      0020DA 12r00r00         [24] 6009 	lcall	_putchar
      0020DD 0D               [12] 6010 	inc	r5
                                   6011 ;	calc.c:280: printstr("\r\nstack underflow\r\n");
      0020DE BD 00 E4         [24] 6012 	cjne	r5,#0x00,00463$
      0020E1 0C               [12] 6013 	inc	r4
      0020E2 80 E1            [24] 6014 	sjmp	00463$
      0020E4                       6015 00204$:
                                   6016 ;	calc.c:282: d1 &= d0;
      0020E4 E5*00            [12] 6017 	mov	a,_bp
      0020E6 24 19            [12] 6018 	add	a,#0x19
      0020E8 F8               [12] 6019 	mov	r0,a
      0020E9 E5*00            [12] 6020 	mov	a,_bp
      0020EB 24 15            [12] 6021 	add	a,#0x15
      0020ED F9               [12] 6022 	mov	r1,a
      0020EE E7               [12] 6023 	mov	a,@r1
      0020EF 56               [12] 6024 	anl	a,@r0
      0020F0 F6               [12] 6025 	mov	@r0,a
      0020F1 09               [12] 6026 	inc	r1
      0020F2 E7               [12] 6027 	mov	a,@r1
      0020F3 08               [12] 6028 	inc	r0
      0020F4 56               [12] 6029 	anl	a,@r0
      0020F5 F6               [12] 6030 	mov	@r0,a
      0020F6 09               [12] 6031 	inc	r1
      0020F7 E7               [12] 6032 	mov	a,@r1
      0020F8 08               [12] 6033 	inc	r0
      0020F9 56               [12] 6034 	anl	a,@r0
      0020FA F6               [12] 6035 	mov	@r0,a
      0020FB 09               [12] 6036 	inc	r1
      0020FC E7               [12] 6037 	mov	a,@r1
      0020FD 08               [12] 6038 	inc	r0
      0020FE 56               [12] 6039 	anl	a,@r0
      0020FF F6               [12] 6040 	mov	@r0,a
                                   6041 ;	calc.c:283: (void)stack_push(ctx->ps, d1);
      002100 8A 82            [24] 6042 	mov	dpl,r2
      002102 8B 83            [24] 6043 	mov	dph,r3
      002104 8C F0            [24] 6044 	mov	b,r4
      002106 12r00r00         [24] 6045 	lcall	__gptrget
      002109 FA               [12] 6046 	mov	r2,a
      00210A A3               [24] 6047 	inc	dptr
      00210B 12r00r00         [24] 6048 	lcall	__gptrget
      00210E FB               [12] 6049 	mov	r3,a
      00210F A3               [24] 6050 	inc	dptr
      002110 12r00r00         [24] 6051 	lcall	__gptrget
      002113 FC               [12] 6052 	mov	r4,a
      002114 E5*00            [12] 6053 	mov	a,_bp
      002116 24 19            [12] 6054 	add	a,#0x19
      002118 F8               [12] 6055 	mov	r0,a
      002119 E6               [12] 6056 	mov	a,@r0
      00211A C0 E0            [24] 6057 	push	acc
      00211C 08               [12] 6058 	inc	r0
      00211D E6               [12] 6059 	mov	a,@r0
      00211E C0 E0            [24] 6060 	push	acc
      002120 08               [12] 6061 	inc	r0
      002121 E6               [12] 6062 	mov	a,@r0
      002122 C0 E0            [24] 6063 	push	acc
      002124 08               [12] 6064 	inc	r0
      002125 E6               [12] 6065 	mov	a,@r0
      002126 C0 E0            [24] 6066 	push	acc
      002128 8A 82            [24] 6067 	mov	dpl,r2
      00212A 8B 83            [24] 6068 	mov	dph,r3
      00212C 8C F0            [24] 6069 	mov	b,r4
      00212E 12r00r00         [24] 6070 	lcall	_stack_push
      002131 E5 81            [12] 6071 	mov	a,sp
      002133 24 FC            [12] 6072 	add	a,#0xfc
      002135 F5 81            [12] 6073 	mov	sp,a
                                   6074 ;	calc.c:285: break;
      002137 02r2Ar46         [24] 6075 	ljmp	00249$
                                   6076 ;	calc.c:286: case '|':
      00213A                       6077 00209$:
                                   6078 ;	calc.c:287: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      00213A E5*00            [12] 6079 	mov	a,_bp
      00213C 24 15            [12] 6080 	add	a,#0x15
      00213E FF               [12] 6081 	mov	r7,a
      00213F E5*00            [12] 6082 	mov	a,_bp
      002141 24 0E            [12] 6083 	add	a,#0x0e
      002143 F8               [12] 6084 	mov	r0,a
      002144 A6 07            [24] 6085 	mov	@r0,ar7
      002146 08               [12] 6086 	inc	r0
      002147 76 00            [12] 6087 	mov	@r0,#0x00
      002149 08               [12] 6088 	inc	r0
      00214A 76 40            [12] 6089 	mov	@r0,#0x40
      00214C E5*00            [12] 6090 	mov	a,_bp
      00214E 24 12            [12] 6091 	add	a,#0x12
      002150 F8               [12] 6092 	mov	r0,a
      002151 74 11            [12] 6093 	mov	a,#0x11
      002153 26               [12] 6094 	add	a,@r0
      002154 FA               [12] 6095 	mov	r2,a
      002155 74 40            [12] 6096 	mov	a,#0x40
      002157 08               [12] 6097 	inc	r0
      002158 36               [12] 6098 	addc	a,@r0
      002159 FB               [12] 6099 	mov	r3,a
      00215A 08               [12] 6100 	inc	r0
      00215B 86 04            [24] 6101 	mov	ar4,@r0
      00215D 8A 82            [24] 6102 	mov	dpl,r2
      00215F 8B 83            [24] 6103 	mov	dph,r3
      002161 8C F0            [24] 6104 	mov	b,r4
      002163 12r00r00         [24] 6105 	lcall	__gptrget
      002166 FD               [12] 6106 	mov	r5,a
      002167 A3               [24] 6107 	inc	dptr
      002168 12r00r00         [24] 6108 	lcall	__gptrget
      00216B FE               [12] 6109 	mov	r6,a
      00216C A3               [24] 6110 	inc	dptr
      00216D 12r00r00         [24] 6111 	lcall	__gptrget
      002170 FF               [12] 6112 	mov	r7,a
      002171 C0 04            [24] 6113 	push	ar4
      002173 C0 03            [24] 6114 	push	ar3
      002175 C0 02            [24] 6115 	push	ar2
      002177 E5*00            [12] 6116 	mov	a,_bp
      002179 24 0E            [12] 6117 	add	a,#0x0e
      00217B F8               [12] 6118 	mov	r0,a
      00217C E6               [12] 6119 	mov	a,@r0
      00217D C0 E0            [24] 6120 	push	acc
      00217F 08               [12] 6121 	inc	r0
      002180 E6               [12] 6122 	mov	a,@r0
      002181 C0 E0            [24] 6123 	push	acc
      002183 08               [12] 6124 	inc	r0
      002184 E6               [12] 6125 	mov	a,@r0
      002185 C0 E0            [24] 6126 	push	acc
      002187 8D 82            [24] 6127 	mov	dpl,r5
      002189 8E 83            [24] 6128 	mov	dph,r6
      00218B 8F F0            [24] 6129 	mov	b,r7
      00218D 12r00r00         [24] 6130 	lcall	_stack_pop
      002190 AE 82            [24] 6131 	mov	r6,dpl
      002192 AF 83            [24] 6132 	mov	r7,dph
      002194 15 81            [12] 6133 	dec	sp
      002196 15 81            [12] 6134 	dec	sp
      002198 15 81            [12] 6135 	dec	sp
      00219A D0 02            [24] 6136 	pop	ar2
      00219C D0 03            [24] 6137 	pop	ar3
      00219E D0 04            [24] 6138 	pop	ar4
      0021A0 EE               [12] 6139 	mov	a,r6
      0021A1 4F               [12] 6140 	orl	a,r7
      0021A2 70 25            [24] 6141 	jnz	00214$
      0021A4 7Dr44            [12] 6142 	mov	r5,#___str_10
      0021A6 7Cs00            [12] 6143 	mov	r4,#(___str_10 >> 8)
      0021A8 7B 80            [12] 6144 	mov	r3,#0x80
                                   6145 ;	calc.c:51: return;
      0021AA                       6146 00466$:
                                   6147 ;	calc.c:49: for (; *s; s++) putchar(*s);
      0021AA 8D 82            [24] 6148 	mov	dpl,r5
      0021AC 8C 83            [24] 6149 	mov	dph,r4
      0021AE 8B F0            [24] 6150 	mov	b,r3
      0021B0 12r00r00         [24] 6151 	lcall	__gptrget
      0021B3 FF               [12] 6152 	mov	r7,a
      0021B4 70 03            [24] 6153 	jnz	01370$
      0021B6 02r2Ar46         [24] 6154 	ljmp	00249$
      0021B9                       6155 01370$:
      0021B9 7E 00            [12] 6156 	mov	r6,#0x00
      0021BB 8F 82            [24] 6157 	mov	dpl,r7
      0021BD 8E 83            [24] 6158 	mov	dph,r6
      0021BF 12r00r00         [24] 6159 	lcall	_putchar
      0021C2 0D               [12] 6160 	inc	r5
                                   6161 ;	calc.c:287: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      0021C3 BD 00 E4         [24] 6162 	cjne	r5,#0x00,00466$
      0021C6 0C               [12] 6163 	inc	r4
      0021C7 80 E1            [24] 6164 	sjmp	00466$
      0021C9                       6165 00214$:
                                   6166 ;	calc.c:288: else if (!stack_pop(ctx->ps, &d1)) {
      0021C9 E5*00            [12] 6167 	mov	a,_bp
      0021CB 24 19            [12] 6168 	add	a,#0x19
      0021CD FF               [12] 6169 	mov	r7,a
      0021CE E5*00            [12] 6170 	mov	a,_bp
      0021D0 24 0E            [12] 6171 	add	a,#0x0e
      0021D2 F8               [12] 6172 	mov	r0,a
      0021D3 A6 07            [24] 6173 	mov	@r0,ar7
      0021D5 08               [12] 6174 	inc	r0
      0021D6 76 00            [12] 6175 	mov	@r0,#0x00
      0021D8 08               [12] 6176 	inc	r0
      0021D9 76 40            [12] 6177 	mov	@r0,#0x40
      0021DB 8A 82            [24] 6178 	mov	dpl,r2
      0021DD 8B 83            [24] 6179 	mov	dph,r3
      0021DF 8C F0            [24] 6180 	mov	b,r4
      0021E1 12r00r00         [24] 6181 	lcall	__gptrget
      0021E4 FD               [12] 6182 	mov	r5,a
      0021E5 A3               [24] 6183 	inc	dptr
      0021E6 12r00r00         [24] 6184 	lcall	__gptrget
      0021E9 FE               [12] 6185 	mov	r6,a
      0021EA A3               [24] 6186 	inc	dptr
      0021EB 12r00r00         [24] 6187 	lcall	__gptrget
      0021EE FF               [12] 6188 	mov	r7,a
      0021EF C0 04            [24] 6189 	push	ar4
      0021F1 C0 03            [24] 6190 	push	ar3
      0021F3 C0 02            [24] 6191 	push	ar2
      0021F5 E5*00            [12] 6192 	mov	a,_bp
      0021F7 24 0E            [12] 6193 	add	a,#0x0e
      0021F9 F8               [12] 6194 	mov	r0,a
      0021FA E6               [12] 6195 	mov	a,@r0
      0021FB C0 E0            [24] 6196 	push	acc
      0021FD 08               [12] 6197 	inc	r0
      0021FE E6               [12] 6198 	mov	a,@r0
      0021FF C0 E0            [24] 6199 	push	acc
      002201 08               [12] 6200 	inc	r0
      002202 E6               [12] 6201 	mov	a,@r0
      002203 C0 E0            [24] 6202 	push	acc
      002205 8D 82            [24] 6203 	mov	dpl,r5
      002207 8E 83            [24] 6204 	mov	dph,r6
      002209 8F F0            [24] 6205 	mov	b,r7
      00220B 12r00r00         [24] 6206 	lcall	_stack_pop
      00220E AE 82            [24] 6207 	mov	r6,dpl
      002210 AF 83            [24] 6208 	mov	r7,dph
      002212 15 81            [12] 6209 	dec	sp
      002214 15 81            [12] 6210 	dec	sp
      002216 15 81            [12] 6211 	dec	sp
      002218 D0 02            [24] 6212 	pop	ar2
      00221A D0 03            [24] 6213 	pop	ar3
      00221C D0 04            [24] 6214 	pop	ar4
      00221E EE               [12] 6215 	mov	a,r6
      00221F 4F               [12] 6216 	orl	a,r7
      002220 70 5C            [24] 6217 	jnz	00211$
                                   6218 ;	calc.c:289: (void)stack_push(ctx->ps, d0);
      002222 8A 82            [24] 6219 	mov	dpl,r2
      002224 8B 83            [24] 6220 	mov	dph,r3
      002226 8C F0            [24] 6221 	mov	b,r4
      002228 12r00r00         [24] 6222 	lcall	__gptrget
      00222B FD               [12] 6223 	mov	r5,a
      00222C A3               [24] 6224 	inc	dptr
      00222D 12r00r00         [24] 6225 	lcall	__gptrget
      002230 FE               [12] 6226 	mov	r6,a
      002231 A3               [24] 6227 	inc	dptr
      002232 12r00r00         [24] 6228 	lcall	__gptrget
      002235 FF               [12] 6229 	mov	r7,a
      002236 E5*00            [12] 6230 	mov	a,_bp
      002238 24 15            [12] 6231 	add	a,#0x15
      00223A F8               [12] 6232 	mov	r0,a
      00223B E6               [12] 6233 	mov	a,@r0
      00223C C0 E0            [24] 6234 	push	acc
      00223E 08               [12] 6235 	inc	r0
      00223F E6               [12] 6236 	mov	a,@r0
      002240 C0 E0            [24] 6237 	push	acc
      002242 08               [12] 6238 	inc	r0
      002243 E6               [12] 6239 	mov	a,@r0
      002244 C0 E0            [24] 6240 	push	acc
      002246 08               [12] 6241 	inc	r0
      002247 E6               [12] 6242 	mov	a,@r0
      002248 C0 E0            [24] 6243 	push	acc
      00224A 8D 82            [24] 6244 	mov	dpl,r5
      00224C 8E 83            [24] 6245 	mov	dph,r6
      00224E 8F F0            [24] 6246 	mov	b,r7
      002250 12r00r00         [24] 6247 	lcall	_stack_push
      002253 E5 81            [12] 6248 	mov	a,sp
      002255 24 FC            [12] 6249 	add	a,#0xfc
      002257 F5 81            [12] 6250 	mov	sp,a
                                   6251 ;	calc.c:290: printstr("\r\nstack underflow\r\n");
      002259 7Dr44            [12] 6252 	mov	r5,#___str_10
      00225B 7Cs00            [12] 6253 	mov	r4,#(___str_10 >> 8)
      00225D 7B 80            [12] 6254 	mov	r3,#0x80
                                   6255 ;	calc.c:51: return;
      00225F                       6256 00469$:
                                   6257 ;	calc.c:49: for (; *s; s++) putchar(*s);
      00225F 8D 82            [24] 6258 	mov	dpl,r5
      002261 8C 83            [24] 6259 	mov	dph,r4
      002263 8B F0            [24] 6260 	mov	b,r3
      002265 12r00r00         [24] 6261 	lcall	__gptrget
      002268 FF               [12] 6262 	mov	r7,a
      002269 70 03            [24] 6263 	jnz	01373$
      00226B 02r2Ar46         [24] 6264 	ljmp	00249$
      00226E                       6265 01373$:
      00226E 7E 00            [12] 6266 	mov	r6,#0x00
      002270 8F 82            [24] 6267 	mov	dpl,r7
      002272 8E 83            [24] 6268 	mov	dph,r6
      002274 12r00r00         [24] 6269 	lcall	_putchar
      002277 0D               [12] 6270 	inc	r5
                                   6271 ;	calc.c:290: printstr("\r\nstack underflow\r\n");
      002278 BD 00 E4         [24] 6272 	cjne	r5,#0x00,00469$
      00227B 0C               [12] 6273 	inc	r4
      00227C 80 E1            [24] 6274 	sjmp	00469$
      00227E                       6275 00211$:
                                   6276 ;	calc.c:292: d1 |= d0;
      00227E E5*00            [12] 6277 	mov	a,_bp
      002280 24 19            [12] 6278 	add	a,#0x19
      002282 F8               [12] 6279 	mov	r0,a
      002283 E5*00            [12] 6280 	mov	a,_bp
      002285 24 15            [12] 6281 	add	a,#0x15
      002287 F9               [12] 6282 	mov	r1,a
      002288 E7               [12] 6283 	mov	a,@r1
      002289 46               [12] 6284 	orl	a,@r0
      00228A F6               [12] 6285 	mov	@r0,a
      00228B 09               [12] 6286 	inc	r1
      00228C E7               [12] 6287 	mov	a,@r1
      00228D 08               [12] 6288 	inc	r0
      00228E 46               [12] 6289 	orl	a,@r0
      00228F F6               [12] 6290 	mov	@r0,a
      002290 09               [12] 6291 	inc	r1
      002291 E7               [12] 6292 	mov	a,@r1
      002292 08               [12] 6293 	inc	r0
      002293 46               [12] 6294 	orl	a,@r0
      002294 F6               [12] 6295 	mov	@r0,a
      002295 09               [12] 6296 	inc	r1
      002296 E7               [12] 6297 	mov	a,@r1
      002297 08               [12] 6298 	inc	r0
      002298 46               [12] 6299 	orl	a,@r0
      002299 F6               [12] 6300 	mov	@r0,a
                                   6301 ;	calc.c:293: (void)stack_push(ctx->ps, d1);
      00229A 8A 82            [24] 6302 	mov	dpl,r2
      00229C 8B 83            [24] 6303 	mov	dph,r3
      00229E 8C F0            [24] 6304 	mov	b,r4
      0022A0 12r00r00         [24] 6305 	lcall	__gptrget
      0022A3 FA               [12] 6306 	mov	r2,a
      0022A4 A3               [24] 6307 	inc	dptr
      0022A5 12r00r00         [24] 6308 	lcall	__gptrget
      0022A8 FB               [12] 6309 	mov	r3,a
      0022A9 A3               [24] 6310 	inc	dptr
      0022AA 12r00r00         [24] 6311 	lcall	__gptrget
      0022AD FC               [12] 6312 	mov	r4,a
      0022AE E5*00            [12] 6313 	mov	a,_bp
      0022B0 24 19            [12] 6314 	add	a,#0x19
      0022B2 F8               [12] 6315 	mov	r0,a
      0022B3 E6               [12] 6316 	mov	a,@r0
      0022B4 C0 E0            [24] 6317 	push	acc
      0022B6 08               [12] 6318 	inc	r0
      0022B7 E6               [12] 6319 	mov	a,@r0
      0022B8 C0 E0            [24] 6320 	push	acc
      0022BA 08               [12] 6321 	inc	r0
      0022BB E6               [12] 6322 	mov	a,@r0
      0022BC C0 E0            [24] 6323 	push	acc
      0022BE 08               [12] 6324 	inc	r0
      0022BF E6               [12] 6325 	mov	a,@r0
      0022C0 C0 E0            [24] 6326 	push	acc
      0022C2 8A 82            [24] 6327 	mov	dpl,r2
      0022C4 8B 83            [24] 6328 	mov	dph,r3
      0022C6 8C F0            [24] 6329 	mov	b,r4
      0022C8 12r00r00         [24] 6330 	lcall	_stack_push
      0022CB E5 81            [12] 6331 	mov	a,sp
      0022CD 24 FC            [12] 6332 	add	a,#0xfc
      0022CF F5 81            [12] 6333 	mov	sp,a
                                   6334 ;	calc.c:295: break;
      0022D1 02r2Ar46         [24] 6335 	ljmp	00249$
                                   6336 ;	calc.c:296: case '^':
      0022D4                       6337 00216$:
                                   6338 ;	calc.c:297: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      0022D4 E5*00            [12] 6339 	mov	a,_bp
      0022D6 24 15            [12] 6340 	add	a,#0x15
      0022D8 FF               [12] 6341 	mov	r7,a
      0022D9 E5*00            [12] 6342 	mov	a,_bp
      0022DB 24 0E            [12] 6343 	add	a,#0x0e
      0022DD F8               [12] 6344 	mov	r0,a
      0022DE A6 07            [24] 6345 	mov	@r0,ar7
      0022E0 08               [12] 6346 	inc	r0
      0022E1 76 00            [12] 6347 	mov	@r0,#0x00
      0022E3 08               [12] 6348 	inc	r0
      0022E4 76 40            [12] 6349 	mov	@r0,#0x40
      0022E6 E5*00            [12] 6350 	mov	a,_bp
      0022E8 24 12            [12] 6351 	add	a,#0x12
      0022EA F8               [12] 6352 	mov	r0,a
      0022EB 74 11            [12] 6353 	mov	a,#0x11
      0022ED 26               [12] 6354 	add	a,@r0
      0022EE FA               [12] 6355 	mov	r2,a
      0022EF 74 40            [12] 6356 	mov	a,#0x40
      0022F1 08               [12] 6357 	inc	r0
      0022F2 36               [12] 6358 	addc	a,@r0
      0022F3 FB               [12] 6359 	mov	r3,a
      0022F4 08               [12] 6360 	inc	r0
      0022F5 86 04            [24] 6361 	mov	ar4,@r0
      0022F7 8A 82            [24] 6362 	mov	dpl,r2
      0022F9 8B 83            [24] 6363 	mov	dph,r3
      0022FB 8C F0            [24] 6364 	mov	b,r4
      0022FD 12r00r00         [24] 6365 	lcall	__gptrget
      002300 FD               [12] 6366 	mov	r5,a
      002301 A3               [24] 6367 	inc	dptr
      002302 12r00r00         [24] 6368 	lcall	__gptrget
      002305 FE               [12] 6369 	mov	r6,a
      002306 A3               [24] 6370 	inc	dptr
      002307 12r00r00         [24] 6371 	lcall	__gptrget
      00230A FF               [12] 6372 	mov	r7,a
      00230B C0 04            [24] 6373 	push	ar4
      00230D C0 03            [24] 6374 	push	ar3
      00230F C0 02            [24] 6375 	push	ar2
      002311 E5*00            [12] 6376 	mov	a,_bp
      002313 24 0E            [12] 6377 	add	a,#0x0e
      002315 F8               [12] 6378 	mov	r0,a
      002316 E6               [12] 6379 	mov	a,@r0
      002317 C0 E0            [24] 6380 	push	acc
      002319 08               [12] 6381 	inc	r0
      00231A E6               [12] 6382 	mov	a,@r0
      00231B C0 E0            [24] 6383 	push	acc
      00231D 08               [12] 6384 	inc	r0
      00231E E6               [12] 6385 	mov	a,@r0
      00231F C0 E0            [24] 6386 	push	acc
      002321 8D 82            [24] 6387 	mov	dpl,r5
      002323 8E 83            [24] 6388 	mov	dph,r6
      002325 8F F0            [24] 6389 	mov	b,r7
      002327 12r00r00         [24] 6390 	lcall	_stack_pop
      00232A AE 82            [24] 6391 	mov	r6,dpl
      00232C AF 83            [24] 6392 	mov	r7,dph
      00232E 15 81            [12] 6393 	dec	sp
      002330 15 81            [12] 6394 	dec	sp
      002332 15 81            [12] 6395 	dec	sp
      002334 D0 02            [24] 6396 	pop	ar2
      002336 D0 03            [24] 6397 	pop	ar3
      002338 D0 04            [24] 6398 	pop	ar4
      00233A EE               [12] 6399 	mov	a,r6
      00233B 4F               [12] 6400 	orl	a,r7
      00233C 70 25            [24] 6401 	jnz	00221$
      00233E 7Dr44            [12] 6402 	mov	r5,#___str_10
      002340 7Cs00            [12] 6403 	mov	r4,#(___str_10 >> 8)
      002342 7B 80            [12] 6404 	mov	r3,#0x80
                                   6405 ;	calc.c:51: return;
      002344                       6406 00472$:
                                   6407 ;	calc.c:49: for (; *s; s++) putchar(*s);
      002344 8D 82            [24] 6408 	mov	dpl,r5
      002346 8C 83            [24] 6409 	mov	dph,r4
      002348 8B F0            [24] 6410 	mov	b,r3
      00234A 12r00r00         [24] 6411 	lcall	__gptrget
      00234D FF               [12] 6412 	mov	r7,a
      00234E 70 03            [24] 6413 	jnz	01376$
      002350 02r2Ar46         [24] 6414 	ljmp	00249$
      002353                       6415 01376$:
      002353 7E 00            [12] 6416 	mov	r6,#0x00
      002355 8F 82            [24] 6417 	mov	dpl,r7
      002357 8E 83            [24] 6418 	mov	dph,r6
      002359 12r00r00         [24] 6419 	lcall	_putchar
      00235C 0D               [12] 6420 	inc	r5
                                   6421 ;	calc.c:297: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      00235D BD 00 E4         [24] 6422 	cjne	r5,#0x00,00472$
      002360 0C               [12] 6423 	inc	r4
      002361 80 E1            [24] 6424 	sjmp	00472$
      002363                       6425 00221$:
                                   6426 ;	calc.c:298: else if (!stack_pop(ctx->ps, &d1)) {
      002363 E5*00            [12] 6427 	mov	a,_bp
      002365 24 19            [12] 6428 	add	a,#0x19
      002367 FF               [12] 6429 	mov	r7,a
      002368 E5*00            [12] 6430 	mov	a,_bp
      00236A 24 0E            [12] 6431 	add	a,#0x0e
      00236C F8               [12] 6432 	mov	r0,a
      00236D A6 07            [24] 6433 	mov	@r0,ar7
      00236F 08               [12] 6434 	inc	r0
      002370 76 00            [12] 6435 	mov	@r0,#0x00
      002372 08               [12] 6436 	inc	r0
      002373 76 40            [12] 6437 	mov	@r0,#0x40
      002375 8A 82            [24] 6438 	mov	dpl,r2
      002377 8B 83            [24] 6439 	mov	dph,r3
      002379 8C F0            [24] 6440 	mov	b,r4
      00237B 12r00r00         [24] 6441 	lcall	__gptrget
      00237E FD               [12] 6442 	mov	r5,a
      00237F A3               [24] 6443 	inc	dptr
      002380 12r00r00         [24] 6444 	lcall	__gptrget
      002383 FE               [12] 6445 	mov	r6,a
      002384 A3               [24] 6446 	inc	dptr
      002385 12r00r00         [24] 6447 	lcall	__gptrget
      002388 FF               [12] 6448 	mov	r7,a
      002389 C0 04            [24] 6449 	push	ar4
      00238B C0 03            [24] 6450 	push	ar3
      00238D C0 02            [24] 6451 	push	ar2
      00238F E5*00            [12] 6452 	mov	a,_bp
      002391 24 0E            [12] 6453 	add	a,#0x0e
      002393 F8               [12] 6454 	mov	r0,a
      002394 E6               [12] 6455 	mov	a,@r0
      002395 C0 E0            [24] 6456 	push	acc
      002397 08               [12] 6457 	inc	r0
      002398 E6               [12] 6458 	mov	a,@r0
      002399 C0 E0            [24] 6459 	push	acc
      00239B 08               [12] 6460 	inc	r0
      00239C E6               [12] 6461 	mov	a,@r0
      00239D C0 E0            [24] 6462 	push	acc
      00239F 8D 82            [24] 6463 	mov	dpl,r5
      0023A1 8E 83            [24] 6464 	mov	dph,r6
      0023A3 8F F0            [24] 6465 	mov	b,r7
      0023A5 12r00r00         [24] 6466 	lcall	_stack_pop
      0023A8 AE 82            [24] 6467 	mov	r6,dpl
      0023AA AF 83            [24] 6468 	mov	r7,dph
      0023AC 15 81            [12] 6469 	dec	sp
      0023AE 15 81            [12] 6470 	dec	sp
      0023B0 15 81            [12] 6471 	dec	sp
      0023B2 D0 02            [24] 6472 	pop	ar2
      0023B4 D0 03            [24] 6473 	pop	ar3
      0023B6 D0 04            [24] 6474 	pop	ar4
      0023B8 EE               [12] 6475 	mov	a,r6
      0023B9 4F               [12] 6476 	orl	a,r7
      0023BA 70 5C            [24] 6477 	jnz	00218$
                                   6478 ;	calc.c:299: (void)stack_push(ctx->ps, d0);
      0023BC 8A 82            [24] 6479 	mov	dpl,r2
      0023BE 8B 83            [24] 6480 	mov	dph,r3
      0023C0 8C F0            [24] 6481 	mov	b,r4
      0023C2 12r00r00         [24] 6482 	lcall	__gptrget
      0023C5 FD               [12] 6483 	mov	r5,a
      0023C6 A3               [24] 6484 	inc	dptr
      0023C7 12r00r00         [24] 6485 	lcall	__gptrget
      0023CA FE               [12] 6486 	mov	r6,a
      0023CB A3               [24] 6487 	inc	dptr
      0023CC 12r00r00         [24] 6488 	lcall	__gptrget
      0023CF FF               [12] 6489 	mov	r7,a
      0023D0 E5*00            [12] 6490 	mov	a,_bp
      0023D2 24 15            [12] 6491 	add	a,#0x15
      0023D4 F8               [12] 6492 	mov	r0,a
      0023D5 E6               [12] 6493 	mov	a,@r0
      0023D6 C0 E0            [24] 6494 	push	acc
      0023D8 08               [12] 6495 	inc	r0
      0023D9 E6               [12] 6496 	mov	a,@r0
      0023DA C0 E0            [24] 6497 	push	acc
      0023DC 08               [12] 6498 	inc	r0
      0023DD E6               [12] 6499 	mov	a,@r0
      0023DE C0 E0            [24] 6500 	push	acc
      0023E0 08               [12] 6501 	inc	r0
      0023E1 E6               [12] 6502 	mov	a,@r0
      0023E2 C0 E0            [24] 6503 	push	acc
      0023E4 8D 82            [24] 6504 	mov	dpl,r5
      0023E6 8E 83            [24] 6505 	mov	dph,r6
      0023E8 8F F0            [24] 6506 	mov	b,r7
      0023EA 12r00r00         [24] 6507 	lcall	_stack_push
      0023ED E5 81            [12] 6508 	mov	a,sp
      0023EF 24 FC            [12] 6509 	add	a,#0xfc
      0023F1 F5 81            [12] 6510 	mov	sp,a
                                   6511 ;	calc.c:300: printstr("\r\nstack underflow\r\n");
      0023F3 7Dr44            [12] 6512 	mov	r5,#___str_10
      0023F5 7Cs00            [12] 6513 	mov	r4,#(___str_10 >> 8)
      0023F7 7B 80            [12] 6514 	mov	r3,#0x80
                                   6515 ;	calc.c:51: return;
      0023F9                       6516 00475$:
                                   6517 ;	calc.c:49: for (; *s; s++) putchar(*s);
      0023F9 8D 82            [24] 6518 	mov	dpl,r5
      0023FB 8C 83            [24] 6519 	mov	dph,r4
      0023FD 8B F0            [24] 6520 	mov	b,r3
      0023FF 12r00r00         [24] 6521 	lcall	__gptrget
      002402 FF               [12] 6522 	mov	r7,a
      002403 70 03            [24] 6523 	jnz	01379$
      002405 02r2Ar46         [24] 6524 	ljmp	00249$
      002408                       6525 01379$:
      002408 7E 00            [12] 6526 	mov	r6,#0x00
      00240A 8F 82            [24] 6527 	mov	dpl,r7
      00240C 8E 83            [24] 6528 	mov	dph,r6
      00240E 12r00r00         [24] 6529 	lcall	_putchar
      002411 0D               [12] 6530 	inc	r5
                                   6531 ;	calc.c:300: printstr("\r\nstack underflow\r\n");
      002412 BD 00 E4         [24] 6532 	cjne	r5,#0x00,00475$
      002415 0C               [12] 6533 	inc	r4
      002416 80 E1            [24] 6534 	sjmp	00475$
      002418                       6535 00218$:
                                   6536 ;	calc.c:302: d1 ^= d0;
      002418 E5*00            [12] 6537 	mov	a,_bp
      00241A 24 19            [12] 6538 	add	a,#0x19
      00241C F8               [12] 6539 	mov	r0,a
      00241D E5*00            [12] 6540 	mov	a,_bp
      00241F 24 15            [12] 6541 	add	a,#0x15
      002421 F9               [12] 6542 	mov	r1,a
      002422 E7               [12] 6543 	mov	a,@r1
      002423 66               [12] 6544 	xrl	a,@r0
      002424 F6               [12] 6545 	mov	@r0,a
      002425 09               [12] 6546 	inc	r1
      002426 E7               [12] 6547 	mov	a,@r1
      002427 08               [12] 6548 	inc	r0
      002428 66               [12] 6549 	xrl	a,@r0
      002429 F6               [12] 6550 	mov	@r0,a
      00242A 09               [12] 6551 	inc	r1
      00242B E7               [12] 6552 	mov	a,@r1
      00242C 08               [12] 6553 	inc	r0
      00242D 66               [12] 6554 	xrl	a,@r0
      00242E F6               [12] 6555 	mov	@r0,a
      00242F 09               [12] 6556 	inc	r1
      002430 E7               [12] 6557 	mov	a,@r1
      002431 08               [12] 6558 	inc	r0
      002432 66               [12] 6559 	xrl	a,@r0
      002433 F6               [12] 6560 	mov	@r0,a
                                   6561 ;	calc.c:303: (void)stack_push(ctx->ps, d1);
      002434 8A 82            [24] 6562 	mov	dpl,r2
      002436 8B 83            [24] 6563 	mov	dph,r3
      002438 8C F0            [24] 6564 	mov	b,r4
      00243A 12r00r00         [24] 6565 	lcall	__gptrget
      00243D FA               [12] 6566 	mov	r2,a
      00243E A3               [24] 6567 	inc	dptr
      00243F 12r00r00         [24] 6568 	lcall	__gptrget
      002442 FB               [12] 6569 	mov	r3,a
      002443 A3               [24] 6570 	inc	dptr
      002444 12r00r00         [24] 6571 	lcall	__gptrget
      002447 FC               [12] 6572 	mov	r4,a
      002448 E5*00            [12] 6573 	mov	a,_bp
      00244A 24 19            [12] 6574 	add	a,#0x19
      00244C F8               [12] 6575 	mov	r0,a
      00244D E6               [12] 6576 	mov	a,@r0
      00244E C0 E0            [24] 6577 	push	acc
      002450 08               [12] 6578 	inc	r0
      002451 E6               [12] 6579 	mov	a,@r0
      002452 C0 E0            [24] 6580 	push	acc
      002454 08               [12] 6581 	inc	r0
      002455 E6               [12] 6582 	mov	a,@r0
      002456 C0 E0            [24] 6583 	push	acc
      002458 08               [12] 6584 	inc	r0
      002459 E6               [12] 6585 	mov	a,@r0
      00245A C0 E0            [24] 6586 	push	acc
      00245C 8A 82            [24] 6587 	mov	dpl,r2
      00245E 8B 83            [24] 6588 	mov	dph,r3
      002460 8C F0            [24] 6589 	mov	b,r4
      002462 12r00r00         [24] 6590 	lcall	_stack_push
      002465 E5 81            [12] 6591 	mov	a,sp
      002467 24 FC            [12] 6592 	add	a,#0xfc
      002469 F5 81            [12] 6593 	mov	sp,a
                                   6594 ;	calc.c:305: break;
      00246B 02r2Ar46         [24] 6595 	ljmp	00249$
                                   6596 ;	calc.c:306: case '>':
      00246E                       6597 00223$:
                                   6598 ;	calc.c:307: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      00246E E5*00            [12] 6599 	mov	a,_bp
      002470 24 15            [12] 6600 	add	a,#0x15
      002472 FC               [12] 6601 	mov	r4,a
      002473 7B 00            [12] 6602 	mov	r3,#0x00
      002475 7A 40            [12] 6603 	mov	r2,#0x40
      002477 E5*00            [12] 6604 	mov	a,_bp
      002479 24 12            [12] 6605 	add	a,#0x12
      00247B F8               [12] 6606 	mov	r0,a
      00247C E5*00            [12] 6607 	mov	a,_bp
      00247E 24 0B            [12] 6608 	add	a,#0x0b
      002480 F9               [12] 6609 	mov	r1,a
      002481 74 11            [12] 6610 	mov	a,#0x11
      002483 26               [12] 6611 	add	a,@r0
      002484 F7               [12] 6612 	mov	@r1,a
      002485 74 40            [12] 6613 	mov	a,#0x40
      002487 08               [12] 6614 	inc	r0
      002488 36               [12] 6615 	addc	a,@r0
      002489 09               [12] 6616 	inc	r1
      00248A F7               [12] 6617 	mov	@r1,a
      00248B 08               [12] 6618 	inc	r0
      00248C 09               [12] 6619 	inc	r1
      00248D E6               [12] 6620 	mov	a,@r0
      00248E F7               [12] 6621 	mov	@r1,a
      00248F E5*00            [12] 6622 	mov	a,_bp
      002491 24 0B            [12] 6623 	add	a,#0x0b
      002493 F8               [12] 6624 	mov	r0,a
      002494 86 82            [24] 6625 	mov	dpl,@r0
      002496 08               [12] 6626 	inc	r0
      002497 86 83            [24] 6627 	mov	dph,@r0
      002499 08               [12] 6628 	inc	r0
      00249A 86 F0            [24] 6629 	mov	b,@r0
      00249C 12r00r00         [24] 6630 	lcall	__gptrget
      00249F FD               [12] 6631 	mov	r5,a
      0024A0 A3               [24] 6632 	inc	dptr
      0024A1 12r00r00         [24] 6633 	lcall	__gptrget
      0024A4 FE               [12] 6634 	mov	r6,a
      0024A5 A3               [24] 6635 	inc	dptr
      0024A6 12r00r00         [24] 6636 	lcall	__gptrget
      0024A9 FF               [12] 6637 	mov	r7,a
      0024AA C0 04            [24] 6638 	push	ar4
      0024AC C0 03            [24] 6639 	push	ar3
      0024AE C0 02            [24] 6640 	push	ar2
      0024B0 8D 82            [24] 6641 	mov	dpl,r5
      0024B2 8E 83            [24] 6642 	mov	dph,r6
      0024B4 8F F0            [24] 6643 	mov	b,r7
      0024B6 12r00r00         [24] 6644 	lcall	_stack_pop
      0024B9 AE 82            [24] 6645 	mov	r6,dpl
      0024BB AF 83            [24] 6646 	mov	r7,dph
      0024BD 15 81            [12] 6647 	dec	sp
      0024BF 15 81            [12] 6648 	dec	sp
      0024C1 15 81            [12] 6649 	dec	sp
      0024C3 EE               [12] 6650 	mov	a,r6
      0024C4 4F               [12] 6651 	orl	a,r7
      0024C5 70 25            [24] 6652 	jnz	00228$
      0024C7 7Dr44            [12] 6653 	mov	r5,#___str_10
      0024C9 7Cs00            [12] 6654 	mov	r4,#(___str_10 >> 8)
      0024CB 7B 80            [12] 6655 	mov	r3,#0x80
                                   6656 ;	calc.c:51: return;
      0024CD                       6657 00478$:
                                   6658 ;	calc.c:49: for (; *s; s++) putchar(*s);
      0024CD 8D 82            [24] 6659 	mov	dpl,r5
      0024CF 8C 83            [24] 6660 	mov	dph,r4
      0024D1 8B F0            [24] 6661 	mov	b,r3
      0024D3 12r00r00         [24] 6662 	lcall	__gptrget
      0024D6 FF               [12] 6663 	mov	r7,a
      0024D7 70 03            [24] 6664 	jnz	01382$
      0024D9 02r2Ar46         [24] 6665 	ljmp	00249$
      0024DC                       6666 01382$:
      0024DC 7E 00            [12] 6667 	mov	r6,#0x00
      0024DE 8F 82            [24] 6668 	mov	dpl,r7
      0024E0 8E 83            [24] 6669 	mov	dph,r6
      0024E2 12r00r00         [24] 6670 	lcall	_putchar
      0024E5 0D               [12] 6671 	inc	r5
                                   6672 ;	calc.c:307: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      0024E6 BD 00 E4         [24] 6673 	cjne	r5,#0x00,00478$
      0024E9 0C               [12] 6674 	inc	r4
      0024EA 80 E1            [24] 6675 	sjmp	00478$
      0024EC                       6676 00228$:
                                   6677 ;	calc.c:308: else if (!stack_pop(ctx->ps, &d1)) {
      0024EC E5*00            [12] 6678 	mov	a,_bp
      0024EE 24 19            [12] 6679 	add	a,#0x19
      0024F0 FC               [12] 6680 	mov	r4,a
      0024F1 7B 00            [12] 6681 	mov	r3,#0x00
      0024F3 7A 40            [12] 6682 	mov	r2,#0x40
      0024F5 E5*00            [12] 6683 	mov	a,_bp
      0024F7 24 0B            [12] 6684 	add	a,#0x0b
      0024F9 F8               [12] 6685 	mov	r0,a
      0024FA 86 82            [24] 6686 	mov	dpl,@r0
      0024FC 08               [12] 6687 	inc	r0
      0024FD 86 83            [24] 6688 	mov	dph,@r0
      0024FF 08               [12] 6689 	inc	r0
      002500 86 F0            [24] 6690 	mov	b,@r0
      002502 12r00r00         [24] 6691 	lcall	__gptrget
      002505 FD               [12] 6692 	mov	r5,a
      002506 A3               [24] 6693 	inc	dptr
      002507 12r00r00         [24] 6694 	lcall	__gptrget
      00250A FE               [12] 6695 	mov	r6,a
      00250B A3               [24] 6696 	inc	dptr
      00250C 12r00r00         [24] 6697 	lcall	__gptrget
      00250F FF               [12] 6698 	mov	r7,a
      002510 C0 04            [24] 6699 	push	ar4
      002512 C0 03            [24] 6700 	push	ar3
      002514 C0 02            [24] 6701 	push	ar2
      002516 8D 82            [24] 6702 	mov	dpl,r5
      002518 8E 83            [24] 6703 	mov	dph,r6
      00251A 8F F0            [24] 6704 	mov	b,r7
      00251C 12r00r00         [24] 6705 	lcall	_stack_pop
      00251F AE 82            [24] 6706 	mov	r6,dpl
      002521 AF 83            [24] 6707 	mov	r7,dph
      002523 15 81            [12] 6708 	dec	sp
      002525 15 81            [12] 6709 	dec	sp
      002527 15 81            [12] 6710 	dec	sp
      002529 EE               [12] 6711 	mov	a,r6
      00252A 4F               [12] 6712 	orl	a,r7
      00252B 70 63            [24] 6713 	jnz	00225$
                                   6714 ;	calc.c:309: (void)stack_push(ctx->ps, d0);
      00252D E5*00            [12] 6715 	mov	a,_bp
      00252F 24 0B            [12] 6716 	add	a,#0x0b
      002531 F8               [12] 6717 	mov	r0,a
      002532 86 82            [24] 6718 	mov	dpl,@r0
      002534 08               [12] 6719 	inc	r0
      002535 86 83            [24] 6720 	mov	dph,@r0
      002537 08               [12] 6721 	inc	r0
      002538 86 F0            [24] 6722 	mov	b,@r0
      00253A 12r00r00         [24] 6723 	lcall	__gptrget
      00253D FD               [12] 6724 	mov	r5,a
      00253E A3               [24] 6725 	inc	dptr
      00253F 12r00r00         [24] 6726 	lcall	__gptrget
      002542 FE               [12] 6727 	mov	r6,a
      002543 A3               [24] 6728 	inc	dptr
      002544 12r00r00         [24] 6729 	lcall	__gptrget
      002547 FF               [12] 6730 	mov	r7,a
      002548 E5*00            [12] 6731 	mov	a,_bp
      00254A 24 15            [12] 6732 	add	a,#0x15
      00254C F8               [12] 6733 	mov	r0,a
      00254D E6               [12] 6734 	mov	a,@r0
      00254E C0 E0            [24] 6735 	push	acc
      002550 08               [12] 6736 	inc	r0
      002551 E6               [12] 6737 	mov	a,@r0
      002552 C0 E0            [24] 6738 	push	acc
      002554 08               [12] 6739 	inc	r0
      002555 E6               [12] 6740 	mov	a,@r0
      002556 C0 E0            [24] 6741 	push	acc
      002558 08               [12] 6742 	inc	r0
      002559 E6               [12] 6743 	mov	a,@r0
      00255A C0 E0            [24] 6744 	push	acc
      00255C 8D 82            [24] 6745 	mov	dpl,r5
      00255E 8E 83            [24] 6746 	mov	dph,r6
      002560 8F F0            [24] 6747 	mov	b,r7
      002562 12r00r00         [24] 6748 	lcall	_stack_push
      002565 E5 81            [12] 6749 	mov	a,sp
      002567 24 FC            [12] 6750 	add	a,#0xfc
      002569 F5 81            [12] 6751 	mov	sp,a
                                   6752 ;	calc.c:310: printstr("\r\nstack underflow\r\n");
      00256B 7Dr44            [12] 6753 	mov	r5,#___str_10
      00256D 7Cs00            [12] 6754 	mov	r4,#(___str_10 >> 8)
      00256F 7B 80            [12] 6755 	mov	r3,#0x80
                                   6756 ;	calc.c:51: return;
      002571                       6757 00481$:
                                   6758 ;	calc.c:49: for (; *s; s++) putchar(*s);
      002571 8D 82            [24] 6759 	mov	dpl,r5
      002573 8C 83            [24] 6760 	mov	dph,r4
      002575 8B F0            [24] 6761 	mov	b,r3
      002577 12r00r00         [24] 6762 	lcall	__gptrget
      00257A FF               [12] 6763 	mov	r7,a
      00257B 70 03            [24] 6764 	jnz	01385$
      00257D 02r2Ar46         [24] 6765 	ljmp	00249$
      002580                       6766 01385$:
      002580 7E 00            [12] 6767 	mov	r6,#0x00
      002582 8F 82            [24] 6768 	mov	dpl,r7
      002584 8E 83            [24] 6769 	mov	dph,r6
      002586 12r00r00         [24] 6770 	lcall	_putchar
      002589 0D               [12] 6771 	inc	r5
                                   6772 ;	calc.c:310: printstr("\r\nstack underflow\r\n");
      00258A BD 00 E4         [24] 6773 	cjne	r5,#0x00,00481$
      00258D 0C               [12] 6774 	inc	r4
      00258E 80 E1            [24] 6775 	sjmp	00481$
      002590                       6776 00225$:
                                   6777 ;	calc.c:312: d1 = (unsigned long)d1 >> ((unsigned long)d0 & 0x0000001flu);
      002590 E5*00            [12] 6778 	mov	a,_bp
      002592 24 19            [12] 6779 	add	a,#0x19
      002594 F8               [12] 6780 	mov	r0,a
      002595 86 04            [24] 6781 	mov	ar4,@r0
      002597 08               [12] 6782 	inc	r0
      002598 86 05            [24] 6783 	mov	ar5,@r0
      00259A 08               [12] 6784 	inc	r0
      00259B 86 06            [24] 6785 	mov	ar6,@r0
      00259D 08               [12] 6786 	inc	r0
      00259E 86 07            [24] 6787 	mov	ar7,@r0
      0025A0 E5*00            [12] 6788 	mov	a,_bp
      0025A2 24 15            [12] 6789 	add	a,#0x15
      0025A4 F8               [12] 6790 	mov	r0,a
      0025A5 86 03            [24] 6791 	mov	ar3,@r0
      0025A7 53 03 1F         [24] 6792 	anl	ar3,#0x1f
      0025AA 8B F0            [24] 6793 	mov	b,r3
      0025AC 05 F0            [12] 6794 	inc	b
      0025AE 80 0D            [24] 6795 	sjmp	01388$
      0025B0                       6796 01387$:
      0025B0 C3               [12] 6797 	clr	c
      0025B1 EF               [12] 6798 	mov	a,r7
      0025B2 13               [12] 6799 	rrc	a
      0025B3 FF               [12] 6800 	mov	r7,a
      0025B4 EE               [12] 6801 	mov	a,r6
      0025B5 13               [12] 6802 	rrc	a
      0025B6 FE               [12] 6803 	mov	r6,a
      0025B7 ED               [12] 6804 	mov	a,r5
      0025B8 13               [12] 6805 	rrc	a
      0025B9 FD               [12] 6806 	mov	r5,a
      0025BA EC               [12] 6807 	mov	a,r4
      0025BB 13               [12] 6808 	rrc	a
      0025BC FC               [12] 6809 	mov	r4,a
      0025BD                       6810 01388$:
      0025BD D5 F0 F0         [24] 6811 	djnz	b,01387$
      0025C0 E5*00            [12] 6812 	mov	a,_bp
      0025C2 24 19            [12] 6813 	add	a,#0x19
      0025C4 F8               [12] 6814 	mov	r0,a
      0025C5 A6 04            [24] 6815 	mov	@r0,ar4
      0025C7 08               [12] 6816 	inc	r0
      0025C8 A6 05            [24] 6817 	mov	@r0,ar5
      0025CA 08               [12] 6818 	inc	r0
      0025CB A6 06            [24] 6819 	mov	@r0,ar6
      0025CD 08               [12] 6820 	inc	r0
      0025CE A6 07            [24] 6821 	mov	@r0,ar7
                                   6822 ;	calc.c:313: (void)stack_push(ctx->ps, d1);
      0025D0 E5*00            [12] 6823 	mov	a,_bp
      0025D2 24 0B            [12] 6824 	add	a,#0x0b
      0025D4 F8               [12] 6825 	mov	r0,a
      0025D5 86 82            [24] 6826 	mov	dpl,@r0
      0025D7 08               [12] 6827 	inc	r0
      0025D8 86 83            [24] 6828 	mov	dph,@r0
      0025DA 08               [12] 6829 	inc	r0
      0025DB 86 F0            [24] 6830 	mov	b,@r0
      0025DD 12r00r00         [24] 6831 	lcall	__gptrget
      0025E0 FD               [12] 6832 	mov	r5,a
      0025E1 A3               [24] 6833 	inc	dptr
      0025E2 12r00r00         [24] 6834 	lcall	__gptrget
      0025E5 FE               [12] 6835 	mov	r6,a
      0025E6 A3               [24] 6836 	inc	dptr
      0025E7 12r00r00         [24] 6837 	lcall	__gptrget
      0025EA FF               [12] 6838 	mov	r7,a
      0025EB E5*00            [12] 6839 	mov	a,_bp
      0025ED 24 19            [12] 6840 	add	a,#0x19
      0025EF F8               [12] 6841 	mov	r0,a
      0025F0 E6               [12] 6842 	mov	a,@r0
      0025F1 C0 E0            [24] 6843 	push	acc
      0025F3 08               [12] 6844 	inc	r0
      0025F4 E6               [12] 6845 	mov	a,@r0
      0025F5 C0 E0            [24] 6846 	push	acc
      0025F7 08               [12] 6847 	inc	r0
      0025F8 E6               [12] 6848 	mov	a,@r0
      0025F9 C0 E0            [24] 6849 	push	acc
      0025FB 08               [12] 6850 	inc	r0
      0025FC E6               [12] 6851 	mov	a,@r0
      0025FD C0 E0            [24] 6852 	push	acc
      0025FF 8D 82            [24] 6853 	mov	dpl,r5
      002601 8E 83            [24] 6854 	mov	dph,r6
      002603 8F F0            [24] 6855 	mov	b,r7
      002605 12r00r00         [24] 6856 	lcall	_stack_push
      002608 E5 81            [12] 6857 	mov	a,sp
      00260A 24 FC            [12] 6858 	add	a,#0xfc
      00260C F5 81            [12] 6859 	mov	sp,a
                                   6860 ;	calc.c:315: break;
      00260E 02r2Ar46         [24] 6861 	ljmp	00249$
                                   6862 ;	calc.c:316: case ']':
      002611                       6863 00230$:
                                   6864 ;	calc.c:317: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      002611 E5*00            [12] 6865 	mov	a,_bp
      002613 24 15            [12] 6866 	add	a,#0x15
      002615 FF               [12] 6867 	mov	r7,a
      002616 E5*00            [12] 6868 	mov	a,_bp
      002618 24 0E            [12] 6869 	add	a,#0x0e
      00261A F8               [12] 6870 	mov	r0,a
      00261B A6 07            [24] 6871 	mov	@r0,ar7
      00261D 08               [12] 6872 	inc	r0
      00261E 76 00            [12] 6873 	mov	@r0,#0x00
      002620 08               [12] 6874 	inc	r0
      002621 76 40            [12] 6875 	mov	@r0,#0x40
      002623 E5*00            [12] 6876 	mov	a,_bp
      002625 24 12            [12] 6877 	add	a,#0x12
      002627 F8               [12] 6878 	mov	r0,a
      002628 74 11            [12] 6879 	mov	a,#0x11
      00262A 26               [12] 6880 	add	a,@r0
      00262B FA               [12] 6881 	mov	r2,a
      00262C 74 40            [12] 6882 	mov	a,#0x40
      00262E 08               [12] 6883 	inc	r0
      00262F 36               [12] 6884 	addc	a,@r0
      002630 FB               [12] 6885 	mov	r3,a
      002631 08               [12] 6886 	inc	r0
      002632 86 04            [24] 6887 	mov	ar4,@r0
      002634 8A 82            [24] 6888 	mov	dpl,r2
      002636 8B 83            [24] 6889 	mov	dph,r3
      002638 8C F0            [24] 6890 	mov	b,r4
      00263A 12r00r00         [24] 6891 	lcall	__gptrget
      00263D FD               [12] 6892 	mov	r5,a
      00263E A3               [24] 6893 	inc	dptr
      00263F 12r00r00         [24] 6894 	lcall	__gptrget
      002642 FE               [12] 6895 	mov	r6,a
      002643 A3               [24] 6896 	inc	dptr
      002644 12r00r00         [24] 6897 	lcall	__gptrget
      002647 FF               [12] 6898 	mov	r7,a
      002648 C0 04            [24] 6899 	push	ar4
      00264A C0 03            [24] 6900 	push	ar3
      00264C C0 02            [24] 6901 	push	ar2
      00264E E5*00            [12] 6902 	mov	a,_bp
      002650 24 0E            [12] 6903 	add	a,#0x0e
      002652 F8               [12] 6904 	mov	r0,a
      002653 E6               [12] 6905 	mov	a,@r0
      002654 C0 E0            [24] 6906 	push	acc
      002656 08               [12] 6907 	inc	r0
      002657 E6               [12] 6908 	mov	a,@r0
      002658 C0 E0            [24] 6909 	push	acc
      00265A 08               [12] 6910 	inc	r0
      00265B E6               [12] 6911 	mov	a,@r0
      00265C C0 E0            [24] 6912 	push	acc
      00265E 8D 82            [24] 6913 	mov	dpl,r5
      002660 8E 83            [24] 6914 	mov	dph,r6
      002662 8F F0            [24] 6915 	mov	b,r7
      002664 12r00r00         [24] 6916 	lcall	_stack_pop
      002667 AE 82            [24] 6917 	mov	r6,dpl
      002669 AF 83            [24] 6918 	mov	r7,dph
      00266B 15 81            [12] 6919 	dec	sp
      00266D 15 81            [12] 6920 	dec	sp
      00266F 15 81            [12] 6921 	dec	sp
      002671 D0 02            [24] 6922 	pop	ar2
      002673 D0 03            [24] 6923 	pop	ar3
      002675 D0 04            [24] 6924 	pop	ar4
      002677 EE               [12] 6925 	mov	a,r6
      002678 4F               [12] 6926 	orl	a,r7
      002679 70 25            [24] 6927 	jnz	00235$
      00267B 7Dr44            [12] 6928 	mov	r5,#___str_10
      00267D 7Cs00            [12] 6929 	mov	r4,#(___str_10 >> 8)
      00267F 7B 80            [12] 6930 	mov	r3,#0x80
                                   6931 ;	calc.c:51: return;
      002681                       6932 00484$:
                                   6933 ;	calc.c:49: for (; *s; s++) putchar(*s);
      002681 8D 82            [24] 6934 	mov	dpl,r5
      002683 8C 83            [24] 6935 	mov	dph,r4
      002685 8B F0            [24] 6936 	mov	b,r3
      002687 12r00r00         [24] 6937 	lcall	__gptrget
      00268A FF               [12] 6938 	mov	r7,a
      00268B 70 03            [24] 6939 	jnz	01390$
      00268D 02r2Ar46         [24] 6940 	ljmp	00249$
      002690                       6941 01390$:
      002690 7E 00            [12] 6942 	mov	r6,#0x00
      002692 8F 82            [24] 6943 	mov	dpl,r7
      002694 8E 83            [24] 6944 	mov	dph,r6
      002696 12r00r00         [24] 6945 	lcall	_putchar
      002699 0D               [12] 6946 	inc	r5
                                   6947 ;	calc.c:317: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      00269A BD 00 E4         [24] 6948 	cjne	r5,#0x00,00484$
      00269D 0C               [12] 6949 	inc	r4
      00269E 80 E1            [24] 6950 	sjmp	00484$
      0026A0                       6951 00235$:
                                   6952 ;	calc.c:318: else if (!stack_pop(ctx->ps, &d1)) {
      0026A0 E5*00            [12] 6953 	mov	a,_bp
      0026A2 24 19            [12] 6954 	add	a,#0x19
      0026A4 FF               [12] 6955 	mov	r7,a
      0026A5 E5*00            [12] 6956 	mov	a,_bp
      0026A7 24 0E            [12] 6957 	add	a,#0x0e
      0026A9 F8               [12] 6958 	mov	r0,a
      0026AA A6 07            [24] 6959 	mov	@r0,ar7
      0026AC 08               [12] 6960 	inc	r0
      0026AD 76 00            [12] 6961 	mov	@r0,#0x00
      0026AF 08               [12] 6962 	inc	r0
      0026B0 76 40            [12] 6963 	mov	@r0,#0x40
      0026B2 8A 82            [24] 6964 	mov	dpl,r2
      0026B4 8B 83            [24] 6965 	mov	dph,r3
      0026B6 8C F0            [24] 6966 	mov	b,r4
      0026B8 12r00r00         [24] 6967 	lcall	__gptrget
      0026BB FD               [12] 6968 	mov	r5,a
      0026BC A3               [24] 6969 	inc	dptr
      0026BD 12r00r00         [24] 6970 	lcall	__gptrget
      0026C0 FE               [12] 6971 	mov	r6,a
      0026C1 A3               [24] 6972 	inc	dptr
      0026C2 12r00r00         [24] 6973 	lcall	__gptrget
      0026C5 FF               [12] 6974 	mov	r7,a
      0026C6 C0 04            [24] 6975 	push	ar4
      0026C8 C0 03            [24] 6976 	push	ar3
      0026CA C0 02            [24] 6977 	push	ar2
      0026CC E5*00            [12] 6978 	mov	a,_bp
      0026CE 24 0E            [12] 6979 	add	a,#0x0e
      0026D0 F8               [12] 6980 	mov	r0,a
      0026D1 E6               [12] 6981 	mov	a,@r0
      0026D2 C0 E0            [24] 6982 	push	acc
      0026D4 08               [12] 6983 	inc	r0
      0026D5 E6               [12] 6984 	mov	a,@r0
      0026D6 C0 E0            [24] 6985 	push	acc
      0026D8 08               [12] 6986 	inc	r0
      0026D9 E6               [12] 6987 	mov	a,@r0
      0026DA C0 E0            [24] 6988 	push	acc
      0026DC 8D 82            [24] 6989 	mov	dpl,r5
      0026DE 8E 83            [24] 6990 	mov	dph,r6
      0026E0 8F F0            [24] 6991 	mov	b,r7
      0026E2 12r00r00         [24] 6992 	lcall	_stack_pop
      0026E5 AE 82            [24] 6993 	mov	r6,dpl
      0026E7 AF 83            [24] 6994 	mov	r7,dph
      0026E9 15 81            [12] 6995 	dec	sp
      0026EB 15 81            [12] 6996 	dec	sp
      0026ED 15 81            [12] 6997 	dec	sp
      0026EF D0 02            [24] 6998 	pop	ar2
      0026F1 D0 03            [24] 6999 	pop	ar3
      0026F3 D0 04            [24] 7000 	pop	ar4
      0026F5 EE               [12] 7001 	mov	a,r6
      0026F6 4F               [12] 7002 	orl	a,r7
      0026F7 70 5C            [24] 7003 	jnz	00232$
                                   7004 ;	calc.c:319: (void)stack_push(ctx->ps, d0);
      0026F9 8A 82            [24] 7005 	mov	dpl,r2
      0026FB 8B 83            [24] 7006 	mov	dph,r3
      0026FD 8C F0            [24] 7007 	mov	b,r4
      0026FF 12r00r00         [24] 7008 	lcall	__gptrget
      002702 FD               [12] 7009 	mov	r5,a
      002703 A3               [24] 7010 	inc	dptr
      002704 12r00r00         [24] 7011 	lcall	__gptrget
      002707 FE               [12] 7012 	mov	r6,a
      002708 A3               [24] 7013 	inc	dptr
      002709 12r00r00         [24] 7014 	lcall	__gptrget
      00270C FF               [12] 7015 	mov	r7,a
      00270D E5*00            [12] 7016 	mov	a,_bp
      00270F 24 15            [12] 7017 	add	a,#0x15
      002711 F8               [12] 7018 	mov	r0,a
      002712 E6               [12] 7019 	mov	a,@r0
      002713 C0 E0            [24] 7020 	push	acc
      002715 08               [12] 7021 	inc	r0
      002716 E6               [12] 7022 	mov	a,@r0
      002717 C0 E0            [24] 7023 	push	acc
      002719 08               [12] 7024 	inc	r0
      00271A E6               [12] 7025 	mov	a,@r0
      00271B C0 E0            [24] 7026 	push	acc
      00271D 08               [12] 7027 	inc	r0
      00271E E6               [12] 7028 	mov	a,@r0
      00271F C0 E0            [24] 7029 	push	acc
      002721 8D 82            [24] 7030 	mov	dpl,r5
      002723 8E 83            [24] 7031 	mov	dph,r6
      002725 8F F0            [24] 7032 	mov	b,r7
      002727 12r00r00         [24] 7033 	lcall	_stack_push
      00272A E5 81            [12] 7034 	mov	a,sp
      00272C 24 FC            [12] 7035 	add	a,#0xfc
      00272E F5 81            [12] 7036 	mov	sp,a
                                   7037 ;	calc.c:320: printstr("\r\nstack underflow\r\n");
      002730 7Dr44            [12] 7038 	mov	r5,#___str_10
      002732 7Cs00            [12] 7039 	mov	r4,#(___str_10 >> 8)
      002734 7B 80            [12] 7040 	mov	r3,#0x80
                                   7041 ;	calc.c:51: return;
      002736                       7042 00487$:
                                   7043 ;	calc.c:49: for (; *s; s++) putchar(*s);
      002736 8D 82            [24] 7044 	mov	dpl,r5
      002738 8C 83            [24] 7045 	mov	dph,r4
      00273A 8B F0            [24] 7046 	mov	b,r3
      00273C 12r00r00         [24] 7047 	lcall	__gptrget
      00273F FF               [12] 7048 	mov	r7,a
      002740 70 03            [24] 7049 	jnz	01393$
      002742 02r2Ar46         [24] 7050 	ljmp	00249$
      002745                       7051 01393$:
      002745 7E 00            [12] 7052 	mov	r6,#0x00
      002747 8F 82            [24] 7053 	mov	dpl,r7
      002749 8E 83            [24] 7054 	mov	dph,r6
      00274B 12r00r00         [24] 7055 	lcall	_putchar
      00274E 0D               [12] 7056 	inc	r5
                                   7057 ;	calc.c:320: printstr("\r\nstack underflow\r\n");
      00274F BD 00 E4         [24] 7058 	cjne	r5,#0x00,00487$
      002752 0C               [12] 7059 	inc	r4
      002753 80 E1            [24] 7060 	sjmp	00487$
      002755                       7061 00232$:
                                   7062 ;	calc.c:322: d1 >>= ((unsigned long)d0 & 0x0000001flu);
      002755 E5*00            [12] 7063 	mov	a,_bp
      002757 24 15            [12] 7064 	add	a,#0x15
      002759 F8               [12] 7065 	mov	r0,a
      00275A 86 07            [24] 7066 	mov	ar7,@r0
      00275C 53 07 1F         [24] 7067 	anl	ar7,#0x1f
      00275F 8F F0            [24] 7068 	mov	b,r7
      002761 05 F0            [12] 7069 	inc	b
      002763 E5*00            [12] 7070 	mov	a,_bp
      002765 24 19            [12] 7071 	add	a,#0x19
      002767 F8               [12] 7072 	mov	r0,a
      002768 08               [12] 7073 	inc	r0
      002769 08               [12] 7074 	inc	r0
      00276A 08               [12] 7075 	inc	r0
      00276B E6               [12] 7076 	mov	a,@r0
      00276C 33               [12] 7077 	rlc	a
      00276D 92 D2            [24] 7078 	mov	ov,c
      00276F 18               [12] 7079 	dec	r0
      002770 18               [12] 7080 	dec	r0
      002771 18               [12] 7081 	dec	r0
      002772 80 14            [24] 7082 	sjmp	01396$
      002774                       7083 01395$:
      002774 A2 D2            [12] 7084 	mov	c,ov
      002776 08               [12] 7085 	inc	r0
      002777 08               [12] 7086 	inc	r0
      002778 08               [12] 7087 	inc	r0
      002779 E6               [12] 7088 	mov	a,@r0
      00277A 13               [12] 7089 	rrc	a
      00277B F6               [12] 7090 	mov	@r0,a
      00277C 18               [12] 7091 	dec	r0
      00277D E6               [12] 7092 	mov	a,@r0
      00277E 13               [12] 7093 	rrc	a
      00277F F6               [12] 7094 	mov	@r0,a
      002780 18               [12] 7095 	dec	r0
      002781 E6               [12] 7096 	mov	a,@r0
      002782 13               [12] 7097 	rrc	a
      002783 F6               [12] 7098 	mov	@r0,a
      002784 18               [12] 7099 	dec	r0
      002785 E6               [12] 7100 	mov	a,@r0
      002786 13               [12] 7101 	rrc	a
      002787 F6               [12] 7102 	mov	@r0,a
      002788                       7103 01396$:
      002788 D5 F0 E9         [24] 7104 	djnz	b,01395$
                                   7105 ;	calc.c:323: (void)stack_push(ctx->ps, d1);
      00278B 8A 82            [24] 7106 	mov	dpl,r2
      00278D 8B 83            [24] 7107 	mov	dph,r3
      00278F 8C F0            [24] 7108 	mov	b,r4
      002791 12r00r00         [24] 7109 	lcall	__gptrget
      002794 FA               [12] 7110 	mov	r2,a
      002795 A3               [24] 7111 	inc	dptr
      002796 12r00r00         [24] 7112 	lcall	__gptrget
      002799 FB               [12] 7113 	mov	r3,a
      00279A A3               [24] 7114 	inc	dptr
      00279B 12r00r00         [24] 7115 	lcall	__gptrget
      00279E FC               [12] 7116 	mov	r4,a
      00279F E5*00            [12] 7117 	mov	a,_bp
      0027A1 24 19            [12] 7118 	add	a,#0x19
      0027A3 F8               [12] 7119 	mov	r0,a
      0027A4 E6               [12] 7120 	mov	a,@r0
      0027A5 C0 E0            [24] 7121 	push	acc
      0027A7 08               [12] 7122 	inc	r0
      0027A8 E6               [12] 7123 	mov	a,@r0
      0027A9 C0 E0            [24] 7124 	push	acc
      0027AB 08               [12] 7125 	inc	r0
      0027AC E6               [12] 7126 	mov	a,@r0
      0027AD C0 E0            [24] 7127 	push	acc
      0027AF 08               [12] 7128 	inc	r0
      0027B0 E6               [12] 7129 	mov	a,@r0
      0027B1 C0 E0            [24] 7130 	push	acc
      0027B3 8A 82            [24] 7131 	mov	dpl,r2
      0027B5 8B 83            [24] 7132 	mov	dph,r3
      0027B7 8C F0            [24] 7133 	mov	b,r4
      0027B9 12r00r00         [24] 7134 	lcall	_stack_push
      0027BC E5 81            [12] 7135 	mov	a,sp
      0027BE 24 FC            [12] 7136 	add	a,#0xfc
      0027C0 F5 81            [12] 7137 	mov	sp,a
                                   7138 ;	calc.c:325: break;
      0027C2 02r2Ar46         [24] 7139 	ljmp	00249$
                                   7140 ;	calc.c:326: case '<':
      0027C5                       7141 00237$:
                                   7142 ;	calc.c:327: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      0027C5 E5*00            [12] 7143 	mov	a,_bp
      0027C7 24 15            [12] 7144 	add	a,#0x15
      0027C9 FC               [12] 7145 	mov	r4,a
      0027CA 7B 00            [12] 7146 	mov	r3,#0x00
      0027CC 7A 40            [12] 7147 	mov	r2,#0x40
      0027CE E5*00            [12] 7148 	mov	a,_bp
      0027D0 24 12            [12] 7149 	add	a,#0x12
      0027D2 F8               [12] 7150 	mov	r0,a
      0027D3 E5*00            [12] 7151 	mov	a,_bp
      0027D5 24 0B            [12] 7152 	add	a,#0x0b
      0027D7 F9               [12] 7153 	mov	r1,a
      0027D8 74 11            [12] 7154 	mov	a,#0x11
      0027DA 26               [12] 7155 	add	a,@r0
      0027DB F7               [12] 7156 	mov	@r1,a
      0027DC 74 40            [12] 7157 	mov	a,#0x40
      0027DE 08               [12] 7158 	inc	r0
      0027DF 36               [12] 7159 	addc	a,@r0
      0027E0 09               [12] 7160 	inc	r1
      0027E1 F7               [12] 7161 	mov	@r1,a
      0027E2 08               [12] 7162 	inc	r0
      0027E3 09               [12] 7163 	inc	r1
      0027E4 E6               [12] 7164 	mov	a,@r0
      0027E5 F7               [12] 7165 	mov	@r1,a
      0027E6 E5*00            [12] 7166 	mov	a,_bp
      0027E8 24 0B            [12] 7167 	add	a,#0x0b
      0027EA F8               [12] 7168 	mov	r0,a
      0027EB 86 82            [24] 7169 	mov	dpl,@r0
      0027ED 08               [12] 7170 	inc	r0
      0027EE 86 83            [24] 7171 	mov	dph,@r0
      0027F0 08               [12] 7172 	inc	r0
      0027F1 86 F0            [24] 7173 	mov	b,@r0
      0027F3 12r00r00         [24] 7174 	lcall	__gptrget
      0027F6 FD               [12] 7175 	mov	r5,a
      0027F7 A3               [24] 7176 	inc	dptr
      0027F8 12r00r00         [24] 7177 	lcall	__gptrget
      0027FB FE               [12] 7178 	mov	r6,a
      0027FC A3               [24] 7179 	inc	dptr
      0027FD 12r00r00         [24] 7180 	lcall	__gptrget
      002800 FF               [12] 7181 	mov	r7,a
      002801 C0 04            [24] 7182 	push	ar4
      002803 C0 03            [24] 7183 	push	ar3
      002805 C0 02            [24] 7184 	push	ar2
      002807 8D 82            [24] 7185 	mov	dpl,r5
      002809 8E 83            [24] 7186 	mov	dph,r6
      00280B 8F F0            [24] 7187 	mov	b,r7
      00280D 12r00r00         [24] 7188 	lcall	_stack_pop
      002810 AE 82            [24] 7189 	mov	r6,dpl
      002812 AF 83            [24] 7190 	mov	r7,dph
      002814 15 81            [12] 7191 	dec	sp
      002816 15 81            [12] 7192 	dec	sp
      002818 15 81            [12] 7193 	dec	sp
      00281A EE               [12] 7194 	mov	a,r6
      00281B 4F               [12] 7195 	orl	a,r7
      00281C 70 25            [24] 7196 	jnz	00242$
      00281E 7Dr44            [12] 7197 	mov	r5,#___str_10
      002820 7Cs00            [12] 7198 	mov	r4,#(___str_10 >> 8)
      002822 7B 80            [12] 7199 	mov	r3,#0x80
                                   7200 ;	calc.c:51: return;
      002824                       7201 00490$:
                                   7202 ;	calc.c:49: for (; *s; s++) putchar(*s);
      002824 8D 82            [24] 7203 	mov	dpl,r5
      002826 8C 83            [24] 7204 	mov	dph,r4
      002828 8B F0            [24] 7205 	mov	b,r3
      00282A 12r00r00         [24] 7206 	lcall	__gptrget
      00282D FF               [12] 7207 	mov	r7,a
      00282E 70 03            [24] 7208 	jnz	01398$
      002830 02r2Ar46         [24] 7209 	ljmp	00249$
      002833                       7210 01398$:
      002833 7E 00            [12] 7211 	mov	r6,#0x00
      002835 8F 82            [24] 7212 	mov	dpl,r7
      002837 8E 83            [24] 7213 	mov	dph,r6
      002839 12r00r00         [24] 7214 	lcall	_putchar
      00283C 0D               [12] 7215 	inc	r5
                                   7216 ;	calc.c:327: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      00283D BD 00 E4         [24] 7217 	cjne	r5,#0x00,00490$
      002840 0C               [12] 7218 	inc	r4
      002841 80 E1            [24] 7219 	sjmp	00490$
      002843                       7220 00242$:
                                   7221 ;	calc.c:328: else if (!stack_pop(ctx->ps, &d1)) {
      002843 E5*00            [12] 7222 	mov	a,_bp
      002845 24 19            [12] 7223 	add	a,#0x19
      002847 FC               [12] 7224 	mov	r4,a
      002848 7B 00            [12] 7225 	mov	r3,#0x00
      00284A 7A 40            [12] 7226 	mov	r2,#0x40
      00284C E5*00            [12] 7227 	mov	a,_bp
      00284E 24 0B            [12] 7228 	add	a,#0x0b
      002850 F8               [12] 7229 	mov	r0,a
      002851 86 82            [24] 7230 	mov	dpl,@r0
      002853 08               [12] 7231 	inc	r0
      002854 86 83            [24] 7232 	mov	dph,@r0
      002856 08               [12] 7233 	inc	r0
      002857 86 F0            [24] 7234 	mov	b,@r0
      002859 12r00r00         [24] 7235 	lcall	__gptrget
      00285C FD               [12] 7236 	mov	r5,a
      00285D A3               [24] 7237 	inc	dptr
      00285E 12r00r00         [24] 7238 	lcall	__gptrget
      002861 FE               [12] 7239 	mov	r6,a
      002862 A3               [24] 7240 	inc	dptr
      002863 12r00r00         [24] 7241 	lcall	__gptrget
      002866 FF               [12] 7242 	mov	r7,a
      002867 C0 04            [24] 7243 	push	ar4
      002869 C0 03            [24] 7244 	push	ar3
      00286B C0 02            [24] 7245 	push	ar2
      00286D 8D 82            [24] 7246 	mov	dpl,r5
      00286F 8E 83            [24] 7247 	mov	dph,r6
      002871 8F F0            [24] 7248 	mov	b,r7
      002873 12r00r00         [24] 7249 	lcall	_stack_pop
      002876 AE 82            [24] 7250 	mov	r6,dpl
      002878 AF 83            [24] 7251 	mov	r7,dph
      00287A 15 81            [12] 7252 	dec	sp
      00287C 15 81            [12] 7253 	dec	sp
      00287E 15 81            [12] 7254 	dec	sp
      002880 EE               [12] 7255 	mov	a,r6
      002881 4F               [12] 7256 	orl	a,r7
      002882 70 63            [24] 7257 	jnz	00239$
                                   7258 ;	calc.c:329: (void)stack_push(ctx->ps, d0);
      002884 E5*00            [12] 7259 	mov	a,_bp
      002886 24 0B            [12] 7260 	add	a,#0x0b
      002888 F8               [12] 7261 	mov	r0,a
      002889 86 82            [24] 7262 	mov	dpl,@r0
      00288B 08               [12] 7263 	inc	r0
      00288C 86 83            [24] 7264 	mov	dph,@r0
      00288E 08               [12] 7265 	inc	r0
      00288F 86 F0            [24] 7266 	mov	b,@r0
      002891 12r00r00         [24] 7267 	lcall	__gptrget
      002894 FD               [12] 7268 	mov	r5,a
      002895 A3               [24] 7269 	inc	dptr
      002896 12r00r00         [24] 7270 	lcall	__gptrget
      002899 FE               [12] 7271 	mov	r6,a
      00289A A3               [24] 7272 	inc	dptr
      00289B 12r00r00         [24] 7273 	lcall	__gptrget
      00289E FF               [12] 7274 	mov	r7,a
      00289F E5*00            [12] 7275 	mov	a,_bp
      0028A1 24 15            [12] 7276 	add	a,#0x15
      0028A3 F8               [12] 7277 	mov	r0,a
      0028A4 E6               [12] 7278 	mov	a,@r0
      0028A5 C0 E0            [24] 7279 	push	acc
      0028A7 08               [12] 7280 	inc	r0
      0028A8 E6               [12] 7281 	mov	a,@r0
      0028A9 C0 E0            [24] 7282 	push	acc
      0028AB 08               [12] 7283 	inc	r0
      0028AC E6               [12] 7284 	mov	a,@r0
      0028AD C0 E0            [24] 7285 	push	acc
      0028AF 08               [12] 7286 	inc	r0
      0028B0 E6               [12] 7287 	mov	a,@r0
      0028B1 C0 E0            [24] 7288 	push	acc
      0028B3 8D 82            [24] 7289 	mov	dpl,r5
      0028B5 8E 83            [24] 7290 	mov	dph,r6
      0028B7 8F F0            [24] 7291 	mov	b,r7
      0028B9 12r00r00         [24] 7292 	lcall	_stack_push
      0028BC E5 81            [12] 7293 	mov	a,sp
      0028BE 24 FC            [12] 7294 	add	a,#0xfc
      0028C0 F5 81            [12] 7295 	mov	sp,a
                                   7296 ;	calc.c:330: printstr("\r\nstack underflow\r\n");
      0028C2 7Dr44            [12] 7297 	mov	r5,#___str_10
      0028C4 7Cs00            [12] 7298 	mov	r4,#(___str_10 >> 8)
      0028C6 7B 80            [12] 7299 	mov	r3,#0x80
                                   7300 ;	calc.c:51: return;
      0028C8                       7301 00493$:
                                   7302 ;	calc.c:49: for (; *s; s++) putchar(*s);
      0028C8 8D 82            [24] 7303 	mov	dpl,r5
      0028CA 8C 83            [24] 7304 	mov	dph,r4
      0028CC 8B F0            [24] 7305 	mov	b,r3
      0028CE 12r00r00         [24] 7306 	lcall	__gptrget
      0028D1 FF               [12] 7307 	mov	r7,a
      0028D2 70 03            [24] 7308 	jnz	01401$
      0028D4 02r2Ar46         [24] 7309 	ljmp	00249$
      0028D7                       7310 01401$:
      0028D7 7E 00            [12] 7311 	mov	r6,#0x00
      0028D9 8F 82            [24] 7312 	mov	dpl,r7
      0028DB 8E 83            [24] 7313 	mov	dph,r6
      0028DD 12r00r00         [24] 7314 	lcall	_putchar
      0028E0 0D               [12] 7315 	inc	r5
                                   7316 ;	calc.c:330: printstr("\r\nstack underflow\r\n");
      0028E1 BD 00 E4         [24] 7317 	cjne	r5,#0x00,00493$
      0028E4 0C               [12] 7318 	inc	r4
      0028E5 80 E1            [24] 7319 	sjmp	00493$
      0028E7                       7320 00239$:
                                   7321 ;	calc.c:332: d1 <<= ((unsigned long)d0 & 0x0000001flu);
      0028E7 E5*00            [12] 7322 	mov	a,_bp
      0028E9 24 15            [12] 7323 	add	a,#0x15
      0028EB F8               [12] 7324 	mov	r0,a
      0028EC 86 07            [24] 7325 	mov	ar7,@r0
      0028EE 74 1F            [12] 7326 	mov	a,#0x1f
      0028F0 5F               [12] 7327 	anl	a,r7
      0028F1 FB               [12] 7328 	mov	r3,a
      0028F2 E5*00            [12] 7329 	mov	a,_bp
      0028F4 24 19            [12] 7330 	add	a,#0x19
      0028F6 F8               [12] 7331 	mov	r0,a
      0028F7 86 04            [24] 7332 	mov	ar4,@r0
      0028F9 08               [12] 7333 	inc	r0
      0028FA 86 05            [24] 7334 	mov	ar5,@r0
      0028FC 08               [12] 7335 	inc	r0
      0028FD 86 06            [24] 7336 	mov	ar6,@r0
      0028FF 08               [12] 7337 	inc	r0
      002900 86 07            [24] 7338 	mov	ar7,@r0
      002902 8B F0            [24] 7339 	mov	b,r3
      002904 05 F0            [12] 7340 	inc	b
      002906 80 0C            [24] 7341 	sjmp	01404$
      002908                       7342 01403$:
      002908 EC               [12] 7343 	mov	a,r4
      002909 2C               [12] 7344 	add	a,r4
      00290A FC               [12] 7345 	mov	r4,a
      00290B ED               [12] 7346 	mov	a,r5
      00290C 33               [12] 7347 	rlc	a
      00290D FD               [12] 7348 	mov	r5,a
      00290E EE               [12] 7349 	mov	a,r6
      00290F 33               [12] 7350 	rlc	a
      002910 FE               [12] 7351 	mov	r6,a
      002911 EF               [12] 7352 	mov	a,r7
      002912 33               [12] 7353 	rlc	a
      002913 FF               [12] 7354 	mov	r7,a
      002914                       7355 01404$:
      002914 D5 F0 F1         [24] 7356 	djnz	b,01403$
      002917 E5*00            [12] 7357 	mov	a,_bp
      002919 24 19            [12] 7358 	add	a,#0x19
      00291B F8               [12] 7359 	mov	r0,a
      00291C A6 04            [24] 7360 	mov	@r0,ar4
      00291E 08               [12] 7361 	inc	r0
      00291F A6 05            [24] 7362 	mov	@r0,ar5
      002921 08               [12] 7363 	inc	r0
      002922 A6 06            [24] 7364 	mov	@r0,ar6
      002924 08               [12] 7365 	inc	r0
      002925 A6 07            [24] 7366 	mov	@r0,ar7
                                   7367 ;	calc.c:333: (void)stack_push(ctx->ps, d1);
      002927 E5*00            [12] 7368 	mov	a,_bp
      002929 24 0B            [12] 7369 	add	a,#0x0b
      00292B F8               [12] 7370 	mov	r0,a
      00292C 86 82            [24] 7371 	mov	dpl,@r0
      00292E 08               [12] 7372 	inc	r0
      00292F 86 83            [24] 7373 	mov	dph,@r0
      002931 08               [12] 7374 	inc	r0
      002932 86 F0            [24] 7375 	mov	b,@r0
      002934 12r00r00         [24] 7376 	lcall	__gptrget
      002937 FD               [12] 7377 	mov	r5,a
      002938 A3               [24] 7378 	inc	dptr
      002939 12r00r00         [24] 7379 	lcall	__gptrget
      00293C FE               [12] 7380 	mov	r6,a
      00293D A3               [24] 7381 	inc	dptr
      00293E 12r00r00         [24] 7382 	lcall	__gptrget
      002941 FF               [12] 7383 	mov	r7,a
      002942 E5*00            [12] 7384 	mov	a,_bp
      002944 24 19            [12] 7385 	add	a,#0x19
      002946 F8               [12] 7386 	mov	r0,a
      002947 E6               [12] 7387 	mov	a,@r0
      002948 C0 E0            [24] 7388 	push	acc
      00294A 08               [12] 7389 	inc	r0
      00294B E6               [12] 7390 	mov	a,@r0
      00294C C0 E0            [24] 7391 	push	acc
      00294E 08               [12] 7392 	inc	r0
      00294F E6               [12] 7393 	mov	a,@r0
      002950 C0 E0            [24] 7394 	push	acc
      002952 08               [12] 7395 	inc	r0
      002953 E6               [12] 7396 	mov	a,@r0
      002954 C0 E0            [24] 7397 	push	acc
      002956 8D 82            [24] 7398 	mov	dpl,r5
      002958 8E 83            [24] 7399 	mov	dph,r6
      00295A 8F F0            [24] 7400 	mov	b,r7
      00295C 12r00r00         [24] 7401 	lcall	_stack_push
      00295F E5 81            [12] 7402 	mov	a,sp
      002961 24 FC            [12] 7403 	add	a,#0xfc
      002963 F5 81            [12] 7404 	mov	sp,a
                                   7405 ;	calc.c:335: break;
      002965 02r2Ar46         [24] 7406 	ljmp	00249$
                                   7407 ;	calc.c:336: case '~':
      002968                       7408 00244$:
                                   7409 ;	calc.c:337: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      002968 E5*00            [12] 7410 	mov	a,_bp
      00296A 24 15            [12] 7411 	add	a,#0x15
      00296C FF               [12] 7412 	mov	r7,a
      00296D E5*00            [12] 7413 	mov	a,_bp
      00296F 24 0E            [12] 7414 	add	a,#0x0e
      002971 F8               [12] 7415 	mov	r0,a
      002972 A6 07            [24] 7416 	mov	@r0,ar7
      002974 08               [12] 7417 	inc	r0
      002975 76 00            [12] 7418 	mov	@r0,#0x00
      002977 08               [12] 7419 	inc	r0
      002978 76 40            [12] 7420 	mov	@r0,#0x40
      00297A E5*00            [12] 7421 	mov	a,_bp
      00297C 24 12            [12] 7422 	add	a,#0x12
      00297E F8               [12] 7423 	mov	r0,a
      00297F 74 11            [12] 7424 	mov	a,#0x11
      002981 26               [12] 7425 	add	a,@r0
      002982 FA               [12] 7426 	mov	r2,a
      002983 74 40            [12] 7427 	mov	a,#0x40
      002985 08               [12] 7428 	inc	r0
      002986 36               [12] 7429 	addc	a,@r0
      002987 FB               [12] 7430 	mov	r3,a
      002988 08               [12] 7431 	inc	r0
      002989 86 04            [24] 7432 	mov	ar4,@r0
      00298B 8A 82            [24] 7433 	mov	dpl,r2
      00298D 8B 83            [24] 7434 	mov	dph,r3
      00298F 8C F0            [24] 7435 	mov	b,r4
      002991 12r00r00         [24] 7436 	lcall	__gptrget
      002994 FD               [12] 7437 	mov	r5,a
      002995 A3               [24] 7438 	inc	dptr
      002996 12r00r00         [24] 7439 	lcall	__gptrget
      002999 FE               [12] 7440 	mov	r6,a
      00299A A3               [24] 7441 	inc	dptr
      00299B 12r00r00         [24] 7442 	lcall	__gptrget
      00299E FF               [12] 7443 	mov	r7,a
      00299F C0 04            [24] 7444 	push	ar4
      0029A1 C0 03            [24] 7445 	push	ar3
      0029A3 C0 02            [24] 7446 	push	ar2
      0029A5 E5*00            [12] 7447 	mov	a,_bp
      0029A7 24 0E            [12] 7448 	add	a,#0x0e
      0029A9 F8               [12] 7449 	mov	r0,a
      0029AA E6               [12] 7450 	mov	a,@r0
      0029AB C0 E0            [24] 7451 	push	acc
      0029AD 08               [12] 7452 	inc	r0
      0029AE E6               [12] 7453 	mov	a,@r0
      0029AF C0 E0            [24] 7454 	push	acc
      0029B1 08               [12] 7455 	inc	r0
      0029B2 E6               [12] 7456 	mov	a,@r0
      0029B3 C0 E0            [24] 7457 	push	acc
      0029B5 8D 82            [24] 7458 	mov	dpl,r5
      0029B7 8E 83            [24] 7459 	mov	dph,r6
      0029B9 8F F0            [24] 7460 	mov	b,r7
      0029BB 12r00r00         [24] 7461 	lcall	_stack_pop
      0029BE AE 82            [24] 7462 	mov	r6,dpl
      0029C0 AF 83            [24] 7463 	mov	r7,dph
      0029C2 15 81            [12] 7464 	dec	sp
      0029C4 15 81            [12] 7465 	dec	sp
      0029C6 15 81            [12] 7466 	dec	sp
      0029C8 D0 02            [24] 7467 	pop	ar2
      0029CA D0 03            [24] 7468 	pop	ar3
      0029CC D0 04            [24] 7469 	pop	ar4
      0029CE EE               [12] 7470 	mov	a,r6
      0029CF 4F               [12] 7471 	orl	a,r7
      0029D0 70 22            [24] 7472 	jnz	00246$
      0029D2 7Dr44            [12] 7473 	mov	r5,#___str_10
      0029D4 7Cs00            [12] 7474 	mov	r4,#(___str_10 >> 8)
      0029D6 7B 80            [12] 7475 	mov	r3,#0x80
                                   7476 ;	calc.c:51: return;
      0029D8                       7477 00496$:
                                   7478 ;	calc.c:49: for (; *s; s++) putchar(*s);
      0029D8 8D 82            [24] 7479 	mov	dpl,r5
      0029DA 8C 83            [24] 7480 	mov	dph,r4
      0029DC 8B F0            [24] 7481 	mov	b,r3
      0029DE 12r00r00         [24] 7482 	lcall	__gptrget
      0029E1 FF               [12] 7483 	mov	r7,a
      0029E2 60 62            [24] 7484 	jz	00249$
      0029E4 7E 00            [12] 7485 	mov	r6,#0x00
      0029E6 8F 82            [24] 7486 	mov	dpl,r7
      0029E8 8E 83            [24] 7487 	mov	dph,r6
      0029EA 12r00r00         [24] 7488 	lcall	_putchar
      0029ED 0D               [12] 7489 	inc	r5
                                   7490 ;	calc.c:337: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      0029EE BD 00 E7         [24] 7491 	cjne	r5,#0x00,00496$
      0029F1 0C               [12] 7492 	inc	r4
      0029F2 80 E4            [24] 7493 	sjmp	00496$
      0029F4                       7494 00246$:
                                   7495 ;	calc.c:339: d0 = ~d0;
      0029F4 E5*00            [12] 7496 	mov	a,_bp
      0029F6 24 15            [12] 7497 	add	a,#0x15
      0029F8 F8               [12] 7498 	mov	r0,a
      0029F9 E6               [12] 7499 	mov	a,@r0
      0029FA F4               [12] 7500 	cpl	a
      0029FB F6               [12] 7501 	mov	@r0,a
      0029FC 08               [12] 7502 	inc	r0
      0029FD E6               [12] 7503 	mov	a,@r0
      0029FE F4               [12] 7504 	cpl	a
      0029FF F6               [12] 7505 	mov	@r0,a
      002A00 08               [12] 7506 	inc	r0
      002A01 E6               [12] 7507 	mov	a,@r0
      002A02 F4               [12] 7508 	cpl	a
      002A03 F6               [12] 7509 	mov	@r0,a
      002A04 08               [12] 7510 	inc	r0
      002A05 E6               [12] 7511 	mov	a,@r0
      002A06 F4               [12] 7512 	cpl	a
      002A07 F6               [12] 7513 	mov	@r0,a
                                   7514 ;	calc.c:340: (void)stack_push(ctx->ps, d0);
      002A08 8A 82            [24] 7515 	mov	dpl,r2
      002A0A 8B 83            [24] 7516 	mov	dph,r3
      002A0C 8C F0            [24] 7517 	mov	b,r4
      002A0E 12r00r00         [24] 7518 	lcall	__gptrget
      002A11 FA               [12] 7519 	mov	r2,a
      002A12 A3               [24] 7520 	inc	dptr
      002A13 12r00r00         [24] 7521 	lcall	__gptrget
      002A16 FB               [12] 7522 	mov	r3,a
      002A17 A3               [24] 7523 	inc	dptr
      002A18 12r00r00         [24] 7524 	lcall	__gptrget
      002A1B FC               [12] 7525 	mov	r4,a
      002A1C E5*00            [12] 7526 	mov	a,_bp
      002A1E 24 15            [12] 7527 	add	a,#0x15
      002A20 F8               [12] 7528 	mov	r0,a
      002A21 E6               [12] 7529 	mov	a,@r0
      002A22 C0 E0            [24] 7530 	push	acc
      002A24 08               [12] 7531 	inc	r0
      002A25 E6               [12] 7532 	mov	a,@r0
      002A26 C0 E0            [24] 7533 	push	acc
      002A28 08               [12] 7534 	inc	r0
      002A29 E6               [12] 7535 	mov	a,@r0
      002A2A C0 E0            [24] 7536 	push	acc
      002A2C 08               [12] 7537 	inc	r0
      002A2D E6               [12] 7538 	mov	a,@r0
      002A2E C0 E0            [24] 7539 	push	acc
      002A30 8A 82            [24] 7540 	mov	dpl,r2
      002A32 8B 83            [24] 7541 	mov	dph,r3
      002A34 8C F0            [24] 7542 	mov	b,r4
      002A36 12r00r00         [24] 7543 	lcall	_stack_push
      002A39 E5 81            [12] 7544 	mov	a,sp
      002A3B 24 FC            [12] 7545 	add	a,#0xfc
      002A3D F5 81            [12] 7546 	mov	sp,a
                                   7547 ;	calc.c:342: break;
                                   7548 ;	calc.c:343: default:
      002A3F 80 05            [24] 7549 	sjmp	00249$
      002A41                       7550 00248$:
                                   7551 ;	calc.c:344: return UNDEF;
      002A41 90 80 00         [24] 7552 	mov	dptr,#0x8000
                                   7553 ;	calc.c:345: }
      002A44 80 03            [24] 7554 	sjmp	00498$
      002A46                       7555 00249$:
                                   7556 ;	calc.c:347: return 1;
      002A46 90 00 01         [24] 7557 	mov	dptr,#0x0001
      002A49                       7558 00498$:
                                   7559 ;	calc.c:348: }
      002A49 85*00 81         [24] 7560 	mov	sp,_bp
      002A4C D0*00            [24] 7561 	pop	_bp
      002A4E 22               [24] 7562 	ret
                                   7563 ;------------------------------------------------------------
                                   7564 ;Allocation info for local variables in function 'push_acc'
                                   7565 ;------------------------------------------------------------
                                   7566 ;delta                     Allocated to stack - _bp -5
                                   7567 ;_ctx                      Allocated to stack - _bp +1
                                   7568 ;ctx                       Allocated to registers r2 r3 r4 
                                   7569 ;__1310720125              Allocated to registers 
                                   7570 ;s                         Allocated to registers r5 r6 r7 
                                   7571 ;sloc0                     Allocated to stack - _bp +4
                                   7572 ;------------------------------------------------------------
                                   7573 ;	calc.c:350: static int push_acc(void *_ctx, delta_t *delta) __reentrant {
                                   7574 ;	-----------------------------------------
                                   7575 ;	 function push_acc
                                   7576 ;	-----------------------------------------
      002A4F                       7577 _push_acc:
      002A4F C0*00            [24] 7578 	push	_bp
      002A51 85 81*00         [24] 7579 	mov	_bp,sp
      002A54 C0 82            [24] 7580 	push	dpl
      002A56 C0 83            [24] 7581 	push	dph
      002A58 C0 F0            [24] 7582 	push	b
      002A5A E5 81            [12] 7583 	mov	a,sp
      002A5C 24 04            [12] 7584 	add	a,#0x04
      002A5E F5 81            [12] 7585 	mov	sp,a
                                   7586 ;	calc.c:351: calc_ctx_t *ctx = (calc_ctx_t *)_ctx;
      002A60 A8*00            [24] 7587 	mov	r0,_bp
      002A62 08               [12] 7588 	inc	r0
      002A63 86 02            [24] 7589 	mov	ar2,@r0
      002A65 08               [12] 7590 	inc	r0
      002A66 86 03            [24] 7591 	mov	ar3,@r0
      002A68 08               [12] 7592 	inc	r0
      002A69 86 04            [24] 7593 	mov	ar4,@r0
                                   7594 ;	calc.c:355: ctx->acc_valid = 0;
      002A6B 74 06            [12] 7595 	mov	a,#0x06
      002A6D 2A               [12] 7596 	add	a,r2
      002A6E FD               [12] 7597 	mov	r5,a
      002A6F E4               [12] 7598 	clr	a
      002A70 3B               [12] 7599 	addc	a,r3
      002A71 FE               [12] 7600 	mov	r6,a
      002A72 8C 07            [24] 7601 	mov	ar7,r4
      002A74 8D 82            [24] 7602 	mov	dpl,r5
      002A76 8E 83            [24] 7603 	mov	dph,r6
      002A78 8F F0            [24] 7604 	mov	b,r7
      002A7A E4               [12] 7605 	clr	a
      002A7B 12r00r00         [24] 7606 	lcall	__gptrput
                                   7607 ;	calc.c:356: if (!stack_push(ctx->ps, ctx->acc)) printstr("\r\nstack overflow\r\n");
      002A7E 74 02            [12] 7608 	mov	a,#0x02
      002A80 2A               [12] 7609 	add	a,r2
      002A81 FF               [12] 7610 	mov	r7,a
      002A82 E4               [12] 7611 	clr	a
      002A83 3B               [12] 7612 	addc	a,r3
      002A84 FD               [12] 7613 	mov	r5,a
      002A85 8C 06            [24] 7614 	mov	ar6,r4
      002A87 8F 82            [24] 7615 	mov	dpl,r7
      002A89 8D 83            [24] 7616 	mov	dph,r5
      002A8B 8E F0            [24] 7617 	mov	b,r6
      002A8D E5*00            [12] 7618 	mov	a,_bp
      002A8F 24 04            [12] 7619 	add	a,#0x04
      002A91 F8               [12] 7620 	mov	r0,a
      002A92 12r00r00         [24] 7621 	lcall	__gptrget
      002A95 F6               [12] 7622 	mov	@r0,a
      002A96 A3               [24] 7623 	inc	dptr
      002A97 12r00r00         [24] 7624 	lcall	__gptrget
      002A9A 08               [12] 7625 	inc	r0
      002A9B F6               [12] 7626 	mov	@r0,a
      002A9C A3               [24] 7627 	inc	dptr
      002A9D 12r00r00         [24] 7628 	lcall	__gptrget
      002AA0 08               [12] 7629 	inc	r0
      002AA1 F6               [12] 7630 	mov	@r0,a
      002AA2 A3               [24] 7631 	inc	dptr
      002AA3 12r00r00         [24] 7632 	lcall	__gptrget
      002AA6 08               [12] 7633 	inc	r0
      002AA7 F6               [12] 7634 	mov	@r0,a
      002AA8 74 11            [12] 7635 	mov	a,#0x11
      002AAA 2A               [12] 7636 	add	a,r2
      002AAB FA               [12] 7637 	mov	r2,a
      002AAC 74 40            [12] 7638 	mov	a,#0x40
      002AAE 3B               [12] 7639 	addc	a,r3
      002AAF FB               [12] 7640 	mov	r3,a
      002AB0 8C 07            [24] 7641 	mov	ar7,r4
      002AB2 8A 82            [24] 7642 	mov	dpl,r2
      002AB4 8B 83            [24] 7643 	mov	dph,r3
      002AB6 8F F0            [24] 7644 	mov	b,r7
      002AB8 12r00r00         [24] 7645 	lcall	__gptrget
      002ABB FA               [12] 7646 	mov	r2,a
      002ABC A3               [24] 7647 	inc	dptr
      002ABD 12r00r00         [24] 7648 	lcall	__gptrget
      002AC0 FB               [12] 7649 	mov	r3,a
      002AC1 A3               [24] 7650 	inc	dptr
      002AC2 12r00r00         [24] 7651 	lcall	__gptrget
      002AC5 FF               [12] 7652 	mov	r7,a
      002AC6 E5*00            [12] 7653 	mov	a,_bp
      002AC8 24 04            [12] 7654 	add	a,#0x04
      002ACA F8               [12] 7655 	mov	r0,a
      002ACB E6               [12] 7656 	mov	a,@r0
      002ACC C0 E0            [24] 7657 	push	acc
      002ACE 08               [12] 7658 	inc	r0
      002ACF E6               [12] 7659 	mov	a,@r0
      002AD0 C0 E0            [24] 7660 	push	acc
      002AD2 08               [12] 7661 	inc	r0
      002AD3 E6               [12] 7662 	mov	a,@r0
      002AD4 C0 E0            [24] 7663 	push	acc
      002AD6 08               [12] 7664 	inc	r0
      002AD7 E6               [12] 7665 	mov	a,@r0
      002AD8 C0 E0            [24] 7666 	push	acc
      002ADA 8A 82            [24] 7667 	mov	dpl,r2
      002ADC 8B 83            [24] 7668 	mov	dph,r3
      002ADE 8F F0            [24] 7669 	mov	b,r7
      002AE0 12r00r00         [24] 7670 	lcall	_stack_push
      002AE3 AE 82            [24] 7671 	mov	r6,dpl
      002AE5 AF 83            [24] 7672 	mov	r7,dph
      002AE7 E5 81            [12] 7673 	mov	a,sp
      002AE9 24 FC            [12] 7674 	add	a,#0xfc
      002AEB F5 81            [12] 7675 	mov	sp,a
      002AED EE               [12] 7676 	mov	a,r6
      002AEE 4F               [12] 7677 	orl	a,r7
      002AEF 70 22            [24] 7678 	jnz	00102$
      002AF1 7Dr93            [12] 7679 	mov	r5,#___str_13
      002AF3 7Es00            [12] 7680 	mov	r6,#(___str_13 >> 8)
      002AF5 7F 80            [12] 7681 	mov	r7,#0x80
                                   7682 ;	calc.c:51: return;
      002AF7                       7683 00109$:
                                   7684 ;	calc.c:49: for (; *s; s++) putchar(*s);
      002AF7 8D 82            [24] 7685 	mov	dpl,r5
      002AF9 8E 83            [24] 7686 	mov	dph,r6
      002AFB 8F F0            [24] 7687 	mov	b,r7
      002AFD 12r00r00         [24] 7688 	lcall	__gptrget
      002B00 FC               [12] 7689 	mov	r4,a
      002B01 60 10            [24] 7690 	jz	00102$
      002B03 7B 00            [12] 7691 	mov	r3,#0x00
      002B05 8C 82            [24] 7692 	mov	dpl,r4
      002B07 8B 83            [24] 7693 	mov	dph,r3
      002B09 12r00r00         [24] 7694 	lcall	_putchar
      002B0C 0D               [12] 7695 	inc	r5
                                   7696 ;	calc.c:356: if (!stack_push(ctx->ps, ctx->acc)) printstr("\r\nstack overflow\r\n");
      002B0D BD 00 E7         [24] 7697 	cjne	r5,#0x00,00109$
      002B10 0E               [12] 7698 	inc	r6
      002B11 80 E4            [24] 7699 	sjmp	00109$
      002B13                       7700 00102$:
                                   7701 ;	calc.c:358: if (delta->event == EVENT_OP) return operator(_ctx, delta);
      002B13 E5*00            [12] 7702 	mov	a,_bp
      002B15 24 FB            [12] 7703 	add	a,#0xfb
      002B17 F8               [12] 7704 	mov	r0,a
      002B18 86 05            [24] 7705 	mov	ar5,@r0
      002B1A 08               [12] 7706 	inc	r0
      002B1B 86 06            [24] 7707 	mov	ar6,@r0
      002B1D 08               [12] 7708 	inc	r0
      002B1E 86 07            [24] 7709 	mov	ar7,@r0
      002B20 74 02            [12] 7710 	mov	a,#0x02
      002B22 2D               [12] 7711 	add	a,r5
      002B23 FA               [12] 7712 	mov	r2,a
      002B24 E4               [12] 7713 	clr	a
      002B25 3E               [12] 7714 	addc	a,r6
      002B26 FB               [12] 7715 	mov	r3,a
      002B27 8F 04            [24] 7716 	mov	ar4,r7
      002B29 8A 82            [24] 7717 	mov	dpl,r2
      002B2B 8B 83            [24] 7718 	mov	dph,r3
      002B2D 8C F0            [24] 7719 	mov	b,r4
      002B2F 12r00r00         [24] 7720 	lcall	__gptrget
      002B32 FA               [12] 7721 	mov	r2,a
      002B33 A3               [24] 7722 	inc	dptr
      002B34 12r00r00         [24] 7723 	lcall	__gptrget
      002B37 FB               [12] 7724 	mov	r3,a
      002B38 BA 02 27         [24] 7725 	cjne	r2,#0x02,00104$
      002B3B BB 00 24         [24] 7726 	cjne	r3,#0x00,00104$
      002B3E C0 05            [24] 7727 	push	ar5
      002B40 C0 06            [24] 7728 	push	ar6
      002B42 C0 07            [24] 7729 	push	ar7
      002B44 A8*00            [24] 7730 	mov	r0,_bp
      002B46 08               [12] 7731 	inc	r0
      002B47 86 82            [24] 7732 	mov	dpl,@r0
      002B49 08               [12] 7733 	inc	r0
      002B4A 86 83            [24] 7734 	mov	dph,@r0
      002B4C 08               [12] 7735 	inc	r0
      002B4D 86 F0            [24] 7736 	mov	b,@r0
      002B4F 12r07rC1         [24] 7737 	lcall	_operator
      002B52 AE 82            [24] 7738 	mov	r6,dpl
      002B54 AF 83            [24] 7739 	mov	r7,dph
      002B56 15 81            [12] 7740 	dec	sp
      002B58 15 81            [12] 7741 	dec	sp
      002B5A 15 81            [12] 7742 	dec	sp
      002B5C 8E 82            [24] 7743 	mov	dpl,r6
      002B5E 8F 83            [24] 7744 	mov	dph,r7
      002B60 80 03            [24] 7745 	sjmp	00111$
      002B62                       7746 00104$:
                                   7747 ;	calc.c:359: else return 1;
      002B62 90 00 01         [24] 7748 	mov	dptr,#0x0001
      002B65                       7749 00111$:
                                   7750 ;	calc.c:360: }
      002B65 85*00 81         [24] 7751 	mov	sp,_bp
      002B68 D0*00            [24] 7752 	pop	_bp
      002B6A 22               [24] 7753 	ret
                                   7754 ;------------------------------------------------------------
                                   7755 ;Allocation info for local variables in function 'reset_acc'
                                   7756 ;------------------------------------------------------------
                                   7757 ;delta                     Allocated to stack - _bp -5
                                   7758 ;_ctx                      Allocated to registers r5 r6 r7 
                                   7759 ;ctx                       Allocated to registers r5 r6 r7 
                                   7760 ;------------------------------------------------------------
                                   7761 ;	calc.c:362: static int reset_acc(void *_ctx, delta_t *delta) __reentrant {
                                   7762 ;	-----------------------------------------
                                   7763 ;	 function reset_acc
                                   7764 ;	-----------------------------------------
      002B6B                       7765 _reset_acc:
      002B6B C0*00            [24] 7766 	push	_bp
      002B6D 85 81*00         [24] 7767 	mov	_bp,sp
      002B70 AD 82            [24] 7768 	mov	r5,dpl
      002B72 AE 83            [24] 7769 	mov	r6,dph
      002B74 AF F0            [24] 7770 	mov	r7,b
                                   7771 ;	calc.c:363: calc_ctx_t *ctx = (calc_ctx_t *)_ctx;
                                   7772 ;	calc.c:365: if (delta->event == EVENT_RSTA_I) ctx->acc_valid = 0;
      002B76 E5*00            [12] 7773 	mov	a,_bp
      002B78 24 FB            [12] 7774 	add	a,#0xfb
      002B7A F8               [12] 7775 	mov	r0,a
      002B7B 86 02            [24] 7776 	mov	ar2,@r0
      002B7D 08               [12] 7777 	inc	r0
      002B7E 86 03            [24] 7778 	mov	ar3,@r0
      002B80 08               [12] 7779 	inc	r0
      002B81 86 04            [24] 7780 	mov	ar4,@r0
      002B83 74 02            [12] 7781 	mov	a,#0x02
      002B85 2A               [12] 7782 	add	a,r2
      002B86 FA               [12] 7783 	mov	r2,a
      002B87 E4               [12] 7784 	clr	a
      002B88 3B               [12] 7785 	addc	a,r3
      002B89 FB               [12] 7786 	mov	r3,a
      002B8A 8A 82            [24] 7787 	mov	dpl,r2
      002B8C 8B 83            [24] 7788 	mov	dph,r3
      002B8E 8C F0            [24] 7789 	mov	b,r4
      002B90 12r00r00         [24] 7790 	lcall	__gptrget
      002B93 FA               [12] 7791 	mov	r2,a
      002B94 A3               [24] 7792 	inc	dptr
      002B95 12r00r00         [24] 7793 	lcall	__gptrget
      002B98 FB               [12] 7794 	mov	r3,a
      002B99 BA 07 16         [24] 7795 	cjne	r2,#0x07,00102$
      002B9C BB 00 13         [24] 7796 	cjne	r3,#0x00,00102$
      002B9F 74 06            [12] 7797 	mov	a,#0x06
      002BA1 2D               [12] 7798 	add	a,r5
      002BA2 FA               [12] 7799 	mov	r2,a
      002BA3 E4               [12] 7800 	clr	a
      002BA4 3E               [12] 7801 	addc	a,r6
      002BA5 FB               [12] 7802 	mov	r3,a
      002BA6 8F 04            [24] 7803 	mov	ar4,r7
      002BA8 8A 82            [24] 7804 	mov	dpl,r2
      002BAA 8B 83            [24] 7805 	mov	dph,r3
      002BAC 8C F0            [24] 7806 	mov	b,r4
      002BAE E4               [12] 7807 	clr	a
      002BAF 12r00r00         [24] 7808 	lcall	__gptrput
      002BB2                       7809 00102$:
                                   7810 ;	calc.c:366: ctx->acc = 0l;
      002BB2 74 02            [12] 7811 	mov	a,#0x02
      002BB4 2D               [12] 7812 	add	a,r5
      002BB5 FD               [12] 7813 	mov	r5,a
      002BB6 E4               [12] 7814 	clr	a
      002BB7 3E               [12] 7815 	addc	a,r6
      002BB8 FE               [12] 7816 	mov	r6,a
      002BB9 8D 82            [24] 7817 	mov	dpl,r5
      002BBB 8E 83            [24] 7818 	mov	dph,r6
      002BBD 8F F0            [24] 7819 	mov	b,r7
      002BBF E4               [12] 7820 	clr	a
      002BC0 12r00r00         [24] 7821 	lcall	__gptrput
      002BC3 A3               [24] 7822 	inc	dptr
      002BC4 12r00r00         [24] 7823 	lcall	__gptrput
      002BC7 A3               [24] 7824 	inc	dptr
      002BC8 12r00r00         [24] 7825 	lcall	__gptrput
      002BCB A3               [24] 7826 	inc	dptr
      002BCC 12r00r00         [24] 7827 	lcall	__gptrput
                                   7828 ;	calc.c:368: return 1;
      002BCF 90 00 01         [24] 7829 	mov	dptr,#0x0001
                                   7830 ;	calc.c:369: }
      002BD2 D0*00            [24] 7831 	pop	_bp
      002BD4 22               [24] 7832 	ret
                                   7833 ;------------------------------------------------------------
                                   7834 ;Allocation info for local variables in function 'reset_base'
                                   7835 ;------------------------------------------------------------
                                   7836 ;delta                     Allocated to stack - _bp -5
                                   7837 ;_ctx                      Allocated to registers r5 r6 r7 
                                   7838 ;ctx                       Allocated to registers r5 r6 r7 
                                   7839 ;------------------------------------------------------------
                                   7840 ;	calc.c:371: static int reset_base(void *_ctx, delta_t *delta) __reentrant {
                                   7841 ;	-----------------------------------------
                                   7842 ;	 function reset_base
                                   7843 ;	-----------------------------------------
      002BD5                       7844 _reset_base:
      002BD5 C0*00            [24] 7845 	push	_bp
      002BD7 85 81*00         [24] 7846 	mov	_bp,sp
      002BDA AD 82            [24] 7847 	mov	r5,dpl
      002BDC AE 83            [24] 7848 	mov	r6,dph
      002BDE AF F0            [24] 7849 	mov	r7,b
                                   7850 ;	calc.c:372: calc_ctx_t *ctx = (calc_ctx_t *)_ctx;
                                   7851 ;	calc.c:376: switch (ctx->digit[0]) {
      002BE0 74 07            [12] 7852 	mov	a,#0x07
      002BE2 2D               [12] 7853 	add	a,r5
      002BE3 FA               [12] 7854 	mov	r2,a
      002BE4 E4               [12] 7855 	clr	a
      002BE5 3E               [12] 7856 	addc	a,r6
      002BE6 FB               [12] 7857 	mov	r3,a
      002BE7 8F 04            [24] 7858 	mov	ar4,r7
      002BE9 8A 82            [24] 7859 	mov	dpl,r2
      002BEB 8B 83            [24] 7860 	mov	dph,r3
      002BED 8C F0            [24] 7861 	mov	b,r4
      002BEF 12r00r00         [24] 7862 	lcall	__gptrget
      002BF2 FC               [12] 7863 	mov	r4,a
      002BF3 BC 48 02         [24] 7864 	cjne	r4,#0x48,00124$
      002BF6 80 0F            [24] 7865 	sjmp	00101$
      002BF8                       7866 00124$:
      002BF8 BC 4F 02         [24] 7867 	cjne	r4,#0x4f,00125$
      002BFB 80 2E            [24] 7868 	sjmp	00103$
      002BFD                       7869 00125$:
      002BFD BC 68 02         [24] 7870 	cjne	r4,#0x68,00126$
      002C00 80 17            [24] 7871 	sjmp	00102$
      002C02                       7872 00126$:
                                   7873 ;	calc.c:377: case 'H':
      002C02 BC 6F 48         [24] 7874 	cjne	r4,#0x6f,00105$
      002C05 80 36            [24] 7875 	sjmp	00104$
      002C07                       7876 00101$:
                                   7877 ;	calc.c:378: ctx->base = 16;
      002C07 8D 82            [24] 7878 	mov	dpl,r5
      002C09 8E 83            [24] 7879 	mov	dph,r6
      002C0B 8F F0            [24] 7880 	mov	b,r7
      002C0D 74 10            [12] 7881 	mov	a,#0x10
      002C0F 12r00r00         [24] 7882 	lcall	__gptrput
      002C12 A3               [24] 7883 	inc	dptr
      002C13 E4               [12] 7884 	clr	a
      002C14 12r00r00         [24] 7885 	lcall	__gptrput
                                   7886 ;	calc.c:379: break;
                                   7887 ;	calc.c:380: case 'h':
      002C17 80 34            [24] 7888 	sjmp	00105$
      002C19                       7889 00102$:
                                   7890 ;	calc.c:381: ctx->base = 10;
      002C19 8D 82            [24] 7891 	mov	dpl,r5
      002C1B 8E 83            [24] 7892 	mov	dph,r6
      002C1D 8F F0            [24] 7893 	mov	b,r7
      002C1F 74 0A            [12] 7894 	mov	a,#0x0a
      002C21 12r00r00         [24] 7895 	lcall	__gptrput
      002C24 A3               [24] 7896 	inc	dptr
      002C25 E4               [12] 7897 	clr	a
      002C26 12r00r00         [24] 7898 	lcall	__gptrput
                                   7899 ;	calc.c:382: break;
                                   7900 ;	calc.c:383: case 'O':
      002C29 80 22            [24] 7901 	sjmp	00105$
      002C2B                       7902 00103$:
                                   7903 ;	calc.c:384: ctx->base = 8;
      002C2B 8D 82            [24] 7904 	mov	dpl,r5
      002C2D 8E 83            [24] 7905 	mov	dph,r6
      002C2F 8F F0            [24] 7906 	mov	b,r7
      002C31 74 08            [12] 7907 	mov	a,#0x08
      002C33 12r00r00         [24] 7908 	lcall	__gptrput
      002C36 A3               [24] 7909 	inc	dptr
      002C37 E4               [12] 7910 	clr	a
      002C38 12r00r00         [24] 7911 	lcall	__gptrput
                                   7912 ;	calc.c:385: break;
                                   7913 ;	calc.c:386: case 'o':
      002C3B 80 10            [24] 7914 	sjmp	00105$
      002C3D                       7915 00104$:
                                   7916 ;	calc.c:387: ctx->base = 2;
      002C3D 8D 82            [24] 7917 	mov	dpl,r5
      002C3F 8E 83            [24] 7918 	mov	dph,r6
      002C41 8F F0            [24] 7919 	mov	b,r7
      002C43 74 02            [12] 7920 	mov	a,#0x02
      002C45 12r00r00         [24] 7921 	lcall	__gptrput
      002C48 A3               [24] 7922 	inc	dptr
      002C49 E4               [12] 7923 	clr	a
      002C4A 12r00r00         [24] 7924 	lcall	__gptrput
                                   7925 ;	calc.c:389: }
      002C4D                       7926 00105$:
                                   7927 ;	calc.c:391: return 1;
      002C4D 90 00 01         [24] 7928 	mov	dptr,#0x0001
                                   7929 ;	calc.c:392: }
      002C50 D0*00            [24] 7930 	pop	_bp
      002C52 22               [24] 7931 	ret
                                   7932 ;------------------------------------------------------------
                                   7933 ;Allocation info for local variables in function 'status'
                                   7934 ;------------------------------------------------------------
                                   7935 ;delta                     Allocated to stack - _bp -5
                                   7936 ;_ctx                      Allocated to registers r5 r6 r7 
                                   7937 ;ctx                       Allocated to stack - _bp +4
                                   7938 ;__1310720127              Allocated to registers 
                                   7939 ;d                         Allocated to stack - _bp +7
                                   7940 ;mask                      Allocated to stack - _bp +11
                                   7941 ;sloc0                     Allocated to stack - _bp +1
                                   7942 ;------------------------------------------------------------
                                   7943 ;	calc.c:394: static int status(void *_ctx, delta_t *delta) __reentrant {
                                   7944 ;	-----------------------------------------
                                   7945 ;	 function status
                                   7946 ;	-----------------------------------------
      002C53                       7947 _status:
      002C53 C0*00            [24] 7948 	push	_bp
      002C55 E5 81            [12] 7949 	mov	a,sp
      002C57 F5*00            [12] 7950 	mov	_bp,a
      002C59 24 0E            [12] 7951 	add	a,#0x0e
      002C5B F5 81            [12] 7952 	mov	sp,a
      002C5D AD 82            [24] 7953 	mov	r5,dpl
      002C5F AE 83            [24] 7954 	mov	r6,dph
      002C61 AF F0            [24] 7955 	mov	r7,b
                                   7956 ;	calc.c:395: calc_ctx_t *ctx = (calc_ctx_t *)_ctx;
      002C63 E5*00            [12] 7957 	mov	a,_bp
      002C65 24 04            [12] 7958 	add	a,#0x04
      002C67 F8               [12] 7959 	mov	r0,a
      002C68 A6 05            [24] 7960 	mov	@r0,ar5
      002C6A 08               [12] 7961 	inc	r0
      002C6B A6 06            [24] 7962 	mov	@r0,ar6
      002C6D 08               [12] 7963 	inc	r0
      002C6E A6 07            [24] 7964 	mov	@r0,ar7
                                   7965 ;	calc.c:399: printf("\r\nbase = %d, ", ctx->base);
      002C70 E5*00            [12] 7966 	mov	a,_bp
      002C72 24 04            [12] 7967 	add	a,#0x04
      002C74 F8               [12] 7968 	mov	r0,a
      002C75 86 82            [24] 7969 	mov	dpl,@r0
      002C77 08               [12] 7970 	inc	r0
      002C78 86 83            [24] 7971 	mov	dph,@r0
      002C7A 08               [12] 7972 	inc	r0
      002C7B 86 F0            [24] 7973 	mov	b,@r0
      002C7D 12r00r00         [24] 7974 	lcall	__gptrget
      002C80 FB               [12] 7975 	mov	r3,a
      002C81 A3               [24] 7976 	inc	dptr
      002C82 12r00r00         [24] 7977 	lcall	__gptrget
      002C85 FC               [12] 7978 	mov	r4,a
      002C86 C0 03            [24] 7979 	push	ar3
      002C88 C0 04            [24] 7980 	push	ar4
      002C8A 74rBB            [12] 7981 	mov	a,#___str_15
      002C8C C0 E0            [24] 7982 	push	acc
      002C8E 74s00            [12] 7983 	mov	a,#(___str_15 >> 8)
      002C90 C0 E0            [24] 7984 	push	acc
      002C92 74 80            [12] 7985 	mov	a,#0x80
      002C94 C0 E0            [24] 7986 	push	acc
      002C96 12r00r00         [24] 7987 	lcall	_printf
      002C99 E5 81            [12] 7988 	mov	a,sp
      002C9B 24 FB            [12] 7989 	add	a,#0xfb
      002C9D F5 81            [12] 7990 	mov	sp,a
                                   7991 ;	calc.c:400: printf("acc = %ld / ", ctx->acc);
      002C9F E5*00            [12] 7992 	mov	a,_bp
      002CA1 24 04            [12] 7993 	add	a,#0x04
      002CA3 F8               [12] 7994 	mov	r0,a
      002CA4 A9*00            [24] 7995 	mov	r1,_bp
      002CA6 09               [12] 7996 	inc	r1
      002CA7 74 02            [12] 7997 	mov	a,#0x02
      002CA9 26               [12] 7998 	add	a,@r0
      002CAA F7               [12] 7999 	mov	@r1,a
      002CAB E4               [12] 8000 	clr	a
      002CAC 08               [12] 8001 	inc	r0
      002CAD 36               [12] 8002 	addc	a,@r0
      002CAE 09               [12] 8003 	inc	r1
      002CAF F7               [12] 8004 	mov	@r1,a
      002CB0 08               [12] 8005 	inc	r0
      002CB1 09               [12] 8006 	inc	r1
      002CB2 E6               [12] 8007 	mov	a,@r0
      002CB3 F7               [12] 8008 	mov	@r1,a
      002CB4 A8*00            [24] 8009 	mov	r0,_bp
      002CB6 08               [12] 8010 	inc	r0
      002CB7 86 82            [24] 8011 	mov	dpl,@r0
      002CB9 08               [12] 8012 	inc	r0
      002CBA 86 83            [24] 8013 	mov	dph,@r0
      002CBC 08               [12] 8014 	inc	r0
      002CBD 86 F0            [24] 8015 	mov	b,@r0
      002CBF 12r00r00         [24] 8016 	lcall	__gptrget
      002CC2 FC               [12] 8017 	mov	r4,a
      002CC3 A3               [24] 8018 	inc	dptr
      002CC4 12r00r00         [24] 8019 	lcall	__gptrget
      002CC7 FD               [12] 8020 	mov	r5,a
      002CC8 A3               [24] 8021 	inc	dptr
      002CC9 12r00r00         [24] 8022 	lcall	__gptrget
      002CCC FE               [12] 8023 	mov	r6,a
      002CCD A3               [24] 8024 	inc	dptr
      002CCE 12r00r00         [24] 8025 	lcall	__gptrget
      002CD1 FF               [12] 8026 	mov	r7,a
      002CD2 C0 04            [24] 8027 	push	ar4
      002CD4 C0 05            [24] 8028 	push	ar5
      002CD6 C0 06            [24] 8029 	push	ar6
      002CD8 C0 07            [24] 8030 	push	ar7
      002CDA 74rC9            [12] 8031 	mov	a,#___str_16
      002CDC C0 E0            [24] 8032 	push	acc
      002CDE 74s00            [12] 8033 	mov	a,#(___str_16 >> 8)
      002CE0 C0 E0            [24] 8034 	push	acc
      002CE2 74 80            [12] 8035 	mov	a,#0x80
      002CE4 C0 E0            [24] 8036 	push	acc
      002CE6 12r00r00         [24] 8037 	lcall	_printf
      002CE9 E5 81            [12] 8038 	mov	a,sp
      002CEB 24 F9            [12] 8039 	add	a,#0xf9
      002CED F5 81            [12] 8040 	mov	sp,a
                                   8041 ;	calc.c:401: printf("%08lx / ", ctx->acc);
      002CEF A8*00            [24] 8042 	mov	r0,_bp
      002CF1 08               [12] 8043 	inc	r0
      002CF2 86 82            [24] 8044 	mov	dpl,@r0
      002CF4 08               [12] 8045 	inc	r0
      002CF5 86 83            [24] 8046 	mov	dph,@r0
      002CF7 08               [12] 8047 	inc	r0
      002CF8 86 F0            [24] 8048 	mov	b,@r0
      002CFA 12r00r00         [24] 8049 	lcall	__gptrget
      002CFD FC               [12] 8050 	mov	r4,a
      002CFE A3               [24] 8051 	inc	dptr
      002CFF 12r00r00         [24] 8052 	lcall	__gptrget
      002D02 FD               [12] 8053 	mov	r5,a
      002D03 A3               [24] 8054 	inc	dptr
      002D04 12r00r00         [24] 8055 	lcall	__gptrget
      002D07 FE               [12] 8056 	mov	r6,a
      002D08 A3               [24] 8057 	inc	dptr
      002D09 12r00r00         [24] 8058 	lcall	__gptrget
      002D0C FF               [12] 8059 	mov	r7,a
      002D0D C0 04            [24] 8060 	push	ar4
      002D0F C0 05            [24] 8061 	push	ar5
      002D11 C0 06            [24] 8062 	push	ar6
      002D13 C0 07            [24] 8063 	push	ar7
      002D15 74r27            [12] 8064 	mov	a,#___str_4
      002D17 C0 E0            [24] 8065 	push	acc
      002D19 74s00            [12] 8066 	mov	a,#(___str_4 >> 8)
      002D1B C0 E0            [24] 8067 	push	acc
      002D1D 74 80            [12] 8068 	mov	a,#0x80
      002D1F C0 E0            [24] 8069 	push	acc
      002D21 12r00r00         [24] 8070 	lcall	_printf
      002D24 E5 81            [12] 8071 	mov	a,sp
      002D26 24 F9            [12] 8072 	add	a,#0xf9
      002D28 F5 81            [12] 8073 	mov	sp,a
                                   8074 ;	calc.c:402: printbin(ctx->acc);
      002D2A A8*00            [24] 8075 	mov	r0,_bp
      002D2C 08               [12] 8076 	inc	r0
      002D2D 86 82            [24] 8077 	mov	dpl,@r0
      002D2F 08               [12] 8078 	inc	r0
      002D30 86 83            [24] 8079 	mov	dph,@r0
      002D32 08               [12] 8080 	inc	r0
      002D33 86 F0            [24] 8081 	mov	b,@r0
      002D35 E5*00            [12] 8082 	mov	a,_bp
      002D37 24 07            [12] 8083 	add	a,#0x07
      002D39 F9               [12] 8084 	mov	r1,a
      002D3A 12r00r00         [24] 8085 	lcall	__gptrget
      002D3D F7               [12] 8086 	mov	@r1,a
      002D3E A3               [24] 8087 	inc	dptr
      002D3F 12r00r00         [24] 8088 	lcall	__gptrget
      002D42 09               [12] 8089 	inc	r1
      002D43 F7               [12] 8090 	mov	@r1,a
      002D44 A3               [24] 8091 	inc	dptr
      002D45 12r00r00         [24] 8092 	lcall	__gptrget
      002D48 09               [12] 8093 	inc	r1
      002D49 F7               [12] 8094 	mov	@r1,a
      002D4A A3               [24] 8095 	inc	dptr
      002D4B 12r00r00         [24] 8096 	lcall	__gptrget
      002D4E 09               [12] 8097 	inc	r1
      002D4F F7               [12] 8098 	mov	@r1,a
                                   8099 ;	calc.c:57: for (mask = 0x80000000lu; mask; mask >>= 1)
      002D50 E5*00            [12] 8100 	mov	a,_bp
      002D52 24 0B            [12] 8101 	add	a,#0x0b
      002D54 F8               [12] 8102 	mov	r0,a
      002D55 E4               [12] 8103 	clr	a
      002D56 F6               [12] 8104 	mov	@r0,a
      002D57 08               [12] 8105 	inc	r0
      002D58 F6               [12] 8106 	mov	@r0,a
      002D59 08               [12] 8107 	inc	r0
      002D5A F6               [12] 8108 	mov	@r0,a
      002D5B 08               [12] 8109 	inc	r0
      002D5C 76 80            [12] 8110 	mov	@r0,#0x80
      002D5E                       8111 00103$:
                                   8112 ;	calc.c:58: (void)putchar((d & mask) ? (int)'1' : (int)'0');
      002D5E E5*00            [12] 8113 	mov	a,_bp
      002D60 24 07            [12] 8114 	add	a,#0x07
      002D62 F8               [12] 8115 	mov	r0,a
      002D63 86 04            [24] 8116 	mov	ar4,@r0
      002D65 08               [12] 8117 	inc	r0
      002D66 86 05            [24] 8118 	mov	ar5,@r0
      002D68 08               [12] 8119 	inc	r0
      002D69 86 06            [24] 8120 	mov	ar6,@r0
      002D6B 08               [12] 8121 	inc	r0
      002D6C 86 07            [24] 8122 	mov	ar7,@r0
      002D6E E5*00            [12] 8123 	mov	a,_bp
      002D70 24 0B            [12] 8124 	add	a,#0x0b
      002D72 F8               [12] 8125 	mov	r0,a
      002D73 E6               [12] 8126 	mov	a,@r0
      002D74 52 04            [12] 8127 	anl	ar4,a
      002D76 08               [12] 8128 	inc	r0
      002D77 E6               [12] 8129 	mov	a,@r0
      002D78 52 05            [12] 8130 	anl	ar5,a
      002D7A 08               [12] 8131 	inc	r0
      002D7B E6               [12] 8132 	mov	a,@r0
      002D7C 52 06            [12] 8133 	anl	ar6,a
      002D7E 08               [12] 8134 	inc	r0
      002D7F E6               [12] 8135 	mov	a,@r0
      002D80 52 07            [12] 8136 	anl	ar7,a
      002D82 EC               [12] 8137 	mov	a,r4
      002D83 4D               [12] 8138 	orl	a,r5
      002D84 4E               [12] 8139 	orl	a,r6
      002D85 4F               [12] 8140 	orl	a,r7
      002D86 60 06            [24] 8141 	jz	00107$
      002D88 7E 31            [12] 8142 	mov	r6,#0x31
      002D8A 7F 00            [12] 8143 	mov	r7,#0x00
      002D8C 80 04            [24] 8144 	sjmp	00108$
      002D8E                       8145 00107$:
      002D8E 7E 30            [12] 8146 	mov	r6,#0x30
      002D90 7F 00            [12] 8147 	mov	r7,#0x00
      002D92                       8148 00108$:
      002D92 8E 82            [24] 8149 	mov	dpl,r6
      002D94 8F 83            [24] 8150 	mov	dph,r7
      002D96 12r00r00         [24] 8151 	lcall	_putchar
                                   8152 ;	calc.c:57: for (mask = 0x80000000lu; mask; mask >>= 1)
      002D99 E5*00            [12] 8153 	mov	a,_bp
      002D9B 24 0B            [12] 8154 	add	a,#0x0b
      002D9D F8               [12] 8155 	mov	r0,a
      002D9E 08               [12] 8156 	inc	r0
      002D9F 08               [12] 8157 	inc	r0
      002DA0 08               [12] 8158 	inc	r0
      002DA1 E6               [12] 8159 	mov	a,@r0
      002DA2 C3               [12] 8160 	clr	c
      002DA3 13               [12] 8161 	rrc	a
      002DA4 F6               [12] 8162 	mov	@r0,a
      002DA5 18               [12] 8163 	dec	r0
      002DA6 E6               [12] 8164 	mov	a,@r0
      002DA7 13               [12] 8165 	rrc	a
      002DA8 F6               [12] 8166 	mov	@r0,a
      002DA9 18               [12] 8167 	dec	r0
      002DAA E6               [12] 8168 	mov	a,@r0
      002DAB 13               [12] 8169 	rrc	a
      002DAC F6               [12] 8170 	mov	@r0,a
      002DAD 18               [12] 8171 	dec	r0
      002DAE E6               [12] 8172 	mov	a,@r0
      002DAF 13               [12] 8173 	rrc	a
      002DB0 F6               [12] 8174 	mov	@r0,a
      002DB1 E5*00            [12] 8175 	mov	a,_bp
      002DB3 24 0B            [12] 8176 	add	a,#0x0b
      002DB5 F8               [12] 8177 	mov	r0,a
      002DB6 E6               [12] 8178 	mov	a,@r0
      002DB7 08               [12] 8179 	inc	r0
      002DB8 46               [12] 8180 	orl	a,@r0
      002DB9 08               [12] 8181 	inc	r0
      002DBA 46               [12] 8182 	orl	a,@r0
      002DBB 08               [12] 8183 	inc	r0
      002DBC 46               [12] 8184 	orl	a,@r0
      002DBD 70 9F            [24] 8185 	jnz	00103$
                                   8186 ;	calc.c:403: printf(", acc_valid = %d\r\n", (int)ctx->acc_valid);
      002DBF E5*00            [12] 8187 	mov	a,_bp
      002DC1 24 04            [12] 8188 	add	a,#0x04
      002DC3 F8               [12] 8189 	mov	r0,a
      002DC4 74 06            [12] 8190 	mov	a,#0x06
      002DC6 26               [12] 8191 	add	a,@r0
      002DC7 FD               [12] 8192 	mov	r5,a
      002DC8 E4               [12] 8193 	clr	a
      002DC9 08               [12] 8194 	inc	r0
      002DCA 36               [12] 8195 	addc	a,@r0
      002DCB FE               [12] 8196 	mov	r6,a
      002DCC 08               [12] 8197 	inc	r0
      002DCD 86 07            [24] 8198 	mov	ar7,@r0
      002DCF 8D 82            [24] 8199 	mov	dpl,r5
      002DD1 8E 83            [24] 8200 	mov	dph,r6
      002DD3 8F F0            [24] 8201 	mov	b,r7
      002DD5 12r00r00         [24] 8202 	lcall	__gptrget
      002DD8 FD               [12] 8203 	mov	r5,a
      002DD9 7F 00            [12] 8204 	mov	r7,#0x00
      002DDB C0 05            [24] 8205 	push	ar5
      002DDD C0 07            [24] 8206 	push	ar7
      002DDF 74rD6            [12] 8207 	mov	a,#___str_17
      002DE1 C0 E0            [24] 8208 	push	acc
      002DE3 74s00            [12] 8209 	mov	a,#(___str_17 >> 8)
      002DE5 C0 E0            [24] 8210 	push	acc
      002DE7 74 80            [12] 8211 	mov	a,#0x80
      002DE9 C0 E0            [24] 8212 	push	acc
      002DEB 12r00r00         [24] 8213 	lcall	_printf
      002DEE E5 81            [12] 8214 	mov	a,sp
      002DF0 24 FB            [12] 8215 	add	a,#0xfb
      002DF2 F5 81            [12] 8216 	mov	sp,a
                                   8217 ;	calc.c:404: printf("primary = %p, secondary = %p\r\n", ctx->ps, ctx->ss);
      002DF4 E5*00            [12] 8218 	mov	a,_bp
      002DF6 24 04            [12] 8219 	add	a,#0x04
      002DF8 F8               [12] 8220 	mov	r0,a
      002DF9 74 14            [12] 8221 	mov	a,#0x14
      002DFB 26               [12] 8222 	add	a,@r0
      002DFC FD               [12] 8223 	mov	r5,a
      002DFD 74 40            [12] 8224 	mov	a,#0x40
      002DFF 08               [12] 8225 	inc	r0
      002E00 36               [12] 8226 	addc	a,@r0
      002E01 FE               [12] 8227 	mov	r6,a
      002E02 08               [12] 8228 	inc	r0
      002E03 86 07            [24] 8229 	mov	ar7,@r0
      002E05 8D 82            [24] 8230 	mov	dpl,r5
      002E07 8E 83            [24] 8231 	mov	dph,r6
      002E09 8F F0            [24] 8232 	mov	b,r7
      002E0B 12r00r00         [24] 8233 	lcall	__gptrget
      002E0E FD               [12] 8234 	mov	r5,a
      002E0F A3               [24] 8235 	inc	dptr
      002E10 12r00r00         [24] 8236 	lcall	__gptrget
      002E13 FE               [12] 8237 	mov	r6,a
      002E14 A3               [24] 8238 	inc	dptr
      002E15 12r00r00         [24] 8239 	lcall	__gptrget
      002E18 FF               [12] 8240 	mov	r7,a
      002E19 E5*00            [12] 8241 	mov	a,_bp
      002E1B 24 04            [12] 8242 	add	a,#0x04
      002E1D F8               [12] 8243 	mov	r0,a
      002E1E 74 11            [12] 8244 	mov	a,#0x11
      002E20 26               [12] 8245 	add	a,@r0
      002E21 FA               [12] 8246 	mov	r2,a
      002E22 74 40            [12] 8247 	mov	a,#0x40
      002E24 08               [12] 8248 	inc	r0
      002E25 36               [12] 8249 	addc	a,@r0
      002E26 FB               [12] 8250 	mov	r3,a
      002E27 08               [12] 8251 	inc	r0
      002E28 86 04            [24] 8252 	mov	ar4,@r0
      002E2A 8A 82            [24] 8253 	mov	dpl,r2
      002E2C 8B 83            [24] 8254 	mov	dph,r3
      002E2E 8C F0            [24] 8255 	mov	b,r4
      002E30 12r00r00         [24] 8256 	lcall	__gptrget
      002E33 FA               [12] 8257 	mov	r2,a
      002E34 A3               [24] 8258 	inc	dptr
      002E35 12r00r00         [24] 8259 	lcall	__gptrget
      002E38 FB               [12] 8260 	mov	r3,a
      002E39 A3               [24] 8261 	inc	dptr
      002E3A 12r00r00         [24] 8262 	lcall	__gptrget
      002E3D FC               [12] 8263 	mov	r4,a
      002E3E C0 05            [24] 8264 	push	ar5
      002E40 C0 06            [24] 8265 	push	ar6
      002E42 C0 07            [24] 8266 	push	ar7
      002E44 C0 02            [24] 8267 	push	ar2
      002E46 C0 03            [24] 8268 	push	ar3
      002E48 C0 04            [24] 8269 	push	ar4
      002E4A 74rE9            [12] 8270 	mov	a,#___str_18
      002E4C C0 E0            [24] 8271 	push	acc
      002E4E 74s00            [12] 8272 	mov	a,#(___str_18 >> 8)
      002E50 C0 E0            [24] 8273 	push	acc
      002E52 74 80            [12] 8274 	mov	a,#0x80
      002E54 C0 E0            [24] 8275 	push	acc
      002E56 12r00r00         [24] 8276 	lcall	_printf
      002E59 E5 81            [12] 8277 	mov	a,sp
      002E5B 24 F7            [12] 8278 	add	a,#0xf7
      002E5D F5 81            [12] 8279 	mov	sp,a
                                   8280 ;	calc.c:406: return 1;
      002E5F 90 00 01         [24] 8281 	mov	dptr,#0x0001
                                   8282 ;	calc.c:407: }
      002E62 85*00 81         [24] 8283 	mov	sp,_bp
      002E65 D0*00            [24] 8284 	pop	_bp
      002E67 22               [24] 8285 	ret
                                   8286 ;------------------------------------------------------------
                                   8287 ;Allocation info for local variables in function 'help'
                                   8288 ;------------------------------------------------------------
                                   8289 ;delta                     Allocated to stack - _bp -5
                                   8290 ;_ctx                      Allocated to registers 
                                   8291 ;__1310720129              Allocated to registers 
                                   8292 ;s                         Allocated to registers r5 r6 r7 
                                   8293 ;__1310720131              Allocated to registers 
                                   8294 ;s                         Allocated to registers r5 r6 r7 
                                   8295 ;__1310720133              Allocated to registers 
                                   8296 ;s                         Allocated to registers r5 r6 r7 
                                   8297 ;__1310720135              Allocated to registers 
                                   8298 ;s                         Allocated to registers r5 r6 r7 
                                   8299 ;__1310720137              Allocated to registers 
                                   8300 ;s                         Allocated to registers r5 r6 r7 
                                   8301 ;__1310720139              Allocated to registers 
                                   8302 ;s                         Allocated to registers r5 r6 r7 
                                   8303 ;__1310720141              Allocated to registers 
                                   8304 ;s                         Allocated to registers r5 r6 r7 
                                   8305 ;__1310720143              Allocated to registers 
                                   8306 ;s                         Allocated to registers r5 r6 r7 
                                   8307 ;__1310720145              Allocated to registers 
                                   8308 ;s                         Allocated to registers r5 r6 r7 
                                   8309 ;__1310720147              Allocated to registers 
                                   8310 ;s                         Allocated to registers r5 r6 r7 
                                   8311 ;__1310720149              Allocated to registers 
                                   8312 ;s                         Allocated to registers r5 r6 r7 
                                   8313 ;__1310720151              Allocated to registers 
                                   8314 ;s                         Allocated to registers r5 r6 r7 
                                   8315 ;__1310720153              Allocated to registers 
                                   8316 ;s                         Allocated to registers r5 r6 r7 
                                   8317 ;__1310720155              Allocated to registers 
                                   8318 ;s                         Allocated to registers r5 r6 r7 
                                   8319 ;__1310720157              Allocated to registers 
                                   8320 ;s                         Allocated to registers r5 r6 r7 
                                   8321 ;__1310720159              Allocated to registers 
                                   8322 ;s                         Allocated to registers r5 r6 r7 
                                   8323 ;__1310720161              Allocated to registers 
                                   8324 ;s                         Allocated to registers r5 r6 r7 
                                   8325 ;__1310720163              Allocated to registers 
                                   8326 ;s                         Allocated to registers r5 r6 r7 
                                   8327 ;__1310720165              Allocated to registers 
                                   8328 ;s                         Allocated to registers r5 r6 r7 
                                   8329 ;__1310720167              Allocated to registers 
                                   8330 ;s                         Allocated to registers r5 r6 r7 
                                   8331 ;__1310720169              Allocated to registers 
                                   8332 ;s                         Allocated to registers r5 r6 r7 
                                   8333 ;__1310720171              Allocated to registers 
                                   8334 ;s                         Allocated to registers r5 r6 r7 
                                   8335 ;__1310720173              Allocated to registers 
                                   8336 ;s                         Allocated to registers r5 r6 r7 
                                   8337 ;__1310720175              Allocated to registers 
                                   8338 ;s                         Allocated to registers r5 r6 r7 
                                   8339 ;__1310720177              Allocated to registers 
                                   8340 ;s                         Allocated to registers r5 r6 r7 
                                   8341 ;__1310720179              Allocated to registers 
                                   8342 ;s                         Allocated to registers r5 r6 r7 
                                   8343 ;__1310720181              Allocated to registers 
                                   8344 ;s                         Allocated to registers r5 r6 r7 
                                   8345 ;__1310720183              Allocated to registers 
                                   8346 ;s                         Allocated to registers r5 r6 r7 
                                   8347 ;__1310720185              Allocated to registers 
                                   8348 ;s                         Allocated to registers r5 r6 r7 
                                   8349 ;__1310720187              Allocated to registers 
                                   8350 ;s                         Allocated to registers r5 r6 r7 
                                   8351 ;__1310720189              Allocated to registers 
                                   8352 ;s                         Allocated to registers r5 r6 r7 
                                   8353 ;------------------------------------------------------------
                                   8354 ;	calc.c:409: static int help(void *_ctx, delta_t *delta) __reentrant {
                                   8355 ;	-----------------------------------------
                                   8356 ;	 function help
                                   8357 ;	-----------------------------------------
      002E68                       8358 _help:
      002E68 C0*00            [24] 8359 	push	_bp
      002E6A 85 81*00         [24] 8360 	mov	_bp,sp
                                   8361 ;	calc.c:413: printstr("\r\nHhOo\tbase 16 10 8 2\r\n");
      002E6D 7Dr08            [12] 8362 	mov	r5,#___str_19
      002E6F 7Es01            [12] 8363 	mov	r6,#(___str_19 >> 8)
      002E71 7F 80            [12] 8364 	mov	r7,#0x80
                                   8365 ;	calc.c:51: return;
      002E73                       8366 00164$:
                                   8367 ;	calc.c:49: for (; *s; s++) putchar(*s);
      002E73 8D 82            [24] 8368 	mov	dpl,r5
      002E75 8E 83            [24] 8369 	mov	dph,r6
      002E77 8F F0            [24] 8370 	mov	b,r7
      002E79 12r00r00         [24] 8371 	lcall	__gptrget
      002E7C FC               [12] 8372 	mov	r4,a
      002E7D 60 10            [24] 8373 	jz	00102$
      002E7F 7B 00            [12] 8374 	mov	r3,#0x00
      002E81 8C 82            [24] 8375 	mov	dpl,r4
      002E83 8B 83            [24] 8376 	mov	dph,r3
      002E85 12r00r00         [24] 8377 	lcall	_putchar
      002E88 0D               [12] 8378 	inc	r5
                                   8379 ;	calc.c:413: printstr("\r\nHhOo\tbase 16 10 8 2\r\n");
      002E89 BD 00 E7         [24] 8380 	cjne	r5,#0x00,00164$
      002E8C 0E               [12] 8381 	inc	r6
      002E8D 80 E4            [24] 8382 	sjmp	00164$
      002E8F                       8383 00102$:
                                   8384 ;	calc.c:414: printstr("p\tpeek top\r\n");
      002E8F 7Dr20            [12] 8385 	mov	r5,#___str_20
      002E91 7Es01            [12] 8386 	mov	r6,#(___str_20 >> 8)
      002E93 7F 80            [12] 8387 	mov	r7,#0x80
                                   8388 ;	calc.c:51: return;
      002E95                       8389 00167$:
                                   8390 ;	calc.c:49: for (; *s; s++) putchar(*s);
      002E95 8D 82            [24] 8391 	mov	dpl,r5
      002E97 8E 83            [24] 8392 	mov	dph,r6
      002E99 8F F0            [24] 8393 	mov	b,r7
      002E9B 12r00r00         [24] 8394 	lcall	__gptrget
      002E9E FC               [12] 8395 	mov	r4,a
      002E9F 60 10            [24] 8396 	jz	00104$
      002EA1 7B 00            [12] 8397 	mov	r3,#0x00
      002EA3 8C 82            [24] 8398 	mov	dpl,r4
      002EA5 8B 83            [24] 8399 	mov	dph,r3
      002EA7 12r00r00         [24] 8400 	lcall	_putchar
      002EAA 0D               [12] 8401 	inc	r5
                                   8402 ;	calc.c:414: printstr("p\tpeek top\r\n");
      002EAB BD 00 E7         [24] 8403 	cjne	r5,#0x00,00167$
      002EAE 0E               [12] 8404 	inc	r6
      002EAF 80 E4            [24] 8405 	sjmp	00167$
      002EB1                       8406 00104$:
                                   8407 ;	calc.c:415: printstr("P\tprint stack\r\n");
      002EB1 7Dr2D            [12] 8408 	mov	r5,#___str_21
      002EB3 7Es01            [12] 8409 	mov	r6,#(___str_21 >> 8)
      002EB5 7F 80            [12] 8410 	mov	r7,#0x80
                                   8411 ;	calc.c:51: return;
      002EB7                       8412 00170$:
                                   8413 ;	calc.c:49: for (; *s; s++) putchar(*s);
      002EB7 8D 82            [24] 8414 	mov	dpl,r5
      002EB9 8E 83            [24] 8415 	mov	dph,r6
      002EBB 8F F0            [24] 8416 	mov	b,r7
      002EBD 12r00r00         [24] 8417 	lcall	__gptrget
      002EC0 FC               [12] 8418 	mov	r4,a
      002EC1 60 10            [24] 8419 	jz	00106$
      002EC3 7B 00            [12] 8420 	mov	r3,#0x00
      002EC5 8C 82            [24] 8421 	mov	dpl,r4
      002EC7 8B 83            [24] 8422 	mov	dph,r3
      002EC9 12r00r00         [24] 8423 	lcall	_putchar
      002ECC 0D               [12] 8424 	inc	r5
                                   8425 ;	calc.c:415: printstr("P\tprint stack\r\n");
      002ECD BD 00 E7         [24] 8426 	cjne	r5,#0x00,00170$
      002ED0 0E               [12] 8427 	inc	r6
      002ED1 80 E4            [24] 8428 	sjmp	00170$
      002ED3                       8429 00106$:
                                   8430 ;	calc.c:416: printstr("v.\tpop top\r\n");
      002ED3 7Dr3D            [12] 8431 	mov	r5,#___str_22
      002ED5 7Es01            [12] 8432 	mov	r6,#(___str_22 >> 8)
      002ED7 7F 80            [12] 8433 	mov	r7,#0x80
                                   8434 ;	calc.c:51: return;
      002ED9                       8435 00173$:
                                   8436 ;	calc.c:49: for (; *s; s++) putchar(*s);
      002ED9 8D 82            [24] 8437 	mov	dpl,r5
      002EDB 8E 83            [24] 8438 	mov	dph,r6
      002EDD 8F F0            [24] 8439 	mov	b,r7
      002EDF 12r00r00         [24] 8440 	lcall	__gptrget
      002EE2 FC               [12] 8441 	mov	r4,a
      002EE3 60 10            [24] 8442 	jz	00108$
      002EE5 7B 00            [12] 8443 	mov	r3,#0x00
      002EE7 8C 82            [24] 8444 	mov	dpl,r4
      002EE9 8B 83            [24] 8445 	mov	dph,r3
      002EEB 12r00r00         [24] 8446 	lcall	_putchar
      002EEE 0D               [12] 8447 	inc	r5
                                   8448 ;	calc.c:416: printstr("v.\tpop top\r\n");
      002EEF BD 00 E7         [24] 8449 	cjne	r5,#0x00,00173$
      002EF2 0E               [12] 8450 	inc	r6
      002EF3 80 E4            [24] 8451 	sjmp	00173$
      002EF5                       8452 00108$:
                                   8453 ;	calc.c:417: printstr("V\tpop all\r\n");
      002EF5 7Dr4A            [12] 8454 	mov	r5,#___str_23
      002EF7 7Es01            [12] 8455 	mov	r6,#(___str_23 >> 8)
      002EF9 7F 80            [12] 8456 	mov	r7,#0x80
                                   8457 ;	calc.c:51: return;
      002EFB                       8458 00176$:
                                   8459 ;	calc.c:49: for (; *s; s++) putchar(*s);
      002EFB 8D 82            [24] 8460 	mov	dpl,r5
      002EFD 8E 83            [24] 8461 	mov	dph,r6
      002EFF 8F F0            [24] 8462 	mov	b,r7
      002F01 12r00r00         [24] 8463 	lcall	__gptrget
      002F04 FC               [12] 8464 	mov	r4,a
      002F05 60 10            [24] 8465 	jz	00110$
      002F07 7B 00            [12] 8466 	mov	r3,#0x00
      002F09 8C 82            [24] 8467 	mov	dpl,r4
      002F0B 8B 83            [24] 8468 	mov	dph,r3
      002F0D 12r00r00         [24] 8469 	lcall	_putchar
      002F10 0D               [12] 8470 	inc	r5
                                   8471 ;	calc.c:417: printstr("V\tpop all\r\n");
      002F11 BD 00 E7         [24] 8472 	cjne	r5,#0x00,00176$
      002F14 0E               [12] 8473 	inc	r6
      002F15 80 E4            [24] 8474 	sjmp	00176$
      002F17                       8475 00110$:
                                   8476 ;	calc.c:418: printstr("i\treset acc\r\n");
      002F17 7Dr56            [12] 8477 	mov	r5,#___str_24
      002F19 7Es01            [12] 8478 	mov	r6,#(___str_24 >> 8)
      002F1B 7F 80            [12] 8479 	mov	r7,#0x80
                                   8480 ;	calc.c:51: return;
      002F1D                       8481 00179$:
                                   8482 ;	calc.c:49: for (; *s; s++) putchar(*s);
      002F1D 8D 82            [24] 8483 	mov	dpl,r5
      002F1F 8E 83            [24] 8484 	mov	dph,r6
      002F21 8F F0            [24] 8485 	mov	b,r7
      002F23 12r00r00         [24] 8486 	lcall	__gptrget
      002F26 FC               [12] 8487 	mov	r4,a
      002F27 60 10            [24] 8488 	jz	00112$
      002F29 7B 00            [12] 8489 	mov	r3,#0x00
      002F2B 8C 82            [24] 8490 	mov	dpl,r4
      002F2D 8B 83            [24] 8491 	mov	dph,r3
      002F2F 12r00r00         [24] 8492 	lcall	_putchar
      002F32 0D               [12] 8493 	inc	r5
                                   8494 ;	calc.c:418: printstr("i\treset acc\r\n");
      002F33 BD 00 E7         [24] 8495 	cjne	r5,#0x00,00179$
      002F36 0E               [12] 8496 	inc	r6
      002F37 80 E4            [24] 8497 	sjmp	00179$
      002F39                       8498 00112$:
                                   8499 ;	calc.c:419: printstr("I\treset and discard acc\r\n");
      002F39 7Dr64            [12] 8500 	mov	r5,#___str_25
      002F3B 7Es01            [12] 8501 	mov	r6,#(___str_25 >> 8)
      002F3D 7F 80            [12] 8502 	mov	r7,#0x80
                                   8503 ;	calc.c:51: return;
      002F3F                       8504 00182$:
                                   8505 ;	calc.c:49: for (; *s; s++) putchar(*s);
      002F3F 8D 82            [24] 8506 	mov	dpl,r5
      002F41 8E 83            [24] 8507 	mov	dph,r6
      002F43 8F F0            [24] 8508 	mov	b,r7
      002F45 12r00r00         [24] 8509 	lcall	__gptrget
      002F48 FC               [12] 8510 	mov	r4,a
      002F49 60 10            [24] 8511 	jz	00114$
      002F4B 7B 00            [12] 8512 	mov	r3,#0x00
      002F4D 8C 82            [24] 8513 	mov	dpl,r4
      002F4F 8B 83            [24] 8514 	mov	dph,r3
      002F51 12r00r00         [24] 8515 	lcall	_putchar
      002F54 0D               [12] 8516 	inc	r5
                                   8517 ;	calc.c:419: printstr("I\treset and discard acc\r\n");
      002F55 BD 00 E7         [24] 8518 	cjne	r5,#0x00,00182$
      002F58 0E               [12] 8519 	inc	r6
      002F59 80 E4            [24] 8520 	sjmp	00182$
      002F5B                       8521 00114$:
                                   8522 ;	calc.c:420: printstr("x\texchange top 2\r\n");
      002F5B 7Dr7E            [12] 8523 	mov	r5,#___str_26
      002F5D 7Es01            [12] 8524 	mov	r6,#(___str_26 >> 8)
      002F5F 7F 80            [12] 8525 	mov	r7,#0x80
                                   8526 ;	calc.c:51: return;
      002F61                       8527 00185$:
                                   8528 ;	calc.c:49: for (; *s; s++) putchar(*s);
      002F61 8D 82            [24] 8529 	mov	dpl,r5
      002F63 8E 83            [24] 8530 	mov	dph,r6
      002F65 8F F0            [24] 8531 	mov	b,r7
      002F67 12r00r00         [24] 8532 	lcall	__gptrget
      002F6A FC               [12] 8533 	mov	r4,a
      002F6B 60 10            [24] 8534 	jz	00116$
      002F6D 7B 00            [12] 8535 	mov	r3,#0x00
      002F6F 8C 82            [24] 8536 	mov	dpl,r4
      002F71 8B 83            [24] 8537 	mov	dph,r3
      002F73 12r00r00         [24] 8538 	lcall	_putchar
      002F76 0D               [12] 8539 	inc	r5
                                   8540 ;	calc.c:420: printstr("x\texchange top 2\r\n");
      002F77 BD 00 E7         [24] 8541 	cjne	r5,#0x00,00185$
      002F7A 0E               [12] 8542 	inc	r6
      002F7B 80 E4            [24] 8543 	sjmp	00185$
      002F7D                       8544 00116$:
                                   8545 ;	calc.c:421: printstr("X\texchange stacks primary <-> secondary\r\n");
      002F7D 7Dr91            [12] 8546 	mov	r5,#___str_27
      002F7F 7Es01            [12] 8547 	mov	r6,#(___str_27 >> 8)
      002F81 7F 80            [12] 8548 	mov	r7,#0x80
                                   8549 ;	calc.c:51: return;
      002F83                       8550 00188$:
                                   8551 ;	calc.c:49: for (; *s; s++) putchar(*s);
      002F83 8D 82            [24] 8552 	mov	dpl,r5
      002F85 8E 83            [24] 8553 	mov	dph,r6
      002F87 8F F0            [24] 8554 	mov	b,r7
      002F89 12r00r00         [24] 8555 	lcall	__gptrget
      002F8C FC               [12] 8556 	mov	r4,a
      002F8D 60 10            [24] 8557 	jz	00118$
      002F8F 7B 00            [12] 8558 	mov	r3,#0x00
      002F91 8C 82            [24] 8559 	mov	dpl,r4
      002F93 8B 83            [24] 8560 	mov	dph,r3
      002F95 12r00r00         [24] 8561 	lcall	_putchar
      002F98 0D               [12] 8562 	inc	r5
                                   8563 ;	calc.c:421: printstr("X\texchange stacks primary <-> secondary\r\n");
      002F99 BD 00 E7         [24] 8564 	cjne	r5,#0x00,00188$
      002F9C 0E               [12] 8565 	inc	r6
      002F9D 80 E4            [24] 8566 	sjmp	00188$
      002F9F                       8567 00118$:
                                   8568 ;	calc.c:422: printstr("T\texchange tops primary <-> secondary\r\n");
      002F9F 7DrBB            [12] 8569 	mov	r5,#___str_28
      002FA1 7Es01            [12] 8570 	mov	r6,#(___str_28 >> 8)
      002FA3 7F 80            [12] 8571 	mov	r7,#0x80
                                   8572 ;	calc.c:51: return;
      002FA5                       8573 00191$:
                                   8574 ;	calc.c:49: for (; *s; s++) putchar(*s);
      002FA5 8D 82            [24] 8575 	mov	dpl,r5
      002FA7 8E 83            [24] 8576 	mov	dph,r6
      002FA9 8F F0            [24] 8577 	mov	b,r7
      002FAB 12r00r00         [24] 8578 	lcall	__gptrget
      002FAE FC               [12] 8579 	mov	r4,a
      002FAF 60 10            [24] 8580 	jz	00120$
      002FB1 7B 00            [12] 8581 	mov	r3,#0x00
      002FB3 8C 82            [24] 8582 	mov	dpl,r4
      002FB5 8B 83            [24] 8583 	mov	dph,r3
      002FB7 12r00r00         [24] 8584 	lcall	_putchar
      002FBA 0D               [12] 8585 	inc	r5
                                   8586 ;	calc.c:422: printstr("T\texchange tops primary <-> secondary\r\n");
      002FBB BD 00 E7         [24] 8587 	cjne	r5,#0x00,00191$
      002FBE 0E               [12] 8588 	inc	r6
      002FBF 80 E4            [24] 8589 	sjmp	00191$
      002FC1                       8590 00120$:
                                   8591 ;	calc.c:423: printstr("U\tcopy top secondary -> primary\r\n");
      002FC1 7DrE3            [12] 8592 	mov	r5,#___str_29
      002FC3 7Es01            [12] 8593 	mov	r6,#(___str_29 >> 8)
      002FC5 7F 80            [12] 8594 	mov	r7,#0x80
                                   8595 ;	calc.c:51: return;
      002FC7                       8596 00194$:
                                   8597 ;	calc.c:49: for (; *s; s++) putchar(*s);
      002FC7 8D 82            [24] 8598 	mov	dpl,r5
      002FC9 8E 83            [24] 8599 	mov	dph,r6
      002FCB 8F F0            [24] 8600 	mov	b,r7
      002FCD 12r00r00         [24] 8601 	lcall	__gptrget
      002FD0 FC               [12] 8602 	mov	r4,a
      002FD1 60 10            [24] 8603 	jz	00122$
      002FD3 7B 00            [12] 8604 	mov	r3,#0x00
      002FD5 8C 82            [24] 8605 	mov	dpl,r4
      002FD7 8B 83            [24] 8606 	mov	dph,r3
      002FD9 12r00r00         [24] 8607 	lcall	_putchar
      002FDC 0D               [12] 8608 	inc	r5
                                   8609 ;	calc.c:423: printstr("U\tcopy top secondary -> primary\r\n");
      002FDD BD 00 E7         [24] 8610 	cjne	r5,#0x00,00194$
      002FE0 0E               [12] 8611 	inc	r6
      002FE1 80 E4            [24] 8612 	sjmp	00194$
      002FE3                       8613 00122$:
                                   8614 ;	calc.c:424: printstr("u\tcopy top primary -> secondary\r\n");
      002FE3 7Dr05            [12] 8615 	mov	r5,#___str_30
      002FE5 7Es02            [12] 8616 	mov	r6,#(___str_30 >> 8)
      002FE7 7F 80            [12] 8617 	mov	r7,#0x80
                                   8618 ;	calc.c:51: return;
      002FE9                       8619 00197$:
                                   8620 ;	calc.c:49: for (; *s; s++) putchar(*s);
      002FE9 8D 82            [24] 8621 	mov	dpl,r5
      002FEB 8E 83            [24] 8622 	mov	dph,r6
      002FED 8F F0            [24] 8623 	mov	b,r7
      002FEF 12r00r00         [24] 8624 	lcall	__gptrget
      002FF2 FC               [12] 8625 	mov	r4,a
      002FF3 60 10            [24] 8626 	jz	00124$
      002FF5 7B 00            [12] 8627 	mov	r3,#0x00
      002FF7 8C 82            [24] 8628 	mov	dpl,r4
      002FF9 8B 83            [24] 8629 	mov	dph,r3
      002FFB 12r00r00         [24] 8630 	lcall	_putchar
      002FFE 0D               [12] 8631 	inc	r5
                                   8632 ;	calc.c:424: printstr("u\tcopy top primary -> secondary\r\n");
      002FFF BD 00 E7         [24] 8633 	cjne	r5,#0x00,00197$
      003002 0E               [12] 8634 	inc	r6
      003003 80 E4            [24] 8635 	sjmp	00197$
      003005                       8636 00124$:
                                   8637 ;	calc.c:425: printstr("M\tmove top secondary -> primary\r\n");
      003005 7Dr27            [12] 8638 	mov	r5,#___str_31
      003007 7Es02            [12] 8639 	mov	r6,#(___str_31 >> 8)
      003009 7F 80            [12] 8640 	mov	r7,#0x80
                                   8641 ;	calc.c:51: return;
      00300B                       8642 00200$:
                                   8643 ;	calc.c:49: for (; *s; s++) putchar(*s);
      00300B 8D 82            [24] 8644 	mov	dpl,r5
      00300D 8E 83            [24] 8645 	mov	dph,r6
      00300F 8F F0            [24] 8646 	mov	b,r7
      003011 12r00r00         [24] 8647 	lcall	__gptrget
      003014 FC               [12] 8648 	mov	r4,a
      003015 60 10            [24] 8649 	jz	00126$
      003017 7B 00            [12] 8650 	mov	r3,#0x00
      003019 8C 82            [24] 8651 	mov	dpl,r4
      00301B 8B 83            [24] 8652 	mov	dph,r3
      00301D 12r00r00         [24] 8653 	lcall	_putchar
      003020 0D               [12] 8654 	inc	r5
                                   8655 ;	calc.c:425: printstr("M\tmove top secondary -> primary\r\n");
      003021 BD 00 E7         [24] 8656 	cjne	r5,#0x00,00200$
      003024 0E               [12] 8657 	inc	r6
      003025 80 E4            [24] 8658 	sjmp	00200$
      003027                       8659 00126$:
                                   8660 ;	calc.c:426: printstr("m\tmove top primary -> secondary\r\n");
      003027 7Dr49            [12] 8661 	mov	r5,#___str_32
      003029 7Es02            [12] 8662 	mov	r6,#(___str_32 >> 8)
      00302B 7F 80            [12] 8663 	mov	r7,#0x80
                                   8664 ;	calc.c:51: return;
      00302D                       8665 00203$:
                                   8666 ;	calc.c:49: for (; *s; s++) putchar(*s);
      00302D 8D 82            [24] 8667 	mov	dpl,r5
      00302F 8E 83            [24] 8668 	mov	dph,r6
      003031 8F F0            [24] 8669 	mov	b,r7
      003033 12r00r00         [24] 8670 	lcall	__gptrget
      003036 FC               [12] 8671 	mov	r4,a
      003037 60 10            [24] 8672 	jz	00128$
      003039 7B 00            [12] 8673 	mov	r3,#0x00
      00303B 8C 82            [24] 8674 	mov	dpl,r4
      00303D 8B 83            [24] 8675 	mov	dph,r3
      00303F 12r00r00         [24] 8676 	lcall	_putchar
      003042 0D               [12] 8677 	inc	r5
                                   8678 ;	calc.c:426: printstr("m\tmove top primary -> secondary\r\n");
      003043 BD 00 E7         [24] 8679 	cjne	r5,#0x00,00203$
      003046 0E               [12] 8680 	inc	r6
      003047 80 E4            [24] 8681 	sjmp	00203$
      003049                       8682 00128$:
                                   8683 ;	calc.c:427: printstr("+\tadd top 2\r\n");
      003049 7Dr6B            [12] 8684 	mov	r5,#___str_33
      00304B 7Es02            [12] 8685 	mov	r6,#(___str_33 >> 8)
      00304D 7F 80            [12] 8686 	mov	r7,#0x80
                                   8687 ;	calc.c:51: return;
      00304F                       8688 00206$:
                                   8689 ;	calc.c:49: for (; *s; s++) putchar(*s);
      00304F 8D 82            [24] 8690 	mov	dpl,r5
      003051 8E 83            [24] 8691 	mov	dph,r6
      003053 8F F0            [24] 8692 	mov	b,r7
      003055 12r00r00         [24] 8693 	lcall	__gptrget
      003058 FC               [12] 8694 	mov	r4,a
      003059 60 10            [24] 8695 	jz	00130$
      00305B 7B 00            [12] 8696 	mov	r3,#0x00
      00305D 8C 82            [24] 8697 	mov	dpl,r4
      00305F 8B 83            [24] 8698 	mov	dph,r3
      003061 12r00r00         [24] 8699 	lcall	_putchar
      003064 0D               [12] 8700 	inc	r5
                                   8701 ;	calc.c:427: printstr("+\tadd top 2\r\n");
      003065 BD 00 E7         [24] 8702 	cjne	r5,#0x00,00206$
      003068 0E               [12] 8703 	inc	r6
      003069 80 E4            [24] 8704 	sjmp	00206$
      00306B                       8705 00130$:
                                   8706 ;	calc.c:428: printstr("-\tsubtract top 2\r\n");
      00306B 7Dr79            [12] 8707 	mov	r5,#___str_34
      00306D 7Es02            [12] 8708 	mov	r6,#(___str_34 >> 8)
      00306F 7F 80            [12] 8709 	mov	r7,#0x80
                                   8710 ;	calc.c:51: return;
      003071                       8711 00209$:
                                   8712 ;	calc.c:49: for (; *s; s++) putchar(*s);
      003071 8D 82            [24] 8713 	mov	dpl,r5
      003073 8E 83            [24] 8714 	mov	dph,r6
      003075 8F F0            [24] 8715 	mov	b,r7
      003077 12r00r00         [24] 8716 	lcall	__gptrget
      00307A FC               [12] 8717 	mov	r4,a
      00307B 60 10            [24] 8718 	jz	00132$
      00307D 7B 00            [12] 8719 	mov	r3,#0x00
      00307F 8C 82            [24] 8720 	mov	dpl,r4
      003081 8B 83            [24] 8721 	mov	dph,r3
      003083 12r00r00         [24] 8722 	lcall	_putchar
      003086 0D               [12] 8723 	inc	r5
                                   8724 ;	calc.c:428: printstr("-\tsubtract top 2\r\n");
      003087 BD 00 E7         [24] 8725 	cjne	r5,#0x00,00209$
      00308A 0E               [12] 8726 	inc	r6
      00308B 80 E4            [24] 8727 	sjmp	00209$
      00308D                       8728 00132$:
                                   8729 ;	calc.c:429: printstr("*\tmultiply top 2\r\n");
      00308D 7Dr8C            [12] 8730 	mov	r5,#___str_35
      00308F 7Es02            [12] 8731 	mov	r6,#(___str_35 >> 8)
      003091 7F 80            [12] 8732 	mov	r7,#0x80
                                   8733 ;	calc.c:51: return;
      003093                       8734 00212$:
                                   8735 ;	calc.c:49: for (; *s; s++) putchar(*s);
      003093 8D 82            [24] 8736 	mov	dpl,r5
      003095 8E 83            [24] 8737 	mov	dph,r6
      003097 8F F0            [24] 8738 	mov	b,r7
      003099 12r00r00         [24] 8739 	lcall	__gptrget
      00309C FC               [12] 8740 	mov	r4,a
      00309D 60 10            [24] 8741 	jz	00134$
      00309F 7B 00            [12] 8742 	mov	r3,#0x00
      0030A1 8C 82            [24] 8743 	mov	dpl,r4
      0030A3 8B 83            [24] 8744 	mov	dph,r3
      0030A5 12r00r00         [24] 8745 	lcall	_putchar
      0030A8 0D               [12] 8746 	inc	r5
                                   8747 ;	calc.c:429: printstr("*\tmultiply top 2\r\n");
      0030A9 BD 00 E7         [24] 8748 	cjne	r5,#0x00,00212$
      0030AC 0E               [12] 8749 	inc	r6
      0030AD 80 E4            [24] 8750 	sjmp	00212$
      0030AF                       8751 00134$:
                                   8752 ;	calc.c:430: printstr("/\tdivide top 2\r\n");
      0030AF 7Dr9F            [12] 8753 	mov	r5,#___str_36
      0030B1 7Es02            [12] 8754 	mov	r6,#(___str_36 >> 8)
      0030B3 7F 80            [12] 8755 	mov	r7,#0x80
                                   8756 ;	calc.c:51: return;
      0030B5                       8757 00215$:
                                   8758 ;	calc.c:49: for (; *s; s++) putchar(*s);
      0030B5 8D 82            [24] 8759 	mov	dpl,r5
      0030B7 8E 83            [24] 8760 	mov	dph,r6
      0030B9 8F F0            [24] 8761 	mov	b,r7
      0030BB 12r00r00         [24] 8762 	lcall	__gptrget
      0030BE FC               [12] 8763 	mov	r4,a
      0030BF 60 10            [24] 8764 	jz	00136$
      0030C1 7B 00            [12] 8765 	mov	r3,#0x00
      0030C3 8C 82            [24] 8766 	mov	dpl,r4
      0030C5 8B 83            [24] 8767 	mov	dph,r3
      0030C7 12r00r00         [24] 8768 	lcall	_putchar
      0030CA 0D               [12] 8769 	inc	r5
                                   8770 ;	calc.c:430: printstr("/\tdivide top 2\r\n");
      0030CB BD 00 E7         [24] 8771 	cjne	r5,#0x00,00215$
      0030CE 0E               [12] 8772 	inc	r6
      0030CF 80 E4            [24] 8773 	sjmp	00215$
      0030D1                       8774 00136$:
                                   8775 ;	calc.c:431: printstr("\\\tdivide top 2 unsigned\r\n");	
      0030D1 7DrB0            [12] 8776 	mov	r5,#___str_37
      0030D3 7Es02            [12] 8777 	mov	r6,#(___str_37 >> 8)
      0030D5 7F 80            [12] 8778 	mov	r7,#0x80
                                   8779 ;	calc.c:51: return;
      0030D7                       8780 00218$:
                                   8781 ;	calc.c:49: for (; *s; s++) putchar(*s);
      0030D7 8D 82            [24] 8782 	mov	dpl,r5
      0030D9 8E 83            [24] 8783 	mov	dph,r6
      0030DB 8F F0            [24] 8784 	mov	b,r7
      0030DD 12r00r00         [24] 8785 	lcall	__gptrget
      0030E0 FC               [12] 8786 	mov	r4,a
      0030E1 60 10            [24] 8787 	jz	00138$
      0030E3 7B 00            [12] 8788 	mov	r3,#0x00
      0030E5 8C 82            [24] 8789 	mov	dpl,r4
      0030E7 8B 83            [24] 8790 	mov	dph,r3
      0030E9 12r00r00         [24] 8791 	lcall	_putchar
      0030EC 0D               [12] 8792 	inc	r5
                                   8793 ;	calc.c:431: printstr("\\\tdivide top 2 unsigned\r\n");	
      0030ED BD 00 E7         [24] 8794 	cjne	r5,#0x00,00218$
      0030F0 0E               [12] 8795 	inc	r6
      0030F1 80 E4            [24] 8796 	sjmp	00218$
      0030F3                       8797 00138$:
                                   8798 ;	calc.c:432: printstr("%\tmodulus top 2\r\n");
      0030F3 7DrCA            [12] 8799 	mov	r5,#___str_38
      0030F5 7Es02            [12] 8800 	mov	r6,#(___str_38 >> 8)
      0030F7 7F 80            [12] 8801 	mov	r7,#0x80
                                   8802 ;	calc.c:51: return;
      0030F9                       8803 00221$:
                                   8804 ;	calc.c:49: for (; *s; s++) putchar(*s);
      0030F9 8D 82            [24] 8805 	mov	dpl,r5
      0030FB 8E 83            [24] 8806 	mov	dph,r6
      0030FD 8F F0            [24] 8807 	mov	b,r7
      0030FF 12r00r00         [24] 8808 	lcall	__gptrget
      003102 FC               [12] 8809 	mov	r4,a
      003103 60 10            [24] 8810 	jz	00140$
      003105 7B 00            [12] 8811 	mov	r3,#0x00
      003107 8C 82            [24] 8812 	mov	dpl,r4
      003109 8B 83            [24] 8813 	mov	dph,r3
      00310B 12r00r00         [24] 8814 	lcall	_putchar
      00310E 0D               [12] 8815 	inc	r5
                                   8816 ;	calc.c:432: printstr("%\tmodulus top 2\r\n");
      00310F BD 00 E7         [24] 8817 	cjne	r5,#0x00,00221$
      003112 0E               [12] 8818 	inc	r6
      003113 80 E4            [24] 8819 	sjmp	00221$
      003115                       8820 00140$:
                                   8821 ;	calc.c:433: printstr("#\tmodulus top 2 unsigned\r\n");
      003115 7DrDC            [12] 8822 	mov	r5,#___str_39
      003117 7Es02            [12] 8823 	mov	r6,#(___str_39 >> 8)
      003119 7F 80            [12] 8824 	mov	r7,#0x80
                                   8825 ;	calc.c:51: return;
      00311B                       8826 00224$:
                                   8827 ;	calc.c:49: for (; *s; s++) putchar(*s);
      00311B 8D 82            [24] 8828 	mov	dpl,r5
      00311D 8E 83            [24] 8829 	mov	dph,r6
      00311F 8F F0            [24] 8830 	mov	b,r7
      003121 12r00r00         [24] 8831 	lcall	__gptrget
      003124 FC               [12] 8832 	mov	r4,a
      003125 60 10            [24] 8833 	jz	00142$
      003127 7B 00            [12] 8834 	mov	r3,#0x00
      003129 8C 82            [24] 8835 	mov	dpl,r4
      00312B 8B 83            [24] 8836 	mov	dph,r3
      00312D 12r00r00         [24] 8837 	lcall	_putchar
      003130 0D               [12] 8838 	inc	r5
                                   8839 ;	calc.c:433: printstr("#\tmodulus top 2 unsigned\r\n");
      003131 BD 00 E7         [24] 8840 	cjne	r5,#0x00,00224$
      003134 0E               [12] 8841 	inc	r6
      003135 80 E4            [24] 8842 	sjmp	00224$
      003137                       8843 00142$:
                                   8844 ;	calc.c:434: printstr("&\tand top 2\r\n");
      003137 7DrF7            [12] 8845 	mov	r5,#___str_40
      003139 7Es02            [12] 8846 	mov	r6,#(___str_40 >> 8)
      00313B 7F 80            [12] 8847 	mov	r7,#0x80
                                   8848 ;	calc.c:51: return;
      00313D                       8849 00227$:
                                   8850 ;	calc.c:49: for (; *s; s++) putchar(*s);
      00313D 8D 82            [24] 8851 	mov	dpl,r5
      00313F 8E 83            [24] 8852 	mov	dph,r6
      003141 8F F0            [24] 8853 	mov	b,r7
      003143 12r00r00         [24] 8854 	lcall	__gptrget
      003146 FC               [12] 8855 	mov	r4,a
      003147 60 10            [24] 8856 	jz	00144$
      003149 7B 00            [12] 8857 	mov	r3,#0x00
      00314B 8C 82            [24] 8858 	mov	dpl,r4
      00314D 8B 83            [24] 8859 	mov	dph,r3
      00314F 12r00r00         [24] 8860 	lcall	_putchar
      003152 0D               [12] 8861 	inc	r5
                                   8862 ;	calc.c:434: printstr("&\tand top 2\r\n");
      003153 BD 00 E7         [24] 8863 	cjne	r5,#0x00,00227$
      003156 0E               [12] 8864 	inc	r6
      003157 80 E4            [24] 8865 	sjmp	00227$
      003159                       8866 00144$:
                                   8867 ;	calc.c:435: printstr("|\tor top 2\r\n");
      003159 7Dr05            [12] 8868 	mov	r5,#___str_41
      00315B 7Es03            [12] 8869 	mov	r6,#(___str_41 >> 8)
      00315D 7F 80            [12] 8870 	mov	r7,#0x80
                                   8871 ;	calc.c:51: return;
      00315F                       8872 00230$:
                                   8873 ;	calc.c:49: for (; *s; s++) putchar(*s);
      00315F 8D 82            [24] 8874 	mov	dpl,r5
      003161 8E 83            [24] 8875 	mov	dph,r6
      003163 8F F0            [24] 8876 	mov	b,r7
      003165 12r00r00         [24] 8877 	lcall	__gptrget
      003168 FC               [12] 8878 	mov	r4,a
      003169 60 10            [24] 8879 	jz	00146$
      00316B 7B 00            [12] 8880 	mov	r3,#0x00
      00316D 8C 82            [24] 8881 	mov	dpl,r4
      00316F 8B 83            [24] 8882 	mov	dph,r3
      003171 12r00r00         [24] 8883 	lcall	_putchar
      003174 0D               [12] 8884 	inc	r5
                                   8885 ;	calc.c:435: printstr("|\tor top 2\r\n");
      003175 BD 00 E7         [24] 8886 	cjne	r5,#0x00,00230$
      003178 0E               [12] 8887 	inc	r6
      003179 80 E4            [24] 8888 	sjmp	00230$
      00317B                       8889 00146$:
                                   8890 ;	calc.c:436: printstr("^\txor top 2\r\n");
      00317B 7Dr12            [12] 8891 	mov	r5,#___str_42
      00317D 7Es03            [12] 8892 	mov	r6,#(___str_42 >> 8)
      00317F 7F 80            [12] 8893 	mov	r7,#0x80
                                   8894 ;	calc.c:51: return;
      003181                       8895 00233$:
                                   8896 ;	calc.c:49: for (; *s; s++) putchar(*s);
      003181 8D 82            [24] 8897 	mov	dpl,r5
      003183 8E 83            [24] 8898 	mov	dph,r6
      003185 8F F0            [24] 8899 	mov	b,r7
      003187 12r00r00         [24] 8900 	lcall	__gptrget
      00318A FC               [12] 8901 	mov	r4,a
      00318B 60 10            [24] 8902 	jz	00148$
      00318D 7B 00            [12] 8903 	mov	r3,#0x00
      00318F 8C 82            [24] 8904 	mov	dpl,r4
      003191 8B 83            [24] 8905 	mov	dph,r3
      003193 12r00r00         [24] 8906 	lcall	_putchar
      003196 0D               [12] 8907 	inc	r5
                                   8908 ;	calc.c:436: printstr("^\txor top 2\r\n");
      003197 BD 00 E7         [24] 8909 	cjne	r5,#0x00,00233$
      00319A 0E               [12] 8910 	inc	r6
      00319B 80 E4            [24] 8911 	sjmp	00233$
      00319D                       8912 00148$:
                                   8913 ;	calc.c:437: printstr(">\tshift right top 2\r\n");
      00319D 7Dr20            [12] 8914 	mov	r5,#___str_43
      00319F 7Es03            [12] 8915 	mov	r6,#(___str_43 >> 8)
      0031A1 7F 80            [12] 8916 	mov	r7,#0x80
                                   8917 ;	calc.c:51: return;
      0031A3                       8918 00236$:
                                   8919 ;	calc.c:49: for (; *s; s++) putchar(*s);
      0031A3 8D 82            [24] 8920 	mov	dpl,r5
      0031A5 8E 83            [24] 8921 	mov	dph,r6
      0031A7 8F F0            [24] 8922 	mov	b,r7
      0031A9 12r00r00         [24] 8923 	lcall	__gptrget
      0031AC FC               [12] 8924 	mov	r4,a
      0031AD 60 10            [24] 8925 	jz	00150$
      0031AF 7B 00            [12] 8926 	mov	r3,#0x00
      0031B1 8C 82            [24] 8927 	mov	dpl,r4
      0031B3 8B 83            [24] 8928 	mov	dph,r3
      0031B5 12r00r00         [24] 8929 	lcall	_putchar
      0031B8 0D               [12] 8930 	inc	r5
                                   8931 ;	calc.c:437: printstr(">\tshift right top 2\r\n");
      0031B9 BD 00 E7         [24] 8932 	cjne	r5,#0x00,00236$
      0031BC 0E               [12] 8933 	inc	r6
      0031BD 80 E4            [24] 8934 	sjmp	00236$
      0031BF                       8935 00150$:
                                   8936 ;	calc.c:438: printstr("]\tarithmetic shift right top 2\r\n");
      0031BF 7Dr36            [12] 8937 	mov	r5,#___str_44
      0031C1 7Es03            [12] 8938 	mov	r6,#(___str_44 >> 8)
      0031C3 7F 80            [12] 8939 	mov	r7,#0x80
                                   8940 ;	calc.c:51: return;
      0031C5                       8941 00239$:
                                   8942 ;	calc.c:49: for (; *s; s++) putchar(*s);
      0031C5 8D 82            [24] 8943 	mov	dpl,r5
      0031C7 8E 83            [24] 8944 	mov	dph,r6
      0031C9 8F F0            [24] 8945 	mov	b,r7
      0031CB 12r00r00         [24] 8946 	lcall	__gptrget
      0031CE FC               [12] 8947 	mov	r4,a
      0031CF 60 10            [24] 8948 	jz	00152$
      0031D1 7B 00            [12] 8949 	mov	r3,#0x00
      0031D3 8C 82            [24] 8950 	mov	dpl,r4
      0031D5 8B 83            [24] 8951 	mov	dph,r3
      0031D7 12r00r00         [24] 8952 	lcall	_putchar
      0031DA 0D               [12] 8953 	inc	r5
                                   8954 ;	calc.c:438: printstr("]\tarithmetic shift right top 2\r\n");
      0031DB BD 00 E7         [24] 8955 	cjne	r5,#0x00,00239$
      0031DE 0E               [12] 8956 	inc	r6
      0031DF 80 E4            [24] 8957 	sjmp	00239$
      0031E1                       8958 00152$:
                                   8959 ;	calc.c:439: printstr("<\tshift left top 2\r\n");
      0031E1 7Dr57            [12] 8960 	mov	r5,#___str_45
      0031E3 7Es03            [12] 8961 	mov	r6,#(___str_45 >> 8)
      0031E5 7F 80            [12] 8962 	mov	r7,#0x80
                                   8963 ;	calc.c:51: return;
      0031E7                       8964 00242$:
                                   8965 ;	calc.c:49: for (; *s; s++) putchar(*s);
      0031E7 8D 82            [24] 8966 	mov	dpl,r5
      0031E9 8E 83            [24] 8967 	mov	dph,r6
      0031EB 8F F0            [24] 8968 	mov	b,r7
      0031ED 12r00r00         [24] 8969 	lcall	__gptrget
      0031F0 FC               [12] 8970 	mov	r4,a
      0031F1 60 10            [24] 8971 	jz	00154$
      0031F3 7B 00            [12] 8972 	mov	r3,#0x00
      0031F5 8C 82            [24] 8973 	mov	dpl,r4
      0031F7 8B 83            [24] 8974 	mov	dph,r3
      0031F9 12r00r00         [24] 8975 	lcall	_putchar
      0031FC 0D               [12] 8976 	inc	r5
                                   8977 ;	calc.c:439: printstr("<\tshift left top 2\r\n");
      0031FD BD 00 E7         [24] 8978 	cjne	r5,#0x00,00242$
      003200 0E               [12] 8979 	inc	r6
      003201 80 E4            [24] 8980 	sjmp	00242$
      003203                       8981 00154$:
                                   8982 ;	calc.c:440: printstr("~\tbitwise not top\r\n");
      003203 7Dr6C            [12] 8983 	mov	r5,#___str_46
      003205 7Es03            [12] 8984 	mov	r6,#(___str_46 >> 8)
      003207 7F 80            [12] 8985 	mov	r7,#0x80
                                   8986 ;	calc.c:51: return;
      003209                       8987 00245$:
                                   8988 ;	calc.c:49: for (; *s; s++) putchar(*s);
      003209 8D 82            [24] 8989 	mov	dpl,r5
      00320B 8E 83            [24] 8990 	mov	dph,r6
      00320D 8F F0            [24] 8991 	mov	b,r7
      00320F 12r00r00         [24] 8992 	lcall	__gptrget
      003212 FC               [12] 8993 	mov	r4,a
      003213 60 10            [24] 8994 	jz	00156$
      003215 7B 00            [12] 8995 	mov	r3,#0x00
      003217 8C 82            [24] 8996 	mov	dpl,r4
      003219 8B 83            [24] 8997 	mov	dph,r3
      00321B 12r00r00         [24] 8998 	lcall	_putchar
      00321E 0D               [12] 8999 	inc	r5
                                   9000 ;	calc.c:440: printstr("~\tbitwise not top\r\n");
      00321F BD 00 E7         [24] 9001 	cjne	r5,#0x00,00245$
      003222 0E               [12] 9002 	inc	r6
      003223 80 E4            [24] 9003 	sjmp	00245$
      003225                       9004 00156$:
                                   9005 ;	calc.c:441: printstr("s\tstatus\r\n");
      003225 7Dr80            [12] 9006 	mov	r5,#___str_47
      003227 7Es03            [12] 9007 	mov	r6,#(___str_47 >> 8)
      003229 7F 80            [12] 9008 	mov	r7,#0x80
                                   9009 ;	calc.c:51: return;
      00322B                       9010 00248$:
                                   9011 ;	calc.c:49: for (; *s; s++) putchar(*s);
      00322B 8D 82            [24] 9012 	mov	dpl,r5
      00322D 8E 83            [24] 9013 	mov	dph,r6
      00322F 8F F0            [24] 9014 	mov	b,r7
      003231 12r00r00         [24] 9015 	lcall	__gptrget
      003234 FC               [12] 9016 	mov	r4,a
      003235 60 10            [24] 9017 	jz	00158$
      003237 7B 00            [12] 9018 	mov	r3,#0x00
      003239 8C 82            [24] 9019 	mov	dpl,r4
      00323B 8B 83            [24] 9020 	mov	dph,r3
      00323D 12r00r00         [24] 9021 	lcall	_putchar
      003240 0D               [12] 9022 	inc	r5
                                   9023 ;	calc.c:441: printstr("s\tstatus\r\n");
      003241 BD 00 E7         [24] 9024 	cjne	r5,#0x00,00248$
      003244 0E               [12] 9025 	inc	r6
      003245 80 E4            [24] 9026 	sjmp	00248$
      003247                       9027 00158$:
                                   9028 ;	calc.c:442: printstr("?\thelp\r\n");
      003247 7Dr8B            [12] 9029 	mov	r5,#___str_48
      003249 7Es03            [12] 9030 	mov	r6,#(___str_48 >> 8)
      00324B 7F 80            [12] 9031 	mov	r7,#0x80
                                   9032 ;	calc.c:51: return;
      00324D                       9033 00251$:
                                   9034 ;	calc.c:49: for (; *s; s++) putchar(*s);
      00324D 8D 82            [24] 9035 	mov	dpl,r5
      00324F 8E 83            [24] 9036 	mov	dph,r6
      003251 8F F0            [24] 9037 	mov	b,r7
      003253 12r00r00         [24] 9038 	lcall	__gptrget
      003256 FC               [12] 9039 	mov	r4,a
      003257 60 10            [24] 9040 	jz	00160$
      003259 7B 00            [12] 9041 	mov	r3,#0x00
      00325B 8C 82            [24] 9042 	mov	dpl,r4
      00325D 8B 83            [24] 9043 	mov	dph,r3
      00325F 12r00r00         [24] 9044 	lcall	_putchar
      003262 0D               [12] 9045 	inc	r5
                                   9046 ;	calc.c:442: printstr("?\thelp\r\n");
      003263 BD 00 E7         [24] 9047 	cjne	r5,#0x00,00251$
      003266 0E               [12] 9048 	inc	r6
      003267 80 E4            [24] 9049 	sjmp	00251$
      003269                       9050 00160$:
                                   9051 ;	calc.c:443: printstr("q\tquit\r\n");
      003269 7Dr94            [12] 9052 	mov	r5,#___str_49
      00326B 7Es03            [12] 9053 	mov	r6,#(___str_49 >> 8)
      00326D 7F 80            [12] 9054 	mov	r7,#0x80
                                   9055 ;	calc.c:51: return;
      00326F                       9056 00254$:
                                   9057 ;	calc.c:49: for (; *s; s++) putchar(*s);
      00326F 8D 82            [24] 9058 	mov	dpl,r5
      003271 8E 83            [24] 9059 	mov	dph,r6
      003273 8F F0            [24] 9060 	mov	b,r7
      003275 12r00r00         [24] 9061 	lcall	__gptrget
      003278 FC               [12] 9062 	mov	r4,a
      003279 60 10            [24] 9063 	jz	00162$
      00327B 7B 00            [12] 9064 	mov	r3,#0x00
      00327D 8C 82            [24] 9065 	mov	dpl,r4
      00327F 8B 83            [24] 9066 	mov	dph,r3
      003281 12r00r00         [24] 9067 	lcall	_putchar
      003284 0D               [12] 9068 	inc	r5
                                   9069 ;	calc.c:443: printstr("q\tquit\r\n");
      003285 BD 00 E7         [24] 9070 	cjne	r5,#0x00,00254$
      003288 0E               [12] 9071 	inc	r6
      003289 80 E4            [24] 9072 	sjmp	00254$
      00328B                       9073 00162$:
                                   9074 ;	calc.c:445: return 1;
      00328B 90 00 01         [24] 9075 	mov	dptr,#0x0001
                                   9076 ;	calc.c:446: }
      00328E D0*00            [24] 9077 	pop	_bp
      003290 22               [24] 9078 	ret
                                   9079 ;------------------------------------------------------------
                                   9080 ;Allocation info for local variables in function 'main'
                                   9081 ;------------------------------------------------------------
                                   9082 ;input                     Allocated to registers r6 r7 
                                   9083 ;__1966080191              Allocated to registers 
                                   9084 ;s                         Allocated to registers r2 r3 r4 
                                   9085 ;__1310720193              Allocated to registers 
                                   9086 ;s                         Allocated to registers r5 r6 r7 
                                   9087 ;sloc0                     Allocated to stack - _bp +1
                                   9088 ;------------------------------------------------------------
                                   9089 ;	calc.c:476: void main(void) {
                                   9090 ;	-----------------------------------------
                                   9091 ;	 function main
                                   9092 ;	-----------------------------------------
      003291                       9093 _main:
      003291 C0*00            [24] 9094 	push	_bp
      003293 85 81*00         [24] 9095 	mov	_bp,sp
      003296 05 81            [12] 9096 	inc	sp
                                   9097 ;	calc.c:479: c.base = 10;
      003298 90r00r0C         [24] 9098 	mov	dptr,#_c
      00329B 74 0A            [12] 9099 	mov	a,#0x0a
      00329D F0               [24] 9100 	movx	@dptr,a
      00329E E4               [12] 9101 	clr	a
      00329F A3               [24] 9102 	inc	dptr
      0032A0 F0               [24] 9103 	movx	@dptr,a
                                   9104 ;	calc.c:480: c.acc = 0l;
      0032A1 90r00r0E         [24] 9105 	mov	dptr,#(_c + 0x0002)
      0032A4 F0               [24] 9106 	movx	@dptr,a
      0032A5 A3               [24] 9107 	inc	dptr
      0032A6 F0               [24] 9108 	movx	@dptr,a
      0032A7 A3               [24] 9109 	inc	dptr
      0032A8 F0               [24] 9110 	movx	@dptr,a
      0032A9 A3               [24] 9111 	inc	dptr
      0032AA F0               [24] 9112 	movx	@dptr,a
                                   9113 ;	calc.c:481: c.acc_valid = (char)0;
      0032AB 90r00r12         [24] 9114 	mov	dptr,#(_c + 0x0006)
      0032AE F0               [24] 9115 	movx	@dptr,a
                                   9116 ;	calc.c:482: c.digit[0] = c.digit[1] = '\0';
      0032AF 90r00r14         [24] 9117 	mov	dptr,#(_c + 0x0008)
      0032B2 F0               [24] 9118 	movx	@dptr,a
      0032B3 90r00r13         [24] 9119 	mov	dptr,#(_c + 0x0007)
      0032B6 F0               [24] 9120 	movx	@dptr,a
                                   9121 ;	calc.c:484: c.ps = &c.s0;
      0032B7 90r40r1D         [24] 9122 	mov	dptr,#(_c + 0x4011)
      0032BA 74r15            [12] 9123 	mov	a,#(_c + 0x0009)
      0032BC F0               [24] 9124 	movx	@dptr,a
      0032BD 74s00            [12] 9125 	mov	a,#((_c + 0x0009) >> 8)
      0032BF A3               [24] 9126 	inc	dptr
      0032C0 F0               [24] 9127 	movx	@dptr,a
      0032C1 E4               [12] 9128 	clr	a
      0032C2 A3               [24] 9129 	inc	dptr
      0032C3 F0               [24] 9130 	movx	@dptr,a
                                   9131 ;	calc.c:485: c.ss = &c.s1;
      0032C4 90r40r20         [24] 9132 	mov	dptr,#(_c + 0x4014)
      0032C7 74r19            [12] 9133 	mov	a,#(_c + 0x200d)
      0032C9 F0               [24] 9134 	movx	@dptr,a
      0032CA 74s20            [12] 9135 	mov	a,#((_c + 0x200d) >> 8)
      0032CC A3               [24] 9136 	inc	dptr
      0032CD F0               [24] 9137 	movx	@dptr,a
      0032CE E4               [12] 9138 	clr	a
      0032CF A3               [24] 9139 	inc	dptr
      0032D0 F0               [24] 9140 	movx	@dptr,a
                                   9141 ;	calc.c:486: stack_init(c.ps);
      0032D1 90r00r15         [24] 9142 	mov	dptr,#(_c + 0x0009)
      0032D4 75 F0 00         [24] 9143 	mov	b,#0x00
      0032D7 12r00r00         [24] 9144 	lcall	_stack_init
                                   9145 ;	calc.c:487: stack_init(c.ss);
      0032DA 90r40r20         [24] 9146 	mov	dptr,#(_c + 0x4014)
      0032DD E0               [24] 9147 	movx	a,@dptr
      0032DE FD               [12] 9148 	mov	r5,a
      0032DF A3               [24] 9149 	inc	dptr
      0032E0 E0               [24] 9150 	movx	a,@dptr
      0032E1 FE               [12] 9151 	mov	r6,a
      0032E2 A3               [24] 9152 	inc	dptr
      0032E3 E0               [24] 9153 	movx	a,@dptr
      0032E4 FF               [12] 9154 	mov	r7,a
      0032E5 8D 82            [24] 9155 	mov	dpl,r5
      0032E7 8E 83            [24] 9156 	mov	dph,r6
      0032E9 8F F0            [24] 9157 	mov	b,r7
      0032EB 12r00r00         [24] 9158 	lcall	_stack_init
                                   9159 ;	calc.c:489: state_init(&s, STATE_START, STATE_FINAL, UNDEF, deltas, &c);
      0032EE 74r0C            [12] 9160 	mov	a,#_c
      0032F0 C0 E0            [24] 9161 	push	acc
      0032F2 74s00            [12] 9162 	mov	a,#(_c >> 8)
      0032F4 C0 E0            [24] 9163 	push	acc
      0032F6 E4               [12] 9164 	clr	a
      0032F7 C0 E0            [24] 9165 	push	acc
      0032F9 74r00            [12] 9166 	mov	a,#_deltas
      0032FB C0 E0            [24] 9167 	push	acc
      0032FD 74s00            [12] 9168 	mov	a,#(_deltas >> 8)
      0032FF C0 E0            [24] 9169 	push	acc
      003301 E4               [12] 9170 	clr	a
      003302 C0 E0            [24] 9171 	push	acc
      003304 C0 E0            [24] 9172 	push	acc
      003306 74 80            [12] 9173 	mov	a,#0x80
      003308 C0 E0            [24] 9174 	push	acc
      00330A 74 03            [12] 9175 	mov	a,#0x03
      00330C C0 E0            [24] 9176 	push	acc
      00330E E4               [12] 9177 	clr	a
      00330F C0 E0            [24] 9178 	push	acc
      003311 C0 E0            [24] 9179 	push	acc
      003313 C0 E0            [24] 9180 	push	acc
      003315 90r00r00         [24] 9181 	mov	dptr,#_s
      003318 75 F0 00         [24] 9182 	mov	b,#0x00
      00331B 12r00r00         [24] 9183 	lcall	_state_init
      00331E E5 81            [12] 9184 	mov	a,sp
      003320 24 F4            [12] 9185 	add	a,#0xf4
      003322 F5 81            [12] 9186 	mov	sp,a
                                   9187 ;	calc.c:491: (void)status(&c, deltas);
      003324 74r00            [12] 9188 	mov	a,#_deltas
      003326 C0 E0            [24] 9189 	push	acc
      003328 74s00            [12] 9190 	mov	a,#(_deltas >> 8)
      00332A C0 E0            [24] 9191 	push	acc
      00332C E4               [12] 9192 	clr	a
      00332D C0 E0            [24] 9193 	push	acc
      00332F 90r00r0C         [24] 9194 	mov	dptr,#_c
      003332 75 F0 00         [24] 9195 	mov	b,#0x00
      003335 12r2Cr53         [24] 9196 	lcall	_status
      003338 15 81            [12] 9197 	dec	sp
      00333A 15 81            [12] 9198 	dec	sp
      00333C 15 81            [12] 9199 	dec	sp
                                   9200 ;	calc.c:493: while (1) {
      00333E                       9201 00192$:
                                   9202 ;	calc.c:494: input = getchar();
      00333E 12r00r05         [24] 9203 	lcall	_getchar
      003341 AE 82            [24] 9204 	mov	r6,dpl
      003343 AF 83            [24] 9205 	mov	r7,dph
                                   9206 ;	calc.c:495: if (((char)input == '\r') || ((char)input == '\n')) printstr("\r\n");
      003345 8E 05            [24] 9207 	mov	ar5,r6
      003347 BD 0D 02         [24] 9208 	cjne	r5,#0x0d,00400$
      00334A 80 03            [24] 9209 	sjmp	00101$
      00334C                       9210 00400$:
      00334C BD 0A 36         [24] 9211 	cjne	r5,#0x0a,00102$
      00334F                       9212 00101$:
      00334F 7Ar30            [12] 9213 	mov	r2,#___str_5
      003351 7Bs00            [12] 9214 	mov	r3,#(___str_5 >> 8)
      003353 7C 80            [12] 9215 	mov	r4,#0x80
                                   9216 ;	calc.c:51: return;
      003355                       9217 00199$:
                                   9218 ;	calc.c:49: for (; *s; s++) putchar(*s);
      003355 8A 82            [24] 9219 	mov	dpl,r2
      003357 8B 83            [24] 9220 	mov	dph,r3
      003359 8C F0            [24] 9221 	mov	b,r4
      00335B A8*00            [24] 9222 	mov	r0,_bp
      00335D 08               [12] 9223 	inc	r0
      00335E 12r00r00         [24] 9224 	lcall	__gptrget
      003361 F6               [12] 9225 	mov	@r0,a
      003362 A8*00            [24] 9226 	mov	r0,_bp
      003364 08               [12] 9227 	inc	r0
      003365 E6               [12] 9228 	mov	a,@r0
      003366 60 24            [24] 9229 	jz	00103$
      003368 C0 06            [24] 9230 	push	ar6
      00336A C0 07            [24] 9231 	push	ar7
      00336C A8*00            [24] 9232 	mov	r0,_bp
      00336E 08               [12] 9233 	inc	r0
      00336F 86 06            [24] 9234 	mov	ar6,@r0
      003371 7F 00            [12] 9235 	mov	r7,#0x00
      003373 8E 82            [24] 9236 	mov	dpl,r6
      003375 8F 83            [24] 9237 	mov	dph,r7
      003377 12r00r00         [24] 9238 	lcall	_putchar
      00337A 0A               [12] 9239 	inc	r2
      00337B BA 00 01         [24] 9240 	cjne	r2,#0x00,00404$
      00337E 0B               [12] 9241 	inc	r3
      00337F                       9242 00404$:
      00337F D0 07            [24] 9243 	pop	ar7
      003381 D0 06            [24] 9244 	pop	ar6
                                   9245 ;	calc.c:495: if (((char)input == '\r') || ((char)input == '\n')) printstr("\r\n");
      003383 80 D0            [24] 9246 	sjmp	00199$
      003385                       9247 00102$:
                                   9248 ;	calc.c:496: else (void)putchar(input);
      003385 8E 82            [24] 9249 	mov	dpl,r6
      003387 8F 83            [24] 9250 	mov	dph,r7
      003389 12r00r00         [24] 9251 	lcall	_putchar
      00338C                       9252 00103$:
                                   9253 ;	calc.c:497: c.digit[0] = (char)input;
      00338C 90r00r13         [24] 9254 	mov	dptr,#(_c + 0x0007)
      00338F ED               [12] 9255 	mov	a,r5
      003390 F0               [24] 9256 	movx	@dptr,a
                                   9257 ;	calc.c:499: if ((char)input == 'q') {
      003391 BD 71 29         [24] 9258 	cjne	r5,#0x71,00189$
                                   9259 ;	calc.c:500: if (state_exec(&s, EVENT_TERM) <= 0) break;
      003394 74 08            [12] 9260 	mov	a,#0x08
      003396 C0 E0            [24] 9261 	push	acc
      003398 E4               [12] 9262 	clr	a
      003399 C0 E0            [24] 9263 	push	acc
      00339B 90r00r00         [24] 9264 	mov	dptr,#_s
      00339E 75 F0 00         [24] 9265 	mov	b,#0x00
      0033A1 12r00r00         [24] 9266 	lcall	_state_exec
      0033A4 AB 82            [24] 9267 	mov	r3,dpl
      0033A6 AC 83            [24] 9268 	mov	r4,dph
      0033A8 15 81            [12] 9269 	dec	sp
      0033AA 15 81            [12] 9270 	dec	sp
      0033AC C3               [12] 9271 	clr	c
      0033AD E4               [12] 9272 	clr	a
      0033AE 9B               [12] 9273 	subb	a,r3
      0033AF 74 80            [12] 9274 	mov	a,#(0x00 ^ 0x80)
      0033B1 8C F0            [24] 9275 	mov	b,r4
      0033B3 63 F0 80         [24] 9276 	xrl	b,#0x80
      0033B6 95 F0            [12] 9277 	subb	a,b
      0033B8 40 84            [24] 9278 	jc	00192$
      0033BA 02r36r6C         [24] 9279 	ljmp	00193$
      0033BD                       9280 00189$:
                                   9281 ;	calc.c:501: } else if ((char)input == 's') {
      0033BD BD 73 2C         [24] 9282 	cjne	r5,#0x73,00186$
                                   9283 ;	calc.c:502: if (state_exec(&s, EVENT_STATUS) <= 0) break;
      0033C0 74 03            [12] 9284 	mov	a,#0x03
      0033C2 C0 E0            [24] 9285 	push	acc
      0033C4 E4               [12] 9286 	clr	a
      0033C5 C0 E0            [24] 9287 	push	acc
      0033C7 90r00r00         [24] 9288 	mov	dptr,#_s
      0033CA 75 F0 00         [24] 9289 	mov	b,#0x00
      0033CD 12r00r00         [24] 9290 	lcall	_state_exec
      0033D0 AB 82            [24] 9291 	mov	r3,dpl
      0033D2 AC 83            [24] 9292 	mov	r4,dph
      0033D4 15 81            [12] 9293 	dec	sp
      0033D6 15 81            [12] 9294 	dec	sp
      0033D8 C3               [12] 9295 	clr	c
      0033D9 E4               [12] 9296 	clr	a
      0033DA 9B               [12] 9297 	subb	a,r3
      0033DB 74 80            [12] 9298 	mov	a,#(0x00 ^ 0x80)
      0033DD 8C F0            [24] 9299 	mov	b,r4
      0033DF 63 F0 80         [24] 9300 	xrl	b,#0x80
      0033E2 95 F0            [12] 9301 	subb	a,b
      0033E4 50 03            [24] 9302 	jnc	00410$
      0033E6 02r33r3E         [24] 9303 	ljmp	00192$
      0033E9                       9304 00410$:
      0033E9 02r36r6C         [24] 9305 	ljmp	00193$
      0033EC                       9306 00186$:
                                   9307 ;	calc.c:503: } else if ((char)input == '?') {
      0033EC BD 3F 2C         [24] 9308 	cjne	r5,#0x3f,00183$
                                   9309 ;	calc.c:504: if (state_exec(&s, EVENT_HELP) <= 0) break;
      0033EF 74 04            [12] 9310 	mov	a,#0x04
      0033F1 C0 E0            [24] 9311 	push	acc
      0033F3 E4               [12] 9312 	clr	a
      0033F4 C0 E0            [24] 9313 	push	acc
      0033F6 90r00r00         [24] 9314 	mov	dptr,#_s
      0033F9 75 F0 00         [24] 9315 	mov	b,#0x00
      0033FC 12r00r00         [24] 9316 	lcall	_state_exec
      0033FF AB 82            [24] 9317 	mov	r3,dpl
      003401 AC 83            [24] 9318 	mov	r4,dph
      003403 15 81            [12] 9319 	dec	sp
      003405 15 81            [12] 9320 	dec	sp
      003407 C3               [12] 9321 	clr	c
      003408 E4               [12] 9322 	clr	a
      003409 9B               [12] 9323 	subb	a,r3
      00340A 74 80            [12] 9324 	mov	a,#(0x00 ^ 0x80)
      00340C 8C F0            [24] 9325 	mov	b,r4
      00340E 63 F0 80         [24] 9326 	xrl	b,#0x80
      003411 95 F0            [12] 9327 	subb	a,b
      003413 50 03            [24] 9328 	jnc	00413$
      003415 02r33r3E         [24] 9329 	ljmp	00192$
      003418                       9330 00413$:
      003418 02r36r6C         [24] 9331 	ljmp	00193$
      00341B                       9332 00183$:
                                   9333 ;	calc.c:505: } else if ((char)input == 'i') {
      00341B BD 69 2C         [24] 9334 	cjne	r5,#0x69,00180$
                                   9335 ;	calc.c:506: if (state_exec(&s, EVENT_RSTA_i) <= 0) break;
      00341E 74 06            [12] 9336 	mov	a,#0x06
      003420 C0 E0            [24] 9337 	push	acc
      003422 E4               [12] 9338 	clr	a
      003423 C0 E0            [24] 9339 	push	acc
      003425 90r00r00         [24] 9340 	mov	dptr,#_s
      003428 75 F0 00         [24] 9341 	mov	b,#0x00
      00342B 12r00r00         [24] 9342 	lcall	_state_exec
      00342E AB 82            [24] 9343 	mov	r3,dpl
      003430 AC 83            [24] 9344 	mov	r4,dph
      003432 15 81            [12] 9345 	dec	sp
      003434 15 81            [12] 9346 	dec	sp
      003436 C3               [12] 9347 	clr	c
      003437 E4               [12] 9348 	clr	a
      003438 9B               [12] 9349 	subb	a,r3
      003439 74 80            [12] 9350 	mov	a,#(0x00 ^ 0x80)
      00343B 8C F0            [24] 9351 	mov	b,r4
      00343D 63 F0 80         [24] 9352 	xrl	b,#0x80
      003440 95 F0            [12] 9353 	subb	a,b
      003442 50 03            [24] 9354 	jnc	00416$
      003444 02r33r3E         [24] 9355 	ljmp	00192$
      003447                       9356 00416$:
      003447 02r36r6C         [24] 9357 	ljmp	00193$
      00344A                       9358 00180$:
                                   9359 ;	calc.c:507: } else if ((char)input == 'I') {
      00344A BD 49 2C         [24] 9360 	cjne	r5,#0x49,00177$
                                   9361 ;	calc.c:508: if (state_exec(&s, EVENT_RSTA_I) <= 0) break;
      00344D 74 07            [12] 9362 	mov	a,#0x07
      00344F C0 E0            [24] 9363 	push	acc
      003451 E4               [12] 9364 	clr	a
      003452 C0 E0            [24] 9365 	push	acc
      003454 90r00r00         [24] 9366 	mov	dptr,#_s
      003457 75 F0 00         [24] 9367 	mov	b,#0x00
      00345A 12r00r00         [24] 9368 	lcall	_state_exec
      00345D AB 82            [24] 9369 	mov	r3,dpl
      00345F AC 83            [24] 9370 	mov	r4,dph
      003461 15 81            [12] 9371 	dec	sp
      003463 15 81            [12] 9372 	dec	sp
      003465 C3               [12] 9373 	clr	c
      003466 E4               [12] 9374 	clr	a
      003467 9B               [12] 9375 	subb	a,r3
      003468 74 80            [12] 9376 	mov	a,#(0x00 ^ 0x80)
      00346A 8C F0            [24] 9377 	mov	b,r4
      00346C 63 F0 80         [24] 9378 	xrl	b,#0x80
      00346F 95 F0            [12] 9379 	subb	a,b
      003471 50 03            [24] 9380 	jnc	00419$
      003473 02r33r3E         [24] 9381 	ljmp	00192$
      003476                       9382 00419$:
      003476 02r36r6C         [24] 9383 	ljmp	00193$
      003479                       9384 00177$:
                                   9385 ;	calc.c:510: ((char)input == 'h') || ((char)input == 'H') ||
      003479 BD 68 02         [24] 9386 	cjne	r5,#0x68,00420$
      00347C 80 0D            [24] 9387 	sjmp	00170$
      00347E                       9388 00420$:
      00347E BD 48 02         [24] 9389 	cjne	r5,#0x48,00421$
      003481 80 08            [24] 9390 	sjmp	00170$
      003483                       9391 00421$:
                                   9392 ;	calc.c:511: ((char)input == 'o') || ((char)input == 'O')
      003483 BD 6F 02         [24] 9393 	cjne	r5,#0x6f,00422$
      003486 80 03            [24] 9394 	sjmp	00170$
      003488                       9395 00422$:
      003488 BD 4F 2C         [24] 9396 	cjne	r5,#0x4f,00171$
      00348B                       9397 00170$:
                                   9398 ;	calc.c:513: if (state_exec(&s, EVENT_BASE) <= 0) break;
      00348B 74 05            [12] 9399 	mov	a,#0x05
      00348D C0 E0            [24] 9400 	push	acc
      00348F E4               [12] 9401 	clr	a
      003490 C0 E0            [24] 9402 	push	acc
      003492 90r00r00         [24] 9403 	mov	dptr,#_s
      003495 75 F0 00         [24] 9404 	mov	b,#0x00
      003498 12r00r00         [24] 9405 	lcall	_state_exec
      00349B AB 82            [24] 9406 	mov	r3,dpl
      00349D AC 83            [24] 9407 	mov	r4,dph
      00349F 15 81            [12] 9408 	dec	sp
      0034A1 15 81            [12] 9409 	dec	sp
      0034A3 C3               [12] 9410 	clr	c
      0034A4 E4               [12] 9411 	clr	a
      0034A5 9B               [12] 9412 	subb	a,r3
      0034A6 74 80            [12] 9413 	mov	a,#(0x00 ^ 0x80)
      0034A8 8C F0            [24] 9414 	mov	b,r4
      0034AA 63 F0 80         [24] 9415 	xrl	b,#0x80
      0034AD 95 F0            [12] 9416 	subb	a,b
      0034AF 50 03            [24] 9417 	jnc	00425$
      0034B1 02r33r3E         [24] 9418 	ljmp	00192$
      0034B4                       9419 00425$:
      0034B4 02r36r6C         [24] 9420 	ljmp	00193$
      0034B7                       9421 00171$:
                                   9422 ;	calc.c:514: } else if (isxdigit(input)) {
      0034B7 8E 82            [24] 9423 	mov	dpl,r6
      0034B9 8F 83            [24] 9424 	mov	dph,r7
      0034BB C0 05            [24] 9425 	push	ar5
      0034BD 12r00r00         [24] 9426 	lcall	_isxdigit
      0034C0 E5 82            [12] 9427 	mov	a,dpl
      0034C2 85 83 F0         [24] 9428 	mov	b,dph
      0034C5 D0 05            [24] 9429 	pop	ar5
      0034C7 45 F0            [12] 9430 	orl	a,b
      0034C9 60 2C            [24] 9431 	jz	00168$
                                   9432 ;	calc.c:515: if (state_exec(&s, EVENT_DIGIT) <= 0) break;
      0034CB 74 01            [12] 9433 	mov	a,#0x01
      0034CD C0 E0            [24] 9434 	push	acc
      0034CF E4               [12] 9435 	clr	a
      0034D0 C0 E0            [24] 9436 	push	acc
      0034D2 90r00r00         [24] 9437 	mov	dptr,#_s
      0034D5 75 F0 00         [24] 9438 	mov	b,#0x00
      0034D8 12r00r00         [24] 9439 	lcall	_state_exec
      0034DB AE 82            [24] 9440 	mov	r6,dpl
      0034DD AF 83            [24] 9441 	mov	r7,dph
      0034DF 15 81            [12] 9442 	dec	sp
      0034E1 15 81            [12] 9443 	dec	sp
      0034E3 C3               [12] 9444 	clr	c
      0034E4 E4               [12] 9445 	clr	a
      0034E5 9E               [12] 9446 	subb	a,r6
      0034E6 74 80            [12] 9447 	mov	a,#(0x00 ^ 0x80)
      0034E8 8F F0            [24] 9448 	mov	b,r7
      0034EA 63 F0 80         [24] 9449 	xrl	b,#0x80
      0034ED 95 F0            [12] 9450 	subb	a,b
      0034EF 50 03            [24] 9451 	jnc	00427$
      0034F1 02r33r3E         [24] 9452 	ljmp	00192$
      0034F4                       9453 00427$:
      0034F4 02r36r6C         [24] 9454 	ljmp	00193$
      0034F7                       9455 00168$:
                                   9456 ;	calc.c:517: ((char)input == 'p') || ((char)input == 'P') ||
      0034F7 BD 70 02         [24] 9457 	cjne	r5,#0x70,00428$
      0034FA 80 17            [24] 9458 	sjmp	00159$
      0034FC                       9459 00428$:
      0034FC BD 50 02         [24] 9460 	cjne	r5,#0x50,00429$
      0034FF 80 12            [24] 9461 	sjmp	00159$
      003501                       9462 00429$:
                                   9463 ;	calc.c:518: ((char)input == 'v') || ((char)input == 'V') ||
      003501 BD 76 02         [24] 9464 	cjne	r5,#0x76,00430$
      003504 80 0D            [24] 9465 	sjmp	00159$
      003506                       9466 00430$:
      003506 BD 56 02         [24] 9467 	cjne	r5,#0x56,00431$
      003509 80 08            [24] 9468 	sjmp	00159$
      00350B                       9469 00431$:
                                   9470 ;	calc.c:519: ((char)input == '.') ||
      00350B BD 2E 02         [24] 9471 	cjne	r5,#0x2e,00432$
      00350E 80 03            [24] 9472 	sjmp	00159$
      003510                       9473 00432$:
                                   9474 ;	calc.c:520: ((char)input == 'x')
      003510 BD 78 2C         [24] 9475 	cjne	r5,#0x78,00160$
      003513                       9476 00159$:
                                   9477 ;	calc.c:522: if (state_exec(&s, EVENT_OP) <= 0) break;
      003513 74 02            [12] 9478 	mov	a,#0x02
      003515 C0 E0            [24] 9479 	push	acc
      003517 E4               [12] 9480 	clr	a
      003518 C0 E0            [24] 9481 	push	acc
      00351A 90r00r00         [24] 9482 	mov	dptr,#_s
      00351D 75 F0 00         [24] 9483 	mov	b,#0x00
      003520 12r00r00         [24] 9484 	lcall	_state_exec
      003523 AE 82            [24] 9485 	mov	r6,dpl
      003525 AF 83            [24] 9486 	mov	r7,dph
      003527 15 81            [12] 9487 	dec	sp
      003529 15 81            [12] 9488 	dec	sp
      00352B C3               [12] 9489 	clr	c
      00352C E4               [12] 9490 	clr	a
      00352D 9E               [12] 9491 	subb	a,r6
      00352E 74 80            [12] 9492 	mov	a,#(0x00 ^ 0x80)
      003530 8F F0            [24] 9493 	mov	b,r7
      003532 63 F0 80         [24] 9494 	xrl	b,#0x80
      003535 95 F0            [12] 9495 	subb	a,b
      003537 50 03            [24] 9496 	jnc	00435$
      003539 02r33r3E         [24] 9497 	ljmp	00192$
      00353C                       9498 00435$:
      00353C 02r36r6C         [24] 9499 	ljmp	00193$
      00353F                       9500 00160$:
                                   9501 ;	calc.c:524: ((char)input == 'X') || ((char)input == 'T') ||
      00353F BD 58 02         [24] 9502 	cjne	r5,#0x58,00436$
      003542 80 17            [24] 9503 	sjmp	00151$
      003544                       9504 00436$:
      003544 BD 54 02         [24] 9505 	cjne	r5,#0x54,00437$
      003547 80 12            [24] 9506 	sjmp	00151$
      003549                       9507 00437$:
                                   9508 ;	calc.c:525: ((char)input == 'm') || ((char)input == 'M') ||
      003549 BD 6D 02         [24] 9509 	cjne	r5,#0x6d,00438$
      00354C 80 0D            [24] 9510 	sjmp	00151$
      00354E                       9511 00438$:
      00354E BD 4D 02         [24] 9512 	cjne	r5,#0x4d,00439$
      003551 80 08            [24] 9513 	sjmp	00151$
      003553                       9514 00439$:
                                   9515 ;	calc.c:526: ((char)input == 'u') || ((char)input == 'U')
      003553 BD 75 02         [24] 9516 	cjne	r5,#0x75,00440$
      003556 80 03            [24] 9517 	sjmp	00151$
      003558                       9518 00440$:
      003558 BD 55 2C         [24] 9519 	cjne	r5,#0x55,00152$
      00355B                       9520 00151$:
                                   9521 ;	calc.c:528: if (state_exec(&s, EVENT_OP) <= 0) break;
      00355B 74 02            [12] 9522 	mov	a,#0x02
      00355D C0 E0            [24] 9523 	push	acc
      00355F E4               [12] 9524 	clr	a
      003560 C0 E0            [24] 9525 	push	acc
      003562 90r00r00         [24] 9526 	mov	dptr,#_s
      003565 75 F0 00         [24] 9527 	mov	b,#0x00
      003568 12r00r00         [24] 9528 	lcall	_state_exec
      00356B AE 82            [24] 9529 	mov	r6,dpl
      00356D AF 83            [24] 9530 	mov	r7,dph
      00356F 15 81            [12] 9531 	dec	sp
      003571 15 81            [12] 9532 	dec	sp
      003573 C3               [12] 9533 	clr	c
      003574 E4               [12] 9534 	clr	a
      003575 9E               [12] 9535 	subb	a,r6
      003576 74 80            [12] 9536 	mov	a,#(0x00 ^ 0x80)
      003578 8F F0            [24] 9537 	mov	b,r7
      00357A 63 F0 80         [24] 9538 	xrl	b,#0x80
      00357D 95 F0            [12] 9539 	subb	a,b
      00357F 50 03            [24] 9540 	jnc	00443$
      003581 02r33r3E         [24] 9541 	ljmp	00192$
      003584                       9542 00443$:
      003584 02r36r6C         [24] 9543 	ljmp	00193$
      003587                       9544 00152$:
                                   9545 ;	calc.c:530: ((char)input == '+') || ((char)input == '-')
      003587 BD 2B 02         [24] 9546 	cjne	r5,#0x2b,00444$
      00358A 80 03            [24] 9547 	sjmp	00147$
      00358C                       9548 00444$:
      00358C BD 2D 2C         [24] 9549 	cjne	r5,#0x2d,00148$
      00358F                       9550 00147$:
                                   9551 ;	calc.c:532: if (state_exec(&s, EVENT_OP) <= 0) break;
      00358F 74 02            [12] 9552 	mov	a,#0x02
      003591 C0 E0            [24] 9553 	push	acc
      003593 E4               [12] 9554 	clr	a
      003594 C0 E0            [24] 9555 	push	acc
      003596 90r00r00         [24] 9556 	mov	dptr,#_s
      003599 75 F0 00         [24] 9557 	mov	b,#0x00
      00359C 12r00r00         [24] 9558 	lcall	_state_exec
      00359F AE 82            [24] 9559 	mov	r6,dpl
      0035A1 AF 83            [24] 9560 	mov	r7,dph
      0035A3 15 81            [12] 9561 	dec	sp
      0035A5 15 81            [12] 9562 	dec	sp
      0035A7 C3               [12] 9563 	clr	c
      0035A8 E4               [12] 9564 	clr	a
      0035A9 9E               [12] 9565 	subb	a,r6
      0035AA 74 80            [12] 9566 	mov	a,#(0x00 ^ 0x80)
      0035AC 8F F0            [24] 9567 	mov	b,r7
      0035AE 63 F0 80         [24] 9568 	xrl	b,#0x80
      0035B1 95 F0            [12] 9569 	subb	a,b
      0035B3 50 03            [24] 9570 	jnc	00447$
      0035B5 02r33r3E         [24] 9571 	ljmp	00192$
      0035B8                       9572 00447$:
      0035B8 02r36r6C         [24] 9573 	ljmp	00193$
      0035BB                       9574 00148$:
                                   9575 ;	calc.c:534: ((char)input == '*') ||
      0035BB BD 2A 02         [24] 9576 	cjne	r5,#0x2a,00448$
      0035BE 80 12            [24] 9577 	sjmp	00140$
      0035C0                       9578 00448$:
                                   9579 ;	calc.c:535: ((char)input == '/') || ((char)input == '\\') ||
      0035C0 BD 2F 02         [24] 9580 	cjne	r5,#0x2f,00449$
      0035C3 80 0D            [24] 9581 	sjmp	00140$
      0035C5                       9582 00449$:
      0035C5 BD 5C 02         [24] 9583 	cjne	r5,#0x5c,00450$
      0035C8 80 08            [24] 9584 	sjmp	00140$
      0035CA                       9585 00450$:
                                   9586 ;	calc.c:536: ((char)input == '%') || ((char)input == '#')
      0035CA BD 25 02         [24] 9587 	cjne	r5,#0x25,00451$
      0035CD 80 03            [24] 9588 	sjmp	00140$
      0035CF                       9589 00451$:
      0035CF BD 23 29         [24] 9590 	cjne	r5,#0x23,00141$
      0035D2                       9591 00140$:
                                   9592 ;	calc.c:538: if (state_exec(&s, EVENT_OP) <= 0) break;
      0035D2 74 02            [12] 9593 	mov	a,#0x02
      0035D4 C0 E0            [24] 9594 	push	acc
      0035D6 E4               [12] 9595 	clr	a
      0035D7 C0 E0            [24] 9596 	push	acc
      0035D9 90r00r00         [24] 9597 	mov	dptr,#_s
      0035DC 75 F0 00         [24] 9598 	mov	b,#0x00
      0035DF 12r00r00         [24] 9599 	lcall	_state_exec
      0035E2 AE 82            [24] 9600 	mov	r6,dpl
      0035E4 AF 83            [24] 9601 	mov	r7,dph
      0035E6 15 81            [12] 9602 	dec	sp
      0035E8 15 81            [12] 9603 	dec	sp
      0035EA C3               [12] 9604 	clr	c
      0035EB E4               [12] 9605 	clr	a
      0035EC 9E               [12] 9606 	subb	a,r6
      0035ED 74 80            [12] 9607 	mov	a,#(0x00 ^ 0x80)
      0035EF 8F F0            [24] 9608 	mov	b,r7
      0035F1 63 F0 80         [24] 9609 	xrl	b,#0x80
      0035F4 95 F0            [12] 9610 	subb	a,b
      0035F6 50 74            [24] 9611 	jnc	00193$
      0035F8 02r33r3E         [24] 9612 	ljmp	00192$
      0035FB                       9613 00141$:
                                   9614 ;	calc.c:540: ((char)input == '&') ||
      0035FB BD 26 02         [24] 9615 	cjne	r5,#0x26,00455$
      0035FE 80 1C            [24] 9616 	sjmp	00131$
      003600                       9617 00455$:
                                   9618 ;	calc.c:541: ((char)input == '|') || ((char)input == '^') ||
      003600 BD 7C 02         [24] 9619 	cjne	r5,#0x7c,00456$
      003603 80 17            [24] 9620 	sjmp	00131$
      003605                       9621 00456$:
      003605 BD 5E 02         [24] 9622 	cjne	r5,#0x5e,00457$
      003608 80 12            [24] 9623 	sjmp	00131$
      00360A                       9624 00457$:
                                   9625 ;	calc.c:542: ((char)input == '~') ||
      00360A BD 7E 02         [24] 9626 	cjne	r5,#0x7e,00458$
      00360D 80 0D            [24] 9627 	sjmp	00131$
      00360F                       9628 00458$:
                                   9629 ;	calc.c:543: ((char)input == '>') || ((char)input == ']') ||
      00360F BD 3E 02         [24] 9630 	cjne	r5,#0x3e,00459$
      003612 80 08            [24] 9631 	sjmp	00131$
      003614                       9632 00459$:
      003614 BD 5D 02         [24] 9633 	cjne	r5,#0x5d,00460$
      003617 80 03            [24] 9634 	sjmp	00131$
      003619                       9635 00460$:
                                   9636 ;	calc.c:544: ((char)input == '<')
      003619 BD 3C 29         [24] 9637 	cjne	r5,#0x3c,00132$
      00361C                       9638 00131$:
                                   9639 ;	calc.c:546: if (state_exec(&s, EVENT_OP) <= 0) break;
      00361C 74 02            [12] 9640 	mov	a,#0x02
      00361E C0 E0            [24] 9641 	push	acc
      003620 E4               [12] 9642 	clr	a
      003621 C0 E0            [24] 9643 	push	acc
      003623 90r00r00         [24] 9644 	mov	dptr,#_s
      003626 75 F0 00         [24] 9645 	mov	b,#0x00
      003629 12r00r00         [24] 9646 	lcall	_state_exec
      00362C AE 82            [24] 9647 	mov	r6,dpl
      00362E AF 83            [24] 9648 	mov	r7,dph
      003630 15 81            [12] 9649 	dec	sp
      003632 15 81            [12] 9650 	dec	sp
      003634 C3               [12] 9651 	clr	c
      003635 E4               [12] 9652 	clr	a
      003636 9E               [12] 9653 	subb	a,r6
      003637 74 80            [12] 9654 	mov	a,#(0x00 ^ 0x80)
      003639 8F F0            [24] 9655 	mov	b,r7
      00363B 63 F0 80         [24] 9656 	xrl	b,#0x80
      00363E 95 F0            [12] 9657 	subb	a,b
      003640 50 2A            [24] 9658 	jnc	00193$
      003642 02r33r3E         [24] 9659 	ljmp	00192$
      003645                       9660 00132$:
                                   9661 ;	calc.c:548: if (state_exec(&s, EVENT_DELIM) <= 0) break;
      003645 E4               [12] 9662 	clr	a
      003646 C0 E0            [24] 9663 	push	acc
      003648 C0 E0            [24] 9664 	push	acc
      00364A 90r00r00         [24] 9665 	mov	dptr,#_s
      00364D 75 F0 00         [24] 9666 	mov	b,#0x00
      003650 12r00r00         [24] 9667 	lcall	_state_exec
      003653 AE 82            [24] 9668 	mov	r6,dpl
      003655 AF 83            [24] 9669 	mov	r7,dph
      003657 15 81            [12] 9670 	dec	sp
      003659 15 81            [12] 9671 	dec	sp
      00365B C3               [12] 9672 	clr	c
      00365C E4               [12] 9673 	clr	a
      00365D 9E               [12] 9674 	subb	a,r6
      00365E 74 80            [12] 9675 	mov	a,#(0x00 ^ 0x80)
      003660 8F F0            [24] 9676 	mov	b,r7
      003662 63 F0 80         [24] 9677 	xrl	b,#0x80
      003665 95 F0            [12] 9678 	subb	a,b
      003667 50 03            [24] 9679 	jnc	00464$
      003669 02r33r3E         [24] 9680 	ljmp	00192$
      00366C                       9681 00464$:
      00366C                       9682 00193$:
                                   9683 ;	calc.c:552: printstr("TERM\r\n");
      00366C 7Dr9D            [12] 9684 	mov	r5,#___str_50
      00366E 7Es03            [12] 9685 	mov	r6,#(___str_50 >> 8)
      003670 7F 80            [12] 9686 	mov	r7,#0x80
                                   9687 ;	calc.c:51: return;
      003672                       9688 00202$:
                                   9689 ;	calc.c:49: for (; *s; s++) putchar(*s);
      003672 8D 82            [24] 9690 	mov	dpl,r5
      003674 8E 83            [24] 9691 	mov	dph,r6
      003676 8F F0            [24] 9692 	mov	b,r7
      003678 12r00r00         [24] 9693 	lcall	__gptrget
      00367B FC               [12] 9694 	mov	r4,a
      00367C 60 10            [24] 9695 	jz	00197$
      00367E 7B 00            [12] 9696 	mov	r3,#0x00
      003680 8C 82            [24] 9697 	mov	dpl,r4
      003682 8B 83            [24] 9698 	mov	dph,r3
      003684 12r00r00         [24] 9699 	lcall	_putchar
      003687 0D               [12] 9700 	inc	r5
                                   9701 ;	calc.c:552: printstr("TERM\r\n");
      003688 BD 00 E7         [24] 9702 	cjne	r5,#0x00,00202$
      00368B 0E               [12] 9703 	inc	r6
      00368C 80 E4            [24] 9704 	sjmp	00202$
      00368E                       9705 00197$:
                                   9706 ;	calc.c:554: PCON |= 2;
      00368E 43 87 02         [24] 9707 	orl	_PCON,#0x02
                                   9708 ;	calc.c:556: return;
                                   9709 ;	calc.c:557: }
      003691 15 81            [12] 9710 	dec	sp
      003693 D0*00            [24] 9711 	pop	_bp
      003695 22               [24] 9712 	ret
                                   9713 	.area CSEG    (CODE)
                                   9714 	.area CONST   (CODE)
                                   9715 	.area CONST   (CODE)
      000000                       9716 ___str_0:
      000000 0D                    9717 	.db 0x0d
      000001 0A                    9718 	.db 0x0a
      000002 50 53                 9719 	.ascii "PS"
      000004 0D                    9720 	.db 0x0d
      000005 0A                    9721 	.db 0x0a
      000006 00                    9722 	.db 0x00
                                   9723 	.area CSEG    (CODE)
                                   9724 	.area CONST   (CODE)
      000007                       9725 ___str_1:
      000007 73 74 61 63 6B 20 75  9726 	.ascii "stack underflow"
             6E 64 65 72 66 6C 6F
             77
      000016 0D                    9727 	.db 0x0d
      000017 0A                    9728 	.db 0x0a
      000018 00                    9729 	.db 0x00
                                   9730 	.area CSEG    (CODE)
                                   9731 	.area CONST   (CODE)
      000019                       9732 ___str_2:
      000019 56 41 20              9733 	.ascii "VA "
      00001C 00                    9734 	.db 0x00
                                   9735 	.area CSEG    (CODE)
                                   9736 	.area CONST   (CODE)
      00001D                       9737 ___str_3:
      00001D 25 20 31 31 6C 64 20  9738 	.ascii "% 11ld / "
             2F 20
      000026 00                    9739 	.db 0x00
                                   9740 	.area CSEG    (CODE)
                                   9741 	.area CONST   (CODE)
      000027                       9742 ___str_4:
      000027 25 30 38 6C 78 20 2F  9743 	.ascii "%08lx / "
             20
      00002F 00                    9744 	.db 0x00
                                   9745 	.area CSEG    (CODE)
                                   9746 	.area CONST   (CODE)
      000030                       9747 ___str_5:
      000030 0D                    9748 	.db 0x0d
      000031 0A                    9749 	.db 0x0a
      000032 00                    9750 	.db 0x00
                                   9751 	.area CSEG    (CODE)
                                   9752 	.area CONST   (CODE)
      000033                       9753 ___str_6:
      000033 53 53                 9754 	.ascii "SS"
      000035 0D                    9755 	.db 0x0d
      000036 0A                    9756 	.db 0x0a
      000037 00                    9757 	.db 0x00
                                   9758 	.area CSEG    (CODE)
                                   9759 	.area CONST   (CODE)
      000038                       9760 ___str_7:
      000038 50 41 20              9761 	.ascii "PA "
      00003B 00                    9762 	.db 0x00
                                   9763 	.area CSEG    (CODE)
                                   9764 	.area CONST   (CODE)
      00003C                       9765 ___str_8:
      00003C 50 54 20              9766 	.ascii "PT "
      00003F 00                    9767 	.db 0x00
                                   9768 	.area CSEG    (CODE)
                                   9769 	.area CONST   (CODE)
      000040                       9770 ___str_9:
      000040 56 54 20              9771 	.ascii "VT "
      000043 00                    9772 	.db 0x00
                                   9773 	.area CSEG    (CODE)
                                   9774 	.area CONST   (CODE)
      000044                       9775 ___str_10:
      000044 0D                    9776 	.db 0x0d
      000045 0A                    9777 	.db 0x0a
      000046 73 74 61 63 6B 20 75  9778 	.ascii "stack underflow"
             6E 64 65 72 66 6C 6F
             77
      000055 0D                    9779 	.db 0x0d
      000056 0A                    9780 	.db 0x0a
      000057 00                    9781 	.db 0x00
                                   9782 	.area CSEG    (CODE)
                                   9783 	.area CONST   (CODE)
      000058                       9784 ___str_11:
      000058 0D                    9785 	.db 0x0d
      000059 0A                    9786 	.db 0x0a
      00005A 73 65 63 6F 6E 64 61  9787 	.ascii "secondary stack overflow"
             72 79 20 73 74 61 63
             6B 20 6F 76 65 72 66
             6C 6F 77
      000072 0D                    9788 	.db 0x0d
      000073 0A                    9789 	.db 0x0a
      000074 00                    9790 	.db 0x00
                                   9791 	.area CSEG    (CODE)
                                   9792 	.area CONST   (CODE)
      000075                       9793 ___str_12:
      000075 0D                    9794 	.db 0x0d
      000076 0A                    9795 	.db 0x0a
      000077 73 65 63 6F 6E 64 61  9796 	.ascii "secondary stack underflow"
             72 79 20 73 74 61 63
             6B 20 75 6E 64 65 72
             66 6C 6F 77
      000090 0D                    9797 	.db 0x0d
      000091 0A                    9798 	.db 0x0a
      000092 00                    9799 	.db 0x00
                                   9800 	.area CSEG    (CODE)
                                   9801 	.area CONST   (CODE)
      000093                       9802 ___str_13:
      000093 0D                    9803 	.db 0x0d
      000094 0A                    9804 	.db 0x0a
      000095 73 74 61 63 6B 20 6F  9805 	.ascii "stack overflow"
             76 65 72 66 6C 6F 77
      0000A3 0D                    9806 	.db 0x0d
      0000A4 0A                    9807 	.db 0x0a
      0000A5 00                    9808 	.db 0x00
                                   9809 	.area CSEG    (CODE)
                                   9810 	.area CONST   (CODE)
      0000A6                       9811 ___str_14:
      0000A6 0D                    9812 	.db 0x0d
      0000A7 0A                    9813 	.db 0x0a
      0000A8 64 69 76 69 73 69 6F  9814 	.ascii "division by zero"
             6E 20 62 79 20 7A 65
             72 6F
      0000B8 0D                    9815 	.db 0x0d
      0000B9 0A                    9816 	.db 0x0a
      0000BA 00                    9817 	.db 0x00
                                   9818 	.area CSEG    (CODE)
                                   9819 	.area CONST   (CODE)
      0000BB                       9820 ___str_15:
      0000BB 0D                    9821 	.db 0x0d
      0000BC 0A                    9822 	.db 0x0a
      0000BD 62 61 73 65 20 3D 20  9823 	.ascii "base = %d, "
             25 64 2C 20
      0000C8 00                    9824 	.db 0x00
                                   9825 	.area CSEG    (CODE)
                                   9826 	.area CONST   (CODE)
      0000C9                       9827 ___str_16:
      0000C9 61 63 63 20 3D 20 25  9828 	.ascii "acc = %ld / "
             6C 64 20 2F 20
      0000D5 00                    9829 	.db 0x00
                                   9830 	.area CSEG    (CODE)
                                   9831 	.area CONST   (CODE)
      0000D6                       9832 ___str_17:
      0000D6 2C 20 61 63 63 5F 76  9833 	.ascii ", acc_valid = %d"
             61 6C 69 64 20 3D 20
             25 64
      0000E6 0D                    9834 	.db 0x0d
      0000E7 0A                    9835 	.db 0x0a
      0000E8 00                    9836 	.db 0x00
                                   9837 	.area CSEG    (CODE)
                                   9838 	.area CONST   (CODE)
      0000E9                       9839 ___str_18:
      0000E9 70 72 69 6D 61 72 79  9840 	.ascii "primary = %p, secondary = %p"
             20 3D 20 25 70 2C 20
             73 65 63 6F 6E 64 61
             72 79 20 3D 20 25 70
      000105 0D                    9841 	.db 0x0d
      000106 0A                    9842 	.db 0x0a
      000107 00                    9843 	.db 0x00
                                   9844 	.area CSEG    (CODE)
                                   9845 	.area CONST   (CODE)
      000108                       9846 ___str_19:
      000108 0D                    9847 	.db 0x0d
      000109 0A                    9848 	.db 0x0a
      00010A 48 68 4F 6F           9849 	.ascii "HhOo"
      00010E 09                    9850 	.db 0x09
      00010F 62 61 73 65 20 31 36  9851 	.ascii "base 16 10 8 2"
             20 31 30 20 38 20 32
      00011D 0D                    9852 	.db 0x0d
      00011E 0A                    9853 	.db 0x0a
      00011F 00                    9854 	.db 0x00
                                   9855 	.area CSEG    (CODE)
                                   9856 	.area CONST   (CODE)
      000120                       9857 ___str_20:
      000120 70                    9858 	.ascii "p"
      000121 09                    9859 	.db 0x09
      000122 70 65 65 6B 20 74 6F  9860 	.ascii "peek top"
             70
      00012A 0D                    9861 	.db 0x0d
      00012B 0A                    9862 	.db 0x0a
      00012C 00                    9863 	.db 0x00
                                   9864 	.area CSEG    (CODE)
                                   9865 	.area CONST   (CODE)
      00012D                       9866 ___str_21:
      00012D 50                    9867 	.ascii "P"
      00012E 09                    9868 	.db 0x09
      00012F 70 72 69 6E 74 20 73  9869 	.ascii "print stack"
             74 61 63 6B
      00013A 0D                    9870 	.db 0x0d
      00013B 0A                    9871 	.db 0x0a
      00013C 00                    9872 	.db 0x00
                                   9873 	.area CSEG    (CODE)
                                   9874 	.area CONST   (CODE)
      00013D                       9875 ___str_22:
      00013D 76 2E                 9876 	.ascii "v."
      00013F 09                    9877 	.db 0x09
      000140 70 6F 70 20 74 6F 70  9878 	.ascii "pop top"
      000147 0D                    9879 	.db 0x0d
      000148 0A                    9880 	.db 0x0a
      000149 00                    9881 	.db 0x00
                                   9882 	.area CSEG    (CODE)
                                   9883 	.area CONST   (CODE)
      00014A                       9884 ___str_23:
      00014A 56                    9885 	.ascii "V"
      00014B 09                    9886 	.db 0x09
      00014C 70 6F 70 20 61 6C 6C  9887 	.ascii "pop all"
      000153 0D                    9888 	.db 0x0d
      000154 0A                    9889 	.db 0x0a
      000155 00                    9890 	.db 0x00
                                   9891 	.area CSEG    (CODE)
                                   9892 	.area CONST   (CODE)
      000156                       9893 ___str_24:
      000156 69                    9894 	.ascii "i"
      000157 09                    9895 	.db 0x09
      000158 72 65 73 65 74 20 61  9896 	.ascii "reset acc"
             63 63
      000161 0D                    9897 	.db 0x0d
      000162 0A                    9898 	.db 0x0a
      000163 00                    9899 	.db 0x00
                                   9900 	.area CSEG    (CODE)
                                   9901 	.area CONST   (CODE)
      000164                       9902 ___str_25:
      000164 49                    9903 	.ascii "I"
      000165 09                    9904 	.db 0x09
      000166 72 65 73 65 74 20 61  9905 	.ascii "reset and discard acc"
             6E 64 20 64 69 73 63
             61 72 64 20 61 63 63
      00017B 0D                    9906 	.db 0x0d
      00017C 0A                    9907 	.db 0x0a
      00017D 00                    9908 	.db 0x00
                                   9909 	.area CSEG    (CODE)
                                   9910 	.area CONST   (CODE)
      00017E                       9911 ___str_26:
      00017E 78                    9912 	.ascii "x"
      00017F 09                    9913 	.db 0x09
      000180 65 78 63 68 61 6E 67  9914 	.ascii "exchange top 2"
             65 20 74 6F 70 20 32
      00018E 0D                    9915 	.db 0x0d
      00018F 0A                    9916 	.db 0x0a
      000190 00                    9917 	.db 0x00
                                   9918 	.area CSEG    (CODE)
                                   9919 	.area CONST   (CODE)
      000191                       9920 ___str_27:
      000191 58                    9921 	.ascii "X"
      000192 09                    9922 	.db 0x09
      000193 65 78 63 68 61 6E 67  9923 	.ascii "exchange stacks primary <-> secondary"
             65 20 73 74 61 63 6B
             73 20 70 72 69 6D 61
             72 79 20 3C 2D 3E 20
             73 65 63 6F 6E 64 61
             72 79
      0001B8 0D                    9924 	.db 0x0d
      0001B9 0A                    9925 	.db 0x0a
      0001BA 00                    9926 	.db 0x00
                                   9927 	.area CSEG    (CODE)
                                   9928 	.area CONST   (CODE)
      0001BB                       9929 ___str_28:
      0001BB 54                    9930 	.ascii "T"
      0001BC 09                    9931 	.db 0x09
      0001BD 65 78 63 68 61 6E 67  9932 	.ascii "exchange tops primary <-> secondary"
             65 20 74 6F 70 73 20
             70 72 69 6D 61 72 79
             20 3C 2D 3E 20 73 65
             63 6F 6E 64 61 72 79
      0001E0 0D                    9933 	.db 0x0d
      0001E1 0A                    9934 	.db 0x0a
      0001E2 00                    9935 	.db 0x00
                                   9936 	.area CSEG    (CODE)
                                   9937 	.area CONST   (CODE)
      0001E3                       9938 ___str_29:
      0001E3 55                    9939 	.ascii "U"
      0001E4 09                    9940 	.db 0x09
      0001E5 63 6F 70 79 20 74 6F  9941 	.ascii "copy top secondary -> primary"
             70 20 73 65 63 6F 6E
             64 61 72 79 20 2D 3E
             20 70 72 69 6D 61 72
             79
      000202 0D                    9942 	.db 0x0d
      000203 0A                    9943 	.db 0x0a
      000204 00                    9944 	.db 0x00
                                   9945 	.area CSEG    (CODE)
                                   9946 	.area CONST   (CODE)
      000205                       9947 ___str_30:
      000205 75                    9948 	.ascii "u"
      000206 09                    9949 	.db 0x09
      000207 63 6F 70 79 20 74 6F  9950 	.ascii "copy top primary -> secondary"
             70 20 70 72 69 6D 61
             72 79 20 2D 3E 20 73
             65 63 6F 6E 64 61 72
             79
      000224 0D                    9951 	.db 0x0d
      000225 0A                    9952 	.db 0x0a
      000226 00                    9953 	.db 0x00
                                   9954 	.area CSEG    (CODE)
                                   9955 	.area CONST   (CODE)
      000227                       9956 ___str_31:
      000227 4D                    9957 	.ascii "M"
      000228 09                    9958 	.db 0x09
      000229 6D 6F 76 65 20 74 6F  9959 	.ascii "move top secondary -> primary"
             70 20 73 65 63 6F 6E
             64 61 72 79 20 2D 3E
             20 70 72 69 6D 61 72
             79
      000246 0D                    9960 	.db 0x0d
      000247 0A                    9961 	.db 0x0a
      000248 00                    9962 	.db 0x00
                                   9963 	.area CSEG    (CODE)
                                   9964 	.area CONST   (CODE)
      000249                       9965 ___str_32:
      000249 6D                    9966 	.ascii "m"
      00024A 09                    9967 	.db 0x09
      00024B 6D 6F 76 65 20 74 6F  9968 	.ascii "move top primary -> secondary"
             70 20 70 72 69 6D 61
             72 79 20 2D 3E 20 73
             65 63 6F 6E 64 61 72
             79
      000268 0D                    9969 	.db 0x0d
      000269 0A                    9970 	.db 0x0a
      00026A 00                    9971 	.db 0x00
                                   9972 	.area CSEG    (CODE)
                                   9973 	.area CONST   (CODE)
      00026B                       9974 ___str_33:
      00026B 2B                    9975 	.ascii "+"
      00026C 09                    9976 	.db 0x09
      00026D 61 64 64 20 74 6F 70  9977 	.ascii "add top 2"
             20 32
      000276 0D                    9978 	.db 0x0d
      000277 0A                    9979 	.db 0x0a
      000278 00                    9980 	.db 0x00
                                   9981 	.area CSEG    (CODE)
                                   9982 	.area CONST   (CODE)
      000279                       9983 ___str_34:
      000279 2D                    9984 	.ascii "-"
      00027A 09                    9985 	.db 0x09
      00027B 73 75 62 74 72 61 63  9986 	.ascii "subtract top 2"
             74 20 74 6F 70 20 32
      000289 0D                    9987 	.db 0x0d
      00028A 0A                    9988 	.db 0x0a
      00028B 00                    9989 	.db 0x00
                                   9990 	.area CSEG    (CODE)
                                   9991 	.area CONST   (CODE)
      00028C                       9992 ___str_35:
      00028C 2A                    9993 	.ascii "*"
      00028D 09                    9994 	.db 0x09
      00028E 6D 75 6C 74 69 70 6C  9995 	.ascii "multiply top 2"
             79 20 74 6F 70 20 32
      00029C 0D                    9996 	.db 0x0d
      00029D 0A                    9997 	.db 0x0a
      00029E 00                    9998 	.db 0x00
                                   9999 	.area CSEG    (CODE)
                                  10000 	.area CONST   (CODE)
      00029F                      10001 ___str_36:
      00029F 2F                   10002 	.ascii "/"
      0002A0 09                   10003 	.db 0x09
      0002A1 64 69 76 69 64 65 20 10004 	.ascii "divide top 2"
             74 6F 70 20 32
      0002AD 0D                   10005 	.db 0x0d
      0002AE 0A                   10006 	.db 0x0a
      0002AF 00                   10007 	.db 0x00
                                  10008 	.area CSEG    (CODE)
                                  10009 	.area CONST   (CODE)
      0002B0                      10010 ___str_37:
      0002B0 5C                   10011 	.db 0x5c
      0002B1 09                   10012 	.db 0x09
      0002B2 64 69 76 69 64 65 20 10013 	.ascii "divide top 2 unsigned"
             74 6F 70 20 32 20 75
             6E 73 69 67 6E 65 64
      0002C7 0D                   10014 	.db 0x0d
      0002C8 0A                   10015 	.db 0x0a
      0002C9 00                   10016 	.db 0x00
                                  10017 	.area CSEG    (CODE)
                                  10018 	.area CONST   (CODE)
      0002CA                      10019 ___str_38:
      0002CA 25                   10020 	.ascii "%"
      0002CB 09                   10021 	.db 0x09
      0002CC 6D 6F 64 75 6C 75 73 10022 	.ascii "modulus top 2"
             20 74 6F 70 20 32
      0002D9 0D                   10023 	.db 0x0d
      0002DA 0A                   10024 	.db 0x0a
      0002DB 00                   10025 	.db 0x00
                                  10026 	.area CSEG    (CODE)
                                  10027 	.area CONST   (CODE)
      0002DC                      10028 ___str_39:
      0002DC 23                   10029 	.ascii "#"
      0002DD 09                   10030 	.db 0x09
      0002DE 6D 6F 64 75 6C 75 73 10031 	.ascii "modulus top 2 unsigned"
             20 74 6F 70 20 32 20
             75 6E 73 69 67 6E 65
             64
      0002F4 0D                   10032 	.db 0x0d
      0002F5 0A                   10033 	.db 0x0a
      0002F6 00                   10034 	.db 0x00
                                  10035 	.area CSEG    (CODE)
                                  10036 	.area CONST   (CODE)
      0002F7                      10037 ___str_40:
      0002F7 26                   10038 	.ascii "&"
      0002F8 09                   10039 	.db 0x09
      0002F9 61 6E 64 20 74 6F 70 10040 	.ascii "and top 2"
             20 32
      000302 0D                   10041 	.db 0x0d
      000303 0A                   10042 	.db 0x0a
      000304 00                   10043 	.db 0x00
                                  10044 	.area CSEG    (CODE)
                                  10045 	.area CONST   (CODE)
      000305                      10046 ___str_41:
      000305 7C                   10047 	.ascii "|"
      000306 09                   10048 	.db 0x09
      000307 6F 72 20 74 6F 70 20 10049 	.ascii "or top 2"
             32
      00030F 0D                   10050 	.db 0x0d
      000310 0A                   10051 	.db 0x0a
      000311 00                   10052 	.db 0x00
                                  10053 	.area CSEG    (CODE)
                                  10054 	.area CONST   (CODE)
      000312                      10055 ___str_42:
      000312 5E                   10056 	.ascii "^"
      000313 09                   10057 	.db 0x09
      000314 78 6F 72 20 74 6F 70 10058 	.ascii "xor top 2"
             20 32
      00031D 0D                   10059 	.db 0x0d
      00031E 0A                   10060 	.db 0x0a
      00031F 00                   10061 	.db 0x00
                                  10062 	.area CSEG    (CODE)
                                  10063 	.area CONST   (CODE)
      000320                      10064 ___str_43:
      000320 3E                   10065 	.ascii ">"
      000321 09                   10066 	.db 0x09
      000322 73 68 69 66 74 20 72 10067 	.ascii "shift right top 2"
             69 67 68 74 20 74 6F
             70 20 32
      000333 0D                   10068 	.db 0x0d
      000334 0A                   10069 	.db 0x0a
      000335 00                   10070 	.db 0x00
                                  10071 	.area CSEG    (CODE)
                                  10072 	.area CONST   (CODE)
      000336                      10073 ___str_44:
      000336 5D                   10074 	.ascii "]"
      000337 09                   10075 	.db 0x09
      000338 61 72 69 74 68 6D 65 10076 	.ascii "arithmetic shift right top 2"
             74 69 63 20 73 68 69
             66 74 20 72 69 67 68
             74 20 74 6F 70 20 32
      000354 0D                   10077 	.db 0x0d
      000355 0A                   10078 	.db 0x0a
      000356 00                   10079 	.db 0x00
                                  10080 	.area CSEG    (CODE)
                                  10081 	.area CONST   (CODE)
      000357                      10082 ___str_45:
      000357 3C                   10083 	.ascii "<"
      000358 09                   10084 	.db 0x09
      000359 73 68 69 66 74 20 6C 10085 	.ascii "shift left top 2"
             65 66 74 20 74 6F 70
             20 32
      000369 0D                   10086 	.db 0x0d
      00036A 0A                   10087 	.db 0x0a
      00036B 00                   10088 	.db 0x00
                                  10089 	.area CSEG    (CODE)
                                  10090 	.area CONST   (CODE)
      00036C                      10091 ___str_46:
      00036C 7E                   10092 	.ascii "~"
      00036D 09                   10093 	.db 0x09
      00036E 62 69 74 77 69 73 65 10094 	.ascii "bitwise not top"
             20 6E 6F 74 20 74 6F
             70
      00037D 0D                   10095 	.db 0x0d
      00037E 0A                   10096 	.db 0x0a
      00037F 00                   10097 	.db 0x00
                                  10098 	.area CSEG    (CODE)
                                  10099 	.area CONST   (CODE)
      000380                      10100 ___str_47:
      000380 73                   10101 	.ascii "s"
      000381 09                   10102 	.db 0x09
      000382 73 74 61 74 75 73    10103 	.ascii "status"
      000388 0D                   10104 	.db 0x0d
      000389 0A                   10105 	.db 0x0a
      00038A 00                   10106 	.db 0x00
                                  10107 	.area CSEG    (CODE)
                                  10108 	.area CONST   (CODE)
      00038B                      10109 ___str_48:
      00038B 3F                   10110 	.ascii "?"
      00038C 09                   10111 	.db 0x09
      00038D 68 65 6C 70          10112 	.ascii "help"
      000391 0D                   10113 	.db 0x0d
      000392 0A                   10114 	.db 0x0a
      000393 00                   10115 	.db 0x00
                                  10116 	.area CSEG    (CODE)
                                  10117 	.area CONST   (CODE)
      000394                      10118 ___str_49:
      000394 71                   10119 	.ascii "q"
      000395 09                   10120 	.db 0x09
      000396 71 75 69 74          10121 	.ascii "quit"
      00039A 0D                   10122 	.db 0x0d
      00039B 0A                   10123 	.db 0x0a
      00039C 00                   10124 	.db 0x00
                                  10125 	.area CSEG    (CODE)
                                  10126 	.area CONST   (CODE)
      00039D                      10127 ___str_50:
      00039D 54 45 52 4D          10128 	.ascii "TERM"
      0003A1 0D                   10129 	.db 0x0d
      0003A2 0A                   10130 	.db 0x0a
      0003A3 00                   10131 	.db 0x00
                                  10132 	.area CSEG    (CODE)
                                  10133 	.area XINIT   (CODE)
      000000                      10134 __xinit__deltas:
      000000 00 00                10135 	.byte #0x00, #0x00	;  0
      000002 00 00                10136 	.byte #0x00, #0x00	;  0
      000004 00 00                10137 	.byte #0x00, #0x00	;  0
      000006 00 00                10138 	.byte #0x00,#0x00
      000008 00 00                10139 	.byte #0x00,#0x00
      00000A 00 00                10140 	.byte #0x00, #0x00	;  0
      00000C 01 00                10141 	.byte #0x01, #0x00	;  1
      00000E 02 00                10142 	.byte #0x02, #0x00	;  2
      000010 00 00                10143 	.byte #0x00,#0x00
      000012r22s00                10144 	.byte _accumulate, (_accumulate >> 8)
      000014 00 00                10145 	.byte #0x00, #0x00	;  0
      000016 02 00                10146 	.byte #0x02, #0x00	;  2
      000018 01 00                10147 	.byte #0x01, #0x00	;  1
      00001A 00 00                10148 	.byte #0x00,#0x00
      00001CrC1s07                10149 	.byte _operator, (_operator >> 8)
      00001E 01 00                10150 	.byte #0x01, #0x00	;  1
      000020 00 00                10151 	.byte #0x00, #0x00	;  0
      000022 00 00                10152 	.byte #0x00, #0x00	;  0
      000024 00 00                10153 	.byte #0x00,#0x00
      000026 00 00                10154 	.byte #0x00,#0x00
      000028 01 00                10155 	.byte #0x01, #0x00	;  1
      00002A 02 00                10156 	.byte #0x02, #0x00	;  2
      00002C 01 00                10157 	.byte #0x01, #0x00	;  1
      00002E 00 00                10158 	.byte #0x00,#0x00
      000030rC1s07                10159 	.byte _operator, (_operator >> 8)
      000032 01 00                10160 	.byte #0x01, #0x00	;  1
      000034 01 00                10161 	.byte #0x01, #0x00	;  1
      000036 02 00                10162 	.byte #0x02, #0x00	;  2
      000038 00 00                10163 	.byte #0x00,#0x00
      00003Ar22s00                10164 	.byte _accumulate, (_accumulate >> 8)
      00003C 02 00                10165 	.byte #0x02, #0x00	;  2
      00003E 00 00                10166 	.byte #0x00, #0x00	;  0
      000040 00 00                10167 	.byte #0x00, #0x00	;  0
      000042 00 00                10168 	.byte #0x00,#0x00
      000044r4Fs2A                10169 	.byte _push_acc, (_push_acc >> 8)
      000046 02 00                10170 	.byte #0x02, #0x00	;  2
      000048 07 00                10171 	.byte #0x07, #0x00	;  7
      00004A 00 00                10172 	.byte #0x00, #0x00	;  0
      00004C 00 00                10173 	.byte #0x00,#0x00
      00004Er6Bs2B                10174 	.byte _reset_acc, (_reset_acc >> 8)
      000050 02 00                10175 	.byte #0x02, #0x00	;  2
      000052 01 00                10176 	.byte #0x01, #0x00	;  1
      000054 02 00                10177 	.byte #0x02, #0x00	;  2
      000056 00 00                10178 	.byte #0x00,#0x00
      000058r22s00                10179 	.byte _accumulate, (_accumulate >> 8)
      00005A 02 00                10180 	.byte #0x02, #0x00	;  2
      00005C 02 00                10181 	.byte #0x02, #0x00	;  2
      00005E 01 00                10182 	.byte #0x01, #0x00	;  1
      000060 00 00                10183 	.byte #0x00,#0x00
      000062r4Fs2A                10184 	.byte _push_acc, (_push_acc >> 8)
      000064 FF 7F                10185 	.byte #0xff, #0x7f	;  32767
      000066 06 00                10186 	.byte #0x06, #0x00	;  6
      000068 FF 7F                10187 	.byte #0xff, #0x7f	;  32767
      00006A 00 00                10188 	.byte #0x00,#0x00
      00006Cr6Bs2B                10189 	.byte _reset_acc, (_reset_acc >> 8)
      00006E FF 7F                10190 	.byte #0xff, #0x7f	;  32767
      000070 07 00                10191 	.byte #0x07, #0x00	;  7
      000072 FF 7F                10192 	.byte #0xff, #0x7f	;  32767
      000074 00 00                10193 	.byte #0x00,#0x00
      000076 00 00                10194 	.byte #0x00,#0x00
      000078 FF 7F                10195 	.byte #0xff, #0x7f	;  32767
      00007A 05 00                10196 	.byte #0x05, #0x00	;  5
      00007C FF 7F                10197 	.byte #0xff, #0x7f	;  32767
      00007E 00 00                10198 	.byte #0x00,#0x00
      000080rD5s2B                10199 	.byte _reset_base, (_reset_base >> 8)
      000082 FF 7F                10200 	.byte #0xff, #0x7f	;  32767
      000084 03 00                10201 	.byte #0x03, #0x00	;  3
      000086 FF 7F                10202 	.byte #0xff, #0x7f	;  32767
      000088 00 00                10203 	.byte #0x00,#0x00
      00008Ar53s2C                10204 	.byte _status, (_status >> 8)
      00008C FF 7F                10205 	.byte #0xff, #0x7f	;  32767
      00008E 04 00                10206 	.byte #0x04, #0x00	;  4
      000090 FF 7F                10207 	.byte #0xff, #0x7f	;  32767
      000092 00 00                10208 	.byte #0x00,#0x00
      000094r68s2E                10209 	.byte _help, (_help >> 8)
      000096 FF 7F                10210 	.byte #0xff, #0x7f	;  32767
      000098 08 00                10211 	.byte #0x08, #0x00	;  8
      00009A 03 00                10212 	.byte #0x03, #0x00	;  3
      00009C 00 00                10213 	.byte #0x00,#0x00
      00009Er93s01                10214 	.byte _dump_pop, (_dump_pop >> 8)
      0000A0 00 80                10215 	.byte #0x00, #0x80	; -32768
      0000A2 00 80                10216 	.byte #0x00, #0x80	; -32768
      0000A4 00 80                10217 	.byte #0x00, #0x80	; -32768
      0000A6 00 00                10218 	.byte #0x00,#0x00
      0000A8 00 00                10219 	.byte #0x00,#0x00
                                  10220 	.area CABS    (ABS,CODE)
