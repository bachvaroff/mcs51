                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module calc
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _state_exec
                                     13 	.globl _state_init
                                     14 	.globl _stack_iter_peek
                                     15 	.globl _stack_peek2
                                     16 	.globl _stack_peek
                                     17 	.globl _stack_pop
                                     18 	.globl _stack_push
                                     19 	.globl _stack_init
                                     20 	.globl _print32x
                                     21 	.globl _print32bin
                                     22 	.globl _printstr
                                     23 	.globl _getchar
                                     24 	.globl _putchar
                                     25 	.globl _isxdigit
                                     26 	.globl _printf
                                     27 	.globl _strtol
                                     28 	.globl _CY
                                     29 	.globl _AC
                                     30 	.globl _F0
                                     31 	.globl _RS1
                                     32 	.globl _RS0
                                     33 	.globl _OV
                                     34 	.globl _FL
                                     35 	.globl _P
                                     36 	.globl _TF2
                                     37 	.globl _EXF2
                                     38 	.globl _RCLK
                                     39 	.globl _TCLK
                                     40 	.globl _EXEN2
                                     41 	.globl _TR2
                                     42 	.globl _C_T2
                                     43 	.globl _CP_RL2
                                     44 	.globl _T2CON_7
                                     45 	.globl _T2CON_6
                                     46 	.globl _T2CON_5
                                     47 	.globl _T2CON_4
                                     48 	.globl _T2CON_3
                                     49 	.globl _T2CON_2
                                     50 	.globl _T2CON_1
                                     51 	.globl _T2CON_0
                                     52 	.globl _PT2
                                     53 	.globl _PS
                                     54 	.globl _PT1
                                     55 	.globl _PX1
                                     56 	.globl _PT0
                                     57 	.globl _PX0
                                     58 	.globl _RD
                                     59 	.globl _WR
                                     60 	.globl _T1
                                     61 	.globl _T0
                                     62 	.globl _INT1
                                     63 	.globl _INT0
                                     64 	.globl _TXD
                                     65 	.globl _RXD
                                     66 	.globl _P3_7
                                     67 	.globl _P3_6
                                     68 	.globl _P3_5
                                     69 	.globl _P3_4
                                     70 	.globl _P3_3
                                     71 	.globl _P3_2
                                     72 	.globl _P3_1
                                     73 	.globl _P3_0
                                     74 	.globl _EA
                                     75 	.globl _ET2
                                     76 	.globl _ES
                                     77 	.globl _ET1
                                     78 	.globl _EX1
                                     79 	.globl _ET0
                                     80 	.globl _EX0
                                     81 	.globl _P2_7
                                     82 	.globl _P2_6
                                     83 	.globl _P2_5
                                     84 	.globl _P2_4
                                     85 	.globl _P2_3
                                     86 	.globl _P2_2
                                     87 	.globl _P2_1
                                     88 	.globl _P2_0
                                     89 	.globl _SM0
                                     90 	.globl _SM1
                                     91 	.globl _SM2
                                     92 	.globl _REN
                                     93 	.globl _TB8
                                     94 	.globl _RB8
                                     95 	.globl _TI
                                     96 	.globl _RI
                                     97 	.globl _T2EX
                                     98 	.globl _T2
                                     99 	.globl _P1_7
                                    100 	.globl _P1_6
                                    101 	.globl _P1_5
                                    102 	.globl _P1_4
                                    103 	.globl _P1_3
                                    104 	.globl _P1_2
                                    105 	.globl _P1_1
                                    106 	.globl _P1_0
                                    107 	.globl _TF1
                                    108 	.globl _TR1
                                    109 	.globl _TF0
                                    110 	.globl _TR0
                                    111 	.globl _IE1
                                    112 	.globl _IT1
                                    113 	.globl _IE0
                                    114 	.globl _IT0
                                    115 	.globl _P0_7
                                    116 	.globl _P0_6
                                    117 	.globl _P0_5
                                    118 	.globl _P0_4
                                    119 	.globl _P0_3
                                    120 	.globl _P0_2
                                    121 	.globl _P0_1
                                    122 	.globl _P0_0
                                    123 	.globl _B
                                    124 	.globl _A
                                    125 	.globl _ACC
                                    126 	.globl _PSW
                                    127 	.globl _TH2
                                    128 	.globl _TL2
                                    129 	.globl _RCAP2H
                                    130 	.globl _RCAP2L
                                    131 	.globl _T2MOD
                                    132 	.globl _T2CON
                                    133 	.globl _IP
                                    134 	.globl _P3
                                    135 	.globl _IE
                                    136 	.globl _P2
                                    137 	.globl _SBUF
                                    138 	.globl _SCON
                                    139 	.globl _P1
                                    140 	.globl _TH1
                                    141 	.globl _TH0
                                    142 	.globl _TL1
                                    143 	.globl _TL0
                                    144 	.globl _TMOD
                                    145 	.globl _TCON
                                    146 	.globl _PCON
                                    147 	.globl _DPH
                                    148 	.globl _DPL
                                    149 	.globl _SP
                                    150 	.globl _P0
                                    151 	.globl _giant
                                    152 ;--------------------------------------------------------
                                    153 ; special function registers
                                    154 ;--------------------------------------------------------
                                    155 	.area RSEG    (ABS,DATA)
      000000                        156 	.org 0x0000
                           000080   157 _P0	=	0x0080
                           000081   158 _SP	=	0x0081
                           000082   159 _DPL	=	0x0082
                           000083   160 _DPH	=	0x0083
                           000087   161 _PCON	=	0x0087
                           000088   162 _TCON	=	0x0088
                           000089   163 _TMOD	=	0x0089
                           00008A   164 _TL0	=	0x008a
                           00008B   165 _TL1	=	0x008b
                           00008C   166 _TH0	=	0x008c
                           00008D   167 _TH1	=	0x008d
                           000090   168 _P1	=	0x0090
                           000098   169 _SCON	=	0x0098
                           000099   170 _SBUF	=	0x0099
                           0000A0   171 _P2	=	0x00a0
                           0000A8   172 _IE	=	0x00a8
                           0000B0   173 _P3	=	0x00b0
                           0000B8   174 _IP	=	0x00b8
                           0000C8   175 _T2CON	=	0x00c8
                           0000C9   176 _T2MOD	=	0x00c9
                           0000CA   177 _RCAP2L	=	0x00ca
                           0000CB   178 _RCAP2H	=	0x00cb
                           0000CC   179 _TL2	=	0x00cc
                           0000CD   180 _TH2	=	0x00cd
                           0000D0   181 _PSW	=	0x00d0
                           0000E0   182 _ACC	=	0x00e0
                           0000E0   183 _A	=	0x00e0
                           0000F0   184 _B	=	0x00f0
                                    185 ;--------------------------------------------------------
                                    186 ; special function bits
                                    187 ;--------------------------------------------------------
                                    188 	.area RSEG    (ABS,DATA)
      000000                        189 	.org 0x0000
                           000080   190 _P0_0	=	0x0080
                           000081   191 _P0_1	=	0x0081
                           000082   192 _P0_2	=	0x0082
                           000083   193 _P0_3	=	0x0083
                           000084   194 _P0_4	=	0x0084
                           000085   195 _P0_5	=	0x0085
                           000086   196 _P0_6	=	0x0086
                           000087   197 _P0_7	=	0x0087
                           000088   198 _IT0	=	0x0088
                           000089   199 _IE0	=	0x0089
                           00008A   200 _IT1	=	0x008a
                           00008B   201 _IE1	=	0x008b
                           00008C   202 _TR0	=	0x008c
                           00008D   203 _TF0	=	0x008d
                           00008E   204 _TR1	=	0x008e
                           00008F   205 _TF1	=	0x008f
                           000090   206 _P1_0	=	0x0090
                           000091   207 _P1_1	=	0x0091
                           000092   208 _P1_2	=	0x0092
                           000093   209 _P1_3	=	0x0093
                           000094   210 _P1_4	=	0x0094
                           000095   211 _P1_5	=	0x0095
                           000096   212 _P1_6	=	0x0096
                           000097   213 _P1_7	=	0x0097
                           000090   214 _T2	=	0x0090
                           000091   215 _T2EX	=	0x0091
                           000098   216 _RI	=	0x0098
                           000099   217 _TI	=	0x0099
                           00009A   218 _RB8	=	0x009a
                           00009B   219 _TB8	=	0x009b
                           00009C   220 _REN	=	0x009c
                           00009D   221 _SM2	=	0x009d
                           00009E   222 _SM1	=	0x009e
                           00009F   223 _SM0	=	0x009f
                           0000A0   224 _P2_0	=	0x00a0
                           0000A1   225 _P2_1	=	0x00a1
                           0000A2   226 _P2_2	=	0x00a2
                           0000A3   227 _P2_3	=	0x00a3
                           0000A4   228 _P2_4	=	0x00a4
                           0000A5   229 _P2_5	=	0x00a5
                           0000A6   230 _P2_6	=	0x00a6
                           0000A7   231 _P2_7	=	0x00a7
                           0000A8   232 _EX0	=	0x00a8
                           0000A9   233 _ET0	=	0x00a9
                           0000AA   234 _EX1	=	0x00aa
                           0000AB   235 _ET1	=	0x00ab
                           0000AC   236 _ES	=	0x00ac
                           0000AD   237 _ET2	=	0x00ad
                           0000AF   238 _EA	=	0x00af
                           0000B0   239 _P3_0	=	0x00b0
                           0000B1   240 _P3_1	=	0x00b1
                           0000B2   241 _P3_2	=	0x00b2
                           0000B3   242 _P3_3	=	0x00b3
                           0000B4   243 _P3_4	=	0x00b4
                           0000B5   244 _P3_5	=	0x00b5
                           0000B6   245 _P3_6	=	0x00b6
                           0000B7   246 _P3_7	=	0x00b7
                           0000B0   247 _RXD	=	0x00b0
                           0000B1   248 _TXD	=	0x00b1
                           0000B2   249 _INT0	=	0x00b2
                           0000B3   250 _INT1	=	0x00b3
                           0000B4   251 _T0	=	0x00b4
                           0000B5   252 _T1	=	0x00b5
                           0000B6   253 _WR	=	0x00b6
                           0000B7   254 _RD	=	0x00b7
                           0000B8   255 _PX0	=	0x00b8
                           0000B9   256 _PT0	=	0x00b9
                           0000BA   257 _PX1	=	0x00ba
                           0000BB   258 _PT1	=	0x00bb
                           0000BC   259 _PS	=	0x00bc
                           0000BD   260 _PT2	=	0x00bd
                           0000C8   261 _T2CON_0	=	0x00c8
                           0000C9   262 _T2CON_1	=	0x00c9
                           0000CA   263 _T2CON_2	=	0x00ca
                           0000CB   264 _T2CON_3	=	0x00cb
                           0000CC   265 _T2CON_4	=	0x00cc
                           0000CD   266 _T2CON_5	=	0x00cd
                           0000CE   267 _T2CON_6	=	0x00ce
                           0000CF   268 _T2CON_7	=	0x00cf
                           0000C8   269 _CP_RL2	=	0x00c8
                           0000C9   270 _C_T2	=	0x00c9
                           0000CA   271 _TR2	=	0x00ca
                           0000CB   272 _EXEN2	=	0x00cb
                           0000CC   273 _TCLK	=	0x00cc
                           0000CD   274 _RCLK	=	0x00cd
                           0000CE   275 _EXF2	=	0x00ce
                           0000CF   276 _TF2	=	0x00cf
                           0000D0   277 _P	=	0x00d0
                           0000D1   278 _FL	=	0x00d1
                           0000D2   279 _OV	=	0x00d2
                           0000D3   280 _RS0	=	0x00d3
                           0000D4   281 _RS1	=	0x00d4
                           0000D5   282 _F0	=	0x00d5
                           0000D6   283 _AC	=	0x00d6
                           0000D7   284 _CY	=	0x00d7
                                    285 ;--------------------------------------------------------
                                    286 ; overlayable register banks
                                    287 ;--------------------------------------------------------
                                    288 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        289 	.ds 8
                                    290 ;--------------------------------------------------------
                                    291 ; internal ram data
                                    292 ;--------------------------------------------------------
                                    293 	.area DSEG    (DATA)
                                    294 ;--------------------------------------------------------
                                    295 ; overlayable items in internal ram 
                                    296 ;--------------------------------------------------------
                                    297 ;--------------------------------------------------------
                                    298 ; Stack segment in internal ram 
                                    299 ;--------------------------------------------------------
                                    300 	.area	SSEG
      000000                        301 __start__stack:
      000000                        302 	.ds	1
                                    303 
                                    304 ;--------------------------------------------------------
                                    305 ; indirectly addressable internal ram data
                                    306 ;--------------------------------------------------------
                                    307 	.area ISEG    (DATA)
      000000                        308 _giant::
      000000                        309 	.ds 1
                                    310 ;--------------------------------------------------------
                                    311 ; absolute internal ram data
                                    312 ;--------------------------------------------------------
                                    313 	.area IABS    (ABS,DATA)
                                    314 	.area IABS    (ABS,DATA)
                                    315 ;--------------------------------------------------------
                                    316 ; bit data
                                    317 ;--------------------------------------------------------
                                    318 	.area BSEG    (BIT)
                                    319 ;--------------------------------------------------------
                                    320 ; paged external ram data
                                    321 ;--------------------------------------------------------
                                    322 	.area PSEG    (PAG,XDATA)
                                    323 ;--------------------------------------------------------
                                    324 ; external ram data
                                    325 ;--------------------------------------------------------
                                    326 	.area XSEG    (XDATA)
      000000                        327 _s:
      000000                        328 	.ds 12
      00000C                        329 _c:
      00000C                        330 	.ds 16407
                                    331 ;--------------------------------------------------------
                                    332 ; absolute external ram data
                                    333 ;--------------------------------------------------------
                                    334 	.area XABS    (ABS,XDATA)
                                    335 ;--------------------------------------------------------
                                    336 ; external initialized ram data
                                    337 ;--------------------------------------------------------
                                    338 	.area XISEG   (XDATA)
      000000                        339 _deltas:
      000000                        340 	.ds 170
                                    341 	.area HOME    (CODE)
                                    342 	.area GSINIT0 (CODE)
                                    343 	.area GSINIT1 (CODE)
                                    344 	.area GSINIT2 (CODE)
                                    345 	.area GSINIT3 (CODE)
                                    346 	.area GSINIT4 (CODE)
                                    347 	.area GSINIT5 (CODE)
                                    348 	.area GSINIT  (CODE)
                                    349 	.area GSFINAL (CODE)
                                    350 	.area CSEG    (CODE)
                                    351 ;--------------------------------------------------------
                                    352 ; interrupt vector 
                                    353 ;--------------------------------------------------------
                                    354 	.area HOME    (CODE)
      000000                        355 __interrupt_vect:
      000000 02r00r00         [24]  356 	ljmp	__sdcc_gsinit_startup
                                    357 ;--------------------------------------------------------
                                    358 ; global & static initialisations
                                    359 ;--------------------------------------------------------
                                    360 	.area HOME    (CODE)
                                    361 	.area GSINIT  (CODE)
                                    362 	.area GSFINAL (CODE)
                                    363 	.area GSINIT  (CODE)
                                    364 	.globl __sdcc_gsinit_startup
                                    365 	.globl __sdcc_program_startup
                                    366 	.globl __start__stack
                                    367 	.globl __mcs51_genXINIT
                                    368 	.globl __mcs51_genXRAMCLEAR
                                    369 	.globl __mcs51_genRAMCLEAR
                                    370 	.area GSFINAL (CODE)
      000000 02r00r03         [24]  371 	ljmp	__sdcc_program_startup
                                    372 ;--------------------------------------------------------
                                    373 ; Home
                                    374 ;--------------------------------------------------------
                                    375 	.area HOME    (CODE)
                                    376 	.area HOME    (CODE)
      000003                        377 __sdcc_program_startup:
      000003 02r2BrF2         [24]  378 	ljmp	_main
                                    379 ;	return from main will return to caller
                                    380 ;--------------------------------------------------------
                                    381 ; code
                                    382 ;--------------------------------------------------------
                                    383 	.area CSEG    (CODE)
                                    384 ;------------------------------------------------------------
                                    385 ;Allocation info for local variables in function 'accumulate'
                                    386 ;------------------------------------------------------------
                                    387 ;delta                     Allocated to stack - _bp -5
                                    388 ;_ctx                      Allocated to registers r5 r6 r7 
                                    389 ;ctx                       Allocated to stack - _bp +8
                                    390 ;d                         Allocated to stack - _bp +11
                                    391 ;sloc0                     Allocated to stack - _bp +1
                                    392 ;sloc1                     Allocated to stack - _bp +4
                                    393 ;------------------------------------------------------------
                                    394 ;	calc.c:26: static int accumulate(void *_ctx, delta_t *delta) __reentrant {
                                    395 ;	-----------------------------------------
                                    396 ;	 function accumulate
                                    397 ;	-----------------------------------------
      000000                        398 _accumulate:
                           000007   399 	ar7 = 0x07
                           000006   400 	ar6 = 0x06
                           000005   401 	ar5 = 0x05
                           000004   402 	ar4 = 0x04
                           000003   403 	ar3 = 0x03
                           000002   404 	ar2 = 0x02
                           000001   405 	ar1 = 0x01
                           000000   406 	ar0 = 0x00
      000000 C0*00            [24]  407 	push	_bp
      000002 E5 81            [12]  408 	mov	a,sp
      000004 F5*00            [12]  409 	mov	_bp,a
      000006 24 0E            [12]  410 	add	a,#0x0e
      000008 F5 81            [12]  411 	mov	sp,a
      00000A AD 82            [24]  412 	mov	r5,dpl
      00000C AE 83            [24]  413 	mov	r6,dph
      00000E AF F0            [24]  414 	mov	r7,b
                                    415 ;	calc.c:27: calc_ctx_t *ctx = (calc_ctx_t *)_ctx;
      000010 E5*00            [12]  416 	mov	a,_bp
      000012 24 08            [12]  417 	add	a,#0x08
      000014 F8               [12]  418 	mov	r0,a
      000015 A6 05            [24]  419 	mov	@r0,ar5
      000017 08               [12]  420 	inc	r0
      000018 A6 06            [24]  421 	mov	@r0,ar6
      00001A 08               [12]  422 	inc	r0
      00001B A6 07            [24]  423 	mov	@r0,ar7
                                    424 ;	calc.c:32: if (!ctx->acc_valid) {
      00001D E5*00            [12]  425 	mov	a,_bp
      00001F 24 08            [12]  426 	add	a,#0x08
      000021 F8               [12]  427 	mov	r0,a
      000022 74 06            [12]  428 	mov	a,#0x06
      000024 26               [12]  429 	add	a,@r0
      000025 FA               [12]  430 	mov	r2,a
      000026 E4               [12]  431 	clr	a
      000027 08               [12]  432 	inc	r0
      000028 36               [12]  433 	addc	a,@r0
      000029 FB               [12]  434 	mov	r3,a
      00002A 08               [12]  435 	inc	r0
      00002B 86 04            [24]  436 	mov	ar4,@r0
      00002D 8A 82            [24]  437 	mov	dpl,r2
      00002F 8B 83            [24]  438 	mov	dph,r3
      000031 8C F0            [24]  439 	mov	b,r4
      000033 12r00r00         [24]  440 	lcall	__gptrget
      000036 70 31            [24]  441 	jnz	00102$
                                    442 ;	calc.c:33: ctx->acc_valid = 1;
      000038 8A 82            [24]  443 	mov	dpl,r2
      00003A 8B 83            [24]  444 	mov	dph,r3
      00003C 8C F0            [24]  445 	mov	b,r4
      00003E 74 01            [12]  446 	mov	a,#0x01
      000040 12r00r00         [24]  447 	lcall	__gptrput
                                    448 ;	calc.c:34: ctx->acc = 0l;
      000043 E5*00            [12]  449 	mov	a,_bp
      000045 24 08            [12]  450 	add	a,#0x08
      000047 F8               [12]  451 	mov	r0,a
      000048 74 02            [12]  452 	mov	a,#0x02
      00004A 26               [12]  453 	add	a,@r0
      00004B FA               [12]  454 	mov	r2,a
      00004C E4               [12]  455 	clr	a
      00004D 08               [12]  456 	inc	r0
      00004E 36               [12]  457 	addc	a,@r0
      00004F FB               [12]  458 	mov	r3,a
      000050 08               [12]  459 	inc	r0
      000051 86 04            [24]  460 	mov	ar4,@r0
      000053 8A 82            [24]  461 	mov	dpl,r2
      000055 8B 83            [24]  462 	mov	dph,r3
      000057 8C F0            [24]  463 	mov	b,r4
      000059 E4               [12]  464 	clr	a
      00005A 12r00r00         [24]  465 	lcall	__gptrput
      00005D A3               [24]  466 	inc	dptr
      00005E 12r00r00         [24]  467 	lcall	__gptrput
      000061 A3               [24]  468 	inc	dptr
      000062 12r00r00         [24]  469 	lcall	__gptrput
      000065 A3               [24]  470 	inc	dptr
      000066 12r00r00         [24]  471 	lcall	__gptrput
      000069                        472 00102$:
                                    473 ;	calc.c:37: d = strtol(ctx->digit, NULL, ctx->base);
      000069 E5*00            [12]  474 	mov	a,_bp
      00006B 24 08            [12]  475 	add	a,#0x08
      00006D F8               [12]  476 	mov	r0,a
      00006E 86 82            [24]  477 	mov	dpl,@r0
      000070 08               [12]  478 	inc	r0
      000071 86 83            [24]  479 	mov	dph,@r0
      000073 08               [12]  480 	inc	r0
      000074 86 F0            [24]  481 	mov	b,@r0
      000076 12r00r00         [24]  482 	lcall	__gptrget
      000079 FB               [12]  483 	mov	r3,a
      00007A A3               [24]  484 	inc	dptr
      00007B 12r00r00         [24]  485 	lcall	__gptrget
      00007E FC               [12]  486 	mov	r4,a
      00007F E5*00            [12]  487 	mov	a,_bp
      000081 24 08            [12]  488 	add	a,#0x08
      000083 F8               [12]  489 	mov	r0,a
      000084 74 07            [12]  490 	mov	a,#0x07
      000086 26               [12]  491 	add	a,@r0
      000087 FA               [12]  492 	mov	r2,a
      000088 E4               [12]  493 	clr	a
      000089 08               [12]  494 	inc	r0
      00008A 36               [12]  495 	addc	a,@r0
      00008B FE               [12]  496 	mov	r6,a
      00008C 08               [12]  497 	inc	r0
      00008D 86 07            [24]  498 	mov	ar7,@r0
      00008F C0 03            [24]  499 	push	ar3
      000091 C0 04            [24]  500 	push	ar4
      000093 E4               [12]  501 	clr	a
      000094 C0 E0            [24]  502 	push	acc
      000096 C0 E0            [24]  503 	push	acc
      000098 C0 E0            [24]  504 	push	acc
      00009A 8A 82            [24]  505 	mov	dpl,r2
      00009C 8E 83            [24]  506 	mov	dph,r6
      00009E 8F F0            [24]  507 	mov	b,r7
      0000A0 12r00r00         [24]  508 	lcall	_strtol
      0000A3 C8               [12]  509 	xch	a,r0
      0000A4 E5*00            [12]  510 	mov	a,_bp
      0000A6 24 0B            [12]  511 	add	a,#0x0b
      0000A8 C8               [12]  512 	xch	a,r0
      0000A9 A6 82            [24]  513 	mov	@r0,dpl
      0000AB 08               [12]  514 	inc	r0
      0000AC A6 83            [24]  515 	mov	@r0,dph
      0000AE 08               [12]  516 	inc	r0
      0000AF A6 F0            [24]  517 	mov	@r0,b
      0000B1 08               [12]  518 	inc	r0
      0000B2 F6               [12]  519 	mov	@r0,a
      0000B3 E5 81            [12]  520 	mov	a,sp
      0000B5 24 FB            [12]  521 	add	a,#0xfb
      0000B7 F5 81            [12]  522 	mov	sp,a
                                    523 ;	calc.c:38: ctx->acc = ctx->acc * (long)ctx->base + d;
      0000B9 E5*00            [12]  524 	mov	a,_bp
      0000BB 24 08            [12]  525 	add	a,#0x08
      0000BD F8               [12]  526 	mov	r0,a
      0000BE A9*00            [24]  527 	mov	r1,_bp
      0000C0 09               [12]  528 	inc	r1
      0000C1 74 02            [12]  529 	mov	a,#0x02
      0000C3 26               [12]  530 	add	a,@r0
      0000C4 F7               [12]  531 	mov	@r1,a
      0000C5 E4               [12]  532 	clr	a
      0000C6 08               [12]  533 	inc	r0
      0000C7 36               [12]  534 	addc	a,@r0
      0000C8 09               [12]  535 	inc	r1
      0000C9 F7               [12]  536 	mov	@r1,a
      0000CA 08               [12]  537 	inc	r0
      0000CB 09               [12]  538 	inc	r1
      0000CC E6               [12]  539 	mov	a,@r0
      0000CD F7               [12]  540 	mov	@r1,a
      0000CE A8*00            [24]  541 	mov	r0,_bp
      0000D0 08               [12]  542 	inc	r0
      0000D1 86 82            [24]  543 	mov	dpl,@r0
      0000D3 08               [12]  544 	inc	r0
      0000D4 86 83            [24]  545 	mov	dph,@r0
      0000D6 08               [12]  546 	inc	r0
      0000D7 86 F0            [24]  547 	mov	b,@r0
      0000D9 E5*00            [12]  548 	mov	a,_bp
      0000DB 24 04            [12]  549 	add	a,#0x04
      0000DD F9               [12]  550 	mov	r1,a
      0000DE 12r00r00         [24]  551 	lcall	__gptrget
      0000E1 F7               [12]  552 	mov	@r1,a
      0000E2 A3               [24]  553 	inc	dptr
      0000E3 12r00r00         [24]  554 	lcall	__gptrget
      0000E6 09               [12]  555 	inc	r1
      0000E7 F7               [12]  556 	mov	@r1,a
      0000E8 A3               [24]  557 	inc	dptr
      0000E9 12r00r00         [24]  558 	lcall	__gptrget
      0000EC 09               [12]  559 	inc	r1
      0000ED F7               [12]  560 	mov	@r1,a
      0000EE A3               [24]  561 	inc	dptr
      0000EF 12r00r00         [24]  562 	lcall	__gptrget
      0000F2 09               [12]  563 	inc	r1
      0000F3 F7               [12]  564 	mov	@r1,a
      0000F4 E5*00            [12]  565 	mov	a,_bp
      0000F6 24 08            [12]  566 	add	a,#0x08
      0000F8 F8               [12]  567 	mov	r0,a
      0000F9 86 82            [24]  568 	mov	dpl,@r0
      0000FB 08               [12]  569 	inc	r0
      0000FC 86 83            [24]  570 	mov	dph,@r0
      0000FE 08               [12]  571 	inc	r0
      0000FF 86 F0            [24]  572 	mov	b,@r0
      000101 12r00r00         [24]  573 	lcall	__gptrget
      000104 FA               [12]  574 	mov	r2,a
      000105 A3               [24]  575 	inc	dptr
      000106 12r00r00         [24]  576 	lcall	__gptrget
      000109 FB               [12]  577 	mov	r3,a
      00010A 33               [12]  578 	rlc	a
      00010B 95 E0            [12]  579 	subb	a,acc
      00010D FE               [12]  580 	mov	r6,a
      00010E FF               [12]  581 	mov	r7,a
      00010F C0 02            [24]  582 	push	ar2
      000111 C0 03            [24]  583 	push	ar3
      000113 C0 06            [24]  584 	push	ar6
      000115 C0 07            [24]  585 	push	ar7
      000117 E5*00            [12]  586 	mov	a,_bp
      000119 24 04            [12]  587 	add	a,#0x04
      00011B F8               [12]  588 	mov	r0,a
      00011C 86 82            [24]  589 	mov	dpl,@r0
      00011E 08               [12]  590 	inc	r0
      00011F 86 83            [24]  591 	mov	dph,@r0
      000121 08               [12]  592 	inc	r0
      000122 86 F0            [24]  593 	mov	b,@r0
      000124 08               [12]  594 	inc	r0
      000125 E6               [12]  595 	mov	a,@r0
      000126 12r00r00         [24]  596 	lcall	__mullong
      000129 AC 82            [24]  597 	mov	r4,dpl
      00012B AD 83            [24]  598 	mov	r5,dph
      00012D AE F0            [24]  599 	mov	r6,b
      00012F FF               [12]  600 	mov	r7,a
      000130 E5 81            [12]  601 	mov	a,sp
      000132 24 FC            [12]  602 	add	a,#0xfc
      000134 F5 81            [12]  603 	mov	sp,a
      000136 E5*00            [12]  604 	mov	a,_bp
      000138 24 0B            [12]  605 	add	a,#0x0b
      00013A F8               [12]  606 	mov	r0,a
      00013B E6               [12]  607 	mov	a,@r0
      00013C 2C               [12]  608 	add	a,r4
      00013D FC               [12]  609 	mov	r4,a
      00013E 08               [12]  610 	inc	r0
      00013F E6               [12]  611 	mov	a,@r0
      000140 3D               [12]  612 	addc	a,r5
      000141 FD               [12]  613 	mov	r5,a
      000142 08               [12]  614 	inc	r0
      000143 E6               [12]  615 	mov	a,@r0
      000144 3E               [12]  616 	addc	a,r6
      000145 FE               [12]  617 	mov	r6,a
      000146 08               [12]  618 	inc	r0
      000147 E6               [12]  619 	mov	a,@r0
      000148 3F               [12]  620 	addc	a,r7
      000149 FF               [12]  621 	mov	r7,a
      00014A A8*00            [24]  622 	mov	r0,_bp
      00014C 08               [12]  623 	inc	r0
      00014D 86 82            [24]  624 	mov	dpl,@r0
      00014F 08               [12]  625 	inc	r0
      000150 86 83            [24]  626 	mov	dph,@r0
      000152 08               [12]  627 	inc	r0
      000153 86 F0            [24]  628 	mov	b,@r0
      000155 EC               [12]  629 	mov	a,r4
      000156 12r00r00         [24]  630 	lcall	__gptrput
      000159 A3               [24]  631 	inc	dptr
      00015A ED               [12]  632 	mov	a,r5
      00015B 12r00r00         [24]  633 	lcall	__gptrput
      00015E A3               [24]  634 	inc	dptr
      00015F EE               [12]  635 	mov	a,r6
      000160 12r00r00         [24]  636 	lcall	__gptrput
      000163 A3               [24]  637 	inc	dptr
      000164 EF               [12]  638 	mov	a,r7
      000165 12r00r00         [24]  639 	lcall	__gptrput
                                    640 ;	calc.c:40: return 1;
      000168 90 00 01         [24]  641 	mov	dptr,#0x0001
                                    642 ;	calc.c:41: }
      00016B 85*00 81         [24]  643 	mov	sp,_bp
      00016E D0*00            [24]  644 	pop	_bp
      000170 22               [24]  645 	ret
                                    646 ;------------------------------------------------------------
                                    647 ;Allocation info for local variables in function 'dump_pop'
                                    648 ;------------------------------------------------------------
                                    649 ;delta                     Allocated to stack - _bp -5
                                    650 ;_ctx                      Allocated to registers r5 r6 r7 
                                    651 ;ctx                       Allocated to stack - _bp +11
                                    652 ;d                         Allocated to stack - _bp +14
                                    653 ;r                         Allocated to registers r5 r6 
                                    654 ;__1966080001              Allocated to stack - _bp +18
                                    655 ;d                         Allocated to registers r2 r3 r4 r5 
                                    656 ;__3276800003              Allocated to stack - _bp +18
                                    657 ;d                         Allocated to registers r2 r3 r4 r7 
                                    658 ;sloc0                     Allocated to stack - _bp +1
                                    659 ;sloc1                     Allocated to stack - _bp +4
                                    660 ;sloc2                     Allocated to stack - _bp +7
                                    661 ;sloc3                     Allocated to stack - _bp +8
                                    662 ;------------------------------------------------------------
                                    663 ;	calc.c:43: static int dump_pop(void *_ctx, delta_t *delta) __reentrant {
                                    664 ;	-----------------------------------------
                                    665 ;	 function dump_pop
                                    666 ;	-----------------------------------------
      000171                        667 _dump_pop:
      000171 C0*00            [24]  668 	push	_bp
      000173 E5 81            [12]  669 	mov	a,sp
      000175 F5*00            [12]  670 	mov	_bp,a
      000177 24 15            [12]  671 	add	a,#0x15
      000179 F5 81            [12]  672 	mov	sp,a
      00017B AD 82            [24]  673 	mov	r5,dpl
      00017D AE 83            [24]  674 	mov	r6,dph
      00017F AF F0            [24]  675 	mov	r7,b
                                    676 ;	calc.c:44: calc_ctx_t *ctx = (calc_ctx_t *)_ctx;
      000181 E5*00            [12]  677 	mov	a,_bp
      000183 24 0B            [12]  678 	add	a,#0x0b
      000185 F8               [12]  679 	mov	r0,a
      000186 A6 05            [24]  680 	mov	@r0,ar5
      000188 08               [12]  681 	inc	r0
      000189 A6 06            [24]  682 	mov	@r0,ar6
      00018B 08               [12]  683 	inc	r0
      00018C A6 07            [24]  684 	mov	@r0,ar7
                                    685 ;	calc.c:48: if (delta->event == EVENT_TERM) printstr("\r\n");
      00018E E5*00            [12]  686 	mov	a,_bp
      000190 24 FB            [12]  687 	add	a,#0xfb
      000192 F8               [12]  688 	mov	r0,a
      000193 86 02            [24]  689 	mov	ar2,@r0
      000195 08               [12]  690 	inc	r0
      000196 86 03            [24]  691 	mov	ar3,@r0
      000198 08               [12]  692 	inc	r0
      000199 86 04            [24]  693 	mov	ar4,@r0
      00019B 74 02            [12]  694 	mov	a,#0x02
      00019D 2A               [12]  695 	add	a,r2
      00019E FA               [12]  696 	mov	r2,a
      00019F E4               [12]  697 	clr	a
      0001A0 3B               [12]  698 	addc	a,r3
      0001A1 FB               [12]  699 	mov	r3,a
      0001A2 8A 82            [24]  700 	mov	dpl,r2
      0001A4 8B 83            [24]  701 	mov	dph,r3
      0001A6 8C F0            [24]  702 	mov	b,r4
      0001A8 12r00r00         [24]  703 	lcall	__gptrget
      0001AB FE               [12]  704 	mov	r6,a
      0001AC A3               [24]  705 	inc	dptr
      0001AD 12r00r00         [24]  706 	lcall	__gptrget
      0001B0 FF               [12]  707 	mov	r7,a
      0001B1 BE 08 18         [24]  708 	cjne	r6,#0x08,00102$
      0001B4 BF 00 15         [24]  709 	cjne	r7,#0x00,00102$
      0001B7 90r00r10         [24]  710 	mov	dptr,#___str_2
      0001BA 75 F0 80         [24]  711 	mov	b,#0x80
      0001BD C0 04            [24]  712 	push	ar4
      0001BF C0 03            [24]  713 	push	ar3
      0001C1 C0 02            [24]  714 	push	ar2
      0001C3 12r00r00         [24]  715 	lcall	_printstr
      0001C6 D0 02            [24]  716 	pop	ar2
      0001C8 D0 03            [24]  717 	pop	ar3
      0001CA D0 04            [24]  718 	pop	ar4
      0001CC                        719 00102$:
                                    720 ;	calc.c:49: r = stack_pop(ctx->ps, &d);
      0001CC C0 02            [24]  721 	push	ar2
      0001CE C0 03            [24]  722 	push	ar3
      0001D0 C0 04            [24]  723 	push	ar4
      0001D2 E5*00            [12]  724 	mov	a,_bp
      0001D4 24 0E            [12]  725 	add	a,#0x0e
      0001D6 FF               [12]  726 	mov	r7,a
      0001D7 E5*00            [12]  727 	mov	a,_bp
      0001D9 24 04            [12]  728 	add	a,#0x04
      0001DB F8               [12]  729 	mov	r0,a
      0001DC A6 07            [24]  730 	mov	@r0,ar7
      0001DE 08               [12]  731 	inc	r0
      0001DF 76 00            [12]  732 	mov	@r0,#0x00
      0001E1 08               [12]  733 	inc	r0
      0001E2 76 40            [12]  734 	mov	@r0,#0x40
      0001E4 E5*00            [12]  735 	mov	a,_bp
      0001E6 24 0B            [12]  736 	add	a,#0x0b
      0001E8 F8               [12]  737 	mov	r0,a
      0001E9 A9*00            [24]  738 	mov	r1,_bp
      0001EB 09               [12]  739 	inc	r1
      0001EC 74 11            [12]  740 	mov	a,#0x11
      0001EE 26               [12]  741 	add	a,@r0
      0001EF F7               [12]  742 	mov	@r1,a
      0001F0 74 40            [12]  743 	mov	a,#0x40
      0001F2 08               [12]  744 	inc	r0
      0001F3 36               [12]  745 	addc	a,@r0
      0001F4 09               [12]  746 	inc	r1
      0001F5 F7               [12]  747 	mov	@r1,a
      0001F6 08               [12]  748 	inc	r0
      0001F7 09               [12]  749 	inc	r1
      0001F8 E6               [12]  750 	mov	a,@r0
      0001F9 F7               [12]  751 	mov	@r1,a
      0001FA A8*00            [24]  752 	mov	r0,_bp
      0001FC 08               [12]  753 	inc	r0
      0001FD 86 82            [24]  754 	mov	dpl,@r0
      0001FF 08               [12]  755 	inc	r0
      000200 86 83            [24]  756 	mov	dph,@r0
      000202 08               [12]  757 	inc	r0
      000203 86 F0            [24]  758 	mov	b,@r0
      000205 12r00r00         [24]  759 	lcall	__gptrget
      000208 FA               [12]  760 	mov	r2,a
      000209 A3               [24]  761 	inc	dptr
      00020A 12r00r00         [24]  762 	lcall	__gptrget
      00020D FB               [12]  763 	mov	r3,a
      00020E A3               [24]  764 	inc	dptr
      00020F 12r00r00         [24]  765 	lcall	__gptrget
      000212 FE               [12]  766 	mov	r6,a
      000213 C0 07            [24]  767 	push	ar7
      000215 C0 04            [24]  768 	push	ar4
      000217 C0 03            [24]  769 	push	ar3
      000219 C0 02            [24]  770 	push	ar2
      00021B E5*00            [12]  771 	mov	a,_bp
      00021D 24 04            [12]  772 	add	a,#0x04
      00021F F8               [12]  773 	mov	r0,a
      000220 E6               [12]  774 	mov	a,@r0
      000221 C0 E0            [24]  775 	push	acc
      000223 08               [12]  776 	inc	r0
      000224 E6               [12]  777 	mov	a,@r0
      000225 C0 E0            [24]  778 	push	acc
      000227 08               [12]  779 	inc	r0
      000228 E6               [12]  780 	mov	a,@r0
      000229 C0 E0            [24]  781 	push	acc
      00022B 8A 82            [24]  782 	mov	dpl,r2
      00022D 8B 83            [24]  783 	mov	dph,r3
      00022F 8E F0            [24]  784 	mov	b,r6
      000231 12r00r00         [24]  785 	lcall	_stack_pop
      000234 AE 82            [24]  786 	mov	r6,dpl
      000236 AD 83            [24]  787 	mov	r5,dph
      000238 15 81            [12]  788 	dec	sp
      00023A 15 81            [12]  789 	dec	sp
      00023C 15 81            [12]  790 	dec	sp
      00023E D0 02            [24]  791 	pop	ar2
      000240 D0 03            [24]  792 	pop	ar3
      000242 D0 04            [24]  793 	pop	ar4
      000244 D0 07            [24]  794 	pop	ar7
                                    795 ;	calc.c:50: if (!r) {
      000246 D0 04            [24]  796 	pop	ar4
      000248 D0 03            [24]  797 	pop	ar3
      00024A D0 02            [24]  798 	pop	ar2
      00024C EE               [12]  799 	mov	a,r6
      00024D 4D               [12]  800 	orl	a,r5
      00024E 70 34            [24]  801 	jnz	00125$
                                    802 ;	calc.c:51: if (delta->event != EVENT_TERM) printstr("stack underflow\r\n");
      000250 8A 82            [24]  803 	mov	dpl,r2
      000252 8B 83            [24]  804 	mov	dph,r3
      000254 8C F0            [24]  805 	mov	b,r4
      000256 12r00r00         [24]  806 	lcall	__gptrget
      000259 FD               [12]  807 	mov	r5,a
      00025A A3               [24]  808 	inc	dptr
      00025B 12r00r00         [24]  809 	lcall	__gptrget
      00025E FE               [12]  810 	mov	r6,a
      00025F BD 08 06         [24]  811 	cjne	r5,#0x08,00164$
      000262 BE 00 03         [24]  812 	cjne	r6,#0x00,00164$
      000265 02r03rD9         [24]  813 	ljmp	00110$
      000268                        814 00164$:
      000268 90r00r13         [24]  815 	mov	dptr,#___str_3
      00026B 75 F0 80         [24]  816 	mov	b,#0x80
      00026E C0 07            [24]  817 	push	ar7
      000270 C0 04            [24]  818 	push	ar4
      000272 C0 03            [24]  819 	push	ar3
      000274 C0 02            [24]  820 	push	ar2
      000276 12r00r00         [24]  821 	lcall	_printstr
      000279 D0 02            [24]  822 	pop	ar2
      00027B D0 03            [24]  823 	pop	ar3
      00027D D0 04            [24]  824 	pop	ar4
      00027F D0 07            [24]  825 	pop	ar7
      000281 02r03rD9         [24]  826 	ljmp	00110$
                                    827 ;	calc.c:52: } else while (r > 0) {
      000284                        828 00125$:
      000284 E5*00            [12]  829 	mov	a,_bp
      000286 24 07            [12]  830 	add	a,#0x07
      000288 F8               [12]  831 	mov	r0,a
      000289 A6 07            [24]  832 	mov	@r0,ar7
      00028B                        833 00105$:
      00028B C3               [12]  834 	clr	c
      00028C E4               [12]  835 	clr	a
      00028D 9E               [12]  836 	subb	a,r6
      00028E 74 80            [12]  837 	mov	a,#(0x00 ^ 0x80)
      000290 8D F0            [24]  838 	mov	b,r5
      000292 63 F0 80         [24]  839 	xrl	b,#0x80
      000295 95 F0            [12]  840 	subb	a,b
      000297 40 03            [24]  841 	jc	00165$
      000299 02r03rD9         [24]  842 	ljmp	00110$
      00029C                        843 00165$:
                                    844 ;	calc.c:53: printstr("PSPA\t");
      00029C C0 02            [24]  845 	push	ar2
      00029E C0 03            [24]  846 	push	ar3
      0002A0 C0 04            [24]  847 	push	ar4
      0002A2 90r00r25         [24]  848 	mov	dptr,#___str_4
      0002A5 75 F0 80         [24]  849 	mov	b,#0x80
      0002A8 C0 07            [24]  850 	push	ar7
      0002AA C0 04            [24]  851 	push	ar4
      0002AC C0 03            [24]  852 	push	ar3
      0002AE C0 02            [24]  853 	push	ar2
      0002B0 12r00r00         [24]  854 	lcall	_printstr
      0002B3 D0 02            [24]  855 	pop	ar2
      0002B5 D0 03            [24]  856 	pop	ar3
      0002B7 D0 04            [24]  857 	pop	ar4
                                    858 ;	calc.c:54: printall(d);
      0002B9 E5*00            [12]  859 	mov	a,_bp
      0002BB 24 0E            [12]  860 	add	a,#0x0e
      0002BD F8               [12]  861 	mov	r0,a
      0002BE E5*00            [12]  862 	mov	a,_bp
      0002C0 24 12            [12]  863 	add	a,#0x12
      0002C2 F9               [12]  864 	mov	r1,a
      0002C3 E6               [12]  865 	mov	a,@r0
      0002C4 F7               [12]  866 	mov	@r1,a
      0002C5 08               [12]  867 	inc	r0
      0002C6 09               [12]  868 	inc	r1
      0002C7 E6               [12]  869 	mov	a,@r0
      0002C8 F7               [12]  870 	mov	@r1,a
      0002C9 08               [12]  871 	inc	r0
      0002CA 09               [12]  872 	inc	r1
      0002CB E6               [12]  873 	mov	a,@r0
      0002CC F7               [12]  874 	mov	@r1,a
      0002CD 08               [12]  875 	inc	r0
      0002CE 09               [12]  876 	inc	r1
      0002CF E6               [12]  877 	mov	a,@r0
      0002D0 F7               [12]  878 	mov	@r1,a
      0002D1 E5*00            [12]  879 	mov	a,_bp
      0002D3 24 12            [12]  880 	add	a,#0x12
      0002D5 F8               [12]  881 	mov	r0,a
      0002D6 86 02            [24]  882 	mov	ar2,@r0
      0002D8 08               [12]  883 	inc	r0
      0002D9 86 03            [24]  884 	mov	ar3,@r0
      0002DB 08               [12]  885 	inc	r0
      0002DC 86 04            [24]  886 	mov	ar4,@r0
      0002DE 08               [12]  887 	inc	r0
      0002DF 86 05            [24]  888 	mov	ar5,@r0
                                    889 ;	calc.c:18: print32x(d);
      0002E1 E5*00            [12]  890 	mov	a,_bp
      0002E3 24 12            [12]  891 	add	a,#0x12
      0002E5 F8               [12]  892 	mov	r0,a
      0002E6 86 82            [24]  893 	mov	dpl,@r0
      0002E8 08               [12]  894 	inc	r0
      0002E9 86 83            [24]  895 	mov	dph,@r0
      0002EB 08               [12]  896 	inc	r0
      0002EC 86 F0            [24]  897 	mov	b,@r0
      0002EE 08               [12]  898 	inc	r0
      0002EF E6               [12]  899 	mov	a,@r0
      0002F0 C0 05            [24]  900 	push	ar5
      0002F2 C0 04            [24]  901 	push	ar4
      0002F4 C0 03            [24]  902 	push	ar3
      0002F6 C0 02            [24]  903 	push	ar2
      0002F8 12r00r00         [24]  904 	lcall	_print32x
      0002FB D0 02            [24]  905 	pop	ar2
      0002FD D0 03            [24]  906 	pop	ar3
      0002FF D0 04            [24]  907 	pop	ar4
      000301 D0 05            [24]  908 	pop	ar5
                                    909 ;	calc.c:19: printf("% 11ld\t", d);
      000303 C0 05            [24]  910 	push	ar5
      000305 C0 04            [24]  911 	push	ar4
      000307 C0 03            [24]  912 	push	ar3
      000309 C0 02            [24]  913 	push	ar2
      00030B C0 02            [24]  914 	push	ar2
      00030D C0 03            [24]  915 	push	ar3
      00030F C0 04            [24]  916 	push	ar4
      000311 C0 05            [24]  917 	push	ar5
      000313 74r00            [12]  918 	mov	a,#___str_0
      000315 C0 E0            [24]  919 	push	acc
      000317 74s00            [12]  920 	mov	a,#(___str_0 >> 8)
      000319 C0 E0            [24]  921 	push	acc
      00031B 74 80            [12]  922 	mov	a,#0x80
      00031D C0 E0            [24]  923 	push	acc
      00031F 12r00r00         [24]  924 	lcall	_printf
      000322 E5 81            [12]  925 	mov	a,sp
      000324 24 F9            [12]  926 	add	a,#0xf9
      000326 F5 81            [12]  927 	mov	sp,a
      000328 D0 02            [24]  928 	pop	ar2
      00032A D0 03            [24]  929 	pop	ar3
      00032C D0 04            [24]  930 	pop	ar4
      00032E D0 05            [24]  931 	pop	ar5
                                    932 ;	calc.c:20: printf("%011lo\t", d);
      000330 C0 05            [24]  933 	push	ar5
      000332 C0 04            [24]  934 	push	ar4
      000334 C0 03            [24]  935 	push	ar3
      000336 C0 02            [24]  936 	push	ar2
      000338 C0 02            [24]  937 	push	ar2
      00033A C0 03            [24]  938 	push	ar3
      00033C C0 04            [24]  939 	push	ar4
      00033E C0 05            [24]  940 	push	ar5
      000340 74r08            [12]  941 	mov	a,#___str_1
      000342 C0 E0            [24]  942 	push	acc
      000344 74s00            [12]  943 	mov	a,#(___str_1 >> 8)
      000346 C0 E0            [24]  944 	push	acc
      000348 74 80            [12]  945 	mov	a,#0x80
      00034A C0 E0            [24]  946 	push	acc
      00034C 12r00r00         [24]  947 	lcall	_printf
      00034F E5 81            [12]  948 	mov	a,sp
      000351 24 F9            [12]  949 	add	a,#0xf9
      000353 F5 81            [12]  950 	mov	sp,a
      000355 D0 02            [24]  951 	pop	ar2
      000357 D0 03            [24]  952 	pop	ar3
      000359 D0 04            [24]  953 	pop	ar4
      00035B D0 05            [24]  954 	pop	ar5
                                    955 ;	calc.c:21: print32bin(d);
      00035D 8A 82            [24]  956 	mov	dpl,r2
      00035F 8B 83            [24]  957 	mov	dph,r3
      000361 8C F0            [24]  958 	mov	b,r4
      000363 ED               [12]  959 	mov	a,r5
      000364 C0 04            [24]  960 	push	ar4
      000366 C0 03            [24]  961 	push	ar3
      000368 C0 02            [24]  962 	push	ar2
      00036A 12r00r00         [24]  963 	lcall	_print32bin
                                    964 ;	calc.c:55: printstr("\r\n");
      00036D 90r00r10         [24]  965 	mov	dptr,#___str_2
      000370 75 F0 80         [24]  966 	mov	b,#0x80
      000373 12r00r00         [24]  967 	lcall	_printstr
      000376 D0 02            [24]  968 	pop	ar2
                                    969 ;	calc.c:56: r = stack_pop(ctx->ps, &d);
      000378 E5*00            [12]  970 	mov	a,_bp
      00037A 24 07            [12]  971 	add	a,#0x07
      00037C F8               [12]  972 	mov	r0,a
      00037D E5*00            [12]  973 	mov	a,_bp
      00037F 24 08            [12]  974 	add	a,#0x08
      000381 F9               [12]  975 	mov	r1,a
      000382 E6               [12]  976 	mov	a,@r0
      000383 F7               [12]  977 	mov	@r1,a
      000384 09               [12]  978 	inc	r1
      000385 77 00            [12]  979 	mov	@r1,#0x00
      000387 09               [12]  980 	inc	r1
      000388 77 40            [12]  981 	mov	@r1,#0x40
      00038A A8*00            [24]  982 	mov	r0,_bp
      00038C 08               [12]  983 	inc	r0
      00038D 86 82            [24]  984 	mov	dpl,@r0
      00038F 08               [12]  985 	inc	r0
      000390 86 83            [24]  986 	mov	dph,@r0
      000392 08               [12]  987 	inc	r0
      000393 86 F0            [24]  988 	mov	b,@r0
      000395 12r00r00         [24]  989 	lcall	__gptrget
      000398 FA               [12]  990 	mov	r2,a
      000399 A3               [24]  991 	inc	dptr
      00039A 12r00r00         [24]  992 	lcall	__gptrget
      00039D FD               [12]  993 	mov	r5,a
      00039E A3               [24]  994 	inc	dptr
      00039F 12r00r00         [24]  995 	lcall	__gptrget
      0003A2 FE               [12]  996 	mov	r6,a
      0003A3 C0 02            [24]  997 	push	ar2
      0003A5 E5*00            [12]  998 	mov	a,_bp
      0003A7 24 08            [12]  999 	add	a,#0x08
      0003A9 F8               [12] 1000 	mov	r0,a
      0003AA E6               [12] 1001 	mov	a,@r0
      0003AB C0 E0            [24] 1002 	push	acc
      0003AD 08               [12] 1003 	inc	r0
      0003AE E6               [12] 1004 	mov	a,@r0
      0003AF C0 E0            [24] 1005 	push	acc
      0003B1 08               [12] 1006 	inc	r0
      0003B2 E6               [12] 1007 	mov	a,@r0
      0003B3 C0 E0            [24] 1008 	push	acc
      0003B5 8A 82            [24] 1009 	mov	dpl,r2
      0003B7 8D 83            [24] 1010 	mov	dph,r5
      0003B9 8E F0            [24] 1011 	mov	b,r6
      0003BB 12r00r00         [24] 1012 	lcall	_stack_pop
      0003BE AE 82            [24] 1013 	mov	r6,dpl
      0003C0 AD 83            [24] 1014 	mov	r5,dph
      0003C2 15 81            [12] 1015 	dec	sp
      0003C4 15 81            [12] 1016 	dec	sp
      0003C6 15 81            [12] 1017 	dec	sp
      0003C8 D0 02            [24] 1018 	pop	ar2
      0003CA D0 03            [24] 1019 	pop	ar3
      0003CC D0 04            [24] 1020 	pop	ar4
      0003CE D0 07            [24] 1021 	pop	ar7
      0003D0 D0 04            [24] 1022 	pop	ar4
      0003D2 D0 03            [24] 1023 	pop	ar3
      0003D4 D0 02            [24] 1024 	pop	ar2
      0003D6 02r02r8B         [24] 1025 	ljmp	00105$
      0003D9                       1026 00110$:
                                   1027 ;	calc.c:59: if (delta->event == EVENT_TERM) {
      0003D9 8A 82            [24] 1028 	mov	dpl,r2
      0003DB 8B 83            [24] 1029 	mov	dph,r3
      0003DD 8C F0            [24] 1030 	mov	b,r4
      0003DF 12r00r00         [24] 1031 	lcall	__gptrget
      0003E2 FA               [12] 1032 	mov	r2,a
      0003E3 A3               [24] 1033 	inc	dptr
      0003E4 12r00r00         [24] 1034 	lcall	__gptrget
      0003E7 FB               [12] 1035 	mov	r3,a
      0003E8 BA 08 05         [24] 1036 	cjne	r2,#0x08,00166$
      0003EB BB 00 02         [24] 1037 	cjne	r3,#0x00,00166$
      0003EE 80 03            [24] 1038 	sjmp	00167$
      0003F0                       1039 00166$:
      0003F0 02r05r87         [24] 1040 	ljmp	00113$
      0003F3                       1041 00167$:
                                   1042 ;	calc.c:60: printstr("\r\n");
      0003F3 90r00r10         [24] 1043 	mov	dptr,#___str_2
      0003F6 75 F0 80         [24] 1044 	mov	b,#0x80
      0003F9 C0 07            [24] 1045 	push	ar7
      0003FB 12r00r00         [24] 1046 	lcall	_printstr
      0003FE D0 07            [24] 1047 	pop	ar7
                                   1048 ;	calc.c:61: for (r = stack_pop(ctx->ss, &d); r > 0; r = stack_pop(ctx->ss, &d)) {
      000400 8F 06            [24] 1049 	mov	ar6,r7
      000402 E5*00            [12] 1050 	mov	a,_bp
      000404 24 04            [12] 1051 	add	a,#0x04
      000406 F8               [12] 1052 	mov	r0,a
      000407 A6 06            [24] 1053 	mov	@r0,ar6
      000409 08               [12] 1054 	inc	r0
      00040A 76 00            [12] 1055 	mov	@r0,#0x00
      00040C 08               [12] 1056 	inc	r0
      00040D 76 40            [12] 1057 	mov	@r0,#0x40
      00040F E5*00            [12] 1058 	mov	a,_bp
      000411 24 0B            [12] 1059 	add	a,#0x0b
      000413 F8               [12] 1060 	mov	r0,a
      000414 E5*00            [12] 1061 	mov	a,_bp
      000416 24 08            [12] 1062 	add	a,#0x08
      000418 F9               [12] 1063 	mov	r1,a
      000419 74 14            [12] 1064 	mov	a,#0x14
      00041B 26               [12] 1065 	add	a,@r0
      00041C F7               [12] 1066 	mov	@r1,a
      00041D 74 40            [12] 1067 	mov	a,#0x40
      00041F 08               [12] 1068 	inc	r0
      000420 36               [12] 1069 	addc	a,@r0
      000421 09               [12] 1070 	inc	r1
      000422 F7               [12] 1071 	mov	@r1,a
      000423 08               [12] 1072 	inc	r0
      000424 09               [12] 1073 	inc	r1
      000425 E6               [12] 1074 	mov	a,@r0
      000426 F7               [12] 1075 	mov	@r1,a
      000427 E5*00            [12] 1076 	mov	a,_bp
      000429 24 08            [12] 1077 	add	a,#0x08
      00042B F8               [12] 1078 	mov	r0,a
      00042C 86 82            [24] 1079 	mov	dpl,@r0
      00042E 08               [12] 1080 	inc	r0
      00042F 86 83            [24] 1081 	mov	dph,@r0
      000431 08               [12] 1082 	inc	r0
      000432 86 F0            [24] 1083 	mov	b,@r0
      000434 12r00r00         [24] 1084 	lcall	__gptrget
      000437 FA               [12] 1085 	mov	r2,a
      000438 A3               [24] 1086 	inc	dptr
      000439 12r00r00         [24] 1087 	lcall	__gptrget
      00043C FB               [12] 1088 	mov	r3,a
      00043D A3               [24] 1089 	inc	dptr
      00043E 12r00r00         [24] 1090 	lcall	__gptrget
      000441 FE               [12] 1091 	mov	r6,a
      000442 C0 07            [24] 1092 	push	ar7
      000444 E5*00            [12] 1093 	mov	a,_bp
      000446 24 04            [12] 1094 	add	a,#0x04
      000448 F8               [12] 1095 	mov	r0,a
      000449 E6               [12] 1096 	mov	a,@r0
      00044A C0 E0            [24] 1097 	push	acc
      00044C 08               [12] 1098 	inc	r0
      00044D E6               [12] 1099 	mov	a,@r0
      00044E C0 E0            [24] 1100 	push	acc
      000450 08               [12] 1101 	inc	r0
      000451 E6               [12] 1102 	mov	a,@r0
      000452 C0 E0            [24] 1103 	push	acc
      000454 8A 82            [24] 1104 	mov	dpl,r2
      000456 8B 83            [24] 1105 	mov	dph,r3
      000458 8E F0            [24] 1106 	mov	b,r6
      00045A 12r00r00         [24] 1107 	lcall	_stack_pop
      00045D AD 82            [24] 1108 	mov	r5,dpl
      00045F AE 83            [24] 1109 	mov	r6,dph
      000461 15 81            [12] 1110 	dec	sp
      000463 15 81            [12] 1111 	dec	sp
      000465 15 81            [12] 1112 	dec	sp
      000467 D0 07            [24] 1113 	pop	ar7
      000469 E5*00            [12] 1114 	mov	a,_bp
      00046B 24 07            [12] 1115 	add	a,#0x07
      00046D F8               [12] 1116 	mov	r0,a
      00046E A6 07            [24] 1117 	mov	@r0,ar7
      000470                       1118 00117$:
      000470 C3               [12] 1119 	clr	c
      000471 E4               [12] 1120 	clr	a
      000472 9D               [12] 1121 	subb	a,r5
      000473 74 80            [12] 1122 	mov	a,#(0x00 ^ 0x80)
      000475 8E F0            [24] 1123 	mov	b,r6
      000477 63 F0 80         [24] 1124 	xrl	b,#0x80
      00047A 95 F0            [12] 1125 	subb	a,b
      00047C 40 03            [24] 1126 	jc	00168$
      00047E 02r05r87         [24] 1127 	ljmp	00113$
      000481                       1128 00168$:
                                   1129 ;	calc.c:62: printstr("SSPA\t");
      000481 90r00r2B         [24] 1130 	mov	dptr,#___str_5
      000484 75 F0 80         [24] 1131 	mov	b,#0x80
      000487 12r00r00         [24] 1132 	lcall	_printstr
                                   1133 ;	calc.c:63: printall(d);
      00048A E5*00            [12] 1134 	mov	a,_bp
      00048C 24 0E            [12] 1135 	add	a,#0x0e
      00048E F8               [12] 1136 	mov	r0,a
      00048F E5*00            [12] 1137 	mov	a,_bp
      000491 24 12            [12] 1138 	add	a,#0x12
      000493 F9               [12] 1139 	mov	r1,a
      000494 E6               [12] 1140 	mov	a,@r0
      000495 F7               [12] 1141 	mov	@r1,a
      000496 08               [12] 1142 	inc	r0
      000497 09               [12] 1143 	inc	r1
      000498 E6               [12] 1144 	mov	a,@r0
      000499 F7               [12] 1145 	mov	@r1,a
      00049A 08               [12] 1146 	inc	r0
      00049B 09               [12] 1147 	inc	r1
      00049C E6               [12] 1148 	mov	a,@r0
      00049D F7               [12] 1149 	mov	@r1,a
      00049E 08               [12] 1150 	inc	r0
      00049F 09               [12] 1151 	inc	r1
      0004A0 E6               [12] 1152 	mov	a,@r0
      0004A1 F7               [12] 1153 	mov	@r1,a
      0004A2 E5*00            [12] 1154 	mov	a,_bp
      0004A4 24 12            [12] 1155 	add	a,#0x12
      0004A6 F8               [12] 1156 	mov	r0,a
      0004A7 86 02            [24] 1157 	mov	ar2,@r0
      0004A9 08               [12] 1158 	inc	r0
      0004AA 86 03            [24] 1159 	mov	ar3,@r0
      0004AC 08               [12] 1160 	inc	r0
      0004AD 86 04            [24] 1161 	mov	ar4,@r0
      0004AF 08               [12] 1162 	inc	r0
      0004B0 86 07            [24] 1163 	mov	ar7,@r0
                                   1164 ;	calc.c:18: print32x(d);
      0004B2 E5*00            [12] 1165 	mov	a,_bp
      0004B4 24 12            [12] 1166 	add	a,#0x12
      0004B6 F8               [12] 1167 	mov	r0,a
      0004B7 86 82            [24] 1168 	mov	dpl,@r0
      0004B9 08               [12] 1169 	inc	r0
      0004BA 86 83            [24] 1170 	mov	dph,@r0
      0004BC 08               [12] 1171 	inc	r0
      0004BD 86 F0            [24] 1172 	mov	b,@r0
      0004BF 08               [12] 1173 	inc	r0
      0004C0 E6               [12] 1174 	mov	a,@r0
      0004C1 C0 07            [24] 1175 	push	ar7
      0004C3 C0 04            [24] 1176 	push	ar4
      0004C5 C0 03            [24] 1177 	push	ar3
      0004C7 C0 02            [24] 1178 	push	ar2
      0004C9 12r00r00         [24] 1179 	lcall	_print32x
      0004CC D0 02            [24] 1180 	pop	ar2
      0004CE D0 03            [24] 1181 	pop	ar3
      0004D0 D0 04            [24] 1182 	pop	ar4
      0004D2 D0 07            [24] 1183 	pop	ar7
                                   1184 ;	calc.c:19: printf("% 11ld\t", d);
      0004D4 C0 07            [24] 1185 	push	ar7
      0004D6 C0 04            [24] 1186 	push	ar4
      0004D8 C0 03            [24] 1187 	push	ar3
      0004DA C0 02            [24] 1188 	push	ar2
      0004DC C0 02            [24] 1189 	push	ar2
      0004DE C0 03            [24] 1190 	push	ar3
      0004E0 C0 04            [24] 1191 	push	ar4
      0004E2 C0 07            [24] 1192 	push	ar7
      0004E4 74r00            [12] 1193 	mov	a,#___str_0
      0004E6 C0 E0            [24] 1194 	push	acc
      0004E8 74s00            [12] 1195 	mov	a,#(___str_0 >> 8)
      0004EA C0 E0            [24] 1196 	push	acc
      0004EC 74 80            [12] 1197 	mov	a,#0x80
      0004EE C0 E0            [24] 1198 	push	acc
      0004F0 12r00r00         [24] 1199 	lcall	_printf
      0004F3 E5 81            [12] 1200 	mov	a,sp
      0004F5 24 F9            [12] 1201 	add	a,#0xf9
      0004F7 F5 81            [12] 1202 	mov	sp,a
      0004F9 D0 02            [24] 1203 	pop	ar2
      0004FB D0 03            [24] 1204 	pop	ar3
      0004FD D0 04            [24] 1205 	pop	ar4
      0004FF D0 07            [24] 1206 	pop	ar7
                                   1207 ;	calc.c:20: printf("%011lo\t", d);
      000501 C0 07            [24] 1208 	push	ar7
      000503 C0 04            [24] 1209 	push	ar4
      000505 C0 03            [24] 1210 	push	ar3
      000507 C0 02            [24] 1211 	push	ar2
      000509 C0 02            [24] 1212 	push	ar2
      00050B C0 03            [24] 1213 	push	ar3
      00050D C0 04            [24] 1214 	push	ar4
      00050F C0 07            [24] 1215 	push	ar7
      000511 74r08            [12] 1216 	mov	a,#___str_1
      000513 C0 E0            [24] 1217 	push	acc
      000515 74s00            [12] 1218 	mov	a,#(___str_1 >> 8)
      000517 C0 E0            [24] 1219 	push	acc
      000519 74 80            [12] 1220 	mov	a,#0x80
      00051B C0 E0            [24] 1221 	push	acc
      00051D 12r00r00         [24] 1222 	lcall	_printf
      000520 E5 81            [12] 1223 	mov	a,sp
      000522 24 F9            [12] 1224 	add	a,#0xf9
      000524 F5 81            [12] 1225 	mov	sp,a
      000526 D0 02            [24] 1226 	pop	ar2
      000528 D0 03            [24] 1227 	pop	ar3
      00052A D0 04            [24] 1228 	pop	ar4
      00052C D0 07            [24] 1229 	pop	ar7
                                   1230 ;	calc.c:21: print32bin(d);
      00052E 8A 82            [24] 1231 	mov	dpl,r2
      000530 8B 83            [24] 1232 	mov	dph,r3
      000532 8C F0            [24] 1233 	mov	b,r4
      000534 EF               [12] 1234 	mov	a,r7
      000535 12r00r00         [24] 1235 	lcall	_print32bin
                                   1236 ;	calc.c:64: printstr("\r\n");
      000538 90r00r10         [24] 1237 	mov	dptr,#___str_2
      00053B 75 F0 80         [24] 1238 	mov	b,#0x80
      00053E 12r00r00         [24] 1239 	lcall	_printstr
                                   1240 ;	calc.c:61: for (r = stack_pop(ctx->ss, &d); r > 0; r = stack_pop(ctx->ss, &d)) {
      000541 E5*00            [12] 1241 	mov	a,_bp
      000543 24 07            [12] 1242 	add	a,#0x07
      000545 F8               [12] 1243 	mov	r0,a
      000546 86 06            [24] 1244 	mov	ar6,@r0
      000548 7D 00            [12] 1245 	mov	r5,#0x00
      00054A 7B 40            [12] 1246 	mov	r3,#0x40
      00054C E5*00            [12] 1247 	mov	a,_bp
      00054E 24 08            [12] 1248 	add	a,#0x08
      000550 F8               [12] 1249 	mov	r0,a
      000551 86 82            [24] 1250 	mov	dpl,@r0
      000553 08               [12] 1251 	inc	r0
      000554 86 83            [24] 1252 	mov	dph,@r0
      000556 08               [12] 1253 	inc	r0
      000557 86 F0            [24] 1254 	mov	b,@r0
      000559 12r00r00         [24] 1255 	lcall	__gptrget
      00055C FA               [12] 1256 	mov	r2,a
      00055D A3               [24] 1257 	inc	dptr
      00055E 12r00r00         [24] 1258 	lcall	__gptrget
      000561 FC               [12] 1259 	mov	r4,a
      000562 A3               [24] 1260 	inc	dptr
      000563 12r00r00         [24] 1261 	lcall	__gptrget
      000566 FF               [12] 1262 	mov	r7,a
      000567 C0 06            [24] 1263 	push	ar6
      000569 C0 05            [24] 1264 	push	ar5
      00056B C0 03            [24] 1265 	push	ar3
      00056D 8A 82            [24] 1266 	mov	dpl,r2
      00056F 8C 83            [24] 1267 	mov	dph,r4
      000571 8F F0            [24] 1268 	mov	b,r7
      000573 12r00r00         [24] 1269 	lcall	_stack_pop
      000576 AC 82            [24] 1270 	mov	r4,dpl
      000578 AF 83            [24] 1271 	mov	r7,dph
      00057A 15 81            [12] 1272 	dec	sp
      00057C 15 81            [12] 1273 	dec	sp
      00057E 15 81            [12] 1274 	dec	sp
      000580 8C 05            [24] 1275 	mov	ar5,r4
      000582 8F 06            [24] 1276 	mov	ar6,r7
      000584 02r04r70         [24] 1277 	ljmp	00117$
      000587                       1278 00113$:
                                   1279 ;	calc.c:68: return 1;
      000587 90 00 01         [24] 1280 	mov	dptr,#0x0001
                                   1281 ;	calc.c:69: }
      00058A 85*00 81         [24] 1282 	mov	sp,_bp
      00058D D0*00            [24] 1283 	pop	_bp
      00058F 22               [24] 1284 	ret
                                   1285 ;------------------------------------------------------------
                                   1286 ;Allocation info for local variables in function 'dump_peek'
                                   1287 ;------------------------------------------------------------
                                   1288 ;d                         Allocated to stack - _bp -6
                                   1289 ;_ctx                      Allocated to registers 
                                   1290 ;__1310720005              Allocated to registers r4 r5 r6 r7 
                                   1291 ;d                         Allocated to registers 
                                   1292 ;------------------------------------------------------------
                                   1293 ;	calc.c:71: static int dump_peek(void *_ctx, long d) __reentrant {
                                   1294 ;	-----------------------------------------
                                   1295 ;	 function dump_peek
                                   1296 ;	-----------------------------------------
      000590                       1297 _dump_peek:
      000590 C0*00            [24] 1298 	push	_bp
      000592 85 81*00         [24] 1299 	mov	_bp,sp
                                   1300 ;	calc.c:74: printstr("PSVA\t");
      000595 90r00r31         [24] 1301 	mov	dptr,#___str_6
      000598 75 F0 80         [24] 1302 	mov	b,#0x80
      00059B 12r00r00         [24] 1303 	lcall	_printstr
                                   1304 ;	calc.c:75: printall(d);
      00059E E5*00            [12] 1305 	mov	a,_bp
      0005A0 24 FA            [12] 1306 	add	a,#0xfa
      0005A2 F8               [12] 1307 	mov	r0,a
      0005A3 86 04            [24] 1308 	mov	ar4,@r0
      0005A5 08               [12] 1309 	inc	r0
      0005A6 86 05            [24] 1310 	mov	ar5,@r0
      0005A8 08               [12] 1311 	inc	r0
      0005A9 86 06            [24] 1312 	mov	ar6,@r0
      0005AB 08               [12] 1313 	inc	r0
      0005AC 86 07            [24] 1314 	mov	ar7,@r0
                                   1315 ;	calc.c:18: print32x(d);
      0005AE 8C 82            [24] 1316 	mov	dpl,r4
      0005B0 8D 83            [24] 1317 	mov	dph,r5
      0005B2 8E F0            [24] 1318 	mov	b,r6
      0005B4 EF               [12] 1319 	mov	a,r7
      0005B5 C0 07            [24] 1320 	push	ar7
      0005B7 C0 06            [24] 1321 	push	ar6
      0005B9 C0 05            [24] 1322 	push	ar5
      0005BB C0 04            [24] 1323 	push	ar4
      0005BD 12r00r00         [24] 1324 	lcall	_print32x
      0005C0 D0 04            [24] 1325 	pop	ar4
      0005C2 D0 05            [24] 1326 	pop	ar5
      0005C4 D0 06            [24] 1327 	pop	ar6
      0005C6 D0 07            [24] 1328 	pop	ar7
                                   1329 ;	calc.c:19: printf("% 11ld\t", d);
      0005C8 C0 07            [24] 1330 	push	ar7
      0005CA C0 06            [24] 1331 	push	ar6
      0005CC C0 05            [24] 1332 	push	ar5
      0005CE C0 04            [24] 1333 	push	ar4
      0005D0 C0 04            [24] 1334 	push	ar4
      0005D2 C0 05            [24] 1335 	push	ar5
      0005D4 C0 06            [24] 1336 	push	ar6
      0005D6 C0 07            [24] 1337 	push	ar7
      0005D8 74r00            [12] 1338 	mov	a,#___str_0
      0005DA C0 E0            [24] 1339 	push	acc
      0005DC 74s00            [12] 1340 	mov	a,#(___str_0 >> 8)
      0005DE C0 E0            [24] 1341 	push	acc
      0005E0 74 80            [12] 1342 	mov	a,#0x80
      0005E2 C0 E0            [24] 1343 	push	acc
      0005E4 12r00r00         [24] 1344 	lcall	_printf
      0005E7 E5 81            [12] 1345 	mov	a,sp
      0005E9 24 F9            [12] 1346 	add	a,#0xf9
      0005EB F5 81            [12] 1347 	mov	sp,a
      0005ED D0 04            [24] 1348 	pop	ar4
      0005EF D0 05            [24] 1349 	pop	ar5
      0005F1 D0 06            [24] 1350 	pop	ar6
      0005F3 D0 07            [24] 1351 	pop	ar7
                                   1352 ;	calc.c:20: printf("%011lo\t", d);
      0005F5 C0 07            [24] 1353 	push	ar7
      0005F7 C0 06            [24] 1354 	push	ar6
      0005F9 C0 05            [24] 1355 	push	ar5
      0005FB C0 04            [24] 1356 	push	ar4
      0005FD C0 04            [24] 1357 	push	ar4
      0005FF C0 05            [24] 1358 	push	ar5
      000601 C0 06            [24] 1359 	push	ar6
      000603 C0 07            [24] 1360 	push	ar7
      000605 74r08            [12] 1361 	mov	a,#___str_1
      000607 C0 E0            [24] 1362 	push	acc
      000609 74s00            [12] 1363 	mov	a,#(___str_1 >> 8)
      00060B C0 E0            [24] 1364 	push	acc
      00060D 74 80            [12] 1365 	mov	a,#0x80
      00060F C0 E0            [24] 1366 	push	acc
      000611 12r00r00         [24] 1367 	lcall	_printf
      000614 E5 81            [12] 1368 	mov	a,sp
      000616 24 F9            [12] 1369 	add	a,#0xf9
      000618 F5 81            [12] 1370 	mov	sp,a
      00061A D0 04            [24] 1371 	pop	ar4
      00061C D0 05            [24] 1372 	pop	ar5
      00061E D0 06            [24] 1373 	pop	ar6
      000620 D0 07            [24] 1374 	pop	ar7
                                   1375 ;	calc.c:21: print32bin(d);
      000622 8C 82            [24] 1376 	mov	dpl,r4
      000624 8D 83            [24] 1377 	mov	dph,r5
      000626 8E F0            [24] 1378 	mov	b,r6
      000628 EF               [12] 1379 	mov	a,r7
      000629 12r00r00         [24] 1380 	lcall	_print32bin
                                   1381 ;	calc.c:76: printstr("\r\n");
      00062C 90r00r10         [24] 1382 	mov	dptr,#___str_2
      00062F 75 F0 80         [24] 1383 	mov	b,#0x80
      000632 12r00r00         [24] 1384 	lcall	_printstr
                                   1385 ;	calc.c:78: return 1;
      000635 90 00 01         [24] 1386 	mov	dptr,#0x0001
                                   1387 ;	calc.c:79: }
      000638 D0*00            [24] 1388 	pop	_bp
      00063A 22               [24] 1389 	ret
                                   1390 ;------------------------------------------------------------
                                   1391 ;Allocation info for local variables in function 'operator'
                                   1392 ;------------------------------------------------------------
                                   1393 ;delta                     Allocated to stack - _bp -5
                                   1394 ;_ctx                      Allocated to registers r2 r3 r4 
                                   1395 ;ctx                       Allocated to stack - _bp +23
                                   1396 ;t0                        Allocated to registers r7 r6 r5 
                                   1397 ;d0                        Allocated to stack - _bp +26
                                   1398 ;d1                        Allocated to stack - _bp +30
                                   1399 ;__2621440007              Allocated to registers r7 r6 r5 r4 
                                   1400 ;d                         Allocated to stack - _bp +34
                                   1401 ;__2621440009              Allocated to registers r7 r6 r5 r4 
                                   1402 ;d                         Allocated to stack - _bp +34
                                   1403 ;sloc0                     Allocated to stack - _bp +1
                                   1404 ;sloc1                     Allocated to stack - _bp +2
                                   1405 ;sloc2                     Allocated to stack - _bp +5
                                   1406 ;sloc3                     Allocated to stack - _bp +8
                                   1407 ;sloc4                     Allocated to stack - _bp +11
                                   1408 ;sloc5                     Allocated to stack - _bp +15
                                   1409 ;sloc6                     Allocated to stack - _bp +19
                                   1410 ;------------------------------------------------------------
                                   1411 ;	calc.c:81: static int operator(void *_ctx, delta_t *delta) __reentrant {
                                   1412 ;	-----------------------------------------
                                   1413 ;	 function operator
                                   1414 ;	-----------------------------------------
      00063B                       1415 _operator:
      00063B C0*00            [24] 1416 	push	_bp
      00063D E5 81            [12] 1417 	mov	a,sp
      00063F F5*00            [12] 1418 	mov	_bp,a
      000641 24 25            [12] 1419 	add	a,#0x25
      000643 F5 81            [12] 1420 	mov	sp,a
      000645 AA 82            [24] 1421 	mov	r2,dpl
      000647 AB 83            [24] 1422 	mov	r3,dph
      000649 AC F0            [24] 1423 	mov	r4,b
                                   1424 ;	calc.c:82: calc_ctx_t *ctx = (calc_ctx_t *)_ctx;
      00064B E5*00            [12] 1425 	mov	a,_bp
      00064D 24 17            [12] 1426 	add	a,#0x17
      00064F F8               [12] 1427 	mov	r0,a
      000650 A6 02            [24] 1428 	mov	@r0,ar2
      000652 08               [12] 1429 	inc	r0
      000653 A6 03            [24] 1430 	mov	@r0,ar3
      000655 08               [12] 1431 	inc	r0
      000656 A6 04            [24] 1432 	mov	@r0,ar4
                                   1433 ;	calc.c:86: switch (ctx->digit[0]) {
      000658 E5*00            [12] 1434 	mov	a,_bp
      00065A 24 17            [12] 1435 	add	a,#0x17
      00065C F8               [12] 1436 	mov	r0,a
      00065D 74 07            [12] 1437 	mov	a,#0x07
      00065F 26               [12] 1438 	add	a,@r0
      000660 FD               [12] 1439 	mov	r5,a
      000661 E4               [12] 1440 	clr	a
      000662 08               [12] 1441 	inc	r0
      000663 36               [12] 1442 	addc	a,@r0
      000664 FE               [12] 1443 	mov	r6,a
      000665 08               [12] 1444 	inc	r0
      000666 86 07            [24] 1445 	mov	ar7,@r0
      000668 8D 82            [24] 1446 	mov	dpl,r5
      00066A 8E 83            [24] 1447 	mov	dph,r6
      00066C 8F F0            [24] 1448 	mov	b,r7
      00066E A8*00            [24] 1449 	mov	r0,_bp
      000670 08               [12] 1450 	inc	r0
      000671 12r00r00         [24] 1451 	lcall	__gptrget
      000674 F6               [12] 1452 	mov	@r0,a
      000675 A8*00            [24] 1453 	mov	r0,_bp
      000677 08               [12] 1454 	inc	r0
      000678 B6 23 03         [24] 1455 	cjne	@r0,#0x23,00526$
      00067B 02r17rB3         [24] 1456 	ljmp	00189$
      00067E                       1457 00526$:
      00067E A8*00            [24] 1458 	mov	r0,_bp
      000680 08               [12] 1459 	inc	r0
      000681 B6 25 03         [24] 1460 	cjne	@r0,#0x25,00527$
      000684 02r17rB3         [24] 1461 	ljmp	00189$
      000687                       1462 00527$:
      000687 A8*00            [24] 1463 	mov	r0,_bp
      000689 08               [12] 1464 	inc	r0
      00068A B6 26 03         [24] 1465 	cjne	@r0,#0x26,00528$
      00068D 02r1Ar4E         [24] 1466 	ljmp	00202$
      000690                       1467 00528$:
      000690 A8*00            [24] 1468 	mov	r0,_bp
      000692 08               [12] 1469 	inc	r0
      000693 B6 2A 03         [24] 1470 	cjne	@r0,#0x2a,00529$
      000696 02r13rA0         [24] 1471 	ljmp	00167$
      000699                       1472 00529$:
      000699 A8*00            [24] 1473 	mov	r0,_bp
      00069B 08               [12] 1474 	inc	r0
      00069C B6 2B 03         [24] 1475 	cjne	@r0,#0x2b,00530$
      00069F 02r11r05         [24] 1476 	ljmp	00153$
      0006A2                       1477 00530$:
      0006A2 A8*00            [24] 1478 	mov	r0,_bp
      0006A4 08               [12] 1479 	inc	r0
      0006A5 B6 2D 03         [24] 1480 	cjne	@r0,#0x2d,00531$
      0006A8 02r12r52         [24] 1481 	ljmp	00160$
      0006AB                       1482 00531$:
      0006AB A8*00            [24] 1483 	mov	r0,_bp
      0006AD 08               [12] 1484 	inc	r0
      0006AE B6 2E 03         [24] 1485 	cjne	@r0,#0x2e,00532$
      0006B1 02r08rD2         [24] 1486 	ljmp	00109$
      0006B4                       1487 00532$:
      0006B4 A8*00            [24] 1488 	mov	r0,_bp
      0006B6 08               [12] 1489 	inc	r0
      0006B7 B6 2F 03         [24] 1490 	cjne	@r0,#0x2f,00533$
      0006BA 02r15r14         [24] 1491 	ljmp	00175$
      0006BD                       1492 00533$:
      0006BD A8*00            [24] 1493 	mov	r0,_bp
      0006BF 08               [12] 1494 	inc	r0
      0006C0 B6 3C 03         [24] 1495 	cjne	@r0,#0x3c,00534$
      0006C3 02r21r6F         [24] 1496 	ljmp	00237$
      0006C6                       1497 00534$:
      0006C6 A8*00            [24] 1498 	mov	r0,_bp
      0006C8 08               [12] 1499 	inc	r0
      0006C9 B6 3E 03         [24] 1500 	cjne	@r0,#0x3e,00535$
      0006CC 02r1Er86         [24] 1501 	ljmp	00223$
      0006CF                       1502 00535$:
      0006CF A8*00            [24] 1503 	mov	r0,_bp
      0006D1 08               [12] 1504 	inc	r0
      0006D2 B6 4D 03         [24] 1505 	cjne	@r0,#0x4d,00536$
      0006D5 02r0Cr76         [24] 1506 	ljmp	00127$
      0006D8                       1507 00536$:
      0006D8 A8*00            [24] 1508 	mov	r0,_bp
      0006DA 08               [12] 1509 	inc	r0
      0006DB B6 50 03         [24] 1510 	cjne	@r0,#0x50,00537$
      0006DE 02r09rD4         [24] 1511 	ljmp	00113$
      0006E1                       1512 00537$:
      0006E1 A8*00            [24] 1513 	mov	r0,_bp
      0006E3 08               [12] 1514 	inc	r0
      0006E4 B6 54 03         [24] 1515 	cjne	@r0,#0x54,00538$
      0006E7 02r0ErE2         [24] 1516 	ljmp	00145$
      0006EA                       1517 00538$:
      0006EA A8*00            [24] 1518 	mov	r0,_bp
      0006EC 08               [12] 1519 	inc	r0
      0006ED B6 55 03         [24] 1520 	cjne	@r0,#0x55,00539$
      0006F0 02r0Er2D         [24] 1521 	ljmp	00139$
      0006F3                       1522 00539$:
      0006F3 A8*00            [24] 1523 	mov	r0,_bp
      0006F5 08               [12] 1524 	inc	r0
      0006F6 B6 56 03         [24] 1525 	cjne	@r0,#0x56,00540$
      0006F9 02r08r63         [24] 1526 	ljmp	00105$
      0006FC                       1527 00540$:
      0006FC A8*00            [24] 1528 	mov	r0,_bp
      0006FE 08               [12] 1529 	inc	r0
      0006FF B6 58 03         [24] 1530 	cjne	@r0,#0x58,00541$
      000702 02r10r66         [24] 1531 	ljmp	00152$
      000705                       1532 00541$:
      000705 A8*00            [24] 1533 	mov	r0,_bp
      000707 08               [12] 1534 	inc	r0
      000708 B6 5C 03         [24] 1535 	cjne	@r0,#0x5c,00542$
      00070B 02r15r14         [24] 1536 	ljmp	00175$
      00070E                       1537 00542$:
      00070E A8*00            [24] 1538 	mov	r0,_bp
      000710 08               [12] 1539 	inc	r0
      000711 B6 5D 03         [24] 1540 	cjne	@r0,#0x5d,00543$
      000714 02r1FrF2         [24] 1541 	ljmp	00230$
      000717                       1542 00543$:
      000717 A8*00            [24] 1543 	mov	r0,_bp
      000719 08               [12] 1544 	inc	r0
      00071A B6 5E 03         [24] 1545 	cjne	@r0,#0x5e,00544$
      00071D 02r1Dr1E         [24] 1546 	ljmp	00216$
      000720                       1547 00544$:
      000720 A8*00            [24] 1548 	mov	r0,_bp
      000722 08               [12] 1549 	inc	r0
      000723 B6 6D 03         [24] 1550 	cjne	@r0,#0x6d,00545$
      000726 02r0Br74         [24] 1551 	ljmp	00121$
      000729                       1552 00545$:
      000729 A8*00            [24] 1553 	mov	r0,_bp
      00072B 08               [12] 1554 	inc	r0
      00072C B6 70 03         [24] 1555 	cjne	@r0,#0x70,00546$
      00072F 02r08rD2         [24] 1556 	ljmp	00109$
      000732                       1557 00546$:
      000732 A8*00            [24] 1558 	mov	r0,_bp
      000734 08               [12] 1559 	inc	r0
      000735 B6 75 03         [24] 1560 	cjne	@r0,#0x75,00547$
      000738 02r0Dr78         [24] 1561 	ljmp	00133$
      00073B                       1562 00547$:
      00073B A8*00            [24] 1563 	mov	r0,_bp
      00073D 08               [12] 1564 	inc	r0
      00073E B6 76 02         [24] 1565 	cjne	@r0,#0x76,00548$
      000741 80 1E            [24] 1566 	sjmp	00101$
      000743                       1567 00548$:
      000743 A8*00            [24] 1568 	mov	r0,_bp
      000745 08               [12] 1569 	inc	r0
      000746 B6 78 03         [24] 1570 	cjne	@r0,#0x78,00549$
      000749 02r0Ar0B         [24] 1571 	ljmp	00114$
      00074C                       1572 00549$:
      00074C A8*00            [24] 1573 	mov	r0,_bp
      00074E 08               [12] 1574 	inc	r0
      00074F B6 7C 03         [24] 1575 	cjne	@r0,#0x7c,00550$
      000752 02r1BrB6         [24] 1576 	ljmp	00209$
      000755                       1577 00550$:
      000755 A8*00            [24] 1578 	mov	r0,_bp
      000757 08               [12] 1579 	inc	r0
      000758 B6 7E 03         [24] 1580 	cjne	@r0,#0x7e,00551$
      00075B 02r22rE0         [24] 1581 	ljmp	00244$
      00075E                       1582 00551$:
      00075E 02r23rA2         [24] 1583 	ljmp	00248$
                                   1584 ;	calc.c:87: case 'v':
      000761                       1585 00101$:
                                   1586 ;	calc.c:88: printstr("\r\n");
      000761 90r00r10         [24] 1587 	mov	dptr,#___str_2
      000764 75 F0 80         [24] 1588 	mov	b,#0x80
      000767 12r00r00         [24] 1589 	lcall	_printstr
                                   1590 ;	calc.c:89: if (!stack_peek(ctx->ps, &d0)) printstr("stack underflow\r\n");
      00076A E5*00            [12] 1591 	mov	a,_bp
      00076C 24 1A            [12] 1592 	add	a,#0x1a
      00076E FF               [12] 1593 	mov	r7,a
      00076F 7E 00            [12] 1594 	mov	r6,#0x00
      000771 7D 40            [12] 1595 	mov	r5,#0x40
      000773 E5*00            [12] 1596 	mov	a,_bp
      000775 24 17            [12] 1597 	add	a,#0x17
      000777 F8               [12] 1598 	mov	r0,a
      000778 74 11            [12] 1599 	mov	a,#0x11
      00077A 26               [12] 1600 	add	a,@r0
      00077B FA               [12] 1601 	mov	r2,a
      00077C ED               [12] 1602 	mov	a,r5
      00077D 08               [12] 1603 	inc	r0
      00077E 36               [12] 1604 	addc	a,@r0
      00077F FB               [12] 1605 	mov	r3,a
      000780 08               [12] 1606 	inc	r0
      000781 86 04            [24] 1607 	mov	ar4,@r0
      000783 8A 82            [24] 1608 	mov	dpl,r2
      000785 8B 83            [24] 1609 	mov	dph,r3
      000787 8C F0            [24] 1610 	mov	b,r4
      000789 12r00r00         [24] 1611 	lcall	__gptrget
      00078C FA               [12] 1612 	mov	r2,a
      00078D A3               [24] 1613 	inc	dptr
      00078E 12r00r00         [24] 1614 	lcall	__gptrget
      000791 FB               [12] 1615 	mov	r3,a
      000792 A3               [24] 1616 	inc	dptr
      000793 12r00r00         [24] 1617 	lcall	__gptrget
      000796 FC               [12] 1618 	mov	r4,a
      000797 C0 07            [24] 1619 	push	ar7
      000799 C0 06            [24] 1620 	push	ar6
      00079B C0 05            [24] 1621 	push	ar5
      00079D 8A 82            [24] 1622 	mov	dpl,r2
      00079F 8B 83            [24] 1623 	mov	dph,r3
      0007A1 8C F0            [24] 1624 	mov	b,r4
      0007A3 12r00r00         [24] 1625 	lcall	_stack_peek
      0007A6 AB 82            [24] 1626 	mov	r3,dpl
      0007A8 AC 83            [24] 1627 	mov	r4,dph
      0007AA 15 81            [12] 1628 	dec	sp
      0007AC 15 81            [12] 1629 	dec	sp
      0007AE 15 81            [12] 1630 	dec	sp
      0007B0 EB               [12] 1631 	mov	a,r3
      0007B1 4C               [12] 1632 	orl	a,r4
      0007B2 70 0C            [24] 1633 	jnz	00103$
      0007B4 90r00r13         [24] 1634 	mov	dptr,#___str_3
      0007B7 75 F0 80         [24] 1635 	mov	b,#0x80
      0007BA 12r00r00         [24] 1636 	lcall	_printstr
      0007BD 02r23rA7         [24] 1637 	ljmp	00249$
      0007C0                       1638 00103$:
                                   1639 ;	calc.c:91: printstr("PSVTOP\t");
      0007C0 90r00r37         [24] 1640 	mov	dptr,#___str_7
      0007C3 75 F0 80         [24] 1641 	mov	b,#0x80
      0007C6 12r00r00         [24] 1642 	lcall	_printstr
                                   1643 ;	calc.c:92: printall(d0);
      0007C9 E5*00            [12] 1644 	mov	a,_bp
      0007CB 24 1A            [12] 1645 	add	a,#0x1a
      0007CD F8               [12] 1646 	mov	r0,a
      0007CE 86 07            [24] 1647 	mov	ar7,@r0
      0007D0 08               [12] 1648 	inc	r0
      0007D1 86 06            [24] 1649 	mov	ar6,@r0
      0007D3 08               [12] 1650 	inc	r0
      0007D4 86 05            [24] 1651 	mov	ar5,@r0
      0007D6 08               [12] 1652 	inc	r0
      0007D7 86 04            [24] 1653 	mov	ar4,@r0
      0007D9 E5*00            [12] 1654 	mov	a,_bp
      0007DB 24 22            [12] 1655 	add	a,#0x22
      0007DD F8               [12] 1656 	mov	r0,a
      0007DE A6 07            [24] 1657 	mov	@r0,ar7
      0007E0 08               [12] 1658 	inc	r0
      0007E1 A6 06            [24] 1659 	mov	@r0,ar6
      0007E3 08               [12] 1660 	inc	r0
      0007E4 A6 05            [24] 1661 	mov	@r0,ar5
      0007E6 08               [12] 1662 	inc	r0
      0007E7 A6 04            [24] 1663 	mov	@r0,ar4
                                   1664 ;	calc.c:18: print32x(d);
      0007E9 8F 82            [24] 1665 	mov	dpl,r7
      0007EB 8E 83            [24] 1666 	mov	dph,r6
      0007ED 8D F0            [24] 1667 	mov	b,r5
      0007EF EC               [12] 1668 	mov	a,r4
      0007F0 12r00r00         [24] 1669 	lcall	_print32x
                                   1670 ;	calc.c:19: printf("% 11ld\t", d);
      0007F3 E5*00            [12] 1671 	mov	a,_bp
      0007F5 24 22            [12] 1672 	add	a,#0x22
      0007F7 F8               [12] 1673 	mov	r0,a
      0007F8 E6               [12] 1674 	mov	a,@r0
      0007F9 C0 E0            [24] 1675 	push	acc
      0007FB 08               [12] 1676 	inc	r0
      0007FC E6               [12] 1677 	mov	a,@r0
      0007FD C0 E0            [24] 1678 	push	acc
      0007FF 08               [12] 1679 	inc	r0
      000800 E6               [12] 1680 	mov	a,@r0
      000801 C0 E0            [24] 1681 	push	acc
      000803 08               [12] 1682 	inc	r0
      000804 E6               [12] 1683 	mov	a,@r0
      000805 C0 E0            [24] 1684 	push	acc
      000807 74r00            [12] 1685 	mov	a,#___str_0
      000809 C0 E0            [24] 1686 	push	acc
      00080B 74s00            [12] 1687 	mov	a,#(___str_0 >> 8)
      00080D C0 E0            [24] 1688 	push	acc
      00080F 74 80            [12] 1689 	mov	a,#0x80
      000811 C0 E0            [24] 1690 	push	acc
      000813 12r00r00         [24] 1691 	lcall	_printf
      000816 E5 81            [12] 1692 	mov	a,sp
      000818 24 F9            [12] 1693 	add	a,#0xf9
      00081A F5 81            [12] 1694 	mov	sp,a
                                   1695 ;	calc.c:20: printf("%011lo\t", d);
      00081C E5*00            [12] 1696 	mov	a,_bp
      00081E 24 22            [12] 1697 	add	a,#0x22
      000820 F8               [12] 1698 	mov	r0,a
      000821 E6               [12] 1699 	mov	a,@r0
      000822 C0 E0            [24] 1700 	push	acc
      000824 08               [12] 1701 	inc	r0
      000825 E6               [12] 1702 	mov	a,@r0
      000826 C0 E0            [24] 1703 	push	acc
      000828 08               [12] 1704 	inc	r0
      000829 E6               [12] 1705 	mov	a,@r0
      00082A C0 E0            [24] 1706 	push	acc
      00082C 08               [12] 1707 	inc	r0
      00082D E6               [12] 1708 	mov	a,@r0
      00082E C0 E0            [24] 1709 	push	acc
      000830 74r08            [12] 1710 	mov	a,#___str_1
      000832 C0 E0            [24] 1711 	push	acc
      000834 74s00            [12] 1712 	mov	a,#(___str_1 >> 8)
      000836 C0 E0            [24] 1713 	push	acc
      000838 74 80            [12] 1714 	mov	a,#0x80
      00083A C0 E0            [24] 1715 	push	acc
      00083C 12r00r00         [24] 1716 	lcall	_printf
      00083F E5 81            [12] 1717 	mov	a,sp
      000841 24 F9            [12] 1718 	add	a,#0xf9
      000843 F5 81            [12] 1719 	mov	sp,a
                                   1720 ;	calc.c:21: print32bin(d);
      000845 E5*00            [12] 1721 	mov	a,_bp
      000847 24 22            [12] 1722 	add	a,#0x22
      000849 F8               [12] 1723 	mov	r0,a
      00084A 86 82            [24] 1724 	mov	dpl,@r0
      00084C 08               [12] 1725 	inc	r0
      00084D 86 83            [24] 1726 	mov	dph,@r0
      00084F 08               [12] 1727 	inc	r0
      000850 86 F0            [24] 1728 	mov	b,@r0
      000852 08               [12] 1729 	inc	r0
      000853 E6               [12] 1730 	mov	a,@r0
      000854 12r00r00         [24] 1731 	lcall	_print32bin
                                   1732 ;	calc.c:93: printstr("\r\n");
      000857 90r00r10         [24] 1733 	mov	dptr,#___str_2
      00085A 75 F0 80         [24] 1734 	mov	b,#0x80
      00085D 12r00r00         [24] 1735 	lcall	_printstr
                                   1736 ;	calc.c:95: break;
      000860 02r23rA7         [24] 1737 	ljmp	00249$
                                   1738 ;	calc.c:96: case 'V':
      000863                       1739 00105$:
                                   1740 ;	calc.c:97: printstr("\r\n");
      000863 90r00r10         [24] 1741 	mov	dptr,#___str_2
      000866 75 F0 80         [24] 1742 	mov	b,#0x80
      000869 12r00r00         [24] 1743 	lcall	_printstr
                                   1744 ;	calc.c:98: if (!stack_iter_peek(ctx->ps, dump_peek, ctx)) printstr("stack underflow\r\n");
      00086C E5*00            [12] 1745 	mov	a,_bp
      00086E 24 17            [12] 1746 	add	a,#0x17
      000870 F8               [12] 1747 	mov	r0,a
      000871 86 07            [24] 1748 	mov	ar7,@r0
      000873 08               [12] 1749 	inc	r0
      000874 86 06            [24] 1750 	mov	ar6,@r0
      000876 08               [12] 1751 	inc	r0
      000877 86 05            [24] 1752 	mov	ar5,@r0
      000879 E5*00            [12] 1753 	mov	a,_bp
      00087B 24 17            [12] 1754 	add	a,#0x17
      00087D F8               [12] 1755 	mov	r0,a
      00087E 74 11            [12] 1756 	mov	a,#0x11
      000880 26               [12] 1757 	add	a,@r0
      000881 FA               [12] 1758 	mov	r2,a
      000882 74 40            [12] 1759 	mov	a,#0x40
      000884 08               [12] 1760 	inc	r0
      000885 36               [12] 1761 	addc	a,@r0
      000886 FB               [12] 1762 	mov	r3,a
      000887 08               [12] 1763 	inc	r0
      000888 86 04            [24] 1764 	mov	ar4,@r0
      00088A 8A 82            [24] 1765 	mov	dpl,r2
      00088C 8B 83            [24] 1766 	mov	dph,r3
      00088E 8C F0            [24] 1767 	mov	b,r4
      000890 12r00r00         [24] 1768 	lcall	__gptrget
      000893 FA               [12] 1769 	mov	r2,a
      000894 A3               [24] 1770 	inc	dptr
      000895 12r00r00         [24] 1771 	lcall	__gptrget
      000898 FB               [12] 1772 	mov	r3,a
      000899 A3               [24] 1773 	inc	dptr
      00089A 12r00r00         [24] 1774 	lcall	__gptrget
      00089D FC               [12] 1775 	mov	r4,a
      00089E C0 07            [24] 1776 	push	ar7
      0008A0 C0 06            [24] 1777 	push	ar6
      0008A2 C0 05            [24] 1778 	push	ar5
      0008A4 74r90            [12] 1779 	mov	a,#_dump_peek
      0008A6 C0 E0            [24] 1780 	push	acc
      0008A8 74s05            [12] 1781 	mov	a,#(_dump_peek >> 8)
      0008AA C0 E0            [24] 1782 	push	acc
      0008AC 8A 82            [24] 1783 	mov	dpl,r2
      0008AE 8B 83            [24] 1784 	mov	dph,r3
      0008B0 8C F0            [24] 1785 	mov	b,r4
      0008B2 12r00r00         [24] 1786 	lcall	_stack_iter_peek
      0008B5 AB 82            [24] 1787 	mov	r3,dpl
      0008B7 AC 83            [24] 1788 	mov	r4,dph
      0008B9 E5 81            [12] 1789 	mov	a,sp
      0008BB 24 FB            [12] 1790 	add	a,#0xfb
      0008BD F5 81            [12] 1791 	mov	sp,a
      0008BF EB               [12] 1792 	mov	a,r3
      0008C0 4C               [12] 1793 	orl	a,r4
      0008C1 60 03            [24] 1794 	jz	00553$
      0008C3 02r23rA7         [24] 1795 	ljmp	00249$
      0008C6                       1796 00553$:
      0008C6 90r00r13         [24] 1797 	mov	dptr,#___str_3
      0008C9 75 F0 80         [24] 1798 	mov	b,#0x80
      0008CC 12r00r00         [24] 1799 	lcall	_printstr
                                   1800 ;	calc.c:99: break;
      0008CF 02r23rA7         [24] 1801 	ljmp	00249$
                                   1802 ;	calc.c:101: case 'p':
      0008D2                       1803 00109$:
                                   1804 ;	calc.c:102: printstr("\r\n");
      0008D2 90r00r10         [24] 1805 	mov	dptr,#___str_2
      0008D5 75 F0 80         [24] 1806 	mov	b,#0x80
      0008D8 12r00r00         [24] 1807 	lcall	_printstr
                                   1808 ;	calc.c:103: if (!stack_pop(ctx->ps, &d0)) printstr("stack underflow\r\n");
      0008DB E5*00            [12] 1809 	mov	a,_bp
      0008DD 24 1A            [12] 1810 	add	a,#0x1a
      0008DF FF               [12] 1811 	mov	r7,a
      0008E0 7E 00            [12] 1812 	mov	r6,#0x00
      0008E2 7D 40            [12] 1813 	mov	r5,#0x40
      0008E4 E5*00            [12] 1814 	mov	a,_bp
      0008E6 24 17            [12] 1815 	add	a,#0x17
      0008E8 F8               [12] 1816 	mov	r0,a
      0008E9 74 11            [12] 1817 	mov	a,#0x11
      0008EB 26               [12] 1818 	add	a,@r0
      0008EC FA               [12] 1819 	mov	r2,a
      0008ED ED               [12] 1820 	mov	a,r5
      0008EE 08               [12] 1821 	inc	r0
      0008EF 36               [12] 1822 	addc	a,@r0
      0008F0 FB               [12] 1823 	mov	r3,a
      0008F1 08               [12] 1824 	inc	r0
      0008F2 86 04            [24] 1825 	mov	ar4,@r0
      0008F4 8A 82            [24] 1826 	mov	dpl,r2
      0008F6 8B 83            [24] 1827 	mov	dph,r3
      0008F8 8C F0            [24] 1828 	mov	b,r4
      0008FA 12r00r00         [24] 1829 	lcall	__gptrget
      0008FD FA               [12] 1830 	mov	r2,a
      0008FE A3               [24] 1831 	inc	dptr
      0008FF 12r00r00         [24] 1832 	lcall	__gptrget
      000902 FB               [12] 1833 	mov	r3,a
      000903 A3               [24] 1834 	inc	dptr
      000904 12r00r00         [24] 1835 	lcall	__gptrget
      000907 FC               [12] 1836 	mov	r4,a
      000908 C0 07            [24] 1837 	push	ar7
      00090A C0 06            [24] 1838 	push	ar6
      00090C C0 05            [24] 1839 	push	ar5
      00090E 8A 82            [24] 1840 	mov	dpl,r2
      000910 8B 83            [24] 1841 	mov	dph,r3
      000912 8C F0            [24] 1842 	mov	b,r4
      000914 12r00r00         [24] 1843 	lcall	_stack_pop
      000917 AB 82            [24] 1844 	mov	r3,dpl
      000919 AC 83            [24] 1845 	mov	r4,dph
      00091B 15 81            [12] 1846 	dec	sp
      00091D 15 81            [12] 1847 	dec	sp
      00091F 15 81            [12] 1848 	dec	sp
      000921 EB               [12] 1849 	mov	a,r3
      000922 4C               [12] 1850 	orl	a,r4
      000923 70 0C            [24] 1851 	jnz	00111$
      000925 90r00r13         [24] 1852 	mov	dptr,#___str_3
      000928 75 F0 80         [24] 1853 	mov	b,#0x80
      00092B 12r00r00         [24] 1854 	lcall	_printstr
      00092E 02r23rA7         [24] 1855 	ljmp	00249$
      000931                       1856 00111$:
                                   1857 ;	calc.c:105: printstr("PSPTOP\t");
      000931 90r00r3F         [24] 1858 	mov	dptr,#___str_8
      000934 75 F0 80         [24] 1859 	mov	b,#0x80
      000937 12r00r00         [24] 1860 	lcall	_printstr
                                   1861 ;	calc.c:106: printall(d0);
      00093A E5*00            [12] 1862 	mov	a,_bp
      00093C 24 1A            [12] 1863 	add	a,#0x1a
      00093E F8               [12] 1864 	mov	r0,a
      00093F 86 07            [24] 1865 	mov	ar7,@r0
      000941 08               [12] 1866 	inc	r0
      000942 86 06            [24] 1867 	mov	ar6,@r0
      000944 08               [12] 1868 	inc	r0
      000945 86 05            [24] 1869 	mov	ar5,@r0
      000947 08               [12] 1870 	inc	r0
      000948 86 04            [24] 1871 	mov	ar4,@r0
      00094A E5*00            [12] 1872 	mov	a,_bp
      00094C 24 22            [12] 1873 	add	a,#0x22
      00094E F8               [12] 1874 	mov	r0,a
      00094F A6 07            [24] 1875 	mov	@r0,ar7
      000951 08               [12] 1876 	inc	r0
      000952 A6 06            [24] 1877 	mov	@r0,ar6
      000954 08               [12] 1878 	inc	r0
      000955 A6 05            [24] 1879 	mov	@r0,ar5
      000957 08               [12] 1880 	inc	r0
      000958 A6 04            [24] 1881 	mov	@r0,ar4
                                   1882 ;	calc.c:18: print32x(d);
      00095A 8F 82            [24] 1883 	mov	dpl,r7
      00095C 8E 83            [24] 1884 	mov	dph,r6
      00095E 8D F0            [24] 1885 	mov	b,r5
      000960 EC               [12] 1886 	mov	a,r4
      000961 12r00r00         [24] 1887 	lcall	_print32x
                                   1888 ;	calc.c:19: printf("% 11ld\t", d);
      000964 E5*00            [12] 1889 	mov	a,_bp
      000966 24 22            [12] 1890 	add	a,#0x22
      000968 F8               [12] 1891 	mov	r0,a
      000969 E6               [12] 1892 	mov	a,@r0
      00096A C0 E0            [24] 1893 	push	acc
      00096C 08               [12] 1894 	inc	r0
      00096D E6               [12] 1895 	mov	a,@r0
      00096E C0 E0            [24] 1896 	push	acc
      000970 08               [12] 1897 	inc	r0
      000971 E6               [12] 1898 	mov	a,@r0
      000972 C0 E0            [24] 1899 	push	acc
      000974 08               [12] 1900 	inc	r0
      000975 E6               [12] 1901 	mov	a,@r0
      000976 C0 E0            [24] 1902 	push	acc
      000978 74r00            [12] 1903 	mov	a,#___str_0
      00097A C0 E0            [24] 1904 	push	acc
      00097C 74s00            [12] 1905 	mov	a,#(___str_0 >> 8)
      00097E C0 E0            [24] 1906 	push	acc
      000980 74 80            [12] 1907 	mov	a,#0x80
      000982 C0 E0            [24] 1908 	push	acc
      000984 12r00r00         [24] 1909 	lcall	_printf
      000987 E5 81            [12] 1910 	mov	a,sp
      000989 24 F9            [12] 1911 	add	a,#0xf9
      00098B F5 81            [12] 1912 	mov	sp,a
                                   1913 ;	calc.c:20: printf("%011lo\t", d);
      00098D E5*00            [12] 1914 	mov	a,_bp
      00098F 24 22            [12] 1915 	add	a,#0x22
      000991 F8               [12] 1916 	mov	r0,a
      000992 E6               [12] 1917 	mov	a,@r0
      000993 C0 E0            [24] 1918 	push	acc
      000995 08               [12] 1919 	inc	r0
      000996 E6               [12] 1920 	mov	a,@r0
      000997 C0 E0            [24] 1921 	push	acc
      000999 08               [12] 1922 	inc	r0
      00099A E6               [12] 1923 	mov	a,@r0
      00099B C0 E0            [24] 1924 	push	acc
      00099D 08               [12] 1925 	inc	r0
      00099E E6               [12] 1926 	mov	a,@r0
      00099F C0 E0            [24] 1927 	push	acc
      0009A1 74r08            [12] 1928 	mov	a,#___str_1
      0009A3 C0 E0            [24] 1929 	push	acc
      0009A5 74s00            [12] 1930 	mov	a,#(___str_1 >> 8)
      0009A7 C0 E0            [24] 1931 	push	acc
      0009A9 74 80            [12] 1932 	mov	a,#0x80
      0009AB C0 E0            [24] 1933 	push	acc
      0009AD 12r00r00         [24] 1934 	lcall	_printf
      0009B0 E5 81            [12] 1935 	mov	a,sp
      0009B2 24 F9            [12] 1936 	add	a,#0xf9
      0009B4 F5 81            [12] 1937 	mov	sp,a
                                   1938 ;	calc.c:21: print32bin(d);
      0009B6 E5*00            [12] 1939 	mov	a,_bp
      0009B8 24 22            [12] 1940 	add	a,#0x22
      0009BA F8               [12] 1941 	mov	r0,a
      0009BB 86 82            [24] 1942 	mov	dpl,@r0
      0009BD 08               [12] 1943 	inc	r0
      0009BE 86 83            [24] 1944 	mov	dph,@r0
      0009C0 08               [12] 1945 	inc	r0
      0009C1 86 F0            [24] 1946 	mov	b,@r0
      0009C3 08               [12] 1947 	inc	r0
      0009C4 E6               [12] 1948 	mov	a,@r0
      0009C5 12r00r00         [24] 1949 	lcall	_print32bin
                                   1950 ;	calc.c:107: printstr("\r\n");
      0009C8 90r00r10         [24] 1951 	mov	dptr,#___str_2
      0009CB 75 F0 80         [24] 1952 	mov	b,#0x80
      0009CE 12r00r00         [24] 1953 	lcall	_printstr
                                   1954 ;	calc.c:109: break;
      0009D1 02r23rA7         [24] 1955 	ljmp	00249$
                                   1956 ;	calc.c:110: case 'P':
      0009D4                       1957 00113$:
                                   1958 ;	calc.c:111: printstr("\r\n");
      0009D4 90r00r10         [24] 1959 	mov	dptr,#___str_2
      0009D7 75 F0 80         [24] 1960 	mov	b,#0x80
      0009DA C0 04            [24] 1961 	push	ar4
      0009DC C0 03            [24] 1962 	push	ar3
      0009DE C0 02            [24] 1963 	push	ar2
      0009E0 12r00r00         [24] 1964 	lcall	_printstr
      0009E3 D0 02            [24] 1965 	pop	ar2
      0009E5 D0 03            [24] 1966 	pop	ar3
      0009E7 D0 04            [24] 1967 	pop	ar4
                                   1968 ;	calc.c:112: (void)dump_pop(_ctx, delta);
      0009E9 E5*00            [12] 1969 	mov	a,_bp
      0009EB 24 FB            [12] 1970 	add	a,#0xfb
      0009ED F8               [12] 1971 	mov	r0,a
      0009EE E6               [12] 1972 	mov	a,@r0
      0009EF C0 E0            [24] 1973 	push	acc
      0009F1 08               [12] 1974 	inc	r0
      0009F2 E6               [12] 1975 	mov	a,@r0
      0009F3 C0 E0            [24] 1976 	push	acc
      0009F5 08               [12] 1977 	inc	r0
      0009F6 E6               [12] 1978 	mov	a,@r0
      0009F7 C0 E0            [24] 1979 	push	acc
      0009F9 8A 82            [24] 1980 	mov	dpl,r2
      0009FB 8B 83            [24] 1981 	mov	dph,r3
      0009FD 8C F0            [24] 1982 	mov	b,r4
      0009FF 12r01r71         [24] 1983 	lcall	_dump_pop
      000A02 15 81            [12] 1984 	dec	sp
      000A04 15 81            [12] 1985 	dec	sp
      000A06 15 81            [12] 1986 	dec	sp
                                   1987 ;	calc.c:113: break;
      000A08 02r23rA7         [24] 1988 	ljmp	00249$
                                   1989 ;	calc.c:114: case 'x':
      000A0B                       1990 00114$:
                                   1991 ;	calc.c:115: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      000A0B E5*00            [12] 1992 	mov	a,_bp
      000A0D 24 1A            [12] 1993 	add	a,#0x1a
      000A0F FF               [12] 1994 	mov	r7,a
      000A10 7E 00            [12] 1995 	mov	r6,#0x00
      000A12 7D 40            [12] 1996 	mov	r5,#0x40
      000A14 E5*00            [12] 1997 	mov	a,_bp
      000A16 24 17            [12] 1998 	add	a,#0x17
      000A18 F8               [12] 1999 	mov	r0,a
      000A19 A9*00            [24] 2000 	mov	r1,_bp
      000A1B 09               [12] 2001 	inc	r1
      000A1C 09               [12] 2002 	inc	r1
      000A1D 74 11            [12] 2003 	mov	a,#0x11
      000A1F 26               [12] 2004 	add	a,@r0
      000A20 F7               [12] 2005 	mov	@r1,a
      000A21 74 40            [12] 2006 	mov	a,#0x40
      000A23 08               [12] 2007 	inc	r0
      000A24 36               [12] 2008 	addc	a,@r0
      000A25 09               [12] 2009 	inc	r1
      000A26 F7               [12] 2010 	mov	@r1,a
      000A27 08               [12] 2011 	inc	r0
      000A28 09               [12] 2012 	inc	r1
      000A29 E6               [12] 2013 	mov	a,@r0
      000A2A F7               [12] 2014 	mov	@r1,a
      000A2B A8*00            [24] 2015 	mov	r0,_bp
      000A2D 08               [12] 2016 	inc	r0
      000A2E 08               [12] 2017 	inc	r0
      000A2F 86 82            [24] 2018 	mov	dpl,@r0
      000A31 08               [12] 2019 	inc	r0
      000A32 86 83            [24] 2020 	mov	dph,@r0
      000A34 08               [12] 2021 	inc	r0
      000A35 86 F0            [24] 2022 	mov	b,@r0
      000A37 12r00r00         [24] 2023 	lcall	__gptrget
      000A3A FA               [12] 2024 	mov	r2,a
      000A3B A3               [24] 2025 	inc	dptr
      000A3C 12r00r00         [24] 2026 	lcall	__gptrget
      000A3F FB               [12] 2027 	mov	r3,a
      000A40 A3               [24] 2028 	inc	dptr
      000A41 12r00r00         [24] 2029 	lcall	__gptrget
      000A44 FC               [12] 2030 	mov	r4,a
      000A45 C0 07            [24] 2031 	push	ar7
      000A47 C0 06            [24] 2032 	push	ar6
      000A49 C0 05            [24] 2033 	push	ar5
      000A4B 8A 82            [24] 2034 	mov	dpl,r2
      000A4D 8B 83            [24] 2035 	mov	dph,r3
      000A4F 8C F0            [24] 2036 	mov	b,r4
      000A51 12r00r00         [24] 2037 	lcall	_stack_pop
      000A54 AB 82            [24] 2038 	mov	r3,dpl
      000A56 AC 83            [24] 2039 	mov	r4,dph
      000A58 15 81            [12] 2040 	dec	sp
      000A5A 15 81            [12] 2041 	dec	sp
      000A5C 15 81            [12] 2042 	dec	sp
      000A5E EB               [12] 2043 	mov	a,r3
      000A5F 4C               [12] 2044 	orl	a,r4
      000A60 70 0C            [24] 2045 	jnz	00119$
      000A62 90r00r47         [24] 2046 	mov	dptr,#___str_9
      000A65 75 F0 80         [24] 2047 	mov	b,#0x80
      000A68 12r00r00         [24] 2048 	lcall	_printstr
      000A6B 02r23rA7         [24] 2049 	ljmp	00249$
      000A6E                       2050 00119$:
                                   2051 ;	calc.c:116: else if (!stack_pop(ctx->ps, &d1)) {
      000A6E E5*00            [12] 2052 	mov	a,_bp
      000A70 24 1E            [12] 2053 	add	a,#0x1e
      000A72 FF               [12] 2054 	mov	r7,a
      000A73 7E 00            [12] 2055 	mov	r6,#0x00
      000A75 7D 40            [12] 2056 	mov	r5,#0x40
      000A77 A8*00            [24] 2057 	mov	r0,_bp
      000A79 08               [12] 2058 	inc	r0
      000A7A 08               [12] 2059 	inc	r0
      000A7B 86 82            [24] 2060 	mov	dpl,@r0
      000A7D 08               [12] 2061 	inc	r0
      000A7E 86 83            [24] 2062 	mov	dph,@r0
      000A80 08               [12] 2063 	inc	r0
      000A81 86 F0            [24] 2064 	mov	b,@r0
      000A83 12r00r00         [24] 2065 	lcall	__gptrget
      000A86 FA               [12] 2066 	mov	r2,a
      000A87 A3               [24] 2067 	inc	dptr
      000A88 12r00r00         [24] 2068 	lcall	__gptrget
      000A8B FB               [12] 2069 	mov	r3,a
      000A8C A3               [24] 2070 	inc	dptr
      000A8D 12r00r00         [24] 2071 	lcall	__gptrget
      000A90 FC               [12] 2072 	mov	r4,a
      000A91 C0 07            [24] 2073 	push	ar7
      000A93 C0 06            [24] 2074 	push	ar6
      000A95 C0 05            [24] 2075 	push	ar5
      000A97 8A 82            [24] 2076 	mov	dpl,r2
      000A99 8B 83            [24] 2077 	mov	dph,r3
      000A9B 8C F0            [24] 2078 	mov	b,r4
      000A9D 12r00r00         [24] 2079 	lcall	_stack_pop
      000AA0 AB 82            [24] 2080 	mov	r3,dpl
      000AA2 AC 83            [24] 2081 	mov	r4,dph
      000AA4 15 81            [12] 2082 	dec	sp
      000AA6 15 81            [12] 2083 	dec	sp
      000AA8 15 81            [12] 2084 	dec	sp
      000AAA EB               [12] 2085 	mov	a,r3
      000AAB 4C               [12] 2086 	orl	a,r4
      000AAC 70 49            [24] 2087 	jnz	00116$
                                   2088 ;	calc.c:117: (void)stack_push(ctx->ps, d0);
      000AAE A8*00            [24] 2089 	mov	r0,_bp
      000AB0 08               [12] 2090 	inc	r0
      000AB1 08               [12] 2091 	inc	r0
      000AB2 86 82            [24] 2092 	mov	dpl,@r0
      000AB4 08               [12] 2093 	inc	r0
      000AB5 86 83            [24] 2094 	mov	dph,@r0
      000AB7 08               [12] 2095 	inc	r0
      000AB8 86 F0            [24] 2096 	mov	b,@r0
      000ABA 12r00r00         [24] 2097 	lcall	__gptrget
      000ABD FA               [12] 2098 	mov	r2,a
      000ABE A3               [24] 2099 	inc	dptr
      000ABF 12r00r00         [24] 2100 	lcall	__gptrget
      000AC2 FB               [12] 2101 	mov	r3,a
      000AC3 A3               [24] 2102 	inc	dptr
      000AC4 12r00r00         [24] 2103 	lcall	__gptrget
      000AC7 FC               [12] 2104 	mov	r4,a
      000AC8 E5*00            [12] 2105 	mov	a,_bp
      000ACA 24 1A            [12] 2106 	add	a,#0x1a
      000ACC F8               [12] 2107 	mov	r0,a
      000ACD E6               [12] 2108 	mov	a,@r0
      000ACE C0 E0            [24] 2109 	push	acc
      000AD0 08               [12] 2110 	inc	r0
      000AD1 E6               [12] 2111 	mov	a,@r0
      000AD2 C0 E0            [24] 2112 	push	acc
      000AD4 08               [12] 2113 	inc	r0
      000AD5 E6               [12] 2114 	mov	a,@r0
      000AD6 C0 E0            [24] 2115 	push	acc
      000AD8 08               [12] 2116 	inc	r0
      000AD9 E6               [12] 2117 	mov	a,@r0
      000ADA C0 E0            [24] 2118 	push	acc
      000ADC 8A 82            [24] 2119 	mov	dpl,r2
      000ADE 8B 83            [24] 2120 	mov	dph,r3
      000AE0 8C F0            [24] 2121 	mov	b,r4
      000AE2 12r00r00         [24] 2122 	lcall	_stack_push
      000AE5 E5 81            [12] 2123 	mov	a,sp
      000AE7 24 FC            [12] 2124 	add	a,#0xfc
      000AE9 F5 81            [12] 2125 	mov	sp,a
                                   2126 ;	calc.c:118: printstr("\r\nstack underflow\r\n");
      000AEB 90r00r47         [24] 2127 	mov	dptr,#___str_9
      000AEE 75 F0 80         [24] 2128 	mov	b,#0x80
      000AF1 12r00r00         [24] 2129 	lcall	_printstr
      000AF4 02r23rA7         [24] 2130 	ljmp	00249$
      000AF7                       2131 00116$:
                                   2132 ;	calc.c:120: (void)stack_push(ctx->ps, d0);
      000AF7 A8*00            [24] 2133 	mov	r0,_bp
      000AF9 08               [12] 2134 	inc	r0
      000AFA 08               [12] 2135 	inc	r0
      000AFB 86 82            [24] 2136 	mov	dpl,@r0
      000AFD 08               [12] 2137 	inc	r0
      000AFE 86 83            [24] 2138 	mov	dph,@r0
      000B00 08               [12] 2139 	inc	r0
      000B01 86 F0            [24] 2140 	mov	b,@r0
      000B03 12r00r00         [24] 2141 	lcall	__gptrget
      000B06 FA               [12] 2142 	mov	r2,a
      000B07 A3               [24] 2143 	inc	dptr
      000B08 12r00r00         [24] 2144 	lcall	__gptrget
      000B0B FB               [12] 2145 	mov	r3,a
      000B0C A3               [24] 2146 	inc	dptr
      000B0D 12r00r00         [24] 2147 	lcall	__gptrget
      000B10 FC               [12] 2148 	mov	r4,a
      000B11 E5*00            [12] 2149 	mov	a,_bp
      000B13 24 1A            [12] 2150 	add	a,#0x1a
      000B15 F8               [12] 2151 	mov	r0,a
      000B16 E6               [12] 2152 	mov	a,@r0
      000B17 C0 E0            [24] 2153 	push	acc
      000B19 08               [12] 2154 	inc	r0
      000B1A E6               [12] 2155 	mov	a,@r0
      000B1B C0 E0            [24] 2156 	push	acc
      000B1D 08               [12] 2157 	inc	r0
      000B1E E6               [12] 2158 	mov	a,@r0
      000B1F C0 E0            [24] 2159 	push	acc
      000B21 08               [12] 2160 	inc	r0
      000B22 E6               [12] 2161 	mov	a,@r0
      000B23 C0 E0            [24] 2162 	push	acc
      000B25 8A 82            [24] 2163 	mov	dpl,r2
      000B27 8B 83            [24] 2164 	mov	dph,r3
      000B29 8C F0            [24] 2165 	mov	b,r4
      000B2B 12r00r00         [24] 2166 	lcall	_stack_push
      000B2E E5 81            [12] 2167 	mov	a,sp
      000B30 24 FC            [12] 2168 	add	a,#0xfc
      000B32 F5 81            [12] 2169 	mov	sp,a
                                   2170 ;	calc.c:121: (void)stack_push(ctx->ps, d1);
      000B34 A8*00            [24] 2171 	mov	r0,_bp
      000B36 08               [12] 2172 	inc	r0
      000B37 08               [12] 2173 	inc	r0
      000B38 86 82            [24] 2174 	mov	dpl,@r0
      000B3A 08               [12] 2175 	inc	r0
      000B3B 86 83            [24] 2176 	mov	dph,@r0
      000B3D 08               [12] 2177 	inc	r0
      000B3E 86 F0            [24] 2178 	mov	b,@r0
      000B40 12r00r00         [24] 2179 	lcall	__gptrget
      000B43 FA               [12] 2180 	mov	r2,a
      000B44 A3               [24] 2181 	inc	dptr
      000B45 12r00r00         [24] 2182 	lcall	__gptrget
      000B48 FB               [12] 2183 	mov	r3,a
      000B49 A3               [24] 2184 	inc	dptr
      000B4A 12r00r00         [24] 2185 	lcall	__gptrget
      000B4D FC               [12] 2186 	mov	r4,a
      000B4E E5*00            [12] 2187 	mov	a,_bp
      000B50 24 1E            [12] 2188 	add	a,#0x1e
      000B52 F8               [12] 2189 	mov	r0,a
      000B53 E6               [12] 2190 	mov	a,@r0
      000B54 C0 E0            [24] 2191 	push	acc
      000B56 08               [12] 2192 	inc	r0
      000B57 E6               [12] 2193 	mov	a,@r0
      000B58 C0 E0            [24] 2194 	push	acc
      000B5A 08               [12] 2195 	inc	r0
      000B5B E6               [12] 2196 	mov	a,@r0
      000B5C C0 E0            [24] 2197 	push	acc
      000B5E 08               [12] 2198 	inc	r0
      000B5F E6               [12] 2199 	mov	a,@r0
      000B60 C0 E0            [24] 2200 	push	acc
      000B62 8A 82            [24] 2201 	mov	dpl,r2
      000B64 8B 83            [24] 2202 	mov	dph,r3
      000B66 8C F0            [24] 2203 	mov	b,r4
      000B68 12r00r00         [24] 2204 	lcall	_stack_push
      000B6B E5 81            [12] 2205 	mov	a,sp
      000B6D 24 FC            [12] 2206 	add	a,#0xfc
      000B6F F5 81            [12] 2207 	mov	sp,a
                                   2208 ;	calc.c:123: break;
      000B71 02r23rA7         [24] 2209 	ljmp	00249$
                                   2210 ;	calc.c:124: case 'm':
      000B74                       2211 00121$:
                                   2212 ;	calc.c:125: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      000B74 E5*00            [12] 2213 	mov	a,_bp
      000B76 24 1A            [12] 2214 	add	a,#0x1a
      000B78 FF               [12] 2215 	mov	r7,a
      000B79 7E 00            [12] 2216 	mov	r6,#0x00
      000B7B 7D 40            [12] 2217 	mov	r5,#0x40
      000B7D E5*00            [12] 2218 	mov	a,_bp
      000B7F 24 17            [12] 2219 	add	a,#0x17
      000B81 F8               [12] 2220 	mov	r0,a
      000B82 E5*00            [12] 2221 	mov	a,_bp
      000B84 24 05            [12] 2222 	add	a,#0x05
      000B86 F9               [12] 2223 	mov	r1,a
      000B87 74 11            [12] 2224 	mov	a,#0x11
      000B89 26               [12] 2225 	add	a,@r0
      000B8A F7               [12] 2226 	mov	@r1,a
      000B8B 74 40            [12] 2227 	mov	a,#0x40
      000B8D 08               [12] 2228 	inc	r0
      000B8E 36               [12] 2229 	addc	a,@r0
      000B8F 09               [12] 2230 	inc	r1
      000B90 F7               [12] 2231 	mov	@r1,a
      000B91 08               [12] 2232 	inc	r0
      000B92 09               [12] 2233 	inc	r1
      000B93 E6               [12] 2234 	mov	a,@r0
      000B94 F7               [12] 2235 	mov	@r1,a
      000B95 E5*00            [12] 2236 	mov	a,_bp
      000B97 24 05            [12] 2237 	add	a,#0x05
      000B99 F8               [12] 2238 	mov	r0,a
      000B9A 86 82            [24] 2239 	mov	dpl,@r0
      000B9C 08               [12] 2240 	inc	r0
      000B9D 86 83            [24] 2241 	mov	dph,@r0
      000B9F 08               [12] 2242 	inc	r0
      000BA0 86 F0            [24] 2243 	mov	b,@r0
      000BA2 12r00r00         [24] 2244 	lcall	__gptrget
      000BA5 FA               [12] 2245 	mov	r2,a
      000BA6 A3               [24] 2246 	inc	dptr
      000BA7 12r00r00         [24] 2247 	lcall	__gptrget
      000BAA FB               [12] 2248 	mov	r3,a
      000BAB A3               [24] 2249 	inc	dptr
      000BAC 12r00r00         [24] 2250 	lcall	__gptrget
      000BAF FC               [12] 2251 	mov	r4,a
      000BB0 C0 07            [24] 2252 	push	ar7
      000BB2 C0 06            [24] 2253 	push	ar6
      000BB4 C0 05            [24] 2254 	push	ar5
      000BB6 8A 82            [24] 2255 	mov	dpl,r2
      000BB8 8B 83            [24] 2256 	mov	dph,r3
      000BBA 8C F0            [24] 2257 	mov	b,r4
      000BBC 12r00r00         [24] 2258 	lcall	_stack_pop
      000BBF AB 82            [24] 2259 	mov	r3,dpl
      000BC1 AC 83            [24] 2260 	mov	r4,dph
      000BC3 15 81            [12] 2261 	dec	sp
      000BC5 15 81            [12] 2262 	dec	sp
      000BC7 15 81            [12] 2263 	dec	sp
      000BC9 EB               [12] 2264 	mov	a,r3
      000BCA 4C               [12] 2265 	orl	a,r4
      000BCB 70 0C            [24] 2266 	jnz	00125$
      000BCD 90r00r47         [24] 2267 	mov	dptr,#___str_9
      000BD0 75 F0 80         [24] 2268 	mov	b,#0x80
      000BD3 12r00r00         [24] 2269 	lcall	_printstr
      000BD6 02r23rA7         [24] 2270 	ljmp	00249$
      000BD9                       2271 00125$:
                                   2272 ;	calc.c:127: if (!stack_push(ctx->ss, d0)) {
      000BD9 E5*00            [12] 2273 	mov	a,_bp
      000BDB 24 17            [12] 2274 	add	a,#0x17
      000BDD F8               [12] 2275 	mov	r0,a
      000BDE 74 14            [12] 2276 	mov	a,#0x14
      000BE0 26               [12] 2277 	add	a,@r0
      000BE1 FA               [12] 2278 	mov	r2,a
      000BE2 74 40            [12] 2279 	mov	a,#0x40
      000BE4 08               [12] 2280 	inc	r0
      000BE5 36               [12] 2281 	addc	a,@r0
      000BE6 FB               [12] 2282 	mov	r3,a
      000BE7 08               [12] 2283 	inc	r0
      000BE8 86 04            [24] 2284 	mov	ar4,@r0
      000BEA 8A 82            [24] 2285 	mov	dpl,r2
      000BEC 8B 83            [24] 2286 	mov	dph,r3
      000BEE 8C F0            [24] 2287 	mov	b,r4
      000BF0 12r00r00         [24] 2288 	lcall	__gptrget
      000BF3 FA               [12] 2289 	mov	r2,a
      000BF4 A3               [24] 2290 	inc	dptr
      000BF5 12r00r00         [24] 2291 	lcall	__gptrget
      000BF8 FB               [12] 2292 	mov	r3,a
      000BF9 A3               [24] 2293 	inc	dptr
      000BFA 12r00r00         [24] 2294 	lcall	__gptrget
      000BFD FC               [12] 2295 	mov	r4,a
      000BFE E5*00            [12] 2296 	mov	a,_bp
      000C00 24 1A            [12] 2297 	add	a,#0x1a
      000C02 F8               [12] 2298 	mov	r0,a
      000C03 E6               [12] 2299 	mov	a,@r0
      000C04 C0 E0            [24] 2300 	push	acc
      000C06 08               [12] 2301 	inc	r0
      000C07 E6               [12] 2302 	mov	a,@r0
      000C08 C0 E0            [24] 2303 	push	acc
      000C0A 08               [12] 2304 	inc	r0
      000C0B E6               [12] 2305 	mov	a,@r0
      000C0C C0 E0            [24] 2306 	push	acc
      000C0E 08               [12] 2307 	inc	r0
      000C0F E6               [12] 2308 	mov	a,@r0
      000C10 C0 E0            [24] 2309 	push	acc
      000C12 8A 82            [24] 2310 	mov	dpl,r2
      000C14 8B 83            [24] 2311 	mov	dph,r3
      000C16 8C F0            [24] 2312 	mov	b,r4
      000C18 12r00r00         [24] 2313 	lcall	_stack_push
      000C1B AB 82            [24] 2314 	mov	r3,dpl
      000C1D AC 83            [24] 2315 	mov	r4,dph
      000C1F E5 81            [12] 2316 	mov	a,sp
      000C21 24 FC            [12] 2317 	add	a,#0xfc
      000C23 F5 81            [12] 2318 	mov	sp,a
      000C25 EB               [12] 2319 	mov	a,r3
      000C26 4C               [12] 2320 	orl	a,r4
      000C27 60 03            [24] 2321 	jz	00558$
      000C29 02r23rA7         [24] 2322 	ljmp	00249$
      000C2C                       2323 00558$:
                                   2324 ;	calc.c:128: printstr("\r\nsecondary stack overflow\r\n");
      000C2C 90r00r5B         [24] 2325 	mov	dptr,#___str_10
      000C2F 75 F0 80         [24] 2326 	mov	b,#0x80
      000C32 12r00r00         [24] 2327 	lcall	_printstr
                                   2328 ;	calc.c:129: (void)stack_push(ctx->ps, d0);
      000C35 E5*00            [12] 2329 	mov	a,_bp
      000C37 24 05            [12] 2330 	add	a,#0x05
      000C39 F8               [12] 2331 	mov	r0,a
      000C3A 86 82            [24] 2332 	mov	dpl,@r0
      000C3C 08               [12] 2333 	inc	r0
      000C3D 86 83            [24] 2334 	mov	dph,@r0
      000C3F 08               [12] 2335 	inc	r0
      000C40 86 F0            [24] 2336 	mov	b,@r0
      000C42 12r00r00         [24] 2337 	lcall	__gptrget
      000C45 FA               [12] 2338 	mov	r2,a
      000C46 A3               [24] 2339 	inc	dptr
      000C47 12r00r00         [24] 2340 	lcall	__gptrget
      000C4A FB               [12] 2341 	mov	r3,a
      000C4B A3               [24] 2342 	inc	dptr
      000C4C 12r00r00         [24] 2343 	lcall	__gptrget
      000C4F FC               [12] 2344 	mov	r4,a
      000C50 E5*00            [12] 2345 	mov	a,_bp
      000C52 24 1A            [12] 2346 	add	a,#0x1a
      000C54 F8               [12] 2347 	mov	r0,a
      000C55 E6               [12] 2348 	mov	a,@r0
      000C56 C0 E0            [24] 2349 	push	acc
      000C58 08               [12] 2350 	inc	r0
      000C59 E6               [12] 2351 	mov	a,@r0
      000C5A C0 E0            [24] 2352 	push	acc
      000C5C 08               [12] 2353 	inc	r0
      000C5D E6               [12] 2354 	mov	a,@r0
      000C5E C0 E0            [24] 2355 	push	acc
      000C60 08               [12] 2356 	inc	r0
      000C61 E6               [12] 2357 	mov	a,@r0
      000C62 C0 E0            [24] 2358 	push	acc
      000C64 8A 82            [24] 2359 	mov	dpl,r2
      000C66 8B 83            [24] 2360 	mov	dph,r3
      000C68 8C F0            [24] 2361 	mov	b,r4
      000C6A 12r00r00         [24] 2362 	lcall	_stack_push
      000C6D E5 81            [12] 2363 	mov	a,sp
      000C6F 24 FC            [12] 2364 	add	a,#0xfc
      000C71 F5 81            [12] 2365 	mov	sp,a
                                   2366 ;	calc.c:132: break;
      000C73 02r23rA7         [24] 2367 	ljmp	00249$
                                   2368 ;	calc.c:133: case 'M':
      000C76                       2369 00127$:
                                   2370 ;	calc.c:134: if (!stack_pop(ctx->ss, &d0)) printstr("\r\nsecondary stack underflow\r\n");
      000C76 E5*00            [12] 2371 	mov	a,_bp
      000C78 24 1A            [12] 2372 	add	a,#0x1a
      000C7A FF               [12] 2373 	mov	r7,a
      000C7B 7E 00            [12] 2374 	mov	r6,#0x00
      000C7D 7D 40            [12] 2375 	mov	r5,#0x40
      000C7F E5*00            [12] 2376 	mov	a,_bp
      000C81 24 17            [12] 2377 	add	a,#0x17
      000C83 F8               [12] 2378 	mov	r0,a
      000C84 E5*00            [12] 2379 	mov	a,_bp
      000C86 24 05            [12] 2380 	add	a,#0x05
      000C88 F9               [12] 2381 	mov	r1,a
      000C89 74 14            [12] 2382 	mov	a,#0x14
      000C8B 26               [12] 2383 	add	a,@r0
      000C8C F7               [12] 2384 	mov	@r1,a
      000C8D 74 40            [12] 2385 	mov	a,#0x40
      000C8F 08               [12] 2386 	inc	r0
      000C90 36               [12] 2387 	addc	a,@r0
      000C91 09               [12] 2388 	inc	r1
      000C92 F7               [12] 2389 	mov	@r1,a
      000C93 08               [12] 2390 	inc	r0
      000C94 09               [12] 2391 	inc	r1
      000C95 E6               [12] 2392 	mov	a,@r0
      000C96 F7               [12] 2393 	mov	@r1,a
      000C97 E5*00            [12] 2394 	mov	a,_bp
      000C99 24 05            [12] 2395 	add	a,#0x05
      000C9B F8               [12] 2396 	mov	r0,a
      000C9C 86 82            [24] 2397 	mov	dpl,@r0
      000C9E 08               [12] 2398 	inc	r0
      000C9F 86 83            [24] 2399 	mov	dph,@r0
      000CA1 08               [12] 2400 	inc	r0
      000CA2 86 F0            [24] 2401 	mov	b,@r0
      000CA4 12r00r00         [24] 2402 	lcall	__gptrget
      000CA7 FA               [12] 2403 	mov	r2,a
      000CA8 A3               [24] 2404 	inc	dptr
      000CA9 12r00r00         [24] 2405 	lcall	__gptrget
      000CAC FB               [12] 2406 	mov	r3,a
      000CAD A3               [24] 2407 	inc	dptr
      000CAE 12r00r00         [24] 2408 	lcall	__gptrget
      000CB1 FC               [12] 2409 	mov	r4,a
      000CB2 C0 07            [24] 2410 	push	ar7
      000CB4 C0 06            [24] 2411 	push	ar6
      000CB6 C0 05            [24] 2412 	push	ar5
      000CB8 8A 82            [24] 2413 	mov	dpl,r2
      000CBA 8B 83            [24] 2414 	mov	dph,r3
      000CBC 8C F0            [24] 2415 	mov	b,r4
      000CBE 12r00r00         [24] 2416 	lcall	_stack_pop
      000CC1 AB 82            [24] 2417 	mov	r3,dpl
      000CC3 AC 83            [24] 2418 	mov	r4,dph
      000CC5 15 81            [12] 2419 	dec	sp
      000CC7 15 81            [12] 2420 	dec	sp
      000CC9 15 81            [12] 2421 	dec	sp
      000CCB EB               [12] 2422 	mov	a,r3
      000CCC 4C               [12] 2423 	orl	a,r4
      000CCD 70 0C            [24] 2424 	jnz	00131$
      000CCF 90r00r78         [24] 2425 	mov	dptr,#___str_11
      000CD2 75 F0 80         [24] 2426 	mov	b,#0x80
      000CD5 12r00r00         [24] 2427 	lcall	_printstr
      000CD8 02r23rA7         [24] 2428 	ljmp	00249$
      000CDB                       2429 00131$:
                                   2430 ;	calc.c:136: if (!stack_push(ctx->ps, d0)) {
      000CDB E5*00            [12] 2431 	mov	a,_bp
      000CDD 24 17            [12] 2432 	add	a,#0x17
      000CDF F8               [12] 2433 	mov	r0,a
      000CE0 74 11            [12] 2434 	mov	a,#0x11
      000CE2 26               [12] 2435 	add	a,@r0
      000CE3 FA               [12] 2436 	mov	r2,a
      000CE4 74 40            [12] 2437 	mov	a,#0x40
      000CE6 08               [12] 2438 	inc	r0
      000CE7 36               [12] 2439 	addc	a,@r0
      000CE8 FB               [12] 2440 	mov	r3,a
      000CE9 08               [12] 2441 	inc	r0
      000CEA 86 04            [24] 2442 	mov	ar4,@r0
      000CEC 8A 82            [24] 2443 	mov	dpl,r2
      000CEE 8B 83            [24] 2444 	mov	dph,r3
      000CF0 8C F0            [24] 2445 	mov	b,r4
      000CF2 12r00r00         [24] 2446 	lcall	__gptrget
      000CF5 FA               [12] 2447 	mov	r2,a
      000CF6 A3               [24] 2448 	inc	dptr
      000CF7 12r00r00         [24] 2449 	lcall	__gptrget
      000CFA FB               [12] 2450 	mov	r3,a
      000CFB A3               [24] 2451 	inc	dptr
      000CFC 12r00r00         [24] 2452 	lcall	__gptrget
      000CFF FC               [12] 2453 	mov	r4,a
      000D00 E5*00            [12] 2454 	mov	a,_bp
      000D02 24 1A            [12] 2455 	add	a,#0x1a
      000D04 F8               [12] 2456 	mov	r0,a
      000D05 E6               [12] 2457 	mov	a,@r0
      000D06 C0 E0            [24] 2458 	push	acc
      000D08 08               [12] 2459 	inc	r0
      000D09 E6               [12] 2460 	mov	a,@r0
      000D0A C0 E0            [24] 2461 	push	acc
      000D0C 08               [12] 2462 	inc	r0
      000D0D E6               [12] 2463 	mov	a,@r0
      000D0E C0 E0            [24] 2464 	push	acc
      000D10 08               [12] 2465 	inc	r0
      000D11 E6               [12] 2466 	mov	a,@r0
      000D12 C0 E0            [24] 2467 	push	acc
      000D14 8A 82            [24] 2468 	mov	dpl,r2
      000D16 8B 83            [24] 2469 	mov	dph,r3
      000D18 8C F0            [24] 2470 	mov	b,r4
      000D1A 12r00r00         [24] 2471 	lcall	_stack_push
      000D1D AB 82            [24] 2472 	mov	r3,dpl
      000D1F AC 83            [24] 2473 	mov	r4,dph
      000D21 E5 81            [12] 2474 	mov	a,sp
      000D23 24 FC            [12] 2475 	add	a,#0xfc
      000D25 F5 81            [12] 2476 	mov	sp,a
      000D27 EB               [12] 2477 	mov	a,r3
      000D28 4C               [12] 2478 	orl	a,r4
      000D29 60 03            [24] 2479 	jz	00560$
      000D2B 02r23rA7         [24] 2480 	ljmp	00249$
      000D2E                       2481 00560$:
                                   2482 ;	calc.c:137: printstr("\r\nstack overflow\r\n");
      000D2E 90r00r96         [24] 2483 	mov	dptr,#___str_12
      000D31 75 F0 80         [24] 2484 	mov	b,#0x80
      000D34 12r00r00         [24] 2485 	lcall	_printstr
                                   2486 ;	calc.c:138: (void)stack_push(ctx->ss, d0);
      000D37 E5*00            [12] 2487 	mov	a,_bp
      000D39 24 05            [12] 2488 	add	a,#0x05
      000D3B F8               [12] 2489 	mov	r0,a
      000D3C 86 82            [24] 2490 	mov	dpl,@r0
      000D3E 08               [12] 2491 	inc	r0
      000D3F 86 83            [24] 2492 	mov	dph,@r0
      000D41 08               [12] 2493 	inc	r0
      000D42 86 F0            [24] 2494 	mov	b,@r0
      000D44 12r00r00         [24] 2495 	lcall	__gptrget
      000D47 FA               [12] 2496 	mov	r2,a
      000D48 A3               [24] 2497 	inc	dptr
      000D49 12r00r00         [24] 2498 	lcall	__gptrget
      000D4C FB               [12] 2499 	mov	r3,a
      000D4D A3               [24] 2500 	inc	dptr
      000D4E 12r00r00         [24] 2501 	lcall	__gptrget
      000D51 FC               [12] 2502 	mov	r4,a
      000D52 E5*00            [12] 2503 	mov	a,_bp
      000D54 24 1A            [12] 2504 	add	a,#0x1a
      000D56 F8               [12] 2505 	mov	r0,a
      000D57 E6               [12] 2506 	mov	a,@r0
      000D58 C0 E0            [24] 2507 	push	acc
      000D5A 08               [12] 2508 	inc	r0
      000D5B E6               [12] 2509 	mov	a,@r0
      000D5C C0 E0            [24] 2510 	push	acc
      000D5E 08               [12] 2511 	inc	r0
      000D5F E6               [12] 2512 	mov	a,@r0
      000D60 C0 E0            [24] 2513 	push	acc
      000D62 08               [12] 2514 	inc	r0
      000D63 E6               [12] 2515 	mov	a,@r0
      000D64 C0 E0            [24] 2516 	push	acc
      000D66 8A 82            [24] 2517 	mov	dpl,r2
      000D68 8B 83            [24] 2518 	mov	dph,r3
      000D6A 8C F0            [24] 2519 	mov	b,r4
      000D6C 12r00r00         [24] 2520 	lcall	_stack_push
      000D6F E5 81            [12] 2521 	mov	a,sp
      000D71 24 FC            [12] 2522 	add	a,#0xfc
      000D73 F5 81            [12] 2523 	mov	sp,a
                                   2524 ;	calc.c:141: break;
      000D75 02r23rA7         [24] 2525 	ljmp	00249$
                                   2526 ;	calc.c:142: case 'u':
      000D78                       2527 00133$:
                                   2528 ;	calc.c:143: if (!stack_peek(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      000D78 E5*00            [12] 2529 	mov	a,_bp
      000D7A 24 1A            [12] 2530 	add	a,#0x1a
      000D7C FF               [12] 2531 	mov	r7,a
      000D7D 7E 00            [12] 2532 	mov	r6,#0x00
      000D7F 7D 40            [12] 2533 	mov	r5,#0x40
      000D81 E5*00            [12] 2534 	mov	a,_bp
      000D83 24 17            [12] 2535 	add	a,#0x17
      000D85 F8               [12] 2536 	mov	r0,a
      000D86 74 11            [12] 2537 	mov	a,#0x11
      000D88 26               [12] 2538 	add	a,@r0
      000D89 FA               [12] 2539 	mov	r2,a
      000D8A ED               [12] 2540 	mov	a,r5
      000D8B 08               [12] 2541 	inc	r0
      000D8C 36               [12] 2542 	addc	a,@r0
      000D8D FB               [12] 2543 	mov	r3,a
      000D8E 08               [12] 2544 	inc	r0
      000D8F 86 04            [24] 2545 	mov	ar4,@r0
      000D91 8A 82            [24] 2546 	mov	dpl,r2
      000D93 8B 83            [24] 2547 	mov	dph,r3
      000D95 8C F0            [24] 2548 	mov	b,r4
      000D97 12r00r00         [24] 2549 	lcall	__gptrget
      000D9A FA               [12] 2550 	mov	r2,a
      000D9B A3               [24] 2551 	inc	dptr
      000D9C 12r00r00         [24] 2552 	lcall	__gptrget
      000D9F FB               [12] 2553 	mov	r3,a
      000DA0 A3               [24] 2554 	inc	dptr
      000DA1 12r00r00         [24] 2555 	lcall	__gptrget
      000DA4 FC               [12] 2556 	mov	r4,a
      000DA5 C0 07            [24] 2557 	push	ar7
      000DA7 C0 06            [24] 2558 	push	ar6
      000DA9 C0 05            [24] 2559 	push	ar5
      000DAB 8A 82            [24] 2560 	mov	dpl,r2
      000DAD 8B 83            [24] 2561 	mov	dph,r3
      000DAF 8C F0            [24] 2562 	mov	b,r4
      000DB1 12r00r00         [24] 2563 	lcall	_stack_peek
      000DB4 AB 82            [24] 2564 	mov	r3,dpl
      000DB6 AC 83            [24] 2565 	mov	r4,dph
      000DB8 15 81            [12] 2566 	dec	sp
      000DBA 15 81            [12] 2567 	dec	sp
      000DBC 15 81            [12] 2568 	dec	sp
      000DBE EB               [12] 2569 	mov	a,r3
      000DBF 4C               [12] 2570 	orl	a,r4
      000DC0 70 0C            [24] 2571 	jnz	00137$
      000DC2 90r00r47         [24] 2572 	mov	dptr,#___str_9
      000DC5 75 F0 80         [24] 2573 	mov	b,#0x80
      000DC8 12r00r00         [24] 2574 	lcall	_printstr
      000DCB 02r23rA7         [24] 2575 	ljmp	00249$
      000DCE                       2576 00137$:
                                   2577 ;	calc.c:144: else if (!stack_push(ctx->ss, d0)) printstr("\r\nsecondary stack overflow\r\n");
      000DCE E5*00            [12] 2578 	mov	a,_bp
      000DD0 24 17            [12] 2579 	add	a,#0x17
      000DD2 F8               [12] 2580 	mov	r0,a
      000DD3 74 14            [12] 2581 	mov	a,#0x14
      000DD5 26               [12] 2582 	add	a,@r0
      000DD6 FA               [12] 2583 	mov	r2,a
      000DD7 74 40            [12] 2584 	mov	a,#0x40
      000DD9 08               [12] 2585 	inc	r0
      000DDA 36               [12] 2586 	addc	a,@r0
      000DDB FB               [12] 2587 	mov	r3,a
      000DDC 08               [12] 2588 	inc	r0
      000DDD 86 04            [24] 2589 	mov	ar4,@r0
      000DDF 8A 82            [24] 2590 	mov	dpl,r2
      000DE1 8B 83            [24] 2591 	mov	dph,r3
      000DE3 8C F0            [24] 2592 	mov	b,r4
      000DE5 12r00r00         [24] 2593 	lcall	__gptrget
      000DE8 FA               [12] 2594 	mov	r2,a
      000DE9 A3               [24] 2595 	inc	dptr
      000DEA 12r00r00         [24] 2596 	lcall	__gptrget
      000DED FB               [12] 2597 	mov	r3,a
      000DEE A3               [24] 2598 	inc	dptr
      000DEF 12r00r00         [24] 2599 	lcall	__gptrget
      000DF2 FC               [12] 2600 	mov	r4,a
      000DF3 E5*00            [12] 2601 	mov	a,_bp
      000DF5 24 1A            [12] 2602 	add	a,#0x1a
      000DF7 F8               [12] 2603 	mov	r0,a
      000DF8 E6               [12] 2604 	mov	a,@r0
      000DF9 C0 E0            [24] 2605 	push	acc
      000DFB 08               [12] 2606 	inc	r0
      000DFC E6               [12] 2607 	mov	a,@r0
      000DFD C0 E0            [24] 2608 	push	acc
      000DFF 08               [12] 2609 	inc	r0
      000E00 E6               [12] 2610 	mov	a,@r0
      000E01 C0 E0            [24] 2611 	push	acc
      000E03 08               [12] 2612 	inc	r0
      000E04 E6               [12] 2613 	mov	a,@r0
      000E05 C0 E0            [24] 2614 	push	acc
      000E07 8A 82            [24] 2615 	mov	dpl,r2
      000E09 8B 83            [24] 2616 	mov	dph,r3
      000E0B 8C F0            [24] 2617 	mov	b,r4
      000E0D 12r00r00         [24] 2618 	lcall	_stack_push
      000E10 AB 82            [24] 2619 	mov	r3,dpl
      000E12 AC 83            [24] 2620 	mov	r4,dph
      000E14 E5 81            [12] 2621 	mov	a,sp
      000E16 24 FC            [12] 2622 	add	a,#0xfc
      000E18 F5 81            [12] 2623 	mov	sp,a
      000E1A EB               [12] 2624 	mov	a,r3
      000E1B 4C               [12] 2625 	orl	a,r4
      000E1C 60 03            [24] 2626 	jz	00562$
      000E1E 02r23rA7         [24] 2627 	ljmp	00249$
      000E21                       2628 00562$:
      000E21 90r00r5B         [24] 2629 	mov	dptr,#___str_10
      000E24 75 F0 80         [24] 2630 	mov	b,#0x80
      000E27 12r00r00         [24] 2631 	lcall	_printstr
                                   2632 ;	calc.c:145: break;
      000E2A 02r23rA7         [24] 2633 	ljmp	00249$
                                   2634 ;	calc.c:146: case 'U':
      000E2D                       2635 00139$:
                                   2636 ;	calc.c:147: if (!stack_peek(ctx->ss, &d0)) printstr("\r\nsecondary stack underflow\r\n");
      000E2D E5*00            [12] 2637 	mov	a,_bp
      000E2F 24 1A            [12] 2638 	add	a,#0x1a
      000E31 FF               [12] 2639 	mov	r7,a
      000E32 7E 00            [12] 2640 	mov	r6,#0x00
      000E34 7D 40            [12] 2641 	mov	r5,#0x40
      000E36 E5*00            [12] 2642 	mov	a,_bp
      000E38 24 17            [12] 2643 	add	a,#0x17
      000E3A F8               [12] 2644 	mov	r0,a
      000E3B 74 14            [12] 2645 	mov	a,#0x14
      000E3D 26               [12] 2646 	add	a,@r0
      000E3E FA               [12] 2647 	mov	r2,a
      000E3F ED               [12] 2648 	mov	a,r5
      000E40 08               [12] 2649 	inc	r0
      000E41 36               [12] 2650 	addc	a,@r0
      000E42 FB               [12] 2651 	mov	r3,a
      000E43 08               [12] 2652 	inc	r0
      000E44 86 04            [24] 2653 	mov	ar4,@r0
      000E46 8A 82            [24] 2654 	mov	dpl,r2
      000E48 8B 83            [24] 2655 	mov	dph,r3
      000E4A 8C F0            [24] 2656 	mov	b,r4
      000E4C 12r00r00         [24] 2657 	lcall	__gptrget
      000E4F FA               [12] 2658 	mov	r2,a
      000E50 A3               [24] 2659 	inc	dptr
      000E51 12r00r00         [24] 2660 	lcall	__gptrget
      000E54 FB               [12] 2661 	mov	r3,a
      000E55 A3               [24] 2662 	inc	dptr
      000E56 12r00r00         [24] 2663 	lcall	__gptrget
      000E59 FC               [12] 2664 	mov	r4,a
      000E5A C0 07            [24] 2665 	push	ar7
      000E5C C0 06            [24] 2666 	push	ar6
      000E5E C0 05            [24] 2667 	push	ar5
      000E60 8A 82            [24] 2668 	mov	dpl,r2
      000E62 8B 83            [24] 2669 	mov	dph,r3
      000E64 8C F0            [24] 2670 	mov	b,r4
      000E66 12r00r00         [24] 2671 	lcall	_stack_peek
      000E69 AB 82            [24] 2672 	mov	r3,dpl
      000E6B AC 83            [24] 2673 	mov	r4,dph
      000E6D 15 81            [12] 2674 	dec	sp
      000E6F 15 81            [12] 2675 	dec	sp
      000E71 15 81            [12] 2676 	dec	sp
      000E73 EB               [12] 2677 	mov	a,r3
      000E74 4C               [12] 2678 	orl	a,r4
      000E75 70 0C            [24] 2679 	jnz	00143$
      000E77 90r00r78         [24] 2680 	mov	dptr,#___str_11
      000E7A 75 F0 80         [24] 2681 	mov	b,#0x80
      000E7D 12r00r00         [24] 2682 	lcall	_printstr
      000E80 02r23rA7         [24] 2683 	ljmp	00249$
      000E83                       2684 00143$:
                                   2685 ;	calc.c:148: else if (!stack_push(ctx->ps, d0)) printstr("\r\nstack overflow\r\n");
      000E83 E5*00            [12] 2686 	mov	a,_bp
      000E85 24 17            [12] 2687 	add	a,#0x17
      000E87 F8               [12] 2688 	mov	r0,a
      000E88 74 11            [12] 2689 	mov	a,#0x11
      000E8A 26               [12] 2690 	add	a,@r0
      000E8B FA               [12] 2691 	mov	r2,a
      000E8C 74 40            [12] 2692 	mov	a,#0x40
      000E8E 08               [12] 2693 	inc	r0
      000E8F 36               [12] 2694 	addc	a,@r0
      000E90 FB               [12] 2695 	mov	r3,a
      000E91 08               [12] 2696 	inc	r0
      000E92 86 04            [24] 2697 	mov	ar4,@r0
      000E94 8A 82            [24] 2698 	mov	dpl,r2
      000E96 8B 83            [24] 2699 	mov	dph,r3
      000E98 8C F0            [24] 2700 	mov	b,r4
      000E9A 12r00r00         [24] 2701 	lcall	__gptrget
      000E9D FA               [12] 2702 	mov	r2,a
      000E9E A3               [24] 2703 	inc	dptr
      000E9F 12r00r00         [24] 2704 	lcall	__gptrget
      000EA2 FB               [12] 2705 	mov	r3,a
      000EA3 A3               [24] 2706 	inc	dptr
      000EA4 12r00r00         [24] 2707 	lcall	__gptrget
      000EA7 FC               [12] 2708 	mov	r4,a
      000EA8 E5*00            [12] 2709 	mov	a,_bp
      000EAA 24 1A            [12] 2710 	add	a,#0x1a
      000EAC F8               [12] 2711 	mov	r0,a
      000EAD E6               [12] 2712 	mov	a,@r0
      000EAE C0 E0            [24] 2713 	push	acc
      000EB0 08               [12] 2714 	inc	r0
      000EB1 E6               [12] 2715 	mov	a,@r0
      000EB2 C0 E0            [24] 2716 	push	acc
      000EB4 08               [12] 2717 	inc	r0
      000EB5 E6               [12] 2718 	mov	a,@r0
      000EB6 C0 E0            [24] 2719 	push	acc
      000EB8 08               [12] 2720 	inc	r0
      000EB9 E6               [12] 2721 	mov	a,@r0
      000EBA C0 E0            [24] 2722 	push	acc
      000EBC 8A 82            [24] 2723 	mov	dpl,r2
      000EBE 8B 83            [24] 2724 	mov	dph,r3
      000EC0 8C F0            [24] 2725 	mov	b,r4
      000EC2 12r00r00         [24] 2726 	lcall	_stack_push
      000EC5 AB 82            [24] 2727 	mov	r3,dpl
      000EC7 AC 83            [24] 2728 	mov	r4,dph
      000EC9 E5 81            [12] 2729 	mov	a,sp
      000ECB 24 FC            [12] 2730 	add	a,#0xfc
      000ECD F5 81            [12] 2731 	mov	sp,a
      000ECF EB               [12] 2732 	mov	a,r3
      000ED0 4C               [12] 2733 	orl	a,r4
      000ED1 60 03            [24] 2734 	jz	00564$
      000ED3 02r23rA7         [24] 2735 	ljmp	00249$
      000ED6                       2736 00564$:
      000ED6 90r00r96         [24] 2737 	mov	dptr,#___str_12
      000ED9 75 F0 80         [24] 2738 	mov	b,#0x80
      000EDC 12r00r00         [24] 2739 	lcall	_printstr
                                   2740 ;	calc.c:149: break;
      000EDF 02r23rA7         [24] 2741 	ljmp	00249$
                                   2742 ;	calc.c:150: case 'T':
      000EE2                       2743 00145$:
                                   2744 ;	calc.c:151: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      000EE2 E5*00            [12] 2745 	mov	a,_bp
      000EE4 24 1A            [12] 2746 	add	a,#0x1a
      000EE6 FF               [12] 2747 	mov	r7,a
      000EE7 7E 00            [12] 2748 	mov	r6,#0x00
      000EE9 7D 40            [12] 2749 	mov	r5,#0x40
      000EEB E5*00            [12] 2750 	mov	a,_bp
      000EED 24 17            [12] 2751 	add	a,#0x17
      000EEF F8               [12] 2752 	mov	r0,a
      000EF0 E5*00            [12] 2753 	mov	a,_bp
      000EF2 24 05            [12] 2754 	add	a,#0x05
      000EF4 F9               [12] 2755 	mov	r1,a
      000EF5 74 11            [12] 2756 	mov	a,#0x11
      000EF7 26               [12] 2757 	add	a,@r0
      000EF8 F7               [12] 2758 	mov	@r1,a
      000EF9 74 40            [12] 2759 	mov	a,#0x40
      000EFB 08               [12] 2760 	inc	r0
      000EFC 36               [12] 2761 	addc	a,@r0
      000EFD 09               [12] 2762 	inc	r1
      000EFE F7               [12] 2763 	mov	@r1,a
      000EFF 08               [12] 2764 	inc	r0
      000F00 09               [12] 2765 	inc	r1
      000F01 E6               [12] 2766 	mov	a,@r0
      000F02 F7               [12] 2767 	mov	@r1,a
      000F03 E5*00            [12] 2768 	mov	a,_bp
      000F05 24 05            [12] 2769 	add	a,#0x05
      000F07 F8               [12] 2770 	mov	r0,a
      000F08 86 82            [24] 2771 	mov	dpl,@r0
      000F0A 08               [12] 2772 	inc	r0
      000F0B 86 83            [24] 2773 	mov	dph,@r0
      000F0D 08               [12] 2774 	inc	r0
      000F0E 86 F0            [24] 2775 	mov	b,@r0
      000F10 12r00r00         [24] 2776 	lcall	__gptrget
      000F13 FA               [12] 2777 	mov	r2,a
      000F14 A3               [24] 2778 	inc	dptr
      000F15 12r00r00         [24] 2779 	lcall	__gptrget
      000F18 FB               [12] 2780 	mov	r3,a
      000F19 A3               [24] 2781 	inc	dptr
      000F1A 12r00r00         [24] 2782 	lcall	__gptrget
      000F1D FC               [12] 2783 	mov	r4,a
      000F1E C0 07            [24] 2784 	push	ar7
      000F20 C0 06            [24] 2785 	push	ar6
      000F22 C0 05            [24] 2786 	push	ar5
      000F24 8A 82            [24] 2787 	mov	dpl,r2
      000F26 8B 83            [24] 2788 	mov	dph,r3
      000F28 8C F0            [24] 2789 	mov	b,r4
      000F2A 12r00r00         [24] 2790 	lcall	_stack_pop
      000F2D AB 82            [24] 2791 	mov	r3,dpl
      000F2F AC 83            [24] 2792 	mov	r4,dph
      000F31 15 81            [12] 2793 	dec	sp
      000F33 15 81            [12] 2794 	dec	sp
      000F35 15 81            [12] 2795 	dec	sp
      000F37 EB               [12] 2796 	mov	a,r3
      000F38 4C               [12] 2797 	orl	a,r4
      000F39 70 0C            [24] 2798 	jnz	00150$
      000F3B 90r00r47         [24] 2799 	mov	dptr,#___str_9
      000F3E 75 F0 80         [24] 2800 	mov	b,#0x80
      000F41 12r00r00         [24] 2801 	lcall	_printstr
      000F44 02r23rA7         [24] 2802 	ljmp	00249$
      000F47                       2803 00150$:
                                   2804 ;	calc.c:153: if (!stack_pop(ctx->ss, &d1)) {
      000F47 E5*00            [12] 2805 	mov	a,_bp
      000F49 24 1E            [12] 2806 	add	a,#0x1e
      000F4B FF               [12] 2807 	mov	r7,a
      000F4C 7E 00            [12] 2808 	mov	r6,#0x00
      000F4E 7D 40            [12] 2809 	mov	r5,#0x40
      000F50 E5*00            [12] 2810 	mov	a,_bp
      000F52 24 17            [12] 2811 	add	a,#0x17
      000F54 F8               [12] 2812 	mov	r0,a
      000F55 A9*00            [24] 2813 	mov	r1,_bp
      000F57 09               [12] 2814 	inc	r1
      000F58 09               [12] 2815 	inc	r1
      000F59 74 14            [12] 2816 	mov	a,#0x14
      000F5B 26               [12] 2817 	add	a,@r0
      000F5C F7               [12] 2818 	mov	@r1,a
      000F5D 74 40            [12] 2819 	mov	a,#0x40
      000F5F 08               [12] 2820 	inc	r0
      000F60 36               [12] 2821 	addc	a,@r0
      000F61 09               [12] 2822 	inc	r1
      000F62 F7               [12] 2823 	mov	@r1,a
      000F63 08               [12] 2824 	inc	r0
      000F64 09               [12] 2825 	inc	r1
      000F65 E6               [12] 2826 	mov	a,@r0
      000F66 F7               [12] 2827 	mov	@r1,a
      000F67 A8*00            [24] 2828 	mov	r0,_bp
      000F69 08               [12] 2829 	inc	r0
      000F6A 08               [12] 2830 	inc	r0
      000F6B 86 82            [24] 2831 	mov	dpl,@r0
      000F6D 08               [12] 2832 	inc	r0
      000F6E 86 83            [24] 2833 	mov	dph,@r0
      000F70 08               [12] 2834 	inc	r0
      000F71 86 F0            [24] 2835 	mov	b,@r0
      000F73 12r00r00         [24] 2836 	lcall	__gptrget
      000F76 FA               [12] 2837 	mov	r2,a
      000F77 A3               [24] 2838 	inc	dptr
      000F78 12r00r00         [24] 2839 	lcall	__gptrget
      000F7B FB               [12] 2840 	mov	r3,a
      000F7C A3               [24] 2841 	inc	dptr
      000F7D 12r00r00         [24] 2842 	lcall	__gptrget
      000F80 FC               [12] 2843 	mov	r4,a
      000F81 C0 07            [24] 2844 	push	ar7
      000F83 C0 06            [24] 2845 	push	ar6
      000F85 C0 05            [24] 2846 	push	ar5
      000F87 8A 82            [24] 2847 	mov	dpl,r2
      000F89 8B 83            [24] 2848 	mov	dph,r3
      000F8B 8C F0            [24] 2849 	mov	b,r4
      000F8D 12r00r00         [24] 2850 	lcall	_stack_pop
      000F90 AB 82            [24] 2851 	mov	r3,dpl
      000F92 AC 83            [24] 2852 	mov	r4,dph
      000F94 15 81            [12] 2853 	dec	sp
      000F96 15 81            [12] 2854 	dec	sp
      000F98 15 81            [12] 2855 	dec	sp
      000F9A EB               [12] 2856 	mov	a,r3
      000F9B 4C               [12] 2857 	orl	a,r4
      000F9C 70 4A            [24] 2858 	jnz	00147$
                                   2859 ;	calc.c:154: printstr("\r\nsecondary stack underflow\r\n");
      000F9E 90r00r78         [24] 2860 	mov	dptr,#___str_11
      000FA1 75 F0 80         [24] 2861 	mov	b,#0x80
      000FA4 12r00r00         [24] 2862 	lcall	_printstr
                                   2863 ;	calc.c:155: (void)stack_push(ctx->ps, d0);
      000FA7 E5*00            [12] 2864 	mov	a,_bp
      000FA9 24 05            [12] 2865 	add	a,#0x05
      000FAB F8               [12] 2866 	mov	r0,a
      000FAC 86 82            [24] 2867 	mov	dpl,@r0
      000FAE 08               [12] 2868 	inc	r0
      000FAF 86 83            [24] 2869 	mov	dph,@r0
      000FB1 08               [12] 2870 	inc	r0
      000FB2 86 F0            [24] 2871 	mov	b,@r0
      000FB4 12r00r00         [24] 2872 	lcall	__gptrget
      000FB7 FA               [12] 2873 	mov	r2,a
      000FB8 A3               [24] 2874 	inc	dptr
      000FB9 12r00r00         [24] 2875 	lcall	__gptrget
      000FBC FB               [12] 2876 	mov	r3,a
      000FBD A3               [24] 2877 	inc	dptr
      000FBE 12r00r00         [24] 2878 	lcall	__gptrget
      000FC1 FC               [12] 2879 	mov	r4,a
      000FC2 E5*00            [12] 2880 	mov	a,_bp
      000FC4 24 1A            [12] 2881 	add	a,#0x1a
      000FC6 F8               [12] 2882 	mov	r0,a
      000FC7 E6               [12] 2883 	mov	a,@r0
      000FC8 C0 E0            [24] 2884 	push	acc
      000FCA 08               [12] 2885 	inc	r0
      000FCB E6               [12] 2886 	mov	a,@r0
      000FCC C0 E0            [24] 2887 	push	acc
      000FCE 08               [12] 2888 	inc	r0
      000FCF E6               [12] 2889 	mov	a,@r0
      000FD0 C0 E0            [24] 2890 	push	acc
      000FD2 08               [12] 2891 	inc	r0
      000FD3 E6               [12] 2892 	mov	a,@r0
      000FD4 C0 E0            [24] 2893 	push	acc
      000FD6 8A 82            [24] 2894 	mov	dpl,r2
      000FD8 8B 83            [24] 2895 	mov	dph,r3
      000FDA 8C F0            [24] 2896 	mov	b,r4
      000FDC 12r00r00         [24] 2897 	lcall	_stack_push
      000FDF E5 81            [12] 2898 	mov	a,sp
      000FE1 24 FC            [12] 2899 	add	a,#0xfc
      000FE3 F5 81            [12] 2900 	mov	sp,a
      000FE5 02r23rA7         [24] 2901 	ljmp	00249$
      000FE8                       2902 00147$:
                                   2903 ;	calc.c:157: (void)stack_push(ctx->ps, d1);
      000FE8 E5*00            [12] 2904 	mov	a,_bp
      000FEA 24 05            [12] 2905 	add	a,#0x05
      000FEC F8               [12] 2906 	mov	r0,a
      000FED 86 82            [24] 2907 	mov	dpl,@r0
      000FEF 08               [12] 2908 	inc	r0
      000FF0 86 83            [24] 2909 	mov	dph,@r0
      000FF2 08               [12] 2910 	inc	r0
      000FF3 86 F0            [24] 2911 	mov	b,@r0
      000FF5 12r00r00         [24] 2912 	lcall	__gptrget
      000FF8 FA               [12] 2913 	mov	r2,a
      000FF9 A3               [24] 2914 	inc	dptr
      000FFA 12r00r00         [24] 2915 	lcall	__gptrget
      000FFD FB               [12] 2916 	mov	r3,a
      000FFE A3               [24] 2917 	inc	dptr
      000FFF 12r00r00         [24] 2918 	lcall	__gptrget
      001002 FC               [12] 2919 	mov	r4,a
      001003 E5*00            [12] 2920 	mov	a,_bp
      001005 24 1E            [12] 2921 	add	a,#0x1e
      001007 F8               [12] 2922 	mov	r0,a
      001008 E6               [12] 2923 	mov	a,@r0
      001009 C0 E0            [24] 2924 	push	acc
      00100B 08               [12] 2925 	inc	r0
      00100C E6               [12] 2926 	mov	a,@r0
      00100D C0 E0            [24] 2927 	push	acc
      00100F 08               [12] 2928 	inc	r0
      001010 E6               [12] 2929 	mov	a,@r0
      001011 C0 E0            [24] 2930 	push	acc
      001013 08               [12] 2931 	inc	r0
      001014 E6               [12] 2932 	mov	a,@r0
      001015 C0 E0            [24] 2933 	push	acc
      001017 8A 82            [24] 2934 	mov	dpl,r2
      001019 8B 83            [24] 2935 	mov	dph,r3
      00101B 8C F0            [24] 2936 	mov	b,r4
      00101D 12r00r00         [24] 2937 	lcall	_stack_push
      001020 E5 81            [12] 2938 	mov	a,sp
      001022 24 FC            [12] 2939 	add	a,#0xfc
      001024 F5 81            [12] 2940 	mov	sp,a
                                   2941 ;	calc.c:158: (void)stack_push(ctx->ss, d0);
      001026 A8*00            [24] 2942 	mov	r0,_bp
      001028 08               [12] 2943 	inc	r0
      001029 08               [12] 2944 	inc	r0
      00102A 86 82            [24] 2945 	mov	dpl,@r0
      00102C 08               [12] 2946 	inc	r0
      00102D 86 83            [24] 2947 	mov	dph,@r0
      00102F 08               [12] 2948 	inc	r0
      001030 86 F0            [24] 2949 	mov	b,@r0
      001032 12r00r00         [24] 2950 	lcall	__gptrget
      001035 FA               [12] 2951 	mov	r2,a
      001036 A3               [24] 2952 	inc	dptr
      001037 12r00r00         [24] 2953 	lcall	__gptrget
      00103A FB               [12] 2954 	mov	r3,a
      00103B A3               [24] 2955 	inc	dptr
      00103C 12r00r00         [24] 2956 	lcall	__gptrget
      00103F FC               [12] 2957 	mov	r4,a
      001040 E5*00            [12] 2958 	mov	a,_bp
      001042 24 1A            [12] 2959 	add	a,#0x1a
      001044 F8               [12] 2960 	mov	r0,a
      001045 E6               [12] 2961 	mov	a,@r0
      001046 C0 E0            [24] 2962 	push	acc
      001048 08               [12] 2963 	inc	r0
      001049 E6               [12] 2964 	mov	a,@r0
      00104A C0 E0            [24] 2965 	push	acc
      00104C 08               [12] 2966 	inc	r0
      00104D E6               [12] 2967 	mov	a,@r0
      00104E C0 E0            [24] 2968 	push	acc
      001050 08               [12] 2969 	inc	r0
      001051 E6               [12] 2970 	mov	a,@r0
      001052 C0 E0            [24] 2971 	push	acc
      001054 8A 82            [24] 2972 	mov	dpl,r2
      001056 8B 83            [24] 2973 	mov	dph,r3
      001058 8C F0            [24] 2974 	mov	b,r4
      00105A 12r00r00         [24] 2975 	lcall	_stack_push
      00105D E5 81            [12] 2976 	mov	a,sp
      00105F 24 FC            [12] 2977 	add	a,#0xfc
      001061 F5 81            [12] 2978 	mov	sp,a
                                   2979 ;	calc.c:161: break;
      001063 02r23rA7         [24] 2980 	ljmp	00249$
                                   2981 ;	calc.c:162: case 'X':
      001066                       2982 00152$:
                                   2983 ;	calc.c:163: t0 = ctx->ps;
      001066 E5*00            [12] 2984 	mov	a,_bp
      001068 24 17            [12] 2985 	add	a,#0x17
      00106A F8               [12] 2986 	mov	r0,a
      00106B E5*00            [12] 2987 	mov	a,_bp
      00106D 24 08            [12] 2988 	add	a,#0x08
      00106F F9               [12] 2989 	mov	r1,a
      001070 74 11            [12] 2990 	mov	a,#0x11
      001072 26               [12] 2991 	add	a,@r0
      001073 F7               [12] 2992 	mov	@r1,a
      001074 74 40            [12] 2993 	mov	a,#0x40
      001076 08               [12] 2994 	inc	r0
      001077 36               [12] 2995 	addc	a,@r0
      001078 09               [12] 2996 	inc	r1
      001079 F7               [12] 2997 	mov	@r1,a
      00107A 08               [12] 2998 	inc	r0
      00107B 09               [12] 2999 	inc	r1
      00107C E6               [12] 3000 	mov	a,@r0
      00107D F7               [12] 3001 	mov	@r1,a
      00107E E5*00            [12] 3002 	mov	a,_bp
      001080 24 08            [12] 3003 	add	a,#0x08
      001082 F8               [12] 3004 	mov	r0,a
      001083 86 82            [24] 3005 	mov	dpl,@r0
      001085 08               [12] 3006 	inc	r0
      001086 86 83            [24] 3007 	mov	dph,@r0
      001088 08               [12] 3008 	inc	r0
      001089 86 F0            [24] 3009 	mov	b,@r0
      00108B 12r00r00         [24] 3010 	lcall	__gptrget
      00108E FF               [12] 3011 	mov	r7,a
      00108F A3               [24] 3012 	inc	dptr
      001090 12r00r00         [24] 3013 	lcall	__gptrget
      001093 FE               [12] 3014 	mov	r6,a
      001094 A3               [24] 3015 	inc	dptr
      001095 12r00r00         [24] 3016 	lcall	__gptrget
      001098 FD               [12] 3017 	mov	r5,a
                                   3018 ;	calc.c:164: ctx->ps = ctx->ss;
      001099 E5*00            [12] 3019 	mov	a,_bp
      00109B 24 17            [12] 3020 	add	a,#0x17
      00109D F8               [12] 3021 	mov	r0,a
      00109E E5*00            [12] 3022 	mov	a,_bp
      0010A0 24 05            [12] 3023 	add	a,#0x05
      0010A2 F9               [12] 3024 	mov	r1,a
      0010A3 74 14            [12] 3025 	mov	a,#0x14
      0010A5 26               [12] 3026 	add	a,@r0
      0010A6 F7               [12] 3027 	mov	@r1,a
      0010A7 74 40            [12] 3028 	mov	a,#0x40
      0010A9 08               [12] 3029 	inc	r0
      0010AA 36               [12] 3030 	addc	a,@r0
      0010AB 09               [12] 3031 	inc	r1
      0010AC F7               [12] 3032 	mov	@r1,a
      0010AD 08               [12] 3033 	inc	r0
      0010AE 09               [12] 3034 	inc	r1
      0010AF E6               [12] 3035 	mov	a,@r0
      0010B0 F7               [12] 3036 	mov	@r1,a
      0010B1 E5*00            [12] 3037 	mov	a,_bp
      0010B3 24 05            [12] 3038 	add	a,#0x05
      0010B5 F8               [12] 3039 	mov	r0,a
      0010B6 86 82            [24] 3040 	mov	dpl,@r0
      0010B8 08               [12] 3041 	inc	r0
      0010B9 86 83            [24] 3042 	mov	dph,@r0
      0010BB 08               [12] 3043 	inc	r0
      0010BC 86 F0            [24] 3044 	mov	b,@r0
      0010BE 12r00r00         [24] 3045 	lcall	__gptrget
      0010C1 FA               [12] 3046 	mov	r2,a
      0010C2 A3               [24] 3047 	inc	dptr
      0010C3 12r00r00         [24] 3048 	lcall	__gptrget
      0010C6 FB               [12] 3049 	mov	r3,a
      0010C7 A3               [24] 3050 	inc	dptr
      0010C8 12r00r00         [24] 3051 	lcall	__gptrget
      0010CB FC               [12] 3052 	mov	r4,a
      0010CC E5*00            [12] 3053 	mov	a,_bp
      0010CE 24 08            [12] 3054 	add	a,#0x08
      0010D0 F8               [12] 3055 	mov	r0,a
      0010D1 86 82            [24] 3056 	mov	dpl,@r0
      0010D3 08               [12] 3057 	inc	r0
      0010D4 86 83            [24] 3058 	mov	dph,@r0
      0010D6 08               [12] 3059 	inc	r0
      0010D7 86 F0            [24] 3060 	mov	b,@r0
      0010D9 EA               [12] 3061 	mov	a,r2
      0010DA 12r00r00         [24] 3062 	lcall	__gptrput
      0010DD A3               [24] 3063 	inc	dptr
      0010DE EB               [12] 3064 	mov	a,r3
      0010DF 12r00r00         [24] 3065 	lcall	__gptrput
      0010E2 A3               [24] 3066 	inc	dptr
      0010E3 EC               [12] 3067 	mov	a,r4
      0010E4 12r00r00         [24] 3068 	lcall	__gptrput
                                   3069 ;	calc.c:165: ctx->ss = t0;
      0010E7 E5*00            [12] 3070 	mov	a,_bp
      0010E9 24 05            [12] 3071 	add	a,#0x05
      0010EB F8               [12] 3072 	mov	r0,a
      0010EC 86 82            [24] 3073 	mov	dpl,@r0
      0010EE 08               [12] 3074 	inc	r0
      0010EF 86 83            [24] 3075 	mov	dph,@r0
      0010F1 08               [12] 3076 	inc	r0
      0010F2 86 F0            [24] 3077 	mov	b,@r0
      0010F4 EF               [12] 3078 	mov	a,r7
      0010F5 12r00r00         [24] 3079 	lcall	__gptrput
      0010F8 A3               [24] 3080 	inc	dptr
      0010F9 EE               [12] 3081 	mov	a,r6
      0010FA 12r00r00         [24] 3082 	lcall	__gptrput
      0010FD A3               [24] 3083 	inc	dptr
      0010FE ED               [12] 3084 	mov	a,r5
      0010FF 12r00r00         [24] 3085 	lcall	__gptrput
                                   3086 ;	calc.c:166: break;
      001102 02r23rA7         [24] 3087 	ljmp	00249$
                                   3088 ;	calc.c:167: case '+':
      001105                       3089 00153$:
                                   3090 ;	calc.c:168: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      001105 E5*00            [12] 3091 	mov	a,_bp
      001107 24 1A            [12] 3092 	add	a,#0x1a
      001109 FF               [12] 3093 	mov	r7,a
      00110A 7E 00            [12] 3094 	mov	r6,#0x00
      00110C 7D 40            [12] 3095 	mov	r5,#0x40
      00110E E5*00            [12] 3096 	mov	a,_bp
      001110 24 17            [12] 3097 	add	a,#0x17
      001112 F8               [12] 3098 	mov	r0,a
      001113 E5*00            [12] 3099 	mov	a,_bp
      001115 24 08            [12] 3100 	add	a,#0x08
      001117 F9               [12] 3101 	mov	r1,a
      001118 74 11            [12] 3102 	mov	a,#0x11
      00111A 26               [12] 3103 	add	a,@r0
      00111B F7               [12] 3104 	mov	@r1,a
      00111C 74 40            [12] 3105 	mov	a,#0x40
      00111E 08               [12] 3106 	inc	r0
      00111F 36               [12] 3107 	addc	a,@r0
      001120 09               [12] 3108 	inc	r1
      001121 F7               [12] 3109 	mov	@r1,a
      001122 08               [12] 3110 	inc	r0
      001123 09               [12] 3111 	inc	r1
      001124 E6               [12] 3112 	mov	a,@r0
      001125 F7               [12] 3113 	mov	@r1,a
      001126 E5*00            [12] 3114 	mov	a,_bp
      001128 24 08            [12] 3115 	add	a,#0x08
      00112A F8               [12] 3116 	mov	r0,a
      00112B 86 82            [24] 3117 	mov	dpl,@r0
      00112D 08               [12] 3118 	inc	r0
      00112E 86 83            [24] 3119 	mov	dph,@r0
      001130 08               [12] 3120 	inc	r0
      001131 86 F0            [24] 3121 	mov	b,@r0
      001133 12r00r00         [24] 3122 	lcall	__gptrget
      001136 FA               [12] 3123 	mov	r2,a
      001137 A3               [24] 3124 	inc	dptr
      001138 12r00r00         [24] 3125 	lcall	__gptrget
      00113B FB               [12] 3126 	mov	r3,a
      00113C A3               [24] 3127 	inc	dptr
      00113D 12r00r00         [24] 3128 	lcall	__gptrget
      001140 FC               [12] 3129 	mov	r4,a
      001141 C0 07            [24] 3130 	push	ar7
      001143 C0 06            [24] 3131 	push	ar6
      001145 C0 05            [24] 3132 	push	ar5
      001147 8A 82            [24] 3133 	mov	dpl,r2
      001149 8B 83            [24] 3134 	mov	dph,r3
      00114B 8C F0            [24] 3135 	mov	b,r4
      00114D 12r00r00         [24] 3136 	lcall	_stack_pop
      001150 AB 82            [24] 3137 	mov	r3,dpl
      001152 AC 83            [24] 3138 	mov	r4,dph
      001154 15 81            [12] 3139 	dec	sp
      001156 15 81            [12] 3140 	dec	sp
      001158 15 81            [12] 3141 	dec	sp
      00115A EB               [12] 3142 	mov	a,r3
      00115B 4C               [12] 3143 	orl	a,r4
      00115C 70 0C            [24] 3144 	jnz	00158$
      00115E 90r00r47         [24] 3145 	mov	dptr,#___str_9
      001161 75 F0 80         [24] 3146 	mov	b,#0x80
      001164 12r00r00         [24] 3147 	lcall	_printstr
      001167 02r23rA7         [24] 3148 	ljmp	00249$
      00116A                       3149 00158$:
                                   3150 ;	calc.c:169: else if (!stack_pop(ctx->ps, &d1)) {
      00116A E5*00            [12] 3151 	mov	a,_bp
      00116C 24 1E            [12] 3152 	add	a,#0x1e
      00116E FF               [12] 3153 	mov	r7,a
      00116F 7E 00            [12] 3154 	mov	r6,#0x00
      001171 7D 40            [12] 3155 	mov	r5,#0x40
      001173 E5*00            [12] 3156 	mov	a,_bp
      001175 24 08            [12] 3157 	add	a,#0x08
      001177 F8               [12] 3158 	mov	r0,a
      001178 86 82            [24] 3159 	mov	dpl,@r0
      00117A 08               [12] 3160 	inc	r0
      00117B 86 83            [24] 3161 	mov	dph,@r0
      00117D 08               [12] 3162 	inc	r0
      00117E 86 F0            [24] 3163 	mov	b,@r0
      001180 12r00r00         [24] 3164 	lcall	__gptrget
      001183 FA               [12] 3165 	mov	r2,a
      001184 A3               [24] 3166 	inc	dptr
      001185 12r00r00         [24] 3167 	lcall	__gptrget
      001188 FB               [12] 3168 	mov	r3,a
      001189 A3               [24] 3169 	inc	dptr
      00118A 12r00r00         [24] 3170 	lcall	__gptrget
      00118D FC               [12] 3171 	mov	r4,a
      00118E C0 07            [24] 3172 	push	ar7
      001190 C0 06            [24] 3173 	push	ar6
      001192 C0 05            [24] 3174 	push	ar5
      001194 8A 82            [24] 3175 	mov	dpl,r2
      001196 8B 83            [24] 3176 	mov	dph,r3
      001198 8C F0            [24] 3177 	mov	b,r4
      00119A 12r00r00         [24] 3178 	lcall	_stack_pop
      00119D AB 82            [24] 3179 	mov	r3,dpl
      00119F AC 83            [24] 3180 	mov	r4,dph
      0011A1 15 81            [12] 3181 	dec	sp
      0011A3 15 81            [12] 3182 	dec	sp
      0011A5 15 81            [12] 3183 	dec	sp
      0011A7 EB               [12] 3184 	mov	a,r3
      0011A8 4C               [12] 3185 	orl	a,r4
      0011A9 70 4A            [24] 3186 	jnz	00155$
                                   3187 ;	calc.c:170: (void)stack_push(ctx->ps, d0);
      0011AB E5*00            [12] 3188 	mov	a,_bp
      0011AD 24 08            [12] 3189 	add	a,#0x08
      0011AF F8               [12] 3190 	mov	r0,a
      0011B0 86 82            [24] 3191 	mov	dpl,@r0
      0011B2 08               [12] 3192 	inc	r0
      0011B3 86 83            [24] 3193 	mov	dph,@r0
      0011B5 08               [12] 3194 	inc	r0
      0011B6 86 F0            [24] 3195 	mov	b,@r0
      0011B8 12r00r00         [24] 3196 	lcall	__gptrget
      0011BB FA               [12] 3197 	mov	r2,a
      0011BC A3               [24] 3198 	inc	dptr
      0011BD 12r00r00         [24] 3199 	lcall	__gptrget
      0011C0 FB               [12] 3200 	mov	r3,a
      0011C1 A3               [24] 3201 	inc	dptr
      0011C2 12r00r00         [24] 3202 	lcall	__gptrget
      0011C5 FC               [12] 3203 	mov	r4,a
      0011C6 E5*00            [12] 3204 	mov	a,_bp
      0011C8 24 1A            [12] 3205 	add	a,#0x1a
      0011CA F8               [12] 3206 	mov	r0,a
      0011CB E6               [12] 3207 	mov	a,@r0
      0011CC C0 E0            [24] 3208 	push	acc
      0011CE 08               [12] 3209 	inc	r0
      0011CF E6               [12] 3210 	mov	a,@r0
      0011D0 C0 E0            [24] 3211 	push	acc
      0011D2 08               [12] 3212 	inc	r0
      0011D3 E6               [12] 3213 	mov	a,@r0
      0011D4 C0 E0            [24] 3214 	push	acc
      0011D6 08               [12] 3215 	inc	r0
      0011D7 E6               [12] 3216 	mov	a,@r0
      0011D8 C0 E0            [24] 3217 	push	acc
      0011DA 8A 82            [24] 3218 	mov	dpl,r2
      0011DC 8B 83            [24] 3219 	mov	dph,r3
      0011DE 8C F0            [24] 3220 	mov	b,r4
      0011E0 12r00r00         [24] 3221 	lcall	_stack_push
      0011E3 E5 81            [12] 3222 	mov	a,sp
      0011E5 24 FC            [12] 3223 	add	a,#0xfc
      0011E7 F5 81            [12] 3224 	mov	sp,a
                                   3225 ;	calc.c:171: printstr("\r\nstack underflow\r\n");
      0011E9 90r00r47         [24] 3226 	mov	dptr,#___str_9
      0011EC 75 F0 80         [24] 3227 	mov	b,#0x80
      0011EF 12r00r00         [24] 3228 	lcall	_printstr
      0011F2 02r23rA7         [24] 3229 	ljmp	00249$
      0011F5                       3230 00155$:
                                   3231 ;	calc.c:173: d1 += d0;
      0011F5 E5*00            [12] 3232 	mov	a,_bp
      0011F7 24 1E            [12] 3233 	add	a,#0x1e
      0011F9 F8               [12] 3234 	mov	r0,a
      0011FA E5*00            [12] 3235 	mov	a,_bp
      0011FC 24 1A            [12] 3236 	add	a,#0x1a
      0011FE F9               [12] 3237 	mov	r1,a
      0011FF E7               [12] 3238 	mov	a,@r1
      001200 26               [12] 3239 	add	a,@r0
      001201 F6               [12] 3240 	mov	@r0,a
      001202 09               [12] 3241 	inc	r1
      001203 E7               [12] 3242 	mov	a,@r1
      001204 08               [12] 3243 	inc	r0
      001205 36               [12] 3244 	addc	a,@r0
      001206 F6               [12] 3245 	mov	@r0,a
      001207 09               [12] 3246 	inc	r1
      001208 E7               [12] 3247 	mov	a,@r1
      001209 08               [12] 3248 	inc	r0
      00120A 36               [12] 3249 	addc	a,@r0
      00120B F6               [12] 3250 	mov	@r0,a
      00120C 09               [12] 3251 	inc	r1
      00120D E7               [12] 3252 	mov	a,@r1
      00120E 08               [12] 3253 	inc	r0
      00120F 36               [12] 3254 	addc	a,@r0
      001210 F6               [12] 3255 	mov	@r0,a
                                   3256 ;	calc.c:174: (void)stack_push(ctx->ps, d1);
      001211 E5*00            [12] 3257 	mov	a,_bp
      001213 24 08            [12] 3258 	add	a,#0x08
      001215 F8               [12] 3259 	mov	r0,a
      001216 86 82            [24] 3260 	mov	dpl,@r0
      001218 08               [12] 3261 	inc	r0
      001219 86 83            [24] 3262 	mov	dph,@r0
      00121B 08               [12] 3263 	inc	r0
      00121C 86 F0            [24] 3264 	mov	b,@r0
      00121E 12r00r00         [24] 3265 	lcall	__gptrget
      001221 FA               [12] 3266 	mov	r2,a
      001222 A3               [24] 3267 	inc	dptr
      001223 12r00r00         [24] 3268 	lcall	__gptrget
      001226 FB               [12] 3269 	mov	r3,a
      001227 A3               [24] 3270 	inc	dptr
      001228 12r00r00         [24] 3271 	lcall	__gptrget
      00122B FC               [12] 3272 	mov	r4,a
      00122C E5*00            [12] 3273 	mov	a,_bp
      00122E 24 1E            [12] 3274 	add	a,#0x1e
      001230 F8               [12] 3275 	mov	r0,a
      001231 E6               [12] 3276 	mov	a,@r0
      001232 C0 E0            [24] 3277 	push	acc
      001234 08               [12] 3278 	inc	r0
      001235 E6               [12] 3279 	mov	a,@r0
      001236 C0 E0            [24] 3280 	push	acc
      001238 08               [12] 3281 	inc	r0
      001239 E6               [12] 3282 	mov	a,@r0
      00123A C0 E0            [24] 3283 	push	acc
      00123C 08               [12] 3284 	inc	r0
      00123D E6               [12] 3285 	mov	a,@r0
      00123E C0 E0            [24] 3286 	push	acc
      001240 8A 82            [24] 3287 	mov	dpl,r2
      001242 8B 83            [24] 3288 	mov	dph,r3
      001244 8C F0            [24] 3289 	mov	b,r4
      001246 12r00r00         [24] 3290 	lcall	_stack_push
      001249 E5 81            [12] 3291 	mov	a,sp
      00124B 24 FC            [12] 3292 	add	a,#0xfc
      00124D F5 81            [12] 3293 	mov	sp,a
                                   3294 ;	calc.c:176: break;
      00124F 02r23rA7         [24] 3295 	ljmp	00249$
                                   3296 ;	calc.c:177: case '-':
      001252                       3297 00160$:
                                   3298 ;	calc.c:178: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      001252 E5*00            [12] 3299 	mov	a,_bp
      001254 24 1A            [12] 3300 	add	a,#0x1a
      001256 FF               [12] 3301 	mov	r7,a
      001257 7E 00            [12] 3302 	mov	r6,#0x00
      001259 7D 40            [12] 3303 	mov	r5,#0x40
      00125B E5*00            [12] 3304 	mov	a,_bp
      00125D 24 17            [12] 3305 	add	a,#0x17
      00125F F8               [12] 3306 	mov	r0,a
      001260 E5*00            [12] 3307 	mov	a,_bp
      001262 24 08            [12] 3308 	add	a,#0x08
      001264 F9               [12] 3309 	mov	r1,a
      001265 74 11            [12] 3310 	mov	a,#0x11
      001267 26               [12] 3311 	add	a,@r0
      001268 F7               [12] 3312 	mov	@r1,a
      001269 74 40            [12] 3313 	mov	a,#0x40
      00126B 08               [12] 3314 	inc	r0
      00126C 36               [12] 3315 	addc	a,@r0
      00126D 09               [12] 3316 	inc	r1
      00126E F7               [12] 3317 	mov	@r1,a
      00126F 08               [12] 3318 	inc	r0
      001270 09               [12] 3319 	inc	r1
      001271 E6               [12] 3320 	mov	a,@r0
      001272 F7               [12] 3321 	mov	@r1,a
      001273 E5*00            [12] 3322 	mov	a,_bp
      001275 24 08            [12] 3323 	add	a,#0x08
      001277 F8               [12] 3324 	mov	r0,a
      001278 86 82            [24] 3325 	mov	dpl,@r0
      00127A 08               [12] 3326 	inc	r0
      00127B 86 83            [24] 3327 	mov	dph,@r0
      00127D 08               [12] 3328 	inc	r0
      00127E 86 F0            [24] 3329 	mov	b,@r0
      001280 12r00r00         [24] 3330 	lcall	__gptrget
      001283 FA               [12] 3331 	mov	r2,a
      001284 A3               [24] 3332 	inc	dptr
      001285 12r00r00         [24] 3333 	lcall	__gptrget
      001288 FB               [12] 3334 	mov	r3,a
      001289 A3               [24] 3335 	inc	dptr
      00128A 12r00r00         [24] 3336 	lcall	__gptrget
      00128D FC               [12] 3337 	mov	r4,a
      00128E C0 07            [24] 3338 	push	ar7
      001290 C0 06            [24] 3339 	push	ar6
      001292 C0 05            [24] 3340 	push	ar5
      001294 8A 82            [24] 3341 	mov	dpl,r2
      001296 8B 83            [24] 3342 	mov	dph,r3
      001298 8C F0            [24] 3343 	mov	b,r4
      00129A 12r00r00         [24] 3344 	lcall	_stack_pop
      00129D AB 82            [24] 3345 	mov	r3,dpl
      00129F AC 83            [24] 3346 	mov	r4,dph
      0012A1 15 81            [12] 3347 	dec	sp
      0012A3 15 81            [12] 3348 	dec	sp
      0012A5 15 81            [12] 3349 	dec	sp
      0012A7 EB               [12] 3350 	mov	a,r3
      0012A8 4C               [12] 3351 	orl	a,r4
      0012A9 70 0C            [24] 3352 	jnz	00165$
      0012AB 90r00r47         [24] 3353 	mov	dptr,#___str_9
      0012AE 75 F0 80         [24] 3354 	mov	b,#0x80
      0012B1 12r00r00         [24] 3355 	lcall	_printstr
      0012B4 02r23rA7         [24] 3356 	ljmp	00249$
      0012B7                       3357 00165$:
                                   3358 ;	calc.c:179: else if (!stack_pop(ctx->ps, &d1)) {
      0012B7 E5*00            [12] 3359 	mov	a,_bp
      0012B9 24 1E            [12] 3360 	add	a,#0x1e
      0012BB FF               [12] 3361 	mov	r7,a
      0012BC 7E 00            [12] 3362 	mov	r6,#0x00
      0012BE 7D 40            [12] 3363 	mov	r5,#0x40
      0012C0 E5*00            [12] 3364 	mov	a,_bp
      0012C2 24 08            [12] 3365 	add	a,#0x08
      0012C4 F8               [12] 3366 	mov	r0,a
      0012C5 86 82            [24] 3367 	mov	dpl,@r0
      0012C7 08               [12] 3368 	inc	r0
      0012C8 86 83            [24] 3369 	mov	dph,@r0
      0012CA 08               [12] 3370 	inc	r0
      0012CB 86 F0            [24] 3371 	mov	b,@r0
      0012CD 12r00r00         [24] 3372 	lcall	__gptrget
      0012D0 FA               [12] 3373 	mov	r2,a
      0012D1 A3               [24] 3374 	inc	dptr
      0012D2 12r00r00         [24] 3375 	lcall	__gptrget
      0012D5 FB               [12] 3376 	mov	r3,a
      0012D6 A3               [24] 3377 	inc	dptr
      0012D7 12r00r00         [24] 3378 	lcall	__gptrget
      0012DA FC               [12] 3379 	mov	r4,a
      0012DB C0 07            [24] 3380 	push	ar7
      0012DD C0 06            [24] 3381 	push	ar6
      0012DF C0 05            [24] 3382 	push	ar5
      0012E1 8A 82            [24] 3383 	mov	dpl,r2
      0012E3 8B 83            [24] 3384 	mov	dph,r3
      0012E5 8C F0            [24] 3385 	mov	b,r4
      0012E7 12r00r00         [24] 3386 	lcall	_stack_pop
      0012EA AB 82            [24] 3387 	mov	r3,dpl
      0012EC AC 83            [24] 3388 	mov	r4,dph
      0012EE 15 81            [12] 3389 	dec	sp
      0012F0 15 81            [12] 3390 	dec	sp
      0012F2 15 81            [12] 3391 	dec	sp
      0012F4 EB               [12] 3392 	mov	a,r3
      0012F5 4C               [12] 3393 	orl	a,r4
      0012F6 70 4A            [24] 3394 	jnz	00162$
                                   3395 ;	calc.c:180: (void)stack_push(ctx->ps, d0);
      0012F8 E5*00            [12] 3396 	mov	a,_bp
      0012FA 24 08            [12] 3397 	add	a,#0x08
      0012FC F8               [12] 3398 	mov	r0,a
      0012FD 86 82            [24] 3399 	mov	dpl,@r0
      0012FF 08               [12] 3400 	inc	r0
      001300 86 83            [24] 3401 	mov	dph,@r0
      001302 08               [12] 3402 	inc	r0
      001303 86 F0            [24] 3403 	mov	b,@r0
      001305 12r00r00         [24] 3404 	lcall	__gptrget
      001308 FA               [12] 3405 	mov	r2,a
      001309 A3               [24] 3406 	inc	dptr
      00130A 12r00r00         [24] 3407 	lcall	__gptrget
      00130D FB               [12] 3408 	mov	r3,a
      00130E A3               [24] 3409 	inc	dptr
      00130F 12r00r00         [24] 3410 	lcall	__gptrget
      001312 FC               [12] 3411 	mov	r4,a
      001313 E5*00            [12] 3412 	mov	a,_bp
      001315 24 1A            [12] 3413 	add	a,#0x1a
      001317 F8               [12] 3414 	mov	r0,a
      001318 E6               [12] 3415 	mov	a,@r0
      001319 C0 E0            [24] 3416 	push	acc
      00131B 08               [12] 3417 	inc	r0
      00131C E6               [12] 3418 	mov	a,@r0
      00131D C0 E0            [24] 3419 	push	acc
      00131F 08               [12] 3420 	inc	r0
      001320 E6               [12] 3421 	mov	a,@r0
      001321 C0 E0            [24] 3422 	push	acc
      001323 08               [12] 3423 	inc	r0
      001324 E6               [12] 3424 	mov	a,@r0
      001325 C0 E0            [24] 3425 	push	acc
      001327 8A 82            [24] 3426 	mov	dpl,r2
      001329 8B 83            [24] 3427 	mov	dph,r3
      00132B 8C F0            [24] 3428 	mov	b,r4
      00132D 12r00r00         [24] 3429 	lcall	_stack_push
      001330 E5 81            [12] 3430 	mov	a,sp
      001332 24 FC            [12] 3431 	add	a,#0xfc
      001334 F5 81            [12] 3432 	mov	sp,a
                                   3433 ;	calc.c:181: printstr("\r\nstack underflow\r\n");
      001336 90r00r47         [24] 3434 	mov	dptr,#___str_9
      001339 75 F0 80         [24] 3435 	mov	b,#0x80
      00133C 12r00r00         [24] 3436 	lcall	_printstr
      00133F 02r23rA7         [24] 3437 	ljmp	00249$
      001342                       3438 00162$:
                                   3439 ;	calc.c:183: d1 -= d0;
      001342 E5*00            [12] 3440 	mov	a,_bp
      001344 24 1E            [12] 3441 	add	a,#0x1e
      001346 F8               [12] 3442 	mov	r0,a
      001347 E5*00            [12] 3443 	mov	a,_bp
      001349 24 1A            [12] 3444 	add	a,#0x1a
      00134B F9               [12] 3445 	mov	r1,a
      00134C E6               [12] 3446 	mov	a,@r0
      00134D C3               [12] 3447 	clr	c
      00134E 97               [12] 3448 	subb	a,@r1
      00134F F6               [12] 3449 	mov	@r0,a
      001350 08               [12] 3450 	inc	r0
      001351 E6               [12] 3451 	mov	a,@r0
      001352 09               [12] 3452 	inc	r1
      001353 97               [12] 3453 	subb	a,@r1
      001354 F6               [12] 3454 	mov	@r0,a
      001355 08               [12] 3455 	inc	r0
      001356 E6               [12] 3456 	mov	a,@r0
      001357 09               [12] 3457 	inc	r1
      001358 97               [12] 3458 	subb	a,@r1
      001359 F6               [12] 3459 	mov	@r0,a
      00135A 08               [12] 3460 	inc	r0
      00135B E6               [12] 3461 	mov	a,@r0
      00135C 09               [12] 3462 	inc	r1
      00135D 97               [12] 3463 	subb	a,@r1
      00135E F6               [12] 3464 	mov	@r0,a
                                   3465 ;	calc.c:184: (void)stack_push(ctx->ps, d1);
      00135F E5*00            [12] 3466 	mov	a,_bp
      001361 24 08            [12] 3467 	add	a,#0x08
      001363 F8               [12] 3468 	mov	r0,a
      001364 86 82            [24] 3469 	mov	dpl,@r0
      001366 08               [12] 3470 	inc	r0
      001367 86 83            [24] 3471 	mov	dph,@r0
      001369 08               [12] 3472 	inc	r0
      00136A 86 F0            [24] 3473 	mov	b,@r0
      00136C 12r00r00         [24] 3474 	lcall	__gptrget
      00136F FA               [12] 3475 	mov	r2,a
      001370 A3               [24] 3476 	inc	dptr
      001371 12r00r00         [24] 3477 	lcall	__gptrget
      001374 FB               [12] 3478 	mov	r3,a
      001375 A3               [24] 3479 	inc	dptr
      001376 12r00r00         [24] 3480 	lcall	__gptrget
      001379 FC               [12] 3481 	mov	r4,a
      00137A E5*00            [12] 3482 	mov	a,_bp
      00137C 24 1E            [12] 3483 	add	a,#0x1e
      00137E F8               [12] 3484 	mov	r0,a
      00137F E6               [12] 3485 	mov	a,@r0
      001380 C0 E0            [24] 3486 	push	acc
      001382 08               [12] 3487 	inc	r0
      001383 E6               [12] 3488 	mov	a,@r0
      001384 C0 E0            [24] 3489 	push	acc
      001386 08               [12] 3490 	inc	r0
      001387 E6               [12] 3491 	mov	a,@r0
      001388 C0 E0            [24] 3492 	push	acc
      00138A 08               [12] 3493 	inc	r0
      00138B E6               [12] 3494 	mov	a,@r0
      00138C C0 E0            [24] 3495 	push	acc
      00138E 8A 82            [24] 3496 	mov	dpl,r2
      001390 8B 83            [24] 3497 	mov	dph,r3
      001392 8C F0            [24] 3498 	mov	b,r4
      001394 12r00r00         [24] 3499 	lcall	_stack_push
      001397 E5 81            [12] 3500 	mov	a,sp
      001399 24 FC            [12] 3501 	add	a,#0xfc
      00139B F5 81            [12] 3502 	mov	sp,a
                                   3503 ;	calc.c:186: break;
      00139D 02r23rA7         [24] 3504 	ljmp	00249$
                                   3505 ;	calc.c:187: case '*':
      0013A0                       3506 00167$:
                                   3507 ;	calc.c:188: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      0013A0 E5*00            [12] 3508 	mov	a,_bp
      0013A2 24 1A            [12] 3509 	add	a,#0x1a
      0013A4 FF               [12] 3510 	mov	r7,a
      0013A5 7E 00            [12] 3511 	mov	r6,#0x00
      0013A7 7D 40            [12] 3512 	mov	r5,#0x40
      0013A9 E5*00            [12] 3513 	mov	a,_bp
      0013AB 24 17            [12] 3514 	add	a,#0x17
      0013AD F8               [12] 3515 	mov	r0,a
      0013AE E5*00            [12] 3516 	mov	a,_bp
      0013B0 24 08            [12] 3517 	add	a,#0x08
      0013B2 F9               [12] 3518 	mov	r1,a
      0013B3 74 11            [12] 3519 	mov	a,#0x11
      0013B5 26               [12] 3520 	add	a,@r0
      0013B6 F7               [12] 3521 	mov	@r1,a
      0013B7 74 40            [12] 3522 	mov	a,#0x40
      0013B9 08               [12] 3523 	inc	r0
      0013BA 36               [12] 3524 	addc	a,@r0
      0013BB 09               [12] 3525 	inc	r1
      0013BC F7               [12] 3526 	mov	@r1,a
      0013BD 08               [12] 3527 	inc	r0
      0013BE 09               [12] 3528 	inc	r1
      0013BF E6               [12] 3529 	mov	a,@r0
      0013C0 F7               [12] 3530 	mov	@r1,a
      0013C1 E5*00            [12] 3531 	mov	a,_bp
      0013C3 24 08            [12] 3532 	add	a,#0x08
      0013C5 F8               [12] 3533 	mov	r0,a
      0013C6 86 82            [24] 3534 	mov	dpl,@r0
      0013C8 08               [12] 3535 	inc	r0
      0013C9 86 83            [24] 3536 	mov	dph,@r0
      0013CB 08               [12] 3537 	inc	r0
      0013CC 86 F0            [24] 3538 	mov	b,@r0
      0013CE 12r00r00         [24] 3539 	lcall	__gptrget
      0013D1 FA               [12] 3540 	mov	r2,a
      0013D2 A3               [24] 3541 	inc	dptr
      0013D3 12r00r00         [24] 3542 	lcall	__gptrget
      0013D6 FB               [12] 3543 	mov	r3,a
      0013D7 A3               [24] 3544 	inc	dptr
      0013D8 12r00r00         [24] 3545 	lcall	__gptrget
      0013DB FC               [12] 3546 	mov	r4,a
      0013DC C0 07            [24] 3547 	push	ar7
      0013DE C0 06            [24] 3548 	push	ar6
      0013E0 C0 05            [24] 3549 	push	ar5
      0013E2 8A 82            [24] 3550 	mov	dpl,r2
      0013E4 8B 83            [24] 3551 	mov	dph,r3
      0013E6 8C F0            [24] 3552 	mov	b,r4
      0013E8 12r00r00         [24] 3553 	lcall	_stack_pop
      0013EB AB 82            [24] 3554 	mov	r3,dpl
      0013ED AC 83            [24] 3555 	mov	r4,dph
      0013EF 15 81            [12] 3556 	dec	sp
      0013F1 15 81            [12] 3557 	dec	sp
      0013F3 15 81            [12] 3558 	dec	sp
      0013F5 EB               [12] 3559 	mov	a,r3
      0013F6 4C               [12] 3560 	orl	a,r4
      0013F7 70 0C            [24] 3561 	jnz	00172$
      0013F9 90r00r47         [24] 3562 	mov	dptr,#___str_9
      0013FC 75 F0 80         [24] 3563 	mov	b,#0x80
      0013FF 12r00r00         [24] 3564 	lcall	_printstr
      001402 02r23rA7         [24] 3565 	ljmp	00249$
      001405                       3566 00172$:
                                   3567 ;	calc.c:189: else if (!stack_pop(ctx->ps, &d1)) {
      001405 E5*00            [12] 3568 	mov	a,_bp
      001407 24 1E            [12] 3569 	add	a,#0x1e
      001409 FF               [12] 3570 	mov	r7,a
      00140A 7E 00            [12] 3571 	mov	r6,#0x00
      00140C 7D 40            [12] 3572 	mov	r5,#0x40
      00140E E5*00            [12] 3573 	mov	a,_bp
      001410 24 08            [12] 3574 	add	a,#0x08
      001412 F8               [12] 3575 	mov	r0,a
      001413 86 82            [24] 3576 	mov	dpl,@r0
      001415 08               [12] 3577 	inc	r0
      001416 86 83            [24] 3578 	mov	dph,@r0
      001418 08               [12] 3579 	inc	r0
      001419 86 F0            [24] 3580 	mov	b,@r0
      00141B 12r00r00         [24] 3581 	lcall	__gptrget
      00141E FA               [12] 3582 	mov	r2,a
      00141F A3               [24] 3583 	inc	dptr
      001420 12r00r00         [24] 3584 	lcall	__gptrget
      001423 FB               [12] 3585 	mov	r3,a
      001424 A3               [24] 3586 	inc	dptr
      001425 12r00r00         [24] 3587 	lcall	__gptrget
      001428 FC               [12] 3588 	mov	r4,a
      001429 C0 07            [24] 3589 	push	ar7
      00142B C0 06            [24] 3590 	push	ar6
      00142D C0 05            [24] 3591 	push	ar5
      00142F 8A 82            [24] 3592 	mov	dpl,r2
      001431 8B 83            [24] 3593 	mov	dph,r3
      001433 8C F0            [24] 3594 	mov	b,r4
      001435 12r00r00         [24] 3595 	lcall	_stack_pop
      001438 AB 82            [24] 3596 	mov	r3,dpl
      00143A AC 83            [24] 3597 	mov	r4,dph
      00143C 15 81            [12] 3598 	dec	sp
      00143E 15 81            [12] 3599 	dec	sp
      001440 15 81            [12] 3600 	dec	sp
      001442 EB               [12] 3601 	mov	a,r3
      001443 4C               [12] 3602 	orl	a,r4
      001444 70 4A            [24] 3603 	jnz	00169$
                                   3604 ;	calc.c:190: (void)stack_push(ctx->ps, d0);
      001446 E5*00            [12] 3605 	mov	a,_bp
      001448 24 08            [12] 3606 	add	a,#0x08
      00144A F8               [12] 3607 	mov	r0,a
      00144B 86 82            [24] 3608 	mov	dpl,@r0
      00144D 08               [12] 3609 	inc	r0
      00144E 86 83            [24] 3610 	mov	dph,@r0
      001450 08               [12] 3611 	inc	r0
      001451 86 F0            [24] 3612 	mov	b,@r0
      001453 12r00r00         [24] 3613 	lcall	__gptrget
      001456 FA               [12] 3614 	mov	r2,a
      001457 A3               [24] 3615 	inc	dptr
      001458 12r00r00         [24] 3616 	lcall	__gptrget
      00145B FB               [12] 3617 	mov	r3,a
      00145C A3               [24] 3618 	inc	dptr
      00145D 12r00r00         [24] 3619 	lcall	__gptrget
      001460 FC               [12] 3620 	mov	r4,a
      001461 E5*00            [12] 3621 	mov	a,_bp
      001463 24 1A            [12] 3622 	add	a,#0x1a
      001465 F8               [12] 3623 	mov	r0,a
      001466 E6               [12] 3624 	mov	a,@r0
      001467 C0 E0            [24] 3625 	push	acc
      001469 08               [12] 3626 	inc	r0
      00146A E6               [12] 3627 	mov	a,@r0
      00146B C0 E0            [24] 3628 	push	acc
      00146D 08               [12] 3629 	inc	r0
      00146E E6               [12] 3630 	mov	a,@r0
      00146F C0 E0            [24] 3631 	push	acc
      001471 08               [12] 3632 	inc	r0
      001472 E6               [12] 3633 	mov	a,@r0
      001473 C0 E0            [24] 3634 	push	acc
      001475 8A 82            [24] 3635 	mov	dpl,r2
      001477 8B 83            [24] 3636 	mov	dph,r3
      001479 8C F0            [24] 3637 	mov	b,r4
      00147B 12r00r00         [24] 3638 	lcall	_stack_push
      00147E E5 81            [12] 3639 	mov	a,sp
      001480 24 FC            [12] 3640 	add	a,#0xfc
      001482 F5 81            [12] 3641 	mov	sp,a
                                   3642 ;	calc.c:191: printstr("\r\nstack underflow\r\n");
      001484 90r00r47         [24] 3643 	mov	dptr,#___str_9
      001487 75 F0 80         [24] 3644 	mov	b,#0x80
      00148A 12r00r00         [24] 3645 	lcall	_printstr
      00148D 02r23rA7         [24] 3646 	ljmp	00249$
      001490                       3647 00169$:
                                   3648 ;	calc.c:193: d1 *= d0;
      001490 E5*00            [12] 3649 	mov	a,_bp
      001492 24 1A            [12] 3650 	add	a,#0x1a
      001494 F8               [12] 3651 	mov	r0,a
      001495 E6               [12] 3652 	mov	a,@r0
      001496 C0 E0            [24] 3653 	push	acc
      001498 08               [12] 3654 	inc	r0
      001499 E6               [12] 3655 	mov	a,@r0
      00149A C0 E0            [24] 3656 	push	acc
      00149C 08               [12] 3657 	inc	r0
      00149D E6               [12] 3658 	mov	a,@r0
      00149E C0 E0            [24] 3659 	push	acc
      0014A0 08               [12] 3660 	inc	r0
      0014A1 E6               [12] 3661 	mov	a,@r0
      0014A2 C0 E0            [24] 3662 	push	acc
      0014A4 E5*00            [12] 3663 	mov	a,_bp
      0014A6 24 1E            [12] 3664 	add	a,#0x1e
      0014A8 F8               [12] 3665 	mov	r0,a
      0014A9 86 82            [24] 3666 	mov	dpl,@r0
      0014AB 08               [12] 3667 	inc	r0
      0014AC 86 83            [24] 3668 	mov	dph,@r0
      0014AE 08               [12] 3669 	inc	r0
      0014AF 86 F0            [24] 3670 	mov	b,@r0
      0014B1 08               [12] 3671 	inc	r0
      0014B2 E6               [12] 3672 	mov	a,@r0
      0014B3 12r00r00         [24] 3673 	lcall	__mullong
      0014B6 AF 82            [24] 3674 	mov	r7,dpl
      0014B8 AE 83            [24] 3675 	mov	r6,dph
      0014BA AD F0            [24] 3676 	mov	r5,b
      0014BC FC               [12] 3677 	mov	r4,a
      0014BD E5 81            [12] 3678 	mov	a,sp
      0014BF 24 FC            [12] 3679 	add	a,#0xfc
      0014C1 F5 81            [12] 3680 	mov	sp,a
      0014C3 E5*00            [12] 3681 	mov	a,_bp
      0014C5 24 1E            [12] 3682 	add	a,#0x1e
      0014C7 F8               [12] 3683 	mov	r0,a
      0014C8 A6 07            [24] 3684 	mov	@r0,ar7
      0014CA 08               [12] 3685 	inc	r0
      0014CB A6 06            [24] 3686 	mov	@r0,ar6
      0014CD 08               [12] 3687 	inc	r0
      0014CE A6 05            [24] 3688 	mov	@r0,ar5
      0014D0 08               [12] 3689 	inc	r0
      0014D1 A6 04            [24] 3690 	mov	@r0,ar4
                                   3691 ;	calc.c:194: (void)stack_push(ctx->ps, d1);
      0014D3 E5*00            [12] 3692 	mov	a,_bp
      0014D5 24 08            [12] 3693 	add	a,#0x08
      0014D7 F8               [12] 3694 	mov	r0,a
      0014D8 86 82            [24] 3695 	mov	dpl,@r0
      0014DA 08               [12] 3696 	inc	r0
      0014DB 86 83            [24] 3697 	mov	dph,@r0
      0014DD 08               [12] 3698 	inc	r0
      0014DE 86 F0            [24] 3699 	mov	b,@r0
      0014E0 12r00r00         [24] 3700 	lcall	__gptrget
      0014E3 FA               [12] 3701 	mov	r2,a
      0014E4 A3               [24] 3702 	inc	dptr
      0014E5 12r00r00         [24] 3703 	lcall	__gptrget
      0014E8 FB               [12] 3704 	mov	r3,a
      0014E9 A3               [24] 3705 	inc	dptr
      0014EA 12r00r00         [24] 3706 	lcall	__gptrget
      0014ED FC               [12] 3707 	mov	r4,a
      0014EE E5*00            [12] 3708 	mov	a,_bp
      0014F0 24 1E            [12] 3709 	add	a,#0x1e
      0014F2 F8               [12] 3710 	mov	r0,a
      0014F3 E6               [12] 3711 	mov	a,@r0
      0014F4 C0 E0            [24] 3712 	push	acc
      0014F6 08               [12] 3713 	inc	r0
      0014F7 E6               [12] 3714 	mov	a,@r0
      0014F8 C0 E0            [24] 3715 	push	acc
      0014FA 08               [12] 3716 	inc	r0
      0014FB E6               [12] 3717 	mov	a,@r0
      0014FC C0 E0            [24] 3718 	push	acc
      0014FE 08               [12] 3719 	inc	r0
      0014FF E6               [12] 3720 	mov	a,@r0
      001500 C0 E0            [24] 3721 	push	acc
      001502 8A 82            [24] 3722 	mov	dpl,r2
      001504 8B 83            [24] 3723 	mov	dph,r3
      001506 8C F0            [24] 3724 	mov	b,r4
      001508 12r00r00         [24] 3725 	lcall	_stack_push
      00150B E5 81            [12] 3726 	mov	a,sp
      00150D 24 FC            [12] 3727 	add	a,#0xfc
      00150F F5 81            [12] 3728 	mov	sp,a
                                   3729 ;	calc.c:196: break;
      001511 02r23rA7         [24] 3730 	ljmp	00249$
                                   3731 ;	calc.c:198: case '\\':
      001514                       3732 00175$:
                                   3733 ;	calc.c:199: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      001514 C0 05            [24] 3734 	push	ar5
      001516 C0 06            [24] 3735 	push	ar6
      001518 C0 07            [24] 3736 	push	ar7
      00151A E5*00            [12] 3737 	mov	a,_bp
      00151C 24 1A            [12] 3738 	add	a,#0x1a
      00151E FC               [12] 3739 	mov	r4,a
      00151F 7B 00            [12] 3740 	mov	r3,#0x00
      001521 7A 40            [12] 3741 	mov	r2,#0x40
      001523 E5*00            [12] 3742 	mov	a,_bp
      001525 24 17            [12] 3743 	add	a,#0x17
      001527 F8               [12] 3744 	mov	r0,a
      001528 E5*00            [12] 3745 	mov	a,_bp
      00152A 24 0B            [12] 3746 	add	a,#0x0b
      00152C F9               [12] 3747 	mov	r1,a
      00152D 74 11            [12] 3748 	mov	a,#0x11
      00152F 26               [12] 3749 	add	a,@r0
      001530 F7               [12] 3750 	mov	@r1,a
      001531 74 40            [12] 3751 	mov	a,#0x40
      001533 08               [12] 3752 	inc	r0
      001534 36               [12] 3753 	addc	a,@r0
      001535 09               [12] 3754 	inc	r1
      001536 F7               [12] 3755 	mov	@r1,a
      001537 08               [12] 3756 	inc	r0
      001538 09               [12] 3757 	inc	r1
      001539 E6               [12] 3758 	mov	a,@r0
      00153A F7               [12] 3759 	mov	@r1,a
      00153B E5*00            [12] 3760 	mov	a,_bp
      00153D 24 0B            [12] 3761 	add	a,#0x0b
      00153F F8               [12] 3762 	mov	r0,a
      001540 86 82            [24] 3763 	mov	dpl,@r0
      001542 08               [12] 3764 	inc	r0
      001543 86 83            [24] 3765 	mov	dph,@r0
      001545 08               [12] 3766 	inc	r0
      001546 86 F0            [24] 3767 	mov	b,@r0
      001548 12r00r00         [24] 3768 	lcall	__gptrget
      00154B FD               [12] 3769 	mov	r5,a
      00154C A3               [24] 3770 	inc	dptr
      00154D 12r00r00         [24] 3771 	lcall	__gptrget
      001550 FE               [12] 3772 	mov	r6,a
      001551 A3               [24] 3773 	inc	dptr
      001552 12r00r00         [24] 3774 	lcall	__gptrget
      001555 FF               [12] 3775 	mov	r7,a
      001556 C0 05            [24] 3776 	push	ar5
      001558 C0 04            [24] 3777 	push	ar4
      00155A C0 03            [24] 3778 	push	ar3
      00155C C0 02            [24] 3779 	push	ar2
      00155E 8D 82            [24] 3780 	mov	dpl,r5
      001560 8E 83            [24] 3781 	mov	dph,r6
      001562 8F F0            [24] 3782 	mov	b,r7
      001564 12r00r00         [24] 3783 	lcall	_stack_pop
      001567 AE 82            [24] 3784 	mov	r6,dpl
      001569 AF 83            [24] 3785 	mov	r7,dph
      00156B 15 81            [12] 3786 	dec	sp
      00156D 15 81            [12] 3787 	dec	sp
      00156F 15 81            [12] 3788 	dec	sp
      001571 D0 05            [24] 3789 	pop	ar5
      001573 EE               [12] 3790 	mov	a,r6
      001574 4F               [12] 3791 	orl	a,r7
      001575 D0 07            [24] 3792 	pop	ar7
      001577 D0 06            [24] 3793 	pop	ar6
      001579 D0 05            [24] 3794 	pop	ar5
      00157B 70 0C            [24] 3795 	jnz	00186$
      00157D 90r00r47         [24] 3796 	mov	dptr,#___str_9
      001580 75 F0 80         [24] 3797 	mov	b,#0x80
      001583 12r00r00         [24] 3798 	lcall	_printstr
      001586 02r23rA7         [24] 3799 	ljmp	00249$
      001589                       3800 00186$:
                                   3801 ;	calc.c:200: else if (!stack_pop(ctx->ps, &d1)) {
      001589 C0 05            [24] 3802 	push	ar5
      00158B C0 06            [24] 3803 	push	ar6
      00158D C0 07            [24] 3804 	push	ar7
      00158F E5*00            [12] 3805 	mov	a,_bp
      001591 24 1E            [12] 3806 	add	a,#0x1e
      001593 FC               [12] 3807 	mov	r4,a
      001594 7B 00            [12] 3808 	mov	r3,#0x00
      001596 7A 40            [12] 3809 	mov	r2,#0x40
      001598 E5*00            [12] 3810 	mov	a,_bp
      00159A 24 0B            [12] 3811 	add	a,#0x0b
      00159C F8               [12] 3812 	mov	r0,a
      00159D 86 82            [24] 3813 	mov	dpl,@r0
      00159F 08               [12] 3814 	inc	r0
      0015A0 86 83            [24] 3815 	mov	dph,@r0
      0015A2 08               [12] 3816 	inc	r0
      0015A3 86 F0            [24] 3817 	mov	b,@r0
      0015A5 12r00r00         [24] 3818 	lcall	__gptrget
      0015A8 FD               [12] 3819 	mov	r5,a
      0015A9 A3               [24] 3820 	inc	dptr
      0015AA 12r00r00         [24] 3821 	lcall	__gptrget
      0015AD FE               [12] 3822 	mov	r6,a
      0015AE A3               [24] 3823 	inc	dptr
      0015AF 12r00r00         [24] 3824 	lcall	__gptrget
      0015B2 FF               [12] 3825 	mov	r7,a
      0015B3 C0 05            [24] 3826 	push	ar5
      0015B5 C0 04            [24] 3827 	push	ar4
      0015B7 C0 03            [24] 3828 	push	ar3
      0015B9 C0 02            [24] 3829 	push	ar2
      0015BB 8D 82            [24] 3830 	mov	dpl,r5
      0015BD 8E 83            [24] 3831 	mov	dph,r6
      0015BF 8F F0            [24] 3832 	mov	b,r7
      0015C1 12r00r00         [24] 3833 	lcall	_stack_pop
      0015C4 AE 82            [24] 3834 	mov	r6,dpl
      0015C6 AF 83            [24] 3835 	mov	r7,dph
      0015C8 15 81            [12] 3836 	dec	sp
      0015CA 15 81            [12] 3837 	dec	sp
      0015CC 15 81            [12] 3838 	dec	sp
      0015CE D0 05            [24] 3839 	pop	ar5
      0015D0 EE               [12] 3840 	mov	a,r6
      0015D1 4F               [12] 3841 	orl	a,r7
      0015D2 D0 07            [24] 3842 	pop	ar7
      0015D4 D0 06            [24] 3843 	pop	ar6
      0015D6 D0 05            [24] 3844 	pop	ar5
      0015D8 70 4A            [24] 3845 	jnz	00183$
                                   3846 ;	calc.c:201: (void)stack_push(ctx->ps, d0);
      0015DA E5*00            [12] 3847 	mov	a,_bp
      0015DC 24 0B            [12] 3848 	add	a,#0x0b
      0015DE F8               [12] 3849 	mov	r0,a
      0015DF 86 82            [24] 3850 	mov	dpl,@r0
      0015E1 08               [12] 3851 	inc	r0
      0015E2 86 83            [24] 3852 	mov	dph,@r0
      0015E4 08               [12] 3853 	inc	r0
      0015E5 86 F0            [24] 3854 	mov	b,@r0
      0015E7 12r00r00         [24] 3855 	lcall	__gptrget
      0015EA FA               [12] 3856 	mov	r2,a
      0015EB A3               [24] 3857 	inc	dptr
      0015EC 12r00r00         [24] 3858 	lcall	__gptrget
      0015EF FB               [12] 3859 	mov	r3,a
      0015F0 A3               [24] 3860 	inc	dptr
      0015F1 12r00r00         [24] 3861 	lcall	__gptrget
      0015F4 FC               [12] 3862 	mov	r4,a
      0015F5 E5*00            [12] 3863 	mov	a,_bp
      0015F7 24 1A            [12] 3864 	add	a,#0x1a
      0015F9 F8               [12] 3865 	mov	r0,a
      0015FA E6               [12] 3866 	mov	a,@r0
      0015FB C0 E0            [24] 3867 	push	acc
      0015FD 08               [12] 3868 	inc	r0
      0015FE E6               [12] 3869 	mov	a,@r0
      0015FF C0 E0            [24] 3870 	push	acc
      001601 08               [12] 3871 	inc	r0
      001602 E6               [12] 3872 	mov	a,@r0
      001603 C0 E0            [24] 3873 	push	acc
      001605 08               [12] 3874 	inc	r0
      001606 E6               [12] 3875 	mov	a,@r0
      001607 C0 E0            [24] 3876 	push	acc
      001609 8A 82            [24] 3877 	mov	dpl,r2
      00160B 8B 83            [24] 3878 	mov	dph,r3
      00160D 8C F0            [24] 3879 	mov	b,r4
      00160F 12r00r00         [24] 3880 	lcall	_stack_push
      001612 E5 81            [12] 3881 	mov	a,sp
      001614 24 FC            [12] 3882 	add	a,#0xfc
      001616 F5 81            [12] 3883 	mov	sp,a
                                   3884 ;	calc.c:202: printstr("\r\nstack underflow\r\n");
      001618 90r00r47         [24] 3885 	mov	dptr,#___str_9
      00161B 75 F0 80         [24] 3886 	mov	b,#0x80
      00161E 12r00r00         [24] 3887 	lcall	_printstr
      001621 02r23rA7         [24] 3888 	ljmp	00249$
      001624                       3889 00183$:
                                   3890 ;	calc.c:203: } else if (!d0) {
      001624 E5*00            [12] 3891 	mov	a,_bp
      001626 24 1A            [12] 3892 	add	a,#0x1a
      001628 F8               [12] 3893 	mov	r0,a
      001629 E6               [12] 3894 	mov	a,@r0
      00162A 08               [12] 3895 	inc	r0
      00162B 46               [12] 3896 	orl	a,@r0
      00162C 08               [12] 3897 	inc	r0
      00162D 46               [12] 3898 	orl	a,@r0
      00162E 08               [12] 3899 	inc	r0
      00162F 46               [12] 3900 	orl	a,@r0
      001630 60 03            [24] 3901 	jz	00575$
      001632 02r16rBD         [24] 3902 	ljmp	00180$
      001635                       3903 00575$:
                                   3904 ;	calc.c:204: (void)stack_push(ctx->ps, d1);
      001635 E5*00            [12] 3905 	mov	a,_bp
      001637 24 0B            [12] 3906 	add	a,#0x0b
      001639 F8               [12] 3907 	mov	r0,a
      00163A 86 82            [24] 3908 	mov	dpl,@r0
      00163C 08               [12] 3909 	inc	r0
      00163D 86 83            [24] 3910 	mov	dph,@r0
      00163F 08               [12] 3911 	inc	r0
      001640 86 F0            [24] 3912 	mov	b,@r0
      001642 12r00r00         [24] 3913 	lcall	__gptrget
      001645 FA               [12] 3914 	mov	r2,a
      001646 A3               [24] 3915 	inc	dptr
      001647 12r00r00         [24] 3916 	lcall	__gptrget
      00164A FB               [12] 3917 	mov	r3,a
      00164B A3               [24] 3918 	inc	dptr
      00164C 12r00r00         [24] 3919 	lcall	__gptrget
      00164F FC               [12] 3920 	mov	r4,a
      001650 E5*00            [12] 3921 	mov	a,_bp
      001652 24 1E            [12] 3922 	add	a,#0x1e
      001654 F8               [12] 3923 	mov	r0,a
      001655 E6               [12] 3924 	mov	a,@r0
      001656 C0 E0            [24] 3925 	push	acc
      001658 08               [12] 3926 	inc	r0
      001659 E6               [12] 3927 	mov	a,@r0
      00165A C0 E0            [24] 3928 	push	acc
      00165C 08               [12] 3929 	inc	r0
      00165D E6               [12] 3930 	mov	a,@r0
      00165E C0 E0            [24] 3931 	push	acc
      001660 08               [12] 3932 	inc	r0
      001661 E6               [12] 3933 	mov	a,@r0
      001662 C0 E0            [24] 3934 	push	acc
      001664 8A 82            [24] 3935 	mov	dpl,r2
      001666 8B 83            [24] 3936 	mov	dph,r3
      001668 8C F0            [24] 3937 	mov	b,r4
      00166A 12r00r00         [24] 3938 	lcall	_stack_push
      00166D E5 81            [12] 3939 	mov	a,sp
      00166F 24 FC            [12] 3940 	add	a,#0xfc
      001671 F5 81            [12] 3941 	mov	sp,a
                                   3942 ;	calc.c:205: (void)stack_push(ctx->ps, d0);			
      001673 E5*00            [12] 3943 	mov	a,_bp
      001675 24 0B            [12] 3944 	add	a,#0x0b
      001677 F8               [12] 3945 	mov	r0,a
      001678 86 82            [24] 3946 	mov	dpl,@r0
      00167A 08               [12] 3947 	inc	r0
      00167B 86 83            [24] 3948 	mov	dph,@r0
      00167D 08               [12] 3949 	inc	r0
      00167E 86 F0            [24] 3950 	mov	b,@r0
      001680 12r00r00         [24] 3951 	lcall	__gptrget
      001683 FA               [12] 3952 	mov	r2,a
      001684 A3               [24] 3953 	inc	dptr
      001685 12r00r00         [24] 3954 	lcall	__gptrget
      001688 FB               [12] 3955 	mov	r3,a
      001689 A3               [24] 3956 	inc	dptr
      00168A 12r00r00         [24] 3957 	lcall	__gptrget
      00168D FC               [12] 3958 	mov	r4,a
      00168E E5*00            [12] 3959 	mov	a,_bp
      001690 24 1A            [12] 3960 	add	a,#0x1a
      001692 F8               [12] 3961 	mov	r0,a
      001693 E6               [12] 3962 	mov	a,@r0
      001694 C0 E0            [24] 3963 	push	acc
      001696 08               [12] 3964 	inc	r0
      001697 E6               [12] 3965 	mov	a,@r0
      001698 C0 E0            [24] 3966 	push	acc
      00169A 08               [12] 3967 	inc	r0
      00169B E6               [12] 3968 	mov	a,@r0
      00169C C0 E0            [24] 3969 	push	acc
      00169E 08               [12] 3970 	inc	r0
      00169F E6               [12] 3971 	mov	a,@r0
      0016A0 C0 E0            [24] 3972 	push	acc
      0016A2 8A 82            [24] 3973 	mov	dpl,r2
      0016A4 8B 83            [24] 3974 	mov	dph,r3
      0016A6 8C F0            [24] 3975 	mov	b,r4
      0016A8 12r00r00         [24] 3976 	lcall	_stack_push
      0016AB E5 81            [12] 3977 	mov	a,sp
      0016AD 24 FC            [12] 3978 	add	a,#0xfc
      0016AF F5 81            [12] 3979 	mov	sp,a
                                   3980 ;	calc.c:206: printstr("\r\ndivision by zero\r\n");
      0016B1 90r00rA9         [24] 3981 	mov	dptr,#___str_13
      0016B4 75 F0 80         [24] 3982 	mov	b,#0x80
      0016B7 12r00r00         [24] 3983 	lcall	_printstr
      0016BA 02r23rA7         [24] 3984 	ljmp	00249$
      0016BD                       3985 00180$:
                                   3986 ;	calc.c:208: if (ctx->digit[0] == '/') d1 /= d0;
      0016BD 8D 82            [24] 3987 	mov	dpl,r5
      0016BF 8E 83            [24] 3988 	mov	dph,r6
      0016C1 8F F0            [24] 3989 	mov	b,r7
      0016C3 12r00r00         [24] 3990 	lcall	__gptrget
      0016C6 FC               [12] 3991 	mov	r4,a
      0016C7 BC 2F 45         [24] 3992 	cjne	r4,#0x2f,00177$
      0016CA E5*00            [12] 3993 	mov	a,_bp
      0016CC 24 1A            [12] 3994 	add	a,#0x1a
      0016CE F8               [12] 3995 	mov	r0,a
      0016CF E6               [12] 3996 	mov	a,@r0
      0016D0 C0 E0            [24] 3997 	push	acc
      0016D2 08               [12] 3998 	inc	r0
      0016D3 E6               [12] 3999 	mov	a,@r0
      0016D4 C0 E0            [24] 4000 	push	acc
      0016D6 08               [12] 4001 	inc	r0
      0016D7 E6               [12] 4002 	mov	a,@r0
      0016D8 C0 E0            [24] 4003 	push	acc
      0016DA 08               [12] 4004 	inc	r0
      0016DB E6               [12] 4005 	mov	a,@r0
      0016DC C0 E0            [24] 4006 	push	acc
      0016DE E5*00            [12] 4007 	mov	a,_bp
      0016E0 24 1E            [12] 4008 	add	a,#0x1e
      0016E2 F8               [12] 4009 	mov	r0,a
      0016E3 86 82            [24] 4010 	mov	dpl,@r0
      0016E5 08               [12] 4011 	inc	r0
      0016E6 86 83            [24] 4012 	mov	dph,@r0
      0016E8 08               [12] 4013 	inc	r0
      0016E9 86 F0            [24] 4014 	mov	b,@r0
      0016EB 08               [12] 4015 	inc	r0
      0016EC E6               [12] 4016 	mov	a,@r0
      0016ED 12r00r00         [24] 4017 	lcall	__divslong
      0016F0 AF 82            [24] 4018 	mov	r7,dpl
      0016F2 AE 83            [24] 4019 	mov	r6,dph
      0016F4 AD F0            [24] 4020 	mov	r5,b
      0016F6 FC               [12] 4021 	mov	r4,a
      0016F7 E5 81            [12] 4022 	mov	a,sp
      0016F9 24 FC            [12] 4023 	add	a,#0xfc
      0016FB F5 81            [12] 4024 	mov	sp,a
      0016FD E5*00            [12] 4025 	mov	a,_bp
      0016FF 24 1E            [12] 4026 	add	a,#0x1e
      001701 F8               [12] 4027 	mov	r0,a
      001702 A6 07            [24] 4028 	mov	@r0,ar7
      001704 08               [12] 4029 	inc	r0
      001705 A6 06            [24] 4030 	mov	@r0,ar6
      001707 08               [12] 4031 	inc	r0
      001708 A6 05            [24] 4032 	mov	@r0,ar5
      00170A 08               [12] 4033 	inc	r0
      00170B A6 04            [24] 4034 	mov	@r0,ar4
      00170D 80 63            [24] 4035 	sjmp	00178$
      00170F                       4036 00177$:
                                   4037 ;	calc.c:209: else d1 = (unsigned long)d1 / (unsigned long)d0;
      00170F E5*00            [12] 4038 	mov	a,_bp
      001711 24 1E            [12] 4039 	add	a,#0x1e
      001713 F8               [12] 4040 	mov	r0,a
      001714 86 07            [24] 4041 	mov	ar7,@r0
      001716 08               [12] 4042 	inc	r0
      001717 86 06            [24] 4043 	mov	ar6,@r0
      001719 08               [12] 4044 	inc	r0
      00171A 86 05            [24] 4045 	mov	ar5,@r0
      00171C 08               [12] 4046 	inc	r0
      00171D 86 04            [24] 4047 	mov	ar4,@r0
      00171F E5*00            [12] 4048 	mov	a,_bp
      001721 24 1A            [12] 4049 	add	a,#0x1a
      001723 F8               [12] 4050 	mov	r0,a
      001724 E5*00            [12] 4051 	mov	a,_bp
      001726 24 13            [12] 4052 	add	a,#0x13
      001728 F9               [12] 4053 	mov	r1,a
      001729 E6               [12] 4054 	mov	a,@r0
      00172A F7               [12] 4055 	mov	@r1,a
      00172B 08               [12] 4056 	inc	r0
      00172C 09               [12] 4057 	inc	r1
      00172D E6               [12] 4058 	mov	a,@r0
      00172E F7               [12] 4059 	mov	@r1,a
      00172F 08               [12] 4060 	inc	r0
      001730 09               [12] 4061 	inc	r1
      001731 E6               [12] 4062 	mov	a,@r0
      001732 F7               [12] 4063 	mov	@r1,a
      001733 08               [12] 4064 	inc	r0
      001734 09               [12] 4065 	inc	r1
      001735 E6               [12] 4066 	mov	a,@r0
      001736 F7               [12] 4067 	mov	@r1,a
      001737 E5*00            [12] 4068 	mov	a,_bp
      001739 24 13            [12] 4069 	add	a,#0x13
      00173B F8               [12] 4070 	mov	r0,a
      00173C E6               [12] 4071 	mov	a,@r0
      00173D C0 E0            [24] 4072 	push	acc
      00173F 08               [12] 4073 	inc	r0
      001740 E6               [12] 4074 	mov	a,@r0
      001741 C0 E0            [24] 4075 	push	acc
      001743 08               [12] 4076 	inc	r0
      001744 E6               [12] 4077 	mov	a,@r0
      001745 C0 E0            [24] 4078 	push	acc
      001747 08               [12] 4079 	inc	r0
      001748 E6               [12] 4080 	mov	a,@r0
      001749 C0 E0            [24] 4081 	push	acc
      00174B 8F 82            [24] 4082 	mov	dpl,r7
      00174D 8E 83            [24] 4083 	mov	dph,r6
      00174F 8D F0            [24] 4084 	mov	b,r5
      001751 EC               [12] 4085 	mov	a,r4
      001752 12r00r00         [24] 4086 	lcall	__divulong
      001755 AF 82            [24] 4087 	mov	r7,dpl
      001757 AE 83            [24] 4088 	mov	r6,dph
      001759 AD F0            [24] 4089 	mov	r5,b
      00175B FC               [12] 4090 	mov	r4,a
      00175C E5 81            [12] 4091 	mov	a,sp
      00175E 24 FC            [12] 4092 	add	a,#0xfc
      001760 F5 81            [12] 4093 	mov	sp,a
      001762 E5*00            [12] 4094 	mov	a,_bp
      001764 24 1E            [12] 4095 	add	a,#0x1e
      001766 F8               [12] 4096 	mov	r0,a
      001767 A6 07            [24] 4097 	mov	@r0,ar7
      001769 08               [12] 4098 	inc	r0
      00176A A6 06            [24] 4099 	mov	@r0,ar6
      00176C 08               [12] 4100 	inc	r0
      00176D A6 05            [24] 4101 	mov	@r0,ar5
      00176F 08               [12] 4102 	inc	r0
      001770 A6 04            [24] 4103 	mov	@r0,ar4
      001772                       4104 00178$:
                                   4105 ;	calc.c:210: (void)stack_push(ctx->ps, d1);
      001772 E5*00            [12] 4106 	mov	a,_bp
      001774 24 0B            [12] 4107 	add	a,#0x0b
      001776 F8               [12] 4108 	mov	r0,a
      001777 86 82            [24] 4109 	mov	dpl,@r0
      001779 08               [12] 4110 	inc	r0
      00177A 86 83            [24] 4111 	mov	dph,@r0
      00177C 08               [12] 4112 	inc	r0
      00177D 86 F0            [24] 4113 	mov	b,@r0
      00177F 12r00r00         [24] 4114 	lcall	__gptrget
      001782 FA               [12] 4115 	mov	r2,a
      001783 A3               [24] 4116 	inc	dptr
      001784 12r00r00         [24] 4117 	lcall	__gptrget
      001787 FB               [12] 4118 	mov	r3,a
      001788 A3               [24] 4119 	inc	dptr
      001789 12r00r00         [24] 4120 	lcall	__gptrget
      00178C FC               [12] 4121 	mov	r4,a
      00178D E5*00            [12] 4122 	mov	a,_bp
      00178F 24 1E            [12] 4123 	add	a,#0x1e
      001791 F8               [12] 4124 	mov	r0,a
      001792 E6               [12] 4125 	mov	a,@r0
      001793 C0 E0            [24] 4126 	push	acc
      001795 08               [12] 4127 	inc	r0
      001796 E6               [12] 4128 	mov	a,@r0
      001797 C0 E0            [24] 4129 	push	acc
      001799 08               [12] 4130 	inc	r0
      00179A E6               [12] 4131 	mov	a,@r0
      00179B C0 E0            [24] 4132 	push	acc
      00179D 08               [12] 4133 	inc	r0
      00179E E6               [12] 4134 	mov	a,@r0
      00179F C0 E0            [24] 4135 	push	acc
      0017A1 8A 82            [24] 4136 	mov	dpl,r2
      0017A3 8B 83            [24] 4137 	mov	dph,r3
      0017A5 8C F0            [24] 4138 	mov	b,r4
      0017A7 12r00r00         [24] 4139 	lcall	_stack_push
      0017AA E5 81            [12] 4140 	mov	a,sp
      0017AC 24 FC            [12] 4141 	add	a,#0xfc
      0017AE F5 81            [12] 4142 	mov	sp,a
                                   4143 ;	calc.c:212: break;
      0017B0 02r23rA7         [24] 4144 	ljmp	00249$
                                   4145 ;	calc.c:214: case '#':
      0017B3                       4146 00189$:
                                   4147 ;	calc.c:215: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      0017B3 C0 05            [24] 4148 	push	ar5
      0017B5 C0 06            [24] 4149 	push	ar6
      0017B7 C0 07            [24] 4150 	push	ar7
      0017B9 E5*00            [12] 4151 	mov	a,_bp
      0017BB 24 1A            [12] 4152 	add	a,#0x1a
      0017BD FC               [12] 4153 	mov	r4,a
      0017BE 7B 00            [12] 4154 	mov	r3,#0x00
      0017C0 7A 40            [12] 4155 	mov	r2,#0x40
      0017C2 E5*00            [12] 4156 	mov	a,_bp
      0017C4 24 17            [12] 4157 	add	a,#0x17
      0017C6 F8               [12] 4158 	mov	r0,a
      0017C7 E5*00            [12] 4159 	mov	a,_bp
      0017C9 24 13            [12] 4160 	add	a,#0x13
      0017CB F9               [12] 4161 	mov	r1,a
      0017CC 74 11            [12] 4162 	mov	a,#0x11
      0017CE 26               [12] 4163 	add	a,@r0
      0017CF F7               [12] 4164 	mov	@r1,a
      0017D0 74 40            [12] 4165 	mov	a,#0x40
      0017D2 08               [12] 4166 	inc	r0
      0017D3 36               [12] 4167 	addc	a,@r0
      0017D4 09               [12] 4168 	inc	r1
      0017D5 F7               [12] 4169 	mov	@r1,a
      0017D6 08               [12] 4170 	inc	r0
      0017D7 09               [12] 4171 	inc	r1
      0017D8 E6               [12] 4172 	mov	a,@r0
      0017D9 F7               [12] 4173 	mov	@r1,a
      0017DA E5*00            [12] 4174 	mov	a,_bp
      0017DC 24 13            [12] 4175 	add	a,#0x13
      0017DE F8               [12] 4176 	mov	r0,a
      0017DF 86 82            [24] 4177 	mov	dpl,@r0
      0017E1 08               [12] 4178 	inc	r0
      0017E2 86 83            [24] 4179 	mov	dph,@r0
      0017E4 08               [12] 4180 	inc	r0
      0017E5 86 F0            [24] 4181 	mov	b,@r0
      0017E7 12r00r00         [24] 4182 	lcall	__gptrget
      0017EA FD               [12] 4183 	mov	r5,a
      0017EB A3               [24] 4184 	inc	dptr
      0017EC 12r00r00         [24] 4185 	lcall	__gptrget
      0017EF FE               [12] 4186 	mov	r6,a
      0017F0 A3               [24] 4187 	inc	dptr
      0017F1 12r00r00         [24] 4188 	lcall	__gptrget
      0017F4 FF               [12] 4189 	mov	r7,a
      0017F5 C0 05            [24] 4190 	push	ar5
      0017F7 C0 04            [24] 4191 	push	ar4
      0017F9 C0 03            [24] 4192 	push	ar3
      0017FB C0 02            [24] 4193 	push	ar2
      0017FD 8D 82            [24] 4194 	mov	dpl,r5
      0017FF 8E 83            [24] 4195 	mov	dph,r6
      001801 8F F0            [24] 4196 	mov	b,r7
      001803 12r00r00         [24] 4197 	lcall	_stack_pop
      001806 AE 82            [24] 4198 	mov	r6,dpl
      001808 AF 83            [24] 4199 	mov	r7,dph
      00180A 15 81            [12] 4200 	dec	sp
      00180C 15 81            [12] 4201 	dec	sp
      00180E 15 81            [12] 4202 	dec	sp
      001810 D0 05            [24] 4203 	pop	ar5
      001812 EE               [12] 4204 	mov	a,r6
      001813 4F               [12] 4205 	orl	a,r7
      001814 D0 07            [24] 4206 	pop	ar7
      001816 D0 06            [24] 4207 	pop	ar6
      001818 D0 05            [24] 4208 	pop	ar5
      00181A 70 0C            [24] 4209 	jnz	00200$
      00181C 90r00r47         [24] 4210 	mov	dptr,#___str_9
      00181F 75 F0 80         [24] 4211 	mov	b,#0x80
      001822 12r00r00         [24] 4212 	lcall	_printstr
      001825 02r23rA7         [24] 4213 	ljmp	00249$
      001828                       4214 00200$:
                                   4215 ;	calc.c:216: else if (!stack_pop(ctx->ps, &d1)) {
      001828 C0 05            [24] 4216 	push	ar5
      00182A C0 06            [24] 4217 	push	ar6
      00182C C0 07            [24] 4218 	push	ar7
      00182E E5*00            [12] 4219 	mov	a,_bp
      001830 24 1E            [12] 4220 	add	a,#0x1e
      001832 FC               [12] 4221 	mov	r4,a
      001833 7B 00            [12] 4222 	mov	r3,#0x00
      001835 7A 40            [12] 4223 	mov	r2,#0x40
      001837 E5*00            [12] 4224 	mov	a,_bp
      001839 24 13            [12] 4225 	add	a,#0x13
      00183B F8               [12] 4226 	mov	r0,a
      00183C 86 82            [24] 4227 	mov	dpl,@r0
      00183E 08               [12] 4228 	inc	r0
      00183F 86 83            [24] 4229 	mov	dph,@r0
      001841 08               [12] 4230 	inc	r0
      001842 86 F0            [24] 4231 	mov	b,@r0
      001844 12r00r00         [24] 4232 	lcall	__gptrget
      001847 FD               [12] 4233 	mov	r5,a
      001848 A3               [24] 4234 	inc	dptr
      001849 12r00r00         [24] 4235 	lcall	__gptrget
      00184C FE               [12] 4236 	mov	r6,a
      00184D A3               [24] 4237 	inc	dptr
      00184E 12r00r00         [24] 4238 	lcall	__gptrget
      001851 FF               [12] 4239 	mov	r7,a
      001852 C0 05            [24] 4240 	push	ar5
      001854 C0 04            [24] 4241 	push	ar4
      001856 C0 03            [24] 4242 	push	ar3
      001858 C0 02            [24] 4243 	push	ar2
      00185A 8D 82            [24] 4244 	mov	dpl,r5
      00185C 8E 83            [24] 4245 	mov	dph,r6
      00185E 8F F0            [24] 4246 	mov	b,r7
      001860 12r00r00         [24] 4247 	lcall	_stack_pop
      001863 AE 82            [24] 4248 	mov	r6,dpl
      001865 AF 83            [24] 4249 	mov	r7,dph
      001867 15 81            [12] 4250 	dec	sp
      001869 15 81            [12] 4251 	dec	sp
      00186B 15 81            [12] 4252 	dec	sp
      00186D D0 05            [24] 4253 	pop	ar5
      00186F EE               [12] 4254 	mov	a,r6
      001870 4F               [12] 4255 	orl	a,r7
      001871 D0 07            [24] 4256 	pop	ar7
      001873 D0 06            [24] 4257 	pop	ar6
      001875 D0 05            [24] 4258 	pop	ar5
      001877 70 4A            [24] 4259 	jnz	00197$
                                   4260 ;	calc.c:217: (void)stack_push(ctx->ps, d0);
      001879 E5*00            [12] 4261 	mov	a,_bp
      00187B 24 13            [12] 4262 	add	a,#0x13
      00187D F8               [12] 4263 	mov	r0,a
      00187E 86 82            [24] 4264 	mov	dpl,@r0
      001880 08               [12] 4265 	inc	r0
      001881 86 83            [24] 4266 	mov	dph,@r0
      001883 08               [12] 4267 	inc	r0
      001884 86 F0            [24] 4268 	mov	b,@r0
      001886 12r00r00         [24] 4269 	lcall	__gptrget
      001889 FA               [12] 4270 	mov	r2,a
      00188A A3               [24] 4271 	inc	dptr
      00188B 12r00r00         [24] 4272 	lcall	__gptrget
      00188E FB               [12] 4273 	mov	r3,a
      00188F A3               [24] 4274 	inc	dptr
      001890 12r00r00         [24] 4275 	lcall	__gptrget
      001893 FC               [12] 4276 	mov	r4,a
      001894 E5*00            [12] 4277 	mov	a,_bp
      001896 24 1A            [12] 4278 	add	a,#0x1a
      001898 F8               [12] 4279 	mov	r0,a
      001899 E6               [12] 4280 	mov	a,@r0
      00189A C0 E0            [24] 4281 	push	acc
      00189C 08               [12] 4282 	inc	r0
      00189D E6               [12] 4283 	mov	a,@r0
      00189E C0 E0            [24] 4284 	push	acc
      0018A0 08               [12] 4285 	inc	r0
      0018A1 E6               [12] 4286 	mov	a,@r0
      0018A2 C0 E0            [24] 4287 	push	acc
      0018A4 08               [12] 4288 	inc	r0
      0018A5 E6               [12] 4289 	mov	a,@r0
      0018A6 C0 E0            [24] 4290 	push	acc
      0018A8 8A 82            [24] 4291 	mov	dpl,r2
      0018AA 8B 83            [24] 4292 	mov	dph,r3
      0018AC 8C F0            [24] 4293 	mov	b,r4
      0018AE 12r00r00         [24] 4294 	lcall	_stack_push
      0018B1 E5 81            [12] 4295 	mov	a,sp
      0018B3 24 FC            [12] 4296 	add	a,#0xfc
      0018B5 F5 81            [12] 4297 	mov	sp,a
                                   4298 ;	calc.c:218: printstr("\r\nstack underflow\r\n");
      0018B7 90r00r47         [24] 4299 	mov	dptr,#___str_9
      0018BA 75 F0 80         [24] 4300 	mov	b,#0x80
      0018BD 12r00r00         [24] 4301 	lcall	_printstr
      0018C0 02r23rA7         [24] 4302 	ljmp	00249$
      0018C3                       4303 00197$:
                                   4304 ;	calc.c:219: } else if (!d0) {
      0018C3 E5*00            [12] 4305 	mov	a,_bp
      0018C5 24 1A            [12] 4306 	add	a,#0x1a
      0018C7 F8               [12] 4307 	mov	r0,a
      0018C8 E6               [12] 4308 	mov	a,@r0
      0018C9 08               [12] 4309 	inc	r0
      0018CA 46               [12] 4310 	orl	a,@r0
      0018CB 08               [12] 4311 	inc	r0
      0018CC 46               [12] 4312 	orl	a,@r0
      0018CD 08               [12] 4313 	inc	r0
      0018CE 46               [12] 4314 	orl	a,@r0
      0018CF 60 03            [24] 4315 	jz	00580$
      0018D1 02r19r5C         [24] 4316 	ljmp	00194$
      0018D4                       4317 00580$:
                                   4318 ;	calc.c:220: (void)stack_push(ctx->ps, d1);
      0018D4 E5*00            [12] 4319 	mov	a,_bp
      0018D6 24 13            [12] 4320 	add	a,#0x13
      0018D8 F8               [12] 4321 	mov	r0,a
      0018D9 86 82            [24] 4322 	mov	dpl,@r0
      0018DB 08               [12] 4323 	inc	r0
      0018DC 86 83            [24] 4324 	mov	dph,@r0
      0018DE 08               [12] 4325 	inc	r0
      0018DF 86 F0            [24] 4326 	mov	b,@r0
      0018E1 12r00r00         [24] 4327 	lcall	__gptrget
      0018E4 FA               [12] 4328 	mov	r2,a
      0018E5 A3               [24] 4329 	inc	dptr
      0018E6 12r00r00         [24] 4330 	lcall	__gptrget
      0018E9 FB               [12] 4331 	mov	r3,a
      0018EA A3               [24] 4332 	inc	dptr
      0018EB 12r00r00         [24] 4333 	lcall	__gptrget
      0018EE FC               [12] 4334 	mov	r4,a
      0018EF E5*00            [12] 4335 	mov	a,_bp
      0018F1 24 1E            [12] 4336 	add	a,#0x1e
      0018F3 F8               [12] 4337 	mov	r0,a
      0018F4 E6               [12] 4338 	mov	a,@r0
      0018F5 C0 E0            [24] 4339 	push	acc
      0018F7 08               [12] 4340 	inc	r0
      0018F8 E6               [12] 4341 	mov	a,@r0
      0018F9 C0 E0            [24] 4342 	push	acc
      0018FB 08               [12] 4343 	inc	r0
      0018FC E6               [12] 4344 	mov	a,@r0
      0018FD C0 E0            [24] 4345 	push	acc
      0018FF 08               [12] 4346 	inc	r0
      001900 E6               [12] 4347 	mov	a,@r0
      001901 C0 E0            [24] 4348 	push	acc
      001903 8A 82            [24] 4349 	mov	dpl,r2
      001905 8B 83            [24] 4350 	mov	dph,r3
      001907 8C F0            [24] 4351 	mov	b,r4
      001909 12r00r00         [24] 4352 	lcall	_stack_push
      00190C E5 81            [12] 4353 	mov	a,sp
      00190E 24 FC            [12] 4354 	add	a,#0xfc
      001910 F5 81            [12] 4355 	mov	sp,a
                                   4356 ;	calc.c:221: (void)stack_push(ctx->ps, d0);			
      001912 E5*00            [12] 4357 	mov	a,_bp
      001914 24 13            [12] 4358 	add	a,#0x13
      001916 F8               [12] 4359 	mov	r0,a
      001917 86 82            [24] 4360 	mov	dpl,@r0
      001919 08               [12] 4361 	inc	r0
      00191A 86 83            [24] 4362 	mov	dph,@r0
      00191C 08               [12] 4363 	inc	r0
      00191D 86 F0            [24] 4364 	mov	b,@r0
      00191F 12r00r00         [24] 4365 	lcall	__gptrget
      001922 FA               [12] 4366 	mov	r2,a
      001923 A3               [24] 4367 	inc	dptr
      001924 12r00r00         [24] 4368 	lcall	__gptrget
      001927 FB               [12] 4369 	mov	r3,a
      001928 A3               [24] 4370 	inc	dptr
      001929 12r00r00         [24] 4371 	lcall	__gptrget
      00192C FC               [12] 4372 	mov	r4,a
      00192D E5*00            [12] 4373 	mov	a,_bp
      00192F 24 1A            [12] 4374 	add	a,#0x1a
      001931 F8               [12] 4375 	mov	r0,a
      001932 E6               [12] 4376 	mov	a,@r0
      001933 C0 E0            [24] 4377 	push	acc
      001935 08               [12] 4378 	inc	r0
      001936 E6               [12] 4379 	mov	a,@r0
      001937 C0 E0            [24] 4380 	push	acc
      001939 08               [12] 4381 	inc	r0
      00193A E6               [12] 4382 	mov	a,@r0
      00193B C0 E0            [24] 4383 	push	acc
      00193D 08               [12] 4384 	inc	r0
      00193E E6               [12] 4385 	mov	a,@r0
      00193F C0 E0            [24] 4386 	push	acc
      001941 8A 82            [24] 4387 	mov	dpl,r2
      001943 8B 83            [24] 4388 	mov	dph,r3
      001945 8C F0            [24] 4389 	mov	b,r4
      001947 12r00r00         [24] 4390 	lcall	_stack_push
      00194A E5 81            [12] 4391 	mov	a,sp
      00194C 24 FC            [12] 4392 	add	a,#0xfc
      00194E F5 81            [12] 4393 	mov	sp,a
                                   4394 ;	calc.c:222: printstr("\r\ndivision by zero\r\n");
      001950 90r00rA9         [24] 4395 	mov	dptr,#___str_13
      001953 75 F0 80         [24] 4396 	mov	b,#0x80
      001956 12r00r00         [24] 4397 	lcall	_printstr
      001959 02r23rA7         [24] 4398 	ljmp	00249$
      00195C                       4399 00194$:
                                   4400 ;	calc.c:224: if (ctx->digit[0] == '%') d1 %= d0;
      00195C 8D 82            [24] 4401 	mov	dpl,r5
      00195E 8E 83            [24] 4402 	mov	dph,r6
      001960 8F F0            [24] 4403 	mov	b,r7
      001962 12r00r00         [24] 4404 	lcall	__gptrget
      001965 FD               [12] 4405 	mov	r5,a
      001966 BD 25 45         [24] 4406 	cjne	r5,#0x25,00191$
      001969 E5*00            [12] 4407 	mov	a,_bp
      00196B 24 1A            [12] 4408 	add	a,#0x1a
      00196D F8               [12] 4409 	mov	r0,a
      00196E E6               [12] 4410 	mov	a,@r0
      00196F C0 E0            [24] 4411 	push	acc
      001971 08               [12] 4412 	inc	r0
      001972 E6               [12] 4413 	mov	a,@r0
      001973 C0 E0            [24] 4414 	push	acc
      001975 08               [12] 4415 	inc	r0
      001976 E6               [12] 4416 	mov	a,@r0
      001977 C0 E0            [24] 4417 	push	acc
      001979 08               [12] 4418 	inc	r0
      00197A E6               [12] 4419 	mov	a,@r0
      00197B C0 E0            [24] 4420 	push	acc
      00197D E5*00            [12] 4421 	mov	a,_bp
      00197F 24 1E            [12] 4422 	add	a,#0x1e
      001981 F8               [12] 4423 	mov	r0,a
      001982 86 82            [24] 4424 	mov	dpl,@r0
      001984 08               [12] 4425 	inc	r0
      001985 86 83            [24] 4426 	mov	dph,@r0
      001987 08               [12] 4427 	inc	r0
      001988 86 F0            [24] 4428 	mov	b,@r0
      00198A 08               [12] 4429 	inc	r0
      00198B E6               [12] 4430 	mov	a,@r0
      00198C 12r00r00         [24] 4431 	lcall	__modslong
      00198F AC 82            [24] 4432 	mov	r4,dpl
      001991 AD 83            [24] 4433 	mov	r5,dph
      001993 AE F0            [24] 4434 	mov	r6,b
      001995 FF               [12] 4435 	mov	r7,a
      001996 E5 81            [12] 4436 	mov	a,sp
      001998 24 FC            [12] 4437 	add	a,#0xfc
      00199A F5 81            [12] 4438 	mov	sp,a
      00199C E5*00            [12] 4439 	mov	a,_bp
      00199E 24 1E            [12] 4440 	add	a,#0x1e
      0019A0 F8               [12] 4441 	mov	r0,a
      0019A1 A6 04            [24] 4442 	mov	@r0,ar4
      0019A3 08               [12] 4443 	inc	r0
      0019A4 A6 05            [24] 4444 	mov	@r0,ar5
      0019A6 08               [12] 4445 	inc	r0
      0019A7 A6 06            [24] 4446 	mov	@r0,ar6
      0019A9 08               [12] 4447 	inc	r0
      0019AA A6 07            [24] 4448 	mov	@r0,ar7
      0019AC 80 5F            [24] 4449 	sjmp	00192$
      0019AE                       4450 00191$:
                                   4451 ;	calc.c:225: else d1 = (unsigned long)d1 % (unsigned long)d0;
      0019AE E5*00            [12] 4452 	mov	a,_bp
      0019B0 24 1E            [12] 4453 	add	a,#0x1e
      0019B2 F8               [12] 4454 	mov	r0,a
      0019B3 E5*00            [12] 4455 	mov	a,_bp
      0019B5 24 0F            [12] 4456 	add	a,#0x0f
      0019B7 F9               [12] 4457 	mov	r1,a
      0019B8 E6               [12] 4458 	mov	a,@r0
      0019B9 F7               [12] 4459 	mov	@r1,a
      0019BA 08               [12] 4460 	inc	r0
      0019BB 09               [12] 4461 	inc	r1
      0019BC E6               [12] 4462 	mov	a,@r0
      0019BD F7               [12] 4463 	mov	@r1,a
      0019BE 08               [12] 4464 	inc	r0
      0019BF 09               [12] 4465 	inc	r1
      0019C0 E6               [12] 4466 	mov	a,@r0
      0019C1 F7               [12] 4467 	mov	@r1,a
      0019C2 08               [12] 4468 	inc	r0
      0019C3 09               [12] 4469 	inc	r1
      0019C4 E6               [12] 4470 	mov	a,@r0
      0019C5 F7               [12] 4471 	mov	@r1,a
      0019C6 E5*00            [12] 4472 	mov	a,_bp
      0019C8 24 1A            [12] 4473 	add	a,#0x1a
      0019CA F8               [12] 4474 	mov	r0,a
      0019CB 86 02            [24] 4475 	mov	ar2,@r0
      0019CD 08               [12] 4476 	inc	r0
      0019CE 86 03            [24] 4477 	mov	ar3,@r0
      0019D0 08               [12] 4478 	inc	r0
      0019D1 86 06            [24] 4479 	mov	ar6,@r0
      0019D3 08               [12] 4480 	inc	r0
      0019D4 86 07            [24] 4481 	mov	ar7,@r0
      0019D6 C0 02            [24] 4482 	push	ar2
      0019D8 C0 03            [24] 4483 	push	ar3
      0019DA C0 06            [24] 4484 	push	ar6
      0019DC C0 07            [24] 4485 	push	ar7
      0019DE E5*00            [12] 4486 	mov	a,_bp
      0019E0 24 0F            [12] 4487 	add	a,#0x0f
      0019E2 F8               [12] 4488 	mov	r0,a
      0019E3 86 82            [24] 4489 	mov	dpl,@r0
      0019E5 08               [12] 4490 	inc	r0
      0019E6 86 83            [24] 4491 	mov	dph,@r0
      0019E8 08               [12] 4492 	inc	r0
      0019E9 86 F0            [24] 4493 	mov	b,@r0
      0019EB 08               [12] 4494 	inc	r0
      0019EC E6               [12] 4495 	mov	a,@r0
      0019ED 12r00r00         [24] 4496 	lcall	__modulong
      0019F0 AC 82            [24] 4497 	mov	r4,dpl
      0019F2 AD 83            [24] 4498 	mov	r5,dph
      0019F4 AE F0            [24] 4499 	mov	r6,b
      0019F6 FF               [12] 4500 	mov	r7,a
      0019F7 E5 81            [12] 4501 	mov	a,sp
      0019F9 24 FC            [12] 4502 	add	a,#0xfc
      0019FB F5 81            [12] 4503 	mov	sp,a
      0019FD E5*00            [12] 4504 	mov	a,_bp
      0019FF 24 1E            [12] 4505 	add	a,#0x1e
      001A01 F8               [12] 4506 	mov	r0,a
      001A02 A6 04            [24] 4507 	mov	@r0,ar4
      001A04 08               [12] 4508 	inc	r0
      001A05 A6 05            [24] 4509 	mov	@r0,ar5
      001A07 08               [12] 4510 	inc	r0
      001A08 A6 06            [24] 4511 	mov	@r0,ar6
      001A0A 08               [12] 4512 	inc	r0
      001A0B A6 07            [24] 4513 	mov	@r0,ar7
      001A0D                       4514 00192$:
                                   4515 ;	calc.c:226: (void)stack_push(ctx->ps, d1);
      001A0D E5*00            [12] 4516 	mov	a,_bp
      001A0F 24 13            [12] 4517 	add	a,#0x13
      001A11 F8               [12] 4518 	mov	r0,a
      001A12 86 82            [24] 4519 	mov	dpl,@r0
      001A14 08               [12] 4520 	inc	r0
      001A15 86 83            [24] 4521 	mov	dph,@r0
      001A17 08               [12] 4522 	inc	r0
      001A18 86 F0            [24] 4523 	mov	b,@r0
      001A1A 12r00r00         [24] 4524 	lcall	__gptrget
      001A1D FD               [12] 4525 	mov	r5,a
      001A1E A3               [24] 4526 	inc	dptr
      001A1F 12r00r00         [24] 4527 	lcall	__gptrget
      001A22 FE               [12] 4528 	mov	r6,a
      001A23 A3               [24] 4529 	inc	dptr
      001A24 12r00r00         [24] 4530 	lcall	__gptrget
      001A27 FF               [12] 4531 	mov	r7,a
      001A28 E5*00            [12] 4532 	mov	a,_bp
      001A2A 24 1E            [12] 4533 	add	a,#0x1e
      001A2C F8               [12] 4534 	mov	r0,a
      001A2D E6               [12] 4535 	mov	a,@r0
      001A2E C0 E0            [24] 4536 	push	acc
      001A30 08               [12] 4537 	inc	r0
      001A31 E6               [12] 4538 	mov	a,@r0
      001A32 C0 E0            [24] 4539 	push	acc
      001A34 08               [12] 4540 	inc	r0
      001A35 E6               [12] 4541 	mov	a,@r0
      001A36 C0 E0            [24] 4542 	push	acc
      001A38 08               [12] 4543 	inc	r0
      001A39 E6               [12] 4544 	mov	a,@r0
      001A3A C0 E0            [24] 4545 	push	acc
      001A3C 8D 82            [24] 4546 	mov	dpl,r5
      001A3E 8E 83            [24] 4547 	mov	dph,r6
      001A40 8F F0            [24] 4548 	mov	b,r7
      001A42 12r00r00         [24] 4549 	lcall	_stack_push
      001A45 E5 81            [12] 4550 	mov	a,sp
      001A47 24 FC            [12] 4551 	add	a,#0xfc
      001A49 F5 81            [12] 4552 	mov	sp,a
                                   4553 ;	calc.c:228: break;
      001A4B 02r23rA7         [24] 4554 	ljmp	00249$
                                   4555 ;	calc.c:229: case '&':
      001A4E                       4556 00202$:
                                   4557 ;	calc.c:230: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      001A4E E5*00            [12] 4558 	mov	a,_bp
      001A50 24 1A            [12] 4559 	add	a,#0x1a
      001A52 FF               [12] 4560 	mov	r7,a
      001A53 E5*00            [12] 4561 	mov	a,_bp
      001A55 24 13            [12] 4562 	add	a,#0x13
      001A57 F8               [12] 4563 	mov	r0,a
      001A58 A6 07            [24] 4564 	mov	@r0,ar7
      001A5A 08               [12] 4565 	inc	r0
      001A5B 76 00            [12] 4566 	mov	@r0,#0x00
      001A5D 08               [12] 4567 	inc	r0
      001A5E 76 40            [12] 4568 	mov	@r0,#0x40
      001A60 E5*00            [12] 4569 	mov	a,_bp
      001A62 24 17            [12] 4570 	add	a,#0x17
      001A64 F8               [12] 4571 	mov	r0,a
      001A65 74 11            [12] 4572 	mov	a,#0x11
      001A67 26               [12] 4573 	add	a,@r0
      001A68 FA               [12] 4574 	mov	r2,a
      001A69 74 40            [12] 4575 	mov	a,#0x40
      001A6B 08               [12] 4576 	inc	r0
      001A6C 36               [12] 4577 	addc	a,@r0
      001A6D FB               [12] 4578 	mov	r3,a
      001A6E 08               [12] 4579 	inc	r0
      001A6F 86 04            [24] 4580 	mov	ar4,@r0
      001A71 8A 82            [24] 4581 	mov	dpl,r2
      001A73 8B 83            [24] 4582 	mov	dph,r3
      001A75 8C F0            [24] 4583 	mov	b,r4
      001A77 12r00r00         [24] 4584 	lcall	__gptrget
      001A7A FD               [12] 4585 	mov	r5,a
      001A7B A3               [24] 4586 	inc	dptr
      001A7C 12r00r00         [24] 4587 	lcall	__gptrget
      001A7F FE               [12] 4588 	mov	r6,a
      001A80 A3               [24] 4589 	inc	dptr
      001A81 12r00r00         [24] 4590 	lcall	__gptrget
      001A84 FF               [12] 4591 	mov	r7,a
      001A85 C0 04            [24] 4592 	push	ar4
      001A87 C0 03            [24] 4593 	push	ar3
      001A89 C0 02            [24] 4594 	push	ar2
      001A8B E5*00            [12] 4595 	mov	a,_bp
      001A8D 24 13            [12] 4596 	add	a,#0x13
      001A8F F8               [12] 4597 	mov	r0,a
      001A90 E6               [12] 4598 	mov	a,@r0
      001A91 C0 E0            [24] 4599 	push	acc
      001A93 08               [12] 4600 	inc	r0
      001A94 E6               [12] 4601 	mov	a,@r0
      001A95 C0 E0            [24] 4602 	push	acc
      001A97 08               [12] 4603 	inc	r0
      001A98 E6               [12] 4604 	mov	a,@r0
      001A99 C0 E0            [24] 4605 	push	acc
      001A9B 8D 82            [24] 4606 	mov	dpl,r5
      001A9D 8E 83            [24] 4607 	mov	dph,r6
      001A9F 8F F0            [24] 4608 	mov	b,r7
      001AA1 12r00r00         [24] 4609 	lcall	_stack_pop
      001AA4 AE 82            [24] 4610 	mov	r6,dpl
      001AA6 AF 83            [24] 4611 	mov	r7,dph
      001AA8 15 81            [12] 4612 	dec	sp
      001AAA 15 81            [12] 4613 	dec	sp
      001AAC 15 81            [12] 4614 	dec	sp
      001AAE D0 02            [24] 4615 	pop	ar2
      001AB0 D0 03            [24] 4616 	pop	ar3
      001AB2 D0 04            [24] 4617 	pop	ar4
      001AB4 EE               [12] 4618 	mov	a,r6
      001AB5 4F               [12] 4619 	orl	a,r7
      001AB6 70 0C            [24] 4620 	jnz	00207$
      001AB8 90r00r47         [24] 4621 	mov	dptr,#___str_9
      001ABB 75 F0 80         [24] 4622 	mov	b,#0x80
      001ABE 12r00r00         [24] 4623 	lcall	_printstr
      001AC1 02r23rA7         [24] 4624 	ljmp	00249$
      001AC4                       4625 00207$:
                                   4626 ;	calc.c:231: else if (!stack_pop(ctx->ps, &d1)) {
      001AC4 E5*00            [12] 4627 	mov	a,_bp
      001AC6 24 1E            [12] 4628 	add	a,#0x1e
      001AC8 FF               [12] 4629 	mov	r7,a
      001AC9 E5*00            [12] 4630 	mov	a,_bp
      001ACB 24 13            [12] 4631 	add	a,#0x13
      001ACD F8               [12] 4632 	mov	r0,a
      001ACE A6 07            [24] 4633 	mov	@r0,ar7
      001AD0 08               [12] 4634 	inc	r0
      001AD1 76 00            [12] 4635 	mov	@r0,#0x00
      001AD3 08               [12] 4636 	inc	r0
      001AD4 76 40            [12] 4637 	mov	@r0,#0x40
      001AD6 8A 82            [24] 4638 	mov	dpl,r2
      001AD8 8B 83            [24] 4639 	mov	dph,r3
      001ADA 8C F0            [24] 4640 	mov	b,r4
      001ADC 12r00r00         [24] 4641 	lcall	__gptrget
      001ADF FD               [12] 4642 	mov	r5,a
      001AE0 A3               [24] 4643 	inc	dptr
      001AE1 12r00r00         [24] 4644 	lcall	__gptrget
      001AE4 FE               [12] 4645 	mov	r6,a
      001AE5 A3               [24] 4646 	inc	dptr
      001AE6 12r00r00         [24] 4647 	lcall	__gptrget
      001AE9 FF               [12] 4648 	mov	r7,a
      001AEA C0 04            [24] 4649 	push	ar4
      001AEC C0 03            [24] 4650 	push	ar3
      001AEE C0 02            [24] 4651 	push	ar2
      001AF0 E5*00            [12] 4652 	mov	a,_bp
      001AF2 24 13            [12] 4653 	add	a,#0x13
      001AF4 F8               [12] 4654 	mov	r0,a
      001AF5 E6               [12] 4655 	mov	a,@r0
      001AF6 C0 E0            [24] 4656 	push	acc
      001AF8 08               [12] 4657 	inc	r0
      001AF9 E6               [12] 4658 	mov	a,@r0
      001AFA C0 E0            [24] 4659 	push	acc
      001AFC 08               [12] 4660 	inc	r0
      001AFD E6               [12] 4661 	mov	a,@r0
      001AFE C0 E0            [24] 4662 	push	acc
      001B00 8D 82            [24] 4663 	mov	dpl,r5
      001B02 8E 83            [24] 4664 	mov	dph,r6
      001B04 8F F0            [24] 4665 	mov	b,r7
      001B06 12r00r00         [24] 4666 	lcall	_stack_pop
      001B09 AE 82            [24] 4667 	mov	r6,dpl
      001B0B AF 83            [24] 4668 	mov	r7,dph
      001B0D 15 81            [12] 4669 	dec	sp
      001B0F 15 81            [12] 4670 	dec	sp
      001B11 15 81            [12] 4671 	dec	sp
      001B13 D0 02            [24] 4672 	pop	ar2
      001B15 D0 03            [24] 4673 	pop	ar3
      001B17 D0 04            [24] 4674 	pop	ar4
      001B19 EE               [12] 4675 	mov	a,r6
      001B1A 4F               [12] 4676 	orl	a,r7
      001B1B 70 43            [24] 4677 	jnz	00204$
                                   4678 ;	calc.c:232: (void)stack_push(ctx->ps, d0);
      001B1D 8A 82            [24] 4679 	mov	dpl,r2
      001B1F 8B 83            [24] 4680 	mov	dph,r3
      001B21 8C F0            [24] 4681 	mov	b,r4
      001B23 12r00r00         [24] 4682 	lcall	__gptrget
      001B26 FD               [12] 4683 	mov	r5,a
      001B27 A3               [24] 4684 	inc	dptr
      001B28 12r00r00         [24] 4685 	lcall	__gptrget
      001B2B FE               [12] 4686 	mov	r6,a
      001B2C A3               [24] 4687 	inc	dptr
      001B2D 12r00r00         [24] 4688 	lcall	__gptrget
      001B30 FF               [12] 4689 	mov	r7,a
      001B31 E5*00            [12] 4690 	mov	a,_bp
      001B33 24 1A            [12] 4691 	add	a,#0x1a
      001B35 F8               [12] 4692 	mov	r0,a
      001B36 E6               [12] 4693 	mov	a,@r0
      001B37 C0 E0            [24] 4694 	push	acc
      001B39 08               [12] 4695 	inc	r0
      001B3A E6               [12] 4696 	mov	a,@r0
      001B3B C0 E0            [24] 4697 	push	acc
      001B3D 08               [12] 4698 	inc	r0
      001B3E E6               [12] 4699 	mov	a,@r0
      001B3F C0 E0            [24] 4700 	push	acc
      001B41 08               [12] 4701 	inc	r0
      001B42 E6               [12] 4702 	mov	a,@r0
      001B43 C0 E0            [24] 4703 	push	acc
      001B45 8D 82            [24] 4704 	mov	dpl,r5
      001B47 8E 83            [24] 4705 	mov	dph,r6
      001B49 8F F0            [24] 4706 	mov	b,r7
      001B4B 12r00r00         [24] 4707 	lcall	_stack_push
      001B4E E5 81            [12] 4708 	mov	a,sp
      001B50 24 FC            [12] 4709 	add	a,#0xfc
      001B52 F5 81            [12] 4710 	mov	sp,a
                                   4711 ;	calc.c:233: printstr("\r\nstack underflow\r\n");
      001B54 90r00r47         [24] 4712 	mov	dptr,#___str_9
      001B57 75 F0 80         [24] 4713 	mov	b,#0x80
      001B5A 12r00r00         [24] 4714 	lcall	_printstr
      001B5D 02r23rA7         [24] 4715 	ljmp	00249$
      001B60                       4716 00204$:
                                   4717 ;	calc.c:235: d1 &= d0;
      001B60 E5*00            [12] 4718 	mov	a,_bp
      001B62 24 1E            [12] 4719 	add	a,#0x1e
      001B64 F8               [12] 4720 	mov	r0,a
      001B65 E5*00            [12] 4721 	mov	a,_bp
      001B67 24 1A            [12] 4722 	add	a,#0x1a
      001B69 F9               [12] 4723 	mov	r1,a
      001B6A E7               [12] 4724 	mov	a,@r1
      001B6B 56               [12] 4725 	anl	a,@r0
      001B6C F6               [12] 4726 	mov	@r0,a
      001B6D 09               [12] 4727 	inc	r1
      001B6E E7               [12] 4728 	mov	a,@r1
      001B6F 08               [12] 4729 	inc	r0
      001B70 56               [12] 4730 	anl	a,@r0
      001B71 F6               [12] 4731 	mov	@r0,a
      001B72 09               [12] 4732 	inc	r1
      001B73 E7               [12] 4733 	mov	a,@r1
      001B74 08               [12] 4734 	inc	r0
      001B75 56               [12] 4735 	anl	a,@r0
      001B76 F6               [12] 4736 	mov	@r0,a
      001B77 09               [12] 4737 	inc	r1
      001B78 E7               [12] 4738 	mov	a,@r1
      001B79 08               [12] 4739 	inc	r0
      001B7A 56               [12] 4740 	anl	a,@r0
      001B7B F6               [12] 4741 	mov	@r0,a
                                   4742 ;	calc.c:236: (void)stack_push(ctx->ps, d1);
      001B7C 8A 82            [24] 4743 	mov	dpl,r2
      001B7E 8B 83            [24] 4744 	mov	dph,r3
      001B80 8C F0            [24] 4745 	mov	b,r4
      001B82 12r00r00         [24] 4746 	lcall	__gptrget
      001B85 FA               [12] 4747 	mov	r2,a
      001B86 A3               [24] 4748 	inc	dptr
      001B87 12r00r00         [24] 4749 	lcall	__gptrget
      001B8A FB               [12] 4750 	mov	r3,a
      001B8B A3               [24] 4751 	inc	dptr
      001B8C 12r00r00         [24] 4752 	lcall	__gptrget
      001B8F FC               [12] 4753 	mov	r4,a
      001B90 E5*00            [12] 4754 	mov	a,_bp
      001B92 24 1E            [12] 4755 	add	a,#0x1e
      001B94 F8               [12] 4756 	mov	r0,a
      001B95 E6               [12] 4757 	mov	a,@r0
      001B96 C0 E0            [24] 4758 	push	acc
      001B98 08               [12] 4759 	inc	r0
      001B99 E6               [12] 4760 	mov	a,@r0
      001B9A C0 E0            [24] 4761 	push	acc
      001B9C 08               [12] 4762 	inc	r0
      001B9D E6               [12] 4763 	mov	a,@r0
      001B9E C0 E0            [24] 4764 	push	acc
      001BA0 08               [12] 4765 	inc	r0
      001BA1 E6               [12] 4766 	mov	a,@r0
      001BA2 C0 E0            [24] 4767 	push	acc
      001BA4 8A 82            [24] 4768 	mov	dpl,r2
      001BA6 8B 83            [24] 4769 	mov	dph,r3
      001BA8 8C F0            [24] 4770 	mov	b,r4
      001BAA 12r00r00         [24] 4771 	lcall	_stack_push
      001BAD E5 81            [12] 4772 	mov	a,sp
      001BAF 24 FC            [12] 4773 	add	a,#0xfc
      001BB1 F5 81            [12] 4774 	mov	sp,a
                                   4775 ;	calc.c:238: break;
      001BB3 02r23rA7         [24] 4776 	ljmp	00249$
                                   4777 ;	calc.c:239: case '|':
      001BB6                       4778 00209$:
                                   4779 ;	calc.c:240: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      001BB6 E5*00            [12] 4780 	mov	a,_bp
      001BB8 24 1A            [12] 4781 	add	a,#0x1a
      001BBA FF               [12] 4782 	mov	r7,a
      001BBB E5*00            [12] 4783 	mov	a,_bp
      001BBD 24 13            [12] 4784 	add	a,#0x13
      001BBF F8               [12] 4785 	mov	r0,a
      001BC0 A6 07            [24] 4786 	mov	@r0,ar7
      001BC2 08               [12] 4787 	inc	r0
      001BC3 76 00            [12] 4788 	mov	@r0,#0x00
      001BC5 08               [12] 4789 	inc	r0
      001BC6 76 40            [12] 4790 	mov	@r0,#0x40
      001BC8 E5*00            [12] 4791 	mov	a,_bp
      001BCA 24 17            [12] 4792 	add	a,#0x17
      001BCC F8               [12] 4793 	mov	r0,a
      001BCD 74 11            [12] 4794 	mov	a,#0x11
      001BCF 26               [12] 4795 	add	a,@r0
      001BD0 FA               [12] 4796 	mov	r2,a
      001BD1 74 40            [12] 4797 	mov	a,#0x40
      001BD3 08               [12] 4798 	inc	r0
      001BD4 36               [12] 4799 	addc	a,@r0
      001BD5 FB               [12] 4800 	mov	r3,a
      001BD6 08               [12] 4801 	inc	r0
      001BD7 86 04            [24] 4802 	mov	ar4,@r0
      001BD9 8A 82            [24] 4803 	mov	dpl,r2
      001BDB 8B 83            [24] 4804 	mov	dph,r3
      001BDD 8C F0            [24] 4805 	mov	b,r4
      001BDF 12r00r00         [24] 4806 	lcall	__gptrget
      001BE2 FD               [12] 4807 	mov	r5,a
      001BE3 A3               [24] 4808 	inc	dptr
      001BE4 12r00r00         [24] 4809 	lcall	__gptrget
      001BE7 FE               [12] 4810 	mov	r6,a
      001BE8 A3               [24] 4811 	inc	dptr
      001BE9 12r00r00         [24] 4812 	lcall	__gptrget
      001BEC FF               [12] 4813 	mov	r7,a
      001BED C0 04            [24] 4814 	push	ar4
      001BEF C0 03            [24] 4815 	push	ar3
      001BF1 C0 02            [24] 4816 	push	ar2
      001BF3 E5*00            [12] 4817 	mov	a,_bp
      001BF5 24 13            [12] 4818 	add	a,#0x13
      001BF7 F8               [12] 4819 	mov	r0,a
      001BF8 E6               [12] 4820 	mov	a,@r0
      001BF9 C0 E0            [24] 4821 	push	acc
      001BFB 08               [12] 4822 	inc	r0
      001BFC E6               [12] 4823 	mov	a,@r0
      001BFD C0 E0            [24] 4824 	push	acc
      001BFF 08               [12] 4825 	inc	r0
      001C00 E6               [12] 4826 	mov	a,@r0
      001C01 C0 E0            [24] 4827 	push	acc
      001C03 8D 82            [24] 4828 	mov	dpl,r5
      001C05 8E 83            [24] 4829 	mov	dph,r6
      001C07 8F F0            [24] 4830 	mov	b,r7
      001C09 12r00r00         [24] 4831 	lcall	_stack_pop
      001C0C AE 82            [24] 4832 	mov	r6,dpl
      001C0E AF 83            [24] 4833 	mov	r7,dph
      001C10 15 81            [12] 4834 	dec	sp
      001C12 15 81            [12] 4835 	dec	sp
      001C14 15 81            [12] 4836 	dec	sp
      001C16 D0 02            [24] 4837 	pop	ar2
      001C18 D0 03            [24] 4838 	pop	ar3
      001C1A D0 04            [24] 4839 	pop	ar4
      001C1C EE               [12] 4840 	mov	a,r6
      001C1D 4F               [12] 4841 	orl	a,r7
      001C1E 70 0C            [24] 4842 	jnz	00214$
      001C20 90r00r47         [24] 4843 	mov	dptr,#___str_9
      001C23 75 F0 80         [24] 4844 	mov	b,#0x80
      001C26 12r00r00         [24] 4845 	lcall	_printstr
      001C29 02r23rA7         [24] 4846 	ljmp	00249$
      001C2C                       4847 00214$:
                                   4848 ;	calc.c:241: else if (!stack_pop(ctx->ps, &d1)) {
      001C2C E5*00            [12] 4849 	mov	a,_bp
      001C2E 24 1E            [12] 4850 	add	a,#0x1e
      001C30 FF               [12] 4851 	mov	r7,a
      001C31 E5*00            [12] 4852 	mov	a,_bp
      001C33 24 13            [12] 4853 	add	a,#0x13
      001C35 F8               [12] 4854 	mov	r0,a
      001C36 A6 07            [24] 4855 	mov	@r0,ar7
      001C38 08               [12] 4856 	inc	r0
      001C39 76 00            [12] 4857 	mov	@r0,#0x00
      001C3B 08               [12] 4858 	inc	r0
      001C3C 76 40            [12] 4859 	mov	@r0,#0x40
      001C3E 8A 82            [24] 4860 	mov	dpl,r2
      001C40 8B 83            [24] 4861 	mov	dph,r3
      001C42 8C F0            [24] 4862 	mov	b,r4
      001C44 12r00r00         [24] 4863 	lcall	__gptrget
      001C47 FD               [12] 4864 	mov	r5,a
      001C48 A3               [24] 4865 	inc	dptr
      001C49 12r00r00         [24] 4866 	lcall	__gptrget
      001C4C FE               [12] 4867 	mov	r6,a
      001C4D A3               [24] 4868 	inc	dptr
      001C4E 12r00r00         [24] 4869 	lcall	__gptrget
      001C51 FF               [12] 4870 	mov	r7,a
      001C52 C0 04            [24] 4871 	push	ar4
      001C54 C0 03            [24] 4872 	push	ar3
      001C56 C0 02            [24] 4873 	push	ar2
      001C58 E5*00            [12] 4874 	mov	a,_bp
      001C5A 24 13            [12] 4875 	add	a,#0x13
      001C5C F8               [12] 4876 	mov	r0,a
      001C5D E6               [12] 4877 	mov	a,@r0
      001C5E C0 E0            [24] 4878 	push	acc
      001C60 08               [12] 4879 	inc	r0
      001C61 E6               [12] 4880 	mov	a,@r0
      001C62 C0 E0            [24] 4881 	push	acc
      001C64 08               [12] 4882 	inc	r0
      001C65 E6               [12] 4883 	mov	a,@r0
      001C66 C0 E0            [24] 4884 	push	acc
      001C68 8D 82            [24] 4885 	mov	dpl,r5
      001C6A 8E 83            [24] 4886 	mov	dph,r6
      001C6C 8F F0            [24] 4887 	mov	b,r7
      001C6E 12r00r00         [24] 4888 	lcall	_stack_pop
      001C71 AE 82            [24] 4889 	mov	r6,dpl
      001C73 AF 83            [24] 4890 	mov	r7,dph
      001C75 15 81            [12] 4891 	dec	sp
      001C77 15 81            [12] 4892 	dec	sp
      001C79 15 81            [12] 4893 	dec	sp
      001C7B D0 02            [24] 4894 	pop	ar2
      001C7D D0 03            [24] 4895 	pop	ar3
      001C7F D0 04            [24] 4896 	pop	ar4
      001C81 EE               [12] 4897 	mov	a,r6
      001C82 4F               [12] 4898 	orl	a,r7
      001C83 70 43            [24] 4899 	jnz	00211$
                                   4900 ;	calc.c:242: (void)stack_push(ctx->ps, d0);
      001C85 8A 82            [24] 4901 	mov	dpl,r2
      001C87 8B 83            [24] 4902 	mov	dph,r3
      001C89 8C F0            [24] 4903 	mov	b,r4
      001C8B 12r00r00         [24] 4904 	lcall	__gptrget
      001C8E FD               [12] 4905 	mov	r5,a
      001C8F A3               [24] 4906 	inc	dptr
      001C90 12r00r00         [24] 4907 	lcall	__gptrget
      001C93 FE               [12] 4908 	mov	r6,a
      001C94 A3               [24] 4909 	inc	dptr
      001C95 12r00r00         [24] 4910 	lcall	__gptrget
      001C98 FF               [12] 4911 	mov	r7,a
      001C99 E5*00            [12] 4912 	mov	a,_bp
      001C9B 24 1A            [12] 4913 	add	a,#0x1a
      001C9D F8               [12] 4914 	mov	r0,a
      001C9E E6               [12] 4915 	mov	a,@r0
      001C9F C0 E0            [24] 4916 	push	acc
      001CA1 08               [12] 4917 	inc	r0
      001CA2 E6               [12] 4918 	mov	a,@r0
      001CA3 C0 E0            [24] 4919 	push	acc
      001CA5 08               [12] 4920 	inc	r0
      001CA6 E6               [12] 4921 	mov	a,@r0
      001CA7 C0 E0            [24] 4922 	push	acc
      001CA9 08               [12] 4923 	inc	r0
      001CAA E6               [12] 4924 	mov	a,@r0
      001CAB C0 E0            [24] 4925 	push	acc
      001CAD 8D 82            [24] 4926 	mov	dpl,r5
      001CAF 8E 83            [24] 4927 	mov	dph,r6
      001CB1 8F F0            [24] 4928 	mov	b,r7
      001CB3 12r00r00         [24] 4929 	lcall	_stack_push
      001CB6 E5 81            [12] 4930 	mov	a,sp
      001CB8 24 FC            [12] 4931 	add	a,#0xfc
      001CBA F5 81            [12] 4932 	mov	sp,a
                                   4933 ;	calc.c:243: printstr("\r\nstack underflow\r\n");
      001CBC 90r00r47         [24] 4934 	mov	dptr,#___str_9
      001CBF 75 F0 80         [24] 4935 	mov	b,#0x80
      001CC2 12r00r00         [24] 4936 	lcall	_printstr
      001CC5 02r23rA7         [24] 4937 	ljmp	00249$
      001CC8                       4938 00211$:
                                   4939 ;	calc.c:245: d1 |= d0;
      001CC8 E5*00            [12] 4940 	mov	a,_bp
      001CCA 24 1E            [12] 4941 	add	a,#0x1e
      001CCC F8               [12] 4942 	mov	r0,a
      001CCD E5*00            [12] 4943 	mov	a,_bp
      001CCF 24 1A            [12] 4944 	add	a,#0x1a
      001CD1 F9               [12] 4945 	mov	r1,a
      001CD2 E7               [12] 4946 	mov	a,@r1
      001CD3 46               [12] 4947 	orl	a,@r0
      001CD4 F6               [12] 4948 	mov	@r0,a
      001CD5 09               [12] 4949 	inc	r1
      001CD6 E7               [12] 4950 	mov	a,@r1
      001CD7 08               [12] 4951 	inc	r0
      001CD8 46               [12] 4952 	orl	a,@r0
      001CD9 F6               [12] 4953 	mov	@r0,a
      001CDA 09               [12] 4954 	inc	r1
      001CDB E7               [12] 4955 	mov	a,@r1
      001CDC 08               [12] 4956 	inc	r0
      001CDD 46               [12] 4957 	orl	a,@r0
      001CDE F6               [12] 4958 	mov	@r0,a
      001CDF 09               [12] 4959 	inc	r1
      001CE0 E7               [12] 4960 	mov	a,@r1
      001CE1 08               [12] 4961 	inc	r0
      001CE2 46               [12] 4962 	orl	a,@r0
      001CE3 F6               [12] 4963 	mov	@r0,a
                                   4964 ;	calc.c:246: (void)stack_push(ctx->ps, d1);
      001CE4 8A 82            [24] 4965 	mov	dpl,r2
      001CE6 8B 83            [24] 4966 	mov	dph,r3
      001CE8 8C F0            [24] 4967 	mov	b,r4
      001CEA 12r00r00         [24] 4968 	lcall	__gptrget
      001CED FA               [12] 4969 	mov	r2,a
      001CEE A3               [24] 4970 	inc	dptr
      001CEF 12r00r00         [24] 4971 	lcall	__gptrget
      001CF2 FB               [12] 4972 	mov	r3,a
      001CF3 A3               [24] 4973 	inc	dptr
      001CF4 12r00r00         [24] 4974 	lcall	__gptrget
      001CF7 FC               [12] 4975 	mov	r4,a
      001CF8 E5*00            [12] 4976 	mov	a,_bp
      001CFA 24 1E            [12] 4977 	add	a,#0x1e
      001CFC F8               [12] 4978 	mov	r0,a
      001CFD E6               [12] 4979 	mov	a,@r0
      001CFE C0 E0            [24] 4980 	push	acc
      001D00 08               [12] 4981 	inc	r0
      001D01 E6               [12] 4982 	mov	a,@r0
      001D02 C0 E0            [24] 4983 	push	acc
      001D04 08               [12] 4984 	inc	r0
      001D05 E6               [12] 4985 	mov	a,@r0
      001D06 C0 E0            [24] 4986 	push	acc
      001D08 08               [12] 4987 	inc	r0
      001D09 E6               [12] 4988 	mov	a,@r0
      001D0A C0 E0            [24] 4989 	push	acc
      001D0C 8A 82            [24] 4990 	mov	dpl,r2
      001D0E 8B 83            [24] 4991 	mov	dph,r3
      001D10 8C F0            [24] 4992 	mov	b,r4
      001D12 12r00r00         [24] 4993 	lcall	_stack_push
      001D15 E5 81            [12] 4994 	mov	a,sp
      001D17 24 FC            [12] 4995 	add	a,#0xfc
      001D19 F5 81            [12] 4996 	mov	sp,a
                                   4997 ;	calc.c:248: break;
      001D1B 02r23rA7         [24] 4998 	ljmp	00249$
                                   4999 ;	calc.c:249: case '^':
      001D1E                       5000 00216$:
                                   5001 ;	calc.c:250: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      001D1E E5*00            [12] 5002 	mov	a,_bp
      001D20 24 1A            [12] 5003 	add	a,#0x1a
      001D22 FF               [12] 5004 	mov	r7,a
      001D23 E5*00            [12] 5005 	mov	a,_bp
      001D25 24 13            [12] 5006 	add	a,#0x13
      001D27 F8               [12] 5007 	mov	r0,a
      001D28 A6 07            [24] 5008 	mov	@r0,ar7
      001D2A 08               [12] 5009 	inc	r0
      001D2B 76 00            [12] 5010 	mov	@r0,#0x00
      001D2D 08               [12] 5011 	inc	r0
      001D2E 76 40            [12] 5012 	mov	@r0,#0x40
      001D30 E5*00            [12] 5013 	mov	a,_bp
      001D32 24 17            [12] 5014 	add	a,#0x17
      001D34 F8               [12] 5015 	mov	r0,a
      001D35 74 11            [12] 5016 	mov	a,#0x11
      001D37 26               [12] 5017 	add	a,@r0
      001D38 FA               [12] 5018 	mov	r2,a
      001D39 74 40            [12] 5019 	mov	a,#0x40
      001D3B 08               [12] 5020 	inc	r0
      001D3C 36               [12] 5021 	addc	a,@r0
      001D3D FB               [12] 5022 	mov	r3,a
      001D3E 08               [12] 5023 	inc	r0
      001D3F 86 04            [24] 5024 	mov	ar4,@r0
      001D41 8A 82            [24] 5025 	mov	dpl,r2
      001D43 8B 83            [24] 5026 	mov	dph,r3
      001D45 8C F0            [24] 5027 	mov	b,r4
      001D47 12r00r00         [24] 5028 	lcall	__gptrget
      001D4A FD               [12] 5029 	mov	r5,a
      001D4B A3               [24] 5030 	inc	dptr
      001D4C 12r00r00         [24] 5031 	lcall	__gptrget
      001D4F FE               [12] 5032 	mov	r6,a
      001D50 A3               [24] 5033 	inc	dptr
      001D51 12r00r00         [24] 5034 	lcall	__gptrget
      001D54 FF               [12] 5035 	mov	r7,a
      001D55 C0 04            [24] 5036 	push	ar4
      001D57 C0 03            [24] 5037 	push	ar3
      001D59 C0 02            [24] 5038 	push	ar2
      001D5B E5*00            [12] 5039 	mov	a,_bp
      001D5D 24 13            [12] 5040 	add	a,#0x13
      001D5F F8               [12] 5041 	mov	r0,a
      001D60 E6               [12] 5042 	mov	a,@r0
      001D61 C0 E0            [24] 5043 	push	acc
      001D63 08               [12] 5044 	inc	r0
      001D64 E6               [12] 5045 	mov	a,@r0
      001D65 C0 E0            [24] 5046 	push	acc
      001D67 08               [12] 5047 	inc	r0
      001D68 E6               [12] 5048 	mov	a,@r0
      001D69 C0 E0            [24] 5049 	push	acc
      001D6B 8D 82            [24] 5050 	mov	dpl,r5
      001D6D 8E 83            [24] 5051 	mov	dph,r6
      001D6F 8F F0            [24] 5052 	mov	b,r7
      001D71 12r00r00         [24] 5053 	lcall	_stack_pop
      001D74 AE 82            [24] 5054 	mov	r6,dpl
      001D76 AF 83            [24] 5055 	mov	r7,dph
      001D78 15 81            [12] 5056 	dec	sp
      001D7A 15 81            [12] 5057 	dec	sp
      001D7C 15 81            [12] 5058 	dec	sp
      001D7E D0 02            [24] 5059 	pop	ar2
      001D80 D0 03            [24] 5060 	pop	ar3
      001D82 D0 04            [24] 5061 	pop	ar4
      001D84 EE               [12] 5062 	mov	a,r6
      001D85 4F               [12] 5063 	orl	a,r7
      001D86 70 0C            [24] 5064 	jnz	00221$
      001D88 90r00r47         [24] 5065 	mov	dptr,#___str_9
      001D8B 75 F0 80         [24] 5066 	mov	b,#0x80
      001D8E 12r00r00         [24] 5067 	lcall	_printstr
      001D91 02r23rA7         [24] 5068 	ljmp	00249$
      001D94                       5069 00221$:
                                   5070 ;	calc.c:251: else if (!stack_pop(ctx->ps, &d1)) {
      001D94 E5*00            [12] 5071 	mov	a,_bp
      001D96 24 1E            [12] 5072 	add	a,#0x1e
      001D98 FF               [12] 5073 	mov	r7,a
      001D99 E5*00            [12] 5074 	mov	a,_bp
      001D9B 24 13            [12] 5075 	add	a,#0x13
      001D9D F8               [12] 5076 	mov	r0,a
      001D9E A6 07            [24] 5077 	mov	@r0,ar7
      001DA0 08               [12] 5078 	inc	r0
      001DA1 76 00            [12] 5079 	mov	@r0,#0x00
      001DA3 08               [12] 5080 	inc	r0
      001DA4 76 40            [12] 5081 	mov	@r0,#0x40
      001DA6 8A 82            [24] 5082 	mov	dpl,r2
      001DA8 8B 83            [24] 5083 	mov	dph,r3
      001DAA 8C F0            [24] 5084 	mov	b,r4
      001DAC 12r00r00         [24] 5085 	lcall	__gptrget
      001DAF FD               [12] 5086 	mov	r5,a
      001DB0 A3               [24] 5087 	inc	dptr
      001DB1 12r00r00         [24] 5088 	lcall	__gptrget
      001DB4 FE               [12] 5089 	mov	r6,a
      001DB5 A3               [24] 5090 	inc	dptr
      001DB6 12r00r00         [24] 5091 	lcall	__gptrget
      001DB9 FF               [12] 5092 	mov	r7,a
      001DBA C0 04            [24] 5093 	push	ar4
      001DBC C0 03            [24] 5094 	push	ar3
      001DBE C0 02            [24] 5095 	push	ar2
      001DC0 E5*00            [12] 5096 	mov	a,_bp
      001DC2 24 13            [12] 5097 	add	a,#0x13
      001DC4 F8               [12] 5098 	mov	r0,a
      001DC5 E6               [12] 5099 	mov	a,@r0
      001DC6 C0 E0            [24] 5100 	push	acc
      001DC8 08               [12] 5101 	inc	r0
      001DC9 E6               [12] 5102 	mov	a,@r0
      001DCA C0 E0            [24] 5103 	push	acc
      001DCC 08               [12] 5104 	inc	r0
      001DCD E6               [12] 5105 	mov	a,@r0
      001DCE C0 E0            [24] 5106 	push	acc
      001DD0 8D 82            [24] 5107 	mov	dpl,r5
      001DD2 8E 83            [24] 5108 	mov	dph,r6
      001DD4 8F F0            [24] 5109 	mov	b,r7
      001DD6 12r00r00         [24] 5110 	lcall	_stack_pop
      001DD9 AE 82            [24] 5111 	mov	r6,dpl
      001DDB AF 83            [24] 5112 	mov	r7,dph
      001DDD 15 81            [12] 5113 	dec	sp
      001DDF 15 81            [12] 5114 	dec	sp
      001DE1 15 81            [12] 5115 	dec	sp
      001DE3 D0 02            [24] 5116 	pop	ar2
      001DE5 D0 03            [24] 5117 	pop	ar3
      001DE7 D0 04            [24] 5118 	pop	ar4
      001DE9 EE               [12] 5119 	mov	a,r6
      001DEA 4F               [12] 5120 	orl	a,r7
      001DEB 70 43            [24] 5121 	jnz	00218$
                                   5122 ;	calc.c:252: (void)stack_push(ctx->ps, d0);
      001DED 8A 82            [24] 5123 	mov	dpl,r2
      001DEF 8B 83            [24] 5124 	mov	dph,r3
      001DF1 8C F0            [24] 5125 	mov	b,r4
      001DF3 12r00r00         [24] 5126 	lcall	__gptrget
      001DF6 FD               [12] 5127 	mov	r5,a
      001DF7 A3               [24] 5128 	inc	dptr
      001DF8 12r00r00         [24] 5129 	lcall	__gptrget
      001DFB FE               [12] 5130 	mov	r6,a
      001DFC A3               [24] 5131 	inc	dptr
      001DFD 12r00r00         [24] 5132 	lcall	__gptrget
      001E00 FF               [12] 5133 	mov	r7,a
      001E01 E5*00            [12] 5134 	mov	a,_bp
      001E03 24 1A            [12] 5135 	add	a,#0x1a
      001E05 F8               [12] 5136 	mov	r0,a
      001E06 E6               [12] 5137 	mov	a,@r0
      001E07 C0 E0            [24] 5138 	push	acc
      001E09 08               [12] 5139 	inc	r0
      001E0A E6               [12] 5140 	mov	a,@r0
      001E0B C0 E0            [24] 5141 	push	acc
      001E0D 08               [12] 5142 	inc	r0
      001E0E E6               [12] 5143 	mov	a,@r0
      001E0F C0 E0            [24] 5144 	push	acc
      001E11 08               [12] 5145 	inc	r0
      001E12 E6               [12] 5146 	mov	a,@r0
      001E13 C0 E0            [24] 5147 	push	acc
      001E15 8D 82            [24] 5148 	mov	dpl,r5
      001E17 8E 83            [24] 5149 	mov	dph,r6
      001E19 8F F0            [24] 5150 	mov	b,r7
      001E1B 12r00r00         [24] 5151 	lcall	_stack_push
      001E1E E5 81            [12] 5152 	mov	a,sp
      001E20 24 FC            [12] 5153 	add	a,#0xfc
      001E22 F5 81            [12] 5154 	mov	sp,a
                                   5155 ;	calc.c:253: printstr("\r\nstack underflow\r\n");
      001E24 90r00r47         [24] 5156 	mov	dptr,#___str_9
      001E27 75 F0 80         [24] 5157 	mov	b,#0x80
      001E2A 12r00r00         [24] 5158 	lcall	_printstr
      001E2D 02r23rA7         [24] 5159 	ljmp	00249$
      001E30                       5160 00218$:
                                   5161 ;	calc.c:255: d1 ^= d0;
      001E30 E5*00            [12] 5162 	mov	a,_bp
      001E32 24 1E            [12] 5163 	add	a,#0x1e
      001E34 F8               [12] 5164 	mov	r0,a
      001E35 E5*00            [12] 5165 	mov	a,_bp
      001E37 24 1A            [12] 5166 	add	a,#0x1a
      001E39 F9               [12] 5167 	mov	r1,a
      001E3A E7               [12] 5168 	mov	a,@r1
      001E3B 66               [12] 5169 	xrl	a,@r0
      001E3C F6               [12] 5170 	mov	@r0,a
      001E3D 09               [12] 5171 	inc	r1
      001E3E E7               [12] 5172 	mov	a,@r1
      001E3F 08               [12] 5173 	inc	r0
      001E40 66               [12] 5174 	xrl	a,@r0
      001E41 F6               [12] 5175 	mov	@r0,a
      001E42 09               [12] 5176 	inc	r1
      001E43 E7               [12] 5177 	mov	a,@r1
      001E44 08               [12] 5178 	inc	r0
      001E45 66               [12] 5179 	xrl	a,@r0
      001E46 F6               [12] 5180 	mov	@r0,a
      001E47 09               [12] 5181 	inc	r1
      001E48 E7               [12] 5182 	mov	a,@r1
      001E49 08               [12] 5183 	inc	r0
      001E4A 66               [12] 5184 	xrl	a,@r0
      001E4B F6               [12] 5185 	mov	@r0,a
                                   5186 ;	calc.c:256: (void)stack_push(ctx->ps, d1);
      001E4C 8A 82            [24] 5187 	mov	dpl,r2
      001E4E 8B 83            [24] 5188 	mov	dph,r3
      001E50 8C F0            [24] 5189 	mov	b,r4
      001E52 12r00r00         [24] 5190 	lcall	__gptrget
      001E55 FA               [12] 5191 	mov	r2,a
      001E56 A3               [24] 5192 	inc	dptr
      001E57 12r00r00         [24] 5193 	lcall	__gptrget
      001E5A FB               [12] 5194 	mov	r3,a
      001E5B A3               [24] 5195 	inc	dptr
      001E5C 12r00r00         [24] 5196 	lcall	__gptrget
      001E5F FC               [12] 5197 	mov	r4,a
      001E60 E5*00            [12] 5198 	mov	a,_bp
      001E62 24 1E            [12] 5199 	add	a,#0x1e
      001E64 F8               [12] 5200 	mov	r0,a
      001E65 E6               [12] 5201 	mov	a,@r0
      001E66 C0 E0            [24] 5202 	push	acc
      001E68 08               [12] 5203 	inc	r0
      001E69 E6               [12] 5204 	mov	a,@r0
      001E6A C0 E0            [24] 5205 	push	acc
      001E6C 08               [12] 5206 	inc	r0
      001E6D E6               [12] 5207 	mov	a,@r0
      001E6E C0 E0            [24] 5208 	push	acc
      001E70 08               [12] 5209 	inc	r0
      001E71 E6               [12] 5210 	mov	a,@r0
      001E72 C0 E0            [24] 5211 	push	acc
      001E74 8A 82            [24] 5212 	mov	dpl,r2
      001E76 8B 83            [24] 5213 	mov	dph,r3
      001E78 8C F0            [24] 5214 	mov	b,r4
      001E7A 12r00r00         [24] 5215 	lcall	_stack_push
      001E7D E5 81            [12] 5216 	mov	a,sp
      001E7F 24 FC            [12] 5217 	add	a,#0xfc
      001E81 F5 81            [12] 5218 	mov	sp,a
                                   5219 ;	calc.c:258: break;
      001E83 02r23rA7         [24] 5220 	ljmp	00249$
                                   5221 ;	calc.c:259: case '>':
      001E86                       5222 00223$:
                                   5223 ;	calc.c:260: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      001E86 E5*00            [12] 5224 	mov	a,_bp
      001E88 24 1A            [12] 5225 	add	a,#0x1a
      001E8A FC               [12] 5226 	mov	r4,a
      001E8B 7B 00            [12] 5227 	mov	r3,#0x00
      001E8D 7A 40            [12] 5228 	mov	r2,#0x40
      001E8F E5*00            [12] 5229 	mov	a,_bp
      001E91 24 17            [12] 5230 	add	a,#0x17
      001E93 F8               [12] 5231 	mov	r0,a
      001E94 E5*00            [12] 5232 	mov	a,_bp
      001E96 24 0F            [12] 5233 	add	a,#0x0f
      001E98 F9               [12] 5234 	mov	r1,a
      001E99 74 11            [12] 5235 	mov	a,#0x11
      001E9B 26               [12] 5236 	add	a,@r0
      001E9C F7               [12] 5237 	mov	@r1,a
      001E9D 74 40            [12] 5238 	mov	a,#0x40
      001E9F 08               [12] 5239 	inc	r0
      001EA0 36               [12] 5240 	addc	a,@r0
      001EA1 09               [12] 5241 	inc	r1
      001EA2 F7               [12] 5242 	mov	@r1,a
      001EA3 08               [12] 5243 	inc	r0
      001EA4 09               [12] 5244 	inc	r1
      001EA5 E6               [12] 5245 	mov	a,@r0
      001EA6 F7               [12] 5246 	mov	@r1,a
      001EA7 E5*00            [12] 5247 	mov	a,_bp
      001EA9 24 0F            [12] 5248 	add	a,#0x0f
      001EAB F8               [12] 5249 	mov	r0,a
      001EAC 86 82            [24] 5250 	mov	dpl,@r0
      001EAE 08               [12] 5251 	inc	r0
      001EAF 86 83            [24] 5252 	mov	dph,@r0
      001EB1 08               [12] 5253 	inc	r0
      001EB2 86 F0            [24] 5254 	mov	b,@r0
      001EB4 12r00r00         [24] 5255 	lcall	__gptrget
      001EB7 FD               [12] 5256 	mov	r5,a
      001EB8 A3               [24] 5257 	inc	dptr
      001EB9 12r00r00         [24] 5258 	lcall	__gptrget
      001EBC FE               [12] 5259 	mov	r6,a
      001EBD A3               [24] 5260 	inc	dptr
      001EBE 12r00r00         [24] 5261 	lcall	__gptrget
      001EC1 FF               [12] 5262 	mov	r7,a
      001EC2 C0 04            [24] 5263 	push	ar4
      001EC4 C0 03            [24] 5264 	push	ar3
      001EC6 C0 02            [24] 5265 	push	ar2
      001EC8 8D 82            [24] 5266 	mov	dpl,r5
      001ECA 8E 83            [24] 5267 	mov	dph,r6
      001ECC 8F F0            [24] 5268 	mov	b,r7
      001ECE 12r00r00         [24] 5269 	lcall	_stack_pop
      001ED1 AE 82            [24] 5270 	mov	r6,dpl
      001ED3 AF 83            [24] 5271 	mov	r7,dph
      001ED5 15 81            [12] 5272 	dec	sp
      001ED7 15 81            [12] 5273 	dec	sp
      001ED9 15 81            [12] 5274 	dec	sp
      001EDB EE               [12] 5275 	mov	a,r6
      001EDC 4F               [12] 5276 	orl	a,r7
      001EDD 70 0C            [24] 5277 	jnz	00228$
      001EDF 90r00r47         [24] 5278 	mov	dptr,#___str_9
      001EE2 75 F0 80         [24] 5279 	mov	b,#0x80
      001EE5 12r00r00         [24] 5280 	lcall	_printstr
      001EE8 02r23rA7         [24] 5281 	ljmp	00249$
      001EEB                       5282 00228$:
                                   5283 ;	calc.c:261: else if (!stack_pop(ctx->ps, &d1)) {
      001EEB E5*00            [12] 5284 	mov	a,_bp
      001EED 24 1E            [12] 5285 	add	a,#0x1e
      001EEF FC               [12] 5286 	mov	r4,a
      001EF0 7B 00            [12] 5287 	mov	r3,#0x00
      001EF2 7A 40            [12] 5288 	mov	r2,#0x40
      001EF4 E5*00            [12] 5289 	mov	a,_bp
      001EF6 24 0F            [12] 5290 	add	a,#0x0f
      001EF8 F8               [12] 5291 	mov	r0,a
      001EF9 86 82            [24] 5292 	mov	dpl,@r0
      001EFB 08               [12] 5293 	inc	r0
      001EFC 86 83            [24] 5294 	mov	dph,@r0
      001EFE 08               [12] 5295 	inc	r0
      001EFF 86 F0            [24] 5296 	mov	b,@r0
      001F01 12r00r00         [24] 5297 	lcall	__gptrget
      001F04 FD               [12] 5298 	mov	r5,a
      001F05 A3               [24] 5299 	inc	dptr
      001F06 12r00r00         [24] 5300 	lcall	__gptrget
      001F09 FE               [12] 5301 	mov	r6,a
      001F0A A3               [24] 5302 	inc	dptr
      001F0B 12r00r00         [24] 5303 	lcall	__gptrget
      001F0E FF               [12] 5304 	mov	r7,a
      001F0F C0 04            [24] 5305 	push	ar4
      001F11 C0 03            [24] 5306 	push	ar3
      001F13 C0 02            [24] 5307 	push	ar2
      001F15 8D 82            [24] 5308 	mov	dpl,r5
      001F17 8E 83            [24] 5309 	mov	dph,r6
      001F19 8F F0            [24] 5310 	mov	b,r7
      001F1B 12r00r00         [24] 5311 	lcall	_stack_pop
      001F1E AE 82            [24] 5312 	mov	r6,dpl
      001F20 AF 83            [24] 5313 	mov	r7,dph
      001F22 15 81            [12] 5314 	dec	sp
      001F24 15 81            [12] 5315 	dec	sp
      001F26 15 81            [12] 5316 	dec	sp
      001F28 EE               [12] 5317 	mov	a,r6
      001F29 4F               [12] 5318 	orl	a,r7
      001F2A 70 4A            [24] 5319 	jnz	00225$
                                   5320 ;	calc.c:262: (void)stack_push(ctx->ps, d0);
      001F2C E5*00            [12] 5321 	mov	a,_bp
      001F2E 24 0F            [12] 5322 	add	a,#0x0f
      001F30 F8               [12] 5323 	mov	r0,a
      001F31 86 82            [24] 5324 	mov	dpl,@r0
      001F33 08               [12] 5325 	inc	r0
      001F34 86 83            [24] 5326 	mov	dph,@r0
      001F36 08               [12] 5327 	inc	r0
      001F37 86 F0            [24] 5328 	mov	b,@r0
      001F39 12r00r00         [24] 5329 	lcall	__gptrget
      001F3C FD               [12] 5330 	mov	r5,a
      001F3D A3               [24] 5331 	inc	dptr
      001F3E 12r00r00         [24] 5332 	lcall	__gptrget
      001F41 FE               [12] 5333 	mov	r6,a
      001F42 A3               [24] 5334 	inc	dptr
      001F43 12r00r00         [24] 5335 	lcall	__gptrget
      001F46 FF               [12] 5336 	mov	r7,a
      001F47 E5*00            [12] 5337 	mov	a,_bp
      001F49 24 1A            [12] 5338 	add	a,#0x1a
      001F4B F8               [12] 5339 	mov	r0,a
      001F4C E6               [12] 5340 	mov	a,@r0
      001F4D C0 E0            [24] 5341 	push	acc
      001F4F 08               [12] 5342 	inc	r0
      001F50 E6               [12] 5343 	mov	a,@r0
      001F51 C0 E0            [24] 5344 	push	acc
      001F53 08               [12] 5345 	inc	r0
      001F54 E6               [12] 5346 	mov	a,@r0
      001F55 C0 E0            [24] 5347 	push	acc
      001F57 08               [12] 5348 	inc	r0
      001F58 E6               [12] 5349 	mov	a,@r0
      001F59 C0 E0            [24] 5350 	push	acc
      001F5B 8D 82            [24] 5351 	mov	dpl,r5
      001F5D 8E 83            [24] 5352 	mov	dph,r6
      001F5F 8F F0            [24] 5353 	mov	b,r7
      001F61 12r00r00         [24] 5354 	lcall	_stack_push
      001F64 E5 81            [12] 5355 	mov	a,sp
      001F66 24 FC            [12] 5356 	add	a,#0xfc
      001F68 F5 81            [12] 5357 	mov	sp,a
                                   5358 ;	calc.c:263: printstr("\r\nstack underflow\r\n");
      001F6A 90r00r47         [24] 5359 	mov	dptr,#___str_9
      001F6D 75 F0 80         [24] 5360 	mov	b,#0x80
      001F70 12r00r00         [24] 5361 	lcall	_printstr
      001F73 02r23rA7         [24] 5362 	ljmp	00249$
      001F76                       5363 00225$:
                                   5364 ;	calc.c:265: d1 = (unsigned long)d1 >> d0;
      001F76 E5*00            [12] 5365 	mov	a,_bp
      001F78 24 1E            [12] 5366 	add	a,#0x1e
      001F7A F8               [12] 5367 	mov	r0,a
      001F7B 86 04            [24] 5368 	mov	ar4,@r0
      001F7D 08               [12] 5369 	inc	r0
      001F7E 86 05            [24] 5370 	mov	ar5,@r0
      001F80 08               [12] 5371 	inc	r0
      001F81 86 06            [24] 5372 	mov	ar6,@r0
      001F83 08               [12] 5373 	inc	r0
      001F84 86 07            [24] 5374 	mov	ar7,@r0
      001F86 E5*00            [12] 5375 	mov	a,_bp
      001F88 24 1A            [12] 5376 	add	a,#0x1a
      001F8A F8               [12] 5377 	mov	r0,a
      001F8B 86 F0            [24] 5378 	mov	b,@r0
      001F8D 05 F0            [12] 5379 	inc	b
      001F8F 80 0D            [24] 5380 	sjmp	00592$
      001F91                       5381 00591$:
      001F91 C3               [12] 5382 	clr	c
      001F92 EF               [12] 5383 	mov	a,r7
      001F93 13               [12] 5384 	rrc	a
      001F94 FF               [12] 5385 	mov	r7,a
      001F95 EE               [12] 5386 	mov	a,r6
      001F96 13               [12] 5387 	rrc	a
      001F97 FE               [12] 5388 	mov	r6,a
      001F98 ED               [12] 5389 	mov	a,r5
      001F99 13               [12] 5390 	rrc	a
      001F9A FD               [12] 5391 	mov	r5,a
      001F9B EC               [12] 5392 	mov	a,r4
      001F9C 13               [12] 5393 	rrc	a
      001F9D FC               [12] 5394 	mov	r4,a
      001F9E                       5395 00592$:
      001F9E D5 F0 F0         [24] 5396 	djnz	b,00591$
      001FA1 E5*00            [12] 5397 	mov	a,_bp
      001FA3 24 1E            [12] 5398 	add	a,#0x1e
      001FA5 F8               [12] 5399 	mov	r0,a
      001FA6 A6 04            [24] 5400 	mov	@r0,ar4
      001FA8 08               [12] 5401 	inc	r0
      001FA9 A6 05            [24] 5402 	mov	@r0,ar5
      001FAB 08               [12] 5403 	inc	r0
      001FAC A6 06            [24] 5404 	mov	@r0,ar6
      001FAE 08               [12] 5405 	inc	r0
      001FAF A6 07            [24] 5406 	mov	@r0,ar7
                                   5407 ;	calc.c:266: (void)stack_push(ctx->ps, d1);
      001FB1 E5*00            [12] 5408 	mov	a,_bp
      001FB3 24 0F            [12] 5409 	add	a,#0x0f
      001FB5 F8               [12] 5410 	mov	r0,a
      001FB6 86 82            [24] 5411 	mov	dpl,@r0
      001FB8 08               [12] 5412 	inc	r0
      001FB9 86 83            [24] 5413 	mov	dph,@r0
      001FBB 08               [12] 5414 	inc	r0
      001FBC 86 F0            [24] 5415 	mov	b,@r0
      001FBE 12r00r00         [24] 5416 	lcall	__gptrget
      001FC1 FD               [12] 5417 	mov	r5,a
      001FC2 A3               [24] 5418 	inc	dptr
      001FC3 12r00r00         [24] 5419 	lcall	__gptrget
      001FC6 FE               [12] 5420 	mov	r6,a
      001FC7 A3               [24] 5421 	inc	dptr
      001FC8 12r00r00         [24] 5422 	lcall	__gptrget
      001FCB FF               [12] 5423 	mov	r7,a
      001FCC E5*00            [12] 5424 	mov	a,_bp
      001FCE 24 1E            [12] 5425 	add	a,#0x1e
      001FD0 F8               [12] 5426 	mov	r0,a
      001FD1 E6               [12] 5427 	mov	a,@r0
      001FD2 C0 E0            [24] 5428 	push	acc
      001FD4 08               [12] 5429 	inc	r0
      001FD5 E6               [12] 5430 	mov	a,@r0
      001FD6 C0 E0            [24] 5431 	push	acc
      001FD8 08               [12] 5432 	inc	r0
      001FD9 E6               [12] 5433 	mov	a,@r0
      001FDA C0 E0            [24] 5434 	push	acc
      001FDC 08               [12] 5435 	inc	r0
      001FDD E6               [12] 5436 	mov	a,@r0
      001FDE C0 E0            [24] 5437 	push	acc
      001FE0 8D 82            [24] 5438 	mov	dpl,r5
      001FE2 8E 83            [24] 5439 	mov	dph,r6
      001FE4 8F F0            [24] 5440 	mov	b,r7
      001FE6 12r00r00         [24] 5441 	lcall	_stack_push
      001FE9 E5 81            [12] 5442 	mov	a,sp
      001FEB 24 FC            [12] 5443 	add	a,#0xfc
      001FED F5 81            [12] 5444 	mov	sp,a
                                   5445 ;	calc.c:268: break;
      001FEF 02r23rA7         [24] 5446 	ljmp	00249$
                                   5447 ;	calc.c:269: case ']':
      001FF2                       5448 00230$:
                                   5449 ;	calc.c:270: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      001FF2 E5*00            [12] 5450 	mov	a,_bp
      001FF4 24 1A            [12] 5451 	add	a,#0x1a
      001FF6 FF               [12] 5452 	mov	r7,a
      001FF7 E5*00            [12] 5453 	mov	a,_bp
      001FF9 24 13            [12] 5454 	add	a,#0x13
      001FFB F8               [12] 5455 	mov	r0,a
      001FFC A6 07            [24] 5456 	mov	@r0,ar7
      001FFE 08               [12] 5457 	inc	r0
      001FFF 76 00            [12] 5458 	mov	@r0,#0x00
      002001 08               [12] 5459 	inc	r0
      002002 76 40            [12] 5460 	mov	@r0,#0x40
      002004 E5*00            [12] 5461 	mov	a,_bp
      002006 24 17            [12] 5462 	add	a,#0x17
      002008 F8               [12] 5463 	mov	r0,a
      002009 74 11            [12] 5464 	mov	a,#0x11
      00200B 26               [12] 5465 	add	a,@r0
      00200C FA               [12] 5466 	mov	r2,a
      00200D 74 40            [12] 5467 	mov	a,#0x40
      00200F 08               [12] 5468 	inc	r0
      002010 36               [12] 5469 	addc	a,@r0
      002011 FB               [12] 5470 	mov	r3,a
      002012 08               [12] 5471 	inc	r0
      002013 86 04            [24] 5472 	mov	ar4,@r0
      002015 8A 82            [24] 5473 	mov	dpl,r2
      002017 8B 83            [24] 5474 	mov	dph,r3
      002019 8C F0            [24] 5475 	mov	b,r4
      00201B 12r00r00         [24] 5476 	lcall	__gptrget
      00201E FD               [12] 5477 	mov	r5,a
      00201F A3               [24] 5478 	inc	dptr
      002020 12r00r00         [24] 5479 	lcall	__gptrget
      002023 FE               [12] 5480 	mov	r6,a
      002024 A3               [24] 5481 	inc	dptr
      002025 12r00r00         [24] 5482 	lcall	__gptrget
      002028 FF               [12] 5483 	mov	r7,a
      002029 C0 04            [24] 5484 	push	ar4
      00202B C0 03            [24] 5485 	push	ar3
      00202D C0 02            [24] 5486 	push	ar2
      00202F E5*00            [12] 5487 	mov	a,_bp
      002031 24 13            [12] 5488 	add	a,#0x13
      002033 F8               [12] 5489 	mov	r0,a
      002034 E6               [12] 5490 	mov	a,@r0
      002035 C0 E0            [24] 5491 	push	acc
      002037 08               [12] 5492 	inc	r0
      002038 E6               [12] 5493 	mov	a,@r0
      002039 C0 E0            [24] 5494 	push	acc
      00203B 08               [12] 5495 	inc	r0
      00203C E6               [12] 5496 	mov	a,@r0
      00203D C0 E0            [24] 5497 	push	acc
      00203F 8D 82            [24] 5498 	mov	dpl,r5
      002041 8E 83            [24] 5499 	mov	dph,r6
      002043 8F F0            [24] 5500 	mov	b,r7
      002045 12r00r00         [24] 5501 	lcall	_stack_pop
      002048 AE 82            [24] 5502 	mov	r6,dpl
      00204A AF 83            [24] 5503 	mov	r7,dph
      00204C 15 81            [12] 5504 	dec	sp
      00204E 15 81            [12] 5505 	dec	sp
      002050 15 81            [12] 5506 	dec	sp
      002052 D0 02            [24] 5507 	pop	ar2
      002054 D0 03            [24] 5508 	pop	ar3
      002056 D0 04            [24] 5509 	pop	ar4
      002058 EE               [12] 5510 	mov	a,r6
      002059 4F               [12] 5511 	orl	a,r7
      00205A 70 0C            [24] 5512 	jnz	00235$
      00205C 90r00r47         [24] 5513 	mov	dptr,#___str_9
      00205F 75 F0 80         [24] 5514 	mov	b,#0x80
      002062 12r00r00         [24] 5515 	lcall	_printstr
      002065 02r23rA7         [24] 5516 	ljmp	00249$
      002068                       5517 00235$:
                                   5518 ;	calc.c:271: else if (!stack_pop(ctx->ps, &d1)) {
      002068 E5*00            [12] 5519 	mov	a,_bp
      00206A 24 1E            [12] 5520 	add	a,#0x1e
      00206C FF               [12] 5521 	mov	r7,a
      00206D E5*00            [12] 5522 	mov	a,_bp
      00206F 24 13            [12] 5523 	add	a,#0x13
      002071 F8               [12] 5524 	mov	r0,a
      002072 A6 07            [24] 5525 	mov	@r0,ar7
      002074 08               [12] 5526 	inc	r0
      002075 76 00            [12] 5527 	mov	@r0,#0x00
      002077 08               [12] 5528 	inc	r0
      002078 76 40            [12] 5529 	mov	@r0,#0x40
      00207A 8A 82            [24] 5530 	mov	dpl,r2
      00207C 8B 83            [24] 5531 	mov	dph,r3
      00207E 8C F0            [24] 5532 	mov	b,r4
      002080 12r00r00         [24] 5533 	lcall	__gptrget
      002083 FD               [12] 5534 	mov	r5,a
      002084 A3               [24] 5535 	inc	dptr
      002085 12r00r00         [24] 5536 	lcall	__gptrget
      002088 FE               [12] 5537 	mov	r6,a
      002089 A3               [24] 5538 	inc	dptr
      00208A 12r00r00         [24] 5539 	lcall	__gptrget
      00208D FF               [12] 5540 	mov	r7,a
      00208E C0 04            [24] 5541 	push	ar4
      002090 C0 03            [24] 5542 	push	ar3
      002092 C0 02            [24] 5543 	push	ar2
      002094 E5*00            [12] 5544 	mov	a,_bp
      002096 24 13            [12] 5545 	add	a,#0x13
      002098 F8               [12] 5546 	mov	r0,a
      002099 E6               [12] 5547 	mov	a,@r0
      00209A C0 E0            [24] 5548 	push	acc
      00209C 08               [12] 5549 	inc	r0
      00209D E6               [12] 5550 	mov	a,@r0
      00209E C0 E0            [24] 5551 	push	acc
      0020A0 08               [12] 5552 	inc	r0
      0020A1 E6               [12] 5553 	mov	a,@r0
      0020A2 C0 E0            [24] 5554 	push	acc
      0020A4 8D 82            [24] 5555 	mov	dpl,r5
      0020A6 8E 83            [24] 5556 	mov	dph,r6
      0020A8 8F F0            [24] 5557 	mov	b,r7
      0020AA 12r00r00         [24] 5558 	lcall	_stack_pop
      0020AD AE 82            [24] 5559 	mov	r6,dpl
      0020AF AF 83            [24] 5560 	mov	r7,dph
      0020B1 15 81            [12] 5561 	dec	sp
      0020B3 15 81            [12] 5562 	dec	sp
      0020B5 15 81            [12] 5563 	dec	sp
      0020B7 D0 02            [24] 5564 	pop	ar2
      0020B9 D0 03            [24] 5565 	pop	ar3
      0020BB D0 04            [24] 5566 	pop	ar4
      0020BD EE               [12] 5567 	mov	a,r6
      0020BE 4F               [12] 5568 	orl	a,r7
      0020BF 70 43            [24] 5569 	jnz	00232$
                                   5570 ;	calc.c:272: (void)stack_push(ctx->ps, d0);
      0020C1 8A 82            [24] 5571 	mov	dpl,r2
      0020C3 8B 83            [24] 5572 	mov	dph,r3
      0020C5 8C F0            [24] 5573 	mov	b,r4
      0020C7 12r00r00         [24] 5574 	lcall	__gptrget
      0020CA FD               [12] 5575 	mov	r5,a
      0020CB A3               [24] 5576 	inc	dptr
      0020CC 12r00r00         [24] 5577 	lcall	__gptrget
      0020CF FE               [12] 5578 	mov	r6,a
      0020D0 A3               [24] 5579 	inc	dptr
      0020D1 12r00r00         [24] 5580 	lcall	__gptrget
      0020D4 FF               [12] 5581 	mov	r7,a
      0020D5 E5*00            [12] 5582 	mov	a,_bp
      0020D7 24 1A            [12] 5583 	add	a,#0x1a
      0020D9 F8               [12] 5584 	mov	r0,a
      0020DA E6               [12] 5585 	mov	a,@r0
      0020DB C0 E0            [24] 5586 	push	acc
      0020DD 08               [12] 5587 	inc	r0
      0020DE E6               [12] 5588 	mov	a,@r0
      0020DF C0 E0            [24] 5589 	push	acc
      0020E1 08               [12] 5590 	inc	r0
      0020E2 E6               [12] 5591 	mov	a,@r0
      0020E3 C0 E0            [24] 5592 	push	acc
      0020E5 08               [12] 5593 	inc	r0
      0020E6 E6               [12] 5594 	mov	a,@r0
      0020E7 C0 E0            [24] 5595 	push	acc
      0020E9 8D 82            [24] 5596 	mov	dpl,r5
      0020EB 8E 83            [24] 5597 	mov	dph,r6
      0020ED 8F F0            [24] 5598 	mov	b,r7
      0020EF 12r00r00         [24] 5599 	lcall	_stack_push
      0020F2 E5 81            [12] 5600 	mov	a,sp
      0020F4 24 FC            [12] 5601 	add	a,#0xfc
      0020F6 F5 81            [12] 5602 	mov	sp,a
                                   5603 ;	calc.c:273: printstr("\r\nstack underflow\r\n");
      0020F8 90r00r47         [24] 5604 	mov	dptr,#___str_9
      0020FB 75 F0 80         [24] 5605 	mov	b,#0x80
      0020FE 12r00r00         [24] 5606 	lcall	_printstr
      002101 02r23rA7         [24] 5607 	ljmp	00249$
      002104                       5608 00232$:
                                   5609 ;	calc.c:275: d1 >>= d0;
      002104 E5*00            [12] 5610 	mov	a,_bp
      002106 24 1A            [12] 5611 	add	a,#0x1a
      002108 F8               [12] 5612 	mov	r0,a
      002109 86 F0            [24] 5613 	mov	b,@r0
      00210B 05 F0            [12] 5614 	inc	b
      00210D E5*00            [12] 5615 	mov	a,_bp
      00210F 24 1E            [12] 5616 	add	a,#0x1e
      002111 F8               [12] 5617 	mov	r0,a
      002112 08               [12] 5618 	inc	r0
      002113 08               [12] 5619 	inc	r0
      002114 08               [12] 5620 	inc	r0
      002115 E6               [12] 5621 	mov	a,@r0
      002116 33               [12] 5622 	rlc	a
      002117 92 D2            [24] 5623 	mov	ov,c
      002119 18               [12] 5624 	dec	r0
      00211A 18               [12] 5625 	dec	r0
      00211B 18               [12] 5626 	dec	r0
      00211C 80 14            [24] 5627 	sjmp	00596$
      00211E                       5628 00595$:
      00211E A2 D2            [12] 5629 	mov	c,ov
      002120 08               [12] 5630 	inc	r0
      002121 08               [12] 5631 	inc	r0
      002122 08               [12] 5632 	inc	r0
      002123 E6               [12] 5633 	mov	a,@r0
      002124 13               [12] 5634 	rrc	a
      002125 F6               [12] 5635 	mov	@r0,a
      002126 18               [12] 5636 	dec	r0
      002127 E6               [12] 5637 	mov	a,@r0
      002128 13               [12] 5638 	rrc	a
      002129 F6               [12] 5639 	mov	@r0,a
      00212A 18               [12] 5640 	dec	r0
      00212B E6               [12] 5641 	mov	a,@r0
      00212C 13               [12] 5642 	rrc	a
      00212D F6               [12] 5643 	mov	@r0,a
      00212E 18               [12] 5644 	dec	r0
      00212F E6               [12] 5645 	mov	a,@r0
      002130 13               [12] 5646 	rrc	a
      002131 F6               [12] 5647 	mov	@r0,a
      002132                       5648 00596$:
      002132 D5 F0 E9         [24] 5649 	djnz	b,00595$
                                   5650 ;	calc.c:276: (void)stack_push(ctx->ps, d1);
      002135 8A 82            [24] 5651 	mov	dpl,r2
      002137 8B 83            [24] 5652 	mov	dph,r3
      002139 8C F0            [24] 5653 	mov	b,r4
      00213B 12r00r00         [24] 5654 	lcall	__gptrget
      00213E FA               [12] 5655 	mov	r2,a
      00213F A3               [24] 5656 	inc	dptr
      002140 12r00r00         [24] 5657 	lcall	__gptrget
      002143 FB               [12] 5658 	mov	r3,a
      002144 A3               [24] 5659 	inc	dptr
      002145 12r00r00         [24] 5660 	lcall	__gptrget
      002148 FC               [12] 5661 	mov	r4,a
      002149 E5*00            [12] 5662 	mov	a,_bp
      00214B 24 1E            [12] 5663 	add	a,#0x1e
      00214D F8               [12] 5664 	mov	r0,a
      00214E E6               [12] 5665 	mov	a,@r0
      00214F C0 E0            [24] 5666 	push	acc
      002151 08               [12] 5667 	inc	r0
      002152 E6               [12] 5668 	mov	a,@r0
      002153 C0 E0            [24] 5669 	push	acc
      002155 08               [12] 5670 	inc	r0
      002156 E6               [12] 5671 	mov	a,@r0
      002157 C0 E0            [24] 5672 	push	acc
      002159 08               [12] 5673 	inc	r0
      00215A E6               [12] 5674 	mov	a,@r0
      00215B C0 E0            [24] 5675 	push	acc
      00215D 8A 82            [24] 5676 	mov	dpl,r2
      00215F 8B 83            [24] 5677 	mov	dph,r3
      002161 8C F0            [24] 5678 	mov	b,r4
      002163 12r00r00         [24] 5679 	lcall	_stack_push
      002166 E5 81            [12] 5680 	mov	a,sp
      002168 24 FC            [12] 5681 	add	a,#0xfc
      00216A F5 81            [12] 5682 	mov	sp,a
                                   5683 ;	calc.c:278: break;
      00216C 02r23rA7         [24] 5684 	ljmp	00249$
                                   5685 ;	calc.c:279: case '<':
      00216F                       5686 00237$:
                                   5687 ;	calc.c:280: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      00216F E5*00            [12] 5688 	mov	a,_bp
      002171 24 1A            [12] 5689 	add	a,#0x1a
      002173 FF               [12] 5690 	mov	r7,a
      002174 E5*00            [12] 5691 	mov	a,_bp
      002176 24 13            [12] 5692 	add	a,#0x13
      002178 F8               [12] 5693 	mov	r0,a
      002179 A6 07            [24] 5694 	mov	@r0,ar7
      00217B 08               [12] 5695 	inc	r0
      00217C 76 00            [12] 5696 	mov	@r0,#0x00
      00217E 08               [12] 5697 	inc	r0
      00217F 76 40            [12] 5698 	mov	@r0,#0x40
      002181 E5*00            [12] 5699 	mov	a,_bp
      002183 24 17            [12] 5700 	add	a,#0x17
      002185 F8               [12] 5701 	mov	r0,a
      002186 74 11            [12] 5702 	mov	a,#0x11
      002188 26               [12] 5703 	add	a,@r0
      002189 FA               [12] 5704 	mov	r2,a
      00218A 74 40            [12] 5705 	mov	a,#0x40
      00218C 08               [12] 5706 	inc	r0
      00218D 36               [12] 5707 	addc	a,@r0
      00218E FB               [12] 5708 	mov	r3,a
      00218F 08               [12] 5709 	inc	r0
      002190 86 04            [24] 5710 	mov	ar4,@r0
      002192 8A 82            [24] 5711 	mov	dpl,r2
      002194 8B 83            [24] 5712 	mov	dph,r3
      002196 8C F0            [24] 5713 	mov	b,r4
      002198 12r00r00         [24] 5714 	lcall	__gptrget
      00219B FD               [12] 5715 	mov	r5,a
      00219C A3               [24] 5716 	inc	dptr
      00219D 12r00r00         [24] 5717 	lcall	__gptrget
      0021A0 FE               [12] 5718 	mov	r6,a
      0021A1 A3               [24] 5719 	inc	dptr
      0021A2 12r00r00         [24] 5720 	lcall	__gptrget
      0021A5 FF               [12] 5721 	mov	r7,a
      0021A6 C0 04            [24] 5722 	push	ar4
      0021A8 C0 03            [24] 5723 	push	ar3
      0021AA C0 02            [24] 5724 	push	ar2
      0021AC E5*00            [12] 5725 	mov	a,_bp
      0021AE 24 13            [12] 5726 	add	a,#0x13
      0021B0 F8               [12] 5727 	mov	r0,a
      0021B1 E6               [12] 5728 	mov	a,@r0
      0021B2 C0 E0            [24] 5729 	push	acc
      0021B4 08               [12] 5730 	inc	r0
      0021B5 E6               [12] 5731 	mov	a,@r0
      0021B6 C0 E0            [24] 5732 	push	acc
      0021B8 08               [12] 5733 	inc	r0
      0021B9 E6               [12] 5734 	mov	a,@r0
      0021BA C0 E0            [24] 5735 	push	acc
      0021BC 8D 82            [24] 5736 	mov	dpl,r5
      0021BE 8E 83            [24] 5737 	mov	dph,r6
      0021C0 8F F0            [24] 5738 	mov	b,r7
      0021C2 12r00r00         [24] 5739 	lcall	_stack_pop
      0021C5 AE 82            [24] 5740 	mov	r6,dpl
      0021C7 AF 83            [24] 5741 	mov	r7,dph
      0021C9 15 81            [12] 5742 	dec	sp
      0021CB 15 81            [12] 5743 	dec	sp
      0021CD 15 81            [12] 5744 	dec	sp
      0021CF D0 02            [24] 5745 	pop	ar2
      0021D1 D0 03            [24] 5746 	pop	ar3
      0021D3 D0 04            [24] 5747 	pop	ar4
      0021D5 EE               [12] 5748 	mov	a,r6
      0021D6 4F               [12] 5749 	orl	a,r7
      0021D7 70 0C            [24] 5750 	jnz	00242$
      0021D9 90r00r47         [24] 5751 	mov	dptr,#___str_9
      0021DC 75 F0 80         [24] 5752 	mov	b,#0x80
      0021DF 12r00r00         [24] 5753 	lcall	_printstr
      0021E2 02r23rA7         [24] 5754 	ljmp	00249$
      0021E5                       5755 00242$:
                                   5756 ;	calc.c:281: else if (!stack_pop(ctx->ps, &d1)) {
      0021E5 E5*00            [12] 5757 	mov	a,_bp
      0021E7 24 1E            [12] 5758 	add	a,#0x1e
      0021E9 FF               [12] 5759 	mov	r7,a
      0021EA E5*00            [12] 5760 	mov	a,_bp
      0021EC 24 13            [12] 5761 	add	a,#0x13
      0021EE F8               [12] 5762 	mov	r0,a
      0021EF A6 07            [24] 5763 	mov	@r0,ar7
      0021F1 08               [12] 5764 	inc	r0
      0021F2 76 00            [12] 5765 	mov	@r0,#0x00
      0021F4 08               [12] 5766 	inc	r0
      0021F5 76 40            [12] 5767 	mov	@r0,#0x40
      0021F7 8A 82            [24] 5768 	mov	dpl,r2
      0021F9 8B 83            [24] 5769 	mov	dph,r3
      0021FB 8C F0            [24] 5770 	mov	b,r4
      0021FD 12r00r00         [24] 5771 	lcall	__gptrget
      002200 FD               [12] 5772 	mov	r5,a
      002201 A3               [24] 5773 	inc	dptr
      002202 12r00r00         [24] 5774 	lcall	__gptrget
      002205 FE               [12] 5775 	mov	r6,a
      002206 A3               [24] 5776 	inc	dptr
      002207 12r00r00         [24] 5777 	lcall	__gptrget
      00220A FF               [12] 5778 	mov	r7,a
      00220B C0 04            [24] 5779 	push	ar4
      00220D C0 03            [24] 5780 	push	ar3
      00220F C0 02            [24] 5781 	push	ar2
      002211 E5*00            [12] 5782 	mov	a,_bp
      002213 24 13            [12] 5783 	add	a,#0x13
      002215 F8               [12] 5784 	mov	r0,a
      002216 E6               [12] 5785 	mov	a,@r0
      002217 C0 E0            [24] 5786 	push	acc
      002219 08               [12] 5787 	inc	r0
      00221A E6               [12] 5788 	mov	a,@r0
      00221B C0 E0            [24] 5789 	push	acc
      00221D 08               [12] 5790 	inc	r0
      00221E E6               [12] 5791 	mov	a,@r0
      00221F C0 E0            [24] 5792 	push	acc
      002221 8D 82            [24] 5793 	mov	dpl,r5
      002223 8E 83            [24] 5794 	mov	dph,r6
      002225 8F F0            [24] 5795 	mov	b,r7
      002227 12r00r00         [24] 5796 	lcall	_stack_pop
      00222A AE 82            [24] 5797 	mov	r6,dpl
      00222C AF 83            [24] 5798 	mov	r7,dph
      00222E 15 81            [12] 5799 	dec	sp
      002230 15 81            [12] 5800 	dec	sp
      002232 15 81            [12] 5801 	dec	sp
      002234 D0 02            [24] 5802 	pop	ar2
      002236 D0 03            [24] 5803 	pop	ar3
      002238 D0 04            [24] 5804 	pop	ar4
      00223A EE               [12] 5805 	mov	a,r6
      00223B 4F               [12] 5806 	orl	a,r7
      00223C 70 43            [24] 5807 	jnz	00239$
                                   5808 ;	calc.c:282: (void)stack_push(ctx->ps, d0);
      00223E 8A 82            [24] 5809 	mov	dpl,r2
      002240 8B 83            [24] 5810 	mov	dph,r3
      002242 8C F0            [24] 5811 	mov	b,r4
      002244 12r00r00         [24] 5812 	lcall	__gptrget
      002247 FD               [12] 5813 	mov	r5,a
      002248 A3               [24] 5814 	inc	dptr
      002249 12r00r00         [24] 5815 	lcall	__gptrget
      00224C FE               [12] 5816 	mov	r6,a
      00224D A3               [24] 5817 	inc	dptr
      00224E 12r00r00         [24] 5818 	lcall	__gptrget
      002251 FF               [12] 5819 	mov	r7,a
      002252 E5*00            [12] 5820 	mov	a,_bp
      002254 24 1A            [12] 5821 	add	a,#0x1a
      002256 F8               [12] 5822 	mov	r0,a
      002257 E6               [12] 5823 	mov	a,@r0
      002258 C0 E0            [24] 5824 	push	acc
      00225A 08               [12] 5825 	inc	r0
      00225B E6               [12] 5826 	mov	a,@r0
      00225C C0 E0            [24] 5827 	push	acc
      00225E 08               [12] 5828 	inc	r0
      00225F E6               [12] 5829 	mov	a,@r0
      002260 C0 E0            [24] 5830 	push	acc
      002262 08               [12] 5831 	inc	r0
      002263 E6               [12] 5832 	mov	a,@r0
      002264 C0 E0            [24] 5833 	push	acc
      002266 8D 82            [24] 5834 	mov	dpl,r5
      002268 8E 83            [24] 5835 	mov	dph,r6
      00226A 8F F0            [24] 5836 	mov	b,r7
      00226C 12r00r00         [24] 5837 	lcall	_stack_push
      00226F E5 81            [12] 5838 	mov	a,sp
      002271 24 FC            [12] 5839 	add	a,#0xfc
      002273 F5 81            [12] 5840 	mov	sp,a
                                   5841 ;	calc.c:283: printstr("\r\nstack underflow\r\n");
      002275 90r00r47         [24] 5842 	mov	dptr,#___str_9
      002278 75 F0 80         [24] 5843 	mov	b,#0x80
      00227B 12r00r00         [24] 5844 	lcall	_printstr
      00227E 02r23rA7         [24] 5845 	ljmp	00249$
      002281                       5846 00239$:
                                   5847 ;	calc.c:285: d1 <<= d0;
      002281 E5*00            [12] 5848 	mov	a,_bp
      002283 24 1A            [12] 5849 	add	a,#0x1a
      002285 F8               [12] 5850 	mov	r0,a
      002286 86 F0            [24] 5851 	mov	b,@r0
      002288 05 F0            [12] 5852 	inc	b
      00228A E5*00            [12] 5853 	mov	a,_bp
      00228C 24 1E            [12] 5854 	add	a,#0x1e
      00228E F8               [12] 5855 	mov	r0,a
      00228F 80 12            [24] 5856 	sjmp	00600$
      002291                       5857 00599$:
      002291 E6               [12] 5858 	mov	a,@r0
      002292 26               [12] 5859 	add	a,@r0
      002293 F6               [12] 5860 	mov	@r0,a
      002294 08               [12] 5861 	inc	r0
      002295 E6               [12] 5862 	mov	a,@r0
      002296 33               [12] 5863 	rlc	a
      002297 F6               [12] 5864 	mov	@r0,a
      002298 08               [12] 5865 	inc	r0
      002299 E6               [12] 5866 	mov	a,@r0
      00229A 33               [12] 5867 	rlc	a
      00229B F6               [12] 5868 	mov	@r0,a
      00229C 08               [12] 5869 	inc	r0
      00229D E6               [12] 5870 	mov	a,@r0
      00229E 33               [12] 5871 	rlc	a
      00229F F6               [12] 5872 	mov	@r0,a
      0022A0 18               [12] 5873 	dec	r0
      0022A1 18               [12] 5874 	dec	r0
      0022A2 18               [12] 5875 	dec	r0
      0022A3                       5876 00600$:
      0022A3 D5 F0 EB         [24] 5877 	djnz	b,00599$
                                   5878 ;	calc.c:286: (void)stack_push(ctx->ps, d1);
      0022A6 8A 82            [24] 5879 	mov	dpl,r2
      0022A8 8B 83            [24] 5880 	mov	dph,r3
      0022AA 8C F0            [24] 5881 	mov	b,r4
      0022AC 12r00r00         [24] 5882 	lcall	__gptrget
      0022AF FA               [12] 5883 	mov	r2,a
      0022B0 A3               [24] 5884 	inc	dptr
      0022B1 12r00r00         [24] 5885 	lcall	__gptrget
      0022B4 FB               [12] 5886 	mov	r3,a
      0022B5 A3               [24] 5887 	inc	dptr
      0022B6 12r00r00         [24] 5888 	lcall	__gptrget
      0022B9 FC               [12] 5889 	mov	r4,a
      0022BA E5*00            [12] 5890 	mov	a,_bp
      0022BC 24 1E            [12] 5891 	add	a,#0x1e
      0022BE F8               [12] 5892 	mov	r0,a
      0022BF E6               [12] 5893 	mov	a,@r0
      0022C0 C0 E0            [24] 5894 	push	acc
      0022C2 08               [12] 5895 	inc	r0
      0022C3 E6               [12] 5896 	mov	a,@r0
      0022C4 C0 E0            [24] 5897 	push	acc
      0022C6 08               [12] 5898 	inc	r0
      0022C7 E6               [12] 5899 	mov	a,@r0
      0022C8 C0 E0            [24] 5900 	push	acc
      0022CA 08               [12] 5901 	inc	r0
      0022CB E6               [12] 5902 	mov	a,@r0
      0022CC C0 E0            [24] 5903 	push	acc
      0022CE 8A 82            [24] 5904 	mov	dpl,r2
      0022D0 8B 83            [24] 5905 	mov	dph,r3
      0022D2 8C F0            [24] 5906 	mov	b,r4
      0022D4 12r00r00         [24] 5907 	lcall	_stack_push
      0022D7 E5 81            [12] 5908 	mov	a,sp
      0022D9 24 FC            [12] 5909 	add	a,#0xfc
      0022DB F5 81            [12] 5910 	mov	sp,a
                                   5911 ;	calc.c:288: break;
      0022DD 02r23rA7         [24] 5912 	ljmp	00249$
                                   5913 ;	calc.c:289: case '~':
      0022E0                       5914 00244$:
                                   5915 ;	calc.c:290: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      0022E0 E5*00            [12] 5916 	mov	a,_bp
      0022E2 24 1A            [12] 5917 	add	a,#0x1a
      0022E4 FF               [12] 5918 	mov	r7,a
      0022E5 E5*00            [12] 5919 	mov	a,_bp
      0022E7 24 13            [12] 5920 	add	a,#0x13
      0022E9 F8               [12] 5921 	mov	r0,a
      0022EA A6 07            [24] 5922 	mov	@r0,ar7
      0022EC 08               [12] 5923 	inc	r0
      0022ED 76 00            [12] 5924 	mov	@r0,#0x00
      0022EF 08               [12] 5925 	inc	r0
      0022F0 76 40            [12] 5926 	mov	@r0,#0x40
      0022F2 E5*00            [12] 5927 	mov	a,_bp
      0022F4 24 17            [12] 5928 	add	a,#0x17
      0022F6 F8               [12] 5929 	mov	r0,a
      0022F7 74 11            [12] 5930 	mov	a,#0x11
      0022F9 26               [12] 5931 	add	a,@r0
      0022FA FA               [12] 5932 	mov	r2,a
      0022FB 74 40            [12] 5933 	mov	a,#0x40
      0022FD 08               [12] 5934 	inc	r0
      0022FE 36               [12] 5935 	addc	a,@r0
      0022FF FB               [12] 5936 	mov	r3,a
      002300 08               [12] 5937 	inc	r0
      002301 86 04            [24] 5938 	mov	ar4,@r0
      002303 8A 82            [24] 5939 	mov	dpl,r2
      002305 8B 83            [24] 5940 	mov	dph,r3
      002307 8C F0            [24] 5941 	mov	b,r4
      002309 12r00r00         [24] 5942 	lcall	__gptrget
      00230C FD               [12] 5943 	mov	r5,a
      00230D A3               [24] 5944 	inc	dptr
      00230E 12r00r00         [24] 5945 	lcall	__gptrget
      002311 FE               [12] 5946 	mov	r6,a
      002312 A3               [24] 5947 	inc	dptr
      002313 12r00r00         [24] 5948 	lcall	__gptrget
      002316 FF               [12] 5949 	mov	r7,a
      002317 C0 04            [24] 5950 	push	ar4
      002319 C0 03            [24] 5951 	push	ar3
      00231B C0 02            [24] 5952 	push	ar2
      00231D E5*00            [12] 5953 	mov	a,_bp
      00231F 24 13            [12] 5954 	add	a,#0x13
      002321 F8               [12] 5955 	mov	r0,a
      002322 E6               [12] 5956 	mov	a,@r0
      002323 C0 E0            [24] 5957 	push	acc
      002325 08               [12] 5958 	inc	r0
      002326 E6               [12] 5959 	mov	a,@r0
      002327 C0 E0            [24] 5960 	push	acc
      002329 08               [12] 5961 	inc	r0
      00232A E6               [12] 5962 	mov	a,@r0
      00232B C0 E0            [24] 5963 	push	acc
      00232D 8D 82            [24] 5964 	mov	dpl,r5
      00232F 8E 83            [24] 5965 	mov	dph,r6
      002331 8F F0            [24] 5966 	mov	b,r7
      002333 12r00r00         [24] 5967 	lcall	_stack_pop
      002336 AE 82            [24] 5968 	mov	r6,dpl
      002338 AF 83            [24] 5969 	mov	r7,dph
      00233A 15 81            [12] 5970 	dec	sp
      00233C 15 81            [12] 5971 	dec	sp
      00233E 15 81            [12] 5972 	dec	sp
      002340 D0 02            [24] 5973 	pop	ar2
      002342 D0 03            [24] 5974 	pop	ar3
      002344 D0 04            [24] 5975 	pop	ar4
      002346 EE               [12] 5976 	mov	a,r6
      002347 4F               [12] 5977 	orl	a,r7
      002348 70 0B            [24] 5978 	jnz	00246$
      00234A 90r00r47         [24] 5979 	mov	dptr,#___str_9
      00234D 75 F0 80         [24] 5980 	mov	b,#0x80
      002350 12r00r00         [24] 5981 	lcall	_printstr
      002353 80 52            [24] 5982 	sjmp	00249$
      002355                       5983 00246$:
                                   5984 ;	calc.c:292: d0 = ~d0;
      002355 E5*00            [12] 5985 	mov	a,_bp
      002357 24 1A            [12] 5986 	add	a,#0x1a
      002359 F8               [12] 5987 	mov	r0,a
      00235A E6               [12] 5988 	mov	a,@r0
      00235B F4               [12] 5989 	cpl	a
      00235C F6               [12] 5990 	mov	@r0,a
      00235D 08               [12] 5991 	inc	r0
      00235E E6               [12] 5992 	mov	a,@r0
      00235F F4               [12] 5993 	cpl	a
      002360 F6               [12] 5994 	mov	@r0,a
      002361 08               [12] 5995 	inc	r0
      002362 E6               [12] 5996 	mov	a,@r0
      002363 F4               [12] 5997 	cpl	a
      002364 F6               [12] 5998 	mov	@r0,a
      002365 08               [12] 5999 	inc	r0
      002366 E6               [12] 6000 	mov	a,@r0
      002367 F4               [12] 6001 	cpl	a
      002368 F6               [12] 6002 	mov	@r0,a
                                   6003 ;	calc.c:293: (void)stack_push(ctx->ps, d0);
      002369 8A 82            [24] 6004 	mov	dpl,r2
      00236B 8B 83            [24] 6005 	mov	dph,r3
      00236D 8C F0            [24] 6006 	mov	b,r4
      00236F 12r00r00         [24] 6007 	lcall	__gptrget
      002372 FA               [12] 6008 	mov	r2,a
      002373 A3               [24] 6009 	inc	dptr
      002374 12r00r00         [24] 6010 	lcall	__gptrget
      002377 FB               [12] 6011 	mov	r3,a
      002378 A3               [24] 6012 	inc	dptr
      002379 12r00r00         [24] 6013 	lcall	__gptrget
      00237C FC               [12] 6014 	mov	r4,a
      00237D E5*00            [12] 6015 	mov	a,_bp
      00237F 24 1A            [12] 6016 	add	a,#0x1a
      002381 F8               [12] 6017 	mov	r0,a
      002382 E6               [12] 6018 	mov	a,@r0
      002383 C0 E0            [24] 6019 	push	acc
      002385 08               [12] 6020 	inc	r0
      002386 E6               [12] 6021 	mov	a,@r0
      002387 C0 E0            [24] 6022 	push	acc
      002389 08               [12] 6023 	inc	r0
      00238A E6               [12] 6024 	mov	a,@r0
      00238B C0 E0            [24] 6025 	push	acc
      00238D 08               [12] 6026 	inc	r0
      00238E E6               [12] 6027 	mov	a,@r0
      00238F C0 E0            [24] 6028 	push	acc
      002391 8A 82            [24] 6029 	mov	dpl,r2
      002393 8B 83            [24] 6030 	mov	dph,r3
      002395 8C F0            [24] 6031 	mov	b,r4
      002397 12r00r00         [24] 6032 	lcall	_stack_push
      00239A E5 81            [12] 6033 	mov	a,sp
      00239C 24 FC            [12] 6034 	add	a,#0xfc
      00239E F5 81            [12] 6035 	mov	sp,a
                                   6036 ;	calc.c:295: break;
                                   6037 ;	calc.c:296: default:
      0023A0 80 05            [24] 6038 	sjmp	00249$
      0023A2                       6039 00248$:
                                   6040 ;	calc.c:297: return UNDEF;
      0023A2 90 80 00         [24] 6041 	mov	dptr,#0x8000
                                   6042 ;	calc.c:298: }
      0023A5 80 03            [24] 6043 	sjmp	00252$
      0023A7                       6044 00249$:
                                   6045 ;	calc.c:300: return 1;
      0023A7 90 00 01         [24] 6046 	mov	dptr,#0x0001
      0023AA                       6047 00252$:
                                   6048 ;	calc.c:301: }
      0023AA 85*00 81         [24] 6049 	mov	sp,_bp
      0023AD D0*00            [24] 6050 	pop	_bp
      0023AF 22               [24] 6051 	ret
                                   6052 ;------------------------------------------------------------
                                   6053 ;Allocation info for local variables in function 'push_acc'
                                   6054 ;------------------------------------------------------------
                                   6055 ;delta                     Allocated to stack - _bp -5
                                   6056 ;_ctx                      Allocated to stack - _bp +5
                                   6057 ;ctx                       Allocated to registers r2 r3 r4 
                                   6058 ;sloc0                     Allocated to stack - _bp +1
                                   6059 ;------------------------------------------------------------
                                   6060 ;	calc.c:303: static int push_acc(void *_ctx, delta_t *delta) __reentrant {
                                   6061 ;	-----------------------------------------
                                   6062 ;	 function push_acc
                                   6063 ;	-----------------------------------------
      0023B0                       6064 _push_acc:
      0023B0 C0*00            [24] 6065 	push	_bp
      0023B2 E5 81            [12] 6066 	mov	a,sp
      0023B4 F5*00            [12] 6067 	mov	_bp,a
      0023B6 24 07            [12] 6068 	add	a,#0x07
      0023B8 F5 81            [12] 6069 	mov	sp,a
      0023BA C8               [12] 6070 	xch	a,r0
      0023BB E5*00            [12] 6071 	mov	a,_bp
      0023BD 24 05            [12] 6072 	add	a,#0x05
      0023BF C8               [12] 6073 	xch	a,r0
      0023C0 A6 82            [24] 6074 	mov	@r0,dpl
      0023C2 08               [12] 6075 	inc	r0
      0023C3 A6 83            [24] 6076 	mov	@r0,dph
      0023C5 08               [12] 6077 	inc	r0
      0023C6 A6 F0            [24] 6078 	mov	@r0,b
                                   6079 ;	calc.c:304: calc_ctx_t *ctx = (calc_ctx_t *)_ctx;
      0023C8 E5*00            [12] 6080 	mov	a,_bp
      0023CA 24 05            [12] 6081 	add	a,#0x05
      0023CC F8               [12] 6082 	mov	r0,a
      0023CD 86 02            [24] 6083 	mov	ar2,@r0
      0023CF 08               [12] 6084 	inc	r0
      0023D0 86 03            [24] 6085 	mov	ar3,@r0
      0023D2 08               [12] 6086 	inc	r0
      0023D3 86 04            [24] 6087 	mov	ar4,@r0
                                   6088 ;	calc.c:308: ctx->acc_valid = 0;
      0023D5 74 06            [12] 6089 	mov	a,#0x06
      0023D7 2A               [12] 6090 	add	a,r2
      0023D8 FD               [12] 6091 	mov	r5,a
      0023D9 E4               [12] 6092 	clr	a
      0023DA 3B               [12] 6093 	addc	a,r3
      0023DB FE               [12] 6094 	mov	r6,a
      0023DC 8C 07            [24] 6095 	mov	ar7,r4
      0023DE 8D 82            [24] 6096 	mov	dpl,r5
      0023E0 8E 83            [24] 6097 	mov	dph,r6
      0023E2 8F F0            [24] 6098 	mov	b,r7
      0023E4 E4               [12] 6099 	clr	a
      0023E5 12r00r00         [24] 6100 	lcall	__gptrput
                                   6101 ;	calc.c:309: if (!stack_push(ctx->ps, ctx->acc)) printstr("\r\nstack overflow\r\n");
      0023E8 74 02            [12] 6102 	mov	a,#0x02
      0023EA 2A               [12] 6103 	add	a,r2
      0023EB FF               [12] 6104 	mov	r7,a
      0023EC E4               [12] 6105 	clr	a
      0023ED 3B               [12] 6106 	addc	a,r3
      0023EE FD               [12] 6107 	mov	r5,a
      0023EF 8C 06            [24] 6108 	mov	ar6,r4
      0023F1 8F 82            [24] 6109 	mov	dpl,r7
      0023F3 8D 83            [24] 6110 	mov	dph,r5
      0023F5 8E F0            [24] 6111 	mov	b,r6
      0023F7 A8*00            [24] 6112 	mov	r0,_bp
      0023F9 08               [12] 6113 	inc	r0
      0023FA 12r00r00         [24] 6114 	lcall	__gptrget
      0023FD F6               [12] 6115 	mov	@r0,a
      0023FE A3               [24] 6116 	inc	dptr
      0023FF 12r00r00         [24] 6117 	lcall	__gptrget
      002402 08               [12] 6118 	inc	r0
      002403 F6               [12] 6119 	mov	@r0,a
      002404 A3               [24] 6120 	inc	dptr
      002405 12r00r00         [24] 6121 	lcall	__gptrget
      002408 08               [12] 6122 	inc	r0
      002409 F6               [12] 6123 	mov	@r0,a
      00240A A3               [24] 6124 	inc	dptr
      00240B 12r00r00         [24] 6125 	lcall	__gptrget
      00240E 08               [12] 6126 	inc	r0
      00240F F6               [12] 6127 	mov	@r0,a
      002410 74 11            [12] 6128 	mov	a,#0x11
      002412 2A               [12] 6129 	add	a,r2
      002413 FA               [12] 6130 	mov	r2,a
      002414 74 40            [12] 6131 	mov	a,#0x40
      002416 3B               [12] 6132 	addc	a,r3
      002417 FB               [12] 6133 	mov	r3,a
      002418 8C 07            [24] 6134 	mov	ar7,r4
      00241A 8A 82            [24] 6135 	mov	dpl,r2
      00241C 8B 83            [24] 6136 	mov	dph,r3
      00241E 8F F0            [24] 6137 	mov	b,r7
      002420 12r00r00         [24] 6138 	lcall	__gptrget
      002423 FA               [12] 6139 	mov	r2,a
      002424 A3               [24] 6140 	inc	dptr
      002425 12r00r00         [24] 6141 	lcall	__gptrget
      002428 FB               [12] 6142 	mov	r3,a
      002429 A3               [24] 6143 	inc	dptr
      00242A 12r00r00         [24] 6144 	lcall	__gptrget
      00242D FF               [12] 6145 	mov	r7,a
      00242E A8*00            [24] 6146 	mov	r0,_bp
      002430 08               [12] 6147 	inc	r0
      002431 E6               [12] 6148 	mov	a,@r0
      002432 C0 E0            [24] 6149 	push	acc
      002434 08               [12] 6150 	inc	r0
      002435 E6               [12] 6151 	mov	a,@r0
      002436 C0 E0            [24] 6152 	push	acc
      002438 08               [12] 6153 	inc	r0
      002439 E6               [12] 6154 	mov	a,@r0
      00243A C0 E0            [24] 6155 	push	acc
      00243C 08               [12] 6156 	inc	r0
      00243D E6               [12] 6157 	mov	a,@r0
      00243E C0 E0            [24] 6158 	push	acc
      002440 8A 82            [24] 6159 	mov	dpl,r2
      002442 8B 83            [24] 6160 	mov	dph,r3
      002444 8F F0            [24] 6161 	mov	b,r7
      002446 12r00r00         [24] 6162 	lcall	_stack_push
      002449 AE 82            [24] 6163 	mov	r6,dpl
      00244B AF 83            [24] 6164 	mov	r7,dph
      00244D E5 81            [12] 6165 	mov	a,sp
      00244F 24 FC            [12] 6166 	add	a,#0xfc
      002451 F5 81            [12] 6167 	mov	sp,a
      002453 EE               [12] 6168 	mov	a,r6
      002454 4F               [12] 6169 	orl	a,r7
      002455 70 09            [24] 6170 	jnz	00102$
      002457 90r00r96         [24] 6171 	mov	dptr,#___str_12
      00245A 75 F0 80         [24] 6172 	mov	b,#0x80
      00245D 12r00r00         [24] 6173 	lcall	_printstr
      002460                       6174 00102$:
                                   6175 ;	calc.c:311: if (delta->event == EVENT_OP) return operator(_ctx, delta);
      002460 E5*00            [12] 6176 	mov	a,_bp
      002462 24 FB            [12] 6177 	add	a,#0xfb
      002464 F8               [12] 6178 	mov	r0,a
      002465 86 05            [24] 6179 	mov	ar5,@r0
      002467 08               [12] 6180 	inc	r0
      002468 86 06            [24] 6181 	mov	ar6,@r0
      00246A 08               [12] 6182 	inc	r0
      00246B 86 07            [24] 6183 	mov	ar7,@r0
      00246D 74 02            [12] 6184 	mov	a,#0x02
      00246F 2D               [12] 6185 	add	a,r5
      002470 FA               [12] 6186 	mov	r2,a
      002471 E4               [12] 6187 	clr	a
      002472 3E               [12] 6188 	addc	a,r6
      002473 FB               [12] 6189 	mov	r3,a
      002474 8F 04            [24] 6190 	mov	ar4,r7
      002476 8A 82            [24] 6191 	mov	dpl,r2
      002478 8B 83            [24] 6192 	mov	dph,r3
      00247A 8C F0            [24] 6193 	mov	b,r4
      00247C 12r00r00         [24] 6194 	lcall	__gptrget
      00247F FA               [12] 6195 	mov	r2,a
      002480 A3               [24] 6196 	inc	dptr
      002481 12r00r00         [24] 6197 	lcall	__gptrget
      002484 FB               [12] 6198 	mov	r3,a
      002485 BA 02 29         [24] 6199 	cjne	r2,#0x02,00104$
      002488 BB 00 26         [24] 6200 	cjne	r3,#0x00,00104$
      00248B C0 05            [24] 6201 	push	ar5
      00248D C0 06            [24] 6202 	push	ar6
      00248F C0 07            [24] 6203 	push	ar7
      002491 E5*00            [12] 6204 	mov	a,_bp
      002493 24 05            [12] 6205 	add	a,#0x05
      002495 F8               [12] 6206 	mov	r0,a
      002496 86 82            [24] 6207 	mov	dpl,@r0
      002498 08               [12] 6208 	inc	r0
      002499 86 83            [24] 6209 	mov	dph,@r0
      00249B 08               [12] 6210 	inc	r0
      00249C 86 F0            [24] 6211 	mov	b,@r0
      00249E 12r06r3B         [24] 6212 	lcall	_operator
      0024A1 AE 82            [24] 6213 	mov	r6,dpl
      0024A3 AF 83            [24] 6214 	mov	r7,dph
      0024A5 15 81            [12] 6215 	dec	sp
      0024A7 15 81            [12] 6216 	dec	sp
      0024A9 15 81            [12] 6217 	dec	sp
      0024AB 8E 82            [24] 6218 	mov	dpl,r6
      0024AD 8F 83            [24] 6219 	mov	dph,r7
      0024AF 80 03            [24] 6220 	sjmp	00106$
      0024B1                       6221 00104$:
                                   6222 ;	calc.c:312: else return 1;
      0024B1 90 00 01         [24] 6223 	mov	dptr,#0x0001
      0024B4                       6224 00106$:
                                   6225 ;	calc.c:313: }
      0024B4 85*00 81         [24] 6226 	mov	sp,_bp
      0024B7 D0*00            [24] 6227 	pop	_bp
      0024B9 22               [24] 6228 	ret
                                   6229 ;------------------------------------------------------------
                                   6230 ;Allocation info for local variables in function 'reset_acc'
                                   6231 ;------------------------------------------------------------
                                   6232 ;delta                     Allocated to stack - _bp -5
                                   6233 ;_ctx                      Allocated to registers r5 r6 r7 
                                   6234 ;ctx                       Allocated to registers r5 r6 r7 
                                   6235 ;------------------------------------------------------------
                                   6236 ;	calc.c:315: static int reset_acc(void *_ctx, delta_t *delta) __reentrant {
                                   6237 ;	-----------------------------------------
                                   6238 ;	 function reset_acc
                                   6239 ;	-----------------------------------------
      0024BA                       6240 _reset_acc:
      0024BA C0*00            [24] 6241 	push	_bp
      0024BC 85 81*00         [24] 6242 	mov	_bp,sp
      0024BF AD 82            [24] 6243 	mov	r5,dpl
      0024C1 AE 83            [24] 6244 	mov	r6,dph
      0024C3 AF F0            [24] 6245 	mov	r7,b
                                   6246 ;	calc.c:316: calc_ctx_t *ctx = (calc_ctx_t *)_ctx;
                                   6247 ;	calc.c:318: if (delta->event == EVENT_RSTA_I) ctx->acc_valid = 0;
      0024C5 E5*00            [12] 6248 	mov	a,_bp
      0024C7 24 FB            [12] 6249 	add	a,#0xfb
      0024C9 F8               [12] 6250 	mov	r0,a
      0024CA 86 02            [24] 6251 	mov	ar2,@r0
      0024CC 08               [12] 6252 	inc	r0
      0024CD 86 03            [24] 6253 	mov	ar3,@r0
      0024CF 08               [12] 6254 	inc	r0
      0024D0 86 04            [24] 6255 	mov	ar4,@r0
      0024D2 74 02            [12] 6256 	mov	a,#0x02
      0024D4 2A               [12] 6257 	add	a,r2
      0024D5 FA               [12] 6258 	mov	r2,a
      0024D6 E4               [12] 6259 	clr	a
      0024D7 3B               [12] 6260 	addc	a,r3
      0024D8 FB               [12] 6261 	mov	r3,a
      0024D9 8A 82            [24] 6262 	mov	dpl,r2
      0024DB 8B 83            [24] 6263 	mov	dph,r3
      0024DD 8C F0            [24] 6264 	mov	b,r4
      0024DF 12r00r00         [24] 6265 	lcall	__gptrget
      0024E2 FA               [12] 6266 	mov	r2,a
      0024E3 A3               [24] 6267 	inc	dptr
      0024E4 12r00r00         [24] 6268 	lcall	__gptrget
      0024E7 FB               [12] 6269 	mov	r3,a
      0024E8 BA 07 16         [24] 6270 	cjne	r2,#0x07,00102$
      0024EB BB 00 13         [24] 6271 	cjne	r3,#0x00,00102$
      0024EE 74 06            [12] 6272 	mov	a,#0x06
      0024F0 2D               [12] 6273 	add	a,r5
      0024F1 FA               [12] 6274 	mov	r2,a
      0024F2 E4               [12] 6275 	clr	a
      0024F3 3E               [12] 6276 	addc	a,r6
      0024F4 FB               [12] 6277 	mov	r3,a
      0024F5 8F 04            [24] 6278 	mov	ar4,r7
      0024F7 8A 82            [24] 6279 	mov	dpl,r2
      0024F9 8B 83            [24] 6280 	mov	dph,r3
      0024FB 8C F0            [24] 6281 	mov	b,r4
      0024FD E4               [12] 6282 	clr	a
      0024FE 12r00r00         [24] 6283 	lcall	__gptrput
      002501                       6284 00102$:
                                   6285 ;	calc.c:319: ctx->acc = 0l;
      002501 74 02            [12] 6286 	mov	a,#0x02
      002503 2D               [12] 6287 	add	a,r5
      002504 FD               [12] 6288 	mov	r5,a
      002505 E4               [12] 6289 	clr	a
      002506 3E               [12] 6290 	addc	a,r6
      002507 FE               [12] 6291 	mov	r6,a
      002508 8D 82            [24] 6292 	mov	dpl,r5
      00250A 8E 83            [24] 6293 	mov	dph,r6
      00250C 8F F0            [24] 6294 	mov	b,r7
      00250E E4               [12] 6295 	clr	a
      00250F 12r00r00         [24] 6296 	lcall	__gptrput
      002512 A3               [24] 6297 	inc	dptr
      002513 12r00r00         [24] 6298 	lcall	__gptrput
      002516 A3               [24] 6299 	inc	dptr
      002517 12r00r00         [24] 6300 	lcall	__gptrput
      00251A A3               [24] 6301 	inc	dptr
      00251B 12r00r00         [24] 6302 	lcall	__gptrput
                                   6303 ;	calc.c:321: return 1;
      00251E 90 00 01         [24] 6304 	mov	dptr,#0x0001
                                   6305 ;	calc.c:322: }
      002521 D0*00            [24] 6306 	pop	_bp
      002523 22               [24] 6307 	ret
                                   6308 ;------------------------------------------------------------
                                   6309 ;Allocation info for local variables in function 'reset_base'
                                   6310 ;------------------------------------------------------------
                                   6311 ;delta                     Allocated to stack - _bp -5
                                   6312 ;_ctx                      Allocated to registers r5 r6 r7 
                                   6313 ;ctx                       Allocated to registers r5 r6 r7 
                                   6314 ;------------------------------------------------------------
                                   6315 ;	calc.c:324: static int reset_base(void *_ctx, delta_t *delta) __reentrant {
                                   6316 ;	-----------------------------------------
                                   6317 ;	 function reset_base
                                   6318 ;	-----------------------------------------
      002524                       6319 _reset_base:
      002524 C0*00            [24] 6320 	push	_bp
      002526 85 81*00         [24] 6321 	mov	_bp,sp
      002529 AD 82            [24] 6322 	mov	r5,dpl
      00252B AE 83            [24] 6323 	mov	r6,dph
      00252D AF F0            [24] 6324 	mov	r7,b
                                   6325 ;	calc.c:325: calc_ctx_t *ctx = (calc_ctx_t *)_ctx;
                                   6326 ;	calc.c:329: switch (ctx->digit[0]) {
      00252F 74 07            [12] 6327 	mov	a,#0x07
      002531 2D               [12] 6328 	add	a,r5
      002532 FA               [12] 6329 	mov	r2,a
      002533 E4               [12] 6330 	clr	a
      002534 3E               [12] 6331 	addc	a,r6
      002535 FB               [12] 6332 	mov	r3,a
      002536 8F 04            [24] 6333 	mov	ar4,r7
      002538 8A 82            [24] 6334 	mov	dpl,r2
      00253A 8B 83            [24] 6335 	mov	dph,r3
      00253C 8C F0            [24] 6336 	mov	b,r4
      00253E 12r00r00         [24] 6337 	lcall	__gptrget
      002541 FC               [12] 6338 	mov	r4,a
      002542 BC 48 02         [24] 6339 	cjne	r4,#0x48,00124$
      002545 80 0F            [24] 6340 	sjmp	00101$
      002547                       6341 00124$:
      002547 BC 4F 02         [24] 6342 	cjne	r4,#0x4f,00125$
      00254A 80 2E            [24] 6343 	sjmp	00103$
      00254C                       6344 00125$:
      00254C BC 68 02         [24] 6345 	cjne	r4,#0x68,00126$
      00254F 80 17            [24] 6346 	sjmp	00102$
      002551                       6347 00126$:
                                   6348 ;	calc.c:330: case 'H':
      002551 BC 6F 48         [24] 6349 	cjne	r4,#0x6f,00105$
      002554 80 36            [24] 6350 	sjmp	00104$
      002556                       6351 00101$:
                                   6352 ;	calc.c:331: ctx->base = 16;
      002556 8D 82            [24] 6353 	mov	dpl,r5
      002558 8E 83            [24] 6354 	mov	dph,r6
      00255A 8F F0            [24] 6355 	mov	b,r7
      00255C 74 10            [12] 6356 	mov	a,#0x10
      00255E 12r00r00         [24] 6357 	lcall	__gptrput
      002561 A3               [24] 6358 	inc	dptr
      002562 E4               [12] 6359 	clr	a
      002563 12r00r00         [24] 6360 	lcall	__gptrput
                                   6361 ;	calc.c:332: break;
                                   6362 ;	calc.c:333: case 'h':
      002566 80 34            [24] 6363 	sjmp	00105$
      002568                       6364 00102$:
                                   6365 ;	calc.c:334: ctx->base = 10;
      002568 8D 82            [24] 6366 	mov	dpl,r5
      00256A 8E 83            [24] 6367 	mov	dph,r6
      00256C 8F F0            [24] 6368 	mov	b,r7
      00256E 74 0A            [12] 6369 	mov	a,#0x0a
      002570 12r00r00         [24] 6370 	lcall	__gptrput
      002573 A3               [24] 6371 	inc	dptr
      002574 E4               [12] 6372 	clr	a
      002575 12r00r00         [24] 6373 	lcall	__gptrput
                                   6374 ;	calc.c:335: break;
                                   6375 ;	calc.c:336: case 'O':
      002578 80 22            [24] 6376 	sjmp	00105$
      00257A                       6377 00103$:
                                   6378 ;	calc.c:337: ctx->base = 8;
      00257A 8D 82            [24] 6379 	mov	dpl,r5
      00257C 8E 83            [24] 6380 	mov	dph,r6
      00257E 8F F0            [24] 6381 	mov	b,r7
      002580 74 08            [12] 6382 	mov	a,#0x08
      002582 12r00r00         [24] 6383 	lcall	__gptrput
      002585 A3               [24] 6384 	inc	dptr
      002586 E4               [12] 6385 	clr	a
      002587 12r00r00         [24] 6386 	lcall	__gptrput
                                   6387 ;	calc.c:338: break;
                                   6388 ;	calc.c:339: case 'o':
      00258A 80 10            [24] 6389 	sjmp	00105$
      00258C                       6390 00104$:
                                   6391 ;	calc.c:340: ctx->base = 2;
      00258C 8D 82            [24] 6392 	mov	dpl,r5
      00258E 8E 83            [24] 6393 	mov	dph,r6
      002590 8F F0            [24] 6394 	mov	b,r7
      002592 74 02            [12] 6395 	mov	a,#0x02
      002594 12r00r00         [24] 6396 	lcall	__gptrput
      002597 A3               [24] 6397 	inc	dptr
      002598 E4               [12] 6398 	clr	a
      002599 12r00r00         [24] 6399 	lcall	__gptrput
                                   6400 ;	calc.c:342: }
      00259C                       6401 00105$:
                                   6402 ;	calc.c:344: return 1;
      00259C 90 00 01         [24] 6403 	mov	dptr,#0x0001
                                   6404 ;	calc.c:345: }
      00259F D0*00            [24] 6405 	pop	_bp
      0025A1 22               [24] 6406 	ret
                                   6407 ;------------------------------------------------------------
                                   6408 ;Allocation info for local variables in function 'status'
                                   6409 ;------------------------------------------------------------
                                   6410 ;delta                     Allocated to stack - _bp -5
                                   6411 ;_ctx                      Allocated to registers r5 r6 r7 
                                   6412 ;ctx                       Allocated to stack - _bp +9
                                   6413 ;vals                      Allocated to stack - _bp +12
                                   6414 ;n                         Allocated to registers r6 r7 
                                   6415 ;__1310720011              Allocated to registers r5 r6 r7 r4 
                                   6416 ;d                         Allocated to registers 
                                   6417 ;__1310720013              Allocated to registers r2 r3 r4 r5 
                                   6418 ;d                         Allocated to registers 
                                   6419 ;__1310720015              Allocated to registers r4 r5 r6 r7 
                                   6420 ;d                         Allocated to registers 
                                   6421 ;__1310720017              Allocated to registers r2 r3 r4 r5 
                                   6422 ;d                         Allocated to registers 
                                   6423 ;__1310720019              Allocated to registers r4 r5 r6 r7 
                                   6424 ;d                         Allocated to registers 
                                   6425 ;sloc0                     Allocated to stack - _bp +1
                                   6426 ;sloc1                     Allocated to stack - _bp +4
                                   6427 ;sloc2                     Allocated to stack - _bp +7
                                   6428 ;------------------------------------------------------------
                                   6429 ;	calc.c:347: static int status(void *_ctx, delta_t *delta) __reentrant {
                                   6430 ;	-----------------------------------------
                                   6431 ;	 function status
                                   6432 ;	-----------------------------------------
      0025A2                       6433 _status:
      0025A2 C0*00            [24] 6434 	push	_bp
      0025A4 E5 81            [12] 6435 	mov	a,sp
      0025A6 F5*00            [12] 6436 	mov	_bp,a
      0025A8 24 13            [12] 6437 	add	a,#0x13
      0025AA F5 81            [12] 6438 	mov	sp,a
      0025AC AD 82            [24] 6439 	mov	r5,dpl
      0025AE AE 83            [24] 6440 	mov	r6,dph
      0025B0 AF F0            [24] 6441 	mov	r7,b
                                   6442 ;	calc.c:348: calc_ctx_t *ctx = (calc_ctx_t *)_ctx;
      0025B2 E5*00            [12] 6443 	mov	a,_bp
      0025B4 24 09            [12] 6444 	add	a,#0x09
      0025B6 F8               [12] 6445 	mov	r0,a
      0025B7 A6 05            [24] 6446 	mov	@r0,ar5
      0025B9 08               [12] 6447 	inc	r0
      0025BA A6 06            [24] 6448 	mov	@r0,ar6
      0025BC 08               [12] 6449 	inc	r0
      0025BD A6 07            [24] 6450 	mov	@r0,ar7
                                   6451 ;	calc.c:354: printf("\r\nPS = %p, SS = %p, base = %d\r\n", ctx->ps, ctx->ss, ctx->base);
      0025BF E5*00            [12] 6452 	mov	a,_bp
      0025C1 24 09            [12] 6453 	add	a,#0x09
      0025C3 F8               [12] 6454 	mov	r0,a
      0025C4 86 82            [24] 6455 	mov	dpl,@r0
      0025C6 08               [12] 6456 	inc	r0
      0025C7 86 83            [24] 6457 	mov	dph,@r0
      0025C9 08               [12] 6458 	inc	r0
      0025CA 86 F0            [24] 6459 	mov	b,@r0
      0025CC E5*00            [12] 6460 	mov	a,_bp
      0025CE 24 07            [12] 6461 	add	a,#0x07
      0025D0 F9               [12] 6462 	mov	r1,a
      0025D1 12r00r00         [24] 6463 	lcall	__gptrget
      0025D4 F7               [12] 6464 	mov	@r1,a
      0025D5 A3               [24] 6465 	inc	dptr
      0025D6 12r00r00         [24] 6466 	lcall	__gptrget
      0025D9 09               [12] 6467 	inc	r1
      0025DA F7               [12] 6468 	mov	@r1,a
      0025DB E5*00            [12] 6469 	mov	a,_bp
      0025DD 24 09            [12] 6470 	add	a,#0x09
      0025DF F8               [12] 6471 	mov	r0,a
      0025E0 A9*00            [24] 6472 	mov	r1,_bp
      0025E2 09               [12] 6473 	inc	r1
      0025E3 74 14            [12] 6474 	mov	a,#0x14
      0025E5 26               [12] 6475 	add	a,@r0
      0025E6 F7               [12] 6476 	mov	@r1,a
      0025E7 74 40            [12] 6477 	mov	a,#0x40
      0025E9 08               [12] 6478 	inc	r0
      0025EA 36               [12] 6479 	addc	a,@r0
      0025EB 09               [12] 6480 	inc	r1
      0025EC F7               [12] 6481 	mov	@r1,a
      0025ED 08               [12] 6482 	inc	r0
      0025EE 09               [12] 6483 	inc	r1
      0025EF E6               [12] 6484 	mov	a,@r0
      0025F0 F7               [12] 6485 	mov	@r1,a
      0025F1 A8*00            [24] 6486 	mov	r0,_bp
      0025F3 08               [12] 6487 	inc	r0
      0025F4 86 82            [24] 6488 	mov	dpl,@r0
      0025F6 08               [12] 6489 	inc	r0
      0025F7 86 83            [24] 6490 	mov	dph,@r0
      0025F9 08               [12] 6491 	inc	r0
      0025FA 86 F0            [24] 6492 	mov	b,@r0
      0025FC 12r00r00         [24] 6493 	lcall	__gptrget
      0025FF FA               [12] 6494 	mov	r2,a
      002600 A3               [24] 6495 	inc	dptr
      002601 12r00r00         [24] 6496 	lcall	__gptrget
      002604 FE               [12] 6497 	mov	r6,a
      002605 A3               [24] 6498 	inc	dptr
      002606 12r00r00         [24] 6499 	lcall	__gptrget
      002609 FF               [12] 6500 	mov	r7,a
      00260A E5*00            [12] 6501 	mov	a,_bp
      00260C 24 09            [12] 6502 	add	a,#0x09
      00260E F8               [12] 6503 	mov	r0,a
      00260F E5*00            [12] 6504 	mov	a,_bp
      002611 24 04            [12] 6505 	add	a,#0x04
      002613 F9               [12] 6506 	mov	r1,a
      002614 74 11            [12] 6507 	mov	a,#0x11
      002616 26               [12] 6508 	add	a,@r0
      002617 F7               [12] 6509 	mov	@r1,a
      002618 74 40            [12] 6510 	mov	a,#0x40
      00261A 08               [12] 6511 	inc	r0
      00261B 36               [12] 6512 	addc	a,@r0
      00261C 09               [12] 6513 	inc	r1
      00261D F7               [12] 6514 	mov	@r1,a
      00261E 08               [12] 6515 	inc	r0
      00261F 09               [12] 6516 	inc	r1
      002620 E6               [12] 6517 	mov	a,@r0
      002621 F7               [12] 6518 	mov	@r1,a
      002622 E5*00            [12] 6519 	mov	a,_bp
      002624 24 04            [12] 6520 	add	a,#0x04
      002626 F8               [12] 6521 	mov	r0,a
      002627 86 82            [24] 6522 	mov	dpl,@r0
      002629 08               [12] 6523 	inc	r0
      00262A 86 83            [24] 6524 	mov	dph,@r0
      00262C 08               [12] 6525 	inc	r0
      00262D 86 F0            [24] 6526 	mov	b,@r0
      00262F 12r00r00         [24] 6527 	lcall	__gptrget
      002632 FB               [12] 6528 	mov	r3,a
      002633 A3               [24] 6529 	inc	dptr
      002634 12r00r00         [24] 6530 	lcall	__gptrget
      002637 FC               [12] 6531 	mov	r4,a
      002638 A3               [24] 6532 	inc	dptr
      002639 12r00r00         [24] 6533 	lcall	__gptrget
      00263C FD               [12] 6534 	mov	r5,a
      00263D E5*00            [12] 6535 	mov	a,_bp
      00263F 24 07            [12] 6536 	add	a,#0x07
      002641 F8               [12] 6537 	mov	r0,a
      002642 E6               [12] 6538 	mov	a,@r0
      002643 C0 E0            [24] 6539 	push	acc
      002645 08               [12] 6540 	inc	r0
      002646 E6               [12] 6541 	mov	a,@r0
      002647 C0 E0            [24] 6542 	push	acc
      002649 C0 02            [24] 6543 	push	ar2
      00264B C0 06            [24] 6544 	push	ar6
      00264D C0 07            [24] 6545 	push	ar7
      00264F C0 03            [24] 6546 	push	ar3
      002651 C0 04            [24] 6547 	push	ar4
      002653 C0 05            [24] 6548 	push	ar5
      002655 74rBE            [12] 6549 	mov	a,#___str_14
      002657 C0 E0            [24] 6550 	push	acc
      002659 74s00            [12] 6551 	mov	a,#(___str_14 >> 8)
      00265B C0 E0            [24] 6552 	push	acc
      00265D 74 80            [12] 6553 	mov	a,#0x80
      00265F C0 E0            [24] 6554 	push	acc
      002661 12r00r00         [24] 6555 	lcall	_printf
      002664 E5 81            [12] 6556 	mov	a,sp
      002666 24 F5            [12] 6557 	add	a,#0xf5
      002668 F5 81            [12] 6558 	mov	sp,a
                                   6559 ;	calc.c:356: printstr("ACC\t");
      00266A 90r00rDE         [24] 6560 	mov	dptr,#___str_15
      00266D 75 F0 80         [24] 6561 	mov	b,#0x80
      002670 12r00r00         [24] 6562 	lcall	_printstr
                                   6563 ;	calc.c:357: if (ctx->acc_valid) printall(ctx->acc);
      002673 E5*00            [12] 6564 	mov	a,_bp
      002675 24 09            [12] 6565 	add	a,#0x09
      002677 F8               [12] 6566 	mov	r0,a
      002678 74 06            [12] 6567 	mov	a,#0x06
      00267A 26               [12] 6568 	add	a,@r0
      00267B FD               [12] 6569 	mov	r5,a
      00267C E4               [12] 6570 	clr	a
      00267D 08               [12] 6571 	inc	r0
      00267E 36               [12] 6572 	addc	a,@r0
      00267F FE               [12] 6573 	mov	r6,a
      002680 08               [12] 6574 	inc	r0
      002681 86 07            [24] 6575 	mov	ar7,@r0
      002683 8D 82            [24] 6576 	mov	dpl,r5
      002685 8E 83            [24] 6577 	mov	dph,r6
      002687 8F F0            [24] 6578 	mov	b,r7
      002689 12r00r00         [24] 6579 	lcall	__gptrget
      00268C 70 03            [24] 6580 	jnz	00143$
      00268E 02r27r37         [24] 6581 	ljmp	00102$
      002691                       6582 00143$:
      002691 E5*00            [12] 6583 	mov	a,_bp
      002693 24 09            [12] 6584 	add	a,#0x09
      002695 F8               [12] 6585 	mov	r0,a
      002696 74 02            [12] 6586 	mov	a,#0x02
      002698 26               [12] 6587 	add	a,@r0
      002699 FD               [12] 6588 	mov	r5,a
      00269A E4               [12] 6589 	clr	a
      00269B 08               [12] 6590 	inc	r0
      00269C 36               [12] 6591 	addc	a,@r0
      00269D FE               [12] 6592 	mov	r6,a
      00269E 08               [12] 6593 	inc	r0
      00269F 86 07            [24] 6594 	mov	ar7,@r0
      0026A1 8D 82            [24] 6595 	mov	dpl,r5
      0026A3 8E 83            [24] 6596 	mov	dph,r6
      0026A5 8F F0            [24] 6597 	mov	b,r7
      0026A7 12r00r00         [24] 6598 	lcall	__gptrget
      0026AA FD               [12] 6599 	mov	r5,a
      0026AB A3               [24] 6600 	inc	dptr
      0026AC 12r00r00         [24] 6601 	lcall	__gptrget
      0026AF FE               [12] 6602 	mov	r6,a
      0026B0 A3               [24] 6603 	inc	dptr
      0026B1 12r00r00         [24] 6604 	lcall	__gptrget
      0026B4 FF               [12] 6605 	mov	r7,a
      0026B5 A3               [24] 6606 	inc	dptr
      0026B6 12r00r00         [24] 6607 	lcall	__gptrget
                                   6608 ;	calc.c:18: print32x(d);
      0026B9 FC               [12] 6609 	mov	r4,a
      0026BA 8D 82            [24] 6610 	mov	dpl,r5
      0026BC 8E 83            [24] 6611 	mov	dph,r6
      0026BE 8F F0            [24] 6612 	mov	b,r7
      0026C0 C0 07            [24] 6613 	push	ar7
      0026C2 C0 06            [24] 6614 	push	ar6
      0026C4 C0 05            [24] 6615 	push	ar5
      0026C6 C0 04            [24] 6616 	push	ar4
      0026C8 12r00r00         [24] 6617 	lcall	_print32x
      0026CB D0 04            [24] 6618 	pop	ar4
      0026CD D0 05            [24] 6619 	pop	ar5
      0026CF D0 06            [24] 6620 	pop	ar6
      0026D1 D0 07            [24] 6621 	pop	ar7
                                   6622 ;	calc.c:19: printf("% 11ld\t", d);
      0026D3 C0 07            [24] 6623 	push	ar7
      0026D5 C0 06            [24] 6624 	push	ar6
      0026D7 C0 05            [24] 6625 	push	ar5
      0026D9 C0 04            [24] 6626 	push	ar4
      0026DB C0 05            [24] 6627 	push	ar5
      0026DD C0 06            [24] 6628 	push	ar6
      0026DF C0 07            [24] 6629 	push	ar7
      0026E1 C0 04            [24] 6630 	push	ar4
      0026E3 74r00            [12] 6631 	mov	a,#___str_0
      0026E5 C0 E0            [24] 6632 	push	acc
      0026E7 74s00            [12] 6633 	mov	a,#(___str_0 >> 8)
      0026E9 C0 E0            [24] 6634 	push	acc
      0026EB 74 80            [12] 6635 	mov	a,#0x80
      0026ED C0 E0            [24] 6636 	push	acc
      0026EF 12r00r00         [24] 6637 	lcall	_printf
      0026F2 E5 81            [12] 6638 	mov	a,sp
      0026F4 24 F9            [12] 6639 	add	a,#0xf9
      0026F6 F5 81            [12] 6640 	mov	sp,a
      0026F8 D0 04            [24] 6641 	pop	ar4
      0026FA D0 05            [24] 6642 	pop	ar5
      0026FC D0 06            [24] 6643 	pop	ar6
      0026FE D0 07            [24] 6644 	pop	ar7
                                   6645 ;	calc.c:20: printf("%011lo\t", d);
      002700 C0 07            [24] 6646 	push	ar7
      002702 C0 06            [24] 6647 	push	ar6
      002704 C0 05            [24] 6648 	push	ar5
      002706 C0 04            [24] 6649 	push	ar4
      002708 C0 05            [24] 6650 	push	ar5
      00270A C0 06            [24] 6651 	push	ar6
      00270C C0 07            [24] 6652 	push	ar7
      00270E C0 04            [24] 6653 	push	ar4
      002710 74r08            [12] 6654 	mov	a,#___str_1
      002712 C0 E0            [24] 6655 	push	acc
      002714 74s00            [12] 6656 	mov	a,#(___str_1 >> 8)
      002716 C0 E0            [24] 6657 	push	acc
      002718 74 80            [12] 6658 	mov	a,#0x80
      00271A C0 E0            [24] 6659 	push	acc
      00271C 12r00r00         [24] 6660 	lcall	_printf
      00271F E5 81            [12] 6661 	mov	a,sp
      002721 24 F9            [12] 6662 	add	a,#0xf9
      002723 F5 81            [12] 6663 	mov	sp,a
      002725 D0 04            [24] 6664 	pop	ar4
      002727 D0 05            [24] 6665 	pop	ar5
      002729 D0 06            [24] 6666 	pop	ar6
      00272B D0 07            [24] 6667 	pop	ar7
                                   6668 ;	calc.c:21: print32bin(d);
      00272D 8D 82            [24] 6669 	mov	dpl,r5
      00272F 8E 83            [24] 6670 	mov	dph,r6
      002731 8F F0            [24] 6671 	mov	b,r7
      002733 EC               [12] 6672 	mov	a,r4
      002734 12r00r00         [24] 6673 	lcall	_print32bin
                                   6674 ;	calc.c:357: if (ctx->acc_valid) printall(ctx->acc);
      002737                       6675 00102$:
                                   6676 ;	calc.c:359: n = stack_peek2(ctx->ps, vals);
      002737 E5*00            [12] 6677 	mov	a,_bp
      002739 24 0C            [12] 6678 	add	a,#0x0c
      00273B F9               [12] 6679 	mov	r1,a
      00273C FD               [12] 6680 	mov	r5,a
      00273D 7E 00            [12] 6681 	mov	r6,#0x00
      00273F 7F 40            [12] 6682 	mov	r7,#0x40
      002741 E5*00            [12] 6683 	mov	a,_bp
      002743 24 04            [12] 6684 	add	a,#0x04
      002745 F8               [12] 6685 	mov	r0,a
      002746 86 82            [24] 6686 	mov	dpl,@r0
      002748 08               [12] 6687 	inc	r0
      002749 86 83            [24] 6688 	mov	dph,@r0
      00274B 08               [12] 6689 	inc	r0
      00274C 86 F0            [24] 6690 	mov	b,@r0
      00274E 12r00r00         [24] 6691 	lcall	__gptrget
      002751 FA               [12] 6692 	mov	r2,a
      002752 A3               [24] 6693 	inc	dptr
      002753 12r00r00         [24] 6694 	lcall	__gptrget
      002756 FB               [12] 6695 	mov	r3,a
      002757 A3               [24] 6696 	inc	dptr
      002758 12r00r00         [24] 6697 	lcall	__gptrget
      00275B FC               [12] 6698 	mov	r4,a
      00275C C0 01            [24] 6699 	push	ar1
      00275E C0 05            [24] 6700 	push	ar5
      002760 C0 06            [24] 6701 	push	ar6
      002762 C0 07            [24] 6702 	push	ar7
      002764 8A 82            [24] 6703 	mov	dpl,r2
      002766 8B 83            [24] 6704 	mov	dph,r3
      002768 8C F0            [24] 6705 	mov	b,r4
      00276A 12r00r00         [24] 6706 	lcall	_stack_peek2
      00276D AE 82            [24] 6707 	mov	r6,dpl
      00276F AF 83            [24] 6708 	mov	r7,dph
      002771 15 81            [12] 6709 	dec	sp
      002773 15 81            [12] 6710 	dec	sp
      002775 15 81            [12] 6711 	dec	sp
      002777 D0 01            [24] 6712 	pop	ar1
                                   6713 ;	calc.c:360: printstr("\r\nPSTOP1\t");
      002779 90r00rE3         [24] 6714 	mov	dptr,#___str_16
      00277C 75 F0 80         [24] 6715 	mov	b,#0x80
      00277F C0 07            [24] 6716 	push	ar7
      002781 C0 06            [24] 6717 	push	ar6
      002783 C0 01            [24] 6718 	push	ar1
      002785 12r00r00         [24] 6719 	lcall	_printstr
      002788 D0 01            [24] 6720 	pop	ar1
      00278A D0 06            [24] 6721 	pop	ar6
      00278C D0 07            [24] 6722 	pop	ar7
                                   6723 ;	calc.c:361: if (n > 0) printall(vals[1]);
      00278E C3               [12] 6724 	clr	c
      00278F E4               [12] 6725 	clr	a
      002790 9E               [12] 6726 	subb	a,r6
      002791 74 80            [12] 6727 	mov	a,#(0x00 ^ 0x80)
      002793 8F F0            [24] 6728 	mov	b,r7
      002795 63 F0 80         [24] 6729 	xrl	b,#0x80
      002798 95 F0            [12] 6730 	subb	a,b
      00279A 40 03            [24] 6731 	jc	00144$
      00279C 02r28r44         [24] 6732 	ljmp	00104$
      00279F                       6733 00144$:
      00279F 74 04            [12] 6734 	mov	a,#0x04
      0027A1 29               [12] 6735 	add	a,r1
      0027A2 F8               [12] 6736 	mov	r0,a
      0027A3 86 02            [24] 6737 	mov	ar2,@r0
      0027A5 08               [12] 6738 	inc	r0
      0027A6 86 03            [24] 6739 	mov	ar3,@r0
      0027A8 08               [12] 6740 	inc	r0
      0027A9 86 04            [24] 6741 	mov	ar4,@r0
      0027AB 08               [12] 6742 	inc	r0
      0027AC 86 05            [24] 6743 	mov	ar5,@r0
                                   6744 ;	calc.c:18: print32x(d);
      0027AE 8A 82            [24] 6745 	mov	dpl,r2
      0027B0 8B 83            [24] 6746 	mov	dph,r3
      0027B2 8C F0            [24] 6747 	mov	b,r4
      0027B4 ED               [12] 6748 	mov	a,r5
      0027B5 C0 07            [24] 6749 	push	ar7
      0027B7 C0 06            [24] 6750 	push	ar6
      0027B9 C0 05            [24] 6751 	push	ar5
      0027BB C0 04            [24] 6752 	push	ar4
      0027BD C0 03            [24] 6753 	push	ar3
      0027BF C0 02            [24] 6754 	push	ar2
      0027C1 C0 01            [24] 6755 	push	ar1
      0027C3 12r00r00         [24] 6756 	lcall	_print32x
      0027C6 D0 01            [24] 6757 	pop	ar1
      0027C8 D0 02            [24] 6758 	pop	ar2
      0027CA D0 03            [24] 6759 	pop	ar3
      0027CC D0 04            [24] 6760 	pop	ar4
      0027CE D0 05            [24] 6761 	pop	ar5
                                   6762 ;	calc.c:19: printf("% 11ld\t", d);
      0027D0 C0 05            [24] 6763 	push	ar5
      0027D2 C0 04            [24] 6764 	push	ar4
      0027D4 C0 03            [24] 6765 	push	ar3
      0027D6 C0 02            [24] 6766 	push	ar2
      0027D8 C0 01            [24] 6767 	push	ar1
      0027DA C0 02            [24] 6768 	push	ar2
      0027DC C0 03            [24] 6769 	push	ar3
      0027DE C0 04            [24] 6770 	push	ar4
      0027E0 C0 05            [24] 6771 	push	ar5
      0027E2 74r00            [12] 6772 	mov	a,#___str_0
      0027E4 C0 E0            [24] 6773 	push	acc
      0027E6 74s00            [12] 6774 	mov	a,#(___str_0 >> 8)
      0027E8 C0 E0            [24] 6775 	push	acc
      0027EA 74 80            [12] 6776 	mov	a,#0x80
      0027EC C0 E0            [24] 6777 	push	acc
      0027EE 12r00r00         [24] 6778 	lcall	_printf
      0027F1 E5 81            [12] 6779 	mov	a,sp
      0027F3 24 F9            [12] 6780 	add	a,#0xf9
      0027F5 F5 81            [12] 6781 	mov	sp,a
      0027F7 D0 01            [24] 6782 	pop	ar1
      0027F9 D0 02            [24] 6783 	pop	ar2
      0027FB D0 03            [24] 6784 	pop	ar3
      0027FD D0 04            [24] 6785 	pop	ar4
      0027FF D0 05            [24] 6786 	pop	ar5
                                   6787 ;	calc.c:20: printf("%011lo\t", d);
      002801 C0 05            [24] 6788 	push	ar5
      002803 C0 04            [24] 6789 	push	ar4
      002805 C0 03            [24] 6790 	push	ar3
      002807 C0 02            [24] 6791 	push	ar2
      002809 C0 01            [24] 6792 	push	ar1
      00280B C0 02            [24] 6793 	push	ar2
      00280D C0 03            [24] 6794 	push	ar3
      00280F C0 04            [24] 6795 	push	ar4
      002811 C0 05            [24] 6796 	push	ar5
      002813 74r08            [12] 6797 	mov	a,#___str_1
      002815 C0 E0            [24] 6798 	push	acc
      002817 74s00            [12] 6799 	mov	a,#(___str_1 >> 8)
      002819 C0 E0            [24] 6800 	push	acc
      00281B 74 80            [12] 6801 	mov	a,#0x80
      00281D C0 E0            [24] 6802 	push	acc
      00281F 12r00r00         [24] 6803 	lcall	_printf
      002822 E5 81            [12] 6804 	mov	a,sp
      002824 24 F9            [12] 6805 	add	a,#0xf9
      002826 F5 81            [12] 6806 	mov	sp,a
      002828 D0 01            [24] 6807 	pop	ar1
      00282A D0 02            [24] 6808 	pop	ar2
      00282C D0 03            [24] 6809 	pop	ar3
      00282E D0 04            [24] 6810 	pop	ar4
      002830 D0 05            [24] 6811 	pop	ar5
                                   6812 ;	calc.c:21: print32bin(d);
      002832 8A 82            [24] 6813 	mov	dpl,r2
      002834 8B 83            [24] 6814 	mov	dph,r3
      002836 8C F0            [24] 6815 	mov	b,r4
      002838 ED               [12] 6816 	mov	a,r5
      002839 C0 01            [24] 6817 	push	ar1
      00283B 12r00r00         [24] 6818 	lcall	_print32bin
      00283E D0 01            [24] 6819 	pop	ar1
      002840 D0 06            [24] 6820 	pop	ar6
      002842 D0 07            [24] 6821 	pop	ar7
                                   6822 ;	calc.c:361: if (n > 0) printall(vals[1]);
      002844                       6823 00104$:
                                   6824 ;	calc.c:362: printstr("\r\nPSTOP0\t");
      002844 90r00rED         [24] 6825 	mov	dptr,#___str_17
      002847 75 F0 80         [24] 6826 	mov	b,#0x80
      00284A C0 07            [24] 6827 	push	ar7
      00284C C0 06            [24] 6828 	push	ar6
      00284E C0 01            [24] 6829 	push	ar1
      002850 12r00r00         [24] 6830 	lcall	_printstr
      002853 D0 01            [24] 6831 	pop	ar1
      002855 D0 06            [24] 6832 	pop	ar6
      002857 D0 07            [24] 6833 	pop	ar7
                                   6834 ;	calc.c:363: if (n > 1) printall(vals[0]);
      002859 C3               [12] 6835 	clr	c
      00285A 74 01            [12] 6836 	mov	a,#0x01
      00285C 9E               [12] 6837 	subb	a,r6
      00285D 74 80            [12] 6838 	mov	a,#(0x00 ^ 0x80)
      00285F 8F F0            [24] 6839 	mov	b,r7
      002861 63 F0 80         [24] 6840 	xrl	b,#0x80
      002864 95 F0            [12] 6841 	subb	a,b
      002866 40 03            [24] 6842 	jc	00145$
      002868 02r29r07         [24] 6843 	ljmp	00106$
      00286B                       6844 00145$:
      00286B 87 04            [24] 6845 	mov	ar4,@r1
      00286D 09               [12] 6846 	inc	r1
      00286E 87 05            [24] 6847 	mov	ar5,@r1
      002870 09               [12] 6848 	inc	r1
      002871 87 06            [24] 6849 	mov	ar6,@r1
      002873 09               [12] 6850 	inc	r1
      002874 87 07            [24] 6851 	mov	ar7,@r1
      002876 19               [12] 6852 	dec	r1
      002877 19               [12] 6853 	dec	r1
      002878 19               [12] 6854 	dec	r1
                                   6855 ;	calc.c:18: print32x(d);
      002879 8C 82            [24] 6856 	mov	dpl,r4
      00287B 8D 83            [24] 6857 	mov	dph,r5
      00287D 8E F0            [24] 6858 	mov	b,r6
      00287F EF               [12] 6859 	mov	a,r7
      002880 C0 07            [24] 6860 	push	ar7
      002882 C0 06            [24] 6861 	push	ar6
      002884 C0 05            [24] 6862 	push	ar5
      002886 C0 04            [24] 6863 	push	ar4
      002888 C0 01            [24] 6864 	push	ar1
      00288A 12r00r00         [24] 6865 	lcall	_print32x
      00288D D0 01            [24] 6866 	pop	ar1
      00288F D0 04            [24] 6867 	pop	ar4
      002891 D0 05            [24] 6868 	pop	ar5
      002893 D0 06            [24] 6869 	pop	ar6
      002895 D0 07            [24] 6870 	pop	ar7
                                   6871 ;	calc.c:19: printf("% 11ld\t", d);
      002897 C0 07            [24] 6872 	push	ar7
      002899 C0 06            [24] 6873 	push	ar6
      00289B C0 05            [24] 6874 	push	ar5
      00289D C0 04            [24] 6875 	push	ar4
      00289F C0 01            [24] 6876 	push	ar1
      0028A1 C0 04            [24] 6877 	push	ar4
      0028A3 C0 05            [24] 6878 	push	ar5
      0028A5 C0 06            [24] 6879 	push	ar6
      0028A7 C0 07            [24] 6880 	push	ar7
      0028A9 74r00            [12] 6881 	mov	a,#___str_0
      0028AB C0 E0            [24] 6882 	push	acc
      0028AD 74s00            [12] 6883 	mov	a,#(___str_0 >> 8)
      0028AF C0 E0            [24] 6884 	push	acc
      0028B1 74 80            [12] 6885 	mov	a,#0x80
      0028B3 C0 E0            [24] 6886 	push	acc
      0028B5 12r00r00         [24] 6887 	lcall	_printf
      0028B8 E5 81            [12] 6888 	mov	a,sp
      0028BA 24 F9            [12] 6889 	add	a,#0xf9
      0028BC F5 81            [12] 6890 	mov	sp,a
      0028BE D0 01            [24] 6891 	pop	ar1
      0028C0 D0 04            [24] 6892 	pop	ar4
      0028C2 D0 05            [24] 6893 	pop	ar5
      0028C4 D0 06            [24] 6894 	pop	ar6
      0028C6 D0 07            [24] 6895 	pop	ar7
                                   6896 ;	calc.c:20: printf("%011lo\t", d);
      0028C8 C0 07            [24] 6897 	push	ar7
      0028CA C0 06            [24] 6898 	push	ar6
      0028CC C0 05            [24] 6899 	push	ar5
      0028CE C0 04            [24] 6900 	push	ar4
      0028D0 C0 01            [24] 6901 	push	ar1
      0028D2 C0 04            [24] 6902 	push	ar4
      0028D4 C0 05            [24] 6903 	push	ar5
      0028D6 C0 06            [24] 6904 	push	ar6
      0028D8 C0 07            [24] 6905 	push	ar7
      0028DA 74r08            [12] 6906 	mov	a,#___str_1
      0028DC C0 E0            [24] 6907 	push	acc
      0028DE 74s00            [12] 6908 	mov	a,#(___str_1 >> 8)
      0028E0 C0 E0            [24] 6909 	push	acc
      0028E2 74 80            [12] 6910 	mov	a,#0x80
      0028E4 C0 E0            [24] 6911 	push	acc
      0028E6 12r00r00         [24] 6912 	lcall	_printf
      0028E9 E5 81            [12] 6913 	mov	a,sp
      0028EB 24 F9            [12] 6914 	add	a,#0xf9
      0028ED F5 81            [12] 6915 	mov	sp,a
      0028EF D0 01            [24] 6916 	pop	ar1
      0028F1 D0 04            [24] 6917 	pop	ar4
      0028F3 D0 05            [24] 6918 	pop	ar5
      0028F5 D0 06            [24] 6919 	pop	ar6
      0028F7 D0 07            [24] 6920 	pop	ar7
                                   6921 ;	calc.c:21: print32bin(d);
      0028F9 8C 82            [24] 6922 	mov	dpl,r4
      0028FB 8D 83            [24] 6923 	mov	dph,r5
      0028FD 8E F0            [24] 6924 	mov	b,r6
      0028FF EF               [12] 6925 	mov	a,r7
      002900 C0 01            [24] 6926 	push	ar1
      002902 12r00r00         [24] 6927 	lcall	_print32bin
      002905 D0 01            [24] 6928 	pop	ar1
                                   6929 ;	calc.c:363: if (n > 1) printall(vals[0]);
      002907                       6930 00106$:
                                   6931 ;	calc.c:365: n = stack_peek2(ctx->ss, vals);
      002907 89 07            [24] 6932 	mov	ar7,r1
      002909 7E 00            [12] 6933 	mov	r6,#0x00
      00290B 7D 40            [12] 6934 	mov	r5,#0x40
      00290D A8*00            [24] 6935 	mov	r0,_bp
      00290F 08               [12] 6936 	inc	r0
      002910 86 82            [24] 6937 	mov	dpl,@r0
      002912 08               [12] 6938 	inc	r0
      002913 86 83            [24] 6939 	mov	dph,@r0
      002915 08               [12] 6940 	inc	r0
      002916 86 F0            [24] 6941 	mov	b,@r0
      002918 12r00r00         [24] 6942 	lcall	__gptrget
      00291B FA               [12] 6943 	mov	r2,a
      00291C A3               [24] 6944 	inc	dptr
      00291D 12r00r00         [24] 6945 	lcall	__gptrget
      002920 FB               [12] 6946 	mov	r3,a
      002921 A3               [24] 6947 	inc	dptr
      002922 12r00r00         [24] 6948 	lcall	__gptrget
      002925 FC               [12] 6949 	mov	r4,a
      002926 C0 01            [24] 6950 	push	ar1
      002928 C0 07            [24] 6951 	push	ar7
      00292A C0 06            [24] 6952 	push	ar6
      00292C C0 05            [24] 6953 	push	ar5
      00292E 8A 82            [24] 6954 	mov	dpl,r2
      002930 8B 83            [24] 6955 	mov	dph,r3
      002932 8C F0            [24] 6956 	mov	b,r4
      002934 12r00r00         [24] 6957 	lcall	_stack_peek2
      002937 AE 82            [24] 6958 	mov	r6,dpl
      002939 AF 83            [24] 6959 	mov	r7,dph
      00293B 15 81            [12] 6960 	dec	sp
      00293D 15 81            [12] 6961 	dec	sp
      00293F 15 81            [12] 6962 	dec	sp
      002941 D0 01            [24] 6963 	pop	ar1
                                   6964 ;	calc.c:366: printstr("\r\nSSTOP1\t");
      002943 90r00rF7         [24] 6965 	mov	dptr,#___str_18
      002946 75 F0 80         [24] 6966 	mov	b,#0x80
      002949 C0 07            [24] 6967 	push	ar7
      00294B C0 06            [24] 6968 	push	ar6
      00294D C0 01            [24] 6969 	push	ar1
      00294F 12r00r00         [24] 6970 	lcall	_printstr
      002952 D0 01            [24] 6971 	pop	ar1
      002954 D0 06            [24] 6972 	pop	ar6
      002956 D0 07            [24] 6973 	pop	ar7
                                   6974 ;	calc.c:367: if (n > 0) printall(vals[1]);
      002958 C3               [12] 6975 	clr	c
      002959 E4               [12] 6976 	clr	a
      00295A 9E               [12] 6977 	subb	a,r6
      00295B 74 80            [12] 6978 	mov	a,#(0x00 ^ 0x80)
      00295D 8F F0            [24] 6979 	mov	b,r7
      00295F 63 F0 80         [24] 6980 	xrl	b,#0x80
      002962 95 F0            [12] 6981 	subb	a,b
      002964 40 03            [24] 6982 	jc	00146$
      002966 02r2Ar0E         [24] 6983 	ljmp	00108$
      002969                       6984 00146$:
      002969 74 04            [12] 6985 	mov	a,#0x04
      00296B 29               [12] 6986 	add	a,r1
      00296C F8               [12] 6987 	mov	r0,a
      00296D 86 02            [24] 6988 	mov	ar2,@r0
      00296F 08               [12] 6989 	inc	r0
      002970 86 03            [24] 6990 	mov	ar3,@r0
      002972 08               [12] 6991 	inc	r0
      002973 86 04            [24] 6992 	mov	ar4,@r0
      002975 08               [12] 6993 	inc	r0
      002976 86 05            [24] 6994 	mov	ar5,@r0
                                   6995 ;	calc.c:18: print32x(d);
      002978 8A 82            [24] 6996 	mov	dpl,r2
      00297A 8B 83            [24] 6997 	mov	dph,r3
      00297C 8C F0            [24] 6998 	mov	b,r4
      00297E ED               [12] 6999 	mov	a,r5
      00297F C0 07            [24] 7000 	push	ar7
      002981 C0 06            [24] 7001 	push	ar6
      002983 C0 05            [24] 7002 	push	ar5
      002985 C0 04            [24] 7003 	push	ar4
      002987 C0 03            [24] 7004 	push	ar3
      002989 C0 02            [24] 7005 	push	ar2
      00298B C0 01            [24] 7006 	push	ar1
      00298D 12r00r00         [24] 7007 	lcall	_print32x
      002990 D0 01            [24] 7008 	pop	ar1
      002992 D0 02            [24] 7009 	pop	ar2
      002994 D0 03            [24] 7010 	pop	ar3
      002996 D0 04            [24] 7011 	pop	ar4
      002998 D0 05            [24] 7012 	pop	ar5
                                   7013 ;	calc.c:19: printf("% 11ld\t", d);
      00299A C0 05            [24] 7014 	push	ar5
      00299C C0 04            [24] 7015 	push	ar4
      00299E C0 03            [24] 7016 	push	ar3
      0029A0 C0 02            [24] 7017 	push	ar2
      0029A2 C0 01            [24] 7018 	push	ar1
      0029A4 C0 02            [24] 7019 	push	ar2
      0029A6 C0 03            [24] 7020 	push	ar3
      0029A8 C0 04            [24] 7021 	push	ar4
      0029AA C0 05            [24] 7022 	push	ar5
      0029AC 74r00            [12] 7023 	mov	a,#___str_0
      0029AE C0 E0            [24] 7024 	push	acc
      0029B0 74s00            [12] 7025 	mov	a,#(___str_0 >> 8)
      0029B2 C0 E0            [24] 7026 	push	acc
      0029B4 74 80            [12] 7027 	mov	a,#0x80
      0029B6 C0 E0            [24] 7028 	push	acc
      0029B8 12r00r00         [24] 7029 	lcall	_printf
      0029BB E5 81            [12] 7030 	mov	a,sp
      0029BD 24 F9            [12] 7031 	add	a,#0xf9
      0029BF F5 81            [12] 7032 	mov	sp,a
      0029C1 D0 01            [24] 7033 	pop	ar1
      0029C3 D0 02            [24] 7034 	pop	ar2
      0029C5 D0 03            [24] 7035 	pop	ar3
      0029C7 D0 04            [24] 7036 	pop	ar4
      0029C9 D0 05            [24] 7037 	pop	ar5
                                   7038 ;	calc.c:20: printf("%011lo\t", d);
      0029CB C0 05            [24] 7039 	push	ar5
      0029CD C0 04            [24] 7040 	push	ar4
      0029CF C0 03            [24] 7041 	push	ar3
      0029D1 C0 02            [24] 7042 	push	ar2
      0029D3 C0 01            [24] 7043 	push	ar1
      0029D5 C0 02            [24] 7044 	push	ar2
      0029D7 C0 03            [24] 7045 	push	ar3
      0029D9 C0 04            [24] 7046 	push	ar4
      0029DB C0 05            [24] 7047 	push	ar5
      0029DD 74r08            [12] 7048 	mov	a,#___str_1
      0029DF C0 E0            [24] 7049 	push	acc
      0029E1 74s00            [12] 7050 	mov	a,#(___str_1 >> 8)
      0029E3 C0 E0            [24] 7051 	push	acc
      0029E5 74 80            [12] 7052 	mov	a,#0x80
      0029E7 C0 E0            [24] 7053 	push	acc
      0029E9 12r00r00         [24] 7054 	lcall	_printf
      0029EC E5 81            [12] 7055 	mov	a,sp
      0029EE 24 F9            [12] 7056 	add	a,#0xf9
      0029F0 F5 81            [12] 7057 	mov	sp,a
      0029F2 D0 01            [24] 7058 	pop	ar1
      0029F4 D0 02            [24] 7059 	pop	ar2
      0029F6 D0 03            [24] 7060 	pop	ar3
      0029F8 D0 04            [24] 7061 	pop	ar4
      0029FA D0 05            [24] 7062 	pop	ar5
                                   7063 ;	calc.c:21: print32bin(d);
      0029FC 8A 82            [24] 7064 	mov	dpl,r2
      0029FE 8B 83            [24] 7065 	mov	dph,r3
      002A00 8C F0            [24] 7066 	mov	b,r4
      002A02 ED               [12] 7067 	mov	a,r5
      002A03 C0 01            [24] 7068 	push	ar1
      002A05 12r00r00         [24] 7069 	lcall	_print32bin
      002A08 D0 01            [24] 7070 	pop	ar1
      002A0A D0 06            [24] 7071 	pop	ar6
      002A0C D0 07            [24] 7072 	pop	ar7
                                   7073 ;	calc.c:367: if (n > 0) printall(vals[1]);
      002A0E                       7074 00108$:
                                   7075 ;	calc.c:368: printstr("\r\nSSTOP0\t");
      002A0E 90r01r01         [24] 7076 	mov	dptr,#___str_19
      002A11 75 F0 80         [24] 7077 	mov	b,#0x80
      002A14 C0 07            [24] 7078 	push	ar7
      002A16 C0 06            [24] 7079 	push	ar6
      002A18 C0 01            [24] 7080 	push	ar1
      002A1A 12r00r00         [24] 7081 	lcall	_printstr
      002A1D D0 01            [24] 7082 	pop	ar1
      002A1F D0 06            [24] 7083 	pop	ar6
      002A21 D0 07            [24] 7084 	pop	ar7
                                   7085 ;	calc.c:369: if (n > 1) printall(vals[0]);
      002A23 C3               [12] 7086 	clr	c
      002A24 74 01            [12] 7087 	mov	a,#0x01
      002A26 9E               [12] 7088 	subb	a,r6
      002A27 74 80            [12] 7089 	mov	a,#(0x00 ^ 0x80)
      002A29 8F F0            [24] 7090 	mov	b,r7
      002A2B 63 F0 80         [24] 7091 	xrl	b,#0x80
      002A2E 95 F0            [12] 7092 	subb	a,b
      002A30 40 03            [24] 7093 	jc	00147$
      002A32 02r2ArBE         [24] 7094 	ljmp	00110$
      002A35                       7095 00147$:
      002A35 87 04            [24] 7096 	mov	ar4,@r1
      002A37 09               [12] 7097 	inc	r1
      002A38 87 05            [24] 7098 	mov	ar5,@r1
      002A3A 09               [12] 7099 	inc	r1
      002A3B 87 06            [24] 7100 	mov	ar6,@r1
      002A3D 09               [12] 7101 	inc	r1
      002A3E 87 07            [24] 7102 	mov	ar7,@r1
                                   7103 ;	calc.c:18: print32x(d);
      002A40 8C 82            [24] 7104 	mov	dpl,r4
      002A42 8D 83            [24] 7105 	mov	dph,r5
      002A44 8E F0            [24] 7106 	mov	b,r6
      002A46 EF               [12] 7107 	mov	a,r7
      002A47 C0 07            [24] 7108 	push	ar7
      002A49 C0 06            [24] 7109 	push	ar6
      002A4B C0 05            [24] 7110 	push	ar5
      002A4D C0 04            [24] 7111 	push	ar4
      002A4F 12r00r00         [24] 7112 	lcall	_print32x
      002A52 D0 04            [24] 7113 	pop	ar4
      002A54 D0 05            [24] 7114 	pop	ar5
      002A56 D0 06            [24] 7115 	pop	ar6
      002A58 D0 07            [24] 7116 	pop	ar7
                                   7117 ;	calc.c:19: printf("% 11ld\t", d);
      002A5A C0 07            [24] 7118 	push	ar7
      002A5C C0 06            [24] 7119 	push	ar6
      002A5E C0 05            [24] 7120 	push	ar5
      002A60 C0 04            [24] 7121 	push	ar4
      002A62 C0 04            [24] 7122 	push	ar4
      002A64 C0 05            [24] 7123 	push	ar5
      002A66 C0 06            [24] 7124 	push	ar6
      002A68 C0 07            [24] 7125 	push	ar7
      002A6A 74r00            [12] 7126 	mov	a,#___str_0
      002A6C C0 E0            [24] 7127 	push	acc
      002A6E 74s00            [12] 7128 	mov	a,#(___str_0 >> 8)
      002A70 C0 E0            [24] 7129 	push	acc
      002A72 74 80            [12] 7130 	mov	a,#0x80
      002A74 C0 E0            [24] 7131 	push	acc
      002A76 12r00r00         [24] 7132 	lcall	_printf
      002A79 E5 81            [12] 7133 	mov	a,sp
      002A7B 24 F9            [12] 7134 	add	a,#0xf9
      002A7D F5 81            [12] 7135 	mov	sp,a
      002A7F D0 04            [24] 7136 	pop	ar4
      002A81 D0 05            [24] 7137 	pop	ar5
      002A83 D0 06            [24] 7138 	pop	ar6
      002A85 D0 07            [24] 7139 	pop	ar7
                                   7140 ;	calc.c:20: printf("%011lo\t", d);
      002A87 C0 07            [24] 7141 	push	ar7
      002A89 C0 06            [24] 7142 	push	ar6
      002A8B C0 05            [24] 7143 	push	ar5
      002A8D C0 04            [24] 7144 	push	ar4
      002A8F C0 04            [24] 7145 	push	ar4
      002A91 C0 05            [24] 7146 	push	ar5
      002A93 C0 06            [24] 7147 	push	ar6
      002A95 C0 07            [24] 7148 	push	ar7
      002A97 74r08            [12] 7149 	mov	a,#___str_1
      002A99 C0 E0            [24] 7150 	push	acc
      002A9B 74s00            [12] 7151 	mov	a,#(___str_1 >> 8)
      002A9D C0 E0            [24] 7152 	push	acc
      002A9F 74 80            [12] 7153 	mov	a,#0x80
      002AA1 C0 E0            [24] 7154 	push	acc
      002AA3 12r00r00         [24] 7155 	lcall	_printf
      002AA6 E5 81            [12] 7156 	mov	a,sp
      002AA8 24 F9            [12] 7157 	add	a,#0xf9
      002AAA F5 81            [12] 7158 	mov	sp,a
      002AAC D0 04            [24] 7159 	pop	ar4
      002AAE D0 05            [24] 7160 	pop	ar5
      002AB0 D0 06            [24] 7161 	pop	ar6
      002AB2 D0 07            [24] 7162 	pop	ar7
                                   7163 ;	calc.c:21: print32bin(d);
      002AB4 8C 82            [24] 7164 	mov	dpl,r4
      002AB6 8D 83            [24] 7165 	mov	dph,r5
      002AB8 8E F0            [24] 7166 	mov	b,r6
      002ABA EF               [12] 7167 	mov	a,r7
      002ABB 12r00r00         [24] 7168 	lcall	_print32bin
                                   7169 ;	calc.c:369: if (n > 1) printall(vals[0]);
      002ABE                       7170 00110$:
                                   7171 ;	calc.c:370: printstr("\r\n");
      002ABE 90r00r10         [24] 7172 	mov	dptr,#___str_2
      002AC1 75 F0 80         [24] 7173 	mov	b,#0x80
      002AC4 12r00r00         [24] 7174 	lcall	_printstr
                                   7175 ;	calc.c:372: return 1;
      002AC7 90 00 01         [24] 7176 	mov	dptr,#0x0001
                                   7177 ;	calc.c:373: }
      002ACA 85*00 81         [24] 7178 	mov	sp,_bp
      002ACD D0*00            [24] 7179 	pop	_bp
      002ACF 22               [24] 7180 	ret
                                   7181 ;------------------------------------------------------------
                                   7182 ;Allocation info for local variables in function 'help'
                                   7183 ;------------------------------------------------------------
                                   7184 ;delta                     Allocated to stack - _bp -5
                                   7185 ;_ctx                      Allocated to registers 
                                   7186 ;------------------------------------------------------------
                                   7187 ;	calc.c:375: static int help(void *_ctx, delta_t *delta) __reentrant {
                                   7188 ;	-----------------------------------------
                                   7189 ;	 function help
                                   7190 ;	-----------------------------------------
      002AD0                       7191 _help:
      002AD0 C0*00            [24] 7192 	push	_bp
      002AD2 85 81*00         [24] 7193 	mov	_bp,sp
                                   7194 ;	calc.c:379: printstr("\r\nHhOo\tbase 16 10 8 2\r\n");
      002AD5 90r01r0B         [24] 7195 	mov	dptr,#___str_20
      002AD8 75 F0 80         [24] 7196 	mov	b,#0x80
      002ADB 12r00r00         [24] 7197 	lcall	_printstr
                                   7198 ;	calc.c:380: printstr("p.\tpop top\r\n");
      002ADE 90r01r23         [24] 7199 	mov	dptr,#___str_21
      002AE1 75 F0 80         [24] 7200 	mov	b,#0x80
      002AE4 12r00r00         [24] 7201 	lcall	_printstr
                                   7202 ;	calc.c:381: printstr("P\tpop stack\r\n");
      002AE7 90r01r30         [24] 7203 	mov	dptr,#___str_22
      002AEA 75 F0 80         [24] 7204 	mov	b,#0x80
      002AED 12r00r00         [24] 7205 	lcall	_printstr
                                   7206 ;	calc.c:382: printstr("v\tpeek top\r\n");
      002AF0 90r01r3E         [24] 7207 	mov	dptr,#___str_23
      002AF3 75 F0 80         [24] 7208 	mov	b,#0x80
      002AF6 12r00r00         [24] 7209 	lcall	_printstr
                                   7210 ;	calc.c:383: printstr("V\tpeek stack\r\n");
      002AF9 90r01r4B         [24] 7211 	mov	dptr,#___str_24
      002AFC 75 F0 80         [24] 7212 	mov	b,#0x80
      002AFF 12r00r00         [24] 7213 	lcall	_printstr
                                   7214 ;	calc.c:384: printstr("i\treset acc\r\n");
      002B02 90r01r5A         [24] 7215 	mov	dptr,#___str_25
      002B05 75 F0 80         [24] 7216 	mov	b,#0x80
      002B08 12r00r00         [24] 7217 	lcall	_printstr
                                   7218 ;	calc.c:385: printstr("I\treset and discard acc\r\n");
      002B0B 90r01r68         [24] 7219 	mov	dptr,#___str_26
      002B0E 75 F0 80         [24] 7220 	mov	b,#0x80
      002B11 12r00r00         [24] 7221 	lcall	_printstr
                                   7222 ;	calc.c:386: printstr("x\texchange top 2\r\n");
      002B14 90r01r82         [24] 7223 	mov	dptr,#___str_27
      002B17 75 F0 80         [24] 7224 	mov	b,#0x80
      002B1A 12r00r00         [24] 7225 	lcall	_printstr
                                   7226 ;	calc.c:387: printstr("X\texchange stacks primary <-> secondary\r\n");
      002B1D 90r01r95         [24] 7227 	mov	dptr,#___str_28
      002B20 75 F0 80         [24] 7228 	mov	b,#0x80
      002B23 12r00r00         [24] 7229 	lcall	_printstr
                                   7230 ;	calc.c:388: printstr("T\texchange tops primary <-> secondary\r\n");
      002B26 90r01rBF         [24] 7231 	mov	dptr,#___str_29
      002B29 75 F0 80         [24] 7232 	mov	b,#0x80
      002B2C 12r00r00         [24] 7233 	lcall	_printstr
                                   7234 ;	calc.c:389: printstr("U\tcopy top secondary -> primary\r\n");
      002B2F 90r01rE7         [24] 7235 	mov	dptr,#___str_30
      002B32 75 F0 80         [24] 7236 	mov	b,#0x80
      002B35 12r00r00         [24] 7237 	lcall	_printstr
                                   7238 ;	calc.c:390: printstr("u\tcopy top primary -> secondary\r\n");
      002B38 90r02r09         [24] 7239 	mov	dptr,#___str_31
      002B3B 75 F0 80         [24] 7240 	mov	b,#0x80
      002B3E 12r00r00         [24] 7241 	lcall	_printstr
                                   7242 ;	calc.c:391: printstr("M\tmove top secondary -> primary\r\n");
      002B41 90r02r2B         [24] 7243 	mov	dptr,#___str_32
      002B44 75 F0 80         [24] 7244 	mov	b,#0x80
      002B47 12r00r00         [24] 7245 	lcall	_printstr
                                   7246 ;	calc.c:392: printstr("m\tmove top primary -> secondary\r\n");
      002B4A 90r02r4D         [24] 7247 	mov	dptr,#___str_33
      002B4D 75 F0 80         [24] 7248 	mov	b,#0x80
      002B50 12r00r00         [24] 7249 	lcall	_printstr
                                   7250 ;	calc.c:393: printstr("+\tadd top 2\r\n");
      002B53 90r02r6F         [24] 7251 	mov	dptr,#___str_34
      002B56 75 F0 80         [24] 7252 	mov	b,#0x80
      002B59 12r00r00         [24] 7253 	lcall	_printstr
                                   7254 ;	calc.c:394: printstr("-\tsubtract top 2\r\n");
      002B5C 90r02r7D         [24] 7255 	mov	dptr,#___str_35
      002B5F 75 F0 80         [24] 7256 	mov	b,#0x80
      002B62 12r00r00         [24] 7257 	lcall	_printstr
                                   7258 ;	calc.c:395: printstr("*\tmultiply top 2\r\n");
      002B65 90r02r90         [24] 7259 	mov	dptr,#___str_36
      002B68 75 F0 80         [24] 7260 	mov	b,#0x80
      002B6B 12r00r00         [24] 7261 	lcall	_printstr
                                   7262 ;	calc.c:396: printstr("/\tdivide top 2\r\n");
      002B6E 90r02rA3         [24] 7263 	mov	dptr,#___str_37
      002B71 75 F0 80         [24] 7264 	mov	b,#0x80
      002B74 12r00r00         [24] 7265 	lcall	_printstr
                                   7266 ;	calc.c:397: printstr("\\\tdivide top 2 unsigned\r\n");	
      002B77 90r02rB4         [24] 7267 	mov	dptr,#___str_38
      002B7A 75 F0 80         [24] 7268 	mov	b,#0x80
      002B7D 12r00r00         [24] 7269 	lcall	_printstr
                                   7270 ;	calc.c:398: printstr("%\tmodulus top 2\r\n");
      002B80 90r02rCE         [24] 7271 	mov	dptr,#___str_39
      002B83 75 F0 80         [24] 7272 	mov	b,#0x80
      002B86 12r00r00         [24] 7273 	lcall	_printstr
                                   7274 ;	calc.c:399: printstr("#\tmodulus top 2 unsigned\r\n");
      002B89 90r02rE0         [24] 7275 	mov	dptr,#___str_40
      002B8C 75 F0 80         [24] 7276 	mov	b,#0x80
      002B8F 12r00r00         [24] 7277 	lcall	_printstr
                                   7278 ;	calc.c:400: printstr("&\tand top 2\r\n");
      002B92 90r02rFB         [24] 7279 	mov	dptr,#___str_41
      002B95 75 F0 80         [24] 7280 	mov	b,#0x80
      002B98 12r00r00         [24] 7281 	lcall	_printstr
                                   7282 ;	calc.c:401: printstr("|\tor top 2\r\n");
      002B9B 90r03r09         [24] 7283 	mov	dptr,#___str_42
      002B9E 75 F0 80         [24] 7284 	mov	b,#0x80
      002BA1 12r00r00         [24] 7285 	lcall	_printstr
                                   7286 ;	calc.c:402: printstr("^\txor top 2\r\n");
      002BA4 90r03r16         [24] 7287 	mov	dptr,#___str_43
      002BA7 75 F0 80         [24] 7288 	mov	b,#0x80
      002BAA 12r00r00         [24] 7289 	lcall	_printstr
                                   7290 ;	calc.c:403: printstr(">\tshift right top 2\r\n");
      002BAD 90r03r24         [24] 7291 	mov	dptr,#___str_44
      002BB0 75 F0 80         [24] 7292 	mov	b,#0x80
      002BB3 12r00r00         [24] 7293 	lcall	_printstr
                                   7294 ;	calc.c:404: printstr("]\tarithmetic shift right top 2\r\n");
      002BB6 90r03r3A         [24] 7295 	mov	dptr,#___str_45
      002BB9 75 F0 80         [24] 7296 	mov	b,#0x80
      002BBC 12r00r00         [24] 7297 	lcall	_printstr
                                   7298 ;	calc.c:405: printstr("<\tshift left top 2\r\n");
      002BBF 90r03r5B         [24] 7299 	mov	dptr,#___str_46
      002BC2 75 F0 80         [24] 7300 	mov	b,#0x80
      002BC5 12r00r00         [24] 7301 	lcall	_printstr
                                   7302 ;	calc.c:406: printstr("~\tbitwise not top\r\n");
      002BC8 90r03r70         [24] 7303 	mov	dptr,#___str_47
      002BCB 75 F0 80         [24] 7304 	mov	b,#0x80
      002BCE 12r00r00         [24] 7305 	lcall	_printstr
                                   7306 ;	calc.c:407: printstr("s\tstatus\r\n");
      002BD1 90r03r84         [24] 7307 	mov	dptr,#___str_48
      002BD4 75 F0 80         [24] 7308 	mov	b,#0x80
      002BD7 12r00r00         [24] 7309 	lcall	_printstr
                                   7310 ;	calc.c:408: printstr("?\thelp\r\n");
      002BDA 90r03r8F         [24] 7311 	mov	dptr,#___str_49
      002BDD 75 F0 80         [24] 7312 	mov	b,#0x80
      002BE0 12r00r00         [24] 7313 	lcall	_printstr
                                   7314 ;	calc.c:409: printstr("q\tquit\r\n");
      002BE3 90r03r98         [24] 7315 	mov	dptr,#___str_50
      002BE6 75 F0 80         [24] 7316 	mov	b,#0x80
      002BE9 12r00r00         [24] 7317 	lcall	_printstr
                                   7318 ;	calc.c:411: return 1;
      002BEC 90 00 01         [24] 7319 	mov	dptr,#0x0001
                                   7320 ;	calc.c:412: }
      002BEF D0*00            [24] 7321 	pop	_bp
      002BF1 22               [24] 7322 	ret
                                   7323 ;------------------------------------------------------------
                                   7324 ;Allocation info for local variables in function 'main'
                                   7325 ;------------------------------------------------------------
                                   7326 ;input                     Allocated to registers r6 r7 
                                   7327 ;------------------------------------------------------------
                                   7328 ;	calc.c:442: void main(void) {
                                   7329 ;	-----------------------------------------
                                   7330 ;	 function main
                                   7331 ;	-----------------------------------------
      002BF2                       7332 _main:
                                   7333 ;	calc.c:445: giant = 0;
      002BF2 78r00            [12] 7334 	mov	r0,#_giant
      002BF4 76 00            [12] 7335 	mov	@r0,#0x00
                                   7336 ;	calc.c:447: c.base = 10;
      002BF6 90r00r0C         [24] 7337 	mov	dptr,#_c
      002BF9 74 0A            [12] 7338 	mov	a,#0x0a
      002BFB F0               [24] 7339 	movx	@dptr,a
      002BFC E4               [12] 7340 	clr	a
      002BFD A3               [24] 7341 	inc	dptr
      002BFE F0               [24] 7342 	movx	@dptr,a
                                   7343 ;	calc.c:448: c.acc = 0l;
      002BFF 90r00r0E         [24] 7344 	mov	dptr,#(_c + 0x0002)
      002C02 F0               [24] 7345 	movx	@dptr,a
      002C03 A3               [24] 7346 	inc	dptr
      002C04 F0               [24] 7347 	movx	@dptr,a
      002C05 A3               [24] 7348 	inc	dptr
      002C06 F0               [24] 7349 	movx	@dptr,a
      002C07 A3               [24] 7350 	inc	dptr
      002C08 F0               [24] 7351 	movx	@dptr,a
                                   7352 ;	calc.c:449: c.acc_valid = (char)0;
      002C09 90r00r12         [24] 7353 	mov	dptr,#(_c + 0x0006)
      002C0C F0               [24] 7354 	movx	@dptr,a
                                   7355 ;	calc.c:450: c.digit[0] = c.digit[1] = '\0';
      002C0D 90r00r14         [24] 7356 	mov	dptr,#(_c + 0x0008)
      002C10 F0               [24] 7357 	movx	@dptr,a
      002C11 90r00r13         [24] 7358 	mov	dptr,#(_c + 0x0007)
      002C14 F0               [24] 7359 	movx	@dptr,a
                                   7360 ;	calc.c:452: c.ps = &c.s0;
      002C15 90r40r1D         [24] 7361 	mov	dptr,#(_c + 0x4011)
      002C18 74r15            [12] 7362 	mov	a,#(_c + 0x0009)
      002C1A F0               [24] 7363 	movx	@dptr,a
      002C1B 74s00            [12] 7364 	mov	a,#((_c + 0x0009) >> 8)
      002C1D A3               [24] 7365 	inc	dptr
      002C1E F0               [24] 7366 	movx	@dptr,a
      002C1F E4               [12] 7367 	clr	a
      002C20 A3               [24] 7368 	inc	dptr
      002C21 F0               [24] 7369 	movx	@dptr,a
                                   7370 ;	calc.c:453: c.ss = &c.s1;
      002C22 90r40r20         [24] 7371 	mov	dptr,#(_c + 0x4014)
      002C25 74r19            [12] 7372 	mov	a,#(_c + 0x200d)
      002C27 F0               [24] 7373 	movx	@dptr,a
      002C28 74s20            [12] 7374 	mov	a,#((_c + 0x200d) >> 8)
      002C2A A3               [24] 7375 	inc	dptr
      002C2B F0               [24] 7376 	movx	@dptr,a
      002C2C E4               [12] 7377 	clr	a
      002C2D A3               [24] 7378 	inc	dptr
      002C2E F0               [24] 7379 	movx	@dptr,a
                                   7380 ;	calc.c:454: stack_init(c.ps);
      002C2F 90r00r15         [24] 7381 	mov	dptr,#(_c + 0x0009)
      002C32 75 F0 00         [24] 7382 	mov	b,#0x00
      002C35 12r00r00         [24] 7383 	lcall	_stack_init
                                   7384 ;	calc.c:455: stack_init(c.ss);
      002C38 90r40r20         [24] 7385 	mov	dptr,#(_c + 0x4014)
      002C3B E0               [24] 7386 	movx	a,@dptr
      002C3C FD               [12] 7387 	mov	r5,a
      002C3D A3               [24] 7388 	inc	dptr
      002C3E E0               [24] 7389 	movx	a,@dptr
      002C3F FE               [12] 7390 	mov	r6,a
      002C40 A3               [24] 7391 	inc	dptr
      002C41 E0               [24] 7392 	movx	a,@dptr
      002C42 FF               [12] 7393 	mov	r7,a
      002C43 8D 82            [24] 7394 	mov	dpl,r5
      002C45 8E 83            [24] 7395 	mov	dph,r6
      002C47 8F F0            [24] 7396 	mov	b,r7
      002C49 12r00r00         [24] 7397 	lcall	_stack_init
                                   7398 ;	calc.c:457: state_init(&s, STATE_START, STATE_FINAL, UNDEF, deltas, &c);
      002C4C 74r0C            [12] 7399 	mov	a,#_c
      002C4E C0 E0            [24] 7400 	push	acc
      002C50 74s00            [12] 7401 	mov	a,#(_c >> 8)
      002C52 C0 E0            [24] 7402 	push	acc
      002C54 E4               [12] 7403 	clr	a
      002C55 C0 E0            [24] 7404 	push	acc
      002C57 74r00            [12] 7405 	mov	a,#_deltas
      002C59 C0 E0            [24] 7406 	push	acc
      002C5B 74s00            [12] 7407 	mov	a,#(_deltas >> 8)
      002C5D C0 E0            [24] 7408 	push	acc
      002C5F E4               [12] 7409 	clr	a
      002C60 C0 E0            [24] 7410 	push	acc
      002C62 C0 E0            [24] 7411 	push	acc
      002C64 74 80            [12] 7412 	mov	a,#0x80
      002C66 C0 E0            [24] 7413 	push	acc
      002C68 74 03            [12] 7414 	mov	a,#0x03
      002C6A C0 E0            [24] 7415 	push	acc
      002C6C E4               [12] 7416 	clr	a
      002C6D C0 E0            [24] 7417 	push	acc
      002C6F C0 E0            [24] 7418 	push	acc
      002C71 C0 E0            [24] 7419 	push	acc
      002C73 90r00r00         [24] 7420 	mov	dptr,#_s
      002C76 75 F0 00         [24] 7421 	mov	b,#0x00
      002C79 12r00r00         [24] 7422 	lcall	_state_init
      002C7C E5 81            [12] 7423 	mov	a,sp
      002C7E 24 F4            [12] 7424 	add	a,#0xf4
      002C80 F5 81            [12] 7425 	mov	sp,a
                                   7426 ;	calc.c:459: (void)status(&c, deltas);
      002C82 74r00            [12] 7427 	mov	a,#_deltas
      002C84 C0 E0            [24] 7428 	push	acc
      002C86 74s00            [12] 7429 	mov	a,#(_deltas >> 8)
      002C88 C0 E0            [24] 7430 	push	acc
      002C8A E4               [12] 7431 	clr	a
      002C8B C0 E0            [24] 7432 	push	acc
      002C8D 90r00r0C         [24] 7433 	mov	dptr,#_c
      002C90 75 F0 00         [24] 7434 	mov	b,#0x00
      002C93 12r25rA2         [24] 7435 	lcall	_status
      002C96 15 81            [12] 7436 	dec	sp
      002C98 15 81            [12] 7437 	dec	sp
      002C9A 15 81            [12] 7438 	dec	sp
                                   7439 ;	calc.c:461: while (1) {
      002C9C                       7440 00192$:
                                   7441 ;	calc.c:462: input = getchar();
      002C9C 12r00r00         [24] 7442 	lcall	_getchar
      002C9F AE 82            [24] 7443 	mov	r6,dpl
      002CA1 AF 83            [24] 7444 	mov	r7,dph
                                   7445 ;	calc.c:463: if (((char)input == '\r') || ((char)input == '\n')) printstr("\r\n");
      002CA3 8E 05            [24] 7446 	mov	ar5,r6
      002CA5 BD 0D 02         [24] 7447 	cjne	r5,#0x0d,00372$
      002CA8 80 03            [24] 7448 	sjmp	00101$
      002CAA                       7449 00372$:
      002CAA BD 0A 17         [24] 7450 	cjne	r5,#0x0a,00102$
      002CAD                       7451 00101$:
      002CAD 90r00r10         [24] 7452 	mov	dptr,#___str_2
      002CB0 75 F0 80         [24] 7453 	mov	b,#0x80
      002CB3 C0 07            [24] 7454 	push	ar7
      002CB5 C0 06            [24] 7455 	push	ar6
      002CB7 C0 05            [24] 7456 	push	ar5
      002CB9 12r00r00         [24] 7457 	lcall	_printstr
      002CBC D0 05            [24] 7458 	pop	ar5
      002CBE D0 06            [24] 7459 	pop	ar6
      002CC0 D0 07            [24] 7460 	pop	ar7
      002CC2 80 13            [24] 7461 	sjmp	00103$
      002CC4                       7462 00102$:
                                   7463 ;	calc.c:464: else (void)putchar(input);
      002CC4 8E 82            [24] 7464 	mov	dpl,r6
      002CC6 8F 83            [24] 7465 	mov	dph,r7
      002CC8 C0 07            [24] 7466 	push	ar7
      002CCA C0 06            [24] 7467 	push	ar6
      002CCC C0 05            [24] 7468 	push	ar5
      002CCE 12r00r00         [24] 7469 	lcall	_putchar
      002CD1 D0 05            [24] 7470 	pop	ar5
      002CD3 D0 06            [24] 7471 	pop	ar6
      002CD5 D0 07            [24] 7472 	pop	ar7
      002CD7                       7473 00103$:
                                   7474 ;	calc.c:465: c.digit[0] = (char)input;
      002CD7 90r00r13         [24] 7475 	mov	dptr,#(_c + 0x0007)
      002CDA ED               [12] 7476 	mov	a,r5
      002CDB F0               [24] 7477 	movx	@dptr,a
                                   7478 ;	calc.c:467: if ((char)input == 'q') {
      002CDC BD 71 29         [24] 7479 	cjne	r5,#0x71,00189$
                                   7480 ;	calc.c:468: if (state_exec(&s, EVENT_TERM) <= 0) break;
      002CDF 74 08            [12] 7481 	mov	a,#0x08
      002CE1 C0 E0            [24] 7482 	push	acc
      002CE3 E4               [12] 7483 	clr	a
      002CE4 C0 E0            [24] 7484 	push	acc
      002CE6 90r00r00         [24] 7485 	mov	dptr,#_s
      002CE9 75 F0 00         [24] 7486 	mov	b,#0x00
      002CEC 12r00r00         [24] 7487 	lcall	_state_exec
      002CEF AB 82            [24] 7488 	mov	r3,dpl
      002CF1 AC 83            [24] 7489 	mov	r4,dph
      002CF3 15 81            [12] 7490 	dec	sp
      002CF5 15 81            [12] 7491 	dec	sp
      002CF7 C3               [12] 7492 	clr	c
      002CF8 E4               [12] 7493 	clr	a
      002CF9 9B               [12] 7494 	subb	a,r3
      002CFA 74 80            [12] 7495 	mov	a,#(0x00 ^ 0x80)
      002CFC 8C F0            [24] 7496 	mov	b,r4
      002CFE 63 F0 80         [24] 7497 	xrl	b,#0x80
      002D01 95 F0            [12] 7498 	subb	a,b
      002D03 40 97            [24] 7499 	jc	00192$
      002D05 02r2FrB7         [24] 7500 	ljmp	00193$
      002D08                       7501 00189$:
                                   7502 ;	calc.c:469: } else if ((char)input == 's') {
      002D08 BD 73 2C         [24] 7503 	cjne	r5,#0x73,00186$
                                   7504 ;	calc.c:470: if (state_exec(&s, EVENT_STATUS) <= 0) break;
      002D0B 74 03            [12] 7505 	mov	a,#0x03
      002D0D C0 E0            [24] 7506 	push	acc
      002D0F E4               [12] 7507 	clr	a
      002D10 C0 E0            [24] 7508 	push	acc
      002D12 90r00r00         [24] 7509 	mov	dptr,#_s
      002D15 75 F0 00         [24] 7510 	mov	b,#0x00
      002D18 12r00r00         [24] 7511 	lcall	_state_exec
      002D1B AB 82            [24] 7512 	mov	r3,dpl
      002D1D AC 83            [24] 7513 	mov	r4,dph
      002D1F 15 81            [12] 7514 	dec	sp
      002D21 15 81            [12] 7515 	dec	sp
      002D23 C3               [12] 7516 	clr	c
      002D24 E4               [12] 7517 	clr	a
      002D25 9B               [12] 7518 	subb	a,r3
      002D26 74 80            [12] 7519 	mov	a,#(0x00 ^ 0x80)
      002D28 8C F0            [24] 7520 	mov	b,r4
      002D2A 63 F0 80         [24] 7521 	xrl	b,#0x80
      002D2D 95 F0            [12] 7522 	subb	a,b
      002D2F 50 03            [24] 7523 	jnc	00380$
      002D31 02r2Cr9C         [24] 7524 	ljmp	00192$
      002D34                       7525 00380$:
      002D34 02r2FrB7         [24] 7526 	ljmp	00193$
      002D37                       7527 00186$:
                                   7528 ;	calc.c:471: } else if ((char)input == '?') {
      002D37 BD 3F 2C         [24] 7529 	cjne	r5,#0x3f,00183$
                                   7530 ;	calc.c:472: if (state_exec(&s, EVENT_HELP) <= 0) break;
      002D3A 74 04            [12] 7531 	mov	a,#0x04
      002D3C C0 E0            [24] 7532 	push	acc
      002D3E E4               [12] 7533 	clr	a
      002D3F C0 E0            [24] 7534 	push	acc
      002D41 90r00r00         [24] 7535 	mov	dptr,#_s
      002D44 75 F0 00         [24] 7536 	mov	b,#0x00
      002D47 12r00r00         [24] 7537 	lcall	_state_exec
      002D4A AB 82            [24] 7538 	mov	r3,dpl
      002D4C AC 83            [24] 7539 	mov	r4,dph
      002D4E 15 81            [12] 7540 	dec	sp
      002D50 15 81            [12] 7541 	dec	sp
      002D52 C3               [12] 7542 	clr	c
      002D53 E4               [12] 7543 	clr	a
      002D54 9B               [12] 7544 	subb	a,r3
      002D55 74 80            [12] 7545 	mov	a,#(0x00 ^ 0x80)
      002D57 8C F0            [24] 7546 	mov	b,r4
      002D59 63 F0 80         [24] 7547 	xrl	b,#0x80
      002D5C 95 F0            [12] 7548 	subb	a,b
      002D5E 50 03            [24] 7549 	jnc	00383$
      002D60 02r2Cr9C         [24] 7550 	ljmp	00192$
      002D63                       7551 00383$:
      002D63 02r2FrB7         [24] 7552 	ljmp	00193$
      002D66                       7553 00183$:
                                   7554 ;	calc.c:473: } else if ((char)input == 'i') {
      002D66 BD 69 2C         [24] 7555 	cjne	r5,#0x69,00180$
                                   7556 ;	calc.c:474: if (state_exec(&s, EVENT_RSTA_i) <= 0) break;
      002D69 74 06            [12] 7557 	mov	a,#0x06
      002D6B C0 E0            [24] 7558 	push	acc
      002D6D E4               [12] 7559 	clr	a
      002D6E C0 E0            [24] 7560 	push	acc
      002D70 90r00r00         [24] 7561 	mov	dptr,#_s
      002D73 75 F0 00         [24] 7562 	mov	b,#0x00
      002D76 12r00r00         [24] 7563 	lcall	_state_exec
      002D79 AB 82            [24] 7564 	mov	r3,dpl
      002D7B AC 83            [24] 7565 	mov	r4,dph
      002D7D 15 81            [12] 7566 	dec	sp
      002D7F 15 81            [12] 7567 	dec	sp
      002D81 C3               [12] 7568 	clr	c
      002D82 E4               [12] 7569 	clr	a
      002D83 9B               [12] 7570 	subb	a,r3
      002D84 74 80            [12] 7571 	mov	a,#(0x00 ^ 0x80)
      002D86 8C F0            [24] 7572 	mov	b,r4
      002D88 63 F0 80         [24] 7573 	xrl	b,#0x80
      002D8B 95 F0            [12] 7574 	subb	a,b
      002D8D 50 03            [24] 7575 	jnc	00386$
      002D8F 02r2Cr9C         [24] 7576 	ljmp	00192$
      002D92                       7577 00386$:
      002D92 02r2FrB7         [24] 7578 	ljmp	00193$
      002D95                       7579 00180$:
                                   7580 ;	calc.c:475: } else if ((char)input == 'I') {
      002D95 BD 49 2C         [24] 7581 	cjne	r5,#0x49,00177$
                                   7582 ;	calc.c:476: if (state_exec(&s, EVENT_RSTA_I) <= 0) break;
      002D98 74 07            [12] 7583 	mov	a,#0x07
      002D9A C0 E0            [24] 7584 	push	acc
      002D9C E4               [12] 7585 	clr	a
      002D9D C0 E0            [24] 7586 	push	acc
      002D9F 90r00r00         [24] 7587 	mov	dptr,#_s
      002DA2 75 F0 00         [24] 7588 	mov	b,#0x00
      002DA5 12r00r00         [24] 7589 	lcall	_state_exec
      002DA8 AB 82            [24] 7590 	mov	r3,dpl
      002DAA AC 83            [24] 7591 	mov	r4,dph
      002DAC 15 81            [12] 7592 	dec	sp
      002DAE 15 81            [12] 7593 	dec	sp
      002DB0 C3               [12] 7594 	clr	c
      002DB1 E4               [12] 7595 	clr	a
      002DB2 9B               [12] 7596 	subb	a,r3
      002DB3 74 80            [12] 7597 	mov	a,#(0x00 ^ 0x80)
      002DB5 8C F0            [24] 7598 	mov	b,r4
      002DB7 63 F0 80         [24] 7599 	xrl	b,#0x80
      002DBA 95 F0            [12] 7600 	subb	a,b
      002DBC 50 03            [24] 7601 	jnc	00389$
      002DBE 02r2Cr9C         [24] 7602 	ljmp	00192$
      002DC1                       7603 00389$:
      002DC1 02r2FrB7         [24] 7604 	ljmp	00193$
      002DC4                       7605 00177$:
                                   7606 ;	calc.c:478: ((char)input == 'h') || ((char)input == 'H') ||
      002DC4 BD 68 02         [24] 7607 	cjne	r5,#0x68,00390$
      002DC7 80 0D            [24] 7608 	sjmp	00170$
      002DC9                       7609 00390$:
      002DC9 BD 48 02         [24] 7610 	cjne	r5,#0x48,00391$
      002DCC 80 08            [24] 7611 	sjmp	00170$
      002DCE                       7612 00391$:
                                   7613 ;	calc.c:479: ((char)input == 'o') || ((char)input == 'O')
      002DCE BD 6F 02         [24] 7614 	cjne	r5,#0x6f,00392$
      002DD1 80 03            [24] 7615 	sjmp	00170$
      002DD3                       7616 00392$:
      002DD3 BD 4F 2C         [24] 7617 	cjne	r5,#0x4f,00171$
      002DD6                       7618 00170$:
                                   7619 ;	calc.c:481: if (state_exec(&s, EVENT_BASE) <= 0) break;
      002DD6 74 05            [12] 7620 	mov	a,#0x05
      002DD8 C0 E0            [24] 7621 	push	acc
      002DDA E4               [12] 7622 	clr	a
      002DDB C0 E0            [24] 7623 	push	acc
      002DDD 90r00r00         [24] 7624 	mov	dptr,#_s
      002DE0 75 F0 00         [24] 7625 	mov	b,#0x00
      002DE3 12r00r00         [24] 7626 	lcall	_state_exec
      002DE6 AB 82            [24] 7627 	mov	r3,dpl
      002DE8 AC 83            [24] 7628 	mov	r4,dph
      002DEA 15 81            [12] 7629 	dec	sp
      002DEC 15 81            [12] 7630 	dec	sp
      002DEE C3               [12] 7631 	clr	c
      002DEF E4               [12] 7632 	clr	a
      002DF0 9B               [12] 7633 	subb	a,r3
      002DF1 74 80            [12] 7634 	mov	a,#(0x00 ^ 0x80)
      002DF3 8C F0            [24] 7635 	mov	b,r4
      002DF5 63 F0 80         [24] 7636 	xrl	b,#0x80
      002DF8 95 F0            [12] 7637 	subb	a,b
      002DFA 50 03            [24] 7638 	jnc	00395$
      002DFC 02r2Cr9C         [24] 7639 	ljmp	00192$
      002DFF                       7640 00395$:
      002DFF 02r2FrB7         [24] 7641 	ljmp	00193$
      002E02                       7642 00171$:
                                   7643 ;	calc.c:482: } else if (isxdigit(input)) {
      002E02 8E 82            [24] 7644 	mov	dpl,r6
      002E04 8F 83            [24] 7645 	mov	dph,r7
      002E06 C0 05            [24] 7646 	push	ar5
      002E08 12r00r00         [24] 7647 	lcall	_isxdigit
      002E0B E5 82            [12] 7648 	mov	a,dpl
      002E0D 85 83 F0         [24] 7649 	mov	b,dph
      002E10 D0 05            [24] 7650 	pop	ar5
      002E12 45 F0            [12] 7651 	orl	a,b
      002E14 60 2C            [24] 7652 	jz	00168$
                                   7653 ;	calc.c:483: if (state_exec(&s, EVENT_DIGIT) <= 0) break;
      002E16 74 01            [12] 7654 	mov	a,#0x01
      002E18 C0 E0            [24] 7655 	push	acc
      002E1A E4               [12] 7656 	clr	a
      002E1B C0 E0            [24] 7657 	push	acc
      002E1D 90r00r00         [24] 7658 	mov	dptr,#_s
      002E20 75 F0 00         [24] 7659 	mov	b,#0x00
      002E23 12r00r00         [24] 7660 	lcall	_state_exec
      002E26 AE 82            [24] 7661 	mov	r6,dpl
      002E28 AF 83            [24] 7662 	mov	r7,dph
      002E2A 15 81            [12] 7663 	dec	sp
      002E2C 15 81            [12] 7664 	dec	sp
      002E2E C3               [12] 7665 	clr	c
      002E2F E4               [12] 7666 	clr	a
      002E30 9E               [12] 7667 	subb	a,r6
      002E31 74 80            [12] 7668 	mov	a,#(0x00 ^ 0x80)
      002E33 8F F0            [24] 7669 	mov	b,r7
      002E35 63 F0 80         [24] 7670 	xrl	b,#0x80
      002E38 95 F0            [12] 7671 	subb	a,b
      002E3A 50 03            [24] 7672 	jnc	00397$
      002E3C 02r2Cr9C         [24] 7673 	ljmp	00192$
      002E3F                       7674 00397$:
      002E3F 02r2FrB7         [24] 7675 	ljmp	00193$
      002E42                       7676 00168$:
                                   7677 ;	calc.c:485: ((char)input == 'p') || ((char)input == 'P') ||
      002E42 BD 70 02         [24] 7678 	cjne	r5,#0x70,00398$
      002E45 80 17            [24] 7679 	sjmp	00159$
      002E47                       7680 00398$:
      002E47 BD 50 02         [24] 7681 	cjne	r5,#0x50,00399$
      002E4A 80 12            [24] 7682 	sjmp	00159$
      002E4C                       7683 00399$:
                                   7684 ;	calc.c:486: ((char)input == 'v') || ((char)input == 'V') ||
      002E4C BD 76 02         [24] 7685 	cjne	r5,#0x76,00400$
      002E4F 80 0D            [24] 7686 	sjmp	00159$
      002E51                       7687 00400$:
      002E51 BD 56 02         [24] 7688 	cjne	r5,#0x56,00401$
      002E54 80 08            [24] 7689 	sjmp	00159$
      002E56                       7690 00401$:
                                   7691 ;	calc.c:487: ((char)input == '.') ||
      002E56 BD 2E 02         [24] 7692 	cjne	r5,#0x2e,00402$
      002E59 80 03            [24] 7693 	sjmp	00159$
      002E5B                       7694 00402$:
                                   7695 ;	calc.c:488: ((char)input == 'x')
      002E5B BD 78 2C         [24] 7696 	cjne	r5,#0x78,00160$
      002E5E                       7697 00159$:
                                   7698 ;	calc.c:490: if (state_exec(&s, EVENT_OP) <= 0) break;
      002E5E 74 02            [12] 7699 	mov	a,#0x02
      002E60 C0 E0            [24] 7700 	push	acc
      002E62 E4               [12] 7701 	clr	a
      002E63 C0 E0            [24] 7702 	push	acc
      002E65 90r00r00         [24] 7703 	mov	dptr,#_s
      002E68 75 F0 00         [24] 7704 	mov	b,#0x00
      002E6B 12r00r00         [24] 7705 	lcall	_state_exec
      002E6E AE 82            [24] 7706 	mov	r6,dpl
      002E70 AF 83            [24] 7707 	mov	r7,dph
      002E72 15 81            [12] 7708 	dec	sp
      002E74 15 81            [12] 7709 	dec	sp
      002E76 C3               [12] 7710 	clr	c
      002E77 E4               [12] 7711 	clr	a
      002E78 9E               [12] 7712 	subb	a,r6
      002E79 74 80            [12] 7713 	mov	a,#(0x00 ^ 0x80)
      002E7B 8F F0            [24] 7714 	mov	b,r7
      002E7D 63 F0 80         [24] 7715 	xrl	b,#0x80
      002E80 95 F0            [12] 7716 	subb	a,b
      002E82 50 03            [24] 7717 	jnc	00405$
      002E84 02r2Cr9C         [24] 7718 	ljmp	00192$
      002E87                       7719 00405$:
      002E87 02r2FrB7         [24] 7720 	ljmp	00193$
      002E8A                       7721 00160$:
                                   7722 ;	calc.c:492: ((char)input == 'X') || ((char)input == 'T') ||
      002E8A BD 58 02         [24] 7723 	cjne	r5,#0x58,00406$
      002E8D 80 17            [24] 7724 	sjmp	00151$
      002E8F                       7725 00406$:
      002E8F BD 54 02         [24] 7726 	cjne	r5,#0x54,00407$
      002E92 80 12            [24] 7727 	sjmp	00151$
      002E94                       7728 00407$:
                                   7729 ;	calc.c:493: ((char)input == 'm') || ((char)input == 'M') ||
      002E94 BD 6D 02         [24] 7730 	cjne	r5,#0x6d,00408$
      002E97 80 0D            [24] 7731 	sjmp	00151$
      002E99                       7732 00408$:
      002E99 BD 4D 02         [24] 7733 	cjne	r5,#0x4d,00409$
      002E9C 80 08            [24] 7734 	sjmp	00151$
      002E9E                       7735 00409$:
                                   7736 ;	calc.c:494: ((char)input == 'u') || ((char)input == 'U')
      002E9E BD 75 02         [24] 7737 	cjne	r5,#0x75,00410$
      002EA1 80 03            [24] 7738 	sjmp	00151$
      002EA3                       7739 00410$:
      002EA3 BD 55 2C         [24] 7740 	cjne	r5,#0x55,00152$
      002EA6                       7741 00151$:
                                   7742 ;	calc.c:496: if (state_exec(&s, EVENT_OP) <= 0) break;
      002EA6 74 02            [12] 7743 	mov	a,#0x02
      002EA8 C0 E0            [24] 7744 	push	acc
      002EAA E4               [12] 7745 	clr	a
      002EAB C0 E0            [24] 7746 	push	acc
      002EAD 90r00r00         [24] 7747 	mov	dptr,#_s
      002EB0 75 F0 00         [24] 7748 	mov	b,#0x00
      002EB3 12r00r00         [24] 7749 	lcall	_state_exec
      002EB6 AE 82            [24] 7750 	mov	r6,dpl
      002EB8 AF 83            [24] 7751 	mov	r7,dph
      002EBA 15 81            [12] 7752 	dec	sp
      002EBC 15 81            [12] 7753 	dec	sp
      002EBE C3               [12] 7754 	clr	c
      002EBF E4               [12] 7755 	clr	a
      002EC0 9E               [12] 7756 	subb	a,r6
      002EC1 74 80            [12] 7757 	mov	a,#(0x00 ^ 0x80)
      002EC3 8F F0            [24] 7758 	mov	b,r7
      002EC5 63 F0 80         [24] 7759 	xrl	b,#0x80
      002EC8 95 F0            [12] 7760 	subb	a,b
      002ECA 50 03            [24] 7761 	jnc	00413$
      002ECC 02r2Cr9C         [24] 7762 	ljmp	00192$
      002ECF                       7763 00413$:
      002ECF 02r2FrB7         [24] 7764 	ljmp	00193$
      002ED2                       7765 00152$:
                                   7766 ;	calc.c:498: ((char)input == '+') || ((char)input == '-')
      002ED2 BD 2B 02         [24] 7767 	cjne	r5,#0x2b,00414$
      002ED5 80 03            [24] 7768 	sjmp	00147$
      002ED7                       7769 00414$:
      002ED7 BD 2D 2C         [24] 7770 	cjne	r5,#0x2d,00148$
      002EDA                       7771 00147$:
                                   7772 ;	calc.c:500: if (state_exec(&s, EVENT_OP) <= 0) break;
      002EDA 74 02            [12] 7773 	mov	a,#0x02
      002EDC C0 E0            [24] 7774 	push	acc
      002EDE E4               [12] 7775 	clr	a
      002EDF C0 E0            [24] 7776 	push	acc
      002EE1 90r00r00         [24] 7777 	mov	dptr,#_s
      002EE4 75 F0 00         [24] 7778 	mov	b,#0x00
      002EE7 12r00r00         [24] 7779 	lcall	_state_exec
      002EEA AE 82            [24] 7780 	mov	r6,dpl
      002EEC AF 83            [24] 7781 	mov	r7,dph
      002EEE 15 81            [12] 7782 	dec	sp
      002EF0 15 81            [12] 7783 	dec	sp
      002EF2 C3               [12] 7784 	clr	c
      002EF3 E4               [12] 7785 	clr	a
      002EF4 9E               [12] 7786 	subb	a,r6
      002EF5 74 80            [12] 7787 	mov	a,#(0x00 ^ 0x80)
      002EF7 8F F0            [24] 7788 	mov	b,r7
      002EF9 63 F0 80         [24] 7789 	xrl	b,#0x80
      002EFC 95 F0            [12] 7790 	subb	a,b
      002EFE 50 03            [24] 7791 	jnc	00417$
      002F00 02r2Cr9C         [24] 7792 	ljmp	00192$
      002F03                       7793 00417$:
      002F03 02r2FrB7         [24] 7794 	ljmp	00193$
      002F06                       7795 00148$:
                                   7796 ;	calc.c:502: ((char)input == '*') ||
      002F06 BD 2A 02         [24] 7797 	cjne	r5,#0x2a,00418$
      002F09 80 12            [24] 7798 	sjmp	00140$
      002F0B                       7799 00418$:
                                   7800 ;	calc.c:503: ((char)input == '/') || ((char)input == '\\') ||
      002F0B BD 2F 02         [24] 7801 	cjne	r5,#0x2f,00419$
      002F0E 80 0D            [24] 7802 	sjmp	00140$
      002F10                       7803 00419$:
      002F10 BD 5C 02         [24] 7804 	cjne	r5,#0x5c,00420$
      002F13 80 08            [24] 7805 	sjmp	00140$
      002F15                       7806 00420$:
                                   7807 ;	calc.c:504: ((char)input == '%') || ((char)input == '#')
      002F15 BD 25 02         [24] 7808 	cjne	r5,#0x25,00421$
      002F18 80 03            [24] 7809 	sjmp	00140$
      002F1A                       7810 00421$:
      002F1A BD 23 29         [24] 7811 	cjne	r5,#0x23,00141$
      002F1D                       7812 00140$:
                                   7813 ;	calc.c:506: if (state_exec(&s, EVENT_OP) <= 0) break;
      002F1D 74 02            [12] 7814 	mov	a,#0x02
      002F1F C0 E0            [24] 7815 	push	acc
      002F21 E4               [12] 7816 	clr	a
      002F22 C0 E0            [24] 7817 	push	acc
      002F24 90r00r00         [24] 7818 	mov	dptr,#_s
      002F27 75 F0 00         [24] 7819 	mov	b,#0x00
      002F2A 12r00r00         [24] 7820 	lcall	_state_exec
      002F2D AE 82            [24] 7821 	mov	r6,dpl
      002F2F AF 83            [24] 7822 	mov	r7,dph
      002F31 15 81            [12] 7823 	dec	sp
      002F33 15 81            [12] 7824 	dec	sp
      002F35 C3               [12] 7825 	clr	c
      002F36 E4               [12] 7826 	clr	a
      002F37 9E               [12] 7827 	subb	a,r6
      002F38 74 80            [12] 7828 	mov	a,#(0x00 ^ 0x80)
      002F3A 8F F0            [24] 7829 	mov	b,r7
      002F3C 63 F0 80         [24] 7830 	xrl	b,#0x80
      002F3F 95 F0            [12] 7831 	subb	a,b
      002F41 50 74            [24] 7832 	jnc	00193$
      002F43 02r2Cr9C         [24] 7833 	ljmp	00192$
      002F46                       7834 00141$:
                                   7835 ;	calc.c:508: ((char)input == '&') ||
      002F46 BD 26 02         [24] 7836 	cjne	r5,#0x26,00425$
      002F49 80 1C            [24] 7837 	sjmp	00131$
      002F4B                       7838 00425$:
                                   7839 ;	calc.c:509: ((char)input == '|') || ((char)input == '^') ||
      002F4B BD 7C 02         [24] 7840 	cjne	r5,#0x7c,00426$
      002F4E 80 17            [24] 7841 	sjmp	00131$
      002F50                       7842 00426$:
      002F50 BD 5E 02         [24] 7843 	cjne	r5,#0x5e,00427$
      002F53 80 12            [24] 7844 	sjmp	00131$
      002F55                       7845 00427$:
                                   7846 ;	calc.c:510: ((char)input == '~') ||
      002F55 BD 7E 02         [24] 7847 	cjne	r5,#0x7e,00428$
      002F58 80 0D            [24] 7848 	sjmp	00131$
      002F5A                       7849 00428$:
                                   7850 ;	calc.c:511: ((char)input == '>') || ((char)input == ']') ||
      002F5A BD 3E 02         [24] 7851 	cjne	r5,#0x3e,00429$
      002F5D 80 08            [24] 7852 	sjmp	00131$
      002F5F                       7853 00429$:
      002F5F BD 5D 02         [24] 7854 	cjne	r5,#0x5d,00430$
      002F62 80 03            [24] 7855 	sjmp	00131$
      002F64                       7856 00430$:
                                   7857 ;	calc.c:512: ((char)input == '<')
      002F64 BD 3C 29         [24] 7858 	cjne	r5,#0x3c,00132$
      002F67                       7859 00131$:
                                   7860 ;	calc.c:514: if (state_exec(&s, EVENT_OP) <= 0) break;
      002F67 74 02            [12] 7861 	mov	a,#0x02
      002F69 C0 E0            [24] 7862 	push	acc
      002F6B E4               [12] 7863 	clr	a
      002F6C C0 E0            [24] 7864 	push	acc
      002F6E 90r00r00         [24] 7865 	mov	dptr,#_s
      002F71 75 F0 00         [24] 7866 	mov	b,#0x00
      002F74 12r00r00         [24] 7867 	lcall	_state_exec
      002F77 AE 82            [24] 7868 	mov	r6,dpl
      002F79 AF 83            [24] 7869 	mov	r7,dph
      002F7B 15 81            [12] 7870 	dec	sp
      002F7D 15 81            [12] 7871 	dec	sp
      002F7F C3               [12] 7872 	clr	c
      002F80 E4               [12] 7873 	clr	a
      002F81 9E               [12] 7874 	subb	a,r6
      002F82 74 80            [12] 7875 	mov	a,#(0x00 ^ 0x80)
      002F84 8F F0            [24] 7876 	mov	b,r7
      002F86 63 F0 80         [24] 7877 	xrl	b,#0x80
      002F89 95 F0            [12] 7878 	subb	a,b
      002F8B 50 2A            [24] 7879 	jnc	00193$
      002F8D 02r2Cr9C         [24] 7880 	ljmp	00192$
      002F90                       7881 00132$:
                                   7882 ;	calc.c:516: if (state_exec(&s, EVENT_DELIM) <= 0) break;
      002F90 E4               [12] 7883 	clr	a
      002F91 C0 E0            [24] 7884 	push	acc
      002F93 C0 E0            [24] 7885 	push	acc
      002F95 90r00r00         [24] 7886 	mov	dptr,#_s
      002F98 75 F0 00         [24] 7887 	mov	b,#0x00
      002F9B 12r00r00         [24] 7888 	lcall	_state_exec
      002F9E AE 82            [24] 7889 	mov	r6,dpl
      002FA0 AF 83            [24] 7890 	mov	r7,dph
      002FA2 15 81            [12] 7891 	dec	sp
      002FA4 15 81            [12] 7892 	dec	sp
      002FA6 C3               [12] 7893 	clr	c
      002FA7 E4               [12] 7894 	clr	a
      002FA8 9E               [12] 7895 	subb	a,r6
      002FA9 74 80            [12] 7896 	mov	a,#(0x00 ^ 0x80)
      002FAB 8F F0            [24] 7897 	mov	b,r7
      002FAD 63 F0 80         [24] 7898 	xrl	b,#0x80
      002FB0 95 F0            [12] 7899 	subb	a,b
      002FB2 50 03            [24] 7900 	jnc	00434$
      002FB4 02r2Cr9C         [24] 7901 	ljmp	00192$
      002FB7                       7902 00434$:
      002FB7                       7903 00193$:
                                   7904 ;	calc.c:520: printstr("TERM\r\n");
      002FB7 90r03rA1         [24] 7905 	mov	dptr,#___str_51
      002FBA 75 F0 80         [24] 7906 	mov	b,#0x80
      002FBD 12r00r00         [24] 7907 	lcall	_printstr
                                   7908 ;	calc.c:522: PCON |= 2;
      002FC0 43 87 02         [24] 7909 	orl	_PCON,#0x02
                                   7910 ;	calc.c:524: return;
                                   7911 ;	calc.c:525: }
      002FC3 22               [24] 7912 	ret
                                   7913 	.area CSEG    (CODE)
                                   7914 	.area CONST   (CODE)
                                   7915 	.area CONST   (CODE)
      000000                       7916 ___str_0:
      000000 25 20 31 31 6C 64     7917 	.ascii "% 11ld"
      000006 09                    7918 	.db 0x09
      000007 00                    7919 	.db 0x00
                                   7920 	.area CSEG    (CODE)
                                   7921 	.area CONST   (CODE)
      000008                       7922 ___str_1:
      000008 25 30 31 31 6C 6F     7923 	.ascii "%011lo"
      00000E 09                    7924 	.db 0x09
      00000F 00                    7925 	.db 0x00
                                   7926 	.area CSEG    (CODE)
                                   7927 	.area CONST   (CODE)
      000010                       7928 ___str_2:
      000010 0D                    7929 	.db 0x0d
      000011 0A                    7930 	.db 0x0a
      000012 00                    7931 	.db 0x00
                                   7932 	.area CSEG    (CODE)
                                   7933 	.area CONST   (CODE)
      000013                       7934 ___str_3:
      000013 73 74 61 63 6B 20 75  7935 	.ascii "stack underflow"
             6E 64 65 72 66 6C 6F
             77
      000022 0D                    7936 	.db 0x0d
      000023 0A                    7937 	.db 0x0a
      000024 00                    7938 	.db 0x00
                                   7939 	.area CSEG    (CODE)
                                   7940 	.area CONST   (CODE)
      000025                       7941 ___str_4:
      000025 50 53 50 41           7942 	.ascii "PSPA"
      000029 09                    7943 	.db 0x09
      00002A 00                    7944 	.db 0x00
                                   7945 	.area CSEG    (CODE)
                                   7946 	.area CONST   (CODE)
      00002B                       7947 ___str_5:
      00002B 53 53 50 41           7948 	.ascii "SSPA"
      00002F 09                    7949 	.db 0x09
      000030 00                    7950 	.db 0x00
                                   7951 	.area CSEG    (CODE)
                                   7952 	.area CONST   (CODE)
      000031                       7953 ___str_6:
      000031 50 53 56 41           7954 	.ascii "PSVA"
      000035 09                    7955 	.db 0x09
      000036 00                    7956 	.db 0x00
                                   7957 	.area CSEG    (CODE)
                                   7958 	.area CONST   (CODE)
      000037                       7959 ___str_7:
      000037 50 53 56 54 4F 50     7960 	.ascii "PSVTOP"
      00003D 09                    7961 	.db 0x09
      00003E 00                    7962 	.db 0x00
                                   7963 	.area CSEG    (CODE)
                                   7964 	.area CONST   (CODE)
      00003F                       7965 ___str_8:
      00003F 50 53 50 54 4F 50     7966 	.ascii "PSPTOP"
      000045 09                    7967 	.db 0x09
      000046 00                    7968 	.db 0x00
                                   7969 	.area CSEG    (CODE)
                                   7970 	.area CONST   (CODE)
      000047                       7971 ___str_9:
      000047 0D                    7972 	.db 0x0d
      000048 0A                    7973 	.db 0x0a
      000049 73 74 61 63 6B 20 75  7974 	.ascii "stack underflow"
             6E 64 65 72 66 6C 6F
             77
      000058 0D                    7975 	.db 0x0d
      000059 0A                    7976 	.db 0x0a
      00005A 00                    7977 	.db 0x00
                                   7978 	.area CSEG    (CODE)
                                   7979 	.area CONST   (CODE)
      00005B                       7980 ___str_10:
      00005B 0D                    7981 	.db 0x0d
      00005C 0A                    7982 	.db 0x0a
      00005D 73 65 63 6F 6E 64 61  7983 	.ascii "secondary stack overflow"
             72 79 20 73 74 61 63
             6B 20 6F 76 65 72 66
             6C 6F 77
      000075 0D                    7984 	.db 0x0d
      000076 0A                    7985 	.db 0x0a
      000077 00                    7986 	.db 0x00
                                   7987 	.area CSEG    (CODE)
                                   7988 	.area CONST   (CODE)
      000078                       7989 ___str_11:
      000078 0D                    7990 	.db 0x0d
      000079 0A                    7991 	.db 0x0a
      00007A 73 65 63 6F 6E 64 61  7992 	.ascii "secondary stack underflow"
             72 79 20 73 74 61 63
             6B 20 75 6E 64 65 72
             66 6C 6F 77
      000093 0D                    7993 	.db 0x0d
      000094 0A                    7994 	.db 0x0a
      000095 00                    7995 	.db 0x00
                                   7996 	.area CSEG    (CODE)
                                   7997 	.area CONST   (CODE)
      000096                       7998 ___str_12:
      000096 0D                    7999 	.db 0x0d
      000097 0A                    8000 	.db 0x0a
      000098 73 74 61 63 6B 20 6F  8001 	.ascii "stack overflow"
             76 65 72 66 6C 6F 77
      0000A6 0D                    8002 	.db 0x0d
      0000A7 0A                    8003 	.db 0x0a
      0000A8 00                    8004 	.db 0x00
                                   8005 	.area CSEG    (CODE)
                                   8006 	.area CONST   (CODE)
      0000A9                       8007 ___str_13:
      0000A9 0D                    8008 	.db 0x0d
      0000AA 0A                    8009 	.db 0x0a
      0000AB 64 69 76 69 73 69 6F  8010 	.ascii "division by zero"
             6E 20 62 79 20 7A 65
             72 6F
      0000BB 0D                    8011 	.db 0x0d
      0000BC 0A                    8012 	.db 0x0a
      0000BD 00                    8013 	.db 0x00
                                   8014 	.area CSEG    (CODE)
                                   8015 	.area CONST   (CODE)
      0000BE                       8016 ___str_14:
      0000BE 0D                    8017 	.db 0x0d
      0000BF 0A                    8018 	.db 0x0a
      0000C0 50 53 20 3D 20 25 70  8019 	.ascii "PS = %p, SS = %p, base = %d"
             2C 20 53 53 20 3D 20
             25 70 2C 20 62 61 73
             65 20 3D 20 25 64
      0000DB 0D                    8020 	.db 0x0d
      0000DC 0A                    8021 	.db 0x0a
      0000DD 00                    8022 	.db 0x00
                                   8023 	.area CSEG    (CODE)
                                   8024 	.area CONST   (CODE)
      0000DE                       8025 ___str_15:
      0000DE 41 43 43              8026 	.ascii "ACC"
      0000E1 09                    8027 	.db 0x09
      0000E2 00                    8028 	.db 0x00
                                   8029 	.area CSEG    (CODE)
                                   8030 	.area CONST   (CODE)
      0000E3                       8031 ___str_16:
      0000E3 0D                    8032 	.db 0x0d
      0000E4 0A                    8033 	.db 0x0a
      0000E5 50 53 54 4F 50 31     8034 	.ascii "PSTOP1"
      0000EB 09                    8035 	.db 0x09
      0000EC 00                    8036 	.db 0x00
                                   8037 	.area CSEG    (CODE)
                                   8038 	.area CONST   (CODE)
      0000ED                       8039 ___str_17:
      0000ED 0D                    8040 	.db 0x0d
      0000EE 0A                    8041 	.db 0x0a
      0000EF 50 53 54 4F 50 30     8042 	.ascii "PSTOP0"
      0000F5 09                    8043 	.db 0x09
      0000F6 00                    8044 	.db 0x00
                                   8045 	.area CSEG    (CODE)
                                   8046 	.area CONST   (CODE)
      0000F7                       8047 ___str_18:
      0000F7 0D                    8048 	.db 0x0d
      0000F8 0A                    8049 	.db 0x0a
      0000F9 53 53 54 4F 50 31     8050 	.ascii "SSTOP1"
      0000FF 09                    8051 	.db 0x09
      000100 00                    8052 	.db 0x00
                                   8053 	.area CSEG    (CODE)
                                   8054 	.area CONST   (CODE)
      000101                       8055 ___str_19:
      000101 0D                    8056 	.db 0x0d
      000102 0A                    8057 	.db 0x0a
      000103 53 53 54 4F 50 30     8058 	.ascii "SSTOP0"
      000109 09                    8059 	.db 0x09
      00010A 00                    8060 	.db 0x00
                                   8061 	.area CSEG    (CODE)
                                   8062 	.area CONST   (CODE)
      00010B                       8063 ___str_20:
      00010B 0D                    8064 	.db 0x0d
      00010C 0A                    8065 	.db 0x0a
      00010D 48 68 4F 6F           8066 	.ascii "HhOo"
      000111 09                    8067 	.db 0x09
      000112 62 61 73 65 20 31 36  8068 	.ascii "base 16 10 8 2"
             20 31 30 20 38 20 32
      000120 0D                    8069 	.db 0x0d
      000121 0A                    8070 	.db 0x0a
      000122 00                    8071 	.db 0x00
                                   8072 	.area CSEG    (CODE)
                                   8073 	.area CONST   (CODE)
      000123                       8074 ___str_21:
      000123 70 2E                 8075 	.ascii "p."
      000125 09                    8076 	.db 0x09
      000126 70 6F 70 20 74 6F 70  8077 	.ascii "pop top"
      00012D 0D                    8078 	.db 0x0d
      00012E 0A                    8079 	.db 0x0a
      00012F 00                    8080 	.db 0x00
                                   8081 	.area CSEG    (CODE)
                                   8082 	.area CONST   (CODE)
      000130                       8083 ___str_22:
      000130 50                    8084 	.ascii "P"
      000131 09                    8085 	.db 0x09
      000132 70 6F 70 20 73 74 61  8086 	.ascii "pop stack"
             63 6B
      00013B 0D                    8087 	.db 0x0d
      00013C 0A                    8088 	.db 0x0a
      00013D 00                    8089 	.db 0x00
                                   8090 	.area CSEG    (CODE)
                                   8091 	.area CONST   (CODE)
      00013E                       8092 ___str_23:
      00013E 76                    8093 	.ascii "v"
      00013F 09                    8094 	.db 0x09
      000140 70 65 65 6B 20 74 6F  8095 	.ascii "peek top"
             70
      000148 0D                    8096 	.db 0x0d
      000149 0A                    8097 	.db 0x0a
      00014A 00                    8098 	.db 0x00
                                   8099 	.area CSEG    (CODE)
                                   8100 	.area CONST   (CODE)
      00014B                       8101 ___str_24:
      00014B 56                    8102 	.ascii "V"
      00014C 09                    8103 	.db 0x09
      00014D 70 65 65 6B 20 73 74  8104 	.ascii "peek stack"
             61 63 6B
      000157 0D                    8105 	.db 0x0d
      000158 0A                    8106 	.db 0x0a
      000159 00                    8107 	.db 0x00
                                   8108 	.area CSEG    (CODE)
                                   8109 	.area CONST   (CODE)
      00015A                       8110 ___str_25:
      00015A 69                    8111 	.ascii "i"
      00015B 09                    8112 	.db 0x09
      00015C 72 65 73 65 74 20 61  8113 	.ascii "reset acc"
             63 63
      000165 0D                    8114 	.db 0x0d
      000166 0A                    8115 	.db 0x0a
      000167 00                    8116 	.db 0x00
                                   8117 	.area CSEG    (CODE)
                                   8118 	.area CONST   (CODE)
      000168                       8119 ___str_26:
      000168 49                    8120 	.ascii "I"
      000169 09                    8121 	.db 0x09
      00016A 72 65 73 65 74 20 61  8122 	.ascii "reset and discard acc"
             6E 64 20 64 69 73 63
             61 72 64 20 61 63 63
      00017F 0D                    8123 	.db 0x0d
      000180 0A                    8124 	.db 0x0a
      000181 00                    8125 	.db 0x00
                                   8126 	.area CSEG    (CODE)
                                   8127 	.area CONST   (CODE)
      000182                       8128 ___str_27:
      000182 78                    8129 	.ascii "x"
      000183 09                    8130 	.db 0x09
      000184 65 78 63 68 61 6E 67  8131 	.ascii "exchange top 2"
             65 20 74 6F 70 20 32
      000192 0D                    8132 	.db 0x0d
      000193 0A                    8133 	.db 0x0a
      000194 00                    8134 	.db 0x00
                                   8135 	.area CSEG    (CODE)
                                   8136 	.area CONST   (CODE)
      000195                       8137 ___str_28:
      000195 58                    8138 	.ascii "X"
      000196 09                    8139 	.db 0x09
      000197 65 78 63 68 61 6E 67  8140 	.ascii "exchange stacks primary <-> secondary"
             65 20 73 74 61 63 6B
             73 20 70 72 69 6D 61
             72 79 20 3C 2D 3E 20
             73 65 63 6F 6E 64 61
             72 79
      0001BC 0D                    8141 	.db 0x0d
      0001BD 0A                    8142 	.db 0x0a
      0001BE 00                    8143 	.db 0x00
                                   8144 	.area CSEG    (CODE)
                                   8145 	.area CONST   (CODE)
      0001BF                       8146 ___str_29:
      0001BF 54                    8147 	.ascii "T"
      0001C0 09                    8148 	.db 0x09
      0001C1 65 78 63 68 61 6E 67  8149 	.ascii "exchange tops primary <-> secondary"
             65 20 74 6F 70 73 20
             70 72 69 6D 61 72 79
             20 3C 2D 3E 20 73 65
             63 6F 6E 64 61 72 79
      0001E4 0D                    8150 	.db 0x0d
      0001E5 0A                    8151 	.db 0x0a
      0001E6 00                    8152 	.db 0x00
                                   8153 	.area CSEG    (CODE)
                                   8154 	.area CONST   (CODE)
      0001E7                       8155 ___str_30:
      0001E7 55                    8156 	.ascii "U"
      0001E8 09                    8157 	.db 0x09
      0001E9 63 6F 70 79 20 74 6F  8158 	.ascii "copy top secondary -> primary"
             70 20 73 65 63 6F 6E
             64 61 72 79 20 2D 3E
             20 70 72 69 6D 61 72
             79
      000206 0D                    8159 	.db 0x0d
      000207 0A                    8160 	.db 0x0a
      000208 00                    8161 	.db 0x00
                                   8162 	.area CSEG    (CODE)
                                   8163 	.area CONST   (CODE)
      000209                       8164 ___str_31:
      000209 75                    8165 	.ascii "u"
      00020A 09                    8166 	.db 0x09
      00020B 63 6F 70 79 20 74 6F  8167 	.ascii "copy top primary -> secondary"
             70 20 70 72 69 6D 61
             72 79 20 2D 3E 20 73
             65 63 6F 6E 64 61 72
             79
      000228 0D                    8168 	.db 0x0d
      000229 0A                    8169 	.db 0x0a
      00022A 00                    8170 	.db 0x00
                                   8171 	.area CSEG    (CODE)
                                   8172 	.area CONST   (CODE)
      00022B                       8173 ___str_32:
      00022B 4D                    8174 	.ascii "M"
      00022C 09                    8175 	.db 0x09
      00022D 6D 6F 76 65 20 74 6F  8176 	.ascii "move top secondary -> primary"
             70 20 73 65 63 6F 6E
             64 61 72 79 20 2D 3E
             20 70 72 69 6D 61 72
             79
      00024A 0D                    8177 	.db 0x0d
      00024B 0A                    8178 	.db 0x0a
      00024C 00                    8179 	.db 0x00
                                   8180 	.area CSEG    (CODE)
                                   8181 	.area CONST   (CODE)
      00024D                       8182 ___str_33:
      00024D 6D                    8183 	.ascii "m"
      00024E 09                    8184 	.db 0x09
      00024F 6D 6F 76 65 20 74 6F  8185 	.ascii "move top primary -> secondary"
             70 20 70 72 69 6D 61
             72 79 20 2D 3E 20 73
             65 63 6F 6E 64 61 72
             79
      00026C 0D                    8186 	.db 0x0d
      00026D 0A                    8187 	.db 0x0a
      00026E 00                    8188 	.db 0x00
                                   8189 	.area CSEG    (CODE)
                                   8190 	.area CONST   (CODE)
      00026F                       8191 ___str_34:
      00026F 2B                    8192 	.ascii "+"
      000270 09                    8193 	.db 0x09
      000271 61 64 64 20 74 6F 70  8194 	.ascii "add top 2"
             20 32
      00027A 0D                    8195 	.db 0x0d
      00027B 0A                    8196 	.db 0x0a
      00027C 00                    8197 	.db 0x00
                                   8198 	.area CSEG    (CODE)
                                   8199 	.area CONST   (CODE)
      00027D                       8200 ___str_35:
      00027D 2D                    8201 	.ascii "-"
      00027E 09                    8202 	.db 0x09
      00027F 73 75 62 74 72 61 63  8203 	.ascii "subtract top 2"
             74 20 74 6F 70 20 32
      00028D 0D                    8204 	.db 0x0d
      00028E 0A                    8205 	.db 0x0a
      00028F 00                    8206 	.db 0x00
                                   8207 	.area CSEG    (CODE)
                                   8208 	.area CONST   (CODE)
      000290                       8209 ___str_36:
      000290 2A                    8210 	.ascii "*"
      000291 09                    8211 	.db 0x09
      000292 6D 75 6C 74 69 70 6C  8212 	.ascii "multiply top 2"
             79 20 74 6F 70 20 32
      0002A0 0D                    8213 	.db 0x0d
      0002A1 0A                    8214 	.db 0x0a
      0002A2 00                    8215 	.db 0x00
                                   8216 	.area CSEG    (CODE)
                                   8217 	.area CONST   (CODE)
      0002A3                       8218 ___str_37:
      0002A3 2F                    8219 	.ascii "/"
      0002A4 09                    8220 	.db 0x09
      0002A5 64 69 76 69 64 65 20  8221 	.ascii "divide top 2"
             74 6F 70 20 32
      0002B1 0D                    8222 	.db 0x0d
      0002B2 0A                    8223 	.db 0x0a
      0002B3 00                    8224 	.db 0x00
                                   8225 	.area CSEG    (CODE)
                                   8226 	.area CONST   (CODE)
      0002B4                       8227 ___str_38:
      0002B4 5C                    8228 	.db 0x5c
      0002B5 09                    8229 	.db 0x09
      0002B6 64 69 76 69 64 65 20  8230 	.ascii "divide top 2 unsigned"
             74 6F 70 20 32 20 75
             6E 73 69 67 6E 65 64
      0002CB 0D                    8231 	.db 0x0d
      0002CC 0A                    8232 	.db 0x0a
      0002CD 00                    8233 	.db 0x00
                                   8234 	.area CSEG    (CODE)
                                   8235 	.area CONST   (CODE)
      0002CE                       8236 ___str_39:
      0002CE 25                    8237 	.ascii "%"
      0002CF 09                    8238 	.db 0x09
      0002D0 6D 6F 64 75 6C 75 73  8239 	.ascii "modulus top 2"
             20 74 6F 70 20 32
      0002DD 0D                    8240 	.db 0x0d
      0002DE 0A                    8241 	.db 0x0a
      0002DF 00                    8242 	.db 0x00
                                   8243 	.area CSEG    (CODE)
                                   8244 	.area CONST   (CODE)
      0002E0                       8245 ___str_40:
      0002E0 23                    8246 	.ascii "#"
      0002E1 09                    8247 	.db 0x09
      0002E2 6D 6F 64 75 6C 75 73  8248 	.ascii "modulus top 2 unsigned"
             20 74 6F 70 20 32 20
             75 6E 73 69 67 6E 65
             64
      0002F8 0D                    8249 	.db 0x0d
      0002F9 0A                    8250 	.db 0x0a
      0002FA 00                    8251 	.db 0x00
                                   8252 	.area CSEG    (CODE)
                                   8253 	.area CONST   (CODE)
      0002FB                       8254 ___str_41:
      0002FB 26                    8255 	.ascii "&"
      0002FC 09                    8256 	.db 0x09
      0002FD 61 6E 64 20 74 6F 70  8257 	.ascii "and top 2"
             20 32
      000306 0D                    8258 	.db 0x0d
      000307 0A                    8259 	.db 0x0a
      000308 00                    8260 	.db 0x00
                                   8261 	.area CSEG    (CODE)
                                   8262 	.area CONST   (CODE)
      000309                       8263 ___str_42:
      000309 7C                    8264 	.ascii "|"
      00030A 09                    8265 	.db 0x09
      00030B 6F 72 20 74 6F 70 20  8266 	.ascii "or top 2"
             32
      000313 0D                    8267 	.db 0x0d
      000314 0A                    8268 	.db 0x0a
      000315 00                    8269 	.db 0x00
                                   8270 	.area CSEG    (CODE)
                                   8271 	.area CONST   (CODE)
      000316                       8272 ___str_43:
      000316 5E                    8273 	.ascii "^"
      000317 09                    8274 	.db 0x09
      000318 78 6F 72 20 74 6F 70  8275 	.ascii "xor top 2"
             20 32
      000321 0D                    8276 	.db 0x0d
      000322 0A                    8277 	.db 0x0a
      000323 00                    8278 	.db 0x00
                                   8279 	.area CSEG    (CODE)
                                   8280 	.area CONST   (CODE)
      000324                       8281 ___str_44:
      000324 3E                    8282 	.ascii ">"
      000325 09                    8283 	.db 0x09
      000326 73 68 69 66 74 20 72  8284 	.ascii "shift right top 2"
             69 67 68 74 20 74 6F
             70 20 32
      000337 0D                    8285 	.db 0x0d
      000338 0A                    8286 	.db 0x0a
      000339 00                    8287 	.db 0x00
                                   8288 	.area CSEG    (CODE)
                                   8289 	.area CONST   (CODE)
      00033A                       8290 ___str_45:
      00033A 5D                    8291 	.ascii "]"
      00033B 09                    8292 	.db 0x09
      00033C 61 72 69 74 68 6D 65  8293 	.ascii "arithmetic shift right top 2"
             74 69 63 20 73 68 69
             66 74 20 72 69 67 68
             74 20 74 6F 70 20 32
      000358 0D                    8294 	.db 0x0d
      000359 0A                    8295 	.db 0x0a
      00035A 00                    8296 	.db 0x00
                                   8297 	.area CSEG    (CODE)
                                   8298 	.area CONST   (CODE)
      00035B                       8299 ___str_46:
      00035B 3C                    8300 	.ascii "<"
      00035C 09                    8301 	.db 0x09
      00035D 73 68 69 66 74 20 6C  8302 	.ascii "shift left top 2"
             65 66 74 20 74 6F 70
             20 32
      00036D 0D                    8303 	.db 0x0d
      00036E 0A                    8304 	.db 0x0a
      00036F 00                    8305 	.db 0x00
                                   8306 	.area CSEG    (CODE)
                                   8307 	.area CONST   (CODE)
      000370                       8308 ___str_47:
      000370 7E                    8309 	.ascii "~"
      000371 09                    8310 	.db 0x09
      000372 62 69 74 77 69 73 65  8311 	.ascii "bitwise not top"
             20 6E 6F 74 20 74 6F
             70
      000381 0D                    8312 	.db 0x0d
      000382 0A                    8313 	.db 0x0a
      000383 00                    8314 	.db 0x00
                                   8315 	.area CSEG    (CODE)
                                   8316 	.area CONST   (CODE)
      000384                       8317 ___str_48:
      000384 73                    8318 	.ascii "s"
      000385 09                    8319 	.db 0x09
      000386 73 74 61 74 75 73     8320 	.ascii "status"
      00038C 0D                    8321 	.db 0x0d
      00038D 0A                    8322 	.db 0x0a
      00038E 00                    8323 	.db 0x00
                                   8324 	.area CSEG    (CODE)
                                   8325 	.area CONST   (CODE)
      00038F                       8326 ___str_49:
      00038F 3F                    8327 	.ascii "?"
      000390 09                    8328 	.db 0x09
      000391 68 65 6C 70           8329 	.ascii "help"
      000395 0D                    8330 	.db 0x0d
      000396 0A                    8331 	.db 0x0a
      000397 00                    8332 	.db 0x00
                                   8333 	.area CSEG    (CODE)
                                   8334 	.area CONST   (CODE)
      000398                       8335 ___str_50:
      000398 71                    8336 	.ascii "q"
      000399 09                    8337 	.db 0x09
      00039A 71 75 69 74           8338 	.ascii "quit"
      00039E 0D                    8339 	.db 0x0d
      00039F 0A                    8340 	.db 0x0a
      0003A0 00                    8341 	.db 0x00
                                   8342 	.area CSEG    (CODE)
                                   8343 	.area CONST   (CODE)
      0003A1                       8344 ___str_51:
      0003A1 54 45 52 4D           8345 	.ascii "TERM"
      0003A5 0D                    8346 	.db 0x0d
      0003A6 0A                    8347 	.db 0x0a
      0003A7 00                    8348 	.db 0x00
                                   8349 	.area CSEG    (CODE)
                                   8350 	.area XINIT   (CODE)
      000000                       8351 __xinit__deltas:
      000000 00 00                 8352 	.byte #0x00, #0x00	;  0
      000002 00 00                 8353 	.byte #0x00, #0x00	;  0
      000004 00 00                 8354 	.byte #0x00, #0x00	;  0
      000006 00 00                 8355 	.byte #0x00,#0x00
      000008 00 00                 8356 	.byte #0x00,#0x00
      00000A 00 00                 8357 	.byte #0x00, #0x00	;  0
      00000C 01 00                 8358 	.byte #0x01, #0x00	;  1
      00000E 02 00                 8359 	.byte #0x02, #0x00	;  2
      000010 00 00                 8360 	.byte #0x00,#0x00
      000012r00s00                 8361 	.byte _accumulate, (_accumulate >> 8)
      000014 00 00                 8362 	.byte #0x00, #0x00	;  0
      000016 02 00                 8363 	.byte #0x02, #0x00	;  2
      000018 01 00                 8364 	.byte #0x01, #0x00	;  1
      00001A 00 00                 8365 	.byte #0x00,#0x00
      00001Cr3Bs06                 8366 	.byte _operator, (_operator >> 8)
      00001E 01 00                 8367 	.byte #0x01, #0x00	;  1
      000020 00 00                 8368 	.byte #0x00, #0x00	;  0
      000022 00 00                 8369 	.byte #0x00, #0x00	;  0
      000024 00 00                 8370 	.byte #0x00,#0x00
      000026 00 00                 8371 	.byte #0x00,#0x00
      000028 01 00                 8372 	.byte #0x01, #0x00	;  1
      00002A 02 00                 8373 	.byte #0x02, #0x00	;  2
      00002C 01 00                 8374 	.byte #0x01, #0x00	;  1
      00002E 00 00                 8375 	.byte #0x00,#0x00
      000030r3Bs06                 8376 	.byte _operator, (_operator >> 8)
      000032 01 00                 8377 	.byte #0x01, #0x00	;  1
      000034 01 00                 8378 	.byte #0x01, #0x00	;  1
      000036 02 00                 8379 	.byte #0x02, #0x00	;  2
      000038 00 00                 8380 	.byte #0x00,#0x00
      00003Ar00s00                 8381 	.byte _accumulate, (_accumulate >> 8)
      00003C 02 00                 8382 	.byte #0x02, #0x00	;  2
      00003E 00 00                 8383 	.byte #0x00, #0x00	;  0
      000040 00 00                 8384 	.byte #0x00, #0x00	;  0
      000042 00 00                 8385 	.byte #0x00,#0x00
      000044rB0s23                 8386 	.byte _push_acc, (_push_acc >> 8)
      000046 02 00                 8387 	.byte #0x02, #0x00	;  2
      000048 07 00                 8388 	.byte #0x07, #0x00	;  7
      00004A 00 00                 8389 	.byte #0x00, #0x00	;  0
      00004C 00 00                 8390 	.byte #0x00,#0x00
      00004ErBAs24                 8391 	.byte _reset_acc, (_reset_acc >> 8)
      000050 02 00                 8392 	.byte #0x02, #0x00	;  2
      000052 01 00                 8393 	.byte #0x01, #0x00	;  1
      000054 02 00                 8394 	.byte #0x02, #0x00	;  2
      000056 00 00                 8395 	.byte #0x00,#0x00
      000058r00s00                 8396 	.byte _accumulate, (_accumulate >> 8)
      00005A 02 00                 8397 	.byte #0x02, #0x00	;  2
      00005C 02 00                 8398 	.byte #0x02, #0x00	;  2
      00005E 01 00                 8399 	.byte #0x01, #0x00	;  1
      000060 00 00                 8400 	.byte #0x00,#0x00
      000062rB0s23                 8401 	.byte _push_acc, (_push_acc >> 8)
      000064 FF 7F                 8402 	.byte #0xff, #0x7f	;  32767
      000066 06 00                 8403 	.byte #0x06, #0x00	;  6
      000068 FF 7F                 8404 	.byte #0xff, #0x7f	;  32767
      00006A 00 00                 8405 	.byte #0x00,#0x00
      00006CrBAs24                 8406 	.byte _reset_acc, (_reset_acc >> 8)
      00006E FF 7F                 8407 	.byte #0xff, #0x7f	;  32767
      000070 07 00                 8408 	.byte #0x07, #0x00	;  7
      000072 FF 7F                 8409 	.byte #0xff, #0x7f	;  32767
      000074 00 00                 8410 	.byte #0x00,#0x00
      000076 00 00                 8411 	.byte #0x00,#0x00
      000078 FF 7F                 8412 	.byte #0xff, #0x7f	;  32767
      00007A 05 00                 8413 	.byte #0x05, #0x00	;  5
      00007C FF 7F                 8414 	.byte #0xff, #0x7f	;  32767
      00007E 00 00                 8415 	.byte #0x00,#0x00
      000080r24s25                 8416 	.byte _reset_base, (_reset_base >> 8)
      000082 FF 7F                 8417 	.byte #0xff, #0x7f	;  32767
      000084 03 00                 8418 	.byte #0x03, #0x00	;  3
      000086 FF 7F                 8419 	.byte #0xff, #0x7f	;  32767
      000088 00 00                 8420 	.byte #0x00,#0x00
      00008ArA2s25                 8421 	.byte _status, (_status >> 8)
      00008C FF 7F                 8422 	.byte #0xff, #0x7f	;  32767
      00008E 04 00                 8423 	.byte #0x04, #0x00	;  4
      000090 FF 7F                 8424 	.byte #0xff, #0x7f	;  32767
      000092 00 00                 8425 	.byte #0x00,#0x00
      000094rD0s2A                 8426 	.byte _help, (_help >> 8)
      000096 FF 7F                 8427 	.byte #0xff, #0x7f	;  32767
      000098 08 00                 8428 	.byte #0x08, #0x00	;  8
      00009A 03 00                 8429 	.byte #0x03, #0x00	;  3
      00009C 00 00                 8430 	.byte #0x00,#0x00
      00009Er71s01                 8431 	.byte _dump_pop, (_dump_pop >> 8)
      0000A0 00 80                 8432 	.byte #0x00, #0x80	; -32768
      0000A2 00 80                 8433 	.byte #0x00, #0x80	; -32768
      0000A4 00 80                 8434 	.byte #0x00, #0x80	; -32768
      0000A6 00 00                 8435 	.byte #0x00,#0x00
      0000A8 00 00                 8436 	.byte #0x00,#0x00
                                   8437 	.area CABS    (ABS,CODE)
