                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module calc
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _getchar_poll
                                     13 	.globl _state_exec
                                     14 	.globl _state_init
                                     15 	.globl _stack_iter_peek
                                     16 	.globl _stack_peek2
                                     17 	.globl _stack_peek
                                     18 	.globl _stack_pop
                                     19 	.globl _stack_push
                                     20 	.globl _stack_init
                                     21 	.globl _isxdigit
                                     22 	.globl _printf
                                     23 	.globl _strtol
                                     24 	.globl _CY
                                     25 	.globl _AC
                                     26 	.globl _F0
                                     27 	.globl _RS1
                                     28 	.globl _RS0
                                     29 	.globl _OV
                                     30 	.globl _FL
                                     31 	.globl _P
                                     32 	.globl _TF2
                                     33 	.globl _EXF2
                                     34 	.globl _RCLK
                                     35 	.globl _TCLK
                                     36 	.globl _EXEN2
                                     37 	.globl _TR2
                                     38 	.globl _C_T2
                                     39 	.globl _CP_RL2
                                     40 	.globl _T2CON_7
                                     41 	.globl _T2CON_6
                                     42 	.globl _T2CON_5
                                     43 	.globl _T2CON_4
                                     44 	.globl _T2CON_3
                                     45 	.globl _T2CON_2
                                     46 	.globl _T2CON_1
                                     47 	.globl _T2CON_0
                                     48 	.globl _PT2
                                     49 	.globl _PS
                                     50 	.globl _PT1
                                     51 	.globl _PX1
                                     52 	.globl _PT0
                                     53 	.globl _PX0
                                     54 	.globl _RD
                                     55 	.globl _WR
                                     56 	.globl _T1
                                     57 	.globl _T0
                                     58 	.globl _INT1
                                     59 	.globl _INT0
                                     60 	.globl _TXD
                                     61 	.globl _RXD
                                     62 	.globl _P3_7
                                     63 	.globl _P3_6
                                     64 	.globl _P3_5
                                     65 	.globl _P3_4
                                     66 	.globl _P3_3
                                     67 	.globl _P3_2
                                     68 	.globl _P3_1
                                     69 	.globl _P3_0
                                     70 	.globl _EA
                                     71 	.globl _ET2
                                     72 	.globl _ES
                                     73 	.globl _ET1
                                     74 	.globl _EX1
                                     75 	.globl _ET0
                                     76 	.globl _EX0
                                     77 	.globl _P2_7
                                     78 	.globl _P2_6
                                     79 	.globl _P2_5
                                     80 	.globl _P2_4
                                     81 	.globl _P2_3
                                     82 	.globl _P2_2
                                     83 	.globl _P2_1
                                     84 	.globl _P2_0
                                     85 	.globl _SM0
                                     86 	.globl _SM1
                                     87 	.globl _SM2
                                     88 	.globl _REN
                                     89 	.globl _TB8
                                     90 	.globl _RB8
                                     91 	.globl _TI
                                     92 	.globl _RI
                                     93 	.globl _T2EX
                                     94 	.globl _T2
                                     95 	.globl _P1_7
                                     96 	.globl _P1_6
                                     97 	.globl _P1_5
                                     98 	.globl _P1_4
                                     99 	.globl _P1_3
                                    100 	.globl _P1_2
                                    101 	.globl _P1_1
                                    102 	.globl _P1_0
                                    103 	.globl _TF1
                                    104 	.globl _TR1
                                    105 	.globl _TF0
                                    106 	.globl _TR0
                                    107 	.globl _IE1
                                    108 	.globl _IT1
                                    109 	.globl _IE0
                                    110 	.globl _IT0
                                    111 	.globl _P0_7
                                    112 	.globl _P0_6
                                    113 	.globl _P0_5
                                    114 	.globl _P0_4
                                    115 	.globl _P0_3
                                    116 	.globl _P0_2
                                    117 	.globl _P0_1
                                    118 	.globl _P0_0
                                    119 	.globl _B
                                    120 	.globl _A
                                    121 	.globl _ACC
                                    122 	.globl _PSW
                                    123 	.globl _TH2
                                    124 	.globl _TL2
                                    125 	.globl _RCAP2H
                                    126 	.globl _RCAP2L
                                    127 	.globl _T2MOD
                                    128 	.globl _T2CON
                                    129 	.globl _IP
                                    130 	.globl _P3
                                    131 	.globl _IE
                                    132 	.globl _P2
                                    133 	.globl _SBUF
                                    134 	.globl _SCON
                                    135 	.globl _P1
                                    136 	.globl _TH1
                                    137 	.globl _TH0
                                    138 	.globl _TL1
                                    139 	.globl _TL0
                                    140 	.globl _TMOD
                                    141 	.globl _TCON
                                    142 	.globl _PCON
                                    143 	.globl _DPH
                                    144 	.globl _DPL
                                    145 	.globl _SP
                                    146 	.globl _P0
                                    147 	.globl _putchar
                                    148 	.globl _getchar
                                    149 ;--------------------------------------------------------
                                    150 ; special function registers
                                    151 ;--------------------------------------------------------
                                    152 	.area RSEG    (ABS,DATA)
      000000                        153 	.org 0x0000
                           000080   154 _P0	=	0x0080
                           000081   155 _SP	=	0x0081
                           000082   156 _DPL	=	0x0082
                           000083   157 _DPH	=	0x0083
                           000087   158 _PCON	=	0x0087
                           000088   159 _TCON	=	0x0088
                           000089   160 _TMOD	=	0x0089
                           00008A   161 _TL0	=	0x008a
                           00008B   162 _TL1	=	0x008b
                           00008C   163 _TH0	=	0x008c
                           00008D   164 _TH1	=	0x008d
                           000090   165 _P1	=	0x0090
                           000098   166 _SCON	=	0x0098
                           000099   167 _SBUF	=	0x0099
                           0000A0   168 _P2	=	0x00a0
                           0000A8   169 _IE	=	0x00a8
                           0000B0   170 _P3	=	0x00b0
                           0000B8   171 _IP	=	0x00b8
                           0000C8   172 _T2CON	=	0x00c8
                           0000C9   173 _T2MOD	=	0x00c9
                           0000CA   174 _RCAP2L	=	0x00ca
                           0000CB   175 _RCAP2H	=	0x00cb
                           0000CC   176 _TL2	=	0x00cc
                           0000CD   177 _TH2	=	0x00cd
                           0000D0   178 _PSW	=	0x00d0
                           0000E0   179 _ACC	=	0x00e0
                           0000E0   180 _A	=	0x00e0
                           0000F0   181 _B	=	0x00f0
                                    182 ;--------------------------------------------------------
                                    183 ; special function bits
                                    184 ;--------------------------------------------------------
                                    185 	.area RSEG    (ABS,DATA)
      000000                        186 	.org 0x0000
                           000080   187 _P0_0	=	0x0080
                           000081   188 _P0_1	=	0x0081
                           000082   189 _P0_2	=	0x0082
                           000083   190 _P0_3	=	0x0083
                           000084   191 _P0_4	=	0x0084
                           000085   192 _P0_5	=	0x0085
                           000086   193 _P0_6	=	0x0086
                           000087   194 _P0_7	=	0x0087
                           000088   195 _IT0	=	0x0088
                           000089   196 _IE0	=	0x0089
                           00008A   197 _IT1	=	0x008a
                           00008B   198 _IE1	=	0x008b
                           00008C   199 _TR0	=	0x008c
                           00008D   200 _TF0	=	0x008d
                           00008E   201 _TR1	=	0x008e
                           00008F   202 _TF1	=	0x008f
                           000090   203 _P1_0	=	0x0090
                           000091   204 _P1_1	=	0x0091
                           000092   205 _P1_2	=	0x0092
                           000093   206 _P1_3	=	0x0093
                           000094   207 _P1_4	=	0x0094
                           000095   208 _P1_5	=	0x0095
                           000096   209 _P1_6	=	0x0096
                           000097   210 _P1_7	=	0x0097
                           000090   211 _T2	=	0x0090
                           000091   212 _T2EX	=	0x0091
                           000098   213 _RI	=	0x0098
                           000099   214 _TI	=	0x0099
                           00009A   215 _RB8	=	0x009a
                           00009B   216 _TB8	=	0x009b
                           00009C   217 _REN	=	0x009c
                           00009D   218 _SM2	=	0x009d
                           00009E   219 _SM1	=	0x009e
                           00009F   220 _SM0	=	0x009f
                           0000A0   221 _P2_0	=	0x00a0
                           0000A1   222 _P2_1	=	0x00a1
                           0000A2   223 _P2_2	=	0x00a2
                           0000A3   224 _P2_3	=	0x00a3
                           0000A4   225 _P2_4	=	0x00a4
                           0000A5   226 _P2_5	=	0x00a5
                           0000A6   227 _P2_6	=	0x00a6
                           0000A7   228 _P2_7	=	0x00a7
                           0000A8   229 _EX0	=	0x00a8
                           0000A9   230 _ET0	=	0x00a9
                           0000AA   231 _EX1	=	0x00aa
                           0000AB   232 _ET1	=	0x00ab
                           0000AC   233 _ES	=	0x00ac
                           0000AD   234 _ET2	=	0x00ad
                           0000AF   235 _EA	=	0x00af
                           0000B0   236 _P3_0	=	0x00b0
                           0000B1   237 _P3_1	=	0x00b1
                           0000B2   238 _P3_2	=	0x00b2
                           0000B3   239 _P3_3	=	0x00b3
                           0000B4   240 _P3_4	=	0x00b4
                           0000B5   241 _P3_5	=	0x00b5
                           0000B6   242 _P3_6	=	0x00b6
                           0000B7   243 _P3_7	=	0x00b7
                           0000B0   244 _RXD	=	0x00b0
                           0000B1   245 _TXD	=	0x00b1
                           0000B2   246 _INT0	=	0x00b2
                           0000B3   247 _INT1	=	0x00b3
                           0000B4   248 _T0	=	0x00b4
                           0000B5   249 _T1	=	0x00b5
                           0000B6   250 _WR	=	0x00b6
                           0000B7   251 _RD	=	0x00b7
                           0000B8   252 _PX0	=	0x00b8
                           0000B9   253 _PT0	=	0x00b9
                           0000BA   254 _PX1	=	0x00ba
                           0000BB   255 _PT1	=	0x00bb
                           0000BC   256 _PS	=	0x00bc
                           0000BD   257 _PT2	=	0x00bd
                           0000C8   258 _T2CON_0	=	0x00c8
                           0000C9   259 _T2CON_1	=	0x00c9
                           0000CA   260 _T2CON_2	=	0x00ca
                           0000CB   261 _T2CON_3	=	0x00cb
                           0000CC   262 _T2CON_4	=	0x00cc
                           0000CD   263 _T2CON_5	=	0x00cd
                           0000CE   264 _T2CON_6	=	0x00ce
                           0000CF   265 _T2CON_7	=	0x00cf
                           0000C8   266 _CP_RL2	=	0x00c8
                           0000C9   267 _C_T2	=	0x00c9
                           0000CA   268 _TR2	=	0x00ca
                           0000CB   269 _EXEN2	=	0x00cb
                           0000CC   270 _TCLK	=	0x00cc
                           0000CD   271 _RCLK	=	0x00cd
                           0000CE   272 _EXF2	=	0x00ce
                           0000CF   273 _TF2	=	0x00cf
                           0000D0   274 _P	=	0x00d0
                           0000D1   275 _FL	=	0x00d1
                           0000D2   276 _OV	=	0x00d2
                           0000D3   277 _RS0	=	0x00d3
                           0000D4   278 _RS1	=	0x00d4
                           0000D5   279 _F0	=	0x00d5
                           0000D6   280 _AC	=	0x00d6
                           0000D7   281 _CY	=	0x00d7
                                    282 ;--------------------------------------------------------
                                    283 ; overlayable register banks
                                    284 ;--------------------------------------------------------
                                    285 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        286 	.ds 8
                                    287 ;--------------------------------------------------------
                                    288 ; internal ram data
                                    289 ;--------------------------------------------------------
                                    290 	.area DSEG    (DATA)
                                    291 ;--------------------------------------------------------
                                    292 ; overlayable items in internal ram 
                                    293 ;--------------------------------------------------------
                                    294 ;--------------------------------------------------------
                                    295 ; Stack segment in internal ram 
                                    296 ;--------------------------------------------------------
                                    297 	.area	SSEG
      000000                        298 __start__stack:
      000000                        299 	.ds	1
                                    300 
                                    301 ;--------------------------------------------------------
                                    302 ; indirectly addressable internal ram data
                                    303 ;--------------------------------------------------------
                                    304 	.area ISEG    (DATA)
                                    305 ;--------------------------------------------------------
                                    306 ; absolute internal ram data
                                    307 ;--------------------------------------------------------
                                    308 	.area IABS    (ABS,DATA)
                                    309 	.area IABS    (ABS,DATA)
                                    310 ;--------------------------------------------------------
                                    311 ; bit data
                                    312 ;--------------------------------------------------------
                                    313 	.area BSEG    (BIT)
                                    314 ;--------------------------------------------------------
                                    315 ; paged external ram data
                                    316 ;--------------------------------------------------------
                                    317 	.area PSEG    (PAG,XDATA)
                                    318 ;--------------------------------------------------------
                                    319 ; external ram data
                                    320 ;--------------------------------------------------------
                                    321 	.area XSEG    (XDATA)
      000000                        322 _s:
      000000                        323 	.ds 12
      00000C                        324 _c:
      00000C                        325 	.ds 16409
                                    326 ;--------------------------------------------------------
                                    327 ; absolute external ram data
                                    328 ;--------------------------------------------------------
                                    329 	.area XABS    (ABS,XDATA)
                                    330 ;--------------------------------------------------------
                                    331 ; external initialized ram data
                                    332 ;--------------------------------------------------------
                                    333 	.area XISEG   (XDATA)
      000000                        334 _deltas:
      000000                        335 	.ds 170
                                    336 	.area HOME    (CODE)
                                    337 	.area GSINIT0 (CODE)
                                    338 	.area GSINIT1 (CODE)
                                    339 	.area GSINIT2 (CODE)
                                    340 	.area GSINIT3 (CODE)
                                    341 	.area GSINIT4 (CODE)
                                    342 	.area GSINIT5 (CODE)
                                    343 	.area GSINIT  (CODE)
                                    344 	.area GSFINAL (CODE)
                                    345 	.area CSEG    (CODE)
                                    346 ;--------------------------------------------------------
                                    347 ; interrupt vector 
                                    348 ;--------------------------------------------------------
                                    349 	.area HOME    (CODE)
      000000                        350 __interrupt_vect:
      000000 02r00r00         [24]  351 	ljmp	__sdcc_gsinit_startup
                                    352 ;--------------------------------------------------------
                                    353 ; global & static initialisations
                                    354 ;--------------------------------------------------------
                                    355 	.area HOME    (CODE)
                                    356 	.area GSINIT  (CODE)
                                    357 	.area GSFINAL (CODE)
                                    358 	.area GSINIT  (CODE)
                                    359 	.globl __sdcc_gsinit_startup
                                    360 	.globl __sdcc_program_startup
                                    361 	.globl __start__stack
                                    362 	.globl __mcs51_genXINIT
                                    363 	.globl __mcs51_genXRAMCLEAR
                                    364 	.globl __mcs51_genRAMCLEAR
                                    365 	.area GSFINAL (CODE)
      000000 02r00r03         [24]  366 	ljmp	__sdcc_program_startup
                                    367 ;--------------------------------------------------------
                                    368 ; Home
                                    369 ;--------------------------------------------------------
                                    370 	.area HOME    (CODE)
                                    371 	.area HOME    (CODE)
      000003                        372 __sdcc_program_startup:
      000003 02r38rCE         [24]  373 	ljmp	_main
                                    374 ;	return from main will return to caller
                                    375 ;--------------------------------------------------------
                                    376 ; code
                                    377 ;--------------------------------------------------------
                                    378 	.area CSEG    (CODE)
                                    379 ;------------------------------------------------------------
                                    380 ;Allocation info for local variables in function 'putchar'
                                    381 ;------------------------------------------------------------
                                    382 ;c                         Allocated to registers 
                                    383 ;------------------------------------------------------------
                                    384 ;	calc.c:16: int putchar(int c) __naked {
                                    385 ;	-----------------------------------------
                                    386 ;	 function putchar
                                    387 ;	-----------------------------------------
      000000                        388 _putchar:
                                    389 ;	naked function: no prologue.
                                    390 ;	calc.c:21: __endasm;
      000000 E5 82            [12]  391 	mov	a, dpl
      000002 02 00 30         [24]  392 	ljmp	0x0030
                                    393 ;	calc.c:22: }
                                    394 ;	naked function: no epilogue.
                                    395 ;------------------------------------------------------------
                                    396 ;Allocation info for local variables in function 'getchar'
                                    397 ;------------------------------------------------------------
                                    398 ;	calc.c:24: int getchar(void) __naked {
                                    399 ;	-----------------------------------------
                                    400 ;	 function getchar
                                    401 ;	-----------------------------------------
      000005                        402 _getchar:
                                    403 ;	naked function: no prologue.
                                    404 ;	calc.c:30: __endasm;
      000005 12 00 32         [24]  405 	lcall	0x0032
      000008 F5 82            [12]  406 	mov	dpl, a
      00000A 75 83 00         [24]  407 	mov	dph, #0
      00000D 22               [24]  408 	ret
                                    409 ;	calc.c:31: }
                                    410 ;	naked function: no epilogue.
                                    411 ;------------------------------------------------------------
                                    412 ;Allocation info for local variables in function 'getchar_poll'
                                    413 ;------------------------------------------------------------
                                    414 ;	calc.c:33: int getchar_poll(void) __naked {
                                    415 ;	-----------------------------------------
                                    416 ;	 function getchar_poll
                                    417 ;	-----------------------------------------
      00000E                        418 _getchar_poll:
                                    419 ;	naked function: no prologue.
                                    420 ;	calc.c:45: __endasm;
      00000E 74 FF            [12]  421 	mov	a, #0xff
      000010 F5 F0            [12]  422 	mov	b, a
      000012 30 98 07         [24]  423 	jnb	ri, nochar
      000015 C2 98            [12]  424 	clr	ri
      000017 E5 99            [12]  425 	mov	a, sbuf
      000019 75 F0 00         [24]  426 	mov	b, #0
      00001C                        427 	nochar:
      00001C F5 82            [12]  428 	mov	dpl, a
      00001E 85 F0 83         [24]  429 	mov	dph, b
      000021 22               [24]  430 	ret
                                    431 ;	calc.c:46: }
                                    432 ;	naked function: no epilogue.
                                    433 ;------------------------------------------------------------
                                    434 ;Allocation info for local variables in function 'accumulate'
                                    435 ;------------------------------------------------------------
                                    436 ;delta                     Allocated to stack - _bp -5
                                    437 ;_ctx                      Allocated to registers r5 r6 r7 
                                    438 ;ctx                       Allocated to stack - _bp +8
                                    439 ;d                         Allocated to stack - _bp +11
                                    440 ;sloc0                     Allocated to stack - _bp +1
                                    441 ;sloc1                     Allocated to stack - _bp +4
                                    442 ;------------------------------------------------------------
                                    443 ;	calc.c:63: static int accumulate(void *_ctx, delta_t *delta) __reentrant {
                                    444 ;	-----------------------------------------
                                    445 ;	 function accumulate
                                    446 ;	-----------------------------------------
      000022                        447 _accumulate:
                           000007   448 	ar7 = 0x07
                           000006   449 	ar6 = 0x06
                           000005   450 	ar5 = 0x05
                           000004   451 	ar4 = 0x04
                           000003   452 	ar3 = 0x03
                           000002   453 	ar2 = 0x02
                           000001   454 	ar1 = 0x01
                           000000   455 	ar0 = 0x00
      000022 C0*00            [24]  456 	push	_bp
      000024 E5 81            [12]  457 	mov	a,sp
      000026 F5*00            [12]  458 	mov	_bp,a
      000028 24 0E            [12]  459 	add	a,#0x0e
      00002A F5 81            [12]  460 	mov	sp,a
      00002C AD 82            [24]  461 	mov	r5,dpl
      00002E AE 83            [24]  462 	mov	r6,dph
      000030 AF F0            [24]  463 	mov	r7,b
                                    464 ;	calc.c:64: calc_ctx_t *ctx = (calc_ctx_t *)_ctx;
      000032 E5*00            [12]  465 	mov	a,_bp
      000034 24 08            [12]  466 	add	a,#0x08
      000036 F8               [12]  467 	mov	r0,a
      000037 A6 05            [24]  468 	mov	@r0,ar5
      000039 08               [12]  469 	inc	r0
      00003A A6 06            [24]  470 	mov	@r0,ar6
      00003C 08               [12]  471 	inc	r0
      00003D A6 07            [24]  472 	mov	@r0,ar7
                                    473 ;	calc.c:69: if (!ctx->acc_valid) {
      00003F E5*00            [12]  474 	mov	a,_bp
      000041 24 08            [12]  475 	add	a,#0x08
      000043 F8               [12]  476 	mov	r0,a
      000044 74 06            [12]  477 	mov	a,#0x06
      000046 26               [12]  478 	add	a,@r0
      000047 FA               [12]  479 	mov	r2,a
      000048 E4               [12]  480 	clr	a
      000049 08               [12]  481 	inc	r0
      00004A 36               [12]  482 	addc	a,@r0
      00004B FB               [12]  483 	mov	r3,a
      00004C 08               [12]  484 	inc	r0
      00004D 86 04            [24]  485 	mov	ar4,@r0
      00004F 8A 82            [24]  486 	mov	dpl,r2
      000051 8B 83            [24]  487 	mov	dph,r3
      000053 8C F0            [24]  488 	mov	b,r4
      000055 12r00r00         [24]  489 	lcall	__gptrget
      000058 70 31            [24]  490 	jnz	00102$
                                    491 ;	calc.c:70: ctx->acc_valid = 1;
      00005A 8A 82            [24]  492 	mov	dpl,r2
      00005C 8B 83            [24]  493 	mov	dph,r3
      00005E 8C F0            [24]  494 	mov	b,r4
      000060 74 01            [12]  495 	mov	a,#0x01
      000062 12r00r00         [24]  496 	lcall	__gptrput
                                    497 ;	calc.c:71: ctx->acc = 0l;
      000065 E5*00            [12]  498 	mov	a,_bp
      000067 24 08            [12]  499 	add	a,#0x08
      000069 F8               [12]  500 	mov	r0,a
      00006A 74 02            [12]  501 	mov	a,#0x02
      00006C 26               [12]  502 	add	a,@r0
      00006D FA               [12]  503 	mov	r2,a
      00006E E4               [12]  504 	clr	a
      00006F 08               [12]  505 	inc	r0
      000070 36               [12]  506 	addc	a,@r0
      000071 FB               [12]  507 	mov	r3,a
      000072 08               [12]  508 	inc	r0
      000073 86 04            [24]  509 	mov	ar4,@r0
      000075 8A 82            [24]  510 	mov	dpl,r2
      000077 8B 83            [24]  511 	mov	dph,r3
      000079 8C F0            [24]  512 	mov	b,r4
      00007B E4               [12]  513 	clr	a
      00007C 12r00r00         [24]  514 	lcall	__gptrput
      00007F A3               [24]  515 	inc	dptr
      000080 12r00r00         [24]  516 	lcall	__gptrput
      000083 A3               [24]  517 	inc	dptr
      000084 12r00r00         [24]  518 	lcall	__gptrput
      000087 A3               [24]  519 	inc	dptr
      000088 12r00r00         [24]  520 	lcall	__gptrput
      00008B                        521 00102$:
                                    522 ;	calc.c:74: d = strtol(ctx->digit, NULL, ctx->base);
      00008B E5*00            [12]  523 	mov	a,_bp
      00008D 24 08            [12]  524 	add	a,#0x08
      00008F F8               [12]  525 	mov	r0,a
      000090 86 82            [24]  526 	mov	dpl,@r0
      000092 08               [12]  527 	inc	r0
      000093 86 83            [24]  528 	mov	dph,@r0
      000095 08               [12]  529 	inc	r0
      000096 86 F0            [24]  530 	mov	b,@r0
      000098 12r00r00         [24]  531 	lcall	__gptrget
      00009B FB               [12]  532 	mov	r3,a
      00009C A3               [24]  533 	inc	dptr
      00009D 12r00r00         [24]  534 	lcall	__gptrget
      0000A0 FC               [12]  535 	mov	r4,a
      0000A1 E5*00            [12]  536 	mov	a,_bp
      0000A3 24 08            [12]  537 	add	a,#0x08
      0000A5 F8               [12]  538 	mov	r0,a
      0000A6 74 07            [12]  539 	mov	a,#0x07
      0000A8 26               [12]  540 	add	a,@r0
      0000A9 FA               [12]  541 	mov	r2,a
      0000AA E4               [12]  542 	clr	a
      0000AB 08               [12]  543 	inc	r0
      0000AC 36               [12]  544 	addc	a,@r0
      0000AD FE               [12]  545 	mov	r6,a
      0000AE 08               [12]  546 	inc	r0
      0000AF 86 07            [24]  547 	mov	ar7,@r0
      0000B1 C0 03            [24]  548 	push	ar3
      0000B3 C0 04            [24]  549 	push	ar4
      0000B5 E4               [12]  550 	clr	a
      0000B6 C0 E0            [24]  551 	push	acc
      0000B8 C0 E0            [24]  552 	push	acc
      0000BA C0 E0            [24]  553 	push	acc
      0000BC 8A 82            [24]  554 	mov	dpl,r2
      0000BE 8E 83            [24]  555 	mov	dph,r6
      0000C0 8F F0            [24]  556 	mov	b,r7
      0000C2 12r00r00         [24]  557 	lcall	_strtol
      0000C5 C8               [12]  558 	xch	a,r0
      0000C6 E5*00            [12]  559 	mov	a,_bp
      0000C8 24 0B            [12]  560 	add	a,#0x0b
      0000CA C8               [12]  561 	xch	a,r0
      0000CB A6 82            [24]  562 	mov	@r0,dpl
      0000CD 08               [12]  563 	inc	r0
      0000CE A6 83            [24]  564 	mov	@r0,dph
      0000D0 08               [12]  565 	inc	r0
      0000D1 A6 F0            [24]  566 	mov	@r0,b
      0000D3 08               [12]  567 	inc	r0
      0000D4 F6               [12]  568 	mov	@r0,a
      0000D5 E5 81            [12]  569 	mov	a,sp
      0000D7 24 FB            [12]  570 	add	a,#0xfb
      0000D9 F5 81            [12]  571 	mov	sp,a
                                    572 ;	calc.c:75: ctx->acc = ctx->acc * (long)ctx->base + d;
      0000DB E5*00            [12]  573 	mov	a,_bp
      0000DD 24 08            [12]  574 	add	a,#0x08
      0000DF F8               [12]  575 	mov	r0,a
      0000E0 A9*00            [24]  576 	mov	r1,_bp
      0000E2 09               [12]  577 	inc	r1
      0000E3 74 02            [12]  578 	mov	a,#0x02
      0000E5 26               [12]  579 	add	a,@r0
      0000E6 F7               [12]  580 	mov	@r1,a
      0000E7 E4               [12]  581 	clr	a
      0000E8 08               [12]  582 	inc	r0
      0000E9 36               [12]  583 	addc	a,@r0
      0000EA 09               [12]  584 	inc	r1
      0000EB F7               [12]  585 	mov	@r1,a
      0000EC 08               [12]  586 	inc	r0
      0000ED 09               [12]  587 	inc	r1
      0000EE E6               [12]  588 	mov	a,@r0
      0000EF F7               [12]  589 	mov	@r1,a
      0000F0 A8*00            [24]  590 	mov	r0,_bp
      0000F2 08               [12]  591 	inc	r0
      0000F3 86 82            [24]  592 	mov	dpl,@r0
      0000F5 08               [12]  593 	inc	r0
      0000F6 86 83            [24]  594 	mov	dph,@r0
      0000F8 08               [12]  595 	inc	r0
      0000F9 86 F0            [24]  596 	mov	b,@r0
      0000FB E5*00            [12]  597 	mov	a,_bp
      0000FD 24 04            [12]  598 	add	a,#0x04
      0000FF F9               [12]  599 	mov	r1,a
      000100 12r00r00         [24]  600 	lcall	__gptrget
      000103 F7               [12]  601 	mov	@r1,a
      000104 A3               [24]  602 	inc	dptr
      000105 12r00r00         [24]  603 	lcall	__gptrget
      000108 09               [12]  604 	inc	r1
      000109 F7               [12]  605 	mov	@r1,a
      00010A A3               [24]  606 	inc	dptr
      00010B 12r00r00         [24]  607 	lcall	__gptrget
      00010E 09               [12]  608 	inc	r1
      00010F F7               [12]  609 	mov	@r1,a
      000110 A3               [24]  610 	inc	dptr
      000111 12r00r00         [24]  611 	lcall	__gptrget
      000114 09               [12]  612 	inc	r1
      000115 F7               [12]  613 	mov	@r1,a
      000116 E5*00            [12]  614 	mov	a,_bp
      000118 24 08            [12]  615 	add	a,#0x08
      00011A F8               [12]  616 	mov	r0,a
      00011B 86 82            [24]  617 	mov	dpl,@r0
      00011D 08               [12]  618 	inc	r0
      00011E 86 83            [24]  619 	mov	dph,@r0
      000120 08               [12]  620 	inc	r0
      000121 86 F0            [24]  621 	mov	b,@r0
      000123 12r00r00         [24]  622 	lcall	__gptrget
      000126 FA               [12]  623 	mov	r2,a
      000127 A3               [24]  624 	inc	dptr
      000128 12r00r00         [24]  625 	lcall	__gptrget
      00012B FB               [12]  626 	mov	r3,a
      00012C 33               [12]  627 	rlc	a
      00012D 95 E0            [12]  628 	subb	a,acc
      00012F FE               [12]  629 	mov	r6,a
      000130 FF               [12]  630 	mov	r7,a
      000131 C0 02            [24]  631 	push	ar2
      000133 C0 03            [24]  632 	push	ar3
      000135 C0 06            [24]  633 	push	ar6
      000137 C0 07            [24]  634 	push	ar7
      000139 E5*00            [12]  635 	mov	a,_bp
      00013B 24 04            [12]  636 	add	a,#0x04
      00013D F8               [12]  637 	mov	r0,a
      00013E 86 82            [24]  638 	mov	dpl,@r0
      000140 08               [12]  639 	inc	r0
      000141 86 83            [24]  640 	mov	dph,@r0
      000143 08               [12]  641 	inc	r0
      000144 86 F0            [24]  642 	mov	b,@r0
      000146 08               [12]  643 	inc	r0
      000147 E6               [12]  644 	mov	a,@r0
      000148 12r00r00         [24]  645 	lcall	__mullong
      00014B AC 82            [24]  646 	mov	r4,dpl
      00014D AD 83            [24]  647 	mov	r5,dph
      00014F AE F0            [24]  648 	mov	r6,b
      000151 FF               [12]  649 	mov	r7,a
      000152 E5 81            [12]  650 	mov	a,sp
      000154 24 FC            [12]  651 	add	a,#0xfc
      000156 F5 81            [12]  652 	mov	sp,a
      000158 E5*00            [12]  653 	mov	a,_bp
      00015A 24 0B            [12]  654 	add	a,#0x0b
      00015C F8               [12]  655 	mov	r0,a
      00015D E6               [12]  656 	mov	a,@r0
      00015E 2C               [12]  657 	add	a,r4
      00015F FC               [12]  658 	mov	r4,a
      000160 08               [12]  659 	inc	r0
      000161 E6               [12]  660 	mov	a,@r0
      000162 3D               [12]  661 	addc	a,r5
      000163 FD               [12]  662 	mov	r5,a
      000164 08               [12]  663 	inc	r0
      000165 E6               [12]  664 	mov	a,@r0
      000166 3E               [12]  665 	addc	a,r6
      000167 FE               [12]  666 	mov	r6,a
      000168 08               [12]  667 	inc	r0
      000169 E6               [12]  668 	mov	a,@r0
      00016A 3F               [12]  669 	addc	a,r7
      00016B FF               [12]  670 	mov	r7,a
      00016C A8*00            [24]  671 	mov	r0,_bp
      00016E 08               [12]  672 	inc	r0
      00016F 86 82            [24]  673 	mov	dpl,@r0
      000171 08               [12]  674 	inc	r0
      000172 86 83            [24]  675 	mov	dph,@r0
      000174 08               [12]  676 	inc	r0
      000175 86 F0            [24]  677 	mov	b,@r0
      000177 EC               [12]  678 	mov	a,r4
      000178 12r00r00         [24]  679 	lcall	__gptrput
      00017B A3               [24]  680 	inc	dptr
      00017C ED               [12]  681 	mov	a,r5
      00017D 12r00r00         [24]  682 	lcall	__gptrput
      000180 A3               [24]  683 	inc	dptr
      000181 EE               [12]  684 	mov	a,r6
      000182 12r00r00         [24]  685 	lcall	__gptrput
      000185 A3               [24]  686 	inc	dptr
      000186 EF               [12]  687 	mov	a,r7
      000187 12r00r00         [24]  688 	lcall	__gptrput
                                    689 ;	calc.c:77: return 1;
      00018A 90 00 01         [24]  690 	mov	dptr,#0x0001
                                    691 ;	calc.c:78: }
      00018D 85*00 81         [24]  692 	mov	sp,_bp
      000190 D0*00            [24]  693 	pop	_bp
      000192 22               [24]  694 	ret
                                    695 ;------------------------------------------------------------
                                    696 ;Allocation info for local variables in function 'dump_pop'
                                    697 ;------------------------------------------------------------
                                    698 ;delta                     Allocated to stack - _bp -5
                                    699 ;_ctx                      Allocated to registers r5 r6 r7 
                                    700 ;ctx                       Allocated to stack - _bp +11
                                    701 ;d                         Allocated to stack - _bp +14
                                    702 ;r                         Allocated to registers r5 r6 
                                    703 ;__1310720001              Allocated to registers 
                                    704 ;s                         Allocated to registers r5 r6 r7 
                                    705 ;__1966080003              Allocated to registers 
                                    706 ;s                         Allocated to registers r4 r5 r6 
                                    707 ;__1966080005              Allocated to registers 
                                    708 ;s                         Allocated to registers r3 r4 r5 
                                    709 ;__1966080007              Allocated to registers r2 r3 r4 r5 
                                    710 ;d                         Allocated to stack - _bp +18
                                    711 ;mask                      Allocated to stack - _bp +22
                                    712 ;__1966080009              Allocated to registers 
                                    713 ;s                         Allocated to registers r3 r4 r5 
                                    714 ;__1966080011              Allocated to registers 
                                    715 ;s                         Allocated to registers r4 r5 r6 
                                    716 ;__3276800013              Allocated to registers 
                                    717 ;s                         Allocated to registers r5 r3 r2 
                                    718 ;__3276800015              Allocated to registers r2 r3 r4 r7 
                                    719 ;d                         Allocated to stack - _bp +18
                                    720 ;mask                      Allocated to stack - _bp +22
                                    721 ;__3276800017              Allocated to registers 
                                    722 ;s                         Allocated to registers r5 r3 r2 
                                    723 ;sloc0                     Allocated to stack - _bp +1
                                    724 ;sloc1                     Allocated to stack - _bp +2
                                    725 ;sloc2                     Allocated to stack - _bp +5
                                    726 ;sloc3                     Allocated to stack - _bp +8
                                    727 ;------------------------------------------------------------
                                    728 ;	calc.c:80: static int dump_pop(void *_ctx, delta_t *delta) __reentrant {
                                    729 ;	-----------------------------------------
                                    730 ;	 function dump_pop
                                    731 ;	-----------------------------------------
      000193                        732 _dump_pop:
      000193 C0*00            [24]  733 	push	_bp
      000195 E5 81            [12]  734 	mov	a,sp
      000197 F5*00            [12]  735 	mov	_bp,a
      000199 24 19            [12]  736 	add	a,#0x19
      00019B F5 81            [12]  737 	mov	sp,a
      00019D AD 82            [24]  738 	mov	r5,dpl
      00019F AE 83            [24]  739 	mov	r6,dph
      0001A1 AF F0            [24]  740 	mov	r7,b
                                    741 ;	calc.c:81: calc_ctx_t *ctx = (calc_ctx_t *)_ctx;
      0001A3 E5*00            [12]  742 	mov	a,_bp
      0001A5 24 0B            [12]  743 	add	a,#0x0b
      0001A7 F8               [12]  744 	mov	r0,a
      0001A8 A6 05            [24]  745 	mov	@r0,ar5
      0001AA 08               [12]  746 	inc	r0
      0001AB A6 06            [24]  747 	mov	@r0,ar6
      0001AD 08               [12]  748 	inc	r0
      0001AE A6 07            [24]  749 	mov	@r0,ar7
                                    750 ;	calc.c:85: if (delta->event == EVENT_TERM) printstr("\r\nPS\r\n");
      0001B0 E5*00            [12]  751 	mov	a,_bp
      0001B2 24 FB            [12]  752 	add	a,#0xfb
      0001B4 F8               [12]  753 	mov	r0,a
      0001B5 86 02            [24]  754 	mov	ar2,@r0
      0001B7 08               [12]  755 	inc	r0
      0001B8 86 03            [24]  756 	mov	ar3,@r0
      0001BA 08               [12]  757 	inc	r0
      0001BB 86 04            [24]  758 	mov	ar4,@r0
      0001BD E5*00            [12]  759 	mov	a,_bp
      0001BF 24 08            [12]  760 	add	a,#0x08
      0001C1 F8               [12]  761 	mov	r0,a
      0001C2 74 02            [12]  762 	mov	a,#0x02
      0001C4 2A               [12]  763 	add	a,r2
      0001C5 F6               [12]  764 	mov	@r0,a
      0001C6 E4               [12]  765 	clr	a
      0001C7 3B               [12]  766 	addc	a,r3
      0001C8 08               [12]  767 	inc	r0
      0001C9 F6               [12]  768 	mov	@r0,a
      0001CA 08               [12]  769 	inc	r0
      0001CB A6 04            [24]  770 	mov	@r0,ar4
      0001CD E5*00            [12]  771 	mov	a,_bp
      0001CF 24 08            [12]  772 	add	a,#0x08
      0001D1 F8               [12]  773 	mov	r0,a
      0001D2 86 82            [24]  774 	mov	dpl,@r0
      0001D4 08               [12]  775 	inc	r0
      0001D5 86 83            [24]  776 	mov	dph,@r0
      0001D7 08               [12]  777 	inc	r0
      0001D8 86 F0            [24]  778 	mov	b,@r0
      0001DA 12r00r00         [24]  779 	lcall	__gptrget
      0001DD FE               [12]  780 	mov	r6,a
      0001DE A3               [24]  781 	inc	dptr
      0001DF 12r00r00         [24]  782 	lcall	__gptrget
      0001E2 FF               [12]  783 	mov	r7,a
      0001E3 BE 08 27         [24]  784 	cjne	r6,#0x08,00102$
      0001E6 BF 00 24         [24]  785 	cjne	r7,#0x00,00102$
      0001E9 7Dr00            [12]  786 	mov	r5,#___str_0
      0001EB 7Es00            [12]  787 	mov	r6,#(___str_0 >> 8)
      0001ED 7F 80            [12]  788 	mov	r7,#0x80
                                    789 ;	calc.c:51: return;
      0001EF                        790 00133$:
                                    791 ;	calc.c:49: for (; *s; s++) putchar(*s);
      0001EF 8D 82            [24]  792 	mov	dpl,r5
      0001F1 8E 83            [24]  793 	mov	dph,r6
      0001F3 8F F0            [24]  794 	mov	b,r7
      0001F5 12r00r00         [24]  795 	lcall	__gptrget
      0001F8 FC               [12]  796 	mov	r4,a
      0001F9 60 12            [24]  797 	jz	00102$
      0001FB 8C 03            [24]  798 	mov	ar3,r4
      0001FD 7C 00            [12]  799 	mov	r4,#0x00
      0001FF 8B 82            [24]  800 	mov	dpl,r3
      000201 8C 83            [24]  801 	mov	dph,r4
      000203 12r00r00         [24]  802 	lcall	_putchar
      000206 0D               [12]  803 	inc	r5
                                    804 ;	calc.c:85: if (delta->event == EVENT_TERM) printstr("\r\nPS\r\n");
      000207 BD 00 E5         [24]  805 	cjne	r5,#0x00,00133$
      00020A 0E               [12]  806 	inc	r6
      00020B 80 E2            [24]  807 	sjmp	00133$
      00020D                        808 00102$:
                                    809 ;	calc.c:86: r = stack_pop(ctx->ps, &d);
      00020D E5*00            [12]  810 	mov	a,_bp
      00020F 24 0E            [12]  811 	add	a,#0x0e
      000211 FF               [12]  812 	mov	r7,a
      000212 E5*00            [12]  813 	mov	a,_bp
      000214 24 05            [12]  814 	add	a,#0x05
      000216 F8               [12]  815 	mov	r0,a
      000217 A6 07            [24]  816 	mov	@r0,ar7
      000219 08               [12]  817 	inc	r0
      00021A 76 00            [12]  818 	mov	@r0,#0x00
      00021C 08               [12]  819 	inc	r0
      00021D 76 40            [12]  820 	mov	@r0,#0x40
      00021F E5*00            [12]  821 	mov	a,_bp
      000221 24 0B            [12]  822 	add	a,#0x0b
      000223 F8               [12]  823 	mov	r0,a
      000224 A9*00            [24]  824 	mov	r1,_bp
      000226 09               [12]  825 	inc	r1
      000227 09               [12]  826 	inc	r1
      000228 74 13            [12]  827 	mov	a,#0x13
      00022A 26               [12]  828 	add	a,@r0
      00022B F7               [12]  829 	mov	@r1,a
      00022C 74 40            [12]  830 	mov	a,#0x40
      00022E 08               [12]  831 	inc	r0
      00022F 36               [12]  832 	addc	a,@r0
      000230 09               [12]  833 	inc	r1
      000231 F7               [12]  834 	mov	@r1,a
      000232 08               [12]  835 	inc	r0
      000233 09               [12]  836 	inc	r1
      000234 E6               [12]  837 	mov	a,@r0
      000235 F7               [12]  838 	mov	@r1,a
      000236 A8*00            [24]  839 	mov	r0,_bp
      000238 08               [12]  840 	inc	r0
      000239 08               [12]  841 	inc	r0
      00023A 86 82            [24]  842 	mov	dpl,@r0
      00023C 08               [12]  843 	inc	r0
      00023D 86 83            [24]  844 	mov	dph,@r0
      00023F 08               [12]  845 	inc	r0
      000240 86 F0            [24]  846 	mov	b,@r0
      000242 12r00r00         [24]  847 	lcall	__gptrget
      000245 FA               [12]  848 	mov	r2,a
      000246 A3               [24]  849 	inc	dptr
      000247 12r00r00         [24]  850 	lcall	__gptrget
      00024A FB               [12]  851 	mov	r3,a
      00024B A3               [24]  852 	inc	dptr
      00024C 12r00r00         [24]  853 	lcall	__gptrget
      00024F FE               [12]  854 	mov	r6,a
      000250 C0 07            [24]  855 	push	ar7
      000252 E5*00            [12]  856 	mov	a,_bp
      000254 24 05            [12]  857 	add	a,#0x05
      000256 F8               [12]  858 	mov	r0,a
      000257 E6               [12]  859 	mov	a,@r0
      000258 C0 E0            [24]  860 	push	acc
      00025A 08               [12]  861 	inc	r0
      00025B E6               [12]  862 	mov	a,@r0
      00025C C0 E0            [24]  863 	push	acc
      00025E 08               [12]  864 	inc	r0
      00025F E6               [12]  865 	mov	a,@r0
      000260 C0 E0            [24]  866 	push	acc
      000262 8A 82            [24]  867 	mov	dpl,r2
      000264 8B 83            [24]  868 	mov	dph,r3
      000266 8E F0            [24]  869 	mov	b,r6
      000268 12r00r00         [24]  870 	lcall	_stack_pop
      00026B AE 82            [24]  871 	mov	r6,dpl
      00026D AD 83            [24]  872 	mov	r5,dph
      00026F 15 81            [12]  873 	dec	sp
      000271 15 81            [12]  874 	dec	sp
      000273 15 81            [12]  875 	dec	sp
      000275 D0 07            [24]  876 	pop	ar7
                                    877 ;	calc.c:87: if (!r) {
      000277 EE               [12]  878 	mov	a,r6
      000278 4D               [12]  879 	orl	a,r5
      000279 70 44            [24]  880 	jnz	00181$
                                    881 ;	calc.c:88: if (delta->event != EVENT_TERM) printstr("stack underflow\r\n");
      00027B E5*00            [12]  882 	mov	a,_bp
      00027D 24 08            [12]  883 	add	a,#0x08
      00027F F8               [12]  884 	mov	r0,a
      000280 86 82            [24]  885 	mov	dpl,@r0
      000282 08               [12]  886 	inc	r0
      000283 86 83            [24]  887 	mov	dph,@r0
      000285 08               [12]  888 	inc	r0
      000286 86 F0            [24]  889 	mov	b,@r0
      000288 12r00r00         [24]  890 	lcall	__gptrget
      00028B FD               [12]  891 	mov	r5,a
      00028C A3               [24]  892 	inc	dptr
      00028D 12r00r00         [24]  893 	lcall	__gptrget
      000290 FE               [12]  894 	mov	r6,a
      000291 BD 08 06         [24]  895 	cjne	r5,#0x08,00318$
      000294 BE 00 03         [24]  896 	cjne	r6,#0x00,00318$
      000297 02r04r45         [24]  897 	ljmp	00110$
      00029A                        898 00318$:
      00029A 7Cr07            [12]  899 	mov	r4,#___str_1
      00029C 7Ds00            [12]  900 	mov	r5,#(___str_1 >> 8)
      00029E 7E 80            [12]  901 	mov	r6,#0x80
                                    902 ;	calc.c:51: return;
      0002A0                        903 00136$:
                                    904 ;	calc.c:49: for (; *s; s++) putchar(*s);
      0002A0 8C 82            [24]  905 	mov	dpl,r4
      0002A2 8D 83            [24]  906 	mov	dph,r5
      0002A4 8E F0            [24]  907 	mov	b,r6
      0002A6 12r00r00         [24]  908 	lcall	__gptrget
      0002A9 FB               [12]  909 	mov	r3,a
      0002AA 70 03            [24]  910 	jnz	00319$
      0002AC 02r04r45         [24]  911 	ljmp	00110$
      0002AF                        912 00319$:
      0002AF 7A 00            [12]  913 	mov	r2,#0x00
      0002B1 8B 82            [24]  914 	mov	dpl,r3
      0002B3 8A 83            [24]  915 	mov	dph,r2
      0002B5 12r00r00         [24]  916 	lcall	_putchar
      0002B8 0C               [12]  917 	inc	r4
                                    918 ;	calc.c:89: } else while (r > 0) {
      0002B9 BC 00 E4         [24]  919 	cjne	r4,#0x00,00136$
      0002BC 0D               [12]  920 	inc	r5
      0002BD 80 E1            [24]  921 	sjmp	00136$
      0002BF                        922 00181$:
      0002BF A8*00            [24]  923 	mov	r0,_bp
      0002C1 08               [12]  924 	inc	r0
      0002C2 A6 07            [24]  925 	mov	@r0,ar7
      0002C4                        926 00105$:
      0002C4 C3               [12]  927 	clr	c
      0002C5 E4               [12]  928 	clr	a
      0002C6 9E               [12]  929 	subb	a,r6
      0002C7 74 80            [12]  930 	mov	a,#(0x00 ^ 0x80)
      0002C9 8D F0            [24]  931 	mov	b,r5
      0002CB 63 F0 80         [24]  932 	xrl	b,#0x80
      0002CE 95 F0            [12]  933 	subb	a,b
      0002D0 40 03            [24]  934 	jc	00321$
      0002D2 02r04r45         [24]  935 	ljmp	00110$
      0002D5                        936 00321$:
                                    937 ;	calc.c:90: printstr("VA ");
      0002D5 7Br19            [12]  938 	mov	r3,#___str_2
      0002D7 7Cs00            [12]  939 	mov	r4,#(___str_2 >> 8)
      0002D9 7D 80            [12]  940 	mov	r5,#0x80
                                    941 ;	calc.c:51: return;
      0002DB                        942 00139$:
                                    943 ;	calc.c:49: for (; *s; s++) putchar(*s);
      0002DB 8B 82            [24]  944 	mov	dpl,r3
      0002DD 8C 83            [24]  945 	mov	dph,r4
      0002DF 8D F0            [24]  946 	mov	b,r5
      0002E1 12r00r00         [24]  947 	lcall	__gptrget
      0002E4 FA               [12]  948 	mov	r2,a
      0002E5 60 10            [24]  949 	jz	00119$
      0002E7 7E 00            [12]  950 	mov	r6,#0x00
      0002E9 8A 82            [24]  951 	mov	dpl,r2
      0002EB 8E 83            [24]  952 	mov	dph,r6
      0002ED 12r00r00         [24]  953 	lcall	_putchar
      0002F0 0B               [12]  954 	inc	r3
                                    955 ;	calc.c:90: printstr("VA ");
      0002F1 BB 00 E7         [24]  956 	cjne	r3,#0x00,00139$
      0002F4 0C               [12]  957 	inc	r4
      0002F5 80 E4            [24]  958 	sjmp	00139$
      0002F7                        959 00119$:
                                    960 ;	calc.c:91: printf("% 11ld / ", d);
      0002F7 C0 07            [24]  961 	push	ar7
      0002F9 E5*00            [12]  962 	mov	a,_bp
      0002FB 24 0E            [12]  963 	add	a,#0x0e
      0002FD F8               [12]  964 	mov	r0,a
      0002FE E6               [12]  965 	mov	a,@r0
      0002FF C0 E0            [24]  966 	push	acc
      000301 08               [12]  967 	inc	r0
      000302 E6               [12]  968 	mov	a,@r0
      000303 C0 E0            [24]  969 	push	acc
      000305 08               [12]  970 	inc	r0
      000306 E6               [12]  971 	mov	a,@r0
      000307 C0 E0            [24]  972 	push	acc
      000309 08               [12]  973 	inc	r0
      00030A E6               [12]  974 	mov	a,@r0
      00030B C0 E0            [24]  975 	push	acc
      00030D 74r1D            [12]  976 	mov	a,#___str_3
      00030F C0 E0            [24]  977 	push	acc
      000311 74s00            [12]  978 	mov	a,#(___str_3 >> 8)
      000313 C0 E0            [24]  979 	push	acc
      000315 74 80            [12]  980 	mov	a,#0x80
      000317 C0 E0            [24]  981 	push	acc
      000319 12r00r00         [24]  982 	lcall	_printf
      00031C E5 81            [12]  983 	mov	a,sp
      00031E 24 F9            [12]  984 	add	a,#0xf9
      000320 F5 81            [12]  985 	mov	sp,a
                                    986 ;	calc.c:92: printf("%08lx / ", d);
      000322 E5*00            [12]  987 	mov	a,_bp
      000324 24 0E            [12]  988 	add	a,#0x0e
      000326 F8               [12]  989 	mov	r0,a
      000327 E6               [12]  990 	mov	a,@r0
      000328 C0 E0            [24]  991 	push	acc
      00032A 08               [12]  992 	inc	r0
      00032B E6               [12]  993 	mov	a,@r0
      00032C C0 E0            [24]  994 	push	acc
      00032E 08               [12]  995 	inc	r0
      00032F E6               [12]  996 	mov	a,@r0
      000330 C0 E0            [24]  997 	push	acc
      000332 08               [12]  998 	inc	r0
      000333 E6               [12]  999 	mov	a,@r0
      000334 C0 E0            [24] 1000 	push	acc
      000336 74r27            [12] 1001 	mov	a,#___str_4
      000338 C0 E0            [24] 1002 	push	acc
      00033A 74s00            [12] 1003 	mov	a,#(___str_4 >> 8)
      00033C C0 E0            [24] 1004 	push	acc
      00033E 74 80            [12] 1005 	mov	a,#0x80
      000340 C0 E0            [24] 1006 	push	acc
      000342 12r00r00         [24] 1007 	lcall	_printf
      000345 E5 81            [12] 1008 	mov	a,sp
      000347 24 F9            [12] 1009 	add	a,#0xf9
      000349 F5 81            [12] 1010 	mov	sp,a
      00034B D0 07            [24] 1011 	pop	ar7
                                   1012 ;	calc.c:93: printbin(d);
      00034D E5*00            [12] 1013 	mov	a,_bp
      00034F 24 0E            [12] 1014 	add	a,#0x0e
      000351 F8               [12] 1015 	mov	r0,a
      000352 86 02            [24] 1016 	mov	ar2,@r0
      000354 08               [12] 1017 	inc	r0
      000355 86 03            [24] 1018 	mov	ar3,@r0
      000357 08               [12] 1019 	inc	r0
      000358 86 04            [24] 1020 	mov	ar4,@r0
      00035A 08               [12] 1021 	inc	r0
      00035B 86 05            [24] 1022 	mov	ar5,@r0
      00035D E5*00            [12] 1023 	mov	a,_bp
      00035F 24 12            [12] 1024 	add	a,#0x12
      000361 F8               [12] 1025 	mov	r0,a
      000362 A6 02            [24] 1026 	mov	@r0,ar2
      000364 08               [12] 1027 	inc	r0
      000365 A6 03            [24] 1028 	mov	@r0,ar3
      000367 08               [12] 1029 	inc	r0
      000368 A6 04            [24] 1030 	mov	@r0,ar4
      00036A 08               [12] 1031 	inc	r0
      00036B A6 05            [24] 1032 	mov	@r0,ar5
                                   1033 ;	calc.c:57: for (mask = 0x80000000lu; mask; mask >>= 1)
      00036D E5*00            [12] 1034 	mov	a,_bp
      00036F 24 16            [12] 1035 	add	a,#0x16
      000371 F8               [12] 1036 	mov	r0,a
      000372 E4               [12] 1037 	clr	a
      000373 F6               [12] 1038 	mov	@r0,a
      000374 08               [12] 1039 	inc	r0
      000375 F6               [12] 1040 	mov	@r0,a
      000376 08               [12] 1041 	inc	r0
      000377 F6               [12] 1042 	mov	@r0,a
      000378 08               [12] 1043 	inc	r0
      000379 76 80            [12] 1044 	mov	@r0,#0x80
      00037B                       1045 00141$:
                                   1046 ;	calc.c:58: (void)putchar((d & mask) ? (int)'1' : (int)'0');
      00037B E5*00            [12] 1047 	mov	a,_bp
      00037D 24 12            [12] 1048 	add	a,#0x12
      00037F F8               [12] 1049 	mov	r0,a
      000380 86 03            [24] 1050 	mov	ar3,@r0
      000382 08               [12] 1051 	inc	r0
      000383 86 04            [24] 1052 	mov	ar4,@r0
      000385 08               [12] 1053 	inc	r0
      000386 86 05            [24] 1054 	mov	ar5,@r0
      000388 08               [12] 1055 	inc	r0
      000389 86 06            [24] 1056 	mov	ar6,@r0
      00038B E5*00            [12] 1057 	mov	a,_bp
      00038D 24 16            [12] 1058 	add	a,#0x16
      00038F F8               [12] 1059 	mov	r0,a
      000390 E6               [12] 1060 	mov	a,@r0
      000391 52 03            [12] 1061 	anl	ar3,a
      000393 08               [12] 1062 	inc	r0
      000394 E6               [12] 1063 	mov	a,@r0
      000395 52 04            [12] 1064 	anl	ar4,a
      000397 08               [12] 1065 	inc	r0
      000398 E6               [12] 1066 	mov	a,@r0
      000399 52 05            [12] 1067 	anl	ar5,a
      00039B 08               [12] 1068 	inc	r0
      00039C E6               [12] 1069 	mov	a,@r0
      00039D 52 06            [12] 1070 	anl	ar6,a
      00039F EB               [12] 1071 	mov	a,r3
      0003A0 4C               [12] 1072 	orl	a,r4
      0003A1 4D               [12] 1073 	orl	a,r5
      0003A2 4E               [12] 1074 	orl	a,r6
      0003A3 60 06            [24] 1075 	jz	00162$
      0003A5 7C 31            [12] 1076 	mov	r4,#0x31
      0003A7 7D 00            [12] 1077 	mov	r5,#0x00
      0003A9 80 04            [24] 1078 	sjmp	00163$
      0003AB                       1079 00162$:
      0003AB 7C 30            [12] 1080 	mov	r4,#0x30
      0003AD 7D 00            [12] 1081 	mov	r5,#0x00
      0003AF                       1082 00163$:
      0003AF 8C 82            [24] 1083 	mov	dpl,r4
      0003B1 8D 83            [24] 1084 	mov	dph,r5
      0003B3 12r00r00         [24] 1085 	lcall	_putchar
                                   1086 ;	calc.c:57: for (mask = 0x80000000lu; mask; mask >>= 1)
      0003B6 E5*00            [12] 1087 	mov	a,_bp
      0003B8 24 16            [12] 1088 	add	a,#0x16
      0003BA F8               [12] 1089 	mov	r0,a
      0003BB 08               [12] 1090 	inc	r0
      0003BC 08               [12] 1091 	inc	r0
      0003BD 08               [12] 1092 	inc	r0
      0003BE E6               [12] 1093 	mov	a,@r0
      0003BF C3               [12] 1094 	clr	c
      0003C0 13               [12] 1095 	rrc	a
      0003C1 F6               [12] 1096 	mov	@r0,a
      0003C2 18               [12] 1097 	dec	r0
      0003C3 E6               [12] 1098 	mov	a,@r0
      0003C4 13               [12] 1099 	rrc	a
      0003C5 F6               [12] 1100 	mov	@r0,a
      0003C6 18               [12] 1101 	dec	r0
      0003C7 E6               [12] 1102 	mov	a,@r0
      0003C8 13               [12] 1103 	rrc	a
      0003C9 F6               [12] 1104 	mov	@r0,a
      0003CA 18               [12] 1105 	dec	r0
      0003CB E6               [12] 1106 	mov	a,@r0
      0003CC 13               [12] 1107 	rrc	a
      0003CD F6               [12] 1108 	mov	@r0,a
      0003CE E5*00            [12] 1109 	mov	a,_bp
      0003D0 24 16            [12] 1110 	add	a,#0x16
      0003D2 F8               [12] 1111 	mov	r0,a
      0003D3 E6               [12] 1112 	mov	a,@r0
      0003D4 08               [12] 1113 	inc	r0
      0003D5 46               [12] 1114 	orl	a,@r0
      0003D6 08               [12] 1115 	inc	r0
      0003D7 46               [12] 1116 	orl	a,@r0
      0003D8 08               [12] 1117 	inc	r0
      0003D9 46               [12] 1118 	orl	a,@r0
      0003DA 70 9F            [24] 1119 	jnz	00141$
                                   1120 ;	calc.c:94: printstr("\r\n");
      0003DC 7Br30            [12] 1121 	mov	r3,#___str_5
      0003DE 7Cs00            [12] 1122 	mov	r4,#(___str_5 >> 8)
      0003E0 7D 80            [12] 1123 	mov	r5,#0x80
                                   1124 ;	calc.c:51: return;
      0003E2                       1125 00144$:
                                   1126 ;	calc.c:49: for (; *s; s++) putchar(*s);
      0003E2 8B 82            [24] 1127 	mov	dpl,r3
      0003E4 8C 83            [24] 1128 	mov	dph,r4
      0003E6 8D F0            [24] 1129 	mov	b,r5
      0003E8 12r00r00         [24] 1130 	lcall	__gptrget
      0003EB FA               [12] 1131 	mov	r2,a
      0003EC 60 10            [24] 1132 	jz	00123$
      0003EE 7E 00            [12] 1133 	mov	r6,#0x00
      0003F0 8A 82            [24] 1134 	mov	dpl,r2
      0003F2 8E 83            [24] 1135 	mov	dph,r6
      0003F4 12r00r00         [24] 1136 	lcall	_putchar
      0003F7 0B               [12] 1137 	inc	r3
                                   1138 ;	calc.c:94: printstr("\r\n");
      0003F8 BB 00 E7         [24] 1139 	cjne	r3,#0x00,00144$
      0003FB 0C               [12] 1140 	inc	r4
      0003FC 80 E4            [24] 1141 	sjmp	00144$
      0003FE                       1142 00123$:
                                   1143 ;	calc.c:95: r = stack_pop(ctx->ps, &d);
      0003FE C0 07            [24] 1144 	push	ar7
      000400 A8*00            [24] 1145 	mov	r0,_bp
      000402 08               [12] 1146 	inc	r0
      000403 86 03            [24] 1147 	mov	ar3,@r0
      000405 7C 00            [12] 1148 	mov	r4,#0x00
      000407 7D 40            [12] 1149 	mov	r5,#0x40
      000409 A8*00            [24] 1150 	mov	r0,_bp
      00040B 08               [12] 1151 	inc	r0
      00040C 08               [12] 1152 	inc	r0
      00040D 86 82            [24] 1153 	mov	dpl,@r0
      00040F 08               [12] 1154 	inc	r0
      000410 86 83            [24] 1155 	mov	dph,@r0
      000412 08               [12] 1156 	inc	r0
      000413 86 F0            [24] 1157 	mov	b,@r0
      000415 12r00r00         [24] 1158 	lcall	__gptrget
      000418 FA               [12] 1159 	mov	r2,a
      000419 A3               [24] 1160 	inc	dptr
      00041A 12r00r00         [24] 1161 	lcall	__gptrget
      00041D FE               [12] 1162 	mov	r6,a
      00041E A3               [24] 1163 	inc	dptr
      00041F 12r00r00         [24] 1164 	lcall	__gptrget
      000422 FF               [12] 1165 	mov	r7,a
      000423 C0 07            [24] 1166 	push	ar7
      000425 C0 03            [24] 1167 	push	ar3
      000427 C0 04            [24] 1168 	push	ar4
      000429 C0 05            [24] 1169 	push	ar5
      00042B 8A 82            [24] 1170 	mov	dpl,r2
      00042D 8E 83            [24] 1171 	mov	dph,r6
      00042F 8F F0            [24] 1172 	mov	b,r7
      000431 12r00r00         [24] 1173 	lcall	_stack_pop
      000434 AE 82            [24] 1174 	mov	r6,dpl
      000436 AD 83            [24] 1175 	mov	r5,dph
      000438 15 81            [12] 1176 	dec	sp
      00043A 15 81            [12] 1177 	dec	sp
      00043C 15 81            [12] 1178 	dec	sp
      00043E D0 07            [24] 1179 	pop	ar7
      000440 D0 07            [24] 1180 	pop	ar7
      000442 02r02rC4         [24] 1181 	ljmp	00105$
      000445                       1182 00110$:
                                   1183 ;	calc.c:98: if (delta->event == EVENT_TERM) {
      000445 E5*00            [12] 1184 	mov	a,_bp
      000447 24 08            [12] 1185 	add	a,#0x08
      000449 F8               [12] 1186 	mov	r0,a
      00044A 86 82            [24] 1187 	mov	dpl,@r0
      00044C 08               [12] 1188 	inc	r0
      00044D 86 83            [24] 1189 	mov	dph,@r0
      00044F 08               [12] 1190 	inc	r0
      000450 86 F0            [24] 1191 	mov	b,@r0
      000452 12r00r00         [24] 1192 	lcall	__gptrget
      000455 FD               [12] 1193 	mov	r5,a
      000456 A3               [24] 1194 	inc	dptr
      000457 12r00r00         [24] 1195 	lcall	__gptrget
      00045A FE               [12] 1196 	mov	r6,a
      00045B BD 08 05         [24] 1197 	cjne	r5,#0x08,00328$
      00045E BE 00 02         [24] 1198 	cjne	r6,#0x00,00328$
      000461 80 03            [24] 1199 	sjmp	00329$
      000463                       1200 00328$:
      000463 02r06r84         [24] 1201 	ljmp	00113$
      000466                       1202 00329$:
                                   1203 ;	calc.c:99: printstr("SS\r\n");
      000466 7Cr33            [12] 1204 	mov	r4,#___str_6
      000468 7Ds00            [12] 1205 	mov	r5,#(___str_6 >> 8)
      00046A 7E 80            [12] 1206 	mov	r6,#0x80
                                   1207 ;	calc.c:51: return;
      00046C                       1208 00147$:
                                   1209 ;	calc.c:49: for (; *s; s++) putchar(*s);
      00046C 8C 82            [24] 1210 	mov	dpl,r4
      00046E 8D 83            [24] 1211 	mov	dph,r5
      000470 8E F0            [24] 1212 	mov	b,r6
      000472 12r00r00         [24] 1213 	lcall	__gptrget
      000475 FB               [12] 1214 	mov	r3,a
      000476 60 10            [24] 1215 	jz	00125$
      000478 7A 00            [12] 1216 	mov	r2,#0x00
      00047A 8B 82            [24] 1217 	mov	dpl,r3
      00047C 8A 83            [24] 1218 	mov	dph,r2
      00047E 12r00r00         [24] 1219 	lcall	_putchar
      000481 0C               [12] 1220 	inc	r4
                                   1221 ;	calc.c:99: printstr("SS\r\n");
      000482 BC 00 E7         [24] 1222 	cjne	r4,#0x00,00147$
      000485 0D               [12] 1223 	inc	r5
      000486 80 E4            [24] 1224 	sjmp	00147$
      000488                       1225 00125$:
                                   1226 ;	calc.c:100: for (r = stack_pop(ctx->ss, &d); r > 0; r = stack_pop(ctx->ss, &d)) {
      000488 8F 06            [24] 1227 	mov	ar6,r7
      00048A E5*00            [12] 1228 	mov	a,_bp
      00048C 24 05            [12] 1229 	add	a,#0x05
      00048E F8               [12] 1230 	mov	r0,a
      00048F A6 06            [24] 1231 	mov	@r0,ar6
      000491 08               [12] 1232 	inc	r0
      000492 76 00            [12] 1233 	mov	@r0,#0x00
      000494 08               [12] 1234 	inc	r0
      000495 76 40            [12] 1235 	mov	@r0,#0x40
      000497 E5*00            [12] 1236 	mov	a,_bp
      000499 24 0B            [12] 1237 	add	a,#0x0b
      00049B F8               [12] 1238 	mov	r0,a
      00049C E5*00            [12] 1239 	mov	a,_bp
      00049E 24 08            [12] 1240 	add	a,#0x08
      0004A0 F9               [12] 1241 	mov	r1,a
      0004A1 74 16            [12] 1242 	mov	a,#0x16
      0004A3 26               [12] 1243 	add	a,@r0
      0004A4 F7               [12] 1244 	mov	@r1,a
      0004A5 74 40            [12] 1245 	mov	a,#0x40
      0004A7 08               [12] 1246 	inc	r0
      0004A8 36               [12] 1247 	addc	a,@r0
      0004A9 09               [12] 1248 	inc	r1
      0004AA F7               [12] 1249 	mov	@r1,a
      0004AB 08               [12] 1250 	inc	r0
      0004AC 09               [12] 1251 	inc	r1
      0004AD E6               [12] 1252 	mov	a,@r0
      0004AE F7               [12] 1253 	mov	@r1,a
      0004AF E5*00            [12] 1254 	mov	a,_bp
      0004B1 24 08            [12] 1255 	add	a,#0x08
      0004B3 F8               [12] 1256 	mov	r0,a
      0004B4 86 82            [24] 1257 	mov	dpl,@r0
      0004B6 08               [12] 1258 	inc	r0
      0004B7 86 83            [24] 1259 	mov	dph,@r0
      0004B9 08               [12] 1260 	inc	r0
      0004BA 86 F0            [24] 1261 	mov	b,@r0
      0004BC 12r00r00         [24] 1262 	lcall	__gptrget
      0004BF FA               [12] 1263 	mov	r2,a
      0004C0 A3               [24] 1264 	inc	dptr
      0004C1 12r00r00         [24] 1265 	lcall	__gptrget
      0004C4 FB               [12] 1266 	mov	r3,a
      0004C5 A3               [24] 1267 	inc	dptr
      0004C6 12r00r00         [24] 1268 	lcall	__gptrget
      0004C9 FE               [12] 1269 	mov	r6,a
      0004CA C0 07            [24] 1270 	push	ar7
      0004CC E5*00            [12] 1271 	mov	a,_bp
      0004CE 24 05            [12] 1272 	add	a,#0x05
      0004D0 F8               [12] 1273 	mov	r0,a
      0004D1 E6               [12] 1274 	mov	a,@r0
      0004D2 C0 E0            [24] 1275 	push	acc
      0004D4 08               [12] 1276 	inc	r0
      0004D5 E6               [12] 1277 	mov	a,@r0
      0004D6 C0 E0            [24] 1278 	push	acc
      0004D8 08               [12] 1279 	inc	r0
      0004D9 E6               [12] 1280 	mov	a,@r0
      0004DA C0 E0            [24] 1281 	push	acc
      0004DC 8A 82            [24] 1282 	mov	dpl,r2
      0004DE 8B 83            [24] 1283 	mov	dph,r3
      0004E0 8E F0            [24] 1284 	mov	b,r6
      0004E2 12r00r00         [24] 1285 	lcall	_stack_pop
      0004E5 AD 82            [24] 1286 	mov	r5,dpl
      0004E7 AE 83            [24] 1287 	mov	r6,dph
      0004E9 15 81            [12] 1288 	dec	sp
      0004EB 15 81            [12] 1289 	dec	sp
      0004ED 15 81            [12] 1290 	dec	sp
      0004EF D0 07            [24] 1291 	pop	ar7
      0004F1                       1292 00158$:
      0004F1 C3               [12] 1293 	clr	c
      0004F2 E4               [12] 1294 	clr	a
      0004F3 9D               [12] 1295 	subb	a,r5
      0004F4 74 80            [12] 1296 	mov	a,#(0x00 ^ 0x80)
      0004F6 8E F0            [24] 1297 	mov	b,r6
      0004F8 63 F0 80         [24] 1298 	xrl	b,#0x80
      0004FB 95 F0            [12] 1299 	subb	a,b
      0004FD 40 03            [24] 1300 	jc	00332$
      0004FF 02r06r84         [24] 1301 	ljmp	00113$
      000502                       1302 00332$:
                                   1303 ;	calc.c:101: printstr("VA ");
      000502 7Dr19            [12] 1304 	mov	r5,#___str_2
      000504 7Bs00            [12] 1305 	mov	r3,#(___str_2 >> 8)
      000506 7A 80            [12] 1306 	mov	r2,#0x80
                                   1307 ;	calc.c:51: return;
      000508                       1308 00150$:
                                   1309 ;	calc.c:49: for (; *s; s++) putchar(*s);
      000508 8D 82            [24] 1310 	mov	dpl,r5
      00050A 8B 83            [24] 1311 	mov	dph,r3
      00050C 8A F0            [24] 1312 	mov	b,r2
      00050E 12r00r00         [24] 1313 	lcall	__gptrget
      000511 FE               [12] 1314 	mov	r6,a
      000512 60 16            [24] 1315 	jz	00127$
      000514 C0 07            [24] 1316 	push	ar7
      000516 8E 04            [24] 1317 	mov	ar4,r6
      000518 7F 00            [12] 1318 	mov	r7,#0x00
      00051A 8C 82            [24] 1319 	mov	dpl,r4
      00051C 8F 83            [24] 1320 	mov	dph,r7
      00051E 12r00r00         [24] 1321 	lcall	_putchar
      000521 0D               [12] 1322 	inc	r5
      000522 BD 00 01         [24] 1323 	cjne	r5,#0x00,00334$
      000525 0B               [12] 1324 	inc	r3
      000526                       1325 00334$:
      000526 D0 07            [24] 1326 	pop	ar7
                                   1327 ;	calc.c:101: printstr("VA ");
      000528 80 DE            [24] 1328 	sjmp	00150$
      00052A                       1329 00127$:
                                   1330 ;	calc.c:102: printf("% 11ld / ", d);
      00052A C0 07            [24] 1331 	push	ar7
      00052C C0 07            [24] 1332 	push	ar7
      00052E E5*00            [12] 1333 	mov	a,_bp
      000530 24 0E            [12] 1334 	add	a,#0x0e
      000532 F8               [12] 1335 	mov	r0,a
      000533 E6               [12] 1336 	mov	a,@r0
      000534 C0 E0            [24] 1337 	push	acc
      000536 08               [12] 1338 	inc	r0
      000537 E6               [12] 1339 	mov	a,@r0
      000538 C0 E0            [24] 1340 	push	acc
      00053A 08               [12] 1341 	inc	r0
      00053B E6               [12] 1342 	mov	a,@r0
      00053C C0 E0            [24] 1343 	push	acc
      00053E 08               [12] 1344 	inc	r0
      00053F E6               [12] 1345 	mov	a,@r0
      000540 C0 E0            [24] 1346 	push	acc
      000542 74r1D            [12] 1347 	mov	a,#___str_3
      000544 C0 E0            [24] 1348 	push	acc
      000546 74s00            [12] 1349 	mov	a,#(___str_3 >> 8)
      000548 C0 E0            [24] 1350 	push	acc
      00054A 74 80            [12] 1351 	mov	a,#0x80
      00054C C0 E0            [24] 1352 	push	acc
      00054E 12r00r00         [24] 1353 	lcall	_printf
      000551 E5 81            [12] 1354 	mov	a,sp
      000553 24 F9            [12] 1355 	add	a,#0xf9
      000555 F5 81            [12] 1356 	mov	sp,a
                                   1357 ;	calc.c:103: printf("%08lx / ", d);
      000557 E5*00            [12] 1358 	mov	a,_bp
      000559 24 0E            [12] 1359 	add	a,#0x0e
      00055B F8               [12] 1360 	mov	r0,a
      00055C E6               [12] 1361 	mov	a,@r0
      00055D C0 E0            [24] 1362 	push	acc
      00055F 08               [12] 1363 	inc	r0
      000560 E6               [12] 1364 	mov	a,@r0
      000561 C0 E0            [24] 1365 	push	acc
      000563 08               [12] 1366 	inc	r0
      000564 E6               [12] 1367 	mov	a,@r0
      000565 C0 E0            [24] 1368 	push	acc
      000567 08               [12] 1369 	inc	r0
      000568 E6               [12] 1370 	mov	a,@r0
      000569 C0 E0            [24] 1371 	push	acc
      00056B 74r27            [12] 1372 	mov	a,#___str_4
      00056D C0 E0            [24] 1373 	push	acc
      00056F 74s00            [12] 1374 	mov	a,#(___str_4 >> 8)
      000571 C0 E0            [24] 1375 	push	acc
      000573 74 80            [12] 1376 	mov	a,#0x80
      000575 C0 E0            [24] 1377 	push	acc
      000577 12r00r00         [24] 1378 	lcall	_printf
      00057A E5 81            [12] 1379 	mov	a,sp
      00057C 24 F9            [12] 1380 	add	a,#0xf9
      00057E F5 81            [12] 1381 	mov	sp,a
      000580 D0 07            [24] 1382 	pop	ar7
                                   1383 ;	calc.c:104: printbin(d);
      000582 E5*00            [12] 1384 	mov	a,_bp
      000584 24 0E            [12] 1385 	add	a,#0x0e
      000586 F8               [12] 1386 	mov	r0,a
      000587 86 02            [24] 1387 	mov	ar2,@r0
      000589 08               [12] 1388 	inc	r0
      00058A 86 03            [24] 1389 	mov	ar3,@r0
      00058C 08               [12] 1390 	inc	r0
      00058D 86 04            [24] 1391 	mov	ar4,@r0
      00058F 08               [12] 1392 	inc	r0
      000590 86 07            [24] 1393 	mov	ar7,@r0
      000592 E5*00            [12] 1394 	mov	a,_bp
      000594 24 12            [12] 1395 	add	a,#0x12
      000596 F8               [12] 1396 	mov	r0,a
      000597 A6 02            [24] 1397 	mov	@r0,ar2
      000599 08               [12] 1398 	inc	r0
      00059A A6 03            [24] 1399 	mov	@r0,ar3
      00059C 08               [12] 1400 	inc	r0
      00059D A6 04            [24] 1401 	mov	@r0,ar4
      00059F 08               [12] 1402 	inc	r0
      0005A0 A6 07            [24] 1403 	mov	@r0,ar7
                                   1404 ;	calc.c:57: for (mask = 0x80000000lu; mask; mask >>= 1)
      0005A2 E5*00            [12] 1405 	mov	a,_bp
      0005A4 24 16            [12] 1406 	add	a,#0x16
      0005A6 F8               [12] 1407 	mov	r0,a
      0005A7 E4               [12] 1408 	clr	a
      0005A8 F6               [12] 1409 	mov	@r0,a
      0005A9 08               [12] 1410 	inc	r0
      0005AA F6               [12] 1411 	mov	@r0,a
      0005AB 08               [12] 1412 	inc	r0
      0005AC F6               [12] 1413 	mov	@r0,a
      0005AD 08               [12] 1414 	inc	r0
      0005AE 76 80            [12] 1415 	mov	@r0,#0x80
                                   1416 ;	calc.c:109: return 1;
      0005B0 D0 07            [24] 1417 	pop	ar7
                                   1418 ;	calc.c:57: for (mask = 0x80000000lu; mask; mask >>= 1)
      0005B2                       1419 00152$:
                                   1420 ;	calc.c:58: (void)putchar((d & mask) ? (int)'1' : (int)'0');
      0005B2 C0 07            [24] 1421 	push	ar7
      0005B4 E5*00            [12] 1422 	mov	a,_bp
      0005B6 24 12            [12] 1423 	add	a,#0x12
      0005B8 F8               [12] 1424 	mov	r0,a
      0005B9 86 02            [24] 1425 	mov	ar2,@r0
      0005BB 08               [12] 1426 	inc	r0
      0005BC 86 03            [24] 1427 	mov	ar3,@r0
      0005BE 08               [12] 1428 	inc	r0
      0005BF 86 04            [24] 1429 	mov	ar4,@r0
      0005C1 08               [12] 1430 	inc	r0
      0005C2 86 07            [24] 1431 	mov	ar7,@r0
      0005C4 E5*00            [12] 1432 	mov	a,_bp
      0005C6 24 16            [12] 1433 	add	a,#0x16
      0005C8 F8               [12] 1434 	mov	r0,a
      0005C9 E6               [12] 1435 	mov	a,@r0
      0005CA 52 02            [12] 1436 	anl	ar2,a
      0005CC 08               [12] 1437 	inc	r0
      0005CD E6               [12] 1438 	mov	a,@r0
      0005CE 52 03            [12] 1439 	anl	ar3,a
      0005D0 08               [12] 1440 	inc	r0
      0005D1 E6               [12] 1441 	mov	a,@r0
      0005D2 52 04            [12] 1442 	anl	ar4,a
      0005D4 08               [12] 1443 	inc	r0
      0005D5 E6               [12] 1444 	mov	a,@r0
      0005D6 52 07            [12] 1445 	anl	ar7,a
      0005D8 EA               [12] 1446 	mov	a,r2
      0005D9 4B               [12] 1447 	orl	a,r3
      0005DA 4C               [12] 1448 	orl	a,r4
      0005DB 4F               [12] 1449 	orl	a,r7
      0005DC D0 07            [24] 1450 	pop	ar7
      0005DE 60 06            [24] 1451 	jz	00164$
      0005E0 7B 31            [12] 1452 	mov	r3,#0x31
      0005E2 7C 00            [12] 1453 	mov	r4,#0x00
      0005E4 80 04            [24] 1454 	sjmp	00165$
      0005E6                       1455 00164$:
      0005E6 7B 30            [12] 1456 	mov	r3,#0x30
      0005E8 7C 00            [12] 1457 	mov	r4,#0x00
      0005EA                       1458 00165$:
      0005EA 8B 82            [24] 1459 	mov	dpl,r3
      0005EC 8C 83            [24] 1460 	mov	dph,r4
      0005EE 12r00r00         [24] 1461 	lcall	_putchar
                                   1462 ;	calc.c:57: for (mask = 0x80000000lu; mask; mask >>= 1)
      0005F1 E5*00            [12] 1463 	mov	a,_bp
      0005F3 24 16            [12] 1464 	add	a,#0x16
      0005F5 F8               [12] 1465 	mov	r0,a
      0005F6 08               [12] 1466 	inc	r0
      0005F7 08               [12] 1467 	inc	r0
      0005F8 08               [12] 1468 	inc	r0
      0005F9 E6               [12] 1469 	mov	a,@r0
      0005FA C3               [12] 1470 	clr	c
      0005FB 13               [12] 1471 	rrc	a
      0005FC F6               [12] 1472 	mov	@r0,a
      0005FD 18               [12] 1473 	dec	r0
      0005FE E6               [12] 1474 	mov	a,@r0
      0005FF 13               [12] 1475 	rrc	a
      000600 F6               [12] 1476 	mov	@r0,a
      000601 18               [12] 1477 	dec	r0
      000602 E6               [12] 1478 	mov	a,@r0
      000603 13               [12] 1479 	rrc	a
      000604 F6               [12] 1480 	mov	@r0,a
      000605 18               [12] 1481 	dec	r0
      000606 E6               [12] 1482 	mov	a,@r0
      000607 13               [12] 1483 	rrc	a
      000608 F6               [12] 1484 	mov	@r0,a
      000609 E5*00            [12] 1485 	mov	a,_bp
      00060B 24 16            [12] 1486 	add	a,#0x16
      00060D F8               [12] 1487 	mov	r0,a
      00060E E6               [12] 1488 	mov	a,@r0
      00060F 08               [12] 1489 	inc	r0
      000610 46               [12] 1490 	orl	a,@r0
      000611 08               [12] 1491 	inc	r0
      000612 46               [12] 1492 	orl	a,@r0
      000613 08               [12] 1493 	inc	r0
      000614 46               [12] 1494 	orl	a,@r0
      000615 70 9B            [24] 1495 	jnz	00152$
                                   1496 ;	calc.c:105: printstr("\r\n");
      000617 7Dr30            [12] 1497 	mov	r5,#___str_5
      000619 7Bs00            [12] 1498 	mov	r3,#(___str_5 >> 8)
      00061B 7A 80            [12] 1499 	mov	r2,#0x80
                                   1500 ;	calc.c:51: return;
      00061D                       1501 00155$:
                                   1502 ;	calc.c:49: for (; *s; s++) putchar(*s);
      00061D 8D 82            [24] 1503 	mov	dpl,r5
      00061F 8B 83            [24] 1504 	mov	dph,r3
      000621 8A F0            [24] 1505 	mov	b,r2
      000623 12r00r00         [24] 1506 	lcall	__gptrget
      000626 FE               [12] 1507 	mov	r6,a
      000627 60 16            [24] 1508 	jz	00131$
      000629 C0 07            [24] 1509 	push	ar7
      00062B 8E 04            [24] 1510 	mov	ar4,r6
      00062D 7F 00            [12] 1511 	mov	r7,#0x00
      00062F 8C 82            [24] 1512 	mov	dpl,r4
      000631 8F 83            [24] 1513 	mov	dph,r7
      000633 12r00r00         [24] 1514 	lcall	_putchar
      000636 0D               [12] 1515 	inc	r5
      000637 BD 00 01         [24] 1516 	cjne	r5,#0x00,00338$
      00063A 0B               [12] 1517 	inc	r3
      00063B                       1518 00338$:
      00063B D0 07            [24] 1519 	pop	ar7
                                   1520 ;	calc.c:105: printstr("\r\n");
      00063D 80 DE            [24] 1521 	sjmp	00155$
      00063F                       1522 00131$:
                                   1523 ;	calc.c:100: for (r = stack_pop(ctx->ss, &d); r > 0; r = stack_pop(ctx->ss, &d)) {
      00063F 8F 06            [24] 1524 	mov	ar6,r7
      000641 7D 00            [12] 1525 	mov	r5,#0x00
      000643 7A 40            [12] 1526 	mov	r2,#0x40
      000645 C0 07            [24] 1527 	push	ar7
      000647 E5*00            [12] 1528 	mov	a,_bp
      000649 24 08            [12] 1529 	add	a,#0x08
      00064B F8               [12] 1530 	mov	r0,a
      00064C 86 82            [24] 1531 	mov	dpl,@r0
      00064E 08               [12] 1532 	inc	r0
      00064F 86 83            [24] 1533 	mov	dph,@r0
      000651 08               [12] 1534 	inc	r0
      000652 86 F0            [24] 1535 	mov	b,@r0
      000654 12r00r00         [24] 1536 	lcall	__gptrget
      000657 FB               [12] 1537 	mov	r3,a
      000658 A3               [24] 1538 	inc	dptr
      000659 12r00r00         [24] 1539 	lcall	__gptrget
      00065C FC               [12] 1540 	mov	r4,a
      00065D A3               [24] 1541 	inc	dptr
      00065E 12r00r00         [24] 1542 	lcall	__gptrget
      000661 FF               [12] 1543 	mov	r7,a
      000662 C0 06            [24] 1544 	push	ar6
      000664 C0 05            [24] 1545 	push	ar5
      000666 C0 02            [24] 1546 	push	ar2
      000668 8B 82            [24] 1547 	mov	dpl,r3
      00066A 8C 83            [24] 1548 	mov	dph,r4
      00066C 8F F0            [24] 1549 	mov	b,r7
      00066E 12r00r00         [24] 1550 	lcall	_stack_pop
      000671 AC 82            [24] 1551 	mov	r4,dpl
      000673 AF 83            [24] 1552 	mov	r7,dph
      000675 15 81            [12] 1553 	dec	sp
      000677 15 81            [12] 1554 	dec	sp
      000679 15 81            [12] 1555 	dec	sp
      00067B 8C 05            [24] 1556 	mov	ar5,r4
      00067D 8F 06            [24] 1557 	mov	ar6,r7
      00067F D0 07            [24] 1558 	pop	ar7
      000681 02r04rF1         [24] 1559 	ljmp	00158$
      000684                       1560 00113$:
                                   1561 ;	calc.c:109: return 1;
      000684 90 00 01         [24] 1562 	mov	dptr,#0x0001
                                   1563 ;	calc.c:110: }
      000687 85*00 81         [24] 1564 	mov	sp,_bp
      00068A D0*00            [24] 1565 	pop	_bp
      00068C 22               [24] 1566 	ret
                                   1567 ;------------------------------------------------------------
                                   1568 ;Allocation info for local variables in function 'dump_peek'
                                   1569 ;------------------------------------------------------------
                                   1570 ;d                         Allocated to stack - _bp -6
                                   1571 ;_ctx                      Allocated to registers 
                                   1572 ;__1310720019              Allocated to registers 
                                   1573 ;s                         Allocated to registers r5 r6 r7 
                                   1574 ;__1310720021              Allocated to registers r4 r5 r6 r7 
                                   1575 ;d                         Allocated to stack - _bp +1
                                   1576 ;mask                      Allocated to stack - _bp +5
                                   1577 ;__1310720023              Allocated to registers 
                                   1578 ;s                         Allocated to registers r5 r6 r7 
                                   1579 ;------------------------------------------------------------
                                   1580 ;	calc.c:112: static int dump_peek(void *_ctx, long d) __reentrant {
                                   1581 ;	-----------------------------------------
                                   1582 ;	 function dump_peek
                                   1583 ;	-----------------------------------------
      00068D                       1584 _dump_peek:
      00068D C0*00            [24] 1585 	push	_bp
      00068F E5 81            [12] 1586 	mov	a,sp
      000691 F5*00            [12] 1587 	mov	_bp,a
      000693 24 08            [12] 1588 	add	a,#0x08
      000695 F5 81            [12] 1589 	mov	sp,a
                                   1590 ;	calc.c:115: printstr("PA ");
      000697 7Dr38            [12] 1591 	mov	r5,#___str_7
      000699 7Es00            [12] 1592 	mov	r6,#(___str_7 >> 8)
      00069B 7F 80            [12] 1593 	mov	r7,#0x80
                                   1594 ;	calc.c:51: return;
      00069D                       1595 00108$:
                                   1596 ;	calc.c:49: for (; *s; s++) putchar(*s);
      00069D 8D 82            [24] 1597 	mov	dpl,r5
      00069F 8E 83            [24] 1598 	mov	dph,r6
      0006A1 8F F0            [24] 1599 	mov	b,r7
      0006A3 12r00r00         [24] 1600 	lcall	__gptrget
      0006A6 FC               [12] 1601 	mov	r4,a
      0006A7 60 10            [24] 1602 	jz	00102$
      0006A9 7B 00            [12] 1603 	mov	r3,#0x00
      0006AB 8C 82            [24] 1604 	mov	dpl,r4
      0006AD 8B 83            [24] 1605 	mov	dph,r3
      0006AF 12r00r00         [24] 1606 	lcall	_putchar
      0006B2 0D               [12] 1607 	inc	r5
                                   1608 ;	calc.c:115: printstr("PA ");
      0006B3 BD 00 E7         [24] 1609 	cjne	r5,#0x00,00108$
      0006B6 0E               [12] 1610 	inc	r6
      0006B7 80 E4            [24] 1611 	sjmp	00108$
      0006B9                       1612 00102$:
                                   1613 ;	calc.c:116: printf("% 11ld / ", d);
      0006B9 E5*00            [12] 1614 	mov	a,_bp
      0006BB 24 FA            [12] 1615 	add	a,#0xfa
      0006BD F8               [12] 1616 	mov	r0,a
      0006BE E6               [12] 1617 	mov	a,@r0
      0006BF C0 E0            [24] 1618 	push	acc
      0006C1 08               [12] 1619 	inc	r0
      0006C2 E6               [12] 1620 	mov	a,@r0
      0006C3 C0 E0            [24] 1621 	push	acc
      0006C5 08               [12] 1622 	inc	r0
      0006C6 E6               [12] 1623 	mov	a,@r0
      0006C7 C0 E0            [24] 1624 	push	acc
      0006C9 08               [12] 1625 	inc	r0
      0006CA E6               [12] 1626 	mov	a,@r0
      0006CB C0 E0            [24] 1627 	push	acc
      0006CD 74r1D            [12] 1628 	mov	a,#___str_3
      0006CF C0 E0            [24] 1629 	push	acc
      0006D1 74s00            [12] 1630 	mov	a,#(___str_3 >> 8)
      0006D3 C0 E0            [24] 1631 	push	acc
      0006D5 74 80            [12] 1632 	mov	a,#0x80
      0006D7 C0 E0            [24] 1633 	push	acc
      0006D9 12r00r00         [24] 1634 	lcall	_printf
      0006DC E5 81            [12] 1635 	mov	a,sp
      0006DE 24 F9            [12] 1636 	add	a,#0xf9
      0006E0 F5 81            [12] 1637 	mov	sp,a
                                   1638 ;	calc.c:117: printf("%08lx / ", d);
      0006E2 E5*00            [12] 1639 	mov	a,_bp
      0006E4 24 FA            [12] 1640 	add	a,#0xfa
      0006E6 F8               [12] 1641 	mov	r0,a
      0006E7 E6               [12] 1642 	mov	a,@r0
      0006E8 C0 E0            [24] 1643 	push	acc
      0006EA 08               [12] 1644 	inc	r0
      0006EB E6               [12] 1645 	mov	a,@r0
      0006EC C0 E0            [24] 1646 	push	acc
      0006EE 08               [12] 1647 	inc	r0
      0006EF E6               [12] 1648 	mov	a,@r0
      0006F0 C0 E0            [24] 1649 	push	acc
      0006F2 08               [12] 1650 	inc	r0
      0006F3 E6               [12] 1651 	mov	a,@r0
      0006F4 C0 E0            [24] 1652 	push	acc
      0006F6 74r27            [12] 1653 	mov	a,#___str_4
      0006F8 C0 E0            [24] 1654 	push	acc
      0006FA 74s00            [12] 1655 	mov	a,#(___str_4 >> 8)
      0006FC C0 E0            [24] 1656 	push	acc
      0006FE 74 80            [12] 1657 	mov	a,#0x80
      000700 C0 E0            [24] 1658 	push	acc
      000702 12r00r00         [24] 1659 	lcall	_printf
      000705 E5 81            [12] 1660 	mov	a,sp
      000707 24 F9            [12] 1661 	add	a,#0xf9
      000709 F5 81            [12] 1662 	mov	sp,a
                                   1663 ;	calc.c:118: printbin(d);
      00070B E5*00            [12] 1664 	mov	a,_bp
      00070D 24 FA            [12] 1665 	add	a,#0xfa
      00070F F8               [12] 1666 	mov	r0,a
      000710 86 04            [24] 1667 	mov	ar4,@r0
      000712 08               [12] 1668 	inc	r0
      000713 86 05            [24] 1669 	mov	ar5,@r0
      000715 08               [12] 1670 	inc	r0
      000716 86 06            [24] 1671 	mov	ar6,@r0
      000718 08               [12] 1672 	inc	r0
      000719 86 07            [24] 1673 	mov	ar7,@r0
      00071B A8*00            [24] 1674 	mov	r0,_bp
      00071D 08               [12] 1675 	inc	r0
      00071E A6 04            [24] 1676 	mov	@r0,ar4
      000720 08               [12] 1677 	inc	r0
      000721 A6 05            [24] 1678 	mov	@r0,ar5
      000723 08               [12] 1679 	inc	r0
      000724 A6 06            [24] 1680 	mov	@r0,ar6
      000726 08               [12] 1681 	inc	r0
      000727 A6 07            [24] 1682 	mov	@r0,ar7
                                   1683 ;	calc.c:57: for (mask = 0x80000000lu; mask; mask >>= 1)
      000729 E5*00            [12] 1684 	mov	a,_bp
      00072B 24 05            [12] 1685 	add	a,#0x05
      00072D F8               [12] 1686 	mov	r0,a
      00072E E4               [12] 1687 	clr	a
      00072F F6               [12] 1688 	mov	@r0,a
      000730 08               [12] 1689 	inc	r0
      000731 F6               [12] 1690 	mov	@r0,a
      000732 08               [12] 1691 	inc	r0
      000733 F6               [12] 1692 	mov	@r0,a
      000734 08               [12] 1693 	inc	r0
      000735 76 80            [12] 1694 	mov	@r0,#0x80
      000737                       1695 00110$:
                                   1696 ;	calc.c:58: (void)putchar((d & mask) ? (int)'1' : (int)'0');
      000737 A8*00            [24] 1697 	mov	r0,_bp
      000739 08               [12] 1698 	inc	r0
      00073A 86 04            [24] 1699 	mov	ar4,@r0
      00073C 08               [12] 1700 	inc	r0
      00073D 86 05            [24] 1701 	mov	ar5,@r0
      00073F 08               [12] 1702 	inc	r0
      000740 86 06            [24] 1703 	mov	ar6,@r0
      000742 08               [12] 1704 	inc	r0
      000743 86 07            [24] 1705 	mov	ar7,@r0
      000745 E5*00            [12] 1706 	mov	a,_bp
      000747 24 05            [12] 1707 	add	a,#0x05
      000749 F8               [12] 1708 	mov	r0,a
      00074A E6               [12] 1709 	mov	a,@r0
      00074B 52 04            [12] 1710 	anl	ar4,a
      00074D 08               [12] 1711 	inc	r0
      00074E E6               [12] 1712 	mov	a,@r0
      00074F 52 05            [12] 1713 	anl	ar5,a
      000751 08               [12] 1714 	inc	r0
      000752 E6               [12] 1715 	mov	a,@r0
      000753 52 06            [12] 1716 	anl	ar6,a
      000755 08               [12] 1717 	inc	r0
      000756 E6               [12] 1718 	mov	a,@r0
      000757 52 07            [12] 1719 	anl	ar7,a
      000759 EC               [12] 1720 	mov	a,r4
      00075A 4D               [12] 1721 	orl	a,r5
      00075B 4E               [12] 1722 	orl	a,r6
      00075C 4F               [12] 1723 	orl	a,r7
      00075D 60 06            [24] 1724 	jz	00117$
      00075F 7E 31            [12] 1725 	mov	r6,#0x31
      000761 7F 00            [12] 1726 	mov	r7,#0x00
      000763 80 04            [24] 1727 	sjmp	00118$
      000765                       1728 00117$:
      000765 7E 30            [12] 1729 	mov	r6,#0x30
      000767 7F 00            [12] 1730 	mov	r7,#0x00
      000769                       1731 00118$:
      000769 8E 82            [24] 1732 	mov	dpl,r6
      00076B 8F 83            [24] 1733 	mov	dph,r7
      00076D 12r00r00         [24] 1734 	lcall	_putchar
                                   1735 ;	calc.c:57: for (mask = 0x80000000lu; mask; mask >>= 1)
      000770 E5*00            [12] 1736 	mov	a,_bp
      000772 24 05            [12] 1737 	add	a,#0x05
      000774 F8               [12] 1738 	mov	r0,a
      000775 08               [12] 1739 	inc	r0
      000776 08               [12] 1740 	inc	r0
      000777 08               [12] 1741 	inc	r0
      000778 E6               [12] 1742 	mov	a,@r0
      000779 C3               [12] 1743 	clr	c
      00077A 13               [12] 1744 	rrc	a
      00077B F6               [12] 1745 	mov	@r0,a
      00077C 18               [12] 1746 	dec	r0
      00077D E6               [12] 1747 	mov	a,@r0
      00077E 13               [12] 1748 	rrc	a
      00077F F6               [12] 1749 	mov	@r0,a
      000780 18               [12] 1750 	dec	r0
      000781 E6               [12] 1751 	mov	a,@r0
      000782 13               [12] 1752 	rrc	a
      000783 F6               [12] 1753 	mov	@r0,a
      000784 18               [12] 1754 	dec	r0
      000785 E6               [12] 1755 	mov	a,@r0
      000786 13               [12] 1756 	rrc	a
      000787 F6               [12] 1757 	mov	@r0,a
      000788 E5*00            [12] 1758 	mov	a,_bp
      00078A 24 05            [12] 1759 	add	a,#0x05
      00078C F8               [12] 1760 	mov	r0,a
      00078D E6               [12] 1761 	mov	a,@r0
      00078E 08               [12] 1762 	inc	r0
      00078F 46               [12] 1763 	orl	a,@r0
      000790 08               [12] 1764 	inc	r0
      000791 46               [12] 1765 	orl	a,@r0
      000792 08               [12] 1766 	inc	r0
      000793 46               [12] 1767 	orl	a,@r0
      000794 70 A1            [24] 1768 	jnz	00110$
                                   1769 ;	calc.c:119: printstr("\r\n");
      000796 7Dr30            [12] 1770 	mov	r5,#___str_5
      000798 7Es00            [12] 1771 	mov	r6,#(___str_5 >> 8)
      00079A 7F 80            [12] 1772 	mov	r7,#0x80
                                   1773 ;	calc.c:51: return;
      00079C                       1774 00113$:
                                   1775 ;	calc.c:49: for (; *s; s++) putchar(*s);
      00079C 8D 82            [24] 1776 	mov	dpl,r5
      00079E 8E 83            [24] 1777 	mov	dph,r6
      0007A0 8F F0            [24] 1778 	mov	b,r7
      0007A2 12r00r00         [24] 1779 	lcall	__gptrget
      0007A5 FC               [12] 1780 	mov	r4,a
      0007A6 60 10            [24] 1781 	jz	00106$
      0007A8 7B 00            [12] 1782 	mov	r3,#0x00
      0007AA 8C 82            [24] 1783 	mov	dpl,r4
      0007AC 8B 83            [24] 1784 	mov	dph,r3
      0007AE 12r00r00         [24] 1785 	lcall	_putchar
      0007B1 0D               [12] 1786 	inc	r5
                                   1787 ;	calc.c:119: printstr("\r\n");
      0007B2 BD 00 E7         [24] 1788 	cjne	r5,#0x00,00113$
      0007B5 0E               [12] 1789 	inc	r6
      0007B6 80 E4            [24] 1790 	sjmp	00113$
      0007B8                       1791 00106$:
                                   1792 ;	calc.c:121: return 1;
      0007B8 90 00 01         [24] 1793 	mov	dptr,#0x0001
                                   1794 ;	calc.c:122: }
      0007BB 85*00 81         [24] 1795 	mov	sp,_bp
      0007BE D0*00            [24] 1796 	pop	_bp
      0007C0 22               [24] 1797 	ret
                                   1798 ;------------------------------------------------------------
                                   1799 ;Allocation info for local variables in function 'operator'
                                   1800 ;------------------------------------------------------------
                                   1801 ;delta                     Allocated to stack - _bp -5
                                   1802 ;_ctx                      Allocated to stack - _bp +1
                                   1803 ;ctx                       Allocated to stack - _bp +18
                                   1804 ;t0                        Allocated to registers r7 r6 r5 
                                   1805 ;d0                        Allocated to stack - _bp +21
                                   1806 ;d1                        Allocated to stack - _bp +25
                                   1807 ;__1966080025              Allocated to registers 
                                   1808 ;s                         Allocated to registers r7 r6 r5 
                                   1809 ;__1966080027              Allocated to registers 
                                   1810 ;s                         Allocated to registers r7 r6 r5 
                                   1811 ;__2621440029              Allocated to registers 
                                   1812 ;s                         Allocated to registers r7 r6 r5 
                                   1813 ;__2621440031              Allocated to registers r7 r6 r5 r4 
                                   1814 ;d                         Allocated to registers r7 r6 r5 r2 
                                   1815 ;mask                      Allocated to stack - _bp +29
                                   1816 ;__2621440033              Allocated to registers 
                                   1817 ;s                         Allocated to registers r7 r6 r5 
                                   1818 ;__1966080035              Allocated to registers 
                                   1819 ;s                         Allocated to registers r7 r6 r5 
                                   1820 ;__1966080037              Allocated to registers 
                                   1821 ;s                         Allocated to registers r7 r6 r5 
                                   1822 ;__1966080039              Allocated to registers 
                                   1823 ;s                         Allocated to registers r7 r6 r5 
                                   1824 ;__1966080041              Allocated to registers 
                                   1825 ;s                         Allocated to registers r7 r6 r5 
                                   1826 ;__2621440043              Allocated to registers 
                                   1827 ;s                         Allocated to registers r7 r6 r5 
                                   1828 ;__2621440045              Allocated to registers r7 r6 r5 r4 
                                   1829 ;d                         Allocated to registers r7 r6 r5 r2 
                                   1830 ;mask                      Allocated to stack - _bp +29
                                   1831 ;__2621440047              Allocated to registers 
                                   1832 ;s                         Allocated to registers r7 r6 r5 
                                   1833 ;__1966080049              Allocated to registers 
                                   1834 ;s                         Allocated to registers r7 r6 r5 
                                   1835 ;__1966080051              Allocated to registers 
                                   1836 ;s                         Allocated to registers r7 r6 r5 
                                   1837 ;__2621440053              Allocated to registers 
                                   1838 ;s                         Allocated to registers r7 r6 r5 
                                   1839 ;__1966080055              Allocated to registers 
                                   1840 ;s                         Allocated to registers r7 r6 r5 
                                   1841 ;__3276800057              Allocated to registers 
                                   1842 ;s                         Allocated to registers r7 r6 r5 
                                   1843 ;__1966080059              Allocated to registers 
                                   1844 ;s                         Allocated to registers r7 r6 r5 
                                   1845 ;__3276800061              Allocated to registers 
                                   1846 ;s                         Allocated to registers r7 r6 r5 
                                   1847 ;__1966080063              Allocated to registers 
                                   1848 ;s                         Allocated to registers r7 r6 r5 
                                   1849 ;__1966080065              Allocated to registers 
                                   1850 ;s                         Allocated to registers r7 r6 r5 
                                   1851 ;__1966080067              Allocated to registers 
                                   1852 ;s                         Allocated to registers r7 r6 r5 
                                   1853 ;__1966080069              Allocated to registers 
                                   1854 ;s                         Allocated to registers r7 r6 r5 
                                   1855 ;__1966080071              Allocated to registers 
                                   1856 ;s                         Allocated to registers r7 r6 r5 
                                   1857 ;__3276800073              Allocated to registers 
                                   1858 ;s                         Allocated to registers r7 r6 r5 
                                   1859 ;__1966080075              Allocated to registers 
                                   1860 ;s                         Allocated to registers r7 r6 r5 
                                   1861 ;__2621440077              Allocated to registers 
                                   1862 ;s                         Allocated to registers r7 r6 r5 
                                   1863 ;__1966080079              Allocated to registers 
                                   1864 ;s                         Allocated to registers r7 r6 r5 
                                   1865 ;__2621440081              Allocated to registers 
                                   1866 ;s                         Allocated to registers r7 r6 r5 
                                   1867 ;__1966080083              Allocated to registers 
                                   1868 ;s                         Allocated to registers r7 r6 r5 
                                   1869 ;__2621440085              Allocated to registers 
                                   1870 ;s                         Allocated to registers r7 r6 r5 
                                   1871 ;__1966080087              Allocated to registers 
                                   1872 ;s                         Allocated to registers r7 r6 r5 
                                   1873 ;__2621440089              Allocated to registers 
                                   1874 ;s                         Allocated to registers r7 r6 r5 
                                   1875 ;__2621440091              Allocated to registers 
                                   1876 ;s                         Allocated to registers r7 r6 r5 
                                   1877 ;__1966080093              Allocated to registers 
                                   1878 ;s                         Allocated to registers r7 r6 r5 
                                   1879 ;__2621440095              Allocated to registers 
                                   1880 ;s                         Allocated to registers r7 r6 r5 
                                   1881 ;__2621440097              Allocated to registers 
                                   1882 ;s                         Allocated to registers r7 r6 r5 
                                   1883 ;__1966080099              Allocated to registers 
                                   1884 ;s                         Allocated to registers r5 r4 r3 
                                   1885 ;__2621440101              Allocated to registers 
                                   1886 ;s                         Allocated to registers r5 r4 r3 
                                   1887 ;__1966080103              Allocated to registers 
                                   1888 ;s                         Allocated to registers r5 r4 r3 
                                   1889 ;__2621440105              Allocated to registers 
                                   1890 ;s                         Allocated to registers r5 r4 r3 
                                   1891 ;__1966080107              Allocated to registers 
                                   1892 ;s                         Allocated to registers r5 r4 r3 
                                   1893 ;__2621440109              Allocated to registers 
                                   1894 ;s                         Allocated to registers r5 r4 r3 
                                   1895 ;__1966080111              Allocated to registers 
                                   1896 ;s                         Allocated to registers r5 r4 r3 
                                   1897 ;__2621440113              Allocated to registers 
                                   1898 ;s                         Allocated to registers r5 r4 r3 
                                   1899 ;__1966080115              Allocated to registers 
                                   1900 ;s                         Allocated to registers r5 r4 r3 
                                   1901 ;__2621440117              Allocated to registers 
                                   1902 ;s                         Allocated to registers r5 r4 r3 
                                   1903 ;__1966080119              Allocated to registers 
                                   1904 ;s                         Allocated to registers r5 r4 r3 
                                   1905 ;__2621440121              Allocated to registers 
                                   1906 ;s                         Allocated to registers r5 r4 r3 
                                   1907 ;__1966080123              Allocated to registers 
                                   1908 ;s                         Allocated to registers r5 r4 r3 
                                   1909 ;sloc0                     Allocated to stack - _bp +330
                                   1910 ;sloc1                     Allocated to stack - _bp +4
                                   1911 ;sloc2                     Allocated to stack - _bp +7
                                   1912 ;sloc3                     Allocated to stack - _bp +11
                                   1913 ;sloc4                     Allocated to stack - _bp +14
                                   1914 ;------------------------------------------------------------
                                   1915 ;	calc.c:124: static int operator(void *_ctx, delta_t *delta) __reentrant {
                                   1916 ;	-----------------------------------------
                                   1917 ;	 function operator
                                   1918 ;	-----------------------------------------
      0007C1                       1919 _operator:
      0007C1 C0*00            [24] 1920 	push	_bp
      0007C3 85 81*00         [24] 1921 	mov	_bp,sp
      0007C6 C0 82            [24] 1922 	push	dpl
      0007C8 C0 83            [24] 1923 	push	dph
      0007CA C0 F0            [24] 1924 	push	b
      0007CC E5 81            [12] 1925 	mov	a,sp
      0007CE 24 1D            [12] 1926 	add	a,#0x1d
      0007D0 F5 81            [12] 1927 	mov	sp,a
                                   1928 ;	calc.c:125: calc_ctx_t *ctx = (calc_ctx_t *)_ctx;
      0007D2 A8*00            [24] 1929 	mov	r0,_bp
      0007D4 08               [12] 1930 	inc	r0
      0007D5 E5*00            [12] 1931 	mov	a,_bp
      0007D7 24 12            [12] 1932 	add	a,#0x12
      0007D9 F9               [12] 1933 	mov	r1,a
      0007DA E6               [12] 1934 	mov	a,@r0
      0007DB F7               [12] 1935 	mov	@r1,a
      0007DC 08               [12] 1936 	inc	r0
      0007DD 09               [12] 1937 	inc	r1
      0007DE E6               [12] 1938 	mov	a,@r0
      0007DF F7               [12] 1939 	mov	@r1,a
      0007E0 08               [12] 1940 	inc	r0
      0007E1 09               [12] 1941 	inc	r1
      0007E2 E6               [12] 1942 	mov	a,@r0
      0007E3 F7               [12] 1943 	mov	@r1,a
                                   1944 ;	calc.c:129: switch (ctx->digit[0]) {
      0007E4 E5*00            [12] 1945 	mov	a,_bp
      0007E6 24 12            [12] 1946 	add	a,#0x12
      0007E8 F8               [12] 1947 	mov	r0,a
      0007E9 74 07            [12] 1948 	mov	a,#0x07
      0007EB 26               [12] 1949 	add	a,@r0
      0007EC FD               [12] 1950 	mov	r5,a
      0007ED E4               [12] 1951 	clr	a
      0007EE 08               [12] 1952 	inc	r0
      0007EF 36               [12] 1953 	addc	a,@r0
      0007F0 FE               [12] 1954 	mov	r6,a
      0007F1 08               [12] 1955 	inc	r0
      0007F2 86 07            [24] 1956 	mov	ar7,@r0
      0007F4 8D 82            [24] 1957 	mov	dpl,r5
      0007F6 8E 83            [24] 1958 	mov	dph,r6
      0007F8 8F F0            [24] 1959 	mov	b,r7
      0007FA 12r00r00         [24] 1960 	lcall	__gptrget
      0007FD FC               [12] 1961 	mov	r4,a
      0007FE BC 23 03         [24] 1962 	cjne	r4,#0x23,01232$
      000801 02r1CrBA         [24] 1963 	ljmp	00189$
      000804                       1964 01232$:
      000804 BC 25 03         [24] 1965 	cjne	r4,#0x25,01233$
      000807 02r1CrBA         [24] 1966 	ljmp	00189$
      00080A                       1967 01233$:
      00080A BC 26 03         [24] 1968 	cjne	r4,#0x26,01234$
      00080D 02r1FrA0         [24] 1969 	ljmp	00202$
      000810                       1970 01234$:
      000810 BC 2A 03         [24] 1971 	cjne	r4,#0x2a,01235$
      000813 02r18r2A         [24] 1972 	ljmp	00167$
      000816                       1973 01235$:
      000816 BC 2B 03         [24] 1974 	cjne	r4,#0x2b,01236$
      000819 02r15r2B         [24] 1975 	ljmp	00153$
      00081C                       1976 01236$:
      00081C BC 2D 03         [24] 1977 	cjne	r4,#0x2d,01237$
      00081F 02r16rAA         [24] 1978 	ljmp	00160$
      000822                       1979 01237$:
      000822 BC 2E 03         [24] 1980 	cjne	r4,#0x2e,01238$
      000825 02r0ArF8         [24] 1981 	ljmp	00109$
      000828                       1982 01238$:
      000828 BC 2F 03         [24] 1983 	cjne	r4,#0x2f,01239$
      00082B 02r19rD0         [24] 1984 	ljmp	00175$
      00082E                       1985 01239$:
      00082E BC 3C 03         [24] 1986 	cjne	r4,#0x3c,01240$
      000831 02r27rC5         [24] 1987 	ljmp	00237$
      000834                       1988 01240$:
      000834 BC 3E 03         [24] 1989 	cjne	r4,#0x3e,01241$
      000837 02r24r6E         [24] 1990 	ljmp	00223$
      00083A                       1991 01241$:
      00083A BC 4D 03         [24] 1992 	cjne	r4,#0x4d,01242$
      00083D 02r0FrD1         [24] 1993 	ljmp	00127$
      000840                       1994 01242$:
      000840 BC 50 03         [24] 1995 	cjne	r4,#0x50,01243$
      000843 02r0Ar57         [24] 1996 	ljmp	00105$
      000846                       1997 01243$:
      000846 BC 54 03         [24] 1998 	cjne	r4,#0x54,01244$
      000849 02r12rD3         [24] 1999 	ljmp	00145$
      00084C                       2000 01244$:
      00084C BC 55 03         [24] 2001 	cjne	r4,#0x55,01245$
      00084F 02r11rEC         [24] 2002 	ljmp	00139$
      000852                       2003 01245$:
      000852 BC 56 03         [24] 2004 	cjne	r4,#0x56,01246$
      000855 02r0CrB3         [24] 2005 	ljmp	00113$
      000858                       2006 01246$:
      000858 BC 58 03         [24] 2007 	cjne	r4,#0x58,01247$
      00085B 02r14r8C         [24] 2008 	ljmp	00152$
      00085E                       2009 01247$:
      00085E BC 5C 03         [24] 2010 	cjne	r4,#0x5c,01248$
      000861 02r19rD0         [24] 2011 	ljmp	00175$
      000864                       2012 01248$:
      000864 BC 5D 03         [24] 2013 	cjne	r4,#0x5d,01249$
      000867 02r26r11         [24] 2014 	ljmp	00230$
      00086A                       2015 01249$:
      00086A BC 5E 03         [24] 2016 	cjne	r4,#0x5e,01250$
      00086D 02r22rD4         [24] 2017 	ljmp	00216$
      000870                       2018 01250$:
      000870 BC 6D 03         [24] 2019 	cjne	r4,#0x6d,01251$
      000873 02r0Er9D         [24] 2020 	ljmp	00121$
      000876                       2021 01251$:
      000876 BC 70 02         [24] 2022 	cjne	r4,#0x70,01252$
      000879 80 21            [24] 2023 	sjmp	00101$
      00087B                       2024 01252$:
      00087B BC 75 03         [24] 2025 	cjne	r4,#0x75,01253$
      00087E 02r11r05         [24] 2026 	ljmp	00133$
      000881                       2027 01253$:
      000881 BC 76 03         [24] 2028 	cjne	r4,#0x76,01254$
      000884 02r0ArF8         [24] 2029 	ljmp	00109$
      000887                       2030 01254$:
      000887 BC 78 03         [24] 2031 	cjne	r4,#0x78,01255$
      00088A 02r0CrFC         [24] 2032 	ljmp	00114$
      00088D                       2033 01255$:
      00088D BC 7C 03         [24] 2034 	cjne	r4,#0x7c,01256$
      000890 02r21r3A         [24] 2035 	ljmp	00209$
      000893                       2036 01256$:
      000893 BC 7E 03         [24] 2037 	cjne	r4,#0x7e,01257$
      000896 02r29r68         [24] 2038 	ljmp	00244$
      000899                       2039 01257$:
      000899 02r2Ar41         [24] 2040 	ljmp	00248$
                                   2041 ;	calc.c:130: case 'p':
      00089C                       2042 00101$:
                                   2043 ;	calc.c:131: printstr("\r\n");
      00089C 7Fr30            [12] 2044 	mov	r7,#___str_5
      00089E 7Es00            [12] 2045 	mov	r6,#(___str_5 >> 8)
      0008A0 7D 80            [12] 2046 	mov	r5,#0x80
                                   2047 ;	calc.c:51: return;
      0008A2                       2048 00351$:
                                   2049 ;	calc.c:49: for (; *s; s++) putchar(*s);
      0008A2 8F 82            [24] 2050 	mov	dpl,r7
      0008A4 8E 83            [24] 2051 	mov	dph,r6
      0008A6 8D F0            [24] 2052 	mov	b,r5
      0008A8 12r00r00         [24] 2053 	lcall	__gptrget
      0008AB FC               [12] 2054 	mov	r4,a
      0008AC 60 10            [24] 2055 	jz	00251$
      0008AE 7B 00            [12] 2056 	mov	r3,#0x00
      0008B0 8C 82            [24] 2057 	mov	dpl,r4
      0008B2 8B 83            [24] 2058 	mov	dph,r3
      0008B4 12r00r00         [24] 2059 	lcall	_putchar
      0008B7 0F               [12] 2060 	inc	r7
                                   2061 ;	calc.c:131: printstr("\r\n");
      0008B8 BF 00 E7         [24] 2062 	cjne	r7,#0x00,00351$
      0008BB 0E               [12] 2063 	inc	r6
      0008BC 80 E4            [24] 2064 	sjmp	00351$
      0008BE                       2065 00251$:
                                   2066 ;	calc.c:132: if (!stack_peek(ctx->ps, &d0)) printstr("stack underflow\r\n");
      0008BE E5*00            [12] 2067 	mov	a,_bp
      0008C0 24 15            [12] 2068 	add	a,#0x15
      0008C2 FF               [12] 2069 	mov	r7,a
      0008C3 7E 00            [12] 2070 	mov	r6,#0x00
      0008C5 7D 40            [12] 2071 	mov	r5,#0x40
      0008C7 E5*00            [12] 2072 	mov	a,_bp
      0008C9 24 12            [12] 2073 	add	a,#0x12
      0008CB F8               [12] 2074 	mov	r0,a
      0008CC 74 13            [12] 2075 	mov	a,#0x13
      0008CE 26               [12] 2076 	add	a,@r0
      0008CF FA               [12] 2077 	mov	r2,a
      0008D0 ED               [12] 2078 	mov	a,r5
      0008D1 08               [12] 2079 	inc	r0
      0008D2 36               [12] 2080 	addc	a,@r0
      0008D3 FB               [12] 2081 	mov	r3,a
      0008D4 08               [12] 2082 	inc	r0
      0008D5 86 04            [24] 2083 	mov	ar4,@r0
      0008D7 8A 82            [24] 2084 	mov	dpl,r2
      0008D9 8B 83            [24] 2085 	mov	dph,r3
      0008DB 8C F0            [24] 2086 	mov	b,r4
      0008DD 12r00r00         [24] 2087 	lcall	__gptrget
      0008E0 FA               [12] 2088 	mov	r2,a
      0008E1 A3               [24] 2089 	inc	dptr
      0008E2 12r00r00         [24] 2090 	lcall	__gptrget
      0008E5 FB               [12] 2091 	mov	r3,a
      0008E6 A3               [24] 2092 	inc	dptr
      0008E7 12r00r00         [24] 2093 	lcall	__gptrget
      0008EA FC               [12] 2094 	mov	r4,a
      0008EB C0 07            [24] 2095 	push	ar7
      0008ED C0 06            [24] 2096 	push	ar6
      0008EF C0 05            [24] 2097 	push	ar5
      0008F1 8A 82            [24] 2098 	mov	dpl,r2
      0008F3 8B 83            [24] 2099 	mov	dph,r3
      0008F5 8C F0            [24] 2100 	mov	b,r4
      0008F7 12r00r00         [24] 2101 	lcall	_stack_peek
      0008FA AB 82            [24] 2102 	mov	r3,dpl
      0008FC AC 83            [24] 2103 	mov	r4,dph
      0008FE 15 81            [12] 2104 	dec	sp
      000900 15 81            [12] 2105 	dec	sp
      000902 15 81            [12] 2106 	dec	sp
      000904 EB               [12] 2107 	mov	a,r3
      000905 4C               [12] 2108 	orl	a,r4
      000906 70 25            [24] 2109 	jnz	00103$
      000908 7Fr07            [12] 2110 	mov	r7,#___str_1
      00090A 7Es00            [12] 2111 	mov	r6,#(___str_1 >> 8)
      00090C 7D 80            [12] 2112 	mov	r5,#0x80
                                   2113 ;	calc.c:51: return;
      00090E                       2114 00354$:
                                   2115 ;	calc.c:49: for (; *s; s++) putchar(*s);
      00090E 8F 82            [24] 2116 	mov	dpl,r7
      000910 8E 83            [24] 2117 	mov	dph,r6
      000912 8D F0            [24] 2118 	mov	b,r5
      000914 12r00r00         [24] 2119 	lcall	__gptrget
      000917 FC               [12] 2120 	mov	r4,a
      000918 70 03            [24] 2121 	jnz	01261$
      00091A 02r2Ar46         [24] 2122 	ljmp	00249$
      00091D                       2123 01261$:
      00091D 7B 00            [12] 2124 	mov	r3,#0x00
      00091F 8C 82            [24] 2125 	mov	dpl,r4
      000921 8B 83            [24] 2126 	mov	dph,r3
      000923 12r00r00         [24] 2127 	lcall	_putchar
      000926 0F               [12] 2128 	inc	r7
                                   2129 ;	calc.c:132: if (!stack_peek(ctx->ps, &d0)) printstr("stack underflow\r\n");
      000927 BF 00 E4         [24] 2130 	cjne	r7,#0x00,00354$
      00092A 0E               [12] 2131 	inc	r6
      00092B 80 E1            [24] 2132 	sjmp	00354$
      00092D                       2133 00103$:
                                   2134 ;	calc.c:134: printstr("PT ");
      00092D 7Fr3C            [12] 2135 	mov	r7,#___str_8
      00092F 7Es00            [12] 2136 	mov	r6,#(___str_8 >> 8)
      000931 7D 80            [12] 2137 	mov	r5,#0x80
                                   2138 ;	calc.c:51: return;
      000933                       2139 00357$:
                                   2140 ;	calc.c:49: for (; *s; s++) putchar(*s);
      000933 8F 82            [24] 2141 	mov	dpl,r7
      000935 8E 83            [24] 2142 	mov	dph,r6
      000937 8D F0            [24] 2143 	mov	b,r5
      000939 12r00r00         [24] 2144 	lcall	__gptrget
      00093C FC               [12] 2145 	mov	r4,a
      00093D 60 10            [24] 2146 	jz	00255$
      00093F 7B 00            [12] 2147 	mov	r3,#0x00
      000941 8C 82            [24] 2148 	mov	dpl,r4
      000943 8B 83            [24] 2149 	mov	dph,r3
      000945 12r00r00         [24] 2150 	lcall	_putchar
      000948 0F               [12] 2151 	inc	r7
                                   2152 ;	calc.c:134: printstr("PT ");
      000949 BF 00 E7         [24] 2153 	cjne	r7,#0x00,00357$
      00094C 0E               [12] 2154 	inc	r6
      00094D 80 E4            [24] 2155 	sjmp	00357$
      00094F                       2156 00255$:
                                   2157 ;	calc.c:135: printf("% 11ld / ", d0);
      00094F E5*00            [12] 2158 	mov	a,_bp
      000951 24 15            [12] 2159 	add	a,#0x15
      000953 F8               [12] 2160 	mov	r0,a
      000954 E6               [12] 2161 	mov	a,@r0
      000955 C0 E0            [24] 2162 	push	acc
      000957 08               [12] 2163 	inc	r0
      000958 E6               [12] 2164 	mov	a,@r0
      000959 C0 E0            [24] 2165 	push	acc
      00095B 08               [12] 2166 	inc	r0
      00095C E6               [12] 2167 	mov	a,@r0
      00095D C0 E0            [24] 2168 	push	acc
      00095F 08               [12] 2169 	inc	r0
      000960 E6               [12] 2170 	mov	a,@r0
      000961 C0 E0            [24] 2171 	push	acc
      000963 74r1D            [12] 2172 	mov	a,#___str_3
      000965 C0 E0            [24] 2173 	push	acc
      000967 74s00            [12] 2174 	mov	a,#(___str_3 >> 8)
      000969 C0 E0            [24] 2175 	push	acc
      00096B 74 80            [12] 2176 	mov	a,#0x80
      00096D C0 E0            [24] 2177 	push	acc
      00096F 12r00r00         [24] 2178 	lcall	_printf
      000972 E5 81            [12] 2179 	mov	a,sp
      000974 24 F9            [12] 2180 	add	a,#0xf9
      000976 F5 81            [12] 2181 	mov	sp,a
                                   2182 ;	calc.c:136: printf("%08lx / ", d0);
      000978 E5*00            [12] 2183 	mov	a,_bp
      00097A 24 15            [12] 2184 	add	a,#0x15
      00097C F8               [12] 2185 	mov	r0,a
      00097D E6               [12] 2186 	mov	a,@r0
      00097E C0 E0            [24] 2187 	push	acc
      000980 08               [12] 2188 	inc	r0
      000981 E6               [12] 2189 	mov	a,@r0
      000982 C0 E0            [24] 2190 	push	acc
      000984 08               [12] 2191 	inc	r0
      000985 E6               [12] 2192 	mov	a,@r0
      000986 C0 E0            [24] 2193 	push	acc
      000988 08               [12] 2194 	inc	r0
      000989 E6               [12] 2195 	mov	a,@r0
      00098A C0 E0            [24] 2196 	push	acc
      00098C 74r27            [12] 2197 	mov	a,#___str_4
      00098E C0 E0            [24] 2198 	push	acc
      000990 74s00            [12] 2199 	mov	a,#(___str_4 >> 8)
      000992 C0 E0            [24] 2200 	push	acc
      000994 74 80            [12] 2201 	mov	a,#0x80
      000996 C0 E0            [24] 2202 	push	acc
      000998 12r00r00         [24] 2203 	lcall	_printf
      00099B E5 81            [12] 2204 	mov	a,sp
      00099D 24 F9            [12] 2205 	add	a,#0xf9
      00099F F5 81            [12] 2206 	mov	sp,a
                                   2207 ;	calc.c:137: printbin(d0);
      0009A1 E5*00            [12] 2208 	mov	a,_bp
      0009A3 24 15            [12] 2209 	add	a,#0x15
      0009A5 F8               [12] 2210 	mov	r0,a
      0009A6 86 07            [24] 2211 	mov	ar7,@r0
      0009A8 08               [12] 2212 	inc	r0
      0009A9 86 06            [24] 2213 	mov	ar6,@r0
      0009AB 08               [12] 2214 	inc	r0
      0009AC 86 05            [24] 2215 	mov	ar5,@r0
      0009AE 08               [12] 2216 	inc	r0
      0009AF 86 04            [24] 2217 	mov	ar4,@r0
      0009B1 8C 02            [24] 2218 	mov	ar2,r4
                                   2219 ;	calc.c:57: for (mask = 0x80000000lu; mask; mask >>= 1)
      0009B3 E5*00            [12] 2220 	mov	a,_bp
      0009B5 24 1D            [12] 2221 	add	a,#0x1d
      0009B7 F8               [12] 2222 	mov	r0,a
      0009B8 E4               [12] 2223 	clr	a
      0009B9 F6               [12] 2224 	mov	@r0,a
      0009BA 08               [12] 2225 	inc	r0
      0009BB F6               [12] 2226 	mov	@r0,a
      0009BC 08               [12] 2227 	inc	r0
      0009BD F6               [12] 2228 	mov	@r0,a
      0009BE 08               [12] 2229 	inc	r0
      0009BF 76 80            [12] 2230 	mov	@r0,#0x80
      0009C1                       2231 00359$:
                                   2232 ;	calc.c:58: (void)putchar((d & mask) ? (int)'1' : (int)'0');
      0009C1 E5*00            [12] 2233 	mov	a,_bp
      0009C3 24 07            [12] 2234 	add	a,#0x07
      0009C5 F8               [12] 2235 	mov	r0,a
      0009C6 A6 07            [24] 2236 	mov	@r0,ar7
      0009C8 08               [12] 2237 	inc	r0
      0009C9 A6 06            [24] 2238 	mov	@r0,ar6
      0009CB 08               [12] 2239 	inc	r0
      0009CC A6 05            [24] 2240 	mov	@r0,ar5
      0009CE 08               [12] 2241 	inc	r0
      0009CF A6 02            [24] 2242 	mov	@r0,ar2
      0009D1 E5*00            [12] 2243 	mov	a,_bp
      0009D3 24 07            [12] 2244 	add	a,#0x07
      0009D5 F8               [12] 2245 	mov	r0,a
      0009D6 E5*00            [12] 2246 	mov	a,_bp
      0009D8 24 1D            [12] 2247 	add	a,#0x1d
      0009DA F9               [12] 2248 	mov	r1,a
      0009DB E7               [12] 2249 	mov	a,@r1
      0009DC 56               [12] 2250 	anl	a,@r0
      0009DD F6               [12] 2251 	mov	@r0,a
      0009DE 09               [12] 2252 	inc	r1
      0009DF E7               [12] 2253 	mov	a,@r1
      0009E0 08               [12] 2254 	inc	r0
      0009E1 56               [12] 2255 	anl	a,@r0
      0009E2 F6               [12] 2256 	mov	@r0,a
      0009E3 09               [12] 2257 	inc	r1
      0009E4 E7               [12] 2258 	mov	a,@r1
      0009E5 08               [12] 2259 	inc	r0
      0009E6 56               [12] 2260 	anl	a,@r0
      0009E7 F6               [12] 2261 	mov	@r0,a
      0009E8 09               [12] 2262 	inc	r1
      0009E9 E7               [12] 2263 	mov	a,@r1
      0009EA 08               [12] 2264 	inc	r0
      0009EB 56               [12] 2265 	anl	a,@r0
      0009EC F6               [12] 2266 	mov	@r0,a
      0009ED E5*00            [12] 2267 	mov	a,_bp
      0009EF 24 07            [12] 2268 	add	a,#0x07
      0009F1 F8               [12] 2269 	mov	r0,a
      0009F2 E6               [12] 2270 	mov	a,@r0
      0009F3 08               [12] 2271 	inc	r0
      0009F4 46               [12] 2272 	orl	a,@r0
      0009F5 08               [12] 2273 	inc	r0
      0009F6 46               [12] 2274 	orl	a,@r0
      0009F7 08               [12] 2275 	inc	r0
      0009F8 46               [12] 2276 	orl	a,@r0
      0009F9 60 06            [24] 2277 	jz	00500$
      0009FB 7B 31            [12] 2278 	mov	r3,#0x31
      0009FD 7C 00            [12] 2279 	mov	r4,#0x00
      0009FF 80 04            [24] 2280 	sjmp	00501$
      000A01                       2281 00500$:
      000A01 7B 30            [12] 2282 	mov	r3,#0x30
      000A03 7C 00            [12] 2283 	mov	r4,#0x00
      000A05                       2284 00501$:
      000A05 8B 82            [24] 2285 	mov	dpl,r3
      000A07 8C 83            [24] 2286 	mov	dph,r4
      000A09 12r00r00         [24] 2287 	lcall	_putchar
                                   2288 ;	calc.c:57: for (mask = 0x80000000lu; mask; mask >>= 1)
      000A0C E5*00            [12] 2289 	mov	a,_bp
      000A0E 24 1D            [12] 2290 	add	a,#0x1d
      000A10 F8               [12] 2291 	mov	r0,a
      000A11 08               [12] 2292 	inc	r0
      000A12 08               [12] 2293 	inc	r0
      000A13 08               [12] 2294 	inc	r0
      000A14 E6               [12] 2295 	mov	a,@r0
      000A15 C3               [12] 2296 	clr	c
      000A16 13               [12] 2297 	rrc	a
      000A17 F6               [12] 2298 	mov	@r0,a
      000A18 18               [12] 2299 	dec	r0
      000A19 E6               [12] 2300 	mov	a,@r0
      000A1A 13               [12] 2301 	rrc	a
      000A1B F6               [12] 2302 	mov	@r0,a
      000A1C 18               [12] 2303 	dec	r0
      000A1D E6               [12] 2304 	mov	a,@r0
      000A1E 13               [12] 2305 	rrc	a
      000A1F F6               [12] 2306 	mov	@r0,a
      000A20 18               [12] 2307 	dec	r0
      000A21 E6               [12] 2308 	mov	a,@r0
      000A22 13               [12] 2309 	rrc	a
      000A23 F6               [12] 2310 	mov	@r0,a
      000A24 E5*00            [12] 2311 	mov	a,_bp
      000A26 24 1D            [12] 2312 	add	a,#0x1d
      000A28 F8               [12] 2313 	mov	r0,a
      000A29 E6               [12] 2314 	mov	a,@r0
      000A2A 08               [12] 2315 	inc	r0
      000A2B 46               [12] 2316 	orl	a,@r0
      000A2C 08               [12] 2317 	inc	r0
      000A2D 46               [12] 2318 	orl	a,@r0
      000A2E 08               [12] 2319 	inc	r0
      000A2F 46               [12] 2320 	orl	a,@r0
      000A30 70 8F            [24] 2321 	jnz	00359$
                                   2322 ;	calc.c:138: printstr("\r\n");
      000A32 7Fr30            [12] 2323 	mov	r7,#___str_5
      000A34 7Es00            [12] 2324 	mov	r6,#(___str_5 >> 8)
      000A36 7D 80            [12] 2325 	mov	r5,#0x80
                                   2326 ;	calc.c:51: return;
      000A38                       2327 00362$:
                                   2328 ;	calc.c:49: for (; *s; s++) putchar(*s);
      000A38 8F 82            [24] 2329 	mov	dpl,r7
      000A3A 8E 83            [24] 2330 	mov	dph,r6
      000A3C 8D F0            [24] 2331 	mov	b,r5
      000A3E 12r00r00         [24] 2332 	lcall	__gptrget
      000A41 FC               [12] 2333 	mov	r4,a
      000A42 70 03            [24] 2334 	jnz	01267$
      000A44 02r2Ar46         [24] 2335 	ljmp	00249$
      000A47                       2336 01267$:
      000A47 7B 00            [12] 2337 	mov	r3,#0x00
      000A49 8C 82            [24] 2338 	mov	dpl,r4
      000A4B 8B 83            [24] 2339 	mov	dph,r3
      000A4D 12r00r00         [24] 2340 	lcall	_putchar
      000A50 0F               [12] 2341 	inc	r7
                                   2342 ;	calc.c:141: case 'P':
      000A51 BF 00 E4         [24] 2343 	cjne	r7,#0x00,00362$
      000A54 0E               [12] 2344 	inc	r6
      000A55 80 E1            [24] 2345 	sjmp	00362$
      000A57                       2346 00105$:
                                   2347 ;	calc.c:142: printstr("\r\n");
      000A57 7Fr30            [12] 2348 	mov	r7,#___str_5
      000A59 7Es00            [12] 2349 	mov	r6,#(___str_5 >> 8)
      000A5B 7D 80            [12] 2350 	mov	r5,#0x80
                                   2351 ;	calc.c:51: return;
      000A5D                       2352 00365$:
                                   2353 ;	calc.c:49: for (; *s; s++) putchar(*s);
      000A5D 8F 82            [24] 2354 	mov	dpl,r7
      000A5F 8E 83            [24] 2355 	mov	dph,r6
      000A61 8D F0            [24] 2356 	mov	b,r5
      000A63 12r00r00         [24] 2357 	lcall	__gptrget
      000A66 FC               [12] 2358 	mov	r4,a
      000A67 60 10            [24] 2359 	jz	00261$
      000A69 7B 00            [12] 2360 	mov	r3,#0x00
      000A6B 8C 82            [24] 2361 	mov	dpl,r4
      000A6D 8B 83            [24] 2362 	mov	dph,r3
      000A6F 12r00r00         [24] 2363 	lcall	_putchar
      000A72 0F               [12] 2364 	inc	r7
                                   2365 ;	calc.c:142: printstr("\r\n");
      000A73 BF 00 E7         [24] 2366 	cjne	r7,#0x00,00365$
      000A76 0E               [12] 2367 	inc	r6
      000A77 80 E4            [24] 2368 	sjmp	00365$
      000A79                       2369 00261$:
                                   2370 ;	calc.c:143: if (!stack_iter_peek(ctx->ps, dump_peek, ctx)) printstr("stack underflow\r\n");
      000A79 E5*00            [12] 2371 	mov	a,_bp
      000A7B 24 12            [12] 2372 	add	a,#0x12
      000A7D F8               [12] 2373 	mov	r0,a
      000A7E 86 07            [24] 2374 	mov	ar7,@r0
      000A80 08               [12] 2375 	inc	r0
      000A81 86 06            [24] 2376 	mov	ar6,@r0
      000A83 08               [12] 2377 	inc	r0
      000A84 86 05            [24] 2378 	mov	ar5,@r0
      000A86 E5*00            [12] 2379 	mov	a,_bp
      000A88 24 12            [12] 2380 	add	a,#0x12
      000A8A F8               [12] 2381 	mov	r0,a
      000A8B 74 13            [12] 2382 	mov	a,#0x13
      000A8D 26               [12] 2383 	add	a,@r0
      000A8E FA               [12] 2384 	mov	r2,a
      000A8F 74 40            [12] 2385 	mov	a,#0x40
      000A91 08               [12] 2386 	inc	r0
      000A92 36               [12] 2387 	addc	a,@r0
      000A93 FB               [12] 2388 	mov	r3,a
      000A94 08               [12] 2389 	inc	r0
      000A95 86 04            [24] 2390 	mov	ar4,@r0
      000A97 8A 82            [24] 2391 	mov	dpl,r2
      000A99 8B 83            [24] 2392 	mov	dph,r3
      000A9B 8C F0            [24] 2393 	mov	b,r4
      000A9D 12r00r00         [24] 2394 	lcall	__gptrget
      000AA0 FA               [12] 2395 	mov	r2,a
      000AA1 A3               [24] 2396 	inc	dptr
      000AA2 12r00r00         [24] 2397 	lcall	__gptrget
      000AA5 FB               [12] 2398 	mov	r3,a
      000AA6 A3               [24] 2399 	inc	dptr
      000AA7 12r00r00         [24] 2400 	lcall	__gptrget
      000AAA FC               [12] 2401 	mov	r4,a
      000AAB C0 07            [24] 2402 	push	ar7
      000AAD C0 06            [24] 2403 	push	ar6
      000AAF C0 05            [24] 2404 	push	ar5
      000AB1 74r8D            [12] 2405 	mov	a,#_dump_peek
      000AB3 C0 E0            [24] 2406 	push	acc
      000AB5 74s06            [12] 2407 	mov	a,#(_dump_peek >> 8)
      000AB7 C0 E0            [24] 2408 	push	acc
      000AB9 8A 82            [24] 2409 	mov	dpl,r2
      000ABB 8B 83            [24] 2410 	mov	dph,r3
      000ABD 8C F0            [24] 2411 	mov	b,r4
      000ABF 12r00r00         [24] 2412 	lcall	_stack_iter_peek
      000AC2 AB 82            [24] 2413 	mov	r3,dpl
      000AC4 AC 83            [24] 2414 	mov	r4,dph
      000AC6 E5 81            [12] 2415 	mov	a,sp
      000AC8 24 FB            [12] 2416 	add	a,#0xfb
      000ACA F5 81            [12] 2417 	mov	sp,a
      000ACC EB               [12] 2418 	mov	a,r3
      000ACD 4C               [12] 2419 	orl	a,r4
      000ACE 60 03            [24] 2420 	jz	01271$
      000AD0 02r2Ar46         [24] 2421 	ljmp	00249$
      000AD3                       2422 01271$:
      000AD3 7Fr07            [12] 2423 	mov	r7,#___str_1
      000AD5 7Es00            [12] 2424 	mov	r6,#(___str_1 >> 8)
      000AD7 7D 80            [12] 2425 	mov	r5,#0x80
                                   2426 ;	calc.c:51: return;
      000AD9                       2427 00368$:
                                   2428 ;	calc.c:49: for (; *s; s++) putchar(*s);
      000AD9 8F 82            [24] 2429 	mov	dpl,r7
      000ADB 8E 83            [24] 2430 	mov	dph,r6
      000ADD 8D F0            [24] 2431 	mov	b,r5
      000ADF 12r00r00         [24] 2432 	lcall	__gptrget
      000AE2 FC               [12] 2433 	mov	r4,a
      000AE3 70 03            [24] 2434 	jnz	01272$
      000AE5 02r2Ar46         [24] 2435 	ljmp	00249$
      000AE8                       2436 01272$:
      000AE8 7B 00            [12] 2437 	mov	r3,#0x00
      000AEA 8C 82            [24] 2438 	mov	dpl,r4
      000AEC 8B 83            [24] 2439 	mov	dph,r3
      000AEE 12r00r00         [24] 2440 	lcall	_putchar
      000AF1 0F               [12] 2441 	inc	r7
                                   2442 ;	calc.c:146: case 'v':
      000AF2 BF 00 E4         [24] 2443 	cjne	r7,#0x00,00368$
      000AF5 0E               [12] 2444 	inc	r6
      000AF6 80 E1            [24] 2445 	sjmp	00368$
      000AF8                       2446 00109$:
                                   2447 ;	calc.c:147: printstr("\r\n");
      000AF8 7Fr30            [12] 2448 	mov	r7,#___str_5
      000AFA 7Es00            [12] 2449 	mov	r6,#(___str_5 >> 8)
      000AFC 7D 80            [12] 2450 	mov	r5,#0x80
                                   2451 ;	calc.c:51: return;
      000AFE                       2452 00371$:
                                   2453 ;	calc.c:49: for (; *s; s++) putchar(*s);
      000AFE 8F 82            [24] 2454 	mov	dpl,r7
      000B00 8E 83            [24] 2455 	mov	dph,r6
      000B02 8D F0            [24] 2456 	mov	b,r5
      000B04 12r00r00         [24] 2457 	lcall	__gptrget
      000B07 FC               [12] 2458 	mov	r4,a
      000B08 60 10            [24] 2459 	jz	00265$
      000B0A 7B 00            [12] 2460 	mov	r3,#0x00
      000B0C 8C 82            [24] 2461 	mov	dpl,r4
      000B0E 8B 83            [24] 2462 	mov	dph,r3
      000B10 12r00r00         [24] 2463 	lcall	_putchar
      000B13 0F               [12] 2464 	inc	r7
                                   2465 ;	calc.c:147: printstr("\r\n");
      000B14 BF 00 E7         [24] 2466 	cjne	r7,#0x00,00371$
      000B17 0E               [12] 2467 	inc	r6
      000B18 80 E4            [24] 2468 	sjmp	00371$
      000B1A                       2469 00265$:
                                   2470 ;	calc.c:148: if (!stack_pop(ctx->ps, &d0)) printstr("stack underflow\r\n");
      000B1A E5*00            [12] 2471 	mov	a,_bp
      000B1C 24 15            [12] 2472 	add	a,#0x15
      000B1E FF               [12] 2473 	mov	r7,a
      000B1F 7E 00            [12] 2474 	mov	r6,#0x00
      000B21 7D 40            [12] 2475 	mov	r5,#0x40
      000B23 E5*00            [12] 2476 	mov	a,_bp
      000B25 24 12            [12] 2477 	add	a,#0x12
      000B27 F8               [12] 2478 	mov	r0,a
      000B28 74 13            [12] 2479 	mov	a,#0x13
      000B2A 26               [12] 2480 	add	a,@r0
      000B2B FA               [12] 2481 	mov	r2,a
      000B2C ED               [12] 2482 	mov	a,r5
      000B2D 08               [12] 2483 	inc	r0
      000B2E 36               [12] 2484 	addc	a,@r0
      000B2F FB               [12] 2485 	mov	r3,a
      000B30 08               [12] 2486 	inc	r0
      000B31 86 04            [24] 2487 	mov	ar4,@r0
      000B33 8A 82            [24] 2488 	mov	dpl,r2
      000B35 8B 83            [24] 2489 	mov	dph,r3
      000B37 8C F0            [24] 2490 	mov	b,r4
      000B39 12r00r00         [24] 2491 	lcall	__gptrget
      000B3C FA               [12] 2492 	mov	r2,a
      000B3D A3               [24] 2493 	inc	dptr
      000B3E 12r00r00         [24] 2494 	lcall	__gptrget
      000B41 FB               [12] 2495 	mov	r3,a
      000B42 A3               [24] 2496 	inc	dptr
      000B43 12r00r00         [24] 2497 	lcall	__gptrget
      000B46 FC               [12] 2498 	mov	r4,a
      000B47 C0 07            [24] 2499 	push	ar7
      000B49 C0 06            [24] 2500 	push	ar6
      000B4B C0 05            [24] 2501 	push	ar5
      000B4D 8A 82            [24] 2502 	mov	dpl,r2
      000B4F 8B 83            [24] 2503 	mov	dph,r3
      000B51 8C F0            [24] 2504 	mov	b,r4
      000B53 12r00r00         [24] 2505 	lcall	_stack_pop
      000B56 AB 82            [24] 2506 	mov	r3,dpl
      000B58 AC 83            [24] 2507 	mov	r4,dph
      000B5A 15 81            [12] 2508 	dec	sp
      000B5C 15 81            [12] 2509 	dec	sp
      000B5E 15 81            [12] 2510 	dec	sp
      000B60 EB               [12] 2511 	mov	a,r3
      000B61 4C               [12] 2512 	orl	a,r4
      000B62 70 25            [24] 2513 	jnz	00111$
      000B64 7Fr07            [12] 2514 	mov	r7,#___str_1
      000B66 7Es00            [12] 2515 	mov	r6,#(___str_1 >> 8)
      000B68 7D 80            [12] 2516 	mov	r5,#0x80
                                   2517 ;	calc.c:51: return;
      000B6A                       2518 00374$:
                                   2519 ;	calc.c:49: for (; *s; s++) putchar(*s);
      000B6A 8F 82            [24] 2520 	mov	dpl,r7
      000B6C 8E 83            [24] 2521 	mov	dph,r6
      000B6E 8D F0            [24] 2522 	mov	b,r5
      000B70 12r00r00         [24] 2523 	lcall	__gptrget
      000B73 FC               [12] 2524 	mov	r4,a
      000B74 70 03            [24] 2525 	jnz	01277$
      000B76 02r2Ar46         [24] 2526 	ljmp	00249$
      000B79                       2527 01277$:
      000B79 7B 00            [12] 2528 	mov	r3,#0x00
      000B7B 8C 82            [24] 2529 	mov	dpl,r4
      000B7D 8B 83            [24] 2530 	mov	dph,r3
      000B7F 12r00r00         [24] 2531 	lcall	_putchar
      000B82 0F               [12] 2532 	inc	r7
                                   2533 ;	calc.c:148: if (!stack_pop(ctx->ps, &d0)) printstr("stack underflow\r\n");
      000B83 BF 00 E4         [24] 2534 	cjne	r7,#0x00,00374$
      000B86 0E               [12] 2535 	inc	r6
      000B87 80 E1            [24] 2536 	sjmp	00374$
      000B89                       2537 00111$:
                                   2538 ;	calc.c:150: printstr("VT ");
      000B89 7Fr40            [12] 2539 	mov	r7,#___str_9
      000B8B 7Es00            [12] 2540 	mov	r6,#(___str_9 >> 8)
      000B8D 7D 80            [12] 2541 	mov	r5,#0x80
                                   2542 ;	calc.c:51: return;
      000B8F                       2543 00377$:
                                   2544 ;	calc.c:49: for (; *s; s++) putchar(*s);
      000B8F 8F 82            [24] 2545 	mov	dpl,r7
      000B91 8E 83            [24] 2546 	mov	dph,r6
      000B93 8D F0            [24] 2547 	mov	b,r5
      000B95 12r00r00         [24] 2548 	lcall	__gptrget
      000B98 FC               [12] 2549 	mov	r4,a
      000B99 60 10            [24] 2550 	jz	00269$
      000B9B 7B 00            [12] 2551 	mov	r3,#0x00
      000B9D 8C 82            [24] 2552 	mov	dpl,r4
      000B9F 8B 83            [24] 2553 	mov	dph,r3
      000BA1 12r00r00         [24] 2554 	lcall	_putchar
      000BA4 0F               [12] 2555 	inc	r7
                                   2556 ;	calc.c:150: printstr("VT ");
      000BA5 BF 00 E7         [24] 2557 	cjne	r7,#0x00,00377$
      000BA8 0E               [12] 2558 	inc	r6
      000BA9 80 E4            [24] 2559 	sjmp	00377$
      000BAB                       2560 00269$:
                                   2561 ;	calc.c:151: printf("% 11ld / ", d0);
      000BAB E5*00            [12] 2562 	mov	a,_bp
      000BAD 24 15            [12] 2563 	add	a,#0x15
      000BAF F8               [12] 2564 	mov	r0,a
      000BB0 E6               [12] 2565 	mov	a,@r0
      000BB1 C0 E0            [24] 2566 	push	acc
      000BB3 08               [12] 2567 	inc	r0
      000BB4 E6               [12] 2568 	mov	a,@r0
      000BB5 C0 E0            [24] 2569 	push	acc
      000BB7 08               [12] 2570 	inc	r0
      000BB8 E6               [12] 2571 	mov	a,@r0
      000BB9 C0 E0            [24] 2572 	push	acc
      000BBB 08               [12] 2573 	inc	r0
      000BBC E6               [12] 2574 	mov	a,@r0
      000BBD C0 E0            [24] 2575 	push	acc
      000BBF 74r1D            [12] 2576 	mov	a,#___str_3
      000BC1 C0 E0            [24] 2577 	push	acc
      000BC3 74s00            [12] 2578 	mov	a,#(___str_3 >> 8)
      000BC5 C0 E0            [24] 2579 	push	acc
      000BC7 74 80            [12] 2580 	mov	a,#0x80
      000BC9 C0 E0            [24] 2581 	push	acc
      000BCB 12r00r00         [24] 2582 	lcall	_printf
      000BCE E5 81            [12] 2583 	mov	a,sp
      000BD0 24 F9            [12] 2584 	add	a,#0xf9
      000BD2 F5 81            [12] 2585 	mov	sp,a
                                   2586 ;	calc.c:152: printf("%08lx / ", d0);
      000BD4 E5*00            [12] 2587 	mov	a,_bp
      000BD6 24 15            [12] 2588 	add	a,#0x15
      000BD8 F8               [12] 2589 	mov	r0,a
      000BD9 E6               [12] 2590 	mov	a,@r0
      000BDA C0 E0            [24] 2591 	push	acc
      000BDC 08               [12] 2592 	inc	r0
      000BDD E6               [12] 2593 	mov	a,@r0
      000BDE C0 E0            [24] 2594 	push	acc
      000BE0 08               [12] 2595 	inc	r0
      000BE1 E6               [12] 2596 	mov	a,@r0
      000BE2 C0 E0            [24] 2597 	push	acc
      000BE4 08               [12] 2598 	inc	r0
      000BE5 E6               [12] 2599 	mov	a,@r0
      000BE6 C0 E0            [24] 2600 	push	acc
      000BE8 74r27            [12] 2601 	mov	a,#___str_4
      000BEA C0 E0            [24] 2602 	push	acc
      000BEC 74s00            [12] 2603 	mov	a,#(___str_4 >> 8)
      000BEE C0 E0            [24] 2604 	push	acc
      000BF0 74 80            [12] 2605 	mov	a,#0x80
      000BF2 C0 E0            [24] 2606 	push	acc
      000BF4 12r00r00         [24] 2607 	lcall	_printf
      000BF7 E5 81            [12] 2608 	mov	a,sp
      000BF9 24 F9            [12] 2609 	add	a,#0xf9
      000BFB F5 81            [12] 2610 	mov	sp,a
                                   2611 ;	calc.c:153: printbin(d0);
      000BFD E5*00            [12] 2612 	mov	a,_bp
      000BFF 24 15            [12] 2613 	add	a,#0x15
      000C01 F8               [12] 2614 	mov	r0,a
      000C02 86 07            [24] 2615 	mov	ar7,@r0
      000C04 08               [12] 2616 	inc	r0
      000C05 86 06            [24] 2617 	mov	ar6,@r0
      000C07 08               [12] 2618 	inc	r0
      000C08 86 05            [24] 2619 	mov	ar5,@r0
      000C0A 08               [12] 2620 	inc	r0
      000C0B 86 04            [24] 2621 	mov	ar4,@r0
      000C0D 8C 02            [24] 2622 	mov	ar2,r4
                                   2623 ;	calc.c:57: for (mask = 0x80000000lu; mask; mask >>= 1)
      000C0F E5*00            [12] 2624 	mov	a,_bp
      000C11 24 1D            [12] 2625 	add	a,#0x1d
      000C13 F8               [12] 2626 	mov	r0,a
      000C14 E4               [12] 2627 	clr	a
      000C15 F6               [12] 2628 	mov	@r0,a
      000C16 08               [12] 2629 	inc	r0
      000C17 F6               [12] 2630 	mov	@r0,a
      000C18 08               [12] 2631 	inc	r0
      000C19 F6               [12] 2632 	mov	@r0,a
      000C1A 08               [12] 2633 	inc	r0
      000C1B 76 80            [12] 2634 	mov	@r0,#0x80
      000C1D                       2635 00379$:
                                   2636 ;	calc.c:58: (void)putchar((d & mask) ? (int)'1' : (int)'0');
      000C1D E5*00            [12] 2637 	mov	a,_bp
      000C1F 24 07            [12] 2638 	add	a,#0x07
      000C21 F8               [12] 2639 	mov	r0,a
      000C22 A6 07            [24] 2640 	mov	@r0,ar7
      000C24 08               [12] 2641 	inc	r0
      000C25 A6 06            [24] 2642 	mov	@r0,ar6
      000C27 08               [12] 2643 	inc	r0
      000C28 A6 05            [24] 2644 	mov	@r0,ar5
      000C2A 08               [12] 2645 	inc	r0
      000C2B A6 02            [24] 2646 	mov	@r0,ar2
      000C2D E5*00            [12] 2647 	mov	a,_bp
      000C2F 24 07            [12] 2648 	add	a,#0x07
      000C31 F8               [12] 2649 	mov	r0,a
      000C32 E5*00            [12] 2650 	mov	a,_bp
      000C34 24 1D            [12] 2651 	add	a,#0x1d
      000C36 F9               [12] 2652 	mov	r1,a
      000C37 E7               [12] 2653 	mov	a,@r1
      000C38 56               [12] 2654 	anl	a,@r0
      000C39 F6               [12] 2655 	mov	@r0,a
      000C3A 09               [12] 2656 	inc	r1
      000C3B E7               [12] 2657 	mov	a,@r1
      000C3C 08               [12] 2658 	inc	r0
      000C3D 56               [12] 2659 	anl	a,@r0
      000C3E F6               [12] 2660 	mov	@r0,a
      000C3F 09               [12] 2661 	inc	r1
      000C40 E7               [12] 2662 	mov	a,@r1
      000C41 08               [12] 2663 	inc	r0
      000C42 56               [12] 2664 	anl	a,@r0
      000C43 F6               [12] 2665 	mov	@r0,a
      000C44 09               [12] 2666 	inc	r1
      000C45 E7               [12] 2667 	mov	a,@r1
      000C46 08               [12] 2668 	inc	r0
      000C47 56               [12] 2669 	anl	a,@r0
      000C48 F6               [12] 2670 	mov	@r0,a
      000C49 E5*00            [12] 2671 	mov	a,_bp
      000C4B 24 07            [12] 2672 	add	a,#0x07
      000C4D F8               [12] 2673 	mov	r0,a
      000C4E E6               [12] 2674 	mov	a,@r0
      000C4F 08               [12] 2675 	inc	r0
      000C50 46               [12] 2676 	orl	a,@r0
      000C51 08               [12] 2677 	inc	r0
      000C52 46               [12] 2678 	orl	a,@r0
      000C53 08               [12] 2679 	inc	r0
      000C54 46               [12] 2680 	orl	a,@r0
      000C55 60 06            [24] 2681 	jz	00502$
      000C57 7B 31            [12] 2682 	mov	r3,#0x31
      000C59 7C 00            [12] 2683 	mov	r4,#0x00
      000C5B 80 04            [24] 2684 	sjmp	00503$
      000C5D                       2685 00502$:
      000C5D 7B 30            [12] 2686 	mov	r3,#0x30
      000C5F 7C 00            [12] 2687 	mov	r4,#0x00
      000C61                       2688 00503$:
      000C61 8B 82            [24] 2689 	mov	dpl,r3
      000C63 8C 83            [24] 2690 	mov	dph,r4
      000C65 12r00r00         [24] 2691 	lcall	_putchar
                                   2692 ;	calc.c:57: for (mask = 0x80000000lu; mask; mask >>= 1)
      000C68 E5*00            [12] 2693 	mov	a,_bp
      000C6A 24 1D            [12] 2694 	add	a,#0x1d
      000C6C F8               [12] 2695 	mov	r0,a
      000C6D 08               [12] 2696 	inc	r0
      000C6E 08               [12] 2697 	inc	r0
      000C6F 08               [12] 2698 	inc	r0
      000C70 E6               [12] 2699 	mov	a,@r0
      000C71 C3               [12] 2700 	clr	c
      000C72 13               [12] 2701 	rrc	a
      000C73 F6               [12] 2702 	mov	@r0,a
      000C74 18               [12] 2703 	dec	r0
      000C75 E6               [12] 2704 	mov	a,@r0
      000C76 13               [12] 2705 	rrc	a
      000C77 F6               [12] 2706 	mov	@r0,a
      000C78 18               [12] 2707 	dec	r0
      000C79 E6               [12] 2708 	mov	a,@r0
      000C7A 13               [12] 2709 	rrc	a
      000C7B F6               [12] 2710 	mov	@r0,a
      000C7C 18               [12] 2711 	dec	r0
      000C7D E6               [12] 2712 	mov	a,@r0
      000C7E 13               [12] 2713 	rrc	a
      000C7F F6               [12] 2714 	mov	@r0,a
      000C80 E5*00            [12] 2715 	mov	a,_bp
      000C82 24 1D            [12] 2716 	add	a,#0x1d
      000C84 F8               [12] 2717 	mov	r0,a
      000C85 E6               [12] 2718 	mov	a,@r0
      000C86 08               [12] 2719 	inc	r0
      000C87 46               [12] 2720 	orl	a,@r0
      000C88 08               [12] 2721 	inc	r0
      000C89 46               [12] 2722 	orl	a,@r0
      000C8A 08               [12] 2723 	inc	r0
      000C8B 46               [12] 2724 	orl	a,@r0
      000C8C 70 8F            [24] 2725 	jnz	00379$
                                   2726 ;	calc.c:154: printstr("\r\n");
      000C8E 7Fr30            [12] 2727 	mov	r7,#___str_5
      000C90 7Es00            [12] 2728 	mov	r6,#(___str_5 >> 8)
      000C92 7D 80            [12] 2729 	mov	r5,#0x80
                                   2730 ;	calc.c:51: return;
      000C94                       2731 00382$:
                                   2732 ;	calc.c:49: for (; *s; s++) putchar(*s);
      000C94 8F 82            [24] 2733 	mov	dpl,r7
      000C96 8E 83            [24] 2734 	mov	dph,r6
      000C98 8D F0            [24] 2735 	mov	b,r5
      000C9A 12r00r00         [24] 2736 	lcall	__gptrget
      000C9D FC               [12] 2737 	mov	r4,a
      000C9E 70 03            [24] 2738 	jnz	01283$
      000CA0 02r2Ar46         [24] 2739 	ljmp	00249$
      000CA3                       2740 01283$:
      000CA3 7B 00            [12] 2741 	mov	r3,#0x00
      000CA5 8C 82            [24] 2742 	mov	dpl,r4
      000CA7 8B 83            [24] 2743 	mov	dph,r3
      000CA9 12r00r00         [24] 2744 	lcall	_putchar
      000CAC 0F               [12] 2745 	inc	r7
                                   2746 ;	calc.c:157: case 'V':
      000CAD BF 00 E4         [24] 2747 	cjne	r7,#0x00,00382$
      000CB0 0E               [12] 2748 	inc	r6
      000CB1 80 E1            [24] 2749 	sjmp	00382$
      000CB3                       2750 00113$:
                                   2751 ;	calc.c:158: printstr("\r\n");
      000CB3 7Fr30            [12] 2752 	mov	r7,#___str_5
      000CB5 7Es00            [12] 2753 	mov	r6,#(___str_5 >> 8)
      000CB7 7D 80            [12] 2754 	mov	r5,#0x80
                                   2755 ;	calc.c:51: return;
      000CB9                       2756 00385$:
                                   2757 ;	calc.c:49: for (; *s; s++) putchar(*s);
      000CB9 8F 82            [24] 2758 	mov	dpl,r7
      000CBB 8E 83            [24] 2759 	mov	dph,r6
      000CBD 8D F0            [24] 2760 	mov	b,r5
      000CBF 12r00r00         [24] 2761 	lcall	__gptrget
      000CC2 FC               [12] 2762 	mov	r4,a
      000CC3 60 10            [24] 2763 	jz	00275$
      000CC5 7B 00            [12] 2764 	mov	r3,#0x00
      000CC7 8C 82            [24] 2765 	mov	dpl,r4
      000CC9 8B 83            [24] 2766 	mov	dph,r3
      000CCB 12r00r00         [24] 2767 	lcall	_putchar
      000CCE 0F               [12] 2768 	inc	r7
                                   2769 ;	calc.c:158: printstr("\r\n");
      000CCF BF 00 E7         [24] 2770 	cjne	r7,#0x00,00385$
      000CD2 0E               [12] 2771 	inc	r6
      000CD3 80 E4            [24] 2772 	sjmp	00385$
      000CD5                       2773 00275$:
                                   2774 ;	calc.c:159: (void)dump_pop(_ctx, delta);
      000CD5 E5*00            [12] 2775 	mov	a,_bp
      000CD7 24 FB            [12] 2776 	add	a,#0xfb
      000CD9 F8               [12] 2777 	mov	r0,a
      000CDA E6               [12] 2778 	mov	a,@r0
      000CDB C0 E0            [24] 2779 	push	acc
      000CDD 08               [12] 2780 	inc	r0
      000CDE E6               [12] 2781 	mov	a,@r0
      000CDF C0 E0            [24] 2782 	push	acc
      000CE1 08               [12] 2783 	inc	r0
      000CE2 E6               [12] 2784 	mov	a,@r0
      000CE3 C0 E0            [24] 2785 	push	acc
      000CE5 A8*00            [24] 2786 	mov	r0,_bp
      000CE7 08               [12] 2787 	inc	r0
      000CE8 86 82            [24] 2788 	mov	dpl,@r0
      000CEA 08               [12] 2789 	inc	r0
      000CEB 86 83            [24] 2790 	mov	dph,@r0
      000CED 08               [12] 2791 	inc	r0
      000CEE 86 F0            [24] 2792 	mov	b,@r0
      000CF0 12r01r93         [24] 2793 	lcall	_dump_pop
      000CF3 15 81            [12] 2794 	dec	sp
      000CF5 15 81            [12] 2795 	dec	sp
      000CF7 15 81            [12] 2796 	dec	sp
                                   2797 ;	calc.c:160: break;
      000CF9 02r2Ar46         [24] 2798 	ljmp	00249$
                                   2799 ;	calc.c:161: case 'x':
      000CFC                       2800 00114$:
                                   2801 ;	calc.c:162: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      000CFC E5*00            [12] 2802 	mov	a,_bp
      000CFE 24 15            [12] 2803 	add	a,#0x15
      000D00 FF               [12] 2804 	mov	r7,a
      000D01 7E 00            [12] 2805 	mov	r6,#0x00
      000D03 7D 40            [12] 2806 	mov	r5,#0x40
      000D05 E5*00            [12] 2807 	mov	a,_bp
      000D07 24 12            [12] 2808 	add	a,#0x12
      000D09 F8               [12] 2809 	mov	r0,a
      000D0A E5*00            [12] 2810 	mov	a,_bp
      000D0C 24 07            [12] 2811 	add	a,#0x07
      000D0E F9               [12] 2812 	mov	r1,a
      000D0F 74 13            [12] 2813 	mov	a,#0x13
      000D11 26               [12] 2814 	add	a,@r0
      000D12 F7               [12] 2815 	mov	@r1,a
      000D13 74 40            [12] 2816 	mov	a,#0x40
      000D15 08               [12] 2817 	inc	r0
      000D16 36               [12] 2818 	addc	a,@r0
      000D17 09               [12] 2819 	inc	r1
      000D18 F7               [12] 2820 	mov	@r1,a
      000D19 08               [12] 2821 	inc	r0
      000D1A 09               [12] 2822 	inc	r1
      000D1B E6               [12] 2823 	mov	a,@r0
      000D1C F7               [12] 2824 	mov	@r1,a
      000D1D E5*00            [12] 2825 	mov	a,_bp
      000D1F 24 07            [12] 2826 	add	a,#0x07
      000D21 F8               [12] 2827 	mov	r0,a
      000D22 86 82            [24] 2828 	mov	dpl,@r0
      000D24 08               [12] 2829 	inc	r0
      000D25 86 83            [24] 2830 	mov	dph,@r0
      000D27 08               [12] 2831 	inc	r0
      000D28 86 F0            [24] 2832 	mov	b,@r0
      000D2A 12r00r00         [24] 2833 	lcall	__gptrget
      000D2D FA               [12] 2834 	mov	r2,a
      000D2E A3               [24] 2835 	inc	dptr
      000D2F 12r00r00         [24] 2836 	lcall	__gptrget
      000D32 FB               [12] 2837 	mov	r3,a
      000D33 A3               [24] 2838 	inc	dptr
      000D34 12r00r00         [24] 2839 	lcall	__gptrget
      000D37 FC               [12] 2840 	mov	r4,a
      000D38 C0 07            [24] 2841 	push	ar7
      000D3A C0 06            [24] 2842 	push	ar6
      000D3C C0 05            [24] 2843 	push	ar5
      000D3E 8A 82            [24] 2844 	mov	dpl,r2
      000D40 8B 83            [24] 2845 	mov	dph,r3
      000D42 8C F0            [24] 2846 	mov	b,r4
      000D44 12r00r00         [24] 2847 	lcall	_stack_pop
      000D47 AB 82            [24] 2848 	mov	r3,dpl
      000D49 AC 83            [24] 2849 	mov	r4,dph
      000D4B 15 81            [12] 2850 	dec	sp
      000D4D 15 81            [12] 2851 	dec	sp
      000D4F 15 81            [12] 2852 	dec	sp
      000D51 EB               [12] 2853 	mov	a,r3
      000D52 4C               [12] 2854 	orl	a,r4
      000D53 70 25            [24] 2855 	jnz	00119$
      000D55 7Fr44            [12] 2856 	mov	r7,#___str_10
      000D57 7Es00            [12] 2857 	mov	r6,#(___str_10 >> 8)
      000D59 7D 80            [12] 2858 	mov	r5,#0x80
                                   2859 ;	calc.c:51: return;
      000D5B                       2860 00388$:
                                   2861 ;	calc.c:49: for (; *s; s++) putchar(*s);
      000D5B 8F 82            [24] 2862 	mov	dpl,r7
      000D5D 8E 83            [24] 2863 	mov	dph,r6
      000D5F 8D F0            [24] 2864 	mov	b,r5
      000D61 12r00r00         [24] 2865 	lcall	__gptrget
      000D64 FC               [12] 2866 	mov	r4,a
      000D65 70 03            [24] 2867 	jnz	01288$
      000D67 02r2Ar46         [24] 2868 	ljmp	00249$
      000D6A                       2869 01288$:
      000D6A 7B 00            [12] 2870 	mov	r3,#0x00
      000D6C 8C 82            [24] 2871 	mov	dpl,r4
      000D6E 8B 83            [24] 2872 	mov	dph,r3
      000D70 12r00r00         [24] 2873 	lcall	_putchar
      000D73 0F               [12] 2874 	inc	r7
                                   2875 ;	calc.c:162: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      000D74 BF 00 E4         [24] 2876 	cjne	r7,#0x00,00388$
      000D77 0E               [12] 2877 	inc	r6
      000D78 80 E1            [24] 2878 	sjmp	00388$
      000D7A                       2879 00119$:
                                   2880 ;	calc.c:163: else if (!stack_pop(ctx->ps, &d1)) {
      000D7A E5*00            [12] 2881 	mov	a,_bp
      000D7C 24 19            [12] 2882 	add	a,#0x19
      000D7E FF               [12] 2883 	mov	r7,a
      000D7F 7E 00            [12] 2884 	mov	r6,#0x00
      000D81 7D 40            [12] 2885 	mov	r5,#0x40
      000D83 E5*00            [12] 2886 	mov	a,_bp
      000D85 24 07            [12] 2887 	add	a,#0x07
      000D87 F8               [12] 2888 	mov	r0,a
      000D88 86 82            [24] 2889 	mov	dpl,@r0
      000D8A 08               [12] 2890 	inc	r0
      000D8B 86 83            [24] 2891 	mov	dph,@r0
      000D8D 08               [12] 2892 	inc	r0
      000D8E 86 F0            [24] 2893 	mov	b,@r0
      000D90 12r00r00         [24] 2894 	lcall	__gptrget
      000D93 FA               [12] 2895 	mov	r2,a
      000D94 A3               [24] 2896 	inc	dptr
      000D95 12r00r00         [24] 2897 	lcall	__gptrget
      000D98 FB               [12] 2898 	mov	r3,a
      000D99 A3               [24] 2899 	inc	dptr
      000D9A 12r00r00         [24] 2900 	lcall	__gptrget
      000D9D FC               [12] 2901 	mov	r4,a
      000D9E C0 07            [24] 2902 	push	ar7
      000DA0 C0 06            [24] 2903 	push	ar6
      000DA2 C0 05            [24] 2904 	push	ar5
      000DA4 8A 82            [24] 2905 	mov	dpl,r2
      000DA6 8B 83            [24] 2906 	mov	dph,r3
      000DA8 8C F0            [24] 2907 	mov	b,r4
      000DAA 12r00r00         [24] 2908 	lcall	_stack_pop
      000DAD AB 82            [24] 2909 	mov	r3,dpl
      000DAF AC 83            [24] 2910 	mov	r4,dph
      000DB1 15 81            [12] 2911 	dec	sp
      000DB3 15 81            [12] 2912 	dec	sp
      000DB5 15 81            [12] 2913 	dec	sp
      000DB7 EB               [12] 2914 	mov	a,r3
      000DB8 4C               [12] 2915 	orl	a,r4
      000DB9 70 63            [24] 2916 	jnz	00116$
                                   2917 ;	calc.c:164: (void)stack_push(ctx->ps, d0);
      000DBB E5*00            [12] 2918 	mov	a,_bp
      000DBD 24 07            [12] 2919 	add	a,#0x07
      000DBF F8               [12] 2920 	mov	r0,a
      000DC0 86 82            [24] 2921 	mov	dpl,@r0
      000DC2 08               [12] 2922 	inc	r0
      000DC3 86 83            [24] 2923 	mov	dph,@r0
      000DC5 08               [12] 2924 	inc	r0
      000DC6 86 F0            [24] 2925 	mov	b,@r0
      000DC8 12r00r00         [24] 2926 	lcall	__gptrget
      000DCB FA               [12] 2927 	mov	r2,a
      000DCC A3               [24] 2928 	inc	dptr
      000DCD 12r00r00         [24] 2929 	lcall	__gptrget
      000DD0 FB               [12] 2930 	mov	r3,a
      000DD1 A3               [24] 2931 	inc	dptr
      000DD2 12r00r00         [24] 2932 	lcall	__gptrget
      000DD5 FC               [12] 2933 	mov	r4,a
      000DD6 E5*00            [12] 2934 	mov	a,_bp
      000DD8 24 15            [12] 2935 	add	a,#0x15
      000DDA F8               [12] 2936 	mov	r0,a
      000DDB E6               [12] 2937 	mov	a,@r0
      000DDC C0 E0            [24] 2938 	push	acc
      000DDE 08               [12] 2939 	inc	r0
      000DDF E6               [12] 2940 	mov	a,@r0
      000DE0 C0 E0            [24] 2941 	push	acc
      000DE2 08               [12] 2942 	inc	r0
      000DE3 E6               [12] 2943 	mov	a,@r0
      000DE4 C0 E0            [24] 2944 	push	acc
      000DE6 08               [12] 2945 	inc	r0
      000DE7 E6               [12] 2946 	mov	a,@r0
      000DE8 C0 E0            [24] 2947 	push	acc
      000DEA 8A 82            [24] 2948 	mov	dpl,r2
      000DEC 8B 83            [24] 2949 	mov	dph,r3
      000DEE 8C F0            [24] 2950 	mov	b,r4
      000DF0 12r00r00         [24] 2951 	lcall	_stack_push
      000DF3 E5 81            [12] 2952 	mov	a,sp
      000DF5 24 FC            [12] 2953 	add	a,#0xfc
      000DF7 F5 81            [12] 2954 	mov	sp,a
                                   2955 ;	calc.c:165: printstr("\r\nstack underflow\r\n");
      000DF9 7Fr44            [12] 2956 	mov	r7,#___str_10
      000DFB 7Es00            [12] 2957 	mov	r6,#(___str_10 >> 8)
      000DFD 7D 80            [12] 2958 	mov	r5,#0x80
                                   2959 ;	calc.c:51: return;
      000DFF                       2960 00391$:
                                   2961 ;	calc.c:49: for (; *s; s++) putchar(*s);
      000DFF 8F 82            [24] 2962 	mov	dpl,r7
      000E01 8E 83            [24] 2963 	mov	dph,r6
      000E03 8D F0            [24] 2964 	mov	b,r5
      000E05 12r00r00         [24] 2965 	lcall	__gptrget
      000E08 FC               [12] 2966 	mov	r4,a
      000E09 70 03            [24] 2967 	jnz	01291$
      000E0B 02r2Ar46         [24] 2968 	ljmp	00249$
      000E0E                       2969 01291$:
      000E0E 7B 00            [12] 2970 	mov	r3,#0x00
      000E10 8C 82            [24] 2971 	mov	dpl,r4
      000E12 8B 83            [24] 2972 	mov	dph,r3
      000E14 12r00r00         [24] 2973 	lcall	_putchar
      000E17 0F               [12] 2974 	inc	r7
                                   2975 ;	calc.c:165: printstr("\r\nstack underflow\r\n");
      000E18 BF 00 E4         [24] 2976 	cjne	r7,#0x00,00391$
      000E1B 0E               [12] 2977 	inc	r6
      000E1C 80 E1            [24] 2978 	sjmp	00391$
      000E1E                       2979 00116$:
                                   2980 ;	calc.c:167: (void)stack_push(ctx->ps, d0);
      000E1E E5*00            [12] 2981 	mov	a,_bp
      000E20 24 07            [12] 2982 	add	a,#0x07
      000E22 F8               [12] 2983 	mov	r0,a
      000E23 86 82            [24] 2984 	mov	dpl,@r0
      000E25 08               [12] 2985 	inc	r0
      000E26 86 83            [24] 2986 	mov	dph,@r0
      000E28 08               [12] 2987 	inc	r0
      000E29 86 F0            [24] 2988 	mov	b,@r0
      000E2B 12r00r00         [24] 2989 	lcall	__gptrget
      000E2E FA               [12] 2990 	mov	r2,a
      000E2F A3               [24] 2991 	inc	dptr
      000E30 12r00r00         [24] 2992 	lcall	__gptrget
      000E33 FB               [12] 2993 	mov	r3,a
      000E34 A3               [24] 2994 	inc	dptr
      000E35 12r00r00         [24] 2995 	lcall	__gptrget
      000E38 FC               [12] 2996 	mov	r4,a
      000E39 E5*00            [12] 2997 	mov	a,_bp
      000E3B 24 15            [12] 2998 	add	a,#0x15
      000E3D F8               [12] 2999 	mov	r0,a
      000E3E E6               [12] 3000 	mov	a,@r0
      000E3F C0 E0            [24] 3001 	push	acc
      000E41 08               [12] 3002 	inc	r0
      000E42 E6               [12] 3003 	mov	a,@r0
      000E43 C0 E0            [24] 3004 	push	acc
      000E45 08               [12] 3005 	inc	r0
      000E46 E6               [12] 3006 	mov	a,@r0
      000E47 C0 E0            [24] 3007 	push	acc
      000E49 08               [12] 3008 	inc	r0
      000E4A E6               [12] 3009 	mov	a,@r0
      000E4B C0 E0            [24] 3010 	push	acc
      000E4D 8A 82            [24] 3011 	mov	dpl,r2
      000E4F 8B 83            [24] 3012 	mov	dph,r3
      000E51 8C F0            [24] 3013 	mov	b,r4
      000E53 12r00r00         [24] 3014 	lcall	_stack_push
      000E56 E5 81            [12] 3015 	mov	a,sp
      000E58 24 FC            [12] 3016 	add	a,#0xfc
      000E5A F5 81            [12] 3017 	mov	sp,a
                                   3018 ;	calc.c:168: (void)stack_push(ctx->ps, d1);
      000E5C E5*00            [12] 3019 	mov	a,_bp
      000E5E 24 07            [12] 3020 	add	a,#0x07
      000E60 F8               [12] 3021 	mov	r0,a
      000E61 86 82            [24] 3022 	mov	dpl,@r0
      000E63 08               [12] 3023 	inc	r0
      000E64 86 83            [24] 3024 	mov	dph,@r0
      000E66 08               [12] 3025 	inc	r0
      000E67 86 F0            [24] 3026 	mov	b,@r0
      000E69 12r00r00         [24] 3027 	lcall	__gptrget
      000E6C FA               [12] 3028 	mov	r2,a
      000E6D A3               [24] 3029 	inc	dptr
      000E6E 12r00r00         [24] 3030 	lcall	__gptrget
      000E71 FB               [12] 3031 	mov	r3,a
      000E72 A3               [24] 3032 	inc	dptr
      000E73 12r00r00         [24] 3033 	lcall	__gptrget
      000E76 FC               [12] 3034 	mov	r4,a
      000E77 E5*00            [12] 3035 	mov	a,_bp
      000E79 24 19            [12] 3036 	add	a,#0x19
      000E7B F8               [12] 3037 	mov	r0,a
      000E7C E6               [12] 3038 	mov	a,@r0
      000E7D C0 E0            [24] 3039 	push	acc
      000E7F 08               [12] 3040 	inc	r0
      000E80 E6               [12] 3041 	mov	a,@r0
      000E81 C0 E0            [24] 3042 	push	acc
      000E83 08               [12] 3043 	inc	r0
      000E84 E6               [12] 3044 	mov	a,@r0
      000E85 C0 E0            [24] 3045 	push	acc
      000E87 08               [12] 3046 	inc	r0
      000E88 E6               [12] 3047 	mov	a,@r0
      000E89 C0 E0            [24] 3048 	push	acc
      000E8B 8A 82            [24] 3049 	mov	dpl,r2
      000E8D 8B 83            [24] 3050 	mov	dph,r3
      000E8F 8C F0            [24] 3051 	mov	b,r4
      000E91 12r00r00         [24] 3052 	lcall	_stack_push
      000E94 E5 81            [12] 3053 	mov	a,sp
      000E96 24 FC            [12] 3054 	add	a,#0xfc
      000E98 F5 81            [12] 3055 	mov	sp,a
                                   3056 ;	calc.c:170: break;
      000E9A 02r2Ar46         [24] 3057 	ljmp	00249$
                                   3058 ;	calc.c:171: case 'm':
      000E9D                       3059 00121$:
                                   3060 ;	calc.c:172: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      000E9D E5*00            [12] 3061 	mov	a,_bp
      000E9F 24 15            [12] 3062 	add	a,#0x15
      000EA1 FF               [12] 3063 	mov	r7,a
      000EA2 7E 00            [12] 3064 	mov	r6,#0x00
      000EA4 7D 40            [12] 3065 	mov	r5,#0x40
      000EA6 E5*00            [12] 3066 	mov	a,_bp
      000EA8 24 12            [12] 3067 	add	a,#0x12
      000EAA F8               [12] 3068 	mov	r0,a
      000EAB E5*00            [12] 3069 	mov	a,_bp
      000EAD 24 07            [12] 3070 	add	a,#0x07
      000EAF F9               [12] 3071 	mov	r1,a
      000EB0 74 13            [12] 3072 	mov	a,#0x13
      000EB2 26               [12] 3073 	add	a,@r0
      000EB3 F7               [12] 3074 	mov	@r1,a
      000EB4 74 40            [12] 3075 	mov	a,#0x40
      000EB6 08               [12] 3076 	inc	r0
      000EB7 36               [12] 3077 	addc	a,@r0
      000EB8 09               [12] 3078 	inc	r1
      000EB9 F7               [12] 3079 	mov	@r1,a
      000EBA 08               [12] 3080 	inc	r0
      000EBB 09               [12] 3081 	inc	r1
      000EBC E6               [12] 3082 	mov	a,@r0
      000EBD F7               [12] 3083 	mov	@r1,a
      000EBE E5*00            [12] 3084 	mov	a,_bp
      000EC0 24 07            [12] 3085 	add	a,#0x07
      000EC2 F8               [12] 3086 	mov	r0,a
      000EC3 86 82            [24] 3087 	mov	dpl,@r0
      000EC5 08               [12] 3088 	inc	r0
      000EC6 86 83            [24] 3089 	mov	dph,@r0
      000EC8 08               [12] 3090 	inc	r0
      000EC9 86 F0            [24] 3091 	mov	b,@r0
      000ECB 12r00r00         [24] 3092 	lcall	__gptrget
      000ECE FA               [12] 3093 	mov	r2,a
      000ECF A3               [24] 3094 	inc	dptr
      000ED0 12r00r00         [24] 3095 	lcall	__gptrget
      000ED3 FB               [12] 3096 	mov	r3,a
      000ED4 A3               [24] 3097 	inc	dptr
      000ED5 12r00r00         [24] 3098 	lcall	__gptrget
      000ED8 FC               [12] 3099 	mov	r4,a
      000ED9 C0 07            [24] 3100 	push	ar7
      000EDB C0 06            [24] 3101 	push	ar6
      000EDD C0 05            [24] 3102 	push	ar5
      000EDF 8A 82            [24] 3103 	mov	dpl,r2
      000EE1 8B 83            [24] 3104 	mov	dph,r3
      000EE3 8C F0            [24] 3105 	mov	b,r4
      000EE5 12r00r00         [24] 3106 	lcall	_stack_pop
      000EE8 AB 82            [24] 3107 	mov	r3,dpl
      000EEA AC 83            [24] 3108 	mov	r4,dph
      000EEC 15 81            [12] 3109 	dec	sp
      000EEE 15 81            [12] 3110 	dec	sp
      000EF0 15 81            [12] 3111 	dec	sp
      000EF2 EB               [12] 3112 	mov	a,r3
      000EF3 4C               [12] 3113 	orl	a,r4
      000EF4 70 25            [24] 3114 	jnz	00125$
      000EF6 7Fr44            [12] 3115 	mov	r7,#___str_10
      000EF8 7Es00            [12] 3116 	mov	r6,#(___str_10 >> 8)
      000EFA 7D 80            [12] 3117 	mov	r5,#0x80
                                   3118 ;	calc.c:51: return;
      000EFC                       3119 00394$:
                                   3120 ;	calc.c:49: for (; *s; s++) putchar(*s);
      000EFC 8F 82            [24] 3121 	mov	dpl,r7
      000EFE 8E 83            [24] 3122 	mov	dph,r6
      000F00 8D F0            [24] 3123 	mov	b,r5
      000F02 12r00r00         [24] 3124 	lcall	__gptrget
      000F05 FC               [12] 3125 	mov	r4,a
      000F06 70 03            [24] 3126 	jnz	01294$
      000F08 02r2Ar46         [24] 3127 	ljmp	00249$
      000F0B                       3128 01294$:
      000F0B 7B 00            [12] 3129 	mov	r3,#0x00
      000F0D 8C 82            [24] 3130 	mov	dpl,r4
      000F0F 8B 83            [24] 3131 	mov	dph,r3
      000F11 12r00r00         [24] 3132 	lcall	_putchar
      000F14 0F               [12] 3133 	inc	r7
                                   3134 ;	calc.c:172: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      000F15 BF 00 E4         [24] 3135 	cjne	r7,#0x00,00394$
      000F18 0E               [12] 3136 	inc	r6
      000F19 80 E1            [24] 3137 	sjmp	00394$
      000F1B                       3138 00125$:
                                   3139 ;	calc.c:174: if (!stack_push(ctx->ss, d0)) {
      000F1B E5*00            [12] 3140 	mov	a,_bp
      000F1D 24 12            [12] 3141 	add	a,#0x12
      000F1F F8               [12] 3142 	mov	r0,a
      000F20 74 16            [12] 3143 	mov	a,#0x16
      000F22 26               [12] 3144 	add	a,@r0
      000F23 FA               [12] 3145 	mov	r2,a
      000F24 74 40            [12] 3146 	mov	a,#0x40
      000F26 08               [12] 3147 	inc	r0
      000F27 36               [12] 3148 	addc	a,@r0
      000F28 FB               [12] 3149 	mov	r3,a
      000F29 08               [12] 3150 	inc	r0
      000F2A 86 04            [24] 3151 	mov	ar4,@r0
      000F2C 8A 82            [24] 3152 	mov	dpl,r2
      000F2E 8B 83            [24] 3153 	mov	dph,r3
      000F30 8C F0            [24] 3154 	mov	b,r4
      000F32 12r00r00         [24] 3155 	lcall	__gptrget
      000F35 FA               [12] 3156 	mov	r2,a
      000F36 A3               [24] 3157 	inc	dptr
      000F37 12r00r00         [24] 3158 	lcall	__gptrget
      000F3A FB               [12] 3159 	mov	r3,a
      000F3B A3               [24] 3160 	inc	dptr
      000F3C 12r00r00         [24] 3161 	lcall	__gptrget
      000F3F FC               [12] 3162 	mov	r4,a
      000F40 E5*00            [12] 3163 	mov	a,_bp
      000F42 24 15            [12] 3164 	add	a,#0x15
      000F44 F8               [12] 3165 	mov	r0,a
      000F45 E6               [12] 3166 	mov	a,@r0
      000F46 C0 E0            [24] 3167 	push	acc
      000F48 08               [12] 3168 	inc	r0
      000F49 E6               [12] 3169 	mov	a,@r0
      000F4A C0 E0            [24] 3170 	push	acc
      000F4C 08               [12] 3171 	inc	r0
      000F4D E6               [12] 3172 	mov	a,@r0
      000F4E C0 E0            [24] 3173 	push	acc
      000F50 08               [12] 3174 	inc	r0
      000F51 E6               [12] 3175 	mov	a,@r0
      000F52 C0 E0            [24] 3176 	push	acc
      000F54 8A 82            [24] 3177 	mov	dpl,r2
      000F56 8B 83            [24] 3178 	mov	dph,r3
      000F58 8C F0            [24] 3179 	mov	b,r4
      000F5A 12r00r00         [24] 3180 	lcall	_stack_push
      000F5D AB 82            [24] 3181 	mov	r3,dpl
      000F5F AC 83            [24] 3182 	mov	r4,dph
      000F61 E5 81            [12] 3183 	mov	a,sp
      000F63 24 FC            [12] 3184 	add	a,#0xfc
      000F65 F5 81            [12] 3185 	mov	sp,a
      000F67 EB               [12] 3186 	mov	a,r3
      000F68 4C               [12] 3187 	orl	a,r4
      000F69 60 03            [24] 3188 	jz	01296$
      000F6B 02r2Ar46         [24] 3189 	ljmp	00249$
      000F6E                       3190 01296$:
                                   3191 ;	calc.c:175: printstr("\r\nsecondary stack overflow\r\n");
      000F6E 7Fr58            [12] 3192 	mov	r7,#___str_11
      000F70 7Es00            [12] 3193 	mov	r6,#(___str_11 >> 8)
      000F72 7D 80            [12] 3194 	mov	r5,#0x80
                                   3195 ;	calc.c:51: return;
      000F74                       3196 00397$:
                                   3197 ;	calc.c:49: for (; *s; s++) putchar(*s);
      000F74 8F 82            [24] 3198 	mov	dpl,r7
      000F76 8E 83            [24] 3199 	mov	dph,r6
      000F78 8D F0            [24] 3200 	mov	b,r5
      000F7A 12r00r00         [24] 3201 	lcall	__gptrget
      000F7D FC               [12] 3202 	mov	r4,a
      000F7E 60 10            [24] 3203 	jz	00283$
      000F80 7B 00            [12] 3204 	mov	r3,#0x00
      000F82 8C 82            [24] 3205 	mov	dpl,r4
      000F84 8B 83            [24] 3206 	mov	dph,r3
      000F86 12r00r00         [24] 3207 	lcall	_putchar
      000F89 0F               [12] 3208 	inc	r7
                                   3209 ;	calc.c:175: printstr("\r\nsecondary stack overflow\r\n");
      000F8A BF 00 E7         [24] 3210 	cjne	r7,#0x00,00397$
      000F8D 0E               [12] 3211 	inc	r6
      000F8E 80 E4            [24] 3212 	sjmp	00397$
      000F90                       3213 00283$:
                                   3214 ;	calc.c:176: (void)stack_push(ctx->ps, d0);
      000F90 E5*00            [12] 3215 	mov	a,_bp
      000F92 24 07            [12] 3216 	add	a,#0x07
      000F94 F8               [12] 3217 	mov	r0,a
      000F95 86 82            [24] 3218 	mov	dpl,@r0
      000F97 08               [12] 3219 	inc	r0
      000F98 86 83            [24] 3220 	mov	dph,@r0
      000F9A 08               [12] 3221 	inc	r0
      000F9B 86 F0            [24] 3222 	mov	b,@r0
      000F9D 12r00r00         [24] 3223 	lcall	__gptrget
      000FA0 FA               [12] 3224 	mov	r2,a
      000FA1 A3               [24] 3225 	inc	dptr
      000FA2 12r00r00         [24] 3226 	lcall	__gptrget
      000FA5 FB               [12] 3227 	mov	r3,a
      000FA6 A3               [24] 3228 	inc	dptr
      000FA7 12r00r00         [24] 3229 	lcall	__gptrget
      000FAA FC               [12] 3230 	mov	r4,a
      000FAB E5*00            [12] 3231 	mov	a,_bp
      000FAD 24 15            [12] 3232 	add	a,#0x15
      000FAF F8               [12] 3233 	mov	r0,a
      000FB0 E6               [12] 3234 	mov	a,@r0
      000FB1 C0 E0            [24] 3235 	push	acc
      000FB3 08               [12] 3236 	inc	r0
      000FB4 E6               [12] 3237 	mov	a,@r0
      000FB5 C0 E0            [24] 3238 	push	acc
      000FB7 08               [12] 3239 	inc	r0
      000FB8 E6               [12] 3240 	mov	a,@r0
      000FB9 C0 E0            [24] 3241 	push	acc
      000FBB 08               [12] 3242 	inc	r0
      000FBC E6               [12] 3243 	mov	a,@r0
      000FBD C0 E0            [24] 3244 	push	acc
      000FBF 8A 82            [24] 3245 	mov	dpl,r2
      000FC1 8B 83            [24] 3246 	mov	dph,r3
      000FC3 8C F0            [24] 3247 	mov	b,r4
      000FC5 12r00r00         [24] 3248 	lcall	_stack_push
      000FC8 E5 81            [12] 3249 	mov	a,sp
      000FCA 24 FC            [12] 3250 	add	a,#0xfc
      000FCC F5 81            [12] 3251 	mov	sp,a
                                   3252 ;	calc.c:179: break;
      000FCE 02r2Ar46         [24] 3253 	ljmp	00249$
                                   3254 ;	calc.c:180: case 'M':
      000FD1                       3255 00127$:
                                   3256 ;	calc.c:181: if (!stack_pop(ctx->ss, &d0)) printstr("\r\nsecondary stack underflow\r\n");
      000FD1 E5*00            [12] 3257 	mov	a,_bp
      000FD3 24 15            [12] 3258 	add	a,#0x15
      000FD5 FF               [12] 3259 	mov	r7,a
      000FD6 7E 00            [12] 3260 	mov	r6,#0x00
      000FD8 7D 40            [12] 3261 	mov	r5,#0x40
      000FDA E5*00            [12] 3262 	mov	a,_bp
      000FDC 24 12            [12] 3263 	add	a,#0x12
      000FDE F8               [12] 3264 	mov	r0,a
      000FDF E5*00            [12] 3265 	mov	a,_bp
      000FE1 24 07            [12] 3266 	add	a,#0x07
      000FE3 F9               [12] 3267 	mov	r1,a
      000FE4 74 16            [12] 3268 	mov	a,#0x16
      000FE6 26               [12] 3269 	add	a,@r0
      000FE7 F7               [12] 3270 	mov	@r1,a
      000FE8 74 40            [12] 3271 	mov	a,#0x40
      000FEA 08               [12] 3272 	inc	r0
      000FEB 36               [12] 3273 	addc	a,@r0
      000FEC 09               [12] 3274 	inc	r1
      000FED F7               [12] 3275 	mov	@r1,a
      000FEE 08               [12] 3276 	inc	r0
      000FEF 09               [12] 3277 	inc	r1
      000FF0 E6               [12] 3278 	mov	a,@r0
      000FF1 F7               [12] 3279 	mov	@r1,a
      000FF2 E5*00            [12] 3280 	mov	a,_bp
      000FF4 24 07            [12] 3281 	add	a,#0x07
      000FF6 F8               [12] 3282 	mov	r0,a
      000FF7 86 82            [24] 3283 	mov	dpl,@r0
      000FF9 08               [12] 3284 	inc	r0
      000FFA 86 83            [24] 3285 	mov	dph,@r0
      000FFC 08               [12] 3286 	inc	r0
      000FFD 86 F0            [24] 3287 	mov	b,@r0
      000FFF 12r00r00         [24] 3288 	lcall	__gptrget
      001002 FA               [12] 3289 	mov	r2,a
      001003 A3               [24] 3290 	inc	dptr
      001004 12r00r00         [24] 3291 	lcall	__gptrget
      001007 FB               [12] 3292 	mov	r3,a
      001008 A3               [24] 3293 	inc	dptr
      001009 12r00r00         [24] 3294 	lcall	__gptrget
      00100C FC               [12] 3295 	mov	r4,a
      00100D C0 07            [24] 3296 	push	ar7
      00100F C0 06            [24] 3297 	push	ar6
      001011 C0 05            [24] 3298 	push	ar5
      001013 8A 82            [24] 3299 	mov	dpl,r2
      001015 8B 83            [24] 3300 	mov	dph,r3
      001017 8C F0            [24] 3301 	mov	b,r4
      001019 12r00r00         [24] 3302 	lcall	_stack_pop
      00101C AB 82            [24] 3303 	mov	r3,dpl
      00101E AC 83            [24] 3304 	mov	r4,dph
      001020 15 81            [12] 3305 	dec	sp
      001022 15 81            [12] 3306 	dec	sp
      001024 15 81            [12] 3307 	dec	sp
      001026 EB               [12] 3308 	mov	a,r3
      001027 4C               [12] 3309 	orl	a,r4
      001028 70 25            [24] 3310 	jnz	00131$
      00102A 7Fr75            [12] 3311 	mov	r7,#___str_12
      00102C 7Es00            [12] 3312 	mov	r6,#(___str_12 >> 8)
      00102E 7D 80            [12] 3313 	mov	r5,#0x80
                                   3314 ;	calc.c:51: return;
      001030                       3315 00400$:
                                   3316 ;	calc.c:49: for (; *s; s++) putchar(*s);
      001030 8F 82            [24] 3317 	mov	dpl,r7
      001032 8E 83            [24] 3318 	mov	dph,r6
      001034 8D F0            [24] 3319 	mov	b,r5
      001036 12r00r00         [24] 3320 	lcall	__gptrget
      001039 FC               [12] 3321 	mov	r4,a
      00103A 70 03            [24] 3322 	jnz	01300$
      00103C 02r2Ar46         [24] 3323 	ljmp	00249$
      00103F                       3324 01300$:
      00103F 7B 00            [12] 3325 	mov	r3,#0x00
      001041 8C 82            [24] 3326 	mov	dpl,r4
      001043 8B 83            [24] 3327 	mov	dph,r3
      001045 12r00r00         [24] 3328 	lcall	_putchar
      001048 0F               [12] 3329 	inc	r7
                                   3330 ;	calc.c:181: if (!stack_pop(ctx->ss, &d0)) printstr("\r\nsecondary stack underflow\r\n");
      001049 BF 00 E4         [24] 3331 	cjne	r7,#0x00,00400$
      00104C 0E               [12] 3332 	inc	r6
      00104D 80 E1            [24] 3333 	sjmp	00400$
      00104F                       3334 00131$:
                                   3335 ;	calc.c:183: if (!stack_push(ctx->ps, d0)) {
      00104F E5*00            [12] 3336 	mov	a,_bp
      001051 24 12            [12] 3337 	add	a,#0x12
      001053 F8               [12] 3338 	mov	r0,a
      001054 74 13            [12] 3339 	mov	a,#0x13
      001056 26               [12] 3340 	add	a,@r0
      001057 FA               [12] 3341 	mov	r2,a
      001058 74 40            [12] 3342 	mov	a,#0x40
      00105A 08               [12] 3343 	inc	r0
      00105B 36               [12] 3344 	addc	a,@r0
      00105C FB               [12] 3345 	mov	r3,a
      00105D 08               [12] 3346 	inc	r0
      00105E 86 04            [24] 3347 	mov	ar4,@r0
      001060 8A 82            [24] 3348 	mov	dpl,r2
      001062 8B 83            [24] 3349 	mov	dph,r3
      001064 8C F0            [24] 3350 	mov	b,r4
      001066 12r00r00         [24] 3351 	lcall	__gptrget
      001069 FA               [12] 3352 	mov	r2,a
      00106A A3               [24] 3353 	inc	dptr
      00106B 12r00r00         [24] 3354 	lcall	__gptrget
      00106E FB               [12] 3355 	mov	r3,a
      00106F A3               [24] 3356 	inc	dptr
      001070 12r00r00         [24] 3357 	lcall	__gptrget
      001073 FC               [12] 3358 	mov	r4,a
      001074 E5*00            [12] 3359 	mov	a,_bp
      001076 24 15            [12] 3360 	add	a,#0x15
      001078 F8               [12] 3361 	mov	r0,a
      001079 E6               [12] 3362 	mov	a,@r0
      00107A C0 E0            [24] 3363 	push	acc
      00107C 08               [12] 3364 	inc	r0
      00107D E6               [12] 3365 	mov	a,@r0
      00107E C0 E0            [24] 3366 	push	acc
      001080 08               [12] 3367 	inc	r0
      001081 E6               [12] 3368 	mov	a,@r0
      001082 C0 E0            [24] 3369 	push	acc
      001084 08               [12] 3370 	inc	r0
      001085 E6               [12] 3371 	mov	a,@r0
      001086 C0 E0            [24] 3372 	push	acc
      001088 8A 82            [24] 3373 	mov	dpl,r2
      00108A 8B 83            [24] 3374 	mov	dph,r3
      00108C 8C F0            [24] 3375 	mov	b,r4
      00108E 12r00r00         [24] 3376 	lcall	_stack_push
      001091 AB 82            [24] 3377 	mov	r3,dpl
      001093 AC 83            [24] 3378 	mov	r4,dph
      001095 E5 81            [12] 3379 	mov	a,sp
      001097 24 FC            [12] 3380 	add	a,#0xfc
      001099 F5 81            [12] 3381 	mov	sp,a
      00109B EB               [12] 3382 	mov	a,r3
      00109C 4C               [12] 3383 	orl	a,r4
      00109D 60 03            [24] 3384 	jz	01302$
      00109F 02r2Ar46         [24] 3385 	ljmp	00249$
      0010A2                       3386 01302$:
                                   3387 ;	calc.c:184: printstr("\r\nstack overflow\r\n");
      0010A2 7Fr93            [12] 3388 	mov	r7,#___str_13
      0010A4 7Es00            [12] 3389 	mov	r6,#(___str_13 >> 8)
      0010A6 7D 80            [12] 3390 	mov	r5,#0x80
                                   3391 ;	calc.c:51: return;
      0010A8                       3392 00403$:
                                   3393 ;	calc.c:49: for (; *s; s++) putchar(*s);
      0010A8 8F 82            [24] 3394 	mov	dpl,r7
      0010AA 8E 83            [24] 3395 	mov	dph,r6
      0010AC 8D F0            [24] 3396 	mov	b,r5
      0010AE 12r00r00         [24] 3397 	lcall	__gptrget
      0010B1 FC               [12] 3398 	mov	r4,a
      0010B2 60 10            [24] 3399 	jz	00287$
      0010B4 7B 00            [12] 3400 	mov	r3,#0x00
      0010B6 8C 82            [24] 3401 	mov	dpl,r4
      0010B8 8B 83            [24] 3402 	mov	dph,r3
      0010BA 12r00r00         [24] 3403 	lcall	_putchar
      0010BD 0F               [12] 3404 	inc	r7
                                   3405 ;	calc.c:184: printstr("\r\nstack overflow\r\n");
      0010BE BF 00 E7         [24] 3406 	cjne	r7,#0x00,00403$
      0010C1 0E               [12] 3407 	inc	r6
      0010C2 80 E4            [24] 3408 	sjmp	00403$
      0010C4                       3409 00287$:
                                   3410 ;	calc.c:185: (void)stack_push(ctx->ss, d0);
      0010C4 E5*00            [12] 3411 	mov	a,_bp
      0010C6 24 07            [12] 3412 	add	a,#0x07
      0010C8 F8               [12] 3413 	mov	r0,a
      0010C9 86 82            [24] 3414 	mov	dpl,@r0
      0010CB 08               [12] 3415 	inc	r0
      0010CC 86 83            [24] 3416 	mov	dph,@r0
      0010CE 08               [12] 3417 	inc	r0
      0010CF 86 F0            [24] 3418 	mov	b,@r0
      0010D1 12r00r00         [24] 3419 	lcall	__gptrget
      0010D4 FA               [12] 3420 	mov	r2,a
      0010D5 A3               [24] 3421 	inc	dptr
      0010D6 12r00r00         [24] 3422 	lcall	__gptrget
      0010D9 FB               [12] 3423 	mov	r3,a
      0010DA A3               [24] 3424 	inc	dptr
      0010DB 12r00r00         [24] 3425 	lcall	__gptrget
      0010DE FC               [12] 3426 	mov	r4,a
      0010DF E5*00            [12] 3427 	mov	a,_bp
      0010E1 24 15            [12] 3428 	add	a,#0x15
      0010E3 F8               [12] 3429 	mov	r0,a
      0010E4 E6               [12] 3430 	mov	a,@r0
      0010E5 C0 E0            [24] 3431 	push	acc
      0010E7 08               [12] 3432 	inc	r0
      0010E8 E6               [12] 3433 	mov	a,@r0
      0010E9 C0 E0            [24] 3434 	push	acc
      0010EB 08               [12] 3435 	inc	r0
      0010EC E6               [12] 3436 	mov	a,@r0
      0010ED C0 E0            [24] 3437 	push	acc
      0010EF 08               [12] 3438 	inc	r0
      0010F0 E6               [12] 3439 	mov	a,@r0
      0010F1 C0 E0            [24] 3440 	push	acc
      0010F3 8A 82            [24] 3441 	mov	dpl,r2
      0010F5 8B 83            [24] 3442 	mov	dph,r3
      0010F7 8C F0            [24] 3443 	mov	b,r4
      0010F9 12r00r00         [24] 3444 	lcall	_stack_push
      0010FC E5 81            [12] 3445 	mov	a,sp
      0010FE 24 FC            [12] 3446 	add	a,#0xfc
      001100 F5 81            [12] 3447 	mov	sp,a
                                   3448 ;	calc.c:188: break;
      001102 02r2Ar46         [24] 3449 	ljmp	00249$
                                   3450 ;	calc.c:189: case 'u':
      001105                       3451 00133$:
                                   3452 ;	calc.c:190: if (!stack_peek(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      001105 E5*00            [12] 3453 	mov	a,_bp
      001107 24 15            [12] 3454 	add	a,#0x15
      001109 FF               [12] 3455 	mov	r7,a
      00110A 7E 00            [12] 3456 	mov	r6,#0x00
      00110C 7D 40            [12] 3457 	mov	r5,#0x40
      00110E E5*00            [12] 3458 	mov	a,_bp
      001110 24 12            [12] 3459 	add	a,#0x12
      001112 F8               [12] 3460 	mov	r0,a
      001113 74 13            [12] 3461 	mov	a,#0x13
      001115 26               [12] 3462 	add	a,@r0
      001116 FA               [12] 3463 	mov	r2,a
      001117 ED               [12] 3464 	mov	a,r5
      001118 08               [12] 3465 	inc	r0
      001119 36               [12] 3466 	addc	a,@r0
      00111A FB               [12] 3467 	mov	r3,a
      00111B 08               [12] 3468 	inc	r0
      00111C 86 04            [24] 3469 	mov	ar4,@r0
      00111E 8A 82            [24] 3470 	mov	dpl,r2
      001120 8B 83            [24] 3471 	mov	dph,r3
      001122 8C F0            [24] 3472 	mov	b,r4
      001124 12r00r00         [24] 3473 	lcall	__gptrget
      001127 FA               [12] 3474 	mov	r2,a
      001128 A3               [24] 3475 	inc	dptr
      001129 12r00r00         [24] 3476 	lcall	__gptrget
      00112C FB               [12] 3477 	mov	r3,a
      00112D A3               [24] 3478 	inc	dptr
      00112E 12r00r00         [24] 3479 	lcall	__gptrget
      001131 FC               [12] 3480 	mov	r4,a
      001132 C0 07            [24] 3481 	push	ar7
      001134 C0 06            [24] 3482 	push	ar6
      001136 C0 05            [24] 3483 	push	ar5
      001138 8A 82            [24] 3484 	mov	dpl,r2
      00113A 8B 83            [24] 3485 	mov	dph,r3
      00113C 8C F0            [24] 3486 	mov	b,r4
      00113E 12r00r00         [24] 3487 	lcall	_stack_peek
      001141 AB 82            [24] 3488 	mov	r3,dpl
      001143 AC 83            [24] 3489 	mov	r4,dph
      001145 15 81            [12] 3490 	dec	sp
      001147 15 81            [12] 3491 	dec	sp
      001149 15 81            [12] 3492 	dec	sp
      00114B EB               [12] 3493 	mov	a,r3
      00114C 4C               [12] 3494 	orl	a,r4
      00114D 70 25            [24] 3495 	jnz	00137$
      00114F 7Fr44            [12] 3496 	mov	r7,#___str_10
      001151 7Es00            [12] 3497 	mov	r6,#(___str_10 >> 8)
      001153 7D 80            [12] 3498 	mov	r5,#0x80
                                   3499 ;	calc.c:51: return;
      001155                       3500 00406$:
                                   3501 ;	calc.c:49: for (; *s; s++) putchar(*s);
      001155 8F 82            [24] 3502 	mov	dpl,r7
      001157 8E 83            [24] 3503 	mov	dph,r6
      001159 8D F0            [24] 3504 	mov	b,r5
      00115B 12r00r00         [24] 3505 	lcall	__gptrget
      00115E FC               [12] 3506 	mov	r4,a
      00115F 70 03            [24] 3507 	jnz	01306$
      001161 02r2Ar46         [24] 3508 	ljmp	00249$
      001164                       3509 01306$:
      001164 7B 00            [12] 3510 	mov	r3,#0x00
      001166 8C 82            [24] 3511 	mov	dpl,r4
      001168 8B 83            [24] 3512 	mov	dph,r3
      00116A 12r00r00         [24] 3513 	lcall	_putchar
      00116D 0F               [12] 3514 	inc	r7
                                   3515 ;	calc.c:190: if (!stack_peek(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      00116E BF 00 E4         [24] 3516 	cjne	r7,#0x00,00406$
      001171 0E               [12] 3517 	inc	r6
      001172 80 E1            [24] 3518 	sjmp	00406$
      001174                       3519 00137$:
                                   3520 ;	calc.c:191: else if (!stack_push(ctx->ss, d0)) printstr("\r\nsecondary stack overflow\r\n");
      001174 E5*00            [12] 3521 	mov	a,_bp
      001176 24 12            [12] 3522 	add	a,#0x12
      001178 F8               [12] 3523 	mov	r0,a
      001179 74 16            [12] 3524 	mov	a,#0x16
      00117B 26               [12] 3525 	add	a,@r0
      00117C FA               [12] 3526 	mov	r2,a
      00117D 74 40            [12] 3527 	mov	a,#0x40
      00117F 08               [12] 3528 	inc	r0
      001180 36               [12] 3529 	addc	a,@r0
      001181 FB               [12] 3530 	mov	r3,a
      001182 08               [12] 3531 	inc	r0
      001183 86 04            [24] 3532 	mov	ar4,@r0
      001185 8A 82            [24] 3533 	mov	dpl,r2
      001187 8B 83            [24] 3534 	mov	dph,r3
      001189 8C F0            [24] 3535 	mov	b,r4
      00118B 12r00r00         [24] 3536 	lcall	__gptrget
      00118E FA               [12] 3537 	mov	r2,a
      00118F A3               [24] 3538 	inc	dptr
      001190 12r00r00         [24] 3539 	lcall	__gptrget
      001193 FB               [12] 3540 	mov	r3,a
      001194 A3               [24] 3541 	inc	dptr
      001195 12r00r00         [24] 3542 	lcall	__gptrget
      001198 FC               [12] 3543 	mov	r4,a
      001199 E5*00            [12] 3544 	mov	a,_bp
      00119B 24 15            [12] 3545 	add	a,#0x15
      00119D F8               [12] 3546 	mov	r0,a
      00119E E6               [12] 3547 	mov	a,@r0
      00119F C0 E0            [24] 3548 	push	acc
      0011A1 08               [12] 3549 	inc	r0
      0011A2 E6               [12] 3550 	mov	a,@r0
      0011A3 C0 E0            [24] 3551 	push	acc
      0011A5 08               [12] 3552 	inc	r0
      0011A6 E6               [12] 3553 	mov	a,@r0
      0011A7 C0 E0            [24] 3554 	push	acc
      0011A9 08               [12] 3555 	inc	r0
      0011AA E6               [12] 3556 	mov	a,@r0
      0011AB C0 E0            [24] 3557 	push	acc
      0011AD 8A 82            [24] 3558 	mov	dpl,r2
      0011AF 8B 83            [24] 3559 	mov	dph,r3
      0011B1 8C F0            [24] 3560 	mov	b,r4
      0011B3 12r00r00         [24] 3561 	lcall	_stack_push
      0011B6 AB 82            [24] 3562 	mov	r3,dpl
      0011B8 AC 83            [24] 3563 	mov	r4,dph
      0011BA E5 81            [12] 3564 	mov	a,sp
      0011BC 24 FC            [12] 3565 	add	a,#0xfc
      0011BE F5 81            [12] 3566 	mov	sp,a
      0011C0 EB               [12] 3567 	mov	a,r3
      0011C1 4C               [12] 3568 	orl	a,r4
      0011C2 60 03            [24] 3569 	jz	01308$
      0011C4 02r2Ar46         [24] 3570 	ljmp	00249$
      0011C7                       3571 01308$:
      0011C7 7Fr58            [12] 3572 	mov	r7,#___str_11
      0011C9 7Es00            [12] 3573 	mov	r6,#(___str_11 >> 8)
      0011CB 7D 80            [12] 3574 	mov	r5,#0x80
                                   3575 ;	calc.c:51: return;
      0011CD                       3576 00409$:
                                   3577 ;	calc.c:49: for (; *s; s++) putchar(*s);
      0011CD 8F 82            [24] 3578 	mov	dpl,r7
      0011CF 8E 83            [24] 3579 	mov	dph,r6
      0011D1 8D F0            [24] 3580 	mov	b,r5
      0011D3 12r00r00         [24] 3581 	lcall	__gptrget
      0011D6 FC               [12] 3582 	mov	r4,a
      0011D7 70 03            [24] 3583 	jnz	01309$
      0011D9 02r2Ar46         [24] 3584 	ljmp	00249$
      0011DC                       3585 01309$:
      0011DC 7B 00            [12] 3586 	mov	r3,#0x00
      0011DE 8C 82            [24] 3587 	mov	dpl,r4
      0011E0 8B 83            [24] 3588 	mov	dph,r3
      0011E2 12r00r00         [24] 3589 	lcall	_putchar
      0011E5 0F               [12] 3590 	inc	r7
                                   3591 ;	calc.c:193: case 'U':
      0011E6 BF 00 E4         [24] 3592 	cjne	r7,#0x00,00409$
      0011E9 0E               [12] 3593 	inc	r6
      0011EA 80 E1            [24] 3594 	sjmp	00409$
      0011EC                       3595 00139$:
                                   3596 ;	calc.c:194: if (!stack_peek(ctx->ss, &d0)) printstr("\r\nsecondary stack underflow\r\n");
      0011EC E5*00            [12] 3597 	mov	a,_bp
      0011EE 24 15            [12] 3598 	add	a,#0x15
      0011F0 FF               [12] 3599 	mov	r7,a
      0011F1 7E 00            [12] 3600 	mov	r6,#0x00
      0011F3 7D 40            [12] 3601 	mov	r5,#0x40
      0011F5 E5*00            [12] 3602 	mov	a,_bp
      0011F7 24 12            [12] 3603 	add	a,#0x12
      0011F9 F8               [12] 3604 	mov	r0,a
      0011FA 74 16            [12] 3605 	mov	a,#0x16
      0011FC 26               [12] 3606 	add	a,@r0
      0011FD FA               [12] 3607 	mov	r2,a
      0011FE ED               [12] 3608 	mov	a,r5
      0011FF 08               [12] 3609 	inc	r0
      001200 36               [12] 3610 	addc	a,@r0
      001201 FB               [12] 3611 	mov	r3,a
      001202 08               [12] 3612 	inc	r0
      001203 86 04            [24] 3613 	mov	ar4,@r0
      001205 8A 82            [24] 3614 	mov	dpl,r2
      001207 8B 83            [24] 3615 	mov	dph,r3
      001209 8C F0            [24] 3616 	mov	b,r4
      00120B 12r00r00         [24] 3617 	lcall	__gptrget
      00120E FA               [12] 3618 	mov	r2,a
      00120F A3               [24] 3619 	inc	dptr
      001210 12r00r00         [24] 3620 	lcall	__gptrget
      001213 FB               [12] 3621 	mov	r3,a
      001214 A3               [24] 3622 	inc	dptr
      001215 12r00r00         [24] 3623 	lcall	__gptrget
      001218 FC               [12] 3624 	mov	r4,a
      001219 C0 07            [24] 3625 	push	ar7
      00121B C0 06            [24] 3626 	push	ar6
      00121D C0 05            [24] 3627 	push	ar5
      00121F 8A 82            [24] 3628 	mov	dpl,r2
      001221 8B 83            [24] 3629 	mov	dph,r3
      001223 8C F0            [24] 3630 	mov	b,r4
      001225 12r00r00         [24] 3631 	lcall	_stack_peek
      001228 AB 82            [24] 3632 	mov	r3,dpl
      00122A AC 83            [24] 3633 	mov	r4,dph
      00122C 15 81            [12] 3634 	dec	sp
      00122E 15 81            [12] 3635 	dec	sp
      001230 15 81            [12] 3636 	dec	sp
      001232 EB               [12] 3637 	mov	a,r3
      001233 4C               [12] 3638 	orl	a,r4
      001234 70 25            [24] 3639 	jnz	00143$
      001236 7Fr75            [12] 3640 	mov	r7,#___str_12
      001238 7Es00            [12] 3641 	mov	r6,#(___str_12 >> 8)
      00123A 7D 80            [12] 3642 	mov	r5,#0x80
                                   3643 ;	calc.c:51: return;
      00123C                       3644 00412$:
                                   3645 ;	calc.c:49: for (; *s; s++) putchar(*s);
      00123C 8F 82            [24] 3646 	mov	dpl,r7
      00123E 8E 83            [24] 3647 	mov	dph,r6
      001240 8D F0            [24] 3648 	mov	b,r5
      001242 12r00r00         [24] 3649 	lcall	__gptrget
      001245 FC               [12] 3650 	mov	r4,a
      001246 70 03            [24] 3651 	jnz	01312$
      001248 02r2Ar46         [24] 3652 	ljmp	00249$
      00124B                       3653 01312$:
      00124B 7B 00            [12] 3654 	mov	r3,#0x00
      00124D 8C 82            [24] 3655 	mov	dpl,r4
      00124F 8B 83            [24] 3656 	mov	dph,r3
      001251 12r00r00         [24] 3657 	lcall	_putchar
      001254 0F               [12] 3658 	inc	r7
                                   3659 ;	calc.c:194: if (!stack_peek(ctx->ss, &d0)) printstr("\r\nsecondary stack underflow\r\n");
      001255 BF 00 E4         [24] 3660 	cjne	r7,#0x00,00412$
      001258 0E               [12] 3661 	inc	r6
      001259 80 E1            [24] 3662 	sjmp	00412$
      00125B                       3663 00143$:
                                   3664 ;	calc.c:195: else if (!stack_push(ctx->ps, d0)) printstr("\r\nstack overflow\r\n");
      00125B E5*00            [12] 3665 	mov	a,_bp
      00125D 24 12            [12] 3666 	add	a,#0x12
      00125F F8               [12] 3667 	mov	r0,a
      001260 74 13            [12] 3668 	mov	a,#0x13
      001262 26               [12] 3669 	add	a,@r0
      001263 FA               [12] 3670 	mov	r2,a
      001264 74 40            [12] 3671 	mov	a,#0x40
      001266 08               [12] 3672 	inc	r0
      001267 36               [12] 3673 	addc	a,@r0
      001268 FB               [12] 3674 	mov	r3,a
      001269 08               [12] 3675 	inc	r0
      00126A 86 04            [24] 3676 	mov	ar4,@r0
      00126C 8A 82            [24] 3677 	mov	dpl,r2
      00126E 8B 83            [24] 3678 	mov	dph,r3
      001270 8C F0            [24] 3679 	mov	b,r4
      001272 12r00r00         [24] 3680 	lcall	__gptrget
      001275 FA               [12] 3681 	mov	r2,a
      001276 A3               [24] 3682 	inc	dptr
      001277 12r00r00         [24] 3683 	lcall	__gptrget
      00127A FB               [12] 3684 	mov	r3,a
      00127B A3               [24] 3685 	inc	dptr
      00127C 12r00r00         [24] 3686 	lcall	__gptrget
      00127F FC               [12] 3687 	mov	r4,a
      001280 E5*00            [12] 3688 	mov	a,_bp
      001282 24 15            [12] 3689 	add	a,#0x15
      001284 F8               [12] 3690 	mov	r0,a
      001285 E6               [12] 3691 	mov	a,@r0
      001286 C0 E0            [24] 3692 	push	acc
      001288 08               [12] 3693 	inc	r0
      001289 E6               [12] 3694 	mov	a,@r0
      00128A C0 E0            [24] 3695 	push	acc
      00128C 08               [12] 3696 	inc	r0
      00128D E6               [12] 3697 	mov	a,@r0
      00128E C0 E0            [24] 3698 	push	acc
      001290 08               [12] 3699 	inc	r0
      001291 E6               [12] 3700 	mov	a,@r0
      001292 C0 E0            [24] 3701 	push	acc
      001294 8A 82            [24] 3702 	mov	dpl,r2
      001296 8B 83            [24] 3703 	mov	dph,r3
      001298 8C F0            [24] 3704 	mov	b,r4
      00129A 12r00r00         [24] 3705 	lcall	_stack_push
      00129D AB 82            [24] 3706 	mov	r3,dpl
      00129F AC 83            [24] 3707 	mov	r4,dph
      0012A1 E5 81            [12] 3708 	mov	a,sp
      0012A3 24 FC            [12] 3709 	add	a,#0xfc
      0012A5 F5 81            [12] 3710 	mov	sp,a
      0012A7 EB               [12] 3711 	mov	a,r3
      0012A8 4C               [12] 3712 	orl	a,r4
      0012A9 60 03            [24] 3713 	jz	01314$
      0012AB 02r2Ar46         [24] 3714 	ljmp	00249$
      0012AE                       3715 01314$:
      0012AE 7Fr93            [12] 3716 	mov	r7,#___str_13
      0012B0 7Es00            [12] 3717 	mov	r6,#(___str_13 >> 8)
      0012B2 7D 80            [12] 3718 	mov	r5,#0x80
                                   3719 ;	calc.c:51: return;
      0012B4                       3720 00415$:
                                   3721 ;	calc.c:49: for (; *s; s++) putchar(*s);
      0012B4 8F 82            [24] 3722 	mov	dpl,r7
      0012B6 8E 83            [24] 3723 	mov	dph,r6
      0012B8 8D F0            [24] 3724 	mov	b,r5
      0012BA 12r00r00         [24] 3725 	lcall	__gptrget
      0012BD FC               [12] 3726 	mov	r4,a
      0012BE 70 03            [24] 3727 	jnz	01315$
      0012C0 02r2Ar46         [24] 3728 	ljmp	00249$
      0012C3                       3729 01315$:
      0012C3 7B 00            [12] 3730 	mov	r3,#0x00
      0012C5 8C 82            [24] 3731 	mov	dpl,r4
      0012C7 8B 83            [24] 3732 	mov	dph,r3
      0012C9 12r00r00         [24] 3733 	lcall	_putchar
      0012CC 0F               [12] 3734 	inc	r7
                                   3735 ;	calc.c:197: case 'T':
      0012CD BF 00 E4         [24] 3736 	cjne	r7,#0x00,00415$
      0012D0 0E               [12] 3737 	inc	r6
      0012D1 80 E1            [24] 3738 	sjmp	00415$
      0012D3                       3739 00145$:
                                   3740 ;	calc.c:198: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      0012D3 E5*00            [12] 3741 	mov	a,_bp
      0012D5 24 15            [12] 3742 	add	a,#0x15
      0012D7 FF               [12] 3743 	mov	r7,a
      0012D8 7E 00            [12] 3744 	mov	r6,#0x00
      0012DA 7D 40            [12] 3745 	mov	r5,#0x40
      0012DC E5*00            [12] 3746 	mov	a,_bp
      0012DE 24 12            [12] 3747 	add	a,#0x12
      0012E0 F8               [12] 3748 	mov	r0,a
      0012E1 E5*00            [12] 3749 	mov	a,_bp
      0012E3 24 07            [12] 3750 	add	a,#0x07
      0012E5 F9               [12] 3751 	mov	r1,a
      0012E6 74 13            [12] 3752 	mov	a,#0x13
      0012E8 26               [12] 3753 	add	a,@r0
      0012E9 F7               [12] 3754 	mov	@r1,a
      0012EA 74 40            [12] 3755 	mov	a,#0x40
      0012EC 08               [12] 3756 	inc	r0
      0012ED 36               [12] 3757 	addc	a,@r0
      0012EE 09               [12] 3758 	inc	r1
      0012EF F7               [12] 3759 	mov	@r1,a
      0012F0 08               [12] 3760 	inc	r0
      0012F1 09               [12] 3761 	inc	r1
      0012F2 E6               [12] 3762 	mov	a,@r0
      0012F3 F7               [12] 3763 	mov	@r1,a
      0012F4 E5*00            [12] 3764 	mov	a,_bp
      0012F6 24 07            [12] 3765 	add	a,#0x07
      0012F8 F8               [12] 3766 	mov	r0,a
      0012F9 86 82            [24] 3767 	mov	dpl,@r0
      0012FB 08               [12] 3768 	inc	r0
      0012FC 86 83            [24] 3769 	mov	dph,@r0
      0012FE 08               [12] 3770 	inc	r0
      0012FF 86 F0            [24] 3771 	mov	b,@r0
      001301 12r00r00         [24] 3772 	lcall	__gptrget
      001304 FA               [12] 3773 	mov	r2,a
      001305 A3               [24] 3774 	inc	dptr
      001306 12r00r00         [24] 3775 	lcall	__gptrget
      001309 FB               [12] 3776 	mov	r3,a
      00130A A3               [24] 3777 	inc	dptr
      00130B 12r00r00         [24] 3778 	lcall	__gptrget
      00130E FC               [12] 3779 	mov	r4,a
      00130F C0 07            [24] 3780 	push	ar7
      001311 C0 06            [24] 3781 	push	ar6
      001313 C0 05            [24] 3782 	push	ar5
      001315 8A 82            [24] 3783 	mov	dpl,r2
      001317 8B 83            [24] 3784 	mov	dph,r3
      001319 8C F0            [24] 3785 	mov	b,r4
      00131B 12r00r00         [24] 3786 	lcall	_stack_pop
      00131E AB 82            [24] 3787 	mov	r3,dpl
      001320 AC 83            [24] 3788 	mov	r4,dph
      001322 15 81            [12] 3789 	dec	sp
      001324 15 81            [12] 3790 	dec	sp
      001326 15 81            [12] 3791 	dec	sp
      001328 EB               [12] 3792 	mov	a,r3
      001329 4C               [12] 3793 	orl	a,r4
      00132A 70 25            [24] 3794 	jnz	00150$
      00132C 7Fr44            [12] 3795 	mov	r7,#___str_10
      00132E 7Es00            [12] 3796 	mov	r6,#(___str_10 >> 8)
      001330 7D 80            [12] 3797 	mov	r5,#0x80
                                   3798 ;	calc.c:51: return;
      001332                       3799 00418$:
                                   3800 ;	calc.c:49: for (; *s; s++) putchar(*s);
      001332 8F 82            [24] 3801 	mov	dpl,r7
      001334 8E 83            [24] 3802 	mov	dph,r6
      001336 8D F0            [24] 3803 	mov	b,r5
      001338 12r00r00         [24] 3804 	lcall	__gptrget
      00133B FC               [12] 3805 	mov	r4,a
      00133C 70 03            [24] 3806 	jnz	01318$
      00133E 02r2Ar46         [24] 3807 	ljmp	00249$
      001341                       3808 01318$:
      001341 7B 00            [12] 3809 	mov	r3,#0x00
      001343 8C 82            [24] 3810 	mov	dpl,r4
      001345 8B 83            [24] 3811 	mov	dph,r3
      001347 12r00r00         [24] 3812 	lcall	_putchar
      00134A 0F               [12] 3813 	inc	r7
                                   3814 ;	calc.c:198: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      00134B BF 00 E4         [24] 3815 	cjne	r7,#0x00,00418$
      00134E 0E               [12] 3816 	inc	r6
      00134F 80 E1            [24] 3817 	sjmp	00418$
      001351                       3818 00150$:
                                   3819 ;	calc.c:200: if (!stack_pop(ctx->ss, &d1)) {
      001351 E5*00            [12] 3820 	mov	a,_bp
      001353 24 19            [12] 3821 	add	a,#0x19
      001355 FF               [12] 3822 	mov	r7,a
      001356 7E 00            [12] 3823 	mov	r6,#0x00
      001358 7D 40            [12] 3824 	mov	r5,#0x40
      00135A E5*00            [12] 3825 	mov	a,_bp
      00135C 24 12            [12] 3826 	add	a,#0x12
      00135E F8               [12] 3827 	mov	r0,a
      00135F E5*00            [12] 3828 	mov	a,_bp
      001361 24 04            [12] 3829 	add	a,#0x04
      001363 F9               [12] 3830 	mov	r1,a
      001364 74 16            [12] 3831 	mov	a,#0x16
      001366 26               [12] 3832 	add	a,@r0
      001367 F7               [12] 3833 	mov	@r1,a
      001368 74 40            [12] 3834 	mov	a,#0x40
      00136A 08               [12] 3835 	inc	r0
      00136B 36               [12] 3836 	addc	a,@r0
      00136C 09               [12] 3837 	inc	r1
      00136D F7               [12] 3838 	mov	@r1,a
      00136E 08               [12] 3839 	inc	r0
      00136F 09               [12] 3840 	inc	r1
      001370 E6               [12] 3841 	mov	a,@r0
      001371 F7               [12] 3842 	mov	@r1,a
      001372 E5*00            [12] 3843 	mov	a,_bp
      001374 24 04            [12] 3844 	add	a,#0x04
      001376 F8               [12] 3845 	mov	r0,a
      001377 86 82            [24] 3846 	mov	dpl,@r0
      001379 08               [12] 3847 	inc	r0
      00137A 86 83            [24] 3848 	mov	dph,@r0
      00137C 08               [12] 3849 	inc	r0
      00137D 86 F0            [24] 3850 	mov	b,@r0
      00137F 12r00r00         [24] 3851 	lcall	__gptrget
      001382 FA               [12] 3852 	mov	r2,a
      001383 A3               [24] 3853 	inc	dptr
      001384 12r00r00         [24] 3854 	lcall	__gptrget
      001387 FB               [12] 3855 	mov	r3,a
      001388 A3               [24] 3856 	inc	dptr
      001389 12r00r00         [24] 3857 	lcall	__gptrget
      00138C FC               [12] 3858 	mov	r4,a
      00138D C0 07            [24] 3859 	push	ar7
      00138F C0 06            [24] 3860 	push	ar6
      001391 C0 05            [24] 3861 	push	ar5
      001393 8A 82            [24] 3862 	mov	dpl,r2
      001395 8B 83            [24] 3863 	mov	dph,r3
      001397 8C F0            [24] 3864 	mov	b,r4
      001399 12r00r00         [24] 3865 	lcall	_stack_pop
      00139C AB 82            [24] 3866 	mov	r3,dpl
      00139E AC 83            [24] 3867 	mov	r4,dph
      0013A0 15 81            [12] 3868 	dec	sp
      0013A2 15 81            [12] 3869 	dec	sp
      0013A4 15 81            [12] 3870 	dec	sp
      0013A6 EB               [12] 3871 	mov	a,r3
      0013A7 4C               [12] 3872 	orl	a,r4
      0013A8 70 63            [24] 3873 	jnz	00147$
                                   3874 ;	calc.c:201: printstr("\r\nsecondary stack underflow\r\n");
      0013AA 7Fr75            [12] 3875 	mov	r7,#___str_12
      0013AC 7Es00            [12] 3876 	mov	r6,#(___str_12 >> 8)
      0013AE 7D 80            [12] 3877 	mov	r5,#0x80
                                   3878 ;	calc.c:51: return;
      0013B0                       3879 00421$:
                                   3880 ;	calc.c:49: for (; *s; s++) putchar(*s);
      0013B0 8F 82            [24] 3881 	mov	dpl,r7
      0013B2 8E 83            [24] 3882 	mov	dph,r6
      0013B4 8D F0            [24] 3883 	mov	b,r5
      0013B6 12r00r00         [24] 3884 	lcall	__gptrget
      0013B9 FC               [12] 3885 	mov	r4,a
      0013BA 60 10            [24] 3886 	jz	00299$
      0013BC 7B 00            [12] 3887 	mov	r3,#0x00
      0013BE 8C 82            [24] 3888 	mov	dpl,r4
      0013C0 8B 83            [24] 3889 	mov	dph,r3
      0013C2 12r00r00         [24] 3890 	lcall	_putchar
      0013C5 0F               [12] 3891 	inc	r7
                                   3892 ;	calc.c:201: printstr("\r\nsecondary stack underflow\r\n");
      0013C6 BF 00 E7         [24] 3893 	cjne	r7,#0x00,00421$
      0013C9 0E               [12] 3894 	inc	r6
      0013CA 80 E4            [24] 3895 	sjmp	00421$
      0013CC                       3896 00299$:
                                   3897 ;	calc.c:202: (void)stack_push(ctx->ps, d0);
      0013CC E5*00            [12] 3898 	mov	a,_bp
      0013CE 24 07            [12] 3899 	add	a,#0x07
      0013D0 F8               [12] 3900 	mov	r0,a
      0013D1 86 82            [24] 3901 	mov	dpl,@r0
      0013D3 08               [12] 3902 	inc	r0
      0013D4 86 83            [24] 3903 	mov	dph,@r0
      0013D6 08               [12] 3904 	inc	r0
      0013D7 86 F0            [24] 3905 	mov	b,@r0
      0013D9 12r00r00         [24] 3906 	lcall	__gptrget
      0013DC FA               [12] 3907 	mov	r2,a
      0013DD A3               [24] 3908 	inc	dptr
      0013DE 12r00r00         [24] 3909 	lcall	__gptrget
      0013E1 FB               [12] 3910 	mov	r3,a
      0013E2 A3               [24] 3911 	inc	dptr
      0013E3 12r00r00         [24] 3912 	lcall	__gptrget
      0013E6 FC               [12] 3913 	mov	r4,a
      0013E7 E5*00            [12] 3914 	mov	a,_bp
      0013E9 24 15            [12] 3915 	add	a,#0x15
      0013EB F8               [12] 3916 	mov	r0,a
      0013EC E6               [12] 3917 	mov	a,@r0
      0013ED C0 E0            [24] 3918 	push	acc
      0013EF 08               [12] 3919 	inc	r0
      0013F0 E6               [12] 3920 	mov	a,@r0
      0013F1 C0 E0            [24] 3921 	push	acc
      0013F3 08               [12] 3922 	inc	r0
      0013F4 E6               [12] 3923 	mov	a,@r0
      0013F5 C0 E0            [24] 3924 	push	acc
      0013F7 08               [12] 3925 	inc	r0
      0013F8 E6               [12] 3926 	mov	a,@r0
      0013F9 C0 E0            [24] 3927 	push	acc
      0013FB 8A 82            [24] 3928 	mov	dpl,r2
      0013FD 8B 83            [24] 3929 	mov	dph,r3
      0013FF 8C F0            [24] 3930 	mov	b,r4
      001401 12r00r00         [24] 3931 	lcall	_stack_push
      001404 E5 81            [12] 3932 	mov	a,sp
      001406 24 FC            [12] 3933 	add	a,#0xfc
      001408 F5 81            [12] 3934 	mov	sp,a
      00140A 02r2Ar46         [24] 3935 	ljmp	00249$
      00140D                       3936 00147$:
                                   3937 ;	calc.c:204: (void)stack_push(ctx->ps, d1);
      00140D E5*00            [12] 3938 	mov	a,_bp
      00140F 24 07            [12] 3939 	add	a,#0x07
      001411 F8               [12] 3940 	mov	r0,a
      001412 86 82            [24] 3941 	mov	dpl,@r0
      001414 08               [12] 3942 	inc	r0
      001415 86 83            [24] 3943 	mov	dph,@r0
      001417 08               [12] 3944 	inc	r0
      001418 86 F0            [24] 3945 	mov	b,@r0
      00141A 12r00r00         [24] 3946 	lcall	__gptrget
      00141D FA               [12] 3947 	mov	r2,a
      00141E A3               [24] 3948 	inc	dptr
      00141F 12r00r00         [24] 3949 	lcall	__gptrget
      001422 FB               [12] 3950 	mov	r3,a
      001423 A3               [24] 3951 	inc	dptr
      001424 12r00r00         [24] 3952 	lcall	__gptrget
      001427 FC               [12] 3953 	mov	r4,a
      001428 E5*00            [12] 3954 	mov	a,_bp
      00142A 24 19            [12] 3955 	add	a,#0x19
      00142C F8               [12] 3956 	mov	r0,a
      00142D E6               [12] 3957 	mov	a,@r0
      00142E C0 E0            [24] 3958 	push	acc
      001430 08               [12] 3959 	inc	r0
      001431 E6               [12] 3960 	mov	a,@r0
      001432 C0 E0            [24] 3961 	push	acc
      001434 08               [12] 3962 	inc	r0
      001435 E6               [12] 3963 	mov	a,@r0
      001436 C0 E0            [24] 3964 	push	acc
      001438 08               [12] 3965 	inc	r0
      001439 E6               [12] 3966 	mov	a,@r0
      00143A C0 E0            [24] 3967 	push	acc
      00143C 8A 82            [24] 3968 	mov	dpl,r2
      00143E 8B 83            [24] 3969 	mov	dph,r3
      001440 8C F0            [24] 3970 	mov	b,r4
      001442 12r00r00         [24] 3971 	lcall	_stack_push
      001445 E5 81            [12] 3972 	mov	a,sp
      001447 24 FC            [12] 3973 	add	a,#0xfc
      001449 F5 81            [12] 3974 	mov	sp,a
                                   3975 ;	calc.c:205: (void)stack_push(ctx->ss, d0);
      00144B E5*00            [12] 3976 	mov	a,_bp
      00144D 24 04            [12] 3977 	add	a,#0x04
      00144F F8               [12] 3978 	mov	r0,a
      001450 86 82            [24] 3979 	mov	dpl,@r0
      001452 08               [12] 3980 	inc	r0
      001453 86 83            [24] 3981 	mov	dph,@r0
      001455 08               [12] 3982 	inc	r0
      001456 86 F0            [24] 3983 	mov	b,@r0
      001458 12r00r00         [24] 3984 	lcall	__gptrget
      00145B FA               [12] 3985 	mov	r2,a
      00145C A3               [24] 3986 	inc	dptr
      00145D 12r00r00         [24] 3987 	lcall	__gptrget
      001460 FB               [12] 3988 	mov	r3,a
      001461 A3               [24] 3989 	inc	dptr
      001462 12r00r00         [24] 3990 	lcall	__gptrget
      001465 FC               [12] 3991 	mov	r4,a
      001466 E5*00            [12] 3992 	mov	a,_bp
      001468 24 15            [12] 3993 	add	a,#0x15
      00146A F8               [12] 3994 	mov	r0,a
      00146B E6               [12] 3995 	mov	a,@r0
      00146C C0 E0            [24] 3996 	push	acc
      00146E 08               [12] 3997 	inc	r0
      00146F E6               [12] 3998 	mov	a,@r0
      001470 C0 E0            [24] 3999 	push	acc
      001472 08               [12] 4000 	inc	r0
      001473 E6               [12] 4001 	mov	a,@r0
      001474 C0 E0            [24] 4002 	push	acc
      001476 08               [12] 4003 	inc	r0
      001477 E6               [12] 4004 	mov	a,@r0
      001478 C0 E0            [24] 4005 	push	acc
      00147A 8A 82            [24] 4006 	mov	dpl,r2
      00147C 8B 83            [24] 4007 	mov	dph,r3
      00147E 8C F0            [24] 4008 	mov	b,r4
      001480 12r00r00         [24] 4009 	lcall	_stack_push
      001483 E5 81            [12] 4010 	mov	a,sp
      001485 24 FC            [12] 4011 	add	a,#0xfc
      001487 F5 81            [12] 4012 	mov	sp,a
                                   4013 ;	calc.c:208: break;
      001489 02r2Ar46         [24] 4014 	ljmp	00249$
                                   4015 ;	calc.c:209: case 'X':
      00148C                       4016 00152$:
                                   4017 ;	calc.c:210: t0 = ctx->ps;
      00148C E5*00            [12] 4018 	mov	a,_bp
      00148E 24 12            [12] 4019 	add	a,#0x12
      001490 F8               [12] 4020 	mov	r0,a
      001491 E5*00            [12] 4021 	mov	a,_bp
      001493 24 0B            [12] 4022 	add	a,#0x0b
      001495 F9               [12] 4023 	mov	r1,a
      001496 74 13            [12] 4024 	mov	a,#0x13
      001498 26               [12] 4025 	add	a,@r0
      001499 F7               [12] 4026 	mov	@r1,a
      00149A 74 40            [12] 4027 	mov	a,#0x40
      00149C 08               [12] 4028 	inc	r0
      00149D 36               [12] 4029 	addc	a,@r0
      00149E 09               [12] 4030 	inc	r1
      00149F F7               [12] 4031 	mov	@r1,a
      0014A0 08               [12] 4032 	inc	r0
      0014A1 09               [12] 4033 	inc	r1
      0014A2 E6               [12] 4034 	mov	a,@r0
      0014A3 F7               [12] 4035 	mov	@r1,a
      0014A4 E5*00            [12] 4036 	mov	a,_bp
      0014A6 24 0B            [12] 4037 	add	a,#0x0b
      0014A8 F8               [12] 4038 	mov	r0,a
      0014A9 86 82            [24] 4039 	mov	dpl,@r0
      0014AB 08               [12] 4040 	inc	r0
      0014AC 86 83            [24] 4041 	mov	dph,@r0
      0014AE 08               [12] 4042 	inc	r0
      0014AF 86 F0            [24] 4043 	mov	b,@r0
      0014B1 12r00r00         [24] 4044 	lcall	__gptrget
      0014B4 FF               [12] 4045 	mov	r7,a
      0014B5 A3               [24] 4046 	inc	dptr
      0014B6 12r00r00         [24] 4047 	lcall	__gptrget
      0014B9 FE               [12] 4048 	mov	r6,a
      0014BA A3               [24] 4049 	inc	dptr
      0014BB 12r00r00         [24] 4050 	lcall	__gptrget
      0014BE FD               [12] 4051 	mov	r5,a
                                   4052 ;	calc.c:211: ctx->ps = ctx->ss;
      0014BF E5*00            [12] 4053 	mov	a,_bp
      0014C1 24 12            [12] 4054 	add	a,#0x12
      0014C3 F8               [12] 4055 	mov	r0,a
      0014C4 E5*00            [12] 4056 	mov	a,_bp
      0014C6 24 07            [12] 4057 	add	a,#0x07
      0014C8 F9               [12] 4058 	mov	r1,a
      0014C9 74 16            [12] 4059 	mov	a,#0x16
      0014CB 26               [12] 4060 	add	a,@r0
      0014CC F7               [12] 4061 	mov	@r1,a
      0014CD 74 40            [12] 4062 	mov	a,#0x40
      0014CF 08               [12] 4063 	inc	r0
      0014D0 36               [12] 4064 	addc	a,@r0
      0014D1 09               [12] 4065 	inc	r1
      0014D2 F7               [12] 4066 	mov	@r1,a
      0014D3 08               [12] 4067 	inc	r0
      0014D4 09               [12] 4068 	inc	r1
      0014D5 E6               [12] 4069 	mov	a,@r0
      0014D6 F7               [12] 4070 	mov	@r1,a
      0014D7 E5*00            [12] 4071 	mov	a,_bp
      0014D9 24 07            [12] 4072 	add	a,#0x07
      0014DB F8               [12] 4073 	mov	r0,a
      0014DC 86 82            [24] 4074 	mov	dpl,@r0
      0014DE 08               [12] 4075 	inc	r0
      0014DF 86 83            [24] 4076 	mov	dph,@r0
      0014E1 08               [12] 4077 	inc	r0
      0014E2 86 F0            [24] 4078 	mov	b,@r0
      0014E4 12r00r00         [24] 4079 	lcall	__gptrget
      0014E7 FA               [12] 4080 	mov	r2,a
      0014E8 A3               [24] 4081 	inc	dptr
      0014E9 12r00r00         [24] 4082 	lcall	__gptrget
      0014EC FB               [12] 4083 	mov	r3,a
      0014ED A3               [24] 4084 	inc	dptr
      0014EE 12r00r00         [24] 4085 	lcall	__gptrget
      0014F1 FC               [12] 4086 	mov	r4,a
      0014F2 E5*00            [12] 4087 	mov	a,_bp
      0014F4 24 0B            [12] 4088 	add	a,#0x0b
      0014F6 F8               [12] 4089 	mov	r0,a
      0014F7 86 82            [24] 4090 	mov	dpl,@r0
      0014F9 08               [12] 4091 	inc	r0
      0014FA 86 83            [24] 4092 	mov	dph,@r0
      0014FC 08               [12] 4093 	inc	r0
      0014FD 86 F0            [24] 4094 	mov	b,@r0
      0014FF EA               [12] 4095 	mov	a,r2
      001500 12r00r00         [24] 4096 	lcall	__gptrput
      001503 A3               [24] 4097 	inc	dptr
      001504 EB               [12] 4098 	mov	a,r3
      001505 12r00r00         [24] 4099 	lcall	__gptrput
      001508 A3               [24] 4100 	inc	dptr
      001509 EC               [12] 4101 	mov	a,r4
      00150A 12r00r00         [24] 4102 	lcall	__gptrput
                                   4103 ;	calc.c:212: ctx->ss = t0;
      00150D E5*00            [12] 4104 	mov	a,_bp
      00150F 24 07            [12] 4105 	add	a,#0x07
      001511 F8               [12] 4106 	mov	r0,a
      001512 86 82            [24] 4107 	mov	dpl,@r0
      001514 08               [12] 4108 	inc	r0
      001515 86 83            [24] 4109 	mov	dph,@r0
      001517 08               [12] 4110 	inc	r0
      001518 86 F0            [24] 4111 	mov	b,@r0
      00151A EF               [12] 4112 	mov	a,r7
      00151B 12r00r00         [24] 4113 	lcall	__gptrput
      00151E A3               [24] 4114 	inc	dptr
      00151F EE               [12] 4115 	mov	a,r6
      001520 12r00r00         [24] 4116 	lcall	__gptrput
      001523 A3               [24] 4117 	inc	dptr
      001524 ED               [12] 4118 	mov	a,r5
      001525 12r00r00         [24] 4119 	lcall	__gptrput
                                   4120 ;	calc.c:213: break;
      001528 02r2Ar46         [24] 4121 	ljmp	00249$
                                   4122 ;	calc.c:214: case '+':
      00152B                       4123 00153$:
                                   4124 ;	calc.c:215: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      00152B E5*00            [12] 4125 	mov	a,_bp
      00152D 24 15            [12] 4126 	add	a,#0x15
      00152F FF               [12] 4127 	mov	r7,a
      001530 7E 00            [12] 4128 	mov	r6,#0x00
      001532 7D 40            [12] 4129 	mov	r5,#0x40
      001534 E5*00            [12] 4130 	mov	a,_bp
      001536 24 12            [12] 4131 	add	a,#0x12
      001538 F8               [12] 4132 	mov	r0,a
      001539 E5*00            [12] 4133 	mov	a,_bp
      00153B 24 0B            [12] 4134 	add	a,#0x0b
      00153D F9               [12] 4135 	mov	r1,a
      00153E 74 13            [12] 4136 	mov	a,#0x13
      001540 26               [12] 4137 	add	a,@r0
      001541 F7               [12] 4138 	mov	@r1,a
      001542 74 40            [12] 4139 	mov	a,#0x40
      001544 08               [12] 4140 	inc	r0
      001545 36               [12] 4141 	addc	a,@r0
      001546 09               [12] 4142 	inc	r1
      001547 F7               [12] 4143 	mov	@r1,a
      001548 08               [12] 4144 	inc	r0
      001549 09               [12] 4145 	inc	r1
      00154A E6               [12] 4146 	mov	a,@r0
      00154B F7               [12] 4147 	mov	@r1,a
      00154C E5*00            [12] 4148 	mov	a,_bp
      00154E 24 0B            [12] 4149 	add	a,#0x0b
      001550 F8               [12] 4150 	mov	r0,a
      001551 86 82            [24] 4151 	mov	dpl,@r0
      001553 08               [12] 4152 	inc	r0
      001554 86 83            [24] 4153 	mov	dph,@r0
      001556 08               [12] 4154 	inc	r0
      001557 86 F0            [24] 4155 	mov	b,@r0
      001559 12r00r00         [24] 4156 	lcall	__gptrget
      00155C FA               [12] 4157 	mov	r2,a
      00155D A3               [24] 4158 	inc	dptr
      00155E 12r00r00         [24] 4159 	lcall	__gptrget
      001561 FB               [12] 4160 	mov	r3,a
      001562 A3               [24] 4161 	inc	dptr
      001563 12r00r00         [24] 4162 	lcall	__gptrget
      001566 FC               [12] 4163 	mov	r4,a
      001567 C0 07            [24] 4164 	push	ar7
      001569 C0 06            [24] 4165 	push	ar6
      00156B C0 05            [24] 4166 	push	ar5
      00156D 8A 82            [24] 4167 	mov	dpl,r2
      00156F 8B 83            [24] 4168 	mov	dph,r3
      001571 8C F0            [24] 4169 	mov	b,r4
      001573 12r00r00         [24] 4170 	lcall	_stack_pop
      001576 AB 82            [24] 4171 	mov	r3,dpl
      001578 AC 83            [24] 4172 	mov	r4,dph
      00157A 15 81            [12] 4173 	dec	sp
      00157C 15 81            [12] 4174 	dec	sp
      00157E 15 81            [12] 4175 	dec	sp
      001580 EB               [12] 4176 	mov	a,r3
      001581 4C               [12] 4177 	orl	a,r4
      001582 70 25            [24] 4178 	jnz	00158$
      001584 7Fr44            [12] 4179 	mov	r7,#___str_10
      001586 7Es00            [12] 4180 	mov	r6,#(___str_10 >> 8)
      001588 7D 80            [12] 4181 	mov	r5,#0x80
                                   4182 ;	calc.c:51: return;
      00158A                       4183 00424$:
                                   4184 ;	calc.c:49: for (; *s; s++) putchar(*s);
      00158A 8F 82            [24] 4185 	mov	dpl,r7
      00158C 8E 83            [24] 4186 	mov	dph,r6
      00158E 8D F0            [24] 4187 	mov	b,r5
      001590 12r00r00         [24] 4188 	lcall	__gptrget
      001593 FC               [12] 4189 	mov	r4,a
      001594 70 03            [24] 4190 	jnz	01324$
      001596 02r2Ar46         [24] 4191 	ljmp	00249$
      001599                       4192 01324$:
      001599 7B 00            [12] 4193 	mov	r3,#0x00
      00159B 8C 82            [24] 4194 	mov	dpl,r4
      00159D 8B 83            [24] 4195 	mov	dph,r3
      00159F 12r00r00         [24] 4196 	lcall	_putchar
      0015A2 0F               [12] 4197 	inc	r7
                                   4198 ;	calc.c:215: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      0015A3 BF 00 E4         [24] 4199 	cjne	r7,#0x00,00424$
      0015A6 0E               [12] 4200 	inc	r6
      0015A7 80 E1            [24] 4201 	sjmp	00424$
      0015A9                       4202 00158$:
                                   4203 ;	calc.c:216: else if (!stack_pop(ctx->ps, &d1)) {
      0015A9 E5*00            [12] 4204 	mov	a,_bp
      0015AB 24 19            [12] 4205 	add	a,#0x19
      0015AD FF               [12] 4206 	mov	r7,a
      0015AE 7E 00            [12] 4207 	mov	r6,#0x00
      0015B0 7D 40            [12] 4208 	mov	r5,#0x40
      0015B2 E5*00            [12] 4209 	mov	a,_bp
      0015B4 24 0B            [12] 4210 	add	a,#0x0b
      0015B6 F8               [12] 4211 	mov	r0,a
      0015B7 86 82            [24] 4212 	mov	dpl,@r0
      0015B9 08               [12] 4213 	inc	r0
      0015BA 86 83            [24] 4214 	mov	dph,@r0
      0015BC 08               [12] 4215 	inc	r0
      0015BD 86 F0            [24] 4216 	mov	b,@r0
      0015BF 12r00r00         [24] 4217 	lcall	__gptrget
      0015C2 FA               [12] 4218 	mov	r2,a
      0015C3 A3               [24] 4219 	inc	dptr
      0015C4 12r00r00         [24] 4220 	lcall	__gptrget
      0015C7 FB               [12] 4221 	mov	r3,a
      0015C8 A3               [24] 4222 	inc	dptr
      0015C9 12r00r00         [24] 4223 	lcall	__gptrget
      0015CC FC               [12] 4224 	mov	r4,a
      0015CD C0 07            [24] 4225 	push	ar7
      0015CF C0 06            [24] 4226 	push	ar6
      0015D1 C0 05            [24] 4227 	push	ar5
      0015D3 8A 82            [24] 4228 	mov	dpl,r2
      0015D5 8B 83            [24] 4229 	mov	dph,r3
      0015D7 8C F0            [24] 4230 	mov	b,r4
      0015D9 12r00r00         [24] 4231 	lcall	_stack_pop
      0015DC AB 82            [24] 4232 	mov	r3,dpl
      0015DE AC 83            [24] 4233 	mov	r4,dph
      0015E0 15 81            [12] 4234 	dec	sp
      0015E2 15 81            [12] 4235 	dec	sp
      0015E4 15 81            [12] 4236 	dec	sp
      0015E6 EB               [12] 4237 	mov	a,r3
      0015E7 4C               [12] 4238 	orl	a,r4
      0015E8 70 63            [24] 4239 	jnz	00155$
                                   4240 ;	calc.c:217: (void)stack_push(ctx->ps, d0);
      0015EA E5*00            [12] 4241 	mov	a,_bp
      0015EC 24 0B            [12] 4242 	add	a,#0x0b
      0015EE F8               [12] 4243 	mov	r0,a
      0015EF 86 82            [24] 4244 	mov	dpl,@r0
      0015F1 08               [12] 4245 	inc	r0
      0015F2 86 83            [24] 4246 	mov	dph,@r0
      0015F4 08               [12] 4247 	inc	r0
      0015F5 86 F0            [24] 4248 	mov	b,@r0
      0015F7 12r00r00         [24] 4249 	lcall	__gptrget
      0015FA FA               [12] 4250 	mov	r2,a
      0015FB A3               [24] 4251 	inc	dptr
      0015FC 12r00r00         [24] 4252 	lcall	__gptrget
      0015FF FB               [12] 4253 	mov	r3,a
      001600 A3               [24] 4254 	inc	dptr
      001601 12r00r00         [24] 4255 	lcall	__gptrget
      001604 FC               [12] 4256 	mov	r4,a
      001605 E5*00            [12] 4257 	mov	a,_bp
      001607 24 15            [12] 4258 	add	a,#0x15
      001609 F8               [12] 4259 	mov	r0,a
      00160A E6               [12] 4260 	mov	a,@r0
      00160B C0 E0            [24] 4261 	push	acc
      00160D 08               [12] 4262 	inc	r0
      00160E E6               [12] 4263 	mov	a,@r0
      00160F C0 E0            [24] 4264 	push	acc
      001611 08               [12] 4265 	inc	r0
      001612 E6               [12] 4266 	mov	a,@r0
      001613 C0 E0            [24] 4267 	push	acc
      001615 08               [12] 4268 	inc	r0
      001616 E6               [12] 4269 	mov	a,@r0
      001617 C0 E0            [24] 4270 	push	acc
      001619 8A 82            [24] 4271 	mov	dpl,r2
      00161B 8B 83            [24] 4272 	mov	dph,r3
      00161D 8C F0            [24] 4273 	mov	b,r4
      00161F 12r00r00         [24] 4274 	lcall	_stack_push
      001622 E5 81            [12] 4275 	mov	a,sp
      001624 24 FC            [12] 4276 	add	a,#0xfc
      001626 F5 81            [12] 4277 	mov	sp,a
                                   4278 ;	calc.c:218: printstr("\r\nstack underflow\r\n");
      001628 7Fr44            [12] 4279 	mov	r7,#___str_10
      00162A 7Es00            [12] 4280 	mov	r6,#(___str_10 >> 8)
      00162C 7D 80            [12] 4281 	mov	r5,#0x80
                                   4282 ;	calc.c:51: return;
      00162E                       4283 00427$:
                                   4284 ;	calc.c:49: for (; *s; s++) putchar(*s);
      00162E 8F 82            [24] 4285 	mov	dpl,r7
      001630 8E 83            [24] 4286 	mov	dph,r6
      001632 8D F0            [24] 4287 	mov	b,r5
      001634 12r00r00         [24] 4288 	lcall	__gptrget
      001637 FC               [12] 4289 	mov	r4,a
      001638 70 03            [24] 4290 	jnz	01327$
      00163A 02r2Ar46         [24] 4291 	ljmp	00249$
      00163D                       4292 01327$:
      00163D 7B 00            [12] 4293 	mov	r3,#0x00
      00163F 8C 82            [24] 4294 	mov	dpl,r4
      001641 8B 83            [24] 4295 	mov	dph,r3
      001643 12r00r00         [24] 4296 	lcall	_putchar
      001646 0F               [12] 4297 	inc	r7
                                   4298 ;	calc.c:218: printstr("\r\nstack underflow\r\n");
      001647 BF 00 E4         [24] 4299 	cjne	r7,#0x00,00427$
      00164A 0E               [12] 4300 	inc	r6
      00164B 80 E1            [24] 4301 	sjmp	00427$
      00164D                       4302 00155$:
                                   4303 ;	calc.c:220: d1 += d0;
      00164D E5*00            [12] 4304 	mov	a,_bp
      00164F 24 19            [12] 4305 	add	a,#0x19
      001651 F8               [12] 4306 	mov	r0,a
      001652 E5*00            [12] 4307 	mov	a,_bp
      001654 24 15            [12] 4308 	add	a,#0x15
      001656 F9               [12] 4309 	mov	r1,a
      001657 E7               [12] 4310 	mov	a,@r1
      001658 26               [12] 4311 	add	a,@r0
      001659 F6               [12] 4312 	mov	@r0,a
      00165A 09               [12] 4313 	inc	r1
      00165B E7               [12] 4314 	mov	a,@r1
      00165C 08               [12] 4315 	inc	r0
      00165D 36               [12] 4316 	addc	a,@r0
      00165E F6               [12] 4317 	mov	@r0,a
      00165F 09               [12] 4318 	inc	r1
      001660 E7               [12] 4319 	mov	a,@r1
      001661 08               [12] 4320 	inc	r0
      001662 36               [12] 4321 	addc	a,@r0
      001663 F6               [12] 4322 	mov	@r0,a
      001664 09               [12] 4323 	inc	r1
      001665 E7               [12] 4324 	mov	a,@r1
      001666 08               [12] 4325 	inc	r0
      001667 36               [12] 4326 	addc	a,@r0
      001668 F6               [12] 4327 	mov	@r0,a
                                   4328 ;	calc.c:221: (void)stack_push(ctx->ps, d1);
      001669 E5*00            [12] 4329 	mov	a,_bp
      00166B 24 0B            [12] 4330 	add	a,#0x0b
      00166D F8               [12] 4331 	mov	r0,a
      00166E 86 82            [24] 4332 	mov	dpl,@r0
      001670 08               [12] 4333 	inc	r0
      001671 86 83            [24] 4334 	mov	dph,@r0
      001673 08               [12] 4335 	inc	r0
      001674 86 F0            [24] 4336 	mov	b,@r0
      001676 12r00r00         [24] 4337 	lcall	__gptrget
      001679 FA               [12] 4338 	mov	r2,a
      00167A A3               [24] 4339 	inc	dptr
      00167B 12r00r00         [24] 4340 	lcall	__gptrget
      00167E FB               [12] 4341 	mov	r3,a
      00167F A3               [24] 4342 	inc	dptr
      001680 12r00r00         [24] 4343 	lcall	__gptrget
      001683 FC               [12] 4344 	mov	r4,a
      001684 E5*00            [12] 4345 	mov	a,_bp
      001686 24 19            [12] 4346 	add	a,#0x19
      001688 F8               [12] 4347 	mov	r0,a
      001689 E6               [12] 4348 	mov	a,@r0
      00168A C0 E0            [24] 4349 	push	acc
      00168C 08               [12] 4350 	inc	r0
      00168D E6               [12] 4351 	mov	a,@r0
      00168E C0 E0            [24] 4352 	push	acc
      001690 08               [12] 4353 	inc	r0
      001691 E6               [12] 4354 	mov	a,@r0
      001692 C0 E0            [24] 4355 	push	acc
      001694 08               [12] 4356 	inc	r0
      001695 E6               [12] 4357 	mov	a,@r0
      001696 C0 E0            [24] 4358 	push	acc
      001698 8A 82            [24] 4359 	mov	dpl,r2
      00169A 8B 83            [24] 4360 	mov	dph,r3
      00169C 8C F0            [24] 4361 	mov	b,r4
      00169E 12r00r00         [24] 4362 	lcall	_stack_push
      0016A1 E5 81            [12] 4363 	mov	a,sp
      0016A3 24 FC            [12] 4364 	add	a,#0xfc
      0016A5 F5 81            [12] 4365 	mov	sp,a
                                   4366 ;	calc.c:223: break;
      0016A7 02r2Ar46         [24] 4367 	ljmp	00249$
                                   4368 ;	calc.c:224: case '-':
      0016AA                       4369 00160$:
                                   4370 ;	calc.c:225: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      0016AA E5*00            [12] 4371 	mov	a,_bp
      0016AC 24 15            [12] 4372 	add	a,#0x15
      0016AE FF               [12] 4373 	mov	r7,a
      0016AF 7E 00            [12] 4374 	mov	r6,#0x00
      0016B1 7D 40            [12] 4375 	mov	r5,#0x40
      0016B3 E5*00            [12] 4376 	mov	a,_bp
      0016B5 24 12            [12] 4377 	add	a,#0x12
      0016B7 F8               [12] 4378 	mov	r0,a
      0016B8 E5*00            [12] 4379 	mov	a,_bp
      0016BA 24 0B            [12] 4380 	add	a,#0x0b
      0016BC F9               [12] 4381 	mov	r1,a
      0016BD 74 13            [12] 4382 	mov	a,#0x13
      0016BF 26               [12] 4383 	add	a,@r0
      0016C0 F7               [12] 4384 	mov	@r1,a
      0016C1 74 40            [12] 4385 	mov	a,#0x40
      0016C3 08               [12] 4386 	inc	r0
      0016C4 36               [12] 4387 	addc	a,@r0
      0016C5 09               [12] 4388 	inc	r1
      0016C6 F7               [12] 4389 	mov	@r1,a
      0016C7 08               [12] 4390 	inc	r0
      0016C8 09               [12] 4391 	inc	r1
      0016C9 E6               [12] 4392 	mov	a,@r0
      0016CA F7               [12] 4393 	mov	@r1,a
      0016CB E5*00            [12] 4394 	mov	a,_bp
      0016CD 24 0B            [12] 4395 	add	a,#0x0b
      0016CF F8               [12] 4396 	mov	r0,a
      0016D0 86 82            [24] 4397 	mov	dpl,@r0
      0016D2 08               [12] 4398 	inc	r0
      0016D3 86 83            [24] 4399 	mov	dph,@r0
      0016D5 08               [12] 4400 	inc	r0
      0016D6 86 F0            [24] 4401 	mov	b,@r0
      0016D8 12r00r00         [24] 4402 	lcall	__gptrget
      0016DB FA               [12] 4403 	mov	r2,a
      0016DC A3               [24] 4404 	inc	dptr
      0016DD 12r00r00         [24] 4405 	lcall	__gptrget
      0016E0 FB               [12] 4406 	mov	r3,a
      0016E1 A3               [24] 4407 	inc	dptr
      0016E2 12r00r00         [24] 4408 	lcall	__gptrget
      0016E5 FC               [12] 4409 	mov	r4,a
      0016E6 C0 07            [24] 4410 	push	ar7
      0016E8 C0 06            [24] 4411 	push	ar6
      0016EA C0 05            [24] 4412 	push	ar5
      0016EC 8A 82            [24] 4413 	mov	dpl,r2
      0016EE 8B 83            [24] 4414 	mov	dph,r3
      0016F0 8C F0            [24] 4415 	mov	b,r4
      0016F2 12r00r00         [24] 4416 	lcall	_stack_pop
      0016F5 AB 82            [24] 4417 	mov	r3,dpl
      0016F7 AC 83            [24] 4418 	mov	r4,dph
      0016F9 15 81            [12] 4419 	dec	sp
      0016FB 15 81            [12] 4420 	dec	sp
      0016FD 15 81            [12] 4421 	dec	sp
      0016FF EB               [12] 4422 	mov	a,r3
      001700 4C               [12] 4423 	orl	a,r4
      001701 70 25            [24] 4424 	jnz	00165$
      001703 7Fr44            [12] 4425 	mov	r7,#___str_10
      001705 7Es00            [12] 4426 	mov	r6,#(___str_10 >> 8)
      001707 7D 80            [12] 4427 	mov	r5,#0x80
                                   4428 ;	calc.c:51: return;
      001709                       4429 00430$:
                                   4430 ;	calc.c:49: for (; *s; s++) putchar(*s);
      001709 8F 82            [24] 4431 	mov	dpl,r7
      00170B 8E 83            [24] 4432 	mov	dph,r6
      00170D 8D F0            [24] 4433 	mov	b,r5
      00170F 12r00r00         [24] 4434 	lcall	__gptrget
      001712 FC               [12] 4435 	mov	r4,a
      001713 70 03            [24] 4436 	jnz	01330$
      001715 02r2Ar46         [24] 4437 	ljmp	00249$
      001718                       4438 01330$:
      001718 7B 00            [12] 4439 	mov	r3,#0x00
      00171A 8C 82            [24] 4440 	mov	dpl,r4
      00171C 8B 83            [24] 4441 	mov	dph,r3
      00171E 12r00r00         [24] 4442 	lcall	_putchar
      001721 0F               [12] 4443 	inc	r7
                                   4444 ;	calc.c:225: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      001722 BF 00 E4         [24] 4445 	cjne	r7,#0x00,00430$
      001725 0E               [12] 4446 	inc	r6
      001726 80 E1            [24] 4447 	sjmp	00430$
      001728                       4448 00165$:
                                   4449 ;	calc.c:226: else if (!stack_pop(ctx->ps, &d1)) {
      001728 E5*00            [12] 4450 	mov	a,_bp
      00172A 24 19            [12] 4451 	add	a,#0x19
      00172C FF               [12] 4452 	mov	r7,a
      00172D 7E 00            [12] 4453 	mov	r6,#0x00
      00172F 7D 40            [12] 4454 	mov	r5,#0x40
      001731 E5*00            [12] 4455 	mov	a,_bp
      001733 24 0B            [12] 4456 	add	a,#0x0b
      001735 F8               [12] 4457 	mov	r0,a
      001736 86 82            [24] 4458 	mov	dpl,@r0
      001738 08               [12] 4459 	inc	r0
      001739 86 83            [24] 4460 	mov	dph,@r0
      00173B 08               [12] 4461 	inc	r0
      00173C 86 F0            [24] 4462 	mov	b,@r0
      00173E 12r00r00         [24] 4463 	lcall	__gptrget
      001741 FA               [12] 4464 	mov	r2,a
      001742 A3               [24] 4465 	inc	dptr
      001743 12r00r00         [24] 4466 	lcall	__gptrget
      001746 FB               [12] 4467 	mov	r3,a
      001747 A3               [24] 4468 	inc	dptr
      001748 12r00r00         [24] 4469 	lcall	__gptrget
      00174B FC               [12] 4470 	mov	r4,a
      00174C C0 07            [24] 4471 	push	ar7
      00174E C0 06            [24] 4472 	push	ar6
      001750 C0 05            [24] 4473 	push	ar5
      001752 8A 82            [24] 4474 	mov	dpl,r2
      001754 8B 83            [24] 4475 	mov	dph,r3
      001756 8C F0            [24] 4476 	mov	b,r4
      001758 12r00r00         [24] 4477 	lcall	_stack_pop
      00175B AB 82            [24] 4478 	mov	r3,dpl
      00175D AC 83            [24] 4479 	mov	r4,dph
      00175F 15 81            [12] 4480 	dec	sp
      001761 15 81            [12] 4481 	dec	sp
      001763 15 81            [12] 4482 	dec	sp
      001765 EB               [12] 4483 	mov	a,r3
      001766 4C               [12] 4484 	orl	a,r4
      001767 70 63            [24] 4485 	jnz	00162$
                                   4486 ;	calc.c:227: (void)stack_push(ctx->ps, d0);
      001769 E5*00            [12] 4487 	mov	a,_bp
      00176B 24 0B            [12] 4488 	add	a,#0x0b
      00176D F8               [12] 4489 	mov	r0,a
      00176E 86 82            [24] 4490 	mov	dpl,@r0
      001770 08               [12] 4491 	inc	r0
      001771 86 83            [24] 4492 	mov	dph,@r0
      001773 08               [12] 4493 	inc	r0
      001774 86 F0            [24] 4494 	mov	b,@r0
      001776 12r00r00         [24] 4495 	lcall	__gptrget
      001779 FA               [12] 4496 	mov	r2,a
      00177A A3               [24] 4497 	inc	dptr
      00177B 12r00r00         [24] 4498 	lcall	__gptrget
      00177E FB               [12] 4499 	mov	r3,a
      00177F A3               [24] 4500 	inc	dptr
      001780 12r00r00         [24] 4501 	lcall	__gptrget
      001783 FC               [12] 4502 	mov	r4,a
      001784 E5*00            [12] 4503 	mov	a,_bp
      001786 24 15            [12] 4504 	add	a,#0x15
      001788 F8               [12] 4505 	mov	r0,a
      001789 E6               [12] 4506 	mov	a,@r0
      00178A C0 E0            [24] 4507 	push	acc
      00178C 08               [12] 4508 	inc	r0
      00178D E6               [12] 4509 	mov	a,@r0
      00178E C0 E0            [24] 4510 	push	acc
      001790 08               [12] 4511 	inc	r0
      001791 E6               [12] 4512 	mov	a,@r0
      001792 C0 E0            [24] 4513 	push	acc
      001794 08               [12] 4514 	inc	r0
      001795 E6               [12] 4515 	mov	a,@r0
      001796 C0 E0            [24] 4516 	push	acc
      001798 8A 82            [24] 4517 	mov	dpl,r2
      00179A 8B 83            [24] 4518 	mov	dph,r3
      00179C 8C F0            [24] 4519 	mov	b,r4
      00179E 12r00r00         [24] 4520 	lcall	_stack_push
      0017A1 E5 81            [12] 4521 	mov	a,sp
      0017A3 24 FC            [12] 4522 	add	a,#0xfc
      0017A5 F5 81            [12] 4523 	mov	sp,a
                                   4524 ;	calc.c:228: printstr("\r\nstack underflow\r\n");
      0017A7 7Fr44            [12] 4525 	mov	r7,#___str_10
      0017A9 7Es00            [12] 4526 	mov	r6,#(___str_10 >> 8)
      0017AB 7D 80            [12] 4527 	mov	r5,#0x80
                                   4528 ;	calc.c:51: return;
      0017AD                       4529 00433$:
                                   4530 ;	calc.c:49: for (; *s; s++) putchar(*s);
      0017AD 8F 82            [24] 4531 	mov	dpl,r7
      0017AF 8E 83            [24] 4532 	mov	dph,r6
      0017B1 8D F0            [24] 4533 	mov	b,r5
      0017B3 12r00r00         [24] 4534 	lcall	__gptrget
      0017B6 FC               [12] 4535 	mov	r4,a
      0017B7 70 03            [24] 4536 	jnz	01333$
      0017B9 02r2Ar46         [24] 4537 	ljmp	00249$
      0017BC                       4538 01333$:
      0017BC 7B 00            [12] 4539 	mov	r3,#0x00
      0017BE 8C 82            [24] 4540 	mov	dpl,r4
      0017C0 8B 83            [24] 4541 	mov	dph,r3
      0017C2 12r00r00         [24] 4542 	lcall	_putchar
      0017C5 0F               [12] 4543 	inc	r7
                                   4544 ;	calc.c:228: printstr("\r\nstack underflow\r\n");
      0017C6 BF 00 E4         [24] 4545 	cjne	r7,#0x00,00433$
      0017C9 0E               [12] 4546 	inc	r6
      0017CA 80 E1            [24] 4547 	sjmp	00433$
      0017CC                       4548 00162$:
                                   4549 ;	calc.c:230: d1 -= d0;
      0017CC E5*00            [12] 4550 	mov	a,_bp
      0017CE 24 19            [12] 4551 	add	a,#0x19
      0017D0 F8               [12] 4552 	mov	r0,a
      0017D1 E5*00            [12] 4553 	mov	a,_bp
      0017D3 24 15            [12] 4554 	add	a,#0x15
      0017D5 F9               [12] 4555 	mov	r1,a
      0017D6 E6               [12] 4556 	mov	a,@r0
      0017D7 C3               [12] 4557 	clr	c
      0017D8 97               [12] 4558 	subb	a,@r1
      0017D9 F6               [12] 4559 	mov	@r0,a
      0017DA 08               [12] 4560 	inc	r0
      0017DB E6               [12] 4561 	mov	a,@r0
      0017DC 09               [12] 4562 	inc	r1
      0017DD 97               [12] 4563 	subb	a,@r1
      0017DE F6               [12] 4564 	mov	@r0,a
      0017DF 08               [12] 4565 	inc	r0
      0017E0 E6               [12] 4566 	mov	a,@r0
      0017E1 09               [12] 4567 	inc	r1
      0017E2 97               [12] 4568 	subb	a,@r1
      0017E3 F6               [12] 4569 	mov	@r0,a
      0017E4 08               [12] 4570 	inc	r0
      0017E5 E6               [12] 4571 	mov	a,@r0
      0017E6 09               [12] 4572 	inc	r1
      0017E7 97               [12] 4573 	subb	a,@r1
      0017E8 F6               [12] 4574 	mov	@r0,a
                                   4575 ;	calc.c:231: (void)stack_push(ctx->ps, d1);
      0017E9 E5*00            [12] 4576 	mov	a,_bp
      0017EB 24 0B            [12] 4577 	add	a,#0x0b
      0017ED F8               [12] 4578 	mov	r0,a
      0017EE 86 82            [24] 4579 	mov	dpl,@r0
      0017F0 08               [12] 4580 	inc	r0
      0017F1 86 83            [24] 4581 	mov	dph,@r0
      0017F3 08               [12] 4582 	inc	r0
      0017F4 86 F0            [24] 4583 	mov	b,@r0
      0017F6 12r00r00         [24] 4584 	lcall	__gptrget
      0017F9 FA               [12] 4585 	mov	r2,a
      0017FA A3               [24] 4586 	inc	dptr
      0017FB 12r00r00         [24] 4587 	lcall	__gptrget
      0017FE FB               [12] 4588 	mov	r3,a
      0017FF A3               [24] 4589 	inc	dptr
      001800 12r00r00         [24] 4590 	lcall	__gptrget
      001803 FC               [12] 4591 	mov	r4,a
      001804 E5*00            [12] 4592 	mov	a,_bp
      001806 24 19            [12] 4593 	add	a,#0x19
      001808 F8               [12] 4594 	mov	r0,a
      001809 E6               [12] 4595 	mov	a,@r0
      00180A C0 E0            [24] 4596 	push	acc
      00180C 08               [12] 4597 	inc	r0
      00180D E6               [12] 4598 	mov	a,@r0
      00180E C0 E0            [24] 4599 	push	acc
      001810 08               [12] 4600 	inc	r0
      001811 E6               [12] 4601 	mov	a,@r0
      001812 C0 E0            [24] 4602 	push	acc
      001814 08               [12] 4603 	inc	r0
      001815 E6               [12] 4604 	mov	a,@r0
      001816 C0 E0            [24] 4605 	push	acc
      001818 8A 82            [24] 4606 	mov	dpl,r2
      00181A 8B 83            [24] 4607 	mov	dph,r3
      00181C 8C F0            [24] 4608 	mov	b,r4
      00181E 12r00r00         [24] 4609 	lcall	_stack_push
      001821 E5 81            [12] 4610 	mov	a,sp
      001823 24 FC            [12] 4611 	add	a,#0xfc
      001825 F5 81            [12] 4612 	mov	sp,a
                                   4613 ;	calc.c:233: break;
      001827 02r2Ar46         [24] 4614 	ljmp	00249$
                                   4615 ;	calc.c:234: case '*':
      00182A                       4616 00167$:
                                   4617 ;	calc.c:235: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      00182A E5*00            [12] 4618 	mov	a,_bp
      00182C 24 15            [12] 4619 	add	a,#0x15
      00182E FF               [12] 4620 	mov	r7,a
      00182F 7E 00            [12] 4621 	mov	r6,#0x00
      001831 7D 40            [12] 4622 	mov	r5,#0x40
      001833 E5*00            [12] 4623 	mov	a,_bp
      001835 24 12            [12] 4624 	add	a,#0x12
      001837 F8               [12] 4625 	mov	r0,a
      001838 E5*00            [12] 4626 	mov	a,_bp
      00183A 24 0B            [12] 4627 	add	a,#0x0b
      00183C F9               [12] 4628 	mov	r1,a
      00183D 74 13            [12] 4629 	mov	a,#0x13
      00183F 26               [12] 4630 	add	a,@r0
      001840 F7               [12] 4631 	mov	@r1,a
      001841 74 40            [12] 4632 	mov	a,#0x40
      001843 08               [12] 4633 	inc	r0
      001844 36               [12] 4634 	addc	a,@r0
      001845 09               [12] 4635 	inc	r1
      001846 F7               [12] 4636 	mov	@r1,a
      001847 08               [12] 4637 	inc	r0
      001848 09               [12] 4638 	inc	r1
      001849 E6               [12] 4639 	mov	a,@r0
      00184A F7               [12] 4640 	mov	@r1,a
      00184B E5*00            [12] 4641 	mov	a,_bp
      00184D 24 0B            [12] 4642 	add	a,#0x0b
      00184F F8               [12] 4643 	mov	r0,a
      001850 86 82            [24] 4644 	mov	dpl,@r0
      001852 08               [12] 4645 	inc	r0
      001853 86 83            [24] 4646 	mov	dph,@r0
      001855 08               [12] 4647 	inc	r0
      001856 86 F0            [24] 4648 	mov	b,@r0
      001858 12r00r00         [24] 4649 	lcall	__gptrget
      00185B FA               [12] 4650 	mov	r2,a
      00185C A3               [24] 4651 	inc	dptr
      00185D 12r00r00         [24] 4652 	lcall	__gptrget
      001860 FB               [12] 4653 	mov	r3,a
      001861 A3               [24] 4654 	inc	dptr
      001862 12r00r00         [24] 4655 	lcall	__gptrget
      001865 FC               [12] 4656 	mov	r4,a
      001866 C0 07            [24] 4657 	push	ar7
      001868 C0 06            [24] 4658 	push	ar6
      00186A C0 05            [24] 4659 	push	ar5
      00186C 8A 82            [24] 4660 	mov	dpl,r2
      00186E 8B 83            [24] 4661 	mov	dph,r3
      001870 8C F0            [24] 4662 	mov	b,r4
      001872 12r00r00         [24] 4663 	lcall	_stack_pop
      001875 AB 82            [24] 4664 	mov	r3,dpl
      001877 AC 83            [24] 4665 	mov	r4,dph
      001879 15 81            [12] 4666 	dec	sp
      00187B 15 81            [12] 4667 	dec	sp
      00187D 15 81            [12] 4668 	dec	sp
      00187F EB               [12] 4669 	mov	a,r3
      001880 4C               [12] 4670 	orl	a,r4
      001881 70 25            [24] 4671 	jnz	00172$
      001883 7Fr44            [12] 4672 	mov	r7,#___str_10
      001885 7Es00            [12] 4673 	mov	r6,#(___str_10 >> 8)
      001887 7D 80            [12] 4674 	mov	r5,#0x80
                                   4675 ;	calc.c:51: return;
      001889                       4676 00436$:
                                   4677 ;	calc.c:49: for (; *s; s++) putchar(*s);
      001889 8F 82            [24] 4678 	mov	dpl,r7
      00188B 8E 83            [24] 4679 	mov	dph,r6
      00188D 8D F0            [24] 4680 	mov	b,r5
      00188F 12r00r00         [24] 4681 	lcall	__gptrget
      001892 FC               [12] 4682 	mov	r4,a
      001893 70 03            [24] 4683 	jnz	01336$
      001895 02r2Ar46         [24] 4684 	ljmp	00249$
      001898                       4685 01336$:
      001898 7B 00            [12] 4686 	mov	r3,#0x00
      00189A 8C 82            [24] 4687 	mov	dpl,r4
      00189C 8B 83            [24] 4688 	mov	dph,r3
      00189E 12r00r00         [24] 4689 	lcall	_putchar
      0018A1 0F               [12] 4690 	inc	r7
                                   4691 ;	calc.c:235: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      0018A2 BF 00 E4         [24] 4692 	cjne	r7,#0x00,00436$
      0018A5 0E               [12] 4693 	inc	r6
      0018A6 80 E1            [24] 4694 	sjmp	00436$
      0018A8                       4695 00172$:
                                   4696 ;	calc.c:236: else if (!stack_pop(ctx->ps, &d1)) {
      0018A8 E5*00            [12] 4697 	mov	a,_bp
      0018AA 24 19            [12] 4698 	add	a,#0x19
      0018AC FF               [12] 4699 	mov	r7,a
      0018AD 7E 00            [12] 4700 	mov	r6,#0x00
      0018AF 7D 40            [12] 4701 	mov	r5,#0x40
      0018B1 E5*00            [12] 4702 	mov	a,_bp
      0018B3 24 0B            [12] 4703 	add	a,#0x0b
      0018B5 F8               [12] 4704 	mov	r0,a
      0018B6 86 82            [24] 4705 	mov	dpl,@r0
      0018B8 08               [12] 4706 	inc	r0
      0018B9 86 83            [24] 4707 	mov	dph,@r0
      0018BB 08               [12] 4708 	inc	r0
      0018BC 86 F0            [24] 4709 	mov	b,@r0
      0018BE 12r00r00         [24] 4710 	lcall	__gptrget
      0018C1 FA               [12] 4711 	mov	r2,a
      0018C2 A3               [24] 4712 	inc	dptr
      0018C3 12r00r00         [24] 4713 	lcall	__gptrget
      0018C6 FB               [12] 4714 	mov	r3,a
      0018C7 A3               [24] 4715 	inc	dptr
      0018C8 12r00r00         [24] 4716 	lcall	__gptrget
      0018CB FC               [12] 4717 	mov	r4,a
      0018CC C0 07            [24] 4718 	push	ar7
      0018CE C0 06            [24] 4719 	push	ar6
      0018D0 C0 05            [24] 4720 	push	ar5
      0018D2 8A 82            [24] 4721 	mov	dpl,r2
      0018D4 8B 83            [24] 4722 	mov	dph,r3
      0018D6 8C F0            [24] 4723 	mov	b,r4
      0018D8 12r00r00         [24] 4724 	lcall	_stack_pop
      0018DB AB 82            [24] 4725 	mov	r3,dpl
      0018DD AC 83            [24] 4726 	mov	r4,dph
      0018DF 15 81            [12] 4727 	dec	sp
      0018E1 15 81            [12] 4728 	dec	sp
      0018E3 15 81            [12] 4729 	dec	sp
      0018E5 EB               [12] 4730 	mov	a,r3
      0018E6 4C               [12] 4731 	orl	a,r4
      0018E7 70 63            [24] 4732 	jnz	00169$
                                   4733 ;	calc.c:237: (void)stack_push(ctx->ps, d0);
      0018E9 E5*00            [12] 4734 	mov	a,_bp
      0018EB 24 0B            [12] 4735 	add	a,#0x0b
      0018ED F8               [12] 4736 	mov	r0,a
      0018EE 86 82            [24] 4737 	mov	dpl,@r0
      0018F0 08               [12] 4738 	inc	r0
      0018F1 86 83            [24] 4739 	mov	dph,@r0
      0018F3 08               [12] 4740 	inc	r0
      0018F4 86 F0            [24] 4741 	mov	b,@r0
      0018F6 12r00r00         [24] 4742 	lcall	__gptrget
      0018F9 FA               [12] 4743 	mov	r2,a
      0018FA A3               [24] 4744 	inc	dptr
      0018FB 12r00r00         [24] 4745 	lcall	__gptrget
      0018FE FB               [12] 4746 	mov	r3,a
      0018FF A3               [24] 4747 	inc	dptr
      001900 12r00r00         [24] 4748 	lcall	__gptrget
      001903 FC               [12] 4749 	mov	r4,a
      001904 E5*00            [12] 4750 	mov	a,_bp
      001906 24 15            [12] 4751 	add	a,#0x15
      001908 F8               [12] 4752 	mov	r0,a
      001909 E6               [12] 4753 	mov	a,@r0
      00190A C0 E0            [24] 4754 	push	acc
      00190C 08               [12] 4755 	inc	r0
      00190D E6               [12] 4756 	mov	a,@r0
      00190E C0 E0            [24] 4757 	push	acc
      001910 08               [12] 4758 	inc	r0
      001911 E6               [12] 4759 	mov	a,@r0
      001912 C0 E0            [24] 4760 	push	acc
      001914 08               [12] 4761 	inc	r0
      001915 E6               [12] 4762 	mov	a,@r0
      001916 C0 E0            [24] 4763 	push	acc
      001918 8A 82            [24] 4764 	mov	dpl,r2
      00191A 8B 83            [24] 4765 	mov	dph,r3
      00191C 8C F0            [24] 4766 	mov	b,r4
      00191E 12r00r00         [24] 4767 	lcall	_stack_push
      001921 E5 81            [12] 4768 	mov	a,sp
      001923 24 FC            [12] 4769 	add	a,#0xfc
      001925 F5 81            [12] 4770 	mov	sp,a
                                   4771 ;	calc.c:238: printstr("\r\nstack underflow\r\n");
      001927 7Fr44            [12] 4772 	mov	r7,#___str_10
      001929 7Es00            [12] 4773 	mov	r6,#(___str_10 >> 8)
      00192B 7D 80            [12] 4774 	mov	r5,#0x80
                                   4775 ;	calc.c:51: return;
      00192D                       4776 00439$:
                                   4777 ;	calc.c:49: for (; *s; s++) putchar(*s);
      00192D 8F 82            [24] 4778 	mov	dpl,r7
      00192F 8E 83            [24] 4779 	mov	dph,r6
      001931 8D F0            [24] 4780 	mov	b,r5
      001933 12r00r00         [24] 4781 	lcall	__gptrget
      001936 FC               [12] 4782 	mov	r4,a
      001937 70 03            [24] 4783 	jnz	01339$
      001939 02r2Ar46         [24] 4784 	ljmp	00249$
      00193C                       4785 01339$:
      00193C 7B 00            [12] 4786 	mov	r3,#0x00
      00193E 8C 82            [24] 4787 	mov	dpl,r4
      001940 8B 83            [24] 4788 	mov	dph,r3
      001942 12r00r00         [24] 4789 	lcall	_putchar
      001945 0F               [12] 4790 	inc	r7
                                   4791 ;	calc.c:238: printstr("\r\nstack underflow\r\n");
      001946 BF 00 E4         [24] 4792 	cjne	r7,#0x00,00439$
      001949 0E               [12] 4793 	inc	r6
      00194A 80 E1            [24] 4794 	sjmp	00439$
      00194C                       4795 00169$:
                                   4796 ;	calc.c:240: d1 *= d0;
      00194C E5*00            [12] 4797 	mov	a,_bp
      00194E 24 15            [12] 4798 	add	a,#0x15
      001950 F8               [12] 4799 	mov	r0,a
      001951 E6               [12] 4800 	mov	a,@r0
      001952 C0 E0            [24] 4801 	push	acc
      001954 08               [12] 4802 	inc	r0
      001955 E6               [12] 4803 	mov	a,@r0
      001956 C0 E0            [24] 4804 	push	acc
      001958 08               [12] 4805 	inc	r0
      001959 E6               [12] 4806 	mov	a,@r0
      00195A C0 E0            [24] 4807 	push	acc
      00195C 08               [12] 4808 	inc	r0
      00195D E6               [12] 4809 	mov	a,@r0
      00195E C0 E0            [24] 4810 	push	acc
      001960 E5*00            [12] 4811 	mov	a,_bp
      001962 24 19            [12] 4812 	add	a,#0x19
      001964 F8               [12] 4813 	mov	r0,a
      001965 86 82            [24] 4814 	mov	dpl,@r0
      001967 08               [12] 4815 	inc	r0
      001968 86 83            [24] 4816 	mov	dph,@r0
      00196A 08               [12] 4817 	inc	r0
      00196B 86 F0            [24] 4818 	mov	b,@r0
      00196D 08               [12] 4819 	inc	r0
      00196E E6               [12] 4820 	mov	a,@r0
      00196F 12r00r00         [24] 4821 	lcall	__mullong
      001972 AF 82            [24] 4822 	mov	r7,dpl
      001974 AE 83            [24] 4823 	mov	r6,dph
      001976 AD F0            [24] 4824 	mov	r5,b
      001978 FC               [12] 4825 	mov	r4,a
      001979 E5 81            [12] 4826 	mov	a,sp
      00197B 24 FC            [12] 4827 	add	a,#0xfc
      00197D F5 81            [12] 4828 	mov	sp,a
      00197F E5*00            [12] 4829 	mov	a,_bp
      001981 24 19            [12] 4830 	add	a,#0x19
      001983 F8               [12] 4831 	mov	r0,a
      001984 A6 07            [24] 4832 	mov	@r0,ar7
      001986 08               [12] 4833 	inc	r0
      001987 A6 06            [24] 4834 	mov	@r0,ar6
      001989 08               [12] 4835 	inc	r0
      00198A A6 05            [24] 4836 	mov	@r0,ar5
      00198C 08               [12] 4837 	inc	r0
      00198D A6 04            [24] 4838 	mov	@r0,ar4
                                   4839 ;	calc.c:241: (void)stack_push(ctx->ps, d1);
      00198F E5*00            [12] 4840 	mov	a,_bp
      001991 24 0B            [12] 4841 	add	a,#0x0b
      001993 F8               [12] 4842 	mov	r0,a
      001994 86 82            [24] 4843 	mov	dpl,@r0
      001996 08               [12] 4844 	inc	r0
      001997 86 83            [24] 4845 	mov	dph,@r0
      001999 08               [12] 4846 	inc	r0
      00199A 86 F0            [24] 4847 	mov	b,@r0
      00199C 12r00r00         [24] 4848 	lcall	__gptrget
      00199F FA               [12] 4849 	mov	r2,a
      0019A0 A3               [24] 4850 	inc	dptr
      0019A1 12r00r00         [24] 4851 	lcall	__gptrget
      0019A4 FB               [12] 4852 	mov	r3,a
      0019A5 A3               [24] 4853 	inc	dptr
      0019A6 12r00r00         [24] 4854 	lcall	__gptrget
      0019A9 FC               [12] 4855 	mov	r4,a
      0019AA E5*00            [12] 4856 	mov	a,_bp
      0019AC 24 19            [12] 4857 	add	a,#0x19
      0019AE F8               [12] 4858 	mov	r0,a
      0019AF E6               [12] 4859 	mov	a,@r0
      0019B0 C0 E0            [24] 4860 	push	acc
      0019B2 08               [12] 4861 	inc	r0
      0019B3 E6               [12] 4862 	mov	a,@r0
      0019B4 C0 E0            [24] 4863 	push	acc
      0019B6 08               [12] 4864 	inc	r0
      0019B7 E6               [12] 4865 	mov	a,@r0
      0019B8 C0 E0            [24] 4866 	push	acc
      0019BA 08               [12] 4867 	inc	r0
      0019BB E6               [12] 4868 	mov	a,@r0
      0019BC C0 E0            [24] 4869 	push	acc
      0019BE 8A 82            [24] 4870 	mov	dpl,r2
      0019C0 8B 83            [24] 4871 	mov	dph,r3
      0019C2 8C F0            [24] 4872 	mov	b,r4
      0019C4 12r00r00         [24] 4873 	lcall	_stack_push
      0019C7 E5 81            [12] 4874 	mov	a,sp
      0019C9 24 FC            [12] 4875 	add	a,#0xfc
      0019CB F5 81            [12] 4876 	mov	sp,a
                                   4877 ;	calc.c:243: break;
      0019CD 02r2Ar46         [24] 4878 	ljmp	00249$
                                   4879 ;	calc.c:245: case '\\':
      0019D0                       4880 00175$:
                                   4881 ;	calc.c:246: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      0019D0 C0 05            [24] 4882 	push	ar5
      0019D2 C0 06            [24] 4883 	push	ar6
      0019D4 C0 07            [24] 4884 	push	ar7
      0019D6 E5*00            [12] 4885 	mov	a,_bp
      0019D8 24 15            [12] 4886 	add	a,#0x15
      0019DA FC               [12] 4887 	mov	r4,a
      0019DB 7B 00            [12] 4888 	mov	r3,#0x00
      0019DD 7A 40            [12] 4889 	mov	r2,#0x40
      0019DF E5*00            [12] 4890 	mov	a,_bp
      0019E1 24 12            [12] 4891 	add	a,#0x12
      0019E3 F8               [12] 4892 	mov	r0,a
      0019E4 E5*00            [12] 4893 	mov	a,_bp
      0019E6 24 0B            [12] 4894 	add	a,#0x0b
      0019E8 F9               [12] 4895 	mov	r1,a
      0019E9 74 13            [12] 4896 	mov	a,#0x13
      0019EB 26               [12] 4897 	add	a,@r0
      0019EC F7               [12] 4898 	mov	@r1,a
      0019ED 74 40            [12] 4899 	mov	a,#0x40
      0019EF 08               [12] 4900 	inc	r0
      0019F0 36               [12] 4901 	addc	a,@r0
      0019F1 09               [12] 4902 	inc	r1
      0019F2 F7               [12] 4903 	mov	@r1,a
      0019F3 08               [12] 4904 	inc	r0
      0019F4 09               [12] 4905 	inc	r1
      0019F5 E6               [12] 4906 	mov	a,@r0
      0019F6 F7               [12] 4907 	mov	@r1,a
      0019F7 E5*00            [12] 4908 	mov	a,_bp
      0019F9 24 0B            [12] 4909 	add	a,#0x0b
      0019FB F8               [12] 4910 	mov	r0,a
      0019FC 86 82            [24] 4911 	mov	dpl,@r0
      0019FE 08               [12] 4912 	inc	r0
      0019FF 86 83            [24] 4913 	mov	dph,@r0
      001A01 08               [12] 4914 	inc	r0
      001A02 86 F0            [24] 4915 	mov	b,@r0
      001A04 12r00r00         [24] 4916 	lcall	__gptrget
      001A07 FD               [12] 4917 	mov	r5,a
      001A08 A3               [24] 4918 	inc	dptr
      001A09 12r00r00         [24] 4919 	lcall	__gptrget
      001A0C FE               [12] 4920 	mov	r6,a
      001A0D A3               [24] 4921 	inc	dptr
      001A0E 12r00r00         [24] 4922 	lcall	__gptrget
      001A11 FF               [12] 4923 	mov	r7,a
      001A12 C0 05            [24] 4924 	push	ar5
      001A14 C0 04            [24] 4925 	push	ar4
      001A16 C0 03            [24] 4926 	push	ar3
      001A18 C0 02            [24] 4927 	push	ar2
      001A1A 8D 82            [24] 4928 	mov	dpl,r5
      001A1C 8E 83            [24] 4929 	mov	dph,r6
      001A1E 8F F0            [24] 4930 	mov	b,r7
      001A20 12r00r00         [24] 4931 	lcall	_stack_pop
      001A23 AE 82            [24] 4932 	mov	r6,dpl
      001A25 AF 83            [24] 4933 	mov	r7,dph
      001A27 15 81            [12] 4934 	dec	sp
      001A29 15 81            [12] 4935 	dec	sp
      001A2B 15 81            [12] 4936 	dec	sp
      001A2D D0 05            [24] 4937 	pop	ar5
      001A2F EE               [12] 4938 	mov	a,r6
      001A30 4F               [12] 4939 	orl	a,r7
      001A31 D0 07            [24] 4940 	pop	ar7
      001A33 D0 06            [24] 4941 	pop	ar6
      001A35 D0 05            [24] 4942 	pop	ar5
      001A37 70 25            [24] 4943 	jnz	00186$
      001A39 7Fr44            [12] 4944 	mov	r7,#___str_10
      001A3B 7Es00            [12] 4945 	mov	r6,#(___str_10 >> 8)
      001A3D 7D 80            [12] 4946 	mov	r5,#0x80
                                   4947 ;	calc.c:51: return;
      001A3F                       4948 00442$:
                                   4949 ;	calc.c:49: for (; *s; s++) putchar(*s);
      001A3F 8F 82            [24] 4950 	mov	dpl,r7
      001A41 8E 83            [24] 4951 	mov	dph,r6
      001A43 8D F0            [24] 4952 	mov	b,r5
      001A45 12r00r00         [24] 4953 	lcall	__gptrget
      001A48 FC               [12] 4954 	mov	r4,a
      001A49 70 03            [24] 4955 	jnz	01342$
      001A4B 02r2Ar46         [24] 4956 	ljmp	00249$
      001A4E                       4957 01342$:
      001A4E 7B 00            [12] 4958 	mov	r3,#0x00
      001A50 8C 82            [24] 4959 	mov	dpl,r4
      001A52 8B 83            [24] 4960 	mov	dph,r3
      001A54 12r00r00         [24] 4961 	lcall	_putchar
      001A57 0F               [12] 4962 	inc	r7
                                   4963 ;	calc.c:246: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      001A58 BF 00 E4         [24] 4964 	cjne	r7,#0x00,00442$
      001A5B 0E               [12] 4965 	inc	r6
      001A5C 80 E1            [24] 4966 	sjmp	00442$
      001A5E                       4967 00186$:
                                   4968 ;	calc.c:247: else if (!stack_pop(ctx->ps, &d1)) {
      001A5E C0 05            [24] 4969 	push	ar5
      001A60 C0 06            [24] 4970 	push	ar6
      001A62 C0 07            [24] 4971 	push	ar7
      001A64 E5*00            [12] 4972 	mov	a,_bp
      001A66 24 19            [12] 4973 	add	a,#0x19
      001A68 FC               [12] 4974 	mov	r4,a
      001A69 7B 00            [12] 4975 	mov	r3,#0x00
      001A6B 7A 40            [12] 4976 	mov	r2,#0x40
      001A6D E5*00            [12] 4977 	mov	a,_bp
      001A6F 24 0B            [12] 4978 	add	a,#0x0b
      001A71 F8               [12] 4979 	mov	r0,a
      001A72 86 82            [24] 4980 	mov	dpl,@r0
      001A74 08               [12] 4981 	inc	r0
      001A75 86 83            [24] 4982 	mov	dph,@r0
      001A77 08               [12] 4983 	inc	r0
      001A78 86 F0            [24] 4984 	mov	b,@r0
      001A7A 12r00r00         [24] 4985 	lcall	__gptrget
      001A7D FD               [12] 4986 	mov	r5,a
      001A7E A3               [24] 4987 	inc	dptr
      001A7F 12r00r00         [24] 4988 	lcall	__gptrget
      001A82 FE               [12] 4989 	mov	r6,a
      001A83 A3               [24] 4990 	inc	dptr
      001A84 12r00r00         [24] 4991 	lcall	__gptrget
      001A87 FF               [12] 4992 	mov	r7,a
      001A88 C0 05            [24] 4993 	push	ar5
      001A8A C0 04            [24] 4994 	push	ar4
      001A8C C0 03            [24] 4995 	push	ar3
      001A8E C0 02            [24] 4996 	push	ar2
      001A90 8D 82            [24] 4997 	mov	dpl,r5
      001A92 8E 83            [24] 4998 	mov	dph,r6
      001A94 8F F0            [24] 4999 	mov	b,r7
      001A96 12r00r00         [24] 5000 	lcall	_stack_pop
      001A99 AE 82            [24] 5001 	mov	r6,dpl
      001A9B AF 83            [24] 5002 	mov	r7,dph
      001A9D 15 81            [12] 5003 	dec	sp
      001A9F 15 81            [12] 5004 	dec	sp
      001AA1 15 81            [12] 5005 	dec	sp
      001AA3 D0 05            [24] 5006 	pop	ar5
      001AA5 EE               [12] 5007 	mov	a,r6
      001AA6 4F               [12] 5008 	orl	a,r7
      001AA7 D0 07            [24] 5009 	pop	ar7
      001AA9 D0 06            [24] 5010 	pop	ar6
      001AAB D0 05            [24] 5011 	pop	ar5
      001AAD 70 63            [24] 5012 	jnz	00183$
                                   5013 ;	calc.c:248: (void)stack_push(ctx->ps, d0);
      001AAF E5*00            [12] 5014 	mov	a,_bp
      001AB1 24 0B            [12] 5015 	add	a,#0x0b
      001AB3 F8               [12] 5016 	mov	r0,a
      001AB4 86 82            [24] 5017 	mov	dpl,@r0
      001AB6 08               [12] 5018 	inc	r0
      001AB7 86 83            [24] 5019 	mov	dph,@r0
      001AB9 08               [12] 5020 	inc	r0
      001ABA 86 F0            [24] 5021 	mov	b,@r0
      001ABC 12r00r00         [24] 5022 	lcall	__gptrget
      001ABF FA               [12] 5023 	mov	r2,a
      001AC0 A3               [24] 5024 	inc	dptr
      001AC1 12r00r00         [24] 5025 	lcall	__gptrget
      001AC4 FB               [12] 5026 	mov	r3,a
      001AC5 A3               [24] 5027 	inc	dptr
      001AC6 12r00r00         [24] 5028 	lcall	__gptrget
      001AC9 FC               [12] 5029 	mov	r4,a
      001ACA E5*00            [12] 5030 	mov	a,_bp
      001ACC 24 15            [12] 5031 	add	a,#0x15
      001ACE F8               [12] 5032 	mov	r0,a
      001ACF E6               [12] 5033 	mov	a,@r0
      001AD0 C0 E0            [24] 5034 	push	acc
      001AD2 08               [12] 5035 	inc	r0
      001AD3 E6               [12] 5036 	mov	a,@r0
      001AD4 C0 E0            [24] 5037 	push	acc
      001AD6 08               [12] 5038 	inc	r0
      001AD7 E6               [12] 5039 	mov	a,@r0
      001AD8 C0 E0            [24] 5040 	push	acc
      001ADA 08               [12] 5041 	inc	r0
      001ADB E6               [12] 5042 	mov	a,@r0
      001ADC C0 E0            [24] 5043 	push	acc
      001ADE 8A 82            [24] 5044 	mov	dpl,r2
      001AE0 8B 83            [24] 5045 	mov	dph,r3
      001AE2 8C F0            [24] 5046 	mov	b,r4
      001AE4 12r00r00         [24] 5047 	lcall	_stack_push
      001AE7 E5 81            [12] 5048 	mov	a,sp
      001AE9 24 FC            [12] 5049 	add	a,#0xfc
      001AEB F5 81            [12] 5050 	mov	sp,a
                                   5051 ;	calc.c:249: printstr("\r\nstack underflow\r\n");
      001AED 7Fr44            [12] 5052 	mov	r7,#___str_10
      001AEF 7Es00            [12] 5053 	mov	r6,#(___str_10 >> 8)
      001AF1 7D 80            [12] 5054 	mov	r5,#0x80
                                   5055 ;	calc.c:51: return;
      001AF3                       5056 00445$:
                                   5057 ;	calc.c:49: for (; *s; s++) putchar(*s);
      001AF3 8F 82            [24] 5058 	mov	dpl,r7
      001AF5 8E 83            [24] 5059 	mov	dph,r6
      001AF7 8D F0            [24] 5060 	mov	b,r5
      001AF9 12r00r00         [24] 5061 	lcall	__gptrget
      001AFC FC               [12] 5062 	mov	r4,a
      001AFD 70 03            [24] 5063 	jnz	01345$
      001AFF 02r2Ar46         [24] 5064 	ljmp	00249$
      001B02                       5065 01345$:
      001B02 7B 00            [12] 5066 	mov	r3,#0x00
      001B04 8C 82            [24] 5067 	mov	dpl,r4
      001B06 8B 83            [24] 5068 	mov	dph,r3
      001B08 12r00r00         [24] 5069 	lcall	_putchar
      001B0B 0F               [12] 5070 	inc	r7
                                   5071 ;	calc.c:249: printstr("\r\nstack underflow\r\n");
      001B0C BF 00 E4         [24] 5072 	cjne	r7,#0x00,00445$
      001B0F 0E               [12] 5073 	inc	r6
      001B10 80 E1            [24] 5074 	sjmp	00445$
      001B12                       5075 00183$:
                                   5076 ;	calc.c:250: } else if (!d0) {
      001B12 E5*00            [12] 5077 	mov	a,_bp
      001B14 24 15            [12] 5078 	add	a,#0x15
      001B16 F8               [12] 5079 	mov	r0,a
      001B17 E6               [12] 5080 	mov	a,@r0
      001B18 08               [12] 5081 	inc	r0
      001B19 46               [12] 5082 	orl	a,@r0
      001B1A 08               [12] 5083 	inc	r0
      001B1B 46               [12] 5084 	orl	a,@r0
      001B1C 08               [12] 5085 	inc	r0
      001B1D 46               [12] 5086 	orl	a,@r0
      001B1E 60 03            [24] 5087 	jz	01347$
      001B20 02r1BrC4         [24] 5088 	ljmp	00180$
      001B23                       5089 01347$:
                                   5090 ;	calc.c:251: (void)stack_push(ctx->ps, d1);
      001B23 E5*00            [12] 5091 	mov	a,_bp
      001B25 24 0B            [12] 5092 	add	a,#0x0b
      001B27 F8               [12] 5093 	mov	r0,a
      001B28 86 82            [24] 5094 	mov	dpl,@r0
      001B2A 08               [12] 5095 	inc	r0
      001B2B 86 83            [24] 5096 	mov	dph,@r0
      001B2D 08               [12] 5097 	inc	r0
      001B2E 86 F0            [24] 5098 	mov	b,@r0
      001B30 12r00r00         [24] 5099 	lcall	__gptrget
      001B33 FA               [12] 5100 	mov	r2,a
      001B34 A3               [24] 5101 	inc	dptr
      001B35 12r00r00         [24] 5102 	lcall	__gptrget
      001B38 FB               [12] 5103 	mov	r3,a
      001B39 A3               [24] 5104 	inc	dptr
      001B3A 12r00r00         [24] 5105 	lcall	__gptrget
      001B3D FC               [12] 5106 	mov	r4,a
      001B3E E5*00            [12] 5107 	mov	a,_bp
      001B40 24 19            [12] 5108 	add	a,#0x19
      001B42 F8               [12] 5109 	mov	r0,a
      001B43 E6               [12] 5110 	mov	a,@r0
      001B44 C0 E0            [24] 5111 	push	acc
      001B46 08               [12] 5112 	inc	r0
      001B47 E6               [12] 5113 	mov	a,@r0
      001B48 C0 E0            [24] 5114 	push	acc
      001B4A 08               [12] 5115 	inc	r0
      001B4B E6               [12] 5116 	mov	a,@r0
      001B4C C0 E0            [24] 5117 	push	acc
      001B4E 08               [12] 5118 	inc	r0
      001B4F E6               [12] 5119 	mov	a,@r0
      001B50 C0 E0            [24] 5120 	push	acc
      001B52 8A 82            [24] 5121 	mov	dpl,r2
      001B54 8B 83            [24] 5122 	mov	dph,r3
      001B56 8C F0            [24] 5123 	mov	b,r4
      001B58 12r00r00         [24] 5124 	lcall	_stack_push
      001B5B E5 81            [12] 5125 	mov	a,sp
      001B5D 24 FC            [12] 5126 	add	a,#0xfc
      001B5F F5 81            [12] 5127 	mov	sp,a
                                   5128 ;	calc.c:252: (void)stack_push(ctx->ps, d0);			
      001B61 E5*00            [12] 5129 	mov	a,_bp
      001B63 24 0B            [12] 5130 	add	a,#0x0b
      001B65 F8               [12] 5131 	mov	r0,a
      001B66 86 82            [24] 5132 	mov	dpl,@r0
      001B68 08               [12] 5133 	inc	r0
      001B69 86 83            [24] 5134 	mov	dph,@r0
      001B6B 08               [12] 5135 	inc	r0
      001B6C 86 F0            [24] 5136 	mov	b,@r0
      001B6E 12r00r00         [24] 5137 	lcall	__gptrget
      001B71 FA               [12] 5138 	mov	r2,a
      001B72 A3               [24] 5139 	inc	dptr
      001B73 12r00r00         [24] 5140 	lcall	__gptrget
      001B76 FB               [12] 5141 	mov	r3,a
      001B77 A3               [24] 5142 	inc	dptr
      001B78 12r00r00         [24] 5143 	lcall	__gptrget
      001B7B FC               [12] 5144 	mov	r4,a
      001B7C E5*00            [12] 5145 	mov	a,_bp
      001B7E 24 15            [12] 5146 	add	a,#0x15
      001B80 F8               [12] 5147 	mov	r0,a
      001B81 E6               [12] 5148 	mov	a,@r0
      001B82 C0 E0            [24] 5149 	push	acc
      001B84 08               [12] 5150 	inc	r0
      001B85 E6               [12] 5151 	mov	a,@r0
      001B86 C0 E0            [24] 5152 	push	acc
      001B88 08               [12] 5153 	inc	r0
      001B89 E6               [12] 5154 	mov	a,@r0
      001B8A C0 E0            [24] 5155 	push	acc
      001B8C 08               [12] 5156 	inc	r0
      001B8D E6               [12] 5157 	mov	a,@r0
      001B8E C0 E0            [24] 5158 	push	acc
      001B90 8A 82            [24] 5159 	mov	dpl,r2
      001B92 8B 83            [24] 5160 	mov	dph,r3
      001B94 8C F0            [24] 5161 	mov	b,r4
      001B96 12r00r00         [24] 5162 	lcall	_stack_push
      001B99 E5 81            [12] 5163 	mov	a,sp
      001B9B 24 FC            [12] 5164 	add	a,#0xfc
      001B9D F5 81            [12] 5165 	mov	sp,a
                                   5166 ;	calc.c:253: printstr("\r\ndivision by zero\r\n");
      001B9F 7FrA6            [12] 5167 	mov	r7,#___str_14
      001BA1 7Es00            [12] 5168 	mov	r6,#(___str_14 >> 8)
      001BA3 7D 80            [12] 5169 	mov	r5,#0x80
                                   5170 ;	calc.c:51: return;
      001BA5                       5171 00448$:
                                   5172 ;	calc.c:49: for (; *s; s++) putchar(*s);
      001BA5 8F 82            [24] 5173 	mov	dpl,r7
      001BA7 8E 83            [24] 5174 	mov	dph,r6
      001BA9 8D F0            [24] 5175 	mov	b,r5
      001BAB 12r00r00         [24] 5176 	lcall	__gptrget
      001BAE FC               [12] 5177 	mov	r4,a
      001BAF 70 03            [24] 5178 	jnz	01348$
      001BB1 02r2Ar46         [24] 5179 	ljmp	00249$
      001BB4                       5180 01348$:
      001BB4 7B 00            [12] 5181 	mov	r3,#0x00
      001BB6 8C 82            [24] 5182 	mov	dpl,r4
      001BB8 8B 83            [24] 5183 	mov	dph,r3
      001BBA 12r00r00         [24] 5184 	lcall	_putchar
      001BBD 0F               [12] 5185 	inc	r7
                                   5186 ;	calc.c:253: printstr("\r\ndivision by zero\r\n");
      001BBE BF 00 E4         [24] 5187 	cjne	r7,#0x00,00448$
      001BC1 0E               [12] 5188 	inc	r6
      001BC2 80 E1            [24] 5189 	sjmp	00448$
      001BC4                       5190 00180$:
                                   5191 ;	calc.c:255: if (ctx->digit[0] == '/') d1 /= d0;
      001BC4 8D 82            [24] 5192 	mov	dpl,r5
      001BC6 8E 83            [24] 5193 	mov	dph,r6
      001BC8 8F F0            [24] 5194 	mov	b,r7
      001BCA 12r00r00         [24] 5195 	lcall	__gptrget
      001BCD FC               [12] 5196 	mov	r4,a
      001BCE BC 2F 45         [24] 5197 	cjne	r4,#0x2f,00177$
      001BD1 E5*00            [12] 5198 	mov	a,_bp
      001BD3 24 15            [12] 5199 	add	a,#0x15
      001BD5 F8               [12] 5200 	mov	r0,a
      001BD6 E6               [12] 5201 	mov	a,@r0
      001BD7 C0 E0            [24] 5202 	push	acc
      001BD9 08               [12] 5203 	inc	r0
      001BDA E6               [12] 5204 	mov	a,@r0
      001BDB C0 E0            [24] 5205 	push	acc
      001BDD 08               [12] 5206 	inc	r0
      001BDE E6               [12] 5207 	mov	a,@r0
      001BDF C0 E0            [24] 5208 	push	acc
      001BE1 08               [12] 5209 	inc	r0
      001BE2 E6               [12] 5210 	mov	a,@r0
      001BE3 C0 E0            [24] 5211 	push	acc
      001BE5 E5*00            [12] 5212 	mov	a,_bp
      001BE7 24 19            [12] 5213 	add	a,#0x19
      001BE9 F8               [12] 5214 	mov	r0,a
      001BEA 86 82            [24] 5215 	mov	dpl,@r0
      001BEC 08               [12] 5216 	inc	r0
      001BED 86 83            [24] 5217 	mov	dph,@r0
      001BEF 08               [12] 5218 	inc	r0
      001BF0 86 F0            [24] 5219 	mov	b,@r0
      001BF2 08               [12] 5220 	inc	r0
      001BF3 E6               [12] 5221 	mov	a,@r0
      001BF4 12r00r00         [24] 5222 	lcall	__divslong
      001BF7 AF 82            [24] 5223 	mov	r7,dpl
      001BF9 AE 83            [24] 5224 	mov	r6,dph
      001BFB AD F0            [24] 5225 	mov	r5,b
      001BFD FC               [12] 5226 	mov	r4,a
      001BFE E5 81            [12] 5227 	mov	a,sp
      001C00 24 FC            [12] 5228 	add	a,#0xfc
      001C02 F5 81            [12] 5229 	mov	sp,a
      001C04 E5*00            [12] 5230 	mov	a,_bp
      001C06 24 19            [12] 5231 	add	a,#0x19
      001C08 F8               [12] 5232 	mov	r0,a
      001C09 A6 07            [24] 5233 	mov	@r0,ar7
      001C0B 08               [12] 5234 	inc	r0
      001C0C A6 06            [24] 5235 	mov	@r0,ar6
      001C0E 08               [12] 5236 	inc	r0
      001C0F A6 05            [24] 5237 	mov	@r0,ar5
      001C11 08               [12] 5238 	inc	r0
      001C12 A6 04            [24] 5239 	mov	@r0,ar4
      001C14 80 63            [24] 5240 	sjmp	00178$
      001C16                       5241 00177$:
                                   5242 ;	calc.c:256: else d1 = (unsigned long)d1 / (unsigned long)d0;
      001C16 E5*00            [12] 5243 	mov	a,_bp
      001C18 24 19            [12] 5244 	add	a,#0x19
      001C1A F8               [12] 5245 	mov	r0,a
      001C1B 86 07            [24] 5246 	mov	ar7,@r0
      001C1D 08               [12] 5247 	inc	r0
      001C1E 86 06            [24] 5248 	mov	ar6,@r0
      001C20 08               [12] 5249 	inc	r0
      001C21 86 05            [24] 5250 	mov	ar5,@r0
      001C23 08               [12] 5251 	inc	r0
      001C24 86 04            [24] 5252 	mov	ar4,@r0
      001C26 E5*00            [12] 5253 	mov	a,_bp
      001C28 24 15            [12] 5254 	add	a,#0x15
      001C2A F8               [12] 5255 	mov	r0,a
      001C2B E5*00            [12] 5256 	mov	a,_bp
      001C2D 24 0E            [12] 5257 	add	a,#0x0e
      001C2F F9               [12] 5258 	mov	r1,a
      001C30 E6               [12] 5259 	mov	a,@r0
      001C31 F7               [12] 5260 	mov	@r1,a
      001C32 08               [12] 5261 	inc	r0
      001C33 09               [12] 5262 	inc	r1
      001C34 E6               [12] 5263 	mov	a,@r0
      001C35 F7               [12] 5264 	mov	@r1,a
      001C36 08               [12] 5265 	inc	r0
      001C37 09               [12] 5266 	inc	r1
      001C38 E6               [12] 5267 	mov	a,@r0
      001C39 F7               [12] 5268 	mov	@r1,a
      001C3A 08               [12] 5269 	inc	r0
      001C3B 09               [12] 5270 	inc	r1
      001C3C E6               [12] 5271 	mov	a,@r0
      001C3D F7               [12] 5272 	mov	@r1,a
      001C3E E5*00            [12] 5273 	mov	a,_bp
      001C40 24 0E            [12] 5274 	add	a,#0x0e
      001C42 F8               [12] 5275 	mov	r0,a
      001C43 E6               [12] 5276 	mov	a,@r0
      001C44 C0 E0            [24] 5277 	push	acc
      001C46 08               [12] 5278 	inc	r0
      001C47 E6               [12] 5279 	mov	a,@r0
      001C48 C0 E0            [24] 5280 	push	acc
      001C4A 08               [12] 5281 	inc	r0
      001C4B E6               [12] 5282 	mov	a,@r0
      001C4C C0 E0            [24] 5283 	push	acc
      001C4E 08               [12] 5284 	inc	r0
      001C4F E6               [12] 5285 	mov	a,@r0
      001C50 C0 E0            [24] 5286 	push	acc
      001C52 8F 82            [24] 5287 	mov	dpl,r7
      001C54 8E 83            [24] 5288 	mov	dph,r6
      001C56 8D F0            [24] 5289 	mov	b,r5
      001C58 EC               [12] 5290 	mov	a,r4
      001C59 12r00r00         [24] 5291 	lcall	__divulong
      001C5C AF 82            [24] 5292 	mov	r7,dpl
      001C5E AE 83            [24] 5293 	mov	r6,dph
      001C60 AD F0            [24] 5294 	mov	r5,b
      001C62 FC               [12] 5295 	mov	r4,a
      001C63 E5 81            [12] 5296 	mov	a,sp
      001C65 24 FC            [12] 5297 	add	a,#0xfc
      001C67 F5 81            [12] 5298 	mov	sp,a
      001C69 E5*00            [12] 5299 	mov	a,_bp
      001C6B 24 19            [12] 5300 	add	a,#0x19
      001C6D F8               [12] 5301 	mov	r0,a
      001C6E A6 07            [24] 5302 	mov	@r0,ar7
      001C70 08               [12] 5303 	inc	r0
      001C71 A6 06            [24] 5304 	mov	@r0,ar6
      001C73 08               [12] 5305 	inc	r0
      001C74 A6 05            [24] 5306 	mov	@r0,ar5
      001C76 08               [12] 5307 	inc	r0
      001C77 A6 04            [24] 5308 	mov	@r0,ar4
      001C79                       5309 00178$:
                                   5310 ;	calc.c:257: (void)stack_push(ctx->ps, d1);
      001C79 E5*00            [12] 5311 	mov	a,_bp
      001C7B 24 0B            [12] 5312 	add	a,#0x0b
      001C7D F8               [12] 5313 	mov	r0,a
      001C7E 86 82            [24] 5314 	mov	dpl,@r0
      001C80 08               [12] 5315 	inc	r0
      001C81 86 83            [24] 5316 	mov	dph,@r0
      001C83 08               [12] 5317 	inc	r0
      001C84 86 F0            [24] 5318 	mov	b,@r0
      001C86 12r00r00         [24] 5319 	lcall	__gptrget
      001C89 FA               [12] 5320 	mov	r2,a
      001C8A A3               [24] 5321 	inc	dptr
      001C8B 12r00r00         [24] 5322 	lcall	__gptrget
      001C8E FB               [12] 5323 	mov	r3,a
      001C8F A3               [24] 5324 	inc	dptr
      001C90 12r00r00         [24] 5325 	lcall	__gptrget
      001C93 FC               [12] 5326 	mov	r4,a
      001C94 E5*00            [12] 5327 	mov	a,_bp
      001C96 24 19            [12] 5328 	add	a,#0x19
      001C98 F8               [12] 5329 	mov	r0,a
      001C99 E6               [12] 5330 	mov	a,@r0
      001C9A C0 E0            [24] 5331 	push	acc
      001C9C 08               [12] 5332 	inc	r0
      001C9D E6               [12] 5333 	mov	a,@r0
      001C9E C0 E0            [24] 5334 	push	acc
      001CA0 08               [12] 5335 	inc	r0
      001CA1 E6               [12] 5336 	mov	a,@r0
      001CA2 C0 E0            [24] 5337 	push	acc
      001CA4 08               [12] 5338 	inc	r0
      001CA5 E6               [12] 5339 	mov	a,@r0
      001CA6 C0 E0            [24] 5340 	push	acc
      001CA8 8A 82            [24] 5341 	mov	dpl,r2
      001CAA 8B 83            [24] 5342 	mov	dph,r3
      001CAC 8C F0            [24] 5343 	mov	b,r4
      001CAE 12r00r00         [24] 5344 	lcall	_stack_push
      001CB1 E5 81            [12] 5345 	mov	a,sp
      001CB3 24 FC            [12] 5346 	add	a,#0xfc
      001CB5 F5 81            [12] 5347 	mov	sp,a
                                   5348 ;	calc.c:259: break;
      001CB7 02r2Ar46         [24] 5349 	ljmp	00249$
                                   5350 ;	calc.c:261: case '#':
      001CBA                       5351 00189$:
                                   5352 ;	calc.c:262: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      001CBA C0 05            [24] 5353 	push	ar5
      001CBC C0 06            [24] 5354 	push	ar6
      001CBE C0 07            [24] 5355 	push	ar7
      001CC0 E5*00            [12] 5356 	mov	a,_bp
      001CC2 24 15            [12] 5357 	add	a,#0x15
      001CC4 FC               [12] 5358 	mov	r4,a
      001CC5 7B 00            [12] 5359 	mov	r3,#0x00
      001CC7 7A 40            [12] 5360 	mov	r2,#0x40
      001CC9 E5*00            [12] 5361 	mov	a,_bp
      001CCB 24 12            [12] 5362 	add	a,#0x12
      001CCD F8               [12] 5363 	mov	r0,a
      001CCE E5*00            [12] 5364 	mov	a,_bp
      001CD0 24 0E            [12] 5365 	add	a,#0x0e
      001CD2 F9               [12] 5366 	mov	r1,a
      001CD3 74 13            [12] 5367 	mov	a,#0x13
      001CD5 26               [12] 5368 	add	a,@r0
      001CD6 F7               [12] 5369 	mov	@r1,a
      001CD7 74 40            [12] 5370 	mov	a,#0x40
      001CD9 08               [12] 5371 	inc	r0
      001CDA 36               [12] 5372 	addc	a,@r0
      001CDB 09               [12] 5373 	inc	r1
      001CDC F7               [12] 5374 	mov	@r1,a
      001CDD 08               [12] 5375 	inc	r0
      001CDE 09               [12] 5376 	inc	r1
      001CDF E6               [12] 5377 	mov	a,@r0
      001CE0 F7               [12] 5378 	mov	@r1,a
      001CE1 E5*00            [12] 5379 	mov	a,_bp
      001CE3 24 0E            [12] 5380 	add	a,#0x0e
      001CE5 F8               [12] 5381 	mov	r0,a
      001CE6 86 82            [24] 5382 	mov	dpl,@r0
      001CE8 08               [12] 5383 	inc	r0
      001CE9 86 83            [24] 5384 	mov	dph,@r0
      001CEB 08               [12] 5385 	inc	r0
      001CEC 86 F0            [24] 5386 	mov	b,@r0
      001CEE 12r00r00         [24] 5387 	lcall	__gptrget
      001CF1 FD               [12] 5388 	mov	r5,a
      001CF2 A3               [24] 5389 	inc	dptr
      001CF3 12r00r00         [24] 5390 	lcall	__gptrget
      001CF6 FE               [12] 5391 	mov	r6,a
      001CF7 A3               [24] 5392 	inc	dptr
      001CF8 12r00r00         [24] 5393 	lcall	__gptrget
      001CFB FF               [12] 5394 	mov	r7,a
      001CFC C0 05            [24] 5395 	push	ar5
      001CFE C0 04            [24] 5396 	push	ar4
      001D00 C0 03            [24] 5397 	push	ar3
      001D02 C0 02            [24] 5398 	push	ar2
      001D04 8D 82            [24] 5399 	mov	dpl,r5
      001D06 8E 83            [24] 5400 	mov	dph,r6
      001D08 8F F0            [24] 5401 	mov	b,r7
      001D0A 12r00r00         [24] 5402 	lcall	_stack_pop
      001D0D AE 82            [24] 5403 	mov	r6,dpl
      001D0F AF 83            [24] 5404 	mov	r7,dph
      001D11 15 81            [12] 5405 	dec	sp
      001D13 15 81            [12] 5406 	dec	sp
      001D15 15 81            [12] 5407 	dec	sp
      001D17 D0 05            [24] 5408 	pop	ar5
      001D19 EE               [12] 5409 	mov	a,r6
      001D1A 4F               [12] 5410 	orl	a,r7
      001D1B D0 07            [24] 5411 	pop	ar7
      001D1D D0 06            [24] 5412 	pop	ar6
      001D1F D0 05            [24] 5413 	pop	ar5
      001D21 70 25            [24] 5414 	jnz	00200$
      001D23 7Fr44            [12] 5415 	mov	r7,#___str_10
      001D25 7Es00            [12] 5416 	mov	r6,#(___str_10 >> 8)
      001D27 7D 80            [12] 5417 	mov	r5,#0x80
                                   5418 ;	calc.c:51: return;
      001D29                       5419 00451$:
                                   5420 ;	calc.c:49: for (; *s; s++) putchar(*s);
      001D29 8F 82            [24] 5421 	mov	dpl,r7
      001D2B 8E 83            [24] 5422 	mov	dph,r6
      001D2D 8D F0            [24] 5423 	mov	b,r5
      001D2F 12r00r00         [24] 5424 	lcall	__gptrget
      001D32 FC               [12] 5425 	mov	r4,a
      001D33 70 03            [24] 5426 	jnz	01353$
      001D35 02r2Ar46         [24] 5427 	ljmp	00249$
      001D38                       5428 01353$:
      001D38 7B 00            [12] 5429 	mov	r3,#0x00
      001D3A 8C 82            [24] 5430 	mov	dpl,r4
      001D3C 8B 83            [24] 5431 	mov	dph,r3
      001D3E 12r00r00         [24] 5432 	lcall	_putchar
      001D41 0F               [12] 5433 	inc	r7
                                   5434 ;	calc.c:262: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      001D42 BF 00 E4         [24] 5435 	cjne	r7,#0x00,00451$
      001D45 0E               [12] 5436 	inc	r6
      001D46 80 E1            [24] 5437 	sjmp	00451$
      001D48                       5438 00200$:
                                   5439 ;	calc.c:263: else if (!stack_pop(ctx->ps, &d1)) {
      001D48 C0 05            [24] 5440 	push	ar5
      001D4A C0 06            [24] 5441 	push	ar6
      001D4C C0 07            [24] 5442 	push	ar7
      001D4E E5*00            [12] 5443 	mov	a,_bp
      001D50 24 19            [12] 5444 	add	a,#0x19
      001D52 FC               [12] 5445 	mov	r4,a
      001D53 7B 00            [12] 5446 	mov	r3,#0x00
      001D55 7A 40            [12] 5447 	mov	r2,#0x40
      001D57 E5*00            [12] 5448 	mov	a,_bp
      001D59 24 0E            [12] 5449 	add	a,#0x0e
      001D5B F8               [12] 5450 	mov	r0,a
      001D5C 86 82            [24] 5451 	mov	dpl,@r0
      001D5E 08               [12] 5452 	inc	r0
      001D5F 86 83            [24] 5453 	mov	dph,@r0
      001D61 08               [12] 5454 	inc	r0
      001D62 86 F0            [24] 5455 	mov	b,@r0
      001D64 12r00r00         [24] 5456 	lcall	__gptrget
      001D67 FD               [12] 5457 	mov	r5,a
      001D68 A3               [24] 5458 	inc	dptr
      001D69 12r00r00         [24] 5459 	lcall	__gptrget
      001D6C FE               [12] 5460 	mov	r6,a
      001D6D A3               [24] 5461 	inc	dptr
      001D6E 12r00r00         [24] 5462 	lcall	__gptrget
      001D71 FF               [12] 5463 	mov	r7,a
      001D72 C0 05            [24] 5464 	push	ar5
      001D74 C0 04            [24] 5465 	push	ar4
      001D76 C0 03            [24] 5466 	push	ar3
      001D78 C0 02            [24] 5467 	push	ar2
      001D7A 8D 82            [24] 5468 	mov	dpl,r5
      001D7C 8E 83            [24] 5469 	mov	dph,r6
      001D7E 8F F0            [24] 5470 	mov	b,r7
      001D80 12r00r00         [24] 5471 	lcall	_stack_pop
      001D83 AE 82            [24] 5472 	mov	r6,dpl
      001D85 AF 83            [24] 5473 	mov	r7,dph
      001D87 15 81            [12] 5474 	dec	sp
      001D89 15 81            [12] 5475 	dec	sp
      001D8B 15 81            [12] 5476 	dec	sp
      001D8D D0 05            [24] 5477 	pop	ar5
      001D8F EE               [12] 5478 	mov	a,r6
      001D90 4F               [12] 5479 	orl	a,r7
      001D91 D0 07            [24] 5480 	pop	ar7
      001D93 D0 06            [24] 5481 	pop	ar6
      001D95 D0 05            [24] 5482 	pop	ar5
      001D97 70 63            [24] 5483 	jnz	00197$
                                   5484 ;	calc.c:264: (void)stack_push(ctx->ps, d0);
      001D99 E5*00            [12] 5485 	mov	a,_bp
      001D9B 24 0E            [12] 5486 	add	a,#0x0e
      001D9D F8               [12] 5487 	mov	r0,a
      001D9E 86 82            [24] 5488 	mov	dpl,@r0
      001DA0 08               [12] 5489 	inc	r0
      001DA1 86 83            [24] 5490 	mov	dph,@r0
      001DA3 08               [12] 5491 	inc	r0
      001DA4 86 F0            [24] 5492 	mov	b,@r0
      001DA6 12r00r00         [24] 5493 	lcall	__gptrget
      001DA9 FA               [12] 5494 	mov	r2,a
      001DAA A3               [24] 5495 	inc	dptr
      001DAB 12r00r00         [24] 5496 	lcall	__gptrget
      001DAE FB               [12] 5497 	mov	r3,a
      001DAF A3               [24] 5498 	inc	dptr
      001DB0 12r00r00         [24] 5499 	lcall	__gptrget
      001DB3 FC               [12] 5500 	mov	r4,a
      001DB4 E5*00            [12] 5501 	mov	a,_bp
      001DB6 24 15            [12] 5502 	add	a,#0x15
      001DB8 F8               [12] 5503 	mov	r0,a
      001DB9 E6               [12] 5504 	mov	a,@r0
      001DBA C0 E0            [24] 5505 	push	acc
      001DBC 08               [12] 5506 	inc	r0
      001DBD E6               [12] 5507 	mov	a,@r0
      001DBE C0 E0            [24] 5508 	push	acc
      001DC0 08               [12] 5509 	inc	r0
      001DC1 E6               [12] 5510 	mov	a,@r0
      001DC2 C0 E0            [24] 5511 	push	acc
      001DC4 08               [12] 5512 	inc	r0
      001DC5 E6               [12] 5513 	mov	a,@r0
      001DC6 C0 E0            [24] 5514 	push	acc
      001DC8 8A 82            [24] 5515 	mov	dpl,r2
      001DCA 8B 83            [24] 5516 	mov	dph,r3
      001DCC 8C F0            [24] 5517 	mov	b,r4
      001DCE 12r00r00         [24] 5518 	lcall	_stack_push
      001DD1 E5 81            [12] 5519 	mov	a,sp
      001DD3 24 FC            [12] 5520 	add	a,#0xfc
      001DD5 F5 81            [12] 5521 	mov	sp,a
                                   5522 ;	calc.c:265: printstr("\r\nstack underflow\r\n");
      001DD7 7Fr44            [12] 5523 	mov	r7,#___str_10
      001DD9 7Es00            [12] 5524 	mov	r6,#(___str_10 >> 8)
      001DDB 7D 80            [12] 5525 	mov	r5,#0x80
                                   5526 ;	calc.c:51: return;
      001DDD                       5527 00454$:
                                   5528 ;	calc.c:49: for (; *s; s++) putchar(*s);
      001DDD 8F 82            [24] 5529 	mov	dpl,r7
      001DDF 8E 83            [24] 5530 	mov	dph,r6
      001DE1 8D F0            [24] 5531 	mov	b,r5
      001DE3 12r00r00         [24] 5532 	lcall	__gptrget
      001DE6 FC               [12] 5533 	mov	r4,a
      001DE7 70 03            [24] 5534 	jnz	01356$
      001DE9 02r2Ar46         [24] 5535 	ljmp	00249$
      001DEC                       5536 01356$:
      001DEC 7B 00            [12] 5537 	mov	r3,#0x00
      001DEE 8C 82            [24] 5538 	mov	dpl,r4
      001DF0 8B 83            [24] 5539 	mov	dph,r3
      001DF2 12r00r00         [24] 5540 	lcall	_putchar
      001DF5 0F               [12] 5541 	inc	r7
                                   5542 ;	calc.c:265: printstr("\r\nstack underflow\r\n");
      001DF6 BF 00 E4         [24] 5543 	cjne	r7,#0x00,00454$
      001DF9 0E               [12] 5544 	inc	r6
      001DFA 80 E1            [24] 5545 	sjmp	00454$
      001DFC                       5546 00197$:
                                   5547 ;	calc.c:266: } else if (!d0) {
      001DFC E5*00            [12] 5548 	mov	a,_bp
      001DFE 24 15            [12] 5549 	add	a,#0x15
      001E00 F8               [12] 5550 	mov	r0,a
      001E01 E6               [12] 5551 	mov	a,@r0
      001E02 08               [12] 5552 	inc	r0
      001E03 46               [12] 5553 	orl	a,@r0
      001E04 08               [12] 5554 	inc	r0
      001E05 46               [12] 5555 	orl	a,@r0
      001E06 08               [12] 5556 	inc	r0
      001E07 46               [12] 5557 	orl	a,@r0
      001E08 60 03            [24] 5558 	jz	01358$
      001E0A 02r1ErAE         [24] 5559 	ljmp	00194$
      001E0D                       5560 01358$:
                                   5561 ;	calc.c:267: (void)stack_push(ctx->ps, d1);
      001E0D E5*00            [12] 5562 	mov	a,_bp
      001E0F 24 0E            [12] 5563 	add	a,#0x0e
      001E11 F8               [12] 5564 	mov	r0,a
      001E12 86 82            [24] 5565 	mov	dpl,@r0
      001E14 08               [12] 5566 	inc	r0
      001E15 86 83            [24] 5567 	mov	dph,@r0
      001E17 08               [12] 5568 	inc	r0
      001E18 86 F0            [24] 5569 	mov	b,@r0
      001E1A 12r00r00         [24] 5570 	lcall	__gptrget
      001E1D FA               [12] 5571 	mov	r2,a
      001E1E A3               [24] 5572 	inc	dptr
      001E1F 12r00r00         [24] 5573 	lcall	__gptrget
      001E22 FB               [12] 5574 	mov	r3,a
      001E23 A3               [24] 5575 	inc	dptr
      001E24 12r00r00         [24] 5576 	lcall	__gptrget
      001E27 FC               [12] 5577 	mov	r4,a
      001E28 E5*00            [12] 5578 	mov	a,_bp
      001E2A 24 19            [12] 5579 	add	a,#0x19
      001E2C F8               [12] 5580 	mov	r0,a
      001E2D E6               [12] 5581 	mov	a,@r0
      001E2E C0 E0            [24] 5582 	push	acc
      001E30 08               [12] 5583 	inc	r0
      001E31 E6               [12] 5584 	mov	a,@r0
      001E32 C0 E0            [24] 5585 	push	acc
      001E34 08               [12] 5586 	inc	r0
      001E35 E6               [12] 5587 	mov	a,@r0
      001E36 C0 E0            [24] 5588 	push	acc
      001E38 08               [12] 5589 	inc	r0
      001E39 E6               [12] 5590 	mov	a,@r0
      001E3A C0 E0            [24] 5591 	push	acc
      001E3C 8A 82            [24] 5592 	mov	dpl,r2
      001E3E 8B 83            [24] 5593 	mov	dph,r3
      001E40 8C F0            [24] 5594 	mov	b,r4
      001E42 12r00r00         [24] 5595 	lcall	_stack_push
      001E45 E5 81            [12] 5596 	mov	a,sp
      001E47 24 FC            [12] 5597 	add	a,#0xfc
      001E49 F5 81            [12] 5598 	mov	sp,a
                                   5599 ;	calc.c:268: (void)stack_push(ctx->ps, d0);			
      001E4B E5*00            [12] 5600 	mov	a,_bp
      001E4D 24 0E            [12] 5601 	add	a,#0x0e
      001E4F F8               [12] 5602 	mov	r0,a
      001E50 86 82            [24] 5603 	mov	dpl,@r0
      001E52 08               [12] 5604 	inc	r0
      001E53 86 83            [24] 5605 	mov	dph,@r0
      001E55 08               [12] 5606 	inc	r0
      001E56 86 F0            [24] 5607 	mov	b,@r0
      001E58 12r00r00         [24] 5608 	lcall	__gptrget
      001E5B FA               [12] 5609 	mov	r2,a
      001E5C A3               [24] 5610 	inc	dptr
      001E5D 12r00r00         [24] 5611 	lcall	__gptrget
      001E60 FB               [12] 5612 	mov	r3,a
      001E61 A3               [24] 5613 	inc	dptr
      001E62 12r00r00         [24] 5614 	lcall	__gptrget
      001E65 FC               [12] 5615 	mov	r4,a
      001E66 E5*00            [12] 5616 	mov	a,_bp
      001E68 24 15            [12] 5617 	add	a,#0x15
      001E6A F8               [12] 5618 	mov	r0,a
      001E6B E6               [12] 5619 	mov	a,@r0
      001E6C C0 E0            [24] 5620 	push	acc
      001E6E 08               [12] 5621 	inc	r0
      001E6F E6               [12] 5622 	mov	a,@r0
      001E70 C0 E0            [24] 5623 	push	acc
      001E72 08               [12] 5624 	inc	r0
      001E73 E6               [12] 5625 	mov	a,@r0
      001E74 C0 E0            [24] 5626 	push	acc
      001E76 08               [12] 5627 	inc	r0
      001E77 E6               [12] 5628 	mov	a,@r0
      001E78 C0 E0            [24] 5629 	push	acc
      001E7A 8A 82            [24] 5630 	mov	dpl,r2
      001E7C 8B 83            [24] 5631 	mov	dph,r3
      001E7E 8C F0            [24] 5632 	mov	b,r4
      001E80 12r00r00         [24] 5633 	lcall	_stack_push
      001E83 E5 81            [12] 5634 	mov	a,sp
      001E85 24 FC            [12] 5635 	add	a,#0xfc
      001E87 F5 81            [12] 5636 	mov	sp,a
                                   5637 ;	calc.c:269: printstr("\r\ndivision by zero\r\n");
      001E89 7FrA6            [12] 5638 	mov	r7,#___str_14
      001E8B 7Es00            [12] 5639 	mov	r6,#(___str_14 >> 8)
      001E8D 7D 80            [12] 5640 	mov	r5,#0x80
                                   5641 ;	calc.c:51: return;
      001E8F                       5642 00457$:
                                   5643 ;	calc.c:49: for (; *s; s++) putchar(*s);
      001E8F 8F 82            [24] 5644 	mov	dpl,r7
      001E91 8E 83            [24] 5645 	mov	dph,r6
      001E93 8D F0            [24] 5646 	mov	b,r5
      001E95 12r00r00         [24] 5647 	lcall	__gptrget
      001E98 FC               [12] 5648 	mov	r4,a
      001E99 70 03            [24] 5649 	jnz	01359$
      001E9B 02r2Ar46         [24] 5650 	ljmp	00249$
      001E9E                       5651 01359$:
      001E9E 7B 00            [12] 5652 	mov	r3,#0x00
      001EA0 8C 82            [24] 5653 	mov	dpl,r4
      001EA2 8B 83            [24] 5654 	mov	dph,r3
      001EA4 12r00r00         [24] 5655 	lcall	_putchar
      001EA7 0F               [12] 5656 	inc	r7
                                   5657 ;	calc.c:269: printstr("\r\ndivision by zero\r\n");
      001EA8 BF 00 E4         [24] 5658 	cjne	r7,#0x00,00457$
      001EAB 0E               [12] 5659 	inc	r6
      001EAC 80 E1            [24] 5660 	sjmp	00457$
      001EAE                       5661 00194$:
                                   5662 ;	calc.c:271: if (ctx->digit[0] == '%') d1 %= d0;
      001EAE 8D 82            [24] 5663 	mov	dpl,r5
      001EB0 8E 83            [24] 5664 	mov	dph,r6
      001EB2 8F F0            [24] 5665 	mov	b,r7
      001EB4 12r00r00         [24] 5666 	lcall	__gptrget
      001EB7 FD               [12] 5667 	mov	r5,a
      001EB8 BD 25 45         [24] 5668 	cjne	r5,#0x25,00191$
      001EBB E5*00            [12] 5669 	mov	a,_bp
      001EBD 24 15            [12] 5670 	add	a,#0x15
      001EBF F8               [12] 5671 	mov	r0,a
      001EC0 E6               [12] 5672 	mov	a,@r0
      001EC1 C0 E0            [24] 5673 	push	acc
      001EC3 08               [12] 5674 	inc	r0
      001EC4 E6               [12] 5675 	mov	a,@r0
      001EC5 C0 E0            [24] 5676 	push	acc
      001EC7 08               [12] 5677 	inc	r0
      001EC8 E6               [12] 5678 	mov	a,@r0
      001EC9 C0 E0            [24] 5679 	push	acc
      001ECB 08               [12] 5680 	inc	r0
      001ECC E6               [12] 5681 	mov	a,@r0
      001ECD C0 E0            [24] 5682 	push	acc
      001ECF E5*00            [12] 5683 	mov	a,_bp
      001ED1 24 19            [12] 5684 	add	a,#0x19
      001ED3 F8               [12] 5685 	mov	r0,a
      001ED4 86 82            [24] 5686 	mov	dpl,@r0
      001ED6 08               [12] 5687 	inc	r0
      001ED7 86 83            [24] 5688 	mov	dph,@r0
      001ED9 08               [12] 5689 	inc	r0
      001EDA 86 F0            [24] 5690 	mov	b,@r0
      001EDC 08               [12] 5691 	inc	r0
      001EDD E6               [12] 5692 	mov	a,@r0
      001EDE 12r00r00         [24] 5693 	lcall	__modslong
      001EE1 AC 82            [24] 5694 	mov	r4,dpl
      001EE3 AD 83            [24] 5695 	mov	r5,dph
      001EE5 AE F0            [24] 5696 	mov	r6,b
      001EE7 FF               [12] 5697 	mov	r7,a
      001EE8 E5 81            [12] 5698 	mov	a,sp
      001EEA 24 FC            [12] 5699 	add	a,#0xfc
      001EEC F5 81            [12] 5700 	mov	sp,a
      001EEE E5*00            [12] 5701 	mov	a,_bp
      001EF0 24 19            [12] 5702 	add	a,#0x19
      001EF2 F8               [12] 5703 	mov	r0,a
      001EF3 A6 04            [24] 5704 	mov	@r0,ar4
      001EF5 08               [12] 5705 	inc	r0
      001EF6 A6 05            [24] 5706 	mov	@r0,ar5
      001EF8 08               [12] 5707 	inc	r0
      001EF9 A6 06            [24] 5708 	mov	@r0,ar6
      001EFB 08               [12] 5709 	inc	r0
      001EFC A6 07            [24] 5710 	mov	@r0,ar7
      001EFE 80 5F            [24] 5711 	sjmp	00192$
      001F00                       5712 00191$:
                                   5713 ;	calc.c:272: else d1 = (unsigned long)d1 % (unsigned long)d0;
      001F00 E5*00            [12] 5714 	mov	a,_bp
      001F02 24 19            [12] 5715 	add	a,#0x19
      001F04 F8               [12] 5716 	mov	r0,a
      001F05 E5*00            [12] 5717 	mov	a,_bp
      001F07 24 07            [12] 5718 	add	a,#0x07
      001F09 F9               [12] 5719 	mov	r1,a
      001F0A E6               [12] 5720 	mov	a,@r0
      001F0B F7               [12] 5721 	mov	@r1,a
      001F0C 08               [12] 5722 	inc	r0
      001F0D 09               [12] 5723 	inc	r1
      001F0E E6               [12] 5724 	mov	a,@r0
      001F0F F7               [12] 5725 	mov	@r1,a
      001F10 08               [12] 5726 	inc	r0
      001F11 09               [12] 5727 	inc	r1
      001F12 E6               [12] 5728 	mov	a,@r0
      001F13 F7               [12] 5729 	mov	@r1,a
      001F14 08               [12] 5730 	inc	r0
      001F15 09               [12] 5731 	inc	r1
      001F16 E6               [12] 5732 	mov	a,@r0
      001F17 F7               [12] 5733 	mov	@r1,a
      001F18 E5*00            [12] 5734 	mov	a,_bp
      001F1A 24 15            [12] 5735 	add	a,#0x15
      001F1C F8               [12] 5736 	mov	r0,a
      001F1D 86 02            [24] 5737 	mov	ar2,@r0
      001F1F 08               [12] 5738 	inc	r0
      001F20 86 03            [24] 5739 	mov	ar3,@r0
      001F22 08               [12] 5740 	inc	r0
      001F23 86 06            [24] 5741 	mov	ar6,@r0
      001F25 08               [12] 5742 	inc	r0
      001F26 86 07            [24] 5743 	mov	ar7,@r0
      001F28 C0 02            [24] 5744 	push	ar2
      001F2A C0 03            [24] 5745 	push	ar3
      001F2C C0 06            [24] 5746 	push	ar6
      001F2E C0 07            [24] 5747 	push	ar7
      001F30 E5*00            [12] 5748 	mov	a,_bp
      001F32 24 07            [12] 5749 	add	a,#0x07
      001F34 F8               [12] 5750 	mov	r0,a
      001F35 86 82            [24] 5751 	mov	dpl,@r0
      001F37 08               [12] 5752 	inc	r0
      001F38 86 83            [24] 5753 	mov	dph,@r0
      001F3A 08               [12] 5754 	inc	r0
      001F3B 86 F0            [24] 5755 	mov	b,@r0
      001F3D 08               [12] 5756 	inc	r0
      001F3E E6               [12] 5757 	mov	a,@r0
      001F3F 12r00r00         [24] 5758 	lcall	__modulong
      001F42 AC 82            [24] 5759 	mov	r4,dpl
      001F44 AD 83            [24] 5760 	mov	r5,dph
      001F46 AE F0            [24] 5761 	mov	r6,b
      001F48 FF               [12] 5762 	mov	r7,a
      001F49 E5 81            [12] 5763 	mov	a,sp
      001F4B 24 FC            [12] 5764 	add	a,#0xfc
      001F4D F5 81            [12] 5765 	mov	sp,a
      001F4F E5*00            [12] 5766 	mov	a,_bp
      001F51 24 19            [12] 5767 	add	a,#0x19
      001F53 F8               [12] 5768 	mov	r0,a
      001F54 A6 04            [24] 5769 	mov	@r0,ar4
      001F56 08               [12] 5770 	inc	r0
      001F57 A6 05            [24] 5771 	mov	@r0,ar5
      001F59 08               [12] 5772 	inc	r0
      001F5A A6 06            [24] 5773 	mov	@r0,ar6
      001F5C 08               [12] 5774 	inc	r0
      001F5D A6 07            [24] 5775 	mov	@r0,ar7
      001F5F                       5776 00192$:
                                   5777 ;	calc.c:273: (void)stack_push(ctx->ps, d1);
      001F5F E5*00            [12] 5778 	mov	a,_bp
      001F61 24 0E            [12] 5779 	add	a,#0x0e
      001F63 F8               [12] 5780 	mov	r0,a
      001F64 86 82            [24] 5781 	mov	dpl,@r0
      001F66 08               [12] 5782 	inc	r0
      001F67 86 83            [24] 5783 	mov	dph,@r0
      001F69 08               [12] 5784 	inc	r0
      001F6A 86 F0            [24] 5785 	mov	b,@r0
      001F6C 12r00r00         [24] 5786 	lcall	__gptrget
      001F6F FD               [12] 5787 	mov	r5,a
      001F70 A3               [24] 5788 	inc	dptr
      001F71 12r00r00         [24] 5789 	lcall	__gptrget
      001F74 FE               [12] 5790 	mov	r6,a
      001F75 A3               [24] 5791 	inc	dptr
      001F76 12r00r00         [24] 5792 	lcall	__gptrget
      001F79 FF               [12] 5793 	mov	r7,a
      001F7A E5*00            [12] 5794 	mov	a,_bp
      001F7C 24 19            [12] 5795 	add	a,#0x19
      001F7E F8               [12] 5796 	mov	r0,a
      001F7F E6               [12] 5797 	mov	a,@r0
      001F80 C0 E0            [24] 5798 	push	acc
      001F82 08               [12] 5799 	inc	r0
      001F83 E6               [12] 5800 	mov	a,@r0
      001F84 C0 E0            [24] 5801 	push	acc
      001F86 08               [12] 5802 	inc	r0
      001F87 E6               [12] 5803 	mov	a,@r0
      001F88 C0 E0            [24] 5804 	push	acc
      001F8A 08               [12] 5805 	inc	r0
      001F8B E6               [12] 5806 	mov	a,@r0
      001F8C C0 E0            [24] 5807 	push	acc
      001F8E 8D 82            [24] 5808 	mov	dpl,r5
      001F90 8E 83            [24] 5809 	mov	dph,r6
      001F92 8F F0            [24] 5810 	mov	b,r7
      001F94 12r00r00         [24] 5811 	lcall	_stack_push
      001F97 E5 81            [12] 5812 	mov	a,sp
      001F99 24 FC            [12] 5813 	add	a,#0xfc
      001F9B F5 81            [12] 5814 	mov	sp,a
                                   5815 ;	calc.c:275: break;
      001F9D 02r2Ar46         [24] 5816 	ljmp	00249$
                                   5817 ;	calc.c:276: case '&':
      001FA0                       5818 00202$:
                                   5819 ;	calc.c:277: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      001FA0 E5*00            [12] 5820 	mov	a,_bp
      001FA2 24 15            [12] 5821 	add	a,#0x15
      001FA4 FF               [12] 5822 	mov	r7,a
      001FA5 E5*00            [12] 5823 	mov	a,_bp
      001FA7 24 0E            [12] 5824 	add	a,#0x0e
      001FA9 F8               [12] 5825 	mov	r0,a
      001FAA A6 07            [24] 5826 	mov	@r0,ar7
      001FAC 08               [12] 5827 	inc	r0
      001FAD 76 00            [12] 5828 	mov	@r0,#0x00
      001FAF 08               [12] 5829 	inc	r0
      001FB0 76 40            [12] 5830 	mov	@r0,#0x40
      001FB2 E5*00            [12] 5831 	mov	a,_bp
      001FB4 24 12            [12] 5832 	add	a,#0x12
      001FB6 F8               [12] 5833 	mov	r0,a
      001FB7 74 13            [12] 5834 	mov	a,#0x13
      001FB9 26               [12] 5835 	add	a,@r0
      001FBA FA               [12] 5836 	mov	r2,a
      001FBB 74 40            [12] 5837 	mov	a,#0x40
      001FBD 08               [12] 5838 	inc	r0
      001FBE 36               [12] 5839 	addc	a,@r0
      001FBF FB               [12] 5840 	mov	r3,a
      001FC0 08               [12] 5841 	inc	r0
      001FC1 86 04            [24] 5842 	mov	ar4,@r0
      001FC3 8A 82            [24] 5843 	mov	dpl,r2
      001FC5 8B 83            [24] 5844 	mov	dph,r3
      001FC7 8C F0            [24] 5845 	mov	b,r4
      001FC9 12r00r00         [24] 5846 	lcall	__gptrget
      001FCC FD               [12] 5847 	mov	r5,a
      001FCD A3               [24] 5848 	inc	dptr
      001FCE 12r00r00         [24] 5849 	lcall	__gptrget
      001FD1 FE               [12] 5850 	mov	r6,a
      001FD2 A3               [24] 5851 	inc	dptr
      001FD3 12r00r00         [24] 5852 	lcall	__gptrget
      001FD6 FF               [12] 5853 	mov	r7,a
      001FD7 C0 04            [24] 5854 	push	ar4
      001FD9 C0 03            [24] 5855 	push	ar3
      001FDB C0 02            [24] 5856 	push	ar2
      001FDD E5*00            [12] 5857 	mov	a,_bp
      001FDF 24 0E            [12] 5858 	add	a,#0x0e
      001FE1 F8               [12] 5859 	mov	r0,a
      001FE2 E6               [12] 5860 	mov	a,@r0
      001FE3 C0 E0            [24] 5861 	push	acc
      001FE5 08               [12] 5862 	inc	r0
      001FE6 E6               [12] 5863 	mov	a,@r0
      001FE7 C0 E0            [24] 5864 	push	acc
      001FE9 08               [12] 5865 	inc	r0
      001FEA E6               [12] 5866 	mov	a,@r0
      001FEB C0 E0            [24] 5867 	push	acc
      001FED 8D 82            [24] 5868 	mov	dpl,r5
      001FEF 8E 83            [24] 5869 	mov	dph,r6
      001FF1 8F F0            [24] 5870 	mov	b,r7
      001FF3 12r00r00         [24] 5871 	lcall	_stack_pop
      001FF6 AE 82            [24] 5872 	mov	r6,dpl
      001FF8 AF 83            [24] 5873 	mov	r7,dph
      001FFA 15 81            [12] 5874 	dec	sp
      001FFC 15 81            [12] 5875 	dec	sp
      001FFE 15 81            [12] 5876 	dec	sp
      002000 D0 02            [24] 5877 	pop	ar2
      002002 D0 03            [24] 5878 	pop	ar3
      002004 D0 04            [24] 5879 	pop	ar4
      002006 EE               [12] 5880 	mov	a,r6
      002007 4F               [12] 5881 	orl	a,r7
      002008 70 25            [24] 5882 	jnz	00207$
      00200A 7Dr44            [12] 5883 	mov	r5,#___str_10
      00200C 7Cs00            [12] 5884 	mov	r4,#(___str_10 >> 8)
      00200E 7B 80            [12] 5885 	mov	r3,#0x80
                                   5886 ;	calc.c:51: return;
      002010                       5887 00460$:
                                   5888 ;	calc.c:49: for (; *s; s++) putchar(*s);
      002010 8D 82            [24] 5889 	mov	dpl,r5
      002012 8C 83            [24] 5890 	mov	dph,r4
      002014 8B F0            [24] 5891 	mov	b,r3
      002016 12r00r00         [24] 5892 	lcall	__gptrget
      002019 FF               [12] 5893 	mov	r7,a
      00201A 70 03            [24] 5894 	jnz	01364$
      00201C 02r2Ar46         [24] 5895 	ljmp	00249$
      00201F                       5896 01364$:
      00201F 7E 00            [12] 5897 	mov	r6,#0x00
      002021 8F 82            [24] 5898 	mov	dpl,r7
      002023 8E 83            [24] 5899 	mov	dph,r6
      002025 12r00r00         [24] 5900 	lcall	_putchar
      002028 0D               [12] 5901 	inc	r5
                                   5902 ;	calc.c:277: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      002029 BD 00 E4         [24] 5903 	cjne	r5,#0x00,00460$
      00202C 0C               [12] 5904 	inc	r4
      00202D 80 E1            [24] 5905 	sjmp	00460$
      00202F                       5906 00207$:
                                   5907 ;	calc.c:278: else if (!stack_pop(ctx->ps, &d1)) {
      00202F E5*00            [12] 5908 	mov	a,_bp
      002031 24 19            [12] 5909 	add	a,#0x19
      002033 FF               [12] 5910 	mov	r7,a
      002034 E5*00            [12] 5911 	mov	a,_bp
      002036 24 0E            [12] 5912 	add	a,#0x0e
      002038 F8               [12] 5913 	mov	r0,a
      002039 A6 07            [24] 5914 	mov	@r0,ar7
      00203B 08               [12] 5915 	inc	r0
      00203C 76 00            [12] 5916 	mov	@r0,#0x00
      00203E 08               [12] 5917 	inc	r0
      00203F 76 40            [12] 5918 	mov	@r0,#0x40
      002041 8A 82            [24] 5919 	mov	dpl,r2
      002043 8B 83            [24] 5920 	mov	dph,r3
      002045 8C F0            [24] 5921 	mov	b,r4
      002047 12r00r00         [24] 5922 	lcall	__gptrget
      00204A FD               [12] 5923 	mov	r5,a
      00204B A3               [24] 5924 	inc	dptr
      00204C 12r00r00         [24] 5925 	lcall	__gptrget
      00204F FE               [12] 5926 	mov	r6,a
      002050 A3               [24] 5927 	inc	dptr
      002051 12r00r00         [24] 5928 	lcall	__gptrget
      002054 FF               [12] 5929 	mov	r7,a
      002055 C0 04            [24] 5930 	push	ar4
      002057 C0 03            [24] 5931 	push	ar3
      002059 C0 02            [24] 5932 	push	ar2
      00205B E5*00            [12] 5933 	mov	a,_bp
      00205D 24 0E            [12] 5934 	add	a,#0x0e
      00205F F8               [12] 5935 	mov	r0,a
      002060 E6               [12] 5936 	mov	a,@r0
      002061 C0 E0            [24] 5937 	push	acc
      002063 08               [12] 5938 	inc	r0
      002064 E6               [12] 5939 	mov	a,@r0
      002065 C0 E0            [24] 5940 	push	acc
      002067 08               [12] 5941 	inc	r0
      002068 E6               [12] 5942 	mov	a,@r0
      002069 C0 E0            [24] 5943 	push	acc
      00206B 8D 82            [24] 5944 	mov	dpl,r5
      00206D 8E 83            [24] 5945 	mov	dph,r6
      00206F 8F F0            [24] 5946 	mov	b,r7
      002071 12r00r00         [24] 5947 	lcall	_stack_pop
      002074 AE 82            [24] 5948 	mov	r6,dpl
      002076 AF 83            [24] 5949 	mov	r7,dph
      002078 15 81            [12] 5950 	dec	sp
      00207A 15 81            [12] 5951 	dec	sp
      00207C 15 81            [12] 5952 	dec	sp
      00207E D0 02            [24] 5953 	pop	ar2
      002080 D0 03            [24] 5954 	pop	ar3
      002082 D0 04            [24] 5955 	pop	ar4
      002084 EE               [12] 5956 	mov	a,r6
      002085 4F               [12] 5957 	orl	a,r7
      002086 70 5C            [24] 5958 	jnz	00204$
                                   5959 ;	calc.c:279: (void)stack_push(ctx->ps, d0);
      002088 8A 82            [24] 5960 	mov	dpl,r2
      00208A 8B 83            [24] 5961 	mov	dph,r3
      00208C 8C F0            [24] 5962 	mov	b,r4
      00208E 12r00r00         [24] 5963 	lcall	__gptrget
      002091 FD               [12] 5964 	mov	r5,a
      002092 A3               [24] 5965 	inc	dptr
      002093 12r00r00         [24] 5966 	lcall	__gptrget
      002096 FE               [12] 5967 	mov	r6,a
      002097 A3               [24] 5968 	inc	dptr
      002098 12r00r00         [24] 5969 	lcall	__gptrget
      00209B FF               [12] 5970 	mov	r7,a
      00209C E5*00            [12] 5971 	mov	a,_bp
      00209E 24 15            [12] 5972 	add	a,#0x15
      0020A0 F8               [12] 5973 	mov	r0,a
      0020A1 E6               [12] 5974 	mov	a,@r0
      0020A2 C0 E0            [24] 5975 	push	acc
      0020A4 08               [12] 5976 	inc	r0
      0020A5 E6               [12] 5977 	mov	a,@r0
      0020A6 C0 E0            [24] 5978 	push	acc
      0020A8 08               [12] 5979 	inc	r0
      0020A9 E6               [12] 5980 	mov	a,@r0
      0020AA C0 E0            [24] 5981 	push	acc
      0020AC 08               [12] 5982 	inc	r0
      0020AD E6               [12] 5983 	mov	a,@r0
      0020AE C0 E0            [24] 5984 	push	acc
      0020B0 8D 82            [24] 5985 	mov	dpl,r5
      0020B2 8E 83            [24] 5986 	mov	dph,r6
      0020B4 8F F0            [24] 5987 	mov	b,r7
      0020B6 12r00r00         [24] 5988 	lcall	_stack_push
      0020B9 E5 81            [12] 5989 	mov	a,sp
      0020BB 24 FC            [12] 5990 	add	a,#0xfc
      0020BD F5 81            [12] 5991 	mov	sp,a
                                   5992 ;	calc.c:280: printstr("\r\nstack underflow\r\n");
      0020BF 7Dr44            [12] 5993 	mov	r5,#___str_10
      0020C1 7Cs00            [12] 5994 	mov	r4,#(___str_10 >> 8)
      0020C3 7B 80            [12] 5995 	mov	r3,#0x80
                                   5996 ;	calc.c:51: return;
      0020C5                       5997 00463$:
                                   5998 ;	calc.c:49: for (; *s; s++) putchar(*s);
      0020C5 8D 82            [24] 5999 	mov	dpl,r5
      0020C7 8C 83            [24] 6000 	mov	dph,r4
      0020C9 8B F0            [24] 6001 	mov	b,r3
      0020CB 12r00r00         [24] 6002 	lcall	__gptrget
      0020CE FF               [12] 6003 	mov	r7,a
      0020CF 70 03            [24] 6004 	jnz	01367$
      0020D1 02r2Ar46         [24] 6005 	ljmp	00249$
      0020D4                       6006 01367$:
      0020D4 7E 00            [12] 6007 	mov	r6,#0x00
      0020D6 8F 82            [24] 6008 	mov	dpl,r7
      0020D8 8E 83            [24] 6009 	mov	dph,r6
      0020DA 12r00r00         [24] 6010 	lcall	_putchar
      0020DD 0D               [12] 6011 	inc	r5
                                   6012 ;	calc.c:280: printstr("\r\nstack underflow\r\n");
      0020DE BD 00 E4         [24] 6013 	cjne	r5,#0x00,00463$
      0020E1 0C               [12] 6014 	inc	r4
      0020E2 80 E1            [24] 6015 	sjmp	00463$
      0020E4                       6016 00204$:
                                   6017 ;	calc.c:282: d1 &= d0;
      0020E4 E5*00            [12] 6018 	mov	a,_bp
      0020E6 24 19            [12] 6019 	add	a,#0x19
      0020E8 F8               [12] 6020 	mov	r0,a
      0020E9 E5*00            [12] 6021 	mov	a,_bp
      0020EB 24 15            [12] 6022 	add	a,#0x15
      0020ED F9               [12] 6023 	mov	r1,a
      0020EE E7               [12] 6024 	mov	a,@r1
      0020EF 56               [12] 6025 	anl	a,@r0
      0020F0 F6               [12] 6026 	mov	@r0,a
      0020F1 09               [12] 6027 	inc	r1
      0020F2 E7               [12] 6028 	mov	a,@r1
      0020F3 08               [12] 6029 	inc	r0
      0020F4 56               [12] 6030 	anl	a,@r0
      0020F5 F6               [12] 6031 	mov	@r0,a
      0020F6 09               [12] 6032 	inc	r1
      0020F7 E7               [12] 6033 	mov	a,@r1
      0020F8 08               [12] 6034 	inc	r0
      0020F9 56               [12] 6035 	anl	a,@r0
      0020FA F6               [12] 6036 	mov	@r0,a
      0020FB 09               [12] 6037 	inc	r1
      0020FC E7               [12] 6038 	mov	a,@r1
      0020FD 08               [12] 6039 	inc	r0
      0020FE 56               [12] 6040 	anl	a,@r0
      0020FF F6               [12] 6041 	mov	@r0,a
                                   6042 ;	calc.c:283: (void)stack_push(ctx->ps, d1);
      002100 8A 82            [24] 6043 	mov	dpl,r2
      002102 8B 83            [24] 6044 	mov	dph,r3
      002104 8C F0            [24] 6045 	mov	b,r4
      002106 12r00r00         [24] 6046 	lcall	__gptrget
      002109 FA               [12] 6047 	mov	r2,a
      00210A A3               [24] 6048 	inc	dptr
      00210B 12r00r00         [24] 6049 	lcall	__gptrget
      00210E FB               [12] 6050 	mov	r3,a
      00210F A3               [24] 6051 	inc	dptr
      002110 12r00r00         [24] 6052 	lcall	__gptrget
      002113 FC               [12] 6053 	mov	r4,a
      002114 E5*00            [12] 6054 	mov	a,_bp
      002116 24 19            [12] 6055 	add	a,#0x19
      002118 F8               [12] 6056 	mov	r0,a
      002119 E6               [12] 6057 	mov	a,@r0
      00211A C0 E0            [24] 6058 	push	acc
      00211C 08               [12] 6059 	inc	r0
      00211D E6               [12] 6060 	mov	a,@r0
      00211E C0 E0            [24] 6061 	push	acc
      002120 08               [12] 6062 	inc	r0
      002121 E6               [12] 6063 	mov	a,@r0
      002122 C0 E0            [24] 6064 	push	acc
      002124 08               [12] 6065 	inc	r0
      002125 E6               [12] 6066 	mov	a,@r0
      002126 C0 E0            [24] 6067 	push	acc
      002128 8A 82            [24] 6068 	mov	dpl,r2
      00212A 8B 83            [24] 6069 	mov	dph,r3
      00212C 8C F0            [24] 6070 	mov	b,r4
      00212E 12r00r00         [24] 6071 	lcall	_stack_push
      002131 E5 81            [12] 6072 	mov	a,sp
      002133 24 FC            [12] 6073 	add	a,#0xfc
      002135 F5 81            [12] 6074 	mov	sp,a
                                   6075 ;	calc.c:285: break;
      002137 02r2Ar46         [24] 6076 	ljmp	00249$
                                   6077 ;	calc.c:286: case '|':
      00213A                       6078 00209$:
                                   6079 ;	calc.c:287: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      00213A E5*00            [12] 6080 	mov	a,_bp
      00213C 24 15            [12] 6081 	add	a,#0x15
      00213E FF               [12] 6082 	mov	r7,a
      00213F E5*00            [12] 6083 	mov	a,_bp
      002141 24 0E            [12] 6084 	add	a,#0x0e
      002143 F8               [12] 6085 	mov	r0,a
      002144 A6 07            [24] 6086 	mov	@r0,ar7
      002146 08               [12] 6087 	inc	r0
      002147 76 00            [12] 6088 	mov	@r0,#0x00
      002149 08               [12] 6089 	inc	r0
      00214A 76 40            [12] 6090 	mov	@r0,#0x40
      00214C E5*00            [12] 6091 	mov	a,_bp
      00214E 24 12            [12] 6092 	add	a,#0x12
      002150 F8               [12] 6093 	mov	r0,a
      002151 74 13            [12] 6094 	mov	a,#0x13
      002153 26               [12] 6095 	add	a,@r0
      002154 FA               [12] 6096 	mov	r2,a
      002155 74 40            [12] 6097 	mov	a,#0x40
      002157 08               [12] 6098 	inc	r0
      002158 36               [12] 6099 	addc	a,@r0
      002159 FB               [12] 6100 	mov	r3,a
      00215A 08               [12] 6101 	inc	r0
      00215B 86 04            [24] 6102 	mov	ar4,@r0
      00215D 8A 82            [24] 6103 	mov	dpl,r2
      00215F 8B 83            [24] 6104 	mov	dph,r3
      002161 8C F0            [24] 6105 	mov	b,r4
      002163 12r00r00         [24] 6106 	lcall	__gptrget
      002166 FD               [12] 6107 	mov	r5,a
      002167 A3               [24] 6108 	inc	dptr
      002168 12r00r00         [24] 6109 	lcall	__gptrget
      00216B FE               [12] 6110 	mov	r6,a
      00216C A3               [24] 6111 	inc	dptr
      00216D 12r00r00         [24] 6112 	lcall	__gptrget
      002170 FF               [12] 6113 	mov	r7,a
      002171 C0 04            [24] 6114 	push	ar4
      002173 C0 03            [24] 6115 	push	ar3
      002175 C0 02            [24] 6116 	push	ar2
      002177 E5*00            [12] 6117 	mov	a,_bp
      002179 24 0E            [12] 6118 	add	a,#0x0e
      00217B F8               [12] 6119 	mov	r0,a
      00217C E6               [12] 6120 	mov	a,@r0
      00217D C0 E0            [24] 6121 	push	acc
      00217F 08               [12] 6122 	inc	r0
      002180 E6               [12] 6123 	mov	a,@r0
      002181 C0 E0            [24] 6124 	push	acc
      002183 08               [12] 6125 	inc	r0
      002184 E6               [12] 6126 	mov	a,@r0
      002185 C0 E0            [24] 6127 	push	acc
      002187 8D 82            [24] 6128 	mov	dpl,r5
      002189 8E 83            [24] 6129 	mov	dph,r6
      00218B 8F F0            [24] 6130 	mov	b,r7
      00218D 12r00r00         [24] 6131 	lcall	_stack_pop
      002190 AE 82            [24] 6132 	mov	r6,dpl
      002192 AF 83            [24] 6133 	mov	r7,dph
      002194 15 81            [12] 6134 	dec	sp
      002196 15 81            [12] 6135 	dec	sp
      002198 15 81            [12] 6136 	dec	sp
      00219A D0 02            [24] 6137 	pop	ar2
      00219C D0 03            [24] 6138 	pop	ar3
      00219E D0 04            [24] 6139 	pop	ar4
      0021A0 EE               [12] 6140 	mov	a,r6
      0021A1 4F               [12] 6141 	orl	a,r7
      0021A2 70 25            [24] 6142 	jnz	00214$
      0021A4 7Dr44            [12] 6143 	mov	r5,#___str_10
      0021A6 7Cs00            [12] 6144 	mov	r4,#(___str_10 >> 8)
      0021A8 7B 80            [12] 6145 	mov	r3,#0x80
                                   6146 ;	calc.c:51: return;
      0021AA                       6147 00466$:
                                   6148 ;	calc.c:49: for (; *s; s++) putchar(*s);
      0021AA 8D 82            [24] 6149 	mov	dpl,r5
      0021AC 8C 83            [24] 6150 	mov	dph,r4
      0021AE 8B F0            [24] 6151 	mov	b,r3
      0021B0 12r00r00         [24] 6152 	lcall	__gptrget
      0021B3 FF               [12] 6153 	mov	r7,a
      0021B4 70 03            [24] 6154 	jnz	01370$
      0021B6 02r2Ar46         [24] 6155 	ljmp	00249$
      0021B9                       6156 01370$:
      0021B9 7E 00            [12] 6157 	mov	r6,#0x00
      0021BB 8F 82            [24] 6158 	mov	dpl,r7
      0021BD 8E 83            [24] 6159 	mov	dph,r6
      0021BF 12r00r00         [24] 6160 	lcall	_putchar
      0021C2 0D               [12] 6161 	inc	r5
                                   6162 ;	calc.c:287: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      0021C3 BD 00 E4         [24] 6163 	cjne	r5,#0x00,00466$
      0021C6 0C               [12] 6164 	inc	r4
      0021C7 80 E1            [24] 6165 	sjmp	00466$
      0021C9                       6166 00214$:
                                   6167 ;	calc.c:288: else if (!stack_pop(ctx->ps, &d1)) {
      0021C9 E5*00            [12] 6168 	mov	a,_bp
      0021CB 24 19            [12] 6169 	add	a,#0x19
      0021CD FF               [12] 6170 	mov	r7,a
      0021CE E5*00            [12] 6171 	mov	a,_bp
      0021D0 24 0E            [12] 6172 	add	a,#0x0e
      0021D2 F8               [12] 6173 	mov	r0,a
      0021D3 A6 07            [24] 6174 	mov	@r0,ar7
      0021D5 08               [12] 6175 	inc	r0
      0021D6 76 00            [12] 6176 	mov	@r0,#0x00
      0021D8 08               [12] 6177 	inc	r0
      0021D9 76 40            [12] 6178 	mov	@r0,#0x40
      0021DB 8A 82            [24] 6179 	mov	dpl,r2
      0021DD 8B 83            [24] 6180 	mov	dph,r3
      0021DF 8C F0            [24] 6181 	mov	b,r4
      0021E1 12r00r00         [24] 6182 	lcall	__gptrget
      0021E4 FD               [12] 6183 	mov	r5,a
      0021E5 A3               [24] 6184 	inc	dptr
      0021E6 12r00r00         [24] 6185 	lcall	__gptrget
      0021E9 FE               [12] 6186 	mov	r6,a
      0021EA A3               [24] 6187 	inc	dptr
      0021EB 12r00r00         [24] 6188 	lcall	__gptrget
      0021EE FF               [12] 6189 	mov	r7,a
      0021EF C0 04            [24] 6190 	push	ar4
      0021F1 C0 03            [24] 6191 	push	ar3
      0021F3 C0 02            [24] 6192 	push	ar2
      0021F5 E5*00            [12] 6193 	mov	a,_bp
      0021F7 24 0E            [12] 6194 	add	a,#0x0e
      0021F9 F8               [12] 6195 	mov	r0,a
      0021FA E6               [12] 6196 	mov	a,@r0
      0021FB C0 E0            [24] 6197 	push	acc
      0021FD 08               [12] 6198 	inc	r0
      0021FE E6               [12] 6199 	mov	a,@r0
      0021FF C0 E0            [24] 6200 	push	acc
      002201 08               [12] 6201 	inc	r0
      002202 E6               [12] 6202 	mov	a,@r0
      002203 C0 E0            [24] 6203 	push	acc
      002205 8D 82            [24] 6204 	mov	dpl,r5
      002207 8E 83            [24] 6205 	mov	dph,r6
      002209 8F F0            [24] 6206 	mov	b,r7
      00220B 12r00r00         [24] 6207 	lcall	_stack_pop
      00220E AE 82            [24] 6208 	mov	r6,dpl
      002210 AF 83            [24] 6209 	mov	r7,dph
      002212 15 81            [12] 6210 	dec	sp
      002214 15 81            [12] 6211 	dec	sp
      002216 15 81            [12] 6212 	dec	sp
      002218 D0 02            [24] 6213 	pop	ar2
      00221A D0 03            [24] 6214 	pop	ar3
      00221C D0 04            [24] 6215 	pop	ar4
      00221E EE               [12] 6216 	mov	a,r6
      00221F 4F               [12] 6217 	orl	a,r7
      002220 70 5C            [24] 6218 	jnz	00211$
                                   6219 ;	calc.c:289: (void)stack_push(ctx->ps, d0);
      002222 8A 82            [24] 6220 	mov	dpl,r2
      002224 8B 83            [24] 6221 	mov	dph,r3
      002226 8C F0            [24] 6222 	mov	b,r4
      002228 12r00r00         [24] 6223 	lcall	__gptrget
      00222B FD               [12] 6224 	mov	r5,a
      00222C A3               [24] 6225 	inc	dptr
      00222D 12r00r00         [24] 6226 	lcall	__gptrget
      002230 FE               [12] 6227 	mov	r6,a
      002231 A3               [24] 6228 	inc	dptr
      002232 12r00r00         [24] 6229 	lcall	__gptrget
      002235 FF               [12] 6230 	mov	r7,a
      002236 E5*00            [12] 6231 	mov	a,_bp
      002238 24 15            [12] 6232 	add	a,#0x15
      00223A F8               [12] 6233 	mov	r0,a
      00223B E6               [12] 6234 	mov	a,@r0
      00223C C0 E0            [24] 6235 	push	acc
      00223E 08               [12] 6236 	inc	r0
      00223F E6               [12] 6237 	mov	a,@r0
      002240 C0 E0            [24] 6238 	push	acc
      002242 08               [12] 6239 	inc	r0
      002243 E6               [12] 6240 	mov	a,@r0
      002244 C0 E0            [24] 6241 	push	acc
      002246 08               [12] 6242 	inc	r0
      002247 E6               [12] 6243 	mov	a,@r0
      002248 C0 E0            [24] 6244 	push	acc
      00224A 8D 82            [24] 6245 	mov	dpl,r5
      00224C 8E 83            [24] 6246 	mov	dph,r6
      00224E 8F F0            [24] 6247 	mov	b,r7
      002250 12r00r00         [24] 6248 	lcall	_stack_push
      002253 E5 81            [12] 6249 	mov	a,sp
      002255 24 FC            [12] 6250 	add	a,#0xfc
      002257 F5 81            [12] 6251 	mov	sp,a
                                   6252 ;	calc.c:290: printstr("\r\nstack underflow\r\n");
      002259 7Dr44            [12] 6253 	mov	r5,#___str_10
      00225B 7Cs00            [12] 6254 	mov	r4,#(___str_10 >> 8)
      00225D 7B 80            [12] 6255 	mov	r3,#0x80
                                   6256 ;	calc.c:51: return;
      00225F                       6257 00469$:
                                   6258 ;	calc.c:49: for (; *s; s++) putchar(*s);
      00225F 8D 82            [24] 6259 	mov	dpl,r5
      002261 8C 83            [24] 6260 	mov	dph,r4
      002263 8B F0            [24] 6261 	mov	b,r3
      002265 12r00r00         [24] 6262 	lcall	__gptrget
      002268 FF               [12] 6263 	mov	r7,a
      002269 70 03            [24] 6264 	jnz	01373$
      00226B 02r2Ar46         [24] 6265 	ljmp	00249$
      00226E                       6266 01373$:
      00226E 7E 00            [12] 6267 	mov	r6,#0x00
      002270 8F 82            [24] 6268 	mov	dpl,r7
      002272 8E 83            [24] 6269 	mov	dph,r6
      002274 12r00r00         [24] 6270 	lcall	_putchar
      002277 0D               [12] 6271 	inc	r5
                                   6272 ;	calc.c:290: printstr("\r\nstack underflow\r\n");
      002278 BD 00 E4         [24] 6273 	cjne	r5,#0x00,00469$
      00227B 0C               [12] 6274 	inc	r4
      00227C 80 E1            [24] 6275 	sjmp	00469$
      00227E                       6276 00211$:
                                   6277 ;	calc.c:292: d1 |= d0;
      00227E E5*00            [12] 6278 	mov	a,_bp
      002280 24 19            [12] 6279 	add	a,#0x19
      002282 F8               [12] 6280 	mov	r0,a
      002283 E5*00            [12] 6281 	mov	a,_bp
      002285 24 15            [12] 6282 	add	a,#0x15
      002287 F9               [12] 6283 	mov	r1,a
      002288 E7               [12] 6284 	mov	a,@r1
      002289 46               [12] 6285 	orl	a,@r0
      00228A F6               [12] 6286 	mov	@r0,a
      00228B 09               [12] 6287 	inc	r1
      00228C E7               [12] 6288 	mov	a,@r1
      00228D 08               [12] 6289 	inc	r0
      00228E 46               [12] 6290 	orl	a,@r0
      00228F F6               [12] 6291 	mov	@r0,a
      002290 09               [12] 6292 	inc	r1
      002291 E7               [12] 6293 	mov	a,@r1
      002292 08               [12] 6294 	inc	r0
      002293 46               [12] 6295 	orl	a,@r0
      002294 F6               [12] 6296 	mov	@r0,a
      002295 09               [12] 6297 	inc	r1
      002296 E7               [12] 6298 	mov	a,@r1
      002297 08               [12] 6299 	inc	r0
      002298 46               [12] 6300 	orl	a,@r0
      002299 F6               [12] 6301 	mov	@r0,a
                                   6302 ;	calc.c:293: (void)stack_push(ctx->ps, d1);
      00229A 8A 82            [24] 6303 	mov	dpl,r2
      00229C 8B 83            [24] 6304 	mov	dph,r3
      00229E 8C F0            [24] 6305 	mov	b,r4
      0022A0 12r00r00         [24] 6306 	lcall	__gptrget
      0022A3 FA               [12] 6307 	mov	r2,a
      0022A4 A3               [24] 6308 	inc	dptr
      0022A5 12r00r00         [24] 6309 	lcall	__gptrget
      0022A8 FB               [12] 6310 	mov	r3,a
      0022A9 A3               [24] 6311 	inc	dptr
      0022AA 12r00r00         [24] 6312 	lcall	__gptrget
      0022AD FC               [12] 6313 	mov	r4,a
      0022AE E5*00            [12] 6314 	mov	a,_bp
      0022B0 24 19            [12] 6315 	add	a,#0x19
      0022B2 F8               [12] 6316 	mov	r0,a
      0022B3 E6               [12] 6317 	mov	a,@r0
      0022B4 C0 E0            [24] 6318 	push	acc
      0022B6 08               [12] 6319 	inc	r0
      0022B7 E6               [12] 6320 	mov	a,@r0
      0022B8 C0 E0            [24] 6321 	push	acc
      0022BA 08               [12] 6322 	inc	r0
      0022BB E6               [12] 6323 	mov	a,@r0
      0022BC C0 E0            [24] 6324 	push	acc
      0022BE 08               [12] 6325 	inc	r0
      0022BF E6               [12] 6326 	mov	a,@r0
      0022C0 C0 E0            [24] 6327 	push	acc
      0022C2 8A 82            [24] 6328 	mov	dpl,r2
      0022C4 8B 83            [24] 6329 	mov	dph,r3
      0022C6 8C F0            [24] 6330 	mov	b,r4
      0022C8 12r00r00         [24] 6331 	lcall	_stack_push
      0022CB E5 81            [12] 6332 	mov	a,sp
      0022CD 24 FC            [12] 6333 	add	a,#0xfc
      0022CF F5 81            [12] 6334 	mov	sp,a
                                   6335 ;	calc.c:295: break;
      0022D1 02r2Ar46         [24] 6336 	ljmp	00249$
                                   6337 ;	calc.c:296: case '^':
      0022D4                       6338 00216$:
                                   6339 ;	calc.c:297: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      0022D4 E5*00            [12] 6340 	mov	a,_bp
      0022D6 24 15            [12] 6341 	add	a,#0x15
      0022D8 FF               [12] 6342 	mov	r7,a
      0022D9 E5*00            [12] 6343 	mov	a,_bp
      0022DB 24 0E            [12] 6344 	add	a,#0x0e
      0022DD F8               [12] 6345 	mov	r0,a
      0022DE A6 07            [24] 6346 	mov	@r0,ar7
      0022E0 08               [12] 6347 	inc	r0
      0022E1 76 00            [12] 6348 	mov	@r0,#0x00
      0022E3 08               [12] 6349 	inc	r0
      0022E4 76 40            [12] 6350 	mov	@r0,#0x40
      0022E6 E5*00            [12] 6351 	mov	a,_bp
      0022E8 24 12            [12] 6352 	add	a,#0x12
      0022EA F8               [12] 6353 	mov	r0,a
      0022EB 74 13            [12] 6354 	mov	a,#0x13
      0022ED 26               [12] 6355 	add	a,@r0
      0022EE FA               [12] 6356 	mov	r2,a
      0022EF 74 40            [12] 6357 	mov	a,#0x40
      0022F1 08               [12] 6358 	inc	r0
      0022F2 36               [12] 6359 	addc	a,@r0
      0022F3 FB               [12] 6360 	mov	r3,a
      0022F4 08               [12] 6361 	inc	r0
      0022F5 86 04            [24] 6362 	mov	ar4,@r0
      0022F7 8A 82            [24] 6363 	mov	dpl,r2
      0022F9 8B 83            [24] 6364 	mov	dph,r3
      0022FB 8C F0            [24] 6365 	mov	b,r4
      0022FD 12r00r00         [24] 6366 	lcall	__gptrget
      002300 FD               [12] 6367 	mov	r5,a
      002301 A3               [24] 6368 	inc	dptr
      002302 12r00r00         [24] 6369 	lcall	__gptrget
      002305 FE               [12] 6370 	mov	r6,a
      002306 A3               [24] 6371 	inc	dptr
      002307 12r00r00         [24] 6372 	lcall	__gptrget
      00230A FF               [12] 6373 	mov	r7,a
      00230B C0 04            [24] 6374 	push	ar4
      00230D C0 03            [24] 6375 	push	ar3
      00230F C0 02            [24] 6376 	push	ar2
      002311 E5*00            [12] 6377 	mov	a,_bp
      002313 24 0E            [12] 6378 	add	a,#0x0e
      002315 F8               [12] 6379 	mov	r0,a
      002316 E6               [12] 6380 	mov	a,@r0
      002317 C0 E0            [24] 6381 	push	acc
      002319 08               [12] 6382 	inc	r0
      00231A E6               [12] 6383 	mov	a,@r0
      00231B C0 E0            [24] 6384 	push	acc
      00231D 08               [12] 6385 	inc	r0
      00231E E6               [12] 6386 	mov	a,@r0
      00231F C0 E0            [24] 6387 	push	acc
      002321 8D 82            [24] 6388 	mov	dpl,r5
      002323 8E 83            [24] 6389 	mov	dph,r6
      002325 8F F0            [24] 6390 	mov	b,r7
      002327 12r00r00         [24] 6391 	lcall	_stack_pop
      00232A AE 82            [24] 6392 	mov	r6,dpl
      00232C AF 83            [24] 6393 	mov	r7,dph
      00232E 15 81            [12] 6394 	dec	sp
      002330 15 81            [12] 6395 	dec	sp
      002332 15 81            [12] 6396 	dec	sp
      002334 D0 02            [24] 6397 	pop	ar2
      002336 D0 03            [24] 6398 	pop	ar3
      002338 D0 04            [24] 6399 	pop	ar4
      00233A EE               [12] 6400 	mov	a,r6
      00233B 4F               [12] 6401 	orl	a,r7
      00233C 70 25            [24] 6402 	jnz	00221$
      00233E 7Dr44            [12] 6403 	mov	r5,#___str_10
      002340 7Cs00            [12] 6404 	mov	r4,#(___str_10 >> 8)
      002342 7B 80            [12] 6405 	mov	r3,#0x80
                                   6406 ;	calc.c:51: return;
      002344                       6407 00472$:
                                   6408 ;	calc.c:49: for (; *s; s++) putchar(*s);
      002344 8D 82            [24] 6409 	mov	dpl,r5
      002346 8C 83            [24] 6410 	mov	dph,r4
      002348 8B F0            [24] 6411 	mov	b,r3
      00234A 12r00r00         [24] 6412 	lcall	__gptrget
      00234D FF               [12] 6413 	mov	r7,a
      00234E 70 03            [24] 6414 	jnz	01376$
      002350 02r2Ar46         [24] 6415 	ljmp	00249$
      002353                       6416 01376$:
      002353 7E 00            [12] 6417 	mov	r6,#0x00
      002355 8F 82            [24] 6418 	mov	dpl,r7
      002357 8E 83            [24] 6419 	mov	dph,r6
      002359 12r00r00         [24] 6420 	lcall	_putchar
      00235C 0D               [12] 6421 	inc	r5
                                   6422 ;	calc.c:297: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      00235D BD 00 E4         [24] 6423 	cjne	r5,#0x00,00472$
      002360 0C               [12] 6424 	inc	r4
      002361 80 E1            [24] 6425 	sjmp	00472$
      002363                       6426 00221$:
                                   6427 ;	calc.c:298: else if (!stack_pop(ctx->ps, &d1)) {
      002363 E5*00            [12] 6428 	mov	a,_bp
      002365 24 19            [12] 6429 	add	a,#0x19
      002367 FF               [12] 6430 	mov	r7,a
      002368 E5*00            [12] 6431 	mov	a,_bp
      00236A 24 0E            [12] 6432 	add	a,#0x0e
      00236C F8               [12] 6433 	mov	r0,a
      00236D A6 07            [24] 6434 	mov	@r0,ar7
      00236F 08               [12] 6435 	inc	r0
      002370 76 00            [12] 6436 	mov	@r0,#0x00
      002372 08               [12] 6437 	inc	r0
      002373 76 40            [12] 6438 	mov	@r0,#0x40
      002375 8A 82            [24] 6439 	mov	dpl,r2
      002377 8B 83            [24] 6440 	mov	dph,r3
      002379 8C F0            [24] 6441 	mov	b,r4
      00237B 12r00r00         [24] 6442 	lcall	__gptrget
      00237E FD               [12] 6443 	mov	r5,a
      00237F A3               [24] 6444 	inc	dptr
      002380 12r00r00         [24] 6445 	lcall	__gptrget
      002383 FE               [12] 6446 	mov	r6,a
      002384 A3               [24] 6447 	inc	dptr
      002385 12r00r00         [24] 6448 	lcall	__gptrget
      002388 FF               [12] 6449 	mov	r7,a
      002389 C0 04            [24] 6450 	push	ar4
      00238B C0 03            [24] 6451 	push	ar3
      00238D C0 02            [24] 6452 	push	ar2
      00238F E5*00            [12] 6453 	mov	a,_bp
      002391 24 0E            [12] 6454 	add	a,#0x0e
      002393 F8               [12] 6455 	mov	r0,a
      002394 E6               [12] 6456 	mov	a,@r0
      002395 C0 E0            [24] 6457 	push	acc
      002397 08               [12] 6458 	inc	r0
      002398 E6               [12] 6459 	mov	a,@r0
      002399 C0 E0            [24] 6460 	push	acc
      00239B 08               [12] 6461 	inc	r0
      00239C E6               [12] 6462 	mov	a,@r0
      00239D C0 E0            [24] 6463 	push	acc
      00239F 8D 82            [24] 6464 	mov	dpl,r5
      0023A1 8E 83            [24] 6465 	mov	dph,r6
      0023A3 8F F0            [24] 6466 	mov	b,r7
      0023A5 12r00r00         [24] 6467 	lcall	_stack_pop
      0023A8 AE 82            [24] 6468 	mov	r6,dpl
      0023AA AF 83            [24] 6469 	mov	r7,dph
      0023AC 15 81            [12] 6470 	dec	sp
      0023AE 15 81            [12] 6471 	dec	sp
      0023B0 15 81            [12] 6472 	dec	sp
      0023B2 D0 02            [24] 6473 	pop	ar2
      0023B4 D0 03            [24] 6474 	pop	ar3
      0023B6 D0 04            [24] 6475 	pop	ar4
      0023B8 EE               [12] 6476 	mov	a,r6
      0023B9 4F               [12] 6477 	orl	a,r7
      0023BA 70 5C            [24] 6478 	jnz	00218$
                                   6479 ;	calc.c:299: (void)stack_push(ctx->ps, d0);
      0023BC 8A 82            [24] 6480 	mov	dpl,r2
      0023BE 8B 83            [24] 6481 	mov	dph,r3
      0023C0 8C F0            [24] 6482 	mov	b,r4
      0023C2 12r00r00         [24] 6483 	lcall	__gptrget
      0023C5 FD               [12] 6484 	mov	r5,a
      0023C6 A3               [24] 6485 	inc	dptr
      0023C7 12r00r00         [24] 6486 	lcall	__gptrget
      0023CA FE               [12] 6487 	mov	r6,a
      0023CB A3               [24] 6488 	inc	dptr
      0023CC 12r00r00         [24] 6489 	lcall	__gptrget
      0023CF FF               [12] 6490 	mov	r7,a
      0023D0 E5*00            [12] 6491 	mov	a,_bp
      0023D2 24 15            [12] 6492 	add	a,#0x15
      0023D4 F8               [12] 6493 	mov	r0,a
      0023D5 E6               [12] 6494 	mov	a,@r0
      0023D6 C0 E0            [24] 6495 	push	acc
      0023D8 08               [12] 6496 	inc	r0
      0023D9 E6               [12] 6497 	mov	a,@r0
      0023DA C0 E0            [24] 6498 	push	acc
      0023DC 08               [12] 6499 	inc	r0
      0023DD E6               [12] 6500 	mov	a,@r0
      0023DE C0 E0            [24] 6501 	push	acc
      0023E0 08               [12] 6502 	inc	r0
      0023E1 E6               [12] 6503 	mov	a,@r0
      0023E2 C0 E0            [24] 6504 	push	acc
      0023E4 8D 82            [24] 6505 	mov	dpl,r5
      0023E6 8E 83            [24] 6506 	mov	dph,r6
      0023E8 8F F0            [24] 6507 	mov	b,r7
      0023EA 12r00r00         [24] 6508 	lcall	_stack_push
      0023ED E5 81            [12] 6509 	mov	a,sp
      0023EF 24 FC            [12] 6510 	add	a,#0xfc
      0023F1 F5 81            [12] 6511 	mov	sp,a
                                   6512 ;	calc.c:300: printstr("\r\nstack underflow\r\n");
      0023F3 7Dr44            [12] 6513 	mov	r5,#___str_10
      0023F5 7Cs00            [12] 6514 	mov	r4,#(___str_10 >> 8)
      0023F7 7B 80            [12] 6515 	mov	r3,#0x80
                                   6516 ;	calc.c:51: return;
      0023F9                       6517 00475$:
                                   6518 ;	calc.c:49: for (; *s; s++) putchar(*s);
      0023F9 8D 82            [24] 6519 	mov	dpl,r5
      0023FB 8C 83            [24] 6520 	mov	dph,r4
      0023FD 8B F0            [24] 6521 	mov	b,r3
      0023FF 12r00r00         [24] 6522 	lcall	__gptrget
      002402 FF               [12] 6523 	mov	r7,a
      002403 70 03            [24] 6524 	jnz	01379$
      002405 02r2Ar46         [24] 6525 	ljmp	00249$
      002408                       6526 01379$:
      002408 7E 00            [12] 6527 	mov	r6,#0x00
      00240A 8F 82            [24] 6528 	mov	dpl,r7
      00240C 8E 83            [24] 6529 	mov	dph,r6
      00240E 12r00r00         [24] 6530 	lcall	_putchar
      002411 0D               [12] 6531 	inc	r5
                                   6532 ;	calc.c:300: printstr("\r\nstack underflow\r\n");
      002412 BD 00 E4         [24] 6533 	cjne	r5,#0x00,00475$
      002415 0C               [12] 6534 	inc	r4
      002416 80 E1            [24] 6535 	sjmp	00475$
      002418                       6536 00218$:
                                   6537 ;	calc.c:302: d1 ^= d0;
      002418 E5*00            [12] 6538 	mov	a,_bp
      00241A 24 19            [12] 6539 	add	a,#0x19
      00241C F8               [12] 6540 	mov	r0,a
      00241D E5*00            [12] 6541 	mov	a,_bp
      00241F 24 15            [12] 6542 	add	a,#0x15
      002421 F9               [12] 6543 	mov	r1,a
      002422 E7               [12] 6544 	mov	a,@r1
      002423 66               [12] 6545 	xrl	a,@r0
      002424 F6               [12] 6546 	mov	@r0,a
      002425 09               [12] 6547 	inc	r1
      002426 E7               [12] 6548 	mov	a,@r1
      002427 08               [12] 6549 	inc	r0
      002428 66               [12] 6550 	xrl	a,@r0
      002429 F6               [12] 6551 	mov	@r0,a
      00242A 09               [12] 6552 	inc	r1
      00242B E7               [12] 6553 	mov	a,@r1
      00242C 08               [12] 6554 	inc	r0
      00242D 66               [12] 6555 	xrl	a,@r0
      00242E F6               [12] 6556 	mov	@r0,a
      00242F 09               [12] 6557 	inc	r1
      002430 E7               [12] 6558 	mov	a,@r1
      002431 08               [12] 6559 	inc	r0
      002432 66               [12] 6560 	xrl	a,@r0
      002433 F6               [12] 6561 	mov	@r0,a
                                   6562 ;	calc.c:303: (void)stack_push(ctx->ps, d1);
      002434 8A 82            [24] 6563 	mov	dpl,r2
      002436 8B 83            [24] 6564 	mov	dph,r3
      002438 8C F0            [24] 6565 	mov	b,r4
      00243A 12r00r00         [24] 6566 	lcall	__gptrget
      00243D FA               [12] 6567 	mov	r2,a
      00243E A3               [24] 6568 	inc	dptr
      00243F 12r00r00         [24] 6569 	lcall	__gptrget
      002442 FB               [12] 6570 	mov	r3,a
      002443 A3               [24] 6571 	inc	dptr
      002444 12r00r00         [24] 6572 	lcall	__gptrget
      002447 FC               [12] 6573 	mov	r4,a
      002448 E5*00            [12] 6574 	mov	a,_bp
      00244A 24 19            [12] 6575 	add	a,#0x19
      00244C F8               [12] 6576 	mov	r0,a
      00244D E6               [12] 6577 	mov	a,@r0
      00244E C0 E0            [24] 6578 	push	acc
      002450 08               [12] 6579 	inc	r0
      002451 E6               [12] 6580 	mov	a,@r0
      002452 C0 E0            [24] 6581 	push	acc
      002454 08               [12] 6582 	inc	r0
      002455 E6               [12] 6583 	mov	a,@r0
      002456 C0 E0            [24] 6584 	push	acc
      002458 08               [12] 6585 	inc	r0
      002459 E6               [12] 6586 	mov	a,@r0
      00245A C0 E0            [24] 6587 	push	acc
      00245C 8A 82            [24] 6588 	mov	dpl,r2
      00245E 8B 83            [24] 6589 	mov	dph,r3
      002460 8C F0            [24] 6590 	mov	b,r4
      002462 12r00r00         [24] 6591 	lcall	_stack_push
      002465 E5 81            [12] 6592 	mov	a,sp
      002467 24 FC            [12] 6593 	add	a,#0xfc
      002469 F5 81            [12] 6594 	mov	sp,a
                                   6595 ;	calc.c:305: break;
      00246B 02r2Ar46         [24] 6596 	ljmp	00249$
                                   6597 ;	calc.c:306: case '>':
      00246E                       6598 00223$:
                                   6599 ;	calc.c:307: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      00246E E5*00            [12] 6600 	mov	a,_bp
      002470 24 15            [12] 6601 	add	a,#0x15
      002472 FC               [12] 6602 	mov	r4,a
      002473 7B 00            [12] 6603 	mov	r3,#0x00
      002475 7A 40            [12] 6604 	mov	r2,#0x40
      002477 E5*00            [12] 6605 	mov	a,_bp
      002479 24 12            [12] 6606 	add	a,#0x12
      00247B F8               [12] 6607 	mov	r0,a
      00247C E5*00            [12] 6608 	mov	a,_bp
      00247E 24 0B            [12] 6609 	add	a,#0x0b
      002480 F9               [12] 6610 	mov	r1,a
      002481 74 13            [12] 6611 	mov	a,#0x13
      002483 26               [12] 6612 	add	a,@r0
      002484 F7               [12] 6613 	mov	@r1,a
      002485 74 40            [12] 6614 	mov	a,#0x40
      002487 08               [12] 6615 	inc	r0
      002488 36               [12] 6616 	addc	a,@r0
      002489 09               [12] 6617 	inc	r1
      00248A F7               [12] 6618 	mov	@r1,a
      00248B 08               [12] 6619 	inc	r0
      00248C 09               [12] 6620 	inc	r1
      00248D E6               [12] 6621 	mov	a,@r0
      00248E F7               [12] 6622 	mov	@r1,a
      00248F E5*00            [12] 6623 	mov	a,_bp
      002491 24 0B            [12] 6624 	add	a,#0x0b
      002493 F8               [12] 6625 	mov	r0,a
      002494 86 82            [24] 6626 	mov	dpl,@r0
      002496 08               [12] 6627 	inc	r0
      002497 86 83            [24] 6628 	mov	dph,@r0
      002499 08               [12] 6629 	inc	r0
      00249A 86 F0            [24] 6630 	mov	b,@r0
      00249C 12r00r00         [24] 6631 	lcall	__gptrget
      00249F FD               [12] 6632 	mov	r5,a
      0024A0 A3               [24] 6633 	inc	dptr
      0024A1 12r00r00         [24] 6634 	lcall	__gptrget
      0024A4 FE               [12] 6635 	mov	r6,a
      0024A5 A3               [24] 6636 	inc	dptr
      0024A6 12r00r00         [24] 6637 	lcall	__gptrget
      0024A9 FF               [12] 6638 	mov	r7,a
      0024AA C0 04            [24] 6639 	push	ar4
      0024AC C0 03            [24] 6640 	push	ar3
      0024AE C0 02            [24] 6641 	push	ar2
      0024B0 8D 82            [24] 6642 	mov	dpl,r5
      0024B2 8E 83            [24] 6643 	mov	dph,r6
      0024B4 8F F0            [24] 6644 	mov	b,r7
      0024B6 12r00r00         [24] 6645 	lcall	_stack_pop
      0024B9 AE 82            [24] 6646 	mov	r6,dpl
      0024BB AF 83            [24] 6647 	mov	r7,dph
      0024BD 15 81            [12] 6648 	dec	sp
      0024BF 15 81            [12] 6649 	dec	sp
      0024C1 15 81            [12] 6650 	dec	sp
      0024C3 EE               [12] 6651 	mov	a,r6
      0024C4 4F               [12] 6652 	orl	a,r7
      0024C5 70 25            [24] 6653 	jnz	00228$
      0024C7 7Dr44            [12] 6654 	mov	r5,#___str_10
      0024C9 7Cs00            [12] 6655 	mov	r4,#(___str_10 >> 8)
      0024CB 7B 80            [12] 6656 	mov	r3,#0x80
                                   6657 ;	calc.c:51: return;
      0024CD                       6658 00478$:
                                   6659 ;	calc.c:49: for (; *s; s++) putchar(*s);
      0024CD 8D 82            [24] 6660 	mov	dpl,r5
      0024CF 8C 83            [24] 6661 	mov	dph,r4
      0024D1 8B F0            [24] 6662 	mov	b,r3
      0024D3 12r00r00         [24] 6663 	lcall	__gptrget
      0024D6 FF               [12] 6664 	mov	r7,a
      0024D7 70 03            [24] 6665 	jnz	01382$
      0024D9 02r2Ar46         [24] 6666 	ljmp	00249$
      0024DC                       6667 01382$:
      0024DC 7E 00            [12] 6668 	mov	r6,#0x00
      0024DE 8F 82            [24] 6669 	mov	dpl,r7
      0024E0 8E 83            [24] 6670 	mov	dph,r6
      0024E2 12r00r00         [24] 6671 	lcall	_putchar
      0024E5 0D               [12] 6672 	inc	r5
                                   6673 ;	calc.c:307: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      0024E6 BD 00 E4         [24] 6674 	cjne	r5,#0x00,00478$
      0024E9 0C               [12] 6675 	inc	r4
      0024EA 80 E1            [24] 6676 	sjmp	00478$
      0024EC                       6677 00228$:
                                   6678 ;	calc.c:308: else if (!stack_pop(ctx->ps, &d1)) {
      0024EC E5*00            [12] 6679 	mov	a,_bp
      0024EE 24 19            [12] 6680 	add	a,#0x19
      0024F0 FC               [12] 6681 	mov	r4,a
      0024F1 7B 00            [12] 6682 	mov	r3,#0x00
      0024F3 7A 40            [12] 6683 	mov	r2,#0x40
      0024F5 E5*00            [12] 6684 	mov	a,_bp
      0024F7 24 0B            [12] 6685 	add	a,#0x0b
      0024F9 F8               [12] 6686 	mov	r0,a
      0024FA 86 82            [24] 6687 	mov	dpl,@r0
      0024FC 08               [12] 6688 	inc	r0
      0024FD 86 83            [24] 6689 	mov	dph,@r0
      0024FF 08               [12] 6690 	inc	r0
      002500 86 F0            [24] 6691 	mov	b,@r0
      002502 12r00r00         [24] 6692 	lcall	__gptrget
      002505 FD               [12] 6693 	mov	r5,a
      002506 A3               [24] 6694 	inc	dptr
      002507 12r00r00         [24] 6695 	lcall	__gptrget
      00250A FE               [12] 6696 	mov	r6,a
      00250B A3               [24] 6697 	inc	dptr
      00250C 12r00r00         [24] 6698 	lcall	__gptrget
      00250F FF               [12] 6699 	mov	r7,a
      002510 C0 04            [24] 6700 	push	ar4
      002512 C0 03            [24] 6701 	push	ar3
      002514 C0 02            [24] 6702 	push	ar2
      002516 8D 82            [24] 6703 	mov	dpl,r5
      002518 8E 83            [24] 6704 	mov	dph,r6
      00251A 8F F0            [24] 6705 	mov	b,r7
      00251C 12r00r00         [24] 6706 	lcall	_stack_pop
      00251F AE 82            [24] 6707 	mov	r6,dpl
      002521 AF 83            [24] 6708 	mov	r7,dph
      002523 15 81            [12] 6709 	dec	sp
      002525 15 81            [12] 6710 	dec	sp
      002527 15 81            [12] 6711 	dec	sp
      002529 EE               [12] 6712 	mov	a,r6
      00252A 4F               [12] 6713 	orl	a,r7
      00252B 70 63            [24] 6714 	jnz	00225$
                                   6715 ;	calc.c:309: (void)stack_push(ctx->ps, d0);
      00252D E5*00            [12] 6716 	mov	a,_bp
      00252F 24 0B            [12] 6717 	add	a,#0x0b
      002531 F8               [12] 6718 	mov	r0,a
      002532 86 82            [24] 6719 	mov	dpl,@r0
      002534 08               [12] 6720 	inc	r0
      002535 86 83            [24] 6721 	mov	dph,@r0
      002537 08               [12] 6722 	inc	r0
      002538 86 F0            [24] 6723 	mov	b,@r0
      00253A 12r00r00         [24] 6724 	lcall	__gptrget
      00253D FD               [12] 6725 	mov	r5,a
      00253E A3               [24] 6726 	inc	dptr
      00253F 12r00r00         [24] 6727 	lcall	__gptrget
      002542 FE               [12] 6728 	mov	r6,a
      002543 A3               [24] 6729 	inc	dptr
      002544 12r00r00         [24] 6730 	lcall	__gptrget
      002547 FF               [12] 6731 	mov	r7,a
      002548 E5*00            [12] 6732 	mov	a,_bp
      00254A 24 15            [12] 6733 	add	a,#0x15
      00254C F8               [12] 6734 	mov	r0,a
      00254D E6               [12] 6735 	mov	a,@r0
      00254E C0 E0            [24] 6736 	push	acc
      002550 08               [12] 6737 	inc	r0
      002551 E6               [12] 6738 	mov	a,@r0
      002552 C0 E0            [24] 6739 	push	acc
      002554 08               [12] 6740 	inc	r0
      002555 E6               [12] 6741 	mov	a,@r0
      002556 C0 E0            [24] 6742 	push	acc
      002558 08               [12] 6743 	inc	r0
      002559 E6               [12] 6744 	mov	a,@r0
      00255A C0 E0            [24] 6745 	push	acc
      00255C 8D 82            [24] 6746 	mov	dpl,r5
      00255E 8E 83            [24] 6747 	mov	dph,r6
      002560 8F F0            [24] 6748 	mov	b,r7
      002562 12r00r00         [24] 6749 	lcall	_stack_push
      002565 E5 81            [12] 6750 	mov	a,sp
      002567 24 FC            [12] 6751 	add	a,#0xfc
      002569 F5 81            [12] 6752 	mov	sp,a
                                   6753 ;	calc.c:310: printstr("\r\nstack underflow\r\n");
      00256B 7Dr44            [12] 6754 	mov	r5,#___str_10
      00256D 7Cs00            [12] 6755 	mov	r4,#(___str_10 >> 8)
      00256F 7B 80            [12] 6756 	mov	r3,#0x80
                                   6757 ;	calc.c:51: return;
      002571                       6758 00481$:
                                   6759 ;	calc.c:49: for (; *s; s++) putchar(*s);
      002571 8D 82            [24] 6760 	mov	dpl,r5
      002573 8C 83            [24] 6761 	mov	dph,r4
      002575 8B F0            [24] 6762 	mov	b,r3
      002577 12r00r00         [24] 6763 	lcall	__gptrget
      00257A FF               [12] 6764 	mov	r7,a
      00257B 70 03            [24] 6765 	jnz	01385$
      00257D 02r2Ar46         [24] 6766 	ljmp	00249$
      002580                       6767 01385$:
      002580 7E 00            [12] 6768 	mov	r6,#0x00
      002582 8F 82            [24] 6769 	mov	dpl,r7
      002584 8E 83            [24] 6770 	mov	dph,r6
      002586 12r00r00         [24] 6771 	lcall	_putchar
      002589 0D               [12] 6772 	inc	r5
                                   6773 ;	calc.c:310: printstr("\r\nstack underflow\r\n");
      00258A BD 00 E4         [24] 6774 	cjne	r5,#0x00,00481$
      00258D 0C               [12] 6775 	inc	r4
      00258E 80 E1            [24] 6776 	sjmp	00481$
      002590                       6777 00225$:
                                   6778 ;	calc.c:312: d1 = (unsigned long)d1 >> ((unsigned long)d0 & 0x0000001flu);
      002590 E5*00            [12] 6779 	mov	a,_bp
      002592 24 19            [12] 6780 	add	a,#0x19
      002594 F8               [12] 6781 	mov	r0,a
      002595 86 04            [24] 6782 	mov	ar4,@r0
      002597 08               [12] 6783 	inc	r0
      002598 86 05            [24] 6784 	mov	ar5,@r0
      00259A 08               [12] 6785 	inc	r0
      00259B 86 06            [24] 6786 	mov	ar6,@r0
      00259D 08               [12] 6787 	inc	r0
      00259E 86 07            [24] 6788 	mov	ar7,@r0
      0025A0 E5*00            [12] 6789 	mov	a,_bp
      0025A2 24 15            [12] 6790 	add	a,#0x15
      0025A4 F8               [12] 6791 	mov	r0,a
      0025A5 86 03            [24] 6792 	mov	ar3,@r0
      0025A7 53 03 1F         [24] 6793 	anl	ar3,#0x1f
      0025AA 8B F0            [24] 6794 	mov	b,r3
      0025AC 05 F0            [12] 6795 	inc	b
      0025AE 80 0D            [24] 6796 	sjmp	01388$
      0025B0                       6797 01387$:
      0025B0 C3               [12] 6798 	clr	c
      0025B1 EF               [12] 6799 	mov	a,r7
      0025B2 13               [12] 6800 	rrc	a
      0025B3 FF               [12] 6801 	mov	r7,a
      0025B4 EE               [12] 6802 	mov	a,r6
      0025B5 13               [12] 6803 	rrc	a
      0025B6 FE               [12] 6804 	mov	r6,a
      0025B7 ED               [12] 6805 	mov	a,r5
      0025B8 13               [12] 6806 	rrc	a
      0025B9 FD               [12] 6807 	mov	r5,a
      0025BA EC               [12] 6808 	mov	a,r4
      0025BB 13               [12] 6809 	rrc	a
      0025BC FC               [12] 6810 	mov	r4,a
      0025BD                       6811 01388$:
      0025BD D5 F0 F0         [24] 6812 	djnz	b,01387$
      0025C0 E5*00            [12] 6813 	mov	a,_bp
      0025C2 24 19            [12] 6814 	add	a,#0x19
      0025C4 F8               [12] 6815 	mov	r0,a
      0025C5 A6 04            [24] 6816 	mov	@r0,ar4
      0025C7 08               [12] 6817 	inc	r0
      0025C8 A6 05            [24] 6818 	mov	@r0,ar5
      0025CA 08               [12] 6819 	inc	r0
      0025CB A6 06            [24] 6820 	mov	@r0,ar6
      0025CD 08               [12] 6821 	inc	r0
      0025CE A6 07            [24] 6822 	mov	@r0,ar7
                                   6823 ;	calc.c:313: (void)stack_push(ctx->ps, d1);
      0025D0 E5*00            [12] 6824 	mov	a,_bp
      0025D2 24 0B            [12] 6825 	add	a,#0x0b
      0025D4 F8               [12] 6826 	mov	r0,a
      0025D5 86 82            [24] 6827 	mov	dpl,@r0
      0025D7 08               [12] 6828 	inc	r0
      0025D8 86 83            [24] 6829 	mov	dph,@r0
      0025DA 08               [12] 6830 	inc	r0
      0025DB 86 F0            [24] 6831 	mov	b,@r0
      0025DD 12r00r00         [24] 6832 	lcall	__gptrget
      0025E0 FD               [12] 6833 	mov	r5,a
      0025E1 A3               [24] 6834 	inc	dptr
      0025E2 12r00r00         [24] 6835 	lcall	__gptrget
      0025E5 FE               [12] 6836 	mov	r6,a
      0025E6 A3               [24] 6837 	inc	dptr
      0025E7 12r00r00         [24] 6838 	lcall	__gptrget
      0025EA FF               [12] 6839 	mov	r7,a
      0025EB E5*00            [12] 6840 	mov	a,_bp
      0025ED 24 19            [12] 6841 	add	a,#0x19
      0025EF F8               [12] 6842 	mov	r0,a
      0025F0 E6               [12] 6843 	mov	a,@r0
      0025F1 C0 E0            [24] 6844 	push	acc
      0025F3 08               [12] 6845 	inc	r0
      0025F4 E6               [12] 6846 	mov	a,@r0
      0025F5 C0 E0            [24] 6847 	push	acc
      0025F7 08               [12] 6848 	inc	r0
      0025F8 E6               [12] 6849 	mov	a,@r0
      0025F9 C0 E0            [24] 6850 	push	acc
      0025FB 08               [12] 6851 	inc	r0
      0025FC E6               [12] 6852 	mov	a,@r0
      0025FD C0 E0            [24] 6853 	push	acc
      0025FF 8D 82            [24] 6854 	mov	dpl,r5
      002601 8E 83            [24] 6855 	mov	dph,r6
      002603 8F F0            [24] 6856 	mov	b,r7
      002605 12r00r00         [24] 6857 	lcall	_stack_push
      002608 E5 81            [12] 6858 	mov	a,sp
      00260A 24 FC            [12] 6859 	add	a,#0xfc
      00260C F5 81            [12] 6860 	mov	sp,a
                                   6861 ;	calc.c:315: break;
      00260E 02r2Ar46         [24] 6862 	ljmp	00249$
                                   6863 ;	calc.c:316: case ']':
      002611                       6864 00230$:
                                   6865 ;	calc.c:317: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      002611 E5*00            [12] 6866 	mov	a,_bp
      002613 24 15            [12] 6867 	add	a,#0x15
      002615 FF               [12] 6868 	mov	r7,a
      002616 E5*00            [12] 6869 	mov	a,_bp
      002618 24 0E            [12] 6870 	add	a,#0x0e
      00261A F8               [12] 6871 	mov	r0,a
      00261B A6 07            [24] 6872 	mov	@r0,ar7
      00261D 08               [12] 6873 	inc	r0
      00261E 76 00            [12] 6874 	mov	@r0,#0x00
      002620 08               [12] 6875 	inc	r0
      002621 76 40            [12] 6876 	mov	@r0,#0x40
      002623 E5*00            [12] 6877 	mov	a,_bp
      002625 24 12            [12] 6878 	add	a,#0x12
      002627 F8               [12] 6879 	mov	r0,a
      002628 74 13            [12] 6880 	mov	a,#0x13
      00262A 26               [12] 6881 	add	a,@r0
      00262B FA               [12] 6882 	mov	r2,a
      00262C 74 40            [12] 6883 	mov	a,#0x40
      00262E 08               [12] 6884 	inc	r0
      00262F 36               [12] 6885 	addc	a,@r0
      002630 FB               [12] 6886 	mov	r3,a
      002631 08               [12] 6887 	inc	r0
      002632 86 04            [24] 6888 	mov	ar4,@r0
      002634 8A 82            [24] 6889 	mov	dpl,r2
      002636 8B 83            [24] 6890 	mov	dph,r3
      002638 8C F0            [24] 6891 	mov	b,r4
      00263A 12r00r00         [24] 6892 	lcall	__gptrget
      00263D FD               [12] 6893 	mov	r5,a
      00263E A3               [24] 6894 	inc	dptr
      00263F 12r00r00         [24] 6895 	lcall	__gptrget
      002642 FE               [12] 6896 	mov	r6,a
      002643 A3               [24] 6897 	inc	dptr
      002644 12r00r00         [24] 6898 	lcall	__gptrget
      002647 FF               [12] 6899 	mov	r7,a
      002648 C0 04            [24] 6900 	push	ar4
      00264A C0 03            [24] 6901 	push	ar3
      00264C C0 02            [24] 6902 	push	ar2
      00264E E5*00            [12] 6903 	mov	a,_bp
      002650 24 0E            [12] 6904 	add	a,#0x0e
      002652 F8               [12] 6905 	mov	r0,a
      002653 E6               [12] 6906 	mov	a,@r0
      002654 C0 E0            [24] 6907 	push	acc
      002656 08               [12] 6908 	inc	r0
      002657 E6               [12] 6909 	mov	a,@r0
      002658 C0 E0            [24] 6910 	push	acc
      00265A 08               [12] 6911 	inc	r0
      00265B E6               [12] 6912 	mov	a,@r0
      00265C C0 E0            [24] 6913 	push	acc
      00265E 8D 82            [24] 6914 	mov	dpl,r5
      002660 8E 83            [24] 6915 	mov	dph,r6
      002662 8F F0            [24] 6916 	mov	b,r7
      002664 12r00r00         [24] 6917 	lcall	_stack_pop
      002667 AE 82            [24] 6918 	mov	r6,dpl
      002669 AF 83            [24] 6919 	mov	r7,dph
      00266B 15 81            [12] 6920 	dec	sp
      00266D 15 81            [12] 6921 	dec	sp
      00266F 15 81            [12] 6922 	dec	sp
      002671 D0 02            [24] 6923 	pop	ar2
      002673 D0 03            [24] 6924 	pop	ar3
      002675 D0 04            [24] 6925 	pop	ar4
      002677 EE               [12] 6926 	mov	a,r6
      002678 4F               [12] 6927 	orl	a,r7
      002679 70 25            [24] 6928 	jnz	00235$
      00267B 7Dr44            [12] 6929 	mov	r5,#___str_10
      00267D 7Cs00            [12] 6930 	mov	r4,#(___str_10 >> 8)
      00267F 7B 80            [12] 6931 	mov	r3,#0x80
                                   6932 ;	calc.c:51: return;
      002681                       6933 00484$:
                                   6934 ;	calc.c:49: for (; *s; s++) putchar(*s);
      002681 8D 82            [24] 6935 	mov	dpl,r5
      002683 8C 83            [24] 6936 	mov	dph,r4
      002685 8B F0            [24] 6937 	mov	b,r3
      002687 12r00r00         [24] 6938 	lcall	__gptrget
      00268A FF               [12] 6939 	mov	r7,a
      00268B 70 03            [24] 6940 	jnz	01390$
      00268D 02r2Ar46         [24] 6941 	ljmp	00249$
      002690                       6942 01390$:
      002690 7E 00            [12] 6943 	mov	r6,#0x00
      002692 8F 82            [24] 6944 	mov	dpl,r7
      002694 8E 83            [24] 6945 	mov	dph,r6
      002696 12r00r00         [24] 6946 	lcall	_putchar
      002699 0D               [12] 6947 	inc	r5
                                   6948 ;	calc.c:317: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      00269A BD 00 E4         [24] 6949 	cjne	r5,#0x00,00484$
      00269D 0C               [12] 6950 	inc	r4
      00269E 80 E1            [24] 6951 	sjmp	00484$
      0026A0                       6952 00235$:
                                   6953 ;	calc.c:318: else if (!stack_pop(ctx->ps, &d1)) {
      0026A0 E5*00            [12] 6954 	mov	a,_bp
      0026A2 24 19            [12] 6955 	add	a,#0x19
      0026A4 FF               [12] 6956 	mov	r7,a
      0026A5 E5*00            [12] 6957 	mov	a,_bp
      0026A7 24 0E            [12] 6958 	add	a,#0x0e
      0026A9 F8               [12] 6959 	mov	r0,a
      0026AA A6 07            [24] 6960 	mov	@r0,ar7
      0026AC 08               [12] 6961 	inc	r0
      0026AD 76 00            [12] 6962 	mov	@r0,#0x00
      0026AF 08               [12] 6963 	inc	r0
      0026B0 76 40            [12] 6964 	mov	@r0,#0x40
      0026B2 8A 82            [24] 6965 	mov	dpl,r2
      0026B4 8B 83            [24] 6966 	mov	dph,r3
      0026B6 8C F0            [24] 6967 	mov	b,r4
      0026B8 12r00r00         [24] 6968 	lcall	__gptrget
      0026BB FD               [12] 6969 	mov	r5,a
      0026BC A3               [24] 6970 	inc	dptr
      0026BD 12r00r00         [24] 6971 	lcall	__gptrget
      0026C0 FE               [12] 6972 	mov	r6,a
      0026C1 A3               [24] 6973 	inc	dptr
      0026C2 12r00r00         [24] 6974 	lcall	__gptrget
      0026C5 FF               [12] 6975 	mov	r7,a
      0026C6 C0 04            [24] 6976 	push	ar4
      0026C8 C0 03            [24] 6977 	push	ar3
      0026CA C0 02            [24] 6978 	push	ar2
      0026CC E5*00            [12] 6979 	mov	a,_bp
      0026CE 24 0E            [12] 6980 	add	a,#0x0e
      0026D0 F8               [12] 6981 	mov	r0,a
      0026D1 E6               [12] 6982 	mov	a,@r0
      0026D2 C0 E0            [24] 6983 	push	acc
      0026D4 08               [12] 6984 	inc	r0
      0026D5 E6               [12] 6985 	mov	a,@r0
      0026D6 C0 E0            [24] 6986 	push	acc
      0026D8 08               [12] 6987 	inc	r0
      0026D9 E6               [12] 6988 	mov	a,@r0
      0026DA C0 E0            [24] 6989 	push	acc
      0026DC 8D 82            [24] 6990 	mov	dpl,r5
      0026DE 8E 83            [24] 6991 	mov	dph,r6
      0026E0 8F F0            [24] 6992 	mov	b,r7
      0026E2 12r00r00         [24] 6993 	lcall	_stack_pop
      0026E5 AE 82            [24] 6994 	mov	r6,dpl
      0026E7 AF 83            [24] 6995 	mov	r7,dph
      0026E9 15 81            [12] 6996 	dec	sp
      0026EB 15 81            [12] 6997 	dec	sp
      0026ED 15 81            [12] 6998 	dec	sp
      0026EF D0 02            [24] 6999 	pop	ar2
      0026F1 D0 03            [24] 7000 	pop	ar3
      0026F3 D0 04            [24] 7001 	pop	ar4
      0026F5 EE               [12] 7002 	mov	a,r6
      0026F6 4F               [12] 7003 	orl	a,r7
      0026F7 70 5C            [24] 7004 	jnz	00232$
                                   7005 ;	calc.c:319: (void)stack_push(ctx->ps, d0);
      0026F9 8A 82            [24] 7006 	mov	dpl,r2
      0026FB 8B 83            [24] 7007 	mov	dph,r3
      0026FD 8C F0            [24] 7008 	mov	b,r4
      0026FF 12r00r00         [24] 7009 	lcall	__gptrget
      002702 FD               [12] 7010 	mov	r5,a
      002703 A3               [24] 7011 	inc	dptr
      002704 12r00r00         [24] 7012 	lcall	__gptrget
      002707 FE               [12] 7013 	mov	r6,a
      002708 A3               [24] 7014 	inc	dptr
      002709 12r00r00         [24] 7015 	lcall	__gptrget
      00270C FF               [12] 7016 	mov	r7,a
      00270D E5*00            [12] 7017 	mov	a,_bp
      00270F 24 15            [12] 7018 	add	a,#0x15
      002711 F8               [12] 7019 	mov	r0,a
      002712 E6               [12] 7020 	mov	a,@r0
      002713 C0 E0            [24] 7021 	push	acc
      002715 08               [12] 7022 	inc	r0
      002716 E6               [12] 7023 	mov	a,@r0
      002717 C0 E0            [24] 7024 	push	acc
      002719 08               [12] 7025 	inc	r0
      00271A E6               [12] 7026 	mov	a,@r0
      00271B C0 E0            [24] 7027 	push	acc
      00271D 08               [12] 7028 	inc	r0
      00271E E6               [12] 7029 	mov	a,@r0
      00271F C0 E0            [24] 7030 	push	acc
      002721 8D 82            [24] 7031 	mov	dpl,r5
      002723 8E 83            [24] 7032 	mov	dph,r6
      002725 8F F0            [24] 7033 	mov	b,r7
      002727 12r00r00         [24] 7034 	lcall	_stack_push
      00272A E5 81            [12] 7035 	mov	a,sp
      00272C 24 FC            [12] 7036 	add	a,#0xfc
      00272E F5 81            [12] 7037 	mov	sp,a
                                   7038 ;	calc.c:320: printstr("\r\nstack underflow\r\n");
      002730 7Dr44            [12] 7039 	mov	r5,#___str_10
      002732 7Cs00            [12] 7040 	mov	r4,#(___str_10 >> 8)
      002734 7B 80            [12] 7041 	mov	r3,#0x80
                                   7042 ;	calc.c:51: return;
      002736                       7043 00487$:
                                   7044 ;	calc.c:49: for (; *s; s++) putchar(*s);
      002736 8D 82            [24] 7045 	mov	dpl,r5
      002738 8C 83            [24] 7046 	mov	dph,r4
      00273A 8B F0            [24] 7047 	mov	b,r3
      00273C 12r00r00         [24] 7048 	lcall	__gptrget
      00273F FF               [12] 7049 	mov	r7,a
      002740 70 03            [24] 7050 	jnz	01393$
      002742 02r2Ar46         [24] 7051 	ljmp	00249$
      002745                       7052 01393$:
      002745 7E 00            [12] 7053 	mov	r6,#0x00
      002747 8F 82            [24] 7054 	mov	dpl,r7
      002749 8E 83            [24] 7055 	mov	dph,r6
      00274B 12r00r00         [24] 7056 	lcall	_putchar
      00274E 0D               [12] 7057 	inc	r5
                                   7058 ;	calc.c:320: printstr("\r\nstack underflow\r\n");
      00274F BD 00 E4         [24] 7059 	cjne	r5,#0x00,00487$
      002752 0C               [12] 7060 	inc	r4
      002753 80 E1            [24] 7061 	sjmp	00487$
      002755                       7062 00232$:
                                   7063 ;	calc.c:322: d1 >>= ((unsigned long)d0 & 0x0000001flu);
      002755 E5*00            [12] 7064 	mov	a,_bp
      002757 24 15            [12] 7065 	add	a,#0x15
      002759 F8               [12] 7066 	mov	r0,a
      00275A 86 07            [24] 7067 	mov	ar7,@r0
      00275C 53 07 1F         [24] 7068 	anl	ar7,#0x1f
      00275F 8F F0            [24] 7069 	mov	b,r7
      002761 05 F0            [12] 7070 	inc	b
      002763 E5*00            [12] 7071 	mov	a,_bp
      002765 24 19            [12] 7072 	add	a,#0x19
      002767 F8               [12] 7073 	mov	r0,a
      002768 08               [12] 7074 	inc	r0
      002769 08               [12] 7075 	inc	r0
      00276A 08               [12] 7076 	inc	r0
      00276B E6               [12] 7077 	mov	a,@r0
      00276C 33               [12] 7078 	rlc	a
      00276D 92 D2            [24] 7079 	mov	ov,c
      00276F 18               [12] 7080 	dec	r0
      002770 18               [12] 7081 	dec	r0
      002771 18               [12] 7082 	dec	r0
      002772 80 14            [24] 7083 	sjmp	01396$
      002774                       7084 01395$:
      002774 A2 D2            [12] 7085 	mov	c,ov
      002776 08               [12] 7086 	inc	r0
      002777 08               [12] 7087 	inc	r0
      002778 08               [12] 7088 	inc	r0
      002779 E6               [12] 7089 	mov	a,@r0
      00277A 13               [12] 7090 	rrc	a
      00277B F6               [12] 7091 	mov	@r0,a
      00277C 18               [12] 7092 	dec	r0
      00277D E6               [12] 7093 	mov	a,@r0
      00277E 13               [12] 7094 	rrc	a
      00277F F6               [12] 7095 	mov	@r0,a
      002780 18               [12] 7096 	dec	r0
      002781 E6               [12] 7097 	mov	a,@r0
      002782 13               [12] 7098 	rrc	a
      002783 F6               [12] 7099 	mov	@r0,a
      002784 18               [12] 7100 	dec	r0
      002785 E6               [12] 7101 	mov	a,@r0
      002786 13               [12] 7102 	rrc	a
      002787 F6               [12] 7103 	mov	@r0,a
      002788                       7104 01396$:
      002788 D5 F0 E9         [24] 7105 	djnz	b,01395$
                                   7106 ;	calc.c:323: (void)stack_push(ctx->ps, d1);
      00278B 8A 82            [24] 7107 	mov	dpl,r2
      00278D 8B 83            [24] 7108 	mov	dph,r3
      00278F 8C F0            [24] 7109 	mov	b,r4
      002791 12r00r00         [24] 7110 	lcall	__gptrget
      002794 FA               [12] 7111 	mov	r2,a
      002795 A3               [24] 7112 	inc	dptr
      002796 12r00r00         [24] 7113 	lcall	__gptrget
      002799 FB               [12] 7114 	mov	r3,a
      00279A A3               [24] 7115 	inc	dptr
      00279B 12r00r00         [24] 7116 	lcall	__gptrget
      00279E FC               [12] 7117 	mov	r4,a
      00279F E5*00            [12] 7118 	mov	a,_bp
      0027A1 24 19            [12] 7119 	add	a,#0x19
      0027A3 F8               [12] 7120 	mov	r0,a
      0027A4 E6               [12] 7121 	mov	a,@r0
      0027A5 C0 E0            [24] 7122 	push	acc
      0027A7 08               [12] 7123 	inc	r0
      0027A8 E6               [12] 7124 	mov	a,@r0
      0027A9 C0 E0            [24] 7125 	push	acc
      0027AB 08               [12] 7126 	inc	r0
      0027AC E6               [12] 7127 	mov	a,@r0
      0027AD C0 E0            [24] 7128 	push	acc
      0027AF 08               [12] 7129 	inc	r0
      0027B0 E6               [12] 7130 	mov	a,@r0
      0027B1 C0 E0            [24] 7131 	push	acc
      0027B3 8A 82            [24] 7132 	mov	dpl,r2
      0027B5 8B 83            [24] 7133 	mov	dph,r3
      0027B7 8C F0            [24] 7134 	mov	b,r4
      0027B9 12r00r00         [24] 7135 	lcall	_stack_push
      0027BC E5 81            [12] 7136 	mov	a,sp
      0027BE 24 FC            [12] 7137 	add	a,#0xfc
      0027C0 F5 81            [12] 7138 	mov	sp,a
                                   7139 ;	calc.c:325: break;
      0027C2 02r2Ar46         [24] 7140 	ljmp	00249$
                                   7141 ;	calc.c:326: case '<':
      0027C5                       7142 00237$:
                                   7143 ;	calc.c:327: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      0027C5 E5*00            [12] 7144 	mov	a,_bp
      0027C7 24 15            [12] 7145 	add	a,#0x15
      0027C9 FC               [12] 7146 	mov	r4,a
      0027CA 7B 00            [12] 7147 	mov	r3,#0x00
      0027CC 7A 40            [12] 7148 	mov	r2,#0x40
      0027CE E5*00            [12] 7149 	mov	a,_bp
      0027D0 24 12            [12] 7150 	add	a,#0x12
      0027D2 F8               [12] 7151 	mov	r0,a
      0027D3 E5*00            [12] 7152 	mov	a,_bp
      0027D5 24 0B            [12] 7153 	add	a,#0x0b
      0027D7 F9               [12] 7154 	mov	r1,a
      0027D8 74 13            [12] 7155 	mov	a,#0x13
      0027DA 26               [12] 7156 	add	a,@r0
      0027DB F7               [12] 7157 	mov	@r1,a
      0027DC 74 40            [12] 7158 	mov	a,#0x40
      0027DE 08               [12] 7159 	inc	r0
      0027DF 36               [12] 7160 	addc	a,@r0
      0027E0 09               [12] 7161 	inc	r1
      0027E1 F7               [12] 7162 	mov	@r1,a
      0027E2 08               [12] 7163 	inc	r0
      0027E3 09               [12] 7164 	inc	r1
      0027E4 E6               [12] 7165 	mov	a,@r0
      0027E5 F7               [12] 7166 	mov	@r1,a
      0027E6 E5*00            [12] 7167 	mov	a,_bp
      0027E8 24 0B            [12] 7168 	add	a,#0x0b
      0027EA F8               [12] 7169 	mov	r0,a
      0027EB 86 82            [24] 7170 	mov	dpl,@r0
      0027ED 08               [12] 7171 	inc	r0
      0027EE 86 83            [24] 7172 	mov	dph,@r0
      0027F0 08               [12] 7173 	inc	r0
      0027F1 86 F0            [24] 7174 	mov	b,@r0
      0027F3 12r00r00         [24] 7175 	lcall	__gptrget
      0027F6 FD               [12] 7176 	mov	r5,a
      0027F7 A3               [24] 7177 	inc	dptr
      0027F8 12r00r00         [24] 7178 	lcall	__gptrget
      0027FB FE               [12] 7179 	mov	r6,a
      0027FC A3               [24] 7180 	inc	dptr
      0027FD 12r00r00         [24] 7181 	lcall	__gptrget
      002800 FF               [12] 7182 	mov	r7,a
      002801 C0 04            [24] 7183 	push	ar4
      002803 C0 03            [24] 7184 	push	ar3
      002805 C0 02            [24] 7185 	push	ar2
      002807 8D 82            [24] 7186 	mov	dpl,r5
      002809 8E 83            [24] 7187 	mov	dph,r6
      00280B 8F F0            [24] 7188 	mov	b,r7
      00280D 12r00r00         [24] 7189 	lcall	_stack_pop
      002810 AE 82            [24] 7190 	mov	r6,dpl
      002812 AF 83            [24] 7191 	mov	r7,dph
      002814 15 81            [12] 7192 	dec	sp
      002816 15 81            [12] 7193 	dec	sp
      002818 15 81            [12] 7194 	dec	sp
      00281A EE               [12] 7195 	mov	a,r6
      00281B 4F               [12] 7196 	orl	a,r7
      00281C 70 25            [24] 7197 	jnz	00242$
      00281E 7Dr44            [12] 7198 	mov	r5,#___str_10
      002820 7Cs00            [12] 7199 	mov	r4,#(___str_10 >> 8)
      002822 7B 80            [12] 7200 	mov	r3,#0x80
                                   7201 ;	calc.c:51: return;
      002824                       7202 00490$:
                                   7203 ;	calc.c:49: for (; *s; s++) putchar(*s);
      002824 8D 82            [24] 7204 	mov	dpl,r5
      002826 8C 83            [24] 7205 	mov	dph,r4
      002828 8B F0            [24] 7206 	mov	b,r3
      00282A 12r00r00         [24] 7207 	lcall	__gptrget
      00282D FF               [12] 7208 	mov	r7,a
      00282E 70 03            [24] 7209 	jnz	01398$
      002830 02r2Ar46         [24] 7210 	ljmp	00249$
      002833                       7211 01398$:
      002833 7E 00            [12] 7212 	mov	r6,#0x00
      002835 8F 82            [24] 7213 	mov	dpl,r7
      002837 8E 83            [24] 7214 	mov	dph,r6
      002839 12r00r00         [24] 7215 	lcall	_putchar
      00283C 0D               [12] 7216 	inc	r5
                                   7217 ;	calc.c:327: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      00283D BD 00 E4         [24] 7218 	cjne	r5,#0x00,00490$
      002840 0C               [12] 7219 	inc	r4
      002841 80 E1            [24] 7220 	sjmp	00490$
      002843                       7221 00242$:
                                   7222 ;	calc.c:328: else if (!stack_pop(ctx->ps, &d1)) {
      002843 E5*00            [12] 7223 	mov	a,_bp
      002845 24 19            [12] 7224 	add	a,#0x19
      002847 FC               [12] 7225 	mov	r4,a
      002848 7B 00            [12] 7226 	mov	r3,#0x00
      00284A 7A 40            [12] 7227 	mov	r2,#0x40
      00284C E5*00            [12] 7228 	mov	a,_bp
      00284E 24 0B            [12] 7229 	add	a,#0x0b
      002850 F8               [12] 7230 	mov	r0,a
      002851 86 82            [24] 7231 	mov	dpl,@r0
      002853 08               [12] 7232 	inc	r0
      002854 86 83            [24] 7233 	mov	dph,@r0
      002856 08               [12] 7234 	inc	r0
      002857 86 F0            [24] 7235 	mov	b,@r0
      002859 12r00r00         [24] 7236 	lcall	__gptrget
      00285C FD               [12] 7237 	mov	r5,a
      00285D A3               [24] 7238 	inc	dptr
      00285E 12r00r00         [24] 7239 	lcall	__gptrget
      002861 FE               [12] 7240 	mov	r6,a
      002862 A3               [24] 7241 	inc	dptr
      002863 12r00r00         [24] 7242 	lcall	__gptrget
      002866 FF               [12] 7243 	mov	r7,a
      002867 C0 04            [24] 7244 	push	ar4
      002869 C0 03            [24] 7245 	push	ar3
      00286B C0 02            [24] 7246 	push	ar2
      00286D 8D 82            [24] 7247 	mov	dpl,r5
      00286F 8E 83            [24] 7248 	mov	dph,r6
      002871 8F F0            [24] 7249 	mov	b,r7
      002873 12r00r00         [24] 7250 	lcall	_stack_pop
      002876 AE 82            [24] 7251 	mov	r6,dpl
      002878 AF 83            [24] 7252 	mov	r7,dph
      00287A 15 81            [12] 7253 	dec	sp
      00287C 15 81            [12] 7254 	dec	sp
      00287E 15 81            [12] 7255 	dec	sp
      002880 EE               [12] 7256 	mov	a,r6
      002881 4F               [12] 7257 	orl	a,r7
      002882 70 63            [24] 7258 	jnz	00239$
                                   7259 ;	calc.c:329: (void)stack_push(ctx->ps, d0);
      002884 E5*00            [12] 7260 	mov	a,_bp
      002886 24 0B            [12] 7261 	add	a,#0x0b
      002888 F8               [12] 7262 	mov	r0,a
      002889 86 82            [24] 7263 	mov	dpl,@r0
      00288B 08               [12] 7264 	inc	r0
      00288C 86 83            [24] 7265 	mov	dph,@r0
      00288E 08               [12] 7266 	inc	r0
      00288F 86 F0            [24] 7267 	mov	b,@r0
      002891 12r00r00         [24] 7268 	lcall	__gptrget
      002894 FD               [12] 7269 	mov	r5,a
      002895 A3               [24] 7270 	inc	dptr
      002896 12r00r00         [24] 7271 	lcall	__gptrget
      002899 FE               [12] 7272 	mov	r6,a
      00289A A3               [24] 7273 	inc	dptr
      00289B 12r00r00         [24] 7274 	lcall	__gptrget
      00289E FF               [12] 7275 	mov	r7,a
      00289F E5*00            [12] 7276 	mov	a,_bp
      0028A1 24 15            [12] 7277 	add	a,#0x15
      0028A3 F8               [12] 7278 	mov	r0,a
      0028A4 E6               [12] 7279 	mov	a,@r0
      0028A5 C0 E0            [24] 7280 	push	acc
      0028A7 08               [12] 7281 	inc	r0
      0028A8 E6               [12] 7282 	mov	a,@r0
      0028A9 C0 E0            [24] 7283 	push	acc
      0028AB 08               [12] 7284 	inc	r0
      0028AC E6               [12] 7285 	mov	a,@r0
      0028AD C0 E0            [24] 7286 	push	acc
      0028AF 08               [12] 7287 	inc	r0
      0028B0 E6               [12] 7288 	mov	a,@r0
      0028B1 C0 E0            [24] 7289 	push	acc
      0028B3 8D 82            [24] 7290 	mov	dpl,r5
      0028B5 8E 83            [24] 7291 	mov	dph,r6
      0028B7 8F F0            [24] 7292 	mov	b,r7
      0028B9 12r00r00         [24] 7293 	lcall	_stack_push
      0028BC E5 81            [12] 7294 	mov	a,sp
      0028BE 24 FC            [12] 7295 	add	a,#0xfc
      0028C0 F5 81            [12] 7296 	mov	sp,a
                                   7297 ;	calc.c:330: printstr("\r\nstack underflow\r\n");
      0028C2 7Dr44            [12] 7298 	mov	r5,#___str_10
      0028C4 7Cs00            [12] 7299 	mov	r4,#(___str_10 >> 8)
      0028C6 7B 80            [12] 7300 	mov	r3,#0x80
                                   7301 ;	calc.c:51: return;
      0028C8                       7302 00493$:
                                   7303 ;	calc.c:49: for (; *s; s++) putchar(*s);
      0028C8 8D 82            [24] 7304 	mov	dpl,r5
      0028CA 8C 83            [24] 7305 	mov	dph,r4
      0028CC 8B F0            [24] 7306 	mov	b,r3
      0028CE 12r00r00         [24] 7307 	lcall	__gptrget
      0028D1 FF               [12] 7308 	mov	r7,a
      0028D2 70 03            [24] 7309 	jnz	01401$
      0028D4 02r2Ar46         [24] 7310 	ljmp	00249$
      0028D7                       7311 01401$:
      0028D7 7E 00            [12] 7312 	mov	r6,#0x00
      0028D9 8F 82            [24] 7313 	mov	dpl,r7
      0028DB 8E 83            [24] 7314 	mov	dph,r6
      0028DD 12r00r00         [24] 7315 	lcall	_putchar
      0028E0 0D               [12] 7316 	inc	r5
                                   7317 ;	calc.c:330: printstr("\r\nstack underflow\r\n");
      0028E1 BD 00 E4         [24] 7318 	cjne	r5,#0x00,00493$
      0028E4 0C               [12] 7319 	inc	r4
      0028E5 80 E1            [24] 7320 	sjmp	00493$
      0028E7                       7321 00239$:
                                   7322 ;	calc.c:332: d1 <<= ((unsigned long)d0 & 0x0000001flu);
      0028E7 E5*00            [12] 7323 	mov	a,_bp
      0028E9 24 15            [12] 7324 	add	a,#0x15
      0028EB F8               [12] 7325 	mov	r0,a
      0028EC 86 07            [24] 7326 	mov	ar7,@r0
      0028EE 74 1F            [12] 7327 	mov	a,#0x1f
      0028F0 5F               [12] 7328 	anl	a,r7
      0028F1 FB               [12] 7329 	mov	r3,a
      0028F2 E5*00            [12] 7330 	mov	a,_bp
      0028F4 24 19            [12] 7331 	add	a,#0x19
      0028F6 F8               [12] 7332 	mov	r0,a
      0028F7 86 04            [24] 7333 	mov	ar4,@r0
      0028F9 08               [12] 7334 	inc	r0
      0028FA 86 05            [24] 7335 	mov	ar5,@r0
      0028FC 08               [12] 7336 	inc	r0
      0028FD 86 06            [24] 7337 	mov	ar6,@r0
      0028FF 08               [12] 7338 	inc	r0
      002900 86 07            [24] 7339 	mov	ar7,@r0
      002902 8B F0            [24] 7340 	mov	b,r3
      002904 05 F0            [12] 7341 	inc	b
      002906 80 0C            [24] 7342 	sjmp	01404$
      002908                       7343 01403$:
      002908 EC               [12] 7344 	mov	a,r4
      002909 2C               [12] 7345 	add	a,r4
      00290A FC               [12] 7346 	mov	r4,a
      00290B ED               [12] 7347 	mov	a,r5
      00290C 33               [12] 7348 	rlc	a
      00290D FD               [12] 7349 	mov	r5,a
      00290E EE               [12] 7350 	mov	a,r6
      00290F 33               [12] 7351 	rlc	a
      002910 FE               [12] 7352 	mov	r6,a
      002911 EF               [12] 7353 	mov	a,r7
      002912 33               [12] 7354 	rlc	a
      002913 FF               [12] 7355 	mov	r7,a
      002914                       7356 01404$:
      002914 D5 F0 F1         [24] 7357 	djnz	b,01403$
      002917 E5*00            [12] 7358 	mov	a,_bp
      002919 24 19            [12] 7359 	add	a,#0x19
      00291B F8               [12] 7360 	mov	r0,a
      00291C A6 04            [24] 7361 	mov	@r0,ar4
      00291E 08               [12] 7362 	inc	r0
      00291F A6 05            [24] 7363 	mov	@r0,ar5
      002921 08               [12] 7364 	inc	r0
      002922 A6 06            [24] 7365 	mov	@r0,ar6
      002924 08               [12] 7366 	inc	r0
      002925 A6 07            [24] 7367 	mov	@r0,ar7
                                   7368 ;	calc.c:333: (void)stack_push(ctx->ps, d1);
      002927 E5*00            [12] 7369 	mov	a,_bp
      002929 24 0B            [12] 7370 	add	a,#0x0b
      00292B F8               [12] 7371 	mov	r0,a
      00292C 86 82            [24] 7372 	mov	dpl,@r0
      00292E 08               [12] 7373 	inc	r0
      00292F 86 83            [24] 7374 	mov	dph,@r0
      002931 08               [12] 7375 	inc	r0
      002932 86 F0            [24] 7376 	mov	b,@r0
      002934 12r00r00         [24] 7377 	lcall	__gptrget
      002937 FD               [12] 7378 	mov	r5,a
      002938 A3               [24] 7379 	inc	dptr
      002939 12r00r00         [24] 7380 	lcall	__gptrget
      00293C FE               [12] 7381 	mov	r6,a
      00293D A3               [24] 7382 	inc	dptr
      00293E 12r00r00         [24] 7383 	lcall	__gptrget
      002941 FF               [12] 7384 	mov	r7,a
      002942 E5*00            [12] 7385 	mov	a,_bp
      002944 24 19            [12] 7386 	add	a,#0x19
      002946 F8               [12] 7387 	mov	r0,a
      002947 E6               [12] 7388 	mov	a,@r0
      002948 C0 E0            [24] 7389 	push	acc
      00294A 08               [12] 7390 	inc	r0
      00294B E6               [12] 7391 	mov	a,@r0
      00294C C0 E0            [24] 7392 	push	acc
      00294E 08               [12] 7393 	inc	r0
      00294F E6               [12] 7394 	mov	a,@r0
      002950 C0 E0            [24] 7395 	push	acc
      002952 08               [12] 7396 	inc	r0
      002953 E6               [12] 7397 	mov	a,@r0
      002954 C0 E0            [24] 7398 	push	acc
      002956 8D 82            [24] 7399 	mov	dpl,r5
      002958 8E 83            [24] 7400 	mov	dph,r6
      00295A 8F F0            [24] 7401 	mov	b,r7
      00295C 12r00r00         [24] 7402 	lcall	_stack_push
      00295F E5 81            [12] 7403 	mov	a,sp
      002961 24 FC            [12] 7404 	add	a,#0xfc
      002963 F5 81            [12] 7405 	mov	sp,a
                                   7406 ;	calc.c:335: break;
      002965 02r2Ar46         [24] 7407 	ljmp	00249$
                                   7408 ;	calc.c:336: case '~':
      002968                       7409 00244$:
                                   7410 ;	calc.c:337: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      002968 E5*00            [12] 7411 	mov	a,_bp
      00296A 24 15            [12] 7412 	add	a,#0x15
      00296C FF               [12] 7413 	mov	r7,a
      00296D E5*00            [12] 7414 	mov	a,_bp
      00296F 24 0E            [12] 7415 	add	a,#0x0e
      002971 F8               [12] 7416 	mov	r0,a
      002972 A6 07            [24] 7417 	mov	@r0,ar7
      002974 08               [12] 7418 	inc	r0
      002975 76 00            [12] 7419 	mov	@r0,#0x00
      002977 08               [12] 7420 	inc	r0
      002978 76 40            [12] 7421 	mov	@r0,#0x40
      00297A E5*00            [12] 7422 	mov	a,_bp
      00297C 24 12            [12] 7423 	add	a,#0x12
      00297E F8               [12] 7424 	mov	r0,a
      00297F 74 13            [12] 7425 	mov	a,#0x13
      002981 26               [12] 7426 	add	a,@r0
      002982 FA               [12] 7427 	mov	r2,a
      002983 74 40            [12] 7428 	mov	a,#0x40
      002985 08               [12] 7429 	inc	r0
      002986 36               [12] 7430 	addc	a,@r0
      002987 FB               [12] 7431 	mov	r3,a
      002988 08               [12] 7432 	inc	r0
      002989 86 04            [24] 7433 	mov	ar4,@r0
      00298B 8A 82            [24] 7434 	mov	dpl,r2
      00298D 8B 83            [24] 7435 	mov	dph,r3
      00298F 8C F0            [24] 7436 	mov	b,r4
      002991 12r00r00         [24] 7437 	lcall	__gptrget
      002994 FD               [12] 7438 	mov	r5,a
      002995 A3               [24] 7439 	inc	dptr
      002996 12r00r00         [24] 7440 	lcall	__gptrget
      002999 FE               [12] 7441 	mov	r6,a
      00299A A3               [24] 7442 	inc	dptr
      00299B 12r00r00         [24] 7443 	lcall	__gptrget
      00299E FF               [12] 7444 	mov	r7,a
      00299F C0 04            [24] 7445 	push	ar4
      0029A1 C0 03            [24] 7446 	push	ar3
      0029A3 C0 02            [24] 7447 	push	ar2
      0029A5 E5*00            [12] 7448 	mov	a,_bp
      0029A7 24 0E            [12] 7449 	add	a,#0x0e
      0029A9 F8               [12] 7450 	mov	r0,a
      0029AA E6               [12] 7451 	mov	a,@r0
      0029AB C0 E0            [24] 7452 	push	acc
      0029AD 08               [12] 7453 	inc	r0
      0029AE E6               [12] 7454 	mov	a,@r0
      0029AF C0 E0            [24] 7455 	push	acc
      0029B1 08               [12] 7456 	inc	r0
      0029B2 E6               [12] 7457 	mov	a,@r0
      0029B3 C0 E0            [24] 7458 	push	acc
      0029B5 8D 82            [24] 7459 	mov	dpl,r5
      0029B7 8E 83            [24] 7460 	mov	dph,r6
      0029B9 8F F0            [24] 7461 	mov	b,r7
      0029BB 12r00r00         [24] 7462 	lcall	_stack_pop
      0029BE AE 82            [24] 7463 	mov	r6,dpl
      0029C0 AF 83            [24] 7464 	mov	r7,dph
      0029C2 15 81            [12] 7465 	dec	sp
      0029C4 15 81            [12] 7466 	dec	sp
      0029C6 15 81            [12] 7467 	dec	sp
      0029C8 D0 02            [24] 7468 	pop	ar2
      0029CA D0 03            [24] 7469 	pop	ar3
      0029CC D0 04            [24] 7470 	pop	ar4
      0029CE EE               [12] 7471 	mov	a,r6
      0029CF 4F               [12] 7472 	orl	a,r7
      0029D0 70 22            [24] 7473 	jnz	00246$
      0029D2 7Dr44            [12] 7474 	mov	r5,#___str_10
      0029D4 7Cs00            [12] 7475 	mov	r4,#(___str_10 >> 8)
      0029D6 7B 80            [12] 7476 	mov	r3,#0x80
                                   7477 ;	calc.c:51: return;
      0029D8                       7478 00496$:
                                   7479 ;	calc.c:49: for (; *s; s++) putchar(*s);
      0029D8 8D 82            [24] 7480 	mov	dpl,r5
      0029DA 8C 83            [24] 7481 	mov	dph,r4
      0029DC 8B F0            [24] 7482 	mov	b,r3
      0029DE 12r00r00         [24] 7483 	lcall	__gptrget
      0029E1 FF               [12] 7484 	mov	r7,a
      0029E2 60 62            [24] 7485 	jz	00249$
      0029E4 7E 00            [12] 7486 	mov	r6,#0x00
      0029E6 8F 82            [24] 7487 	mov	dpl,r7
      0029E8 8E 83            [24] 7488 	mov	dph,r6
      0029EA 12r00r00         [24] 7489 	lcall	_putchar
      0029ED 0D               [12] 7490 	inc	r5
                                   7491 ;	calc.c:337: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      0029EE BD 00 E7         [24] 7492 	cjne	r5,#0x00,00496$
      0029F1 0C               [12] 7493 	inc	r4
      0029F2 80 E4            [24] 7494 	sjmp	00496$
      0029F4                       7495 00246$:
                                   7496 ;	calc.c:339: d0 = ~d0;
      0029F4 E5*00            [12] 7497 	mov	a,_bp
      0029F6 24 15            [12] 7498 	add	a,#0x15
      0029F8 F8               [12] 7499 	mov	r0,a
      0029F9 E6               [12] 7500 	mov	a,@r0
      0029FA F4               [12] 7501 	cpl	a
      0029FB F6               [12] 7502 	mov	@r0,a
      0029FC 08               [12] 7503 	inc	r0
      0029FD E6               [12] 7504 	mov	a,@r0
      0029FE F4               [12] 7505 	cpl	a
      0029FF F6               [12] 7506 	mov	@r0,a
      002A00 08               [12] 7507 	inc	r0
      002A01 E6               [12] 7508 	mov	a,@r0
      002A02 F4               [12] 7509 	cpl	a
      002A03 F6               [12] 7510 	mov	@r0,a
      002A04 08               [12] 7511 	inc	r0
      002A05 E6               [12] 7512 	mov	a,@r0
      002A06 F4               [12] 7513 	cpl	a
      002A07 F6               [12] 7514 	mov	@r0,a
                                   7515 ;	calc.c:340: (void)stack_push(ctx->ps, d0);
      002A08 8A 82            [24] 7516 	mov	dpl,r2
      002A0A 8B 83            [24] 7517 	mov	dph,r3
      002A0C 8C F0            [24] 7518 	mov	b,r4
      002A0E 12r00r00         [24] 7519 	lcall	__gptrget
      002A11 FA               [12] 7520 	mov	r2,a
      002A12 A3               [24] 7521 	inc	dptr
      002A13 12r00r00         [24] 7522 	lcall	__gptrget
      002A16 FB               [12] 7523 	mov	r3,a
      002A17 A3               [24] 7524 	inc	dptr
      002A18 12r00r00         [24] 7525 	lcall	__gptrget
      002A1B FC               [12] 7526 	mov	r4,a
      002A1C E5*00            [12] 7527 	mov	a,_bp
      002A1E 24 15            [12] 7528 	add	a,#0x15
      002A20 F8               [12] 7529 	mov	r0,a
      002A21 E6               [12] 7530 	mov	a,@r0
      002A22 C0 E0            [24] 7531 	push	acc
      002A24 08               [12] 7532 	inc	r0
      002A25 E6               [12] 7533 	mov	a,@r0
      002A26 C0 E0            [24] 7534 	push	acc
      002A28 08               [12] 7535 	inc	r0
      002A29 E6               [12] 7536 	mov	a,@r0
      002A2A C0 E0            [24] 7537 	push	acc
      002A2C 08               [12] 7538 	inc	r0
      002A2D E6               [12] 7539 	mov	a,@r0
      002A2E C0 E0            [24] 7540 	push	acc
      002A30 8A 82            [24] 7541 	mov	dpl,r2
      002A32 8B 83            [24] 7542 	mov	dph,r3
      002A34 8C F0            [24] 7543 	mov	b,r4
      002A36 12r00r00         [24] 7544 	lcall	_stack_push
      002A39 E5 81            [12] 7545 	mov	a,sp
      002A3B 24 FC            [12] 7546 	add	a,#0xfc
      002A3D F5 81            [12] 7547 	mov	sp,a
                                   7548 ;	calc.c:342: break;
                                   7549 ;	calc.c:343: default:
      002A3F 80 05            [24] 7550 	sjmp	00249$
      002A41                       7551 00248$:
                                   7552 ;	calc.c:344: return UNDEF;
      002A41 90 80 00         [24] 7553 	mov	dptr,#0x8000
                                   7554 ;	calc.c:345: }
      002A44 80 03            [24] 7555 	sjmp	00498$
      002A46                       7556 00249$:
                                   7557 ;	calc.c:347: return 1;
      002A46 90 00 01         [24] 7558 	mov	dptr,#0x0001
      002A49                       7559 00498$:
                                   7560 ;	calc.c:348: }
      002A49 85*00 81         [24] 7561 	mov	sp,_bp
      002A4C D0*00            [24] 7562 	pop	_bp
      002A4E 22               [24] 7563 	ret
                                   7564 ;------------------------------------------------------------
                                   7565 ;Allocation info for local variables in function 'push_acc'
                                   7566 ;------------------------------------------------------------
                                   7567 ;delta                     Allocated to stack - _bp -5
                                   7568 ;_ctx                      Allocated to stack - _bp +5
                                   7569 ;ctx                       Allocated to registers r2 r3 r4 
                                   7570 ;__1310720125              Allocated to registers 
                                   7571 ;s                         Allocated to registers r5 r6 r7 
                                   7572 ;sloc0                     Allocated to stack - _bp +1
                                   7573 ;------------------------------------------------------------
                                   7574 ;	calc.c:350: static int push_acc(void *_ctx, delta_t *delta) __reentrant {
                                   7575 ;	-----------------------------------------
                                   7576 ;	 function push_acc
                                   7577 ;	-----------------------------------------
      002A4F                       7578 _push_acc:
      002A4F C0*00            [24] 7579 	push	_bp
      002A51 E5 81            [12] 7580 	mov	a,sp
      002A53 F5*00            [12] 7581 	mov	_bp,a
      002A55 24 07            [12] 7582 	add	a,#0x07
      002A57 F5 81            [12] 7583 	mov	sp,a
      002A59 C8               [12] 7584 	xch	a,r0
      002A5A E5*00            [12] 7585 	mov	a,_bp
      002A5C 24 05            [12] 7586 	add	a,#0x05
      002A5E C8               [12] 7587 	xch	a,r0
      002A5F A6 82            [24] 7588 	mov	@r0,dpl
      002A61 08               [12] 7589 	inc	r0
      002A62 A6 83            [24] 7590 	mov	@r0,dph
      002A64 08               [12] 7591 	inc	r0
      002A65 A6 F0            [24] 7592 	mov	@r0,b
                                   7593 ;	calc.c:351: calc_ctx_t *ctx = (calc_ctx_t *)_ctx;
      002A67 E5*00            [12] 7594 	mov	a,_bp
      002A69 24 05            [12] 7595 	add	a,#0x05
      002A6B F8               [12] 7596 	mov	r0,a
      002A6C 86 02            [24] 7597 	mov	ar2,@r0
      002A6E 08               [12] 7598 	inc	r0
      002A6F 86 03            [24] 7599 	mov	ar3,@r0
      002A71 08               [12] 7600 	inc	r0
      002A72 86 04            [24] 7601 	mov	ar4,@r0
                                   7602 ;	calc.c:355: ctx->acc_valid = 0;
      002A74 74 06            [12] 7603 	mov	a,#0x06
      002A76 2A               [12] 7604 	add	a,r2
      002A77 FD               [12] 7605 	mov	r5,a
      002A78 E4               [12] 7606 	clr	a
      002A79 3B               [12] 7607 	addc	a,r3
      002A7A FE               [12] 7608 	mov	r6,a
      002A7B 8C 07            [24] 7609 	mov	ar7,r4
      002A7D 8D 82            [24] 7610 	mov	dpl,r5
      002A7F 8E 83            [24] 7611 	mov	dph,r6
      002A81 8F F0            [24] 7612 	mov	b,r7
      002A83 E4               [12] 7613 	clr	a
      002A84 12r00r00         [24] 7614 	lcall	__gptrput
                                   7615 ;	calc.c:356: if (!stack_push(ctx->ps, ctx->acc)) printstr("\r\nstack overflow\r\n");
      002A87 74 02            [12] 7616 	mov	a,#0x02
      002A89 2A               [12] 7617 	add	a,r2
      002A8A FF               [12] 7618 	mov	r7,a
      002A8B E4               [12] 7619 	clr	a
      002A8C 3B               [12] 7620 	addc	a,r3
      002A8D FD               [12] 7621 	mov	r5,a
      002A8E 8C 06            [24] 7622 	mov	ar6,r4
      002A90 8F 82            [24] 7623 	mov	dpl,r7
      002A92 8D 83            [24] 7624 	mov	dph,r5
      002A94 8E F0            [24] 7625 	mov	b,r6
      002A96 A8*00            [24] 7626 	mov	r0,_bp
      002A98 08               [12] 7627 	inc	r0
      002A99 12r00r00         [24] 7628 	lcall	__gptrget
      002A9C F6               [12] 7629 	mov	@r0,a
      002A9D A3               [24] 7630 	inc	dptr
      002A9E 12r00r00         [24] 7631 	lcall	__gptrget
      002AA1 08               [12] 7632 	inc	r0
      002AA2 F6               [12] 7633 	mov	@r0,a
      002AA3 A3               [24] 7634 	inc	dptr
      002AA4 12r00r00         [24] 7635 	lcall	__gptrget
      002AA7 08               [12] 7636 	inc	r0
      002AA8 F6               [12] 7637 	mov	@r0,a
      002AA9 A3               [24] 7638 	inc	dptr
      002AAA 12r00r00         [24] 7639 	lcall	__gptrget
      002AAD 08               [12] 7640 	inc	r0
      002AAE F6               [12] 7641 	mov	@r0,a
      002AAF 74 13            [12] 7642 	mov	a,#0x13
      002AB1 2A               [12] 7643 	add	a,r2
      002AB2 FA               [12] 7644 	mov	r2,a
      002AB3 74 40            [12] 7645 	mov	a,#0x40
      002AB5 3B               [12] 7646 	addc	a,r3
      002AB6 FB               [12] 7647 	mov	r3,a
      002AB7 8C 07            [24] 7648 	mov	ar7,r4
      002AB9 8A 82            [24] 7649 	mov	dpl,r2
      002ABB 8B 83            [24] 7650 	mov	dph,r3
      002ABD 8F F0            [24] 7651 	mov	b,r7
      002ABF 12r00r00         [24] 7652 	lcall	__gptrget
      002AC2 FA               [12] 7653 	mov	r2,a
      002AC3 A3               [24] 7654 	inc	dptr
      002AC4 12r00r00         [24] 7655 	lcall	__gptrget
      002AC7 FB               [12] 7656 	mov	r3,a
      002AC8 A3               [24] 7657 	inc	dptr
      002AC9 12r00r00         [24] 7658 	lcall	__gptrget
      002ACC FF               [12] 7659 	mov	r7,a
      002ACD A8*00            [24] 7660 	mov	r0,_bp
      002ACF 08               [12] 7661 	inc	r0
      002AD0 E6               [12] 7662 	mov	a,@r0
      002AD1 C0 E0            [24] 7663 	push	acc
      002AD3 08               [12] 7664 	inc	r0
      002AD4 E6               [12] 7665 	mov	a,@r0
      002AD5 C0 E0            [24] 7666 	push	acc
      002AD7 08               [12] 7667 	inc	r0
      002AD8 E6               [12] 7668 	mov	a,@r0
      002AD9 C0 E0            [24] 7669 	push	acc
      002ADB 08               [12] 7670 	inc	r0
      002ADC E6               [12] 7671 	mov	a,@r0
      002ADD C0 E0            [24] 7672 	push	acc
      002ADF 8A 82            [24] 7673 	mov	dpl,r2
      002AE1 8B 83            [24] 7674 	mov	dph,r3
      002AE3 8F F0            [24] 7675 	mov	b,r7
      002AE5 12r00r00         [24] 7676 	lcall	_stack_push
      002AE8 AE 82            [24] 7677 	mov	r6,dpl
      002AEA AF 83            [24] 7678 	mov	r7,dph
      002AEC E5 81            [12] 7679 	mov	a,sp
      002AEE 24 FC            [12] 7680 	add	a,#0xfc
      002AF0 F5 81            [12] 7681 	mov	sp,a
      002AF2 EE               [12] 7682 	mov	a,r6
      002AF3 4F               [12] 7683 	orl	a,r7
      002AF4 70 22            [24] 7684 	jnz	00102$
      002AF6 7Dr93            [12] 7685 	mov	r5,#___str_13
      002AF8 7Es00            [12] 7686 	mov	r6,#(___str_13 >> 8)
      002AFA 7F 80            [12] 7687 	mov	r7,#0x80
                                   7688 ;	calc.c:51: return;
      002AFC                       7689 00109$:
                                   7690 ;	calc.c:49: for (; *s; s++) putchar(*s);
      002AFC 8D 82            [24] 7691 	mov	dpl,r5
      002AFE 8E 83            [24] 7692 	mov	dph,r6
      002B00 8F F0            [24] 7693 	mov	b,r7
      002B02 12r00r00         [24] 7694 	lcall	__gptrget
      002B05 FC               [12] 7695 	mov	r4,a
      002B06 60 10            [24] 7696 	jz	00102$
      002B08 7B 00            [12] 7697 	mov	r3,#0x00
      002B0A 8C 82            [24] 7698 	mov	dpl,r4
      002B0C 8B 83            [24] 7699 	mov	dph,r3
      002B0E 12r00r00         [24] 7700 	lcall	_putchar
      002B11 0D               [12] 7701 	inc	r5
                                   7702 ;	calc.c:356: if (!stack_push(ctx->ps, ctx->acc)) printstr("\r\nstack overflow\r\n");
      002B12 BD 00 E7         [24] 7703 	cjne	r5,#0x00,00109$
      002B15 0E               [12] 7704 	inc	r6
      002B16 80 E4            [24] 7705 	sjmp	00109$
      002B18                       7706 00102$:
                                   7707 ;	calc.c:358: if (delta->event == EVENT_OP) return operator(_ctx, delta);
      002B18 E5*00            [12] 7708 	mov	a,_bp
      002B1A 24 FB            [12] 7709 	add	a,#0xfb
      002B1C F8               [12] 7710 	mov	r0,a
      002B1D 86 05            [24] 7711 	mov	ar5,@r0
      002B1F 08               [12] 7712 	inc	r0
      002B20 86 06            [24] 7713 	mov	ar6,@r0
      002B22 08               [12] 7714 	inc	r0
      002B23 86 07            [24] 7715 	mov	ar7,@r0
      002B25 74 02            [12] 7716 	mov	a,#0x02
      002B27 2D               [12] 7717 	add	a,r5
      002B28 FA               [12] 7718 	mov	r2,a
      002B29 E4               [12] 7719 	clr	a
      002B2A 3E               [12] 7720 	addc	a,r6
      002B2B FB               [12] 7721 	mov	r3,a
      002B2C 8F 04            [24] 7722 	mov	ar4,r7
      002B2E 8A 82            [24] 7723 	mov	dpl,r2
      002B30 8B 83            [24] 7724 	mov	dph,r3
      002B32 8C F0            [24] 7725 	mov	b,r4
      002B34 12r00r00         [24] 7726 	lcall	__gptrget
      002B37 FA               [12] 7727 	mov	r2,a
      002B38 A3               [24] 7728 	inc	dptr
      002B39 12r00r00         [24] 7729 	lcall	__gptrget
      002B3C FB               [12] 7730 	mov	r3,a
      002B3D BA 02 29         [24] 7731 	cjne	r2,#0x02,00104$
      002B40 BB 00 26         [24] 7732 	cjne	r3,#0x00,00104$
      002B43 C0 05            [24] 7733 	push	ar5
      002B45 C0 06            [24] 7734 	push	ar6
      002B47 C0 07            [24] 7735 	push	ar7
      002B49 E5*00            [12] 7736 	mov	a,_bp
      002B4B 24 05            [12] 7737 	add	a,#0x05
      002B4D F8               [12] 7738 	mov	r0,a
      002B4E 86 82            [24] 7739 	mov	dpl,@r0
      002B50 08               [12] 7740 	inc	r0
      002B51 86 83            [24] 7741 	mov	dph,@r0
      002B53 08               [12] 7742 	inc	r0
      002B54 86 F0            [24] 7743 	mov	b,@r0
      002B56 12r07rC1         [24] 7744 	lcall	_operator
      002B59 AE 82            [24] 7745 	mov	r6,dpl
      002B5B AF 83            [24] 7746 	mov	r7,dph
      002B5D 15 81            [12] 7747 	dec	sp
      002B5F 15 81            [12] 7748 	dec	sp
      002B61 15 81            [12] 7749 	dec	sp
      002B63 8E 82            [24] 7750 	mov	dpl,r6
      002B65 8F 83            [24] 7751 	mov	dph,r7
      002B67 80 03            [24] 7752 	sjmp	00111$
      002B69                       7753 00104$:
                                   7754 ;	calc.c:359: else return 1;
      002B69 90 00 01         [24] 7755 	mov	dptr,#0x0001
      002B6C                       7756 00111$:
                                   7757 ;	calc.c:360: }
      002B6C 85*00 81         [24] 7758 	mov	sp,_bp
      002B6F D0*00            [24] 7759 	pop	_bp
      002B71 22               [24] 7760 	ret
                                   7761 ;------------------------------------------------------------
                                   7762 ;Allocation info for local variables in function 'reset_acc'
                                   7763 ;------------------------------------------------------------
                                   7764 ;delta                     Allocated to stack - _bp -5
                                   7765 ;_ctx                      Allocated to registers r5 r6 r7 
                                   7766 ;ctx                       Allocated to registers r5 r6 r7 
                                   7767 ;------------------------------------------------------------
                                   7768 ;	calc.c:362: static int reset_acc(void *_ctx, delta_t *delta) __reentrant {
                                   7769 ;	-----------------------------------------
                                   7770 ;	 function reset_acc
                                   7771 ;	-----------------------------------------
      002B72                       7772 _reset_acc:
      002B72 C0*00            [24] 7773 	push	_bp
      002B74 85 81*00         [24] 7774 	mov	_bp,sp
      002B77 AD 82            [24] 7775 	mov	r5,dpl
      002B79 AE 83            [24] 7776 	mov	r6,dph
      002B7B AF F0            [24] 7777 	mov	r7,b
                                   7778 ;	calc.c:363: calc_ctx_t *ctx = (calc_ctx_t *)_ctx;
                                   7779 ;	calc.c:365: if (delta->event == EVENT_RSTA_I) ctx->acc_valid = 0;
      002B7D E5*00            [12] 7780 	mov	a,_bp
      002B7F 24 FB            [12] 7781 	add	a,#0xfb
      002B81 F8               [12] 7782 	mov	r0,a
      002B82 86 02            [24] 7783 	mov	ar2,@r0
      002B84 08               [12] 7784 	inc	r0
      002B85 86 03            [24] 7785 	mov	ar3,@r0
      002B87 08               [12] 7786 	inc	r0
      002B88 86 04            [24] 7787 	mov	ar4,@r0
      002B8A 74 02            [12] 7788 	mov	a,#0x02
      002B8C 2A               [12] 7789 	add	a,r2
      002B8D FA               [12] 7790 	mov	r2,a
      002B8E E4               [12] 7791 	clr	a
      002B8F 3B               [12] 7792 	addc	a,r3
      002B90 FB               [12] 7793 	mov	r3,a
      002B91 8A 82            [24] 7794 	mov	dpl,r2
      002B93 8B 83            [24] 7795 	mov	dph,r3
      002B95 8C F0            [24] 7796 	mov	b,r4
      002B97 12r00r00         [24] 7797 	lcall	__gptrget
      002B9A FA               [12] 7798 	mov	r2,a
      002B9B A3               [24] 7799 	inc	dptr
      002B9C 12r00r00         [24] 7800 	lcall	__gptrget
      002B9F FB               [12] 7801 	mov	r3,a
      002BA0 BA 07 16         [24] 7802 	cjne	r2,#0x07,00102$
      002BA3 BB 00 13         [24] 7803 	cjne	r3,#0x00,00102$
      002BA6 74 06            [12] 7804 	mov	a,#0x06
      002BA8 2D               [12] 7805 	add	a,r5
      002BA9 FA               [12] 7806 	mov	r2,a
      002BAA E4               [12] 7807 	clr	a
      002BAB 3E               [12] 7808 	addc	a,r6
      002BAC FB               [12] 7809 	mov	r3,a
      002BAD 8F 04            [24] 7810 	mov	ar4,r7
      002BAF 8A 82            [24] 7811 	mov	dpl,r2
      002BB1 8B 83            [24] 7812 	mov	dph,r3
      002BB3 8C F0            [24] 7813 	mov	b,r4
      002BB5 E4               [12] 7814 	clr	a
      002BB6 12r00r00         [24] 7815 	lcall	__gptrput
      002BB9                       7816 00102$:
                                   7817 ;	calc.c:366: ctx->acc = 0l;
      002BB9 74 02            [12] 7818 	mov	a,#0x02
      002BBB 2D               [12] 7819 	add	a,r5
      002BBC FD               [12] 7820 	mov	r5,a
      002BBD E4               [12] 7821 	clr	a
      002BBE 3E               [12] 7822 	addc	a,r6
      002BBF FE               [12] 7823 	mov	r6,a
      002BC0 8D 82            [24] 7824 	mov	dpl,r5
      002BC2 8E 83            [24] 7825 	mov	dph,r6
      002BC4 8F F0            [24] 7826 	mov	b,r7
      002BC6 E4               [12] 7827 	clr	a
      002BC7 12r00r00         [24] 7828 	lcall	__gptrput
      002BCA A3               [24] 7829 	inc	dptr
      002BCB 12r00r00         [24] 7830 	lcall	__gptrput
      002BCE A3               [24] 7831 	inc	dptr
      002BCF 12r00r00         [24] 7832 	lcall	__gptrput
      002BD2 A3               [24] 7833 	inc	dptr
      002BD3 12r00r00         [24] 7834 	lcall	__gptrput
                                   7835 ;	calc.c:368: return 1;
      002BD6 90 00 01         [24] 7836 	mov	dptr,#0x0001
                                   7837 ;	calc.c:369: }
      002BD9 D0*00            [24] 7838 	pop	_bp
      002BDB 22               [24] 7839 	ret
                                   7840 ;------------------------------------------------------------
                                   7841 ;Allocation info for local variables in function 'reset_base'
                                   7842 ;------------------------------------------------------------
                                   7843 ;delta                     Allocated to stack - _bp -5
                                   7844 ;_ctx                      Allocated to registers r5 r6 r7 
                                   7845 ;ctx                       Allocated to registers r5 r6 r7 
                                   7846 ;------------------------------------------------------------
                                   7847 ;	calc.c:371: static int reset_base(void *_ctx, delta_t *delta) __reentrant {
                                   7848 ;	-----------------------------------------
                                   7849 ;	 function reset_base
                                   7850 ;	-----------------------------------------
      002BDC                       7851 _reset_base:
      002BDC C0*00            [24] 7852 	push	_bp
      002BDE 85 81*00         [24] 7853 	mov	_bp,sp
      002BE1 AD 82            [24] 7854 	mov	r5,dpl
      002BE3 AE 83            [24] 7855 	mov	r6,dph
      002BE5 AF F0            [24] 7856 	mov	r7,b
                                   7857 ;	calc.c:372: calc_ctx_t *ctx = (calc_ctx_t *)_ctx;
                                   7858 ;	calc.c:376: switch (ctx->digit[0]) {
      002BE7 74 07            [12] 7859 	mov	a,#0x07
      002BE9 2D               [12] 7860 	add	a,r5
      002BEA FA               [12] 7861 	mov	r2,a
      002BEB E4               [12] 7862 	clr	a
      002BEC 3E               [12] 7863 	addc	a,r6
      002BED FB               [12] 7864 	mov	r3,a
      002BEE 8F 04            [24] 7865 	mov	ar4,r7
      002BF0 8A 82            [24] 7866 	mov	dpl,r2
      002BF2 8B 83            [24] 7867 	mov	dph,r3
      002BF4 8C F0            [24] 7868 	mov	b,r4
      002BF6 12r00r00         [24] 7869 	lcall	__gptrget
      002BF9 FC               [12] 7870 	mov	r4,a
      002BFA BC 48 02         [24] 7871 	cjne	r4,#0x48,00124$
      002BFD 80 0F            [24] 7872 	sjmp	00101$
      002BFF                       7873 00124$:
      002BFF BC 4F 02         [24] 7874 	cjne	r4,#0x4f,00125$
      002C02 80 2E            [24] 7875 	sjmp	00103$
      002C04                       7876 00125$:
      002C04 BC 68 02         [24] 7877 	cjne	r4,#0x68,00126$
      002C07 80 17            [24] 7878 	sjmp	00102$
      002C09                       7879 00126$:
                                   7880 ;	calc.c:377: case 'H':
      002C09 BC 6F 48         [24] 7881 	cjne	r4,#0x6f,00105$
      002C0C 80 36            [24] 7882 	sjmp	00104$
      002C0E                       7883 00101$:
                                   7884 ;	calc.c:378: ctx->base = 16;
      002C0E 8D 82            [24] 7885 	mov	dpl,r5
      002C10 8E 83            [24] 7886 	mov	dph,r6
      002C12 8F F0            [24] 7887 	mov	b,r7
      002C14 74 10            [12] 7888 	mov	a,#0x10
      002C16 12r00r00         [24] 7889 	lcall	__gptrput
      002C19 A3               [24] 7890 	inc	dptr
      002C1A E4               [12] 7891 	clr	a
      002C1B 12r00r00         [24] 7892 	lcall	__gptrput
                                   7893 ;	calc.c:379: break;
                                   7894 ;	calc.c:380: case 'h':
      002C1E 80 34            [24] 7895 	sjmp	00105$
      002C20                       7896 00102$:
                                   7897 ;	calc.c:381: ctx->base = 10;
      002C20 8D 82            [24] 7898 	mov	dpl,r5
      002C22 8E 83            [24] 7899 	mov	dph,r6
      002C24 8F F0            [24] 7900 	mov	b,r7
      002C26 74 0A            [12] 7901 	mov	a,#0x0a
      002C28 12r00r00         [24] 7902 	lcall	__gptrput
      002C2B A3               [24] 7903 	inc	dptr
      002C2C E4               [12] 7904 	clr	a
      002C2D 12r00r00         [24] 7905 	lcall	__gptrput
                                   7906 ;	calc.c:382: break;
                                   7907 ;	calc.c:383: case 'O':
      002C30 80 22            [24] 7908 	sjmp	00105$
      002C32                       7909 00103$:
                                   7910 ;	calc.c:384: ctx->base = 8;
      002C32 8D 82            [24] 7911 	mov	dpl,r5
      002C34 8E 83            [24] 7912 	mov	dph,r6
      002C36 8F F0            [24] 7913 	mov	b,r7
      002C38 74 08            [12] 7914 	mov	a,#0x08
      002C3A 12r00r00         [24] 7915 	lcall	__gptrput
      002C3D A3               [24] 7916 	inc	dptr
      002C3E E4               [12] 7917 	clr	a
      002C3F 12r00r00         [24] 7918 	lcall	__gptrput
                                   7919 ;	calc.c:385: break;
                                   7920 ;	calc.c:386: case 'o':
      002C42 80 10            [24] 7921 	sjmp	00105$
      002C44                       7922 00104$:
                                   7923 ;	calc.c:387: ctx->base = 2;
      002C44 8D 82            [24] 7924 	mov	dpl,r5
      002C46 8E 83            [24] 7925 	mov	dph,r6
      002C48 8F F0            [24] 7926 	mov	b,r7
      002C4A 74 02            [12] 7927 	mov	a,#0x02
      002C4C 12r00r00         [24] 7928 	lcall	__gptrput
      002C4F A3               [24] 7929 	inc	dptr
      002C50 E4               [12] 7930 	clr	a
      002C51 12r00r00         [24] 7931 	lcall	__gptrput
                                   7932 ;	calc.c:389: }
      002C54                       7933 00105$:
                                   7934 ;	calc.c:391: return 1;
      002C54 90 00 01         [24] 7935 	mov	dptr,#0x0001
                                   7936 ;	calc.c:392: }
      002C57 D0*00            [24] 7937 	pop	_bp
      002C59 22               [24] 7938 	ret
                                   7939 ;------------------------------------------------------------
                                   7940 ;Allocation info for local variables in function 'status'
                                   7941 ;------------------------------------------------------------
                                   7942 ;delta                     Allocated to stack - _bp -5
                                   7943 ;_ctx                      Allocated to registers r5 r6 r7 
                                   7944 ;ctx                       Allocated to stack - _bp +7
                                   7945 ;vals                      Allocated to stack - _bp +12
                                   7946 ;n                         Allocated to stack - _bp +10
                                   7947 ;__1310720127              Allocated to registers 
                                   7948 ;d                         Allocated to stack - _bp +20
                                   7949 ;mask                      Allocated to stack - _bp +24
                                   7950 ;__1310720129              Allocated to registers 
                                   7951 ;s                         Allocated to registers r2 r3 r4 
                                   7952 ;__1966080131              Allocated to registers 
                                   7953 ;d                         Allocated to stack - _bp +20
                                   7954 ;mask                      Allocated to stack - _bp +24
                                   7955 ;__1310720133              Allocated to registers 
                                   7956 ;s                         Allocated to registers r2 r3 r4 
                                   7957 ;__1966080135              Allocated to registers 
                                   7958 ;d                         Allocated to stack - _bp +20
                                   7959 ;mask                      Allocated to stack - _bp +24
                                   7960 ;__1310720137              Allocated to registers 
                                   7961 ;s                         Allocated to registers r2 r3 r4 
                                   7962 ;__1310720139              Allocated to registers 
                                   7963 ;s                         Allocated to registers r3 r4 r5 
                                   7964 ;__1966080141              Allocated to registers 
                                   7965 ;d                         Allocated to stack - _bp +20
                                   7966 ;mask                      Allocated to stack - _bp +24
                                   7967 ;__1310720143              Allocated to registers 
                                   7968 ;s                         Allocated to registers r5 r6 r7 
                                   7969 ;__1966080145              Allocated to registers 
                                   7970 ;d                         Allocated to stack - _bp +20
                                   7971 ;mask                      Allocated to stack - _bp +24
                                   7972 ;__1310720147              Allocated to registers 
                                   7973 ;s                         Allocated to registers r5 r6 r7 
                                   7974 ;sloc0                     Allocated to stack - _bp +1
                                   7975 ;sloc1                     Allocated to stack - _bp +4
                                   7976 ;------------------------------------------------------------
                                   7977 ;	calc.c:394: static int status(void *_ctx, delta_t *delta) __reentrant {
                                   7978 ;	-----------------------------------------
                                   7979 ;	 function status
                                   7980 ;	-----------------------------------------
      002C5A                       7981 _status:
      002C5A C0*00            [24] 7982 	push	_bp
      002C5C E5 81            [12] 7983 	mov	a,sp
      002C5E F5*00            [12] 7984 	mov	_bp,a
      002C60 24 1B            [12] 7985 	add	a,#0x1b
      002C62 F5 81            [12] 7986 	mov	sp,a
      002C64 AD 82            [24] 7987 	mov	r5,dpl
      002C66 AE 83            [24] 7988 	mov	r6,dph
      002C68 AF F0            [24] 7989 	mov	r7,b
                                   7990 ;	calc.c:395: calc_ctx_t *ctx = (calc_ctx_t *)_ctx;
      002C6A E5*00            [12] 7991 	mov	a,_bp
      002C6C 24 07            [12] 7992 	add	a,#0x07
      002C6E F8               [12] 7993 	mov	r0,a
      002C6F A6 05            [24] 7994 	mov	@r0,ar5
      002C71 08               [12] 7995 	inc	r0
      002C72 A6 06            [24] 7996 	mov	@r0,ar6
      002C74 08               [12] 7997 	inc	r0
      002C75 A6 07            [24] 7998 	mov	@r0,ar7
                                   7999 ;	calc.c:401: printf("\r\nbase = %d, ", ctx->base);
      002C77 E5*00            [12] 8000 	mov	a,_bp
      002C79 24 07            [12] 8001 	add	a,#0x07
      002C7B F8               [12] 8002 	mov	r0,a
      002C7C 86 82            [24] 8003 	mov	dpl,@r0
      002C7E 08               [12] 8004 	inc	r0
      002C7F 86 83            [24] 8005 	mov	dph,@r0
      002C81 08               [12] 8006 	inc	r0
      002C82 86 F0            [24] 8007 	mov	b,@r0
      002C84 12r00r00         [24] 8008 	lcall	__gptrget
      002C87 FB               [12] 8009 	mov	r3,a
      002C88 A3               [24] 8010 	inc	dptr
      002C89 12r00r00         [24] 8011 	lcall	__gptrget
      002C8C FC               [12] 8012 	mov	r4,a
      002C8D C0 03            [24] 8013 	push	ar3
      002C8F C0 04            [24] 8014 	push	ar4
      002C91 74rBB            [12] 8015 	mov	a,#___str_15
      002C93 C0 E0            [24] 8016 	push	acc
      002C95 74s00            [12] 8017 	mov	a,#(___str_15 >> 8)
      002C97 C0 E0            [24] 8018 	push	acc
      002C99 74 80            [12] 8019 	mov	a,#0x80
      002C9B C0 E0            [24] 8020 	push	acc
      002C9D 12r00r00         [24] 8021 	lcall	_printf
      002CA0 E5 81            [12] 8022 	mov	a,sp
      002CA2 24 FB            [12] 8023 	add	a,#0xfb
      002CA4 F5 81            [12] 8024 	mov	sp,a
                                   8025 ;	calc.c:402: printf("acc = %ld / ", ctx->acc);
      002CA6 E5*00            [12] 8026 	mov	a,_bp
      002CA8 24 07            [12] 8027 	add	a,#0x07
      002CAA F8               [12] 8028 	mov	r0,a
      002CAB A9*00            [24] 8029 	mov	r1,_bp
      002CAD 09               [12] 8030 	inc	r1
      002CAE 74 02            [12] 8031 	mov	a,#0x02
      002CB0 26               [12] 8032 	add	a,@r0
      002CB1 F7               [12] 8033 	mov	@r1,a
      002CB2 E4               [12] 8034 	clr	a
      002CB3 08               [12] 8035 	inc	r0
      002CB4 36               [12] 8036 	addc	a,@r0
      002CB5 09               [12] 8037 	inc	r1
      002CB6 F7               [12] 8038 	mov	@r1,a
      002CB7 08               [12] 8039 	inc	r0
      002CB8 09               [12] 8040 	inc	r1
      002CB9 E6               [12] 8041 	mov	a,@r0
      002CBA F7               [12] 8042 	mov	@r1,a
      002CBB A8*00            [24] 8043 	mov	r0,_bp
      002CBD 08               [12] 8044 	inc	r0
      002CBE 86 82            [24] 8045 	mov	dpl,@r0
      002CC0 08               [12] 8046 	inc	r0
      002CC1 86 83            [24] 8047 	mov	dph,@r0
      002CC3 08               [12] 8048 	inc	r0
      002CC4 86 F0            [24] 8049 	mov	b,@r0
      002CC6 12r00r00         [24] 8050 	lcall	__gptrget
      002CC9 FC               [12] 8051 	mov	r4,a
      002CCA A3               [24] 8052 	inc	dptr
      002CCB 12r00r00         [24] 8053 	lcall	__gptrget
      002CCE FD               [12] 8054 	mov	r5,a
      002CCF A3               [24] 8055 	inc	dptr
      002CD0 12r00r00         [24] 8056 	lcall	__gptrget
      002CD3 FE               [12] 8057 	mov	r6,a
      002CD4 A3               [24] 8058 	inc	dptr
      002CD5 12r00r00         [24] 8059 	lcall	__gptrget
      002CD8 FF               [12] 8060 	mov	r7,a
      002CD9 C0 04            [24] 8061 	push	ar4
      002CDB C0 05            [24] 8062 	push	ar5
      002CDD C0 06            [24] 8063 	push	ar6
      002CDF C0 07            [24] 8064 	push	ar7
      002CE1 74rC9            [12] 8065 	mov	a,#___str_16
      002CE3 C0 E0            [24] 8066 	push	acc
      002CE5 74s00            [12] 8067 	mov	a,#(___str_16 >> 8)
      002CE7 C0 E0            [24] 8068 	push	acc
      002CE9 74 80            [12] 8069 	mov	a,#0x80
      002CEB C0 E0            [24] 8070 	push	acc
      002CED 12r00r00         [24] 8071 	lcall	_printf
      002CF0 E5 81            [12] 8072 	mov	a,sp
      002CF2 24 F9            [12] 8073 	add	a,#0xf9
      002CF4 F5 81            [12] 8074 	mov	sp,a
                                   8075 ;	calc.c:403: printf("%08lx / ", ctx->acc);
      002CF6 A8*00            [24] 8076 	mov	r0,_bp
      002CF8 08               [12] 8077 	inc	r0
      002CF9 86 82            [24] 8078 	mov	dpl,@r0
      002CFB 08               [12] 8079 	inc	r0
      002CFC 86 83            [24] 8080 	mov	dph,@r0
      002CFE 08               [12] 8081 	inc	r0
      002CFF 86 F0            [24] 8082 	mov	b,@r0
      002D01 12r00r00         [24] 8083 	lcall	__gptrget
      002D04 FC               [12] 8084 	mov	r4,a
      002D05 A3               [24] 8085 	inc	dptr
      002D06 12r00r00         [24] 8086 	lcall	__gptrget
      002D09 FD               [12] 8087 	mov	r5,a
      002D0A A3               [24] 8088 	inc	dptr
      002D0B 12r00r00         [24] 8089 	lcall	__gptrget
      002D0E FE               [12] 8090 	mov	r6,a
      002D0F A3               [24] 8091 	inc	dptr
      002D10 12r00r00         [24] 8092 	lcall	__gptrget
      002D13 FF               [12] 8093 	mov	r7,a
      002D14 C0 04            [24] 8094 	push	ar4
      002D16 C0 05            [24] 8095 	push	ar5
      002D18 C0 06            [24] 8096 	push	ar6
      002D1A C0 07            [24] 8097 	push	ar7
      002D1C 74r27            [12] 8098 	mov	a,#___str_4
      002D1E C0 E0            [24] 8099 	push	acc
      002D20 74s00            [12] 8100 	mov	a,#(___str_4 >> 8)
      002D22 C0 E0            [24] 8101 	push	acc
      002D24 74 80            [12] 8102 	mov	a,#0x80
      002D26 C0 E0            [24] 8103 	push	acc
      002D28 12r00r00         [24] 8104 	lcall	_printf
      002D2B E5 81            [12] 8105 	mov	a,sp
      002D2D 24 F9            [12] 8106 	add	a,#0xf9
      002D2F F5 81            [12] 8107 	mov	sp,a
                                   8108 ;	calc.c:404: printbin(ctx->acc);
      002D31 A8*00            [24] 8109 	mov	r0,_bp
      002D33 08               [12] 8110 	inc	r0
      002D34 86 82            [24] 8111 	mov	dpl,@r0
      002D36 08               [12] 8112 	inc	r0
      002D37 86 83            [24] 8113 	mov	dph,@r0
      002D39 08               [12] 8114 	inc	r0
      002D3A 86 F0            [24] 8115 	mov	b,@r0
      002D3C E5*00            [12] 8116 	mov	a,_bp
      002D3E 24 14            [12] 8117 	add	a,#0x14
      002D40 F9               [12] 8118 	mov	r1,a
      002D41 12r00r00         [24] 8119 	lcall	__gptrget
      002D44 F7               [12] 8120 	mov	@r1,a
      002D45 A3               [24] 8121 	inc	dptr
      002D46 12r00r00         [24] 8122 	lcall	__gptrget
      002D49 09               [12] 8123 	inc	r1
      002D4A F7               [12] 8124 	mov	@r1,a
      002D4B A3               [24] 8125 	inc	dptr
      002D4C 12r00r00         [24] 8126 	lcall	__gptrget
      002D4F 09               [12] 8127 	inc	r1
      002D50 F7               [12] 8128 	mov	@r1,a
      002D51 A3               [24] 8129 	inc	dptr
      002D52 12r00r00         [24] 8130 	lcall	__gptrget
      002D55 09               [12] 8131 	inc	r1
      002D56 F7               [12] 8132 	mov	@r1,a
                                   8133 ;	calc.c:57: for (mask = 0x80000000lu; mask; mask >>= 1)
      002D57 E5*00            [12] 8134 	mov	a,_bp
      002D59 24 18            [12] 8135 	add	a,#0x18
      002D5B F8               [12] 8136 	mov	r0,a
      002D5C E4               [12] 8137 	clr	a
      002D5D F6               [12] 8138 	mov	@r0,a
      002D5E 08               [12] 8139 	inc	r0
      002D5F F6               [12] 8140 	mov	@r0,a
      002D60 08               [12] 8141 	inc	r0
      002D61 F6               [12] 8142 	mov	@r0,a
      002D62 08               [12] 8143 	inc	r0
      002D63 76 80            [12] 8144 	mov	@r0,#0x80
      002D65                       8145 00131$:
                                   8146 ;	calc.c:58: (void)putchar((d & mask) ? (int)'1' : (int)'0');
      002D65 E5*00            [12] 8147 	mov	a,_bp
      002D67 24 14            [12] 8148 	add	a,#0x14
      002D69 F8               [12] 8149 	mov	r0,a
      002D6A 86 04            [24] 8150 	mov	ar4,@r0
      002D6C 08               [12] 8151 	inc	r0
      002D6D 86 05            [24] 8152 	mov	ar5,@r0
      002D6F 08               [12] 8153 	inc	r0
      002D70 86 06            [24] 8154 	mov	ar6,@r0
      002D72 08               [12] 8155 	inc	r0
      002D73 86 07            [24] 8156 	mov	ar7,@r0
      002D75 E5*00            [12] 8157 	mov	a,_bp
      002D77 24 18            [12] 8158 	add	a,#0x18
      002D79 F8               [12] 8159 	mov	r0,a
      002D7A E6               [12] 8160 	mov	a,@r0
      002D7B 52 04            [12] 8161 	anl	ar4,a
      002D7D 08               [12] 8162 	inc	r0
      002D7E E6               [12] 8163 	mov	a,@r0
      002D7F 52 05            [12] 8164 	anl	ar5,a
      002D81 08               [12] 8165 	inc	r0
      002D82 E6               [12] 8166 	mov	a,@r0
      002D83 52 06            [12] 8167 	anl	ar6,a
      002D85 08               [12] 8168 	inc	r0
      002D86 E6               [12] 8169 	mov	a,@r0
      002D87 52 07            [12] 8170 	anl	ar7,a
      002D89 EC               [12] 8171 	mov	a,r4
      002D8A 4D               [12] 8172 	orl	a,r5
      002D8B 4E               [12] 8173 	orl	a,r6
      002D8C 4F               [12] 8174 	orl	a,r7
      002D8D 60 06            [24] 8175 	jz	00161$
      002D8F 7E 31            [12] 8176 	mov	r6,#0x31
      002D91 7F 00            [12] 8177 	mov	r7,#0x00
      002D93 80 04            [24] 8178 	sjmp	00162$
      002D95                       8179 00161$:
      002D95 7E 30            [12] 8180 	mov	r6,#0x30
      002D97 7F 00            [12] 8181 	mov	r7,#0x00
      002D99                       8182 00162$:
      002D99 8E 82            [24] 8183 	mov	dpl,r6
      002D9B 8F 83            [24] 8184 	mov	dph,r7
      002D9D 12r00r00         [24] 8185 	lcall	_putchar
                                   8186 ;	calc.c:57: for (mask = 0x80000000lu; mask; mask >>= 1)
      002DA0 E5*00            [12] 8187 	mov	a,_bp
      002DA2 24 18            [12] 8188 	add	a,#0x18
      002DA4 F8               [12] 8189 	mov	r0,a
      002DA5 08               [12] 8190 	inc	r0
      002DA6 08               [12] 8191 	inc	r0
      002DA7 08               [12] 8192 	inc	r0
      002DA8 E6               [12] 8193 	mov	a,@r0
      002DA9 C3               [12] 8194 	clr	c
      002DAA 13               [12] 8195 	rrc	a
      002DAB F6               [12] 8196 	mov	@r0,a
      002DAC 18               [12] 8197 	dec	r0
      002DAD E6               [12] 8198 	mov	a,@r0
      002DAE 13               [12] 8199 	rrc	a
      002DAF F6               [12] 8200 	mov	@r0,a
      002DB0 18               [12] 8201 	dec	r0
      002DB1 E6               [12] 8202 	mov	a,@r0
      002DB2 13               [12] 8203 	rrc	a
      002DB3 F6               [12] 8204 	mov	@r0,a
      002DB4 18               [12] 8205 	dec	r0
      002DB5 E6               [12] 8206 	mov	a,@r0
      002DB6 13               [12] 8207 	rrc	a
      002DB7 F6               [12] 8208 	mov	@r0,a
      002DB8 E5*00            [12] 8209 	mov	a,_bp
      002DBA 24 18            [12] 8210 	add	a,#0x18
      002DBC F8               [12] 8211 	mov	r0,a
      002DBD E6               [12] 8212 	mov	a,@r0
      002DBE 08               [12] 8213 	inc	r0
      002DBF 46               [12] 8214 	orl	a,@r0
      002DC0 08               [12] 8215 	inc	r0
      002DC1 46               [12] 8216 	orl	a,@r0
      002DC2 08               [12] 8217 	inc	r0
      002DC3 46               [12] 8218 	orl	a,@r0
      002DC4 70 9F            [24] 8219 	jnz	00131$
                                   8220 ;	calc.c:405: printf(", acc_valid = %d\r\n", (int)ctx->acc_valid);
      002DC6 E5*00            [12] 8221 	mov	a,_bp
      002DC8 24 07            [12] 8222 	add	a,#0x07
      002DCA F8               [12] 8223 	mov	r0,a
      002DCB 74 06            [12] 8224 	mov	a,#0x06
      002DCD 26               [12] 8225 	add	a,@r0
      002DCE FD               [12] 8226 	mov	r5,a
      002DCF E4               [12] 8227 	clr	a
      002DD0 08               [12] 8228 	inc	r0
      002DD1 36               [12] 8229 	addc	a,@r0
      002DD2 FE               [12] 8230 	mov	r6,a
      002DD3 08               [12] 8231 	inc	r0
      002DD4 86 07            [24] 8232 	mov	ar7,@r0
      002DD6 8D 82            [24] 8233 	mov	dpl,r5
      002DD8 8E 83            [24] 8234 	mov	dph,r6
      002DDA 8F F0            [24] 8235 	mov	b,r7
      002DDC 12r00r00         [24] 8236 	lcall	__gptrget
      002DDF FD               [12] 8237 	mov	r5,a
      002DE0 7F 00            [12] 8238 	mov	r7,#0x00
      002DE2 C0 05            [24] 8239 	push	ar5
      002DE4 C0 07            [24] 8240 	push	ar7
      002DE6 74rD6            [12] 8241 	mov	a,#___str_17
      002DE8 C0 E0            [24] 8242 	push	acc
      002DEA 74s00            [12] 8243 	mov	a,#(___str_17 >> 8)
      002DEC C0 E0            [24] 8244 	push	acc
      002DEE 74 80            [12] 8245 	mov	a,#0x80
      002DF0 C0 E0            [24] 8246 	push	acc
      002DF2 12r00r00         [24] 8247 	lcall	_printf
      002DF5 E5 81            [12] 8248 	mov	a,sp
      002DF7 24 FB            [12] 8249 	add	a,#0xfb
      002DF9 F5 81            [12] 8250 	mov	sp,a
                                   8251 ;	calc.c:406: printf("primary = %p, secondary = %p\r\n", ctx->ps, ctx->ss);
      002DFB E5*00            [12] 8252 	mov	a,_bp
      002DFD 24 07            [12] 8253 	add	a,#0x07
      002DFF F8               [12] 8254 	mov	r0,a
      002E00 74 16            [12] 8255 	mov	a,#0x16
      002E02 26               [12] 8256 	add	a,@r0
      002E03 FD               [12] 8257 	mov	r5,a
      002E04 74 40            [12] 8258 	mov	a,#0x40
      002E06 08               [12] 8259 	inc	r0
      002E07 36               [12] 8260 	addc	a,@r0
      002E08 FE               [12] 8261 	mov	r6,a
      002E09 08               [12] 8262 	inc	r0
      002E0A 86 07            [24] 8263 	mov	ar7,@r0
      002E0C 8D 82            [24] 8264 	mov	dpl,r5
      002E0E 8E 83            [24] 8265 	mov	dph,r6
      002E10 8F F0            [24] 8266 	mov	b,r7
      002E12 A8*00            [24] 8267 	mov	r0,_bp
      002E14 08               [12] 8268 	inc	r0
      002E15 12r00r00         [24] 8269 	lcall	__gptrget
      002E18 F6               [12] 8270 	mov	@r0,a
      002E19 A3               [24] 8271 	inc	dptr
      002E1A 12r00r00         [24] 8272 	lcall	__gptrget
      002E1D 08               [12] 8273 	inc	r0
      002E1E F6               [12] 8274 	mov	@r0,a
      002E1F A3               [24] 8275 	inc	dptr
      002E20 12r00r00         [24] 8276 	lcall	__gptrget
      002E23 08               [12] 8277 	inc	r0
      002E24 F6               [12] 8278 	mov	@r0,a
      002E25 E5*00            [12] 8279 	mov	a,_bp
      002E27 24 07            [12] 8280 	add	a,#0x07
      002E29 F8               [12] 8281 	mov	r0,a
      002E2A E5*00            [12] 8282 	mov	a,_bp
      002E2C 24 04            [12] 8283 	add	a,#0x04
      002E2E F9               [12] 8284 	mov	r1,a
      002E2F 74 13            [12] 8285 	mov	a,#0x13
      002E31 26               [12] 8286 	add	a,@r0
      002E32 F7               [12] 8287 	mov	@r1,a
      002E33 74 40            [12] 8288 	mov	a,#0x40
      002E35 08               [12] 8289 	inc	r0
      002E36 36               [12] 8290 	addc	a,@r0
      002E37 09               [12] 8291 	inc	r1
      002E38 F7               [12] 8292 	mov	@r1,a
      002E39 08               [12] 8293 	inc	r0
      002E3A 09               [12] 8294 	inc	r1
      002E3B E6               [12] 8295 	mov	a,@r0
      002E3C F7               [12] 8296 	mov	@r1,a
      002E3D E5*00            [12] 8297 	mov	a,_bp
      002E3F 24 04            [12] 8298 	add	a,#0x04
      002E41 F8               [12] 8299 	mov	r0,a
      002E42 86 82            [24] 8300 	mov	dpl,@r0
      002E44 08               [12] 8301 	inc	r0
      002E45 86 83            [24] 8302 	mov	dph,@r0
      002E47 08               [12] 8303 	inc	r0
      002E48 86 F0            [24] 8304 	mov	b,@r0
      002E4A 12r00r00         [24] 8305 	lcall	__gptrget
      002E4D FA               [12] 8306 	mov	r2,a
      002E4E A3               [24] 8307 	inc	dptr
      002E4F 12r00r00         [24] 8308 	lcall	__gptrget
      002E52 FB               [12] 8309 	mov	r3,a
      002E53 A3               [24] 8310 	inc	dptr
      002E54 12r00r00         [24] 8311 	lcall	__gptrget
      002E57 FC               [12] 8312 	mov	r4,a
      002E58 C0 07            [24] 8313 	push	ar7
      002E5A C0 06            [24] 8314 	push	ar6
      002E5C C0 05            [24] 8315 	push	ar5
      002E5E A8*00            [24] 8316 	mov	r0,_bp
      002E60 08               [12] 8317 	inc	r0
      002E61 E6               [12] 8318 	mov	a,@r0
      002E62 C0 E0            [24] 8319 	push	acc
      002E64 08               [12] 8320 	inc	r0
      002E65 E6               [12] 8321 	mov	a,@r0
      002E66 C0 E0            [24] 8322 	push	acc
      002E68 08               [12] 8323 	inc	r0
      002E69 E6               [12] 8324 	mov	a,@r0
      002E6A C0 E0            [24] 8325 	push	acc
      002E6C C0 02            [24] 8326 	push	ar2
      002E6E C0 03            [24] 8327 	push	ar3
      002E70 C0 04            [24] 8328 	push	ar4
      002E72 74rE9            [12] 8329 	mov	a,#___str_18
      002E74 C0 E0            [24] 8330 	push	acc
      002E76 74s00            [12] 8331 	mov	a,#(___str_18 >> 8)
      002E78 C0 E0            [24] 8332 	push	acc
      002E7A 74 80            [12] 8333 	mov	a,#0x80
      002E7C C0 E0            [24] 8334 	push	acc
      002E7E 12r00r00         [24] 8335 	lcall	_printf
      002E81 E5 81            [12] 8336 	mov	a,sp
      002E83 24 F7            [12] 8337 	add	a,#0xf7
      002E85 F5 81            [12] 8338 	mov	sp,a
                                   8339 ;	calc.c:408: n = stack_peek2(ctx->ps, vals);
      002E87 E5*00            [12] 8340 	mov	a,_bp
      002E89 24 0C            [12] 8341 	add	a,#0x0c
      002E8B F9               [12] 8342 	mov	r1,a
      002E8C A8*00            [24] 8343 	mov	r0,_bp
      002E8E 08               [12] 8344 	inc	r0
      002E8F A6 01            [24] 8345 	mov	@r0,ar1
      002E91 08               [12] 8346 	inc	r0
      002E92 76 00            [12] 8347 	mov	@r0,#0x00
      002E94 08               [12] 8348 	inc	r0
      002E95 76 40            [12] 8349 	mov	@r0,#0x40
      002E97 E5*00            [12] 8350 	mov	a,_bp
      002E99 24 04            [12] 8351 	add	a,#0x04
      002E9B F8               [12] 8352 	mov	r0,a
      002E9C 86 82            [24] 8353 	mov	dpl,@r0
      002E9E 08               [12] 8354 	inc	r0
      002E9F 86 83            [24] 8355 	mov	dph,@r0
      002EA1 08               [12] 8356 	inc	r0
      002EA2 86 F0            [24] 8357 	mov	b,@r0
      002EA4 12r00r00         [24] 8358 	lcall	__gptrget
      002EA7 FA               [12] 8359 	mov	r2,a
      002EA8 A3               [24] 8360 	inc	dptr
      002EA9 12r00r00         [24] 8361 	lcall	__gptrget
      002EAC FB               [12] 8362 	mov	r3,a
      002EAD A3               [24] 8363 	inc	dptr
      002EAE 12r00r00         [24] 8364 	lcall	__gptrget
      002EB1 FC               [12] 8365 	mov	r4,a
      002EB2 C0 01            [24] 8366 	push	ar1
      002EB4 A8*00            [24] 8367 	mov	r0,_bp
      002EB6 08               [12] 8368 	inc	r0
      002EB7 E6               [12] 8369 	mov	a,@r0
      002EB8 C0 E0            [24] 8370 	push	acc
      002EBA 08               [12] 8371 	inc	r0
      002EBB E6               [12] 8372 	mov	a,@r0
      002EBC C0 E0            [24] 8373 	push	acc
      002EBE 08               [12] 8374 	inc	r0
      002EBF E6               [12] 8375 	mov	a,@r0
      002EC0 C0 E0            [24] 8376 	push	acc
      002EC2 8A 82            [24] 8377 	mov	dpl,r2
      002EC4 8B 83            [24] 8378 	mov	dph,r3
      002EC6 8C F0            [24] 8379 	mov	b,r4
      002EC8 12r00r00         [24] 8380 	lcall	_stack_peek2
      002ECB C8               [12] 8381 	xch	a,r0
      002ECC E5*00            [12] 8382 	mov	a,_bp
      002ECE 24 04            [12] 8383 	add	a,#0x04
      002ED0 C8               [12] 8384 	xch	a,r0
      002ED1 A6 82            [24] 8385 	mov	@r0,dpl
      002ED3 08               [12] 8386 	inc	r0
      002ED4 A6 83            [24] 8387 	mov	@r0,dph
      002ED6 15 81            [12] 8388 	dec	sp
      002ED8 15 81            [12] 8389 	dec	sp
      002EDA 15 81            [12] 8390 	dec	sp
      002EDC D0 01            [24] 8391 	pop	ar1
      002EDE D0 05            [24] 8392 	pop	ar5
      002EE0 D0 06            [24] 8393 	pop	ar6
      002EE2 D0 07            [24] 8394 	pop	ar7
                                   8395 ;	calc.c:409: printstr("PSTOP1 = ");
      002EE4 7Ar08            [12] 8396 	mov	r2,#___str_19
      002EE6 7Bs01            [12] 8397 	mov	r3,#(___str_19 >> 8)
      002EE8 7C 80            [12] 8398 	mov	r4,#0x80
                                   8399 ;	calc.c:51: return;
      002EEA                       8400 00134$:
                                   8401 ;	calc.c:49: for (; *s; s++) putchar(*s);
      002EEA 8A 82            [24] 8402 	mov	dpl,r2
      002EEC 8B 83            [24] 8403 	mov	dph,r3
      002EEE 8C F0            [24] 8404 	mov	b,r4
      002EF0 A8*00            [24] 8405 	mov	r0,_bp
      002EF2 08               [12] 8406 	inc	r0
      002EF3 12r00r00         [24] 8407 	lcall	__gptrget
      002EF6 F6               [12] 8408 	mov	@r0,a
      002EF7 A8*00            [24] 8409 	mov	r0,_bp
      002EF9 08               [12] 8410 	inc	r0
      002EFA E6               [12] 8411 	mov	a,@r0
      002EFB 60 21            [24] 8412 	jz	00112$
      002EFD C0 05            [24] 8413 	push	ar5
      002EFF C0 06            [24] 8414 	push	ar6
      002F01 C0 07            [24] 8415 	push	ar7
      002F03 A8*00            [24] 8416 	mov	r0,_bp
      002F05 08               [12] 8417 	inc	r0
      002F06 86 06            [24] 8418 	mov	ar6,@r0
      002F08 7F 00            [12] 8419 	mov	r7,#0x00
      002F0A 8E 82            [24] 8420 	mov	dpl,r6
      002F0C 8F 83            [24] 8421 	mov	dph,r7
      002F0E 12r00r00         [24] 8422 	lcall	_putchar
      002F11 0A               [12] 8423 	inc	r2
      002F12 BA 00 01         [24] 8424 	cjne	r2,#0x00,00315$
      002F15 0B               [12] 8425 	inc	r3
      002F16                       8426 00315$:
      002F16 D0 07            [24] 8427 	pop	ar7
      002F18 D0 06            [24] 8428 	pop	ar6
      002F1A D0 05            [24] 8429 	pop	ar5
                                   8430 ;	calc.c:409: printstr("PSTOP1 = ");
      002F1C 80 CC            [24] 8431 	sjmp	00134$
      002F1E                       8432 00112$:
                                   8433 ;	calc.c:410: if (n > 0) {
      002F1E E5*00            [12] 8434 	mov	a,_bp
      002F20 24 04            [12] 8435 	add	a,#0x04
      002F22 F8               [12] 8436 	mov	r0,a
      002F23 C3               [12] 8437 	clr	c
      002F24 E4               [12] 8438 	clr	a
      002F25 96               [12] 8439 	subb	a,@r0
      002F26 74 80            [12] 8440 	mov	a,#(0x00 ^ 0x80)
      002F28 08               [12] 8441 	inc	r0
      002F29 86 F0            [24] 8442 	mov	b,@r0
      002F2B 63 F0 80         [24] 8443 	xrl	b,#0x80
      002F2E 95 F0            [12] 8444 	subb	a,b
      002F30 40 03            [24] 8445 	jc	00316$
      002F32 02r30r55         [24] 8446 	ljmp	00102$
      002F35                       8447 00316$:
                                   8448 ;	calc.c:411: printf("% 11ld / ", vals[1]);
      002F35 C0 05            [24] 8449 	push	ar5
      002F37 C0 06            [24] 8450 	push	ar6
      002F39 C0 07            [24] 8451 	push	ar7
      002F3B 74 04            [12] 8452 	mov	a,#0x04
      002F3D 29               [12] 8453 	add	a,r1
      002F3E F8               [12] 8454 	mov	r0,a
      002F3F 86 02            [24] 8455 	mov	ar2,@r0
      002F41 08               [12] 8456 	inc	r0
      002F42 86 03            [24] 8457 	mov	ar3,@r0
      002F44 08               [12] 8458 	inc	r0
      002F45 86 04            [24] 8459 	mov	ar4,@r0
      002F47 08               [12] 8460 	inc	r0
      002F48 86 07            [24] 8461 	mov	ar7,@r0
      002F4A 18               [12] 8462 	dec	r0
      002F4B 18               [12] 8463 	dec	r0
      002F4C 18               [12] 8464 	dec	r0
      002F4D C0 07            [24] 8465 	push	ar7
      002F4F C0 06            [24] 8466 	push	ar6
      002F51 C0 05            [24] 8467 	push	ar5
      002F53 C0 01            [24] 8468 	push	ar1
      002F55 C0 00            [24] 8469 	push	ar0
      002F57 C0 02            [24] 8470 	push	ar2
      002F59 C0 03            [24] 8471 	push	ar3
      002F5B C0 04            [24] 8472 	push	ar4
      002F5D C0 07            [24] 8473 	push	ar7
      002F5F 74r1D            [12] 8474 	mov	a,#___str_3
      002F61 C0 E0            [24] 8475 	push	acc
      002F63 74s00            [12] 8476 	mov	a,#(___str_3 >> 8)
      002F65 C0 E0            [24] 8477 	push	acc
      002F67 74 80            [12] 8478 	mov	a,#0x80
      002F69 C0 E0            [24] 8479 	push	acc
      002F6B 12r00r00         [24] 8480 	lcall	_printf
      002F6E E5 81            [12] 8481 	mov	a,sp
      002F70 24 F9            [12] 8482 	add	a,#0xf9
      002F72 F5 81            [12] 8483 	mov	sp,a
      002F74 D0 00            [24] 8484 	pop	ar0
      002F76 D0 01            [24] 8485 	pop	ar1
      002F78 D0 05            [24] 8486 	pop	ar5
      002F7A D0 06            [24] 8487 	pop	ar6
      002F7C D0 07            [24] 8488 	pop	ar7
                                   8489 ;	calc.c:412: printf("%08lx / ", vals[1]);
      002F7E 86 04            [24] 8490 	mov	ar4,@r0
      002F80 08               [12] 8491 	inc	r0
      002F81 86 05            [24] 8492 	mov	ar5,@r0
      002F83 08               [12] 8493 	inc	r0
      002F84 86 06            [24] 8494 	mov	ar6,@r0
      002F86 08               [12] 8495 	inc	r0
      002F87 86 07            [24] 8496 	mov	ar7,@r0
      002F89 18               [12] 8497 	dec	r0
      002F8A 18               [12] 8498 	dec	r0
      002F8B 18               [12] 8499 	dec	r0
      002F8C C0 07            [24] 8500 	push	ar7
      002F8E C0 06            [24] 8501 	push	ar6
      002F90 C0 05            [24] 8502 	push	ar5
      002F92 C0 01            [24] 8503 	push	ar1
      002F94 C0 00            [24] 8504 	push	ar0
      002F96 C0 04            [24] 8505 	push	ar4
      002F98 C0 05            [24] 8506 	push	ar5
      002F9A C0 06            [24] 8507 	push	ar6
      002F9C C0 07            [24] 8508 	push	ar7
      002F9E 74r27            [12] 8509 	mov	a,#___str_4
      002FA0 C0 E0            [24] 8510 	push	acc
      002FA2 74s00            [12] 8511 	mov	a,#(___str_4 >> 8)
      002FA4 C0 E0            [24] 8512 	push	acc
      002FA6 74 80            [12] 8513 	mov	a,#0x80
      002FA8 C0 E0            [24] 8514 	push	acc
      002FAA 12r00r00         [24] 8515 	lcall	_printf
      002FAD E5 81            [12] 8516 	mov	a,sp
      002FAF 24 F9            [12] 8517 	add	a,#0xf9
      002FB1 F5 81            [12] 8518 	mov	sp,a
      002FB3 D0 00            [24] 8519 	pop	ar0
      002FB5 D0 01            [24] 8520 	pop	ar1
      002FB7 D0 05            [24] 8521 	pop	ar5
      002FB9 D0 06            [24] 8522 	pop	ar6
      002FBB D0 07            [24] 8523 	pop	ar7
                                   8524 ;	calc.c:413: printbin(vals[1]);
      002FBD C0 01            [24] 8525 	push	ar1
      002FBF E5*00            [12] 8526 	mov	a,_bp
      002FC1 24 14            [12] 8527 	add	a,#0x14
      002FC3 F9               [12] 8528 	mov	r1,a
      002FC4 E6               [12] 8529 	mov	a,@r0
      002FC5 F7               [12] 8530 	mov	@r1,a
      002FC6 08               [12] 8531 	inc	r0
      002FC7 E6               [12] 8532 	mov	a,@r0
      002FC8 09               [12] 8533 	inc	r1
      002FC9 F7               [12] 8534 	mov	@r1,a
      002FCA 08               [12] 8535 	inc	r0
      002FCB E6               [12] 8536 	mov	a,@r0
      002FCC 09               [12] 8537 	inc	r1
      002FCD F7               [12] 8538 	mov	@r1,a
      002FCE 08               [12] 8539 	inc	r0
      002FCF E6               [12] 8540 	mov	a,@r0
      002FD0 09               [12] 8541 	inc	r1
      002FD1 F7               [12] 8542 	mov	@r1,a
      002FD2 D0 01            [24] 8543 	pop	ar1
                                   8544 ;	calc.c:57: for (mask = 0x80000000lu; mask; mask >>= 1)
      002FD4 E5*00            [12] 8545 	mov	a,_bp
      002FD6 24 18            [12] 8546 	add	a,#0x18
      002FD8 F8               [12] 8547 	mov	r0,a
      002FD9 E4               [12] 8548 	clr	a
      002FDA F6               [12] 8549 	mov	@r0,a
      002FDB 08               [12] 8550 	inc	r0
      002FDC F6               [12] 8551 	mov	@r0,a
      002FDD 08               [12] 8552 	inc	r0
      002FDE F6               [12] 8553 	mov	@r0,a
      002FDF 08               [12] 8554 	inc	r0
      002FE0 76 80            [12] 8555 	mov	@r0,#0x80
                                   8556 ;	calc.c:438: return 1;
      002FE2 D0 07            [24] 8557 	pop	ar7
      002FE4 D0 06            [24] 8558 	pop	ar6
      002FE6 D0 05            [24] 8559 	pop	ar5
                                   8560 ;	calc.c:57: for (mask = 0x80000000lu; mask; mask >>= 1)
      002FE8                       8561 00136$:
                                   8562 ;	calc.c:58: (void)putchar((d & mask) ? (int)'1' : (int)'0');
      002FE8 C0 05            [24] 8563 	push	ar5
      002FEA C0 06            [24] 8564 	push	ar6
      002FEC C0 07            [24] 8565 	push	ar7
      002FEE E5*00            [12] 8566 	mov	a,_bp
      002FF0 24 14            [12] 8567 	add	a,#0x14
      002FF2 F8               [12] 8568 	mov	r0,a
      002FF3 86 02            [24] 8569 	mov	ar2,@r0
      002FF5 08               [12] 8570 	inc	r0
      002FF6 86 03            [24] 8571 	mov	ar3,@r0
      002FF8 08               [12] 8572 	inc	r0
      002FF9 86 04            [24] 8573 	mov	ar4,@r0
      002FFB 08               [12] 8574 	inc	r0
      002FFC 86 07            [24] 8575 	mov	ar7,@r0
      002FFE E5*00            [12] 8576 	mov	a,_bp
      003000 24 18            [12] 8577 	add	a,#0x18
      003002 F8               [12] 8578 	mov	r0,a
      003003 E6               [12] 8579 	mov	a,@r0
      003004 52 02            [12] 8580 	anl	ar2,a
      003006 08               [12] 8581 	inc	r0
      003007 E6               [12] 8582 	mov	a,@r0
      003008 52 03            [12] 8583 	anl	ar3,a
      00300A 08               [12] 8584 	inc	r0
      00300B E6               [12] 8585 	mov	a,@r0
      00300C 52 04            [12] 8586 	anl	ar4,a
      00300E 08               [12] 8587 	inc	r0
      00300F E6               [12] 8588 	mov	a,@r0
      003010 52 07            [12] 8589 	anl	ar7,a
      003012 EA               [12] 8590 	mov	a,r2
      003013 4B               [12] 8591 	orl	a,r3
      003014 4C               [12] 8592 	orl	a,r4
      003015 4F               [12] 8593 	orl	a,r7
      003016 D0 07            [24] 8594 	pop	ar7
      003018 D0 06            [24] 8595 	pop	ar6
      00301A D0 05            [24] 8596 	pop	ar5
      00301C 60 06            [24] 8597 	jz	00163$
      00301E 7B 31            [12] 8598 	mov	r3,#0x31
      003020 7C 00            [12] 8599 	mov	r4,#0x00
      003022 80 04            [24] 8600 	sjmp	00164$
      003024                       8601 00163$:
      003024 7B 30            [12] 8602 	mov	r3,#0x30
      003026 7C 00            [12] 8603 	mov	r4,#0x00
      003028                       8604 00164$:
      003028 8B 82            [24] 8605 	mov	dpl,r3
      00302A 8C 83            [24] 8606 	mov	dph,r4
      00302C 12r00r00         [24] 8607 	lcall	_putchar
                                   8608 ;	calc.c:57: for (mask = 0x80000000lu; mask; mask >>= 1)
      00302F E5*00            [12] 8609 	mov	a,_bp
      003031 24 18            [12] 8610 	add	a,#0x18
      003033 F8               [12] 8611 	mov	r0,a
      003034 08               [12] 8612 	inc	r0
      003035 08               [12] 8613 	inc	r0
      003036 08               [12] 8614 	inc	r0
      003037 E6               [12] 8615 	mov	a,@r0
      003038 C3               [12] 8616 	clr	c
      003039 13               [12] 8617 	rrc	a
      00303A F6               [12] 8618 	mov	@r0,a
      00303B 18               [12] 8619 	dec	r0
      00303C E6               [12] 8620 	mov	a,@r0
      00303D 13               [12] 8621 	rrc	a
      00303E F6               [12] 8622 	mov	@r0,a
      00303F 18               [12] 8623 	dec	r0
      003040 E6               [12] 8624 	mov	a,@r0
      003041 13               [12] 8625 	rrc	a
      003042 F6               [12] 8626 	mov	@r0,a
      003043 18               [12] 8627 	dec	r0
      003044 E6               [12] 8628 	mov	a,@r0
      003045 13               [12] 8629 	rrc	a
      003046 F6               [12] 8630 	mov	@r0,a
      003047 E5*00            [12] 8631 	mov	a,_bp
      003049 24 18            [12] 8632 	add	a,#0x18
      00304B F8               [12] 8633 	mov	r0,a
      00304C E6               [12] 8634 	mov	a,@r0
      00304D 08               [12] 8635 	inc	r0
      00304E 46               [12] 8636 	orl	a,@r0
      00304F 08               [12] 8637 	inc	r0
      003050 46               [12] 8638 	orl	a,@r0
      003051 08               [12] 8639 	inc	r0
      003052 46               [12] 8640 	orl	a,@r0
      003053 70 93            [24] 8641 	jnz	00136$
                                   8642 ;	calc.c:413: printbin(vals[1]);
      003055                       8643 00102$:
                                   8644 ;	calc.c:415: printstr("\r\nPSTOP0 = ");
      003055 7Ar12            [12] 8645 	mov	r2,#___str_20
      003057 7Bs01            [12] 8646 	mov	r3,#(___str_20 >> 8)
      003059 7C 80            [12] 8647 	mov	r4,#0x80
                                   8648 ;	calc.c:51: return;
      00305B                       8649 00139$:
                                   8650 ;	calc.c:49: for (; *s; s++) putchar(*s);
      00305B 8A 82            [24] 8651 	mov	dpl,r2
      00305D 8B 83            [24] 8652 	mov	dph,r3
      00305F 8C F0            [24] 8653 	mov	b,r4
      003061 A8*00            [24] 8654 	mov	r0,_bp
      003063 08               [12] 8655 	inc	r0
      003064 12r00r00         [24] 8656 	lcall	__gptrget
      003067 F6               [12] 8657 	mov	@r0,a
      003068 A8*00            [24] 8658 	mov	r0,_bp
      00306A 08               [12] 8659 	inc	r0
      00306B E6               [12] 8660 	mov	a,@r0
      00306C 60 21            [24] 8661 	jz	00116$
      00306E C0 05            [24] 8662 	push	ar5
      003070 C0 06            [24] 8663 	push	ar6
      003072 C0 07            [24] 8664 	push	ar7
      003074 A8*00            [24] 8665 	mov	r0,_bp
      003076 08               [12] 8666 	inc	r0
      003077 86 06            [24] 8667 	mov	ar6,@r0
      003079 7F 00            [12] 8668 	mov	r7,#0x00
      00307B 8E 82            [24] 8669 	mov	dpl,r6
      00307D 8F 83            [24] 8670 	mov	dph,r7
      00307F 12r00r00         [24] 8671 	lcall	_putchar
      003082 0A               [12] 8672 	inc	r2
      003083 BA 00 01         [24] 8673 	cjne	r2,#0x00,00320$
      003086 0B               [12] 8674 	inc	r3
      003087                       8675 00320$:
      003087 D0 07            [24] 8676 	pop	ar7
      003089 D0 06            [24] 8677 	pop	ar6
      00308B D0 05            [24] 8678 	pop	ar5
                                   8679 ;	calc.c:415: printstr("\r\nPSTOP0 = ");
      00308D 80 CC            [24] 8680 	sjmp	00139$
      00308F                       8681 00116$:
                                   8682 ;	calc.c:416: if (n > 1) {
      00308F E5*00            [12] 8683 	mov	a,_bp
      003091 24 04            [12] 8684 	add	a,#0x04
      003093 F8               [12] 8685 	mov	r0,a
      003094 C3               [12] 8686 	clr	c
      003095 74 01            [12] 8687 	mov	a,#0x01
      003097 96               [12] 8688 	subb	a,@r0
      003098 74 80            [12] 8689 	mov	a,#(0x00 ^ 0x80)
      00309A 08               [12] 8690 	inc	r0
      00309B 86 F0            [24] 8691 	mov	b,@r0
      00309D 63 F0 80         [24] 8692 	xrl	b,#0x80
      0030A0 95 F0            [12] 8693 	subb	a,b
      0030A2 40 03            [24] 8694 	jc	00321$
      0030A4 02r31rBA         [24] 8695 	ljmp	00104$
      0030A7                       8696 00321$:
                                   8697 ;	calc.c:417: printf("% 11ld / ", vals[0]);
      0030A7 C0 05            [24] 8698 	push	ar5
      0030A9 C0 06            [24] 8699 	push	ar6
      0030AB C0 07            [24] 8700 	push	ar7
      0030AD 87 02            [24] 8701 	mov	ar2,@r1
      0030AF 09               [12] 8702 	inc	r1
      0030B0 87 03            [24] 8703 	mov	ar3,@r1
      0030B2 09               [12] 8704 	inc	r1
      0030B3 87 04            [24] 8705 	mov	ar4,@r1
      0030B5 09               [12] 8706 	inc	r1
      0030B6 87 07            [24] 8707 	mov	ar7,@r1
      0030B8 19               [12] 8708 	dec	r1
      0030B9 19               [12] 8709 	dec	r1
      0030BA 19               [12] 8710 	dec	r1
      0030BB C0 07            [24] 8711 	push	ar7
      0030BD C0 06            [24] 8712 	push	ar6
      0030BF C0 05            [24] 8713 	push	ar5
      0030C1 C0 01            [24] 8714 	push	ar1
      0030C3 C0 02            [24] 8715 	push	ar2
      0030C5 C0 03            [24] 8716 	push	ar3
      0030C7 C0 04            [24] 8717 	push	ar4
      0030C9 C0 07            [24] 8718 	push	ar7
      0030CB 74r1D            [12] 8719 	mov	a,#___str_3
      0030CD C0 E0            [24] 8720 	push	acc
      0030CF 74s00            [12] 8721 	mov	a,#(___str_3 >> 8)
      0030D1 C0 E0            [24] 8722 	push	acc
      0030D3 74 80            [12] 8723 	mov	a,#0x80
      0030D5 C0 E0            [24] 8724 	push	acc
      0030D7 12r00r00         [24] 8725 	lcall	_printf
      0030DA E5 81            [12] 8726 	mov	a,sp
      0030DC 24 F9            [12] 8727 	add	a,#0xf9
      0030DE F5 81            [12] 8728 	mov	sp,a
      0030E0 D0 01            [24] 8729 	pop	ar1
      0030E2 D0 05            [24] 8730 	pop	ar5
      0030E4 D0 06            [24] 8731 	pop	ar6
      0030E6 D0 07            [24] 8732 	pop	ar7
                                   8733 ;	calc.c:418: printf("%08lx / ", vals[0]);
      0030E8 87 04            [24] 8734 	mov	ar4,@r1
      0030EA 09               [12] 8735 	inc	r1
      0030EB 87 05            [24] 8736 	mov	ar5,@r1
      0030ED 09               [12] 8737 	inc	r1
      0030EE 87 06            [24] 8738 	mov	ar6,@r1
      0030F0 09               [12] 8739 	inc	r1
      0030F1 87 07            [24] 8740 	mov	ar7,@r1
      0030F3 19               [12] 8741 	dec	r1
      0030F4 19               [12] 8742 	dec	r1
      0030F5 19               [12] 8743 	dec	r1
      0030F6 C0 07            [24] 8744 	push	ar7
      0030F8 C0 06            [24] 8745 	push	ar6
      0030FA C0 05            [24] 8746 	push	ar5
      0030FC C0 01            [24] 8747 	push	ar1
      0030FE C0 04            [24] 8748 	push	ar4
      003100 C0 05            [24] 8749 	push	ar5
      003102 C0 06            [24] 8750 	push	ar6
      003104 C0 07            [24] 8751 	push	ar7
      003106 74r27            [12] 8752 	mov	a,#___str_4
      003108 C0 E0            [24] 8753 	push	acc
      00310A 74s00            [12] 8754 	mov	a,#(___str_4 >> 8)
      00310C C0 E0            [24] 8755 	push	acc
      00310E 74 80            [12] 8756 	mov	a,#0x80
      003110 C0 E0            [24] 8757 	push	acc
      003112 12r00r00         [24] 8758 	lcall	_printf
      003115 E5 81            [12] 8759 	mov	a,sp
      003117 24 F9            [12] 8760 	add	a,#0xf9
      003119 F5 81            [12] 8761 	mov	sp,a
      00311B D0 01            [24] 8762 	pop	ar1
      00311D D0 05            [24] 8763 	pop	ar5
      00311F D0 06            [24] 8764 	pop	ar6
      003121 D0 07            [24] 8765 	pop	ar7
                                   8766 ;	calc.c:419: printbin(vals[0]);
      003123 E5*00            [12] 8767 	mov	a,_bp
      003125 24 14            [12] 8768 	add	a,#0x14
      003127 F8               [12] 8769 	mov	r0,a
      003128 E7               [12] 8770 	mov	a,@r1
      003129 F6               [12] 8771 	mov	@r0,a
      00312A 09               [12] 8772 	inc	r1
      00312B E7               [12] 8773 	mov	a,@r1
      00312C 08               [12] 8774 	inc	r0
      00312D F6               [12] 8775 	mov	@r0,a
      00312E 09               [12] 8776 	inc	r1
      00312F E7               [12] 8777 	mov	a,@r1
      003130 08               [12] 8778 	inc	r0
      003131 F6               [12] 8779 	mov	@r0,a
      003132 09               [12] 8780 	inc	r1
      003133 E7               [12] 8781 	mov	a,@r1
      003134 08               [12] 8782 	inc	r0
      003135 F6               [12] 8783 	mov	@r0,a
      003136 19               [12] 8784 	dec	r1
      003137 19               [12] 8785 	dec	r1
      003138 19               [12] 8786 	dec	r1
                                   8787 ;	calc.c:57: for (mask = 0x80000000lu; mask; mask >>= 1)
      003139 E5*00            [12] 8788 	mov	a,_bp
      00313B 24 18            [12] 8789 	add	a,#0x18
      00313D F8               [12] 8790 	mov	r0,a
      00313E E4               [12] 8791 	clr	a
      00313F F6               [12] 8792 	mov	@r0,a
      003140 08               [12] 8793 	inc	r0
      003141 F6               [12] 8794 	mov	@r0,a
      003142 08               [12] 8795 	inc	r0
      003143 F6               [12] 8796 	mov	@r0,a
      003144 08               [12] 8797 	inc	r0
      003145 76 80            [12] 8798 	mov	@r0,#0x80
                                   8799 ;	calc.c:438: return 1;
      003147 D0 07            [24] 8800 	pop	ar7
      003149 D0 06            [24] 8801 	pop	ar6
      00314B D0 05            [24] 8802 	pop	ar5
                                   8803 ;	calc.c:57: for (mask = 0x80000000lu; mask; mask >>= 1)
      00314D                       8804 00141$:
                                   8805 ;	calc.c:58: (void)putchar((d & mask) ? (int)'1' : (int)'0');
      00314D C0 05            [24] 8806 	push	ar5
      00314F C0 06            [24] 8807 	push	ar6
      003151 C0 07            [24] 8808 	push	ar7
      003153 E5*00            [12] 8809 	mov	a,_bp
      003155 24 14            [12] 8810 	add	a,#0x14
      003157 F8               [12] 8811 	mov	r0,a
      003158 86 02            [24] 8812 	mov	ar2,@r0
      00315A 08               [12] 8813 	inc	r0
      00315B 86 03            [24] 8814 	mov	ar3,@r0
      00315D 08               [12] 8815 	inc	r0
      00315E 86 04            [24] 8816 	mov	ar4,@r0
      003160 08               [12] 8817 	inc	r0
      003161 86 07            [24] 8818 	mov	ar7,@r0
      003163 E5*00            [12] 8819 	mov	a,_bp
      003165 24 18            [12] 8820 	add	a,#0x18
      003167 F8               [12] 8821 	mov	r0,a
      003168 E6               [12] 8822 	mov	a,@r0
      003169 52 02            [12] 8823 	anl	ar2,a
      00316B 08               [12] 8824 	inc	r0
      00316C E6               [12] 8825 	mov	a,@r0
      00316D 52 03            [12] 8826 	anl	ar3,a
      00316F 08               [12] 8827 	inc	r0
      003170 E6               [12] 8828 	mov	a,@r0
      003171 52 04            [12] 8829 	anl	ar4,a
      003173 08               [12] 8830 	inc	r0
      003174 E6               [12] 8831 	mov	a,@r0
      003175 52 07            [12] 8832 	anl	ar7,a
      003177 EA               [12] 8833 	mov	a,r2
      003178 4B               [12] 8834 	orl	a,r3
      003179 4C               [12] 8835 	orl	a,r4
      00317A 4F               [12] 8836 	orl	a,r7
      00317B D0 07            [24] 8837 	pop	ar7
      00317D D0 06            [24] 8838 	pop	ar6
      00317F D0 05            [24] 8839 	pop	ar5
      003181 60 06            [24] 8840 	jz	00165$
      003183 7B 31            [12] 8841 	mov	r3,#0x31
      003185 7C 00            [12] 8842 	mov	r4,#0x00
      003187 80 04            [24] 8843 	sjmp	00166$
      003189                       8844 00165$:
      003189 7B 30            [12] 8845 	mov	r3,#0x30
      00318B 7C 00            [12] 8846 	mov	r4,#0x00
      00318D                       8847 00166$:
      00318D 8B 82            [24] 8848 	mov	dpl,r3
      00318F 8C 83            [24] 8849 	mov	dph,r4
      003191 12r00r00         [24] 8850 	lcall	_putchar
                                   8851 ;	calc.c:57: for (mask = 0x80000000lu; mask; mask >>= 1)
      003194 E5*00            [12] 8852 	mov	a,_bp
      003196 24 18            [12] 8853 	add	a,#0x18
      003198 F8               [12] 8854 	mov	r0,a
      003199 08               [12] 8855 	inc	r0
      00319A 08               [12] 8856 	inc	r0
      00319B 08               [12] 8857 	inc	r0
      00319C E6               [12] 8858 	mov	a,@r0
      00319D C3               [12] 8859 	clr	c
      00319E 13               [12] 8860 	rrc	a
      00319F F6               [12] 8861 	mov	@r0,a
      0031A0 18               [12] 8862 	dec	r0
      0031A1 E6               [12] 8863 	mov	a,@r0
      0031A2 13               [12] 8864 	rrc	a
      0031A3 F6               [12] 8865 	mov	@r0,a
      0031A4 18               [12] 8866 	dec	r0
      0031A5 E6               [12] 8867 	mov	a,@r0
      0031A6 13               [12] 8868 	rrc	a
      0031A7 F6               [12] 8869 	mov	@r0,a
      0031A8 18               [12] 8870 	dec	r0
      0031A9 E6               [12] 8871 	mov	a,@r0
      0031AA 13               [12] 8872 	rrc	a
      0031AB F6               [12] 8873 	mov	@r0,a
      0031AC E5*00            [12] 8874 	mov	a,_bp
      0031AE 24 18            [12] 8875 	add	a,#0x18
      0031B0 F8               [12] 8876 	mov	r0,a
      0031B1 E6               [12] 8877 	mov	a,@r0
      0031B2 08               [12] 8878 	inc	r0
      0031B3 46               [12] 8879 	orl	a,@r0
      0031B4 08               [12] 8880 	inc	r0
      0031B5 46               [12] 8881 	orl	a,@r0
      0031B6 08               [12] 8882 	inc	r0
      0031B7 46               [12] 8883 	orl	a,@r0
      0031B8 70 93            [24] 8884 	jnz	00141$
                                   8885 ;	calc.c:419: printbin(vals[0]);
      0031BA                       8886 00104$:
                                   8887 ;	calc.c:421: printstr("\r\n");
      0031BA 7Ar30            [12] 8888 	mov	r2,#___str_5
      0031BC 7Bs00            [12] 8889 	mov	r3,#(___str_5 >> 8)
      0031BE 7C 80            [12] 8890 	mov	r4,#0x80
                                   8891 ;	calc.c:51: return;
      0031C0                       8892 00144$:
                                   8893 ;	calc.c:49: for (; *s; s++) putchar(*s);
      0031C0 8A 82            [24] 8894 	mov	dpl,r2
      0031C2 8B 83            [24] 8895 	mov	dph,r3
      0031C4 8C F0            [24] 8896 	mov	b,r4
      0031C6 E5*00            [12] 8897 	mov	a,_bp
      0031C8 24 04            [12] 8898 	add	a,#0x04
      0031CA F8               [12] 8899 	mov	r0,a
      0031CB 12r00r00         [24] 8900 	lcall	__gptrget
      0031CE F6               [12] 8901 	mov	@r0,a
      0031CF E5*00            [12] 8902 	mov	a,_bp
      0031D1 24 04            [12] 8903 	add	a,#0x04
      0031D3 F8               [12] 8904 	mov	r0,a
      0031D4 E6               [12] 8905 	mov	a,@r0
      0031D5 60 23            [24] 8906 	jz	00120$
      0031D7 C0 05            [24] 8907 	push	ar5
      0031D9 C0 06            [24] 8908 	push	ar6
      0031DB C0 07            [24] 8909 	push	ar7
      0031DD E5*00            [12] 8910 	mov	a,_bp
      0031DF 24 04            [12] 8911 	add	a,#0x04
      0031E1 F8               [12] 8912 	mov	r0,a
      0031E2 86 06            [24] 8913 	mov	ar6,@r0
      0031E4 7F 00            [12] 8914 	mov	r7,#0x00
      0031E6 8E 82            [24] 8915 	mov	dpl,r6
      0031E8 8F 83            [24] 8916 	mov	dph,r7
      0031EA 12r00r00         [24] 8917 	lcall	_putchar
      0031ED 0A               [12] 8918 	inc	r2
      0031EE BA 00 01         [24] 8919 	cjne	r2,#0x00,00325$
      0031F1 0B               [12] 8920 	inc	r3
      0031F2                       8921 00325$:
      0031F2 D0 07            [24] 8922 	pop	ar7
      0031F4 D0 06            [24] 8923 	pop	ar6
      0031F6 D0 05            [24] 8924 	pop	ar5
                                   8925 ;	calc.c:421: printstr("\r\n");
      0031F8 80 C6            [24] 8926 	sjmp	00144$
      0031FA                       8927 00120$:
                                   8928 ;	calc.c:423: n = stack_peek2(ctx->ss, vals);
      0031FA 89 04            [24] 8929 	mov	ar4,r1
      0031FC 7B 00            [12] 8930 	mov	r3,#0x00
      0031FE 7A 40            [12] 8931 	mov	r2,#0x40
      003200 8D 82            [24] 8932 	mov	dpl,r5
      003202 8E 83            [24] 8933 	mov	dph,r6
      003204 8F F0            [24] 8934 	mov	b,r7
      003206 12r00r00         [24] 8935 	lcall	__gptrget
      003209 FD               [12] 8936 	mov	r5,a
      00320A A3               [24] 8937 	inc	dptr
      00320B 12r00r00         [24] 8938 	lcall	__gptrget
      00320E FE               [12] 8939 	mov	r6,a
      00320F A3               [24] 8940 	inc	dptr
      003210 12r00r00         [24] 8941 	lcall	__gptrget
      003213 FF               [12] 8942 	mov	r7,a
      003214 C0 01            [24] 8943 	push	ar1
      003216 C0 04            [24] 8944 	push	ar4
      003218 C0 03            [24] 8945 	push	ar3
      00321A C0 02            [24] 8946 	push	ar2
      00321C 8D 82            [24] 8947 	mov	dpl,r5
      00321E 8E 83            [24] 8948 	mov	dph,r6
      003220 8F F0            [24] 8949 	mov	b,r7
      003222 12r00r00         [24] 8950 	lcall	_stack_peek2
      003225 AE 82            [24] 8951 	mov	r6,dpl
      003227 AF 83            [24] 8952 	mov	r7,dph
      003229 15 81            [12] 8953 	dec	sp
      00322B 15 81            [12] 8954 	dec	sp
      00322D 15 81            [12] 8955 	dec	sp
      00322F D0 01            [24] 8956 	pop	ar1
      003231 E5*00            [12] 8957 	mov	a,_bp
      003233 24 0A            [12] 8958 	add	a,#0x0a
      003235 F8               [12] 8959 	mov	r0,a
      003236 A6 06            [24] 8960 	mov	@r0,ar6
      003238 08               [12] 8961 	inc	r0
      003239 A6 07            [24] 8962 	mov	@r0,ar7
                                   8963 ;	calc.c:424: printstr("SSTOP1 = ");
      00323B 7Br1E            [12] 8964 	mov	r3,#___str_21
      00323D 7Cs01            [12] 8965 	mov	r4,#(___str_21 >> 8)
      00323F 7D 80            [12] 8966 	mov	r5,#0x80
                                   8967 ;	calc.c:51: return;
      003241                       8968 00147$:
                                   8969 ;	calc.c:49: for (; *s; s++) putchar(*s);
      003241 8B 82            [24] 8970 	mov	dpl,r3
      003243 8C 83            [24] 8971 	mov	dph,r4
      003245 8D F0            [24] 8972 	mov	b,r5
      003247 12r00r00         [24] 8973 	lcall	__gptrget
      00324A FA               [12] 8974 	mov	r2,a
      00324B 60 10            [24] 8975 	jz	00122$
      00324D 7F 00            [12] 8976 	mov	r7,#0x00
      00324F 8A 82            [24] 8977 	mov	dpl,r2
      003251 8F 83            [24] 8978 	mov	dph,r7
      003253 12r00r00         [24] 8979 	lcall	_putchar
      003256 0B               [12] 8980 	inc	r3
                                   8981 ;	calc.c:424: printstr("SSTOP1 = ");
      003257 BB 00 E7         [24] 8982 	cjne	r3,#0x00,00147$
      00325A 0C               [12] 8983 	inc	r4
      00325B 80 E4            [24] 8984 	sjmp	00147$
      00325D                       8985 00122$:
                                   8986 ;	calc.c:425: if (n > 0) {
      00325D E5*00            [12] 8987 	mov	a,_bp
      00325F 24 0A            [12] 8988 	add	a,#0x0a
      003261 F8               [12] 8989 	mov	r0,a
      003262 C3               [12] 8990 	clr	c
      003263 E4               [12] 8991 	clr	a
      003264 96               [12] 8992 	subb	a,@r0
      003265 74 80            [12] 8993 	mov	a,#(0x00 ^ 0x80)
      003267 08               [12] 8994 	inc	r0
      003268 86 F0            [24] 8995 	mov	b,@r0
      00326A 63 F0 80         [24] 8996 	xrl	b,#0x80
      00326D 95 F0            [12] 8997 	subb	a,b
      00326F 40 03            [24] 8998 	jc	00328$
      003271 02r33r60         [24] 8999 	ljmp	00106$
      003274                       9000 00328$:
                                   9001 ;	calc.c:426: printf("% 11ld / ", vals[1]);
      003274 74 04            [12] 9002 	mov	a,#0x04
      003276 29               [12] 9003 	add	a,r1
      003277 F8               [12] 9004 	mov	r0,a
      003278 86 02            [24] 9005 	mov	ar2,@r0
      00327A 08               [12] 9006 	inc	r0
      00327B 86 03            [24] 9007 	mov	ar3,@r0
      00327D 08               [12] 9008 	inc	r0
      00327E 86 04            [24] 9009 	mov	ar4,@r0
      003280 08               [12] 9010 	inc	r0
      003281 86 05            [24] 9011 	mov	ar5,@r0
      003283 18               [12] 9012 	dec	r0
      003284 18               [12] 9013 	dec	r0
      003285 18               [12] 9014 	dec	r0
      003286 C0 01            [24] 9015 	push	ar1
      003288 C0 00            [24] 9016 	push	ar0
      00328A C0 02            [24] 9017 	push	ar2
      00328C C0 03            [24] 9018 	push	ar3
      00328E C0 04            [24] 9019 	push	ar4
      003290 C0 05            [24] 9020 	push	ar5
      003292 74r1D            [12] 9021 	mov	a,#___str_3
      003294 C0 E0            [24] 9022 	push	acc
      003296 74s00            [12] 9023 	mov	a,#(___str_3 >> 8)
      003298 C0 E0            [24] 9024 	push	acc
      00329A 74 80            [12] 9025 	mov	a,#0x80
      00329C C0 E0            [24] 9026 	push	acc
      00329E 12r00r00         [24] 9027 	lcall	_printf
      0032A1 E5 81            [12] 9028 	mov	a,sp
      0032A3 24 F9            [12] 9029 	add	a,#0xf9
      0032A5 F5 81            [12] 9030 	mov	sp,a
      0032A7 D0 00            [24] 9031 	pop	ar0
                                   9032 ;	calc.c:427: printf("%08lx / ", vals[1]);
      0032A9 86 02            [24] 9033 	mov	ar2,@r0
      0032AB 08               [12] 9034 	inc	r0
      0032AC 86 03            [24] 9035 	mov	ar3,@r0
      0032AE 08               [12] 9036 	inc	r0
      0032AF 86 04            [24] 9037 	mov	ar4,@r0
      0032B1 08               [12] 9038 	inc	r0
      0032B2 86 05            [24] 9039 	mov	ar5,@r0
      0032B4 18               [12] 9040 	dec	r0
      0032B5 18               [12] 9041 	dec	r0
      0032B6 18               [12] 9042 	dec	r0
      0032B7 C0 00            [24] 9043 	push	ar0
      0032B9 C0 02            [24] 9044 	push	ar2
      0032BB C0 03            [24] 9045 	push	ar3
      0032BD C0 04            [24] 9046 	push	ar4
      0032BF C0 05            [24] 9047 	push	ar5
      0032C1 74r27            [12] 9048 	mov	a,#___str_4
      0032C3 C0 E0            [24] 9049 	push	acc
      0032C5 74s00            [12] 9050 	mov	a,#(___str_4 >> 8)
      0032C7 C0 E0            [24] 9051 	push	acc
      0032C9 74 80            [12] 9052 	mov	a,#0x80
      0032CB C0 E0            [24] 9053 	push	acc
      0032CD 12r00r00         [24] 9054 	lcall	_printf
      0032D0 E5 81            [12] 9055 	mov	a,sp
      0032D2 24 F9            [12] 9056 	add	a,#0xf9
      0032D4 F5 81            [12] 9057 	mov	sp,a
      0032D6 D0 00            [24] 9058 	pop	ar0
                                   9059 ;	calc.c:428: printbin(vals[1]);
      0032D8 E5*00            [12] 9060 	mov	a,_bp
      0032DA 24 14            [12] 9061 	add	a,#0x14
      0032DC F9               [12] 9062 	mov	r1,a
      0032DD E6               [12] 9063 	mov	a,@r0
      0032DE F7               [12] 9064 	mov	@r1,a
      0032DF 08               [12] 9065 	inc	r0
      0032E0 E6               [12] 9066 	mov	a,@r0
      0032E1 09               [12] 9067 	inc	r1
      0032E2 F7               [12] 9068 	mov	@r1,a
      0032E3 08               [12] 9069 	inc	r0
      0032E4 E6               [12] 9070 	mov	a,@r0
      0032E5 09               [12] 9071 	inc	r1
      0032E6 F7               [12] 9072 	mov	@r1,a
      0032E7 08               [12] 9073 	inc	r0
      0032E8 E6               [12] 9074 	mov	a,@r0
      0032E9 09               [12] 9075 	inc	r1
      0032EA F7               [12] 9076 	mov	@r1,a
      0032EB D0 01            [24] 9077 	pop	ar1
                                   9078 ;	calc.c:57: for (mask = 0x80000000lu; mask; mask >>= 1)
      0032ED E5*00            [12] 9079 	mov	a,_bp
      0032EF 24 18            [12] 9080 	add	a,#0x18
      0032F1 F8               [12] 9081 	mov	r0,a
      0032F2 E4               [12] 9082 	clr	a
      0032F3 F6               [12] 9083 	mov	@r0,a
      0032F4 08               [12] 9084 	inc	r0
      0032F5 F6               [12] 9085 	mov	@r0,a
      0032F6 08               [12] 9086 	inc	r0
      0032F7 F6               [12] 9087 	mov	@r0,a
      0032F8 08               [12] 9088 	inc	r0
      0032F9 76 80            [12] 9089 	mov	@r0,#0x80
      0032FB                       9090 00149$:
                                   9091 ;	calc.c:58: (void)putchar((d & mask) ? (int)'1' : (int)'0');
      0032FB C0 01            [24] 9092 	push	ar1
      0032FD E5*00            [12] 9093 	mov	a,_bp
      0032FF 24 14            [12] 9094 	add	a,#0x14
      003301 F8               [12] 9095 	mov	r0,a
      003302 86 02            [24] 9096 	mov	ar2,@r0
      003304 08               [12] 9097 	inc	r0
      003305 86 03            [24] 9098 	mov	ar3,@r0
      003307 08               [12] 9099 	inc	r0
      003308 86 05            [24] 9100 	mov	ar5,@r0
      00330A 08               [12] 9101 	inc	r0
      00330B 86 07            [24] 9102 	mov	ar7,@r0
      00330D E5*00            [12] 9103 	mov	a,_bp
      00330F 24 18            [12] 9104 	add	a,#0x18
      003311 F8               [12] 9105 	mov	r0,a
      003312 E6               [12] 9106 	mov	a,@r0
      003313 52 02            [12] 9107 	anl	ar2,a
      003315 08               [12] 9108 	inc	r0
      003316 E6               [12] 9109 	mov	a,@r0
      003317 52 03            [12] 9110 	anl	ar3,a
      003319 08               [12] 9111 	inc	r0
      00331A E6               [12] 9112 	mov	a,@r0
      00331B 52 05            [12] 9113 	anl	ar5,a
      00331D 08               [12] 9114 	inc	r0
      00331E E6               [12] 9115 	mov	a,@r0
      00331F 52 07            [12] 9116 	anl	ar7,a
      003321 D0 01            [24] 9117 	pop	ar1
      003323 EA               [12] 9118 	mov	a,r2
      003324 4B               [12] 9119 	orl	a,r3
      003325 4D               [12] 9120 	orl	a,r5
      003326 4F               [12] 9121 	orl	a,r7
      003327 60 06            [24] 9122 	jz	00167$
      003329 7E 31            [12] 9123 	mov	r6,#0x31
      00332B 7F 00            [12] 9124 	mov	r7,#0x00
      00332D 80 04            [24] 9125 	sjmp	00168$
      00332F                       9126 00167$:
      00332F 7E 30            [12] 9127 	mov	r6,#0x30
      003331 7F 00            [12] 9128 	mov	r7,#0x00
      003333                       9129 00168$:
      003333 8E 82            [24] 9130 	mov	dpl,r6
      003335 8F 83            [24] 9131 	mov	dph,r7
      003337 12r00r00         [24] 9132 	lcall	_putchar
                                   9133 ;	calc.c:57: for (mask = 0x80000000lu; mask; mask >>= 1)
      00333A E5*00            [12] 9134 	mov	a,_bp
      00333C 24 18            [12] 9135 	add	a,#0x18
      00333E F8               [12] 9136 	mov	r0,a
      00333F 08               [12] 9137 	inc	r0
      003340 08               [12] 9138 	inc	r0
      003341 08               [12] 9139 	inc	r0
      003342 E6               [12] 9140 	mov	a,@r0
      003343 C3               [12] 9141 	clr	c
      003344 13               [12] 9142 	rrc	a
      003345 F6               [12] 9143 	mov	@r0,a
      003346 18               [12] 9144 	dec	r0
      003347 E6               [12] 9145 	mov	a,@r0
      003348 13               [12] 9146 	rrc	a
      003349 F6               [12] 9147 	mov	@r0,a
      00334A 18               [12] 9148 	dec	r0
      00334B E6               [12] 9149 	mov	a,@r0
      00334C 13               [12] 9150 	rrc	a
      00334D F6               [12] 9151 	mov	@r0,a
      00334E 18               [12] 9152 	dec	r0
      00334F E6               [12] 9153 	mov	a,@r0
      003350 13               [12] 9154 	rrc	a
      003351 F6               [12] 9155 	mov	@r0,a
      003352 E5*00            [12] 9156 	mov	a,_bp
      003354 24 18            [12] 9157 	add	a,#0x18
      003356 F8               [12] 9158 	mov	r0,a
      003357 E6               [12] 9159 	mov	a,@r0
      003358 08               [12] 9160 	inc	r0
      003359 46               [12] 9161 	orl	a,@r0
      00335A 08               [12] 9162 	inc	r0
      00335B 46               [12] 9163 	orl	a,@r0
      00335C 08               [12] 9164 	inc	r0
      00335D 46               [12] 9165 	orl	a,@r0
      00335E 70 9B            [24] 9166 	jnz	00149$
                                   9167 ;	calc.c:428: printbin(vals[1]);
      003360                       9168 00106$:
                                   9169 ;	calc.c:430: printstr("\r\nSSTOP0 = ");
      003360 7Dr28            [12] 9170 	mov	r5,#___str_22
      003362 7Es01            [12] 9171 	mov	r6,#(___str_22 >> 8)
      003364 7F 80            [12] 9172 	mov	r7,#0x80
                                   9173 ;	calc.c:51: return;
      003366                       9174 00152$:
                                   9175 ;	calc.c:49: for (; *s; s++) putchar(*s);
      003366 8D 82            [24] 9176 	mov	dpl,r5
      003368 8E 83            [24] 9177 	mov	dph,r6
      00336A 8F F0            [24] 9178 	mov	b,r7
      00336C 12r00r00         [24] 9179 	lcall	__gptrget
      00336F FC               [12] 9180 	mov	r4,a
      003370 60 10            [24] 9181 	jz	00126$
      003372 7B 00            [12] 9182 	mov	r3,#0x00
      003374 8C 82            [24] 9183 	mov	dpl,r4
      003376 8B 83            [24] 9184 	mov	dph,r3
      003378 12r00r00         [24] 9185 	lcall	_putchar
      00337B 0D               [12] 9186 	inc	r5
                                   9187 ;	calc.c:430: printstr("\r\nSSTOP0 = ");
      00337C BD 00 E7         [24] 9188 	cjne	r5,#0x00,00152$
      00337F 0E               [12] 9189 	inc	r6
      003380 80 E4            [24] 9190 	sjmp	00152$
      003382                       9191 00126$:
                                   9192 ;	calc.c:431: if (n > 1) {
      003382 E5*00            [12] 9193 	mov	a,_bp
      003384 24 0A            [12] 9194 	add	a,#0x0a
      003386 F8               [12] 9195 	mov	r0,a
      003387 C3               [12] 9196 	clr	c
      003388 74 01            [12] 9197 	mov	a,#0x01
      00338A 96               [12] 9198 	subb	a,@r0
      00338B 74 80            [12] 9199 	mov	a,#(0x00 ^ 0x80)
      00338D 08               [12] 9200 	inc	r0
      00338E 86 F0            [24] 9201 	mov	b,@r0
      003390 63 F0 80         [24] 9202 	xrl	b,#0x80
      003393 95 F0            [12] 9203 	subb	a,b
      003395 40 03            [24] 9204 	jc	00333$
      003397 02r34r7A         [24] 9205 	ljmp	00108$
      00339A                       9206 00333$:
                                   9207 ;	calc.c:432: printf("% 11ld / ", vals[0]);
      00339A 87 04            [24] 9208 	mov	ar4,@r1
      00339C 09               [12] 9209 	inc	r1
      00339D 87 05            [24] 9210 	mov	ar5,@r1
      00339F 09               [12] 9211 	inc	r1
      0033A0 87 06            [24] 9212 	mov	ar6,@r1
      0033A2 09               [12] 9213 	inc	r1
      0033A3 87 07            [24] 9214 	mov	ar7,@r1
      0033A5 19               [12] 9215 	dec	r1
      0033A6 19               [12] 9216 	dec	r1
      0033A7 19               [12] 9217 	dec	r1
      0033A8 C0 01            [24] 9218 	push	ar1
      0033AA C0 04            [24] 9219 	push	ar4
      0033AC C0 05            [24] 9220 	push	ar5
      0033AE C0 06            [24] 9221 	push	ar6
      0033B0 C0 07            [24] 9222 	push	ar7
      0033B2 74r1D            [12] 9223 	mov	a,#___str_3
      0033B4 C0 E0            [24] 9224 	push	acc
      0033B6 74s00            [12] 9225 	mov	a,#(___str_3 >> 8)
      0033B8 C0 E0            [24] 9226 	push	acc
      0033BA 74 80            [12] 9227 	mov	a,#0x80
      0033BC C0 E0            [24] 9228 	push	acc
      0033BE 12r00r00         [24] 9229 	lcall	_printf
      0033C1 E5 81            [12] 9230 	mov	a,sp
      0033C3 24 F9            [12] 9231 	add	a,#0xf9
      0033C5 F5 81            [12] 9232 	mov	sp,a
      0033C7 D0 01            [24] 9233 	pop	ar1
                                   9234 ;	calc.c:433: printf("%08lx / ", vals[0]);
      0033C9 87 04            [24] 9235 	mov	ar4,@r1
      0033CB 09               [12] 9236 	inc	r1
      0033CC 87 05            [24] 9237 	mov	ar5,@r1
      0033CE 09               [12] 9238 	inc	r1
      0033CF 87 06            [24] 9239 	mov	ar6,@r1
      0033D1 09               [12] 9240 	inc	r1
      0033D2 87 07            [24] 9241 	mov	ar7,@r1
      0033D4 19               [12] 9242 	dec	r1
      0033D5 19               [12] 9243 	dec	r1
      0033D6 19               [12] 9244 	dec	r1
      0033D7 C0 01            [24] 9245 	push	ar1
      0033D9 C0 04            [24] 9246 	push	ar4
      0033DB C0 05            [24] 9247 	push	ar5
      0033DD C0 06            [24] 9248 	push	ar6
      0033DF C0 07            [24] 9249 	push	ar7
      0033E1 74r27            [12] 9250 	mov	a,#___str_4
      0033E3 C0 E0            [24] 9251 	push	acc
      0033E5 74s00            [12] 9252 	mov	a,#(___str_4 >> 8)
      0033E7 C0 E0            [24] 9253 	push	acc
      0033E9 74 80            [12] 9254 	mov	a,#0x80
      0033EB C0 E0            [24] 9255 	push	acc
      0033ED 12r00r00         [24] 9256 	lcall	_printf
      0033F0 E5 81            [12] 9257 	mov	a,sp
      0033F2 24 F9            [12] 9258 	add	a,#0xf9
      0033F4 F5 81            [12] 9259 	mov	sp,a
      0033F6 D0 01            [24] 9260 	pop	ar1
                                   9261 ;	calc.c:434: printbin(vals[0]);
      0033F8 E5*00            [12] 9262 	mov	a,_bp
      0033FA 24 14            [12] 9263 	add	a,#0x14
      0033FC F8               [12] 9264 	mov	r0,a
      0033FD E7               [12] 9265 	mov	a,@r1
      0033FE F6               [12] 9266 	mov	@r0,a
      0033FF 09               [12] 9267 	inc	r1
      003400 E7               [12] 9268 	mov	a,@r1
      003401 08               [12] 9269 	inc	r0
      003402 F6               [12] 9270 	mov	@r0,a
      003403 09               [12] 9271 	inc	r1
      003404 E7               [12] 9272 	mov	a,@r1
      003405 08               [12] 9273 	inc	r0
      003406 F6               [12] 9274 	mov	@r0,a
      003407 09               [12] 9275 	inc	r1
      003408 E7               [12] 9276 	mov	a,@r1
      003409 08               [12] 9277 	inc	r0
      00340A F6               [12] 9278 	mov	@r0,a
                                   9279 ;	calc.c:57: for (mask = 0x80000000lu; mask; mask >>= 1)
      00340B E5*00            [12] 9280 	mov	a,_bp
      00340D 24 18            [12] 9281 	add	a,#0x18
      00340F F8               [12] 9282 	mov	r0,a
      003410 E4               [12] 9283 	clr	a
      003411 F6               [12] 9284 	mov	@r0,a
      003412 08               [12] 9285 	inc	r0
      003413 F6               [12] 9286 	mov	@r0,a
      003414 08               [12] 9287 	inc	r0
      003415 F6               [12] 9288 	mov	@r0,a
      003416 08               [12] 9289 	inc	r0
      003417 76 80            [12] 9290 	mov	@r0,#0x80
      003419                       9291 00154$:
                                   9292 ;	calc.c:58: (void)putchar((d & mask) ? (int)'1' : (int)'0');
      003419 E5*00            [12] 9293 	mov	a,_bp
      00341B 24 14            [12] 9294 	add	a,#0x14
      00341D F8               [12] 9295 	mov	r0,a
      00341E 86 04            [24] 9296 	mov	ar4,@r0
      003420 08               [12] 9297 	inc	r0
      003421 86 05            [24] 9298 	mov	ar5,@r0
      003423 08               [12] 9299 	inc	r0
      003424 86 06            [24] 9300 	mov	ar6,@r0
      003426 08               [12] 9301 	inc	r0
      003427 86 07            [24] 9302 	mov	ar7,@r0
      003429 E5*00            [12] 9303 	mov	a,_bp
      00342B 24 18            [12] 9304 	add	a,#0x18
      00342D F8               [12] 9305 	mov	r0,a
      00342E E6               [12] 9306 	mov	a,@r0
      00342F 52 04            [12] 9307 	anl	ar4,a
      003431 08               [12] 9308 	inc	r0
      003432 E6               [12] 9309 	mov	a,@r0
      003433 52 05            [12] 9310 	anl	ar5,a
      003435 08               [12] 9311 	inc	r0
      003436 E6               [12] 9312 	mov	a,@r0
      003437 52 06            [12] 9313 	anl	ar6,a
      003439 08               [12] 9314 	inc	r0
      00343A E6               [12] 9315 	mov	a,@r0
      00343B 52 07            [12] 9316 	anl	ar7,a
      00343D EC               [12] 9317 	mov	a,r4
      00343E 4D               [12] 9318 	orl	a,r5
      00343F 4E               [12] 9319 	orl	a,r6
      003440 4F               [12] 9320 	orl	a,r7
      003441 60 06            [24] 9321 	jz	00169$
      003443 7E 31            [12] 9322 	mov	r6,#0x31
      003445 7F 00            [12] 9323 	mov	r7,#0x00
      003447 80 04            [24] 9324 	sjmp	00170$
      003449                       9325 00169$:
      003449 7E 30            [12] 9326 	mov	r6,#0x30
      00344B 7F 00            [12] 9327 	mov	r7,#0x00
      00344D                       9328 00170$:
      00344D 8E 82            [24] 9329 	mov	dpl,r6
      00344F 8F 83            [24] 9330 	mov	dph,r7
      003451 12r00r00         [24] 9331 	lcall	_putchar
                                   9332 ;	calc.c:57: for (mask = 0x80000000lu; mask; mask >>= 1)
      003454 E5*00            [12] 9333 	mov	a,_bp
      003456 24 18            [12] 9334 	add	a,#0x18
      003458 F8               [12] 9335 	mov	r0,a
      003459 08               [12] 9336 	inc	r0
      00345A 08               [12] 9337 	inc	r0
      00345B 08               [12] 9338 	inc	r0
      00345C E6               [12] 9339 	mov	a,@r0
      00345D C3               [12] 9340 	clr	c
      00345E 13               [12] 9341 	rrc	a
      00345F F6               [12] 9342 	mov	@r0,a
      003460 18               [12] 9343 	dec	r0
      003461 E6               [12] 9344 	mov	a,@r0
      003462 13               [12] 9345 	rrc	a
      003463 F6               [12] 9346 	mov	@r0,a
      003464 18               [12] 9347 	dec	r0
      003465 E6               [12] 9348 	mov	a,@r0
      003466 13               [12] 9349 	rrc	a
      003467 F6               [12] 9350 	mov	@r0,a
      003468 18               [12] 9351 	dec	r0
      003469 E6               [12] 9352 	mov	a,@r0
      00346A 13               [12] 9353 	rrc	a
      00346B F6               [12] 9354 	mov	@r0,a
      00346C E5*00            [12] 9355 	mov	a,_bp
      00346E 24 18            [12] 9356 	add	a,#0x18
      003470 F8               [12] 9357 	mov	r0,a
      003471 E6               [12] 9358 	mov	a,@r0
      003472 08               [12] 9359 	inc	r0
      003473 46               [12] 9360 	orl	a,@r0
      003474 08               [12] 9361 	inc	r0
      003475 46               [12] 9362 	orl	a,@r0
      003476 08               [12] 9363 	inc	r0
      003477 46               [12] 9364 	orl	a,@r0
      003478 70 9F            [24] 9365 	jnz	00154$
                                   9366 ;	calc.c:434: printbin(vals[0]);
      00347A                       9367 00108$:
                                   9368 ;	calc.c:436: printstr("\r\n");
      00347A 7Dr30            [12] 9369 	mov	r5,#___str_5
      00347C 7Es00            [12] 9370 	mov	r6,#(___str_5 >> 8)
      00347E 7F 80            [12] 9371 	mov	r7,#0x80
                                   9372 ;	calc.c:51: return;
      003480                       9373 00157$:
                                   9374 ;	calc.c:49: for (; *s; s++) putchar(*s);
      003480 8D 82            [24] 9375 	mov	dpl,r5
      003482 8E 83            [24] 9376 	mov	dph,r6
      003484 8F F0            [24] 9377 	mov	b,r7
      003486 12r00r00         [24] 9378 	lcall	__gptrget
      003489 FC               [12] 9379 	mov	r4,a
      00348A 60 10            [24] 9380 	jz	00130$
      00348C 7B 00            [12] 9381 	mov	r3,#0x00
      00348E 8C 82            [24] 9382 	mov	dpl,r4
      003490 8B 83            [24] 9383 	mov	dph,r3
      003492 12r00r00         [24] 9384 	lcall	_putchar
      003495 0D               [12] 9385 	inc	r5
                                   9386 ;	calc.c:436: printstr("\r\n");
      003496 BD 00 E7         [24] 9387 	cjne	r5,#0x00,00157$
      003499 0E               [12] 9388 	inc	r6
      00349A 80 E4            [24] 9389 	sjmp	00157$
      00349C                       9390 00130$:
                                   9391 ;	calc.c:438: return 1;
      00349C 90 00 01         [24] 9392 	mov	dptr,#0x0001
                                   9393 ;	calc.c:439: }
      00349F 85*00 81         [24] 9394 	mov	sp,_bp
      0034A2 D0*00            [24] 9395 	pop	_bp
      0034A4 22               [24] 9396 	ret
                                   9397 ;------------------------------------------------------------
                                   9398 ;Allocation info for local variables in function 'help'
                                   9399 ;------------------------------------------------------------
                                   9400 ;delta                     Allocated to stack - _bp -5
                                   9401 ;_ctx                      Allocated to registers 
                                   9402 ;__1310720149              Allocated to registers 
                                   9403 ;s                         Allocated to registers r5 r6 r7 
                                   9404 ;__1310720151              Allocated to registers 
                                   9405 ;s                         Allocated to registers r5 r6 r7 
                                   9406 ;__1310720153              Allocated to registers 
                                   9407 ;s                         Allocated to registers r5 r6 r7 
                                   9408 ;__1310720155              Allocated to registers 
                                   9409 ;s                         Allocated to registers r5 r6 r7 
                                   9410 ;__1310720157              Allocated to registers 
                                   9411 ;s                         Allocated to registers r5 r6 r7 
                                   9412 ;__1310720159              Allocated to registers 
                                   9413 ;s                         Allocated to registers r5 r6 r7 
                                   9414 ;__1310720161              Allocated to registers 
                                   9415 ;s                         Allocated to registers r5 r6 r7 
                                   9416 ;__1310720163              Allocated to registers 
                                   9417 ;s                         Allocated to registers r5 r6 r7 
                                   9418 ;__1310720165              Allocated to registers 
                                   9419 ;s                         Allocated to registers r5 r6 r7 
                                   9420 ;__1310720167              Allocated to registers 
                                   9421 ;s                         Allocated to registers r5 r6 r7 
                                   9422 ;__1310720169              Allocated to registers 
                                   9423 ;s                         Allocated to registers r5 r6 r7 
                                   9424 ;__1310720171              Allocated to registers 
                                   9425 ;s                         Allocated to registers r5 r6 r7 
                                   9426 ;__1310720173              Allocated to registers 
                                   9427 ;s                         Allocated to registers r5 r6 r7 
                                   9428 ;__1310720175              Allocated to registers 
                                   9429 ;s                         Allocated to registers r5 r6 r7 
                                   9430 ;__1310720177              Allocated to registers 
                                   9431 ;s                         Allocated to registers r5 r6 r7 
                                   9432 ;__1310720179              Allocated to registers 
                                   9433 ;s                         Allocated to registers r5 r6 r7 
                                   9434 ;__1310720181              Allocated to registers 
                                   9435 ;s                         Allocated to registers r5 r6 r7 
                                   9436 ;__1310720183              Allocated to registers 
                                   9437 ;s                         Allocated to registers r5 r6 r7 
                                   9438 ;__1310720185              Allocated to registers 
                                   9439 ;s                         Allocated to registers r5 r6 r7 
                                   9440 ;__1310720187              Allocated to registers 
                                   9441 ;s                         Allocated to registers r5 r6 r7 
                                   9442 ;__1310720189              Allocated to registers 
                                   9443 ;s                         Allocated to registers r5 r6 r7 
                                   9444 ;__1310720191              Allocated to registers 
                                   9445 ;s                         Allocated to registers r5 r6 r7 
                                   9446 ;__1310720193              Allocated to registers 
                                   9447 ;s                         Allocated to registers r5 r6 r7 
                                   9448 ;__1310720195              Allocated to registers 
                                   9449 ;s                         Allocated to registers r5 r6 r7 
                                   9450 ;__1310720197              Allocated to registers 
                                   9451 ;s                         Allocated to registers r5 r6 r7 
                                   9452 ;__1310720199              Allocated to registers 
                                   9453 ;s                         Allocated to registers r5 r6 r7 
                                   9454 ;__1310720201              Allocated to registers 
                                   9455 ;s                         Allocated to registers r5 r6 r7 
                                   9456 ;__1310720203              Allocated to registers 
                                   9457 ;s                         Allocated to registers r5 r6 r7 
                                   9458 ;__1310720205              Allocated to registers 
                                   9459 ;s                         Allocated to registers r5 r6 r7 
                                   9460 ;__1310720207              Allocated to registers 
                                   9461 ;s                         Allocated to registers r5 r6 r7 
                                   9462 ;__1310720209              Allocated to registers 
                                   9463 ;s                         Allocated to registers r5 r6 r7 
                                   9464 ;------------------------------------------------------------
                                   9465 ;	calc.c:441: static int help(void *_ctx, delta_t *delta) __reentrant {
                                   9466 ;	-----------------------------------------
                                   9467 ;	 function help
                                   9468 ;	-----------------------------------------
      0034A5                       9469 _help:
      0034A5 C0*00            [24] 9470 	push	_bp
      0034A7 85 81*00         [24] 9471 	mov	_bp,sp
                                   9472 ;	calc.c:445: printstr("\r\nHhOo\tbase 16 10 8 2\r\n");
      0034AA 7Dr34            [12] 9473 	mov	r5,#___str_23
      0034AC 7Es01            [12] 9474 	mov	r6,#(___str_23 >> 8)
      0034AE 7F 80            [12] 9475 	mov	r7,#0x80
                                   9476 ;	calc.c:51: return;
      0034B0                       9477 00164$:
                                   9478 ;	calc.c:49: for (; *s; s++) putchar(*s);
      0034B0 8D 82            [24] 9479 	mov	dpl,r5
      0034B2 8E 83            [24] 9480 	mov	dph,r6
      0034B4 8F F0            [24] 9481 	mov	b,r7
      0034B6 12r00r00         [24] 9482 	lcall	__gptrget
      0034B9 FC               [12] 9483 	mov	r4,a
      0034BA 60 10            [24] 9484 	jz	00102$
      0034BC 7B 00            [12] 9485 	mov	r3,#0x00
      0034BE 8C 82            [24] 9486 	mov	dpl,r4
      0034C0 8B 83            [24] 9487 	mov	dph,r3
      0034C2 12r00r00         [24] 9488 	lcall	_putchar
      0034C5 0D               [12] 9489 	inc	r5
                                   9490 ;	calc.c:445: printstr("\r\nHhOo\tbase 16 10 8 2\r\n");
      0034C6 BD 00 E7         [24] 9491 	cjne	r5,#0x00,00164$
      0034C9 0E               [12] 9492 	inc	r6
      0034CA 80 E4            [24] 9493 	sjmp	00164$
      0034CC                       9494 00102$:
                                   9495 ;	calc.c:446: printstr("p\tpeek top\r\n");
      0034CC 7Dr4C            [12] 9496 	mov	r5,#___str_24
      0034CE 7Es01            [12] 9497 	mov	r6,#(___str_24 >> 8)
      0034D0 7F 80            [12] 9498 	mov	r7,#0x80
                                   9499 ;	calc.c:51: return;
      0034D2                       9500 00167$:
                                   9501 ;	calc.c:49: for (; *s; s++) putchar(*s);
      0034D2 8D 82            [24] 9502 	mov	dpl,r5
      0034D4 8E 83            [24] 9503 	mov	dph,r6
      0034D6 8F F0            [24] 9504 	mov	b,r7
      0034D8 12r00r00         [24] 9505 	lcall	__gptrget
      0034DB FC               [12] 9506 	mov	r4,a
      0034DC 60 10            [24] 9507 	jz	00104$
      0034DE 7B 00            [12] 9508 	mov	r3,#0x00
      0034E0 8C 82            [24] 9509 	mov	dpl,r4
      0034E2 8B 83            [24] 9510 	mov	dph,r3
      0034E4 12r00r00         [24] 9511 	lcall	_putchar
      0034E7 0D               [12] 9512 	inc	r5
                                   9513 ;	calc.c:446: printstr("p\tpeek top\r\n");
      0034E8 BD 00 E7         [24] 9514 	cjne	r5,#0x00,00167$
      0034EB 0E               [12] 9515 	inc	r6
      0034EC 80 E4            [24] 9516 	sjmp	00167$
      0034EE                       9517 00104$:
                                   9518 ;	calc.c:447: printstr("P\tprint stack\r\n");
      0034EE 7Dr59            [12] 9519 	mov	r5,#___str_25
      0034F0 7Es01            [12] 9520 	mov	r6,#(___str_25 >> 8)
      0034F2 7F 80            [12] 9521 	mov	r7,#0x80
                                   9522 ;	calc.c:51: return;
      0034F4                       9523 00170$:
                                   9524 ;	calc.c:49: for (; *s; s++) putchar(*s);
      0034F4 8D 82            [24] 9525 	mov	dpl,r5
      0034F6 8E 83            [24] 9526 	mov	dph,r6
      0034F8 8F F0            [24] 9527 	mov	b,r7
      0034FA 12r00r00         [24] 9528 	lcall	__gptrget
      0034FD FC               [12] 9529 	mov	r4,a
      0034FE 60 10            [24] 9530 	jz	00106$
      003500 7B 00            [12] 9531 	mov	r3,#0x00
      003502 8C 82            [24] 9532 	mov	dpl,r4
      003504 8B 83            [24] 9533 	mov	dph,r3
      003506 12r00r00         [24] 9534 	lcall	_putchar
      003509 0D               [12] 9535 	inc	r5
                                   9536 ;	calc.c:447: printstr("P\tprint stack\r\n");
      00350A BD 00 E7         [24] 9537 	cjne	r5,#0x00,00170$
      00350D 0E               [12] 9538 	inc	r6
      00350E 80 E4            [24] 9539 	sjmp	00170$
      003510                       9540 00106$:
                                   9541 ;	calc.c:448: printstr("v.\tpop top\r\n");
      003510 7Dr69            [12] 9542 	mov	r5,#___str_26
      003512 7Es01            [12] 9543 	mov	r6,#(___str_26 >> 8)
      003514 7F 80            [12] 9544 	mov	r7,#0x80
                                   9545 ;	calc.c:51: return;
      003516                       9546 00173$:
                                   9547 ;	calc.c:49: for (; *s; s++) putchar(*s);
      003516 8D 82            [24] 9548 	mov	dpl,r5
      003518 8E 83            [24] 9549 	mov	dph,r6
      00351A 8F F0            [24] 9550 	mov	b,r7
      00351C 12r00r00         [24] 9551 	lcall	__gptrget
      00351F FC               [12] 9552 	mov	r4,a
      003520 60 10            [24] 9553 	jz	00108$
      003522 7B 00            [12] 9554 	mov	r3,#0x00
      003524 8C 82            [24] 9555 	mov	dpl,r4
      003526 8B 83            [24] 9556 	mov	dph,r3
      003528 12r00r00         [24] 9557 	lcall	_putchar
      00352B 0D               [12] 9558 	inc	r5
                                   9559 ;	calc.c:448: printstr("v.\tpop top\r\n");
      00352C BD 00 E7         [24] 9560 	cjne	r5,#0x00,00173$
      00352F 0E               [12] 9561 	inc	r6
      003530 80 E4            [24] 9562 	sjmp	00173$
      003532                       9563 00108$:
                                   9564 ;	calc.c:449: printstr("V\tpop all\r\n");
      003532 7Dr76            [12] 9565 	mov	r5,#___str_27
      003534 7Es01            [12] 9566 	mov	r6,#(___str_27 >> 8)
      003536 7F 80            [12] 9567 	mov	r7,#0x80
                                   9568 ;	calc.c:51: return;
      003538                       9569 00176$:
                                   9570 ;	calc.c:49: for (; *s; s++) putchar(*s);
      003538 8D 82            [24] 9571 	mov	dpl,r5
      00353A 8E 83            [24] 9572 	mov	dph,r6
      00353C 8F F0            [24] 9573 	mov	b,r7
      00353E 12r00r00         [24] 9574 	lcall	__gptrget
      003541 FC               [12] 9575 	mov	r4,a
      003542 60 10            [24] 9576 	jz	00110$
      003544 7B 00            [12] 9577 	mov	r3,#0x00
      003546 8C 82            [24] 9578 	mov	dpl,r4
      003548 8B 83            [24] 9579 	mov	dph,r3
      00354A 12r00r00         [24] 9580 	lcall	_putchar
      00354D 0D               [12] 9581 	inc	r5
                                   9582 ;	calc.c:449: printstr("V\tpop all\r\n");
      00354E BD 00 E7         [24] 9583 	cjne	r5,#0x00,00176$
      003551 0E               [12] 9584 	inc	r6
      003552 80 E4            [24] 9585 	sjmp	00176$
      003554                       9586 00110$:
                                   9587 ;	calc.c:450: printstr("i\treset acc\r\n");
      003554 7Dr82            [12] 9588 	mov	r5,#___str_28
      003556 7Es01            [12] 9589 	mov	r6,#(___str_28 >> 8)
      003558 7F 80            [12] 9590 	mov	r7,#0x80
                                   9591 ;	calc.c:51: return;
      00355A                       9592 00179$:
                                   9593 ;	calc.c:49: for (; *s; s++) putchar(*s);
      00355A 8D 82            [24] 9594 	mov	dpl,r5
      00355C 8E 83            [24] 9595 	mov	dph,r6
      00355E 8F F0            [24] 9596 	mov	b,r7
      003560 12r00r00         [24] 9597 	lcall	__gptrget
      003563 FC               [12] 9598 	mov	r4,a
      003564 60 10            [24] 9599 	jz	00112$
      003566 7B 00            [12] 9600 	mov	r3,#0x00
      003568 8C 82            [24] 9601 	mov	dpl,r4
      00356A 8B 83            [24] 9602 	mov	dph,r3
      00356C 12r00r00         [24] 9603 	lcall	_putchar
      00356F 0D               [12] 9604 	inc	r5
                                   9605 ;	calc.c:450: printstr("i\treset acc\r\n");
      003570 BD 00 E7         [24] 9606 	cjne	r5,#0x00,00179$
      003573 0E               [12] 9607 	inc	r6
      003574 80 E4            [24] 9608 	sjmp	00179$
      003576                       9609 00112$:
                                   9610 ;	calc.c:451: printstr("I\treset and discard acc\r\n");
      003576 7Dr90            [12] 9611 	mov	r5,#___str_29
      003578 7Es01            [12] 9612 	mov	r6,#(___str_29 >> 8)
      00357A 7F 80            [12] 9613 	mov	r7,#0x80
                                   9614 ;	calc.c:51: return;
      00357C                       9615 00182$:
                                   9616 ;	calc.c:49: for (; *s; s++) putchar(*s);
      00357C 8D 82            [24] 9617 	mov	dpl,r5
      00357E 8E 83            [24] 9618 	mov	dph,r6
      003580 8F F0            [24] 9619 	mov	b,r7
      003582 12r00r00         [24] 9620 	lcall	__gptrget
      003585 FC               [12] 9621 	mov	r4,a
      003586 60 10            [24] 9622 	jz	00114$
      003588 7B 00            [12] 9623 	mov	r3,#0x00
      00358A 8C 82            [24] 9624 	mov	dpl,r4
      00358C 8B 83            [24] 9625 	mov	dph,r3
      00358E 12r00r00         [24] 9626 	lcall	_putchar
      003591 0D               [12] 9627 	inc	r5
                                   9628 ;	calc.c:451: printstr("I\treset and discard acc\r\n");
      003592 BD 00 E7         [24] 9629 	cjne	r5,#0x00,00182$
      003595 0E               [12] 9630 	inc	r6
      003596 80 E4            [24] 9631 	sjmp	00182$
      003598                       9632 00114$:
                                   9633 ;	calc.c:452: printstr("x\texchange top 2\r\n");
      003598 7DrAA            [12] 9634 	mov	r5,#___str_30
      00359A 7Es01            [12] 9635 	mov	r6,#(___str_30 >> 8)
      00359C 7F 80            [12] 9636 	mov	r7,#0x80
                                   9637 ;	calc.c:51: return;
      00359E                       9638 00185$:
                                   9639 ;	calc.c:49: for (; *s; s++) putchar(*s);
      00359E 8D 82            [24] 9640 	mov	dpl,r5
      0035A0 8E 83            [24] 9641 	mov	dph,r6
      0035A2 8F F0            [24] 9642 	mov	b,r7
      0035A4 12r00r00         [24] 9643 	lcall	__gptrget
      0035A7 FC               [12] 9644 	mov	r4,a
      0035A8 60 10            [24] 9645 	jz	00116$
      0035AA 7B 00            [12] 9646 	mov	r3,#0x00
      0035AC 8C 82            [24] 9647 	mov	dpl,r4
      0035AE 8B 83            [24] 9648 	mov	dph,r3
      0035B0 12r00r00         [24] 9649 	lcall	_putchar
      0035B3 0D               [12] 9650 	inc	r5
                                   9651 ;	calc.c:452: printstr("x\texchange top 2\r\n");
      0035B4 BD 00 E7         [24] 9652 	cjne	r5,#0x00,00185$
      0035B7 0E               [12] 9653 	inc	r6
      0035B8 80 E4            [24] 9654 	sjmp	00185$
      0035BA                       9655 00116$:
                                   9656 ;	calc.c:453: printstr("X\texchange stacks primary <-> secondary\r\n");
      0035BA 7DrBD            [12] 9657 	mov	r5,#___str_31
      0035BC 7Es01            [12] 9658 	mov	r6,#(___str_31 >> 8)
      0035BE 7F 80            [12] 9659 	mov	r7,#0x80
                                   9660 ;	calc.c:51: return;
      0035C0                       9661 00188$:
                                   9662 ;	calc.c:49: for (; *s; s++) putchar(*s);
      0035C0 8D 82            [24] 9663 	mov	dpl,r5
      0035C2 8E 83            [24] 9664 	mov	dph,r6
      0035C4 8F F0            [24] 9665 	mov	b,r7
      0035C6 12r00r00         [24] 9666 	lcall	__gptrget
      0035C9 FC               [12] 9667 	mov	r4,a
      0035CA 60 10            [24] 9668 	jz	00118$
      0035CC 7B 00            [12] 9669 	mov	r3,#0x00
      0035CE 8C 82            [24] 9670 	mov	dpl,r4
      0035D0 8B 83            [24] 9671 	mov	dph,r3
      0035D2 12r00r00         [24] 9672 	lcall	_putchar
      0035D5 0D               [12] 9673 	inc	r5
                                   9674 ;	calc.c:453: printstr("X\texchange stacks primary <-> secondary\r\n");
      0035D6 BD 00 E7         [24] 9675 	cjne	r5,#0x00,00188$
      0035D9 0E               [12] 9676 	inc	r6
      0035DA 80 E4            [24] 9677 	sjmp	00188$
      0035DC                       9678 00118$:
                                   9679 ;	calc.c:454: printstr("T\texchange tops primary <-> secondary\r\n");
      0035DC 7DrE7            [12] 9680 	mov	r5,#___str_32
      0035DE 7Es01            [12] 9681 	mov	r6,#(___str_32 >> 8)
      0035E0 7F 80            [12] 9682 	mov	r7,#0x80
                                   9683 ;	calc.c:51: return;
      0035E2                       9684 00191$:
                                   9685 ;	calc.c:49: for (; *s; s++) putchar(*s);
      0035E2 8D 82            [24] 9686 	mov	dpl,r5
      0035E4 8E 83            [24] 9687 	mov	dph,r6
      0035E6 8F F0            [24] 9688 	mov	b,r7
      0035E8 12r00r00         [24] 9689 	lcall	__gptrget
      0035EB FC               [12] 9690 	mov	r4,a
      0035EC 60 10            [24] 9691 	jz	00120$
      0035EE 7B 00            [12] 9692 	mov	r3,#0x00
      0035F0 8C 82            [24] 9693 	mov	dpl,r4
      0035F2 8B 83            [24] 9694 	mov	dph,r3
      0035F4 12r00r00         [24] 9695 	lcall	_putchar
      0035F7 0D               [12] 9696 	inc	r5
                                   9697 ;	calc.c:454: printstr("T\texchange tops primary <-> secondary\r\n");
      0035F8 BD 00 E7         [24] 9698 	cjne	r5,#0x00,00191$
      0035FB 0E               [12] 9699 	inc	r6
      0035FC 80 E4            [24] 9700 	sjmp	00191$
      0035FE                       9701 00120$:
                                   9702 ;	calc.c:455: printstr("U\tcopy top secondary -> primary\r\n");
      0035FE 7Dr0F            [12] 9703 	mov	r5,#___str_33
      003600 7Es02            [12] 9704 	mov	r6,#(___str_33 >> 8)
      003602 7F 80            [12] 9705 	mov	r7,#0x80
                                   9706 ;	calc.c:51: return;
      003604                       9707 00194$:
                                   9708 ;	calc.c:49: for (; *s; s++) putchar(*s);
      003604 8D 82            [24] 9709 	mov	dpl,r5
      003606 8E 83            [24] 9710 	mov	dph,r6
      003608 8F F0            [24] 9711 	mov	b,r7
      00360A 12r00r00         [24] 9712 	lcall	__gptrget
      00360D FC               [12] 9713 	mov	r4,a
      00360E 60 10            [24] 9714 	jz	00122$
      003610 7B 00            [12] 9715 	mov	r3,#0x00
      003612 8C 82            [24] 9716 	mov	dpl,r4
      003614 8B 83            [24] 9717 	mov	dph,r3
      003616 12r00r00         [24] 9718 	lcall	_putchar
      003619 0D               [12] 9719 	inc	r5
                                   9720 ;	calc.c:455: printstr("U\tcopy top secondary -> primary\r\n");
      00361A BD 00 E7         [24] 9721 	cjne	r5,#0x00,00194$
      00361D 0E               [12] 9722 	inc	r6
      00361E 80 E4            [24] 9723 	sjmp	00194$
      003620                       9724 00122$:
                                   9725 ;	calc.c:456: printstr("u\tcopy top primary -> secondary\r\n");
      003620 7Dr31            [12] 9726 	mov	r5,#___str_34
      003622 7Es02            [12] 9727 	mov	r6,#(___str_34 >> 8)
      003624 7F 80            [12] 9728 	mov	r7,#0x80
                                   9729 ;	calc.c:51: return;
      003626                       9730 00197$:
                                   9731 ;	calc.c:49: for (; *s; s++) putchar(*s);
      003626 8D 82            [24] 9732 	mov	dpl,r5
      003628 8E 83            [24] 9733 	mov	dph,r6
      00362A 8F F0            [24] 9734 	mov	b,r7
      00362C 12r00r00         [24] 9735 	lcall	__gptrget
      00362F FC               [12] 9736 	mov	r4,a
      003630 60 10            [24] 9737 	jz	00124$
      003632 7B 00            [12] 9738 	mov	r3,#0x00
      003634 8C 82            [24] 9739 	mov	dpl,r4
      003636 8B 83            [24] 9740 	mov	dph,r3
      003638 12r00r00         [24] 9741 	lcall	_putchar
      00363B 0D               [12] 9742 	inc	r5
                                   9743 ;	calc.c:456: printstr("u\tcopy top primary -> secondary\r\n");
      00363C BD 00 E7         [24] 9744 	cjne	r5,#0x00,00197$
      00363F 0E               [12] 9745 	inc	r6
      003640 80 E4            [24] 9746 	sjmp	00197$
      003642                       9747 00124$:
                                   9748 ;	calc.c:457: printstr("M\tmove top secondary -> primary\r\n");
      003642 7Dr53            [12] 9749 	mov	r5,#___str_35
      003644 7Es02            [12] 9750 	mov	r6,#(___str_35 >> 8)
      003646 7F 80            [12] 9751 	mov	r7,#0x80
                                   9752 ;	calc.c:51: return;
      003648                       9753 00200$:
                                   9754 ;	calc.c:49: for (; *s; s++) putchar(*s);
      003648 8D 82            [24] 9755 	mov	dpl,r5
      00364A 8E 83            [24] 9756 	mov	dph,r6
      00364C 8F F0            [24] 9757 	mov	b,r7
      00364E 12r00r00         [24] 9758 	lcall	__gptrget
      003651 FC               [12] 9759 	mov	r4,a
      003652 60 10            [24] 9760 	jz	00126$
      003654 7B 00            [12] 9761 	mov	r3,#0x00
      003656 8C 82            [24] 9762 	mov	dpl,r4
      003658 8B 83            [24] 9763 	mov	dph,r3
      00365A 12r00r00         [24] 9764 	lcall	_putchar
      00365D 0D               [12] 9765 	inc	r5
                                   9766 ;	calc.c:457: printstr("M\tmove top secondary -> primary\r\n");
      00365E BD 00 E7         [24] 9767 	cjne	r5,#0x00,00200$
      003661 0E               [12] 9768 	inc	r6
      003662 80 E4            [24] 9769 	sjmp	00200$
      003664                       9770 00126$:
                                   9771 ;	calc.c:458: printstr("m\tmove top primary -> secondary\r\n");
      003664 7Dr75            [12] 9772 	mov	r5,#___str_36
      003666 7Es02            [12] 9773 	mov	r6,#(___str_36 >> 8)
      003668 7F 80            [12] 9774 	mov	r7,#0x80
                                   9775 ;	calc.c:51: return;
      00366A                       9776 00203$:
                                   9777 ;	calc.c:49: for (; *s; s++) putchar(*s);
      00366A 8D 82            [24] 9778 	mov	dpl,r5
      00366C 8E 83            [24] 9779 	mov	dph,r6
      00366E 8F F0            [24] 9780 	mov	b,r7
      003670 12r00r00         [24] 9781 	lcall	__gptrget
      003673 FC               [12] 9782 	mov	r4,a
      003674 60 10            [24] 9783 	jz	00128$
      003676 7B 00            [12] 9784 	mov	r3,#0x00
      003678 8C 82            [24] 9785 	mov	dpl,r4
      00367A 8B 83            [24] 9786 	mov	dph,r3
      00367C 12r00r00         [24] 9787 	lcall	_putchar
      00367F 0D               [12] 9788 	inc	r5
                                   9789 ;	calc.c:458: printstr("m\tmove top primary -> secondary\r\n");
      003680 BD 00 E7         [24] 9790 	cjne	r5,#0x00,00203$
      003683 0E               [12] 9791 	inc	r6
      003684 80 E4            [24] 9792 	sjmp	00203$
      003686                       9793 00128$:
                                   9794 ;	calc.c:459: printstr("+\tadd top 2\r\n");
      003686 7Dr97            [12] 9795 	mov	r5,#___str_37
      003688 7Es02            [12] 9796 	mov	r6,#(___str_37 >> 8)
      00368A 7F 80            [12] 9797 	mov	r7,#0x80
                                   9798 ;	calc.c:51: return;
      00368C                       9799 00206$:
                                   9800 ;	calc.c:49: for (; *s; s++) putchar(*s);
      00368C 8D 82            [24] 9801 	mov	dpl,r5
      00368E 8E 83            [24] 9802 	mov	dph,r6
      003690 8F F0            [24] 9803 	mov	b,r7
      003692 12r00r00         [24] 9804 	lcall	__gptrget
      003695 FC               [12] 9805 	mov	r4,a
      003696 60 10            [24] 9806 	jz	00130$
      003698 7B 00            [12] 9807 	mov	r3,#0x00
      00369A 8C 82            [24] 9808 	mov	dpl,r4
      00369C 8B 83            [24] 9809 	mov	dph,r3
      00369E 12r00r00         [24] 9810 	lcall	_putchar
      0036A1 0D               [12] 9811 	inc	r5
                                   9812 ;	calc.c:459: printstr("+\tadd top 2\r\n");
      0036A2 BD 00 E7         [24] 9813 	cjne	r5,#0x00,00206$
      0036A5 0E               [12] 9814 	inc	r6
      0036A6 80 E4            [24] 9815 	sjmp	00206$
      0036A8                       9816 00130$:
                                   9817 ;	calc.c:460: printstr("-\tsubtract top 2\r\n");
      0036A8 7DrA5            [12] 9818 	mov	r5,#___str_38
      0036AA 7Es02            [12] 9819 	mov	r6,#(___str_38 >> 8)
      0036AC 7F 80            [12] 9820 	mov	r7,#0x80
                                   9821 ;	calc.c:51: return;
      0036AE                       9822 00209$:
                                   9823 ;	calc.c:49: for (; *s; s++) putchar(*s);
      0036AE 8D 82            [24] 9824 	mov	dpl,r5
      0036B0 8E 83            [24] 9825 	mov	dph,r6
      0036B2 8F F0            [24] 9826 	mov	b,r7
      0036B4 12r00r00         [24] 9827 	lcall	__gptrget
      0036B7 FC               [12] 9828 	mov	r4,a
      0036B8 60 10            [24] 9829 	jz	00132$
      0036BA 7B 00            [12] 9830 	mov	r3,#0x00
      0036BC 8C 82            [24] 9831 	mov	dpl,r4
      0036BE 8B 83            [24] 9832 	mov	dph,r3
      0036C0 12r00r00         [24] 9833 	lcall	_putchar
      0036C3 0D               [12] 9834 	inc	r5
                                   9835 ;	calc.c:460: printstr("-\tsubtract top 2\r\n");
      0036C4 BD 00 E7         [24] 9836 	cjne	r5,#0x00,00209$
      0036C7 0E               [12] 9837 	inc	r6
      0036C8 80 E4            [24] 9838 	sjmp	00209$
      0036CA                       9839 00132$:
                                   9840 ;	calc.c:461: printstr("*\tmultiply top 2\r\n");
      0036CA 7DrB8            [12] 9841 	mov	r5,#___str_39
      0036CC 7Es02            [12] 9842 	mov	r6,#(___str_39 >> 8)
      0036CE 7F 80            [12] 9843 	mov	r7,#0x80
                                   9844 ;	calc.c:51: return;
      0036D0                       9845 00212$:
                                   9846 ;	calc.c:49: for (; *s; s++) putchar(*s);
      0036D0 8D 82            [24] 9847 	mov	dpl,r5
      0036D2 8E 83            [24] 9848 	mov	dph,r6
      0036D4 8F F0            [24] 9849 	mov	b,r7
      0036D6 12r00r00         [24] 9850 	lcall	__gptrget
      0036D9 FC               [12] 9851 	mov	r4,a
      0036DA 60 10            [24] 9852 	jz	00134$
      0036DC 7B 00            [12] 9853 	mov	r3,#0x00
      0036DE 8C 82            [24] 9854 	mov	dpl,r4
      0036E0 8B 83            [24] 9855 	mov	dph,r3
      0036E2 12r00r00         [24] 9856 	lcall	_putchar
      0036E5 0D               [12] 9857 	inc	r5
                                   9858 ;	calc.c:461: printstr("*\tmultiply top 2\r\n");
      0036E6 BD 00 E7         [24] 9859 	cjne	r5,#0x00,00212$
      0036E9 0E               [12] 9860 	inc	r6
      0036EA 80 E4            [24] 9861 	sjmp	00212$
      0036EC                       9862 00134$:
                                   9863 ;	calc.c:462: printstr("/\tdivide top 2\r\n");
      0036EC 7DrCB            [12] 9864 	mov	r5,#___str_40
      0036EE 7Es02            [12] 9865 	mov	r6,#(___str_40 >> 8)
      0036F0 7F 80            [12] 9866 	mov	r7,#0x80
                                   9867 ;	calc.c:51: return;
      0036F2                       9868 00215$:
                                   9869 ;	calc.c:49: for (; *s; s++) putchar(*s);
      0036F2 8D 82            [24] 9870 	mov	dpl,r5
      0036F4 8E 83            [24] 9871 	mov	dph,r6
      0036F6 8F F0            [24] 9872 	mov	b,r7
      0036F8 12r00r00         [24] 9873 	lcall	__gptrget
      0036FB FC               [12] 9874 	mov	r4,a
      0036FC 60 10            [24] 9875 	jz	00136$
      0036FE 7B 00            [12] 9876 	mov	r3,#0x00
      003700 8C 82            [24] 9877 	mov	dpl,r4
      003702 8B 83            [24] 9878 	mov	dph,r3
      003704 12r00r00         [24] 9879 	lcall	_putchar
      003707 0D               [12] 9880 	inc	r5
                                   9881 ;	calc.c:462: printstr("/\tdivide top 2\r\n");
      003708 BD 00 E7         [24] 9882 	cjne	r5,#0x00,00215$
      00370B 0E               [12] 9883 	inc	r6
      00370C 80 E4            [24] 9884 	sjmp	00215$
      00370E                       9885 00136$:
                                   9886 ;	calc.c:463: printstr("\\\tdivide top 2 unsigned\r\n");	
      00370E 7DrDC            [12] 9887 	mov	r5,#___str_41
      003710 7Es02            [12] 9888 	mov	r6,#(___str_41 >> 8)
      003712 7F 80            [12] 9889 	mov	r7,#0x80
                                   9890 ;	calc.c:51: return;
      003714                       9891 00218$:
                                   9892 ;	calc.c:49: for (; *s; s++) putchar(*s);
      003714 8D 82            [24] 9893 	mov	dpl,r5
      003716 8E 83            [24] 9894 	mov	dph,r6
      003718 8F F0            [24] 9895 	mov	b,r7
      00371A 12r00r00         [24] 9896 	lcall	__gptrget
      00371D FC               [12] 9897 	mov	r4,a
      00371E 60 10            [24] 9898 	jz	00138$
      003720 7B 00            [12] 9899 	mov	r3,#0x00
      003722 8C 82            [24] 9900 	mov	dpl,r4
      003724 8B 83            [24] 9901 	mov	dph,r3
      003726 12r00r00         [24] 9902 	lcall	_putchar
      003729 0D               [12] 9903 	inc	r5
                                   9904 ;	calc.c:463: printstr("\\\tdivide top 2 unsigned\r\n");	
      00372A BD 00 E7         [24] 9905 	cjne	r5,#0x00,00218$
      00372D 0E               [12] 9906 	inc	r6
      00372E 80 E4            [24] 9907 	sjmp	00218$
      003730                       9908 00138$:
                                   9909 ;	calc.c:464: printstr("%\tmodulus top 2\r\n");
      003730 7DrF6            [12] 9910 	mov	r5,#___str_42
      003732 7Es02            [12] 9911 	mov	r6,#(___str_42 >> 8)
      003734 7F 80            [12] 9912 	mov	r7,#0x80
                                   9913 ;	calc.c:51: return;
      003736                       9914 00221$:
                                   9915 ;	calc.c:49: for (; *s; s++) putchar(*s);
      003736 8D 82            [24] 9916 	mov	dpl,r5
      003738 8E 83            [24] 9917 	mov	dph,r6
      00373A 8F F0            [24] 9918 	mov	b,r7
      00373C 12r00r00         [24] 9919 	lcall	__gptrget
      00373F FC               [12] 9920 	mov	r4,a
      003740 60 10            [24] 9921 	jz	00140$
      003742 7B 00            [12] 9922 	mov	r3,#0x00
      003744 8C 82            [24] 9923 	mov	dpl,r4
      003746 8B 83            [24] 9924 	mov	dph,r3
      003748 12r00r00         [24] 9925 	lcall	_putchar
      00374B 0D               [12] 9926 	inc	r5
                                   9927 ;	calc.c:464: printstr("%\tmodulus top 2\r\n");
      00374C BD 00 E7         [24] 9928 	cjne	r5,#0x00,00221$
      00374F 0E               [12] 9929 	inc	r6
      003750 80 E4            [24] 9930 	sjmp	00221$
      003752                       9931 00140$:
                                   9932 ;	calc.c:465: printstr("#\tmodulus top 2 unsigned\r\n");
      003752 7Dr08            [12] 9933 	mov	r5,#___str_43
      003754 7Es03            [12] 9934 	mov	r6,#(___str_43 >> 8)
      003756 7F 80            [12] 9935 	mov	r7,#0x80
                                   9936 ;	calc.c:51: return;
      003758                       9937 00224$:
                                   9938 ;	calc.c:49: for (; *s; s++) putchar(*s);
      003758 8D 82            [24] 9939 	mov	dpl,r5
      00375A 8E 83            [24] 9940 	mov	dph,r6
      00375C 8F F0            [24] 9941 	mov	b,r7
      00375E 12r00r00         [24] 9942 	lcall	__gptrget
      003761 FC               [12] 9943 	mov	r4,a
      003762 60 10            [24] 9944 	jz	00142$
      003764 7B 00            [12] 9945 	mov	r3,#0x00
      003766 8C 82            [24] 9946 	mov	dpl,r4
      003768 8B 83            [24] 9947 	mov	dph,r3
      00376A 12r00r00         [24] 9948 	lcall	_putchar
      00376D 0D               [12] 9949 	inc	r5
                                   9950 ;	calc.c:465: printstr("#\tmodulus top 2 unsigned\r\n");
      00376E BD 00 E7         [24] 9951 	cjne	r5,#0x00,00224$
      003771 0E               [12] 9952 	inc	r6
      003772 80 E4            [24] 9953 	sjmp	00224$
      003774                       9954 00142$:
                                   9955 ;	calc.c:466: printstr("&\tand top 2\r\n");
      003774 7Dr23            [12] 9956 	mov	r5,#___str_44
      003776 7Es03            [12] 9957 	mov	r6,#(___str_44 >> 8)
      003778 7F 80            [12] 9958 	mov	r7,#0x80
                                   9959 ;	calc.c:51: return;
      00377A                       9960 00227$:
                                   9961 ;	calc.c:49: for (; *s; s++) putchar(*s);
      00377A 8D 82            [24] 9962 	mov	dpl,r5
      00377C 8E 83            [24] 9963 	mov	dph,r6
      00377E 8F F0            [24] 9964 	mov	b,r7
      003780 12r00r00         [24] 9965 	lcall	__gptrget
      003783 FC               [12] 9966 	mov	r4,a
      003784 60 10            [24] 9967 	jz	00144$
      003786 7B 00            [12] 9968 	mov	r3,#0x00
      003788 8C 82            [24] 9969 	mov	dpl,r4
      00378A 8B 83            [24] 9970 	mov	dph,r3
      00378C 12r00r00         [24] 9971 	lcall	_putchar
      00378F 0D               [12] 9972 	inc	r5
                                   9973 ;	calc.c:466: printstr("&\tand top 2\r\n");
      003790 BD 00 E7         [24] 9974 	cjne	r5,#0x00,00227$
      003793 0E               [12] 9975 	inc	r6
      003794 80 E4            [24] 9976 	sjmp	00227$
      003796                       9977 00144$:
                                   9978 ;	calc.c:467: printstr("|\tor top 2\r\n");
      003796 7Dr31            [12] 9979 	mov	r5,#___str_45
      003798 7Es03            [12] 9980 	mov	r6,#(___str_45 >> 8)
      00379A 7F 80            [12] 9981 	mov	r7,#0x80
                                   9982 ;	calc.c:51: return;
      00379C                       9983 00230$:
                                   9984 ;	calc.c:49: for (; *s; s++) putchar(*s);
      00379C 8D 82            [24] 9985 	mov	dpl,r5
      00379E 8E 83            [24] 9986 	mov	dph,r6
      0037A0 8F F0            [24] 9987 	mov	b,r7
      0037A2 12r00r00         [24] 9988 	lcall	__gptrget
      0037A5 FC               [12] 9989 	mov	r4,a
      0037A6 60 10            [24] 9990 	jz	00146$
      0037A8 7B 00            [12] 9991 	mov	r3,#0x00
      0037AA 8C 82            [24] 9992 	mov	dpl,r4
      0037AC 8B 83            [24] 9993 	mov	dph,r3
      0037AE 12r00r00         [24] 9994 	lcall	_putchar
      0037B1 0D               [12] 9995 	inc	r5
                                   9996 ;	calc.c:467: printstr("|\tor top 2\r\n");
      0037B2 BD 00 E7         [24] 9997 	cjne	r5,#0x00,00230$
      0037B5 0E               [12] 9998 	inc	r6
      0037B6 80 E4            [24] 9999 	sjmp	00230$
      0037B8                      10000 00146$:
                                  10001 ;	calc.c:468: printstr("^\txor top 2\r\n");
      0037B8 7Dr3E            [12]10002 	mov	r5,#___str_46
      0037BA 7Es03            [12]10003 	mov	r6,#(___str_46 >> 8)
      0037BC 7F 80            [12]10004 	mov	r7,#0x80
                                  10005 ;	calc.c:51: return;
      0037BE                      10006 00233$:
                                  10007 ;	calc.c:49: for (; *s; s++) putchar(*s);
      0037BE 8D 82            [24]10008 	mov	dpl,r5
      0037C0 8E 83            [24]10009 	mov	dph,r6
      0037C2 8F F0            [24]10010 	mov	b,r7
      0037C4 12r00r00         [24]10011 	lcall	__gptrget
      0037C7 FC               [12]10012 	mov	r4,a
      0037C8 60 10            [24]10013 	jz	00148$
      0037CA 7B 00            [12]10014 	mov	r3,#0x00
      0037CC 8C 82            [24]10015 	mov	dpl,r4
      0037CE 8B 83            [24]10016 	mov	dph,r3
      0037D0 12r00r00         [24]10017 	lcall	_putchar
      0037D3 0D               [12]10018 	inc	r5
                                  10019 ;	calc.c:468: printstr("^\txor top 2\r\n");
      0037D4 BD 00 E7         [24]10020 	cjne	r5,#0x00,00233$
      0037D7 0E               [12]10021 	inc	r6
      0037D8 80 E4            [24]10022 	sjmp	00233$
      0037DA                      10023 00148$:
                                  10024 ;	calc.c:469: printstr(">\tshift right top 2\r\n");
      0037DA 7Dr4C            [12]10025 	mov	r5,#___str_47
      0037DC 7Es03            [12]10026 	mov	r6,#(___str_47 >> 8)
      0037DE 7F 80            [12]10027 	mov	r7,#0x80
                                  10028 ;	calc.c:51: return;
      0037E0                      10029 00236$:
                                  10030 ;	calc.c:49: for (; *s; s++) putchar(*s);
      0037E0 8D 82            [24]10031 	mov	dpl,r5
      0037E2 8E 83            [24]10032 	mov	dph,r6
      0037E4 8F F0            [24]10033 	mov	b,r7
      0037E6 12r00r00         [24]10034 	lcall	__gptrget
      0037E9 FC               [12]10035 	mov	r4,a
      0037EA 60 10            [24]10036 	jz	00150$
      0037EC 7B 00            [12]10037 	mov	r3,#0x00
      0037EE 8C 82            [24]10038 	mov	dpl,r4
      0037F0 8B 83            [24]10039 	mov	dph,r3
      0037F2 12r00r00         [24]10040 	lcall	_putchar
      0037F5 0D               [12]10041 	inc	r5
                                  10042 ;	calc.c:469: printstr(">\tshift right top 2\r\n");
      0037F6 BD 00 E7         [24]10043 	cjne	r5,#0x00,00236$
      0037F9 0E               [12]10044 	inc	r6
      0037FA 80 E4            [24]10045 	sjmp	00236$
      0037FC                      10046 00150$:
                                  10047 ;	calc.c:470: printstr("]\tarithmetic shift right top 2\r\n");
      0037FC 7Dr62            [12]10048 	mov	r5,#___str_48
      0037FE 7Es03            [12]10049 	mov	r6,#(___str_48 >> 8)
      003800 7F 80            [12]10050 	mov	r7,#0x80
                                  10051 ;	calc.c:51: return;
      003802                      10052 00239$:
                                  10053 ;	calc.c:49: for (; *s; s++) putchar(*s);
      003802 8D 82            [24]10054 	mov	dpl,r5
      003804 8E 83            [24]10055 	mov	dph,r6
      003806 8F F0            [24]10056 	mov	b,r7
      003808 12r00r00         [24]10057 	lcall	__gptrget
      00380B FC               [12]10058 	mov	r4,a
      00380C 60 10            [24]10059 	jz	00152$
      00380E 7B 00            [12]10060 	mov	r3,#0x00
      003810 8C 82            [24]10061 	mov	dpl,r4
      003812 8B 83            [24]10062 	mov	dph,r3
      003814 12r00r00         [24]10063 	lcall	_putchar
      003817 0D               [12]10064 	inc	r5
                                  10065 ;	calc.c:470: printstr("]\tarithmetic shift right top 2\r\n");
      003818 BD 00 E7         [24]10066 	cjne	r5,#0x00,00239$
      00381B 0E               [12]10067 	inc	r6
      00381C 80 E4            [24]10068 	sjmp	00239$
      00381E                      10069 00152$:
                                  10070 ;	calc.c:471: printstr("<\tshift left top 2\r\n");
      00381E 7Dr83            [12]10071 	mov	r5,#___str_49
      003820 7Es03            [12]10072 	mov	r6,#(___str_49 >> 8)
      003822 7F 80            [12]10073 	mov	r7,#0x80
                                  10074 ;	calc.c:51: return;
      003824                      10075 00242$:
                                  10076 ;	calc.c:49: for (; *s; s++) putchar(*s);
      003824 8D 82            [24]10077 	mov	dpl,r5
      003826 8E 83            [24]10078 	mov	dph,r6
      003828 8F F0            [24]10079 	mov	b,r7
      00382A 12r00r00         [24]10080 	lcall	__gptrget
      00382D FC               [12]10081 	mov	r4,a
      00382E 60 10            [24]10082 	jz	00154$
      003830 7B 00            [12]10083 	mov	r3,#0x00
      003832 8C 82            [24]10084 	mov	dpl,r4
      003834 8B 83            [24]10085 	mov	dph,r3
      003836 12r00r00         [24]10086 	lcall	_putchar
      003839 0D               [12]10087 	inc	r5
                                  10088 ;	calc.c:471: printstr("<\tshift left top 2\r\n");
      00383A BD 00 E7         [24]10089 	cjne	r5,#0x00,00242$
      00383D 0E               [12]10090 	inc	r6
      00383E 80 E4            [24]10091 	sjmp	00242$
      003840                      10092 00154$:
                                  10093 ;	calc.c:472: printstr("~\tbitwise not top\r\n");
      003840 7Dr98            [12]10094 	mov	r5,#___str_50
      003842 7Es03            [12]10095 	mov	r6,#(___str_50 >> 8)
      003844 7F 80            [12]10096 	mov	r7,#0x80
                                  10097 ;	calc.c:51: return;
      003846                      10098 00245$:
                                  10099 ;	calc.c:49: for (; *s; s++) putchar(*s);
      003846 8D 82            [24]10100 	mov	dpl,r5
      003848 8E 83            [24]10101 	mov	dph,r6
      00384A 8F F0            [24]10102 	mov	b,r7
      00384C 12r00r00         [24]10103 	lcall	__gptrget
      00384F FC               [12]10104 	mov	r4,a
      003850 60 10            [24]10105 	jz	00156$
      003852 7B 00            [12]10106 	mov	r3,#0x00
      003854 8C 82            [24]10107 	mov	dpl,r4
      003856 8B 83            [24]10108 	mov	dph,r3
      003858 12r00r00         [24]10109 	lcall	_putchar
      00385B 0D               [12]10110 	inc	r5
                                  10111 ;	calc.c:472: printstr("~\tbitwise not top\r\n");
      00385C BD 00 E7         [24]10112 	cjne	r5,#0x00,00245$
      00385F 0E               [12]10113 	inc	r6
      003860 80 E4            [24]10114 	sjmp	00245$
      003862                      10115 00156$:
                                  10116 ;	calc.c:473: printstr("s\tstatus\r\n");
      003862 7DrAC            [12]10117 	mov	r5,#___str_51
      003864 7Es03            [12]10118 	mov	r6,#(___str_51 >> 8)
      003866 7F 80            [12]10119 	mov	r7,#0x80
                                  10120 ;	calc.c:51: return;
      003868                      10121 00248$:
                                  10122 ;	calc.c:49: for (; *s; s++) putchar(*s);
      003868 8D 82            [24]10123 	mov	dpl,r5
      00386A 8E 83            [24]10124 	mov	dph,r6
      00386C 8F F0            [24]10125 	mov	b,r7
      00386E 12r00r00         [24]10126 	lcall	__gptrget
      003871 FC               [12]10127 	mov	r4,a
      003872 60 10            [24]10128 	jz	00158$
      003874 7B 00            [12]10129 	mov	r3,#0x00
      003876 8C 82            [24]10130 	mov	dpl,r4
      003878 8B 83            [24]10131 	mov	dph,r3
      00387A 12r00r00         [24]10132 	lcall	_putchar
      00387D 0D               [12]10133 	inc	r5
                                  10134 ;	calc.c:473: printstr("s\tstatus\r\n");
      00387E BD 00 E7         [24]10135 	cjne	r5,#0x00,00248$
      003881 0E               [12]10136 	inc	r6
      003882 80 E4            [24]10137 	sjmp	00248$
      003884                      10138 00158$:
                                  10139 ;	calc.c:474: printstr("?\thelp\r\n");
      003884 7DrB7            [12]10140 	mov	r5,#___str_52
      003886 7Es03            [12]10141 	mov	r6,#(___str_52 >> 8)
      003888 7F 80            [12]10142 	mov	r7,#0x80
                                  10143 ;	calc.c:51: return;
      00388A                      10144 00251$:
                                  10145 ;	calc.c:49: for (; *s; s++) putchar(*s);
      00388A 8D 82            [24]10146 	mov	dpl,r5
      00388C 8E 83            [24]10147 	mov	dph,r6
      00388E 8F F0            [24]10148 	mov	b,r7
      003890 12r00r00         [24]10149 	lcall	__gptrget
      003893 FC               [12]10150 	mov	r4,a
      003894 60 10            [24]10151 	jz	00160$
      003896 7B 00            [12]10152 	mov	r3,#0x00
      003898 8C 82            [24]10153 	mov	dpl,r4
      00389A 8B 83            [24]10154 	mov	dph,r3
      00389C 12r00r00         [24]10155 	lcall	_putchar
      00389F 0D               [12]10156 	inc	r5
                                  10157 ;	calc.c:474: printstr("?\thelp\r\n");
      0038A0 BD 00 E7         [24]10158 	cjne	r5,#0x00,00251$
      0038A3 0E               [12]10159 	inc	r6
      0038A4 80 E4            [24]10160 	sjmp	00251$
      0038A6                      10161 00160$:
                                  10162 ;	calc.c:475: printstr("q\tquit\r\n");
      0038A6 7DrC0            [12]10163 	mov	r5,#___str_53
      0038A8 7Es03            [12]10164 	mov	r6,#(___str_53 >> 8)
      0038AA 7F 80            [12]10165 	mov	r7,#0x80
                                  10166 ;	calc.c:51: return;
      0038AC                      10167 00254$:
                                  10168 ;	calc.c:49: for (; *s; s++) putchar(*s);
      0038AC 8D 82            [24]10169 	mov	dpl,r5
      0038AE 8E 83            [24]10170 	mov	dph,r6
      0038B0 8F F0            [24]10171 	mov	b,r7
      0038B2 12r00r00         [24]10172 	lcall	__gptrget
      0038B5 FC               [12]10173 	mov	r4,a
      0038B6 60 10            [24]10174 	jz	00162$
      0038B8 7B 00            [12]10175 	mov	r3,#0x00
      0038BA 8C 82            [24]10176 	mov	dpl,r4
      0038BC 8B 83            [24]10177 	mov	dph,r3
      0038BE 12r00r00         [24]10178 	lcall	_putchar
      0038C1 0D               [12]10179 	inc	r5
                                  10180 ;	calc.c:475: printstr("q\tquit\r\n");
      0038C2 BD 00 E7         [24]10181 	cjne	r5,#0x00,00254$
      0038C5 0E               [12]10182 	inc	r6
      0038C6 80 E4            [24]10183 	sjmp	00254$
      0038C8                      10184 00162$:
                                  10185 ;	calc.c:477: return 1;
      0038C8 90 00 01         [24]10186 	mov	dptr,#0x0001
                                  10187 ;	calc.c:478: }
      0038CB D0*00            [24]10188 	pop	_bp
      0038CD 22               [24]10189 	ret
                                  10190 ;------------------------------------------------------------
                                  10191 ;Allocation info for local variables in function 'main'
                                  10192 ;------------------------------------------------------------
                                  10193 ;input                     Allocated to registers r6 r7 
                                  10194 ;__1966080211              Allocated to registers 
                                  10195 ;s                         Allocated to registers r2 r3 r4 
                                  10196 ;__1310720213              Allocated to registers 
                                  10197 ;s                         Allocated to registers r5 r6 r7 
                                  10198 ;sloc0                     Allocated to stack - _bp +1
                                  10199 ;------------------------------------------------------------
                                  10200 ;	calc.c:508: void main(void) {
                                  10201 ;	-----------------------------------------
                                  10202 ;	 function main
                                  10203 ;	-----------------------------------------
      0038CE                      10204 _main:
      0038CE C0*00            [24]10205 	push	_bp
      0038D0 85 81*00         [24]10206 	mov	_bp,sp
      0038D3 05 81            [12]10207 	inc	sp
                                  10208 ;	calc.c:511: c.base = 10;
      0038D5 90r00r0C         [24]10209 	mov	dptr,#_c
      0038D8 74 0A            [12]10210 	mov	a,#0x0a
      0038DA F0               [24]10211 	movx	@dptr,a
      0038DB E4               [12]10212 	clr	a
      0038DC A3               [24]10213 	inc	dptr
      0038DD F0               [24]10214 	movx	@dptr,a
                                  10215 ;	calc.c:512: c.acc = 0l;
      0038DE 90r00r0E         [24]10216 	mov	dptr,#(_c + 0x0002)
      0038E1 F0               [24]10217 	movx	@dptr,a
      0038E2 A3               [24]10218 	inc	dptr
      0038E3 F0               [24]10219 	movx	@dptr,a
      0038E4 A3               [24]10220 	inc	dptr
      0038E5 F0               [24]10221 	movx	@dptr,a
      0038E6 A3               [24]10222 	inc	dptr
      0038E7 F0               [24]10223 	movx	@dptr,a
                                  10224 ;	calc.c:513: c.acc_valid = (char)0;
      0038E8 90r00r12         [24]10225 	mov	dptr,#(_c + 0x0006)
      0038EB F0               [24]10226 	movx	@dptr,a
                                  10227 ;	calc.c:514: c.digit[0] = c.digit[1] = '\0';
      0038EC 90r00r14         [24]10228 	mov	dptr,#(_c + 0x0008)
      0038EF F0               [24]10229 	movx	@dptr,a
      0038F0 90r00r13         [24]10230 	mov	dptr,#(_c + 0x0007)
      0038F3 F0               [24]10231 	movx	@dptr,a
                                  10232 ;	calc.c:516: c.ps = &c.s0;
      0038F4 90r40r1F         [24]10233 	mov	dptr,#(_c + 0x4013)
      0038F7 74r15            [12]10234 	mov	a,#(_c + 0x0009)
      0038F9 F0               [24]10235 	movx	@dptr,a
      0038FA 74s00            [12]10236 	mov	a,#((_c + 0x0009) >> 8)
      0038FC A3               [24]10237 	inc	dptr
      0038FD F0               [24]10238 	movx	@dptr,a
      0038FE E4               [12]10239 	clr	a
      0038FF A3               [24]10240 	inc	dptr
      003900 F0               [24]10241 	movx	@dptr,a
                                  10242 ;	calc.c:517: c.ss = &c.s1;
      003901 90r40r22         [24]10243 	mov	dptr,#(_c + 0x4016)
      003904 74r1A            [12]10244 	mov	a,#(_c + 0x200e)
      003906 F0               [24]10245 	movx	@dptr,a
      003907 74s20            [12]10246 	mov	a,#((_c + 0x200e) >> 8)
      003909 A3               [24]10247 	inc	dptr
      00390A F0               [24]10248 	movx	@dptr,a
      00390B E4               [12]10249 	clr	a
      00390C A3               [24]10250 	inc	dptr
      00390D F0               [24]10251 	movx	@dptr,a
                                  10252 ;	calc.c:518: stack_init(c.ps);
      00390E 90r00r15         [24]10253 	mov	dptr,#(_c + 0x0009)
      003911 75 F0 00         [24]10254 	mov	b,#0x00
      003914 12r00r00         [24]10255 	lcall	_stack_init
                                  10256 ;	calc.c:519: stack_init(c.ss);
      003917 90r40r22         [24]10257 	mov	dptr,#(_c + 0x4016)
      00391A E0               [24]10258 	movx	a,@dptr
      00391B FD               [12]10259 	mov	r5,a
      00391C A3               [24]10260 	inc	dptr
      00391D E0               [24]10261 	movx	a,@dptr
      00391E FE               [12]10262 	mov	r6,a
      00391F A3               [24]10263 	inc	dptr
      003920 E0               [24]10264 	movx	a,@dptr
      003921 FF               [12]10265 	mov	r7,a
      003922 8D 82            [24]10266 	mov	dpl,r5
      003924 8E 83            [24]10267 	mov	dph,r6
      003926 8F F0            [24]10268 	mov	b,r7
      003928 12r00r00         [24]10269 	lcall	_stack_init
                                  10270 ;	calc.c:521: state_init(&s, STATE_START, STATE_FINAL, UNDEF, deltas, &c);
      00392B 74r0C            [12]10271 	mov	a,#_c
      00392D C0 E0            [24]10272 	push	acc
      00392F 74s00            [12]10273 	mov	a,#(_c >> 8)
      003931 C0 E0            [24]10274 	push	acc
      003933 E4               [12]10275 	clr	a
      003934 C0 E0            [24]10276 	push	acc
      003936 74r00            [12]10277 	mov	a,#_deltas
      003938 C0 E0            [24]10278 	push	acc
      00393A 74s00            [12]10279 	mov	a,#(_deltas >> 8)
      00393C C0 E0            [24]10280 	push	acc
      00393E E4               [12]10281 	clr	a
      00393F C0 E0            [24]10282 	push	acc
      003941 C0 E0            [24]10283 	push	acc
      003943 74 80            [12]10284 	mov	a,#0x80
      003945 C0 E0            [24]10285 	push	acc
      003947 74 03            [12]10286 	mov	a,#0x03
      003949 C0 E0            [24]10287 	push	acc
      00394B E4               [12]10288 	clr	a
      00394C C0 E0            [24]10289 	push	acc
      00394E C0 E0            [24]10290 	push	acc
      003950 C0 E0            [24]10291 	push	acc
      003952 90r00r00         [24]10292 	mov	dptr,#_s
      003955 75 F0 00         [24]10293 	mov	b,#0x00
      003958 12r00r00         [24]10294 	lcall	_state_init
      00395B E5 81            [12]10295 	mov	a,sp
      00395D 24 F4            [12]10296 	add	a,#0xf4
      00395F F5 81            [12]10297 	mov	sp,a
                                  10298 ;	calc.c:523: (void)status(&c, deltas);
      003961 74r00            [12]10299 	mov	a,#_deltas
      003963 C0 E0            [24]10300 	push	acc
      003965 74s00            [12]10301 	mov	a,#(_deltas >> 8)
      003967 C0 E0            [24]10302 	push	acc
      003969 E4               [12]10303 	clr	a
      00396A C0 E0            [24]10304 	push	acc
      00396C 90r00r0C         [24]10305 	mov	dptr,#_c
      00396F 75 F0 00         [24]10306 	mov	b,#0x00
      003972 12r2Cr5A         [24]10307 	lcall	_status
      003975 15 81            [12]10308 	dec	sp
      003977 15 81            [12]10309 	dec	sp
      003979 15 81            [12]10310 	dec	sp
                                  10311 ;	calc.c:525: while (1) {
      00397B                      10312 00192$:
                                  10313 ;	calc.c:526: input = getchar();
      00397B 12r00r05         [24]10314 	lcall	_getchar
      00397E AE 82            [24]10315 	mov	r6,dpl
      003980 AF 83            [24]10316 	mov	r7,dph
                                  10317 ;	calc.c:527: if (((char)input == '\r') || ((char)input == '\n')) printstr("\r\n");
      003982 8E 05            [24]10318 	mov	ar5,r6
      003984 BD 0D 02         [24]10319 	cjne	r5,#0x0d,00400$
      003987 80 03            [24]10320 	sjmp	00101$
      003989                      10321 00400$:
      003989 BD 0A 36         [24]10322 	cjne	r5,#0x0a,00102$
      00398C                      10323 00101$:
      00398C 7Ar30            [12]10324 	mov	r2,#___str_5
      00398E 7Bs00            [12]10325 	mov	r3,#(___str_5 >> 8)
      003990 7C 80            [12]10326 	mov	r4,#0x80
                                  10327 ;	calc.c:51: return;
      003992                      10328 00199$:
                                  10329 ;	calc.c:49: for (; *s; s++) putchar(*s);
      003992 8A 82            [24]10330 	mov	dpl,r2
      003994 8B 83            [24]10331 	mov	dph,r3
      003996 8C F0            [24]10332 	mov	b,r4
      003998 A8*00            [24]10333 	mov	r0,_bp
      00399A 08               [12]10334 	inc	r0
      00399B 12r00r00         [24]10335 	lcall	__gptrget
      00399E F6               [12]10336 	mov	@r0,a
      00399F A8*00            [24]10337 	mov	r0,_bp
      0039A1 08               [12]10338 	inc	r0
      0039A2 E6               [12]10339 	mov	a,@r0
      0039A3 60 24            [24]10340 	jz	00103$
      0039A5 C0 06            [24]10341 	push	ar6
      0039A7 C0 07            [24]10342 	push	ar7
      0039A9 A8*00            [24]10343 	mov	r0,_bp
      0039AB 08               [12]10344 	inc	r0
      0039AC 86 06            [24]10345 	mov	ar6,@r0
      0039AE 7F 00            [12]10346 	mov	r7,#0x00
      0039B0 8E 82            [24]10347 	mov	dpl,r6
      0039B2 8F 83            [24]10348 	mov	dph,r7
      0039B4 12r00r00         [24]10349 	lcall	_putchar
      0039B7 0A               [12]10350 	inc	r2
      0039B8 BA 00 01         [24]10351 	cjne	r2,#0x00,00404$
      0039BB 0B               [12]10352 	inc	r3
      0039BC                      10353 00404$:
      0039BC D0 07            [24]10354 	pop	ar7
      0039BE D0 06            [24]10355 	pop	ar6
                                  10356 ;	calc.c:527: if (((char)input == '\r') || ((char)input == '\n')) printstr("\r\n");
      0039C0 80 D0            [24]10357 	sjmp	00199$
      0039C2                      10358 00102$:
                                  10359 ;	calc.c:528: else (void)putchar(input);
      0039C2 8E 82            [24]10360 	mov	dpl,r6
      0039C4 8F 83            [24]10361 	mov	dph,r7
      0039C6 12r00r00         [24]10362 	lcall	_putchar
      0039C9                      10363 00103$:
                                  10364 ;	calc.c:529: c.digit[0] = (char)input;
      0039C9 90r00r13         [24]10365 	mov	dptr,#(_c + 0x0007)
      0039CC ED               [12]10366 	mov	a,r5
      0039CD F0               [24]10367 	movx	@dptr,a
                                  10368 ;	calc.c:531: if ((char)input == 'q') {
      0039CE BD 71 29         [24]10369 	cjne	r5,#0x71,00189$
                                  10370 ;	calc.c:532: if (state_exec(&s, EVENT_TERM) <= 0) break;
      0039D1 74 08            [12]10371 	mov	a,#0x08
      0039D3 C0 E0            [24]10372 	push	acc
      0039D5 E4               [12]10373 	clr	a
      0039D6 C0 E0            [24]10374 	push	acc
      0039D8 90r00r00         [24]10375 	mov	dptr,#_s
      0039DB 75 F0 00         [24]10376 	mov	b,#0x00
      0039DE 12r00r00         [24]10377 	lcall	_state_exec
      0039E1 AB 82            [24]10378 	mov	r3,dpl
      0039E3 AC 83            [24]10379 	mov	r4,dph
      0039E5 15 81            [12]10380 	dec	sp
      0039E7 15 81            [12]10381 	dec	sp
      0039E9 C3               [12]10382 	clr	c
      0039EA E4               [12]10383 	clr	a
      0039EB 9B               [12]10384 	subb	a,r3
      0039EC 74 80            [12]10385 	mov	a,#(0x00 ^ 0x80)
      0039EE 8C F0            [24]10386 	mov	b,r4
      0039F0 63 F0 80         [24]10387 	xrl	b,#0x80
      0039F3 95 F0            [12]10388 	subb	a,b
      0039F5 40 84            [24]10389 	jc	00192$
      0039F7 02r3CrA9         [24]10390 	ljmp	00193$
      0039FA                      10391 00189$:
                                  10392 ;	calc.c:533: } else if ((char)input == 's') {
      0039FA BD 73 2C         [24]10393 	cjne	r5,#0x73,00186$
                                  10394 ;	calc.c:534: if (state_exec(&s, EVENT_STATUS) <= 0) break;
      0039FD 74 03            [12]10395 	mov	a,#0x03
      0039FF C0 E0            [24]10396 	push	acc
      003A01 E4               [12]10397 	clr	a
      003A02 C0 E0            [24]10398 	push	acc
      003A04 90r00r00         [24]10399 	mov	dptr,#_s
      003A07 75 F0 00         [24]10400 	mov	b,#0x00
      003A0A 12r00r00         [24]10401 	lcall	_state_exec
      003A0D AB 82            [24]10402 	mov	r3,dpl
      003A0F AC 83            [24]10403 	mov	r4,dph
      003A11 15 81            [12]10404 	dec	sp
      003A13 15 81            [12]10405 	dec	sp
      003A15 C3               [12]10406 	clr	c
      003A16 E4               [12]10407 	clr	a
      003A17 9B               [12]10408 	subb	a,r3
      003A18 74 80            [12]10409 	mov	a,#(0x00 ^ 0x80)
      003A1A 8C F0            [24]10410 	mov	b,r4
      003A1C 63 F0 80         [24]10411 	xrl	b,#0x80
      003A1F 95 F0            [12]10412 	subb	a,b
      003A21 50 03            [24]10413 	jnc	00410$
      003A23 02r39r7B         [24]10414 	ljmp	00192$
      003A26                      10415 00410$:
      003A26 02r3CrA9         [24]10416 	ljmp	00193$
      003A29                      10417 00186$:
                                  10418 ;	calc.c:535: } else if ((char)input == '?') {
      003A29 BD 3F 2C         [24]10419 	cjne	r5,#0x3f,00183$
                                  10420 ;	calc.c:536: if (state_exec(&s, EVENT_HELP) <= 0) break;
      003A2C 74 04            [12]10421 	mov	a,#0x04
      003A2E C0 E0            [24]10422 	push	acc
      003A30 E4               [12]10423 	clr	a
      003A31 C0 E0            [24]10424 	push	acc
      003A33 90r00r00         [24]10425 	mov	dptr,#_s
      003A36 75 F0 00         [24]10426 	mov	b,#0x00
      003A39 12r00r00         [24]10427 	lcall	_state_exec
      003A3C AB 82            [24]10428 	mov	r3,dpl
      003A3E AC 83            [24]10429 	mov	r4,dph
      003A40 15 81            [12]10430 	dec	sp
      003A42 15 81            [12]10431 	dec	sp
      003A44 C3               [12]10432 	clr	c
      003A45 E4               [12]10433 	clr	a
      003A46 9B               [12]10434 	subb	a,r3
      003A47 74 80            [12]10435 	mov	a,#(0x00 ^ 0x80)
      003A49 8C F0            [24]10436 	mov	b,r4
      003A4B 63 F0 80         [24]10437 	xrl	b,#0x80
      003A4E 95 F0            [12]10438 	subb	a,b
      003A50 50 03            [24]10439 	jnc	00413$
      003A52 02r39r7B         [24]10440 	ljmp	00192$
      003A55                      10441 00413$:
      003A55 02r3CrA9         [24]10442 	ljmp	00193$
      003A58                      10443 00183$:
                                  10444 ;	calc.c:537: } else if ((char)input == 'i') {
      003A58 BD 69 2C         [24]10445 	cjne	r5,#0x69,00180$
                                  10446 ;	calc.c:538: if (state_exec(&s, EVENT_RSTA_i) <= 0) break;
      003A5B 74 06            [12]10447 	mov	a,#0x06
      003A5D C0 E0            [24]10448 	push	acc
      003A5F E4               [12]10449 	clr	a
      003A60 C0 E0            [24]10450 	push	acc
      003A62 90r00r00         [24]10451 	mov	dptr,#_s
      003A65 75 F0 00         [24]10452 	mov	b,#0x00
      003A68 12r00r00         [24]10453 	lcall	_state_exec
      003A6B AB 82            [24]10454 	mov	r3,dpl
      003A6D AC 83            [24]10455 	mov	r4,dph
      003A6F 15 81            [12]10456 	dec	sp
      003A71 15 81            [12]10457 	dec	sp
      003A73 C3               [12]10458 	clr	c
      003A74 E4               [12]10459 	clr	a
      003A75 9B               [12]10460 	subb	a,r3
      003A76 74 80            [12]10461 	mov	a,#(0x00 ^ 0x80)
      003A78 8C F0            [24]10462 	mov	b,r4
      003A7A 63 F0 80         [24]10463 	xrl	b,#0x80
      003A7D 95 F0            [12]10464 	subb	a,b
      003A7F 50 03            [24]10465 	jnc	00416$
      003A81 02r39r7B         [24]10466 	ljmp	00192$
      003A84                      10467 00416$:
      003A84 02r3CrA9         [24]10468 	ljmp	00193$
      003A87                      10469 00180$:
                                  10470 ;	calc.c:539: } else if ((char)input == 'I') {
      003A87 BD 49 2C         [24]10471 	cjne	r5,#0x49,00177$
                                  10472 ;	calc.c:540: if (state_exec(&s, EVENT_RSTA_I) <= 0) break;
      003A8A 74 07            [12]10473 	mov	a,#0x07
      003A8C C0 E0            [24]10474 	push	acc
      003A8E E4               [12]10475 	clr	a
      003A8F C0 E0            [24]10476 	push	acc
      003A91 90r00r00         [24]10477 	mov	dptr,#_s
      003A94 75 F0 00         [24]10478 	mov	b,#0x00
      003A97 12r00r00         [24]10479 	lcall	_state_exec
      003A9A AB 82            [24]10480 	mov	r3,dpl
      003A9C AC 83            [24]10481 	mov	r4,dph
      003A9E 15 81            [12]10482 	dec	sp
      003AA0 15 81            [12]10483 	dec	sp
      003AA2 C3               [12]10484 	clr	c
      003AA3 E4               [12]10485 	clr	a
      003AA4 9B               [12]10486 	subb	a,r3
      003AA5 74 80            [12]10487 	mov	a,#(0x00 ^ 0x80)
      003AA7 8C F0            [24]10488 	mov	b,r4
      003AA9 63 F0 80         [24]10489 	xrl	b,#0x80
      003AAC 95 F0            [12]10490 	subb	a,b
      003AAE 50 03            [24]10491 	jnc	00419$
      003AB0 02r39r7B         [24]10492 	ljmp	00192$
      003AB3                      10493 00419$:
      003AB3 02r3CrA9         [24]10494 	ljmp	00193$
      003AB6                      10495 00177$:
                                  10496 ;	calc.c:542: ((char)input == 'h') || ((char)input == 'H') ||
      003AB6 BD 68 02         [24]10497 	cjne	r5,#0x68,00420$
      003AB9 80 0D            [24]10498 	sjmp	00170$
      003ABB                      10499 00420$:
      003ABB BD 48 02         [24]10500 	cjne	r5,#0x48,00421$
      003ABE 80 08            [24]10501 	sjmp	00170$
      003AC0                      10502 00421$:
                                  10503 ;	calc.c:543: ((char)input == 'o') || ((char)input == 'O')
      003AC0 BD 6F 02         [24]10504 	cjne	r5,#0x6f,00422$
      003AC3 80 03            [24]10505 	sjmp	00170$
      003AC5                      10506 00422$:
      003AC5 BD 4F 2C         [24]10507 	cjne	r5,#0x4f,00171$
      003AC8                      10508 00170$:
                                  10509 ;	calc.c:545: if (state_exec(&s, EVENT_BASE) <= 0) break;
      003AC8 74 05            [12]10510 	mov	a,#0x05
      003ACA C0 E0            [24]10511 	push	acc
      003ACC E4               [12]10512 	clr	a
      003ACD C0 E0            [24]10513 	push	acc
      003ACF 90r00r00         [24]10514 	mov	dptr,#_s
      003AD2 75 F0 00         [24]10515 	mov	b,#0x00
      003AD5 12r00r00         [24]10516 	lcall	_state_exec
      003AD8 AB 82            [24]10517 	mov	r3,dpl
      003ADA AC 83            [24]10518 	mov	r4,dph
      003ADC 15 81            [12]10519 	dec	sp
      003ADE 15 81            [12]10520 	dec	sp
      003AE0 C3               [12]10521 	clr	c
      003AE1 E4               [12]10522 	clr	a
      003AE2 9B               [12]10523 	subb	a,r3
      003AE3 74 80            [12]10524 	mov	a,#(0x00 ^ 0x80)
      003AE5 8C F0            [24]10525 	mov	b,r4
      003AE7 63 F0 80         [24]10526 	xrl	b,#0x80
      003AEA 95 F0            [12]10527 	subb	a,b
      003AEC 50 03            [24]10528 	jnc	00425$
      003AEE 02r39r7B         [24]10529 	ljmp	00192$
      003AF1                      10530 00425$:
      003AF1 02r3CrA9         [24]10531 	ljmp	00193$
      003AF4                      10532 00171$:
                                  10533 ;	calc.c:546: } else if (isxdigit(input)) {
      003AF4 8E 82            [24]10534 	mov	dpl,r6
      003AF6 8F 83            [24]10535 	mov	dph,r7
      003AF8 C0 05            [24]10536 	push	ar5
      003AFA 12r00r00         [24]10537 	lcall	_isxdigit
      003AFD E5 82            [12]10538 	mov	a,dpl
      003AFF 85 83 F0         [24]10539 	mov	b,dph
      003B02 D0 05            [24]10540 	pop	ar5
      003B04 45 F0            [12]10541 	orl	a,b
      003B06 60 2C            [24]10542 	jz	00168$
                                  10543 ;	calc.c:547: if (state_exec(&s, EVENT_DIGIT) <= 0) break;
      003B08 74 01            [12]10544 	mov	a,#0x01
      003B0A C0 E0            [24]10545 	push	acc
      003B0C E4               [12]10546 	clr	a
      003B0D C0 E0            [24]10547 	push	acc
      003B0F 90r00r00         [24]10548 	mov	dptr,#_s
      003B12 75 F0 00         [24]10549 	mov	b,#0x00
      003B15 12r00r00         [24]10550 	lcall	_state_exec
      003B18 AE 82            [24]10551 	mov	r6,dpl
      003B1A AF 83            [24]10552 	mov	r7,dph
      003B1C 15 81            [12]10553 	dec	sp
      003B1E 15 81            [12]10554 	dec	sp
      003B20 C3               [12]10555 	clr	c
      003B21 E4               [12]10556 	clr	a
      003B22 9E               [12]10557 	subb	a,r6
      003B23 74 80            [12]10558 	mov	a,#(0x00 ^ 0x80)
      003B25 8F F0            [24]10559 	mov	b,r7
      003B27 63 F0 80         [24]10560 	xrl	b,#0x80
      003B2A 95 F0            [12]10561 	subb	a,b
      003B2C 50 03            [24]10562 	jnc	00427$
      003B2E 02r39r7B         [24]10563 	ljmp	00192$
      003B31                      10564 00427$:
      003B31 02r3CrA9         [24]10565 	ljmp	00193$
      003B34                      10566 00168$:
                                  10567 ;	calc.c:549: ((char)input == 'p') || ((char)input == 'P') ||
      003B34 BD 70 02         [24]10568 	cjne	r5,#0x70,00428$
      003B37 80 17            [24]10569 	sjmp	00159$
      003B39                      10570 00428$:
      003B39 BD 50 02         [24]10571 	cjne	r5,#0x50,00429$
      003B3C 80 12            [24]10572 	sjmp	00159$
      003B3E                      10573 00429$:
                                  10574 ;	calc.c:550: ((char)input == 'v') || ((char)input == 'V') ||
      003B3E BD 76 02         [24]10575 	cjne	r5,#0x76,00430$
      003B41 80 0D            [24]10576 	sjmp	00159$
      003B43                      10577 00430$:
      003B43 BD 56 02         [24]10578 	cjne	r5,#0x56,00431$
      003B46 80 08            [24]10579 	sjmp	00159$
      003B48                      10580 00431$:
                                  10581 ;	calc.c:551: ((char)input == '.') ||
      003B48 BD 2E 02         [24]10582 	cjne	r5,#0x2e,00432$
      003B4B 80 03            [24]10583 	sjmp	00159$
      003B4D                      10584 00432$:
                                  10585 ;	calc.c:552: ((char)input == 'x')
      003B4D BD 78 2C         [24]10586 	cjne	r5,#0x78,00160$
      003B50                      10587 00159$:
                                  10588 ;	calc.c:554: if (state_exec(&s, EVENT_OP) <= 0) break;
      003B50 74 02            [12]10589 	mov	a,#0x02
      003B52 C0 E0            [24]10590 	push	acc
      003B54 E4               [12]10591 	clr	a
      003B55 C0 E0            [24]10592 	push	acc
      003B57 90r00r00         [24]10593 	mov	dptr,#_s
      003B5A 75 F0 00         [24]10594 	mov	b,#0x00
      003B5D 12r00r00         [24]10595 	lcall	_state_exec
      003B60 AE 82            [24]10596 	mov	r6,dpl
      003B62 AF 83            [24]10597 	mov	r7,dph
      003B64 15 81            [12]10598 	dec	sp
      003B66 15 81            [12]10599 	dec	sp
      003B68 C3               [12]10600 	clr	c
      003B69 E4               [12]10601 	clr	a
      003B6A 9E               [12]10602 	subb	a,r6
      003B6B 74 80            [12]10603 	mov	a,#(0x00 ^ 0x80)
      003B6D 8F F0            [24]10604 	mov	b,r7
      003B6F 63 F0 80         [24]10605 	xrl	b,#0x80
      003B72 95 F0            [12]10606 	subb	a,b
      003B74 50 03            [24]10607 	jnc	00435$
      003B76 02r39r7B         [24]10608 	ljmp	00192$
      003B79                      10609 00435$:
      003B79 02r3CrA9         [24]10610 	ljmp	00193$
      003B7C                      10611 00160$:
                                  10612 ;	calc.c:556: ((char)input == 'X') || ((char)input == 'T') ||
      003B7C BD 58 02         [24]10613 	cjne	r5,#0x58,00436$
      003B7F 80 17            [24]10614 	sjmp	00151$
      003B81                      10615 00436$:
      003B81 BD 54 02         [24]10616 	cjne	r5,#0x54,00437$
      003B84 80 12            [24]10617 	sjmp	00151$
      003B86                      10618 00437$:
                                  10619 ;	calc.c:557: ((char)input == 'm') || ((char)input == 'M') ||
      003B86 BD 6D 02         [24]10620 	cjne	r5,#0x6d,00438$
      003B89 80 0D            [24]10621 	sjmp	00151$
      003B8B                      10622 00438$:
      003B8B BD 4D 02         [24]10623 	cjne	r5,#0x4d,00439$
      003B8E 80 08            [24]10624 	sjmp	00151$
      003B90                      10625 00439$:
                                  10626 ;	calc.c:558: ((char)input == 'u') || ((char)input == 'U')
      003B90 BD 75 02         [24]10627 	cjne	r5,#0x75,00440$
      003B93 80 03            [24]10628 	sjmp	00151$
      003B95                      10629 00440$:
      003B95 BD 55 2C         [24]10630 	cjne	r5,#0x55,00152$
      003B98                      10631 00151$:
                                  10632 ;	calc.c:560: if (state_exec(&s, EVENT_OP) <= 0) break;
      003B98 74 02            [12]10633 	mov	a,#0x02
      003B9A C0 E0            [24]10634 	push	acc
      003B9C E4               [12]10635 	clr	a
      003B9D C0 E0            [24]10636 	push	acc
      003B9F 90r00r00         [24]10637 	mov	dptr,#_s
      003BA2 75 F0 00         [24]10638 	mov	b,#0x00
      003BA5 12r00r00         [24]10639 	lcall	_state_exec
      003BA8 AE 82            [24]10640 	mov	r6,dpl
      003BAA AF 83            [24]10641 	mov	r7,dph
      003BAC 15 81            [12]10642 	dec	sp
      003BAE 15 81            [12]10643 	dec	sp
      003BB0 C3               [12]10644 	clr	c
      003BB1 E4               [12]10645 	clr	a
      003BB2 9E               [12]10646 	subb	a,r6
      003BB3 74 80            [12]10647 	mov	a,#(0x00 ^ 0x80)
      003BB5 8F F0            [24]10648 	mov	b,r7
      003BB7 63 F0 80         [24]10649 	xrl	b,#0x80
      003BBA 95 F0            [12]10650 	subb	a,b
      003BBC 50 03            [24]10651 	jnc	00443$
      003BBE 02r39r7B         [24]10652 	ljmp	00192$
      003BC1                      10653 00443$:
      003BC1 02r3CrA9         [24]10654 	ljmp	00193$
      003BC4                      10655 00152$:
                                  10656 ;	calc.c:562: ((char)input == '+') || ((char)input == '-')
      003BC4 BD 2B 02         [24]10657 	cjne	r5,#0x2b,00444$
      003BC7 80 03            [24]10658 	sjmp	00147$
      003BC9                      10659 00444$:
      003BC9 BD 2D 2C         [24]10660 	cjne	r5,#0x2d,00148$
      003BCC                      10661 00147$:
                                  10662 ;	calc.c:564: if (state_exec(&s, EVENT_OP) <= 0) break;
      003BCC 74 02            [12]10663 	mov	a,#0x02
      003BCE C0 E0            [24]10664 	push	acc
      003BD0 E4               [12]10665 	clr	a
      003BD1 C0 E0            [24]10666 	push	acc
      003BD3 90r00r00         [24]10667 	mov	dptr,#_s
      003BD6 75 F0 00         [24]10668 	mov	b,#0x00
      003BD9 12r00r00         [24]10669 	lcall	_state_exec
      003BDC AE 82            [24]10670 	mov	r6,dpl
      003BDE AF 83            [24]10671 	mov	r7,dph
      003BE0 15 81            [12]10672 	dec	sp
      003BE2 15 81            [12]10673 	dec	sp
      003BE4 C3               [12]10674 	clr	c
      003BE5 E4               [12]10675 	clr	a
      003BE6 9E               [12]10676 	subb	a,r6
      003BE7 74 80            [12]10677 	mov	a,#(0x00 ^ 0x80)
      003BE9 8F F0            [24]10678 	mov	b,r7
      003BEB 63 F0 80         [24]10679 	xrl	b,#0x80
      003BEE 95 F0            [12]10680 	subb	a,b
      003BF0 50 03            [24]10681 	jnc	00447$
      003BF2 02r39r7B         [24]10682 	ljmp	00192$
      003BF5                      10683 00447$:
      003BF5 02r3CrA9         [24]10684 	ljmp	00193$
      003BF8                      10685 00148$:
                                  10686 ;	calc.c:566: ((char)input == '*') ||
      003BF8 BD 2A 02         [24]10687 	cjne	r5,#0x2a,00448$
      003BFB 80 12            [24]10688 	sjmp	00140$
      003BFD                      10689 00448$:
                                  10690 ;	calc.c:567: ((char)input == '/') || ((char)input == '\\') ||
      003BFD BD 2F 02         [24]10691 	cjne	r5,#0x2f,00449$
      003C00 80 0D            [24]10692 	sjmp	00140$
      003C02                      10693 00449$:
      003C02 BD 5C 02         [24]10694 	cjne	r5,#0x5c,00450$
      003C05 80 08            [24]10695 	sjmp	00140$
      003C07                      10696 00450$:
                                  10697 ;	calc.c:568: ((char)input == '%') || ((char)input == '#')
      003C07 BD 25 02         [24]10698 	cjne	r5,#0x25,00451$
      003C0A 80 03            [24]10699 	sjmp	00140$
      003C0C                      10700 00451$:
      003C0C BD 23 29         [24]10701 	cjne	r5,#0x23,00141$
      003C0F                      10702 00140$:
                                  10703 ;	calc.c:570: if (state_exec(&s, EVENT_OP) <= 0) break;
      003C0F 74 02            [12]10704 	mov	a,#0x02
      003C11 C0 E0            [24]10705 	push	acc
      003C13 E4               [12]10706 	clr	a
      003C14 C0 E0            [24]10707 	push	acc
      003C16 90r00r00         [24]10708 	mov	dptr,#_s
      003C19 75 F0 00         [24]10709 	mov	b,#0x00
      003C1C 12r00r00         [24]10710 	lcall	_state_exec
      003C1F AE 82            [24]10711 	mov	r6,dpl
      003C21 AF 83            [24]10712 	mov	r7,dph
      003C23 15 81            [12]10713 	dec	sp
      003C25 15 81            [12]10714 	dec	sp
      003C27 C3               [12]10715 	clr	c
      003C28 E4               [12]10716 	clr	a
      003C29 9E               [12]10717 	subb	a,r6
      003C2A 74 80            [12]10718 	mov	a,#(0x00 ^ 0x80)
      003C2C 8F F0            [24]10719 	mov	b,r7
      003C2E 63 F0 80         [24]10720 	xrl	b,#0x80
      003C31 95 F0            [12]10721 	subb	a,b
      003C33 50 74            [24]10722 	jnc	00193$
      003C35 02r39r7B         [24]10723 	ljmp	00192$
      003C38                      10724 00141$:
                                  10725 ;	calc.c:572: ((char)input == '&') ||
      003C38 BD 26 02         [24]10726 	cjne	r5,#0x26,00455$
      003C3B 80 1C            [24]10727 	sjmp	00131$
      003C3D                      10728 00455$:
                                  10729 ;	calc.c:573: ((char)input == '|') || ((char)input == '^') ||
      003C3D BD 7C 02         [24]10730 	cjne	r5,#0x7c,00456$
      003C40 80 17            [24]10731 	sjmp	00131$
      003C42                      10732 00456$:
      003C42 BD 5E 02         [24]10733 	cjne	r5,#0x5e,00457$
      003C45 80 12            [24]10734 	sjmp	00131$
      003C47                      10735 00457$:
                                  10736 ;	calc.c:574: ((char)input == '~') ||
      003C47 BD 7E 02         [24]10737 	cjne	r5,#0x7e,00458$
      003C4A 80 0D            [24]10738 	sjmp	00131$
      003C4C                      10739 00458$:
                                  10740 ;	calc.c:575: ((char)input == '>') || ((char)input == ']') ||
      003C4C BD 3E 02         [24]10741 	cjne	r5,#0x3e,00459$
      003C4F 80 08            [24]10742 	sjmp	00131$
      003C51                      10743 00459$:
      003C51 BD 5D 02         [24]10744 	cjne	r5,#0x5d,00460$
      003C54 80 03            [24]10745 	sjmp	00131$
      003C56                      10746 00460$:
                                  10747 ;	calc.c:576: ((char)input == '<')
      003C56 BD 3C 29         [24]10748 	cjne	r5,#0x3c,00132$
      003C59                      10749 00131$:
                                  10750 ;	calc.c:578: if (state_exec(&s, EVENT_OP) <= 0) break;
      003C59 74 02            [12]10751 	mov	a,#0x02
      003C5B C0 E0            [24]10752 	push	acc
      003C5D E4               [12]10753 	clr	a
      003C5E C0 E0            [24]10754 	push	acc
      003C60 90r00r00         [24]10755 	mov	dptr,#_s
      003C63 75 F0 00         [24]10756 	mov	b,#0x00
      003C66 12r00r00         [24]10757 	lcall	_state_exec
      003C69 AE 82            [24]10758 	mov	r6,dpl
      003C6B AF 83            [24]10759 	mov	r7,dph
      003C6D 15 81            [12]10760 	dec	sp
      003C6F 15 81            [12]10761 	dec	sp
      003C71 C3               [12]10762 	clr	c
      003C72 E4               [12]10763 	clr	a
      003C73 9E               [12]10764 	subb	a,r6
      003C74 74 80            [12]10765 	mov	a,#(0x00 ^ 0x80)
      003C76 8F F0            [24]10766 	mov	b,r7
      003C78 63 F0 80         [24]10767 	xrl	b,#0x80
      003C7B 95 F0            [12]10768 	subb	a,b
      003C7D 50 2A            [24]10769 	jnc	00193$
      003C7F 02r39r7B         [24]10770 	ljmp	00192$
      003C82                      10771 00132$:
                                  10772 ;	calc.c:580: if (state_exec(&s, EVENT_DELIM) <= 0) break;
      003C82 E4               [12]10773 	clr	a
      003C83 C0 E0            [24]10774 	push	acc
      003C85 C0 E0            [24]10775 	push	acc
      003C87 90r00r00         [24]10776 	mov	dptr,#_s
      003C8A 75 F0 00         [24]10777 	mov	b,#0x00
      003C8D 12r00r00         [24]10778 	lcall	_state_exec
      003C90 AE 82            [24]10779 	mov	r6,dpl
      003C92 AF 83            [24]10780 	mov	r7,dph
      003C94 15 81            [12]10781 	dec	sp
      003C96 15 81            [12]10782 	dec	sp
      003C98 C3               [12]10783 	clr	c
      003C99 E4               [12]10784 	clr	a
      003C9A 9E               [12]10785 	subb	a,r6
      003C9B 74 80            [12]10786 	mov	a,#(0x00 ^ 0x80)
      003C9D 8F F0            [24]10787 	mov	b,r7
      003C9F 63 F0 80         [24]10788 	xrl	b,#0x80
      003CA2 95 F0            [12]10789 	subb	a,b
      003CA4 50 03            [24]10790 	jnc	00464$
      003CA6 02r39r7B         [24]10791 	ljmp	00192$
      003CA9                      10792 00464$:
      003CA9                      10793 00193$:
                                  10794 ;	calc.c:584: printstr("TERM\r\n");
      003CA9 7DrC9            [12]10795 	mov	r5,#___str_54
      003CAB 7Es03            [12]10796 	mov	r6,#(___str_54 >> 8)
      003CAD 7F 80            [12]10797 	mov	r7,#0x80
                                  10798 ;	calc.c:51: return;
      003CAF                      10799 00202$:
                                  10800 ;	calc.c:49: for (; *s; s++) putchar(*s);
      003CAF 8D 82            [24]10801 	mov	dpl,r5
      003CB1 8E 83            [24]10802 	mov	dph,r6
      003CB3 8F F0            [24]10803 	mov	b,r7
      003CB5 12r00r00         [24]10804 	lcall	__gptrget
      003CB8 FC               [12]10805 	mov	r4,a
      003CB9 60 10            [24]10806 	jz	00197$
      003CBB 7B 00            [12]10807 	mov	r3,#0x00
      003CBD 8C 82            [24]10808 	mov	dpl,r4
      003CBF 8B 83            [24]10809 	mov	dph,r3
      003CC1 12r00r00         [24]10810 	lcall	_putchar
      003CC4 0D               [12]10811 	inc	r5
                                  10812 ;	calc.c:584: printstr("TERM\r\n");
      003CC5 BD 00 E7         [24]10813 	cjne	r5,#0x00,00202$
      003CC8 0E               [12]10814 	inc	r6
      003CC9 80 E4            [24]10815 	sjmp	00202$
      003CCB                      10816 00197$:
                                  10817 ;	calc.c:586: PCON |= 2;
      003CCB 43 87 02         [24]10818 	orl	_PCON,#0x02
                                  10819 ;	calc.c:588: return;
                                  10820 ;	calc.c:589: }
      003CCE 15 81            [12]10821 	dec	sp
      003CD0 D0*00            [24]10822 	pop	_bp
      003CD2 22               [24]10823 	ret
                                  10824 	.area CSEG    (CODE)
                                  10825 	.area CONST   (CODE)
                                  10826 	.area CONST   (CODE)
      000000                      10827 ___str_0:
      000000 0D                   10828 	.db 0x0d
      000001 0A                   10829 	.db 0x0a
      000002 50 53                10830 	.ascii "PS"
      000004 0D                   10831 	.db 0x0d
      000005 0A                   10832 	.db 0x0a
      000006 00                   10833 	.db 0x00
                                  10834 	.area CSEG    (CODE)
                                  10835 	.area CONST   (CODE)
      000007                      10836 ___str_1:
      000007 73 74 61 63 6B 20 75 10837 	.ascii "stack underflow"
             6E 64 65 72 66 6C 6F
             77
      000016 0D                   10838 	.db 0x0d
      000017 0A                   10839 	.db 0x0a
      000018 00                   10840 	.db 0x00
                                  10841 	.area CSEG    (CODE)
                                  10842 	.area CONST   (CODE)
      000019                      10843 ___str_2:
      000019 56 41 20             10844 	.ascii "VA "
      00001C 00                   10845 	.db 0x00
                                  10846 	.area CSEG    (CODE)
                                  10847 	.area CONST   (CODE)
      00001D                      10848 ___str_3:
      00001D 25 20 31 31 6C 64 20 10849 	.ascii "% 11ld / "
             2F 20
      000026 00                   10850 	.db 0x00
                                  10851 	.area CSEG    (CODE)
                                  10852 	.area CONST   (CODE)
      000027                      10853 ___str_4:
      000027 25 30 38 6C 78 20 2F 10854 	.ascii "%08lx / "
             20
      00002F 00                   10855 	.db 0x00
                                  10856 	.area CSEG    (CODE)
                                  10857 	.area CONST   (CODE)
      000030                      10858 ___str_5:
      000030 0D                   10859 	.db 0x0d
      000031 0A                   10860 	.db 0x0a
      000032 00                   10861 	.db 0x00
                                  10862 	.area CSEG    (CODE)
                                  10863 	.area CONST   (CODE)
      000033                      10864 ___str_6:
      000033 53 53                10865 	.ascii "SS"
      000035 0D                   10866 	.db 0x0d
      000036 0A                   10867 	.db 0x0a
      000037 00                   10868 	.db 0x00
                                  10869 	.area CSEG    (CODE)
                                  10870 	.area CONST   (CODE)
      000038                      10871 ___str_7:
      000038 50 41 20             10872 	.ascii "PA "
      00003B 00                   10873 	.db 0x00
                                  10874 	.area CSEG    (CODE)
                                  10875 	.area CONST   (CODE)
      00003C                      10876 ___str_8:
      00003C 50 54 20             10877 	.ascii "PT "
      00003F 00                   10878 	.db 0x00
                                  10879 	.area CSEG    (CODE)
                                  10880 	.area CONST   (CODE)
      000040                      10881 ___str_9:
      000040 56 54 20             10882 	.ascii "VT "
      000043 00                   10883 	.db 0x00
                                  10884 	.area CSEG    (CODE)
                                  10885 	.area CONST   (CODE)
      000044                      10886 ___str_10:
      000044 0D                   10887 	.db 0x0d
      000045 0A                   10888 	.db 0x0a
      000046 73 74 61 63 6B 20 75 10889 	.ascii "stack underflow"
             6E 64 65 72 66 6C 6F
             77
      000055 0D                   10890 	.db 0x0d
      000056 0A                   10891 	.db 0x0a
      000057 00                   10892 	.db 0x00
                                  10893 	.area CSEG    (CODE)
                                  10894 	.area CONST   (CODE)
      000058                      10895 ___str_11:
      000058 0D                   10896 	.db 0x0d
      000059 0A                   10897 	.db 0x0a
      00005A 73 65 63 6F 6E 64 61 10898 	.ascii "secondary stack overflow"
             72 79 20 73 74 61 63
             6B 20 6F 76 65 72 66
             6C 6F 77
      000072 0D                   10899 	.db 0x0d
      000073 0A                   10900 	.db 0x0a
      000074 00                   10901 	.db 0x00
                                  10902 	.area CSEG    (CODE)
                                  10903 	.area CONST   (CODE)
      000075                      10904 ___str_12:
      000075 0D                   10905 	.db 0x0d
      000076 0A                   10906 	.db 0x0a
      000077 73 65 63 6F 6E 64 61 10907 	.ascii "secondary stack underflow"
             72 79 20 73 74 61 63
             6B 20 75 6E 64 65 72
             66 6C 6F 77
      000090 0D                   10908 	.db 0x0d
      000091 0A                   10909 	.db 0x0a
      000092 00                   10910 	.db 0x00
                                  10911 	.area CSEG    (CODE)
                                  10912 	.area CONST   (CODE)
      000093                      10913 ___str_13:
      000093 0D                   10914 	.db 0x0d
      000094 0A                   10915 	.db 0x0a
      000095 73 74 61 63 6B 20 6F 10916 	.ascii "stack overflow"
             76 65 72 66 6C 6F 77
      0000A3 0D                   10917 	.db 0x0d
      0000A4 0A                   10918 	.db 0x0a
      0000A5 00                   10919 	.db 0x00
                                  10920 	.area CSEG    (CODE)
                                  10921 	.area CONST   (CODE)
      0000A6                      10922 ___str_14:
      0000A6 0D                   10923 	.db 0x0d
      0000A7 0A                   10924 	.db 0x0a
      0000A8 64 69 76 69 73 69 6F 10925 	.ascii "division by zero"
             6E 20 62 79 20 7A 65
             72 6F
      0000B8 0D                   10926 	.db 0x0d
      0000B9 0A                   10927 	.db 0x0a
      0000BA 00                   10928 	.db 0x00
                                  10929 	.area CSEG    (CODE)
                                  10930 	.area CONST   (CODE)
      0000BB                      10931 ___str_15:
      0000BB 0D                   10932 	.db 0x0d
      0000BC 0A                   10933 	.db 0x0a
      0000BD 62 61 73 65 20 3D 20 10934 	.ascii "base = %d, "
             25 64 2C 20
      0000C8 00                   10935 	.db 0x00
                                  10936 	.area CSEG    (CODE)
                                  10937 	.area CONST   (CODE)
      0000C9                      10938 ___str_16:
      0000C9 61 63 63 20 3D 20 25 10939 	.ascii "acc = %ld / "
             6C 64 20 2F 20
      0000D5 00                   10940 	.db 0x00
                                  10941 	.area CSEG    (CODE)
                                  10942 	.area CONST   (CODE)
      0000D6                      10943 ___str_17:
      0000D6 2C 20 61 63 63 5F 76 10944 	.ascii ", acc_valid = %d"
             61 6C 69 64 20 3D 20
             25 64
      0000E6 0D                   10945 	.db 0x0d
      0000E7 0A                   10946 	.db 0x0a
      0000E8 00                   10947 	.db 0x00
                                  10948 	.area CSEG    (CODE)
                                  10949 	.area CONST   (CODE)
      0000E9                      10950 ___str_18:
      0000E9 70 72 69 6D 61 72 79 10951 	.ascii "primary = %p, secondary = %p"
             20 3D 20 25 70 2C 20
             73 65 63 6F 6E 64 61
             72 79 20 3D 20 25 70
      000105 0D                   10952 	.db 0x0d
      000106 0A                   10953 	.db 0x0a
      000107 00                   10954 	.db 0x00
                                  10955 	.area CSEG    (CODE)
                                  10956 	.area CONST   (CODE)
      000108                      10957 ___str_19:
      000108 50 53 54 4F 50 31 20 10958 	.ascii "PSTOP1 = "
             3D 20
      000111 00                   10959 	.db 0x00
                                  10960 	.area CSEG    (CODE)
                                  10961 	.area CONST   (CODE)
      000112                      10962 ___str_20:
      000112 0D                   10963 	.db 0x0d
      000113 0A                   10964 	.db 0x0a
      000114 50 53 54 4F 50 30 20 10965 	.ascii "PSTOP0 = "
             3D 20
      00011D 00                   10966 	.db 0x00
                                  10967 	.area CSEG    (CODE)
                                  10968 	.area CONST   (CODE)
      00011E                      10969 ___str_21:
      00011E 53 53 54 4F 50 31 20 10970 	.ascii "SSTOP1 = "
             3D 20
      000127 00                   10971 	.db 0x00
                                  10972 	.area CSEG    (CODE)
                                  10973 	.area CONST   (CODE)
      000128                      10974 ___str_22:
      000128 0D                   10975 	.db 0x0d
      000129 0A                   10976 	.db 0x0a
      00012A 53 53 54 4F 50 30 20 10977 	.ascii "SSTOP0 = "
             3D 20
      000133 00                   10978 	.db 0x00
                                  10979 	.area CSEG    (CODE)
                                  10980 	.area CONST   (CODE)
      000134                      10981 ___str_23:
      000134 0D                   10982 	.db 0x0d
      000135 0A                   10983 	.db 0x0a
      000136 48 68 4F 6F          10984 	.ascii "HhOo"
      00013A 09                   10985 	.db 0x09
      00013B 62 61 73 65 20 31 36 10986 	.ascii "base 16 10 8 2"
             20 31 30 20 38 20 32
      000149 0D                   10987 	.db 0x0d
      00014A 0A                   10988 	.db 0x0a
      00014B 00                   10989 	.db 0x00
                                  10990 	.area CSEG    (CODE)
                                  10991 	.area CONST   (CODE)
      00014C                      10992 ___str_24:
      00014C 70                   10993 	.ascii "p"
      00014D 09                   10994 	.db 0x09
      00014E 70 65 65 6B 20 74 6F 10995 	.ascii "peek top"
             70
      000156 0D                   10996 	.db 0x0d
      000157 0A                   10997 	.db 0x0a
      000158 00                   10998 	.db 0x00
                                  10999 	.area CSEG    (CODE)
                                  11000 	.area CONST   (CODE)
      000159                      11001 ___str_25:
      000159 50                   11002 	.ascii "P"
      00015A 09                   11003 	.db 0x09
      00015B 70 72 69 6E 74 20 73 11004 	.ascii "print stack"
             74 61 63 6B
      000166 0D                   11005 	.db 0x0d
      000167 0A                   11006 	.db 0x0a
      000168 00                   11007 	.db 0x00
                                  11008 	.area CSEG    (CODE)
                                  11009 	.area CONST   (CODE)
      000169                      11010 ___str_26:
      000169 76 2E                11011 	.ascii "v."
      00016B 09                   11012 	.db 0x09
      00016C 70 6F 70 20 74 6F 70 11013 	.ascii "pop top"
      000173 0D                   11014 	.db 0x0d
      000174 0A                   11015 	.db 0x0a
      000175 00                   11016 	.db 0x00
                                  11017 	.area CSEG    (CODE)
                                  11018 	.area CONST   (CODE)
      000176                      11019 ___str_27:
      000176 56                   11020 	.ascii "V"
      000177 09                   11021 	.db 0x09
      000178 70 6F 70 20 61 6C 6C 11022 	.ascii "pop all"
      00017F 0D                   11023 	.db 0x0d
      000180 0A                   11024 	.db 0x0a
      000181 00                   11025 	.db 0x00
                                  11026 	.area CSEG    (CODE)
                                  11027 	.area CONST   (CODE)
      000182                      11028 ___str_28:
      000182 69                   11029 	.ascii "i"
      000183 09                   11030 	.db 0x09
      000184 72 65 73 65 74 20 61 11031 	.ascii "reset acc"
             63 63
      00018D 0D                   11032 	.db 0x0d
      00018E 0A                   11033 	.db 0x0a
      00018F 00                   11034 	.db 0x00
                                  11035 	.area CSEG    (CODE)
                                  11036 	.area CONST   (CODE)
      000190                      11037 ___str_29:
      000190 49                   11038 	.ascii "I"
      000191 09                   11039 	.db 0x09
      000192 72 65 73 65 74 20 61 11040 	.ascii "reset and discard acc"
             6E 64 20 64 69 73 63
             61 72 64 20 61 63 63
      0001A7 0D                   11041 	.db 0x0d
      0001A8 0A                   11042 	.db 0x0a
      0001A9 00                   11043 	.db 0x00
                                  11044 	.area CSEG    (CODE)
                                  11045 	.area CONST   (CODE)
      0001AA                      11046 ___str_30:
      0001AA 78                   11047 	.ascii "x"
      0001AB 09                   11048 	.db 0x09
      0001AC 65 78 63 68 61 6E 67 11049 	.ascii "exchange top 2"
             65 20 74 6F 70 20 32
      0001BA 0D                   11050 	.db 0x0d
      0001BB 0A                   11051 	.db 0x0a
      0001BC 00                   11052 	.db 0x00
                                  11053 	.area CSEG    (CODE)
                                  11054 	.area CONST   (CODE)
      0001BD                      11055 ___str_31:
      0001BD 58                   11056 	.ascii "X"
      0001BE 09                   11057 	.db 0x09
      0001BF 65 78 63 68 61 6E 67 11058 	.ascii "exchange stacks primary <-> secondary"
             65 20 73 74 61 63 6B
             73 20 70 72 69 6D 61
             72 79 20 3C 2D 3E 20
             73 65 63 6F 6E 64 61
             72 79
      0001E4 0D                   11059 	.db 0x0d
      0001E5 0A                   11060 	.db 0x0a
      0001E6 00                   11061 	.db 0x00
                                  11062 	.area CSEG    (CODE)
                                  11063 	.area CONST   (CODE)
      0001E7                      11064 ___str_32:
      0001E7 54                   11065 	.ascii "T"
      0001E8 09                   11066 	.db 0x09
      0001E9 65 78 63 68 61 6E 67 11067 	.ascii "exchange tops primary <-> secondary"
             65 20 74 6F 70 73 20
             70 72 69 6D 61 72 79
             20 3C 2D 3E 20 73 65
             63 6F 6E 64 61 72 79
      00020C 0D                   11068 	.db 0x0d
      00020D 0A                   11069 	.db 0x0a
      00020E 00                   11070 	.db 0x00
                                  11071 	.area CSEG    (CODE)
                                  11072 	.area CONST   (CODE)
      00020F                      11073 ___str_33:
      00020F 55                   11074 	.ascii "U"
      000210 09                   11075 	.db 0x09
      000211 63 6F 70 79 20 74 6F 11076 	.ascii "copy top secondary -> primary"
             70 20 73 65 63 6F 6E
             64 61 72 79 20 2D 3E
             20 70 72 69 6D 61 72
             79
      00022E 0D                   11077 	.db 0x0d
      00022F 0A                   11078 	.db 0x0a
      000230 00                   11079 	.db 0x00
                                  11080 	.area CSEG    (CODE)
                                  11081 	.area CONST   (CODE)
      000231                      11082 ___str_34:
      000231 75                   11083 	.ascii "u"
      000232 09                   11084 	.db 0x09
      000233 63 6F 70 79 20 74 6F 11085 	.ascii "copy top primary -> secondary"
             70 20 70 72 69 6D 61
             72 79 20 2D 3E 20 73
             65 63 6F 6E 64 61 72
             79
      000250 0D                   11086 	.db 0x0d
      000251 0A                   11087 	.db 0x0a
      000252 00                   11088 	.db 0x00
                                  11089 	.area CSEG    (CODE)
                                  11090 	.area CONST   (CODE)
      000253                      11091 ___str_35:
      000253 4D                   11092 	.ascii "M"
      000254 09                   11093 	.db 0x09
      000255 6D 6F 76 65 20 74 6F 11094 	.ascii "move top secondary -> primary"
             70 20 73 65 63 6F 6E
             64 61 72 79 20 2D 3E
             20 70 72 69 6D 61 72
             79
      000272 0D                   11095 	.db 0x0d
      000273 0A                   11096 	.db 0x0a
      000274 00                   11097 	.db 0x00
                                  11098 	.area CSEG    (CODE)
                                  11099 	.area CONST   (CODE)
      000275                      11100 ___str_36:
      000275 6D                   11101 	.ascii "m"
      000276 09                   11102 	.db 0x09
      000277 6D 6F 76 65 20 74 6F 11103 	.ascii "move top primary -> secondary"
             70 20 70 72 69 6D 61
             72 79 20 2D 3E 20 73
             65 63 6F 6E 64 61 72
             79
      000294 0D                   11104 	.db 0x0d
      000295 0A                   11105 	.db 0x0a
      000296 00                   11106 	.db 0x00
                                  11107 	.area CSEG    (CODE)
                                  11108 	.area CONST   (CODE)
      000297                      11109 ___str_37:
      000297 2B                   11110 	.ascii "+"
      000298 09                   11111 	.db 0x09
      000299 61 64 64 20 74 6F 70 11112 	.ascii "add top 2"
             20 32
      0002A2 0D                   11113 	.db 0x0d
      0002A3 0A                   11114 	.db 0x0a
      0002A4 00                   11115 	.db 0x00
                                  11116 	.area CSEG    (CODE)
                                  11117 	.area CONST   (CODE)
      0002A5                      11118 ___str_38:
      0002A5 2D                   11119 	.ascii "-"
      0002A6 09                   11120 	.db 0x09
      0002A7 73 75 62 74 72 61 63 11121 	.ascii "subtract top 2"
             74 20 74 6F 70 20 32
      0002B5 0D                   11122 	.db 0x0d
      0002B6 0A                   11123 	.db 0x0a
      0002B7 00                   11124 	.db 0x00
                                  11125 	.area CSEG    (CODE)
                                  11126 	.area CONST   (CODE)
      0002B8                      11127 ___str_39:
      0002B8 2A                   11128 	.ascii "*"
      0002B9 09                   11129 	.db 0x09
      0002BA 6D 75 6C 74 69 70 6C 11130 	.ascii "multiply top 2"
             79 20 74 6F 70 20 32
      0002C8 0D                   11131 	.db 0x0d
      0002C9 0A                   11132 	.db 0x0a
      0002CA 00                   11133 	.db 0x00
                                  11134 	.area CSEG    (CODE)
                                  11135 	.area CONST   (CODE)
      0002CB                      11136 ___str_40:
      0002CB 2F                   11137 	.ascii "/"
      0002CC 09                   11138 	.db 0x09
      0002CD 64 69 76 69 64 65 20 11139 	.ascii "divide top 2"
             74 6F 70 20 32
      0002D9 0D                   11140 	.db 0x0d
      0002DA 0A                   11141 	.db 0x0a
      0002DB 00                   11142 	.db 0x00
                                  11143 	.area CSEG    (CODE)
                                  11144 	.area CONST   (CODE)
      0002DC                      11145 ___str_41:
      0002DC 5C                   11146 	.db 0x5c
      0002DD 09                   11147 	.db 0x09
      0002DE 64 69 76 69 64 65 20 11148 	.ascii "divide top 2 unsigned"
             74 6F 70 20 32 20 75
             6E 73 69 67 6E 65 64
      0002F3 0D                   11149 	.db 0x0d
      0002F4 0A                   11150 	.db 0x0a
      0002F5 00                   11151 	.db 0x00
                                  11152 	.area CSEG    (CODE)
                                  11153 	.area CONST   (CODE)
      0002F6                      11154 ___str_42:
      0002F6 25                   11155 	.ascii "%"
      0002F7 09                   11156 	.db 0x09
      0002F8 6D 6F 64 75 6C 75 73 11157 	.ascii "modulus top 2"
             20 74 6F 70 20 32
      000305 0D                   11158 	.db 0x0d
      000306 0A                   11159 	.db 0x0a
      000307 00                   11160 	.db 0x00
                                  11161 	.area CSEG    (CODE)
                                  11162 	.area CONST   (CODE)
      000308                      11163 ___str_43:
      000308 23                   11164 	.ascii "#"
      000309 09                   11165 	.db 0x09
      00030A 6D 6F 64 75 6C 75 73 11166 	.ascii "modulus top 2 unsigned"
             20 74 6F 70 20 32 20
             75 6E 73 69 67 6E 65
             64
      000320 0D                   11167 	.db 0x0d
      000321 0A                   11168 	.db 0x0a
      000322 00                   11169 	.db 0x00
                                  11170 	.area CSEG    (CODE)
                                  11171 	.area CONST   (CODE)
      000323                      11172 ___str_44:
      000323 26                   11173 	.ascii "&"
      000324 09                   11174 	.db 0x09
      000325 61 6E 64 20 74 6F 70 11175 	.ascii "and top 2"
             20 32
      00032E 0D                   11176 	.db 0x0d
      00032F 0A                   11177 	.db 0x0a
      000330 00                   11178 	.db 0x00
                                  11179 	.area CSEG    (CODE)
                                  11180 	.area CONST   (CODE)
      000331                      11181 ___str_45:
      000331 7C                   11182 	.ascii "|"
      000332 09                   11183 	.db 0x09
      000333 6F 72 20 74 6F 70 20 11184 	.ascii "or top 2"
             32
      00033B 0D                   11185 	.db 0x0d
      00033C 0A                   11186 	.db 0x0a
      00033D 00                   11187 	.db 0x00
                                  11188 	.area CSEG    (CODE)
                                  11189 	.area CONST   (CODE)
      00033E                      11190 ___str_46:
      00033E 5E                   11191 	.ascii "^"
      00033F 09                   11192 	.db 0x09
      000340 78 6F 72 20 74 6F 70 11193 	.ascii "xor top 2"
             20 32
      000349 0D                   11194 	.db 0x0d
      00034A 0A                   11195 	.db 0x0a
      00034B 00                   11196 	.db 0x00
                                  11197 	.area CSEG    (CODE)
                                  11198 	.area CONST   (CODE)
      00034C                      11199 ___str_47:
      00034C 3E                   11200 	.ascii ">"
      00034D 09                   11201 	.db 0x09
      00034E 73 68 69 66 74 20 72 11202 	.ascii "shift right top 2"
             69 67 68 74 20 74 6F
             70 20 32
      00035F 0D                   11203 	.db 0x0d
      000360 0A                   11204 	.db 0x0a
      000361 00                   11205 	.db 0x00
                                  11206 	.area CSEG    (CODE)
                                  11207 	.area CONST   (CODE)
      000362                      11208 ___str_48:
      000362 5D                   11209 	.ascii "]"
      000363 09                   11210 	.db 0x09
      000364 61 72 69 74 68 6D 65 11211 	.ascii "arithmetic shift right top 2"
             74 69 63 20 73 68 69
             66 74 20 72 69 67 68
             74 20 74 6F 70 20 32
      000380 0D                   11212 	.db 0x0d
      000381 0A                   11213 	.db 0x0a
      000382 00                   11214 	.db 0x00
                                  11215 	.area CSEG    (CODE)
                                  11216 	.area CONST   (CODE)
      000383                      11217 ___str_49:
      000383 3C                   11218 	.ascii "<"
      000384 09                   11219 	.db 0x09
      000385 73 68 69 66 74 20 6C 11220 	.ascii "shift left top 2"
             65 66 74 20 74 6F 70
             20 32
      000395 0D                   11221 	.db 0x0d
      000396 0A                   11222 	.db 0x0a
      000397 00                   11223 	.db 0x00
                                  11224 	.area CSEG    (CODE)
                                  11225 	.area CONST   (CODE)
      000398                      11226 ___str_50:
      000398 7E                   11227 	.ascii "~"
      000399 09                   11228 	.db 0x09
      00039A 62 69 74 77 69 73 65 11229 	.ascii "bitwise not top"
             20 6E 6F 74 20 74 6F
             70
      0003A9 0D                   11230 	.db 0x0d
      0003AA 0A                   11231 	.db 0x0a
      0003AB 00                   11232 	.db 0x00
                                  11233 	.area CSEG    (CODE)
                                  11234 	.area CONST   (CODE)
      0003AC                      11235 ___str_51:
      0003AC 73                   11236 	.ascii "s"
      0003AD 09                   11237 	.db 0x09
      0003AE 73 74 61 74 75 73    11238 	.ascii "status"
      0003B4 0D                   11239 	.db 0x0d
      0003B5 0A                   11240 	.db 0x0a
      0003B6 00                   11241 	.db 0x00
                                  11242 	.area CSEG    (CODE)
                                  11243 	.area CONST   (CODE)
      0003B7                      11244 ___str_52:
      0003B7 3F                   11245 	.ascii "?"
      0003B8 09                   11246 	.db 0x09
      0003B9 68 65 6C 70          11247 	.ascii "help"
      0003BD 0D                   11248 	.db 0x0d
      0003BE 0A                   11249 	.db 0x0a
      0003BF 00                   11250 	.db 0x00
                                  11251 	.area CSEG    (CODE)
                                  11252 	.area CONST   (CODE)
      0003C0                      11253 ___str_53:
      0003C0 71                   11254 	.ascii "q"
      0003C1 09                   11255 	.db 0x09
      0003C2 71 75 69 74          11256 	.ascii "quit"
      0003C6 0D                   11257 	.db 0x0d
      0003C7 0A                   11258 	.db 0x0a
      0003C8 00                   11259 	.db 0x00
                                  11260 	.area CSEG    (CODE)
                                  11261 	.area CONST   (CODE)
      0003C9                      11262 ___str_54:
      0003C9 54 45 52 4D          11263 	.ascii "TERM"
      0003CD 0D                   11264 	.db 0x0d
      0003CE 0A                   11265 	.db 0x0a
      0003CF 00                   11266 	.db 0x00
                                  11267 	.area CSEG    (CODE)
                                  11268 	.area XINIT   (CODE)
      000000                      11269 __xinit__deltas:
      000000 00 00                11270 	.byte #0x00, #0x00	;  0
      000002 00 00                11271 	.byte #0x00, #0x00	;  0
      000004 00 00                11272 	.byte #0x00, #0x00	;  0
      000006 00 00                11273 	.byte #0x00,#0x00
      000008 00 00                11274 	.byte #0x00,#0x00
      00000A 00 00                11275 	.byte #0x00, #0x00	;  0
      00000C 01 00                11276 	.byte #0x01, #0x00	;  1
      00000E 02 00                11277 	.byte #0x02, #0x00	;  2
      000010 00 00                11278 	.byte #0x00,#0x00
      000012r22s00                11279 	.byte _accumulate, (_accumulate >> 8)
      000014 00 00                11280 	.byte #0x00, #0x00	;  0
      000016 02 00                11281 	.byte #0x02, #0x00	;  2
      000018 01 00                11282 	.byte #0x01, #0x00	;  1
      00001A 00 00                11283 	.byte #0x00,#0x00
      00001CrC1s07                11284 	.byte _operator, (_operator >> 8)
      00001E 01 00                11285 	.byte #0x01, #0x00	;  1
      000020 00 00                11286 	.byte #0x00, #0x00	;  0
      000022 00 00                11287 	.byte #0x00, #0x00	;  0
      000024 00 00                11288 	.byte #0x00,#0x00
      000026 00 00                11289 	.byte #0x00,#0x00
      000028 01 00                11290 	.byte #0x01, #0x00	;  1
      00002A 02 00                11291 	.byte #0x02, #0x00	;  2
      00002C 01 00                11292 	.byte #0x01, #0x00	;  1
      00002E 00 00                11293 	.byte #0x00,#0x00
      000030rC1s07                11294 	.byte _operator, (_operator >> 8)
      000032 01 00                11295 	.byte #0x01, #0x00	;  1
      000034 01 00                11296 	.byte #0x01, #0x00	;  1
      000036 02 00                11297 	.byte #0x02, #0x00	;  2
      000038 00 00                11298 	.byte #0x00,#0x00
      00003Ar22s00                11299 	.byte _accumulate, (_accumulate >> 8)
      00003C 02 00                11300 	.byte #0x02, #0x00	;  2
      00003E 00 00                11301 	.byte #0x00, #0x00	;  0
      000040 00 00                11302 	.byte #0x00, #0x00	;  0
      000042 00 00                11303 	.byte #0x00,#0x00
      000044r4Fs2A                11304 	.byte _push_acc, (_push_acc >> 8)
      000046 02 00                11305 	.byte #0x02, #0x00	;  2
      000048 07 00                11306 	.byte #0x07, #0x00	;  7
      00004A 00 00                11307 	.byte #0x00, #0x00	;  0
      00004C 00 00                11308 	.byte #0x00,#0x00
      00004Er72s2B                11309 	.byte _reset_acc, (_reset_acc >> 8)
      000050 02 00                11310 	.byte #0x02, #0x00	;  2
      000052 01 00                11311 	.byte #0x01, #0x00	;  1
      000054 02 00                11312 	.byte #0x02, #0x00	;  2
      000056 00 00                11313 	.byte #0x00,#0x00
      000058r22s00                11314 	.byte _accumulate, (_accumulate >> 8)
      00005A 02 00                11315 	.byte #0x02, #0x00	;  2
      00005C 02 00                11316 	.byte #0x02, #0x00	;  2
      00005E 01 00                11317 	.byte #0x01, #0x00	;  1
      000060 00 00                11318 	.byte #0x00,#0x00
      000062r4Fs2A                11319 	.byte _push_acc, (_push_acc >> 8)
      000064 FF 7F                11320 	.byte #0xff, #0x7f	;  32767
      000066 06 00                11321 	.byte #0x06, #0x00	;  6
      000068 FF 7F                11322 	.byte #0xff, #0x7f	;  32767
      00006A 00 00                11323 	.byte #0x00,#0x00
      00006Cr72s2B                11324 	.byte _reset_acc, (_reset_acc >> 8)
      00006E FF 7F                11325 	.byte #0xff, #0x7f	;  32767
      000070 07 00                11326 	.byte #0x07, #0x00	;  7
      000072 FF 7F                11327 	.byte #0xff, #0x7f	;  32767
      000074 00 00                11328 	.byte #0x00,#0x00
      000076 00 00                11329 	.byte #0x00,#0x00
      000078 FF 7F                11330 	.byte #0xff, #0x7f	;  32767
      00007A 05 00                11331 	.byte #0x05, #0x00	;  5
      00007C FF 7F                11332 	.byte #0xff, #0x7f	;  32767
      00007E 00 00                11333 	.byte #0x00,#0x00
      000080rDCs2B                11334 	.byte _reset_base, (_reset_base >> 8)
      000082 FF 7F                11335 	.byte #0xff, #0x7f	;  32767
      000084 03 00                11336 	.byte #0x03, #0x00	;  3
      000086 FF 7F                11337 	.byte #0xff, #0x7f	;  32767
      000088 00 00                11338 	.byte #0x00,#0x00
      00008Ar5As2C                11339 	.byte _status, (_status >> 8)
      00008C FF 7F                11340 	.byte #0xff, #0x7f	;  32767
      00008E 04 00                11341 	.byte #0x04, #0x00	;  4
      000090 FF 7F                11342 	.byte #0xff, #0x7f	;  32767
      000092 00 00                11343 	.byte #0x00,#0x00
      000094rA5s34                11344 	.byte _help, (_help >> 8)
      000096 FF 7F                11345 	.byte #0xff, #0x7f	;  32767
      000098 08 00                11346 	.byte #0x08, #0x00	;  8
      00009A 03 00                11347 	.byte #0x03, #0x00	;  3
      00009C 00 00                11348 	.byte #0x00,#0x00
      00009Er93s01                11349 	.byte _dump_pop, (_dump_pop >> 8)
      0000A0 00 80                11350 	.byte #0x00, #0x80	; -32768
      0000A2 00 80                11351 	.byte #0x00, #0x80	; -32768
      0000A4 00 80                11352 	.byte #0x00, #0x80	; -32768
      0000A6 00 00                11353 	.byte #0x00,#0x00
      0000A8 00 00                11354 	.byte #0x00,#0x00
                                  11355 	.area CABS    (ABS,CODE)
