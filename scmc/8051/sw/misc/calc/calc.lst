                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module calc
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _getchar_poll
                                     13 	.globl _stack_iter_peek
                                     14 	.globl _stack_peek
                                     15 	.globl _stack_pop
                                     16 	.globl _stack_push
                                     17 	.globl _stack_init
                                     18 	.globl _state_exec
                                     19 	.globl _state_init
                                     20 	.globl _isxdigit
                                     21 	.globl _printf
                                     22 	.globl _strtol
                                     23 	.globl _CY
                                     24 	.globl _AC
                                     25 	.globl _F0
                                     26 	.globl _RS1
                                     27 	.globl _RS0
                                     28 	.globl _OV
                                     29 	.globl _FL
                                     30 	.globl _P
                                     31 	.globl _TF2
                                     32 	.globl _EXF2
                                     33 	.globl _RCLK
                                     34 	.globl _TCLK
                                     35 	.globl _EXEN2
                                     36 	.globl _TR2
                                     37 	.globl _C_T2
                                     38 	.globl _CP_RL2
                                     39 	.globl _T2CON_7
                                     40 	.globl _T2CON_6
                                     41 	.globl _T2CON_5
                                     42 	.globl _T2CON_4
                                     43 	.globl _T2CON_3
                                     44 	.globl _T2CON_2
                                     45 	.globl _T2CON_1
                                     46 	.globl _T2CON_0
                                     47 	.globl _PT2
                                     48 	.globl _PS
                                     49 	.globl _PT1
                                     50 	.globl _PX1
                                     51 	.globl _PT0
                                     52 	.globl _PX0
                                     53 	.globl _RD
                                     54 	.globl _WR
                                     55 	.globl _T1
                                     56 	.globl _T0
                                     57 	.globl _INT1
                                     58 	.globl _INT0
                                     59 	.globl _TXD
                                     60 	.globl _RXD
                                     61 	.globl _P3_7
                                     62 	.globl _P3_6
                                     63 	.globl _P3_5
                                     64 	.globl _P3_4
                                     65 	.globl _P3_3
                                     66 	.globl _P3_2
                                     67 	.globl _P3_1
                                     68 	.globl _P3_0
                                     69 	.globl _EA
                                     70 	.globl _ET2
                                     71 	.globl _ES
                                     72 	.globl _ET1
                                     73 	.globl _EX1
                                     74 	.globl _ET0
                                     75 	.globl _EX0
                                     76 	.globl _P2_7
                                     77 	.globl _P2_6
                                     78 	.globl _P2_5
                                     79 	.globl _P2_4
                                     80 	.globl _P2_3
                                     81 	.globl _P2_2
                                     82 	.globl _P2_1
                                     83 	.globl _P2_0
                                     84 	.globl _SM0
                                     85 	.globl _SM1
                                     86 	.globl _SM2
                                     87 	.globl _REN
                                     88 	.globl _TB8
                                     89 	.globl _RB8
                                     90 	.globl _TI
                                     91 	.globl _RI
                                     92 	.globl _T2EX
                                     93 	.globl _T2
                                     94 	.globl _P1_7
                                     95 	.globl _P1_6
                                     96 	.globl _P1_5
                                     97 	.globl _P1_4
                                     98 	.globl _P1_3
                                     99 	.globl _P1_2
                                    100 	.globl _P1_1
                                    101 	.globl _P1_0
                                    102 	.globl _TF1
                                    103 	.globl _TR1
                                    104 	.globl _TF0
                                    105 	.globl _TR0
                                    106 	.globl _IE1
                                    107 	.globl _IT1
                                    108 	.globl _IE0
                                    109 	.globl _IT0
                                    110 	.globl _P0_7
                                    111 	.globl _P0_6
                                    112 	.globl _P0_5
                                    113 	.globl _P0_4
                                    114 	.globl _P0_3
                                    115 	.globl _P0_2
                                    116 	.globl _P0_1
                                    117 	.globl _P0_0
                                    118 	.globl _B
                                    119 	.globl _A
                                    120 	.globl _ACC
                                    121 	.globl _PSW
                                    122 	.globl _TH2
                                    123 	.globl _TL2
                                    124 	.globl _RCAP2H
                                    125 	.globl _RCAP2L
                                    126 	.globl _T2MOD
                                    127 	.globl _T2CON
                                    128 	.globl _IP
                                    129 	.globl _P3
                                    130 	.globl _IE
                                    131 	.globl _P2
                                    132 	.globl _SBUF
                                    133 	.globl _SCON
                                    134 	.globl _P1
                                    135 	.globl _TH1
                                    136 	.globl _TH0
                                    137 	.globl _TL1
                                    138 	.globl _TL0
                                    139 	.globl _TMOD
                                    140 	.globl _TCON
                                    141 	.globl _PCON
                                    142 	.globl _DPH
                                    143 	.globl _DPL
                                    144 	.globl _SP
                                    145 	.globl _P0
                                    146 	.globl _putchar
                                    147 	.globl _getchar
                                    148 ;--------------------------------------------------------
                                    149 ; special function registers
                                    150 ;--------------------------------------------------------
                                    151 	.area RSEG    (ABS,DATA)
      000000                        152 	.org 0x0000
                           000080   153 _P0	=	0x0080
                           000081   154 _SP	=	0x0081
                           000082   155 _DPL	=	0x0082
                           000083   156 _DPH	=	0x0083
                           000087   157 _PCON	=	0x0087
                           000088   158 _TCON	=	0x0088
                           000089   159 _TMOD	=	0x0089
                           00008A   160 _TL0	=	0x008a
                           00008B   161 _TL1	=	0x008b
                           00008C   162 _TH0	=	0x008c
                           00008D   163 _TH1	=	0x008d
                           000090   164 _P1	=	0x0090
                           000098   165 _SCON	=	0x0098
                           000099   166 _SBUF	=	0x0099
                           0000A0   167 _P2	=	0x00a0
                           0000A8   168 _IE	=	0x00a8
                           0000B0   169 _P3	=	0x00b0
                           0000B8   170 _IP	=	0x00b8
                           0000C8   171 _T2CON	=	0x00c8
                           0000C9   172 _T2MOD	=	0x00c9
                           0000CA   173 _RCAP2L	=	0x00ca
                           0000CB   174 _RCAP2H	=	0x00cb
                           0000CC   175 _TL2	=	0x00cc
                           0000CD   176 _TH2	=	0x00cd
                           0000D0   177 _PSW	=	0x00d0
                           0000E0   178 _ACC	=	0x00e0
                           0000E0   179 _A	=	0x00e0
                           0000F0   180 _B	=	0x00f0
                                    181 ;--------------------------------------------------------
                                    182 ; special function bits
                                    183 ;--------------------------------------------------------
                                    184 	.area RSEG    (ABS,DATA)
      000000                        185 	.org 0x0000
                           000080   186 _P0_0	=	0x0080
                           000081   187 _P0_1	=	0x0081
                           000082   188 _P0_2	=	0x0082
                           000083   189 _P0_3	=	0x0083
                           000084   190 _P0_4	=	0x0084
                           000085   191 _P0_5	=	0x0085
                           000086   192 _P0_6	=	0x0086
                           000087   193 _P0_7	=	0x0087
                           000088   194 _IT0	=	0x0088
                           000089   195 _IE0	=	0x0089
                           00008A   196 _IT1	=	0x008a
                           00008B   197 _IE1	=	0x008b
                           00008C   198 _TR0	=	0x008c
                           00008D   199 _TF0	=	0x008d
                           00008E   200 _TR1	=	0x008e
                           00008F   201 _TF1	=	0x008f
                           000090   202 _P1_0	=	0x0090
                           000091   203 _P1_1	=	0x0091
                           000092   204 _P1_2	=	0x0092
                           000093   205 _P1_3	=	0x0093
                           000094   206 _P1_4	=	0x0094
                           000095   207 _P1_5	=	0x0095
                           000096   208 _P1_6	=	0x0096
                           000097   209 _P1_7	=	0x0097
                           000090   210 _T2	=	0x0090
                           000091   211 _T2EX	=	0x0091
                           000098   212 _RI	=	0x0098
                           000099   213 _TI	=	0x0099
                           00009A   214 _RB8	=	0x009a
                           00009B   215 _TB8	=	0x009b
                           00009C   216 _REN	=	0x009c
                           00009D   217 _SM2	=	0x009d
                           00009E   218 _SM1	=	0x009e
                           00009F   219 _SM0	=	0x009f
                           0000A0   220 _P2_0	=	0x00a0
                           0000A1   221 _P2_1	=	0x00a1
                           0000A2   222 _P2_2	=	0x00a2
                           0000A3   223 _P2_3	=	0x00a3
                           0000A4   224 _P2_4	=	0x00a4
                           0000A5   225 _P2_5	=	0x00a5
                           0000A6   226 _P2_6	=	0x00a6
                           0000A7   227 _P2_7	=	0x00a7
                           0000A8   228 _EX0	=	0x00a8
                           0000A9   229 _ET0	=	0x00a9
                           0000AA   230 _EX1	=	0x00aa
                           0000AB   231 _ET1	=	0x00ab
                           0000AC   232 _ES	=	0x00ac
                           0000AD   233 _ET2	=	0x00ad
                           0000AF   234 _EA	=	0x00af
                           0000B0   235 _P3_0	=	0x00b0
                           0000B1   236 _P3_1	=	0x00b1
                           0000B2   237 _P3_2	=	0x00b2
                           0000B3   238 _P3_3	=	0x00b3
                           0000B4   239 _P3_4	=	0x00b4
                           0000B5   240 _P3_5	=	0x00b5
                           0000B6   241 _P3_6	=	0x00b6
                           0000B7   242 _P3_7	=	0x00b7
                           0000B0   243 _RXD	=	0x00b0
                           0000B1   244 _TXD	=	0x00b1
                           0000B2   245 _INT0	=	0x00b2
                           0000B3   246 _INT1	=	0x00b3
                           0000B4   247 _T0	=	0x00b4
                           0000B5   248 _T1	=	0x00b5
                           0000B6   249 _WR	=	0x00b6
                           0000B7   250 _RD	=	0x00b7
                           0000B8   251 _PX0	=	0x00b8
                           0000B9   252 _PT0	=	0x00b9
                           0000BA   253 _PX1	=	0x00ba
                           0000BB   254 _PT1	=	0x00bb
                           0000BC   255 _PS	=	0x00bc
                           0000BD   256 _PT2	=	0x00bd
                           0000C8   257 _T2CON_0	=	0x00c8
                           0000C9   258 _T2CON_1	=	0x00c9
                           0000CA   259 _T2CON_2	=	0x00ca
                           0000CB   260 _T2CON_3	=	0x00cb
                           0000CC   261 _T2CON_4	=	0x00cc
                           0000CD   262 _T2CON_5	=	0x00cd
                           0000CE   263 _T2CON_6	=	0x00ce
                           0000CF   264 _T2CON_7	=	0x00cf
                           0000C8   265 _CP_RL2	=	0x00c8
                           0000C9   266 _C_T2	=	0x00c9
                           0000CA   267 _TR2	=	0x00ca
                           0000CB   268 _EXEN2	=	0x00cb
                           0000CC   269 _TCLK	=	0x00cc
                           0000CD   270 _RCLK	=	0x00cd
                           0000CE   271 _EXF2	=	0x00ce
                           0000CF   272 _TF2	=	0x00cf
                           0000D0   273 _P	=	0x00d0
                           0000D1   274 _FL	=	0x00d1
                           0000D2   275 _OV	=	0x00d2
                           0000D3   276 _RS0	=	0x00d3
                           0000D4   277 _RS1	=	0x00d4
                           0000D5   278 _F0	=	0x00d5
                           0000D6   279 _AC	=	0x00d6
                           0000D7   280 _CY	=	0x00d7
                                    281 ;--------------------------------------------------------
                                    282 ; overlayable register banks
                                    283 ;--------------------------------------------------------
                                    284 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        285 	.ds 8
                                    286 ;--------------------------------------------------------
                                    287 ; internal ram data
                                    288 ;--------------------------------------------------------
                                    289 	.area DSEG    (DATA)
                                    290 ;--------------------------------------------------------
                                    291 ; overlayable items in internal ram 
                                    292 ;--------------------------------------------------------
                                    293 ;--------------------------------------------------------
                                    294 ; Stack segment in internal ram 
                                    295 ;--------------------------------------------------------
                                    296 	.area	SSEG
      000000                        297 __start__stack:
      000000                        298 	.ds	1
                                    299 
                                    300 ;--------------------------------------------------------
                                    301 ; indirectly addressable internal ram data
                                    302 ;--------------------------------------------------------
                                    303 	.area ISEG    (DATA)
                                    304 ;--------------------------------------------------------
                                    305 ; absolute internal ram data
                                    306 ;--------------------------------------------------------
                                    307 	.area IABS    (ABS,DATA)
                                    308 	.area IABS    (ABS,DATA)
                                    309 ;--------------------------------------------------------
                                    310 ; bit data
                                    311 ;--------------------------------------------------------
                                    312 	.area BSEG    (BIT)
                                    313 ;--------------------------------------------------------
                                    314 ; paged external ram data
                                    315 ;--------------------------------------------------------
                                    316 	.area PSEG    (PAG,XDATA)
                                    317 ;--------------------------------------------------------
                                    318 ; external ram data
                                    319 ;--------------------------------------------------------
                                    320 	.area XSEG    (XDATA)
      000000                        321 _s:
      000000                        322 	.ds 12
      00000C                        323 _c:
      00000C                        324 	.ds 8207
                                    325 ;--------------------------------------------------------
                                    326 ; absolute external ram data
                                    327 ;--------------------------------------------------------
                                    328 	.area XABS    (ABS,XDATA)
                                    329 ;--------------------------------------------------------
                                    330 ; external initialized ram data
                                    331 ;--------------------------------------------------------
                                    332 	.area XISEG   (XDATA)
      000000                        333 _hexp:
      000000                        334 	.ds 3
      000003                        335 _decp:
      000003                        336 	.ds 3
      000006                        337 _hexP:
      000006                        338 	.ds 3
      000009                        339 _decP:
      000009                        340 	.ds 3
      00000C                        341 _hexv:
      00000C                        342 	.ds 3
      00000F                        343 _decv:
      00000F                        344 	.ds 3
      000012                        345 _hexV:
      000012                        346 	.ds 3
      000015                        347 _decV:
      000015                        348 	.ds 3
      000018                        349 _deltas:
      000018                        350 	.ds 150
                                    351 	.area HOME    (CODE)
                                    352 	.area GSINIT0 (CODE)
                                    353 	.area GSINIT1 (CODE)
                                    354 	.area GSINIT2 (CODE)
                                    355 	.area GSINIT3 (CODE)
                                    356 	.area GSINIT4 (CODE)
                                    357 	.area GSINIT5 (CODE)
                                    358 	.area GSINIT  (CODE)
                                    359 	.area GSFINAL (CODE)
                                    360 	.area CSEG    (CODE)
                                    361 ;--------------------------------------------------------
                                    362 ; interrupt vector 
                                    363 ;--------------------------------------------------------
                                    364 	.area HOME    (CODE)
      000000                        365 __interrupt_vect:
      000000 02r00r00         [24]  366 	ljmp	__sdcc_gsinit_startup
                                    367 ;--------------------------------------------------------
                                    368 ; global & static initialisations
                                    369 ;--------------------------------------------------------
                                    370 	.area HOME    (CODE)
                                    371 	.area GSINIT  (CODE)
                                    372 	.area GSFINAL (CODE)
                                    373 	.area GSINIT  (CODE)
                                    374 	.globl __sdcc_gsinit_startup
                                    375 	.globl __sdcc_program_startup
                                    376 	.globl __start__stack
                                    377 	.globl __mcs51_genXINIT
                                    378 	.globl __mcs51_genXRAMCLEAR
                                    379 	.globl __mcs51_genRAMCLEAR
                                    380 	.area GSFINAL (CODE)
      000000 02r00r03         [24]  381 	ljmp	__sdcc_program_startup
                                    382 ;--------------------------------------------------------
                                    383 ; Home
                                    384 ;--------------------------------------------------------
                                    385 	.area HOME    (CODE)
                                    386 	.area HOME    (CODE)
      000003                        387 __sdcc_program_startup:
      000003 02r1Ar01         [24]  388 	ljmp	_main
                                    389 ;	return from main will return to caller
                                    390 ;--------------------------------------------------------
                                    391 ; code
                                    392 ;--------------------------------------------------------
                                    393 	.area CSEG    (CODE)
                                    394 ;------------------------------------------------------------
                                    395 ;Allocation info for local variables in function 'putchar'
                                    396 ;------------------------------------------------------------
                                    397 ;c                         Allocated to registers 
                                    398 ;------------------------------------------------------------
                                    399 ;	calc.c:15: int putchar(int c) __naked {
                                    400 ;	-----------------------------------------
                                    401 ;	 function putchar
                                    402 ;	-----------------------------------------
      000000                        403 _putchar:
                                    404 ;	naked function: no prologue.
                                    405 ;	calc.c:20: __endasm;
      000000 E5 82            [12]  406 	mov	a, dpl
      000002 02 00 30         [24]  407 	ljmp	0x0030
                                    408 ;	calc.c:21: }
                                    409 ;	naked function: no epilogue.
                                    410 ;------------------------------------------------------------
                                    411 ;Allocation info for local variables in function 'getchar'
                                    412 ;------------------------------------------------------------
                                    413 ;	calc.c:23: int getchar(void) __naked {
                                    414 ;	-----------------------------------------
                                    415 ;	 function getchar
                                    416 ;	-----------------------------------------
      000005                        417 _getchar:
                                    418 ;	naked function: no prologue.
                                    419 ;	calc.c:29: __endasm;
      000005 12 00 32         [24]  420 	lcall	0x0032
      000008 F5 82            [12]  421 	mov	dpl, a
      00000A 75 83 00         [24]  422 	mov	dph, #0
      00000D 22               [24]  423 	ret
                                    424 ;	calc.c:30: }
                                    425 ;	naked function: no epilogue.
                                    426 ;------------------------------------------------------------
                                    427 ;Allocation info for local variables in function 'getchar_poll'
                                    428 ;------------------------------------------------------------
                                    429 ;	calc.c:32: int getchar_poll(void) __naked {
                                    430 ;	-----------------------------------------
                                    431 ;	 function getchar_poll
                                    432 ;	-----------------------------------------
      00000E                        433 _getchar_poll:
                                    434 ;	naked function: no prologue.
                                    435 ;	calc.c:44: __endasm;
      00000E 74 FF            [12]  436 	mov	a, #0xff
      000010 F5 F0            [12]  437 	mov	b, a
      000012 30 98 07         [24]  438 	jnb	ri, nochar
      000015 C2 98            [12]  439 	clr	ri
      000017 E5 99            [12]  440 	mov	a, sbuf
      000019 75 F0 00         [24]  441 	mov	b, #0
      00001C                        442 	nochar:
      00001C F5 82            [12]  443 	mov	dpl, a
      00001E 85 F0 83         [24]  444 	mov	dph, b
      000021 22               [24]  445 	ret
                                    446 ;	calc.c:45: }
                                    447 ;	naked function: no epilogue.
                                    448 ;------------------------------------------------------------
                                    449 ;Allocation info for local variables in function 'accumulate'
                                    450 ;------------------------------------------------------------
                                    451 ;delta                     Allocated to stack - _bp -5
                                    452 ;_ctx                      Allocated to registers r5 r6 r7 
                                    453 ;ctx                       Allocated to stack - _bp +8
                                    454 ;d                         Allocated to stack - _bp +11
                                    455 ;sloc0                     Allocated to stack - _bp +1
                                    456 ;sloc1                     Allocated to stack - _bp +4
                                    457 ;------------------------------------------------------------
                                    458 ;	calc.c:83: static int accumulate(void *_ctx, delta_t *delta) __reentrant {
                                    459 ;	-----------------------------------------
                                    460 ;	 function accumulate
                                    461 ;	-----------------------------------------
      000022                        462 _accumulate:
                           000007   463 	ar7 = 0x07
                           000006   464 	ar6 = 0x06
                           000005   465 	ar5 = 0x05
                           000004   466 	ar4 = 0x04
                           000003   467 	ar3 = 0x03
                           000002   468 	ar2 = 0x02
                           000001   469 	ar1 = 0x01
                           000000   470 	ar0 = 0x00
      000022 C0*00            [24]  471 	push	_bp
      000024 E5 81            [12]  472 	mov	a,sp
      000026 F5*00            [12]  473 	mov	_bp,a
      000028 24 0E            [12]  474 	add	a,#0x0e
      00002A F5 81            [12]  475 	mov	sp,a
      00002C AD 82            [24]  476 	mov	r5,dpl
      00002E AE 83            [24]  477 	mov	r6,dph
      000030 AF F0            [24]  478 	mov	r7,b
                                    479 ;	calc.c:84: struct ctx *ctx = (struct ctx *)_ctx;
      000032 E5*00            [12]  480 	mov	a,_bp
      000034 24 08            [12]  481 	add	a,#0x08
      000036 F8               [12]  482 	mov	r0,a
      000037 A6 05            [24]  483 	mov	@r0,ar5
      000039 08               [12]  484 	inc	r0
      00003A A6 06            [24]  485 	mov	@r0,ar6
      00003C 08               [12]  486 	inc	r0
      00003D A6 07            [24]  487 	mov	@r0,ar7
                                    488 ;	calc.c:89: if (!ctx->acc_valid) {
      00003F E5*00            [12]  489 	mov	a,_bp
      000041 24 08            [12]  490 	add	a,#0x08
      000043 F8               [12]  491 	mov	r0,a
      000044 74 08            [12]  492 	mov	a,#0x08
      000046 26               [12]  493 	add	a,@r0
      000047 FA               [12]  494 	mov	r2,a
      000048 E4               [12]  495 	clr	a
      000049 08               [12]  496 	inc	r0
      00004A 36               [12]  497 	addc	a,@r0
      00004B FB               [12]  498 	mov	r3,a
      00004C 08               [12]  499 	inc	r0
      00004D 86 04            [24]  500 	mov	ar4,@r0
      00004F 8A 82            [24]  501 	mov	dpl,r2
      000051 8B 83            [24]  502 	mov	dph,r3
      000053 8C F0            [24]  503 	mov	b,r4
      000055 12r00r00         [24]  504 	lcall	__gptrget
      000058 70 31            [24]  505 	jnz	00102$
                                    506 ;	calc.c:90: ctx->acc_valid = 1;
      00005A 8A 82            [24]  507 	mov	dpl,r2
      00005C 8B 83            [24]  508 	mov	dph,r3
      00005E 8C F0            [24]  509 	mov	b,r4
      000060 74 01            [12]  510 	mov	a,#0x01
      000062 12r00r00         [24]  511 	lcall	__gptrput
                                    512 ;	calc.c:91: ctx->acc = 0l;
      000065 E5*00            [12]  513 	mov	a,_bp
      000067 24 08            [12]  514 	add	a,#0x08
      000069 F8               [12]  515 	mov	r0,a
      00006A 74 04            [12]  516 	mov	a,#0x04
      00006C 26               [12]  517 	add	a,@r0
      00006D FA               [12]  518 	mov	r2,a
      00006E E4               [12]  519 	clr	a
      00006F 08               [12]  520 	inc	r0
      000070 36               [12]  521 	addc	a,@r0
      000071 FB               [12]  522 	mov	r3,a
      000072 08               [12]  523 	inc	r0
      000073 86 04            [24]  524 	mov	ar4,@r0
      000075 8A 82            [24]  525 	mov	dpl,r2
      000077 8B 83            [24]  526 	mov	dph,r3
      000079 8C F0            [24]  527 	mov	b,r4
      00007B E4               [12]  528 	clr	a
      00007C 12r00r00         [24]  529 	lcall	__gptrput
      00007F A3               [24]  530 	inc	dptr
      000080 12r00r00         [24]  531 	lcall	__gptrput
      000083 A3               [24]  532 	inc	dptr
      000084 12r00r00         [24]  533 	lcall	__gptrput
      000087 A3               [24]  534 	inc	dptr
      000088 12r00r00         [24]  535 	lcall	__gptrput
      00008B                        536 00102$:
                                    537 ;	calc.c:94: d = strtol(ctx->digit, NULL, ctx->base);
      00008B E5*00            [12]  538 	mov	a,_bp
      00008D 24 08            [12]  539 	add	a,#0x08
      00008F F8               [12]  540 	mov	r0,a
      000090 86 82            [24]  541 	mov	dpl,@r0
      000092 08               [12]  542 	inc	r0
      000093 86 83            [24]  543 	mov	dph,@r0
      000095 08               [12]  544 	inc	r0
      000096 86 F0            [24]  545 	mov	b,@r0
      000098 12r00r00         [24]  546 	lcall	__gptrget
      00009B FB               [12]  547 	mov	r3,a
      00009C A3               [24]  548 	inc	dptr
      00009D 12r00r00         [24]  549 	lcall	__gptrget
      0000A0 FC               [12]  550 	mov	r4,a
      0000A1 E5*00            [12]  551 	mov	a,_bp
      0000A3 24 08            [12]  552 	add	a,#0x08
      0000A5 F8               [12]  553 	mov	r0,a
      0000A6 74 09            [12]  554 	mov	a,#0x09
      0000A8 26               [12]  555 	add	a,@r0
      0000A9 FA               [12]  556 	mov	r2,a
      0000AA E4               [12]  557 	clr	a
      0000AB 08               [12]  558 	inc	r0
      0000AC 36               [12]  559 	addc	a,@r0
      0000AD FE               [12]  560 	mov	r6,a
      0000AE 08               [12]  561 	inc	r0
      0000AF 86 07            [24]  562 	mov	ar7,@r0
      0000B1 C0 03            [24]  563 	push	ar3
      0000B3 C0 04            [24]  564 	push	ar4
      0000B5 E4               [12]  565 	clr	a
      0000B6 C0 E0            [24]  566 	push	acc
      0000B8 C0 E0            [24]  567 	push	acc
      0000BA C0 E0            [24]  568 	push	acc
      0000BC 8A 82            [24]  569 	mov	dpl,r2
      0000BE 8E 83            [24]  570 	mov	dph,r6
      0000C0 8F F0            [24]  571 	mov	b,r7
      0000C2 12r00r00         [24]  572 	lcall	_strtol
      0000C5 C8               [12]  573 	xch	a,r0
      0000C6 E5*00            [12]  574 	mov	a,_bp
      0000C8 24 0B            [12]  575 	add	a,#0x0b
      0000CA C8               [12]  576 	xch	a,r0
      0000CB A6 82            [24]  577 	mov	@r0,dpl
      0000CD 08               [12]  578 	inc	r0
      0000CE A6 83            [24]  579 	mov	@r0,dph
      0000D0 08               [12]  580 	inc	r0
      0000D1 A6 F0            [24]  581 	mov	@r0,b
      0000D3 08               [12]  582 	inc	r0
      0000D4 F6               [12]  583 	mov	@r0,a
      0000D5 E5 81            [12]  584 	mov	a,sp
      0000D7 24 FB            [12]  585 	add	a,#0xfb
      0000D9 F5 81            [12]  586 	mov	sp,a
                                    587 ;	calc.c:95: ctx->acc = ctx->acc * ctx->base + d;
      0000DB E5*00            [12]  588 	mov	a,_bp
      0000DD 24 08            [12]  589 	add	a,#0x08
      0000DF F8               [12]  590 	mov	r0,a
      0000E0 A9*00            [24]  591 	mov	r1,_bp
      0000E2 09               [12]  592 	inc	r1
      0000E3 74 04            [12]  593 	mov	a,#0x04
      0000E5 26               [12]  594 	add	a,@r0
      0000E6 F7               [12]  595 	mov	@r1,a
      0000E7 E4               [12]  596 	clr	a
      0000E8 08               [12]  597 	inc	r0
      0000E9 36               [12]  598 	addc	a,@r0
      0000EA 09               [12]  599 	inc	r1
      0000EB F7               [12]  600 	mov	@r1,a
      0000EC 08               [12]  601 	inc	r0
      0000ED 09               [12]  602 	inc	r1
      0000EE E6               [12]  603 	mov	a,@r0
      0000EF F7               [12]  604 	mov	@r1,a
      0000F0 A8*00            [24]  605 	mov	r0,_bp
      0000F2 08               [12]  606 	inc	r0
      0000F3 86 82            [24]  607 	mov	dpl,@r0
      0000F5 08               [12]  608 	inc	r0
      0000F6 86 83            [24]  609 	mov	dph,@r0
      0000F8 08               [12]  610 	inc	r0
      0000F9 86 F0            [24]  611 	mov	b,@r0
      0000FB E5*00            [12]  612 	mov	a,_bp
      0000FD 24 04            [12]  613 	add	a,#0x04
      0000FF F9               [12]  614 	mov	r1,a
      000100 12r00r00         [24]  615 	lcall	__gptrget
      000103 F7               [12]  616 	mov	@r1,a
      000104 A3               [24]  617 	inc	dptr
      000105 12r00r00         [24]  618 	lcall	__gptrget
      000108 09               [12]  619 	inc	r1
      000109 F7               [12]  620 	mov	@r1,a
      00010A A3               [24]  621 	inc	dptr
      00010B 12r00r00         [24]  622 	lcall	__gptrget
      00010E 09               [12]  623 	inc	r1
      00010F F7               [12]  624 	mov	@r1,a
      000110 A3               [24]  625 	inc	dptr
      000111 12r00r00         [24]  626 	lcall	__gptrget
      000114 09               [12]  627 	inc	r1
      000115 F7               [12]  628 	mov	@r1,a
      000116 E5*00            [12]  629 	mov	a,_bp
      000118 24 08            [12]  630 	add	a,#0x08
      00011A F8               [12]  631 	mov	r0,a
      00011B 86 82            [24]  632 	mov	dpl,@r0
      00011D 08               [12]  633 	inc	r0
      00011E 86 83            [24]  634 	mov	dph,@r0
      000120 08               [12]  635 	inc	r0
      000121 86 F0            [24]  636 	mov	b,@r0
      000123 12r00r00         [24]  637 	lcall	__gptrget
      000126 FA               [12]  638 	mov	r2,a
      000127 A3               [24]  639 	inc	dptr
      000128 12r00r00         [24]  640 	lcall	__gptrget
      00012B FB               [12]  641 	mov	r3,a
      00012C A3               [24]  642 	inc	dptr
      00012D 12r00r00         [24]  643 	lcall	__gptrget
      000130 FE               [12]  644 	mov	r6,a
      000131 A3               [24]  645 	inc	dptr
      000132 12r00r00         [24]  646 	lcall	__gptrget
      000135 FF               [12]  647 	mov	r7,a
      000136 C0 02            [24]  648 	push	ar2
      000138 C0 03            [24]  649 	push	ar3
      00013A C0 06            [24]  650 	push	ar6
      00013C C0 07            [24]  651 	push	ar7
      00013E E5*00            [12]  652 	mov	a,_bp
      000140 24 04            [12]  653 	add	a,#0x04
      000142 F8               [12]  654 	mov	r0,a
      000143 86 82            [24]  655 	mov	dpl,@r0
      000145 08               [12]  656 	inc	r0
      000146 86 83            [24]  657 	mov	dph,@r0
      000148 08               [12]  658 	inc	r0
      000149 86 F0            [24]  659 	mov	b,@r0
      00014B 08               [12]  660 	inc	r0
      00014C E6               [12]  661 	mov	a,@r0
      00014D 12r00r00         [24]  662 	lcall	__mullong
      000150 AC 82            [24]  663 	mov	r4,dpl
      000152 AD 83            [24]  664 	mov	r5,dph
      000154 AE F0            [24]  665 	mov	r6,b
      000156 FF               [12]  666 	mov	r7,a
      000157 E5 81            [12]  667 	mov	a,sp
      000159 24 FC            [12]  668 	add	a,#0xfc
      00015B F5 81            [12]  669 	mov	sp,a
      00015D E5*00            [12]  670 	mov	a,_bp
      00015F 24 0B            [12]  671 	add	a,#0x0b
      000161 F8               [12]  672 	mov	r0,a
      000162 E6               [12]  673 	mov	a,@r0
      000163 2C               [12]  674 	add	a,r4
      000164 FC               [12]  675 	mov	r4,a
      000165 08               [12]  676 	inc	r0
      000166 E6               [12]  677 	mov	a,@r0
      000167 3D               [12]  678 	addc	a,r5
      000168 FD               [12]  679 	mov	r5,a
      000169 08               [12]  680 	inc	r0
      00016A E6               [12]  681 	mov	a,@r0
      00016B 3E               [12]  682 	addc	a,r6
      00016C FE               [12]  683 	mov	r6,a
      00016D 08               [12]  684 	inc	r0
      00016E E6               [12]  685 	mov	a,@r0
      00016F 3F               [12]  686 	addc	a,r7
      000170 FF               [12]  687 	mov	r7,a
      000171 A8*00            [24]  688 	mov	r0,_bp
      000173 08               [12]  689 	inc	r0
      000174 86 82            [24]  690 	mov	dpl,@r0
      000176 08               [12]  691 	inc	r0
      000177 86 83            [24]  692 	mov	dph,@r0
      000179 08               [12]  693 	inc	r0
      00017A 86 F0            [24]  694 	mov	b,@r0
      00017C EC               [12]  695 	mov	a,r4
      00017D 12r00r00         [24]  696 	lcall	__gptrput
      000180 A3               [24]  697 	inc	dptr
      000181 ED               [12]  698 	mov	a,r5
      000182 12r00r00         [24]  699 	lcall	__gptrput
      000185 A3               [24]  700 	inc	dptr
      000186 EE               [12]  701 	mov	a,r6
      000187 12r00r00         [24]  702 	lcall	__gptrput
      00018A A3               [24]  703 	inc	dptr
      00018B EF               [12]  704 	mov	a,r7
      00018C 12r00r00         [24]  705 	lcall	__gptrput
                                    706 ;	calc.c:97: return 1;
      00018F 90 00 01         [24]  707 	mov	dptr,#0x0001
                                    708 ;	calc.c:98: }
      000192 85*00 81         [24]  709 	mov	sp,_bp
      000195 D0*00            [24]  710 	pop	_bp
      000197 22               [24]  711 	ret
                                    712 ;------------------------------------------------------------
                                    713 ;Allocation info for local variables in function 'dump_pop'
                                    714 ;------------------------------------------------------------
                                    715 ;delta                     Allocated to stack - _bp -5
                                    716 ;_ctx                      Allocated to registers r5 r6 r7 
                                    717 ;ctx                       Allocated to stack - _bp +5
                                    718 ;d                         Allocated to stack - _bp +8
                                    719 ;r                         Allocated to stack - _bp +2
                                    720 ;__1310720001              Allocated to registers 
                                    721 ;s                         Allocated to registers r5 r6 r7 
                                    722 ;__1966080003              Allocated to registers 
                                    723 ;s                         Allocated to registers r4 r5 r6 
                                    724 ;sloc0                     Allocated to stack - _bp +1
                                    725 ;sloc1                     Allocated to stack - _bp +2
                                    726 ;------------------------------------------------------------
                                    727 ;	calc.c:100: static int dump_pop(void *_ctx, delta_t *delta) __reentrant {
                                    728 ;	-----------------------------------------
                                    729 ;	 function dump_pop
                                    730 ;	-----------------------------------------
      000198                        731 _dump_pop:
      000198 C0*00            [24]  732 	push	_bp
      00019A E5 81            [12]  733 	mov	a,sp
      00019C F5*00            [12]  734 	mov	_bp,a
      00019E 24 0B            [12]  735 	add	a,#0x0b
      0001A0 F5 81            [12]  736 	mov	sp,a
      0001A2 AD 82            [24]  737 	mov	r5,dpl
      0001A4 AE 83            [24]  738 	mov	r6,dph
      0001A6 AF F0            [24]  739 	mov	r7,b
                                    740 ;	calc.c:101: struct ctx *ctx = (struct ctx *)_ctx;
      0001A8 E5*00            [12]  741 	mov	a,_bp
      0001AA 24 05            [12]  742 	add	a,#0x05
      0001AC F8               [12]  743 	mov	r0,a
      0001AD A6 05            [24]  744 	mov	@r0,ar5
      0001AF 08               [12]  745 	inc	r0
      0001B0 A6 06            [24]  746 	mov	@r0,ar6
      0001B2 08               [12]  747 	inc	r0
      0001B3 A6 07            [24]  748 	mov	@r0,ar7
                                    749 ;	calc.c:105: if (delta->event == EVENT_TERM) printstr("\r\n");
      0001B5 E5*00            [12]  750 	mov	a,_bp
      0001B7 24 FB            [12]  751 	add	a,#0xfb
      0001B9 F8               [12]  752 	mov	r0,a
      0001BA 86 02            [24]  753 	mov	ar2,@r0
      0001BC 08               [12]  754 	inc	r0
      0001BD 86 03            [24]  755 	mov	ar3,@r0
      0001BF 08               [12]  756 	inc	r0
      0001C0 86 04            [24]  757 	mov	ar4,@r0
      0001C2 74 02            [12]  758 	mov	a,#0x02
      0001C4 2A               [12]  759 	add	a,r2
      0001C5 FA               [12]  760 	mov	r2,a
      0001C6 E4               [12]  761 	clr	a
      0001C7 3B               [12]  762 	addc	a,r3
      0001C8 FB               [12]  763 	mov	r3,a
      0001C9 8A 82            [24]  764 	mov	dpl,r2
      0001CB 8B 83            [24]  765 	mov	dph,r3
      0001CD 8C F0            [24]  766 	mov	b,r4
      0001CF 12r00r00         [24]  767 	lcall	__gptrget
      0001D2 FE               [12]  768 	mov	r6,a
      0001D3 A3               [24]  769 	inc	dptr
      0001D4 12r00r00         [24]  770 	lcall	__gptrget
      0001D7 FF               [12]  771 	mov	r7,a
      0001D8 BE 06 3D         [24]  772 	cjne	r6,#0x06,00102$
      0001DB BF 00 3A         [24]  773 	cjne	r7,#0x00,00102$
      0001DE 7Dr00            [12]  774 	mov	r5,#___str_0
      0001E0 7Es00            [12]  775 	mov	r6,#(___str_0 >> 8)
      0001E2 7F 80            [12]  776 	mov	r7,#0x80
                                    777 ;	calc.c:50: return;
      0001E4                        778 00116$:
                                    779 ;	calc.c:48: for (; *s; s++) putchar(*s);
      0001E4 8D 82            [24]  780 	mov	dpl,r5
      0001E6 8E 83            [24]  781 	mov	dph,r6
      0001E8 8F F0            [24]  782 	mov	b,r7
      0001EA A8*00            [24]  783 	mov	r0,_bp
      0001EC 08               [12]  784 	inc	r0
      0001ED 12r00r00         [24]  785 	lcall	__gptrget
      0001F0 F6               [12]  786 	mov	@r0,a
      0001F1 A8*00            [24]  787 	mov	r0,_bp
      0001F3 08               [12]  788 	inc	r0
      0001F4 E6               [12]  789 	mov	a,@r0
      0001F5 60 21            [24]  790 	jz	00102$
      0001F7 C0 02            [24]  791 	push	ar2
      0001F9 C0 03            [24]  792 	push	ar3
      0001FB C0 04            [24]  793 	push	ar4
      0001FD A8*00            [24]  794 	mov	r0,_bp
      0001FF 08               [12]  795 	inc	r0
      000200 86 03            [24]  796 	mov	ar3,@r0
      000202 7C 00            [12]  797 	mov	r4,#0x00
      000204 8B 82            [24]  798 	mov	dpl,r3
      000206 8C 83            [24]  799 	mov	dph,r4
      000208 12r00r00         [24]  800 	lcall	_putchar
      00020B 0D               [12]  801 	inc	r5
      00020C BD 00 01         [24]  802 	cjne	r5,#0x00,00170$
      00020F 0E               [12]  803 	inc	r6
      000210                        804 00170$:
      000210 D0 04            [24]  805 	pop	ar4
      000212 D0 03            [24]  806 	pop	ar3
      000214 D0 02            [24]  807 	pop	ar2
                                    808 ;	calc.c:105: if (delta->event == EVENT_TERM) printstr("\r\n");
      000216 80 CC            [24]  809 	sjmp	00116$
      000218                        810 00102$:
                                    811 ;	calc.c:107: r = stack_pop(&ctx->s, &d);
      000218 C0 02            [24]  812 	push	ar2
      00021A C0 03            [24]  813 	push	ar3
      00021C C0 04            [24]  814 	push	ar4
      00021E E5*00            [12]  815 	mov	a,_bp
      000220 24 08            [12]  816 	add	a,#0x08
      000222 FF               [12]  817 	mov	r7,a
      000223 A8*00            [24]  818 	mov	r0,_bp
      000225 08               [12]  819 	inc	r0
      000226 08               [12]  820 	inc	r0
      000227 A6 07            [24]  821 	mov	@r0,ar7
      000229 08               [12]  822 	inc	r0
      00022A 76 00            [12]  823 	mov	@r0,#0x00
      00022C 08               [12]  824 	inc	r0
      00022D 76 40            [12]  825 	mov	@r0,#0x40
      00022F E5*00            [12]  826 	mov	a,_bp
      000231 24 05            [12]  827 	add	a,#0x05
      000233 F8               [12]  828 	mov	r0,a
      000234 74 0B            [12]  829 	mov	a,#0x0b
      000236 26               [12]  830 	add	a,@r0
      000237 FA               [12]  831 	mov	r2,a
      000238 E4               [12]  832 	clr	a
      000239 08               [12]  833 	inc	r0
      00023A 36               [12]  834 	addc	a,@r0
      00023B FB               [12]  835 	mov	r3,a
      00023C 08               [12]  836 	inc	r0
      00023D 86 06            [24]  837 	mov	ar6,@r0
      00023F C0 07            [24]  838 	push	ar7
      000241 C0 04            [24]  839 	push	ar4
      000243 C0 03            [24]  840 	push	ar3
      000245 C0 02            [24]  841 	push	ar2
      000247 A8*00            [24]  842 	mov	r0,_bp
      000249 08               [12]  843 	inc	r0
      00024A 08               [12]  844 	inc	r0
      00024B E6               [12]  845 	mov	a,@r0
      00024C C0 E0            [24]  846 	push	acc
      00024E 08               [12]  847 	inc	r0
      00024F E6               [12]  848 	mov	a,@r0
      000250 C0 E0            [24]  849 	push	acc
      000252 08               [12]  850 	inc	r0
      000253 E6               [12]  851 	mov	a,@r0
      000254 C0 E0            [24]  852 	push	acc
      000256 8A 82            [24]  853 	mov	dpl,r2
      000258 8B 83            [24]  854 	mov	dph,r3
      00025A 8E F0            [24]  855 	mov	b,r6
      00025C 12r00r00         [24]  856 	lcall	_stack_pop
      00025F AD 82            [24]  857 	mov	r5,dpl
      000261 AE 83            [24]  858 	mov	r6,dph
      000263 15 81            [12]  859 	dec	sp
      000265 15 81            [12]  860 	dec	sp
      000267 15 81            [12]  861 	dec	sp
      000269 D0 02            [24]  862 	pop	ar2
      00026B D0 03            [24]  863 	pop	ar3
      00026D D0 04            [24]  864 	pop	ar4
      00026F D0 07            [24]  865 	pop	ar7
      000271 A8*00            [24]  866 	mov	r0,_bp
      000273 08               [12]  867 	inc	r0
      000274 08               [12]  868 	inc	r0
      000275 A6 05            [24]  869 	mov	@r0,ar5
      000277 08               [12]  870 	inc	r0
      000278 A6 06            [24]  871 	mov	@r0,ar6
                                    872 ;	calc.c:108: if (!r) {
      00027A D0 04            [24]  873 	pop	ar4
      00027C D0 03            [24]  874 	pop	ar3
      00027E D0 02            [24]  875 	pop	ar2
      000280 ED               [12]  876 	mov	a,r5
      000281 4E               [12]  877 	orl	a,r6
      000282 70 3D            [24]  878 	jnz	00134$
                                    879 ;	calc.c:109: if (delta->event != EVENT_TERM) printstr("stack underflow\r\n");
      000284 8A 82            [24]  880 	mov	dpl,r2
      000286 8B 83            [24]  881 	mov	dph,r3
      000288 8C F0            [24]  882 	mov	b,r4
      00028A 12r00r00         [24]  883 	lcall	__gptrget
      00028D FA               [12]  884 	mov	r2,a
      00028E A3               [24]  885 	inc	dptr
      00028F 12r00r00         [24]  886 	lcall	__gptrget
      000292 FB               [12]  887 	mov	r3,a
      000293 BA 06 06         [24]  888 	cjne	r2,#0x06,00172$
      000296 BB 00 03         [24]  889 	cjne	r3,#0x00,00172$
      000299 02r03r81         [24]  890 	ljmp	00110$
      00029C                        891 00172$:
      00029C 7Cr03            [12]  892 	mov	r4,#___str_1
      00029E 7Ds00            [12]  893 	mov	r5,#(___str_1 >> 8)
      0002A0 7E 80            [12]  894 	mov	r6,#0x80
                                    895 ;	calc.c:50: return;
      0002A2                        896 00119$:
                                    897 ;	calc.c:48: for (; *s; s++) putchar(*s);
      0002A2 8C 82            [24]  898 	mov	dpl,r4
      0002A4 8D 83            [24]  899 	mov	dph,r5
      0002A6 8E F0            [24]  900 	mov	b,r6
      0002A8 12r00r00         [24]  901 	lcall	__gptrget
      0002AB FB               [12]  902 	mov	r3,a
      0002AC 70 03            [24]  903 	jnz	00173$
      0002AE 02r03r81         [24]  904 	ljmp	00110$
      0002B1                        905 00173$:
      0002B1 7A 00            [12]  906 	mov	r2,#0x00
      0002B3 8B 82            [24]  907 	mov	dpl,r3
      0002B5 8A 83            [24]  908 	mov	dph,r2
      0002B7 12r00r00         [24]  909 	lcall	_putchar
      0002BA 0C               [12]  910 	inc	r4
                                    911 ;	calc.c:110: } else while (r > 0) {
      0002BB BC 00 E4         [24]  912 	cjne	r4,#0x00,00119$
      0002BE 0D               [12]  913 	inc	r5
      0002BF 80 E1            [24]  914 	sjmp	00119$
      0002C1                        915 00134$:
      0002C1                        916 00105$:
      0002C1 A8*00            [24]  917 	mov	r0,_bp
      0002C3 08               [12]  918 	inc	r0
      0002C4 08               [12]  919 	inc	r0
      0002C5 C3               [12]  920 	clr	c
      0002C6 E4               [12]  921 	clr	a
      0002C7 96               [12]  922 	subb	a,@r0
      0002C8 74 80            [12]  923 	mov	a,#(0x00 ^ 0x80)
      0002CA 08               [12]  924 	inc	r0
      0002CB 86 F0            [24]  925 	mov	b,@r0
      0002CD 63 F0 80         [24]  926 	xrl	b,#0x80
      0002D0 95 F0            [12]  927 	subb	a,b
      0002D2 40 03            [24]  928 	jc	00175$
      0002D4 02r03r81         [24]  929 	ljmp	00110$
      0002D7                        930 00175$:
                                    931 ;	calc.c:111: printf((ctx->base == 16l) ? hexV : decV, d);
      0002D7 E5*00            [12]  932 	mov	a,_bp
      0002D9 24 05            [12]  933 	add	a,#0x05
      0002DB F8               [12]  934 	mov	r0,a
      0002DC 86 82            [24]  935 	mov	dpl,@r0
      0002DE 08               [12]  936 	inc	r0
      0002DF 86 83            [24]  937 	mov	dph,@r0
      0002E1 08               [12]  938 	inc	r0
      0002E2 86 F0            [24]  939 	mov	b,@r0
      0002E4 12r00r00         [24]  940 	lcall	__gptrget
      0002E7 FB               [12]  941 	mov	r3,a
      0002E8 A3               [24]  942 	inc	dptr
      0002E9 12r00r00         [24]  943 	lcall	__gptrget
      0002EC FC               [12]  944 	mov	r4,a
      0002ED A3               [24]  945 	inc	dptr
      0002EE 12r00r00         [24]  946 	lcall	__gptrget
      0002F1 FD               [12]  947 	mov	r5,a
      0002F2 A3               [24]  948 	inc	dptr
      0002F3 12r00r00         [24]  949 	lcall	__gptrget
      0002F6 FE               [12]  950 	mov	r6,a
      0002F7 BB 10 16         [24]  951 	cjne	r3,#0x10,00123$
      0002FA BC 00 13         [24]  952 	cjne	r4,#0x00,00123$
      0002FD BD 00 10         [24]  953 	cjne	r5,#0x00,00123$
      000300 BE 00 0D         [24]  954 	cjne	r6,#0x00,00123$
      000303 90r00r12         [24]  955 	mov	dptr,#_hexV
      000306 E0               [24]  956 	movx	a,@dptr
      000307 FC               [12]  957 	mov	r4,a
      000308 A3               [24]  958 	inc	dptr
      000309 E0               [24]  959 	movx	a,@dptr
      00030A FD               [12]  960 	mov	r5,a
      00030B A3               [24]  961 	inc	dptr
      00030C E0               [24]  962 	movx	a,@dptr
      00030D FE               [12]  963 	mov	r6,a
      00030E 80 0B            [24]  964 	sjmp	00124$
      000310                        965 00123$:
      000310 90r00r15         [24]  966 	mov	dptr,#_decV
      000313 E0               [24]  967 	movx	a,@dptr
      000314 FC               [12]  968 	mov	r4,a
      000315 A3               [24]  969 	inc	dptr
      000316 E0               [24]  970 	movx	a,@dptr
      000317 FD               [12]  971 	mov	r5,a
      000318 A3               [24]  972 	inc	dptr
      000319 E0               [24]  973 	movx	a,@dptr
      00031A FE               [12]  974 	mov	r6,a
      00031B                        975 00124$:
      00031B C0 07            [24]  976 	push	ar7
      00031D E5*00            [12]  977 	mov	a,_bp
      00031F 24 08            [12]  978 	add	a,#0x08
      000321 F8               [12]  979 	mov	r0,a
      000322 E6               [12]  980 	mov	a,@r0
      000323 C0 E0            [24]  981 	push	acc
      000325 08               [12]  982 	inc	r0
      000326 E6               [12]  983 	mov	a,@r0
      000327 C0 E0            [24]  984 	push	acc
      000329 08               [12]  985 	inc	r0
      00032A E6               [12]  986 	mov	a,@r0
      00032B C0 E0            [24]  987 	push	acc
      00032D 08               [12]  988 	inc	r0
      00032E E6               [12]  989 	mov	a,@r0
      00032F C0 E0            [24]  990 	push	acc
      000331 C0 04            [24]  991 	push	ar4
      000333 C0 05            [24]  992 	push	ar5
      000335 C0 06            [24]  993 	push	ar6
      000337 12r00r00         [24]  994 	lcall	_printf
      00033A E5 81            [12]  995 	mov	a,sp
      00033C 24 F9            [12]  996 	add	a,#0xf9
      00033E F5 81            [12]  997 	mov	sp,a
      000340 D0 07            [24]  998 	pop	ar7
                                    999 ;	calc.c:112: r = stack_pop(&ctx->s, &d);
      000342 8F 04            [24] 1000 	mov	ar4,r7
      000344 7D 00            [12] 1001 	mov	r5,#0x00
      000346 7E 40            [12] 1002 	mov	r6,#0x40
      000348 C0 07            [24] 1003 	push	ar7
      00034A E5*00            [12] 1004 	mov	a,_bp
      00034C 24 05            [12] 1005 	add	a,#0x05
      00034E F8               [12] 1006 	mov	r0,a
      00034F 74 0B            [12] 1007 	mov	a,#0x0b
      000351 26               [12] 1008 	add	a,@r0
      000352 FA               [12] 1009 	mov	r2,a
      000353 E4               [12] 1010 	clr	a
      000354 08               [12] 1011 	inc	r0
      000355 36               [12] 1012 	addc	a,@r0
      000356 FB               [12] 1013 	mov	r3,a
      000357 08               [12] 1014 	inc	r0
      000358 86 07            [24] 1015 	mov	ar7,@r0
      00035A C0 04            [24] 1016 	push	ar4
      00035C C0 05            [24] 1017 	push	ar5
      00035E C0 06            [24] 1018 	push	ar6
      000360 8A 82            [24] 1019 	mov	dpl,r2
      000362 8B 83            [24] 1020 	mov	dph,r3
      000364 8F F0            [24] 1021 	mov	b,r7
      000366 12r00r00         [24] 1022 	lcall	_stack_pop
      000369 AE 82            [24] 1023 	mov	r6,dpl
      00036B AF 83            [24] 1024 	mov	r7,dph
      00036D 15 81            [12] 1025 	dec	sp
      00036F 15 81            [12] 1026 	dec	sp
      000371 15 81            [12] 1027 	dec	sp
      000373 A8*00            [24] 1028 	mov	r0,_bp
      000375 08               [12] 1029 	inc	r0
      000376 08               [12] 1030 	inc	r0
      000377 A6 06            [24] 1031 	mov	@r0,ar6
      000379 08               [12] 1032 	inc	r0
      00037A A6 07            [24] 1033 	mov	@r0,ar7
      00037C D0 07            [24] 1034 	pop	ar7
      00037E 02r02rC1         [24] 1035 	ljmp	00105$
      000381                       1036 00110$:
                                   1037 ;	calc.c:115: return 1;
      000381 90 00 01         [24] 1038 	mov	dptr,#0x0001
                                   1039 ;	calc.c:116: }
      000384 85*00 81         [24] 1040 	mov	sp,_bp
      000387 D0*00            [24] 1041 	pop	_bp
      000389 22               [24] 1042 	ret
                                   1043 ;------------------------------------------------------------
                                   1044 ;Allocation info for local variables in function 'dump_peek'
                                   1045 ;------------------------------------------------------------
                                   1046 ;d                         Allocated to stack - _bp -6
                                   1047 ;_ctx                      Allocated to registers r5 r6 r7 
                                   1048 ;ctx                       Allocated to registers r5 r6 r7 
                                   1049 ;------------------------------------------------------------
                                   1050 ;	calc.c:118: static int dump_peek(void *_ctx, long d) __reentrant {
                                   1051 ;	-----------------------------------------
                                   1052 ;	 function dump_peek
                                   1053 ;	-----------------------------------------
      00038A                       1054 _dump_peek:
      00038A C0*00            [24] 1055 	push	_bp
      00038C 85 81*00         [24] 1056 	mov	_bp,sp
                                   1057 ;	calc.c:119: struct ctx *ctx = (struct ctx *)_ctx;
                                   1058 ;	calc.c:121: printf((ctx->base == 16l) ? hexP : decP, d);
      00038F 12r00r00         [24] 1059 	lcall	__gptrget
      000392 FD               [12] 1060 	mov	r5,a
      000393 A3               [24] 1061 	inc	dptr
      000394 12r00r00         [24] 1062 	lcall	__gptrget
      000397 FE               [12] 1063 	mov	r6,a
      000398 A3               [24] 1064 	inc	dptr
      000399 12r00r00         [24] 1065 	lcall	__gptrget
      00039C FF               [12] 1066 	mov	r7,a
      00039D A3               [24] 1067 	inc	dptr
      00039E 12r00r00         [24] 1068 	lcall	__gptrget
      0003A1 FC               [12] 1069 	mov	r4,a
      0003A2 BD 10 16         [24] 1070 	cjne	r5,#0x10,00103$
      0003A5 BE 00 13         [24] 1071 	cjne	r6,#0x00,00103$
      0003A8 BF 00 10         [24] 1072 	cjne	r7,#0x00,00103$
      0003AB BC 00 0D         [24] 1073 	cjne	r4,#0x00,00103$
      0003AE 90r00r06         [24] 1074 	mov	dptr,#_hexP
      0003B1 E0               [24] 1075 	movx	a,@dptr
      0003B2 FD               [12] 1076 	mov	r5,a
      0003B3 A3               [24] 1077 	inc	dptr
      0003B4 E0               [24] 1078 	movx	a,@dptr
      0003B5 FE               [12] 1079 	mov	r6,a
      0003B6 A3               [24] 1080 	inc	dptr
      0003B7 E0               [24] 1081 	movx	a,@dptr
      0003B8 FF               [12] 1082 	mov	r7,a
      0003B9 80 0B            [24] 1083 	sjmp	00104$
      0003BB                       1084 00103$:
      0003BB 90r00r09         [24] 1085 	mov	dptr,#_decP
      0003BE E0               [24] 1086 	movx	a,@dptr
      0003BF FD               [12] 1087 	mov	r5,a
      0003C0 A3               [24] 1088 	inc	dptr
      0003C1 E0               [24] 1089 	movx	a,@dptr
      0003C2 FE               [12] 1090 	mov	r6,a
      0003C3 A3               [24] 1091 	inc	dptr
      0003C4 E0               [24] 1092 	movx	a,@dptr
      0003C5 FF               [12] 1093 	mov	r7,a
      0003C6                       1094 00104$:
      0003C6 E5*00            [12] 1095 	mov	a,_bp
      0003C8 24 FA            [12] 1096 	add	a,#0xfa
      0003CA F8               [12] 1097 	mov	r0,a
      0003CB E6               [12] 1098 	mov	a,@r0
      0003CC C0 E0            [24] 1099 	push	acc
      0003CE 08               [12] 1100 	inc	r0
      0003CF E6               [12] 1101 	mov	a,@r0
      0003D0 C0 E0            [24] 1102 	push	acc
      0003D2 08               [12] 1103 	inc	r0
      0003D3 E6               [12] 1104 	mov	a,@r0
      0003D4 C0 E0            [24] 1105 	push	acc
      0003D6 08               [12] 1106 	inc	r0
      0003D7 E6               [12] 1107 	mov	a,@r0
      0003D8 C0 E0            [24] 1108 	push	acc
      0003DA C0 05            [24] 1109 	push	ar5
      0003DC C0 06            [24] 1110 	push	ar6
      0003DE C0 07            [24] 1111 	push	ar7
      0003E0 12r00r00         [24] 1112 	lcall	_printf
      0003E3 E5 81            [12] 1113 	mov	a,sp
      0003E5 24 F9            [12] 1114 	add	a,#0xf9
      0003E7 F5 81            [12] 1115 	mov	sp,a
                                   1116 ;	calc.c:123: return 1;
      0003E9 90 00 01         [24] 1117 	mov	dptr,#0x0001
                                   1118 ;	calc.c:124: }
      0003EC D0*00            [24] 1119 	pop	_bp
      0003EE 22               [24] 1120 	ret
                                   1121 ;------------------------------------------------------------
                                   1122 ;Allocation info for local variables in function 'operator'
                                   1123 ;------------------------------------------------------------
                                   1124 ;delta                     Allocated to stack - _bp -5
                                   1125 ;_ctx                      Allocated to stack - _bp +1
                                   1126 ;ctx                       Allocated to stack - _bp +4
                                   1127 ;d0                        Allocated to stack - _bp +7
                                   1128 ;d1                        Allocated to stack - _bp +11
                                   1129 ;__1966080005              Allocated to registers 
                                   1130 ;s                         Allocated to registers r5 r4 r3 
                                   1131 ;__1966080007              Allocated to registers 
                                   1132 ;s                         Allocated to registers r5 r6 r7 
                                   1133 ;__1966080009              Allocated to registers 
                                   1134 ;s                         Allocated to registers r5 r6 r7 
                                   1135 ;__1966080011              Allocated to registers 
                                   1136 ;s                         Allocated to registers r5 r6 r7 
                                   1137 ;__1966080013              Allocated to registers 
                                   1138 ;s                         Allocated to registers r5 r6 r7 
                                   1139 ;__1966080015              Allocated to registers 
                                   1140 ;s                         Allocated to registers r5 r6 r7 
                                   1141 ;__1966080017              Allocated to registers 
                                   1142 ;s                         Allocated to registers r5 r6 r7 
                                   1143 ;__1966080019              Allocated to registers 
                                   1144 ;s                         Allocated to registers r5 r6 r7 
                                   1145 ;__2621440021              Allocated to registers 
                                   1146 ;s                         Allocated to registers r5 r6 r7 
                                   1147 ;__1966080023              Allocated to registers 
                                   1148 ;s                         Allocated to registers r5 r6 r7 
                                   1149 ;__2621440025              Allocated to registers 
                                   1150 ;s                         Allocated to registers r5 r6 r7 
                                   1151 ;__1966080027              Allocated to registers 
                                   1152 ;s                         Allocated to registers r5 r6 r7 
                                   1153 ;__2621440029              Allocated to registers 
                                   1154 ;s                         Allocated to registers r5 r6 r7 
                                   1155 ;__1966080031              Allocated to registers 
                                   1156 ;s                         Allocated to registers r5 r6 r7 
                                   1157 ;__2621440033              Allocated to registers 
                                   1158 ;s                         Allocated to registers r5 r6 r7 
                                   1159 ;__1966080035              Allocated to registers 
                                   1160 ;s                         Allocated to registers r5 r6 r7 
                                   1161 ;__2621440037              Allocated to registers 
                                   1162 ;s                         Allocated to registers r5 r6 r7 
                                   1163 ;__2621440039              Allocated to registers 
                                   1164 ;s                         Allocated to registers r5 r6 r7 
                                   1165 ;__1966080041              Allocated to registers 
                                   1166 ;s                         Allocated to registers r5 r6 r7 
                                   1167 ;__2621440043              Allocated to registers 
                                   1168 ;s                         Allocated to registers r5 r6 r7 
                                   1169 ;__2621440045              Allocated to registers 
                                   1170 ;s                         Allocated to registers r5 r6 r7 
                                   1171 ;__1966080047              Allocated to registers 
                                   1172 ;s                         Allocated to registers r5 r6 r7 
                                   1173 ;__2621440049              Allocated to registers 
                                   1174 ;s                         Allocated to registers r5 r6 r7 
                                   1175 ;__1966080051              Allocated to registers 
                                   1176 ;s                         Allocated to registers r5 r6 r7 
                                   1177 ;__2621440053              Allocated to registers 
                                   1178 ;s                         Allocated to registers r5 r6 r7 
                                   1179 ;__1966080055              Allocated to registers 
                                   1180 ;s                         Allocated to registers r5 r6 r7 
                                   1181 ;__2621440057              Allocated to registers 
                                   1182 ;s                         Allocated to registers r5 r6 r7 
                                   1183 ;__1966080059              Allocated to registers 
                                   1184 ;s                         Allocated to registers r5 r6 r7 
                                   1185 ;------------------------------------------------------------
                                   1186 ;	calc.c:126: static int operator(void *_ctx, delta_t *delta) __reentrant {
                                   1187 ;	-----------------------------------------
                                   1188 ;	 function operator
                                   1189 ;	-----------------------------------------
      0003EF                       1190 _operator:
      0003EF C0*00            [24] 1191 	push	_bp
      0003F1 85 81*00         [24] 1192 	mov	_bp,sp
      0003F4 C0 82            [24] 1193 	push	dpl
      0003F6 C0 83            [24] 1194 	push	dph
      0003F8 C0 F0            [24] 1195 	push	b
      0003FA E5 81            [12] 1196 	mov	a,sp
      0003FC 24 0B            [12] 1197 	add	a,#0x0b
      0003FE F5 81            [12] 1198 	mov	sp,a
                                   1199 ;	calc.c:127: struct ctx *ctx = (struct ctx *)_ctx;
      000400 A8*00            [24] 1200 	mov	r0,_bp
      000402 08               [12] 1201 	inc	r0
      000403 E5*00            [12] 1202 	mov	a,_bp
      000405 24 04            [12] 1203 	add	a,#0x04
      000407 F9               [12] 1204 	mov	r1,a
      000408 E6               [12] 1205 	mov	a,@r0
      000409 F7               [12] 1206 	mov	@r1,a
      00040A 08               [12] 1207 	inc	r0
      00040B 09               [12] 1208 	inc	r1
      00040C E6               [12] 1209 	mov	a,@r0
      00040D F7               [12] 1210 	mov	@r1,a
      00040E 08               [12] 1211 	inc	r0
      00040F 09               [12] 1212 	inc	r1
      000410 E6               [12] 1213 	mov	a,@r0
      000411 F7               [12] 1214 	mov	@r1,a
                                   1215 ;	calc.c:130: switch (ctx->digit[0]) {
      000412 E5*00            [12] 1216 	mov	a,_bp
      000414 24 04            [12] 1217 	add	a,#0x04
      000416 F8               [12] 1218 	mov	r0,a
      000417 74 09            [12] 1219 	mov	a,#0x09
      000419 26               [12] 1220 	add	a,@r0
      00041A FD               [12] 1221 	mov	r5,a
      00041B E4               [12] 1222 	clr	a
      00041C 08               [12] 1223 	inc	r0
      00041D 36               [12] 1224 	addc	a,@r0
      00041E FE               [12] 1225 	mov	r6,a
      00041F 08               [12] 1226 	inc	r0
      000420 86 07            [24] 1227 	mov	ar7,@r0
      000422 8D 82            [24] 1228 	mov	dpl,r5
      000424 8E 83            [24] 1229 	mov	dph,r6
      000426 8F F0            [24] 1230 	mov	b,r7
      000428 12r00r00         [24] 1231 	lcall	__gptrget
      00042B FF               [12] 1232 	mov	r7,a
      00042C BF 25 03         [24] 1233 	cjne	r7,#0x25,00761$
      00042F 02r0ErA2         [24] 1234 	ljmp	00154$
      000432                       1235 00761$:
      000432 BF 26 03         [24] 1236 	cjne	r7,#0x26,00762$
      000435 02r10rA0         [24] 1237 	ljmp	00164$
      000438                       1238 00762$:
      000438 BF 2A 03         [24] 1239 	cjne	r7,#0x2a,00763$
      00043B 02r0Br42         [24] 1240 	ljmp	00137$
      00043E                       1241 00763$:
      00043E BF 2B 03         [24] 1242 	cjne	r7,#0x2b,00764$
      000441 02r08rCB         [24] 1243 	ljmp	00123$
      000444                       1244 00764$:
      000444 BF 2D 03         [24] 1245 	cjne	r7,#0x2d,00765$
      000447 02r0Ar06         [24] 1246 	ljmp	00130$
      00044A                       1247 00765$:
      00044A BF 2E 03         [24] 1248 	cjne	r7,#0x2e,00766$
      00044D 02r06r49         [24] 1249 	ljmp	00111$
      000450                       1250 00766$:
      000450 BF 2F 03         [24] 1251 	cjne	r7,#0x2f,00767$
      000453 02r0CrA4         [24] 1252 	ljmp	00144$
      000456                       1253 00767$:
      000456 BF 48 02         [24] 1254 	cjne	r7,#0x48,00768$
      000459 80 59            [24] 1255 	sjmp	00102$
      00045B                       1256 00768$:
      00045B BF 50 03         [24] 1257 	cjne	r7,#0x50,00769$
      00045E 02r05rBD         [24] 1258 	ljmp	00107$
      000461                       1259 00769$:
      000461 BF 56 03         [24] 1260 	cjne	r7,#0x56,00770$
      000464 02r07r30         [24] 1261 	ljmp	00115$
      000467                       1262 00770$:
      000467 BF 5E 03         [24] 1263 	cjne	r7,#0x5e,00771$
      00046A 02r13r16         [24] 1264 	ljmp	00178$
      00046D                       1265 00771$:
      00046D BF 68 02         [24] 1266 	cjne	r7,#0x68,00772$
      000470 80 20            [24] 1267 	sjmp	00101$
      000472                       1268 00772$:
      000472 BF 70 02         [24] 1269 	cjne	r7,#0x70,00773$
      000475 80 5F            [24] 1270 	sjmp	00103$
      000477                       1271 00773$:
      000477 BF 76 03         [24] 1272 	cjne	r7,#0x76,00774$
      00047A 02r06r49         [24] 1273 	ljmp	00111$
      00047D                       1274 00774$:
      00047D BF 78 03         [24] 1275 	cjne	r7,#0x78,00775$
      000480 02r07r79         [24] 1276 	ljmp	00116$
      000483                       1277 00775$:
      000483 BF 7C 03         [24] 1278 	cjne	r7,#0x7c,00776$
      000486 02r11rDB         [24] 1279 	ljmp	00171$
      000489                       1280 00776$:
      000489 BF 7E 03         [24] 1281 	cjne	r7,#0x7e,00777$
      00048C 02r14r51         [24] 1282 	ljmp	00185$
      00048F                       1283 00777$:
      00048F 02r14rF2         [24] 1284 	ljmp	00189$
                                   1285 ;	calc.c:131: case 'h':
      000492                       1286 00101$:
                                   1287 ;	calc.c:132: ctx->base = 10l;
      000492 E5*00            [12] 1288 	mov	a,_bp
      000494 24 04            [12] 1289 	add	a,#0x04
      000496 F8               [12] 1290 	mov	r0,a
      000497 86 82            [24] 1291 	mov	dpl,@r0
      000499 08               [12] 1292 	inc	r0
      00049A 86 83            [24] 1293 	mov	dph,@r0
      00049C 08               [12] 1294 	inc	r0
      00049D 86 F0            [24] 1295 	mov	b,@r0
      00049F 74 0A            [12] 1296 	mov	a,#0x0a
      0004A1 12r00r00         [24] 1297 	lcall	__gptrput
      0004A4 A3               [24] 1298 	inc	dptr
      0004A5 E4               [12] 1299 	clr	a
      0004A6 12r00r00         [24] 1300 	lcall	__gptrput
      0004A9 A3               [24] 1301 	inc	dptr
      0004AA 12r00r00         [24] 1302 	lcall	__gptrput
      0004AD A3               [24] 1303 	inc	dptr
      0004AE 12r00r00         [24] 1304 	lcall	__gptrput
                                   1305 ;	calc.c:133: break;
      0004B1 02r14rF7         [24] 1306 	ljmp	00190$
                                   1307 ;	calc.c:134: case 'H':
      0004B4                       1308 00102$:
                                   1309 ;	calc.c:135: ctx->base = 16l;
      0004B4 E5*00            [12] 1310 	mov	a,_bp
      0004B6 24 04            [12] 1311 	add	a,#0x04
      0004B8 F8               [12] 1312 	mov	r0,a
      0004B9 86 82            [24] 1313 	mov	dpl,@r0
      0004BB 08               [12] 1314 	inc	r0
      0004BC 86 83            [24] 1315 	mov	dph,@r0
      0004BE 08               [12] 1316 	inc	r0
      0004BF 86 F0            [24] 1317 	mov	b,@r0
      0004C1 74 10            [12] 1318 	mov	a,#0x10
      0004C3 12r00r00         [24] 1319 	lcall	__gptrput
      0004C6 A3               [24] 1320 	inc	dptr
      0004C7 E4               [12] 1321 	clr	a
      0004C8 12r00r00         [24] 1322 	lcall	__gptrput
      0004CB A3               [24] 1323 	inc	dptr
      0004CC 12r00r00         [24] 1324 	lcall	__gptrput
      0004CF A3               [24] 1325 	inc	dptr
      0004D0 12r00r00         [24] 1326 	lcall	__gptrput
                                   1327 ;	calc.c:136: break;
      0004D3 02r14rF7         [24] 1328 	ljmp	00190$
                                   1329 ;	calc.c:137: case 'p':
      0004D6                       1330 00103$:
                                   1331 ;	calc.c:138: printstr("\r\n");
      0004D6 7Dr00            [12] 1332 	mov	r5,#___str_0
      0004D8 7Cs00            [12] 1333 	mov	r4,#(___str_0 >> 8)
      0004DA 7B 80            [12] 1334 	mov	r3,#0x80
                                   1335 ;	calc.c:50: return;
      0004DC                       1336 00248$:
                                   1337 ;	calc.c:48: for (; *s; s++) putchar(*s);
      0004DC 8D 82            [24] 1338 	mov	dpl,r5
      0004DE 8C 83            [24] 1339 	mov	dph,r4
      0004E0 8B F0            [24] 1340 	mov	b,r3
      0004E2 12r00r00         [24] 1341 	lcall	__gptrget
      0004E5 FF               [12] 1342 	mov	r7,a
      0004E6 60 10            [24] 1343 	jz	00192$
      0004E8 7E 00            [12] 1344 	mov	r6,#0x00
      0004EA 8F 82            [24] 1345 	mov	dpl,r7
      0004EC 8E 83            [24] 1346 	mov	dph,r6
      0004EE 12r00r00         [24] 1347 	lcall	_putchar
      0004F1 0D               [12] 1348 	inc	r5
                                   1349 ;	calc.c:138: printstr("\r\n");
      0004F2 BD 00 E7         [24] 1350 	cjne	r5,#0x00,00248$
      0004F5 0C               [12] 1351 	inc	r4
      0004F6 80 E4            [24] 1352 	sjmp	00248$
      0004F8                       1353 00192$:
                                   1354 ;	calc.c:139: if (!stack_peek(&ctx->s, &d0)) printstr("stack underflow\r\n");
      0004F8 E5*00            [12] 1355 	mov	a,_bp
      0004FA 24 07            [12] 1356 	add	a,#0x07
      0004FC FF               [12] 1357 	mov	r7,a
      0004FD 7E 00            [12] 1358 	mov	r6,#0x00
      0004FF 7D 40            [12] 1359 	mov	r5,#0x40
      000501 E5*00            [12] 1360 	mov	a,_bp
      000503 24 04            [12] 1361 	add	a,#0x04
      000505 F8               [12] 1362 	mov	r0,a
      000506 74 0B            [12] 1363 	mov	a,#0x0b
      000508 26               [12] 1364 	add	a,@r0
      000509 FA               [12] 1365 	mov	r2,a
      00050A E4               [12] 1366 	clr	a
      00050B 08               [12] 1367 	inc	r0
      00050C 36               [12] 1368 	addc	a,@r0
      00050D FB               [12] 1369 	mov	r3,a
      00050E 08               [12] 1370 	inc	r0
      00050F 86 04            [24] 1371 	mov	ar4,@r0
      000511 C0 07            [24] 1372 	push	ar7
      000513 C0 06            [24] 1373 	push	ar6
      000515 C0 05            [24] 1374 	push	ar5
      000517 8A 82            [24] 1375 	mov	dpl,r2
      000519 8B 83            [24] 1376 	mov	dph,r3
      00051B 8C F0            [24] 1377 	mov	b,r4
      00051D 12r00r00         [24] 1378 	lcall	_stack_peek
      000520 AE 82            [24] 1379 	mov	r6,dpl
      000522 AF 83            [24] 1380 	mov	r7,dph
      000524 15 81            [12] 1381 	dec	sp
      000526 15 81            [12] 1382 	dec	sp
      000528 15 81            [12] 1383 	dec	sp
      00052A EE               [12] 1384 	mov	a,r6
      00052B 4F               [12] 1385 	orl	a,r7
      00052C 70 25            [24] 1386 	jnz	00105$
      00052E 7Dr03            [12] 1387 	mov	r5,#___str_1
      000530 7Es00            [12] 1388 	mov	r6,#(___str_1 >> 8)
      000532 7F 80            [12] 1389 	mov	r7,#0x80
                                   1390 ;	calc.c:50: return;
      000534                       1391 00251$:
                                   1392 ;	calc.c:48: for (; *s; s++) putchar(*s);
      000534 8D 82            [24] 1393 	mov	dpl,r5
      000536 8E 83            [24] 1394 	mov	dph,r6
      000538 8F F0            [24] 1395 	mov	b,r7
      00053A 12r00r00         [24] 1396 	lcall	__gptrget
      00053D FC               [12] 1397 	mov	r4,a
      00053E 70 03            [24] 1398 	jnz	00781$
      000540 02r14rF7         [24] 1399 	ljmp	00190$
      000543                       1400 00781$:
      000543 7B 00            [12] 1401 	mov	r3,#0x00
      000545 8C 82            [24] 1402 	mov	dpl,r4
      000547 8B 83            [24] 1403 	mov	dph,r3
      000549 12r00r00         [24] 1404 	lcall	_putchar
      00054C 0D               [12] 1405 	inc	r5
                                   1406 ;	calc.c:139: if (!stack_peek(&ctx->s, &d0)) printstr("stack underflow\r\n");
      00054D BD 00 E4         [24] 1407 	cjne	r5,#0x00,00251$
      000550 0E               [12] 1408 	inc	r6
      000551 80 E1            [24] 1409 	sjmp	00251$
      000553                       1410 00105$:
                                   1411 ;	calc.c:141: printf((ctx->base == 16l) ? hexp : decp, d0);
      000553 E5*00            [12] 1412 	mov	a,_bp
      000555 24 04            [12] 1413 	add	a,#0x04
      000557 F8               [12] 1414 	mov	r0,a
      000558 86 82            [24] 1415 	mov	dpl,@r0
      00055A 08               [12] 1416 	inc	r0
      00055B 86 83            [24] 1417 	mov	dph,@r0
      00055D 08               [12] 1418 	inc	r0
      00055E 86 F0            [24] 1419 	mov	b,@r0
      000560 12r00r00         [24] 1420 	lcall	__gptrget
      000563 FC               [12] 1421 	mov	r4,a
      000564 A3               [24] 1422 	inc	dptr
      000565 12r00r00         [24] 1423 	lcall	__gptrget
      000568 FD               [12] 1424 	mov	r5,a
      000569 A3               [24] 1425 	inc	dptr
      00056A 12r00r00         [24] 1426 	lcall	__gptrget
      00056D FE               [12] 1427 	mov	r6,a
      00056E A3               [24] 1428 	inc	dptr
      00056F 12r00r00         [24] 1429 	lcall	__gptrget
      000572 FF               [12] 1430 	mov	r7,a
      000573 BC 10 16         [24] 1431 	cjne	r4,#0x10,00333$
      000576 BD 00 13         [24] 1432 	cjne	r5,#0x00,00333$
      000579 BE 00 10         [24] 1433 	cjne	r6,#0x00,00333$
      00057C BF 00 0D         [24] 1434 	cjne	r7,#0x00,00333$
      00057F 90r00r00         [24] 1435 	mov	dptr,#_hexp
      000582 E0               [24] 1436 	movx	a,@dptr
      000583 FD               [12] 1437 	mov	r5,a
      000584 A3               [24] 1438 	inc	dptr
      000585 E0               [24] 1439 	movx	a,@dptr
      000586 FE               [12] 1440 	mov	r6,a
      000587 A3               [24] 1441 	inc	dptr
      000588 E0               [24] 1442 	movx	a,@dptr
      000589 FF               [12] 1443 	mov	r7,a
      00058A 80 0B            [24] 1444 	sjmp	00334$
      00058C                       1445 00333$:
      00058C 90r00r03         [24] 1446 	mov	dptr,#_decp
      00058F E0               [24] 1447 	movx	a,@dptr
      000590 FD               [12] 1448 	mov	r5,a
      000591 A3               [24] 1449 	inc	dptr
      000592 E0               [24] 1450 	movx	a,@dptr
      000593 FE               [12] 1451 	mov	r6,a
      000594 A3               [24] 1452 	inc	dptr
      000595 E0               [24] 1453 	movx	a,@dptr
      000596 FF               [12] 1454 	mov	r7,a
      000597                       1455 00334$:
      000597 E5*00            [12] 1456 	mov	a,_bp
      000599 24 07            [12] 1457 	add	a,#0x07
      00059B F8               [12] 1458 	mov	r0,a
      00059C E6               [12] 1459 	mov	a,@r0
      00059D C0 E0            [24] 1460 	push	acc
      00059F 08               [12] 1461 	inc	r0
      0005A0 E6               [12] 1462 	mov	a,@r0
      0005A1 C0 E0            [24] 1463 	push	acc
      0005A3 08               [12] 1464 	inc	r0
      0005A4 E6               [12] 1465 	mov	a,@r0
      0005A5 C0 E0            [24] 1466 	push	acc
      0005A7 08               [12] 1467 	inc	r0
      0005A8 E6               [12] 1468 	mov	a,@r0
      0005A9 C0 E0            [24] 1469 	push	acc
      0005AB C0 05            [24] 1470 	push	ar5
      0005AD C0 06            [24] 1471 	push	ar6
      0005AF C0 07            [24] 1472 	push	ar7
      0005B1 12r00r00         [24] 1473 	lcall	_printf
      0005B4 E5 81            [12] 1474 	mov	a,sp
      0005B6 24 F9            [12] 1475 	add	a,#0xf9
      0005B8 F5 81            [12] 1476 	mov	sp,a
                                   1477 ;	calc.c:143: break;
      0005BA 02r14rF7         [24] 1478 	ljmp	00190$
                                   1479 ;	calc.c:144: case 'P':
      0005BD                       1480 00107$:
                                   1481 ;	calc.c:145: printstr("\r\n");
      0005BD 7Dr00            [12] 1482 	mov	r5,#___str_0
      0005BF 7Es00            [12] 1483 	mov	r6,#(___str_0 >> 8)
      0005C1 7F 80            [12] 1484 	mov	r7,#0x80
                                   1485 ;	calc.c:50: return;
      0005C3                       1486 00254$:
                                   1487 ;	calc.c:48: for (; *s; s++) putchar(*s);
      0005C3 8D 82            [24] 1488 	mov	dpl,r5
      0005C5 8E 83            [24] 1489 	mov	dph,r6
      0005C7 8F F0            [24] 1490 	mov	b,r7
      0005C9 12r00r00         [24] 1491 	lcall	__gptrget
      0005CC FC               [12] 1492 	mov	r4,a
      0005CD 60 10            [24] 1493 	jz	00196$
      0005CF 7B 00            [12] 1494 	mov	r3,#0x00
      0005D1 8C 82            [24] 1495 	mov	dpl,r4
      0005D3 8B 83            [24] 1496 	mov	dph,r3
      0005D5 12r00r00         [24] 1497 	lcall	_putchar
      0005D8 0D               [12] 1498 	inc	r5
                                   1499 ;	calc.c:145: printstr("\r\n");
      0005D9 BD 00 E7         [24] 1500 	cjne	r5,#0x00,00254$
      0005DC 0E               [12] 1501 	inc	r6
      0005DD 80 E4            [24] 1502 	sjmp	00254$
      0005DF                       1503 00196$:
                                   1504 ;	calc.c:146: if (!stack_iter_peek(&ctx->s, dump_peek, ctx)) printstr("stack underflow\r\n");
      0005DF E5*00            [12] 1505 	mov	a,_bp
      0005E1 24 04            [12] 1506 	add	a,#0x04
      0005E3 F8               [12] 1507 	mov	r0,a
      0005E4 86 02            [24] 1508 	mov	ar2,@r0
      0005E6 08               [12] 1509 	inc	r0
      0005E7 86 03            [24] 1510 	mov	ar3,@r0
      0005E9 08               [12] 1511 	inc	r0
      0005EA 86 04            [24] 1512 	mov	ar4,@r0
      0005EC E5*00            [12] 1513 	mov	a,_bp
      0005EE 24 04            [12] 1514 	add	a,#0x04
      0005F0 F8               [12] 1515 	mov	r0,a
      0005F1 74 0B            [12] 1516 	mov	a,#0x0b
      0005F3 26               [12] 1517 	add	a,@r0
      0005F4 FD               [12] 1518 	mov	r5,a
      0005F5 E4               [12] 1519 	clr	a
      0005F6 08               [12] 1520 	inc	r0
      0005F7 36               [12] 1521 	addc	a,@r0
      0005F8 FE               [12] 1522 	mov	r6,a
      0005F9 08               [12] 1523 	inc	r0
      0005FA 86 07            [24] 1524 	mov	ar7,@r0
      0005FC C0 02            [24] 1525 	push	ar2
      0005FE C0 03            [24] 1526 	push	ar3
      000600 C0 04            [24] 1527 	push	ar4
      000602 74r8A            [12] 1528 	mov	a,#_dump_peek
      000604 C0 E0            [24] 1529 	push	acc
      000606 74s03            [12] 1530 	mov	a,#(_dump_peek >> 8)
      000608 C0 E0            [24] 1531 	push	acc
      00060A 8D 82            [24] 1532 	mov	dpl,r5
      00060C 8E 83            [24] 1533 	mov	dph,r6
      00060E 8F F0            [24] 1534 	mov	b,r7
      000610 12r00r00         [24] 1535 	lcall	_stack_iter_peek
      000613 AE 82            [24] 1536 	mov	r6,dpl
      000615 AF 83            [24] 1537 	mov	r7,dph
      000617 E5 81            [12] 1538 	mov	a,sp
      000619 24 FB            [12] 1539 	add	a,#0xfb
      00061B F5 81            [12] 1540 	mov	sp,a
      00061D EE               [12] 1541 	mov	a,r6
      00061E 4F               [12] 1542 	orl	a,r7
      00061F 60 03            [24] 1543 	jz	00787$
      000621 02r14rF7         [24] 1544 	ljmp	00190$
      000624                       1545 00787$:
      000624 7Dr03            [12] 1546 	mov	r5,#___str_1
      000626 7Es00            [12] 1547 	mov	r6,#(___str_1 >> 8)
      000628 7F 80            [12] 1548 	mov	r7,#0x80
                                   1549 ;	calc.c:50: return;
      00062A                       1550 00257$:
                                   1551 ;	calc.c:48: for (; *s; s++) putchar(*s);
      00062A 8D 82            [24] 1552 	mov	dpl,r5
      00062C 8E 83            [24] 1553 	mov	dph,r6
      00062E 8F F0            [24] 1554 	mov	b,r7
      000630 12r00r00         [24] 1555 	lcall	__gptrget
      000633 FC               [12] 1556 	mov	r4,a
      000634 70 03            [24] 1557 	jnz	00788$
      000636 02r14rF7         [24] 1558 	ljmp	00190$
      000639                       1559 00788$:
      000639 7B 00            [12] 1560 	mov	r3,#0x00
      00063B 8C 82            [24] 1561 	mov	dpl,r4
      00063D 8B 83            [24] 1562 	mov	dph,r3
      00063F 12r00r00         [24] 1563 	lcall	_putchar
      000642 0D               [12] 1564 	inc	r5
                                   1565 ;	calc.c:149: case 'v':
      000643 BD 00 E4         [24] 1566 	cjne	r5,#0x00,00257$
      000646 0E               [12] 1567 	inc	r6
      000647 80 E1            [24] 1568 	sjmp	00257$
      000649                       1569 00111$:
                                   1570 ;	calc.c:150: printstr("\r\n");
      000649 7Dr00            [12] 1571 	mov	r5,#___str_0
      00064B 7Es00            [12] 1572 	mov	r6,#(___str_0 >> 8)
      00064D 7F 80            [12] 1573 	mov	r7,#0x80
                                   1574 ;	calc.c:50: return;
      00064F                       1575 00260$:
                                   1576 ;	calc.c:48: for (; *s; s++) putchar(*s);
      00064F 8D 82            [24] 1577 	mov	dpl,r5
      000651 8E 83            [24] 1578 	mov	dph,r6
      000653 8F F0            [24] 1579 	mov	b,r7
      000655 12r00r00         [24] 1580 	lcall	__gptrget
      000658 FC               [12] 1581 	mov	r4,a
      000659 60 10            [24] 1582 	jz	00200$
      00065B 7B 00            [12] 1583 	mov	r3,#0x00
      00065D 8C 82            [24] 1584 	mov	dpl,r4
      00065F 8B 83            [24] 1585 	mov	dph,r3
      000661 12r00r00         [24] 1586 	lcall	_putchar
      000664 0D               [12] 1587 	inc	r5
                                   1588 ;	calc.c:150: printstr("\r\n");
      000665 BD 00 E7         [24] 1589 	cjne	r5,#0x00,00260$
      000668 0E               [12] 1590 	inc	r6
      000669 80 E4            [24] 1591 	sjmp	00260$
      00066B                       1592 00200$:
                                   1593 ;	calc.c:151: if (!stack_pop(&ctx->s, &d0)) printstr("stack underflow\r\n");
      00066B E5*00            [12] 1594 	mov	a,_bp
      00066D 24 07            [12] 1595 	add	a,#0x07
      00066F FF               [12] 1596 	mov	r7,a
      000670 7E 00            [12] 1597 	mov	r6,#0x00
      000672 7D 40            [12] 1598 	mov	r5,#0x40
      000674 E5*00            [12] 1599 	mov	a,_bp
      000676 24 04            [12] 1600 	add	a,#0x04
      000678 F8               [12] 1601 	mov	r0,a
      000679 74 0B            [12] 1602 	mov	a,#0x0b
      00067B 26               [12] 1603 	add	a,@r0
      00067C FA               [12] 1604 	mov	r2,a
      00067D E4               [12] 1605 	clr	a
      00067E 08               [12] 1606 	inc	r0
      00067F 36               [12] 1607 	addc	a,@r0
      000680 FB               [12] 1608 	mov	r3,a
      000681 08               [12] 1609 	inc	r0
      000682 86 04            [24] 1610 	mov	ar4,@r0
      000684 C0 07            [24] 1611 	push	ar7
      000686 C0 06            [24] 1612 	push	ar6
      000688 C0 05            [24] 1613 	push	ar5
      00068A 8A 82            [24] 1614 	mov	dpl,r2
      00068C 8B 83            [24] 1615 	mov	dph,r3
      00068E 8C F0            [24] 1616 	mov	b,r4
      000690 12r00r00         [24] 1617 	lcall	_stack_pop
      000693 AE 82            [24] 1618 	mov	r6,dpl
      000695 AF 83            [24] 1619 	mov	r7,dph
      000697 15 81            [12] 1620 	dec	sp
      000699 15 81            [12] 1621 	dec	sp
      00069B 15 81            [12] 1622 	dec	sp
      00069D EE               [12] 1623 	mov	a,r6
      00069E 4F               [12] 1624 	orl	a,r7
      00069F 70 25            [24] 1625 	jnz	00113$
      0006A1 7Dr03            [12] 1626 	mov	r5,#___str_1
      0006A3 7Es00            [12] 1627 	mov	r6,#(___str_1 >> 8)
      0006A5 7F 80            [12] 1628 	mov	r7,#0x80
                                   1629 ;	calc.c:50: return;
      0006A7                       1630 00263$:
                                   1631 ;	calc.c:48: for (; *s; s++) putchar(*s);
      0006A7 8D 82            [24] 1632 	mov	dpl,r5
      0006A9 8E 83            [24] 1633 	mov	dph,r6
      0006AB 8F F0            [24] 1634 	mov	b,r7
      0006AD 12r00r00         [24] 1635 	lcall	__gptrget
      0006B0 FC               [12] 1636 	mov	r4,a
      0006B1 70 03            [24] 1637 	jnz	00793$
      0006B3 02r14rF7         [24] 1638 	ljmp	00190$
      0006B6                       1639 00793$:
      0006B6 7B 00            [12] 1640 	mov	r3,#0x00
      0006B8 8C 82            [24] 1641 	mov	dpl,r4
      0006BA 8B 83            [24] 1642 	mov	dph,r3
      0006BC 12r00r00         [24] 1643 	lcall	_putchar
      0006BF 0D               [12] 1644 	inc	r5
                                   1645 ;	calc.c:151: if (!stack_pop(&ctx->s, &d0)) printstr("stack underflow\r\n");
      0006C0 BD 00 E4         [24] 1646 	cjne	r5,#0x00,00263$
      0006C3 0E               [12] 1647 	inc	r6
      0006C4 80 E1            [24] 1648 	sjmp	00263$
      0006C6                       1649 00113$:
                                   1650 ;	calc.c:152: else printf((ctx->base == 16l) ? hexv : decv, d0);
      0006C6 E5*00            [12] 1651 	mov	a,_bp
      0006C8 24 04            [12] 1652 	add	a,#0x04
      0006CA F8               [12] 1653 	mov	r0,a
      0006CB 86 82            [24] 1654 	mov	dpl,@r0
      0006CD 08               [12] 1655 	inc	r0
      0006CE 86 83            [24] 1656 	mov	dph,@r0
      0006D0 08               [12] 1657 	inc	r0
      0006D1 86 F0            [24] 1658 	mov	b,@r0
      0006D3 12r00r00         [24] 1659 	lcall	__gptrget
      0006D6 FC               [12] 1660 	mov	r4,a
      0006D7 A3               [24] 1661 	inc	dptr
      0006D8 12r00r00         [24] 1662 	lcall	__gptrget
      0006DB FD               [12] 1663 	mov	r5,a
      0006DC A3               [24] 1664 	inc	dptr
      0006DD 12r00r00         [24] 1665 	lcall	__gptrget
      0006E0 FE               [12] 1666 	mov	r6,a
      0006E1 A3               [24] 1667 	inc	dptr
      0006E2 12r00r00         [24] 1668 	lcall	__gptrget
      0006E5 FF               [12] 1669 	mov	r7,a
      0006E6 BC 10 16         [24] 1670 	cjne	r4,#0x10,00335$
      0006E9 BD 00 13         [24] 1671 	cjne	r5,#0x00,00335$
      0006EC BE 00 10         [24] 1672 	cjne	r6,#0x00,00335$
      0006EF BF 00 0D         [24] 1673 	cjne	r7,#0x00,00335$
      0006F2 90r00r0C         [24] 1674 	mov	dptr,#_hexv
      0006F5 E0               [24] 1675 	movx	a,@dptr
      0006F6 FD               [12] 1676 	mov	r5,a
      0006F7 A3               [24] 1677 	inc	dptr
      0006F8 E0               [24] 1678 	movx	a,@dptr
      0006F9 FE               [12] 1679 	mov	r6,a
      0006FA A3               [24] 1680 	inc	dptr
      0006FB E0               [24] 1681 	movx	a,@dptr
      0006FC FF               [12] 1682 	mov	r7,a
      0006FD 80 0B            [24] 1683 	sjmp	00336$
      0006FF                       1684 00335$:
      0006FF 90r00r0F         [24] 1685 	mov	dptr,#_decv
      000702 E0               [24] 1686 	movx	a,@dptr
      000703 FD               [12] 1687 	mov	r5,a
      000704 A3               [24] 1688 	inc	dptr
      000705 E0               [24] 1689 	movx	a,@dptr
      000706 FE               [12] 1690 	mov	r6,a
      000707 A3               [24] 1691 	inc	dptr
      000708 E0               [24] 1692 	movx	a,@dptr
      000709 FF               [12] 1693 	mov	r7,a
      00070A                       1694 00336$:
      00070A E5*00            [12] 1695 	mov	a,_bp
      00070C 24 07            [12] 1696 	add	a,#0x07
      00070E F8               [12] 1697 	mov	r0,a
      00070F E6               [12] 1698 	mov	a,@r0
      000710 C0 E0            [24] 1699 	push	acc
      000712 08               [12] 1700 	inc	r0
      000713 E6               [12] 1701 	mov	a,@r0
      000714 C0 E0            [24] 1702 	push	acc
      000716 08               [12] 1703 	inc	r0
      000717 E6               [12] 1704 	mov	a,@r0
      000718 C0 E0            [24] 1705 	push	acc
      00071A 08               [12] 1706 	inc	r0
      00071B E6               [12] 1707 	mov	a,@r0
      00071C C0 E0            [24] 1708 	push	acc
      00071E C0 05            [24] 1709 	push	ar5
      000720 C0 06            [24] 1710 	push	ar6
      000722 C0 07            [24] 1711 	push	ar7
      000724 12r00r00         [24] 1712 	lcall	_printf
      000727 E5 81            [12] 1713 	mov	a,sp
      000729 24 F9            [12] 1714 	add	a,#0xf9
      00072B F5 81            [12] 1715 	mov	sp,a
                                   1716 ;	calc.c:153: break;
      00072D 02r14rF7         [24] 1717 	ljmp	00190$
                                   1718 ;	calc.c:154: case 'V':
      000730                       1719 00115$:
                                   1720 ;	calc.c:155: printstr("\r\n");
      000730 7Dr00            [12] 1721 	mov	r5,#___str_0
      000732 7Es00            [12] 1722 	mov	r6,#(___str_0 >> 8)
      000734 7F 80            [12] 1723 	mov	r7,#0x80
                                   1724 ;	calc.c:50: return;
      000736                       1725 00266$:
                                   1726 ;	calc.c:48: for (; *s; s++) putchar(*s);
      000736 8D 82            [24] 1727 	mov	dpl,r5
      000738 8E 83            [24] 1728 	mov	dph,r6
      00073A 8F F0            [24] 1729 	mov	b,r7
      00073C 12r00r00         [24] 1730 	lcall	__gptrget
      00073F FC               [12] 1731 	mov	r4,a
      000740 60 10            [24] 1732 	jz	00204$
      000742 7B 00            [12] 1733 	mov	r3,#0x00
      000744 8C 82            [24] 1734 	mov	dpl,r4
      000746 8B 83            [24] 1735 	mov	dph,r3
      000748 12r00r00         [24] 1736 	lcall	_putchar
      00074B 0D               [12] 1737 	inc	r5
                                   1738 ;	calc.c:155: printstr("\r\n");
      00074C BD 00 E7         [24] 1739 	cjne	r5,#0x00,00266$
      00074F 0E               [12] 1740 	inc	r6
      000750 80 E4            [24] 1741 	sjmp	00266$
      000752                       1742 00204$:
                                   1743 ;	calc.c:156: (void)dump_pop(_ctx, delta);
      000752 E5*00            [12] 1744 	mov	a,_bp
      000754 24 FB            [12] 1745 	add	a,#0xfb
      000756 F8               [12] 1746 	mov	r0,a
      000757 E6               [12] 1747 	mov	a,@r0
      000758 C0 E0            [24] 1748 	push	acc
      00075A 08               [12] 1749 	inc	r0
      00075B E6               [12] 1750 	mov	a,@r0
      00075C C0 E0            [24] 1751 	push	acc
      00075E 08               [12] 1752 	inc	r0
      00075F E6               [12] 1753 	mov	a,@r0
      000760 C0 E0            [24] 1754 	push	acc
      000762 A8*00            [24] 1755 	mov	r0,_bp
      000764 08               [12] 1756 	inc	r0
      000765 86 82            [24] 1757 	mov	dpl,@r0
      000767 08               [12] 1758 	inc	r0
      000768 86 83            [24] 1759 	mov	dph,@r0
      00076A 08               [12] 1760 	inc	r0
      00076B 86 F0            [24] 1761 	mov	b,@r0
      00076D 12r01r98         [24] 1762 	lcall	_dump_pop
      000770 15 81            [12] 1763 	dec	sp
      000772 15 81            [12] 1764 	dec	sp
      000774 15 81            [12] 1765 	dec	sp
                                   1766 ;	calc.c:157: break;
      000776 02r14rF7         [24] 1767 	ljmp	00190$
                                   1768 ;	calc.c:158: case 'x':
      000779                       1769 00116$:
                                   1770 ;	calc.c:159: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      000779 E5*00            [12] 1771 	mov	a,_bp
      00077B 24 07            [12] 1772 	add	a,#0x07
      00077D FF               [12] 1773 	mov	r7,a
      00077E 7E 00            [12] 1774 	mov	r6,#0x00
      000780 7D 40            [12] 1775 	mov	r5,#0x40
      000782 E5*00            [12] 1776 	mov	a,_bp
      000784 24 04            [12] 1777 	add	a,#0x04
      000786 F8               [12] 1778 	mov	r0,a
      000787 74 0B            [12] 1779 	mov	a,#0x0b
      000789 26               [12] 1780 	add	a,@r0
      00078A FA               [12] 1781 	mov	r2,a
      00078B E4               [12] 1782 	clr	a
      00078C 08               [12] 1783 	inc	r0
      00078D 36               [12] 1784 	addc	a,@r0
      00078E FB               [12] 1785 	mov	r3,a
      00078F 08               [12] 1786 	inc	r0
      000790 86 04            [24] 1787 	mov	ar4,@r0
      000792 C0 07            [24] 1788 	push	ar7
      000794 C0 06            [24] 1789 	push	ar6
      000796 C0 05            [24] 1790 	push	ar5
      000798 8A 82            [24] 1791 	mov	dpl,r2
      00079A 8B 83            [24] 1792 	mov	dph,r3
      00079C 8C F0            [24] 1793 	mov	b,r4
      00079E 12r00r00         [24] 1794 	lcall	_stack_pop
      0007A1 AE 82            [24] 1795 	mov	r6,dpl
      0007A3 AF 83            [24] 1796 	mov	r7,dph
      0007A5 15 81            [12] 1797 	dec	sp
      0007A7 15 81            [12] 1798 	dec	sp
      0007A9 15 81            [12] 1799 	dec	sp
      0007AB EE               [12] 1800 	mov	a,r6
      0007AC 4F               [12] 1801 	orl	a,r7
      0007AD 70 25            [24] 1802 	jnz	00121$
      0007AF 7Dr15            [12] 1803 	mov	r5,#___str_2
      0007B1 7Es00            [12] 1804 	mov	r6,#(___str_2 >> 8)
      0007B3 7F 80            [12] 1805 	mov	r7,#0x80
                                   1806 ;	calc.c:50: return;
      0007B5                       1807 00269$:
                                   1808 ;	calc.c:48: for (; *s; s++) putchar(*s);
      0007B5 8D 82            [24] 1809 	mov	dpl,r5
      0007B7 8E 83            [24] 1810 	mov	dph,r6
      0007B9 8F F0            [24] 1811 	mov	b,r7
      0007BB 12r00r00         [24] 1812 	lcall	__gptrget
      0007BE FC               [12] 1813 	mov	r4,a
      0007BF 70 03            [24] 1814 	jnz	00800$
      0007C1 02r14rF7         [24] 1815 	ljmp	00190$
      0007C4                       1816 00800$:
      0007C4 7B 00            [12] 1817 	mov	r3,#0x00
      0007C6 8C 82            [24] 1818 	mov	dpl,r4
      0007C8 8B 83            [24] 1819 	mov	dph,r3
      0007CA 12r00r00         [24] 1820 	lcall	_putchar
      0007CD 0D               [12] 1821 	inc	r5
                                   1822 ;	calc.c:159: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      0007CE BD 00 E4         [24] 1823 	cjne	r5,#0x00,00269$
      0007D1 0E               [12] 1824 	inc	r6
      0007D2 80 E1            [24] 1825 	sjmp	00269$
      0007D4                       1826 00121$:
                                   1827 ;	calc.c:160: else if (!stack_pop(&ctx->s, &d1)) {
      0007D4 E5*00            [12] 1828 	mov	a,_bp
      0007D6 24 0B            [12] 1829 	add	a,#0x0b
      0007D8 FF               [12] 1830 	mov	r7,a
      0007D9 7E 00            [12] 1831 	mov	r6,#0x00
      0007DB 7D 40            [12] 1832 	mov	r5,#0x40
      0007DD E5*00            [12] 1833 	mov	a,_bp
      0007DF 24 04            [12] 1834 	add	a,#0x04
      0007E1 F8               [12] 1835 	mov	r0,a
      0007E2 74 0B            [12] 1836 	mov	a,#0x0b
      0007E4 26               [12] 1837 	add	a,@r0
      0007E5 FA               [12] 1838 	mov	r2,a
      0007E6 E4               [12] 1839 	clr	a
      0007E7 08               [12] 1840 	inc	r0
      0007E8 36               [12] 1841 	addc	a,@r0
      0007E9 FB               [12] 1842 	mov	r3,a
      0007EA 08               [12] 1843 	inc	r0
      0007EB 86 04            [24] 1844 	mov	ar4,@r0
      0007ED C0 07            [24] 1845 	push	ar7
      0007EF C0 06            [24] 1846 	push	ar6
      0007F1 C0 05            [24] 1847 	push	ar5
      0007F3 8A 82            [24] 1848 	mov	dpl,r2
      0007F5 8B 83            [24] 1849 	mov	dph,r3
      0007F7 8C F0            [24] 1850 	mov	b,r4
      0007F9 12r00r00         [24] 1851 	lcall	_stack_pop
      0007FC AE 82            [24] 1852 	mov	r6,dpl
      0007FE AF 83            [24] 1853 	mov	r7,dph
      000800 15 81            [12] 1854 	dec	sp
      000802 15 81            [12] 1855 	dec	sp
      000804 15 81            [12] 1856 	dec	sp
      000806 EE               [12] 1857 	mov	a,r6
      000807 4F               [12] 1858 	orl	a,r7
      000808 70 58            [24] 1859 	jnz	00118$
                                   1860 ;	calc.c:161: (void)stack_push(&ctx->s, d0);
      00080A E5*00            [12] 1861 	mov	a,_bp
      00080C 24 04            [12] 1862 	add	a,#0x04
      00080E F8               [12] 1863 	mov	r0,a
      00080F 74 0B            [12] 1864 	mov	a,#0x0b
      000811 26               [12] 1865 	add	a,@r0
      000812 FD               [12] 1866 	mov	r5,a
      000813 E4               [12] 1867 	clr	a
      000814 08               [12] 1868 	inc	r0
      000815 36               [12] 1869 	addc	a,@r0
      000816 FE               [12] 1870 	mov	r6,a
      000817 08               [12] 1871 	inc	r0
      000818 86 07            [24] 1872 	mov	ar7,@r0
      00081A E5*00            [12] 1873 	mov	a,_bp
      00081C 24 07            [12] 1874 	add	a,#0x07
      00081E F8               [12] 1875 	mov	r0,a
      00081F E6               [12] 1876 	mov	a,@r0
      000820 C0 E0            [24] 1877 	push	acc
      000822 08               [12] 1878 	inc	r0
      000823 E6               [12] 1879 	mov	a,@r0
      000824 C0 E0            [24] 1880 	push	acc
      000826 08               [12] 1881 	inc	r0
      000827 E6               [12] 1882 	mov	a,@r0
      000828 C0 E0            [24] 1883 	push	acc
      00082A 08               [12] 1884 	inc	r0
      00082B E6               [12] 1885 	mov	a,@r0
      00082C C0 E0            [24] 1886 	push	acc
      00082E 8D 82            [24] 1887 	mov	dpl,r5
      000830 8E 83            [24] 1888 	mov	dph,r6
      000832 8F F0            [24] 1889 	mov	b,r7
      000834 12r00r00         [24] 1890 	lcall	_stack_push
      000837 E5 81            [12] 1891 	mov	a,sp
      000839 24 FC            [12] 1892 	add	a,#0xfc
      00083B F5 81            [12] 1893 	mov	sp,a
                                   1894 ;	calc.c:162: printstr("\r\nstack underflow\r\n");
      00083D 7Dr15            [12] 1895 	mov	r5,#___str_2
      00083F 7Es00            [12] 1896 	mov	r6,#(___str_2 >> 8)
      000841 7F 80            [12] 1897 	mov	r7,#0x80
                                   1898 ;	calc.c:50: return;
      000843                       1899 00272$:
                                   1900 ;	calc.c:48: for (; *s; s++) putchar(*s);
      000843 8D 82            [24] 1901 	mov	dpl,r5
      000845 8E 83            [24] 1902 	mov	dph,r6
      000847 8F F0            [24] 1903 	mov	b,r7
      000849 12r00r00         [24] 1904 	lcall	__gptrget
      00084C FC               [12] 1905 	mov	r4,a
      00084D 70 03            [24] 1906 	jnz	00803$
      00084F 02r14rF7         [24] 1907 	ljmp	00190$
      000852                       1908 00803$:
      000852 7B 00            [12] 1909 	mov	r3,#0x00
      000854 8C 82            [24] 1910 	mov	dpl,r4
      000856 8B 83            [24] 1911 	mov	dph,r3
      000858 12r00r00         [24] 1912 	lcall	_putchar
      00085B 0D               [12] 1913 	inc	r5
                                   1914 ;	calc.c:162: printstr("\r\nstack underflow\r\n");
      00085C BD 00 E4         [24] 1915 	cjne	r5,#0x00,00272$
      00085F 0E               [12] 1916 	inc	r6
      000860 80 E1            [24] 1917 	sjmp	00272$
      000862                       1918 00118$:
                                   1919 ;	calc.c:164: (void)stack_push(&ctx->s, d0);
      000862 E5*00            [12] 1920 	mov	a,_bp
      000864 24 04            [12] 1921 	add	a,#0x04
      000866 F8               [12] 1922 	mov	r0,a
      000867 74 0B            [12] 1923 	mov	a,#0x0b
      000869 26               [12] 1924 	add	a,@r0
      00086A FD               [12] 1925 	mov	r5,a
      00086B E4               [12] 1926 	clr	a
      00086C 08               [12] 1927 	inc	r0
      00086D 36               [12] 1928 	addc	a,@r0
      00086E FE               [12] 1929 	mov	r6,a
      00086F 08               [12] 1930 	inc	r0
      000870 86 07            [24] 1931 	mov	ar7,@r0
      000872 E5*00            [12] 1932 	mov	a,_bp
      000874 24 07            [12] 1933 	add	a,#0x07
      000876 F8               [12] 1934 	mov	r0,a
      000877 E6               [12] 1935 	mov	a,@r0
      000878 C0 E0            [24] 1936 	push	acc
      00087A 08               [12] 1937 	inc	r0
      00087B E6               [12] 1938 	mov	a,@r0
      00087C C0 E0            [24] 1939 	push	acc
      00087E 08               [12] 1940 	inc	r0
      00087F E6               [12] 1941 	mov	a,@r0
      000880 C0 E0            [24] 1942 	push	acc
      000882 08               [12] 1943 	inc	r0
      000883 E6               [12] 1944 	mov	a,@r0
      000884 C0 E0            [24] 1945 	push	acc
      000886 8D 82            [24] 1946 	mov	dpl,r5
      000888 8E 83            [24] 1947 	mov	dph,r6
      00088A 8F F0            [24] 1948 	mov	b,r7
      00088C 12r00r00         [24] 1949 	lcall	_stack_push
      00088F E5 81            [12] 1950 	mov	a,sp
      000891 24 FC            [12] 1951 	add	a,#0xfc
      000893 F5 81            [12] 1952 	mov	sp,a
                                   1953 ;	calc.c:165: (void)stack_push(&ctx->s, d1);
      000895 E5*00            [12] 1954 	mov	a,_bp
      000897 24 04            [12] 1955 	add	a,#0x04
      000899 F8               [12] 1956 	mov	r0,a
      00089A 74 0B            [12] 1957 	mov	a,#0x0b
      00089C 26               [12] 1958 	add	a,@r0
      00089D FD               [12] 1959 	mov	r5,a
      00089E E4               [12] 1960 	clr	a
      00089F 08               [12] 1961 	inc	r0
      0008A0 36               [12] 1962 	addc	a,@r0
      0008A1 FE               [12] 1963 	mov	r6,a
      0008A2 08               [12] 1964 	inc	r0
      0008A3 86 07            [24] 1965 	mov	ar7,@r0
      0008A5 E5*00            [12] 1966 	mov	a,_bp
      0008A7 24 0B            [12] 1967 	add	a,#0x0b
      0008A9 F8               [12] 1968 	mov	r0,a
      0008AA E6               [12] 1969 	mov	a,@r0
      0008AB C0 E0            [24] 1970 	push	acc
      0008AD 08               [12] 1971 	inc	r0
      0008AE E6               [12] 1972 	mov	a,@r0
      0008AF C0 E0            [24] 1973 	push	acc
      0008B1 08               [12] 1974 	inc	r0
      0008B2 E6               [12] 1975 	mov	a,@r0
      0008B3 C0 E0            [24] 1976 	push	acc
      0008B5 08               [12] 1977 	inc	r0
      0008B6 E6               [12] 1978 	mov	a,@r0
      0008B7 C0 E0            [24] 1979 	push	acc
      0008B9 8D 82            [24] 1980 	mov	dpl,r5
      0008BB 8E 83            [24] 1981 	mov	dph,r6
      0008BD 8F F0            [24] 1982 	mov	b,r7
      0008BF 12r00r00         [24] 1983 	lcall	_stack_push
      0008C2 E5 81            [12] 1984 	mov	a,sp
      0008C4 24 FC            [12] 1985 	add	a,#0xfc
      0008C6 F5 81            [12] 1986 	mov	sp,a
                                   1987 ;	calc.c:167: break;
      0008C8 02r14rF7         [24] 1988 	ljmp	00190$
                                   1989 ;	calc.c:168: case '+':
      0008CB                       1990 00123$:
                                   1991 ;	calc.c:169: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      0008CB E5*00            [12] 1992 	mov	a,_bp
      0008CD 24 07            [12] 1993 	add	a,#0x07
      0008CF FF               [12] 1994 	mov	r7,a
      0008D0 7E 00            [12] 1995 	mov	r6,#0x00
      0008D2 7D 40            [12] 1996 	mov	r5,#0x40
      0008D4 E5*00            [12] 1997 	mov	a,_bp
      0008D6 24 04            [12] 1998 	add	a,#0x04
      0008D8 F8               [12] 1999 	mov	r0,a
      0008D9 74 0B            [12] 2000 	mov	a,#0x0b
      0008DB 26               [12] 2001 	add	a,@r0
      0008DC FA               [12] 2002 	mov	r2,a
      0008DD E4               [12] 2003 	clr	a
      0008DE 08               [12] 2004 	inc	r0
      0008DF 36               [12] 2005 	addc	a,@r0
      0008E0 FB               [12] 2006 	mov	r3,a
      0008E1 08               [12] 2007 	inc	r0
      0008E2 86 04            [24] 2008 	mov	ar4,@r0
      0008E4 C0 07            [24] 2009 	push	ar7
      0008E6 C0 06            [24] 2010 	push	ar6
      0008E8 C0 05            [24] 2011 	push	ar5
      0008EA 8A 82            [24] 2012 	mov	dpl,r2
      0008EC 8B 83            [24] 2013 	mov	dph,r3
      0008EE 8C F0            [24] 2014 	mov	b,r4
      0008F0 12r00r00         [24] 2015 	lcall	_stack_pop
      0008F3 AE 82            [24] 2016 	mov	r6,dpl
      0008F5 AF 83            [24] 2017 	mov	r7,dph
      0008F7 15 81            [12] 2018 	dec	sp
      0008F9 15 81            [12] 2019 	dec	sp
      0008FB 15 81            [12] 2020 	dec	sp
      0008FD EE               [12] 2021 	mov	a,r6
      0008FE 4F               [12] 2022 	orl	a,r7
      0008FF 70 25            [24] 2023 	jnz	00128$
      000901 7Dr15            [12] 2024 	mov	r5,#___str_2
      000903 7Es00            [12] 2025 	mov	r6,#(___str_2 >> 8)
      000905 7F 80            [12] 2026 	mov	r7,#0x80
                                   2027 ;	calc.c:50: return;
      000907                       2028 00275$:
                                   2029 ;	calc.c:48: for (; *s; s++) putchar(*s);
      000907 8D 82            [24] 2030 	mov	dpl,r5
      000909 8E 83            [24] 2031 	mov	dph,r6
      00090B 8F F0            [24] 2032 	mov	b,r7
      00090D 12r00r00         [24] 2033 	lcall	__gptrget
      000910 FC               [12] 2034 	mov	r4,a
      000911 70 03            [24] 2035 	jnz	00806$
      000913 02r14rF7         [24] 2036 	ljmp	00190$
      000916                       2037 00806$:
      000916 7B 00            [12] 2038 	mov	r3,#0x00
      000918 8C 82            [24] 2039 	mov	dpl,r4
      00091A 8B 83            [24] 2040 	mov	dph,r3
      00091C 12r00r00         [24] 2041 	lcall	_putchar
      00091F 0D               [12] 2042 	inc	r5
                                   2043 ;	calc.c:169: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      000920 BD 00 E4         [24] 2044 	cjne	r5,#0x00,00275$
      000923 0E               [12] 2045 	inc	r6
      000924 80 E1            [24] 2046 	sjmp	00275$
      000926                       2047 00128$:
                                   2048 ;	calc.c:170: else if (!stack_pop(&ctx->s, &d1)) {
      000926 E5*00            [12] 2049 	mov	a,_bp
      000928 24 0B            [12] 2050 	add	a,#0x0b
      00092A FF               [12] 2051 	mov	r7,a
      00092B 7E 00            [12] 2052 	mov	r6,#0x00
      00092D 7D 40            [12] 2053 	mov	r5,#0x40
      00092F E5*00            [12] 2054 	mov	a,_bp
      000931 24 04            [12] 2055 	add	a,#0x04
      000933 F8               [12] 2056 	mov	r0,a
      000934 74 0B            [12] 2057 	mov	a,#0x0b
      000936 26               [12] 2058 	add	a,@r0
      000937 FA               [12] 2059 	mov	r2,a
      000938 E4               [12] 2060 	clr	a
      000939 08               [12] 2061 	inc	r0
      00093A 36               [12] 2062 	addc	a,@r0
      00093B FB               [12] 2063 	mov	r3,a
      00093C 08               [12] 2064 	inc	r0
      00093D 86 04            [24] 2065 	mov	ar4,@r0
      00093F C0 07            [24] 2066 	push	ar7
      000941 C0 06            [24] 2067 	push	ar6
      000943 C0 05            [24] 2068 	push	ar5
      000945 8A 82            [24] 2069 	mov	dpl,r2
      000947 8B 83            [24] 2070 	mov	dph,r3
      000949 8C F0            [24] 2071 	mov	b,r4
      00094B 12r00r00         [24] 2072 	lcall	_stack_pop
      00094E AE 82            [24] 2073 	mov	r6,dpl
      000950 AF 83            [24] 2074 	mov	r7,dph
      000952 15 81            [12] 2075 	dec	sp
      000954 15 81            [12] 2076 	dec	sp
      000956 15 81            [12] 2077 	dec	sp
      000958 EE               [12] 2078 	mov	a,r6
      000959 4F               [12] 2079 	orl	a,r7
      00095A 70 58            [24] 2080 	jnz	00125$
                                   2081 ;	calc.c:171: (void)stack_push(&ctx->s, d0);
      00095C E5*00            [12] 2082 	mov	a,_bp
      00095E 24 04            [12] 2083 	add	a,#0x04
      000960 F8               [12] 2084 	mov	r0,a
      000961 74 0B            [12] 2085 	mov	a,#0x0b
      000963 26               [12] 2086 	add	a,@r0
      000964 FD               [12] 2087 	mov	r5,a
      000965 E4               [12] 2088 	clr	a
      000966 08               [12] 2089 	inc	r0
      000967 36               [12] 2090 	addc	a,@r0
      000968 FE               [12] 2091 	mov	r6,a
      000969 08               [12] 2092 	inc	r0
      00096A 86 07            [24] 2093 	mov	ar7,@r0
      00096C E5*00            [12] 2094 	mov	a,_bp
      00096E 24 07            [12] 2095 	add	a,#0x07
      000970 F8               [12] 2096 	mov	r0,a
      000971 E6               [12] 2097 	mov	a,@r0
      000972 C0 E0            [24] 2098 	push	acc
      000974 08               [12] 2099 	inc	r0
      000975 E6               [12] 2100 	mov	a,@r0
      000976 C0 E0            [24] 2101 	push	acc
      000978 08               [12] 2102 	inc	r0
      000979 E6               [12] 2103 	mov	a,@r0
      00097A C0 E0            [24] 2104 	push	acc
      00097C 08               [12] 2105 	inc	r0
      00097D E6               [12] 2106 	mov	a,@r0
      00097E C0 E0            [24] 2107 	push	acc
      000980 8D 82            [24] 2108 	mov	dpl,r5
      000982 8E 83            [24] 2109 	mov	dph,r6
      000984 8F F0            [24] 2110 	mov	b,r7
      000986 12r00r00         [24] 2111 	lcall	_stack_push
      000989 E5 81            [12] 2112 	mov	a,sp
      00098B 24 FC            [12] 2113 	add	a,#0xfc
      00098D F5 81            [12] 2114 	mov	sp,a
                                   2115 ;	calc.c:172: printstr("\r\nstack underflow\r\n");
      00098F 7Dr15            [12] 2116 	mov	r5,#___str_2
      000991 7Es00            [12] 2117 	mov	r6,#(___str_2 >> 8)
      000993 7F 80            [12] 2118 	mov	r7,#0x80
                                   2119 ;	calc.c:50: return;
      000995                       2120 00278$:
                                   2121 ;	calc.c:48: for (; *s; s++) putchar(*s);
      000995 8D 82            [24] 2122 	mov	dpl,r5
      000997 8E 83            [24] 2123 	mov	dph,r6
      000999 8F F0            [24] 2124 	mov	b,r7
      00099B 12r00r00         [24] 2125 	lcall	__gptrget
      00099E FC               [12] 2126 	mov	r4,a
      00099F 70 03            [24] 2127 	jnz	00809$
      0009A1 02r14rF7         [24] 2128 	ljmp	00190$
      0009A4                       2129 00809$:
      0009A4 7B 00            [12] 2130 	mov	r3,#0x00
      0009A6 8C 82            [24] 2131 	mov	dpl,r4
      0009A8 8B 83            [24] 2132 	mov	dph,r3
      0009AA 12r00r00         [24] 2133 	lcall	_putchar
      0009AD 0D               [12] 2134 	inc	r5
                                   2135 ;	calc.c:172: printstr("\r\nstack underflow\r\n");
      0009AE BD 00 E4         [24] 2136 	cjne	r5,#0x00,00278$
      0009B1 0E               [12] 2137 	inc	r6
      0009B2 80 E1            [24] 2138 	sjmp	00278$
      0009B4                       2139 00125$:
                                   2140 ;	calc.c:174: d1 += d0;
      0009B4 E5*00            [12] 2141 	mov	a,_bp
      0009B6 24 0B            [12] 2142 	add	a,#0x0b
      0009B8 F8               [12] 2143 	mov	r0,a
      0009B9 E5*00            [12] 2144 	mov	a,_bp
      0009BB 24 07            [12] 2145 	add	a,#0x07
      0009BD F9               [12] 2146 	mov	r1,a
      0009BE E7               [12] 2147 	mov	a,@r1
      0009BF 26               [12] 2148 	add	a,@r0
      0009C0 F6               [12] 2149 	mov	@r0,a
      0009C1 09               [12] 2150 	inc	r1
      0009C2 E7               [12] 2151 	mov	a,@r1
      0009C3 08               [12] 2152 	inc	r0
      0009C4 36               [12] 2153 	addc	a,@r0
      0009C5 F6               [12] 2154 	mov	@r0,a
      0009C6 09               [12] 2155 	inc	r1
      0009C7 E7               [12] 2156 	mov	a,@r1
      0009C8 08               [12] 2157 	inc	r0
      0009C9 36               [12] 2158 	addc	a,@r0
      0009CA F6               [12] 2159 	mov	@r0,a
      0009CB 09               [12] 2160 	inc	r1
      0009CC E7               [12] 2161 	mov	a,@r1
      0009CD 08               [12] 2162 	inc	r0
      0009CE 36               [12] 2163 	addc	a,@r0
      0009CF F6               [12] 2164 	mov	@r0,a
                                   2165 ;	calc.c:175: (void)stack_push(&ctx->s, d1);
      0009D0 E5*00            [12] 2166 	mov	a,_bp
      0009D2 24 04            [12] 2167 	add	a,#0x04
      0009D4 F8               [12] 2168 	mov	r0,a
      0009D5 74 0B            [12] 2169 	mov	a,#0x0b
      0009D7 26               [12] 2170 	add	a,@r0
      0009D8 FD               [12] 2171 	mov	r5,a
      0009D9 E4               [12] 2172 	clr	a
      0009DA 08               [12] 2173 	inc	r0
      0009DB 36               [12] 2174 	addc	a,@r0
      0009DC FE               [12] 2175 	mov	r6,a
      0009DD 08               [12] 2176 	inc	r0
      0009DE 86 07            [24] 2177 	mov	ar7,@r0
      0009E0 E5*00            [12] 2178 	mov	a,_bp
      0009E2 24 0B            [12] 2179 	add	a,#0x0b
      0009E4 F8               [12] 2180 	mov	r0,a
      0009E5 E6               [12] 2181 	mov	a,@r0
      0009E6 C0 E0            [24] 2182 	push	acc
      0009E8 08               [12] 2183 	inc	r0
      0009E9 E6               [12] 2184 	mov	a,@r0
      0009EA C0 E0            [24] 2185 	push	acc
      0009EC 08               [12] 2186 	inc	r0
      0009ED E6               [12] 2187 	mov	a,@r0
      0009EE C0 E0            [24] 2188 	push	acc
      0009F0 08               [12] 2189 	inc	r0
      0009F1 E6               [12] 2190 	mov	a,@r0
      0009F2 C0 E0            [24] 2191 	push	acc
      0009F4 8D 82            [24] 2192 	mov	dpl,r5
      0009F6 8E 83            [24] 2193 	mov	dph,r6
      0009F8 8F F0            [24] 2194 	mov	b,r7
      0009FA 12r00r00         [24] 2195 	lcall	_stack_push
      0009FD E5 81            [12] 2196 	mov	a,sp
      0009FF 24 FC            [12] 2197 	add	a,#0xfc
      000A01 F5 81            [12] 2198 	mov	sp,a
                                   2199 ;	calc.c:177: break;
      000A03 02r14rF7         [24] 2200 	ljmp	00190$
                                   2201 ;	calc.c:178: case '-':
      000A06                       2202 00130$:
                                   2203 ;	calc.c:179: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      000A06 E5*00            [12] 2204 	mov	a,_bp
      000A08 24 07            [12] 2205 	add	a,#0x07
      000A0A FF               [12] 2206 	mov	r7,a
      000A0B 7E 00            [12] 2207 	mov	r6,#0x00
      000A0D 7D 40            [12] 2208 	mov	r5,#0x40
      000A0F E5*00            [12] 2209 	mov	a,_bp
      000A11 24 04            [12] 2210 	add	a,#0x04
      000A13 F8               [12] 2211 	mov	r0,a
      000A14 74 0B            [12] 2212 	mov	a,#0x0b
      000A16 26               [12] 2213 	add	a,@r0
      000A17 FA               [12] 2214 	mov	r2,a
      000A18 E4               [12] 2215 	clr	a
      000A19 08               [12] 2216 	inc	r0
      000A1A 36               [12] 2217 	addc	a,@r0
      000A1B FB               [12] 2218 	mov	r3,a
      000A1C 08               [12] 2219 	inc	r0
      000A1D 86 04            [24] 2220 	mov	ar4,@r0
      000A1F C0 07            [24] 2221 	push	ar7
      000A21 C0 06            [24] 2222 	push	ar6
      000A23 C0 05            [24] 2223 	push	ar5
      000A25 8A 82            [24] 2224 	mov	dpl,r2
      000A27 8B 83            [24] 2225 	mov	dph,r3
      000A29 8C F0            [24] 2226 	mov	b,r4
      000A2B 12r00r00         [24] 2227 	lcall	_stack_pop
      000A2E AE 82            [24] 2228 	mov	r6,dpl
      000A30 AF 83            [24] 2229 	mov	r7,dph
      000A32 15 81            [12] 2230 	dec	sp
      000A34 15 81            [12] 2231 	dec	sp
      000A36 15 81            [12] 2232 	dec	sp
      000A38 EE               [12] 2233 	mov	a,r6
      000A39 4F               [12] 2234 	orl	a,r7
      000A3A 70 25            [24] 2235 	jnz	00135$
      000A3C 7Dr15            [12] 2236 	mov	r5,#___str_2
      000A3E 7Es00            [12] 2237 	mov	r6,#(___str_2 >> 8)
      000A40 7F 80            [12] 2238 	mov	r7,#0x80
                                   2239 ;	calc.c:50: return;
      000A42                       2240 00281$:
                                   2241 ;	calc.c:48: for (; *s; s++) putchar(*s);
      000A42 8D 82            [24] 2242 	mov	dpl,r5
      000A44 8E 83            [24] 2243 	mov	dph,r6
      000A46 8F F0            [24] 2244 	mov	b,r7
      000A48 12r00r00         [24] 2245 	lcall	__gptrget
      000A4B FC               [12] 2246 	mov	r4,a
      000A4C 70 03            [24] 2247 	jnz	00812$
      000A4E 02r14rF7         [24] 2248 	ljmp	00190$
      000A51                       2249 00812$:
      000A51 7B 00            [12] 2250 	mov	r3,#0x00
      000A53 8C 82            [24] 2251 	mov	dpl,r4
      000A55 8B 83            [24] 2252 	mov	dph,r3
      000A57 12r00r00         [24] 2253 	lcall	_putchar
      000A5A 0D               [12] 2254 	inc	r5
                                   2255 ;	calc.c:179: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      000A5B BD 00 E4         [24] 2256 	cjne	r5,#0x00,00281$
      000A5E 0E               [12] 2257 	inc	r6
      000A5F 80 E1            [24] 2258 	sjmp	00281$
      000A61                       2259 00135$:
                                   2260 ;	calc.c:180: else if (!stack_pop(&ctx->s, &d1)) {
      000A61 E5*00            [12] 2261 	mov	a,_bp
      000A63 24 0B            [12] 2262 	add	a,#0x0b
      000A65 FF               [12] 2263 	mov	r7,a
      000A66 7E 00            [12] 2264 	mov	r6,#0x00
      000A68 7D 40            [12] 2265 	mov	r5,#0x40
      000A6A E5*00            [12] 2266 	mov	a,_bp
      000A6C 24 04            [12] 2267 	add	a,#0x04
      000A6E F8               [12] 2268 	mov	r0,a
      000A6F 74 0B            [12] 2269 	mov	a,#0x0b
      000A71 26               [12] 2270 	add	a,@r0
      000A72 FA               [12] 2271 	mov	r2,a
      000A73 E4               [12] 2272 	clr	a
      000A74 08               [12] 2273 	inc	r0
      000A75 36               [12] 2274 	addc	a,@r0
      000A76 FB               [12] 2275 	mov	r3,a
      000A77 08               [12] 2276 	inc	r0
      000A78 86 04            [24] 2277 	mov	ar4,@r0
      000A7A C0 07            [24] 2278 	push	ar7
      000A7C C0 06            [24] 2279 	push	ar6
      000A7E C0 05            [24] 2280 	push	ar5
      000A80 8A 82            [24] 2281 	mov	dpl,r2
      000A82 8B 83            [24] 2282 	mov	dph,r3
      000A84 8C F0            [24] 2283 	mov	b,r4
      000A86 12r00r00         [24] 2284 	lcall	_stack_pop
      000A89 AE 82            [24] 2285 	mov	r6,dpl
      000A8B AF 83            [24] 2286 	mov	r7,dph
      000A8D 15 81            [12] 2287 	dec	sp
      000A8F 15 81            [12] 2288 	dec	sp
      000A91 15 81            [12] 2289 	dec	sp
      000A93 EE               [12] 2290 	mov	a,r6
      000A94 4F               [12] 2291 	orl	a,r7
      000A95 70 58            [24] 2292 	jnz	00132$
                                   2293 ;	calc.c:181: (void)stack_push(&ctx->s, d0);
      000A97 E5*00            [12] 2294 	mov	a,_bp
      000A99 24 04            [12] 2295 	add	a,#0x04
      000A9B F8               [12] 2296 	mov	r0,a
      000A9C 74 0B            [12] 2297 	mov	a,#0x0b
      000A9E 26               [12] 2298 	add	a,@r0
      000A9F FD               [12] 2299 	mov	r5,a
      000AA0 E4               [12] 2300 	clr	a
      000AA1 08               [12] 2301 	inc	r0
      000AA2 36               [12] 2302 	addc	a,@r0
      000AA3 FE               [12] 2303 	mov	r6,a
      000AA4 08               [12] 2304 	inc	r0
      000AA5 86 07            [24] 2305 	mov	ar7,@r0
      000AA7 E5*00            [12] 2306 	mov	a,_bp
      000AA9 24 07            [12] 2307 	add	a,#0x07
      000AAB F8               [12] 2308 	mov	r0,a
      000AAC E6               [12] 2309 	mov	a,@r0
      000AAD C0 E0            [24] 2310 	push	acc
      000AAF 08               [12] 2311 	inc	r0
      000AB0 E6               [12] 2312 	mov	a,@r0
      000AB1 C0 E0            [24] 2313 	push	acc
      000AB3 08               [12] 2314 	inc	r0
      000AB4 E6               [12] 2315 	mov	a,@r0
      000AB5 C0 E0            [24] 2316 	push	acc
      000AB7 08               [12] 2317 	inc	r0
      000AB8 E6               [12] 2318 	mov	a,@r0
      000AB9 C0 E0            [24] 2319 	push	acc
      000ABB 8D 82            [24] 2320 	mov	dpl,r5
      000ABD 8E 83            [24] 2321 	mov	dph,r6
      000ABF 8F F0            [24] 2322 	mov	b,r7
      000AC1 12r00r00         [24] 2323 	lcall	_stack_push
      000AC4 E5 81            [12] 2324 	mov	a,sp
      000AC6 24 FC            [12] 2325 	add	a,#0xfc
      000AC8 F5 81            [12] 2326 	mov	sp,a
                                   2327 ;	calc.c:182: printstr("\r\nstack underflow\r\n");
      000ACA 7Dr15            [12] 2328 	mov	r5,#___str_2
      000ACC 7Es00            [12] 2329 	mov	r6,#(___str_2 >> 8)
      000ACE 7F 80            [12] 2330 	mov	r7,#0x80
                                   2331 ;	calc.c:50: return;
      000AD0                       2332 00284$:
                                   2333 ;	calc.c:48: for (; *s; s++) putchar(*s);
      000AD0 8D 82            [24] 2334 	mov	dpl,r5
      000AD2 8E 83            [24] 2335 	mov	dph,r6
      000AD4 8F F0            [24] 2336 	mov	b,r7
      000AD6 12r00r00         [24] 2337 	lcall	__gptrget
      000AD9 FC               [12] 2338 	mov	r4,a
      000ADA 70 03            [24] 2339 	jnz	00815$
      000ADC 02r14rF7         [24] 2340 	ljmp	00190$
      000ADF                       2341 00815$:
      000ADF 7B 00            [12] 2342 	mov	r3,#0x00
      000AE1 8C 82            [24] 2343 	mov	dpl,r4
      000AE3 8B 83            [24] 2344 	mov	dph,r3
      000AE5 12r00r00         [24] 2345 	lcall	_putchar
      000AE8 0D               [12] 2346 	inc	r5
                                   2347 ;	calc.c:182: printstr("\r\nstack underflow\r\n");
      000AE9 BD 00 E4         [24] 2348 	cjne	r5,#0x00,00284$
      000AEC 0E               [12] 2349 	inc	r6
      000AED 80 E1            [24] 2350 	sjmp	00284$
      000AEF                       2351 00132$:
                                   2352 ;	calc.c:184: d1 -= d0;
      000AEF E5*00            [12] 2353 	mov	a,_bp
      000AF1 24 0B            [12] 2354 	add	a,#0x0b
      000AF3 F8               [12] 2355 	mov	r0,a
      000AF4 E5*00            [12] 2356 	mov	a,_bp
      000AF6 24 07            [12] 2357 	add	a,#0x07
      000AF8 F9               [12] 2358 	mov	r1,a
      000AF9 E6               [12] 2359 	mov	a,@r0
      000AFA C3               [12] 2360 	clr	c
      000AFB 97               [12] 2361 	subb	a,@r1
      000AFC F6               [12] 2362 	mov	@r0,a
      000AFD 08               [12] 2363 	inc	r0
      000AFE E6               [12] 2364 	mov	a,@r0
      000AFF 09               [12] 2365 	inc	r1
      000B00 97               [12] 2366 	subb	a,@r1
      000B01 F6               [12] 2367 	mov	@r0,a
      000B02 08               [12] 2368 	inc	r0
      000B03 E6               [12] 2369 	mov	a,@r0
      000B04 09               [12] 2370 	inc	r1
      000B05 97               [12] 2371 	subb	a,@r1
      000B06 F6               [12] 2372 	mov	@r0,a
      000B07 08               [12] 2373 	inc	r0
      000B08 E6               [12] 2374 	mov	a,@r0
      000B09 09               [12] 2375 	inc	r1
      000B0A 97               [12] 2376 	subb	a,@r1
      000B0B F6               [12] 2377 	mov	@r0,a
                                   2378 ;	calc.c:185: (void)stack_push(&ctx->s, d1);
      000B0C E5*00            [12] 2379 	mov	a,_bp
      000B0E 24 04            [12] 2380 	add	a,#0x04
      000B10 F8               [12] 2381 	mov	r0,a
      000B11 74 0B            [12] 2382 	mov	a,#0x0b
      000B13 26               [12] 2383 	add	a,@r0
      000B14 FD               [12] 2384 	mov	r5,a
      000B15 E4               [12] 2385 	clr	a
      000B16 08               [12] 2386 	inc	r0
      000B17 36               [12] 2387 	addc	a,@r0
      000B18 FE               [12] 2388 	mov	r6,a
      000B19 08               [12] 2389 	inc	r0
      000B1A 86 07            [24] 2390 	mov	ar7,@r0
      000B1C E5*00            [12] 2391 	mov	a,_bp
      000B1E 24 0B            [12] 2392 	add	a,#0x0b
      000B20 F8               [12] 2393 	mov	r0,a
      000B21 E6               [12] 2394 	mov	a,@r0
      000B22 C0 E0            [24] 2395 	push	acc
      000B24 08               [12] 2396 	inc	r0
      000B25 E6               [12] 2397 	mov	a,@r0
      000B26 C0 E0            [24] 2398 	push	acc
      000B28 08               [12] 2399 	inc	r0
      000B29 E6               [12] 2400 	mov	a,@r0
      000B2A C0 E0            [24] 2401 	push	acc
      000B2C 08               [12] 2402 	inc	r0
      000B2D E6               [12] 2403 	mov	a,@r0
      000B2E C0 E0            [24] 2404 	push	acc
      000B30 8D 82            [24] 2405 	mov	dpl,r5
      000B32 8E 83            [24] 2406 	mov	dph,r6
      000B34 8F F0            [24] 2407 	mov	b,r7
      000B36 12r00r00         [24] 2408 	lcall	_stack_push
      000B39 E5 81            [12] 2409 	mov	a,sp
      000B3B 24 FC            [12] 2410 	add	a,#0xfc
      000B3D F5 81            [12] 2411 	mov	sp,a
                                   2412 ;	calc.c:187: break;
      000B3F 02r14rF7         [24] 2413 	ljmp	00190$
                                   2414 ;	calc.c:188: case '*':
      000B42                       2415 00137$:
                                   2416 ;	calc.c:189: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      000B42 E5*00            [12] 2417 	mov	a,_bp
      000B44 24 07            [12] 2418 	add	a,#0x07
      000B46 FF               [12] 2419 	mov	r7,a
      000B47 7E 00            [12] 2420 	mov	r6,#0x00
      000B49 7D 40            [12] 2421 	mov	r5,#0x40
      000B4B E5*00            [12] 2422 	mov	a,_bp
      000B4D 24 04            [12] 2423 	add	a,#0x04
      000B4F F8               [12] 2424 	mov	r0,a
      000B50 74 0B            [12] 2425 	mov	a,#0x0b
      000B52 26               [12] 2426 	add	a,@r0
      000B53 FA               [12] 2427 	mov	r2,a
      000B54 E4               [12] 2428 	clr	a
      000B55 08               [12] 2429 	inc	r0
      000B56 36               [12] 2430 	addc	a,@r0
      000B57 FB               [12] 2431 	mov	r3,a
      000B58 08               [12] 2432 	inc	r0
      000B59 86 04            [24] 2433 	mov	ar4,@r0
      000B5B C0 07            [24] 2434 	push	ar7
      000B5D C0 06            [24] 2435 	push	ar6
      000B5F C0 05            [24] 2436 	push	ar5
      000B61 8A 82            [24] 2437 	mov	dpl,r2
      000B63 8B 83            [24] 2438 	mov	dph,r3
      000B65 8C F0            [24] 2439 	mov	b,r4
      000B67 12r00r00         [24] 2440 	lcall	_stack_pop
      000B6A AE 82            [24] 2441 	mov	r6,dpl
      000B6C AF 83            [24] 2442 	mov	r7,dph
      000B6E 15 81            [12] 2443 	dec	sp
      000B70 15 81            [12] 2444 	dec	sp
      000B72 15 81            [12] 2445 	dec	sp
      000B74 EE               [12] 2446 	mov	a,r6
      000B75 4F               [12] 2447 	orl	a,r7
      000B76 70 25            [24] 2448 	jnz	00142$
      000B78 7Dr15            [12] 2449 	mov	r5,#___str_2
      000B7A 7Es00            [12] 2450 	mov	r6,#(___str_2 >> 8)
      000B7C 7F 80            [12] 2451 	mov	r7,#0x80
                                   2452 ;	calc.c:50: return;
      000B7E                       2453 00287$:
                                   2454 ;	calc.c:48: for (; *s; s++) putchar(*s);
      000B7E 8D 82            [24] 2455 	mov	dpl,r5
      000B80 8E 83            [24] 2456 	mov	dph,r6
      000B82 8F F0            [24] 2457 	mov	b,r7
      000B84 12r00r00         [24] 2458 	lcall	__gptrget
      000B87 FC               [12] 2459 	mov	r4,a
      000B88 70 03            [24] 2460 	jnz	00818$
      000B8A 02r14rF7         [24] 2461 	ljmp	00190$
      000B8D                       2462 00818$:
      000B8D 7B 00            [12] 2463 	mov	r3,#0x00
      000B8F 8C 82            [24] 2464 	mov	dpl,r4
      000B91 8B 83            [24] 2465 	mov	dph,r3
      000B93 12r00r00         [24] 2466 	lcall	_putchar
      000B96 0D               [12] 2467 	inc	r5
                                   2468 ;	calc.c:189: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      000B97 BD 00 E4         [24] 2469 	cjne	r5,#0x00,00287$
      000B9A 0E               [12] 2470 	inc	r6
      000B9B 80 E1            [24] 2471 	sjmp	00287$
      000B9D                       2472 00142$:
                                   2473 ;	calc.c:190: else if (!stack_pop(&ctx->s, &d1)) {
      000B9D E5*00            [12] 2474 	mov	a,_bp
      000B9F 24 0B            [12] 2475 	add	a,#0x0b
      000BA1 FF               [12] 2476 	mov	r7,a
      000BA2 7E 00            [12] 2477 	mov	r6,#0x00
      000BA4 7D 40            [12] 2478 	mov	r5,#0x40
      000BA6 E5*00            [12] 2479 	mov	a,_bp
      000BA8 24 04            [12] 2480 	add	a,#0x04
      000BAA F8               [12] 2481 	mov	r0,a
      000BAB 74 0B            [12] 2482 	mov	a,#0x0b
      000BAD 26               [12] 2483 	add	a,@r0
      000BAE FA               [12] 2484 	mov	r2,a
      000BAF E4               [12] 2485 	clr	a
      000BB0 08               [12] 2486 	inc	r0
      000BB1 36               [12] 2487 	addc	a,@r0
      000BB2 FB               [12] 2488 	mov	r3,a
      000BB3 08               [12] 2489 	inc	r0
      000BB4 86 04            [24] 2490 	mov	ar4,@r0
      000BB6 C0 07            [24] 2491 	push	ar7
      000BB8 C0 06            [24] 2492 	push	ar6
      000BBA C0 05            [24] 2493 	push	ar5
      000BBC 8A 82            [24] 2494 	mov	dpl,r2
      000BBE 8B 83            [24] 2495 	mov	dph,r3
      000BC0 8C F0            [24] 2496 	mov	b,r4
      000BC2 12r00r00         [24] 2497 	lcall	_stack_pop
      000BC5 AE 82            [24] 2498 	mov	r6,dpl
      000BC7 AF 83            [24] 2499 	mov	r7,dph
      000BC9 15 81            [12] 2500 	dec	sp
      000BCB 15 81            [12] 2501 	dec	sp
      000BCD 15 81            [12] 2502 	dec	sp
      000BCF EE               [12] 2503 	mov	a,r6
      000BD0 4F               [12] 2504 	orl	a,r7
      000BD1 70 58            [24] 2505 	jnz	00139$
                                   2506 ;	calc.c:191: (void)stack_push(&ctx->s, d0);
      000BD3 E5*00            [12] 2507 	mov	a,_bp
      000BD5 24 04            [12] 2508 	add	a,#0x04
      000BD7 F8               [12] 2509 	mov	r0,a
      000BD8 74 0B            [12] 2510 	mov	a,#0x0b
      000BDA 26               [12] 2511 	add	a,@r0
      000BDB FD               [12] 2512 	mov	r5,a
      000BDC E4               [12] 2513 	clr	a
      000BDD 08               [12] 2514 	inc	r0
      000BDE 36               [12] 2515 	addc	a,@r0
      000BDF FE               [12] 2516 	mov	r6,a
      000BE0 08               [12] 2517 	inc	r0
      000BE1 86 07            [24] 2518 	mov	ar7,@r0
      000BE3 E5*00            [12] 2519 	mov	a,_bp
      000BE5 24 07            [12] 2520 	add	a,#0x07
      000BE7 F8               [12] 2521 	mov	r0,a
      000BE8 E6               [12] 2522 	mov	a,@r0
      000BE9 C0 E0            [24] 2523 	push	acc
      000BEB 08               [12] 2524 	inc	r0
      000BEC E6               [12] 2525 	mov	a,@r0
      000BED C0 E0            [24] 2526 	push	acc
      000BEF 08               [12] 2527 	inc	r0
      000BF0 E6               [12] 2528 	mov	a,@r0
      000BF1 C0 E0            [24] 2529 	push	acc
      000BF3 08               [12] 2530 	inc	r0
      000BF4 E6               [12] 2531 	mov	a,@r0
      000BF5 C0 E0            [24] 2532 	push	acc
      000BF7 8D 82            [24] 2533 	mov	dpl,r5
      000BF9 8E 83            [24] 2534 	mov	dph,r6
      000BFB 8F F0            [24] 2535 	mov	b,r7
      000BFD 12r00r00         [24] 2536 	lcall	_stack_push
      000C00 E5 81            [12] 2537 	mov	a,sp
      000C02 24 FC            [12] 2538 	add	a,#0xfc
      000C04 F5 81            [12] 2539 	mov	sp,a
                                   2540 ;	calc.c:192: printstr("\r\nstack underflow\r\n");
      000C06 7Dr15            [12] 2541 	mov	r5,#___str_2
      000C08 7Es00            [12] 2542 	mov	r6,#(___str_2 >> 8)
      000C0A 7F 80            [12] 2543 	mov	r7,#0x80
                                   2544 ;	calc.c:50: return;
      000C0C                       2545 00290$:
                                   2546 ;	calc.c:48: for (; *s; s++) putchar(*s);
      000C0C 8D 82            [24] 2547 	mov	dpl,r5
      000C0E 8E 83            [24] 2548 	mov	dph,r6
      000C10 8F F0            [24] 2549 	mov	b,r7
      000C12 12r00r00         [24] 2550 	lcall	__gptrget
      000C15 FC               [12] 2551 	mov	r4,a
      000C16 70 03            [24] 2552 	jnz	00821$
      000C18 02r14rF7         [24] 2553 	ljmp	00190$
      000C1B                       2554 00821$:
      000C1B 7B 00            [12] 2555 	mov	r3,#0x00
      000C1D 8C 82            [24] 2556 	mov	dpl,r4
      000C1F 8B 83            [24] 2557 	mov	dph,r3
      000C21 12r00r00         [24] 2558 	lcall	_putchar
      000C24 0D               [12] 2559 	inc	r5
                                   2560 ;	calc.c:192: printstr("\r\nstack underflow\r\n");
      000C25 BD 00 E4         [24] 2561 	cjne	r5,#0x00,00290$
      000C28 0E               [12] 2562 	inc	r6
      000C29 80 E1            [24] 2563 	sjmp	00290$
      000C2B                       2564 00139$:
                                   2565 ;	calc.c:194: d1 *= d0;
      000C2B E5*00            [12] 2566 	mov	a,_bp
      000C2D 24 07            [12] 2567 	add	a,#0x07
      000C2F F8               [12] 2568 	mov	r0,a
      000C30 E6               [12] 2569 	mov	a,@r0
      000C31 C0 E0            [24] 2570 	push	acc
      000C33 08               [12] 2571 	inc	r0
      000C34 E6               [12] 2572 	mov	a,@r0
      000C35 C0 E0            [24] 2573 	push	acc
      000C37 08               [12] 2574 	inc	r0
      000C38 E6               [12] 2575 	mov	a,@r0
      000C39 C0 E0            [24] 2576 	push	acc
      000C3B 08               [12] 2577 	inc	r0
      000C3C E6               [12] 2578 	mov	a,@r0
      000C3D C0 E0            [24] 2579 	push	acc
      000C3F E5*00            [12] 2580 	mov	a,_bp
      000C41 24 0B            [12] 2581 	add	a,#0x0b
      000C43 F8               [12] 2582 	mov	r0,a
      000C44 86 82            [24] 2583 	mov	dpl,@r0
      000C46 08               [12] 2584 	inc	r0
      000C47 86 83            [24] 2585 	mov	dph,@r0
      000C49 08               [12] 2586 	inc	r0
      000C4A 86 F0            [24] 2587 	mov	b,@r0
      000C4C 08               [12] 2588 	inc	r0
      000C4D E6               [12] 2589 	mov	a,@r0
      000C4E 12r00r00         [24] 2590 	lcall	__mullong
      000C51 AC 82            [24] 2591 	mov	r4,dpl
      000C53 AD 83            [24] 2592 	mov	r5,dph
      000C55 AE F0            [24] 2593 	mov	r6,b
      000C57 FF               [12] 2594 	mov	r7,a
      000C58 E5 81            [12] 2595 	mov	a,sp
      000C5A 24 FC            [12] 2596 	add	a,#0xfc
      000C5C F5 81            [12] 2597 	mov	sp,a
      000C5E E5*00            [12] 2598 	mov	a,_bp
      000C60 24 0B            [12] 2599 	add	a,#0x0b
      000C62 F8               [12] 2600 	mov	r0,a
      000C63 A6 04            [24] 2601 	mov	@r0,ar4
      000C65 08               [12] 2602 	inc	r0
      000C66 A6 05            [24] 2603 	mov	@r0,ar5
      000C68 08               [12] 2604 	inc	r0
      000C69 A6 06            [24] 2605 	mov	@r0,ar6
      000C6B 08               [12] 2606 	inc	r0
      000C6C A6 07            [24] 2607 	mov	@r0,ar7
                                   2608 ;	calc.c:195: (void)stack_push(&ctx->s, d1);
      000C6E E5*00            [12] 2609 	mov	a,_bp
      000C70 24 04            [12] 2610 	add	a,#0x04
      000C72 F8               [12] 2611 	mov	r0,a
      000C73 74 0B            [12] 2612 	mov	a,#0x0b
      000C75 26               [12] 2613 	add	a,@r0
      000C76 FD               [12] 2614 	mov	r5,a
      000C77 E4               [12] 2615 	clr	a
      000C78 08               [12] 2616 	inc	r0
      000C79 36               [12] 2617 	addc	a,@r0
      000C7A FE               [12] 2618 	mov	r6,a
      000C7B 08               [12] 2619 	inc	r0
      000C7C 86 07            [24] 2620 	mov	ar7,@r0
      000C7E E5*00            [12] 2621 	mov	a,_bp
      000C80 24 0B            [12] 2622 	add	a,#0x0b
      000C82 F8               [12] 2623 	mov	r0,a
      000C83 E6               [12] 2624 	mov	a,@r0
      000C84 C0 E0            [24] 2625 	push	acc
      000C86 08               [12] 2626 	inc	r0
      000C87 E6               [12] 2627 	mov	a,@r0
      000C88 C0 E0            [24] 2628 	push	acc
      000C8A 08               [12] 2629 	inc	r0
      000C8B E6               [12] 2630 	mov	a,@r0
      000C8C C0 E0            [24] 2631 	push	acc
      000C8E 08               [12] 2632 	inc	r0
      000C8F E6               [12] 2633 	mov	a,@r0
      000C90 C0 E0            [24] 2634 	push	acc
      000C92 8D 82            [24] 2635 	mov	dpl,r5
      000C94 8E 83            [24] 2636 	mov	dph,r6
      000C96 8F F0            [24] 2637 	mov	b,r7
      000C98 12r00r00         [24] 2638 	lcall	_stack_push
      000C9B E5 81            [12] 2639 	mov	a,sp
      000C9D 24 FC            [12] 2640 	add	a,#0xfc
      000C9F F5 81            [12] 2641 	mov	sp,a
                                   2642 ;	calc.c:197: break;
      000CA1 02r14rF7         [24] 2643 	ljmp	00190$
                                   2644 ;	calc.c:198: case '/':
      000CA4                       2645 00144$:
                                   2646 ;	calc.c:199: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      000CA4 E5*00            [12] 2647 	mov	a,_bp
      000CA6 24 07            [12] 2648 	add	a,#0x07
      000CA8 FF               [12] 2649 	mov	r7,a
      000CA9 7E 00            [12] 2650 	mov	r6,#0x00
      000CAB 7D 40            [12] 2651 	mov	r5,#0x40
      000CAD E5*00            [12] 2652 	mov	a,_bp
      000CAF 24 04            [12] 2653 	add	a,#0x04
      000CB1 F8               [12] 2654 	mov	r0,a
      000CB2 74 0B            [12] 2655 	mov	a,#0x0b
      000CB4 26               [12] 2656 	add	a,@r0
      000CB5 FA               [12] 2657 	mov	r2,a
      000CB6 E4               [12] 2658 	clr	a
      000CB7 08               [12] 2659 	inc	r0
      000CB8 36               [12] 2660 	addc	a,@r0
      000CB9 FB               [12] 2661 	mov	r3,a
      000CBA 08               [12] 2662 	inc	r0
      000CBB 86 04            [24] 2663 	mov	ar4,@r0
      000CBD C0 07            [24] 2664 	push	ar7
      000CBF C0 06            [24] 2665 	push	ar6
      000CC1 C0 05            [24] 2666 	push	ar5
      000CC3 8A 82            [24] 2667 	mov	dpl,r2
      000CC5 8B 83            [24] 2668 	mov	dph,r3
      000CC7 8C F0            [24] 2669 	mov	b,r4
      000CC9 12r00r00         [24] 2670 	lcall	_stack_pop
      000CCC AE 82            [24] 2671 	mov	r6,dpl
      000CCE AF 83            [24] 2672 	mov	r7,dph
      000CD0 15 81            [12] 2673 	dec	sp
      000CD2 15 81            [12] 2674 	dec	sp
      000CD4 15 81            [12] 2675 	dec	sp
      000CD6 EE               [12] 2676 	mov	a,r6
      000CD7 4F               [12] 2677 	orl	a,r7
      000CD8 70 25            [24] 2678 	jnz	00152$
      000CDA 7Dr15            [12] 2679 	mov	r5,#___str_2
      000CDC 7Es00            [12] 2680 	mov	r6,#(___str_2 >> 8)
      000CDE 7F 80            [12] 2681 	mov	r7,#0x80
                                   2682 ;	calc.c:50: return;
      000CE0                       2683 00293$:
                                   2684 ;	calc.c:48: for (; *s; s++) putchar(*s);
      000CE0 8D 82            [24] 2685 	mov	dpl,r5
      000CE2 8E 83            [24] 2686 	mov	dph,r6
      000CE4 8F F0            [24] 2687 	mov	b,r7
      000CE6 12r00r00         [24] 2688 	lcall	__gptrget
      000CE9 FC               [12] 2689 	mov	r4,a
      000CEA 70 03            [24] 2690 	jnz	00824$
      000CEC 02r14rF7         [24] 2691 	ljmp	00190$
      000CEF                       2692 00824$:
      000CEF 7B 00            [12] 2693 	mov	r3,#0x00
      000CF1 8C 82            [24] 2694 	mov	dpl,r4
      000CF3 8B 83            [24] 2695 	mov	dph,r3
      000CF5 12r00r00         [24] 2696 	lcall	_putchar
      000CF8 0D               [12] 2697 	inc	r5
                                   2698 ;	calc.c:199: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      000CF9 BD 00 E4         [24] 2699 	cjne	r5,#0x00,00293$
      000CFC 0E               [12] 2700 	inc	r6
      000CFD 80 E1            [24] 2701 	sjmp	00293$
      000CFF                       2702 00152$:
                                   2703 ;	calc.c:200: else if (!stack_pop(&ctx->s, &d1)) {
      000CFF E5*00            [12] 2704 	mov	a,_bp
      000D01 24 0B            [12] 2705 	add	a,#0x0b
      000D03 FF               [12] 2706 	mov	r7,a
      000D04 7E 00            [12] 2707 	mov	r6,#0x00
      000D06 7D 40            [12] 2708 	mov	r5,#0x40
      000D08 E5*00            [12] 2709 	mov	a,_bp
      000D0A 24 04            [12] 2710 	add	a,#0x04
      000D0C F8               [12] 2711 	mov	r0,a
      000D0D 74 0B            [12] 2712 	mov	a,#0x0b
      000D0F 26               [12] 2713 	add	a,@r0
      000D10 FA               [12] 2714 	mov	r2,a
      000D11 E4               [12] 2715 	clr	a
      000D12 08               [12] 2716 	inc	r0
      000D13 36               [12] 2717 	addc	a,@r0
      000D14 FB               [12] 2718 	mov	r3,a
      000D15 08               [12] 2719 	inc	r0
      000D16 86 04            [24] 2720 	mov	ar4,@r0
      000D18 C0 07            [24] 2721 	push	ar7
      000D1A C0 06            [24] 2722 	push	ar6
      000D1C C0 05            [24] 2723 	push	ar5
      000D1E 8A 82            [24] 2724 	mov	dpl,r2
      000D20 8B 83            [24] 2725 	mov	dph,r3
      000D22 8C F0            [24] 2726 	mov	b,r4
      000D24 12r00r00         [24] 2727 	lcall	_stack_pop
      000D27 AE 82            [24] 2728 	mov	r6,dpl
      000D29 AF 83            [24] 2729 	mov	r7,dph
      000D2B 15 81            [12] 2730 	dec	sp
      000D2D 15 81            [12] 2731 	dec	sp
      000D2F 15 81            [12] 2732 	dec	sp
      000D31 EE               [12] 2733 	mov	a,r6
      000D32 4F               [12] 2734 	orl	a,r7
      000D33 70 58            [24] 2735 	jnz	00149$
                                   2736 ;	calc.c:201: (void)stack_push(&ctx->s, d0);
      000D35 E5*00            [12] 2737 	mov	a,_bp
      000D37 24 04            [12] 2738 	add	a,#0x04
      000D39 F8               [12] 2739 	mov	r0,a
      000D3A 74 0B            [12] 2740 	mov	a,#0x0b
      000D3C 26               [12] 2741 	add	a,@r0
      000D3D FD               [12] 2742 	mov	r5,a
      000D3E E4               [12] 2743 	clr	a
      000D3F 08               [12] 2744 	inc	r0
      000D40 36               [12] 2745 	addc	a,@r0
      000D41 FE               [12] 2746 	mov	r6,a
      000D42 08               [12] 2747 	inc	r0
      000D43 86 07            [24] 2748 	mov	ar7,@r0
      000D45 E5*00            [12] 2749 	mov	a,_bp
      000D47 24 07            [12] 2750 	add	a,#0x07
      000D49 F8               [12] 2751 	mov	r0,a
      000D4A E6               [12] 2752 	mov	a,@r0
      000D4B C0 E0            [24] 2753 	push	acc
      000D4D 08               [12] 2754 	inc	r0
      000D4E E6               [12] 2755 	mov	a,@r0
      000D4F C0 E0            [24] 2756 	push	acc
      000D51 08               [12] 2757 	inc	r0
      000D52 E6               [12] 2758 	mov	a,@r0
      000D53 C0 E0            [24] 2759 	push	acc
      000D55 08               [12] 2760 	inc	r0
      000D56 E6               [12] 2761 	mov	a,@r0
      000D57 C0 E0            [24] 2762 	push	acc
      000D59 8D 82            [24] 2763 	mov	dpl,r5
      000D5B 8E 83            [24] 2764 	mov	dph,r6
      000D5D 8F F0            [24] 2765 	mov	b,r7
      000D5F 12r00r00         [24] 2766 	lcall	_stack_push
      000D62 E5 81            [12] 2767 	mov	a,sp
      000D64 24 FC            [12] 2768 	add	a,#0xfc
      000D66 F5 81            [12] 2769 	mov	sp,a
                                   2770 ;	calc.c:202: printstr("\r\nstack underflow\r\n");
      000D68 7Dr15            [12] 2771 	mov	r5,#___str_2
      000D6A 7Es00            [12] 2772 	mov	r6,#(___str_2 >> 8)
      000D6C 7F 80            [12] 2773 	mov	r7,#0x80
                                   2774 ;	calc.c:50: return;
      000D6E                       2775 00296$:
                                   2776 ;	calc.c:48: for (; *s; s++) putchar(*s);
      000D6E 8D 82            [24] 2777 	mov	dpl,r5
      000D70 8E 83            [24] 2778 	mov	dph,r6
      000D72 8F F0            [24] 2779 	mov	b,r7
      000D74 12r00r00         [24] 2780 	lcall	__gptrget
      000D77 FC               [12] 2781 	mov	r4,a
      000D78 70 03            [24] 2782 	jnz	00827$
      000D7A 02r14rF7         [24] 2783 	ljmp	00190$
      000D7D                       2784 00827$:
      000D7D 7B 00            [12] 2785 	mov	r3,#0x00
      000D7F 8C 82            [24] 2786 	mov	dpl,r4
      000D81 8B 83            [24] 2787 	mov	dph,r3
      000D83 12r00r00         [24] 2788 	lcall	_putchar
      000D86 0D               [12] 2789 	inc	r5
                                   2790 ;	calc.c:202: printstr("\r\nstack underflow\r\n");
      000D87 BD 00 E4         [24] 2791 	cjne	r5,#0x00,00296$
      000D8A 0E               [12] 2792 	inc	r6
      000D8B 80 E1            [24] 2793 	sjmp	00296$
      000D8D                       2794 00149$:
                                   2795 ;	calc.c:203: } else if (!d0) {
      000D8D E5*00            [12] 2796 	mov	a,_bp
      000D8F 24 07            [12] 2797 	add	a,#0x07
      000D91 F8               [12] 2798 	mov	r0,a
      000D92 E6               [12] 2799 	mov	a,@r0
      000D93 08               [12] 2800 	inc	r0
      000D94 46               [12] 2801 	orl	a,@r0
      000D95 08               [12] 2802 	inc	r0
      000D96 46               [12] 2803 	orl	a,@r0
      000D97 08               [12] 2804 	inc	r0
      000D98 46               [12] 2805 	orl	a,@r0
      000D99 60 03            [24] 2806 	jz	00829$
      000D9B 02r0Er29         [24] 2807 	ljmp	00146$
      000D9E                       2808 00829$:
                                   2809 ;	calc.c:204: (void)stack_push(&ctx->s, d1);
      000D9E E5*00            [12] 2810 	mov	a,_bp
      000DA0 24 04            [12] 2811 	add	a,#0x04
      000DA2 F8               [12] 2812 	mov	r0,a
      000DA3 74 0B            [12] 2813 	mov	a,#0x0b
      000DA5 26               [12] 2814 	add	a,@r0
      000DA6 FD               [12] 2815 	mov	r5,a
      000DA7 E4               [12] 2816 	clr	a
      000DA8 08               [12] 2817 	inc	r0
      000DA9 36               [12] 2818 	addc	a,@r0
      000DAA FE               [12] 2819 	mov	r6,a
      000DAB 08               [12] 2820 	inc	r0
      000DAC 86 07            [24] 2821 	mov	ar7,@r0
      000DAE E5*00            [12] 2822 	mov	a,_bp
      000DB0 24 0B            [12] 2823 	add	a,#0x0b
      000DB2 F8               [12] 2824 	mov	r0,a
      000DB3 E6               [12] 2825 	mov	a,@r0
      000DB4 C0 E0            [24] 2826 	push	acc
      000DB6 08               [12] 2827 	inc	r0
      000DB7 E6               [12] 2828 	mov	a,@r0
      000DB8 C0 E0            [24] 2829 	push	acc
      000DBA 08               [12] 2830 	inc	r0
      000DBB E6               [12] 2831 	mov	a,@r0
      000DBC C0 E0            [24] 2832 	push	acc
      000DBE 08               [12] 2833 	inc	r0
      000DBF E6               [12] 2834 	mov	a,@r0
      000DC0 C0 E0            [24] 2835 	push	acc
      000DC2 8D 82            [24] 2836 	mov	dpl,r5
      000DC4 8E 83            [24] 2837 	mov	dph,r6
      000DC6 8F F0            [24] 2838 	mov	b,r7
      000DC8 12r00r00         [24] 2839 	lcall	_stack_push
      000DCB E5 81            [12] 2840 	mov	a,sp
      000DCD 24 FC            [12] 2841 	add	a,#0xfc
      000DCF F5 81            [12] 2842 	mov	sp,a
                                   2843 ;	calc.c:205: (void)stack_push(&ctx->s, d0);			
      000DD1 E5*00            [12] 2844 	mov	a,_bp
      000DD3 24 04            [12] 2845 	add	a,#0x04
      000DD5 F8               [12] 2846 	mov	r0,a
      000DD6 74 0B            [12] 2847 	mov	a,#0x0b
      000DD8 26               [12] 2848 	add	a,@r0
      000DD9 FD               [12] 2849 	mov	r5,a
      000DDA E4               [12] 2850 	clr	a
      000DDB 08               [12] 2851 	inc	r0
      000DDC 36               [12] 2852 	addc	a,@r0
      000DDD FE               [12] 2853 	mov	r6,a
      000DDE 08               [12] 2854 	inc	r0
      000DDF 86 07            [24] 2855 	mov	ar7,@r0
      000DE1 E5*00            [12] 2856 	mov	a,_bp
      000DE3 24 07            [12] 2857 	add	a,#0x07
      000DE5 F8               [12] 2858 	mov	r0,a
      000DE6 E6               [12] 2859 	mov	a,@r0
      000DE7 C0 E0            [24] 2860 	push	acc
      000DE9 08               [12] 2861 	inc	r0
      000DEA E6               [12] 2862 	mov	a,@r0
      000DEB C0 E0            [24] 2863 	push	acc
      000DED 08               [12] 2864 	inc	r0
      000DEE E6               [12] 2865 	mov	a,@r0
      000DEF C0 E0            [24] 2866 	push	acc
      000DF1 08               [12] 2867 	inc	r0
      000DF2 E6               [12] 2868 	mov	a,@r0
      000DF3 C0 E0            [24] 2869 	push	acc
      000DF5 8D 82            [24] 2870 	mov	dpl,r5
      000DF7 8E 83            [24] 2871 	mov	dph,r6
      000DF9 8F F0            [24] 2872 	mov	b,r7
      000DFB 12r00r00         [24] 2873 	lcall	_stack_push
      000DFE E5 81            [12] 2874 	mov	a,sp
      000E00 24 FC            [12] 2875 	add	a,#0xfc
      000E02 F5 81            [12] 2876 	mov	sp,a
                                   2877 ;	calc.c:206: printstr("\r\ndivision by zero\r\n");
      000E04 7Dr29            [12] 2878 	mov	r5,#___str_3
      000E06 7Es00            [12] 2879 	mov	r6,#(___str_3 >> 8)
      000E08 7F 80            [12] 2880 	mov	r7,#0x80
                                   2881 ;	calc.c:50: return;
      000E0A                       2882 00299$:
                                   2883 ;	calc.c:48: for (; *s; s++) putchar(*s);
      000E0A 8D 82            [24] 2884 	mov	dpl,r5
      000E0C 8E 83            [24] 2885 	mov	dph,r6
      000E0E 8F F0            [24] 2886 	mov	b,r7
      000E10 12r00r00         [24] 2887 	lcall	__gptrget
      000E13 FC               [12] 2888 	mov	r4,a
      000E14 70 03            [24] 2889 	jnz	00830$
      000E16 02r14rF7         [24] 2890 	ljmp	00190$
      000E19                       2891 00830$:
      000E19 7B 00            [12] 2892 	mov	r3,#0x00
      000E1B 8C 82            [24] 2893 	mov	dpl,r4
      000E1D 8B 83            [24] 2894 	mov	dph,r3
      000E1F 12r00r00         [24] 2895 	lcall	_putchar
      000E22 0D               [12] 2896 	inc	r5
                                   2897 ;	calc.c:206: printstr("\r\ndivision by zero\r\n");
      000E23 BD 00 E4         [24] 2898 	cjne	r5,#0x00,00299$
      000E26 0E               [12] 2899 	inc	r6
      000E27 80 E1            [24] 2900 	sjmp	00299$
      000E29                       2901 00146$:
                                   2902 ;	calc.c:208: d1 /= d0;
      000E29 E5*00            [12] 2903 	mov	a,_bp
      000E2B 24 07            [12] 2904 	add	a,#0x07
      000E2D F8               [12] 2905 	mov	r0,a
      000E2E E6               [12] 2906 	mov	a,@r0
      000E2F C0 E0            [24] 2907 	push	acc
      000E31 08               [12] 2908 	inc	r0
      000E32 E6               [12] 2909 	mov	a,@r0
      000E33 C0 E0            [24] 2910 	push	acc
      000E35 08               [12] 2911 	inc	r0
      000E36 E6               [12] 2912 	mov	a,@r0
      000E37 C0 E0            [24] 2913 	push	acc
      000E39 08               [12] 2914 	inc	r0
      000E3A E6               [12] 2915 	mov	a,@r0
      000E3B C0 E0            [24] 2916 	push	acc
      000E3D E5*00            [12] 2917 	mov	a,_bp
      000E3F 24 0B            [12] 2918 	add	a,#0x0b
      000E41 F8               [12] 2919 	mov	r0,a
      000E42 86 82            [24] 2920 	mov	dpl,@r0
      000E44 08               [12] 2921 	inc	r0
      000E45 86 83            [24] 2922 	mov	dph,@r0
      000E47 08               [12] 2923 	inc	r0
      000E48 86 F0            [24] 2924 	mov	b,@r0
      000E4A 08               [12] 2925 	inc	r0
      000E4B E6               [12] 2926 	mov	a,@r0
      000E4C 12r00r00         [24] 2927 	lcall	__divslong
      000E4F AC 82            [24] 2928 	mov	r4,dpl
      000E51 AD 83            [24] 2929 	mov	r5,dph
      000E53 AE F0            [24] 2930 	mov	r6,b
      000E55 FF               [12] 2931 	mov	r7,a
      000E56 E5 81            [12] 2932 	mov	a,sp
      000E58 24 FC            [12] 2933 	add	a,#0xfc
      000E5A F5 81            [12] 2934 	mov	sp,a
      000E5C E5*00            [12] 2935 	mov	a,_bp
      000E5E 24 0B            [12] 2936 	add	a,#0x0b
      000E60 F8               [12] 2937 	mov	r0,a
      000E61 A6 04            [24] 2938 	mov	@r0,ar4
      000E63 08               [12] 2939 	inc	r0
      000E64 A6 05            [24] 2940 	mov	@r0,ar5
      000E66 08               [12] 2941 	inc	r0
      000E67 A6 06            [24] 2942 	mov	@r0,ar6
      000E69 08               [12] 2943 	inc	r0
      000E6A A6 07            [24] 2944 	mov	@r0,ar7
                                   2945 ;	calc.c:209: (void)stack_push(&ctx->s, d1);
      000E6C E5*00            [12] 2946 	mov	a,_bp
      000E6E 24 04            [12] 2947 	add	a,#0x04
      000E70 F8               [12] 2948 	mov	r0,a
      000E71 74 0B            [12] 2949 	mov	a,#0x0b
      000E73 26               [12] 2950 	add	a,@r0
      000E74 FD               [12] 2951 	mov	r5,a
      000E75 E4               [12] 2952 	clr	a
      000E76 08               [12] 2953 	inc	r0
      000E77 36               [12] 2954 	addc	a,@r0
      000E78 FE               [12] 2955 	mov	r6,a
      000E79 08               [12] 2956 	inc	r0
      000E7A 86 07            [24] 2957 	mov	ar7,@r0
      000E7C E5*00            [12] 2958 	mov	a,_bp
      000E7E 24 0B            [12] 2959 	add	a,#0x0b
      000E80 F8               [12] 2960 	mov	r0,a
      000E81 E6               [12] 2961 	mov	a,@r0
      000E82 C0 E0            [24] 2962 	push	acc
      000E84 08               [12] 2963 	inc	r0
      000E85 E6               [12] 2964 	mov	a,@r0
      000E86 C0 E0            [24] 2965 	push	acc
      000E88 08               [12] 2966 	inc	r0
      000E89 E6               [12] 2967 	mov	a,@r0
      000E8A C0 E0            [24] 2968 	push	acc
      000E8C 08               [12] 2969 	inc	r0
      000E8D E6               [12] 2970 	mov	a,@r0
      000E8E C0 E0            [24] 2971 	push	acc
      000E90 8D 82            [24] 2972 	mov	dpl,r5
      000E92 8E 83            [24] 2973 	mov	dph,r6
      000E94 8F F0            [24] 2974 	mov	b,r7
      000E96 12r00r00         [24] 2975 	lcall	_stack_push
      000E99 E5 81            [12] 2976 	mov	a,sp
      000E9B 24 FC            [12] 2977 	add	a,#0xfc
      000E9D F5 81            [12] 2978 	mov	sp,a
                                   2979 ;	calc.c:211: break;
      000E9F 02r14rF7         [24] 2980 	ljmp	00190$
                                   2981 ;	calc.c:212: case '%':
      000EA2                       2982 00154$:
                                   2983 ;	calc.c:213: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      000EA2 E5*00            [12] 2984 	mov	a,_bp
      000EA4 24 07            [12] 2985 	add	a,#0x07
      000EA6 FF               [12] 2986 	mov	r7,a
      000EA7 7E 00            [12] 2987 	mov	r6,#0x00
      000EA9 7D 40            [12] 2988 	mov	r5,#0x40
      000EAB E5*00            [12] 2989 	mov	a,_bp
      000EAD 24 04            [12] 2990 	add	a,#0x04
      000EAF F8               [12] 2991 	mov	r0,a
      000EB0 74 0B            [12] 2992 	mov	a,#0x0b
      000EB2 26               [12] 2993 	add	a,@r0
      000EB3 FA               [12] 2994 	mov	r2,a
      000EB4 E4               [12] 2995 	clr	a
      000EB5 08               [12] 2996 	inc	r0
      000EB6 36               [12] 2997 	addc	a,@r0
      000EB7 FB               [12] 2998 	mov	r3,a
      000EB8 08               [12] 2999 	inc	r0
      000EB9 86 04            [24] 3000 	mov	ar4,@r0
      000EBB C0 07            [24] 3001 	push	ar7
      000EBD C0 06            [24] 3002 	push	ar6
      000EBF C0 05            [24] 3003 	push	ar5
      000EC1 8A 82            [24] 3004 	mov	dpl,r2
      000EC3 8B 83            [24] 3005 	mov	dph,r3
      000EC5 8C F0            [24] 3006 	mov	b,r4
      000EC7 12r00r00         [24] 3007 	lcall	_stack_pop
      000ECA AE 82            [24] 3008 	mov	r6,dpl
      000ECC AF 83            [24] 3009 	mov	r7,dph
      000ECE 15 81            [12] 3010 	dec	sp
      000ED0 15 81            [12] 3011 	dec	sp
      000ED2 15 81            [12] 3012 	dec	sp
      000ED4 EE               [12] 3013 	mov	a,r6
      000ED5 4F               [12] 3014 	orl	a,r7
      000ED6 70 25            [24] 3015 	jnz	00162$
      000ED8 7Dr15            [12] 3016 	mov	r5,#___str_2
      000EDA 7Es00            [12] 3017 	mov	r6,#(___str_2 >> 8)
      000EDC 7F 80            [12] 3018 	mov	r7,#0x80
                                   3019 ;	calc.c:50: return;
      000EDE                       3020 00302$:
                                   3021 ;	calc.c:48: for (; *s; s++) putchar(*s);
      000EDE 8D 82            [24] 3022 	mov	dpl,r5
      000EE0 8E 83            [24] 3023 	mov	dph,r6
      000EE2 8F F0            [24] 3024 	mov	b,r7
      000EE4 12r00r00         [24] 3025 	lcall	__gptrget
      000EE7 FC               [12] 3026 	mov	r4,a
      000EE8 70 03            [24] 3027 	jnz	00833$
      000EEA 02r14rF7         [24] 3028 	ljmp	00190$
      000EED                       3029 00833$:
      000EED 7B 00            [12] 3030 	mov	r3,#0x00
      000EEF 8C 82            [24] 3031 	mov	dpl,r4
      000EF1 8B 83            [24] 3032 	mov	dph,r3
      000EF3 12r00r00         [24] 3033 	lcall	_putchar
      000EF6 0D               [12] 3034 	inc	r5
                                   3035 ;	calc.c:213: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      000EF7 BD 00 E4         [24] 3036 	cjne	r5,#0x00,00302$
      000EFA 0E               [12] 3037 	inc	r6
      000EFB 80 E1            [24] 3038 	sjmp	00302$
      000EFD                       3039 00162$:
                                   3040 ;	calc.c:214: else if (!stack_pop(&ctx->s, &d1)) {
      000EFD E5*00            [12] 3041 	mov	a,_bp
      000EFF 24 0B            [12] 3042 	add	a,#0x0b
      000F01 FF               [12] 3043 	mov	r7,a
      000F02 7E 00            [12] 3044 	mov	r6,#0x00
      000F04 7D 40            [12] 3045 	mov	r5,#0x40
      000F06 E5*00            [12] 3046 	mov	a,_bp
      000F08 24 04            [12] 3047 	add	a,#0x04
      000F0A F8               [12] 3048 	mov	r0,a
      000F0B 74 0B            [12] 3049 	mov	a,#0x0b
      000F0D 26               [12] 3050 	add	a,@r0
      000F0E FA               [12] 3051 	mov	r2,a
      000F0F E4               [12] 3052 	clr	a
      000F10 08               [12] 3053 	inc	r0
      000F11 36               [12] 3054 	addc	a,@r0
      000F12 FB               [12] 3055 	mov	r3,a
      000F13 08               [12] 3056 	inc	r0
      000F14 86 04            [24] 3057 	mov	ar4,@r0
      000F16 C0 07            [24] 3058 	push	ar7
      000F18 C0 06            [24] 3059 	push	ar6
      000F1A C0 05            [24] 3060 	push	ar5
      000F1C 8A 82            [24] 3061 	mov	dpl,r2
      000F1E 8B 83            [24] 3062 	mov	dph,r3
      000F20 8C F0            [24] 3063 	mov	b,r4
      000F22 12r00r00         [24] 3064 	lcall	_stack_pop
      000F25 AE 82            [24] 3065 	mov	r6,dpl
      000F27 AF 83            [24] 3066 	mov	r7,dph
      000F29 15 81            [12] 3067 	dec	sp
      000F2B 15 81            [12] 3068 	dec	sp
      000F2D 15 81            [12] 3069 	dec	sp
      000F2F EE               [12] 3070 	mov	a,r6
      000F30 4F               [12] 3071 	orl	a,r7
      000F31 70 58            [24] 3072 	jnz	00159$
                                   3073 ;	calc.c:215: (void)stack_push(&ctx->s, d0);
      000F33 E5*00            [12] 3074 	mov	a,_bp
      000F35 24 04            [12] 3075 	add	a,#0x04
      000F37 F8               [12] 3076 	mov	r0,a
      000F38 74 0B            [12] 3077 	mov	a,#0x0b
      000F3A 26               [12] 3078 	add	a,@r0
      000F3B FD               [12] 3079 	mov	r5,a
      000F3C E4               [12] 3080 	clr	a
      000F3D 08               [12] 3081 	inc	r0
      000F3E 36               [12] 3082 	addc	a,@r0
      000F3F FE               [12] 3083 	mov	r6,a
      000F40 08               [12] 3084 	inc	r0
      000F41 86 07            [24] 3085 	mov	ar7,@r0
      000F43 E5*00            [12] 3086 	mov	a,_bp
      000F45 24 07            [12] 3087 	add	a,#0x07
      000F47 F8               [12] 3088 	mov	r0,a
      000F48 E6               [12] 3089 	mov	a,@r0
      000F49 C0 E0            [24] 3090 	push	acc
      000F4B 08               [12] 3091 	inc	r0
      000F4C E6               [12] 3092 	mov	a,@r0
      000F4D C0 E0            [24] 3093 	push	acc
      000F4F 08               [12] 3094 	inc	r0
      000F50 E6               [12] 3095 	mov	a,@r0
      000F51 C0 E0            [24] 3096 	push	acc
      000F53 08               [12] 3097 	inc	r0
      000F54 E6               [12] 3098 	mov	a,@r0
      000F55 C0 E0            [24] 3099 	push	acc
      000F57 8D 82            [24] 3100 	mov	dpl,r5
      000F59 8E 83            [24] 3101 	mov	dph,r6
      000F5B 8F F0            [24] 3102 	mov	b,r7
      000F5D 12r00r00         [24] 3103 	lcall	_stack_push
      000F60 E5 81            [12] 3104 	mov	a,sp
      000F62 24 FC            [12] 3105 	add	a,#0xfc
      000F64 F5 81            [12] 3106 	mov	sp,a
                                   3107 ;	calc.c:216: printstr("\r\nstack underflow\r\n");
      000F66 7Dr15            [12] 3108 	mov	r5,#___str_2
      000F68 7Es00            [12] 3109 	mov	r6,#(___str_2 >> 8)
      000F6A 7F 80            [12] 3110 	mov	r7,#0x80
                                   3111 ;	calc.c:50: return;
      000F6C                       3112 00305$:
                                   3113 ;	calc.c:48: for (; *s; s++) putchar(*s);
      000F6C 8D 82            [24] 3114 	mov	dpl,r5
      000F6E 8E 83            [24] 3115 	mov	dph,r6
      000F70 8F F0            [24] 3116 	mov	b,r7
      000F72 12r00r00         [24] 3117 	lcall	__gptrget
      000F75 FC               [12] 3118 	mov	r4,a
      000F76 70 03            [24] 3119 	jnz	00836$
      000F78 02r14rF7         [24] 3120 	ljmp	00190$
      000F7B                       3121 00836$:
      000F7B 7B 00            [12] 3122 	mov	r3,#0x00
      000F7D 8C 82            [24] 3123 	mov	dpl,r4
      000F7F 8B 83            [24] 3124 	mov	dph,r3
      000F81 12r00r00         [24] 3125 	lcall	_putchar
      000F84 0D               [12] 3126 	inc	r5
                                   3127 ;	calc.c:216: printstr("\r\nstack underflow\r\n");
      000F85 BD 00 E4         [24] 3128 	cjne	r5,#0x00,00305$
      000F88 0E               [12] 3129 	inc	r6
      000F89 80 E1            [24] 3130 	sjmp	00305$
      000F8B                       3131 00159$:
                                   3132 ;	calc.c:217: } else if (!d0) {
      000F8B E5*00            [12] 3133 	mov	a,_bp
      000F8D 24 07            [12] 3134 	add	a,#0x07
      000F8F F8               [12] 3135 	mov	r0,a
      000F90 E6               [12] 3136 	mov	a,@r0
      000F91 08               [12] 3137 	inc	r0
      000F92 46               [12] 3138 	orl	a,@r0
      000F93 08               [12] 3139 	inc	r0
      000F94 46               [12] 3140 	orl	a,@r0
      000F95 08               [12] 3141 	inc	r0
      000F96 46               [12] 3142 	orl	a,@r0
      000F97 60 03            [24] 3143 	jz	00838$
      000F99 02r10r27         [24] 3144 	ljmp	00156$
      000F9C                       3145 00838$:
                                   3146 ;	calc.c:218: (void)stack_push(&ctx->s, d1);
      000F9C E5*00            [12] 3147 	mov	a,_bp
      000F9E 24 04            [12] 3148 	add	a,#0x04
      000FA0 F8               [12] 3149 	mov	r0,a
      000FA1 74 0B            [12] 3150 	mov	a,#0x0b
      000FA3 26               [12] 3151 	add	a,@r0
      000FA4 FD               [12] 3152 	mov	r5,a
      000FA5 E4               [12] 3153 	clr	a
      000FA6 08               [12] 3154 	inc	r0
      000FA7 36               [12] 3155 	addc	a,@r0
      000FA8 FE               [12] 3156 	mov	r6,a
      000FA9 08               [12] 3157 	inc	r0
      000FAA 86 07            [24] 3158 	mov	ar7,@r0
      000FAC E5*00            [12] 3159 	mov	a,_bp
      000FAE 24 0B            [12] 3160 	add	a,#0x0b
      000FB0 F8               [12] 3161 	mov	r0,a
      000FB1 E6               [12] 3162 	mov	a,@r0
      000FB2 C0 E0            [24] 3163 	push	acc
      000FB4 08               [12] 3164 	inc	r0
      000FB5 E6               [12] 3165 	mov	a,@r0
      000FB6 C0 E0            [24] 3166 	push	acc
      000FB8 08               [12] 3167 	inc	r0
      000FB9 E6               [12] 3168 	mov	a,@r0
      000FBA C0 E0            [24] 3169 	push	acc
      000FBC 08               [12] 3170 	inc	r0
      000FBD E6               [12] 3171 	mov	a,@r0
      000FBE C0 E0            [24] 3172 	push	acc
      000FC0 8D 82            [24] 3173 	mov	dpl,r5
      000FC2 8E 83            [24] 3174 	mov	dph,r6
      000FC4 8F F0            [24] 3175 	mov	b,r7
      000FC6 12r00r00         [24] 3176 	lcall	_stack_push
      000FC9 E5 81            [12] 3177 	mov	a,sp
      000FCB 24 FC            [12] 3178 	add	a,#0xfc
      000FCD F5 81            [12] 3179 	mov	sp,a
                                   3180 ;	calc.c:219: (void)stack_push(&ctx->s, d0);			
      000FCF E5*00            [12] 3181 	mov	a,_bp
      000FD1 24 04            [12] 3182 	add	a,#0x04
      000FD3 F8               [12] 3183 	mov	r0,a
      000FD4 74 0B            [12] 3184 	mov	a,#0x0b
      000FD6 26               [12] 3185 	add	a,@r0
      000FD7 FD               [12] 3186 	mov	r5,a
      000FD8 E4               [12] 3187 	clr	a
      000FD9 08               [12] 3188 	inc	r0
      000FDA 36               [12] 3189 	addc	a,@r0
      000FDB FE               [12] 3190 	mov	r6,a
      000FDC 08               [12] 3191 	inc	r0
      000FDD 86 07            [24] 3192 	mov	ar7,@r0
      000FDF E5*00            [12] 3193 	mov	a,_bp
      000FE1 24 07            [12] 3194 	add	a,#0x07
      000FE3 F8               [12] 3195 	mov	r0,a
      000FE4 E6               [12] 3196 	mov	a,@r0
      000FE5 C0 E0            [24] 3197 	push	acc
      000FE7 08               [12] 3198 	inc	r0
      000FE8 E6               [12] 3199 	mov	a,@r0
      000FE9 C0 E0            [24] 3200 	push	acc
      000FEB 08               [12] 3201 	inc	r0
      000FEC E6               [12] 3202 	mov	a,@r0
      000FED C0 E0            [24] 3203 	push	acc
      000FEF 08               [12] 3204 	inc	r0
      000FF0 E6               [12] 3205 	mov	a,@r0
      000FF1 C0 E0            [24] 3206 	push	acc
      000FF3 8D 82            [24] 3207 	mov	dpl,r5
      000FF5 8E 83            [24] 3208 	mov	dph,r6
      000FF7 8F F0            [24] 3209 	mov	b,r7
      000FF9 12r00r00         [24] 3210 	lcall	_stack_push
      000FFC E5 81            [12] 3211 	mov	a,sp
      000FFE 24 FC            [12] 3212 	add	a,#0xfc
      001000 F5 81            [12] 3213 	mov	sp,a
                                   3214 ;	calc.c:220: printstr("\r\ndivision by zero\r\n");
      001002 7Dr29            [12] 3215 	mov	r5,#___str_3
      001004 7Es00            [12] 3216 	mov	r6,#(___str_3 >> 8)
      001006 7F 80            [12] 3217 	mov	r7,#0x80
                                   3218 ;	calc.c:50: return;
      001008                       3219 00308$:
                                   3220 ;	calc.c:48: for (; *s; s++) putchar(*s);
      001008 8D 82            [24] 3221 	mov	dpl,r5
      00100A 8E 83            [24] 3222 	mov	dph,r6
      00100C 8F F0            [24] 3223 	mov	b,r7
      00100E 12r00r00         [24] 3224 	lcall	__gptrget
      001011 FC               [12] 3225 	mov	r4,a
      001012 70 03            [24] 3226 	jnz	00839$
      001014 02r14rF7         [24] 3227 	ljmp	00190$
      001017                       3228 00839$:
      001017 7B 00            [12] 3229 	mov	r3,#0x00
      001019 8C 82            [24] 3230 	mov	dpl,r4
      00101B 8B 83            [24] 3231 	mov	dph,r3
      00101D 12r00r00         [24] 3232 	lcall	_putchar
      001020 0D               [12] 3233 	inc	r5
                                   3234 ;	calc.c:220: printstr("\r\ndivision by zero\r\n");
      001021 BD 00 E4         [24] 3235 	cjne	r5,#0x00,00308$
      001024 0E               [12] 3236 	inc	r6
      001025 80 E1            [24] 3237 	sjmp	00308$
      001027                       3238 00156$:
                                   3239 ;	calc.c:222: d1 %= d0;
      001027 E5*00            [12] 3240 	mov	a,_bp
      001029 24 07            [12] 3241 	add	a,#0x07
      00102B F8               [12] 3242 	mov	r0,a
      00102C E6               [12] 3243 	mov	a,@r0
      00102D C0 E0            [24] 3244 	push	acc
      00102F 08               [12] 3245 	inc	r0
      001030 E6               [12] 3246 	mov	a,@r0
      001031 C0 E0            [24] 3247 	push	acc
      001033 08               [12] 3248 	inc	r0
      001034 E6               [12] 3249 	mov	a,@r0
      001035 C0 E0            [24] 3250 	push	acc
      001037 08               [12] 3251 	inc	r0
      001038 E6               [12] 3252 	mov	a,@r0
      001039 C0 E0            [24] 3253 	push	acc
      00103B E5*00            [12] 3254 	mov	a,_bp
      00103D 24 0B            [12] 3255 	add	a,#0x0b
      00103F F8               [12] 3256 	mov	r0,a
      001040 86 82            [24] 3257 	mov	dpl,@r0
      001042 08               [12] 3258 	inc	r0
      001043 86 83            [24] 3259 	mov	dph,@r0
      001045 08               [12] 3260 	inc	r0
      001046 86 F0            [24] 3261 	mov	b,@r0
      001048 08               [12] 3262 	inc	r0
      001049 E6               [12] 3263 	mov	a,@r0
      00104A 12r00r00         [24] 3264 	lcall	__modslong
      00104D AC 82            [24] 3265 	mov	r4,dpl
      00104F AD 83            [24] 3266 	mov	r5,dph
      001051 AE F0            [24] 3267 	mov	r6,b
      001053 FF               [12] 3268 	mov	r7,a
      001054 E5 81            [12] 3269 	mov	a,sp
      001056 24 FC            [12] 3270 	add	a,#0xfc
      001058 F5 81            [12] 3271 	mov	sp,a
      00105A E5*00            [12] 3272 	mov	a,_bp
      00105C 24 0B            [12] 3273 	add	a,#0x0b
      00105E F8               [12] 3274 	mov	r0,a
      00105F A6 04            [24] 3275 	mov	@r0,ar4
      001061 08               [12] 3276 	inc	r0
      001062 A6 05            [24] 3277 	mov	@r0,ar5
      001064 08               [12] 3278 	inc	r0
      001065 A6 06            [24] 3279 	mov	@r0,ar6
      001067 08               [12] 3280 	inc	r0
      001068 A6 07            [24] 3281 	mov	@r0,ar7
                                   3282 ;	calc.c:223: (void)stack_push(&ctx->s, d1);
      00106A E5*00            [12] 3283 	mov	a,_bp
      00106C 24 04            [12] 3284 	add	a,#0x04
      00106E F8               [12] 3285 	mov	r0,a
      00106F 74 0B            [12] 3286 	mov	a,#0x0b
      001071 26               [12] 3287 	add	a,@r0
      001072 FD               [12] 3288 	mov	r5,a
      001073 E4               [12] 3289 	clr	a
      001074 08               [12] 3290 	inc	r0
      001075 36               [12] 3291 	addc	a,@r0
      001076 FE               [12] 3292 	mov	r6,a
      001077 08               [12] 3293 	inc	r0
      001078 86 07            [24] 3294 	mov	ar7,@r0
      00107A E5*00            [12] 3295 	mov	a,_bp
      00107C 24 0B            [12] 3296 	add	a,#0x0b
      00107E F8               [12] 3297 	mov	r0,a
      00107F E6               [12] 3298 	mov	a,@r0
      001080 C0 E0            [24] 3299 	push	acc
      001082 08               [12] 3300 	inc	r0
      001083 E6               [12] 3301 	mov	a,@r0
      001084 C0 E0            [24] 3302 	push	acc
      001086 08               [12] 3303 	inc	r0
      001087 E6               [12] 3304 	mov	a,@r0
      001088 C0 E0            [24] 3305 	push	acc
      00108A 08               [12] 3306 	inc	r0
      00108B E6               [12] 3307 	mov	a,@r0
      00108C C0 E0            [24] 3308 	push	acc
      00108E 8D 82            [24] 3309 	mov	dpl,r5
      001090 8E 83            [24] 3310 	mov	dph,r6
      001092 8F F0            [24] 3311 	mov	b,r7
      001094 12r00r00         [24] 3312 	lcall	_stack_push
      001097 E5 81            [12] 3313 	mov	a,sp
      001099 24 FC            [12] 3314 	add	a,#0xfc
      00109B F5 81            [12] 3315 	mov	sp,a
                                   3316 ;	calc.c:225: break;
      00109D 02r14rF7         [24] 3317 	ljmp	00190$
                                   3318 ;	calc.c:226: case '&':
      0010A0                       3319 00164$:
                                   3320 ;	calc.c:227: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      0010A0 E5*00            [12] 3321 	mov	a,_bp
      0010A2 24 07            [12] 3322 	add	a,#0x07
      0010A4 FF               [12] 3323 	mov	r7,a
      0010A5 7E 00            [12] 3324 	mov	r6,#0x00
      0010A7 7D 40            [12] 3325 	mov	r5,#0x40
      0010A9 E5*00            [12] 3326 	mov	a,_bp
      0010AB 24 04            [12] 3327 	add	a,#0x04
      0010AD F8               [12] 3328 	mov	r0,a
      0010AE 74 0B            [12] 3329 	mov	a,#0x0b
      0010B0 26               [12] 3330 	add	a,@r0
      0010B1 FA               [12] 3331 	mov	r2,a
      0010B2 E4               [12] 3332 	clr	a
      0010B3 08               [12] 3333 	inc	r0
      0010B4 36               [12] 3334 	addc	a,@r0
      0010B5 FB               [12] 3335 	mov	r3,a
      0010B6 08               [12] 3336 	inc	r0
      0010B7 86 04            [24] 3337 	mov	ar4,@r0
      0010B9 C0 07            [24] 3338 	push	ar7
      0010BB C0 06            [24] 3339 	push	ar6
      0010BD C0 05            [24] 3340 	push	ar5
      0010BF 8A 82            [24] 3341 	mov	dpl,r2
      0010C1 8B 83            [24] 3342 	mov	dph,r3
      0010C3 8C F0            [24] 3343 	mov	b,r4
      0010C5 12r00r00         [24] 3344 	lcall	_stack_pop
      0010C8 AE 82            [24] 3345 	mov	r6,dpl
      0010CA AF 83            [24] 3346 	mov	r7,dph
      0010CC 15 81            [12] 3347 	dec	sp
      0010CE 15 81            [12] 3348 	dec	sp
      0010D0 15 81            [12] 3349 	dec	sp
      0010D2 EE               [12] 3350 	mov	a,r6
      0010D3 4F               [12] 3351 	orl	a,r7
      0010D4 70 25            [24] 3352 	jnz	00169$
      0010D6 7Dr15            [12] 3353 	mov	r5,#___str_2
      0010D8 7Es00            [12] 3354 	mov	r6,#(___str_2 >> 8)
      0010DA 7F 80            [12] 3355 	mov	r7,#0x80
                                   3356 ;	calc.c:50: return;
      0010DC                       3357 00311$:
                                   3358 ;	calc.c:48: for (; *s; s++) putchar(*s);
      0010DC 8D 82            [24] 3359 	mov	dpl,r5
      0010DE 8E 83            [24] 3360 	mov	dph,r6
      0010E0 8F F0            [24] 3361 	mov	b,r7
      0010E2 12r00r00         [24] 3362 	lcall	__gptrget
      0010E5 FC               [12] 3363 	mov	r4,a
      0010E6 70 03            [24] 3364 	jnz	00842$
      0010E8 02r14rF7         [24] 3365 	ljmp	00190$
      0010EB                       3366 00842$:
      0010EB 7B 00            [12] 3367 	mov	r3,#0x00
      0010ED 8C 82            [24] 3368 	mov	dpl,r4
      0010EF 8B 83            [24] 3369 	mov	dph,r3
      0010F1 12r00r00         [24] 3370 	lcall	_putchar
      0010F4 0D               [12] 3371 	inc	r5
                                   3372 ;	calc.c:227: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      0010F5 BD 00 E4         [24] 3373 	cjne	r5,#0x00,00311$
      0010F8 0E               [12] 3374 	inc	r6
      0010F9 80 E1            [24] 3375 	sjmp	00311$
      0010FB                       3376 00169$:
                                   3377 ;	calc.c:228: else if (!stack_pop(&ctx->s, &d1)) {
      0010FB E5*00            [12] 3378 	mov	a,_bp
      0010FD 24 0B            [12] 3379 	add	a,#0x0b
      0010FF FF               [12] 3380 	mov	r7,a
      001100 7E 00            [12] 3381 	mov	r6,#0x00
      001102 7D 40            [12] 3382 	mov	r5,#0x40
      001104 E5*00            [12] 3383 	mov	a,_bp
      001106 24 04            [12] 3384 	add	a,#0x04
      001108 F8               [12] 3385 	mov	r0,a
      001109 74 0B            [12] 3386 	mov	a,#0x0b
      00110B 26               [12] 3387 	add	a,@r0
      00110C FA               [12] 3388 	mov	r2,a
      00110D E4               [12] 3389 	clr	a
      00110E 08               [12] 3390 	inc	r0
      00110F 36               [12] 3391 	addc	a,@r0
      001110 FB               [12] 3392 	mov	r3,a
      001111 08               [12] 3393 	inc	r0
      001112 86 04            [24] 3394 	mov	ar4,@r0
      001114 C0 07            [24] 3395 	push	ar7
      001116 C0 06            [24] 3396 	push	ar6
      001118 C0 05            [24] 3397 	push	ar5
      00111A 8A 82            [24] 3398 	mov	dpl,r2
      00111C 8B 83            [24] 3399 	mov	dph,r3
      00111E 8C F0            [24] 3400 	mov	b,r4
      001120 12r00r00         [24] 3401 	lcall	_stack_pop
      001123 AE 82            [24] 3402 	mov	r6,dpl
      001125 AF 83            [24] 3403 	mov	r7,dph
      001127 15 81            [12] 3404 	dec	sp
      001129 15 81            [12] 3405 	dec	sp
      00112B 15 81            [12] 3406 	dec	sp
      00112D EE               [12] 3407 	mov	a,r6
      00112E 4F               [12] 3408 	orl	a,r7
      00112F 70 58            [24] 3409 	jnz	00166$
                                   3410 ;	calc.c:229: (void)stack_push(&ctx->s, d0);
      001131 E5*00            [12] 3411 	mov	a,_bp
      001133 24 04            [12] 3412 	add	a,#0x04
      001135 F8               [12] 3413 	mov	r0,a
      001136 74 0B            [12] 3414 	mov	a,#0x0b
      001138 26               [12] 3415 	add	a,@r0
      001139 FD               [12] 3416 	mov	r5,a
      00113A E4               [12] 3417 	clr	a
      00113B 08               [12] 3418 	inc	r0
      00113C 36               [12] 3419 	addc	a,@r0
      00113D FE               [12] 3420 	mov	r6,a
      00113E 08               [12] 3421 	inc	r0
      00113F 86 07            [24] 3422 	mov	ar7,@r0
      001141 E5*00            [12] 3423 	mov	a,_bp
      001143 24 07            [12] 3424 	add	a,#0x07
      001145 F8               [12] 3425 	mov	r0,a
      001146 E6               [12] 3426 	mov	a,@r0
      001147 C0 E0            [24] 3427 	push	acc
      001149 08               [12] 3428 	inc	r0
      00114A E6               [12] 3429 	mov	a,@r0
      00114B C0 E0            [24] 3430 	push	acc
      00114D 08               [12] 3431 	inc	r0
      00114E E6               [12] 3432 	mov	a,@r0
      00114F C0 E0            [24] 3433 	push	acc
      001151 08               [12] 3434 	inc	r0
      001152 E6               [12] 3435 	mov	a,@r0
      001153 C0 E0            [24] 3436 	push	acc
      001155 8D 82            [24] 3437 	mov	dpl,r5
      001157 8E 83            [24] 3438 	mov	dph,r6
      001159 8F F0            [24] 3439 	mov	b,r7
      00115B 12r00r00         [24] 3440 	lcall	_stack_push
      00115E E5 81            [12] 3441 	mov	a,sp
      001160 24 FC            [12] 3442 	add	a,#0xfc
      001162 F5 81            [12] 3443 	mov	sp,a
                                   3444 ;	calc.c:230: printstr("\r\nstack underflow\r\n");
      001164 7Dr15            [12] 3445 	mov	r5,#___str_2
      001166 7Es00            [12] 3446 	mov	r6,#(___str_2 >> 8)
      001168 7F 80            [12] 3447 	mov	r7,#0x80
                                   3448 ;	calc.c:50: return;
      00116A                       3449 00314$:
                                   3450 ;	calc.c:48: for (; *s; s++) putchar(*s);
      00116A 8D 82            [24] 3451 	mov	dpl,r5
      00116C 8E 83            [24] 3452 	mov	dph,r6
      00116E 8F F0            [24] 3453 	mov	b,r7
      001170 12r00r00         [24] 3454 	lcall	__gptrget
      001173 FC               [12] 3455 	mov	r4,a
      001174 70 03            [24] 3456 	jnz	00845$
      001176 02r14rF7         [24] 3457 	ljmp	00190$
      001179                       3458 00845$:
      001179 7B 00            [12] 3459 	mov	r3,#0x00
      00117B 8C 82            [24] 3460 	mov	dpl,r4
      00117D 8B 83            [24] 3461 	mov	dph,r3
      00117F 12r00r00         [24] 3462 	lcall	_putchar
      001182 0D               [12] 3463 	inc	r5
                                   3464 ;	calc.c:230: printstr("\r\nstack underflow\r\n");
      001183 BD 00 E4         [24] 3465 	cjne	r5,#0x00,00314$
      001186 0E               [12] 3466 	inc	r6
      001187 80 E1            [24] 3467 	sjmp	00314$
      001189                       3468 00166$:
                                   3469 ;	calc.c:232: d1 &= d0;
      001189 E5*00            [12] 3470 	mov	a,_bp
      00118B 24 0B            [12] 3471 	add	a,#0x0b
      00118D F8               [12] 3472 	mov	r0,a
      00118E E5*00            [12] 3473 	mov	a,_bp
      001190 24 07            [12] 3474 	add	a,#0x07
      001192 F9               [12] 3475 	mov	r1,a
      001193 E7               [12] 3476 	mov	a,@r1
      001194 56               [12] 3477 	anl	a,@r0
      001195 F6               [12] 3478 	mov	@r0,a
      001196 09               [12] 3479 	inc	r1
      001197 E7               [12] 3480 	mov	a,@r1
      001198 08               [12] 3481 	inc	r0
      001199 56               [12] 3482 	anl	a,@r0
      00119A F6               [12] 3483 	mov	@r0,a
      00119B 09               [12] 3484 	inc	r1
      00119C E7               [12] 3485 	mov	a,@r1
      00119D 08               [12] 3486 	inc	r0
      00119E 56               [12] 3487 	anl	a,@r0
      00119F F6               [12] 3488 	mov	@r0,a
      0011A0 09               [12] 3489 	inc	r1
      0011A1 E7               [12] 3490 	mov	a,@r1
      0011A2 08               [12] 3491 	inc	r0
      0011A3 56               [12] 3492 	anl	a,@r0
      0011A4 F6               [12] 3493 	mov	@r0,a
                                   3494 ;	calc.c:233: (void)stack_push(&ctx->s, d1);
      0011A5 E5*00            [12] 3495 	mov	a,_bp
      0011A7 24 04            [12] 3496 	add	a,#0x04
      0011A9 F8               [12] 3497 	mov	r0,a
      0011AA 74 0B            [12] 3498 	mov	a,#0x0b
      0011AC 26               [12] 3499 	add	a,@r0
      0011AD FD               [12] 3500 	mov	r5,a
      0011AE E4               [12] 3501 	clr	a
      0011AF 08               [12] 3502 	inc	r0
      0011B0 36               [12] 3503 	addc	a,@r0
      0011B1 FE               [12] 3504 	mov	r6,a
      0011B2 08               [12] 3505 	inc	r0
      0011B3 86 07            [24] 3506 	mov	ar7,@r0
      0011B5 E5*00            [12] 3507 	mov	a,_bp
      0011B7 24 0B            [12] 3508 	add	a,#0x0b
      0011B9 F8               [12] 3509 	mov	r0,a
      0011BA E6               [12] 3510 	mov	a,@r0
      0011BB C0 E0            [24] 3511 	push	acc
      0011BD 08               [12] 3512 	inc	r0
      0011BE E6               [12] 3513 	mov	a,@r0
      0011BF C0 E0            [24] 3514 	push	acc
      0011C1 08               [12] 3515 	inc	r0
      0011C2 E6               [12] 3516 	mov	a,@r0
      0011C3 C0 E0            [24] 3517 	push	acc
      0011C5 08               [12] 3518 	inc	r0
      0011C6 E6               [12] 3519 	mov	a,@r0
      0011C7 C0 E0            [24] 3520 	push	acc
      0011C9 8D 82            [24] 3521 	mov	dpl,r5
      0011CB 8E 83            [24] 3522 	mov	dph,r6
      0011CD 8F F0            [24] 3523 	mov	b,r7
      0011CF 12r00r00         [24] 3524 	lcall	_stack_push
      0011D2 E5 81            [12] 3525 	mov	a,sp
      0011D4 24 FC            [12] 3526 	add	a,#0xfc
      0011D6 F5 81            [12] 3527 	mov	sp,a
                                   3528 ;	calc.c:235: break;
      0011D8 02r14rF7         [24] 3529 	ljmp	00190$
                                   3530 ;	calc.c:236: case '|':
      0011DB                       3531 00171$:
                                   3532 ;	calc.c:237: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      0011DB E5*00            [12] 3533 	mov	a,_bp
      0011DD 24 07            [12] 3534 	add	a,#0x07
      0011DF FF               [12] 3535 	mov	r7,a
      0011E0 7E 00            [12] 3536 	mov	r6,#0x00
      0011E2 7D 40            [12] 3537 	mov	r5,#0x40
      0011E4 E5*00            [12] 3538 	mov	a,_bp
      0011E6 24 04            [12] 3539 	add	a,#0x04
      0011E8 F8               [12] 3540 	mov	r0,a
      0011E9 74 0B            [12] 3541 	mov	a,#0x0b
      0011EB 26               [12] 3542 	add	a,@r0
      0011EC FA               [12] 3543 	mov	r2,a
      0011ED E4               [12] 3544 	clr	a
      0011EE 08               [12] 3545 	inc	r0
      0011EF 36               [12] 3546 	addc	a,@r0
      0011F0 FB               [12] 3547 	mov	r3,a
      0011F1 08               [12] 3548 	inc	r0
      0011F2 86 04            [24] 3549 	mov	ar4,@r0
      0011F4 C0 07            [24] 3550 	push	ar7
      0011F6 C0 06            [24] 3551 	push	ar6
      0011F8 C0 05            [24] 3552 	push	ar5
      0011FA 8A 82            [24] 3553 	mov	dpl,r2
      0011FC 8B 83            [24] 3554 	mov	dph,r3
      0011FE 8C F0            [24] 3555 	mov	b,r4
      001200 12r00r00         [24] 3556 	lcall	_stack_pop
      001203 AE 82            [24] 3557 	mov	r6,dpl
      001205 AF 83            [24] 3558 	mov	r7,dph
      001207 15 81            [12] 3559 	dec	sp
      001209 15 81            [12] 3560 	dec	sp
      00120B 15 81            [12] 3561 	dec	sp
      00120D EE               [12] 3562 	mov	a,r6
      00120E 4F               [12] 3563 	orl	a,r7
      00120F 70 25            [24] 3564 	jnz	00176$
      001211 7Dr15            [12] 3565 	mov	r5,#___str_2
      001213 7Es00            [12] 3566 	mov	r6,#(___str_2 >> 8)
      001215 7F 80            [12] 3567 	mov	r7,#0x80
                                   3568 ;	calc.c:50: return;
      001217                       3569 00317$:
                                   3570 ;	calc.c:48: for (; *s; s++) putchar(*s);
      001217 8D 82            [24] 3571 	mov	dpl,r5
      001219 8E 83            [24] 3572 	mov	dph,r6
      00121B 8F F0            [24] 3573 	mov	b,r7
      00121D 12r00r00         [24] 3574 	lcall	__gptrget
      001220 FC               [12] 3575 	mov	r4,a
      001221 70 03            [24] 3576 	jnz	00848$
      001223 02r14rF7         [24] 3577 	ljmp	00190$
      001226                       3578 00848$:
      001226 7B 00            [12] 3579 	mov	r3,#0x00
      001228 8C 82            [24] 3580 	mov	dpl,r4
      00122A 8B 83            [24] 3581 	mov	dph,r3
      00122C 12r00r00         [24] 3582 	lcall	_putchar
      00122F 0D               [12] 3583 	inc	r5
                                   3584 ;	calc.c:237: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      001230 BD 00 E4         [24] 3585 	cjne	r5,#0x00,00317$
      001233 0E               [12] 3586 	inc	r6
      001234 80 E1            [24] 3587 	sjmp	00317$
      001236                       3588 00176$:
                                   3589 ;	calc.c:238: else if (!stack_pop(&ctx->s, &d1)) {
      001236 E5*00            [12] 3590 	mov	a,_bp
      001238 24 0B            [12] 3591 	add	a,#0x0b
      00123A FF               [12] 3592 	mov	r7,a
      00123B 7E 00            [12] 3593 	mov	r6,#0x00
      00123D 7D 40            [12] 3594 	mov	r5,#0x40
      00123F E5*00            [12] 3595 	mov	a,_bp
      001241 24 04            [12] 3596 	add	a,#0x04
      001243 F8               [12] 3597 	mov	r0,a
      001244 74 0B            [12] 3598 	mov	a,#0x0b
      001246 26               [12] 3599 	add	a,@r0
      001247 FA               [12] 3600 	mov	r2,a
      001248 E4               [12] 3601 	clr	a
      001249 08               [12] 3602 	inc	r0
      00124A 36               [12] 3603 	addc	a,@r0
      00124B FB               [12] 3604 	mov	r3,a
      00124C 08               [12] 3605 	inc	r0
      00124D 86 04            [24] 3606 	mov	ar4,@r0
      00124F C0 07            [24] 3607 	push	ar7
      001251 C0 06            [24] 3608 	push	ar6
      001253 C0 05            [24] 3609 	push	ar5
      001255 8A 82            [24] 3610 	mov	dpl,r2
      001257 8B 83            [24] 3611 	mov	dph,r3
      001259 8C F0            [24] 3612 	mov	b,r4
      00125B 12r00r00         [24] 3613 	lcall	_stack_pop
      00125E AE 82            [24] 3614 	mov	r6,dpl
      001260 AF 83            [24] 3615 	mov	r7,dph
      001262 15 81            [12] 3616 	dec	sp
      001264 15 81            [12] 3617 	dec	sp
      001266 15 81            [12] 3618 	dec	sp
      001268 EE               [12] 3619 	mov	a,r6
      001269 4F               [12] 3620 	orl	a,r7
      00126A 70 58            [24] 3621 	jnz	00173$
                                   3622 ;	calc.c:239: (void)stack_push(&ctx->s, d0);
      00126C E5*00            [12] 3623 	mov	a,_bp
      00126E 24 04            [12] 3624 	add	a,#0x04
      001270 F8               [12] 3625 	mov	r0,a
      001271 74 0B            [12] 3626 	mov	a,#0x0b
      001273 26               [12] 3627 	add	a,@r0
      001274 FD               [12] 3628 	mov	r5,a
      001275 E4               [12] 3629 	clr	a
      001276 08               [12] 3630 	inc	r0
      001277 36               [12] 3631 	addc	a,@r0
      001278 FE               [12] 3632 	mov	r6,a
      001279 08               [12] 3633 	inc	r0
      00127A 86 07            [24] 3634 	mov	ar7,@r0
      00127C E5*00            [12] 3635 	mov	a,_bp
      00127E 24 07            [12] 3636 	add	a,#0x07
      001280 F8               [12] 3637 	mov	r0,a
      001281 E6               [12] 3638 	mov	a,@r0
      001282 C0 E0            [24] 3639 	push	acc
      001284 08               [12] 3640 	inc	r0
      001285 E6               [12] 3641 	mov	a,@r0
      001286 C0 E0            [24] 3642 	push	acc
      001288 08               [12] 3643 	inc	r0
      001289 E6               [12] 3644 	mov	a,@r0
      00128A C0 E0            [24] 3645 	push	acc
      00128C 08               [12] 3646 	inc	r0
      00128D E6               [12] 3647 	mov	a,@r0
      00128E C0 E0            [24] 3648 	push	acc
      001290 8D 82            [24] 3649 	mov	dpl,r5
      001292 8E 83            [24] 3650 	mov	dph,r6
      001294 8F F0            [24] 3651 	mov	b,r7
      001296 12r00r00         [24] 3652 	lcall	_stack_push
      001299 E5 81            [12] 3653 	mov	a,sp
      00129B 24 FC            [12] 3654 	add	a,#0xfc
      00129D F5 81            [12] 3655 	mov	sp,a
                                   3656 ;	calc.c:240: printstr("\r\nstack underflow\r\n");
      00129F 7Dr15            [12] 3657 	mov	r5,#___str_2
      0012A1 7Es00            [12] 3658 	mov	r6,#(___str_2 >> 8)
      0012A3 7F 80            [12] 3659 	mov	r7,#0x80
                                   3660 ;	calc.c:50: return;
      0012A5                       3661 00320$:
                                   3662 ;	calc.c:48: for (; *s; s++) putchar(*s);
      0012A5 8D 82            [24] 3663 	mov	dpl,r5
      0012A7 8E 83            [24] 3664 	mov	dph,r6
      0012A9 8F F0            [24] 3665 	mov	b,r7
      0012AB 12r00r00         [24] 3666 	lcall	__gptrget
      0012AE FC               [12] 3667 	mov	r4,a
      0012AF 70 03            [24] 3668 	jnz	00851$
      0012B1 02r14rF7         [24] 3669 	ljmp	00190$
      0012B4                       3670 00851$:
      0012B4 7B 00            [12] 3671 	mov	r3,#0x00
      0012B6 8C 82            [24] 3672 	mov	dpl,r4
      0012B8 8B 83            [24] 3673 	mov	dph,r3
      0012BA 12r00r00         [24] 3674 	lcall	_putchar
      0012BD 0D               [12] 3675 	inc	r5
                                   3676 ;	calc.c:240: printstr("\r\nstack underflow\r\n");
      0012BE BD 00 E4         [24] 3677 	cjne	r5,#0x00,00320$
      0012C1 0E               [12] 3678 	inc	r6
      0012C2 80 E1            [24] 3679 	sjmp	00320$
      0012C4                       3680 00173$:
                                   3681 ;	calc.c:242: d1 |= d0;
      0012C4 E5*00            [12] 3682 	mov	a,_bp
      0012C6 24 0B            [12] 3683 	add	a,#0x0b
      0012C8 F8               [12] 3684 	mov	r0,a
      0012C9 E5*00            [12] 3685 	mov	a,_bp
      0012CB 24 07            [12] 3686 	add	a,#0x07
      0012CD F9               [12] 3687 	mov	r1,a
      0012CE E7               [12] 3688 	mov	a,@r1
      0012CF 46               [12] 3689 	orl	a,@r0
      0012D0 F6               [12] 3690 	mov	@r0,a
      0012D1 09               [12] 3691 	inc	r1
      0012D2 E7               [12] 3692 	mov	a,@r1
      0012D3 08               [12] 3693 	inc	r0
      0012D4 46               [12] 3694 	orl	a,@r0
      0012D5 F6               [12] 3695 	mov	@r0,a
      0012D6 09               [12] 3696 	inc	r1
      0012D7 E7               [12] 3697 	mov	a,@r1
      0012D8 08               [12] 3698 	inc	r0
      0012D9 46               [12] 3699 	orl	a,@r0
      0012DA F6               [12] 3700 	mov	@r0,a
      0012DB 09               [12] 3701 	inc	r1
      0012DC E7               [12] 3702 	mov	a,@r1
      0012DD 08               [12] 3703 	inc	r0
      0012DE 46               [12] 3704 	orl	a,@r0
      0012DF F6               [12] 3705 	mov	@r0,a
                                   3706 ;	calc.c:243: (void)stack_push(&ctx->s, d1);
      0012E0 E5*00            [12] 3707 	mov	a,_bp
      0012E2 24 04            [12] 3708 	add	a,#0x04
      0012E4 F8               [12] 3709 	mov	r0,a
      0012E5 74 0B            [12] 3710 	mov	a,#0x0b
      0012E7 26               [12] 3711 	add	a,@r0
      0012E8 FD               [12] 3712 	mov	r5,a
      0012E9 E4               [12] 3713 	clr	a
      0012EA 08               [12] 3714 	inc	r0
      0012EB 36               [12] 3715 	addc	a,@r0
      0012EC FE               [12] 3716 	mov	r6,a
      0012ED 08               [12] 3717 	inc	r0
      0012EE 86 07            [24] 3718 	mov	ar7,@r0
      0012F0 E5*00            [12] 3719 	mov	a,_bp
      0012F2 24 0B            [12] 3720 	add	a,#0x0b
      0012F4 F8               [12] 3721 	mov	r0,a
      0012F5 E6               [12] 3722 	mov	a,@r0
      0012F6 C0 E0            [24] 3723 	push	acc
      0012F8 08               [12] 3724 	inc	r0
      0012F9 E6               [12] 3725 	mov	a,@r0
      0012FA C0 E0            [24] 3726 	push	acc
      0012FC 08               [12] 3727 	inc	r0
      0012FD E6               [12] 3728 	mov	a,@r0
      0012FE C0 E0            [24] 3729 	push	acc
      001300 08               [12] 3730 	inc	r0
      001301 E6               [12] 3731 	mov	a,@r0
      001302 C0 E0            [24] 3732 	push	acc
      001304 8D 82            [24] 3733 	mov	dpl,r5
      001306 8E 83            [24] 3734 	mov	dph,r6
      001308 8F F0            [24] 3735 	mov	b,r7
      00130A 12r00r00         [24] 3736 	lcall	_stack_push
      00130D E5 81            [12] 3737 	mov	a,sp
      00130F 24 FC            [12] 3738 	add	a,#0xfc
      001311 F5 81            [12] 3739 	mov	sp,a
                                   3740 ;	calc.c:245: break;
      001313 02r14rF7         [24] 3741 	ljmp	00190$
                                   3742 ;	calc.c:246: case '^':
      001316                       3743 00178$:
                                   3744 ;	calc.c:247: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      001316 E5*00            [12] 3745 	mov	a,_bp
      001318 24 07            [12] 3746 	add	a,#0x07
      00131A FF               [12] 3747 	mov	r7,a
      00131B 7E 00            [12] 3748 	mov	r6,#0x00
      00131D 7D 40            [12] 3749 	mov	r5,#0x40
      00131F E5*00            [12] 3750 	mov	a,_bp
      001321 24 04            [12] 3751 	add	a,#0x04
      001323 F8               [12] 3752 	mov	r0,a
      001324 74 0B            [12] 3753 	mov	a,#0x0b
      001326 26               [12] 3754 	add	a,@r0
      001327 FA               [12] 3755 	mov	r2,a
      001328 E4               [12] 3756 	clr	a
      001329 08               [12] 3757 	inc	r0
      00132A 36               [12] 3758 	addc	a,@r0
      00132B FB               [12] 3759 	mov	r3,a
      00132C 08               [12] 3760 	inc	r0
      00132D 86 04            [24] 3761 	mov	ar4,@r0
      00132F C0 07            [24] 3762 	push	ar7
      001331 C0 06            [24] 3763 	push	ar6
      001333 C0 05            [24] 3764 	push	ar5
      001335 8A 82            [24] 3765 	mov	dpl,r2
      001337 8B 83            [24] 3766 	mov	dph,r3
      001339 8C F0            [24] 3767 	mov	b,r4
      00133B 12r00r00         [24] 3768 	lcall	_stack_pop
      00133E AE 82            [24] 3769 	mov	r6,dpl
      001340 AF 83            [24] 3770 	mov	r7,dph
      001342 15 81            [12] 3771 	dec	sp
      001344 15 81            [12] 3772 	dec	sp
      001346 15 81            [12] 3773 	dec	sp
      001348 EE               [12] 3774 	mov	a,r6
      001349 4F               [12] 3775 	orl	a,r7
      00134A 70 25            [24] 3776 	jnz	00183$
      00134C 7Dr15            [12] 3777 	mov	r5,#___str_2
      00134E 7Es00            [12] 3778 	mov	r6,#(___str_2 >> 8)
      001350 7F 80            [12] 3779 	mov	r7,#0x80
                                   3780 ;	calc.c:50: return;
      001352                       3781 00323$:
                                   3782 ;	calc.c:48: for (; *s; s++) putchar(*s);
      001352 8D 82            [24] 3783 	mov	dpl,r5
      001354 8E 83            [24] 3784 	mov	dph,r6
      001356 8F F0            [24] 3785 	mov	b,r7
      001358 12r00r00         [24] 3786 	lcall	__gptrget
      00135B FC               [12] 3787 	mov	r4,a
      00135C 70 03            [24] 3788 	jnz	00854$
      00135E 02r14rF7         [24] 3789 	ljmp	00190$
      001361                       3790 00854$:
      001361 7B 00            [12] 3791 	mov	r3,#0x00
      001363 8C 82            [24] 3792 	mov	dpl,r4
      001365 8B 83            [24] 3793 	mov	dph,r3
      001367 12r00r00         [24] 3794 	lcall	_putchar
      00136A 0D               [12] 3795 	inc	r5
                                   3796 ;	calc.c:247: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      00136B BD 00 E4         [24] 3797 	cjne	r5,#0x00,00323$
      00136E 0E               [12] 3798 	inc	r6
      00136F 80 E1            [24] 3799 	sjmp	00323$
      001371                       3800 00183$:
                                   3801 ;	calc.c:248: else if (!stack_pop(&ctx->s, &d1)) {
      001371 E5*00            [12] 3802 	mov	a,_bp
      001373 24 0B            [12] 3803 	add	a,#0x0b
      001375 FF               [12] 3804 	mov	r7,a
      001376 7E 00            [12] 3805 	mov	r6,#0x00
      001378 7D 40            [12] 3806 	mov	r5,#0x40
      00137A E5*00            [12] 3807 	mov	a,_bp
      00137C 24 04            [12] 3808 	add	a,#0x04
      00137E F8               [12] 3809 	mov	r0,a
      00137F 74 0B            [12] 3810 	mov	a,#0x0b
      001381 26               [12] 3811 	add	a,@r0
      001382 FA               [12] 3812 	mov	r2,a
      001383 E4               [12] 3813 	clr	a
      001384 08               [12] 3814 	inc	r0
      001385 36               [12] 3815 	addc	a,@r0
      001386 FB               [12] 3816 	mov	r3,a
      001387 08               [12] 3817 	inc	r0
      001388 86 04            [24] 3818 	mov	ar4,@r0
      00138A C0 07            [24] 3819 	push	ar7
      00138C C0 06            [24] 3820 	push	ar6
      00138E C0 05            [24] 3821 	push	ar5
      001390 8A 82            [24] 3822 	mov	dpl,r2
      001392 8B 83            [24] 3823 	mov	dph,r3
      001394 8C F0            [24] 3824 	mov	b,r4
      001396 12r00r00         [24] 3825 	lcall	_stack_pop
      001399 AE 82            [24] 3826 	mov	r6,dpl
      00139B AF 83            [24] 3827 	mov	r7,dph
      00139D 15 81            [12] 3828 	dec	sp
      00139F 15 81            [12] 3829 	dec	sp
      0013A1 15 81            [12] 3830 	dec	sp
      0013A3 EE               [12] 3831 	mov	a,r6
      0013A4 4F               [12] 3832 	orl	a,r7
      0013A5 70 58            [24] 3833 	jnz	00180$
                                   3834 ;	calc.c:249: (void)stack_push(&ctx->s, d0);
      0013A7 E5*00            [12] 3835 	mov	a,_bp
      0013A9 24 04            [12] 3836 	add	a,#0x04
      0013AB F8               [12] 3837 	mov	r0,a
      0013AC 74 0B            [12] 3838 	mov	a,#0x0b
      0013AE 26               [12] 3839 	add	a,@r0
      0013AF FD               [12] 3840 	mov	r5,a
      0013B0 E4               [12] 3841 	clr	a
      0013B1 08               [12] 3842 	inc	r0
      0013B2 36               [12] 3843 	addc	a,@r0
      0013B3 FE               [12] 3844 	mov	r6,a
      0013B4 08               [12] 3845 	inc	r0
      0013B5 86 07            [24] 3846 	mov	ar7,@r0
      0013B7 E5*00            [12] 3847 	mov	a,_bp
      0013B9 24 07            [12] 3848 	add	a,#0x07
      0013BB F8               [12] 3849 	mov	r0,a
      0013BC E6               [12] 3850 	mov	a,@r0
      0013BD C0 E0            [24] 3851 	push	acc
      0013BF 08               [12] 3852 	inc	r0
      0013C0 E6               [12] 3853 	mov	a,@r0
      0013C1 C0 E0            [24] 3854 	push	acc
      0013C3 08               [12] 3855 	inc	r0
      0013C4 E6               [12] 3856 	mov	a,@r0
      0013C5 C0 E0            [24] 3857 	push	acc
      0013C7 08               [12] 3858 	inc	r0
      0013C8 E6               [12] 3859 	mov	a,@r0
      0013C9 C0 E0            [24] 3860 	push	acc
      0013CB 8D 82            [24] 3861 	mov	dpl,r5
      0013CD 8E 83            [24] 3862 	mov	dph,r6
      0013CF 8F F0            [24] 3863 	mov	b,r7
      0013D1 12r00r00         [24] 3864 	lcall	_stack_push
      0013D4 E5 81            [12] 3865 	mov	a,sp
      0013D6 24 FC            [12] 3866 	add	a,#0xfc
      0013D8 F5 81            [12] 3867 	mov	sp,a
                                   3868 ;	calc.c:250: printstr("\r\nstack underflow\r\n");
      0013DA 7Dr15            [12] 3869 	mov	r5,#___str_2
      0013DC 7Es00            [12] 3870 	mov	r6,#(___str_2 >> 8)
      0013DE 7F 80            [12] 3871 	mov	r7,#0x80
                                   3872 ;	calc.c:50: return;
      0013E0                       3873 00326$:
                                   3874 ;	calc.c:48: for (; *s; s++) putchar(*s);
      0013E0 8D 82            [24] 3875 	mov	dpl,r5
      0013E2 8E 83            [24] 3876 	mov	dph,r6
      0013E4 8F F0            [24] 3877 	mov	b,r7
      0013E6 12r00r00         [24] 3878 	lcall	__gptrget
      0013E9 FC               [12] 3879 	mov	r4,a
      0013EA 70 03            [24] 3880 	jnz	00857$
      0013EC 02r14rF7         [24] 3881 	ljmp	00190$
      0013EF                       3882 00857$:
      0013EF 7B 00            [12] 3883 	mov	r3,#0x00
      0013F1 8C 82            [24] 3884 	mov	dpl,r4
      0013F3 8B 83            [24] 3885 	mov	dph,r3
      0013F5 12r00r00         [24] 3886 	lcall	_putchar
      0013F8 0D               [12] 3887 	inc	r5
                                   3888 ;	calc.c:250: printstr("\r\nstack underflow\r\n");
      0013F9 BD 00 E4         [24] 3889 	cjne	r5,#0x00,00326$
      0013FC 0E               [12] 3890 	inc	r6
      0013FD 80 E1            [24] 3891 	sjmp	00326$
      0013FF                       3892 00180$:
                                   3893 ;	calc.c:252: d1 ^= d0;
      0013FF E5*00            [12] 3894 	mov	a,_bp
      001401 24 0B            [12] 3895 	add	a,#0x0b
      001403 F8               [12] 3896 	mov	r0,a
      001404 E5*00            [12] 3897 	mov	a,_bp
      001406 24 07            [12] 3898 	add	a,#0x07
      001408 F9               [12] 3899 	mov	r1,a
      001409 E7               [12] 3900 	mov	a,@r1
      00140A 66               [12] 3901 	xrl	a,@r0
      00140B F6               [12] 3902 	mov	@r0,a
      00140C 09               [12] 3903 	inc	r1
      00140D E7               [12] 3904 	mov	a,@r1
      00140E 08               [12] 3905 	inc	r0
      00140F 66               [12] 3906 	xrl	a,@r0
      001410 F6               [12] 3907 	mov	@r0,a
      001411 09               [12] 3908 	inc	r1
      001412 E7               [12] 3909 	mov	a,@r1
      001413 08               [12] 3910 	inc	r0
      001414 66               [12] 3911 	xrl	a,@r0
      001415 F6               [12] 3912 	mov	@r0,a
      001416 09               [12] 3913 	inc	r1
      001417 E7               [12] 3914 	mov	a,@r1
      001418 08               [12] 3915 	inc	r0
      001419 66               [12] 3916 	xrl	a,@r0
      00141A F6               [12] 3917 	mov	@r0,a
                                   3918 ;	calc.c:253: (void)stack_push(&ctx->s, d1);
      00141B E5*00            [12] 3919 	mov	a,_bp
      00141D 24 04            [12] 3920 	add	a,#0x04
      00141F F8               [12] 3921 	mov	r0,a
      001420 74 0B            [12] 3922 	mov	a,#0x0b
      001422 26               [12] 3923 	add	a,@r0
      001423 FD               [12] 3924 	mov	r5,a
      001424 E4               [12] 3925 	clr	a
      001425 08               [12] 3926 	inc	r0
      001426 36               [12] 3927 	addc	a,@r0
      001427 FE               [12] 3928 	mov	r6,a
      001428 08               [12] 3929 	inc	r0
      001429 86 07            [24] 3930 	mov	ar7,@r0
      00142B E5*00            [12] 3931 	mov	a,_bp
      00142D 24 0B            [12] 3932 	add	a,#0x0b
      00142F F8               [12] 3933 	mov	r0,a
      001430 E6               [12] 3934 	mov	a,@r0
      001431 C0 E0            [24] 3935 	push	acc
      001433 08               [12] 3936 	inc	r0
      001434 E6               [12] 3937 	mov	a,@r0
      001435 C0 E0            [24] 3938 	push	acc
      001437 08               [12] 3939 	inc	r0
      001438 E6               [12] 3940 	mov	a,@r0
      001439 C0 E0            [24] 3941 	push	acc
      00143B 08               [12] 3942 	inc	r0
      00143C E6               [12] 3943 	mov	a,@r0
      00143D C0 E0            [24] 3944 	push	acc
      00143F 8D 82            [24] 3945 	mov	dpl,r5
      001441 8E 83            [24] 3946 	mov	dph,r6
      001443 8F F0            [24] 3947 	mov	b,r7
      001445 12r00r00         [24] 3948 	lcall	_stack_push
      001448 E5 81            [12] 3949 	mov	a,sp
      00144A 24 FC            [12] 3950 	add	a,#0xfc
      00144C F5 81            [12] 3951 	mov	sp,a
                                   3952 ;	calc.c:255: break;
      00144E 02r14rF7         [24] 3953 	ljmp	00190$
                                   3954 ;	calc.c:256: case '~':
      001451                       3955 00185$:
                                   3956 ;	calc.c:257: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      001451 E5*00            [12] 3957 	mov	a,_bp
      001453 24 07            [12] 3958 	add	a,#0x07
      001455 FF               [12] 3959 	mov	r7,a
      001456 7E 00            [12] 3960 	mov	r6,#0x00
      001458 7D 40            [12] 3961 	mov	r5,#0x40
      00145A E5*00            [12] 3962 	mov	a,_bp
      00145C 24 04            [12] 3963 	add	a,#0x04
      00145E F8               [12] 3964 	mov	r0,a
      00145F 74 0B            [12] 3965 	mov	a,#0x0b
      001461 26               [12] 3966 	add	a,@r0
      001462 FA               [12] 3967 	mov	r2,a
      001463 E4               [12] 3968 	clr	a
      001464 08               [12] 3969 	inc	r0
      001465 36               [12] 3970 	addc	a,@r0
      001466 FB               [12] 3971 	mov	r3,a
      001467 08               [12] 3972 	inc	r0
      001468 86 04            [24] 3973 	mov	ar4,@r0
      00146A C0 07            [24] 3974 	push	ar7
      00146C C0 06            [24] 3975 	push	ar6
      00146E C0 05            [24] 3976 	push	ar5
      001470 8A 82            [24] 3977 	mov	dpl,r2
      001472 8B 83            [24] 3978 	mov	dph,r3
      001474 8C F0            [24] 3979 	mov	b,r4
      001476 12r00r00         [24] 3980 	lcall	_stack_pop
      001479 AE 82            [24] 3981 	mov	r6,dpl
      00147B AF 83            [24] 3982 	mov	r7,dph
      00147D 15 81            [12] 3983 	dec	sp
      00147F 15 81            [12] 3984 	dec	sp
      001481 15 81            [12] 3985 	dec	sp
      001483 EE               [12] 3986 	mov	a,r6
      001484 4F               [12] 3987 	orl	a,r7
      001485 70 22            [24] 3988 	jnz	00187$
      001487 7Dr15            [12] 3989 	mov	r5,#___str_2
      001489 7Es00            [12] 3990 	mov	r6,#(___str_2 >> 8)
      00148B 7F 80            [12] 3991 	mov	r7,#0x80
                                   3992 ;	calc.c:50: return;
      00148D                       3993 00329$:
                                   3994 ;	calc.c:48: for (; *s; s++) putchar(*s);
      00148D 8D 82            [24] 3995 	mov	dpl,r5
      00148F 8E 83            [24] 3996 	mov	dph,r6
      001491 8F F0            [24] 3997 	mov	b,r7
      001493 12r00r00         [24] 3998 	lcall	__gptrget
      001496 FC               [12] 3999 	mov	r4,a
      001497 60 5E            [24] 4000 	jz	00190$
      001499 7B 00            [12] 4001 	mov	r3,#0x00
      00149B 8C 82            [24] 4002 	mov	dpl,r4
      00149D 8B 83            [24] 4003 	mov	dph,r3
      00149F 12r00r00         [24] 4004 	lcall	_putchar
      0014A2 0D               [12] 4005 	inc	r5
                                   4006 ;	calc.c:257: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      0014A3 BD 00 E7         [24] 4007 	cjne	r5,#0x00,00329$
      0014A6 0E               [12] 4008 	inc	r6
      0014A7 80 E4            [24] 4009 	sjmp	00329$
      0014A9                       4010 00187$:
                                   4011 ;	calc.c:259: d0 = ~d0;
      0014A9 E5*00            [12] 4012 	mov	a,_bp
      0014AB 24 07            [12] 4013 	add	a,#0x07
      0014AD F8               [12] 4014 	mov	r0,a
      0014AE E6               [12] 4015 	mov	a,@r0
      0014AF F4               [12] 4016 	cpl	a
      0014B0 F6               [12] 4017 	mov	@r0,a
      0014B1 08               [12] 4018 	inc	r0
      0014B2 E6               [12] 4019 	mov	a,@r0
      0014B3 F4               [12] 4020 	cpl	a
      0014B4 F6               [12] 4021 	mov	@r0,a
      0014B5 08               [12] 4022 	inc	r0
      0014B6 E6               [12] 4023 	mov	a,@r0
      0014B7 F4               [12] 4024 	cpl	a
      0014B8 F6               [12] 4025 	mov	@r0,a
      0014B9 08               [12] 4026 	inc	r0
      0014BA E6               [12] 4027 	mov	a,@r0
      0014BB F4               [12] 4028 	cpl	a
      0014BC F6               [12] 4029 	mov	@r0,a
                                   4030 ;	calc.c:260: (void)stack_push(&ctx->s, d0);
      0014BD E5*00            [12] 4031 	mov	a,_bp
      0014BF 24 04            [12] 4032 	add	a,#0x04
      0014C1 F8               [12] 4033 	mov	r0,a
      0014C2 74 0B            [12] 4034 	mov	a,#0x0b
      0014C4 26               [12] 4035 	add	a,@r0
      0014C5 FD               [12] 4036 	mov	r5,a
      0014C6 E4               [12] 4037 	clr	a
      0014C7 08               [12] 4038 	inc	r0
      0014C8 36               [12] 4039 	addc	a,@r0
      0014C9 FE               [12] 4040 	mov	r6,a
      0014CA 08               [12] 4041 	inc	r0
      0014CB 86 07            [24] 4042 	mov	ar7,@r0
      0014CD E5*00            [12] 4043 	mov	a,_bp
      0014CF 24 07            [12] 4044 	add	a,#0x07
      0014D1 F8               [12] 4045 	mov	r0,a
      0014D2 E6               [12] 4046 	mov	a,@r0
      0014D3 C0 E0            [24] 4047 	push	acc
      0014D5 08               [12] 4048 	inc	r0
      0014D6 E6               [12] 4049 	mov	a,@r0
      0014D7 C0 E0            [24] 4050 	push	acc
      0014D9 08               [12] 4051 	inc	r0
      0014DA E6               [12] 4052 	mov	a,@r0
      0014DB C0 E0            [24] 4053 	push	acc
      0014DD 08               [12] 4054 	inc	r0
      0014DE E6               [12] 4055 	mov	a,@r0
      0014DF C0 E0            [24] 4056 	push	acc
      0014E1 8D 82            [24] 4057 	mov	dpl,r5
      0014E3 8E 83            [24] 4058 	mov	dph,r6
      0014E5 8F F0            [24] 4059 	mov	b,r7
      0014E7 12r00r00         [24] 4060 	lcall	_stack_push
      0014EA E5 81            [12] 4061 	mov	a,sp
      0014EC 24 FC            [12] 4062 	add	a,#0xfc
      0014EE F5 81            [12] 4063 	mov	sp,a
                                   4064 ;	calc.c:262: break;
                                   4065 ;	calc.c:263: default:
      0014F0 80 05            [24] 4066 	sjmp	00190$
      0014F2                       4067 00189$:
                                   4068 ;	calc.c:264: return UNDEF;
      0014F2 90 80 00         [24] 4069 	mov	dptr,#0x8000
                                   4070 ;	calc.c:265: }
      0014F5 80 03            [24] 4071 	sjmp	00331$
      0014F7                       4072 00190$:
                                   4073 ;	calc.c:267: return 1;
      0014F7 90 00 01         [24] 4074 	mov	dptr,#0x0001
      0014FA                       4075 00331$:
                                   4076 ;	calc.c:268: }
      0014FA 85*00 81         [24] 4077 	mov	sp,_bp
      0014FD D0*00            [24] 4078 	pop	_bp
      0014FF 22               [24] 4079 	ret
                                   4080 ;------------------------------------------------------------
                                   4081 ;Allocation info for local variables in function 'push_acc'
                                   4082 ;------------------------------------------------------------
                                   4083 ;delta                     Allocated to stack - _bp -5
                                   4084 ;_ctx                      Allocated to stack - _bp +1
                                   4085 ;ctx                       Allocated to registers r2 r3 r4 
                                   4086 ;__1310720061              Allocated to registers 
                                   4087 ;s                         Allocated to registers r5 r6 r7 
                                   4088 ;sloc0                     Allocated to stack - _bp +4
                                   4089 ;------------------------------------------------------------
                                   4090 ;	calc.c:270: static int push_acc(void *_ctx, delta_t *delta) __reentrant {
                                   4091 ;	-----------------------------------------
                                   4092 ;	 function push_acc
                                   4093 ;	-----------------------------------------
      001500                       4094 _push_acc:
      001500 C0*00            [24] 4095 	push	_bp
      001502 85 81*00         [24] 4096 	mov	_bp,sp
      001505 C0 82            [24] 4097 	push	dpl
      001507 C0 83            [24] 4098 	push	dph
      001509 C0 F0            [24] 4099 	push	b
      00150B E5 81            [12] 4100 	mov	a,sp
      00150D 24 04            [12] 4101 	add	a,#0x04
      00150F F5 81            [12] 4102 	mov	sp,a
                                   4103 ;	calc.c:271: struct ctx *ctx = (struct ctx *)_ctx;
      001511 A8*00            [24] 4104 	mov	r0,_bp
      001513 08               [12] 4105 	inc	r0
      001514 86 02            [24] 4106 	mov	ar2,@r0
      001516 08               [12] 4107 	inc	r0
      001517 86 03            [24] 4108 	mov	ar3,@r0
      001519 08               [12] 4109 	inc	r0
      00151A 86 04            [24] 4110 	mov	ar4,@r0
                                   4111 ;	calc.c:274: ctx->acc_valid = 0;
      00151C 74 08            [12] 4112 	mov	a,#0x08
      00151E 2A               [12] 4113 	add	a,r2
      00151F FD               [12] 4114 	mov	r5,a
      001520 E4               [12] 4115 	clr	a
      001521 3B               [12] 4116 	addc	a,r3
      001522 FE               [12] 4117 	mov	r6,a
      001523 8C 07            [24] 4118 	mov	ar7,r4
      001525 8D 82            [24] 4119 	mov	dpl,r5
      001527 8E 83            [24] 4120 	mov	dph,r6
      001529 8F F0            [24] 4121 	mov	b,r7
      00152B E4               [12] 4122 	clr	a
      00152C 12r00r00         [24] 4123 	lcall	__gptrput
                                   4124 ;	calc.c:275: if (!stack_push(&ctx->s, ctx->acc)) printstr("\r\nstack overflow\r\n");
      00152F 74 04            [12] 4125 	mov	a,#0x04
      001531 2A               [12] 4126 	add	a,r2
      001532 FF               [12] 4127 	mov	r7,a
      001533 E4               [12] 4128 	clr	a
      001534 3B               [12] 4129 	addc	a,r3
      001535 FD               [12] 4130 	mov	r5,a
      001536 8C 06            [24] 4131 	mov	ar6,r4
      001538 8F 82            [24] 4132 	mov	dpl,r7
      00153A 8D 83            [24] 4133 	mov	dph,r5
      00153C 8E F0            [24] 4134 	mov	b,r6
      00153E E5*00            [12] 4135 	mov	a,_bp
      001540 24 04            [12] 4136 	add	a,#0x04
      001542 F8               [12] 4137 	mov	r0,a
      001543 12r00r00         [24] 4138 	lcall	__gptrget
      001546 F6               [12] 4139 	mov	@r0,a
      001547 A3               [24] 4140 	inc	dptr
      001548 12r00r00         [24] 4141 	lcall	__gptrget
      00154B 08               [12] 4142 	inc	r0
      00154C F6               [12] 4143 	mov	@r0,a
      00154D A3               [24] 4144 	inc	dptr
      00154E 12r00r00         [24] 4145 	lcall	__gptrget
      001551 08               [12] 4146 	inc	r0
      001552 F6               [12] 4147 	mov	@r0,a
      001553 A3               [24] 4148 	inc	dptr
      001554 12r00r00         [24] 4149 	lcall	__gptrget
      001557 08               [12] 4150 	inc	r0
      001558 F6               [12] 4151 	mov	@r0,a
      001559 74 0B            [12] 4152 	mov	a,#0x0b
      00155B 2A               [12] 4153 	add	a,r2
      00155C FA               [12] 4154 	mov	r2,a
      00155D E4               [12] 4155 	clr	a
      00155E 3B               [12] 4156 	addc	a,r3
      00155F FB               [12] 4157 	mov	r3,a
      001560 8C 07            [24] 4158 	mov	ar7,r4
      001562 E5*00            [12] 4159 	mov	a,_bp
      001564 24 04            [12] 4160 	add	a,#0x04
      001566 F8               [12] 4161 	mov	r0,a
      001567 E6               [12] 4162 	mov	a,@r0
      001568 C0 E0            [24] 4163 	push	acc
      00156A 08               [12] 4164 	inc	r0
      00156B E6               [12] 4165 	mov	a,@r0
      00156C C0 E0            [24] 4166 	push	acc
      00156E 08               [12] 4167 	inc	r0
      00156F E6               [12] 4168 	mov	a,@r0
      001570 C0 E0            [24] 4169 	push	acc
      001572 08               [12] 4170 	inc	r0
      001573 E6               [12] 4171 	mov	a,@r0
      001574 C0 E0            [24] 4172 	push	acc
      001576 8A 82            [24] 4173 	mov	dpl,r2
      001578 8B 83            [24] 4174 	mov	dph,r3
      00157A 8F F0            [24] 4175 	mov	b,r7
      00157C 12r00r00         [24] 4176 	lcall	_stack_push
      00157F AE 82            [24] 4177 	mov	r6,dpl
      001581 AF 83            [24] 4178 	mov	r7,dph
      001583 E5 81            [12] 4179 	mov	a,sp
      001585 24 FC            [12] 4180 	add	a,#0xfc
      001587 F5 81            [12] 4181 	mov	sp,a
      001589 EE               [12] 4182 	mov	a,r6
      00158A 4F               [12] 4183 	orl	a,r7
      00158B 70 22            [24] 4184 	jnz	00102$
      00158D 7Dr3E            [12] 4185 	mov	r5,#___str_4
      00158F 7Es00            [12] 4186 	mov	r6,#(___str_4 >> 8)
      001591 7F 80            [12] 4187 	mov	r7,#0x80
                                   4188 ;	calc.c:50: return;
      001593                       4189 00109$:
                                   4190 ;	calc.c:48: for (; *s; s++) putchar(*s);
      001593 8D 82            [24] 4191 	mov	dpl,r5
      001595 8E 83            [24] 4192 	mov	dph,r6
      001597 8F F0            [24] 4193 	mov	b,r7
      001599 12r00r00         [24] 4194 	lcall	__gptrget
      00159C FC               [12] 4195 	mov	r4,a
      00159D 60 10            [24] 4196 	jz	00102$
      00159F 7B 00            [12] 4197 	mov	r3,#0x00
      0015A1 8C 82            [24] 4198 	mov	dpl,r4
      0015A3 8B 83            [24] 4199 	mov	dph,r3
      0015A5 12r00r00         [24] 4200 	lcall	_putchar
      0015A8 0D               [12] 4201 	inc	r5
                                   4202 ;	calc.c:275: if (!stack_push(&ctx->s, ctx->acc)) printstr("\r\nstack overflow\r\n");
      0015A9 BD 00 E7         [24] 4203 	cjne	r5,#0x00,00109$
      0015AC 0E               [12] 4204 	inc	r6
      0015AD 80 E4            [24] 4205 	sjmp	00109$
      0015AF                       4206 00102$:
                                   4207 ;	calc.c:277: if (delta->event == EVENT_OP) return operator(_ctx, delta);
      0015AF E5*00            [12] 4208 	mov	a,_bp
      0015B1 24 FB            [12] 4209 	add	a,#0xfb
      0015B3 F8               [12] 4210 	mov	r0,a
      0015B4 86 05            [24] 4211 	mov	ar5,@r0
      0015B6 08               [12] 4212 	inc	r0
      0015B7 86 06            [24] 4213 	mov	ar6,@r0
      0015B9 08               [12] 4214 	inc	r0
      0015BA 86 07            [24] 4215 	mov	ar7,@r0
      0015BC 74 02            [12] 4216 	mov	a,#0x02
      0015BE 2D               [12] 4217 	add	a,r5
      0015BF FA               [12] 4218 	mov	r2,a
      0015C0 E4               [12] 4219 	clr	a
      0015C1 3E               [12] 4220 	addc	a,r6
      0015C2 FB               [12] 4221 	mov	r3,a
      0015C3 8F 04            [24] 4222 	mov	ar4,r7
      0015C5 8A 82            [24] 4223 	mov	dpl,r2
      0015C7 8B 83            [24] 4224 	mov	dph,r3
      0015C9 8C F0            [24] 4225 	mov	b,r4
      0015CB 12r00r00         [24] 4226 	lcall	__gptrget
      0015CE FA               [12] 4227 	mov	r2,a
      0015CF A3               [24] 4228 	inc	dptr
      0015D0 12r00r00         [24] 4229 	lcall	__gptrget
      0015D3 FB               [12] 4230 	mov	r3,a
      0015D4 BA 02 27         [24] 4231 	cjne	r2,#0x02,00104$
      0015D7 BB 00 24         [24] 4232 	cjne	r3,#0x00,00104$
      0015DA C0 05            [24] 4233 	push	ar5
      0015DC C0 06            [24] 4234 	push	ar6
      0015DE C0 07            [24] 4235 	push	ar7
      0015E0 A8*00            [24] 4236 	mov	r0,_bp
      0015E2 08               [12] 4237 	inc	r0
      0015E3 86 82            [24] 4238 	mov	dpl,@r0
      0015E5 08               [12] 4239 	inc	r0
      0015E6 86 83            [24] 4240 	mov	dph,@r0
      0015E8 08               [12] 4241 	inc	r0
      0015E9 86 F0            [24] 4242 	mov	b,@r0
      0015EB 12r03rEF         [24] 4243 	lcall	_operator
      0015EE AE 82            [24] 4244 	mov	r6,dpl
      0015F0 AF 83            [24] 4245 	mov	r7,dph
      0015F2 15 81            [12] 4246 	dec	sp
      0015F4 15 81            [12] 4247 	dec	sp
      0015F6 15 81            [12] 4248 	dec	sp
      0015F8 8E 82            [24] 4249 	mov	dpl,r6
      0015FA 8F 83            [24] 4250 	mov	dph,r7
      0015FC 80 03            [24] 4251 	sjmp	00111$
      0015FE                       4252 00104$:
                                   4253 ;	calc.c:278: else return 1;
      0015FE 90 00 01         [24] 4254 	mov	dptr,#0x0001
      001601                       4255 00111$:
                                   4256 ;	calc.c:279: }
      001601 85*00 81         [24] 4257 	mov	sp,_bp
      001604 D0*00            [24] 4258 	pop	_bp
      001606 22               [24] 4259 	ret
                                   4260 ;------------------------------------------------------------
                                   4261 ;Allocation info for local variables in function 'reset_acc'
                                   4262 ;------------------------------------------------------------
                                   4263 ;delta                     Allocated to stack - _bp -5
                                   4264 ;_ctx                      Allocated to registers r5 r6 r7 
                                   4265 ;ctx                       Allocated to registers r5 r6 r7 
                                   4266 ;------------------------------------------------------------
                                   4267 ;	calc.c:281: static int reset_acc(void *_ctx, delta_t *delta) __reentrant {
                                   4268 ;	-----------------------------------------
                                   4269 ;	 function reset_acc
                                   4270 ;	-----------------------------------------
      001607                       4271 _reset_acc:
      001607 C0*00            [24] 4272 	push	_bp
      001609 85 81*00         [24] 4273 	mov	_bp,sp
      00160C AD 82            [24] 4274 	mov	r5,dpl
      00160E AE 83            [24] 4275 	mov	r6,dph
      001610 AF F0            [24] 4276 	mov	r7,b
                                   4277 ;	calc.c:282: struct ctx *ctx = (struct ctx *)_ctx;
                                   4278 ;	calc.c:284: if (delta->event == EVENT_RSTA_I) ctx->acc_valid = 0;
      001612 E5*00            [12] 4279 	mov	a,_bp
      001614 24 FB            [12] 4280 	add	a,#0xfb
      001616 F8               [12] 4281 	mov	r0,a
      001617 86 02            [24] 4282 	mov	ar2,@r0
      001619 08               [12] 4283 	inc	r0
      00161A 86 03            [24] 4284 	mov	ar3,@r0
      00161C 08               [12] 4285 	inc	r0
      00161D 86 04            [24] 4286 	mov	ar4,@r0
      00161F 74 02            [12] 4287 	mov	a,#0x02
      001621 2A               [12] 4288 	add	a,r2
      001622 FA               [12] 4289 	mov	r2,a
      001623 E4               [12] 4290 	clr	a
      001624 3B               [12] 4291 	addc	a,r3
      001625 FB               [12] 4292 	mov	r3,a
      001626 8A 82            [24] 4293 	mov	dpl,r2
      001628 8B 83            [24] 4294 	mov	dph,r3
      00162A 8C F0            [24] 4295 	mov	b,r4
      00162C 12r00r00         [24] 4296 	lcall	__gptrget
      00162F FA               [12] 4297 	mov	r2,a
      001630 A3               [24] 4298 	inc	dptr
      001631 12r00r00         [24] 4299 	lcall	__gptrget
      001634 FB               [12] 4300 	mov	r3,a
      001635 BA 05 16         [24] 4301 	cjne	r2,#0x05,00102$
      001638 BB 00 13         [24] 4302 	cjne	r3,#0x00,00102$
      00163B 74 08            [12] 4303 	mov	a,#0x08
      00163D 2D               [12] 4304 	add	a,r5
      00163E FA               [12] 4305 	mov	r2,a
      00163F E4               [12] 4306 	clr	a
      001640 3E               [12] 4307 	addc	a,r6
      001641 FB               [12] 4308 	mov	r3,a
      001642 8F 04            [24] 4309 	mov	ar4,r7
      001644 8A 82            [24] 4310 	mov	dpl,r2
      001646 8B 83            [24] 4311 	mov	dph,r3
      001648 8C F0            [24] 4312 	mov	b,r4
      00164A E4               [12] 4313 	clr	a
      00164B 12r00r00         [24] 4314 	lcall	__gptrput
      00164E                       4315 00102$:
                                   4316 ;	calc.c:285: ctx->acc = 0l;
      00164E 74 04            [12] 4317 	mov	a,#0x04
      001650 2D               [12] 4318 	add	a,r5
      001651 FD               [12] 4319 	mov	r5,a
      001652 E4               [12] 4320 	clr	a
      001653 3E               [12] 4321 	addc	a,r6
      001654 FE               [12] 4322 	mov	r6,a
      001655 8D 82            [24] 4323 	mov	dpl,r5
      001657 8E 83            [24] 4324 	mov	dph,r6
      001659 8F F0            [24] 4325 	mov	b,r7
      00165B E4               [12] 4326 	clr	a
      00165C 12r00r00         [24] 4327 	lcall	__gptrput
      00165F A3               [24] 4328 	inc	dptr
      001660 12r00r00         [24] 4329 	lcall	__gptrput
      001663 A3               [24] 4330 	inc	dptr
      001664 12r00r00         [24] 4331 	lcall	__gptrput
      001667 A3               [24] 4332 	inc	dptr
      001668 12r00r00         [24] 4333 	lcall	__gptrput
                                   4334 ;	calc.c:287: return 1;
      00166B 90 00 01         [24] 4335 	mov	dptr,#0x0001
                                   4336 ;	calc.c:288: }
      00166E D0*00            [24] 4337 	pop	_bp
      001670 22               [24] 4338 	ret
                                   4339 ;------------------------------------------------------------
                                   4340 ;Allocation info for local variables in function 'help'
                                   4341 ;------------------------------------------------------------
                                   4342 ;delta                     Allocated to stack - _bp -5
                                   4343 ;_ctx                      Allocated to registers r5 r6 r7 
                                   4344 ;ctx                       Allocated to stack - _bp +7
                                   4345 ;__1310720063              Allocated to registers 
                                   4346 ;s                         Allocated to registers r5 r6 r7 
                                   4347 ;__1310720065              Allocated to registers 
                                   4348 ;s                         Allocated to registers r5 r6 r7 
                                   4349 ;__1310720067              Allocated to registers 
                                   4350 ;s                         Allocated to registers r5 r6 r7 
                                   4351 ;__1310720069              Allocated to registers 
                                   4352 ;s                         Allocated to registers r5 r6 r7 
                                   4353 ;__1310720071              Allocated to registers 
                                   4354 ;s                         Allocated to registers r5 r6 r7 
                                   4355 ;__1310720073              Allocated to registers 
                                   4356 ;s                         Allocated to registers r5 r6 r7 
                                   4357 ;__1310720075              Allocated to registers 
                                   4358 ;s                         Allocated to registers r5 r6 r7 
                                   4359 ;__1310720077              Allocated to registers 
                                   4360 ;s                         Allocated to registers r5 r6 r7 
                                   4361 ;__1310720079              Allocated to registers 
                                   4362 ;s                         Allocated to registers r5 r6 r7 
                                   4363 ;__1310720081              Allocated to registers 
                                   4364 ;s                         Allocated to registers r5 r6 r7 
                                   4365 ;__1310720083              Allocated to registers 
                                   4366 ;s                         Allocated to registers r5 r6 r7 
                                   4367 ;__1310720085              Allocated to registers 
                                   4368 ;s                         Allocated to registers r5 r6 r7 
                                   4369 ;__1310720087              Allocated to registers 
                                   4370 ;s                         Allocated to registers r5 r6 r7 
                                   4371 ;__1310720089              Allocated to registers 
                                   4372 ;s                         Allocated to registers r5 r6 r7 
                                   4373 ;__1310720091              Allocated to registers 
                                   4374 ;s                         Allocated to registers r5 r6 r7 
                                   4375 ;__1310720093              Allocated to registers 
                                   4376 ;s                         Allocated to registers r5 r6 r7 
                                   4377 ;__1310720095              Allocated to registers 
                                   4378 ;s                         Allocated to registers r5 r6 r7 
                                   4379 ;__1310720097              Allocated to registers 
                                   4380 ;s                         Allocated to registers r5 r6 r7 
                                   4381 ;__1310720099              Allocated to registers 
                                   4382 ;s                         Allocated to registers r5 r6 r7 
                                   4383 ;__1310720101              Allocated to registers 
                                   4384 ;s                         Allocated to registers r5 r6 r7 
                                   4385 ;sloc0                     Allocated to stack - _bp +1
                                   4386 ;sloc1                     Allocated to stack - _bp +3
                                   4387 ;------------------------------------------------------------
                                   4388 ;	calc.c:290: static int help(void *_ctx, delta_t *delta) __reentrant {
                                   4389 ;	-----------------------------------------
                                   4390 ;	 function help
                                   4391 ;	-----------------------------------------
      001671                       4392 _help:
      001671 C0*00            [24] 4393 	push	_bp
      001673 E5 81            [12] 4394 	mov	a,sp
      001675 F5*00            [12] 4395 	mov	_bp,a
      001677 24 09            [12] 4396 	add	a,#0x09
      001679 F5 81            [12] 4397 	mov	sp,a
      00167B AD 82            [24] 4398 	mov	r5,dpl
      00167D AE 83            [24] 4399 	mov	r6,dph
      00167F AF F0            [24] 4400 	mov	r7,b
                                   4401 ;	calc.c:291: struct ctx *ctx = (struct ctx *)_ctx;
      001681 E5*00            [12] 4402 	mov	a,_bp
      001683 24 07            [12] 4403 	add	a,#0x07
      001685 F8               [12] 4404 	mov	r0,a
      001686 A6 05            [24] 4405 	mov	@r0,ar5
      001688 08               [12] 4406 	inc	r0
      001689 A6 06            [24] 4407 	mov	@r0,ar6
      00168B 08               [12] 4408 	inc	r0
      00168C A6 07            [24] 4409 	mov	@r0,ar7
                                   4410 ;	calc.c:295: ctx->base, ctx->acc, ctx->acc, (int)ctx->acc_valid);
      00168E E5*00            [12] 4411 	mov	a,_bp
      001690 24 07            [12] 4412 	add	a,#0x07
      001692 F8               [12] 4413 	mov	r0,a
      001693 74 08            [12] 4414 	mov	a,#0x08
      001695 26               [12] 4415 	add	a,@r0
      001696 FA               [12] 4416 	mov	r2,a
      001697 E4               [12] 4417 	clr	a
      001698 08               [12] 4418 	inc	r0
      001699 36               [12] 4419 	addc	a,@r0
      00169A FB               [12] 4420 	mov	r3,a
      00169B 08               [12] 4421 	inc	r0
      00169C 86 04            [24] 4422 	mov	ar4,@r0
      00169E 8A 82            [24] 4423 	mov	dpl,r2
      0016A0 8B 83            [24] 4424 	mov	dph,r3
      0016A2 8C F0            [24] 4425 	mov	b,r4
      0016A4 12r00r00         [24] 4426 	lcall	__gptrget
      0016A7 FA               [12] 4427 	mov	r2,a
      0016A8 A8*00            [24] 4428 	mov	r0,_bp
      0016AA 08               [12] 4429 	inc	r0
      0016AB A6 02            [24] 4430 	mov	@r0,ar2
      0016AD 08               [12] 4431 	inc	r0
      0016AE 76 00            [12] 4432 	mov	@r0,#0x00
      0016B0 E5*00            [12] 4433 	mov	a,_bp
      0016B2 24 07            [12] 4434 	add	a,#0x07
      0016B4 F8               [12] 4435 	mov	r0,a
      0016B5 74 04            [12] 4436 	mov	a,#0x04
      0016B7 26               [12] 4437 	add	a,@r0
      0016B8 FB               [12] 4438 	mov	r3,a
      0016B9 E4               [12] 4439 	clr	a
      0016BA 08               [12] 4440 	inc	r0
      0016BB 36               [12] 4441 	addc	a,@r0
      0016BC FE               [12] 4442 	mov	r6,a
      0016BD 08               [12] 4443 	inc	r0
      0016BE 86 07            [24] 4444 	mov	ar7,@r0
      0016C0 8B 82            [24] 4445 	mov	dpl,r3
      0016C2 8E 83            [24] 4446 	mov	dph,r6
      0016C4 8F F0            [24] 4447 	mov	b,r7
      0016C6 E5*00            [12] 4448 	mov	a,_bp
      0016C8 24 03            [12] 4449 	add	a,#0x03
      0016CA F8               [12] 4450 	mov	r0,a
      0016CB 12r00r00         [24] 4451 	lcall	__gptrget
      0016CE F6               [12] 4452 	mov	@r0,a
      0016CF A3               [24] 4453 	inc	dptr
      0016D0 12r00r00         [24] 4454 	lcall	__gptrget
      0016D3 08               [12] 4455 	inc	r0
      0016D4 F6               [12] 4456 	mov	@r0,a
      0016D5 A3               [24] 4457 	inc	dptr
      0016D6 12r00r00         [24] 4458 	lcall	__gptrget
      0016D9 08               [12] 4459 	inc	r0
      0016DA F6               [12] 4460 	mov	@r0,a
      0016DB A3               [24] 4461 	inc	dptr
      0016DC 12r00r00         [24] 4462 	lcall	__gptrget
      0016DF 08               [12] 4463 	inc	r0
      0016E0 F6               [12] 4464 	mov	@r0,a
      0016E1 E5*00            [12] 4465 	mov	a,_bp
      0016E3 24 07            [12] 4466 	add	a,#0x07
      0016E5 F8               [12] 4467 	mov	r0,a
      0016E6 86 82            [24] 4468 	mov	dpl,@r0
      0016E8 08               [12] 4469 	inc	r0
      0016E9 86 83            [24] 4470 	mov	dph,@r0
      0016EB 08               [12] 4471 	inc	r0
      0016EC 86 F0            [24] 4472 	mov	b,@r0
      0016EE 12r00r00         [24] 4473 	lcall	__gptrget
      0016F1 FA               [12] 4474 	mov	r2,a
      0016F2 A3               [24] 4475 	inc	dptr
      0016F3 12r00r00         [24] 4476 	lcall	__gptrget
      0016F6 FC               [12] 4477 	mov	r4,a
      0016F7 A3               [24] 4478 	inc	dptr
      0016F8 12r00r00         [24] 4479 	lcall	__gptrget
      0016FB FE               [12] 4480 	mov	r6,a
      0016FC A3               [24] 4481 	inc	dptr
      0016FD 12r00r00         [24] 4482 	lcall	__gptrget
      001700 FF               [12] 4483 	mov	r7,a
                                   4484 ;	calc.c:294: printf("\r\nbase = %ld, acc = %ld / %0.8lx, acc_valid = %d\r\n\r\n",
      001701 A8*00            [24] 4485 	mov	r0,_bp
      001703 08               [12] 4486 	inc	r0
      001704 E6               [12] 4487 	mov	a,@r0
      001705 C0 E0            [24] 4488 	push	acc
      001707 08               [12] 4489 	inc	r0
      001708 E6               [12] 4490 	mov	a,@r0
      001709 C0 E0            [24] 4491 	push	acc
      00170B E5*00            [12] 4492 	mov	a,_bp
      00170D 24 03            [12] 4493 	add	a,#0x03
      00170F F8               [12] 4494 	mov	r0,a
      001710 E6               [12] 4495 	mov	a,@r0
      001711 C0 E0            [24] 4496 	push	acc
      001713 08               [12] 4497 	inc	r0
      001714 E6               [12] 4498 	mov	a,@r0
      001715 C0 E0            [24] 4499 	push	acc
      001717 08               [12] 4500 	inc	r0
      001718 E6               [12] 4501 	mov	a,@r0
      001719 C0 E0            [24] 4502 	push	acc
      00171B 08               [12] 4503 	inc	r0
      00171C E6               [12] 4504 	mov	a,@r0
      00171D C0 E0            [24] 4505 	push	acc
      00171F E5*00            [12] 4506 	mov	a,_bp
      001721 24 03            [12] 4507 	add	a,#0x03
      001723 F8               [12] 4508 	mov	r0,a
      001724 E6               [12] 4509 	mov	a,@r0
      001725 C0 E0            [24] 4510 	push	acc
      001727 08               [12] 4511 	inc	r0
      001728 E6               [12] 4512 	mov	a,@r0
      001729 C0 E0            [24] 4513 	push	acc
      00172B 08               [12] 4514 	inc	r0
      00172C E6               [12] 4515 	mov	a,@r0
      00172D C0 E0            [24] 4516 	push	acc
      00172F 08               [12] 4517 	inc	r0
      001730 E6               [12] 4518 	mov	a,@r0
      001731 C0 E0            [24] 4519 	push	acc
      001733 C0 02            [24] 4520 	push	ar2
      001735 C0 04            [24] 4521 	push	ar4
      001737 C0 06            [24] 4522 	push	ar6
      001739 C0 07            [24] 4523 	push	ar7
      00173B 74r51            [12] 4524 	mov	a,#___str_5
      00173D C0 E0            [24] 4525 	push	acc
      00173F 74s00            [12] 4526 	mov	a,#(___str_5 >> 8)
      001741 C0 E0            [24] 4527 	push	acc
      001743 74 80            [12] 4528 	mov	a,#0x80
      001745 C0 E0            [24] 4529 	push	acc
      001747 12r00r00         [24] 4530 	lcall	_printf
      00174A E5 81            [12] 4531 	mov	a,sp
      00174C 24 EF            [12] 4532 	add	a,#0xef
      00174E F5 81            [12] 4533 	mov	sp,a
                                   4534 ;	calc.c:296: printstr("h\tbase 10\r\n");
      001750 7Dr86            [12] 4535 	mov	r5,#___str_6
      001752 7Es00            [12] 4536 	mov	r6,#(___str_6 >> 8)
      001754 7F 80            [12] 4537 	mov	r7,#0x80
                                   4538 ;	calc.c:50: return;
      001756                       4539 00142$:
                                   4540 ;	calc.c:48: for (; *s; s++) putchar(*s);
      001756 8D 82            [24] 4541 	mov	dpl,r5
      001758 8E 83            [24] 4542 	mov	dph,r6
      00175A 8F F0            [24] 4543 	mov	b,r7
      00175C 12r00r00         [24] 4544 	lcall	__gptrget
      00175F FC               [12] 4545 	mov	r4,a
      001760 60 10            [24] 4546 	jz	00102$
      001762 7B 00            [12] 4547 	mov	r3,#0x00
      001764 8C 82            [24] 4548 	mov	dpl,r4
      001766 8B 83            [24] 4549 	mov	dph,r3
      001768 12r00r00         [24] 4550 	lcall	_putchar
      00176B 0D               [12] 4551 	inc	r5
                                   4552 ;	calc.c:296: printstr("h\tbase 10\r\n");
      00176C BD 00 E7         [24] 4553 	cjne	r5,#0x00,00142$
      00176F 0E               [12] 4554 	inc	r6
      001770 80 E4            [24] 4555 	sjmp	00142$
      001772                       4556 00102$:
                                   4557 ;	calc.c:297: printstr("H\tbase 16\r\n");
      001772 7Dr92            [12] 4558 	mov	r5,#___str_7
      001774 7Es00            [12] 4559 	mov	r6,#(___str_7 >> 8)
      001776 7F 80            [12] 4560 	mov	r7,#0x80
                                   4561 ;	calc.c:50: return;
      001778                       4562 00145$:
                                   4563 ;	calc.c:48: for (; *s; s++) putchar(*s);
      001778 8D 82            [24] 4564 	mov	dpl,r5
      00177A 8E 83            [24] 4565 	mov	dph,r6
      00177C 8F F0            [24] 4566 	mov	b,r7
      00177E 12r00r00         [24] 4567 	lcall	__gptrget
      001781 FC               [12] 4568 	mov	r4,a
      001782 60 10            [24] 4569 	jz	00104$
      001784 7B 00            [12] 4570 	mov	r3,#0x00
      001786 8C 82            [24] 4571 	mov	dpl,r4
      001788 8B 83            [24] 4572 	mov	dph,r3
      00178A 12r00r00         [24] 4573 	lcall	_putchar
      00178D 0D               [12] 4574 	inc	r5
                                   4575 ;	calc.c:297: printstr("H\tbase 16\r\n");
      00178E BD 00 E7         [24] 4576 	cjne	r5,#0x00,00145$
      001791 0E               [12] 4577 	inc	r6
      001792 80 E4            [24] 4578 	sjmp	00145$
      001794                       4579 00104$:
                                   4580 ;	calc.c:298: printstr("p\tpeek top\r\n");
      001794 7Dr9E            [12] 4581 	mov	r5,#___str_8
      001796 7Es00            [12] 4582 	mov	r6,#(___str_8 >> 8)
      001798 7F 80            [12] 4583 	mov	r7,#0x80
                                   4584 ;	calc.c:50: return;
      00179A                       4585 00148$:
                                   4586 ;	calc.c:48: for (; *s; s++) putchar(*s);
      00179A 8D 82            [24] 4587 	mov	dpl,r5
      00179C 8E 83            [24] 4588 	mov	dph,r6
      00179E 8F F0            [24] 4589 	mov	b,r7
      0017A0 12r00r00         [24] 4590 	lcall	__gptrget
      0017A3 FC               [12] 4591 	mov	r4,a
      0017A4 60 10            [24] 4592 	jz	00106$
      0017A6 7B 00            [12] 4593 	mov	r3,#0x00
      0017A8 8C 82            [24] 4594 	mov	dpl,r4
      0017AA 8B 83            [24] 4595 	mov	dph,r3
      0017AC 12r00r00         [24] 4596 	lcall	_putchar
      0017AF 0D               [12] 4597 	inc	r5
                                   4598 ;	calc.c:298: printstr("p\tpeek top\r\n");
      0017B0 BD 00 E7         [24] 4599 	cjne	r5,#0x00,00148$
      0017B3 0E               [12] 4600 	inc	r6
      0017B4 80 E4            [24] 4601 	sjmp	00148$
      0017B6                       4602 00106$:
                                   4603 ;	calc.c:299: printstr("P\tprint stack\r\n");
      0017B6 7DrAB            [12] 4604 	mov	r5,#___str_9
      0017B8 7Es00            [12] 4605 	mov	r6,#(___str_9 >> 8)
      0017BA 7F 80            [12] 4606 	mov	r7,#0x80
                                   4607 ;	calc.c:50: return;
      0017BC                       4608 00151$:
                                   4609 ;	calc.c:48: for (; *s; s++) putchar(*s);
      0017BC 8D 82            [24] 4610 	mov	dpl,r5
      0017BE 8E 83            [24] 4611 	mov	dph,r6
      0017C0 8F F0            [24] 4612 	mov	b,r7
      0017C2 12r00r00         [24] 4613 	lcall	__gptrget
      0017C5 FC               [12] 4614 	mov	r4,a
      0017C6 60 10            [24] 4615 	jz	00108$
      0017C8 7B 00            [12] 4616 	mov	r3,#0x00
      0017CA 8C 82            [24] 4617 	mov	dpl,r4
      0017CC 8B 83            [24] 4618 	mov	dph,r3
      0017CE 12r00r00         [24] 4619 	lcall	_putchar
      0017D1 0D               [12] 4620 	inc	r5
                                   4621 ;	calc.c:299: printstr("P\tprint stack\r\n");
      0017D2 BD 00 E7         [24] 4622 	cjne	r5,#0x00,00151$
      0017D5 0E               [12] 4623 	inc	r6
      0017D6 80 E4            [24] 4624 	sjmp	00151$
      0017D8                       4625 00108$:
                                   4626 ;	calc.c:300: printstr("v .\tpop top\r\n");
      0017D8 7DrBB            [12] 4627 	mov	r5,#___str_10
      0017DA 7Es00            [12] 4628 	mov	r6,#(___str_10 >> 8)
      0017DC 7F 80            [12] 4629 	mov	r7,#0x80
                                   4630 ;	calc.c:50: return;
      0017DE                       4631 00154$:
                                   4632 ;	calc.c:48: for (; *s; s++) putchar(*s);
      0017DE 8D 82            [24] 4633 	mov	dpl,r5
      0017E0 8E 83            [24] 4634 	mov	dph,r6
      0017E2 8F F0            [24] 4635 	mov	b,r7
      0017E4 12r00r00         [24] 4636 	lcall	__gptrget
      0017E7 FC               [12] 4637 	mov	r4,a
      0017E8 60 10            [24] 4638 	jz	00110$
      0017EA 7B 00            [12] 4639 	mov	r3,#0x00
      0017EC 8C 82            [24] 4640 	mov	dpl,r4
      0017EE 8B 83            [24] 4641 	mov	dph,r3
      0017F0 12r00r00         [24] 4642 	lcall	_putchar
      0017F3 0D               [12] 4643 	inc	r5
                                   4644 ;	calc.c:300: printstr("v .\tpop top\r\n");
      0017F4 BD 00 E7         [24] 4645 	cjne	r5,#0x00,00154$
      0017F7 0E               [12] 4646 	inc	r6
      0017F8 80 E4            [24] 4647 	sjmp	00154$
      0017FA                       4648 00110$:
                                   4649 ;	calc.c:301: printstr("V\tpop all\r\n");
      0017FA 7DrC9            [12] 4650 	mov	r5,#___str_11
      0017FC 7Es00            [12] 4651 	mov	r6,#(___str_11 >> 8)
      0017FE 7F 80            [12] 4652 	mov	r7,#0x80
                                   4653 ;	calc.c:50: return;
      001800                       4654 00157$:
                                   4655 ;	calc.c:48: for (; *s; s++) putchar(*s);
      001800 8D 82            [24] 4656 	mov	dpl,r5
      001802 8E 83            [24] 4657 	mov	dph,r6
      001804 8F F0            [24] 4658 	mov	b,r7
      001806 12r00r00         [24] 4659 	lcall	__gptrget
      001809 FC               [12] 4660 	mov	r4,a
      00180A 60 10            [24] 4661 	jz	00112$
      00180C 7B 00            [12] 4662 	mov	r3,#0x00
      00180E 8C 82            [24] 4663 	mov	dpl,r4
      001810 8B 83            [24] 4664 	mov	dph,r3
      001812 12r00r00         [24] 4665 	lcall	_putchar
      001815 0D               [12] 4666 	inc	r5
                                   4667 ;	calc.c:301: printstr("V\tpop all\r\n");
      001816 BD 00 E7         [24] 4668 	cjne	r5,#0x00,00157$
      001819 0E               [12] 4669 	inc	r6
      00181A 80 E4            [24] 4670 	sjmp	00157$
      00181C                       4671 00112$:
                                   4672 ;	calc.c:302: printstr("i\treset acc\r\n");
      00181C 7DrD5            [12] 4673 	mov	r5,#___str_12
      00181E 7Es00            [12] 4674 	mov	r6,#(___str_12 >> 8)
      001820 7F 80            [12] 4675 	mov	r7,#0x80
                                   4676 ;	calc.c:50: return;
      001822                       4677 00160$:
                                   4678 ;	calc.c:48: for (; *s; s++) putchar(*s);
      001822 8D 82            [24] 4679 	mov	dpl,r5
      001824 8E 83            [24] 4680 	mov	dph,r6
      001826 8F F0            [24] 4681 	mov	b,r7
      001828 12r00r00         [24] 4682 	lcall	__gptrget
      00182B FC               [12] 4683 	mov	r4,a
      00182C 60 10            [24] 4684 	jz	00114$
      00182E 7B 00            [12] 4685 	mov	r3,#0x00
      001830 8C 82            [24] 4686 	mov	dpl,r4
      001832 8B 83            [24] 4687 	mov	dph,r3
      001834 12r00r00         [24] 4688 	lcall	_putchar
      001837 0D               [12] 4689 	inc	r5
                                   4690 ;	calc.c:302: printstr("i\treset acc\r\n");
      001838 BD 00 E7         [24] 4691 	cjne	r5,#0x00,00160$
      00183B 0E               [12] 4692 	inc	r6
      00183C 80 E4            [24] 4693 	sjmp	00160$
      00183E                       4694 00114$:
                                   4695 ;	calc.c:303: printstr("I\treset and discard acc\r\n");
      00183E 7DrE3            [12] 4696 	mov	r5,#___str_13
      001840 7Es00            [12] 4697 	mov	r6,#(___str_13 >> 8)
      001842 7F 80            [12] 4698 	mov	r7,#0x80
                                   4699 ;	calc.c:50: return;
      001844                       4700 00163$:
                                   4701 ;	calc.c:48: for (; *s; s++) putchar(*s);
      001844 8D 82            [24] 4702 	mov	dpl,r5
      001846 8E 83            [24] 4703 	mov	dph,r6
      001848 8F F0            [24] 4704 	mov	b,r7
      00184A 12r00r00         [24] 4705 	lcall	__gptrget
      00184D FC               [12] 4706 	mov	r4,a
      00184E 60 10            [24] 4707 	jz	00116$
      001850 7B 00            [12] 4708 	mov	r3,#0x00
      001852 8C 82            [24] 4709 	mov	dpl,r4
      001854 8B 83            [24] 4710 	mov	dph,r3
      001856 12r00r00         [24] 4711 	lcall	_putchar
      001859 0D               [12] 4712 	inc	r5
                                   4713 ;	calc.c:303: printstr("I\treset and discard acc\r\n");
      00185A BD 00 E7         [24] 4714 	cjne	r5,#0x00,00163$
      00185D 0E               [12] 4715 	inc	r6
      00185E 80 E4            [24] 4716 	sjmp	00163$
      001860                       4717 00116$:
                                   4718 ;	calc.c:304: printstr("x\texchange top 2\r\n");
      001860 7DrFD            [12] 4719 	mov	r5,#___str_14
      001862 7Es00            [12] 4720 	mov	r6,#(___str_14 >> 8)
      001864 7F 80            [12] 4721 	mov	r7,#0x80
                                   4722 ;	calc.c:50: return;
      001866                       4723 00166$:
                                   4724 ;	calc.c:48: for (; *s; s++) putchar(*s);
      001866 8D 82            [24] 4725 	mov	dpl,r5
      001868 8E 83            [24] 4726 	mov	dph,r6
      00186A 8F F0            [24] 4727 	mov	b,r7
      00186C 12r00r00         [24] 4728 	lcall	__gptrget
      00186F FC               [12] 4729 	mov	r4,a
      001870 60 10            [24] 4730 	jz	00118$
      001872 7B 00            [12] 4731 	mov	r3,#0x00
      001874 8C 82            [24] 4732 	mov	dpl,r4
      001876 8B 83            [24] 4733 	mov	dph,r3
      001878 12r00r00         [24] 4734 	lcall	_putchar
      00187B 0D               [12] 4735 	inc	r5
                                   4736 ;	calc.c:304: printstr("x\texchange top 2\r\n");
      00187C BD 00 E7         [24] 4737 	cjne	r5,#0x00,00166$
      00187F 0E               [12] 4738 	inc	r6
      001880 80 E4            [24] 4739 	sjmp	00166$
      001882                       4740 00118$:
                                   4741 ;	calc.c:305: printstr("+\tadd top 2\r\n");
      001882 7Dr10            [12] 4742 	mov	r5,#___str_15
      001884 7Es01            [12] 4743 	mov	r6,#(___str_15 >> 8)
      001886 7F 80            [12] 4744 	mov	r7,#0x80
                                   4745 ;	calc.c:50: return;
      001888                       4746 00169$:
                                   4747 ;	calc.c:48: for (; *s; s++) putchar(*s);
      001888 8D 82            [24] 4748 	mov	dpl,r5
      00188A 8E 83            [24] 4749 	mov	dph,r6
      00188C 8F F0            [24] 4750 	mov	b,r7
      00188E 12r00r00         [24] 4751 	lcall	__gptrget
      001891 FC               [12] 4752 	mov	r4,a
      001892 60 10            [24] 4753 	jz	00120$
      001894 7B 00            [12] 4754 	mov	r3,#0x00
      001896 8C 82            [24] 4755 	mov	dpl,r4
      001898 8B 83            [24] 4756 	mov	dph,r3
      00189A 12r00r00         [24] 4757 	lcall	_putchar
      00189D 0D               [12] 4758 	inc	r5
                                   4759 ;	calc.c:305: printstr("+\tadd top 2\r\n");
      00189E BD 00 E7         [24] 4760 	cjne	r5,#0x00,00169$
      0018A1 0E               [12] 4761 	inc	r6
      0018A2 80 E4            [24] 4762 	sjmp	00169$
      0018A4                       4763 00120$:
                                   4764 ;	calc.c:306: printstr("-\tsubtract top 2\r\n");
      0018A4 7Dr1E            [12] 4765 	mov	r5,#___str_16
      0018A6 7Es01            [12] 4766 	mov	r6,#(___str_16 >> 8)
      0018A8 7F 80            [12] 4767 	mov	r7,#0x80
                                   4768 ;	calc.c:50: return;
      0018AA                       4769 00172$:
                                   4770 ;	calc.c:48: for (; *s; s++) putchar(*s);
      0018AA 8D 82            [24] 4771 	mov	dpl,r5
      0018AC 8E 83            [24] 4772 	mov	dph,r6
      0018AE 8F F0            [24] 4773 	mov	b,r7
      0018B0 12r00r00         [24] 4774 	lcall	__gptrget
      0018B3 FC               [12] 4775 	mov	r4,a
      0018B4 60 10            [24] 4776 	jz	00122$
      0018B6 7B 00            [12] 4777 	mov	r3,#0x00
      0018B8 8C 82            [24] 4778 	mov	dpl,r4
      0018BA 8B 83            [24] 4779 	mov	dph,r3
      0018BC 12r00r00         [24] 4780 	lcall	_putchar
      0018BF 0D               [12] 4781 	inc	r5
                                   4782 ;	calc.c:306: printstr("-\tsubtract top 2\r\n");
      0018C0 BD 00 E7         [24] 4783 	cjne	r5,#0x00,00172$
      0018C3 0E               [12] 4784 	inc	r6
      0018C4 80 E4            [24] 4785 	sjmp	00172$
      0018C6                       4786 00122$:
                                   4787 ;	calc.c:307: printstr("*\tmultiply top 2\r\n");
      0018C6 7Dr31            [12] 4788 	mov	r5,#___str_17
      0018C8 7Es01            [12] 4789 	mov	r6,#(___str_17 >> 8)
      0018CA 7F 80            [12] 4790 	mov	r7,#0x80
                                   4791 ;	calc.c:50: return;
      0018CC                       4792 00175$:
                                   4793 ;	calc.c:48: for (; *s; s++) putchar(*s);
      0018CC 8D 82            [24] 4794 	mov	dpl,r5
      0018CE 8E 83            [24] 4795 	mov	dph,r6
      0018D0 8F F0            [24] 4796 	mov	b,r7
      0018D2 12r00r00         [24] 4797 	lcall	__gptrget
      0018D5 FC               [12] 4798 	mov	r4,a
      0018D6 60 10            [24] 4799 	jz	00124$
      0018D8 7B 00            [12] 4800 	mov	r3,#0x00
      0018DA 8C 82            [24] 4801 	mov	dpl,r4
      0018DC 8B 83            [24] 4802 	mov	dph,r3
      0018DE 12r00r00         [24] 4803 	lcall	_putchar
      0018E1 0D               [12] 4804 	inc	r5
                                   4805 ;	calc.c:307: printstr("*\tmultiply top 2\r\n");
      0018E2 BD 00 E7         [24] 4806 	cjne	r5,#0x00,00175$
      0018E5 0E               [12] 4807 	inc	r6
      0018E6 80 E4            [24] 4808 	sjmp	00175$
      0018E8                       4809 00124$:
                                   4810 ;	calc.c:308: printstr("/\tdivide top 2\r\n");
      0018E8 7Dr44            [12] 4811 	mov	r5,#___str_18
      0018EA 7Es01            [12] 4812 	mov	r6,#(___str_18 >> 8)
      0018EC 7F 80            [12] 4813 	mov	r7,#0x80
                                   4814 ;	calc.c:50: return;
      0018EE                       4815 00178$:
                                   4816 ;	calc.c:48: for (; *s; s++) putchar(*s);
      0018EE 8D 82            [24] 4817 	mov	dpl,r5
      0018F0 8E 83            [24] 4818 	mov	dph,r6
      0018F2 8F F0            [24] 4819 	mov	b,r7
      0018F4 12r00r00         [24] 4820 	lcall	__gptrget
      0018F7 FC               [12] 4821 	mov	r4,a
      0018F8 60 10            [24] 4822 	jz	00126$
      0018FA 7B 00            [12] 4823 	mov	r3,#0x00
      0018FC 8C 82            [24] 4824 	mov	dpl,r4
      0018FE 8B 83            [24] 4825 	mov	dph,r3
      001900 12r00r00         [24] 4826 	lcall	_putchar
      001903 0D               [12] 4827 	inc	r5
                                   4828 ;	calc.c:308: printstr("/\tdivide top 2\r\n");
      001904 BD 00 E7         [24] 4829 	cjne	r5,#0x00,00178$
      001907 0E               [12] 4830 	inc	r6
      001908 80 E4            [24] 4831 	sjmp	00178$
      00190A                       4832 00126$:
                                   4833 ;	calc.c:309: printstr("%\tmodulus top 2\r\n");
      00190A 7Dr55            [12] 4834 	mov	r5,#___str_19
      00190C 7Es01            [12] 4835 	mov	r6,#(___str_19 >> 8)
      00190E 7F 80            [12] 4836 	mov	r7,#0x80
                                   4837 ;	calc.c:50: return;
      001910                       4838 00181$:
                                   4839 ;	calc.c:48: for (; *s; s++) putchar(*s);
      001910 8D 82            [24] 4840 	mov	dpl,r5
      001912 8E 83            [24] 4841 	mov	dph,r6
      001914 8F F0            [24] 4842 	mov	b,r7
      001916 12r00r00         [24] 4843 	lcall	__gptrget
      001919 FC               [12] 4844 	mov	r4,a
      00191A 60 10            [24] 4845 	jz	00128$
      00191C 7B 00            [12] 4846 	mov	r3,#0x00
      00191E 8C 82            [24] 4847 	mov	dpl,r4
      001920 8B 83            [24] 4848 	mov	dph,r3
      001922 12r00r00         [24] 4849 	lcall	_putchar
      001925 0D               [12] 4850 	inc	r5
                                   4851 ;	calc.c:309: printstr("%\tmodulus top 2\r\n");
      001926 BD 00 E7         [24] 4852 	cjne	r5,#0x00,00181$
      001929 0E               [12] 4853 	inc	r6
      00192A 80 E4            [24] 4854 	sjmp	00181$
      00192C                       4855 00128$:
                                   4856 ;	calc.c:310: printstr("&\tand top 2\r\n");
      00192C 7Dr67            [12] 4857 	mov	r5,#___str_20
      00192E 7Es01            [12] 4858 	mov	r6,#(___str_20 >> 8)
      001930 7F 80            [12] 4859 	mov	r7,#0x80
                                   4860 ;	calc.c:50: return;
      001932                       4861 00184$:
                                   4862 ;	calc.c:48: for (; *s; s++) putchar(*s);
      001932 8D 82            [24] 4863 	mov	dpl,r5
      001934 8E 83            [24] 4864 	mov	dph,r6
      001936 8F F0            [24] 4865 	mov	b,r7
      001938 12r00r00         [24] 4866 	lcall	__gptrget
      00193B FC               [12] 4867 	mov	r4,a
      00193C 60 10            [24] 4868 	jz	00130$
      00193E 7B 00            [12] 4869 	mov	r3,#0x00
      001940 8C 82            [24] 4870 	mov	dpl,r4
      001942 8B 83            [24] 4871 	mov	dph,r3
      001944 12r00r00         [24] 4872 	lcall	_putchar
      001947 0D               [12] 4873 	inc	r5
                                   4874 ;	calc.c:310: printstr("&\tand top 2\r\n");
      001948 BD 00 E7         [24] 4875 	cjne	r5,#0x00,00184$
      00194B 0E               [12] 4876 	inc	r6
      00194C 80 E4            [24] 4877 	sjmp	00184$
      00194E                       4878 00130$:
                                   4879 ;	calc.c:311: printstr("|\tor top 2\r\n");
      00194E 7Dr75            [12] 4880 	mov	r5,#___str_21
      001950 7Es01            [12] 4881 	mov	r6,#(___str_21 >> 8)
      001952 7F 80            [12] 4882 	mov	r7,#0x80
                                   4883 ;	calc.c:50: return;
      001954                       4884 00187$:
                                   4885 ;	calc.c:48: for (; *s; s++) putchar(*s);
      001954 8D 82            [24] 4886 	mov	dpl,r5
      001956 8E 83            [24] 4887 	mov	dph,r6
      001958 8F F0            [24] 4888 	mov	b,r7
      00195A 12r00r00         [24] 4889 	lcall	__gptrget
      00195D FC               [12] 4890 	mov	r4,a
      00195E 60 10            [24] 4891 	jz	00132$
      001960 7B 00            [12] 4892 	mov	r3,#0x00
      001962 8C 82            [24] 4893 	mov	dpl,r4
      001964 8B 83            [24] 4894 	mov	dph,r3
      001966 12r00r00         [24] 4895 	lcall	_putchar
      001969 0D               [12] 4896 	inc	r5
                                   4897 ;	calc.c:311: printstr("|\tor top 2\r\n");
      00196A BD 00 E7         [24] 4898 	cjne	r5,#0x00,00187$
      00196D 0E               [12] 4899 	inc	r6
      00196E 80 E4            [24] 4900 	sjmp	00187$
      001970                       4901 00132$:
                                   4902 ;	calc.c:312: printstr("^\txor top 2\r\n");
      001970 7Dr82            [12] 4903 	mov	r5,#___str_22
      001972 7Es01            [12] 4904 	mov	r6,#(___str_22 >> 8)
      001974 7F 80            [12] 4905 	mov	r7,#0x80
                                   4906 ;	calc.c:50: return;
      001976                       4907 00190$:
                                   4908 ;	calc.c:48: for (; *s; s++) putchar(*s);
      001976 8D 82            [24] 4909 	mov	dpl,r5
      001978 8E 83            [24] 4910 	mov	dph,r6
      00197A 8F F0            [24] 4911 	mov	b,r7
      00197C 12r00r00         [24] 4912 	lcall	__gptrget
      00197F FC               [12] 4913 	mov	r4,a
      001980 60 10            [24] 4914 	jz	00134$
      001982 7B 00            [12] 4915 	mov	r3,#0x00
      001984 8C 82            [24] 4916 	mov	dpl,r4
      001986 8B 83            [24] 4917 	mov	dph,r3
      001988 12r00r00         [24] 4918 	lcall	_putchar
      00198B 0D               [12] 4919 	inc	r5
                                   4920 ;	calc.c:312: printstr("^\txor top 2\r\n");
      00198C BD 00 E7         [24] 4921 	cjne	r5,#0x00,00190$
      00198F 0E               [12] 4922 	inc	r6
      001990 80 E4            [24] 4923 	sjmp	00190$
      001992                       4924 00134$:
                                   4925 ;	calc.c:313: printstr("~\tbitwise not top\r\n");
      001992 7Dr90            [12] 4926 	mov	r5,#___str_23
      001994 7Es01            [12] 4927 	mov	r6,#(___str_23 >> 8)
      001996 7F 80            [12] 4928 	mov	r7,#0x80
                                   4929 ;	calc.c:50: return;
      001998                       4930 00193$:
                                   4931 ;	calc.c:48: for (; *s; s++) putchar(*s);
      001998 8D 82            [24] 4932 	mov	dpl,r5
      00199A 8E 83            [24] 4933 	mov	dph,r6
      00199C 8F F0            [24] 4934 	mov	b,r7
      00199E 12r00r00         [24] 4935 	lcall	__gptrget
      0019A1 FC               [12] 4936 	mov	r4,a
      0019A2 60 10            [24] 4937 	jz	00136$
      0019A4 7B 00            [12] 4938 	mov	r3,#0x00
      0019A6 8C 82            [24] 4939 	mov	dpl,r4
      0019A8 8B 83            [24] 4940 	mov	dph,r3
      0019AA 12r00r00         [24] 4941 	lcall	_putchar
      0019AD 0D               [12] 4942 	inc	r5
                                   4943 ;	calc.c:313: printstr("~\tbitwise not top\r\n");
      0019AE BD 00 E7         [24] 4944 	cjne	r5,#0x00,00193$
      0019B1 0E               [12] 4945 	inc	r6
      0019B2 80 E4            [24] 4946 	sjmp	00193$
      0019B4                       4947 00136$:
                                   4948 ;	calc.c:314: printstr("?\thelp\r\n");
      0019B4 7DrA4            [12] 4949 	mov	r5,#___str_24
      0019B6 7Es01            [12] 4950 	mov	r6,#(___str_24 >> 8)
      0019B8 7F 80            [12] 4951 	mov	r7,#0x80
                                   4952 ;	calc.c:50: return;
      0019BA                       4953 00196$:
                                   4954 ;	calc.c:48: for (; *s; s++) putchar(*s);
      0019BA 8D 82            [24] 4955 	mov	dpl,r5
      0019BC 8E 83            [24] 4956 	mov	dph,r6
      0019BE 8F F0            [24] 4957 	mov	b,r7
      0019C0 12r00r00         [24] 4958 	lcall	__gptrget
      0019C3 FC               [12] 4959 	mov	r4,a
      0019C4 60 10            [24] 4960 	jz	00138$
      0019C6 7B 00            [12] 4961 	mov	r3,#0x00
      0019C8 8C 82            [24] 4962 	mov	dpl,r4
      0019CA 8B 83            [24] 4963 	mov	dph,r3
      0019CC 12r00r00         [24] 4964 	lcall	_putchar
      0019CF 0D               [12] 4965 	inc	r5
                                   4966 ;	calc.c:314: printstr("?\thelp\r\n");
      0019D0 BD 00 E7         [24] 4967 	cjne	r5,#0x00,00196$
      0019D3 0E               [12] 4968 	inc	r6
      0019D4 80 E4            [24] 4969 	sjmp	00196$
      0019D6                       4970 00138$:
                                   4971 ;	calc.c:315: printstr("q\tquit\r\n");
      0019D6 7DrAD            [12] 4972 	mov	r5,#___str_25
      0019D8 7Es01            [12] 4973 	mov	r6,#(___str_25 >> 8)
      0019DA 7F 80            [12] 4974 	mov	r7,#0x80
                                   4975 ;	calc.c:50: return;
      0019DC                       4976 00199$:
                                   4977 ;	calc.c:48: for (; *s; s++) putchar(*s);
      0019DC 8D 82            [24] 4978 	mov	dpl,r5
      0019DE 8E 83            [24] 4979 	mov	dph,r6
      0019E0 8F F0            [24] 4980 	mov	b,r7
      0019E2 12r00r00         [24] 4981 	lcall	__gptrget
      0019E5 FC               [12] 4982 	mov	r4,a
      0019E6 60 10            [24] 4983 	jz	00140$
      0019E8 7B 00            [12] 4984 	mov	r3,#0x00
      0019EA 8C 82            [24] 4985 	mov	dpl,r4
      0019EC 8B 83            [24] 4986 	mov	dph,r3
      0019EE 12r00r00         [24] 4987 	lcall	_putchar
      0019F1 0D               [12] 4988 	inc	r5
                                   4989 ;	calc.c:315: printstr("q\tquit\r\n");
      0019F2 BD 00 E7         [24] 4990 	cjne	r5,#0x00,00199$
      0019F5 0E               [12] 4991 	inc	r6
      0019F6 80 E4            [24] 4992 	sjmp	00199$
      0019F8                       4993 00140$:
                                   4994 ;	calc.c:317: return 1;
      0019F8 90 00 01         [24] 4995 	mov	dptr,#0x0001
                                   4996 ;	calc.c:318: }
      0019FB 85*00 81         [24] 4997 	mov	sp,_bp
      0019FE D0*00            [24] 4998 	pop	_bp
      001A00 22               [24] 4999 	ret
                                   5000 ;------------------------------------------------------------
                                   5001 ;Allocation info for local variables in function 'main'
                                   5002 ;------------------------------------------------------------
                                   5003 ;input                     Allocated to registers r6 r7 
                                   5004 ;------------------------------------------------------------
                                   5005 ;	calc.c:347: void main(void) {
                                   5006 ;	-----------------------------------------
                                   5007 ;	 function main
                                   5008 ;	-----------------------------------------
      001A01                       5009 _main:
                                   5010 ;	calc.c:350: c.base = 10l;
      001A01 90r00r0C         [24] 5011 	mov	dptr,#_c
      001A04 74 0A            [12] 5012 	mov	a,#0x0a
      001A06 F0               [24] 5013 	movx	@dptr,a
      001A07 E4               [12] 5014 	clr	a
      001A08 A3               [24] 5015 	inc	dptr
      001A09 F0               [24] 5016 	movx	@dptr,a
      001A0A A3               [24] 5017 	inc	dptr
      001A0B F0               [24] 5018 	movx	@dptr,a
      001A0C A3               [24] 5019 	inc	dptr
      001A0D F0               [24] 5020 	movx	@dptr,a
                                   5021 ;	calc.c:351: c.acc = 0l;
      001A0E 90r00r10         [24] 5022 	mov	dptr,#(_c + 0x0004)
      001A11 F0               [24] 5023 	movx	@dptr,a
      001A12 A3               [24] 5024 	inc	dptr
      001A13 F0               [24] 5025 	movx	@dptr,a
      001A14 A3               [24] 5026 	inc	dptr
      001A15 F0               [24] 5027 	movx	@dptr,a
      001A16 A3               [24] 5028 	inc	dptr
      001A17 F0               [24] 5029 	movx	@dptr,a
                                   5030 ;	calc.c:352: c.acc_valid = (char)0;
      001A18 90r00r14         [24] 5031 	mov	dptr,#(_c + 0x0008)
      001A1B F0               [24] 5032 	movx	@dptr,a
                                   5033 ;	calc.c:353: c.digit[0] = c.digit[1] = '\0';
      001A1C 90r00r16         [24] 5034 	mov	dptr,#(_c + 0x000a)
      001A1F F0               [24] 5035 	movx	@dptr,a
      001A20 90r00r15         [24] 5036 	mov	dptr,#(_c + 0x0009)
      001A23 F0               [24] 5037 	movx	@dptr,a
                                   5038 ;	calc.c:354: stack_init(&c.s);	
      001A24 90r00r17         [24] 5039 	mov	dptr,#(_c + 0x000b)
      001A27 75 F0 00         [24] 5040 	mov	b,#0x00
      001A2A 12r00r00         [24] 5041 	lcall	_stack_init
                                   5042 ;	calc.c:355: state_init(&s, STATE_START, STATE_FINAL, UNDEF, deltas, &c);
      001A2D 74r0C            [12] 5043 	mov	a,#_c
      001A2F C0 E0            [24] 5044 	push	acc
      001A31 74s00            [12] 5045 	mov	a,#(_c >> 8)
      001A33 C0 E0            [24] 5046 	push	acc
      001A35 E4               [12] 5047 	clr	a
      001A36 C0 E0            [24] 5048 	push	acc
      001A38 74r18            [12] 5049 	mov	a,#_deltas
      001A3A C0 E0            [24] 5050 	push	acc
      001A3C 74s00            [12] 5051 	mov	a,#(_deltas >> 8)
      001A3E C0 E0            [24] 5052 	push	acc
      001A40 E4               [12] 5053 	clr	a
      001A41 C0 E0            [24] 5054 	push	acc
      001A43 C0 E0            [24] 5055 	push	acc
      001A45 74 80            [12] 5056 	mov	a,#0x80
      001A47 C0 E0            [24] 5057 	push	acc
      001A49 74 03            [12] 5058 	mov	a,#0x03
      001A4B C0 E0            [24] 5059 	push	acc
      001A4D E4               [12] 5060 	clr	a
      001A4E C0 E0            [24] 5061 	push	acc
      001A50 C0 E0            [24] 5062 	push	acc
      001A52 C0 E0            [24] 5063 	push	acc
      001A54 90r00r00         [24] 5064 	mov	dptr,#_s
      001A57 75 F0 00         [24] 5065 	mov	b,#0x00
      001A5A 12r00r00         [24] 5066 	lcall	_state_init
      001A5D E5 81            [12] 5067 	mov	a,sp
      001A5F 24 F4            [12] 5068 	add	a,#0xf4
      001A61 F5 81            [12] 5069 	mov	sp,a
                                   5070 ;	calc.c:357: while (1) {
      001A63                       5071 00150$:
                                   5072 ;	calc.c:358: input = getchar();
      001A63 12r00r05         [24] 5073 	lcall	_getchar
                                   5074 ;	calc.c:359: (void)putchar(input);
      001A66 AE 82            [24] 5075 	mov	r6,dpl
      001A68 AF 83            [24] 5076 	mov  r7,dph
      001A6A 12r00r00         [24] 5077 	lcall	_putchar
                                   5078 ;	calc.c:360: if ((char)input == 'q') {
      001A6D 8E 05            [24] 5079 	mov	ar5,r6
      001A6F BD 71 29         [24] 5080 	cjne	r5,#0x71,00147$
                                   5081 ;	calc.c:361: if (state_exec(&s, EVENT_TERM) <= 0) break;
      001A72 74 06            [12] 5082 	mov	a,#0x06
      001A74 C0 E0            [24] 5083 	push	acc
      001A76 E4               [12] 5084 	clr	a
      001A77 C0 E0            [24] 5085 	push	acc
      001A79 90r00r00         [24] 5086 	mov	dptr,#_s
      001A7C 75 F0 00         [24] 5087 	mov	b,#0x00
      001A7F 12r00r00         [24] 5088 	lcall	_state_exec
      001A82 AB 82            [24] 5089 	mov	r3,dpl
      001A84 AC 83            [24] 5090 	mov	r4,dph
      001A86 15 81            [12] 5091 	dec	sp
      001A88 15 81            [12] 5092 	dec	sp
      001A8A C3               [12] 5093 	clr	c
      001A8B E4               [12] 5094 	clr	a
      001A8C 9B               [12] 5095 	subb	a,r3
      001A8D 74 80            [12] 5096 	mov	a,#(0x00 ^ 0x80)
      001A8F 8C F0            [24] 5097 	mov	b,r4
      001A91 63 F0 80         [24] 5098 	xrl	b,#0x80
      001A94 95 F0            [12] 5099 	subb	a,b
      001A96 40 CB            [24] 5100 	jc	00150$
      001A98 02r1Cr12         [24] 5101 	ljmp	00151$
      001A9B                       5102 00147$:
                                   5103 ;	calc.c:362: } else if ((char)input == '?') {
      001A9B BD 3F 29         [24] 5104 	cjne	r5,#0x3f,00144$
                                   5105 ;	calc.c:363: if (state_exec(&s, EVENT_HELP) <= 0) break;
      001A9E 74 03            [12] 5106 	mov	a,#0x03
      001AA0 C0 E0            [24] 5107 	push	acc
      001AA2 E4               [12] 5108 	clr	a
      001AA3 C0 E0            [24] 5109 	push	acc
      001AA5 90r00r00         [24] 5110 	mov	dptr,#_s
      001AA8 75 F0 00         [24] 5111 	mov	b,#0x00
      001AAB 12r00r00         [24] 5112 	lcall	_state_exec
      001AAE AB 82            [24] 5113 	mov	r3,dpl
      001AB0 AC 83            [24] 5114 	mov	r4,dph
      001AB2 15 81            [12] 5115 	dec	sp
      001AB4 15 81            [12] 5116 	dec	sp
      001AB6 C3               [12] 5117 	clr	c
      001AB7 E4               [12] 5118 	clr	a
      001AB8 9B               [12] 5119 	subb	a,r3
      001AB9 74 80            [12] 5120 	mov	a,#(0x00 ^ 0x80)
      001ABB 8C F0            [24] 5121 	mov	b,r4
      001ABD 63 F0 80         [24] 5122 	xrl	b,#0x80
      001AC0 95 F0            [12] 5123 	subb	a,b
      001AC2 40 9F            [24] 5124 	jc	00150$
      001AC4 02r1Cr12         [24] 5125 	ljmp	00151$
      001AC7                       5126 00144$:
                                   5127 ;	calc.c:364: } else if ((char)input == 'i') {
      001AC7 BD 69 2C         [24] 5128 	cjne	r5,#0x69,00141$
                                   5129 ;	calc.c:365: if (state_exec(&s, EVENT_RSTA_i) <= 0) break;
      001ACA 74 04            [12] 5130 	mov	a,#0x04
      001ACC C0 E0            [24] 5131 	push	acc
      001ACE E4               [12] 5132 	clr	a
      001ACF C0 E0            [24] 5133 	push	acc
      001AD1 90r00r00         [24] 5134 	mov	dptr,#_s
      001AD4 75 F0 00         [24] 5135 	mov	b,#0x00
      001AD7 12r00r00         [24] 5136 	lcall	_state_exec
      001ADA AB 82            [24] 5137 	mov	r3,dpl
      001ADC AC 83            [24] 5138 	mov	r4,dph
      001ADE 15 81            [12] 5139 	dec	sp
      001AE0 15 81            [12] 5140 	dec	sp
      001AE2 C3               [12] 5141 	clr	c
      001AE3 E4               [12] 5142 	clr	a
      001AE4 9B               [12] 5143 	subb	a,r3
      001AE5 74 80            [12] 5144 	mov	a,#(0x00 ^ 0x80)
      001AE7 8C F0            [24] 5145 	mov	b,r4
      001AE9 63 F0 80         [24] 5146 	xrl	b,#0x80
      001AEC 95 F0            [12] 5147 	subb	a,b
      001AEE 50 03            [24] 5148 	jnc	00274$
      001AF0 02r1Ar63         [24] 5149 	ljmp	00150$
      001AF3                       5150 00274$:
      001AF3 02r1Cr12         [24] 5151 	ljmp	00151$
      001AF6                       5152 00141$:
                                   5153 ;	calc.c:366: } else if ((char)input == 'I') {
      001AF6 BD 49 2C         [24] 5154 	cjne	r5,#0x49,00138$
                                   5155 ;	calc.c:367: if (state_exec(&s, EVENT_RSTA_I) <= 0) break;
      001AF9 74 05            [12] 5156 	mov	a,#0x05
      001AFB C0 E0            [24] 5157 	push	acc
      001AFD E4               [12] 5158 	clr	a
      001AFE C0 E0            [24] 5159 	push	acc
      001B00 90r00r00         [24] 5160 	mov	dptr,#_s
      001B03 75 F0 00         [24] 5161 	mov	b,#0x00
      001B06 12r00r00         [24] 5162 	lcall	_state_exec
      001B09 AB 82            [24] 5163 	mov	r3,dpl
      001B0B AC 83            [24] 5164 	mov	r4,dph
      001B0D 15 81            [12] 5165 	dec	sp
      001B0F 15 81            [12] 5166 	dec	sp
      001B11 C3               [12] 5167 	clr	c
      001B12 E4               [12] 5168 	clr	a
      001B13 9B               [12] 5169 	subb	a,r3
      001B14 74 80            [12] 5170 	mov	a,#(0x00 ^ 0x80)
      001B16 8C F0            [24] 5171 	mov	b,r4
      001B18 63 F0 80         [24] 5172 	xrl	b,#0x80
      001B1B 95 F0            [12] 5173 	subb	a,b
      001B1D 50 03            [24] 5174 	jnc	00277$
      001B1F 02r1Ar63         [24] 5175 	ljmp	00150$
      001B22                       5176 00277$:
      001B22 02r1Cr12         [24] 5177 	ljmp	00151$
      001B25                       5178 00138$:
                                   5179 ;	calc.c:368: } else if (isxdigit(input)) {
      001B25 8E 82            [24] 5180 	mov	dpl,r6
      001B27 8F 83            [24] 5181 	mov	dph,r7
      001B29 C0 05            [24] 5182 	push	ar5
      001B2B 12r00r00         [24] 5183 	lcall	_isxdigit
      001B2E E5 82            [12] 5184 	mov	a,dpl
      001B30 85 83 F0         [24] 5185 	mov	b,dph
      001B33 D0 05            [24] 5186 	pop	ar5
      001B35 45 F0            [12] 5187 	orl	a,b
      001B37 60 31            [24] 5188 	jz	00135$
                                   5189 ;	calc.c:369: c.digit[0] = (char)input;
      001B39 90r00r15         [24] 5190 	mov	dptr,#(_c + 0x0009)
      001B3C ED               [12] 5191 	mov	a,r5
      001B3D F0               [24] 5192 	movx	@dptr,a
                                   5193 ;	calc.c:370: if (state_exec(&s, EVENT_DIGIT) <= 0) break;
      001B3E 74 01            [12] 5194 	mov	a,#0x01
      001B40 C0 E0            [24] 5195 	push	acc
      001B42 E4               [12] 5196 	clr	a
      001B43 C0 E0            [24] 5197 	push	acc
      001B45 90r00r00         [24] 5198 	mov	dptr,#_s
      001B48 75 F0 00         [24] 5199 	mov	b,#0x00
      001B4B 12r00r00         [24] 5200 	lcall	_state_exec
      001B4E AE 82            [24] 5201 	mov	r6,dpl
      001B50 AF 83            [24] 5202 	mov	r7,dph
      001B52 15 81            [12] 5203 	dec	sp
      001B54 15 81            [12] 5204 	dec	sp
      001B56 C3               [12] 5205 	clr	c
      001B57 E4               [12] 5206 	clr	a
      001B58 9E               [12] 5207 	subb	a,r6
      001B59 74 80            [12] 5208 	mov	a,#(0x00 ^ 0x80)
      001B5B 8F F0            [24] 5209 	mov	b,r7
      001B5D 63 F0 80         [24] 5210 	xrl	b,#0x80
      001B60 95 F0            [12] 5211 	subb	a,b
      001B62 50 03            [24] 5212 	jnc	00279$
      001B64 02r1Ar63         [24] 5213 	ljmp	00150$
      001B67                       5214 00279$:
      001B67 02r1Cr12         [24] 5215 	ljmp	00151$
      001B6A                       5216 00135$:
                                   5217 ;	calc.c:372: ((char)input == 'h') || ((char)input == 'H') ||
      001B6A BD 68 02         [24] 5218 	cjne	r5,#0x68,00280$
      001B6D 80 4E            [24] 5219 	sjmp	00115$
      001B6F                       5220 00280$:
      001B6F BD 48 02         [24] 5221 	cjne	r5,#0x48,00281$
      001B72 80 49            [24] 5222 	sjmp	00115$
      001B74                       5223 00281$:
                                   5224 ;	calc.c:373: ((char)input == 'p') || ((char)input == 'P') ||
      001B74 BD 70 02         [24] 5225 	cjne	r5,#0x70,00282$
      001B77 80 44            [24] 5226 	sjmp	00115$
      001B79                       5227 00282$:
      001B79 BD 50 02         [24] 5228 	cjne	r5,#0x50,00283$
      001B7C 80 3F            [24] 5229 	sjmp	00115$
      001B7E                       5230 00283$:
                                   5231 ;	calc.c:374: ((char)input == '.') || ((char)input == 'v') || ((char)input == 'V') ||
      001B7E BD 2E 02         [24] 5232 	cjne	r5,#0x2e,00284$
      001B81 80 3A            [24] 5233 	sjmp	00115$
      001B83                       5234 00284$:
      001B83 BD 76 02         [24] 5235 	cjne	r5,#0x76,00285$
      001B86 80 35            [24] 5236 	sjmp	00115$
      001B88                       5237 00285$:
      001B88 BD 56 02         [24] 5238 	cjne	r5,#0x56,00286$
      001B8B 80 30            [24] 5239 	sjmp	00115$
      001B8D                       5240 00286$:
                                   5241 ;	calc.c:375: ((char)input == 'x') ||
      001B8D BD 78 02         [24] 5242 	cjne	r5,#0x78,00287$
      001B90 80 2B            [24] 5243 	sjmp	00115$
      001B92                       5244 00287$:
                                   5245 ;	calc.c:376: ((char)input == '+') ||
      001B92 BD 2B 02         [24] 5246 	cjne	r5,#0x2b,00288$
      001B95 80 26            [24] 5247 	sjmp	00115$
      001B97                       5248 00288$:
                                   5249 ;	calc.c:377: ((char)input == '-') ||
      001B97 BD 2D 02         [24] 5250 	cjne	r5,#0x2d,00289$
      001B9A 80 21            [24] 5251 	sjmp	00115$
      001B9C                       5252 00289$:
                                   5253 ;	calc.c:378: ((char)input == '*') ||
      001B9C BD 2A 02         [24] 5254 	cjne	r5,#0x2a,00290$
      001B9F 80 1C            [24] 5255 	sjmp	00115$
      001BA1                       5256 00290$:
                                   5257 ;	calc.c:379: ((char)input == '/') ||
      001BA1 BD 2F 02         [24] 5258 	cjne	r5,#0x2f,00291$
      001BA4 80 17            [24] 5259 	sjmp	00115$
      001BA6                       5260 00291$:
                                   5261 ;	calc.c:380: ((char)input == '%') ||
      001BA6 BD 25 02         [24] 5262 	cjne	r5,#0x25,00292$
      001BA9 80 12            [24] 5263 	sjmp	00115$
      001BAB                       5264 00292$:
                                   5265 ;	calc.c:381: ((char)input == '&') ||
      001BAB BD 26 02         [24] 5266 	cjne	r5,#0x26,00293$
      001BAE 80 0D            [24] 5267 	sjmp	00115$
      001BB0                       5268 00293$:
                                   5269 ;	calc.c:382: ((char)input == '|') ||
      001BB0 BD 7C 02         [24] 5270 	cjne	r5,#0x7c,00294$
      001BB3 80 08            [24] 5271 	sjmp	00115$
      001BB5                       5272 00294$:
                                   5273 ;	calc.c:383: ((char)input == '^') ||
      001BB5 BD 5E 02         [24] 5274 	cjne	r5,#0x5e,00295$
      001BB8 80 03            [24] 5275 	sjmp	00115$
      001BBA                       5276 00295$:
                                   5277 ;	calc.c:384: ((char)input == '~')
      001BBA BD 7E 2E         [24] 5278 	cjne	r5,#0x7e,00116$
      001BBD                       5279 00115$:
                                   5280 ;	calc.c:386: c.digit[0] = (char)input;
      001BBD 90r00r15         [24] 5281 	mov	dptr,#(_c + 0x0009)
      001BC0 ED               [12] 5282 	mov	a,r5
      001BC1 F0               [24] 5283 	movx	@dptr,a
                                   5284 ;	calc.c:387: if (state_exec(&s, EVENT_OP) <= 0) break;
      001BC2 74 02            [12] 5285 	mov	a,#0x02
      001BC4 C0 E0            [24] 5286 	push	acc
      001BC6 E4               [12] 5287 	clr	a
      001BC7 C0 E0            [24] 5288 	push	acc
      001BC9 90r00r00         [24] 5289 	mov	dptr,#_s
      001BCC 75 F0 00         [24] 5290 	mov	b,#0x00
      001BCF 12r00r00         [24] 5291 	lcall	_state_exec
      001BD2 AE 82            [24] 5292 	mov	r6,dpl
      001BD4 AF 83            [24] 5293 	mov	r7,dph
      001BD6 15 81            [12] 5294 	dec	sp
      001BD8 15 81            [12] 5295 	dec	sp
      001BDA C3               [12] 5296 	clr	c
      001BDB E4               [12] 5297 	clr	a
      001BDC 9E               [12] 5298 	subb	a,r6
      001BDD 74 80            [12] 5299 	mov	a,#(0x00 ^ 0x80)
      001BDF 8F F0            [24] 5300 	mov	b,r7
      001BE1 63 F0 80         [24] 5301 	xrl	b,#0x80
      001BE4 95 F0            [12] 5302 	subb	a,b
      001BE6 50 2A            [24] 5303 	jnc	00151$
      001BE8 02r1Ar63         [24] 5304 	ljmp	00150$
      001BEB                       5305 00116$:
                                   5306 ;	calc.c:389: if (state_exec(&s, EVENT_DELIM) <= 0) break;
      001BEB E4               [12] 5307 	clr	a
      001BEC C0 E0            [24] 5308 	push	acc
      001BEE C0 E0            [24] 5309 	push	acc
      001BF0 90r00r00         [24] 5310 	mov	dptr,#_s
      001BF3 75 F0 00         [24] 5311 	mov	b,#0x00
      001BF6 12r00r00         [24] 5312 	lcall	_state_exec
      001BF9 AE 82            [24] 5313 	mov	r6,dpl
      001BFB AF 83            [24] 5314 	mov	r7,dph
      001BFD 15 81            [12] 5315 	dec	sp
      001BFF 15 81            [12] 5316 	dec	sp
      001C01 C3               [12] 5317 	clr	c
      001C02 E4               [12] 5318 	clr	a
      001C03 9E               [12] 5319 	subb	a,r6
      001C04 74 80            [12] 5320 	mov	a,#(0x00 ^ 0x80)
      001C06 8F F0            [24] 5321 	mov	b,r7
      001C08 63 F0 80         [24] 5322 	xrl	b,#0x80
      001C0B 95 F0            [12] 5323 	subb	a,b
      001C0D 50 03            [24] 5324 	jnc	00299$
      001C0F 02r1Ar63         [24] 5325 	ljmp	00150$
      001C12                       5326 00299$:
      001C12                       5327 00151$:
                                   5328 ;	calc.c:395: __endasm;
      001C12 43 87 02         [24] 5329 	orl	pcon, #2
                                   5330 ;	calc.c:396: }
      001C15 22               [24] 5331 	ret
                                   5332 	.area CSEG    (CODE)
                                   5333 	.area CONST   (CODE)
                                   5334 	.area CONST   (CODE)
      000000                       5335 ___str_0:
      000000 0D                    5336 	.db 0x0d
      000001 0A                    5337 	.db 0x0a
      000002 00                    5338 	.db 0x00
                                   5339 	.area CSEG    (CODE)
                                   5340 	.area CONST   (CODE)
      000003                       5341 ___str_1:
      000003 73 74 61 63 6B 20 75  5342 	.ascii "stack underflow"
             6E 64 65 72 66 6C 6F
             77
      000012 0D                    5343 	.db 0x0d
      000013 0A                    5344 	.db 0x0a
      000014 00                    5345 	.db 0x00
                                   5346 	.area CSEG    (CODE)
                                   5347 	.area CONST   (CODE)
      000015                       5348 ___str_2:
      000015 0D                    5349 	.db 0x0d
      000016 0A                    5350 	.db 0x0a
      000017 73 74 61 63 6B 20 75  5351 	.ascii "stack underflow"
             6E 64 65 72 66 6C 6F
             77
      000026 0D                    5352 	.db 0x0d
      000027 0A                    5353 	.db 0x0a
      000028 00                    5354 	.db 0x00
                                   5355 	.area CSEG    (CODE)
                                   5356 	.area CONST   (CODE)
      000029                       5357 ___str_3:
      000029 0D                    5358 	.db 0x0d
      00002A 0A                    5359 	.db 0x0a
      00002B 64 69 76 69 73 69 6F  5360 	.ascii "division by zero"
             6E 20 62 79 20 7A 65
             72 6F
      00003B 0D                    5361 	.db 0x0d
      00003C 0A                    5362 	.db 0x0a
      00003D 00                    5363 	.db 0x00
                                   5364 	.area CSEG    (CODE)
                                   5365 	.area CONST   (CODE)
      00003E                       5366 ___str_4:
      00003E 0D                    5367 	.db 0x0d
      00003F 0A                    5368 	.db 0x0a
      000040 73 74 61 63 6B 20 6F  5369 	.ascii "stack overflow"
             76 65 72 66 6C 6F 77
      00004E 0D                    5370 	.db 0x0d
      00004F 0A                    5371 	.db 0x0a
      000050 00                    5372 	.db 0x00
                                   5373 	.area CSEG    (CODE)
                                   5374 	.area CONST   (CODE)
      000051                       5375 ___str_5:
      000051 0D                    5376 	.db 0x0d
      000052 0A                    5377 	.db 0x0a
      000053 62 61 73 65 20 3D 20  5378 	.ascii "base = %ld, acc = %ld / %0.8lx, acc_valid = %d"
             25 6C 64 2C 20 61 63
             63 20 3D 20 25 6C 64
             20 2F 20 25 30 2E 38
             6C 78 2C 20 61 63 63
             5F 76 61 6C 69 64 20
             3D 20 25 64
      000081 0D                    5379 	.db 0x0d
      000082 0A                    5380 	.db 0x0a
      000083 0D                    5381 	.db 0x0d
      000084 0A                    5382 	.db 0x0a
      000085 00                    5383 	.db 0x00
                                   5384 	.area CSEG    (CODE)
                                   5385 	.area CONST   (CODE)
      000086                       5386 ___str_6:
      000086 68                    5387 	.ascii "h"
      000087 09                    5388 	.db 0x09
      000088 62 61 73 65 20 31 30  5389 	.ascii "base 10"
      00008F 0D                    5390 	.db 0x0d
      000090 0A                    5391 	.db 0x0a
      000091 00                    5392 	.db 0x00
                                   5393 	.area CSEG    (CODE)
                                   5394 	.area CONST   (CODE)
      000092                       5395 ___str_7:
      000092 48                    5396 	.ascii "H"
      000093 09                    5397 	.db 0x09
      000094 62 61 73 65 20 31 36  5398 	.ascii "base 16"
      00009B 0D                    5399 	.db 0x0d
      00009C 0A                    5400 	.db 0x0a
      00009D 00                    5401 	.db 0x00
                                   5402 	.area CSEG    (CODE)
                                   5403 	.area CONST   (CODE)
      00009E                       5404 ___str_8:
      00009E 70                    5405 	.ascii "p"
      00009F 09                    5406 	.db 0x09
      0000A0 70 65 65 6B 20 74 6F  5407 	.ascii "peek top"
             70
      0000A8 0D                    5408 	.db 0x0d
      0000A9 0A                    5409 	.db 0x0a
      0000AA 00                    5410 	.db 0x00
                                   5411 	.area CSEG    (CODE)
                                   5412 	.area CONST   (CODE)
      0000AB                       5413 ___str_9:
      0000AB 50                    5414 	.ascii "P"
      0000AC 09                    5415 	.db 0x09
      0000AD 70 72 69 6E 74 20 73  5416 	.ascii "print stack"
             74 61 63 6B
      0000B8 0D                    5417 	.db 0x0d
      0000B9 0A                    5418 	.db 0x0a
      0000BA 00                    5419 	.db 0x00
                                   5420 	.area CSEG    (CODE)
                                   5421 	.area CONST   (CODE)
      0000BB                       5422 ___str_10:
      0000BB 76 20 2E              5423 	.ascii "v ."
      0000BE 09                    5424 	.db 0x09
      0000BF 70 6F 70 20 74 6F 70  5425 	.ascii "pop top"
      0000C6 0D                    5426 	.db 0x0d
      0000C7 0A                    5427 	.db 0x0a
      0000C8 00                    5428 	.db 0x00
                                   5429 	.area CSEG    (CODE)
                                   5430 	.area CONST   (CODE)
      0000C9                       5431 ___str_11:
      0000C9 56                    5432 	.ascii "V"
      0000CA 09                    5433 	.db 0x09
      0000CB 70 6F 70 20 61 6C 6C  5434 	.ascii "pop all"
      0000D2 0D                    5435 	.db 0x0d
      0000D3 0A                    5436 	.db 0x0a
      0000D4 00                    5437 	.db 0x00
                                   5438 	.area CSEG    (CODE)
                                   5439 	.area CONST   (CODE)
      0000D5                       5440 ___str_12:
      0000D5 69                    5441 	.ascii "i"
      0000D6 09                    5442 	.db 0x09
      0000D7 72 65 73 65 74 20 61  5443 	.ascii "reset acc"
             63 63
      0000E0 0D                    5444 	.db 0x0d
      0000E1 0A                    5445 	.db 0x0a
      0000E2 00                    5446 	.db 0x00
                                   5447 	.area CSEG    (CODE)
                                   5448 	.area CONST   (CODE)
      0000E3                       5449 ___str_13:
      0000E3 49                    5450 	.ascii "I"
      0000E4 09                    5451 	.db 0x09
      0000E5 72 65 73 65 74 20 61  5452 	.ascii "reset and discard acc"
             6E 64 20 64 69 73 63
             61 72 64 20 61 63 63
      0000FA 0D                    5453 	.db 0x0d
      0000FB 0A                    5454 	.db 0x0a
      0000FC 00                    5455 	.db 0x00
                                   5456 	.area CSEG    (CODE)
                                   5457 	.area CONST   (CODE)
      0000FD                       5458 ___str_14:
      0000FD 78                    5459 	.ascii "x"
      0000FE 09                    5460 	.db 0x09
      0000FF 65 78 63 68 61 6E 67  5461 	.ascii "exchange top 2"
             65 20 74 6F 70 20 32
      00010D 0D                    5462 	.db 0x0d
      00010E 0A                    5463 	.db 0x0a
      00010F 00                    5464 	.db 0x00
                                   5465 	.area CSEG    (CODE)
                                   5466 	.area CONST   (CODE)
      000110                       5467 ___str_15:
      000110 2B                    5468 	.ascii "+"
      000111 09                    5469 	.db 0x09
      000112 61 64 64 20 74 6F 70  5470 	.ascii "add top 2"
             20 32
      00011B 0D                    5471 	.db 0x0d
      00011C 0A                    5472 	.db 0x0a
      00011D 00                    5473 	.db 0x00
                                   5474 	.area CSEG    (CODE)
                                   5475 	.area CONST   (CODE)
      00011E                       5476 ___str_16:
      00011E 2D                    5477 	.ascii "-"
      00011F 09                    5478 	.db 0x09
      000120 73 75 62 74 72 61 63  5479 	.ascii "subtract top 2"
             74 20 74 6F 70 20 32
      00012E 0D                    5480 	.db 0x0d
      00012F 0A                    5481 	.db 0x0a
      000130 00                    5482 	.db 0x00
                                   5483 	.area CSEG    (CODE)
                                   5484 	.area CONST   (CODE)
      000131                       5485 ___str_17:
      000131 2A                    5486 	.ascii "*"
      000132 09                    5487 	.db 0x09
      000133 6D 75 6C 74 69 70 6C  5488 	.ascii "multiply top 2"
             79 20 74 6F 70 20 32
      000141 0D                    5489 	.db 0x0d
      000142 0A                    5490 	.db 0x0a
      000143 00                    5491 	.db 0x00
                                   5492 	.area CSEG    (CODE)
                                   5493 	.area CONST   (CODE)
      000144                       5494 ___str_18:
      000144 2F                    5495 	.ascii "/"
      000145 09                    5496 	.db 0x09
      000146 64 69 76 69 64 65 20  5497 	.ascii "divide top 2"
             74 6F 70 20 32
      000152 0D                    5498 	.db 0x0d
      000153 0A                    5499 	.db 0x0a
      000154 00                    5500 	.db 0x00
                                   5501 	.area CSEG    (CODE)
                                   5502 	.area CONST   (CODE)
      000155                       5503 ___str_19:
      000155 25                    5504 	.ascii "%"
      000156 09                    5505 	.db 0x09
      000157 6D 6F 64 75 6C 75 73  5506 	.ascii "modulus top 2"
             20 74 6F 70 20 32
      000164 0D                    5507 	.db 0x0d
      000165 0A                    5508 	.db 0x0a
      000166 00                    5509 	.db 0x00
                                   5510 	.area CSEG    (CODE)
                                   5511 	.area CONST   (CODE)
      000167                       5512 ___str_20:
      000167 26                    5513 	.ascii "&"
      000168 09                    5514 	.db 0x09
      000169 61 6E 64 20 74 6F 70  5515 	.ascii "and top 2"
             20 32
      000172 0D                    5516 	.db 0x0d
      000173 0A                    5517 	.db 0x0a
      000174 00                    5518 	.db 0x00
                                   5519 	.area CSEG    (CODE)
                                   5520 	.area CONST   (CODE)
      000175                       5521 ___str_21:
      000175 7C                    5522 	.ascii "|"
      000176 09                    5523 	.db 0x09
      000177 6F 72 20 74 6F 70 20  5524 	.ascii "or top 2"
             32
      00017F 0D                    5525 	.db 0x0d
      000180 0A                    5526 	.db 0x0a
      000181 00                    5527 	.db 0x00
                                   5528 	.area CSEG    (CODE)
                                   5529 	.area CONST   (CODE)
      000182                       5530 ___str_22:
      000182 5E                    5531 	.ascii "^"
      000183 09                    5532 	.db 0x09
      000184 78 6F 72 20 74 6F 70  5533 	.ascii "xor top 2"
             20 32
      00018D 0D                    5534 	.db 0x0d
      00018E 0A                    5535 	.db 0x0a
      00018F 00                    5536 	.db 0x00
                                   5537 	.area CSEG    (CODE)
                                   5538 	.area CONST   (CODE)
      000190                       5539 ___str_23:
      000190 7E                    5540 	.ascii "~"
      000191 09                    5541 	.db 0x09
      000192 62 69 74 77 69 73 65  5542 	.ascii "bitwise not top"
             20 6E 6F 74 20 74 6F
             70
      0001A1 0D                    5543 	.db 0x0d
      0001A2 0A                    5544 	.db 0x0a
      0001A3 00                    5545 	.db 0x00
                                   5546 	.area CSEG    (CODE)
                                   5547 	.area CONST   (CODE)
      0001A4                       5548 ___str_24:
      0001A4 3F                    5549 	.ascii "?"
      0001A5 09                    5550 	.db 0x09
      0001A6 68 65 6C 70           5551 	.ascii "help"
      0001AA 0D                    5552 	.db 0x0d
      0001AB 0A                    5553 	.db 0x0a
      0001AC 00                    5554 	.db 0x00
                                   5555 	.area CSEG    (CODE)
                                   5556 	.area CONST   (CODE)
      0001AD                       5557 ___str_25:
      0001AD 71                    5558 	.ascii "q"
      0001AE 09                    5559 	.db 0x09
      0001AF 71 75 69 74           5560 	.ascii "quit"
      0001B3 0D                    5561 	.db 0x0d
      0001B4 0A                    5562 	.db 0x0a
      0001B5 00                    5563 	.db 0x00
                                   5564 	.area CSEG    (CODE)
                                   5565 	.area CONST   (CODE)
      0001B6                       5566 ___str_26:
      0001B6 50 54 20 25 30 2E 38  5567 	.ascii "PT %0.8lx"
             6C 78
      0001BF 0D                    5568 	.db 0x0d
      0001C0 0A                    5569 	.db 0x0a
      0001C1 00                    5570 	.db 0x00
                                   5571 	.area CSEG    (CODE)
                                   5572 	.area CONST   (CODE)
      0001C2                       5573 ___str_27:
      0001C2 50 54 20 25 6C 64     5574 	.ascii "PT %ld"
      0001C8 0D                    5575 	.db 0x0d
      0001C9 0A                    5576 	.db 0x0a
      0001CA 00                    5577 	.db 0x00
                                   5578 	.area CSEG    (CODE)
                                   5579 	.area CONST   (CODE)
      0001CB                       5580 ___str_28:
      0001CB 50 41 20 25 30 2E 38  5581 	.ascii "PA %0.8lx"
             6C 78
      0001D4 0D                    5582 	.db 0x0d
      0001D5 0A                    5583 	.db 0x0a
      0001D6 00                    5584 	.db 0x00
                                   5585 	.area CSEG    (CODE)
                                   5586 	.area CONST   (CODE)
      0001D7                       5587 ___str_29:
      0001D7 50 41 20 25 6C 64     5588 	.ascii "PA %ld"
      0001DD 0D                    5589 	.db 0x0d
      0001DE 0A                    5590 	.db 0x0a
      0001DF 00                    5591 	.db 0x00
                                   5592 	.area CSEG    (CODE)
                                   5593 	.area CONST   (CODE)
      0001E0                       5594 ___str_30:
      0001E0 56 54 20 25 30 2E 38  5595 	.ascii "VT %0.8lx"
             6C 78
      0001E9 0D                    5596 	.db 0x0d
      0001EA 0A                    5597 	.db 0x0a
      0001EB 00                    5598 	.db 0x00
                                   5599 	.area CSEG    (CODE)
                                   5600 	.area CONST   (CODE)
      0001EC                       5601 ___str_31:
      0001EC 56 54 20 25 6C 64     5602 	.ascii "VT %ld"
      0001F2 0D                    5603 	.db 0x0d
      0001F3 0A                    5604 	.db 0x0a
      0001F4 00                    5605 	.db 0x00
                                   5606 	.area CSEG    (CODE)
                                   5607 	.area CONST   (CODE)
      0001F5                       5608 ___str_32:
      0001F5 56 41 20 25 30 2E 38  5609 	.ascii "VA %0.8lx"
             6C 78
      0001FE 0D                    5610 	.db 0x0d
      0001FF 0A                    5611 	.db 0x0a
      000200 00                    5612 	.db 0x00
                                   5613 	.area CSEG    (CODE)
                                   5614 	.area CONST   (CODE)
      000201                       5615 ___str_33:
      000201 56 41 20 25 6C 64     5616 	.ascii "VA %ld"
      000207 0D                    5617 	.db 0x0d
      000208 0A                    5618 	.db 0x0a
      000209 00                    5619 	.db 0x00
                                   5620 	.area CSEG    (CODE)
                                   5621 	.area XINIT   (CODE)
      000000                       5622 __xinit__hexp:
      000000rB6s01 80              5623 	.byte ___str_26, (___str_26 >> 8),#0x80
      000003                       5624 __xinit__decp:
      000003rC2s01 80              5625 	.byte ___str_27, (___str_27 >> 8),#0x80
      000006                       5626 __xinit__hexP:
      000006rCBs01 80              5627 	.byte ___str_28, (___str_28 >> 8),#0x80
      000009                       5628 __xinit__decP:
      000009rD7s01 80              5629 	.byte ___str_29, (___str_29 >> 8),#0x80
      00000C                       5630 __xinit__hexv:
      00000CrE0s01 80              5631 	.byte ___str_30, (___str_30 >> 8),#0x80
      00000F                       5632 __xinit__decv:
      00000FrECs01 80              5633 	.byte ___str_31, (___str_31 >> 8),#0x80
      000012                       5634 __xinit__hexV:
      000012rF5s01 80              5635 	.byte ___str_32, (___str_32 >> 8),#0x80
      000015                       5636 __xinit__decV:
      000015r01s02 80              5637 	.byte ___str_33, (___str_33 >> 8),#0x80
      000018                       5638 __xinit__deltas:
      000018 00 00                 5639 	.byte #0x00, #0x00	;  0
      00001A 00 00                 5640 	.byte #0x00, #0x00	;  0
      00001C 00 00                 5641 	.byte #0x00, #0x00	;  0
      00001E 00 00                 5642 	.byte #0x00,#0x00
      000020 00 00                 5643 	.byte #0x00,#0x00
      000022 00 00                 5644 	.byte #0x00, #0x00	;  0
      000024 01 00                 5645 	.byte #0x01, #0x00	;  1
      000026 02 00                 5646 	.byte #0x02, #0x00	;  2
      000028 00 00                 5647 	.byte #0x00,#0x00
      00002Ar22s00                 5648 	.byte _accumulate, (_accumulate >> 8)
      00002C 00 00                 5649 	.byte #0x00, #0x00	;  0
      00002E 02 00                 5650 	.byte #0x02, #0x00	;  2
      000030 01 00                 5651 	.byte #0x01, #0x00	;  1
      000032 00 00                 5652 	.byte #0x00,#0x00
      000034rEFs03                 5653 	.byte _operator, (_operator >> 8)
      000036 01 00                 5654 	.byte #0x01, #0x00	;  1
      000038 00 00                 5655 	.byte #0x00, #0x00	;  0
      00003A 00 00                 5656 	.byte #0x00, #0x00	;  0
      00003C 00 00                 5657 	.byte #0x00,#0x00
      00003E 00 00                 5658 	.byte #0x00,#0x00
      000040 01 00                 5659 	.byte #0x01, #0x00	;  1
      000042 02 00                 5660 	.byte #0x02, #0x00	;  2
      000044 01 00                 5661 	.byte #0x01, #0x00	;  1
      000046 00 00                 5662 	.byte #0x00,#0x00
      000048rEFs03                 5663 	.byte _operator, (_operator >> 8)
      00004A 01 00                 5664 	.byte #0x01, #0x00	;  1
      00004C 01 00                 5665 	.byte #0x01, #0x00	;  1
      00004E 02 00                 5666 	.byte #0x02, #0x00	;  2
      000050 00 00                 5667 	.byte #0x00,#0x00
      000052r22s00                 5668 	.byte _accumulate, (_accumulate >> 8)
      000054 02 00                 5669 	.byte #0x02, #0x00	;  2
      000056 00 00                 5670 	.byte #0x00, #0x00	;  0
      000058 00 00                 5671 	.byte #0x00, #0x00	;  0
      00005A 00 00                 5672 	.byte #0x00,#0x00
      00005Cr00s15                 5673 	.byte _push_acc, (_push_acc >> 8)
      00005E 02 00                 5674 	.byte #0x02, #0x00	;  2
      000060 05 00                 5675 	.byte #0x05, #0x00	;  5
      000062 00 00                 5676 	.byte #0x00, #0x00	;  0
      000064 00 00                 5677 	.byte #0x00,#0x00
      000066r07s16                 5678 	.byte _reset_acc, (_reset_acc >> 8)
      000068 02 00                 5679 	.byte #0x02, #0x00	;  2
      00006A 01 00                 5680 	.byte #0x01, #0x00	;  1
      00006C 02 00                 5681 	.byte #0x02, #0x00	;  2
      00006E 00 00                 5682 	.byte #0x00,#0x00
      000070r22s00                 5683 	.byte _accumulate, (_accumulate >> 8)
      000072 02 00                 5684 	.byte #0x02, #0x00	;  2
      000074 02 00                 5685 	.byte #0x02, #0x00	;  2
      000076 01 00                 5686 	.byte #0x01, #0x00	;  1
      000078 00 00                 5687 	.byte #0x00,#0x00
      00007Ar00s15                 5688 	.byte _push_acc, (_push_acc >> 8)
      00007C FF 7F                 5689 	.byte #0xff, #0x7f	;  32767
      00007E 04 00                 5690 	.byte #0x04, #0x00	;  4
      000080 FF 7F                 5691 	.byte #0xff, #0x7f	;  32767
      000082 00 00                 5692 	.byte #0x00,#0x00
      000084r07s16                 5693 	.byte _reset_acc, (_reset_acc >> 8)
      000086 FF 7F                 5694 	.byte #0xff, #0x7f	;  32767
      000088 05 00                 5695 	.byte #0x05, #0x00	;  5
      00008A FF 7F                 5696 	.byte #0xff, #0x7f	;  32767
      00008C 00 00                 5697 	.byte #0x00,#0x00
      00008E 00 00                 5698 	.byte #0x00,#0x00
      000090 FF 7F                 5699 	.byte #0xff, #0x7f	;  32767
      000092 03 00                 5700 	.byte #0x03, #0x00	;  3
      000094 FF 7F                 5701 	.byte #0xff, #0x7f	;  32767
      000096 00 00                 5702 	.byte #0x00,#0x00
      000098r71s16                 5703 	.byte _help, (_help >> 8)
      00009A FF 7F                 5704 	.byte #0xff, #0x7f	;  32767
      00009C 06 00                 5705 	.byte #0x06, #0x00	;  6
      00009E 03 00                 5706 	.byte #0x03, #0x00	;  3
      0000A0 00 00                 5707 	.byte #0x00,#0x00
      0000A2r98s01                 5708 	.byte _dump_pop, (_dump_pop >> 8)
      0000A4 00 80                 5709 	.byte #0x00, #0x80	; -32768
      0000A6 00 80                 5710 	.byte #0x00, #0x80	; -32768
      0000A8 00 80                 5711 	.byte #0x00, #0x80	; -32768
      0000AA 00 00                 5712 	.byte #0x00,#0x00
      0000AC 00 00                 5713 	.byte #0x00,#0x00
                                   5714 	.area CABS    (ABS,CODE)
