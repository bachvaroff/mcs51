                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module calc
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _getchar_poll
                                     13 	.globl _state_exec
                                     14 	.globl _state_init
                                     15 	.globl _stack_iter_peek
                                     16 	.globl _stack_peek
                                     17 	.globl _stack_pop
                                     18 	.globl _stack_push
                                     19 	.globl _stack_init
                                     20 	.globl _isxdigit
                                     21 	.globl _printf
                                     22 	.globl _strtol
                                     23 	.globl _CY
                                     24 	.globl _AC
                                     25 	.globl _F0
                                     26 	.globl _RS1
                                     27 	.globl _RS0
                                     28 	.globl _OV
                                     29 	.globl _FL
                                     30 	.globl _P
                                     31 	.globl _TF2
                                     32 	.globl _EXF2
                                     33 	.globl _RCLK
                                     34 	.globl _TCLK
                                     35 	.globl _EXEN2
                                     36 	.globl _TR2
                                     37 	.globl _C_T2
                                     38 	.globl _CP_RL2
                                     39 	.globl _T2CON_7
                                     40 	.globl _T2CON_6
                                     41 	.globl _T2CON_5
                                     42 	.globl _T2CON_4
                                     43 	.globl _T2CON_3
                                     44 	.globl _T2CON_2
                                     45 	.globl _T2CON_1
                                     46 	.globl _T2CON_0
                                     47 	.globl _PT2
                                     48 	.globl _PS
                                     49 	.globl _PT1
                                     50 	.globl _PX1
                                     51 	.globl _PT0
                                     52 	.globl _PX0
                                     53 	.globl _RD
                                     54 	.globl _WR
                                     55 	.globl _T1
                                     56 	.globl _T0
                                     57 	.globl _INT1
                                     58 	.globl _INT0
                                     59 	.globl _TXD
                                     60 	.globl _RXD
                                     61 	.globl _P3_7
                                     62 	.globl _P3_6
                                     63 	.globl _P3_5
                                     64 	.globl _P3_4
                                     65 	.globl _P3_3
                                     66 	.globl _P3_2
                                     67 	.globl _P3_1
                                     68 	.globl _P3_0
                                     69 	.globl _EA
                                     70 	.globl _ET2
                                     71 	.globl _ES
                                     72 	.globl _ET1
                                     73 	.globl _EX1
                                     74 	.globl _ET0
                                     75 	.globl _EX0
                                     76 	.globl _P2_7
                                     77 	.globl _P2_6
                                     78 	.globl _P2_5
                                     79 	.globl _P2_4
                                     80 	.globl _P2_3
                                     81 	.globl _P2_2
                                     82 	.globl _P2_1
                                     83 	.globl _P2_0
                                     84 	.globl _SM0
                                     85 	.globl _SM1
                                     86 	.globl _SM2
                                     87 	.globl _REN
                                     88 	.globl _TB8
                                     89 	.globl _RB8
                                     90 	.globl _TI
                                     91 	.globl _RI
                                     92 	.globl _T2EX
                                     93 	.globl _T2
                                     94 	.globl _P1_7
                                     95 	.globl _P1_6
                                     96 	.globl _P1_5
                                     97 	.globl _P1_4
                                     98 	.globl _P1_3
                                     99 	.globl _P1_2
                                    100 	.globl _P1_1
                                    101 	.globl _P1_0
                                    102 	.globl _TF1
                                    103 	.globl _TR1
                                    104 	.globl _TF0
                                    105 	.globl _TR0
                                    106 	.globl _IE1
                                    107 	.globl _IT1
                                    108 	.globl _IE0
                                    109 	.globl _IT0
                                    110 	.globl _P0_7
                                    111 	.globl _P0_6
                                    112 	.globl _P0_5
                                    113 	.globl _P0_4
                                    114 	.globl _P0_3
                                    115 	.globl _P0_2
                                    116 	.globl _P0_1
                                    117 	.globl _P0_0
                                    118 	.globl _B
                                    119 	.globl _A
                                    120 	.globl _ACC
                                    121 	.globl _PSW
                                    122 	.globl _TH2
                                    123 	.globl _TL2
                                    124 	.globl _RCAP2H
                                    125 	.globl _RCAP2L
                                    126 	.globl _T2MOD
                                    127 	.globl _T2CON
                                    128 	.globl _IP
                                    129 	.globl _P3
                                    130 	.globl _IE
                                    131 	.globl _P2
                                    132 	.globl _SBUF
                                    133 	.globl _SCON
                                    134 	.globl _P1
                                    135 	.globl _TH1
                                    136 	.globl _TH0
                                    137 	.globl _TL1
                                    138 	.globl _TL0
                                    139 	.globl _TMOD
                                    140 	.globl _TCON
                                    141 	.globl _PCON
                                    142 	.globl _DPH
                                    143 	.globl _DPL
                                    144 	.globl _SP
                                    145 	.globl _P0
                                    146 	.globl _putchar
                                    147 	.globl _getchar
                                    148 ;--------------------------------------------------------
                                    149 ; special function registers
                                    150 ;--------------------------------------------------------
                                    151 	.area RSEG    (ABS,DATA)
      000000                        152 	.org 0x0000
                           000080   153 _P0	=	0x0080
                           000081   154 _SP	=	0x0081
                           000082   155 _DPL	=	0x0082
                           000083   156 _DPH	=	0x0083
                           000087   157 _PCON	=	0x0087
                           000088   158 _TCON	=	0x0088
                           000089   159 _TMOD	=	0x0089
                           00008A   160 _TL0	=	0x008a
                           00008B   161 _TL1	=	0x008b
                           00008C   162 _TH0	=	0x008c
                           00008D   163 _TH1	=	0x008d
                           000090   164 _P1	=	0x0090
                           000098   165 _SCON	=	0x0098
                           000099   166 _SBUF	=	0x0099
                           0000A0   167 _P2	=	0x00a0
                           0000A8   168 _IE	=	0x00a8
                           0000B0   169 _P3	=	0x00b0
                           0000B8   170 _IP	=	0x00b8
                           0000C8   171 _T2CON	=	0x00c8
                           0000C9   172 _T2MOD	=	0x00c9
                           0000CA   173 _RCAP2L	=	0x00ca
                           0000CB   174 _RCAP2H	=	0x00cb
                           0000CC   175 _TL2	=	0x00cc
                           0000CD   176 _TH2	=	0x00cd
                           0000D0   177 _PSW	=	0x00d0
                           0000E0   178 _ACC	=	0x00e0
                           0000E0   179 _A	=	0x00e0
                           0000F0   180 _B	=	0x00f0
                                    181 ;--------------------------------------------------------
                                    182 ; special function bits
                                    183 ;--------------------------------------------------------
                                    184 	.area RSEG    (ABS,DATA)
      000000                        185 	.org 0x0000
                           000080   186 _P0_0	=	0x0080
                           000081   187 _P0_1	=	0x0081
                           000082   188 _P0_2	=	0x0082
                           000083   189 _P0_3	=	0x0083
                           000084   190 _P0_4	=	0x0084
                           000085   191 _P0_5	=	0x0085
                           000086   192 _P0_6	=	0x0086
                           000087   193 _P0_7	=	0x0087
                           000088   194 _IT0	=	0x0088
                           000089   195 _IE0	=	0x0089
                           00008A   196 _IT1	=	0x008a
                           00008B   197 _IE1	=	0x008b
                           00008C   198 _TR0	=	0x008c
                           00008D   199 _TF0	=	0x008d
                           00008E   200 _TR1	=	0x008e
                           00008F   201 _TF1	=	0x008f
                           000090   202 _P1_0	=	0x0090
                           000091   203 _P1_1	=	0x0091
                           000092   204 _P1_2	=	0x0092
                           000093   205 _P1_3	=	0x0093
                           000094   206 _P1_4	=	0x0094
                           000095   207 _P1_5	=	0x0095
                           000096   208 _P1_6	=	0x0096
                           000097   209 _P1_7	=	0x0097
                           000090   210 _T2	=	0x0090
                           000091   211 _T2EX	=	0x0091
                           000098   212 _RI	=	0x0098
                           000099   213 _TI	=	0x0099
                           00009A   214 _RB8	=	0x009a
                           00009B   215 _TB8	=	0x009b
                           00009C   216 _REN	=	0x009c
                           00009D   217 _SM2	=	0x009d
                           00009E   218 _SM1	=	0x009e
                           00009F   219 _SM0	=	0x009f
                           0000A0   220 _P2_0	=	0x00a0
                           0000A1   221 _P2_1	=	0x00a1
                           0000A2   222 _P2_2	=	0x00a2
                           0000A3   223 _P2_3	=	0x00a3
                           0000A4   224 _P2_4	=	0x00a4
                           0000A5   225 _P2_5	=	0x00a5
                           0000A6   226 _P2_6	=	0x00a6
                           0000A7   227 _P2_7	=	0x00a7
                           0000A8   228 _EX0	=	0x00a8
                           0000A9   229 _ET0	=	0x00a9
                           0000AA   230 _EX1	=	0x00aa
                           0000AB   231 _ET1	=	0x00ab
                           0000AC   232 _ES	=	0x00ac
                           0000AD   233 _ET2	=	0x00ad
                           0000AF   234 _EA	=	0x00af
                           0000B0   235 _P3_0	=	0x00b0
                           0000B1   236 _P3_1	=	0x00b1
                           0000B2   237 _P3_2	=	0x00b2
                           0000B3   238 _P3_3	=	0x00b3
                           0000B4   239 _P3_4	=	0x00b4
                           0000B5   240 _P3_5	=	0x00b5
                           0000B6   241 _P3_6	=	0x00b6
                           0000B7   242 _P3_7	=	0x00b7
                           0000B0   243 _RXD	=	0x00b0
                           0000B1   244 _TXD	=	0x00b1
                           0000B2   245 _INT0	=	0x00b2
                           0000B3   246 _INT1	=	0x00b3
                           0000B4   247 _T0	=	0x00b4
                           0000B5   248 _T1	=	0x00b5
                           0000B6   249 _WR	=	0x00b6
                           0000B7   250 _RD	=	0x00b7
                           0000B8   251 _PX0	=	0x00b8
                           0000B9   252 _PT0	=	0x00b9
                           0000BA   253 _PX1	=	0x00ba
                           0000BB   254 _PT1	=	0x00bb
                           0000BC   255 _PS	=	0x00bc
                           0000BD   256 _PT2	=	0x00bd
                           0000C8   257 _T2CON_0	=	0x00c8
                           0000C9   258 _T2CON_1	=	0x00c9
                           0000CA   259 _T2CON_2	=	0x00ca
                           0000CB   260 _T2CON_3	=	0x00cb
                           0000CC   261 _T2CON_4	=	0x00cc
                           0000CD   262 _T2CON_5	=	0x00cd
                           0000CE   263 _T2CON_6	=	0x00ce
                           0000CF   264 _T2CON_7	=	0x00cf
                           0000C8   265 _CP_RL2	=	0x00c8
                           0000C9   266 _C_T2	=	0x00c9
                           0000CA   267 _TR2	=	0x00ca
                           0000CB   268 _EXEN2	=	0x00cb
                           0000CC   269 _TCLK	=	0x00cc
                           0000CD   270 _RCLK	=	0x00cd
                           0000CE   271 _EXF2	=	0x00ce
                           0000CF   272 _TF2	=	0x00cf
                           0000D0   273 _P	=	0x00d0
                           0000D1   274 _FL	=	0x00d1
                           0000D2   275 _OV	=	0x00d2
                           0000D3   276 _RS0	=	0x00d3
                           0000D4   277 _RS1	=	0x00d4
                           0000D5   278 _F0	=	0x00d5
                           0000D6   279 _AC	=	0x00d6
                           0000D7   280 _CY	=	0x00d7
                                    281 ;--------------------------------------------------------
                                    282 ; overlayable register banks
                                    283 ;--------------------------------------------------------
                                    284 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        285 	.ds 8
                                    286 ;--------------------------------------------------------
                                    287 ; internal ram data
                                    288 ;--------------------------------------------------------
                                    289 	.area DSEG    (DATA)
                                    290 ;--------------------------------------------------------
                                    291 ; overlayable items in internal ram 
                                    292 ;--------------------------------------------------------
                                    293 ;--------------------------------------------------------
                                    294 ; Stack segment in internal ram 
                                    295 ;--------------------------------------------------------
                                    296 	.area	SSEG
      000000                        297 __start__stack:
      000000                        298 	.ds	1
                                    299 
                                    300 ;--------------------------------------------------------
                                    301 ; indirectly addressable internal ram data
                                    302 ;--------------------------------------------------------
                                    303 	.area ISEG    (DATA)
                                    304 ;--------------------------------------------------------
                                    305 ; absolute internal ram data
                                    306 ;--------------------------------------------------------
                                    307 	.area IABS    (ABS,DATA)
                                    308 	.area IABS    (ABS,DATA)
                                    309 ;--------------------------------------------------------
                                    310 ; bit data
                                    311 ;--------------------------------------------------------
                                    312 	.area BSEG    (BIT)
                                    313 ;--------------------------------------------------------
                                    314 ; paged external ram data
                                    315 ;--------------------------------------------------------
                                    316 	.area PSEG    (PAG,XDATA)
                                    317 ;--------------------------------------------------------
                                    318 ; external ram data
                                    319 ;--------------------------------------------------------
                                    320 	.area XSEG    (XDATA)
      000000                        321 _s:
      000000                        322 	.ds 12
      00000C                        323 _c:
      00000C                        324 	.ds 16407
                                    325 ;--------------------------------------------------------
                                    326 ; absolute external ram data
                                    327 ;--------------------------------------------------------
                                    328 	.area XABS    (ABS,XDATA)
                                    329 ;--------------------------------------------------------
                                    330 ; external initialized ram data
                                    331 ;--------------------------------------------------------
                                    332 	.area XISEG   (XDATA)
      000000                        333 _deltas:
      000000                        334 	.ds 170
                                    335 	.area HOME    (CODE)
                                    336 	.area GSINIT0 (CODE)
                                    337 	.area GSINIT1 (CODE)
                                    338 	.area GSINIT2 (CODE)
                                    339 	.area GSINIT3 (CODE)
                                    340 	.area GSINIT4 (CODE)
                                    341 	.area GSINIT5 (CODE)
                                    342 	.area GSINIT  (CODE)
                                    343 	.area GSFINAL (CODE)
                                    344 	.area CSEG    (CODE)
                                    345 ;--------------------------------------------------------
                                    346 ; interrupt vector 
                                    347 ;--------------------------------------------------------
                                    348 	.area HOME    (CODE)
      000000                        349 __interrupt_vect:
      000000 02r00r00         [24]  350 	ljmp	__sdcc_gsinit_startup
                                    351 ;--------------------------------------------------------
                                    352 ; global & static initialisations
                                    353 ;--------------------------------------------------------
                                    354 	.area HOME    (CODE)
                                    355 	.area GSINIT  (CODE)
                                    356 	.area GSFINAL (CODE)
                                    357 	.area GSINIT  (CODE)
                                    358 	.globl __sdcc_gsinit_startup
                                    359 	.globl __sdcc_program_startup
                                    360 	.globl __start__stack
                                    361 	.globl __mcs51_genXINIT
                                    362 	.globl __mcs51_genXRAMCLEAR
                                    363 	.globl __mcs51_genRAMCLEAR
                                    364 	.area GSFINAL (CODE)
      000000 02r00r03         [24]  365 	ljmp	__sdcc_program_startup
                                    366 ;--------------------------------------------------------
                                    367 ; Home
                                    368 ;--------------------------------------------------------
                                    369 	.area HOME    (CODE)
                                    370 	.area HOME    (CODE)
      000003                        371 __sdcc_program_startup:
      000003 02r30r59         [24]  372 	ljmp	_main
                                    373 ;	return from main will return to caller
                                    374 ;--------------------------------------------------------
                                    375 ; code
                                    376 ;--------------------------------------------------------
                                    377 	.area CSEG    (CODE)
                                    378 ;------------------------------------------------------------
                                    379 ;Allocation info for local variables in function 'putchar'
                                    380 ;------------------------------------------------------------
                                    381 ;c                         Allocated to registers 
                                    382 ;------------------------------------------------------------
                                    383 ;	calc.c:16: int putchar(int c) __naked {
                                    384 ;	-----------------------------------------
                                    385 ;	 function putchar
                                    386 ;	-----------------------------------------
      000000                        387 _putchar:
                                    388 ;	naked function: no prologue.
                                    389 ;	calc.c:21: __endasm;
      000000 E5 82            [12]  390 	mov	a, dpl
      000002 02 00 30         [24]  391 	ljmp	0x0030
                                    392 ;	calc.c:22: }
                                    393 ;	naked function: no epilogue.
                                    394 ;------------------------------------------------------------
                                    395 ;Allocation info for local variables in function 'getchar'
                                    396 ;------------------------------------------------------------
                                    397 ;	calc.c:24: int getchar(void) __naked {
                                    398 ;	-----------------------------------------
                                    399 ;	 function getchar
                                    400 ;	-----------------------------------------
      000005                        401 _getchar:
                                    402 ;	naked function: no prologue.
                                    403 ;	calc.c:30: __endasm;
      000005 12 00 32         [24]  404 	lcall	0x0032
      000008 F5 82            [12]  405 	mov	dpl, a
      00000A 75 83 00         [24]  406 	mov	dph, #0
      00000D 22               [24]  407 	ret
                                    408 ;	calc.c:31: }
                                    409 ;	naked function: no epilogue.
                                    410 ;------------------------------------------------------------
                                    411 ;Allocation info for local variables in function 'getchar_poll'
                                    412 ;------------------------------------------------------------
                                    413 ;	calc.c:33: int getchar_poll(void) __naked {
                                    414 ;	-----------------------------------------
                                    415 ;	 function getchar_poll
                                    416 ;	-----------------------------------------
      00000E                        417 _getchar_poll:
                                    418 ;	naked function: no prologue.
                                    419 ;	calc.c:45: __endasm;
      00000E 74 FF            [12]  420 	mov	a, #0xff
      000010 F5 F0            [12]  421 	mov	b, a
      000012 30 98 07         [24]  422 	jnb	ri, nochar
      000015 C2 98            [12]  423 	clr	ri
      000017 E5 99            [12]  424 	mov	a, sbuf
      000019 75 F0 00         [24]  425 	mov	b, #0
      00001C                        426 	nochar:
      00001C F5 82            [12]  427 	mov	dpl, a
      00001E 85 F0 83         [24]  428 	mov	dph, b
      000021 22               [24]  429 	ret
                                    430 ;	calc.c:46: }
                                    431 ;	naked function: no epilogue.
                                    432 ;------------------------------------------------------------
                                    433 ;Allocation info for local variables in function 'accumulate'
                                    434 ;------------------------------------------------------------
                                    435 ;delta                     Allocated to stack - _bp -5
                                    436 ;_ctx                      Allocated to registers r5 r6 r7 
                                    437 ;ctx                       Allocated to stack - _bp +8
                                    438 ;d                         Allocated to stack - _bp +11
                                    439 ;sloc0                     Allocated to stack - _bp +1
                                    440 ;sloc1                     Allocated to stack - _bp +4
                                    441 ;------------------------------------------------------------
                                    442 ;	calc.c:63: static int accumulate(void *_ctx, delta_t *delta) __reentrant {
                                    443 ;	-----------------------------------------
                                    444 ;	 function accumulate
                                    445 ;	-----------------------------------------
      000022                        446 _accumulate:
                           000007   447 	ar7 = 0x07
                           000006   448 	ar6 = 0x06
                           000005   449 	ar5 = 0x05
                           000004   450 	ar4 = 0x04
                           000003   451 	ar3 = 0x03
                           000002   452 	ar2 = 0x02
                           000001   453 	ar1 = 0x01
                           000000   454 	ar0 = 0x00
      000022 C0*00            [24]  455 	push	_bp
      000024 E5 81            [12]  456 	mov	a,sp
      000026 F5*00            [12]  457 	mov	_bp,a
      000028 24 0E            [12]  458 	add	a,#0x0e
      00002A F5 81            [12]  459 	mov	sp,a
      00002C AD 82            [24]  460 	mov	r5,dpl
      00002E AE 83            [24]  461 	mov	r6,dph
      000030 AF F0            [24]  462 	mov	r7,b
                                    463 ;	calc.c:64: calc_ctx_t*ctx = (calc_ctx_t*)_ctx;
      000032 E5*00            [12]  464 	mov	a,_bp
      000034 24 08            [12]  465 	add	a,#0x08
      000036 F8               [12]  466 	mov	r0,a
      000037 A6 05            [24]  467 	mov	@r0,ar5
      000039 08               [12]  468 	inc	r0
      00003A A6 06            [24]  469 	mov	@r0,ar6
      00003C 08               [12]  470 	inc	r0
      00003D A6 07            [24]  471 	mov	@r0,ar7
                                    472 ;	calc.c:69: if (!ctx->acc_valid) {
      00003F E5*00            [12]  473 	mov	a,_bp
      000041 24 08            [12]  474 	add	a,#0x08
      000043 F8               [12]  475 	mov	r0,a
      000044 74 06            [12]  476 	mov	a,#0x06
      000046 26               [12]  477 	add	a,@r0
      000047 FA               [12]  478 	mov	r2,a
      000048 E4               [12]  479 	clr	a
      000049 08               [12]  480 	inc	r0
      00004A 36               [12]  481 	addc	a,@r0
      00004B FB               [12]  482 	mov	r3,a
      00004C 08               [12]  483 	inc	r0
      00004D 86 04            [24]  484 	mov	ar4,@r0
      00004F 8A 82            [24]  485 	mov	dpl,r2
      000051 8B 83            [24]  486 	mov	dph,r3
      000053 8C F0            [24]  487 	mov	b,r4
      000055 12r00r00         [24]  488 	lcall	__gptrget
      000058 70 31            [24]  489 	jnz	00102$
                                    490 ;	calc.c:70: ctx->acc_valid = 1;
      00005A 8A 82            [24]  491 	mov	dpl,r2
      00005C 8B 83            [24]  492 	mov	dph,r3
      00005E 8C F0            [24]  493 	mov	b,r4
      000060 74 01            [12]  494 	mov	a,#0x01
      000062 12r00r00         [24]  495 	lcall	__gptrput
                                    496 ;	calc.c:71: ctx->acc = 0l;
      000065 E5*00            [12]  497 	mov	a,_bp
      000067 24 08            [12]  498 	add	a,#0x08
      000069 F8               [12]  499 	mov	r0,a
      00006A 74 02            [12]  500 	mov	a,#0x02
      00006C 26               [12]  501 	add	a,@r0
      00006D FA               [12]  502 	mov	r2,a
      00006E E4               [12]  503 	clr	a
      00006F 08               [12]  504 	inc	r0
      000070 36               [12]  505 	addc	a,@r0
      000071 FB               [12]  506 	mov	r3,a
      000072 08               [12]  507 	inc	r0
      000073 86 04            [24]  508 	mov	ar4,@r0
      000075 8A 82            [24]  509 	mov	dpl,r2
      000077 8B 83            [24]  510 	mov	dph,r3
      000079 8C F0            [24]  511 	mov	b,r4
      00007B E4               [12]  512 	clr	a
      00007C 12r00r00         [24]  513 	lcall	__gptrput
      00007F A3               [24]  514 	inc	dptr
      000080 12r00r00         [24]  515 	lcall	__gptrput
      000083 A3               [24]  516 	inc	dptr
      000084 12r00r00         [24]  517 	lcall	__gptrput
      000087 A3               [24]  518 	inc	dptr
      000088 12r00r00         [24]  519 	lcall	__gptrput
      00008B                        520 00102$:
                                    521 ;	calc.c:74: d = strtol(ctx->digit, NULL, ctx->base);
      00008B E5*00            [12]  522 	mov	a,_bp
      00008D 24 08            [12]  523 	add	a,#0x08
      00008F F8               [12]  524 	mov	r0,a
      000090 86 82            [24]  525 	mov	dpl,@r0
      000092 08               [12]  526 	inc	r0
      000093 86 83            [24]  527 	mov	dph,@r0
      000095 08               [12]  528 	inc	r0
      000096 86 F0            [24]  529 	mov	b,@r0
      000098 12r00r00         [24]  530 	lcall	__gptrget
      00009B FB               [12]  531 	mov	r3,a
      00009C A3               [24]  532 	inc	dptr
      00009D 12r00r00         [24]  533 	lcall	__gptrget
      0000A0 FC               [12]  534 	mov	r4,a
      0000A1 E5*00            [12]  535 	mov	a,_bp
      0000A3 24 08            [12]  536 	add	a,#0x08
      0000A5 F8               [12]  537 	mov	r0,a
      0000A6 74 07            [12]  538 	mov	a,#0x07
      0000A8 26               [12]  539 	add	a,@r0
      0000A9 FA               [12]  540 	mov	r2,a
      0000AA E4               [12]  541 	clr	a
      0000AB 08               [12]  542 	inc	r0
      0000AC 36               [12]  543 	addc	a,@r0
      0000AD FE               [12]  544 	mov	r6,a
      0000AE 08               [12]  545 	inc	r0
      0000AF 86 07            [24]  546 	mov	ar7,@r0
      0000B1 C0 03            [24]  547 	push	ar3
      0000B3 C0 04            [24]  548 	push	ar4
      0000B5 E4               [12]  549 	clr	a
      0000B6 C0 E0            [24]  550 	push	acc
      0000B8 C0 E0            [24]  551 	push	acc
      0000BA C0 E0            [24]  552 	push	acc
      0000BC 8A 82            [24]  553 	mov	dpl,r2
      0000BE 8E 83            [24]  554 	mov	dph,r6
      0000C0 8F F0            [24]  555 	mov	b,r7
      0000C2 12r00r00         [24]  556 	lcall	_strtol
      0000C5 C8               [12]  557 	xch	a,r0
      0000C6 E5*00            [12]  558 	mov	a,_bp
      0000C8 24 0B            [12]  559 	add	a,#0x0b
      0000CA C8               [12]  560 	xch	a,r0
      0000CB A6 82            [24]  561 	mov	@r0,dpl
      0000CD 08               [12]  562 	inc	r0
      0000CE A6 83            [24]  563 	mov	@r0,dph
      0000D0 08               [12]  564 	inc	r0
      0000D1 A6 F0            [24]  565 	mov	@r0,b
      0000D3 08               [12]  566 	inc	r0
      0000D4 F6               [12]  567 	mov	@r0,a
      0000D5 E5 81            [12]  568 	mov	a,sp
      0000D7 24 FB            [12]  569 	add	a,#0xfb
      0000D9 F5 81            [12]  570 	mov	sp,a
                                    571 ;	calc.c:75: ctx->acc = ctx->acc * (long)ctx->base + d;
      0000DB E5*00            [12]  572 	mov	a,_bp
      0000DD 24 08            [12]  573 	add	a,#0x08
      0000DF F8               [12]  574 	mov	r0,a
      0000E0 A9*00            [24]  575 	mov	r1,_bp
      0000E2 09               [12]  576 	inc	r1
      0000E3 74 02            [12]  577 	mov	a,#0x02
      0000E5 26               [12]  578 	add	a,@r0
      0000E6 F7               [12]  579 	mov	@r1,a
      0000E7 E4               [12]  580 	clr	a
      0000E8 08               [12]  581 	inc	r0
      0000E9 36               [12]  582 	addc	a,@r0
      0000EA 09               [12]  583 	inc	r1
      0000EB F7               [12]  584 	mov	@r1,a
      0000EC 08               [12]  585 	inc	r0
      0000ED 09               [12]  586 	inc	r1
      0000EE E6               [12]  587 	mov	a,@r0
      0000EF F7               [12]  588 	mov	@r1,a
      0000F0 A8*00            [24]  589 	mov	r0,_bp
      0000F2 08               [12]  590 	inc	r0
      0000F3 86 82            [24]  591 	mov	dpl,@r0
      0000F5 08               [12]  592 	inc	r0
      0000F6 86 83            [24]  593 	mov	dph,@r0
      0000F8 08               [12]  594 	inc	r0
      0000F9 86 F0            [24]  595 	mov	b,@r0
      0000FB E5*00            [12]  596 	mov	a,_bp
      0000FD 24 04            [12]  597 	add	a,#0x04
      0000FF F9               [12]  598 	mov	r1,a
      000100 12r00r00         [24]  599 	lcall	__gptrget
      000103 F7               [12]  600 	mov	@r1,a
      000104 A3               [24]  601 	inc	dptr
      000105 12r00r00         [24]  602 	lcall	__gptrget
      000108 09               [12]  603 	inc	r1
      000109 F7               [12]  604 	mov	@r1,a
      00010A A3               [24]  605 	inc	dptr
      00010B 12r00r00         [24]  606 	lcall	__gptrget
      00010E 09               [12]  607 	inc	r1
      00010F F7               [12]  608 	mov	@r1,a
      000110 A3               [24]  609 	inc	dptr
      000111 12r00r00         [24]  610 	lcall	__gptrget
      000114 09               [12]  611 	inc	r1
      000115 F7               [12]  612 	mov	@r1,a
      000116 E5*00            [12]  613 	mov	a,_bp
      000118 24 08            [12]  614 	add	a,#0x08
      00011A F8               [12]  615 	mov	r0,a
      00011B 86 82            [24]  616 	mov	dpl,@r0
      00011D 08               [12]  617 	inc	r0
      00011E 86 83            [24]  618 	mov	dph,@r0
      000120 08               [12]  619 	inc	r0
      000121 86 F0            [24]  620 	mov	b,@r0
      000123 12r00r00         [24]  621 	lcall	__gptrget
      000126 FA               [12]  622 	mov	r2,a
      000127 A3               [24]  623 	inc	dptr
      000128 12r00r00         [24]  624 	lcall	__gptrget
      00012B FB               [12]  625 	mov	r3,a
      00012C 33               [12]  626 	rlc	a
      00012D 95 E0            [12]  627 	subb	a,acc
      00012F FE               [12]  628 	mov	r6,a
      000130 FF               [12]  629 	mov	r7,a
      000131 C0 02            [24]  630 	push	ar2
      000133 C0 03            [24]  631 	push	ar3
      000135 C0 06            [24]  632 	push	ar6
      000137 C0 07            [24]  633 	push	ar7
      000139 E5*00            [12]  634 	mov	a,_bp
      00013B 24 04            [12]  635 	add	a,#0x04
      00013D F8               [12]  636 	mov	r0,a
      00013E 86 82            [24]  637 	mov	dpl,@r0
      000140 08               [12]  638 	inc	r0
      000141 86 83            [24]  639 	mov	dph,@r0
      000143 08               [12]  640 	inc	r0
      000144 86 F0            [24]  641 	mov	b,@r0
      000146 08               [12]  642 	inc	r0
      000147 E6               [12]  643 	mov	a,@r0
      000148 12r00r00         [24]  644 	lcall	__mullong
      00014B AC 82            [24]  645 	mov	r4,dpl
      00014D AD 83            [24]  646 	mov	r5,dph
      00014F AE F0            [24]  647 	mov	r6,b
      000151 FF               [12]  648 	mov	r7,a
      000152 E5 81            [12]  649 	mov	a,sp
      000154 24 FC            [12]  650 	add	a,#0xfc
      000156 F5 81            [12]  651 	mov	sp,a
      000158 E5*00            [12]  652 	mov	a,_bp
      00015A 24 0B            [12]  653 	add	a,#0x0b
      00015C F8               [12]  654 	mov	r0,a
      00015D E6               [12]  655 	mov	a,@r0
      00015E 2C               [12]  656 	add	a,r4
      00015F FC               [12]  657 	mov	r4,a
      000160 08               [12]  658 	inc	r0
      000161 E6               [12]  659 	mov	a,@r0
      000162 3D               [12]  660 	addc	a,r5
      000163 FD               [12]  661 	mov	r5,a
      000164 08               [12]  662 	inc	r0
      000165 E6               [12]  663 	mov	a,@r0
      000166 3E               [12]  664 	addc	a,r6
      000167 FE               [12]  665 	mov	r6,a
      000168 08               [12]  666 	inc	r0
      000169 E6               [12]  667 	mov	a,@r0
      00016A 3F               [12]  668 	addc	a,r7
      00016B FF               [12]  669 	mov	r7,a
      00016C A8*00            [24]  670 	mov	r0,_bp
      00016E 08               [12]  671 	inc	r0
      00016F 86 82            [24]  672 	mov	dpl,@r0
      000171 08               [12]  673 	inc	r0
      000172 86 83            [24]  674 	mov	dph,@r0
      000174 08               [12]  675 	inc	r0
      000175 86 F0            [24]  676 	mov	b,@r0
      000177 EC               [12]  677 	mov	a,r4
      000178 12r00r00         [24]  678 	lcall	__gptrput
      00017B A3               [24]  679 	inc	dptr
      00017C ED               [12]  680 	mov	a,r5
      00017D 12r00r00         [24]  681 	lcall	__gptrput
      000180 A3               [24]  682 	inc	dptr
      000181 EE               [12]  683 	mov	a,r6
      000182 12r00r00         [24]  684 	lcall	__gptrput
      000185 A3               [24]  685 	inc	dptr
      000186 EF               [12]  686 	mov	a,r7
      000187 12r00r00         [24]  687 	lcall	__gptrput
                                    688 ;	calc.c:77: return 1;
      00018A 90 00 01         [24]  689 	mov	dptr,#0x0001
                                    690 ;	calc.c:78: }
      00018D 85*00 81         [24]  691 	mov	sp,_bp
      000190 D0*00            [24]  692 	pop	_bp
      000192 22               [24]  693 	ret
                                    694 ;------------------------------------------------------------
                                    695 ;Allocation info for local variables in function 'dump_pop'
                                    696 ;------------------------------------------------------------
                                    697 ;delta                     Allocated to stack - _bp -5
                                    698 ;_ctx                      Allocated to registers r5 r6 r7 
                                    699 ;ctx                       Allocated to stack - _bp +8
                                    700 ;d                         Allocated to stack - _bp +11
                                    701 ;r                         Allocated to stack - _bp +5
                                    702 ;__1310720001              Allocated to registers 
                                    703 ;s                         Allocated to registers r5 r6 r7 
                                    704 ;__1966080003              Allocated to registers 
                                    705 ;s                         Allocated to registers r4 r5 r6 
                                    706 ;__1966080005              Allocated to registers 
                                    707 ;s                         Allocated to registers r4 r5 r6 
                                    708 ;__1966080007              Allocated to registers r3 r4 r5 r6 
                                    709 ;d                         Allocated to stack - _bp +15
                                    710 ;mask                      Allocated to stack - _bp +19
                                    711 ;__1966080009              Allocated to registers 
                                    712 ;s                         Allocated to registers r4 r5 r6 
                                    713 ;sloc0                     Allocated to stack - _bp +1
                                    714 ;sloc1                     Allocated to stack - _bp +2
                                    715 ;sloc2                     Allocated to stack - _bp +5
                                    716 ;------------------------------------------------------------
                                    717 ;	calc.c:80: static int dump_pop(void *_ctx, delta_t *delta) __reentrant {
                                    718 ;	-----------------------------------------
                                    719 ;	 function dump_pop
                                    720 ;	-----------------------------------------
      000193                        721 _dump_pop:
      000193 C0*00            [24]  722 	push	_bp
      000195 E5 81            [12]  723 	mov	a,sp
      000197 F5*00            [12]  724 	mov	_bp,a
      000199 24 16            [12]  725 	add	a,#0x16
      00019B F5 81            [12]  726 	mov	sp,a
      00019D AD 82            [24]  727 	mov	r5,dpl
      00019F AE 83            [24]  728 	mov	r6,dph
      0001A1 AF F0            [24]  729 	mov	r7,b
                                    730 ;	calc.c:81: calc_ctx_t*ctx = (calc_ctx_t*)_ctx;
      0001A3 E5*00            [12]  731 	mov	a,_bp
      0001A5 24 08            [12]  732 	add	a,#0x08
      0001A7 F8               [12]  733 	mov	r0,a
      0001A8 A6 05            [24]  734 	mov	@r0,ar5
      0001AA 08               [12]  735 	inc	r0
      0001AB A6 06            [24]  736 	mov	@r0,ar6
      0001AD 08               [12]  737 	inc	r0
      0001AE A6 07            [24]  738 	mov	@r0,ar7
                                    739 ;	calc.c:85: if (delta->event == EVENT_TERM) printstr("\r\n");
      0001B0 E5*00            [12]  740 	mov	a,_bp
      0001B2 24 FB            [12]  741 	add	a,#0xfb
      0001B4 F8               [12]  742 	mov	r0,a
      0001B5 86 02            [24]  743 	mov	ar2,@r0
      0001B7 08               [12]  744 	inc	r0
      0001B8 86 03            [24]  745 	mov	ar3,@r0
      0001BA 08               [12]  746 	inc	r0
      0001BB 86 04            [24]  747 	mov	ar4,@r0
      0001BD 74 02            [12]  748 	mov	a,#0x02
      0001BF 2A               [12]  749 	add	a,r2
      0001C0 FA               [12]  750 	mov	r2,a
      0001C1 E4               [12]  751 	clr	a
      0001C2 3B               [12]  752 	addc	a,r3
      0001C3 FB               [12]  753 	mov	r3,a
      0001C4 8A 82            [24]  754 	mov	dpl,r2
      0001C6 8B 83            [24]  755 	mov	dph,r3
      0001C8 8C F0            [24]  756 	mov	b,r4
      0001CA 12r00r00         [24]  757 	lcall	__gptrget
      0001CD FE               [12]  758 	mov	r6,a
      0001CE A3               [24]  759 	inc	dptr
      0001CF 12r00r00         [24]  760 	lcall	__gptrget
      0001D2 FF               [12]  761 	mov	r7,a
      0001D3 BE 08 3D         [24]  762 	cjne	r6,#0x08,00102$
      0001D6 BF 00 3A         [24]  763 	cjne	r7,#0x00,00102$
      0001D9 7Dr00            [12]  764 	mov	r5,#___str_0
      0001DB 7Es00            [12]  765 	mov	r6,#(___str_0 >> 8)
      0001DD 7F 80            [12]  766 	mov	r7,#0x80
                                    767 ;	calc.c:51: return;
      0001DF                        768 00122$:
                                    769 ;	calc.c:49: for (; *s; s++) putchar(*s);
      0001DF 8D 82            [24]  770 	mov	dpl,r5
      0001E1 8E 83            [24]  771 	mov	dph,r6
      0001E3 8F F0            [24]  772 	mov	b,r7
      0001E5 A8*00            [24]  773 	mov	r0,_bp
      0001E7 08               [12]  774 	inc	r0
      0001E8 12r00r00         [24]  775 	lcall	__gptrget
      0001EB F6               [12]  776 	mov	@r0,a
      0001EC A8*00            [24]  777 	mov	r0,_bp
      0001EE 08               [12]  778 	inc	r0
      0001EF E6               [12]  779 	mov	a,@r0
      0001F0 60 21            [24]  780 	jz	00102$
      0001F2 C0 02            [24]  781 	push	ar2
      0001F4 C0 03            [24]  782 	push	ar3
      0001F6 C0 04            [24]  783 	push	ar4
      0001F8 A8*00            [24]  784 	mov	r0,_bp
      0001FA 08               [12]  785 	inc	r0
      0001FB 86 03            [24]  786 	mov	ar3,@r0
      0001FD 7C 00            [12]  787 	mov	r4,#0x00
      0001FF 8B 82            [24]  788 	mov	dpl,r3
      000201 8C 83            [24]  789 	mov	dph,r4
      000203 12r00r00         [24]  790 	lcall	_putchar
      000206 0D               [12]  791 	inc	r5
      000207 BD 00 01         [24]  792 	cjne	r5,#0x00,00210$
      00020A 0E               [12]  793 	inc	r6
      00020B                        794 00210$:
      00020B D0 04            [24]  795 	pop	ar4
      00020D D0 03            [24]  796 	pop	ar3
      00020F D0 02            [24]  797 	pop	ar2
                                    798 ;	calc.c:85: if (delta->event == EVENT_TERM) printstr("\r\n");
      000211 80 CC            [24]  799 	sjmp	00122$
      000213                        800 00102$:
                                    801 ;	calc.c:87: r = stack_pop(ctx->ps, &d);
      000213 C0 02            [24]  802 	push	ar2
      000215 C0 03            [24]  803 	push	ar3
      000217 C0 04            [24]  804 	push	ar4
      000219 E5*00            [12]  805 	mov	a,_bp
      00021B 24 0B            [12]  806 	add	a,#0x0b
      00021D FF               [12]  807 	mov	r7,a
      00021E E5*00            [12]  808 	mov	a,_bp
      000220 24 05            [12]  809 	add	a,#0x05
      000222 F8               [12]  810 	mov	r0,a
      000223 A6 07            [24]  811 	mov	@r0,ar7
      000225 08               [12]  812 	inc	r0
      000226 76 00            [12]  813 	mov	@r0,#0x00
      000228 08               [12]  814 	inc	r0
      000229 76 40            [12]  815 	mov	@r0,#0x40
      00022B E5*00            [12]  816 	mov	a,_bp
      00022D 24 08            [12]  817 	add	a,#0x08
      00022F F8               [12]  818 	mov	r0,a
      000230 A9*00            [24]  819 	mov	r1,_bp
      000232 09               [12]  820 	inc	r1
      000233 09               [12]  821 	inc	r1
      000234 74 11            [12]  822 	mov	a,#0x11
      000236 26               [12]  823 	add	a,@r0
      000237 F7               [12]  824 	mov	@r1,a
      000238 74 40            [12]  825 	mov	a,#0x40
      00023A 08               [12]  826 	inc	r0
      00023B 36               [12]  827 	addc	a,@r0
      00023C 09               [12]  828 	inc	r1
      00023D F7               [12]  829 	mov	@r1,a
      00023E 08               [12]  830 	inc	r0
      00023F 09               [12]  831 	inc	r1
      000240 E6               [12]  832 	mov	a,@r0
      000241 F7               [12]  833 	mov	@r1,a
      000242 A8*00            [24]  834 	mov	r0,_bp
      000244 08               [12]  835 	inc	r0
      000245 08               [12]  836 	inc	r0
      000246 86 82            [24]  837 	mov	dpl,@r0
      000248 08               [12]  838 	inc	r0
      000249 86 83            [24]  839 	mov	dph,@r0
      00024B 08               [12]  840 	inc	r0
      00024C 86 F0            [24]  841 	mov	b,@r0
      00024E 12r00r00         [24]  842 	lcall	__gptrget
      000251 FA               [12]  843 	mov	r2,a
      000252 A3               [24]  844 	inc	dptr
      000253 12r00r00         [24]  845 	lcall	__gptrget
      000256 FB               [12]  846 	mov	r3,a
      000257 A3               [24]  847 	inc	dptr
      000258 12r00r00         [24]  848 	lcall	__gptrget
      00025B FE               [12]  849 	mov	r6,a
      00025C C0 07            [24]  850 	push	ar7
      00025E C0 04            [24]  851 	push	ar4
      000260 C0 03            [24]  852 	push	ar3
      000262 C0 02            [24]  853 	push	ar2
      000264 E5*00            [12]  854 	mov	a,_bp
      000266 24 05            [12]  855 	add	a,#0x05
      000268 F8               [12]  856 	mov	r0,a
      000269 E6               [12]  857 	mov	a,@r0
      00026A C0 E0            [24]  858 	push	acc
      00026C 08               [12]  859 	inc	r0
      00026D E6               [12]  860 	mov	a,@r0
      00026E C0 E0            [24]  861 	push	acc
      000270 08               [12]  862 	inc	r0
      000271 E6               [12]  863 	mov	a,@r0
      000272 C0 E0            [24]  864 	push	acc
      000274 8A 82            [24]  865 	mov	dpl,r2
      000276 8B 83            [24]  866 	mov	dph,r3
      000278 8E F0            [24]  867 	mov	b,r6
      00027A 12r00r00         [24]  868 	lcall	_stack_pop
      00027D AD 82            [24]  869 	mov	r5,dpl
      00027F AE 83            [24]  870 	mov	r6,dph
      000281 15 81            [12]  871 	dec	sp
      000283 15 81            [12]  872 	dec	sp
      000285 15 81            [12]  873 	dec	sp
      000287 D0 02            [24]  874 	pop	ar2
      000289 D0 03            [24]  875 	pop	ar3
      00028B D0 04            [24]  876 	pop	ar4
      00028D D0 07            [24]  877 	pop	ar7
      00028F E5*00            [12]  878 	mov	a,_bp
      000291 24 05            [12]  879 	add	a,#0x05
      000293 F8               [12]  880 	mov	r0,a
      000294 A6 05            [24]  881 	mov	@r0,ar5
      000296 08               [12]  882 	inc	r0
      000297 A6 06            [24]  883 	mov	@r0,ar6
                                    884 ;	calc.c:88: if (!r) {
      000299 D0 04            [24]  885 	pop	ar4
      00029B D0 03            [24]  886 	pop	ar3
      00029D D0 02            [24]  887 	pop	ar2
      00029F ED               [12]  888 	mov	a,r5
      0002A0 4E               [12]  889 	orl	a,r6
      0002A1 70 3D            [24]  890 	jnz	00154$
                                    891 ;	calc.c:89: if (delta->event != EVENT_TERM) printstr("stack underflow\r\n");
      0002A3 8A 82            [24]  892 	mov	dpl,r2
      0002A5 8B 83            [24]  893 	mov	dph,r3
      0002A7 8C F0            [24]  894 	mov	b,r4
      0002A9 12r00r00         [24]  895 	lcall	__gptrget
      0002AC FA               [12]  896 	mov	r2,a
      0002AD A3               [24]  897 	inc	dptr
      0002AE 12r00r00         [24]  898 	lcall	__gptrget
      0002B1 FB               [12]  899 	mov	r3,a
      0002B2 BA 08 06         [24]  900 	cjne	r2,#0x08,00212$
      0002B5 BB 00 03         [24]  901 	cjne	r3,#0x00,00212$
      0002B8 02r04r6E         [24]  902 	ljmp	00110$
      0002BB                        903 00212$:
      0002BB 7Cr03            [12]  904 	mov	r4,#___str_1
      0002BD 7Ds00            [12]  905 	mov	r5,#(___str_1 >> 8)
      0002BF 7E 80            [12]  906 	mov	r6,#0x80
                                    907 ;	calc.c:51: return;
      0002C1                        908 00125$:
                                    909 ;	calc.c:49: for (; *s; s++) putchar(*s);
      0002C1 8C 82            [24]  910 	mov	dpl,r4
      0002C3 8D 83            [24]  911 	mov	dph,r5
      0002C5 8E F0            [24]  912 	mov	b,r6
      0002C7 12r00r00         [24]  913 	lcall	__gptrget
      0002CA FB               [12]  914 	mov	r3,a
      0002CB 70 03            [24]  915 	jnz	00213$
      0002CD 02r04r6E         [24]  916 	ljmp	00110$
      0002D0                        917 00213$:
      0002D0 7A 00            [12]  918 	mov	r2,#0x00
      0002D2 8B 82            [24]  919 	mov	dpl,r3
      0002D4 8A 83            [24]  920 	mov	dph,r2
      0002D6 12r00r00         [24]  921 	lcall	_putchar
      0002D9 0C               [12]  922 	inc	r4
                                    923 ;	calc.c:90: } else while (r > 0) {
      0002DA BC 00 E4         [24]  924 	cjne	r4,#0x00,00125$
      0002DD 0D               [12]  925 	inc	r5
      0002DE 80 E1            [24]  926 	sjmp	00125$
      0002E0                        927 00154$:
      0002E0                        928 00105$:
      0002E0 E5*00            [12]  929 	mov	a,_bp
      0002E2 24 05            [12]  930 	add	a,#0x05
      0002E4 F8               [12]  931 	mov	r0,a
      0002E5 C3               [12]  932 	clr	c
      0002E6 E4               [12]  933 	clr	a
      0002E7 96               [12]  934 	subb	a,@r0
      0002E8 74 80            [12]  935 	mov	a,#(0x00 ^ 0x80)
      0002EA 08               [12]  936 	inc	r0
      0002EB 86 F0            [24]  937 	mov	b,@r0
      0002ED 63 F0 80         [24]  938 	xrl	b,#0x80
      0002F0 95 F0            [12]  939 	subb	a,b
      0002F2 40 03            [24]  940 	jc	00215$
      0002F4 02r04r6E         [24]  941 	ljmp	00110$
      0002F7                        942 00215$:
                                    943 ;	calc.c:91: printstr("VA ");
      0002F7 7Cr15            [12]  944 	mov	r4,#___str_2
      0002F9 7Ds00            [12]  945 	mov	r5,#(___str_2 >> 8)
      0002FB 7E 80            [12]  946 	mov	r6,#0x80
                                    947 ;	calc.c:51: return;
      0002FD                        948 00128$:
                                    949 ;	calc.c:49: for (; *s; s++) putchar(*s);
      0002FD 8C 82            [24]  950 	mov	dpl,r4
      0002FF 8D 83            [24]  951 	mov	dph,r5
      000301 8E F0            [24]  952 	mov	b,r6
      000303 12r00r00         [24]  953 	lcall	__gptrget
      000306 FB               [12]  954 	mov	r3,a
      000307 60 10            [24]  955 	jz	00116$
      000309 7A 00            [12]  956 	mov	r2,#0x00
      00030B 8B 82            [24]  957 	mov	dpl,r3
      00030D 8A 83            [24]  958 	mov	dph,r2
      00030F 12r00r00         [24]  959 	lcall	_putchar
      000312 0C               [12]  960 	inc	r4
                                    961 ;	calc.c:91: printstr("VA ");
      000313 BC 00 E7         [24]  962 	cjne	r4,#0x00,00128$
      000316 0D               [12]  963 	inc	r5
      000317 80 E4            [24]  964 	sjmp	00128$
      000319                        965 00116$:
                                    966 ;	calc.c:92: printf("% 11ld / ", d);
      000319 C0 07            [24]  967 	push	ar7
      00031B E5*00            [12]  968 	mov	a,_bp
      00031D 24 0B            [12]  969 	add	a,#0x0b
      00031F F8               [12]  970 	mov	r0,a
      000320 E6               [12]  971 	mov	a,@r0
      000321 C0 E0            [24]  972 	push	acc
      000323 08               [12]  973 	inc	r0
      000324 E6               [12]  974 	mov	a,@r0
      000325 C0 E0            [24]  975 	push	acc
      000327 08               [12]  976 	inc	r0
      000328 E6               [12]  977 	mov	a,@r0
      000329 C0 E0            [24]  978 	push	acc
      00032B 08               [12]  979 	inc	r0
      00032C E6               [12]  980 	mov	a,@r0
      00032D C0 E0            [24]  981 	push	acc
      00032F 74r19            [12]  982 	mov	a,#___str_3
      000331 C0 E0            [24]  983 	push	acc
      000333 74s00            [12]  984 	mov	a,#(___str_3 >> 8)
      000335 C0 E0            [24]  985 	push	acc
      000337 74 80            [12]  986 	mov	a,#0x80
      000339 C0 E0            [24]  987 	push	acc
      00033B 12r00r00         [24]  988 	lcall	_printf
      00033E E5 81            [12]  989 	mov	a,sp
      000340 24 F9            [12]  990 	add	a,#0xf9
      000342 F5 81            [12]  991 	mov	sp,a
                                    992 ;	calc.c:93: printf("%08lx / ", d);
      000344 E5*00            [12]  993 	mov	a,_bp
      000346 24 0B            [12]  994 	add	a,#0x0b
      000348 F8               [12]  995 	mov	r0,a
      000349 E6               [12]  996 	mov	a,@r0
      00034A C0 E0            [24]  997 	push	acc
      00034C 08               [12]  998 	inc	r0
      00034D E6               [12]  999 	mov	a,@r0
      00034E C0 E0            [24] 1000 	push	acc
      000350 08               [12] 1001 	inc	r0
      000351 E6               [12] 1002 	mov	a,@r0
      000352 C0 E0            [24] 1003 	push	acc
      000354 08               [12] 1004 	inc	r0
      000355 E6               [12] 1005 	mov	a,@r0
      000356 C0 E0            [24] 1006 	push	acc
      000358 74r23            [12] 1007 	mov	a,#___str_4
      00035A C0 E0            [24] 1008 	push	acc
      00035C 74s00            [12] 1009 	mov	a,#(___str_4 >> 8)
      00035E C0 E0            [24] 1010 	push	acc
      000360 74 80            [12] 1011 	mov	a,#0x80
      000362 C0 E0            [24] 1012 	push	acc
      000364 12r00r00         [24] 1013 	lcall	_printf
      000367 E5 81            [12] 1014 	mov	a,sp
      000369 24 F9            [12] 1015 	add	a,#0xf9
      00036B F5 81            [12] 1016 	mov	sp,a
      00036D D0 07            [24] 1017 	pop	ar7
                                   1018 ;	calc.c:94: printbin(d);
      00036F E5*00            [12] 1019 	mov	a,_bp
      000371 24 0B            [12] 1020 	add	a,#0x0b
      000373 F8               [12] 1021 	mov	r0,a
      000374 86 03            [24] 1022 	mov	ar3,@r0
      000376 08               [12] 1023 	inc	r0
      000377 86 04            [24] 1024 	mov	ar4,@r0
      000379 08               [12] 1025 	inc	r0
      00037A 86 05            [24] 1026 	mov	ar5,@r0
      00037C 08               [12] 1027 	inc	r0
      00037D 86 06            [24] 1028 	mov	ar6,@r0
      00037F E5*00            [12] 1029 	mov	a,_bp
      000381 24 0F            [12] 1030 	add	a,#0x0f
      000383 F8               [12] 1031 	mov	r0,a
      000384 A6 03            [24] 1032 	mov	@r0,ar3
      000386 08               [12] 1033 	inc	r0
      000387 A6 04            [24] 1034 	mov	@r0,ar4
      000389 08               [12] 1035 	inc	r0
      00038A A6 05            [24] 1036 	mov	@r0,ar5
      00038C 08               [12] 1037 	inc	r0
      00038D A6 06            [24] 1038 	mov	@r0,ar6
                                   1039 ;	calc.c:57: for (mask = 0x80000000lu; mask; mask >>= 1)
      00038F E5*00            [12] 1040 	mov	a,_bp
      000391 24 13            [12] 1041 	add	a,#0x13
      000393 F8               [12] 1042 	mov	r0,a
      000394 E4               [12] 1043 	clr	a
      000395 F6               [12] 1044 	mov	@r0,a
      000396 08               [12] 1045 	inc	r0
      000397 F6               [12] 1046 	mov	@r0,a
      000398 08               [12] 1047 	inc	r0
      000399 F6               [12] 1048 	mov	@r0,a
      00039A 08               [12] 1049 	inc	r0
      00039B 76 80            [12] 1050 	mov	@r0,#0x80
      00039D                       1051 00130$:
                                   1052 ;	calc.c:58: (void)putchar((d & mask) ? (int)'1' : (int)'0');
      00039D C0 07            [24] 1053 	push	ar7
      00039F E5*00            [12] 1054 	mov	a,_bp
      0003A1 24 0F            [12] 1055 	add	a,#0x0f
      0003A3 F8               [12] 1056 	mov	r0,a
      0003A4 86 03            [24] 1057 	mov	ar3,@r0
      0003A6 08               [12] 1058 	inc	r0
      0003A7 86 05            [24] 1059 	mov	ar5,@r0
      0003A9 08               [12] 1060 	inc	r0
      0003AA 86 06            [24] 1061 	mov	ar6,@r0
      0003AC 08               [12] 1062 	inc	r0
      0003AD 86 07            [24] 1063 	mov	ar7,@r0
      0003AF E5*00            [12] 1064 	mov	a,_bp
      0003B1 24 13            [12] 1065 	add	a,#0x13
      0003B3 F8               [12] 1066 	mov	r0,a
      0003B4 E6               [12] 1067 	mov	a,@r0
      0003B5 52 03            [12] 1068 	anl	ar3,a
      0003B7 08               [12] 1069 	inc	r0
      0003B8 E6               [12] 1070 	mov	a,@r0
      0003B9 52 05            [12] 1071 	anl	ar5,a
      0003BB 08               [12] 1072 	inc	r0
      0003BC E6               [12] 1073 	mov	a,@r0
      0003BD 52 06            [12] 1074 	anl	ar6,a
      0003BF 08               [12] 1075 	inc	r0
      0003C0 E6               [12] 1076 	mov	a,@r0
      0003C1 52 07            [12] 1077 	anl	ar7,a
      0003C3 EB               [12] 1078 	mov	a,r3
      0003C4 4D               [12] 1079 	orl	a,r5
      0003C5 4E               [12] 1080 	orl	a,r6
      0003C6 4F               [12] 1081 	orl	a,r7
      0003C7 D0 07            [24] 1082 	pop	ar7
      0003C9 60 06            [24] 1083 	jz	00137$
      0003CB 7D 31            [12] 1084 	mov	r5,#0x31
      0003CD 7E 00            [12] 1085 	mov	r6,#0x00
      0003CF 80 04            [24] 1086 	sjmp	00138$
      0003D1                       1087 00137$:
      0003D1 7D 30            [12] 1088 	mov	r5,#0x30
      0003D3 7E 00            [12] 1089 	mov	r6,#0x00
      0003D5                       1090 00138$:
      0003D5 8D 82            [24] 1091 	mov	dpl,r5
      0003D7 8E 83            [24] 1092 	mov	dph,r6
      0003D9 12r00r00         [24] 1093 	lcall	_putchar
                                   1094 ;	calc.c:57: for (mask = 0x80000000lu; mask; mask >>= 1)
      0003DC E5*00            [12] 1095 	mov	a,_bp
      0003DE 24 13            [12] 1096 	add	a,#0x13
      0003E0 F8               [12] 1097 	mov	r0,a
      0003E1 08               [12] 1098 	inc	r0
      0003E2 08               [12] 1099 	inc	r0
      0003E3 08               [12] 1100 	inc	r0
      0003E4 E6               [12] 1101 	mov	a,@r0
      0003E5 C3               [12] 1102 	clr	c
      0003E6 13               [12] 1103 	rrc	a
      0003E7 F6               [12] 1104 	mov	@r0,a
      0003E8 18               [12] 1105 	dec	r0
      0003E9 E6               [12] 1106 	mov	a,@r0
      0003EA 13               [12] 1107 	rrc	a
      0003EB F6               [12] 1108 	mov	@r0,a
      0003EC 18               [12] 1109 	dec	r0
      0003ED E6               [12] 1110 	mov	a,@r0
      0003EE 13               [12] 1111 	rrc	a
      0003EF F6               [12] 1112 	mov	@r0,a
      0003F0 18               [12] 1113 	dec	r0
      0003F1 E6               [12] 1114 	mov	a,@r0
      0003F2 13               [12] 1115 	rrc	a
      0003F3 F6               [12] 1116 	mov	@r0,a
      0003F4 E5*00            [12] 1117 	mov	a,_bp
      0003F6 24 13            [12] 1118 	add	a,#0x13
      0003F8 F8               [12] 1119 	mov	r0,a
      0003F9 E6               [12] 1120 	mov	a,@r0
      0003FA 08               [12] 1121 	inc	r0
      0003FB 46               [12] 1122 	orl	a,@r0
      0003FC 08               [12] 1123 	inc	r0
      0003FD 46               [12] 1124 	orl	a,@r0
      0003FE 08               [12] 1125 	inc	r0
      0003FF 46               [12] 1126 	orl	a,@r0
      000400 70 9B            [24] 1127 	jnz	00130$
                                   1128 ;	calc.c:95: printstr("\r\n");
      000402 7Cr00            [12] 1129 	mov	r4,#___str_0
      000404 7Ds00            [12] 1130 	mov	r5,#(___str_0 >> 8)
      000406 7E 80            [12] 1131 	mov	r6,#0x80
                                   1132 ;	calc.c:51: return;
      000408                       1133 00133$:
                                   1134 ;	calc.c:49: for (; *s; s++) putchar(*s);
      000408 8C 82            [24] 1135 	mov	dpl,r4
      00040A 8D 83            [24] 1136 	mov	dph,r5
      00040C 8E F0            [24] 1137 	mov	b,r6
      00040E 12r00r00         [24] 1138 	lcall	__gptrget
      000411 FB               [12] 1139 	mov	r3,a
      000412 60 10            [24] 1140 	jz	00120$
      000414 7A 00            [12] 1141 	mov	r2,#0x00
      000416 8B 82            [24] 1142 	mov	dpl,r3
      000418 8A 83            [24] 1143 	mov	dph,r2
      00041A 12r00r00         [24] 1144 	lcall	_putchar
      00041D 0C               [12] 1145 	inc	r4
                                   1146 ;	calc.c:95: printstr("\r\n");
      00041E BC 00 E7         [24] 1147 	cjne	r4,#0x00,00133$
      000421 0D               [12] 1148 	inc	r5
      000422 80 E4            [24] 1149 	sjmp	00133$
      000424                       1150 00120$:
                                   1151 ;	calc.c:96: r = stack_pop(ctx->ps, &d);
      000424 8F 04            [24] 1152 	mov	ar4,r7
      000426 7D 00            [12] 1153 	mov	r5,#0x00
      000428 7E 40            [12] 1154 	mov	r6,#0x40
      00042A C0 07            [24] 1155 	push	ar7
      00042C A8*00            [24] 1156 	mov	r0,_bp
      00042E 08               [12] 1157 	inc	r0
      00042F 08               [12] 1158 	inc	r0
      000430 86 82            [24] 1159 	mov	dpl,@r0
      000432 08               [12] 1160 	inc	r0
      000433 86 83            [24] 1161 	mov	dph,@r0
      000435 08               [12] 1162 	inc	r0
      000436 86 F0            [24] 1163 	mov	b,@r0
      000438 12r00r00         [24] 1164 	lcall	__gptrget
      00043B FA               [12] 1165 	mov	r2,a
      00043C A3               [24] 1166 	inc	dptr
      00043D 12r00r00         [24] 1167 	lcall	__gptrget
      000440 FB               [12] 1168 	mov	r3,a
      000441 A3               [24] 1169 	inc	dptr
      000442 12r00r00         [24] 1170 	lcall	__gptrget
      000445 FF               [12] 1171 	mov	r7,a
      000446 C0 04            [24] 1172 	push	ar4
      000448 C0 05            [24] 1173 	push	ar5
      00044A C0 06            [24] 1174 	push	ar6
      00044C 8A 82            [24] 1175 	mov	dpl,r2
      00044E 8B 83            [24] 1176 	mov	dph,r3
      000450 8F F0            [24] 1177 	mov	b,r7
      000452 12r00r00         [24] 1178 	lcall	_stack_pop
      000455 AE 82            [24] 1179 	mov	r6,dpl
      000457 AF 83            [24] 1180 	mov	r7,dph
      000459 15 81            [12] 1181 	dec	sp
      00045B 15 81            [12] 1182 	dec	sp
      00045D 15 81            [12] 1183 	dec	sp
      00045F E5*00            [12] 1184 	mov	a,_bp
      000461 24 05            [12] 1185 	add	a,#0x05
      000463 F8               [12] 1186 	mov	r0,a
      000464 A6 06            [24] 1187 	mov	@r0,ar6
      000466 08               [12] 1188 	inc	r0
      000467 A6 07            [24] 1189 	mov	@r0,ar7
      000469 D0 07            [24] 1190 	pop	ar7
      00046B 02r02rE0         [24] 1191 	ljmp	00105$
      00046E                       1192 00110$:
                                   1193 ;	calc.c:99: return 1;
      00046E 90 00 01         [24] 1194 	mov	dptr,#0x0001
                                   1195 ;	calc.c:100: }
      000471 85*00 81         [24] 1196 	mov	sp,_bp
      000474 D0*00            [24] 1197 	pop	_bp
      000476 22               [24] 1198 	ret
                                   1199 ;------------------------------------------------------------
                                   1200 ;Allocation info for local variables in function 'dump_peek'
                                   1201 ;------------------------------------------------------------
                                   1202 ;d                         Allocated to stack - _bp -6
                                   1203 ;_ctx                      Allocated to registers 
                                   1204 ;__1310720011              Allocated to registers 
                                   1205 ;s                         Allocated to registers r5 r6 r7 
                                   1206 ;__1310720013              Allocated to registers r4 r5 r6 r7 
                                   1207 ;d                         Allocated to stack - _bp +1
                                   1208 ;mask                      Allocated to stack - _bp +5
                                   1209 ;__1310720015              Allocated to registers 
                                   1210 ;s                         Allocated to registers r5 r6 r7 
                                   1211 ;------------------------------------------------------------
                                   1212 ;	calc.c:102: static int dump_peek(void *_ctx, long d) __reentrant {
                                   1213 ;	-----------------------------------------
                                   1214 ;	 function dump_peek
                                   1215 ;	-----------------------------------------
      000477                       1216 _dump_peek:
      000477 C0*00            [24] 1217 	push	_bp
      000479 E5 81            [12] 1218 	mov	a,sp
      00047B F5*00            [12] 1219 	mov	_bp,a
      00047D 24 08            [12] 1220 	add	a,#0x08
      00047F F5 81            [12] 1221 	mov	sp,a
                                   1222 ;	calc.c:105: printstr("PA ");
      000481 7Dr2C            [12] 1223 	mov	r5,#___str_5
      000483 7Es00            [12] 1224 	mov	r6,#(___str_5 >> 8)
      000485 7F 80            [12] 1225 	mov	r7,#0x80
                                   1226 ;	calc.c:51: return;
      000487                       1227 00108$:
                                   1228 ;	calc.c:49: for (; *s; s++) putchar(*s);
      000487 8D 82            [24] 1229 	mov	dpl,r5
      000489 8E 83            [24] 1230 	mov	dph,r6
      00048B 8F F0            [24] 1231 	mov	b,r7
      00048D 12r00r00         [24] 1232 	lcall	__gptrget
      000490 FC               [12] 1233 	mov	r4,a
      000491 60 10            [24] 1234 	jz	00102$
      000493 7B 00            [12] 1235 	mov	r3,#0x00
      000495 8C 82            [24] 1236 	mov	dpl,r4
      000497 8B 83            [24] 1237 	mov	dph,r3
      000499 12r00r00         [24] 1238 	lcall	_putchar
      00049C 0D               [12] 1239 	inc	r5
                                   1240 ;	calc.c:105: printstr("PA ");
      00049D BD 00 E7         [24] 1241 	cjne	r5,#0x00,00108$
      0004A0 0E               [12] 1242 	inc	r6
      0004A1 80 E4            [24] 1243 	sjmp	00108$
      0004A3                       1244 00102$:
                                   1245 ;	calc.c:106: printf("% 11ld / ", d);
      0004A3 E5*00            [12] 1246 	mov	a,_bp
      0004A5 24 FA            [12] 1247 	add	a,#0xfa
      0004A7 F8               [12] 1248 	mov	r0,a
      0004A8 E6               [12] 1249 	mov	a,@r0
      0004A9 C0 E0            [24] 1250 	push	acc
      0004AB 08               [12] 1251 	inc	r0
      0004AC E6               [12] 1252 	mov	a,@r0
      0004AD C0 E0            [24] 1253 	push	acc
      0004AF 08               [12] 1254 	inc	r0
      0004B0 E6               [12] 1255 	mov	a,@r0
      0004B1 C0 E0            [24] 1256 	push	acc
      0004B3 08               [12] 1257 	inc	r0
      0004B4 E6               [12] 1258 	mov	a,@r0
      0004B5 C0 E0            [24] 1259 	push	acc
      0004B7 74r19            [12] 1260 	mov	a,#___str_3
      0004B9 C0 E0            [24] 1261 	push	acc
      0004BB 74s00            [12] 1262 	mov	a,#(___str_3 >> 8)
      0004BD C0 E0            [24] 1263 	push	acc
      0004BF 74 80            [12] 1264 	mov	a,#0x80
      0004C1 C0 E0            [24] 1265 	push	acc
      0004C3 12r00r00         [24] 1266 	lcall	_printf
      0004C6 E5 81            [12] 1267 	mov	a,sp
      0004C8 24 F9            [12] 1268 	add	a,#0xf9
      0004CA F5 81            [12] 1269 	mov	sp,a
                                   1270 ;	calc.c:107: printf("%08lx / ", d);
      0004CC E5*00            [12] 1271 	mov	a,_bp
      0004CE 24 FA            [12] 1272 	add	a,#0xfa
      0004D0 F8               [12] 1273 	mov	r0,a
      0004D1 E6               [12] 1274 	mov	a,@r0
      0004D2 C0 E0            [24] 1275 	push	acc
      0004D4 08               [12] 1276 	inc	r0
      0004D5 E6               [12] 1277 	mov	a,@r0
      0004D6 C0 E0            [24] 1278 	push	acc
      0004D8 08               [12] 1279 	inc	r0
      0004D9 E6               [12] 1280 	mov	a,@r0
      0004DA C0 E0            [24] 1281 	push	acc
      0004DC 08               [12] 1282 	inc	r0
      0004DD E6               [12] 1283 	mov	a,@r0
      0004DE C0 E0            [24] 1284 	push	acc
      0004E0 74r23            [12] 1285 	mov	a,#___str_4
      0004E2 C0 E0            [24] 1286 	push	acc
      0004E4 74s00            [12] 1287 	mov	a,#(___str_4 >> 8)
      0004E6 C0 E0            [24] 1288 	push	acc
      0004E8 74 80            [12] 1289 	mov	a,#0x80
      0004EA C0 E0            [24] 1290 	push	acc
      0004EC 12r00r00         [24] 1291 	lcall	_printf
      0004EF E5 81            [12] 1292 	mov	a,sp
      0004F1 24 F9            [12] 1293 	add	a,#0xf9
      0004F3 F5 81            [12] 1294 	mov	sp,a
                                   1295 ;	calc.c:108: printbin(d);
      0004F5 E5*00            [12] 1296 	mov	a,_bp
      0004F7 24 FA            [12] 1297 	add	a,#0xfa
      0004F9 F8               [12] 1298 	mov	r0,a
      0004FA 86 04            [24] 1299 	mov	ar4,@r0
      0004FC 08               [12] 1300 	inc	r0
      0004FD 86 05            [24] 1301 	mov	ar5,@r0
      0004FF 08               [12] 1302 	inc	r0
      000500 86 06            [24] 1303 	mov	ar6,@r0
      000502 08               [12] 1304 	inc	r0
      000503 86 07            [24] 1305 	mov	ar7,@r0
      000505 A8*00            [24] 1306 	mov	r0,_bp
      000507 08               [12] 1307 	inc	r0
      000508 A6 04            [24] 1308 	mov	@r0,ar4
      00050A 08               [12] 1309 	inc	r0
      00050B A6 05            [24] 1310 	mov	@r0,ar5
      00050D 08               [12] 1311 	inc	r0
      00050E A6 06            [24] 1312 	mov	@r0,ar6
      000510 08               [12] 1313 	inc	r0
      000511 A6 07            [24] 1314 	mov	@r0,ar7
                                   1315 ;	calc.c:57: for (mask = 0x80000000lu; mask; mask >>= 1)
      000513 E5*00            [12] 1316 	mov	a,_bp
      000515 24 05            [12] 1317 	add	a,#0x05
      000517 F8               [12] 1318 	mov	r0,a
      000518 E4               [12] 1319 	clr	a
      000519 F6               [12] 1320 	mov	@r0,a
      00051A 08               [12] 1321 	inc	r0
      00051B F6               [12] 1322 	mov	@r0,a
      00051C 08               [12] 1323 	inc	r0
      00051D F6               [12] 1324 	mov	@r0,a
      00051E 08               [12] 1325 	inc	r0
      00051F 76 80            [12] 1326 	mov	@r0,#0x80
      000521                       1327 00110$:
                                   1328 ;	calc.c:58: (void)putchar((d & mask) ? (int)'1' : (int)'0');
      000521 A8*00            [24] 1329 	mov	r0,_bp
      000523 08               [12] 1330 	inc	r0
      000524 86 04            [24] 1331 	mov	ar4,@r0
      000526 08               [12] 1332 	inc	r0
      000527 86 05            [24] 1333 	mov	ar5,@r0
      000529 08               [12] 1334 	inc	r0
      00052A 86 06            [24] 1335 	mov	ar6,@r0
      00052C 08               [12] 1336 	inc	r0
      00052D 86 07            [24] 1337 	mov	ar7,@r0
      00052F E5*00            [12] 1338 	mov	a,_bp
      000531 24 05            [12] 1339 	add	a,#0x05
      000533 F8               [12] 1340 	mov	r0,a
      000534 E6               [12] 1341 	mov	a,@r0
      000535 52 04            [12] 1342 	anl	ar4,a
      000537 08               [12] 1343 	inc	r0
      000538 E6               [12] 1344 	mov	a,@r0
      000539 52 05            [12] 1345 	anl	ar5,a
      00053B 08               [12] 1346 	inc	r0
      00053C E6               [12] 1347 	mov	a,@r0
      00053D 52 06            [12] 1348 	anl	ar6,a
      00053F 08               [12] 1349 	inc	r0
      000540 E6               [12] 1350 	mov	a,@r0
      000541 52 07            [12] 1351 	anl	ar7,a
      000543 EC               [12] 1352 	mov	a,r4
      000544 4D               [12] 1353 	orl	a,r5
      000545 4E               [12] 1354 	orl	a,r6
      000546 4F               [12] 1355 	orl	a,r7
      000547 60 06            [24] 1356 	jz	00117$
      000549 7E 31            [12] 1357 	mov	r6,#0x31
      00054B 7F 00            [12] 1358 	mov	r7,#0x00
      00054D 80 04            [24] 1359 	sjmp	00118$
      00054F                       1360 00117$:
      00054F 7E 30            [12] 1361 	mov	r6,#0x30
      000551 7F 00            [12] 1362 	mov	r7,#0x00
      000553                       1363 00118$:
      000553 8E 82            [24] 1364 	mov	dpl,r6
      000555 8F 83            [24] 1365 	mov	dph,r7
      000557 12r00r00         [24] 1366 	lcall	_putchar
                                   1367 ;	calc.c:57: for (mask = 0x80000000lu; mask; mask >>= 1)
      00055A E5*00            [12] 1368 	mov	a,_bp
      00055C 24 05            [12] 1369 	add	a,#0x05
      00055E F8               [12] 1370 	mov	r0,a
      00055F 08               [12] 1371 	inc	r0
      000560 08               [12] 1372 	inc	r0
      000561 08               [12] 1373 	inc	r0
      000562 E6               [12] 1374 	mov	a,@r0
      000563 C3               [12] 1375 	clr	c
      000564 13               [12] 1376 	rrc	a
      000565 F6               [12] 1377 	mov	@r0,a
      000566 18               [12] 1378 	dec	r0
      000567 E6               [12] 1379 	mov	a,@r0
      000568 13               [12] 1380 	rrc	a
      000569 F6               [12] 1381 	mov	@r0,a
      00056A 18               [12] 1382 	dec	r0
      00056B E6               [12] 1383 	mov	a,@r0
      00056C 13               [12] 1384 	rrc	a
      00056D F6               [12] 1385 	mov	@r0,a
      00056E 18               [12] 1386 	dec	r0
      00056F E6               [12] 1387 	mov	a,@r0
      000570 13               [12] 1388 	rrc	a
      000571 F6               [12] 1389 	mov	@r0,a
      000572 E5*00            [12] 1390 	mov	a,_bp
      000574 24 05            [12] 1391 	add	a,#0x05
      000576 F8               [12] 1392 	mov	r0,a
      000577 E6               [12] 1393 	mov	a,@r0
      000578 08               [12] 1394 	inc	r0
      000579 46               [12] 1395 	orl	a,@r0
      00057A 08               [12] 1396 	inc	r0
      00057B 46               [12] 1397 	orl	a,@r0
      00057C 08               [12] 1398 	inc	r0
      00057D 46               [12] 1399 	orl	a,@r0
      00057E 70 A1            [24] 1400 	jnz	00110$
                                   1401 ;	calc.c:109: printstr("\r\n");
      000580 7Dr00            [12] 1402 	mov	r5,#___str_0
      000582 7Es00            [12] 1403 	mov	r6,#(___str_0 >> 8)
      000584 7F 80            [12] 1404 	mov	r7,#0x80
                                   1405 ;	calc.c:51: return;
      000586                       1406 00113$:
                                   1407 ;	calc.c:49: for (; *s; s++) putchar(*s);
      000586 8D 82            [24] 1408 	mov	dpl,r5
      000588 8E 83            [24] 1409 	mov	dph,r6
      00058A 8F F0            [24] 1410 	mov	b,r7
      00058C 12r00r00         [24] 1411 	lcall	__gptrget
      00058F FC               [12] 1412 	mov	r4,a
      000590 60 10            [24] 1413 	jz	00106$
      000592 7B 00            [12] 1414 	mov	r3,#0x00
      000594 8C 82            [24] 1415 	mov	dpl,r4
      000596 8B 83            [24] 1416 	mov	dph,r3
      000598 12r00r00         [24] 1417 	lcall	_putchar
      00059B 0D               [12] 1418 	inc	r5
                                   1419 ;	calc.c:109: printstr("\r\n");
      00059C BD 00 E7         [24] 1420 	cjne	r5,#0x00,00113$
      00059F 0E               [12] 1421 	inc	r6
      0005A0 80 E4            [24] 1422 	sjmp	00113$
      0005A2                       1423 00106$:
                                   1424 ;	calc.c:111: return 1;
      0005A2 90 00 01         [24] 1425 	mov	dptr,#0x0001
                                   1426 ;	calc.c:112: }
      0005A5 85*00 81         [24] 1427 	mov	sp,_bp
      0005A8 D0*00            [24] 1428 	pop	_bp
      0005AA 22               [24] 1429 	ret
                                   1430 ;------------------------------------------------------------
                                   1431 ;Allocation info for local variables in function 'operator'
                                   1432 ;------------------------------------------------------------
                                   1433 ;delta                     Allocated to stack - _bp -5
                                   1434 ;_ctx                      Allocated to stack - _bp +1
                                   1435 ;ctx                       Allocated to stack - _bp +18
                                   1436 ;t0                        Allocated to registers r7 r6 r5 
                                   1437 ;d0                        Allocated to stack - _bp +21
                                   1438 ;d1                        Allocated to stack - _bp +25
                                   1439 ;__1966080017              Allocated to registers 
                                   1440 ;s                         Allocated to registers r7 r6 r5 
                                   1441 ;__1966080019              Allocated to registers 
                                   1442 ;s                         Allocated to registers r7 r6 r5 
                                   1443 ;__2621440021              Allocated to registers 
                                   1444 ;s                         Allocated to registers r7 r6 r5 
                                   1445 ;__2621440023              Allocated to registers r7 r6 r5 r4 
                                   1446 ;d                         Allocated to registers r7 r6 r5 r2 
                                   1447 ;mask                      Allocated to stack - _bp +29
                                   1448 ;__2621440025              Allocated to registers 
                                   1449 ;s                         Allocated to registers r7 r6 r5 
                                   1450 ;__1966080027              Allocated to registers 
                                   1451 ;s                         Allocated to registers r7 r6 r5 
                                   1452 ;__1966080029              Allocated to registers 
                                   1453 ;s                         Allocated to registers r7 r6 r5 
                                   1454 ;__1966080031              Allocated to registers 
                                   1455 ;s                         Allocated to registers r7 r6 r5 
                                   1456 ;__1966080033              Allocated to registers 
                                   1457 ;s                         Allocated to registers r7 r6 r5 
                                   1458 ;__2621440035              Allocated to registers 
                                   1459 ;s                         Allocated to registers r7 r6 r5 
                                   1460 ;__2621440037              Allocated to registers r7 r6 r5 r4 
                                   1461 ;d                         Allocated to registers r7 r6 r5 r2 
                                   1462 ;mask                      Allocated to stack - _bp +29
                                   1463 ;__2621440039              Allocated to registers 
                                   1464 ;s                         Allocated to registers r7 r6 r5 
                                   1465 ;__1966080041              Allocated to registers 
                                   1466 ;s                         Allocated to registers r7 r6 r5 
                                   1467 ;__1966080043              Allocated to registers 
                                   1468 ;s                         Allocated to registers r7 r6 r5 
                                   1469 ;__2621440045              Allocated to registers 
                                   1470 ;s                         Allocated to registers r7 r6 r5 
                                   1471 ;__1966080047              Allocated to registers 
                                   1472 ;s                         Allocated to registers r7 r6 r5 
                                   1473 ;__3276800049              Allocated to registers 
                                   1474 ;s                         Allocated to registers r7 r6 r5 
                                   1475 ;__1966080051              Allocated to registers 
                                   1476 ;s                         Allocated to registers r7 r6 r5 
                                   1477 ;__3276800053              Allocated to registers 
                                   1478 ;s                         Allocated to registers r7 r6 r5 
                                   1479 ;__1966080055              Allocated to registers 
                                   1480 ;s                         Allocated to registers r7 r6 r5 
                                   1481 ;__1966080057              Allocated to registers 
                                   1482 ;s                         Allocated to registers r7 r6 r5 
                                   1483 ;__1966080059              Allocated to registers 
                                   1484 ;s                         Allocated to registers r7 r6 r5 
                                   1485 ;__1966080061              Allocated to registers 
                                   1486 ;s                         Allocated to registers r7 r6 r5 
                                   1487 ;__1966080063              Allocated to registers 
                                   1488 ;s                         Allocated to registers r7 r6 r5 
                                   1489 ;__3276800065              Allocated to registers 
                                   1490 ;s                         Allocated to registers r7 r6 r5 
                                   1491 ;__1966080067              Allocated to registers 
                                   1492 ;s                         Allocated to registers r7 r6 r5 
                                   1493 ;__2621440069              Allocated to registers 
                                   1494 ;s                         Allocated to registers r7 r6 r5 
                                   1495 ;__1966080071              Allocated to registers 
                                   1496 ;s                         Allocated to registers r7 r6 r5 
                                   1497 ;__2621440073              Allocated to registers 
                                   1498 ;s                         Allocated to registers r7 r6 r5 
                                   1499 ;__1966080075              Allocated to registers 
                                   1500 ;s                         Allocated to registers r7 r6 r5 
                                   1501 ;__2621440077              Allocated to registers 
                                   1502 ;s                         Allocated to registers r7 r6 r5 
                                   1503 ;__1966080079              Allocated to registers 
                                   1504 ;s                         Allocated to registers r7 r6 r5 
                                   1505 ;__2621440081              Allocated to registers 
                                   1506 ;s                         Allocated to registers r7 r6 r5 
                                   1507 ;__2621440083              Allocated to registers 
                                   1508 ;s                         Allocated to registers r7 r6 r5 
                                   1509 ;__1966080085              Allocated to registers 
                                   1510 ;s                         Allocated to registers r7 r6 r5 
                                   1511 ;__2621440087              Allocated to registers 
                                   1512 ;s                         Allocated to registers r7 r6 r5 
                                   1513 ;__2621440089              Allocated to registers 
                                   1514 ;s                         Allocated to registers r7 r6 r5 
                                   1515 ;__1966080091              Allocated to registers 
                                   1516 ;s                         Allocated to registers r5 r4 r3 
                                   1517 ;__2621440093              Allocated to registers 
                                   1518 ;s                         Allocated to registers r5 r4 r3 
                                   1519 ;__1966080095              Allocated to registers 
                                   1520 ;s                         Allocated to registers r5 r4 r3 
                                   1521 ;__2621440097              Allocated to registers 
                                   1522 ;s                         Allocated to registers r5 r4 r3 
                                   1523 ;__1966080099              Allocated to registers 
                                   1524 ;s                         Allocated to registers r5 r4 r3 
                                   1525 ;__2621440101              Allocated to registers 
                                   1526 ;s                         Allocated to registers r5 r4 r3 
                                   1527 ;__1966080103              Allocated to registers 
                                   1528 ;s                         Allocated to registers r5 r4 r3 
                                   1529 ;__2621440105              Allocated to registers 
                                   1530 ;s                         Allocated to registers r5 r4 r3 
                                   1531 ;__1966080107              Allocated to registers 
                                   1532 ;s                         Allocated to registers r5 r4 r3 
                                   1533 ;__2621440109              Allocated to registers 
                                   1534 ;s                         Allocated to registers r5 r4 r3 
                                   1535 ;__1966080111              Allocated to registers 
                                   1536 ;s                         Allocated to registers r5 r4 r3 
                                   1537 ;__2621440113              Allocated to registers 
                                   1538 ;s                         Allocated to registers r5 r4 r3 
                                   1539 ;__1966080115              Allocated to registers 
                                   1540 ;s                         Allocated to registers r5 r4 r3 
                                   1541 ;sloc0                     Allocated to stack - _bp +330
                                   1542 ;sloc1                     Allocated to stack - _bp +4
                                   1543 ;sloc2                     Allocated to stack - _bp +7
                                   1544 ;sloc3                     Allocated to stack - _bp +11
                                   1545 ;sloc4                     Allocated to stack - _bp +14
                                   1546 ;------------------------------------------------------------
                                   1547 ;	calc.c:114: static int operator(void *_ctx, delta_t *delta) __reentrant {
                                   1548 ;	-----------------------------------------
                                   1549 ;	 function operator
                                   1550 ;	-----------------------------------------
      0005AB                       1551 _operator:
      0005AB C0*00            [24] 1552 	push	_bp
      0005AD 85 81*00         [24] 1553 	mov	_bp,sp
      0005B0 C0 82            [24] 1554 	push	dpl
      0005B2 C0 83            [24] 1555 	push	dph
      0005B4 C0 F0            [24] 1556 	push	b
      0005B6 E5 81            [12] 1557 	mov	a,sp
      0005B8 24 1D            [12] 1558 	add	a,#0x1d
      0005BA F5 81            [12] 1559 	mov	sp,a
                                   1560 ;	calc.c:115: calc_ctx_t*ctx = (calc_ctx_t*)_ctx;
      0005BC A8*00            [24] 1561 	mov	r0,_bp
      0005BE 08               [12] 1562 	inc	r0
      0005BF E5*00            [12] 1563 	mov	a,_bp
      0005C1 24 12            [12] 1564 	add	a,#0x12
      0005C3 F9               [12] 1565 	mov	r1,a
      0005C4 E6               [12] 1566 	mov	a,@r0
      0005C5 F7               [12] 1567 	mov	@r1,a
      0005C6 08               [12] 1568 	inc	r0
      0005C7 09               [12] 1569 	inc	r1
      0005C8 E6               [12] 1570 	mov	a,@r0
      0005C9 F7               [12] 1571 	mov	@r1,a
      0005CA 08               [12] 1572 	inc	r0
      0005CB 09               [12] 1573 	inc	r1
      0005CC E6               [12] 1574 	mov	a,@r0
      0005CD F7               [12] 1575 	mov	@r1,a
                                   1576 ;	calc.c:119: switch (ctx->digit[0]) {
      0005CE E5*00            [12] 1577 	mov	a,_bp
      0005D0 24 12            [12] 1578 	add	a,#0x12
      0005D2 F8               [12] 1579 	mov	r0,a
      0005D3 74 07            [12] 1580 	mov	a,#0x07
      0005D5 26               [12] 1581 	add	a,@r0
      0005D6 FD               [12] 1582 	mov	r5,a
      0005D7 E4               [12] 1583 	clr	a
      0005D8 08               [12] 1584 	inc	r0
      0005D9 36               [12] 1585 	addc	a,@r0
      0005DA FE               [12] 1586 	mov	r6,a
      0005DB 08               [12] 1587 	inc	r0
      0005DC 86 07            [24] 1588 	mov	ar7,@r0
      0005DE 8D 82            [24] 1589 	mov	dpl,r5
      0005E0 8E 83            [24] 1590 	mov	dph,r6
      0005E2 8F F0            [24] 1591 	mov	b,r7
      0005E4 12r00r00         [24] 1592 	lcall	__gptrget
      0005E7 FC               [12] 1593 	mov	r4,a
      0005E8 BC 23 03         [24] 1594 	cjne	r4,#0x23,01232$
      0005EB 02r1ArA4         [24] 1595 	ljmp	00189$
      0005EE                       1596 01232$:
      0005EE BC 25 03         [24] 1597 	cjne	r4,#0x25,01233$
      0005F1 02r1ArA4         [24] 1598 	ljmp	00189$
      0005F4                       1599 01233$:
      0005F4 BC 26 03         [24] 1600 	cjne	r4,#0x26,01234$
      0005F7 02r1Dr8A         [24] 1601 	ljmp	00202$
      0005FA                       1602 01234$:
      0005FA BC 2A 03         [24] 1603 	cjne	r4,#0x2a,01235$
      0005FD 02r16r14         [24] 1604 	ljmp	00167$
      000600                       1605 01235$:
      000600 BC 2B 03         [24] 1606 	cjne	r4,#0x2b,01236$
      000603 02r13r15         [24] 1607 	ljmp	00153$
      000606                       1608 01236$:
      000606 BC 2D 03         [24] 1609 	cjne	r4,#0x2d,01237$
      000609 02r14r94         [24] 1610 	ljmp	00160$
      00060C                       1611 01237$:
      00060C BC 2E 03         [24] 1612 	cjne	r4,#0x2e,01238$
      00060F 02r08rE2         [24] 1613 	ljmp	00109$
      000612                       1614 01238$:
      000612 BC 2F 03         [24] 1615 	cjne	r4,#0x2f,01239$
      000615 02r17rBA         [24] 1616 	ljmp	00175$
      000618                       1617 01239$:
      000618 BC 3C 03         [24] 1618 	cjne	r4,#0x3c,01240$
      00061B 02r25rAF         [24] 1619 	ljmp	00237$
      00061E                       1620 01240$:
      00061E BC 3E 03         [24] 1621 	cjne	r4,#0x3e,01241$
      000621 02r22r58         [24] 1622 	ljmp	00223$
      000624                       1623 01241$:
      000624 BC 4D 03         [24] 1624 	cjne	r4,#0x4d,01242$
      000627 02r0DrBB         [24] 1625 	ljmp	00127$
      00062A                       1626 01242$:
      00062A BC 50 03         [24] 1627 	cjne	r4,#0x50,01243$
      00062D 02r08r41         [24] 1628 	ljmp	00105$
      000630                       1629 01243$:
      000630 BC 54 03         [24] 1630 	cjne	r4,#0x54,01244$
      000633 02r10rBD         [24] 1631 	ljmp	00145$
      000636                       1632 01244$:
      000636 BC 55 03         [24] 1633 	cjne	r4,#0x55,01245$
      000639 02r0FrD6         [24] 1634 	ljmp	00139$
      00063C                       1635 01245$:
      00063C BC 56 03         [24] 1636 	cjne	r4,#0x56,01246$
      00063F 02r0Ar9D         [24] 1637 	ljmp	00113$
      000642                       1638 01246$:
      000642 BC 58 03         [24] 1639 	cjne	r4,#0x58,01247$
      000645 02r12r76         [24] 1640 	ljmp	00152$
      000648                       1641 01247$:
      000648 BC 5C 03         [24] 1642 	cjne	r4,#0x5c,01248$
      00064B 02r17rBA         [24] 1643 	ljmp	00175$
      00064E                       1644 01248$:
      00064E BC 5D 03         [24] 1645 	cjne	r4,#0x5d,01249$
      000651 02r23rFB         [24] 1646 	ljmp	00230$
      000654                       1647 01249$:
      000654 BC 5E 03         [24] 1648 	cjne	r4,#0x5e,01250$
      000657 02r20rBE         [24] 1649 	ljmp	00216$
      00065A                       1650 01250$:
      00065A BC 6D 03         [24] 1651 	cjne	r4,#0x6d,01251$
      00065D 02r0Cr87         [24] 1652 	ljmp	00121$
      000660                       1653 01251$:
      000660 BC 70 02         [24] 1654 	cjne	r4,#0x70,01252$
      000663 80 21            [24] 1655 	sjmp	00101$
      000665                       1656 01252$:
      000665 BC 75 03         [24] 1657 	cjne	r4,#0x75,01253$
      000668 02r0ErEF         [24] 1658 	ljmp	00133$
      00066B                       1659 01253$:
      00066B BC 76 03         [24] 1660 	cjne	r4,#0x76,01254$
      00066E 02r08rE2         [24] 1661 	ljmp	00109$
      000671                       1662 01254$:
      000671 BC 78 03         [24] 1663 	cjne	r4,#0x78,01255$
      000674 02r0ArE6         [24] 1664 	ljmp	00114$
      000677                       1665 01255$:
      000677 BC 7C 03         [24] 1666 	cjne	r4,#0x7c,01256$
      00067A 02r1Fr24         [24] 1667 	ljmp	00209$
      00067D                       1668 01256$:
      00067D BC 7E 03         [24] 1669 	cjne	r4,#0x7e,01257$
      000680 02r27r52         [24] 1670 	ljmp	00244$
      000683                       1671 01257$:
      000683 02r28r2B         [24] 1672 	ljmp	00248$
                                   1673 ;	calc.c:120: case 'p':
      000686                       1674 00101$:
                                   1675 ;	calc.c:121: printstr("\r\n");
      000686 7Fr00            [12] 1676 	mov	r7,#___str_0
      000688 7Es00            [12] 1677 	mov	r6,#(___str_0 >> 8)
      00068A 7D 80            [12] 1678 	mov	r5,#0x80
                                   1679 ;	calc.c:51: return;
      00068C                       1680 00351$:
                                   1681 ;	calc.c:49: for (; *s; s++) putchar(*s);
      00068C 8F 82            [24] 1682 	mov	dpl,r7
      00068E 8E 83            [24] 1683 	mov	dph,r6
      000690 8D F0            [24] 1684 	mov	b,r5
      000692 12r00r00         [24] 1685 	lcall	__gptrget
      000695 FC               [12] 1686 	mov	r4,a
      000696 60 10            [24] 1687 	jz	00251$
      000698 7B 00            [12] 1688 	mov	r3,#0x00
      00069A 8C 82            [24] 1689 	mov	dpl,r4
      00069C 8B 83            [24] 1690 	mov	dph,r3
      00069E 12r00r00         [24] 1691 	lcall	_putchar
      0006A1 0F               [12] 1692 	inc	r7
                                   1693 ;	calc.c:121: printstr("\r\n");
      0006A2 BF 00 E7         [24] 1694 	cjne	r7,#0x00,00351$
      0006A5 0E               [12] 1695 	inc	r6
      0006A6 80 E4            [24] 1696 	sjmp	00351$
      0006A8                       1697 00251$:
                                   1698 ;	calc.c:122: if (!stack_peek(ctx->ps, &d0)) printstr("stack underflow\r\n");
      0006A8 E5*00            [12] 1699 	mov	a,_bp
      0006AA 24 15            [12] 1700 	add	a,#0x15
      0006AC FF               [12] 1701 	mov	r7,a
      0006AD 7E 00            [12] 1702 	mov	r6,#0x00
      0006AF 7D 40            [12] 1703 	mov	r5,#0x40
      0006B1 E5*00            [12] 1704 	mov	a,_bp
      0006B3 24 12            [12] 1705 	add	a,#0x12
      0006B5 F8               [12] 1706 	mov	r0,a
      0006B6 74 11            [12] 1707 	mov	a,#0x11
      0006B8 26               [12] 1708 	add	a,@r0
      0006B9 FA               [12] 1709 	mov	r2,a
      0006BA ED               [12] 1710 	mov	a,r5
      0006BB 08               [12] 1711 	inc	r0
      0006BC 36               [12] 1712 	addc	a,@r0
      0006BD FB               [12] 1713 	mov	r3,a
      0006BE 08               [12] 1714 	inc	r0
      0006BF 86 04            [24] 1715 	mov	ar4,@r0
      0006C1 8A 82            [24] 1716 	mov	dpl,r2
      0006C3 8B 83            [24] 1717 	mov	dph,r3
      0006C5 8C F0            [24] 1718 	mov	b,r4
      0006C7 12r00r00         [24] 1719 	lcall	__gptrget
      0006CA FA               [12] 1720 	mov	r2,a
      0006CB A3               [24] 1721 	inc	dptr
      0006CC 12r00r00         [24] 1722 	lcall	__gptrget
      0006CF FB               [12] 1723 	mov	r3,a
      0006D0 A3               [24] 1724 	inc	dptr
      0006D1 12r00r00         [24] 1725 	lcall	__gptrget
      0006D4 FC               [12] 1726 	mov	r4,a
      0006D5 C0 07            [24] 1727 	push	ar7
      0006D7 C0 06            [24] 1728 	push	ar6
      0006D9 C0 05            [24] 1729 	push	ar5
      0006DB 8A 82            [24] 1730 	mov	dpl,r2
      0006DD 8B 83            [24] 1731 	mov	dph,r3
      0006DF 8C F0            [24] 1732 	mov	b,r4
      0006E1 12r00r00         [24] 1733 	lcall	_stack_peek
      0006E4 AB 82            [24] 1734 	mov	r3,dpl
      0006E6 AC 83            [24] 1735 	mov	r4,dph
      0006E8 15 81            [12] 1736 	dec	sp
      0006EA 15 81            [12] 1737 	dec	sp
      0006EC 15 81            [12] 1738 	dec	sp
      0006EE EB               [12] 1739 	mov	a,r3
      0006EF 4C               [12] 1740 	orl	a,r4
      0006F0 70 25            [24] 1741 	jnz	00103$
      0006F2 7Fr03            [12] 1742 	mov	r7,#___str_1
      0006F4 7Es00            [12] 1743 	mov	r6,#(___str_1 >> 8)
      0006F6 7D 80            [12] 1744 	mov	r5,#0x80
                                   1745 ;	calc.c:51: return;
      0006F8                       1746 00354$:
                                   1747 ;	calc.c:49: for (; *s; s++) putchar(*s);
      0006F8 8F 82            [24] 1748 	mov	dpl,r7
      0006FA 8E 83            [24] 1749 	mov	dph,r6
      0006FC 8D F0            [24] 1750 	mov	b,r5
      0006FE 12r00r00         [24] 1751 	lcall	__gptrget
      000701 FC               [12] 1752 	mov	r4,a
      000702 70 03            [24] 1753 	jnz	01261$
      000704 02r28r30         [24] 1754 	ljmp	00249$
      000707                       1755 01261$:
      000707 7B 00            [12] 1756 	mov	r3,#0x00
      000709 8C 82            [24] 1757 	mov	dpl,r4
      00070B 8B 83            [24] 1758 	mov	dph,r3
      00070D 12r00r00         [24] 1759 	lcall	_putchar
      000710 0F               [12] 1760 	inc	r7
                                   1761 ;	calc.c:122: if (!stack_peek(ctx->ps, &d0)) printstr("stack underflow\r\n");
      000711 BF 00 E4         [24] 1762 	cjne	r7,#0x00,00354$
      000714 0E               [12] 1763 	inc	r6
      000715 80 E1            [24] 1764 	sjmp	00354$
      000717                       1765 00103$:
                                   1766 ;	calc.c:124: printstr("PT ");
      000717 7Fr30            [12] 1767 	mov	r7,#___str_6
      000719 7Es00            [12] 1768 	mov	r6,#(___str_6 >> 8)
      00071B 7D 80            [12] 1769 	mov	r5,#0x80
                                   1770 ;	calc.c:51: return;
      00071D                       1771 00357$:
                                   1772 ;	calc.c:49: for (; *s; s++) putchar(*s);
      00071D 8F 82            [24] 1773 	mov	dpl,r7
      00071F 8E 83            [24] 1774 	mov	dph,r6
      000721 8D F0            [24] 1775 	mov	b,r5
      000723 12r00r00         [24] 1776 	lcall	__gptrget
      000726 FC               [12] 1777 	mov	r4,a
      000727 60 10            [24] 1778 	jz	00255$
      000729 7B 00            [12] 1779 	mov	r3,#0x00
      00072B 8C 82            [24] 1780 	mov	dpl,r4
      00072D 8B 83            [24] 1781 	mov	dph,r3
      00072F 12r00r00         [24] 1782 	lcall	_putchar
      000732 0F               [12] 1783 	inc	r7
                                   1784 ;	calc.c:124: printstr("PT ");
      000733 BF 00 E7         [24] 1785 	cjne	r7,#0x00,00357$
      000736 0E               [12] 1786 	inc	r6
      000737 80 E4            [24] 1787 	sjmp	00357$
      000739                       1788 00255$:
                                   1789 ;	calc.c:125: printf("% 11ld / ", d0);
      000739 E5*00            [12] 1790 	mov	a,_bp
      00073B 24 15            [12] 1791 	add	a,#0x15
      00073D F8               [12] 1792 	mov	r0,a
      00073E E6               [12] 1793 	mov	a,@r0
      00073F C0 E0            [24] 1794 	push	acc
      000741 08               [12] 1795 	inc	r0
      000742 E6               [12] 1796 	mov	a,@r0
      000743 C0 E0            [24] 1797 	push	acc
      000745 08               [12] 1798 	inc	r0
      000746 E6               [12] 1799 	mov	a,@r0
      000747 C0 E0            [24] 1800 	push	acc
      000749 08               [12] 1801 	inc	r0
      00074A E6               [12] 1802 	mov	a,@r0
      00074B C0 E0            [24] 1803 	push	acc
      00074D 74r19            [12] 1804 	mov	a,#___str_3
      00074F C0 E0            [24] 1805 	push	acc
      000751 74s00            [12] 1806 	mov	a,#(___str_3 >> 8)
      000753 C0 E0            [24] 1807 	push	acc
      000755 74 80            [12] 1808 	mov	a,#0x80
      000757 C0 E0            [24] 1809 	push	acc
      000759 12r00r00         [24] 1810 	lcall	_printf
      00075C E5 81            [12] 1811 	mov	a,sp
      00075E 24 F9            [12] 1812 	add	a,#0xf9
      000760 F5 81            [12] 1813 	mov	sp,a
                                   1814 ;	calc.c:126: printf("%08lx / ", d0);
      000762 E5*00            [12] 1815 	mov	a,_bp
      000764 24 15            [12] 1816 	add	a,#0x15
      000766 F8               [12] 1817 	mov	r0,a
      000767 E6               [12] 1818 	mov	a,@r0
      000768 C0 E0            [24] 1819 	push	acc
      00076A 08               [12] 1820 	inc	r0
      00076B E6               [12] 1821 	mov	a,@r0
      00076C C0 E0            [24] 1822 	push	acc
      00076E 08               [12] 1823 	inc	r0
      00076F E6               [12] 1824 	mov	a,@r0
      000770 C0 E0            [24] 1825 	push	acc
      000772 08               [12] 1826 	inc	r0
      000773 E6               [12] 1827 	mov	a,@r0
      000774 C0 E0            [24] 1828 	push	acc
      000776 74r23            [12] 1829 	mov	a,#___str_4
      000778 C0 E0            [24] 1830 	push	acc
      00077A 74s00            [12] 1831 	mov	a,#(___str_4 >> 8)
      00077C C0 E0            [24] 1832 	push	acc
      00077E 74 80            [12] 1833 	mov	a,#0x80
      000780 C0 E0            [24] 1834 	push	acc
      000782 12r00r00         [24] 1835 	lcall	_printf
      000785 E5 81            [12] 1836 	mov	a,sp
      000787 24 F9            [12] 1837 	add	a,#0xf9
      000789 F5 81            [12] 1838 	mov	sp,a
                                   1839 ;	calc.c:127: printbin(d0);
      00078B E5*00            [12] 1840 	mov	a,_bp
      00078D 24 15            [12] 1841 	add	a,#0x15
      00078F F8               [12] 1842 	mov	r0,a
      000790 86 07            [24] 1843 	mov	ar7,@r0
      000792 08               [12] 1844 	inc	r0
      000793 86 06            [24] 1845 	mov	ar6,@r0
      000795 08               [12] 1846 	inc	r0
      000796 86 05            [24] 1847 	mov	ar5,@r0
      000798 08               [12] 1848 	inc	r0
      000799 86 04            [24] 1849 	mov	ar4,@r0
      00079B 8C 02            [24] 1850 	mov	ar2,r4
                                   1851 ;	calc.c:57: for (mask = 0x80000000lu; mask; mask >>= 1)
      00079D E5*00            [12] 1852 	mov	a,_bp
      00079F 24 1D            [12] 1853 	add	a,#0x1d
      0007A1 F8               [12] 1854 	mov	r0,a
      0007A2 E4               [12] 1855 	clr	a
      0007A3 F6               [12] 1856 	mov	@r0,a
      0007A4 08               [12] 1857 	inc	r0
      0007A5 F6               [12] 1858 	mov	@r0,a
      0007A6 08               [12] 1859 	inc	r0
      0007A7 F6               [12] 1860 	mov	@r0,a
      0007A8 08               [12] 1861 	inc	r0
      0007A9 76 80            [12] 1862 	mov	@r0,#0x80
      0007AB                       1863 00359$:
                                   1864 ;	calc.c:58: (void)putchar((d & mask) ? (int)'1' : (int)'0');
      0007AB E5*00            [12] 1865 	mov	a,_bp
      0007AD 24 07            [12] 1866 	add	a,#0x07
      0007AF F8               [12] 1867 	mov	r0,a
      0007B0 A6 07            [24] 1868 	mov	@r0,ar7
      0007B2 08               [12] 1869 	inc	r0
      0007B3 A6 06            [24] 1870 	mov	@r0,ar6
      0007B5 08               [12] 1871 	inc	r0
      0007B6 A6 05            [24] 1872 	mov	@r0,ar5
      0007B8 08               [12] 1873 	inc	r0
      0007B9 A6 02            [24] 1874 	mov	@r0,ar2
      0007BB E5*00            [12] 1875 	mov	a,_bp
      0007BD 24 07            [12] 1876 	add	a,#0x07
      0007BF F8               [12] 1877 	mov	r0,a
      0007C0 E5*00            [12] 1878 	mov	a,_bp
      0007C2 24 1D            [12] 1879 	add	a,#0x1d
      0007C4 F9               [12] 1880 	mov	r1,a
      0007C5 E7               [12] 1881 	mov	a,@r1
      0007C6 56               [12] 1882 	anl	a,@r0
      0007C7 F6               [12] 1883 	mov	@r0,a
      0007C8 09               [12] 1884 	inc	r1
      0007C9 E7               [12] 1885 	mov	a,@r1
      0007CA 08               [12] 1886 	inc	r0
      0007CB 56               [12] 1887 	anl	a,@r0
      0007CC F6               [12] 1888 	mov	@r0,a
      0007CD 09               [12] 1889 	inc	r1
      0007CE E7               [12] 1890 	mov	a,@r1
      0007CF 08               [12] 1891 	inc	r0
      0007D0 56               [12] 1892 	anl	a,@r0
      0007D1 F6               [12] 1893 	mov	@r0,a
      0007D2 09               [12] 1894 	inc	r1
      0007D3 E7               [12] 1895 	mov	a,@r1
      0007D4 08               [12] 1896 	inc	r0
      0007D5 56               [12] 1897 	anl	a,@r0
      0007D6 F6               [12] 1898 	mov	@r0,a
      0007D7 E5*00            [12] 1899 	mov	a,_bp
      0007D9 24 07            [12] 1900 	add	a,#0x07
      0007DB F8               [12] 1901 	mov	r0,a
      0007DC E6               [12] 1902 	mov	a,@r0
      0007DD 08               [12] 1903 	inc	r0
      0007DE 46               [12] 1904 	orl	a,@r0
      0007DF 08               [12] 1905 	inc	r0
      0007E0 46               [12] 1906 	orl	a,@r0
      0007E1 08               [12] 1907 	inc	r0
      0007E2 46               [12] 1908 	orl	a,@r0
      0007E3 60 06            [24] 1909 	jz	00500$
      0007E5 7B 31            [12] 1910 	mov	r3,#0x31
      0007E7 7C 00            [12] 1911 	mov	r4,#0x00
      0007E9 80 04            [24] 1912 	sjmp	00501$
      0007EB                       1913 00500$:
      0007EB 7B 30            [12] 1914 	mov	r3,#0x30
      0007ED 7C 00            [12] 1915 	mov	r4,#0x00
      0007EF                       1916 00501$:
      0007EF 8B 82            [24] 1917 	mov	dpl,r3
      0007F1 8C 83            [24] 1918 	mov	dph,r4
      0007F3 12r00r00         [24] 1919 	lcall	_putchar
                                   1920 ;	calc.c:57: for (mask = 0x80000000lu; mask; mask >>= 1)
      0007F6 E5*00            [12] 1921 	mov	a,_bp
      0007F8 24 1D            [12] 1922 	add	a,#0x1d
      0007FA F8               [12] 1923 	mov	r0,a
      0007FB 08               [12] 1924 	inc	r0
      0007FC 08               [12] 1925 	inc	r0
      0007FD 08               [12] 1926 	inc	r0
      0007FE E6               [12] 1927 	mov	a,@r0
      0007FF C3               [12] 1928 	clr	c
      000800 13               [12] 1929 	rrc	a
      000801 F6               [12] 1930 	mov	@r0,a
      000802 18               [12] 1931 	dec	r0
      000803 E6               [12] 1932 	mov	a,@r0
      000804 13               [12] 1933 	rrc	a
      000805 F6               [12] 1934 	mov	@r0,a
      000806 18               [12] 1935 	dec	r0
      000807 E6               [12] 1936 	mov	a,@r0
      000808 13               [12] 1937 	rrc	a
      000809 F6               [12] 1938 	mov	@r0,a
      00080A 18               [12] 1939 	dec	r0
      00080B E6               [12] 1940 	mov	a,@r0
      00080C 13               [12] 1941 	rrc	a
      00080D F6               [12] 1942 	mov	@r0,a
      00080E E5*00            [12] 1943 	mov	a,_bp
      000810 24 1D            [12] 1944 	add	a,#0x1d
      000812 F8               [12] 1945 	mov	r0,a
      000813 E6               [12] 1946 	mov	a,@r0
      000814 08               [12] 1947 	inc	r0
      000815 46               [12] 1948 	orl	a,@r0
      000816 08               [12] 1949 	inc	r0
      000817 46               [12] 1950 	orl	a,@r0
      000818 08               [12] 1951 	inc	r0
      000819 46               [12] 1952 	orl	a,@r0
      00081A 70 8F            [24] 1953 	jnz	00359$
                                   1954 ;	calc.c:128: printstr("\r\n");
      00081C 7Fr00            [12] 1955 	mov	r7,#___str_0
      00081E 7Es00            [12] 1956 	mov	r6,#(___str_0 >> 8)
      000820 7D 80            [12] 1957 	mov	r5,#0x80
                                   1958 ;	calc.c:51: return;
      000822                       1959 00362$:
                                   1960 ;	calc.c:49: for (; *s; s++) putchar(*s);
      000822 8F 82            [24] 1961 	mov	dpl,r7
      000824 8E 83            [24] 1962 	mov	dph,r6
      000826 8D F0            [24] 1963 	mov	b,r5
      000828 12r00r00         [24] 1964 	lcall	__gptrget
      00082B FC               [12] 1965 	mov	r4,a
      00082C 70 03            [24] 1966 	jnz	01267$
      00082E 02r28r30         [24] 1967 	ljmp	00249$
      000831                       1968 01267$:
      000831 7B 00            [12] 1969 	mov	r3,#0x00
      000833 8C 82            [24] 1970 	mov	dpl,r4
      000835 8B 83            [24] 1971 	mov	dph,r3
      000837 12r00r00         [24] 1972 	lcall	_putchar
      00083A 0F               [12] 1973 	inc	r7
                                   1974 ;	calc.c:131: case 'P':
      00083B BF 00 E4         [24] 1975 	cjne	r7,#0x00,00362$
      00083E 0E               [12] 1976 	inc	r6
      00083F 80 E1            [24] 1977 	sjmp	00362$
      000841                       1978 00105$:
                                   1979 ;	calc.c:132: printstr("\r\n");
      000841 7Fr00            [12] 1980 	mov	r7,#___str_0
      000843 7Es00            [12] 1981 	mov	r6,#(___str_0 >> 8)
      000845 7D 80            [12] 1982 	mov	r5,#0x80
                                   1983 ;	calc.c:51: return;
      000847                       1984 00365$:
                                   1985 ;	calc.c:49: for (; *s; s++) putchar(*s);
      000847 8F 82            [24] 1986 	mov	dpl,r7
      000849 8E 83            [24] 1987 	mov	dph,r6
      00084B 8D F0            [24] 1988 	mov	b,r5
      00084D 12r00r00         [24] 1989 	lcall	__gptrget
      000850 FC               [12] 1990 	mov	r4,a
      000851 60 10            [24] 1991 	jz	00261$
      000853 7B 00            [12] 1992 	mov	r3,#0x00
      000855 8C 82            [24] 1993 	mov	dpl,r4
      000857 8B 83            [24] 1994 	mov	dph,r3
      000859 12r00r00         [24] 1995 	lcall	_putchar
      00085C 0F               [12] 1996 	inc	r7
                                   1997 ;	calc.c:132: printstr("\r\n");
      00085D BF 00 E7         [24] 1998 	cjne	r7,#0x00,00365$
      000860 0E               [12] 1999 	inc	r6
      000861 80 E4            [24] 2000 	sjmp	00365$
      000863                       2001 00261$:
                                   2002 ;	calc.c:133: if (!stack_iter_peek(ctx->ps, dump_peek, ctx)) printstr("stack underflow\r\n");
      000863 E5*00            [12] 2003 	mov	a,_bp
      000865 24 12            [12] 2004 	add	a,#0x12
      000867 F8               [12] 2005 	mov	r0,a
      000868 86 07            [24] 2006 	mov	ar7,@r0
      00086A 08               [12] 2007 	inc	r0
      00086B 86 06            [24] 2008 	mov	ar6,@r0
      00086D 08               [12] 2009 	inc	r0
      00086E 86 05            [24] 2010 	mov	ar5,@r0
      000870 E5*00            [12] 2011 	mov	a,_bp
      000872 24 12            [12] 2012 	add	a,#0x12
      000874 F8               [12] 2013 	mov	r0,a
      000875 74 11            [12] 2014 	mov	a,#0x11
      000877 26               [12] 2015 	add	a,@r0
      000878 FA               [12] 2016 	mov	r2,a
      000879 74 40            [12] 2017 	mov	a,#0x40
      00087B 08               [12] 2018 	inc	r0
      00087C 36               [12] 2019 	addc	a,@r0
      00087D FB               [12] 2020 	mov	r3,a
      00087E 08               [12] 2021 	inc	r0
      00087F 86 04            [24] 2022 	mov	ar4,@r0
      000881 8A 82            [24] 2023 	mov	dpl,r2
      000883 8B 83            [24] 2024 	mov	dph,r3
      000885 8C F0            [24] 2025 	mov	b,r4
      000887 12r00r00         [24] 2026 	lcall	__gptrget
      00088A FA               [12] 2027 	mov	r2,a
      00088B A3               [24] 2028 	inc	dptr
      00088C 12r00r00         [24] 2029 	lcall	__gptrget
      00088F FB               [12] 2030 	mov	r3,a
      000890 A3               [24] 2031 	inc	dptr
      000891 12r00r00         [24] 2032 	lcall	__gptrget
      000894 FC               [12] 2033 	mov	r4,a
      000895 C0 07            [24] 2034 	push	ar7
      000897 C0 06            [24] 2035 	push	ar6
      000899 C0 05            [24] 2036 	push	ar5
      00089B 74r77            [12] 2037 	mov	a,#_dump_peek
      00089D C0 E0            [24] 2038 	push	acc
      00089F 74s04            [12] 2039 	mov	a,#(_dump_peek >> 8)
      0008A1 C0 E0            [24] 2040 	push	acc
      0008A3 8A 82            [24] 2041 	mov	dpl,r2
      0008A5 8B 83            [24] 2042 	mov	dph,r3
      0008A7 8C F0            [24] 2043 	mov	b,r4
      0008A9 12r00r00         [24] 2044 	lcall	_stack_iter_peek
      0008AC AB 82            [24] 2045 	mov	r3,dpl
      0008AE AC 83            [24] 2046 	mov	r4,dph
      0008B0 E5 81            [12] 2047 	mov	a,sp
      0008B2 24 FB            [12] 2048 	add	a,#0xfb
      0008B4 F5 81            [12] 2049 	mov	sp,a
      0008B6 EB               [12] 2050 	mov	a,r3
      0008B7 4C               [12] 2051 	orl	a,r4
      0008B8 60 03            [24] 2052 	jz	01271$
      0008BA 02r28r30         [24] 2053 	ljmp	00249$
      0008BD                       2054 01271$:
      0008BD 7Fr03            [12] 2055 	mov	r7,#___str_1
      0008BF 7Es00            [12] 2056 	mov	r6,#(___str_1 >> 8)
      0008C1 7D 80            [12] 2057 	mov	r5,#0x80
                                   2058 ;	calc.c:51: return;
      0008C3                       2059 00368$:
                                   2060 ;	calc.c:49: for (; *s; s++) putchar(*s);
      0008C3 8F 82            [24] 2061 	mov	dpl,r7
      0008C5 8E 83            [24] 2062 	mov	dph,r6
      0008C7 8D F0            [24] 2063 	mov	b,r5
      0008C9 12r00r00         [24] 2064 	lcall	__gptrget
      0008CC FC               [12] 2065 	mov	r4,a
      0008CD 70 03            [24] 2066 	jnz	01272$
      0008CF 02r28r30         [24] 2067 	ljmp	00249$
      0008D2                       2068 01272$:
      0008D2 7B 00            [12] 2069 	mov	r3,#0x00
      0008D4 8C 82            [24] 2070 	mov	dpl,r4
      0008D6 8B 83            [24] 2071 	mov	dph,r3
      0008D8 12r00r00         [24] 2072 	lcall	_putchar
      0008DB 0F               [12] 2073 	inc	r7
                                   2074 ;	calc.c:136: case 'v':
      0008DC BF 00 E4         [24] 2075 	cjne	r7,#0x00,00368$
      0008DF 0E               [12] 2076 	inc	r6
      0008E0 80 E1            [24] 2077 	sjmp	00368$
      0008E2                       2078 00109$:
                                   2079 ;	calc.c:137: printstr("\r\n");
      0008E2 7Fr00            [12] 2080 	mov	r7,#___str_0
      0008E4 7Es00            [12] 2081 	mov	r6,#(___str_0 >> 8)
      0008E6 7D 80            [12] 2082 	mov	r5,#0x80
                                   2083 ;	calc.c:51: return;
      0008E8                       2084 00371$:
                                   2085 ;	calc.c:49: for (; *s; s++) putchar(*s);
      0008E8 8F 82            [24] 2086 	mov	dpl,r7
      0008EA 8E 83            [24] 2087 	mov	dph,r6
      0008EC 8D F0            [24] 2088 	mov	b,r5
      0008EE 12r00r00         [24] 2089 	lcall	__gptrget
      0008F1 FC               [12] 2090 	mov	r4,a
      0008F2 60 10            [24] 2091 	jz	00265$
      0008F4 7B 00            [12] 2092 	mov	r3,#0x00
      0008F6 8C 82            [24] 2093 	mov	dpl,r4
      0008F8 8B 83            [24] 2094 	mov	dph,r3
      0008FA 12r00r00         [24] 2095 	lcall	_putchar
      0008FD 0F               [12] 2096 	inc	r7
                                   2097 ;	calc.c:137: printstr("\r\n");
      0008FE BF 00 E7         [24] 2098 	cjne	r7,#0x00,00371$
      000901 0E               [12] 2099 	inc	r6
      000902 80 E4            [24] 2100 	sjmp	00371$
      000904                       2101 00265$:
                                   2102 ;	calc.c:138: if (!stack_pop(ctx->ps, &d0)) printstr("stack underflow\r\n");
      000904 E5*00            [12] 2103 	mov	a,_bp
      000906 24 15            [12] 2104 	add	a,#0x15
      000908 FF               [12] 2105 	mov	r7,a
      000909 7E 00            [12] 2106 	mov	r6,#0x00
      00090B 7D 40            [12] 2107 	mov	r5,#0x40
      00090D E5*00            [12] 2108 	mov	a,_bp
      00090F 24 12            [12] 2109 	add	a,#0x12
      000911 F8               [12] 2110 	mov	r0,a
      000912 74 11            [12] 2111 	mov	a,#0x11
      000914 26               [12] 2112 	add	a,@r0
      000915 FA               [12] 2113 	mov	r2,a
      000916 ED               [12] 2114 	mov	a,r5
      000917 08               [12] 2115 	inc	r0
      000918 36               [12] 2116 	addc	a,@r0
      000919 FB               [12] 2117 	mov	r3,a
      00091A 08               [12] 2118 	inc	r0
      00091B 86 04            [24] 2119 	mov	ar4,@r0
      00091D 8A 82            [24] 2120 	mov	dpl,r2
      00091F 8B 83            [24] 2121 	mov	dph,r3
      000921 8C F0            [24] 2122 	mov	b,r4
      000923 12r00r00         [24] 2123 	lcall	__gptrget
      000926 FA               [12] 2124 	mov	r2,a
      000927 A3               [24] 2125 	inc	dptr
      000928 12r00r00         [24] 2126 	lcall	__gptrget
      00092B FB               [12] 2127 	mov	r3,a
      00092C A3               [24] 2128 	inc	dptr
      00092D 12r00r00         [24] 2129 	lcall	__gptrget
      000930 FC               [12] 2130 	mov	r4,a
      000931 C0 07            [24] 2131 	push	ar7
      000933 C0 06            [24] 2132 	push	ar6
      000935 C0 05            [24] 2133 	push	ar5
      000937 8A 82            [24] 2134 	mov	dpl,r2
      000939 8B 83            [24] 2135 	mov	dph,r3
      00093B 8C F0            [24] 2136 	mov	b,r4
      00093D 12r00r00         [24] 2137 	lcall	_stack_pop
      000940 AB 82            [24] 2138 	mov	r3,dpl
      000942 AC 83            [24] 2139 	mov	r4,dph
      000944 15 81            [12] 2140 	dec	sp
      000946 15 81            [12] 2141 	dec	sp
      000948 15 81            [12] 2142 	dec	sp
      00094A EB               [12] 2143 	mov	a,r3
      00094B 4C               [12] 2144 	orl	a,r4
      00094C 70 25            [24] 2145 	jnz	00111$
      00094E 7Fr03            [12] 2146 	mov	r7,#___str_1
      000950 7Es00            [12] 2147 	mov	r6,#(___str_1 >> 8)
      000952 7D 80            [12] 2148 	mov	r5,#0x80
                                   2149 ;	calc.c:51: return;
      000954                       2150 00374$:
                                   2151 ;	calc.c:49: for (; *s; s++) putchar(*s);
      000954 8F 82            [24] 2152 	mov	dpl,r7
      000956 8E 83            [24] 2153 	mov	dph,r6
      000958 8D F0            [24] 2154 	mov	b,r5
      00095A 12r00r00         [24] 2155 	lcall	__gptrget
      00095D FC               [12] 2156 	mov	r4,a
      00095E 70 03            [24] 2157 	jnz	01277$
      000960 02r28r30         [24] 2158 	ljmp	00249$
      000963                       2159 01277$:
      000963 7B 00            [12] 2160 	mov	r3,#0x00
      000965 8C 82            [24] 2161 	mov	dpl,r4
      000967 8B 83            [24] 2162 	mov	dph,r3
      000969 12r00r00         [24] 2163 	lcall	_putchar
      00096C 0F               [12] 2164 	inc	r7
                                   2165 ;	calc.c:138: if (!stack_pop(ctx->ps, &d0)) printstr("stack underflow\r\n");
      00096D BF 00 E4         [24] 2166 	cjne	r7,#0x00,00374$
      000970 0E               [12] 2167 	inc	r6
      000971 80 E1            [24] 2168 	sjmp	00374$
      000973                       2169 00111$:
                                   2170 ;	calc.c:140: printstr("VT ");
      000973 7Fr34            [12] 2171 	mov	r7,#___str_7
      000975 7Es00            [12] 2172 	mov	r6,#(___str_7 >> 8)
      000977 7D 80            [12] 2173 	mov	r5,#0x80
                                   2174 ;	calc.c:51: return;
      000979                       2175 00377$:
                                   2176 ;	calc.c:49: for (; *s; s++) putchar(*s);
      000979 8F 82            [24] 2177 	mov	dpl,r7
      00097B 8E 83            [24] 2178 	mov	dph,r6
      00097D 8D F0            [24] 2179 	mov	b,r5
      00097F 12r00r00         [24] 2180 	lcall	__gptrget
      000982 FC               [12] 2181 	mov	r4,a
      000983 60 10            [24] 2182 	jz	00269$
      000985 7B 00            [12] 2183 	mov	r3,#0x00
      000987 8C 82            [24] 2184 	mov	dpl,r4
      000989 8B 83            [24] 2185 	mov	dph,r3
      00098B 12r00r00         [24] 2186 	lcall	_putchar
      00098E 0F               [12] 2187 	inc	r7
                                   2188 ;	calc.c:140: printstr("VT ");
      00098F BF 00 E7         [24] 2189 	cjne	r7,#0x00,00377$
      000992 0E               [12] 2190 	inc	r6
      000993 80 E4            [24] 2191 	sjmp	00377$
      000995                       2192 00269$:
                                   2193 ;	calc.c:141: printf("% 11ld / ", d0);
      000995 E5*00            [12] 2194 	mov	a,_bp
      000997 24 15            [12] 2195 	add	a,#0x15
      000999 F8               [12] 2196 	mov	r0,a
      00099A E6               [12] 2197 	mov	a,@r0
      00099B C0 E0            [24] 2198 	push	acc
      00099D 08               [12] 2199 	inc	r0
      00099E E6               [12] 2200 	mov	a,@r0
      00099F C0 E0            [24] 2201 	push	acc
      0009A1 08               [12] 2202 	inc	r0
      0009A2 E6               [12] 2203 	mov	a,@r0
      0009A3 C0 E0            [24] 2204 	push	acc
      0009A5 08               [12] 2205 	inc	r0
      0009A6 E6               [12] 2206 	mov	a,@r0
      0009A7 C0 E0            [24] 2207 	push	acc
      0009A9 74r19            [12] 2208 	mov	a,#___str_3
      0009AB C0 E0            [24] 2209 	push	acc
      0009AD 74s00            [12] 2210 	mov	a,#(___str_3 >> 8)
      0009AF C0 E0            [24] 2211 	push	acc
      0009B1 74 80            [12] 2212 	mov	a,#0x80
      0009B3 C0 E0            [24] 2213 	push	acc
      0009B5 12r00r00         [24] 2214 	lcall	_printf
      0009B8 E5 81            [12] 2215 	mov	a,sp
      0009BA 24 F9            [12] 2216 	add	a,#0xf9
      0009BC F5 81            [12] 2217 	mov	sp,a
                                   2218 ;	calc.c:142: printf("%08lx / ", d0);
      0009BE E5*00            [12] 2219 	mov	a,_bp
      0009C0 24 15            [12] 2220 	add	a,#0x15
      0009C2 F8               [12] 2221 	mov	r0,a
      0009C3 E6               [12] 2222 	mov	a,@r0
      0009C4 C0 E0            [24] 2223 	push	acc
      0009C6 08               [12] 2224 	inc	r0
      0009C7 E6               [12] 2225 	mov	a,@r0
      0009C8 C0 E0            [24] 2226 	push	acc
      0009CA 08               [12] 2227 	inc	r0
      0009CB E6               [12] 2228 	mov	a,@r0
      0009CC C0 E0            [24] 2229 	push	acc
      0009CE 08               [12] 2230 	inc	r0
      0009CF E6               [12] 2231 	mov	a,@r0
      0009D0 C0 E0            [24] 2232 	push	acc
      0009D2 74r23            [12] 2233 	mov	a,#___str_4
      0009D4 C0 E0            [24] 2234 	push	acc
      0009D6 74s00            [12] 2235 	mov	a,#(___str_4 >> 8)
      0009D8 C0 E0            [24] 2236 	push	acc
      0009DA 74 80            [12] 2237 	mov	a,#0x80
      0009DC C0 E0            [24] 2238 	push	acc
      0009DE 12r00r00         [24] 2239 	lcall	_printf
      0009E1 E5 81            [12] 2240 	mov	a,sp
      0009E3 24 F9            [12] 2241 	add	a,#0xf9
      0009E5 F5 81            [12] 2242 	mov	sp,a
                                   2243 ;	calc.c:143: printbin(d0);
      0009E7 E5*00            [12] 2244 	mov	a,_bp
      0009E9 24 15            [12] 2245 	add	a,#0x15
      0009EB F8               [12] 2246 	mov	r0,a
      0009EC 86 07            [24] 2247 	mov	ar7,@r0
      0009EE 08               [12] 2248 	inc	r0
      0009EF 86 06            [24] 2249 	mov	ar6,@r0
      0009F1 08               [12] 2250 	inc	r0
      0009F2 86 05            [24] 2251 	mov	ar5,@r0
      0009F4 08               [12] 2252 	inc	r0
      0009F5 86 04            [24] 2253 	mov	ar4,@r0
      0009F7 8C 02            [24] 2254 	mov	ar2,r4
                                   2255 ;	calc.c:57: for (mask = 0x80000000lu; mask; mask >>= 1)
      0009F9 E5*00            [12] 2256 	mov	a,_bp
      0009FB 24 1D            [12] 2257 	add	a,#0x1d
      0009FD F8               [12] 2258 	mov	r0,a
      0009FE E4               [12] 2259 	clr	a
      0009FF F6               [12] 2260 	mov	@r0,a
      000A00 08               [12] 2261 	inc	r0
      000A01 F6               [12] 2262 	mov	@r0,a
      000A02 08               [12] 2263 	inc	r0
      000A03 F6               [12] 2264 	mov	@r0,a
      000A04 08               [12] 2265 	inc	r0
      000A05 76 80            [12] 2266 	mov	@r0,#0x80
      000A07                       2267 00379$:
                                   2268 ;	calc.c:58: (void)putchar((d & mask) ? (int)'1' : (int)'0');
      000A07 E5*00            [12] 2269 	mov	a,_bp
      000A09 24 07            [12] 2270 	add	a,#0x07
      000A0B F8               [12] 2271 	mov	r0,a
      000A0C A6 07            [24] 2272 	mov	@r0,ar7
      000A0E 08               [12] 2273 	inc	r0
      000A0F A6 06            [24] 2274 	mov	@r0,ar6
      000A11 08               [12] 2275 	inc	r0
      000A12 A6 05            [24] 2276 	mov	@r0,ar5
      000A14 08               [12] 2277 	inc	r0
      000A15 A6 02            [24] 2278 	mov	@r0,ar2
      000A17 E5*00            [12] 2279 	mov	a,_bp
      000A19 24 07            [12] 2280 	add	a,#0x07
      000A1B F8               [12] 2281 	mov	r0,a
      000A1C E5*00            [12] 2282 	mov	a,_bp
      000A1E 24 1D            [12] 2283 	add	a,#0x1d
      000A20 F9               [12] 2284 	mov	r1,a
      000A21 E7               [12] 2285 	mov	a,@r1
      000A22 56               [12] 2286 	anl	a,@r0
      000A23 F6               [12] 2287 	mov	@r0,a
      000A24 09               [12] 2288 	inc	r1
      000A25 E7               [12] 2289 	mov	a,@r1
      000A26 08               [12] 2290 	inc	r0
      000A27 56               [12] 2291 	anl	a,@r0
      000A28 F6               [12] 2292 	mov	@r0,a
      000A29 09               [12] 2293 	inc	r1
      000A2A E7               [12] 2294 	mov	a,@r1
      000A2B 08               [12] 2295 	inc	r0
      000A2C 56               [12] 2296 	anl	a,@r0
      000A2D F6               [12] 2297 	mov	@r0,a
      000A2E 09               [12] 2298 	inc	r1
      000A2F E7               [12] 2299 	mov	a,@r1
      000A30 08               [12] 2300 	inc	r0
      000A31 56               [12] 2301 	anl	a,@r0
      000A32 F6               [12] 2302 	mov	@r0,a
      000A33 E5*00            [12] 2303 	mov	a,_bp
      000A35 24 07            [12] 2304 	add	a,#0x07
      000A37 F8               [12] 2305 	mov	r0,a
      000A38 E6               [12] 2306 	mov	a,@r0
      000A39 08               [12] 2307 	inc	r0
      000A3A 46               [12] 2308 	orl	a,@r0
      000A3B 08               [12] 2309 	inc	r0
      000A3C 46               [12] 2310 	orl	a,@r0
      000A3D 08               [12] 2311 	inc	r0
      000A3E 46               [12] 2312 	orl	a,@r0
      000A3F 60 06            [24] 2313 	jz	00502$
      000A41 7B 31            [12] 2314 	mov	r3,#0x31
      000A43 7C 00            [12] 2315 	mov	r4,#0x00
      000A45 80 04            [24] 2316 	sjmp	00503$
      000A47                       2317 00502$:
      000A47 7B 30            [12] 2318 	mov	r3,#0x30
      000A49 7C 00            [12] 2319 	mov	r4,#0x00
      000A4B                       2320 00503$:
      000A4B 8B 82            [24] 2321 	mov	dpl,r3
      000A4D 8C 83            [24] 2322 	mov	dph,r4
      000A4F 12r00r00         [24] 2323 	lcall	_putchar
                                   2324 ;	calc.c:57: for (mask = 0x80000000lu; mask; mask >>= 1)
      000A52 E5*00            [12] 2325 	mov	a,_bp
      000A54 24 1D            [12] 2326 	add	a,#0x1d
      000A56 F8               [12] 2327 	mov	r0,a
      000A57 08               [12] 2328 	inc	r0
      000A58 08               [12] 2329 	inc	r0
      000A59 08               [12] 2330 	inc	r0
      000A5A E6               [12] 2331 	mov	a,@r0
      000A5B C3               [12] 2332 	clr	c
      000A5C 13               [12] 2333 	rrc	a
      000A5D F6               [12] 2334 	mov	@r0,a
      000A5E 18               [12] 2335 	dec	r0
      000A5F E6               [12] 2336 	mov	a,@r0
      000A60 13               [12] 2337 	rrc	a
      000A61 F6               [12] 2338 	mov	@r0,a
      000A62 18               [12] 2339 	dec	r0
      000A63 E6               [12] 2340 	mov	a,@r0
      000A64 13               [12] 2341 	rrc	a
      000A65 F6               [12] 2342 	mov	@r0,a
      000A66 18               [12] 2343 	dec	r0
      000A67 E6               [12] 2344 	mov	a,@r0
      000A68 13               [12] 2345 	rrc	a
      000A69 F6               [12] 2346 	mov	@r0,a
      000A6A E5*00            [12] 2347 	mov	a,_bp
      000A6C 24 1D            [12] 2348 	add	a,#0x1d
      000A6E F8               [12] 2349 	mov	r0,a
      000A6F E6               [12] 2350 	mov	a,@r0
      000A70 08               [12] 2351 	inc	r0
      000A71 46               [12] 2352 	orl	a,@r0
      000A72 08               [12] 2353 	inc	r0
      000A73 46               [12] 2354 	orl	a,@r0
      000A74 08               [12] 2355 	inc	r0
      000A75 46               [12] 2356 	orl	a,@r0
      000A76 70 8F            [24] 2357 	jnz	00379$
                                   2358 ;	calc.c:144: printstr("\r\n");
      000A78 7Fr00            [12] 2359 	mov	r7,#___str_0
      000A7A 7Es00            [12] 2360 	mov	r6,#(___str_0 >> 8)
      000A7C 7D 80            [12] 2361 	mov	r5,#0x80
                                   2362 ;	calc.c:51: return;
      000A7E                       2363 00382$:
                                   2364 ;	calc.c:49: for (; *s; s++) putchar(*s);
      000A7E 8F 82            [24] 2365 	mov	dpl,r7
      000A80 8E 83            [24] 2366 	mov	dph,r6
      000A82 8D F0            [24] 2367 	mov	b,r5
      000A84 12r00r00         [24] 2368 	lcall	__gptrget
      000A87 FC               [12] 2369 	mov	r4,a
      000A88 70 03            [24] 2370 	jnz	01283$
      000A8A 02r28r30         [24] 2371 	ljmp	00249$
      000A8D                       2372 01283$:
      000A8D 7B 00            [12] 2373 	mov	r3,#0x00
      000A8F 8C 82            [24] 2374 	mov	dpl,r4
      000A91 8B 83            [24] 2375 	mov	dph,r3
      000A93 12r00r00         [24] 2376 	lcall	_putchar
      000A96 0F               [12] 2377 	inc	r7
                                   2378 ;	calc.c:147: case 'V':
      000A97 BF 00 E4         [24] 2379 	cjne	r7,#0x00,00382$
      000A9A 0E               [12] 2380 	inc	r6
      000A9B 80 E1            [24] 2381 	sjmp	00382$
      000A9D                       2382 00113$:
                                   2383 ;	calc.c:148: printstr("\r\n");
      000A9D 7Fr00            [12] 2384 	mov	r7,#___str_0
      000A9F 7Es00            [12] 2385 	mov	r6,#(___str_0 >> 8)
      000AA1 7D 80            [12] 2386 	mov	r5,#0x80
                                   2387 ;	calc.c:51: return;
      000AA3                       2388 00385$:
                                   2389 ;	calc.c:49: for (; *s; s++) putchar(*s);
      000AA3 8F 82            [24] 2390 	mov	dpl,r7
      000AA5 8E 83            [24] 2391 	mov	dph,r6
      000AA7 8D F0            [24] 2392 	mov	b,r5
      000AA9 12r00r00         [24] 2393 	lcall	__gptrget
      000AAC FC               [12] 2394 	mov	r4,a
      000AAD 60 10            [24] 2395 	jz	00275$
      000AAF 7B 00            [12] 2396 	mov	r3,#0x00
      000AB1 8C 82            [24] 2397 	mov	dpl,r4
      000AB3 8B 83            [24] 2398 	mov	dph,r3
      000AB5 12r00r00         [24] 2399 	lcall	_putchar
      000AB8 0F               [12] 2400 	inc	r7
                                   2401 ;	calc.c:148: printstr("\r\n");
      000AB9 BF 00 E7         [24] 2402 	cjne	r7,#0x00,00385$
      000ABC 0E               [12] 2403 	inc	r6
      000ABD 80 E4            [24] 2404 	sjmp	00385$
      000ABF                       2405 00275$:
                                   2406 ;	calc.c:149: (void)dump_pop(_ctx, delta);
      000ABF E5*00            [12] 2407 	mov	a,_bp
      000AC1 24 FB            [12] 2408 	add	a,#0xfb
      000AC3 F8               [12] 2409 	mov	r0,a
      000AC4 E6               [12] 2410 	mov	a,@r0
      000AC5 C0 E0            [24] 2411 	push	acc
      000AC7 08               [12] 2412 	inc	r0
      000AC8 E6               [12] 2413 	mov	a,@r0
      000AC9 C0 E0            [24] 2414 	push	acc
      000ACB 08               [12] 2415 	inc	r0
      000ACC E6               [12] 2416 	mov	a,@r0
      000ACD C0 E0            [24] 2417 	push	acc
      000ACF A8*00            [24] 2418 	mov	r0,_bp
      000AD1 08               [12] 2419 	inc	r0
      000AD2 86 82            [24] 2420 	mov	dpl,@r0
      000AD4 08               [12] 2421 	inc	r0
      000AD5 86 83            [24] 2422 	mov	dph,@r0
      000AD7 08               [12] 2423 	inc	r0
      000AD8 86 F0            [24] 2424 	mov	b,@r0
      000ADA 12r01r93         [24] 2425 	lcall	_dump_pop
      000ADD 15 81            [12] 2426 	dec	sp
      000ADF 15 81            [12] 2427 	dec	sp
      000AE1 15 81            [12] 2428 	dec	sp
                                   2429 ;	calc.c:150: break;
      000AE3 02r28r30         [24] 2430 	ljmp	00249$
                                   2431 ;	calc.c:151: case 'x':
      000AE6                       2432 00114$:
                                   2433 ;	calc.c:152: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      000AE6 E5*00            [12] 2434 	mov	a,_bp
      000AE8 24 15            [12] 2435 	add	a,#0x15
      000AEA FF               [12] 2436 	mov	r7,a
      000AEB 7E 00            [12] 2437 	mov	r6,#0x00
      000AED 7D 40            [12] 2438 	mov	r5,#0x40
      000AEF E5*00            [12] 2439 	mov	a,_bp
      000AF1 24 12            [12] 2440 	add	a,#0x12
      000AF3 F8               [12] 2441 	mov	r0,a
      000AF4 E5*00            [12] 2442 	mov	a,_bp
      000AF6 24 07            [12] 2443 	add	a,#0x07
      000AF8 F9               [12] 2444 	mov	r1,a
      000AF9 74 11            [12] 2445 	mov	a,#0x11
      000AFB 26               [12] 2446 	add	a,@r0
      000AFC F7               [12] 2447 	mov	@r1,a
      000AFD 74 40            [12] 2448 	mov	a,#0x40
      000AFF 08               [12] 2449 	inc	r0
      000B00 36               [12] 2450 	addc	a,@r0
      000B01 09               [12] 2451 	inc	r1
      000B02 F7               [12] 2452 	mov	@r1,a
      000B03 08               [12] 2453 	inc	r0
      000B04 09               [12] 2454 	inc	r1
      000B05 E6               [12] 2455 	mov	a,@r0
      000B06 F7               [12] 2456 	mov	@r1,a
      000B07 E5*00            [12] 2457 	mov	a,_bp
      000B09 24 07            [12] 2458 	add	a,#0x07
      000B0B F8               [12] 2459 	mov	r0,a
      000B0C 86 82            [24] 2460 	mov	dpl,@r0
      000B0E 08               [12] 2461 	inc	r0
      000B0F 86 83            [24] 2462 	mov	dph,@r0
      000B11 08               [12] 2463 	inc	r0
      000B12 86 F0            [24] 2464 	mov	b,@r0
      000B14 12r00r00         [24] 2465 	lcall	__gptrget
      000B17 FA               [12] 2466 	mov	r2,a
      000B18 A3               [24] 2467 	inc	dptr
      000B19 12r00r00         [24] 2468 	lcall	__gptrget
      000B1C FB               [12] 2469 	mov	r3,a
      000B1D A3               [24] 2470 	inc	dptr
      000B1E 12r00r00         [24] 2471 	lcall	__gptrget
      000B21 FC               [12] 2472 	mov	r4,a
      000B22 C0 07            [24] 2473 	push	ar7
      000B24 C0 06            [24] 2474 	push	ar6
      000B26 C0 05            [24] 2475 	push	ar5
      000B28 8A 82            [24] 2476 	mov	dpl,r2
      000B2A 8B 83            [24] 2477 	mov	dph,r3
      000B2C 8C F0            [24] 2478 	mov	b,r4
      000B2E 12r00r00         [24] 2479 	lcall	_stack_pop
      000B31 AB 82            [24] 2480 	mov	r3,dpl
      000B33 AC 83            [24] 2481 	mov	r4,dph
      000B35 15 81            [12] 2482 	dec	sp
      000B37 15 81            [12] 2483 	dec	sp
      000B39 15 81            [12] 2484 	dec	sp
      000B3B EB               [12] 2485 	mov	a,r3
      000B3C 4C               [12] 2486 	orl	a,r4
      000B3D 70 25            [24] 2487 	jnz	00119$
      000B3F 7Fr38            [12] 2488 	mov	r7,#___str_8
      000B41 7Es00            [12] 2489 	mov	r6,#(___str_8 >> 8)
      000B43 7D 80            [12] 2490 	mov	r5,#0x80
                                   2491 ;	calc.c:51: return;
      000B45                       2492 00388$:
                                   2493 ;	calc.c:49: for (; *s; s++) putchar(*s);
      000B45 8F 82            [24] 2494 	mov	dpl,r7
      000B47 8E 83            [24] 2495 	mov	dph,r6
      000B49 8D F0            [24] 2496 	mov	b,r5
      000B4B 12r00r00         [24] 2497 	lcall	__gptrget
      000B4E FC               [12] 2498 	mov	r4,a
      000B4F 70 03            [24] 2499 	jnz	01288$
      000B51 02r28r30         [24] 2500 	ljmp	00249$
      000B54                       2501 01288$:
      000B54 7B 00            [12] 2502 	mov	r3,#0x00
      000B56 8C 82            [24] 2503 	mov	dpl,r4
      000B58 8B 83            [24] 2504 	mov	dph,r3
      000B5A 12r00r00         [24] 2505 	lcall	_putchar
      000B5D 0F               [12] 2506 	inc	r7
                                   2507 ;	calc.c:152: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      000B5E BF 00 E4         [24] 2508 	cjne	r7,#0x00,00388$
      000B61 0E               [12] 2509 	inc	r6
      000B62 80 E1            [24] 2510 	sjmp	00388$
      000B64                       2511 00119$:
                                   2512 ;	calc.c:153: else if (!stack_pop(ctx->ps, &d1)) {
      000B64 E5*00            [12] 2513 	mov	a,_bp
      000B66 24 19            [12] 2514 	add	a,#0x19
      000B68 FF               [12] 2515 	mov	r7,a
      000B69 7E 00            [12] 2516 	mov	r6,#0x00
      000B6B 7D 40            [12] 2517 	mov	r5,#0x40
      000B6D E5*00            [12] 2518 	mov	a,_bp
      000B6F 24 07            [12] 2519 	add	a,#0x07
      000B71 F8               [12] 2520 	mov	r0,a
      000B72 86 82            [24] 2521 	mov	dpl,@r0
      000B74 08               [12] 2522 	inc	r0
      000B75 86 83            [24] 2523 	mov	dph,@r0
      000B77 08               [12] 2524 	inc	r0
      000B78 86 F0            [24] 2525 	mov	b,@r0
      000B7A 12r00r00         [24] 2526 	lcall	__gptrget
      000B7D FA               [12] 2527 	mov	r2,a
      000B7E A3               [24] 2528 	inc	dptr
      000B7F 12r00r00         [24] 2529 	lcall	__gptrget
      000B82 FB               [12] 2530 	mov	r3,a
      000B83 A3               [24] 2531 	inc	dptr
      000B84 12r00r00         [24] 2532 	lcall	__gptrget
      000B87 FC               [12] 2533 	mov	r4,a
      000B88 C0 07            [24] 2534 	push	ar7
      000B8A C0 06            [24] 2535 	push	ar6
      000B8C C0 05            [24] 2536 	push	ar5
      000B8E 8A 82            [24] 2537 	mov	dpl,r2
      000B90 8B 83            [24] 2538 	mov	dph,r3
      000B92 8C F0            [24] 2539 	mov	b,r4
      000B94 12r00r00         [24] 2540 	lcall	_stack_pop
      000B97 AB 82            [24] 2541 	mov	r3,dpl
      000B99 AC 83            [24] 2542 	mov	r4,dph
      000B9B 15 81            [12] 2543 	dec	sp
      000B9D 15 81            [12] 2544 	dec	sp
      000B9F 15 81            [12] 2545 	dec	sp
      000BA1 EB               [12] 2546 	mov	a,r3
      000BA2 4C               [12] 2547 	orl	a,r4
      000BA3 70 63            [24] 2548 	jnz	00116$
                                   2549 ;	calc.c:154: (void)stack_push(ctx->ps, d0);
      000BA5 E5*00            [12] 2550 	mov	a,_bp
      000BA7 24 07            [12] 2551 	add	a,#0x07
      000BA9 F8               [12] 2552 	mov	r0,a
      000BAA 86 82            [24] 2553 	mov	dpl,@r0
      000BAC 08               [12] 2554 	inc	r0
      000BAD 86 83            [24] 2555 	mov	dph,@r0
      000BAF 08               [12] 2556 	inc	r0
      000BB0 86 F0            [24] 2557 	mov	b,@r0
      000BB2 12r00r00         [24] 2558 	lcall	__gptrget
      000BB5 FA               [12] 2559 	mov	r2,a
      000BB6 A3               [24] 2560 	inc	dptr
      000BB7 12r00r00         [24] 2561 	lcall	__gptrget
      000BBA FB               [12] 2562 	mov	r3,a
      000BBB A3               [24] 2563 	inc	dptr
      000BBC 12r00r00         [24] 2564 	lcall	__gptrget
      000BBF FC               [12] 2565 	mov	r4,a
      000BC0 E5*00            [12] 2566 	mov	a,_bp
      000BC2 24 15            [12] 2567 	add	a,#0x15
      000BC4 F8               [12] 2568 	mov	r0,a
      000BC5 E6               [12] 2569 	mov	a,@r0
      000BC6 C0 E0            [24] 2570 	push	acc
      000BC8 08               [12] 2571 	inc	r0
      000BC9 E6               [12] 2572 	mov	a,@r0
      000BCA C0 E0            [24] 2573 	push	acc
      000BCC 08               [12] 2574 	inc	r0
      000BCD E6               [12] 2575 	mov	a,@r0
      000BCE C0 E0            [24] 2576 	push	acc
      000BD0 08               [12] 2577 	inc	r0
      000BD1 E6               [12] 2578 	mov	a,@r0
      000BD2 C0 E0            [24] 2579 	push	acc
      000BD4 8A 82            [24] 2580 	mov	dpl,r2
      000BD6 8B 83            [24] 2581 	mov	dph,r3
      000BD8 8C F0            [24] 2582 	mov	b,r4
      000BDA 12r00r00         [24] 2583 	lcall	_stack_push
      000BDD E5 81            [12] 2584 	mov	a,sp
      000BDF 24 FC            [12] 2585 	add	a,#0xfc
      000BE1 F5 81            [12] 2586 	mov	sp,a
                                   2587 ;	calc.c:155: printstr("\r\nstack underflow\r\n");
      000BE3 7Fr38            [12] 2588 	mov	r7,#___str_8
      000BE5 7Es00            [12] 2589 	mov	r6,#(___str_8 >> 8)
      000BE7 7D 80            [12] 2590 	mov	r5,#0x80
                                   2591 ;	calc.c:51: return;
      000BE9                       2592 00391$:
                                   2593 ;	calc.c:49: for (; *s; s++) putchar(*s);
      000BE9 8F 82            [24] 2594 	mov	dpl,r7
      000BEB 8E 83            [24] 2595 	mov	dph,r6
      000BED 8D F0            [24] 2596 	mov	b,r5
      000BEF 12r00r00         [24] 2597 	lcall	__gptrget
      000BF2 FC               [12] 2598 	mov	r4,a
      000BF3 70 03            [24] 2599 	jnz	01291$
      000BF5 02r28r30         [24] 2600 	ljmp	00249$
      000BF8                       2601 01291$:
      000BF8 7B 00            [12] 2602 	mov	r3,#0x00
      000BFA 8C 82            [24] 2603 	mov	dpl,r4
      000BFC 8B 83            [24] 2604 	mov	dph,r3
      000BFE 12r00r00         [24] 2605 	lcall	_putchar
      000C01 0F               [12] 2606 	inc	r7
                                   2607 ;	calc.c:155: printstr("\r\nstack underflow\r\n");
      000C02 BF 00 E4         [24] 2608 	cjne	r7,#0x00,00391$
      000C05 0E               [12] 2609 	inc	r6
      000C06 80 E1            [24] 2610 	sjmp	00391$
      000C08                       2611 00116$:
                                   2612 ;	calc.c:157: (void)stack_push(ctx->ps, d0);
      000C08 E5*00            [12] 2613 	mov	a,_bp
      000C0A 24 07            [12] 2614 	add	a,#0x07
      000C0C F8               [12] 2615 	mov	r0,a
      000C0D 86 82            [24] 2616 	mov	dpl,@r0
      000C0F 08               [12] 2617 	inc	r0
      000C10 86 83            [24] 2618 	mov	dph,@r0
      000C12 08               [12] 2619 	inc	r0
      000C13 86 F0            [24] 2620 	mov	b,@r0
      000C15 12r00r00         [24] 2621 	lcall	__gptrget
      000C18 FA               [12] 2622 	mov	r2,a
      000C19 A3               [24] 2623 	inc	dptr
      000C1A 12r00r00         [24] 2624 	lcall	__gptrget
      000C1D FB               [12] 2625 	mov	r3,a
      000C1E A3               [24] 2626 	inc	dptr
      000C1F 12r00r00         [24] 2627 	lcall	__gptrget
      000C22 FC               [12] 2628 	mov	r4,a
      000C23 E5*00            [12] 2629 	mov	a,_bp
      000C25 24 15            [12] 2630 	add	a,#0x15
      000C27 F8               [12] 2631 	mov	r0,a
      000C28 E6               [12] 2632 	mov	a,@r0
      000C29 C0 E0            [24] 2633 	push	acc
      000C2B 08               [12] 2634 	inc	r0
      000C2C E6               [12] 2635 	mov	a,@r0
      000C2D C0 E0            [24] 2636 	push	acc
      000C2F 08               [12] 2637 	inc	r0
      000C30 E6               [12] 2638 	mov	a,@r0
      000C31 C0 E0            [24] 2639 	push	acc
      000C33 08               [12] 2640 	inc	r0
      000C34 E6               [12] 2641 	mov	a,@r0
      000C35 C0 E0            [24] 2642 	push	acc
      000C37 8A 82            [24] 2643 	mov	dpl,r2
      000C39 8B 83            [24] 2644 	mov	dph,r3
      000C3B 8C F0            [24] 2645 	mov	b,r4
      000C3D 12r00r00         [24] 2646 	lcall	_stack_push
      000C40 E5 81            [12] 2647 	mov	a,sp
      000C42 24 FC            [12] 2648 	add	a,#0xfc
      000C44 F5 81            [12] 2649 	mov	sp,a
                                   2650 ;	calc.c:158: (void)stack_push(ctx->ps, d1);
      000C46 E5*00            [12] 2651 	mov	a,_bp
      000C48 24 07            [12] 2652 	add	a,#0x07
      000C4A F8               [12] 2653 	mov	r0,a
      000C4B 86 82            [24] 2654 	mov	dpl,@r0
      000C4D 08               [12] 2655 	inc	r0
      000C4E 86 83            [24] 2656 	mov	dph,@r0
      000C50 08               [12] 2657 	inc	r0
      000C51 86 F0            [24] 2658 	mov	b,@r0
      000C53 12r00r00         [24] 2659 	lcall	__gptrget
      000C56 FA               [12] 2660 	mov	r2,a
      000C57 A3               [24] 2661 	inc	dptr
      000C58 12r00r00         [24] 2662 	lcall	__gptrget
      000C5B FB               [12] 2663 	mov	r3,a
      000C5C A3               [24] 2664 	inc	dptr
      000C5D 12r00r00         [24] 2665 	lcall	__gptrget
      000C60 FC               [12] 2666 	mov	r4,a
      000C61 E5*00            [12] 2667 	mov	a,_bp
      000C63 24 19            [12] 2668 	add	a,#0x19
      000C65 F8               [12] 2669 	mov	r0,a
      000C66 E6               [12] 2670 	mov	a,@r0
      000C67 C0 E0            [24] 2671 	push	acc
      000C69 08               [12] 2672 	inc	r0
      000C6A E6               [12] 2673 	mov	a,@r0
      000C6B C0 E0            [24] 2674 	push	acc
      000C6D 08               [12] 2675 	inc	r0
      000C6E E6               [12] 2676 	mov	a,@r0
      000C6F C0 E0            [24] 2677 	push	acc
      000C71 08               [12] 2678 	inc	r0
      000C72 E6               [12] 2679 	mov	a,@r0
      000C73 C0 E0            [24] 2680 	push	acc
      000C75 8A 82            [24] 2681 	mov	dpl,r2
      000C77 8B 83            [24] 2682 	mov	dph,r3
      000C79 8C F0            [24] 2683 	mov	b,r4
      000C7B 12r00r00         [24] 2684 	lcall	_stack_push
      000C7E E5 81            [12] 2685 	mov	a,sp
      000C80 24 FC            [12] 2686 	add	a,#0xfc
      000C82 F5 81            [12] 2687 	mov	sp,a
                                   2688 ;	calc.c:160: break;
      000C84 02r28r30         [24] 2689 	ljmp	00249$
                                   2690 ;	calc.c:161: case 'm':
      000C87                       2691 00121$:
                                   2692 ;	calc.c:162: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      000C87 E5*00            [12] 2693 	mov	a,_bp
      000C89 24 15            [12] 2694 	add	a,#0x15
      000C8B FF               [12] 2695 	mov	r7,a
      000C8C 7E 00            [12] 2696 	mov	r6,#0x00
      000C8E 7D 40            [12] 2697 	mov	r5,#0x40
      000C90 E5*00            [12] 2698 	mov	a,_bp
      000C92 24 12            [12] 2699 	add	a,#0x12
      000C94 F8               [12] 2700 	mov	r0,a
      000C95 E5*00            [12] 2701 	mov	a,_bp
      000C97 24 07            [12] 2702 	add	a,#0x07
      000C99 F9               [12] 2703 	mov	r1,a
      000C9A 74 11            [12] 2704 	mov	a,#0x11
      000C9C 26               [12] 2705 	add	a,@r0
      000C9D F7               [12] 2706 	mov	@r1,a
      000C9E 74 40            [12] 2707 	mov	a,#0x40
      000CA0 08               [12] 2708 	inc	r0
      000CA1 36               [12] 2709 	addc	a,@r0
      000CA2 09               [12] 2710 	inc	r1
      000CA3 F7               [12] 2711 	mov	@r1,a
      000CA4 08               [12] 2712 	inc	r0
      000CA5 09               [12] 2713 	inc	r1
      000CA6 E6               [12] 2714 	mov	a,@r0
      000CA7 F7               [12] 2715 	mov	@r1,a
      000CA8 E5*00            [12] 2716 	mov	a,_bp
      000CAA 24 07            [12] 2717 	add	a,#0x07
      000CAC F8               [12] 2718 	mov	r0,a
      000CAD 86 82            [24] 2719 	mov	dpl,@r0
      000CAF 08               [12] 2720 	inc	r0
      000CB0 86 83            [24] 2721 	mov	dph,@r0
      000CB2 08               [12] 2722 	inc	r0
      000CB3 86 F0            [24] 2723 	mov	b,@r0
      000CB5 12r00r00         [24] 2724 	lcall	__gptrget
      000CB8 FA               [12] 2725 	mov	r2,a
      000CB9 A3               [24] 2726 	inc	dptr
      000CBA 12r00r00         [24] 2727 	lcall	__gptrget
      000CBD FB               [12] 2728 	mov	r3,a
      000CBE A3               [24] 2729 	inc	dptr
      000CBF 12r00r00         [24] 2730 	lcall	__gptrget
      000CC2 FC               [12] 2731 	mov	r4,a
      000CC3 C0 07            [24] 2732 	push	ar7
      000CC5 C0 06            [24] 2733 	push	ar6
      000CC7 C0 05            [24] 2734 	push	ar5
      000CC9 8A 82            [24] 2735 	mov	dpl,r2
      000CCB 8B 83            [24] 2736 	mov	dph,r3
      000CCD 8C F0            [24] 2737 	mov	b,r4
      000CCF 12r00r00         [24] 2738 	lcall	_stack_pop
      000CD2 AB 82            [24] 2739 	mov	r3,dpl
      000CD4 AC 83            [24] 2740 	mov	r4,dph
      000CD6 15 81            [12] 2741 	dec	sp
      000CD8 15 81            [12] 2742 	dec	sp
      000CDA 15 81            [12] 2743 	dec	sp
      000CDC EB               [12] 2744 	mov	a,r3
      000CDD 4C               [12] 2745 	orl	a,r4
      000CDE 70 25            [24] 2746 	jnz	00125$
      000CE0 7Fr38            [12] 2747 	mov	r7,#___str_8
      000CE2 7Es00            [12] 2748 	mov	r6,#(___str_8 >> 8)
      000CE4 7D 80            [12] 2749 	mov	r5,#0x80
                                   2750 ;	calc.c:51: return;
      000CE6                       2751 00394$:
                                   2752 ;	calc.c:49: for (; *s; s++) putchar(*s);
      000CE6 8F 82            [24] 2753 	mov	dpl,r7
      000CE8 8E 83            [24] 2754 	mov	dph,r6
      000CEA 8D F0            [24] 2755 	mov	b,r5
      000CEC 12r00r00         [24] 2756 	lcall	__gptrget
      000CEF FC               [12] 2757 	mov	r4,a
      000CF0 70 03            [24] 2758 	jnz	01294$
      000CF2 02r28r30         [24] 2759 	ljmp	00249$
      000CF5                       2760 01294$:
      000CF5 7B 00            [12] 2761 	mov	r3,#0x00
      000CF7 8C 82            [24] 2762 	mov	dpl,r4
      000CF9 8B 83            [24] 2763 	mov	dph,r3
      000CFB 12r00r00         [24] 2764 	lcall	_putchar
      000CFE 0F               [12] 2765 	inc	r7
                                   2766 ;	calc.c:162: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      000CFF BF 00 E4         [24] 2767 	cjne	r7,#0x00,00394$
      000D02 0E               [12] 2768 	inc	r6
      000D03 80 E1            [24] 2769 	sjmp	00394$
      000D05                       2770 00125$:
                                   2771 ;	calc.c:164: if (!stack_push(ctx->ss, d0)) {
      000D05 E5*00            [12] 2772 	mov	a,_bp
      000D07 24 12            [12] 2773 	add	a,#0x12
      000D09 F8               [12] 2774 	mov	r0,a
      000D0A 74 14            [12] 2775 	mov	a,#0x14
      000D0C 26               [12] 2776 	add	a,@r0
      000D0D FA               [12] 2777 	mov	r2,a
      000D0E 74 40            [12] 2778 	mov	a,#0x40
      000D10 08               [12] 2779 	inc	r0
      000D11 36               [12] 2780 	addc	a,@r0
      000D12 FB               [12] 2781 	mov	r3,a
      000D13 08               [12] 2782 	inc	r0
      000D14 86 04            [24] 2783 	mov	ar4,@r0
      000D16 8A 82            [24] 2784 	mov	dpl,r2
      000D18 8B 83            [24] 2785 	mov	dph,r3
      000D1A 8C F0            [24] 2786 	mov	b,r4
      000D1C 12r00r00         [24] 2787 	lcall	__gptrget
      000D1F FA               [12] 2788 	mov	r2,a
      000D20 A3               [24] 2789 	inc	dptr
      000D21 12r00r00         [24] 2790 	lcall	__gptrget
      000D24 FB               [12] 2791 	mov	r3,a
      000D25 A3               [24] 2792 	inc	dptr
      000D26 12r00r00         [24] 2793 	lcall	__gptrget
      000D29 FC               [12] 2794 	mov	r4,a
      000D2A E5*00            [12] 2795 	mov	a,_bp
      000D2C 24 15            [12] 2796 	add	a,#0x15
      000D2E F8               [12] 2797 	mov	r0,a
      000D2F E6               [12] 2798 	mov	a,@r0
      000D30 C0 E0            [24] 2799 	push	acc
      000D32 08               [12] 2800 	inc	r0
      000D33 E6               [12] 2801 	mov	a,@r0
      000D34 C0 E0            [24] 2802 	push	acc
      000D36 08               [12] 2803 	inc	r0
      000D37 E6               [12] 2804 	mov	a,@r0
      000D38 C0 E0            [24] 2805 	push	acc
      000D3A 08               [12] 2806 	inc	r0
      000D3B E6               [12] 2807 	mov	a,@r0
      000D3C C0 E0            [24] 2808 	push	acc
      000D3E 8A 82            [24] 2809 	mov	dpl,r2
      000D40 8B 83            [24] 2810 	mov	dph,r3
      000D42 8C F0            [24] 2811 	mov	b,r4
      000D44 12r00r00         [24] 2812 	lcall	_stack_push
      000D47 AB 82            [24] 2813 	mov	r3,dpl
      000D49 AC 83            [24] 2814 	mov	r4,dph
      000D4B E5 81            [12] 2815 	mov	a,sp
      000D4D 24 FC            [12] 2816 	add	a,#0xfc
      000D4F F5 81            [12] 2817 	mov	sp,a
      000D51 EB               [12] 2818 	mov	a,r3
      000D52 4C               [12] 2819 	orl	a,r4
      000D53 60 03            [24] 2820 	jz	01296$
      000D55 02r28r30         [24] 2821 	ljmp	00249$
      000D58                       2822 01296$:
                                   2823 ;	calc.c:165: printstr("\r\nsecondary stack overflow\r\n");
      000D58 7Fr4C            [12] 2824 	mov	r7,#___str_9
      000D5A 7Es00            [12] 2825 	mov	r6,#(___str_9 >> 8)
      000D5C 7D 80            [12] 2826 	mov	r5,#0x80
                                   2827 ;	calc.c:51: return;
      000D5E                       2828 00397$:
                                   2829 ;	calc.c:49: for (; *s; s++) putchar(*s);
      000D5E 8F 82            [24] 2830 	mov	dpl,r7
      000D60 8E 83            [24] 2831 	mov	dph,r6
      000D62 8D F0            [24] 2832 	mov	b,r5
      000D64 12r00r00         [24] 2833 	lcall	__gptrget
      000D67 FC               [12] 2834 	mov	r4,a
      000D68 60 10            [24] 2835 	jz	00283$
      000D6A 7B 00            [12] 2836 	mov	r3,#0x00
      000D6C 8C 82            [24] 2837 	mov	dpl,r4
      000D6E 8B 83            [24] 2838 	mov	dph,r3
      000D70 12r00r00         [24] 2839 	lcall	_putchar
      000D73 0F               [12] 2840 	inc	r7
                                   2841 ;	calc.c:165: printstr("\r\nsecondary stack overflow\r\n");
      000D74 BF 00 E7         [24] 2842 	cjne	r7,#0x00,00397$
      000D77 0E               [12] 2843 	inc	r6
      000D78 80 E4            [24] 2844 	sjmp	00397$
      000D7A                       2845 00283$:
                                   2846 ;	calc.c:166: (void)stack_push(ctx->ps, d0);
      000D7A E5*00            [12] 2847 	mov	a,_bp
      000D7C 24 07            [12] 2848 	add	a,#0x07
      000D7E F8               [12] 2849 	mov	r0,a
      000D7F 86 82            [24] 2850 	mov	dpl,@r0
      000D81 08               [12] 2851 	inc	r0
      000D82 86 83            [24] 2852 	mov	dph,@r0
      000D84 08               [12] 2853 	inc	r0
      000D85 86 F0            [24] 2854 	mov	b,@r0
      000D87 12r00r00         [24] 2855 	lcall	__gptrget
      000D8A FA               [12] 2856 	mov	r2,a
      000D8B A3               [24] 2857 	inc	dptr
      000D8C 12r00r00         [24] 2858 	lcall	__gptrget
      000D8F FB               [12] 2859 	mov	r3,a
      000D90 A3               [24] 2860 	inc	dptr
      000D91 12r00r00         [24] 2861 	lcall	__gptrget
      000D94 FC               [12] 2862 	mov	r4,a
      000D95 E5*00            [12] 2863 	mov	a,_bp
      000D97 24 15            [12] 2864 	add	a,#0x15
      000D99 F8               [12] 2865 	mov	r0,a
      000D9A E6               [12] 2866 	mov	a,@r0
      000D9B C0 E0            [24] 2867 	push	acc
      000D9D 08               [12] 2868 	inc	r0
      000D9E E6               [12] 2869 	mov	a,@r0
      000D9F C0 E0            [24] 2870 	push	acc
      000DA1 08               [12] 2871 	inc	r0
      000DA2 E6               [12] 2872 	mov	a,@r0
      000DA3 C0 E0            [24] 2873 	push	acc
      000DA5 08               [12] 2874 	inc	r0
      000DA6 E6               [12] 2875 	mov	a,@r0
      000DA7 C0 E0            [24] 2876 	push	acc
      000DA9 8A 82            [24] 2877 	mov	dpl,r2
      000DAB 8B 83            [24] 2878 	mov	dph,r3
      000DAD 8C F0            [24] 2879 	mov	b,r4
      000DAF 12r00r00         [24] 2880 	lcall	_stack_push
      000DB2 E5 81            [12] 2881 	mov	a,sp
      000DB4 24 FC            [12] 2882 	add	a,#0xfc
      000DB6 F5 81            [12] 2883 	mov	sp,a
                                   2884 ;	calc.c:169: break;
      000DB8 02r28r30         [24] 2885 	ljmp	00249$
                                   2886 ;	calc.c:170: case 'M':
      000DBB                       2887 00127$:
                                   2888 ;	calc.c:171: if (!stack_pop(ctx->ss, &d0)) printstr("\r\nsecondary stack underflow\r\n");
      000DBB E5*00            [12] 2889 	mov	a,_bp
      000DBD 24 15            [12] 2890 	add	a,#0x15
      000DBF FF               [12] 2891 	mov	r7,a
      000DC0 7E 00            [12] 2892 	mov	r6,#0x00
      000DC2 7D 40            [12] 2893 	mov	r5,#0x40
      000DC4 E5*00            [12] 2894 	mov	a,_bp
      000DC6 24 12            [12] 2895 	add	a,#0x12
      000DC8 F8               [12] 2896 	mov	r0,a
      000DC9 E5*00            [12] 2897 	mov	a,_bp
      000DCB 24 07            [12] 2898 	add	a,#0x07
      000DCD F9               [12] 2899 	mov	r1,a
      000DCE 74 14            [12] 2900 	mov	a,#0x14
      000DD0 26               [12] 2901 	add	a,@r0
      000DD1 F7               [12] 2902 	mov	@r1,a
      000DD2 74 40            [12] 2903 	mov	a,#0x40
      000DD4 08               [12] 2904 	inc	r0
      000DD5 36               [12] 2905 	addc	a,@r0
      000DD6 09               [12] 2906 	inc	r1
      000DD7 F7               [12] 2907 	mov	@r1,a
      000DD8 08               [12] 2908 	inc	r0
      000DD9 09               [12] 2909 	inc	r1
      000DDA E6               [12] 2910 	mov	a,@r0
      000DDB F7               [12] 2911 	mov	@r1,a
      000DDC E5*00            [12] 2912 	mov	a,_bp
      000DDE 24 07            [12] 2913 	add	a,#0x07
      000DE0 F8               [12] 2914 	mov	r0,a
      000DE1 86 82            [24] 2915 	mov	dpl,@r0
      000DE3 08               [12] 2916 	inc	r0
      000DE4 86 83            [24] 2917 	mov	dph,@r0
      000DE6 08               [12] 2918 	inc	r0
      000DE7 86 F0            [24] 2919 	mov	b,@r0
      000DE9 12r00r00         [24] 2920 	lcall	__gptrget
      000DEC FA               [12] 2921 	mov	r2,a
      000DED A3               [24] 2922 	inc	dptr
      000DEE 12r00r00         [24] 2923 	lcall	__gptrget
      000DF1 FB               [12] 2924 	mov	r3,a
      000DF2 A3               [24] 2925 	inc	dptr
      000DF3 12r00r00         [24] 2926 	lcall	__gptrget
      000DF6 FC               [12] 2927 	mov	r4,a
      000DF7 C0 07            [24] 2928 	push	ar7
      000DF9 C0 06            [24] 2929 	push	ar6
      000DFB C0 05            [24] 2930 	push	ar5
      000DFD 8A 82            [24] 2931 	mov	dpl,r2
      000DFF 8B 83            [24] 2932 	mov	dph,r3
      000E01 8C F0            [24] 2933 	mov	b,r4
      000E03 12r00r00         [24] 2934 	lcall	_stack_pop
      000E06 AB 82            [24] 2935 	mov	r3,dpl
      000E08 AC 83            [24] 2936 	mov	r4,dph
      000E0A 15 81            [12] 2937 	dec	sp
      000E0C 15 81            [12] 2938 	dec	sp
      000E0E 15 81            [12] 2939 	dec	sp
      000E10 EB               [12] 2940 	mov	a,r3
      000E11 4C               [12] 2941 	orl	a,r4
      000E12 70 25            [24] 2942 	jnz	00131$
      000E14 7Fr69            [12] 2943 	mov	r7,#___str_10
      000E16 7Es00            [12] 2944 	mov	r6,#(___str_10 >> 8)
      000E18 7D 80            [12] 2945 	mov	r5,#0x80
                                   2946 ;	calc.c:51: return;
      000E1A                       2947 00400$:
                                   2948 ;	calc.c:49: for (; *s; s++) putchar(*s);
      000E1A 8F 82            [24] 2949 	mov	dpl,r7
      000E1C 8E 83            [24] 2950 	mov	dph,r6
      000E1E 8D F0            [24] 2951 	mov	b,r5
      000E20 12r00r00         [24] 2952 	lcall	__gptrget
      000E23 FC               [12] 2953 	mov	r4,a
      000E24 70 03            [24] 2954 	jnz	01300$
      000E26 02r28r30         [24] 2955 	ljmp	00249$
      000E29                       2956 01300$:
      000E29 7B 00            [12] 2957 	mov	r3,#0x00
      000E2B 8C 82            [24] 2958 	mov	dpl,r4
      000E2D 8B 83            [24] 2959 	mov	dph,r3
      000E2F 12r00r00         [24] 2960 	lcall	_putchar
      000E32 0F               [12] 2961 	inc	r7
                                   2962 ;	calc.c:171: if (!stack_pop(ctx->ss, &d0)) printstr("\r\nsecondary stack underflow\r\n");
      000E33 BF 00 E4         [24] 2963 	cjne	r7,#0x00,00400$
      000E36 0E               [12] 2964 	inc	r6
      000E37 80 E1            [24] 2965 	sjmp	00400$
      000E39                       2966 00131$:
                                   2967 ;	calc.c:173: if (!stack_push(ctx->ps, d0)) {
      000E39 E5*00            [12] 2968 	mov	a,_bp
      000E3B 24 12            [12] 2969 	add	a,#0x12
      000E3D F8               [12] 2970 	mov	r0,a
      000E3E 74 11            [12] 2971 	mov	a,#0x11
      000E40 26               [12] 2972 	add	a,@r0
      000E41 FA               [12] 2973 	mov	r2,a
      000E42 74 40            [12] 2974 	mov	a,#0x40
      000E44 08               [12] 2975 	inc	r0
      000E45 36               [12] 2976 	addc	a,@r0
      000E46 FB               [12] 2977 	mov	r3,a
      000E47 08               [12] 2978 	inc	r0
      000E48 86 04            [24] 2979 	mov	ar4,@r0
      000E4A 8A 82            [24] 2980 	mov	dpl,r2
      000E4C 8B 83            [24] 2981 	mov	dph,r3
      000E4E 8C F0            [24] 2982 	mov	b,r4
      000E50 12r00r00         [24] 2983 	lcall	__gptrget
      000E53 FA               [12] 2984 	mov	r2,a
      000E54 A3               [24] 2985 	inc	dptr
      000E55 12r00r00         [24] 2986 	lcall	__gptrget
      000E58 FB               [12] 2987 	mov	r3,a
      000E59 A3               [24] 2988 	inc	dptr
      000E5A 12r00r00         [24] 2989 	lcall	__gptrget
      000E5D FC               [12] 2990 	mov	r4,a
      000E5E E5*00            [12] 2991 	mov	a,_bp
      000E60 24 15            [12] 2992 	add	a,#0x15
      000E62 F8               [12] 2993 	mov	r0,a
      000E63 E6               [12] 2994 	mov	a,@r0
      000E64 C0 E0            [24] 2995 	push	acc
      000E66 08               [12] 2996 	inc	r0
      000E67 E6               [12] 2997 	mov	a,@r0
      000E68 C0 E0            [24] 2998 	push	acc
      000E6A 08               [12] 2999 	inc	r0
      000E6B E6               [12] 3000 	mov	a,@r0
      000E6C C0 E0            [24] 3001 	push	acc
      000E6E 08               [12] 3002 	inc	r0
      000E6F E6               [12] 3003 	mov	a,@r0
      000E70 C0 E0            [24] 3004 	push	acc
      000E72 8A 82            [24] 3005 	mov	dpl,r2
      000E74 8B 83            [24] 3006 	mov	dph,r3
      000E76 8C F0            [24] 3007 	mov	b,r4
      000E78 12r00r00         [24] 3008 	lcall	_stack_push
      000E7B AB 82            [24] 3009 	mov	r3,dpl
      000E7D AC 83            [24] 3010 	mov	r4,dph
      000E7F E5 81            [12] 3011 	mov	a,sp
      000E81 24 FC            [12] 3012 	add	a,#0xfc
      000E83 F5 81            [12] 3013 	mov	sp,a
      000E85 EB               [12] 3014 	mov	a,r3
      000E86 4C               [12] 3015 	orl	a,r4
      000E87 60 03            [24] 3016 	jz	01302$
      000E89 02r28r30         [24] 3017 	ljmp	00249$
      000E8C                       3018 01302$:
                                   3019 ;	calc.c:174: printstr("\r\nstack overflow\r\n");
      000E8C 7Fr87            [12] 3020 	mov	r7,#___str_11
      000E8E 7Es00            [12] 3021 	mov	r6,#(___str_11 >> 8)
      000E90 7D 80            [12] 3022 	mov	r5,#0x80
                                   3023 ;	calc.c:51: return;
      000E92                       3024 00403$:
                                   3025 ;	calc.c:49: for (; *s; s++) putchar(*s);
      000E92 8F 82            [24] 3026 	mov	dpl,r7
      000E94 8E 83            [24] 3027 	mov	dph,r6
      000E96 8D F0            [24] 3028 	mov	b,r5
      000E98 12r00r00         [24] 3029 	lcall	__gptrget
      000E9B FC               [12] 3030 	mov	r4,a
      000E9C 60 10            [24] 3031 	jz	00287$
      000E9E 7B 00            [12] 3032 	mov	r3,#0x00
      000EA0 8C 82            [24] 3033 	mov	dpl,r4
      000EA2 8B 83            [24] 3034 	mov	dph,r3
      000EA4 12r00r00         [24] 3035 	lcall	_putchar
      000EA7 0F               [12] 3036 	inc	r7
                                   3037 ;	calc.c:174: printstr("\r\nstack overflow\r\n");
      000EA8 BF 00 E7         [24] 3038 	cjne	r7,#0x00,00403$
      000EAB 0E               [12] 3039 	inc	r6
      000EAC 80 E4            [24] 3040 	sjmp	00403$
      000EAE                       3041 00287$:
                                   3042 ;	calc.c:175: (void)stack_push(ctx->ss, d0);
      000EAE E5*00            [12] 3043 	mov	a,_bp
      000EB0 24 07            [12] 3044 	add	a,#0x07
      000EB2 F8               [12] 3045 	mov	r0,a
      000EB3 86 82            [24] 3046 	mov	dpl,@r0
      000EB5 08               [12] 3047 	inc	r0
      000EB6 86 83            [24] 3048 	mov	dph,@r0
      000EB8 08               [12] 3049 	inc	r0
      000EB9 86 F0            [24] 3050 	mov	b,@r0
      000EBB 12r00r00         [24] 3051 	lcall	__gptrget
      000EBE FA               [12] 3052 	mov	r2,a
      000EBF A3               [24] 3053 	inc	dptr
      000EC0 12r00r00         [24] 3054 	lcall	__gptrget
      000EC3 FB               [12] 3055 	mov	r3,a
      000EC4 A3               [24] 3056 	inc	dptr
      000EC5 12r00r00         [24] 3057 	lcall	__gptrget
      000EC8 FC               [12] 3058 	mov	r4,a
      000EC9 E5*00            [12] 3059 	mov	a,_bp
      000ECB 24 15            [12] 3060 	add	a,#0x15
      000ECD F8               [12] 3061 	mov	r0,a
      000ECE E6               [12] 3062 	mov	a,@r0
      000ECF C0 E0            [24] 3063 	push	acc
      000ED1 08               [12] 3064 	inc	r0
      000ED2 E6               [12] 3065 	mov	a,@r0
      000ED3 C0 E0            [24] 3066 	push	acc
      000ED5 08               [12] 3067 	inc	r0
      000ED6 E6               [12] 3068 	mov	a,@r0
      000ED7 C0 E0            [24] 3069 	push	acc
      000ED9 08               [12] 3070 	inc	r0
      000EDA E6               [12] 3071 	mov	a,@r0
      000EDB C0 E0            [24] 3072 	push	acc
      000EDD 8A 82            [24] 3073 	mov	dpl,r2
      000EDF 8B 83            [24] 3074 	mov	dph,r3
      000EE1 8C F0            [24] 3075 	mov	b,r4
      000EE3 12r00r00         [24] 3076 	lcall	_stack_push
      000EE6 E5 81            [12] 3077 	mov	a,sp
      000EE8 24 FC            [12] 3078 	add	a,#0xfc
      000EEA F5 81            [12] 3079 	mov	sp,a
                                   3080 ;	calc.c:178: break;
      000EEC 02r28r30         [24] 3081 	ljmp	00249$
                                   3082 ;	calc.c:179: case 'u':
      000EEF                       3083 00133$:
                                   3084 ;	calc.c:180: if (!stack_peek(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      000EEF E5*00            [12] 3085 	mov	a,_bp
      000EF1 24 15            [12] 3086 	add	a,#0x15
      000EF3 FF               [12] 3087 	mov	r7,a
      000EF4 7E 00            [12] 3088 	mov	r6,#0x00
      000EF6 7D 40            [12] 3089 	mov	r5,#0x40
      000EF8 E5*00            [12] 3090 	mov	a,_bp
      000EFA 24 12            [12] 3091 	add	a,#0x12
      000EFC F8               [12] 3092 	mov	r0,a
      000EFD 74 11            [12] 3093 	mov	a,#0x11
      000EFF 26               [12] 3094 	add	a,@r0
      000F00 FA               [12] 3095 	mov	r2,a
      000F01 ED               [12] 3096 	mov	a,r5
      000F02 08               [12] 3097 	inc	r0
      000F03 36               [12] 3098 	addc	a,@r0
      000F04 FB               [12] 3099 	mov	r3,a
      000F05 08               [12] 3100 	inc	r0
      000F06 86 04            [24] 3101 	mov	ar4,@r0
      000F08 8A 82            [24] 3102 	mov	dpl,r2
      000F0A 8B 83            [24] 3103 	mov	dph,r3
      000F0C 8C F0            [24] 3104 	mov	b,r4
      000F0E 12r00r00         [24] 3105 	lcall	__gptrget
      000F11 FA               [12] 3106 	mov	r2,a
      000F12 A3               [24] 3107 	inc	dptr
      000F13 12r00r00         [24] 3108 	lcall	__gptrget
      000F16 FB               [12] 3109 	mov	r3,a
      000F17 A3               [24] 3110 	inc	dptr
      000F18 12r00r00         [24] 3111 	lcall	__gptrget
      000F1B FC               [12] 3112 	mov	r4,a
      000F1C C0 07            [24] 3113 	push	ar7
      000F1E C0 06            [24] 3114 	push	ar6
      000F20 C0 05            [24] 3115 	push	ar5
      000F22 8A 82            [24] 3116 	mov	dpl,r2
      000F24 8B 83            [24] 3117 	mov	dph,r3
      000F26 8C F0            [24] 3118 	mov	b,r4
      000F28 12r00r00         [24] 3119 	lcall	_stack_peek
      000F2B AB 82            [24] 3120 	mov	r3,dpl
      000F2D AC 83            [24] 3121 	mov	r4,dph
      000F2F 15 81            [12] 3122 	dec	sp
      000F31 15 81            [12] 3123 	dec	sp
      000F33 15 81            [12] 3124 	dec	sp
      000F35 EB               [12] 3125 	mov	a,r3
      000F36 4C               [12] 3126 	orl	a,r4
      000F37 70 25            [24] 3127 	jnz	00137$
      000F39 7Fr38            [12] 3128 	mov	r7,#___str_8
      000F3B 7Es00            [12] 3129 	mov	r6,#(___str_8 >> 8)
      000F3D 7D 80            [12] 3130 	mov	r5,#0x80
                                   3131 ;	calc.c:51: return;
      000F3F                       3132 00406$:
                                   3133 ;	calc.c:49: for (; *s; s++) putchar(*s);
      000F3F 8F 82            [24] 3134 	mov	dpl,r7
      000F41 8E 83            [24] 3135 	mov	dph,r6
      000F43 8D F0            [24] 3136 	mov	b,r5
      000F45 12r00r00         [24] 3137 	lcall	__gptrget
      000F48 FC               [12] 3138 	mov	r4,a
      000F49 70 03            [24] 3139 	jnz	01306$
      000F4B 02r28r30         [24] 3140 	ljmp	00249$
      000F4E                       3141 01306$:
      000F4E 7B 00            [12] 3142 	mov	r3,#0x00
      000F50 8C 82            [24] 3143 	mov	dpl,r4
      000F52 8B 83            [24] 3144 	mov	dph,r3
      000F54 12r00r00         [24] 3145 	lcall	_putchar
      000F57 0F               [12] 3146 	inc	r7
                                   3147 ;	calc.c:180: if (!stack_peek(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      000F58 BF 00 E4         [24] 3148 	cjne	r7,#0x00,00406$
      000F5B 0E               [12] 3149 	inc	r6
      000F5C 80 E1            [24] 3150 	sjmp	00406$
      000F5E                       3151 00137$:
                                   3152 ;	calc.c:181: else if (!stack_push(ctx->ss, d0)) printstr("\r\nsecondary stack overflow\r\n");
      000F5E E5*00            [12] 3153 	mov	a,_bp
      000F60 24 12            [12] 3154 	add	a,#0x12
      000F62 F8               [12] 3155 	mov	r0,a
      000F63 74 14            [12] 3156 	mov	a,#0x14
      000F65 26               [12] 3157 	add	a,@r0
      000F66 FA               [12] 3158 	mov	r2,a
      000F67 74 40            [12] 3159 	mov	a,#0x40
      000F69 08               [12] 3160 	inc	r0
      000F6A 36               [12] 3161 	addc	a,@r0
      000F6B FB               [12] 3162 	mov	r3,a
      000F6C 08               [12] 3163 	inc	r0
      000F6D 86 04            [24] 3164 	mov	ar4,@r0
      000F6F 8A 82            [24] 3165 	mov	dpl,r2
      000F71 8B 83            [24] 3166 	mov	dph,r3
      000F73 8C F0            [24] 3167 	mov	b,r4
      000F75 12r00r00         [24] 3168 	lcall	__gptrget
      000F78 FA               [12] 3169 	mov	r2,a
      000F79 A3               [24] 3170 	inc	dptr
      000F7A 12r00r00         [24] 3171 	lcall	__gptrget
      000F7D FB               [12] 3172 	mov	r3,a
      000F7E A3               [24] 3173 	inc	dptr
      000F7F 12r00r00         [24] 3174 	lcall	__gptrget
      000F82 FC               [12] 3175 	mov	r4,a
      000F83 E5*00            [12] 3176 	mov	a,_bp
      000F85 24 15            [12] 3177 	add	a,#0x15
      000F87 F8               [12] 3178 	mov	r0,a
      000F88 E6               [12] 3179 	mov	a,@r0
      000F89 C0 E0            [24] 3180 	push	acc
      000F8B 08               [12] 3181 	inc	r0
      000F8C E6               [12] 3182 	mov	a,@r0
      000F8D C0 E0            [24] 3183 	push	acc
      000F8F 08               [12] 3184 	inc	r0
      000F90 E6               [12] 3185 	mov	a,@r0
      000F91 C0 E0            [24] 3186 	push	acc
      000F93 08               [12] 3187 	inc	r0
      000F94 E6               [12] 3188 	mov	a,@r0
      000F95 C0 E0            [24] 3189 	push	acc
      000F97 8A 82            [24] 3190 	mov	dpl,r2
      000F99 8B 83            [24] 3191 	mov	dph,r3
      000F9B 8C F0            [24] 3192 	mov	b,r4
      000F9D 12r00r00         [24] 3193 	lcall	_stack_push
      000FA0 AB 82            [24] 3194 	mov	r3,dpl
      000FA2 AC 83            [24] 3195 	mov	r4,dph
      000FA4 E5 81            [12] 3196 	mov	a,sp
      000FA6 24 FC            [12] 3197 	add	a,#0xfc
      000FA8 F5 81            [12] 3198 	mov	sp,a
      000FAA EB               [12] 3199 	mov	a,r3
      000FAB 4C               [12] 3200 	orl	a,r4
      000FAC 60 03            [24] 3201 	jz	01308$
      000FAE 02r28r30         [24] 3202 	ljmp	00249$
      000FB1                       3203 01308$:
      000FB1 7Fr4C            [12] 3204 	mov	r7,#___str_9
      000FB3 7Es00            [12] 3205 	mov	r6,#(___str_9 >> 8)
      000FB5 7D 80            [12] 3206 	mov	r5,#0x80
                                   3207 ;	calc.c:51: return;
      000FB7                       3208 00409$:
                                   3209 ;	calc.c:49: for (; *s; s++) putchar(*s);
      000FB7 8F 82            [24] 3210 	mov	dpl,r7
      000FB9 8E 83            [24] 3211 	mov	dph,r6
      000FBB 8D F0            [24] 3212 	mov	b,r5
      000FBD 12r00r00         [24] 3213 	lcall	__gptrget
      000FC0 FC               [12] 3214 	mov	r4,a
      000FC1 70 03            [24] 3215 	jnz	01309$
      000FC3 02r28r30         [24] 3216 	ljmp	00249$
      000FC6                       3217 01309$:
      000FC6 7B 00            [12] 3218 	mov	r3,#0x00
      000FC8 8C 82            [24] 3219 	mov	dpl,r4
      000FCA 8B 83            [24] 3220 	mov	dph,r3
      000FCC 12r00r00         [24] 3221 	lcall	_putchar
      000FCF 0F               [12] 3222 	inc	r7
                                   3223 ;	calc.c:183: case 'U':
      000FD0 BF 00 E4         [24] 3224 	cjne	r7,#0x00,00409$
      000FD3 0E               [12] 3225 	inc	r6
      000FD4 80 E1            [24] 3226 	sjmp	00409$
      000FD6                       3227 00139$:
                                   3228 ;	calc.c:184: if (!stack_peek(ctx->ss, &d0)) printstr("\r\nsecondary stack underflow\r\n");
      000FD6 E5*00            [12] 3229 	mov	a,_bp
      000FD8 24 15            [12] 3230 	add	a,#0x15
      000FDA FF               [12] 3231 	mov	r7,a
      000FDB 7E 00            [12] 3232 	mov	r6,#0x00
      000FDD 7D 40            [12] 3233 	mov	r5,#0x40
      000FDF E5*00            [12] 3234 	mov	a,_bp
      000FE1 24 12            [12] 3235 	add	a,#0x12
      000FE3 F8               [12] 3236 	mov	r0,a
      000FE4 74 14            [12] 3237 	mov	a,#0x14
      000FE6 26               [12] 3238 	add	a,@r0
      000FE7 FA               [12] 3239 	mov	r2,a
      000FE8 ED               [12] 3240 	mov	a,r5
      000FE9 08               [12] 3241 	inc	r0
      000FEA 36               [12] 3242 	addc	a,@r0
      000FEB FB               [12] 3243 	mov	r3,a
      000FEC 08               [12] 3244 	inc	r0
      000FED 86 04            [24] 3245 	mov	ar4,@r0
      000FEF 8A 82            [24] 3246 	mov	dpl,r2
      000FF1 8B 83            [24] 3247 	mov	dph,r3
      000FF3 8C F0            [24] 3248 	mov	b,r4
      000FF5 12r00r00         [24] 3249 	lcall	__gptrget
      000FF8 FA               [12] 3250 	mov	r2,a
      000FF9 A3               [24] 3251 	inc	dptr
      000FFA 12r00r00         [24] 3252 	lcall	__gptrget
      000FFD FB               [12] 3253 	mov	r3,a
      000FFE A3               [24] 3254 	inc	dptr
      000FFF 12r00r00         [24] 3255 	lcall	__gptrget
      001002 FC               [12] 3256 	mov	r4,a
      001003 C0 07            [24] 3257 	push	ar7
      001005 C0 06            [24] 3258 	push	ar6
      001007 C0 05            [24] 3259 	push	ar5
      001009 8A 82            [24] 3260 	mov	dpl,r2
      00100B 8B 83            [24] 3261 	mov	dph,r3
      00100D 8C F0            [24] 3262 	mov	b,r4
      00100F 12r00r00         [24] 3263 	lcall	_stack_peek
      001012 AB 82            [24] 3264 	mov	r3,dpl
      001014 AC 83            [24] 3265 	mov	r4,dph
      001016 15 81            [12] 3266 	dec	sp
      001018 15 81            [12] 3267 	dec	sp
      00101A 15 81            [12] 3268 	dec	sp
      00101C EB               [12] 3269 	mov	a,r3
      00101D 4C               [12] 3270 	orl	a,r4
      00101E 70 25            [24] 3271 	jnz	00143$
      001020 7Fr69            [12] 3272 	mov	r7,#___str_10
      001022 7Es00            [12] 3273 	mov	r6,#(___str_10 >> 8)
      001024 7D 80            [12] 3274 	mov	r5,#0x80
                                   3275 ;	calc.c:51: return;
      001026                       3276 00412$:
                                   3277 ;	calc.c:49: for (; *s; s++) putchar(*s);
      001026 8F 82            [24] 3278 	mov	dpl,r7
      001028 8E 83            [24] 3279 	mov	dph,r6
      00102A 8D F0            [24] 3280 	mov	b,r5
      00102C 12r00r00         [24] 3281 	lcall	__gptrget
      00102F FC               [12] 3282 	mov	r4,a
      001030 70 03            [24] 3283 	jnz	01312$
      001032 02r28r30         [24] 3284 	ljmp	00249$
      001035                       3285 01312$:
      001035 7B 00            [12] 3286 	mov	r3,#0x00
      001037 8C 82            [24] 3287 	mov	dpl,r4
      001039 8B 83            [24] 3288 	mov	dph,r3
      00103B 12r00r00         [24] 3289 	lcall	_putchar
      00103E 0F               [12] 3290 	inc	r7
                                   3291 ;	calc.c:184: if (!stack_peek(ctx->ss, &d0)) printstr("\r\nsecondary stack underflow\r\n");
      00103F BF 00 E4         [24] 3292 	cjne	r7,#0x00,00412$
      001042 0E               [12] 3293 	inc	r6
      001043 80 E1            [24] 3294 	sjmp	00412$
      001045                       3295 00143$:
                                   3296 ;	calc.c:185: else if (!stack_push(ctx->ps, d0)) printstr("\r\nstack overflow\r\n");
      001045 E5*00            [12] 3297 	mov	a,_bp
      001047 24 12            [12] 3298 	add	a,#0x12
      001049 F8               [12] 3299 	mov	r0,a
      00104A 74 11            [12] 3300 	mov	a,#0x11
      00104C 26               [12] 3301 	add	a,@r0
      00104D FA               [12] 3302 	mov	r2,a
      00104E 74 40            [12] 3303 	mov	a,#0x40
      001050 08               [12] 3304 	inc	r0
      001051 36               [12] 3305 	addc	a,@r0
      001052 FB               [12] 3306 	mov	r3,a
      001053 08               [12] 3307 	inc	r0
      001054 86 04            [24] 3308 	mov	ar4,@r0
      001056 8A 82            [24] 3309 	mov	dpl,r2
      001058 8B 83            [24] 3310 	mov	dph,r3
      00105A 8C F0            [24] 3311 	mov	b,r4
      00105C 12r00r00         [24] 3312 	lcall	__gptrget
      00105F FA               [12] 3313 	mov	r2,a
      001060 A3               [24] 3314 	inc	dptr
      001061 12r00r00         [24] 3315 	lcall	__gptrget
      001064 FB               [12] 3316 	mov	r3,a
      001065 A3               [24] 3317 	inc	dptr
      001066 12r00r00         [24] 3318 	lcall	__gptrget
      001069 FC               [12] 3319 	mov	r4,a
      00106A E5*00            [12] 3320 	mov	a,_bp
      00106C 24 15            [12] 3321 	add	a,#0x15
      00106E F8               [12] 3322 	mov	r0,a
      00106F E6               [12] 3323 	mov	a,@r0
      001070 C0 E0            [24] 3324 	push	acc
      001072 08               [12] 3325 	inc	r0
      001073 E6               [12] 3326 	mov	a,@r0
      001074 C0 E0            [24] 3327 	push	acc
      001076 08               [12] 3328 	inc	r0
      001077 E6               [12] 3329 	mov	a,@r0
      001078 C0 E0            [24] 3330 	push	acc
      00107A 08               [12] 3331 	inc	r0
      00107B E6               [12] 3332 	mov	a,@r0
      00107C C0 E0            [24] 3333 	push	acc
      00107E 8A 82            [24] 3334 	mov	dpl,r2
      001080 8B 83            [24] 3335 	mov	dph,r3
      001082 8C F0            [24] 3336 	mov	b,r4
      001084 12r00r00         [24] 3337 	lcall	_stack_push
      001087 AB 82            [24] 3338 	mov	r3,dpl
      001089 AC 83            [24] 3339 	mov	r4,dph
      00108B E5 81            [12] 3340 	mov	a,sp
      00108D 24 FC            [12] 3341 	add	a,#0xfc
      00108F F5 81            [12] 3342 	mov	sp,a
      001091 EB               [12] 3343 	mov	a,r3
      001092 4C               [12] 3344 	orl	a,r4
      001093 60 03            [24] 3345 	jz	01314$
      001095 02r28r30         [24] 3346 	ljmp	00249$
      001098                       3347 01314$:
      001098 7Fr87            [12] 3348 	mov	r7,#___str_11
      00109A 7Es00            [12] 3349 	mov	r6,#(___str_11 >> 8)
      00109C 7D 80            [12] 3350 	mov	r5,#0x80
                                   3351 ;	calc.c:51: return;
      00109E                       3352 00415$:
                                   3353 ;	calc.c:49: for (; *s; s++) putchar(*s);
      00109E 8F 82            [24] 3354 	mov	dpl,r7
      0010A0 8E 83            [24] 3355 	mov	dph,r6
      0010A2 8D F0            [24] 3356 	mov	b,r5
      0010A4 12r00r00         [24] 3357 	lcall	__gptrget
      0010A7 FC               [12] 3358 	mov	r4,a
      0010A8 70 03            [24] 3359 	jnz	01315$
      0010AA 02r28r30         [24] 3360 	ljmp	00249$
      0010AD                       3361 01315$:
      0010AD 7B 00            [12] 3362 	mov	r3,#0x00
      0010AF 8C 82            [24] 3363 	mov	dpl,r4
      0010B1 8B 83            [24] 3364 	mov	dph,r3
      0010B3 12r00r00         [24] 3365 	lcall	_putchar
      0010B6 0F               [12] 3366 	inc	r7
                                   3367 ;	calc.c:187: case 'T':
      0010B7 BF 00 E4         [24] 3368 	cjne	r7,#0x00,00415$
      0010BA 0E               [12] 3369 	inc	r6
      0010BB 80 E1            [24] 3370 	sjmp	00415$
      0010BD                       3371 00145$:
                                   3372 ;	calc.c:188: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      0010BD E5*00            [12] 3373 	mov	a,_bp
      0010BF 24 15            [12] 3374 	add	a,#0x15
      0010C1 FF               [12] 3375 	mov	r7,a
      0010C2 7E 00            [12] 3376 	mov	r6,#0x00
      0010C4 7D 40            [12] 3377 	mov	r5,#0x40
      0010C6 E5*00            [12] 3378 	mov	a,_bp
      0010C8 24 12            [12] 3379 	add	a,#0x12
      0010CA F8               [12] 3380 	mov	r0,a
      0010CB E5*00            [12] 3381 	mov	a,_bp
      0010CD 24 07            [12] 3382 	add	a,#0x07
      0010CF F9               [12] 3383 	mov	r1,a
      0010D0 74 11            [12] 3384 	mov	a,#0x11
      0010D2 26               [12] 3385 	add	a,@r0
      0010D3 F7               [12] 3386 	mov	@r1,a
      0010D4 74 40            [12] 3387 	mov	a,#0x40
      0010D6 08               [12] 3388 	inc	r0
      0010D7 36               [12] 3389 	addc	a,@r0
      0010D8 09               [12] 3390 	inc	r1
      0010D9 F7               [12] 3391 	mov	@r1,a
      0010DA 08               [12] 3392 	inc	r0
      0010DB 09               [12] 3393 	inc	r1
      0010DC E6               [12] 3394 	mov	a,@r0
      0010DD F7               [12] 3395 	mov	@r1,a
      0010DE E5*00            [12] 3396 	mov	a,_bp
      0010E0 24 07            [12] 3397 	add	a,#0x07
      0010E2 F8               [12] 3398 	mov	r0,a
      0010E3 86 82            [24] 3399 	mov	dpl,@r0
      0010E5 08               [12] 3400 	inc	r0
      0010E6 86 83            [24] 3401 	mov	dph,@r0
      0010E8 08               [12] 3402 	inc	r0
      0010E9 86 F0            [24] 3403 	mov	b,@r0
      0010EB 12r00r00         [24] 3404 	lcall	__gptrget
      0010EE FA               [12] 3405 	mov	r2,a
      0010EF A3               [24] 3406 	inc	dptr
      0010F0 12r00r00         [24] 3407 	lcall	__gptrget
      0010F3 FB               [12] 3408 	mov	r3,a
      0010F4 A3               [24] 3409 	inc	dptr
      0010F5 12r00r00         [24] 3410 	lcall	__gptrget
      0010F8 FC               [12] 3411 	mov	r4,a
      0010F9 C0 07            [24] 3412 	push	ar7
      0010FB C0 06            [24] 3413 	push	ar6
      0010FD C0 05            [24] 3414 	push	ar5
      0010FF 8A 82            [24] 3415 	mov	dpl,r2
      001101 8B 83            [24] 3416 	mov	dph,r3
      001103 8C F0            [24] 3417 	mov	b,r4
      001105 12r00r00         [24] 3418 	lcall	_stack_pop
      001108 AB 82            [24] 3419 	mov	r3,dpl
      00110A AC 83            [24] 3420 	mov	r4,dph
      00110C 15 81            [12] 3421 	dec	sp
      00110E 15 81            [12] 3422 	dec	sp
      001110 15 81            [12] 3423 	dec	sp
      001112 EB               [12] 3424 	mov	a,r3
      001113 4C               [12] 3425 	orl	a,r4
      001114 70 25            [24] 3426 	jnz	00150$
      001116 7Fr38            [12] 3427 	mov	r7,#___str_8
      001118 7Es00            [12] 3428 	mov	r6,#(___str_8 >> 8)
      00111A 7D 80            [12] 3429 	mov	r5,#0x80
                                   3430 ;	calc.c:51: return;
      00111C                       3431 00418$:
                                   3432 ;	calc.c:49: for (; *s; s++) putchar(*s);
      00111C 8F 82            [24] 3433 	mov	dpl,r7
      00111E 8E 83            [24] 3434 	mov	dph,r6
      001120 8D F0            [24] 3435 	mov	b,r5
      001122 12r00r00         [24] 3436 	lcall	__gptrget
      001125 FC               [12] 3437 	mov	r4,a
      001126 70 03            [24] 3438 	jnz	01318$
      001128 02r28r30         [24] 3439 	ljmp	00249$
      00112B                       3440 01318$:
      00112B 7B 00            [12] 3441 	mov	r3,#0x00
      00112D 8C 82            [24] 3442 	mov	dpl,r4
      00112F 8B 83            [24] 3443 	mov	dph,r3
      001131 12r00r00         [24] 3444 	lcall	_putchar
      001134 0F               [12] 3445 	inc	r7
                                   3446 ;	calc.c:188: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      001135 BF 00 E4         [24] 3447 	cjne	r7,#0x00,00418$
      001138 0E               [12] 3448 	inc	r6
      001139 80 E1            [24] 3449 	sjmp	00418$
      00113B                       3450 00150$:
                                   3451 ;	calc.c:190: if (!stack_pop(ctx->ss, &d1)) {
      00113B E5*00            [12] 3452 	mov	a,_bp
      00113D 24 19            [12] 3453 	add	a,#0x19
      00113F FF               [12] 3454 	mov	r7,a
      001140 7E 00            [12] 3455 	mov	r6,#0x00
      001142 7D 40            [12] 3456 	mov	r5,#0x40
      001144 E5*00            [12] 3457 	mov	a,_bp
      001146 24 12            [12] 3458 	add	a,#0x12
      001148 F8               [12] 3459 	mov	r0,a
      001149 E5*00            [12] 3460 	mov	a,_bp
      00114B 24 04            [12] 3461 	add	a,#0x04
      00114D F9               [12] 3462 	mov	r1,a
      00114E 74 14            [12] 3463 	mov	a,#0x14
      001150 26               [12] 3464 	add	a,@r0
      001151 F7               [12] 3465 	mov	@r1,a
      001152 74 40            [12] 3466 	mov	a,#0x40
      001154 08               [12] 3467 	inc	r0
      001155 36               [12] 3468 	addc	a,@r0
      001156 09               [12] 3469 	inc	r1
      001157 F7               [12] 3470 	mov	@r1,a
      001158 08               [12] 3471 	inc	r0
      001159 09               [12] 3472 	inc	r1
      00115A E6               [12] 3473 	mov	a,@r0
      00115B F7               [12] 3474 	mov	@r1,a
      00115C E5*00            [12] 3475 	mov	a,_bp
      00115E 24 04            [12] 3476 	add	a,#0x04
      001160 F8               [12] 3477 	mov	r0,a
      001161 86 82            [24] 3478 	mov	dpl,@r0
      001163 08               [12] 3479 	inc	r0
      001164 86 83            [24] 3480 	mov	dph,@r0
      001166 08               [12] 3481 	inc	r0
      001167 86 F0            [24] 3482 	mov	b,@r0
      001169 12r00r00         [24] 3483 	lcall	__gptrget
      00116C FA               [12] 3484 	mov	r2,a
      00116D A3               [24] 3485 	inc	dptr
      00116E 12r00r00         [24] 3486 	lcall	__gptrget
      001171 FB               [12] 3487 	mov	r3,a
      001172 A3               [24] 3488 	inc	dptr
      001173 12r00r00         [24] 3489 	lcall	__gptrget
      001176 FC               [12] 3490 	mov	r4,a
      001177 C0 07            [24] 3491 	push	ar7
      001179 C0 06            [24] 3492 	push	ar6
      00117B C0 05            [24] 3493 	push	ar5
      00117D 8A 82            [24] 3494 	mov	dpl,r2
      00117F 8B 83            [24] 3495 	mov	dph,r3
      001181 8C F0            [24] 3496 	mov	b,r4
      001183 12r00r00         [24] 3497 	lcall	_stack_pop
      001186 AB 82            [24] 3498 	mov	r3,dpl
      001188 AC 83            [24] 3499 	mov	r4,dph
      00118A 15 81            [12] 3500 	dec	sp
      00118C 15 81            [12] 3501 	dec	sp
      00118E 15 81            [12] 3502 	dec	sp
      001190 EB               [12] 3503 	mov	a,r3
      001191 4C               [12] 3504 	orl	a,r4
      001192 70 63            [24] 3505 	jnz	00147$
                                   3506 ;	calc.c:191: printstr("\r\nsecondary stack underflow\r\n");
      001194 7Fr69            [12] 3507 	mov	r7,#___str_10
      001196 7Es00            [12] 3508 	mov	r6,#(___str_10 >> 8)
      001198 7D 80            [12] 3509 	mov	r5,#0x80
                                   3510 ;	calc.c:51: return;
      00119A                       3511 00421$:
                                   3512 ;	calc.c:49: for (; *s; s++) putchar(*s);
      00119A 8F 82            [24] 3513 	mov	dpl,r7
      00119C 8E 83            [24] 3514 	mov	dph,r6
      00119E 8D F0            [24] 3515 	mov	b,r5
      0011A0 12r00r00         [24] 3516 	lcall	__gptrget
      0011A3 FC               [12] 3517 	mov	r4,a
      0011A4 60 10            [24] 3518 	jz	00299$
      0011A6 7B 00            [12] 3519 	mov	r3,#0x00
      0011A8 8C 82            [24] 3520 	mov	dpl,r4
      0011AA 8B 83            [24] 3521 	mov	dph,r3
      0011AC 12r00r00         [24] 3522 	lcall	_putchar
      0011AF 0F               [12] 3523 	inc	r7
                                   3524 ;	calc.c:191: printstr("\r\nsecondary stack underflow\r\n");
      0011B0 BF 00 E7         [24] 3525 	cjne	r7,#0x00,00421$
      0011B3 0E               [12] 3526 	inc	r6
      0011B4 80 E4            [24] 3527 	sjmp	00421$
      0011B6                       3528 00299$:
                                   3529 ;	calc.c:192: (void)stack_push(ctx->ps, d0);
      0011B6 E5*00            [12] 3530 	mov	a,_bp
      0011B8 24 07            [12] 3531 	add	a,#0x07
      0011BA F8               [12] 3532 	mov	r0,a
      0011BB 86 82            [24] 3533 	mov	dpl,@r0
      0011BD 08               [12] 3534 	inc	r0
      0011BE 86 83            [24] 3535 	mov	dph,@r0
      0011C0 08               [12] 3536 	inc	r0
      0011C1 86 F0            [24] 3537 	mov	b,@r0
      0011C3 12r00r00         [24] 3538 	lcall	__gptrget
      0011C6 FA               [12] 3539 	mov	r2,a
      0011C7 A3               [24] 3540 	inc	dptr
      0011C8 12r00r00         [24] 3541 	lcall	__gptrget
      0011CB FB               [12] 3542 	mov	r3,a
      0011CC A3               [24] 3543 	inc	dptr
      0011CD 12r00r00         [24] 3544 	lcall	__gptrget
      0011D0 FC               [12] 3545 	mov	r4,a
      0011D1 E5*00            [12] 3546 	mov	a,_bp
      0011D3 24 15            [12] 3547 	add	a,#0x15
      0011D5 F8               [12] 3548 	mov	r0,a
      0011D6 E6               [12] 3549 	mov	a,@r0
      0011D7 C0 E0            [24] 3550 	push	acc
      0011D9 08               [12] 3551 	inc	r0
      0011DA E6               [12] 3552 	mov	a,@r0
      0011DB C0 E0            [24] 3553 	push	acc
      0011DD 08               [12] 3554 	inc	r0
      0011DE E6               [12] 3555 	mov	a,@r0
      0011DF C0 E0            [24] 3556 	push	acc
      0011E1 08               [12] 3557 	inc	r0
      0011E2 E6               [12] 3558 	mov	a,@r0
      0011E3 C0 E0            [24] 3559 	push	acc
      0011E5 8A 82            [24] 3560 	mov	dpl,r2
      0011E7 8B 83            [24] 3561 	mov	dph,r3
      0011E9 8C F0            [24] 3562 	mov	b,r4
      0011EB 12r00r00         [24] 3563 	lcall	_stack_push
      0011EE E5 81            [12] 3564 	mov	a,sp
      0011F0 24 FC            [12] 3565 	add	a,#0xfc
      0011F2 F5 81            [12] 3566 	mov	sp,a
      0011F4 02r28r30         [24] 3567 	ljmp	00249$
      0011F7                       3568 00147$:
                                   3569 ;	calc.c:194: (void)stack_push(ctx->ps, d1);
      0011F7 E5*00            [12] 3570 	mov	a,_bp
      0011F9 24 07            [12] 3571 	add	a,#0x07
      0011FB F8               [12] 3572 	mov	r0,a
      0011FC 86 82            [24] 3573 	mov	dpl,@r0
      0011FE 08               [12] 3574 	inc	r0
      0011FF 86 83            [24] 3575 	mov	dph,@r0
      001201 08               [12] 3576 	inc	r0
      001202 86 F0            [24] 3577 	mov	b,@r0
      001204 12r00r00         [24] 3578 	lcall	__gptrget
      001207 FA               [12] 3579 	mov	r2,a
      001208 A3               [24] 3580 	inc	dptr
      001209 12r00r00         [24] 3581 	lcall	__gptrget
      00120C FB               [12] 3582 	mov	r3,a
      00120D A3               [24] 3583 	inc	dptr
      00120E 12r00r00         [24] 3584 	lcall	__gptrget
      001211 FC               [12] 3585 	mov	r4,a
      001212 E5*00            [12] 3586 	mov	a,_bp
      001214 24 19            [12] 3587 	add	a,#0x19
      001216 F8               [12] 3588 	mov	r0,a
      001217 E6               [12] 3589 	mov	a,@r0
      001218 C0 E0            [24] 3590 	push	acc
      00121A 08               [12] 3591 	inc	r0
      00121B E6               [12] 3592 	mov	a,@r0
      00121C C0 E0            [24] 3593 	push	acc
      00121E 08               [12] 3594 	inc	r0
      00121F E6               [12] 3595 	mov	a,@r0
      001220 C0 E0            [24] 3596 	push	acc
      001222 08               [12] 3597 	inc	r0
      001223 E6               [12] 3598 	mov	a,@r0
      001224 C0 E0            [24] 3599 	push	acc
      001226 8A 82            [24] 3600 	mov	dpl,r2
      001228 8B 83            [24] 3601 	mov	dph,r3
      00122A 8C F0            [24] 3602 	mov	b,r4
      00122C 12r00r00         [24] 3603 	lcall	_stack_push
      00122F E5 81            [12] 3604 	mov	a,sp
      001231 24 FC            [12] 3605 	add	a,#0xfc
      001233 F5 81            [12] 3606 	mov	sp,a
                                   3607 ;	calc.c:195: (void)stack_push(ctx->ss, d0);
      001235 E5*00            [12] 3608 	mov	a,_bp
      001237 24 04            [12] 3609 	add	a,#0x04
      001239 F8               [12] 3610 	mov	r0,a
      00123A 86 82            [24] 3611 	mov	dpl,@r0
      00123C 08               [12] 3612 	inc	r0
      00123D 86 83            [24] 3613 	mov	dph,@r0
      00123F 08               [12] 3614 	inc	r0
      001240 86 F0            [24] 3615 	mov	b,@r0
      001242 12r00r00         [24] 3616 	lcall	__gptrget
      001245 FA               [12] 3617 	mov	r2,a
      001246 A3               [24] 3618 	inc	dptr
      001247 12r00r00         [24] 3619 	lcall	__gptrget
      00124A FB               [12] 3620 	mov	r3,a
      00124B A3               [24] 3621 	inc	dptr
      00124C 12r00r00         [24] 3622 	lcall	__gptrget
      00124F FC               [12] 3623 	mov	r4,a
      001250 E5*00            [12] 3624 	mov	a,_bp
      001252 24 15            [12] 3625 	add	a,#0x15
      001254 F8               [12] 3626 	mov	r0,a
      001255 E6               [12] 3627 	mov	a,@r0
      001256 C0 E0            [24] 3628 	push	acc
      001258 08               [12] 3629 	inc	r0
      001259 E6               [12] 3630 	mov	a,@r0
      00125A C0 E0            [24] 3631 	push	acc
      00125C 08               [12] 3632 	inc	r0
      00125D E6               [12] 3633 	mov	a,@r0
      00125E C0 E0            [24] 3634 	push	acc
      001260 08               [12] 3635 	inc	r0
      001261 E6               [12] 3636 	mov	a,@r0
      001262 C0 E0            [24] 3637 	push	acc
      001264 8A 82            [24] 3638 	mov	dpl,r2
      001266 8B 83            [24] 3639 	mov	dph,r3
      001268 8C F0            [24] 3640 	mov	b,r4
      00126A 12r00r00         [24] 3641 	lcall	_stack_push
      00126D E5 81            [12] 3642 	mov	a,sp
      00126F 24 FC            [12] 3643 	add	a,#0xfc
      001271 F5 81            [12] 3644 	mov	sp,a
                                   3645 ;	calc.c:198: break;
      001273 02r28r30         [24] 3646 	ljmp	00249$
                                   3647 ;	calc.c:199: case 'X':
      001276                       3648 00152$:
                                   3649 ;	calc.c:200: t0 = ctx->ps;
      001276 E5*00            [12] 3650 	mov	a,_bp
      001278 24 12            [12] 3651 	add	a,#0x12
      00127A F8               [12] 3652 	mov	r0,a
      00127B E5*00            [12] 3653 	mov	a,_bp
      00127D 24 0B            [12] 3654 	add	a,#0x0b
      00127F F9               [12] 3655 	mov	r1,a
      001280 74 11            [12] 3656 	mov	a,#0x11
      001282 26               [12] 3657 	add	a,@r0
      001283 F7               [12] 3658 	mov	@r1,a
      001284 74 40            [12] 3659 	mov	a,#0x40
      001286 08               [12] 3660 	inc	r0
      001287 36               [12] 3661 	addc	a,@r0
      001288 09               [12] 3662 	inc	r1
      001289 F7               [12] 3663 	mov	@r1,a
      00128A 08               [12] 3664 	inc	r0
      00128B 09               [12] 3665 	inc	r1
      00128C E6               [12] 3666 	mov	a,@r0
      00128D F7               [12] 3667 	mov	@r1,a
      00128E E5*00            [12] 3668 	mov	a,_bp
      001290 24 0B            [12] 3669 	add	a,#0x0b
      001292 F8               [12] 3670 	mov	r0,a
      001293 86 82            [24] 3671 	mov	dpl,@r0
      001295 08               [12] 3672 	inc	r0
      001296 86 83            [24] 3673 	mov	dph,@r0
      001298 08               [12] 3674 	inc	r0
      001299 86 F0            [24] 3675 	mov	b,@r0
      00129B 12r00r00         [24] 3676 	lcall	__gptrget
      00129E FF               [12] 3677 	mov	r7,a
      00129F A3               [24] 3678 	inc	dptr
      0012A0 12r00r00         [24] 3679 	lcall	__gptrget
      0012A3 FE               [12] 3680 	mov	r6,a
      0012A4 A3               [24] 3681 	inc	dptr
      0012A5 12r00r00         [24] 3682 	lcall	__gptrget
      0012A8 FD               [12] 3683 	mov	r5,a
                                   3684 ;	calc.c:201: ctx->ps = ctx->ss;
      0012A9 E5*00            [12] 3685 	mov	a,_bp
      0012AB 24 12            [12] 3686 	add	a,#0x12
      0012AD F8               [12] 3687 	mov	r0,a
      0012AE E5*00            [12] 3688 	mov	a,_bp
      0012B0 24 07            [12] 3689 	add	a,#0x07
      0012B2 F9               [12] 3690 	mov	r1,a
      0012B3 74 14            [12] 3691 	mov	a,#0x14
      0012B5 26               [12] 3692 	add	a,@r0
      0012B6 F7               [12] 3693 	mov	@r1,a
      0012B7 74 40            [12] 3694 	mov	a,#0x40
      0012B9 08               [12] 3695 	inc	r0
      0012BA 36               [12] 3696 	addc	a,@r0
      0012BB 09               [12] 3697 	inc	r1
      0012BC F7               [12] 3698 	mov	@r1,a
      0012BD 08               [12] 3699 	inc	r0
      0012BE 09               [12] 3700 	inc	r1
      0012BF E6               [12] 3701 	mov	a,@r0
      0012C0 F7               [12] 3702 	mov	@r1,a
      0012C1 E5*00            [12] 3703 	mov	a,_bp
      0012C3 24 07            [12] 3704 	add	a,#0x07
      0012C5 F8               [12] 3705 	mov	r0,a
      0012C6 86 82            [24] 3706 	mov	dpl,@r0
      0012C8 08               [12] 3707 	inc	r0
      0012C9 86 83            [24] 3708 	mov	dph,@r0
      0012CB 08               [12] 3709 	inc	r0
      0012CC 86 F0            [24] 3710 	mov	b,@r0
      0012CE 12r00r00         [24] 3711 	lcall	__gptrget
      0012D1 FA               [12] 3712 	mov	r2,a
      0012D2 A3               [24] 3713 	inc	dptr
      0012D3 12r00r00         [24] 3714 	lcall	__gptrget
      0012D6 FB               [12] 3715 	mov	r3,a
      0012D7 A3               [24] 3716 	inc	dptr
      0012D8 12r00r00         [24] 3717 	lcall	__gptrget
      0012DB FC               [12] 3718 	mov	r4,a
      0012DC E5*00            [12] 3719 	mov	a,_bp
      0012DE 24 0B            [12] 3720 	add	a,#0x0b
      0012E0 F8               [12] 3721 	mov	r0,a
      0012E1 86 82            [24] 3722 	mov	dpl,@r0
      0012E3 08               [12] 3723 	inc	r0
      0012E4 86 83            [24] 3724 	mov	dph,@r0
      0012E6 08               [12] 3725 	inc	r0
      0012E7 86 F0            [24] 3726 	mov	b,@r0
      0012E9 EA               [12] 3727 	mov	a,r2
      0012EA 12r00r00         [24] 3728 	lcall	__gptrput
      0012ED A3               [24] 3729 	inc	dptr
      0012EE EB               [12] 3730 	mov	a,r3
      0012EF 12r00r00         [24] 3731 	lcall	__gptrput
      0012F2 A3               [24] 3732 	inc	dptr
      0012F3 EC               [12] 3733 	mov	a,r4
      0012F4 12r00r00         [24] 3734 	lcall	__gptrput
                                   3735 ;	calc.c:202: ctx->ss = t0;
      0012F7 E5*00            [12] 3736 	mov	a,_bp
      0012F9 24 07            [12] 3737 	add	a,#0x07
      0012FB F8               [12] 3738 	mov	r0,a
      0012FC 86 82            [24] 3739 	mov	dpl,@r0
      0012FE 08               [12] 3740 	inc	r0
      0012FF 86 83            [24] 3741 	mov	dph,@r0
      001301 08               [12] 3742 	inc	r0
      001302 86 F0            [24] 3743 	mov	b,@r0
      001304 EF               [12] 3744 	mov	a,r7
      001305 12r00r00         [24] 3745 	lcall	__gptrput
      001308 A3               [24] 3746 	inc	dptr
      001309 EE               [12] 3747 	mov	a,r6
      00130A 12r00r00         [24] 3748 	lcall	__gptrput
      00130D A3               [24] 3749 	inc	dptr
      00130E ED               [12] 3750 	mov	a,r5
      00130F 12r00r00         [24] 3751 	lcall	__gptrput
                                   3752 ;	calc.c:203: break;
      001312 02r28r30         [24] 3753 	ljmp	00249$
                                   3754 ;	calc.c:204: case '+':
      001315                       3755 00153$:
                                   3756 ;	calc.c:205: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      001315 E5*00            [12] 3757 	mov	a,_bp
      001317 24 15            [12] 3758 	add	a,#0x15
      001319 FF               [12] 3759 	mov	r7,a
      00131A 7E 00            [12] 3760 	mov	r6,#0x00
      00131C 7D 40            [12] 3761 	mov	r5,#0x40
      00131E E5*00            [12] 3762 	mov	a,_bp
      001320 24 12            [12] 3763 	add	a,#0x12
      001322 F8               [12] 3764 	mov	r0,a
      001323 E5*00            [12] 3765 	mov	a,_bp
      001325 24 0B            [12] 3766 	add	a,#0x0b
      001327 F9               [12] 3767 	mov	r1,a
      001328 74 11            [12] 3768 	mov	a,#0x11
      00132A 26               [12] 3769 	add	a,@r0
      00132B F7               [12] 3770 	mov	@r1,a
      00132C 74 40            [12] 3771 	mov	a,#0x40
      00132E 08               [12] 3772 	inc	r0
      00132F 36               [12] 3773 	addc	a,@r0
      001330 09               [12] 3774 	inc	r1
      001331 F7               [12] 3775 	mov	@r1,a
      001332 08               [12] 3776 	inc	r0
      001333 09               [12] 3777 	inc	r1
      001334 E6               [12] 3778 	mov	a,@r0
      001335 F7               [12] 3779 	mov	@r1,a
      001336 E5*00            [12] 3780 	mov	a,_bp
      001338 24 0B            [12] 3781 	add	a,#0x0b
      00133A F8               [12] 3782 	mov	r0,a
      00133B 86 82            [24] 3783 	mov	dpl,@r0
      00133D 08               [12] 3784 	inc	r0
      00133E 86 83            [24] 3785 	mov	dph,@r0
      001340 08               [12] 3786 	inc	r0
      001341 86 F0            [24] 3787 	mov	b,@r0
      001343 12r00r00         [24] 3788 	lcall	__gptrget
      001346 FA               [12] 3789 	mov	r2,a
      001347 A3               [24] 3790 	inc	dptr
      001348 12r00r00         [24] 3791 	lcall	__gptrget
      00134B FB               [12] 3792 	mov	r3,a
      00134C A3               [24] 3793 	inc	dptr
      00134D 12r00r00         [24] 3794 	lcall	__gptrget
      001350 FC               [12] 3795 	mov	r4,a
      001351 C0 07            [24] 3796 	push	ar7
      001353 C0 06            [24] 3797 	push	ar6
      001355 C0 05            [24] 3798 	push	ar5
      001357 8A 82            [24] 3799 	mov	dpl,r2
      001359 8B 83            [24] 3800 	mov	dph,r3
      00135B 8C F0            [24] 3801 	mov	b,r4
      00135D 12r00r00         [24] 3802 	lcall	_stack_pop
      001360 AB 82            [24] 3803 	mov	r3,dpl
      001362 AC 83            [24] 3804 	mov	r4,dph
      001364 15 81            [12] 3805 	dec	sp
      001366 15 81            [12] 3806 	dec	sp
      001368 15 81            [12] 3807 	dec	sp
      00136A EB               [12] 3808 	mov	a,r3
      00136B 4C               [12] 3809 	orl	a,r4
      00136C 70 25            [24] 3810 	jnz	00158$
      00136E 7Fr38            [12] 3811 	mov	r7,#___str_8
      001370 7Es00            [12] 3812 	mov	r6,#(___str_8 >> 8)
      001372 7D 80            [12] 3813 	mov	r5,#0x80
                                   3814 ;	calc.c:51: return;
      001374                       3815 00424$:
                                   3816 ;	calc.c:49: for (; *s; s++) putchar(*s);
      001374 8F 82            [24] 3817 	mov	dpl,r7
      001376 8E 83            [24] 3818 	mov	dph,r6
      001378 8D F0            [24] 3819 	mov	b,r5
      00137A 12r00r00         [24] 3820 	lcall	__gptrget
      00137D FC               [12] 3821 	mov	r4,a
      00137E 70 03            [24] 3822 	jnz	01324$
      001380 02r28r30         [24] 3823 	ljmp	00249$
      001383                       3824 01324$:
      001383 7B 00            [12] 3825 	mov	r3,#0x00
      001385 8C 82            [24] 3826 	mov	dpl,r4
      001387 8B 83            [24] 3827 	mov	dph,r3
      001389 12r00r00         [24] 3828 	lcall	_putchar
      00138C 0F               [12] 3829 	inc	r7
                                   3830 ;	calc.c:205: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      00138D BF 00 E4         [24] 3831 	cjne	r7,#0x00,00424$
      001390 0E               [12] 3832 	inc	r6
      001391 80 E1            [24] 3833 	sjmp	00424$
      001393                       3834 00158$:
                                   3835 ;	calc.c:206: else if (!stack_pop(ctx->ps, &d1)) {
      001393 E5*00            [12] 3836 	mov	a,_bp
      001395 24 19            [12] 3837 	add	a,#0x19
      001397 FF               [12] 3838 	mov	r7,a
      001398 7E 00            [12] 3839 	mov	r6,#0x00
      00139A 7D 40            [12] 3840 	mov	r5,#0x40
      00139C E5*00            [12] 3841 	mov	a,_bp
      00139E 24 0B            [12] 3842 	add	a,#0x0b
      0013A0 F8               [12] 3843 	mov	r0,a
      0013A1 86 82            [24] 3844 	mov	dpl,@r0
      0013A3 08               [12] 3845 	inc	r0
      0013A4 86 83            [24] 3846 	mov	dph,@r0
      0013A6 08               [12] 3847 	inc	r0
      0013A7 86 F0            [24] 3848 	mov	b,@r0
      0013A9 12r00r00         [24] 3849 	lcall	__gptrget
      0013AC FA               [12] 3850 	mov	r2,a
      0013AD A3               [24] 3851 	inc	dptr
      0013AE 12r00r00         [24] 3852 	lcall	__gptrget
      0013B1 FB               [12] 3853 	mov	r3,a
      0013B2 A3               [24] 3854 	inc	dptr
      0013B3 12r00r00         [24] 3855 	lcall	__gptrget
      0013B6 FC               [12] 3856 	mov	r4,a
      0013B7 C0 07            [24] 3857 	push	ar7
      0013B9 C0 06            [24] 3858 	push	ar6
      0013BB C0 05            [24] 3859 	push	ar5
      0013BD 8A 82            [24] 3860 	mov	dpl,r2
      0013BF 8B 83            [24] 3861 	mov	dph,r3
      0013C1 8C F0            [24] 3862 	mov	b,r4
      0013C3 12r00r00         [24] 3863 	lcall	_stack_pop
      0013C6 AB 82            [24] 3864 	mov	r3,dpl
      0013C8 AC 83            [24] 3865 	mov	r4,dph
      0013CA 15 81            [12] 3866 	dec	sp
      0013CC 15 81            [12] 3867 	dec	sp
      0013CE 15 81            [12] 3868 	dec	sp
      0013D0 EB               [12] 3869 	mov	a,r3
      0013D1 4C               [12] 3870 	orl	a,r4
      0013D2 70 63            [24] 3871 	jnz	00155$
                                   3872 ;	calc.c:207: (void)stack_push(ctx->ps, d0);
      0013D4 E5*00            [12] 3873 	mov	a,_bp
      0013D6 24 0B            [12] 3874 	add	a,#0x0b
      0013D8 F8               [12] 3875 	mov	r0,a
      0013D9 86 82            [24] 3876 	mov	dpl,@r0
      0013DB 08               [12] 3877 	inc	r0
      0013DC 86 83            [24] 3878 	mov	dph,@r0
      0013DE 08               [12] 3879 	inc	r0
      0013DF 86 F0            [24] 3880 	mov	b,@r0
      0013E1 12r00r00         [24] 3881 	lcall	__gptrget
      0013E4 FA               [12] 3882 	mov	r2,a
      0013E5 A3               [24] 3883 	inc	dptr
      0013E6 12r00r00         [24] 3884 	lcall	__gptrget
      0013E9 FB               [12] 3885 	mov	r3,a
      0013EA A3               [24] 3886 	inc	dptr
      0013EB 12r00r00         [24] 3887 	lcall	__gptrget
      0013EE FC               [12] 3888 	mov	r4,a
      0013EF E5*00            [12] 3889 	mov	a,_bp
      0013F1 24 15            [12] 3890 	add	a,#0x15
      0013F3 F8               [12] 3891 	mov	r0,a
      0013F4 E6               [12] 3892 	mov	a,@r0
      0013F5 C0 E0            [24] 3893 	push	acc
      0013F7 08               [12] 3894 	inc	r0
      0013F8 E6               [12] 3895 	mov	a,@r0
      0013F9 C0 E0            [24] 3896 	push	acc
      0013FB 08               [12] 3897 	inc	r0
      0013FC E6               [12] 3898 	mov	a,@r0
      0013FD C0 E0            [24] 3899 	push	acc
      0013FF 08               [12] 3900 	inc	r0
      001400 E6               [12] 3901 	mov	a,@r0
      001401 C0 E0            [24] 3902 	push	acc
      001403 8A 82            [24] 3903 	mov	dpl,r2
      001405 8B 83            [24] 3904 	mov	dph,r3
      001407 8C F0            [24] 3905 	mov	b,r4
      001409 12r00r00         [24] 3906 	lcall	_stack_push
      00140C E5 81            [12] 3907 	mov	a,sp
      00140E 24 FC            [12] 3908 	add	a,#0xfc
      001410 F5 81            [12] 3909 	mov	sp,a
                                   3910 ;	calc.c:208: printstr("\r\nstack underflow\r\n");
      001412 7Fr38            [12] 3911 	mov	r7,#___str_8
      001414 7Es00            [12] 3912 	mov	r6,#(___str_8 >> 8)
      001416 7D 80            [12] 3913 	mov	r5,#0x80
                                   3914 ;	calc.c:51: return;
      001418                       3915 00427$:
                                   3916 ;	calc.c:49: for (; *s; s++) putchar(*s);
      001418 8F 82            [24] 3917 	mov	dpl,r7
      00141A 8E 83            [24] 3918 	mov	dph,r6
      00141C 8D F0            [24] 3919 	mov	b,r5
      00141E 12r00r00         [24] 3920 	lcall	__gptrget
      001421 FC               [12] 3921 	mov	r4,a
      001422 70 03            [24] 3922 	jnz	01327$
      001424 02r28r30         [24] 3923 	ljmp	00249$
      001427                       3924 01327$:
      001427 7B 00            [12] 3925 	mov	r3,#0x00
      001429 8C 82            [24] 3926 	mov	dpl,r4
      00142B 8B 83            [24] 3927 	mov	dph,r3
      00142D 12r00r00         [24] 3928 	lcall	_putchar
      001430 0F               [12] 3929 	inc	r7
                                   3930 ;	calc.c:208: printstr("\r\nstack underflow\r\n");
      001431 BF 00 E4         [24] 3931 	cjne	r7,#0x00,00427$
      001434 0E               [12] 3932 	inc	r6
      001435 80 E1            [24] 3933 	sjmp	00427$
      001437                       3934 00155$:
                                   3935 ;	calc.c:210: d1 += d0;
      001437 E5*00            [12] 3936 	mov	a,_bp
      001439 24 19            [12] 3937 	add	a,#0x19
      00143B F8               [12] 3938 	mov	r0,a
      00143C E5*00            [12] 3939 	mov	a,_bp
      00143E 24 15            [12] 3940 	add	a,#0x15
      001440 F9               [12] 3941 	mov	r1,a
      001441 E7               [12] 3942 	mov	a,@r1
      001442 26               [12] 3943 	add	a,@r0
      001443 F6               [12] 3944 	mov	@r0,a
      001444 09               [12] 3945 	inc	r1
      001445 E7               [12] 3946 	mov	a,@r1
      001446 08               [12] 3947 	inc	r0
      001447 36               [12] 3948 	addc	a,@r0
      001448 F6               [12] 3949 	mov	@r0,a
      001449 09               [12] 3950 	inc	r1
      00144A E7               [12] 3951 	mov	a,@r1
      00144B 08               [12] 3952 	inc	r0
      00144C 36               [12] 3953 	addc	a,@r0
      00144D F6               [12] 3954 	mov	@r0,a
      00144E 09               [12] 3955 	inc	r1
      00144F E7               [12] 3956 	mov	a,@r1
      001450 08               [12] 3957 	inc	r0
      001451 36               [12] 3958 	addc	a,@r0
      001452 F6               [12] 3959 	mov	@r0,a
                                   3960 ;	calc.c:211: (void)stack_push(ctx->ps, d1);
      001453 E5*00            [12] 3961 	mov	a,_bp
      001455 24 0B            [12] 3962 	add	a,#0x0b
      001457 F8               [12] 3963 	mov	r0,a
      001458 86 82            [24] 3964 	mov	dpl,@r0
      00145A 08               [12] 3965 	inc	r0
      00145B 86 83            [24] 3966 	mov	dph,@r0
      00145D 08               [12] 3967 	inc	r0
      00145E 86 F0            [24] 3968 	mov	b,@r0
      001460 12r00r00         [24] 3969 	lcall	__gptrget
      001463 FA               [12] 3970 	mov	r2,a
      001464 A3               [24] 3971 	inc	dptr
      001465 12r00r00         [24] 3972 	lcall	__gptrget
      001468 FB               [12] 3973 	mov	r3,a
      001469 A3               [24] 3974 	inc	dptr
      00146A 12r00r00         [24] 3975 	lcall	__gptrget
      00146D FC               [12] 3976 	mov	r4,a
      00146E E5*00            [12] 3977 	mov	a,_bp
      001470 24 19            [12] 3978 	add	a,#0x19
      001472 F8               [12] 3979 	mov	r0,a
      001473 E6               [12] 3980 	mov	a,@r0
      001474 C0 E0            [24] 3981 	push	acc
      001476 08               [12] 3982 	inc	r0
      001477 E6               [12] 3983 	mov	a,@r0
      001478 C0 E0            [24] 3984 	push	acc
      00147A 08               [12] 3985 	inc	r0
      00147B E6               [12] 3986 	mov	a,@r0
      00147C C0 E0            [24] 3987 	push	acc
      00147E 08               [12] 3988 	inc	r0
      00147F E6               [12] 3989 	mov	a,@r0
      001480 C0 E0            [24] 3990 	push	acc
      001482 8A 82            [24] 3991 	mov	dpl,r2
      001484 8B 83            [24] 3992 	mov	dph,r3
      001486 8C F0            [24] 3993 	mov	b,r4
      001488 12r00r00         [24] 3994 	lcall	_stack_push
      00148B E5 81            [12] 3995 	mov	a,sp
      00148D 24 FC            [12] 3996 	add	a,#0xfc
      00148F F5 81            [12] 3997 	mov	sp,a
                                   3998 ;	calc.c:213: break;
      001491 02r28r30         [24] 3999 	ljmp	00249$
                                   4000 ;	calc.c:214: case '-':
      001494                       4001 00160$:
                                   4002 ;	calc.c:215: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      001494 E5*00            [12] 4003 	mov	a,_bp
      001496 24 15            [12] 4004 	add	a,#0x15
      001498 FF               [12] 4005 	mov	r7,a
      001499 7E 00            [12] 4006 	mov	r6,#0x00
      00149B 7D 40            [12] 4007 	mov	r5,#0x40
      00149D E5*00            [12] 4008 	mov	a,_bp
      00149F 24 12            [12] 4009 	add	a,#0x12
      0014A1 F8               [12] 4010 	mov	r0,a
      0014A2 E5*00            [12] 4011 	mov	a,_bp
      0014A4 24 0B            [12] 4012 	add	a,#0x0b
      0014A6 F9               [12] 4013 	mov	r1,a
      0014A7 74 11            [12] 4014 	mov	a,#0x11
      0014A9 26               [12] 4015 	add	a,@r0
      0014AA F7               [12] 4016 	mov	@r1,a
      0014AB 74 40            [12] 4017 	mov	a,#0x40
      0014AD 08               [12] 4018 	inc	r0
      0014AE 36               [12] 4019 	addc	a,@r0
      0014AF 09               [12] 4020 	inc	r1
      0014B0 F7               [12] 4021 	mov	@r1,a
      0014B1 08               [12] 4022 	inc	r0
      0014B2 09               [12] 4023 	inc	r1
      0014B3 E6               [12] 4024 	mov	a,@r0
      0014B4 F7               [12] 4025 	mov	@r1,a
      0014B5 E5*00            [12] 4026 	mov	a,_bp
      0014B7 24 0B            [12] 4027 	add	a,#0x0b
      0014B9 F8               [12] 4028 	mov	r0,a
      0014BA 86 82            [24] 4029 	mov	dpl,@r0
      0014BC 08               [12] 4030 	inc	r0
      0014BD 86 83            [24] 4031 	mov	dph,@r0
      0014BF 08               [12] 4032 	inc	r0
      0014C0 86 F0            [24] 4033 	mov	b,@r0
      0014C2 12r00r00         [24] 4034 	lcall	__gptrget
      0014C5 FA               [12] 4035 	mov	r2,a
      0014C6 A3               [24] 4036 	inc	dptr
      0014C7 12r00r00         [24] 4037 	lcall	__gptrget
      0014CA FB               [12] 4038 	mov	r3,a
      0014CB A3               [24] 4039 	inc	dptr
      0014CC 12r00r00         [24] 4040 	lcall	__gptrget
      0014CF FC               [12] 4041 	mov	r4,a
      0014D0 C0 07            [24] 4042 	push	ar7
      0014D2 C0 06            [24] 4043 	push	ar6
      0014D4 C0 05            [24] 4044 	push	ar5
      0014D6 8A 82            [24] 4045 	mov	dpl,r2
      0014D8 8B 83            [24] 4046 	mov	dph,r3
      0014DA 8C F0            [24] 4047 	mov	b,r4
      0014DC 12r00r00         [24] 4048 	lcall	_stack_pop
      0014DF AB 82            [24] 4049 	mov	r3,dpl
      0014E1 AC 83            [24] 4050 	mov	r4,dph
      0014E3 15 81            [12] 4051 	dec	sp
      0014E5 15 81            [12] 4052 	dec	sp
      0014E7 15 81            [12] 4053 	dec	sp
      0014E9 EB               [12] 4054 	mov	a,r3
      0014EA 4C               [12] 4055 	orl	a,r4
      0014EB 70 25            [24] 4056 	jnz	00165$
      0014ED 7Fr38            [12] 4057 	mov	r7,#___str_8
      0014EF 7Es00            [12] 4058 	mov	r6,#(___str_8 >> 8)
      0014F1 7D 80            [12] 4059 	mov	r5,#0x80
                                   4060 ;	calc.c:51: return;
      0014F3                       4061 00430$:
                                   4062 ;	calc.c:49: for (; *s; s++) putchar(*s);
      0014F3 8F 82            [24] 4063 	mov	dpl,r7
      0014F5 8E 83            [24] 4064 	mov	dph,r6
      0014F7 8D F0            [24] 4065 	mov	b,r5
      0014F9 12r00r00         [24] 4066 	lcall	__gptrget
      0014FC FC               [12] 4067 	mov	r4,a
      0014FD 70 03            [24] 4068 	jnz	01330$
      0014FF 02r28r30         [24] 4069 	ljmp	00249$
      001502                       4070 01330$:
      001502 7B 00            [12] 4071 	mov	r3,#0x00
      001504 8C 82            [24] 4072 	mov	dpl,r4
      001506 8B 83            [24] 4073 	mov	dph,r3
      001508 12r00r00         [24] 4074 	lcall	_putchar
      00150B 0F               [12] 4075 	inc	r7
                                   4076 ;	calc.c:215: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      00150C BF 00 E4         [24] 4077 	cjne	r7,#0x00,00430$
      00150F 0E               [12] 4078 	inc	r6
      001510 80 E1            [24] 4079 	sjmp	00430$
      001512                       4080 00165$:
                                   4081 ;	calc.c:216: else if (!stack_pop(ctx->ps, &d1)) {
      001512 E5*00            [12] 4082 	mov	a,_bp
      001514 24 19            [12] 4083 	add	a,#0x19
      001516 FF               [12] 4084 	mov	r7,a
      001517 7E 00            [12] 4085 	mov	r6,#0x00
      001519 7D 40            [12] 4086 	mov	r5,#0x40
      00151B E5*00            [12] 4087 	mov	a,_bp
      00151D 24 0B            [12] 4088 	add	a,#0x0b
      00151F F8               [12] 4089 	mov	r0,a
      001520 86 82            [24] 4090 	mov	dpl,@r0
      001522 08               [12] 4091 	inc	r0
      001523 86 83            [24] 4092 	mov	dph,@r0
      001525 08               [12] 4093 	inc	r0
      001526 86 F0            [24] 4094 	mov	b,@r0
      001528 12r00r00         [24] 4095 	lcall	__gptrget
      00152B FA               [12] 4096 	mov	r2,a
      00152C A3               [24] 4097 	inc	dptr
      00152D 12r00r00         [24] 4098 	lcall	__gptrget
      001530 FB               [12] 4099 	mov	r3,a
      001531 A3               [24] 4100 	inc	dptr
      001532 12r00r00         [24] 4101 	lcall	__gptrget
      001535 FC               [12] 4102 	mov	r4,a
      001536 C0 07            [24] 4103 	push	ar7
      001538 C0 06            [24] 4104 	push	ar6
      00153A C0 05            [24] 4105 	push	ar5
      00153C 8A 82            [24] 4106 	mov	dpl,r2
      00153E 8B 83            [24] 4107 	mov	dph,r3
      001540 8C F0            [24] 4108 	mov	b,r4
      001542 12r00r00         [24] 4109 	lcall	_stack_pop
      001545 AB 82            [24] 4110 	mov	r3,dpl
      001547 AC 83            [24] 4111 	mov	r4,dph
      001549 15 81            [12] 4112 	dec	sp
      00154B 15 81            [12] 4113 	dec	sp
      00154D 15 81            [12] 4114 	dec	sp
      00154F EB               [12] 4115 	mov	a,r3
      001550 4C               [12] 4116 	orl	a,r4
      001551 70 63            [24] 4117 	jnz	00162$
                                   4118 ;	calc.c:217: (void)stack_push(ctx->ps, d0);
      001553 E5*00            [12] 4119 	mov	a,_bp
      001555 24 0B            [12] 4120 	add	a,#0x0b
      001557 F8               [12] 4121 	mov	r0,a
      001558 86 82            [24] 4122 	mov	dpl,@r0
      00155A 08               [12] 4123 	inc	r0
      00155B 86 83            [24] 4124 	mov	dph,@r0
      00155D 08               [12] 4125 	inc	r0
      00155E 86 F0            [24] 4126 	mov	b,@r0
      001560 12r00r00         [24] 4127 	lcall	__gptrget
      001563 FA               [12] 4128 	mov	r2,a
      001564 A3               [24] 4129 	inc	dptr
      001565 12r00r00         [24] 4130 	lcall	__gptrget
      001568 FB               [12] 4131 	mov	r3,a
      001569 A3               [24] 4132 	inc	dptr
      00156A 12r00r00         [24] 4133 	lcall	__gptrget
      00156D FC               [12] 4134 	mov	r4,a
      00156E E5*00            [12] 4135 	mov	a,_bp
      001570 24 15            [12] 4136 	add	a,#0x15
      001572 F8               [12] 4137 	mov	r0,a
      001573 E6               [12] 4138 	mov	a,@r0
      001574 C0 E0            [24] 4139 	push	acc
      001576 08               [12] 4140 	inc	r0
      001577 E6               [12] 4141 	mov	a,@r0
      001578 C0 E0            [24] 4142 	push	acc
      00157A 08               [12] 4143 	inc	r0
      00157B E6               [12] 4144 	mov	a,@r0
      00157C C0 E0            [24] 4145 	push	acc
      00157E 08               [12] 4146 	inc	r0
      00157F E6               [12] 4147 	mov	a,@r0
      001580 C0 E0            [24] 4148 	push	acc
      001582 8A 82            [24] 4149 	mov	dpl,r2
      001584 8B 83            [24] 4150 	mov	dph,r3
      001586 8C F0            [24] 4151 	mov	b,r4
      001588 12r00r00         [24] 4152 	lcall	_stack_push
      00158B E5 81            [12] 4153 	mov	a,sp
      00158D 24 FC            [12] 4154 	add	a,#0xfc
      00158F F5 81            [12] 4155 	mov	sp,a
                                   4156 ;	calc.c:218: printstr("\r\nstack underflow\r\n");
      001591 7Fr38            [12] 4157 	mov	r7,#___str_8
      001593 7Es00            [12] 4158 	mov	r6,#(___str_8 >> 8)
      001595 7D 80            [12] 4159 	mov	r5,#0x80
                                   4160 ;	calc.c:51: return;
      001597                       4161 00433$:
                                   4162 ;	calc.c:49: for (; *s; s++) putchar(*s);
      001597 8F 82            [24] 4163 	mov	dpl,r7
      001599 8E 83            [24] 4164 	mov	dph,r6
      00159B 8D F0            [24] 4165 	mov	b,r5
      00159D 12r00r00         [24] 4166 	lcall	__gptrget
      0015A0 FC               [12] 4167 	mov	r4,a
      0015A1 70 03            [24] 4168 	jnz	01333$
      0015A3 02r28r30         [24] 4169 	ljmp	00249$
      0015A6                       4170 01333$:
      0015A6 7B 00            [12] 4171 	mov	r3,#0x00
      0015A8 8C 82            [24] 4172 	mov	dpl,r4
      0015AA 8B 83            [24] 4173 	mov	dph,r3
      0015AC 12r00r00         [24] 4174 	lcall	_putchar
      0015AF 0F               [12] 4175 	inc	r7
                                   4176 ;	calc.c:218: printstr("\r\nstack underflow\r\n");
      0015B0 BF 00 E4         [24] 4177 	cjne	r7,#0x00,00433$
      0015B3 0E               [12] 4178 	inc	r6
      0015B4 80 E1            [24] 4179 	sjmp	00433$
      0015B6                       4180 00162$:
                                   4181 ;	calc.c:220: d1 -= d0;
      0015B6 E5*00            [12] 4182 	mov	a,_bp
      0015B8 24 19            [12] 4183 	add	a,#0x19
      0015BA F8               [12] 4184 	mov	r0,a
      0015BB E5*00            [12] 4185 	mov	a,_bp
      0015BD 24 15            [12] 4186 	add	a,#0x15
      0015BF F9               [12] 4187 	mov	r1,a
      0015C0 E6               [12] 4188 	mov	a,@r0
      0015C1 C3               [12] 4189 	clr	c
      0015C2 97               [12] 4190 	subb	a,@r1
      0015C3 F6               [12] 4191 	mov	@r0,a
      0015C4 08               [12] 4192 	inc	r0
      0015C5 E6               [12] 4193 	mov	a,@r0
      0015C6 09               [12] 4194 	inc	r1
      0015C7 97               [12] 4195 	subb	a,@r1
      0015C8 F6               [12] 4196 	mov	@r0,a
      0015C9 08               [12] 4197 	inc	r0
      0015CA E6               [12] 4198 	mov	a,@r0
      0015CB 09               [12] 4199 	inc	r1
      0015CC 97               [12] 4200 	subb	a,@r1
      0015CD F6               [12] 4201 	mov	@r0,a
      0015CE 08               [12] 4202 	inc	r0
      0015CF E6               [12] 4203 	mov	a,@r0
      0015D0 09               [12] 4204 	inc	r1
      0015D1 97               [12] 4205 	subb	a,@r1
      0015D2 F6               [12] 4206 	mov	@r0,a
                                   4207 ;	calc.c:221: (void)stack_push(ctx->ps, d1);
      0015D3 E5*00            [12] 4208 	mov	a,_bp
      0015D5 24 0B            [12] 4209 	add	a,#0x0b
      0015D7 F8               [12] 4210 	mov	r0,a
      0015D8 86 82            [24] 4211 	mov	dpl,@r0
      0015DA 08               [12] 4212 	inc	r0
      0015DB 86 83            [24] 4213 	mov	dph,@r0
      0015DD 08               [12] 4214 	inc	r0
      0015DE 86 F0            [24] 4215 	mov	b,@r0
      0015E0 12r00r00         [24] 4216 	lcall	__gptrget
      0015E3 FA               [12] 4217 	mov	r2,a
      0015E4 A3               [24] 4218 	inc	dptr
      0015E5 12r00r00         [24] 4219 	lcall	__gptrget
      0015E8 FB               [12] 4220 	mov	r3,a
      0015E9 A3               [24] 4221 	inc	dptr
      0015EA 12r00r00         [24] 4222 	lcall	__gptrget
      0015ED FC               [12] 4223 	mov	r4,a
      0015EE E5*00            [12] 4224 	mov	a,_bp
      0015F0 24 19            [12] 4225 	add	a,#0x19
      0015F2 F8               [12] 4226 	mov	r0,a
      0015F3 E6               [12] 4227 	mov	a,@r0
      0015F4 C0 E0            [24] 4228 	push	acc
      0015F6 08               [12] 4229 	inc	r0
      0015F7 E6               [12] 4230 	mov	a,@r0
      0015F8 C0 E0            [24] 4231 	push	acc
      0015FA 08               [12] 4232 	inc	r0
      0015FB E6               [12] 4233 	mov	a,@r0
      0015FC C0 E0            [24] 4234 	push	acc
      0015FE 08               [12] 4235 	inc	r0
      0015FF E6               [12] 4236 	mov	a,@r0
      001600 C0 E0            [24] 4237 	push	acc
      001602 8A 82            [24] 4238 	mov	dpl,r2
      001604 8B 83            [24] 4239 	mov	dph,r3
      001606 8C F0            [24] 4240 	mov	b,r4
      001608 12r00r00         [24] 4241 	lcall	_stack_push
      00160B E5 81            [12] 4242 	mov	a,sp
      00160D 24 FC            [12] 4243 	add	a,#0xfc
      00160F F5 81            [12] 4244 	mov	sp,a
                                   4245 ;	calc.c:223: break;
      001611 02r28r30         [24] 4246 	ljmp	00249$
                                   4247 ;	calc.c:224: case '*':
      001614                       4248 00167$:
                                   4249 ;	calc.c:225: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      001614 E5*00            [12] 4250 	mov	a,_bp
      001616 24 15            [12] 4251 	add	a,#0x15
      001618 FF               [12] 4252 	mov	r7,a
      001619 7E 00            [12] 4253 	mov	r6,#0x00
      00161B 7D 40            [12] 4254 	mov	r5,#0x40
      00161D E5*00            [12] 4255 	mov	a,_bp
      00161F 24 12            [12] 4256 	add	a,#0x12
      001621 F8               [12] 4257 	mov	r0,a
      001622 E5*00            [12] 4258 	mov	a,_bp
      001624 24 0B            [12] 4259 	add	a,#0x0b
      001626 F9               [12] 4260 	mov	r1,a
      001627 74 11            [12] 4261 	mov	a,#0x11
      001629 26               [12] 4262 	add	a,@r0
      00162A F7               [12] 4263 	mov	@r1,a
      00162B 74 40            [12] 4264 	mov	a,#0x40
      00162D 08               [12] 4265 	inc	r0
      00162E 36               [12] 4266 	addc	a,@r0
      00162F 09               [12] 4267 	inc	r1
      001630 F7               [12] 4268 	mov	@r1,a
      001631 08               [12] 4269 	inc	r0
      001632 09               [12] 4270 	inc	r1
      001633 E6               [12] 4271 	mov	a,@r0
      001634 F7               [12] 4272 	mov	@r1,a
      001635 E5*00            [12] 4273 	mov	a,_bp
      001637 24 0B            [12] 4274 	add	a,#0x0b
      001639 F8               [12] 4275 	mov	r0,a
      00163A 86 82            [24] 4276 	mov	dpl,@r0
      00163C 08               [12] 4277 	inc	r0
      00163D 86 83            [24] 4278 	mov	dph,@r0
      00163F 08               [12] 4279 	inc	r0
      001640 86 F0            [24] 4280 	mov	b,@r0
      001642 12r00r00         [24] 4281 	lcall	__gptrget
      001645 FA               [12] 4282 	mov	r2,a
      001646 A3               [24] 4283 	inc	dptr
      001647 12r00r00         [24] 4284 	lcall	__gptrget
      00164A FB               [12] 4285 	mov	r3,a
      00164B A3               [24] 4286 	inc	dptr
      00164C 12r00r00         [24] 4287 	lcall	__gptrget
      00164F FC               [12] 4288 	mov	r4,a
      001650 C0 07            [24] 4289 	push	ar7
      001652 C0 06            [24] 4290 	push	ar6
      001654 C0 05            [24] 4291 	push	ar5
      001656 8A 82            [24] 4292 	mov	dpl,r2
      001658 8B 83            [24] 4293 	mov	dph,r3
      00165A 8C F0            [24] 4294 	mov	b,r4
      00165C 12r00r00         [24] 4295 	lcall	_stack_pop
      00165F AB 82            [24] 4296 	mov	r3,dpl
      001661 AC 83            [24] 4297 	mov	r4,dph
      001663 15 81            [12] 4298 	dec	sp
      001665 15 81            [12] 4299 	dec	sp
      001667 15 81            [12] 4300 	dec	sp
      001669 EB               [12] 4301 	mov	a,r3
      00166A 4C               [12] 4302 	orl	a,r4
      00166B 70 25            [24] 4303 	jnz	00172$
      00166D 7Fr38            [12] 4304 	mov	r7,#___str_8
      00166F 7Es00            [12] 4305 	mov	r6,#(___str_8 >> 8)
      001671 7D 80            [12] 4306 	mov	r5,#0x80
                                   4307 ;	calc.c:51: return;
      001673                       4308 00436$:
                                   4309 ;	calc.c:49: for (; *s; s++) putchar(*s);
      001673 8F 82            [24] 4310 	mov	dpl,r7
      001675 8E 83            [24] 4311 	mov	dph,r6
      001677 8D F0            [24] 4312 	mov	b,r5
      001679 12r00r00         [24] 4313 	lcall	__gptrget
      00167C FC               [12] 4314 	mov	r4,a
      00167D 70 03            [24] 4315 	jnz	01336$
      00167F 02r28r30         [24] 4316 	ljmp	00249$
      001682                       4317 01336$:
      001682 7B 00            [12] 4318 	mov	r3,#0x00
      001684 8C 82            [24] 4319 	mov	dpl,r4
      001686 8B 83            [24] 4320 	mov	dph,r3
      001688 12r00r00         [24] 4321 	lcall	_putchar
      00168B 0F               [12] 4322 	inc	r7
                                   4323 ;	calc.c:225: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      00168C BF 00 E4         [24] 4324 	cjne	r7,#0x00,00436$
      00168F 0E               [12] 4325 	inc	r6
      001690 80 E1            [24] 4326 	sjmp	00436$
      001692                       4327 00172$:
                                   4328 ;	calc.c:226: else if (!stack_pop(ctx->ps, &d1)) {
      001692 E5*00            [12] 4329 	mov	a,_bp
      001694 24 19            [12] 4330 	add	a,#0x19
      001696 FF               [12] 4331 	mov	r7,a
      001697 7E 00            [12] 4332 	mov	r6,#0x00
      001699 7D 40            [12] 4333 	mov	r5,#0x40
      00169B E5*00            [12] 4334 	mov	a,_bp
      00169D 24 0B            [12] 4335 	add	a,#0x0b
      00169F F8               [12] 4336 	mov	r0,a
      0016A0 86 82            [24] 4337 	mov	dpl,@r0
      0016A2 08               [12] 4338 	inc	r0
      0016A3 86 83            [24] 4339 	mov	dph,@r0
      0016A5 08               [12] 4340 	inc	r0
      0016A6 86 F0            [24] 4341 	mov	b,@r0
      0016A8 12r00r00         [24] 4342 	lcall	__gptrget
      0016AB FA               [12] 4343 	mov	r2,a
      0016AC A3               [24] 4344 	inc	dptr
      0016AD 12r00r00         [24] 4345 	lcall	__gptrget
      0016B0 FB               [12] 4346 	mov	r3,a
      0016B1 A3               [24] 4347 	inc	dptr
      0016B2 12r00r00         [24] 4348 	lcall	__gptrget
      0016B5 FC               [12] 4349 	mov	r4,a
      0016B6 C0 07            [24] 4350 	push	ar7
      0016B8 C0 06            [24] 4351 	push	ar6
      0016BA C0 05            [24] 4352 	push	ar5
      0016BC 8A 82            [24] 4353 	mov	dpl,r2
      0016BE 8B 83            [24] 4354 	mov	dph,r3
      0016C0 8C F0            [24] 4355 	mov	b,r4
      0016C2 12r00r00         [24] 4356 	lcall	_stack_pop
      0016C5 AB 82            [24] 4357 	mov	r3,dpl
      0016C7 AC 83            [24] 4358 	mov	r4,dph
      0016C9 15 81            [12] 4359 	dec	sp
      0016CB 15 81            [12] 4360 	dec	sp
      0016CD 15 81            [12] 4361 	dec	sp
      0016CF EB               [12] 4362 	mov	a,r3
      0016D0 4C               [12] 4363 	orl	a,r4
      0016D1 70 63            [24] 4364 	jnz	00169$
                                   4365 ;	calc.c:227: (void)stack_push(ctx->ps, d0);
      0016D3 E5*00            [12] 4366 	mov	a,_bp
      0016D5 24 0B            [12] 4367 	add	a,#0x0b
      0016D7 F8               [12] 4368 	mov	r0,a
      0016D8 86 82            [24] 4369 	mov	dpl,@r0
      0016DA 08               [12] 4370 	inc	r0
      0016DB 86 83            [24] 4371 	mov	dph,@r0
      0016DD 08               [12] 4372 	inc	r0
      0016DE 86 F0            [24] 4373 	mov	b,@r0
      0016E0 12r00r00         [24] 4374 	lcall	__gptrget
      0016E3 FA               [12] 4375 	mov	r2,a
      0016E4 A3               [24] 4376 	inc	dptr
      0016E5 12r00r00         [24] 4377 	lcall	__gptrget
      0016E8 FB               [12] 4378 	mov	r3,a
      0016E9 A3               [24] 4379 	inc	dptr
      0016EA 12r00r00         [24] 4380 	lcall	__gptrget
      0016ED FC               [12] 4381 	mov	r4,a
      0016EE E5*00            [12] 4382 	mov	a,_bp
      0016F0 24 15            [12] 4383 	add	a,#0x15
      0016F2 F8               [12] 4384 	mov	r0,a
      0016F3 E6               [12] 4385 	mov	a,@r0
      0016F4 C0 E0            [24] 4386 	push	acc
      0016F6 08               [12] 4387 	inc	r0
      0016F7 E6               [12] 4388 	mov	a,@r0
      0016F8 C0 E0            [24] 4389 	push	acc
      0016FA 08               [12] 4390 	inc	r0
      0016FB E6               [12] 4391 	mov	a,@r0
      0016FC C0 E0            [24] 4392 	push	acc
      0016FE 08               [12] 4393 	inc	r0
      0016FF E6               [12] 4394 	mov	a,@r0
      001700 C0 E0            [24] 4395 	push	acc
      001702 8A 82            [24] 4396 	mov	dpl,r2
      001704 8B 83            [24] 4397 	mov	dph,r3
      001706 8C F0            [24] 4398 	mov	b,r4
      001708 12r00r00         [24] 4399 	lcall	_stack_push
      00170B E5 81            [12] 4400 	mov	a,sp
      00170D 24 FC            [12] 4401 	add	a,#0xfc
      00170F F5 81            [12] 4402 	mov	sp,a
                                   4403 ;	calc.c:228: printstr("\r\nstack underflow\r\n");
      001711 7Fr38            [12] 4404 	mov	r7,#___str_8
      001713 7Es00            [12] 4405 	mov	r6,#(___str_8 >> 8)
      001715 7D 80            [12] 4406 	mov	r5,#0x80
                                   4407 ;	calc.c:51: return;
      001717                       4408 00439$:
                                   4409 ;	calc.c:49: for (; *s; s++) putchar(*s);
      001717 8F 82            [24] 4410 	mov	dpl,r7
      001719 8E 83            [24] 4411 	mov	dph,r6
      00171B 8D F0            [24] 4412 	mov	b,r5
      00171D 12r00r00         [24] 4413 	lcall	__gptrget
      001720 FC               [12] 4414 	mov	r4,a
      001721 70 03            [24] 4415 	jnz	01339$
      001723 02r28r30         [24] 4416 	ljmp	00249$
      001726                       4417 01339$:
      001726 7B 00            [12] 4418 	mov	r3,#0x00
      001728 8C 82            [24] 4419 	mov	dpl,r4
      00172A 8B 83            [24] 4420 	mov	dph,r3
      00172C 12r00r00         [24] 4421 	lcall	_putchar
      00172F 0F               [12] 4422 	inc	r7
                                   4423 ;	calc.c:228: printstr("\r\nstack underflow\r\n");
      001730 BF 00 E4         [24] 4424 	cjne	r7,#0x00,00439$
      001733 0E               [12] 4425 	inc	r6
      001734 80 E1            [24] 4426 	sjmp	00439$
      001736                       4427 00169$:
                                   4428 ;	calc.c:230: d1 *= d0;
      001736 E5*00            [12] 4429 	mov	a,_bp
      001738 24 15            [12] 4430 	add	a,#0x15
      00173A F8               [12] 4431 	mov	r0,a
      00173B E6               [12] 4432 	mov	a,@r0
      00173C C0 E0            [24] 4433 	push	acc
      00173E 08               [12] 4434 	inc	r0
      00173F E6               [12] 4435 	mov	a,@r0
      001740 C0 E0            [24] 4436 	push	acc
      001742 08               [12] 4437 	inc	r0
      001743 E6               [12] 4438 	mov	a,@r0
      001744 C0 E0            [24] 4439 	push	acc
      001746 08               [12] 4440 	inc	r0
      001747 E6               [12] 4441 	mov	a,@r0
      001748 C0 E0            [24] 4442 	push	acc
      00174A E5*00            [12] 4443 	mov	a,_bp
      00174C 24 19            [12] 4444 	add	a,#0x19
      00174E F8               [12] 4445 	mov	r0,a
      00174F 86 82            [24] 4446 	mov	dpl,@r0
      001751 08               [12] 4447 	inc	r0
      001752 86 83            [24] 4448 	mov	dph,@r0
      001754 08               [12] 4449 	inc	r0
      001755 86 F0            [24] 4450 	mov	b,@r0
      001757 08               [12] 4451 	inc	r0
      001758 E6               [12] 4452 	mov	a,@r0
      001759 12r00r00         [24] 4453 	lcall	__mullong
      00175C AF 82            [24] 4454 	mov	r7,dpl
      00175E AE 83            [24] 4455 	mov	r6,dph
      001760 AD F0            [24] 4456 	mov	r5,b
      001762 FC               [12] 4457 	mov	r4,a
      001763 E5 81            [12] 4458 	mov	a,sp
      001765 24 FC            [12] 4459 	add	a,#0xfc
      001767 F5 81            [12] 4460 	mov	sp,a
      001769 E5*00            [12] 4461 	mov	a,_bp
      00176B 24 19            [12] 4462 	add	a,#0x19
      00176D F8               [12] 4463 	mov	r0,a
      00176E A6 07            [24] 4464 	mov	@r0,ar7
      001770 08               [12] 4465 	inc	r0
      001771 A6 06            [24] 4466 	mov	@r0,ar6
      001773 08               [12] 4467 	inc	r0
      001774 A6 05            [24] 4468 	mov	@r0,ar5
      001776 08               [12] 4469 	inc	r0
      001777 A6 04            [24] 4470 	mov	@r0,ar4
                                   4471 ;	calc.c:231: (void)stack_push(ctx->ps, d1);
      001779 E5*00            [12] 4472 	mov	a,_bp
      00177B 24 0B            [12] 4473 	add	a,#0x0b
      00177D F8               [12] 4474 	mov	r0,a
      00177E 86 82            [24] 4475 	mov	dpl,@r0
      001780 08               [12] 4476 	inc	r0
      001781 86 83            [24] 4477 	mov	dph,@r0
      001783 08               [12] 4478 	inc	r0
      001784 86 F0            [24] 4479 	mov	b,@r0
      001786 12r00r00         [24] 4480 	lcall	__gptrget
      001789 FA               [12] 4481 	mov	r2,a
      00178A A3               [24] 4482 	inc	dptr
      00178B 12r00r00         [24] 4483 	lcall	__gptrget
      00178E FB               [12] 4484 	mov	r3,a
      00178F A3               [24] 4485 	inc	dptr
      001790 12r00r00         [24] 4486 	lcall	__gptrget
      001793 FC               [12] 4487 	mov	r4,a
      001794 E5*00            [12] 4488 	mov	a,_bp
      001796 24 19            [12] 4489 	add	a,#0x19
      001798 F8               [12] 4490 	mov	r0,a
      001799 E6               [12] 4491 	mov	a,@r0
      00179A C0 E0            [24] 4492 	push	acc
      00179C 08               [12] 4493 	inc	r0
      00179D E6               [12] 4494 	mov	a,@r0
      00179E C0 E0            [24] 4495 	push	acc
      0017A0 08               [12] 4496 	inc	r0
      0017A1 E6               [12] 4497 	mov	a,@r0
      0017A2 C0 E0            [24] 4498 	push	acc
      0017A4 08               [12] 4499 	inc	r0
      0017A5 E6               [12] 4500 	mov	a,@r0
      0017A6 C0 E0            [24] 4501 	push	acc
      0017A8 8A 82            [24] 4502 	mov	dpl,r2
      0017AA 8B 83            [24] 4503 	mov	dph,r3
      0017AC 8C F0            [24] 4504 	mov	b,r4
      0017AE 12r00r00         [24] 4505 	lcall	_stack_push
      0017B1 E5 81            [12] 4506 	mov	a,sp
      0017B3 24 FC            [12] 4507 	add	a,#0xfc
      0017B5 F5 81            [12] 4508 	mov	sp,a
                                   4509 ;	calc.c:233: break;
      0017B7 02r28r30         [24] 4510 	ljmp	00249$
                                   4511 ;	calc.c:235: case '\\':
      0017BA                       4512 00175$:
                                   4513 ;	calc.c:236: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      0017BA C0 05            [24] 4514 	push	ar5
      0017BC C0 06            [24] 4515 	push	ar6
      0017BE C0 07            [24] 4516 	push	ar7
      0017C0 E5*00            [12] 4517 	mov	a,_bp
      0017C2 24 15            [12] 4518 	add	a,#0x15
      0017C4 FC               [12] 4519 	mov	r4,a
      0017C5 7B 00            [12] 4520 	mov	r3,#0x00
      0017C7 7A 40            [12] 4521 	mov	r2,#0x40
      0017C9 E5*00            [12] 4522 	mov	a,_bp
      0017CB 24 12            [12] 4523 	add	a,#0x12
      0017CD F8               [12] 4524 	mov	r0,a
      0017CE E5*00            [12] 4525 	mov	a,_bp
      0017D0 24 0B            [12] 4526 	add	a,#0x0b
      0017D2 F9               [12] 4527 	mov	r1,a
      0017D3 74 11            [12] 4528 	mov	a,#0x11
      0017D5 26               [12] 4529 	add	a,@r0
      0017D6 F7               [12] 4530 	mov	@r1,a
      0017D7 74 40            [12] 4531 	mov	a,#0x40
      0017D9 08               [12] 4532 	inc	r0
      0017DA 36               [12] 4533 	addc	a,@r0
      0017DB 09               [12] 4534 	inc	r1
      0017DC F7               [12] 4535 	mov	@r1,a
      0017DD 08               [12] 4536 	inc	r0
      0017DE 09               [12] 4537 	inc	r1
      0017DF E6               [12] 4538 	mov	a,@r0
      0017E0 F7               [12] 4539 	mov	@r1,a
      0017E1 E5*00            [12] 4540 	mov	a,_bp
      0017E3 24 0B            [12] 4541 	add	a,#0x0b
      0017E5 F8               [12] 4542 	mov	r0,a
      0017E6 86 82            [24] 4543 	mov	dpl,@r0
      0017E8 08               [12] 4544 	inc	r0
      0017E9 86 83            [24] 4545 	mov	dph,@r0
      0017EB 08               [12] 4546 	inc	r0
      0017EC 86 F0            [24] 4547 	mov	b,@r0
      0017EE 12r00r00         [24] 4548 	lcall	__gptrget
      0017F1 FD               [12] 4549 	mov	r5,a
      0017F2 A3               [24] 4550 	inc	dptr
      0017F3 12r00r00         [24] 4551 	lcall	__gptrget
      0017F6 FE               [12] 4552 	mov	r6,a
      0017F7 A3               [24] 4553 	inc	dptr
      0017F8 12r00r00         [24] 4554 	lcall	__gptrget
      0017FB FF               [12] 4555 	mov	r7,a
      0017FC C0 05            [24] 4556 	push	ar5
      0017FE C0 04            [24] 4557 	push	ar4
      001800 C0 03            [24] 4558 	push	ar3
      001802 C0 02            [24] 4559 	push	ar2
      001804 8D 82            [24] 4560 	mov	dpl,r5
      001806 8E 83            [24] 4561 	mov	dph,r6
      001808 8F F0            [24] 4562 	mov	b,r7
      00180A 12r00r00         [24] 4563 	lcall	_stack_pop
      00180D AE 82            [24] 4564 	mov	r6,dpl
      00180F AF 83            [24] 4565 	mov	r7,dph
      001811 15 81            [12] 4566 	dec	sp
      001813 15 81            [12] 4567 	dec	sp
      001815 15 81            [12] 4568 	dec	sp
      001817 D0 05            [24] 4569 	pop	ar5
      001819 EE               [12] 4570 	mov	a,r6
      00181A 4F               [12] 4571 	orl	a,r7
      00181B D0 07            [24] 4572 	pop	ar7
      00181D D0 06            [24] 4573 	pop	ar6
      00181F D0 05            [24] 4574 	pop	ar5
      001821 70 25            [24] 4575 	jnz	00186$
      001823 7Fr38            [12] 4576 	mov	r7,#___str_8
      001825 7Es00            [12] 4577 	mov	r6,#(___str_8 >> 8)
      001827 7D 80            [12] 4578 	mov	r5,#0x80
                                   4579 ;	calc.c:51: return;
      001829                       4580 00442$:
                                   4581 ;	calc.c:49: for (; *s; s++) putchar(*s);
      001829 8F 82            [24] 4582 	mov	dpl,r7
      00182B 8E 83            [24] 4583 	mov	dph,r6
      00182D 8D F0            [24] 4584 	mov	b,r5
      00182F 12r00r00         [24] 4585 	lcall	__gptrget
      001832 FC               [12] 4586 	mov	r4,a
      001833 70 03            [24] 4587 	jnz	01342$
      001835 02r28r30         [24] 4588 	ljmp	00249$
      001838                       4589 01342$:
      001838 7B 00            [12] 4590 	mov	r3,#0x00
      00183A 8C 82            [24] 4591 	mov	dpl,r4
      00183C 8B 83            [24] 4592 	mov	dph,r3
      00183E 12r00r00         [24] 4593 	lcall	_putchar
      001841 0F               [12] 4594 	inc	r7
                                   4595 ;	calc.c:236: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      001842 BF 00 E4         [24] 4596 	cjne	r7,#0x00,00442$
      001845 0E               [12] 4597 	inc	r6
      001846 80 E1            [24] 4598 	sjmp	00442$
      001848                       4599 00186$:
                                   4600 ;	calc.c:237: else if (!stack_pop(ctx->ps, &d1)) {
      001848 C0 05            [24] 4601 	push	ar5
      00184A C0 06            [24] 4602 	push	ar6
      00184C C0 07            [24] 4603 	push	ar7
      00184E E5*00            [12] 4604 	mov	a,_bp
      001850 24 19            [12] 4605 	add	a,#0x19
      001852 FC               [12] 4606 	mov	r4,a
      001853 7B 00            [12] 4607 	mov	r3,#0x00
      001855 7A 40            [12] 4608 	mov	r2,#0x40
      001857 E5*00            [12] 4609 	mov	a,_bp
      001859 24 0B            [12] 4610 	add	a,#0x0b
      00185B F8               [12] 4611 	mov	r0,a
      00185C 86 82            [24] 4612 	mov	dpl,@r0
      00185E 08               [12] 4613 	inc	r0
      00185F 86 83            [24] 4614 	mov	dph,@r0
      001861 08               [12] 4615 	inc	r0
      001862 86 F0            [24] 4616 	mov	b,@r0
      001864 12r00r00         [24] 4617 	lcall	__gptrget
      001867 FD               [12] 4618 	mov	r5,a
      001868 A3               [24] 4619 	inc	dptr
      001869 12r00r00         [24] 4620 	lcall	__gptrget
      00186C FE               [12] 4621 	mov	r6,a
      00186D A3               [24] 4622 	inc	dptr
      00186E 12r00r00         [24] 4623 	lcall	__gptrget
      001871 FF               [12] 4624 	mov	r7,a
      001872 C0 05            [24] 4625 	push	ar5
      001874 C0 04            [24] 4626 	push	ar4
      001876 C0 03            [24] 4627 	push	ar3
      001878 C0 02            [24] 4628 	push	ar2
      00187A 8D 82            [24] 4629 	mov	dpl,r5
      00187C 8E 83            [24] 4630 	mov	dph,r6
      00187E 8F F0            [24] 4631 	mov	b,r7
      001880 12r00r00         [24] 4632 	lcall	_stack_pop
      001883 AE 82            [24] 4633 	mov	r6,dpl
      001885 AF 83            [24] 4634 	mov	r7,dph
      001887 15 81            [12] 4635 	dec	sp
      001889 15 81            [12] 4636 	dec	sp
      00188B 15 81            [12] 4637 	dec	sp
      00188D D0 05            [24] 4638 	pop	ar5
      00188F EE               [12] 4639 	mov	a,r6
      001890 4F               [12] 4640 	orl	a,r7
      001891 D0 07            [24] 4641 	pop	ar7
      001893 D0 06            [24] 4642 	pop	ar6
      001895 D0 05            [24] 4643 	pop	ar5
      001897 70 63            [24] 4644 	jnz	00183$
                                   4645 ;	calc.c:238: (void)stack_push(ctx->ps, d0);
      001899 E5*00            [12] 4646 	mov	a,_bp
      00189B 24 0B            [12] 4647 	add	a,#0x0b
      00189D F8               [12] 4648 	mov	r0,a
      00189E 86 82            [24] 4649 	mov	dpl,@r0
      0018A0 08               [12] 4650 	inc	r0
      0018A1 86 83            [24] 4651 	mov	dph,@r0
      0018A3 08               [12] 4652 	inc	r0
      0018A4 86 F0            [24] 4653 	mov	b,@r0
      0018A6 12r00r00         [24] 4654 	lcall	__gptrget
      0018A9 FA               [12] 4655 	mov	r2,a
      0018AA A3               [24] 4656 	inc	dptr
      0018AB 12r00r00         [24] 4657 	lcall	__gptrget
      0018AE FB               [12] 4658 	mov	r3,a
      0018AF A3               [24] 4659 	inc	dptr
      0018B0 12r00r00         [24] 4660 	lcall	__gptrget
      0018B3 FC               [12] 4661 	mov	r4,a
      0018B4 E5*00            [12] 4662 	mov	a,_bp
      0018B6 24 15            [12] 4663 	add	a,#0x15
      0018B8 F8               [12] 4664 	mov	r0,a
      0018B9 E6               [12] 4665 	mov	a,@r0
      0018BA C0 E0            [24] 4666 	push	acc
      0018BC 08               [12] 4667 	inc	r0
      0018BD E6               [12] 4668 	mov	a,@r0
      0018BE C0 E0            [24] 4669 	push	acc
      0018C0 08               [12] 4670 	inc	r0
      0018C1 E6               [12] 4671 	mov	a,@r0
      0018C2 C0 E0            [24] 4672 	push	acc
      0018C4 08               [12] 4673 	inc	r0
      0018C5 E6               [12] 4674 	mov	a,@r0
      0018C6 C0 E0            [24] 4675 	push	acc
      0018C8 8A 82            [24] 4676 	mov	dpl,r2
      0018CA 8B 83            [24] 4677 	mov	dph,r3
      0018CC 8C F0            [24] 4678 	mov	b,r4
      0018CE 12r00r00         [24] 4679 	lcall	_stack_push
      0018D1 E5 81            [12] 4680 	mov	a,sp
      0018D3 24 FC            [12] 4681 	add	a,#0xfc
      0018D5 F5 81            [12] 4682 	mov	sp,a
                                   4683 ;	calc.c:239: printstr("\r\nstack underflow\r\n");
      0018D7 7Fr38            [12] 4684 	mov	r7,#___str_8
      0018D9 7Es00            [12] 4685 	mov	r6,#(___str_8 >> 8)
      0018DB 7D 80            [12] 4686 	mov	r5,#0x80
                                   4687 ;	calc.c:51: return;
      0018DD                       4688 00445$:
                                   4689 ;	calc.c:49: for (; *s; s++) putchar(*s);
      0018DD 8F 82            [24] 4690 	mov	dpl,r7
      0018DF 8E 83            [24] 4691 	mov	dph,r6
      0018E1 8D F0            [24] 4692 	mov	b,r5
      0018E3 12r00r00         [24] 4693 	lcall	__gptrget
      0018E6 FC               [12] 4694 	mov	r4,a
      0018E7 70 03            [24] 4695 	jnz	01345$
      0018E9 02r28r30         [24] 4696 	ljmp	00249$
      0018EC                       4697 01345$:
      0018EC 7B 00            [12] 4698 	mov	r3,#0x00
      0018EE 8C 82            [24] 4699 	mov	dpl,r4
      0018F0 8B 83            [24] 4700 	mov	dph,r3
      0018F2 12r00r00         [24] 4701 	lcall	_putchar
      0018F5 0F               [12] 4702 	inc	r7
                                   4703 ;	calc.c:239: printstr("\r\nstack underflow\r\n");
      0018F6 BF 00 E4         [24] 4704 	cjne	r7,#0x00,00445$
      0018F9 0E               [12] 4705 	inc	r6
      0018FA 80 E1            [24] 4706 	sjmp	00445$
      0018FC                       4707 00183$:
                                   4708 ;	calc.c:240: } else if (!d0) {
      0018FC E5*00            [12] 4709 	mov	a,_bp
      0018FE 24 15            [12] 4710 	add	a,#0x15
      001900 F8               [12] 4711 	mov	r0,a
      001901 E6               [12] 4712 	mov	a,@r0
      001902 08               [12] 4713 	inc	r0
      001903 46               [12] 4714 	orl	a,@r0
      001904 08               [12] 4715 	inc	r0
      001905 46               [12] 4716 	orl	a,@r0
      001906 08               [12] 4717 	inc	r0
      001907 46               [12] 4718 	orl	a,@r0
      001908 60 03            [24] 4719 	jz	01347$
      00190A 02r19rAE         [24] 4720 	ljmp	00180$
      00190D                       4721 01347$:
                                   4722 ;	calc.c:241: (void)stack_push(ctx->ps, d1);
      00190D E5*00            [12] 4723 	mov	a,_bp
      00190F 24 0B            [12] 4724 	add	a,#0x0b
      001911 F8               [12] 4725 	mov	r0,a
      001912 86 82            [24] 4726 	mov	dpl,@r0
      001914 08               [12] 4727 	inc	r0
      001915 86 83            [24] 4728 	mov	dph,@r0
      001917 08               [12] 4729 	inc	r0
      001918 86 F0            [24] 4730 	mov	b,@r0
      00191A 12r00r00         [24] 4731 	lcall	__gptrget
      00191D FA               [12] 4732 	mov	r2,a
      00191E A3               [24] 4733 	inc	dptr
      00191F 12r00r00         [24] 4734 	lcall	__gptrget
      001922 FB               [12] 4735 	mov	r3,a
      001923 A3               [24] 4736 	inc	dptr
      001924 12r00r00         [24] 4737 	lcall	__gptrget
      001927 FC               [12] 4738 	mov	r4,a
      001928 E5*00            [12] 4739 	mov	a,_bp
      00192A 24 19            [12] 4740 	add	a,#0x19
      00192C F8               [12] 4741 	mov	r0,a
      00192D E6               [12] 4742 	mov	a,@r0
      00192E C0 E0            [24] 4743 	push	acc
      001930 08               [12] 4744 	inc	r0
      001931 E6               [12] 4745 	mov	a,@r0
      001932 C0 E0            [24] 4746 	push	acc
      001934 08               [12] 4747 	inc	r0
      001935 E6               [12] 4748 	mov	a,@r0
      001936 C0 E0            [24] 4749 	push	acc
      001938 08               [12] 4750 	inc	r0
      001939 E6               [12] 4751 	mov	a,@r0
      00193A C0 E0            [24] 4752 	push	acc
      00193C 8A 82            [24] 4753 	mov	dpl,r2
      00193E 8B 83            [24] 4754 	mov	dph,r3
      001940 8C F0            [24] 4755 	mov	b,r4
      001942 12r00r00         [24] 4756 	lcall	_stack_push
      001945 E5 81            [12] 4757 	mov	a,sp
      001947 24 FC            [12] 4758 	add	a,#0xfc
      001949 F5 81            [12] 4759 	mov	sp,a
                                   4760 ;	calc.c:242: (void)stack_push(ctx->ps, d0);			
      00194B E5*00            [12] 4761 	mov	a,_bp
      00194D 24 0B            [12] 4762 	add	a,#0x0b
      00194F F8               [12] 4763 	mov	r0,a
      001950 86 82            [24] 4764 	mov	dpl,@r0
      001952 08               [12] 4765 	inc	r0
      001953 86 83            [24] 4766 	mov	dph,@r0
      001955 08               [12] 4767 	inc	r0
      001956 86 F0            [24] 4768 	mov	b,@r0
      001958 12r00r00         [24] 4769 	lcall	__gptrget
      00195B FA               [12] 4770 	mov	r2,a
      00195C A3               [24] 4771 	inc	dptr
      00195D 12r00r00         [24] 4772 	lcall	__gptrget
      001960 FB               [12] 4773 	mov	r3,a
      001961 A3               [24] 4774 	inc	dptr
      001962 12r00r00         [24] 4775 	lcall	__gptrget
      001965 FC               [12] 4776 	mov	r4,a
      001966 E5*00            [12] 4777 	mov	a,_bp
      001968 24 15            [12] 4778 	add	a,#0x15
      00196A F8               [12] 4779 	mov	r0,a
      00196B E6               [12] 4780 	mov	a,@r0
      00196C C0 E0            [24] 4781 	push	acc
      00196E 08               [12] 4782 	inc	r0
      00196F E6               [12] 4783 	mov	a,@r0
      001970 C0 E0            [24] 4784 	push	acc
      001972 08               [12] 4785 	inc	r0
      001973 E6               [12] 4786 	mov	a,@r0
      001974 C0 E0            [24] 4787 	push	acc
      001976 08               [12] 4788 	inc	r0
      001977 E6               [12] 4789 	mov	a,@r0
      001978 C0 E0            [24] 4790 	push	acc
      00197A 8A 82            [24] 4791 	mov	dpl,r2
      00197C 8B 83            [24] 4792 	mov	dph,r3
      00197E 8C F0            [24] 4793 	mov	b,r4
      001980 12r00r00         [24] 4794 	lcall	_stack_push
      001983 E5 81            [12] 4795 	mov	a,sp
      001985 24 FC            [12] 4796 	add	a,#0xfc
      001987 F5 81            [12] 4797 	mov	sp,a
                                   4798 ;	calc.c:243: printstr("\r\ndivision by zero\r\n");
      001989 7Fr9A            [12] 4799 	mov	r7,#___str_12
      00198B 7Es00            [12] 4800 	mov	r6,#(___str_12 >> 8)
      00198D 7D 80            [12] 4801 	mov	r5,#0x80
                                   4802 ;	calc.c:51: return;
      00198F                       4803 00448$:
                                   4804 ;	calc.c:49: for (; *s; s++) putchar(*s);
      00198F 8F 82            [24] 4805 	mov	dpl,r7
      001991 8E 83            [24] 4806 	mov	dph,r6
      001993 8D F0            [24] 4807 	mov	b,r5
      001995 12r00r00         [24] 4808 	lcall	__gptrget
      001998 FC               [12] 4809 	mov	r4,a
      001999 70 03            [24] 4810 	jnz	01348$
      00199B 02r28r30         [24] 4811 	ljmp	00249$
      00199E                       4812 01348$:
      00199E 7B 00            [12] 4813 	mov	r3,#0x00
      0019A0 8C 82            [24] 4814 	mov	dpl,r4
      0019A2 8B 83            [24] 4815 	mov	dph,r3
      0019A4 12r00r00         [24] 4816 	lcall	_putchar
      0019A7 0F               [12] 4817 	inc	r7
                                   4818 ;	calc.c:243: printstr("\r\ndivision by zero\r\n");
      0019A8 BF 00 E4         [24] 4819 	cjne	r7,#0x00,00448$
      0019AB 0E               [12] 4820 	inc	r6
      0019AC 80 E1            [24] 4821 	sjmp	00448$
      0019AE                       4822 00180$:
                                   4823 ;	calc.c:245: if (ctx->digit[0] == '/') d1 /= d0;
      0019AE 8D 82            [24] 4824 	mov	dpl,r5
      0019B0 8E 83            [24] 4825 	mov	dph,r6
      0019B2 8F F0            [24] 4826 	mov	b,r7
      0019B4 12r00r00         [24] 4827 	lcall	__gptrget
      0019B7 FC               [12] 4828 	mov	r4,a
      0019B8 BC 2F 45         [24] 4829 	cjne	r4,#0x2f,00177$
      0019BB E5*00            [12] 4830 	mov	a,_bp
      0019BD 24 15            [12] 4831 	add	a,#0x15
      0019BF F8               [12] 4832 	mov	r0,a
      0019C0 E6               [12] 4833 	mov	a,@r0
      0019C1 C0 E0            [24] 4834 	push	acc
      0019C3 08               [12] 4835 	inc	r0
      0019C4 E6               [12] 4836 	mov	a,@r0
      0019C5 C0 E0            [24] 4837 	push	acc
      0019C7 08               [12] 4838 	inc	r0
      0019C8 E6               [12] 4839 	mov	a,@r0
      0019C9 C0 E0            [24] 4840 	push	acc
      0019CB 08               [12] 4841 	inc	r0
      0019CC E6               [12] 4842 	mov	a,@r0
      0019CD C0 E0            [24] 4843 	push	acc
      0019CF E5*00            [12] 4844 	mov	a,_bp
      0019D1 24 19            [12] 4845 	add	a,#0x19
      0019D3 F8               [12] 4846 	mov	r0,a
      0019D4 86 82            [24] 4847 	mov	dpl,@r0
      0019D6 08               [12] 4848 	inc	r0
      0019D7 86 83            [24] 4849 	mov	dph,@r0
      0019D9 08               [12] 4850 	inc	r0
      0019DA 86 F0            [24] 4851 	mov	b,@r0
      0019DC 08               [12] 4852 	inc	r0
      0019DD E6               [12] 4853 	mov	a,@r0
      0019DE 12r00r00         [24] 4854 	lcall	__divslong
      0019E1 AF 82            [24] 4855 	mov	r7,dpl
      0019E3 AE 83            [24] 4856 	mov	r6,dph
      0019E5 AD F0            [24] 4857 	mov	r5,b
      0019E7 FC               [12] 4858 	mov	r4,a
      0019E8 E5 81            [12] 4859 	mov	a,sp
      0019EA 24 FC            [12] 4860 	add	a,#0xfc
      0019EC F5 81            [12] 4861 	mov	sp,a
      0019EE E5*00            [12] 4862 	mov	a,_bp
      0019F0 24 19            [12] 4863 	add	a,#0x19
      0019F2 F8               [12] 4864 	mov	r0,a
      0019F3 A6 07            [24] 4865 	mov	@r0,ar7
      0019F5 08               [12] 4866 	inc	r0
      0019F6 A6 06            [24] 4867 	mov	@r0,ar6
      0019F8 08               [12] 4868 	inc	r0
      0019F9 A6 05            [24] 4869 	mov	@r0,ar5
      0019FB 08               [12] 4870 	inc	r0
      0019FC A6 04            [24] 4871 	mov	@r0,ar4
      0019FE 80 63            [24] 4872 	sjmp	00178$
      001A00                       4873 00177$:
                                   4874 ;	calc.c:246: else d1 = (unsigned long)d1 / (unsigned long)d0;
      001A00 E5*00            [12] 4875 	mov	a,_bp
      001A02 24 19            [12] 4876 	add	a,#0x19
      001A04 F8               [12] 4877 	mov	r0,a
      001A05 86 07            [24] 4878 	mov	ar7,@r0
      001A07 08               [12] 4879 	inc	r0
      001A08 86 06            [24] 4880 	mov	ar6,@r0
      001A0A 08               [12] 4881 	inc	r0
      001A0B 86 05            [24] 4882 	mov	ar5,@r0
      001A0D 08               [12] 4883 	inc	r0
      001A0E 86 04            [24] 4884 	mov	ar4,@r0
      001A10 E5*00            [12] 4885 	mov	a,_bp
      001A12 24 15            [12] 4886 	add	a,#0x15
      001A14 F8               [12] 4887 	mov	r0,a
      001A15 E5*00            [12] 4888 	mov	a,_bp
      001A17 24 0E            [12] 4889 	add	a,#0x0e
      001A19 F9               [12] 4890 	mov	r1,a
      001A1A E6               [12] 4891 	mov	a,@r0
      001A1B F7               [12] 4892 	mov	@r1,a
      001A1C 08               [12] 4893 	inc	r0
      001A1D 09               [12] 4894 	inc	r1
      001A1E E6               [12] 4895 	mov	a,@r0
      001A1F F7               [12] 4896 	mov	@r1,a
      001A20 08               [12] 4897 	inc	r0
      001A21 09               [12] 4898 	inc	r1
      001A22 E6               [12] 4899 	mov	a,@r0
      001A23 F7               [12] 4900 	mov	@r1,a
      001A24 08               [12] 4901 	inc	r0
      001A25 09               [12] 4902 	inc	r1
      001A26 E6               [12] 4903 	mov	a,@r0
      001A27 F7               [12] 4904 	mov	@r1,a
      001A28 E5*00            [12] 4905 	mov	a,_bp
      001A2A 24 0E            [12] 4906 	add	a,#0x0e
      001A2C F8               [12] 4907 	mov	r0,a
      001A2D E6               [12] 4908 	mov	a,@r0
      001A2E C0 E0            [24] 4909 	push	acc
      001A30 08               [12] 4910 	inc	r0
      001A31 E6               [12] 4911 	mov	a,@r0
      001A32 C0 E0            [24] 4912 	push	acc
      001A34 08               [12] 4913 	inc	r0
      001A35 E6               [12] 4914 	mov	a,@r0
      001A36 C0 E0            [24] 4915 	push	acc
      001A38 08               [12] 4916 	inc	r0
      001A39 E6               [12] 4917 	mov	a,@r0
      001A3A C0 E0            [24] 4918 	push	acc
      001A3C 8F 82            [24] 4919 	mov	dpl,r7
      001A3E 8E 83            [24] 4920 	mov	dph,r6
      001A40 8D F0            [24] 4921 	mov	b,r5
      001A42 EC               [12] 4922 	mov	a,r4
      001A43 12r00r00         [24] 4923 	lcall	__divulong
      001A46 AF 82            [24] 4924 	mov	r7,dpl
      001A48 AE 83            [24] 4925 	mov	r6,dph
      001A4A AD F0            [24] 4926 	mov	r5,b
      001A4C FC               [12] 4927 	mov	r4,a
      001A4D E5 81            [12] 4928 	mov	a,sp
      001A4F 24 FC            [12] 4929 	add	a,#0xfc
      001A51 F5 81            [12] 4930 	mov	sp,a
      001A53 E5*00            [12] 4931 	mov	a,_bp
      001A55 24 19            [12] 4932 	add	a,#0x19
      001A57 F8               [12] 4933 	mov	r0,a
      001A58 A6 07            [24] 4934 	mov	@r0,ar7
      001A5A 08               [12] 4935 	inc	r0
      001A5B A6 06            [24] 4936 	mov	@r0,ar6
      001A5D 08               [12] 4937 	inc	r0
      001A5E A6 05            [24] 4938 	mov	@r0,ar5
      001A60 08               [12] 4939 	inc	r0
      001A61 A6 04            [24] 4940 	mov	@r0,ar4
      001A63                       4941 00178$:
                                   4942 ;	calc.c:247: (void)stack_push(ctx->ps, d1);
      001A63 E5*00            [12] 4943 	mov	a,_bp
      001A65 24 0B            [12] 4944 	add	a,#0x0b
      001A67 F8               [12] 4945 	mov	r0,a
      001A68 86 82            [24] 4946 	mov	dpl,@r0
      001A6A 08               [12] 4947 	inc	r0
      001A6B 86 83            [24] 4948 	mov	dph,@r0
      001A6D 08               [12] 4949 	inc	r0
      001A6E 86 F0            [24] 4950 	mov	b,@r0
      001A70 12r00r00         [24] 4951 	lcall	__gptrget
      001A73 FA               [12] 4952 	mov	r2,a
      001A74 A3               [24] 4953 	inc	dptr
      001A75 12r00r00         [24] 4954 	lcall	__gptrget
      001A78 FB               [12] 4955 	mov	r3,a
      001A79 A3               [24] 4956 	inc	dptr
      001A7A 12r00r00         [24] 4957 	lcall	__gptrget
      001A7D FC               [12] 4958 	mov	r4,a
      001A7E E5*00            [12] 4959 	mov	a,_bp
      001A80 24 19            [12] 4960 	add	a,#0x19
      001A82 F8               [12] 4961 	mov	r0,a
      001A83 E6               [12] 4962 	mov	a,@r0
      001A84 C0 E0            [24] 4963 	push	acc
      001A86 08               [12] 4964 	inc	r0
      001A87 E6               [12] 4965 	mov	a,@r0
      001A88 C0 E0            [24] 4966 	push	acc
      001A8A 08               [12] 4967 	inc	r0
      001A8B E6               [12] 4968 	mov	a,@r0
      001A8C C0 E0            [24] 4969 	push	acc
      001A8E 08               [12] 4970 	inc	r0
      001A8F E6               [12] 4971 	mov	a,@r0
      001A90 C0 E0            [24] 4972 	push	acc
      001A92 8A 82            [24] 4973 	mov	dpl,r2
      001A94 8B 83            [24] 4974 	mov	dph,r3
      001A96 8C F0            [24] 4975 	mov	b,r4
      001A98 12r00r00         [24] 4976 	lcall	_stack_push
      001A9B E5 81            [12] 4977 	mov	a,sp
      001A9D 24 FC            [12] 4978 	add	a,#0xfc
      001A9F F5 81            [12] 4979 	mov	sp,a
                                   4980 ;	calc.c:249: break;
      001AA1 02r28r30         [24] 4981 	ljmp	00249$
                                   4982 ;	calc.c:251: case '#':
      001AA4                       4983 00189$:
                                   4984 ;	calc.c:252: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      001AA4 C0 05            [24] 4985 	push	ar5
      001AA6 C0 06            [24] 4986 	push	ar6
      001AA8 C0 07            [24] 4987 	push	ar7
      001AAA E5*00            [12] 4988 	mov	a,_bp
      001AAC 24 15            [12] 4989 	add	a,#0x15
      001AAE FC               [12] 4990 	mov	r4,a
      001AAF 7B 00            [12] 4991 	mov	r3,#0x00
      001AB1 7A 40            [12] 4992 	mov	r2,#0x40
      001AB3 E5*00            [12] 4993 	mov	a,_bp
      001AB5 24 12            [12] 4994 	add	a,#0x12
      001AB7 F8               [12] 4995 	mov	r0,a
      001AB8 E5*00            [12] 4996 	mov	a,_bp
      001ABA 24 0E            [12] 4997 	add	a,#0x0e
      001ABC F9               [12] 4998 	mov	r1,a
      001ABD 74 11            [12] 4999 	mov	a,#0x11
      001ABF 26               [12] 5000 	add	a,@r0
      001AC0 F7               [12] 5001 	mov	@r1,a
      001AC1 74 40            [12] 5002 	mov	a,#0x40
      001AC3 08               [12] 5003 	inc	r0
      001AC4 36               [12] 5004 	addc	a,@r0
      001AC5 09               [12] 5005 	inc	r1
      001AC6 F7               [12] 5006 	mov	@r1,a
      001AC7 08               [12] 5007 	inc	r0
      001AC8 09               [12] 5008 	inc	r1
      001AC9 E6               [12] 5009 	mov	a,@r0
      001ACA F7               [12] 5010 	mov	@r1,a
      001ACB E5*00            [12] 5011 	mov	a,_bp
      001ACD 24 0E            [12] 5012 	add	a,#0x0e
      001ACF F8               [12] 5013 	mov	r0,a
      001AD0 86 82            [24] 5014 	mov	dpl,@r0
      001AD2 08               [12] 5015 	inc	r0
      001AD3 86 83            [24] 5016 	mov	dph,@r0
      001AD5 08               [12] 5017 	inc	r0
      001AD6 86 F0            [24] 5018 	mov	b,@r0
      001AD8 12r00r00         [24] 5019 	lcall	__gptrget
      001ADB FD               [12] 5020 	mov	r5,a
      001ADC A3               [24] 5021 	inc	dptr
      001ADD 12r00r00         [24] 5022 	lcall	__gptrget
      001AE0 FE               [12] 5023 	mov	r6,a
      001AE1 A3               [24] 5024 	inc	dptr
      001AE2 12r00r00         [24] 5025 	lcall	__gptrget
      001AE5 FF               [12] 5026 	mov	r7,a
      001AE6 C0 05            [24] 5027 	push	ar5
      001AE8 C0 04            [24] 5028 	push	ar4
      001AEA C0 03            [24] 5029 	push	ar3
      001AEC C0 02            [24] 5030 	push	ar2
      001AEE 8D 82            [24] 5031 	mov	dpl,r5
      001AF0 8E 83            [24] 5032 	mov	dph,r6
      001AF2 8F F0            [24] 5033 	mov	b,r7
      001AF4 12r00r00         [24] 5034 	lcall	_stack_pop
      001AF7 AE 82            [24] 5035 	mov	r6,dpl
      001AF9 AF 83            [24] 5036 	mov	r7,dph
      001AFB 15 81            [12] 5037 	dec	sp
      001AFD 15 81            [12] 5038 	dec	sp
      001AFF 15 81            [12] 5039 	dec	sp
      001B01 D0 05            [24] 5040 	pop	ar5
      001B03 EE               [12] 5041 	mov	a,r6
      001B04 4F               [12] 5042 	orl	a,r7
      001B05 D0 07            [24] 5043 	pop	ar7
      001B07 D0 06            [24] 5044 	pop	ar6
      001B09 D0 05            [24] 5045 	pop	ar5
      001B0B 70 25            [24] 5046 	jnz	00200$
      001B0D 7Fr38            [12] 5047 	mov	r7,#___str_8
      001B0F 7Es00            [12] 5048 	mov	r6,#(___str_8 >> 8)
      001B11 7D 80            [12] 5049 	mov	r5,#0x80
                                   5050 ;	calc.c:51: return;
      001B13                       5051 00451$:
                                   5052 ;	calc.c:49: for (; *s; s++) putchar(*s);
      001B13 8F 82            [24] 5053 	mov	dpl,r7
      001B15 8E 83            [24] 5054 	mov	dph,r6
      001B17 8D F0            [24] 5055 	mov	b,r5
      001B19 12r00r00         [24] 5056 	lcall	__gptrget
      001B1C FC               [12] 5057 	mov	r4,a
      001B1D 70 03            [24] 5058 	jnz	01353$
      001B1F 02r28r30         [24] 5059 	ljmp	00249$
      001B22                       5060 01353$:
      001B22 7B 00            [12] 5061 	mov	r3,#0x00
      001B24 8C 82            [24] 5062 	mov	dpl,r4
      001B26 8B 83            [24] 5063 	mov	dph,r3
      001B28 12r00r00         [24] 5064 	lcall	_putchar
      001B2B 0F               [12] 5065 	inc	r7
                                   5066 ;	calc.c:252: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      001B2C BF 00 E4         [24] 5067 	cjne	r7,#0x00,00451$
      001B2F 0E               [12] 5068 	inc	r6
      001B30 80 E1            [24] 5069 	sjmp	00451$
      001B32                       5070 00200$:
                                   5071 ;	calc.c:253: else if (!stack_pop(ctx->ps, &d1)) {
      001B32 C0 05            [24] 5072 	push	ar5
      001B34 C0 06            [24] 5073 	push	ar6
      001B36 C0 07            [24] 5074 	push	ar7
      001B38 E5*00            [12] 5075 	mov	a,_bp
      001B3A 24 19            [12] 5076 	add	a,#0x19
      001B3C FC               [12] 5077 	mov	r4,a
      001B3D 7B 00            [12] 5078 	mov	r3,#0x00
      001B3F 7A 40            [12] 5079 	mov	r2,#0x40
      001B41 E5*00            [12] 5080 	mov	a,_bp
      001B43 24 0E            [12] 5081 	add	a,#0x0e
      001B45 F8               [12] 5082 	mov	r0,a
      001B46 86 82            [24] 5083 	mov	dpl,@r0
      001B48 08               [12] 5084 	inc	r0
      001B49 86 83            [24] 5085 	mov	dph,@r0
      001B4B 08               [12] 5086 	inc	r0
      001B4C 86 F0            [24] 5087 	mov	b,@r0
      001B4E 12r00r00         [24] 5088 	lcall	__gptrget
      001B51 FD               [12] 5089 	mov	r5,a
      001B52 A3               [24] 5090 	inc	dptr
      001B53 12r00r00         [24] 5091 	lcall	__gptrget
      001B56 FE               [12] 5092 	mov	r6,a
      001B57 A3               [24] 5093 	inc	dptr
      001B58 12r00r00         [24] 5094 	lcall	__gptrget
      001B5B FF               [12] 5095 	mov	r7,a
      001B5C C0 05            [24] 5096 	push	ar5
      001B5E C0 04            [24] 5097 	push	ar4
      001B60 C0 03            [24] 5098 	push	ar3
      001B62 C0 02            [24] 5099 	push	ar2
      001B64 8D 82            [24] 5100 	mov	dpl,r5
      001B66 8E 83            [24] 5101 	mov	dph,r6
      001B68 8F F0            [24] 5102 	mov	b,r7
      001B6A 12r00r00         [24] 5103 	lcall	_stack_pop
      001B6D AE 82            [24] 5104 	mov	r6,dpl
      001B6F AF 83            [24] 5105 	mov	r7,dph
      001B71 15 81            [12] 5106 	dec	sp
      001B73 15 81            [12] 5107 	dec	sp
      001B75 15 81            [12] 5108 	dec	sp
      001B77 D0 05            [24] 5109 	pop	ar5
      001B79 EE               [12] 5110 	mov	a,r6
      001B7A 4F               [12] 5111 	orl	a,r7
      001B7B D0 07            [24] 5112 	pop	ar7
      001B7D D0 06            [24] 5113 	pop	ar6
      001B7F D0 05            [24] 5114 	pop	ar5
      001B81 70 63            [24] 5115 	jnz	00197$
                                   5116 ;	calc.c:254: (void)stack_push(ctx->ps, d0);
      001B83 E5*00            [12] 5117 	mov	a,_bp
      001B85 24 0E            [12] 5118 	add	a,#0x0e
      001B87 F8               [12] 5119 	mov	r0,a
      001B88 86 82            [24] 5120 	mov	dpl,@r0
      001B8A 08               [12] 5121 	inc	r0
      001B8B 86 83            [24] 5122 	mov	dph,@r0
      001B8D 08               [12] 5123 	inc	r0
      001B8E 86 F0            [24] 5124 	mov	b,@r0
      001B90 12r00r00         [24] 5125 	lcall	__gptrget
      001B93 FA               [12] 5126 	mov	r2,a
      001B94 A3               [24] 5127 	inc	dptr
      001B95 12r00r00         [24] 5128 	lcall	__gptrget
      001B98 FB               [12] 5129 	mov	r3,a
      001B99 A3               [24] 5130 	inc	dptr
      001B9A 12r00r00         [24] 5131 	lcall	__gptrget
      001B9D FC               [12] 5132 	mov	r4,a
      001B9E E5*00            [12] 5133 	mov	a,_bp
      001BA0 24 15            [12] 5134 	add	a,#0x15
      001BA2 F8               [12] 5135 	mov	r0,a
      001BA3 E6               [12] 5136 	mov	a,@r0
      001BA4 C0 E0            [24] 5137 	push	acc
      001BA6 08               [12] 5138 	inc	r0
      001BA7 E6               [12] 5139 	mov	a,@r0
      001BA8 C0 E0            [24] 5140 	push	acc
      001BAA 08               [12] 5141 	inc	r0
      001BAB E6               [12] 5142 	mov	a,@r0
      001BAC C0 E0            [24] 5143 	push	acc
      001BAE 08               [12] 5144 	inc	r0
      001BAF E6               [12] 5145 	mov	a,@r0
      001BB0 C0 E0            [24] 5146 	push	acc
      001BB2 8A 82            [24] 5147 	mov	dpl,r2
      001BB4 8B 83            [24] 5148 	mov	dph,r3
      001BB6 8C F0            [24] 5149 	mov	b,r4
      001BB8 12r00r00         [24] 5150 	lcall	_stack_push
      001BBB E5 81            [12] 5151 	mov	a,sp
      001BBD 24 FC            [12] 5152 	add	a,#0xfc
      001BBF F5 81            [12] 5153 	mov	sp,a
                                   5154 ;	calc.c:255: printstr("\r\nstack underflow\r\n");
      001BC1 7Fr38            [12] 5155 	mov	r7,#___str_8
      001BC3 7Es00            [12] 5156 	mov	r6,#(___str_8 >> 8)
      001BC5 7D 80            [12] 5157 	mov	r5,#0x80
                                   5158 ;	calc.c:51: return;
      001BC7                       5159 00454$:
                                   5160 ;	calc.c:49: for (; *s; s++) putchar(*s);
      001BC7 8F 82            [24] 5161 	mov	dpl,r7
      001BC9 8E 83            [24] 5162 	mov	dph,r6
      001BCB 8D F0            [24] 5163 	mov	b,r5
      001BCD 12r00r00         [24] 5164 	lcall	__gptrget
      001BD0 FC               [12] 5165 	mov	r4,a
      001BD1 70 03            [24] 5166 	jnz	01356$
      001BD3 02r28r30         [24] 5167 	ljmp	00249$
      001BD6                       5168 01356$:
      001BD6 7B 00            [12] 5169 	mov	r3,#0x00
      001BD8 8C 82            [24] 5170 	mov	dpl,r4
      001BDA 8B 83            [24] 5171 	mov	dph,r3
      001BDC 12r00r00         [24] 5172 	lcall	_putchar
      001BDF 0F               [12] 5173 	inc	r7
                                   5174 ;	calc.c:255: printstr("\r\nstack underflow\r\n");
      001BE0 BF 00 E4         [24] 5175 	cjne	r7,#0x00,00454$
      001BE3 0E               [12] 5176 	inc	r6
      001BE4 80 E1            [24] 5177 	sjmp	00454$
      001BE6                       5178 00197$:
                                   5179 ;	calc.c:256: } else if (!d0) {
      001BE6 E5*00            [12] 5180 	mov	a,_bp
      001BE8 24 15            [12] 5181 	add	a,#0x15
      001BEA F8               [12] 5182 	mov	r0,a
      001BEB E6               [12] 5183 	mov	a,@r0
      001BEC 08               [12] 5184 	inc	r0
      001BED 46               [12] 5185 	orl	a,@r0
      001BEE 08               [12] 5186 	inc	r0
      001BEF 46               [12] 5187 	orl	a,@r0
      001BF0 08               [12] 5188 	inc	r0
      001BF1 46               [12] 5189 	orl	a,@r0
      001BF2 60 03            [24] 5190 	jz	01358$
      001BF4 02r1Cr98         [24] 5191 	ljmp	00194$
      001BF7                       5192 01358$:
                                   5193 ;	calc.c:257: (void)stack_push(ctx->ps, d1);
      001BF7 E5*00            [12] 5194 	mov	a,_bp
      001BF9 24 0E            [12] 5195 	add	a,#0x0e
      001BFB F8               [12] 5196 	mov	r0,a
      001BFC 86 82            [24] 5197 	mov	dpl,@r0
      001BFE 08               [12] 5198 	inc	r0
      001BFF 86 83            [24] 5199 	mov	dph,@r0
      001C01 08               [12] 5200 	inc	r0
      001C02 86 F0            [24] 5201 	mov	b,@r0
      001C04 12r00r00         [24] 5202 	lcall	__gptrget
      001C07 FA               [12] 5203 	mov	r2,a
      001C08 A3               [24] 5204 	inc	dptr
      001C09 12r00r00         [24] 5205 	lcall	__gptrget
      001C0C FB               [12] 5206 	mov	r3,a
      001C0D A3               [24] 5207 	inc	dptr
      001C0E 12r00r00         [24] 5208 	lcall	__gptrget
      001C11 FC               [12] 5209 	mov	r4,a
      001C12 E5*00            [12] 5210 	mov	a,_bp
      001C14 24 19            [12] 5211 	add	a,#0x19
      001C16 F8               [12] 5212 	mov	r0,a
      001C17 E6               [12] 5213 	mov	a,@r0
      001C18 C0 E0            [24] 5214 	push	acc
      001C1A 08               [12] 5215 	inc	r0
      001C1B E6               [12] 5216 	mov	a,@r0
      001C1C C0 E0            [24] 5217 	push	acc
      001C1E 08               [12] 5218 	inc	r0
      001C1F E6               [12] 5219 	mov	a,@r0
      001C20 C0 E0            [24] 5220 	push	acc
      001C22 08               [12] 5221 	inc	r0
      001C23 E6               [12] 5222 	mov	a,@r0
      001C24 C0 E0            [24] 5223 	push	acc
      001C26 8A 82            [24] 5224 	mov	dpl,r2
      001C28 8B 83            [24] 5225 	mov	dph,r3
      001C2A 8C F0            [24] 5226 	mov	b,r4
      001C2C 12r00r00         [24] 5227 	lcall	_stack_push
      001C2F E5 81            [12] 5228 	mov	a,sp
      001C31 24 FC            [12] 5229 	add	a,#0xfc
      001C33 F5 81            [12] 5230 	mov	sp,a
                                   5231 ;	calc.c:258: (void)stack_push(ctx->ps, d0);			
      001C35 E5*00            [12] 5232 	mov	a,_bp
      001C37 24 0E            [12] 5233 	add	a,#0x0e
      001C39 F8               [12] 5234 	mov	r0,a
      001C3A 86 82            [24] 5235 	mov	dpl,@r0
      001C3C 08               [12] 5236 	inc	r0
      001C3D 86 83            [24] 5237 	mov	dph,@r0
      001C3F 08               [12] 5238 	inc	r0
      001C40 86 F0            [24] 5239 	mov	b,@r0
      001C42 12r00r00         [24] 5240 	lcall	__gptrget
      001C45 FA               [12] 5241 	mov	r2,a
      001C46 A3               [24] 5242 	inc	dptr
      001C47 12r00r00         [24] 5243 	lcall	__gptrget
      001C4A FB               [12] 5244 	mov	r3,a
      001C4B A3               [24] 5245 	inc	dptr
      001C4C 12r00r00         [24] 5246 	lcall	__gptrget
      001C4F FC               [12] 5247 	mov	r4,a
      001C50 E5*00            [12] 5248 	mov	a,_bp
      001C52 24 15            [12] 5249 	add	a,#0x15
      001C54 F8               [12] 5250 	mov	r0,a
      001C55 E6               [12] 5251 	mov	a,@r0
      001C56 C0 E0            [24] 5252 	push	acc
      001C58 08               [12] 5253 	inc	r0
      001C59 E6               [12] 5254 	mov	a,@r0
      001C5A C0 E0            [24] 5255 	push	acc
      001C5C 08               [12] 5256 	inc	r0
      001C5D E6               [12] 5257 	mov	a,@r0
      001C5E C0 E0            [24] 5258 	push	acc
      001C60 08               [12] 5259 	inc	r0
      001C61 E6               [12] 5260 	mov	a,@r0
      001C62 C0 E0            [24] 5261 	push	acc
      001C64 8A 82            [24] 5262 	mov	dpl,r2
      001C66 8B 83            [24] 5263 	mov	dph,r3
      001C68 8C F0            [24] 5264 	mov	b,r4
      001C6A 12r00r00         [24] 5265 	lcall	_stack_push
      001C6D E5 81            [12] 5266 	mov	a,sp
      001C6F 24 FC            [12] 5267 	add	a,#0xfc
      001C71 F5 81            [12] 5268 	mov	sp,a
                                   5269 ;	calc.c:259: printstr("\r\ndivision by zero\r\n");
      001C73 7Fr9A            [12] 5270 	mov	r7,#___str_12
      001C75 7Es00            [12] 5271 	mov	r6,#(___str_12 >> 8)
      001C77 7D 80            [12] 5272 	mov	r5,#0x80
                                   5273 ;	calc.c:51: return;
      001C79                       5274 00457$:
                                   5275 ;	calc.c:49: for (; *s; s++) putchar(*s);
      001C79 8F 82            [24] 5276 	mov	dpl,r7
      001C7B 8E 83            [24] 5277 	mov	dph,r6
      001C7D 8D F0            [24] 5278 	mov	b,r5
      001C7F 12r00r00         [24] 5279 	lcall	__gptrget
      001C82 FC               [12] 5280 	mov	r4,a
      001C83 70 03            [24] 5281 	jnz	01359$
      001C85 02r28r30         [24] 5282 	ljmp	00249$
      001C88                       5283 01359$:
      001C88 7B 00            [12] 5284 	mov	r3,#0x00
      001C8A 8C 82            [24] 5285 	mov	dpl,r4
      001C8C 8B 83            [24] 5286 	mov	dph,r3
      001C8E 12r00r00         [24] 5287 	lcall	_putchar
      001C91 0F               [12] 5288 	inc	r7
                                   5289 ;	calc.c:259: printstr("\r\ndivision by zero\r\n");
      001C92 BF 00 E4         [24] 5290 	cjne	r7,#0x00,00457$
      001C95 0E               [12] 5291 	inc	r6
      001C96 80 E1            [24] 5292 	sjmp	00457$
      001C98                       5293 00194$:
                                   5294 ;	calc.c:261: if (ctx->digit[0] == '%') d1 %= d0;
      001C98 8D 82            [24] 5295 	mov	dpl,r5
      001C9A 8E 83            [24] 5296 	mov	dph,r6
      001C9C 8F F0            [24] 5297 	mov	b,r7
      001C9E 12r00r00         [24] 5298 	lcall	__gptrget
      001CA1 FD               [12] 5299 	mov	r5,a
      001CA2 BD 25 45         [24] 5300 	cjne	r5,#0x25,00191$
      001CA5 E5*00            [12] 5301 	mov	a,_bp
      001CA7 24 15            [12] 5302 	add	a,#0x15
      001CA9 F8               [12] 5303 	mov	r0,a
      001CAA E6               [12] 5304 	mov	a,@r0
      001CAB C0 E0            [24] 5305 	push	acc
      001CAD 08               [12] 5306 	inc	r0
      001CAE E6               [12] 5307 	mov	a,@r0
      001CAF C0 E0            [24] 5308 	push	acc
      001CB1 08               [12] 5309 	inc	r0
      001CB2 E6               [12] 5310 	mov	a,@r0
      001CB3 C0 E0            [24] 5311 	push	acc
      001CB5 08               [12] 5312 	inc	r0
      001CB6 E6               [12] 5313 	mov	a,@r0
      001CB7 C0 E0            [24] 5314 	push	acc
      001CB9 E5*00            [12] 5315 	mov	a,_bp
      001CBB 24 19            [12] 5316 	add	a,#0x19
      001CBD F8               [12] 5317 	mov	r0,a
      001CBE 86 82            [24] 5318 	mov	dpl,@r0
      001CC0 08               [12] 5319 	inc	r0
      001CC1 86 83            [24] 5320 	mov	dph,@r0
      001CC3 08               [12] 5321 	inc	r0
      001CC4 86 F0            [24] 5322 	mov	b,@r0
      001CC6 08               [12] 5323 	inc	r0
      001CC7 E6               [12] 5324 	mov	a,@r0
      001CC8 12r00r00         [24] 5325 	lcall	__modslong
      001CCB AC 82            [24] 5326 	mov	r4,dpl
      001CCD AD 83            [24] 5327 	mov	r5,dph
      001CCF AE F0            [24] 5328 	mov	r6,b
      001CD1 FF               [12] 5329 	mov	r7,a
      001CD2 E5 81            [12] 5330 	mov	a,sp
      001CD4 24 FC            [12] 5331 	add	a,#0xfc
      001CD6 F5 81            [12] 5332 	mov	sp,a
      001CD8 E5*00            [12] 5333 	mov	a,_bp
      001CDA 24 19            [12] 5334 	add	a,#0x19
      001CDC F8               [12] 5335 	mov	r0,a
      001CDD A6 04            [24] 5336 	mov	@r0,ar4
      001CDF 08               [12] 5337 	inc	r0
      001CE0 A6 05            [24] 5338 	mov	@r0,ar5
      001CE2 08               [12] 5339 	inc	r0
      001CE3 A6 06            [24] 5340 	mov	@r0,ar6
      001CE5 08               [12] 5341 	inc	r0
      001CE6 A6 07            [24] 5342 	mov	@r0,ar7
      001CE8 80 5F            [24] 5343 	sjmp	00192$
      001CEA                       5344 00191$:
                                   5345 ;	calc.c:262: else d1 = (unsigned long)d1 % (unsigned long)d0;
      001CEA E5*00            [12] 5346 	mov	a,_bp
      001CEC 24 19            [12] 5347 	add	a,#0x19
      001CEE F8               [12] 5348 	mov	r0,a
      001CEF E5*00            [12] 5349 	mov	a,_bp
      001CF1 24 07            [12] 5350 	add	a,#0x07
      001CF3 F9               [12] 5351 	mov	r1,a
      001CF4 E6               [12] 5352 	mov	a,@r0
      001CF5 F7               [12] 5353 	mov	@r1,a
      001CF6 08               [12] 5354 	inc	r0
      001CF7 09               [12] 5355 	inc	r1
      001CF8 E6               [12] 5356 	mov	a,@r0
      001CF9 F7               [12] 5357 	mov	@r1,a
      001CFA 08               [12] 5358 	inc	r0
      001CFB 09               [12] 5359 	inc	r1
      001CFC E6               [12] 5360 	mov	a,@r0
      001CFD F7               [12] 5361 	mov	@r1,a
      001CFE 08               [12] 5362 	inc	r0
      001CFF 09               [12] 5363 	inc	r1
      001D00 E6               [12] 5364 	mov	a,@r0
      001D01 F7               [12] 5365 	mov	@r1,a
      001D02 E5*00            [12] 5366 	mov	a,_bp
      001D04 24 15            [12] 5367 	add	a,#0x15
      001D06 F8               [12] 5368 	mov	r0,a
      001D07 86 02            [24] 5369 	mov	ar2,@r0
      001D09 08               [12] 5370 	inc	r0
      001D0A 86 03            [24] 5371 	mov	ar3,@r0
      001D0C 08               [12] 5372 	inc	r0
      001D0D 86 06            [24] 5373 	mov	ar6,@r0
      001D0F 08               [12] 5374 	inc	r0
      001D10 86 07            [24] 5375 	mov	ar7,@r0
      001D12 C0 02            [24] 5376 	push	ar2
      001D14 C0 03            [24] 5377 	push	ar3
      001D16 C0 06            [24] 5378 	push	ar6
      001D18 C0 07            [24] 5379 	push	ar7
      001D1A E5*00            [12] 5380 	mov	a,_bp
      001D1C 24 07            [12] 5381 	add	a,#0x07
      001D1E F8               [12] 5382 	mov	r0,a
      001D1F 86 82            [24] 5383 	mov	dpl,@r0
      001D21 08               [12] 5384 	inc	r0
      001D22 86 83            [24] 5385 	mov	dph,@r0
      001D24 08               [12] 5386 	inc	r0
      001D25 86 F0            [24] 5387 	mov	b,@r0
      001D27 08               [12] 5388 	inc	r0
      001D28 E6               [12] 5389 	mov	a,@r0
      001D29 12r00r00         [24] 5390 	lcall	__modulong
      001D2C AC 82            [24] 5391 	mov	r4,dpl
      001D2E AD 83            [24] 5392 	mov	r5,dph
      001D30 AE F0            [24] 5393 	mov	r6,b
      001D32 FF               [12] 5394 	mov	r7,a
      001D33 E5 81            [12] 5395 	mov	a,sp
      001D35 24 FC            [12] 5396 	add	a,#0xfc
      001D37 F5 81            [12] 5397 	mov	sp,a
      001D39 E5*00            [12] 5398 	mov	a,_bp
      001D3B 24 19            [12] 5399 	add	a,#0x19
      001D3D F8               [12] 5400 	mov	r0,a
      001D3E A6 04            [24] 5401 	mov	@r0,ar4
      001D40 08               [12] 5402 	inc	r0
      001D41 A6 05            [24] 5403 	mov	@r0,ar5
      001D43 08               [12] 5404 	inc	r0
      001D44 A6 06            [24] 5405 	mov	@r0,ar6
      001D46 08               [12] 5406 	inc	r0
      001D47 A6 07            [24] 5407 	mov	@r0,ar7
      001D49                       5408 00192$:
                                   5409 ;	calc.c:263: (void)stack_push(ctx->ps, d1);
      001D49 E5*00            [12] 5410 	mov	a,_bp
      001D4B 24 0E            [12] 5411 	add	a,#0x0e
      001D4D F8               [12] 5412 	mov	r0,a
      001D4E 86 82            [24] 5413 	mov	dpl,@r0
      001D50 08               [12] 5414 	inc	r0
      001D51 86 83            [24] 5415 	mov	dph,@r0
      001D53 08               [12] 5416 	inc	r0
      001D54 86 F0            [24] 5417 	mov	b,@r0
      001D56 12r00r00         [24] 5418 	lcall	__gptrget
      001D59 FD               [12] 5419 	mov	r5,a
      001D5A A3               [24] 5420 	inc	dptr
      001D5B 12r00r00         [24] 5421 	lcall	__gptrget
      001D5E FE               [12] 5422 	mov	r6,a
      001D5F A3               [24] 5423 	inc	dptr
      001D60 12r00r00         [24] 5424 	lcall	__gptrget
      001D63 FF               [12] 5425 	mov	r7,a
      001D64 E5*00            [12] 5426 	mov	a,_bp
      001D66 24 19            [12] 5427 	add	a,#0x19
      001D68 F8               [12] 5428 	mov	r0,a
      001D69 E6               [12] 5429 	mov	a,@r0
      001D6A C0 E0            [24] 5430 	push	acc
      001D6C 08               [12] 5431 	inc	r0
      001D6D E6               [12] 5432 	mov	a,@r0
      001D6E C0 E0            [24] 5433 	push	acc
      001D70 08               [12] 5434 	inc	r0
      001D71 E6               [12] 5435 	mov	a,@r0
      001D72 C0 E0            [24] 5436 	push	acc
      001D74 08               [12] 5437 	inc	r0
      001D75 E6               [12] 5438 	mov	a,@r0
      001D76 C0 E0            [24] 5439 	push	acc
      001D78 8D 82            [24] 5440 	mov	dpl,r5
      001D7A 8E 83            [24] 5441 	mov	dph,r6
      001D7C 8F F0            [24] 5442 	mov	b,r7
      001D7E 12r00r00         [24] 5443 	lcall	_stack_push
      001D81 E5 81            [12] 5444 	mov	a,sp
      001D83 24 FC            [12] 5445 	add	a,#0xfc
      001D85 F5 81            [12] 5446 	mov	sp,a
                                   5447 ;	calc.c:265: break;
      001D87 02r28r30         [24] 5448 	ljmp	00249$
                                   5449 ;	calc.c:266: case '&':
      001D8A                       5450 00202$:
                                   5451 ;	calc.c:267: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      001D8A E5*00            [12] 5452 	mov	a,_bp
      001D8C 24 15            [12] 5453 	add	a,#0x15
      001D8E FF               [12] 5454 	mov	r7,a
      001D8F E5*00            [12] 5455 	mov	a,_bp
      001D91 24 0E            [12] 5456 	add	a,#0x0e
      001D93 F8               [12] 5457 	mov	r0,a
      001D94 A6 07            [24] 5458 	mov	@r0,ar7
      001D96 08               [12] 5459 	inc	r0
      001D97 76 00            [12] 5460 	mov	@r0,#0x00
      001D99 08               [12] 5461 	inc	r0
      001D9A 76 40            [12] 5462 	mov	@r0,#0x40
      001D9C E5*00            [12] 5463 	mov	a,_bp
      001D9E 24 12            [12] 5464 	add	a,#0x12
      001DA0 F8               [12] 5465 	mov	r0,a
      001DA1 74 11            [12] 5466 	mov	a,#0x11
      001DA3 26               [12] 5467 	add	a,@r0
      001DA4 FA               [12] 5468 	mov	r2,a
      001DA5 74 40            [12] 5469 	mov	a,#0x40
      001DA7 08               [12] 5470 	inc	r0
      001DA8 36               [12] 5471 	addc	a,@r0
      001DA9 FB               [12] 5472 	mov	r3,a
      001DAA 08               [12] 5473 	inc	r0
      001DAB 86 04            [24] 5474 	mov	ar4,@r0
      001DAD 8A 82            [24] 5475 	mov	dpl,r2
      001DAF 8B 83            [24] 5476 	mov	dph,r3
      001DB1 8C F0            [24] 5477 	mov	b,r4
      001DB3 12r00r00         [24] 5478 	lcall	__gptrget
      001DB6 FD               [12] 5479 	mov	r5,a
      001DB7 A3               [24] 5480 	inc	dptr
      001DB8 12r00r00         [24] 5481 	lcall	__gptrget
      001DBB FE               [12] 5482 	mov	r6,a
      001DBC A3               [24] 5483 	inc	dptr
      001DBD 12r00r00         [24] 5484 	lcall	__gptrget
      001DC0 FF               [12] 5485 	mov	r7,a
      001DC1 C0 04            [24] 5486 	push	ar4
      001DC3 C0 03            [24] 5487 	push	ar3
      001DC5 C0 02            [24] 5488 	push	ar2
      001DC7 E5*00            [12] 5489 	mov	a,_bp
      001DC9 24 0E            [12] 5490 	add	a,#0x0e
      001DCB F8               [12] 5491 	mov	r0,a
      001DCC E6               [12] 5492 	mov	a,@r0
      001DCD C0 E0            [24] 5493 	push	acc
      001DCF 08               [12] 5494 	inc	r0
      001DD0 E6               [12] 5495 	mov	a,@r0
      001DD1 C0 E0            [24] 5496 	push	acc
      001DD3 08               [12] 5497 	inc	r0
      001DD4 E6               [12] 5498 	mov	a,@r0
      001DD5 C0 E0            [24] 5499 	push	acc
      001DD7 8D 82            [24] 5500 	mov	dpl,r5
      001DD9 8E 83            [24] 5501 	mov	dph,r6
      001DDB 8F F0            [24] 5502 	mov	b,r7
      001DDD 12r00r00         [24] 5503 	lcall	_stack_pop
      001DE0 AE 82            [24] 5504 	mov	r6,dpl
      001DE2 AF 83            [24] 5505 	mov	r7,dph
      001DE4 15 81            [12] 5506 	dec	sp
      001DE6 15 81            [12] 5507 	dec	sp
      001DE8 15 81            [12] 5508 	dec	sp
      001DEA D0 02            [24] 5509 	pop	ar2
      001DEC D0 03            [24] 5510 	pop	ar3
      001DEE D0 04            [24] 5511 	pop	ar4
      001DF0 EE               [12] 5512 	mov	a,r6
      001DF1 4F               [12] 5513 	orl	a,r7
      001DF2 70 25            [24] 5514 	jnz	00207$
      001DF4 7Dr38            [12] 5515 	mov	r5,#___str_8
      001DF6 7Cs00            [12] 5516 	mov	r4,#(___str_8 >> 8)
      001DF8 7B 80            [12] 5517 	mov	r3,#0x80
                                   5518 ;	calc.c:51: return;
      001DFA                       5519 00460$:
                                   5520 ;	calc.c:49: for (; *s; s++) putchar(*s);
      001DFA 8D 82            [24] 5521 	mov	dpl,r5
      001DFC 8C 83            [24] 5522 	mov	dph,r4
      001DFE 8B F0            [24] 5523 	mov	b,r3
      001E00 12r00r00         [24] 5524 	lcall	__gptrget
      001E03 FF               [12] 5525 	mov	r7,a
      001E04 70 03            [24] 5526 	jnz	01364$
      001E06 02r28r30         [24] 5527 	ljmp	00249$
      001E09                       5528 01364$:
      001E09 7E 00            [12] 5529 	mov	r6,#0x00
      001E0B 8F 82            [24] 5530 	mov	dpl,r7
      001E0D 8E 83            [24] 5531 	mov	dph,r6
      001E0F 12r00r00         [24] 5532 	lcall	_putchar
      001E12 0D               [12] 5533 	inc	r5
                                   5534 ;	calc.c:267: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      001E13 BD 00 E4         [24] 5535 	cjne	r5,#0x00,00460$
      001E16 0C               [12] 5536 	inc	r4
      001E17 80 E1            [24] 5537 	sjmp	00460$
      001E19                       5538 00207$:
                                   5539 ;	calc.c:268: else if (!stack_pop(ctx->ps, &d1)) {
      001E19 E5*00            [12] 5540 	mov	a,_bp
      001E1B 24 19            [12] 5541 	add	a,#0x19
      001E1D FF               [12] 5542 	mov	r7,a
      001E1E E5*00            [12] 5543 	mov	a,_bp
      001E20 24 0E            [12] 5544 	add	a,#0x0e
      001E22 F8               [12] 5545 	mov	r0,a
      001E23 A6 07            [24] 5546 	mov	@r0,ar7
      001E25 08               [12] 5547 	inc	r0
      001E26 76 00            [12] 5548 	mov	@r0,#0x00
      001E28 08               [12] 5549 	inc	r0
      001E29 76 40            [12] 5550 	mov	@r0,#0x40
      001E2B 8A 82            [24] 5551 	mov	dpl,r2
      001E2D 8B 83            [24] 5552 	mov	dph,r3
      001E2F 8C F0            [24] 5553 	mov	b,r4
      001E31 12r00r00         [24] 5554 	lcall	__gptrget
      001E34 FD               [12] 5555 	mov	r5,a
      001E35 A3               [24] 5556 	inc	dptr
      001E36 12r00r00         [24] 5557 	lcall	__gptrget
      001E39 FE               [12] 5558 	mov	r6,a
      001E3A A3               [24] 5559 	inc	dptr
      001E3B 12r00r00         [24] 5560 	lcall	__gptrget
      001E3E FF               [12] 5561 	mov	r7,a
      001E3F C0 04            [24] 5562 	push	ar4
      001E41 C0 03            [24] 5563 	push	ar3
      001E43 C0 02            [24] 5564 	push	ar2
      001E45 E5*00            [12] 5565 	mov	a,_bp
      001E47 24 0E            [12] 5566 	add	a,#0x0e
      001E49 F8               [12] 5567 	mov	r0,a
      001E4A E6               [12] 5568 	mov	a,@r0
      001E4B C0 E0            [24] 5569 	push	acc
      001E4D 08               [12] 5570 	inc	r0
      001E4E E6               [12] 5571 	mov	a,@r0
      001E4F C0 E0            [24] 5572 	push	acc
      001E51 08               [12] 5573 	inc	r0
      001E52 E6               [12] 5574 	mov	a,@r0
      001E53 C0 E0            [24] 5575 	push	acc
      001E55 8D 82            [24] 5576 	mov	dpl,r5
      001E57 8E 83            [24] 5577 	mov	dph,r6
      001E59 8F F0            [24] 5578 	mov	b,r7
      001E5B 12r00r00         [24] 5579 	lcall	_stack_pop
      001E5E AE 82            [24] 5580 	mov	r6,dpl
      001E60 AF 83            [24] 5581 	mov	r7,dph
      001E62 15 81            [12] 5582 	dec	sp
      001E64 15 81            [12] 5583 	dec	sp
      001E66 15 81            [12] 5584 	dec	sp
      001E68 D0 02            [24] 5585 	pop	ar2
      001E6A D0 03            [24] 5586 	pop	ar3
      001E6C D0 04            [24] 5587 	pop	ar4
      001E6E EE               [12] 5588 	mov	a,r6
      001E6F 4F               [12] 5589 	orl	a,r7
      001E70 70 5C            [24] 5590 	jnz	00204$
                                   5591 ;	calc.c:269: (void)stack_push(ctx->ps, d0);
      001E72 8A 82            [24] 5592 	mov	dpl,r2
      001E74 8B 83            [24] 5593 	mov	dph,r3
      001E76 8C F0            [24] 5594 	mov	b,r4
      001E78 12r00r00         [24] 5595 	lcall	__gptrget
      001E7B FD               [12] 5596 	mov	r5,a
      001E7C A3               [24] 5597 	inc	dptr
      001E7D 12r00r00         [24] 5598 	lcall	__gptrget
      001E80 FE               [12] 5599 	mov	r6,a
      001E81 A3               [24] 5600 	inc	dptr
      001E82 12r00r00         [24] 5601 	lcall	__gptrget
      001E85 FF               [12] 5602 	mov	r7,a
      001E86 E5*00            [12] 5603 	mov	a,_bp
      001E88 24 15            [12] 5604 	add	a,#0x15
      001E8A F8               [12] 5605 	mov	r0,a
      001E8B E6               [12] 5606 	mov	a,@r0
      001E8C C0 E0            [24] 5607 	push	acc
      001E8E 08               [12] 5608 	inc	r0
      001E8F E6               [12] 5609 	mov	a,@r0
      001E90 C0 E0            [24] 5610 	push	acc
      001E92 08               [12] 5611 	inc	r0
      001E93 E6               [12] 5612 	mov	a,@r0
      001E94 C0 E0            [24] 5613 	push	acc
      001E96 08               [12] 5614 	inc	r0
      001E97 E6               [12] 5615 	mov	a,@r0
      001E98 C0 E0            [24] 5616 	push	acc
      001E9A 8D 82            [24] 5617 	mov	dpl,r5
      001E9C 8E 83            [24] 5618 	mov	dph,r6
      001E9E 8F F0            [24] 5619 	mov	b,r7
      001EA0 12r00r00         [24] 5620 	lcall	_stack_push
      001EA3 E5 81            [12] 5621 	mov	a,sp
      001EA5 24 FC            [12] 5622 	add	a,#0xfc
      001EA7 F5 81            [12] 5623 	mov	sp,a
                                   5624 ;	calc.c:270: printstr("\r\nstack underflow\r\n");
      001EA9 7Dr38            [12] 5625 	mov	r5,#___str_8
      001EAB 7Cs00            [12] 5626 	mov	r4,#(___str_8 >> 8)
      001EAD 7B 80            [12] 5627 	mov	r3,#0x80
                                   5628 ;	calc.c:51: return;
      001EAF                       5629 00463$:
                                   5630 ;	calc.c:49: for (; *s; s++) putchar(*s);
      001EAF 8D 82            [24] 5631 	mov	dpl,r5
      001EB1 8C 83            [24] 5632 	mov	dph,r4
      001EB3 8B F0            [24] 5633 	mov	b,r3
      001EB5 12r00r00         [24] 5634 	lcall	__gptrget
      001EB8 FF               [12] 5635 	mov	r7,a
      001EB9 70 03            [24] 5636 	jnz	01367$
      001EBB 02r28r30         [24] 5637 	ljmp	00249$
      001EBE                       5638 01367$:
      001EBE 7E 00            [12] 5639 	mov	r6,#0x00
      001EC0 8F 82            [24] 5640 	mov	dpl,r7
      001EC2 8E 83            [24] 5641 	mov	dph,r6
      001EC4 12r00r00         [24] 5642 	lcall	_putchar
      001EC7 0D               [12] 5643 	inc	r5
                                   5644 ;	calc.c:270: printstr("\r\nstack underflow\r\n");
      001EC8 BD 00 E4         [24] 5645 	cjne	r5,#0x00,00463$
      001ECB 0C               [12] 5646 	inc	r4
      001ECC 80 E1            [24] 5647 	sjmp	00463$
      001ECE                       5648 00204$:
                                   5649 ;	calc.c:272: d1 &= d0;
      001ECE E5*00            [12] 5650 	mov	a,_bp
      001ED0 24 19            [12] 5651 	add	a,#0x19
      001ED2 F8               [12] 5652 	mov	r0,a
      001ED3 E5*00            [12] 5653 	mov	a,_bp
      001ED5 24 15            [12] 5654 	add	a,#0x15
      001ED7 F9               [12] 5655 	mov	r1,a
      001ED8 E7               [12] 5656 	mov	a,@r1
      001ED9 56               [12] 5657 	anl	a,@r0
      001EDA F6               [12] 5658 	mov	@r0,a
      001EDB 09               [12] 5659 	inc	r1
      001EDC E7               [12] 5660 	mov	a,@r1
      001EDD 08               [12] 5661 	inc	r0
      001EDE 56               [12] 5662 	anl	a,@r0
      001EDF F6               [12] 5663 	mov	@r0,a
      001EE0 09               [12] 5664 	inc	r1
      001EE1 E7               [12] 5665 	mov	a,@r1
      001EE2 08               [12] 5666 	inc	r0
      001EE3 56               [12] 5667 	anl	a,@r0
      001EE4 F6               [12] 5668 	mov	@r0,a
      001EE5 09               [12] 5669 	inc	r1
      001EE6 E7               [12] 5670 	mov	a,@r1
      001EE7 08               [12] 5671 	inc	r0
      001EE8 56               [12] 5672 	anl	a,@r0
      001EE9 F6               [12] 5673 	mov	@r0,a
                                   5674 ;	calc.c:273: (void)stack_push(ctx->ps, d1);
      001EEA 8A 82            [24] 5675 	mov	dpl,r2
      001EEC 8B 83            [24] 5676 	mov	dph,r3
      001EEE 8C F0            [24] 5677 	mov	b,r4
      001EF0 12r00r00         [24] 5678 	lcall	__gptrget
      001EF3 FA               [12] 5679 	mov	r2,a
      001EF4 A3               [24] 5680 	inc	dptr
      001EF5 12r00r00         [24] 5681 	lcall	__gptrget
      001EF8 FB               [12] 5682 	mov	r3,a
      001EF9 A3               [24] 5683 	inc	dptr
      001EFA 12r00r00         [24] 5684 	lcall	__gptrget
      001EFD FC               [12] 5685 	mov	r4,a
      001EFE E5*00            [12] 5686 	mov	a,_bp
      001F00 24 19            [12] 5687 	add	a,#0x19
      001F02 F8               [12] 5688 	mov	r0,a
      001F03 E6               [12] 5689 	mov	a,@r0
      001F04 C0 E0            [24] 5690 	push	acc
      001F06 08               [12] 5691 	inc	r0
      001F07 E6               [12] 5692 	mov	a,@r0
      001F08 C0 E0            [24] 5693 	push	acc
      001F0A 08               [12] 5694 	inc	r0
      001F0B E6               [12] 5695 	mov	a,@r0
      001F0C C0 E0            [24] 5696 	push	acc
      001F0E 08               [12] 5697 	inc	r0
      001F0F E6               [12] 5698 	mov	a,@r0
      001F10 C0 E0            [24] 5699 	push	acc
      001F12 8A 82            [24] 5700 	mov	dpl,r2
      001F14 8B 83            [24] 5701 	mov	dph,r3
      001F16 8C F0            [24] 5702 	mov	b,r4
      001F18 12r00r00         [24] 5703 	lcall	_stack_push
      001F1B E5 81            [12] 5704 	mov	a,sp
      001F1D 24 FC            [12] 5705 	add	a,#0xfc
      001F1F F5 81            [12] 5706 	mov	sp,a
                                   5707 ;	calc.c:275: break;
      001F21 02r28r30         [24] 5708 	ljmp	00249$
                                   5709 ;	calc.c:276: case '|':
      001F24                       5710 00209$:
                                   5711 ;	calc.c:277: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      001F24 E5*00            [12] 5712 	mov	a,_bp
      001F26 24 15            [12] 5713 	add	a,#0x15
      001F28 FF               [12] 5714 	mov	r7,a
      001F29 E5*00            [12] 5715 	mov	a,_bp
      001F2B 24 0E            [12] 5716 	add	a,#0x0e
      001F2D F8               [12] 5717 	mov	r0,a
      001F2E A6 07            [24] 5718 	mov	@r0,ar7
      001F30 08               [12] 5719 	inc	r0
      001F31 76 00            [12] 5720 	mov	@r0,#0x00
      001F33 08               [12] 5721 	inc	r0
      001F34 76 40            [12] 5722 	mov	@r0,#0x40
      001F36 E5*00            [12] 5723 	mov	a,_bp
      001F38 24 12            [12] 5724 	add	a,#0x12
      001F3A F8               [12] 5725 	mov	r0,a
      001F3B 74 11            [12] 5726 	mov	a,#0x11
      001F3D 26               [12] 5727 	add	a,@r0
      001F3E FA               [12] 5728 	mov	r2,a
      001F3F 74 40            [12] 5729 	mov	a,#0x40
      001F41 08               [12] 5730 	inc	r0
      001F42 36               [12] 5731 	addc	a,@r0
      001F43 FB               [12] 5732 	mov	r3,a
      001F44 08               [12] 5733 	inc	r0
      001F45 86 04            [24] 5734 	mov	ar4,@r0
      001F47 8A 82            [24] 5735 	mov	dpl,r2
      001F49 8B 83            [24] 5736 	mov	dph,r3
      001F4B 8C F0            [24] 5737 	mov	b,r4
      001F4D 12r00r00         [24] 5738 	lcall	__gptrget
      001F50 FD               [12] 5739 	mov	r5,a
      001F51 A3               [24] 5740 	inc	dptr
      001F52 12r00r00         [24] 5741 	lcall	__gptrget
      001F55 FE               [12] 5742 	mov	r6,a
      001F56 A3               [24] 5743 	inc	dptr
      001F57 12r00r00         [24] 5744 	lcall	__gptrget
      001F5A FF               [12] 5745 	mov	r7,a
      001F5B C0 04            [24] 5746 	push	ar4
      001F5D C0 03            [24] 5747 	push	ar3
      001F5F C0 02            [24] 5748 	push	ar2
      001F61 E5*00            [12] 5749 	mov	a,_bp
      001F63 24 0E            [12] 5750 	add	a,#0x0e
      001F65 F8               [12] 5751 	mov	r0,a
      001F66 E6               [12] 5752 	mov	a,@r0
      001F67 C0 E0            [24] 5753 	push	acc
      001F69 08               [12] 5754 	inc	r0
      001F6A E6               [12] 5755 	mov	a,@r0
      001F6B C0 E0            [24] 5756 	push	acc
      001F6D 08               [12] 5757 	inc	r0
      001F6E E6               [12] 5758 	mov	a,@r0
      001F6F C0 E0            [24] 5759 	push	acc
      001F71 8D 82            [24] 5760 	mov	dpl,r5
      001F73 8E 83            [24] 5761 	mov	dph,r6
      001F75 8F F0            [24] 5762 	mov	b,r7
      001F77 12r00r00         [24] 5763 	lcall	_stack_pop
      001F7A AE 82            [24] 5764 	mov	r6,dpl
      001F7C AF 83            [24] 5765 	mov	r7,dph
      001F7E 15 81            [12] 5766 	dec	sp
      001F80 15 81            [12] 5767 	dec	sp
      001F82 15 81            [12] 5768 	dec	sp
      001F84 D0 02            [24] 5769 	pop	ar2
      001F86 D0 03            [24] 5770 	pop	ar3
      001F88 D0 04            [24] 5771 	pop	ar4
      001F8A EE               [12] 5772 	mov	a,r6
      001F8B 4F               [12] 5773 	orl	a,r7
      001F8C 70 25            [24] 5774 	jnz	00214$
      001F8E 7Dr38            [12] 5775 	mov	r5,#___str_8
      001F90 7Cs00            [12] 5776 	mov	r4,#(___str_8 >> 8)
      001F92 7B 80            [12] 5777 	mov	r3,#0x80
                                   5778 ;	calc.c:51: return;
      001F94                       5779 00466$:
                                   5780 ;	calc.c:49: for (; *s; s++) putchar(*s);
      001F94 8D 82            [24] 5781 	mov	dpl,r5
      001F96 8C 83            [24] 5782 	mov	dph,r4
      001F98 8B F0            [24] 5783 	mov	b,r3
      001F9A 12r00r00         [24] 5784 	lcall	__gptrget
      001F9D FF               [12] 5785 	mov	r7,a
      001F9E 70 03            [24] 5786 	jnz	01370$
      001FA0 02r28r30         [24] 5787 	ljmp	00249$
      001FA3                       5788 01370$:
      001FA3 7E 00            [12] 5789 	mov	r6,#0x00
      001FA5 8F 82            [24] 5790 	mov	dpl,r7
      001FA7 8E 83            [24] 5791 	mov	dph,r6
      001FA9 12r00r00         [24] 5792 	lcall	_putchar
      001FAC 0D               [12] 5793 	inc	r5
                                   5794 ;	calc.c:277: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      001FAD BD 00 E4         [24] 5795 	cjne	r5,#0x00,00466$
      001FB0 0C               [12] 5796 	inc	r4
      001FB1 80 E1            [24] 5797 	sjmp	00466$
      001FB3                       5798 00214$:
                                   5799 ;	calc.c:278: else if (!stack_pop(ctx->ps, &d1)) {
      001FB3 E5*00            [12] 5800 	mov	a,_bp
      001FB5 24 19            [12] 5801 	add	a,#0x19
      001FB7 FF               [12] 5802 	mov	r7,a
      001FB8 E5*00            [12] 5803 	mov	a,_bp
      001FBA 24 0E            [12] 5804 	add	a,#0x0e
      001FBC F8               [12] 5805 	mov	r0,a
      001FBD A6 07            [24] 5806 	mov	@r0,ar7
      001FBF 08               [12] 5807 	inc	r0
      001FC0 76 00            [12] 5808 	mov	@r0,#0x00
      001FC2 08               [12] 5809 	inc	r0
      001FC3 76 40            [12] 5810 	mov	@r0,#0x40
      001FC5 8A 82            [24] 5811 	mov	dpl,r2
      001FC7 8B 83            [24] 5812 	mov	dph,r3
      001FC9 8C F0            [24] 5813 	mov	b,r4
      001FCB 12r00r00         [24] 5814 	lcall	__gptrget
      001FCE FD               [12] 5815 	mov	r5,a
      001FCF A3               [24] 5816 	inc	dptr
      001FD0 12r00r00         [24] 5817 	lcall	__gptrget
      001FD3 FE               [12] 5818 	mov	r6,a
      001FD4 A3               [24] 5819 	inc	dptr
      001FD5 12r00r00         [24] 5820 	lcall	__gptrget
      001FD8 FF               [12] 5821 	mov	r7,a
      001FD9 C0 04            [24] 5822 	push	ar4
      001FDB C0 03            [24] 5823 	push	ar3
      001FDD C0 02            [24] 5824 	push	ar2
      001FDF E5*00            [12] 5825 	mov	a,_bp
      001FE1 24 0E            [12] 5826 	add	a,#0x0e
      001FE3 F8               [12] 5827 	mov	r0,a
      001FE4 E6               [12] 5828 	mov	a,@r0
      001FE5 C0 E0            [24] 5829 	push	acc
      001FE7 08               [12] 5830 	inc	r0
      001FE8 E6               [12] 5831 	mov	a,@r0
      001FE9 C0 E0            [24] 5832 	push	acc
      001FEB 08               [12] 5833 	inc	r0
      001FEC E6               [12] 5834 	mov	a,@r0
      001FED C0 E0            [24] 5835 	push	acc
      001FEF 8D 82            [24] 5836 	mov	dpl,r5
      001FF1 8E 83            [24] 5837 	mov	dph,r6
      001FF3 8F F0            [24] 5838 	mov	b,r7
      001FF5 12r00r00         [24] 5839 	lcall	_stack_pop
      001FF8 AE 82            [24] 5840 	mov	r6,dpl
      001FFA AF 83            [24] 5841 	mov	r7,dph
      001FFC 15 81            [12] 5842 	dec	sp
      001FFE 15 81            [12] 5843 	dec	sp
      002000 15 81            [12] 5844 	dec	sp
      002002 D0 02            [24] 5845 	pop	ar2
      002004 D0 03            [24] 5846 	pop	ar3
      002006 D0 04            [24] 5847 	pop	ar4
      002008 EE               [12] 5848 	mov	a,r6
      002009 4F               [12] 5849 	orl	a,r7
      00200A 70 5C            [24] 5850 	jnz	00211$
                                   5851 ;	calc.c:279: (void)stack_push(ctx->ps, d0);
      00200C 8A 82            [24] 5852 	mov	dpl,r2
      00200E 8B 83            [24] 5853 	mov	dph,r3
      002010 8C F0            [24] 5854 	mov	b,r4
      002012 12r00r00         [24] 5855 	lcall	__gptrget
      002015 FD               [12] 5856 	mov	r5,a
      002016 A3               [24] 5857 	inc	dptr
      002017 12r00r00         [24] 5858 	lcall	__gptrget
      00201A FE               [12] 5859 	mov	r6,a
      00201B A3               [24] 5860 	inc	dptr
      00201C 12r00r00         [24] 5861 	lcall	__gptrget
      00201F FF               [12] 5862 	mov	r7,a
      002020 E5*00            [12] 5863 	mov	a,_bp
      002022 24 15            [12] 5864 	add	a,#0x15
      002024 F8               [12] 5865 	mov	r0,a
      002025 E6               [12] 5866 	mov	a,@r0
      002026 C0 E0            [24] 5867 	push	acc
      002028 08               [12] 5868 	inc	r0
      002029 E6               [12] 5869 	mov	a,@r0
      00202A C0 E0            [24] 5870 	push	acc
      00202C 08               [12] 5871 	inc	r0
      00202D E6               [12] 5872 	mov	a,@r0
      00202E C0 E0            [24] 5873 	push	acc
      002030 08               [12] 5874 	inc	r0
      002031 E6               [12] 5875 	mov	a,@r0
      002032 C0 E0            [24] 5876 	push	acc
      002034 8D 82            [24] 5877 	mov	dpl,r5
      002036 8E 83            [24] 5878 	mov	dph,r6
      002038 8F F0            [24] 5879 	mov	b,r7
      00203A 12r00r00         [24] 5880 	lcall	_stack_push
      00203D E5 81            [12] 5881 	mov	a,sp
      00203F 24 FC            [12] 5882 	add	a,#0xfc
      002041 F5 81            [12] 5883 	mov	sp,a
                                   5884 ;	calc.c:280: printstr("\r\nstack underflow\r\n");
      002043 7Dr38            [12] 5885 	mov	r5,#___str_8
      002045 7Cs00            [12] 5886 	mov	r4,#(___str_8 >> 8)
      002047 7B 80            [12] 5887 	mov	r3,#0x80
                                   5888 ;	calc.c:51: return;
      002049                       5889 00469$:
                                   5890 ;	calc.c:49: for (; *s; s++) putchar(*s);
      002049 8D 82            [24] 5891 	mov	dpl,r5
      00204B 8C 83            [24] 5892 	mov	dph,r4
      00204D 8B F0            [24] 5893 	mov	b,r3
      00204F 12r00r00         [24] 5894 	lcall	__gptrget
      002052 FF               [12] 5895 	mov	r7,a
      002053 70 03            [24] 5896 	jnz	01373$
      002055 02r28r30         [24] 5897 	ljmp	00249$
      002058                       5898 01373$:
      002058 7E 00            [12] 5899 	mov	r6,#0x00
      00205A 8F 82            [24] 5900 	mov	dpl,r7
      00205C 8E 83            [24] 5901 	mov	dph,r6
      00205E 12r00r00         [24] 5902 	lcall	_putchar
      002061 0D               [12] 5903 	inc	r5
                                   5904 ;	calc.c:280: printstr("\r\nstack underflow\r\n");
      002062 BD 00 E4         [24] 5905 	cjne	r5,#0x00,00469$
      002065 0C               [12] 5906 	inc	r4
      002066 80 E1            [24] 5907 	sjmp	00469$
      002068                       5908 00211$:
                                   5909 ;	calc.c:282: d1 |= d0;
      002068 E5*00            [12] 5910 	mov	a,_bp
      00206A 24 19            [12] 5911 	add	a,#0x19
      00206C F8               [12] 5912 	mov	r0,a
      00206D E5*00            [12] 5913 	mov	a,_bp
      00206F 24 15            [12] 5914 	add	a,#0x15
      002071 F9               [12] 5915 	mov	r1,a
      002072 E7               [12] 5916 	mov	a,@r1
      002073 46               [12] 5917 	orl	a,@r0
      002074 F6               [12] 5918 	mov	@r0,a
      002075 09               [12] 5919 	inc	r1
      002076 E7               [12] 5920 	mov	a,@r1
      002077 08               [12] 5921 	inc	r0
      002078 46               [12] 5922 	orl	a,@r0
      002079 F6               [12] 5923 	mov	@r0,a
      00207A 09               [12] 5924 	inc	r1
      00207B E7               [12] 5925 	mov	a,@r1
      00207C 08               [12] 5926 	inc	r0
      00207D 46               [12] 5927 	orl	a,@r0
      00207E F6               [12] 5928 	mov	@r0,a
      00207F 09               [12] 5929 	inc	r1
      002080 E7               [12] 5930 	mov	a,@r1
      002081 08               [12] 5931 	inc	r0
      002082 46               [12] 5932 	orl	a,@r0
      002083 F6               [12] 5933 	mov	@r0,a
                                   5934 ;	calc.c:283: (void)stack_push(ctx->ps, d1);
      002084 8A 82            [24] 5935 	mov	dpl,r2
      002086 8B 83            [24] 5936 	mov	dph,r3
      002088 8C F0            [24] 5937 	mov	b,r4
      00208A 12r00r00         [24] 5938 	lcall	__gptrget
      00208D FA               [12] 5939 	mov	r2,a
      00208E A3               [24] 5940 	inc	dptr
      00208F 12r00r00         [24] 5941 	lcall	__gptrget
      002092 FB               [12] 5942 	mov	r3,a
      002093 A3               [24] 5943 	inc	dptr
      002094 12r00r00         [24] 5944 	lcall	__gptrget
      002097 FC               [12] 5945 	mov	r4,a
      002098 E5*00            [12] 5946 	mov	a,_bp
      00209A 24 19            [12] 5947 	add	a,#0x19
      00209C F8               [12] 5948 	mov	r0,a
      00209D E6               [12] 5949 	mov	a,@r0
      00209E C0 E0            [24] 5950 	push	acc
      0020A0 08               [12] 5951 	inc	r0
      0020A1 E6               [12] 5952 	mov	a,@r0
      0020A2 C0 E0            [24] 5953 	push	acc
      0020A4 08               [12] 5954 	inc	r0
      0020A5 E6               [12] 5955 	mov	a,@r0
      0020A6 C0 E0            [24] 5956 	push	acc
      0020A8 08               [12] 5957 	inc	r0
      0020A9 E6               [12] 5958 	mov	a,@r0
      0020AA C0 E0            [24] 5959 	push	acc
      0020AC 8A 82            [24] 5960 	mov	dpl,r2
      0020AE 8B 83            [24] 5961 	mov	dph,r3
      0020B0 8C F0            [24] 5962 	mov	b,r4
      0020B2 12r00r00         [24] 5963 	lcall	_stack_push
      0020B5 E5 81            [12] 5964 	mov	a,sp
      0020B7 24 FC            [12] 5965 	add	a,#0xfc
      0020B9 F5 81            [12] 5966 	mov	sp,a
                                   5967 ;	calc.c:285: break;
      0020BB 02r28r30         [24] 5968 	ljmp	00249$
                                   5969 ;	calc.c:286: case '^':
      0020BE                       5970 00216$:
                                   5971 ;	calc.c:287: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      0020BE E5*00            [12] 5972 	mov	a,_bp
      0020C0 24 15            [12] 5973 	add	a,#0x15
      0020C2 FF               [12] 5974 	mov	r7,a
      0020C3 E5*00            [12] 5975 	mov	a,_bp
      0020C5 24 0E            [12] 5976 	add	a,#0x0e
      0020C7 F8               [12] 5977 	mov	r0,a
      0020C8 A6 07            [24] 5978 	mov	@r0,ar7
      0020CA 08               [12] 5979 	inc	r0
      0020CB 76 00            [12] 5980 	mov	@r0,#0x00
      0020CD 08               [12] 5981 	inc	r0
      0020CE 76 40            [12] 5982 	mov	@r0,#0x40
      0020D0 E5*00            [12] 5983 	mov	a,_bp
      0020D2 24 12            [12] 5984 	add	a,#0x12
      0020D4 F8               [12] 5985 	mov	r0,a
      0020D5 74 11            [12] 5986 	mov	a,#0x11
      0020D7 26               [12] 5987 	add	a,@r0
      0020D8 FA               [12] 5988 	mov	r2,a
      0020D9 74 40            [12] 5989 	mov	a,#0x40
      0020DB 08               [12] 5990 	inc	r0
      0020DC 36               [12] 5991 	addc	a,@r0
      0020DD FB               [12] 5992 	mov	r3,a
      0020DE 08               [12] 5993 	inc	r0
      0020DF 86 04            [24] 5994 	mov	ar4,@r0
      0020E1 8A 82            [24] 5995 	mov	dpl,r2
      0020E3 8B 83            [24] 5996 	mov	dph,r3
      0020E5 8C F0            [24] 5997 	mov	b,r4
      0020E7 12r00r00         [24] 5998 	lcall	__gptrget
      0020EA FD               [12] 5999 	mov	r5,a
      0020EB A3               [24] 6000 	inc	dptr
      0020EC 12r00r00         [24] 6001 	lcall	__gptrget
      0020EF FE               [12] 6002 	mov	r6,a
      0020F0 A3               [24] 6003 	inc	dptr
      0020F1 12r00r00         [24] 6004 	lcall	__gptrget
      0020F4 FF               [12] 6005 	mov	r7,a
      0020F5 C0 04            [24] 6006 	push	ar4
      0020F7 C0 03            [24] 6007 	push	ar3
      0020F9 C0 02            [24] 6008 	push	ar2
      0020FB E5*00            [12] 6009 	mov	a,_bp
      0020FD 24 0E            [12] 6010 	add	a,#0x0e
      0020FF F8               [12] 6011 	mov	r0,a
      002100 E6               [12] 6012 	mov	a,@r0
      002101 C0 E0            [24] 6013 	push	acc
      002103 08               [12] 6014 	inc	r0
      002104 E6               [12] 6015 	mov	a,@r0
      002105 C0 E0            [24] 6016 	push	acc
      002107 08               [12] 6017 	inc	r0
      002108 E6               [12] 6018 	mov	a,@r0
      002109 C0 E0            [24] 6019 	push	acc
      00210B 8D 82            [24] 6020 	mov	dpl,r5
      00210D 8E 83            [24] 6021 	mov	dph,r6
      00210F 8F F0            [24] 6022 	mov	b,r7
      002111 12r00r00         [24] 6023 	lcall	_stack_pop
      002114 AE 82            [24] 6024 	mov	r6,dpl
      002116 AF 83            [24] 6025 	mov	r7,dph
      002118 15 81            [12] 6026 	dec	sp
      00211A 15 81            [12] 6027 	dec	sp
      00211C 15 81            [12] 6028 	dec	sp
      00211E D0 02            [24] 6029 	pop	ar2
      002120 D0 03            [24] 6030 	pop	ar3
      002122 D0 04            [24] 6031 	pop	ar4
      002124 EE               [12] 6032 	mov	a,r6
      002125 4F               [12] 6033 	orl	a,r7
      002126 70 25            [24] 6034 	jnz	00221$
      002128 7Dr38            [12] 6035 	mov	r5,#___str_8
      00212A 7Cs00            [12] 6036 	mov	r4,#(___str_8 >> 8)
      00212C 7B 80            [12] 6037 	mov	r3,#0x80
                                   6038 ;	calc.c:51: return;
      00212E                       6039 00472$:
                                   6040 ;	calc.c:49: for (; *s; s++) putchar(*s);
      00212E 8D 82            [24] 6041 	mov	dpl,r5
      002130 8C 83            [24] 6042 	mov	dph,r4
      002132 8B F0            [24] 6043 	mov	b,r3
      002134 12r00r00         [24] 6044 	lcall	__gptrget
      002137 FF               [12] 6045 	mov	r7,a
      002138 70 03            [24] 6046 	jnz	01376$
      00213A 02r28r30         [24] 6047 	ljmp	00249$
      00213D                       6048 01376$:
      00213D 7E 00            [12] 6049 	mov	r6,#0x00
      00213F 8F 82            [24] 6050 	mov	dpl,r7
      002141 8E 83            [24] 6051 	mov	dph,r6
      002143 12r00r00         [24] 6052 	lcall	_putchar
      002146 0D               [12] 6053 	inc	r5
                                   6054 ;	calc.c:287: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      002147 BD 00 E4         [24] 6055 	cjne	r5,#0x00,00472$
      00214A 0C               [12] 6056 	inc	r4
      00214B 80 E1            [24] 6057 	sjmp	00472$
      00214D                       6058 00221$:
                                   6059 ;	calc.c:288: else if (!stack_pop(ctx->ps, &d1)) {
      00214D E5*00            [12] 6060 	mov	a,_bp
      00214F 24 19            [12] 6061 	add	a,#0x19
      002151 FF               [12] 6062 	mov	r7,a
      002152 E5*00            [12] 6063 	mov	a,_bp
      002154 24 0E            [12] 6064 	add	a,#0x0e
      002156 F8               [12] 6065 	mov	r0,a
      002157 A6 07            [24] 6066 	mov	@r0,ar7
      002159 08               [12] 6067 	inc	r0
      00215A 76 00            [12] 6068 	mov	@r0,#0x00
      00215C 08               [12] 6069 	inc	r0
      00215D 76 40            [12] 6070 	mov	@r0,#0x40
      00215F 8A 82            [24] 6071 	mov	dpl,r2
      002161 8B 83            [24] 6072 	mov	dph,r3
      002163 8C F0            [24] 6073 	mov	b,r4
      002165 12r00r00         [24] 6074 	lcall	__gptrget
      002168 FD               [12] 6075 	mov	r5,a
      002169 A3               [24] 6076 	inc	dptr
      00216A 12r00r00         [24] 6077 	lcall	__gptrget
      00216D FE               [12] 6078 	mov	r6,a
      00216E A3               [24] 6079 	inc	dptr
      00216F 12r00r00         [24] 6080 	lcall	__gptrget
      002172 FF               [12] 6081 	mov	r7,a
      002173 C0 04            [24] 6082 	push	ar4
      002175 C0 03            [24] 6083 	push	ar3
      002177 C0 02            [24] 6084 	push	ar2
      002179 E5*00            [12] 6085 	mov	a,_bp
      00217B 24 0E            [12] 6086 	add	a,#0x0e
      00217D F8               [12] 6087 	mov	r0,a
      00217E E6               [12] 6088 	mov	a,@r0
      00217F C0 E0            [24] 6089 	push	acc
      002181 08               [12] 6090 	inc	r0
      002182 E6               [12] 6091 	mov	a,@r0
      002183 C0 E0            [24] 6092 	push	acc
      002185 08               [12] 6093 	inc	r0
      002186 E6               [12] 6094 	mov	a,@r0
      002187 C0 E0            [24] 6095 	push	acc
      002189 8D 82            [24] 6096 	mov	dpl,r5
      00218B 8E 83            [24] 6097 	mov	dph,r6
      00218D 8F F0            [24] 6098 	mov	b,r7
      00218F 12r00r00         [24] 6099 	lcall	_stack_pop
      002192 AE 82            [24] 6100 	mov	r6,dpl
      002194 AF 83            [24] 6101 	mov	r7,dph
      002196 15 81            [12] 6102 	dec	sp
      002198 15 81            [12] 6103 	dec	sp
      00219A 15 81            [12] 6104 	dec	sp
      00219C D0 02            [24] 6105 	pop	ar2
      00219E D0 03            [24] 6106 	pop	ar3
      0021A0 D0 04            [24] 6107 	pop	ar4
      0021A2 EE               [12] 6108 	mov	a,r6
      0021A3 4F               [12] 6109 	orl	a,r7
      0021A4 70 5C            [24] 6110 	jnz	00218$
                                   6111 ;	calc.c:289: (void)stack_push(ctx->ps, d0);
      0021A6 8A 82            [24] 6112 	mov	dpl,r2
      0021A8 8B 83            [24] 6113 	mov	dph,r3
      0021AA 8C F0            [24] 6114 	mov	b,r4
      0021AC 12r00r00         [24] 6115 	lcall	__gptrget
      0021AF FD               [12] 6116 	mov	r5,a
      0021B0 A3               [24] 6117 	inc	dptr
      0021B1 12r00r00         [24] 6118 	lcall	__gptrget
      0021B4 FE               [12] 6119 	mov	r6,a
      0021B5 A3               [24] 6120 	inc	dptr
      0021B6 12r00r00         [24] 6121 	lcall	__gptrget
      0021B9 FF               [12] 6122 	mov	r7,a
      0021BA E5*00            [12] 6123 	mov	a,_bp
      0021BC 24 15            [12] 6124 	add	a,#0x15
      0021BE F8               [12] 6125 	mov	r0,a
      0021BF E6               [12] 6126 	mov	a,@r0
      0021C0 C0 E0            [24] 6127 	push	acc
      0021C2 08               [12] 6128 	inc	r0
      0021C3 E6               [12] 6129 	mov	a,@r0
      0021C4 C0 E0            [24] 6130 	push	acc
      0021C6 08               [12] 6131 	inc	r0
      0021C7 E6               [12] 6132 	mov	a,@r0
      0021C8 C0 E0            [24] 6133 	push	acc
      0021CA 08               [12] 6134 	inc	r0
      0021CB E6               [12] 6135 	mov	a,@r0
      0021CC C0 E0            [24] 6136 	push	acc
      0021CE 8D 82            [24] 6137 	mov	dpl,r5
      0021D0 8E 83            [24] 6138 	mov	dph,r6
      0021D2 8F F0            [24] 6139 	mov	b,r7
      0021D4 12r00r00         [24] 6140 	lcall	_stack_push
      0021D7 E5 81            [12] 6141 	mov	a,sp
      0021D9 24 FC            [12] 6142 	add	a,#0xfc
      0021DB F5 81            [12] 6143 	mov	sp,a
                                   6144 ;	calc.c:290: printstr("\r\nstack underflow\r\n");
      0021DD 7Dr38            [12] 6145 	mov	r5,#___str_8
      0021DF 7Cs00            [12] 6146 	mov	r4,#(___str_8 >> 8)
      0021E1 7B 80            [12] 6147 	mov	r3,#0x80
                                   6148 ;	calc.c:51: return;
      0021E3                       6149 00475$:
                                   6150 ;	calc.c:49: for (; *s; s++) putchar(*s);
      0021E3 8D 82            [24] 6151 	mov	dpl,r5
      0021E5 8C 83            [24] 6152 	mov	dph,r4
      0021E7 8B F0            [24] 6153 	mov	b,r3
      0021E9 12r00r00         [24] 6154 	lcall	__gptrget
      0021EC FF               [12] 6155 	mov	r7,a
      0021ED 70 03            [24] 6156 	jnz	01379$
      0021EF 02r28r30         [24] 6157 	ljmp	00249$
      0021F2                       6158 01379$:
      0021F2 7E 00            [12] 6159 	mov	r6,#0x00
      0021F4 8F 82            [24] 6160 	mov	dpl,r7
      0021F6 8E 83            [24] 6161 	mov	dph,r6
      0021F8 12r00r00         [24] 6162 	lcall	_putchar
      0021FB 0D               [12] 6163 	inc	r5
                                   6164 ;	calc.c:290: printstr("\r\nstack underflow\r\n");
      0021FC BD 00 E4         [24] 6165 	cjne	r5,#0x00,00475$
      0021FF 0C               [12] 6166 	inc	r4
      002200 80 E1            [24] 6167 	sjmp	00475$
      002202                       6168 00218$:
                                   6169 ;	calc.c:292: d1 ^= d0;
      002202 E5*00            [12] 6170 	mov	a,_bp
      002204 24 19            [12] 6171 	add	a,#0x19
      002206 F8               [12] 6172 	mov	r0,a
      002207 E5*00            [12] 6173 	mov	a,_bp
      002209 24 15            [12] 6174 	add	a,#0x15
      00220B F9               [12] 6175 	mov	r1,a
      00220C E7               [12] 6176 	mov	a,@r1
      00220D 66               [12] 6177 	xrl	a,@r0
      00220E F6               [12] 6178 	mov	@r0,a
      00220F 09               [12] 6179 	inc	r1
      002210 E7               [12] 6180 	mov	a,@r1
      002211 08               [12] 6181 	inc	r0
      002212 66               [12] 6182 	xrl	a,@r0
      002213 F6               [12] 6183 	mov	@r0,a
      002214 09               [12] 6184 	inc	r1
      002215 E7               [12] 6185 	mov	a,@r1
      002216 08               [12] 6186 	inc	r0
      002217 66               [12] 6187 	xrl	a,@r0
      002218 F6               [12] 6188 	mov	@r0,a
      002219 09               [12] 6189 	inc	r1
      00221A E7               [12] 6190 	mov	a,@r1
      00221B 08               [12] 6191 	inc	r0
      00221C 66               [12] 6192 	xrl	a,@r0
      00221D F6               [12] 6193 	mov	@r0,a
                                   6194 ;	calc.c:293: (void)stack_push(ctx->ps, d1);
      00221E 8A 82            [24] 6195 	mov	dpl,r2
      002220 8B 83            [24] 6196 	mov	dph,r3
      002222 8C F0            [24] 6197 	mov	b,r4
      002224 12r00r00         [24] 6198 	lcall	__gptrget
      002227 FA               [12] 6199 	mov	r2,a
      002228 A3               [24] 6200 	inc	dptr
      002229 12r00r00         [24] 6201 	lcall	__gptrget
      00222C FB               [12] 6202 	mov	r3,a
      00222D A3               [24] 6203 	inc	dptr
      00222E 12r00r00         [24] 6204 	lcall	__gptrget
      002231 FC               [12] 6205 	mov	r4,a
      002232 E5*00            [12] 6206 	mov	a,_bp
      002234 24 19            [12] 6207 	add	a,#0x19
      002236 F8               [12] 6208 	mov	r0,a
      002237 E6               [12] 6209 	mov	a,@r0
      002238 C0 E0            [24] 6210 	push	acc
      00223A 08               [12] 6211 	inc	r0
      00223B E6               [12] 6212 	mov	a,@r0
      00223C C0 E0            [24] 6213 	push	acc
      00223E 08               [12] 6214 	inc	r0
      00223F E6               [12] 6215 	mov	a,@r0
      002240 C0 E0            [24] 6216 	push	acc
      002242 08               [12] 6217 	inc	r0
      002243 E6               [12] 6218 	mov	a,@r0
      002244 C0 E0            [24] 6219 	push	acc
      002246 8A 82            [24] 6220 	mov	dpl,r2
      002248 8B 83            [24] 6221 	mov	dph,r3
      00224A 8C F0            [24] 6222 	mov	b,r4
      00224C 12r00r00         [24] 6223 	lcall	_stack_push
      00224F E5 81            [12] 6224 	mov	a,sp
      002251 24 FC            [12] 6225 	add	a,#0xfc
      002253 F5 81            [12] 6226 	mov	sp,a
                                   6227 ;	calc.c:295: break;
      002255 02r28r30         [24] 6228 	ljmp	00249$
                                   6229 ;	calc.c:296: case '>':
      002258                       6230 00223$:
                                   6231 ;	calc.c:297: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      002258 E5*00            [12] 6232 	mov	a,_bp
      00225A 24 15            [12] 6233 	add	a,#0x15
      00225C FC               [12] 6234 	mov	r4,a
      00225D 7B 00            [12] 6235 	mov	r3,#0x00
      00225F 7A 40            [12] 6236 	mov	r2,#0x40
      002261 E5*00            [12] 6237 	mov	a,_bp
      002263 24 12            [12] 6238 	add	a,#0x12
      002265 F8               [12] 6239 	mov	r0,a
      002266 E5*00            [12] 6240 	mov	a,_bp
      002268 24 0B            [12] 6241 	add	a,#0x0b
      00226A F9               [12] 6242 	mov	r1,a
      00226B 74 11            [12] 6243 	mov	a,#0x11
      00226D 26               [12] 6244 	add	a,@r0
      00226E F7               [12] 6245 	mov	@r1,a
      00226F 74 40            [12] 6246 	mov	a,#0x40
      002271 08               [12] 6247 	inc	r0
      002272 36               [12] 6248 	addc	a,@r0
      002273 09               [12] 6249 	inc	r1
      002274 F7               [12] 6250 	mov	@r1,a
      002275 08               [12] 6251 	inc	r0
      002276 09               [12] 6252 	inc	r1
      002277 E6               [12] 6253 	mov	a,@r0
      002278 F7               [12] 6254 	mov	@r1,a
      002279 E5*00            [12] 6255 	mov	a,_bp
      00227B 24 0B            [12] 6256 	add	a,#0x0b
      00227D F8               [12] 6257 	mov	r0,a
      00227E 86 82            [24] 6258 	mov	dpl,@r0
      002280 08               [12] 6259 	inc	r0
      002281 86 83            [24] 6260 	mov	dph,@r0
      002283 08               [12] 6261 	inc	r0
      002284 86 F0            [24] 6262 	mov	b,@r0
      002286 12r00r00         [24] 6263 	lcall	__gptrget
      002289 FD               [12] 6264 	mov	r5,a
      00228A A3               [24] 6265 	inc	dptr
      00228B 12r00r00         [24] 6266 	lcall	__gptrget
      00228E FE               [12] 6267 	mov	r6,a
      00228F A3               [24] 6268 	inc	dptr
      002290 12r00r00         [24] 6269 	lcall	__gptrget
      002293 FF               [12] 6270 	mov	r7,a
      002294 C0 04            [24] 6271 	push	ar4
      002296 C0 03            [24] 6272 	push	ar3
      002298 C0 02            [24] 6273 	push	ar2
      00229A 8D 82            [24] 6274 	mov	dpl,r5
      00229C 8E 83            [24] 6275 	mov	dph,r6
      00229E 8F F0            [24] 6276 	mov	b,r7
      0022A0 12r00r00         [24] 6277 	lcall	_stack_pop
      0022A3 AE 82            [24] 6278 	mov	r6,dpl
      0022A5 AF 83            [24] 6279 	mov	r7,dph
      0022A7 15 81            [12] 6280 	dec	sp
      0022A9 15 81            [12] 6281 	dec	sp
      0022AB 15 81            [12] 6282 	dec	sp
      0022AD EE               [12] 6283 	mov	a,r6
      0022AE 4F               [12] 6284 	orl	a,r7
      0022AF 70 25            [24] 6285 	jnz	00228$
      0022B1 7Dr38            [12] 6286 	mov	r5,#___str_8
      0022B3 7Cs00            [12] 6287 	mov	r4,#(___str_8 >> 8)
      0022B5 7B 80            [12] 6288 	mov	r3,#0x80
                                   6289 ;	calc.c:51: return;
      0022B7                       6290 00478$:
                                   6291 ;	calc.c:49: for (; *s; s++) putchar(*s);
      0022B7 8D 82            [24] 6292 	mov	dpl,r5
      0022B9 8C 83            [24] 6293 	mov	dph,r4
      0022BB 8B F0            [24] 6294 	mov	b,r3
      0022BD 12r00r00         [24] 6295 	lcall	__gptrget
      0022C0 FF               [12] 6296 	mov	r7,a
      0022C1 70 03            [24] 6297 	jnz	01382$
      0022C3 02r28r30         [24] 6298 	ljmp	00249$
      0022C6                       6299 01382$:
      0022C6 7E 00            [12] 6300 	mov	r6,#0x00
      0022C8 8F 82            [24] 6301 	mov	dpl,r7
      0022CA 8E 83            [24] 6302 	mov	dph,r6
      0022CC 12r00r00         [24] 6303 	lcall	_putchar
      0022CF 0D               [12] 6304 	inc	r5
                                   6305 ;	calc.c:297: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      0022D0 BD 00 E4         [24] 6306 	cjne	r5,#0x00,00478$
      0022D3 0C               [12] 6307 	inc	r4
      0022D4 80 E1            [24] 6308 	sjmp	00478$
      0022D6                       6309 00228$:
                                   6310 ;	calc.c:298: else if (!stack_pop(ctx->ps, &d1)) {
      0022D6 E5*00            [12] 6311 	mov	a,_bp
      0022D8 24 19            [12] 6312 	add	a,#0x19
      0022DA FC               [12] 6313 	mov	r4,a
      0022DB 7B 00            [12] 6314 	mov	r3,#0x00
      0022DD 7A 40            [12] 6315 	mov	r2,#0x40
      0022DF E5*00            [12] 6316 	mov	a,_bp
      0022E1 24 0B            [12] 6317 	add	a,#0x0b
      0022E3 F8               [12] 6318 	mov	r0,a
      0022E4 86 82            [24] 6319 	mov	dpl,@r0
      0022E6 08               [12] 6320 	inc	r0
      0022E7 86 83            [24] 6321 	mov	dph,@r0
      0022E9 08               [12] 6322 	inc	r0
      0022EA 86 F0            [24] 6323 	mov	b,@r0
      0022EC 12r00r00         [24] 6324 	lcall	__gptrget
      0022EF FD               [12] 6325 	mov	r5,a
      0022F0 A3               [24] 6326 	inc	dptr
      0022F1 12r00r00         [24] 6327 	lcall	__gptrget
      0022F4 FE               [12] 6328 	mov	r6,a
      0022F5 A3               [24] 6329 	inc	dptr
      0022F6 12r00r00         [24] 6330 	lcall	__gptrget
      0022F9 FF               [12] 6331 	mov	r7,a
      0022FA C0 04            [24] 6332 	push	ar4
      0022FC C0 03            [24] 6333 	push	ar3
      0022FE C0 02            [24] 6334 	push	ar2
      002300 8D 82            [24] 6335 	mov	dpl,r5
      002302 8E 83            [24] 6336 	mov	dph,r6
      002304 8F F0            [24] 6337 	mov	b,r7
      002306 12r00r00         [24] 6338 	lcall	_stack_pop
      002309 AE 82            [24] 6339 	mov	r6,dpl
      00230B AF 83            [24] 6340 	mov	r7,dph
      00230D 15 81            [12] 6341 	dec	sp
      00230F 15 81            [12] 6342 	dec	sp
      002311 15 81            [12] 6343 	dec	sp
      002313 EE               [12] 6344 	mov	a,r6
      002314 4F               [12] 6345 	orl	a,r7
      002315 70 63            [24] 6346 	jnz	00225$
                                   6347 ;	calc.c:299: (void)stack_push(ctx->ps, d0);
      002317 E5*00            [12] 6348 	mov	a,_bp
      002319 24 0B            [12] 6349 	add	a,#0x0b
      00231B F8               [12] 6350 	mov	r0,a
      00231C 86 82            [24] 6351 	mov	dpl,@r0
      00231E 08               [12] 6352 	inc	r0
      00231F 86 83            [24] 6353 	mov	dph,@r0
      002321 08               [12] 6354 	inc	r0
      002322 86 F0            [24] 6355 	mov	b,@r0
      002324 12r00r00         [24] 6356 	lcall	__gptrget
      002327 FD               [12] 6357 	mov	r5,a
      002328 A3               [24] 6358 	inc	dptr
      002329 12r00r00         [24] 6359 	lcall	__gptrget
      00232C FE               [12] 6360 	mov	r6,a
      00232D A3               [24] 6361 	inc	dptr
      00232E 12r00r00         [24] 6362 	lcall	__gptrget
      002331 FF               [12] 6363 	mov	r7,a
      002332 E5*00            [12] 6364 	mov	a,_bp
      002334 24 15            [12] 6365 	add	a,#0x15
      002336 F8               [12] 6366 	mov	r0,a
      002337 E6               [12] 6367 	mov	a,@r0
      002338 C0 E0            [24] 6368 	push	acc
      00233A 08               [12] 6369 	inc	r0
      00233B E6               [12] 6370 	mov	a,@r0
      00233C C0 E0            [24] 6371 	push	acc
      00233E 08               [12] 6372 	inc	r0
      00233F E6               [12] 6373 	mov	a,@r0
      002340 C0 E0            [24] 6374 	push	acc
      002342 08               [12] 6375 	inc	r0
      002343 E6               [12] 6376 	mov	a,@r0
      002344 C0 E0            [24] 6377 	push	acc
      002346 8D 82            [24] 6378 	mov	dpl,r5
      002348 8E 83            [24] 6379 	mov	dph,r6
      00234A 8F F0            [24] 6380 	mov	b,r7
      00234C 12r00r00         [24] 6381 	lcall	_stack_push
      00234F E5 81            [12] 6382 	mov	a,sp
      002351 24 FC            [12] 6383 	add	a,#0xfc
      002353 F5 81            [12] 6384 	mov	sp,a
                                   6385 ;	calc.c:300: printstr("\r\nstack underflow\r\n");
      002355 7Dr38            [12] 6386 	mov	r5,#___str_8
      002357 7Cs00            [12] 6387 	mov	r4,#(___str_8 >> 8)
      002359 7B 80            [12] 6388 	mov	r3,#0x80
                                   6389 ;	calc.c:51: return;
      00235B                       6390 00481$:
                                   6391 ;	calc.c:49: for (; *s; s++) putchar(*s);
      00235B 8D 82            [24] 6392 	mov	dpl,r5
      00235D 8C 83            [24] 6393 	mov	dph,r4
      00235F 8B F0            [24] 6394 	mov	b,r3
      002361 12r00r00         [24] 6395 	lcall	__gptrget
      002364 FF               [12] 6396 	mov	r7,a
      002365 70 03            [24] 6397 	jnz	01385$
      002367 02r28r30         [24] 6398 	ljmp	00249$
      00236A                       6399 01385$:
      00236A 7E 00            [12] 6400 	mov	r6,#0x00
      00236C 8F 82            [24] 6401 	mov	dpl,r7
      00236E 8E 83            [24] 6402 	mov	dph,r6
      002370 12r00r00         [24] 6403 	lcall	_putchar
      002373 0D               [12] 6404 	inc	r5
                                   6405 ;	calc.c:300: printstr("\r\nstack underflow\r\n");
      002374 BD 00 E4         [24] 6406 	cjne	r5,#0x00,00481$
      002377 0C               [12] 6407 	inc	r4
      002378 80 E1            [24] 6408 	sjmp	00481$
      00237A                       6409 00225$:
                                   6410 ;	calc.c:302: d1 = (unsigned long)d1 >> ((unsigned long)d0 & 0x0000001flu);
      00237A E5*00            [12] 6411 	mov	a,_bp
      00237C 24 19            [12] 6412 	add	a,#0x19
      00237E F8               [12] 6413 	mov	r0,a
      00237F 86 04            [24] 6414 	mov	ar4,@r0
      002381 08               [12] 6415 	inc	r0
      002382 86 05            [24] 6416 	mov	ar5,@r0
      002384 08               [12] 6417 	inc	r0
      002385 86 06            [24] 6418 	mov	ar6,@r0
      002387 08               [12] 6419 	inc	r0
      002388 86 07            [24] 6420 	mov	ar7,@r0
      00238A E5*00            [12] 6421 	mov	a,_bp
      00238C 24 15            [12] 6422 	add	a,#0x15
      00238E F8               [12] 6423 	mov	r0,a
      00238F 86 03            [24] 6424 	mov	ar3,@r0
      002391 53 03 1F         [24] 6425 	anl	ar3,#0x1f
      002394 8B F0            [24] 6426 	mov	b,r3
      002396 05 F0            [12] 6427 	inc	b
      002398 80 0D            [24] 6428 	sjmp	01388$
      00239A                       6429 01387$:
      00239A C3               [12] 6430 	clr	c
      00239B EF               [12] 6431 	mov	a,r7
      00239C 13               [12] 6432 	rrc	a
      00239D FF               [12] 6433 	mov	r7,a
      00239E EE               [12] 6434 	mov	a,r6
      00239F 13               [12] 6435 	rrc	a
      0023A0 FE               [12] 6436 	mov	r6,a
      0023A1 ED               [12] 6437 	mov	a,r5
      0023A2 13               [12] 6438 	rrc	a
      0023A3 FD               [12] 6439 	mov	r5,a
      0023A4 EC               [12] 6440 	mov	a,r4
      0023A5 13               [12] 6441 	rrc	a
      0023A6 FC               [12] 6442 	mov	r4,a
      0023A7                       6443 01388$:
      0023A7 D5 F0 F0         [24] 6444 	djnz	b,01387$
      0023AA E5*00            [12] 6445 	mov	a,_bp
      0023AC 24 19            [12] 6446 	add	a,#0x19
      0023AE F8               [12] 6447 	mov	r0,a
      0023AF A6 04            [24] 6448 	mov	@r0,ar4
      0023B1 08               [12] 6449 	inc	r0
      0023B2 A6 05            [24] 6450 	mov	@r0,ar5
      0023B4 08               [12] 6451 	inc	r0
      0023B5 A6 06            [24] 6452 	mov	@r0,ar6
      0023B7 08               [12] 6453 	inc	r0
      0023B8 A6 07            [24] 6454 	mov	@r0,ar7
                                   6455 ;	calc.c:303: (void)stack_push(ctx->ps, d1);
      0023BA E5*00            [12] 6456 	mov	a,_bp
      0023BC 24 0B            [12] 6457 	add	a,#0x0b
      0023BE F8               [12] 6458 	mov	r0,a
      0023BF 86 82            [24] 6459 	mov	dpl,@r0
      0023C1 08               [12] 6460 	inc	r0
      0023C2 86 83            [24] 6461 	mov	dph,@r0
      0023C4 08               [12] 6462 	inc	r0
      0023C5 86 F0            [24] 6463 	mov	b,@r0
      0023C7 12r00r00         [24] 6464 	lcall	__gptrget
      0023CA FD               [12] 6465 	mov	r5,a
      0023CB A3               [24] 6466 	inc	dptr
      0023CC 12r00r00         [24] 6467 	lcall	__gptrget
      0023CF FE               [12] 6468 	mov	r6,a
      0023D0 A3               [24] 6469 	inc	dptr
      0023D1 12r00r00         [24] 6470 	lcall	__gptrget
      0023D4 FF               [12] 6471 	mov	r7,a
      0023D5 E5*00            [12] 6472 	mov	a,_bp
      0023D7 24 19            [12] 6473 	add	a,#0x19
      0023D9 F8               [12] 6474 	mov	r0,a
      0023DA E6               [12] 6475 	mov	a,@r0
      0023DB C0 E0            [24] 6476 	push	acc
      0023DD 08               [12] 6477 	inc	r0
      0023DE E6               [12] 6478 	mov	a,@r0
      0023DF C0 E0            [24] 6479 	push	acc
      0023E1 08               [12] 6480 	inc	r0
      0023E2 E6               [12] 6481 	mov	a,@r0
      0023E3 C0 E0            [24] 6482 	push	acc
      0023E5 08               [12] 6483 	inc	r0
      0023E6 E6               [12] 6484 	mov	a,@r0
      0023E7 C0 E0            [24] 6485 	push	acc
      0023E9 8D 82            [24] 6486 	mov	dpl,r5
      0023EB 8E 83            [24] 6487 	mov	dph,r6
      0023ED 8F F0            [24] 6488 	mov	b,r7
      0023EF 12r00r00         [24] 6489 	lcall	_stack_push
      0023F2 E5 81            [12] 6490 	mov	a,sp
      0023F4 24 FC            [12] 6491 	add	a,#0xfc
      0023F6 F5 81            [12] 6492 	mov	sp,a
                                   6493 ;	calc.c:305: break;
      0023F8 02r28r30         [24] 6494 	ljmp	00249$
                                   6495 ;	calc.c:306: case ']':
      0023FB                       6496 00230$:
                                   6497 ;	calc.c:307: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      0023FB E5*00            [12] 6498 	mov	a,_bp
      0023FD 24 15            [12] 6499 	add	a,#0x15
      0023FF FF               [12] 6500 	mov	r7,a
      002400 E5*00            [12] 6501 	mov	a,_bp
      002402 24 0E            [12] 6502 	add	a,#0x0e
      002404 F8               [12] 6503 	mov	r0,a
      002405 A6 07            [24] 6504 	mov	@r0,ar7
      002407 08               [12] 6505 	inc	r0
      002408 76 00            [12] 6506 	mov	@r0,#0x00
      00240A 08               [12] 6507 	inc	r0
      00240B 76 40            [12] 6508 	mov	@r0,#0x40
      00240D E5*00            [12] 6509 	mov	a,_bp
      00240F 24 12            [12] 6510 	add	a,#0x12
      002411 F8               [12] 6511 	mov	r0,a
      002412 74 11            [12] 6512 	mov	a,#0x11
      002414 26               [12] 6513 	add	a,@r0
      002415 FA               [12] 6514 	mov	r2,a
      002416 74 40            [12] 6515 	mov	a,#0x40
      002418 08               [12] 6516 	inc	r0
      002419 36               [12] 6517 	addc	a,@r0
      00241A FB               [12] 6518 	mov	r3,a
      00241B 08               [12] 6519 	inc	r0
      00241C 86 04            [24] 6520 	mov	ar4,@r0
      00241E 8A 82            [24] 6521 	mov	dpl,r2
      002420 8B 83            [24] 6522 	mov	dph,r3
      002422 8C F0            [24] 6523 	mov	b,r4
      002424 12r00r00         [24] 6524 	lcall	__gptrget
      002427 FD               [12] 6525 	mov	r5,a
      002428 A3               [24] 6526 	inc	dptr
      002429 12r00r00         [24] 6527 	lcall	__gptrget
      00242C FE               [12] 6528 	mov	r6,a
      00242D A3               [24] 6529 	inc	dptr
      00242E 12r00r00         [24] 6530 	lcall	__gptrget
      002431 FF               [12] 6531 	mov	r7,a
      002432 C0 04            [24] 6532 	push	ar4
      002434 C0 03            [24] 6533 	push	ar3
      002436 C0 02            [24] 6534 	push	ar2
      002438 E5*00            [12] 6535 	mov	a,_bp
      00243A 24 0E            [12] 6536 	add	a,#0x0e
      00243C F8               [12] 6537 	mov	r0,a
      00243D E6               [12] 6538 	mov	a,@r0
      00243E C0 E0            [24] 6539 	push	acc
      002440 08               [12] 6540 	inc	r0
      002441 E6               [12] 6541 	mov	a,@r0
      002442 C0 E0            [24] 6542 	push	acc
      002444 08               [12] 6543 	inc	r0
      002445 E6               [12] 6544 	mov	a,@r0
      002446 C0 E0            [24] 6545 	push	acc
      002448 8D 82            [24] 6546 	mov	dpl,r5
      00244A 8E 83            [24] 6547 	mov	dph,r6
      00244C 8F F0            [24] 6548 	mov	b,r7
      00244E 12r00r00         [24] 6549 	lcall	_stack_pop
      002451 AE 82            [24] 6550 	mov	r6,dpl
      002453 AF 83            [24] 6551 	mov	r7,dph
      002455 15 81            [12] 6552 	dec	sp
      002457 15 81            [12] 6553 	dec	sp
      002459 15 81            [12] 6554 	dec	sp
      00245B D0 02            [24] 6555 	pop	ar2
      00245D D0 03            [24] 6556 	pop	ar3
      00245F D0 04            [24] 6557 	pop	ar4
      002461 EE               [12] 6558 	mov	a,r6
      002462 4F               [12] 6559 	orl	a,r7
      002463 70 25            [24] 6560 	jnz	00235$
      002465 7Dr38            [12] 6561 	mov	r5,#___str_8
      002467 7Cs00            [12] 6562 	mov	r4,#(___str_8 >> 8)
      002469 7B 80            [12] 6563 	mov	r3,#0x80
                                   6564 ;	calc.c:51: return;
      00246B                       6565 00484$:
                                   6566 ;	calc.c:49: for (; *s; s++) putchar(*s);
      00246B 8D 82            [24] 6567 	mov	dpl,r5
      00246D 8C 83            [24] 6568 	mov	dph,r4
      00246F 8B F0            [24] 6569 	mov	b,r3
      002471 12r00r00         [24] 6570 	lcall	__gptrget
      002474 FF               [12] 6571 	mov	r7,a
      002475 70 03            [24] 6572 	jnz	01390$
      002477 02r28r30         [24] 6573 	ljmp	00249$
      00247A                       6574 01390$:
      00247A 7E 00            [12] 6575 	mov	r6,#0x00
      00247C 8F 82            [24] 6576 	mov	dpl,r7
      00247E 8E 83            [24] 6577 	mov	dph,r6
      002480 12r00r00         [24] 6578 	lcall	_putchar
      002483 0D               [12] 6579 	inc	r5
                                   6580 ;	calc.c:307: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      002484 BD 00 E4         [24] 6581 	cjne	r5,#0x00,00484$
      002487 0C               [12] 6582 	inc	r4
      002488 80 E1            [24] 6583 	sjmp	00484$
      00248A                       6584 00235$:
                                   6585 ;	calc.c:308: else if (!stack_pop(ctx->ps, &d1)) {
      00248A E5*00            [12] 6586 	mov	a,_bp
      00248C 24 19            [12] 6587 	add	a,#0x19
      00248E FF               [12] 6588 	mov	r7,a
      00248F E5*00            [12] 6589 	mov	a,_bp
      002491 24 0E            [12] 6590 	add	a,#0x0e
      002493 F8               [12] 6591 	mov	r0,a
      002494 A6 07            [24] 6592 	mov	@r0,ar7
      002496 08               [12] 6593 	inc	r0
      002497 76 00            [12] 6594 	mov	@r0,#0x00
      002499 08               [12] 6595 	inc	r0
      00249A 76 40            [12] 6596 	mov	@r0,#0x40
      00249C 8A 82            [24] 6597 	mov	dpl,r2
      00249E 8B 83            [24] 6598 	mov	dph,r3
      0024A0 8C F0            [24] 6599 	mov	b,r4
      0024A2 12r00r00         [24] 6600 	lcall	__gptrget
      0024A5 FD               [12] 6601 	mov	r5,a
      0024A6 A3               [24] 6602 	inc	dptr
      0024A7 12r00r00         [24] 6603 	lcall	__gptrget
      0024AA FE               [12] 6604 	mov	r6,a
      0024AB A3               [24] 6605 	inc	dptr
      0024AC 12r00r00         [24] 6606 	lcall	__gptrget
      0024AF FF               [12] 6607 	mov	r7,a
      0024B0 C0 04            [24] 6608 	push	ar4
      0024B2 C0 03            [24] 6609 	push	ar3
      0024B4 C0 02            [24] 6610 	push	ar2
      0024B6 E5*00            [12] 6611 	mov	a,_bp
      0024B8 24 0E            [12] 6612 	add	a,#0x0e
      0024BA F8               [12] 6613 	mov	r0,a
      0024BB E6               [12] 6614 	mov	a,@r0
      0024BC C0 E0            [24] 6615 	push	acc
      0024BE 08               [12] 6616 	inc	r0
      0024BF E6               [12] 6617 	mov	a,@r0
      0024C0 C0 E0            [24] 6618 	push	acc
      0024C2 08               [12] 6619 	inc	r0
      0024C3 E6               [12] 6620 	mov	a,@r0
      0024C4 C0 E0            [24] 6621 	push	acc
      0024C6 8D 82            [24] 6622 	mov	dpl,r5
      0024C8 8E 83            [24] 6623 	mov	dph,r6
      0024CA 8F F0            [24] 6624 	mov	b,r7
      0024CC 12r00r00         [24] 6625 	lcall	_stack_pop
      0024CF AE 82            [24] 6626 	mov	r6,dpl
      0024D1 AF 83            [24] 6627 	mov	r7,dph
      0024D3 15 81            [12] 6628 	dec	sp
      0024D5 15 81            [12] 6629 	dec	sp
      0024D7 15 81            [12] 6630 	dec	sp
      0024D9 D0 02            [24] 6631 	pop	ar2
      0024DB D0 03            [24] 6632 	pop	ar3
      0024DD D0 04            [24] 6633 	pop	ar4
      0024DF EE               [12] 6634 	mov	a,r6
      0024E0 4F               [12] 6635 	orl	a,r7
      0024E1 70 5C            [24] 6636 	jnz	00232$
                                   6637 ;	calc.c:309: (void)stack_push(ctx->ps, d0);
      0024E3 8A 82            [24] 6638 	mov	dpl,r2
      0024E5 8B 83            [24] 6639 	mov	dph,r3
      0024E7 8C F0            [24] 6640 	mov	b,r4
      0024E9 12r00r00         [24] 6641 	lcall	__gptrget
      0024EC FD               [12] 6642 	mov	r5,a
      0024ED A3               [24] 6643 	inc	dptr
      0024EE 12r00r00         [24] 6644 	lcall	__gptrget
      0024F1 FE               [12] 6645 	mov	r6,a
      0024F2 A3               [24] 6646 	inc	dptr
      0024F3 12r00r00         [24] 6647 	lcall	__gptrget
      0024F6 FF               [12] 6648 	mov	r7,a
      0024F7 E5*00            [12] 6649 	mov	a,_bp
      0024F9 24 15            [12] 6650 	add	a,#0x15
      0024FB F8               [12] 6651 	mov	r0,a
      0024FC E6               [12] 6652 	mov	a,@r0
      0024FD C0 E0            [24] 6653 	push	acc
      0024FF 08               [12] 6654 	inc	r0
      002500 E6               [12] 6655 	mov	a,@r0
      002501 C0 E0            [24] 6656 	push	acc
      002503 08               [12] 6657 	inc	r0
      002504 E6               [12] 6658 	mov	a,@r0
      002505 C0 E0            [24] 6659 	push	acc
      002507 08               [12] 6660 	inc	r0
      002508 E6               [12] 6661 	mov	a,@r0
      002509 C0 E0            [24] 6662 	push	acc
      00250B 8D 82            [24] 6663 	mov	dpl,r5
      00250D 8E 83            [24] 6664 	mov	dph,r6
      00250F 8F F0            [24] 6665 	mov	b,r7
      002511 12r00r00         [24] 6666 	lcall	_stack_push
      002514 E5 81            [12] 6667 	mov	a,sp
      002516 24 FC            [12] 6668 	add	a,#0xfc
      002518 F5 81            [12] 6669 	mov	sp,a
                                   6670 ;	calc.c:310: printstr("\r\nstack underflow\r\n");
      00251A 7Dr38            [12] 6671 	mov	r5,#___str_8
      00251C 7Cs00            [12] 6672 	mov	r4,#(___str_8 >> 8)
      00251E 7B 80            [12] 6673 	mov	r3,#0x80
                                   6674 ;	calc.c:51: return;
      002520                       6675 00487$:
                                   6676 ;	calc.c:49: for (; *s; s++) putchar(*s);
      002520 8D 82            [24] 6677 	mov	dpl,r5
      002522 8C 83            [24] 6678 	mov	dph,r4
      002524 8B F0            [24] 6679 	mov	b,r3
      002526 12r00r00         [24] 6680 	lcall	__gptrget
      002529 FF               [12] 6681 	mov	r7,a
      00252A 70 03            [24] 6682 	jnz	01393$
      00252C 02r28r30         [24] 6683 	ljmp	00249$
      00252F                       6684 01393$:
      00252F 7E 00            [12] 6685 	mov	r6,#0x00
      002531 8F 82            [24] 6686 	mov	dpl,r7
      002533 8E 83            [24] 6687 	mov	dph,r6
      002535 12r00r00         [24] 6688 	lcall	_putchar
      002538 0D               [12] 6689 	inc	r5
                                   6690 ;	calc.c:310: printstr("\r\nstack underflow\r\n");
      002539 BD 00 E4         [24] 6691 	cjne	r5,#0x00,00487$
      00253C 0C               [12] 6692 	inc	r4
      00253D 80 E1            [24] 6693 	sjmp	00487$
      00253F                       6694 00232$:
                                   6695 ;	calc.c:312: d1 >>= ((unsigned long)d0 & 0x0000001flu);
      00253F E5*00            [12] 6696 	mov	a,_bp
      002541 24 15            [12] 6697 	add	a,#0x15
      002543 F8               [12] 6698 	mov	r0,a
      002544 86 07            [24] 6699 	mov	ar7,@r0
      002546 53 07 1F         [24] 6700 	anl	ar7,#0x1f
      002549 8F F0            [24] 6701 	mov	b,r7
      00254B 05 F0            [12] 6702 	inc	b
      00254D E5*00            [12] 6703 	mov	a,_bp
      00254F 24 19            [12] 6704 	add	a,#0x19
      002551 F8               [12] 6705 	mov	r0,a
      002552 08               [12] 6706 	inc	r0
      002553 08               [12] 6707 	inc	r0
      002554 08               [12] 6708 	inc	r0
      002555 E6               [12] 6709 	mov	a,@r0
      002556 33               [12] 6710 	rlc	a
      002557 92 D2            [24] 6711 	mov	ov,c
      002559 18               [12] 6712 	dec	r0
      00255A 18               [12] 6713 	dec	r0
      00255B 18               [12] 6714 	dec	r0
      00255C 80 14            [24] 6715 	sjmp	01396$
      00255E                       6716 01395$:
      00255E A2 D2            [12] 6717 	mov	c,ov
      002560 08               [12] 6718 	inc	r0
      002561 08               [12] 6719 	inc	r0
      002562 08               [12] 6720 	inc	r0
      002563 E6               [12] 6721 	mov	a,@r0
      002564 13               [12] 6722 	rrc	a
      002565 F6               [12] 6723 	mov	@r0,a
      002566 18               [12] 6724 	dec	r0
      002567 E6               [12] 6725 	mov	a,@r0
      002568 13               [12] 6726 	rrc	a
      002569 F6               [12] 6727 	mov	@r0,a
      00256A 18               [12] 6728 	dec	r0
      00256B E6               [12] 6729 	mov	a,@r0
      00256C 13               [12] 6730 	rrc	a
      00256D F6               [12] 6731 	mov	@r0,a
      00256E 18               [12] 6732 	dec	r0
      00256F E6               [12] 6733 	mov	a,@r0
      002570 13               [12] 6734 	rrc	a
      002571 F6               [12] 6735 	mov	@r0,a
      002572                       6736 01396$:
      002572 D5 F0 E9         [24] 6737 	djnz	b,01395$
                                   6738 ;	calc.c:313: (void)stack_push(ctx->ps, d1);
      002575 8A 82            [24] 6739 	mov	dpl,r2
      002577 8B 83            [24] 6740 	mov	dph,r3
      002579 8C F0            [24] 6741 	mov	b,r4
      00257B 12r00r00         [24] 6742 	lcall	__gptrget
      00257E FA               [12] 6743 	mov	r2,a
      00257F A3               [24] 6744 	inc	dptr
      002580 12r00r00         [24] 6745 	lcall	__gptrget
      002583 FB               [12] 6746 	mov	r3,a
      002584 A3               [24] 6747 	inc	dptr
      002585 12r00r00         [24] 6748 	lcall	__gptrget
      002588 FC               [12] 6749 	mov	r4,a
      002589 E5*00            [12] 6750 	mov	a,_bp
      00258B 24 19            [12] 6751 	add	a,#0x19
      00258D F8               [12] 6752 	mov	r0,a
      00258E E6               [12] 6753 	mov	a,@r0
      00258F C0 E0            [24] 6754 	push	acc
      002591 08               [12] 6755 	inc	r0
      002592 E6               [12] 6756 	mov	a,@r0
      002593 C0 E0            [24] 6757 	push	acc
      002595 08               [12] 6758 	inc	r0
      002596 E6               [12] 6759 	mov	a,@r0
      002597 C0 E0            [24] 6760 	push	acc
      002599 08               [12] 6761 	inc	r0
      00259A E6               [12] 6762 	mov	a,@r0
      00259B C0 E0            [24] 6763 	push	acc
      00259D 8A 82            [24] 6764 	mov	dpl,r2
      00259F 8B 83            [24] 6765 	mov	dph,r3
      0025A1 8C F0            [24] 6766 	mov	b,r4
      0025A3 12r00r00         [24] 6767 	lcall	_stack_push
      0025A6 E5 81            [12] 6768 	mov	a,sp
      0025A8 24 FC            [12] 6769 	add	a,#0xfc
      0025AA F5 81            [12] 6770 	mov	sp,a
                                   6771 ;	calc.c:315: break;
      0025AC 02r28r30         [24] 6772 	ljmp	00249$
                                   6773 ;	calc.c:316: case '<':
      0025AF                       6774 00237$:
                                   6775 ;	calc.c:317: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      0025AF E5*00            [12] 6776 	mov	a,_bp
      0025B1 24 15            [12] 6777 	add	a,#0x15
      0025B3 FC               [12] 6778 	mov	r4,a
      0025B4 7B 00            [12] 6779 	mov	r3,#0x00
      0025B6 7A 40            [12] 6780 	mov	r2,#0x40
      0025B8 E5*00            [12] 6781 	mov	a,_bp
      0025BA 24 12            [12] 6782 	add	a,#0x12
      0025BC F8               [12] 6783 	mov	r0,a
      0025BD E5*00            [12] 6784 	mov	a,_bp
      0025BF 24 0B            [12] 6785 	add	a,#0x0b
      0025C1 F9               [12] 6786 	mov	r1,a
      0025C2 74 11            [12] 6787 	mov	a,#0x11
      0025C4 26               [12] 6788 	add	a,@r0
      0025C5 F7               [12] 6789 	mov	@r1,a
      0025C6 74 40            [12] 6790 	mov	a,#0x40
      0025C8 08               [12] 6791 	inc	r0
      0025C9 36               [12] 6792 	addc	a,@r0
      0025CA 09               [12] 6793 	inc	r1
      0025CB F7               [12] 6794 	mov	@r1,a
      0025CC 08               [12] 6795 	inc	r0
      0025CD 09               [12] 6796 	inc	r1
      0025CE E6               [12] 6797 	mov	a,@r0
      0025CF F7               [12] 6798 	mov	@r1,a
      0025D0 E5*00            [12] 6799 	mov	a,_bp
      0025D2 24 0B            [12] 6800 	add	a,#0x0b
      0025D4 F8               [12] 6801 	mov	r0,a
      0025D5 86 82            [24] 6802 	mov	dpl,@r0
      0025D7 08               [12] 6803 	inc	r0
      0025D8 86 83            [24] 6804 	mov	dph,@r0
      0025DA 08               [12] 6805 	inc	r0
      0025DB 86 F0            [24] 6806 	mov	b,@r0
      0025DD 12r00r00         [24] 6807 	lcall	__gptrget
      0025E0 FD               [12] 6808 	mov	r5,a
      0025E1 A3               [24] 6809 	inc	dptr
      0025E2 12r00r00         [24] 6810 	lcall	__gptrget
      0025E5 FE               [12] 6811 	mov	r6,a
      0025E6 A3               [24] 6812 	inc	dptr
      0025E7 12r00r00         [24] 6813 	lcall	__gptrget
      0025EA FF               [12] 6814 	mov	r7,a
      0025EB C0 04            [24] 6815 	push	ar4
      0025ED C0 03            [24] 6816 	push	ar3
      0025EF C0 02            [24] 6817 	push	ar2
      0025F1 8D 82            [24] 6818 	mov	dpl,r5
      0025F3 8E 83            [24] 6819 	mov	dph,r6
      0025F5 8F F0            [24] 6820 	mov	b,r7
      0025F7 12r00r00         [24] 6821 	lcall	_stack_pop
      0025FA AE 82            [24] 6822 	mov	r6,dpl
      0025FC AF 83            [24] 6823 	mov	r7,dph
      0025FE 15 81            [12] 6824 	dec	sp
      002600 15 81            [12] 6825 	dec	sp
      002602 15 81            [12] 6826 	dec	sp
      002604 EE               [12] 6827 	mov	a,r6
      002605 4F               [12] 6828 	orl	a,r7
      002606 70 25            [24] 6829 	jnz	00242$
      002608 7Dr38            [12] 6830 	mov	r5,#___str_8
      00260A 7Cs00            [12] 6831 	mov	r4,#(___str_8 >> 8)
      00260C 7B 80            [12] 6832 	mov	r3,#0x80
                                   6833 ;	calc.c:51: return;
      00260E                       6834 00490$:
                                   6835 ;	calc.c:49: for (; *s; s++) putchar(*s);
      00260E 8D 82            [24] 6836 	mov	dpl,r5
      002610 8C 83            [24] 6837 	mov	dph,r4
      002612 8B F0            [24] 6838 	mov	b,r3
      002614 12r00r00         [24] 6839 	lcall	__gptrget
      002617 FF               [12] 6840 	mov	r7,a
      002618 70 03            [24] 6841 	jnz	01398$
      00261A 02r28r30         [24] 6842 	ljmp	00249$
      00261D                       6843 01398$:
      00261D 7E 00            [12] 6844 	mov	r6,#0x00
      00261F 8F 82            [24] 6845 	mov	dpl,r7
      002621 8E 83            [24] 6846 	mov	dph,r6
      002623 12r00r00         [24] 6847 	lcall	_putchar
      002626 0D               [12] 6848 	inc	r5
                                   6849 ;	calc.c:317: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      002627 BD 00 E4         [24] 6850 	cjne	r5,#0x00,00490$
      00262A 0C               [12] 6851 	inc	r4
      00262B 80 E1            [24] 6852 	sjmp	00490$
      00262D                       6853 00242$:
                                   6854 ;	calc.c:318: else if (!stack_pop(ctx->ps, &d1)) {
      00262D E5*00            [12] 6855 	mov	a,_bp
      00262F 24 19            [12] 6856 	add	a,#0x19
      002631 FC               [12] 6857 	mov	r4,a
      002632 7B 00            [12] 6858 	mov	r3,#0x00
      002634 7A 40            [12] 6859 	mov	r2,#0x40
      002636 E5*00            [12] 6860 	mov	a,_bp
      002638 24 0B            [12] 6861 	add	a,#0x0b
      00263A F8               [12] 6862 	mov	r0,a
      00263B 86 82            [24] 6863 	mov	dpl,@r0
      00263D 08               [12] 6864 	inc	r0
      00263E 86 83            [24] 6865 	mov	dph,@r0
      002640 08               [12] 6866 	inc	r0
      002641 86 F0            [24] 6867 	mov	b,@r0
      002643 12r00r00         [24] 6868 	lcall	__gptrget
      002646 FD               [12] 6869 	mov	r5,a
      002647 A3               [24] 6870 	inc	dptr
      002648 12r00r00         [24] 6871 	lcall	__gptrget
      00264B FE               [12] 6872 	mov	r6,a
      00264C A3               [24] 6873 	inc	dptr
      00264D 12r00r00         [24] 6874 	lcall	__gptrget
      002650 FF               [12] 6875 	mov	r7,a
      002651 C0 04            [24] 6876 	push	ar4
      002653 C0 03            [24] 6877 	push	ar3
      002655 C0 02            [24] 6878 	push	ar2
      002657 8D 82            [24] 6879 	mov	dpl,r5
      002659 8E 83            [24] 6880 	mov	dph,r6
      00265B 8F F0            [24] 6881 	mov	b,r7
      00265D 12r00r00         [24] 6882 	lcall	_stack_pop
      002660 AE 82            [24] 6883 	mov	r6,dpl
      002662 AF 83            [24] 6884 	mov	r7,dph
      002664 15 81            [12] 6885 	dec	sp
      002666 15 81            [12] 6886 	dec	sp
      002668 15 81            [12] 6887 	dec	sp
      00266A EE               [12] 6888 	mov	a,r6
      00266B 4F               [12] 6889 	orl	a,r7
      00266C 70 63            [24] 6890 	jnz	00239$
                                   6891 ;	calc.c:319: (void)stack_push(ctx->ps, d0);
      00266E E5*00            [12] 6892 	mov	a,_bp
      002670 24 0B            [12] 6893 	add	a,#0x0b
      002672 F8               [12] 6894 	mov	r0,a
      002673 86 82            [24] 6895 	mov	dpl,@r0
      002675 08               [12] 6896 	inc	r0
      002676 86 83            [24] 6897 	mov	dph,@r0
      002678 08               [12] 6898 	inc	r0
      002679 86 F0            [24] 6899 	mov	b,@r0
      00267B 12r00r00         [24] 6900 	lcall	__gptrget
      00267E FD               [12] 6901 	mov	r5,a
      00267F A3               [24] 6902 	inc	dptr
      002680 12r00r00         [24] 6903 	lcall	__gptrget
      002683 FE               [12] 6904 	mov	r6,a
      002684 A3               [24] 6905 	inc	dptr
      002685 12r00r00         [24] 6906 	lcall	__gptrget
      002688 FF               [12] 6907 	mov	r7,a
      002689 E5*00            [12] 6908 	mov	a,_bp
      00268B 24 15            [12] 6909 	add	a,#0x15
      00268D F8               [12] 6910 	mov	r0,a
      00268E E6               [12] 6911 	mov	a,@r0
      00268F C0 E0            [24] 6912 	push	acc
      002691 08               [12] 6913 	inc	r0
      002692 E6               [12] 6914 	mov	a,@r0
      002693 C0 E0            [24] 6915 	push	acc
      002695 08               [12] 6916 	inc	r0
      002696 E6               [12] 6917 	mov	a,@r0
      002697 C0 E0            [24] 6918 	push	acc
      002699 08               [12] 6919 	inc	r0
      00269A E6               [12] 6920 	mov	a,@r0
      00269B C0 E0            [24] 6921 	push	acc
      00269D 8D 82            [24] 6922 	mov	dpl,r5
      00269F 8E 83            [24] 6923 	mov	dph,r6
      0026A1 8F F0            [24] 6924 	mov	b,r7
      0026A3 12r00r00         [24] 6925 	lcall	_stack_push
      0026A6 E5 81            [12] 6926 	mov	a,sp
      0026A8 24 FC            [12] 6927 	add	a,#0xfc
      0026AA F5 81            [12] 6928 	mov	sp,a
                                   6929 ;	calc.c:320: printstr("\r\nstack underflow\r\n");
      0026AC 7Dr38            [12] 6930 	mov	r5,#___str_8
      0026AE 7Cs00            [12] 6931 	mov	r4,#(___str_8 >> 8)
      0026B0 7B 80            [12] 6932 	mov	r3,#0x80
                                   6933 ;	calc.c:51: return;
      0026B2                       6934 00493$:
                                   6935 ;	calc.c:49: for (; *s; s++) putchar(*s);
      0026B2 8D 82            [24] 6936 	mov	dpl,r5
      0026B4 8C 83            [24] 6937 	mov	dph,r4
      0026B6 8B F0            [24] 6938 	mov	b,r3
      0026B8 12r00r00         [24] 6939 	lcall	__gptrget
      0026BB FF               [12] 6940 	mov	r7,a
      0026BC 70 03            [24] 6941 	jnz	01401$
      0026BE 02r28r30         [24] 6942 	ljmp	00249$
      0026C1                       6943 01401$:
      0026C1 7E 00            [12] 6944 	mov	r6,#0x00
      0026C3 8F 82            [24] 6945 	mov	dpl,r7
      0026C5 8E 83            [24] 6946 	mov	dph,r6
      0026C7 12r00r00         [24] 6947 	lcall	_putchar
      0026CA 0D               [12] 6948 	inc	r5
                                   6949 ;	calc.c:320: printstr("\r\nstack underflow\r\n");
      0026CB BD 00 E4         [24] 6950 	cjne	r5,#0x00,00493$
      0026CE 0C               [12] 6951 	inc	r4
      0026CF 80 E1            [24] 6952 	sjmp	00493$
      0026D1                       6953 00239$:
                                   6954 ;	calc.c:322: d1 <<= ((unsigned long)d0 & 0x0000001flu);
      0026D1 E5*00            [12] 6955 	mov	a,_bp
      0026D3 24 15            [12] 6956 	add	a,#0x15
      0026D5 F8               [12] 6957 	mov	r0,a
      0026D6 86 07            [24] 6958 	mov	ar7,@r0
      0026D8 74 1F            [12] 6959 	mov	a,#0x1f
      0026DA 5F               [12] 6960 	anl	a,r7
      0026DB FB               [12] 6961 	mov	r3,a
      0026DC E5*00            [12] 6962 	mov	a,_bp
      0026DE 24 19            [12] 6963 	add	a,#0x19
      0026E0 F8               [12] 6964 	mov	r0,a
      0026E1 86 04            [24] 6965 	mov	ar4,@r0
      0026E3 08               [12] 6966 	inc	r0
      0026E4 86 05            [24] 6967 	mov	ar5,@r0
      0026E6 08               [12] 6968 	inc	r0
      0026E7 86 06            [24] 6969 	mov	ar6,@r0
      0026E9 08               [12] 6970 	inc	r0
      0026EA 86 07            [24] 6971 	mov	ar7,@r0
      0026EC 8B F0            [24] 6972 	mov	b,r3
      0026EE 05 F0            [12] 6973 	inc	b
      0026F0 80 0C            [24] 6974 	sjmp	01404$
      0026F2                       6975 01403$:
      0026F2 EC               [12] 6976 	mov	a,r4
      0026F3 2C               [12] 6977 	add	a,r4
      0026F4 FC               [12] 6978 	mov	r4,a
      0026F5 ED               [12] 6979 	mov	a,r5
      0026F6 33               [12] 6980 	rlc	a
      0026F7 FD               [12] 6981 	mov	r5,a
      0026F8 EE               [12] 6982 	mov	a,r6
      0026F9 33               [12] 6983 	rlc	a
      0026FA FE               [12] 6984 	mov	r6,a
      0026FB EF               [12] 6985 	mov	a,r7
      0026FC 33               [12] 6986 	rlc	a
      0026FD FF               [12] 6987 	mov	r7,a
      0026FE                       6988 01404$:
      0026FE D5 F0 F1         [24] 6989 	djnz	b,01403$
      002701 E5*00            [12] 6990 	mov	a,_bp
      002703 24 19            [12] 6991 	add	a,#0x19
      002705 F8               [12] 6992 	mov	r0,a
      002706 A6 04            [24] 6993 	mov	@r0,ar4
      002708 08               [12] 6994 	inc	r0
      002709 A6 05            [24] 6995 	mov	@r0,ar5
      00270B 08               [12] 6996 	inc	r0
      00270C A6 06            [24] 6997 	mov	@r0,ar6
      00270E 08               [12] 6998 	inc	r0
      00270F A6 07            [24] 6999 	mov	@r0,ar7
                                   7000 ;	calc.c:323: (void)stack_push(ctx->ps, d1);
      002711 E5*00            [12] 7001 	mov	a,_bp
      002713 24 0B            [12] 7002 	add	a,#0x0b
      002715 F8               [12] 7003 	mov	r0,a
      002716 86 82            [24] 7004 	mov	dpl,@r0
      002718 08               [12] 7005 	inc	r0
      002719 86 83            [24] 7006 	mov	dph,@r0
      00271B 08               [12] 7007 	inc	r0
      00271C 86 F0            [24] 7008 	mov	b,@r0
      00271E 12r00r00         [24] 7009 	lcall	__gptrget
      002721 FD               [12] 7010 	mov	r5,a
      002722 A3               [24] 7011 	inc	dptr
      002723 12r00r00         [24] 7012 	lcall	__gptrget
      002726 FE               [12] 7013 	mov	r6,a
      002727 A3               [24] 7014 	inc	dptr
      002728 12r00r00         [24] 7015 	lcall	__gptrget
      00272B FF               [12] 7016 	mov	r7,a
      00272C E5*00            [12] 7017 	mov	a,_bp
      00272E 24 19            [12] 7018 	add	a,#0x19
      002730 F8               [12] 7019 	mov	r0,a
      002731 E6               [12] 7020 	mov	a,@r0
      002732 C0 E0            [24] 7021 	push	acc
      002734 08               [12] 7022 	inc	r0
      002735 E6               [12] 7023 	mov	a,@r0
      002736 C0 E0            [24] 7024 	push	acc
      002738 08               [12] 7025 	inc	r0
      002739 E6               [12] 7026 	mov	a,@r0
      00273A C0 E0            [24] 7027 	push	acc
      00273C 08               [12] 7028 	inc	r0
      00273D E6               [12] 7029 	mov	a,@r0
      00273E C0 E0            [24] 7030 	push	acc
      002740 8D 82            [24] 7031 	mov	dpl,r5
      002742 8E 83            [24] 7032 	mov	dph,r6
      002744 8F F0            [24] 7033 	mov	b,r7
      002746 12r00r00         [24] 7034 	lcall	_stack_push
      002749 E5 81            [12] 7035 	mov	a,sp
      00274B 24 FC            [12] 7036 	add	a,#0xfc
      00274D F5 81            [12] 7037 	mov	sp,a
                                   7038 ;	calc.c:325: break;
      00274F 02r28r30         [24] 7039 	ljmp	00249$
                                   7040 ;	calc.c:326: case '~':
      002752                       7041 00244$:
                                   7042 ;	calc.c:327: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      002752 E5*00            [12] 7043 	mov	a,_bp
      002754 24 15            [12] 7044 	add	a,#0x15
      002756 FF               [12] 7045 	mov	r7,a
      002757 E5*00            [12] 7046 	mov	a,_bp
      002759 24 0E            [12] 7047 	add	a,#0x0e
      00275B F8               [12] 7048 	mov	r0,a
      00275C A6 07            [24] 7049 	mov	@r0,ar7
      00275E 08               [12] 7050 	inc	r0
      00275F 76 00            [12] 7051 	mov	@r0,#0x00
      002761 08               [12] 7052 	inc	r0
      002762 76 40            [12] 7053 	mov	@r0,#0x40
      002764 E5*00            [12] 7054 	mov	a,_bp
      002766 24 12            [12] 7055 	add	a,#0x12
      002768 F8               [12] 7056 	mov	r0,a
      002769 74 11            [12] 7057 	mov	a,#0x11
      00276B 26               [12] 7058 	add	a,@r0
      00276C FA               [12] 7059 	mov	r2,a
      00276D 74 40            [12] 7060 	mov	a,#0x40
      00276F 08               [12] 7061 	inc	r0
      002770 36               [12] 7062 	addc	a,@r0
      002771 FB               [12] 7063 	mov	r3,a
      002772 08               [12] 7064 	inc	r0
      002773 86 04            [24] 7065 	mov	ar4,@r0
      002775 8A 82            [24] 7066 	mov	dpl,r2
      002777 8B 83            [24] 7067 	mov	dph,r3
      002779 8C F0            [24] 7068 	mov	b,r4
      00277B 12r00r00         [24] 7069 	lcall	__gptrget
      00277E FD               [12] 7070 	mov	r5,a
      00277F A3               [24] 7071 	inc	dptr
      002780 12r00r00         [24] 7072 	lcall	__gptrget
      002783 FE               [12] 7073 	mov	r6,a
      002784 A3               [24] 7074 	inc	dptr
      002785 12r00r00         [24] 7075 	lcall	__gptrget
      002788 FF               [12] 7076 	mov	r7,a
      002789 C0 04            [24] 7077 	push	ar4
      00278B C0 03            [24] 7078 	push	ar3
      00278D C0 02            [24] 7079 	push	ar2
      00278F E5*00            [12] 7080 	mov	a,_bp
      002791 24 0E            [12] 7081 	add	a,#0x0e
      002793 F8               [12] 7082 	mov	r0,a
      002794 E6               [12] 7083 	mov	a,@r0
      002795 C0 E0            [24] 7084 	push	acc
      002797 08               [12] 7085 	inc	r0
      002798 E6               [12] 7086 	mov	a,@r0
      002799 C0 E0            [24] 7087 	push	acc
      00279B 08               [12] 7088 	inc	r0
      00279C E6               [12] 7089 	mov	a,@r0
      00279D C0 E0            [24] 7090 	push	acc
      00279F 8D 82            [24] 7091 	mov	dpl,r5
      0027A1 8E 83            [24] 7092 	mov	dph,r6
      0027A3 8F F0            [24] 7093 	mov	b,r7
      0027A5 12r00r00         [24] 7094 	lcall	_stack_pop
      0027A8 AE 82            [24] 7095 	mov	r6,dpl
      0027AA AF 83            [24] 7096 	mov	r7,dph
      0027AC 15 81            [12] 7097 	dec	sp
      0027AE 15 81            [12] 7098 	dec	sp
      0027B0 15 81            [12] 7099 	dec	sp
      0027B2 D0 02            [24] 7100 	pop	ar2
      0027B4 D0 03            [24] 7101 	pop	ar3
      0027B6 D0 04            [24] 7102 	pop	ar4
      0027B8 EE               [12] 7103 	mov	a,r6
      0027B9 4F               [12] 7104 	orl	a,r7
      0027BA 70 22            [24] 7105 	jnz	00246$
      0027BC 7Dr38            [12] 7106 	mov	r5,#___str_8
      0027BE 7Cs00            [12] 7107 	mov	r4,#(___str_8 >> 8)
      0027C0 7B 80            [12] 7108 	mov	r3,#0x80
                                   7109 ;	calc.c:51: return;
      0027C2                       7110 00496$:
                                   7111 ;	calc.c:49: for (; *s; s++) putchar(*s);
      0027C2 8D 82            [24] 7112 	mov	dpl,r5
      0027C4 8C 83            [24] 7113 	mov	dph,r4
      0027C6 8B F0            [24] 7114 	mov	b,r3
      0027C8 12r00r00         [24] 7115 	lcall	__gptrget
      0027CB FF               [12] 7116 	mov	r7,a
      0027CC 60 62            [24] 7117 	jz	00249$
      0027CE 7E 00            [12] 7118 	mov	r6,#0x00
      0027D0 8F 82            [24] 7119 	mov	dpl,r7
      0027D2 8E 83            [24] 7120 	mov	dph,r6
      0027D4 12r00r00         [24] 7121 	lcall	_putchar
      0027D7 0D               [12] 7122 	inc	r5
                                   7123 ;	calc.c:327: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      0027D8 BD 00 E7         [24] 7124 	cjne	r5,#0x00,00496$
      0027DB 0C               [12] 7125 	inc	r4
      0027DC 80 E4            [24] 7126 	sjmp	00496$
      0027DE                       7127 00246$:
                                   7128 ;	calc.c:329: d0 = ~d0;
      0027DE E5*00            [12] 7129 	mov	a,_bp
      0027E0 24 15            [12] 7130 	add	a,#0x15
      0027E2 F8               [12] 7131 	mov	r0,a
      0027E3 E6               [12] 7132 	mov	a,@r0
      0027E4 F4               [12] 7133 	cpl	a
      0027E5 F6               [12] 7134 	mov	@r0,a
      0027E6 08               [12] 7135 	inc	r0
      0027E7 E6               [12] 7136 	mov	a,@r0
      0027E8 F4               [12] 7137 	cpl	a
      0027E9 F6               [12] 7138 	mov	@r0,a
      0027EA 08               [12] 7139 	inc	r0
      0027EB E6               [12] 7140 	mov	a,@r0
      0027EC F4               [12] 7141 	cpl	a
      0027ED F6               [12] 7142 	mov	@r0,a
      0027EE 08               [12] 7143 	inc	r0
      0027EF E6               [12] 7144 	mov	a,@r0
      0027F0 F4               [12] 7145 	cpl	a
      0027F1 F6               [12] 7146 	mov	@r0,a
                                   7147 ;	calc.c:330: (void)stack_push(ctx->ps, d0);
      0027F2 8A 82            [24] 7148 	mov	dpl,r2
      0027F4 8B 83            [24] 7149 	mov	dph,r3
      0027F6 8C F0            [24] 7150 	mov	b,r4
      0027F8 12r00r00         [24] 7151 	lcall	__gptrget
      0027FB FA               [12] 7152 	mov	r2,a
      0027FC A3               [24] 7153 	inc	dptr
      0027FD 12r00r00         [24] 7154 	lcall	__gptrget
      002800 FB               [12] 7155 	mov	r3,a
      002801 A3               [24] 7156 	inc	dptr
      002802 12r00r00         [24] 7157 	lcall	__gptrget
      002805 FC               [12] 7158 	mov	r4,a
      002806 E5*00            [12] 7159 	mov	a,_bp
      002808 24 15            [12] 7160 	add	a,#0x15
      00280A F8               [12] 7161 	mov	r0,a
      00280B E6               [12] 7162 	mov	a,@r0
      00280C C0 E0            [24] 7163 	push	acc
      00280E 08               [12] 7164 	inc	r0
      00280F E6               [12] 7165 	mov	a,@r0
      002810 C0 E0            [24] 7166 	push	acc
      002812 08               [12] 7167 	inc	r0
      002813 E6               [12] 7168 	mov	a,@r0
      002814 C0 E0            [24] 7169 	push	acc
      002816 08               [12] 7170 	inc	r0
      002817 E6               [12] 7171 	mov	a,@r0
      002818 C0 E0            [24] 7172 	push	acc
      00281A 8A 82            [24] 7173 	mov	dpl,r2
      00281C 8B 83            [24] 7174 	mov	dph,r3
      00281E 8C F0            [24] 7175 	mov	b,r4
      002820 12r00r00         [24] 7176 	lcall	_stack_push
      002823 E5 81            [12] 7177 	mov	a,sp
      002825 24 FC            [12] 7178 	add	a,#0xfc
      002827 F5 81            [12] 7179 	mov	sp,a
                                   7180 ;	calc.c:332: break;
                                   7181 ;	calc.c:333: default:
      002829 80 05            [24] 7182 	sjmp	00249$
      00282B                       7183 00248$:
                                   7184 ;	calc.c:334: return UNDEF;
      00282B 90 80 00         [24] 7185 	mov	dptr,#0x8000
                                   7186 ;	calc.c:335: }
      00282E 80 03            [24] 7187 	sjmp	00498$
      002830                       7188 00249$:
                                   7189 ;	calc.c:337: return 1;
      002830 90 00 01         [24] 7190 	mov	dptr,#0x0001
      002833                       7191 00498$:
                                   7192 ;	calc.c:338: }
      002833 85*00 81         [24] 7193 	mov	sp,_bp
      002836 D0*00            [24] 7194 	pop	_bp
      002838 22               [24] 7195 	ret
                                   7196 ;------------------------------------------------------------
                                   7197 ;Allocation info for local variables in function 'push_acc'
                                   7198 ;------------------------------------------------------------
                                   7199 ;delta                     Allocated to stack - _bp -5
                                   7200 ;_ctx                      Allocated to stack - _bp +1
                                   7201 ;ctx                       Allocated to registers r2 r3 r4 
                                   7202 ;__1310720117              Allocated to registers 
                                   7203 ;s                         Allocated to registers r5 r6 r7 
                                   7204 ;sloc0                     Allocated to stack - _bp +4
                                   7205 ;------------------------------------------------------------
                                   7206 ;	calc.c:340: static int push_acc(void *_ctx, delta_t *delta) __reentrant {
                                   7207 ;	-----------------------------------------
                                   7208 ;	 function push_acc
                                   7209 ;	-----------------------------------------
      002839                       7210 _push_acc:
      002839 C0*00            [24] 7211 	push	_bp
      00283B 85 81*00         [24] 7212 	mov	_bp,sp
      00283E C0 82            [24] 7213 	push	dpl
      002840 C0 83            [24] 7214 	push	dph
      002842 C0 F0            [24] 7215 	push	b
      002844 E5 81            [12] 7216 	mov	a,sp
      002846 24 04            [12] 7217 	add	a,#0x04
      002848 F5 81            [12] 7218 	mov	sp,a
                                   7219 ;	calc.c:341: calc_ctx_t*ctx = (calc_ctx_t*)_ctx;
      00284A A8*00            [24] 7220 	mov	r0,_bp
      00284C 08               [12] 7221 	inc	r0
      00284D 86 02            [24] 7222 	mov	ar2,@r0
      00284F 08               [12] 7223 	inc	r0
      002850 86 03            [24] 7224 	mov	ar3,@r0
      002852 08               [12] 7225 	inc	r0
      002853 86 04            [24] 7226 	mov	ar4,@r0
                                   7227 ;	calc.c:345: ctx->acc_valid = 0;
      002855 74 06            [12] 7228 	mov	a,#0x06
      002857 2A               [12] 7229 	add	a,r2
      002858 FD               [12] 7230 	mov	r5,a
      002859 E4               [12] 7231 	clr	a
      00285A 3B               [12] 7232 	addc	a,r3
      00285B FE               [12] 7233 	mov	r6,a
      00285C 8C 07            [24] 7234 	mov	ar7,r4
      00285E 8D 82            [24] 7235 	mov	dpl,r5
      002860 8E 83            [24] 7236 	mov	dph,r6
      002862 8F F0            [24] 7237 	mov	b,r7
      002864 E4               [12] 7238 	clr	a
      002865 12r00r00         [24] 7239 	lcall	__gptrput
                                   7240 ;	calc.c:346: if (!stack_push(ctx->ps, ctx->acc)) printstr("\r\nstack overflow\r\n");
      002868 74 02            [12] 7241 	mov	a,#0x02
      00286A 2A               [12] 7242 	add	a,r2
      00286B FF               [12] 7243 	mov	r7,a
      00286C E4               [12] 7244 	clr	a
      00286D 3B               [12] 7245 	addc	a,r3
      00286E FD               [12] 7246 	mov	r5,a
      00286F 8C 06            [24] 7247 	mov	ar6,r4
      002871 8F 82            [24] 7248 	mov	dpl,r7
      002873 8D 83            [24] 7249 	mov	dph,r5
      002875 8E F0            [24] 7250 	mov	b,r6
      002877 E5*00            [12] 7251 	mov	a,_bp
      002879 24 04            [12] 7252 	add	a,#0x04
      00287B F8               [12] 7253 	mov	r0,a
      00287C 12r00r00         [24] 7254 	lcall	__gptrget
      00287F F6               [12] 7255 	mov	@r0,a
      002880 A3               [24] 7256 	inc	dptr
      002881 12r00r00         [24] 7257 	lcall	__gptrget
      002884 08               [12] 7258 	inc	r0
      002885 F6               [12] 7259 	mov	@r0,a
      002886 A3               [24] 7260 	inc	dptr
      002887 12r00r00         [24] 7261 	lcall	__gptrget
      00288A 08               [12] 7262 	inc	r0
      00288B F6               [12] 7263 	mov	@r0,a
      00288C A3               [24] 7264 	inc	dptr
      00288D 12r00r00         [24] 7265 	lcall	__gptrget
      002890 08               [12] 7266 	inc	r0
      002891 F6               [12] 7267 	mov	@r0,a
      002892 74 11            [12] 7268 	mov	a,#0x11
      002894 2A               [12] 7269 	add	a,r2
      002895 FA               [12] 7270 	mov	r2,a
      002896 74 40            [12] 7271 	mov	a,#0x40
      002898 3B               [12] 7272 	addc	a,r3
      002899 FB               [12] 7273 	mov	r3,a
      00289A 8C 07            [24] 7274 	mov	ar7,r4
      00289C 8A 82            [24] 7275 	mov	dpl,r2
      00289E 8B 83            [24] 7276 	mov	dph,r3
      0028A0 8F F0            [24] 7277 	mov	b,r7
      0028A2 12r00r00         [24] 7278 	lcall	__gptrget
      0028A5 FA               [12] 7279 	mov	r2,a
      0028A6 A3               [24] 7280 	inc	dptr
      0028A7 12r00r00         [24] 7281 	lcall	__gptrget
      0028AA FB               [12] 7282 	mov	r3,a
      0028AB A3               [24] 7283 	inc	dptr
      0028AC 12r00r00         [24] 7284 	lcall	__gptrget
      0028AF FF               [12] 7285 	mov	r7,a
      0028B0 E5*00            [12] 7286 	mov	a,_bp
      0028B2 24 04            [12] 7287 	add	a,#0x04
      0028B4 F8               [12] 7288 	mov	r0,a
      0028B5 E6               [12] 7289 	mov	a,@r0
      0028B6 C0 E0            [24] 7290 	push	acc
      0028B8 08               [12] 7291 	inc	r0
      0028B9 E6               [12] 7292 	mov	a,@r0
      0028BA C0 E0            [24] 7293 	push	acc
      0028BC 08               [12] 7294 	inc	r0
      0028BD E6               [12] 7295 	mov	a,@r0
      0028BE C0 E0            [24] 7296 	push	acc
      0028C0 08               [12] 7297 	inc	r0
      0028C1 E6               [12] 7298 	mov	a,@r0
      0028C2 C0 E0            [24] 7299 	push	acc
      0028C4 8A 82            [24] 7300 	mov	dpl,r2
      0028C6 8B 83            [24] 7301 	mov	dph,r3
      0028C8 8F F0            [24] 7302 	mov	b,r7
      0028CA 12r00r00         [24] 7303 	lcall	_stack_push
      0028CD AE 82            [24] 7304 	mov	r6,dpl
      0028CF AF 83            [24] 7305 	mov	r7,dph
      0028D1 E5 81            [12] 7306 	mov	a,sp
      0028D3 24 FC            [12] 7307 	add	a,#0xfc
      0028D5 F5 81            [12] 7308 	mov	sp,a
      0028D7 EE               [12] 7309 	mov	a,r6
      0028D8 4F               [12] 7310 	orl	a,r7
      0028D9 70 22            [24] 7311 	jnz	00102$
      0028DB 7Dr87            [12] 7312 	mov	r5,#___str_11
      0028DD 7Es00            [12] 7313 	mov	r6,#(___str_11 >> 8)
      0028DF 7F 80            [12] 7314 	mov	r7,#0x80
                                   7315 ;	calc.c:51: return;
      0028E1                       7316 00109$:
                                   7317 ;	calc.c:49: for (; *s; s++) putchar(*s);
      0028E1 8D 82            [24] 7318 	mov	dpl,r5
      0028E3 8E 83            [24] 7319 	mov	dph,r6
      0028E5 8F F0            [24] 7320 	mov	b,r7
      0028E7 12r00r00         [24] 7321 	lcall	__gptrget
      0028EA FC               [12] 7322 	mov	r4,a
      0028EB 60 10            [24] 7323 	jz	00102$
      0028ED 7B 00            [12] 7324 	mov	r3,#0x00
      0028EF 8C 82            [24] 7325 	mov	dpl,r4
      0028F1 8B 83            [24] 7326 	mov	dph,r3
      0028F3 12r00r00         [24] 7327 	lcall	_putchar
      0028F6 0D               [12] 7328 	inc	r5
                                   7329 ;	calc.c:346: if (!stack_push(ctx->ps, ctx->acc)) printstr("\r\nstack overflow\r\n");
      0028F7 BD 00 E7         [24] 7330 	cjne	r5,#0x00,00109$
      0028FA 0E               [12] 7331 	inc	r6
      0028FB 80 E4            [24] 7332 	sjmp	00109$
      0028FD                       7333 00102$:
                                   7334 ;	calc.c:348: if (delta->event == EVENT_OP) return operator(_ctx, delta);
      0028FD E5*00            [12] 7335 	mov	a,_bp
      0028FF 24 FB            [12] 7336 	add	a,#0xfb
      002901 F8               [12] 7337 	mov	r0,a
      002902 86 05            [24] 7338 	mov	ar5,@r0
      002904 08               [12] 7339 	inc	r0
      002905 86 06            [24] 7340 	mov	ar6,@r0
      002907 08               [12] 7341 	inc	r0
      002908 86 07            [24] 7342 	mov	ar7,@r0
      00290A 74 02            [12] 7343 	mov	a,#0x02
      00290C 2D               [12] 7344 	add	a,r5
      00290D FA               [12] 7345 	mov	r2,a
      00290E E4               [12] 7346 	clr	a
      00290F 3E               [12] 7347 	addc	a,r6
      002910 FB               [12] 7348 	mov	r3,a
      002911 8F 04            [24] 7349 	mov	ar4,r7
      002913 8A 82            [24] 7350 	mov	dpl,r2
      002915 8B 83            [24] 7351 	mov	dph,r3
      002917 8C F0            [24] 7352 	mov	b,r4
      002919 12r00r00         [24] 7353 	lcall	__gptrget
      00291C FA               [12] 7354 	mov	r2,a
      00291D A3               [24] 7355 	inc	dptr
      00291E 12r00r00         [24] 7356 	lcall	__gptrget
      002921 FB               [12] 7357 	mov	r3,a
      002922 BA 02 27         [24] 7358 	cjne	r2,#0x02,00104$
      002925 BB 00 24         [24] 7359 	cjne	r3,#0x00,00104$
      002928 C0 05            [24] 7360 	push	ar5
      00292A C0 06            [24] 7361 	push	ar6
      00292C C0 07            [24] 7362 	push	ar7
      00292E A8*00            [24] 7363 	mov	r0,_bp
      002930 08               [12] 7364 	inc	r0
      002931 86 82            [24] 7365 	mov	dpl,@r0
      002933 08               [12] 7366 	inc	r0
      002934 86 83            [24] 7367 	mov	dph,@r0
      002936 08               [12] 7368 	inc	r0
      002937 86 F0            [24] 7369 	mov	b,@r0
      002939 12r05rAB         [24] 7370 	lcall	_operator
      00293C AE 82            [24] 7371 	mov	r6,dpl
      00293E AF 83            [24] 7372 	mov	r7,dph
      002940 15 81            [12] 7373 	dec	sp
      002942 15 81            [12] 7374 	dec	sp
      002944 15 81            [12] 7375 	dec	sp
      002946 8E 82            [24] 7376 	mov	dpl,r6
      002948 8F 83            [24] 7377 	mov	dph,r7
      00294A 80 03            [24] 7378 	sjmp	00111$
      00294C                       7379 00104$:
                                   7380 ;	calc.c:349: else return 1;
      00294C 90 00 01         [24] 7381 	mov	dptr,#0x0001
      00294F                       7382 00111$:
                                   7383 ;	calc.c:350: }
      00294F 85*00 81         [24] 7384 	mov	sp,_bp
      002952 D0*00            [24] 7385 	pop	_bp
      002954 22               [24] 7386 	ret
                                   7387 ;------------------------------------------------------------
                                   7388 ;Allocation info for local variables in function 'reset_acc'
                                   7389 ;------------------------------------------------------------
                                   7390 ;delta                     Allocated to stack - _bp -5
                                   7391 ;_ctx                      Allocated to registers r5 r6 r7 
                                   7392 ;ctx                       Allocated to registers r5 r6 r7 
                                   7393 ;------------------------------------------------------------
                                   7394 ;	calc.c:352: static int reset_acc(void *_ctx, delta_t *delta) __reentrant {
                                   7395 ;	-----------------------------------------
                                   7396 ;	 function reset_acc
                                   7397 ;	-----------------------------------------
      002955                       7398 _reset_acc:
      002955 C0*00            [24] 7399 	push	_bp
      002957 85 81*00         [24] 7400 	mov	_bp,sp
      00295A AD 82            [24] 7401 	mov	r5,dpl
      00295C AE 83            [24] 7402 	mov	r6,dph
      00295E AF F0            [24] 7403 	mov	r7,b
                                   7404 ;	calc.c:353: calc_ctx_t*ctx = (calc_ctx_t*)_ctx;
                                   7405 ;	calc.c:355: if (delta->event == EVENT_RSTA_I) ctx->acc_valid = 0;
      002960 E5*00            [12] 7406 	mov	a,_bp
      002962 24 FB            [12] 7407 	add	a,#0xfb
      002964 F8               [12] 7408 	mov	r0,a
      002965 86 02            [24] 7409 	mov	ar2,@r0
      002967 08               [12] 7410 	inc	r0
      002968 86 03            [24] 7411 	mov	ar3,@r0
      00296A 08               [12] 7412 	inc	r0
      00296B 86 04            [24] 7413 	mov	ar4,@r0
      00296D 74 02            [12] 7414 	mov	a,#0x02
      00296F 2A               [12] 7415 	add	a,r2
      002970 FA               [12] 7416 	mov	r2,a
      002971 E4               [12] 7417 	clr	a
      002972 3B               [12] 7418 	addc	a,r3
      002973 FB               [12] 7419 	mov	r3,a
      002974 8A 82            [24] 7420 	mov	dpl,r2
      002976 8B 83            [24] 7421 	mov	dph,r3
      002978 8C F0            [24] 7422 	mov	b,r4
      00297A 12r00r00         [24] 7423 	lcall	__gptrget
      00297D FA               [12] 7424 	mov	r2,a
      00297E A3               [24] 7425 	inc	dptr
      00297F 12r00r00         [24] 7426 	lcall	__gptrget
      002982 FB               [12] 7427 	mov	r3,a
      002983 BA 07 16         [24] 7428 	cjne	r2,#0x07,00102$
      002986 BB 00 13         [24] 7429 	cjne	r3,#0x00,00102$
      002989 74 06            [12] 7430 	mov	a,#0x06
      00298B 2D               [12] 7431 	add	a,r5
      00298C FA               [12] 7432 	mov	r2,a
      00298D E4               [12] 7433 	clr	a
      00298E 3E               [12] 7434 	addc	a,r6
      00298F FB               [12] 7435 	mov	r3,a
      002990 8F 04            [24] 7436 	mov	ar4,r7
      002992 8A 82            [24] 7437 	mov	dpl,r2
      002994 8B 83            [24] 7438 	mov	dph,r3
      002996 8C F0            [24] 7439 	mov	b,r4
      002998 E4               [12] 7440 	clr	a
      002999 12r00r00         [24] 7441 	lcall	__gptrput
      00299C                       7442 00102$:
                                   7443 ;	calc.c:356: ctx->acc = 0l;
      00299C 74 02            [12] 7444 	mov	a,#0x02
      00299E 2D               [12] 7445 	add	a,r5
      00299F FD               [12] 7446 	mov	r5,a
      0029A0 E4               [12] 7447 	clr	a
      0029A1 3E               [12] 7448 	addc	a,r6
      0029A2 FE               [12] 7449 	mov	r6,a
      0029A3 8D 82            [24] 7450 	mov	dpl,r5
      0029A5 8E 83            [24] 7451 	mov	dph,r6
      0029A7 8F F0            [24] 7452 	mov	b,r7
      0029A9 E4               [12] 7453 	clr	a
      0029AA 12r00r00         [24] 7454 	lcall	__gptrput
      0029AD A3               [24] 7455 	inc	dptr
      0029AE 12r00r00         [24] 7456 	lcall	__gptrput
      0029B1 A3               [24] 7457 	inc	dptr
      0029B2 12r00r00         [24] 7458 	lcall	__gptrput
      0029B5 A3               [24] 7459 	inc	dptr
      0029B6 12r00r00         [24] 7460 	lcall	__gptrput
                                   7461 ;	calc.c:358: return 1;
      0029B9 90 00 01         [24] 7462 	mov	dptr,#0x0001
                                   7463 ;	calc.c:359: }
      0029BC D0*00            [24] 7464 	pop	_bp
      0029BE 22               [24] 7465 	ret
                                   7466 ;------------------------------------------------------------
                                   7467 ;Allocation info for local variables in function 'reset_base'
                                   7468 ;------------------------------------------------------------
                                   7469 ;delta                     Allocated to stack - _bp -5
                                   7470 ;_ctx                      Allocated to registers r5 r6 r7 
                                   7471 ;ctx                       Allocated to registers r5 r6 r7 
                                   7472 ;------------------------------------------------------------
                                   7473 ;	calc.c:361: static int reset_base(void *_ctx, delta_t *delta) __reentrant {
                                   7474 ;	-----------------------------------------
                                   7475 ;	 function reset_base
                                   7476 ;	-----------------------------------------
      0029BF                       7477 _reset_base:
      0029BF C0*00            [24] 7478 	push	_bp
      0029C1 85 81*00         [24] 7479 	mov	_bp,sp
      0029C4 AD 82            [24] 7480 	mov	r5,dpl
      0029C6 AE 83            [24] 7481 	mov	r6,dph
      0029C8 AF F0            [24] 7482 	mov	r7,b
                                   7483 ;	calc.c:362: calc_ctx_t*ctx = (calc_ctx_t*)_ctx;
                                   7484 ;	calc.c:366: switch (ctx->digit[0]) {
      0029CA 74 07            [12] 7485 	mov	a,#0x07
      0029CC 2D               [12] 7486 	add	a,r5
      0029CD FA               [12] 7487 	mov	r2,a
      0029CE E4               [12] 7488 	clr	a
      0029CF 3E               [12] 7489 	addc	a,r6
      0029D0 FB               [12] 7490 	mov	r3,a
      0029D1 8F 04            [24] 7491 	mov	ar4,r7
      0029D3 8A 82            [24] 7492 	mov	dpl,r2
      0029D5 8B 83            [24] 7493 	mov	dph,r3
      0029D7 8C F0            [24] 7494 	mov	b,r4
      0029D9 12r00r00         [24] 7495 	lcall	__gptrget
      0029DC FC               [12] 7496 	mov	r4,a
      0029DD BC 48 02         [24] 7497 	cjne	r4,#0x48,00124$
      0029E0 80 0F            [24] 7498 	sjmp	00101$
      0029E2                       7499 00124$:
      0029E2 BC 4F 02         [24] 7500 	cjne	r4,#0x4f,00125$
      0029E5 80 2E            [24] 7501 	sjmp	00103$
      0029E7                       7502 00125$:
      0029E7 BC 68 02         [24] 7503 	cjne	r4,#0x68,00126$
      0029EA 80 17            [24] 7504 	sjmp	00102$
      0029EC                       7505 00126$:
                                   7506 ;	calc.c:367: case 'H':
      0029EC BC 6F 48         [24] 7507 	cjne	r4,#0x6f,00105$
      0029EF 80 36            [24] 7508 	sjmp	00104$
      0029F1                       7509 00101$:
                                   7510 ;	calc.c:368: ctx->base = 16;
      0029F1 8D 82            [24] 7511 	mov	dpl,r5
      0029F3 8E 83            [24] 7512 	mov	dph,r6
      0029F5 8F F0            [24] 7513 	mov	b,r7
      0029F7 74 10            [12] 7514 	mov	a,#0x10
      0029F9 12r00r00         [24] 7515 	lcall	__gptrput
      0029FC A3               [24] 7516 	inc	dptr
      0029FD E4               [12] 7517 	clr	a
      0029FE 12r00r00         [24] 7518 	lcall	__gptrput
                                   7519 ;	calc.c:369: break;
                                   7520 ;	calc.c:370: case 'h':
      002A01 80 34            [24] 7521 	sjmp	00105$
      002A03                       7522 00102$:
                                   7523 ;	calc.c:371: ctx->base = 10;
      002A03 8D 82            [24] 7524 	mov	dpl,r5
      002A05 8E 83            [24] 7525 	mov	dph,r6
      002A07 8F F0            [24] 7526 	mov	b,r7
      002A09 74 0A            [12] 7527 	mov	a,#0x0a
      002A0B 12r00r00         [24] 7528 	lcall	__gptrput
      002A0E A3               [24] 7529 	inc	dptr
      002A0F E4               [12] 7530 	clr	a
      002A10 12r00r00         [24] 7531 	lcall	__gptrput
                                   7532 ;	calc.c:372: break;
                                   7533 ;	calc.c:373: case 'O':
      002A13 80 22            [24] 7534 	sjmp	00105$
      002A15                       7535 00103$:
                                   7536 ;	calc.c:374: ctx->base = 8;
      002A15 8D 82            [24] 7537 	mov	dpl,r5
      002A17 8E 83            [24] 7538 	mov	dph,r6
      002A19 8F F0            [24] 7539 	mov	b,r7
      002A1B 74 08            [12] 7540 	mov	a,#0x08
      002A1D 12r00r00         [24] 7541 	lcall	__gptrput
      002A20 A3               [24] 7542 	inc	dptr
      002A21 E4               [12] 7543 	clr	a
      002A22 12r00r00         [24] 7544 	lcall	__gptrput
                                   7545 ;	calc.c:375: break;
                                   7546 ;	calc.c:376: case 'o':
      002A25 80 10            [24] 7547 	sjmp	00105$
      002A27                       7548 00104$:
                                   7549 ;	calc.c:377: ctx->base = 2;
      002A27 8D 82            [24] 7550 	mov	dpl,r5
      002A29 8E 83            [24] 7551 	mov	dph,r6
      002A2B 8F F0            [24] 7552 	mov	b,r7
      002A2D 74 02            [12] 7553 	mov	a,#0x02
      002A2F 12r00r00         [24] 7554 	lcall	__gptrput
      002A32 A3               [24] 7555 	inc	dptr
      002A33 E4               [12] 7556 	clr	a
      002A34 12r00r00         [24] 7557 	lcall	__gptrput
                                   7558 ;	calc.c:379: }
      002A37                       7559 00105$:
                                   7560 ;	calc.c:381: return 1;
      002A37 90 00 01         [24] 7561 	mov	dptr,#0x0001
                                   7562 ;	calc.c:382: }
      002A3A D0*00            [24] 7563 	pop	_bp
      002A3C 22               [24] 7564 	ret
                                   7565 ;------------------------------------------------------------
                                   7566 ;Allocation info for local variables in function 'status'
                                   7567 ;------------------------------------------------------------
                                   7568 ;delta                     Allocated to stack - _bp -5
                                   7569 ;_ctx                      Allocated to registers r5 r6 r7 
                                   7570 ;ctx                       Allocated to stack - _bp +4
                                   7571 ;__1310720119              Allocated to registers 
                                   7572 ;d                         Allocated to stack - _bp +7
                                   7573 ;mask                      Allocated to stack - _bp +11
                                   7574 ;sloc0                     Allocated to stack - _bp +1
                                   7575 ;------------------------------------------------------------
                                   7576 ;	calc.c:384: static int status(void *_ctx, delta_t *delta) __reentrant {
                                   7577 ;	-----------------------------------------
                                   7578 ;	 function status
                                   7579 ;	-----------------------------------------
      002A3D                       7580 _status:
      002A3D C0*00            [24] 7581 	push	_bp
      002A3F E5 81            [12] 7582 	mov	a,sp
      002A41 F5*00            [12] 7583 	mov	_bp,a
      002A43 24 0E            [12] 7584 	add	a,#0x0e
      002A45 F5 81            [12] 7585 	mov	sp,a
      002A47 AD 82            [24] 7586 	mov	r5,dpl
      002A49 AE 83            [24] 7587 	mov	r6,dph
      002A4B AF F0            [24] 7588 	mov	r7,b
                                   7589 ;	calc.c:385: calc_ctx_t*ctx = (calc_ctx_t*)_ctx;
      002A4D E5*00            [12] 7590 	mov	a,_bp
      002A4F 24 04            [12] 7591 	add	a,#0x04
      002A51 F8               [12] 7592 	mov	r0,a
      002A52 A6 05            [24] 7593 	mov	@r0,ar5
      002A54 08               [12] 7594 	inc	r0
      002A55 A6 06            [24] 7595 	mov	@r0,ar6
      002A57 08               [12] 7596 	inc	r0
      002A58 A6 07            [24] 7597 	mov	@r0,ar7
                                   7598 ;	calc.c:389: printf("\r\nbase = %d, ", ctx->base);
      002A5A E5*00            [12] 7599 	mov	a,_bp
      002A5C 24 04            [12] 7600 	add	a,#0x04
      002A5E F8               [12] 7601 	mov	r0,a
      002A5F 86 82            [24] 7602 	mov	dpl,@r0
      002A61 08               [12] 7603 	inc	r0
      002A62 86 83            [24] 7604 	mov	dph,@r0
      002A64 08               [12] 7605 	inc	r0
      002A65 86 F0            [24] 7606 	mov	b,@r0
      002A67 12r00r00         [24] 7607 	lcall	__gptrget
      002A6A FB               [12] 7608 	mov	r3,a
      002A6B A3               [24] 7609 	inc	dptr
      002A6C 12r00r00         [24] 7610 	lcall	__gptrget
      002A6F FC               [12] 7611 	mov	r4,a
      002A70 C0 03            [24] 7612 	push	ar3
      002A72 C0 04            [24] 7613 	push	ar4
      002A74 74rAF            [12] 7614 	mov	a,#___str_13
      002A76 C0 E0            [24] 7615 	push	acc
      002A78 74s00            [12] 7616 	mov	a,#(___str_13 >> 8)
      002A7A C0 E0            [24] 7617 	push	acc
      002A7C 74 80            [12] 7618 	mov	a,#0x80
      002A7E C0 E0            [24] 7619 	push	acc
      002A80 12r00r00         [24] 7620 	lcall	_printf
      002A83 E5 81            [12] 7621 	mov	a,sp
      002A85 24 FB            [12] 7622 	add	a,#0xfb
      002A87 F5 81            [12] 7623 	mov	sp,a
                                   7624 ;	calc.c:390: printf("acc = %ld / ", ctx->acc);
      002A89 E5*00            [12] 7625 	mov	a,_bp
      002A8B 24 04            [12] 7626 	add	a,#0x04
      002A8D F8               [12] 7627 	mov	r0,a
      002A8E A9*00            [24] 7628 	mov	r1,_bp
      002A90 09               [12] 7629 	inc	r1
      002A91 74 02            [12] 7630 	mov	a,#0x02
      002A93 26               [12] 7631 	add	a,@r0
      002A94 F7               [12] 7632 	mov	@r1,a
      002A95 E4               [12] 7633 	clr	a
      002A96 08               [12] 7634 	inc	r0
      002A97 36               [12] 7635 	addc	a,@r0
      002A98 09               [12] 7636 	inc	r1
      002A99 F7               [12] 7637 	mov	@r1,a
      002A9A 08               [12] 7638 	inc	r0
      002A9B 09               [12] 7639 	inc	r1
      002A9C E6               [12] 7640 	mov	a,@r0
      002A9D F7               [12] 7641 	mov	@r1,a
      002A9E A8*00            [24] 7642 	mov	r0,_bp
      002AA0 08               [12] 7643 	inc	r0
      002AA1 86 82            [24] 7644 	mov	dpl,@r0
      002AA3 08               [12] 7645 	inc	r0
      002AA4 86 83            [24] 7646 	mov	dph,@r0
      002AA6 08               [12] 7647 	inc	r0
      002AA7 86 F0            [24] 7648 	mov	b,@r0
      002AA9 12r00r00         [24] 7649 	lcall	__gptrget
      002AAC FC               [12] 7650 	mov	r4,a
      002AAD A3               [24] 7651 	inc	dptr
      002AAE 12r00r00         [24] 7652 	lcall	__gptrget
      002AB1 FD               [12] 7653 	mov	r5,a
      002AB2 A3               [24] 7654 	inc	dptr
      002AB3 12r00r00         [24] 7655 	lcall	__gptrget
      002AB6 FE               [12] 7656 	mov	r6,a
      002AB7 A3               [24] 7657 	inc	dptr
      002AB8 12r00r00         [24] 7658 	lcall	__gptrget
      002ABB FF               [12] 7659 	mov	r7,a
      002ABC C0 04            [24] 7660 	push	ar4
      002ABE C0 05            [24] 7661 	push	ar5
      002AC0 C0 06            [24] 7662 	push	ar6
      002AC2 C0 07            [24] 7663 	push	ar7
      002AC4 74rBD            [12] 7664 	mov	a,#___str_14
      002AC6 C0 E0            [24] 7665 	push	acc
      002AC8 74s00            [12] 7666 	mov	a,#(___str_14 >> 8)
      002ACA C0 E0            [24] 7667 	push	acc
      002ACC 74 80            [12] 7668 	mov	a,#0x80
      002ACE C0 E0            [24] 7669 	push	acc
      002AD0 12r00r00         [24] 7670 	lcall	_printf
      002AD3 E5 81            [12] 7671 	mov	a,sp
      002AD5 24 F9            [12] 7672 	add	a,#0xf9
      002AD7 F5 81            [12] 7673 	mov	sp,a
                                   7674 ;	calc.c:391: printf("%08lx / ", ctx->acc);
      002AD9 A8*00            [24] 7675 	mov	r0,_bp
      002ADB 08               [12] 7676 	inc	r0
      002ADC 86 82            [24] 7677 	mov	dpl,@r0
      002ADE 08               [12] 7678 	inc	r0
      002ADF 86 83            [24] 7679 	mov	dph,@r0
      002AE1 08               [12] 7680 	inc	r0
      002AE2 86 F0            [24] 7681 	mov	b,@r0
      002AE4 12r00r00         [24] 7682 	lcall	__gptrget
      002AE7 FC               [12] 7683 	mov	r4,a
      002AE8 A3               [24] 7684 	inc	dptr
      002AE9 12r00r00         [24] 7685 	lcall	__gptrget
      002AEC FD               [12] 7686 	mov	r5,a
      002AED A3               [24] 7687 	inc	dptr
      002AEE 12r00r00         [24] 7688 	lcall	__gptrget
      002AF1 FE               [12] 7689 	mov	r6,a
      002AF2 A3               [24] 7690 	inc	dptr
      002AF3 12r00r00         [24] 7691 	lcall	__gptrget
      002AF6 FF               [12] 7692 	mov	r7,a
      002AF7 C0 04            [24] 7693 	push	ar4
      002AF9 C0 05            [24] 7694 	push	ar5
      002AFB C0 06            [24] 7695 	push	ar6
      002AFD C0 07            [24] 7696 	push	ar7
      002AFF 74r23            [12] 7697 	mov	a,#___str_4
      002B01 C0 E0            [24] 7698 	push	acc
      002B03 74s00            [12] 7699 	mov	a,#(___str_4 >> 8)
      002B05 C0 E0            [24] 7700 	push	acc
      002B07 74 80            [12] 7701 	mov	a,#0x80
      002B09 C0 E0            [24] 7702 	push	acc
      002B0B 12r00r00         [24] 7703 	lcall	_printf
      002B0E E5 81            [12] 7704 	mov	a,sp
      002B10 24 F9            [12] 7705 	add	a,#0xf9
      002B12 F5 81            [12] 7706 	mov	sp,a
                                   7707 ;	calc.c:392: printbin(ctx->acc);
      002B14 A8*00            [24] 7708 	mov	r0,_bp
      002B16 08               [12] 7709 	inc	r0
      002B17 86 82            [24] 7710 	mov	dpl,@r0
      002B19 08               [12] 7711 	inc	r0
      002B1A 86 83            [24] 7712 	mov	dph,@r0
      002B1C 08               [12] 7713 	inc	r0
      002B1D 86 F0            [24] 7714 	mov	b,@r0
      002B1F E5*00            [12] 7715 	mov	a,_bp
      002B21 24 07            [12] 7716 	add	a,#0x07
      002B23 F9               [12] 7717 	mov	r1,a
      002B24 12r00r00         [24] 7718 	lcall	__gptrget
      002B27 F7               [12] 7719 	mov	@r1,a
      002B28 A3               [24] 7720 	inc	dptr
      002B29 12r00r00         [24] 7721 	lcall	__gptrget
      002B2C 09               [12] 7722 	inc	r1
      002B2D F7               [12] 7723 	mov	@r1,a
      002B2E A3               [24] 7724 	inc	dptr
      002B2F 12r00r00         [24] 7725 	lcall	__gptrget
      002B32 09               [12] 7726 	inc	r1
      002B33 F7               [12] 7727 	mov	@r1,a
      002B34 A3               [24] 7728 	inc	dptr
      002B35 12r00r00         [24] 7729 	lcall	__gptrget
      002B38 09               [12] 7730 	inc	r1
      002B39 F7               [12] 7731 	mov	@r1,a
                                   7732 ;	calc.c:57: for (mask = 0x80000000lu; mask; mask >>= 1)
      002B3A E5*00            [12] 7733 	mov	a,_bp
      002B3C 24 0B            [12] 7734 	add	a,#0x0b
      002B3E F8               [12] 7735 	mov	r0,a
      002B3F E4               [12] 7736 	clr	a
      002B40 F6               [12] 7737 	mov	@r0,a
      002B41 08               [12] 7738 	inc	r0
      002B42 F6               [12] 7739 	mov	@r0,a
      002B43 08               [12] 7740 	inc	r0
      002B44 F6               [12] 7741 	mov	@r0,a
      002B45 08               [12] 7742 	inc	r0
      002B46 76 80            [12] 7743 	mov	@r0,#0x80
      002B48                       7744 00103$:
                                   7745 ;	calc.c:58: (void)putchar((d & mask) ? (int)'1' : (int)'0');
      002B48 E5*00            [12] 7746 	mov	a,_bp
      002B4A 24 07            [12] 7747 	add	a,#0x07
      002B4C F8               [12] 7748 	mov	r0,a
      002B4D 86 04            [24] 7749 	mov	ar4,@r0
      002B4F 08               [12] 7750 	inc	r0
      002B50 86 05            [24] 7751 	mov	ar5,@r0
      002B52 08               [12] 7752 	inc	r0
      002B53 86 06            [24] 7753 	mov	ar6,@r0
      002B55 08               [12] 7754 	inc	r0
      002B56 86 07            [24] 7755 	mov	ar7,@r0
      002B58 E5*00            [12] 7756 	mov	a,_bp
      002B5A 24 0B            [12] 7757 	add	a,#0x0b
      002B5C F8               [12] 7758 	mov	r0,a
      002B5D E6               [12] 7759 	mov	a,@r0
      002B5E 52 04            [12] 7760 	anl	ar4,a
      002B60 08               [12] 7761 	inc	r0
      002B61 E6               [12] 7762 	mov	a,@r0
      002B62 52 05            [12] 7763 	anl	ar5,a
      002B64 08               [12] 7764 	inc	r0
      002B65 E6               [12] 7765 	mov	a,@r0
      002B66 52 06            [12] 7766 	anl	ar6,a
      002B68 08               [12] 7767 	inc	r0
      002B69 E6               [12] 7768 	mov	a,@r0
      002B6A 52 07            [12] 7769 	anl	ar7,a
      002B6C EC               [12] 7770 	mov	a,r4
      002B6D 4D               [12] 7771 	orl	a,r5
      002B6E 4E               [12] 7772 	orl	a,r6
      002B6F 4F               [12] 7773 	orl	a,r7
      002B70 60 06            [24] 7774 	jz	00107$
      002B72 7E 31            [12] 7775 	mov	r6,#0x31
      002B74 7F 00            [12] 7776 	mov	r7,#0x00
      002B76 80 04            [24] 7777 	sjmp	00108$
      002B78                       7778 00107$:
      002B78 7E 30            [12] 7779 	mov	r6,#0x30
      002B7A 7F 00            [12] 7780 	mov	r7,#0x00
      002B7C                       7781 00108$:
      002B7C 8E 82            [24] 7782 	mov	dpl,r6
      002B7E 8F 83            [24] 7783 	mov	dph,r7
      002B80 12r00r00         [24] 7784 	lcall	_putchar
                                   7785 ;	calc.c:57: for (mask = 0x80000000lu; mask; mask >>= 1)
      002B83 E5*00            [12] 7786 	mov	a,_bp
      002B85 24 0B            [12] 7787 	add	a,#0x0b
      002B87 F8               [12] 7788 	mov	r0,a
      002B88 08               [12] 7789 	inc	r0
      002B89 08               [12] 7790 	inc	r0
      002B8A 08               [12] 7791 	inc	r0
      002B8B E6               [12] 7792 	mov	a,@r0
      002B8C C3               [12] 7793 	clr	c
      002B8D 13               [12] 7794 	rrc	a
      002B8E F6               [12] 7795 	mov	@r0,a
      002B8F 18               [12] 7796 	dec	r0
      002B90 E6               [12] 7797 	mov	a,@r0
      002B91 13               [12] 7798 	rrc	a
      002B92 F6               [12] 7799 	mov	@r0,a
      002B93 18               [12] 7800 	dec	r0
      002B94 E6               [12] 7801 	mov	a,@r0
      002B95 13               [12] 7802 	rrc	a
      002B96 F6               [12] 7803 	mov	@r0,a
      002B97 18               [12] 7804 	dec	r0
      002B98 E6               [12] 7805 	mov	a,@r0
      002B99 13               [12] 7806 	rrc	a
      002B9A F6               [12] 7807 	mov	@r0,a
      002B9B E5*00            [12] 7808 	mov	a,_bp
      002B9D 24 0B            [12] 7809 	add	a,#0x0b
      002B9F F8               [12] 7810 	mov	r0,a
      002BA0 E6               [12] 7811 	mov	a,@r0
      002BA1 08               [12] 7812 	inc	r0
      002BA2 46               [12] 7813 	orl	a,@r0
      002BA3 08               [12] 7814 	inc	r0
      002BA4 46               [12] 7815 	orl	a,@r0
      002BA5 08               [12] 7816 	inc	r0
      002BA6 46               [12] 7817 	orl	a,@r0
      002BA7 70 9F            [24] 7818 	jnz	00103$
                                   7819 ;	calc.c:393: printf(", acc_valid = %d\r\n", (int)ctx->acc_valid);
      002BA9 E5*00            [12] 7820 	mov	a,_bp
      002BAB 24 04            [12] 7821 	add	a,#0x04
      002BAD F8               [12] 7822 	mov	r0,a
      002BAE 74 06            [12] 7823 	mov	a,#0x06
      002BB0 26               [12] 7824 	add	a,@r0
      002BB1 FD               [12] 7825 	mov	r5,a
      002BB2 E4               [12] 7826 	clr	a
      002BB3 08               [12] 7827 	inc	r0
      002BB4 36               [12] 7828 	addc	a,@r0
      002BB5 FE               [12] 7829 	mov	r6,a
      002BB6 08               [12] 7830 	inc	r0
      002BB7 86 07            [24] 7831 	mov	ar7,@r0
      002BB9 8D 82            [24] 7832 	mov	dpl,r5
      002BBB 8E 83            [24] 7833 	mov	dph,r6
      002BBD 8F F0            [24] 7834 	mov	b,r7
      002BBF 12r00r00         [24] 7835 	lcall	__gptrget
      002BC2 FD               [12] 7836 	mov	r5,a
      002BC3 7F 00            [12] 7837 	mov	r7,#0x00
      002BC5 C0 05            [24] 7838 	push	ar5
      002BC7 C0 07            [24] 7839 	push	ar7
      002BC9 74rCA            [12] 7840 	mov	a,#___str_15
      002BCB C0 E0            [24] 7841 	push	acc
      002BCD 74s00            [12] 7842 	mov	a,#(___str_15 >> 8)
      002BCF C0 E0            [24] 7843 	push	acc
      002BD1 74 80            [12] 7844 	mov	a,#0x80
      002BD3 C0 E0            [24] 7845 	push	acc
      002BD5 12r00r00         [24] 7846 	lcall	_printf
      002BD8 E5 81            [12] 7847 	mov	a,sp
      002BDA 24 FB            [12] 7848 	add	a,#0xfb
      002BDC F5 81            [12] 7849 	mov	sp,a
                                   7850 ;	calc.c:394: printf("primary = %p, secondary = %p\r\n", ctx->ps, ctx->ss);
      002BDE E5*00            [12] 7851 	mov	a,_bp
      002BE0 24 04            [12] 7852 	add	a,#0x04
      002BE2 F8               [12] 7853 	mov	r0,a
      002BE3 74 14            [12] 7854 	mov	a,#0x14
      002BE5 26               [12] 7855 	add	a,@r0
      002BE6 FD               [12] 7856 	mov	r5,a
      002BE7 74 40            [12] 7857 	mov	a,#0x40
      002BE9 08               [12] 7858 	inc	r0
      002BEA 36               [12] 7859 	addc	a,@r0
      002BEB FE               [12] 7860 	mov	r6,a
      002BEC 08               [12] 7861 	inc	r0
      002BED 86 07            [24] 7862 	mov	ar7,@r0
      002BEF 8D 82            [24] 7863 	mov	dpl,r5
      002BF1 8E 83            [24] 7864 	mov	dph,r6
      002BF3 8F F0            [24] 7865 	mov	b,r7
      002BF5 12r00r00         [24] 7866 	lcall	__gptrget
      002BF8 FD               [12] 7867 	mov	r5,a
      002BF9 A3               [24] 7868 	inc	dptr
      002BFA 12r00r00         [24] 7869 	lcall	__gptrget
      002BFD FE               [12] 7870 	mov	r6,a
      002BFE A3               [24] 7871 	inc	dptr
      002BFF 12r00r00         [24] 7872 	lcall	__gptrget
      002C02 FF               [12] 7873 	mov	r7,a
      002C03 E5*00            [12] 7874 	mov	a,_bp
      002C05 24 04            [12] 7875 	add	a,#0x04
      002C07 F8               [12] 7876 	mov	r0,a
      002C08 74 11            [12] 7877 	mov	a,#0x11
      002C0A 26               [12] 7878 	add	a,@r0
      002C0B FA               [12] 7879 	mov	r2,a
      002C0C 74 40            [12] 7880 	mov	a,#0x40
      002C0E 08               [12] 7881 	inc	r0
      002C0F 36               [12] 7882 	addc	a,@r0
      002C10 FB               [12] 7883 	mov	r3,a
      002C11 08               [12] 7884 	inc	r0
      002C12 86 04            [24] 7885 	mov	ar4,@r0
      002C14 8A 82            [24] 7886 	mov	dpl,r2
      002C16 8B 83            [24] 7887 	mov	dph,r3
      002C18 8C F0            [24] 7888 	mov	b,r4
      002C1A 12r00r00         [24] 7889 	lcall	__gptrget
      002C1D FA               [12] 7890 	mov	r2,a
      002C1E A3               [24] 7891 	inc	dptr
      002C1F 12r00r00         [24] 7892 	lcall	__gptrget
      002C22 FB               [12] 7893 	mov	r3,a
      002C23 A3               [24] 7894 	inc	dptr
      002C24 12r00r00         [24] 7895 	lcall	__gptrget
      002C27 FC               [12] 7896 	mov	r4,a
      002C28 C0 05            [24] 7897 	push	ar5
      002C2A C0 06            [24] 7898 	push	ar6
      002C2C C0 07            [24] 7899 	push	ar7
      002C2E C0 02            [24] 7900 	push	ar2
      002C30 C0 03            [24] 7901 	push	ar3
      002C32 C0 04            [24] 7902 	push	ar4
      002C34 74rDD            [12] 7903 	mov	a,#___str_16
      002C36 C0 E0            [24] 7904 	push	acc
      002C38 74s00            [12] 7905 	mov	a,#(___str_16 >> 8)
      002C3A C0 E0            [24] 7906 	push	acc
      002C3C 74 80            [12] 7907 	mov	a,#0x80
      002C3E C0 E0            [24] 7908 	push	acc
      002C40 12r00r00         [24] 7909 	lcall	_printf
      002C43 E5 81            [12] 7910 	mov	a,sp
      002C45 24 F7            [12] 7911 	add	a,#0xf7
      002C47 F5 81            [12] 7912 	mov	sp,a
                                   7913 ;	calc.c:396: return 1;
      002C49 90 00 01         [24] 7914 	mov	dptr,#0x0001
                                   7915 ;	calc.c:397: }
      002C4C 85*00 81         [24] 7916 	mov	sp,_bp
      002C4F D0*00            [24] 7917 	pop	_bp
      002C51 22               [24] 7918 	ret
                                   7919 ;------------------------------------------------------------
                                   7920 ;Allocation info for local variables in function 'help'
                                   7921 ;------------------------------------------------------------
                                   7922 ;delta                     Allocated to stack - _bp -5
                                   7923 ;_ctx                      Allocated to registers 
                                   7924 ;__1310720121              Allocated to registers 
                                   7925 ;s                         Allocated to registers r5 r6 r7 
                                   7926 ;__1310720123              Allocated to registers 
                                   7927 ;s                         Allocated to registers r5 r6 r7 
                                   7928 ;__1310720125              Allocated to registers 
                                   7929 ;s                         Allocated to registers r5 r6 r7 
                                   7930 ;__1310720127              Allocated to registers 
                                   7931 ;s                         Allocated to registers r5 r6 r7 
                                   7932 ;__1310720129              Allocated to registers 
                                   7933 ;s                         Allocated to registers r5 r6 r7 
                                   7934 ;__1310720131              Allocated to registers 
                                   7935 ;s                         Allocated to registers r5 r6 r7 
                                   7936 ;__1310720133              Allocated to registers 
                                   7937 ;s                         Allocated to registers r5 r6 r7 
                                   7938 ;__1310720135              Allocated to registers 
                                   7939 ;s                         Allocated to registers r5 r6 r7 
                                   7940 ;__1310720137              Allocated to registers 
                                   7941 ;s                         Allocated to registers r5 r6 r7 
                                   7942 ;__1310720139              Allocated to registers 
                                   7943 ;s                         Allocated to registers r5 r6 r7 
                                   7944 ;__1310720141              Allocated to registers 
                                   7945 ;s                         Allocated to registers r5 r6 r7 
                                   7946 ;__1310720143              Allocated to registers 
                                   7947 ;s                         Allocated to registers r5 r6 r7 
                                   7948 ;__1310720145              Allocated to registers 
                                   7949 ;s                         Allocated to registers r5 r6 r7 
                                   7950 ;__1310720147              Allocated to registers 
                                   7951 ;s                         Allocated to registers r5 r6 r7 
                                   7952 ;__1310720149              Allocated to registers 
                                   7953 ;s                         Allocated to registers r5 r6 r7 
                                   7954 ;__1310720151              Allocated to registers 
                                   7955 ;s                         Allocated to registers r5 r6 r7 
                                   7956 ;__1310720153              Allocated to registers 
                                   7957 ;s                         Allocated to registers r5 r6 r7 
                                   7958 ;__1310720155              Allocated to registers 
                                   7959 ;s                         Allocated to registers r5 r6 r7 
                                   7960 ;__1310720157              Allocated to registers 
                                   7961 ;s                         Allocated to registers r5 r6 r7 
                                   7962 ;__1310720159              Allocated to registers 
                                   7963 ;s                         Allocated to registers r5 r6 r7 
                                   7964 ;__1310720161              Allocated to registers 
                                   7965 ;s                         Allocated to registers r5 r6 r7 
                                   7966 ;__1310720163              Allocated to registers 
                                   7967 ;s                         Allocated to registers r5 r6 r7 
                                   7968 ;__1310720165              Allocated to registers 
                                   7969 ;s                         Allocated to registers r5 r6 r7 
                                   7970 ;__1310720167              Allocated to registers 
                                   7971 ;s                         Allocated to registers r5 r6 r7 
                                   7972 ;__1310720169              Allocated to registers 
                                   7973 ;s                         Allocated to registers r5 r6 r7 
                                   7974 ;__1310720171              Allocated to registers 
                                   7975 ;s                         Allocated to registers r5 r6 r7 
                                   7976 ;__1310720173              Allocated to registers 
                                   7977 ;s                         Allocated to registers r5 r6 r7 
                                   7978 ;__1310720175              Allocated to registers 
                                   7979 ;s                         Allocated to registers r5 r6 r7 
                                   7980 ;__1310720177              Allocated to registers 
                                   7981 ;s                         Allocated to registers r5 r6 r7 
                                   7982 ;__1310720179              Allocated to registers 
                                   7983 ;s                         Allocated to registers r5 r6 r7 
                                   7984 ;------------------------------------------------------------
                                   7985 ;	calc.c:399: static int help(void *_ctx, delta_t *delta) __reentrant {
                                   7986 ;	-----------------------------------------
                                   7987 ;	 function help
                                   7988 ;	-----------------------------------------
      002C52                       7989 _help:
      002C52 C0*00            [24] 7990 	push	_bp
      002C54 85 81*00         [24] 7991 	mov	_bp,sp
                                   7992 ;	calc.c:403: printstr("\r\nHhOo\tbase 16 10 8 2\r\n");
      002C57 7DrFC            [12] 7993 	mov	r5,#___str_17
      002C59 7Es00            [12] 7994 	mov	r6,#(___str_17 >> 8)
      002C5B 7F 80            [12] 7995 	mov	r7,#0x80
                                   7996 ;	calc.c:51: return;
      002C5D                       7997 00162$:
                                   7998 ;	calc.c:49: for (; *s; s++) putchar(*s);
      002C5D 8D 82            [24] 7999 	mov	dpl,r5
      002C5F 8E 83            [24] 8000 	mov	dph,r6
      002C61 8F F0            [24] 8001 	mov	b,r7
      002C63 12r00r00         [24] 8002 	lcall	__gptrget
      002C66 FC               [12] 8003 	mov	r4,a
      002C67 60 10            [24] 8004 	jz	00102$
      002C69 7B 00            [12] 8005 	mov	r3,#0x00
      002C6B 8C 82            [24] 8006 	mov	dpl,r4
      002C6D 8B 83            [24] 8007 	mov	dph,r3
      002C6F 12r00r00         [24] 8008 	lcall	_putchar
      002C72 0D               [12] 8009 	inc	r5
                                   8010 ;	calc.c:403: printstr("\r\nHhOo\tbase 16 10 8 2\r\n");
      002C73 BD 00 E7         [24] 8011 	cjne	r5,#0x00,00162$
      002C76 0E               [12] 8012 	inc	r6
      002C77 80 E4            [24] 8013 	sjmp	00162$
      002C79                       8014 00102$:
                                   8015 ;	calc.c:404: printstr("p\tpeek top\r\n");
      002C79 7Dr14            [12] 8016 	mov	r5,#___str_18
      002C7B 7Es01            [12] 8017 	mov	r6,#(___str_18 >> 8)
      002C7D 7F 80            [12] 8018 	mov	r7,#0x80
                                   8019 ;	calc.c:51: return;
      002C7F                       8020 00165$:
                                   8021 ;	calc.c:49: for (; *s; s++) putchar(*s);
      002C7F 8D 82            [24] 8022 	mov	dpl,r5
      002C81 8E 83            [24] 8023 	mov	dph,r6
      002C83 8F F0            [24] 8024 	mov	b,r7
      002C85 12r00r00         [24] 8025 	lcall	__gptrget
      002C88 FC               [12] 8026 	mov	r4,a
      002C89 60 10            [24] 8027 	jz	00104$
      002C8B 7B 00            [12] 8028 	mov	r3,#0x00
      002C8D 8C 82            [24] 8029 	mov	dpl,r4
      002C8F 8B 83            [24] 8030 	mov	dph,r3
      002C91 12r00r00         [24] 8031 	lcall	_putchar
      002C94 0D               [12] 8032 	inc	r5
                                   8033 ;	calc.c:404: printstr("p\tpeek top\r\n");
      002C95 BD 00 E7         [24] 8034 	cjne	r5,#0x00,00165$
      002C98 0E               [12] 8035 	inc	r6
      002C99 80 E4            [24] 8036 	sjmp	00165$
      002C9B                       8037 00104$:
                                   8038 ;	calc.c:405: printstr("P\tprint stack\r\n");
      002C9B 7Dr21            [12] 8039 	mov	r5,#___str_19
      002C9D 7Es01            [12] 8040 	mov	r6,#(___str_19 >> 8)
      002C9F 7F 80            [12] 8041 	mov	r7,#0x80
                                   8042 ;	calc.c:51: return;
      002CA1                       8043 00168$:
                                   8044 ;	calc.c:49: for (; *s; s++) putchar(*s);
      002CA1 8D 82            [24] 8045 	mov	dpl,r5
      002CA3 8E 83            [24] 8046 	mov	dph,r6
      002CA5 8F F0            [24] 8047 	mov	b,r7
      002CA7 12r00r00         [24] 8048 	lcall	__gptrget
      002CAA FC               [12] 8049 	mov	r4,a
      002CAB 60 10            [24] 8050 	jz	00106$
      002CAD 7B 00            [12] 8051 	mov	r3,#0x00
      002CAF 8C 82            [24] 8052 	mov	dpl,r4
      002CB1 8B 83            [24] 8053 	mov	dph,r3
      002CB3 12r00r00         [24] 8054 	lcall	_putchar
      002CB6 0D               [12] 8055 	inc	r5
                                   8056 ;	calc.c:405: printstr("P\tprint stack\r\n");
      002CB7 BD 00 E7         [24] 8057 	cjne	r5,#0x00,00168$
      002CBA 0E               [12] 8058 	inc	r6
      002CBB 80 E4            [24] 8059 	sjmp	00168$
      002CBD                       8060 00106$:
                                   8061 ;	calc.c:406: printstr("v.\tpop top\r\n");
      002CBD 7Dr31            [12] 8062 	mov	r5,#___str_20
      002CBF 7Es01            [12] 8063 	mov	r6,#(___str_20 >> 8)
      002CC1 7F 80            [12] 8064 	mov	r7,#0x80
                                   8065 ;	calc.c:51: return;
      002CC3                       8066 00171$:
                                   8067 ;	calc.c:49: for (; *s; s++) putchar(*s);
      002CC3 8D 82            [24] 8068 	mov	dpl,r5
      002CC5 8E 83            [24] 8069 	mov	dph,r6
      002CC7 8F F0            [24] 8070 	mov	b,r7
      002CC9 12r00r00         [24] 8071 	lcall	__gptrget
      002CCC FC               [12] 8072 	mov	r4,a
      002CCD 60 10            [24] 8073 	jz	00108$
      002CCF 7B 00            [12] 8074 	mov	r3,#0x00
      002CD1 8C 82            [24] 8075 	mov	dpl,r4
      002CD3 8B 83            [24] 8076 	mov	dph,r3
      002CD5 12r00r00         [24] 8077 	lcall	_putchar
      002CD8 0D               [12] 8078 	inc	r5
                                   8079 ;	calc.c:406: printstr("v.\tpop top\r\n");
      002CD9 BD 00 E7         [24] 8080 	cjne	r5,#0x00,00171$
      002CDC 0E               [12] 8081 	inc	r6
      002CDD 80 E4            [24] 8082 	sjmp	00171$
      002CDF                       8083 00108$:
                                   8084 ;	calc.c:407: printstr("V\tpop all\r\n");
      002CDF 7Dr3E            [12] 8085 	mov	r5,#___str_21
      002CE1 7Es01            [12] 8086 	mov	r6,#(___str_21 >> 8)
      002CE3 7F 80            [12] 8087 	mov	r7,#0x80
                                   8088 ;	calc.c:51: return;
      002CE5                       8089 00174$:
                                   8090 ;	calc.c:49: for (; *s; s++) putchar(*s);
      002CE5 8D 82            [24] 8091 	mov	dpl,r5
      002CE7 8E 83            [24] 8092 	mov	dph,r6
      002CE9 8F F0            [24] 8093 	mov	b,r7
      002CEB 12r00r00         [24] 8094 	lcall	__gptrget
      002CEE FC               [12] 8095 	mov	r4,a
      002CEF 60 10            [24] 8096 	jz	00110$
      002CF1 7B 00            [12] 8097 	mov	r3,#0x00
      002CF3 8C 82            [24] 8098 	mov	dpl,r4
      002CF5 8B 83            [24] 8099 	mov	dph,r3
      002CF7 12r00r00         [24] 8100 	lcall	_putchar
      002CFA 0D               [12] 8101 	inc	r5
                                   8102 ;	calc.c:407: printstr("V\tpop all\r\n");
      002CFB BD 00 E7         [24] 8103 	cjne	r5,#0x00,00174$
      002CFE 0E               [12] 8104 	inc	r6
      002CFF 80 E4            [24] 8105 	sjmp	00174$
      002D01                       8106 00110$:
                                   8107 ;	calc.c:408: printstr("i\treset acc\r\n");
      002D01 7Dr4A            [12] 8108 	mov	r5,#___str_22
      002D03 7Es01            [12] 8109 	mov	r6,#(___str_22 >> 8)
      002D05 7F 80            [12] 8110 	mov	r7,#0x80
                                   8111 ;	calc.c:51: return;
      002D07                       8112 00177$:
                                   8113 ;	calc.c:49: for (; *s; s++) putchar(*s);
      002D07 8D 82            [24] 8114 	mov	dpl,r5
      002D09 8E 83            [24] 8115 	mov	dph,r6
      002D0B 8F F0            [24] 8116 	mov	b,r7
      002D0D 12r00r00         [24] 8117 	lcall	__gptrget
      002D10 FC               [12] 8118 	mov	r4,a
      002D11 60 10            [24] 8119 	jz	00112$
      002D13 7B 00            [12] 8120 	mov	r3,#0x00
      002D15 8C 82            [24] 8121 	mov	dpl,r4
      002D17 8B 83            [24] 8122 	mov	dph,r3
      002D19 12r00r00         [24] 8123 	lcall	_putchar
      002D1C 0D               [12] 8124 	inc	r5
                                   8125 ;	calc.c:408: printstr("i\treset acc\r\n");
      002D1D BD 00 E7         [24] 8126 	cjne	r5,#0x00,00177$
      002D20 0E               [12] 8127 	inc	r6
      002D21 80 E4            [24] 8128 	sjmp	00177$
      002D23                       8129 00112$:
                                   8130 ;	calc.c:409: printstr("I\treset and discard acc\r\n");
      002D23 7Dr58            [12] 8131 	mov	r5,#___str_23
      002D25 7Es01            [12] 8132 	mov	r6,#(___str_23 >> 8)
      002D27 7F 80            [12] 8133 	mov	r7,#0x80
                                   8134 ;	calc.c:51: return;
      002D29                       8135 00180$:
                                   8136 ;	calc.c:49: for (; *s; s++) putchar(*s);
      002D29 8D 82            [24] 8137 	mov	dpl,r5
      002D2B 8E 83            [24] 8138 	mov	dph,r6
      002D2D 8F F0            [24] 8139 	mov	b,r7
      002D2F 12r00r00         [24] 8140 	lcall	__gptrget
      002D32 FC               [12] 8141 	mov	r4,a
      002D33 60 10            [24] 8142 	jz	00114$
      002D35 7B 00            [12] 8143 	mov	r3,#0x00
      002D37 8C 82            [24] 8144 	mov	dpl,r4
      002D39 8B 83            [24] 8145 	mov	dph,r3
      002D3B 12r00r00         [24] 8146 	lcall	_putchar
      002D3E 0D               [12] 8147 	inc	r5
                                   8148 ;	calc.c:409: printstr("I\treset and discard acc\r\n");
      002D3F BD 00 E7         [24] 8149 	cjne	r5,#0x00,00180$
      002D42 0E               [12] 8150 	inc	r6
      002D43 80 E4            [24] 8151 	sjmp	00180$
      002D45                       8152 00114$:
                                   8153 ;	calc.c:410: printstr("x\texchange top 2\r\n");
      002D45 7Dr72            [12] 8154 	mov	r5,#___str_24
      002D47 7Es01            [12] 8155 	mov	r6,#(___str_24 >> 8)
      002D49 7F 80            [12] 8156 	mov	r7,#0x80
                                   8157 ;	calc.c:51: return;
      002D4B                       8158 00183$:
                                   8159 ;	calc.c:49: for (; *s; s++) putchar(*s);
      002D4B 8D 82            [24] 8160 	mov	dpl,r5
      002D4D 8E 83            [24] 8161 	mov	dph,r6
      002D4F 8F F0            [24] 8162 	mov	b,r7
      002D51 12r00r00         [24] 8163 	lcall	__gptrget
      002D54 FC               [12] 8164 	mov	r4,a
      002D55 60 10            [24] 8165 	jz	00116$
      002D57 7B 00            [12] 8166 	mov	r3,#0x00
      002D59 8C 82            [24] 8167 	mov	dpl,r4
      002D5B 8B 83            [24] 8168 	mov	dph,r3
      002D5D 12r00r00         [24] 8169 	lcall	_putchar
      002D60 0D               [12] 8170 	inc	r5
                                   8171 ;	calc.c:410: printstr("x\texchange top 2\r\n");
      002D61 BD 00 E7         [24] 8172 	cjne	r5,#0x00,00183$
      002D64 0E               [12] 8173 	inc	r6
      002D65 80 E4            [24] 8174 	sjmp	00183$
      002D67                       8175 00116$:
                                   8176 ;	calc.c:411: printstr("X\texchange stacks primary <-> secondary\r\n");
      002D67 7Dr85            [12] 8177 	mov	r5,#___str_25
      002D69 7Es01            [12] 8178 	mov	r6,#(___str_25 >> 8)
      002D6B 7F 80            [12] 8179 	mov	r7,#0x80
                                   8180 ;	calc.c:51: return;
      002D6D                       8181 00186$:
                                   8182 ;	calc.c:49: for (; *s; s++) putchar(*s);
      002D6D 8D 82            [24] 8183 	mov	dpl,r5
      002D6F 8E 83            [24] 8184 	mov	dph,r6
      002D71 8F F0            [24] 8185 	mov	b,r7
      002D73 12r00r00         [24] 8186 	lcall	__gptrget
      002D76 FC               [12] 8187 	mov	r4,a
      002D77 60 10            [24] 8188 	jz	00118$
      002D79 7B 00            [12] 8189 	mov	r3,#0x00
      002D7B 8C 82            [24] 8190 	mov	dpl,r4
      002D7D 8B 83            [24] 8191 	mov	dph,r3
      002D7F 12r00r00         [24] 8192 	lcall	_putchar
      002D82 0D               [12] 8193 	inc	r5
                                   8194 ;	calc.c:411: printstr("X\texchange stacks primary <-> secondary\r\n");
      002D83 BD 00 E7         [24] 8195 	cjne	r5,#0x00,00186$
      002D86 0E               [12] 8196 	inc	r6
      002D87 80 E4            [24] 8197 	sjmp	00186$
      002D89                       8198 00118$:
                                   8199 ;	calc.c:412: printstr("T\texchange tops primary <-> secondary\r\n");
      002D89 7DrAF            [12] 8200 	mov	r5,#___str_26
      002D8B 7Es01            [12] 8201 	mov	r6,#(___str_26 >> 8)
      002D8D 7F 80            [12] 8202 	mov	r7,#0x80
                                   8203 ;	calc.c:51: return;
      002D8F                       8204 00189$:
                                   8205 ;	calc.c:49: for (; *s; s++) putchar(*s);
      002D8F 8D 82            [24] 8206 	mov	dpl,r5
      002D91 8E 83            [24] 8207 	mov	dph,r6
      002D93 8F F0            [24] 8208 	mov	b,r7
      002D95 12r00r00         [24] 8209 	lcall	__gptrget
      002D98 FC               [12] 8210 	mov	r4,a
      002D99 60 10            [24] 8211 	jz	00120$
      002D9B 7B 00            [12] 8212 	mov	r3,#0x00
      002D9D 8C 82            [24] 8213 	mov	dpl,r4
      002D9F 8B 83            [24] 8214 	mov	dph,r3
      002DA1 12r00r00         [24] 8215 	lcall	_putchar
      002DA4 0D               [12] 8216 	inc	r5
                                   8217 ;	calc.c:412: printstr("T\texchange tops primary <-> secondary\r\n");
      002DA5 BD 00 E7         [24] 8218 	cjne	r5,#0x00,00189$
      002DA8 0E               [12] 8219 	inc	r6
      002DA9 80 E4            [24] 8220 	sjmp	00189$
      002DAB                       8221 00120$:
                                   8222 ;	calc.c:413: printstr("U\tcopy top secondary -> primary\r\n");
      002DAB 7DrD7            [12] 8223 	mov	r5,#___str_27
      002DAD 7Es01            [12] 8224 	mov	r6,#(___str_27 >> 8)
      002DAF 7F 80            [12] 8225 	mov	r7,#0x80
                                   8226 ;	calc.c:51: return;
      002DB1                       8227 00192$:
                                   8228 ;	calc.c:49: for (; *s; s++) putchar(*s);
      002DB1 8D 82            [24] 8229 	mov	dpl,r5
      002DB3 8E 83            [24] 8230 	mov	dph,r6
      002DB5 8F F0            [24] 8231 	mov	b,r7
      002DB7 12r00r00         [24] 8232 	lcall	__gptrget
      002DBA FC               [12] 8233 	mov	r4,a
      002DBB 60 10            [24] 8234 	jz	00122$
      002DBD 7B 00            [12] 8235 	mov	r3,#0x00
      002DBF 8C 82            [24] 8236 	mov	dpl,r4
      002DC1 8B 83            [24] 8237 	mov	dph,r3
      002DC3 12r00r00         [24] 8238 	lcall	_putchar
      002DC6 0D               [12] 8239 	inc	r5
                                   8240 ;	calc.c:413: printstr("U\tcopy top secondary -> primary\r\n");
      002DC7 BD 00 E7         [24] 8241 	cjne	r5,#0x00,00192$
      002DCA 0E               [12] 8242 	inc	r6
      002DCB 80 E4            [24] 8243 	sjmp	00192$
      002DCD                       8244 00122$:
                                   8245 ;	calc.c:414: printstr("u\tcopy top primary -> secondary\r\n");
      002DCD 7DrF9            [12] 8246 	mov	r5,#___str_28
      002DCF 7Es01            [12] 8247 	mov	r6,#(___str_28 >> 8)
      002DD1 7F 80            [12] 8248 	mov	r7,#0x80
                                   8249 ;	calc.c:51: return;
      002DD3                       8250 00195$:
                                   8251 ;	calc.c:49: for (; *s; s++) putchar(*s);
      002DD3 8D 82            [24] 8252 	mov	dpl,r5
      002DD5 8E 83            [24] 8253 	mov	dph,r6
      002DD7 8F F0            [24] 8254 	mov	b,r7
      002DD9 12r00r00         [24] 8255 	lcall	__gptrget
      002DDC FC               [12] 8256 	mov	r4,a
      002DDD 60 10            [24] 8257 	jz	00124$
      002DDF 7B 00            [12] 8258 	mov	r3,#0x00
      002DE1 8C 82            [24] 8259 	mov	dpl,r4
      002DE3 8B 83            [24] 8260 	mov	dph,r3
      002DE5 12r00r00         [24] 8261 	lcall	_putchar
      002DE8 0D               [12] 8262 	inc	r5
                                   8263 ;	calc.c:414: printstr("u\tcopy top primary -> secondary\r\n");
      002DE9 BD 00 E7         [24] 8264 	cjne	r5,#0x00,00195$
      002DEC 0E               [12] 8265 	inc	r6
      002DED 80 E4            [24] 8266 	sjmp	00195$
      002DEF                       8267 00124$:
                                   8268 ;	calc.c:415: printstr("M\tmove top secondary -> primary\r\n");
      002DEF 7Dr1B            [12] 8269 	mov	r5,#___str_29
      002DF1 7Es02            [12] 8270 	mov	r6,#(___str_29 >> 8)
      002DF3 7F 80            [12] 8271 	mov	r7,#0x80
                                   8272 ;	calc.c:51: return;
      002DF5                       8273 00198$:
                                   8274 ;	calc.c:49: for (; *s; s++) putchar(*s);
      002DF5 8D 82            [24] 8275 	mov	dpl,r5
      002DF7 8E 83            [24] 8276 	mov	dph,r6
      002DF9 8F F0            [24] 8277 	mov	b,r7
      002DFB 12r00r00         [24] 8278 	lcall	__gptrget
      002DFE FC               [12] 8279 	mov	r4,a
      002DFF 60 10            [24] 8280 	jz	00126$
      002E01 7B 00            [12] 8281 	mov	r3,#0x00
      002E03 8C 82            [24] 8282 	mov	dpl,r4
      002E05 8B 83            [24] 8283 	mov	dph,r3
      002E07 12r00r00         [24] 8284 	lcall	_putchar
      002E0A 0D               [12] 8285 	inc	r5
                                   8286 ;	calc.c:415: printstr("M\tmove top secondary -> primary\r\n");
      002E0B BD 00 E7         [24] 8287 	cjne	r5,#0x00,00198$
      002E0E 0E               [12] 8288 	inc	r6
      002E0F 80 E4            [24] 8289 	sjmp	00198$
      002E11                       8290 00126$:
                                   8291 ;	calc.c:416: printstr("m\tmove top primary -> secondary\r\n");
      002E11 7Dr3D            [12] 8292 	mov	r5,#___str_30
      002E13 7Es02            [12] 8293 	mov	r6,#(___str_30 >> 8)
      002E15 7F 80            [12] 8294 	mov	r7,#0x80
                                   8295 ;	calc.c:51: return;
      002E17                       8296 00201$:
                                   8297 ;	calc.c:49: for (; *s; s++) putchar(*s);
      002E17 8D 82            [24] 8298 	mov	dpl,r5
      002E19 8E 83            [24] 8299 	mov	dph,r6
      002E1B 8F F0            [24] 8300 	mov	b,r7
      002E1D 12r00r00         [24] 8301 	lcall	__gptrget
      002E20 FC               [12] 8302 	mov	r4,a
      002E21 60 10            [24] 8303 	jz	00128$
      002E23 7B 00            [12] 8304 	mov	r3,#0x00
      002E25 8C 82            [24] 8305 	mov	dpl,r4
      002E27 8B 83            [24] 8306 	mov	dph,r3
      002E29 12r00r00         [24] 8307 	lcall	_putchar
      002E2C 0D               [12] 8308 	inc	r5
                                   8309 ;	calc.c:416: printstr("m\tmove top primary -> secondary\r\n");
      002E2D BD 00 E7         [24] 8310 	cjne	r5,#0x00,00201$
      002E30 0E               [12] 8311 	inc	r6
      002E31 80 E4            [24] 8312 	sjmp	00201$
      002E33                       8313 00128$:
                                   8314 ;	calc.c:417: printstr("+\tadd top 2\r\n");
      002E33 7Dr5F            [12] 8315 	mov	r5,#___str_31
      002E35 7Es02            [12] 8316 	mov	r6,#(___str_31 >> 8)
      002E37 7F 80            [12] 8317 	mov	r7,#0x80
                                   8318 ;	calc.c:51: return;
      002E39                       8319 00204$:
                                   8320 ;	calc.c:49: for (; *s; s++) putchar(*s);
      002E39 8D 82            [24] 8321 	mov	dpl,r5
      002E3B 8E 83            [24] 8322 	mov	dph,r6
      002E3D 8F F0            [24] 8323 	mov	b,r7
      002E3F 12r00r00         [24] 8324 	lcall	__gptrget
      002E42 FC               [12] 8325 	mov	r4,a
      002E43 60 10            [24] 8326 	jz	00130$
      002E45 7B 00            [12] 8327 	mov	r3,#0x00
      002E47 8C 82            [24] 8328 	mov	dpl,r4
      002E49 8B 83            [24] 8329 	mov	dph,r3
      002E4B 12r00r00         [24] 8330 	lcall	_putchar
      002E4E 0D               [12] 8331 	inc	r5
                                   8332 ;	calc.c:417: printstr("+\tadd top 2\r\n");
      002E4F BD 00 E7         [24] 8333 	cjne	r5,#0x00,00204$
      002E52 0E               [12] 8334 	inc	r6
      002E53 80 E4            [24] 8335 	sjmp	00204$
      002E55                       8336 00130$:
                                   8337 ;	calc.c:418: printstr("-\tsubtract top 2\r\n");
      002E55 7Dr6D            [12] 8338 	mov	r5,#___str_32
      002E57 7Es02            [12] 8339 	mov	r6,#(___str_32 >> 8)
      002E59 7F 80            [12] 8340 	mov	r7,#0x80
                                   8341 ;	calc.c:51: return;
      002E5B                       8342 00207$:
                                   8343 ;	calc.c:49: for (; *s; s++) putchar(*s);
      002E5B 8D 82            [24] 8344 	mov	dpl,r5
      002E5D 8E 83            [24] 8345 	mov	dph,r6
      002E5F 8F F0            [24] 8346 	mov	b,r7
      002E61 12r00r00         [24] 8347 	lcall	__gptrget
      002E64 FC               [12] 8348 	mov	r4,a
      002E65 60 10            [24] 8349 	jz	00132$
      002E67 7B 00            [12] 8350 	mov	r3,#0x00
      002E69 8C 82            [24] 8351 	mov	dpl,r4
      002E6B 8B 83            [24] 8352 	mov	dph,r3
      002E6D 12r00r00         [24] 8353 	lcall	_putchar
      002E70 0D               [12] 8354 	inc	r5
                                   8355 ;	calc.c:418: printstr("-\tsubtract top 2\r\n");
      002E71 BD 00 E7         [24] 8356 	cjne	r5,#0x00,00207$
      002E74 0E               [12] 8357 	inc	r6
      002E75 80 E4            [24] 8358 	sjmp	00207$
      002E77                       8359 00132$:
                                   8360 ;	calc.c:419: printstr("*\tmultiply top 2\r\n");
      002E77 7Dr80            [12] 8361 	mov	r5,#___str_33
      002E79 7Es02            [12] 8362 	mov	r6,#(___str_33 >> 8)
      002E7B 7F 80            [12] 8363 	mov	r7,#0x80
                                   8364 ;	calc.c:51: return;
      002E7D                       8365 00210$:
                                   8366 ;	calc.c:49: for (; *s; s++) putchar(*s);
      002E7D 8D 82            [24] 8367 	mov	dpl,r5
      002E7F 8E 83            [24] 8368 	mov	dph,r6
      002E81 8F F0            [24] 8369 	mov	b,r7
      002E83 12r00r00         [24] 8370 	lcall	__gptrget
      002E86 FC               [12] 8371 	mov	r4,a
      002E87 60 10            [24] 8372 	jz	00134$
      002E89 7B 00            [12] 8373 	mov	r3,#0x00
      002E8B 8C 82            [24] 8374 	mov	dpl,r4
      002E8D 8B 83            [24] 8375 	mov	dph,r3
      002E8F 12r00r00         [24] 8376 	lcall	_putchar
      002E92 0D               [12] 8377 	inc	r5
                                   8378 ;	calc.c:419: printstr("*\tmultiply top 2\r\n");
      002E93 BD 00 E7         [24] 8379 	cjne	r5,#0x00,00210$
      002E96 0E               [12] 8380 	inc	r6
      002E97 80 E4            [24] 8381 	sjmp	00210$
      002E99                       8382 00134$:
                                   8383 ;	calc.c:420: printstr("/\tdivide top 2\r\n");
      002E99 7Dr93            [12] 8384 	mov	r5,#___str_34
      002E9B 7Es02            [12] 8385 	mov	r6,#(___str_34 >> 8)
      002E9D 7F 80            [12] 8386 	mov	r7,#0x80
                                   8387 ;	calc.c:51: return;
      002E9F                       8388 00213$:
                                   8389 ;	calc.c:49: for (; *s; s++) putchar(*s);
      002E9F 8D 82            [24] 8390 	mov	dpl,r5
      002EA1 8E 83            [24] 8391 	mov	dph,r6
      002EA3 8F F0            [24] 8392 	mov	b,r7
      002EA5 12r00r00         [24] 8393 	lcall	__gptrget
      002EA8 FC               [12] 8394 	mov	r4,a
      002EA9 60 10            [24] 8395 	jz	00136$
      002EAB 7B 00            [12] 8396 	mov	r3,#0x00
      002EAD 8C 82            [24] 8397 	mov	dpl,r4
      002EAF 8B 83            [24] 8398 	mov	dph,r3
      002EB1 12r00r00         [24] 8399 	lcall	_putchar
      002EB4 0D               [12] 8400 	inc	r5
                                   8401 ;	calc.c:420: printstr("/\tdivide top 2\r\n");
      002EB5 BD 00 E7         [24] 8402 	cjne	r5,#0x00,00213$
      002EB8 0E               [12] 8403 	inc	r6
      002EB9 80 E4            [24] 8404 	sjmp	00213$
      002EBB                       8405 00136$:
                                   8406 ;	calc.c:421: printstr("\\\tdivide top 2 unsigned\r\n");	
      002EBB 7DrA4            [12] 8407 	mov	r5,#___str_35
      002EBD 7Es02            [12] 8408 	mov	r6,#(___str_35 >> 8)
      002EBF 7F 80            [12] 8409 	mov	r7,#0x80
                                   8410 ;	calc.c:51: return;
      002EC1                       8411 00216$:
                                   8412 ;	calc.c:49: for (; *s; s++) putchar(*s);
      002EC1 8D 82            [24] 8413 	mov	dpl,r5
      002EC3 8E 83            [24] 8414 	mov	dph,r6
      002EC5 8F F0            [24] 8415 	mov	b,r7
      002EC7 12r00r00         [24] 8416 	lcall	__gptrget
      002ECA FC               [12] 8417 	mov	r4,a
      002ECB 60 10            [24] 8418 	jz	00138$
      002ECD 7B 00            [12] 8419 	mov	r3,#0x00
      002ECF 8C 82            [24] 8420 	mov	dpl,r4
      002ED1 8B 83            [24] 8421 	mov	dph,r3
      002ED3 12r00r00         [24] 8422 	lcall	_putchar
      002ED6 0D               [12] 8423 	inc	r5
                                   8424 ;	calc.c:421: printstr("\\\tdivide top 2 unsigned\r\n");	
      002ED7 BD 00 E7         [24] 8425 	cjne	r5,#0x00,00216$
      002EDA 0E               [12] 8426 	inc	r6
      002EDB 80 E4            [24] 8427 	sjmp	00216$
      002EDD                       8428 00138$:
                                   8429 ;	calc.c:422: printstr("%\tmodulus top 2\r\n");
      002EDD 7DrBE            [12] 8430 	mov	r5,#___str_36
      002EDF 7Es02            [12] 8431 	mov	r6,#(___str_36 >> 8)
      002EE1 7F 80            [12] 8432 	mov	r7,#0x80
                                   8433 ;	calc.c:51: return;
      002EE3                       8434 00219$:
                                   8435 ;	calc.c:49: for (; *s; s++) putchar(*s);
      002EE3 8D 82            [24] 8436 	mov	dpl,r5
      002EE5 8E 83            [24] 8437 	mov	dph,r6
      002EE7 8F F0            [24] 8438 	mov	b,r7
      002EE9 12r00r00         [24] 8439 	lcall	__gptrget
      002EEC FC               [12] 8440 	mov	r4,a
      002EED 60 10            [24] 8441 	jz	00140$
      002EEF 7B 00            [12] 8442 	mov	r3,#0x00
      002EF1 8C 82            [24] 8443 	mov	dpl,r4
      002EF3 8B 83            [24] 8444 	mov	dph,r3
      002EF5 12r00r00         [24] 8445 	lcall	_putchar
      002EF8 0D               [12] 8446 	inc	r5
                                   8447 ;	calc.c:422: printstr("%\tmodulus top 2\r\n");
      002EF9 BD 00 E7         [24] 8448 	cjne	r5,#0x00,00219$
      002EFC 0E               [12] 8449 	inc	r6
      002EFD 80 E4            [24] 8450 	sjmp	00219$
      002EFF                       8451 00140$:
                                   8452 ;	calc.c:423: printstr("#\tmodulus top 2 unsigned\r\n");
      002EFF 7DrD0            [12] 8453 	mov	r5,#___str_37
      002F01 7Es02            [12] 8454 	mov	r6,#(___str_37 >> 8)
      002F03 7F 80            [12] 8455 	mov	r7,#0x80
                                   8456 ;	calc.c:51: return;
      002F05                       8457 00222$:
                                   8458 ;	calc.c:49: for (; *s; s++) putchar(*s);
      002F05 8D 82            [24] 8459 	mov	dpl,r5
      002F07 8E 83            [24] 8460 	mov	dph,r6
      002F09 8F F0            [24] 8461 	mov	b,r7
      002F0B 12r00r00         [24] 8462 	lcall	__gptrget
      002F0E FC               [12] 8463 	mov	r4,a
      002F0F 60 10            [24] 8464 	jz	00142$
      002F11 7B 00            [12] 8465 	mov	r3,#0x00
      002F13 8C 82            [24] 8466 	mov	dpl,r4
      002F15 8B 83            [24] 8467 	mov	dph,r3
      002F17 12r00r00         [24] 8468 	lcall	_putchar
      002F1A 0D               [12] 8469 	inc	r5
                                   8470 ;	calc.c:423: printstr("#\tmodulus top 2 unsigned\r\n");
      002F1B BD 00 E7         [24] 8471 	cjne	r5,#0x00,00222$
      002F1E 0E               [12] 8472 	inc	r6
      002F1F 80 E4            [24] 8473 	sjmp	00222$
      002F21                       8474 00142$:
                                   8475 ;	calc.c:424: printstr("&\tand top 2\r\n");
      002F21 7DrEB            [12] 8476 	mov	r5,#___str_38
      002F23 7Es02            [12] 8477 	mov	r6,#(___str_38 >> 8)
      002F25 7F 80            [12] 8478 	mov	r7,#0x80
                                   8479 ;	calc.c:51: return;
      002F27                       8480 00225$:
                                   8481 ;	calc.c:49: for (; *s; s++) putchar(*s);
      002F27 8D 82            [24] 8482 	mov	dpl,r5
      002F29 8E 83            [24] 8483 	mov	dph,r6
      002F2B 8F F0            [24] 8484 	mov	b,r7
      002F2D 12r00r00         [24] 8485 	lcall	__gptrget
      002F30 FC               [12] 8486 	mov	r4,a
      002F31 60 10            [24] 8487 	jz	00144$
      002F33 7B 00            [12] 8488 	mov	r3,#0x00
      002F35 8C 82            [24] 8489 	mov	dpl,r4
      002F37 8B 83            [24] 8490 	mov	dph,r3
      002F39 12r00r00         [24] 8491 	lcall	_putchar
      002F3C 0D               [12] 8492 	inc	r5
                                   8493 ;	calc.c:424: printstr("&\tand top 2\r\n");
      002F3D BD 00 E7         [24] 8494 	cjne	r5,#0x00,00225$
      002F40 0E               [12] 8495 	inc	r6
      002F41 80 E4            [24] 8496 	sjmp	00225$
      002F43                       8497 00144$:
                                   8498 ;	calc.c:425: printstr("|\tor top 2\r\n");
      002F43 7DrF9            [12] 8499 	mov	r5,#___str_39
      002F45 7Es02            [12] 8500 	mov	r6,#(___str_39 >> 8)
      002F47 7F 80            [12] 8501 	mov	r7,#0x80
                                   8502 ;	calc.c:51: return;
      002F49                       8503 00228$:
                                   8504 ;	calc.c:49: for (; *s; s++) putchar(*s);
      002F49 8D 82            [24] 8505 	mov	dpl,r5
      002F4B 8E 83            [24] 8506 	mov	dph,r6
      002F4D 8F F0            [24] 8507 	mov	b,r7
      002F4F 12r00r00         [24] 8508 	lcall	__gptrget
      002F52 FC               [12] 8509 	mov	r4,a
      002F53 60 10            [24] 8510 	jz	00146$
      002F55 7B 00            [12] 8511 	mov	r3,#0x00
      002F57 8C 82            [24] 8512 	mov	dpl,r4
      002F59 8B 83            [24] 8513 	mov	dph,r3
      002F5B 12r00r00         [24] 8514 	lcall	_putchar
      002F5E 0D               [12] 8515 	inc	r5
                                   8516 ;	calc.c:425: printstr("|\tor top 2\r\n");
      002F5F BD 00 E7         [24] 8517 	cjne	r5,#0x00,00228$
      002F62 0E               [12] 8518 	inc	r6
      002F63 80 E4            [24] 8519 	sjmp	00228$
      002F65                       8520 00146$:
                                   8521 ;	calc.c:426: printstr("^\txor top 2\r\n");
      002F65 7Dr06            [12] 8522 	mov	r5,#___str_40
      002F67 7Es03            [12] 8523 	mov	r6,#(___str_40 >> 8)
      002F69 7F 80            [12] 8524 	mov	r7,#0x80
                                   8525 ;	calc.c:51: return;
      002F6B                       8526 00231$:
                                   8527 ;	calc.c:49: for (; *s; s++) putchar(*s);
      002F6B 8D 82            [24] 8528 	mov	dpl,r5
      002F6D 8E 83            [24] 8529 	mov	dph,r6
      002F6F 8F F0            [24] 8530 	mov	b,r7
      002F71 12r00r00         [24] 8531 	lcall	__gptrget
      002F74 FC               [12] 8532 	mov	r4,a
      002F75 60 10            [24] 8533 	jz	00148$
      002F77 7B 00            [12] 8534 	mov	r3,#0x00
      002F79 8C 82            [24] 8535 	mov	dpl,r4
      002F7B 8B 83            [24] 8536 	mov	dph,r3
      002F7D 12r00r00         [24] 8537 	lcall	_putchar
      002F80 0D               [12] 8538 	inc	r5
                                   8539 ;	calc.c:426: printstr("^\txor top 2\r\n");
      002F81 BD 00 E7         [24] 8540 	cjne	r5,#0x00,00231$
      002F84 0E               [12] 8541 	inc	r6
      002F85 80 E4            [24] 8542 	sjmp	00231$
      002F87                       8543 00148$:
                                   8544 ;	calc.c:427: printstr(">\tshift right top 2\r\n");
      002F87 7Dr14            [12] 8545 	mov	r5,#___str_41
      002F89 7Es03            [12] 8546 	mov	r6,#(___str_41 >> 8)
      002F8B 7F 80            [12] 8547 	mov	r7,#0x80
                                   8548 ;	calc.c:51: return;
      002F8D                       8549 00234$:
                                   8550 ;	calc.c:49: for (; *s; s++) putchar(*s);
      002F8D 8D 82            [24] 8551 	mov	dpl,r5
      002F8F 8E 83            [24] 8552 	mov	dph,r6
      002F91 8F F0            [24] 8553 	mov	b,r7
      002F93 12r00r00         [24] 8554 	lcall	__gptrget
      002F96 FC               [12] 8555 	mov	r4,a
      002F97 60 10            [24] 8556 	jz	00150$
      002F99 7B 00            [12] 8557 	mov	r3,#0x00
      002F9B 8C 82            [24] 8558 	mov	dpl,r4
      002F9D 8B 83            [24] 8559 	mov	dph,r3
      002F9F 12r00r00         [24] 8560 	lcall	_putchar
      002FA2 0D               [12] 8561 	inc	r5
                                   8562 ;	calc.c:427: printstr(">\tshift right top 2\r\n");
      002FA3 BD 00 E7         [24] 8563 	cjne	r5,#0x00,00234$
      002FA6 0E               [12] 8564 	inc	r6
      002FA7 80 E4            [24] 8565 	sjmp	00234$
      002FA9                       8566 00150$:
                                   8567 ;	calc.c:428: printstr("]\tarithmetic shift right top 2\r\n");
      002FA9 7Dr2A            [12] 8568 	mov	r5,#___str_42
      002FAB 7Es03            [12] 8569 	mov	r6,#(___str_42 >> 8)
      002FAD 7F 80            [12] 8570 	mov	r7,#0x80
                                   8571 ;	calc.c:51: return;
      002FAF                       8572 00237$:
                                   8573 ;	calc.c:49: for (; *s; s++) putchar(*s);
      002FAF 8D 82            [24] 8574 	mov	dpl,r5
      002FB1 8E 83            [24] 8575 	mov	dph,r6
      002FB3 8F F0            [24] 8576 	mov	b,r7
      002FB5 12r00r00         [24] 8577 	lcall	__gptrget
      002FB8 FC               [12] 8578 	mov	r4,a
      002FB9 60 10            [24] 8579 	jz	00152$
      002FBB 7B 00            [12] 8580 	mov	r3,#0x00
      002FBD 8C 82            [24] 8581 	mov	dpl,r4
      002FBF 8B 83            [24] 8582 	mov	dph,r3
      002FC1 12r00r00         [24] 8583 	lcall	_putchar
      002FC4 0D               [12] 8584 	inc	r5
                                   8585 ;	calc.c:428: printstr("]\tarithmetic shift right top 2\r\n");
      002FC5 BD 00 E7         [24] 8586 	cjne	r5,#0x00,00237$
      002FC8 0E               [12] 8587 	inc	r6
      002FC9 80 E4            [24] 8588 	sjmp	00237$
      002FCB                       8589 00152$:
                                   8590 ;	calc.c:429: printstr("<\tshift left top 2\r\n");
      002FCB 7Dr4B            [12] 8591 	mov	r5,#___str_43
      002FCD 7Es03            [12] 8592 	mov	r6,#(___str_43 >> 8)
      002FCF 7F 80            [12] 8593 	mov	r7,#0x80
                                   8594 ;	calc.c:51: return;
      002FD1                       8595 00240$:
                                   8596 ;	calc.c:49: for (; *s; s++) putchar(*s);
      002FD1 8D 82            [24] 8597 	mov	dpl,r5
      002FD3 8E 83            [24] 8598 	mov	dph,r6
      002FD5 8F F0            [24] 8599 	mov	b,r7
      002FD7 12r00r00         [24] 8600 	lcall	__gptrget
      002FDA FC               [12] 8601 	mov	r4,a
      002FDB 60 10            [24] 8602 	jz	00154$
      002FDD 7B 00            [12] 8603 	mov	r3,#0x00
      002FDF 8C 82            [24] 8604 	mov	dpl,r4
      002FE1 8B 83            [24] 8605 	mov	dph,r3
      002FE3 12r00r00         [24] 8606 	lcall	_putchar
      002FE6 0D               [12] 8607 	inc	r5
                                   8608 ;	calc.c:429: printstr("<\tshift left top 2\r\n");
      002FE7 BD 00 E7         [24] 8609 	cjne	r5,#0x00,00240$
      002FEA 0E               [12] 8610 	inc	r6
      002FEB 80 E4            [24] 8611 	sjmp	00240$
      002FED                       8612 00154$:
                                   8613 ;	calc.c:430: printstr("~\tbitwise not top\r\n");
      002FED 7Dr60            [12] 8614 	mov	r5,#___str_44
      002FEF 7Es03            [12] 8615 	mov	r6,#(___str_44 >> 8)
      002FF1 7F 80            [12] 8616 	mov	r7,#0x80
                                   8617 ;	calc.c:51: return;
      002FF3                       8618 00243$:
                                   8619 ;	calc.c:49: for (; *s; s++) putchar(*s);
      002FF3 8D 82            [24] 8620 	mov	dpl,r5
      002FF5 8E 83            [24] 8621 	mov	dph,r6
      002FF7 8F F0            [24] 8622 	mov	b,r7
      002FF9 12r00r00         [24] 8623 	lcall	__gptrget
      002FFC FC               [12] 8624 	mov	r4,a
      002FFD 60 10            [24] 8625 	jz	00156$
      002FFF 7B 00            [12] 8626 	mov	r3,#0x00
      003001 8C 82            [24] 8627 	mov	dpl,r4
      003003 8B 83            [24] 8628 	mov	dph,r3
      003005 12r00r00         [24] 8629 	lcall	_putchar
      003008 0D               [12] 8630 	inc	r5
                                   8631 ;	calc.c:430: printstr("~\tbitwise not top\r\n");
      003009 BD 00 E7         [24] 8632 	cjne	r5,#0x00,00243$
      00300C 0E               [12] 8633 	inc	r6
      00300D 80 E4            [24] 8634 	sjmp	00243$
      00300F                       8635 00156$:
                                   8636 ;	calc.c:431: printstr("?\thelp\r\n");
      00300F 7Dr74            [12] 8637 	mov	r5,#___str_45
      003011 7Es03            [12] 8638 	mov	r6,#(___str_45 >> 8)
      003013 7F 80            [12] 8639 	mov	r7,#0x80
                                   8640 ;	calc.c:51: return;
      003015                       8641 00246$:
                                   8642 ;	calc.c:49: for (; *s; s++) putchar(*s);
      003015 8D 82            [24] 8643 	mov	dpl,r5
      003017 8E 83            [24] 8644 	mov	dph,r6
      003019 8F F0            [24] 8645 	mov	b,r7
      00301B 12r00r00         [24] 8646 	lcall	__gptrget
      00301E FC               [12] 8647 	mov	r4,a
      00301F 60 10            [24] 8648 	jz	00158$
      003021 7B 00            [12] 8649 	mov	r3,#0x00
      003023 8C 82            [24] 8650 	mov	dpl,r4
      003025 8B 83            [24] 8651 	mov	dph,r3
      003027 12r00r00         [24] 8652 	lcall	_putchar
      00302A 0D               [12] 8653 	inc	r5
                                   8654 ;	calc.c:431: printstr("?\thelp\r\n");
      00302B BD 00 E7         [24] 8655 	cjne	r5,#0x00,00246$
      00302E 0E               [12] 8656 	inc	r6
      00302F 80 E4            [24] 8657 	sjmp	00246$
      003031                       8658 00158$:
                                   8659 ;	calc.c:432: printstr("q\tquit\r\n");
      003031 7Dr7D            [12] 8660 	mov	r5,#___str_46
      003033 7Es03            [12] 8661 	mov	r6,#(___str_46 >> 8)
      003035 7F 80            [12] 8662 	mov	r7,#0x80
                                   8663 ;	calc.c:51: return;
      003037                       8664 00249$:
                                   8665 ;	calc.c:49: for (; *s; s++) putchar(*s);
      003037 8D 82            [24] 8666 	mov	dpl,r5
      003039 8E 83            [24] 8667 	mov	dph,r6
      00303B 8F F0            [24] 8668 	mov	b,r7
      00303D 12r00r00         [24] 8669 	lcall	__gptrget
      003040 FC               [12] 8670 	mov	r4,a
      003041 60 10            [24] 8671 	jz	00160$
      003043 7B 00            [12] 8672 	mov	r3,#0x00
      003045 8C 82            [24] 8673 	mov	dpl,r4
      003047 8B 83            [24] 8674 	mov	dph,r3
      003049 12r00r00         [24] 8675 	lcall	_putchar
      00304C 0D               [12] 8676 	inc	r5
                                   8677 ;	calc.c:432: printstr("q\tquit\r\n");
      00304D BD 00 E7         [24] 8678 	cjne	r5,#0x00,00249$
      003050 0E               [12] 8679 	inc	r6
      003051 80 E4            [24] 8680 	sjmp	00249$
      003053                       8681 00160$:
                                   8682 ;	calc.c:434: return 1;
      003053 90 00 01         [24] 8683 	mov	dptr,#0x0001
                                   8684 ;	calc.c:435: }
      003056 D0*00            [24] 8685 	pop	_bp
      003058 22               [24] 8686 	ret
                                   8687 ;------------------------------------------------------------
                                   8688 ;Allocation info for local variables in function 'main'
                                   8689 ;------------------------------------------------------------
                                   8690 ;input                     Allocated to registers r6 r7 
                                   8691 ;__1966080181              Allocated to registers 
                                   8692 ;s                         Allocated to registers r2 r3 r4 
                                   8693 ;sloc0                     Allocated to stack - _bp +1
                                   8694 ;------------------------------------------------------------
                                   8695 ;	calc.c:465: void main(void) {
                                   8696 ;	-----------------------------------------
                                   8697 ;	 function main
                                   8698 ;	-----------------------------------------
      003059                       8699 _main:
      003059 C0*00            [24] 8700 	push	_bp
      00305B 85 81*00         [24] 8701 	mov	_bp,sp
      00305E 05 81            [12] 8702 	inc	sp
                                   8703 ;	calc.c:468: c.base = 10;
      003060 90r00r0C         [24] 8704 	mov	dptr,#_c
      003063 74 0A            [12] 8705 	mov	a,#0x0a
      003065 F0               [24] 8706 	movx	@dptr,a
      003066 E4               [12] 8707 	clr	a
      003067 A3               [24] 8708 	inc	dptr
      003068 F0               [24] 8709 	movx	@dptr,a
                                   8710 ;	calc.c:469: c.acc = 0l;
      003069 90r00r0E         [24] 8711 	mov	dptr,#(_c + 0x0002)
      00306C F0               [24] 8712 	movx	@dptr,a
      00306D A3               [24] 8713 	inc	dptr
      00306E F0               [24] 8714 	movx	@dptr,a
      00306F A3               [24] 8715 	inc	dptr
      003070 F0               [24] 8716 	movx	@dptr,a
      003071 A3               [24] 8717 	inc	dptr
      003072 F0               [24] 8718 	movx	@dptr,a
                                   8719 ;	calc.c:470: c.acc_valid = (char)0;
      003073 90r00r12         [24] 8720 	mov	dptr,#(_c + 0x0006)
      003076 F0               [24] 8721 	movx	@dptr,a
                                   8722 ;	calc.c:471: c.digit[0] = c.digit[1] = '\0';
      003077 90r00r14         [24] 8723 	mov	dptr,#(_c + 0x0008)
      00307A F0               [24] 8724 	movx	@dptr,a
      00307B 90r00r13         [24] 8725 	mov	dptr,#(_c + 0x0007)
      00307E F0               [24] 8726 	movx	@dptr,a
                                   8727 ;	calc.c:473: c.ps = &c.s0;
      00307F 90r40r1D         [24] 8728 	mov	dptr,#(_c + 0x4011)
      003082 74r15            [12] 8729 	mov	a,#(_c + 0x0009)
      003084 F0               [24] 8730 	movx	@dptr,a
      003085 74s00            [12] 8731 	mov	a,#((_c + 0x0009) >> 8)
      003087 A3               [24] 8732 	inc	dptr
      003088 F0               [24] 8733 	movx	@dptr,a
      003089 E4               [12] 8734 	clr	a
      00308A A3               [24] 8735 	inc	dptr
      00308B F0               [24] 8736 	movx	@dptr,a
                                   8737 ;	calc.c:474: c.ss = &c.s1;
      00308C 90r40r20         [24] 8738 	mov	dptr,#(_c + 0x4014)
      00308F 74r19            [12] 8739 	mov	a,#(_c + 0x200d)
      003091 F0               [24] 8740 	movx	@dptr,a
      003092 74s20            [12] 8741 	mov	a,#((_c + 0x200d) >> 8)
      003094 A3               [24] 8742 	inc	dptr
      003095 F0               [24] 8743 	movx	@dptr,a
      003096 E4               [12] 8744 	clr	a
      003097 A3               [24] 8745 	inc	dptr
      003098 F0               [24] 8746 	movx	@dptr,a
                                   8747 ;	calc.c:475: stack_init(c.ps);
      003099 90r00r15         [24] 8748 	mov	dptr,#(_c + 0x0009)
      00309C 75 F0 00         [24] 8749 	mov	b,#0x00
      00309F 12r00r00         [24] 8750 	lcall	_stack_init
                                   8751 ;	calc.c:476: stack_init(c.ss);
      0030A2 90r40r20         [24] 8752 	mov	dptr,#(_c + 0x4014)
      0030A5 E0               [24] 8753 	movx	a,@dptr
      0030A6 FD               [12] 8754 	mov	r5,a
      0030A7 A3               [24] 8755 	inc	dptr
      0030A8 E0               [24] 8756 	movx	a,@dptr
      0030A9 FE               [12] 8757 	mov	r6,a
      0030AA A3               [24] 8758 	inc	dptr
      0030AB E0               [24] 8759 	movx	a,@dptr
      0030AC FF               [12] 8760 	mov	r7,a
      0030AD 8D 82            [24] 8761 	mov	dpl,r5
      0030AF 8E 83            [24] 8762 	mov	dph,r6
      0030B1 8F F0            [24] 8763 	mov	b,r7
      0030B3 12r00r00         [24] 8764 	lcall	_stack_init
                                   8765 ;	calc.c:478: state_init(&s, STATE_START, STATE_FINAL, UNDEF, deltas, &c);
      0030B6 74r0C            [12] 8766 	mov	a,#_c
      0030B8 C0 E0            [24] 8767 	push	acc
      0030BA 74s00            [12] 8768 	mov	a,#(_c >> 8)
      0030BC C0 E0            [24] 8769 	push	acc
      0030BE E4               [12] 8770 	clr	a
      0030BF C0 E0            [24] 8771 	push	acc
      0030C1 74r00            [12] 8772 	mov	a,#_deltas
      0030C3 C0 E0            [24] 8773 	push	acc
      0030C5 74s00            [12] 8774 	mov	a,#(_deltas >> 8)
      0030C7 C0 E0            [24] 8775 	push	acc
      0030C9 E4               [12] 8776 	clr	a
      0030CA C0 E0            [24] 8777 	push	acc
      0030CC C0 E0            [24] 8778 	push	acc
      0030CE 74 80            [12] 8779 	mov	a,#0x80
      0030D0 C0 E0            [24] 8780 	push	acc
      0030D2 74 03            [12] 8781 	mov	a,#0x03
      0030D4 C0 E0            [24] 8782 	push	acc
      0030D6 E4               [12] 8783 	clr	a
      0030D7 C0 E0            [24] 8784 	push	acc
      0030D9 C0 E0            [24] 8785 	push	acc
      0030DB C0 E0            [24] 8786 	push	acc
      0030DD 90r00r00         [24] 8787 	mov	dptr,#_s
      0030E0 75 F0 00         [24] 8788 	mov	b,#0x00
      0030E3 12r00r00         [24] 8789 	lcall	_state_init
      0030E6 E5 81            [12] 8790 	mov	a,sp
      0030E8 24 F4            [12] 8791 	add	a,#0xf4
      0030EA F5 81            [12] 8792 	mov	sp,a
                                   8793 ;	calc.c:480: while (1) {
      0030EC                       8794 00192$:
                                   8795 ;	calc.c:481: input = getchar();
      0030EC 12r00r05         [24] 8796 	lcall	_getchar
      0030EF AE 82            [24] 8797 	mov	r6,dpl
      0030F1 AF 83            [24] 8798 	mov	r7,dph
                                   8799 ;	calc.c:482: if (((char)input == '\r') || ((char)input == '\n')) printstr("\r\n");
      0030F3 8E 05            [24] 8800 	mov	ar5,r6
      0030F5 BD 0D 02         [24] 8801 	cjne	r5,#0x0d,00386$
      0030F8 80 03            [24] 8802 	sjmp	00101$
      0030FA                       8803 00386$:
      0030FA BD 0A 36         [24] 8804 	cjne	r5,#0x0a,00102$
      0030FD                       8805 00101$:
      0030FD 7Ar00            [12] 8806 	mov	r2,#___str_0
      0030FF 7Bs00            [12] 8807 	mov	r3,#(___str_0 >> 8)
      003101 7C 80            [12] 8808 	mov	r4,#0x80
                                   8809 ;	calc.c:51: return;
      003103                       8810 00197$:
                                   8811 ;	calc.c:49: for (; *s; s++) putchar(*s);
      003103 8A 82            [24] 8812 	mov	dpl,r2
      003105 8B 83            [24] 8813 	mov	dph,r3
      003107 8C F0            [24] 8814 	mov	b,r4
      003109 A8*00            [24] 8815 	mov	r0,_bp
      00310B 08               [12] 8816 	inc	r0
      00310C 12r00r00         [24] 8817 	lcall	__gptrget
      00310F F6               [12] 8818 	mov	@r0,a
      003110 A8*00            [24] 8819 	mov	r0,_bp
      003112 08               [12] 8820 	inc	r0
      003113 E6               [12] 8821 	mov	a,@r0
      003114 60 24            [24] 8822 	jz	00103$
      003116 C0 06            [24] 8823 	push	ar6
      003118 C0 07            [24] 8824 	push	ar7
      00311A A8*00            [24] 8825 	mov	r0,_bp
      00311C 08               [12] 8826 	inc	r0
      00311D 86 06            [24] 8827 	mov	ar6,@r0
      00311F 7F 00            [12] 8828 	mov	r7,#0x00
      003121 8E 82            [24] 8829 	mov	dpl,r6
      003123 8F 83            [24] 8830 	mov	dph,r7
      003125 12r00r00         [24] 8831 	lcall	_putchar
      003128 0A               [12] 8832 	inc	r2
      003129 BA 00 01         [24] 8833 	cjne	r2,#0x00,00390$
      00312C 0B               [12] 8834 	inc	r3
      00312D                       8835 00390$:
      00312D D0 07            [24] 8836 	pop	ar7
      00312F D0 06            [24] 8837 	pop	ar6
                                   8838 ;	calc.c:482: if (((char)input == '\r') || ((char)input == '\n')) printstr("\r\n");
      003131 80 D0            [24] 8839 	sjmp	00197$
      003133                       8840 00102$:
                                   8841 ;	calc.c:483: else (void)putchar(input);
      003133 8E 82            [24] 8842 	mov	dpl,r6
      003135 8F 83            [24] 8843 	mov	dph,r7
      003137 12r00r00         [24] 8844 	lcall	_putchar
      00313A                       8845 00103$:
                                   8846 ;	calc.c:484: c.digit[0] = (char)input;
      00313A 90r00r13         [24] 8847 	mov	dptr,#(_c + 0x0007)
      00313D ED               [12] 8848 	mov	a,r5
      00313E F0               [24] 8849 	movx	@dptr,a
                                   8850 ;	calc.c:486: if ((char)input == 'q') {
      00313F BD 71 29         [24] 8851 	cjne	r5,#0x71,00189$
                                   8852 ;	calc.c:487: if (state_exec(&s, EVENT_TERM) <= 0) break;
      003142 74 08            [12] 8853 	mov	a,#0x08
      003144 C0 E0            [24] 8854 	push	acc
      003146 E4               [12] 8855 	clr	a
      003147 C0 E0            [24] 8856 	push	acc
      003149 90r00r00         [24] 8857 	mov	dptr,#_s
      00314C 75 F0 00         [24] 8858 	mov	b,#0x00
      00314F 12r00r00         [24] 8859 	lcall	_state_exec
      003152 AB 82            [24] 8860 	mov	r3,dpl
      003154 AC 83            [24] 8861 	mov	r4,dph
      003156 15 81            [12] 8862 	dec	sp
      003158 15 81            [12] 8863 	dec	sp
      00315A C3               [12] 8864 	clr	c
      00315B E4               [12] 8865 	clr	a
      00315C 9B               [12] 8866 	subb	a,r3
      00315D 74 80            [12] 8867 	mov	a,#(0x00 ^ 0x80)
      00315F 8C F0            [24] 8868 	mov	b,r4
      003161 63 F0 80         [24] 8869 	xrl	b,#0x80
      003164 95 F0            [12] 8870 	subb	a,b
      003166 40 84            [24] 8871 	jc	00192$
      003168 02r34r1A         [24] 8872 	ljmp	00193$
      00316B                       8873 00189$:
                                   8874 ;	calc.c:488: } else if ((char)input == 's') {
      00316B BD 73 2C         [24] 8875 	cjne	r5,#0x73,00186$
                                   8876 ;	calc.c:489: if (state_exec(&s, EVENT_STATUS) <= 0) break;
      00316E 74 03            [12] 8877 	mov	a,#0x03
      003170 C0 E0            [24] 8878 	push	acc
      003172 E4               [12] 8879 	clr	a
      003173 C0 E0            [24] 8880 	push	acc
      003175 90r00r00         [24] 8881 	mov	dptr,#_s
      003178 75 F0 00         [24] 8882 	mov	b,#0x00
      00317B 12r00r00         [24] 8883 	lcall	_state_exec
      00317E AB 82            [24] 8884 	mov	r3,dpl
      003180 AC 83            [24] 8885 	mov	r4,dph
      003182 15 81            [12] 8886 	dec	sp
      003184 15 81            [12] 8887 	dec	sp
      003186 C3               [12] 8888 	clr	c
      003187 E4               [12] 8889 	clr	a
      003188 9B               [12] 8890 	subb	a,r3
      003189 74 80            [12] 8891 	mov	a,#(0x00 ^ 0x80)
      00318B 8C F0            [24] 8892 	mov	b,r4
      00318D 63 F0 80         [24] 8893 	xrl	b,#0x80
      003190 95 F0            [12] 8894 	subb	a,b
      003192 50 03            [24] 8895 	jnc	00396$
      003194 02r30rEC         [24] 8896 	ljmp	00192$
      003197                       8897 00396$:
      003197 02r34r1A         [24] 8898 	ljmp	00193$
      00319A                       8899 00186$:
                                   8900 ;	calc.c:490: } else if ((char)input == '?') {
      00319A BD 3F 2C         [24] 8901 	cjne	r5,#0x3f,00183$
                                   8902 ;	calc.c:491: if (state_exec(&s, EVENT_HELP) <= 0) break;
      00319D 74 04            [12] 8903 	mov	a,#0x04
      00319F C0 E0            [24] 8904 	push	acc
      0031A1 E4               [12] 8905 	clr	a
      0031A2 C0 E0            [24] 8906 	push	acc
      0031A4 90r00r00         [24] 8907 	mov	dptr,#_s
      0031A7 75 F0 00         [24] 8908 	mov	b,#0x00
      0031AA 12r00r00         [24] 8909 	lcall	_state_exec
      0031AD AB 82            [24] 8910 	mov	r3,dpl
      0031AF AC 83            [24] 8911 	mov	r4,dph
      0031B1 15 81            [12] 8912 	dec	sp
      0031B3 15 81            [12] 8913 	dec	sp
      0031B5 C3               [12] 8914 	clr	c
      0031B6 E4               [12] 8915 	clr	a
      0031B7 9B               [12] 8916 	subb	a,r3
      0031B8 74 80            [12] 8917 	mov	a,#(0x00 ^ 0x80)
      0031BA 8C F0            [24] 8918 	mov	b,r4
      0031BC 63 F0 80         [24] 8919 	xrl	b,#0x80
      0031BF 95 F0            [12] 8920 	subb	a,b
      0031C1 50 03            [24] 8921 	jnc	00399$
      0031C3 02r30rEC         [24] 8922 	ljmp	00192$
      0031C6                       8923 00399$:
      0031C6 02r34r1A         [24] 8924 	ljmp	00193$
      0031C9                       8925 00183$:
                                   8926 ;	calc.c:492: } else if ((char)input == 'i') {
      0031C9 BD 69 2C         [24] 8927 	cjne	r5,#0x69,00180$
                                   8928 ;	calc.c:493: if (state_exec(&s, EVENT_RSTA_i) <= 0) break;
      0031CC 74 06            [12] 8929 	mov	a,#0x06
      0031CE C0 E0            [24] 8930 	push	acc
      0031D0 E4               [12] 8931 	clr	a
      0031D1 C0 E0            [24] 8932 	push	acc
      0031D3 90r00r00         [24] 8933 	mov	dptr,#_s
      0031D6 75 F0 00         [24] 8934 	mov	b,#0x00
      0031D9 12r00r00         [24] 8935 	lcall	_state_exec
      0031DC AB 82            [24] 8936 	mov	r3,dpl
      0031DE AC 83            [24] 8937 	mov	r4,dph
      0031E0 15 81            [12] 8938 	dec	sp
      0031E2 15 81            [12] 8939 	dec	sp
      0031E4 C3               [12] 8940 	clr	c
      0031E5 E4               [12] 8941 	clr	a
      0031E6 9B               [12] 8942 	subb	a,r3
      0031E7 74 80            [12] 8943 	mov	a,#(0x00 ^ 0x80)
      0031E9 8C F0            [24] 8944 	mov	b,r4
      0031EB 63 F0 80         [24] 8945 	xrl	b,#0x80
      0031EE 95 F0            [12] 8946 	subb	a,b
      0031F0 50 03            [24] 8947 	jnc	00402$
      0031F2 02r30rEC         [24] 8948 	ljmp	00192$
      0031F5                       8949 00402$:
      0031F5 02r34r1A         [24] 8950 	ljmp	00193$
      0031F8                       8951 00180$:
                                   8952 ;	calc.c:494: } else if ((char)input == 'I') {
      0031F8 BD 49 2C         [24] 8953 	cjne	r5,#0x49,00177$
                                   8954 ;	calc.c:495: if (state_exec(&s, EVENT_RSTA_I) <= 0) break;
      0031FB 74 07            [12] 8955 	mov	a,#0x07
      0031FD C0 E0            [24] 8956 	push	acc
      0031FF E4               [12] 8957 	clr	a
      003200 C0 E0            [24] 8958 	push	acc
      003202 90r00r00         [24] 8959 	mov	dptr,#_s
      003205 75 F0 00         [24] 8960 	mov	b,#0x00
      003208 12r00r00         [24] 8961 	lcall	_state_exec
      00320B AB 82            [24] 8962 	mov	r3,dpl
      00320D AC 83            [24] 8963 	mov	r4,dph
      00320F 15 81            [12] 8964 	dec	sp
      003211 15 81            [12] 8965 	dec	sp
      003213 C3               [12] 8966 	clr	c
      003214 E4               [12] 8967 	clr	a
      003215 9B               [12] 8968 	subb	a,r3
      003216 74 80            [12] 8969 	mov	a,#(0x00 ^ 0x80)
      003218 8C F0            [24] 8970 	mov	b,r4
      00321A 63 F0 80         [24] 8971 	xrl	b,#0x80
      00321D 95 F0            [12] 8972 	subb	a,b
      00321F 50 03            [24] 8973 	jnc	00405$
      003221 02r30rEC         [24] 8974 	ljmp	00192$
      003224                       8975 00405$:
      003224 02r34r1A         [24] 8976 	ljmp	00193$
      003227                       8977 00177$:
                                   8978 ;	calc.c:497: ((char)input == 'h') || ((char)input == 'H') ||
      003227 BD 68 02         [24] 8979 	cjne	r5,#0x68,00406$
      00322A 80 0D            [24] 8980 	sjmp	00170$
      00322C                       8981 00406$:
      00322C BD 48 02         [24] 8982 	cjne	r5,#0x48,00407$
      00322F 80 08            [24] 8983 	sjmp	00170$
      003231                       8984 00407$:
                                   8985 ;	calc.c:498: ((char)input == 'o') || ((char)input == 'O')
      003231 BD 6F 02         [24] 8986 	cjne	r5,#0x6f,00408$
      003234 80 03            [24] 8987 	sjmp	00170$
      003236                       8988 00408$:
      003236 BD 4F 2C         [24] 8989 	cjne	r5,#0x4f,00171$
      003239                       8990 00170$:
                                   8991 ;	calc.c:500: if (state_exec(&s, EVENT_BASE) <= 0) break;
      003239 74 05            [12] 8992 	mov	a,#0x05
      00323B C0 E0            [24] 8993 	push	acc
      00323D E4               [12] 8994 	clr	a
      00323E C0 E0            [24] 8995 	push	acc
      003240 90r00r00         [24] 8996 	mov	dptr,#_s
      003243 75 F0 00         [24] 8997 	mov	b,#0x00
      003246 12r00r00         [24] 8998 	lcall	_state_exec
      003249 AB 82            [24] 8999 	mov	r3,dpl
      00324B AC 83            [24] 9000 	mov	r4,dph
      00324D 15 81            [12] 9001 	dec	sp
      00324F 15 81            [12] 9002 	dec	sp
      003251 C3               [12] 9003 	clr	c
      003252 E4               [12] 9004 	clr	a
      003253 9B               [12] 9005 	subb	a,r3
      003254 74 80            [12] 9006 	mov	a,#(0x00 ^ 0x80)
      003256 8C F0            [24] 9007 	mov	b,r4
      003258 63 F0 80         [24] 9008 	xrl	b,#0x80
      00325B 95 F0            [12] 9009 	subb	a,b
      00325D 50 03            [24] 9010 	jnc	00411$
      00325F 02r30rEC         [24] 9011 	ljmp	00192$
      003262                       9012 00411$:
      003262 02r34r1A         [24] 9013 	ljmp	00193$
      003265                       9014 00171$:
                                   9015 ;	calc.c:501: } else if (isxdigit(input)) {
      003265 8E 82            [24] 9016 	mov	dpl,r6
      003267 8F 83            [24] 9017 	mov	dph,r7
      003269 C0 05            [24] 9018 	push	ar5
      00326B 12r00r00         [24] 9019 	lcall	_isxdigit
      00326E E5 82            [12] 9020 	mov	a,dpl
      003270 85 83 F0         [24] 9021 	mov	b,dph
      003273 D0 05            [24] 9022 	pop	ar5
      003275 45 F0            [12] 9023 	orl	a,b
      003277 60 2C            [24] 9024 	jz	00168$
                                   9025 ;	calc.c:502: if (state_exec(&s, EVENT_DIGIT) <= 0) break;
      003279 74 01            [12] 9026 	mov	a,#0x01
      00327B C0 E0            [24] 9027 	push	acc
      00327D E4               [12] 9028 	clr	a
      00327E C0 E0            [24] 9029 	push	acc
      003280 90r00r00         [24] 9030 	mov	dptr,#_s
      003283 75 F0 00         [24] 9031 	mov	b,#0x00
      003286 12r00r00         [24] 9032 	lcall	_state_exec
      003289 AE 82            [24] 9033 	mov	r6,dpl
      00328B AF 83            [24] 9034 	mov	r7,dph
      00328D 15 81            [12] 9035 	dec	sp
      00328F 15 81            [12] 9036 	dec	sp
      003291 C3               [12] 9037 	clr	c
      003292 E4               [12] 9038 	clr	a
      003293 9E               [12] 9039 	subb	a,r6
      003294 74 80            [12] 9040 	mov	a,#(0x00 ^ 0x80)
      003296 8F F0            [24] 9041 	mov	b,r7
      003298 63 F0 80         [24] 9042 	xrl	b,#0x80
      00329B 95 F0            [12] 9043 	subb	a,b
      00329D 50 03            [24] 9044 	jnc	00413$
      00329F 02r30rEC         [24] 9045 	ljmp	00192$
      0032A2                       9046 00413$:
      0032A2 02r34r1A         [24] 9047 	ljmp	00193$
      0032A5                       9048 00168$:
                                   9049 ;	calc.c:504: ((char)input == 'p') || ((char)input == 'P') ||
      0032A5 BD 70 02         [24] 9050 	cjne	r5,#0x70,00414$
      0032A8 80 17            [24] 9051 	sjmp	00159$
      0032AA                       9052 00414$:
      0032AA BD 50 02         [24] 9053 	cjne	r5,#0x50,00415$
      0032AD 80 12            [24] 9054 	sjmp	00159$
      0032AF                       9055 00415$:
                                   9056 ;	calc.c:505: ((char)input == 'v') || ((char)input == 'V') ||
      0032AF BD 76 02         [24] 9057 	cjne	r5,#0x76,00416$
      0032B2 80 0D            [24] 9058 	sjmp	00159$
      0032B4                       9059 00416$:
      0032B4 BD 56 02         [24] 9060 	cjne	r5,#0x56,00417$
      0032B7 80 08            [24] 9061 	sjmp	00159$
      0032B9                       9062 00417$:
                                   9063 ;	calc.c:506: ((char)input == '.') ||
      0032B9 BD 2E 02         [24] 9064 	cjne	r5,#0x2e,00418$
      0032BC 80 03            [24] 9065 	sjmp	00159$
      0032BE                       9066 00418$:
                                   9067 ;	calc.c:507: ((char)input == 'x')
      0032BE BD 78 2C         [24] 9068 	cjne	r5,#0x78,00160$
      0032C1                       9069 00159$:
                                   9070 ;	calc.c:509: if (state_exec(&s, EVENT_OP) <= 0) break;
      0032C1 74 02            [12] 9071 	mov	a,#0x02
      0032C3 C0 E0            [24] 9072 	push	acc
      0032C5 E4               [12] 9073 	clr	a
      0032C6 C0 E0            [24] 9074 	push	acc
      0032C8 90r00r00         [24] 9075 	mov	dptr,#_s
      0032CB 75 F0 00         [24] 9076 	mov	b,#0x00
      0032CE 12r00r00         [24] 9077 	lcall	_state_exec
      0032D1 AE 82            [24] 9078 	mov	r6,dpl
      0032D3 AF 83            [24] 9079 	mov	r7,dph
      0032D5 15 81            [12] 9080 	dec	sp
      0032D7 15 81            [12] 9081 	dec	sp
      0032D9 C3               [12] 9082 	clr	c
      0032DA E4               [12] 9083 	clr	a
      0032DB 9E               [12] 9084 	subb	a,r6
      0032DC 74 80            [12] 9085 	mov	a,#(0x00 ^ 0x80)
      0032DE 8F F0            [24] 9086 	mov	b,r7
      0032E0 63 F0 80         [24] 9087 	xrl	b,#0x80
      0032E3 95 F0            [12] 9088 	subb	a,b
      0032E5 50 03            [24] 9089 	jnc	00421$
      0032E7 02r30rEC         [24] 9090 	ljmp	00192$
      0032EA                       9091 00421$:
      0032EA 02r34r1A         [24] 9092 	ljmp	00193$
      0032ED                       9093 00160$:
                                   9094 ;	calc.c:511: ((char)input == 'X') || ((char)input == 'T') ||
      0032ED BD 58 02         [24] 9095 	cjne	r5,#0x58,00422$
      0032F0 80 17            [24] 9096 	sjmp	00151$
      0032F2                       9097 00422$:
      0032F2 BD 54 02         [24] 9098 	cjne	r5,#0x54,00423$
      0032F5 80 12            [24] 9099 	sjmp	00151$
      0032F7                       9100 00423$:
                                   9101 ;	calc.c:512: ((char)input == 'm') || ((char)input == 'M') ||
      0032F7 BD 6D 02         [24] 9102 	cjne	r5,#0x6d,00424$
      0032FA 80 0D            [24] 9103 	sjmp	00151$
      0032FC                       9104 00424$:
      0032FC BD 4D 02         [24] 9105 	cjne	r5,#0x4d,00425$
      0032FF 80 08            [24] 9106 	sjmp	00151$
      003301                       9107 00425$:
                                   9108 ;	calc.c:513: ((char)input == 'u') || ((char)input == 'U')
      003301 BD 75 02         [24] 9109 	cjne	r5,#0x75,00426$
      003304 80 03            [24] 9110 	sjmp	00151$
      003306                       9111 00426$:
      003306 BD 55 2C         [24] 9112 	cjne	r5,#0x55,00152$
      003309                       9113 00151$:
                                   9114 ;	calc.c:515: if (state_exec(&s, EVENT_OP) <= 0) break;
      003309 74 02            [12] 9115 	mov	a,#0x02
      00330B C0 E0            [24] 9116 	push	acc
      00330D E4               [12] 9117 	clr	a
      00330E C0 E0            [24] 9118 	push	acc
      003310 90r00r00         [24] 9119 	mov	dptr,#_s
      003313 75 F0 00         [24] 9120 	mov	b,#0x00
      003316 12r00r00         [24] 9121 	lcall	_state_exec
      003319 AE 82            [24] 9122 	mov	r6,dpl
      00331B AF 83            [24] 9123 	mov	r7,dph
      00331D 15 81            [12] 9124 	dec	sp
      00331F 15 81            [12] 9125 	dec	sp
      003321 C3               [12] 9126 	clr	c
      003322 E4               [12] 9127 	clr	a
      003323 9E               [12] 9128 	subb	a,r6
      003324 74 80            [12] 9129 	mov	a,#(0x00 ^ 0x80)
      003326 8F F0            [24] 9130 	mov	b,r7
      003328 63 F0 80         [24] 9131 	xrl	b,#0x80
      00332B 95 F0            [12] 9132 	subb	a,b
      00332D 50 03            [24] 9133 	jnc	00429$
      00332F 02r30rEC         [24] 9134 	ljmp	00192$
      003332                       9135 00429$:
      003332 02r34r1A         [24] 9136 	ljmp	00193$
      003335                       9137 00152$:
                                   9138 ;	calc.c:517: ((char)input == '+') || ((char)input == '-')
      003335 BD 2B 02         [24] 9139 	cjne	r5,#0x2b,00430$
      003338 80 03            [24] 9140 	sjmp	00147$
      00333A                       9141 00430$:
      00333A BD 2D 2C         [24] 9142 	cjne	r5,#0x2d,00148$
      00333D                       9143 00147$:
                                   9144 ;	calc.c:519: if (state_exec(&s, EVENT_OP) <= 0) break;
      00333D 74 02            [12] 9145 	mov	a,#0x02
      00333F C0 E0            [24] 9146 	push	acc
      003341 E4               [12] 9147 	clr	a
      003342 C0 E0            [24] 9148 	push	acc
      003344 90r00r00         [24] 9149 	mov	dptr,#_s
      003347 75 F0 00         [24] 9150 	mov	b,#0x00
      00334A 12r00r00         [24] 9151 	lcall	_state_exec
      00334D AE 82            [24] 9152 	mov	r6,dpl
      00334F AF 83            [24] 9153 	mov	r7,dph
      003351 15 81            [12] 9154 	dec	sp
      003353 15 81            [12] 9155 	dec	sp
      003355 C3               [12] 9156 	clr	c
      003356 E4               [12] 9157 	clr	a
      003357 9E               [12] 9158 	subb	a,r6
      003358 74 80            [12] 9159 	mov	a,#(0x00 ^ 0x80)
      00335A 8F F0            [24] 9160 	mov	b,r7
      00335C 63 F0 80         [24] 9161 	xrl	b,#0x80
      00335F 95 F0            [12] 9162 	subb	a,b
      003361 50 03            [24] 9163 	jnc	00433$
      003363 02r30rEC         [24] 9164 	ljmp	00192$
      003366                       9165 00433$:
      003366 02r34r1A         [24] 9166 	ljmp	00193$
      003369                       9167 00148$:
                                   9168 ;	calc.c:521: ((char)input == '*') ||
      003369 BD 2A 02         [24] 9169 	cjne	r5,#0x2a,00434$
      00336C 80 12            [24] 9170 	sjmp	00140$
      00336E                       9171 00434$:
                                   9172 ;	calc.c:522: ((char)input == '/') || ((char)input == '\\') ||
      00336E BD 2F 02         [24] 9173 	cjne	r5,#0x2f,00435$
      003371 80 0D            [24] 9174 	sjmp	00140$
      003373                       9175 00435$:
      003373 BD 5C 02         [24] 9176 	cjne	r5,#0x5c,00436$
      003376 80 08            [24] 9177 	sjmp	00140$
      003378                       9178 00436$:
                                   9179 ;	calc.c:523: ((char)input == '%') || ((char)input == '#')
      003378 BD 25 02         [24] 9180 	cjne	r5,#0x25,00437$
      00337B 80 03            [24] 9181 	sjmp	00140$
      00337D                       9182 00437$:
      00337D BD 23 29         [24] 9183 	cjne	r5,#0x23,00141$
      003380                       9184 00140$:
                                   9185 ;	calc.c:525: if (state_exec(&s, EVENT_OP) <= 0) break;
      003380 74 02            [12] 9186 	mov	a,#0x02
      003382 C0 E0            [24] 9187 	push	acc
      003384 E4               [12] 9188 	clr	a
      003385 C0 E0            [24] 9189 	push	acc
      003387 90r00r00         [24] 9190 	mov	dptr,#_s
      00338A 75 F0 00         [24] 9191 	mov	b,#0x00
      00338D 12r00r00         [24] 9192 	lcall	_state_exec
      003390 AE 82            [24] 9193 	mov	r6,dpl
      003392 AF 83            [24] 9194 	mov	r7,dph
      003394 15 81            [12] 9195 	dec	sp
      003396 15 81            [12] 9196 	dec	sp
      003398 C3               [12] 9197 	clr	c
      003399 E4               [12] 9198 	clr	a
      00339A 9E               [12] 9199 	subb	a,r6
      00339B 74 80            [12] 9200 	mov	a,#(0x00 ^ 0x80)
      00339D 8F F0            [24] 9201 	mov	b,r7
      00339F 63 F0 80         [24] 9202 	xrl	b,#0x80
      0033A2 95 F0            [12] 9203 	subb	a,b
      0033A4 50 74            [24] 9204 	jnc	00193$
      0033A6 02r30rEC         [24] 9205 	ljmp	00192$
      0033A9                       9206 00141$:
                                   9207 ;	calc.c:527: ((char)input == '&') ||
      0033A9 BD 26 02         [24] 9208 	cjne	r5,#0x26,00441$
      0033AC 80 1C            [24] 9209 	sjmp	00131$
      0033AE                       9210 00441$:
                                   9211 ;	calc.c:528: ((char)input == '|') || ((char)input == '^') ||
      0033AE BD 7C 02         [24] 9212 	cjne	r5,#0x7c,00442$
      0033B1 80 17            [24] 9213 	sjmp	00131$
      0033B3                       9214 00442$:
      0033B3 BD 5E 02         [24] 9215 	cjne	r5,#0x5e,00443$
      0033B6 80 12            [24] 9216 	sjmp	00131$
      0033B8                       9217 00443$:
                                   9218 ;	calc.c:529: ((char)input == '~') ||
      0033B8 BD 7E 02         [24] 9219 	cjne	r5,#0x7e,00444$
      0033BB 80 0D            [24] 9220 	sjmp	00131$
      0033BD                       9221 00444$:
                                   9222 ;	calc.c:530: ((char)input == '>') || ((char)input == ']') ||
      0033BD BD 3E 02         [24] 9223 	cjne	r5,#0x3e,00445$
      0033C0 80 08            [24] 9224 	sjmp	00131$
      0033C2                       9225 00445$:
      0033C2 BD 5D 02         [24] 9226 	cjne	r5,#0x5d,00446$
      0033C5 80 03            [24] 9227 	sjmp	00131$
      0033C7                       9228 00446$:
                                   9229 ;	calc.c:531: ((char)input == '<')
      0033C7 BD 3C 29         [24] 9230 	cjne	r5,#0x3c,00132$
      0033CA                       9231 00131$:
                                   9232 ;	calc.c:533: if (state_exec(&s, EVENT_OP) <= 0) break;
      0033CA 74 02            [12] 9233 	mov	a,#0x02
      0033CC C0 E0            [24] 9234 	push	acc
      0033CE E4               [12] 9235 	clr	a
      0033CF C0 E0            [24] 9236 	push	acc
      0033D1 90r00r00         [24] 9237 	mov	dptr,#_s
      0033D4 75 F0 00         [24] 9238 	mov	b,#0x00
      0033D7 12r00r00         [24] 9239 	lcall	_state_exec
      0033DA AE 82            [24] 9240 	mov	r6,dpl
      0033DC AF 83            [24] 9241 	mov	r7,dph
      0033DE 15 81            [12] 9242 	dec	sp
      0033E0 15 81            [12] 9243 	dec	sp
      0033E2 C3               [12] 9244 	clr	c
      0033E3 E4               [12] 9245 	clr	a
      0033E4 9E               [12] 9246 	subb	a,r6
      0033E5 74 80            [12] 9247 	mov	a,#(0x00 ^ 0x80)
      0033E7 8F F0            [24] 9248 	mov	b,r7
      0033E9 63 F0 80         [24] 9249 	xrl	b,#0x80
      0033EC 95 F0            [12] 9250 	subb	a,b
      0033EE 50 2A            [24] 9251 	jnc	00193$
      0033F0 02r30rEC         [24] 9252 	ljmp	00192$
      0033F3                       9253 00132$:
                                   9254 ;	calc.c:535: if (state_exec(&s, EVENT_DELIM) <= 0) break;
      0033F3 E4               [12] 9255 	clr	a
      0033F4 C0 E0            [24] 9256 	push	acc
      0033F6 C0 E0            [24] 9257 	push	acc
      0033F8 90r00r00         [24] 9258 	mov	dptr,#_s
      0033FB 75 F0 00         [24] 9259 	mov	b,#0x00
      0033FE 12r00r00         [24] 9260 	lcall	_state_exec
      003401 AE 82            [24] 9261 	mov	r6,dpl
      003403 AF 83            [24] 9262 	mov	r7,dph
      003405 15 81            [12] 9263 	dec	sp
      003407 15 81            [12] 9264 	dec	sp
      003409 C3               [12] 9265 	clr	c
      00340A E4               [12] 9266 	clr	a
      00340B 9E               [12] 9267 	subb	a,r6
      00340C 74 80            [12] 9268 	mov	a,#(0x00 ^ 0x80)
      00340E 8F F0            [24] 9269 	mov	b,r7
      003410 63 F0 80         [24] 9270 	xrl	b,#0x80
      003413 95 F0            [12] 9271 	subb	a,b
      003415 50 03            [24] 9272 	jnc	00450$
      003417 02r30rEC         [24] 9273 	ljmp	00192$
      00341A                       9274 00450$:
      00341A                       9275 00193$:
                                   9276 ;	calc.c:539: PCON |= 2;
      00341A 43 87 02         [24] 9277 	orl	_PCON,#0x02
                                   9278 ;	calc.c:541: return;
                                   9279 ;	calc.c:542: }
      00341D 15 81            [12] 9280 	dec	sp
      00341F D0*00            [24] 9281 	pop	_bp
      003421 22               [24] 9282 	ret
                                   9283 	.area CSEG    (CODE)
                                   9284 	.area CONST   (CODE)
                                   9285 	.area CONST   (CODE)
      000000                       9286 ___str_0:
      000000 0D                    9287 	.db 0x0d
      000001 0A                    9288 	.db 0x0a
      000002 00                    9289 	.db 0x00
                                   9290 	.area CSEG    (CODE)
                                   9291 	.area CONST   (CODE)
      000003                       9292 ___str_1:
      000003 73 74 61 63 6B 20 75  9293 	.ascii "stack underflow"
             6E 64 65 72 66 6C 6F
             77
      000012 0D                    9294 	.db 0x0d
      000013 0A                    9295 	.db 0x0a
      000014 00                    9296 	.db 0x00
                                   9297 	.area CSEG    (CODE)
                                   9298 	.area CONST   (CODE)
      000015                       9299 ___str_2:
      000015 56 41 20              9300 	.ascii "VA "
      000018 00                    9301 	.db 0x00
                                   9302 	.area CSEG    (CODE)
                                   9303 	.area CONST   (CODE)
      000019                       9304 ___str_3:
      000019 25 20 31 31 6C 64 20  9305 	.ascii "% 11ld / "
             2F 20
      000022 00                    9306 	.db 0x00
                                   9307 	.area CSEG    (CODE)
                                   9308 	.area CONST   (CODE)
      000023                       9309 ___str_4:
      000023 25 30 38 6C 78 20 2F  9310 	.ascii "%08lx / "
             20
      00002B 00                    9311 	.db 0x00
                                   9312 	.area CSEG    (CODE)
                                   9313 	.area CONST   (CODE)
      00002C                       9314 ___str_5:
      00002C 50 41 20              9315 	.ascii "PA "
      00002F 00                    9316 	.db 0x00
                                   9317 	.area CSEG    (CODE)
                                   9318 	.area CONST   (CODE)
      000030                       9319 ___str_6:
      000030 50 54 20              9320 	.ascii "PT "
      000033 00                    9321 	.db 0x00
                                   9322 	.area CSEG    (CODE)
                                   9323 	.area CONST   (CODE)
      000034                       9324 ___str_7:
      000034 56 54 20              9325 	.ascii "VT "
      000037 00                    9326 	.db 0x00
                                   9327 	.area CSEG    (CODE)
                                   9328 	.area CONST   (CODE)
      000038                       9329 ___str_8:
      000038 0D                    9330 	.db 0x0d
      000039 0A                    9331 	.db 0x0a
      00003A 73 74 61 63 6B 20 75  9332 	.ascii "stack underflow"
             6E 64 65 72 66 6C 6F
             77
      000049 0D                    9333 	.db 0x0d
      00004A 0A                    9334 	.db 0x0a
      00004B 00                    9335 	.db 0x00
                                   9336 	.area CSEG    (CODE)
                                   9337 	.area CONST   (CODE)
      00004C                       9338 ___str_9:
      00004C 0D                    9339 	.db 0x0d
      00004D 0A                    9340 	.db 0x0a
      00004E 73 65 63 6F 6E 64 61  9341 	.ascii "secondary stack overflow"
             72 79 20 73 74 61 63
             6B 20 6F 76 65 72 66
             6C 6F 77
      000066 0D                    9342 	.db 0x0d
      000067 0A                    9343 	.db 0x0a
      000068 00                    9344 	.db 0x00
                                   9345 	.area CSEG    (CODE)
                                   9346 	.area CONST   (CODE)
      000069                       9347 ___str_10:
      000069 0D                    9348 	.db 0x0d
      00006A 0A                    9349 	.db 0x0a
      00006B 73 65 63 6F 6E 64 61  9350 	.ascii "secondary stack underflow"
             72 79 20 73 74 61 63
             6B 20 75 6E 64 65 72
             66 6C 6F 77
      000084 0D                    9351 	.db 0x0d
      000085 0A                    9352 	.db 0x0a
      000086 00                    9353 	.db 0x00
                                   9354 	.area CSEG    (CODE)
                                   9355 	.area CONST   (CODE)
      000087                       9356 ___str_11:
      000087 0D                    9357 	.db 0x0d
      000088 0A                    9358 	.db 0x0a
      000089 73 74 61 63 6B 20 6F  9359 	.ascii "stack overflow"
             76 65 72 66 6C 6F 77
      000097 0D                    9360 	.db 0x0d
      000098 0A                    9361 	.db 0x0a
      000099 00                    9362 	.db 0x00
                                   9363 	.area CSEG    (CODE)
                                   9364 	.area CONST   (CODE)
      00009A                       9365 ___str_12:
      00009A 0D                    9366 	.db 0x0d
      00009B 0A                    9367 	.db 0x0a
      00009C 64 69 76 69 73 69 6F  9368 	.ascii "division by zero"
             6E 20 62 79 20 7A 65
             72 6F
      0000AC 0D                    9369 	.db 0x0d
      0000AD 0A                    9370 	.db 0x0a
      0000AE 00                    9371 	.db 0x00
                                   9372 	.area CSEG    (CODE)
                                   9373 	.area CONST   (CODE)
      0000AF                       9374 ___str_13:
      0000AF 0D                    9375 	.db 0x0d
      0000B0 0A                    9376 	.db 0x0a
      0000B1 62 61 73 65 20 3D 20  9377 	.ascii "base = %d, "
             25 64 2C 20
      0000BC 00                    9378 	.db 0x00
                                   9379 	.area CSEG    (CODE)
                                   9380 	.area CONST   (CODE)
      0000BD                       9381 ___str_14:
      0000BD 61 63 63 20 3D 20 25  9382 	.ascii "acc = %ld / "
             6C 64 20 2F 20
      0000C9 00                    9383 	.db 0x00
                                   9384 	.area CSEG    (CODE)
                                   9385 	.area CONST   (CODE)
      0000CA                       9386 ___str_15:
      0000CA 2C 20 61 63 63 5F 76  9387 	.ascii ", acc_valid = %d"
             61 6C 69 64 20 3D 20
             25 64
      0000DA 0D                    9388 	.db 0x0d
      0000DB 0A                    9389 	.db 0x0a
      0000DC 00                    9390 	.db 0x00
                                   9391 	.area CSEG    (CODE)
                                   9392 	.area CONST   (CODE)
      0000DD                       9393 ___str_16:
      0000DD 70 72 69 6D 61 72 79  9394 	.ascii "primary = %p, secondary = %p"
             20 3D 20 25 70 2C 20
             73 65 63 6F 6E 64 61
             72 79 20 3D 20 25 70
      0000F9 0D                    9395 	.db 0x0d
      0000FA 0A                    9396 	.db 0x0a
      0000FB 00                    9397 	.db 0x00
                                   9398 	.area CSEG    (CODE)
                                   9399 	.area CONST   (CODE)
      0000FC                       9400 ___str_17:
      0000FC 0D                    9401 	.db 0x0d
      0000FD 0A                    9402 	.db 0x0a
      0000FE 48 68 4F 6F           9403 	.ascii "HhOo"
      000102 09                    9404 	.db 0x09
      000103 62 61 73 65 20 31 36  9405 	.ascii "base 16 10 8 2"
             20 31 30 20 38 20 32
      000111 0D                    9406 	.db 0x0d
      000112 0A                    9407 	.db 0x0a
      000113 00                    9408 	.db 0x00
                                   9409 	.area CSEG    (CODE)
                                   9410 	.area CONST   (CODE)
      000114                       9411 ___str_18:
      000114 70                    9412 	.ascii "p"
      000115 09                    9413 	.db 0x09
      000116 70 65 65 6B 20 74 6F  9414 	.ascii "peek top"
             70
      00011E 0D                    9415 	.db 0x0d
      00011F 0A                    9416 	.db 0x0a
      000120 00                    9417 	.db 0x00
                                   9418 	.area CSEG    (CODE)
                                   9419 	.area CONST   (CODE)
      000121                       9420 ___str_19:
      000121 50                    9421 	.ascii "P"
      000122 09                    9422 	.db 0x09
      000123 70 72 69 6E 74 20 73  9423 	.ascii "print stack"
             74 61 63 6B
      00012E 0D                    9424 	.db 0x0d
      00012F 0A                    9425 	.db 0x0a
      000130 00                    9426 	.db 0x00
                                   9427 	.area CSEG    (CODE)
                                   9428 	.area CONST   (CODE)
      000131                       9429 ___str_20:
      000131 76 2E                 9430 	.ascii "v."
      000133 09                    9431 	.db 0x09
      000134 70 6F 70 20 74 6F 70  9432 	.ascii "pop top"
      00013B 0D                    9433 	.db 0x0d
      00013C 0A                    9434 	.db 0x0a
      00013D 00                    9435 	.db 0x00
                                   9436 	.area CSEG    (CODE)
                                   9437 	.area CONST   (CODE)
      00013E                       9438 ___str_21:
      00013E 56                    9439 	.ascii "V"
      00013F 09                    9440 	.db 0x09
      000140 70 6F 70 20 61 6C 6C  9441 	.ascii "pop all"
      000147 0D                    9442 	.db 0x0d
      000148 0A                    9443 	.db 0x0a
      000149 00                    9444 	.db 0x00
                                   9445 	.area CSEG    (CODE)
                                   9446 	.area CONST   (CODE)
      00014A                       9447 ___str_22:
      00014A 69                    9448 	.ascii "i"
      00014B 09                    9449 	.db 0x09
      00014C 72 65 73 65 74 20 61  9450 	.ascii "reset acc"
             63 63
      000155 0D                    9451 	.db 0x0d
      000156 0A                    9452 	.db 0x0a
      000157 00                    9453 	.db 0x00
                                   9454 	.area CSEG    (CODE)
                                   9455 	.area CONST   (CODE)
      000158                       9456 ___str_23:
      000158 49                    9457 	.ascii "I"
      000159 09                    9458 	.db 0x09
      00015A 72 65 73 65 74 20 61  9459 	.ascii "reset and discard acc"
             6E 64 20 64 69 73 63
             61 72 64 20 61 63 63
      00016F 0D                    9460 	.db 0x0d
      000170 0A                    9461 	.db 0x0a
      000171 00                    9462 	.db 0x00
                                   9463 	.area CSEG    (CODE)
                                   9464 	.area CONST   (CODE)
      000172                       9465 ___str_24:
      000172 78                    9466 	.ascii "x"
      000173 09                    9467 	.db 0x09
      000174 65 78 63 68 61 6E 67  9468 	.ascii "exchange top 2"
             65 20 74 6F 70 20 32
      000182 0D                    9469 	.db 0x0d
      000183 0A                    9470 	.db 0x0a
      000184 00                    9471 	.db 0x00
                                   9472 	.area CSEG    (CODE)
                                   9473 	.area CONST   (CODE)
      000185                       9474 ___str_25:
      000185 58                    9475 	.ascii "X"
      000186 09                    9476 	.db 0x09
      000187 65 78 63 68 61 6E 67  9477 	.ascii "exchange stacks primary <-> secondary"
             65 20 73 74 61 63 6B
             73 20 70 72 69 6D 61
             72 79 20 3C 2D 3E 20
             73 65 63 6F 6E 64 61
             72 79
      0001AC 0D                    9478 	.db 0x0d
      0001AD 0A                    9479 	.db 0x0a
      0001AE 00                    9480 	.db 0x00
                                   9481 	.area CSEG    (CODE)
                                   9482 	.area CONST   (CODE)
      0001AF                       9483 ___str_26:
      0001AF 54                    9484 	.ascii "T"
      0001B0 09                    9485 	.db 0x09
      0001B1 65 78 63 68 61 6E 67  9486 	.ascii "exchange tops primary <-> secondary"
             65 20 74 6F 70 73 20
             70 72 69 6D 61 72 79
             20 3C 2D 3E 20 73 65
             63 6F 6E 64 61 72 79
      0001D4 0D                    9487 	.db 0x0d
      0001D5 0A                    9488 	.db 0x0a
      0001D6 00                    9489 	.db 0x00
                                   9490 	.area CSEG    (CODE)
                                   9491 	.area CONST   (CODE)
      0001D7                       9492 ___str_27:
      0001D7 55                    9493 	.ascii "U"
      0001D8 09                    9494 	.db 0x09
      0001D9 63 6F 70 79 20 74 6F  9495 	.ascii "copy top secondary -> primary"
             70 20 73 65 63 6F 6E
             64 61 72 79 20 2D 3E
             20 70 72 69 6D 61 72
             79
      0001F6 0D                    9496 	.db 0x0d
      0001F7 0A                    9497 	.db 0x0a
      0001F8 00                    9498 	.db 0x00
                                   9499 	.area CSEG    (CODE)
                                   9500 	.area CONST   (CODE)
      0001F9                       9501 ___str_28:
      0001F9 75                    9502 	.ascii "u"
      0001FA 09                    9503 	.db 0x09
      0001FB 63 6F 70 79 20 74 6F  9504 	.ascii "copy top primary -> secondary"
             70 20 70 72 69 6D 61
             72 79 20 2D 3E 20 73
             65 63 6F 6E 64 61 72
             79
      000218 0D                    9505 	.db 0x0d
      000219 0A                    9506 	.db 0x0a
      00021A 00                    9507 	.db 0x00
                                   9508 	.area CSEG    (CODE)
                                   9509 	.area CONST   (CODE)
      00021B                       9510 ___str_29:
      00021B 4D                    9511 	.ascii "M"
      00021C 09                    9512 	.db 0x09
      00021D 6D 6F 76 65 20 74 6F  9513 	.ascii "move top secondary -> primary"
             70 20 73 65 63 6F 6E
             64 61 72 79 20 2D 3E
             20 70 72 69 6D 61 72
             79
      00023A 0D                    9514 	.db 0x0d
      00023B 0A                    9515 	.db 0x0a
      00023C 00                    9516 	.db 0x00
                                   9517 	.area CSEG    (CODE)
                                   9518 	.area CONST   (CODE)
      00023D                       9519 ___str_30:
      00023D 6D                    9520 	.ascii "m"
      00023E 09                    9521 	.db 0x09
      00023F 6D 6F 76 65 20 74 6F  9522 	.ascii "move top primary -> secondary"
             70 20 70 72 69 6D 61
             72 79 20 2D 3E 20 73
             65 63 6F 6E 64 61 72
             79
      00025C 0D                    9523 	.db 0x0d
      00025D 0A                    9524 	.db 0x0a
      00025E 00                    9525 	.db 0x00
                                   9526 	.area CSEG    (CODE)
                                   9527 	.area CONST   (CODE)
      00025F                       9528 ___str_31:
      00025F 2B                    9529 	.ascii "+"
      000260 09                    9530 	.db 0x09
      000261 61 64 64 20 74 6F 70  9531 	.ascii "add top 2"
             20 32
      00026A 0D                    9532 	.db 0x0d
      00026B 0A                    9533 	.db 0x0a
      00026C 00                    9534 	.db 0x00
                                   9535 	.area CSEG    (CODE)
                                   9536 	.area CONST   (CODE)
      00026D                       9537 ___str_32:
      00026D 2D                    9538 	.ascii "-"
      00026E 09                    9539 	.db 0x09
      00026F 73 75 62 74 72 61 63  9540 	.ascii "subtract top 2"
             74 20 74 6F 70 20 32
      00027D 0D                    9541 	.db 0x0d
      00027E 0A                    9542 	.db 0x0a
      00027F 00                    9543 	.db 0x00
                                   9544 	.area CSEG    (CODE)
                                   9545 	.area CONST   (CODE)
      000280                       9546 ___str_33:
      000280 2A                    9547 	.ascii "*"
      000281 09                    9548 	.db 0x09
      000282 6D 75 6C 74 69 70 6C  9549 	.ascii "multiply top 2"
             79 20 74 6F 70 20 32
      000290 0D                    9550 	.db 0x0d
      000291 0A                    9551 	.db 0x0a
      000292 00                    9552 	.db 0x00
                                   9553 	.area CSEG    (CODE)
                                   9554 	.area CONST   (CODE)
      000293                       9555 ___str_34:
      000293 2F                    9556 	.ascii "/"
      000294 09                    9557 	.db 0x09
      000295 64 69 76 69 64 65 20  9558 	.ascii "divide top 2"
             74 6F 70 20 32
      0002A1 0D                    9559 	.db 0x0d
      0002A2 0A                    9560 	.db 0x0a
      0002A3 00                    9561 	.db 0x00
                                   9562 	.area CSEG    (CODE)
                                   9563 	.area CONST   (CODE)
      0002A4                       9564 ___str_35:
      0002A4 5C                    9565 	.db 0x5c
      0002A5 09                    9566 	.db 0x09
      0002A6 64 69 76 69 64 65 20  9567 	.ascii "divide top 2 unsigned"
             74 6F 70 20 32 20 75
             6E 73 69 67 6E 65 64
      0002BB 0D                    9568 	.db 0x0d
      0002BC 0A                    9569 	.db 0x0a
      0002BD 00                    9570 	.db 0x00
                                   9571 	.area CSEG    (CODE)
                                   9572 	.area CONST   (CODE)
      0002BE                       9573 ___str_36:
      0002BE 25                    9574 	.ascii "%"
      0002BF 09                    9575 	.db 0x09
      0002C0 6D 6F 64 75 6C 75 73  9576 	.ascii "modulus top 2"
             20 74 6F 70 20 32
      0002CD 0D                    9577 	.db 0x0d
      0002CE 0A                    9578 	.db 0x0a
      0002CF 00                    9579 	.db 0x00
                                   9580 	.area CSEG    (CODE)
                                   9581 	.area CONST   (CODE)
      0002D0                       9582 ___str_37:
      0002D0 23                    9583 	.ascii "#"
      0002D1 09                    9584 	.db 0x09
      0002D2 6D 6F 64 75 6C 75 73  9585 	.ascii "modulus top 2 unsigned"
             20 74 6F 70 20 32 20
             75 6E 73 69 67 6E 65
             64
      0002E8 0D                    9586 	.db 0x0d
      0002E9 0A                    9587 	.db 0x0a
      0002EA 00                    9588 	.db 0x00
                                   9589 	.area CSEG    (CODE)
                                   9590 	.area CONST   (CODE)
      0002EB                       9591 ___str_38:
      0002EB 26                    9592 	.ascii "&"
      0002EC 09                    9593 	.db 0x09
      0002ED 61 6E 64 20 74 6F 70  9594 	.ascii "and top 2"
             20 32
      0002F6 0D                    9595 	.db 0x0d
      0002F7 0A                    9596 	.db 0x0a
      0002F8 00                    9597 	.db 0x00
                                   9598 	.area CSEG    (CODE)
                                   9599 	.area CONST   (CODE)
      0002F9                       9600 ___str_39:
      0002F9 7C                    9601 	.ascii "|"
      0002FA 09                    9602 	.db 0x09
      0002FB 6F 72 20 74 6F 70 20  9603 	.ascii "or top 2"
             32
      000303 0D                    9604 	.db 0x0d
      000304 0A                    9605 	.db 0x0a
      000305 00                    9606 	.db 0x00
                                   9607 	.area CSEG    (CODE)
                                   9608 	.area CONST   (CODE)
      000306                       9609 ___str_40:
      000306 5E                    9610 	.ascii "^"
      000307 09                    9611 	.db 0x09
      000308 78 6F 72 20 74 6F 70  9612 	.ascii "xor top 2"
             20 32
      000311 0D                    9613 	.db 0x0d
      000312 0A                    9614 	.db 0x0a
      000313 00                    9615 	.db 0x00
                                   9616 	.area CSEG    (CODE)
                                   9617 	.area CONST   (CODE)
      000314                       9618 ___str_41:
      000314 3E                    9619 	.ascii ">"
      000315 09                    9620 	.db 0x09
      000316 73 68 69 66 74 20 72  9621 	.ascii "shift right top 2"
             69 67 68 74 20 74 6F
             70 20 32
      000327 0D                    9622 	.db 0x0d
      000328 0A                    9623 	.db 0x0a
      000329 00                    9624 	.db 0x00
                                   9625 	.area CSEG    (CODE)
                                   9626 	.area CONST   (CODE)
      00032A                       9627 ___str_42:
      00032A 5D                    9628 	.ascii "]"
      00032B 09                    9629 	.db 0x09
      00032C 61 72 69 74 68 6D 65  9630 	.ascii "arithmetic shift right top 2"
             74 69 63 20 73 68 69
             66 74 20 72 69 67 68
             74 20 74 6F 70 20 32
      000348 0D                    9631 	.db 0x0d
      000349 0A                    9632 	.db 0x0a
      00034A 00                    9633 	.db 0x00
                                   9634 	.area CSEG    (CODE)
                                   9635 	.area CONST   (CODE)
      00034B                       9636 ___str_43:
      00034B 3C                    9637 	.ascii "<"
      00034C 09                    9638 	.db 0x09
      00034D 73 68 69 66 74 20 6C  9639 	.ascii "shift left top 2"
             65 66 74 20 74 6F 70
             20 32
      00035D 0D                    9640 	.db 0x0d
      00035E 0A                    9641 	.db 0x0a
      00035F 00                    9642 	.db 0x00
                                   9643 	.area CSEG    (CODE)
                                   9644 	.area CONST   (CODE)
      000360                       9645 ___str_44:
      000360 7E                    9646 	.ascii "~"
      000361 09                    9647 	.db 0x09
      000362 62 69 74 77 69 73 65  9648 	.ascii "bitwise not top"
             20 6E 6F 74 20 74 6F
             70
      000371 0D                    9649 	.db 0x0d
      000372 0A                    9650 	.db 0x0a
      000373 00                    9651 	.db 0x00
                                   9652 	.area CSEG    (CODE)
                                   9653 	.area CONST   (CODE)
      000374                       9654 ___str_45:
      000374 3F                    9655 	.ascii "?"
      000375 09                    9656 	.db 0x09
      000376 68 65 6C 70           9657 	.ascii "help"
      00037A 0D                    9658 	.db 0x0d
      00037B 0A                    9659 	.db 0x0a
      00037C 00                    9660 	.db 0x00
                                   9661 	.area CSEG    (CODE)
                                   9662 	.area CONST   (CODE)
      00037D                       9663 ___str_46:
      00037D 71                    9664 	.ascii "q"
      00037E 09                    9665 	.db 0x09
      00037F 71 75 69 74           9666 	.ascii "quit"
      000383 0D                    9667 	.db 0x0d
      000384 0A                    9668 	.db 0x0a
      000385 00                    9669 	.db 0x00
                                   9670 	.area CSEG    (CODE)
                                   9671 	.area XINIT   (CODE)
      000000                       9672 __xinit__deltas:
      000000 00 00                 9673 	.byte #0x00, #0x00	;  0
      000002 00 00                 9674 	.byte #0x00, #0x00	;  0
      000004 00 00                 9675 	.byte #0x00, #0x00	;  0
      000006 00 00                 9676 	.byte #0x00,#0x00
      000008 00 00                 9677 	.byte #0x00,#0x00
      00000A 00 00                 9678 	.byte #0x00, #0x00	;  0
      00000C 01 00                 9679 	.byte #0x01, #0x00	;  1
      00000E 02 00                 9680 	.byte #0x02, #0x00	;  2
      000010 00 00                 9681 	.byte #0x00,#0x00
      000012r22s00                 9682 	.byte _accumulate, (_accumulate >> 8)
      000014 00 00                 9683 	.byte #0x00, #0x00	;  0
      000016 02 00                 9684 	.byte #0x02, #0x00	;  2
      000018 01 00                 9685 	.byte #0x01, #0x00	;  1
      00001A 00 00                 9686 	.byte #0x00,#0x00
      00001CrABs05                 9687 	.byte _operator, (_operator >> 8)
      00001E 01 00                 9688 	.byte #0x01, #0x00	;  1
      000020 00 00                 9689 	.byte #0x00, #0x00	;  0
      000022 00 00                 9690 	.byte #0x00, #0x00	;  0
      000024 00 00                 9691 	.byte #0x00,#0x00
      000026 00 00                 9692 	.byte #0x00,#0x00
      000028 01 00                 9693 	.byte #0x01, #0x00	;  1
      00002A 02 00                 9694 	.byte #0x02, #0x00	;  2
      00002C 01 00                 9695 	.byte #0x01, #0x00	;  1
      00002E 00 00                 9696 	.byte #0x00,#0x00
      000030rABs05                 9697 	.byte _operator, (_operator >> 8)
      000032 01 00                 9698 	.byte #0x01, #0x00	;  1
      000034 01 00                 9699 	.byte #0x01, #0x00	;  1
      000036 02 00                 9700 	.byte #0x02, #0x00	;  2
      000038 00 00                 9701 	.byte #0x00,#0x00
      00003Ar22s00                 9702 	.byte _accumulate, (_accumulate >> 8)
      00003C 02 00                 9703 	.byte #0x02, #0x00	;  2
      00003E 00 00                 9704 	.byte #0x00, #0x00	;  0
      000040 00 00                 9705 	.byte #0x00, #0x00	;  0
      000042 00 00                 9706 	.byte #0x00,#0x00
      000044r39s28                 9707 	.byte _push_acc, (_push_acc >> 8)
      000046 02 00                 9708 	.byte #0x02, #0x00	;  2
      000048 07 00                 9709 	.byte #0x07, #0x00	;  7
      00004A 00 00                 9710 	.byte #0x00, #0x00	;  0
      00004C 00 00                 9711 	.byte #0x00,#0x00
      00004Er55s29                 9712 	.byte _reset_acc, (_reset_acc >> 8)
      000050 02 00                 9713 	.byte #0x02, #0x00	;  2
      000052 01 00                 9714 	.byte #0x01, #0x00	;  1
      000054 02 00                 9715 	.byte #0x02, #0x00	;  2
      000056 00 00                 9716 	.byte #0x00,#0x00
      000058r22s00                 9717 	.byte _accumulate, (_accumulate >> 8)
      00005A 02 00                 9718 	.byte #0x02, #0x00	;  2
      00005C 02 00                 9719 	.byte #0x02, #0x00	;  2
      00005E 01 00                 9720 	.byte #0x01, #0x00	;  1
      000060 00 00                 9721 	.byte #0x00,#0x00
      000062r39s28                 9722 	.byte _push_acc, (_push_acc >> 8)
      000064 FF 7F                 9723 	.byte #0xff, #0x7f	;  32767
      000066 06 00                 9724 	.byte #0x06, #0x00	;  6
      000068 FF 7F                 9725 	.byte #0xff, #0x7f	;  32767
      00006A 00 00                 9726 	.byte #0x00,#0x00
      00006Cr55s29                 9727 	.byte _reset_acc, (_reset_acc >> 8)
      00006E FF 7F                 9728 	.byte #0xff, #0x7f	;  32767
      000070 07 00                 9729 	.byte #0x07, #0x00	;  7
      000072 FF 7F                 9730 	.byte #0xff, #0x7f	;  32767
      000074 00 00                 9731 	.byte #0x00,#0x00
      000076 00 00                 9732 	.byte #0x00,#0x00
      000078 FF 7F                 9733 	.byte #0xff, #0x7f	;  32767
      00007A 05 00                 9734 	.byte #0x05, #0x00	;  5
      00007C FF 7F                 9735 	.byte #0xff, #0x7f	;  32767
      00007E 00 00                 9736 	.byte #0x00,#0x00
      000080rBFs29                 9737 	.byte _reset_base, (_reset_base >> 8)
      000082 FF 7F                 9738 	.byte #0xff, #0x7f	;  32767
      000084 03 00                 9739 	.byte #0x03, #0x00	;  3
      000086 FF 7F                 9740 	.byte #0xff, #0x7f	;  32767
      000088 00 00                 9741 	.byte #0x00,#0x00
      00008Ar3Ds2A                 9742 	.byte _status, (_status >> 8)
      00008C FF 7F                 9743 	.byte #0xff, #0x7f	;  32767
      00008E 04 00                 9744 	.byte #0x04, #0x00	;  4
      000090 FF 7F                 9745 	.byte #0xff, #0x7f	;  32767
      000092 00 00                 9746 	.byte #0x00,#0x00
      000094r52s2C                 9747 	.byte _help, (_help >> 8)
      000096 FF 7F                 9748 	.byte #0xff, #0x7f	;  32767
      000098 08 00                 9749 	.byte #0x08, #0x00	;  8
      00009A 03 00                 9750 	.byte #0x03, #0x00	;  3
      00009C 00 00                 9751 	.byte #0x00,#0x00
      00009Er93s01                 9752 	.byte _dump_pop, (_dump_pop >> 8)
      0000A0 00 80                 9753 	.byte #0x00, #0x80	; -32768
      0000A2 00 80                 9754 	.byte #0x00, #0x80	; -32768
      0000A4 00 80                 9755 	.byte #0x00, #0x80	; -32768
      0000A6 00 00                 9756 	.byte #0x00,#0x00
      0000A8 00 00                 9757 	.byte #0x00,#0x00
                                   9758 	.area CABS    (ABS,CODE)
