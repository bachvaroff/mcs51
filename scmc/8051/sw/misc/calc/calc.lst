                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module calc
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _state_exec
                                     13 	.globl _state_init
                                     14 	.globl _stack_iter_peek
                                     15 	.globl _stack_peek2
                                     16 	.globl _stack_peek
                                     17 	.globl _stack_pop
                                     18 	.globl _stack_push
                                     19 	.globl _stack_init
                                     20 	.globl _print32bin
                                     21 	.globl _printstr
                                     22 	.globl _getchar
                                     23 	.globl _putchar
                                     24 	.globl _isxdigit
                                     25 	.globl _printf
                                     26 	.globl _strtol
                                     27 	.globl _CY
                                     28 	.globl _AC
                                     29 	.globl _F0
                                     30 	.globl _RS1
                                     31 	.globl _RS0
                                     32 	.globl _OV
                                     33 	.globl _FL
                                     34 	.globl _P
                                     35 	.globl _TF2
                                     36 	.globl _EXF2
                                     37 	.globl _RCLK
                                     38 	.globl _TCLK
                                     39 	.globl _EXEN2
                                     40 	.globl _TR2
                                     41 	.globl _C_T2
                                     42 	.globl _CP_RL2
                                     43 	.globl _T2CON_7
                                     44 	.globl _T2CON_6
                                     45 	.globl _T2CON_5
                                     46 	.globl _T2CON_4
                                     47 	.globl _T2CON_3
                                     48 	.globl _T2CON_2
                                     49 	.globl _T2CON_1
                                     50 	.globl _T2CON_0
                                     51 	.globl _PT2
                                     52 	.globl _PS
                                     53 	.globl _PT1
                                     54 	.globl _PX1
                                     55 	.globl _PT0
                                     56 	.globl _PX0
                                     57 	.globl _RD
                                     58 	.globl _WR
                                     59 	.globl _T1
                                     60 	.globl _T0
                                     61 	.globl _INT1
                                     62 	.globl _INT0
                                     63 	.globl _TXD
                                     64 	.globl _RXD
                                     65 	.globl _P3_7
                                     66 	.globl _P3_6
                                     67 	.globl _P3_5
                                     68 	.globl _P3_4
                                     69 	.globl _P3_3
                                     70 	.globl _P3_2
                                     71 	.globl _P3_1
                                     72 	.globl _P3_0
                                     73 	.globl _EA
                                     74 	.globl _ET2
                                     75 	.globl _ES
                                     76 	.globl _ET1
                                     77 	.globl _EX1
                                     78 	.globl _ET0
                                     79 	.globl _EX0
                                     80 	.globl _P2_7
                                     81 	.globl _P2_6
                                     82 	.globl _P2_5
                                     83 	.globl _P2_4
                                     84 	.globl _P2_3
                                     85 	.globl _P2_2
                                     86 	.globl _P2_1
                                     87 	.globl _P2_0
                                     88 	.globl _SM0
                                     89 	.globl _SM1
                                     90 	.globl _SM2
                                     91 	.globl _REN
                                     92 	.globl _TB8
                                     93 	.globl _RB8
                                     94 	.globl _TI
                                     95 	.globl _RI
                                     96 	.globl _T2EX
                                     97 	.globl _T2
                                     98 	.globl _P1_7
                                     99 	.globl _P1_6
                                    100 	.globl _P1_5
                                    101 	.globl _P1_4
                                    102 	.globl _P1_3
                                    103 	.globl _P1_2
                                    104 	.globl _P1_1
                                    105 	.globl _P1_0
                                    106 	.globl _TF1
                                    107 	.globl _TR1
                                    108 	.globl _TF0
                                    109 	.globl _TR0
                                    110 	.globl _IE1
                                    111 	.globl _IT1
                                    112 	.globl _IE0
                                    113 	.globl _IT0
                                    114 	.globl _P0_7
                                    115 	.globl _P0_6
                                    116 	.globl _P0_5
                                    117 	.globl _P0_4
                                    118 	.globl _P0_3
                                    119 	.globl _P0_2
                                    120 	.globl _P0_1
                                    121 	.globl _P0_0
                                    122 	.globl _B
                                    123 	.globl _A
                                    124 	.globl _ACC
                                    125 	.globl _PSW
                                    126 	.globl _TH2
                                    127 	.globl _TL2
                                    128 	.globl _RCAP2H
                                    129 	.globl _RCAP2L
                                    130 	.globl _T2MOD
                                    131 	.globl _T2CON
                                    132 	.globl _IP
                                    133 	.globl _P3
                                    134 	.globl _IE
                                    135 	.globl _P2
                                    136 	.globl _SBUF
                                    137 	.globl _SCON
                                    138 	.globl _P1
                                    139 	.globl _TH1
                                    140 	.globl _TH0
                                    141 	.globl _TL1
                                    142 	.globl _TL0
                                    143 	.globl _TMOD
                                    144 	.globl _TCON
                                    145 	.globl _PCON
                                    146 	.globl _DPH
                                    147 	.globl _DPL
                                    148 	.globl _SP
                                    149 	.globl _P0
                                    150 	.globl _giant
                                    151 ;--------------------------------------------------------
                                    152 ; special function registers
                                    153 ;--------------------------------------------------------
                                    154 	.area RSEG    (ABS,DATA)
      000000                        155 	.org 0x0000
                           000080   156 _P0	=	0x0080
                           000081   157 _SP	=	0x0081
                           000082   158 _DPL	=	0x0082
                           000083   159 _DPH	=	0x0083
                           000087   160 _PCON	=	0x0087
                           000088   161 _TCON	=	0x0088
                           000089   162 _TMOD	=	0x0089
                           00008A   163 _TL0	=	0x008a
                           00008B   164 _TL1	=	0x008b
                           00008C   165 _TH0	=	0x008c
                           00008D   166 _TH1	=	0x008d
                           000090   167 _P1	=	0x0090
                           000098   168 _SCON	=	0x0098
                           000099   169 _SBUF	=	0x0099
                           0000A0   170 _P2	=	0x00a0
                           0000A8   171 _IE	=	0x00a8
                           0000B0   172 _P3	=	0x00b0
                           0000B8   173 _IP	=	0x00b8
                           0000C8   174 _T2CON	=	0x00c8
                           0000C9   175 _T2MOD	=	0x00c9
                           0000CA   176 _RCAP2L	=	0x00ca
                           0000CB   177 _RCAP2H	=	0x00cb
                           0000CC   178 _TL2	=	0x00cc
                           0000CD   179 _TH2	=	0x00cd
                           0000D0   180 _PSW	=	0x00d0
                           0000E0   181 _ACC	=	0x00e0
                           0000E0   182 _A	=	0x00e0
                           0000F0   183 _B	=	0x00f0
                                    184 ;--------------------------------------------------------
                                    185 ; special function bits
                                    186 ;--------------------------------------------------------
                                    187 	.area RSEG    (ABS,DATA)
      000000                        188 	.org 0x0000
                           000080   189 _P0_0	=	0x0080
                           000081   190 _P0_1	=	0x0081
                           000082   191 _P0_2	=	0x0082
                           000083   192 _P0_3	=	0x0083
                           000084   193 _P0_4	=	0x0084
                           000085   194 _P0_5	=	0x0085
                           000086   195 _P0_6	=	0x0086
                           000087   196 _P0_7	=	0x0087
                           000088   197 _IT0	=	0x0088
                           000089   198 _IE0	=	0x0089
                           00008A   199 _IT1	=	0x008a
                           00008B   200 _IE1	=	0x008b
                           00008C   201 _TR0	=	0x008c
                           00008D   202 _TF0	=	0x008d
                           00008E   203 _TR1	=	0x008e
                           00008F   204 _TF1	=	0x008f
                           000090   205 _P1_0	=	0x0090
                           000091   206 _P1_1	=	0x0091
                           000092   207 _P1_2	=	0x0092
                           000093   208 _P1_3	=	0x0093
                           000094   209 _P1_4	=	0x0094
                           000095   210 _P1_5	=	0x0095
                           000096   211 _P1_6	=	0x0096
                           000097   212 _P1_7	=	0x0097
                           000090   213 _T2	=	0x0090
                           000091   214 _T2EX	=	0x0091
                           000098   215 _RI	=	0x0098
                           000099   216 _TI	=	0x0099
                           00009A   217 _RB8	=	0x009a
                           00009B   218 _TB8	=	0x009b
                           00009C   219 _REN	=	0x009c
                           00009D   220 _SM2	=	0x009d
                           00009E   221 _SM1	=	0x009e
                           00009F   222 _SM0	=	0x009f
                           0000A0   223 _P2_0	=	0x00a0
                           0000A1   224 _P2_1	=	0x00a1
                           0000A2   225 _P2_2	=	0x00a2
                           0000A3   226 _P2_3	=	0x00a3
                           0000A4   227 _P2_4	=	0x00a4
                           0000A5   228 _P2_5	=	0x00a5
                           0000A6   229 _P2_6	=	0x00a6
                           0000A7   230 _P2_7	=	0x00a7
                           0000A8   231 _EX0	=	0x00a8
                           0000A9   232 _ET0	=	0x00a9
                           0000AA   233 _EX1	=	0x00aa
                           0000AB   234 _ET1	=	0x00ab
                           0000AC   235 _ES	=	0x00ac
                           0000AD   236 _ET2	=	0x00ad
                           0000AF   237 _EA	=	0x00af
                           0000B0   238 _P3_0	=	0x00b0
                           0000B1   239 _P3_1	=	0x00b1
                           0000B2   240 _P3_2	=	0x00b2
                           0000B3   241 _P3_3	=	0x00b3
                           0000B4   242 _P3_4	=	0x00b4
                           0000B5   243 _P3_5	=	0x00b5
                           0000B6   244 _P3_6	=	0x00b6
                           0000B7   245 _P3_7	=	0x00b7
                           0000B0   246 _RXD	=	0x00b0
                           0000B1   247 _TXD	=	0x00b1
                           0000B2   248 _INT0	=	0x00b2
                           0000B3   249 _INT1	=	0x00b3
                           0000B4   250 _T0	=	0x00b4
                           0000B5   251 _T1	=	0x00b5
                           0000B6   252 _WR	=	0x00b6
                           0000B7   253 _RD	=	0x00b7
                           0000B8   254 _PX0	=	0x00b8
                           0000B9   255 _PT0	=	0x00b9
                           0000BA   256 _PX1	=	0x00ba
                           0000BB   257 _PT1	=	0x00bb
                           0000BC   258 _PS	=	0x00bc
                           0000BD   259 _PT2	=	0x00bd
                           0000C8   260 _T2CON_0	=	0x00c8
                           0000C9   261 _T2CON_1	=	0x00c9
                           0000CA   262 _T2CON_2	=	0x00ca
                           0000CB   263 _T2CON_3	=	0x00cb
                           0000CC   264 _T2CON_4	=	0x00cc
                           0000CD   265 _T2CON_5	=	0x00cd
                           0000CE   266 _T2CON_6	=	0x00ce
                           0000CF   267 _T2CON_7	=	0x00cf
                           0000C8   268 _CP_RL2	=	0x00c8
                           0000C9   269 _C_T2	=	0x00c9
                           0000CA   270 _TR2	=	0x00ca
                           0000CB   271 _EXEN2	=	0x00cb
                           0000CC   272 _TCLK	=	0x00cc
                           0000CD   273 _RCLK	=	0x00cd
                           0000CE   274 _EXF2	=	0x00ce
                           0000CF   275 _TF2	=	0x00cf
                           0000D0   276 _P	=	0x00d0
                           0000D1   277 _FL	=	0x00d1
                           0000D2   278 _OV	=	0x00d2
                           0000D3   279 _RS0	=	0x00d3
                           0000D4   280 _RS1	=	0x00d4
                           0000D5   281 _F0	=	0x00d5
                           0000D6   282 _AC	=	0x00d6
                           0000D7   283 _CY	=	0x00d7
                                    284 ;--------------------------------------------------------
                                    285 ; overlayable register banks
                                    286 ;--------------------------------------------------------
                                    287 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        288 	.ds 8
                                    289 ;--------------------------------------------------------
                                    290 ; internal ram data
                                    291 ;--------------------------------------------------------
                                    292 	.area DSEG    (DATA)
                                    293 ;--------------------------------------------------------
                                    294 ; overlayable items in internal ram 
                                    295 ;--------------------------------------------------------
                                    296 ;--------------------------------------------------------
                                    297 ; Stack segment in internal ram 
                                    298 ;--------------------------------------------------------
                                    299 	.area	SSEG
      000000                        300 __start__stack:
      000000                        301 	.ds	1
                                    302 
                                    303 ;--------------------------------------------------------
                                    304 ; indirectly addressable internal ram data
                                    305 ;--------------------------------------------------------
                                    306 	.area ISEG    (DATA)
      000000                        307 _giant::
      000000                        308 	.ds 1
                                    309 ;--------------------------------------------------------
                                    310 ; absolute internal ram data
                                    311 ;--------------------------------------------------------
                                    312 	.area IABS    (ABS,DATA)
                                    313 	.area IABS    (ABS,DATA)
                                    314 ;--------------------------------------------------------
                                    315 ; bit data
                                    316 ;--------------------------------------------------------
                                    317 	.area BSEG    (BIT)
                                    318 ;--------------------------------------------------------
                                    319 ; paged external ram data
                                    320 ;--------------------------------------------------------
                                    321 	.area PSEG    (PAG,XDATA)
                                    322 ;--------------------------------------------------------
                                    323 ; external ram data
                                    324 ;--------------------------------------------------------
                                    325 	.area XSEG    (XDATA)
      000000                        326 _s:
      000000                        327 	.ds 12
      00000C                        328 _c:
      00000C                        329 	.ds 16407
                                    330 ;--------------------------------------------------------
                                    331 ; absolute external ram data
                                    332 ;--------------------------------------------------------
                                    333 	.area XABS    (ABS,XDATA)
                                    334 ;--------------------------------------------------------
                                    335 ; external initialized ram data
                                    336 ;--------------------------------------------------------
                                    337 	.area XISEG   (XDATA)
      000000                        338 _deltas:
      000000                        339 	.ds 170
                                    340 	.area HOME    (CODE)
                                    341 	.area GSINIT0 (CODE)
                                    342 	.area GSINIT1 (CODE)
                                    343 	.area GSINIT2 (CODE)
                                    344 	.area GSINIT3 (CODE)
                                    345 	.area GSINIT4 (CODE)
                                    346 	.area GSINIT5 (CODE)
                                    347 	.area GSINIT  (CODE)
                                    348 	.area GSFINAL (CODE)
                                    349 	.area CSEG    (CODE)
                                    350 ;--------------------------------------------------------
                                    351 ; interrupt vector 
                                    352 ;--------------------------------------------------------
                                    353 	.area HOME    (CODE)
      000000                        354 __interrupt_vect:
      000000 02r00r00         [24]  355 	ljmp	__sdcc_gsinit_startup
                                    356 ;--------------------------------------------------------
                                    357 ; global & static initialisations
                                    358 ;--------------------------------------------------------
                                    359 	.area HOME    (CODE)
                                    360 	.area GSINIT  (CODE)
                                    361 	.area GSFINAL (CODE)
                                    362 	.area GSINIT  (CODE)
                                    363 	.globl __sdcc_gsinit_startup
                                    364 	.globl __sdcc_program_startup
                                    365 	.globl __start__stack
                                    366 	.globl __mcs51_genXINIT
                                    367 	.globl __mcs51_genXRAMCLEAR
                                    368 	.globl __mcs51_genRAMCLEAR
                                    369 	.area GSFINAL (CODE)
      000000 02r00r03         [24]  370 	ljmp	__sdcc_program_startup
                                    371 ;--------------------------------------------------------
                                    372 ; Home
                                    373 ;--------------------------------------------------------
                                    374 	.area HOME    (CODE)
                                    375 	.area HOME    (CODE)
      000003                        376 __sdcc_program_startup:
      000003 02r2CrB9         [24]  377 	ljmp	_main
                                    378 ;	return from main will return to caller
                                    379 ;--------------------------------------------------------
                                    380 ; code
                                    381 ;--------------------------------------------------------
                                    382 	.area CSEG    (CODE)
                                    383 ;------------------------------------------------------------
                                    384 ;Allocation info for local variables in function 'accumulate'
                                    385 ;------------------------------------------------------------
                                    386 ;delta                     Allocated to stack - _bp -5
                                    387 ;_ctx                      Allocated to registers r5 r6 r7 
                                    388 ;ctx                       Allocated to stack - _bp +8
                                    389 ;d                         Allocated to stack - _bp +11
                                    390 ;sloc0                     Allocated to stack - _bp +1
                                    391 ;sloc1                     Allocated to stack - _bp +4
                                    392 ;------------------------------------------------------------
                                    393 ;	calc.c:26: static int accumulate(void *_ctx, delta_t *delta) __reentrant {
                                    394 ;	-----------------------------------------
                                    395 ;	 function accumulate
                                    396 ;	-----------------------------------------
      000000                        397 _accumulate:
                           000007   398 	ar7 = 0x07
                           000006   399 	ar6 = 0x06
                           000005   400 	ar5 = 0x05
                           000004   401 	ar4 = 0x04
                           000003   402 	ar3 = 0x03
                           000002   403 	ar2 = 0x02
                           000001   404 	ar1 = 0x01
                           000000   405 	ar0 = 0x00
      000000 C0*00            [24]  406 	push	_bp
      000002 E5 81            [12]  407 	mov	a,sp
      000004 F5*00            [12]  408 	mov	_bp,a
      000006 24 0E            [12]  409 	add	a,#0x0e
      000008 F5 81            [12]  410 	mov	sp,a
      00000A AD 82            [24]  411 	mov	r5,dpl
      00000C AE 83            [24]  412 	mov	r6,dph
      00000E AF F0            [24]  413 	mov	r7,b
                                    414 ;	calc.c:27: calc_ctx_t *ctx = (calc_ctx_t *)_ctx;
      000010 E5*00            [12]  415 	mov	a,_bp
      000012 24 08            [12]  416 	add	a,#0x08
      000014 F8               [12]  417 	mov	r0,a
      000015 A6 05            [24]  418 	mov	@r0,ar5
      000017 08               [12]  419 	inc	r0
      000018 A6 06            [24]  420 	mov	@r0,ar6
      00001A 08               [12]  421 	inc	r0
      00001B A6 07            [24]  422 	mov	@r0,ar7
                                    423 ;	calc.c:32: if (!ctx->acc_valid) {
      00001D E5*00            [12]  424 	mov	a,_bp
      00001F 24 08            [12]  425 	add	a,#0x08
      000021 F8               [12]  426 	mov	r0,a
      000022 74 06            [12]  427 	mov	a,#0x06
      000024 26               [12]  428 	add	a,@r0
      000025 FA               [12]  429 	mov	r2,a
      000026 E4               [12]  430 	clr	a
      000027 08               [12]  431 	inc	r0
      000028 36               [12]  432 	addc	a,@r0
      000029 FB               [12]  433 	mov	r3,a
      00002A 08               [12]  434 	inc	r0
      00002B 86 04            [24]  435 	mov	ar4,@r0
      00002D 8A 82            [24]  436 	mov	dpl,r2
      00002F 8B 83            [24]  437 	mov	dph,r3
      000031 8C F0            [24]  438 	mov	b,r4
      000033 12r00r00         [24]  439 	lcall	__gptrget
      000036 70 31            [24]  440 	jnz	00102$
                                    441 ;	calc.c:33: ctx->acc_valid = 1;
      000038 8A 82            [24]  442 	mov	dpl,r2
      00003A 8B 83            [24]  443 	mov	dph,r3
      00003C 8C F0            [24]  444 	mov	b,r4
      00003E 74 01            [12]  445 	mov	a,#0x01
      000040 12r00r00         [24]  446 	lcall	__gptrput
                                    447 ;	calc.c:34: ctx->acc = 0l;
      000043 E5*00            [12]  448 	mov	a,_bp
      000045 24 08            [12]  449 	add	a,#0x08
      000047 F8               [12]  450 	mov	r0,a
      000048 74 02            [12]  451 	mov	a,#0x02
      00004A 26               [12]  452 	add	a,@r0
      00004B FA               [12]  453 	mov	r2,a
      00004C E4               [12]  454 	clr	a
      00004D 08               [12]  455 	inc	r0
      00004E 36               [12]  456 	addc	a,@r0
      00004F FB               [12]  457 	mov	r3,a
      000050 08               [12]  458 	inc	r0
      000051 86 04            [24]  459 	mov	ar4,@r0
      000053 8A 82            [24]  460 	mov	dpl,r2
      000055 8B 83            [24]  461 	mov	dph,r3
      000057 8C F0            [24]  462 	mov	b,r4
      000059 E4               [12]  463 	clr	a
      00005A 12r00r00         [24]  464 	lcall	__gptrput
      00005D A3               [24]  465 	inc	dptr
      00005E 12r00r00         [24]  466 	lcall	__gptrput
      000061 A3               [24]  467 	inc	dptr
      000062 12r00r00         [24]  468 	lcall	__gptrput
      000065 A3               [24]  469 	inc	dptr
      000066 12r00r00         [24]  470 	lcall	__gptrput
      000069                        471 00102$:
                                    472 ;	calc.c:37: d = strtol(ctx->digit, NULL, ctx->base);
      000069 E5*00            [12]  473 	mov	a,_bp
      00006B 24 08            [12]  474 	add	a,#0x08
      00006D F8               [12]  475 	mov	r0,a
      00006E 86 82            [24]  476 	mov	dpl,@r0
      000070 08               [12]  477 	inc	r0
      000071 86 83            [24]  478 	mov	dph,@r0
      000073 08               [12]  479 	inc	r0
      000074 86 F0            [24]  480 	mov	b,@r0
      000076 12r00r00         [24]  481 	lcall	__gptrget
      000079 FB               [12]  482 	mov	r3,a
      00007A A3               [24]  483 	inc	dptr
      00007B 12r00r00         [24]  484 	lcall	__gptrget
      00007E FC               [12]  485 	mov	r4,a
      00007F E5*00            [12]  486 	mov	a,_bp
      000081 24 08            [12]  487 	add	a,#0x08
      000083 F8               [12]  488 	mov	r0,a
      000084 74 07            [12]  489 	mov	a,#0x07
      000086 26               [12]  490 	add	a,@r0
      000087 FA               [12]  491 	mov	r2,a
      000088 E4               [12]  492 	clr	a
      000089 08               [12]  493 	inc	r0
      00008A 36               [12]  494 	addc	a,@r0
      00008B FE               [12]  495 	mov	r6,a
      00008C 08               [12]  496 	inc	r0
      00008D 86 07            [24]  497 	mov	ar7,@r0
      00008F C0 03            [24]  498 	push	ar3
      000091 C0 04            [24]  499 	push	ar4
      000093 E4               [12]  500 	clr	a
      000094 C0 E0            [24]  501 	push	acc
      000096 C0 E0            [24]  502 	push	acc
      000098 C0 E0            [24]  503 	push	acc
      00009A 8A 82            [24]  504 	mov	dpl,r2
      00009C 8E 83            [24]  505 	mov	dph,r6
      00009E 8F F0            [24]  506 	mov	b,r7
      0000A0 12r00r00         [24]  507 	lcall	_strtol
      0000A3 C8               [12]  508 	xch	a,r0
      0000A4 E5*00            [12]  509 	mov	a,_bp
      0000A6 24 0B            [12]  510 	add	a,#0x0b
      0000A8 C8               [12]  511 	xch	a,r0
      0000A9 A6 82            [24]  512 	mov	@r0,dpl
      0000AB 08               [12]  513 	inc	r0
      0000AC A6 83            [24]  514 	mov	@r0,dph
      0000AE 08               [12]  515 	inc	r0
      0000AF A6 F0            [24]  516 	mov	@r0,b
      0000B1 08               [12]  517 	inc	r0
      0000B2 F6               [12]  518 	mov	@r0,a
      0000B3 E5 81            [12]  519 	mov	a,sp
      0000B5 24 FB            [12]  520 	add	a,#0xfb
      0000B7 F5 81            [12]  521 	mov	sp,a
                                    522 ;	calc.c:38: ctx->acc = ctx->acc * (long)ctx->base + d;
      0000B9 E5*00            [12]  523 	mov	a,_bp
      0000BB 24 08            [12]  524 	add	a,#0x08
      0000BD F8               [12]  525 	mov	r0,a
      0000BE A9*00            [24]  526 	mov	r1,_bp
      0000C0 09               [12]  527 	inc	r1
      0000C1 74 02            [12]  528 	mov	a,#0x02
      0000C3 26               [12]  529 	add	a,@r0
      0000C4 F7               [12]  530 	mov	@r1,a
      0000C5 E4               [12]  531 	clr	a
      0000C6 08               [12]  532 	inc	r0
      0000C7 36               [12]  533 	addc	a,@r0
      0000C8 09               [12]  534 	inc	r1
      0000C9 F7               [12]  535 	mov	@r1,a
      0000CA 08               [12]  536 	inc	r0
      0000CB 09               [12]  537 	inc	r1
      0000CC E6               [12]  538 	mov	a,@r0
      0000CD F7               [12]  539 	mov	@r1,a
      0000CE A8*00            [24]  540 	mov	r0,_bp
      0000D0 08               [12]  541 	inc	r0
      0000D1 86 82            [24]  542 	mov	dpl,@r0
      0000D3 08               [12]  543 	inc	r0
      0000D4 86 83            [24]  544 	mov	dph,@r0
      0000D6 08               [12]  545 	inc	r0
      0000D7 86 F0            [24]  546 	mov	b,@r0
      0000D9 E5*00            [12]  547 	mov	a,_bp
      0000DB 24 04            [12]  548 	add	a,#0x04
      0000DD F9               [12]  549 	mov	r1,a
      0000DE 12r00r00         [24]  550 	lcall	__gptrget
      0000E1 F7               [12]  551 	mov	@r1,a
      0000E2 A3               [24]  552 	inc	dptr
      0000E3 12r00r00         [24]  553 	lcall	__gptrget
      0000E6 09               [12]  554 	inc	r1
      0000E7 F7               [12]  555 	mov	@r1,a
      0000E8 A3               [24]  556 	inc	dptr
      0000E9 12r00r00         [24]  557 	lcall	__gptrget
      0000EC 09               [12]  558 	inc	r1
      0000ED F7               [12]  559 	mov	@r1,a
      0000EE A3               [24]  560 	inc	dptr
      0000EF 12r00r00         [24]  561 	lcall	__gptrget
      0000F2 09               [12]  562 	inc	r1
      0000F3 F7               [12]  563 	mov	@r1,a
      0000F4 E5*00            [12]  564 	mov	a,_bp
      0000F6 24 08            [12]  565 	add	a,#0x08
      0000F8 F8               [12]  566 	mov	r0,a
      0000F9 86 82            [24]  567 	mov	dpl,@r0
      0000FB 08               [12]  568 	inc	r0
      0000FC 86 83            [24]  569 	mov	dph,@r0
      0000FE 08               [12]  570 	inc	r0
      0000FF 86 F0            [24]  571 	mov	b,@r0
      000101 12r00r00         [24]  572 	lcall	__gptrget
      000104 FA               [12]  573 	mov	r2,a
      000105 A3               [24]  574 	inc	dptr
      000106 12r00r00         [24]  575 	lcall	__gptrget
      000109 FB               [12]  576 	mov	r3,a
      00010A 33               [12]  577 	rlc	a
      00010B 95 E0            [12]  578 	subb	a,acc
      00010D FE               [12]  579 	mov	r6,a
      00010E FF               [12]  580 	mov	r7,a
      00010F C0 02            [24]  581 	push	ar2
      000111 C0 03            [24]  582 	push	ar3
      000113 C0 06            [24]  583 	push	ar6
      000115 C0 07            [24]  584 	push	ar7
      000117 E5*00            [12]  585 	mov	a,_bp
      000119 24 04            [12]  586 	add	a,#0x04
      00011B F8               [12]  587 	mov	r0,a
      00011C 86 82            [24]  588 	mov	dpl,@r0
      00011E 08               [12]  589 	inc	r0
      00011F 86 83            [24]  590 	mov	dph,@r0
      000121 08               [12]  591 	inc	r0
      000122 86 F0            [24]  592 	mov	b,@r0
      000124 08               [12]  593 	inc	r0
      000125 E6               [12]  594 	mov	a,@r0
      000126 12r00r00         [24]  595 	lcall	__mullong
      000129 AC 82            [24]  596 	mov	r4,dpl
      00012B AD 83            [24]  597 	mov	r5,dph
      00012D AE F0            [24]  598 	mov	r6,b
      00012F FF               [12]  599 	mov	r7,a
      000130 E5 81            [12]  600 	mov	a,sp
      000132 24 FC            [12]  601 	add	a,#0xfc
      000134 F5 81            [12]  602 	mov	sp,a
      000136 E5*00            [12]  603 	mov	a,_bp
      000138 24 0B            [12]  604 	add	a,#0x0b
      00013A F8               [12]  605 	mov	r0,a
      00013B E6               [12]  606 	mov	a,@r0
      00013C 2C               [12]  607 	add	a,r4
      00013D FC               [12]  608 	mov	r4,a
      00013E 08               [12]  609 	inc	r0
      00013F E6               [12]  610 	mov	a,@r0
      000140 3D               [12]  611 	addc	a,r5
      000141 FD               [12]  612 	mov	r5,a
      000142 08               [12]  613 	inc	r0
      000143 E6               [12]  614 	mov	a,@r0
      000144 3E               [12]  615 	addc	a,r6
      000145 FE               [12]  616 	mov	r6,a
      000146 08               [12]  617 	inc	r0
      000147 E6               [12]  618 	mov	a,@r0
      000148 3F               [12]  619 	addc	a,r7
      000149 FF               [12]  620 	mov	r7,a
      00014A A8*00            [24]  621 	mov	r0,_bp
      00014C 08               [12]  622 	inc	r0
      00014D 86 82            [24]  623 	mov	dpl,@r0
      00014F 08               [12]  624 	inc	r0
      000150 86 83            [24]  625 	mov	dph,@r0
      000152 08               [12]  626 	inc	r0
      000153 86 F0            [24]  627 	mov	b,@r0
      000155 EC               [12]  628 	mov	a,r4
      000156 12r00r00         [24]  629 	lcall	__gptrput
      000159 A3               [24]  630 	inc	dptr
      00015A ED               [12]  631 	mov	a,r5
      00015B 12r00r00         [24]  632 	lcall	__gptrput
      00015E A3               [24]  633 	inc	dptr
      00015F EE               [12]  634 	mov	a,r6
      000160 12r00r00         [24]  635 	lcall	__gptrput
      000163 A3               [24]  636 	inc	dptr
      000164 EF               [12]  637 	mov	a,r7
      000165 12r00r00         [24]  638 	lcall	__gptrput
                                    639 ;	calc.c:40: return 1;
      000168 90 00 01         [24]  640 	mov	dptr,#0x0001
                                    641 ;	calc.c:41: }
      00016B 85*00 81         [24]  642 	mov	sp,_bp
      00016E D0*00            [24]  643 	pop	_bp
      000170 22               [24]  644 	ret
                                    645 ;------------------------------------------------------------
                                    646 ;Allocation info for local variables in function 'dump_pop'
                                    647 ;------------------------------------------------------------
                                    648 ;delta                     Allocated to stack - _bp -5
                                    649 ;_ctx                      Allocated to registers r5 r6 r7 
                                    650 ;ctx                       Allocated to stack - _bp +11
                                    651 ;d                         Allocated to stack - _bp +14
                                    652 ;r                         Allocated to registers r5 r6 
                                    653 ;__1966080001              Allocated to stack - _bp +18
                                    654 ;d                         Allocated to registers r2 r3 r4 r5 
                                    655 ;__3276800003              Allocated to stack - _bp +18
                                    656 ;d                         Allocated to registers r2 r3 r4 r7 
                                    657 ;sloc0                     Allocated to stack - _bp +1
                                    658 ;sloc1                     Allocated to stack - _bp +4
                                    659 ;sloc2                     Allocated to stack - _bp +7
                                    660 ;sloc3                     Allocated to stack - _bp +8
                                    661 ;------------------------------------------------------------
                                    662 ;	calc.c:43: static int dump_pop(void *_ctx, delta_t *delta) __reentrant {
                                    663 ;	-----------------------------------------
                                    664 ;	 function dump_pop
                                    665 ;	-----------------------------------------
      000171                        666 _dump_pop:
      000171 C0*00            [24]  667 	push	_bp
      000173 E5 81            [12]  668 	mov	a,sp
      000175 F5*00            [12]  669 	mov	_bp,a
      000177 24 15            [12]  670 	add	a,#0x15
      000179 F5 81            [12]  671 	mov	sp,a
      00017B AD 82            [24]  672 	mov	r5,dpl
      00017D AE 83            [24]  673 	mov	r6,dph
      00017F AF F0            [24]  674 	mov	r7,b
                                    675 ;	calc.c:44: calc_ctx_t *ctx = (calc_ctx_t *)_ctx;
      000181 E5*00            [12]  676 	mov	a,_bp
      000183 24 0B            [12]  677 	add	a,#0x0b
      000185 F8               [12]  678 	mov	r0,a
      000186 A6 05            [24]  679 	mov	@r0,ar5
      000188 08               [12]  680 	inc	r0
      000189 A6 06            [24]  681 	mov	@r0,ar6
      00018B 08               [12]  682 	inc	r0
      00018C A6 07            [24]  683 	mov	@r0,ar7
                                    684 ;	calc.c:48: if (delta->event == EVENT_TERM) printstr("\r\n");
      00018E E5*00            [12]  685 	mov	a,_bp
      000190 24 FB            [12]  686 	add	a,#0xfb
      000192 F8               [12]  687 	mov	r0,a
      000193 86 02            [24]  688 	mov	ar2,@r0
      000195 08               [12]  689 	inc	r0
      000196 86 03            [24]  690 	mov	ar3,@r0
      000198 08               [12]  691 	inc	r0
      000199 86 04            [24]  692 	mov	ar4,@r0
      00019B 74 02            [12]  693 	mov	a,#0x02
      00019D 2A               [12]  694 	add	a,r2
      00019E FA               [12]  695 	mov	r2,a
      00019F E4               [12]  696 	clr	a
      0001A0 3B               [12]  697 	addc	a,r3
      0001A1 FB               [12]  698 	mov	r3,a
      0001A2 8A 82            [24]  699 	mov	dpl,r2
      0001A4 8B 83            [24]  700 	mov	dph,r3
      0001A6 8C F0            [24]  701 	mov	b,r4
      0001A8 12r00r00         [24]  702 	lcall	__gptrget
      0001AB FE               [12]  703 	mov	r6,a
      0001AC A3               [24]  704 	inc	dptr
      0001AD 12r00r00         [24]  705 	lcall	__gptrget
      0001B0 FF               [12]  706 	mov	r7,a
      0001B1 BE 08 18         [24]  707 	cjne	r6,#0x08,00102$
      0001B4 BF 00 15         [24]  708 	cjne	r7,#0x00,00102$
      0001B7 90r00r17         [24]  709 	mov	dptr,#___str_3
      0001BA 75 F0 80         [24]  710 	mov	b,#0x80
      0001BD C0 04            [24]  711 	push	ar4
      0001BF C0 03            [24]  712 	push	ar3
      0001C1 C0 02            [24]  713 	push	ar2
      0001C3 12r00r00         [24]  714 	lcall	_printstr
      0001C6 D0 02            [24]  715 	pop	ar2
      0001C8 D0 03            [24]  716 	pop	ar3
      0001CA D0 04            [24]  717 	pop	ar4
      0001CC                        718 00102$:
                                    719 ;	calc.c:49: r = stack_pop(ctx->ps, &d);
      0001CC C0 02            [24]  720 	push	ar2
      0001CE C0 03            [24]  721 	push	ar3
      0001D0 C0 04            [24]  722 	push	ar4
      0001D2 E5*00            [12]  723 	mov	a,_bp
      0001D4 24 0E            [12]  724 	add	a,#0x0e
      0001D6 FF               [12]  725 	mov	r7,a
      0001D7 E5*00            [12]  726 	mov	a,_bp
      0001D9 24 04            [12]  727 	add	a,#0x04
      0001DB F8               [12]  728 	mov	r0,a
      0001DC A6 07            [24]  729 	mov	@r0,ar7
      0001DE 08               [12]  730 	inc	r0
      0001DF 76 00            [12]  731 	mov	@r0,#0x00
      0001E1 08               [12]  732 	inc	r0
      0001E2 76 40            [12]  733 	mov	@r0,#0x40
      0001E4 E5*00            [12]  734 	mov	a,_bp
      0001E6 24 0B            [12]  735 	add	a,#0x0b
      0001E8 F8               [12]  736 	mov	r0,a
      0001E9 A9*00            [24]  737 	mov	r1,_bp
      0001EB 09               [12]  738 	inc	r1
      0001EC 74 11            [12]  739 	mov	a,#0x11
      0001EE 26               [12]  740 	add	a,@r0
      0001EF F7               [12]  741 	mov	@r1,a
      0001F0 74 40            [12]  742 	mov	a,#0x40
      0001F2 08               [12]  743 	inc	r0
      0001F3 36               [12]  744 	addc	a,@r0
      0001F4 09               [12]  745 	inc	r1
      0001F5 F7               [12]  746 	mov	@r1,a
      0001F6 08               [12]  747 	inc	r0
      0001F7 09               [12]  748 	inc	r1
      0001F8 E6               [12]  749 	mov	a,@r0
      0001F9 F7               [12]  750 	mov	@r1,a
      0001FA A8*00            [24]  751 	mov	r0,_bp
      0001FC 08               [12]  752 	inc	r0
      0001FD 86 82            [24]  753 	mov	dpl,@r0
      0001FF 08               [12]  754 	inc	r0
      000200 86 83            [24]  755 	mov	dph,@r0
      000202 08               [12]  756 	inc	r0
      000203 86 F0            [24]  757 	mov	b,@r0
      000205 12r00r00         [24]  758 	lcall	__gptrget
      000208 FA               [12]  759 	mov	r2,a
      000209 A3               [24]  760 	inc	dptr
      00020A 12r00r00         [24]  761 	lcall	__gptrget
      00020D FB               [12]  762 	mov	r3,a
      00020E A3               [24]  763 	inc	dptr
      00020F 12r00r00         [24]  764 	lcall	__gptrget
      000212 FE               [12]  765 	mov	r6,a
      000213 C0 07            [24]  766 	push	ar7
      000215 C0 04            [24]  767 	push	ar4
      000217 C0 03            [24]  768 	push	ar3
      000219 C0 02            [24]  769 	push	ar2
      00021B E5*00            [12]  770 	mov	a,_bp
      00021D 24 04            [12]  771 	add	a,#0x04
      00021F F8               [12]  772 	mov	r0,a
      000220 E6               [12]  773 	mov	a,@r0
      000221 C0 E0            [24]  774 	push	acc
      000223 08               [12]  775 	inc	r0
      000224 E6               [12]  776 	mov	a,@r0
      000225 C0 E0            [24]  777 	push	acc
      000227 08               [12]  778 	inc	r0
      000228 E6               [12]  779 	mov	a,@r0
      000229 C0 E0            [24]  780 	push	acc
      00022B 8A 82            [24]  781 	mov	dpl,r2
      00022D 8B 83            [24]  782 	mov	dph,r3
      00022F 8E F0            [24]  783 	mov	b,r6
      000231 12r00r00         [24]  784 	lcall	_stack_pop
      000234 AE 82            [24]  785 	mov	r6,dpl
      000236 AD 83            [24]  786 	mov	r5,dph
      000238 15 81            [12]  787 	dec	sp
      00023A 15 81            [12]  788 	dec	sp
      00023C 15 81            [12]  789 	dec	sp
      00023E D0 02            [24]  790 	pop	ar2
      000240 D0 03            [24]  791 	pop	ar3
      000242 D0 04            [24]  792 	pop	ar4
      000244 D0 07            [24]  793 	pop	ar7
                                    794 ;	calc.c:50: if (!r) {
      000246 D0 04            [24]  795 	pop	ar4
      000248 D0 03            [24]  796 	pop	ar3
      00024A D0 02            [24]  797 	pop	ar2
      00024C EE               [12]  798 	mov	a,r6
      00024D 4D               [12]  799 	orl	a,r5
      00024E 70 34            [24]  800 	jnz	00125$
                                    801 ;	calc.c:51: if (delta->event != EVENT_TERM) printstr("stack underflow\r\n");
      000250 8A 82            [24]  802 	mov	dpl,r2
      000252 8B 83            [24]  803 	mov	dph,r3
      000254 8C F0            [24]  804 	mov	b,r4
      000256 12r00r00         [24]  805 	lcall	__gptrget
      000259 FD               [12]  806 	mov	r5,a
      00025A A3               [24]  807 	inc	dptr
      00025B 12r00r00         [24]  808 	lcall	__gptrget
      00025E FE               [12]  809 	mov	r6,a
      00025F BD 08 06         [24]  810 	cjne	r5,#0x08,00164$
      000262 BE 00 03         [24]  811 	cjne	r6,#0x00,00164$
      000265 02r03rF0         [24]  812 	ljmp	00110$
      000268                        813 00164$:
      000268 90r00r1A         [24]  814 	mov	dptr,#___str_4
      00026B 75 F0 80         [24]  815 	mov	b,#0x80
      00026E C0 07            [24]  816 	push	ar7
      000270 C0 04            [24]  817 	push	ar4
      000272 C0 03            [24]  818 	push	ar3
      000274 C0 02            [24]  819 	push	ar2
      000276 12r00r00         [24]  820 	lcall	_printstr
      000279 D0 02            [24]  821 	pop	ar2
      00027B D0 03            [24]  822 	pop	ar3
      00027D D0 04            [24]  823 	pop	ar4
      00027F D0 07            [24]  824 	pop	ar7
      000281 02r03rF0         [24]  825 	ljmp	00110$
                                    826 ;	calc.c:52: } else while (r > 0) {
      000284                        827 00125$:
      000284 E5*00            [12]  828 	mov	a,_bp
      000286 24 07            [12]  829 	add	a,#0x07
      000288 F8               [12]  830 	mov	r0,a
      000289 A6 07            [24]  831 	mov	@r0,ar7
      00028B                        832 00105$:
      00028B C3               [12]  833 	clr	c
      00028C E4               [12]  834 	clr	a
      00028D 9E               [12]  835 	subb	a,r6
      00028E 74 80            [12]  836 	mov	a,#(0x00 ^ 0x80)
      000290 8D F0            [24]  837 	mov	b,r5
      000292 63 F0 80         [24]  838 	xrl	b,#0x80
      000295 95 F0            [12]  839 	subb	a,b
      000297 40 03            [24]  840 	jc	00165$
      000299 02r03rF0         [24]  841 	ljmp	00110$
      00029C                        842 00165$:
                                    843 ;	calc.c:53: printstr("PSPA\t");
      00029C C0 02            [24]  844 	push	ar2
      00029E C0 03            [24]  845 	push	ar3
      0002A0 C0 04            [24]  846 	push	ar4
      0002A2 90r00r2C         [24]  847 	mov	dptr,#___str_5
      0002A5 75 F0 80         [24]  848 	mov	b,#0x80
      0002A8 C0 07            [24]  849 	push	ar7
      0002AA C0 04            [24]  850 	push	ar4
      0002AC C0 03            [24]  851 	push	ar3
      0002AE C0 02            [24]  852 	push	ar2
      0002B0 12r00r00         [24]  853 	lcall	_printstr
      0002B3 D0 02            [24]  854 	pop	ar2
      0002B5 D0 03            [24]  855 	pop	ar3
      0002B7 D0 04            [24]  856 	pop	ar4
                                    857 ;	calc.c:54: printall(d);
      0002B9 E5*00            [12]  858 	mov	a,_bp
      0002BB 24 0E            [12]  859 	add	a,#0x0e
      0002BD F8               [12]  860 	mov	r0,a
      0002BE E5*00            [12]  861 	mov	a,_bp
      0002C0 24 12            [12]  862 	add	a,#0x12
      0002C2 F9               [12]  863 	mov	r1,a
      0002C3 E6               [12]  864 	mov	a,@r0
      0002C4 F7               [12]  865 	mov	@r1,a
      0002C5 08               [12]  866 	inc	r0
      0002C6 09               [12]  867 	inc	r1
      0002C7 E6               [12]  868 	mov	a,@r0
      0002C8 F7               [12]  869 	mov	@r1,a
      0002C9 08               [12]  870 	inc	r0
      0002CA 09               [12]  871 	inc	r1
      0002CB E6               [12]  872 	mov	a,@r0
      0002CC F7               [12]  873 	mov	@r1,a
      0002CD 08               [12]  874 	inc	r0
      0002CE 09               [12]  875 	inc	r1
      0002CF E6               [12]  876 	mov	a,@r0
      0002D0 F7               [12]  877 	mov	@r1,a
      0002D1 E5*00            [12]  878 	mov	a,_bp
      0002D3 24 12            [12]  879 	add	a,#0x12
      0002D5 F8               [12]  880 	mov	r0,a
      0002D6 86 02            [24]  881 	mov	ar2,@r0
      0002D8 08               [12]  882 	inc	r0
      0002D9 86 03            [24]  883 	mov	ar3,@r0
      0002DB 08               [12]  884 	inc	r0
      0002DC 86 04            [24]  885 	mov	ar4,@r0
      0002DE 08               [12]  886 	inc	r0
      0002DF 86 05            [24]  887 	mov	ar5,@r0
                                    888 ;	calc.c:18: printf("%08lx\t", d);
      0002E1 C0 05            [24]  889 	push	ar5
      0002E3 C0 04            [24]  890 	push	ar4
      0002E5 C0 03            [24]  891 	push	ar3
      0002E7 C0 02            [24]  892 	push	ar2
      0002E9 E5*00            [12]  893 	mov	a,_bp
      0002EB 24 12            [12]  894 	add	a,#0x12
      0002ED F8               [12]  895 	mov	r0,a
      0002EE E6               [12]  896 	mov	a,@r0
      0002EF C0 E0            [24]  897 	push	acc
      0002F1 08               [12]  898 	inc	r0
      0002F2 E6               [12]  899 	mov	a,@r0
      0002F3 C0 E0            [24]  900 	push	acc
      0002F5 08               [12]  901 	inc	r0
      0002F6 E6               [12]  902 	mov	a,@r0
      0002F7 C0 E0            [24]  903 	push	acc
      0002F9 08               [12]  904 	inc	r0
      0002FA E6               [12]  905 	mov	a,@r0
      0002FB C0 E0            [24]  906 	push	acc
      0002FD 74r00            [12]  907 	mov	a,#___str_0
      0002FF C0 E0            [24]  908 	push	acc
      000301 74s00            [12]  909 	mov	a,#(___str_0 >> 8)
      000303 C0 E0            [24]  910 	push	acc
      000305 74 80            [12]  911 	mov	a,#0x80
      000307 C0 E0            [24]  912 	push	acc
      000309 12r00r00         [24]  913 	lcall	_printf
      00030C E5 81            [12]  914 	mov	a,sp
      00030E 24 F9            [12]  915 	add	a,#0xf9
      000310 F5 81            [12]  916 	mov	sp,a
      000312 D0 02            [24]  917 	pop	ar2
      000314 D0 03            [24]  918 	pop	ar3
      000316 D0 04            [24]  919 	pop	ar4
      000318 D0 05            [24]  920 	pop	ar5
                                    921 ;	calc.c:19: printf("% 11ld\t", d);
      00031A C0 05            [24]  922 	push	ar5
      00031C C0 04            [24]  923 	push	ar4
      00031E C0 03            [24]  924 	push	ar3
      000320 C0 02            [24]  925 	push	ar2
      000322 C0 02            [24]  926 	push	ar2
      000324 C0 03            [24]  927 	push	ar3
      000326 C0 04            [24]  928 	push	ar4
      000328 C0 05            [24]  929 	push	ar5
      00032A 74r07            [12]  930 	mov	a,#___str_1
      00032C C0 E0            [24]  931 	push	acc
      00032E 74s00            [12]  932 	mov	a,#(___str_1 >> 8)
      000330 C0 E0            [24]  933 	push	acc
      000332 74 80            [12]  934 	mov	a,#0x80
      000334 C0 E0            [24]  935 	push	acc
      000336 12r00r00         [24]  936 	lcall	_printf
      000339 E5 81            [12]  937 	mov	a,sp
      00033B 24 F9            [12]  938 	add	a,#0xf9
      00033D F5 81            [12]  939 	mov	sp,a
      00033F D0 02            [24]  940 	pop	ar2
      000341 D0 03            [24]  941 	pop	ar3
      000343 D0 04            [24]  942 	pop	ar4
      000345 D0 05            [24]  943 	pop	ar5
                                    944 ;	calc.c:20: printf("%011lo\t", d);
      000347 C0 05            [24]  945 	push	ar5
      000349 C0 04            [24]  946 	push	ar4
      00034B C0 03            [24]  947 	push	ar3
      00034D C0 02            [24]  948 	push	ar2
      00034F C0 02            [24]  949 	push	ar2
      000351 C0 03            [24]  950 	push	ar3
      000353 C0 04            [24]  951 	push	ar4
      000355 C0 05            [24]  952 	push	ar5
      000357 74r0F            [12]  953 	mov	a,#___str_2
      000359 C0 E0            [24]  954 	push	acc
      00035B 74s00            [12]  955 	mov	a,#(___str_2 >> 8)
      00035D C0 E0            [24]  956 	push	acc
      00035F 74 80            [12]  957 	mov	a,#0x80
      000361 C0 E0            [24]  958 	push	acc
      000363 12r00r00         [24]  959 	lcall	_printf
      000366 E5 81            [12]  960 	mov	a,sp
      000368 24 F9            [12]  961 	add	a,#0xf9
      00036A F5 81            [12]  962 	mov	sp,a
      00036C D0 02            [24]  963 	pop	ar2
      00036E D0 03            [24]  964 	pop	ar3
      000370 D0 04            [24]  965 	pop	ar4
      000372 D0 05            [24]  966 	pop	ar5
                                    967 ;	calc.c:21: print32bin(d);
      000374 8A 82            [24]  968 	mov	dpl,r2
      000376 8B 83            [24]  969 	mov	dph,r3
      000378 8C F0            [24]  970 	mov	b,r4
      00037A ED               [12]  971 	mov	a,r5
      00037B C0 04            [24]  972 	push	ar4
      00037D C0 03            [24]  973 	push	ar3
      00037F C0 02            [24]  974 	push	ar2
      000381 12r00r00         [24]  975 	lcall	_print32bin
                                    976 ;	calc.c:55: printstr("\r\n");
      000384 90r00r17         [24]  977 	mov	dptr,#___str_3
      000387 75 F0 80         [24]  978 	mov	b,#0x80
      00038A 12r00r00         [24]  979 	lcall	_printstr
      00038D D0 02            [24]  980 	pop	ar2
                                    981 ;	calc.c:56: r = stack_pop(ctx->ps, &d);
      00038F E5*00            [12]  982 	mov	a,_bp
      000391 24 07            [12]  983 	add	a,#0x07
      000393 F8               [12]  984 	mov	r0,a
      000394 E5*00            [12]  985 	mov	a,_bp
      000396 24 08            [12]  986 	add	a,#0x08
      000398 F9               [12]  987 	mov	r1,a
      000399 E6               [12]  988 	mov	a,@r0
      00039A F7               [12]  989 	mov	@r1,a
      00039B 09               [12]  990 	inc	r1
      00039C 77 00            [12]  991 	mov	@r1,#0x00
      00039E 09               [12]  992 	inc	r1
      00039F 77 40            [12]  993 	mov	@r1,#0x40
      0003A1 A8*00            [24]  994 	mov	r0,_bp
      0003A3 08               [12]  995 	inc	r0
      0003A4 86 82            [24]  996 	mov	dpl,@r0
      0003A6 08               [12]  997 	inc	r0
      0003A7 86 83            [24]  998 	mov	dph,@r0
      0003A9 08               [12]  999 	inc	r0
      0003AA 86 F0            [24] 1000 	mov	b,@r0
      0003AC 12r00r00         [24] 1001 	lcall	__gptrget
      0003AF FA               [12] 1002 	mov	r2,a
      0003B0 A3               [24] 1003 	inc	dptr
      0003B1 12r00r00         [24] 1004 	lcall	__gptrget
      0003B4 FD               [12] 1005 	mov	r5,a
      0003B5 A3               [24] 1006 	inc	dptr
      0003B6 12r00r00         [24] 1007 	lcall	__gptrget
      0003B9 FE               [12] 1008 	mov	r6,a
      0003BA C0 02            [24] 1009 	push	ar2
      0003BC E5*00            [12] 1010 	mov	a,_bp
      0003BE 24 08            [12] 1011 	add	a,#0x08
      0003C0 F8               [12] 1012 	mov	r0,a
      0003C1 E6               [12] 1013 	mov	a,@r0
      0003C2 C0 E0            [24] 1014 	push	acc
      0003C4 08               [12] 1015 	inc	r0
      0003C5 E6               [12] 1016 	mov	a,@r0
      0003C6 C0 E0            [24] 1017 	push	acc
      0003C8 08               [12] 1018 	inc	r0
      0003C9 E6               [12] 1019 	mov	a,@r0
      0003CA C0 E0            [24] 1020 	push	acc
      0003CC 8A 82            [24] 1021 	mov	dpl,r2
      0003CE 8D 83            [24] 1022 	mov	dph,r5
      0003D0 8E F0            [24] 1023 	mov	b,r6
      0003D2 12r00r00         [24] 1024 	lcall	_stack_pop
      0003D5 AE 82            [24] 1025 	mov	r6,dpl
      0003D7 AD 83            [24] 1026 	mov	r5,dph
      0003D9 15 81            [12] 1027 	dec	sp
      0003DB 15 81            [12] 1028 	dec	sp
      0003DD 15 81            [12] 1029 	dec	sp
      0003DF D0 02            [24] 1030 	pop	ar2
      0003E1 D0 03            [24] 1031 	pop	ar3
      0003E3 D0 04            [24] 1032 	pop	ar4
      0003E5 D0 07            [24] 1033 	pop	ar7
      0003E7 D0 04            [24] 1034 	pop	ar4
      0003E9 D0 03            [24] 1035 	pop	ar3
      0003EB D0 02            [24] 1036 	pop	ar2
      0003ED 02r02r8B         [24] 1037 	ljmp	00105$
      0003F0                       1038 00110$:
                                   1039 ;	calc.c:59: if (delta->event == EVENT_TERM) {
      0003F0 8A 82            [24] 1040 	mov	dpl,r2
      0003F2 8B 83            [24] 1041 	mov	dph,r3
      0003F4 8C F0            [24] 1042 	mov	b,r4
      0003F6 12r00r00         [24] 1043 	lcall	__gptrget
      0003F9 FA               [12] 1044 	mov	r2,a
      0003FA A3               [24] 1045 	inc	dptr
      0003FB 12r00r00         [24] 1046 	lcall	__gptrget
      0003FE FB               [12] 1047 	mov	r3,a
      0003FF BA 08 05         [24] 1048 	cjne	r2,#0x08,00166$
      000402 BB 00 02         [24] 1049 	cjne	r3,#0x00,00166$
      000405 80 03            [24] 1050 	sjmp	00167$
      000407                       1051 00166$:
      000407 02r05rB5         [24] 1052 	ljmp	00113$
      00040A                       1053 00167$:
                                   1054 ;	calc.c:60: printstr("\r\n");
      00040A 90r00r17         [24] 1055 	mov	dptr,#___str_3
      00040D 75 F0 80         [24] 1056 	mov	b,#0x80
      000410 C0 07            [24] 1057 	push	ar7
      000412 12r00r00         [24] 1058 	lcall	_printstr
      000415 D0 07            [24] 1059 	pop	ar7
                                   1060 ;	calc.c:61: for (r = stack_pop(ctx->ss, &d); r > 0; r = stack_pop(ctx->ss, &d)) {
      000417 8F 06            [24] 1061 	mov	ar6,r7
      000419 E5*00            [12] 1062 	mov	a,_bp
      00041B 24 04            [12] 1063 	add	a,#0x04
      00041D F8               [12] 1064 	mov	r0,a
      00041E A6 06            [24] 1065 	mov	@r0,ar6
      000420 08               [12] 1066 	inc	r0
      000421 76 00            [12] 1067 	mov	@r0,#0x00
      000423 08               [12] 1068 	inc	r0
      000424 76 40            [12] 1069 	mov	@r0,#0x40
      000426 E5*00            [12] 1070 	mov	a,_bp
      000428 24 0B            [12] 1071 	add	a,#0x0b
      00042A F8               [12] 1072 	mov	r0,a
      00042B E5*00            [12] 1073 	mov	a,_bp
      00042D 24 08            [12] 1074 	add	a,#0x08
      00042F F9               [12] 1075 	mov	r1,a
      000430 74 14            [12] 1076 	mov	a,#0x14
      000432 26               [12] 1077 	add	a,@r0
      000433 F7               [12] 1078 	mov	@r1,a
      000434 74 40            [12] 1079 	mov	a,#0x40
      000436 08               [12] 1080 	inc	r0
      000437 36               [12] 1081 	addc	a,@r0
      000438 09               [12] 1082 	inc	r1
      000439 F7               [12] 1083 	mov	@r1,a
      00043A 08               [12] 1084 	inc	r0
      00043B 09               [12] 1085 	inc	r1
      00043C E6               [12] 1086 	mov	a,@r0
      00043D F7               [12] 1087 	mov	@r1,a
      00043E E5*00            [12] 1088 	mov	a,_bp
      000440 24 08            [12] 1089 	add	a,#0x08
      000442 F8               [12] 1090 	mov	r0,a
      000443 86 82            [24] 1091 	mov	dpl,@r0
      000445 08               [12] 1092 	inc	r0
      000446 86 83            [24] 1093 	mov	dph,@r0
      000448 08               [12] 1094 	inc	r0
      000449 86 F0            [24] 1095 	mov	b,@r0
      00044B 12r00r00         [24] 1096 	lcall	__gptrget
      00044E FA               [12] 1097 	mov	r2,a
      00044F A3               [24] 1098 	inc	dptr
      000450 12r00r00         [24] 1099 	lcall	__gptrget
      000453 FB               [12] 1100 	mov	r3,a
      000454 A3               [24] 1101 	inc	dptr
      000455 12r00r00         [24] 1102 	lcall	__gptrget
      000458 FE               [12] 1103 	mov	r6,a
      000459 C0 07            [24] 1104 	push	ar7
      00045B E5*00            [12] 1105 	mov	a,_bp
      00045D 24 04            [12] 1106 	add	a,#0x04
      00045F F8               [12] 1107 	mov	r0,a
      000460 E6               [12] 1108 	mov	a,@r0
      000461 C0 E0            [24] 1109 	push	acc
      000463 08               [12] 1110 	inc	r0
      000464 E6               [12] 1111 	mov	a,@r0
      000465 C0 E0            [24] 1112 	push	acc
      000467 08               [12] 1113 	inc	r0
      000468 E6               [12] 1114 	mov	a,@r0
      000469 C0 E0            [24] 1115 	push	acc
      00046B 8A 82            [24] 1116 	mov	dpl,r2
      00046D 8B 83            [24] 1117 	mov	dph,r3
      00046F 8E F0            [24] 1118 	mov	b,r6
      000471 12r00r00         [24] 1119 	lcall	_stack_pop
      000474 AD 82            [24] 1120 	mov	r5,dpl
      000476 AE 83            [24] 1121 	mov	r6,dph
      000478 15 81            [12] 1122 	dec	sp
      00047A 15 81            [12] 1123 	dec	sp
      00047C 15 81            [12] 1124 	dec	sp
      00047E D0 07            [24] 1125 	pop	ar7
      000480 E5*00            [12] 1126 	mov	a,_bp
      000482 24 07            [12] 1127 	add	a,#0x07
      000484 F8               [12] 1128 	mov	r0,a
      000485 A6 07            [24] 1129 	mov	@r0,ar7
      000487                       1130 00117$:
      000487 C3               [12] 1131 	clr	c
      000488 E4               [12] 1132 	clr	a
      000489 9D               [12] 1133 	subb	a,r5
      00048A 74 80            [12] 1134 	mov	a,#(0x00 ^ 0x80)
      00048C 8E F0            [24] 1135 	mov	b,r6
      00048E 63 F0 80         [24] 1136 	xrl	b,#0x80
      000491 95 F0            [12] 1137 	subb	a,b
      000493 40 03            [24] 1138 	jc	00168$
      000495 02r05rB5         [24] 1139 	ljmp	00113$
      000498                       1140 00168$:
                                   1141 ;	calc.c:62: printstr("SSPA\t");
      000498 90r00r32         [24] 1142 	mov	dptr,#___str_6
      00049B 75 F0 80         [24] 1143 	mov	b,#0x80
      00049E 12r00r00         [24] 1144 	lcall	_printstr
                                   1145 ;	calc.c:63: printall(d);
      0004A1 E5*00            [12] 1146 	mov	a,_bp
      0004A3 24 0E            [12] 1147 	add	a,#0x0e
      0004A5 F8               [12] 1148 	mov	r0,a
      0004A6 E5*00            [12] 1149 	mov	a,_bp
      0004A8 24 12            [12] 1150 	add	a,#0x12
      0004AA F9               [12] 1151 	mov	r1,a
      0004AB E6               [12] 1152 	mov	a,@r0
      0004AC F7               [12] 1153 	mov	@r1,a
      0004AD 08               [12] 1154 	inc	r0
      0004AE 09               [12] 1155 	inc	r1
      0004AF E6               [12] 1156 	mov	a,@r0
      0004B0 F7               [12] 1157 	mov	@r1,a
      0004B1 08               [12] 1158 	inc	r0
      0004B2 09               [12] 1159 	inc	r1
      0004B3 E6               [12] 1160 	mov	a,@r0
      0004B4 F7               [12] 1161 	mov	@r1,a
      0004B5 08               [12] 1162 	inc	r0
      0004B6 09               [12] 1163 	inc	r1
      0004B7 E6               [12] 1164 	mov	a,@r0
      0004B8 F7               [12] 1165 	mov	@r1,a
      0004B9 E5*00            [12] 1166 	mov	a,_bp
      0004BB 24 12            [12] 1167 	add	a,#0x12
      0004BD F8               [12] 1168 	mov	r0,a
      0004BE 86 02            [24] 1169 	mov	ar2,@r0
      0004C0 08               [12] 1170 	inc	r0
      0004C1 86 03            [24] 1171 	mov	ar3,@r0
      0004C3 08               [12] 1172 	inc	r0
      0004C4 86 04            [24] 1173 	mov	ar4,@r0
      0004C6 08               [12] 1174 	inc	r0
      0004C7 86 07            [24] 1175 	mov	ar7,@r0
                                   1176 ;	calc.c:18: printf("%08lx\t", d);
      0004C9 C0 07            [24] 1177 	push	ar7
      0004CB C0 04            [24] 1178 	push	ar4
      0004CD C0 03            [24] 1179 	push	ar3
      0004CF C0 02            [24] 1180 	push	ar2
      0004D1 E5*00            [12] 1181 	mov	a,_bp
      0004D3 24 12            [12] 1182 	add	a,#0x12
      0004D5 F8               [12] 1183 	mov	r0,a
      0004D6 E6               [12] 1184 	mov	a,@r0
      0004D7 C0 E0            [24] 1185 	push	acc
      0004D9 08               [12] 1186 	inc	r0
      0004DA E6               [12] 1187 	mov	a,@r0
      0004DB C0 E0            [24] 1188 	push	acc
      0004DD 08               [12] 1189 	inc	r0
      0004DE E6               [12] 1190 	mov	a,@r0
      0004DF C0 E0            [24] 1191 	push	acc
      0004E1 08               [12] 1192 	inc	r0
      0004E2 E6               [12] 1193 	mov	a,@r0
      0004E3 C0 E0            [24] 1194 	push	acc
      0004E5 74r00            [12] 1195 	mov	a,#___str_0
      0004E7 C0 E0            [24] 1196 	push	acc
      0004E9 74s00            [12] 1197 	mov	a,#(___str_0 >> 8)
      0004EB C0 E0            [24] 1198 	push	acc
      0004ED 74 80            [12] 1199 	mov	a,#0x80
      0004EF C0 E0            [24] 1200 	push	acc
      0004F1 12r00r00         [24] 1201 	lcall	_printf
      0004F4 E5 81            [12] 1202 	mov	a,sp
      0004F6 24 F9            [12] 1203 	add	a,#0xf9
      0004F8 F5 81            [12] 1204 	mov	sp,a
      0004FA D0 02            [24] 1205 	pop	ar2
      0004FC D0 03            [24] 1206 	pop	ar3
      0004FE D0 04            [24] 1207 	pop	ar4
      000500 D0 07            [24] 1208 	pop	ar7
                                   1209 ;	calc.c:19: printf("% 11ld\t", d);
      000502 C0 07            [24] 1210 	push	ar7
      000504 C0 04            [24] 1211 	push	ar4
      000506 C0 03            [24] 1212 	push	ar3
      000508 C0 02            [24] 1213 	push	ar2
      00050A C0 02            [24] 1214 	push	ar2
      00050C C0 03            [24] 1215 	push	ar3
      00050E C0 04            [24] 1216 	push	ar4
      000510 C0 07            [24] 1217 	push	ar7
      000512 74r07            [12] 1218 	mov	a,#___str_1
      000514 C0 E0            [24] 1219 	push	acc
      000516 74s00            [12] 1220 	mov	a,#(___str_1 >> 8)
      000518 C0 E0            [24] 1221 	push	acc
      00051A 74 80            [12] 1222 	mov	a,#0x80
      00051C C0 E0            [24] 1223 	push	acc
      00051E 12r00r00         [24] 1224 	lcall	_printf
      000521 E5 81            [12] 1225 	mov	a,sp
      000523 24 F9            [12] 1226 	add	a,#0xf9
      000525 F5 81            [12] 1227 	mov	sp,a
      000527 D0 02            [24] 1228 	pop	ar2
      000529 D0 03            [24] 1229 	pop	ar3
      00052B D0 04            [24] 1230 	pop	ar4
      00052D D0 07            [24] 1231 	pop	ar7
                                   1232 ;	calc.c:20: printf("%011lo\t", d);
      00052F C0 07            [24] 1233 	push	ar7
      000531 C0 04            [24] 1234 	push	ar4
      000533 C0 03            [24] 1235 	push	ar3
      000535 C0 02            [24] 1236 	push	ar2
      000537 C0 02            [24] 1237 	push	ar2
      000539 C0 03            [24] 1238 	push	ar3
      00053B C0 04            [24] 1239 	push	ar4
      00053D C0 07            [24] 1240 	push	ar7
      00053F 74r0F            [12] 1241 	mov	a,#___str_2
      000541 C0 E0            [24] 1242 	push	acc
      000543 74s00            [12] 1243 	mov	a,#(___str_2 >> 8)
      000545 C0 E0            [24] 1244 	push	acc
      000547 74 80            [12] 1245 	mov	a,#0x80
      000549 C0 E0            [24] 1246 	push	acc
      00054B 12r00r00         [24] 1247 	lcall	_printf
      00054E E5 81            [12] 1248 	mov	a,sp
      000550 24 F9            [12] 1249 	add	a,#0xf9
      000552 F5 81            [12] 1250 	mov	sp,a
      000554 D0 02            [24] 1251 	pop	ar2
      000556 D0 03            [24] 1252 	pop	ar3
      000558 D0 04            [24] 1253 	pop	ar4
      00055A D0 07            [24] 1254 	pop	ar7
                                   1255 ;	calc.c:21: print32bin(d);
      00055C 8A 82            [24] 1256 	mov	dpl,r2
      00055E 8B 83            [24] 1257 	mov	dph,r3
      000560 8C F0            [24] 1258 	mov	b,r4
      000562 EF               [12] 1259 	mov	a,r7
      000563 12r00r00         [24] 1260 	lcall	_print32bin
                                   1261 ;	calc.c:64: printstr("\r\n");
      000566 90r00r17         [24] 1262 	mov	dptr,#___str_3
      000569 75 F0 80         [24] 1263 	mov	b,#0x80
      00056C 12r00r00         [24] 1264 	lcall	_printstr
                                   1265 ;	calc.c:61: for (r = stack_pop(ctx->ss, &d); r > 0; r = stack_pop(ctx->ss, &d)) {
      00056F E5*00            [12] 1266 	mov	a,_bp
      000571 24 07            [12] 1267 	add	a,#0x07
      000573 F8               [12] 1268 	mov	r0,a
      000574 86 06            [24] 1269 	mov	ar6,@r0
      000576 7D 00            [12] 1270 	mov	r5,#0x00
      000578 7B 40            [12] 1271 	mov	r3,#0x40
      00057A E5*00            [12] 1272 	mov	a,_bp
      00057C 24 08            [12] 1273 	add	a,#0x08
      00057E F8               [12] 1274 	mov	r0,a
      00057F 86 82            [24] 1275 	mov	dpl,@r0
      000581 08               [12] 1276 	inc	r0
      000582 86 83            [24] 1277 	mov	dph,@r0
      000584 08               [12] 1278 	inc	r0
      000585 86 F0            [24] 1279 	mov	b,@r0
      000587 12r00r00         [24] 1280 	lcall	__gptrget
      00058A FA               [12] 1281 	mov	r2,a
      00058B A3               [24] 1282 	inc	dptr
      00058C 12r00r00         [24] 1283 	lcall	__gptrget
      00058F FC               [12] 1284 	mov	r4,a
      000590 A3               [24] 1285 	inc	dptr
      000591 12r00r00         [24] 1286 	lcall	__gptrget
      000594 FF               [12] 1287 	mov	r7,a
      000595 C0 06            [24] 1288 	push	ar6
      000597 C0 05            [24] 1289 	push	ar5
      000599 C0 03            [24] 1290 	push	ar3
      00059B 8A 82            [24] 1291 	mov	dpl,r2
      00059D 8C 83            [24] 1292 	mov	dph,r4
      00059F 8F F0            [24] 1293 	mov	b,r7
      0005A1 12r00r00         [24] 1294 	lcall	_stack_pop
      0005A4 AC 82            [24] 1295 	mov	r4,dpl
      0005A6 AF 83            [24] 1296 	mov	r7,dph
      0005A8 15 81            [12] 1297 	dec	sp
      0005AA 15 81            [12] 1298 	dec	sp
      0005AC 15 81            [12] 1299 	dec	sp
      0005AE 8C 05            [24] 1300 	mov	ar5,r4
      0005B0 8F 06            [24] 1301 	mov	ar6,r7
      0005B2 02r04r87         [24] 1302 	ljmp	00117$
      0005B5                       1303 00113$:
                                   1304 ;	calc.c:68: return 1;
      0005B5 90 00 01         [24] 1305 	mov	dptr,#0x0001
                                   1306 ;	calc.c:69: }
      0005B8 85*00 81         [24] 1307 	mov	sp,_bp
      0005BB D0*00            [24] 1308 	pop	_bp
      0005BD 22               [24] 1309 	ret
                                   1310 ;------------------------------------------------------------
                                   1311 ;Allocation info for local variables in function 'dump_peek'
                                   1312 ;------------------------------------------------------------
                                   1313 ;d                         Allocated to stack - _bp -6
                                   1314 ;_ctx                      Allocated to registers 
                                   1315 ;__1310720005              Allocated to registers r4 r5 r6 r7 
                                   1316 ;d                         Allocated to registers 
                                   1317 ;------------------------------------------------------------
                                   1318 ;	calc.c:71: static int dump_peek(void *_ctx, long d) __reentrant {
                                   1319 ;	-----------------------------------------
                                   1320 ;	 function dump_peek
                                   1321 ;	-----------------------------------------
      0005BE                       1322 _dump_peek:
      0005BE C0*00            [24] 1323 	push	_bp
      0005C0 85 81*00         [24] 1324 	mov	_bp,sp
                                   1325 ;	calc.c:74: printstr("PSVA\t");
      0005C3 90r00r38         [24] 1326 	mov	dptr,#___str_7
      0005C6 75 F0 80         [24] 1327 	mov	b,#0x80
      0005C9 12r00r00         [24] 1328 	lcall	_printstr
                                   1329 ;	calc.c:75: printall(d);
      0005CC E5*00            [12] 1330 	mov	a,_bp
      0005CE 24 FA            [12] 1331 	add	a,#0xfa
      0005D0 F8               [12] 1332 	mov	r0,a
      0005D1 86 04            [24] 1333 	mov	ar4,@r0
      0005D3 08               [12] 1334 	inc	r0
      0005D4 86 05            [24] 1335 	mov	ar5,@r0
      0005D6 08               [12] 1336 	inc	r0
      0005D7 86 06            [24] 1337 	mov	ar6,@r0
      0005D9 08               [12] 1338 	inc	r0
      0005DA 86 07            [24] 1339 	mov	ar7,@r0
                                   1340 ;	calc.c:18: printf("%08lx\t", d);
      0005DC C0 07            [24] 1341 	push	ar7
      0005DE C0 06            [24] 1342 	push	ar6
      0005E0 C0 05            [24] 1343 	push	ar5
      0005E2 C0 04            [24] 1344 	push	ar4
      0005E4 C0 04            [24] 1345 	push	ar4
      0005E6 C0 05            [24] 1346 	push	ar5
      0005E8 C0 06            [24] 1347 	push	ar6
      0005EA C0 07            [24] 1348 	push	ar7
      0005EC 74r00            [12] 1349 	mov	a,#___str_0
      0005EE C0 E0            [24] 1350 	push	acc
      0005F0 74s00            [12] 1351 	mov	a,#(___str_0 >> 8)
      0005F2 C0 E0            [24] 1352 	push	acc
      0005F4 74 80            [12] 1353 	mov	a,#0x80
      0005F6 C0 E0            [24] 1354 	push	acc
      0005F8 12r00r00         [24] 1355 	lcall	_printf
      0005FB E5 81            [12] 1356 	mov	a,sp
      0005FD 24 F9            [12] 1357 	add	a,#0xf9
      0005FF F5 81            [12] 1358 	mov	sp,a
      000601 D0 04            [24] 1359 	pop	ar4
      000603 D0 05            [24] 1360 	pop	ar5
      000605 D0 06            [24] 1361 	pop	ar6
      000607 D0 07            [24] 1362 	pop	ar7
                                   1363 ;	calc.c:19: printf("% 11ld\t", d);
      000609 C0 07            [24] 1364 	push	ar7
      00060B C0 06            [24] 1365 	push	ar6
      00060D C0 05            [24] 1366 	push	ar5
      00060F C0 04            [24] 1367 	push	ar4
      000611 C0 04            [24] 1368 	push	ar4
      000613 C0 05            [24] 1369 	push	ar5
      000615 C0 06            [24] 1370 	push	ar6
      000617 C0 07            [24] 1371 	push	ar7
      000619 74r07            [12] 1372 	mov	a,#___str_1
      00061B C0 E0            [24] 1373 	push	acc
      00061D 74s00            [12] 1374 	mov	a,#(___str_1 >> 8)
      00061F C0 E0            [24] 1375 	push	acc
      000621 74 80            [12] 1376 	mov	a,#0x80
      000623 C0 E0            [24] 1377 	push	acc
      000625 12r00r00         [24] 1378 	lcall	_printf
      000628 E5 81            [12] 1379 	mov	a,sp
      00062A 24 F9            [12] 1380 	add	a,#0xf9
      00062C F5 81            [12] 1381 	mov	sp,a
      00062E D0 04            [24] 1382 	pop	ar4
      000630 D0 05            [24] 1383 	pop	ar5
      000632 D0 06            [24] 1384 	pop	ar6
      000634 D0 07            [24] 1385 	pop	ar7
                                   1386 ;	calc.c:20: printf("%011lo\t", d);
      000636 C0 07            [24] 1387 	push	ar7
      000638 C0 06            [24] 1388 	push	ar6
      00063A C0 05            [24] 1389 	push	ar5
      00063C C0 04            [24] 1390 	push	ar4
      00063E C0 04            [24] 1391 	push	ar4
      000640 C0 05            [24] 1392 	push	ar5
      000642 C0 06            [24] 1393 	push	ar6
      000644 C0 07            [24] 1394 	push	ar7
      000646 74r0F            [12] 1395 	mov	a,#___str_2
      000648 C0 E0            [24] 1396 	push	acc
      00064A 74s00            [12] 1397 	mov	a,#(___str_2 >> 8)
      00064C C0 E0            [24] 1398 	push	acc
      00064E 74 80            [12] 1399 	mov	a,#0x80
      000650 C0 E0            [24] 1400 	push	acc
      000652 12r00r00         [24] 1401 	lcall	_printf
      000655 E5 81            [12] 1402 	mov	a,sp
      000657 24 F9            [12] 1403 	add	a,#0xf9
      000659 F5 81            [12] 1404 	mov	sp,a
      00065B D0 04            [24] 1405 	pop	ar4
      00065D D0 05            [24] 1406 	pop	ar5
      00065F D0 06            [24] 1407 	pop	ar6
      000661 D0 07            [24] 1408 	pop	ar7
                                   1409 ;	calc.c:21: print32bin(d);
      000663 8C 82            [24] 1410 	mov	dpl,r4
      000665 8D 83            [24] 1411 	mov	dph,r5
      000667 8E F0            [24] 1412 	mov	b,r6
      000669 EF               [12] 1413 	mov	a,r7
      00066A 12r00r00         [24] 1414 	lcall	_print32bin
                                   1415 ;	calc.c:76: printstr("\r\n");
      00066D 90r00r17         [24] 1416 	mov	dptr,#___str_3
      000670 75 F0 80         [24] 1417 	mov	b,#0x80
      000673 12r00r00         [24] 1418 	lcall	_printstr
                                   1419 ;	calc.c:78: return 1;
      000676 90 00 01         [24] 1420 	mov	dptr,#0x0001
                                   1421 ;	calc.c:79: }
      000679 D0*00            [24] 1422 	pop	_bp
      00067B 22               [24] 1423 	ret
                                   1424 ;------------------------------------------------------------
                                   1425 ;Allocation info for local variables in function 'operator'
                                   1426 ;------------------------------------------------------------
                                   1427 ;delta                     Allocated to stack - _bp -5
                                   1428 ;_ctx                      Allocated to registers r2 r3 r4 
                                   1429 ;ctx                       Allocated to stack - _bp +23
                                   1430 ;t0                        Allocated to registers r7 r6 r5 
                                   1431 ;d0                        Allocated to stack - _bp +26
                                   1432 ;d1                        Allocated to stack - _bp +30
                                   1433 ;__2621440007              Allocated to registers r7 r6 r5 r4 
                                   1434 ;d                         Allocated to stack - _bp +34
                                   1435 ;__2621440009              Allocated to registers r7 r6 r5 r4 
                                   1436 ;d                         Allocated to stack - _bp +34
                                   1437 ;sloc0                     Allocated to stack - _bp +1
                                   1438 ;sloc1                     Allocated to stack - _bp +2
                                   1439 ;sloc2                     Allocated to stack - _bp +5
                                   1440 ;sloc3                     Allocated to stack - _bp +8
                                   1441 ;sloc4                     Allocated to stack - _bp +11
                                   1442 ;sloc5                     Allocated to stack - _bp +15
                                   1443 ;sloc6                     Allocated to stack - _bp +19
                                   1444 ;------------------------------------------------------------
                                   1445 ;	calc.c:81: static int operator(void *_ctx, delta_t *delta) __reentrant {
                                   1446 ;	-----------------------------------------
                                   1447 ;	 function operator
                                   1448 ;	-----------------------------------------
      00067C                       1449 _operator:
      00067C C0*00            [24] 1450 	push	_bp
      00067E E5 81            [12] 1451 	mov	a,sp
      000680 F5*00            [12] 1452 	mov	_bp,a
      000682 24 25            [12] 1453 	add	a,#0x25
      000684 F5 81            [12] 1454 	mov	sp,a
      000686 AA 82            [24] 1455 	mov	r2,dpl
      000688 AB 83            [24] 1456 	mov	r3,dph
      00068A AC F0            [24] 1457 	mov	r4,b
                                   1458 ;	calc.c:82: calc_ctx_t *ctx = (calc_ctx_t *)_ctx;
      00068C E5*00            [12] 1459 	mov	a,_bp
      00068E 24 17            [12] 1460 	add	a,#0x17
      000690 F8               [12] 1461 	mov	r0,a
      000691 A6 02            [24] 1462 	mov	@r0,ar2
      000693 08               [12] 1463 	inc	r0
      000694 A6 03            [24] 1464 	mov	@r0,ar3
      000696 08               [12] 1465 	inc	r0
      000697 A6 04            [24] 1466 	mov	@r0,ar4
                                   1467 ;	calc.c:86: switch (ctx->digit[0]) {
      000699 E5*00            [12] 1468 	mov	a,_bp
      00069B 24 17            [12] 1469 	add	a,#0x17
      00069D F8               [12] 1470 	mov	r0,a
      00069E 74 07            [12] 1471 	mov	a,#0x07
      0006A0 26               [12] 1472 	add	a,@r0
      0006A1 FD               [12] 1473 	mov	r5,a
      0006A2 E4               [12] 1474 	clr	a
      0006A3 08               [12] 1475 	inc	r0
      0006A4 36               [12] 1476 	addc	a,@r0
      0006A5 FE               [12] 1477 	mov	r6,a
      0006A6 08               [12] 1478 	inc	r0
      0006A7 86 07            [24] 1479 	mov	ar7,@r0
      0006A9 8D 82            [24] 1480 	mov	dpl,r5
      0006AB 8E 83            [24] 1481 	mov	dph,r6
      0006AD 8F F0            [24] 1482 	mov	b,r7
      0006AF A8*00            [24] 1483 	mov	r0,_bp
      0006B1 08               [12] 1484 	inc	r0
      0006B2 12r00r00         [24] 1485 	lcall	__gptrget
      0006B5 F6               [12] 1486 	mov	@r0,a
      0006B6 A8*00            [24] 1487 	mov	r0,_bp
      0006B8 08               [12] 1488 	inc	r0
      0006B9 B6 23 03         [24] 1489 	cjne	@r0,#0x23,00526$
      0006BC 02r18r1A         [24] 1490 	ljmp	00189$
      0006BF                       1491 00526$:
      0006BF A8*00            [24] 1492 	mov	r0,_bp
      0006C1 08               [12] 1493 	inc	r0
      0006C2 B6 25 03         [24] 1494 	cjne	@r0,#0x25,00527$
      0006C5 02r18r1A         [24] 1495 	ljmp	00189$
      0006C8                       1496 00527$:
      0006C8 A8*00            [24] 1497 	mov	r0,_bp
      0006CA 08               [12] 1498 	inc	r0
      0006CB B6 26 03         [24] 1499 	cjne	@r0,#0x26,00528$
      0006CE 02r1ArB5         [24] 1500 	ljmp	00202$
      0006D1                       1501 00528$:
      0006D1 A8*00            [24] 1502 	mov	r0,_bp
      0006D3 08               [12] 1503 	inc	r0
      0006D4 B6 2A 03         [24] 1504 	cjne	@r0,#0x2a,00529$
      0006D7 02r14r07         [24] 1505 	ljmp	00167$
      0006DA                       1506 00529$:
      0006DA A8*00            [24] 1507 	mov	r0,_bp
      0006DC 08               [12] 1508 	inc	r0
      0006DD B6 2B 03         [24] 1509 	cjne	@r0,#0x2b,00530$
      0006E0 02r11r6C         [24] 1510 	ljmp	00153$
      0006E3                       1511 00530$:
      0006E3 A8*00            [24] 1512 	mov	r0,_bp
      0006E5 08               [12] 1513 	inc	r0
      0006E6 B6 2D 03         [24] 1514 	cjne	@r0,#0x2d,00531$
      0006E9 02r12rB9         [24] 1515 	ljmp	00160$
      0006EC                       1516 00531$:
      0006EC A8*00            [24] 1517 	mov	r0,_bp
      0006EE 08               [12] 1518 	inc	r0
      0006EF B6 2E 03         [24] 1519 	cjne	@r0,#0x2e,00532$
      0006F2 02r09r26         [24] 1520 	ljmp	00109$
      0006F5                       1521 00532$:
      0006F5 A8*00            [24] 1522 	mov	r0,_bp
      0006F7 08               [12] 1523 	inc	r0
      0006F8 B6 2F 03         [24] 1524 	cjne	@r0,#0x2f,00533$
      0006FB 02r15r7B         [24] 1525 	ljmp	00175$
      0006FE                       1526 00533$:
      0006FE A8*00            [24] 1527 	mov	r0,_bp
      000700 08               [12] 1528 	inc	r0
      000701 B6 3C 03         [24] 1529 	cjne	@r0,#0x3c,00534$
      000704 02r21rD6         [24] 1530 	ljmp	00237$
      000707                       1531 00534$:
      000707 A8*00            [24] 1532 	mov	r0,_bp
      000709 08               [12] 1533 	inc	r0
      00070A B6 3E 03         [24] 1534 	cjne	@r0,#0x3e,00535$
      00070D 02r1ErED         [24] 1535 	ljmp	00223$
      000710                       1536 00535$:
      000710 A8*00            [24] 1537 	mov	r0,_bp
      000712 08               [12] 1538 	inc	r0
      000713 B6 4D 03         [24] 1539 	cjne	@r0,#0x4d,00536$
      000716 02r0CrDD         [24] 1540 	ljmp	00127$
      000719                       1541 00536$:
      000719 A8*00            [24] 1542 	mov	r0,_bp
      00071B 08               [12] 1543 	inc	r0
      00071C B6 50 03         [24] 1544 	cjne	@r0,#0x50,00537$
      00071F 02r0Ar3B         [24] 1545 	ljmp	00113$
      000722                       1546 00537$:
      000722 A8*00            [24] 1547 	mov	r0,_bp
      000724 08               [12] 1548 	inc	r0
      000725 B6 54 03         [24] 1549 	cjne	@r0,#0x54,00538$
      000728 02r0Fr49         [24] 1550 	ljmp	00145$
      00072B                       1551 00538$:
      00072B A8*00            [24] 1552 	mov	r0,_bp
      00072D 08               [12] 1553 	inc	r0
      00072E B6 55 03         [24] 1554 	cjne	@r0,#0x55,00539$
      000731 02r0Er94         [24] 1555 	ljmp	00139$
      000734                       1556 00539$:
      000734 A8*00            [24] 1557 	mov	r0,_bp
      000736 08               [12] 1558 	inc	r0
      000737 B6 56 03         [24] 1559 	cjne	@r0,#0x56,00540$
      00073A 02r08rB7         [24] 1560 	ljmp	00105$
      00073D                       1561 00540$:
      00073D A8*00            [24] 1562 	mov	r0,_bp
      00073F 08               [12] 1563 	inc	r0
      000740 B6 58 03         [24] 1564 	cjne	@r0,#0x58,00541$
      000743 02r10rCD         [24] 1565 	ljmp	00152$
      000746                       1566 00541$:
      000746 A8*00            [24] 1567 	mov	r0,_bp
      000748 08               [12] 1568 	inc	r0
      000749 B6 5C 03         [24] 1569 	cjne	@r0,#0x5c,00542$
      00074C 02r15r7B         [24] 1570 	ljmp	00175$
      00074F                       1571 00542$:
      00074F A8*00            [24] 1572 	mov	r0,_bp
      000751 08               [12] 1573 	inc	r0
      000752 B6 5D 03         [24] 1574 	cjne	@r0,#0x5d,00543$
      000755 02r20r59         [24] 1575 	ljmp	00230$
      000758                       1576 00543$:
      000758 A8*00            [24] 1577 	mov	r0,_bp
      00075A 08               [12] 1578 	inc	r0
      00075B B6 5E 03         [24] 1579 	cjne	@r0,#0x5e,00544$
      00075E 02r1Dr85         [24] 1580 	ljmp	00216$
      000761                       1581 00544$:
      000761 A8*00            [24] 1582 	mov	r0,_bp
      000763 08               [12] 1583 	inc	r0
      000764 B6 6D 03         [24] 1584 	cjne	@r0,#0x6d,00545$
      000767 02r0BrDB         [24] 1585 	ljmp	00121$
      00076A                       1586 00545$:
      00076A A8*00            [24] 1587 	mov	r0,_bp
      00076C 08               [12] 1588 	inc	r0
      00076D B6 70 03         [24] 1589 	cjne	@r0,#0x70,00546$
      000770 02r09r26         [24] 1590 	ljmp	00109$
      000773                       1591 00546$:
      000773 A8*00            [24] 1592 	mov	r0,_bp
      000775 08               [12] 1593 	inc	r0
      000776 B6 75 03         [24] 1594 	cjne	@r0,#0x75,00547$
      000779 02r0DrDF         [24] 1595 	ljmp	00133$
      00077C                       1596 00547$:
      00077C A8*00            [24] 1597 	mov	r0,_bp
      00077E 08               [12] 1598 	inc	r0
      00077F B6 76 02         [24] 1599 	cjne	@r0,#0x76,00548$
      000782 80 1E            [24] 1600 	sjmp	00101$
      000784                       1601 00548$:
      000784 A8*00            [24] 1602 	mov	r0,_bp
      000786 08               [12] 1603 	inc	r0
      000787 B6 78 03         [24] 1604 	cjne	@r0,#0x78,00549$
      00078A 02r0Ar72         [24] 1605 	ljmp	00114$
      00078D                       1606 00549$:
      00078D A8*00            [24] 1607 	mov	r0,_bp
      00078F 08               [12] 1608 	inc	r0
      000790 B6 7C 03         [24] 1609 	cjne	@r0,#0x7c,00550$
      000793 02r1Cr1D         [24] 1610 	ljmp	00209$
      000796                       1611 00550$:
      000796 A8*00            [24] 1612 	mov	r0,_bp
      000798 08               [12] 1613 	inc	r0
      000799 B6 7E 03         [24] 1614 	cjne	@r0,#0x7e,00551$
      00079C 02r23r47         [24] 1615 	ljmp	00244$
      00079F                       1616 00551$:
      00079F 02r24r09         [24] 1617 	ljmp	00248$
                                   1618 ;	calc.c:87: case 'v':
      0007A2                       1619 00101$:
                                   1620 ;	calc.c:88: printstr("\r\n");
      0007A2 90r00r17         [24] 1621 	mov	dptr,#___str_3
      0007A5 75 F0 80         [24] 1622 	mov	b,#0x80
      0007A8 12r00r00         [24] 1623 	lcall	_printstr
                                   1624 ;	calc.c:89: if (!stack_peek(ctx->ps, &d0)) printstr("stack underflow\r\n");
      0007AB E5*00            [12] 1625 	mov	a,_bp
      0007AD 24 1A            [12] 1626 	add	a,#0x1a
      0007AF FF               [12] 1627 	mov	r7,a
      0007B0 7E 00            [12] 1628 	mov	r6,#0x00
      0007B2 7D 40            [12] 1629 	mov	r5,#0x40
      0007B4 E5*00            [12] 1630 	mov	a,_bp
      0007B6 24 17            [12] 1631 	add	a,#0x17
      0007B8 F8               [12] 1632 	mov	r0,a
      0007B9 74 11            [12] 1633 	mov	a,#0x11
      0007BB 26               [12] 1634 	add	a,@r0
      0007BC FA               [12] 1635 	mov	r2,a
      0007BD ED               [12] 1636 	mov	a,r5
      0007BE 08               [12] 1637 	inc	r0
      0007BF 36               [12] 1638 	addc	a,@r0
      0007C0 FB               [12] 1639 	mov	r3,a
      0007C1 08               [12] 1640 	inc	r0
      0007C2 86 04            [24] 1641 	mov	ar4,@r0
      0007C4 8A 82            [24] 1642 	mov	dpl,r2
      0007C6 8B 83            [24] 1643 	mov	dph,r3
      0007C8 8C F0            [24] 1644 	mov	b,r4
      0007CA 12r00r00         [24] 1645 	lcall	__gptrget
      0007CD FA               [12] 1646 	mov	r2,a
      0007CE A3               [24] 1647 	inc	dptr
      0007CF 12r00r00         [24] 1648 	lcall	__gptrget
      0007D2 FB               [12] 1649 	mov	r3,a
      0007D3 A3               [24] 1650 	inc	dptr
      0007D4 12r00r00         [24] 1651 	lcall	__gptrget
      0007D7 FC               [12] 1652 	mov	r4,a
      0007D8 C0 07            [24] 1653 	push	ar7
      0007DA C0 06            [24] 1654 	push	ar6
      0007DC C0 05            [24] 1655 	push	ar5
      0007DE 8A 82            [24] 1656 	mov	dpl,r2
      0007E0 8B 83            [24] 1657 	mov	dph,r3
      0007E2 8C F0            [24] 1658 	mov	b,r4
      0007E4 12r00r00         [24] 1659 	lcall	_stack_peek
      0007E7 AB 82            [24] 1660 	mov	r3,dpl
      0007E9 AC 83            [24] 1661 	mov	r4,dph
      0007EB 15 81            [12] 1662 	dec	sp
      0007ED 15 81            [12] 1663 	dec	sp
      0007EF 15 81            [12] 1664 	dec	sp
      0007F1 EB               [12] 1665 	mov	a,r3
      0007F2 4C               [12] 1666 	orl	a,r4
      0007F3 70 0C            [24] 1667 	jnz	00103$
      0007F5 90r00r1A         [24] 1668 	mov	dptr,#___str_4
      0007F8 75 F0 80         [24] 1669 	mov	b,#0x80
      0007FB 12r00r00         [24] 1670 	lcall	_printstr
      0007FE 02r24r0E         [24] 1671 	ljmp	00249$
      000801                       1672 00103$:
                                   1673 ;	calc.c:91: printstr("PSVTOP\t");
      000801 90r00r3E         [24] 1674 	mov	dptr,#___str_8
      000804 75 F0 80         [24] 1675 	mov	b,#0x80
      000807 12r00r00         [24] 1676 	lcall	_printstr
                                   1677 ;	calc.c:92: printall(d0);
      00080A E5*00            [12] 1678 	mov	a,_bp
      00080C 24 1A            [12] 1679 	add	a,#0x1a
      00080E F8               [12] 1680 	mov	r0,a
      00080F 86 07            [24] 1681 	mov	ar7,@r0
      000811 08               [12] 1682 	inc	r0
      000812 86 06            [24] 1683 	mov	ar6,@r0
      000814 08               [12] 1684 	inc	r0
      000815 86 05            [24] 1685 	mov	ar5,@r0
      000817 08               [12] 1686 	inc	r0
      000818 86 04            [24] 1687 	mov	ar4,@r0
      00081A E5*00            [12] 1688 	mov	a,_bp
      00081C 24 22            [12] 1689 	add	a,#0x22
      00081E F8               [12] 1690 	mov	r0,a
      00081F A6 07            [24] 1691 	mov	@r0,ar7
      000821 08               [12] 1692 	inc	r0
      000822 A6 06            [24] 1693 	mov	@r0,ar6
      000824 08               [12] 1694 	inc	r0
      000825 A6 05            [24] 1695 	mov	@r0,ar5
      000827 08               [12] 1696 	inc	r0
      000828 A6 04            [24] 1697 	mov	@r0,ar4
                                   1698 ;	calc.c:18: printf("%08lx\t", d);
      00082A C0 07            [24] 1699 	push	ar7
      00082C C0 06            [24] 1700 	push	ar6
      00082E C0 05            [24] 1701 	push	ar5
      000830 C0 04            [24] 1702 	push	ar4
      000832 74r00            [12] 1703 	mov	a,#___str_0
      000834 C0 E0            [24] 1704 	push	acc
      000836 74s00            [12] 1705 	mov	a,#(___str_0 >> 8)
      000838 C0 E0            [24] 1706 	push	acc
      00083A 74 80            [12] 1707 	mov	a,#0x80
      00083C C0 E0            [24] 1708 	push	acc
      00083E 12r00r00         [24] 1709 	lcall	_printf
      000841 E5 81            [12] 1710 	mov	a,sp
      000843 24 F9            [12] 1711 	add	a,#0xf9
      000845 F5 81            [12] 1712 	mov	sp,a
                                   1713 ;	calc.c:19: printf("% 11ld\t", d);
      000847 E5*00            [12] 1714 	mov	a,_bp
      000849 24 22            [12] 1715 	add	a,#0x22
      00084B F8               [12] 1716 	mov	r0,a
      00084C E6               [12] 1717 	mov	a,@r0
      00084D C0 E0            [24] 1718 	push	acc
      00084F 08               [12] 1719 	inc	r0
      000850 E6               [12] 1720 	mov	a,@r0
      000851 C0 E0            [24] 1721 	push	acc
      000853 08               [12] 1722 	inc	r0
      000854 E6               [12] 1723 	mov	a,@r0
      000855 C0 E0            [24] 1724 	push	acc
      000857 08               [12] 1725 	inc	r0
      000858 E6               [12] 1726 	mov	a,@r0
      000859 C0 E0            [24] 1727 	push	acc
      00085B 74r07            [12] 1728 	mov	a,#___str_1
      00085D C0 E0            [24] 1729 	push	acc
      00085F 74s00            [12] 1730 	mov	a,#(___str_1 >> 8)
      000861 C0 E0            [24] 1731 	push	acc
      000863 74 80            [12] 1732 	mov	a,#0x80
      000865 C0 E0            [24] 1733 	push	acc
      000867 12r00r00         [24] 1734 	lcall	_printf
      00086A E5 81            [12] 1735 	mov	a,sp
      00086C 24 F9            [12] 1736 	add	a,#0xf9
      00086E F5 81            [12] 1737 	mov	sp,a
                                   1738 ;	calc.c:20: printf("%011lo\t", d);
      000870 E5*00            [12] 1739 	mov	a,_bp
      000872 24 22            [12] 1740 	add	a,#0x22
      000874 F8               [12] 1741 	mov	r0,a
      000875 E6               [12] 1742 	mov	a,@r0
      000876 C0 E0            [24] 1743 	push	acc
      000878 08               [12] 1744 	inc	r0
      000879 E6               [12] 1745 	mov	a,@r0
      00087A C0 E0            [24] 1746 	push	acc
      00087C 08               [12] 1747 	inc	r0
      00087D E6               [12] 1748 	mov	a,@r0
      00087E C0 E0            [24] 1749 	push	acc
      000880 08               [12] 1750 	inc	r0
      000881 E6               [12] 1751 	mov	a,@r0
      000882 C0 E0            [24] 1752 	push	acc
      000884 74r0F            [12] 1753 	mov	a,#___str_2
      000886 C0 E0            [24] 1754 	push	acc
      000888 74s00            [12] 1755 	mov	a,#(___str_2 >> 8)
      00088A C0 E0            [24] 1756 	push	acc
      00088C 74 80            [12] 1757 	mov	a,#0x80
      00088E C0 E0            [24] 1758 	push	acc
      000890 12r00r00         [24] 1759 	lcall	_printf
      000893 E5 81            [12] 1760 	mov	a,sp
      000895 24 F9            [12] 1761 	add	a,#0xf9
      000897 F5 81            [12] 1762 	mov	sp,a
                                   1763 ;	calc.c:21: print32bin(d);
      000899 E5*00            [12] 1764 	mov	a,_bp
      00089B 24 22            [12] 1765 	add	a,#0x22
      00089D F8               [12] 1766 	mov	r0,a
      00089E 86 82            [24] 1767 	mov	dpl,@r0
      0008A0 08               [12] 1768 	inc	r0
      0008A1 86 83            [24] 1769 	mov	dph,@r0
      0008A3 08               [12] 1770 	inc	r0
      0008A4 86 F0            [24] 1771 	mov	b,@r0
      0008A6 08               [12] 1772 	inc	r0
      0008A7 E6               [12] 1773 	mov	a,@r0
      0008A8 12r00r00         [24] 1774 	lcall	_print32bin
                                   1775 ;	calc.c:93: printstr("\r\n");
      0008AB 90r00r17         [24] 1776 	mov	dptr,#___str_3
      0008AE 75 F0 80         [24] 1777 	mov	b,#0x80
      0008B1 12r00r00         [24] 1778 	lcall	_printstr
                                   1779 ;	calc.c:95: break;
      0008B4 02r24r0E         [24] 1780 	ljmp	00249$
                                   1781 ;	calc.c:96: case 'V':
      0008B7                       1782 00105$:
                                   1783 ;	calc.c:97: printstr("\r\n");
      0008B7 90r00r17         [24] 1784 	mov	dptr,#___str_3
      0008BA 75 F0 80         [24] 1785 	mov	b,#0x80
      0008BD 12r00r00         [24] 1786 	lcall	_printstr
                                   1787 ;	calc.c:98: if (!stack_iter_peek(ctx->ps, dump_peek, ctx)) printstr("stack underflow\r\n");
      0008C0 E5*00            [12] 1788 	mov	a,_bp
      0008C2 24 17            [12] 1789 	add	a,#0x17
      0008C4 F8               [12] 1790 	mov	r0,a
      0008C5 86 07            [24] 1791 	mov	ar7,@r0
      0008C7 08               [12] 1792 	inc	r0
      0008C8 86 06            [24] 1793 	mov	ar6,@r0
      0008CA 08               [12] 1794 	inc	r0
      0008CB 86 05            [24] 1795 	mov	ar5,@r0
      0008CD E5*00            [12] 1796 	mov	a,_bp
      0008CF 24 17            [12] 1797 	add	a,#0x17
      0008D1 F8               [12] 1798 	mov	r0,a
      0008D2 74 11            [12] 1799 	mov	a,#0x11
      0008D4 26               [12] 1800 	add	a,@r0
      0008D5 FA               [12] 1801 	mov	r2,a
      0008D6 74 40            [12] 1802 	mov	a,#0x40
      0008D8 08               [12] 1803 	inc	r0
      0008D9 36               [12] 1804 	addc	a,@r0
      0008DA FB               [12] 1805 	mov	r3,a
      0008DB 08               [12] 1806 	inc	r0
      0008DC 86 04            [24] 1807 	mov	ar4,@r0
      0008DE 8A 82            [24] 1808 	mov	dpl,r2
      0008E0 8B 83            [24] 1809 	mov	dph,r3
      0008E2 8C F0            [24] 1810 	mov	b,r4
      0008E4 12r00r00         [24] 1811 	lcall	__gptrget
      0008E7 FA               [12] 1812 	mov	r2,a
      0008E8 A3               [24] 1813 	inc	dptr
      0008E9 12r00r00         [24] 1814 	lcall	__gptrget
      0008EC FB               [12] 1815 	mov	r3,a
      0008ED A3               [24] 1816 	inc	dptr
      0008EE 12r00r00         [24] 1817 	lcall	__gptrget
      0008F1 FC               [12] 1818 	mov	r4,a
      0008F2 C0 07            [24] 1819 	push	ar7
      0008F4 C0 06            [24] 1820 	push	ar6
      0008F6 C0 05            [24] 1821 	push	ar5
      0008F8 74rBE            [12] 1822 	mov	a,#_dump_peek
      0008FA C0 E0            [24] 1823 	push	acc
      0008FC 74s05            [12] 1824 	mov	a,#(_dump_peek >> 8)
      0008FE C0 E0            [24] 1825 	push	acc
      000900 8A 82            [24] 1826 	mov	dpl,r2
      000902 8B 83            [24] 1827 	mov	dph,r3
      000904 8C F0            [24] 1828 	mov	b,r4
      000906 12r00r00         [24] 1829 	lcall	_stack_iter_peek
      000909 AB 82            [24] 1830 	mov	r3,dpl
      00090B AC 83            [24] 1831 	mov	r4,dph
      00090D E5 81            [12] 1832 	mov	a,sp
      00090F 24 FB            [12] 1833 	add	a,#0xfb
      000911 F5 81            [12] 1834 	mov	sp,a
      000913 EB               [12] 1835 	mov	a,r3
      000914 4C               [12] 1836 	orl	a,r4
      000915 60 03            [24] 1837 	jz	00553$
      000917 02r24r0E         [24] 1838 	ljmp	00249$
      00091A                       1839 00553$:
      00091A 90r00r1A         [24] 1840 	mov	dptr,#___str_4
      00091D 75 F0 80         [24] 1841 	mov	b,#0x80
      000920 12r00r00         [24] 1842 	lcall	_printstr
                                   1843 ;	calc.c:99: break;
      000923 02r24r0E         [24] 1844 	ljmp	00249$
                                   1845 ;	calc.c:101: case 'p':
      000926                       1846 00109$:
                                   1847 ;	calc.c:102: printstr("\r\n");
      000926 90r00r17         [24] 1848 	mov	dptr,#___str_3
      000929 75 F0 80         [24] 1849 	mov	b,#0x80
      00092C 12r00r00         [24] 1850 	lcall	_printstr
                                   1851 ;	calc.c:103: if (!stack_pop(ctx->ps, &d0)) printstr("stack underflow\r\n");
      00092F E5*00            [12] 1852 	mov	a,_bp
      000931 24 1A            [12] 1853 	add	a,#0x1a
      000933 FF               [12] 1854 	mov	r7,a
      000934 7E 00            [12] 1855 	mov	r6,#0x00
      000936 7D 40            [12] 1856 	mov	r5,#0x40
      000938 E5*00            [12] 1857 	mov	a,_bp
      00093A 24 17            [12] 1858 	add	a,#0x17
      00093C F8               [12] 1859 	mov	r0,a
      00093D 74 11            [12] 1860 	mov	a,#0x11
      00093F 26               [12] 1861 	add	a,@r0
      000940 FA               [12] 1862 	mov	r2,a
      000941 ED               [12] 1863 	mov	a,r5
      000942 08               [12] 1864 	inc	r0
      000943 36               [12] 1865 	addc	a,@r0
      000944 FB               [12] 1866 	mov	r3,a
      000945 08               [12] 1867 	inc	r0
      000946 86 04            [24] 1868 	mov	ar4,@r0
      000948 8A 82            [24] 1869 	mov	dpl,r2
      00094A 8B 83            [24] 1870 	mov	dph,r3
      00094C 8C F0            [24] 1871 	mov	b,r4
      00094E 12r00r00         [24] 1872 	lcall	__gptrget
      000951 FA               [12] 1873 	mov	r2,a
      000952 A3               [24] 1874 	inc	dptr
      000953 12r00r00         [24] 1875 	lcall	__gptrget
      000956 FB               [12] 1876 	mov	r3,a
      000957 A3               [24] 1877 	inc	dptr
      000958 12r00r00         [24] 1878 	lcall	__gptrget
      00095B FC               [12] 1879 	mov	r4,a
      00095C C0 07            [24] 1880 	push	ar7
      00095E C0 06            [24] 1881 	push	ar6
      000960 C0 05            [24] 1882 	push	ar5
      000962 8A 82            [24] 1883 	mov	dpl,r2
      000964 8B 83            [24] 1884 	mov	dph,r3
      000966 8C F0            [24] 1885 	mov	b,r4
      000968 12r00r00         [24] 1886 	lcall	_stack_pop
      00096B AB 82            [24] 1887 	mov	r3,dpl
      00096D AC 83            [24] 1888 	mov	r4,dph
      00096F 15 81            [12] 1889 	dec	sp
      000971 15 81            [12] 1890 	dec	sp
      000973 15 81            [12] 1891 	dec	sp
      000975 EB               [12] 1892 	mov	a,r3
      000976 4C               [12] 1893 	orl	a,r4
      000977 70 0C            [24] 1894 	jnz	00111$
      000979 90r00r1A         [24] 1895 	mov	dptr,#___str_4
      00097C 75 F0 80         [24] 1896 	mov	b,#0x80
      00097F 12r00r00         [24] 1897 	lcall	_printstr
      000982 02r24r0E         [24] 1898 	ljmp	00249$
      000985                       1899 00111$:
                                   1900 ;	calc.c:105: printstr("PSPTOP\t");
      000985 90r00r46         [24] 1901 	mov	dptr,#___str_9
      000988 75 F0 80         [24] 1902 	mov	b,#0x80
      00098B 12r00r00         [24] 1903 	lcall	_printstr
                                   1904 ;	calc.c:106: printall(d0);
      00098E E5*00            [12] 1905 	mov	a,_bp
      000990 24 1A            [12] 1906 	add	a,#0x1a
      000992 F8               [12] 1907 	mov	r0,a
      000993 86 07            [24] 1908 	mov	ar7,@r0
      000995 08               [12] 1909 	inc	r0
      000996 86 06            [24] 1910 	mov	ar6,@r0
      000998 08               [12] 1911 	inc	r0
      000999 86 05            [24] 1912 	mov	ar5,@r0
      00099B 08               [12] 1913 	inc	r0
      00099C 86 04            [24] 1914 	mov	ar4,@r0
      00099E E5*00            [12] 1915 	mov	a,_bp
      0009A0 24 22            [12] 1916 	add	a,#0x22
      0009A2 F8               [12] 1917 	mov	r0,a
      0009A3 A6 07            [24] 1918 	mov	@r0,ar7
      0009A5 08               [12] 1919 	inc	r0
      0009A6 A6 06            [24] 1920 	mov	@r0,ar6
      0009A8 08               [12] 1921 	inc	r0
      0009A9 A6 05            [24] 1922 	mov	@r0,ar5
      0009AB 08               [12] 1923 	inc	r0
      0009AC A6 04            [24] 1924 	mov	@r0,ar4
                                   1925 ;	calc.c:18: printf("%08lx\t", d);
      0009AE C0 07            [24] 1926 	push	ar7
      0009B0 C0 06            [24] 1927 	push	ar6
      0009B2 C0 05            [24] 1928 	push	ar5
      0009B4 C0 04            [24] 1929 	push	ar4
      0009B6 74r00            [12] 1930 	mov	a,#___str_0
      0009B8 C0 E0            [24] 1931 	push	acc
      0009BA 74s00            [12] 1932 	mov	a,#(___str_0 >> 8)
      0009BC C0 E0            [24] 1933 	push	acc
      0009BE 74 80            [12] 1934 	mov	a,#0x80
      0009C0 C0 E0            [24] 1935 	push	acc
      0009C2 12r00r00         [24] 1936 	lcall	_printf
      0009C5 E5 81            [12] 1937 	mov	a,sp
      0009C7 24 F9            [12] 1938 	add	a,#0xf9
      0009C9 F5 81            [12] 1939 	mov	sp,a
                                   1940 ;	calc.c:19: printf("% 11ld\t", d);
      0009CB E5*00            [12] 1941 	mov	a,_bp
      0009CD 24 22            [12] 1942 	add	a,#0x22
      0009CF F8               [12] 1943 	mov	r0,a
      0009D0 E6               [12] 1944 	mov	a,@r0
      0009D1 C0 E0            [24] 1945 	push	acc
      0009D3 08               [12] 1946 	inc	r0
      0009D4 E6               [12] 1947 	mov	a,@r0
      0009D5 C0 E0            [24] 1948 	push	acc
      0009D7 08               [12] 1949 	inc	r0
      0009D8 E6               [12] 1950 	mov	a,@r0
      0009D9 C0 E0            [24] 1951 	push	acc
      0009DB 08               [12] 1952 	inc	r0
      0009DC E6               [12] 1953 	mov	a,@r0
      0009DD C0 E0            [24] 1954 	push	acc
      0009DF 74r07            [12] 1955 	mov	a,#___str_1
      0009E1 C0 E0            [24] 1956 	push	acc
      0009E3 74s00            [12] 1957 	mov	a,#(___str_1 >> 8)
      0009E5 C0 E0            [24] 1958 	push	acc
      0009E7 74 80            [12] 1959 	mov	a,#0x80
      0009E9 C0 E0            [24] 1960 	push	acc
      0009EB 12r00r00         [24] 1961 	lcall	_printf
      0009EE E5 81            [12] 1962 	mov	a,sp
      0009F0 24 F9            [12] 1963 	add	a,#0xf9
      0009F2 F5 81            [12] 1964 	mov	sp,a
                                   1965 ;	calc.c:20: printf("%011lo\t", d);
      0009F4 E5*00            [12] 1966 	mov	a,_bp
      0009F6 24 22            [12] 1967 	add	a,#0x22
      0009F8 F8               [12] 1968 	mov	r0,a
      0009F9 E6               [12] 1969 	mov	a,@r0
      0009FA C0 E0            [24] 1970 	push	acc
      0009FC 08               [12] 1971 	inc	r0
      0009FD E6               [12] 1972 	mov	a,@r0
      0009FE C0 E0            [24] 1973 	push	acc
      000A00 08               [12] 1974 	inc	r0
      000A01 E6               [12] 1975 	mov	a,@r0
      000A02 C0 E0            [24] 1976 	push	acc
      000A04 08               [12] 1977 	inc	r0
      000A05 E6               [12] 1978 	mov	a,@r0
      000A06 C0 E0            [24] 1979 	push	acc
      000A08 74r0F            [12] 1980 	mov	a,#___str_2
      000A0A C0 E0            [24] 1981 	push	acc
      000A0C 74s00            [12] 1982 	mov	a,#(___str_2 >> 8)
      000A0E C0 E0            [24] 1983 	push	acc
      000A10 74 80            [12] 1984 	mov	a,#0x80
      000A12 C0 E0            [24] 1985 	push	acc
      000A14 12r00r00         [24] 1986 	lcall	_printf
      000A17 E5 81            [12] 1987 	mov	a,sp
      000A19 24 F9            [12] 1988 	add	a,#0xf9
      000A1B F5 81            [12] 1989 	mov	sp,a
                                   1990 ;	calc.c:21: print32bin(d);
      000A1D E5*00            [12] 1991 	mov	a,_bp
      000A1F 24 22            [12] 1992 	add	a,#0x22
      000A21 F8               [12] 1993 	mov	r0,a
      000A22 86 82            [24] 1994 	mov	dpl,@r0
      000A24 08               [12] 1995 	inc	r0
      000A25 86 83            [24] 1996 	mov	dph,@r0
      000A27 08               [12] 1997 	inc	r0
      000A28 86 F0            [24] 1998 	mov	b,@r0
      000A2A 08               [12] 1999 	inc	r0
      000A2B E6               [12] 2000 	mov	a,@r0
      000A2C 12r00r00         [24] 2001 	lcall	_print32bin
                                   2002 ;	calc.c:107: printstr("\r\n");
      000A2F 90r00r17         [24] 2003 	mov	dptr,#___str_3
      000A32 75 F0 80         [24] 2004 	mov	b,#0x80
      000A35 12r00r00         [24] 2005 	lcall	_printstr
                                   2006 ;	calc.c:109: break;
      000A38 02r24r0E         [24] 2007 	ljmp	00249$
                                   2008 ;	calc.c:110: case 'P':
      000A3B                       2009 00113$:
                                   2010 ;	calc.c:111: printstr("\r\n");
      000A3B 90r00r17         [24] 2011 	mov	dptr,#___str_3
      000A3E 75 F0 80         [24] 2012 	mov	b,#0x80
      000A41 C0 04            [24] 2013 	push	ar4
      000A43 C0 03            [24] 2014 	push	ar3
      000A45 C0 02            [24] 2015 	push	ar2
      000A47 12r00r00         [24] 2016 	lcall	_printstr
      000A4A D0 02            [24] 2017 	pop	ar2
      000A4C D0 03            [24] 2018 	pop	ar3
      000A4E D0 04            [24] 2019 	pop	ar4
                                   2020 ;	calc.c:112: (void)dump_pop(_ctx, delta);
      000A50 E5*00            [12] 2021 	mov	a,_bp
      000A52 24 FB            [12] 2022 	add	a,#0xfb
      000A54 F8               [12] 2023 	mov	r0,a
      000A55 E6               [12] 2024 	mov	a,@r0
      000A56 C0 E0            [24] 2025 	push	acc
      000A58 08               [12] 2026 	inc	r0
      000A59 E6               [12] 2027 	mov	a,@r0
      000A5A C0 E0            [24] 2028 	push	acc
      000A5C 08               [12] 2029 	inc	r0
      000A5D E6               [12] 2030 	mov	a,@r0
      000A5E C0 E0            [24] 2031 	push	acc
      000A60 8A 82            [24] 2032 	mov	dpl,r2
      000A62 8B 83            [24] 2033 	mov	dph,r3
      000A64 8C F0            [24] 2034 	mov	b,r4
      000A66 12r01r71         [24] 2035 	lcall	_dump_pop
      000A69 15 81            [12] 2036 	dec	sp
      000A6B 15 81            [12] 2037 	dec	sp
      000A6D 15 81            [12] 2038 	dec	sp
                                   2039 ;	calc.c:113: break;
      000A6F 02r24r0E         [24] 2040 	ljmp	00249$
                                   2041 ;	calc.c:114: case 'x':
      000A72                       2042 00114$:
                                   2043 ;	calc.c:115: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      000A72 E5*00            [12] 2044 	mov	a,_bp
      000A74 24 1A            [12] 2045 	add	a,#0x1a
      000A76 FF               [12] 2046 	mov	r7,a
      000A77 7E 00            [12] 2047 	mov	r6,#0x00
      000A79 7D 40            [12] 2048 	mov	r5,#0x40
      000A7B E5*00            [12] 2049 	mov	a,_bp
      000A7D 24 17            [12] 2050 	add	a,#0x17
      000A7F F8               [12] 2051 	mov	r0,a
      000A80 A9*00            [24] 2052 	mov	r1,_bp
      000A82 09               [12] 2053 	inc	r1
      000A83 09               [12] 2054 	inc	r1
      000A84 74 11            [12] 2055 	mov	a,#0x11
      000A86 26               [12] 2056 	add	a,@r0
      000A87 F7               [12] 2057 	mov	@r1,a
      000A88 74 40            [12] 2058 	mov	a,#0x40
      000A8A 08               [12] 2059 	inc	r0
      000A8B 36               [12] 2060 	addc	a,@r0
      000A8C 09               [12] 2061 	inc	r1
      000A8D F7               [12] 2062 	mov	@r1,a
      000A8E 08               [12] 2063 	inc	r0
      000A8F 09               [12] 2064 	inc	r1
      000A90 E6               [12] 2065 	mov	a,@r0
      000A91 F7               [12] 2066 	mov	@r1,a
      000A92 A8*00            [24] 2067 	mov	r0,_bp
      000A94 08               [12] 2068 	inc	r0
      000A95 08               [12] 2069 	inc	r0
      000A96 86 82            [24] 2070 	mov	dpl,@r0
      000A98 08               [12] 2071 	inc	r0
      000A99 86 83            [24] 2072 	mov	dph,@r0
      000A9B 08               [12] 2073 	inc	r0
      000A9C 86 F0            [24] 2074 	mov	b,@r0
      000A9E 12r00r00         [24] 2075 	lcall	__gptrget
      000AA1 FA               [12] 2076 	mov	r2,a
      000AA2 A3               [24] 2077 	inc	dptr
      000AA3 12r00r00         [24] 2078 	lcall	__gptrget
      000AA6 FB               [12] 2079 	mov	r3,a
      000AA7 A3               [24] 2080 	inc	dptr
      000AA8 12r00r00         [24] 2081 	lcall	__gptrget
      000AAB FC               [12] 2082 	mov	r4,a
      000AAC C0 07            [24] 2083 	push	ar7
      000AAE C0 06            [24] 2084 	push	ar6
      000AB0 C0 05            [24] 2085 	push	ar5
      000AB2 8A 82            [24] 2086 	mov	dpl,r2
      000AB4 8B 83            [24] 2087 	mov	dph,r3
      000AB6 8C F0            [24] 2088 	mov	b,r4
      000AB8 12r00r00         [24] 2089 	lcall	_stack_pop
      000ABB AB 82            [24] 2090 	mov	r3,dpl
      000ABD AC 83            [24] 2091 	mov	r4,dph
      000ABF 15 81            [12] 2092 	dec	sp
      000AC1 15 81            [12] 2093 	dec	sp
      000AC3 15 81            [12] 2094 	dec	sp
      000AC5 EB               [12] 2095 	mov	a,r3
      000AC6 4C               [12] 2096 	orl	a,r4
      000AC7 70 0C            [24] 2097 	jnz	00119$
      000AC9 90r00r4E         [24] 2098 	mov	dptr,#___str_10
      000ACC 75 F0 80         [24] 2099 	mov	b,#0x80
      000ACF 12r00r00         [24] 2100 	lcall	_printstr
      000AD2 02r24r0E         [24] 2101 	ljmp	00249$
      000AD5                       2102 00119$:
                                   2103 ;	calc.c:116: else if (!stack_pop(ctx->ps, &d1)) {
      000AD5 E5*00            [12] 2104 	mov	a,_bp
      000AD7 24 1E            [12] 2105 	add	a,#0x1e
      000AD9 FF               [12] 2106 	mov	r7,a
      000ADA 7E 00            [12] 2107 	mov	r6,#0x00
      000ADC 7D 40            [12] 2108 	mov	r5,#0x40
      000ADE A8*00            [24] 2109 	mov	r0,_bp
      000AE0 08               [12] 2110 	inc	r0
      000AE1 08               [12] 2111 	inc	r0
      000AE2 86 82            [24] 2112 	mov	dpl,@r0
      000AE4 08               [12] 2113 	inc	r0
      000AE5 86 83            [24] 2114 	mov	dph,@r0
      000AE7 08               [12] 2115 	inc	r0
      000AE8 86 F0            [24] 2116 	mov	b,@r0
      000AEA 12r00r00         [24] 2117 	lcall	__gptrget
      000AED FA               [12] 2118 	mov	r2,a
      000AEE A3               [24] 2119 	inc	dptr
      000AEF 12r00r00         [24] 2120 	lcall	__gptrget
      000AF2 FB               [12] 2121 	mov	r3,a
      000AF3 A3               [24] 2122 	inc	dptr
      000AF4 12r00r00         [24] 2123 	lcall	__gptrget
      000AF7 FC               [12] 2124 	mov	r4,a
      000AF8 C0 07            [24] 2125 	push	ar7
      000AFA C0 06            [24] 2126 	push	ar6
      000AFC C0 05            [24] 2127 	push	ar5
      000AFE 8A 82            [24] 2128 	mov	dpl,r2
      000B00 8B 83            [24] 2129 	mov	dph,r3
      000B02 8C F0            [24] 2130 	mov	b,r4
      000B04 12r00r00         [24] 2131 	lcall	_stack_pop
      000B07 AB 82            [24] 2132 	mov	r3,dpl
      000B09 AC 83            [24] 2133 	mov	r4,dph
      000B0B 15 81            [12] 2134 	dec	sp
      000B0D 15 81            [12] 2135 	dec	sp
      000B0F 15 81            [12] 2136 	dec	sp
      000B11 EB               [12] 2137 	mov	a,r3
      000B12 4C               [12] 2138 	orl	a,r4
      000B13 70 49            [24] 2139 	jnz	00116$
                                   2140 ;	calc.c:117: (void)stack_push(ctx->ps, d0);
      000B15 A8*00            [24] 2141 	mov	r0,_bp
      000B17 08               [12] 2142 	inc	r0
      000B18 08               [12] 2143 	inc	r0
      000B19 86 82            [24] 2144 	mov	dpl,@r0
      000B1B 08               [12] 2145 	inc	r0
      000B1C 86 83            [24] 2146 	mov	dph,@r0
      000B1E 08               [12] 2147 	inc	r0
      000B1F 86 F0            [24] 2148 	mov	b,@r0
      000B21 12r00r00         [24] 2149 	lcall	__gptrget
      000B24 FA               [12] 2150 	mov	r2,a
      000B25 A3               [24] 2151 	inc	dptr
      000B26 12r00r00         [24] 2152 	lcall	__gptrget
      000B29 FB               [12] 2153 	mov	r3,a
      000B2A A3               [24] 2154 	inc	dptr
      000B2B 12r00r00         [24] 2155 	lcall	__gptrget
      000B2E FC               [12] 2156 	mov	r4,a
      000B2F E5*00            [12] 2157 	mov	a,_bp
      000B31 24 1A            [12] 2158 	add	a,#0x1a
      000B33 F8               [12] 2159 	mov	r0,a
      000B34 E6               [12] 2160 	mov	a,@r0
      000B35 C0 E0            [24] 2161 	push	acc
      000B37 08               [12] 2162 	inc	r0
      000B38 E6               [12] 2163 	mov	a,@r0
      000B39 C0 E0            [24] 2164 	push	acc
      000B3B 08               [12] 2165 	inc	r0
      000B3C E6               [12] 2166 	mov	a,@r0
      000B3D C0 E0            [24] 2167 	push	acc
      000B3F 08               [12] 2168 	inc	r0
      000B40 E6               [12] 2169 	mov	a,@r0
      000B41 C0 E0            [24] 2170 	push	acc
      000B43 8A 82            [24] 2171 	mov	dpl,r2
      000B45 8B 83            [24] 2172 	mov	dph,r3
      000B47 8C F0            [24] 2173 	mov	b,r4
      000B49 12r00r00         [24] 2174 	lcall	_stack_push
      000B4C E5 81            [12] 2175 	mov	a,sp
      000B4E 24 FC            [12] 2176 	add	a,#0xfc
      000B50 F5 81            [12] 2177 	mov	sp,a
                                   2178 ;	calc.c:118: printstr("\r\nstack underflow\r\n");
      000B52 90r00r4E         [24] 2179 	mov	dptr,#___str_10
      000B55 75 F0 80         [24] 2180 	mov	b,#0x80
      000B58 12r00r00         [24] 2181 	lcall	_printstr
      000B5B 02r24r0E         [24] 2182 	ljmp	00249$
      000B5E                       2183 00116$:
                                   2184 ;	calc.c:120: (void)stack_push(ctx->ps, d0);
      000B5E A8*00            [24] 2185 	mov	r0,_bp
      000B60 08               [12] 2186 	inc	r0
      000B61 08               [12] 2187 	inc	r0
      000B62 86 82            [24] 2188 	mov	dpl,@r0
      000B64 08               [12] 2189 	inc	r0
      000B65 86 83            [24] 2190 	mov	dph,@r0
      000B67 08               [12] 2191 	inc	r0
      000B68 86 F0            [24] 2192 	mov	b,@r0
      000B6A 12r00r00         [24] 2193 	lcall	__gptrget
      000B6D FA               [12] 2194 	mov	r2,a
      000B6E A3               [24] 2195 	inc	dptr
      000B6F 12r00r00         [24] 2196 	lcall	__gptrget
      000B72 FB               [12] 2197 	mov	r3,a
      000B73 A3               [24] 2198 	inc	dptr
      000B74 12r00r00         [24] 2199 	lcall	__gptrget
      000B77 FC               [12] 2200 	mov	r4,a
      000B78 E5*00            [12] 2201 	mov	a,_bp
      000B7A 24 1A            [12] 2202 	add	a,#0x1a
      000B7C F8               [12] 2203 	mov	r0,a
      000B7D E6               [12] 2204 	mov	a,@r0
      000B7E C0 E0            [24] 2205 	push	acc
      000B80 08               [12] 2206 	inc	r0
      000B81 E6               [12] 2207 	mov	a,@r0
      000B82 C0 E0            [24] 2208 	push	acc
      000B84 08               [12] 2209 	inc	r0
      000B85 E6               [12] 2210 	mov	a,@r0
      000B86 C0 E0            [24] 2211 	push	acc
      000B88 08               [12] 2212 	inc	r0
      000B89 E6               [12] 2213 	mov	a,@r0
      000B8A C0 E0            [24] 2214 	push	acc
      000B8C 8A 82            [24] 2215 	mov	dpl,r2
      000B8E 8B 83            [24] 2216 	mov	dph,r3
      000B90 8C F0            [24] 2217 	mov	b,r4
      000B92 12r00r00         [24] 2218 	lcall	_stack_push
      000B95 E5 81            [12] 2219 	mov	a,sp
      000B97 24 FC            [12] 2220 	add	a,#0xfc
      000B99 F5 81            [12] 2221 	mov	sp,a
                                   2222 ;	calc.c:121: (void)stack_push(ctx->ps, d1);
      000B9B A8*00            [24] 2223 	mov	r0,_bp
      000B9D 08               [12] 2224 	inc	r0
      000B9E 08               [12] 2225 	inc	r0
      000B9F 86 82            [24] 2226 	mov	dpl,@r0
      000BA1 08               [12] 2227 	inc	r0
      000BA2 86 83            [24] 2228 	mov	dph,@r0
      000BA4 08               [12] 2229 	inc	r0
      000BA5 86 F0            [24] 2230 	mov	b,@r0
      000BA7 12r00r00         [24] 2231 	lcall	__gptrget
      000BAA FA               [12] 2232 	mov	r2,a
      000BAB A3               [24] 2233 	inc	dptr
      000BAC 12r00r00         [24] 2234 	lcall	__gptrget
      000BAF FB               [12] 2235 	mov	r3,a
      000BB0 A3               [24] 2236 	inc	dptr
      000BB1 12r00r00         [24] 2237 	lcall	__gptrget
      000BB4 FC               [12] 2238 	mov	r4,a
      000BB5 E5*00            [12] 2239 	mov	a,_bp
      000BB7 24 1E            [12] 2240 	add	a,#0x1e
      000BB9 F8               [12] 2241 	mov	r0,a
      000BBA E6               [12] 2242 	mov	a,@r0
      000BBB C0 E0            [24] 2243 	push	acc
      000BBD 08               [12] 2244 	inc	r0
      000BBE E6               [12] 2245 	mov	a,@r0
      000BBF C0 E0            [24] 2246 	push	acc
      000BC1 08               [12] 2247 	inc	r0
      000BC2 E6               [12] 2248 	mov	a,@r0
      000BC3 C0 E0            [24] 2249 	push	acc
      000BC5 08               [12] 2250 	inc	r0
      000BC6 E6               [12] 2251 	mov	a,@r0
      000BC7 C0 E0            [24] 2252 	push	acc
      000BC9 8A 82            [24] 2253 	mov	dpl,r2
      000BCB 8B 83            [24] 2254 	mov	dph,r3
      000BCD 8C F0            [24] 2255 	mov	b,r4
      000BCF 12r00r00         [24] 2256 	lcall	_stack_push
      000BD2 E5 81            [12] 2257 	mov	a,sp
      000BD4 24 FC            [12] 2258 	add	a,#0xfc
      000BD6 F5 81            [12] 2259 	mov	sp,a
                                   2260 ;	calc.c:123: break;
      000BD8 02r24r0E         [24] 2261 	ljmp	00249$
                                   2262 ;	calc.c:124: case 'm':
      000BDB                       2263 00121$:
                                   2264 ;	calc.c:125: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      000BDB E5*00            [12] 2265 	mov	a,_bp
      000BDD 24 1A            [12] 2266 	add	a,#0x1a
      000BDF FF               [12] 2267 	mov	r7,a
      000BE0 7E 00            [12] 2268 	mov	r6,#0x00
      000BE2 7D 40            [12] 2269 	mov	r5,#0x40
      000BE4 E5*00            [12] 2270 	mov	a,_bp
      000BE6 24 17            [12] 2271 	add	a,#0x17
      000BE8 F8               [12] 2272 	mov	r0,a
      000BE9 E5*00            [12] 2273 	mov	a,_bp
      000BEB 24 05            [12] 2274 	add	a,#0x05
      000BED F9               [12] 2275 	mov	r1,a
      000BEE 74 11            [12] 2276 	mov	a,#0x11
      000BF0 26               [12] 2277 	add	a,@r0
      000BF1 F7               [12] 2278 	mov	@r1,a
      000BF2 74 40            [12] 2279 	mov	a,#0x40
      000BF4 08               [12] 2280 	inc	r0
      000BF5 36               [12] 2281 	addc	a,@r0
      000BF6 09               [12] 2282 	inc	r1
      000BF7 F7               [12] 2283 	mov	@r1,a
      000BF8 08               [12] 2284 	inc	r0
      000BF9 09               [12] 2285 	inc	r1
      000BFA E6               [12] 2286 	mov	a,@r0
      000BFB F7               [12] 2287 	mov	@r1,a
      000BFC E5*00            [12] 2288 	mov	a,_bp
      000BFE 24 05            [12] 2289 	add	a,#0x05
      000C00 F8               [12] 2290 	mov	r0,a
      000C01 86 82            [24] 2291 	mov	dpl,@r0
      000C03 08               [12] 2292 	inc	r0
      000C04 86 83            [24] 2293 	mov	dph,@r0
      000C06 08               [12] 2294 	inc	r0
      000C07 86 F0            [24] 2295 	mov	b,@r0
      000C09 12r00r00         [24] 2296 	lcall	__gptrget
      000C0C FA               [12] 2297 	mov	r2,a
      000C0D A3               [24] 2298 	inc	dptr
      000C0E 12r00r00         [24] 2299 	lcall	__gptrget
      000C11 FB               [12] 2300 	mov	r3,a
      000C12 A3               [24] 2301 	inc	dptr
      000C13 12r00r00         [24] 2302 	lcall	__gptrget
      000C16 FC               [12] 2303 	mov	r4,a
      000C17 C0 07            [24] 2304 	push	ar7
      000C19 C0 06            [24] 2305 	push	ar6
      000C1B C0 05            [24] 2306 	push	ar5
      000C1D 8A 82            [24] 2307 	mov	dpl,r2
      000C1F 8B 83            [24] 2308 	mov	dph,r3
      000C21 8C F0            [24] 2309 	mov	b,r4
      000C23 12r00r00         [24] 2310 	lcall	_stack_pop
      000C26 AB 82            [24] 2311 	mov	r3,dpl
      000C28 AC 83            [24] 2312 	mov	r4,dph
      000C2A 15 81            [12] 2313 	dec	sp
      000C2C 15 81            [12] 2314 	dec	sp
      000C2E 15 81            [12] 2315 	dec	sp
      000C30 EB               [12] 2316 	mov	a,r3
      000C31 4C               [12] 2317 	orl	a,r4
      000C32 70 0C            [24] 2318 	jnz	00125$
      000C34 90r00r4E         [24] 2319 	mov	dptr,#___str_10
      000C37 75 F0 80         [24] 2320 	mov	b,#0x80
      000C3A 12r00r00         [24] 2321 	lcall	_printstr
      000C3D 02r24r0E         [24] 2322 	ljmp	00249$
      000C40                       2323 00125$:
                                   2324 ;	calc.c:127: if (!stack_push(ctx->ss, d0)) {
      000C40 E5*00            [12] 2325 	mov	a,_bp
      000C42 24 17            [12] 2326 	add	a,#0x17
      000C44 F8               [12] 2327 	mov	r0,a
      000C45 74 14            [12] 2328 	mov	a,#0x14
      000C47 26               [12] 2329 	add	a,@r0
      000C48 FA               [12] 2330 	mov	r2,a
      000C49 74 40            [12] 2331 	mov	a,#0x40
      000C4B 08               [12] 2332 	inc	r0
      000C4C 36               [12] 2333 	addc	a,@r0
      000C4D FB               [12] 2334 	mov	r3,a
      000C4E 08               [12] 2335 	inc	r0
      000C4F 86 04            [24] 2336 	mov	ar4,@r0
      000C51 8A 82            [24] 2337 	mov	dpl,r2
      000C53 8B 83            [24] 2338 	mov	dph,r3
      000C55 8C F0            [24] 2339 	mov	b,r4
      000C57 12r00r00         [24] 2340 	lcall	__gptrget
      000C5A FA               [12] 2341 	mov	r2,a
      000C5B A3               [24] 2342 	inc	dptr
      000C5C 12r00r00         [24] 2343 	lcall	__gptrget
      000C5F FB               [12] 2344 	mov	r3,a
      000C60 A3               [24] 2345 	inc	dptr
      000C61 12r00r00         [24] 2346 	lcall	__gptrget
      000C64 FC               [12] 2347 	mov	r4,a
      000C65 E5*00            [12] 2348 	mov	a,_bp
      000C67 24 1A            [12] 2349 	add	a,#0x1a
      000C69 F8               [12] 2350 	mov	r0,a
      000C6A E6               [12] 2351 	mov	a,@r0
      000C6B C0 E0            [24] 2352 	push	acc
      000C6D 08               [12] 2353 	inc	r0
      000C6E E6               [12] 2354 	mov	a,@r0
      000C6F C0 E0            [24] 2355 	push	acc
      000C71 08               [12] 2356 	inc	r0
      000C72 E6               [12] 2357 	mov	a,@r0
      000C73 C0 E0            [24] 2358 	push	acc
      000C75 08               [12] 2359 	inc	r0
      000C76 E6               [12] 2360 	mov	a,@r0
      000C77 C0 E0            [24] 2361 	push	acc
      000C79 8A 82            [24] 2362 	mov	dpl,r2
      000C7B 8B 83            [24] 2363 	mov	dph,r3
      000C7D 8C F0            [24] 2364 	mov	b,r4
      000C7F 12r00r00         [24] 2365 	lcall	_stack_push
      000C82 AB 82            [24] 2366 	mov	r3,dpl
      000C84 AC 83            [24] 2367 	mov	r4,dph
      000C86 E5 81            [12] 2368 	mov	a,sp
      000C88 24 FC            [12] 2369 	add	a,#0xfc
      000C8A F5 81            [12] 2370 	mov	sp,a
      000C8C EB               [12] 2371 	mov	a,r3
      000C8D 4C               [12] 2372 	orl	a,r4
      000C8E 60 03            [24] 2373 	jz	00558$
      000C90 02r24r0E         [24] 2374 	ljmp	00249$
      000C93                       2375 00558$:
                                   2376 ;	calc.c:128: printstr("\r\nsecondary stack overflow\r\n");
      000C93 90r00r62         [24] 2377 	mov	dptr,#___str_11
      000C96 75 F0 80         [24] 2378 	mov	b,#0x80
      000C99 12r00r00         [24] 2379 	lcall	_printstr
                                   2380 ;	calc.c:129: (void)stack_push(ctx->ps, d0);
      000C9C E5*00            [12] 2381 	mov	a,_bp
      000C9E 24 05            [12] 2382 	add	a,#0x05
      000CA0 F8               [12] 2383 	mov	r0,a
      000CA1 86 82            [24] 2384 	mov	dpl,@r0
      000CA3 08               [12] 2385 	inc	r0
      000CA4 86 83            [24] 2386 	mov	dph,@r0
      000CA6 08               [12] 2387 	inc	r0
      000CA7 86 F0            [24] 2388 	mov	b,@r0
      000CA9 12r00r00         [24] 2389 	lcall	__gptrget
      000CAC FA               [12] 2390 	mov	r2,a
      000CAD A3               [24] 2391 	inc	dptr
      000CAE 12r00r00         [24] 2392 	lcall	__gptrget
      000CB1 FB               [12] 2393 	mov	r3,a
      000CB2 A3               [24] 2394 	inc	dptr
      000CB3 12r00r00         [24] 2395 	lcall	__gptrget
      000CB6 FC               [12] 2396 	mov	r4,a
      000CB7 E5*00            [12] 2397 	mov	a,_bp
      000CB9 24 1A            [12] 2398 	add	a,#0x1a
      000CBB F8               [12] 2399 	mov	r0,a
      000CBC E6               [12] 2400 	mov	a,@r0
      000CBD C0 E0            [24] 2401 	push	acc
      000CBF 08               [12] 2402 	inc	r0
      000CC0 E6               [12] 2403 	mov	a,@r0
      000CC1 C0 E0            [24] 2404 	push	acc
      000CC3 08               [12] 2405 	inc	r0
      000CC4 E6               [12] 2406 	mov	a,@r0
      000CC5 C0 E0            [24] 2407 	push	acc
      000CC7 08               [12] 2408 	inc	r0
      000CC8 E6               [12] 2409 	mov	a,@r0
      000CC9 C0 E0            [24] 2410 	push	acc
      000CCB 8A 82            [24] 2411 	mov	dpl,r2
      000CCD 8B 83            [24] 2412 	mov	dph,r3
      000CCF 8C F0            [24] 2413 	mov	b,r4
      000CD1 12r00r00         [24] 2414 	lcall	_stack_push
      000CD4 E5 81            [12] 2415 	mov	a,sp
      000CD6 24 FC            [12] 2416 	add	a,#0xfc
      000CD8 F5 81            [12] 2417 	mov	sp,a
                                   2418 ;	calc.c:132: break;
      000CDA 02r24r0E         [24] 2419 	ljmp	00249$
                                   2420 ;	calc.c:133: case 'M':
      000CDD                       2421 00127$:
                                   2422 ;	calc.c:134: if (!stack_pop(ctx->ss, &d0)) printstr("\r\nsecondary stack underflow\r\n");
      000CDD E5*00            [12] 2423 	mov	a,_bp
      000CDF 24 1A            [12] 2424 	add	a,#0x1a
      000CE1 FF               [12] 2425 	mov	r7,a
      000CE2 7E 00            [12] 2426 	mov	r6,#0x00
      000CE4 7D 40            [12] 2427 	mov	r5,#0x40
      000CE6 E5*00            [12] 2428 	mov	a,_bp
      000CE8 24 17            [12] 2429 	add	a,#0x17
      000CEA F8               [12] 2430 	mov	r0,a
      000CEB E5*00            [12] 2431 	mov	a,_bp
      000CED 24 05            [12] 2432 	add	a,#0x05
      000CEF F9               [12] 2433 	mov	r1,a
      000CF0 74 14            [12] 2434 	mov	a,#0x14
      000CF2 26               [12] 2435 	add	a,@r0
      000CF3 F7               [12] 2436 	mov	@r1,a
      000CF4 74 40            [12] 2437 	mov	a,#0x40
      000CF6 08               [12] 2438 	inc	r0
      000CF7 36               [12] 2439 	addc	a,@r0
      000CF8 09               [12] 2440 	inc	r1
      000CF9 F7               [12] 2441 	mov	@r1,a
      000CFA 08               [12] 2442 	inc	r0
      000CFB 09               [12] 2443 	inc	r1
      000CFC E6               [12] 2444 	mov	a,@r0
      000CFD F7               [12] 2445 	mov	@r1,a
      000CFE E5*00            [12] 2446 	mov	a,_bp
      000D00 24 05            [12] 2447 	add	a,#0x05
      000D02 F8               [12] 2448 	mov	r0,a
      000D03 86 82            [24] 2449 	mov	dpl,@r0
      000D05 08               [12] 2450 	inc	r0
      000D06 86 83            [24] 2451 	mov	dph,@r0
      000D08 08               [12] 2452 	inc	r0
      000D09 86 F0            [24] 2453 	mov	b,@r0
      000D0B 12r00r00         [24] 2454 	lcall	__gptrget
      000D0E FA               [12] 2455 	mov	r2,a
      000D0F A3               [24] 2456 	inc	dptr
      000D10 12r00r00         [24] 2457 	lcall	__gptrget
      000D13 FB               [12] 2458 	mov	r3,a
      000D14 A3               [24] 2459 	inc	dptr
      000D15 12r00r00         [24] 2460 	lcall	__gptrget
      000D18 FC               [12] 2461 	mov	r4,a
      000D19 C0 07            [24] 2462 	push	ar7
      000D1B C0 06            [24] 2463 	push	ar6
      000D1D C0 05            [24] 2464 	push	ar5
      000D1F 8A 82            [24] 2465 	mov	dpl,r2
      000D21 8B 83            [24] 2466 	mov	dph,r3
      000D23 8C F0            [24] 2467 	mov	b,r4
      000D25 12r00r00         [24] 2468 	lcall	_stack_pop
      000D28 AB 82            [24] 2469 	mov	r3,dpl
      000D2A AC 83            [24] 2470 	mov	r4,dph
      000D2C 15 81            [12] 2471 	dec	sp
      000D2E 15 81            [12] 2472 	dec	sp
      000D30 15 81            [12] 2473 	dec	sp
      000D32 EB               [12] 2474 	mov	a,r3
      000D33 4C               [12] 2475 	orl	a,r4
      000D34 70 0C            [24] 2476 	jnz	00131$
      000D36 90r00r7F         [24] 2477 	mov	dptr,#___str_12
      000D39 75 F0 80         [24] 2478 	mov	b,#0x80
      000D3C 12r00r00         [24] 2479 	lcall	_printstr
      000D3F 02r24r0E         [24] 2480 	ljmp	00249$
      000D42                       2481 00131$:
                                   2482 ;	calc.c:136: if (!stack_push(ctx->ps, d0)) {
      000D42 E5*00            [12] 2483 	mov	a,_bp
      000D44 24 17            [12] 2484 	add	a,#0x17
      000D46 F8               [12] 2485 	mov	r0,a
      000D47 74 11            [12] 2486 	mov	a,#0x11
      000D49 26               [12] 2487 	add	a,@r0
      000D4A FA               [12] 2488 	mov	r2,a
      000D4B 74 40            [12] 2489 	mov	a,#0x40
      000D4D 08               [12] 2490 	inc	r0
      000D4E 36               [12] 2491 	addc	a,@r0
      000D4F FB               [12] 2492 	mov	r3,a
      000D50 08               [12] 2493 	inc	r0
      000D51 86 04            [24] 2494 	mov	ar4,@r0
      000D53 8A 82            [24] 2495 	mov	dpl,r2
      000D55 8B 83            [24] 2496 	mov	dph,r3
      000D57 8C F0            [24] 2497 	mov	b,r4
      000D59 12r00r00         [24] 2498 	lcall	__gptrget
      000D5C FA               [12] 2499 	mov	r2,a
      000D5D A3               [24] 2500 	inc	dptr
      000D5E 12r00r00         [24] 2501 	lcall	__gptrget
      000D61 FB               [12] 2502 	mov	r3,a
      000D62 A3               [24] 2503 	inc	dptr
      000D63 12r00r00         [24] 2504 	lcall	__gptrget
      000D66 FC               [12] 2505 	mov	r4,a
      000D67 E5*00            [12] 2506 	mov	a,_bp
      000D69 24 1A            [12] 2507 	add	a,#0x1a
      000D6B F8               [12] 2508 	mov	r0,a
      000D6C E6               [12] 2509 	mov	a,@r0
      000D6D C0 E0            [24] 2510 	push	acc
      000D6F 08               [12] 2511 	inc	r0
      000D70 E6               [12] 2512 	mov	a,@r0
      000D71 C0 E0            [24] 2513 	push	acc
      000D73 08               [12] 2514 	inc	r0
      000D74 E6               [12] 2515 	mov	a,@r0
      000D75 C0 E0            [24] 2516 	push	acc
      000D77 08               [12] 2517 	inc	r0
      000D78 E6               [12] 2518 	mov	a,@r0
      000D79 C0 E0            [24] 2519 	push	acc
      000D7B 8A 82            [24] 2520 	mov	dpl,r2
      000D7D 8B 83            [24] 2521 	mov	dph,r3
      000D7F 8C F0            [24] 2522 	mov	b,r4
      000D81 12r00r00         [24] 2523 	lcall	_stack_push
      000D84 AB 82            [24] 2524 	mov	r3,dpl
      000D86 AC 83            [24] 2525 	mov	r4,dph
      000D88 E5 81            [12] 2526 	mov	a,sp
      000D8A 24 FC            [12] 2527 	add	a,#0xfc
      000D8C F5 81            [12] 2528 	mov	sp,a
      000D8E EB               [12] 2529 	mov	a,r3
      000D8F 4C               [12] 2530 	orl	a,r4
      000D90 60 03            [24] 2531 	jz	00560$
      000D92 02r24r0E         [24] 2532 	ljmp	00249$
      000D95                       2533 00560$:
                                   2534 ;	calc.c:137: printstr("\r\nstack overflow\r\n");
      000D95 90r00r9D         [24] 2535 	mov	dptr,#___str_13
      000D98 75 F0 80         [24] 2536 	mov	b,#0x80
      000D9B 12r00r00         [24] 2537 	lcall	_printstr
                                   2538 ;	calc.c:138: (void)stack_push(ctx->ss, d0);
      000D9E E5*00            [12] 2539 	mov	a,_bp
      000DA0 24 05            [12] 2540 	add	a,#0x05
      000DA2 F8               [12] 2541 	mov	r0,a
      000DA3 86 82            [24] 2542 	mov	dpl,@r0
      000DA5 08               [12] 2543 	inc	r0
      000DA6 86 83            [24] 2544 	mov	dph,@r0
      000DA8 08               [12] 2545 	inc	r0
      000DA9 86 F0            [24] 2546 	mov	b,@r0
      000DAB 12r00r00         [24] 2547 	lcall	__gptrget
      000DAE FA               [12] 2548 	mov	r2,a
      000DAF A3               [24] 2549 	inc	dptr
      000DB0 12r00r00         [24] 2550 	lcall	__gptrget
      000DB3 FB               [12] 2551 	mov	r3,a
      000DB4 A3               [24] 2552 	inc	dptr
      000DB5 12r00r00         [24] 2553 	lcall	__gptrget
      000DB8 FC               [12] 2554 	mov	r4,a
      000DB9 E5*00            [12] 2555 	mov	a,_bp
      000DBB 24 1A            [12] 2556 	add	a,#0x1a
      000DBD F8               [12] 2557 	mov	r0,a
      000DBE E6               [12] 2558 	mov	a,@r0
      000DBF C0 E0            [24] 2559 	push	acc
      000DC1 08               [12] 2560 	inc	r0
      000DC2 E6               [12] 2561 	mov	a,@r0
      000DC3 C0 E0            [24] 2562 	push	acc
      000DC5 08               [12] 2563 	inc	r0
      000DC6 E6               [12] 2564 	mov	a,@r0
      000DC7 C0 E0            [24] 2565 	push	acc
      000DC9 08               [12] 2566 	inc	r0
      000DCA E6               [12] 2567 	mov	a,@r0
      000DCB C0 E0            [24] 2568 	push	acc
      000DCD 8A 82            [24] 2569 	mov	dpl,r2
      000DCF 8B 83            [24] 2570 	mov	dph,r3
      000DD1 8C F0            [24] 2571 	mov	b,r4
      000DD3 12r00r00         [24] 2572 	lcall	_stack_push
      000DD6 E5 81            [12] 2573 	mov	a,sp
      000DD8 24 FC            [12] 2574 	add	a,#0xfc
      000DDA F5 81            [12] 2575 	mov	sp,a
                                   2576 ;	calc.c:141: break;
      000DDC 02r24r0E         [24] 2577 	ljmp	00249$
                                   2578 ;	calc.c:142: case 'u':
      000DDF                       2579 00133$:
                                   2580 ;	calc.c:143: if (!stack_peek(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      000DDF E5*00            [12] 2581 	mov	a,_bp
      000DE1 24 1A            [12] 2582 	add	a,#0x1a
      000DE3 FF               [12] 2583 	mov	r7,a
      000DE4 7E 00            [12] 2584 	mov	r6,#0x00
      000DE6 7D 40            [12] 2585 	mov	r5,#0x40
      000DE8 E5*00            [12] 2586 	mov	a,_bp
      000DEA 24 17            [12] 2587 	add	a,#0x17
      000DEC F8               [12] 2588 	mov	r0,a
      000DED 74 11            [12] 2589 	mov	a,#0x11
      000DEF 26               [12] 2590 	add	a,@r0
      000DF0 FA               [12] 2591 	mov	r2,a
      000DF1 ED               [12] 2592 	mov	a,r5
      000DF2 08               [12] 2593 	inc	r0
      000DF3 36               [12] 2594 	addc	a,@r0
      000DF4 FB               [12] 2595 	mov	r3,a
      000DF5 08               [12] 2596 	inc	r0
      000DF6 86 04            [24] 2597 	mov	ar4,@r0
      000DF8 8A 82            [24] 2598 	mov	dpl,r2
      000DFA 8B 83            [24] 2599 	mov	dph,r3
      000DFC 8C F0            [24] 2600 	mov	b,r4
      000DFE 12r00r00         [24] 2601 	lcall	__gptrget
      000E01 FA               [12] 2602 	mov	r2,a
      000E02 A3               [24] 2603 	inc	dptr
      000E03 12r00r00         [24] 2604 	lcall	__gptrget
      000E06 FB               [12] 2605 	mov	r3,a
      000E07 A3               [24] 2606 	inc	dptr
      000E08 12r00r00         [24] 2607 	lcall	__gptrget
      000E0B FC               [12] 2608 	mov	r4,a
      000E0C C0 07            [24] 2609 	push	ar7
      000E0E C0 06            [24] 2610 	push	ar6
      000E10 C0 05            [24] 2611 	push	ar5
      000E12 8A 82            [24] 2612 	mov	dpl,r2
      000E14 8B 83            [24] 2613 	mov	dph,r3
      000E16 8C F0            [24] 2614 	mov	b,r4
      000E18 12r00r00         [24] 2615 	lcall	_stack_peek
      000E1B AB 82            [24] 2616 	mov	r3,dpl
      000E1D AC 83            [24] 2617 	mov	r4,dph
      000E1F 15 81            [12] 2618 	dec	sp
      000E21 15 81            [12] 2619 	dec	sp
      000E23 15 81            [12] 2620 	dec	sp
      000E25 EB               [12] 2621 	mov	a,r3
      000E26 4C               [12] 2622 	orl	a,r4
      000E27 70 0C            [24] 2623 	jnz	00137$
      000E29 90r00r4E         [24] 2624 	mov	dptr,#___str_10
      000E2C 75 F0 80         [24] 2625 	mov	b,#0x80
      000E2F 12r00r00         [24] 2626 	lcall	_printstr
      000E32 02r24r0E         [24] 2627 	ljmp	00249$
      000E35                       2628 00137$:
                                   2629 ;	calc.c:144: else if (!stack_push(ctx->ss, d0)) printstr("\r\nsecondary stack overflow\r\n");
      000E35 E5*00            [12] 2630 	mov	a,_bp
      000E37 24 17            [12] 2631 	add	a,#0x17
      000E39 F8               [12] 2632 	mov	r0,a
      000E3A 74 14            [12] 2633 	mov	a,#0x14
      000E3C 26               [12] 2634 	add	a,@r0
      000E3D FA               [12] 2635 	mov	r2,a
      000E3E 74 40            [12] 2636 	mov	a,#0x40
      000E40 08               [12] 2637 	inc	r0
      000E41 36               [12] 2638 	addc	a,@r0
      000E42 FB               [12] 2639 	mov	r3,a
      000E43 08               [12] 2640 	inc	r0
      000E44 86 04            [24] 2641 	mov	ar4,@r0
      000E46 8A 82            [24] 2642 	mov	dpl,r2
      000E48 8B 83            [24] 2643 	mov	dph,r3
      000E4A 8C F0            [24] 2644 	mov	b,r4
      000E4C 12r00r00         [24] 2645 	lcall	__gptrget
      000E4F FA               [12] 2646 	mov	r2,a
      000E50 A3               [24] 2647 	inc	dptr
      000E51 12r00r00         [24] 2648 	lcall	__gptrget
      000E54 FB               [12] 2649 	mov	r3,a
      000E55 A3               [24] 2650 	inc	dptr
      000E56 12r00r00         [24] 2651 	lcall	__gptrget
      000E59 FC               [12] 2652 	mov	r4,a
      000E5A E5*00            [12] 2653 	mov	a,_bp
      000E5C 24 1A            [12] 2654 	add	a,#0x1a
      000E5E F8               [12] 2655 	mov	r0,a
      000E5F E6               [12] 2656 	mov	a,@r0
      000E60 C0 E0            [24] 2657 	push	acc
      000E62 08               [12] 2658 	inc	r0
      000E63 E6               [12] 2659 	mov	a,@r0
      000E64 C0 E0            [24] 2660 	push	acc
      000E66 08               [12] 2661 	inc	r0
      000E67 E6               [12] 2662 	mov	a,@r0
      000E68 C0 E0            [24] 2663 	push	acc
      000E6A 08               [12] 2664 	inc	r0
      000E6B E6               [12] 2665 	mov	a,@r0
      000E6C C0 E0            [24] 2666 	push	acc
      000E6E 8A 82            [24] 2667 	mov	dpl,r2
      000E70 8B 83            [24] 2668 	mov	dph,r3
      000E72 8C F0            [24] 2669 	mov	b,r4
      000E74 12r00r00         [24] 2670 	lcall	_stack_push
      000E77 AB 82            [24] 2671 	mov	r3,dpl
      000E79 AC 83            [24] 2672 	mov	r4,dph
      000E7B E5 81            [12] 2673 	mov	a,sp
      000E7D 24 FC            [12] 2674 	add	a,#0xfc
      000E7F F5 81            [12] 2675 	mov	sp,a
      000E81 EB               [12] 2676 	mov	a,r3
      000E82 4C               [12] 2677 	orl	a,r4
      000E83 60 03            [24] 2678 	jz	00562$
      000E85 02r24r0E         [24] 2679 	ljmp	00249$
      000E88                       2680 00562$:
      000E88 90r00r62         [24] 2681 	mov	dptr,#___str_11
      000E8B 75 F0 80         [24] 2682 	mov	b,#0x80
      000E8E 12r00r00         [24] 2683 	lcall	_printstr
                                   2684 ;	calc.c:145: break;
      000E91 02r24r0E         [24] 2685 	ljmp	00249$
                                   2686 ;	calc.c:146: case 'U':
      000E94                       2687 00139$:
                                   2688 ;	calc.c:147: if (!stack_peek(ctx->ss, &d0)) printstr("\r\nsecondary stack underflow\r\n");
      000E94 E5*00            [12] 2689 	mov	a,_bp
      000E96 24 1A            [12] 2690 	add	a,#0x1a
      000E98 FF               [12] 2691 	mov	r7,a
      000E99 7E 00            [12] 2692 	mov	r6,#0x00
      000E9B 7D 40            [12] 2693 	mov	r5,#0x40
      000E9D E5*00            [12] 2694 	mov	a,_bp
      000E9F 24 17            [12] 2695 	add	a,#0x17
      000EA1 F8               [12] 2696 	mov	r0,a
      000EA2 74 14            [12] 2697 	mov	a,#0x14
      000EA4 26               [12] 2698 	add	a,@r0
      000EA5 FA               [12] 2699 	mov	r2,a
      000EA6 ED               [12] 2700 	mov	a,r5
      000EA7 08               [12] 2701 	inc	r0
      000EA8 36               [12] 2702 	addc	a,@r0
      000EA9 FB               [12] 2703 	mov	r3,a
      000EAA 08               [12] 2704 	inc	r0
      000EAB 86 04            [24] 2705 	mov	ar4,@r0
      000EAD 8A 82            [24] 2706 	mov	dpl,r2
      000EAF 8B 83            [24] 2707 	mov	dph,r3
      000EB1 8C F0            [24] 2708 	mov	b,r4
      000EB3 12r00r00         [24] 2709 	lcall	__gptrget
      000EB6 FA               [12] 2710 	mov	r2,a
      000EB7 A3               [24] 2711 	inc	dptr
      000EB8 12r00r00         [24] 2712 	lcall	__gptrget
      000EBB FB               [12] 2713 	mov	r3,a
      000EBC A3               [24] 2714 	inc	dptr
      000EBD 12r00r00         [24] 2715 	lcall	__gptrget
      000EC0 FC               [12] 2716 	mov	r4,a
      000EC1 C0 07            [24] 2717 	push	ar7
      000EC3 C0 06            [24] 2718 	push	ar6
      000EC5 C0 05            [24] 2719 	push	ar5
      000EC7 8A 82            [24] 2720 	mov	dpl,r2
      000EC9 8B 83            [24] 2721 	mov	dph,r3
      000ECB 8C F0            [24] 2722 	mov	b,r4
      000ECD 12r00r00         [24] 2723 	lcall	_stack_peek
      000ED0 AB 82            [24] 2724 	mov	r3,dpl
      000ED2 AC 83            [24] 2725 	mov	r4,dph
      000ED4 15 81            [12] 2726 	dec	sp
      000ED6 15 81            [12] 2727 	dec	sp
      000ED8 15 81            [12] 2728 	dec	sp
      000EDA EB               [12] 2729 	mov	a,r3
      000EDB 4C               [12] 2730 	orl	a,r4
      000EDC 70 0C            [24] 2731 	jnz	00143$
      000EDE 90r00r7F         [24] 2732 	mov	dptr,#___str_12
      000EE1 75 F0 80         [24] 2733 	mov	b,#0x80
      000EE4 12r00r00         [24] 2734 	lcall	_printstr
      000EE7 02r24r0E         [24] 2735 	ljmp	00249$
      000EEA                       2736 00143$:
                                   2737 ;	calc.c:148: else if (!stack_push(ctx->ps, d0)) printstr("\r\nstack overflow\r\n");
      000EEA E5*00            [12] 2738 	mov	a,_bp
      000EEC 24 17            [12] 2739 	add	a,#0x17
      000EEE F8               [12] 2740 	mov	r0,a
      000EEF 74 11            [12] 2741 	mov	a,#0x11
      000EF1 26               [12] 2742 	add	a,@r0
      000EF2 FA               [12] 2743 	mov	r2,a
      000EF3 74 40            [12] 2744 	mov	a,#0x40
      000EF5 08               [12] 2745 	inc	r0
      000EF6 36               [12] 2746 	addc	a,@r0
      000EF7 FB               [12] 2747 	mov	r3,a
      000EF8 08               [12] 2748 	inc	r0
      000EF9 86 04            [24] 2749 	mov	ar4,@r0
      000EFB 8A 82            [24] 2750 	mov	dpl,r2
      000EFD 8B 83            [24] 2751 	mov	dph,r3
      000EFF 8C F0            [24] 2752 	mov	b,r4
      000F01 12r00r00         [24] 2753 	lcall	__gptrget
      000F04 FA               [12] 2754 	mov	r2,a
      000F05 A3               [24] 2755 	inc	dptr
      000F06 12r00r00         [24] 2756 	lcall	__gptrget
      000F09 FB               [12] 2757 	mov	r3,a
      000F0A A3               [24] 2758 	inc	dptr
      000F0B 12r00r00         [24] 2759 	lcall	__gptrget
      000F0E FC               [12] 2760 	mov	r4,a
      000F0F E5*00            [12] 2761 	mov	a,_bp
      000F11 24 1A            [12] 2762 	add	a,#0x1a
      000F13 F8               [12] 2763 	mov	r0,a
      000F14 E6               [12] 2764 	mov	a,@r0
      000F15 C0 E0            [24] 2765 	push	acc
      000F17 08               [12] 2766 	inc	r0
      000F18 E6               [12] 2767 	mov	a,@r0
      000F19 C0 E0            [24] 2768 	push	acc
      000F1B 08               [12] 2769 	inc	r0
      000F1C E6               [12] 2770 	mov	a,@r0
      000F1D C0 E0            [24] 2771 	push	acc
      000F1F 08               [12] 2772 	inc	r0
      000F20 E6               [12] 2773 	mov	a,@r0
      000F21 C0 E0            [24] 2774 	push	acc
      000F23 8A 82            [24] 2775 	mov	dpl,r2
      000F25 8B 83            [24] 2776 	mov	dph,r3
      000F27 8C F0            [24] 2777 	mov	b,r4
      000F29 12r00r00         [24] 2778 	lcall	_stack_push
      000F2C AB 82            [24] 2779 	mov	r3,dpl
      000F2E AC 83            [24] 2780 	mov	r4,dph
      000F30 E5 81            [12] 2781 	mov	a,sp
      000F32 24 FC            [12] 2782 	add	a,#0xfc
      000F34 F5 81            [12] 2783 	mov	sp,a
      000F36 EB               [12] 2784 	mov	a,r3
      000F37 4C               [12] 2785 	orl	a,r4
      000F38 60 03            [24] 2786 	jz	00564$
      000F3A 02r24r0E         [24] 2787 	ljmp	00249$
      000F3D                       2788 00564$:
      000F3D 90r00r9D         [24] 2789 	mov	dptr,#___str_13
      000F40 75 F0 80         [24] 2790 	mov	b,#0x80
      000F43 12r00r00         [24] 2791 	lcall	_printstr
                                   2792 ;	calc.c:149: break;
      000F46 02r24r0E         [24] 2793 	ljmp	00249$
                                   2794 ;	calc.c:150: case 'T':
      000F49                       2795 00145$:
                                   2796 ;	calc.c:151: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      000F49 E5*00            [12] 2797 	mov	a,_bp
      000F4B 24 1A            [12] 2798 	add	a,#0x1a
      000F4D FF               [12] 2799 	mov	r7,a
      000F4E 7E 00            [12] 2800 	mov	r6,#0x00
      000F50 7D 40            [12] 2801 	mov	r5,#0x40
      000F52 E5*00            [12] 2802 	mov	a,_bp
      000F54 24 17            [12] 2803 	add	a,#0x17
      000F56 F8               [12] 2804 	mov	r0,a
      000F57 E5*00            [12] 2805 	mov	a,_bp
      000F59 24 05            [12] 2806 	add	a,#0x05
      000F5B F9               [12] 2807 	mov	r1,a
      000F5C 74 11            [12] 2808 	mov	a,#0x11
      000F5E 26               [12] 2809 	add	a,@r0
      000F5F F7               [12] 2810 	mov	@r1,a
      000F60 74 40            [12] 2811 	mov	a,#0x40
      000F62 08               [12] 2812 	inc	r0
      000F63 36               [12] 2813 	addc	a,@r0
      000F64 09               [12] 2814 	inc	r1
      000F65 F7               [12] 2815 	mov	@r1,a
      000F66 08               [12] 2816 	inc	r0
      000F67 09               [12] 2817 	inc	r1
      000F68 E6               [12] 2818 	mov	a,@r0
      000F69 F7               [12] 2819 	mov	@r1,a
      000F6A E5*00            [12] 2820 	mov	a,_bp
      000F6C 24 05            [12] 2821 	add	a,#0x05
      000F6E F8               [12] 2822 	mov	r0,a
      000F6F 86 82            [24] 2823 	mov	dpl,@r0
      000F71 08               [12] 2824 	inc	r0
      000F72 86 83            [24] 2825 	mov	dph,@r0
      000F74 08               [12] 2826 	inc	r0
      000F75 86 F0            [24] 2827 	mov	b,@r0
      000F77 12r00r00         [24] 2828 	lcall	__gptrget
      000F7A FA               [12] 2829 	mov	r2,a
      000F7B A3               [24] 2830 	inc	dptr
      000F7C 12r00r00         [24] 2831 	lcall	__gptrget
      000F7F FB               [12] 2832 	mov	r3,a
      000F80 A3               [24] 2833 	inc	dptr
      000F81 12r00r00         [24] 2834 	lcall	__gptrget
      000F84 FC               [12] 2835 	mov	r4,a
      000F85 C0 07            [24] 2836 	push	ar7
      000F87 C0 06            [24] 2837 	push	ar6
      000F89 C0 05            [24] 2838 	push	ar5
      000F8B 8A 82            [24] 2839 	mov	dpl,r2
      000F8D 8B 83            [24] 2840 	mov	dph,r3
      000F8F 8C F0            [24] 2841 	mov	b,r4
      000F91 12r00r00         [24] 2842 	lcall	_stack_pop
      000F94 AB 82            [24] 2843 	mov	r3,dpl
      000F96 AC 83            [24] 2844 	mov	r4,dph
      000F98 15 81            [12] 2845 	dec	sp
      000F9A 15 81            [12] 2846 	dec	sp
      000F9C 15 81            [12] 2847 	dec	sp
      000F9E EB               [12] 2848 	mov	a,r3
      000F9F 4C               [12] 2849 	orl	a,r4
      000FA0 70 0C            [24] 2850 	jnz	00150$
      000FA2 90r00r4E         [24] 2851 	mov	dptr,#___str_10
      000FA5 75 F0 80         [24] 2852 	mov	b,#0x80
      000FA8 12r00r00         [24] 2853 	lcall	_printstr
      000FAB 02r24r0E         [24] 2854 	ljmp	00249$
      000FAE                       2855 00150$:
                                   2856 ;	calc.c:153: if (!stack_pop(ctx->ss, &d1)) {
      000FAE E5*00            [12] 2857 	mov	a,_bp
      000FB0 24 1E            [12] 2858 	add	a,#0x1e
      000FB2 FF               [12] 2859 	mov	r7,a
      000FB3 7E 00            [12] 2860 	mov	r6,#0x00
      000FB5 7D 40            [12] 2861 	mov	r5,#0x40
      000FB7 E5*00            [12] 2862 	mov	a,_bp
      000FB9 24 17            [12] 2863 	add	a,#0x17
      000FBB F8               [12] 2864 	mov	r0,a
      000FBC A9*00            [24] 2865 	mov	r1,_bp
      000FBE 09               [12] 2866 	inc	r1
      000FBF 09               [12] 2867 	inc	r1
      000FC0 74 14            [12] 2868 	mov	a,#0x14
      000FC2 26               [12] 2869 	add	a,@r0
      000FC3 F7               [12] 2870 	mov	@r1,a
      000FC4 74 40            [12] 2871 	mov	a,#0x40
      000FC6 08               [12] 2872 	inc	r0
      000FC7 36               [12] 2873 	addc	a,@r0
      000FC8 09               [12] 2874 	inc	r1
      000FC9 F7               [12] 2875 	mov	@r1,a
      000FCA 08               [12] 2876 	inc	r0
      000FCB 09               [12] 2877 	inc	r1
      000FCC E6               [12] 2878 	mov	a,@r0
      000FCD F7               [12] 2879 	mov	@r1,a
      000FCE A8*00            [24] 2880 	mov	r0,_bp
      000FD0 08               [12] 2881 	inc	r0
      000FD1 08               [12] 2882 	inc	r0
      000FD2 86 82            [24] 2883 	mov	dpl,@r0
      000FD4 08               [12] 2884 	inc	r0
      000FD5 86 83            [24] 2885 	mov	dph,@r0
      000FD7 08               [12] 2886 	inc	r0
      000FD8 86 F0            [24] 2887 	mov	b,@r0
      000FDA 12r00r00         [24] 2888 	lcall	__gptrget
      000FDD FA               [12] 2889 	mov	r2,a
      000FDE A3               [24] 2890 	inc	dptr
      000FDF 12r00r00         [24] 2891 	lcall	__gptrget
      000FE2 FB               [12] 2892 	mov	r3,a
      000FE3 A3               [24] 2893 	inc	dptr
      000FE4 12r00r00         [24] 2894 	lcall	__gptrget
      000FE7 FC               [12] 2895 	mov	r4,a
      000FE8 C0 07            [24] 2896 	push	ar7
      000FEA C0 06            [24] 2897 	push	ar6
      000FEC C0 05            [24] 2898 	push	ar5
      000FEE 8A 82            [24] 2899 	mov	dpl,r2
      000FF0 8B 83            [24] 2900 	mov	dph,r3
      000FF2 8C F0            [24] 2901 	mov	b,r4
      000FF4 12r00r00         [24] 2902 	lcall	_stack_pop
      000FF7 AB 82            [24] 2903 	mov	r3,dpl
      000FF9 AC 83            [24] 2904 	mov	r4,dph
      000FFB 15 81            [12] 2905 	dec	sp
      000FFD 15 81            [12] 2906 	dec	sp
      000FFF 15 81            [12] 2907 	dec	sp
      001001 EB               [12] 2908 	mov	a,r3
      001002 4C               [12] 2909 	orl	a,r4
      001003 70 4A            [24] 2910 	jnz	00147$
                                   2911 ;	calc.c:154: printstr("\r\nsecondary stack underflow\r\n");
      001005 90r00r7F         [24] 2912 	mov	dptr,#___str_12
      001008 75 F0 80         [24] 2913 	mov	b,#0x80
      00100B 12r00r00         [24] 2914 	lcall	_printstr
                                   2915 ;	calc.c:155: (void)stack_push(ctx->ps, d0);
      00100E E5*00            [12] 2916 	mov	a,_bp
      001010 24 05            [12] 2917 	add	a,#0x05
      001012 F8               [12] 2918 	mov	r0,a
      001013 86 82            [24] 2919 	mov	dpl,@r0
      001015 08               [12] 2920 	inc	r0
      001016 86 83            [24] 2921 	mov	dph,@r0
      001018 08               [12] 2922 	inc	r0
      001019 86 F0            [24] 2923 	mov	b,@r0
      00101B 12r00r00         [24] 2924 	lcall	__gptrget
      00101E FA               [12] 2925 	mov	r2,a
      00101F A3               [24] 2926 	inc	dptr
      001020 12r00r00         [24] 2927 	lcall	__gptrget
      001023 FB               [12] 2928 	mov	r3,a
      001024 A3               [24] 2929 	inc	dptr
      001025 12r00r00         [24] 2930 	lcall	__gptrget
      001028 FC               [12] 2931 	mov	r4,a
      001029 E5*00            [12] 2932 	mov	a,_bp
      00102B 24 1A            [12] 2933 	add	a,#0x1a
      00102D F8               [12] 2934 	mov	r0,a
      00102E E6               [12] 2935 	mov	a,@r0
      00102F C0 E0            [24] 2936 	push	acc
      001031 08               [12] 2937 	inc	r0
      001032 E6               [12] 2938 	mov	a,@r0
      001033 C0 E0            [24] 2939 	push	acc
      001035 08               [12] 2940 	inc	r0
      001036 E6               [12] 2941 	mov	a,@r0
      001037 C0 E0            [24] 2942 	push	acc
      001039 08               [12] 2943 	inc	r0
      00103A E6               [12] 2944 	mov	a,@r0
      00103B C0 E0            [24] 2945 	push	acc
      00103D 8A 82            [24] 2946 	mov	dpl,r2
      00103F 8B 83            [24] 2947 	mov	dph,r3
      001041 8C F0            [24] 2948 	mov	b,r4
      001043 12r00r00         [24] 2949 	lcall	_stack_push
      001046 E5 81            [12] 2950 	mov	a,sp
      001048 24 FC            [12] 2951 	add	a,#0xfc
      00104A F5 81            [12] 2952 	mov	sp,a
      00104C 02r24r0E         [24] 2953 	ljmp	00249$
      00104F                       2954 00147$:
                                   2955 ;	calc.c:157: (void)stack_push(ctx->ps, d1);
      00104F E5*00            [12] 2956 	mov	a,_bp
      001051 24 05            [12] 2957 	add	a,#0x05
      001053 F8               [12] 2958 	mov	r0,a
      001054 86 82            [24] 2959 	mov	dpl,@r0
      001056 08               [12] 2960 	inc	r0
      001057 86 83            [24] 2961 	mov	dph,@r0
      001059 08               [12] 2962 	inc	r0
      00105A 86 F0            [24] 2963 	mov	b,@r0
      00105C 12r00r00         [24] 2964 	lcall	__gptrget
      00105F FA               [12] 2965 	mov	r2,a
      001060 A3               [24] 2966 	inc	dptr
      001061 12r00r00         [24] 2967 	lcall	__gptrget
      001064 FB               [12] 2968 	mov	r3,a
      001065 A3               [24] 2969 	inc	dptr
      001066 12r00r00         [24] 2970 	lcall	__gptrget
      001069 FC               [12] 2971 	mov	r4,a
      00106A E5*00            [12] 2972 	mov	a,_bp
      00106C 24 1E            [12] 2973 	add	a,#0x1e
      00106E F8               [12] 2974 	mov	r0,a
      00106F E6               [12] 2975 	mov	a,@r0
      001070 C0 E0            [24] 2976 	push	acc
      001072 08               [12] 2977 	inc	r0
      001073 E6               [12] 2978 	mov	a,@r0
      001074 C0 E0            [24] 2979 	push	acc
      001076 08               [12] 2980 	inc	r0
      001077 E6               [12] 2981 	mov	a,@r0
      001078 C0 E0            [24] 2982 	push	acc
      00107A 08               [12] 2983 	inc	r0
      00107B E6               [12] 2984 	mov	a,@r0
      00107C C0 E0            [24] 2985 	push	acc
      00107E 8A 82            [24] 2986 	mov	dpl,r2
      001080 8B 83            [24] 2987 	mov	dph,r3
      001082 8C F0            [24] 2988 	mov	b,r4
      001084 12r00r00         [24] 2989 	lcall	_stack_push
      001087 E5 81            [12] 2990 	mov	a,sp
      001089 24 FC            [12] 2991 	add	a,#0xfc
      00108B F5 81            [12] 2992 	mov	sp,a
                                   2993 ;	calc.c:158: (void)stack_push(ctx->ss, d0);
      00108D A8*00            [24] 2994 	mov	r0,_bp
      00108F 08               [12] 2995 	inc	r0
      001090 08               [12] 2996 	inc	r0
      001091 86 82            [24] 2997 	mov	dpl,@r0
      001093 08               [12] 2998 	inc	r0
      001094 86 83            [24] 2999 	mov	dph,@r0
      001096 08               [12] 3000 	inc	r0
      001097 86 F0            [24] 3001 	mov	b,@r0
      001099 12r00r00         [24] 3002 	lcall	__gptrget
      00109C FA               [12] 3003 	mov	r2,a
      00109D A3               [24] 3004 	inc	dptr
      00109E 12r00r00         [24] 3005 	lcall	__gptrget
      0010A1 FB               [12] 3006 	mov	r3,a
      0010A2 A3               [24] 3007 	inc	dptr
      0010A3 12r00r00         [24] 3008 	lcall	__gptrget
      0010A6 FC               [12] 3009 	mov	r4,a
      0010A7 E5*00            [12] 3010 	mov	a,_bp
      0010A9 24 1A            [12] 3011 	add	a,#0x1a
      0010AB F8               [12] 3012 	mov	r0,a
      0010AC E6               [12] 3013 	mov	a,@r0
      0010AD C0 E0            [24] 3014 	push	acc
      0010AF 08               [12] 3015 	inc	r0
      0010B0 E6               [12] 3016 	mov	a,@r0
      0010B1 C0 E0            [24] 3017 	push	acc
      0010B3 08               [12] 3018 	inc	r0
      0010B4 E6               [12] 3019 	mov	a,@r0
      0010B5 C0 E0            [24] 3020 	push	acc
      0010B7 08               [12] 3021 	inc	r0
      0010B8 E6               [12] 3022 	mov	a,@r0
      0010B9 C0 E0            [24] 3023 	push	acc
      0010BB 8A 82            [24] 3024 	mov	dpl,r2
      0010BD 8B 83            [24] 3025 	mov	dph,r3
      0010BF 8C F0            [24] 3026 	mov	b,r4
      0010C1 12r00r00         [24] 3027 	lcall	_stack_push
      0010C4 E5 81            [12] 3028 	mov	a,sp
      0010C6 24 FC            [12] 3029 	add	a,#0xfc
      0010C8 F5 81            [12] 3030 	mov	sp,a
                                   3031 ;	calc.c:161: break;
      0010CA 02r24r0E         [24] 3032 	ljmp	00249$
                                   3033 ;	calc.c:162: case 'X':
      0010CD                       3034 00152$:
                                   3035 ;	calc.c:163: t0 = ctx->ps;
      0010CD E5*00            [12] 3036 	mov	a,_bp
      0010CF 24 17            [12] 3037 	add	a,#0x17
      0010D1 F8               [12] 3038 	mov	r0,a
      0010D2 E5*00            [12] 3039 	mov	a,_bp
      0010D4 24 08            [12] 3040 	add	a,#0x08
      0010D6 F9               [12] 3041 	mov	r1,a
      0010D7 74 11            [12] 3042 	mov	a,#0x11
      0010D9 26               [12] 3043 	add	a,@r0
      0010DA F7               [12] 3044 	mov	@r1,a
      0010DB 74 40            [12] 3045 	mov	a,#0x40
      0010DD 08               [12] 3046 	inc	r0
      0010DE 36               [12] 3047 	addc	a,@r0
      0010DF 09               [12] 3048 	inc	r1
      0010E0 F7               [12] 3049 	mov	@r1,a
      0010E1 08               [12] 3050 	inc	r0
      0010E2 09               [12] 3051 	inc	r1
      0010E3 E6               [12] 3052 	mov	a,@r0
      0010E4 F7               [12] 3053 	mov	@r1,a
      0010E5 E5*00            [12] 3054 	mov	a,_bp
      0010E7 24 08            [12] 3055 	add	a,#0x08
      0010E9 F8               [12] 3056 	mov	r0,a
      0010EA 86 82            [24] 3057 	mov	dpl,@r0
      0010EC 08               [12] 3058 	inc	r0
      0010ED 86 83            [24] 3059 	mov	dph,@r0
      0010EF 08               [12] 3060 	inc	r0
      0010F0 86 F0            [24] 3061 	mov	b,@r0
      0010F2 12r00r00         [24] 3062 	lcall	__gptrget
      0010F5 FF               [12] 3063 	mov	r7,a
      0010F6 A3               [24] 3064 	inc	dptr
      0010F7 12r00r00         [24] 3065 	lcall	__gptrget
      0010FA FE               [12] 3066 	mov	r6,a
      0010FB A3               [24] 3067 	inc	dptr
      0010FC 12r00r00         [24] 3068 	lcall	__gptrget
      0010FF FD               [12] 3069 	mov	r5,a
                                   3070 ;	calc.c:164: ctx->ps = ctx->ss;
      001100 E5*00            [12] 3071 	mov	a,_bp
      001102 24 17            [12] 3072 	add	a,#0x17
      001104 F8               [12] 3073 	mov	r0,a
      001105 E5*00            [12] 3074 	mov	a,_bp
      001107 24 05            [12] 3075 	add	a,#0x05
      001109 F9               [12] 3076 	mov	r1,a
      00110A 74 14            [12] 3077 	mov	a,#0x14
      00110C 26               [12] 3078 	add	a,@r0
      00110D F7               [12] 3079 	mov	@r1,a
      00110E 74 40            [12] 3080 	mov	a,#0x40
      001110 08               [12] 3081 	inc	r0
      001111 36               [12] 3082 	addc	a,@r0
      001112 09               [12] 3083 	inc	r1
      001113 F7               [12] 3084 	mov	@r1,a
      001114 08               [12] 3085 	inc	r0
      001115 09               [12] 3086 	inc	r1
      001116 E6               [12] 3087 	mov	a,@r0
      001117 F7               [12] 3088 	mov	@r1,a
      001118 E5*00            [12] 3089 	mov	a,_bp
      00111A 24 05            [12] 3090 	add	a,#0x05
      00111C F8               [12] 3091 	mov	r0,a
      00111D 86 82            [24] 3092 	mov	dpl,@r0
      00111F 08               [12] 3093 	inc	r0
      001120 86 83            [24] 3094 	mov	dph,@r0
      001122 08               [12] 3095 	inc	r0
      001123 86 F0            [24] 3096 	mov	b,@r0
      001125 12r00r00         [24] 3097 	lcall	__gptrget
      001128 FA               [12] 3098 	mov	r2,a
      001129 A3               [24] 3099 	inc	dptr
      00112A 12r00r00         [24] 3100 	lcall	__gptrget
      00112D FB               [12] 3101 	mov	r3,a
      00112E A3               [24] 3102 	inc	dptr
      00112F 12r00r00         [24] 3103 	lcall	__gptrget
      001132 FC               [12] 3104 	mov	r4,a
      001133 E5*00            [12] 3105 	mov	a,_bp
      001135 24 08            [12] 3106 	add	a,#0x08
      001137 F8               [12] 3107 	mov	r0,a
      001138 86 82            [24] 3108 	mov	dpl,@r0
      00113A 08               [12] 3109 	inc	r0
      00113B 86 83            [24] 3110 	mov	dph,@r0
      00113D 08               [12] 3111 	inc	r0
      00113E 86 F0            [24] 3112 	mov	b,@r0
      001140 EA               [12] 3113 	mov	a,r2
      001141 12r00r00         [24] 3114 	lcall	__gptrput
      001144 A3               [24] 3115 	inc	dptr
      001145 EB               [12] 3116 	mov	a,r3
      001146 12r00r00         [24] 3117 	lcall	__gptrput
      001149 A3               [24] 3118 	inc	dptr
      00114A EC               [12] 3119 	mov	a,r4
      00114B 12r00r00         [24] 3120 	lcall	__gptrput
                                   3121 ;	calc.c:165: ctx->ss = t0;
      00114E E5*00            [12] 3122 	mov	a,_bp
      001150 24 05            [12] 3123 	add	a,#0x05
      001152 F8               [12] 3124 	mov	r0,a
      001153 86 82            [24] 3125 	mov	dpl,@r0
      001155 08               [12] 3126 	inc	r0
      001156 86 83            [24] 3127 	mov	dph,@r0
      001158 08               [12] 3128 	inc	r0
      001159 86 F0            [24] 3129 	mov	b,@r0
      00115B EF               [12] 3130 	mov	a,r7
      00115C 12r00r00         [24] 3131 	lcall	__gptrput
      00115F A3               [24] 3132 	inc	dptr
      001160 EE               [12] 3133 	mov	a,r6
      001161 12r00r00         [24] 3134 	lcall	__gptrput
      001164 A3               [24] 3135 	inc	dptr
      001165 ED               [12] 3136 	mov	a,r5
      001166 12r00r00         [24] 3137 	lcall	__gptrput
                                   3138 ;	calc.c:166: break;
      001169 02r24r0E         [24] 3139 	ljmp	00249$
                                   3140 ;	calc.c:167: case '+':
      00116C                       3141 00153$:
                                   3142 ;	calc.c:168: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      00116C E5*00            [12] 3143 	mov	a,_bp
      00116E 24 1A            [12] 3144 	add	a,#0x1a
      001170 FF               [12] 3145 	mov	r7,a
      001171 7E 00            [12] 3146 	mov	r6,#0x00
      001173 7D 40            [12] 3147 	mov	r5,#0x40
      001175 E5*00            [12] 3148 	mov	a,_bp
      001177 24 17            [12] 3149 	add	a,#0x17
      001179 F8               [12] 3150 	mov	r0,a
      00117A E5*00            [12] 3151 	mov	a,_bp
      00117C 24 08            [12] 3152 	add	a,#0x08
      00117E F9               [12] 3153 	mov	r1,a
      00117F 74 11            [12] 3154 	mov	a,#0x11
      001181 26               [12] 3155 	add	a,@r0
      001182 F7               [12] 3156 	mov	@r1,a
      001183 74 40            [12] 3157 	mov	a,#0x40
      001185 08               [12] 3158 	inc	r0
      001186 36               [12] 3159 	addc	a,@r0
      001187 09               [12] 3160 	inc	r1
      001188 F7               [12] 3161 	mov	@r1,a
      001189 08               [12] 3162 	inc	r0
      00118A 09               [12] 3163 	inc	r1
      00118B E6               [12] 3164 	mov	a,@r0
      00118C F7               [12] 3165 	mov	@r1,a
      00118D E5*00            [12] 3166 	mov	a,_bp
      00118F 24 08            [12] 3167 	add	a,#0x08
      001191 F8               [12] 3168 	mov	r0,a
      001192 86 82            [24] 3169 	mov	dpl,@r0
      001194 08               [12] 3170 	inc	r0
      001195 86 83            [24] 3171 	mov	dph,@r0
      001197 08               [12] 3172 	inc	r0
      001198 86 F0            [24] 3173 	mov	b,@r0
      00119A 12r00r00         [24] 3174 	lcall	__gptrget
      00119D FA               [12] 3175 	mov	r2,a
      00119E A3               [24] 3176 	inc	dptr
      00119F 12r00r00         [24] 3177 	lcall	__gptrget
      0011A2 FB               [12] 3178 	mov	r3,a
      0011A3 A3               [24] 3179 	inc	dptr
      0011A4 12r00r00         [24] 3180 	lcall	__gptrget
      0011A7 FC               [12] 3181 	mov	r4,a
      0011A8 C0 07            [24] 3182 	push	ar7
      0011AA C0 06            [24] 3183 	push	ar6
      0011AC C0 05            [24] 3184 	push	ar5
      0011AE 8A 82            [24] 3185 	mov	dpl,r2
      0011B0 8B 83            [24] 3186 	mov	dph,r3
      0011B2 8C F0            [24] 3187 	mov	b,r4
      0011B4 12r00r00         [24] 3188 	lcall	_stack_pop
      0011B7 AB 82            [24] 3189 	mov	r3,dpl
      0011B9 AC 83            [24] 3190 	mov	r4,dph
      0011BB 15 81            [12] 3191 	dec	sp
      0011BD 15 81            [12] 3192 	dec	sp
      0011BF 15 81            [12] 3193 	dec	sp
      0011C1 EB               [12] 3194 	mov	a,r3
      0011C2 4C               [12] 3195 	orl	a,r4
      0011C3 70 0C            [24] 3196 	jnz	00158$
      0011C5 90r00r4E         [24] 3197 	mov	dptr,#___str_10
      0011C8 75 F0 80         [24] 3198 	mov	b,#0x80
      0011CB 12r00r00         [24] 3199 	lcall	_printstr
      0011CE 02r24r0E         [24] 3200 	ljmp	00249$
      0011D1                       3201 00158$:
                                   3202 ;	calc.c:169: else if (!stack_pop(ctx->ps, &d1)) {
      0011D1 E5*00            [12] 3203 	mov	a,_bp
      0011D3 24 1E            [12] 3204 	add	a,#0x1e
      0011D5 FF               [12] 3205 	mov	r7,a
      0011D6 7E 00            [12] 3206 	mov	r6,#0x00
      0011D8 7D 40            [12] 3207 	mov	r5,#0x40
      0011DA E5*00            [12] 3208 	mov	a,_bp
      0011DC 24 08            [12] 3209 	add	a,#0x08
      0011DE F8               [12] 3210 	mov	r0,a
      0011DF 86 82            [24] 3211 	mov	dpl,@r0
      0011E1 08               [12] 3212 	inc	r0
      0011E2 86 83            [24] 3213 	mov	dph,@r0
      0011E4 08               [12] 3214 	inc	r0
      0011E5 86 F0            [24] 3215 	mov	b,@r0
      0011E7 12r00r00         [24] 3216 	lcall	__gptrget
      0011EA FA               [12] 3217 	mov	r2,a
      0011EB A3               [24] 3218 	inc	dptr
      0011EC 12r00r00         [24] 3219 	lcall	__gptrget
      0011EF FB               [12] 3220 	mov	r3,a
      0011F0 A3               [24] 3221 	inc	dptr
      0011F1 12r00r00         [24] 3222 	lcall	__gptrget
      0011F4 FC               [12] 3223 	mov	r4,a
      0011F5 C0 07            [24] 3224 	push	ar7
      0011F7 C0 06            [24] 3225 	push	ar6
      0011F9 C0 05            [24] 3226 	push	ar5
      0011FB 8A 82            [24] 3227 	mov	dpl,r2
      0011FD 8B 83            [24] 3228 	mov	dph,r3
      0011FF 8C F0            [24] 3229 	mov	b,r4
      001201 12r00r00         [24] 3230 	lcall	_stack_pop
      001204 AB 82            [24] 3231 	mov	r3,dpl
      001206 AC 83            [24] 3232 	mov	r4,dph
      001208 15 81            [12] 3233 	dec	sp
      00120A 15 81            [12] 3234 	dec	sp
      00120C 15 81            [12] 3235 	dec	sp
      00120E EB               [12] 3236 	mov	a,r3
      00120F 4C               [12] 3237 	orl	a,r4
      001210 70 4A            [24] 3238 	jnz	00155$
                                   3239 ;	calc.c:170: (void)stack_push(ctx->ps, d0);
      001212 E5*00            [12] 3240 	mov	a,_bp
      001214 24 08            [12] 3241 	add	a,#0x08
      001216 F8               [12] 3242 	mov	r0,a
      001217 86 82            [24] 3243 	mov	dpl,@r0
      001219 08               [12] 3244 	inc	r0
      00121A 86 83            [24] 3245 	mov	dph,@r0
      00121C 08               [12] 3246 	inc	r0
      00121D 86 F0            [24] 3247 	mov	b,@r0
      00121F 12r00r00         [24] 3248 	lcall	__gptrget
      001222 FA               [12] 3249 	mov	r2,a
      001223 A3               [24] 3250 	inc	dptr
      001224 12r00r00         [24] 3251 	lcall	__gptrget
      001227 FB               [12] 3252 	mov	r3,a
      001228 A3               [24] 3253 	inc	dptr
      001229 12r00r00         [24] 3254 	lcall	__gptrget
      00122C FC               [12] 3255 	mov	r4,a
      00122D E5*00            [12] 3256 	mov	a,_bp
      00122F 24 1A            [12] 3257 	add	a,#0x1a
      001231 F8               [12] 3258 	mov	r0,a
      001232 E6               [12] 3259 	mov	a,@r0
      001233 C0 E0            [24] 3260 	push	acc
      001235 08               [12] 3261 	inc	r0
      001236 E6               [12] 3262 	mov	a,@r0
      001237 C0 E0            [24] 3263 	push	acc
      001239 08               [12] 3264 	inc	r0
      00123A E6               [12] 3265 	mov	a,@r0
      00123B C0 E0            [24] 3266 	push	acc
      00123D 08               [12] 3267 	inc	r0
      00123E E6               [12] 3268 	mov	a,@r0
      00123F C0 E0            [24] 3269 	push	acc
      001241 8A 82            [24] 3270 	mov	dpl,r2
      001243 8B 83            [24] 3271 	mov	dph,r3
      001245 8C F0            [24] 3272 	mov	b,r4
      001247 12r00r00         [24] 3273 	lcall	_stack_push
      00124A E5 81            [12] 3274 	mov	a,sp
      00124C 24 FC            [12] 3275 	add	a,#0xfc
      00124E F5 81            [12] 3276 	mov	sp,a
                                   3277 ;	calc.c:171: printstr("\r\nstack underflow\r\n");
      001250 90r00r4E         [24] 3278 	mov	dptr,#___str_10
      001253 75 F0 80         [24] 3279 	mov	b,#0x80
      001256 12r00r00         [24] 3280 	lcall	_printstr
      001259 02r24r0E         [24] 3281 	ljmp	00249$
      00125C                       3282 00155$:
                                   3283 ;	calc.c:173: d1 += d0;
      00125C E5*00            [12] 3284 	mov	a,_bp
      00125E 24 1E            [12] 3285 	add	a,#0x1e
      001260 F8               [12] 3286 	mov	r0,a
      001261 E5*00            [12] 3287 	mov	a,_bp
      001263 24 1A            [12] 3288 	add	a,#0x1a
      001265 F9               [12] 3289 	mov	r1,a
      001266 E7               [12] 3290 	mov	a,@r1
      001267 26               [12] 3291 	add	a,@r0
      001268 F6               [12] 3292 	mov	@r0,a
      001269 09               [12] 3293 	inc	r1
      00126A E7               [12] 3294 	mov	a,@r1
      00126B 08               [12] 3295 	inc	r0
      00126C 36               [12] 3296 	addc	a,@r0
      00126D F6               [12] 3297 	mov	@r0,a
      00126E 09               [12] 3298 	inc	r1
      00126F E7               [12] 3299 	mov	a,@r1
      001270 08               [12] 3300 	inc	r0
      001271 36               [12] 3301 	addc	a,@r0
      001272 F6               [12] 3302 	mov	@r0,a
      001273 09               [12] 3303 	inc	r1
      001274 E7               [12] 3304 	mov	a,@r1
      001275 08               [12] 3305 	inc	r0
      001276 36               [12] 3306 	addc	a,@r0
      001277 F6               [12] 3307 	mov	@r0,a
                                   3308 ;	calc.c:174: (void)stack_push(ctx->ps, d1);
      001278 E5*00            [12] 3309 	mov	a,_bp
      00127A 24 08            [12] 3310 	add	a,#0x08
      00127C F8               [12] 3311 	mov	r0,a
      00127D 86 82            [24] 3312 	mov	dpl,@r0
      00127F 08               [12] 3313 	inc	r0
      001280 86 83            [24] 3314 	mov	dph,@r0
      001282 08               [12] 3315 	inc	r0
      001283 86 F0            [24] 3316 	mov	b,@r0
      001285 12r00r00         [24] 3317 	lcall	__gptrget
      001288 FA               [12] 3318 	mov	r2,a
      001289 A3               [24] 3319 	inc	dptr
      00128A 12r00r00         [24] 3320 	lcall	__gptrget
      00128D FB               [12] 3321 	mov	r3,a
      00128E A3               [24] 3322 	inc	dptr
      00128F 12r00r00         [24] 3323 	lcall	__gptrget
      001292 FC               [12] 3324 	mov	r4,a
      001293 E5*00            [12] 3325 	mov	a,_bp
      001295 24 1E            [12] 3326 	add	a,#0x1e
      001297 F8               [12] 3327 	mov	r0,a
      001298 E6               [12] 3328 	mov	a,@r0
      001299 C0 E0            [24] 3329 	push	acc
      00129B 08               [12] 3330 	inc	r0
      00129C E6               [12] 3331 	mov	a,@r0
      00129D C0 E0            [24] 3332 	push	acc
      00129F 08               [12] 3333 	inc	r0
      0012A0 E6               [12] 3334 	mov	a,@r0
      0012A1 C0 E0            [24] 3335 	push	acc
      0012A3 08               [12] 3336 	inc	r0
      0012A4 E6               [12] 3337 	mov	a,@r0
      0012A5 C0 E0            [24] 3338 	push	acc
      0012A7 8A 82            [24] 3339 	mov	dpl,r2
      0012A9 8B 83            [24] 3340 	mov	dph,r3
      0012AB 8C F0            [24] 3341 	mov	b,r4
      0012AD 12r00r00         [24] 3342 	lcall	_stack_push
      0012B0 E5 81            [12] 3343 	mov	a,sp
      0012B2 24 FC            [12] 3344 	add	a,#0xfc
      0012B4 F5 81            [12] 3345 	mov	sp,a
                                   3346 ;	calc.c:176: break;
      0012B6 02r24r0E         [24] 3347 	ljmp	00249$
                                   3348 ;	calc.c:177: case '-':
      0012B9                       3349 00160$:
                                   3350 ;	calc.c:178: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      0012B9 E5*00            [12] 3351 	mov	a,_bp
      0012BB 24 1A            [12] 3352 	add	a,#0x1a
      0012BD FF               [12] 3353 	mov	r7,a
      0012BE 7E 00            [12] 3354 	mov	r6,#0x00
      0012C0 7D 40            [12] 3355 	mov	r5,#0x40
      0012C2 E5*00            [12] 3356 	mov	a,_bp
      0012C4 24 17            [12] 3357 	add	a,#0x17
      0012C6 F8               [12] 3358 	mov	r0,a
      0012C7 E5*00            [12] 3359 	mov	a,_bp
      0012C9 24 08            [12] 3360 	add	a,#0x08
      0012CB F9               [12] 3361 	mov	r1,a
      0012CC 74 11            [12] 3362 	mov	a,#0x11
      0012CE 26               [12] 3363 	add	a,@r0
      0012CF F7               [12] 3364 	mov	@r1,a
      0012D0 74 40            [12] 3365 	mov	a,#0x40
      0012D2 08               [12] 3366 	inc	r0
      0012D3 36               [12] 3367 	addc	a,@r0
      0012D4 09               [12] 3368 	inc	r1
      0012D5 F7               [12] 3369 	mov	@r1,a
      0012D6 08               [12] 3370 	inc	r0
      0012D7 09               [12] 3371 	inc	r1
      0012D8 E6               [12] 3372 	mov	a,@r0
      0012D9 F7               [12] 3373 	mov	@r1,a
      0012DA E5*00            [12] 3374 	mov	a,_bp
      0012DC 24 08            [12] 3375 	add	a,#0x08
      0012DE F8               [12] 3376 	mov	r0,a
      0012DF 86 82            [24] 3377 	mov	dpl,@r0
      0012E1 08               [12] 3378 	inc	r0
      0012E2 86 83            [24] 3379 	mov	dph,@r0
      0012E4 08               [12] 3380 	inc	r0
      0012E5 86 F0            [24] 3381 	mov	b,@r0
      0012E7 12r00r00         [24] 3382 	lcall	__gptrget
      0012EA FA               [12] 3383 	mov	r2,a
      0012EB A3               [24] 3384 	inc	dptr
      0012EC 12r00r00         [24] 3385 	lcall	__gptrget
      0012EF FB               [12] 3386 	mov	r3,a
      0012F0 A3               [24] 3387 	inc	dptr
      0012F1 12r00r00         [24] 3388 	lcall	__gptrget
      0012F4 FC               [12] 3389 	mov	r4,a
      0012F5 C0 07            [24] 3390 	push	ar7
      0012F7 C0 06            [24] 3391 	push	ar6
      0012F9 C0 05            [24] 3392 	push	ar5
      0012FB 8A 82            [24] 3393 	mov	dpl,r2
      0012FD 8B 83            [24] 3394 	mov	dph,r3
      0012FF 8C F0            [24] 3395 	mov	b,r4
      001301 12r00r00         [24] 3396 	lcall	_stack_pop
      001304 AB 82            [24] 3397 	mov	r3,dpl
      001306 AC 83            [24] 3398 	mov	r4,dph
      001308 15 81            [12] 3399 	dec	sp
      00130A 15 81            [12] 3400 	dec	sp
      00130C 15 81            [12] 3401 	dec	sp
      00130E EB               [12] 3402 	mov	a,r3
      00130F 4C               [12] 3403 	orl	a,r4
      001310 70 0C            [24] 3404 	jnz	00165$
      001312 90r00r4E         [24] 3405 	mov	dptr,#___str_10
      001315 75 F0 80         [24] 3406 	mov	b,#0x80
      001318 12r00r00         [24] 3407 	lcall	_printstr
      00131B 02r24r0E         [24] 3408 	ljmp	00249$
      00131E                       3409 00165$:
                                   3410 ;	calc.c:179: else if (!stack_pop(ctx->ps, &d1)) {
      00131E E5*00            [12] 3411 	mov	a,_bp
      001320 24 1E            [12] 3412 	add	a,#0x1e
      001322 FF               [12] 3413 	mov	r7,a
      001323 7E 00            [12] 3414 	mov	r6,#0x00
      001325 7D 40            [12] 3415 	mov	r5,#0x40
      001327 E5*00            [12] 3416 	mov	a,_bp
      001329 24 08            [12] 3417 	add	a,#0x08
      00132B F8               [12] 3418 	mov	r0,a
      00132C 86 82            [24] 3419 	mov	dpl,@r0
      00132E 08               [12] 3420 	inc	r0
      00132F 86 83            [24] 3421 	mov	dph,@r0
      001331 08               [12] 3422 	inc	r0
      001332 86 F0            [24] 3423 	mov	b,@r0
      001334 12r00r00         [24] 3424 	lcall	__gptrget
      001337 FA               [12] 3425 	mov	r2,a
      001338 A3               [24] 3426 	inc	dptr
      001339 12r00r00         [24] 3427 	lcall	__gptrget
      00133C FB               [12] 3428 	mov	r3,a
      00133D A3               [24] 3429 	inc	dptr
      00133E 12r00r00         [24] 3430 	lcall	__gptrget
      001341 FC               [12] 3431 	mov	r4,a
      001342 C0 07            [24] 3432 	push	ar7
      001344 C0 06            [24] 3433 	push	ar6
      001346 C0 05            [24] 3434 	push	ar5
      001348 8A 82            [24] 3435 	mov	dpl,r2
      00134A 8B 83            [24] 3436 	mov	dph,r3
      00134C 8C F0            [24] 3437 	mov	b,r4
      00134E 12r00r00         [24] 3438 	lcall	_stack_pop
      001351 AB 82            [24] 3439 	mov	r3,dpl
      001353 AC 83            [24] 3440 	mov	r4,dph
      001355 15 81            [12] 3441 	dec	sp
      001357 15 81            [12] 3442 	dec	sp
      001359 15 81            [12] 3443 	dec	sp
      00135B EB               [12] 3444 	mov	a,r3
      00135C 4C               [12] 3445 	orl	a,r4
      00135D 70 4A            [24] 3446 	jnz	00162$
                                   3447 ;	calc.c:180: (void)stack_push(ctx->ps, d0);
      00135F E5*00            [12] 3448 	mov	a,_bp
      001361 24 08            [12] 3449 	add	a,#0x08
      001363 F8               [12] 3450 	mov	r0,a
      001364 86 82            [24] 3451 	mov	dpl,@r0
      001366 08               [12] 3452 	inc	r0
      001367 86 83            [24] 3453 	mov	dph,@r0
      001369 08               [12] 3454 	inc	r0
      00136A 86 F0            [24] 3455 	mov	b,@r0
      00136C 12r00r00         [24] 3456 	lcall	__gptrget
      00136F FA               [12] 3457 	mov	r2,a
      001370 A3               [24] 3458 	inc	dptr
      001371 12r00r00         [24] 3459 	lcall	__gptrget
      001374 FB               [12] 3460 	mov	r3,a
      001375 A3               [24] 3461 	inc	dptr
      001376 12r00r00         [24] 3462 	lcall	__gptrget
      001379 FC               [12] 3463 	mov	r4,a
      00137A E5*00            [12] 3464 	mov	a,_bp
      00137C 24 1A            [12] 3465 	add	a,#0x1a
      00137E F8               [12] 3466 	mov	r0,a
      00137F E6               [12] 3467 	mov	a,@r0
      001380 C0 E0            [24] 3468 	push	acc
      001382 08               [12] 3469 	inc	r0
      001383 E6               [12] 3470 	mov	a,@r0
      001384 C0 E0            [24] 3471 	push	acc
      001386 08               [12] 3472 	inc	r0
      001387 E6               [12] 3473 	mov	a,@r0
      001388 C0 E0            [24] 3474 	push	acc
      00138A 08               [12] 3475 	inc	r0
      00138B E6               [12] 3476 	mov	a,@r0
      00138C C0 E0            [24] 3477 	push	acc
      00138E 8A 82            [24] 3478 	mov	dpl,r2
      001390 8B 83            [24] 3479 	mov	dph,r3
      001392 8C F0            [24] 3480 	mov	b,r4
      001394 12r00r00         [24] 3481 	lcall	_stack_push
      001397 E5 81            [12] 3482 	mov	a,sp
      001399 24 FC            [12] 3483 	add	a,#0xfc
      00139B F5 81            [12] 3484 	mov	sp,a
                                   3485 ;	calc.c:181: printstr("\r\nstack underflow\r\n");
      00139D 90r00r4E         [24] 3486 	mov	dptr,#___str_10
      0013A0 75 F0 80         [24] 3487 	mov	b,#0x80
      0013A3 12r00r00         [24] 3488 	lcall	_printstr
      0013A6 02r24r0E         [24] 3489 	ljmp	00249$
      0013A9                       3490 00162$:
                                   3491 ;	calc.c:183: d1 -= d0;
      0013A9 E5*00            [12] 3492 	mov	a,_bp
      0013AB 24 1E            [12] 3493 	add	a,#0x1e
      0013AD F8               [12] 3494 	mov	r0,a
      0013AE E5*00            [12] 3495 	mov	a,_bp
      0013B0 24 1A            [12] 3496 	add	a,#0x1a
      0013B2 F9               [12] 3497 	mov	r1,a
      0013B3 E6               [12] 3498 	mov	a,@r0
      0013B4 C3               [12] 3499 	clr	c
      0013B5 97               [12] 3500 	subb	a,@r1
      0013B6 F6               [12] 3501 	mov	@r0,a
      0013B7 08               [12] 3502 	inc	r0
      0013B8 E6               [12] 3503 	mov	a,@r0
      0013B9 09               [12] 3504 	inc	r1
      0013BA 97               [12] 3505 	subb	a,@r1
      0013BB F6               [12] 3506 	mov	@r0,a
      0013BC 08               [12] 3507 	inc	r0
      0013BD E6               [12] 3508 	mov	a,@r0
      0013BE 09               [12] 3509 	inc	r1
      0013BF 97               [12] 3510 	subb	a,@r1
      0013C0 F6               [12] 3511 	mov	@r0,a
      0013C1 08               [12] 3512 	inc	r0
      0013C2 E6               [12] 3513 	mov	a,@r0
      0013C3 09               [12] 3514 	inc	r1
      0013C4 97               [12] 3515 	subb	a,@r1
      0013C5 F6               [12] 3516 	mov	@r0,a
                                   3517 ;	calc.c:184: (void)stack_push(ctx->ps, d1);
      0013C6 E5*00            [12] 3518 	mov	a,_bp
      0013C8 24 08            [12] 3519 	add	a,#0x08
      0013CA F8               [12] 3520 	mov	r0,a
      0013CB 86 82            [24] 3521 	mov	dpl,@r0
      0013CD 08               [12] 3522 	inc	r0
      0013CE 86 83            [24] 3523 	mov	dph,@r0
      0013D0 08               [12] 3524 	inc	r0
      0013D1 86 F0            [24] 3525 	mov	b,@r0
      0013D3 12r00r00         [24] 3526 	lcall	__gptrget
      0013D6 FA               [12] 3527 	mov	r2,a
      0013D7 A3               [24] 3528 	inc	dptr
      0013D8 12r00r00         [24] 3529 	lcall	__gptrget
      0013DB FB               [12] 3530 	mov	r3,a
      0013DC A3               [24] 3531 	inc	dptr
      0013DD 12r00r00         [24] 3532 	lcall	__gptrget
      0013E0 FC               [12] 3533 	mov	r4,a
      0013E1 E5*00            [12] 3534 	mov	a,_bp
      0013E3 24 1E            [12] 3535 	add	a,#0x1e
      0013E5 F8               [12] 3536 	mov	r0,a
      0013E6 E6               [12] 3537 	mov	a,@r0
      0013E7 C0 E0            [24] 3538 	push	acc
      0013E9 08               [12] 3539 	inc	r0
      0013EA E6               [12] 3540 	mov	a,@r0
      0013EB C0 E0            [24] 3541 	push	acc
      0013ED 08               [12] 3542 	inc	r0
      0013EE E6               [12] 3543 	mov	a,@r0
      0013EF C0 E0            [24] 3544 	push	acc
      0013F1 08               [12] 3545 	inc	r0
      0013F2 E6               [12] 3546 	mov	a,@r0
      0013F3 C0 E0            [24] 3547 	push	acc
      0013F5 8A 82            [24] 3548 	mov	dpl,r2
      0013F7 8B 83            [24] 3549 	mov	dph,r3
      0013F9 8C F0            [24] 3550 	mov	b,r4
      0013FB 12r00r00         [24] 3551 	lcall	_stack_push
      0013FE E5 81            [12] 3552 	mov	a,sp
      001400 24 FC            [12] 3553 	add	a,#0xfc
      001402 F5 81            [12] 3554 	mov	sp,a
                                   3555 ;	calc.c:186: break;
      001404 02r24r0E         [24] 3556 	ljmp	00249$
                                   3557 ;	calc.c:187: case '*':
      001407                       3558 00167$:
                                   3559 ;	calc.c:188: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      001407 E5*00            [12] 3560 	mov	a,_bp
      001409 24 1A            [12] 3561 	add	a,#0x1a
      00140B FF               [12] 3562 	mov	r7,a
      00140C 7E 00            [12] 3563 	mov	r6,#0x00
      00140E 7D 40            [12] 3564 	mov	r5,#0x40
      001410 E5*00            [12] 3565 	mov	a,_bp
      001412 24 17            [12] 3566 	add	a,#0x17
      001414 F8               [12] 3567 	mov	r0,a
      001415 E5*00            [12] 3568 	mov	a,_bp
      001417 24 08            [12] 3569 	add	a,#0x08
      001419 F9               [12] 3570 	mov	r1,a
      00141A 74 11            [12] 3571 	mov	a,#0x11
      00141C 26               [12] 3572 	add	a,@r0
      00141D F7               [12] 3573 	mov	@r1,a
      00141E 74 40            [12] 3574 	mov	a,#0x40
      001420 08               [12] 3575 	inc	r0
      001421 36               [12] 3576 	addc	a,@r0
      001422 09               [12] 3577 	inc	r1
      001423 F7               [12] 3578 	mov	@r1,a
      001424 08               [12] 3579 	inc	r0
      001425 09               [12] 3580 	inc	r1
      001426 E6               [12] 3581 	mov	a,@r0
      001427 F7               [12] 3582 	mov	@r1,a
      001428 E5*00            [12] 3583 	mov	a,_bp
      00142A 24 08            [12] 3584 	add	a,#0x08
      00142C F8               [12] 3585 	mov	r0,a
      00142D 86 82            [24] 3586 	mov	dpl,@r0
      00142F 08               [12] 3587 	inc	r0
      001430 86 83            [24] 3588 	mov	dph,@r0
      001432 08               [12] 3589 	inc	r0
      001433 86 F0            [24] 3590 	mov	b,@r0
      001435 12r00r00         [24] 3591 	lcall	__gptrget
      001438 FA               [12] 3592 	mov	r2,a
      001439 A3               [24] 3593 	inc	dptr
      00143A 12r00r00         [24] 3594 	lcall	__gptrget
      00143D FB               [12] 3595 	mov	r3,a
      00143E A3               [24] 3596 	inc	dptr
      00143F 12r00r00         [24] 3597 	lcall	__gptrget
      001442 FC               [12] 3598 	mov	r4,a
      001443 C0 07            [24] 3599 	push	ar7
      001445 C0 06            [24] 3600 	push	ar6
      001447 C0 05            [24] 3601 	push	ar5
      001449 8A 82            [24] 3602 	mov	dpl,r2
      00144B 8B 83            [24] 3603 	mov	dph,r3
      00144D 8C F0            [24] 3604 	mov	b,r4
      00144F 12r00r00         [24] 3605 	lcall	_stack_pop
      001452 AB 82            [24] 3606 	mov	r3,dpl
      001454 AC 83            [24] 3607 	mov	r4,dph
      001456 15 81            [12] 3608 	dec	sp
      001458 15 81            [12] 3609 	dec	sp
      00145A 15 81            [12] 3610 	dec	sp
      00145C EB               [12] 3611 	mov	a,r3
      00145D 4C               [12] 3612 	orl	a,r4
      00145E 70 0C            [24] 3613 	jnz	00172$
      001460 90r00r4E         [24] 3614 	mov	dptr,#___str_10
      001463 75 F0 80         [24] 3615 	mov	b,#0x80
      001466 12r00r00         [24] 3616 	lcall	_printstr
      001469 02r24r0E         [24] 3617 	ljmp	00249$
      00146C                       3618 00172$:
                                   3619 ;	calc.c:189: else if (!stack_pop(ctx->ps, &d1)) {
      00146C E5*00            [12] 3620 	mov	a,_bp
      00146E 24 1E            [12] 3621 	add	a,#0x1e
      001470 FF               [12] 3622 	mov	r7,a
      001471 7E 00            [12] 3623 	mov	r6,#0x00
      001473 7D 40            [12] 3624 	mov	r5,#0x40
      001475 E5*00            [12] 3625 	mov	a,_bp
      001477 24 08            [12] 3626 	add	a,#0x08
      001479 F8               [12] 3627 	mov	r0,a
      00147A 86 82            [24] 3628 	mov	dpl,@r0
      00147C 08               [12] 3629 	inc	r0
      00147D 86 83            [24] 3630 	mov	dph,@r0
      00147F 08               [12] 3631 	inc	r0
      001480 86 F0            [24] 3632 	mov	b,@r0
      001482 12r00r00         [24] 3633 	lcall	__gptrget
      001485 FA               [12] 3634 	mov	r2,a
      001486 A3               [24] 3635 	inc	dptr
      001487 12r00r00         [24] 3636 	lcall	__gptrget
      00148A FB               [12] 3637 	mov	r3,a
      00148B A3               [24] 3638 	inc	dptr
      00148C 12r00r00         [24] 3639 	lcall	__gptrget
      00148F FC               [12] 3640 	mov	r4,a
      001490 C0 07            [24] 3641 	push	ar7
      001492 C0 06            [24] 3642 	push	ar6
      001494 C0 05            [24] 3643 	push	ar5
      001496 8A 82            [24] 3644 	mov	dpl,r2
      001498 8B 83            [24] 3645 	mov	dph,r3
      00149A 8C F0            [24] 3646 	mov	b,r4
      00149C 12r00r00         [24] 3647 	lcall	_stack_pop
      00149F AB 82            [24] 3648 	mov	r3,dpl
      0014A1 AC 83            [24] 3649 	mov	r4,dph
      0014A3 15 81            [12] 3650 	dec	sp
      0014A5 15 81            [12] 3651 	dec	sp
      0014A7 15 81            [12] 3652 	dec	sp
      0014A9 EB               [12] 3653 	mov	a,r3
      0014AA 4C               [12] 3654 	orl	a,r4
      0014AB 70 4A            [24] 3655 	jnz	00169$
                                   3656 ;	calc.c:190: (void)stack_push(ctx->ps, d0);
      0014AD E5*00            [12] 3657 	mov	a,_bp
      0014AF 24 08            [12] 3658 	add	a,#0x08
      0014B1 F8               [12] 3659 	mov	r0,a
      0014B2 86 82            [24] 3660 	mov	dpl,@r0
      0014B4 08               [12] 3661 	inc	r0
      0014B5 86 83            [24] 3662 	mov	dph,@r0
      0014B7 08               [12] 3663 	inc	r0
      0014B8 86 F0            [24] 3664 	mov	b,@r0
      0014BA 12r00r00         [24] 3665 	lcall	__gptrget
      0014BD FA               [12] 3666 	mov	r2,a
      0014BE A3               [24] 3667 	inc	dptr
      0014BF 12r00r00         [24] 3668 	lcall	__gptrget
      0014C2 FB               [12] 3669 	mov	r3,a
      0014C3 A3               [24] 3670 	inc	dptr
      0014C4 12r00r00         [24] 3671 	lcall	__gptrget
      0014C7 FC               [12] 3672 	mov	r4,a
      0014C8 E5*00            [12] 3673 	mov	a,_bp
      0014CA 24 1A            [12] 3674 	add	a,#0x1a
      0014CC F8               [12] 3675 	mov	r0,a
      0014CD E6               [12] 3676 	mov	a,@r0
      0014CE C0 E0            [24] 3677 	push	acc
      0014D0 08               [12] 3678 	inc	r0
      0014D1 E6               [12] 3679 	mov	a,@r0
      0014D2 C0 E0            [24] 3680 	push	acc
      0014D4 08               [12] 3681 	inc	r0
      0014D5 E6               [12] 3682 	mov	a,@r0
      0014D6 C0 E0            [24] 3683 	push	acc
      0014D8 08               [12] 3684 	inc	r0
      0014D9 E6               [12] 3685 	mov	a,@r0
      0014DA C0 E0            [24] 3686 	push	acc
      0014DC 8A 82            [24] 3687 	mov	dpl,r2
      0014DE 8B 83            [24] 3688 	mov	dph,r3
      0014E0 8C F0            [24] 3689 	mov	b,r4
      0014E2 12r00r00         [24] 3690 	lcall	_stack_push
      0014E5 E5 81            [12] 3691 	mov	a,sp
      0014E7 24 FC            [12] 3692 	add	a,#0xfc
      0014E9 F5 81            [12] 3693 	mov	sp,a
                                   3694 ;	calc.c:191: printstr("\r\nstack underflow\r\n");
      0014EB 90r00r4E         [24] 3695 	mov	dptr,#___str_10
      0014EE 75 F0 80         [24] 3696 	mov	b,#0x80
      0014F1 12r00r00         [24] 3697 	lcall	_printstr
      0014F4 02r24r0E         [24] 3698 	ljmp	00249$
      0014F7                       3699 00169$:
                                   3700 ;	calc.c:193: d1 *= d0;
      0014F7 E5*00            [12] 3701 	mov	a,_bp
      0014F9 24 1A            [12] 3702 	add	a,#0x1a
      0014FB F8               [12] 3703 	mov	r0,a
      0014FC E6               [12] 3704 	mov	a,@r0
      0014FD C0 E0            [24] 3705 	push	acc
      0014FF 08               [12] 3706 	inc	r0
      001500 E6               [12] 3707 	mov	a,@r0
      001501 C0 E0            [24] 3708 	push	acc
      001503 08               [12] 3709 	inc	r0
      001504 E6               [12] 3710 	mov	a,@r0
      001505 C0 E0            [24] 3711 	push	acc
      001507 08               [12] 3712 	inc	r0
      001508 E6               [12] 3713 	mov	a,@r0
      001509 C0 E0            [24] 3714 	push	acc
      00150B E5*00            [12] 3715 	mov	a,_bp
      00150D 24 1E            [12] 3716 	add	a,#0x1e
      00150F F8               [12] 3717 	mov	r0,a
      001510 86 82            [24] 3718 	mov	dpl,@r0
      001512 08               [12] 3719 	inc	r0
      001513 86 83            [24] 3720 	mov	dph,@r0
      001515 08               [12] 3721 	inc	r0
      001516 86 F0            [24] 3722 	mov	b,@r0
      001518 08               [12] 3723 	inc	r0
      001519 E6               [12] 3724 	mov	a,@r0
      00151A 12r00r00         [24] 3725 	lcall	__mullong
      00151D AF 82            [24] 3726 	mov	r7,dpl
      00151F AE 83            [24] 3727 	mov	r6,dph
      001521 AD F0            [24] 3728 	mov	r5,b
      001523 FC               [12] 3729 	mov	r4,a
      001524 E5 81            [12] 3730 	mov	a,sp
      001526 24 FC            [12] 3731 	add	a,#0xfc
      001528 F5 81            [12] 3732 	mov	sp,a
      00152A E5*00            [12] 3733 	mov	a,_bp
      00152C 24 1E            [12] 3734 	add	a,#0x1e
      00152E F8               [12] 3735 	mov	r0,a
      00152F A6 07            [24] 3736 	mov	@r0,ar7
      001531 08               [12] 3737 	inc	r0
      001532 A6 06            [24] 3738 	mov	@r0,ar6
      001534 08               [12] 3739 	inc	r0
      001535 A6 05            [24] 3740 	mov	@r0,ar5
      001537 08               [12] 3741 	inc	r0
      001538 A6 04            [24] 3742 	mov	@r0,ar4
                                   3743 ;	calc.c:194: (void)stack_push(ctx->ps, d1);
      00153A E5*00            [12] 3744 	mov	a,_bp
      00153C 24 08            [12] 3745 	add	a,#0x08
      00153E F8               [12] 3746 	mov	r0,a
      00153F 86 82            [24] 3747 	mov	dpl,@r0
      001541 08               [12] 3748 	inc	r0
      001542 86 83            [24] 3749 	mov	dph,@r0
      001544 08               [12] 3750 	inc	r0
      001545 86 F0            [24] 3751 	mov	b,@r0
      001547 12r00r00         [24] 3752 	lcall	__gptrget
      00154A FA               [12] 3753 	mov	r2,a
      00154B A3               [24] 3754 	inc	dptr
      00154C 12r00r00         [24] 3755 	lcall	__gptrget
      00154F FB               [12] 3756 	mov	r3,a
      001550 A3               [24] 3757 	inc	dptr
      001551 12r00r00         [24] 3758 	lcall	__gptrget
      001554 FC               [12] 3759 	mov	r4,a
      001555 E5*00            [12] 3760 	mov	a,_bp
      001557 24 1E            [12] 3761 	add	a,#0x1e
      001559 F8               [12] 3762 	mov	r0,a
      00155A E6               [12] 3763 	mov	a,@r0
      00155B C0 E0            [24] 3764 	push	acc
      00155D 08               [12] 3765 	inc	r0
      00155E E6               [12] 3766 	mov	a,@r0
      00155F C0 E0            [24] 3767 	push	acc
      001561 08               [12] 3768 	inc	r0
      001562 E6               [12] 3769 	mov	a,@r0
      001563 C0 E0            [24] 3770 	push	acc
      001565 08               [12] 3771 	inc	r0
      001566 E6               [12] 3772 	mov	a,@r0
      001567 C0 E0            [24] 3773 	push	acc
      001569 8A 82            [24] 3774 	mov	dpl,r2
      00156B 8B 83            [24] 3775 	mov	dph,r3
      00156D 8C F0            [24] 3776 	mov	b,r4
      00156F 12r00r00         [24] 3777 	lcall	_stack_push
      001572 E5 81            [12] 3778 	mov	a,sp
      001574 24 FC            [12] 3779 	add	a,#0xfc
      001576 F5 81            [12] 3780 	mov	sp,a
                                   3781 ;	calc.c:196: break;
      001578 02r24r0E         [24] 3782 	ljmp	00249$
                                   3783 ;	calc.c:198: case '\\':
      00157B                       3784 00175$:
                                   3785 ;	calc.c:199: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      00157B C0 05            [24] 3786 	push	ar5
      00157D C0 06            [24] 3787 	push	ar6
      00157F C0 07            [24] 3788 	push	ar7
      001581 E5*00            [12] 3789 	mov	a,_bp
      001583 24 1A            [12] 3790 	add	a,#0x1a
      001585 FC               [12] 3791 	mov	r4,a
      001586 7B 00            [12] 3792 	mov	r3,#0x00
      001588 7A 40            [12] 3793 	mov	r2,#0x40
      00158A E5*00            [12] 3794 	mov	a,_bp
      00158C 24 17            [12] 3795 	add	a,#0x17
      00158E F8               [12] 3796 	mov	r0,a
      00158F E5*00            [12] 3797 	mov	a,_bp
      001591 24 0B            [12] 3798 	add	a,#0x0b
      001593 F9               [12] 3799 	mov	r1,a
      001594 74 11            [12] 3800 	mov	a,#0x11
      001596 26               [12] 3801 	add	a,@r0
      001597 F7               [12] 3802 	mov	@r1,a
      001598 74 40            [12] 3803 	mov	a,#0x40
      00159A 08               [12] 3804 	inc	r0
      00159B 36               [12] 3805 	addc	a,@r0
      00159C 09               [12] 3806 	inc	r1
      00159D F7               [12] 3807 	mov	@r1,a
      00159E 08               [12] 3808 	inc	r0
      00159F 09               [12] 3809 	inc	r1
      0015A0 E6               [12] 3810 	mov	a,@r0
      0015A1 F7               [12] 3811 	mov	@r1,a
      0015A2 E5*00            [12] 3812 	mov	a,_bp
      0015A4 24 0B            [12] 3813 	add	a,#0x0b
      0015A6 F8               [12] 3814 	mov	r0,a
      0015A7 86 82            [24] 3815 	mov	dpl,@r0
      0015A9 08               [12] 3816 	inc	r0
      0015AA 86 83            [24] 3817 	mov	dph,@r0
      0015AC 08               [12] 3818 	inc	r0
      0015AD 86 F0            [24] 3819 	mov	b,@r0
      0015AF 12r00r00         [24] 3820 	lcall	__gptrget
      0015B2 FD               [12] 3821 	mov	r5,a
      0015B3 A3               [24] 3822 	inc	dptr
      0015B4 12r00r00         [24] 3823 	lcall	__gptrget
      0015B7 FE               [12] 3824 	mov	r6,a
      0015B8 A3               [24] 3825 	inc	dptr
      0015B9 12r00r00         [24] 3826 	lcall	__gptrget
      0015BC FF               [12] 3827 	mov	r7,a
      0015BD C0 05            [24] 3828 	push	ar5
      0015BF C0 04            [24] 3829 	push	ar4
      0015C1 C0 03            [24] 3830 	push	ar3
      0015C3 C0 02            [24] 3831 	push	ar2
      0015C5 8D 82            [24] 3832 	mov	dpl,r5
      0015C7 8E 83            [24] 3833 	mov	dph,r6
      0015C9 8F F0            [24] 3834 	mov	b,r7
      0015CB 12r00r00         [24] 3835 	lcall	_stack_pop
      0015CE AE 82            [24] 3836 	mov	r6,dpl
      0015D0 AF 83            [24] 3837 	mov	r7,dph
      0015D2 15 81            [12] 3838 	dec	sp
      0015D4 15 81            [12] 3839 	dec	sp
      0015D6 15 81            [12] 3840 	dec	sp
      0015D8 D0 05            [24] 3841 	pop	ar5
      0015DA EE               [12] 3842 	mov	a,r6
      0015DB 4F               [12] 3843 	orl	a,r7
      0015DC D0 07            [24] 3844 	pop	ar7
      0015DE D0 06            [24] 3845 	pop	ar6
      0015E0 D0 05            [24] 3846 	pop	ar5
      0015E2 70 0C            [24] 3847 	jnz	00186$
      0015E4 90r00r4E         [24] 3848 	mov	dptr,#___str_10
      0015E7 75 F0 80         [24] 3849 	mov	b,#0x80
      0015EA 12r00r00         [24] 3850 	lcall	_printstr
      0015ED 02r24r0E         [24] 3851 	ljmp	00249$
      0015F0                       3852 00186$:
                                   3853 ;	calc.c:200: else if (!stack_pop(ctx->ps, &d1)) {
      0015F0 C0 05            [24] 3854 	push	ar5
      0015F2 C0 06            [24] 3855 	push	ar6
      0015F4 C0 07            [24] 3856 	push	ar7
      0015F6 E5*00            [12] 3857 	mov	a,_bp
      0015F8 24 1E            [12] 3858 	add	a,#0x1e
      0015FA FC               [12] 3859 	mov	r4,a
      0015FB 7B 00            [12] 3860 	mov	r3,#0x00
      0015FD 7A 40            [12] 3861 	mov	r2,#0x40
      0015FF E5*00            [12] 3862 	mov	a,_bp
      001601 24 0B            [12] 3863 	add	a,#0x0b
      001603 F8               [12] 3864 	mov	r0,a
      001604 86 82            [24] 3865 	mov	dpl,@r0
      001606 08               [12] 3866 	inc	r0
      001607 86 83            [24] 3867 	mov	dph,@r0
      001609 08               [12] 3868 	inc	r0
      00160A 86 F0            [24] 3869 	mov	b,@r0
      00160C 12r00r00         [24] 3870 	lcall	__gptrget
      00160F FD               [12] 3871 	mov	r5,a
      001610 A3               [24] 3872 	inc	dptr
      001611 12r00r00         [24] 3873 	lcall	__gptrget
      001614 FE               [12] 3874 	mov	r6,a
      001615 A3               [24] 3875 	inc	dptr
      001616 12r00r00         [24] 3876 	lcall	__gptrget
      001619 FF               [12] 3877 	mov	r7,a
      00161A C0 05            [24] 3878 	push	ar5
      00161C C0 04            [24] 3879 	push	ar4
      00161E C0 03            [24] 3880 	push	ar3
      001620 C0 02            [24] 3881 	push	ar2
      001622 8D 82            [24] 3882 	mov	dpl,r5
      001624 8E 83            [24] 3883 	mov	dph,r6
      001626 8F F0            [24] 3884 	mov	b,r7
      001628 12r00r00         [24] 3885 	lcall	_stack_pop
      00162B AE 82            [24] 3886 	mov	r6,dpl
      00162D AF 83            [24] 3887 	mov	r7,dph
      00162F 15 81            [12] 3888 	dec	sp
      001631 15 81            [12] 3889 	dec	sp
      001633 15 81            [12] 3890 	dec	sp
      001635 D0 05            [24] 3891 	pop	ar5
      001637 EE               [12] 3892 	mov	a,r6
      001638 4F               [12] 3893 	orl	a,r7
      001639 D0 07            [24] 3894 	pop	ar7
      00163B D0 06            [24] 3895 	pop	ar6
      00163D D0 05            [24] 3896 	pop	ar5
      00163F 70 4A            [24] 3897 	jnz	00183$
                                   3898 ;	calc.c:201: (void)stack_push(ctx->ps, d0);
      001641 E5*00            [12] 3899 	mov	a,_bp
      001643 24 0B            [12] 3900 	add	a,#0x0b
      001645 F8               [12] 3901 	mov	r0,a
      001646 86 82            [24] 3902 	mov	dpl,@r0
      001648 08               [12] 3903 	inc	r0
      001649 86 83            [24] 3904 	mov	dph,@r0
      00164B 08               [12] 3905 	inc	r0
      00164C 86 F0            [24] 3906 	mov	b,@r0
      00164E 12r00r00         [24] 3907 	lcall	__gptrget
      001651 FA               [12] 3908 	mov	r2,a
      001652 A3               [24] 3909 	inc	dptr
      001653 12r00r00         [24] 3910 	lcall	__gptrget
      001656 FB               [12] 3911 	mov	r3,a
      001657 A3               [24] 3912 	inc	dptr
      001658 12r00r00         [24] 3913 	lcall	__gptrget
      00165B FC               [12] 3914 	mov	r4,a
      00165C E5*00            [12] 3915 	mov	a,_bp
      00165E 24 1A            [12] 3916 	add	a,#0x1a
      001660 F8               [12] 3917 	mov	r0,a
      001661 E6               [12] 3918 	mov	a,@r0
      001662 C0 E0            [24] 3919 	push	acc
      001664 08               [12] 3920 	inc	r0
      001665 E6               [12] 3921 	mov	a,@r0
      001666 C0 E0            [24] 3922 	push	acc
      001668 08               [12] 3923 	inc	r0
      001669 E6               [12] 3924 	mov	a,@r0
      00166A C0 E0            [24] 3925 	push	acc
      00166C 08               [12] 3926 	inc	r0
      00166D E6               [12] 3927 	mov	a,@r0
      00166E C0 E0            [24] 3928 	push	acc
      001670 8A 82            [24] 3929 	mov	dpl,r2
      001672 8B 83            [24] 3930 	mov	dph,r3
      001674 8C F0            [24] 3931 	mov	b,r4
      001676 12r00r00         [24] 3932 	lcall	_stack_push
      001679 E5 81            [12] 3933 	mov	a,sp
      00167B 24 FC            [12] 3934 	add	a,#0xfc
      00167D F5 81            [12] 3935 	mov	sp,a
                                   3936 ;	calc.c:202: printstr("\r\nstack underflow\r\n");
      00167F 90r00r4E         [24] 3937 	mov	dptr,#___str_10
      001682 75 F0 80         [24] 3938 	mov	b,#0x80
      001685 12r00r00         [24] 3939 	lcall	_printstr
      001688 02r24r0E         [24] 3940 	ljmp	00249$
      00168B                       3941 00183$:
                                   3942 ;	calc.c:203: } else if (!d0) {
      00168B E5*00            [12] 3943 	mov	a,_bp
      00168D 24 1A            [12] 3944 	add	a,#0x1a
      00168F F8               [12] 3945 	mov	r0,a
      001690 E6               [12] 3946 	mov	a,@r0
      001691 08               [12] 3947 	inc	r0
      001692 46               [12] 3948 	orl	a,@r0
      001693 08               [12] 3949 	inc	r0
      001694 46               [12] 3950 	orl	a,@r0
      001695 08               [12] 3951 	inc	r0
      001696 46               [12] 3952 	orl	a,@r0
      001697 60 03            [24] 3953 	jz	00575$
      001699 02r17r24         [24] 3954 	ljmp	00180$
      00169C                       3955 00575$:
                                   3956 ;	calc.c:204: (void)stack_push(ctx->ps, d1);
      00169C E5*00            [12] 3957 	mov	a,_bp
      00169E 24 0B            [12] 3958 	add	a,#0x0b
      0016A0 F8               [12] 3959 	mov	r0,a
      0016A1 86 82            [24] 3960 	mov	dpl,@r0
      0016A3 08               [12] 3961 	inc	r0
      0016A4 86 83            [24] 3962 	mov	dph,@r0
      0016A6 08               [12] 3963 	inc	r0
      0016A7 86 F0            [24] 3964 	mov	b,@r0
      0016A9 12r00r00         [24] 3965 	lcall	__gptrget
      0016AC FA               [12] 3966 	mov	r2,a
      0016AD A3               [24] 3967 	inc	dptr
      0016AE 12r00r00         [24] 3968 	lcall	__gptrget
      0016B1 FB               [12] 3969 	mov	r3,a
      0016B2 A3               [24] 3970 	inc	dptr
      0016B3 12r00r00         [24] 3971 	lcall	__gptrget
      0016B6 FC               [12] 3972 	mov	r4,a
      0016B7 E5*00            [12] 3973 	mov	a,_bp
      0016B9 24 1E            [12] 3974 	add	a,#0x1e
      0016BB F8               [12] 3975 	mov	r0,a
      0016BC E6               [12] 3976 	mov	a,@r0
      0016BD C0 E0            [24] 3977 	push	acc
      0016BF 08               [12] 3978 	inc	r0
      0016C0 E6               [12] 3979 	mov	a,@r0
      0016C1 C0 E0            [24] 3980 	push	acc
      0016C3 08               [12] 3981 	inc	r0
      0016C4 E6               [12] 3982 	mov	a,@r0
      0016C5 C0 E0            [24] 3983 	push	acc
      0016C7 08               [12] 3984 	inc	r0
      0016C8 E6               [12] 3985 	mov	a,@r0
      0016C9 C0 E0            [24] 3986 	push	acc
      0016CB 8A 82            [24] 3987 	mov	dpl,r2
      0016CD 8B 83            [24] 3988 	mov	dph,r3
      0016CF 8C F0            [24] 3989 	mov	b,r4
      0016D1 12r00r00         [24] 3990 	lcall	_stack_push
      0016D4 E5 81            [12] 3991 	mov	a,sp
      0016D6 24 FC            [12] 3992 	add	a,#0xfc
      0016D8 F5 81            [12] 3993 	mov	sp,a
                                   3994 ;	calc.c:205: (void)stack_push(ctx->ps, d0);			
      0016DA E5*00            [12] 3995 	mov	a,_bp
      0016DC 24 0B            [12] 3996 	add	a,#0x0b
      0016DE F8               [12] 3997 	mov	r0,a
      0016DF 86 82            [24] 3998 	mov	dpl,@r0
      0016E1 08               [12] 3999 	inc	r0
      0016E2 86 83            [24] 4000 	mov	dph,@r0
      0016E4 08               [12] 4001 	inc	r0
      0016E5 86 F0            [24] 4002 	mov	b,@r0
      0016E7 12r00r00         [24] 4003 	lcall	__gptrget
      0016EA FA               [12] 4004 	mov	r2,a
      0016EB A3               [24] 4005 	inc	dptr
      0016EC 12r00r00         [24] 4006 	lcall	__gptrget
      0016EF FB               [12] 4007 	mov	r3,a
      0016F0 A3               [24] 4008 	inc	dptr
      0016F1 12r00r00         [24] 4009 	lcall	__gptrget
      0016F4 FC               [12] 4010 	mov	r4,a
      0016F5 E5*00            [12] 4011 	mov	a,_bp
      0016F7 24 1A            [12] 4012 	add	a,#0x1a
      0016F9 F8               [12] 4013 	mov	r0,a
      0016FA E6               [12] 4014 	mov	a,@r0
      0016FB C0 E0            [24] 4015 	push	acc
      0016FD 08               [12] 4016 	inc	r0
      0016FE E6               [12] 4017 	mov	a,@r0
      0016FF C0 E0            [24] 4018 	push	acc
      001701 08               [12] 4019 	inc	r0
      001702 E6               [12] 4020 	mov	a,@r0
      001703 C0 E0            [24] 4021 	push	acc
      001705 08               [12] 4022 	inc	r0
      001706 E6               [12] 4023 	mov	a,@r0
      001707 C0 E0            [24] 4024 	push	acc
      001709 8A 82            [24] 4025 	mov	dpl,r2
      00170B 8B 83            [24] 4026 	mov	dph,r3
      00170D 8C F0            [24] 4027 	mov	b,r4
      00170F 12r00r00         [24] 4028 	lcall	_stack_push
      001712 E5 81            [12] 4029 	mov	a,sp
      001714 24 FC            [12] 4030 	add	a,#0xfc
      001716 F5 81            [12] 4031 	mov	sp,a
                                   4032 ;	calc.c:206: printstr("\r\ndivision by zero\r\n");
      001718 90r00rB0         [24] 4033 	mov	dptr,#___str_14
      00171B 75 F0 80         [24] 4034 	mov	b,#0x80
      00171E 12r00r00         [24] 4035 	lcall	_printstr
      001721 02r24r0E         [24] 4036 	ljmp	00249$
      001724                       4037 00180$:
                                   4038 ;	calc.c:208: if (ctx->digit[0] == '/') d1 /= d0;
      001724 8D 82            [24] 4039 	mov	dpl,r5
      001726 8E 83            [24] 4040 	mov	dph,r6
      001728 8F F0            [24] 4041 	mov	b,r7
      00172A 12r00r00         [24] 4042 	lcall	__gptrget
      00172D FC               [12] 4043 	mov	r4,a
      00172E BC 2F 45         [24] 4044 	cjne	r4,#0x2f,00177$
      001731 E5*00            [12] 4045 	mov	a,_bp
      001733 24 1A            [12] 4046 	add	a,#0x1a
      001735 F8               [12] 4047 	mov	r0,a
      001736 E6               [12] 4048 	mov	a,@r0
      001737 C0 E0            [24] 4049 	push	acc
      001739 08               [12] 4050 	inc	r0
      00173A E6               [12] 4051 	mov	a,@r0
      00173B C0 E0            [24] 4052 	push	acc
      00173D 08               [12] 4053 	inc	r0
      00173E E6               [12] 4054 	mov	a,@r0
      00173F C0 E0            [24] 4055 	push	acc
      001741 08               [12] 4056 	inc	r0
      001742 E6               [12] 4057 	mov	a,@r0
      001743 C0 E0            [24] 4058 	push	acc
      001745 E5*00            [12] 4059 	mov	a,_bp
      001747 24 1E            [12] 4060 	add	a,#0x1e
      001749 F8               [12] 4061 	mov	r0,a
      00174A 86 82            [24] 4062 	mov	dpl,@r0
      00174C 08               [12] 4063 	inc	r0
      00174D 86 83            [24] 4064 	mov	dph,@r0
      00174F 08               [12] 4065 	inc	r0
      001750 86 F0            [24] 4066 	mov	b,@r0
      001752 08               [12] 4067 	inc	r0
      001753 E6               [12] 4068 	mov	a,@r0
      001754 12r00r00         [24] 4069 	lcall	__divslong
      001757 AF 82            [24] 4070 	mov	r7,dpl
      001759 AE 83            [24] 4071 	mov	r6,dph
      00175B AD F0            [24] 4072 	mov	r5,b
      00175D FC               [12] 4073 	mov	r4,a
      00175E E5 81            [12] 4074 	mov	a,sp
      001760 24 FC            [12] 4075 	add	a,#0xfc
      001762 F5 81            [12] 4076 	mov	sp,a
      001764 E5*00            [12] 4077 	mov	a,_bp
      001766 24 1E            [12] 4078 	add	a,#0x1e
      001768 F8               [12] 4079 	mov	r0,a
      001769 A6 07            [24] 4080 	mov	@r0,ar7
      00176B 08               [12] 4081 	inc	r0
      00176C A6 06            [24] 4082 	mov	@r0,ar6
      00176E 08               [12] 4083 	inc	r0
      00176F A6 05            [24] 4084 	mov	@r0,ar5
      001771 08               [12] 4085 	inc	r0
      001772 A6 04            [24] 4086 	mov	@r0,ar4
      001774 80 63            [24] 4087 	sjmp	00178$
      001776                       4088 00177$:
                                   4089 ;	calc.c:209: else d1 = (unsigned long)d1 / (unsigned long)d0;
      001776 E5*00            [12] 4090 	mov	a,_bp
      001778 24 1E            [12] 4091 	add	a,#0x1e
      00177A F8               [12] 4092 	mov	r0,a
      00177B 86 07            [24] 4093 	mov	ar7,@r0
      00177D 08               [12] 4094 	inc	r0
      00177E 86 06            [24] 4095 	mov	ar6,@r0
      001780 08               [12] 4096 	inc	r0
      001781 86 05            [24] 4097 	mov	ar5,@r0
      001783 08               [12] 4098 	inc	r0
      001784 86 04            [24] 4099 	mov	ar4,@r0
      001786 E5*00            [12] 4100 	mov	a,_bp
      001788 24 1A            [12] 4101 	add	a,#0x1a
      00178A F8               [12] 4102 	mov	r0,a
      00178B E5*00            [12] 4103 	mov	a,_bp
      00178D 24 13            [12] 4104 	add	a,#0x13
      00178F F9               [12] 4105 	mov	r1,a
      001790 E6               [12] 4106 	mov	a,@r0
      001791 F7               [12] 4107 	mov	@r1,a
      001792 08               [12] 4108 	inc	r0
      001793 09               [12] 4109 	inc	r1
      001794 E6               [12] 4110 	mov	a,@r0
      001795 F7               [12] 4111 	mov	@r1,a
      001796 08               [12] 4112 	inc	r0
      001797 09               [12] 4113 	inc	r1
      001798 E6               [12] 4114 	mov	a,@r0
      001799 F7               [12] 4115 	mov	@r1,a
      00179A 08               [12] 4116 	inc	r0
      00179B 09               [12] 4117 	inc	r1
      00179C E6               [12] 4118 	mov	a,@r0
      00179D F7               [12] 4119 	mov	@r1,a
      00179E E5*00            [12] 4120 	mov	a,_bp
      0017A0 24 13            [12] 4121 	add	a,#0x13
      0017A2 F8               [12] 4122 	mov	r0,a
      0017A3 E6               [12] 4123 	mov	a,@r0
      0017A4 C0 E0            [24] 4124 	push	acc
      0017A6 08               [12] 4125 	inc	r0
      0017A7 E6               [12] 4126 	mov	a,@r0
      0017A8 C0 E0            [24] 4127 	push	acc
      0017AA 08               [12] 4128 	inc	r0
      0017AB E6               [12] 4129 	mov	a,@r0
      0017AC C0 E0            [24] 4130 	push	acc
      0017AE 08               [12] 4131 	inc	r0
      0017AF E6               [12] 4132 	mov	a,@r0
      0017B0 C0 E0            [24] 4133 	push	acc
      0017B2 8F 82            [24] 4134 	mov	dpl,r7
      0017B4 8E 83            [24] 4135 	mov	dph,r6
      0017B6 8D F0            [24] 4136 	mov	b,r5
      0017B8 EC               [12] 4137 	mov	a,r4
      0017B9 12r00r00         [24] 4138 	lcall	__divulong
      0017BC AF 82            [24] 4139 	mov	r7,dpl
      0017BE AE 83            [24] 4140 	mov	r6,dph
      0017C0 AD F0            [24] 4141 	mov	r5,b
      0017C2 FC               [12] 4142 	mov	r4,a
      0017C3 E5 81            [12] 4143 	mov	a,sp
      0017C5 24 FC            [12] 4144 	add	a,#0xfc
      0017C7 F5 81            [12] 4145 	mov	sp,a
      0017C9 E5*00            [12] 4146 	mov	a,_bp
      0017CB 24 1E            [12] 4147 	add	a,#0x1e
      0017CD F8               [12] 4148 	mov	r0,a
      0017CE A6 07            [24] 4149 	mov	@r0,ar7
      0017D0 08               [12] 4150 	inc	r0
      0017D1 A6 06            [24] 4151 	mov	@r0,ar6
      0017D3 08               [12] 4152 	inc	r0
      0017D4 A6 05            [24] 4153 	mov	@r0,ar5
      0017D6 08               [12] 4154 	inc	r0
      0017D7 A6 04            [24] 4155 	mov	@r0,ar4
      0017D9                       4156 00178$:
                                   4157 ;	calc.c:210: (void)stack_push(ctx->ps, d1);
      0017D9 E5*00            [12] 4158 	mov	a,_bp
      0017DB 24 0B            [12] 4159 	add	a,#0x0b
      0017DD F8               [12] 4160 	mov	r0,a
      0017DE 86 82            [24] 4161 	mov	dpl,@r0
      0017E0 08               [12] 4162 	inc	r0
      0017E1 86 83            [24] 4163 	mov	dph,@r0
      0017E3 08               [12] 4164 	inc	r0
      0017E4 86 F0            [24] 4165 	mov	b,@r0
      0017E6 12r00r00         [24] 4166 	lcall	__gptrget
      0017E9 FA               [12] 4167 	mov	r2,a
      0017EA A3               [24] 4168 	inc	dptr
      0017EB 12r00r00         [24] 4169 	lcall	__gptrget
      0017EE FB               [12] 4170 	mov	r3,a
      0017EF A3               [24] 4171 	inc	dptr
      0017F0 12r00r00         [24] 4172 	lcall	__gptrget
      0017F3 FC               [12] 4173 	mov	r4,a
      0017F4 E5*00            [12] 4174 	mov	a,_bp
      0017F6 24 1E            [12] 4175 	add	a,#0x1e
      0017F8 F8               [12] 4176 	mov	r0,a
      0017F9 E6               [12] 4177 	mov	a,@r0
      0017FA C0 E0            [24] 4178 	push	acc
      0017FC 08               [12] 4179 	inc	r0
      0017FD E6               [12] 4180 	mov	a,@r0
      0017FE C0 E0            [24] 4181 	push	acc
      001800 08               [12] 4182 	inc	r0
      001801 E6               [12] 4183 	mov	a,@r0
      001802 C0 E0            [24] 4184 	push	acc
      001804 08               [12] 4185 	inc	r0
      001805 E6               [12] 4186 	mov	a,@r0
      001806 C0 E0            [24] 4187 	push	acc
      001808 8A 82            [24] 4188 	mov	dpl,r2
      00180A 8B 83            [24] 4189 	mov	dph,r3
      00180C 8C F0            [24] 4190 	mov	b,r4
      00180E 12r00r00         [24] 4191 	lcall	_stack_push
      001811 E5 81            [12] 4192 	mov	a,sp
      001813 24 FC            [12] 4193 	add	a,#0xfc
      001815 F5 81            [12] 4194 	mov	sp,a
                                   4195 ;	calc.c:212: break;
      001817 02r24r0E         [24] 4196 	ljmp	00249$
                                   4197 ;	calc.c:214: case '#':
      00181A                       4198 00189$:
                                   4199 ;	calc.c:215: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      00181A C0 05            [24] 4200 	push	ar5
      00181C C0 06            [24] 4201 	push	ar6
      00181E C0 07            [24] 4202 	push	ar7
      001820 E5*00            [12] 4203 	mov	a,_bp
      001822 24 1A            [12] 4204 	add	a,#0x1a
      001824 FC               [12] 4205 	mov	r4,a
      001825 7B 00            [12] 4206 	mov	r3,#0x00
      001827 7A 40            [12] 4207 	mov	r2,#0x40
      001829 E5*00            [12] 4208 	mov	a,_bp
      00182B 24 17            [12] 4209 	add	a,#0x17
      00182D F8               [12] 4210 	mov	r0,a
      00182E E5*00            [12] 4211 	mov	a,_bp
      001830 24 13            [12] 4212 	add	a,#0x13
      001832 F9               [12] 4213 	mov	r1,a
      001833 74 11            [12] 4214 	mov	a,#0x11
      001835 26               [12] 4215 	add	a,@r0
      001836 F7               [12] 4216 	mov	@r1,a
      001837 74 40            [12] 4217 	mov	a,#0x40
      001839 08               [12] 4218 	inc	r0
      00183A 36               [12] 4219 	addc	a,@r0
      00183B 09               [12] 4220 	inc	r1
      00183C F7               [12] 4221 	mov	@r1,a
      00183D 08               [12] 4222 	inc	r0
      00183E 09               [12] 4223 	inc	r1
      00183F E6               [12] 4224 	mov	a,@r0
      001840 F7               [12] 4225 	mov	@r1,a
      001841 E5*00            [12] 4226 	mov	a,_bp
      001843 24 13            [12] 4227 	add	a,#0x13
      001845 F8               [12] 4228 	mov	r0,a
      001846 86 82            [24] 4229 	mov	dpl,@r0
      001848 08               [12] 4230 	inc	r0
      001849 86 83            [24] 4231 	mov	dph,@r0
      00184B 08               [12] 4232 	inc	r0
      00184C 86 F0            [24] 4233 	mov	b,@r0
      00184E 12r00r00         [24] 4234 	lcall	__gptrget
      001851 FD               [12] 4235 	mov	r5,a
      001852 A3               [24] 4236 	inc	dptr
      001853 12r00r00         [24] 4237 	lcall	__gptrget
      001856 FE               [12] 4238 	mov	r6,a
      001857 A3               [24] 4239 	inc	dptr
      001858 12r00r00         [24] 4240 	lcall	__gptrget
      00185B FF               [12] 4241 	mov	r7,a
      00185C C0 05            [24] 4242 	push	ar5
      00185E C0 04            [24] 4243 	push	ar4
      001860 C0 03            [24] 4244 	push	ar3
      001862 C0 02            [24] 4245 	push	ar2
      001864 8D 82            [24] 4246 	mov	dpl,r5
      001866 8E 83            [24] 4247 	mov	dph,r6
      001868 8F F0            [24] 4248 	mov	b,r7
      00186A 12r00r00         [24] 4249 	lcall	_stack_pop
      00186D AE 82            [24] 4250 	mov	r6,dpl
      00186F AF 83            [24] 4251 	mov	r7,dph
      001871 15 81            [12] 4252 	dec	sp
      001873 15 81            [12] 4253 	dec	sp
      001875 15 81            [12] 4254 	dec	sp
      001877 D0 05            [24] 4255 	pop	ar5
      001879 EE               [12] 4256 	mov	a,r6
      00187A 4F               [12] 4257 	orl	a,r7
      00187B D0 07            [24] 4258 	pop	ar7
      00187D D0 06            [24] 4259 	pop	ar6
      00187F D0 05            [24] 4260 	pop	ar5
      001881 70 0C            [24] 4261 	jnz	00200$
      001883 90r00r4E         [24] 4262 	mov	dptr,#___str_10
      001886 75 F0 80         [24] 4263 	mov	b,#0x80
      001889 12r00r00         [24] 4264 	lcall	_printstr
      00188C 02r24r0E         [24] 4265 	ljmp	00249$
      00188F                       4266 00200$:
                                   4267 ;	calc.c:216: else if (!stack_pop(ctx->ps, &d1)) {
      00188F C0 05            [24] 4268 	push	ar5
      001891 C0 06            [24] 4269 	push	ar6
      001893 C0 07            [24] 4270 	push	ar7
      001895 E5*00            [12] 4271 	mov	a,_bp
      001897 24 1E            [12] 4272 	add	a,#0x1e
      001899 FC               [12] 4273 	mov	r4,a
      00189A 7B 00            [12] 4274 	mov	r3,#0x00
      00189C 7A 40            [12] 4275 	mov	r2,#0x40
      00189E E5*00            [12] 4276 	mov	a,_bp
      0018A0 24 13            [12] 4277 	add	a,#0x13
      0018A2 F8               [12] 4278 	mov	r0,a
      0018A3 86 82            [24] 4279 	mov	dpl,@r0
      0018A5 08               [12] 4280 	inc	r0
      0018A6 86 83            [24] 4281 	mov	dph,@r0
      0018A8 08               [12] 4282 	inc	r0
      0018A9 86 F0            [24] 4283 	mov	b,@r0
      0018AB 12r00r00         [24] 4284 	lcall	__gptrget
      0018AE FD               [12] 4285 	mov	r5,a
      0018AF A3               [24] 4286 	inc	dptr
      0018B0 12r00r00         [24] 4287 	lcall	__gptrget
      0018B3 FE               [12] 4288 	mov	r6,a
      0018B4 A3               [24] 4289 	inc	dptr
      0018B5 12r00r00         [24] 4290 	lcall	__gptrget
      0018B8 FF               [12] 4291 	mov	r7,a
      0018B9 C0 05            [24] 4292 	push	ar5
      0018BB C0 04            [24] 4293 	push	ar4
      0018BD C0 03            [24] 4294 	push	ar3
      0018BF C0 02            [24] 4295 	push	ar2
      0018C1 8D 82            [24] 4296 	mov	dpl,r5
      0018C3 8E 83            [24] 4297 	mov	dph,r6
      0018C5 8F F0            [24] 4298 	mov	b,r7
      0018C7 12r00r00         [24] 4299 	lcall	_stack_pop
      0018CA AE 82            [24] 4300 	mov	r6,dpl
      0018CC AF 83            [24] 4301 	mov	r7,dph
      0018CE 15 81            [12] 4302 	dec	sp
      0018D0 15 81            [12] 4303 	dec	sp
      0018D2 15 81            [12] 4304 	dec	sp
      0018D4 D0 05            [24] 4305 	pop	ar5
      0018D6 EE               [12] 4306 	mov	a,r6
      0018D7 4F               [12] 4307 	orl	a,r7
      0018D8 D0 07            [24] 4308 	pop	ar7
      0018DA D0 06            [24] 4309 	pop	ar6
      0018DC D0 05            [24] 4310 	pop	ar5
      0018DE 70 4A            [24] 4311 	jnz	00197$
                                   4312 ;	calc.c:217: (void)stack_push(ctx->ps, d0);
      0018E0 E5*00            [12] 4313 	mov	a,_bp
      0018E2 24 13            [12] 4314 	add	a,#0x13
      0018E4 F8               [12] 4315 	mov	r0,a
      0018E5 86 82            [24] 4316 	mov	dpl,@r0
      0018E7 08               [12] 4317 	inc	r0
      0018E8 86 83            [24] 4318 	mov	dph,@r0
      0018EA 08               [12] 4319 	inc	r0
      0018EB 86 F0            [24] 4320 	mov	b,@r0
      0018ED 12r00r00         [24] 4321 	lcall	__gptrget
      0018F0 FA               [12] 4322 	mov	r2,a
      0018F1 A3               [24] 4323 	inc	dptr
      0018F2 12r00r00         [24] 4324 	lcall	__gptrget
      0018F5 FB               [12] 4325 	mov	r3,a
      0018F6 A3               [24] 4326 	inc	dptr
      0018F7 12r00r00         [24] 4327 	lcall	__gptrget
      0018FA FC               [12] 4328 	mov	r4,a
      0018FB E5*00            [12] 4329 	mov	a,_bp
      0018FD 24 1A            [12] 4330 	add	a,#0x1a
      0018FF F8               [12] 4331 	mov	r0,a
      001900 E6               [12] 4332 	mov	a,@r0
      001901 C0 E0            [24] 4333 	push	acc
      001903 08               [12] 4334 	inc	r0
      001904 E6               [12] 4335 	mov	a,@r0
      001905 C0 E0            [24] 4336 	push	acc
      001907 08               [12] 4337 	inc	r0
      001908 E6               [12] 4338 	mov	a,@r0
      001909 C0 E0            [24] 4339 	push	acc
      00190B 08               [12] 4340 	inc	r0
      00190C E6               [12] 4341 	mov	a,@r0
      00190D C0 E0            [24] 4342 	push	acc
      00190F 8A 82            [24] 4343 	mov	dpl,r2
      001911 8B 83            [24] 4344 	mov	dph,r3
      001913 8C F0            [24] 4345 	mov	b,r4
      001915 12r00r00         [24] 4346 	lcall	_stack_push
      001918 E5 81            [12] 4347 	mov	a,sp
      00191A 24 FC            [12] 4348 	add	a,#0xfc
      00191C F5 81            [12] 4349 	mov	sp,a
                                   4350 ;	calc.c:218: printstr("\r\nstack underflow\r\n");
      00191E 90r00r4E         [24] 4351 	mov	dptr,#___str_10
      001921 75 F0 80         [24] 4352 	mov	b,#0x80
      001924 12r00r00         [24] 4353 	lcall	_printstr
      001927 02r24r0E         [24] 4354 	ljmp	00249$
      00192A                       4355 00197$:
                                   4356 ;	calc.c:219: } else if (!d0) {
      00192A E5*00            [12] 4357 	mov	a,_bp
      00192C 24 1A            [12] 4358 	add	a,#0x1a
      00192E F8               [12] 4359 	mov	r0,a
      00192F E6               [12] 4360 	mov	a,@r0
      001930 08               [12] 4361 	inc	r0
      001931 46               [12] 4362 	orl	a,@r0
      001932 08               [12] 4363 	inc	r0
      001933 46               [12] 4364 	orl	a,@r0
      001934 08               [12] 4365 	inc	r0
      001935 46               [12] 4366 	orl	a,@r0
      001936 60 03            [24] 4367 	jz	00580$
      001938 02r19rC3         [24] 4368 	ljmp	00194$
      00193B                       4369 00580$:
                                   4370 ;	calc.c:220: (void)stack_push(ctx->ps, d1);
      00193B E5*00            [12] 4371 	mov	a,_bp
      00193D 24 13            [12] 4372 	add	a,#0x13
      00193F F8               [12] 4373 	mov	r0,a
      001940 86 82            [24] 4374 	mov	dpl,@r0
      001942 08               [12] 4375 	inc	r0
      001943 86 83            [24] 4376 	mov	dph,@r0
      001945 08               [12] 4377 	inc	r0
      001946 86 F0            [24] 4378 	mov	b,@r0
      001948 12r00r00         [24] 4379 	lcall	__gptrget
      00194B FA               [12] 4380 	mov	r2,a
      00194C A3               [24] 4381 	inc	dptr
      00194D 12r00r00         [24] 4382 	lcall	__gptrget
      001950 FB               [12] 4383 	mov	r3,a
      001951 A3               [24] 4384 	inc	dptr
      001952 12r00r00         [24] 4385 	lcall	__gptrget
      001955 FC               [12] 4386 	mov	r4,a
      001956 E5*00            [12] 4387 	mov	a,_bp
      001958 24 1E            [12] 4388 	add	a,#0x1e
      00195A F8               [12] 4389 	mov	r0,a
      00195B E6               [12] 4390 	mov	a,@r0
      00195C C0 E0            [24] 4391 	push	acc
      00195E 08               [12] 4392 	inc	r0
      00195F E6               [12] 4393 	mov	a,@r0
      001960 C0 E0            [24] 4394 	push	acc
      001962 08               [12] 4395 	inc	r0
      001963 E6               [12] 4396 	mov	a,@r0
      001964 C0 E0            [24] 4397 	push	acc
      001966 08               [12] 4398 	inc	r0
      001967 E6               [12] 4399 	mov	a,@r0
      001968 C0 E0            [24] 4400 	push	acc
      00196A 8A 82            [24] 4401 	mov	dpl,r2
      00196C 8B 83            [24] 4402 	mov	dph,r3
      00196E 8C F0            [24] 4403 	mov	b,r4
      001970 12r00r00         [24] 4404 	lcall	_stack_push
      001973 E5 81            [12] 4405 	mov	a,sp
      001975 24 FC            [12] 4406 	add	a,#0xfc
      001977 F5 81            [12] 4407 	mov	sp,a
                                   4408 ;	calc.c:221: (void)stack_push(ctx->ps, d0);			
      001979 E5*00            [12] 4409 	mov	a,_bp
      00197B 24 13            [12] 4410 	add	a,#0x13
      00197D F8               [12] 4411 	mov	r0,a
      00197E 86 82            [24] 4412 	mov	dpl,@r0
      001980 08               [12] 4413 	inc	r0
      001981 86 83            [24] 4414 	mov	dph,@r0
      001983 08               [12] 4415 	inc	r0
      001984 86 F0            [24] 4416 	mov	b,@r0
      001986 12r00r00         [24] 4417 	lcall	__gptrget
      001989 FA               [12] 4418 	mov	r2,a
      00198A A3               [24] 4419 	inc	dptr
      00198B 12r00r00         [24] 4420 	lcall	__gptrget
      00198E FB               [12] 4421 	mov	r3,a
      00198F A3               [24] 4422 	inc	dptr
      001990 12r00r00         [24] 4423 	lcall	__gptrget
      001993 FC               [12] 4424 	mov	r4,a
      001994 E5*00            [12] 4425 	mov	a,_bp
      001996 24 1A            [12] 4426 	add	a,#0x1a
      001998 F8               [12] 4427 	mov	r0,a
      001999 E6               [12] 4428 	mov	a,@r0
      00199A C0 E0            [24] 4429 	push	acc
      00199C 08               [12] 4430 	inc	r0
      00199D E6               [12] 4431 	mov	a,@r0
      00199E C0 E0            [24] 4432 	push	acc
      0019A0 08               [12] 4433 	inc	r0
      0019A1 E6               [12] 4434 	mov	a,@r0
      0019A2 C0 E0            [24] 4435 	push	acc
      0019A4 08               [12] 4436 	inc	r0
      0019A5 E6               [12] 4437 	mov	a,@r0
      0019A6 C0 E0            [24] 4438 	push	acc
      0019A8 8A 82            [24] 4439 	mov	dpl,r2
      0019AA 8B 83            [24] 4440 	mov	dph,r3
      0019AC 8C F0            [24] 4441 	mov	b,r4
      0019AE 12r00r00         [24] 4442 	lcall	_stack_push
      0019B1 E5 81            [12] 4443 	mov	a,sp
      0019B3 24 FC            [12] 4444 	add	a,#0xfc
      0019B5 F5 81            [12] 4445 	mov	sp,a
                                   4446 ;	calc.c:222: printstr("\r\ndivision by zero\r\n");
      0019B7 90r00rB0         [24] 4447 	mov	dptr,#___str_14
      0019BA 75 F0 80         [24] 4448 	mov	b,#0x80
      0019BD 12r00r00         [24] 4449 	lcall	_printstr
      0019C0 02r24r0E         [24] 4450 	ljmp	00249$
      0019C3                       4451 00194$:
                                   4452 ;	calc.c:224: if (ctx->digit[0] == '%') d1 %= d0;
      0019C3 8D 82            [24] 4453 	mov	dpl,r5
      0019C5 8E 83            [24] 4454 	mov	dph,r6
      0019C7 8F F0            [24] 4455 	mov	b,r7
      0019C9 12r00r00         [24] 4456 	lcall	__gptrget
      0019CC FD               [12] 4457 	mov	r5,a
      0019CD BD 25 45         [24] 4458 	cjne	r5,#0x25,00191$
      0019D0 E5*00            [12] 4459 	mov	a,_bp
      0019D2 24 1A            [12] 4460 	add	a,#0x1a
      0019D4 F8               [12] 4461 	mov	r0,a
      0019D5 E6               [12] 4462 	mov	a,@r0
      0019D6 C0 E0            [24] 4463 	push	acc
      0019D8 08               [12] 4464 	inc	r0
      0019D9 E6               [12] 4465 	mov	a,@r0
      0019DA C0 E0            [24] 4466 	push	acc
      0019DC 08               [12] 4467 	inc	r0
      0019DD E6               [12] 4468 	mov	a,@r0
      0019DE C0 E0            [24] 4469 	push	acc
      0019E0 08               [12] 4470 	inc	r0
      0019E1 E6               [12] 4471 	mov	a,@r0
      0019E2 C0 E0            [24] 4472 	push	acc
      0019E4 E5*00            [12] 4473 	mov	a,_bp
      0019E6 24 1E            [12] 4474 	add	a,#0x1e
      0019E8 F8               [12] 4475 	mov	r0,a
      0019E9 86 82            [24] 4476 	mov	dpl,@r0
      0019EB 08               [12] 4477 	inc	r0
      0019EC 86 83            [24] 4478 	mov	dph,@r0
      0019EE 08               [12] 4479 	inc	r0
      0019EF 86 F0            [24] 4480 	mov	b,@r0
      0019F1 08               [12] 4481 	inc	r0
      0019F2 E6               [12] 4482 	mov	a,@r0
      0019F3 12r00r00         [24] 4483 	lcall	__modslong
      0019F6 AC 82            [24] 4484 	mov	r4,dpl
      0019F8 AD 83            [24] 4485 	mov	r5,dph
      0019FA AE F0            [24] 4486 	mov	r6,b
      0019FC FF               [12] 4487 	mov	r7,a
      0019FD E5 81            [12] 4488 	mov	a,sp
      0019FF 24 FC            [12] 4489 	add	a,#0xfc
      001A01 F5 81            [12] 4490 	mov	sp,a
      001A03 E5*00            [12] 4491 	mov	a,_bp
      001A05 24 1E            [12] 4492 	add	a,#0x1e
      001A07 F8               [12] 4493 	mov	r0,a
      001A08 A6 04            [24] 4494 	mov	@r0,ar4
      001A0A 08               [12] 4495 	inc	r0
      001A0B A6 05            [24] 4496 	mov	@r0,ar5
      001A0D 08               [12] 4497 	inc	r0
      001A0E A6 06            [24] 4498 	mov	@r0,ar6
      001A10 08               [12] 4499 	inc	r0
      001A11 A6 07            [24] 4500 	mov	@r0,ar7
      001A13 80 5F            [24] 4501 	sjmp	00192$
      001A15                       4502 00191$:
                                   4503 ;	calc.c:225: else d1 = (unsigned long)d1 % (unsigned long)d0;
      001A15 E5*00            [12] 4504 	mov	a,_bp
      001A17 24 1E            [12] 4505 	add	a,#0x1e
      001A19 F8               [12] 4506 	mov	r0,a
      001A1A E5*00            [12] 4507 	mov	a,_bp
      001A1C 24 0F            [12] 4508 	add	a,#0x0f
      001A1E F9               [12] 4509 	mov	r1,a
      001A1F E6               [12] 4510 	mov	a,@r0
      001A20 F7               [12] 4511 	mov	@r1,a
      001A21 08               [12] 4512 	inc	r0
      001A22 09               [12] 4513 	inc	r1
      001A23 E6               [12] 4514 	mov	a,@r0
      001A24 F7               [12] 4515 	mov	@r1,a
      001A25 08               [12] 4516 	inc	r0
      001A26 09               [12] 4517 	inc	r1
      001A27 E6               [12] 4518 	mov	a,@r0
      001A28 F7               [12] 4519 	mov	@r1,a
      001A29 08               [12] 4520 	inc	r0
      001A2A 09               [12] 4521 	inc	r1
      001A2B E6               [12] 4522 	mov	a,@r0
      001A2C F7               [12] 4523 	mov	@r1,a
      001A2D E5*00            [12] 4524 	mov	a,_bp
      001A2F 24 1A            [12] 4525 	add	a,#0x1a
      001A31 F8               [12] 4526 	mov	r0,a
      001A32 86 02            [24] 4527 	mov	ar2,@r0
      001A34 08               [12] 4528 	inc	r0
      001A35 86 03            [24] 4529 	mov	ar3,@r0
      001A37 08               [12] 4530 	inc	r0
      001A38 86 06            [24] 4531 	mov	ar6,@r0
      001A3A 08               [12] 4532 	inc	r0
      001A3B 86 07            [24] 4533 	mov	ar7,@r0
      001A3D C0 02            [24] 4534 	push	ar2
      001A3F C0 03            [24] 4535 	push	ar3
      001A41 C0 06            [24] 4536 	push	ar6
      001A43 C0 07            [24] 4537 	push	ar7
      001A45 E5*00            [12] 4538 	mov	a,_bp
      001A47 24 0F            [12] 4539 	add	a,#0x0f
      001A49 F8               [12] 4540 	mov	r0,a
      001A4A 86 82            [24] 4541 	mov	dpl,@r0
      001A4C 08               [12] 4542 	inc	r0
      001A4D 86 83            [24] 4543 	mov	dph,@r0
      001A4F 08               [12] 4544 	inc	r0
      001A50 86 F0            [24] 4545 	mov	b,@r0
      001A52 08               [12] 4546 	inc	r0
      001A53 E6               [12] 4547 	mov	a,@r0
      001A54 12r00r00         [24] 4548 	lcall	__modulong
      001A57 AC 82            [24] 4549 	mov	r4,dpl
      001A59 AD 83            [24] 4550 	mov	r5,dph
      001A5B AE F0            [24] 4551 	mov	r6,b
      001A5D FF               [12] 4552 	mov	r7,a
      001A5E E5 81            [12] 4553 	mov	a,sp
      001A60 24 FC            [12] 4554 	add	a,#0xfc
      001A62 F5 81            [12] 4555 	mov	sp,a
      001A64 E5*00            [12] 4556 	mov	a,_bp
      001A66 24 1E            [12] 4557 	add	a,#0x1e
      001A68 F8               [12] 4558 	mov	r0,a
      001A69 A6 04            [24] 4559 	mov	@r0,ar4
      001A6B 08               [12] 4560 	inc	r0
      001A6C A6 05            [24] 4561 	mov	@r0,ar5
      001A6E 08               [12] 4562 	inc	r0
      001A6F A6 06            [24] 4563 	mov	@r0,ar6
      001A71 08               [12] 4564 	inc	r0
      001A72 A6 07            [24] 4565 	mov	@r0,ar7
      001A74                       4566 00192$:
                                   4567 ;	calc.c:226: (void)stack_push(ctx->ps, d1);
      001A74 E5*00            [12] 4568 	mov	a,_bp
      001A76 24 13            [12] 4569 	add	a,#0x13
      001A78 F8               [12] 4570 	mov	r0,a
      001A79 86 82            [24] 4571 	mov	dpl,@r0
      001A7B 08               [12] 4572 	inc	r0
      001A7C 86 83            [24] 4573 	mov	dph,@r0
      001A7E 08               [12] 4574 	inc	r0
      001A7F 86 F0            [24] 4575 	mov	b,@r0
      001A81 12r00r00         [24] 4576 	lcall	__gptrget
      001A84 FD               [12] 4577 	mov	r5,a
      001A85 A3               [24] 4578 	inc	dptr
      001A86 12r00r00         [24] 4579 	lcall	__gptrget
      001A89 FE               [12] 4580 	mov	r6,a
      001A8A A3               [24] 4581 	inc	dptr
      001A8B 12r00r00         [24] 4582 	lcall	__gptrget
      001A8E FF               [12] 4583 	mov	r7,a
      001A8F E5*00            [12] 4584 	mov	a,_bp
      001A91 24 1E            [12] 4585 	add	a,#0x1e
      001A93 F8               [12] 4586 	mov	r0,a
      001A94 E6               [12] 4587 	mov	a,@r0
      001A95 C0 E0            [24] 4588 	push	acc
      001A97 08               [12] 4589 	inc	r0
      001A98 E6               [12] 4590 	mov	a,@r0
      001A99 C0 E0            [24] 4591 	push	acc
      001A9B 08               [12] 4592 	inc	r0
      001A9C E6               [12] 4593 	mov	a,@r0
      001A9D C0 E0            [24] 4594 	push	acc
      001A9F 08               [12] 4595 	inc	r0
      001AA0 E6               [12] 4596 	mov	a,@r0
      001AA1 C0 E0            [24] 4597 	push	acc
      001AA3 8D 82            [24] 4598 	mov	dpl,r5
      001AA5 8E 83            [24] 4599 	mov	dph,r6
      001AA7 8F F0            [24] 4600 	mov	b,r7
      001AA9 12r00r00         [24] 4601 	lcall	_stack_push
      001AAC E5 81            [12] 4602 	mov	a,sp
      001AAE 24 FC            [12] 4603 	add	a,#0xfc
      001AB0 F5 81            [12] 4604 	mov	sp,a
                                   4605 ;	calc.c:228: break;
      001AB2 02r24r0E         [24] 4606 	ljmp	00249$
                                   4607 ;	calc.c:229: case '&':
      001AB5                       4608 00202$:
                                   4609 ;	calc.c:230: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      001AB5 E5*00            [12] 4610 	mov	a,_bp
      001AB7 24 1A            [12] 4611 	add	a,#0x1a
      001AB9 FF               [12] 4612 	mov	r7,a
      001ABA E5*00            [12] 4613 	mov	a,_bp
      001ABC 24 13            [12] 4614 	add	a,#0x13
      001ABE F8               [12] 4615 	mov	r0,a
      001ABF A6 07            [24] 4616 	mov	@r0,ar7
      001AC1 08               [12] 4617 	inc	r0
      001AC2 76 00            [12] 4618 	mov	@r0,#0x00
      001AC4 08               [12] 4619 	inc	r0
      001AC5 76 40            [12] 4620 	mov	@r0,#0x40
      001AC7 E5*00            [12] 4621 	mov	a,_bp
      001AC9 24 17            [12] 4622 	add	a,#0x17
      001ACB F8               [12] 4623 	mov	r0,a
      001ACC 74 11            [12] 4624 	mov	a,#0x11
      001ACE 26               [12] 4625 	add	a,@r0
      001ACF FA               [12] 4626 	mov	r2,a
      001AD0 74 40            [12] 4627 	mov	a,#0x40
      001AD2 08               [12] 4628 	inc	r0
      001AD3 36               [12] 4629 	addc	a,@r0
      001AD4 FB               [12] 4630 	mov	r3,a
      001AD5 08               [12] 4631 	inc	r0
      001AD6 86 04            [24] 4632 	mov	ar4,@r0
      001AD8 8A 82            [24] 4633 	mov	dpl,r2
      001ADA 8B 83            [24] 4634 	mov	dph,r3
      001ADC 8C F0            [24] 4635 	mov	b,r4
      001ADE 12r00r00         [24] 4636 	lcall	__gptrget
      001AE1 FD               [12] 4637 	mov	r5,a
      001AE2 A3               [24] 4638 	inc	dptr
      001AE3 12r00r00         [24] 4639 	lcall	__gptrget
      001AE6 FE               [12] 4640 	mov	r6,a
      001AE7 A3               [24] 4641 	inc	dptr
      001AE8 12r00r00         [24] 4642 	lcall	__gptrget
      001AEB FF               [12] 4643 	mov	r7,a
      001AEC C0 04            [24] 4644 	push	ar4
      001AEE C0 03            [24] 4645 	push	ar3
      001AF0 C0 02            [24] 4646 	push	ar2
      001AF2 E5*00            [12] 4647 	mov	a,_bp
      001AF4 24 13            [12] 4648 	add	a,#0x13
      001AF6 F8               [12] 4649 	mov	r0,a
      001AF7 E6               [12] 4650 	mov	a,@r0
      001AF8 C0 E0            [24] 4651 	push	acc
      001AFA 08               [12] 4652 	inc	r0
      001AFB E6               [12] 4653 	mov	a,@r0
      001AFC C0 E0            [24] 4654 	push	acc
      001AFE 08               [12] 4655 	inc	r0
      001AFF E6               [12] 4656 	mov	a,@r0
      001B00 C0 E0            [24] 4657 	push	acc
      001B02 8D 82            [24] 4658 	mov	dpl,r5
      001B04 8E 83            [24] 4659 	mov	dph,r6
      001B06 8F F0            [24] 4660 	mov	b,r7
      001B08 12r00r00         [24] 4661 	lcall	_stack_pop
      001B0B AE 82            [24] 4662 	mov	r6,dpl
      001B0D AF 83            [24] 4663 	mov	r7,dph
      001B0F 15 81            [12] 4664 	dec	sp
      001B11 15 81            [12] 4665 	dec	sp
      001B13 15 81            [12] 4666 	dec	sp
      001B15 D0 02            [24] 4667 	pop	ar2
      001B17 D0 03            [24] 4668 	pop	ar3
      001B19 D0 04            [24] 4669 	pop	ar4
      001B1B EE               [12] 4670 	mov	a,r6
      001B1C 4F               [12] 4671 	orl	a,r7
      001B1D 70 0C            [24] 4672 	jnz	00207$
      001B1F 90r00r4E         [24] 4673 	mov	dptr,#___str_10
      001B22 75 F0 80         [24] 4674 	mov	b,#0x80
      001B25 12r00r00         [24] 4675 	lcall	_printstr
      001B28 02r24r0E         [24] 4676 	ljmp	00249$
      001B2B                       4677 00207$:
                                   4678 ;	calc.c:231: else if (!stack_pop(ctx->ps, &d1)) {
      001B2B E5*00            [12] 4679 	mov	a,_bp
      001B2D 24 1E            [12] 4680 	add	a,#0x1e
      001B2F FF               [12] 4681 	mov	r7,a
      001B30 E5*00            [12] 4682 	mov	a,_bp
      001B32 24 13            [12] 4683 	add	a,#0x13
      001B34 F8               [12] 4684 	mov	r0,a
      001B35 A6 07            [24] 4685 	mov	@r0,ar7
      001B37 08               [12] 4686 	inc	r0
      001B38 76 00            [12] 4687 	mov	@r0,#0x00
      001B3A 08               [12] 4688 	inc	r0
      001B3B 76 40            [12] 4689 	mov	@r0,#0x40
      001B3D 8A 82            [24] 4690 	mov	dpl,r2
      001B3F 8B 83            [24] 4691 	mov	dph,r3
      001B41 8C F0            [24] 4692 	mov	b,r4
      001B43 12r00r00         [24] 4693 	lcall	__gptrget
      001B46 FD               [12] 4694 	mov	r5,a
      001B47 A3               [24] 4695 	inc	dptr
      001B48 12r00r00         [24] 4696 	lcall	__gptrget
      001B4B FE               [12] 4697 	mov	r6,a
      001B4C A3               [24] 4698 	inc	dptr
      001B4D 12r00r00         [24] 4699 	lcall	__gptrget
      001B50 FF               [12] 4700 	mov	r7,a
      001B51 C0 04            [24] 4701 	push	ar4
      001B53 C0 03            [24] 4702 	push	ar3
      001B55 C0 02            [24] 4703 	push	ar2
      001B57 E5*00            [12] 4704 	mov	a,_bp
      001B59 24 13            [12] 4705 	add	a,#0x13
      001B5B F8               [12] 4706 	mov	r0,a
      001B5C E6               [12] 4707 	mov	a,@r0
      001B5D C0 E0            [24] 4708 	push	acc
      001B5F 08               [12] 4709 	inc	r0
      001B60 E6               [12] 4710 	mov	a,@r0
      001B61 C0 E0            [24] 4711 	push	acc
      001B63 08               [12] 4712 	inc	r0
      001B64 E6               [12] 4713 	mov	a,@r0
      001B65 C0 E0            [24] 4714 	push	acc
      001B67 8D 82            [24] 4715 	mov	dpl,r5
      001B69 8E 83            [24] 4716 	mov	dph,r6
      001B6B 8F F0            [24] 4717 	mov	b,r7
      001B6D 12r00r00         [24] 4718 	lcall	_stack_pop
      001B70 AE 82            [24] 4719 	mov	r6,dpl
      001B72 AF 83            [24] 4720 	mov	r7,dph
      001B74 15 81            [12] 4721 	dec	sp
      001B76 15 81            [12] 4722 	dec	sp
      001B78 15 81            [12] 4723 	dec	sp
      001B7A D0 02            [24] 4724 	pop	ar2
      001B7C D0 03            [24] 4725 	pop	ar3
      001B7E D0 04            [24] 4726 	pop	ar4
      001B80 EE               [12] 4727 	mov	a,r6
      001B81 4F               [12] 4728 	orl	a,r7
      001B82 70 43            [24] 4729 	jnz	00204$
                                   4730 ;	calc.c:232: (void)stack_push(ctx->ps, d0);
      001B84 8A 82            [24] 4731 	mov	dpl,r2
      001B86 8B 83            [24] 4732 	mov	dph,r3
      001B88 8C F0            [24] 4733 	mov	b,r4
      001B8A 12r00r00         [24] 4734 	lcall	__gptrget
      001B8D FD               [12] 4735 	mov	r5,a
      001B8E A3               [24] 4736 	inc	dptr
      001B8F 12r00r00         [24] 4737 	lcall	__gptrget
      001B92 FE               [12] 4738 	mov	r6,a
      001B93 A3               [24] 4739 	inc	dptr
      001B94 12r00r00         [24] 4740 	lcall	__gptrget
      001B97 FF               [12] 4741 	mov	r7,a
      001B98 E5*00            [12] 4742 	mov	a,_bp
      001B9A 24 1A            [12] 4743 	add	a,#0x1a
      001B9C F8               [12] 4744 	mov	r0,a
      001B9D E6               [12] 4745 	mov	a,@r0
      001B9E C0 E0            [24] 4746 	push	acc
      001BA0 08               [12] 4747 	inc	r0
      001BA1 E6               [12] 4748 	mov	a,@r0
      001BA2 C0 E0            [24] 4749 	push	acc
      001BA4 08               [12] 4750 	inc	r0
      001BA5 E6               [12] 4751 	mov	a,@r0
      001BA6 C0 E0            [24] 4752 	push	acc
      001BA8 08               [12] 4753 	inc	r0
      001BA9 E6               [12] 4754 	mov	a,@r0
      001BAA C0 E0            [24] 4755 	push	acc
      001BAC 8D 82            [24] 4756 	mov	dpl,r5
      001BAE 8E 83            [24] 4757 	mov	dph,r6
      001BB0 8F F0            [24] 4758 	mov	b,r7
      001BB2 12r00r00         [24] 4759 	lcall	_stack_push
      001BB5 E5 81            [12] 4760 	mov	a,sp
      001BB7 24 FC            [12] 4761 	add	a,#0xfc
      001BB9 F5 81            [12] 4762 	mov	sp,a
                                   4763 ;	calc.c:233: printstr("\r\nstack underflow\r\n");
      001BBB 90r00r4E         [24] 4764 	mov	dptr,#___str_10
      001BBE 75 F0 80         [24] 4765 	mov	b,#0x80
      001BC1 12r00r00         [24] 4766 	lcall	_printstr
      001BC4 02r24r0E         [24] 4767 	ljmp	00249$
      001BC7                       4768 00204$:
                                   4769 ;	calc.c:235: d1 &= d0;
      001BC7 E5*00            [12] 4770 	mov	a,_bp
      001BC9 24 1E            [12] 4771 	add	a,#0x1e
      001BCB F8               [12] 4772 	mov	r0,a
      001BCC E5*00            [12] 4773 	mov	a,_bp
      001BCE 24 1A            [12] 4774 	add	a,#0x1a
      001BD0 F9               [12] 4775 	mov	r1,a
      001BD1 E7               [12] 4776 	mov	a,@r1
      001BD2 56               [12] 4777 	anl	a,@r0
      001BD3 F6               [12] 4778 	mov	@r0,a
      001BD4 09               [12] 4779 	inc	r1
      001BD5 E7               [12] 4780 	mov	a,@r1
      001BD6 08               [12] 4781 	inc	r0
      001BD7 56               [12] 4782 	anl	a,@r0
      001BD8 F6               [12] 4783 	mov	@r0,a
      001BD9 09               [12] 4784 	inc	r1
      001BDA E7               [12] 4785 	mov	a,@r1
      001BDB 08               [12] 4786 	inc	r0
      001BDC 56               [12] 4787 	anl	a,@r0
      001BDD F6               [12] 4788 	mov	@r0,a
      001BDE 09               [12] 4789 	inc	r1
      001BDF E7               [12] 4790 	mov	a,@r1
      001BE0 08               [12] 4791 	inc	r0
      001BE1 56               [12] 4792 	anl	a,@r0
      001BE2 F6               [12] 4793 	mov	@r0,a
                                   4794 ;	calc.c:236: (void)stack_push(ctx->ps, d1);
      001BE3 8A 82            [24] 4795 	mov	dpl,r2
      001BE5 8B 83            [24] 4796 	mov	dph,r3
      001BE7 8C F0            [24] 4797 	mov	b,r4
      001BE9 12r00r00         [24] 4798 	lcall	__gptrget
      001BEC FA               [12] 4799 	mov	r2,a
      001BED A3               [24] 4800 	inc	dptr
      001BEE 12r00r00         [24] 4801 	lcall	__gptrget
      001BF1 FB               [12] 4802 	mov	r3,a
      001BF2 A3               [24] 4803 	inc	dptr
      001BF3 12r00r00         [24] 4804 	lcall	__gptrget
      001BF6 FC               [12] 4805 	mov	r4,a
      001BF7 E5*00            [12] 4806 	mov	a,_bp
      001BF9 24 1E            [12] 4807 	add	a,#0x1e
      001BFB F8               [12] 4808 	mov	r0,a
      001BFC E6               [12] 4809 	mov	a,@r0
      001BFD C0 E0            [24] 4810 	push	acc
      001BFF 08               [12] 4811 	inc	r0
      001C00 E6               [12] 4812 	mov	a,@r0
      001C01 C0 E0            [24] 4813 	push	acc
      001C03 08               [12] 4814 	inc	r0
      001C04 E6               [12] 4815 	mov	a,@r0
      001C05 C0 E0            [24] 4816 	push	acc
      001C07 08               [12] 4817 	inc	r0
      001C08 E6               [12] 4818 	mov	a,@r0
      001C09 C0 E0            [24] 4819 	push	acc
      001C0B 8A 82            [24] 4820 	mov	dpl,r2
      001C0D 8B 83            [24] 4821 	mov	dph,r3
      001C0F 8C F0            [24] 4822 	mov	b,r4
      001C11 12r00r00         [24] 4823 	lcall	_stack_push
      001C14 E5 81            [12] 4824 	mov	a,sp
      001C16 24 FC            [12] 4825 	add	a,#0xfc
      001C18 F5 81            [12] 4826 	mov	sp,a
                                   4827 ;	calc.c:238: break;
      001C1A 02r24r0E         [24] 4828 	ljmp	00249$
                                   4829 ;	calc.c:239: case '|':
      001C1D                       4830 00209$:
                                   4831 ;	calc.c:240: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      001C1D E5*00            [12] 4832 	mov	a,_bp
      001C1F 24 1A            [12] 4833 	add	a,#0x1a
      001C21 FF               [12] 4834 	mov	r7,a
      001C22 E5*00            [12] 4835 	mov	a,_bp
      001C24 24 13            [12] 4836 	add	a,#0x13
      001C26 F8               [12] 4837 	mov	r0,a
      001C27 A6 07            [24] 4838 	mov	@r0,ar7
      001C29 08               [12] 4839 	inc	r0
      001C2A 76 00            [12] 4840 	mov	@r0,#0x00
      001C2C 08               [12] 4841 	inc	r0
      001C2D 76 40            [12] 4842 	mov	@r0,#0x40
      001C2F E5*00            [12] 4843 	mov	a,_bp
      001C31 24 17            [12] 4844 	add	a,#0x17
      001C33 F8               [12] 4845 	mov	r0,a
      001C34 74 11            [12] 4846 	mov	a,#0x11
      001C36 26               [12] 4847 	add	a,@r0
      001C37 FA               [12] 4848 	mov	r2,a
      001C38 74 40            [12] 4849 	mov	a,#0x40
      001C3A 08               [12] 4850 	inc	r0
      001C3B 36               [12] 4851 	addc	a,@r0
      001C3C FB               [12] 4852 	mov	r3,a
      001C3D 08               [12] 4853 	inc	r0
      001C3E 86 04            [24] 4854 	mov	ar4,@r0
      001C40 8A 82            [24] 4855 	mov	dpl,r2
      001C42 8B 83            [24] 4856 	mov	dph,r3
      001C44 8C F0            [24] 4857 	mov	b,r4
      001C46 12r00r00         [24] 4858 	lcall	__gptrget
      001C49 FD               [12] 4859 	mov	r5,a
      001C4A A3               [24] 4860 	inc	dptr
      001C4B 12r00r00         [24] 4861 	lcall	__gptrget
      001C4E FE               [12] 4862 	mov	r6,a
      001C4F A3               [24] 4863 	inc	dptr
      001C50 12r00r00         [24] 4864 	lcall	__gptrget
      001C53 FF               [12] 4865 	mov	r7,a
      001C54 C0 04            [24] 4866 	push	ar4
      001C56 C0 03            [24] 4867 	push	ar3
      001C58 C0 02            [24] 4868 	push	ar2
      001C5A E5*00            [12] 4869 	mov	a,_bp
      001C5C 24 13            [12] 4870 	add	a,#0x13
      001C5E F8               [12] 4871 	mov	r0,a
      001C5F E6               [12] 4872 	mov	a,@r0
      001C60 C0 E0            [24] 4873 	push	acc
      001C62 08               [12] 4874 	inc	r0
      001C63 E6               [12] 4875 	mov	a,@r0
      001C64 C0 E0            [24] 4876 	push	acc
      001C66 08               [12] 4877 	inc	r0
      001C67 E6               [12] 4878 	mov	a,@r0
      001C68 C0 E0            [24] 4879 	push	acc
      001C6A 8D 82            [24] 4880 	mov	dpl,r5
      001C6C 8E 83            [24] 4881 	mov	dph,r6
      001C6E 8F F0            [24] 4882 	mov	b,r7
      001C70 12r00r00         [24] 4883 	lcall	_stack_pop
      001C73 AE 82            [24] 4884 	mov	r6,dpl
      001C75 AF 83            [24] 4885 	mov	r7,dph
      001C77 15 81            [12] 4886 	dec	sp
      001C79 15 81            [12] 4887 	dec	sp
      001C7B 15 81            [12] 4888 	dec	sp
      001C7D D0 02            [24] 4889 	pop	ar2
      001C7F D0 03            [24] 4890 	pop	ar3
      001C81 D0 04            [24] 4891 	pop	ar4
      001C83 EE               [12] 4892 	mov	a,r6
      001C84 4F               [12] 4893 	orl	a,r7
      001C85 70 0C            [24] 4894 	jnz	00214$
      001C87 90r00r4E         [24] 4895 	mov	dptr,#___str_10
      001C8A 75 F0 80         [24] 4896 	mov	b,#0x80
      001C8D 12r00r00         [24] 4897 	lcall	_printstr
      001C90 02r24r0E         [24] 4898 	ljmp	00249$
      001C93                       4899 00214$:
                                   4900 ;	calc.c:241: else if (!stack_pop(ctx->ps, &d1)) {
      001C93 E5*00            [12] 4901 	mov	a,_bp
      001C95 24 1E            [12] 4902 	add	a,#0x1e
      001C97 FF               [12] 4903 	mov	r7,a
      001C98 E5*00            [12] 4904 	mov	a,_bp
      001C9A 24 13            [12] 4905 	add	a,#0x13
      001C9C F8               [12] 4906 	mov	r0,a
      001C9D A6 07            [24] 4907 	mov	@r0,ar7
      001C9F 08               [12] 4908 	inc	r0
      001CA0 76 00            [12] 4909 	mov	@r0,#0x00
      001CA2 08               [12] 4910 	inc	r0
      001CA3 76 40            [12] 4911 	mov	@r0,#0x40
      001CA5 8A 82            [24] 4912 	mov	dpl,r2
      001CA7 8B 83            [24] 4913 	mov	dph,r3
      001CA9 8C F0            [24] 4914 	mov	b,r4
      001CAB 12r00r00         [24] 4915 	lcall	__gptrget
      001CAE FD               [12] 4916 	mov	r5,a
      001CAF A3               [24] 4917 	inc	dptr
      001CB0 12r00r00         [24] 4918 	lcall	__gptrget
      001CB3 FE               [12] 4919 	mov	r6,a
      001CB4 A3               [24] 4920 	inc	dptr
      001CB5 12r00r00         [24] 4921 	lcall	__gptrget
      001CB8 FF               [12] 4922 	mov	r7,a
      001CB9 C0 04            [24] 4923 	push	ar4
      001CBB C0 03            [24] 4924 	push	ar3
      001CBD C0 02            [24] 4925 	push	ar2
      001CBF E5*00            [12] 4926 	mov	a,_bp
      001CC1 24 13            [12] 4927 	add	a,#0x13
      001CC3 F8               [12] 4928 	mov	r0,a
      001CC4 E6               [12] 4929 	mov	a,@r0
      001CC5 C0 E0            [24] 4930 	push	acc
      001CC7 08               [12] 4931 	inc	r0
      001CC8 E6               [12] 4932 	mov	a,@r0
      001CC9 C0 E0            [24] 4933 	push	acc
      001CCB 08               [12] 4934 	inc	r0
      001CCC E6               [12] 4935 	mov	a,@r0
      001CCD C0 E0            [24] 4936 	push	acc
      001CCF 8D 82            [24] 4937 	mov	dpl,r5
      001CD1 8E 83            [24] 4938 	mov	dph,r6
      001CD3 8F F0            [24] 4939 	mov	b,r7
      001CD5 12r00r00         [24] 4940 	lcall	_stack_pop
      001CD8 AE 82            [24] 4941 	mov	r6,dpl
      001CDA AF 83            [24] 4942 	mov	r7,dph
      001CDC 15 81            [12] 4943 	dec	sp
      001CDE 15 81            [12] 4944 	dec	sp
      001CE0 15 81            [12] 4945 	dec	sp
      001CE2 D0 02            [24] 4946 	pop	ar2
      001CE4 D0 03            [24] 4947 	pop	ar3
      001CE6 D0 04            [24] 4948 	pop	ar4
      001CE8 EE               [12] 4949 	mov	a,r6
      001CE9 4F               [12] 4950 	orl	a,r7
      001CEA 70 43            [24] 4951 	jnz	00211$
                                   4952 ;	calc.c:242: (void)stack_push(ctx->ps, d0);
      001CEC 8A 82            [24] 4953 	mov	dpl,r2
      001CEE 8B 83            [24] 4954 	mov	dph,r3
      001CF0 8C F0            [24] 4955 	mov	b,r4
      001CF2 12r00r00         [24] 4956 	lcall	__gptrget
      001CF5 FD               [12] 4957 	mov	r5,a
      001CF6 A3               [24] 4958 	inc	dptr
      001CF7 12r00r00         [24] 4959 	lcall	__gptrget
      001CFA FE               [12] 4960 	mov	r6,a
      001CFB A3               [24] 4961 	inc	dptr
      001CFC 12r00r00         [24] 4962 	lcall	__gptrget
      001CFF FF               [12] 4963 	mov	r7,a
      001D00 E5*00            [12] 4964 	mov	a,_bp
      001D02 24 1A            [12] 4965 	add	a,#0x1a
      001D04 F8               [12] 4966 	mov	r0,a
      001D05 E6               [12] 4967 	mov	a,@r0
      001D06 C0 E0            [24] 4968 	push	acc
      001D08 08               [12] 4969 	inc	r0
      001D09 E6               [12] 4970 	mov	a,@r0
      001D0A C0 E0            [24] 4971 	push	acc
      001D0C 08               [12] 4972 	inc	r0
      001D0D E6               [12] 4973 	mov	a,@r0
      001D0E C0 E0            [24] 4974 	push	acc
      001D10 08               [12] 4975 	inc	r0
      001D11 E6               [12] 4976 	mov	a,@r0
      001D12 C0 E0            [24] 4977 	push	acc
      001D14 8D 82            [24] 4978 	mov	dpl,r5
      001D16 8E 83            [24] 4979 	mov	dph,r6
      001D18 8F F0            [24] 4980 	mov	b,r7
      001D1A 12r00r00         [24] 4981 	lcall	_stack_push
      001D1D E5 81            [12] 4982 	mov	a,sp
      001D1F 24 FC            [12] 4983 	add	a,#0xfc
      001D21 F5 81            [12] 4984 	mov	sp,a
                                   4985 ;	calc.c:243: printstr("\r\nstack underflow\r\n");
      001D23 90r00r4E         [24] 4986 	mov	dptr,#___str_10
      001D26 75 F0 80         [24] 4987 	mov	b,#0x80
      001D29 12r00r00         [24] 4988 	lcall	_printstr
      001D2C 02r24r0E         [24] 4989 	ljmp	00249$
      001D2F                       4990 00211$:
                                   4991 ;	calc.c:245: d1 |= d0;
      001D2F E5*00            [12] 4992 	mov	a,_bp
      001D31 24 1E            [12] 4993 	add	a,#0x1e
      001D33 F8               [12] 4994 	mov	r0,a
      001D34 E5*00            [12] 4995 	mov	a,_bp
      001D36 24 1A            [12] 4996 	add	a,#0x1a
      001D38 F9               [12] 4997 	mov	r1,a
      001D39 E7               [12] 4998 	mov	a,@r1
      001D3A 46               [12] 4999 	orl	a,@r0
      001D3B F6               [12] 5000 	mov	@r0,a
      001D3C 09               [12] 5001 	inc	r1
      001D3D E7               [12] 5002 	mov	a,@r1
      001D3E 08               [12] 5003 	inc	r0
      001D3F 46               [12] 5004 	orl	a,@r0
      001D40 F6               [12] 5005 	mov	@r0,a
      001D41 09               [12] 5006 	inc	r1
      001D42 E7               [12] 5007 	mov	a,@r1
      001D43 08               [12] 5008 	inc	r0
      001D44 46               [12] 5009 	orl	a,@r0
      001D45 F6               [12] 5010 	mov	@r0,a
      001D46 09               [12] 5011 	inc	r1
      001D47 E7               [12] 5012 	mov	a,@r1
      001D48 08               [12] 5013 	inc	r0
      001D49 46               [12] 5014 	orl	a,@r0
      001D4A F6               [12] 5015 	mov	@r0,a
                                   5016 ;	calc.c:246: (void)stack_push(ctx->ps, d1);
      001D4B 8A 82            [24] 5017 	mov	dpl,r2
      001D4D 8B 83            [24] 5018 	mov	dph,r3
      001D4F 8C F0            [24] 5019 	mov	b,r4
      001D51 12r00r00         [24] 5020 	lcall	__gptrget
      001D54 FA               [12] 5021 	mov	r2,a
      001D55 A3               [24] 5022 	inc	dptr
      001D56 12r00r00         [24] 5023 	lcall	__gptrget
      001D59 FB               [12] 5024 	mov	r3,a
      001D5A A3               [24] 5025 	inc	dptr
      001D5B 12r00r00         [24] 5026 	lcall	__gptrget
      001D5E FC               [12] 5027 	mov	r4,a
      001D5F E5*00            [12] 5028 	mov	a,_bp
      001D61 24 1E            [12] 5029 	add	a,#0x1e
      001D63 F8               [12] 5030 	mov	r0,a
      001D64 E6               [12] 5031 	mov	a,@r0
      001D65 C0 E0            [24] 5032 	push	acc
      001D67 08               [12] 5033 	inc	r0
      001D68 E6               [12] 5034 	mov	a,@r0
      001D69 C0 E0            [24] 5035 	push	acc
      001D6B 08               [12] 5036 	inc	r0
      001D6C E6               [12] 5037 	mov	a,@r0
      001D6D C0 E0            [24] 5038 	push	acc
      001D6F 08               [12] 5039 	inc	r0
      001D70 E6               [12] 5040 	mov	a,@r0
      001D71 C0 E0            [24] 5041 	push	acc
      001D73 8A 82            [24] 5042 	mov	dpl,r2
      001D75 8B 83            [24] 5043 	mov	dph,r3
      001D77 8C F0            [24] 5044 	mov	b,r4
      001D79 12r00r00         [24] 5045 	lcall	_stack_push
      001D7C E5 81            [12] 5046 	mov	a,sp
      001D7E 24 FC            [12] 5047 	add	a,#0xfc
      001D80 F5 81            [12] 5048 	mov	sp,a
                                   5049 ;	calc.c:248: break;
      001D82 02r24r0E         [24] 5050 	ljmp	00249$
                                   5051 ;	calc.c:249: case '^':
      001D85                       5052 00216$:
                                   5053 ;	calc.c:250: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      001D85 E5*00            [12] 5054 	mov	a,_bp
      001D87 24 1A            [12] 5055 	add	a,#0x1a
      001D89 FF               [12] 5056 	mov	r7,a
      001D8A E5*00            [12] 5057 	mov	a,_bp
      001D8C 24 13            [12] 5058 	add	a,#0x13
      001D8E F8               [12] 5059 	mov	r0,a
      001D8F A6 07            [24] 5060 	mov	@r0,ar7
      001D91 08               [12] 5061 	inc	r0
      001D92 76 00            [12] 5062 	mov	@r0,#0x00
      001D94 08               [12] 5063 	inc	r0
      001D95 76 40            [12] 5064 	mov	@r0,#0x40
      001D97 E5*00            [12] 5065 	mov	a,_bp
      001D99 24 17            [12] 5066 	add	a,#0x17
      001D9B F8               [12] 5067 	mov	r0,a
      001D9C 74 11            [12] 5068 	mov	a,#0x11
      001D9E 26               [12] 5069 	add	a,@r0
      001D9F FA               [12] 5070 	mov	r2,a
      001DA0 74 40            [12] 5071 	mov	a,#0x40
      001DA2 08               [12] 5072 	inc	r0
      001DA3 36               [12] 5073 	addc	a,@r0
      001DA4 FB               [12] 5074 	mov	r3,a
      001DA5 08               [12] 5075 	inc	r0
      001DA6 86 04            [24] 5076 	mov	ar4,@r0
      001DA8 8A 82            [24] 5077 	mov	dpl,r2
      001DAA 8B 83            [24] 5078 	mov	dph,r3
      001DAC 8C F0            [24] 5079 	mov	b,r4
      001DAE 12r00r00         [24] 5080 	lcall	__gptrget
      001DB1 FD               [12] 5081 	mov	r5,a
      001DB2 A3               [24] 5082 	inc	dptr
      001DB3 12r00r00         [24] 5083 	lcall	__gptrget
      001DB6 FE               [12] 5084 	mov	r6,a
      001DB7 A3               [24] 5085 	inc	dptr
      001DB8 12r00r00         [24] 5086 	lcall	__gptrget
      001DBB FF               [12] 5087 	mov	r7,a
      001DBC C0 04            [24] 5088 	push	ar4
      001DBE C0 03            [24] 5089 	push	ar3
      001DC0 C0 02            [24] 5090 	push	ar2
      001DC2 E5*00            [12] 5091 	mov	a,_bp
      001DC4 24 13            [12] 5092 	add	a,#0x13
      001DC6 F8               [12] 5093 	mov	r0,a
      001DC7 E6               [12] 5094 	mov	a,@r0
      001DC8 C0 E0            [24] 5095 	push	acc
      001DCA 08               [12] 5096 	inc	r0
      001DCB E6               [12] 5097 	mov	a,@r0
      001DCC C0 E0            [24] 5098 	push	acc
      001DCE 08               [12] 5099 	inc	r0
      001DCF E6               [12] 5100 	mov	a,@r0
      001DD0 C0 E0            [24] 5101 	push	acc
      001DD2 8D 82            [24] 5102 	mov	dpl,r5
      001DD4 8E 83            [24] 5103 	mov	dph,r6
      001DD6 8F F0            [24] 5104 	mov	b,r7
      001DD8 12r00r00         [24] 5105 	lcall	_stack_pop
      001DDB AE 82            [24] 5106 	mov	r6,dpl
      001DDD AF 83            [24] 5107 	mov	r7,dph
      001DDF 15 81            [12] 5108 	dec	sp
      001DE1 15 81            [12] 5109 	dec	sp
      001DE3 15 81            [12] 5110 	dec	sp
      001DE5 D0 02            [24] 5111 	pop	ar2
      001DE7 D0 03            [24] 5112 	pop	ar3
      001DE9 D0 04            [24] 5113 	pop	ar4
      001DEB EE               [12] 5114 	mov	a,r6
      001DEC 4F               [12] 5115 	orl	a,r7
      001DED 70 0C            [24] 5116 	jnz	00221$
      001DEF 90r00r4E         [24] 5117 	mov	dptr,#___str_10
      001DF2 75 F0 80         [24] 5118 	mov	b,#0x80
      001DF5 12r00r00         [24] 5119 	lcall	_printstr
      001DF8 02r24r0E         [24] 5120 	ljmp	00249$
      001DFB                       5121 00221$:
                                   5122 ;	calc.c:251: else if (!stack_pop(ctx->ps, &d1)) {
      001DFB E5*00            [12] 5123 	mov	a,_bp
      001DFD 24 1E            [12] 5124 	add	a,#0x1e
      001DFF FF               [12] 5125 	mov	r7,a
      001E00 E5*00            [12] 5126 	mov	a,_bp
      001E02 24 13            [12] 5127 	add	a,#0x13
      001E04 F8               [12] 5128 	mov	r0,a
      001E05 A6 07            [24] 5129 	mov	@r0,ar7
      001E07 08               [12] 5130 	inc	r0
      001E08 76 00            [12] 5131 	mov	@r0,#0x00
      001E0A 08               [12] 5132 	inc	r0
      001E0B 76 40            [12] 5133 	mov	@r0,#0x40
      001E0D 8A 82            [24] 5134 	mov	dpl,r2
      001E0F 8B 83            [24] 5135 	mov	dph,r3
      001E11 8C F0            [24] 5136 	mov	b,r4
      001E13 12r00r00         [24] 5137 	lcall	__gptrget
      001E16 FD               [12] 5138 	mov	r5,a
      001E17 A3               [24] 5139 	inc	dptr
      001E18 12r00r00         [24] 5140 	lcall	__gptrget
      001E1B FE               [12] 5141 	mov	r6,a
      001E1C A3               [24] 5142 	inc	dptr
      001E1D 12r00r00         [24] 5143 	lcall	__gptrget
      001E20 FF               [12] 5144 	mov	r7,a
      001E21 C0 04            [24] 5145 	push	ar4
      001E23 C0 03            [24] 5146 	push	ar3
      001E25 C0 02            [24] 5147 	push	ar2
      001E27 E5*00            [12] 5148 	mov	a,_bp
      001E29 24 13            [12] 5149 	add	a,#0x13
      001E2B F8               [12] 5150 	mov	r0,a
      001E2C E6               [12] 5151 	mov	a,@r0
      001E2D C0 E0            [24] 5152 	push	acc
      001E2F 08               [12] 5153 	inc	r0
      001E30 E6               [12] 5154 	mov	a,@r0
      001E31 C0 E0            [24] 5155 	push	acc
      001E33 08               [12] 5156 	inc	r0
      001E34 E6               [12] 5157 	mov	a,@r0
      001E35 C0 E0            [24] 5158 	push	acc
      001E37 8D 82            [24] 5159 	mov	dpl,r5
      001E39 8E 83            [24] 5160 	mov	dph,r6
      001E3B 8F F0            [24] 5161 	mov	b,r7
      001E3D 12r00r00         [24] 5162 	lcall	_stack_pop
      001E40 AE 82            [24] 5163 	mov	r6,dpl
      001E42 AF 83            [24] 5164 	mov	r7,dph
      001E44 15 81            [12] 5165 	dec	sp
      001E46 15 81            [12] 5166 	dec	sp
      001E48 15 81            [12] 5167 	dec	sp
      001E4A D0 02            [24] 5168 	pop	ar2
      001E4C D0 03            [24] 5169 	pop	ar3
      001E4E D0 04            [24] 5170 	pop	ar4
      001E50 EE               [12] 5171 	mov	a,r6
      001E51 4F               [12] 5172 	orl	a,r7
      001E52 70 43            [24] 5173 	jnz	00218$
                                   5174 ;	calc.c:252: (void)stack_push(ctx->ps, d0);
      001E54 8A 82            [24] 5175 	mov	dpl,r2
      001E56 8B 83            [24] 5176 	mov	dph,r3
      001E58 8C F0            [24] 5177 	mov	b,r4
      001E5A 12r00r00         [24] 5178 	lcall	__gptrget
      001E5D FD               [12] 5179 	mov	r5,a
      001E5E A3               [24] 5180 	inc	dptr
      001E5F 12r00r00         [24] 5181 	lcall	__gptrget
      001E62 FE               [12] 5182 	mov	r6,a
      001E63 A3               [24] 5183 	inc	dptr
      001E64 12r00r00         [24] 5184 	lcall	__gptrget
      001E67 FF               [12] 5185 	mov	r7,a
      001E68 E5*00            [12] 5186 	mov	a,_bp
      001E6A 24 1A            [12] 5187 	add	a,#0x1a
      001E6C F8               [12] 5188 	mov	r0,a
      001E6D E6               [12] 5189 	mov	a,@r0
      001E6E C0 E0            [24] 5190 	push	acc
      001E70 08               [12] 5191 	inc	r0
      001E71 E6               [12] 5192 	mov	a,@r0
      001E72 C0 E0            [24] 5193 	push	acc
      001E74 08               [12] 5194 	inc	r0
      001E75 E6               [12] 5195 	mov	a,@r0
      001E76 C0 E0            [24] 5196 	push	acc
      001E78 08               [12] 5197 	inc	r0
      001E79 E6               [12] 5198 	mov	a,@r0
      001E7A C0 E0            [24] 5199 	push	acc
      001E7C 8D 82            [24] 5200 	mov	dpl,r5
      001E7E 8E 83            [24] 5201 	mov	dph,r6
      001E80 8F F0            [24] 5202 	mov	b,r7
      001E82 12r00r00         [24] 5203 	lcall	_stack_push
      001E85 E5 81            [12] 5204 	mov	a,sp
      001E87 24 FC            [12] 5205 	add	a,#0xfc
      001E89 F5 81            [12] 5206 	mov	sp,a
                                   5207 ;	calc.c:253: printstr("\r\nstack underflow\r\n");
      001E8B 90r00r4E         [24] 5208 	mov	dptr,#___str_10
      001E8E 75 F0 80         [24] 5209 	mov	b,#0x80
      001E91 12r00r00         [24] 5210 	lcall	_printstr
      001E94 02r24r0E         [24] 5211 	ljmp	00249$
      001E97                       5212 00218$:
                                   5213 ;	calc.c:255: d1 ^= d0;
      001E97 E5*00            [12] 5214 	mov	a,_bp
      001E99 24 1E            [12] 5215 	add	a,#0x1e
      001E9B F8               [12] 5216 	mov	r0,a
      001E9C E5*00            [12] 5217 	mov	a,_bp
      001E9E 24 1A            [12] 5218 	add	a,#0x1a
      001EA0 F9               [12] 5219 	mov	r1,a
      001EA1 E7               [12] 5220 	mov	a,@r1
      001EA2 66               [12] 5221 	xrl	a,@r0
      001EA3 F6               [12] 5222 	mov	@r0,a
      001EA4 09               [12] 5223 	inc	r1
      001EA5 E7               [12] 5224 	mov	a,@r1
      001EA6 08               [12] 5225 	inc	r0
      001EA7 66               [12] 5226 	xrl	a,@r0
      001EA8 F6               [12] 5227 	mov	@r0,a
      001EA9 09               [12] 5228 	inc	r1
      001EAA E7               [12] 5229 	mov	a,@r1
      001EAB 08               [12] 5230 	inc	r0
      001EAC 66               [12] 5231 	xrl	a,@r0
      001EAD F6               [12] 5232 	mov	@r0,a
      001EAE 09               [12] 5233 	inc	r1
      001EAF E7               [12] 5234 	mov	a,@r1
      001EB0 08               [12] 5235 	inc	r0
      001EB1 66               [12] 5236 	xrl	a,@r0
      001EB2 F6               [12] 5237 	mov	@r0,a
                                   5238 ;	calc.c:256: (void)stack_push(ctx->ps, d1);
      001EB3 8A 82            [24] 5239 	mov	dpl,r2
      001EB5 8B 83            [24] 5240 	mov	dph,r3
      001EB7 8C F0            [24] 5241 	mov	b,r4
      001EB9 12r00r00         [24] 5242 	lcall	__gptrget
      001EBC FA               [12] 5243 	mov	r2,a
      001EBD A3               [24] 5244 	inc	dptr
      001EBE 12r00r00         [24] 5245 	lcall	__gptrget
      001EC1 FB               [12] 5246 	mov	r3,a
      001EC2 A3               [24] 5247 	inc	dptr
      001EC3 12r00r00         [24] 5248 	lcall	__gptrget
      001EC6 FC               [12] 5249 	mov	r4,a
      001EC7 E5*00            [12] 5250 	mov	a,_bp
      001EC9 24 1E            [12] 5251 	add	a,#0x1e
      001ECB F8               [12] 5252 	mov	r0,a
      001ECC E6               [12] 5253 	mov	a,@r0
      001ECD C0 E0            [24] 5254 	push	acc
      001ECF 08               [12] 5255 	inc	r0
      001ED0 E6               [12] 5256 	mov	a,@r0
      001ED1 C0 E0            [24] 5257 	push	acc
      001ED3 08               [12] 5258 	inc	r0
      001ED4 E6               [12] 5259 	mov	a,@r0
      001ED5 C0 E0            [24] 5260 	push	acc
      001ED7 08               [12] 5261 	inc	r0
      001ED8 E6               [12] 5262 	mov	a,@r0
      001ED9 C0 E0            [24] 5263 	push	acc
      001EDB 8A 82            [24] 5264 	mov	dpl,r2
      001EDD 8B 83            [24] 5265 	mov	dph,r3
      001EDF 8C F0            [24] 5266 	mov	b,r4
      001EE1 12r00r00         [24] 5267 	lcall	_stack_push
      001EE4 E5 81            [12] 5268 	mov	a,sp
      001EE6 24 FC            [12] 5269 	add	a,#0xfc
      001EE8 F5 81            [12] 5270 	mov	sp,a
                                   5271 ;	calc.c:258: break;
      001EEA 02r24r0E         [24] 5272 	ljmp	00249$
                                   5273 ;	calc.c:259: case '>':
      001EED                       5274 00223$:
                                   5275 ;	calc.c:260: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      001EED E5*00            [12] 5276 	mov	a,_bp
      001EEF 24 1A            [12] 5277 	add	a,#0x1a
      001EF1 FC               [12] 5278 	mov	r4,a
      001EF2 7B 00            [12] 5279 	mov	r3,#0x00
      001EF4 7A 40            [12] 5280 	mov	r2,#0x40
      001EF6 E5*00            [12] 5281 	mov	a,_bp
      001EF8 24 17            [12] 5282 	add	a,#0x17
      001EFA F8               [12] 5283 	mov	r0,a
      001EFB E5*00            [12] 5284 	mov	a,_bp
      001EFD 24 0F            [12] 5285 	add	a,#0x0f
      001EFF F9               [12] 5286 	mov	r1,a
      001F00 74 11            [12] 5287 	mov	a,#0x11
      001F02 26               [12] 5288 	add	a,@r0
      001F03 F7               [12] 5289 	mov	@r1,a
      001F04 74 40            [12] 5290 	mov	a,#0x40
      001F06 08               [12] 5291 	inc	r0
      001F07 36               [12] 5292 	addc	a,@r0
      001F08 09               [12] 5293 	inc	r1
      001F09 F7               [12] 5294 	mov	@r1,a
      001F0A 08               [12] 5295 	inc	r0
      001F0B 09               [12] 5296 	inc	r1
      001F0C E6               [12] 5297 	mov	a,@r0
      001F0D F7               [12] 5298 	mov	@r1,a
      001F0E E5*00            [12] 5299 	mov	a,_bp
      001F10 24 0F            [12] 5300 	add	a,#0x0f
      001F12 F8               [12] 5301 	mov	r0,a
      001F13 86 82            [24] 5302 	mov	dpl,@r0
      001F15 08               [12] 5303 	inc	r0
      001F16 86 83            [24] 5304 	mov	dph,@r0
      001F18 08               [12] 5305 	inc	r0
      001F19 86 F0            [24] 5306 	mov	b,@r0
      001F1B 12r00r00         [24] 5307 	lcall	__gptrget
      001F1E FD               [12] 5308 	mov	r5,a
      001F1F A3               [24] 5309 	inc	dptr
      001F20 12r00r00         [24] 5310 	lcall	__gptrget
      001F23 FE               [12] 5311 	mov	r6,a
      001F24 A3               [24] 5312 	inc	dptr
      001F25 12r00r00         [24] 5313 	lcall	__gptrget
      001F28 FF               [12] 5314 	mov	r7,a
      001F29 C0 04            [24] 5315 	push	ar4
      001F2B C0 03            [24] 5316 	push	ar3
      001F2D C0 02            [24] 5317 	push	ar2
      001F2F 8D 82            [24] 5318 	mov	dpl,r5
      001F31 8E 83            [24] 5319 	mov	dph,r6
      001F33 8F F0            [24] 5320 	mov	b,r7
      001F35 12r00r00         [24] 5321 	lcall	_stack_pop
      001F38 AE 82            [24] 5322 	mov	r6,dpl
      001F3A AF 83            [24] 5323 	mov	r7,dph
      001F3C 15 81            [12] 5324 	dec	sp
      001F3E 15 81            [12] 5325 	dec	sp
      001F40 15 81            [12] 5326 	dec	sp
      001F42 EE               [12] 5327 	mov	a,r6
      001F43 4F               [12] 5328 	orl	a,r7
      001F44 70 0C            [24] 5329 	jnz	00228$
      001F46 90r00r4E         [24] 5330 	mov	dptr,#___str_10
      001F49 75 F0 80         [24] 5331 	mov	b,#0x80
      001F4C 12r00r00         [24] 5332 	lcall	_printstr
      001F4F 02r24r0E         [24] 5333 	ljmp	00249$
      001F52                       5334 00228$:
                                   5335 ;	calc.c:261: else if (!stack_pop(ctx->ps, &d1)) {
      001F52 E5*00            [12] 5336 	mov	a,_bp
      001F54 24 1E            [12] 5337 	add	a,#0x1e
      001F56 FC               [12] 5338 	mov	r4,a
      001F57 7B 00            [12] 5339 	mov	r3,#0x00
      001F59 7A 40            [12] 5340 	mov	r2,#0x40
      001F5B E5*00            [12] 5341 	mov	a,_bp
      001F5D 24 0F            [12] 5342 	add	a,#0x0f
      001F5F F8               [12] 5343 	mov	r0,a
      001F60 86 82            [24] 5344 	mov	dpl,@r0
      001F62 08               [12] 5345 	inc	r0
      001F63 86 83            [24] 5346 	mov	dph,@r0
      001F65 08               [12] 5347 	inc	r0
      001F66 86 F0            [24] 5348 	mov	b,@r0
      001F68 12r00r00         [24] 5349 	lcall	__gptrget
      001F6B FD               [12] 5350 	mov	r5,a
      001F6C A3               [24] 5351 	inc	dptr
      001F6D 12r00r00         [24] 5352 	lcall	__gptrget
      001F70 FE               [12] 5353 	mov	r6,a
      001F71 A3               [24] 5354 	inc	dptr
      001F72 12r00r00         [24] 5355 	lcall	__gptrget
      001F75 FF               [12] 5356 	mov	r7,a
      001F76 C0 04            [24] 5357 	push	ar4
      001F78 C0 03            [24] 5358 	push	ar3
      001F7A C0 02            [24] 5359 	push	ar2
      001F7C 8D 82            [24] 5360 	mov	dpl,r5
      001F7E 8E 83            [24] 5361 	mov	dph,r6
      001F80 8F F0            [24] 5362 	mov	b,r7
      001F82 12r00r00         [24] 5363 	lcall	_stack_pop
      001F85 AE 82            [24] 5364 	mov	r6,dpl
      001F87 AF 83            [24] 5365 	mov	r7,dph
      001F89 15 81            [12] 5366 	dec	sp
      001F8B 15 81            [12] 5367 	dec	sp
      001F8D 15 81            [12] 5368 	dec	sp
      001F8F EE               [12] 5369 	mov	a,r6
      001F90 4F               [12] 5370 	orl	a,r7
      001F91 70 4A            [24] 5371 	jnz	00225$
                                   5372 ;	calc.c:262: (void)stack_push(ctx->ps, d0);
      001F93 E5*00            [12] 5373 	mov	a,_bp
      001F95 24 0F            [12] 5374 	add	a,#0x0f
      001F97 F8               [12] 5375 	mov	r0,a
      001F98 86 82            [24] 5376 	mov	dpl,@r0
      001F9A 08               [12] 5377 	inc	r0
      001F9B 86 83            [24] 5378 	mov	dph,@r0
      001F9D 08               [12] 5379 	inc	r0
      001F9E 86 F0            [24] 5380 	mov	b,@r0
      001FA0 12r00r00         [24] 5381 	lcall	__gptrget
      001FA3 FD               [12] 5382 	mov	r5,a
      001FA4 A3               [24] 5383 	inc	dptr
      001FA5 12r00r00         [24] 5384 	lcall	__gptrget
      001FA8 FE               [12] 5385 	mov	r6,a
      001FA9 A3               [24] 5386 	inc	dptr
      001FAA 12r00r00         [24] 5387 	lcall	__gptrget
      001FAD FF               [12] 5388 	mov	r7,a
      001FAE E5*00            [12] 5389 	mov	a,_bp
      001FB0 24 1A            [12] 5390 	add	a,#0x1a
      001FB2 F8               [12] 5391 	mov	r0,a
      001FB3 E6               [12] 5392 	mov	a,@r0
      001FB4 C0 E0            [24] 5393 	push	acc
      001FB6 08               [12] 5394 	inc	r0
      001FB7 E6               [12] 5395 	mov	a,@r0
      001FB8 C0 E0            [24] 5396 	push	acc
      001FBA 08               [12] 5397 	inc	r0
      001FBB E6               [12] 5398 	mov	a,@r0
      001FBC C0 E0            [24] 5399 	push	acc
      001FBE 08               [12] 5400 	inc	r0
      001FBF E6               [12] 5401 	mov	a,@r0
      001FC0 C0 E0            [24] 5402 	push	acc
      001FC2 8D 82            [24] 5403 	mov	dpl,r5
      001FC4 8E 83            [24] 5404 	mov	dph,r6
      001FC6 8F F0            [24] 5405 	mov	b,r7
      001FC8 12r00r00         [24] 5406 	lcall	_stack_push
      001FCB E5 81            [12] 5407 	mov	a,sp
      001FCD 24 FC            [12] 5408 	add	a,#0xfc
      001FCF F5 81            [12] 5409 	mov	sp,a
                                   5410 ;	calc.c:263: printstr("\r\nstack underflow\r\n");
      001FD1 90r00r4E         [24] 5411 	mov	dptr,#___str_10
      001FD4 75 F0 80         [24] 5412 	mov	b,#0x80
      001FD7 12r00r00         [24] 5413 	lcall	_printstr
      001FDA 02r24r0E         [24] 5414 	ljmp	00249$
      001FDD                       5415 00225$:
                                   5416 ;	calc.c:265: d1 = (unsigned long)d1 >> d0;
      001FDD E5*00            [12] 5417 	mov	a,_bp
      001FDF 24 1E            [12] 5418 	add	a,#0x1e
      001FE1 F8               [12] 5419 	mov	r0,a
      001FE2 86 04            [24] 5420 	mov	ar4,@r0
      001FE4 08               [12] 5421 	inc	r0
      001FE5 86 05            [24] 5422 	mov	ar5,@r0
      001FE7 08               [12] 5423 	inc	r0
      001FE8 86 06            [24] 5424 	mov	ar6,@r0
      001FEA 08               [12] 5425 	inc	r0
      001FEB 86 07            [24] 5426 	mov	ar7,@r0
      001FED E5*00            [12] 5427 	mov	a,_bp
      001FEF 24 1A            [12] 5428 	add	a,#0x1a
      001FF1 F8               [12] 5429 	mov	r0,a
      001FF2 86 F0            [24] 5430 	mov	b,@r0
      001FF4 05 F0            [12] 5431 	inc	b
      001FF6 80 0D            [24] 5432 	sjmp	00592$
      001FF8                       5433 00591$:
      001FF8 C3               [12] 5434 	clr	c
      001FF9 EF               [12] 5435 	mov	a,r7
      001FFA 13               [12] 5436 	rrc	a
      001FFB FF               [12] 5437 	mov	r7,a
      001FFC EE               [12] 5438 	mov	a,r6
      001FFD 13               [12] 5439 	rrc	a
      001FFE FE               [12] 5440 	mov	r6,a
      001FFF ED               [12] 5441 	mov	a,r5
      002000 13               [12] 5442 	rrc	a
      002001 FD               [12] 5443 	mov	r5,a
      002002 EC               [12] 5444 	mov	a,r4
      002003 13               [12] 5445 	rrc	a
      002004 FC               [12] 5446 	mov	r4,a
      002005                       5447 00592$:
      002005 D5 F0 F0         [24] 5448 	djnz	b,00591$
      002008 E5*00            [12] 5449 	mov	a,_bp
      00200A 24 1E            [12] 5450 	add	a,#0x1e
      00200C F8               [12] 5451 	mov	r0,a
      00200D A6 04            [24] 5452 	mov	@r0,ar4
      00200F 08               [12] 5453 	inc	r0
      002010 A6 05            [24] 5454 	mov	@r0,ar5
      002012 08               [12] 5455 	inc	r0
      002013 A6 06            [24] 5456 	mov	@r0,ar6
      002015 08               [12] 5457 	inc	r0
      002016 A6 07            [24] 5458 	mov	@r0,ar7
                                   5459 ;	calc.c:266: (void)stack_push(ctx->ps, d1);
      002018 E5*00            [12] 5460 	mov	a,_bp
      00201A 24 0F            [12] 5461 	add	a,#0x0f
      00201C F8               [12] 5462 	mov	r0,a
      00201D 86 82            [24] 5463 	mov	dpl,@r0
      00201F 08               [12] 5464 	inc	r0
      002020 86 83            [24] 5465 	mov	dph,@r0
      002022 08               [12] 5466 	inc	r0
      002023 86 F0            [24] 5467 	mov	b,@r0
      002025 12r00r00         [24] 5468 	lcall	__gptrget
      002028 FD               [12] 5469 	mov	r5,a
      002029 A3               [24] 5470 	inc	dptr
      00202A 12r00r00         [24] 5471 	lcall	__gptrget
      00202D FE               [12] 5472 	mov	r6,a
      00202E A3               [24] 5473 	inc	dptr
      00202F 12r00r00         [24] 5474 	lcall	__gptrget
      002032 FF               [12] 5475 	mov	r7,a
      002033 E5*00            [12] 5476 	mov	a,_bp
      002035 24 1E            [12] 5477 	add	a,#0x1e
      002037 F8               [12] 5478 	mov	r0,a
      002038 E6               [12] 5479 	mov	a,@r0
      002039 C0 E0            [24] 5480 	push	acc
      00203B 08               [12] 5481 	inc	r0
      00203C E6               [12] 5482 	mov	a,@r0
      00203D C0 E0            [24] 5483 	push	acc
      00203F 08               [12] 5484 	inc	r0
      002040 E6               [12] 5485 	mov	a,@r0
      002041 C0 E0            [24] 5486 	push	acc
      002043 08               [12] 5487 	inc	r0
      002044 E6               [12] 5488 	mov	a,@r0
      002045 C0 E0            [24] 5489 	push	acc
      002047 8D 82            [24] 5490 	mov	dpl,r5
      002049 8E 83            [24] 5491 	mov	dph,r6
      00204B 8F F0            [24] 5492 	mov	b,r7
      00204D 12r00r00         [24] 5493 	lcall	_stack_push
      002050 E5 81            [12] 5494 	mov	a,sp
      002052 24 FC            [12] 5495 	add	a,#0xfc
      002054 F5 81            [12] 5496 	mov	sp,a
                                   5497 ;	calc.c:268: break;
      002056 02r24r0E         [24] 5498 	ljmp	00249$
                                   5499 ;	calc.c:269: case ']':
      002059                       5500 00230$:
                                   5501 ;	calc.c:270: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      002059 E5*00            [12] 5502 	mov	a,_bp
      00205B 24 1A            [12] 5503 	add	a,#0x1a
      00205D FF               [12] 5504 	mov	r7,a
      00205E E5*00            [12] 5505 	mov	a,_bp
      002060 24 13            [12] 5506 	add	a,#0x13
      002062 F8               [12] 5507 	mov	r0,a
      002063 A6 07            [24] 5508 	mov	@r0,ar7
      002065 08               [12] 5509 	inc	r0
      002066 76 00            [12] 5510 	mov	@r0,#0x00
      002068 08               [12] 5511 	inc	r0
      002069 76 40            [12] 5512 	mov	@r0,#0x40
      00206B E5*00            [12] 5513 	mov	a,_bp
      00206D 24 17            [12] 5514 	add	a,#0x17
      00206F F8               [12] 5515 	mov	r0,a
      002070 74 11            [12] 5516 	mov	a,#0x11
      002072 26               [12] 5517 	add	a,@r0
      002073 FA               [12] 5518 	mov	r2,a
      002074 74 40            [12] 5519 	mov	a,#0x40
      002076 08               [12] 5520 	inc	r0
      002077 36               [12] 5521 	addc	a,@r0
      002078 FB               [12] 5522 	mov	r3,a
      002079 08               [12] 5523 	inc	r0
      00207A 86 04            [24] 5524 	mov	ar4,@r0
      00207C 8A 82            [24] 5525 	mov	dpl,r2
      00207E 8B 83            [24] 5526 	mov	dph,r3
      002080 8C F0            [24] 5527 	mov	b,r4
      002082 12r00r00         [24] 5528 	lcall	__gptrget
      002085 FD               [12] 5529 	mov	r5,a
      002086 A3               [24] 5530 	inc	dptr
      002087 12r00r00         [24] 5531 	lcall	__gptrget
      00208A FE               [12] 5532 	mov	r6,a
      00208B A3               [24] 5533 	inc	dptr
      00208C 12r00r00         [24] 5534 	lcall	__gptrget
      00208F FF               [12] 5535 	mov	r7,a
      002090 C0 04            [24] 5536 	push	ar4
      002092 C0 03            [24] 5537 	push	ar3
      002094 C0 02            [24] 5538 	push	ar2
      002096 E5*00            [12] 5539 	mov	a,_bp
      002098 24 13            [12] 5540 	add	a,#0x13
      00209A F8               [12] 5541 	mov	r0,a
      00209B E6               [12] 5542 	mov	a,@r0
      00209C C0 E0            [24] 5543 	push	acc
      00209E 08               [12] 5544 	inc	r0
      00209F E6               [12] 5545 	mov	a,@r0
      0020A0 C0 E0            [24] 5546 	push	acc
      0020A2 08               [12] 5547 	inc	r0
      0020A3 E6               [12] 5548 	mov	a,@r0
      0020A4 C0 E0            [24] 5549 	push	acc
      0020A6 8D 82            [24] 5550 	mov	dpl,r5
      0020A8 8E 83            [24] 5551 	mov	dph,r6
      0020AA 8F F0            [24] 5552 	mov	b,r7
      0020AC 12r00r00         [24] 5553 	lcall	_stack_pop
      0020AF AE 82            [24] 5554 	mov	r6,dpl
      0020B1 AF 83            [24] 5555 	mov	r7,dph
      0020B3 15 81            [12] 5556 	dec	sp
      0020B5 15 81            [12] 5557 	dec	sp
      0020B7 15 81            [12] 5558 	dec	sp
      0020B9 D0 02            [24] 5559 	pop	ar2
      0020BB D0 03            [24] 5560 	pop	ar3
      0020BD D0 04            [24] 5561 	pop	ar4
      0020BF EE               [12] 5562 	mov	a,r6
      0020C0 4F               [12] 5563 	orl	a,r7
      0020C1 70 0C            [24] 5564 	jnz	00235$
      0020C3 90r00r4E         [24] 5565 	mov	dptr,#___str_10
      0020C6 75 F0 80         [24] 5566 	mov	b,#0x80
      0020C9 12r00r00         [24] 5567 	lcall	_printstr
      0020CC 02r24r0E         [24] 5568 	ljmp	00249$
      0020CF                       5569 00235$:
                                   5570 ;	calc.c:271: else if (!stack_pop(ctx->ps, &d1)) {
      0020CF E5*00            [12] 5571 	mov	a,_bp
      0020D1 24 1E            [12] 5572 	add	a,#0x1e
      0020D3 FF               [12] 5573 	mov	r7,a
      0020D4 E5*00            [12] 5574 	mov	a,_bp
      0020D6 24 13            [12] 5575 	add	a,#0x13
      0020D8 F8               [12] 5576 	mov	r0,a
      0020D9 A6 07            [24] 5577 	mov	@r0,ar7
      0020DB 08               [12] 5578 	inc	r0
      0020DC 76 00            [12] 5579 	mov	@r0,#0x00
      0020DE 08               [12] 5580 	inc	r0
      0020DF 76 40            [12] 5581 	mov	@r0,#0x40
      0020E1 8A 82            [24] 5582 	mov	dpl,r2
      0020E3 8B 83            [24] 5583 	mov	dph,r3
      0020E5 8C F0            [24] 5584 	mov	b,r4
      0020E7 12r00r00         [24] 5585 	lcall	__gptrget
      0020EA FD               [12] 5586 	mov	r5,a
      0020EB A3               [24] 5587 	inc	dptr
      0020EC 12r00r00         [24] 5588 	lcall	__gptrget
      0020EF FE               [12] 5589 	mov	r6,a
      0020F0 A3               [24] 5590 	inc	dptr
      0020F1 12r00r00         [24] 5591 	lcall	__gptrget
      0020F4 FF               [12] 5592 	mov	r7,a
      0020F5 C0 04            [24] 5593 	push	ar4
      0020F7 C0 03            [24] 5594 	push	ar3
      0020F9 C0 02            [24] 5595 	push	ar2
      0020FB E5*00            [12] 5596 	mov	a,_bp
      0020FD 24 13            [12] 5597 	add	a,#0x13
      0020FF F8               [12] 5598 	mov	r0,a
      002100 E6               [12] 5599 	mov	a,@r0
      002101 C0 E0            [24] 5600 	push	acc
      002103 08               [12] 5601 	inc	r0
      002104 E6               [12] 5602 	mov	a,@r0
      002105 C0 E0            [24] 5603 	push	acc
      002107 08               [12] 5604 	inc	r0
      002108 E6               [12] 5605 	mov	a,@r0
      002109 C0 E0            [24] 5606 	push	acc
      00210B 8D 82            [24] 5607 	mov	dpl,r5
      00210D 8E 83            [24] 5608 	mov	dph,r6
      00210F 8F F0            [24] 5609 	mov	b,r7
      002111 12r00r00         [24] 5610 	lcall	_stack_pop
      002114 AE 82            [24] 5611 	mov	r6,dpl
      002116 AF 83            [24] 5612 	mov	r7,dph
      002118 15 81            [12] 5613 	dec	sp
      00211A 15 81            [12] 5614 	dec	sp
      00211C 15 81            [12] 5615 	dec	sp
      00211E D0 02            [24] 5616 	pop	ar2
      002120 D0 03            [24] 5617 	pop	ar3
      002122 D0 04            [24] 5618 	pop	ar4
      002124 EE               [12] 5619 	mov	a,r6
      002125 4F               [12] 5620 	orl	a,r7
      002126 70 43            [24] 5621 	jnz	00232$
                                   5622 ;	calc.c:272: (void)stack_push(ctx->ps, d0);
      002128 8A 82            [24] 5623 	mov	dpl,r2
      00212A 8B 83            [24] 5624 	mov	dph,r3
      00212C 8C F0            [24] 5625 	mov	b,r4
      00212E 12r00r00         [24] 5626 	lcall	__gptrget
      002131 FD               [12] 5627 	mov	r5,a
      002132 A3               [24] 5628 	inc	dptr
      002133 12r00r00         [24] 5629 	lcall	__gptrget
      002136 FE               [12] 5630 	mov	r6,a
      002137 A3               [24] 5631 	inc	dptr
      002138 12r00r00         [24] 5632 	lcall	__gptrget
      00213B FF               [12] 5633 	mov	r7,a
      00213C E5*00            [12] 5634 	mov	a,_bp
      00213E 24 1A            [12] 5635 	add	a,#0x1a
      002140 F8               [12] 5636 	mov	r0,a
      002141 E6               [12] 5637 	mov	a,@r0
      002142 C0 E0            [24] 5638 	push	acc
      002144 08               [12] 5639 	inc	r0
      002145 E6               [12] 5640 	mov	a,@r0
      002146 C0 E0            [24] 5641 	push	acc
      002148 08               [12] 5642 	inc	r0
      002149 E6               [12] 5643 	mov	a,@r0
      00214A C0 E0            [24] 5644 	push	acc
      00214C 08               [12] 5645 	inc	r0
      00214D E6               [12] 5646 	mov	a,@r0
      00214E C0 E0            [24] 5647 	push	acc
      002150 8D 82            [24] 5648 	mov	dpl,r5
      002152 8E 83            [24] 5649 	mov	dph,r6
      002154 8F F0            [24] 5650 	mov	b,r7
      002156 12r00r00         [24] 5651 	lcall	_stack_push
      002159 E5 81            [12] 5652 	mov	a,sp
      00215B 24 FC            [12] 5653 	add	a,#0xfc
      00215D F5 81            [12] 5654 	mov	sp,a
                                   5655 ;	calc.c:273: printstr("\r\nstack underflow\r\n");
      00215F 90r00r4E         [24] 5656 	mov	dptr,#___str_10
      002162 75 F0 80         [24] 5657 	mov	b,#0x80
      002165 12r00r00         [24] 5658 	lcall	_printstr
      002168 02r24r0E         [24] 5659 	ljmp	00249$
      00216B                       5660 00232$:
                                   5661 ;	calc.c:275: d1 >>= d0;
      00216B E5*00            [12] 5662 	mov	a,_bp
      00216D 24 1A            [12] 5663 	add	a,#0x1a
      00216F F8               [12] 5664 	mov	r0,a
      002170 86 F0            [24] 5665 	mov	b,@r0
      002172 05 F0            [12] 5666 	inc	b
      002174 E5*00            [12] 5667 	mov	a,_bp
      002176 24 1E            [12] 5668 	add	a,#0x1e
      002178 F8               [12] 5669 	mov	r0,a
      002179 08               [12] 5670 	inc	r0
      00217A 08               [12] 5671 	inc	r0
      00217B 08               [12] 5672 	inc	r0
      00217C E6               [12] 5673 	mov	a,@r0
      00217D 33               [12] 5674 	rlc	a
      00217E 92 D2            [24] 5675 	mov	ov,c
      002180 18               [12] 5676 	dec	r0
      002181 18               [12] 5677 	dec	r0
      002182 18               [12] 5678 	dec	r0
      002183 80 14            [24] 5679 	sjmp	00596$
      002185                       5680 00595$:
      002185 A2 D2            [12] 5681 	mov	c,ov
      002187 08               [12] 5682 	inc	r0
      002188 08               [12] 5683 	inc	r0
      002189 08               [12] 5684 	inc	r0
      00218A E6               [12] 5685 	mov	a,@r0
      00218B 13               [12] 5686 	rrc	a
      00218C F6               [12] 5687 	mov	@r0,a
      00218D 18               [12] 5688 	dec	r0
      00218E E6               [12] 5689 	mov	a,@r0
      00218F 13               [12] 5690 	rrc	a
      002190 F6               [12] 5691 	mov	@r0,a
      002191 18               [12] 5692 	dec	r0
      002192 E6               [12] 5693 	mov	a,@r0
      002193 13               [12] 5694 	rrc	a
      002194 F6               [12] 5695 	mov	@r0,a
      002195 18               [12] 5696 	dec	r0
      002196 E6               [12] 5697 	mov	a,@r0
      002197 13               [12] 5698 	rrc	a
      002198 F6               [12] 5699 	mov	@r0,a
      002199                       5700 00596$:
      002199 D5 F0 E9         [24] 5701 	djnz	b,00595$
                                   5702 ;	calc.c:276: (void)stack_push(ctx->ps, d1);
      00219C 8A 82            [24] 5703 	mov	dpl,r2
      00219E 8B 83            [24] 5704 	mov	dph,r3
      0021A0 8C F0            [24] 5705 	mov	b,r4
      0021A2 12r00r00         [24] 5706 	lcall	__gptrget
      0021A5 FA               [12] 5707 	mov	r2,a
      0021A6 A3               [24] 5708 	inc	dptr
      0021A7 12r00r00         [24] 5709 	lcall	__gptrget
      0021AA FB               [12] 5710 	mov	r3,a
      0021AB A3               [24] 5711 	inc	dptr
      0021AC 12r00r00         [24] 5712 	lcall	__gptrget
      0021AF FC               [12] 5713 	mov	r4,a
      0021B0 E5*00            [12] 5714 	mov	a,_bp
      0021B2 24 1E            [12] 5715 	add	a,#0x1e
      0021B4 F8               [12] 5716 	mov	r0,a
      0021B5 E6               [12] 5717 	mov	a,@r0
      0021B6 C0 E0            [24] 5718 	push	acc
      0021B8 08               [12] 5719 	inc	r0
      0021B9 E6               [12] 5720 	mov	a,@r0
      0021BA C0 E0            [24] 5721 	push	acc
      0021BC 08               [12] 5722 	inc	r0
      0021BD E6               [12] 5723 	mov	a,@r0
      0021BE C0 E0            [24] 5724 	push	acc
      0021C0 08               [12] 5725 	inc	r0
      0021C1 E6               [12] 5726 	mov	a,@r0
      0021C2 C0 E0            [24] 5727 	push	acc
      0021C4 8A 82            [24] 5728 	mov	dpl,r2
      0021C6 8B 83            [24] 5729 	mov	dph,r3
      0021C8 8C F0            [24] 5730 	mov	b,r4
      0021CA 12r00r00         [24] 5731 	lcall	_stack_push
      0021CD E5 81            [12] 5732 	mov	a,sp
      0021CF 24 FC            [12] 5733 	add	a,#0xfc
      0021D1 F5 81            [12] 5734 	mov	sp,a
                                   5735 ;	calc.c:278: break;
      0021D3 02r24r0E         [24] 5736 	ljmp	00249$
                                   5737 ;	calc.c:279: case '<':
      0021D6                       5738 00237$:
                                   5739 ;	calc.c:280: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      0021D6 E5*00            [12] 5740 	mov	a,_bp
      0021D8 24 1A            [12] 5741 	add	a,#0x1a
      0021DA FF               [12] 5742 	mov	r7,a
      0021DB E5*00            [12] 5743 	mov	a,_bp
      0021DD 24 13            [12] 5744 	add	a,#0x13
      0021DF F8               [12] 5745 	mov	r0,a
      0021E0 A6 07            [24] 5746 	mov	@r0,ar7
      0021E2 08               [12] 5747 	inc	r0
      0021E3 76 00            [12] 5748 	mov	@r0,#0x00
      0021E5 08               [12] 5749 	inc	r0
      0021E6 76 40            [12] 5750 	mov	@r0,#0x40
      0021E8 E5*00            [12] 5751 	mov	a,_bp
      0021EA 24 17            [12] 5752 	add	a,#0x17
      0021EC F8               [12] 5753 	mov	r0,a
      0021ED 74 11            [12] 5754 	mov	a,#0x11
      0021EF 26               [12] 5755 	add	a,@r0
      0021F0 FA               [12] 5756 	mov	r2,a
      0021F1 74 40            [12] 5757 	mov	a,#0x40
      0021F3 08               [12] 5758 	inc	r0
      0021F4 36               [12] 5759 	addc	a,@r0
      0021F5 FB               [12] 5760 	mov	r3,a
      0021F6 08               [12] 5761 	inc	r0
      0021F7 86 04            [24] 5762 	mov	ar4,@r0
      0021F9 8A 82            [24] 5763 	mov	dpl,r2
      0021FB 8B 83            [24] 5764 	mov	dph,r3
      0021FD 8C F0            [24] 5765 	mov	b,r4
      0021FF 12r00r00         [24] 5766 	lcall	__gptrget
      002202 FD               [12] 5767 	mov	r5,a
      002203 A3               [24] 5768 	inc	dptr
      002204 12r00r00         [24] 5769 	lcall	__gptrget
      002207 FE               [12] 5770 	mov	r6,a
      002208 A3               [24] 5771 	inc	dptr
      002209 12r00r00         [24] 5772 	lcall	__gptrget
      00220C FF               [12] 5773 	mov	r7,a
      00220D C0 04            [24] 5774 	push	ar4
      00220F C0 03            [24] 5775 	push	ar3
      002211 C0 02            [24] 5776 	push	ar2
      002213 E5*00            [12] 5777 	mov	a,_bp
      002215 24 13            [12] 5778 	add	a,#0x13
      002217 F8               [12] 5779 	mov	r0,a
      002218 E6               [12] 5780 	mov	a,@r0
      002219 C0 E0            [24] 5781 	push	acc
      00221B 08               [12] 5782 	inc	r0
      00221C E6               [12] 5783 	mov	a,@r0
      00221D C0 E0            [24] 5784 	push	acc
      00221F 08               [12] 5785 	inc	r0
      002220 E6               [12] 5786 	mov	a,@r0
      002221 C0 E0            [24] 5787 	push	acc
      002223 8D 82            [24] 5788 	mov	dpl,r5
      002225 8E 83            [24] 5789 	mov	dph,r6
      002227 8F F0            [24] 5790 	mov	b,r7
      002229 12r00r00         [24] 5791 	lcall	_stack_pop
      00222C AE 82            [24] 5792 	mov	r6,dpl
      00222E AF 83            [24] 5793 	mov	r7,dph
      002230 15 81            [12] 5794 	dec	sp
      002232 15 81            [12] 5795 	dec	sp
      002234 15 81            [12] 5796 	dec	sp
      002236 D0 02            [24] 5797 	pop	ar2
      002238 D0 03            [24] 5798 	pop	ar3
      00223A D0 04            [24] 5799 	pop	ar4
      00223C EE               [12] 5800 	mov	a,r6
      00223D 4F               [12] 5801 	orl	a,r7
      00223E 70 0C            [24] 5802 	jnz	00242$
      002240 90r00r4E         [24] 5803 	mov	dptr,#___str_10
      002243 75 F0 80         [24] 5804 	mov	b,#0x80
      002246 12r00r00         [24] 5805 	lcall	_printstr
      002249 02r24r0E         [24] 5806 	ljmp	00249$
      00224C                       5807 00242$:
                                   5808 ;	calc.c:281: else if (!stack_pop(ctx->ps, &d1)) {
      00224C E5*00            [12] 5809 	mov	a,_bp
      00224E 24 1E            [12] 5810 	add	a,#0x1e
      002250 FF               [12] 5811 	mov	r7,a
      002251 E5*00            [12] 5812 	mov	a,_bp
      002253 24 13            [12] 5813 	add	a,#0x13
      002255 F8               [12] 5814 	mov	r0,a
      002256 A6 07            [24] 5815 	mov	@r0,ar7
      002258 08               [12] 5816 	inc	r0
      002259 76 00            [12] 5817 	mov	@r0,#0x00
      00225B 08               [12] 5818 	inc	r0
      00225C 76 40            [12] 5819 	mov	@r0,#0x40
      00225E 8A 82            [24] 5820 	mov	dpl,r2
      002260 8B 83            [24] 5821 	mov	dph,r3
      002262 8C F0            [24] 5822 	mov	b,r4
      002264 12r00r00         [24] 5823 	lcall	__gptrget
      002267 FD               [12] 5824 	mov	r5,a
      002268 A3               [24] 5825 	inc	dptr
      002269 12r00r00         [24] 5826 	lcall	__gptrget
      00226C FE               [12] 5827 	mov	r6,a
      00226D A3               [24] 5828 	inc	dptr
      00226E 12r00r00         [24] 5829 	lcall	__gptrget
      002271 FF               [12] 5830 	mov	r7,a
      002272 C0 04            [24] 5831 	push	ar4
      002274 C0 03            [24] 5832 	push	ar3
      002276 C0 02            [24] 5833 	push	ar2
      002278 E5*00            [12] 5834 	mov	a,_bp
      00227A 24 13            [12] 5835 	add	a,#0x13
      00227C F8               [12] 5836 	mov	r0,a
      00227D E6               [12] 5837 	mov	a,@r0
      00227E C0 E0            [24] 5838 	push	acc
      002280 08               [12] 5839 	inc	r0
      002281 E6               [12] 5840 	mov	a,@r0
      002282 C0 E0            [24] 5841 	push	acc
      002284 08               [12] 5842 	inc	r0
      002285 E6               [12] 5843 	mov	a,@r0
      002286 C0 E0            [24] 5844 	push	acc
      002288 8D 82            [24] 5845 	mov	dpl,r5
      00228A 8E 83            [24] 5846 	mov	dph,r6
      00228C 8F F0            [24] 5847 	mov	b,r7
      00228E 12r00r00         [24] 5848 	lcall	_stack_pop
      002291 AE 82            [24] 5849 	mov	r6,dpl
      002293 AF 83            [24] 5850 	mov	r7,dph
      002295 15 81            [12] 5851 	dec	sp
      002297 15 81            [12] 5852 	dec	sp
      002299 15 81            [12] 5853 	dec	sp
      00229B D0 02            [24] 5854 	pop	ar2
      00229D D0 03            [24] 5855 	pop	ar3
      00229F D0 04            [24] 5856 	pop	ar4
      0022A1 EE               [12] 5857 	mov	a,r6
      0022A2 4F               [12] 5858 	orl	a,r7
      0022A3 70 43            [24] 5859 	jnz	00239$
                                   5860 ;	calc.c:282: (void)stack_push(ctx->ps, d0);
      0022A5 8A 82            [24] 5861 	mov	dpl,r2
      0022A7 8B 83            [24] 5862 	mov	dph,r3
      0022A9 8C F0            [24] 5863 	mov	b,r4
      0022AB 12r00r00         [24] 5864 	lcall	__gptrget
      0022AE FD               [12] 5865 	mov	r5,a
      0022AF A3               [24] 5866 	inc	dptr
      0022B0 12r00r00         [24] 5867 	lcall	__gptrget
      0022B3 FE               [12] 5868 	mov	r6,a
      0022B4 A3               [24] 5869 	inc	dptr
      0022B5 12r00r00         [24] 5870 	lcall	__gptrget
      0022B8 FF               [12] 5871 	mov	r7,a
      0022B9 E5*00            [12] 5872 	mov	a,_bp
      0022BB 24 1A            [12] 5873 	add	a,#0x1a
      0022BD F8               [12] 5874 	mov	r0,a
      0022BE E6               [12] 5875 	mov	a,@r0
      0022BF C0 E0            [24] 5876 	push	acc
      0022C1 08               [12] 5877 	inc	r0
      0022C2 E6               [12] 5878 	mov	a,@r0
      0022C3 C0 E0            [24] 5879 	push	acc
      0022C5 08               [12] 5880 	inc	r0
      0022C6 E6               [12] 5881 	mov	a,@r0
      0022C7 C0 E0            [24] 5882 	push	acc
      0022C9 08               [12] 5883 	inc	r0
      0022CA E6               [12] 5884 	mov	a,@r0
      0022CB C0 E0            [24] 5885 	push	acc
      0022CD 8D 82            [24] 5886 	mov	dpl,r5
      0022CF 8E 83            [24] 5887 	mov	dph,r6
      0022D1 8F F0            [24] 5888 	mov	b,r7
      0022D3 12r00r00         [24] 5889 	lcall	_stack_push
      0022D6 E5 81            [12] 5890 	mov	a,sp
      0022D8 24 FC            [12] 5891 	add	a,#0xfc
      0022DA F5 81            [12] 5892 	mov	sp,a
                                   5893 ;	calc.c:283: printstr("\r\nstack underflow\r\n");
      0022DC 90r00r4E         [24] 5894 	mov	dptr,#___str_10
      0022DF 75 F0 80         [24] 5895 	mov	b,#0x80
      0022E2 12r00r00         [24] 5896 	lcall	_printstr
      0022E5 02r24r0E         [24] 5897 	ljmp	00249$
      0022E8                       5898 00239$:
                                   5899 ;	calc.c:285: d1 <<= d0;
      0022E8 E5*00            [12] 5900 	mov	a,_bp
      0022EA 24 1A            [12] 5901 	add	a,#0x1a
      0022EC F8               [12] 5902 	mov	r0,a
      0022ED 86 F0            [24] 5903 	mov	b,@r0
      0022EF 05 F0            [12] 5904 	inc	b
      0022F1 E5*00            [12] 5905 	mov	a,_bp
      0022F3 24 1E            [12] 5906 	add	a,#0x1e
      0022F5 F8               [12] 5907 	mov	r0,a
      0022F6 80 12            [24] 5908 	sjmp	00600$
      0022F8                       5909 00599$:
      0022F8 E6               [12] 5910 	mov	a,@r0
      0022F9 26               [12] 5911 	add	a,@r0
      0022FA F6               [12] 5912 	mov	@r0,a
      0022FB 08               [12] 5913 	inc	r0
      0022FC E6               [12] 5914 	mov	a,@r0
      0022FD 33               [12] 5915 	rlc	a
      0022FE F6               [12] 5916 	mov	@r0,a
      0022FF 08               [12] 5917 	inc	r0
      002300 E6               [12] 5918 	mov	a,@r0
      002301 33               [12] 5919 	rlc	a
      002302 F6               [12] 5920 	mov	@r0,a
      002303 08               [12] 5921 	inc	r0
      002304 E6               [12] 5922 	mov	a,@r0
      002305 33               [12] 5923 	rlc	a
      002306 F6               [12] 5924 	mov	@r0,a
      002307 18               [12] 5925 	dec	r0
      002308 18               [12] 5926 	dec	r0
      002309 18               [12] 5927 	dec	r0
      00230A                       5928 00600$:
      00230A D5 F0 EB         [24] 5929 	djnz	b,00599$
                                   5930 ;	calc.c:286: (void)stack_push(ctx->ps, d1);
      00230D 8A 82            [24] 5931 	mov	dpl,r2
      00230F 8B 83            [24] 5932 	mov	dph,r3
      002311 8C F0            [24] 5933 	mov	b,r4
      002313 12r00r00         [24] 5934 	lcall	__gptrget
      002316 FA               [12] 5935 	mov	r2,a
      002317 A3               [24] 5936 	inc	dptr
      002318 12r00r00         [24] 5937 	lcall	__gptrget
      00231B FB               [12] 5938 	mov	r3,a
      00231C A3               [24] 5939 	inc	dptr
      00231D 12r00r00         [24] 5940 	lcall	__gptrget
      002320 FC               [12] 5941 	mov	r4,a
      002321 E5*00            [12] 5942 	mov	a,_bp
      002323 24 1E            [12] 5943 	add	a,#0x1e
      002325 F8               [12] 5944 	mov	r0,a
      002326 E6               [12] 5945 	mov	a,@r0
      002327 C0 E0            [24] 5946 	push	acc
      002329 08               [12] 5947 	inc	r0
      00232A E6               [12] 5948 	mov	a,@r0
      00232B C0 E0            [24] 5949 	push	acc
      00232D 08               [12] 5950 	inc	r0
      00232E E6               [12] 5951 	mov	a,@r0
      00232F C0 E0            [24] 5952 	push	acc
      002331 08               [12] 5953 	inc	r0
      002332 E6               [12] 5954 	mov	a,@r0
      002333 C0 E0            [24] 5955 	push	acc
      002335 8A 82            [24] 5956 	mov	dpl,r2
      002337 8B 83            [24] 5957 	mov	dph,r3
      002339 8C F0            [24] 5958 	mov	b,r4
      00233B 12r00r00         [24] 5959 	lcall	_stack_push
      00233E E5 81            [12] 5960 	mov	a,sp
      002340 24 FC            [12] 5961 	add	a,#0xfc
      002342 F5 81            [12] 5962 	mov	sp,a
                                   5963 ;	calc.c:288: break;
      002344 02r24r0E         [24] 5964 	ljmp	00249$
                                   5965 ;	calc.c:289: case '~':
      002347                       5966 00244$:
                                   5967 ;	calc.c:290: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      002347 E5*00            [12] 5968 	mov	a,_bp
      002349 24 1A            [12] 5969 	add	a,#0x1a
      00234B FF               [12] 5970 	mov	r7,a
      00234C E5*00            [12] 5971 	mov	a,_bp
      00234E 24 13            [12] 5972 	add	a,#0x13
      002350 F8               [12] 5973 	mov	r0,a
      002351 A6 07            [24] 5974 	mov	@r0,ar7
      002353 08               [12] 5975 	inc	r0
      002354 76 00            [12] 5976 	mov	@r0,#0x00
      002356 08               [12] 5977 	inc	r0
      002357 76 40            [12] 5978 	mov	@r0,#0x40
      002359 E5*00            [12] 5979 	mov	a,_bp
      00235B 24 17            [12] 5980 	add	a,#0x17
      00235D F8               [12] 5981 	mov	r0,a
      00235E 74 11            [12] 5982 	mov	a,#0x11
      002360 26               [12] 5983 	add	a,@r0
      002361 FA               [12] 5984 	mov	r2,a
      002362 74 40            [12] 5985 	mov	a,#0x40
      002364 08               [12] 5986 	inc	r0
      002365 36               [12] 5987 	addc	a,@r0
      002366 FB               [12] 5988 	mov	r3,a
      002367 08               [12] 5989 	inc	r0
      002368 86 04            [24] 5990 	mov	ar4,@r0
      00236A 8A 82            [24] 5991 	mov	dpl,r2
      00236C 8B 83            [24] 5992 	mov	dph,r3
      00236E 8C F0            [24] 5993 	mov	b,r4
      002370 12r00r00         [24] 5994 	lcall	__gptrget
      002373 FD               [12] 5995 	mov	r5,a
      002374 A3               [24] 5996 	inc	dptr
      002375 12r00r00         [24] 5997 	lcall	__gptrget
      002378 FE               [12] 5998 	mov	r6,a
      002379 A3               [24] 5999 	inc	dptr
      00237A 12r00r00         [24] 6000 	lcall	__gptrget
      00237D FF               [12] 6001 	mov	r7,a
      00237E C0 04            [24] 6002 	push	ar4
      002380 C0 03            [24] 6003 	push	ar3
      002382 C0 02            [24] 6004 	push	ar2
      002384 E5*00            [12] 6005 	mov	a,_bp
      002386 24 13            [12] 6006 	add	a,#0x13
      002388 F8               [12] 6007 	mov	r0,a
      002389 E6               [12] 6008 	mov	a,@r0
      00238A C0 E0            [24] 6009 	push	acc
      00238C 08               [12] 6010 	inc	r0
      00238D E6               [12] 6011 	mov	a,@r0
      00238E C0 E0            [24] 6012 	push	acc
      002390 08               [12] 6013 	inc	r0
      002391 E6               [12] 6014 	mov	a,@r0
      002392 C0 E0            [24] 6015 	push	acc
      002394 8D 82            [24] 6016 	mov	dpl,r5
      002396 8E 83            [24] 6017 	mov	dph,r6
      002398 8F F0            [24] 6018 	mov	b,r7
      00239A 12r00r00         [24] 6019 	lcall	_stack_pop
      00239D AE 82            [24] 6020 	mov	r6,dpl
      00239F AF 83            [24] 6021 	mov	r7,dph
      0023A1 15 81            [12] 6022 	dec	sp
      0023A3 15 81            [12] 6023 	dec	sp
      0023A5 15 81            [12] 6024 	dec	sp
      0023A7 D0 02            [24] 6025 	pop	ar2
      0023A9 D0 03            [24] 6026 	pop	ar3
      0023AB D0 04            [24] 6027 	pop	ar4
      0023AD EE               [12] 6028 	mov	a,r6
      0023AE 4F               [12] 6029 	orl	a,r7
      0023AF 70 0B            [24] 6030 	jnz	00246$
      0023B1 90r00r4E         [24] 6031 	mov	dptr,#___str_10
      0023B4 75 F0 80         [24] 6032 	mov	b,#0x80
      0023B7 12r00r00         [24] 6033 	lcall	_printstr
      0023BA 80 52            [24] 6034 	sjmp	00249$
      0023BC                       6035 00246$:
                                   6036 ;	calc.c:292: d0 = ~d0;
      0023BC E5*00            [12] 6037 	mov	a,_bp
      0023BE 24 1A            [12] 6038 	add	a,#0x1a
      0023C0 F8               [12] 6039 	mov	r0,a
      0023C1 E6               [12] 6040 	mov	a,@r0
      0023C2 F4               [12] 6041 	cpl	a
      0023C3 F6               [12] 6042 	mov	@r0,a
      0023C4 08               [12] 6043 	inc	r0
      0023C5 E6               [12] 6044 	mov	a,@r0
      0023C6 F4               [12] 6045 	cpl	a
      0023C7 F6               [12] 6046 	mov	@r0,a
      0023C8 08               [12] 6047 	inc	r0
      0023C9 E6               [12] 6048 	mov	a,@r0
      0023CA F4               [12] 6049 	cpl	a
      0023CB F6               [12] 6050 	mov	@r0,a
      0023CC 08               [12] 6051 	inc	r0
      0023CD E6               [12] 6052 	mov	a,@r0
      0023CE F4               [12] 6053 	cpl	a
      0023CF F6               [12] 6054 	mov	@r0,a
                                   6055 ;	calc.c:293: (void)stack_push(ctx->ps, d0);
      0023D0 8A 82            [24] 6056 	mov	dpl,r2
      0023D2 8B 83            [24] 6057 	mov	dph,r3
      0023D4 8C F0            [24] 6058 	mov	b,r4
      0023D6 12r00r00         [24] 6059 	lcall	__gptrget
      0023D9 FA               [12] 6060 	mov	r2,a
      0023DA A3               [24] 6061 	inc	dptr
      0023DB 12r00r00         [24] 6062 	lcall	__gptrget
      0023DE FB               [12] 6063 	mov	r3,a
      0023DF A3               [24] 6064 	inc	dptr
      0023E0 12r00r00         [24] 6065 	lcall	__gptrget
      0023E3 FC               [12] 6066 	mov	r4,a
      0023E4 E5*00            [12] 6067 	mov	a,_bp
      0023E6 24 1A            [12] 6068 	add	a,#0x1a
      0023E8 F8               [12] 6069 	mov	r0,a
      0023E9 E6               [12] 6070 	mov	a,@r0
      0023EA C0 E0            [24] 6071 	push	acc
      0023EC 08               [12] 6072 	inc	r0
      0023ED E6               [12] 6073 	mov	a,@r0
      0023EE C0 E0            [24] 6074 	push	acc
      0023F0 08               [12] 6075 	inc	r0
      0023F1 E6               [12] 6076 	mov	a,@r0
      0023F2 C0 E0            [24] 6077 	push	acc
      0023F4 08               [12] 6078 	inc	r0
      0023F5 E6               [12] 6079 	mov	a,@r0
      0023F6 C0 E0            [24] 6080 	push	acc
      0023F8 8A 82            [24] 6081 	mov	dpl,r2
      0023FA 8B 83            [24] 6082 	mov	dph,r3
      0023FC 8C F0            [24] 6083 	mov	b,r4
      0023FE 12r00r00         [24] 6084 	lcall	_stack_push
      002401 E5 81            [12] 6085 	mov	a,sp
      002403 24 FC            [12] 6086 	add	a,#0xfc
      002405 F5 81            [12] 6087 	mov	sp,a
                                   6088 ;	calc.c:295: break;
                                   6089 ;	calc.c:296: default:
      002407 80 05            [24] 6090 	sjmp	00249$
      002409                       6091 00248$:
                                   6092 ;	calc.c:297: return UNDEF;
      002409 90 80 00         [24] 6093 	mov	dptr,#0x8000
                                   6094 ;	calc.c:298: }
      00240C 80 03            [24] 6095 	sjmp	00252$
      00240E                       6096 00249$:
                                   6097 ;	calc.c:300: return 1;
      00240E 90 00 01         [24] 6098 	mov	dptr,#0x0001
      002411                       6099 00252$:
                                   6100 ;	calc.c:301: }
      002411 85*00 81         [24] 6101 	mov	sp,_bp
      002414 D0*00            [24] 6102 	pop	_bp
      002416 22               [24] 6103 	ret
                                   6104 ;------------------------------------------------------------
                                   6105 ;Allocation info for local variables in function 'push_acc'
                                   6106 ;------------------------------------------------------------
                                   6107 ;delta                     Allocated to stack - _bp -5
                                   6108 ;_ctx                      Allocated to stack - _bp +5
                                   6109 ;ctx                       Allocated to registers r2 r3 r4 
                                   6110 ;sloc0                     Allocated to stack - _bp +1
                                   6111 ;------------------------------------------------------------
                                   6112 ;	calc.c:303: static int push_acc(void *_ctx, delta_t *delta) __reentrant {
                                   6113 ;	-----------------------------------------
                                   6114 ;	 function push_acc
                                   6115 ;	-----------------------------------------
      002417                       6116 _push_acc:
      002417 C0*00            [24] 6117 	push	_bp
      002419 E5 81            [12] 6118 	mov	a,sp
      00241B F5*00            [12] 6119 	mov	_bp,a
      00241D 24 07            [12] 6120 	add	a,#0x07
      00241F F5 81            [12] 6121 	mov	sp,a
      002421 C8               [12] 6122 	xch	a,r0
      002422 E5*00            [12] 6123 	mov	a,_bp
      002424 24 05            [12] 6124 	add	a,#0x05
      002426 C8               [12] 6125 	xch	a,r0
      002427 A6 82            [24] 6126 	mov	@r0,dpl
      002429 08               [12] 6127 	inc	r0
      00242A A6 83            [24] 6128 	mov	@r0,dph
      00242C 08               [12] 6129 	inc	r0
      00242D A6 F0            [24] 6130 	mov	@r0,b
                                   6131 ;	calc.c:304: calc_ctx_t *ctx = (calc_ctx_t *)_ctx;
      00242F E5*00            [12] 6132 	mov	a,_bp
      002431 24 05            [12] 6133 	add	a,#0x05
      002433 F8               [12] 6134 	mov	r0,a
      002434 86 02            [24] 6135 	mov	ar2,@r0
      002436 08               [12] 6136 	inc	r0
      002437 86 03            [24] 6137 	mov	ar3,@r0
      002439 08               [12] 6138 	inc	r0
      00243A 86 04            [24] 6139 	mov	ar4,@r0
                                   6140 ;	calc.c:308: ctx->acc_valid = 0;
      00243C 74 06            [12] 6141 	mov	a,#0x06
      00243E 2A               [12] 6142 	add	a,r2
      00243F FD               [12] 6143 	mov	r5,a
      002440 E4               [12] 6144 	clr	a
      002441 3B               [12] 6145 	addc	a,r3
      002442 FE               [12] 6146 	mov	r6,a
      002443 8C 07            [24] 6147 	mov	ar7,r4
      002445 8D 82            [24] 6148 	mov	dpl,r5
      002447 8E 83            [24] 6149 	mov	dph,r6
      002449 8F F0            [24] 6150 	mov	b,r7
      00244B E4               [12] 6151 	clr	a
      00244C 12r00r00         [24] 6152 	lcall	__gptrput
                                   6153 ;	calc.c:309: if (!stack_push(ctx->ps, ctx->acc)) printstr("\r\nstack overflow\r\n");
      00244F 74 02            [12] 6154 	mov	a,#0x02
      002451 2A               [12] 6155 	add	a,r2
      002452 FF               [12] 6156 	mov	r7,a
      002453 E4               [12] 6157 	clr	a
      002454 3B               [12] 6158 	addc	a,r3
      002455 FD               [12] 6159 	mov	r5,a
      002456 8C 06            [24] 6160 	mov	ar6,r4
      002458 8F 82            [24] 6161 	mov	dpl,r7
      00245A 8D 83            [24] 6162 	mov	dph,r5
      00245C 8E F0            [24] 6163 	mov	b,r6
      00245E A8*00            [24] 6164 	mov	r0,_bp
      002460 08               [12] 6165 	inc	r0
      002461 12r00r00         [24] 6166 	lcall	__gptrget
      002464 F6               [12] 6167 	mov	@r0,a
      002465 A3               [24] 6168 	inc	dptr
      002466 12r00r00         [24] 6169 	lcall	__gptrget
      002469 08               [12] 6170 	inc	r0
      00246A F6               [12] 6171 	mov	@r0,a
      00246B A3               [24] 6172 	inc	dptr
      00246C 12r00r00         [24] 6173 	lcall	__gptrget
      00246F 08               [12] 6174 	inc	r0
      002470 F6               [12] 6175 	mov	@r0,a
      002471 A3               [24] 6176 	inc	dptr
      002472 12r00r00         [24] 6177 	lcall	__gptrget
      002475 08               [12] 6178 	inc	r0
      002476 F6               [12] 6179 	mov	@r0,a
      002477 74 11            [12] 6180 	mov	a,#0x11
      002479 2A               [12] 6181 	add	a,r2
      00247A FA               [12] 6182 	mov	r2,a
      00247B 74 40            [12] 6183 	mov	a,#0x40
      00247D 3B               [12] 6184 	addc	a,r3
      00247E FB               [12] 6185 	mov	r3,a
      00247F 8C 07            [24] 6186 	mov	ar7,r4
      002481 8A 82            [24] 6187 	mov	dpl,r2
      002483 8B 83            [24] 6188 	mov	dph,r3
      002485 8F F0            [24] 6189 	mov	b,r7
      002487 12r00r00         [24] 6190 	lcall	__gptrget
      00248A FA               [12] 6191 	mov	r2,a
      00248B A3               [24] 6192 	inc	dptr
      00248C 12r00r00         [24] 6193 	lcall	__gptrget
      00248F FB               [12] 6194 	mov	r3,a
      002490 A3               [24] 6195 	inc	dptr
      002491 12r00r00         [24] 6196 	lcall	__gptrget
      002494 FF               [12] 6197 	mov	r7,a
      002495 A8*00            [24] 6198 	mov	r0,_bp
      002497 08               [12] 6199 	inc	r0
      002498 E6               [12] 6200 	mov	a,@r0
      002499 C0 E0            [24] 6201 	push	acc
      00249B 08               [12] 6202 	inc	r0
      00249C E6               [12] 6203 	mov	a,@r0
      00249D C0 E0            [24] 6204 	push	acc
      00249F 08               [12] 6205 	inc	r0
      0024A0 E6               [12] 6206 	mov	a,@r0
      0024A1 C0 E0            [24] 6207 	push	acc
      0024A3 08               [12] 6208 	inc	r0
      0024A4 E6               [12] 6209 	mov	a,@r0
      0024A5 C0 E0            [24] 6210 	push	acc
      0024A7 8A 82            [24] 6211 	mov	dpl,r2
      0024A9 8B 83            [24] 6212 	mov	dph,r3
      0024AB 8F F0            [24] 6213 	mov	b,r7
      0024AD 12r00r00         [24] 6214 	lcall	_stack_push
      0024B0 AE 82            [24] 6215 	mov	r6,dpl
      0024B2 AF 83            [24] 6216 	mov	r7,dph
      0024B4 E5 81            [12] 6217 	mov	a,sp
      0024B6 24 FC            [12] 6218 	add	a,#0xfc
      0024B8 F5 81            [12] 6219 	mov	sp,a
      0024BA EE               [12] 6220 	mov	a,r6
      0024BB 4F               [12] 6221 	orl	a,r7
      0024BC 70 09            [24] 6222 	jnz	00102$
      0024BE 90r00r9D         [24] 6223 	mov	dptr,#___str_13
      0024C1 75 F0 80         [24] 6224 	mov	b,#0x80
      0024C4 12r00r00         [24] 6225 	lcall	_printstr
      0024C7                       6226 00102$:
                                   6227 ;	calc.c:311: if (delta->event == EVENT_OP) return operator(_ctx, delta);
      0024C7 E5*00            [12] 6228 	mov	a,_bp
      0024C9 24 FB            [12] 6229 	add	a,#0xfb
      0024CB F8               [12] 6230 	mov	r0,a
      0024CC 86 05            [24] 6231 	mov	ar5,@r0
      0024CE 08               [12] 6232 	inc	r0
      0024CF 86 06            [24] 6233 	mov	ar6,@r0
      0024D1 08               [12] 6234 	inc	r0
      0024D2 86 07            [24] 6235 	mov	ar7,@r0
      0024D4 74 02            [12] 6236 	mov	a,#0x02
      0024D6 2D               [12] 6237 	add	a,r5
      0024D7 FA               [12] 6238 	mov	r2,a
      0024D8 E4               [12] 6239 	clr	a
      0024D9 3E               [12] 6240 	addc	a,r6
      0024DA FB               [12] 6241 	mov	r3,a
      0024DB 8F 04            [24] 6242 	mov	ar4,r7
      0024DD 8A 82            [24] 6243 	mov	dpl,r2
      0024DF 8B 83            [24] 6244 	mov	dph,r3
      0024E1 8C F0            [24] 6245 	mov	b,r4
      0024E3 12r00r00         [24] 6246 	lcall	__gptrget
      0024E6 FA               [12] 6247 	mov	r2,a
      0024E7 A3               [24] 6248 	inc	dptr
      0024E8 12r00r00         [24] 6249 	lcall	__gptrget
      0024EB FB               [12] 6250 	mov	r3,a
      0024EC BA 02 29         [24] 6251 	cjne	r2,#0x02,00104$
      0024EF BB 00 26         [24] 6252 	cjne	r3,#0x00,00104$
      0024F2 C0 05            [24] 6253 	push	ar5
      0024F4 C0 06            [24] 6254 	push	ar6
      0024F6 C0 07            [24] 6255 	push	ar7
      0024F8 E5*00            [12] 6256 	mov	a,_bp
      0024FA 24 05            [12] 6257 	add	a,#0x05
      0024FC F8               [12] 6258 	mov	r0,a
      0024FD 86 82            [24] 6259 	mov	dpl,@r0
      0024FF 08               [12] 6260 	inc	r0
      002500 86 83            [24] 6261 	mov	dph,@r0
      002502 08               [12] 6262 	inc	r0
      002503 86 F0            [24] 6263 	mov	b,@r0
      002505 12r06r7C         [24] 6264 	lcall	_operator
      002508 AE 82            [24] 6265 	mov	r6,dpl
      00250A AF 83            [24] 6266 	mov	r7,dph
      00250C 15 81            [12] 6267 	dec	sp
      00250E 15 81            [12] 6268 	dec	sp
      002510 15 81            [12] 6269 	dec	sp
      002512 8E 82            [24] 6270 	mov	dpl,r6
      002514 8F 83            [24] 6271 	mov	dph,r7
      002516 80 03            [24] 6272 	sjmp	00106$
      002518                       6273 00104$:
                                   6274 ;	calc.c:312: else return 1;
      002518 90 00 01         [24] 6275 	mov	dptr,#0x0001
      00251B                       6276 00106$:
                                   6277 ;	calc.c:313: }
      00251B 85*00 81         [24] 6278 	mov	sp,_bp
      00251E D0*00            [24] 6279 	pop	_bp
      002520 22               [24] 6280 	ret
                                   6281 ;------------------------------------------------------------
                                   6282 ;Allocation info for local variables in function 'reset_acc'
                                   6283 ;------------------------------------------------------------
                                   6284 ;delta                     Allocated to stack - _bp -5
                                   6285 ;_ctx                      Allocated to registers r5 r6 r7 
                                   6286 ;ctx                       Allocated to registers r5 r6 r7 
                                   6287 ;------------------------------------------------------------
                                   6288 ;	calc.c:315: static int reset_acc(void *_ctx, delta_t *delta) __reentrant {
                                   6289 ;	-----------------------------------------
                                   6290 ;	 function reset_acc
                                   6291 ;	-----------------------------------------
      002521                       6292 _reset_acc:
      002521 C0*00            [24] 6293 	push	_bp
      002523 85 81*00         [24] 6294 	mov	_bp,sp
      002526 AD 82            [24] 6295 	mov	r5,dpl
      002528 AE 83            [24] 6296 	mov	r6,dph
      00252A AF F0            [24] 6297 	mov	r7,b
                                   6298 ;	calc.c:316: calc_ctx_t *ctx = (calc_ctx_t *)_ctx;
                                   6299 ;	calc.c:318: if (delta->event == EVENT_RSTA_I) ctx->acc_valid = 0;
      00252C E5*00            [12] 6300 	mov	a,_bp
      00252E 24 FB            [12] 6301 	add	a,#0xfb
      002530 F8               [12] 6302 	mov	r0,a
      002531 86 02            [24] 6303 	mov	ar2,@r0
      002533 08               [12] 6304 	inc	r0
      002534 86 03            [24] 6305 	mov	ar3,@r0
      002536 08               [12] 6306 	inc	r0
      002537 86 04            [24] 6307 	mov	ar4,@r0
      002539 74 02            [12] 6308 	mov	a,#0x02
      00253B 2A               [12] 6309 	add	a,r2
      00253C FA               [12] 6310 	mov	r2,a
      00253D E4               [12] 6311 	clr	a
      00253E 3B               [12] 6312 	addc	a,r3
      00253F FB               [12] 6313 	mov	r3,a
      002540 8A 82            [24] 6314 	mov	dpl,r2
      002542 8B 83            [24] 6315 	mov	dph,r3
      002544 8C F0            [24] 6316 	mov	b,r4
      002546 12r00r00         [24] 6317 	lcall	__gptrget
      002549 FA               [12] 6318 	mov	r2,a
      00254A A3               [24] 6319 	inc	dptr
      00254B 12r00r00         [24] 6320 	lcall	__gptrget
      00254E FB               [12] 6321 	mov	r3,a
      00254F BA 07 16         [24] 6322 	cjne	r2,#0x07,00102$
      002552 BB 00 13         [24] 6323 	cjne	r3,#0x00,00102$
      002555 74 06            [12] 6324 	mov	a,#0x06
      002557 2D               [12] 6325 	add	a,r5
      002558 FA               [12] 6326 	mov	r2,a
      002559 E4               [12] 6327 	clr	a
      00255A 3E               [12] 6328 	addc	a,r6
      00255B FB               [12] 6329 	mov	r3,a
      00255C 8F 04            [24] 6330 	mov	ar4,r7
      00255E 8A 82            [24] 6331 	mov	dpl,r2
      002560 8B 83            [24] 6332 	mov	dph,r3
      002562 8C F0            [24] 6333 	mov	b,r4
      002564 E4               [12] 6334 	clr	a
      002565 12r00r00         [24] 6335 	lcall	__gptrput
      002568                       6336 00102$:
                                   6337 ;	calc.c:319: ctx->acc = 0l;
      002568 74 02            [12] 6338 	mov	a,#0x02
      00256A 2D               [12] 6339 	add	a,r5
      00256B FD               [12] 6340 	mov	r5,a
      00256C E4               [12] 6341 	clr	a
      00256D 3E               [12] 6342 	addc	a,r6
      00256E FE               [12] 6343 	mov	r6,a
      00256F 8D 82            [24] 6344 	mov	dpl,r5
      002571 8E 83            [24] 6345 	mov	dph,r6
      002573 8F F0            [24] 6346 	mov	b,r7
      002575 E4               [12] 6347 	clr	a
      002576 12r00r00         [24] 6348 	lcall	__gptrput
      002579 A3               [24] 6349 	inc	dptr
      00257A 12r00r00         [24] 6350 	lcall	__gptrput
      00257D A3               [24] 6351 	inc	dptr
      00257E 12r00r00         [24] 6352 	lcall	__gptrput
      002581 A3               [24] 6353 	inc	dptr
      002582 12r00r00         [24] 6354 	lcall	__gptrput
                                   6355 ;	calc.c:321: return 1;
      002585 90 00 01         [24] 6356 	mov	dptr,#0x0001
                                   6357 ;	calc.c:322: }
      002588 D0*00            [24] 6358 	pop	_bp
      00258A 22               [24] 6359 	ret
                                   6360 ;------------------------------------------------------------
                                   6361 ;Allocation info for local variables in function 'reset_base'
                                   6362 ;------------------------------------------------------------
                                   6363 ;delta                     Allocated to stack - _bp -5
                                   6364 ;_ctx                      Allocated to registers r5 r6 r7 
                                   6365 ;ctx                       Allocated to registers r5 r6 r7 
                                   6366 ;------------------------------------------------------------
                                   6367 ;	calc.c:324: static int reset_base(void *_ctx, delta_t *delta) __reentrant {
                                   6368 ;	-----------------------------------------
                                   6369 ;	 function reset_base
                                   6370 ;	-----------------------------------------
      00258B                       6371 _reset_base:
      00258B C0*00            [24] 6372 	push	_bp
      00258D 85 81*00         [24] 6373 	mov	_bp,sp
      002590 AD 82            [24] 6374 	mov	r5,dpl
      002592 AE 83            [24] 6375 	mov	r6,dph
      002594 AF F0            [24] 6376 	mov	r7,b
                                   6377 ;	calc.c:325: calc_ctx_t *ctx = (calc_ctx_t *)_ctx;
                                   6378 ;	calc.c:329: switch (ctx->digit[0]) {
      002596 74 07            [12] 6379 	mov	a,#0x07
      002598 2D               [12] 6380 	add	a,r5
      002599 FA               [12] 6381 	mov	r2,a
      00259A E4               [12] 6382 	clr	a
      00259B 3E               [12] 6383 	addc	a,r6
      00259C FB               [12] 6384 	mov	r3,a
      00259D 8F 04            [24] 6385 	mov	ar4,r7
      00259F 8A 82            [24] 6386 	mov	dpl,r2
      0025A1 8B 83            [24] 6387 	mov	dph,r3
      0025A3 8C F0            [24] 6388 	mov	b,r4
      0025A5 12r00r00         [24] 6389 	lcall	__gptrget
      0025A8 FC               [12] 6390 	mov	r4,a
      0025A9 BC 48 02         [24] 6391 	cjne	r4,#0x48,00124$
      0025AC 80 0F            [24] 6392 	sjmp	00101$
      0025AE                       6393 00124$:
      0025AE BC 4F 02         [24] 6394 	cjne	r4,#0x4f,00125$
      0025B1 80 2E            [24] 6395 	sjmp	00103$
      0025B3                       6396 00125$:
      0025B3 BC 68 02         [24] 6397 	cjne	r4,#0x68,00126$
      0025B6 80 17            [24] 6398 	sjmp	00102$
      0025B8                       6399 00126$:
                                   6400 ;	calc.c:330: case 'H':
      0025B8 BC 6F 48         [24] 6401 	cjne	r4,#0x6f,00105$
      0025BB 80 36            [24] 6402 	sjmp	00104$
      0025BD                       6403 00101$:
                                   6404 ;	calc.c:331: ctx->base = 16;
      0025BD 8D 82            [24] 6405 	mov	dpl,r5
      0025BF 8E 83            [24] 6406 	mov	dph,r6
      0025C1 8F F0            [24] 6407 	mov	b,r7
      0025C3 74 10            [12] 6408 	mov	a,#0x10
      0025C5 12r00r00         [24] 6409 	lcall	__gptrput
      0025C8 A3               [24] 6410 	inc	dptr
      0025C9 E4               [12] 6411 	clr	a
      0025CA 12r00r00         [24] 6412 	lcall	__gptrput
                                   6413 ;	calc.c:332: break;
                                   6414 ;	calc.c:333: case 'h':
      0025CD 80 34            [24] 6415 	sjmp	00105$
      0025CF                       6416 00102$:
                                   6417 ;	calc.c:334: ctx->base = 10;
      0025CF 8D 82            [24] 6418 	mov	dpl,r5
      0025D1 8E 83            [24] 6419 	mov	dph,r6
      0025D3 8F F0            [24] 6420 	mov	b,r7
      0025D5 74 0A            [12] 6421 	mov	a,#0x0a
      0025D7 12r00r00         [24] 6422 	lcall	__gptrput
      0025DA A3               [24] 6423 	inc	dptr
      0025DB E4               [12] 6424 	clr	a
      0025DC 12r00r00         [24] 6425 	lcall	__gptrput
                                   6426 ;	calc.c:335: break;
                                   6427 ;	calc.c:336: case 'O':
      0025DF 80 22            [24] 6428 	sjmp	00105$
      0025E1                       6429 00103$:
                                   6430 ;	calc.c:337: ctx->base = 8;
      0025E1 8D 82            [24] 6431 	mov	dpl,r5
      0025E3 8E 83            [24] 6432 	mov	dph,r6
      0025E5 8F F0            [24] 6433 	mov	b,r7
      0025E7 74 08            [12] 6434 	mov	a,#0x08
      0025E9 12r00r00         [24] 6435 	lcall	__gptrput
      0025EC A3               [24] 6436 	inc	dptr
      0025ED E4               [12] 6437 	clr	a
      0025EE 12r00r00         [24] 6438 	lcall	__gptrput
                                   6439 ;	calc.c:338: break;
                                   6440 ;	calc.c:339: case 'o':
      0025F1 80 10            [24] 6441 	sjmp	00105$
      0025F3                       6442 00104$:
                                   6443 ;	calc.c:340: ctx->base = 2;
      0025F3 8D 82            [24] 6444 	mov	dpl,r5
      0025F5 8E 83            [24] 6445 	mov	dph,r6
      0025F7 8F F0            [24] 6446 	mov	b,r7
      0025F9 74 02            [12] 6447 	mov	a,#0x02
      0025FB 12r00r00         [24] 6448 	lcall	__gptrput
      0025FE A3               [24] 6449 	inc	dptr
      0025FF E4               [12] 6450 	clr	a
      002600 12r00r00         [24] 6451 	lcall	__gptrput
                                   6452 ;	calc.c:342: }
      002603                       6453 00105$:
                                   6454 ;	calc.c:344: return 1;
      002603 90 00 01         [24] 6455 	mov	dptr,#0x0001
                                   6456 ;	calc.c:345: }
      002606 D0*00            [24] 6457 	pop	_bp
      002608 22               [24] 6458 	ret
                                   6459 ;------------------------------------------------------------
                                   6460 ;Allocation info for local variables in function 'status'
                                   6461 ;------------------------------------------------------------
                                   6462 ;delta                     Allocated to stack - _bp -5
                                   6463 ;_ctx                      Allocated to registers r5 r6 r7 
                                   6464 ;ctx                       Allocated to stack - _bp +9
                                   6465 ;vals                      Allocated to stack - _bp +12
                                   6466 ;n                         Allocated to registers r6 r7 
                                   6467 ;__1310720011              Allocated to registers r5 r6 r7 r4 
                                   6468 ;d                         Allocated to registers 
                                   6469 ;__1310720013              Allocated to registers r2 r3 r4 r5 
                                   6470 ;d                         Allocated to registers 
                                   6471 ;__1310720015              Allocated to registers r4 r5 r6 r7 
                                   6472 ;d                         Allocated to registers 
                                   6473 ;__1310720017              Allocated to registers r2 r3 r4 r5 
                                   6474 ;d                         Allocated to registers 
                                   6475 ;__1310720019              Allocated to registers r4 r5 r6 r7 
                                   6476 ;d                         Allocated to registers 
                                   6477 ;sloc0                     Allocated to stack - _bp +1
                                   6478 ;sloc1                     Allocated to stack - _bp +4
                                   6479 ;sloc2                     Allocated to stack - _bp +7
                                   6480 ;------------------------------------------------------------
                                   6481 ;	calc.c:347: static int status(void *_ctx, delta_t *delta) __reentrant {
                                   6482 ;	-----------------------------------------
                                   6483 ;	 function status
                                   6484 ;	-----------------------------------------
      002609                       6485 _status:
      002609 C0*00            [24] 6486 	push	_bp
      00260B E5 81            [12] 6487 	mov	a,sp
      00260D F5*00            [12] 6488 	mov	_bp,a
      00260F 24 13            [12] 6489 	add	a,#0x13
      002611 F5 81            [12] 6490 	mov	sp,a
      002613 AD 82            [24] 6491 	mov	r5,dpl
      002615 AE 83            [24] 6492 	mov	r6,dph
      002617 AF F0            [24] 6493 	mov	r7,b
                                   6494 ;	calc.c:348: calc_ctx_t *ctx = (calc_ctx_t *)_ctx;
      002619 E5*00            [12] 6495 	mov	a,_bp
      00261B 24 09            [12] 6496 	add	a,#0x09
      00261D F8               [12] 6497 	mov	r0,a
      00261E A6 05            [24] 6498 	mov	@r0,ar5
      002620 08               [12] 6499 	inc	r0
      002621 A6 06            [24] 6500 	mov	@r0,ar6
      002623 08               [12] 6501 	inc	r0
      002624 A6 07            [24] 6502 	mov	@r0,ar7
                                   6503 ;	calc.c:354: printf("\r\nPS = %p, SS = %p, base = %d\r\n", ctx->ps, ctx->ss, ctx->base);
      002626 E5*00            [12] 6504 	mov	a,_bp
      002628 24 09            [12] 6505 	add	a,#0x09
      00262A F8               [12] 6506 	mov	r0,a
      00262B 86 82            [24] 6507 	mov	dpl,@r0
      00262D 08               [12] 6508 	inc	r0
      00262E 86 83            [24] 6509 	mov	dph,@r0
      002630 08               [12] 6510 	inc	r0
      002631 86 F0            [24] 6511 	mov	b,@r0
      002633 E5*00            [12] 6512 	mov	a,_bp
      002635 24 07            [12] 6513 	add	a,#0x07
      002637 F9               [12] 6514 	mov	r1,a
      002638 12r00r00         [24] 6515 	lcall	__gptrget
      00263B F7               [12] 6516 	mov	@r1,a
      00263C A3               [24] 6517 	inc	dptr
      00263D 12r00r00         [24] 6518 	lcall	__gptrget
      002640 09               [12] 6519 	inc	r1
      002641 F7               [12] 6520 	mov	@r1,a
      002642 E5*00            [12] 6521 	mov	a,_bp
      002644 24 09            [12] 6522 	add	a,#0x09
      002646 F8               [12] 6523 	mov	r0,a
      002647 A9*00            [24] 6524 	mov	r1,_bp
      002649 09               [12] 6525 	inc	r1
      00264A 74 14            [12] 6526 	mov	a,#0x14
      00264C 26               [12] 6527 	add	a,@r0
      00264D F7               [12] 6528 	mov	@r1,a
      00264E 74 40            [12] 6529 	mov	a,#0x40
      002650 08               [12] 6530 	inc	r0
      002651 36               [12] 6531 	addc	a,@r0
      002652 09               [12] 6532 	inc	r1
      002653 F7               [12] 6533 	mov	@r1,a
      002654 08               [12] 6534 	inc	r0
      002655 09               [12] 6535 	inc	r1
      002656 E6               [12] 6536 	mov	a,@r0
      002657 F7               [12] 6537 	mov	@r1,a
      002658 A8*00            [24] 6538 	mov	r0,_bp
      00265A 08               [12] 6539 	inc	r0
      00265B 86 82            [24] 6540 	mov	dpl,@r0
      00265D 08               [12] 6541 	inc	r0
      00265E 86 83            [24] 6542 	mov	dph,@r0
      002660 08               [12] 6543 	inc	r0
      002661 86 F0            [24] 6544 	mov	b,@r0
      002663 12r00r00         [24] 6545 	lcall	__gptrget
      002666 FA               [12] 6546 	mov	r2,a
      002667 A3               [24] 6547 	inc	dptr
      002668 12r00r00         [24] 6548 	lcall	__gptrget
      00266B FE               [12] 6549 	mov	r6,a
      00266C A3               [24] 6550 	inc	dptr
      00266D 12r00r00         [24] 6551 	lcall	__gptrget
      002670 FF               [12] 6552 	mov	r7,a
      002671 E5*00            [12] 6553 	mov	a,_bp
      002673 24 09            [12] 6554 	add	a,#0x09
      002675 F8               [12] 6555 	mov	r0,a
      002676 E5*00            [12] 6556 	mov	a,_bp
      002678 24 04            [12] 6557 	add	a,#0x04
      00267A F9               [12] 6558 	mov	r1,a
      00267B 74 11            [12] 6559 	mov	a,#0x11
      00267D 26               [12] 6560 	add	a,@r0
      00267E F7               [12] 6561 	mov	@r1,a
      00267F 74 40            [12] 6562 	mov	a,#0x40
      002681 08               [12] 6563 	inc	r0
      002682 36               [12] 6564 	addc	a,@r0
      002683 09               [12] 6565 	inc	r1
      002684 F7               [12] 6566 	mov	@r1,a
      002685 08               [12] 6567 	inc	r0
      002686 09               [12] 6568 	inc	r1
      002687 E6               [12] 6569 	mov	a,@r0
      002688 F7               [12] 6570 	mov	@r1,a
      002689 E5*00            [12] 6571 	mov	a,_bp
      00268B 24 04            [12] 6572 	add	a,#0x04
      00268D F8               [12] 6573 	mov	r0,a
      00268E 86 82            [24] 6574 	mov	dpl,@r0
      002690 08               [12] 6575 	inc	r0
      002691 86 83            [24] 6576 	mov	dph,@r0
      002693 08               [12] 6577 	inc	r0
      002694 86 F0            [24] 6578 	mov	b,@r0
      002696 12r00r00         [24] 6579 	lcall	__gptrget
      002699 FB               [12] 6580 	mov	r3,a
      00269A A3               [24] 6581 	inc	dptr
      00269B 12r00r00         [24] 6582 	lcall	__gptrget
      00269E FC               [12] 6583 	mov	r4,a
      00269F A3               [24] 6584 	inc	dptr
      0026A0 12r00r00         [24] 6585 	lcall	__gptrget
      0026A3 FD               [12] 6586 	mov	r5,a
      0026A4 E5*00            [12] 6587 	mov	a,_bp
      0026A6 24 07            [12] 6588 	add	a,#0x07
      0026A8 F8               [12] 6589 	mov	r0,a
      0026A9 E6               [12] 6590 	mov	a,@r0
      0026AA C0 E0            [24] 6591 	push	acc
      0026AC 08               [12] 6592 	inc	r0
      0026AD E6               [12] 6593 	mov	a,@r0
      0026AE C0 E0            [24] 6594 	push	acc
      0026B0 C0 02            [24] 6595 	push	ar2
      0026B2 C0 06            [24] 6596 	push	ar6
      0026B4 C0 07            [24] 6597 	push	ar7
      0026B6 C0 03            [24] 6598 	push	ar3
      0026B8 C0 04            [24] 6599 	push	ar4
      0026BA C0 05            [24] 6600 	push	ar5
      0026BC 74rC5            [12] 6601 	mov	a,#___str_15
      0026BE C0 E0            [24] 6602 	push	acc
      0026C0 74s00            [12] 6603 	mov	a,#(___str_15 >> 8)
      0026C2 C0 E0            [24] 6604 	push	acc
      0026C4 74 80            [12] 6605 	mov	a,#0x80
      0026C6 C0 E0            [24] 6606 	push	acc
      0026C8 12r00r00         [24] 6607 	lcall	_printf
      0026CB E5 81            [12] 6608 	mov	a,sp
      0026CD 24 F5            [12] 6609 	add	a,#0xf5
      0026CF F5 81            [12] 6610 	mov	sp,a
                                   6611 ;	calc.c:356: printstr("ACC\t");
      0026D1 90r00rE5         [24] 6612 	mov	dptr,#___str_16
      0026D4 75 F0 80         [24] 6613 	mov	b,#0x80
      0026D7 12r00r00         [24] 6614 	lcall	_printstr
                                   6615 ;	calc.c:357: if (ctx->acc_valid) printall(ctx->acc);
      0026DA E5*00            [12] 6616 	mov	a,_bp
      0026DC 24 09            [12] 6617 	add	a,#0x09
      0026DE F8               [12] 6618 	mov	r0,a
      0026DF 74 06            [12] 6619 	mov	a,#0x06
      0026E1 26               [12] 6620 	add	a,@r0
      0026E2 FD               [12] 6621 	mov	r5,a
      0026E3 E4               [12] 6622 	clr	a
      0026E4 08               [12] 6623 	inc	r0
      0026E5 36               [12] 6624 	addc	a,@r0
      0026E6 FE               [12] 6625 	mov	r6,a
      0026E7 08               [12] 6626 	inc	r0
      0026E8 86 07            [24] 6627 	mov	ar7,@r0
      0026EA 8D 82            [24] 6628 	mov	dpl,r5
      0026EC 8E 83            [24] 6629 	mov	dph,r6
      0026EE 8F F0            [24] 6630 	mov	b,r7
      0026F0 12r00r00         [24] 6631 	lcall	__gptrget
      0026F3 70 03            [24] 6632 	jnz	00143$
      0026F5 02r27rB2         [24] 6633 	ljmp	00102$
      0026F8                       6634 00143$:
      0026F8 E5*00            [12] 6635 	mov	a,_bp
      0026FA 24 09            [12] 6636 	add	a,#0x09
      0026FC F8               [12] 6637 	mov	r0,a
      0026FD 74 02            [12] 6638 	mov	a,#0x02
      0026FF 26               [12] 6639 	add	a,@r0
      002700 FD               [12] 6640 	mov	r5,a
      002701 E4               [12] 6641 	clr	a
      002702 08               [12] 6642 	inc	r0
      002703 36               [12] 6643 	addc	a,@r0
      002704 FE               [12] 6644 	mov	r6,a
      002705 08               [12] 6645 	inc	r0
      002706 86 07            [24] 6646 	mov	ar7,@r0
      002708 8D 82            [24] 6647 	mov	dpl,r5
      00270A 8E 83            [24] 6648 	mov	dph,r6
      00270C 8F F0            [24] 6649 	mov	b,r7
      00270E 12r00r00         [24] 6650 	lcall	__gptrget
      002711 FD               [12] 6651 	mov	r5,a
      002712 A3               [24] 6652 	inc	dptr
      002713 12r00r00         [24] 6653 	lcall	__gptrget
      002716 FE               [12] 6654 	mov	r6,a
      002717 A3               [24] 6655 	inc	dptr
      002718 12r00r00         [24] 6656 	lcall	__gptrget
      00271B FF               [12] 6657 	mov	r7,a
      00271C A3               [24] 6658 	inc	dptr
      00271D 12r00r00         [24] 6659 	lcall	__gptrget
      002720 FC               [12] 6660 	mov	r4,a
                                   6661 ;	calc.c:18: printf("%08lx\t", d);
      002721 C0 07            [24] 6662 	push	ar7
      002723 C0 06            [24] 6663 	push	ar6
      002725 C0 05            [24] 6664 	push	ar5
      002727 C0 04            [24] 6665 	push	ar4
      002729 C0 05            [24] 6666 	push	ar5
      00272B C0 06            [24] 6667 	push	ar6
      00272D C0 07            [24] 6668 	push	ar7
      00272F C0 04            [24] 6669 	push	ar4
      002731 74r00            [12] 6670 	mov	a,#___str_0
      002733 C0 E0            [24] 6671 	push	acc
      002735 74s00            [12] 6672 	mov	a,#(___str_0 >> 8)
      002737 C0 E0            [24] 6673 	push	acc
      002739 74 80            [12] 6674 	mov	a,#0x80
      00273B C0 E0            [24] 6675 	push	acc
      00273D 12r00r00         [24] 6676 	lcall	_printf
      002740 E5 81            [12] 6677 	mov	a,sp
      002742 24 F9            [12] 6678 	add	a,#0xf9
      002744 F5 81            [12] 6679 	mov	sp,a
      002746 D0 04            [24] 6680 	pop	ar4
      002748 D0 05            [24] 6681 	pop	ar5
      00274A D0 06            [24] 6682 	pop	ar6
      00274C D0 07            [24] 6683 	pop	ar7
                                   6684 ;	calc.c:19: printf("% 11ld\t", d);
      00274E C0 07            [24] 6685 	push	ar7
      002750 C0 06            [24] 6686 	push	ar6
      002752 C0 05            [24] 6687 	push	ar5
      002754 C0 04            [24] 6688 	push	ar4
      002756 C0 05            [24] 6689 	push	ar5
      002758 C0 06            [24] 6690 	push	ar6
      00275A C0 07            [24] 6691 	push	ar7
      00275C C0 04            [24] 6692 	push	ar4
      00275E 74r07            [12] 6693 	mov	a,#___str_1
      002760 C0 E0            [24] 6694 	push	acc
      002762 74s00            [12] 6695 	mov	a,#(___str_1 >> 8)
      002764 C0 E0            [24] 6696 	push	acc
      002766 74 80            [12] 6697 	mov	a,#0x80
      002768 C0 E0            [24] 6698 	push	acc
      00276A 12r00r00         [24] 6699 	lcall	_printf
      00276D E5 81            [12] 6700 	mov	a,sp
      00276F 24 F9            [12] 6701 	add	a,#0xf9
      002771 F5 81            [12] 6702 	mov	sp,a
      002773 D0 04            [24] 6703 	pop	ar4
      002775 D0 05            [24] 6704 	pop	ar5
      002777 D0 06            [24] 6705 	pop	ar6
      002779 D0 07            [24] 6706 	pop	ar7
                                   6707 ;	calc.c:20: printf("%011lo\t", d);
      00277B C0 07            [24] 6708 	push	ar7
      00277D C0 06            [24] 6709 	push	ar6
      00277F C0 05            [24] 6710 	push	ar5
      002781 C0 04            [24] 6711 	push	ar4
      002783 C0 05            [24] 6712 	push	ar5
      002785 C0 06            [24] 6713 	push	ar6
      002787 C0 07            [24] 6714 	push	ar7
      002789 C0 04            [24] 6715 	push	ar4
      00278B 74r0F            [12] 6716 	mov	a,#___str_2
      00278D C0 E0            [24] 6717 	push	acc
      00278F 74s00            [12] 6718 	mov	a,#(___str_2 >> 8)
      002791 C0 E0            [24] 6719 	push	acc
      002793 74 80            [12] 6720 	mov	a,#0x80
      002795 C0 E0            [24] 6721 	push	acc
      002797 12r00r00         [24] 6722 	lcall	_printf
      00279A E5 81            [12] 6723 	mov	a,sp
      00279C 24 F9            [12] 6724 	add	a,#0xf9
      00279E F5 81            [12] 6725 	mov	sp,a
      0027A0 D0 04            [24] 6726 	pop	ar4
      0027A2 D0 05            [24] 6727 	pop	ar5
      0027A4 D0 06            [24] 6728 	pop	ar6
      0027A6 D0 07            [24] 6729 	pop	ar7
                                   6730 ;	calc.c:21: print32bin(d);
      0027A8 8D 82            [24] 6731 	mov	dpl,r5
      0027AA 8E 83            [24] 6732 	mov	dph,r6
      0027AC 8F F0            [24] 6733 	mov	b,r7
      0027AE EC               [12] 6734 	mov	a,r4
      0027AF 12r00r00         [24] 6735 	lcall	_print32bin
                                   6736 ;	calc.c:357: if (ctx->acc_valid) printall(ctx->acc);
      0027B2                       6737 00102$:
                                   6738 ;	calc.c:359: n = stack_peek2(ctx->ps, vals);
      0027B2 E5*00            [12] 6739 	mov	a,_bp
      0027B4 24 0C            [12] 6740 	add	a,#0x0c
      0027B6 F9               [12] 6741 	mov	r1,a
      0027B7 FD               [12] 6742 	mov	r5,a
      0027B8 7E 00            [12] 6743 	mov	r6,#0x00
      0027BA 7F 40            [12] 6744 	mov	r7,#0x40
      0027BC E5*00            [12] 6745 	mov	a,_bp
      0027BE 24 04            [12] 6746 	add	a,#0x04
      0027C0 F8               [12] 6747 	mov	r0,a
      0027C1 86 82            [24] 6748 	mov	dpl,@r0
      0027C3 08               [12] 6749 	inc	r0
      0027C4 86 83            [24] 6750 	mov	dph,@r0
      0027C6 08               [12] 6751 	inc	r0
      0027C7 86 F0            [24] 6752 	mov	b,@r0
      0027C9 12r00r00         [24] 6753 	lcall	__gptrget
      0027CC FA               [12] 6754 	mov	r2,a
      0027CD A3               [24] 6755 	inc	dptr
      0027CE 12r00r00         [24] 6756 	lcall	__gptrget
      0027D1 FB               [12] 6757 	mov	r3,a
      0027D2 A3               [24] 6758 	inc	dptr
      0027D3 12r00r00         [24] 6759 	lcall	__gptrget
      0027D6 FC               [12] 6760 	mov	r4,a
      0027D7 C0 01            [24] 6761 	push	ar1
      0027D9 C0 05            [24] 6762 	push	ar5
      0027DB C0 06            [24] 6763 	push	ar6
      0027DD C0 07            [24] 6764 	push	ar7
      0027DF 8A 82            [24] 6765 	mov	dpl,r2
      0027E1 8B 83            [24] 6766 	mov	dph,r3
      0027E3 8C F0            [24] 6767 	mov	b,r4
      0027E5 12r00r00         [24] 6768 	lcall	_stack_peek2
      0027E8 AE 82            [24] 6769 	mov	r6,dpl
      0027EA AF 83            [24] 6770 	mov	r7,dph
      0027EC 15 81            [12] 6771 	dec	sp
      0027EE 15 81            [12] 6772 	dec	sp
      0027F0 15 81            [12] 6773 	dec	sp
      0027F2 D0 01            [24] 6774 	pop	ar1
                                   6775 ;	calc.c:360: printstr("\r\nPSTOP1\t");
      0027F4 90r00rEA         [24] 6776 	mov	dptr,#___str_17
      0027F7 75 F0 80         [24] 6777 	mov	b,#0x80
      0027FA C0 07            [24] 6778 	push	ar7
      0027FC C0 06            [24] 6779 	push	ar6
      0027FE C0 01            [24] 6780 	push	ar1
      002800 12r00r00         [24] 6781 	lcall	_printstr
      002803 D0 01            [24] 6782 	pop	ar1
      002805 D0 06            [24] 6783 	pop	ar6
      002807 D0 07            [24] 6784 	pop	ar7
                                   6785 ;	calc.c:361: if (n > 0) printall(vals[1]);
      002809 C3               [12] 6786 	clr	c
      00280A E4               [12] 6787 	clr	a
      00280B 9E               [12] 6788 	subb	a,r6
      00280C 74 80            [12] 6789 	mov	a,#(0x00 ^ 0x80)
      00280E 8F F0            [24] 6790 	mov	b,r7
      002810 63 F0 80         [24] 6791 	xrl	b,#0x80
      002813 95 F0            [12] 6792 	subb	a,b
      002815 40 03            [24] 6793 	jc	00144$
      002817 02r28rD2         [24] 6794 	ljmp	00104$
      00281A                       6795 00144$:
      00281A 74 04            [12] 6796 	mov	a,#0x04
      00281C 29               [12] 6797 	add	a,r1
      00281D F8               [12] 6798 	mov	r0,a
      00281E 86 02            [24] 6799 	mov	ar2,@r0
      002820 08               [12] 6800 	inc	r0
      002821 86 03            [24] 6801 	mov	ar3,@r0
      002823 08               [12] 6802 	inc	r0
      002824 86 04            [24] 6803 	mov	ar4,@r0
      002826 08               [12] 6804 	inc	r0
      002827 86 05            [24] 6805 	mov	ar5,@r0
                                   6806 ;	calc.c:18: printf("%08lx\t", d);
      002829 C0 07            [24] 6807 	push	ar7
      00282B C0 06            [24] 6808 	push	ar6
      00282D C0 05            [24] 6809 	push	ar5
      00282F C0 04            [24] 6810 	push	ar4
      002831 C0 03            [24] 6811 	push	ar3
      002833 C0 02            [24] 6812 	push	ar2
      002835 C0 01            [24] 6813 	push	ar1
      002837 C0 02            [24] 6814 	push	ar2
      002839 C0 03            [24] 6815 	push	ar3
      00283B C0 04            [24] 6816 	push	ar4
      00283D C0 05            [24] 6817 	push	ar5
      00283F 74r00            [12] 6818 	mov	a,#___str_0
      002841 C0 E0            [24] 6819 	push	acc
      002843 74s00            [12] 6820 	mov	a,#(___str_0 >> 8)
      002845 C0 E0            [24] 6821 	push	acc
      002847 74 80            [12] 6822 	mov	a,#0x80
      002849 C0 E0            [24] 6823 	push	acc
      00284B 12r00r00         [24] 6824 	lcall	_printf
      00284E E5 81            [12] 6825 	mov	a,sp
      002850 24 F9            [12] 6826 	add	a,#0xf9
      002852 F5 81            [12] 6827 	mov	sp,a
      002854 D0 01            [24] 6828 	pop	ar1
      002856 D0 02            [24] 6829 	pop	ar2
      002858 D0 03            [24] 6830 	pop	ar3
      00285A D0 04            [24] 6831 	pop	ar4
      00285C D0 05            [24] 6832 	pop	ar5
                                   6833 ;	calc.c:19: printf("% 11ld\t", d);
      00285E C0 05            [24] 6834 	push	ar5
      002860 C0 04            [24] 6835 	push	ar4
      002862 C0 03            [24] 6836 	push	ar3
      002864 C0 02            [24] 6837 	push	ar2
      002866 C0 01            [24] 6838 	push	ar1
      002868 C0 02            [24] 6839 	push	ar2
      00286A C0 03            [24] 6840 	push	ar3
      00286C C0 04            [24] 6841 	push	ar4
      00286E C0 05            [24] 6842 	push	ar5
      002870 74r07            [12] 6843 	mov	a,#___str_1
      002872 C0 E0            [24] 6844 	push	acc
      002874 74s00            [12] 6845 	mov	a,#(___str_1 >> 8)
      002876 C0 E0            [24] 6846 	push	acc
      002878 74 80            [12] 6847 	mov	a,#0x80
      00287A C0 E0            [24] 6848 	push	acc
      00287C 12r00r00         [24] 6849 	lcall	_printf
      00287F E5 81            [12] 6850 	mov	a,sp
      002881 24 F9            [12] 6851 	add	a,#0xf9
      002883 F5 81            [12] 6852 	mov	sp,a
      002885 D0 01            [24] 6853 	pop	ar1
      002887 D0 02            [24] 6854 	pop	ar2
      002889 D0 03            [24] 6855 	pop	ar3
      00288B D0 04            [24] 6856 	pop	ar4
      00288D D0 05            [24] 6857 	pop	ar5
                                   6858 ;	calc.c:20: printf("%011lo\t", d);
      00288F C0 05            [24] 6859 	push	ar5
      002891 C0 04            [24] 6860 	push	ar4
      002893 C0 03            [24] 6861 	push	ar3
      002895 C0 02            [24] 6862 	push	ar2
      002897 C0 01            [24] 6863 	push	ar1
      002899 C0 02            [24] 6864 	push	ar2
      00289B C0 03            [24] 6865 	push	ar3
      00289D C0 04            [24] 6866 	push	ar4
      00289F C0 05            [24] 6867 	push	ar5
      0028A1 74r0F            [12] 6868 	mov	a,#___str_2
      0028A3 C0 E0            [24] 6869 	push	acc
      0028A5 74s00            [12] 6870 	mov	a,#(___str_2 >> 8)
      0028A7 C0 E0            [24] 6871 	push	acc
      0028A9 74 80            [12] 6872 	mov	a,#0x80
      0028AB C0 E0            [24] 6873 	push	acc
      0028AD 12r00r00         [24] 6874 	lcall	_printf
      0028B0 E5 81            [12] 6875 	mov	a,sp
      0028B2 24 F9            [12] 6876 	add	a,#0xf9
      0028B4 F5 81            [12] 6877 	mov	sp,a
      0028B6 D0 01            [24] 6878 	pop	ar1
      0028B8 D0 02            [24] 6879 	pop	ar2
      0028BA D0 03            [24] 6880 	pop	ar3
      0028BC D0 04            [24] 6881 	pop	ar4
      0028BE D0 05            [24] 6882 	pop	ar5
                                   6883 ;	calc.c:21: print32bin(d);
      0028C0 8A 82            [24] 6884 	mov	dpl,r2
      0028C2 8B 83            [24] 6885 	mov	dph,r3
      0028C4 8C F0            [24] 6886 	mov	b,r4
      0028C6 ED               [12] 6887 	mov	a,r5
      0028C7 C0 01            [24] 6888 	push	ar1
      0028C9 12r00r00         [24] 6889 	lcall	_print32bin
      0028CC D0 01            [24] 6890 	pop	ar1
      0028CE D0 06            [24] 6891 	pop	ar6
      0028D0 D0 07            [24] 6892 	pop	ar7
                                   6893 ;	calc.c:361: if (n > 0) printall(vals[1]);
      0028D2                       6894 00104$:
                                   6895 ;	calc.c:362: printstr("\r\nPSTOP0\t");
      0028D2 90r00rF4         [24] 6896 	mov	dptr,#___str_18
      0028D5 75 F0 80         [24] 6897 	mov	b,#0x80
      0028D8 C0 07            [24] 6898 	push	ar7
      0028DA C0 06            [24] 6899 	push	ar6
      0028DC C0 01            [24] 6900 	push	ar1
      0028DE 12r00r00         [24] 6901 	lcall	_printstr
      0028E1 D0 01            [24] 6902 	pop	ar1
      0028E3 D0 06            [24] 6903 	pop	ar6
      0028E5 D0 07            [24] 6904 	pop	ar7
                                   6905 ;	calc.c:363: if (n > 1) printall(vals[0]);
      0028E7 C3               [12] 6906 	clr	c
      0028E8 74 01            [12] 6907 	mov	a,#0x01
      0028EA 9E               [12] 6908 	subb	a,r6
      0028EB 74 80            [12] 6909 	mov	a,#(0x00 ^ 0x80)
      0028ED 8F F0            [24] 6910 	mov	b,r7
      0028EF 63 F0 80         [24] 6911 	xrl	b,#0x80
      0028F2 95 F0            [12] 6912 	subb	a,b
      0028F4 40 03            [24] 6913 	jc	00145$
      0028F6 02r29rA8         [24] 6914 	ljmp	00106$
      0028F9                       6915 00145$:
      0028F9 87 04            [24] 6916 	mov	ar4,@r1
      0028FB 09               [12] 6917 	inc	r1
      0028FC 87 05            [24] 6918 	mov	ar5,@r1
      0028FE 09               [12] 6919 	inc	r1
      0028FF 87 06            [24] 6920 	mov	ar6,@r1
      002901 09               [12] 6921 	inc	r1
      002902 87 07            [24] 6922 	mov	ar7,@r1
      002904 19               [12] 6923 	dec	r1
      002905 19               [12] 6924 	dec	r1
      002906 19               [12] 6925 	dec	r1
                                   6926 ;	calc.c:18: printf("%08lx\t", d);
      002907 C0 07            [24] 6927 	push	ar7
      002909 C0 06            [24] 6928 	push	ar6
      00290B C0 05            [24] 6929 	push	ar5
      00290D C0 04            [24] 6930 	push	ar4
      00290F C0 01            [24] 6931 	push	ar1
      002911 C0 04            [24] 6932 	push	ar4
      002913 C0 05            [24] 6933 	push	ar5
      002915 C0 06            [24] 6934 	push	ar6
      002917 C0 07            [24] 6935 	push	ar7
      002919 74r00            [12] 6936 	mov	a,#___str_0
      00291B C0 E0            [24] 6937 	push	acc
      00291D 74s00            [12] 6938 	mov	a,#(___str_0 >> 8)
      00291F C0 E0            [24] 6939 	push	acc
      002921 74 80            [12] 6940 	mov	a,#0x80
      002923 C0 E0            [24] 6941 	push	acc
      002925 12r00r00         [24] 6942 	lcall	_printf
      002928 E5 81            [12] 6943 	mov	a,sp
      00292A 24 F9            [12] 6944 	add	a,#0xf9
      00292C F5 81            [12] 6945 	mov	sp,a
      00292E D0 01            [24] 6946 	pop	ar1
      002930 D0 04            [24] 6947 	pop	ar4
      002932 D0 05            [24] 6948 	pop	ar5
      002934 D0 06            [24] 6949 	pop	ar6
      002936 D0 07            [24] 6950 	pop	ar7
                                   6951 ;	calc.c:19: printf("% 11ld\t", d);
      002938 C0 07            [24] 6952 	push	ar7
      00293A C0 06            [24] 6953 	push	ar6
      00293C C0 05            [24] 6954 	push	ar5
      00293E C0 04            [24] 6955 	push	ar4
      002940 C0 01            [24] 6956 	push	ar1
      002942 C0 04            [24] 6957 	push	ar4
      002944 C0 05            [24] 6958 	push	ar5
      002946 C0 06            [24] 6959 	push	ar6
      002948 C0 07            [24] 6960 	push	ar7
      00294A 74r07            [12] 6961 	mov	a,#___str_1
      00294C C0 E0            [24] 6962 	push	acc
      00294E 74s00            [12] 6963 	mov	a,#(___str_1 >> 8)
      002950 C0 E0            [24] 6964 	push	acc
      002952 74 80            [12] 6965 	mov	a,#0x80
      002954 C0 E0            [24] 6966 	push	acc
      002956 12r00r00         [24] 6967 	lcall	_printf
      002959 E5 81            [12] 6968 	mov	a,sp
      00295B 24 F9            [12] 6969 	add	a,#0xf9
      00295D F5 81            [12] 6970 	mov	sp,a
      00295F D0 01            [24] 6971 	pop	ar1
      002961 D0 04            [24] 6972 	pop	ar4
      002963 D0 05            [24] 6973 	pop	ar5
      002965 D0 06            [24] 6974 	pop	ar6
      002967 D0 07            [24] 6975 	pop	ar7
                                   6976 ;	calc.c:20: printf("%011lo\t", d);
      002969 C0 07            [24] 6977 	push	ar7
      00296B C0 06            [24] 6978 	push	ar6
      00296D C0 05            [24] 6979 	push	ar5
      00296F C0 04            [24] 6980 	push	ar4
      002971 C0 01            [24] 6981 	push	ar1
      002973 C0 04            [24] 6982 	push	ar4
      002975 C0 05            [24] 6983 	push	ar5
      002977 C0 06            [24] 6984 	push	ar6
      002979 C0 07            [24] 6985 	push	ar7
      00297B 74r0F            [12] 6986 	mov	a,#___str_2
      00297D C0 E0            [24] 6987 	push	acc
      00297F 74s00            [12] 6988 	mov	a,#(___str_2 >> 8)
      002981 C0 E0            [24] 6989 	push	acc
      002983 74 80            [12] 6990 	mov	a,#0x80
      002985 C0 E0            [24] 6991 	push	acc
      002987 12r00r00         [24] 6992 	lcall	_printf
      00298A E5 81            [12] 6993 	mov	a,sp
      00298C 24 F9            [12] 6994 	add	a,#0xf9
      00298E F5 81            [12] 6995 	mov	sp,a
      002990 D0 01            [24] 6996 	pop	ar1
      002992 D0 04            [24] 6997 	pop	ar4
      002994 D0 05            [24] 6998 	pop	ar5
      002996 D0 06            [24] 6999 	pop	ar6
      002998 D0 07            [24] 7000 	pop	ar7
                                   7001 ;	calc.c:21: print32bin(d);
      00299A 8C 82            [24] 7002 	mov	dpl,r4
      00299C 8D 83            [24] 7003 	mov	dph,r5
      00299E 8E F0            [24] 7004 	mov	b,r6
      0029A0 EF               [12] 7005 	mov	a,r7
      0029A1 C0 01            [24] 7006 	push	ar1
      0029A3 12r00r00         [24] 7007 	lcall	_print32bin
      0029A6 D0 01            [24] 7008 	pop	ar1
                                   7009 ;	calc.c:363: if (n > 1) printall(vals[0]);
      0029A8                       7010 00106$:
                                   7011 ;	calc.c:365: n = stack_peek2(ctx->ss, vals);
      0029A8 89 07            [24] 7012 	mov	ar7,r1
      0029AA 7E 00            [12] 7013 	mov	r6,#0x00
      0029AC 7D 40            [12] 7014 	mov	r5,#0x40
      0029AE A8*00            [24] 7015 	mov	r0,_bp
      0029B0 08               [12] 7016 	inc	r0
      0029B1 86 82            [24] 7017 	mov	dpl,@r0
      0029B3 08               [12] 7018 	inc	r0
      0029B4 86 83            [24] 7019 	mov	dph,@r0
      0029B6 08               [12] 7020 	inc	r0
      0029B7 86 F0            [24] 7021 	mov	b,@r0
      0029B9 12r00r00         [24] 7022 	lcall	__gptrget
      0029BC FA               [12] 7023 	mov	r2,a
      0029BD A3               [24] 7024 	inc	dptr
      0029BE 12r00r00         [24] 7025 	lcall	__gptrget
      0029C1 FB               [12] 7026 	mov	r3,a
      0029C2 A3               [24] 7027 	inc	dptr
      0029C3 12r00r00         [24] 7028 	lcall	__gptrget
      0029C6 FC               [12] 7029 	mov	r4,a
      0029C7 C0 01            [24] 7030 	push	ar1
      0029C9 C0 07            [24] 7031 	push	ar7
      0029CB C0 06            [24] 7032 	push	ar6
      0029CD C0 05            [24] 7033 	push	ar5
      0029CF 8A 82            [24] 7034 	mov	dpl,r2
      0029D1 8B 83            [24] 7035 	mov	dph,r3
      0029D3 8C F0            [24] 7036 	mov	b,r4
      0029D5 12r00r00         [24] 7037 	lcall	_stack_peek2
      0029D8 AE 82            [24] 7038 	mov	r6,dpl
      0029DA AF 83            [24] 7039 	mov	r7,dph
      0029DC 15 81            [12] 7040 	dec	sp
      0029DE 15 81            [12] 7041 	dec	sp
      0029E0 15 81            [12] 7042 	dec	sp
      0029E2 D0 01            [24] 7043 	pop	ar1
                                   7044 ;	calc.c:366: printstr("\r\nSSTOP1\t");
      0029E4 90r00rFE         [24] 7045 	mov	dptr,#___str_19
      0029E7 75 F0 80         [24] 7046 	mov	b,#0x80
      0029EA C0 07            [24] 7047 	push	ar7
      0029EC C0 06            [24] 7048 	push	ar6
      0029EE C0 01            [24] 7049 	push	ar1
      0029F0 12r00r00         [24] 7050 	lcall	_printstr
      0029F3 D0 01            [24] 7051 	pop	ar1
      0029F5 D0 06            [24] 7052 	pop	ar6
      0029F7 D0 07            [24] 7053 	pop	ar7
                                   7054 ;	calc.c:367: if (n > 0) printall(vals[1]);
      0029F9 C3               [12] 7055 	clr	c
      0029FA E4               [12] 7056 	clr	a
      0029FB 9E               [12] 7057 	subb	a,r6
      0029FC 74 80            [12] 7058 	mov	a,#(0x00 ^ 0x80)
      0029FE 8F F0            [24] 7059 	mov	b,r7
      002A00 63 F0 80         [24] 7060 	xrl	b,#0x80
      002A03 95 F0            [12] 7061 	subb	a,b
      002A05 40 03            [24] 7062 	jc	00146$
      002A07 02r2ArC2         [24] 7063 	ljmp	00108$
      002A0A                       7064 00146$:
      002A0A 74 04            [12] 7065 	mov	a,#0x04
      002A0C 29               [12] 7066 	add	a,r1
      002A0D F8               [12] 7067 	mov	r0,a
      002A0E 86 02            [24] 7068 	mov	ar2,@r0
      002A10 08               [12] 7069 	inc	r0
      002A11 86 03            [24] 7070 	mov	ar3,@r0
      002A13 08               [12] 7071 	inc	r0
      002A14 86 04            [24] 7072 	mov	ar4,@r0
      002A16 08               [12] 7073 	inc	r0
      002A17 86 05            [24] 7074 	mov	ar5,@r0
                                   7075 ;	calc.c:18: printf("%08lx\t", d);
      002A19 C0 07            [24] 7076 	push	ar7
      002A1B C0 06            [24] 7077 	push	ar6
      002A1D C0 05            [24] 7078 	push	ar5
      002A1F C0 04            [24] 7079 	push	ar4
      002A21 C0 03            [24] 7080 	push	ar3
      002A23 C0 02            [24] 7081 	push	ar2
      002A25 C0 01            [24] 7082 	push	ar1
      002A27 C0 02            [24] 7083 	push	ar2
      002A29 C0 03            [24] 7084 	push	ar3
      002A2B C0 04            [24] 7085 	push	ar4
      002A2D C0 05            [24] 7086 	push	ar5
      002A2F 74r00            [12] 7087 	mov	a,#___str_0
      002A31 C0 E0            [24] 7088 	push	acc
      002A33 74s00            [12] 7089 	mov	a,#(___str_0 >> 8)
      002A35 C0 E0            [24] 7090 	push	acc
      002A37 74 80            [12] 7091 	mov	a,#0x80
      002A39 C0 E0            [24] 7092 	push	acc
      002A3B 12r00r00         [24] 7093 	lcall	_printf
      002A3E E5 81            [12] 7094 	mov	a,sp
      002A40 24 F9            [12] 7095 	add	a,#0xf9
      002A42 F5 81            [12] 7096 	mov	sp,a
      002A44 D0 01            [24] 7097 	pop	ar1
      002A46 D0 02            [24] 7098 	pop	ar2
      002A48 D0 03            [24] 7099 	pop	ar3
      002A4A D0 04            [24] 7100 	pop	ar4
      002A4C D0 05            [24] 7101 	pop	ar5
                                   7102 ;	calc.c:19: printf("% 11ld\t", d);
      002A4E C0 05            [24] 7103 	push	ar5
      002A50 C0 04            [24] 7104 	push	ar4
      002A52 C0 03            [24] 7105 	push	ar3
      002A54 C0 02            [24] 7106 	push	ar2
      002A56 C0 01            [24] 7107 	push	ar1
      002A58 C0 02            [24] 7108 	push	ar2
      002A5A C0 03            [24] 7109 	push	ar3
      002A5C C0 04            [24] 7110 	push	ar4
      002A5E C0 05            [24] 7111 	push	ar5
      002A60 74r07            [12] 7112 	mov	a,#___str_1
      002A62 C0 E0            [24] 7113 	push	acc
      002A64 74s00            [12] 7114 	mov	a,#(___str_1 >> 8)
      002A66 C0 E0            [24] 7115 	push	acc
      002A68 74 80            [12] 7116 	mov	a,#0x80
      002A6A C0 E0            [24] 7117 	push	acc
      002A6C 12r00r00         [24] 7118 	lcall	_printf
      002A6F E5 81            [12] 7119 	mov	a,sp
      002A71 24 F9            [12] 7120 	add	a,#0xf9
      002A73 F5 81            [12] 7121 	mov	sp,a
      002A75 D0 01            [24] 7122 	pop	ar1
      002A77 D0 02            [24] 7123 	pop	ar2
      002A79 D0 03            [24] 7124 	pop	ar3
      002A7B D0 04            [24] 7125 	pop	ar4
      002A7D D0 05            [24] 7126 	pop	ar5
                                   7127 ;	calc.c:20: printf("%011lo\t", d);
      002A7F C0 05            [24] 7128 	push	ar5
      002A81 C0 04            [24] 7129 	push	ar4
      002A83 C0 03            [24] 7130 	push	ar3
      002A85 C0 02            [24] 7131 	push	ar2
      002A87 C0 01            [24] 7132 	push	ar1
      002A89 C0 02            [24] 7133 	push	ar2
      002A8B C0 03            [24] 7134 	push	ar3
      002A8D C0 04            [24] 7135 	push	ar4
      002A8F C0 05            [24] 7136 	push	ar5
      002A91 74r0F            [12] 7137 	mov	a,#___str_2
      002A93 C0 E0            [24] 7138 	push	acc
      002A95 74s00            [12] 7139 	mov	a,#(___str_2 >> 8)
      002A97 C0 E0            [24] 7140 	push	acc
      002A99 74 80            [12] 7141 	mov	a,#0x80
      002A9B C0 E0            [24] 7142 	push	acc
      002A9D 12r00r00         [24] 7143 	lcall	_printf
      002AA0 E5 81            [12] 7144 	mov	a,sp
      002AA2 24 F9            [12] 7145 	add	a,#0xf9
      002AA4 F5 81            [12] 7146 	mov	sp,a
      002AA6 D0 01            [24] 7147 	pop	ar1
      002AA8 D0 02            [24] 7148 	pop	ar2
      002AAA D0 03            [24] 7149 	pop	ar3
      002AAC D0 04            [24] 7150 	pop	ar4
      002AAE D0 05            [24] 7151 	pop	ar5
                                   7152 ;	calc.c:21: print32bin(d);
      002AB0 8A 82            [24] 7153 	mov	dpl,r2
      002AB2 8B 83            [24] 7154 	mov	dph,r3
      002AB4 8C F0            [24] 7155 	mov	b,r4
      002AB6 ED               [12] 7156 	mov	a,r5
      002AB7 C0 01            [24] 7157 	push	ar1
      002AB9 12r00r00         [24] 7158 	lcall	_print32bin
      002ABC D0 01            [24] 7159 	pop	ar1
      002ABE D0 06            [24] 7160 	pop	ar6
      002AC0 D0 07            [24] 7161 	pop	ar7
                                   7162 ;	calc.c:367: if (n > 0) printall(vals[1]);
      002AC2                       7163 00108$:
                                   7164 ;	calc.c:368: printstr("\r\nSSTOP0\t");
      002AC2 90r01r08         [24] 7165 	mov	dptr,#___str_20
      002AC5 75 F0 80         [24] 7166 	mov	b,#0x80
      002AC8 C0 07            [24] 7167 	push	ar7
      002ACA C0 06            [24] 7168 	push	ar6
      002ACC C0 01            [24] 7169 	push	ar1
      002ACE 12r00r00         [24] 7170 	lcall	_printstr
      002AD1 D0 01            [24] 7171 	pop	ar1
      002AD3 D0 06            [24] 7172 	pop	ar6
      002AD5 D0 07            [24] 7173 	pop	ar7
                                   7174 ;	calc.c:369: if (n > 1) printall(vals[0]);
      002AD7 C3               [12] 7175 	clr	c
      002AD8 74 01            [12] 7176 	mov	a,#0x01
      002ADA 9E               [12] 7177 	subb	a,r6
      002ADB 74 80            [12] 7178 	mov	a,#(0x00 ^ 0x80)
      002ADD 8F F0            [24] 7179 	mov	b,r7
      002ADF 63 F0 80         [24] 7180 	xrl	b,#0x80
      002AE2 95 F0            [12] 7181 	subb	a,b
      002AE4 40 03            [24] 7182 	jc	00147$
      002AE6 02r2Br85         [24] 7183 	ljmp	00110$
      002AE9                       7184 00147$:
      002AE9 87 04            [24] 7185 	mov	ar4,@r1
      002AEB 09               [12] 7186 	inc	r1
      002AEC 87 05            [24] 7187 	mov	ar5,@r1
      002AEE 09               [12] 7188 	inc	r1
      002AEF 87 06            [24] 7189 	mov	ar6,@r1
      002AF1 09               [12] 7190 	inc	r1
      002AF2 87 07            [24] 7191 	mov	ar7,@r1
                                   7192 ;	calc.c:18: printf("%08lx\t", d);
      002AF4 C0 07            [24] 7193 	push	ar7
      002AF6 C0 06            [24] 7194 	push	ar6
      002AF8 C0 05            [24] 7195 	push	ar5
      002AFA C0 04            [24] 7196 	push	ar4
      002AFC C0 04            [24] 7197 	push	ar4
      002AFE C0 05            [24] 7198 	push	ar5
      002B00 C0 06            [24] 7199 	push	ar6
      002B02 C0 07            [24] 7200 	push	ar7
      002B04 74r00            [12] 7201 	mov	a,#___str_0
      002B06 C0 E0            [24] 7202 	push	acc
      002B08 74s00            [12] 7203 	mov	a,#(___str_0 >> 8)
      002B0A C0 E0            [24] 7204 	push	acc
      002B0C 74 80            [12] 7205 	mov	a,#0x80
      002B0E C0 E0            [24] 7206 	push	acc
      002B10 12r00r00         [24] 7207 	lcall	_printf
      002B13 E5 81            [12] 7208 	mov	a,sp
      002B15 24 F9            [12] 7209 	add	a,#0xf9
      002B17 F5 81            [12] 7210 	mov	sp,a
      002B19 D0 04            [24] 7211 	pop	ar4
      002B1B D0 05            [24] 7212 	pop	ar5
      002B1D D0 06            [24] 7213 	pop	ar6
      002B1F D0 07            [24] 7214 	pop	ar7
                                   7215 ;	calc.c:19: printf("% 11ld\t", d);
      002B21 C0 07            [24] 7216 	push	ar7
      002B23 C0 06            [24] 7217 	push	ar6
      002B25 C0 05            [24] 7218 	push	ar5
      002B27 C0 04            [24] 7219 	push	ar4
      002B29 C0 04            [24] 7220 	push	ar4
      002B2B C0 05            [24] 7221 	push	ar5
      002B2D C0 06            [24] 7222 	push	ar6
      002B2F C0 07            [24] 7223 	push	ar7
      002B31 74r07            [12] 7224 	mov	a,#___str_1
      002B33 C0 E0            [24] 7225 	push	acc
      002B35 74s00            [12] 7226 	mov	a,#(___str_1 >> 8)
      002B37 C0 E0            [24] 7227 	push	acc
      002B39 74 80            [12] 7228 	mov	a,#0x80
      002B3B C0 E0            [24] 7229 	push	acc
      002B3D 12r00r00         [24] 7230 	lcall	_printf
      002B40 E5 81            [12] 7231 	mov	a,sp
      002B42 24 F9            [12] 7232 	add	a,#0xf9
      002B44 F5 81            [12] 7233 	mov	sp,a
      002B46 D0 04            [24] 7234 	pop	ar4
      002B48 D0 05            [24] 7235 	pop	ar5
      002B4A D0 06            [24] 7236 	pop	ar6
      002B4C D0 07            [24] 7237 	pop	ar7
                                   7238 ;	calc.c:20: printf("%011lo\t", d);
      002B4E C0 07            [24] 7239 	push	ar7
      002B50 C0 06            [24] 7240 	push	ar6
      002B52 C0 05            [24] 7241 	push	ar5
      002B54 C0 04            [24] 7242 	push	ar4
      002B56 C0 04            [24] 7243 	push	ar4
      002B58 C0 05            [24] 7244 	push	ar5
      002B5A C0 06            [24] 7245 	push	ar6
      002B5C C0 07            [24] 7246 	push	ar7
      002B5E 74r0F            [12] 7247 	mov	a,#___str_2
      002B60 C0 E0            [24] 7248 	push	acc
      002B62 74s00            [12] 7249 	mov	a,#(___str_2 >> 8)
      002B64 C0 E0            [24] 7250 	push	acc
      002B66 74 80            [12] 7251 	mov	a,#0x80
      002B68 C0 E0            [24] 7252 	push	acc
      002B6A 12r00r00         [24] 7253 	lcall	_printf
      002B6D E5 81            [12] 7254 	mov	a,sp
      002B6F 24 F9            [12] 7255 	add	a,#0xf9
      002B71 F5 81            [12] 7256 	mov	sp,a
      002B73 D0 04            [24] 7257 	pop	ar4
      002B75 D0 05            [24] 7258 	pop	ar5
      002B77 D0 06            [24] 7259 	pop	ar6
      002B79 D0 07            [24] 7260 	pop	ar7
                                   7261 ;	calc.c:21: print32bin(d);
      002B7B 8C 82            [24] 7262 	mov	dpl,r4
      002B7D 8D 83            [24] 7263 	mov	dph,r5
      002B7F 8E F0            [24] 7264 	mov	b,r6
      002B81 EF               [12] 7265 	mov	a,r7
      002B82 12r00r00         [24] 7266 	lcall	_print32bin
                                   7267 ;	calc.c:369: if (n > 1) printall(vals[0]);
      002B85                       7268 00110$:
                                   7269 ;	calc.c:370: printstr("\r\n");
      002B85 90r00r17         [24] 7270 	mov	dptr,#___str_3
      002B88 75 F0 80         [24] 7271 	mov	b,#0x80
      002B8B 12r00r00         [24] 7272 	lcall	_printstr
                                   7273 ;	calc.c:372: return 1;
      002B8E 90 00 01         [24] 7274 	mov	dptr,#0x0001
                                   7275 ;	calc.c:373: }
      002B91 85*00 81         [24] 7276 	mov	sp,_bp
      002B94 D0*00            [24] 7277 	pop	_bp
      002B96 22               [24] 7278 	ret
                                   7279 ;------------------------------------------------------------
                                   7280 ;Allocation info for local variables in function 'help'
                                   7281 ;------------------------------------------------------------
                                   7282 ;delta                     Allocated to stack - _bp -5
                                   7283 ;_ctx                      Allocated to registers 
                                   7284 ;------------------------------------------------------------
                                   7285 ;	calc.c:375: static int help(void *_ctx, delta_t *delta) __reentrant {
                                   7286 ;	-----------------------------------------
                                   7287 ;	 function help
                                   7288 ;	-----------------------------------------
      002B97                       7289 _help:
      002B97 C0*00            [24] 7290 	push	_bp
      002B99 85 81*00         [24] 7291 	mov	_bp,sp
                                   7292 ;	calc.c:379: printstr("\r\nHhOo\tbase 16 10 8 2\r\n");
      002B9C 90r01r12         [24] 7293 	mov	dptr,#___str_21
      002B9F 75 F0 80         [24] 7294 	mov	b,#0x80
      002BA2 12r00r00         [24] 7295 	lcall	_printstr
                                   7296 ;	calc.c:380: printstr("p.\tpop top\r\n");
      002BA5 90r01r2A         [24] 7297 	mov	dptr,#___str_22
      002BA8 75 F0 80         [24] 7298 	mov	b,#0x80
      002BAB 12r00r00         [24] 7299 	lcall	_printstr
                                   7300 ;	calc.c:381: printstr("P\tpop stack\r\n");
      002BAE 90r01r37         [24] 7301 	mov	dptr,#___str_23
      002BB1 75 F0 80         [24] 7302 	mov	b,#0x80
      002BB4 12r00r00         [24] 7303 	lcall	_printstr
                                   7304 ;	calc.c:382: printstr("v\tpeek top\r\n");
      002BB7 90r01r45         [24] 7305 	mov	dptr,#___str_24
      002BBA 75 F0 80         [24] 7306 	mov	b,#0x80
      002BBD 12r00r00         [24] 7307 	lcall	_printstr
                                   7308 ;	calc.c:383: printstr("V\tpeek stack\r\n");
      002BC0 90r01r52         [24] 7309 	mov	dptr,#___str_25
      002BC3 75 F0 80         [24] 7310 	mov	b,#0x80
      002BC6 12r00r00         [24] 7311 	lcall	_printstr
                                   7312 ;	calc.c:384: printstr("i\treset acc\r\n");
      002BC9 90r01r61         [24] 7313 	mov	dptr,#___str_26
      002BCC 75 F0 80         [24] 7314 	mov	b,#0x80
      002BCF 12r00r00         [24] 7315 	lcall	_printstr
                                   7316 ;	calc.c:385: printstr("I\treset and discard acc\r\n");
      002BD2 90r01r6F         [24] 7317 	mov	dptr,#___str_27
      002BD5 75 F0 80         [24] 7318 	mov	b,#0x80
      002BD8 12r00r00         [24] 7319 	lcall	_printstr
                                   7320 ;	calc.c:386: printstr("x\texchange top 2\r\n");
      002BDB 90r01r89         [24] 7321 	mov	dptr,#___str_28
      002BDE 75 F0 80         [24] 7322 	mov	b,#0x80
      002BE1 12r00r00         [24] 7323 	lcall	_printstr
                                   7324 ;	calc.c:387: printstr("X\texchange stacks primary <-> secondary\r\n");
      002BE4 90r01r9C         [24] 7325 	mov	dptr,#___str_29
      002BE7 75 F0 80         [24] 7326 	mov	b,#0x80
      002BEA 12r00r00         [24] 7327 	lcall	_printstr
                                   7328 ;	calc.c:388: printstr("T\texchange tops primary <-> secondary\r\n");
      002BED 90r01rC6         [24] 7329 	mov	dptr,#___str_30
      002BF0 75 F0 80         [24] 7330 	mov	b,#0x80
      002BF3 12r00r00         [24] 7331 	lcall	_printstr
                                   7332 ;	calc.c:389: printstr("U\tcopy top secondary -> primary\r\n");
      002BF6 90r01rEE         [24] 7333 	mov	dptr,#___str_31
      002BF9 75 F0 80         [24] 7334 	mov	b,#0x80
      002BFC 12r00r00         [24] 7335 	lcall	_printstr
                                   7336 ;	calc.c:390: printstr("u\tcopy top primary -> secondary\r\n");
      002BFF 90r02r10         [24] 7337 	mov	dptr,#___str_32
      002C02 75 F0 80         [24] 7338 	mov	b,#0x80
      002C05 12r00r00         [24] 7339 	lcall	_printstr
                                   7340 ;	calc.c:391: printstr("M\tmove top secondary -> primary\r\n");
      002C08 90r02r32         [24] 7341 	mov	dptr,#___str_33
      002C0B 75 F0 80         [24] 7342 	mov	b,#0x80
      002C0E 12r00r00         [24] 7343 	lcall	_printstr
                                   7344 ;	calc.c:392: printstr("m\tmove top primary -> secondary\r\n");
      002C11 90r02r54         [24] 7345 	mov	dptr,#___str_34
      002C14 75 F0 80         [24] 7346 	mov	b,#0x80
      002C17 12r00r00         [24] 7347 	lcall	_printstr
                                   7348 ;	calc.c:393: printstr("+\tadd top 2\r\n");
      002C1A 90r02r76         [24] 7349 	mov	dptr,#___str_35
      002C1D 75 F0 80         [24] 7350 	mov	b,#0x80
      002C20 12r00r00         [24] 7351 	lcall	_printstr
                                   7352 ;	calc.c:394: printstr("-\tsubtract top 2\r\n");
      002C23 90r02r84         [24] 7353 	mov	dptr,#___str_36
      002C26 75 F0 80         [24] 7354 	mov	b,#0x80
      002C29 12r00r00         [24] 7355 	lcall	_printstr
                                   7356 ;	calc.c:395: printstr("*\tmultiply top 2\r\n");
      002C2C 90r02r97         [24] 7357 	mov	dptr,#___str_37
      002C2F 75 F0 80         [24] 7358 	mov	b,#0x80
      002C32 12r00r00         [24] 7359 	lcall	_printstr
                                   7360 ;	calc.c:396: printstr("/\tdivide top 2\r\n");
      002C35 90r02rAA         [24] 7361 	mov	dptr,#___str_38
      002C38 75 F0 80         [24] 7362 	mov	b,#0x80
      002C3B 12r00r00         [24] 7363 	lcall	_printstr
                                   7364 ;	calc.c:397: printstr("\\\tdivide top 2 unsigned\r\n");	
      002C3E 90r02rBB         [24] 7365 	mov	dptr,#___str_39
      002C41 75 F0 80         [24] 7366 	mov	b,#0x80
      002C44 12r00r00         [24] 7367 	lcall	_printstr
                                   7368 ;	calc.c:398: printstr("%\tmodulus top 2\r\n");
      002C47 90r02rD5         [24] 7369 	mov	dptr,#___str_40
      002C4A 75 F0 80         [24] 7370 	mov	b,#0x80
      002C4D 12r00r00         [24] 7371 	lcall	_printstr
                                   7372 ;	calc.c:399: printstr("#\tmodulus top 2 unsigned\r\n");
      002C50 90r02rE7         [24] 7373 	mov	dptr,#___str_41
      002C53 75 F0 80         [24] 7374 	mov	b,#0x80
      002C56 12r00r00         [24] 7375 	lcall	_printstr
                                   7376 ;	calc.c:400: printstr("&\tand top 2\r\n");
      002C59 90r03r02         [24] 7377 	mov	dptr,#___str_42
      002C5C 75 F0 80         [24] 7378 	mov	b,#0x80
      002C5F 12r00r00         [24] 7379 	lcall	_printstr
                                   7380 ;	calc.c:401: printstr("|\tor top 2\r\n");
      002C62 90r03r10         [24] 7381 	mov	dptr,#___str_43
      002C65 75 F0 80         [24] 7382 	mov	b,#0x80
      002C68 12r00r00         [24] 7383 	lcall	_printstr
                                   7384 ;	calc.c:402: printstr("^\txor top 2\r\n");
      002C6B 90r03r1D         [24] 7385 	mov	dptr,#___str_44
      002C6E 75 F0 80         [24] 7386 	mov	b,#0x80
      002C71 12r00r00         [24] 7387 	lcall	_printstr
                                   7388 ;	calc.c:403: printstr(">\tshift right top 2\r\n");
      002C74 90r03r2B         [24] 7389 	mov	dptr,#___str_45
      002C77 75 F0 80         [24] 7390 	mov	b,#0x80
      002C7A 12r00r00         [24] 7391 	lcall	_printstr
                                   7392 ;	calc.c:404: printstr("]\tarithmetic shift right top 2\r\n");
      002C7D 90r03r41         [24] 7393 	mov	dptr,#___str_46
      002C80 75 F0 80         [24] 7394 	mov	b,#0x80
      002C83 12r00r00         [24] 7395 	lcall	_printstr
                                   7396 ;	calc.c:405: printstr("<\tshift left top 2\r\n");
      002C86 90r03r62         [24] 7397 	mov	dptr,#___str_47
      002C89 75 F0 80         [24] 7398 	mov	b,#0x80
      002C8C 12r00r00         [24] 7399 	lcall	_printstr
                                   7400 ;	calc.c:406: printstr("~\tbitwise not top\r\n");
      002C8F 90r03r77         [24] 7401 	mov	dptr,#___str_48
      002C92 75 F0 80         [24] 7402 	mov	b,#0x80
      002C95 12r00r00         [24] 7403 	lcall	_printstr
                                   7404 ;	calc.c:407: printstr("s\tstatus\r\n");
      002C98 90r03r8B         [24] 7405 	mov	dptr,#___str_49
      002C9B 75 F0 80         [24] 7406 	mov	b,#0x80
      002C9E 12r00r00         [24] 7407 	lcall	_printstr
                                   7408 ;	calc.c:408: printstr("?\thelp\r\n");
      002CA1 90r03r96         [24] 7409 	mov	dptr,#___str_50
      002CA4 75 F0 80         [24] 7410 	mov	b,#0x80
      002CA7 12r00r00         [24] 7411 	lcall	_printstr
                                   7412 ;	calc.c:409: printstr("q\tquit\r\n");
      002CAA 90r03r9F         [24] 7413 	mov	dptr,#___str_51
      002CAD 75 F0 80         [24] 7414 	mov	b,#0x80
      002CB0 12r00r00         [24] 7415 	lcall	_printstr
                                   7416 ;	calc.c:411: return 1;
      002CB3 90 00 01         [24] 7417 	mov	dptr,#0x0001
                                   7418 ;	calc.c:412: }
      002CB6 D0*00            [24] 7419 	pop	_bp
      002CB8 22               [24] 7420 	ret
                                   7421 ;------------------------------------------------------------
                                   7422 ;Allocation info for local variables in function 'main'
                                   7423 ;------------------------------------------------------------
                                   7424 ;input                     Allocated to registers r6 r7 
                                   7425 ;------------------------------------------------------------
                                   7426 ;	calc.c:442: void main(void) {
                                   7427 ;	-----------------------------------------
                                   7428 ;	 function main
                                   7429 ;	-----------------------------------------
      002CB9                       7430 _main:
                                   7431 ;	calc.c:445: giant = 0;
      002CB9 78r00            [12] 7432 	mov	r0,#_giant
      002CBB 76 00            [12] 7433 	mov	@r0,#0x00
                                   7434 ;	calc.c:447: c.base = 10;
      002CBD 90r00r0C         [24] 7435 	mov	dptr,#_c
      002CC0 74 0A            [12] 7436 	mov	a,#0x0a
      002CC2 F0               [24] 7437 	movx	@dptr,a
      002CC3 E4               [12] 7438 	clr	a
      002CC4 A3               [24] 7439 	inc	dptr
      002CC5 F0               [24] 7440 	movx	@dptr,a
                                   7441 ;	calc.c:448: c.acc = 0l;
      002CC6 90r00r0E         [24] 7442 	mov	dptr,#(_c + 0x0002)
      002CC9 F0               [24] 7443 	movx	@dptr,a
      002CCA A3               [24] 7444 	inc	dptr
      002CCB F0               [24] 7445 	movx	@dptr,a
      002CCC A3               [24] 7446 	inc	dptr
      002CCD F0               [24] 7447 	movx	@dptr,a
      002CCE A3               [24] 7448 	inc	dptr
      002CCF F0               [24] 7449 	movx	@dptr,a
                                   7450 ;	calc.c:449: c.acc_valid = (char)0;
      002CD0 90r00r12         [24] 7451 	mov	dptr,#(_c + 0x0006)
      002CD3 F0               [24] 7452 	movx	@dptr,a
                                   7453 ;	calc.c:450: c.digit[0] = c.digit[1] = '\0';
      002CD4 90r00r14         [24] 7454 	mov	dptr,#(_c + 0x0008)
      002CD7 F0               [24] 7455 	movx	@dptr,a
      002CD8 90r00r13         [24] 7456 	mov	dptr,#(_c + 0x0007)
      002CDB F0               [24] 7457 	movx	@dptr,a
                                   7458 ;	calc.c:452: c.ps = &c.s0;
      002CDC 90r40r1D         [24] 7459 	mov	dptr,#(_c + 0x4011)
      002CDF 74r15            [12] 7460 	mov	a,#(_c + 0x0009)
      002CE1 F0               [24] 7461 	movx	@dptr,a
      002CE2 74s00            [12] 7462 	mov	a,#((_c + 0x0009) >> 8)
      002CE4 A3               [24] 7463 	inc	dptr
      002CE5 F0               [24] 7464 	movx	@dptr,a
      002CE6 E4               [12] 7465 	clr	a
      002CE7 A3               [24] 7466 	inc	dptr
      002CE8 F0               [24] 7467 	movx	@dptr,a
                                   7468 ;	calc.c:453: c.ss = &c.s1;
      002CE9 90r40r20         [24] 7469 	mov	dptr,#(_c + 0x4014)
      002CEC 74r19            [12] 7470 	mov	a,#(_c + 0x200d)
      002CEE F0               [24] 7471 	movx	@dptr,a
      002CEF 74s20            [12] 7472 	mov	a,#((_c + 0x200d) >> 8)
      002CF1 A3               [24] 7473 	inc	dptr
      002CF2 F0               [24] 7474 	movx	@dptr,a
      002CF3 E4               [12] 7475 	clr	a
      002CF4 A3               [24] 7476 	inc	dptr
      002CF5 F0               [24] 7477 	movx	@dptr,a
                                   7478 ;	calc.c:454: stack_init(c.ps);
      002CF6 90r00r15         [24] 7479 	mov	dptr,#(_c + 0x0009)
      002CF9 75 F0 00         [24] 7480 	mov	b,#0x00
      002CFC 12r00r00         [24] 7481 	lcall	_stack_init
                                   7482 ;	calc.c:455: stack_init(c.ss);
      002CFF 90r40r20         [24] 7483 	mov	dptr,#(_c + 0x4014)
      002D02 E0               [24] 7484 	movx	a,@dptr
      002D03 FD               [12] 7485 	mov	r5,a
      002D04 A3               [24] 7486 	inc	dptr
      002D05 E0               [24] 7487 	movx	a,@dptr
      002D06 FE               [12] 7488 	mov	r6,a
      002D07 A3               [24] 7489 	inc	dptr
      002D08 E0               [24] 7490 	movx	a,@dptr
      002D09 FF               [12] 7491 	mov	r7,a
      002D0A 8D 82            [24] 7492 	mov	dpl,r5
      002D0C 8E 83            [24] 7493 	mov	dph,r6
      002D0E 8F F0            [24] 7494 	mov	b,r7
      002D10 12r00r00         [24] 7495 	lcall	_stack_init
                                   7496 ;	calc.c:457: state_init(&s, STATE_START, STATE_FINAL, UNDEF, deltas, &c);
      002D13 74r0C            [12] 7497 	mov	a,#_c
      002D15 C0 E0            [24] 7498 	push	acc
      002D17 74s00            [12] 7499 	mov	a,#(_c >> 8)
      002D19 C0 E0            [24] 7500 	push	acc
      002D1B E4               [12] 7501 	clr	a
      002D1C C0 E0            [24] 7502 	push	acc
      002D1E 74r00            [12] 7503 	mov	a,#_deltas
      002D20 C0 E0            [24] 7504 	push	acc
      002D22 74s00            [12] 7505 	mov	a,#(_deltas >> 8)
      002D24 C0 E0            [24] 7506 	push	acc
      002D26 E4               [12] 7507 	clr	a
      002D27 C0 E0            [24] 7508 	push	acc
      002D29 C0 E0            [24] 7509 	push	acc
      002D2B 74 80            [12] 7510 	mov	a,#0x80
      002D2D C0 E0            [24] 7511 	push	acc
      002D2F 74 03            [12] 7512 	mov	a,#0x03
      002D31 C0 E0            [24] 7513 	push	acc
      002D33 E4               [12] 7514 	clr	a
      002D34 C0 E0            [24] 7515 	push	acc
      002D36 C0 E0            [24] 7516 	push	acc
      002D38 C0 E0            [24] 7517 	push	acc
      002D3A 90r00r00         [24] 7518 	mov	dptr,#_s
      002D3D 75 F0 00         [24] 7519 	mov	b,#0x00
      002D40 12r00r00         [24] 7520 	lcall	_state_init
      002D43 E5 81            [12] 7521 	mov	a,sp
      002D45 24 F4            [12] 7522 	add	a,#0xf4
      002D47 F5 81            [12] 7523 	mov	sp,a
                                   7524 ;	calc.c:459: (void)status(&c, deltas);
      002D49 74r00            [12] 7525 	mov	a,#_deltas
      002D4B C0 E0            [24] 7526 	push	acc
      002D4D 74s00            [12] 7527 	mov	a,#(_deltas >> 8)
      002D4F C0 E0            [24] 7528 	push	acc
      002D51 E4               [12] 7529 	clr	a
      002D52 C0 E0            [24] 7530 	push	acc
      002D54 90r00r0C         [24] 7531 	mov	dptr,#_c
      002D57 75 F0 00         [24] 7532 	mov	b,#0x00
      002D5A 12r26r09         [24] 7533 	lcall	_status
      002D5D 15 81            [12] 7534 	dec	sp
      002D5F 15 81            [12] 7535 	dec	sp
      002D61 15 81            [12] 7536 	dec	sp
                                   7537 ;	calc.c:461: while (1) {
      002D63                       7538 00192$:
                                   7539 ;	calc.c:462: input = getchar();
      002D63 12r00r00         [24] 7540 	lcall	_getchar
      002D66 AE 82            [24] 7541 	mov	r6,dpl
      002D68 AF 83            [24] 7542 	mov	r7,dph
                                   7543 ;	calc.c:463: if (((char)input == '\r') || ((char)input == '\n')) printstr("\r\n");
      002D6A 8E 05            [24] 7544 	mov	ar5,r6
      002D6C BD 0D 02         [24] 7545 	cjne	r5,#0x0d,00372$
      002D6F 80 03            [24] 7546 	sjmp	00101$
      002D71                       7547 00372$:
      002D71 BD 0A 17         [24] 7548 	cjne	r5,#0x0a,00102$
      002D74                       7549 00101$:
      002D74 90r00r17         [24] 7550 	mov	dptr,#___str_3
      002D77 75 F0 80         [24] 7551 	mov	b,#0x80
      002D7A C0 07            [24] 7552 	push	ar7
      002D7C C0 06            [24] 7553 	push	ar6
      002D7E C0 05            [24] 7554 	push	ar5
      002D80 12r00r00         [24] 7555 	lcall	_printstr
      002D83 D0 05            [24] 7556 	pop	ar5
      002D85 D0 06            [24] 7557 	pop	ar6
      002D87 D0 07            [24] 7558 	pop	ar7
      002D89 80 13            [24] 7559 	sjmp	00103$
      002D8B                       7560 00102$:
                                   7561 ;	calc.c:464: else (void)putchar(input);
      002D8B 8E 82            [24] 7562 	mov	dpl,r6
      002D8D 8F 83            [24] 7563 	mov	dph,r7
      002D8F C0 07            [24] 7564 	push	ar7
      002D91 C0 06            [24] 7565 	push	ar6
      002D93 C0 05            [24] 7566 	push	ar5
      002D95 12r00r00         [24] 7567 	lcall	_putchar
      002D98 D0 05            [24] 7568 	pop	ar5
      002D9A D0 06            [24] 7569 	pop	ar6
      002D9C D0 07            [24] 7570 	pop	ar7
      002D9E                       7571 00103$:
                                   7572 ;	calc.c:465: c.digit[0] = (char)input;
      002D9E 90r00r13         [24] 7573 	mov	dptr,#(_c + 0x0007)
      002DA1 ED               [12] 7574 	mov	a,r5
      002DA2 F0               [24] 7575 	movx	@dptr,a
                                   7576 ;	calc.c:467: if ((char)input == 'q') {
      002DA3 BD 71 29         [24] 7577 	cjne	r5,#0x71,00189$
                                   7578 ;	calc.c:468: if (state_exec(&s, EVENT_TERM) <= 0) break;
      002DA6 74 08            [12] 7579 	mov	a,#0x08
      002DA8 C0 E0            [24] 7580 	push	acc
      002DAA E4               [12] 7581 	clr	a
      002DAB C0 E0            [24] 7582 	push	acc
      002DAD 90r00r00         [24] 7583 	mov	dptr,#_s
      002DB0 75 F0 00         [24] 7584 	mov	b,#0x00
      002DB3 12r00r00         [24] 7585 	lcall	_state_exec
      002DB6 AB 82            [24] 7586 	mov	r3,dpl
      002DB8 AC 83            [24] 7587 	mov	r4,dph
      002DBA 15 81            [12] 7588 	dec	sp
      002DBC 15 81            [12] 7589 	dec	sp
      002DBE C3               [12] 7590 	clr	c
      002DBF E4               [12] 7591 	clr	a
      002DC0 9B               [12] 7592 	subb	a,r3
      002DC1 74 80            [12] 7593 	mov	a,#(0x00 ^ 0x80)
      002DC3 8C F0            [24] 7594 	mov	b,r4
      002DC5 63 F0 80         [24] 7595 	xrl	b,#0x80
      002DC8 95 F0            [12] 7596 	subb	a,b
      002DCA 40 97            [24] 7597 	jc	00192$
      002DCC 02r30r7E         [24] 7598 	ljmp	00193$
      002DCF                       7599 00189$:
                                   7600 ;	calc.c:469: } else if ((char)input == 's') {
      002DCF BD 73 2C         [24] 7601 	cjne	r5,#0x73,00186$
                                   7602 ;	calc.c:470: if (state_exec(&s, EVENT_STATUS) <= 0) break;
      002DD2 74 03            [12] 7603 	mov	a,#0x03
      002DD4 C0 E0            [24] 7604 	push	acc
      002DD6 E4               [12] 7605 	clr	a
      002DD7 C0 E0            [24] 7606 	push	acc
      002DD9 90r00r00         [24] 7607 	mov	dptr,#_s
      002DDC 75 F0 00         [24] 7608 	mov	b,#0x00
      002DDF 12r00r00         [24] 7609 	lcall	_state_exec
      002DE2 AB 82            [24] 7610 	mov	r3,dpl
      002DE4 AC 83            [24] 7611 	mov	r4,dph
      002DE6 15 81            [12] 7612 	dec	sp
      002DE8 15 81            [12] 7613 	dec	sp
      002DEA C3               [12] 7614 	clr	c
      002DEB E4               [12] 7615 	clr	a
      002DEC 9B               [12] 7616 	subb	a,r3
      002DED 74 80            [12] 7617 	mov	a,#(0x00 ^ 0x80)
      002DEF 8C F0            [24] 7618 	mov	b,r4
      002DF1 63 F0 80         [24] 7619 	xrl	b,#0x80
      002DF4 95 F0            [12] 7620 	subb	a,b
      002DF6 50 03            [24] 7621 	jnc	00380$
      002DF8 02r2Dr63         [24] 7622 	ljmp	00192$
      002DFB                       7623 00380$:
      002DFB 02r30r7E         [24] 7624 	ljmp	00193$
      002DFE                       7625 00186$:
                                   7626 ;	calc.c:471: } else if ((char)input == '?') {
      002DFE BD 3F 2C         [24] 7627 	cjne	r5,#0x3f,00183$
                                   7628 ;	calc.c:472: if (state_exec(&s, EVENT_HELP) <= 0) break;
      002E01 74 04            [12] 7629 	mov	a,#0x04
      002E03 C0 E0            [24] 7630 	push	acc
      002E05 E4               [12] 7631 	clr	a
      002E06 C0 E0            [24] 7632 	push	acc
      002E08 90r00r00         [24] 7633 	mov	dptr,#_s
      002E0B 75 F0 00         [24] 7634 	mov	b,#0x00
      002E0E 12r00r00         [24] 7635 	lcall	_state_exec
      002E11 AB 82            [24] 7636 	mov	r3,dpl
      002E13 AC 83            [24] 7637 	mov	r4,dph
      002E15 15 81            [12] 7638 	dec	sp
      002E17 15 81            [12] 7639 	dec	sp
      002E19 C3               [12] 7640 	clr	c
      002E1A E4               [12] 7641 	clr	a
      002E1B 9B               [12] 7642 	subb	a,r3
      002E1C 74 80            [12] 7643 	mov	a,#(0x00 ^ 0x80)
      002E1E 8C F0            [24] 7644 	mov	b,r4
      002E20 63 F0 80         [24] 7645 	xrl	b,#0x80
      002E23 95 F0            [12] 7646 	subb	a,b
      002E25 50 03            [24] 7647 	jnc	00383$
      002E27 02r2Dr63         [24] 7648 	ljmp	00192$
      002E2A                       7649 00383$:
      002E2A 02r30r7E         [24] 7650 	ljmp	00193$
      002E2D                       7651 00183$:
                                   7652 ;	calc.c:473: } else if ((char)input == 'i') {
      002E2D BD 69 2C         [24] 7653 	cjne	r5,#0x69,00180$
                                   7654 ;	calc.c:474: if (state_exec(&s, EVENT_RSTA_i) <= 0) break;
      002E30 74 06            [12] 7655 	mov	a,#0x06
      002E32 C0 E0            [24] 7656 	push	acc
      002E34 E4               [12] 7657 	clr	a
      002E35 C0 E0            [24] 7658 	push	acc
      002E37 90r00r00         [24] 7659 	mov	dptr,#_s
      002E3A 75 F0 00         [24] 7660 	mov	b,#0x00
      002E3D 12r00r00         [24] 7661 	lcall	_state_exec
      002E40 AB 82            [24] 7662 	mov	r3,dpl
      002E42 AC 83            [24] 7663 	mov	r4,dph
      002E44 15 81            [12] 7664 	dec	sp
      002E46 15 81            [12] 7665 	dec	sp
      002E48 C3               [12] 7666 	clr	c
      002E49 E4               [12] 7667 	clr	a
      002E4A 9B               [12] 7668 	subb	a,r3
      002E4B 74 80            [12] 7669 	mov	a,#(0x00 ^ 0x80)
      002E4D 8C F0            [24] 7670 	mov	b,r4
      002E4F 63 F0 80         [24] 7671 	xrl	b,#0x80
      002E52 95 F0            [12] 7672 	subb	a,b
      002E54 50 03            [24] 7673 	jnc	00386$
      002E56 02r2Dr63         [24] 7674 	ljmp	00192$
      002E59                       7675 00386$:
      002E59 02r30r7E         [24] 7676 	ljmp	00193$
      002E5C                       7677 00180$:
                                   7678 ;	calc.c:475: } else if ((char)input == 'I') {
      002E5C BD 49 2C         [24] 7679 	cjne	r5,#0x49,00177$
                                   7680 ;	calc.c:476: if (state_exec(&s, EVENT_RSTA_I) <= 0) break;
      002E5F 74 07            [12] 7681 	mov	a,#0x07
      002E61 C0 E0            [24] 7682 	push	acc
      002E63 E4               [12] 7683 	clr	a
      002E64 C0 E0            [24] 7684 	push	acc
      002E66 90r00r00         [24] 7685 	mov	dptr,#_s
      002E69 75 F0 00         [24] 7686 	mov	b,#0x00
      002E6C 12r00r00         [24] 7687 	lcall	_state_exec
      002E6F AB 82            [24] 7688 	mov	r3,dpl
      002E71 AC 83            [24] 7689 	mov	r4,dph
      002E73 15 81            [12] 7690 	dec	sp
      002E75 15 81            [12] 7691 	dec	sp
      002E77 C3               [12] 7692 	clr	c
      002E78 E4               [12] 7693 	clr	a
      002E79 9B               [12] 7694 	subb	a,r3
      002E7A 74 80            [12] 7695 	mov	a,#(0x00 ^ 0x80)
      002E7C 8C F0            [24] 7696 	mov	b,r4
      002E7E 63 F0 80         [24] 7697 	xrl	b,#0x80
      002E81 95 F0            [12] 7698 	subb	a,b
      002E83 50 03            [24] 7699 	jnc	00389$
      002E85 02r2Dr63         [24] 7700 	ljmp	00192$
      002E88                       7701 00389$:
      002E88 02r30r7E         [24] 7702 	ljmp	00193$
      002E8B                       7703 00177$:
                                   7704 ;	calc.c:478: ((char)input == 'h') || ((char)input == 'H') ||
      002E8B BD 68 02         [24] 7705 	cjne	r5,#0x68,00390$
      002E8E 80 0D            [24] 7706 	sjmp	00170$
      002E90                       7707 00390$:
      002E90 BD 48 02         [24] 7708 	cjne	r5,#0x48,00391$
      002E93 80 08            [24] 7709 	sjmp	00170$
      002E95                       7710 00391$:
                                   7711 ;	calc.c:479: ((char)input == 'o') || ((char)input == 'O')
      002E95 BD 6F 02         [24] 7712 	cjne	r5,#0x6f,00392$
      002E98 80 03            [24] 7713 	sjmp	00170$
      002E9A                       7714 00392$:
      002E9A BD 4F 2C         [24] 7715 	cjne	r5,#0x4f,00171$
      002E9D                       7716 00170$:
                                   7717 ;	calc.c:481: if (state_exec(&s, EVENT_BASE) <= 0) break;
      002E9D 74 05            [12] 7718 	mov	a,#0x05
      002E9F C0 E0            [24] 7719 	push	acc
      002EA1 E4               [12] 7720 	clr	a
      002EA2 C0 E0            [24] 7721 	push	acc
      002EA4 90r00r00         [24] 7722 	mov	dptr,#_s
      002EA7 75 F0 00         [24] 7723 	mov	b,#0x00
      002EAA 12r00r00         [24] 7724 	lcall	_state_exec
      002EAD AB 82            [24] 7725 	mov	r3,dpl
      002EAF AC 83            [24] 7726 	mov	r4,dph
      002EB1 15 81            [12] 7727 	dec	sp
      002EB3 15 81            [12] 7728 	dec	sp
      002EB5 C3               [12] 7729 	clr	c
      002EB6 E4               [12] 7730 	clr	a
      002EB7 9B               [12] 7731 	subb	a,r3
      002EB8 74 80            [12] 7732 	mov	a,#(0x00 ^ 0x80)
      002EBA 8C F0            [24] 7733 	mov	b,r4
      002EBC 63 F0 80         [24] 7734 	xrl	b,#0x80
      002EBF 95 F0            [12] 7735 	subb	a,b
      002EC1 50 03            [24] 7736 	jnc	00395$
      002EC3 02r2Dr63         [24] 7737 	ljmp	00192$
      002EC6                       7738 00395$:
      002EC6 02r30r7E         [24] 7739 	ljmp	00193$
      002EC9                       7740 00171$:
                                   7741 ;	calc.c:482: } else if (isxdigit(input)) {
      002EC9 8E 82            [24] 7742 	mov	dpl,r6
      002ECB 8F 83            [24] 7743 	mov	dph,r7
      002ECD C0 05            [24] 7744 	push	ar5
      002ECF 12r00r00         [24] 7745 	lcall	_isxdigit
      002ED2 E5 82            [12] 7746 	mov	a,dpl
      002ED4 85 83 F0         [24] 7747 	mov	b,dph
      002ED7 D0 05            [24] 7748 	pop	ar5
      002ED9 45 F0            [12] 7749 	orl	a,b
      002EDB 60 2C            [24] 7750 	jz	00168$
                                   7751 ;	calc.c:483: if (state_exec(&s, EVENT_DIGIT) <= 0) break;
      002EDD 74 01            [12] 7752 	mov	a,#0x01
      002EDF C0 E0            [24] 7753 	push	acc
      002EE1 E4               [12] 7754 	clr	a
      002EE2 C0 E0            [24] 7755 	push	acc
      002EE4 90r00r00         [24] 7756 	mov	dptr,#_s
      002EE7 75 F0 00         [24] 7757 	mov	b,#0x00
      002EEA 12r00r00         [24] 7758 	lcall	_state_exec
      002EED AE 82            [24] 7759 	mov	r6,dpl
      002EEF AF 83            [24] 7760 	mov	r7,dph
      002EF1 15 81            [12] 7761 	dec	sp
      002EF3 15 81            [12] 7762 	dec	sp
      002EF5 C3               [12] 7763 	clr	c
      002EF6 E4               [12] 7764 	clr	a
      002EF7 9E               [12] 7765 	subb	a,r6
      002EF8 74 80            [12] 7766 	mov	a,#(0x00 ^ 0x80)
      002EFA 8F F0            [24] 7767 	mov	b,r7
      002EFC 63 F0 80         [24] 7768 	xrl	b,#0x80
      002EFF 95 F0            [12] 7769 	subb	a,b
      002F01 50 03            [24] 7770 	jnc	00397$
      002F03 02r2Dr63         [24] 7771 	ljmp	00192$
      002F06                       7772 00397$:
      002F06 02r30r7E         [24] 7773 	ljmp	00193$
      002F09                       7774 00168$:
                                   7775 ;	calc.c:485: ((char)input == 'p') || ((char)input == 'P') ||
      002F09 BD 70 02         [24] 7776 	cjne	r5,#0x70,00398$
      002F0C 80 17            [24] 7777 	sjmp	00159$
      002F0E                       7778 00398$:
      002F0E BD 50 02         [24] 7779 	cjne	r5,#0x50,00399$
      002F11 80 12            [24] 7780 	sjmp	00159$
      002F13                       7781 00399$:
                                   7782 ;	calc.c:486: ((char)input == 'v') || ((char)input == 'V') ||
      002F13 BD 76 02         [24] 7783 	cjne	r5,#0x76,00400$
      002F16 80 0D            [24] 7784 	sjmp	00159$
      002F18                       7785 00400$:
      002F18 BD 56 02         [24] 7786 	cjne	r5,#0x56,00401$
      002F1B 80 08            [24] 7787 	sjmp	00159$
      002F1D                       7788 00401$:
                                   7789 ;	calc.c:487: ((char)input == '.') ||
      002F1D BD 2E 02         [24] 7790 	cjne	r5,#0x2e,00402$
      002F20 80 03            [24] 7791 	sjmp	00159$
      002F22                       7792 00402$:
                                   7793 ;	calc.c:488: ((char)input == 'x')
      002F22 BD 78 2C         [24] 7794 	cjne	r5,#0x78,00160$
      002F25                       7795 00159$:
                                   7796 ;	calc.c:490: if (state_exec(&s, EVENT_OP) <= 0) break;
      002F25 74 02            [12] 7797 	mov	a,#0x02
      002F27 C0 E0            [24] 7798 	push	acc
      002F29 E4               [12] 7799 	clr	a
      002F2A C0 E0            [24] 7800 	push	acc
      002F2C 90r00r00         [24] 7801 	mov	dptr,#_s
      002F2F 75 F0 00         [24] 7802 	mov	b,#0x00
      002F32 12r00r00         [24] 7803 	lcall	_state_exec
      002F35 AE 82            [24] 7804 	mov	r6,dpl
      002F37 AF 83            [24] 7805 	mov	r7,dph
      002F39 15 81            [12] 7806 	dec	sp
      002F3B 15 81            [12] 7807 	dec	sp
      002F3D C3               [12] 7808 	clr	c
      002F3E E4               [12] 7809 	clr	a
      002F3F 9E               [12] 7810 	subb	a,r6
      002F40 74 80            [12] 7811 	mov	a,#(0x00 ^ 0x80)
      002F42 8F F0            [24] 7812 	mov	b,r7
      002F44 63 F0 80         [24] 7813 	xrl	b,#0x80
      002F47 95 F0            [12] 7814 	subb	a,b
      002F49 50 03            [24] 7815 	jnc	00405$
      002F4B 02r2Dr63         [24] 7816 	ljmp	00192$
      002F4E                       7817 00405$:
      002F4E 02r30r7E         [24] 7818 	ljmp	00193$
      002F51                       7819 00160$:
                                   7820 ;	calc.c:492: ((char)input == 'X') || ((char)input == 'T') ||
      002F51 BD 58 02         [24] 7821 	cjne	r5,#0x58,00406$
      002F54 80 17            [24] 7822 	sjmp	00151$
      002F56                       7823 00406$:
      002F56 BD 54 02         [24] 7824 	cjne	r5,#0x54,00407$
      002F59 80 12            [24] 7825 	sjmp	00151$
      002F5B                       7826 00407$:
                                   7827 ;	calc.c:493: ((char)input == 'm') || ((char)input == 'M') ||
      002F5B BD 6D 02         [24] 7828 	cjne	r5,#0x6d,00408$
      002F5E 80 0D            [24] 7829 	sjmp	00151$
      002F60                       7830 00408$:
      002F60 BD 4D 02         [24] 7831 	cjne	r5,#0x4d,00409$
      002F63 80 08            [24] 7832 	sjmp	00151$
      002F65                       7833 00409$:
                                   7834 ;	calc.c:494: ((char)input == 'u') || ((char)input == 'U')
      002F65 BD 75 02         [24] 7835 	cjne	r5,#0x75,00410$
      002F68 80 03            [24] 7836 	sjmp	00151$
      002F6A                       7837 00410$:
      002F6A BD 55 2C         [24] 7838 	cjne	r5,#0x55,00152$
      002F6D                       7839 00151$:
                                   7840 ;	calc.c:496: if (state_exec(&s, EVENT_OP) <= 0) break;
      002F6D 74 02            [12] 7841 	mov	a,#0x02
      002F6F C0 E0            [24] 7842 	push	acc
      002F71 E4               [12] 7843 	clr	a
      002F72 C0 E0            [24] 7844 	push	acc
      002F74 90r00r00         [24] 7845 	mov	dptr,#_s
      002F77 75 F0 00         [24] 7846 	mov	b,#0x00
      002F7A 12r00r00         [24] 7847 	lcall	_state_exec
      002F7D AE 82            [24] 7848 	mov	r6,dpl
      002F7F AF 83            [24] 7849 	mov	r7,dph
      002F81 15 81            [12] 7850 	dec	sp
      002F83 15 81            [12] 7851 	dec	sp
      002F85 C3               [12] 7852 	clr	c
      002F86 E4               [12] 7853 	clr	a
      002F87 9E               [12] 7854 	subb	a,r6
      002F88 74 80            [12] 7855 	mov	a,#(0x00 ^ 0x80)
      002F8A 8F F0            [24] 7856 	mov	b,r7
      002F8C 63 F0 80         [24] 7857 	xrl	b,#0x80
      002F8F 95 F0            [12] 7858 	subb	a,b
      002F91 50 03            [24] 7859 	jnc	00413$
      002F93 02r2Dr63         [24] 7860 	ljmp	00192$
      002F96                       7861 00413$:
      002F96 02r30r7E         [24] 7862 	ljmp	00193$
      002F99                       7863 00152$:
                                   7864 ;	calc.c:498: ((char)input == '+') || ((char)input == '-')
      002F99 BD 2B 02         [24] 7865 	cjne	r5,#0x2b,00414$
      002F9C 80 03            [24] 7866 	sjmp	00147$
      002F9E                       7867 00414$:
      002F9E BD 2D 2C         [24] 7868 	cjne	r5,#0x2d,00148$
      002FA1                       7869 00147$:
                                   7870 ;	calc.c:500: if (state_exec(&s, EVENT_OP) <= 0) break;
      002FA1 74 02            [12] 7871 	mov	a,#0x02
      002FA3 C0 E0            [24] 7872 	push	acc
      002FA5 E4               [12] 7873 	clr	a
      002FA6 C0 E0            [24] 7874 	push	acc
      002FA8 90r00r00         [24] 7875 	mov	dptr,#_s
      002FAB 75 F0 00         [24] 7876 	mov	b,#0x00
      002FAE 12r00r00         [24] 7877 	lcall	_state_exec
      002FB1 AE 82            [24] 7878 	mov	r6,dpl
      002FB3 AF 83            [24] 7879 	mov	r7,dph
      002FB5 15 81            [12] 7880 	dec	sp
      002FB7 15 81            [12] 7881 	dec	sp
      002FB9 C3               [12] 7882 	clr	c
      002FBA E4               [12] 7883 	clr	a
      002FBB 9E               [12] 7884 	subb	a,r6
      002FBC 74 80            [12] 7885 	mov	a,#(0x00 ^ 0x80)
      002FBE 8F F0            [24] 7886 	mov	b,r7
      002FC0 63 F0 80         [24] 7887 	xrl	b,#0x80
      002FC3 95 F0            [12] 7888 	subb	a,b
      002FC5 50 03            [24] 7889 	jnc	00417$
      002FC7 02r2Dr63         [24] 7890 	ljmp	00192$
      002FCA                       7891 00417$:
      002FCA 02r30r7E         [24] 7892 	ljmp	00193$
      002FCD                       7893 00148$:
                                   7894 ;	calc.c:502: ((char)input == '*') ||
      002FCD BD 2A 02         [24] 7895 	cjne	r5,#0x2a,00418$
      002FD0 80 12            [24] 7896 	sjmp	00140$
      002FD2                       7897 00418$:
                                   7898 ;	calc.c:503: ((char)input == '/') || ((char)input == '\\') ||
      002FD2 BD 2F 02         [24] 7899 	cjne	r5,#0x2f,00419$
      002FD5 80 0D            [24] 7900 	sjmp	00140$
      002FD7                       7901 00419$:
      002FD7 BD 5C 02         [24] 7902 	cjne	r5,#0x5c,00420$
      002FDA 80 08            [24] 7903 	sjmp	00140$
      002FDC                       7904 00420$:
                                   7905 ;	calc.c:504: ((char)input == '%') || ((char)input == '#')
      002FDC BD 25 02         [24] 7906 	cjne	r5,#0x25,00421$
      002FDF 80 03            [24] 7907 	sjmp	00140$
      002FE1                       7908 00421$:
      002FE1 BD 23 29         [24] 7909 	cjne	r5,#0x23,00141$
      002FE4                       7910 00140$:
                                   7911 ;	calc.c:506: if (state_exec(&s, EVENT_OP) <= 0) break;
      002FE4 74 02            [12] 7912 	mov	a,#0x02
      002FE6 C0 E0            [24] 7913 	push	acc
      002FE8 E4               [12] 7914 	clr	a
      002FE9 C0 E0            [24] 7915 	push	acc
      002FEB 90r00r00         [24] 7916 	mov	dptr,#_s
      002FEE 75 F0 00         [24] 7917 	mov	b,#0x00
      002FF1 12r00r00         [24] 7918 	lcall	_state_exec
      002FF4 AE 82            [24] 7919 	mov	r6,dpl
      002FF6 AF 83            [24] 7920 	mov	r7,dph
      002FF8 15 81            [12] 7921 	dec	sp
      002FFA 15 81            [12] 7922 	dec	sp
      002FFC C3               [12] 7923 	clr	c
      002FFD E4               [12] 7924 	clr	a
      002FFE 9E               [12] 7925 	subb	a,r6
      002FFF 74 80            [12] 7926 	mov	a,#(0x00 ^ 0x80)
      003001 8F F0            [24] 7927 	mov	b,r7
      003003 63 F0 80         [24] 7928 	xrl	b,#0x80
      003006 95 F0            [12] 7929 	subb	a,b
      003008 50 74            [24] 7930 	jnc	00193$
      00300A 02r2Dr63         [24] 7931 	ljmp	00192$
      00300D                       7932 00141$:
                                   7933 ;	calc.c:508: ((char)input == '&') ||
      00300D BD 26 02         [24] 7934 	cjne	r5,#0x26,00425$
      003010 80 1C            [24] 7935 	sjmp	00131$
      003012                       7936 00425$:
                                   7937 ;	calc.c:509: ((char)input == '|') || ((char)input == '^') ||
      003012 BD 7C 02         [24] 7938 	cjne	r5,#0x7c,00426$
      003015 80 17            [24] 7939 	sjmp	00131$
      003017                       7940 00426$:
      003017 BD 5E 02         [24] 7941 	cjne	r5,#0x5e,00427$
      00301A 80 12            [24] 7942 	sjmp	00131$
      00301C                       7943 00427$:
                                   7944 ;	calc.c:510: ((char)input == '~') ||
      00301C BD 7E 02         [24] 7945 	cjne	r5,#0x7e,00428$
      00301F 80 0D            [24] 7946 	sjmp	00131$
      003021                       7947 00428$:
                                   7948 ;	calc.c:511: ((char)input == '>') || ((char)input == ']') ||
      003021 BD 3E 02         [24] 7949 	cjne	r5,#0x3e,00429$
      003024 80 08            [24] 7950 	sjmp	00131$
      003026                       7951 00429$:
      003026 BD 5D 02         [24] 7952 	cjne	r5,#0x5d,00430$
      003029 80 03            [24] 7953 	sjmp	00131$
      00302B                       7954 00430$:
                                   7955 ;	calc.c:512: ((char)input == '<')
      00302B BD 3C 29         [24] 7956 	cjne	r5,#0x3c,00132$
      00302E                       7957 00131$:
                                   7958 ;	calc.c:514: if (state_exec(&s, EVENT_OP) <= 0) break;
      00302E 74 02            [12] 7959 	mov	a,#0x02
      003030 C0 E0            [24] 7960 	push	acc
      003032 E4               [12] 7961 	clr	a
      003033 C0 E0            [24] 7962 	push	acc
      003035 90r00r00         [24] 7963 	mov	dptr,#_s
      003038 75 F0 00         [24] 7964 	mov	b,#0x00
      00303B 12r00r00         [24] 7965 	lcall	_state_exec
      00303E AE 82            [24] 7966 	mov	r6,dpl
      003040 AF 83            [24] 7967 	mov	r7,dph
      003042 15 81            [12] 7968 	dec	sp
      003044 15 81            [12] 7969 	dec	sp
      003046 C3               [12] 7970 	clr	c
      003047 E4               [12] 7971 	clr	a
      003048 9E               [12] 7972 	subb	a,r6
      003049 74 80            [12] 7973 	mov	a,#(0x00 ^ 0x80)
      00304B 8F F0            [24] 7974 	mov	b,r7
      00304D 63 F0 80         [24] 7975 	xrl	b,#0x80
      003050 95 F0            [12] 7976 	subb	a,b
      003052 50 2A            [24] 7977 	jnc	00193$
      003054 02r2Dr63         [24] 7978 	ljmp	00192$
      003057                       7979 00132$:
                                   7980 ;	calc.c:516: if (state_exec(&s, EVENT_DELIM) <= 0) break;
      003057 E4               [12] 7981 	clr	a
      003058 C0 E0            [24] 7982 	push	acc
      00305A C0 E0            [24] 7983 	push	acc
      00305C 90r00r00         [24] 7984 	mov	dptr,#_s
      00305F 75 F0 00         [24] 7985 	mov	b,#0x00
      003062 12r00r00         [24] 7986 	lcall	_state_exec
      003065 AE 82            [24] 7987 	mov	r6,dpl
      003067 AF 83            [24] 7988 	mov	r7,dph
      003069 15 81            [12] 7989 	dec	sp
      00306B 15 81            [12] 7990 	dec	sp
      00306D C3               [12] 7991 	clr	c
      00306E E4               [12] 7992 	clr	a
      00306F 9E               [12] 7993 	subb	a,r6
      003070 74 80            [12] 7994 	mov	a,#(0x00 ^ 0x80)
      003072 8F F0            [24] 7995 	mov	b,r7
      003074 63 F0 80         [24] 7996 	xrl	b,#0x80
      003077 95 F0            [12] 7997 	subb	a,b
      003079 50 03            [24] 7998 	jnc	00434$
      00307B 02r2Dr63         [24] 7999 	ljmp	00192$
      00307E                       8000 00434$:
      00307E                       8001 00193$:
                                   8002 ;	calc.c:520: printstr("TERM\r\n");
      00307E 90r03rA8         [24] 8003 	mov	dptr,#___str_52
      003081 75 F0 80         [24] 8004 	mov	b,#0x80
      003084 12r00r00         [24] 8005 	lcall	_printstr
                                   8006 ;	calc.c:522: PCON |= 2;
      003087 43 87 02         [24] 8007 	orl	_PCON,#0x02
                                   8008 ;	calc.c:524: return;
                                   8009 ;	calc.c:525: }
      00308A 22               [24] 8010 	ret
                                   8011 	.area CSEG    (CODE)
                                   8012 	.area CONST   (CODE)
                                   8013 	.area CONST   (CODE)
      000000                       8014 ___str_0:
      000000 25 30 38 6C 78        8015 	.ascii "%08lx"
      000005 09                    8016 	.db 0x09
      000006 00                    8017 	.db 0x00
                                   8018 	.area CSEG    (CODE)
                                   8019 	.area CONST   (CODE)
      000007                       8020 ___str_1:
      000007 25 20 31 31 6C 64     8021 	.ascii "% 11ld"
      00000D 09                    8022 	.db 0x09
      00000E 00                    8023 	.db 0x00
                                   8024 	.area CSEG    (CODE)
                                   8025 	.area CONST   (CODE)
      00000F                       8026 ___str_2:
      00000F 25 30 31 31 6C 6F     8027 	.ascii "%011lo"
      000015 09                    8028 	.db 0x09
      000016 00                    8029 	.db 0x00
                                   8030 	.area CSEG    (CODE)
                                   8031 	.area CONST   (CODE)
      000017                       8032 ___str_3:
      000017 0D                    8033 	.db 0x0d
      000018 0A                    8034 	.db 0x0a
      000019 00                    8035 	.db 0x00
                                   8036 	.area CSEG    (CODE)
                                   8037 	.area CONST   (CODE)
      00001A                       8038 ___str_4:
      00001A 73 74 61 63 6B 20 75  8039 	.ascii "stack underflow"
             6E 64 65 72 66 6C 6F
             77
      000029 0D                    8040 	.db 0x0d
      00002A 0A                    8041 	.db 0x0a
      00002B 00                    8042 	.db 0x00
                                   8043 	.area CSEG    (CODE)
                                   8044 	.area CONST   (CODE)
      00002C                       8045 ___str_5:
      00002C 50 53 50 41           8046 	.ascii "PSPA"
      000030 09                    8047 	.db 0x09
      000031 00                    8048 	.db 0x00
                                   8049 	.area CSEG    (CODE)
                                   8050 	.area CONST   (CODE)
      000032                       8051 ___str_6:
      000032 53 53 50 41           8052 	.ascii "SSPA"
      000036 09                    8053 	.db 0x09
      000037 00                    8054 	.db 0x00
                                   8055 	.area CSEG    (CODE)
                                   8056 	.area CONST   (CODE)
      000038                       8057 ___str_7:
      000038 50 53 56 41           8058 	.ascii "PSVA"
      00003C 09                    8059 	.db 0x09
      00003D 00                    8060 	.db 0x00
                                   8061 	.area CSEG    (CODE)
                                   8062 	.area CONST   (CODE)
      00003E                       8063 ___str_8:
      00003E 50 53 56 54 4F 50     8064 	.ascii "PSVTOP"
      000044 09                    8065 	.db 0x09
      000045 00                    8066 	.db 0x00
                                   8067 	.area CSEG    (CODE)
                                   8068 	.area CONST   (CODE)
      000046                       8069 ___str_9:
      000046 50 53 50 54 4F 50     8070 	.ascii "PSPTOP"
      00004C 09                    8071 	.db 0x09
      00004D 00                    8072 	.db 0x00
                                   8073 	.area CSEG    (CODE)
                                   8074 	.area CONST   (CODE)
      00004E                       8075 ___str_10:
      00004E 0D                    8076 	.db 0x0d
      00004F 0A                    8077 	.db 0x0a
      000050 73 74 61 63 6B 20 75  8078 	.ascii "stack underflow"
             6E 64 65 72 66 6C 6F
             77
      00005F 0D                    8079 	.db 0x0d
      000060 0A                    8080 	.db 0x0a
      000061 00                    8081 	.db 0x00
                                   8082 	.area CSEG    (CODE)
                                   8083 	.area CONST   (CODE)
      000062                       8084 ___str_11:
      000062 0D                    8085 	.db 0x0d
      000063 0A                    8086 	.db 0x0a
      000064 73 65 63 6F 6E 64 61  8087 	.ascii "secondary stack overflow"
             72 79 20 73 74 61 63
             6B 20 6F 76 65 72 66
             6C 6F 77
      00007C 0D                    8088 	.db 0x0d
      00007D 0A                    8089 	.db 0x0a
      00007E 00                    8090 	.db 0x00
                                   8091 	.area CSEG    (CODE)
                                   8092 	.area CONST   (CODE)
      00007F                       8093 ___str_12:
      00007F 0D                    8094 	.db 0x0d
      000080 0A                    8095 	.db 0x0a
      000081 73 65 63 6F 6E 64 61  8096 	.ascii "secondary stack underflow"
             72 79 20 73 74 61 63
             6B 20 75 6E 64 65 72
             66 6C 6F 77
      00009A 0D                    8097 	.db 0x0d
      00009B 0A                    8098 	.db 0x0a
      00009C 00                    8099 	.db 0x00
                                   8100 	.area CSEG    (CODE)
                                   8101 	.area CONST   (CODE)
      00009D                       8102 ___str_13:
      00009D 0D                    8103 	.db 0x0d
      00009E 0A                    8104 	.db 0x0a
      00009F 73 74 61 63 6B 20 6F  8105 	.ascii "stack overflow"
             76 65 72 66 6C 6F 77
      0000AD 0D                    8106 	.db 0x0d
      0000AE 0A                    8107 	.db 0x0a
      0000AF 00                    8108 	.db 0x00
                                   8109 	.area CSEG    (CODE)
                                   8110 	.area CONST   (CODE)
      0000B0                       8111 ___str_14:
      0000B0 0D                    8112 	.db 0x0d
      0000B1 0A                    8113 	.db 0x0a
      0000B2 64 69 76 69 73 69 6F  8114 	.ascii "division by zero"
             6E 20 62 79 20 7A 65
             72 6F
      0000C2 0D                    8115 	.db 0x0d
      0000C3 0A                    8116 	.db 0x0a
      0000C4 00                    8117 	.db 0x00
                                   8118 	.area CSEG    (CODE)
                                   8119 	.area CONST   (CODE)
      0000C5                       8120 ___str_15:
      0000C5 0D                    8121 	.db 0x0d
      0000C6 0A                    8122 	.db 0x0a
      0000C7 50 53 20 3D 20 25 70  8123 	.ascii "PS = %p, SS = %p, base = %d"
             2C 20 53 53 20 3D 20
             25 70 2C 20 62 61 73
             65 20 3D 20 25 64
      0000E2 0D                    8124 	.db 0x0d
      0000E3 0A                    8125 	.db 0x0a
      0000E4 00                    8126 	.db 0x00
                                   8127 	.area CSEG    (CODE)
                                   8128 	.area CONST   (CODE)
      0000E5                       8129 ___str_16:
      0000E5 41 43 43              8130 	.ascii "ACC"
      0000E8 09                    8131 	.db 0x09
      0000E9 00                    8132 	.db 0x00
                                   8133 	.area CSEG    (CODE)
                                   8134 	.area CONST   (CODE)
      0000EA                       8135 ___str_17:
      0000EA 0D                    8136 	.db 0x0d
      0000EB 0A                    8137 	.db 0x0a
      0000EC 50 53 54 4F 50 31     8138 	.ascii "PSTOP1"
      0000F2 09                    8139 	.db 0x09
      0000F3 00                    8140 	.db 0x00
                                   8141 	.area CSEG    (CODE)
                                   8142 	.area CONST   (CODE)
      0000F4                       8143 ___str_18:
      0000F4 0D                    8144 	.db 0x0d
      0000F5 0A                    8145 	.db 0x0a
      0000F6 50 53 54 4F 50 30     8146 	.ascii "PSTOP0"
      0000FC 09                    8147 	.db 0x09
      0000FD 00                    8148 	.db 0x00
                                   8149 	.area CSEG    (CODE)
                                   8150 	.area CONST   (CODE)
      0000FE                       8151 ___str_19:
      0000FE 0D                    8152 	.db 0x0d
      0000FF 0A                    8153 	.db 0x0a
      000100 53 53 54 4F 50 31     8154 	.ascii "SSTOP1"
      000106 09                    8155 	.db 0x09
      000107 00                    8156 	.db 0x00
                                   8157 	.area CSEG    (CODE)
                                   8158 	.area CONST   (CODE)
      000108                       8159 ___str_20:
      000108 0D                    8160 	.db 0x0d
      000109 0A                    8161 	.db 0x0a
      00010A 53 53 54 4F 50 30     8162 	.ascii "SSTOP0"
      000110 09                    8163 	.db 0x09
      000111 00                    8164 	.db 0x00
                                   8165 	.area CSEG    (CODE)
                                   8166 	.area CONST   (CODE)
      000112                       8167 ___str_21:
      000112 0D                    8168 	.db 0x0d
      000113 0A                    8169 	.db 0x0a
      000114 48 68 4F 6F           8170 	.ascii "HhOo"
      000118 09                    8171 	.db 0x09
      000119 62 61 73 65 20 31 36  8172 	.ascii "base 16 10 8 2"
             20 31 30 20 38 20 32
      000127 0D                    8173 	.db 0x0d
      000128 0A                    8174 	.db 0x0a
      000129 00                    8175 	.db 0x00
                                   8176 	.area CSEG    (CODE)
                                   8177 	.area CONST   (CODE)
      00012A                       8178 ___str_22:
      00012A 70 2E                 8179 	.ascii "p."
      00012C 09                    8180 	.db 0x09
      00012D 70 6F 70 20 74 6F 70  8181 	.ascii "pop top"
      000134 0D                    8182 	.db 0x0d
      000135 0A                    8183 	.db 0x0a
      000136 00                    8184 	.db 0x00
                                   8185 	.area CSEG    (CODE)
                                   8186 	.area CONST   (CODE)
      000137                       8187 ___str_23:
      000137 50                    8188 	.ascii "P"
      000138 09                    8189 	.db 0x09
      000139 70 6F 70 20 73 74 61  8190 	.ascii "pop stack"
             63 6B
      000142 0D                    8191 	.db 0x0d
      000143 0A                    8192 	.db 0x0a
      000144 00                    8193 	.db 0x00
                                   8194 	.area CSEG    (CODE)
                                   8195 	.area CONST   (CODE)
      000145                       8196 ___str_24:
      000145 76                    8197 	.ascii "v"
      000146 09                    8198 	.db 0x09
      000147 70 65 65 6B 20 74 6F  8199 	.ascii "peek top"
             70
      00014F 0D                    8200 	.db 0x0d
      000150 0A                    8201 	.db 0x0a
      000151 00                    8202 	.db 0x00
                                   8203 	.area CSEG    (CODE)
                                   8204 	.area CONST   (CODE)
      000152                       8205 ___str_25:
      000152 56                    8206 	.ascii "V"
      000153 09                    8207 	.db 0x09
      000154 70 65 65 6B 20 73 74  8208 	.ascii "peek stack"
             61 63 6B
      00015E 0D                    8209 	.db 0x0d
      00015F 0A                    8210 	.db 0x0a
      000160 00                    8211 	.db 0x00
                                   8212 	.area CSEG    (CODE)
                                   8213 	.area CONST   (CODE)
      000161                       8214 ___str_26:
      000161 69                    8215 	.ascii "i"
      000162 09                    8216 	.db 0x09
      000163 72 65 73 65 74 20 61  8217 	.ascii "reset acc"
             63 63
      00016C 0D                    8218 	.db 0x0d
      00016D 0A                    8219 	.db 0x0a
      00016E 00                    8220 	.db 0x00
                                   8221 	.area CSEG    (CODE)
                                   8222 	.area CONST   (CODE)
      00016F                       8223 ___str_27:
      00016F 49                    8224 	.ascii "I"
      000170 09                    8225 	.db 0x09
      000171 72 65 73 65 74 20 61  8226 	.ascii "reset and discard acc"
             6E 64 20 64 69 73 63
             61 72 64 20 61 63 63
      000186 0D                    8227 	.db 0x0d
      000187 0A                    8228 	.db 0x0a
      000188 00                    8229 	.db 0x00
                                   8230 	.area CSEG    (CODE)
                                   8231 	.area CONST   (CODE)
      000189                       8232 ___str_28:
      000189 78                    8233 	.ascii "x"
      00018A 09                    8234 	.db 0x09
      00018B 65 78 63 68 61 6E 67  8235 	.ascii "exchange top 2"
             65 20 74 6F 70 20 32
      000199 0D                    8236 	.db 0x0d
      00019A 0A                    8237 	.db 0x0a
      00019B 00                    8238 	.db 0x00
                                   8239 	.area CSEG    (CODE)
                                   8240 	.area CONST   (CODE)
      00019C                       8241 ___str_29:
      00019C 58                    8242 	.ascii "X"
      00019D 09                    8243 	.db 0x09
      00019E 65 78 63 68 61 6E 67  8244 	.ascii "exchange stacks primary <-> secondary"
             65 20 73 74 61 63 6B
             73 20 70 72 69 6D 61
             72 79 20 3C 2D 3E 20
             73 65 63 6F 6E 64 61
             72 79
      0001C3 0D                    8245 	.db 0x0d
      0001C4 0A                    8246 	.db 0x0a
      0001C5 00                    8247 	.db 0x00
                                   8248 	.area CSEG    (CODE)
                                   8249 	.area CONST   (CODE)
      0001C6                       8250 ___str_30:
      0001C6 54                    8251 	.ascii "T"
      0001C7 09                    8252 	.db 0x09
      0001C8 65 78 63 68 61 6E 67  8253 	.ascii "exchange tops primary <-> secondary"
             65 20 74 6F 70 73 20
             70 72 69 6D 61 72 79
             20 3C 2D 3E 20 73 65
             63 6F 6E 64 61 72 79
      0001EB 0D                    8254 	.db 0x0d
      0001EC 0A                    8255 	.db 0x0a
      0001ED 00                    8256 	.db 0x00
                                   8257 	.area CSEG    (CODE)
                                   8258 	.area CONST   (CODE)
      0001EE                       8259 ___str_31:
      0001EE 55                    8260 	.ascii "U"
      0001EF 09                    8261 	.db 0x09
      0001F0 63 6F 70 79 20 74 6F  8262 	.ascii "copy top secondary -> primary"
             70 20 73 65 63 6F 6E
             64 61 72 79 20 2D 3E
             20 70 72 69 6D 61 72
             79
      00020D 0D                    8263 	.db 0x0d
      00020E 0A                    8264 	.db 0x0a
      00020F 00                    8265 	.db 0x00
                                   8266 	.area CSEG    (CODE)
                                   8267 	.area CONST   (CODE)
      000210                       8268 ___str_32:
      000210 75                    8269 	.ascii "u"
      000211 09                    8270 	.db 0x09
      000212 63 6F 70 79 20 74 6F  8271 	.ascii "copy top primary -> secondary"
             70 20 70 72 69 6D 61
             72 79 20 2D 3E 20 73
             65 63 6F 6E 64 61 72
             79
      00022F 0D                    8272 	.db 0x0d
      000230 0A                    8273 	.db 0x0a
      000231 00                    8274 	.db 0x00
                                   8275 	.area CSEG    (CODE)
                                   8276 	.area CONST   (CODE)
      000232                       8277 ___str_33:
      000232 4D                    8278 	.ascii "M"
      000233 09                    8279 	.db 0x09
      000234 6D 6F 76 65 20 74 6F  8280 	.ascii "move top secondary -> primary"
             70 20 73 65 63 6F 6E
             64 61 72 79 20 2D 3E
             20 70 72 69 6D 61 72
             79
      000251 0D                    8281 	.db 0x0d
      000252 0A                    8282 	.db 0x0a
      000253 00                    8283 	.db 0x00
                                   8284 	.area CSEG    (CODE)
                                   8285 	.area CONST   (CODE)
      000254                       8286 ___str_34:
      000254 6D                    8287 	.ascii "m"
      000255 09                    8288 	.db 0x09
      000256 6D 6F 76 65 20 74 6F  8289 	.ascii "move top primary -> secondary"
             70 20 70 72 69 6D 61
             72 79 20 2D 3E 20 73
             65 63 6F 6E 64 61 72
             79
      000273 0D                    8290 	.db 0x0d
      000274 0A                    8291 	.db 0x0a
      000275 00                    8292 	.db 0x00
                                   8293 	.area CSEG    (CODE)
                                   8294 	.area CONST   (CODE)
      000276                       8295 ___str_35:
      000276 2B                    8296 	.ascii "+"
      000277 09                    8297 	.db 0x09
      000278 61 64 64 20 74 6F 70  8298 	.ascii "add top 2"
             20 32
      000281 0D                    8299 	.db 0x0d
      000282 0A                    8300 	.db 0x0a
      000283 00                    8301 	.db 0x00
                                   8302 	.area CSEG    (CODE)
                                   8303 	.area CONST   (CODE)
      000284                       8304 ___str_36:
      000284 2D                    8305 	.ascii "-"
      000285 09                    8306 	.db 0x09
      000286 73 75 62 74 72 61 63  8307 	.ascii "subtract top 2"
             74 20 74 6F 70 20 32
      000294 0D                    8308 	.db 0x0d
      000295 0A                    8309 	.db 0x0a
      000296 00                    8310 	.db 0x00
                                   8311 	.area CSEG    (CODE)
                                   8312 	.area CONST   (CODE)
      000297                       8313 ___str_37:
      000297 2A                    8314 	.ascii "*"
      000298 09                    8315 	.db 0x09
      000299 6D 75 6C 74 69 70 6C  8316 	.ascii "multiply top 2"
             79 20 74 6F 70 20 32
      0002A7 0D                    8317 	.db 0x0d
      0002A8 0A                    8318 	.db 0x0a
      0002A9 00                    8319 	.db 0x00
                                   8320 	.area CSEG    (CODE)
                                   8321 	.area CONST   (CODE)
      0002AA                       8322 ___str_38:
      0002AA 2F                    8323 	.ascii "/"
      0002AB 09                    8324 	.db 0x09
      0002AC 64 69 76 69 64 65 20  8325 	.ascii "divide top 2"
             74 6F 70 20 32
      0002B8 0D                    8326 	.db 0x0d
      0002B9 0A                    8327 	.db 0x0a
      0002BA 00                    8328 	.db 0x00
                                   8329 	.area CSEG    (CODE)
                                   8330 	.area CONST   (CODE)
      0002BB                       8331 ___str_39:
      0002BB 5C                    8332 	.db 0x5c
      0002BC 09                    8333 	.db 0x09
      0002BD 64 69 76 69 64 65 20  8334 	.ascii "divide top 2 unsigned"
             74 6F 70 20 32 20 75
             6E 73 69 67 6E 65 64
      0002D2 0D                    8335 	.db 0x0d
      0002D3 0A                    8336 	.db 0x0a
      0002D4 00                    8337 	.db 0x00
                                   8338 	.area CSEG    (CODE)
                                   8339 	.area CONST   (CODE)
      0002D5                       8340 ___str_40:
      0002D5 25                    8341 	.ascii "%"
      0002D6 09                    8342 	.db 0x09
      0002D7 6D 6F 64 75 6C 75 73  8343 	.ascii "modulus top 2"
             20 74 6F 70 20 32
      0002E4 0D                    8344 	.db 0x0d
      0002E5 0A                    8345 	.db 0x0a
      0002E6 00                    8346 	.db 0x00
                                   8347 	.area CSEG    (CODE)
                                   8348 	.area CONST   (CODE)
      0002E7                       8349 ___str_41:
      0002E7 23                    8350 	.ascii "#"
      0002E8 09                    8351 	.db 0x09
      0002E9 6D 6F 64 75 6C 75 73  8352 	.ascii "modulus top 2 unsigned"
             20 74 6F 70 20 32 20
             75 6E 73 69 67 6E 65
             64
      0002FF 0D                    8353 	.db 0x0d
      000300 0A                    8354 	.db 0x0a
      000301 00                    8355 	.db 0x00
                                   8356 	.area CSEG    (CODE)
                                   8357 	.area CONST   (CODE)
      000302                       8358 ___str_42:
      000302 26                    8359 	.ascii "&"
      000303 09                    8360 	.db 0x09
      000304 61 6E 64 20 74 6F 70  8361 	.ascii "and top 2"
             20 32
      00030D 0D                    8362 	.db 0x0d
      00030E 0A                    8363 	.db 0x0a
      00030F 00                    8364 	.db 0x00
                                   8365 	.area CSEG    (CODE)
                                   8366 	.area CONST   (CODE)
      000310                       8367 ___str_43:
      000310 7C                    8368 	.ascii "|"
      000311 09                    8369 	.db 0x09
      000312 6F 72 20 74 6F 70 20  8370 	.ascii "or top 2"
             32
      00031A 0D                    8371 	.db 0x0d
      00031B 0A                    8372 	.db 0x0a
      00031C 00                    8373 	.db 0x00
                                   8374 	.area CSEG    (CODE)
                                   8375 	.area CONST   (CODE)
      00031D                       8376 ___str_44:
      00031D 5E                    8377 	.ascii "^"
      00031E 09                    8378 	.db 0x09
      00031F 78 6F 72 20 74 6F 70  8379 	.ascii "xor top 2"
             20 32
      000328 0D                    8380 	.db 0x0d
      000329 0A                    8381 	.db 0x0a
      00032A 00                    8382 	.db 0x00
                                   8383 	.area CSEG    (CODE)
                                   8384 	.area CONST   (CODE)
      00032B                       8385 ___str_45:
      00032B 3E                    8386 	.ascii ">"
      00032C 09                    8387 	.db 0x09
      00032D 73 68 69 66 74 20 72  8388 	.ascii "shift right top 2"
             69 67 68 74 20 74 6F
             70 20 32
      00033E 0D                    8389 	.db 0x0d
      00033F 0A                    8390 	.db 0x0a
      000340 00                    8391 	.db 0x00
                                   8392 	.area CSEG    (CODE)
                                   8393 	.area CONST   (CODE)
      000341                       8394 ___str_46:
      000341 5D                    8395 	.ascii "]"
      000342 09                    8396 	.db 0x09
      000343 61 72 69 74 68 6D 65  8397 	.ascii "arithmetic shift right top 2"
             74 69 63 20 73 68 69
             66 74 20 72 69 67 68
             74 20 74 6F 70 20 32
      00035F 0D                    8398 	.db 0x0d
      000360 0A                    8399 	.db 0x0a
      000361 00                    8400 	.db 0x00
                                   8401 	.area CSEG    (CODE)
                                   8402 	.area CONST   (CODE)
      000362                       8403 ___str_47:
      000362 3C                    8404 	.ascii "<"
      000363 09                    8405 	.db 0x09
      000364 73 68 69 66 74 20 6C  8406 	.ascii "shift left top 2"
             65 66 74 20 74 6F 70
             20 32
      000374 0D                    8407 	.db 0x0d
      000375 0A                    8408 	.db 0x0a
      000376 00                    8409 	.db 0x00
                                   8410 	.area CSEG    (CODE)
                                   8411 	.area CONST   (CODE)
      000377                       8412 ___str_48:
      000377 7E                    8413 	.ascii "~"
      000378 09                    8414 	.db 0x09
      000379 62 69 74 77 69 73 65  8415 	.ascii "bitwise not top"
             20 6E 6F 74 20 74 6F
             70
      000388 0D                    8416 	.db 0x0d
      000389 0A                    8417 	.db 0x0a
      00038A 00                    8418 	.db 0x00
                                   8419 	.area CSEG    (CODE)
                                   8420 	.area CONST   (CODE)
      00038B                       8421 ___str_49:
      00038B 73                    8422 	.ascii "s"
      00038C 09                    8423 	.db 0x09
      00038D 73 74 61 74 75 73     8424 	.ascii "status"
      000393 0D                    8425 	.db 0x0d
      000394 0A                    8426 	.db 0x0a
      000395 00                    8427 	.db 0x00
                                   8428 	.area CSEG    (CODE)
                                   8429 	.area CONST   (CODE)
      000396                       8430 ___str_50:
      000396 3F                    8431 	.ascii "?"
      000397 09                    8432 	.db 0x09
      000398 68 65 6C 70           8433 	.ascii "help"
      00039C 0D                    8434 	.db 0x0d
      00039D 0A                    8435 	.db 0x0a
      00039E 00                    8436 	.db 0x00
                                   8437 	.area CSEG    (CODE)
                                   8438 	.area CONST   (CODE)
      00039F                       8439 ___str_51:
      00039F 71                    8440 	.ascii "q"
      0003A0 09                    8441 	.db 0x09
      0003A1 71 75 69 74           8442 	.ascii "quit"
      0003A5 0D                    8443 	.db 0x0d
      0003A6 0A                    8444 	.db 0x0a
      0003A7 00                    8445 	.db 0x00
                                   8446 	.area CSEG    (CODE)
                                   8447 	.area CONST   (CODE)
      0003A8                       8448 ___str_52:
      0003A8 54 45 52 4D           8449 	.ascii "TERM"
      0003AC 0D                    8450 	.db 0x0d
      0003AD 0A                    8451 	.db 0x0a
      0003AE 00                    8452 	.db 0x00
                                   8453 	.area CSEG    (CODE)
                                   8454 	.area XINIT   (CODE)
      000000                       8455 __xinit__deltas:
      000000 00 00                 8456 	.byte #0x00, #0x00	;  0
      000002 00 00                 8457 	.byte #0x00, #0x00	;  0
      000004 00 00                 8458 	.byte #0x00, #0x00	;  0
      000006 00 00                 8459 	.byte #0x00,#0x00
      000008 00 00                 8460 	.byte #0x00,#0x00
      00000A 00 00                 8461 	.byte #0x00, #0x00	;  0
      00000C 01 00                 8462 	.byte #0x01, #0x00	;  1
      00000E 02 00                 8463 	.byte #0x02, #0x00	;  2
      000010 00 00                 8464 	.byte #0x00,#0x00
      000012r00s00                 8465 	.byte _accumulate, (_accumulate >> 8)
      000014 00 00                 8466 	.byte #0x00, #0x00	;  0
      000016 02 00                 8467 	.byte #0x02, #0x00	;  2
      000018 01 00                 8468 	.byte #0x01, #0x00	;  1
      00001A 00 00                 8469 	.byte #0x00,#0x00
      00001Cr7Cs06                 8470 	.byte _operator, (_operator >> 8)
      00001E 01 00                 8471 	.byte #0x01, #0x00	;  1
      000020 00 00                 8472 	.byte #0x00, #0x00	;  0
      000022 00 00                 8473 	.byte #0x00, #0x00	;  0
      000024 00 00                 8474 	.byte #0x00,#0x00
      000026 00 00                 8475 	.byte #0x00,#0x00
      000028 01 00                 8476 	.byte #0x01, #0x00	;  1
      00002A 02 00                 8477 	.byte #0x02, #0x00	;  2
      00002C 01 00                 8478 	.byte #0x01, #0x00	;  1
      00002E 00 00                 8479 	.byte #0x00,#0x00
      000030r7Cs06                 8480 	.byte _operator, (_operator >> 8)
      000032 01 00                 8481 	.byte #0x01, #0x00	;  1
      000034 01 00                 8482 	.byte #0x01, #0x00	;  1
      000036 02 00                 8483 	.byte #0x02, #0x00	;  2
      000038 00 00                 8484 	.byte #0x00,#0x00
      00003Ar00s00                 8485 	.byte _accumulate, (_accumulate >> 8)
      00003C 02 00                 8486 	.byte #0x02, #0x00	;  2
      00003E 00 00                 8487 	.byte #0x00, #0x00	;  0
      000040 00 00                 8488 	.byte #0x00, #0x00	;  0
      000042 00 00                 8489 	.byte #0x00,#0x00
      000044r17s24                 8490 	.byte _push_acc, (_push_acc >> 8)
      000046 02 00                 8491 	.byte #0x02, #0x00	;  2
      000048 07 00                 8492 	.byte #0x07, #0x00	;  7
      00004A 00 00                 8493 	.byte #0x00, #0x00	;  0
      00004C 00 00                 8494 	.byte #0x00,#0x00
      00004Er21s25                 8495 	.byte _reset_acc, (_reset_acc >> 8)
      000050 02 00                 8496 	.byte #0x02, #0x00	;  2
      000052 01 00                 8497 	.byte #0x01, #0x00	;  1
      000054 02 00                 8498 	.byte #0x02, #0x00	;  2
      000056 00 00                 8499 	.byte #0x00,#0x00
      000058r00s00                 8500 	.byte _accumulate, (_accumulate >> 8)
      00005A 02 00                 8501 	.byte #0x02, #0x00	;  2
      00005C 02 00                 8502 	.byte #0x02, #0x00	;  2
      00005E 01 00                 8503 	.byte #0x01, #0x00	;  1
      000060 00 00                 8504 	.byte #0x00,#0x00
      000062r17s24                 8505 	.byte _push_acc, (_push_acc >> 8)
      000064 FF 7F                 8506 	.byte #0xff, #0x7f	;  32767
      000066 06 00                 8507 	.byte #0x06, #0x00	;  6
      000068 FF 7F                 8508 	.byte #0xff, #0x7f	;  32767
      00006A 00 00                 8509 	.byte #0x00,#0x00
      00006Cr21s25                 8510 	.byte _reset_acc, (_reset_acc >> 8)
      00006E FF 7F                 8511 	.byte #0xff, #0x7f	;  32767
      000070 07 00                 8512 	.byte #0x07, #0x00	;  7
      000072 FF 7F                 8513 	.byte #0xff, #0x7f	;  32767
      000074 00 00                 8514 	.byte #0x00,#0x00
      000076 00 00                 8515 	.byte #0x00,#0x00
      000078 FF 7F                 8516 	.byte #0xff, #0x7f	;  32767
      00007A 05 00                 8517 	.byte #0x05, #0x00	;  5
      00007C FF 7F                 8518 	.byte #0xff, #0x7f	;  32767
      00007E 00 00                 8519 	.byte #0x00,#0x00
      000080r8Bs25                 8520 	.byte _reset_base, (_reset_base >> 8)
      000082 FF 7F                 8521 	.byte #0xff, #0x7f	;  32767
      000084 03 00                 8522 	.byte #0x03, #0x00	;  3
      000086 FF 7F                 8523 	.byte #0xff, #0x7f	;  32767
      000088 00 00                 8524 	.byte #0x00,#0x00
      00008Ar09s26                 8525 	.byte _status, (_status >> 8)
      00008C FF 7F                 8526 	.byte #0xff, #0x7f	;  32767
      00008E 04 00                 8527 	.byte #0x04, #0x00	;  4
      000090 FF 7F                 8528 	.byte #0xff, #0x7f	;  32767
      000092 00 00                 8529 	.byte #0x00,#0x00
      000094r97s2B                 8530 	.byte _help, (_help >> 8)
      000096 FF 7F                 8531 	.byte #0xff, #0x7f	;  32767
      000098 08 00                 8532 	.byte #0x08, #0x00	;  8
      00009A 03 00                 8533 	.byte #0x03, #0x00	;  3
      00009C 00 00                 8534 	.byte #0x00,#0x00
      00009Er71s01                 8535 	.byte _dump_pop, (_dump_pop >> 8)
      0000A0 00 80                 8536 	.byte #0x00, #0x80	; -32768
      0000A2 00 80                 8537 	.byte #0x00, #0x80	; -32768
      0000A4 00 80                 8538 	.byte #0x00, #0x80	; -32768
      0000A6 00 00                 8539 	.byte #0x00,#0x00
      0000A8 00 00                 8540 	.byte #0x00,#0x00
                                   8541 	.area CABS    (ABS,CODE)
