                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module calc
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _getchar_poll
                                     13 	.globl _state_exec
                                     14 	.globl _state_init
                                     15 	.globl _stack_iter_peek
                                     16 	.globl _stack_peek2
                                     17 	.globl _stack_peek
                                     18 	.globl _stack_pop
                                     19 	.globl _stack_push
                                     20 	.globl _stack_init
                                     21 	.globl _isxdigit
                                     22 	.globl _printf
                                     23 	.globl _strtol
                                     24 	.globl _CY
                                     25 	.globl _AC
                                     26 	.globl _F0
                                     27 	.globl _RS1
                                     28 	.globl _RS0
                                     29 	.globl _OV
                                     30 	.globl _FL
                                     31 	.globl _P
                                     32 	.globl _TF2
                                     33 	.globl _EXF2
                                     34 	.globl _RCLK
                                     35 	.globl _TCLK
                                     36 	.globl _EXEN2
                                     37 	.globl _TR2
                                     38 	.globl _C_T2
                                     39 	.globl _CP_RL2
                                     40 	.globl _T2CON_7
                                     41 	.globl _T2CON_6
                                     42 	.globl _T2CON_5
                                     43 	.globl _T2CON_4
                                     44 	.globl _T2CON_3
                                     45 	.globl _T2CON_2
                                     46 	.globl _T2CON_1
                                     47 	.globl _T2CON_0
                                     48 	.globl _PT2
                                     49 	.globl _PS
                                     50 	.globl _PT1
                                     51 	.globl _PX1
                                     52 	.globl _PT0
                                     53 	.globl _PX0
                                     54 	.globl _RD
                                     55 	.globl _WR
                                     56 	.globl _T1
                                     57 	.globl _T0
                                     58 	.globl _INT1
                                     59 	.globl _INT0
                                     60 	.globl _TXD
                                     61 	.globl _RXD
                                     62 	.globl _P3_7
                                     63 	.globl _P3_6
                                     64 	.globl _P3_5
                                     65 	.globl _P3_4
                                     66 	.globl _P3_3
                                     67 	.globl _P3_2
                                     68 	.globl _P3_1
                                     69 	.globl _P3_0
                                     70 	.globl _EA
                                     71 	.globl _ET2
                                     72 	.globl _ES
                                     73 	.globl _ET1
                                     74 	.globl _EX1
                                     75 	.globl _ET0
                                     76 	.globl _EX0
                                     77 	.globl _P2_7
                                     78 	.globl _P2_6
                                     79 	.globl _P2_5
                                     80 	.globl _P2_4
                                     81 	.globl _P2_3
                                     82 	.globl _P2_2
                                     83 	.globl _P2_1
                                     84 	.globl _P2_0
                                     85 	.globl _SM0
                                     86 	.globl _SM1
                                     87 	.globl _SM2
                                     88 	.globl _REN
                                     89 	.globl _TB8
                                     90 	.globl _RB8
                                     91 	.globl _TI
                                     92 	.globl _RI
                                     93 	.globl _T2EX
                                     94 	.globl _T2
                                     95 	.globl _P1_7
                                     96 	.globl _P1_6
                                     97 	.globl _P1_5
                                     98 	.globl _P1_4
                                     99 	.globl _P1_3
                                    100 	.globl _P1_2
                                    101 	.globl _P1_1
                                    102 	.globl _P1_0
                                    103 	.globl _TF1
                                    104 	.globl _TR1
                                    105 	.globl _TF0
                                    106 	.globl _TR0
                                    107 	.globl _IE1
                                    108 	.globl _IT1
                                    109 	.globl _IE0
                                    110 	.globl _IT0
                                    111 	.globl _P0_7
                                    112 	.globl _P0_6
                                    113 	.globl _P0_5
                                    114 	.globl _P0_4
                                    115 	.globl _P0_3
                                    116 	.globl _P0_2
                                    117 	.globl _P0_1
                                    118 	.globl _P0_0
                                    119 	.globl _B
                                    120 	.globl _A
                                    121 	.globl _ACC
                                    122 	.globl _PSW
                                    123 	.globl _TH2
                                    124 	.globl _TL2
                                    125 	.globl _RCAP2H
                                    126 	.globl _RCAP2L
                                    127 	.globl _T2MOD
                                    128 	.globl _T2CON
                                    129 	.globl _IP
                                    130 	.globl _P3
                                    131 	.globl _IE
                                    132 	.globl _P2
                                    133 	.globl _SBUF
                                    134 	.globl _SCON
                                    135 	.globl _P1
                                    136 	.globl _TH1
                                    137 	.globl _TH0
                                    138 	.globl _TL1
                                    139 	.globl _TL0
                                    140 	.globl _TMOD
                                    141 	.globl _TCON
                                    142 	.globl _PCON
                                    143 	.globl _DPH
                                    144 	.globl _DPL
                                    145 	.globl _SP
                                    146 	.globl _P0
                                    147 	.globl _giant
                                    148 	.globl _putchar
                                    149 	.globl _getchar
                                    150 ;--------------------------------------------------------
                                    151 ; special function registers
                                    152 ;--------------------------------------------------------
                                    153 	.area RSEG    (ABS,DATA)
      000000                        154 	.org 0x0000
                           000080   155 _P0	=	0x0080
                           000081   156 _SP	=	0x0081
                           000082   157 _DPL	=	0x0082
                           000083   158 _DPH	=	0x0083
                           000087   159 _PCON	=	0x0087
                           000088   160 _TCON	=	0x0088
                           000089   161 _TMOD	=	0x0089
                           00008A   162 _TL0	=	0x008a
                           00008B   163 _TL1	=	0x008b
                           00008C   164 _TH0	=	0x008c
                           00008D   165 _TH1	=	0x008d
                           000090   166 _P1	=	0x0090
                           000098   167 _SCON	=	0x0098
                           000099   168 _SBUF	=	0x0099
                           0000A0   169 _P2	=	0x00a0
                           0000A8   170 _IE	=	0x00a8
                           0000B0   171 _P3	=	0x00b0
                           0000B8   172 _IP	=	0x00b8
                           0000C8   173 _T2CON	=	0x00c8
                           0000C9   174 _T2MOD	=	0x00c9
                           0000CA   175 _RCAP2L	=	0x00ca
                           0000CB   176 _RCAP2H	=	0x00cb
                           0000CC   177 _TL2	=	0x00cc
                           0000CD   178 _TH2	=	0x00cd
                           0000D0   179 _PSW	=	0x00d0
                           0000E0   180 _ACC	=	0x00e0
                           0000E0   181 _A	=	0x00e0
                           0000F0   182 _B	=	0x00f0
                                    183 ;--------------------------------------------------------
                                    184 ; special function bits
                                    185 ;--------------------------------------------------------
                                    186 	.area RSEG    (ABS,DATA)
      000000                        187 	.org 0x0000
                           000080   188 _P0_0	=	0x0080
                           000081   189 _P0_1	=	0x0081
                           000082   190 _P0_2	=	0x0082
                           000083   191 _P0_3	=	0x0083
                           000084   192 _P0_4	=	0x0084
                           000085   193 _P0_5	=	0x0085
                           000086   194 _P0_6	=	0x0086
                           000087   195 _P0_7	=	0x0087
                           000088   196 _IT0	=	0x0088
                           000089   197 _IE0	=	0x0089
                           00008A   198 _IT1	=	0x008a
                           00008B   199 _IE1	=	0x008b
                           00008C   200 _TR0	=	0x008c
                           00008D   201 _TF0	=	0x008d
                           00008E   202 _TR1	=	0x008e
                           00008F   203 _TF1	=	0x008f
                           000090   204 _P1_0	=	0x0090
                           000091   205 _P1_1	=	0x0091
                           000092   206 _P1_2	=	0x0092
                           000093   207 _P1_3	=	0x0093
                           000094   208 _P1_4	=	0x0094
                           000095   209 _P1_5	=	0x0095
                           000096   210 _P1_6	=	0x0096
                           000097   211 _P1_7	=	0x0097
                           000090   212 _T2	=	0x0090
                           000091   213 _T2EX	=	0x0091
                           000098   214 _RI	=	0x0098
                           000099   215 _TI	=	0x0099
                           00009A   216 _RB8	=	0x009a
                           00009B   217 _TB8	=	0x009b
                           00009C   218 _REN	=	0x009c
                           00009D   219 _SM2	=	0x009d
                           00009E   220 _SM1	=	0x009e
                           00009F   221 _SM0	=	0x009f
                           0000A0   222 _P2_0	=	0x00a0
                           0000A1   223 _P2_1	=	0x00a1
                           0000A2   224 _P2_2	=	0x00a2
                           0000A3   225 _P2_3	=	0x00a3
                           0000A4   226 _P2_4	=	0x00a4
                           0000A5   227 _P2_5	=	0x00a5
                           0000A6   228 _P2_6	=	0x00a6
                           0000A7   229 _P2_7	=	0x00a7
                           0000A8   230 _EX0	=	0x00a8
                           0000A9   231 _ET0	=	0x00a9
                           0000AA   232 _EX1	=	0x00aa
                           0000AB   233 _ET1	=	0x00ab
                           0000AC   234 _ES	=	0x00ac
                           0000AD   235 _ET2	=	0x00ad
                           0000AF   236 _EA	=	0x00af
                           0000B0   237 _P3_0	=	0x00b0
                           0000B1   238 _P3_1	=	0x00b1
                           0000B2   239 _P3_2	=	0x00b2
                           0000B3   240 _P3_3	=	0x00b3
                           0000B4   241 _P3_4	=	0x00b4
                           0000B5   242 _P3_5	=	0x00b5
                           0000B6   243 _P3_6	=	0x00b6
                           0000B7   244 _P3_7	=	0x00b7
                           0000B0   245 _RXD	=	0x00b0
                           0000B1   246 _TXD	=	0x00b1
                           0000B2   247 _INT0	=	0x00b2
                           0000B3   248 _INT1	=	0x00b3
                           0000B4   249 _T0	=	0x00b4
                           0000B5   250 _T1	=	0x00b5
                           0000B6   251 _WR	=	0x00b6
                           0000B7   252 _RD	=	0x00b7
                           0000B8   253 _PX0	=	0x00b8
                           0000B9   254 _PT0	=	0x00b9
                           0000BA   255 _PX1	=	0x00ba
                           0000BB   256 _PT1	=	0x00bb
                           0000BC   257 _PS	=	0x00bc
                           0000BD   258 _PT2	=	0x00bd
                           0000C8   259 _T2CON_0	=	0x00c8
                           0000C9   260 _T2CON_1	=	0x00c9
                           0000CA   261 _T2CON_2	=	0x00ca
                           0000CB   262 _T2CON_3	=	0x00cb
                           0000CC   263 _T2CON_4	=	0x00cc
                           0000CD   264 _T2CON_5	=	0x00cd
                           0000CE   265 _T2CON_6	=	0x00ce
                           0000CF   266 _T2CON_7	=	0x00cf
                           0000C8   267 _CP_RL2	=	0x00c8
                           0000C9   268 _C_T2	=	0x00c9
                           0000CA   269 _TR2	=	0x00ca
                           0000CB   270 _EXEN2	=	0x00cb
                           0000CC   271 _TCLK	=	0x00cc
                           0000CD   272 _RCLK	=	0x00cd
                           0000CE   273 _EXF2	=	0x00ce
                           0000CF   274 _TF2	=	0x00cf
                           0000D0   275 _P	=	0x00d0
                           0000D1   276 _FL	=	0x00d1
                           0000D2   277 _OV	=	0x00d2
                           0000D3   278 _RS0	=	0x00d3
                           0000D4   279 _RS1	=	0x00d4
                           0000D5   280 _F0	=	0x00d5
                           0000D6   281 _AC	=	0x00d6
                           0000D7   282 _CY	=	0x00d7
                                    283 ;--------------------------------------------------------
                                    284 ; overlayable register banks
                                    285 ;--------------------------------------------------------
                                    286 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        287 	.ds 8
                                    288 ;--------------------------------------------------------
                                    289 ; internal ram data
                                    290 ;--------------------------------------------------------
                                    291 	.area DSEG    (DATA)
                                    292 ;--------------------------------------------------------
                                    293 ; overlayable items in internal ram 
                                    294 ;--------------------------------------------------------
                                    295 ;--------------------------------------------------------
                                    296 ; Stack segment in internal ram 
                                    297 ;--------------------------------------------------------
                                    298 	.area	SSEG
      000000                        299 __start__stack:
      000000                        300 	.ds	1
                                    301 
                                    302 ;--------------------------------------------------------
                                    303 ; indirectly addressable internal ram data
                                    304 ;--------------------------------------------------------
                                    305 	.area ISEG    (DATA)
      000000                        306 _giant::
      000000                        307 	.ds 1
                                    308 ;--------------------------------------------------------
                                    309 ; absolute internal ram data
                                    310 ;--------------------------------------------------------
                                    311 	.area IABS    (ABS,DATA)
                                    312 	.area IABS    (ABS,DATA)
                                    313 ;--------------------------------------------------------
                                    314 ; bit data
                                    315 ;--------------------------------------------------------
                                    316 	.area BSEG    (BIT)
                                    317 ;--------------------------------------------------------
                                    318 ; paged external ram data
                                    319 ;--------------------------------------------------------
                                    320 	.area PSEG    (PAG,XDATA)
                                    321 ;--------------------------------------------------------
                                    322 ; external ram data
                                    323 ;--------------------------------------------------------
                                    324 	.area XSEG    (XDATA)
      000000                        325 _s:
      000000                        326 	.ds 12
      00000C                        327 _c:
      00000C                        328 	.ds 16407
                                    329 ;--------------------------------------------------------
                                    330 ; absolute external ram data
                                    331 ;--------------------------------------------------------
                                    332 	.area XABS    (ABS,XDATA)
                                    333 ;--------------------------------------------------------
                                    334 ; external initialized ram data
                                    335 ;--------------------------------------------------------
                                    336 	.area XISEG   (XDATA)
      000000                        337 _deltas:
      000000                        338 	.ds 170
                                    339 	.area HOME    (CODE)
                                    340 	.area GSINIT0 (CODE)
                                    341 	.area GSINIT1 (CODE)
                                    342 	.area GSINIT2 (CODE)
                                    343 	.area GSINIT3 (CODE)
                                    344 	.area GSINIT4 (CODE)
                                    345 	.area GSINIT5 (CODE)
                                    346 	.area GSINIT  (CODE)
                                    347 	.area GSFINAL (CODE)
                                    348 	.area CSEG    (CODE)
                                    349 ;--------------------------------------------------------
                                    350 ; interrupt vector 
                                    351 ;--------------------------------------------------------
                                    352 	.area HOME    (CODE)
      000000                        353 __interrupt_vect:
      000000 02r00r00         [24]  354 	ljmp	__sdcc_gsinit_startup
                                    355 ;--------------------------------------------------------
                                    356 ; global & static initialisations
                                    357 ;--------------------------------------------------------
                                    358 	.area HOME    (CODE)
                                    359 	.area GSINIT  (CODE)
                                    360 	.area GSFINAL (CODE)
                                    361 	.area GSINIT  (CODE)
                                    362 	.globl __sdcc_gsinit_startup
                                    363 	.globl __sdcc_program_startup
                                    364 	.globl __start__stack
                                    365 	.globl __mcs51_genXINIT
                                    366 	.globl __mcs51_genXRAMCLEAR
                                    367 	.globl __mcs51_genRAMCLEAR
                                    368 	.area GSFINAL (CODE)
      000000 02r00r03         [24]  369 	ljmp	__sdcc_program_startup
                                    370 ;--------------------------------------------------------
                                    371 ; Home
                                    372 ;--------------------------------------------------------
                                    373 	.area HOME    (CODE)
                                    374 	.area HOME    (CODE)
      000003                        375 __sdcc_program_startup:
      000003 02r3Ar31         [24]  376 	ljmp	_main
                                    377 ;	return from main will return to caller
                                    378 ;--------------------------------------------------------
                                    379 ; code
                                    380 ;--------------------------------------------------------
                                    381 	.area CSEG    (CODE)
                                    382 ;------------------------------------------------------------
                                    383 ;Allocation info for local variables in function 'putchar'
                                    384 ;------------------------------------------------------------
                                    385 ;c                         Allocated to registers 
                                    386 ;------------------------------------------------------------
                                    387 ;	calc.c:16: int putchar(int c) __naked {
                                    388 ;	-----------------------------------------
                                    389 ;	 function putchar
                                    390 ;	-----------------------------------------
      000000                        391 _putchar:
                                    392 ;	naked function: no prologue.
                                    393 ;	calc.c:21: __endasm;
      000000 E5 82            [12]  394 	mov	a, dpl
      000002 02 00 3C         [24]  395 	ljmp	0x003c
                                    396 ;	calc.c:22: }
                                    397 ;	naked function: no epilogue.
                                    398 ;------------------------------------------------------------
                                    399 ;Allocation info for local variables in function 'getchar'
                                    400 ;------------------------------------------------------------
                                    401 ;	calc.c:24: int getchar(void) __naked {
                                    402 ;	-----------------------------------------
                                    403 ;	 function getchar
                                    404 ;	-----------------------------------------
      000005                        405 _getchar:
                                    406 ;	naked function: no prologue.
                                    407 ;	calc.c:30: __endasm;
      000005 12 00 36         [24]  408 	lcall	0x0036
      000008 F5 82            [12]  409 	mov	dpl, a
      00000A 75 83 00         [24]  410 	mov	dph, #0
      00000D 22               [24]  411 	ret
                                    412 ;	calc.c:31: }
                                    413 ;	naked function: no epilogue.
                                    414 ;------------------------------------------------------------
                                    415 ;Allocation info for local variables in function 'getchar_poll'
                                    416 ;------------------------------------------------------------
                                    417 ;	calc.c:33: int getchar_poll(void) __naked {
                                    418 ;	-----------------------------------------
                                    419 ;	 function getchar_poll
                                    420 ;	-----------------------------------------
      00000E                        421 _getchar_poll:
                                    422 ;	naked function: no prologue.
                                    423 ;	calc.c:45: __endasm;
      00000E 74 FF            [12]  424 	mov	a, #0xff
      000010 F5 F0            [12]  425 	mov	b, a
      000012 30 98 07         [24]  426 	jnb	ri, nochar
      000015 C2 98            [12]  427 	clr	ri
      000017 E5 99            [12]  428 	mov	a, sbuf
      000019 75 F0 00         [24]  429 	mov	b, #0
      00001C                        430 	nochar:
      00001C F5 82            [12]  431 	mov	dpl, a
      00001E 85 F0 83         [24]  432 	mov	dph, b
      000021 22               [24]  433 	ret
                                    434 ;	calc.c:46: }
                                    435 ;	naked function: no epilogue.
                                    436 ;------------------------------------------------------------
                                    437 ;Allocation info for local variables in function 'accumulate'
                                    438 ;------------------------------------------------------------
                                    439 ;delta                     Allocated to stack - _bp -5
                                    440 ;_ctx                      Allocated to registers r5 r6 r7 
                                    441 ;ctx                       Allocated to stack - _bp +8
                                    442 ;d                         Allocated to stack - _bp +11
                                    443 ;sloc0                     Allocated to stack - _bp +1
                                    444 ;sloc1                     Allocated to stack - _bp +4
                                    445 ;------------------------------------------------------------
                                    446 ;	calc.c:72: static int accumulate(void *_ctx, delta_t *delta) __reentrant {
                                    447 ;	-----------------------------------------
                                    448 ;	 function accumulate
                                    449 ;	-----------------------------------------
      000022                        450 _accumulate:
                           000007   451 	ar7 = 0x07
                           000006   452 	ar6 = 0x06
                           000005   453 	ar5 = 0x05
                           000004   454 	ar4 = 0x04
                           000003   455 	ar3 = 0x03
                           000002   456 	ar2 = 0x02
                           000001   457 	ar1 = 0x01
                           000000   458 	ar0 = 0x00
      000022 C0*00            [24]  459 	push	_bp
      000024 E5 81            [12]  460 	mov	a,sp
      000026 F5*00            [12]  461 	mov	_bp,a
      000028 24 0E            [12]  462 	add	a,#0x0e
      00002A F5 81            [12]  463 	mov	sp,a
      00002C AD 82            [24]  464 	mov	r5,dpl
      00002E AE 83            [24]  465 	mov	r6,dph
      000030 AF F0            [24]  466 	mov	r7,b
                                    467 ;	calc.c:73: calc_ctx_t *ctx = (calc_ctx_t *)_ctx;
      000032 E5*00            [12]  468 	mov	a,_bp
      000034 24 08            [12]  469 	add	a,#0x08
      000036 F8               [12]  470 	mov	r0,a
      000037 A6 05            [24]  471 	mov	@r0,ar5
      000039 08               [12]  472 	inc	r0
      00003A A6 06            [24]  473 	mov	@r0,ar6
      00003C 08               [12]  474 	inc	r0
      00003D A6 07            [24]  475 	mov	@r0,ar7
                                    476 ;	calc.c:78: if (!ctx->acc_valid) {
      00003F E5*00            [12]  477 	mov	a,_bp
      000041 24 08            [12]  478 	add	a,#0x08
      000043 F8               [12]  479 	mov	r0,a
      000044 74 06            [12]  480 	mov	a,#0x06
      000046 26               [12]  481 	add	a,@r0
      000047 FA               [12]  482 	mov	r2,a
      000048 E4               [12]  483 	clr	a
      000049 08               [12]  484 	inc	r0
      00004A 36               [12]  485 	addc	a,@r0
      00004B FB               [12]  486 	mov	r3,a
      00004C 08               [12]  487 	inc	r0
      00004D 86 04            [24]  488 	mov	ar4,@r0
      00004F 8A 82            [24]  489 	mov	dpl,r2
      000051 8B 83            [24]  490 	mov	dph,r3
      000053 8C F0            [24]  491 	mov	b,r4
      000055 12r00r00         [24]  492 	lcall	__gptrget
      000058 70 31            [24]  493 	jnz	00102$
                                    494 ;	calc.c:79: ctx->acc_valid = 1;
      00005A 8A 82            [24]  495 	mov	dpl,r2
      00005C 8B 83            [24]  496 	mov	dph,r3
      00005E 8C F0            [24]  497 	mov	b,r4
      000060 74 01            [12]  498 	mov	a,#0x01
      000062 12r00r00         [24]  499 	lcall	__gptrput
                                    500 ;	calc.c:80: ctx->acc = 0l;
      000065 E5*00            [12]  501 	mov	a,_bp
      000067 24 08            [12]  502 	add	a,#0x08
      000069 F8               [12]  503 	mov	r0,a
      00006A 74 02            [12]  504 	mov	a,#0x02
      00006C 26               [12]  505 	add	a,@r0
      00006D FA               [12]  506 	mov	r2,a
      00006E E4               [12]  507 	clr	a
      00006F 08               [12]  508 	inc	r0
      000070 36               [12]  509 	addc	a,@r0
      000071 FB               [12]  510 	mov	r3,a
      000072 08               [12]  511 	inc	r0
      000073 86 04            [24]  512 	mov	ar4,@r0
      000075 8A 82            [24]  513 	mov	dpl,r2
      000077 8B 83            [24]  514 	mov	dph,r3
      000079 8C F0            [24]  515 	mov	b,r4
      00007B E4               [12]  516 	clr	a
      00007C 12r00r00         [24]  517 	lcall	__gptrput
      00007F A3               [24]  518 	inc	dptr
      000080 12r00r00         [24]  519 	lcall	__gptrput
      000083 A3               [24]  520 	inc	dptr
      000084 12r00r00         [24]  521 	lcall	__gptrput
      000087 A3               [24]  522 	inc	dptr
      000088 12r00r00         [24]  523 	lcall	__gptrput
      00008B                        524 00102$:
                                    525 ;	calc.c:83: d = strtol(ctx->digit, NULL, ctx->base);
      00008B E5*00            [12]  526 	mov	a,_bp
      00008D 24 08            [12]  527 	add	a,#0x08
      00008F F8               [12]  528 	mov	r0,a
      000090 86 82            [24]  529 	mov	dpl,@r0
      000092 08               [12]  530 	inc	r0
      000093 86 83            [24]  531 	mov	dph,@r0
      000095 08               [12]  532 	inc	r0
      000096 86 F0            [24]  533 	mov	b,@r0
      000098 12r00r00         [24]  534 	lcall	__gptrget
      00009B FB               [12]  535 	mov	r3,a
      00009C A3               [24]  536 	inc	dptr
      00009D 12r00r00         [24]  537 	lcall	__gptrget
      0000A0 FC               [12]  538 	mov	r4,a
      0000A1 E5*00            [12]  539 	mov	a,_bp
      0000A3 24 08            [12]  540 	add	a,#0x08
      0000A5 F8               [12]  541 	mov	r0,a
      0000A6 74 07            [12]  542 	mov	a,#0x07
      0000A8 26               [12]  543 	add	a,@r0
      0000A9 FA               [12]  544 	mov	r2,a
      0000AA E4               [12]  545 	clr	a
      0000AB 08               [12]  546 	inc	r0
      0000AC 36               [12]  547 	addc	a,@r0
      0000AD FE               [12]  548 	mov	r6,a
      0000AE 08               [12]  549 	inc	r0
      0000AF 86 07            [24]  550 	mov	ar7,@r0
      0000B1 C0 03            [24]  551 	push	ar3
      0000B3 C0 04            [24]  552 	push	ar4
      0000B5 E4               [12]  553 	clr	a
      0000B6 C0 E0            [24]  554 	push	acc
      0000B8 C0 E0            [24]  555 	push	acc
      0000BA C0 E0            [24]  556 	push	acc
      0000BC 8A 82            [24]  557 	mov	dpl,r2
      0000BE 8E 83            [24]  558 	mov	dph,r6
      0000C0 8F F0            [24]  559 	mov	b,r7
      0000C2 12r00r00         [24]  560 	lcall	_strtol
      0000C5 C8               [12]  561 	xch	a,r0
      0000C6 E5*00            [12]  562 	mov	a,_bp
      0000C8 24 0B            [12]  563 	add	a,#0x0b
      0000CA C8               [12]  564 	xch	a,r0
      0000CB A6 82            [24]  565 	mov	@r0,dpl
      0000CD 08               [12]  566 	inc	r0
      0000CE A6 83            [24]  567 	mov	@r0,dph
      0000D0 08               [12]  568 	inc	r0
      0000D1 A6 F0            [24]  569 	mov	@r0,b
      0000D3 08               [12]  570 	inc	r0
      0000D4 F6               [12]  571 	mov	@r0,a
      0000D5 E5 81            [12]  572 	mov	a,sp
      0000D7 24 FB            [12]  573 	add	a,#0xfb
      0000D9 F5 81            [12]  574 	mov	sp,a
                                    575 ;	calc.c:84: ctx->acc = ctx->acc * (long)ctx->base + d;
      0000DB E5*00            [12]  576 	mov	a,_bp
      0000DD 24 08            [12]  577 	add	a,#0x08
      0000DF F8               [12]  578 	mov	r0,a
      0000E0 A9*00            [24]  579 	mov	r1,_bp
      0000E2 09               [12]  580 	inc	r1
      0000E3 74 02            [12]  581 	mov	a,#0x02
      0000E5 26               [12]  582 	add	a,@r0
      0000E6 F7               [12]  583 	mov	@r1,a
      0000E7 E4               [12]  584 	clr	a
      0000E8 08               [12]  585 	inc	r0
      0000E9 36               [12]  586 	addc	a,@r0
      0000EA 09               [12]  587 	inc	r1
      0000EB F7               [12]  588 	mov	@r1,a
      0000EC 08               [12]  589 	inc	r0
      0000ED 09               [12]  590 	inc	r1
      0000EE E6               [12]  591 	mov	a,@r0
      0000EF F7               [12]  592 	mov	@r1,a
      0000F0 A8*00            [24]  593 	mov	r0,_bp
      0000F2 08               [12]  594 	inc	r0
      0000F3 86 82            [24]  595 	mov	dpl,@r0
      0000F5 08               [12]  596 	inc	r0
      0000F6 86 83            [24]  597 	mov	dph,@r0
      0000F8 08               [12]  598 	inc	r0
      0000F9 86 F0            [24]  599 	mov	b,@r0
      0000FB E5*00            [12]  600 	mov	a,_bp
      0000FD 24 04            [12]  601 	add	a,#0x04
      0000FF F9               [12]  602 	mov	r1,a
      000100 12r00r00         [24]  603 	lcall	__gptrget
      000103 F7               [12]  604 	mov	@r1,a
      000104 A3               [24]  605 	inc	dptr
      000105 12r00r00         [24]  606 	lcall	__gptrget
      000108 09               [12]  607 	inc	r1
      000109 F7               [12]  608 	mov	@r1,a
      00010A A3               [24]  609 	inc	dptr
      00010B 12r00r00         [24]  610 	lcall	__gptrget
      00010E 09               [12]  611 	inc	r1
      00010F F7               [12]  612 	mov	@r1,a
      000110 A3               [24]  613 	inc	dptr
      000111 12r00r00         [24]  614 	lcall	__gptrget
      000114 09               [12]  615 	inc	r1
      000115 F7               [12]  616 	mov	@r1,a
      000116 E5*00            [12]  617 	mov	a,_bp
      000118 24 08            [12]  618 	add	a,#0x08
      00011A F8               [12]  619 	mov	r0,a
      00011B 86 82            [24]  620 	mov	dpl,@r0
      00011D 08               [12]  621 	inc	r0
      00011E 86 83            [24]  622 	mov	dph,@r0
      000120 08               [12]  623 	inc	r0
      000121 86 F0            [24]  624 	mov	b,@r0
      000123 12r00r00         [24]  625 	lcall	__gptrget
      000126 FA               [12]  626 	mov	r2,a
      000127 A3               [24]  627 	inc	dptr
      000128 12r00r00         [24]  628 	lcall	__gptrget
      00012B FB               [12]  629 	mov	r3,a
      00012C 33               [12]  630 	rlc	a
      00012D 95 E0            [12]  631 	subb	a,acc
      00012F FE               [12]  632 	mov	r6,a
      000130 FF               [12]  633 	mov	r7,a
      000131 C0 02            [24]  634 	push	ar2
      000133 C0 03            [24]  635 	push	ar3
      000135 C0 06            [24]  636 	push	ar6
      000137 C0 07            [24]  637 	push	ar7
      000139 E5*00            [12]  638 	mov	a,_bp
      00013B 24 04            [12]  639 	add	a,#0x04
      00013D F8               [12]  640 	mov	r0,a
      00013E 86 82            [24]  641 	mov	dpl,@r0
      000140 08               [12]  642 	inc	r0
      000141 86 83            [24]  643 	mov	dph,@r0
      000143 08               [12]  644 	inc	r0
      000144 86 F0            [24]  645 	mov	b,@r0
      000146 08               [12]  646 	inc	r0
      000147 E6               [12]  647 	mov	a,@r0
      000148 12r00r00         [24]  648 	lcall	__mullong
      00014B AC 82            [24]  649 	mov	r4,dpl
      00014D AD 83            [24]  650 	mov	r5,dph
      00014F AE F0            [24]  651 	mov	r6,b
      000151 FF               [12]  652 	mov	r7,a
      000152 E5 81            [12]  653 	mov	a,sp
      000154 24 FC            [12]  654 	add	a,#0xfc
      000156 F5 81            [12]  655 	mov	sp,a
      000158 E5*00            [12]  656 	mov	a,_bp
      00015A 24 0B            [12]  657 	add	a,#0x0b
      00015C F8               [12]  658 	mov	r0,a
      00015D E6               [12]  659 	mov	a,@r0
      00015E 2C               [12]  660 	add	a,r4
      00015F FC               [12]  661 	mov	r4,a
      000160 08               [12]  662 	inc	r0
      000161 E6               [12]  663 	mov	a,@r0
      000162 3D               [12]  664 	addc	a,r5
      000163 FD               [12]  665 	mov	r5,a
      000164 08               [12]  666 	inc	r0
      000165 E6               [12]  667 	mov	a,@r0
      000166 3E               [12]  668 	addc	a,r6
      000167 FE               [12]  669 	mov	r6,a
      000168 08               [12]  670 	inc	r0
      000169 E6               [12]  671 	mov	a,@r0
      00016A 3F               [12]  672 	addc	a,r7
      00016B FF               [12]  673 	mov	r7,a
      00016C A8*00            [24]  674 	mov	r0,_bp
      00016E 08               [12]  675 	inc	r0
      00016F 86 82            [24]  676 	mov	dpl,@r0
      000171 08               [12]  677 	inc	r0
      000172 86 83            [24]  678 	mov	dph,@r0
      000174 08               [12]  679 	inc	r0
      000175 86 F0            [24]  680 	mov	b,@r0
      000177 EC               [12]  681 	mov	a,r4
      000178 12r00r00         [24]  682 	lcall	__gptrput
      00017B A3               [24]  683 	inc	dptr
      00017C ED               [12]  684 	mov	a,r5
      00017D 12r00r00         [24]  685 	lcall	__gptrput
      000180 A3               [24]  686 	inc	dptr
      000181 EE               [12]  687 	mov	a,r6
      000182 12r00r00         [24]  688 	lcall	__gptrput
      000185 A3               [24]  689 	inc	dptr
      000186 EF               [12]  690 	mov	a,r7
      000187 12r00r00         [24]  691 	lcall	__gptrput
                                    692 ;	calc.c:86: return 1;
      00018A 90 00 01         [24]  693 	mov	dptr,#0x0001
                                    694 ;	calc.c:87: }
      00018D 85*00 81         [24]  695 	mov	sp,_bp
      000190 D0*00            [24]  696 	pop	_bp
      000192 22               [24]  697 	ret
                                    698 ;------------------------------------------------------------
                                    699 ;Allocation info for local variables in function 'dump_pop'
                                    700 ;------------------------------------------------------------
                                    701 ;delta                     Allocated to stack - _bp -5
                                    702 ;_ctx                      Allocated to registers r5 r6 r7 
                                    703 ;ctx                       Allocated to stack - _bp +11
                                    704 ;d                         Allocated to stack - _bp +14
                                    705 ;r                         Allocated to registers r5 r6 
                                    706 ;__1310720003              Allocated to registers 
                                    707 ;s                         Allocated to registers r5 r6 r7 
                                    708 ;__1966080005              Allocated to registers 
                                    709 ;s                         Allocated to registers r4 r5 r6 
                                    710 ;__1966080007              Allocated to registers 
                                    711 ;s                         Allocated to registers r3 r4 r5 
                                    712 ;__1966080009              Allocated to stack - _bp +18
                                    713 ;d                         Allocated to registers r3 r4 r5 r6 
                                    714 ;__1310720001              Allocated to registers 
                                    715 ;d                         Allocated to stack - _bp +22
                                    716 ;mask                      Allocated to stack - _bp +26
                                    717 ;__1966080011              Allocated to registers 
                                    718 ;s                         Allocated to registers r3 r4 r5 
                                    719 ;__1966080013              Allocated to registers 
                                    720 ;s                         Allocated to registers r4 r5 r6 
                                    721 ;__3276800015              Allocated to registers 
                                    722 ;s                         Allocated to registers r5 r3 r2 
                                    723 ;__3276800017              Allocated to stack - _bp +18
                                    724 ;d                         Allocated to registers r2 r3 r4 r7 
                                    725 ;__1310720001              Allocated to registers 
                                    726 ;d                         Allocated to stack - _bp +22
                                    727 ;mask                      Allocated to stack - _bp +26
                                    728 ;__3276800019              Allocated to registers 
                                    729 ;s                         Allocated to registers r5 r3 r2 
                                    730 ;sloc0                     Allocated to stack - _bp +1
                                    731 ;sloc1                     Allocated to stack - _bp +2
                                    732 ;sloc2                     Allocated to stack - _bp +5
                                    733 ;sloc3                     Allocated to stack - _bp +8
                                    734 ;------------------------------------------------------------
                                    735 ;	calc.c:89: static int dump_pop(void *_ctx, delta_t *delta) __reentrant {
                                    736 ;	-----------------------------------------
                                    737 ;	 function dump_pop
                                    738 ;	-----------------------------------------
      000193                        739 _dump_pop:
      000193 C0*00            [24]  740 	push	_bp
      000195 E5 81            [12]  741 	mov	a,sp
      000197 F5*00            [12]  742 	mov	_bp,a
      000199 24 1D            [12]  743 	add	a,#0x1d
      00019B F5 81            [12]  744 	mov	sp,a
      00019D AD 82            [24]  745 	mov	r5,dpl
      00019F AE 83            [24]  746 	mov	r6,dph
      0001A1 AF F0            [24]  747 	mov	r7,b
                                    748 ;	calc.c:90: calc_ctx_t *ctx = (calc_ctx_t *)_ctx;
      0001A3 E5*00            [12]  749 	mov	a,_bp
      0001A5 24 0B            [12]  750 	add	a,#0x0b
      0001A7 F8               [12]  751 	mov	r0,a
      0001A8 A6 05            [24]  752 	mov	@r0,ar5
      0001AA 08               [12]  753 	inc	r0
      0001AB A6 06            [24]  754 	mov	@r0,ar6
      0001AD 08               [12]  755 	inc	r0
      0001AE A6 07            [24]  756 	mov	@r0,ar7
                                    757 ;	calc.c:94: if (delta->event == EVENT_TERM) printstr("\r\n");
      0001B0 E5*00            [12]  758 	mov	a,_bp
      0001B2 24 FB            [12]  759 	add	a,#0xfb
      0001B4 F8               [12]  760 	mov	r0,a
      0001B5 86 02            [24]  761 	mov	ar2,@r0
      0001B7 08               [12]  762 	inc	r0
      0001B8 86 03            [24]  763 	mov	ar3,@r0
      0001BA 08               [12]  764 	inc	r0
      0001BB 86 04            [24]  765 	mov	ar4,@r0
      0001BD E5*00            [12]  766 	mov	a,_bp
      0001BF 24 08            [12]  767 	add	a,#0x08
      0001C1 F8               [12]  768 	mov	r0,a
      0001C2 74 02            [12]  769 	mov	a,#0x02
      0001C4 2A               [12]  770 	add	a,r2
      0001C5 F6               [12]  771 	mov	@r0,a
      0001C6 E4               [12]  772 	clr	a
      0001C7 3B               [12]  773 	addc	a,r3
      0001C8 08               [12]  774 	inc	r0
      0001C9 F6               [12]  775 	mov	@r0,a
      0001CA 08               [12]  776 	inc	r0
      0001CB A6 04            [24]  777 	mov	@r0,ar4
      0001CD E5*00            [12]  778 	mov	a,_bp
      0001CF 24 08            [12]  779 	add	a,#0x08
      0001D1 F8               [12]  780 	mov	r0,a
      0001D2 86 82            [24]  781 	mov	dpl,@r0
      0001D4 08               [12]  782 	inc	r0
      0001D5 86 83            [24]  783 	mov	dph,@r0
      0001D7 08               [12]  784 	inc	r0
      0001D8 86 F0            [24]  785 	mov	b,@r0
      0001DA 12r00r00         [24]  786 	lcall	__gptrget
      0001DD FE               [12]  787 	mov	r6,a
      0001DE A3               [24]  788 	inc	dptr
      0001DF 12r00r00         [24]  789 	lcall	__gptrget
      0001E2 FF               [12]  790 	mov	r7,a
      0001E3 BE 08 27         [24]  791 	cjne	r6,#0x08,00102$
      0001E6 BF 00 24         [24]  792 	cjne	r7,#0x00,00102$
      0001E9 7Dr17            [12]  793 	mov	r5,#___str_3
      0001EB 7Es00            [12]  794 	mov	r6,#(___str_3 >> 8)
      0001ED 7F 80            [12]  795 	mov	r7,#0x80
                                    796 ;	calc.c:51: return;
      0001EF                        797 00135$:
                                    798 ;	calc.c:49: for (; *s; s++) putchar(*s);
      0001EF 8D 82            [24]  799 	mov	dpl,r5
      0001F1 8E 83            [24]  800 	mov	dph,r6
      0001F3 8F F0            [24]  801 	mov	b,r7
      0001F5 12r00r00         [24]  802 	lcall	__gptrget
      0001F8 FC               [12]  803 	mov	r4,a
      0001F9 60 12            [24]  804 	jz	00102$
      0001FB 8C 03            [24]  805 	mov	ar3,r4
      0001FD 7C 00            [12]  806 	mov	r4,#0x00
      0001FF 8B 82            [24]  807 	mov	dpl,r3
      000201 8C 83            [24]  808 	mov	dph,r4
      000203 12r00r00         [24]  809 	lcall	_putchar
      000206 0D               [12]  810 	inc	r5
                                    811 ;	calc.c:94: if (delta->event == EVENT_TERM) printstr("\r\n");
      000207 BD 00 E5         [24]  812 	cjne	r5,#0x00,00135$
      00020A 0E               [12]  813 	inc	r6
      00020B 80 E2            [24]  814 	sjmp	00135$
      00020D                        815 00102$:
                                    816 ;	calc.c:95: r = stack_pop(ctx->ps, &d);
      00020D E5*00            [12]  817 	mov	a,_bp
      00020F 24 0E            [12]  818 	add	a,#0x0e
      000211 FF               [12]  819 	mov	r7,a
      000212 E5*00            [12]  820 	mov	a,_bp
      000214 24 05            [12]  821 	add	a,#0x05
      000216 F8               [12]  822 	mov	r0,a
      000217 A6 07            [24]  823 	mov	@r0,ar7
      000219 08               [12]  824 	inc	r0
      00021A 76 00            [12]  825 	mov	@r0,#0x00
      00021C 08               [12]  826 	inc	r0
      00021D 76 40            [12]  827 	mov	@r0,#0x40
      00021F E5*00            [12]  828 	mov	a,_bp
      000221 24 0B            [12]  829 	add	a,#0x0b
      000223 F8               [12]  830 	mov	r0,a
      000224 A9*00            [24]  831 	mov	r1,_bp
      000226 09               [12]  832 	inc	r1
      000227 09               [12]  833 	inc	r1
      000228 74 11            [12]  834 	mov	a,#0x11
      00022A 26               [12]  835 	add	a,@r0
      00022B F7               [12]  836 	mov	@r1,a
      00022C 74 40            [12]  837 	mov	a,#0x40
      00022E 08               [12]  838 	inc	r0
      00022F 36               [12]  839 	addc	a,@r0
      000230 09               [12]  840 	inc	r1
      000231 F7               [12]  841 	mov	@r1,a
      000232 08               [12]  842 	inc	r0
      000233 09               [12]  843 	inc	r1
      000234 E6               [12]  844 	mov	a,@r0
      000235 F7               [12]  845 	mov	@r1,a
      000236 A8*00            [24]  846 	mov	r0,_bp
      000238 08               [12]  847 	inc	r0
      000239 08               [12]  848 	inc	r0
      00023A 86 82            [24]  849 	mov	dpl,@r0
      00023C 08               [12]  850 	inc	r0
      00023D 86 83            [24]  851 	mov	dph,@r0
      00023F 08               [12]  852 	inc	r0
      000240 86 F0            [24]  853 	mov	b,@r0
      000242 12r00r00         [24]  854 	lcall	__gptrget
      000245 FA               [12]  855 	mov	r2,a
      000246 A3               [24]  856 	inc	dptr
      000247 12r00r00         [24]  857 	lcall	__gptrget
      00024A FB               [12]  858 	mov	r3,a
      00024B A3               [24]  859 	inc	dptr
      00024C 12r00r00         [24]  860 	lcall	__gptrget
      00024F FE               [12]  861 	mov	r6,a
      000250 C0 07            [24]  862 	push	ar7
      000252 E5*00            [12]  863 	mov	a,_bp
      000254 24 05            [12]  864 	add	a,#0x05
      000256 F8               [12]  865 	mov	r0,a
      000257 E6               [12]  866 	mov	a,@r0
      000258 C0 E0            [24]  867 	push	acc
      00025A 08               [12]  868 	inc	r0
      00025B E6               [12]  869 	mov	a,@r0
      00025C C0 E0            [24]  870 	push	acc
      00025E 08               [12]  871 	inc	r0
      00025F E6               [12]  872 	mov	a,@r0
      000260 C0 E0            [24]  873 	push	acc
      000262 8A 82            [24]  874 	mov	dpl,r2
      000264 8B 83            [24]  875 	mov	dph,r3
      000266 8E F0            [24]  876 	mov	b,r6
      000268 12r00r00         [24]  877 	lcall	_stack_pop
      00026B AE 82            [24]  878 	mov	r6,dpl
      00026D AD 83            [24]  879 	mov	r5,dph
      00026F 15 81            [12]  880 	dec	sp
      000271 15 81            [12]  881 	dec	sp
      000273 15 81            [12]  882 	dec	sp
      000275 D0 07            [24]  883 	pop	ar7
                                    884 ;	calc.c:96: if (!r) {
      000277 EE               [12]  885 	mov	a,r6
      000278 4D               [12]  886 	orl	a,r5
      000279 70 44            [24]  887 	jnz	00183$
                                    888 ;	calc.c:97: if (delta->event != EVENT_TERM) printstr("stack underflow\r\n");
      00027B E5*00            [12]  889 	mov	a,_bp
      00027D 24 08            [12]  890 	add	a,#0x08
      00027F F8               [12]  891 	mov	r0,a
      000280 86 82            [24]  892 	mov	dpl,@r0
      000282 08               [12]  893 	inc	r0
      000283 86 83            [24]  894 	mov	dph,@r0
      000285 08               [12]  895 	inc	r0
      000286 86 F0            [24]  896 	mov	b,@r0
      000288 12r00r00         [24]  897 	lcall	__gptrget
      00028B FD               [12]  898 	mov	r5,a
      00028C A3               [24]  899 	inc	dptr
      00028D 12r00r00         [24]  900 	lcall	__gptrget
      000290 FE               [12]  901 	mov	r6,a
      000291 BD 08 06         [24]  902 	cjne	r5,#0x08,00320$
      000294 BE 00 03         [24]  903 	cjne	r6,#0x00,00320$
      000297 02r04r9E         [24]  904 	ljmp	00110$
      00029A                        905 00320$:
      00029A 7Cr1A            [12]  906 	mov	r4,#___str_4
      00029C 7Ds00            [12]  907 	mov	r5,#(___str_4 >> 8)
      00029E 7E 80            [12]  908 	mov	r6,#0x80
                                    909 ;	calc.c:51: return;
      0002A0                        910 00138$:
                                    911 ;	calc.c:49: for (; *s; s++) putchar(*s);
      0002A0 8C 82            [24]  912 	mov	dpl,r4
      0002A2 8D 83            [24]  913 	mov	dph,r5
      0002A4 8E F0            [24]  914 	mov	b,r6
      0002A6 12r00r00         [24]  915 	lcall	__gptrget
      0002A9 FB               [12]  916 	mov	r3,a
      0002AA 70 03            [24]  917 	jnz	00321$
      0002AC 02r04r9E         [24]  918 	ljmp	00110$
      0002AF                        919 00321$:
      0002AF 7A 00            [12]  920 	mov	r2,#0x00
      0002B1 8B 82            [24]  921 	mov	dpl,r3
      0002B3 8A 83            [24]  922 	mov	dph,r2
      0002B5 12r00r00         [24]  923 	lcall	_putchar
      0002B8 0C               [12]  924 	inc	r4
                                    925 ;	calc.c:98: } else while (r > 0) {
      0002B9 BC 00 E4         [24]  926 	cjne	r4,#0x00,00138$
      0002BC 0D               [12]  927 	inc	r5
      0002BD 80 E1            [24]  928 	sjmp	00138$
      0002BF                        929 00183$:
      0002BF A8*00            [24]  930 	mov	r0,_bp
      0002C1 08               [12]  931 	inc	r0
      0002C2 A6 07            [24]  932 	mov	@r0,ar7
      0002C4                        933 00105$:
      0002C4 C3               [12]  934 	clr	c
      0002C5 E4               [12]  935 	clr	a
      0002C6 9E               [12]  936 	subb	a,r6
      0002C7 74 80            [12]  937 	mov	a,#(0x00 ^ 0x80)
      0002C9 8D F0            [24]  938 	mov	b,r5
      0002CB 63 F0 80         [24]  939 	xrl	b,#0x80
      0002CE 95 F0            [12]  940 	subb	a,b
      0002D0 40 03            [24]  941 	jc	00323$
      0002D2 02r04r9E         [24]  942 	ljmp	00110$
      0002D5                        943 00323$:
                                    944 ;	calc.c:99: printstr("PSPA\t");
      0002D5 7Br2C            [12]  945 	mov	r3,#___str_5
      0002D7 7Cs00            [12]  946 	mov	r4,#(___str_5 >> 8)
      0002D9 7D 80            [12]  947 	mov	r5,#0x80
                                    948 ;	calc.c:51: return;
      0002DB                        949 00141$:
                                    950 ;	calc.c:49: for (; *s; s++) putchar(*s);
      0002DB 8B 82            [24]  951 	mov	dpl,r3
      0002DD 8C 83            [24]  952 	mov	dph,r4
      0002DF 8D F0            [24]  953 	mov	b,r5
      0002E1 12r00r00         [24]  954 	lcall	__gptrget
      0002E4 FA               [12]  955 	mov	r2,a
      0002E5 60 10            [24]  956 	jz	00119$
      0002E7 7E 00            [12]  957 	mov	r6,#0x00
      0002E9 8A 82            [24]  958 	mov	dpl,r2
      0002EB 8E 83            [24]  959 	mov	dph,r6
      0002ED 12r00r00         [24]  960 	lcall	_putchar
      0002F0 0B               [12]  961 	inc	r3
                                    962 ;	calc.c:99: printstr("PSPA\t");
      0002F1 BB 00 E7         [24]  963 	cjne	r3,#0x00,00141$
      0002F4 0C               [12]  964 	inc	r4
      0002F5 80 E4            [24]  965 	sjmp	00141$
      0002F7                        966 00119$:
                                    967 ;	calc.c:100: printall(d);
      0002F7 E5*00            [12]  968 	mov	a,_bp
      0002F9 24 0E            [12]  969 	add	a,#0x0e
      0002FB F8               [12]  970 	mov	r0,a
      0002FC E5*00            [12]  971 	mov	a,_bp
      0002FE 24 12            [12]  972 	add	a,#0x12
      000300 F9               [12]  973 	mov	r1,a
      000301 E6               [12]  974 	mov	a,@r0
      000302 F7               [12]  975 	mov	@r1,a
      000303 08               [12]  976 	inc	r0
      000304 09               [12]  977 	inc	r1
      000305 E6               [12]  978 	mov	a,@r0
      000306 F7               [12]  979 	mov	@r1,a
      000307 08               [12]  980 	inc	r0
      000308 09               [12]  981 	inc	r1
      000309 E6               [12]  982 	mov	a,@r0
      00030A F7               [12]  983 	mov	@r1,a
      00030B 08               [12]  984 	inc	r0
      00030C 09               [12]  985 	inc	r1
      00030D E6               [12]  986 	mov	a,@r0
      00030E F7               [12]  987 	mov	@r1,a
      00030F E5*00            [12]  988 	mov	a,_bp
      000311 24 12            [12]  989 	add	a,#0x12
      000313 F8               [12]  990 	mov	r0,a
      000314 86 03            [24]  991 	mov	ar3,@r0
      000316 08               [12]  992 	inc	r0
      000317 86 04            [24]  993 	mov	ar4,@r0
      000319 08               [12]  994 	inc	r0
      00031A 86 05            [24]  995 	mov	ar5,@r0
      00031C 08               [12]  996 	inc	r0
      00031D 86 06            [24]  997 	mov	ar6,@r0
                                    998 ;	calc.c:64: printf("%08lx\t", d);
      00031F C0 07            [24]  999 	push	ar7
      000321 C0 06            [24] 1000 	push	ar6
      000323 C0 05            [24] 1001 	push	ar5
      000325 C0 04            [24] 1002 	push	ar4
      000327 C0 03            [24] 1003 	push	ar3
      000329 E5*00            [12] 1004 	mov	a,_bp
      00032B 24 12            [12] 1005 	add	a,#0x12
      00032D F8               [12] 1006 	mov	r0,a
      00032E E6               [12] 1007 	mov	a,@r0
      00032F C0 E0            [24] 1008 	push	acc
      000331 08               [12] 1009 	inc	r0
      000332 E6               [12] 1010 	mov	a,@r0
      000333 C0 E0            [24] 1011 	push	acc
      000335 08               [12] 1012 	inc	r0
      000336 E6               [12] 1013 	mov	a,@r0
      000337 C0 E0            [24] 1014 	push	acc
      000339 08               [12] 1015 	inc	r0
      00033A E6               [12] 1016 	mov	a,@r0
      00033B C0 E0            [24] 1017 	push	acc
      00033D 74r00            [12] 1018 	mov	a,#___str_0
      00033F C0 E0            [24] 1019 	push	acc
      000341 74s00            [12] 1020 	mov	a,#(___str_0 >> 8)
      000343 C0 E0            [24] 1021 	push	acc
      000345 74 80            [12] 1022 	mov	a,#0x80
      000347 C0 E0            [24] 1023 	push	acc
      000349 12r00r00         [24] 1024 	lcall	_printf
      00034C E5 81            [12] 1025 	mov	a,sp
      00034E 24 F9            [12] 1026 	add	a,#0xf9
      000350 F5 81            [12] 1027 	mov	sp,a
      000352 D0 03            [24] 1028 	pop	ar3
      000354 D0 04            [24] 1029 	pop	ar4
      000356 D0 05            [24] 1030 	pop	ar5
      000358 D0 06            [24] 1031 	pop	ar6
                                   1032 ;	calc.c:65: printf("% 11ld\t", d);
      00035A C0 06            [24] 1033 	push	ar6
      00035C C0 05            [24] 1034 	push	ar5
      00035E C0 04            [24] 1035 	push	ar4
      000360 C0 03            [24] 1036 	push	ar3
      000362 C0 03            [24] 1037 	push	ar3
      000364 C0 04            [24] 1038 	push	ar4
      000366 C0 05            [24] 1039 	push	ar5
      000368 C0 06            [24] 1040 	push	ar6
      00036A 74r07            [12] 1041 	mov	a,#___str_1
      00036C C0 E0            [24] 1042 	push	acc
      00036E 74s00            [12] 1043 	mov	a,#(___str_1 >> 8)
      000370 C0 E0            [24] 1044 	push	acc
      000372 74 80            [12] 1045 	mov	a,#0x80
      000374 C0 E0            [24] 1046 	push	acc
      000376 12r00r00         [24] 1047 	lcall	_printf
      000379 E5 81            [12] 1048 	mov	a,sp
      00037B 24 F9            [12] 1049 	add	a,#0xf9
      00037D F5 81            [12] 1050 	mov	sp,a
      00037F D0 03            [24] 1051 	pop	ar3
      000381 D0 04            [24] 1052 	pop	ar4
      000383 D0 05            [24] 1053 	pop	ar5
      000385 D0 06            [24] 1054 	pop	ar6
                                   1055 ;	calc.c:66: printf("%011lo\t", d);
      000387 C0 06            [24] 1056 	push	ar6
      000389 C0 05            [24] 1057 	push	ar5
      00038B C0 04            [24] 1058 	push	ar4
      00038D C0 03            [24] 1059 	push	ar3
      00038F C0 03            [24] 1060 	push	ar3
      000391 C0 04            [24] 1061 	push	ar4
      000393 C0 05            [24] 1062 	push	ar5
      000395 C0 06            [24] 1063 	push	ar6
      000397 74r0F            [12] 1064 	mov	a,#___str_2
      000399 C0 E0            [24] 1065 	push	acc
      00039B 74s00            [12] 1066 	mov	a,#(___str_2 >> 8)
      00039D C0 E0            [24] 1067 	push	acc
      00039F 74 80            [12] 1068 	mov	a,#0x80
      0003A1 C0 E0            [24] 1069 	push	acc
      0003A3 12r00r00         [24] 1070 	lcall	_printf
      0003A6 E5 81            [12] 1071 	mov	a,sp
      0003A8 24 F9            [12] 1072 	add	a,#0xf9
      0003AA F5 81            [12] 1073 	mov	sp,a
      0003AC D0 03            [24] 1074 	pop	ar3
      0003AE D0 04            [24] 1075 	pop	ar4
      0003B0 D0 05            [24] 1076 	pop	ar5
      0003B2 D0 06            [24] 1077 	pop	ar6
      0003B4 D0 07            [24] 1078 	pop	ar7
                                   1079 ;	calc.c:67: printbin(d);
      0003B6 E5*00            [12] 1080 	mov	a,_bp
      0003B8 24 16            [12] 1081 	add	a,#0x16
      0003BA F8               [12] 1082 	mov	r0,a
      0003BB A6 03            [24] 1083 	mov	@r0,ar3
      0003BD 08               [12] 1084 	inc	r0
      0003BE A6 04            [24] 1085 	mov	@r0,ar4
      0003C0 08               [12] 1086 	inc	r0
      0003C1 A6 05            [24] 1087 	mov	@r0,ar5
      0003C3 08               [12] 1088 	inc	r0
      0003C4 A6 06            [24] 1089 	mov	@r0,ar6
                                   1090 ;	calc.c:57: for (mask = 0x80000000lu; mask; mask >>= 1)
      0003C6 E5*00            [12] 1091 	mov	a,_bp
      0003C8 24 1A            [12] 1092 	add	a,#0x1a
      0003CA F8               [12] 1093 	mov	r0,a
      0003CB E4               [12] 1094 	clr	a
      0003CC F6               [12] 1095 	mov	@r0,a
      0003CD 08               [12] 1096 	inc	r0
      0003CE F6               [12] 1097 	mov	@r0,a
      0003CF 08               [12] 1098 	inc	r0
      0003D0 F6               [12] 1099 	mov	@r0,a
      0003D1 08               [12] 1100 	inc	r0
      0003D2 76 80            [12] 1101 	mov	@r0,#0x80
                                   1102 ;	calc.c:114: return 1;
                                   1103 ;	calc.c:57: for (mask = 0x80000000lu; mask; mask >>= 1)
      0003D4                       1104 00143$:
                                   1105 ;	calc.c:58: (void)putchar((d & mask) ? (int)'1' : (int)'0');
      0003D4 E5*00            [12] 1106 	mov	a,_bp
      0003D6 24 16            [12] 1107 	add	a,#0x16
      0003D8 F8               [12] 1108 	mov	r0,a
      0003D9 86 02            [24] 1109 	mov	ar2,@r0
      0003DB 08               [12] 1110 	inc	r0
      0003DC 86 03            [24] 1111 	mov	ar3,@r0
      0003DE 08               [12] 1112 	inc	r0
      0003DF 86 04            [24] 1113 	mov	ar4,@r0
      0003E1 08               [12] 1114 	inc	r0
      0003E2 86 05            [24] 1115 	mov	ar5,@r0
      0003E4 E5*00            [12] 1116 	mov	a,_bp
      0003E6 24 1A            [12] 1117 	add	a,#0x1a
      0003E8 F8               [12] 1118 	mov	r0,a
      0003E9 E6               [12] 1119 	mov	a,@r0
      0003EA 52 02            [12] 1120 	anl	ar2,a
      0003EC 08               [12] 1121 	inc	r0
      0003ED E6               [12] 1122 	mov	a,@r0
      0003EE 52 03            [12] 1123 	anl	ar3,a
      0003F0 08               [12] 1124 	inc	r0
      0003F1 E6               [12] 1125 	mov	a,@r0
      0003F2 52 04            [12] 1126 	anl	ar4,a
      0003F4 08               [12] 1127 	inc	r0
      0003F5 E6               [12] 1128 	mov	a,@r0
      0003F6 52 05            [12] 1129 	anl	ar5,a
      0003F8 EA               [12] 1130 	mov	a,r2
      0003F9 4B               [12] 1131 	orl	a,r3
      0003FA 4C               [12] 1132 	orl	a,r4
      0003FB 4D               [12] 1133 	orl	a,r5
      0003FC 60 06            [24] 1134 	jz	00164$
      0003FE 7C 31            [12] 1135 	mov	r4,#0x31
      000400 7D 00            [12] 1136 	mov	r5,#0x00
      000402 80 04            [24] 1137 	sjmp	00165$
      000404                       1138 00164$:
      000404 7C 30            [12] 1139 	mov	r4,#0x30
      000406 7D 00            [12] 1140 	mov	r5,#0x00
      000408                       1141 00165$:
      000408 8C 82            [24] 1142 	mov	dpl,r4
      00040A 8D 83            [24] 1143 	mov	dph,r5
      00040C 12r00r00         [24] 1144 	lcall	_putchar
                                   1145 ;	calc.c:57: for (mask = 0x80000000lu; mask; mask >>= 1)
      00040F E5*00            [12] 1146 	mov	a,_bp
      000411 24 1A            [12] 1147 	add	a,#0x1a
      000413 F8               [12] 1148 	mov	r0,a
      000414 08               [12] 1149 	inc	r0
      000415 08               [12] 1150 	inc	r0
      000416 08               [12] 1151 	inc	r0
      000417 E6               [12] 1152 	mov	a,@r0
      000418 C3               [12] 1153 	clr	c
      000419 13               [12] 1154 	rrc	a
      00041A F6               [12] 1155 	mov	@r0,a
      00041B 18               [12] 1156 	dec	r0
      00041C E6               [12] 1157 	mov	a,@r0
      00041D 13               [12] 1158 	rrc	a
      00041E F6               [12] 1159 	mov	@r0,a
      00041F 18               [12] 1160 	dec	r0
      000420 E6               [12] 1161 	mov	a,@r0
      000421 13               [12] 1162 	rrc	a
      000422 F6               [12] 1163 	mov	@r0,a
      000423 18               [12] 1164 	dec	r0
      000424 E6               [12] 1165 	mov	a,@r0
      000425 13               [12] 1166 	rrc	a
      000426 F6               [12] 1167 	mov	@r0,a
      000427 E5*00            [12] 1168 	mov	a,_bp
      000429 24 1A            [12] 1169 	add	a,#0x1a
      00042B F8               [12] 1170 	mov	r0,a
      00042C E6               [12] 1171 	mov	a,@r0
      00042D 08               [12] 1172 	inc	r0
      00042E 46               [12] 1173 	orl	a,@r0
      00042F 08               [12] 1174 	inc	r0
      000430 46               [12] 1175 	orl	a,@r0
      000431 08               [12] 1176 	inc	r0
      000432 46               [12] 1177 	orl	a,@r0
      000433 70 9F            [24] 1178 	jnz	00143$
                                   1179 ;	calc.c:101: printstr("\r\n");
      000435 7Br17            [12] 1180 	mov	r3,#___str_3
      000437 7Cs00            [12] 1181 	mov	r4,#(___str_3 >> 8)
      000439 7D 80            [12] 1182 	mov	r5,#0x80
                                   1183 ;	calc.c:51: return;
      00043B                       1184 00146$:
                                   1185 ;	calc.c:49: for (; *s; s++) putchar(*s);
      00043B 8B 82            [24] 1186 	mov	dpl,r3
      00043D 8C 83            [24] 1187 	mov	dph,r4
      00043F 8D F0            [24] 1188 	mov	b,r5
      000441 12r00r00         [24] 1189 	lcall	__gptrget
      000444 FA               [12] 1190 	mov	r2,a
      000445 60 10            [24] 1191 	jz	00124$
      000447 7E 00            [12] 1192 	mov	r6,#0x00
      000449 8A 82            [24] 1193 	mov	dpl,r2
      00044B 8E 83            [24] 1194 	mov	dph,r6
      00044D 12r00r00         [24] 1195 	lcall	_putchar
      000450 0B               [12] 1196 	inc	r3
                                   1197 ;	calc.c:101: printstr("\r\n");
      000451 BB 00 E7         [24] 1198 	cjne	r3,#0x00,00146$
      000454 0C               [12] 1199 	inc	r4
      000455 80 E4            [24] 1200 	sjmp	00146$
      000457                       1201 00124$:
                                   1202 ;	calc.c:102: r = stack_pop(ctx->ps, &d);
      000457 C0 07            [24] 1203 	push	ar7
      000459 A8*00            [24] 1204 	mov	r0,_bp
      00045B 08               [12] 1205 	inc	r0
      00045C 86 03            [24] 1206 	mov	ar3,@r0
      00045E 7C 00            [12] 1207 	mov	r4,#0x00
      000460 7D 40            [12] 1208 	mov	r5,#0x40
      000462 A8*00            [24] 1209 	mov	r0,_bp
      000464 08               [12] 1210 	inc	r0
      000465 08               [12] 1211 	inc	r0
      000466 86 82            [24] 1212 	mov	dpl,@r0
      000468 08               [12] 1213 	inc	r0
      000469 86 83            [24] 1214 	mov	dph,@r0
      00046B 08               [12] 1215 	inc	r0
      00046C 86 F0            [24] 1216 	mov	b,@r0
      00046E 12r00r00         [24] 1217 	lcall	__gptrget
      000471 FA               [12] 1218 	mov	r2,a
      000472 A3               [24] 1219 	inc	dptr
      000473 12r00r00         [24] 1220 	lcall	__gptrget
      000476 FE               [12] 1221 	mov	r6,a
      000477 A3               [24] 1222 	inc	dptr
      000478 12r00r00         [24] 1223 	lcall	__gptrget
      00047B FF               [12] 1224 	mov	r7,a
      00047C C0 07            [24] 1225 	push	ar7
      00047E C0 03            [24] 1226 	push	ar3
      000480 C0 04            [24] 1227 	push	ar4
      000482 C0 05            [24] 1228 	push	ar5
      000484 8A 82            [24] 1229 	mov	dpl,r2
      000486 8E 83            [24] 1230 	mov	dph,r6
      000488 8F F0            [24] 1231 	mov	b,r7
      00048A 12r00r00         [24] 1232 	lcall	_stack_pop
      00048D AE 82            [24] 1233 	mov	r6,dpl
      00048F AD 83            [24] 1234 	mov	r5,dph
      000491 15 81            [12] 1235 	dec	sp
      000493 15 81            [12] 1236 	dec	sp
      000495 15 81            [12] 1237 	dec	sp
      000497 D0 07            [24] 1238 	pop	ar7
      000499 D0 07            [24] 1239 	pop	ar7
      00049B 02r02rC4         [24] 1240 	ljmp	00105$
      00049E                       1241 00110$:
                                   1242 ;	calc.c:105: if (delta->event == EVENT_TERM) {
      00049E E5*00            [12] 1243 	mov	a,_bp
      0004A0 24 08            [12] 1244 	add	a,#0x08
      0004A2 F8               [12] 1245 	mov	r0,a
      0004A3 86 82            [24] 1246 	mov	dpl,@r0
      0004A5 08               [12] 1247 	inc	r0
      0004A6 86 83            [24] 1248 	mov	dph,@r0
      0004A8 08               [12] 1249 	inc	r0
      0004A9 86 F0            [24] 1250 	mov	b,@r0
      0004AB 12r00r00         [24] 1251 	lcall	__gptrget
      0004AE FD               [12] 1252 	mov	r5,a
      0004AF A3               [24] 1253 	inc	dptr
      0004B0 12r00r00         [24] 1254 	lcall	__gptrget
      0004B3 FE               [12] 1255 	mov	r6,a
      0004B4 BD 08 05         [24] 1256 	cjne	r5,#0x08,00330$
      0004B7 BE 00 02         [24] 1257 	cjne	r6,#0x00,00330$
      0004BA 80 03            [24] 1258 	sjmp	00331$
      0004BC                       1259 00330$:
      0004BC 02r07r32         [24] 1260 	ljmp	00113$
      0004BF                       1261 00331$:
                                   1262 ;	calc.c:106: printstr("\r\n");
      0004BF 7Cr17            [12] 1263 	mov	r4,#___str_3
      0004C1 7Ds00            [12] 1264 	mov	r5,#(___str_3 >> 8)
      0004C3 7E 80            [12] 1265 	mov	r6,#0x80
                                   1266 ;	calc.c:51: return;
      0004C5                       1267 00149$:
                                   1268 ;	calc.c:49: for (; *s; s++) putchar(*s);
      0004C5 8C 82            [24] 1269 	mov	dpl,r4
      0004C7 8D 83            [24] 1270 	mov	dph,r5
      0004C9 8E F0            [24] 1271 	mov	b,r6
      0004CB 12r00r00         [24] 1272 	lcall	__gptrget
      0004CE FB               [12] 1273 	mov	r3,a
      0004CF 60 10            [24] 1274 	jz	00126$
      0004D1 7A 00            [12] 1275 	mov	r2,#0x00
      0004D3 8B 82            [24] 1276 	mov	dpl,r3
      0004D5 8A 83            [24] 1277 	mov	dph,r2
      0004D7 12r00r00         [24] 1278 	lcall	_putchar
      0004DA 0C               [12] 1279 	inc	r4
                                   1280 ;	calc.c:106: printstr("\r\n");
      0004DB BC 00 E7         [24] 1281 	cjne	r4,#0x00,00149$
      0004DE 0D               [12] 1282 	inc	r5
      0004DF 80 E4            [24] 1283 	sjmp	00149$
      0004E1                       1284 00126$:
                                   1285 ;	calc.c:107: for (r = stack_pop(ctx->ss, &d); r > 0; r = stack_pop(ctx->ss, &d)) {
      0004E1 8F 06            [24] 1286 	mov	ar6,r7
      0004E3 E5*00            [12] 1287 	mov	a,_bp
      0004E5 24 05            [12] 1288 	add	a,#0x05
      0004E7 F8               [12] 1289 	mov	r0,a
      0004E8 A6 06            [24] 1290 	mov	@r0,ar6
      0004EA 08               [12] 1291 	inc	r0
      0004EB 76 00            [12] 1292 	mov	@r0,#0x00
      0004ED 08               [12] 1293 	inc	r0
      0004EE 76 40            [12] 1294 	mov	@r0,#0x40
      0004F0 E5*00            [12] 1295 	mov	a,_bp
      0004F2 24 0B            [12] 1296 	add	a,#0x0b
      0004F4 F8               [12] 1297 	mov	r0,a
      0004F5 E5*00            [12] 1298 	mov	a,_bp
      0004F7 24 08            [12] 1299 	add	a,#0x08
      0004F9 F9               [12] 1300 	mov	r1,a
      0004FA 74 14            [12] 1301 	mov	a,#0x14
      0004FC 26               [12] 1302 	add	a,@r0
      0004FD F7               [12] 1303 	mov	@r1,a
      0004FE 74 40            [12] 1304 	mov	a,#0x40
      000500 08               [12] 1305 	inc	r0
      000501 36               [12] 1306 	addc	a,@r0
      000502 09               [12] 1307 	inc	r1
      000503 F7               [12] 1308 	mov	@r1,a
      000504 08               [12] 1309 	inc	r0
      000505 09               [12] 1310 	inc	r1
      000506 E6               [12] 1311 	mov	a,@r0
      000507 F7               [12] 1312 	mov	@r1,a
      000508 E5*00            [12] 1313 	mov	a,_bp
      00050A 24 08            [12] 1314 	add	a,#0x08
      00050C F8               [12] 1315 	mov	r0,a
      00050D 86 82            [24] 1316 	mov	dpl,@r0
      00050F 08               [12] 1317 	inc	r0
      000510 86 83            [24] 1318 	mov	dph,@r0
      000512 08               [12] 1319 	inc	r0
      000513 86 F0            [24] 1320 	mov	b,@r0
      000515 12r00r00         [24] 1321 	lcall	__gptrget
      000518 FA               [12] 1322 	mov	r2,a
      000519 A3               [24] 1323 	inc	dptr
      00051A 12r00r00         [24] 1324 	lcall	__gptrget
      00051D FB               [12] 1325 	mov	r3,a
      00051E A3               [24] 1326 	inc	dptr
      00051F 12r00r00         [24] 1327 	lcall	__gptrget
      000522 FE               [12] 1328 	mov	r6,a
      000523 C0 07            [24] 1329 	push	ar7
      000525 E5*00            [12] 1330 	mov	a,_bp
      000527 24 05            [12] 1331 	add	a,#0x05
      000529 F8               [12] 1332 	mov	r0,a
      00052A E6               [12] 1333 	mov	a,@r0
      00052B C0 E0            [24] 1334 	push	acc
      00052D 08               [12] 1335 	inc	r0
      00052E E6               [12] 1336 	mov	a,@r0
      00052F C0 E0            [24] 1337 	push	acc
      000531 08               [12] 1338 	inc	r0
      000532 E6               [12] 1339 	mov	a,@r0
      000533 C0 E0            [24] 1340 	push	acc
      000535 8A 82            [24] 1341 	mov	dpl,r2
      000537 8B 83            [24] 1342 	mov	dph,r3
      000539 8E F0            [24] 1343 	mov	b,r6
      00053B 12r00r00         [24] 1344 	lcall	_stack_pop
      00053E AD 82            [24] 1345 	mov	r5,dpl
      000540 AE 83            [24] 1346 	mov	r6,dph
      000542 15 81            [12] 1347 	dec	sp
      000544 15 81            [12] 1348 	dec	sp
      000546 15 81            [12] 1349 	dec	sp
      000548 D0 07            [24] 1350 	pop	ar7
      00054A                       1351 00160$:
      00054A C3               [12] 1352 	clr	c
      00054B E4               [12] 1353 	clr	a
      00054C 9D               [12] 1354 	subb	a,r5
      00054D 74 80            [12] 1355 	mov	a,#(0x00 ^ 0x80)
      00054F 8E F0            [24] 1356 	mov	b,r6
      000551 63 F0 80         [24] 1357 	xrl	b,#0x80
      000554 95 F0            [12] 1358 	subb	a,b
      000556 40 03            [24] 1359 	jc	00334$
      000558 02r07r32         [24] 1360 	ljmp	00113$
      00055B                       1361 00334$:
                                   1362 ;	calc.c:108: printstr("SSPA\t");
      00055B 7Dr32            [12] 1363 	mov	r5,#___str_6
      00055D 7Bs00            [12] 1364 	mov	r3,#(___str_6 >> 8)
      00055F 7A 80            [12] 1365 	mov	r2,#0x80
                                   1366 ;	calc.c:51: return;
      000561                       1367 00152$:
                                   1368 ;	calc.c:49: for (; *s; s++) putchar(*s);
      000561 8D 82            [24] 1369 	mov	dpl,r5
      000563 8B 83            [24] 1370 	mov	dph,r3
      000565 8A F0            [24] 1371 	mov	b,r2
      000567 12r00r00         [24] 1372 	lcall	__gptrget
      00056A FE               [12] 1373 	mov	r6,a
      00056B 60 16            [24] 1374 	jz	00128$
      00056D C0 07            [24] 1375 	push	ar7
      00056F 8E 04            [24] 1376 	mov	ar4,r6
      000571 7F 00            [12] 1377 	mov	r7,#0x00
      000573 8C 82            [24] 1378 	mov	dpl,r4
      000575 8F 83            [24] 1379 	mov	dph,r7
      000577 12r00r00         [24] 1380 	lcall	_putchar
      00057A 0D               [12] 1381 	inc	r5
      00057B BD 00 01         [24] 1382 	cjne	r5,#0x00,00336$
      00057E 0B               [12] 1383 	inc	r3
      00057F                       1384 00336$:
      00057F D0 07            [24] 1385 	pop	ar7
                                   1386 ;	calc.c:108: printstr("SSPA\t");
      000581 80 DE            [24] 1387 	sjmp	00152$
      000583                       1388 00128$:
                                   1389 ;	calc.c:109: printall(d);
      000583 C0 07            [24] 1390 	push	ar7
      000585 E5*00            [12] 1391 	mov	a,_bp
      000587 24 0E            [12] 1392 	add	a,#0x0e
      000589 F8               [12] 1393 	mov	r0,a
      00058A E5*00            [12] 1394 	mov	a,_bp
      00058C 24 12            [12] 1395 	add	a,#0x12
      00058E F9               [12] 1396 	mov	r1,a
      00058F E6               [12] 1397 	mov	a,@r0
      000590 F7               [12] 1398 	mov	@r1,a
      000591 08               [12] 1399 	inc	r0
      000592 09               [12] 1400 	inc	r1
      000593 E6               [12] 1401 	mov	a,@r0
      000594 F7               [12] 1402 	mov	@r1,a
      000595 08               [12] 1403 	inc	r0
      000596 09               [12] 1404 	inc	r1
      000597 E6               [12] 1405 	mov	a,@r0
      000598 F7               [12] 1406 	mov	@r1,a
      000599 08               [12] 1407 	inc	r0
      00059A 09               [12] 1408 	inc	r1
      00059B E6               [12] 1409 	mov	a,@r0
      00059C F7               [12] 1410 	mov	@r1,a
      00059D E5*00            [12] 1411 	mov	a,_bp
      00059F 24 12            [12] 1412 	add	a,#0x12
      0005A1 F8               [12] 1413 	mov	r0,a
      0005A2 86 02            [24] 1414 	mov	ar2,@r0
      0005A4 08               [12] 1415 	inc	r0
      0005A5 86 03            [24] 1416 	mov	ar3,@r0
      0005A7 08               [12] 1417 	inc	r0
      0005A8 86 04            [24] 1418 	mov	ar4,@r0
      0005AA 08               [12] 1419 	inc	r0
      0005AB 86 07            [24] 1420 	mov	ar7,@r0
                                   1421 ;	calc.c:64: printf("%08lx\t", d);
      0005AD C0 07            [24] 1422 	push	ar7
      0005AF C0 04            [24] 1423 	push	ar4
      0005B1 C0 03            [24] 1424 	push	ar3
      0005B3 C0 02            [24] 1425 	push	ar2
      0005B5 E5*00            [12] 1426 	mov	a,_bp
      0005B7 24 12            [12] 1427 	add	a,#0x12
      0005B9 F8               [12] 1428 	mov	r0,a
      0005BA E6               [12] 1429 	mov	a,@r0
      0005BB C0 E0            [24] 1430 	push	acc
      0005BD 08               [12] 1431 	inc	r0
      0005BE E6               [12] 1432 	mov	a,@r0
      0005BF C0 E0            [24] 1433 	push	acc
      0005C1 08               [12] 1434 	inc	r0
      0005C2 E6               [12] 1435 	mov	a,@r0
      0005C3 C0 E0            [24] 1436 	push	acc
      0005C5 08               [12] 1437 	inc	r0
      0005C6 E6               [12] 1438 	mov	a,@r0
      0005C7 C0 E0            [24] 1439 	push	acc
      0005C9 74r00            [12] 1440 	mov	a,#___str_0
      0005CB C0 E0            [24] 1441 	push	acc
      0005CD 74s00            [12] 1442 	mov	a,#(___str_0 >> 8)
      0005CF C0 E0            [24] 1443 	push	acc
      0005D1 74 80            [12] 1444 	mov	a,#0x80
      0005D3 C0 E0            [24] 1445 	push	acc
      0005D5 12r00r00         [24] 1446 	lcall	_printf
      0005D8 E5 81            [12] 1447 	mov	a,sp
      0005DA 24 F9            [12] 1448 	add	a,#0xf9
      0005DC F5 81            [12] 1449 	mov	sp,a
      0005DE D0 02            [24] 1450 	pop	ar2
      0005E0 D0 03            [24] 1451 	pop	ar3
      0005E2 D0 04            [24] 1452 	pop	ar4
      0005E4 D0 07            [24] 1453 	pop	ar7
                                   1454 ;	calc.c:65: printf("% 11ld\t", d);
      0005E6 C0 07            [24] 1455 	push	ar7
      0005E8 C0 04            [24] 1456 	push	ar4
      0005EA C0 03            [24] 1457 	push	ar3
      0005EC C0 02            [24] 1458 	push	ar2
      0005EE C0 02            [24] 1459 	push	ar2
      0005F0 C0 03            [24] 1460 	push	ar3
      0005F2 C0 04            [24] 1461 	push	ar4
      0005F4 C0 07            [24] 1462 	push	ar7
      0005F6 74r07            [12] 1463 	mov	a,#___str_1
      0005F8 C0 E0            [24] 1464 	push	acc
      0005FA 74s00            [12] 1465 	mov	a,#(___str_1 >> 8)
      0005FC C0 E0            [24] 1466 	push	acc
      0005FE 74 80            [12] 1467 	mov	a,#0x80
      000600 C0 E0            [24] 1468 	push	acc
      000602 12r00r00         [24] 1469 	lcall	_printf
      000605 E5 81            [12] 1470 	mov	a,sp
      000607 24 F9            [12] 1471 	add	a,#0xf9
      000609 F5 81            [12] 1472 	mov	sp,a
      00060B D0 02            [24] 1473 	pop	ar2
      00060D D0 03            [24] 1474 	pop	ar3
      00060F D0 04            [24] 1475 	pop	ar4
      000611 D0 07            [24] 1476 	pop	ar7
                                   1477 ;	calc.c:66: printf("%011lo\t", d);
      000613 C0 07            [24] 1478 	push	ar7
      000615 C0 04            [24] 1479 	push	ar4
      000617 C0 03            [24] 1480 	push	ar3
      000619 C0 02            [24] 1481 	push	ar2
      00061B C0 02            [24] 1482 	push	ar2
      00061D C0 03            [24] 1483 	push	ar3
      00061F C0 04            [24] 1484 	push	ar4
      000621 C0 07            [24] 1485 	push	ar7
      000623 74r0F            [12] 1486 	mov	a,#___str_2
      000625 C0 E0            [24] 1487 	push	acc
      000627 74s00            [12] 1488 	mov	a,#(___str_2 >> 8)
      000629 C0 E0            [24] 1489 	push	acc
      00062B 74 80            [12] 1490 	mov	a,#0x80
      00062D C0 E0            [24] 1491 	push	acc
      00062F 12r00r00         [24] 1492 	lcall	_printf
      000632 E5 81            [12] 1493 	mov	a,sp
      000634 24 F9            [12] 1494 	add	a,#0xf9
      000636 F5 81            [12] 1495 	mov	sp,a
      000638 D0 02            [24] 1496 	pop	ar2
      00063A D0 03            [24] 1497 	pop	ar3
      00063C D0 04            [24] 1498 	pop	ar4
      00063E D0 07            [24] 1499 	pop	ar7
                                   1500 ;	calc.c:67: printbin(d);
      000640 E5*00            [12] 1501 	mov	a,_bp
      000642 24 16            [12] 1502 	add	a,#0x16
      000644 F8               [12] 1503 	mov	r0,a
      000645 A6 02            [24] 1504 	mov	@r0,ar2
      000647 08               [12] 1505 	inc	r0
      000648 A6 03            [24] 1506 	mov	@r0,ar3
      00064A 08               [12] 1507 	inc	r0
      00064B A6 04            [24] 1508 	mov	@r0,ar4
      00064D 08               [12] 1509 	inc	r0
      00064E A6 07            [24] 1510 	mov	@r0,ar7
                                   1511 ;	calc.c:57: for (mask = 0x80000000lu; mask; mask >>= 1)
      000650 E5*00            [12] 1512 	mov	a,_bp
      000652 24 1A            [12] 1513 	add	a,#0x1a
      000654 F8               [12] 1514 	mov	r0,a
      000655 E4               [12] 1515 	clr	a
      000656 F6               [12] 1516 	mov	@r0,a
      000657 08               [12] 1517 	inc	r0
      000658 F6               [12] 1518 	mov	@r0,a
      000659 08               [12] 1519 	inc	r0
      00065A F6               [12] 1520 	mov	@r0,a
      00065B 08               [12] 1521 	inc	r0
      00065C 76 80            [12] 1522 	mov	@r0,#0x80
                                   1523 ;	calc.c:114: return 1;
      00065E D0 07            [24] 1524 	pop	ar7
                                   1525 ;	calc.c:57: for (mask = 0x80000000lu; mask; mask >>= 1)
      000660                       1526 00154$:
                                   1527 ;	calc.c:58: (void)putchar((d & mask) ? (int)'1' : (int)'0');
      000660 C0 07            [24] 1528 	push	ar7
      000662 E5*00            [12] 1529 	mov	a,_bp
      000664 24 16            [12] 1530 	add	a,#0x16
      000666 F8               [12] 1531 	mov	r0,a
      000667 86 02            [24] 1532 	mov	ar2,@r0
      000669 08               [12] 1533 	inc	r0
      00066A 86 03            [24] 1534 	mov	ar3,@r0
      00066C 08               [12] 1535 	inc	r0
      00066D 86 04            [24] 1536 	mov	ar4,@r0
      00066F 08               [12] 1537 	inc	r0
      000670 86 07            [24] 1538 	mov	ar7,@r0
      000672 E5*00            [12] 1539 	mov	a,_bp
      000674 24 1A            [12] 1540 	add	a,#0x1a
      000676 F8               [12] 1541 	mov	r0,a
      000677 E6               [12] 1542 	mov	a,@r0
      000678 52 02            [12] 1543 	anl	ar2,a
      00067A 08               [12] 1544 	inc	r0
      00067B E6               [12] 1545 	mov	a,@r0
      00067C 52 03            [12] 1546 	anl	ar3,a
      00067E 08               [12] 1547 	inc	r0
      00067F E6               [12] 1548 	mov	a,@r0
      000680 52 04            [12] 1549 	anl	ar4,a
      000682 08               [12] 1550 	inc	r0
      000683 E6               [12] 1551 	mov	a,@r0
      000684 52 07            [12] 1552 	anl	ar7,a
      000686 EA               [12] 1553 	mov	a,r2
      000687 4B               [12] 1554 	orl	a,r3
      000688 4C               [12] 1555 	orl	a,r4
      000689 4F               [12] 1556 	orl	a,r7
      00068A D0 07            [24] 1557 	pop	ar7
      00068C 60 06            [24] 1558 	jz	00166$
      00068E 7B 31            [12] 1559 	mov	r3,#0x31
      000690 7C 00            [12] 1560 	mov	r4,#0x00
      000692 80 04            [24] 1561 	sjmp	00167$
      000694                       1562 00166$:
      000694 7B 30            [12] 1563 	mov	r3,#0x30
      000696 7C 00            [12] 1564 	mov	r4,#0x00
      000698                       1565 00167$:
      000698 8B 82            [24] 1566 	mov	dpl,r3
      00069A 8C 83            [24] 1567 	mov	dph,r4
      00069C 12r00r00         [24] 1568 	lcall	_putchar
                                   1569 ;	calc.c:57: for (mask = 0x80000000lu; mask; mask >>= 1)
      00069F E5*00            [12] 1570 	mov	a,_bp
      0006A1 24 1A            [12] 1571 	add	a,#0x1a
      0006A3 F8               [12] 1572 	mov	r0,a
      0006A4 08               [12] 1573 	inc	r0
      0006A5 08               [12] 1574 	inc	r0
      0006A6 08               [12] 1575 	inc	r0
      0006A7 E6               [12] 1576 	mov	a,@r0
      0006A8 C3               [12] 1577 	clr	c
      0006A9 13               [12] 1578 	rrc	a
      0006AA F6               [12] 1579 	mov	@r0,a
      0006AB 18               [12] 1580 	dec	r0
      0006AC E6               [12] 1581 	mov	a,@r0
      0006AD 13               [12] 1582 	rrc	a
      0006AE F6               [12] 1583 	mov	@r0,a
      0006AF 18               [12] 1584 	dec	r0
      0006B0 E6               [12] 1585 	mov	a,@r0
      0006B1 13               [12] 1586 	rrc	a
      0006B2 F6               [12] 1587 	mov	@r0,a
      0006B3 18               [12] 1588 	dec	r0
      0006B4 E6               [12] 1589 	mov	a,@r0
      0006B5 13               [12] 1590 	rrc	a
      0006B6 F6               [12] 1591 	mov	@r0,a
      0006B7 E5*00            [12] 1592 	mov	a,_bp
      0006B9 24 1A            [12] 1593 	add	a,#0x1a
      0006BB F8               [12] 1594 	mov	r0,a
      0006BC E6               [12] 1595 	mov	a,@r0
      0006BD 08               [12] 1596 	inc	r0
      0006BE 46               [12] 1597 	orl	a,@r0
      0006BF 08               [12] 1598 	inc	r0
      0006C0 46               [12] 1599 	orl	a,@r0
      0006C1 08               [12] 1600 	inc	r0
      0006C2 46               [12] 1601 	orl	a,@r0
      0006C3 70 9B            [24] 1602 	jnz	00154$
                                   1603 ;	calc.c:110: printstr("\r\n");
      0006C5 7Dr17            [12] 1604 	mov	r5,#___str_3
      0006C7 7Bs00            [12] 1605 	mov	r3,#(___str_3 >> 8)
      0006C9 7A 80            [12] 1606 	mov	r2,#0x80
                                   1607 ;	calc.c:51: return;
      0006CB                       1608 00157$:
                                   1609 ;	calc.c:49: for (; *s; s++) putchar(*s);
      0006CB 8D 82            [24] 1610 	mov	dpl,r5
      0006CD 8B 83            [24] 1611 	mov	dph,r3
      0006CF 8A F0            [24] 1612 	mov	b,r2
      0006D1 12r00r00         [24] 1613 	lcall	__gptrget
      0006D4 FE               [12] 1614 	mov	r6,a
      0006D5 60 16            [24] 1615 	jz	00133$
      0006D7 C0 07            [24] 1616 	push	ar7
      0006D9 8E 04            [24] 1617 	mov	ar4,r6
      0006DB 7F 00            [12] 1618 	mov	r7,#0x00
      0006DD 8C 82            [24] 1619 	mov	dpl,r4
      0006DF 8F 83            [24] 1620 	mov	dph,r7
      0006E1 12r00r00         [24] 1621 	lcall	_putchar
      0006E4 0D               [12] 1622 	inc	r5
      0006E5 BD 00 01         [24] 1623 	cjne	r5,#0x00,00340$
      0006E8 0B               [12] 1624 	inc	r3
      0006E9                       1625 00340$:
      0006E9 D0 07            [24] 1626 	pop	ar7
                                   1627 ;	calc.c:110: printstr("\r\n");
      0006EB 80 DE            [24] 1628 	sjmp	00157$
      0006ED                       1629 00133$:
                                   1630 ;	calc.c:107: for (r = stack_pop(ctx->ss, &d); r > 0; r = stack_pop(ctx->ss, &d)) {
      0006ED 8F 06            [24] 1631 	mov	ar6,r7
      0006EF 7D 00            [12] 1632 	mov	r5,#0x00
      0006F1 7A 40            [12] 1633 	mov	r2,#0x40
      0006F3 C0 07            [24] 1634 	push	ar7
      0006F5 E5*00            [12] 1635 	mov	a,_bp
      0006F7 24 08            [12] 1636 	add	a,#0x08
      0006F9 F8               [12] 1637 	mov	r0,a
      0006FA 86 82            [24] 1638 	mov	dpl,@r0
      0006FC 08               [12] 1639 	inc	r0
      0006FD 86 83            [24] 1640 	mov	dph,@r0
      0006FF 08               [12] 1641 	inc	r0
      000700 86 F0            [24] 1642 	mov	b,@r0
      000702 12r00r00         [24] 1643 	lcall	__gptrget
      000705 FB               [12] 1644 	mov	r3,a
      000706 A3               [24] 1645 	inc	dptr
      000707 12r00r00         [24] 1646 	lcall	__gptrget
      00070A FC               [12] 1647 	mov	r4,a
      00070B A3               [24] 1648 	inc	dptr
      00070C 12r00r00         [24] 1649 	lcall	__gptrget
      00070F FF               [12] 1650 	mov	r7,a
      000710 C0 06            [24] 1651 	push	ar6
      000712 C0 05            [24] 1652 	push	ar5
      000714 C0 02            [24] 1653 	push	ar2
      000716 8B 82            [24] 1654 	mov	dpl,r3
      000718 8C 83            [24] 1655 	mov	dph,r4
      00071A 8F F0            [24] 1656 	mov	b,r7
      00071C 12r00r00         [24] 1657 	lcall	_stack_pop
      00071F AC 82            [24] 1658 	mov	r4,dpl
      000721 AF 83            [24] 1659 	mov	r7,dph
      000723 15 81            [12] 1660 	dec	sp
      000725 15 81            [12] 1661 	dec	sp
      000727 15 81            [12] 1662 	dec	sp
      000729 8C 05            [24] 1663 	mov	ar5,r4
      00072B 8F 06            [24] 1664 	mov	ar6,r7
      00072D D0 07            [24] 1665 	pop	ar7
      00072F 02r05r4A         [24] 1666 	ljmp	00160$
      000732                       1667 00113$:
                                   1668 ;	calc.c:114: return 1;
      000732 90 00 01         [24] 1669 	mov	dptr,#0x0001
                                   1670 ;	calc.c:115: }
      000735 85*00 81         [24] 1671 	mov	sp,_bp
      000738 D0*00            [24] 1672 	pop	_bp
      00073A 22               [24] 1673 	ret
                                   1674 ;------------------------------------------------------------
                                   1675 ;Allocation info for local variables in function 'dump_peek'
                                   1676 ;------------------------------------------------------------
                                   1677 ;d                         Allocated to stack - _bp -6
                                   1678 ;_ctx                      Allocated to registers 
                                   1679 ;__1310720021              Allocated to registers 
                                   1680 ;s                         Allocated to registers r5 r6 r7 
                                   1681 ;__1310720023              Allocated to registers r4 r5 r6 r7 
                                   1682 ;d                         Allocated to registers 
                                   1683 ;__1310720001              Allocated to registers 
                                   1684 ;d                         Allocated to stack - _bp +1
                                   1685 ;mask                      Allocated to stack - _bp +5
                                   1686 ;__1310720025              Allocated to registers 
                                   1687 ;s                         Allocated to registers r5 r6 r7 
                                   1688 ;------------------------------------------------------------
                                   1689 ;	calc.c:117: static int dump_peek(void *_ctx, long d) __reentrant {
                                   1690 ;	-----------------------------------------
                                   1691 ;	 function dump_peek
                                   1692 ;	-----------------------------------------
      00073B                       1693 _dump_peek:
      00073B C0*00            [24] 1694 	push	_bp
      00073D E5 81            [12] 1695 	mov	a,sp
      00073F F5*00            [12] 1696 	mov	_bp,a
      000741 24 08            [12] 1697 	add	a,#0x08
      000743 F5 81            [12] 1698 	mov	sp,a
                                   1699 ;	calc.c:120: printstr("PSVA\t");
      000745 7Dr38            [12] 1700 	mov	r5,#___str_7
      000747 7Es00            [12] 1701 	mov	r6,#(___str_7 >> 8)
      000749 7F 80            [12] 1702 	mov	r7,#0x80
                                   1703 ;	calc.c:51: return;
      00074B                       1704 00109$:
                                   1705 ;	calc.c:49: for (; *s; s++) putchar(*s);
      00074B 8D 82            [24] 1706 	mov	dpl,r5
      00074D 8E 83            [24] 1707 	mov	dph,r6
      00074F 8F F0            [24] 1708 	mov	b,r7
      000751 12r00r00         [24] 1709 	lcall	__gptrget
      000754 FC               [12] 1710 	mov	r4,a
      000755 60 10            [24] 1711 	jz	00102$
      000757 7B 00            [12] 1712 	mov	r3,#0x00
      000759 8C 82            [24] 1713 	mov	dpl,r4
      00075B 8B 83            [24] 1714 	mov	dph,r3
      00075D 12r00r00         [24] 1715 	lcall	_putchar
      000760 0D               [12] 1716 	inc	r5
                                   1717 ;	calc.c:120: printstr("PSVA\t");
      000761 BD 00 E7         [24] 1718 	cjne	r5,#0x00,00109$
      000764 0E               [12] 1719 	inc	r6
      000765 80 E4            [24] 1720 	sjmp	00109$
      000767                       1721 00102$:
                                   1722 ;	calc.c:121: printall(d);
      000767 E5*00            [12] 1723 	mov	a,_bp
      000769 24 FA            [12] 1724 	add	a,#0xfa
      00076B F8               [12] 1725 	mov	r0,a
      00076C 86 04            [24] 1726 	mov	ar4,@r0
      00076E 08               [12] 1727 	inc	r0
      00076F 86 05            [24] 1728 	mov	ar5,@r0
      000771 08               [12] 1729 	inc	r0
      000772 86 06            [24] 1730 	mov	ar6,@r0
      000774 08               [12] 1731 	inc	r0
      000775 86 07            [24] 1732 	mov	ar7,@r0
                                   1733 ;	calc.c:64: printf("%08lx\t", d);
      000777 C0 07            [24] 1734 	push	ar7
      000779 C0 06            [24] 1735 	push	ar6
      00077B C0 05            [24] 1736 	push	ar5
      00077D C0 04            [24] 1737 	push	ar4
      00077F C0 04            [24] 1738 	push	ar4
      000781 C0 05            [24] 1739 	push	ar5
      000783 C0 06            [24] 1740 	push	ar6
      000785 C0 07            [24] 1741 	push	ar7
      000787 74r00            [12] 1742 	mov	a,#___str_0
      000789 C0 E0            [24] 1743 	push	acc
      00078B 74s00            [12] 1744 	mov	a,#(___str_0 >> 8)
      00078D C0 E0            [24] 1745 	push	acc
      00078F 74 80            [12] 1746 	mov	a,#0x80
      000791 C0 E0            [24] 1747 	push	acc
      000793 12r00r00         [24] 1748 	lcall	_printf
      000796 E5 81            [12] 1749 	mov	a,sp
      000798 24 F9            [12] 1750 	add	a,#0xf9
      00079A F5 81            [12] 1751 	mov	sp,a
      00079C D0 04            [24] 1752 	pop	ar4
      00079E D0 05            [24] 1753 	pop	ar5
      0007A0 D0 06            [24] 1754 	pop	ar6
      0007A2 D0 07            [24] 1755 	pop	ar7
                                   1756 ;	calc.c:65: printf("% 11ld\t", d);
      0007A4 C0 07            [24] 1757 	push	ar7
      0007A6 C0 06            [24] 1758 	push	ar6
      0007A8 C0 05            [24] 1759 	push	ar5
      0007AA C0 04            [24] 1760 	push	ar4
      0007AC C0 04            [24] 1761 	push	ar4
      0007AE C0 05            [24] 1762 	push	ar5
      0007B0 C0 06            [24] 1763 	push	ar6
      0007B2 C0 07            [24] 1764 	push	ar7
      0007B4 74r07            [12] 1765 	mov	a,#___str_1
      0007B6 C0 E0            [24] 1766 	push	acc
      0007B8 74s00            [12] 1767 	mov	a,#(___str_1 >> 8)
      0007BA C0 E0            [24] 1768 	push	acc
      0007BC 74 80            [12] 1769 	mov	a,#0x80
      0007BE C0 E0            [24] 1770 	push	acc
      0007C0 12r00r00         [24] 1771 	lcall	_printf
      0007C3 E5 81            [12] 1772 	mov	a,sp
      0007C5 24 F9            [12] 1773 	add	a,#0xf9
      0007C7 F5 81            [12] 1774 	mov	sp,a
      0007C9 D0 04            [24] 1775 	pop	ar4
      0007CB D0 05            [24] 1776 	pop	ar5
      0007CD D0 06            [24] 1777 	pop	ar6
      0007CF D0 07            [24] 1778 	pop	ar7
                                   1779 ;	calc.c:66: printf("%011lo\t", d);
      0007D1 C0 07            [24] 1780 	push	ar7
      0007D3 C0 06            [24] 1781 	push	ar6
      0007D5 C0 05            [24] 1782 	push	ar5
      0007D7 C0 04            [24] 1783 	push	ar4
      0007D9 C0 04            [24] 1784 	push	ar4
      0007DB C0 05            [24] 1785 	push	ar5
      0007DD C0 06            [24] 1786 	push	ar6
      0007DF C0 07            [24] 1787 	push	ar7
      0007E1 74r0F            [12] 1788 	mov	a,#___str_2
      0007E3 C0 E0            [24] 1789 	push	acc
      0007E5 74s00            [12] 1790 	mov	a,#(___str_2 >> 8)
      0007E7 C0 E0            [24] 1791 	push	acc
      0007E9 74 80            [12] 1792 	mov	a,#0x80
      0007EB C0 E0            [24] 1793 	push	acc
      0007ED 12r00r00         [24] 1794 	lcall	_printf
      0007F0 E5 81            [12] 1795 	mov	a,sp
      0007F2 24 F9            [12] 1796 	add	a,#0xf9
      0007F4 F5 81            [12] 1797 	mov	sp,a
      0007F6 D0 04            [24] 1798 	pop	ar4
      0007F8 D0 05            [24] 1799 	pop	ar5
      0007FA D0 06            [24] 1800 	pop	ar6
      0007FC D0 07            [24] 1801 	pop	ar7
                                   1802 ;	calc.c:67: printbin(d);
      0007FE A8*00            [24] 1803 	mov	r0,_bp
      000800 08               [12] 1804 	inc	r0
      000801 A6 04            [24] 1805 	mov	@r0,ar4
      000803 08               [12] 1806 	inc	r0
      000804 A6 05            [24] 1807 	mov	@r0,ar5
      000806 08               [12] 1808 	inc	r0
      000807 A6 06            [24] 1809 	mov	@r0,ar6
      000809 08               [12] 1810 	inc	r0
      00080A A6 07            [24] 1811 	mov	@r0,ar7
                                   1812 ;	calc.c:57: for (mask = 0x80000000lu; mask; mask >>= 1)
      00080C E5*00            [12] 1813 	mov	a,_bp
      00080E 24 05            [12] 1814 	add	a,#0x05
      000810 F8               [12] 1815 	mov	r0,a
      000811 E4               [12] 1816 	clr	a
      000812 F6               [12] 1817 	mov	@r0,a
      000813 08               [12] 1818 	inc	r0
      000814 F6               [12] 1819 	mov	@r0,a
      000815 08               [12] 1820 	inc	r0
      000816 F6               [12] 1821 	mov	@r0,a
      000817 08               [12] 1822 	inc	r0
      000818 76 80            [12] 1823 	mov	@r0,#0x80
      00081A                       1824 00111$:
                                   1825 ;	calc.c:58: (void)putchar((d & mask) ? (int)'1' : (int)'0');
      00081A A8*00            [24] 1826 	mov	r0,_bp
      00081C 08               [12] 1827 	inc	r0
      00081D 86 04            [24] 1828 	mov	ar4,@r0
      00081F 08               [12] 1829 	inc	r0
      000820 86 05            [24] 1830 	mov	ar5,@r0
      000822 08               [12] 1831 	inc	r0
      000823 86 06            [24] 1832 	mov	ar6,@r0
      000825 08               [12] 1833 	inc	r0
      000826 86 07            [24] 1834 	mov	ar7,@r0
      000828 E5*00            [12] 1835 	mov	a,_bp
      00082A 24 05            [12] 1836 	add	a,#0x05
      00082C F8               [12] 1837 	mov	r0,a
      00082D E6               [12] 1838 	mov	a,@r0
      00082E 52 04            [12] 1839 	anl	ar4,a
      000830 08               [12] 1840 	inc	r0
      000831 E6               [12] 1841 	mov	a,@r0
      000832 52 05            [12] 1842 	anl	ar5,a
      000834 08               [12] 1843 	inc	r0
      000835 E6               [12] 1844 	mov	a,@r0
      000836 52 06            [12] 1845 	anl	ar6,a
      000838 08               [12] 1846 	inc	r0
      000839 E6               [12] 1847 	mov	a,@r0
      00083A 52 07            [12] 1848 	anl	ar7,a
      00083C EC               [12] 1849 	mov	a,r4
      00083D 4D               [12] 1850 	orl	a,r5
      00083E 4E               [12] 1851 	orl	a,r6
      00083F 4F               [12] 1852 	orl	a,r7
      000840 60 06            [24] 1853 	jz	00118$
      000842 7E 31            [12] 1854 	mov	r6,#0x31
      000844 7F 00            [12] 1855 	mov	r7,#0x00
      000846 80 04            [24] 1856 	sjmp	00119$
      000848                       1857 00118$:
      000848 7E 30            [12] 1858 	mov	r6,#0x30
      00084A 7F 00            [12] 1859 	mov	r7,#0x00
      00084C                       1860 00119$:
      00084C 8E 82            [24] 1861 	mov	dpl,r6
      00084E 8F 83            [24] 1862 	mov	dph,r7
      000850 12r00r00         [24] 1863 	lcall	_putchar
                                   1864 ;	calc.c:57: for (mask = 0x80000000lu; mask; mask >>= 1)
      000853 E5*00            [12] 1865 	mov	a,_bp
      000855 24 05            [12] 1866 	add	a,#0x05
      000857 F8               [12] 1867 	mov	r0,a
      000858 08               [12] 1868 	inc	r0
      000859 08               [12] 1869 	inc	r0
      00085A 08               [12] 1870 	inc	r0
      00085B E6               [12] 1871 	mov	a,@r0
      00085C C3               [12] 1872 	clr	c
      00085D 13               [12] 1873 	rrc	a
      00085E F6               [12] 1874 	mov	@r0,a
      00085F 18               [12] 1875 	dec	r0
      000860 E6               [12] 1876 	mov	a,@r0
      000861 13               [12] 1877 	rrc	a
      000862 F6               [12] 1878 	mov	@r0,a
      000863 18               [12] 1879 	dec	r0
      000864 E6               [12] 1880 	mov	a,@r0
      000865 13               [12] 1881 	rrc	a
      000866 F6               [12] 1882 	mov	@r0,a
      000867 18               [12] 1883 	dec	r0
      000868 E6               [12] 1884 	mov	a,@r0
      000869 13               [12] 1885 	rrc	a
      00086A F6               [12] 1886 	mov	@r0,a
      00086B E5*00            [12] 1887 	mov	a,_bp
      00086D 24 05            [12] 1888 	add	a,#0x05
      00086F F8               [12] 1889 	mov	r0,a
      000870 E6               [12] 1890 	mov	a,@r0
      000871 08               [12] 1891 	inc	r0
      000872 46               [12] 1892 	orl	a,@r0
      000873 08               [12] 1893 	inc	r0
      000874 46               [12] 1894 	orl	a,@r0
      000875 08               [12] 1895 	inc	r0
      000876 46               [12] 1896 	orl	a,@r0
      000877 70 A1            [24] 1897 	jnz	00111$
                                   1898 ;	calc.c:122: printstr("\r\n");
      000879 7Dr17            [12] 1899 	mov	r5,#___str_3
      00087B 7Es00            [12] 1900 	mov	r6,#(___str_3 >> 8)
      00087D 7F 80            [12] 1901 	mov	r7,#0x80
                                   1902 ;	calc.c:51: return;
      00087F                       1903 00114$:
                                   1904 ;	calc.c:49: for (; *s; s++) putchar(*s);
      00087F 8D 82            [24] 1905 	mov	dpl,r5
      000881 8E 83            [24] 1906 	mov	dph,r6
      000883 8F F0            [24] 1907 	mov	b,r7
      000885 12r00r00         [24] 1908 	lcall	__gptrget
      000888 FC               [12] 1909 	mov	r4,a
      000889 60 10            [24] 1910 	jz	00107$
      00088B 7B 00            [12] 1911 	mov	r3,#0x00
      00088D 8C 82            [24] 1912 	mov	dpl,r4
      00088F 8B 83            [24] 1913 	mov	dph,r3
      000891 12r00r00         [24] 1914 	lcall	_putchar
      000894 0D               [12] 1915 	inc	r5
                                   1916 ;	calc.c:122: printstr("\r\n");
      000895 BD 00 E7         [24] 1917 	cjne	r5,#0x00,00114$
      000898 0E               [12] 1918 	inc	r6
      000899 80 E4            [24] 1919 	sjmp	00114$
      00089B                       1920 00107$:
                                   1921 ;	calc.c:124: return 1;
      00089B 90 00 01         [24] 1922 	mov	dptr,#0x0001
                                   1923 ;	calc.c:125: }
      00089E 85*00 81         [24] 1924 	mov	sp,_bp
      0008A1 D0*00            [24] 1925 	pop	_bp
      0008A3 22               [24] 1926 	ret
                                   1927 ;------------------------------------------------------------
                                   1928 ;Allocation info for local variables in function 'operator'
                                   1929 ;------------------------------------------------------------
                                   1930 ;delta                     Allocated to stack - _bp -5
                                   1931 ;_ctx                      Allocated to stack - _bp +1
                                   1932 ;ctx                       Allocated to stack - _bp +18
                                   1933 ;t0                        Allocated to registers r7 r6 r5 
                                   1934 ;d0                        Allocated to stack - _bp +21
                                   1935 ;d1                        Allocated to stack - _bp +25
                                   1936 ;__1966080027              Allocated to registers 
                                   1937 ;s                         Allocated to registers r7 r6 r5 
                                   1938 ;__1966080029              Allocated to registers 
                                   1939 ;s                         Allocated to registers r7 r6 r5 
                                   1940 ;__2621440031              Allocated to registers 
                                   1941 ;s                         Allocated to registers r7 r6 r5 
                                   1942 ;__2621440033              Allocated to registers r7 r6 r5 r4 
                                   1943 ;d                         Allocated to stack - _bp +29
                                   1944 ;__1310720001              Allocated to registers 
                                   1945 ;d                         Allocated to registers r7 r6 r5 r2 
                                   1946 ;mask                      Allocated to stack - _bp +33
                                   1947 ;__2621440035              Allocated to registers 
                                   1948 ;s                         Allocated to registers r7 r6 r5 
                                   1949 ;__1966080037              Allocated to registers 
                                   1950 ;s                         Allocated to registers r7 r6 r5 
                                   1951 ;__1966080039              Allocated to registers 
                                   1952 ;s                         Allocated to registers r7 r6 r5 
                                   1953 ;__1966080041              Allocated to registers 
                                   1954 ;s                         Allocated to registers r7 r6 r5 
                                   1955 ;__1966080043              Allocated to registers 
                                   1956 ;s                         Allocated to registers r7 r6 r5 
                                   1957 ;__2621440045              Allocated to registers 
                                   1958 ;s                         Allocated to registers r7 r6 r5 
                                   1959 ;__2621440047              Allocated to registers r7 r6 r5 r4 
                                   1960 ;d                         Allocated to stack - _bp +29
                                   1961 ;__1310720001              Allocated to registers 
                                   1962 ;d                         Allocated to registers r7 r6 r5 r2 
                                   1963 ;mask                      Allocated to stack - _bp +33
                                   1964 ;__2621440049              Allocated to registers 
                                   1965 ;s                         Allocated to registers r7 r6 r5 
                                   1966 ;__1966080051              Allocated to registers 
                                   1967 ;s                         Allocated to registers r7 r6 r5 
                                   1968 ;__1966080053              Allocated to registers 
                                   1969 ;s                         Allocated to registers r7 r6 r5 
                                   1970 ;__2621440055              Allocated to registers 
                                   1971 ;s                         Allocated to registers r7 r6 r5 
                                   1972 ;__1966080057              Allocated to registers 
                                   1973 ;s                         Allocated to registers r7 r6 r5 
                                   1974 ;__3276800059              Allocated to registers 
                                   1975 ;s                         Allocated to registers r7 r6 r5 
                                   1976 ;__1966080061              Allocated to registers 
                                   1977 ;s                         Allocated to registers r7 r6 r5 
                                   1978 ;__3276800063              Allocated to registers 
                                   1979 ;s                         Allocated to registers r7 r6 r5 
                                   1980 ;__1966080065              Allocated to registers 
                                   1981 ;s                         Allocated to registers r7 r6 r5 
                                   1982 ;__1966080067              Allocated to registers 
                                   1983 ;s                         Allocated to registers r7 r6 r5 
                                   1984 ;__1966080069              Allocated to registers 
                                   1985 ;s                         Allocated to registers r7 r6 r5 
                                   1986 ;__1966080071              Allocated to registers 
                                   1987 ;s                         Allocated to registers r7 r6 r5 
                                   1988 ;__1966080073              Allocated to registers 
                                   1989 ;s                         Allocated to registers r7 r6 r5 
                                   1990 ;__3276800075              Allocated to registers 
                                   1991 ;s                         Allocated to registers r7 r6 r5 
                                   1992 ;__1966080077              Allocated to registers 
                                   1993 ;s                         Allocated to registers r7 r6 r5 
                                   1994 ;__2621440079              Allocated to registers 
                                   1995 ;s                         Allocated to registers r7 r6 r5 
                                   1996 ;__1966080081              Allocated to registers 
                                   1997 ;s                         Allocated to registers r7 r6 r5 
                                   1998 ;__2621440083              Allocated to registers 
                                   1999 ;s                         Allocated to registers r7 r6 r5 
                                   2000 ;__1966080085              Allocated to registers 
                                   2001 ;s                         Allocated to registers r7 r6 r5 
                                   2002 ;__2621440087              Allocated to registers 
                                   2003 ;s                         Allocated to registers r7 r6 r5 
                                   2004 ;__1966080089              Allocated to registers 
                                   2005 ;s                         Allocated to registers r7 r6 r5 
                                   2006 ;__2621440091              Allocated to registers 
                                   2007 ;s                         Allocated to registers r7 r6 r5 
                                   2008 ;__2621440093              Allocated to registers 
                                   2009 ;s                         Allocated to registers r7 r6 r5 
                                   2010 ;__1966080095              Allocated to registers 
                                   2011 ;s                         Allocated to registers r7 r6 r5 
                                   2012 ;__2621440097              Allocated to registers 
                                   2013 ;s                         Allocated to registers r7 r6 r5 
                                   2014 ;__2621440099              Allocated to registers 
                                   2015 ;s                         Allocated to registers r7 r6 r5 
                                   2016 ;__1966080101              Allocated to registers 
                                   2017 ;s                         Allocated to registers r5 r4 r3 
                                   2018 ;__2621440103              Allocated to registers 
                                   2019 ;s                         Allocated to registers r5 r4 r3 
                                   2020 ;__1966080105              Allocated to registers 
                                   2021 ;s                         Allocated to registers r5 r4 r3 
                                   2022 ;__2621440107              Allocated to registers 
                                   2023 ;s                         Allocated to registers r5 r4 r3 
                                   2024 ;__1966080109              Allocated to registers 
                                   2025 ;s                         Allocated to registers r5 r4 r3 
                                   2026 ;__2621440111              Allocated to registers 
                                   2027 ;s                         Allocated to registers r5 r4 r3 
                                   2028 ;__1966080113              Allocated to registers 
                                   2029 ;s                         Allocated to registers r5 r4 r3 
                                   2030 ;__2621440115              Allocated to registers 
                                   2031 ;s                         Allocated to registers r5 r4 r3 
                                   2032 ;__1966080117              Allocated to registers 
                                   2033 ;s                         Allocated to registers r5 r4 r3 
                                   2034 ;__2621440119              Allocated to registers 
                                   2035 ;s                         Allocated to registers r5 r4 r3 
                                   2036 ;__1966080121              Allocated to registers 
                                   2037 ;s                         Allocated to registers r5 r4 r3 
                                   2038 ;__2621440123              Allocated to registers 
                                   2039 ;s                         Allocated to registers r5 r4 r3 
                                   2040 ;__1966080125              Allocated to registers 
                                   2041 ;s                         Allocated to registers r5 r4 r3 
                                   2042 ;sloc0                     Allocated to stack - _bp +346
                                   2043 ;sloc1                     Allocated to stack - _bp +4
                                   2044 ;sloc2                     Allocated to stack - _bp +7
                                   2045 ;sloc3                     Allocated to stack - _bp +11
                                   2046 ;sloc4                     Allocated to stack - _bp +14
                                   2047 ;------------------------------------------------------------
                                   2048 ;	calc.c:127: static int operator(void *_ctx, delta_t *delta) __reentrant {
                                   2049 ;	-----------------------------------------
                                   2050 ;	 function operator
                                   2051 ;	-----------------------------------------
      0008A4                       2052 _operator:
      0008A4 C0*00            [24] 2053 	push	_bp
      0008A6 85 81*00         [24] 2054 	mov	_bp,sp
      0008A9 C0 82            [24] 2055 	push	dpl
      0008AB C0 83            [24] 2056 	push	dph
      0008AD C0 F0            [24] 2057 	push	b
      0008AF E5 81            [12] 2058 	mov	a,sp
      0008B1 24 21            [12] 2059 	add	a,#0x21
      0008B3 F5 81            [12] 2060 	mov	sp,a
                                   2061 ;	calc.c:128: calc_ctx_t *ctx = (calc_ctx_t *)_ctx;
      0008B5 A8*00            [24] 2062 	mov	r0,_bp
      0008B7 08               [12] 2063 	inc	r0
      0008B8 E5*00            [12] 2064 	mov	a,_bp
      0008BA 24 12            [12] 2065 	add	a,#0x12
      0008BC F9               [12] 2066 	mov	r1,a
      0008BD E6               [12] 2067 	mov	a,@r0
      0008BE F7               [12] 2068 	mov	@r1,a
      0008BF 08               [12] 2069 	inc	r0
      0008C0 09               [12] 2070 	inc	r1
      0008C1 E6               [12] 2071 	mov	a,@r0
      0008C2 F7               [12] 2072 	mov	@r1,a
      0008C3 08               [12] 2073 	inc	r0
      0008C4 09               [12] 2074 	inc	r1
      0008C5 E6               [12] 2075 	mov	a,@r0
      0008C6 F7               [12] 2076 	mov	@r1,a
                                   2077 ;	calc.c:132: switch (ctx->digit[0]) {
      0008C7 E5*00            [12] 2078 	mov	a,_bp
      0008C9 24 12            [12] 2079 	add	a,#0x12
      0008CB F8               [12] 2080 	mov	r0,a
      0008CC 74 07            [12] 2081 	mov	a,#0x07
      0008CE 26               [12] 2082 	add	a,@r0
      0008CF FD               [12] 2083 	mov	r5,a
      0008D0 E4               [12] 2084 	clr	a
      0008D1 08               [12] 2085 	inc	r0
      0008D2 36               [12] 2086 	addc	a,@r0
      0008D3 FE               [12] 2087 	mov	r6,a
      0008D4 08               [12] 2088 	inc	r0
      0008D5 86 07            [24] 2089 	mov	ar7,@r0
      0008D7 8D 82            [24] 2090 	mov	dpl,r5
      0008D9 8E 83            [24] 2091 	mov	dph,r6
      0008DB 8F F0            [24] 2092 	mov	b,r7
      0008DD 12r00r00         [24] 2093 	lcall	__gptrget
      0008E0 FC               [12] 2094 	mov	r4,a
      0008E1 BC 23 03         [24] 2095 	cjne	r4,#0x23,01234$
      0008E4 02r1Er13         [24] 2096 	ljmp	00189$
      0008E7                       2097 01234$:
      0008E7 BC 25 03         [24] 2098 	cjne	r4,#0x25,01235$
      0008EA 02r1Er13         [24] 2099 	ljmp	00189$
      0008ED                       2100 01235$:
      0008ED BC 26 03         [24] 2101 	cjne	r4,#0x26,01236$
      0008F0 02r20rF9         [24] 2102 	ljmp	00202$
      0008F3                       2103 01236$:
      0008F3 BC 2A 03         [24] 2104 	cjne	r4,#0x2a,01237$
      0008F6 02r19r83         [24] 2105 	ljmp	00167$
      0008F9                       2106 01237$:
      0008F9 BC 2B 03         [24] 2107 	cjne	r4,#0x2b,01238$
      0008FC 02r16r84         [24] 2108 	ljmp	00153$
      0008FF                       2109 01238$:
      0008FF BC 2D 03         [24] 2110 	cjne	r4,#0x2d,01239$
      000902 02r18r03         [24] 2111 	ljmp	00160$
      000905                       2112 01239$:
      000905 BC 2E 03         [24] 2113 	cjne	r4,#0x2e,01240$
      000908 02r0Cr16         [24] 2114 	ljmp	00109$
      00090B                       2115 01240$:
      00090B BC 2F 03         [24] 2116 	cjne	r4,#0x2f,01241$
      00090E 02r1Br29         [24] 2117 	ljmp	00175$
      000911                       2118 01241$:
      000911 BC 3C 03         [24] 2119 	cjne	r4,#0x3c,01242$
      000914 02r29r14         [24] 2120 	ljmp	00237$
      000917                       2121 01242$:
      000917 BC 3E 03         [24] 2122 	cjne	r4,#0x3e,01243$
      00091A 02r25rC7         [24] 2123 	ljmp	00223$
      00091D                       2124 01243$:
      00091D BC 4D 03         [24] 2125 	cjne	r4,#0x4d,01244$
      000920 02r11r2A         [24] 2126 	ljmp	00127$
      000923                       2127 01244$:
      000923 BC 50 03         [24] 2128 	cjne	r4,#0x50,01245$
      000926 02r0Er0C         [24] 2129 	ljmp	00113$
      000929                       2130 01245$:
      000929 BC 54 03         [24] 2131 	cjne	r4,#0x54,01246$
      00092C 02r14r2C         [24] 2132 	ljmp	00145$
      00092F                       2133 01246$:
      00092F BC 55 03         [24] 2134 	cjne	r4,#0x55,01247$
      000932 02r13r45         [24] 2135 	ljmp	00139$
      000935                       2136 01247$:
      000935 BC 56 03         [24] 2137 	cjne	r4,#0x56,01248$
      000938 02r0Br75         [24] 2138 	ljmp	00105$
      00093B                       2139 01248$:
      00093B BC 58 03         [24] 2140 	cjne	r4,#0x58,01249$
      00093E 02r15rE5         [24] 2141 	ljmp	00152$
      000941                       2142 01249$:
      000941 BC 5C 03         [24] 2143 	cjne	r4,#0x5c,01250$
      000944 02r1Br29         [24] 2144 	ljmp	00175$
      000947                       2145 01250$:
      000947 BC 5D 03         [24] 2146 	cjne	r4,#0x5d,01251$
      00094A 02r27r65         [24] 2147 	ljmp	00230$
      00094D                       2148 01251$:
      00094D BC 5E 03         [24] 2149 	cjne	r4,#0x5e,01252$
      000950 02r24r2D         [24] 2150 	ljmp	00216$
      000953                       2151 01252$:
      000953 BC 6D 03         [24] 2152 	cjne	r4,#0x6d,01253$
      000956 02r0FrF6         [24] 2153 	ljmp	00121$
      000959                       2154 01253$:
      000959 BC 70 03         [24] 2155 	cjne	r4,#0x70,01254$
      00095C 02r0Cr16         [24] 2156 	ljmp	00109$
      00095F                       2157 01254$:
      00095F BC 75 03         [24] 2158 	cjne	r4,#0x75,01255$
      000962 02r12r5E         [24] 2159 	ljmp	00133$
      000965                       2160 01255$:
      000965 BC 76 02         [24] 2161 	cjne	r4,#0x76,01256$
      000968 80 15            [24] 2162 	sjmp	00101$
      00096A                       2163 01256$:
      00096A BC 78 03         [24] 2164 	cjne	r4,#0x78,01257$
      00096D 02r0Er55         [24] 2165 	ljmp	00114$
      000970                       2166 01257$:
      000970 BC 7C 03         [24] 2167 	cjne	r4,#0x7c,01258$
      000973 02r22r93         [24] 2168 	ljmp	00209$
      000976                       2169 01258$:
      000976 BC 7E 03         [24] 2170 	cjne	r4,#0x7e,01259$
      000979 02r2ArB7         [24] 2171 	ljmp	00244$
      00097C                       2172 01259$:
      00097C 02r2Br90         [24] 2173 	ljmp	00248$
                                   2174 ;	calc.c:133: case 'v':
      00097F                       2175 00101$:
                                   2176 ;	calc.c:134: printstr("\r\n");
      00097F 7Fr17            [12] 2177 	mov	r7,#___str_3
      000981 7Es00            [12] 2178 	mov	r6,#(___str_3 >> 8)
      000983 7D 80            [12] 2179 	mov	r5,#0x80
                                   2180 ;	calc.c:51: return;
      000985                       2181 00353$:
                                   2182 ;	calc.c:49: for (; *s; s++) putchar(*s);
      000985 8F 82            [24] 2183 	mov	dpl,r7
      000987 8E 83            [24] 2184 	mov	dph,r6
      000989 8D F0            [24] 2185 	mov	b,r5
      00098B 12r00r00         [24] 2186 	lcall	__gptrget
      00098E FC               [12] 2187 	mov	r4,a
      00098F 60 10            [24] 2188 	jz	00251$
      000991 7B 00            [12] 2189 	mov	r3,#0x00
      000993 8C 82            [24] 2190 	mov	dpl,r4
      000995 8B 83            [24] 2191 	mov	dph,r3
      000997 12r00r00         [24] 2192 	lcall	_putchar
      00099A 0F               [12] 2193 	inc	r7
                                   2194 ;	calc.c:134: printstr("\r\n");
      00099B BF 00 E7         [24] 2195 	cjne	r7,#0x00,00353$
      00099E 0E               [12] 2196 	inc	r6
      00099F 80 E4            [24] 2197 	sjmp	00353$
      0009A1                       2198 00251$:
                                   2199 ;	calc.c:135: if (!stack_peek(ctx->ps, &d0)) printstr("stack underflow\r\n");
      0009A1 E5*00            [12] 2200 	mov	a,_bp
      0009A3 24 15            [12] 2201 	add	a,#0x15
      0009A5 FF               [12] 2202 	mov	r7,a
      0009A6 7E 00            [12] 2203 	mov	r6,#0x00
      0009A8 7D 40            [12] 2204 	mov	r5,#0x40
      0009AA E5*00            [12] 2205 	mov	a,_bp
      0009AC 24 12            [12] 2206 	add	a,#0x12
      0009AE F8               [12] 2207 	mov	r0,a
      0009AF 74 11            [12] 2208 	mov	a,#0x11
      0009B1 26               [12] 2209 	add	a,@r0
      0009B2 FA               [12] 2210 	mov	r2,a
      0009B3 ED               [12] 2211 	mov	a,r5
      0009B4 08               [12] 2212 	inc	r0
      0009B5 36               [12] 2213 	addc	a,@r0
      0009B6 FB               [12] 2214 	mov	r3,a
      0009B7 08               [12] 2215 	inc	r0
      0009B8 86 04            [24] 2216 	mov	ar4,@r0
      0009BA 8A 82            [24] 2217 	mov	dpl,r2
      0009BC 8B 83            [24] 2218 	mov	dph,r3
      0009BE 8C F0            [24] 2219 	mov	b,r4
      0009C0 12r00r00         [24] 2220 	lcall	__gptrget
      0009C3 FA               [12] 2221 	mov	r2,a
      0009C4 A3               [24] 2222 	inc	dptr
      0009C5 12r00r00         [24] 2223 	lcall	__gptrget
      0009C8 FB               [12] 2224 	mov	r3,a
      0009C9 A3               [24] 2225 	inc	dptr
      0009CA 12r00r00         [24] 2226 	lcall	__gptrget
      0009CD FC               [12] 2227 	mov	r4,a
      0009CE C0 07            [24] 2228 	push	ar7
      0009D0 C0 06            [24] 2229 	push	ar6
      0009D2 C0 05            [24] 2230 	push	ar5
      0009D4 8A 82            [24] 2231 	mov	dpl,r2
      0009D6 8B 83            [24] 2232 	mov	dph,r3
      0009D8 8C F0            [24] 2233 	mov	b,r4
      0009DA 12r00r00         [24] 2234 	lcall	_stack_peek
      0009DD AB 82            [24] 2235 	mov	r3,dpl
      0009DF AC 83            [24] 2236 	mov	r4,dph
      0009E1 15 81            [12] 2237 	dec	sp
      0009E3 15 81            [12] 2238 	dec	sp
      0009E5 15 81            [12] 2239 	dec	sp
      0009E7 EB               [12] 2240 	mov	a,r3
      0009E8 4C               [12] 2241 	orl	a,r4
      0009E9 70 25            [24] 2242 	jnz	00103$
      0009EB 7Fr1A            [12] 2243 	mov	r7,#___str_4
      0009ED 7Es00            [12] 2244 	mov	r6,#(___str_4 >> 8)
      0009EF 7D 80            [12] 2245 	mov	r5,#0x80
                                   2246 ;	calc.c:51: return;
      0009F1                       2247 00356$:
                                   2248 ;	calc.c:49: for (; *s; s++) putchar(*s);
      0009F1 8F 82            [24] 2249 	mov	dpl,r7
      0009F3 8E 83            [24] 2250 	mov	dph,r6
      0009F5 8D F0            [24] 2251 	mov	b,r5
      0009F7 12r00r00         [24] 2252 	lcall	__gptrget
      0009FA FC               [12] 2253 	mov	r4,a
      0009FB 70 03            [24] 2254 	jnz	01263$
      0009FD 02r2Br95         [24] 2255 	ljmp	00249$
      000A00                       2256 01263$:
      000A00 7B 00            [12] 2257 	mov	r3,#0x00
      000A02 8C 82            [24] 2258 	mov	dpl,r4
      000A04 8B 83            [24] 2259 	mov	dph,r3
      000A06 12r00r00         [24] 2260 	lcall	_putchar
      000A09 0F               [12] 2261 	inc	r7
                                   2262 ;	calc.c:135: if (!stack_peek(ctx->ps, &d0)) printstr("stack underflow\r\n");
      000A0A BF 00 E4         [24] 2263 	cjne	r7,#0x00,00356$
      000A0D 0E               [12] 2264 	inc	r6
      000A0E 80 E1            [24] 2265 	sjmp	00356$
      000A10                       2266 00103$:
                                   2267 ;	calc.c:137: printstr("PSVTOP\t");
      000A10 7Fr3E            [12] 2268 	mov	r7,#___str_8
      000A12 7Es00            [12] 2269 	mov	r6,#(___str_8 >> 8)
      000A14 7D 80            [12] 2270 	mov	r5,#0x80
                                   2271 ;	calc.c:51: return;
      000A16                       2272 00359$:
                                   2273 ;	calc.c:49: for (; *s; s++) putchar(*s);
      000A16 8F 82            [24] 2274 	mov	dpl,r7
      000A18 8E 83            [24] 2275 	mov	dph,r6
      000A1A 8D F0            [24] 2276 	mov	b,r5
      000A1C 12r00r00         [24] 2277 	lcall	__gptrget
      000A1F FC               [12] 2278 	mov	r4,a
      000A20 60 10            [24] 2279 	jz	00255$
      000A22 7B 00            [12] 2280 	mov	r3,#0x00
      000A24 8C 82            [24] 2281 	mov	dpl,r4
      000A26 8B 83            [24] 2282 	mov	dph,r3
      000A28 12r00r00         [24] 2283 	lcall	_putchar
      000A2B 0F               [12] 2284 	inc	r7
                                   2285 ;	calc.c:137: printstr("PSVTOP\t");
      000A2C BF 00 E7         [24] 2286 	cjne	r7,#0x00,00359$
      000A2F 0E               [12] 2287 	inc	r6
      000A30 80 E4            [24] 2288 	sjmp	00359$
      000A32                       2289 00255$:
                                   2290 ;	calc.c:138: printall(d0);
      000A32 E5*00            [12] 2291 	mov	a,_bp
      000A34 24 15            [12] 2292 	add	a,#0x15
      000A36 F8               [12] 2293 	mov	r0,a
      000A37 86 07            [24] 2294 	mov	ar7,@r0
      000A39 08               [12] 2295 	inc	r0
      000A3A 86 06            [24] 2296 	mov	ar6,@r0
      000A3C 08               [12] 2297 	inc	r0
      000A3D 86 05            [24] 2298 	mov	ar5,@r0
      000A3F 08               [12] 2299 	inc	r0
      000A40 86 04            [24] 2300 	mov	ar4,@r0
      000A42 E5*00            [12] 2301 	mov	a,_bp
      000A44 24 1D            [12] 2302 	add	a,#0x1d
      000A46 F8               [12] 2303 	mov	r0,a
      000A47 A6 07            [24] 2304 	mov	@r0,ar7
      000A49 08               [12] 2305 	inc	r0
      000A4A A6 06            [24] 2306 	mov	@r0,ar6
      000A4C 08               [12] 2307 	inc	r0
      000A4D A6 05            [24] 2308 	mov	@r0,ar5
      000A4F 08               [12] 2309 	inc	r0
      000A50 A6 04            [24] 2310 	mov	@r0,ar4
                                   2311 ;	calc.c:64: printf("%08lx\t", d);
      000A52 C0 07            [24] 2312 	push	ar7
      000A54 C0 06            [24] 2313 	push	ar6
      000A56 C0 05            [24] 2314 	push	ar5
      000A58 C0 04            [24] 2315 	push	ar4
      000A5A 74r00            [12] 2316 	mov	a,#___str_0
      000A5C C0 E0            [24] 2317 	push	acc
      000A5E 74s00            [12] 2318 	mov	a,#(___str_0 >> 8)
      000A60 C0 E0            [24] 2319 	push	acc
      000A62 74 80            [12] 2320 	mov	a,#0x80
      000A64 C0 E0            [24] 2321 	push	acc
      000A66 12r00r00         [24] 2322 	lcall	_printf
      000A69 E5 81            [12] 2323 	mov	a,sp
      000A6B 24 F9            [12] 2324 	add	a,#0xf9
      000A6D F5 81            [12] 2325 	mov	sp,a
                                   2326 ;	calc.c:65: printf("% 11ld\t", d);
      000A6F E5*00            [12] 2327 	mov	a,_bp
      000A71 24 1D            [12] 2328 	add	a,#0x1d
      000A73 F8               [12] 2329 	mov	r0,a
      000A74 E6               [12] 2330 	mov	a,@r0
      000A75 C0 E0            [24] 2331 	push	acc
      000A77 08               [12] 2332 	inc	r0
      000A78 E6               [12] 2333 	mov	a,@r0
      000A79 C0 E0            [24] 2334 	push	acc
      000A7B 08               [12] 2335 	inc	r0
      000A7C E6               [12] 2336 	mov	a,@r0
      000A7D C0 E0            [24] 2337 	push	acc
      000A7F 08               [12] 2338 	inc	r0
      000A80 E6               [12] 2339 	mov	a,@r0
      000A81 C0 E0            [24] 2340 	push	acc
      000A83 74r07            [12] 2341 	mov	a,#___str_1
      000A85 C0 E0            [24] 2342 	push	acc
      000A87 74s00            [12] 2343 	mov	a,#(___str_1 >> 8)
      000A89 C0 E0            [24] 2344 	push	acc
      000A8B 74 80            [12] 2345 	mov	a,#0x80
      000A8D C0 E0            [24] 2346 	push	acc
      000A8F 12r00r00         [24] 2347 	lcall	_printf
      000A92 E5 81            [12] 2348 	mov	a,sp
      000A94 24 F9            [12] 2349 	add	a,#0xf9
      000A96 F5 81            [12] 2350 	mov	sp,a
                                   2351 ;	calc.c:66: printf("%011lo\t", d);
      000A98 E5*00            [12] 2352 	mov	a,_bp
      000A9A 24 1D            [12] 2353 	add	a,#0x1d
      000A9C F8               [12] 2354 	mov	r0,a
      000A9D E6               [12] 2355 	mov	a,@r0
      000A9E C0 E0            [24] 2356 	push	acc
      000AA0 08               [12] 2357 	inc	r0
      000AA1 E6               [12] 2358 	mov	a,@r0
      000AA2 C0 E0            [24] 2359 	push	acc
      000AA4 08               [12] 2360 	inc	r0
      000AA5 E6               [12] 2361 	mov	a,@r0
      000AA6 C0 E0            [24] 2362 	push	acc
      000AA8 08               [12] 2363 	inc	r0
      000AA9 E6               [12] 2364 	mov	a,@r0
      000AAA C0 E0            [24] 2365 	push	acc
      000AAC 74r0F            [12] 2366 	mov	a,#___str_2
      000AAE C0 E0            [24] 2367 	push	acc
      000AB0 74s00            [12] 2368 	mov	a,#(___str_2 >> 8)
      000AB2 C0 E0            [24] 2369 	push	acc
      000AB4 74 80            [12] 2370 	mov	a,#0x80
      000AB6 C0 E0            [24] 2371 	push	acc
      000AB8 12r00r00         [24] 2372 	lcall	_printf
      000ABB E5 81            [12] 2373 	mov	a,sp
      000ABD 24 F9            [12] 2374 	add	a,#0xf9
      000ABF F5 81            [12] 2375 	mov	sp,a
                                   2376 ;	calc.c:67: printbin(d);
      000AC1 E5*00            [12] 2377 	mov	a,_bp
      000AC3 24 1D            [12] 2378 	add	a,#0x1d
      000AC5 F8               [12] 2379 	mov	r0,a
      000AC6 86 07            [24] 2380 	mov	ar7,@r0
      000AC8 08               [12] 2381 	inc	r0
      000AC9 86 06            [24] 2382 	mov	ar6,@r0
      000ACB 08               [12] 2383 	inc	r0
      000ACC 86 05            [24] 2384 	mov	ar5,@r0
      000ACE 08               [12] 2385 	inc	r0
      000ACF 86 02            [24] 2386 	mov	ar2,@r0
                                   2387 ;	calc.c:57: for (mask = 0x80000000lu; mask; mask >>= 1)
      000AD1 E5*00            [12] 2388 	mov	a,_bp
      000AD3 24 21            [12] 2389 	add	a,#0x21
      000AD5 F8               [12] 2390 	mov	r0,a
      000AD6 E4               [12] 2391 	clr	a
      000AD7 F6               [12] 2392 	mov	@r0,a
      000AD8 08               [12] 2393 	inc	r0
      000AD9 F6               [12] 2394 	mov	@r0,a
      000ADA 08               [12] 2395 	inc	r0
      000ADB F6               [12] 2396 	mov	@r0,a
      000ADC 08               [12] 2397 	inc	r0
      000ADD 76 80            [12] 2398 	mov	@r0,#0x80
      000ADF                       2399 00361$:
                                   2400 ;	calc.c:58: (void)putchar((d & mask) ? (int)'1' : (int)'0');
      000ADF E5*00            [12] 2401 	mov	a,_bp
      000AE1 24 07            [12] 2402 	add	a,#0x07
      000AE3 F8               [12] 2403 	mov	r0,a
      000AE4 A6 07            [24] 2404 	mov	@r0,ar7
      000AE6 08               [12] 2405 	inc	r0
      000AE7 A6 06            [24] 2406 	mov	@r0,ar6
      000AE9 08               [12] 2407 	inc	r0
      000AEA A6 05            [24] 2408 	mov	@r0,ar5
      000AEC 08               [12] 2409 	inc	r0
      000AED A6 02            [24] 2410 	mov	@r0,ar2
      000AEF E5*00            [12] 2411 	mov	a,_bp
      000AF1 24 07            [12] 2412 	add	a,#0x07
      000AF3 F8               [12] 2413 	mov	r0,a
      000AF4 E5*00            [12] 2414 	mov	a,_bp
      000AF6 24 21            [12] 2415 	add	a,#0x21
      000AF8 F9               [12] 2416 	mov	r1,a
      000AF9 E7               [12] 2417 	mov	a,@r1
      000AFA 56               [12] 2418 	anl	a,@r0
      000AFB F6               [12] 2419 	mov	@r0,a
      000AFC 09               [12] 2420 	inc	r1
      000AFD E7               [12] 2421 	mov	a,@r1
      000AFE 08               [12] 2422 	inc	r0
      000AFF 56               [12] 2423 	anl	a,@r0
      000B00 F6               [12] 2424 	mov	@r0,a
      000B01 09               [12] 2425 	inc	r1
      000B02 E7               [12] 2426 	mov	a,@r1
      000B03 08               [12] 2427 	inc	r0
      000B04 56               [12] 2428 	anl	a,@r0
      000B05 F6               [12] 2429 	mov	@r0,a
      000B06 09               [12] 2430 	inc	r1
      000B07 E7               [12] 2431 	mov	a,@r1
      000B08 08               [12] 2432 	inc	r0
      000B09 56               [12] 2433 	anl	a,@r0
      000B0A F6               [12] 2434 	mov	@r0,a
      000B0B E5*00            [12] 2435 	mov	a,_bp
      000B0D 24 07            [12] 2436 	add	a,#0x07
      000B0F F8               [12] 2437 	mov	r0,a
      000B10 E6               [12] 2438 	mov	a,@r0
      000B11 08               [12] 2439 	inc	r0
      000B12 46               [12] 2440 	orl	a,@r0
      000B13 08               [12] 2441 	inc	r0
      000B14 46               [12] 2442 	orl	a,@r0
      000B15 08               [12] 2443 	inc	r0
      000B16 46               [12] 2444 	orl	a,@r0
      000B17 60 06            [24] 2445 	jz	00502$
      000B19 7B 31            [12] 2446 	mov	r3,#0x31
      000B1B 7C 00            [12] 2447 	mov	r4,#0x00
      000B1D 80 04            [24] 2448 	sjmp	00503$
      000B1F                       2449 00502$:
      000B1F 7B 30            [12] 2450 	mov	r3,#0x30
      000B21 7C 00            [12] 2451 	mov	r4,#0x00
      000B23                       2452 00503$:
      000B23 8B 82            [24] 2453 	mov	dpl,r3
      000B25 8C 83            [24] 2454 	mov	dph,r4
      000B27 12r00r00         [24] 2455 	lcall	_putchar
                                   2456 ;	calc.c:57: for (mask = 0x80000000lu; mask; mask >>= 1)
      000B2A E5*00            [12] 2457 	mov	a,_bp
      000B2C 24 21            [12] 2458 	add	a,#0x21
      000B2E F8               [12] 2459 	mov	r0,a
      000B2F 08               [12] 2460 	inc	r0
      000B30 08               [12] 2461 	inc	r0
      000B31 08               [12] 2462 	inc	r0
      000B32 E6               [12] 2463 	mov	a,@r0
      000B33 C3               [12] 2464 	clr	c
      000B34 13               [12] 2465 	rrc	a
      000B35 F6               [12] 2466 	mov	@r0,a
      000B36 18               [12] 2467 	dec	r0
      000B37 E6               [12] 2468 	mov	a,@r0
      000B38 13               [12] 2469 	rrc	a
      000B39 F6               [12] 2470 	mov	@r0,a
      000B3A 18               [12] 2471 	dec	r0
      000B3B E6               [12] 2472 	mov	a,@r0
      000B3C 13               [12] 2473 	rrc	a
      000B3D F6               [12] 2474 	mov	@r0,a
      000B3E 18               [12] 2475 	dec	r0
      000B3F E6               [12] 2476 	mov	a,@r0
      000B40 13               [12] 2477 	rrc	a
      000B41 F6               [12] 2478 	mov	@r0,a
      000B42 E5*00            [12] 2479 	mov	a,_bp
      000B44 24 21            [12] 2480 	add	a,#0x21
      000B46 F8               [12] 2481 	mov	r0,a
      000B47 E6               [12] 2482 	mov	a,@r0
      000B48 08               [12] 2483 	inc	r0
      000B49 46               [12] 2484 	orl	a,@r0
      000B4A 08               [12] 2485 	inc	r0
      000B4B 46               [12] 2486 	orl	a,@r0
      000B4C 08               [12] 2487 	inc	r0
      000B4D 46               [12] 2488 	orl	a,@r0
      000B4E 70 8F            [24] 2489 	jnz	00361$
                                   2490 ;	calc.c:139: printstr("\r\n");
      000B50 7Fr17            [12] 2491 	mov	r7,#___str_3
      000B52 7Es00            [12] 2492 	mov	r6,#(___str_3 >> 8)
      000B54 7D 80            [12] 2493 	mov	r5,#0x80
                                   2494 ;	calc.c:51: return;
      000B56                       2495 00364$:
                                   2496 ;	calc.c:49: for (; *s; s++) putchar(*s);
      000B56 8F 82            [24] 2497 	mov	dpl,r7
      000B58 8E 83            [24] 2498 	mov	dph,r6
      000B5A 8D F0            [24] 2499 	mov	b,r5
      000B5C 12r00r00         [24] 2500 	lcall	__gptrget
      000B5F FC               [12] 2501 	mov	r4,a
      000B60 70 03            [24] 2502 	jnz	01269$
      000B62 02r2Br95         [24] 2503 	ljmp	00249$
      000B65                       2504 01269$:
      000B65 7B 00            [12] 2505 	mov	r3,#0x00
      000B67 8C 82            [24] 2506 	mov	dpl,r4
      000B69 8B 83            [24] 2507 	mov	dph,r3
      000B6B 12r00r00         [24] 2508 	lcall	_putchar
      000B6E 0F               [12] 2509 	inc	r7
                                   2510 ;	calc.c:142: case 'V':
      000B6F BF 00 E4         [24] 2511 	cjne	r7,#0x00,00364$
      000B72 0E               [12] 2512 	inc	r6
      000B73 80 E1            [24] 2513 	sjmp	00364$
      000B75                       2514 00105$:
                                   2515 ;	calc.c:143: printstr("\r\n");
      000B75 7Fr17            [12] 2516 	mov	r7,#___str_3
      000B77 7Es00            [12] 2517 	mov	r6,#(___str_3 >> 8)
      000B79 7D 80            [12] 2518 	mov	r5,#0x80
                                   2519 ;	calc.c:51: return;
      000B7B                       2520 00367$:
                                   2521 ;	calc.c:49: for (; *s; s++) putchar(*s);
      000B7B 8F 82            [24] 2522 	mov	dpl,r7
      000B7D 8E 83            [24] 2523 	mov	dph,r6
      000B7F 8D F0            [24] 2524 	mov	b,r5
      000B81 12r00r00         [24] 2525 	lcall	__gptrget
      000B84 FC               [12] 2526 	mov	r4,a
      000B85 60 10            [24] 2527 	jz	00262$
      000B87 7B 00            [12] 2528 	mov	r3,#0x00
      000B89 8C 82            [24] 2529 	mov	dpl,r4
      000B8B 8B 83            [24] 2530 	mov	dph,r3
      000B8D 12r00r00         [24] 2531 	lcall	_putchar
      000B90 0F               [12] 2532 	inc	r7
                                   2533 ;	calc.c:143: printstr("\r\n");
      000B91 BF 00 E7         [24] 2534 	cjne	r7,#0x00,00367$
      000B94 0E               [12] 2535 	inc	r6
      000B95 80 E4            [24] 2536 	sjmp	00367$
      000B97                       2537 00262$:
                                   2538 ;	calc.c:144: if (!stack_iter_peek(ctx->ps, dump_peek, ctx)) printstr("stack underflow\r\n");
      000B97 E5*00            [12] 2539 	mov	a,_bp
      000B99 24 12            [12] 2540 	add	a,#0x12
      000B9B F8               [12] 2541 	mov	r0,a
      000B9C 86 07            [24] 2542 	mov	ar7,@r0
      000B9E 08               [12] 2543 	inc	r0
      000B9F 86 06            [24] 2544 	mov	ar6,@r0
      000BA1 08               [12] 2545 	inc	r0
      000BA2 86 05            [24] 2546 	mov	ar5,@r0
      000BA4 E5*00            [12] 2547 	mov	a,_bp
      000BA6 24 12            [12] 2548 	add	a,#0x12
      000BA8 F8               [12] 2549 	mov	r0,a
      000BA9 74 11            [12] 2550 	mov	a,#0x11
      000BAB 26               [12] 2551 	add	a,@r0
      000BAC FA               [12] 2552 	mov	r2,a
      000BAD 74 40            [12] 2553 	mov	a,#0x40
      000BAF 08               [12] 2554 	inc	r0
      000BB0 36               [12] 2555 	addc	a,@r0
      000BB1 FB               [12] 2556 	mov	r3,a
      000BB2 08               [12] 2557 	inc	r0
      000BB3 86 04            [24] 2558 	mov	ar4,@r0
      000BB5 8A 82            [24] 2559 	mov	dpl,r2
      000BB7 8B 83            [24] 2560 	mov	dph,r3
      000BB9 8C F0            [24] 2561 	mov	b,r4
      000BBB 12r00r00         [24] 2562 	lcall	__gptrget
      000BBE FA               [12] 2563 	mov	r2,a
      000BBF A3               [24] 2564 	inc	dptr
      000BC0 12r00r00         [24] 2565 	lcall	__gptrget
      000BC3 FB               [12] 2566 	mov	r3,a
      000BC4 A3               [24] 2567 	inc	dptr
      000BC5 12r00r00         [24] 2568 	lcall	__gptrget
      000BC8 FC               [12] 2569 	mov	r4,a
      000BC9 C0 07            [24] 2570 	push	ar7
      000BCB C0 06            [24] 2571 	push	ar6
      000BCD C0 05            [24] 2572 	push	ar5
      000BCF 74r3B            [12] 2573 	mov	a,#_dump_peek
      000BD1 C0 E0            [24] 2574 	push	acc
      000BD3 74s07            [12] 2575 	mov	a,#(_dump_peek >> 8)
      000BD5 C0 E0            [24] 2576 	push	acc
      000BD7 8A 82            [24] 2577 	mov	dpl,r2
      000BD9 8B 83            [24] 2578 	mov	dph,r3
      000BDB 8C F0            [24] 2579 	mov	b,r4
      000BDD 12r00r00         [24] 2580 	lcall	_stack_iter_peek
      000BE0 AB 82            [24] 2581 	mov	r3,dpl
      000BE2 AC 83            [24] 2582 	mov	r4,dph
      000BE4 E5 81            [12] 2583 	mov	a,sp
      000BE6 24 FB            [12] 2584 	add	a,#0xfb
      000BE8 F5 81            [12] 2585 	mov	sp,a
      000BEA EB               [12] 2586 	mov	a,r3
      000BEB 4C               [12] 2587 	orl	a,r4
      000BEC 60 03            [24] 2588 	jz	01273$
      000BEE 02r2Br95         [24] 2589 	ljmp	00249$
      000BF1                       2590 01273$:
      000BF1 7Fr1A            [12] 2591 	mov	r7,#___str_4
      000BF3 7Es00            [12] 2592 	mov	r6,#(___str_4 >> 8)
      000BF5 7D 80            [12] 2593 	mov	r5,#0x80
                                   2594 ;	calc.c:51: return;
      000BF7                       2595 00370$:
                                   2596 ;	calc.c:49: for (; *s; s++) putchar(*s);
      000BF7 8F 82            [24] 2597 	mov	dpl,r7
      000BF9 8E 83            [24] 2598 	mov	dph,r6
      000BFB 8D F0            [24] 2599 	mov	b,r5
      000BFD 12r00r00         [24] 2600 	lcall	__gptrget
      000C00 FC               [12] 2601 	mov	r4,a
      000C01 70 03            [24] 2602 	jnz	01274$
      000C03 02r2Br95         [24] 2603 	ljmp	00249$
      000C06                       2604 01274$:
      000C06 7B 00            [12] 2605 	mov	r3,#0x00
      000C08 8C 82            [24] 2606 	mov	dpl,r4
      000C0A 8B 83            [24] 2607 	mov	dph,r3
      000C0C 12r00r00         [24] 2608 	lcall	_putchar
      000C0F 0F               [12] 2609 	inc	r7
                                   2610 ;	calc.c:147: case 'p':
      000C10 BF 00 E4         [24] 2611 	cjne	r7,#0x00,00370$
      000C13 0E               [12] 2612 	inc	r6
      000C14 80 E1            [24] 2613 	sjmp	00370$
      000C16                       2614 00109$:
                                   2615 ;	calc.c:148: printstr("\r\n");
      000C16 7Fr17            [12] 2616 	mov	r7,#___str_3
      000C18 7Es00            [12] 2617 	mov	r6,#(___str_3 >> 8)
      000C1A 7D 80            [12] 2618 	mov	r5,#0x80
                                   2619 ;	calc.c:51: return;
      000C1C                       2620 00373$:
                                   2621 ;	calc.c:49: for (; *s; s++) putchar(*s);
      000C1C 8F 82            [24] 2622 	mov	dpl,r7
      000C1E 8E 83            [24] 2623 	mov	dph,r6
      000C20 8D F0            [24] 2624 	mov	b,r5
      000C22 12r00r00         [24] 2625 	lcall	__gptrget
      000C25 FC               [12] 2626 	mov	r4,a
      000C26 60 10            [24] 2627 	jz	00266$
      000C28 7B 00            [12] 2628 	mov	r3,#0x00
      000C2A 8C 82            [24] 2629 	mov	dpl,r4
      000C2C 8B 83            [24] 2630 	mov	dph,r3
      000C2E 12r00r00         [24] 2631 	lcall	_putchar
      000C31 0F               [12] 2632 	inc	r7
                                   2633 ;	calc.c:148: printstr("\r\n");
      000C32 BF 00 E7         [24] 2634 	cjne	r7,#0x00,00373$
      000C35 0E               [12] 2635 	inc	r6
      000C36 80 E4            [24] 2636 	sjmp	00373$
      000C38                       2637 00266$:
                                   2638 ;	calc.c:149: if (!stack_pop(ctx->ps, &d0)) printstr("stack underflow\r\n");
      000C38 E5*00            [12] 2639 	mov	a,_bp
      000C3A 24 15            [12] 2640 	add	a,#0x15
      000C3C FF               [12] 2641 	mov	r7,a
      000C3D 7E 00            [12] 2642 	mov	r6,#0x00
      000C3F 7D 40            [12] 2643 	mov	r5,#0x40
      000C41 E5*00            [12] 2644 	mov	a,_bp
      000C43 24 12            [12] 2645 	add	a,#0x12
      000C45 F8               [12] 2646 	mov	r0,a
      000C46 74 11            [12] 2647 	mov	a,#0x11
      000C48 26               [12] 2648 	add	a,@r0
      000C49 FA               [12] 2649 	mov	r2,a
      000C4A ED               [12] 2650 	mov	a,r5
      000C4B 08               [12] 2651 	inc	r0
      000C4C 36               [12] 2652 	addc	a,@r0
      000C4D FB               [12] 2653 	mov	r3,a
      000C4E 08               [12] 2654 	inc	r0
      000C4F 86 04            [24] 2655 	mov	ar4,@r0
      000C51 8A 82            [24] 2656 	mov	dpl,r2
      000C53 8B 83            [24] 2657 	mov	dph,r3
      000C55 8C F0            [24] 2658 	mov	b,r4
      000C57 12r00r00         [24] 2659 	lcall	__gptrget
      000C5A FA               [12] 2660 	mov	r2,a
      000C5B A3               [24] 2661 	inc	dptr
      000C5C 12r00r00         [24] 2662 	lcall	__gptrget
      000C5F FB               [12] 2663 	mov	r3,a
      000C60 A3               [24] 2664 	inc	dptr
      000C61 12r00r00         [24] 2665 	lcall	__gptrget
      000C64 FC               [12] 2666 	mov	r4,a
      000C65 C0 07            [24] 2667 	push	ar7
      000C67 C0 06            [24] 2668 	push	ar6
      000C69 C0 05            [24] 2669 	push	ar5
      000C6B 8A 82            [24] 2670 	mov	dpl,r2
      000C6D 8B 83            [24] 2671 	mov	dph,r3
      000C6F 8C F0            [24] 2672 	mov	b,r4
      000C71 12r00r00         [24] 2673 	lcall	_stack_pop
      000C74 AB 82            [24] 2674 	mov	r3,dpl
      000C76 AC 83            [24] 2675 	mov	r4,dph
      000C78 15 81            [12] 2676 	dec	sp
      000C7A 15 81            [12] 2677 	dec	sp
      000C7C 15 81            [12] 2678 	dec	sp
      000C7E EB               [12] 2679 	mov	a,r3
      000C7F 4C               [12] 2680 	orl	a,r4
      000C80 70 25            [24] 2681 	jnz	00111$
      000C82 7Fr1A            [12] 2682 	mov	r7,#___str_4
      000C84 7Es00            [12] 2683 	mov	r6,#(___str_4 >> 8)
      000C86 7D 80            [12] 2684 	mov	r5,#0x80
                                   2685 ;	calc.c:51: return;
      000C88                       2686 00376$:
                                   2687 ;	calc.c:49: for (; *s; s++) putchar(*s);
      000C88 8F 82            [24] 2688 	mov	dpl,r7
      000C8A 8E 83            [24] 2689 	mov	dph,r6
      000C8C 8D F0            [24] 2690 	mov	b,r5
      000C8E 12r00r00         [24] 2691 	lcall	__gptrget
      000C91 FC               [12] 2692 	mov	r4,a
      000C92 70 03            [24] 2693 	jnz	01279$
      000C94 02r2Br95         [24] 2694 	ljmp	00249$
      000C97                       2695 01279$:
      000C97 7B 00            [12] 2696 	mov	r3,#0x00
      000C99 8C 82            [24] 2697 	mov	dpl,r4
      000C9B 8B 83            [24] 2698 	mov	dph,r3
      000C9D 12r00r00         [24] 2699 	lcall	_putchar
      000CA0 0F               [12] 2700 	inc	r7
                                   2701 ;	calc.c:149: if (!stack_pop(ctx->ps, &d0)) printstr("stack underflow\r\n");
      000CA1 BF 00 E4         [24] 2702 	cjne	r7,#0x00,00376$
      000CA4 0E               [12] 2703 	inc	r6
      000CA5 80 E1            [24] 2704 	sjmp	00376$
      000CA7                       2705 00111$:
                                   2706 ;	calc.c:151: printstr("PSPTOP\t");
      000CA7 7Fr46            [12] 2707 	mov	r7,#___str_9
      000CA9 7Es00            [12] 2708 	mov	r6,#(___str_9 >> 8)
      000CAB 7D 80            [12] 2709 	mov	r5,#0x80
                                   2710 ;	calc.c:51: return;
      000CAD                       2711 00379$:
                                   2712 ;	calc.c:49: for (; *s; s++) putchar(*s);
      000CAD 8F 82            [24] 2713 	mov	dpl,r7
      000CAF 8E 83            [24] 2714 	mov	dph,r6
      000CB1 8D F0            [24] 2715 	mov	b,r5
      000CB3 12r00r00         [24] 2716 	lcall	__gptrget
      000CB6 FC               [12] 2717 	mov	r4,a
      000CB7 60 10            [24] 2718 	jz	00270$
      000CB9 7B 00            [12] 2719 	mov	r3,#0x00
      000CBB 8C 82            [24] 2720 	mov	dpl,r4
      000CBD 8B 83            [24] 2721 	mov	dph,r3
      000CBF 12r00r00         [24] 2722 	lcall	_putchar
      000CC2 0F               [12] 2723 	inc	r7
                                   2724 ;	calc.c:151: printstr("PSPTOP\t");
      000CC3 BF 00 E7         [24] 2725 	cjne	r7,#0x00,00379$
      000CC6 0E               [12] 2726 	inc	r6
      000CC7 80 E4            [24] 2727 	sjmp	00379$
      000CC9                       2728 00270$:
                                   2729 ;	calc.c:152: printall(d0);
      000CC9 E5*00            [12] 2730 	mov	a,_bp
      000CCB 24 15            [12] 2731 	add	a,#0x15
      000CCD F8               [12] 2732 	mov	r0,a
      000CCE 86 07            [24] 2733 	mov	ar7,@r0
      000CD0 08               [12] 2734 	inc	r0
      000CD1 86 06            [24] 2735 	mov	ar6,@r0
      000CD3 08               [12] 2736 	inc	r0
      000CD4 86 05            [24] 2737 	mov	ar5,@r0
      000CD6 08               [12] 2738 	inc	r0
      000CD7 86 04            [24] 2739 	mov	ar4,@r0
      000CD9 E5*00            [12] 2740 	mov	a,_bp
      000CDB 24 1D            [12] 2741 	add	a,#0x1d
      000CDD F8               [12] 2742 	mov	r0,a
      000CDE A6 07            [24] 2743 	mov	@r0,ar7
      000CE0 08               [12] 2744 	inc	r0
      000CE1 A6 06            [24] 2745 	mov	@r0,ar6
      000CE3 08               [12] 2746 	inc	r0
      000CE4 A6 05            [24] 2747 	mov	@r0,ar5
      000CE6 08               [12] 2748 	inc	r0
      000CE7 A6 04            [24] 2749 	mov	@r0,ar4
                                   2750 ;	calc.c:64: printf("%08lx\t", d);
      000CE9 C0 07            [24] 2751 	push	ar7
      000CEB C0 06            [24] 2752 	push	ar6
      000CED C0 05            [24] 2753 	push	ar5
      000CEF C0 04            [24] 2754 	push	ar4
      000CF1 74r00            [12] 2755 	mov	a,#___str_0
      000CF3 C0 E0            [24] 2756 	push	acc
      000CF5 74s00            [12] 2757 	mov	a,#(___str_0 >> 8)
      000CF7 C0 E0            [24] 2758 	push	acc
      000CF9 74 80            [12] 2759 	mov	a,#0x80
      000CFB C0 E0            [24] 2760 	push	acc
      000CFD 12r00r00         [24] 2761 	lcall	_printf
      000D00 E5 81            [12] 2762 	mov	a,sp
      000D02 24 F9            [12] 2763 	add	a,#0xf9
      000D04 F5 81            [12] 2764 	mov	sp,a
                                   2765 ;	calc.c:65: printf("% 11ld\t", d);
      000D06 E5*00            [12] 2766 	mov	a,_bp
      000D08 24 1D            [12] 2767 	add	a,#0x1d
      000D0A F8               [12] 2768 	mov	r0,a
      000D0B E6               [12] 2769 	mov	a,@r0
      000D0C C0 E0            [24] 2770 	push	acc
      000D0E 08               [12] 2771 	inc	r0
      000D0F E6               [12] 2772 	mov	a,@r0
      000D10 C0 E0            [24] 2773 	push	acc
      000D12 08               [12] 2774 	inc	r0
      000D13 E6               [12] 2775 	mov	a,@r0
      000D14 C0 E0            [24] 2776 	push	acc
      000D16 08               [12] 2777 	inc	r0
      000D17 E6               [12] 2778 	mov	a,@r0
      000D18 C0 E0            [24] 2779 	push	acc
      000D1A 74r07            [12] 2780 	mov	a,#___str_1
      000D1C C0 E0            [24] 2781 	push	acc
      000D1E 74s00            [12] 2782 	mov	a,#(___str_1 >> 8)
      000D20 C0 E0            [24] 2783 	push	acc
      000D22 74 80            [12] 2784 	mov	a,#0x80
      000D24 C0 E0            [24] 2785 	push	acc
      000D26 12r00r00         [24] 2786 	lcall	_printf
      000D29 E5 81            [12] 2787 	mov	a,sp
      000D2B 24 F9            [12] 2788 	add	a,#0xf9
      000D2D F5 81            [12] 2789 	mov	sp,a
                                   2790 ;	calc.c:66: printf("%011lo\t", d);
      000D2F E5*00            [12] 2791 	mov	a,_bp
      000D31 24 1D            [12] 2792 	add	a,#0x1d
      000D33 F8               [12] 2793 	mov	r0,a
      000D34 E6               [12] 2794 	mov	a,@r0
      000D35 C0 E0            [24] 2795 	push	acc
      000D37 08               [12] 2796 	inc	r0
      000D38 E6               [12] 2797 	mov	a,@r0
      000D39 C0 E0            [24] 2798 	push	acc
      000D3B 08               [12] 2799 	inc	r0
      000D3C E6               [12] 2800 	mov	a,@r0
      000D3D C0 E0            [24] 2801 	push	acc
      000D3F 08               [12] 2802 	inc	r0
      000D40 E6               [12] 2803 	mov	a,@r0
      000D41 C0 E0            [24] 2804 	push	acc
      000D43 74r0F            [12] 2805 	mov	a,#___str_2
      000D45 C0 E0            [24] 2806 	push	acc
      000D47 74s00            [12] 2807 	mov	a,#(___str_2 >> 8)
      000D49 C0 E0            [24] 2808 	push	acc
      000D4B 74 80            [12] 2809 	mov	a,#0x80
      000D4D C0 E0            [24] 2810 	push	acc
      000D4F 12r00r00         [24] 2811 	lcall	_printf
      000D52 E5 81            [12] 2812 	mov	a,sp
      000D54 24 F9            [12] 2813 	add	a,#0xf9
      000D56 F5 81            [12] 2814 	mov	sp,a
                                   2815 ;	calc.c:67: printbin(d);
      000D58 E5*00            [12] 2816 	mov	a,_bp
      000D5A 24 1D            [12] 2817 	add	a,#0x1d
      000D5C F8               [12] 2818 	mov	r0,a
      000D5D 86 07            [24] 2819 	mov	ar7,@r0
      000D5F 08               [12] 2820 	inc	r0
      000D60 86 06            [24] 2821 	mov	ar6,@r0
      000D62 08               [12] 2822 	inc	r0
      000D63 86 05            [24] 2823 	mov	ar5,@r0
      000D65 08               [12] 2824 	inc	r0
      000D66 86 02            [24] 2825 	mov	ar2,@r0
                                   2826 ;	calc.c:57: for (mask = 0x80000000lu; mask; mask >>= 1)
      000D68 E5*00            [12] 2827 	mov	a,_bp
      000D6A 24 21            [12] 2828 	add	a,#0x21
      000D6C F8               [12] 2829 	mov	r0,a
      000D6D E4               [12] 2830 	clr	a
      000D6E F6               [12] 2831 	mov	@r0,a
      000D6F 08               [12] 2832 	inc	r0
      000D70 F6               [12] 2833 	mov	@r0,a
      000D71 08               [12] 2834 	inc	r0
      000D72 F6               [12] 2835 	mov	@r0,a
      000D73 08               [12] 2836 	inc	r0
      000D74 76 80            [12] 2837 	mov	@r0,#0x80
      000D76                       2838 00381$:
                                   2839 ;	calc.c:58: (void)putchar((d & mask) ? (int)'1' : (int)'0');
      000D76 E5*00            [12] 2840 	mov	a,_bp
      000D78 24 07            [12] 2841 	add	a,#0x07
      000D7A F8               [12] 2842 	mov	r0,a
      000D7B A6 07            [24] 2843 	mov	@r0,ar7
      000D7D 08               [12] 2844 	inc	r0
      000D7E A6 06            [24] 2845 	mov	@r0,ar6
      000D80 08               [12] 2846 	inc	r0
      000D81 A6 05            [24] 2847 	mov	@r0,ar5
      000D83 08               [12] 2848 	inc	r0
      000D84 A6 02            [24] 2849 	mov	@r0,ar2
      000D86 E5*00            [12] 2850 	mov	a,_bp
      000D88 24 07            [12] 2851 	add	a,#0x07
      000D8A F8               [12] 2852 	mov	r0,a
      000D8B E5*00            [12] 2853 	mov	a,_bp
      000D8D 24 21            [12] 2854 	add	a,#0x21
      000D8F F9               [12] 2855 	mov	r1,a
      000D90 E7               [12] 2856 	mov	a,@r1
      000D91 56               [12] 2857 	anl	a,@r0
      000D92 F6               [12] 2858 	mov	@r0,a
      000D93 09               [12] 2859 	inc	r1
      000D94 E7               [12] 2860 	mov	a,@r1
      000D95 08               [12] 2861 	inc	r0
      000D96 56               [12] 2862 	anl	a,@r0
      000D97 F6               [12] 2863 	mov	@r0,a
      000D98 09               [12] 2864 	inc	r1
      000D99 E7               [12] 2865 	mov	a,@r1
      000D9A 08               [12] 2866 	inc	r0
      000D9B 56               [12] 2867 	anl	a,@r0
      000D9C F6               [12] 2868 	mov	@r0,a
      000D9D 09               [12] 2869 	inc	r1
      000D9E E7               [12] 2870 	mov	a,@r1
      000D9F 08               [12] 2871 	inc	r0
      000DA0 56               [12] 2872 	anl	a,@r0
      000DA1 F6               [12] 2873 	mov	@r0,a
      000DA2 E5*00            [12] 2874 	mov	a,_bp
      000DA4 24 07            [12] 2875 	add	a,#0x07
      000DA6 F8               [12] 2876 	mov	r0,a
      000DA7 E6               [12] 2877 	mov	a,@r0
      000DA8 08               [12] 2878 	inc	r0
      000DA9 46               [12] 2879 	orl	a,@r0
      000DAA 08               [12] 2880 	inc	r0
      000DAB 46               [12] 2881 	orl	a,@r0
      000DAC 08               [12] 2882 	inc	r0
      000DAD 46               [12] 2883 	orl	a,@r0
      000DAE 60 06            [24] 2884 	jz	00504$
      000DB0 7B 31            [12] 2885 	mov	r3,#0x31
      000DB2 7C 00            [12] 2886 	mov	r4,#0x00
      000DB4 80 04            [24] 2887 	sjmp	00505$
      000DB6                       2888 00504$:
      000DB6 7B 30            [12] 2889 	mov	r3,#0x30
      000DB8 7C 00            [12] 2890 	mov	r4,#0x00
      000DBA                       2891 00505$:
      000DBA 8B 82            [24] 2892 	mov	dpl,r3
      000DBC 8C 83            [24] 2893 	mov	dph,r4
      000DBE 12r00r00         [24] 2894 	lcall	_putchar
                                   2895 ;	calc.c:57: for (mask = 0x80000000lu; mask; mask >>= 1)
      000DC1 E5*00            [12] 2896 	mov	a,_bp
      000DC3 24 21            [12] 2897 	add	a,#0x21
      000DC5 F8               [12] 2898 	mov	r0,a
      000DC6 08               [12] 2899 	inc	r0
      000DC7 08               [12] 2900 	inc	r0
      000DC8 08               [12] 2901 	inc	r0
      000DC9 E6               [12] 2902 	mov	a,@r0
      000DCA C3               [12] 2903 	clr	c
      000DCB 13               [12] 2904 	rrc	a
      000DCC F6               [12] 2905 	mov	@r0,a
      000DCD 18               [12] 2906 	dec	r0
      000DCE E6               [12] 2907 	mov	a,@r0
      000DCF 13               [12] 2908 	rrc	a
      000DD0 F6               [12] 2909 	mov	@r0,a
      000DD1 18               [12] 2910 	dec	r0
      000DD2 E6               [12] 2911 	mov	a,@r0
      000DD3 13               [12] 2912 	rrc	a
      000DD4 F6               [12] 2913 	mov	@r0,a
      000DD5 18               [12] 2914 	dec	r0
      000DD6 E6               [12] 2915 	mov	a,@r0
      000DD7 13               [12] 2916 	rrc	a
      000DD8 F6               [12] 2917 	mov	@r0,a
      000DD9 E5*00            [12] 2918 	mov	a,_bp
      000DDB 24 21            [12] 2919 	add	a,#0x21
      000DDD F8               [12] 2920 	mov	r0,a
      000DDE E6               [12] 2921 	mov	a,@r0
      000DDF 08               [12] 2922 	inc	r0
      000DE0 46               [12] 2923 	orl	a,@r0
      000DE1 08               [12] 2924 	inc	r0
      000DE2 46               [12] 2925 	orl	a,@r0
      000DE3 08               [12] 2926 	inc	r0
      000DE4 46               [12] 2927 	orl	a,@r0
      000DE5 70 8F            [24] 2928 	jnz	00381$
                                   2929 ;	calc.c:153: printstr("\r\n");
      000DE7 7Fr17            [12] 2930 	mov	r7,#___str_3
      000DE9 7Es00            [12] 2931 	mov	r6,#(___str_3 >> 8)
      000DEB 7D 80            [12] 2932 	mov	r5,#0x80
                                   2933 ;	calc.c:51: return;
      000DED                       2934 00384$:
                                   2935 ;	calc.c:49: for (; *s; s++) putchar(*s);
      000DED 8F 82            [24] 2936 	mov	dpl,r7
      000DEF 8E 83            [24] 2937 	mov	dph,r6
      000DF1 8D F0            [24] 2938 	mov	b,r5
      000DF3 12r00r00         [24] 2939 	lcall	__gptrget
      000DF6 FC               [12] 2940 	mov	r4,a
      000DF7 70 03            [24] 2941 	jnz	01285$
      000DF9 02r2Br95         [24] 2942 	ljmp	00249$
      000DFC                       2943 01285$:
      000DFC 7B 00            [12] 2944 	mov	r3,#0x00
      000DFE 8C 82            [24] 2945 	mov	dpl,r4
      000E00 8B 83            [24] 2946 	mov	dph,r3
      000E02 12r00r00         [24] 2947 	lcall	_putchar
      000E05 0F               [12] 2948 	inc	r7
                                   2949 ;	calc.c:156: case 'P':
      000E06 BF 00 E4         [24] 2950 	cjne	r7,#0x00,00384$
      000E09 0E               [12] 2951 	inc	r6
      000E0A 80 E1            [24] 2952 	sjmp	00384$
      000E0C                       2953 00113$:
                                   2954 ;	calc.c:157: printstr("\r\n");
      000E0C 7Fr17            [12] 2955 	mov	r7,#___str_3
      000E0E 7Es00            [12] 2956 	mov	r6,#(___str_3 >> 8)
      000E10 7D 80            [12] 2957 	mov	r5,#0x80
                                   2958 ;	calc.c:51: return;
      000E12                       2959 00387$:
                                   2960 ;	calc.c:49: for (; *s; s++) putchar(*s);
      000E12 8F 82            [24] 2961 	mov	dpl,r7
      000E14 8E 83            [24] 2962 	mov	dph,r6
      000E16 8D F0            [24] 2963 	mov	b,r5
      000E18 12r00r00         [24] 2964 	lcall	__gptrget
      000E1B FC               [12] 2965 	mov	r4,a
      000E1C 60 10            [24] 2966 	jz	00277$
      000E1E 7B 00            [12] 2967 	mov	r3,#0x00
      000E20 8C 82            [24] 2968 	mov	dpl,r4
      000E22 8B 83            [24] 2969 	mov	dph,r3
      000E24 12r00r00         [24] 2970 	lcall	_putchar
      000E27 0F               [12] 2971 	inc	r7
                                   2972 ;	calc.c:157: printstr("\r\n");
      000E28 BF 00 E7         [24] 2973 	cjne	r7,#0x00,00387$
      000E2B 0E               [12] 2974 	inc	r6
      000E2C 80 E4            [24] 2975 	sjmp	00387$
      000E2E                       2976 00277$:
                                   2977 ;	calc.c:158: (void)dump_pop(_ctx, delta);
      000E2E E5*00            [12] 2978 	mov	a,_bp
      000E30 24 FB            [12] 2979 	add	a,#0xfb
      000E32 F8               [12] 2980 	mov	r0,a
      000E33 E6               [12] 2981 	mov	a,@r0
      000E34 C0 E0            [24] 2982 	push	acc
      000E36 08               [12] 2983 	inc	r0
      000E37 E6               [12] 2984 	mov	a,@r0
      000E38 C0 E0            [24] 2985 	push	acc
      000E3A 08               [12] 2986 	inc	r0
      000E3B E6               [12] 2987 	mov	a,@r0
      000E3C C0 E0            [24] 2988 	push	acc
      000E3E A8*00            [24] 2989 	mov	r0,_bp
      000E40 08               [12] 2990 	inc	r0
      000E41 86 82            [24] 2991 	mov	dpl,@r0
      000E43 08               [12] 2992 	inc	r0
      000E44 86 83            [24] 2993 	mov	dph,@r0
      000E46 08               [12] 2994 	inc	r0
      000E47 86 F0            [24] 2995 	mov	b,@r0
      000E49 12r01r93         [24] 2996 	lcall	_dump_pop
      000E4C 15 81            [12] 2997 	dec	sp
      000E4E 15 81            [12] 2998 	dec	sp
      000E50 15 81            [12] 2999 	dec	sp
                                   3000 ;	calc.c:159: break;
      000E52 02r2Br95         [24] 3001 	ljmp	00249$
                                   3002 ;	calc.c:160: case 'x':
      000E55                       3003 00114$:
                                   3004 ;	calc.c:161: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      000E55 E5*00            [12] 3005 	mov	a,_bp
      000E57 24 15            [12] 3006 	add	a,#0x15
      000E59 FF               [12] 3007 	mov	r7,a
      000E5A 7E 00            [12] 3008 	mov	r6,#0x00
      000E5C 7D 40            [12] 3009 	mov	r5,#0x40
      000E5E E5*00            [12] 3010 	mov	a,_bp
      000E60 24 12            [12] 3011 	add	a,#0x12
      000E62 F8               [12] 3012 	mov	r0,a
      000E63 E5*00            [12] 3013 	mov	a,_bp
      000E65 24 07            [12] 3014 	add	a,#0x07
      000E67 F9               [12] 3015 	mov	r1,a
      000E68 74 11            [12] 3016 	mov	a,#0x11
      000E6A 26               [12] 3017 	add	a,@r0
      000E6B F7               [12] 3018 	mov	@r1,a
      000E6C 74 40            [12] 3019 	mov	a,#0x40
      000E6E 08               [12] 3020 	inc	r0
      000E6F 36               [12] 3021 	addc	a,@r0
      000E70 09               [12] 3022 	inc	r1
      000E71 F7               [12] 3023 	mov	@r1,a
      000E72 08               [12] 3024 	inc	r0
      000E73 09               [12] 3025 	inc	r1
      000E74 E6               [12] 3026 	mov	a,@r0
      000E75 F7               [12] 3027 	mov	@r1,a
      000E76 E5*00            [12] 3028 	mov	a,_bp
      000E78 24 07            [12] 3029 	add	a,#0x07
      000E7A F8               [12] 3030 	mov	r0,a
      000E7B 86 82            [24] 3031 	mov	dpl,@r0
      000E7D 08               [12] 3032 	inc	r0
      000E7E 86 83            [24] 3033 	mov	dph,@r0
      000E80 08               [12] 3034 	inc	r0
      000E81 86 F0            [24] 3035 	mov	b,@r0
      000E83 12r00r00         [24] 3036 	lcall	__gptrget
      000E86 FA               [12] 3037 	mov	r2,a
      000E87 A3               [24] 3038 	inc	dptr
      000E88 12r00r00         [24] 3039 	lcall	__gptrget
      000E8B FB               [12] 3040 	mov	r3,a
      000E8C A3               [24] 3041 	inc	dptr
      000E8D 12r00r00         [24] 3042 	lcall	__gptrget
      000E90 FC               [12] 3043 	mov	r4,a
      000E91 C0 07            [24] 3044 	push	ar7
      000E93 C0 06            [24] 3045 	push	ar6
      000E95 C0 05            [24] 3046 	push	ar5
      000E97 8A 82            [24] 3047 	mov	dpl,r2
      000E99 8B 83            [24] 3048 	mov	dph,r3
      000E9B 8C F0            [24] 3049 	mov	b,r4
      000E9D 12r00r00         [24] 3050 	lcall	_stack_pop
      000EA0 AB 82            [24] 3051 	mov	r3,dpl
      000EA2 AC 83            [24] 3052 	mov	r4,dph
      000EA4 15 81            [12] 3053 	dec	sp
      000EA6 15 81            [12] 3054 	dec	sp
      000EA8 15 81            [12] 3055 	dec	sp
      000EAA EB               [12] 3056 	mov	a,r3
      000EAB 4C               [12] 3057 	orl	a,r4
      000EAC 70 25            [24] 3058 	jnz	00119$
      000EAE 7Fr4E            [12] 3059 	mov	r7,#___str_10
      000EB0 7Es00            [12] 3060 	mov	r6,#(___str_10 >> 8)
      000EB2 7D 80            [12] 3061 	mov	r5,#0x80
                                   3062 ;	calc.c:51: return;
      000EB4                       3063 00390$:
                                   3064 ;	calc.c:49: for (; *s; s++) putchar(*s);
      000EB4 8F 82            [24] 3065 	mov	dpl,r7
      000EB6 8E 83            [24] 3066 	mov	dph,r6
      000EB8 8D F0            [24] 3067 	mov	b,r5
      000EBA 12r00r00         [24] 3068 	lcall	__gptrget
      000EBD FC               [12] 3069 	mov	r4,a
      000EBE 70 03            [24] 3070 	jnz	01290$
      000EC0 02r2Br95         [24] 3071 	ljmp	00249$
      000EC3                       3072 01290$:
      000EC3 7B 00            [12] 3073 	mov	r3,#0x00
      000EC5 8C 82            [24] 3074 	mov	dpl,r4
      000EC7 8B 83            [24] 3075 	mov	dph,r3
      000EC9 12r00r00         [24] 3076 	lcall	_putchar
      000ECC 0F               [12] 3077 	inc	r7
                                   3078 ;	calc.c:161: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      000ECD BF 00 E4         [24] 3079 	cjne	r7,#0x00,00390$
      000ED0 0E               [12] 3080 	inc	r6
      000ED1 80 E1            [24] 3081 	sjmp	00390$
      000ED3                       3082 00119$:
                                   3083 ;	calc.c:162: else if (!stack_pop(ctx->ps, &d1)) {
      000ED3 E5*00            [12] 3084 	mov	a,_bp
      000ED5 24 19            [12] 3085 	add	a,#0x19
      000ED7 FF               [12] 3086 	mov	r7,a
      000ED8 7E 00            [12] 3087 	mov	r6,#0x00
      000EDA 7D 40            [12] 3088 	mov	r5,#0x40
      000EDC E5*00            [12] 3089 	mov	a,_bp
      000EDE 24 07            [12] 3090 	add	a,#0x07
      000EE0 F8               [12] 3091 	mov	r0,a
      000EE1 86 82            [24] 3092 	mov	dpl,@r0
      000EE3 08               [12] 3093 	inc	r0
      000EE4 86 83            [24] 3094 	mov	dph,@r0
      000EE6 08               [12] 3095 	inc	r0
      000EE7 86 F0            [24] 3096 	mov	b,@r0
      000EE9 12r00r00         [24] 3097 	lcall	__gptrget
      000EEC FA               [12] 3098 	mov	r2,a
      000EED A3               [24] 3099 	inc	dptr
      000EEE 12r00r00         [24] 3100 	lcall	__gptrget
      000EF1 FB               [12] 3101 	mov	r3,a
      000EF2 A3               [24] 3102 	inc	dptr
      000EF3 12r00r00         [24] 3103 	lcall	__gptrget
      000EF6 FC               [12] 3104 	mov	r4,a
      000EF7 C0 07            [24] 3105 	push	ar7
      000EF9 C0 06            [24] 3106 	push	ar6
      000EFB C0 05            [24] 3107 	push	ar5
      000EFD 8A 82            [24] 3108 	mov	dpl,r2
      000EFF 8B 83            [24] 3109 	mov	dph,r3
      000F01 8C F0            [24] 3110 	mov	b,r4
      000F03 12r00r00         [24] 3111 	lcall	_stack_pop
      000F06 AB 82            [24] 3112 	mov	r3,dpl
      000F08 AC 83            [24] 3113 	mov	r4,dph
      000F0A 15 81            [12] 3114 	dec	sp
      000F0C 15 81            [12] 3115 	dec	sp
      000F0E 15 81            [12] 3116 	dec	sp
      000F10 EB               [12] 3117 	mov	a,r3
      000F11 4C               [12] 3118 	orl	a,r4
      000F12 70 63            [24] 3119 	jnz	00116$
                                   3120 ;	calc.c:163: (void)stack_push(ctx->ps, d0);
      000F14 E5*00            [12] 3121 	mov	a,_bp
      000F16 24 07            [12] 3122 	add	a,#0x07
      000F18 F8               [12] 3123 	mov	r0,a
      000F19 86 82            [24] 3124 	mov	dpl,@r0
      000F1B 08               [12] 3125 	inc	r0
      000F1C 86 83            [24] 3126 	mov	dph,@r0
      000F1E 08               [12] 3127 	inc	r0
      000F1F 86 F0            [24] 3128 	mov	b,@r0
      000F21 12r00r00         [24] 3129 	lcall	__gptrget
      000F24 FA               [12] 3130 	mov	r2,a
      000F25 A3               [24] 3131 	inc	dptr
      000F26 12r00r00         [24] 3132 	lcall	__gptrget
      000F29 FB               [12] 3133 	mov	r3,a
      000F2A A3               [24] 3134 	inc	dptr
      000F2B 12r00r00         [24] 3135 	lcall	__gptrget
      000F2E FC               [12] 3136 	mov	r4,a
      000F2F E5*00            [12] 3137 	mov	a,_bp
      000F31 24 15            [12] 3138 	add	a,#0x15
      000F33 F8               [12] 3139 	mov	r0,a
      000F34 E6               [12] 3140 	mov	a,@r0
      000F35 C0 E0            [24] 3141 	push	acc
      000F37 08               [12] 3142 	inc	r0
      000F38 E6               [12] 3143 	mov	a,@r0
      000F39 C0 E0            [24] 3144 	push	acc
      000F3B 08               [12] 3145 	inc	r0
      000F3C E6               [12] 3146 	mov	a,@r0
      000F3D C0 E0            [24] 3147 	push	acc
      000F3F 08               [12] 3148 	inc	r0
      000F40 E6               [12] 3149 	mov	a,@r0
      000F41 C0 E0            [24] 3150 	push	acc
      000F43 8A 82            [24] 3151 	mov	dpl,r2
      000F45 8B 83            [24] 3152 	mov	dph,r3
      000F47 8C F0            [24] 3153 	mov	b,r4
      000F49 12r00r00         [24] 3154 	lcall	_stack_push
      000F4C E5 81            [12] 3155 	mov	a,sp
      000F4E 24 FC            [12] 3156 	add	a,#0xfc
      000F50 F5 81            [12] 3157 	mov	sp,a
                                   3158 ;	calc.c:164: printstr("\r\nstack underflow\r\n");
      000F52 7Fr4E            [12] 3159 	mov	r7,#___str_10
      000F54 7Es00            [12] 3160 	mov	r6,#(___str_10 >> 8)
      000F56 7D 80            [12] 3161 	mov	r5,#0x80
                                   3162 ;	calc.c:51: return;
      000F58                       3163 00393$:
                                   3164 ;	calc.c:49: for (; *s; s++) putchar(*s);
      000F58 8F 82            [24] 3165 	mov	dpl,r7
      000F5A 8E 83            [24] 3166 	mov	dph,r6
      000F5C 8D F0            [24] 3167 	mov	b,r5
      000F5E 12r00r00         [24] 3168 	lcall	__gptrget
      000F61 FC               [12] 3169 	mov	r4,a
      000F62 70 03            [24] 3170 	jnz	01293$
      000F64 02r2Br95         [24] 3171 	ljmp	00249$
      000F67                       3172 01293$:
      000F67 7B 00            [12] 3173 	mov	r3,#0x00
      000F69 8C 82            [24] 3174 	mov	dpl,r4
      000F6B 8B 83            [24] 3175 	mov	dph,r3
      000F6D 12r00r00         [24] 3176 	lcall	_putchar
      000F70 0F               [12] 3177 	inc	r7
                                   3178 ;	calc.c:164: printstr("\r\nstack underflow\r\n");
      000F71 BF 00 E4         [24] 3179 	cjne	r7,#0x00,00393$
      000F74 0E               [12] 3180 	inc	r6
      000F75 80 E1            [24] 3181 	sjmp	00393$
      000F77                       3182 00116$:
                                   3183 ;	calc.c:166: (void)stack_push(ctx->ps, d0);
      000F77 E5*00            [12] 3184 	mov	a,_bp
      000F79 24 07            [12] 3185 	add	a,#0x07
      000F7B F8               [12] 3186 	mov	r0,a
      000F7C 86 82            [24] 3187 	mov	dpl,@r0
      000F7E 08               [12] 3188 	inc	r0
      000F7F 86 83            [24] 3189 	mov	dph,@r0
      000F81 08               [12] 3190 	inc	r0
      000F82 86 F0            [24] 3191 	mov	b,@r0
      000F84 12r00r00         [24] 3192 	lcall	__gptrget
      000F87 FA               [12] 3193 	mov	r2,a
      000F88 A3               [24] 3194 	inc	dptr
      000F89 12r00r00         [24] 3195 	lcall	__gptrget
      000F8C FB               [12] 3196 	mov	r3,a
      000F8D A3               [24] 3197 	inc	dptr
      000F8E 12r00r00         [24] 3198 	lcall	__gptrget
      000F91 FC               [12] 3199 	mov	r4,a
      000F92 E5*00            [12] 3200 	mov	a,_bp
      000F94 24 15            [12] 3201 	add	a,#0x15
      000F96 F8               [12] 3202 	mov	r0,a
      000F97 E6               [12] 3203 	mov	a,@r0
      000F98 C0 E0            [24] 3204 	push	acc
      000F9A 08               [12] 3205 	inc	r0
      000F9B E6               [12] 3206 	mov	a,@r0
      000F9C C0 E0            [24] 3207 	push	acc
      000F9E 08               [12] 3208 	inc	r0
      000F9F E6               [12] 3209 	mov	a,@r0
      000FA0 C0 E0            [24] 3210 	push	acc
      000FA2 08               [12] 3211 	inc	r0
      000FA3 E6               [12] 3212 	mov	a,@r0
      000FA4 C0 E0            [24] 3213 	push	acc
      000FA6 8A 82            [24] 3214 	mov	dpl,r2
      000FA8 8B 83            [24] 3215 	mov	dph,r3
      000FAA 8C F0            [24] 3216 	mov	b,r4
      000FAC 12r00r00         [24] 3217 	lcall	_stack_push
      000FAF E5 81            [12] 3218 	mov	a,sp
      000FB1 24 FC            [12] 3219 	add	a,#0xfc
      000FB3 F5 81            [12] 3220 	mov	sp,a
                                   3221 ;	calc.c:167: (void)stack_push(ctx->ps, d1);
      000FB5 E5*00            [12] 3222 	mov	a,_bp
      000FB7 24 07            [12] 3223 	add	a,#0x07
      000FB9 F8               [12] 3224 	mov	r0,a
      000FBA 86 82            [24] 3225 	mov	dpl,@r0
      000FBC 08               [12] 3226 	inc	r0
      000FBD 86 83            [24] 3227 	mov	dph,@r0
      000FBF 08               [12] 3228 	inc	r0
      000FC0 86 F0            [24] 3229 	mov	b,@r0
      000FC2 12r00r00         [24] 3230 	lcall	__gptrget
      000FC5 FA               [12] 3231 	mov	r2,a
      000FC6 A3               [24] 3232 	inc	dptr
      000FC7 12r00r00         [24] 3233 	lcall	__gptrget
      000FCA FB               [12] 3234 	mov	r3,a
      000FCB A3               [24] 3235 	inc	dptr
      000FCC 12r00r00         [24] 3236 	lcall	__gptrget
      000FCF FC               [12] 3237 	mov	r4,a
      000FD0 E5*00            [12] 3238 	mov	a,_bp
      000FD2 24 19            [12] 3239 	add	a,#0x19
      000FD4 F8               [12] 3240 	mov	r0,a
      000FD5 E6               [12] 3241 	mov	a,@r0
      000FD6 C0 E0            [24] 3242 	push	acc
      000FD8 08               [12] 3243 	inc	r0
      000FD9 E6               [12] 3244 	mov	a,@r0
      000FDA C0 E0            [24] 3245 	push	acc
      000FDC 08               [12] 3246 	inc	r0
      000FDD E6               [12] 3247 	mov	a,@r0
      000FDE C0 E0            [24] 3248 	push	acc
      000FE0 08               [12] 3249 	inc	r0
      000FE1 E6               [12] 3250 	mov	a,@r0
      000FE2 C0 E0            [24] 3251 	push	acc
      000FE4 8A 82            [24] 3252 	mov	dpl,r2
      000FE6 8B 83            [24] 3253 	mov	dph,r3
      000FE8 8C F0            [24] 3254 	mov	b,r4
      000FEA 12r00r00         [24] 3255 	lcall	_stack_push
      000FED E5 81            [12] 3256 	mov	a,sp
      000FEF 24 FC            [12] 3257 	add	a,#0xfc
      000FF1 F5 81            [12] 3258 	mov	sp,a
                                   3259 ;	calc.c:169: break;
      000FF3 02r2Br95         [24] 3260 	ljmp	00249$
                                   3261 ;	calc.c:170: case 'm':
      000FF6                       3262 00121$:
                                   3263 ;	calc.c:171: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      000FF6 E5*00            [12] 3264 	mov	a,_bp
      000FF8 24 15            [12] 3265 	add	a,#0x15
      000FFA FF               [12] 3266 	mov	r7,a
      000FFB 7E 00            [12] 3267 	mov	r6,#0x00
      000FFD 7D 40            [12] 3268 	mov	r5,#0x40
      000FFF E5*00            [12] 3269 	mov	a,_bp
      001001 24 12            [12] 3270 	add	a,#0x12
      001003 F8               [12] 3271 	mov	r0,a
      001004 E5*00            [12] 3272 	mov	a,_bp
      001006 24 07            [12] 3273 	add	a,#0x07
      001008 F9               [12] 3274 	mov	r1,a
      001009 74 11            [12] 3275 	mov	a,#0x11
      00100B 26               [12] 3276 	add	a,@r0
      00100C F7               [12] 3277 	mov	@r1,a
      00100D 74 40            [12] 3278 	mov	a,#0x40
      00100F 08               [12] 3279 	inc	r0
      001010 36               [12] 3280 	addc	a,@r0
      001011 09               [12] 3281 	inc	r1
      001012 F7               [12] 3282 	mov	@r1,a
      001013 08               [12] 3283 	inc	r0
      001014 09               [12] 3284 	inc	r1
      001015 E6               [12] 3285 	mov	a,@r0
      001016 F7               [12] 3286 	mov	@r1,a
      001017 E5*00            [12] 3287 	mov	a,_bp
      001019 24 07            [12] 3288 	add	a,#0x07
      00101B F8               [12] 3289 	mov	r0,a
      00101C 86 82            [24] 3290 	mov	dpl,@r0
      00101E 08               [12] 3291 	inc	r0
      00101F 86 83            [24] 3292 	mov	dph,@r0
      001021 08               [12] 3293 	inc	r0
      001022 86 F0            [24] 3294 	mov	b,@r0
      001024 12r00r00         [24] 3295 	lcall	__gptrget
      001027 FA               [12] 3296 	mov	r2,a
      001028 A3               [24] 3297 	inc	dptr
      001029 12r00r00         [24] 3298 	lcall	__gptrget
      00102C FB               [12] 3299 	mov	r3,a
      00102D A3               [24] 3300 	inc	dptr
      00102E 12r00r00         [24] 3301 	lcall	__gptrget
      001031 FC               [12] 3302 	mov	r4,a
      001032 C0 07            [24] 3303 	push	ar7
      001034 C0 06            [24] 3304 	push	ar6
      001036 C0 05            [24] 3305 	push	ar5
      001038 8A 82            [24] 3306 	mov	dpl,r2
      00103A 8B 83            [24] 3307 	mov	dph,r3
      00103C 8C F0            [24] 3308 	mov	b,r4
      00103E 12r00r00         [24] 3309 	lcall	_stack_pop
      001041 AB 82            [24] 3310 	mov	r3,dpl
      001043 AC 83            [24] 3311 	mov	r4,dph
      001045 15 81            [12] 3312 	dec	sp
      001047 15 81            [12] 3313 	dec	sp
      001049 15 81            [12] 3314 	dec	sp
      00104B EB               [12] 3315 	mov	a,r3
      00104C 4C               [12] 3316 	orl	a,r4
      00104D 70 25            [24] 3317 	jnz	00125$
      00104F 7Fr4E            [12] 3318 	mov	r7,#___str_10
      001051 7Es00            [12] 3319 	mov	r6,#(___str_10 >> 8)
      001053 7D 80            [12] 3320 	mov	r5,#0x80
                                   3321 ;	calc.c:51: return;
      001055                       3322 00396$:
                                   3323 ;	calc.c:49: for (; *s; s++) putchar(*s);
      001055 8F 82            [24] 3324 	mov	dpl,r7
      001057 8E 83            [24] 3325 	mov	dph,r6
      001059 8D F0            [24] 3326 	mov	b,r5
      00105B 12r00r00         [24] 3327 	lcall	__gptrget
      00105E FC               [12] 3328 	mov	r4,a
      00105F 70 03            [24] 3329 	jnz	01296$
      001061 02r2Br95         [24] 3330 	ljmp	00249$
      001064                       3331 01296$:
      001064 7B 00            [12] 3332 	mov	r3,#0x00
      001066 8C 82            [24] 3333 	mov	dpl,r4
      001068 8B 83            [24] 3334 	mov	dph,r3
      00106A 12r00r00         [24] 3335 	lcall	_putchar
      00106D 0F               [12] 3336 	inc	r7
                                   3337 ;	calc.c:171: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      00106E BF 00 E4         [24] 3338 	cjne	r7,#0x00,00396$
      001071 0E               [12] 3339 	inc	r6
      001072 80 E1            [24] 3340 	sjmp	00396$
      001074                       3341 00125$:
                                   3342 ;	calc.c:173: if (!stack_push(ctx->ss, d0)) {
      001074 E5*00            [12] 3343 	mov	a,_bp
      001076 24 12            [12] 3344 	add	a,#0x12
      001078 F8               [12] 3345 	mov	r0,a
      001079 74 14            [12] 3346 	mov	a,#0x14
      00107B 26               [12] 3347 	add	a,@r0
      00107C FA               [12] 3348 	mov	r2,a
      00107D 74 40            [12] 3349 	mov	a,#0x40
      00107F 08               [12] 3350 	inc	r0
      001080 36               [12] 3351 	addc	a,@r0
      001081 FB               [12] 3352 	mov	r3,a
      001082 08               [12] 3353 	inc	r0
      001083 86 04            [24] 3354 	mov	ar4,@r0
      001085 8A 82            [24] 3355 	mov	dpl,r2
      001087 8B 83            [24] 3356 	mov	dph,r3
      001089 8C F0            [24] 3357 	mov	b,r4
      00108B 12r00r00         [24] 3358 	lcall	__gptrget
      00108E FA               [12] 3359 	mov	r2,a
      00108F A3               [24] 3360 	inc	dptr
      001090 12r00r00         [24] 3361 	lcall	__gptrget
      001093 FB               [12] 3362 	mov	r3,a
      001094 A3               [24] 3363 	inc	dptr
      001095 12r00r00         [24] 3364 	lcall	__gptrget
      001098 FC               [12] 3365 	mov	r4,a
      001099 E5*00            [12] 3366 	mov	a,_bp
      00109B 24 15            [12] 3367 	add	a,#0x15
      00109D F8               [12] 3368 	mov	r0,a
      00109E E6               [12] 3369 	mov	a,@r0
      00109F C0 E0            [24] 3370 	push	acc
      0010A1 08               [12] 3371 	inc	r0
      0010A2 E6               [12] 3372 	mov	a,@r0
      0010A3 C0 E0            [24] 3373 	push	acc
      0010A5 08               [12] 3374 	inc	r0
      0010A6 E6               [12] 3375 	mov	a,@r0
      0010A7 C0 E0            [24] 3376 	push	acc
      0010A9 08               [12] 3377 	inc	r0
      0010AA E6               [12] 3378 	mov	a,@r0
      0010AB C0 E0            [24] 3379 	push	acc
      0010AD 8A 82            [24] 3380 	mov	dpl,r2
      0010AF 8B 83            [24] 3381 	mov	dph,r3
      0010B1 8C F0            [24] 3382 	mov	b,r4
      0010B3 12r00r00         [24] 3383 	lcall	_stack_push
      0010B6 AB 82            [24] 3384 	mov	r3,dpl
      0010B8 AC 83            [24] 3385 	mov	r4,dph
      0010BA E5 81            [12] 3386 	mov	a,sp
      0010BC 24 FC            [12] 3387 	add	a,#0xfc
      0010BE F5 81            [12] 3388 	mov	sp,a
      0010C0 EB               [12] 3389 	mov	a,r3
      0010C1 4C               [12] 3390 	orl	a,r4
      0010C2 60 03            [24] 3391 	jz	01298$
      0010C4 02r2Br95         [24] 3392 	ljmp	00249$
      0010C7                       3393 01298$:
                                   3394 ;	calc.c:174: printstr("\r\nsecondary stack overflow\r\n");
      0010C7 7Fr62            [12] 3395 	mov	r7,#___str_11
      0010C9 7Es00            [12] 3396 	mov	r6,#(___str_11 >> 8)
      0010CB 7D 80            [12] 3397 	mov	r5,#0x80
                                   3398 ;	calc.c:51: return;
      0010CD                       3399 00399$:
                                   3400 ;	calc.c:49: for (; *s; s++) putchar(*s);
      0010CD 8F 82            [24] 3401 	mov	dpl,r7
      0010CF 8E 83            [24] 3402 	mov	dph,r6
      0010D1 8D F0            [24] 3403 	mov	b,r5
      0010D3 12r00r00         [24] 3404 	lcall	__gptrget
      0010D6 FC               [12] 3405 	mov	r4,a
      0010D7 60 10            [24] 3406 	jz	00285$
      0010D9 7B 00            [12] 3407 	mov	r3,#0x00
      0010DB 8C 82            [24] 3408 	mov	dpl,r4
      0010DD 8B 83            [24] 3409 	mov	dph,r3
      0010DF 12r00r00         [24] 3410 	lcall	_putchar
      0010E2 0F               [12] 3411 	inc	r7
                                   3412 ;	calc.c:174: printstr("\r\nsecondary stack overflow\r\n");
      0010E3 BF 00 E7         [24] 3413 	cjne	r7,#0x00,00399$
      0010E6 0E               [12] 3414 	inc	r6
      0010E7 80 E4            [24] 3415 	sjmp	00399$
      0010E9                       3416 00285$:
                                   3417 ;	calc.c:175: (void)stack_push(ctx->ps, d0);
      0010E9 E5*00            [12] 3418 	mov	a,_bp
      0010EB 24 07            [12] 3419 	add	a,#0x07
      0010ED F8               [12] 3420 	mov	r0,a
      0010EE 86 82            [24] 3421 	mov	dpl,@r0
      0010F0 08               [12] 3422 	inc	r0
      0010F1 86 83            [24] 3423 	mov	dph,@r0
      0010F3 08               [12] 3424 	inc	r0
      0010F4 86 F0            [24] 3425 	mov	b,@r0
      0010F6 12r00r00         [24] 3426 	lcall	__gptrget
      0010F9 FA               [12] 3427 	mov	r2,a
      0010FA A3               [24] 3428 	inc	dptr
      0010FB 12r00r00         [24] 3429 	lcall	__gptrget
      0010FE FB               [12] 3430 	mov	r3,a
      0010FF A3               [24] 3431 	inc	dptr
      001100 12r00r00         [24] 3432 	lcall	__gptrget
      001103 FC               [12] 3433 	mov	r4,a
      001104 E5*00            [12] 3434 	mov	a,_bp
      001106 24 15            [12] 3435 	add	a,#0x15
      001108 F8               [12] 3436 	mov	r0,a
      001109 E6               [12] 3437 	mov	a,@r0
      00110A C0 E0            [24] 3438 	push	acc
      00110C 08               [12] 3439 	inc	r0
      00110D E6               [12] 3440 	mov	a,@r0
      00110E C0 E0            [24] 3441 	push	acc
      001110 08               [12] 3442 	inc	r0
      001111 E6               [12] 3443 	mov	a,@r0
      001112 C0 E0            [24] 3444 	push	acc
      001114 08               [12] 3445 	inc	r0
      001115 E6               [12] 3446 	mov	a,@r0
      001116 C0 E0            [24] 3447 	push	acc
      001118 8A 82            [24] 3448 	mov	dpl,r2
      00111A 8B 83            [24] 3449 	mov	dph,r3
      00111C 8C F0            [24] 3450 	mov	b,r4
      00111E 12r00r00         [24] 3451 	lcall	_stack_push
      001121 E5 81            [12] 3452 	mov	a,sp
      001123 24 FC            [12] 3453 	add	a,#0xfc
      001125 F5 81            [12] 3454 	mov	sp,a
                                   3455 ;	calc.c:178: break;
      001127 02r2Br95         [24] 3456 	ljmp	00249$
                                   3457 ;	calc.c:179: case 'M':
      00112A                       3458 00127$:
                                   3459 ;	calc.c:180: if (!stack_pop(ctx->ss, &d0)) printstr("\r\nsecondary stack underflow\r\n");
      00112A E5*00            [12] 3460 	mov	a,_bp
      00112C 24 15            [12] 3461 	add	a,#0x15
      00112E FF               [12] 3462 	mov	r7,a
      00112F 7E 00            [12] 3463 	mov	r6,#0x00
      001131 7D 40            [12] 3464 	mov	r5,#0x40
      001133 E5*00            [12] 3465 	mov	a,_bp
      001135 24 12            [12] 3466 	add	a,#0x12
      001137 F8               [12] 3467 	mov	r0,a
      001138 E5*00            [12] 3468 	mov	a,_bp
      00113A 24 07            [12] 3469 	add	a,#0x07
      00113C F9               [12] 3470 	mov	r1,a
      00113D 74 14            [12] 3471 	mov	a,#0x14
      00113F 26               [12] 3472 	add	a,@r0
      001140 F7               [12] 3473 	mov	@r1,a
      001141 74 40            [12] 3474 	mov	a,#0x40
      001143 08               [12] 3475 	inc	r0
      001144 36               [12] 3476 	addc	a,@r0
      001145 09               [12] 3477 	inc	r1
      001146 F7               [12] 3478 	mov	@r1,a
      001147 08               [12] 3479 	inc	r0
      001148 09               [12] 3480 	inc	r1
      001149 E6               [12] 3481 	mov	a,@r0
      00114A F7               [12] 3482 	mov	@r1,a
      00114B E5*00            [12] 3483 	mov	a,_bp
      00114D 24 07            [12] 3484 	add	a,#0x07
      00114F F8               [12] 3485 	mov	r0,a
      001150 86 82            [24] 3486 	mov	dpl,@r0
      001152 08               [12] 3487 	inc	r0
      001153 86 83            [24] 3488 	mov	dph,@r0
      001155 08               [12] 3489 	inc	r0
      001156 86 F0            [24] 3490 	mov	b,@r0
      001158 12r00r00         [24] 3491 	lcall	__gptrget
      00115B FA               [12] 3492 	mov	r2,a
      00115C A3               [24] 3493 	inc	dptr
      00115D 12r00r00         [24] 3494 	lcall	__gptrget
      001160 FB               [12] 3495 	mov	r3,a
      001161 A3               [24] 3496 	inc	dptr
      001162 12r00r00         [24] 3497 	lcall	__gptrget
      001165 FC               [12] 3498 	mov	r4,a
      001166 C0 07            [24] 3499 	push	ar7
      001168 C0 06            [24] 3500 	push	ar6
      00116A C0 05            [24] 3501 	push	ar5
      00116C 8A 82            [24] 3502 	mov	dpl,r2
      00116E 8B 83            [24] 3503 	mov	dph,r3
      001170 8C F0            [24] 3504 	mov	b,r4
      001172 12r00r00         [24] 3505 	lcall	_stack_pop
      001175 AB 82            [24] 3506 	mov	r3,dpl
      001177 AC 83            [24] 3507 	mov	r4,dph
      001179 15 81            [12] 3508 	dec	sp
      00117B 15 81            [12] 3509 	dec	sp
      00117D 15 81            [12] 3510 	dec	sp
      00117F EB               [12] 3511 	mov	a,r3
      001180 4C               [12] 3512 	orl	a,r4
      001181 70 25            [24] 3513 	jnz	00131$
      001183 7Fr7F            [12] 3514 	mov	r7,#___str_12
      001185 7Es00            [12] 3515 	mov	r6,#(___str_12 >> 8)
      001187 7D 80            [12] 3516 	mov	r5,#0x80
                                   3517 ;	calc.c:51: return;
      001189                       3518 00402$:
                                   3519 ;	calc.c:49: for (; *s; s++) putchar(*s);
      001189 8F 82            [24] 3520 	mov	dpl,r7
      00118B 8E 83            [24] 3521 	mov	dph,r6
      00118D 8D F0            [24] 3522 	mov	b,r5
      00118F 12r00r00         [24] 3523 	lcall	__gptrget
      001192 FC               [12] 3524 	mov	r4,a
      001193 70 03            [24] 3525 	jnz	01302$
      001195 02r2Br95         [24] 3526 	ljmp	00249$
      001198                       3527 01302$:
      001198 7B 00            [12] 3528 	mov	r3,#0x00
      00119A 8C 82            [24] 3529 	mov	dpl,r4
      00119C 8B 83            [24] 3530 	mov	dph,r3
      00119E 12r00r00         [24] 3531 	lcall	_putchar
      0011A1 0F               [12] 3532 	inc	r7
                                   3533 ;	calc.c:180: if (!stack_pop(ctx->ss, &d0)) printstr("\r\nsecondary stack underflow\r\n");
      0011A2 BF 00 E4         [24] 3534 	cjne	r7,#0x00,00402$
      0011A5 0E               [12] 3535 	inc	r6
      0011A6 80 E1            [24] 3536 	sjmp	00402$
      0011A8                       3537 00131$:
                                   3538 ;	calc.c:182: if (!stack_push(ctx->ps, d0)) {
      0011A8 E5*00            [12] 3539 	mov	a,_bp
      0011AA 24 12            [12] 3540 	add	a,#0x12
      0011AC F8               [12] 3541 	mov	r0,a
      0011AD 74 11            [12] 3542 	mov	a,#0x11
      0011AF 26               [12] 3543 	add	a,@r0
      0011B0 FA               [12] 3544 	mov	r2,a
      0011B1 74 40            [12] 3545 	mov	a,#0x40
      0011B3 08               [12] 3546 	inc	r0
      0011B4 36               [12] 3547 	addc	a,@r0
      0011B5 FB               [12] 3548 	mov	r3,a
      0011B6 08               [12] 3549 	inc	r0
      0011B7 86 04            [24] 3550 	mov	ar4,@r0
      0011B9 8A 82            [24] 3551 	mov	dpl,r2
      0011BB 8B 83            [24] 3552 	mov	dph,r3
      0011BD 8C F0            [24] 3553 	mov	b,r4
      0011BF 12r00r00         [24] 3554 	lcall	__gptrget
      0011C2 FA               [12] 3555 	mov	r2,a
      0011C3 A3               [24] 3556 	inc	dptr
      0011C4 12r00r00         [24] 3557 	lcall	__gptrget
      0011C7 FB               [12] 3558 	mov	r3,a
      0011C8 A3               [24] 3559 	inc	dptr
      0011C9 12r00r00         [24] 3560 	lcall	__gptrget
      0011CC FC               [12] 3561 	mov	r4,a
      0011CD E5*00            [12] 3562 	mov	a,_bp
      0011CF 24 15            [12] 3563 	add	a,#0x15
      0011D1 F8               [12] 3564 	mov	r0,a
      0011D2 E6               [12] 3565 	mov	a,@r0
      0011D3 C0 E0            [24] 3566 	push	acc
      0011D5 08               [12] 3567 	inc	r0
      0011D6 E6               [12] 3568 	mov	a,@r0
      0011D7 C0 E0            [24] 3569 	push	acc
      0011D9 08               [12] 3570 	inc	r0
      0011DA E6               [12] 3571 	mov	a,@r0
      0011DB C0 E0            [24] 3572 	push	acc
      0011DD 08               [12] 3573 	inc	r0
      0011DE E6               [12] 3574 	mov	a,@r0
      0011DF C0 E0            [24] 3575 	push	acc
      0011E1 8A 82            [24] 3576 	mov	dpl,r2
      0011E3 8B 83            [24] 3577 	mov	dph,r3
      0011E5 8C F0            [24] 3578 	mov	b,r4
      0011E7 12r00r00         [24] 3579 	lcall	_stack_push
      0011EA AB 82            [24] 3580 	mov	r3,dpl
      0011EC AC 83            [24] 3581 	mov	r4,dph
      0011EE E5 81            [12] 3582 	mov	a,sp
      0011F0 24 FC            [12] 3583 	add	a,#0xfc
      0011F2 F5 81            [12] 3584 	mov	sp,a
      0011F4 EB               [12] 3585 	mov	a,r3
      0011F5 4C               [12] 3586 	orl	a,r4
      0011F6 60 03            [24] 3587 	jz	01304$
      0011F8 02r2Br95         [24] 3588 	ljmp	00249$
      0011FB                       3589 01304$:
                                   3590 ;	calc.c:183: printstr("\r\nstack overflow\r\n");
      0011FB 7Fr9D            [12] 3591 	mov	r7,#___str_13
      0011FD 7Es00            [12] 3592 	mov	r6,#(___str_13 >> 8)
      0011FF 7D 80            [12] 3593 	mov	r5,#0x80
                                   3594 ;	calc.c:51: return;
      001201                       3595 00405$:
                                   3596 ;	calc.c:49: for (; *s; s++) putchar(*s);
      001201 8F 82            [24] 3597 	mov	dpl,r7
      001203 8E 83            [24] 3598 	mov	dph,r6
      001205 8D F0            [24] 3599 	mov	b,r5
      001207 12r00r00         [24] 3600 	lcall	__gptrget
      00120A FC               [12] 3601 	mov	r4,a
      00120B 60 10            [24] 3602 	jz	00289$
      00120D 7B 00            [12] 3603 	mov	r3,#0x00
      00120F 8C 82            [24] 3604 	mov	dpl,r4
      001211 8B 83            [24] 3605 	mov	dph,r3
      001213 12r00r00         [24] 3606 	lcall	_putchar
      001216 0F               [12] 3607 	inc	r7
                                   3608 ;	calc.c:183: printstr("\r\nstack overflow\r\n");
      001217 BF 00 E7         [24] 3609 	cjne	r7,#0x00,00405$
      00121A 0E               [12] 3610 	inc	r6
      00121B 80 E4            [24] 3611 	sjmp	00405$
      00121D                       3612 00289$:
                                   3613 ;	calc.c:184: (void)stack_push(ctx->ss, d0);
      00121D E5*00            [12] 3614 	mov	a,_bp
      00121F 24 07            [12] 3615 	add	a,#0x07
      001221 F8               [12] 3616 	mov	r0,a
      001222 86 82            [24] 3617 	mov	dpl,@r0
      001224 08               [12] 3618 	inc	r0
      001225 86 83            [24] 3619 	mov	dph,@r0
      001227 08               [12] 3620 	inc	r0
      001228 86 F0            [24] 3621 	mov	b,@r0
      00122A 12r00r00         [24] 3622 	lcall	__gptrget
      00122D FA               [12] 3623 	mov	r2,a
      00122E A3               [24] 3624 	inc	dptr
      00122F 12r00r00         [24] 3625 	lcall	__gptrget
      001232 FB               [12] 3626 	mov	r3,a
      001233 A3               [24] 3627 	inc	dptr
      001234 12r00r00         [24] 3628 	lcall	__gptrget
      001237 FC               [12] 3629 	mov	r4,a
      001238 E5*00            [12] 3630 	mov	a,_bp
      00123A 24 15            [12] 3631 	add	a,#0x15
      00123C F8               [12] 3632 	mov	r0,a
      00123D E6               [12] 3633 	mov	a,@r0
      00123E C0 E0            [24] 3634 	push	acc
      001240 08               [12] 3635 	inc	r0
      001241 E6               [12] 3636 	mov	a,@r0
      001242 C0 E0            [24] 3637 	push	acc
      001244 08               [12] 3638 	inc	r0
      001245 E6               [12] 3639 	mov	a,@r0
      001246 C0 E0            [24] 3640 	push	acc
      001248 08               [12] 3641 	inc	r0
      001249 E6               [12] 3642 	mov	a,@r0
      00124A C0 E0            [24] 3643 	push	acc
      00124C 8A 82            [24] 3644 	mov	dpl,r2
      00124E 8B 83            [24] 3645 	mov	dph,r3
      001250 8C F0            [24] 3646 	mov	b,r4
      001252 12r00r00         [24] 3647 	lcall	_stack_push
      001255 E5 81            [12] 3648 	mov	a,sp
      001257 24 FC            [12] 3649 	add	a,#0xfc
      001259 F5 81            [12] 3650 	mov	sp,a
                                   3651 ;	calc.c:187: break;
      00125B 02r2Br95         [24] 3652 	ljmp	00249$
                                   3653 ;	calc.c:188: case 'u':
      00125E                       3654 00133$:
                                   3655 ;	calc.c:189: if (!stack_peek(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      00125E E5*00            [12] 3656 	mov	a,_bp
      001260 24 15            [12] 3657 	add	a,#0x15
      001262 FF               [12] 3658 	mov	r7,a
      001263 7E 00            [12] 3659 	mov	r6,#0x00
      001265 7D 40            [12] 3660 	mov	r5,#0x40
      001267 E5*00            [12] 3661 	mov	a,_bp
      001269 24 12            [12] 3662 	add	a,#0x12
      00126B F8               [12] 3663 	mov	r0,a
      00126C 74 11            [12] 3664 	mov	a,#0x11
      00126E 26               [12] 3665 	add	a,@r0
      00126F FA               [12] 3666 	mov	r2,a
      001270 ED               [12] 3667 	mov	a,r5
      001271 08               [12] 3668 	inc	r0
      001272 36               [12] 3669 	addc	a,@r0
      001273 FB               [12] 3670 	mov	r3,a
      001274 08               [12] 3671 	inc	r0
      001275 86 04            [24] 3672 	mov	ar4,@r0
      001277 8A 82            [24] 3673 	mov	dpl,r2
      001279 8B 83            [24] 3674 	mov	dph,r3
      00127B 8C F0            [24] 3675 	mov	b,r4
      00127D 12r00r00         [24] 3676 	lcall	__gptrget
      001280 FA               [12] 3677 	mov	r2,a
      001281 A3               [24] 3678 	inc	dptr
      001282 12r00r00         [24] 3679 	lcall	__gptrget
      001285 FB               [12] 3680 	mov	r3,a
      001286 A3               [24] 3681 	inc	dptr
      001287 12r00r00         [24] 3682 	lcall	__gptrget
      00128A FC               [12] 3683 	mov	r4,a
      00128B C0 07            [24] 3684 	push	ar7
      00128D C0 06            [24] 3685 	push	ar6
      00128F C0 05            [24] 3686 	push	ar5
      001291 8A 82            [24] 3687 	mov	dpl,r2
      001293 8B 83            [24] 3688 	mov	dph,r3
      001295 8C F0            [24] 3689 	mov	b,r4
      001297 12r00r00         [24] 3690 	lcall	_stack_peek
      00129A AB 82            [24] 3691 	mov	r3,dpl
      00129C AC 83            [24] 3692 	mov	r4,dph
      00129E 15 81            [12] 3693 	dec	sp
      0012A0 15 81            [12] 3694 	dec	sp
      0012A2 15 81            [12] 3695 	dec	sp
      0012A4 EB               [12] 3696 	mov	a,r3
      0012A5 4C               [12] 3697 	orl	a,r4
      0012A6 70 25            [24] 3698 	jnz	00137$
      0012A8 7Fr4E            [12] 3699 	mov	r7,#___str_10
      0012AA 7Es00            [12] 3700 	mov	r6,#(___str_10 >> 8)
      0012AC 7D 80            [12] 3701 	mov	r5,#0x80
                                   3702 ;	calc.c:51: return;
      0012AE                       3703 00408$:
                                   3704 ;	calc.c:49: for (; *s; s++) putchar(*s);
      0012AE 8F 82            [24] 3705 	mov	dpl,r7
      0012B0 8E 83            [24] 3706 	mov	dph,r6
      0012B2 8D F0            [24] 3707 	mov	b,r5
      0012B4 12r00r00         [24] 3708 	lcall	__gptrget
      0012B7 FC               [12] 3709 	mov	r4,a
      0012B8 70 03            [24] 3710 	jnz	01308$
      0012BA 02r2Br95         [24] 3711 	ljmp	00249$
      0012BD                       3712 01308$:
      0012BD 7B 00            [12] 3713 	mov	r3,#0x00
      0012BF 8C 82            [24] 3714 	mov	dpl,r4
      0012C1 8B 83            [24] 3715 	mov	dph,r3
      0012C3 12r00r00         [24] 3716 	lcall	_putchar
      0012C6 0F               [12] 3717 	inc	r7
                                   3718 ;	calc.c:189: if (!stack_peek(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      0012C7 BF 00 E4         [24] 3719 	cjne	r7,#0x00,00408$
      0012CA 0E               [12] 3720 	inc	r6
      0012CB 80 E1            [24] 3721 	sjmp	00408$
      0012CD                       3722 00137$:
                                   3723 ;	calc.c:190: else if (!stack_push(ctx->ss, d0)) printstr("\r\nsecondary stack overflow\r\n");
      0012CD E5*00            [12] 3724 	mov	a,_bp
      0012CF 24 12            [12] 3725 	add	a,#0x12
      0012D1 F8               [12] 3726 	mov	r0,a
      0012D2 74 14            [12] 3727 	mov	a,#0x14
      0012D4 26               [12] 3728 	add	a,@r0
      0012D5 FA               [12] 3729 	mov	r2,a
      0012D6 74 40            [12] 3730 	mov	a,#0x40
      0012D8 08               [12] 3731 	inc	r0
      0012D9 36               [12] 3732 	addc	a,@r0
      0012DA FB               [12] 3733 	mov	r3,a
      0012DB 08               [12] 3734 	inc	r0
      0012DC 86 04            [24] 3735 	mov	ar4,@r0
      0012DE 8A 82            [24] 3736 	mov	dpl,r2
      0012E0 8B 83            [24] 3737 	mov	dph,r3
      0012E2 8C F0            [24] 3738 	mov	b,r4
      0012E4 12r00r00         [24] 3739 	lcall	__gptrget
      0012E7 FA               [12] 3740 	mov	r2,a
      0012E8 A3               [24] 3741 	inc	dptr
      0012E9 12r00r00         [24] 3742 	lcall	__gptrget
      0012EC FB               [12] 3743 	mov	r3,a
      0012ED A3               [24] 3744 	inc	dptr
      0012EE 12r00r00         [24] 3745 	lcall	__gptrget
      0012F1 FC               [12] 3746 	mov	r4,a
      0012F2 E5*00            [12] 3747 	mov	a,_bp
      0012F4 24 15            [12] 3748 	add	a,#0x15
      0012F6 F8               [12] 3749 	mov	r0,a
      0012F7 E6               [12] 3750 	mov	a,@r0
      0012F8 C0 E0            [24] 3751 	push	acc
      0012FA 08               [12] 3752 	inc	r0
      0012FB E6               [12] 3753 	mov	a,@r0
      0012FC C0 E0            [24] 3754 	push	acc
      0012FE 08               [12] 3755 	inc	r0
      0012FF E6               [12] 3756 	mov	a,@r0
      001300 C0 E0            [24] 3757 	push	acc
      001302 08               [12] 3758 	inc	r0
      001303 E6               [12] 3759 	mov	a,@r0
      001304 C0 E0            [24] 3760 	push	acc
      001306 8A 82            [24] 3761 	mov	dpl,r2
      001308 8B 83            [24] 3762 	mov	dph,r3
      00130A 8C F0            [24] 3763 	mov	b,r4
      00130C 12r00r00         [24] 3764 	lcall	_stack_push
      00130F AB 82            [24] 3765 	mov	r3,dpl
      001311 AC 83            [24] 3766 	mov	r4,dph
      001313 E5 81            [12] 3767 	mov	a,sp
      001315 24 FC            [12] 3768 	add	a,#0xfc
      001317 F5 81            [12] 3769 	mov	sp,a
      001319 EB               [12] 3770 	mov	a,r3
      00131A 4C               [12] 3771 	orl	a,r4
      00131B 60 03            [24] 3772 	jz	01310$
      00131D 02r2Br95         [24] 3773 	ljmp	00249$
      001320                       3774 01310$:
      001320 7Fr62            [12] 3775 	mov	r7,#___str_11
      001322 7Es00            [12] 3776 	mov	r6,#(___str_11 >> 8)
      001324 7D 80            [12] 3777 	mov	r5,#0x80
                                   3778 ;	calc.c:51: return;
      001326                       3779 00411$:
                                   3780 ;	calc.c:49: for (; *s; s++) putchar(*s);
      001326 8F 82            [24] 3781 	mov	dpl,r7
      001328 8E 83            [24] 3782 	mov	dph,r6
      00132A 8D F0            [24] 3783 	mov	b,r5
      00132C 12r00r00         [24] 3784 	lcall	__gptrget
      00132F FC               [12] 3785 	mov	r4,a
      001330 70 03            [24] 3786 	jnz	01311$
      001332 02r2Br95         [24] 3787 	ljmp	00249$
      001335                       3788 01311$:
      001335 7B 00            [12] 3789 	mov	r3,#0x00
      001337 8C 82            [24] 3790 	mov	dpl,r4
      001339 8B 83            [24] 3791 	mov	dph,r3
      00133B 12r00r00         [24] 3792 	lcall	_putchar
      00133E 0F               [12] 3793 	inc	r7
                                   3794 ;	calc.c:192: case 'U':
      00133F BF 00 E4         [24] 3795 	cjne	r7,#0x00,00411$
      001342 0E               [12] 3796 	inc	r6
      001343 80 E1            [24] 3797 	sjmp	00411$
      001345                       3798 00139$:
                                   3799 ;	calc.c:193: if (!stack_peek(ctx->ss, &d0)) printstr("\r\nsecondary stack underflow\r\n");
      001345 E5*00            [12] 3800 	mov	a,_bp
      001347 24 15            [12] 3801 	add	a,#0x15
      001349 FF               [12] 3802 	mov	r7,a
      00134A 7E 00            [12] 3803 	mov	r6,#0x00
      00134C 7D 40            [12] 3804 	mov	r5,#0x40
      00134E E5*00            [12] 3805 	mov	a,_bp
      001350 24 12            [12] 3806 	add	a,#0x12
      001352 F8               [12] 3807 	mov	r0,a
      001353 74 14            [12] 3808 	mov	a,#0x14
      001355 26               [12] 3809 	add	a,@r0
      001356 FA               [12] 3810 	mov	r2,a
      001357 ED               [12] 3811 	mov	a,r5
      001358 08               [12] 3812 	inc	r0
      001359 36               [12] 3813 	addc	a,@r0
      00135A FB               [12] 3814 	mov	r3,a
      00135B 08               [12] 3815 	inc	r0
      00135C 86 04            [24] 3816 	mov	ar4,@r0
      00135E 8A 82            [24] 3817 	mov	dpl,r2
      001360 8B 83            [24] 3818 	mov	dph,r3
      001362 8C F0            [24] 3819 	mov	b,r4
      001364 12r00r00         [24] 3820 	lcall	__gptrget
      001367 FA               [12] 3821 	mov	r2,a
      001368 A3               [24] 3822 	inc	dptr
      001369 12r00r00         [24] 3823 	lcall	__gptrget
      00136C FB               [12] 3824 	mov	r3,a
      00136D A3               [24] 3825 	inc	dptr
      00136E 12r00r00         [24] 3826 	lcall	__gptrget
      001371 FC               [12] 3827 	mov	r4,a
      001372 C0 07            [24] 3828 	push	ar7
      001374 C0 06            [24] 3829 	push	ar6
      001376 C0 05            [24] 3830 	push	ar5
      001378 8A 82            [24] 3831 	mov	dpl,r2
      00137A 8B 83            [24] 3832 	mov	dph,r3
      00137C 8C F0            [24] 3833 	mov	b,r4
      00137E 12r00r00         [24] 3834 	lcall	_stack_peek
      001381 AB 82            [24] 3835 	mov	r3,dpl
      001383 AC 83            [24] 3836 	mov	r4,dph
      001385 15 81            [12] 3837 	dec	sp
      001387 15 81            [12] 3838 	dec	sp
      001389 15 81            [12] 3839 	dec	sp
      00138B EB               [12] 3840 	mov	a,r3
      00138C 4C               [12] 3841 	orl	a,r4
      00138D 70 25            [24] 3842 	jnz	00143$
      00138F 7Fr7F            [12] 3843 	mov	r7,#___str_12
      001391 7Es00            [12] 3844 	mov	r6,#(___str_12 >> 8)
      001393 7D 80            [12] 3845 	mov	r5,#0x80
                                   3846 ;	calc.c:51: return;
      001395                       3847 00414$:
                                   3848 ;	calc.c:49: for (; *s; s++) putchar(*s);
      001395 8F 82            [24] 3849 	mov	dpl,r7
      001397 8E 83            [24] 3850 	mov	dph,r6
      001399 8D F0            [24] 3851 	mov	b,r5
      00139B 12r00r00         [24] 3852 	lcall	__gptrget
      00139E FC               [12] 3853 	mov	r4,a
      00139F 70 03            [24] 3854 	jnz	01314$
      0013A1 02r2Br95         [24] 3855 	ljmp	00249$
      0013A4                       3856 01314$:
      0013A4 7B 00            [12] 3857 	mov	r3,#0x00
      0013A6 8C 82            [24] 3858 	mov	dpl,r4
      0013A8 8B 83            [24] 3859 	mov	dph,r3
      0013AA 12r00r00         [24] 3860 	lcall	_putchar
      0013AD 0F               [12] 3861 	inc	r7
                                   3862 ;	calc.c:193: if (!stack_peek(ctx->ss, &d0)) printstr("\r\nsecondary stack underflow\r\n");
      0013AE BF 00 E4         [24] 3863 	cjne	r7,#0x00,00414$
      0013B1 0E               [12] 3864 	inc	r6
      0013B2 80 E1            [24] 3865 	sjmp	00414$
      0013B4                       3866 00143$:
                                   3867 ;	calc.c:194: else if (!stack_push(ctx->ps, d0)) printstr("\r\nstack overflow\r\n");
      0013B4 E5*00            [12] 3868 	mov	a,_bp
      0013B6 24 12            [12] 3869 	add	a,#0x12
      0013B8 F8               [12] 3870 	mov	r0,a
      0013B9 74 11            [12] 3871 	mov	a,#0x11
      0013BB 26               [12] 3872 	add	a,@r0
      0013BC FA               [12] 3873 	mov	r2,a
      0013BD 74 40            [12] 3874 	mov	a,#0x40
      0013BF 08               [12] 3875 	inc	r0
      0013C0 36               [12] 3876 	addc	a,@r0
      0013C1 FB               [12] 3877 	mov	r3,a
      0013C2 08               [12] 3878 	inc	r0
      0013C3 86 04            [24] 3879 	mov	ar4,@r0
      0013C5 8A 82            [24] 3880 	mov	dpl,r2
      0013C7 8B 83            [24] 3881 	mov	dph,r3
      0013C9 8C F0            [24] 3882 	mov	b,r4
      0013CB 12r00r00         [24] 3883 	lcall	__gptrget
      0013CE FA               [12] 3884 	mov	r2,a
      0013CF A3               [24] 3885 	inc	dptr
      0013D0 12r00r00         [24] 3886 	lcall	__gptrget
      0013D3 FB               [12] 3887 	mov	r3,a
      0013D4 A3               [24] 3888 	inc	dptr
      0013D5 12r00r00         [24] 3889 	lcall	__gptrget
      0013D8 FC               [12] 3890 	mov	r4,a
      0013D9 E5*00            [12] 3891 	mov	a,_bp
      0013DB 24 15            [12] 3892 	add	a,#0x15
      0013DD F8               [12] 3893 	mov	r0,a
      0013DE E6               [12] 3894 	mov	a,@r0
      0013DF C0 E0            [24] 3895 	push	acc
      0013E1 08               [12] 3896 	inc	r0
      0013E2 E6               [12] 3897 	mov	a,@r0
      0013E3 C0 E0            [24] 3898 	push	acc
      0013E5 08               [12] 3899 	inc	r0
      0013E6 E6               [12] 3900 	mov	a,@r0
      0013E7 C0 E0            [24] 3901 	push	acc
      0013E9 08               [12] 3902 	inc	r0
      0013EA E6               [12] 3903 	mov	a,@r0
      0013EB C0 E0            [24] 3904 	push	acc
      0013ED 8A 82            [24] 3905 	mov	dpl,r2
      0013EF 8B 83            [24] 3906 	mov	dph,r3
      0013F1 8C F0            [24] 3907 	mov	b,r4
      0013F3 12r00r00         [24] 3908 	lcall	_stack_push
      0013F6 AB 82            [24] 3909 	mov	r3,dpl
      0013F8 AC 83            [24] 3910 	mov	r4,dph
      0013FA E5 81            [12] 3911 	mov	a,sp
      0013FC 24 FC            [12] 3912 	add	a,#0xfc
      0013FE F5 81            [12] 3913 	mov	sp,a
      001400 EB               [12] 3914 	mov	a,r3
      001401 4C               [12] 3915 	orl	a,r4
      001402 60 03            [24] 3916 	jz	01316$
      001404 02r2Br95         [24] 3917 	ljmp	00249$
      001407                       3918 01316$:
      001407 7Fr9D            [12] 3919 	mov	r7,#___str_13
      001409 7Es00            [12] 3920 	mov	r6,#(___str_13 >> 8)
      00140B 7D 80            [12] 3921 	mov	r5,#0x80
                                   3922 ;	calc.c:51: return;
      00140D                       3923 00417$:
                                   3924 ;	calc.c:49: for (; *s; s++) putchar(*s);
      00140D 8F 82            [24] 3925 	mov	dpl,r7
      00140F 8E 83            [24] 3926 	mov	dph,r6
      001411 8D F0            [24] 3927 	mov	b,r5
      001413 12r00r00         [24] 3928 	lcall	__gptrget
      001416 FC               [12] 3929 	mov	r4,a
      001417 70 03            [24] 3930 	jnz	01317$
      001419 02r2Br95         [24] 3931 	ljmp	00249$
      00141C                       3932 01317$:
      00141C 7B 00            [12] 3933 	mov	r3,#0x00
      00141E 8C 82            [24] 3934 	mov	dpl,r4
      001420 8B 83            [24] 3935 	mov	dph,r3
      001422 12r00r00         [24] 3936 	lcall	_putchar
      001425 0F               [12] 3937 	inc	r7
                                   3938 ;	calc.c:196: case 'T':
      001426 BF 00 E4         [24] 3939 	cjne	r7,#0x00,00417$
      001429 0E               [12] 3940 	inc	r6
      00142A 80 E1            [24] 3941 	sjmp	00417$
      00142C                       3942 00145$:
                                   3943 ;	calc.c:197: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      00142C E5*00            [12] 3944 	mov	a,_bp
      00142E 24 15            [12] 3945 	add	a,#0x15
      001430 FF               [12] 3946 	mov	r7,a
      001431 7E 00            [12] 3947 	mov	r6,#0x00
      001433 7D 40            [12] 3948 	mov	r5,#0x40
      001435 E5*00            [12] 3949 	mov	a,_bp
      001437 24 12            [12] 3950 	add	a,#0x12
      001439 F8               [12] 3951 	mov	r0,a
      00143A E5*00            [12] 3952 	mov	a,_bp
      00143C 24 07            [12] 3953 	add	a,#0x07
      00143E F9               [12] 3954 	mov	r1,a
      00143F 74 11            [12] 3955 	mov	a,#0x11
      001441 26               [12] 3956 	add	a,@r0
      001442 F7               [12] 3957 	mov	@r1,a
      001443 74 40            [12] 3958 	mov	a,#0x40
      001445 08               [12] 3959 	inc	r0
      001446 36               [12] 3960 	addc	a,@r0
      001447 09               [12] 3961 	inc	r1
      001448 F7               [12] 3962 	mov	@r1,a
      001449 08               [12] 3963 	inc	r0
      00144A 09               [12] 3964 	inc	r1
      00144B E6               [12] 3965 	mov	a,@r0
      00144C F7               [12] 3966 	mov	@r1,a
      00144D E5*00            [12] 3967 	mov	a,_bp
      00144F 24 07            [12] 3968 	add	a,#0x07
      001451 F8               [12] 3969 	mov	r0,a
      001452 86 82            [24] 3970 	mov	dpl,@r0
      001454 08               [12] 3971 	inc	r0
      001455 86 83            [24] 3972 	mov	dph,@r0
      001457 08               [12] 3973 	inc	r0
      001458 86 F0            [24] 3974 	mov	b,@r0
      00145A 12r00r00         [24] 3975 	lcall	__gptrget
      00145D FA               [12] 3976 	mov	r2,a
      00145E A3               [24] 3977 	inc	dptr
      00145F 12r00r00         [24] 3978 	lcall	__gptrget
      001462 FB               [12] 3979 	mov	r3,a
      001463 A3               [24] 3980 	inc	dptr
      001464 12r00r00         [24] 3981 	lcall	__gptrget
      001467 FC               [12] 3982 	mov	r4,a
      001468 C0 07            [24] 3983 	push	ar7
      00146A C0 06            [24] 3984 	push	ar6
      00146C C0 05            [24] 3985 	push	ar5
      00146E 8A 82            [24] 3986 	mov	dpl,r2
      001470 8B 83            [24] 3987 	mov	dph,r3
      001472 8C F0            [24] 3988 	mov	b,r4
      001474 12r00r00         [24] 3989 	lcall	_stack_pop
      001477 AB 82            [24] 3990 	mov	r3,dpl
      001479 AC 83            [24] 3991 	mov	r4,dph
      00147B 15 81            [12] 3992 	dec	sp
      00147D 15 81            [12] 3993 	dec	sp
      00147F 15 81            [12] 3994 	dec	sp
      001481 EB               [12] 3995 	mov	a,r3
      001482 4C               [12] 3996 	orl	a,r4
      001483 70 25            [24] 3997 	jnz	00150$
      001485 7Fr4E            [12] 3998 	mov	r7,#___str_10
      001487 7Es00            [12] 3999 	mov	r6,#(___str_10 >> 8)
      001489 7D 80            [12] 4000 	mov	r5,#0x80
                                   4001 ;	calc.c:51: return;
      00148B                       4002 00420$:
                                   4003 ;	calc.c:49: for (; *s; s++) putchar(*s);
      00148B 8F 82            [24] 4004 	mov	dpl,r7
      00148D 8E 83            [24] 4005 	mov	dph,r6
      00148F 8D F0            [24] 4006 	mov	b,r5
      001491 12r00r00         [24] 4007 	lcall	__gptrget
      001494 FC               [12] 4008 	mov	r4,a
      001495 70 03            [24] 4009 	jnz	01320$
      001497 02r2Br95         [24] 4010 	ljmp	00249$
      00149A                       4011 01320$:
      00149A 7B 00            [12] 4012 	mov	r3,#0x00
      00149C 8C 82            [24] 4013 	mov	dpl,r4
      00149E 8B 83            [24] 4014 	mov	dph,r3
      0014A0 12r00r00         [24] 4015 	lcall	_putchar
      0014A3 0F               [12] 4016 	inc	r7
                                   4017 ;	calc.c:197: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      0014A4 BF 00 E4         [24] 4018 	cjne	r7,#0x00,00420$
      0014A7 0E               [12] 4019 	inc	r6
      0014A8 80 E1            [24] 4020 	sjmp	00420$
      0014AA                       4021 00150$:
                                   4022 ;	calc.c:199: if (!stack_pop(ctx->ss, &d1)) {
      0014AA E5*00            [12] 4023 	mov	a,_bp
      0014AC 24 19            [12] 4024 	add	a,#0x19
      0014AE FF               [12] 4025 	mov	r7,a
      0014AF 7E 00            [12] 4026 	mov	r6,#0x00
      0014B1 7D 40            [12] 4027 	mov	r5,#0x40
      0014B3 E5*00            [12] 4028 	mov	a,_bp
      0014B5 24 12            [12] 4029 	add	a,#0x12
      0014B7 F8               [12] 4030 	mov	r0,a
      0014B8 E5*00            [12] 4031 	mov	a,_bp
      0014BA 24 04            [12] 4032 	add	a,#0x04
      0014BC F9               [12] 4033 	mov	r1,a
      0014BD 74 14            [12] 4034 	mov	a,#0x14
      0014BF 26               [12] 4035 	add	a,@r0
      0014C0 F7               [12] 4036 	mov	@r1,a
      0014C1 74 40            [12] 4037 	mov	a,#0x40
      0014C3 08               [12] 4038 	inc	r0
      0014C4 36               [12] 4039 	addc	a,@r0
      0014C5 09               [12] 4040 	inc	r1
      0014C6 F7               [12] 4041 	mov	@r1,a
      0014C7 08               [12] 4042 	inc	r0
      0014C8 09               [12] 4043 	inc	r1
      0014C9 E6               [12] 4044 	mov	a,@r0
      0014CA F7               [12] 4045 	mov	@r1,a
      0014CB E5*00            [12] 4046 	mov	a,_bp
      0014CD 24 04            [12] 4047 	add	a,#0x04
      0014CF F8               [12] 4048 	mov	r0,a
      0014D0 86 82            [24] 4049 	mov	dpl,@r0
      0014D2 08               [12] 4050 	inc	r0
      0014D3 86 83            [24] 4051 	mov	dph,@r0
      0014D5 08               [12] 4052 	inc	r0
      0014D6 86 F0            [24] 4053 	mov	b,@r0
      0014D8 12r00r00         [24] 4054 	lcall	__gptrget
      0014DB FA               [12] 4055 	mov	r2,a
      0014DC A3               [24] 4056 	inc	dptr
      0014DD 12r00r00         [24] 4057 	lcall	__gptrget
      0014E0 FB               [12] 4058 	mov	r3,a
      0014E1 A3               [24] 4059 	inc	dptr
      0014E2 12r00r00         [24] 4060 	lcall	__gptrget
      0014E5 FC               [12] 4061 	mov	r4,a
      0014E6 C0 07            [24] 4062 	push	ar7
      0014E8 C0 06            [24] 4063 	push	ar6
      0014EA C0 05            [24] 4064 	push	ar5
      0014EC 8A 82            [24] 4065 	mov	dpl,r2
      0014EE 8B 83            [24] 4066 	mov	dph,r3
      0014F0 8C F0            [24] 4067 	mov	b,r4
      0014F2 12r00r00         [24] 4068 	lcall	_stack_pop
      0014F5 AB 82            [24] 4069 	mov	r3,dpl
      0014F7 AC 83            [24] 4070 	mov	r4,dph
      0014F9 15 81            [12] 4071 	dec	sp
      0014FB 15 81            [12] 4072 	dec	sp
      0014FD 15 81            [12] 4073 	dec	sp
      0014FF EB               [12] 4074 	mov	a,r3
      001500 4C               [12] 4075 	orl	a,r4
      001501 70 63            [24] 4076 	jnz	00147$
                                   4077 ;	calc.c:200: printstr("\r\nsecondary stack underflow\r\n");
      001503 7Fr7F            [12] 4078 	mov	r7,#___str_12
      001505 7Es00            [12] 4079 	mov	r6,#(___str_12 >> 8)
      001507 7D 80            [12] 4080 	mov	r5,#0x80
                                   4081 ;	calc.c:51: return;
      001509                       4082 00423$:
                                   4083 ;	calc.c:49: for (; *s; s++) putchar(*s);
      001509 8F 82            [24] 4084 	mov	dpl,r7
      00150B 8E 83            [24] 4085 	mov	dph,r6
      00150D 8D F0            [24] 4086 	mov	b,r5
      00150F 12r00r00         [24] 4087 	lcall	__gptrget
      001512 FC               [12] 4088 	mov	r4,a
      001513 60 10            [24] 4089 	jz	00301$
      001515 7B 00            [12] 4090 	mov	r3,#0x00
      001517 8C 82            [24] 4091 	mov	dpl,r4
      001519 8B 83            [24] 4092 	mov	dph,r3
      00151B 12r00r00         [24] 4093 	lcall	_putchar
      00151E 0F               [12] 4094 	inc	r7
                                   4095 ;	calc.c:200: printstr("\r\nsecondary stack underflow\r\n");
      00151F BF 00 E7         [24] 4096 	cjne	r7,#0x00,00423$
      001522 0E               [12] 4097 	inc	r6
      001523 80 E4            [24] 4098 	sjmp	00423$
      001525                       4099 00301$:
                                   4100 ;	calc.c:201: (void)stack_push(ctx->ps, d0);
      001525 E5*00            [12] 4101 	mov	a,_bp
      001527 24 07            [12] 4102 	add	a,#0x07
      001529 F8               [12] 4103 	mov	r0,a
      00152A 86 82            [24] 4104 	mov	dpl,@r0
      00152C 08               [12] 4105 	inc	r0
      00152D 86 83            [24] 4106 	mov	dph,@r0
      00152F 08               [12] 4107 	inc	r0
      001530 86 F0            [24] 4108 	mov	b,@r0
      001532 12r00r00         [24] 4109 	lcall	__gptrget
      001535 FA               [12] 4110 	mov	r2,a
      001536 A3               [24] 4111 	inc	dptr
      001537 12r00r00         [24] 4112 	lcall	__gptrget
      00153A FB               [12] 4113 	mov	r3,a
      00153B A3               [24] 4114 	inc	dptr
      00153C 12r00r00         [24] 4115 	lcall	__gptrget
      00153F FC               [12] 4116 	mov	r4,a
      001540 E5*00            [12] 4117 	mov	a,_bp
      001542 24 15            [12] 4118 	add	a,#0x15
      001544 F8               [12] 4119 	mov	r0,a
      001545 E6               [12] 4120 	mov	a,@r0
      001546 C0 E0            [24] 4121 	push	acc
      001548 08               [12] 4122 	inc	r0
      001549 E6               [12] 4123 	mov	a,@r0
      00154A C0 E0            [24] 4124 	push	acc
      00154C 08               [12] 4125 	inc	r0
      00154D E6               [12] 4126 	mov	a,@r0
      00154E C0 E0            [24] 4127 	push	acc
      001550 08               [12] 4128 	inc	r0
      001551 E6               [12] 4129 	mov	a,@r0
      001552 C0 E0            [24] 4130 	push	acc
      001554 8A 82            [24] 4131 	mov	dpl,r2
      001556 8B 83            [24] 4132 	mov	dph,r3
      001558 8C F0            [24] 4133 	mov	b,r4
      00155A 12r00r00         [24] 4134 	lcall	_stack_push
      00155D E5 81            [12] 4135 	mov	a,sp
      00155F 24 FC            [12] 4136 	add	a,#0xfc
      001561 F5 81            [12] 4137 	mov	sp,a
      001563 02r2Br95         [24] 4138 	ljmp	00249$
      001566                       4139 00147$:
                                   4140 ;	calc.c:203: (void)stack_push(ctx->ps, d1);
      001566 E5*00            [12] 4141 	mov	a,_bp
      001568 24 07            [12] 4142 	add	a,#0x07
      00156A F8               [12] 4143 	mov	r0,a
      00156B 86 82            [24] 4144 	mov	dpl,@r0
      00156D 08               [12] 4145 	inc	r0
      00156E 86 83            [24] 4146 	mov	dph,@r0
      001570 08               [12] 4147 	inc	r0
      001571 86 F0            [24] 4148 	mov	b,@r0
      001573 12r00r00         [24] 4149 	lcall	__gptrget
      001576 FA               [12] 4150 	mov	r2,a
      001577 A3               [24] 4151 	inc	dptr
      001578 12r00r00         [24] 4152 	lcall	__gptrget
      00157B FB               [12] 4153 	mov	r3,a
      00157C A3               [24] 4154 	inc	dptr
      00157D 12r00r00         [24] 4155 	lcall	__gptrget
      001580 FC               [12] 4156 	mov	r4,a
      001581 E5*00            [12] 4157 	mov	a,_bp
      001583 24 19            [12] 4158 	add	a,#0x19
      001585 F8               [12] 4159 	mov	r0,a
      001586 E6               [12] 4160 	mov	a,@r0
      001587 C0 E0            [24] 4161 	push	acc
      001589 08               [12] 4162 	inc	r0
      00158A E6               [12] 4163 	mov	a,@r0
      00158B C0 E0            [24] 4164 	push	acc
      00158D 08               [12] 4165 	inc	r0
      00158E E6               [12] 4166 	mov	a,@r0
      00158F C0 E0            [24] 4167 	push	acc
      001591 08               [12] 4168 	inc	r0
      001592 E6               [12] 4169 	mov	a,@r0
      001593 C0 E0            [24] 4170 	push	acc
      001595 8A 82            [24] 4171 	mov	dpl,r2
      001597 8B 83            [24] 4172 	mov	dph,r3
      001599 8C F0            [24] 4173 	mov	b,r4
      00159B 12r00r00         [24] 4174 	lcall	_stack_push
      00159E E5 81            [12] 4175 	mov	a,sp
      0015A0 24 FC            [12] 4176 	add	a,#0xfc
      0015A2 F5 81            [12] 4177 	mov	sp,a
                                   4178 ;	calc.c:204: (void)stack_push(ctx->ss, d0);
      0015A4 E5*00            [12] 4179 	mov	a,_bp
      0015A6 24 04            [12] 4180 	add	a,#0x04
      0015A8 F8               [12] 4181 	mov	r0,a
      0015A9 86 82            [24] 4182 	mov	dpl,@r0
      0015AB 08               [12] 4183 	inc	r0
      0015AC 86 83            [24] 4184 	mov	dph,@r0
      0015AE 08               [12] 4185 	inc	r0
      0015AF 86 F0            [24] 4186 	mov	b,@r0
      0015B1 12r00r00         [24] 4187 	lcall	__gptrget
      0015B4 FA               [12] 4188 	mov	r2,a
      0015B5 A3               [24] 4189 	inc	dptr
      0015B6 12r00r00         [24] 4190 	lcall	__gptrget
      0015B9 FB               [12] 4191 	mov	r3,a
      0015BA A3               [24] 4192 	inc	dptr
      0015BB 12r00r00         [24] 4193 	lcall	__gptrget
      0015BE FC               [12] 4194 	mov	r4,a
      0015BF E5*00            [12] 4195 	mov	a,_bp
      0015C1 24 15            [12] 4196 	add	a,#0x15
      0015C3 F8               [12] 4197 	mov	r0,a
      0015C4 E6               [12] 4198 	mov	a,@r0
      0015C5 C0 E0            [24] 4199 	push	acc
      0015C7 08               [12] 4200 	inc	r0
      0015C8 E6               [12] 4201 	mov	a,@r0
      0015C9 C0 E0            [24] 4202 	push	acc
      0015CB 08               [12] 4203 	inc	r0
      0015CC E6               [12] 4204 	mov	a,@r0
      0015CD C0 E0            [24] 4205 	push	acc
      0015CF 08               [12] 4206 	inc	r0
      0015D0 E6               [12] 4207 	mov	a,@r0
      0015D1 C0 E0            [24] 4208 	push	acc
      0015D3 8A 82            [24] 4209 	mov	dpl,r2
      0015D5 8B 83            [24] 4210 	mov	dph,r3
      0015D7 8C F0            [24] 4211 	mov	b,r4
      0015D9 12r00r00         [24] 4212 	lcall	_stack_push
      0015DC E5 81            [12] 4213 	mov	a,sp
      0015DE 24 FC            [12] 4214 	add	a,#0xfc
      0015E0 F5 81            [12] 4215 	mov	sp,a
                                   4216 ;	calc.c:207: break;
      0015E2 02r2Br95         [24] 4217 	ljmp	00249$
                                   4218 ;	calc.c:208: case 'X':
      0015E5                       4219 00152$:
                                   4220 ;	calc.c:209: t0 = ctx->ps;
      0015E5 E5*00            [12] 4221 	mov	a,_bp
      0015E7 24 12            [12] 4222 	add	a,#0x12
      0015E9 F8               [12] 4223 	mov	r0,a
      0015EA E5*00            [12] 4224 	mov	a,_bp
      0015EC 24 0B            [12] 4225 	add	a,#0x0b
      0015EE F9               [12] 4226 	mov	r1,a
      0015EF 74 11            [12] 4227 	mov	a,#0x11
      0015F1 26               [12] 4228 	add	a,@r0
      0015F2 F7               [12] 4229 	mov	@r1,a
      0015F3 74 40            [12] 4230 	mov	a,#0x40
      0015F5 08               [12] 4231 	inc	r0
      0015F6 36               [12] 4232 	addc	a,@r0
      0015F7 09               [12] 4233 	inc	r1
      0015F8 F7               [12] 4234 	mov	@r1,a
      0015F9 08               [12] 4235 	inc	r0
      0015FA 09               [12] 4236 	inc	r1
      0015FB E6               [12] 4237 	mov	a,@r0
      0015FC F7               [12] 4238 	mov	@r1,a
      0015FD E5*00            [12] 4239 	mov	a,_bp
      0015FF 24 0B            [12] 4240 	add	a,#0x0b
      001601 F8               [12] 4241 	mov	r0,a
      001602 86 82            [24] 4242 	mov	dpl,@r0
      001604 08               [12] 4243 	inc	r0
      001605 86 83            [24] 4244 	mov	dph,@r0
      001607 08               [12] 4245 	inc	r0
      001608 86 F0            [24] 4246 	mov	b,@r0
      00160A 12r00r00         [24] 4247 	lcall	__gptrget
      00160D FF               [12] 4248 	mov	r7,a
      00160E A3               [24] 4249 	inc	dptr
      00160F 12r00r00         [24] 4250 	lcall	__gptrget
      001612 FE               [12] 4251 	mov	r6,a
      001613 A3               [24] 4252 	inc	dptr
      001614 12r00r00         [24] 4253 	lcall	__gptrget
      001617 FD               [12] 4254 	mov	r5,a
                                   4255 ;	calc.c:210: ctx->ps = ctx->ss;
      001618 E5*00            [12] 4256 	mov	a,_bp
      00161A 24 12            [12] 4257 	add	a,#0x12
      00161C F8               [12] 4258 	mov	r0,a
      00161D E5*00            [12] 4259 	mov	a,_bp
      00161F 24 07            [12] 4260 	add	a,#0x07
      001621 F9               [12] 4261 	mov	r1,a
      001622 74 14            [12] 4262 	mov	a,#0x14
      001624 26               [12] 4263 	add	a,@r0
      001625 F7               [12] 4264 	mov	@r1,a
      001626 74 40            [12] 4265 	mov	a,#0x40
      001628 08               [12] 4266 	inc	r0
      001629 36               [12] 4267 	addc	a,@r0
      00162A 09               [12] 4268 	inc	r1
      00162B F7               [12] 4269 	mov	@r1,a
      00162C 08               [12] 4270 	inc	r0
      00162D 09               [12] 4271 	inc	r1
      00162E E6               [12] 4272 	mov	a,@r0
      00162F F7               [12] 4273 	mov	@r1,a
      001630 E5*00            [12] 4274 	mov	a,_bp
      001632 24 07            [12] 4275 	add	a,#0x07
      001634 F8               [12] 4276 	mov	r0,a
      001635 86 82            [24] 4277 	mov	dpl,@r0
      001637 08               [12] 4278 	inc	r0
      001638 86 83            [24] 4279 	mov	dph,@r0
      00163A 08               [12] 4280 	inc	r0
      00163B 86 F0            [24] 4281 	mov	b,@r0
      00163D 12r00r00         [24] 4282 	lcall	__gptrget
      001640 FA               [12] 4283 	mov	r2,a
      001641 A3               [24] 4284 	inc	dptr
      001642 12r00r00         [24] 4285 	lcall	__gptrget
      001645 FB               [12] 4286 	mov	r3,a
      001646 A3               [24] 4287 	inc	dptr
      001647 12r00r00         [24] 4288 	lcall	__gptrget
      00164A FC               [12] 4289 	mov	r4,a
      00164B E5*00            [12] 4290 	mov	a,_bp
      00164D 24 0B            [12] 4291 	add	a,#0x0b
      00164F F8               [12] 4292 	mov	r0,a
      001650 86 82            [24] 4293 	mov	dpl,@r0
      001652 08               [12] 4294 	inc	r0
      001653 86 83            [24] 4295 	mov	dph,@r0
      001655 08               [12] 4296 	inc	r0
      001656 86 F0            [24] 4297 	mov	b,@r0
      001658 EA               [12] 4298 	mov	a,r2
      001659 12r00r00         [24] 4299 	lcall	__gptrput
      00165C A3               [24] 4300 	inc	dptr
      00165D EB               [12] 4301 	mov	a,r3
      00165E 12r00r00         [24] 4302 	lcall	__gptrput
      001661 A3               [24] 4303 	inc	dptr
      001662 EC               [12] 4304 	mov	a,r4
      001663 12r00r00         [24] 4305 	lcall	__gptrput
                                   4306 ;	calc.c:211: ctx->ss = t0;
      001666 E5*00            [12] 4307 	mov	a,_bp
      001668 24 07            [12] 4308 	add	a,#0x07
      00166A F8               [12] 4309 	mov	r0,a
      00166B 86 82            [24] 4310 	mov	dpl,@r0
      00166D 08               [12] 4311 	inc	r0
      00166E 86 83            [24] 4312 	mov	dph,@r0
      001670 08               [12] 4313 	inc	r0
      001671 86 F0            [24] 4314 	mov	b,@r0
      001673 EF               [12] 4315 	mov	a,r7
      001674 12r00r00         [24] 4316 	lcall	__gptrput
      001677 A3               [24] 4317 	inc	dptr
      001678 EE               [12] 4318 	mov	a,r6
      001679 12r00r00         [24] 4319 	lcall	__gptrput
      00167C A3               [24] 4320 	inc	dptr
      00167D ED               [12] 4321 	mov	a,r5
      00167E 12r00r00         [24] 4322 	lcall	__gptrput
                                   4323 ;	calc.c:212: break;
      001681 02r2Br95         [24] 4324 	ljmp	00249$
                                   4325 ;	calc.c:213: case '+':
      001684                       4326 00153$:
                                   4327 ;	calc.c:214: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      001684 E5*00            [12] 4328 	mov	a,_bp
      001686 24 15            [12] 4329 	add	a,#0x15
      001688 FF               [12] 4330 	mov	r7,a
      001689 7E 00            [12] 4331 	mov	r6,#0x00
      00168B 7D 40            [12] 4332 	mov	r5,#0x40
      00168D E5*00            [12] 4333 	mov	a,_bp
      00168F 24 12            [12] 4334 	add	a,#0x12
      001691 F8               [12] 4335 	mov	r0,a
      001692 E5*00            [12] 4336 	mov	a,_bp
      001694 24 0B            [12] 4337 	add	a,#0x0b
      001696 F9               [12] 4338 	mov	r1,a
      001697 74 11            [12] 4339 	mov	a,#0x11
      001699 26               [12] 4340 	add	a,@r0
      00169A F7               [12] 4341 	mov	@r1,a
      00169B 74 40            [12] 4342 	mov	a,#0x40
      00169D 08               [12] 4343 	inc	r0
      00169E 36               [12] 4344 	addc	a,@r0
      00169F 09               [12] 4345 	inc	r1
      0016A0 F7               [12] 4346 	mov	@r1,a
      0016A1 08               [12] 4347 	inc	r0
      0016A2 09               [12] 4348 	inc	r1
      0016A3 E6               [12] 4349 	mov	a,@r0
      0016A4 F7               [12] 4350 	mov	@r1,a
      0016A5 E5*00            [12] 4351 	mov	a,_bp
      0016A7 24 0B            [12] 4352 	add	a,#0x0b
      0016A9 F8               [12] 4353 	mov	r0,a
      0016AA 86 82            [24] 4354 	mov	dpl,@r0
      0016AC 08               [12] 4355 	inc	r0
      0016AD 86 83            [24] 4356 	mov	dph,@r0
      0016AF 08               [12] 4357 	inc	r0
      0016B0 86 F0            [24] 4358 	mov	b,@r0
      0016B2 12r00r00         [24] 4359 	lcall	__gptrget
      0016B5 FA               [12] 4360 	mov	r2,a
      0016B6 A3               [24] 4361 	inc	dptr
      0016B7 12r00r00         [24] 4362 	lcall	__gptrget
      0016BA FB               [12] 4363 	mov	r3,a
      0016BB A3               [24] 4364 	inc	dptr
      0016BC 12r00r00         [24] 4365 	lcall	__gptrget
      0016BF FC               [12] 4366 	mov	r4,a
      0016C0 C0 07            [24] 4367 	push	ar7
      0016C2 C0 06            [24] 4368 	push	ar6
      0016C4 C0 05            [24] 4369 	push	ar5
      0016C6 8A 82            [24] 4370 	mov	dpl,r2
      0016C8 8B 83            [24] 4371 	mov	dph,r3
      0016CA 8C F0            [24] 4372 	mov	b,r4
      0016CC 12r00r00         [24] 4373 	lcall	_stack_pop
      0016CF AB 82            [24] 4374 	mov	r3,dpl
      0016D1 AC 83            [24] 4375 	mov	r4,dph
      0016D3 15 81            [12] 4376 	dec	sp
      0016D5 15 81            [12] 4377 	dec	sp
      0016D7 15 81            [12] 4378 	dec	sp
      0016D9 EB               [12] 4379 	mov	a,r3
      0016DA 4C               [12] 4380 	orl	a,r4
      0016DB 70 25            [24] 4381 	jnz	00158$
      0016DD 7Fr4E            [12] 4382 	mov	r7,#___str_10
      0016DF 7Es00            [12] 4383 	mov	r6,#(___str_10 >> 8)
      0016E1 7D 80            [12] 4384 	mov	r5,#0x80
                                   4385 ;	calc.c:51: return;
      0016E3                       4386 00426$:
                                   4387 ;	calc.c:49: for (; *s; s++) putchar(*s);
      0016E3 8F 82            [24] 4388 	mov	dpl,r7
      0016E5 8E 83            [24] 4389 	mov	dph,r6
      0016E7 8D F0            [24] 4390 	mov	b,r5
      0016E9 12r00r00         [24] 4391 	lcall	__gptrget
      0016EC FC               [12] 4392 	mov	r4,a
      0016ED 70 03            [24] 4393 	jnz	01326$
      0016EF 02r2Br95         [24] 4394 	ljmp	00249$
      0016F2                       4395 01326$:
      0016F2 7B 00            [12] 4396 	mov	r3,#0x00
      0016F4 8C 82            [24] 4397 	mov	dpl,r4
      0016F6 8B 83            [24] 4398 	mov	dph,r3
      0016F8 12r00r00         [24] 4399 	lcall	_putchar
      0016FB 0F               [12] 4400 	inc	r7
                                   4401 ;	calc.c:214: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      0016FC BF 00 E4         [24] 4402 	cjne	r7,#0x00,00426$
      0016FF 0E               [12] 4403 	inc	r6
      001700 80 E1            [24] 4404 	sjmp	00426$
      001702                       4405 00158$:
                                   4406 ;	calc.c:215: else if (!stack_pop(ctx->ps, &d1)) {
      001702 E5*00            [12] 4407 	mov	a,_bp
      001704 24 19            [12] 4408 	add	a,#0x19
      001706 FF               [12] 4409 	mov	r7,a
      001707 7E 00            [12] 4410 	mov	r6,#0x00
      001709 7D 40            [12] 4411 	mov	r5,#0x40
      00170B E5*00            [12] 4412 	mov	a,_bp
      00170D 24 0B            [12] 4413 	add	a,#0x0b
      00170F F8               [12] 4414 	mov	r0,a
      001710 86 82            [24] 4415 	mov	dpl,@r0
      001712 08               [12] 4416 	inc	r0
      001713 86 83            [24] 4417 	mov	dph,@r0
      001715 08               [12] 4418 	inc	r0
      001716 86 F0            [24] 4419 	mov	b,@r0
      001718 12r00r00         [24] 4420 	lcall	__gptrget
      00171B FA               [12] 4421 	mov	r2,a
      00171C A3               [24] 4422 	inc	dptr
      00171D 12r00r00         [24] 4423 	lcall	__gptrget
      001720 FB               [12] 4424 	mov	r3,a
      001721 A3               [24] 4425 	inc	dptr
      001722 12r00r00         [24] 4426 	lcall	__gptrget
      001725 FC               [12] 4427 	mov	r4,a
      001726 C0 07            [24] 4428 	push	ar7
      001728 C0 06            [24] 4429 	push	ar6
      00172A C0 05            [24] 4430 	push	ar5
      00172C 8A 82            [24] 4431 	mov	dpl,r2
      00172E 8B 83            [24] 4432 	mov	dph,r3
      001730 8C F0            [24] 4433 	mov	b,r4
      001732 12r00r00         [24] 4434 	lcall	_stack_pop
      001735 AB 82            [24] 4435 	mov	r3,dpl
      001737 AC 83            [24] 4436 	mov	r4,dph
      001739 15 81            [12] 4437 	dec	sp
      00173B 15 81            [12] 4438 	dec	sp
      00173D 15 81            [12] 4439 	dec	sp
      00173F EB               [12] 4440 	mov	a,r3
      001740 4C               [12] 4441 	orl	a,r4
      001741 70 63            [24] 4442 	jnz	00155$
                                   4443 ;	calc.c:216: (void)stack_push(ctx->ps, d0);
      001743 E5*00            [12] 4444 	mov	a,_bp
      001745 24 0B            [12] 4445 	add	a,#0x0b
      001747 F8               [12] 4446 	mov	r0,a
      001748 86 82            [24] 4447 	mov	dpl,@r0
      00174A 08               [12] 4448 	inc	r0
      00174B 86 83            [24] 4449 	mov	dph,@r0
      00174D 08               [12] 4450 	inc	r0
      00174E 86 F0            [24] 4451 	mov	b,@r0
      001750 12r00r00         [24] 4452 	lcall	__gptrget
      001753 FA               [12] 4453 	mov	r2,a
      001754 A3               [24] 4454 	inc	dptr
      001755 12r00r00         [24] 4455 	lcall	__gptrget
      001758 FB               [12] 4456 	mov	r3,a
      001759 A3               [24] 4457 	inc	dptr
      00175A 12r00r00         [24] 4458 	lcall	__gptrget
      00175D FC               [12] 4459 	mov	r4,a
      00175E E5*00            [12] 4460 	mov	a,_bp
      001760 24 15            [12] 4461 	add	a,#0x15
      001762 F8               [12] 4462 	mov	r0,a
      001763 E6               [12] 4463 	mov	a,@r0
      001764 C0 E0            [24] 4464 	push	acc
      001766 08               [12] 4465 	inc	r0
      001767 E6               [12] 4466 	mov	a,@r0
      001768 C0 E0            [24] 4467 	push	acc
      00176A 08               [12] 4468 	inc	r0
      00176B E6               [12] 4469 	mov	a,@r0
      00176C C0 E0            [24] 4470 	push	acc
      00176E 08               [12] 4471 	inc	r0
      00176F E6               [12] 4472 	mov	a,@r0
      001770 C0 E0            [24] 4473 	push	acc
      001772 8A 82            [24] 4474 	mov	dpl,r2
      001774 8B 83            [24] 4475 	mov	dph,r3
      001776 8C F0            [24] 4476 	mov	b,r4
      001778 12r00r00         [24] 4477 	lcall	_stack_push
      00177B E5 81            [12] 4478 	mov	a,sp
      00177D 24 FC            [12] 4479 	add	a,#0xfc
      00177F F5 81            [12] 4480 	mov	sp,a
                                   4481 ;	calc.c:217: printstr("\r\nstack underflow\r\n");
      001781 7Fr4E            [12] 4482 	mov	r7,#___str_10
      001783 7Es00            [12] 4483 	mov	r6,#(___str_10 >> 8)
      001785 7D 80            [12] 4484 	mov	r5,#0x80
                                   4485 ;	calc.c:51: return;
      001787                       4486 00429$:
                                   4487 ;	calc.c:49: for (; *s; s++) putchar(*s);
      001787 8F 82            [24] 4488 	mov	dpl,r7
      001789 8E 83            [24] 4489 	mov	dph,r6
      00178B 8D F0            [24] 4490 	mov	b,r5
      00178D 12r00r00         [24] 4491 	lcall	__gptrget
      001790 FC               [12] 4492 	mov	r4,a
      001791 70 03            [24] 4493 	jnz	01329$
      001793 02r2Br95         [24] 4494 	ljmp	00249$
      001796                       4495 01329$:
      001796 7B 00            [12] 4496 	mov	r3,#0x00
      001798 8C 82            [24] 4497 	mov	dpl,r4
      00179A 8B 83            [24] 4498 	mov	dph,r3
      00179C 12r00r00         [24] 4499 	lcall	_putchar
      00179F 0F               [12] 4500 	inc	r7
                                   4501 ;	calc.c:217: printstr("\r\nstack underflow\r\n");
      0017A0 BF 00 E4         [24] 4502 	cjne	r7,#0x00,00429$
      0017A3 0E               [12] 4503 	inc	r6
      0017A4 80 E1            [24] 4504 	sjmp	00429$
      0017A6                       4505 00155$:
                                   4506 ;	calc.c:219: d1 += d0;
      0017A6 E5*00            [12] 4507 	mov	a,_bp
      0017A8 24 19            [12] 4508 	add	a,#0x19
      0017AA F8               [12] 4509 	mov	r0,a
      0017AB E5*00            [12] 4510 	mov	a,_bp
      0017AD 24 15            [12] 4511 	add	a,#0x15
      0017AF F9               [12] 4512 	mov	r1,a
      0017B0 E7               [12] 4513 	mov	a,@r1
      0017B1 26               [12] 4514 	add	a,@r0
      0017B2 F6               [12] 4515 	mov	@r0,a
      0017B3 09               [12] 4516 	inc	r1
      0017B4 E7               [12] 4517 	mov	a,@r1
      0017B5 08               [12] 4518 	inc	r0
      0017B6 36               [12] 4519 	addc	a,@r0
      0017B7 F6               [12] 4520 	mov	@r0,a
      0017B8 09               [12] 4521 	inc	r1
      0017B9 E7               [12] 4522 	mov	a,@r1
      0017BA 08               [12] 4523 	inc	r0
      0017BB 36               [12] 4524 	addc	a,@r0
      0017BC F6               [12] 4525 	mov	@r0,a
      0017BD 09               [12] 4526 	inc	r1
      0017BE E7               [12] 4527 	mov	a,@r1
      0017BF 08               [12] 4528 	inc	r0
      0017C0 36               [12] 4529 	addc	a,@r0
      0017C1 F6               [12] 4530 	mov	@r0,a
                                   4531 ;	calc.c:220: (void)stack_push(ctx->ps, d1);
      0017C2 E5*00            [12] 4532 	mov	a,_bp
      0017C4 24 0B            [12] 4533 	add	a,#0x0b
      0017C6 F8               [12] 4534 	mov	r0,a
      0017C7 86 82            [24] 4535 	mov	dpl,@r0
      0017C9 08               [12] 4536 	inc	r0
      0017CA 86 83            [24] 4537 	mov	dph,@r0
      0017CC 08               [12] 4538 	inc	r0
      0017CD 86 F0            [24] 4539 	mov	b,@r0
      0017CF 12r00r00         [24] 4540 	lcall	__gptrget
      0017D2 FA               [12] 4541 	mov	r2,a
      0017D3 A3               [24] 4542 	inc	dptr
      0017D4 12r00r00         [24] 4543 	lcall	__gptrget
      0017D7 FB               [12] 4544 	mov	r3,a
      0017D8 A3               [24] 4545 	inc	dptr
      0017D9 12r00r00         [24] 4546 	lcall	__gptrget
      0017DC FC               [12] 4547 	mov	r4,a
      0017DD E5*00            [12] 4548 	mov	a,_bp
      0017DF 24 19            [12] 4549 	add	a,#0x19
      0017E1 F8               [12] 4550 	mov	r0,a
      0017E2 E6               [12] 4551 	mov	a,@r0
      0017E3 C0 E0            [24] 4552 	push	acc
      0017E5 08               [12] 4553 	inc	r0
      0017E6 E6               [12] 4554 	mov	a,@r0
      0017E7 C0 E0            [24] 4555 	push	acc
      0017E9 08               [12] 4556 	inc	r0
      0017EA E6               [12] 4557 	mov	a,@r0
      0017EB C0 E0            [24] 4558 	push	acc
      0017ED 08               [12] 4559 	inc	r0
      0017EE E6               [12] 4560 	mov	a,@r0
      0017EF C0 E0            [24] 4561 	push	acc
      0017F1 8A 82            [24] 4562 	mov	dpl,r2
      0017F3 8B 83            [24] 4563 	mov	dph,r3
      0017F5 8C F0            [24] 4564 	mov	b,r4
      0017F7 12r00r00         [24] 4565 	lcall	_stack_push
      0017FA E5 81            [12] 4566 	mov	a,sp
      0017FC 24 FC            [12] 4567 	add	a,#0xfc
      0017FE F5 81            [12] 4568 	mov	sp,a
                                   4569 ;	calc.c:222: break;
      001800 02r2Br95         [24] 4570 	ljmp	00249$
                                   4571 ;	calc.c:223: case '-':
      001803                       4572 00160$:
                                   4573 ;	calc.c:224: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      001803 E5*00            [12] 4574 	mov	a,_bp
      001805 24 15            [12] 4575 	add	a,#0x15
      001807 FF               [12] 4576 	mov	r7,a
      001808 7E 00            [12] 4577 	mov	r6,#0x00
      00180A 7D 40            [12] 4578 	mov	r5,#0x40
      00180C E5*00            [12] 4579 	mov	a,_bp
      00180E 24 12            [12] 4580 	add	a,#0x12
      001810 F8               [12] 4581 	mov	r0,a
      001811 E5*00            [12] 4582 	mov	a,_bp
      001813 24 0B            [12] 4583 	add	a,#0x0b
      001815 F9               [12] 4584 	mov	r1,a
      001816 74 11            [12] 4585 	mov	a,#0x11
      001818 26               [12] 4586 	add	a,@r0
      001819 F7               [12] 4587 	mov	@r1,a
      00181A 74 40            [12] 4588 	mov	a,#0x40
      00181C 08               [12] 4589 	inc	r0
      00181D 36               [12] 4590 	addc	a,@r0
      00181E 09               [12] 4591 	inc	r1
      00181F F7               [12] 4592 	mov	@r1,a
      001820 08               [12] 4593 	inc	r0
      001821 09               [12] 4594 	inc	r1
      001822 E6               [12] 4595 	mov	a,@r0
      001823 F7               [12] 4596 	mov	@r1,a
      001824 E5*00            [12] 4597 	mov	a,_bp
      001826 24 0B            [12] 4598 	add	a,#0x0b
      001828 F8               [12] 4599 	mov	r0,a
      001829 86 82            [24] 4600 	mov	dpl,@r0
      00182B 08               [12] 4601 	inc	r0
      00182C 86 83            [24] 4602 	mov	dph,@r0
      00182E 08               [12] 4603 	inc	r0
      00182F 86 F0            [24] 4604 	mov	b,@r0
      001831 12r00r00         [24] 4605 	lcall	__gptrget
      001834 FA               [12] 4606 	mov	r2,a
      001835 A3               [24] 4607 	inc	dptr
      001836 12r00r00         [24] 4608 	lcall	__gptrget
      001839 FB               [12] 4609 	mov	r3,a
      00183A A3               [24] 4610 	inc	dptr
      00183B 12r00r00         [24] 4611 	lcall	__gptrget
      00183E FC               [12] 4612 	mov	r4,a
      00183F C0 07            [24] 4613 	push	ar7
      001841 C0 06            [24] 4614 	push	ar6
      001843 C0 05            [24] 4615 	push	ar5
      001845 8A 82            [24] 4616 	mov	dpl,r2
      001847 8B 83            [24] 4617 	mov	dph,r3
      001849 8C F0            [24] 4618 	mov	b,r4
      00184B 12r00r00         [24] 4619 	lcall	_stack_pop
      00184E AB 82            [24] 4620 	mov	r3,dpl
      001850 AC 83            [24] 4621 	mov	r4,dph
      001852 15 81            [12] 4622 	dec	sp
      001854 15 81            [12] 4623 	dec	sp
      001856 15 81            [12] 4624 	dec	sp
      001858 EB               [12] 4625 	mov	a,r3
      001859 4C               [12] 4626 	orl	a,r4
      00185A 70 25            [24] 4627 	jnz	00165$
      00185C 7Fr4E            [12] 4628 	mov	r7,#___str_10
      00185E 7Es00            [12] 4629 	mov	r6,#(___str_10 >> 8)
      001860 7D 80            [12] 4630 	mov	r5,#0x80
                                   4631 ;	calc.c:51: return;
      001862                       4632 00432$:
                                   4633 ;	calc.c:49: for (; *s; s++) putchar(*s);
      001862 8F 82            [24] 4634 	mov	dpl,r7
      001864 8E 83            [24] 4635 	mov	dph,r6
      001866 8D F0            [24] 4636 	mov	b,r5
      001868 12r00r00         [24] 4637 	lcall	__gptrget
      00186B FC               [12] 4638 	mov	r4,a
      00186C 70 03            [24] 4639 	jnz	01332$
      00186E 02r2Br95         [24] 4640 	ljmp	00249$
      001871                       4641 01332$:
      001871 7B 00            [12] 4642 	mov	r3,#0x00
      001873 8C 82            [24] 4643 	mov	dpl,r4
      001875 8B 83            [24] 4644 	mov	dph,r3
      001877 12r00r00         [24] 4645 	lcall	_putchar
      00187A 0F               [12] 4646 	inc	r7
                                   4647 ;	calc.c:224: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      00187B BF 00 E4         [24] 4648 	cjne	r7,#0x00,00432$
      00187E 0E               [12] 4649 	inc	r6
      00187F 80 E1            [24] 4650 	sjmp	00432$
      001881                       4651 00165$:
                                   4652 ;	calc.c:225: else if (!stack_pop(ctx->ps, &d1)) {
      001881 E5*00            [12] 4653 	mov	a,_bp
      001883 24 19            [12] 4654 	add	a,#0x19
      001885 FF               [12] 4655 	mov	r7,a
      001886 7E 00            [12] 4656 	mov	r6,#0x00
      001888 7D 40            [12] 4657 	mov	r5,#0x40
      00188A E5*00            [12] 4658 	mov	a,_bp
      00188C 24 0B            [12] 4659 	add	a,#0x0b
      00188E F8               [12] 4660 	mov	r0,a
      00188F 86 82            [24] 4661 	mov	dpl,@r0
      001891 08               [12] 4662 	inc	r0
      001892 86 83            [24] 4663 	mov	dph,@r0
      001894 08               [12] 4664 	inc	r0
      001895 86 F0            [24] 4665 	mov	b,@r0
      001897 12r00r00         [24] 4666 	lcall	__gptrget
      00189A FA               [12] 4667 	mov	r2,a
      00189B A3               [24] 4668 	inc	dptr
      00189C 12r00r00         [24] 4669 	lcall	__gptrget
      00189F FB               [12] 4670 	mov	r3,a
      0018A0 A3               [24] 4671 	inc	dptr
      0018A1 12r00r00         [24] 4672 	lcall	__gptrget
      0018A4 FC               [12] 4673 	mov	r4,a
      0018A5 C0 07            [24] 4674 	push	ar7
      0018A7 C0 06            [24] 4675 	push	ar6
      0018A9 C0 05            [24] 4676 	push	ar5
      0018AB 8A 82            [24] 4677 	mov	dpl,r2
      0018AD 8B 83            [24] 4678 	mov	dph,r3
      0018AF 8C F0            [24] 4679 	mov	b,r4
      0018B1 12r00r00         [24] 4680 	lcall	_stack_pop
      0018B4 AB 82            [24] 4681 	mov	r3,dpl
      0018B6 AC 83            [24] 4682 	mov	r4,dph
      0018B8 15 81            [12] 4683 	dec	sp
      0018BA 15 81            [12] 4684 	dec	sp
      0018BC 15 81            [12] 4685 	dec	sp
      0018BE EB               [12] 4686 	mov	a,r3
      0018BF 4C               [12] 4687 	orl	a,r4
      0018C0 70 63            [24] 4688 	jnz	00162$
                                   4689 ;	calc.c:226: (void)stack_push(ctx->ps, d0);
      0018C2 E5*00            [12] 4690 	mov	a,_bp
      0018C4 24 0B            [12] 4691 	add	a,#0x0b
      0018C6 F8               [12] 4692 	mov	r0,a
      0018C7 86 82            [24] 4693 	mov	dpl,@r0
      0018C9 08               [12] 4694 	inc	r0
      0018CA 86 83            [24] 4695 	mov	dph,@r0
      0018CC 08               [12] 4696 	inc	r0
      0018CD 86 F0            [24] 4697 	mov	b,@r0
      0018CF 12r00r00         [24] 4698 	lcall	__gptrget
      0018D2 FA               [12] 4699 	mov	r2,a
      0018D3 A3               [24] 4700 	inc	dptr
      0018D4 12r00r00         [24] 4701 	lcall	__gptrget
      0018D7 FB               [12] 4702 	mov	r3,a
      0018D8 A3               [24] 4703 	inc	dptr
      0018D9 12r00r00         [24] 4704 	lcall	__gptrget
      0018DC FC               [12] 4705 	mov	r4,a
      0018DD E5*00            [12] 4706 	mov	a,_bp
      0018DF 24 15            [12] 4707 	add	a,#0x15
      0018E1 F8               [12] 4708 	mov	r0,a
      0018E2 E6               [12] 4709 	mov	a,@r0
      0018E3 C0 E0            [24] 4710 	push	acc
      0018E5 08               [12] 4711 	inc	r0
      0018E6 E6               [12] 4712 	mov	a,@r0
      0018E7 C0 E0            [24] 4713 	push	acc
      0018E9 08               [12] 4714 	inc	r0
      0018EA E6               [12] 4715 	mov	a,@r0
      0018EB C0 E0            [24] 4716 	push	acc
      0018ED 08               [12] 4717 	inc	r0
      0018EE E6               [12] 4718 	mov	a,@r0
      0018EF C0 E0            [24] 4719 	push	acc
      0018F1 8A 82            [24] 4720 	mov	dpl,r2
      0018F3 8B 83            [24] 4721 	mov	dph,r3
      0018F5 8C F0            [24] 4722 	mov	b,r4
      0018F7 12r00r00         [24] 4723 	lcall	_stack_push
      0018FA E5 81            [12] 4724 	mov	a,sp
      0018FC 24 FC            [12] 4725 	add	a,#0xfc
      0018FE F5 81            [12] 4726 	mov	sp,a
                                   4727 ;	calc.c:227: printstr("\r\nstack underflow\r\n");
      001900 7Fr4E            [12] 4728 	mov	r7,#___str_10
      001902 7Es00            [12] 4729 	mov	r6,#(___str_10 >> 8)
      001904 7D 80            [12] 4730 	mov	r5,#0x80
                                   4731 ;	calc.c:51: return;
      001906                       4732 00435$:
                                   4733 ;	calc.c:49: for (; *s; s++) putchar(*s);
      001906 8F 82            [24] 4734 	mov	dpl,r7
      001908 8E 83            [24] 4735 	mov	dph,r6
      00190A 8D F0            [24] 4736 	mov	b,r5
      00190C 12r00r00         [24] 4737 	lcall	__gptrget
      00190F FC               [12] 4738 	mov	r4,a
      001910 70 03            [24] 4739 	jnz	01335$
      001912 02r2Br95         [24] 4740 	ljmp	00249$
      001915                       4741 01335$:
      001915 7B 00            [12] 4742 	mov	r3,#0x00
      001917 8C 82            [24] 4743 	mov	dpl,r4
      001919 8B 83            [24] 4744 	mov	dph,r3
      00191B 12r00r00         [24] 4745 	lcall	_putchar
      00191E 0F               [12] 4746 	inc	r7
                                   4747 ;	calc.c:227: printstr("\r\nstack underflow\r\n");
      00191F BF 00 E4         [24] 4748 	cjne	r7,#0x00,00435$
      001922 0E               [12] 4749 	inc	r6
      001923 80 E1            [24] 4750 	sjmp	00435$
      001925                       4751 00162$:
                                   4752 ;	calc.c:229: d1 -= d0;
      001925 E5*00            [12] 4753 	mov	a,_bp
      001927 24 19            [12] 4754 	add	a,#0x19
      001929 F8               [12] 4755 	mov	r0,a
      00192A E5*00            [12] 4756 	mov	a,_bp
      00192C 24 15            [12] 4757 	add	a,#0x15
      00192E F9               [12] 4758 	mov	r1,a
      00192F E6               [12] 4759 	mov	a,@r0
      001930 C3               [12] 4760 	clr	c
      001931 97               [12] 4761 	subb	a,@r1
      001932 F6               [12] 4762 	mov	@r0,a
      001933 08               [12] 4763 	inc	r0
      001934 E6               [12] 4764 	mov	a,@r0
      001935 09               [12] 4765 	inc	r1
      001936 97               [12] 4766 	subb	a,@r1
      001937 F6               [12] 4767 	mov	@r0,a
      001938 08               [12] 4768 	inc	r0
      001939 E6               [12] 4769 	mov	a,@r0
      00193A 09               [12] 4770 	inc	r1
      00193B 97               [12] 4771 	subb	a,@r1
      00193C F6               [12] 4772 	mov	@r0,a
      00193D 08               [12] 4773 	inc	r0
      00193E E6               [12] 4774 	mov	a,@r0
      00193F 09               [12] 4775 	inc	r1
      001940 97               [12] 4776 	subb	a,@r1
      001941 F6               [12] 4777 	mov	@r0,a
                                   4778 ;	calc.c:230: (void)stack_push(ctx->ps, d1);
      001942 E5*00            [12] 4779 	mov	a,_bp
      001944 24 0B            [12] 4780 	add	a,#0x0b
      001946 F8               [12] 4781 	mov	r0,a
      001947 86 82            [24] 4782 	mov	dpl,@r0
      001949 08               [12] 4783 	inc	r0
      00194A 86 83            [24] 4784 	mov	dph,@r0
      00194C 08               [12] 4785 	inc	r0
      00194D 86 F0            [24] 4786 	mov	b,@r0
      00194F 12r00r00         [24] 4787 	lcall	__gptrget
      001952 FA               [12] 4788 	mov	r2,a
      001953 A3               [24] 4789 	inc	dptr
      001954 12r00r00         [24] 4790 	lcall	__gptrget
      001957 FB               [12] 4791 	mov	r3,a
      001958 A3               [24] 4792 	inc	dptr
      001959 12r00r00         [24] 4793 	lcall	__gptrget
      00195C FC               [12] 4794 	mov	r4,a
      00195D E5*00            [12] 4795 	mov	a,_bp
      00195F 24 19            [12] 4796 	add	a,#0x19
      001961 F8               [12] 4797 	mov	r0,a
      001962 E6               [12] 4798 	mov	a,@r0
      001963 C0 E0            [24] 4799 	push	acc
      001965 08               [12] 4800 	inc	r0
      001966 E6               [12] 4801 	mov	a,@r0
      001967 C0 E0            [24] 4802 	push	acc
      001969 08               [12] 4803 	inc	r0
      00196A E6               [12] 4804 	mov	a,@r0
      00196B C0 E0            [24] 4805 	push	acc
      00196D 08               [12] 4806 	inc	r0
      00196E E6               [12] 4807 	mov	a,@r0
      00196F C0 E0            [24] 4808 	push	acc
      001971 8A 82            [24] 4809 	mov	dpl,r2
      001973 8B 83            [24] 4810 	mov	dph,r3
      001975 8C F0            [24] 4811 	mov	b,r4
      001977 12r00r00         [24] 4812 	lcall	_stack_push
      00197A E5 81            [12] 4813 	mov	a,sp
      00197C 24 FC            [12] 4814 	add	a,#0xfc
      00197E F5 81            [12] 4815 	mov	sp,a
                                   4816 ;	calc.c:232: break;
      001980 02r2Br95         [24] 4817 	ljmp	00249$
                                   4818 ;	calc.c:233: case '*':
      001983                       4819 00167$:
                                   4820 ;	calc.c:234: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      001983 E5*00            [12] 4821 	mov	a,_bp
      001985 24 15            [12] 4822 	add	a,#0x15
      001987 FF               [12] 4823 	mov	r7,a
      001988 7E 00            [12] 4824 	mov	r6,#0x00
      00198A 7D 40            [12] 4825 	mov	r5,#0x40
      00198C E5*00            [12] 4826 	mov	a,_bp
      00198E 24 12            [12] 4827 	add	a,#0x12
      001990 F8               [12] 4828 	mov	r0,a
      001991 E5*00            [12] 4829 	mov	a,_bp
      001993 24 0B            [12] 4830 	add	a,#0x0b
      001995 F9               [12] 4831 	mov	r1,a
      001996 74 11            [12] 4832 	mov	a,#0x11
      001998 26               [12] 4833 	add	a,@r0
      001999 F7               [12] 4834 	mov	@r1,a
      00199A 74 40            [12] 4835 	mov	a,#0x40
      00199C 08               [12] 4836 	inc	r0
      00199D 36               [12] 4837 	addc	a,@r0
      00199E 09               [12] 4838 	inc	r1
      00199F F7               [12] 4839 	mov	@r1,a
      0019A0 08               [12] 4840 	inc	r0
      0019A1 09               [12] 4841 	inc	r1
      0019A2 E6               [12] 4842 	mov	a,@r0
      0019A3 F7               [12] 4843 	mov	@r1,a
      0019A4 E5*00            [12] 4844 	mov	a,_bp
      0019A6 24 0B            [12] 4845 	add	a,#0x0b
      0019A8 F8               [12] 4846 	mov	r0,a
      0019A9 86 82            [24] 4847 	mov	dpl,@r0
      0019AB 08               [12] 4848 	inc	r0
      0019AC 86 83            [24] 4849 	mov	dph,@r0
      0019AE 08               [12] 4850 	inc	r0
      0019AF 86 F0            [24] 4851 	mov	b,@r0
      0019B1 12r00r00         [24] 4852 	lcall	__gptrget
      0019B4 FA               [12] 4853 	mov	r2,a
      0019B5 A3               [24] 4854 	inc	dptr
      0019B6 12r00r00         [24] 4855 	lcall	__gptrget
      0019B9 FB               [12] 4856 	mov	r3,a
      0019BA A3               [24] 4857 	inc	dptr
      0019BB 12r00r00         [24] 4858 	lcall	__gptrget
      0019BE FC               [12] 4859 	mov	r4,a
      0019BF C0 07            [24] 4860 	push	ar7
      0019C1 C0 06            [24] 4861 	push	ar6
      0019C3 C0 05            [24] 4862 	push	ar5
      0019C5 8A 82            [24] 4863 	mov	dpl,r2
      0019C7 8B 83            [24] 4864 	mov	dph,r3
      0019C9 8C F0            [24] 4865 	mov	b,r4
      0019CB 12r00r00         [24] 4866 	lcall	_stack_pop
      0019CE AB 82            [24] 4867 	mov	r3,dpl
      0019D0 AC 83            [24] 4868 	mov	r4,dph
      0019D2 15 81            [12] 4869 	dec	sp
      0019D4 15 81            [12] 4870 	dec	sp
      0019D6 15 81            [12] 4871 	dec	sp
      0019D8 EB               [12] 4872 	mov	a,r3
      0019D9 4C               [12] 4873 	orl	a,r4
      0019DA 70 25            [24] 4874 	jnz	00172$
      0019DC 7Fr4E            [12] 4875 	mov	r7,#___str_10
      0019DE 7Es00            [12] 4876 	mov	r6,#(___str_10 >> 8)
      0019E0 7D 80            [12] 4877 	mov	r5,#0x80
                                   4878 ;	calc.c:51: return;
      0019E2                       4879 00438$:
                                   4880 ;	calc.c:49: for (; *s; s++) putchar(*s);
      0019E2 8F 82            [24] 4881 	mov	dpl,r7
      0019E4 8E 83            [24] 4882 	mov	dph,r6
      0019E6 8D F0            [24] 4883 	mov	b,r5
      0019E8 12r00r00         [24] 4884 	lcall	__gptrget
      0019EB FC               [12] 4885 	mov	r4,a
      0019EC 70 03            [24] 4886 	jnz	01338$
      0019EE 02r2Br95         [24] 4887 	ljmp	00249$
      0019F1                       4888 01338$:
      0019F1 7B 00            [12] 4889 	mov	r3,#0x00
      0019F3 8C 82            [24] 4890 	mov	dpl,r4
      0019F5 8B 83            [24] 4891 	mov	dph,r3
      0019F7 12r00r00         [24] 4892 	lcall	_putchar
      0019FA 0F               [12] 4893 	inc	r7
                                   4894 ;	calc.c:234: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      0019FB BF 00 E4         [24] 4895 	cjne	r7,#0x00,00438$
      0019FE 0E               [12] 4896 	inc	r6
      0019FF 80 E1            [24] 4897 	sjmp	00438$
      001A01                       4898 00172$:
                                   4899 ;	calc.c:235: else if (!stack_pop(ctx->ps, &d1)) {
      001A01 E5*00            [12] 4900 	mov	a,_bp
      001A03 24 19            [12] 4901 	add	a,#0x19
      001A05 FF               [12] 4902 	mov	r7,a
      001A06 7E 00            [12] 4903 	mov	r6,#0x00
      001A08 7D 40            [12] 4904 	mov	r5,#0x40
      001A0A E5*00            [12] 4905 	mov	a,_bp
      001A0C 24 0B            [12] 4906 	add	a,#0x0b
      001A0E F8               [12] 4907 	mov	r0,a
      001A0F 86 82            [24] 4908 	mov	dpl,@r0
      001A11 08               [12] 4909 	inc	r0
      001A12 86 83            [24] 4910 	mov	dph,@r0
      001A14 08               [12] 4911 	inc	r0
      001A15 86 F0            [24] 4912 	mov	b,@r0
      001A17 12r00r00         [24] 4913 	lcall	__gptrget
      001A1A FA               [12] 4914 	mov	r2,a
      001A1B A3               [24] 4915 	inc	dptr
      001A1C 12r00r00         [24] 4916 	lcall	__gptrget
      001A1F FB               [12] 4917 	mov	r3,a
      001A20 A3               [24] 4918 	inc	dptr
      001A21 12r00r00         [24] 4919 	lcall	__gptrget
      001A24 FC               [12] 4920 	mov	r4,a
      001A25 C0 07            [24] 4921 	push	ar7
      001A27 C0 06            [24] 4922 	push	ar6
      001A29 C0 05            [24] 4923 	push	ar5
      001A2B 8A 82            [24] 4924 	mov	dpl,r2
      001A2D 8B 83            [24] 4925 	mov	dph,r3
      001A2F 8C F0            [24] 4926 	mov	b,r4
      001A31 12r00r00         [24] 4927 	lcall	_stack_pop
      001A34 AB 82            [24] 4928 	mov	r3,dpl
      001A36 AC 83            [24] 4929 	mov	r4,dph
      001A38 15 81            [12] 4930 	dec	sp
      001A3A 15 81            [12] 4931 	dec	sp
      001A3C 15 81            [12] 4932 	dec	sp
      001A3E EB               [12] 4933 	mov	a,r3
      001A3F 4C               [12] 4934 	orl	a,r4
      001A40 70 63            [24] 4935 	jnz	00169$
                                   4936 ;	calc.c:236: (void)stack_push(ctx->ps, d0);
      001A42 E5*00            [12] 4937 	mov	a,_bp
      001A44 24 0B            [12] 4938 	add	a,#0x0b
      001A46 F8               [12] 4939 	mov	r0,a
      001A47 86 82            [24] 4940 	mov	dpl,@r0
      001A49 08               [12] 4941 	inc	r0
      001A4A 86 83            [24] 4942 	mov	dph,@r0
      001A4C 08               [12] 4943 	inc	r0
      001A4D 86 F0            [24] 4944 	mov	b,@r0
      001A4F 12r00r00         [24] 4945 	lcall	__gptrget
      001A52 FA               [12] 4946 	mov	r2,a
      001A53 A3               [24] 4947 	inc	dptr
      001A54 12r00r00         [24] 4948 	lcall	__gptrget
      001A57 FB               [12] 4949 	mov	r3,a
      001A58 A3               [24] 4950 	inc	dptr
      001A59 12r00r00         [24] 4951 	lcall	__gptrget
      001A5C FC               [12] 4952 	mov	r4,a
      001A5D E5*00            [12] 4953 	mov	a,_bp
      001A5F 24 15            [12] 4954 	add	a,#0x15
      001A61 F8               [12] 4955 	mov	r0,a
      001A62 E6               [12] 4956 	mov	a,@r0
      001A63 C0 E0            [24] 4957 	push	acc
      001A65 08               [12] 4958 	inc	r0
      001A66 E6               [12] 4959 	mov	a,@r0
      001A67 C0 E0            [24] 4960 	push	acc
      001A69 08               [12] 4961 	inc	r0
      001A6A E6               [12] 4962 	mov	a,@r0
      001A6B C0 E0            [24] 4963 	push	acc
      001A6D 08               [12] 4964 	inc	r0
      001A6E E6               [12] 4965 	mov	a,@r0
      001A6F C0 E0            [24] 4966 	push	acc
      001A71 8A 82            [24] 4967 	mov	dpl,r2
      001A73 8B 83            [24] 4968 	mov	dph,r3
      001A75 8C F0            [24] 4969 	mov	b,r4
      001A77 12r00r00         [24] 4970 	lcall	_stack_push
      001A7A E5 81            [12] 4971 	mov	a,sp
      001A7C 24 FC            [12] 4972 	add	a,#0xfc
      001A7E F5 81            [12] 4973 	mov	sp,a
                                   4974 ;	calc.c:237: printstr("\r\nstack underflow\r\n");
      001A80 7Fr4E            [12] 4975 	mov	r7,#___str_10
      001A82 7Es00            [12] 4976 	mov	r6,#(___str_10 >> 8)
      001A84 7D 80            [12] 4977 	mov	r5,#0x80
                                   4978 ;	calc.c:51: return;
      001A86                       4979 00441$:
                                   4980 ;	calc.c:49: for (; *s; s++) putchar(*s);
      001A86 8F 82            [24] 4981 	mov	dpl,r7
      001A88 8E 83            [24] 4982 	mov	dph,r6
      001A8A 8D F0            [24] 4983 	mov	b,r5
      001A8C 12r00r00         [24] 4984 	lcall	__gptrget
      001A8F FC               [12] 4985 	mov	r4,a
      001A90 70 03            [24] 4986 	jnz	01341$
      001A92 02r2Br95         [24] 4987 	ljmp	00249$
      001A95                       4988 01341$:
      001A95 7B 00            [12] 4989 	mov	r3,#0x00
      001A97 8C 82            [24] 4990 	mov	dpl,r4
      001A99 8B 83            [24] 4991 	mov	dph,r3
      001A9B 12r00r00         [24] 4992 	lcall	_putchar
      001A9E 0F               [12] 4993 	inc	r7
                                   4994 ;	calc.c:237: printstr("\r\nstack underflow\r\n");
      001A9F BF 00 E4         [24] 4995 	cjne	r7,#0x00,00441$
      001AA2 0E               [12] 4996 	inc	r6
      001AA3 80 E1            [24] 4997 	sjmp	00441$
      001AA5                       4998 00169$:
                                   4999 ;	calc.c:239: d1 *= d0;
      001AA5 E5*00            [12] 5000 	mov	a,_bp
      001AA7 24 15            [12] 5001 	add	a,#0x15
      001AA9 F8               [12] 5002 	mov	r0,a
      001AAA E6               [12] 5003 	mov	a,@r0
      001AAB C0 E0            [24] 5004 	push	acc
      001AAD 08               [12] 5005 	inc	r0
      001AAE E6               [12] 5006 	mov	a,@r0
      001AAF C0 E0            [24] 5007 	push	acc
      001AB1 08               [12] 5008 	inc	r0
      001AB2 E6               [12] 5009 	mov	a,@r0
      001AB3 C0 E0            [24] 5010 	push	acc
      001AB5 08               [12] 5011 	inc	r0
      001AB6 E6               [12] 5012 	mov	a,@r0
      001AB7 C0 E0            [24] 5013 	push	acc
      001AB9 E5*00            [12] 5014 	mov	a,_bp
      001ABB 24 19            [12] 5015 	add	a,#0x19
      001ABD F8               [12] 5016 	mov	r0,a
      001ABE 86 82            [24] 5017 	mov	dpl,@r0
      001AC0 08               [12] 5018 	inc	r0
      001AC1 86 83            [24] 5019 	mov	dph,@r0
      001AC3 08               [12] 5020 	inc	r0
      001AC4 86 F0            [24] 5021 	mov	b,@r0
      001AC6 08               [12] 5022 	inc	r0
      001AC7 E6               [12] 5023 	mov	a,@r0
      001AC8 12r00r00         [24] 5024 	lcall	__mullong
      001ACB AF 82            [24] 5025 	mov	r7,dpl
      001ACD AE 83            [24] 5026 	mov	r6,dph
      001ACF AD F0            [24] 5027 	mov	r5,b
      001AD1 FC               [12] 5028 	mov	r4,a
      001AD2 E5 81            [12] 5029 	mov	a,sp
      001AD4 24 FC            [12] 5030 	add	a,#0xfc
      001AD6 F5 81            [12] 5031 	mov	sp,a
      001AD8 E5*00            [12] 5032 	mov	a,_bp
      001ADA 24 19            [12] 5033 	add	a,#0x19
      001ADC F8               [12] 5034 	mov	r0,a
      001ADD A6 07            [24] 5035 	mov	@r0,ar7
      001ADF 08               [12] 5036 	inc	r0
      001AE0 A6 06            [24] 5037 	mov	@r0,ar6
      001AE2 08               [12] 5038 	inc	r0
      001AE3 A6 05            [24] 5039 	mov	@r0,ar5
      001AE5 08               [12] 5040 	inc	r0
      001AE6 A6 04            [24] 5041 	mov	@r0,ar4
                                   5042 ;	calc.c:240: (void)stack_push(ctx->ps, d1);
      001AE8 E5*00            [12] 5043 	mov	a,_bp
      001AEA 24 0B            [12] 5044 	add	a,#0x0b
      001AEC F8               [12] 5045 	mov	r0,a
      001AED 86 82            [24] 5046 	mov	dpl,@r0
      001AEF 08               [12] 5047 	inc	r0
      001AF0 86 83            [24] 5048 	mov	dph,@r0
      001AF2 08               [12] 5049 	inc	r0
      001AF3 86 F0            [24] 5050 	mov	b,@r0
      001AF5 12r00r00         [24] 5051 	lcall	__gptrget
      001AF8 FA               [12] 5052 	mov	r2,a
      001AF9 A3               [24] 5053 	inc	dptr
      001AFA 12r00r00         [24] 5054 	lcall	__gptrget
      001AFD FB               [12] 5055 	mov	r3,a
      001AFE A3               [24] 5056 	inc	dptr
      001AFF 12r00r00         [24] 5057 	lcall	__gptrget
      001B02 FC               [12] 5058 	mov	r4,a
      001B03 E5*00            [12] 5059 	mov	a,_bp
      001B05 24 19            [12] 5060 	add	a,#0x19
      001B07 F8               [12] 5061 	mov	r0,a
      001B08 E6               [12] 5062 	mov	a,@r0
      001B09 C0 E0            [24] 5063 	push	acc
      001B0B 08               [12] 5064 	inc	r0
      001B0C E6               [12] 5065 	mov	a,@r0
      001B0D C0 E0            [24] 5066 	push	acc
      001B0F 08               [12] 5067 	inc	r0
      001B10 E6               [12] 5068 	mov	a,@r0
      001B11 C0 E0            [24] 5069 	push	acc
      001B13 08               [12] 5070 	inc	r0
      001B14 E6               [12] 5071 	mov	a,@r0
      001B15 C0 E0            [24] 5072 	push	acc
      001B17 8A 82            [24] 5073 	mov	dpl,r2
      001B19 8B 83            [24] 5074 	mov	dph,r3
      001B1B 8C F0            [24] 5075 	mov	b,r4
      001B1D 12r00r00         [24] 5076 	lcall	_stack_push
      001B20 E5 81            [12] 5077 	mov	a,sp
      001B22 24 FC            [12] 5078 	add	a,#0xfc
      001B24 F5 81            [12] 5079 	mov	sp,a
                                   5080 ;	calc.c:242: break;
      001B26 02r2Br95         [24] 5081 	ljmp	00249$
                                   5082 ;	calc.c:244: case '\\':
      001B29                       5083 00175$:
                                   5084 ;	calc.c:245: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      001B29 C0 05            [24] 5085 	push	ar5
      001B2B C0 06            [24] 5086 	push	ar6
      001B2D C0 07            [24] 5087 	push	ar7
      001B2F E5*00            [12] 5088 	mov	a,_bp
      001B31 24 15            [12] 5089 	add	a,#0x15
      001B33 FC               [12] 5090 	mov	r4,a
      001B34 7B 00            [12] 5091 	mov	r3,#0x00
      001B36 7A 40            [12] 5092 	mov	r2,#0x40
      001B38 E5*00            [12] 5093 	mov	a,_bp
      001B3A 24 12            [12] 5094 	add	a,#0x12
      001B3C F8               [12] 5095 	mov	r0,a
      001B3D E5*00            [12] 5096 	mov	a,_bp
      001B3F 24 0B            [12] 5097 	add	a,#0x0b
      001B41 F9               [12] 5098 	mov	r1,a
      001B42 74 11            [12] 5099 	mov	a,#0x11
      001B44 26               [12] 5100 	add	a,@r0
      001B45 F7               [12] 5101 	mov	@r1,a
      001B46 74 40            [12] 5102 	mov	a,#0x40
      001B48 08               [12] 5103 	inc	r0
      001B49 36               [12] 5104 	addc	a,@r0
      001B4A 09               [12] 5105 	inc	r1
      001B4B F7               [12] 5106 	mov	@r1,a
      001B4C 08               [12] 5107 	inc	r0
      001B4D 09               [12] 5108 	inc	r1
      001B4E E6               [12] 5109 	mov	a,@r0
      001B4F F7               [12] 5110 	mov	@r1,a
      001B50 E5*00            [12] 5111 	mov	a,_bp
      001B52 24 0B            [12] 5112 	add	a,#0x0b
      001B54 F8               [12] 5113 	mov	r0,a
      001B55 86 82            [24] 5114 	mov	dpl,@r0
      001B57 08               [12] 5115 	inc	r0
      001B58 86 83            [24] 5116 	mov	dph,@r0
      001B5A 08               [12] 5117 	inc	r0
      001B5B 86 F0            [24] 5118 	mov	b,@r0
      001B5D 12r00r00         [24] 5119 	lcall	__gptrget
      001B60 FD               [12] 5120 	mov	r5,a
      001B61 A3               [24] 5121 	inc	dptr
      001B62 12r00r00         [24] 5122 	lcall	__gptrget
      001B65 FE               [12] 5123 	mov	r6,a
      001B66 A3               [24] 5124 	inc	dptr
      001B67 12r00r00         [24] 5125 	lcall	__gptrget
      001B6A FF               [12] 5126 	mov	r7,a
      001B6B C0 05            [24] 5127 	push	ar5
      001B6D C0 04            [24] 5128 	push	ar4
      001B6F C0 03            [24] 5129 	push	ar3
      001B71 C0 02            [24] 5130 	push	ar2
      001B73 8D 82            [24] 5131 	mov	dpl,r5
      001B75 8E 83            [24] 5132 	mov	dph,r6
      001B77 8F F0            [24] 5133 	mov	b,r7
      001B79 12r00r00         [24] 5134 	lcall	_stack_pop
      001B7C AE 82            [24] 5135 	mov	r6,dpl
      001B7E AF 83            [24] 5136 	mov	r7,dph
      001B80 15 81            [12] 5137 	dec	sp
      001B82 15 81            [12] 5138 	dec	sp
      001B84 15 81            [12] 5139 	dec	sp
      001B86 D0 05            [24] 5140 	pop	ar5
      001B88 EE               [12] 5141 	mov	a,r6
      001B89 4F               [12] 5142 	orl	a,r7
      001B8A D0 07            [24] 5143 	pop	ar7
      001B8C D0 06            [24] 5144 	pop	ar6
      001B8E D0 05            [24] 5145 	pop	ar5
      001B90 70 25            [24] 5146 	jnz	00186$
      001B92 7Fr4E            [12] 5147 	mov	r7,#___str_10
      001B94 7Es00            [12] 5148 	mov	r6,#(___str_10 >> 8)
      001B96 7D 80            [12] 5149 	mov	r5,#0x80
                                   5150 ;	calc.c:51: return;
      001B98                       5151 00444$:
                                   5152 ;	calc.c:49: for (; *s; s++) putchar(*s);
      001B98 8F 82            [24] 5153 	mov	dpl,r7
      001B9A 8E 83            [24] 5154 	mov	dph,r6
      001B9C 8D F0            [24] 5155 	mov	b,r5
      001B9E 12r00r00         [24] 5156 	lcall	__gptrget
      001BA1 FC               [12] 5157 	mov	r4,a
      001BA2 70 03            [24] 5158 	jnz	01344$
      001BA4 02r2Br95         [24] 5159 	ljmp	00249$
      001BA7                       5160 01344$:
      001BA7 7B 00            [12] 5161 	mov	r3,#0x00
      001BA9 8C 82            [24] 5162 	mov	dpl,r4
      001BAB 8B 83            [24] 5163 	mov	dph,r3
      001BAD 12r00r00         [24] 5164 	lcall	_putchar
      001BB0 0F               [12] 5165 	inc	r7
                                   5166 ;	calc.c:245: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      001BB1 BF 00 E4         [24] 5167 	cjne	r7,#0x00,00444$
      001BB4 0E               [12] 5168 	inc	r6
      001BB5 80 E1            [24] 5169 	sjmp	00444$
      001BB7                       5170 00186$:
                                   5171 ;	calc.c:246: else if (!stack_pop(ctx->ps, &d1)) {
      001BB7 C0 05            [24] 5172 	push	ar5
      001BB9 C0 06            [24] 5173 	push	ar6
      001BBB C0 07            [24] 5174 	push	ar7
      001BBD E5*00            [12] 5175 	mov	a,_bp
      001BBF 24 19            [12] 5176 	add	a,#0x19
      001BC1 FC               [12] 5177 	mov	r4,a
      001BC2 7B 00            [12] 5178 	mov	r3,#0x00
      001BC4 7A 40            [12] 5179 	mov	r2,#0x40
      001BC6 E5*00            [12] 5180 	mov	a,_bp
      001BC8 24 0B            [12] 5181 	add	a,#0x0b
      001BCA F8               [12] 5182 	mov	r0,a
      001BCB 86 82            [24] 5183 	mov	dpl,@r0
      001BCD 08               [12] 5184 	inc	r0
      001BCE 86 83            [24] 5185 	mov	dph,@r0
      001BD0 08               [12] 5186 	inc	r0
      001BD1 86 F0            [24] 5187 	mov	b,@r0
      001BD3 12r00r00         [24] 5188 	lcall	__gptrget
      001BD6 FD               [12] 5189 	mov	r5,a
      001BD7 A3               [24] 5190 	inc	dptr
      001BD8 12r00r00         [24] 5191 	lcall	__gptrget
      001BDB FE               [12] 5192 	mov	r6,a
      001BDC A3               [24] 5193 	inc	dptr
      001BDD 12r00r00         [24] 5194 	lcall	__gptrget
      001BE0 FF               [12] 5195 	mov	r7,a
      001BE1 C0 05            [24] 5196 	push	ar5
      001BE3 C0 04            [24] 5197 	push	ar4
      001BE5 C0 03            [24] 5198 	push	ar3
      001BE7 C0 02            [24] 5199 	push	ar2
      001BE9 8D 82            [24] 5200 	mov	dpl,r5
      001BEB 8E 83            [24] 5201 	mov	dph,r6
      001BED 8F F0            [24] 5202 	mov	b,r7
      001BEF 12r00r00         [24] 5203 	lcall	_stack_pop
      001BF2 AE 82            [24] 5204 	mov	r6,dpl
      001BF4 AF 83            [24] 5205 	mov	r7,dph
      001BF6 15 81            [12] 5206 	dec	sp
      001BF8 15 81            [12] 5207 	dec	sp
      001BFA 15 81            [12] 5208 	dec	sp
      001BFC D0 05            [24] 5209 	pop	ar5
      001BFE EE               [12] 5210 	mov	a,r6
      001BFF 4F               [12] 5211 	orl	a,r7
      001C00 D0 07            [24] 5212 	pop	ar7
      001C02 D0 06            [24] 5213 	pop	ar6
      001C04 D0 05            [24] 5214 	pop	ar5
      001C06 70 63            [24] 5215 	jnz	00183$
                                   5216 ;	calc.c:247: (void)stack_push(ctx->ps, d0);
      001C08 E5*00            [12] 5217 	mov	a,_bp
      001C0A 24 0B            [12] 5218 	add	a,#0x0b
      001C0C F8               [12] 5219 	mov	r0,a
      001C0D 86 82            [24] 5220 	mov	dpl,@r0
      001C0F 08               [12] 5221 	inc	r0
      001C10 86 83            [24] 5222 	mov	dph,@r0
      001C12 08               [12] 5223 	inc	r0
      001C13 86 F0            [24] 5224 	mov	b,@r0
      001C15 12r00r00         [24] 5225 	lcall	__gptrget
      001C18 FA               [12] 5226 	mov	r2,a
      001C19 A3               [24] 5227 	inc	dptr
      001C1A 12r00r00         [24] 5228 	lcall	__gptrget
      001C1D FB               [12] 5229 	mov	r3,a
      001C1E A3               [24] 5230 	inc	dptr
      001C1F 12r00r00         [24] 5231 	lcall	__gptrget
      001C22 FC               [12] 5232 	mov	r4,a
      001C23 E5*00            [12] 5233 	mov	a,_bp
      001C25 24 15            [12] 5234 	add	a,#0x15
      001C27 F8               [12] 5235 	mov	r0,a
      001C28 E6               [12] 5236 	mov	a,@r0
      001C29 C0 E0            [24] 5237 	push	acc
      001C2B 08               [12] 5238 	inc	r0
      001C2C E6               [12] 5239 	mov	a,@r0
      001C2D C0 E0            [24] 5240 	push	acc
      001C2F 08               [12] 5241 	inc	r0
      001C30 E6               [12] 5242 	mov	a,@r0
      001C31 C0 E0            [24] 5243 	push	acc
      001C33 08               [12] 5244 	inc	r0
      001C34 E6               [12] 5245 	mov	a,@r0
      001C35 C0 E0            [24] 5246 	push	acc
      001C37 8A 82            [24] 5247 	mov	dpl,r2
      001C39 8B 83            [24] 5248 	mov	dph,r3
      001C3B 8C F0            [24] 5249 	mov	b,r4
      001C3D 12r00r00         [24] 5250 	lcall	_stack_push
      001C40 E5 81            [12] 5251 	mov	a,sp
      001C42 24 FC            [12] 5252 	add	a,#0xfc
      001C44 F5 81            [12] 5253 	mov	sp,a
                                   5254 ;	calc.c:248: printstr("\r\nstack underflow\r\n");
      001C46 7Fr4E            [12] 5255 	mov	r7,#___str_10
      001C48 7Es00            [12] 5256 	mov	r6,#(___str_10 >> 8)
      001C4A 7D 80            [12] 5257 	mov	r5,#0x80
                                   5258 ;	calc.c:51: return;
      001C4C                       5259 00447$:
                                   5260 ;	calc.c:49: for (; *s; s++) putchar(*s);
      001C4C 8F 82            [24] 5261 	mov	dpl,r7
      001C4E 8E 83            [24] 5262 	mov	dph,r6
      001C50 8D F0            [24] 5263 	mov	b,r5
      001C52 12r00r00         [24] 5264 	lcall	__gptrget
      001C55 FC               [12] 5265 	mov	r4,a
      001C56 70 03            [24] 5266 	jnz	01347$
      001C58 02r2Br95         [24] 5267 	ljmp	00249$
      001C5B                       5268 01347$:
      001C5B 7B 00            [12] 5269 	mov	r3,#0x00
      001C5D 8C 82            [24] 5270 	mov	dpl,r4
      001C5F 8B 83            [24] 5271 	mov	dph,r3
      001C61 12r00r00         [24] 5272 	lcall	_putchar
      001C64 0F               [12] 5273 	inc	r7
                                   5274 ;	calc.c:248: printstr("\r\nstack underflow\r\n");
      001C65 BF 00 E4         [24] 5275 	cjne	r7,#0x00,00447$
      001C68 0E               [12] 5276 	inc	r6
      001C69 80 E1            [24] 5277 	sjmp	00447$
      001C6B                       5278 00183$:
                                   5279 ;	calc.c:249: } else if (!d0) {
      001C6B E5*00            [12] 5280 	mov	a,_bp
      001C6D 24 15            [12] 5281 	add	a,#0x15
      001C6F F8               [12] 5282 	mov	r0,a
      001C70 E6               [12] 5283 	mov	a,@r0
      001C71 08               [12] 5284 	inc	r0
      001C72 46               [12] 5285 	orl	a,@r0
      001C73 08               [12] 5286 	inc	r0
      001C74 46               [12] 5287 	orl	a,@r0
      001C75 08               [12] 5288 	inc	r0
      001C76 46               [12] 5289 	orl	a,@r0
      001C77 60 03            [24] 5290 	jz	01349$
      001C79 02r1Dr1D         [24] 5291 	ljmp	00180$
      001C7C                       5292 01349$:
                                   5293 ;	calc.c:250: (void)stack_push(ctx->ps, d1);
      001C7C E5*00            [12] 5294 	mov	a,_bp
      001C7E 24 0B            [12] 5295 	add	a,#0x0b
      001C80 F8               [12] 5296 	mov	r0,a
      001C81 86 82            [24] 5297 	mov	dpl,@r0
      001C83 08               [12] 5298 	inc	r0
      001C84 86 83            [24] 5299 	mov	dph,@r0
      001C86 08               [12] 5300 	inc	r0
      001C87 86 F0            [24] 5301 	mov	b,@r0
      001C89 12r00r00         [24] 5302 	lcall	__gptrget
      001C8C FA               [12] 5303 	mov	r2,a
      001C8D A3               [24] 5304 	inc	dptr
      001C8E 12r00r00         [24] 5305 	lcall	__gptrget
      001C91 FB               [12] 5306 	mov	r3,a
      001C92 A3               [24] 5307 	inc	dptr
      001C93 12r00r00         [24] 5308 	lcall	__gptrget
      001C96 FC               [12] 5309 	mov	r4,a
      001C97 E5*00            [12] 5310 	mov	a,_bp
      001C99 24 19            [12] 5311 	add	a,#0x19
      001C9B F8               [12] 5312 	mov	r0,a
      001C9C E6               [12] 5313 	mov	a,@r0
      001C9D C0 E0            [24] 5314 	push	acc
      001C9F 08               [12] 5315 	inc	r0
      001CA0 E6               [12] 5316 	mov	a,@r0
      001CA1 C0 E0            [24] 5317 	push	acc
      001CA3 08               [12] 5318 	inc	r0
      001CA4 E6               [12] 5319 	mov	a,@r0
      001CA5 C0 E0            [24] 5320 	push	acc
      001CA7 08               [12] 5321 	inc	r0
      001CA8 E6               [12] 5322 	mov	a,@r0
      001CA9 C0 E0            [24] 5323 	push	acc
      001CAB 8A 82            [24] 5324 	mov	dpl,r2
      001CAD 8B 83            [24] 5325 	mov	dph,r3
      001CAF 8C F0            [24] 5326 	mov	b,r4
      001CB1 12r00r00         [24] 5327 	lcall	_stack_push
      001CB4 E5 81            [12] 5328 	mov	a,sp
      001CB6 24 FC            [12] 5329 	add	a,#0xfc
      001CB8 F5 81            [12] 5330 	mov	sp,a
                                   5331 ;	calc.c:251: (void)stack_push(ctx->ps, d0);			
      001CBA E5*00            [12] 5332 	mov	a,_bp
      001CBC 24 0B            [12] 5333 	add	a,#0x0b
      001CBE F8               [12] 5334 	mov	r0,a
      001CBF 86 82            [24] 5335 	mov	dpl,@r0
      001CC1 08               [12] 5336 	inc	r0
      001CC2 86 83            [24] 5337 	mov	dph,@r0
      001CC4 08               [12] 5338 	inc	r0
      001CC5 86 F0            [24] 5339 	mov	b,@r0
      001CC7 12r00r00         [24] 5340 	lcall	__gptrget
      001CCA FA               [12] 5341 	mov	r2,a
      001CCB A3               [24] 5342 	inc	dptr
      001CCC 12r00r00         [24] 5343 	lcall	__gptrget
      001CCF FB               [12] 5344 	mov	r3,a
      001CD0 A3               [24] 5345 	inc	dptr
      001CD1 12r00r00         [24] 5346 	lcall	__gptrget
      001CD4 FC               [12] 5347 	mov	r4,a
      001CD5 E5*00            [12] 5348 	mov	a,_bp
      001CD7 24 15            [12] 5349 	add	a,#0x15
      001CD9 F8               [12] 5350 	mov	r0,a
      001CDA E6               [12] 5351 	mov	a,@r0
      001CDB C0 E0            [24] 5352 	push	acc
      001CDD 08               [12] 5353 	inc	r0
      001CDE E6               [12] 5354 	mov	a,@r0
      001CDF C0 E0            [24] 5355 	push	acc
      001CE1 08               [12] 5356 	inc	r0
      001CE2 E6               [12] 5357 	mov	a,@r0
      001CE3 C0 E0            [24] 5358 	push	acc
      001CE5 08               [12] 5359 	inc	r0
      001CE6 E6               [12] 5360 	mov	a,@r0
      001CE7 C0 E0            [24] 5361 	push	acc
      001CE9 8A 82            [24] 5362 	mov	dpl,r2
      001CEB 8B 83            [24] 5363 	mov	dph,r3
      001CED 8C F0            [24] 5364 	mov	b,r4
      001CEF 12r00r00         [24] 5365 	lcall	_stack_push
      001CF2 E5 81            [12] 5366 	mov	a,sp
      001CF4 24 FC            [12] 5367 	add	a,#0xfc
      001CF6 F5 81            [12] 5368 	mov	sp,a
                                   5369 ;	calc.c:252: printstr("\r\ndivision by zero\r\n");
      001CF8 7FrB0            [12] 5370 	mov	r7,#___str_14
      001CFA 7Es00            [12] 5371 	mov	r6,#(___str_14 >> 8)
      001CFC 7D 80            [12] 5372 	mov	r5,#0x80
                                   5373 ;	calc.c:51: return;
      001CFE                       5374 00450$:
                                   5375 ;	calc.c:49: for (; *s; s++) putchar(*s);
      001CFE 8F 82            [24] 5376 	mov	dpl,r7
      001D00 8E 83            [24] 5377 	mov	dph,r6
      001D02 8D F0            [24] 5378 	mov	b,r5
      001D04 12r00r00         [24] 5379 	lcall	__gptrget
      001D07 FC               [12] 5380 	mov	r4,a
      001D08 70 03            [24] 5381 	jnz	01350$
      001D0A 02r2Br95         [24] 5382 	ljmp	00249$
      001D0D                       5383 01350$:
      001D0D 7B 00            [12] 5384 	mov	r3,#0x00
      001D0F 8C 82            [24] 5385 	mov	dpl,r4
      001D11 8B 83            [24] 5386 	mov	dph,r3
      001D13 12r00r00         [24] 5387 	lcall	_putchar
      001D16 0F               [12] 5388 	inc	r7
                                   5389 ;	calc.c:252: printstr("\r\ndivision by zero\r\n");
      001D17 BF 00 E4         [24] 5390 	cjne	r7,#0x00,00450$
      001D1A 0E               [12] 5391 	inc	r6
      001D1B 80 E1            [24] 5392 	sjmp	00450$
      001D1D                       5393 00180$:
                                   5394 ;	calc.c:254: if (ctx->digit[0] == '/') d1 /= d0;
      001D1D 8D 82            [24] 5395 	mov	dpl,r5
      001D1F 8E 83            [24] 5396 	mov	dph,r6
      001D21 8F F0            [24] 5397 	mov	b,r7
      001D23 12r00r00         [24] 5398 	lcall	__gptrget
      001D26 FC               [12] 5399 	mov	r4,a
      001D27 BC 2F 45         [24] 5400 	cjne	r4,#0x2f,00177$
      001D2A E5*00            [12] 5401 	mov	a,_bp
      001D2C 24 15            [12] 5402 	add	a,#0x15
      001D2E F8               [12] 5403 	mov	r0,a
      001D2F E6               [12] 5404 	mov	a,@r0
      001D30 C0 E0            [24] 5405 	push	acc
      001D32 08               [12] 5406 	inc	r0
      001D33 E6               [12] 5407 	mov	a,@r0
      001D34 C0 E0            [24] 5408 	push	acc
      001D36 08               [12] 5409 	inc	r0
      001D37 E6               [12] 5410 	mov	a,@r0
      001D38 C0 E0            [24] 5411 	push	acc
      001D3A 08               [12] 5412 	inc	r0
      001D3B E6               [12] 5413 	mov	a,@r0
      001D3C C0 E0            [24] 5414 	push	acc
      001D3E E5*00            [12] 5415 	mov	a,_bp
      001D40 24 19            [12] 5416 	add	a,#0x19
      001D42 F8               [12] 5417 	mov	r0,a
      001D43 86 82            [24] 5418 	mov	dpl,@r0
      001D45 08               [12] 5419 	inc	r0
      001D46 86 83            [24] 5420 	mov	dph,@r0
      001D48 08               [12] 5421 	inc	r0
      001D49 86 F0            [24] 5422 	mov	b,@r0
      001D4B 08               [12] 5423 	inc	r0
      001D4C E6               [12] 5424 	mov	a,@r0
      001D4D 12r00r00         [24] 5425 	lcall	__divslong
      001D50 AF 82            [24] 5426 	mov	r7,dpl
      001D52 AE 83            [24] 5427 	mov	r6,dph
      001D54 AD F0            [24] 5428 	mov	r5,b
      001D56 FC               [12] 5429 	mov	r4,a
      001D57 E5 81            [12] 5430 	mov	a,sp
      001D59 24 FC            [12] 5431 	add	a,#0xfc
      001D5B F5 81            [12] 5432 	mov	sp,a
      001D5D E5*00            [12] 5433 	mov	a,_bp
      001D5F 24 19            [12] 5434 	add	a,#0x19
      001D61 F8               [12] 5435 	mov	r0,a
      001D62 A6 07            [24] 5436 	mov	@r0,ar7
      001D64 08               [12] 5437 	inc	r0
      001D65 A6 06            [24] 5438 	mov	@r0,ar6
      001D67 08               [12] 5439 	inc	r0
      001D68 A6 05            [24] 5440 	mov	@r0,ar5
      001D6A 08               [12] 5441 	inc	r0
      001D6B A6 04            [24] 5442 	mov	@r0,ar4
      001D6D 80 63            [24] 5443 	sjmp	00178$
      001D6F                       5444 00177$:
                                   5445 ;	calc.c:255: else d1 = (unsigned long)d1 / (unsigned long)d0;
      001D6F E5*00            [12] 5446 	mov	a,_bp
      001D71 24 19            [12] 5447 	add	a,#0x19
      001D73 F8               [12] 5448 	mov	r0,a
      001D74 86 07            [24] 5449 	mov	ar7,@r0
      001D76 08               [12] 5450 	inc	r0
      001D77 86 06            [24] 5451 	mov	ar6,@r0
      001D79 08               [12] 5452 	inc	r0
      001D7A 86 05            [24] 5453 	mov	ar5,@r0
      001D7C 08               [12] 5454 	inc	r0
      001D7D 86 04            [24] 5455 	mov	ar4,@r0
      001D7F E5*00            [12] 5456 	mov	a,_bp
      001D81 24 15            [12] 5457 	add	a,#0x15
      001D83 F8               [12] 5458 	mov	r0,a
      001D84 E5*00            [12] 5459 	mov	a,_bp
      001D86 24 0E            [12] 5460 	add	a,#0x0e
      001D88 F9               [12] 5461 	mov	r1,a
      001D89 E6               [12] 5462 	mov	a,@r0
      001D8A F7               [12] 5463 	mov	@r1,a
      001D8B 08               [12] 5464 	inc	r0
      001D8C 09               [12] 5465 	inc	r1
      001D8D E6               [12] 5466 	mov	a,@r0
      001D8E F7               [12] 5467 	mov	@r1,a
      001D8F 08               [12] 5468 	inc	r0
      001D90 09               [12] 5469 	inc	r1
      001D91 E6               [12] 5470 	mov	a,@r0
      001D92 F7               [12] 5471 	mov	@r1,a
      001D93 08               [12] 5472 	inc	r0
      001D94 09               [12] 5473 	inc	r1
      001D95 E6               [12] 5474 	mov	a,@r0
      001D96 F7               [12] 5475 	mov	@r1,a
      001D97 E5*00            [12] 5476 	mov	a,_bp
      001D99 24 0E            [12] 5477 	add	a,#0x0e
      001D9B F8               [12] 5478 	mov	r0,a
      001D9C E6               [12] 5479 	mov	a,@r0
      001D9D C0 E0            [24] 5480 	push	acc
      001D9F 08               [12] 5481 	inc	r0
      001DA0 E6               [12] 5482 	mov	a,@r0
      001DA1 C0 E0            [24] 5483 	push	acc
      001DA3 08               [12] 5484 	inc	r0
      001DA4 E6               [12] 5485 	mov	a,@r0
      001DA5 C0 E0            [24] 5486 	push	acc
      001DA7 08               [12] 5487 	inc	r0
      001DA8 E6               [12] 5488 	mov	a,@r0
      001DA9 C0 E0            [24] 5489 	push	acc
      001DAB 8F 82            [24] 5490 	mov	dpl,r7
      001DAD 8E 83            [24] 5491 	mov	dph,r6
      001DAF 8D F0            [24] 5492 	mov	b,r5
      001DB1 EC               [12] 5493 	mov	a,r4
      001DB2 12r00r00         [24] 5494 	lcall	__divulong
      001DB5 AF 82            [24] 5495 	mov	r7,dpl
      001DB7 AE 83            [24] 5496 	mov	r6,dph
      001DB9 AD F0            [24] 5497 	mov	r5,b
      001DBB FC               [12] 5498 	mov	r4,a
      001DBC E5 81            [12] 5499 	mov	a,sp
      001DBE 24 FC            [12] 5500 	add	a,#0xfc
      001DC0 F5 81            [12] 5501 	mov	sp,a
      001DC2 E5*00            [12] 5502 	mov	a,_bp
      001DC4 24 19            [12] 5503 	add	a,#0x19
      001DC6 F8               [12] 5504 	mov	r0,a
      001DC7 A6 07            [24] 5505 	mov	@r0,ar7
      001DC9 08               [12] 5506 	inc	r0
      001DCA A6 06            [24] 5507 	mov	@r0,ar6
      001DCC 08               [12] 5508 	inc	r0
      001DCD A6 05            [24] 5509 	mov	@r0,ar5
      001DCF 08               [12] 5510 	inc	r0
      001DD0 A6 04            [24] 5511 	mov	@r0,ar4
      001DD2                       5512 00178$:
                                   5513 ;	calc.c:256: (void)stack_push(ctx->ps, d1);
      001DD2 E5*00            [12] 5514 	mov	a,_bp
      001DD4 24 0B            [12] 5515 	add	a,#0x0b
      001DD6 F8               [12] 5516 	mov	r0,a
      001DD7 86 82            [24] 5517 	mov	dpl,@r0
      001DD9 08               [12] 5518 	inc	r0
      001DDA 86 83            [24] 5519 	mov	dph,@r0
      001DDC 08               [12] 5520 	inc	r0
      001DDD 86 F0            [24] 5521 	mov	b,@r0
      001DDF 12r00r00         [24] 5522 	lcall	__gptrget
      001DE2 FA               [12] 5523 	mov	r2,a
      001DE3 A3               [24] 5524 	inc	dptr
      001DE4 12r00r00         [24] 5525 	lcall	__gptrget
      001DE7 FB               [12] 5526 	mov	r3,a
      001DE8 A3               [24] 5527 	inc	dptr
      001DE9 12r00r00         [24] 5528 	lcall	__gptrget
      001DEC FC               [12] 5529 	mov	r4,a
      001DED E5*00            [12] 5530 	mov	a,_bp
      001DEF 24 19            [12] 5531 	add	a,#0x19
      001DF1 F8               [12] 5532 	mov	r0,a
      001DF2 E6               [12] 5533 	mov	a,@r0
      001DF3 C0 E0            [24] 5534 	push	acc
      001DF5 08               [12] 5535 	inc	r0
      001DF6 E6               [12] 5536 	mov	a,@r0
      001DF7 C0 E0            [24] 5537 	push	acc
      001DF9 08               [12] 5538 	inc	r0
      001DFA E6               [12] 5539 	mov	a,@r0
      001DFB C0 E0            [24] 5540 	push	acc
      001DFD 08               [12] 5541 	inc	r0
      001DFE E6               [12] 5542 	mov	a,@r0
      001DFF C0 E0            [24] 5543 	push	acc
      001E01 8A 82            [24] 5544 	mov	dpl,r2
      001E03 8B 83            [24] 5545 	mov	dph,r3
      001E05 8C F0            [24] 5546 	mov	b,r4
      001E07 12r00r00         [24] 5547 	lcall	_stack_push
      001E0A E5 81            [12] 5548 	mov	a,sp
      001E0C 24 FC            [12] 5549 	add	a,#0xfc
      001E0E F5 81            [12] 5550 	mov	sp,a
                                   5551 ;	calc.c:258: break;
      001E10 02r2Br95         [24] 5552 	ljmp	00249$
                                   5553 ;	calc.c:260: case '#':
      001E13                       5554 00189$:
                                   5555 ;	calc.c:261: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      001E13 C0 05            [24] 5556 	push	ar5
      001E15 C0 06            [24] 5557 	push	ar6
      001E17 C0 07            [24] 5558 	push	ar7
      001E19 E5*00            [12] 5559 	mov	a,_bp
      001E1B 24 15            [12] 5560 	add	a,#0x15
      001E1D FC               [12] 5561 	mov	r4,a
      001E1E 7B 00            [12] 5562 	mov	r3,#0x00
      001E20 7A 40            [12] 5563 	mov	r2,#0x40
      001E22 E5*00            [12] 5564 	mov	a,_bp
      001E24 24 12            [12] 5565 	add	a,#0x12
      001E26 F8               [12] 5566 	mov	r0,a
      001E27 E5*00            [12] 5567 	mov	a,_bp
      001E29 24 0E            [12] 5568 	add	a,#0x0e
      001E2B F9               [12] 5569 	mov	r1,a
      001E2C 74 11            [12] 5570 	mov	a,#0x11
      001E2E 26               [12] 5571 	add	a,@r0
      001E2F F7               [12] 5572 	mov	@r1,a
      001E30 74 40            [12] 5573 	mov	a,#0x40
      001E32 08               [12] 5574 	inc	r0
      001E33 36               [12] 5575 	addc	a,@r0
      001E34 09               [12] 5576 	inc	r1
      001E35 F7               [12] 5577 	mov	@r1,a
      001E36 08               [12] 5578 	inc	r0
      001E37 09               [12] 5579 	inc	r1
      001E38 E6               [12] 5580 	mov	a,@r0
      001E39 F7               [12] 5581 	mov	@r1,a
      001E3A E5*00            [12] 5582 	mov	a,_bp
      001E3C 24 0E            [12] 5583 	add	a,#0x0e
      001E3E F8               [12] 5584 	mov	r0,a
      001E3F 86 82            [24] 5585 	mov	dpl,@r0
      001E41 08               [12] 5586 	inc	r0
      001E42 86 83            [24] 5587 	mov	dph,@r0
      001E44 08               [12] 5588 	inc	r0
      001E45 86 F0            [24] 5589 	mov	b,@r0
      001E47 12r00r00         [24] 5590 	lcall	__gptrget
      001E4A FD               [12] 5591 	mov	r5,a
      001E4B A3               [24] 5592 	inc	dptr
      001E4C 12r00r00         [24] 5593 	lcall	__gptrget
      001E4F FE               [12] 5594 	mov	r6,a
      001E50 A3               [24] 5595 	inc	dptr
      001E51 12r00r00         [24] 5596 	lcall	__gptrget
      001E54 FF               [12] 5597 	mov	r7,a
      001E55 C0 05            [24] 5598 	push	ar5
      001E57 C0 04            [24] 5599 	push	ar4
      001E59 C0 03            [24] 5600 	push	ar3
      001E5B C0 02            [24] 5601 	push	ar2
      001E5D 8D 82            [24] 5602 	mov	dpl,r5
      001E5F 8E 83            [24] 5603 	mov	dph,r6
      001E61 8F F0            [24] 5604 	mov	b,r7
      001E63 12r00r00         [24] 5605 	lcall	_stack_pop
      001E66 AE 82            [24] 5606 	mov	r6,dpl
      001E68 AF 83            [24] 5607 	mov	r7,dph
      001E6A 15 81            [12] 5608 	dec	sp
      001E6C 15 81            [12] 5609 	dec	sp
      001E6E 15 81            [12] 5610 	dec	sp
      001E70 D0 05            [24] 5611 	pop	ar5
      001E72 EE               [12] 5612 	mov	a,r6
      001E73 4F               [12] 5613 	orl	a,r7
      001E74 D0 07            [24] 5614 	pop	ar7
      001E76 D0 06            [24] 5615 	pop	ar6
      001E78 D0 05            [24] 5616 	pop	ar5
      001E7A 70 25            [24] 5617 	jnz	00200$
      001E7C 7Fr4E            [12] 5618 	mov	r7,#___str_10
      001E7E 7Es00            [12] 5619 	mov	r6,#(___str_10 >> 8)
      001E80 7D 80            [12] 5620 	mov	r5,#0x80
                                   5621 ;	calc.c:51: return;
      001E82                       5622 00453$:
                                   5623 ;	calc.c:49: for (; *s; s++) putchar(*s);
      001E82 8F 82            [24] 5624 	mov	dpl,r7
      001E84 8E 83            [24] 5625 	mov	dph,r6
      001E86 8D F0            [24] 5626 	mov	b,r5
      001E88 12r00r00         [24] 5627 	lcall	__gptrget
      001E8B FC               [12] 5628 	mov	r4,a
      001E8C 70 03            [24] 5629 	jnz	01355$
      001E8E 02r2Br95         [24] 5630 	ljmp	00249$
      001E91                       5631 01355$:
      001E91 7B 00            [12] 5632 	mov	r3,#0x00
      001E93 8C 82            [24] 5633 	mov	dpl,r4
      001E95 8B 83            [24] 5634 	mov	dph,r3
      001E97 12r00r00         [24] 5635 	lcall	_putchar
      001E9A 0F               [12] 5636 	inc	r7
                                   5637 ;	calc.c:261: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      001E9B BF 00 E4         [24] 5638 	cjne	r7,#0x00,00453$
      001E9E 0E               [12] 5639 	inc	r6
      001E9F 80 E1            [24] 5640 	sjmp	00453$
      001EA1                       5641 00200$:
                                   5642 ;	calc.c:262: else if (!stack_pop(ctx->ps, &d1)) {
      001EA1 C0 05            [24] 5643 	push	ar5
      001EA3 C0 06            [24] 5644 	push	ar6
      001EA5 C0 07            [24] 5645 	push	ar7
      001EA7 E5*00            [12] 5646 	mov	a,_bp
      001EA9 24 19            [12] 5647 	add	a,#0x19
      001EAB FC               [12] 5648 	mov	r4,a
      001EAC 7B 00            [12] 5649 	mov	r3,#0x00
      001EAE 7A 40            [12] 5650 	mov	r2,#0x40
      001EB0 E5*00            [12] 5651 	mov	a,_bp
      001EB2 24 0E            [12] 5652 	add	a,#0x0e
      001EB4 F8               [12] 5653 	mov	r0,a
      001EB5 86 82            [24] 5654 	mov	dpl,@r0
      001EB7 08               [12] 5655 	inc	r0
      001EB8 86 83            [24] 5656 	mov	dph,@r0
      001EBA 08               [12] 5657 	inc	r0
      001EBB 86 F0            [24] 5658 	mov	b,@r0
      001EBD 12r00r00         [24] 5659 	lcall	__gptrget
      001EC0 FD               [12] 5660 	mov	r5,a
      001EC1 A3               [24] 5661 	inc	dptr
      001EC2 12r00r00         [24] 5662 	lcall	__gptrget
      001EC5 FE               [12] 5663 	mov	r6,a
      001EC6 A3               [24] 5664 	inc	dptr
      001EC7 12r00r00         [24] 5665 	lcall	__gptrget
      001ECA FF               [12] 5666 	mov	r7,a
      001ECB C0 05            [24] 5667 	push	ar5
      001ECD C0 04            [24] 5668 	push	ar4
      001ECF C0 03            [24] 5669 	push	ar3
      001ED1 C0 02            [24] 5670 	push	ar2
      001ED3 8D 82            [24] 5671 	mov	dpl,r5
      001ED5 8E 83            [24] 5672 	mov	dph,r6
      001ED7 8F F0            [24] 5673 	mov	b,r7
      001ED9 12r00r00         [24] 5674 	lcall	_stack_pop
      001EDC AE 82            [24] 5675 	mov	r6,dpl
      001EDE AF 83            [24] 5676 	mov	r7,dph
      001EE0 15 81            [12] 5677 	dec	sp
      001EE2 15 81            [12] 5678 	dec	sp
      001EE4 15 81            [12] 5679 	dec	sp
      001EE6 D0 05            [24] 5680 	pop	ar5
      001EE8 EE               [12] 5681 	mov	a,r6
      001EE9 4F               [12] 5682 	orl	a,r7
      001EEA D0 07            [24] 5683 	pop	ar7
      001EEC D0 06            [24] 5684 	pop	ar6
      001EEE D0 05            [24] 5685 	pop	ar5
      001EF0 70 63            [24] 5686 	jnz	00197$
                                   5687 ;	calc.c:263: (void)stack_push(ctx->ps, d0);
      001EF2 E5*00            [12] 5688 	mov	a,_bp
      001EF4 24 0E            [12] 5689 	add	a,#0x0e
      001EF6 F8               [12] 5690 	mov	r0,a
      001EF7 86 82            [24] 5691 	mov	dpl,@r0
      001EF9 08               [12] 5692 	inc	r0
      001EFA 86 83            [24] 5693 	mov	dph,@r0
      001EFC 08               [12] 5694 	inc	r0
      001EFD 86 F0            [24] 5695 	mov	b,@r0
      001EFF 12r00r00         [24] 5696 	lcall	__gptrget
      001F02 FA               [12] 5697 	mov	r2,a
      001F03 A3               [24] 5698 	inc	dptr
      001F04 12r00r00         [24] 5699 	lcall	__gptrget
      001F07 FB               [12] 5700 	mov	r3,a
      001F08 A3               [24] 5701 	inc	dptr
      001F09 12r00r00         [24] 5702 	lcall	__gptrget
      001F0C FC               [12] 5703 	mov	r4,a
      001F0D E5*00            [12] 5704 	mov	a,_bp
      001F0F 24 15            [12] 5705 	add	a,#0x15
      001F11 F8               [12] 5706 	mov	r0,a
      001F12 E6               [12] 5707 	mov	a,@r0
      001F13 C0 E0            [24] 5708 	push	acc
      001F15 08               [12] 5709 	inc	r0
      001F16 E6               [12] 5710 	mov	a,@r0
      001F17 C0 E0            [24] 5711 	push	acc
      001F19 08               [12] 5712 	inc	r0
      001F1A E6               [12] 5713 	mov	a,@r0
      001F1B C0 E0            [24] 5714 	push	acc
      001F1D 08               [12] 5715 	inc	r0
      001F1E E6               [12] 5716 	mov	a,@r0
      001F1F C0 E0            [24] 5717 	push	acc
      001F21 8A 82            [24] 5718 	mov	dpl,r2
      001F23 8B 83            [24] 5719 	mov	dph,r3
      001F25 8C F0            [24] 5720 	mov	b,r4
      001F27 12r00r00         [24] 5721 	lcall	_stack_push
      001F2A E5 81            [12] 5722 	mov	a,sp
      001F2C 24 FC            [12] 5723 	add	a,#0xfc
      001F2E F5 81            [12] 5724 	mov	sp,a
                                   5725 ;	calc.c:264: printstr("\r\nstack underflow\r\n");
      001F30 7Fr4E            [12] 5726 	mov	r7,#___str_10
      001F32 7Es00            [12] 5727 	mov	r6,#(___str_10 >> 8)
      001F34 7D 80            [12] 5728 	mov	r5,#0x80
                                   5729 ;	calc.c:51: return;
      001F36                       5730 00456$:
                                   5731 ;	calc.c:49: for (; *s; s++) putchar(*s);
      001F36 8F 82            [24] 5732 	mov	dpl,r7
      001F38 8E 83            [24] 5733 	mov	dph,r6
      001F3A 8D F0            [24] 5734 	mov	b,r5
      001F3C 12r00r00         [24] 5735 	lcall	__gptrget
      001F3F FC               [12] 5736 	mov	r4,a
      001F40 70 03            [24] 5737 	jnz	01358$
      001F42 02r2Br95         [24] 5738 	ljmp	00249$
      001F45                       5739 01358$:
      001F45 7B 00            [12] 5740 	mov	r3,#0x00
      001F47 8C 82            [24] 5741 	mov	dpl,r4
      001F49 8B 83            [24] 5742 	mov	dph,r3
      001F4B 12r00r00         [24] 5743 	lcall	_putchar
      001F4E 0F               [12] 5744 	inc	r7
                                   5745 ;	calc.c:264: printstr("\r\nstack underflow\r\n");
      001F4F BF 00 E4         [24] 5746 	cjne	r7,#0x00,00456$
      001F52 0E               [12] 5747 	inc	r6
      001F53 80 E1            [24] 5748 	sjmp	00456$
      001F55                       5749 00197$:
                                   5750 ;	calc.c:265: } else if (!d0) {
      001F55 E5*00            [12] 5751 	mov	a,_bp
      001F57 24 15            [12] 5752 	add	a,#0x15
      001F59 F8               [12] 5753 	mov	r0,a
      001F5A E6               [12] 5754 	mov	a,@r0
      001F5B 08               [12] 5755 	inc	r0
      001F5C 46               [12] 5756 	orl	a,@r0
      001F5D 08               [12] 5757 	inc	r0
      001F5E 46               [12] 5758 	orl	a,@r0
      001F5F 08               [12] 5759 	inc	r0
      001F60 46               [12] 5760 	orl	a,@r0
      001F61 60 03            [24] 5761 	jz	01360$
      001F63 02r20r07         [24] 5762 	ljmp	00194$
      001F66                       5763 01360$:
                                   5764 ;	calc.c:266: (void)stack_push(ctx->ps, d1);
      001F66 E5*00            [12] 5765 	mov	a,_bp
      001F68 24 0E            [12] 5766 	add	a,#0x0e
      001F6A F8               [12] 5767 	mov	r0,a
      001F6B 86 82            [24] 5768 	mov	dpl,@r0
      001F6D 08               [12] 5769 	inc	r0
      001F6E 86 83            [24] 5770 	mov	dph,@r0
      001F70 08               [12] 5771 	inc	r0
      001F71 86 F0            [24] 5772 	mov	b,@r0
      001F73 12r00r00         [24] 5773 	lcall	__gptrget
      001F76 FA               [12] 5774 	mov	r2,a
      001F77 A3               [24] 5775 	inc	dptr
      001F78 12r00r00         [24] 5776 	lcall	__gptrget
      001F7B FB               [12] 5777 	mov	r3,a
      001F7C A3               [24] 5778 	inc	dptr
      001F7D 12r00r00         [24] 5779 	lcall	__gptrget
      001F80 FC               [12] 5780 	mov	r4,a
      001F81 E5*00            [12] 5781 	mov	a,_bp
      001F83 24 19            [12] 5782 	add	a,#0x19
      001F85 F8               [12] 5783 	mov	r0,a
      001F86 E6               [12] 5784 	mov	a,@r0
      001F87 C0 E0            [24] 5785 	push	acc
      001F89 08               [12] 5786 	inc	r0
      001F8A E6               [12] 5787 	mov	a,@r0
      001F8B C0 E0            [24] 5788 	push	acc
      001F8D 08               [12] 5789 	inc	r0
      001F8E E6               [12] 5790 	mov	a,@r0
      001F8F C0 E0            [24] 5791 	push	acc
      001F91 08               [12] 5792 	inc	r0
      001F92 E6               [12] 5793 	mov	a,@r0
      001F93 C0 E0            [24] 5794 	push	acc
      001F95 8A 82            [24] 5795 	mov	dpl,r2
      001F97 8B 83            [24] 5796 	mov	dph,r3
      001F99 8C F0            [24] 5797 	mov	b,r4
      001F9B 12r00r00         [24] 5798 	lcall	_stack_push
      001F9E E5 81            [12] 5799 	mov	a,sp
      001FA0 24 FC            [12] 5800 	add	a,#0xfc
      001FA2 F5 81            [12] 5801 	mov	sp,a
                                   5802 ;	calc.c:267: (void)stack_push(ctx->ps, d0);			
      001FA4 E5*00            [12] 5803 	mov	a,_bp
      001FA6 24 0E            [12] 5804 	add	a,#0x0e
      001FA8 F8               [12] 5805 	mov	r0,a
      001FA9 86 82            [24] 5806 	mov	dpl,@r0
      001FAB 08               [12] 5807 	inc	r0
      001FAC 86 83            [24] 5808 	mov	dph,@r0
      001FAE 08               [12] 5809 	inc	r0
      001FAF 86 F0            [24] 5810 	mov	b,@r0
      001FB1 12r00r00         [24] 5811 	lcall	__gptrget
      001FB4 FA               [12] 5812 	mov	r2,a
      001FB5 A3               [24] 5813 	inc	dptr
      001FB6 12r00r00         [24] 5814 	lcall	__gptrget
      001FB9 FB               [12] 5815 	mov	r3,a
      001FBA A3               [24] 5816 	inc	dptr
      001FBB 12r00r00         [24] 5817 	lcall	__gptrget
      001FBE FC               [12] 5818 	mov	r4,a
      001FBF E5*00            [12] 5819 	mov	a,_bp
      001FC1 24 15            [12] 5820 	add	a,#0x15
      001FC3 F8               [12] 5821 	mov	r0,a
      001FC4 E6               [12] 5822 	mov	a,@r0
      001FC5 C0 E0            [24] 5823 	push	acc
      001FC7 08               [12] 5824 	inc	r0
      001FC8 E6               [12] 5825 	mov	a,@r0
      001FC9 C0 E0            [24] 5826 	push	acc
      001FCB 08               [12] 5827 	inc	r0
      001FCC E6               [12] 5828 	mov	a,@r0
      001FCD C0 E0            [24] 5829 	push	acc
      001FCF 08               [12] 5830 	inc	r0
      001FD0 E6               [12] 5831 	mov	a,@r0
      001FD1 C0 E0            [24] 5832 	push	acc
      001FD3 8A 82            [24] 5833 	mov	dpl,r2
      001FD5 8B 83            [24] 5834 	mov	dph,r3
      001FD7 8C F0            [24] 5835 	mov	b,r4
      001FD9 12r00r00         [24] 5836 	lcall	_stack_push
      001FDC E5 81            [12] 5837 	mov	a,sp
      001FDE 24 FC            [12] 5838 	add	a,#0xfc
      001FE0 F5 81            [12] 5839 	mov	sp,a
                                   5840 ;	calc.c:268: printstr("\r\ndivision by zero\r\n");
      001FE2 7FrB0            [12] 5841 	mov	r7,#___str_14
      001FE4 7Es00            [12] 5842 	mov	r6,#(___str_14 >> 8)
      001FE6 7D 80            [12] 5843 	mov	r5,#0x80
                                   5844 ;	calc.c:51: return;
      001FE8                       5845 00459$:
                                   5846 ;	calc.c:49: for (; *s; s++) putchar(*s);
      001FE8 8F 82            [24] 5847 	mov	dpl,r7
      001FEA 8E 83            [24] 5848 	mov	dph,r6
      001FEC 8D F0            [24] 5849 	mov	b,r5
      001FEE 12r00r00         [24] 5850 	lcall	__gptrget
      001FF1 FC               [12] 5851 	mov	r4,a
      001FF2 70 03            [24] 5852 	jnz	01361$
      001FF4 02r2Br95         [24] 5853 	ljmp	00249$
      001FF7                       5854 01361$:
      001FF7 7B 00            [12] 5855 	mov	r3,#0x00
      001FF9 8C 82            [24] 5856 	mov	dpl,r4
      001FFB 8B 83            [24] 5857 	mov	dph,r3
      001FFD 12r00r00         [24] 5858 	lcall	_putchar
      002000 0F               [12] 5859 	inc	r7
                                   5860 ;	calc.c:268: printstr("\r\ndivision by zero\r\n");
      002001 BF 00 E4         [24] 5861 	cjne	r7,#0x00,00459$
      002004 0E               [12] 5862 	inc	r6
      002005 80 E1            [24] 5863 	sjmp	00459$
      002007                       5864 00194$:
                                   5865 ;	calc.c:270: if (ctx->digit[0] == '%') d1 %= d0;
      002007 8D 82            [24] 5866 	mov	dpl,r5
      002009 8E 83            [24] 5867 	mov	dph,r6
      00200B 8F F0            [24] 5868 	mov	b,r7
      00200D 12r00r00         [24] 5869 	lcall	__gptrget
      002010 FD               [12] 5870 	mov	r5,a
      002011 BD 25 45         [24] 5871 	cjne	r5,#0x25,00191$
      002014 E5*00            [12] 5872 	mov	a,_bp
      002016 24 15            [12] 5873 	add	a,#0x15
      002018 F8               [12] 5874 	mov	r0,a
      002019 E6               [12] 5875 	mov	a,@r0
      00201A C0 E0            [24] 5876 	push	acc
      00201C 08               [12] 5877 	inc	r0
      00201D E6               [12] 5878 	mov	a,@r0
      00201E C0 E0            [24] 5879 	push	acc
      002020 08               [12] 5880 	inc	r0
      002021 E6               [12] 5881 	mov	a,@r0
      002022 C0 E0            [24] 5882 	push	acc
      002024 08               [12] 5883 	inc	r0
      002025 E6               [12] 5884 	mov	a,@r0
      002026 C0 E0            [24] 5885 	push	acc
      002028 E5*00            [12] 5886 	mov	a,_bp
      00202A 24 19            [12] 5887 	add	a,#0x19
      00202C F8               [12] 5888 	mov	r0,a
      00202D 86 82            [24] 5889 	mov	dpl,@r0
      00202F 08               [12] 5890 	inc	r0
      002030 86 83            [24] 5891 	mov	dph,@r0
      002032 08               [12] 5892 	inc	r0
      002033 86 F0            [24] 5893 	mov	b,@r0
      002035 08               [12] 5894 	inc	r0
      002036 E6               [12] 5895 	mov	a,@r0
      002037 12r00r00         [24] 5896 	lcall	__modslong
      00203A AC 82            [24] 5897 	mov	r4,dpl
      00203C AD 83            [24] 5898 	mov	r5,dph
      00203E AE F0            [24] 5899 	mov	r6,b
      002040 FF               [12] 5900 	mov	r7,a
      002041 E5 81            [12] 5901 	mov	a,sp
      002043 24 FC            [12] 5902 	add	a,#0xfc
      002045 F5 81            [12] 5903 	mov	sp,a
      002047 E5*00            [12] 5904 	mov	a,_bp
      002049 24 19            [12] 5905 	add	a,#0x19
      00204B F8               [12] 5906 	mov	r0,a
      00204C A6 04            [24] 5907 	mov	@r0,ar4
      00204E 08               [12] 5908 	inc	r0
      00204F A6 05            [24] 5909 	mov	@r0,ar5
      002051 08               [12] 5910 	inc	r0
      002052 A6 06            [24] 5911 	mov	@r0,ar6
      002054 08               [12] 5912 	inc	r0
      002055 A6 07            [24] 5913 	mov	@r0,ar7
      002057 80 5F            [24] 5914 	sjmp	00192$
      002059                       5915 00191$:
                                   5916 ;	calc.c:271: else d1 = (unsigned long)d1 % (unsigned long)d0;
      002059 E5*00            [12] 5917 	mov	a,_bp
      00205B 24 19            [12] 5918 	add	a,#0x19
      00205D F8               [12] 5919 	mov	r0,a
      00205E E5*00            [12] 5920 	mov	a,_bp
      002060 24 07            [12] 5921 	add	a,#0x07
      002062 F9               [12] 5922 	mov	r1,a
      002063 E6               [12] 5923 	mov	a,@r0
      002064 F7               [12] 5924 	mov	@r1,a
      002065 08               [12] 5925 	inc	r0
      002066 09               [12] 5926 	inc	r1
      002067 E6               [12] 5927 	mov	a,@r0
      002068 F7               [12] 5928 	mov	@r1,a
      002069 08               [12] 5929 	inc	r0
      00206A 09               [12] 5930 	inc	r1
      00206B E6               [12] 5931 	mov	a,@r0
      00206C F7               [12] 5932 	mov	@r1,a
      00206D 08               [12] 5933 	inc	r0
      00206E 09               [12] 5934 	inc	r1
      00206F E6               [12] 5935 	mov	a,@r0
      002070 F7               [12] 5936 	mov	@r1,a
      002071 E5*00            [12] 5937 	mov	a,_bp
      002073 24 15            [12] 5938 	add	a,#0x15
      002075 F8               [12] 5939 	mov	r0,a
      002076 86 02            [24] 5940 	mov	ar2,@r0
      002078 08               [12] 5941 	inc	r0
      002079 86 03            [24] 5942 	mov	ar3,@r0
      00207B 08               [12] 5943 	inc	r0
      00207C 86 06            [24] 5944 	mov	ar6,@r0
      00207E 08               [12] 5945 	inc	r0
      00207F 86 07            [24] 5946 	mov	ar7,@r0
      002081 C0 02            [24] 5947 	push	ar2
      002083 C0 03            [24] 5948 	push	ar3
      002085 C0 06            [24] 5949 	push	ar6
      002087 C0 07            [24] 5950 	push	ar7
      002089 E5*00            [12] 5951 	mov	a,_bp
      00208B 24 07            [12] 5952 	add	a,#0x07
      00208D F8               [12] 5953 	mov	r0,a
      00208E 86 82            [24] 5954 	mov	dpl,@r0
      002090 08               [12] 5955 	inc	r0
      002091 86 83            [24] 5956 	mov	dph,@r0
      002093 08               [12] 5957 	inc	r0
      002094 86 F0            [24] 5958 	mov	b,@r0
      002096 08               [12] 5959 	inc	r0
      002097 E6               [12] 5960 	mov	a,@r0
      002098 12r00r00         [24] 5961 	lcall	__modulong
      00209B AC 82            [24] 5962 	mov	r4,dpl
      00209D AD 83            [24] 5963 	mov	r5,dph
      00209F AE F0            [24] 5964 	mov	r6,b
      0020A1 FF               [12] 5965 	mov	r7,a
      0020A2 E5 81            [12] 5966 	mov	a,sp
      0020A4 24 FC            [12] 5967 	add	a,#0xfc
      0020A6 F5 81            [12] 5968 	mov	sp,a
      0020A8 E5*00            [12] 5969 	mov	a,_bp
      0020AA 24 19            [12] 5970 	add	a,#0x19
      0020AC F8               [12] 5971 	mov	r0,a
      0020AD A6 04            [24] 5972 	mov	@r0,ar4
      0020AF 08               [12] 5973 	inc	r0
      0020B0 A6 05            [24] 5974 	mov	@r0,ar5
      0020B2 08               [12] 5975 	inc	r0
      0020B3 A6 06            [24] 5976 	mov	@r0,ar6
      0020B5 08               [12] 5977 	inc	r0
      0020B6 A6 07            [24] 5978 	mov	@r0,ar7
      0020B8                       5979 00192$:
                                   5980 ;	calc.c:272: (void)stack_push(ctx->ps, d1);
      0020B8 E5*00            [12] 5981 	mov	a,_bp
      0020BA 24 0E            [12] 5982 	add	a,#0x0e
      0020BC F8               [12] 5983 	mov	r0,a
      0020BD 86 82            [24] 5984 	mov	dpl,@r0
      0020BF 08               [12] 5985 	inc	r0
      0020C0 86 83            [24] 5986 	mov	dph,@r0
      0020C2 08               [12] 5987 	inc	r0
      0020C3 86 F0            [24] 5988 	mov	b,@r0
      0020C5 12r00r00         [24] 5989 	lcall	__gptrget
      0020C8 FD               [12] 5990 	mov	r5,a
      0020C9 A3               [24] 5991 	inc	dptr
      0020CA 12r00r00         [24] 5992 	lcall	__gptrget
      0020CD FE               [12] 5993 	mov	r6,a
      0020CE A3               [24] 5994 	inc	dptr
      0020CF 12r00r00         [24] 5995 	lcall	__gptrget
      0020D2 FF               [12] 5996 	mov	r7,a
      0020D3 E5*00            [12] 5997 	mov	a,_bp
      0020D5 24 19            [12] 5998 	add	a,#0x19
      0020D7 F8               [12] 5999 	mov	r0,a
      0020D8 E6               [12] 6000 	mov	a,@r0
      0020D9 C0 E0            [24] 6001 	push	acc
      0020DB 08               [12] 6002 	inc	r0
      0020DC E6               [12] 6003 	mov	a,@r0
      0020DD C0 E0            [24] 6004 	push	acc
      0020DF 08               [12] 6005 	inc	r0
      0020E0 E6               [12] 6006 	mov	a,@r0
      0020E1 C0 E0            [24] 6007 	push	acc
      0020E3 08               [12] 6008 	inc	r0
      0020E4 E6               [12] 6009 	mov	a,@r0
      0020E5 C0 E0            [24] 6010 	push	acc
      0020E7 8D 82            [24] 6011 	mov	dpl,r5
      0020E9 8E 83            [24] 6012 	mov	dph,r6
      0020EB 8F F0            [24] 6013 	mov	b,r7
      0020ED 12r00r00         [24] 6014 	lcall	_stack_push
      0020F0 E5 81            [12] 6015 	mov	a,sp
      0020F2 24 FC            [12] 6016 	add	a,#0xfc
      0020F4 F5 81            [12] 6017 	mov	sp,a
                                   6018 ;	calc.c:274: break;
      0020F6 02r2Br95         [24] 6019 	ljmp	00249$
                                   6020 ;	calc.c:275: case '&':
      0020F9                       6021 00202$:
                                   6022 ;	calc.c:276: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      0020F9 E5*00            [12] 6023 	mov	a,_bp
      0020FB 24 15            [12] 6024 	add	a,#0x15
      0020FD FF               [12] 6025 	mov	r7,a
      0020FE E5*00            [12] 6026 	mov	a,_bp
      002100 24 0E            [12] 6027 	add	a,#0x0e
      002102 F8               [12] 6028 	mov	r0,a
      002103 A6 07            [24] 6029 	mov	@r0,ar7
      002105 08               [12] 6030 	inc	r0
      002106 76 00            [12] 6031 	mov	@r0,#0x00
      002108 08               [12] 6032 	inc	r0
      002109 76 40            [12] 6033 	mov	@r0,#0x40
      00210B E5*00            [12] 6034 	mov	a,_bp
      00210D 24 12            [12] 6035 	add	a,#0x12
      00210F F8               [12] 6036 	mov	r0,a
      002110 74 11            [12] 6037 	mov	a,#0x11
      002112 26               [12] 6038 	add	a,@r0
      002113 FA               [12] 6039 	mov	r2,a
      002114 74 40            [12] 6040 	mov	a,#0x40
      002116 08               [12] 6041 	inc	r0
      002117 36               [12] 6042 	addc	a,@r0
      002118 FB               [12] 6043 	mov	r3,a
      002119 08               [12] 6044 	inc	r0
      00211A 86 04            [24] 6045 	mov	ar4,@r0
      00211C 8A 82            [24] 6046 	mov	dpl,r2
      00211E 8B 83            [24] 6047 	mov	dph,r3
      002120 8C F0            [24] 6048 	mov	b,r4
      002122 12r00r00         [24] 6049 	lcall	__gptrget
      002125 FD               [12] 6050 	mov	r5,a
      002126 A3               [24] 6051 	inc	dptr
      002127 12r00r00         [24] 6052 	lcall	__gptrget
      00212A FE               [12] 6053 	mov	r6,a
      00212B A3               [24] 6054 	inc	dptr
      00212C 12r00r00         [24] 6055 	lcall	__gptrget
      00212F FF               [12] 6056 	mov	r7,a
      002130 C0 04            [24] 6057 	push	ar4
      002132 C0 03            [24] 6058 	push	ar3
      002134 C0 02            [24] 6059 	push	ar2
      002136 E5*00            [12] 6060 	mov	a,_bp
      002138 24 0E            [12] 6061 	add	a,#0x0e
      00213A F8               [12] 6062 	mov	r0,a
      00213B E6               [12] 6063 	mov	a,@r0
      00213C C0 E0            [24] 6064 	push	acc
      00213E 08               [12] 6065 	inc	r0
      00213F E6               [12] 6066 	mov	a,@r0
      002140 C0 E0            [24] 6067 	push	acc
      002142 08               [12] 6068 	inc	r0
      002143 E6               [12] 6069 	mov	a,@r0
      002144 C0 E0            [24] 6070 	push	acc
      002146 8D 82            [24] 6071 	mov	dpl,r5
      002148 8E 83            [24] 6072 	mov	dph,r6
      00214A 8F F0            [24] 6073 	mov	b,r7
      00214C 12r00r00         [24] 6074 	lcall	_stack_pop
      00214F AE 82            [24] 6075 	mov	r6,dpl
      002151 AF 83            [24] 6076 	mov	r7,dph
      002153 15 81            [12] 6077 	dec	sp
      002155 15 81            [12] 6078 	dec	sp
      002157 15 81            [12] 6079 	dec	sp
      002159 D0 02            [24] 6080 	pop	ar2
      00215B D0 03            [24] 6081 	pop	ar3
      00215D D0 04            [24] 6082 	pop	ar4
      00215F EE               [12] 6083 	mov	a,r6
      002160 4F               [12] 6084 	orl	a,r7
      002161 70 25            [24] 6085 	jnz	00207$
      002163 7Dr4E            [12] 6086 	mov	r5,#___str_10
      002165 7Cs00            [12] 6087 	mov	r4,#(___str_10 >> 8)
      002167 7B 80            [12] 6088 	mov	r3,#0x80
                                   6089 ;	calc.c:51: return;
      002169                       6090 00462$:
                                   6091 ;	calc.c:49: for (; *s; s++) putchar(*s);
      002169 8D 82            [24] 6092 	mov	dpl,r5
      00216B 8C 83            [24] 6093 	mov	dph,r4
      00216D 8B F0            [24] 6094 	mov	b,r3
      00216F 12r00r00         [24] 6095 	lcall	__gptrget
      002172 FF               [12] 6096 	mov	r7,a
      002173 70 03            [24] 6097 	jnz	01366$
      002175 02r2Br95         [24] 6098 	ljmp	00249$
      002178                       6099 01366$:
      002178 7E 00            [12] 6100 	mov	r6,#0x00
      00217A 8F 82            [24] 6101 	mov	dpl,r7
      00217C 8E 83            [24] 6102 	mov	dph,r6
      00217E 12r00r00         [24] 6103 	lcall	_putchar
      002181 0D               [12] 6104 	inc	r5
                                   6105 ;	calc.c:276: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      002182 BD 00 E4         [24] 6106 	cjne	r5,#0x00,00462$
      002185 0C               [12] 6107 	inc	r4
      002186 80 E1            [24] 6108 	sjmp	00462$
      002188                       6109 00207$:
                                   6110 ;	calc.c:277: else if (!stack_pop(ctx->ps, &d1)) {
      002188 E5*00            [12] 6111 	mov	a,_bp
      00218A 24 19            [12] 6112 	add	a,#0x19
      00218C FF               [12] 6113 	mov	r7,a
      00218D E5*00            [12] 6114 	mov	a,_bp
      00218F 24 0E            [12] 6115 	add	a,#0x0e
      002191 F8               [12] 6116 	mov	r0,a
      002192 A6 07            [24] 6117 	mov	@r0,ar7
      002194 08               [12] 6118 	inc	r0
      002195 76 00            [12] 6119 	mov	@r0,#0x00
      002197 08               [12] 6120 	inc	r0
      002198 76 40            [12] 6121 	mov	@r0,#0x40
      00219A 8A 82            [24] 6122 	mov	dpl,r2
      00219C 8B 83            [24] 6123 	mov	dph,r3
      00219E 8C F0            [24] 6124 	mov	b,r4
      0021A0 12r00r00         [24] 6125 	lcall	__gptrget
      0021A3 FD               [12] 6126 	mov	r5,a
      0021A4 A3               [24] 6127 	inc	dptr
      0021A5 12r00r00         [24] 6128 	lcall	__gptrget
      0021A8 FE               [12] 6129 	mov	r6,a
      0021A9 A3               [24] 6130 	inc	dptr
      0021AA 12r00r00         [24] 6131 	lcall	__gptrget
      0021AD FF               [12] 6132 	mov	r7,a
      0021AE C0 04            [24] 6133 	push	ar4
      0021B0 C0 03            [24] 6134 	push	ar3
      0021B2 C0 02            [24] 6135 	push	ar2
      0021B4 E5*00            [12] 6136 	mov	a,_bp
      0021B6 24 0E            [12] 6137 	add	a,#0x0e
      0021B8 F8               [12] 6138 	mov	r0,a
      0021B9 E6               [12] 6139 	mov	a,@r0
      0021BA C0 E0            [24] 6140 	push	acc
      0021BC 08               [12] 6141 	inc	r0
      0021BD E6               [12] 6142 	mov	a,@r0
      0021BE C0 E0            [24] 6143 	push	acc
      0021C0 08               [12] 6144 	inc	r0
      0021C1 E6               [12] 6145 	mov	a,@r0
      0021C2 C0 E0            [24] 6146 	push	acc
      0021C4 8D 82            [24] 6147 	mov	dpl,r5
      0021C6 8E 83            [24] 6148 	mov	dph,r6
      0021C8 8F F0            [24] 6149 	mov	b,r7
      0021CA 12r00r00         [24] 6150 	lcall	_stack_pop
      0021CD AE 82            [24] 6151 	mov	r6,dpl
      0021CF AF 83            [24] 6152 	mov	r7,dph
      0021D1 15 81            [12] 6153 	dec	sp
      0021D3 15 81            [12] 6154 	dec	sp
      0021D5 15 81            [12] 6155 	dec	sp
      0021D7 D0 02            [24] 6156 	pop	ar2
      0021D9 D0 03            [24] 6157 	pop	ar3
      0021DB D0 04            [24] 6158 	pop	ar4
      0021DD EE               [12] 6159 	mov	a,r6
      0021DE 4F               [12] 6160 	orl	a,r7
      0021DF 70 5C            [24] 6161 	jnz	00204$
                                   6162 ;	calc.c:278: (void)stack_push(ctx->ps, d0);
      0021E1 8A 82            [24] 6163 	mov	dpl,r2
      0021E3 8B 83            [24] 6164 	mov	dph,r3
      0021E5 8C F0            [24] 6165 	mov	b,r4
      0021E7 12r00r00         [24] 6166 	lcall	__gptrget
      0021EA FD               [12] 6167 	mov	r5,a
      0021EB A3               [24] 6168 	inc	dptr
      0021EC 12r00r00         [24] 6169 	lcall	__gptrget
      0021EF FE               [12] 6170 	mov	r6,a
      0021F0 A3               [24] 6171 	inc	dptr
      0021F1 12r00r00         [24] 6172 	lcall	__gptrget
      0021F4 FF               [12] 6173 	mov	r7,a
      0021F5 E5*00            [12] 6174 	mov	a,_bp
      0021F7 24 15            [12] 6175 	add	a,#0x15
      0021F9 F8               [12] 6176 	mov	r0,a
      0021FA E6               [12] 6177 	mov	a,@r0
      0021FB C0 E0            [24] 6178 	push	acc
      0021FD 08               [12] 6179 	inc	r0
      0021FE E6               [12] 6180 	mov	a,@r0
      0021FF C0 E0            [24] 6181 	push	acc
      002201 08               [12] 6182 	inc	r0
      002202 E6               [12] 6183 	mov	a,@r0
      002203 C0 E0            [24] 6184 	push	acc
      002205 08               [12] 6185 	inc	r0
      002206 E6               [12] 6186 	mov	a,@r0
      002207 C0 E0            [24] 6187 	push	acc
      002209 8D 82            [24] 6188 	mov	dpl,r5
      00220B 8E 83            [24] 6189 	mov	dph,r6
      00220D 8F F0            [24] 6190 	mov	b,r7
      00220F 12r00r00         [24] 6191 	lcall	_stack_push
      002212 E5 81            [12] 6192 	mov	a,sp
      002214 24 FC            [12] 6193 	add	a,#0xfc
      002216 F5 81            [12] 6194 	mov	sp,a
                                   6195 ;	calc.c:279: printstr("\r\nstack underflow\r\n");
      002218 7Dr4E            [12] 6196 	mov	r5,#___str_10
      00221A 7Cs00            [12] 6197 	mov	r4,#(___str_10 >> 8)
      00221C 7B 80            [12] 6198 	mov	r3,#0x80
                                   6199 ;	calc.c:51: return;
      00221E                       6200 00465$:
                                   6201 ;	calc.c:49: for (; *s; s++) putchar(*s);
      00221E 8D 82            [24] 6202 	mov	dpl,r5
      002220 8C 83            [24] 6203 	mov	dph,r4
      002222 8B F0            [24] 6204 	mov	b,r3
      002224 12r00r00         [24] 6205 	lcall	__gptrget
      002227 FF               [12] 6206 	mov	r7,a
      002228 70 03            [24] 6207 	jnz	01369$
      00222A 02r2Br95         [24] 6208 	ljmp	00249$
      00222D                       6209 01369$:
      00222D 7E 00            [12] 6210 	mov	r6,#0x00
      00222F 8F 82            [24] 6211 	mov	dpl,r7
      002231 8E 83            [24] 6212 	mov	dph,r6
      002233 12r00r00         [24] 6213 	lcall	_putchar
      002236 0D               [12] 6214 	inc	r5
                                   6215 ;	calc.c:279: printstr("\r\nstack underflow\r\n");
      002237 BD 00 E4         [24] 6216 	cjne	r5,#0x00,00465$
      00223A 0C               [12] 6217 	inc	r4
      00223B 80 E1            [24] 6218 	sjmp	00465$
      00223D                       6219 00204$:
                                   6220 ;	calc.c:281: d1 &= d0;
      00223D E5*00            [12] 6221 	mov	a,_bp
      00223F 24 19            [12] 6222 	add	a,#0x19
      002241 F8               [12] 6223 	mov	r0,a
      002242 E5*00            [12] 6224 	mov	a,_bp
      002244 24 15            [12] 6225 	add	a,#0x15
      002246 F9               [12] 6226 	mov	r1,a
      002247 E7               [12] 6227 	mov	a,@r1
      002248 56               [12] 6228 	anl	a,@r0
      002249 F6               [12] 6229 	mov	@r0,a
      00224A 09               [12] 6230 	inc	r1
      00224B E7               [12] 6231 	mov	a,@r1
      00224C 08               [12] 6232 	inc	r0
      00224D 56               [12] 6233 	anl	a,@r0
      00224E F6               [12] 6234 	mov	@r0,a
      00224F 09               [12] 6235 	inc	r1
      002250 E7               [12] 6236 	mov	a,@r1
      002251 08               [12] 6237 	inc	r0
      002252 56               [12] 6238 	anl	a,@r0
      002253 F6               [12] 6239 	mov	@r0,a
      002254 09               [12] 6240 	inc	r1
      002255 E7               [12] 6241 	mov	a,@r1
      002256 08               [12] 6242 	inc	r0
      002257 56               [12] 6243 	anl	a,@r0
      002258 F6               [12] 6244 	mov	@r0,a
                                   6245 ;	calc.c:282: (void)stack_push(ctx->ps, d1);
      002259 8A 82            [24] 6246 	mov	dpl,r2
      00225B 8B 83            [24] 6247 	mov	dph,r3
      00225D 8C F0            [24] 6248 	mov	b,r4
      00225F 12r00r00         [24] 6249 	lcall	__gptrget
      002262 FA               [12] 6250 	mov	r2,a
      002263 A3               [24] 6251 	inc	dptr
      002264 12r00r00         [24] 6252 	lcall	__gptrget
      002267 FB               [12] 6253 	mov	r3,a
      002268 A3               [24] 6254 	inc	dptr
      002269 12r00r00         [24] 6255 	lcall	__gptrget
      00226C FC               [12] 6256 	mov	r4,a
      00226D E5*00            [12] 6257 	mov	a,_bp
      00226F 24 19            [12] 6258 	add	a,#0x19
      002271 F8               [12] 6259 	mov	r0,a
      002272 E6               [12] 6260 	mov	a,@r0
      002273 C0 E0            [24] 6261 	push	acc
      002275 08               [12] 6262 	inc	r0
      002276 E6               [12] 6263 	mov	a,@r0
      002277 C0 E0            [24] 6264 	push	acc
      002279 08               [12] 6265 	inc	r0
      00227A E6               [12] 6266 	mov	a,@r0
      00227B C0 E0            [24] 6267 	push	acc
      00227D 08               [12] 6268 	inc	r0
      00227E E6               [12] 6269 	mov	a,@r0
      00227F C0 E0            [24] 6270 	push	acc
      002281 8A 82            [24] 6271 	mov	dpl,r2
      002283 8B 83            [24] 6272 	mov	dph,r3
      002285 8C F0            [24] 6273 	mov	b,r4
      002287 12r00r00         [24] 6274 	lcall	_stack_push
      00228A E5 81            [12] 6275 	mov	a,sp
      00228C 24 FC            [12] 6276 	add	a,#0xfc
      00228E F5 81            [12] 6277 	mov	sp,a
                                   6278 ;	calc.c:284: break;
      002290 02r2Br95         [24] 6279 	ljmp	00249$
                                   6280 ;	calc.c:285: case '|':
      002293                       6281 00209$:
                                   6282 ;	calc.c:286: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      002293 E5*00            [12] 6283 	mov	a,_bp
      002295 24 15            [12] 6284 	add	a,#0x15
      002297 FF               [12] 6285 	mov	r7,a
      002298 E5*00            [12] 6286 	mov	a,_bp
      00229A 24 0E            [12] 6287 	add	a,#0x0e
      00229C F8               [12] 6288 	mov	r0,a
      00229D A6 07            [24] 6289 	mov	@r0,ar7
      00229F 08               [12] 6290 	inc	r0
      0022A0 76 00            [12] 6291 	mov	@r0,#0x00
      0022A2 08               [12] 6292 	inc	r0
      0022A3 76 40            [12] 6293 	mov	@r0,#0x40
      0022A5 E5*00            [12] 6294 	mov	a,_bp
      0022A7 24 12            [12] 6295 	add	a,#0x12
      0022A9 F8               [12] 6296 	mov	r0,a
      0022AA 74 11            [12] 6297 	mov	a,#0x11
      0022AC 26               [12] 6298 	add	a,@r0
      0022AD FA               [12] 6299 	mov	r2,a
      0022AE 74 40            [12] 6300 	mov	a,#0x40
      0022B0 08               [12] 6301 	inc	r0
      0022B1 36               [12] 6302 	addc	a,@r0
      0022B2 FB               [12] 6303 	mov	r3,a
      0022B3 08               [12] 6304 	inc	r0
      0022B4 86 04            [24] 6305 	mov	ar4,@r0
      0022B6 8A 82            [24] 6306 	mov	dpl,r2
      0022B8 8B 83            [24] 6307 	mov	dph,r3
      0022BA 8C F0            [24] 6308 	mov	b,r4
      0022BC 12r00r00         [24] 6309 	lcall	__gptrget
      0022BF FD               [12] 6310 	mov	r5,a
      0022C0 A3               [24] 6311 	inc	dptr
      0022C1 12r00r00         [24] 6312 	lcall	__gptrget
      0022C4 FE               [12] 6313 	mov	r6,a
      0022C5 A3               [24] 6314 	inc	dptr
      0022C6 12r00r00         [24] 6315 	lcall	__gptrget
      0022C9 FF               [12] 6316 	mov	r7,a
      0022CA C0 04            [24] 6317 	push	ar4
      0022CC C0 03            [24] 6318 	push	ar3
      0022CE C0 02            [24] 6319 	push	ar2
      0022D0 E5*00            [12] 6320 	mov	a,_bp
      0022D2 24 0E            [12] 6321 	add	a,#0x0e
      0022D4 F8               [12] 6322 	mov	r0,a
      0022D5 E6               [12] 6323 	mov	a,@r0
      0022D6 C0 E0            [24] 6324 	push	acc
      0022D8 08               [12] 6325 	inc	r0
      0022D9 E6               [12] 6326 	mov	a,@r0
      0022DA C0 E0            [24] 6327 	push	acc
      0022DC 08               [12] 6328 	inc	r0
      0022DD E6               [12] 6329 	mov	a,@r0
      0022DE C0 E0            [24] 6330 	push	acc
      0022E0 8D 82            [24] 6331 	mov	dpl,r5
      0022E2 8E 83            [24] 6332 	mov	dph,r6
      0022E4 8F F0            [24] 6333 	mov	b,r7
      0022E6 12r00r00         [24] 6334 	lcall	_stack_pop
      0022E9 AE 82            [24] 6335 	mov	r6,dpl
      0022EB AF 83            [24] 6336 	mov	r7,dph
      0022ED 15 81            [12] 6337 	dec	sp
      0022EF 15 81            [12] 6338 	dec	sp
      0022F1 15 81            [12] 6339 	dec	sp
      0022F3 D0 02            [24] 6340 	pop	ar2
      0022F5 D0 03            [24] 6341 	pop	ar3
      0022F7 D0 04            [24] 6342 	pop	ar4
      0022F9 EE               [12] 6343 	mov	a,r6
      0022FA 4F               [12] 6344 	orl	a,r7
      0022FB 70 25            [24] 6345 	jnz	00214$
      0022FD 7Dr4E            [12] 6346 	mov	r5,#___str_10
      0022FF 7Cs00            [12] 6347 	mov	r4,#(___str_10 >> 8)
      002301 7B 80            [12] 6348 	mov	r3,#0x80
                                   6349 ;	calc.c:51: return;
      002303                       6350 00468$:
                                   6351 ;	calc.c:49: for (; *s; s++) putchar(*s);
      002303 8D 82            [24] 6352 	mov	dpl,r5
      002305 8C 83            [24] 6353 	mov	dph,r4
      002307 8B F0            [24] 6354 	mov	b,r3
      002309 12r00r00         [24] 6355 	lcall	__gptrget
      00230C FF               [12] 6356 	mov	r7,a
      00230D 70 03            [24] 6357 	jnz	01372$
      00230F 02r2Br95         [24] 6358 	ljmp	00249$
      002312                       6359 01372$:
      002312 7E 00            [12] 6360 	mov	r6,#0x00
      002314 8F 82            [24] 6361 	mov	dpl,r7
      002316 8E 83            [24] 6362 	mov	dph,r6
      002318 12r00r00         [24] 6363 	lcall	_putchar
      00231B 0D               [12] 6364 	inc	r5
                                   6365 ;	calc.c:286: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      00231C BD 00 E4         [24] 6366 	cjne	r5,#0x00,00468$
      00231F 0C               [12] 6367 	inc	r4
      002320 80 E1            [24] 6368 	sjmp	00468$
      002322                       6369 00214$:
                                   6370 ;	calc.c:287: else if (!stack_pop(ctx->ps, &d1)) {
      002322 E5*00            [12] 6371 	mov	a,_bp
      002324 24 19            [12] 6372 	add	a,#0x19
      002326 FF               [12] 6373 	mov	r7,a
      002327 E5*00            [12] 6374 	mov	a,_bp
      002329 24 0E            [12] 6375 	add	a,#0x0e
      00232B F8               [12] 6376 	mov	r0,a
      00232C A6 07            [24] 6377 	mov	@r0,ar7
      00232E 08               [12] 6378 	inc	r0
      00232F 76 00            [12] 6379 	mov	@r0,#0x00
      002331 08               [12] 6380 	inc	r0
      002332 76 40            [12] 6381 	mov	@r0,#0x40
      002334 8A 82            [24] 6382 	mov	dpl,r2
      002336 8B 83            [24] 6383 	mov	dph,r3
      002338 8C F0            [24] 6384 	mov	b,r4
      00233A 12r00r00         [24] 6385 	lcall	__gptrget
      00233D FD               [12] 6386 	mov	r5,a
      00233E A3               [24] 6387 	inc	dptr
      00233F 12r00r00         [24] 6388 	lcall	__gptrget
      002342 FE               [12] 6389 	mov	r6,a
      002343 A3               [24] 6390 	inc	dptr
      002344 12r00r00         [24] 6391 	lcall	__gptrget
      002347 FF               [12] 6392 	mov	r7,a
      002348 C0 04            [24] 6393 	push	ar4
      00234A C0 03            [24] 6394 	push	ar3
      00234C C0 02            [24] 6395 	push	ar2
      00234E E5*00            [12] 6396 	mov	a,_bp
      002350 24 0E            [12] 6397 	add	a,#0x0e
      002352 F8               [12] 6398 	mov	r0,a
      002353 E6               [12] 6399 	mov	a,@r0
      002354 C0 E0            [24] 6400 	push	acc
      002356 08               [12] 6401 	inc	r0
      002357 E6               [12] 6402 	mov	a,@r0
      002358 C0 E0            [24] 6403 	push	acc
      00235A 08               [12] 6404 	inc	r0
      00235B E6               [12] 6405 	mov	a,@r0
      00235C C0 E0            [24] 6406 	push	acc
      00235E 8D 82            [24] 6407 	mov	dpl,r5
      002360 8E 83            [24] 6408 	mov	dph,r6
      002362 8F F0            [24] 6409 	mov	b,r7
      002364 12r00r00         [24] 6410 	lcall	_stack_pop
      002367 AE 82            [24] 6411 	mov	r6,dpl
      002369 AF 83            [24] 6412 	mov	r7,dph
      00236B 15 81            [12] 6413 	dec	sp
      00236D 15 81            [12] 6414 	dec	sp
      00236F 15 81            [12] 6415 	dec	sp
      002371 D0 02            [24] 6416 	pop	ar2
      002373 D0 03            [24] 6417 	pop	ar3
      002375 D0 04            [24] 6418 	pop	ar4
      002377 EE               [12] 6419 	mov	a,r6
      002378 4F               [12] 6420 	orl	a,r7
      002379 70 5C            [24] 6421 	jnz	00211$
                                   6422 ;	calc.c:288: (void)stack_push(ctx->ps, d0);
      00237B 8A 82            [24] 6423 	mov	dpl,r2
      00237D 8B 83            [24] 6424 	mov	dph,r3
      00237F 8C F0            [24] 6425 	mov	b,r4
      002381 12r00r00         [24] 6426 	lcall	__gptrget
      002384 FD               [12] 6427 	mov	r5,a
      002385 A3               [24] 6428 	inc	dptr
      002386 12r00r00         [24] 6429 	lcall	__gptrget
      002389 FE               [12] 6430 	mov	r6,a
      00238A A3               [24] 6431 	inc	dptr
      00238B 12r00r00         [24] 6432 	lcall	__gptrget
      00238E FF               [12] 6433 	mov	r7,a
      00238F E5*00            [12] 6434 	mov	a,_bp
      002391 24 15            [12] 6435 	add	a,#0x15
      002393 F8               [12] 6436 	mov	r0,a
      002394 E6               [12] 6437 	mov	a,@r0
      002395 C0 E0            [24] 6438 	push	acc
      002397 08               [12] 6439 	inc	r0
      002398 E6               [12] 6440 	mov	a,@r0
      002399 C0 E0            [24] 6441 	push	acc
      00239B 08               [12] 6442 	inc	r0
      00239C E6               [12] 6443 	mov	a,@r0
      00239D C0 E0            [24] 6444 	push	acc
      00239F 08               [12] 6445 	inc	r0
      0023A0 E6               [12] 6446 	mov	a,@r0
      0023A1 C0 E0            [24] 6447 	push	acc
      0023A3 8D 82            [24] 6448 	mov	dpl,r5
      0023A5 8E 83            [24] 6449 	mov	dph,r6
      0023A7 8F F0            [24] 6450 	mov	b,r7
      0023A9 12r00r00         [24] 6451 	lcall	_stack_push
      0023AC E5 81            [12] 6452 	mov	a,sp
      0023AE 24 FC            [12] 6453 	add	a,#0xfc
      0023B0 F5 81            [12] 6454 	mov	sp,a
                                   6455 ;	calc.c:289: printstr("\r\nstack underflow\r\n");
      0023B2 7Dr4E            [12] 6456 	mov	r5,#___str_10
      0023B4 7Cs00            [12] 6457 	mov	r4,#(___str_10 >> 8)
      0023B6 7B 80            [12] 6458 	mov	r3,#0x80
                                   6459 ;	calc.c:51: return;
      0023B8                       6460 00471$:
                                   6461 ;	calc.c:49: for (; *s; s++) putchar(*s);
      0023B8 8D 82            [24] 6462 	mov	dpl,r5
      0023BA 8C 83            [24] 6463 	mov	dph,r4
      0023BC 8B F0            [24] 6464 	mov	b,r3
      0023BE 12r00r00         [24] 6465 	lcall	__gptrget
      0023C1 FF               [12] 6466 	mov	r7,a
      0023C2 70 03            [24] 6467 	jnz	01375$
      0023C4 02r2Br95         [24] 6468 	ljmp	00249$
      0023C7                       6469 01375$:
      0023C7 7E 00            [12] 6470 	mov	r6,#0x00
      0023C9 8F 82            [24] 6471 	mov	dpl,r7
      0023CB 8E 83            [24] 6472 	mov	dph,r6
      0023CD 12r00r00         [24] 6473 	lcall	_putchar
      0023D0 0D               [12] 6474 	inc	r5
                                   6475 ;	calc.c:289: printstr("\r\nstack underflow\r\n");
      0023D1 BD 00 E4         [24] 6476 	cjne	r5,#0x00,00471$
      0023D4 0C               [12] 6477 	inc	r4
      0023D5 80 E1            [24] 6478 	sjmp	00471$
      0023D7                       6479 00211$:
                                   6480 ;	calc.c:291: d1 |= d0;
      0023D7 E5*00            [12] 6481 	mov	a,_bp
      0023D9 24 19            [12] 6482 	add	a,#0x19
      0023DB F8               [12] 6483 	mov	r0,a
      0023DC E5*00            [12] 6484 	mov	a,_bp
      0023DE 24 15            [12] 6485 	add	a,#0x15
      0023E0 F9               [12] 6486 	mov	r1,a
      0023E1 E7               [12] 6487 	mov	a,@r1
      0023E2 46               [12] 6488 	orl	a,@r0
      0023E3 F6               [12] 6489 	mov	@r0,a
      0023E4 09               [12] 6490 	inc	r1
      0023E5 E7               [12] 6491 	mov	a,@r1
      0023E6 08               [12] 6492 	inc	r0
      0023E7 46               [12] 6493 	orl	a,@r0
      0023E8 F6               [12] 6494 	mov	@r0,a
      0023E9 09               [12] 6495 	inc	r1
      0023EA E7               [12] 6496 	mov	a,@r1
      0023EB 08               [12] 6497 	inc	r0
      0023EC 46               [12] 6498 	orl	a,@r0
      0023ED F6               [12] 6499 	mov	@r0,a
      0023EE 09               [12] 6500 	inc	r1
      0023EF E7               [12] 6501 	mov	a,@r1
      0023F0 08               [12] 6502 	inc	r0
      0023F1 46               [12] 6503 	orl	a,@r0
      0023F2 F6               [12] 6504 	mov	@r0,a
                                   6505 ;	calc.c:292: (void)stack_push(ctx->ps, d1);
      0023F3 8A 82            [24] 6506 	mov	dpl,r2
      0023F5 8B 83            [24] 6507 	mov	dph,r3
      0023F7 8C F0            [24] 6508 	mov	b,r4
      0023F9 12r00r00         [24] 6509 	lcall	__gptrget
      0023FC FA               [12] 6510 	mov	r2,a
      0023FD A3               [24] 6511 	inc	dptr
      0023FE 12r00r00         [24] 6512 	lcall	__gptrget
      002401 FB               [12] 6513 	mov	r3,a
      002402 A3               [24] 6514 	inc	dptr
      002403 12r00r00         [24] 6515 	lcall	__gptrget
      002406 FC               [12] 6516 	mov	r4,a
      002407 E5*00            [12] 6517 	mov	a,_bp
      002409 24 19            [12] 6518 	add	a,#0x19
      00240B F8               [12] 6519 	mov	r0,a
      00240C E6               [12] 6520 	mov	a,@r0
      00240D C0 E0            [24] 6521 	push	acc
      00240F 08               [12] 6522 	inc	r0
      002410 E6               [12] 6523 	mov	a,@r0
      002411 C0 E0            [24] 6524 	push	acc
      002413 08               [12] 6525 	inc	r0
      002414 E6               [12] 6526 	mov	a,@r0
      002415 C0 E0            [24] 6527 	push	acc
      002417 08               [12] 6528 	inc	r0
      002418 E6               [12] 6529 	mov	a,@r0
      002419 C0 E0            [24] 6530 	push	acc
      00241B 8A 82            [24] 6531 	mov	dpl,r2
      00241D 8B 83            [24] 6532 	mov	dph,r3
      00241F 8C F0            [24] 6533 	mov	b,r4
      002421 12r00r00         [24] 6534 	lcall	_stack_push
      002424 E5 81            [12] 6535 	mov	a,sp
      002426 24 FC            [12] 6536 	add	a,#0xfc
      002428 F5 81            [12] 6537 	mov	sp,a
                                   6538 ;	calc.c:294: break;
      00242A 02r2Br95         [24] 6539 	ljmp	00249$
                                   6540 ;	calc.c:295: case '^':
      00242D                       6541 00216$:
                                   6542 ;	calc.c:296: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      00242D E5*00            [12] 6543 	mov	a,_bp
      00242F 24 15            [12] 6544 	add	a,#0x15
      002431 FF               [12] 6545 	mov	r7,a
      002432 E5*00            [12] 6546 	mov	a,_bp
      002434 24 0E            [12] 6547 	add	a,#0x0e
      002436 F8               [12] 6548 	mov	r0,a
      002437 A6 07            [24] 6549 	mov	@r0,ar7
      002439 08               [12] 6550 	inc	r0
      00243A 76 00            [12] 6551 	mov	@r0,#0x00
      00243C 08               [12] 6552 	inc	r0
      00243D 76 40            [12] 6553 	mov	@r0,#0x40
      00243F E5*00            [12] 6554 	mov	a,_bp
      002441 24 12            [12] 6555 	add	a,#0x12
      002443 F8               [12] 6556 	mov	r0,a
      002444 74 11            [12] 6557 	mov	a,#0x11
      002446 26               [12] 6558 	add	a,@r0
      002447 FA               [12] 6559 	mov	r2,a
      002448 74 40            [12] 6560 	mov	a,#0x40
      00244A 08               [12] 6561 	inc	r0
      00244B 36               [12] 6562 	addc	a,@r0
      00244C FB               [12] 6563 	mov	r3,a
      00244D 08               [12] 6564 	inc	r0
      00244E 86 04            [24] 6565 	mov	ar4,@r0
      002450 8A 82            [24] 6566 	mov	dpl,r2
      002452 8B 83            [24] 6567 	mov	dph,r3
      002454 8C F0            [24] 6568 	mov	b,r4
      002456 12r00r00         [24] 6569 	lcall	__gptrget
      002459 FD               [12] 6570 	mov	r5,a
      00245A A3               [24] 6571 	inc	dptr
      00245B 12r00r00         [24] 6572 	lcall	__gptrget
      00245E FE               [12] 6573 	mov	r6,a
      00245F A3               [24] 6574 	inc	dptr
      002460 12r00r00         [24] 6575 	lcall	__gptrget
      002463 FF               [12] 6576 	mov	r7,a
      002464 C0 04            [24] 6577 	push	ar4
      002466 C0 03            [24] 6578 	push	ar3
      002468 C0 02            [24] 6579 	push	ar2
      00246A E5*00            [12] 6580 	mov	a,_bp
      00246C 24 0E            [12] 6581 	add	a,#0x0e
      00246E F8               [12] 6582 	mov	r0,a
      00246F E6               [12] 6583 	mov	a,@r0
      002470 C0 E0            [24] 6584 	push	acc
      002472 08               [12] 6585 	inc	r0
      002473 E6               [12] 6586 	mov	a,@r0
      002474 C0 E0            [24] 6587 	push	acc
      002476 08               [12] 6588 	inc	r0
      002477 E6               [12] 6589 	mov	a,@r0
      002478 C0 E0            [24] 6590 	push	acc
      00247A 8D 82            [24] 6591 	mov	dpl,r5
      00247C 8E 83            [24] 6592 	mov	dph,r6
      00247E 8F F0            [24] 6593 	mov	b,r7
      002480 12r00r00         [24] 6594 	lcall	_stack_pop
      002483 AE 82            [24] 6595 	mov	r6,dpl
      002485 AF 83            [24] 6596 	mov	r7,dph
      002487 15 81            [12] 6597 	dec	sp
      002489 15 81            [12] 6598 	dec	sp
      00248B 15 81            [12] 6599 	dec	sp
      00248D D0 02            [24] 6600 	pop	ar2
      00248F D0 03            [24] 6601 	pop	ar3
      002491 D0 04            [24] 6602 	pop	ar4
      002493 EE               [12] 6603 	mov	a,r6
      002494 4F               [12] 6604 	orl	a,r7
      002495 70 25            [24] 6605 	jnz	00221$
      002497 7Dr4E            [12] 6606 	mov	r5,#___str_10
      002499 7Cs00            [12] 6607 	mov	r4,#(___str_10 >> 8)
      00249B 7B 80            [12] 6608 	mov	r3,#0x80
                                   6609 ;	calc.c:51: return;
      00249D                       6610 00474$:
                                   6611 ;	calc.c:49: for (; *s; s++) putchar(*s);
      00249D 8D 82            [24] 6612 	mov	dpl,r5
      00249F 8C 83            [24] 6613 	mov	dph,r4
      0024A1 8B F0            [24] 6614 	mov	b,r3
      0024A3 12r00r00         [24] 6615 	lcall	__gptrget
      0024A6 FF               [12] 6616 	mov	r7,a
      0024A7 70 03            [24] 6617 	jnz	01378$
      0024A9 02r2Br95         [24] 6618 	ljmp	00249$
      0024AC                       6619 01378$:
      0024AC 7E 00            [12] 6620 	mov	r6,#0x00
      0024AE 8F 82            [24] 6621 	mov	dpl,r7
      0024B0 8E 83            [24] 6622 	mov	dph,r6
      0024B2 12r00r00         [24] 6623 	lcall	_putchar
      0024B5 0D               [12] 6624 	inc	r5
                                   6625 ;	calc.c:296: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      0024B6 BD 00 E4         [24] 6626 	cjne	r5,#0x00,00474$
      0024B9 0C               [12] 6627 	inc	r4
      0024BA 80 E1            [24] 6628 	sjmp	00474$
      0024BC                       6629 00221$:
                                   6630 ;	calc.c:297: else if (!stack_pop(ctx->ps, &d1)) {
      0024BC E5*00            [12] 6631 	mov	a,_bp
      0024BE 24 19            [12] 6632 	add	a,#0x19
      0024C0 FF               [12] 6633 	mov	r7,a
      0024C1 E5*00            [12] 6634 	mov	a,_bp
      0024C3 24 0E            [12] 6635 	add	a,#0x0e
      0024C5 F8               [12] 6636 	mov	r0,a
      0024C6 A6 07            [24] 6637 	mov	@r0,ar7
      0024C8 08               [12] 6638 	inc	r0
      0024C9 76 00            [12] 6639 	mov	@r0,#0x00
      0024CB 08               [12] 6640 	inc	r0
      0024CC 76 40            [12] 6641 	mov	@r0,#0x40
      0024CE 8A 82            [24] 6642 	mov	dpl,r2
      0024D0 8B 83            [24] 6643 	mov	dph,r3
      0024D2 8C F0            [24] 6644 	mov	b,r4
      0024D4 12r00r00         [24] 6645 	lcall	__gptrget
      0024D7 FD               [12] 6646 	mov	r5,a
      0024D8 A3               [24] 6647 	inc	dptr
      0024D9 12r00r00         [24] 6648 	lcall	__gptrget
      0024DC FE               [12] 6649 	mov	r6,a
      0024DD A3               [24] 6650 	inc	dptr
      0024DE 12r00r00         [24] 6651 	lcall	__gptrget
      0024E1 FF               [12] 6652 	mov	r7,a
      0024E2 C0 04            [24] 6653 	push	ar4
      0024E4 C0 03            [24] 6654 	push	ar3
      0024E6 C0 02            [24] 6655 	push	ar2
      0024E8 E5*00            [12] 6656 	mov	a,_bp
      0024EA 24 0E            [12] 6657 	add	a,#0x0e
      0024EC F8               [12] 6658 	mov	r0,a
      0024ED E6               [12] 6659 	mov	a,@r0
      0024EE C0 E0            [24] 6660 	push	acc
      0024F0 08               [12] 6661 	inc	r0
      0024F1 E6               [12] 6662 	mov	a,@r0
      0024F2 C0 E0            [24] 6663 	push	acc
      0024F4 08               [12] 6664 	inc	r0
      0024F5 E6               [12] 6665 	mov	a,@r0
      0024F6 C0 E0            [24] 6666 	push	acc
      0024F8 8D 82            [24] 6667 	mov	dpl,r5
      0024FA 8E 83            [24] 6668 	mov	dph,r6
      0024FC 8F F0            [24] 6669 	mov	b,r7
      0024FE 12r00r00         [24] 6670 	lcall	_stack_pop
      002501 AE 82            [24] 6671 	mov	r6,dpl
      002503 AF 83            [24] 6672 	mov	r7,dph
      002505 15 81            [12] 6673 	dec	sp
      002507 15 81            [12] 6674 	dec	sp
      002509 15 81            [12] 6675 	dec	sp
      00250B D0 02            [24] 6676 	pop	ar2
      00250D D0 03            [24] 6677 	pop	ar3
      00250F D0 04            [24] 6678 	pop	ar4
      002511 EE               [12] 6679 	mov	a,r6
      002512 4F               [12] 6680 	orl	a,r7
      002513 70 5C            [24] 6681 	jnz	00218$
                                   6682 ;	calc.c:298: (void)stack_push(ctx->ps, d0);
      002515 8A 82            [24] 6683 	mov	dpl,r2
      002517 8B 83            [24] 6684 	mov	dph,r3
      002519 8C F0            [24] 6685 	mov	b,r4
      00251B 12r00r00         [24] 6686 	lcall	__gptrget
      00251E FD               [12] 6687 	mov	r5,a
      00251F A3               [24] 6688 	inc	dptr
      002520 12r00r00         [24] 6689 	lcall	__gptrget
      002523 FE               [12] 6690 	mov	r6,a
      002524 A3               [24] 6691 	inc	dptr
      002525 12r00r00         [24] 6692 	lcall	__gptrget
      002528 FF               [12] 6693 	mov	r7,a
      002529 E5*00            [12] 6694 	mov	a,_bp
      00252B 24 15            [12] 6695 	add	a,#0x15
      00252D F8               [12] 6696 	mov	r0,a
      00252E E6               [12] 6697 	mov	a,@r0
      00252F C0 E0            [24] 6698 	push	acc
      002531 08               [12] 6699 	inc	r0
      002532 E6               [12] 6700 	mov	a,@r0
      002533 C0 E0            [24] 6701 	push	acc
      002535 08               [12] 6702 	inc	r0
      002536 E6               [12] 6703 	mov	a,@r0
      002537 C0 E0            [24] 6704 	push	acc
      002539 08               [12] 6705 	inc	r0
      00253A E6               [12] 6706 	mov	a,@r0
      00253B C0 E0            [24] 6707 	push	acc
      00253D 8D 82            [24] 6708 	mov	dpl,r5
      00253F 8E 83            [24] 6709 	mov	dph,r6
      002541 8F F0            [24] 6710 	mov	b,r7
      002543 12r00r00         [24] 6711 	lcall	_stack_push
      002546 E5 81            [12] 6712 	mov	a,sp
      002548 24 FC            [12] 6713 	add	a,#0xfc
      00254A F5 81            [12] 6714 	mov	sp,a
                                   6715 ;	calc.c:299: printstr("\r\nstack underflow\r\n");
      00254C 7Dr4E            [12] 6716 	mov	r5,#___str_10
      00254E 7Cs00            [12] 6717 	mov	r4,#(___str_10 >> 8)
      002550 7B 80            [12] 6718 	mov	r3,#0x80
                                   6719 ;	calc.c:51: return;
      002552                       6720 00477$:
                                   6721 ;	calc.c:49: for (; *s; s++) putchar(*s);
      002552 8D 82            [24] 6722 	mov	dpl,r5
      002554 8C 83            [24] 6723 	mov	dph,r4
      002556 8B F0            [24] 6724 	mov	b,r3
      002558 12r00r00         [24] 6725 	lcall	__gptrget
      00255B FF               [12] 6726 	mov	r7,a
      00255C 70 03            [24] 6727 	jnz	01381$
      00255E 02r2Br95         [24] 6728 	ljmp	00249$
      002561                       6729 01381$:
      002561 7E 00            [12] 6730 	mov	r6,#0x00
      002563 8F 82            [24] 6731 	mov	dpl,r7
      002565 8E 83            [24] 6732 	mov	dph,r6
      002567 12r00r00         [24] 6733 	lcall	_putchar
      00256A 0D               [12] 6734 	inc	r5
                                   6735 ;	calc.c:299: printstr("\r\nstack underflow\r\n");
      00256B BD 00 E4         [24] 6736 	cjne	r5,#0x00,00477$
      00256E 0C               [12] 6737 	inc	r4
      00256F 80 E1            [24] 6738 	sjmp	00477$
      002571                       6739 00218$:
                                   6740 ;	calc.c:301: d1 ^= d0;
      002571 E5*00            [12] 6741 	mov	a,_bp
      002573 24 19            [12] 6742 	add	a,#0x19
      002575 F8               [12] 6743 	mov	r0,a
      002576 E5*00            [12] 6744 	mov	a,_bp
      002578 24 15            [12] 6745 	add	a,#0x15
      00257A F9               [12] 6746 	mov	r1,a
      00257B E7               [12] 6747 	mov	a,@r1
      00257C 66               [12] 6748 	xrl	a,@r0
      00257D F6               [12] 6749 	mov	@r0,a
      00257E 09               [12] 6750 	inc	r1
      00257F E7               [12] 6751 	mov	a,@r1
      002580 08               [12] 6752 	inc	r0
      002581 66               [12] 6753 	xrl	a,@r0
      002582 F6               [12] 6754 	mov	@r0,a
      002583 09               [12] 6755 	inc	r1
      002584 E7               [12] 6756 	mov	a,@r1
      002585 08               [12] 6757 	inc	r0
      002586 66               [12] 6758 	xrl	a,@r0
      002587 F6               [12] 6759 	mov	@r0,a
      002588 09               [12] 6760 	inc	r1
      002589 E7               [12] 6761 	mov	a,@r1
      00258A 08               [12] 6762 	inc	r0
      00258B 66               [12] 6763 	xrl	a,@r0
      00258C F6               [12] 6764 	mov	@r0,a
                                   6765 ;	calc.c:302: (void)stack_push(ctx->ps, d1);
      00258D 8A 82            [24] 6766 	mov	dpl,r2
      00258F 8B 83            [24] 6767 	mov	dph,r3
      002591 8C F0            [24] 6768 	mov	b,r4
      002593 12r00r00         [24] 6769 	lcall	__gptrget
      002596 FA               [12] 6770 	mov	r2,a
      002597 A3               [24] 6771 	inc	dptr
      002598 12r00r00         [24] 6772 	lcall	__gptrget
      00259B FB               [12] 6773 	mov	r3,a
      00259C A3               [24] 6774 	inc	dptr
      00259D 12r00r00         [24] 6775 	lcall	__gptrget
      0025A0 FC               [12] 6776 	mov	r4,a
      0025A1 E5*00            [12] 6777 	mov	a,_bp
      0025A3 24 19            [12] 6778 	add	a,#0x19
      0025A5 F8               [12] 6779 	mov	r0,a
      0025A6 E6               [12] 6780 	mov	a,@r0
      0025A7 C0 E0            [24] 6781 	push	acc
      0025A9 08               [12] 6782 	inc	r0
      0025AA E6               [12] 6783 	mov	a,@r0
      0025AB C0 E0            [24] 6784 	push	acc
      0025AD 08               [12] 6785 	inc	r0
      0025AE E6               [12] 6786 	mov	a,@r0
      0025AF C0 E0            [24] 6787 	push	acc
      0025B1 08               [12] 6788 	inc	r0
      0025B2 E6               [12] 6789 	mov	a,@r0
      0025B3 C0 E0            [24] 6790 	push	acc
      0025B5 8A 82            [24] 6791 	mov	dpl,r2
      0025B7 8B 83            [24] 6792 	mov	dph,r3
      0025B9 8C F0            [24] 6793 	mov	b,r4
      0025BB 12r00r00         [24] 6794 	lcall	_stack_push
      0025BE E5 81            [12] 6795 	mov	a,sp
      0025C0 24 FC            [12] 6796 	add	a,#0xfc
      0025C2 F5 81            [12] 6797 	mov	sp,a
                                   6798 ;	calc.c:304: break;
      0025C4 02r2Br95         [24] 6799 	ljmp	00249$
                                   6800 ;	calc.c:305: case '>':
      0025C7                       6801 00223$:
                                   6802 ;	calc.c:306: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      0025C7 E5*00            [12] 6803 	mov	a,_bp
      0025C9 24 15            [12] 6804 	add	a,#0x15
      0025CB FC               [12] 6805 	mov	r4,a
      0025CC 7B 00            [12] 6806 	mov	r3,#0x00
      0025CE 7A 40            [12] 6807 	mov	r2,#0x40
      0025D0 E5*00            [12] 6808 	mov	a,_bp
      0025D2 24 12            [12] 6809 	add	a,#0x12
      0025D4 F8               [12] 6810 	mov	r0,a
      0025D5 E5*00            [12] 6811 	mov	a,_bp
      0025D7 24 0B            [12] 6812 	add	a,#0x0b
      0025D9 F9               [12] 6813 	mov	r1,a
      0025DA 74 11            [12] 6814 	mov	a,#0x11
      0025DC 26               [12] 6815 	add	a,@r0
      0025DD F7               [12] 6816 	mov	@r1,a
      0025DE 74 40            [12] 6817 	mov	a,#0x40
      0025E0 08               [12] 6818 	inc	r0
      0025E1 36               [12] 6819 	addc	a,@r0
      0025E2 09               [12] 6820 	inc	r1
      0025E3 F7               [12] 6821 	mov	@r1,a
      0025E4 08               [12] 6822 	inc	r0
      0025E5 09               [12] 6823 	inc	r1
      0025E6 E6               [12] 6824 	mov	a,@r0
      0025E7 F7               [12] 6825 	mov	@r1,a
      0025E8 E5*00            [12] 6826 	mov	a,_bp
      0025EA 24 0B            [12] 6827 	add	a,#0x0b
      0025EC F8               [12] 6828 	mov	r0,a
      0025ED 86 82            [24] 6829 	mov	dpl,@r0
      0025EF 08               [12] 6830 	inc	r0
      0025F0 86 83            [24] 6831 	mov	dph,@r0
      0025F2 08               [12] 6832 	inc	r0
      0025F3 86 F0            [24] 6833 	mov	b,@r0
      0025F5 12r00r00         [24] 6834 	lcall	__gptrget
      0025F8 FD               [12] 6835 	mov	r5,a
      0025F9 A3               [24] 6836 	inc	dptr
      0025FA 12r00r00         [24] 6837 	lcall	__gptrget
      0025FD FE               [12] 6838 	mov	r6,a
      0025FE A3               [24] 6839 	inc	dptr
      0025FF 12r00r00         [24] 6840 	lcall	__gptrget
      002602 FF               [12] 6841 	mov	r7,a
      002603 C0 04            [24] 6842 	push	ar4
      002605 C0 03            [24] 6843 	push	ar3
      002607 C0 02            [24] 6844 	push	ar2
      002609 8D 82            [24] 6845 	mov	dpl,r5
      00260B 8E 83            [24] 6846 	mov	dph,r6
      00260D 8F F0            [24] 6847 	mov	b,r7
      00260F 12r00r00         [24] 6848 	lcall	_stack_pop
      002612 AE 82            [24] 6849 	mov	r6,dpl
      002614 AF 83            [24] 6850 	mov	r7,dph
      002616 15 81            [12] 6851 	dec	sp
      002618 15 81            [12] 6852 	dec	sp
      00261A 15 81            [12] 6853 	dec	sp
      00261C EE               [12] 6854 	mov	a,r6
      00261D 4F               [12] 6855 	orl	a,r7
      00261E 70 25            [24] 6856 	jnz	00228$
      002620 7Dr4E            [12] 6857 	mov	r5,#___str_10
      002622 7Cs00            [12] 6858 	mov	r4,#(___str_10 >> 8)
      002624 7B 80            [12] 6859 	mov	r3,#0x80
                                   6860 ;	calc.c:51: return;
      002626                       6861 00480$:
                                   6862 ;	calc.c:49: for (; *s; s++) putchar(*s);
      002626 8D 82            [24] 6863 	mov	dpl,r5
      002628 8C 83            [24] 6864 	mov	dph,r4
      00262A 8B F0            [24] 6865 	mov	b,r3
      00262C 12r00r00         [24] 6866 	lcall	__gptrget
      00262F FF               [12] 6867 	mov	r7,a
      002630 70 03            [24] 6868 	jnz	01384$
      002632 02r2Br95         [24] 6869 	ljmp	00249$
      002635                       6870 01384$:
      002635 7E 00            [12] 6871 	mov	r6,#0x00
      002637 8F 82            [24] 6872 	mov	dpl,r7
      002639 8E 83            [24] 6873 	mov	dph,r6
      00263B 12r00r00         [24] 6874 	lcall	_putchar
      00263E 0D               [12] 6875 	inc	r5
                                   6876 ;	calc.c:306: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      00263F BD 00 E4         [24] 6877 	cjne	r5,#0x00,00480$
      002642 0C               [12] 6878 	inc	r4
      002643 80 E1            [24] 6879 	sjmp	00480$
      002645                       6880 00228$:
                                   6881 ;	calc.c:307: else if (!stack_pop(ctx->ps, &d1)) {
      002645 E5*00            [12] 6882 	mov	a,_bp
      002647 24 19            [12] 6883 	add	a,#0x19
      002649 FC               [12] 6884 	mov	r4,a
      00264A 7B 00            [12] 6885 	mov	r3,#0x00
      00264C 7A 40            [12] 6886 	mov	r2,#0x40
      00264E E5*00            [12] 6887 	mov	a,_bp
      002650 24 0B            [12] 6888 	add	a,#0x0b
      002652 F8               [12] 6889 	mov	r0,a
      002653 86 82            [24] 6890 	mov	dpl,@r0
      002655 08               [12] 6891 	inc	r0
      002656 86 83            [24] 6892 	mov	dph,@r0
      002658 08               [12] 6893 	inc	r0
      002659 86 F0            [24] 6894 	mov	b,@r0
      00265B 12r00r00         [24] 6895 	lcall	__gptrget
      00265E FD               [12] 6896 	mov	r5,a
      00265F A3               [24] 6897 	inc	dptr
      002660 12r00r00         [24] 6898 	lcall	__gptrget
      002663 FE               [12] 6899 	mov	r6,a
      002664 A3               [24] 6900 	inc	dptr
      002665 12r00r00         [24] 6901 	lcall	__gptrget
      002668 FF               [12] 6902 	mov	r7,a
      002669 C0 04            [24] 6903 	push	ar4
      00266B C0 03            [24] 6904 	push	ar3
      00266D C0 02            [24] 6905 	push	ar2
      00266F 8D 82            [24] 6906 	mov	dpl,r5
      002671 8E 83            [24] 6907 	mov	dph,r6
      002673 8F F0            [24] 6908 	mov	b,r7
      002675 12r00r00         [24] 6909 	lcall	_stack_pop
      002678 AE 82            [24] 6910 	mov	r6,dpl
      00267A AF 83            [24] 6911 	mov	r7,dph
      00267C 15 81            [12] 6912 	dec	sp
      00267E 15 81            [12] 6913 	dec	sp
      002680 15 81            [12] 6914 	dec	sp
      002682 EE               [12] 6915 	mov	a,r6
      002683 4F               [12] 6916 	orl	a,r7
      002684 70 63            [24] 6917 	jnz	00225$
                                   6918 ;	calc.c:308: (void)stack_push(ctx->ps, d0);
      002686 E5*00            [12] 6919 	mov	a,_bp
      002688 24 0B            [12] 6920 	add	a,#0x0b
      00268A F8               [12] 6921 	mov	r0,a
      00268B 86 82            [24] 6922 	mov	dpl,@r0
      00268D 08               [12] 6923 	inc	r0
      00268E 86 83            [24] 6924 	mov	dph,@r0
      002690 08               [12] 6925 	inc	r0
      002691 86 F0            [24] 6926 	mov	b,@r0
      002693 12r00r00         [24] 6927 	lcall	__gptrget
      002696 FD               [12] 6928 	mov	r5,a
      002697 A3               [24] 6929 	inc	dptr
      002698 12r00r00         [24] 6930 	lcall	__gptrget
      00269B FE               [12] 6931 	mov	r6,a
      00269C A3               [24] 6932 	inc	dptr
      00269D 12r00r00         [24] 6933 	lcall	__gptrget
      0026A0 FF               [12] 6934 	mov	r7,a
      0026A1 E5*00            [12] 6935 	mov	a,_bp
      0026A3 24 15            [12] 6936 	add	a,#0x15
      0026A5 F8               [12] 6937 	mov	r0,a
      0026A6 E6               [12] 6938 	mov	a,@r0
      0026A7 C0 E0            [24] 6939 	push	acc
      0026A9 08               [12] 6940 	inc	r0
      0026AA E6               [12] 6941 	mov	a,@r0
      0026AB C0 E0            [24] 6942 	push	acc
      0026AD 08               [12] 6943 	inc	r0
      0026AE E6               [12] 6944 	mov	a,@r0
      0026AF C0 E0            [24] 6945 	push	acc
      0026B1 08               [12] 6946 	inc	r0
      0026B2 E6               [12] 6947 	mov	a,@r0
      0026B3 C0 E0            [24] 6948 	push	acc
      0026B5 8D 82            [24] 6949 	mov	dpl,r5
      0026B7 8E 83            [24] 6950 	mov	dph,r6
      0026B9 8F F0            [24] 6951 	mov	b,r7
      0026BB 12r00r00         [24] 6952 	lcall	_stack_push
      0026BE E5 81            [12] 6953 	mov	a,sp
      0026C0 24 FC            [12] 6954 	add	a,#0xfc
      0026C2 F5 81            [12] 6955 	mov	sp,a
                                   6956 ;	calc.c:309: printstr("\r\nstack underflow\r\n");
      0026C4 7Dr4E            [12] 6957 	mov	r5,#___str_10
      0026C6 7Cs00            [12] 6958 	mov	r4,#(___str_10 >> 8)
      0026C8 7B 80            [12] 6959 	mov	r3,#0x80
                                   6960 ;	calc.c:51: return;
      0026CA                       6961 00483$:
                                   6962 ;	calc.c:49: for (; *s; s++) putchar(*s);
      0026CA 8D 82            [24] 6963 	mov	dpl,r5
      0026CC 8C 83            [24] 6964 	mov	dph,r4
      0026CE 8B F0            [24] 6965 	mov	b,r3
      0026D0 12r00r00         [24] 6966 	lcall	__gptrget
      0026D3 FF               [12] 6967 	mov	r7,a
      0026D4 70 03            [24] 6968 	jnz	01387$
      0026D6 02r2Br95         [24] 6969 	ljmp	00249$
      0026D9                       6970 01387$:
      0026D9 7E 00            [12] 6971 	mov	r6,#0x00
      0026DB 8F 82            [24] 6972 	mov	dpl,r7
      0026DD 8E 83            [24] 6973 	mov	dph,r6
      0026DF 12r00r00         [24] 6974 	lcall	_putchar
      0026E2 0D               [12] 6975 	inc	r5
                                   6976 ;	calc.c:309: printstr("\r\nstack underflow\r\n");
      0026E3 BD 00 E4         [24] 6977 	cjne	r5,#0x00,00483$
      0026E6 0C               [12] 6978 	inc	r4
      0026E7 80 E1            [24] 6979 	sjmp	00483$
      0026E9                       6980 00225$:
                                   6981 ;	calc.c:311: d1 = (unsigned long)d1 >> d0;
      0026E9 E5*00            [12] 6982 	mov	a,_bp
      0026EB 24 19            [12] 6983 	add	a,#0x19
      0026ED F8               [12] 6984 	mov	r0,a
      0026EE 86 04            [24] 6985 	mov	ar4,@r0
      0026F0 08               [12] 6986 	inc	r0
      0026F1 86 05            [24] 6987 	mov	ar5,@r0
      0026F3 08               [12] 6988 	inc	r0
      0026F4 86 06            [24] 6989 	mov	ar6,@r0
      0026F6 08               [12] 6990 	inc	r0
      0026F7 86 07            [24] 6991 	mov	ar7,@r0
      0026F9 E5*00            [12] 6992 	mov	a,_bp
      0026FB 24 15            [12] 6993 	add	a,#0x15
      0026FD F8               [12] 6994 	mov	r0,a
      0026FE 86 F0            [24] 6995 	mov	b,@r0
      002700 05 F0            [12] 6996 	inc	b
      002702 80 0D            [24] 6997 	sjmp	01390$
      002704                       6998 01389$:
      002704 C3               [12] 6999 	clr	c
      002705 EF               [12] 7000 	mov	a,r7
      002706 13               [12] 7001 	rrc	a
      002707 FF               [12] 7002 	mov	r7,a
      002708 EE               [12] 7003 	mov	a,r6
      002709 13               [12] 7004 	rrc	a
      00270A FE               [12] 7005 	mov	r6,a
      00270B ED               [12] 7006 	mov	a,r5
      00270C 13               [12] 7007 	rrc	a
      00270D FD               [12] 7008 	mov	r5,a
      00270E EC               [12] 7009 	mov	a,r4
      00270F 13               [12] 7010 	rrc	a
      002710 FC               [12] 7011 	mov	r4,a
      002711                       7012 01390$:
      002711 D5 F0 F0         [24] 7013 	djnz	b,01389$
      002714 E5*00            [12] 7014 	mov	a,_bp
      002716 24 19            [12] 7015 	add	a,#0x19
      002718 F8               [12] 7016 	mov	r0,a
      002719 A6 04            [24] 7017 	mov	@r0,ar4
      00271B 08               [12] 7018 	inc	r0
      00271C A6 05            [24] 7019 	mov	@r0,ar5
      00271E 08               [12] 7020 	inc	r0
      00271F A6 06            [24] 7021 	mov	@r0,ar6
      002721 08               [12] 7022 	inc	r0
      002722 A6 07            [24] 7023 	mov	@r0,ar7
                                   7024 ;	calc.c:312: (void)stack_push(ctx->ps, d1);
      002724 E5*00            [12] 7025 	mov	a,_bp
      002726 24 0B            [12] 7026 	add	a,#0x0b
      002728 F8               [12] 7027 	mov	r0,a
      002729 86 82            [24] 7028 	mov	dpl,@r0
      00272B 08               [12] 7029 	inc	r0
      00272C 86 83            [24] 7030 	mov	dph,@r0
      00272E 08               [12] 7031 	inc	r0
      00272F 86 F0            [24] 7032 	mov	b,@r0
      002731 12r00r00         [24] 7033 	lcall	__gptrget
      002734 FD               [12] 7034 	mov	r5,a
      002735 A3               [24] 7035 	inc	dptr
      002736 12r00r00         [24] 7036 	lcall	__gptrget
      002739 FE               [12] 7037 	mov	r6,a
      00273A A3               [24] 7038 	inc	dptr
      00273B 12r00r00         [24] 7039 	lcall	__gptrget
      00273E FF               [12] 7040 	mov	r7,a
      00273F E5*00            [12] 7041 	mov	a,_bp
      002741 24 19            [12] 7042 	add	a,#0x19
      002743 F8               [12] 7043 	mov	r0,a
      002744 E6               [12] 7044 	mov	a,@r0
      002745 C0 E0            [24] 7045 	push	acc
      002747 08               [12] 7046 	inc	r0
      002748 E6               [12] 7047 	mov	a,@r0
      002749 C0 E0            [24] 7048 	push	acc
      00274B 08               [12] 7049 	inc	r0
      00274C E6               [12] 7050 	mov	a,@r0
      00274D C0 E0            [24] 7051 	push	acc
      00274F 08               [12] 7052 	inc	r0
      002750 E6               [12] 7053 	mov	a,@r0
      002751 C0 E0            [24] 7054 	push	acc
      002753 8D 82            [24] 7055 	mov	dpl,r5
      002755 8E 83            [24] 7056 	mov	dph,r6
      002757 8F F0            [24] 7057 	mov	b,r7
      002759 12r00r00         [24] 7058 	lcall	_stack_push
      00275C E5 81            [12] 7059 	mov	a,sp
      00275E 24 FC            [12] 7060 	add	a,#0xfc
      002760 F5 81            [12] 7061 	mov	sp,a
                                   7062 ;	calc.c:314: break;
      002762 02r2Br95         [24] 7063 	ljmp	00249$
                                   7064 ;	calc.c:315: case ']':
      002765                       7065 00230$:
                                   7066 ;	calc.c:316: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      002765 E5*00            [12] 7067 	mov	a,_bp
      002767 24 15            [12] 7068 	add	a,#0x15
      002769 FF               [12] 7069 	mov	r7,a
      00276A E5*00            [12] 7070 	mov	a,_bp
      00276C 24 0E            [12] 7071 	add	a,#0x0e
      00276E F8               [12] 7072 	mov	r0,a
      00276F A6 07            [24] 7073 	mov	@r0,ar7
      002771 08               [12] 7074 	inc	r0
      002772 76 00            [12] 7075 	mov	@r0,#0x00
      002774 08               [12] 7076 	inc	r0
      002775 76 40            [12] 7077 	mov	@r0,#0x40
      002777 E5*00            [12] 7078 	mov	a,_bp
      002779 24 12            [12] 7079 	add	a,#0x12
      00277B F8               [12] 7080 	mov	r0,a
      00277C 74 11            [12] 7081 	mov	a,#0x11
      00277E 26               [12] 7082 	add	a,@r0
      00277F FA               [12] 7083 	mov	r2,a
      002780 74 40            [12] 7084 	mov	a,#0x40
      002782 08               [12] 7085 	inc	r0
      002783 36               [12] 7086 	addc	a,@r0
      002784 FB               [12] 7087 	mov	r3,a
      002785 08               [12] 7088 	inc	r0
      002786 86 04            [24] 7089 	mov	ar4,@r0
      002788 8A 82            [24] 7090 	mov	dpl,r2
      00278A 8B 83            [24] 7091 	mov	dph,r3
      00278C 8C F0            [24] 7092 	mov	b,r4
      00278E 12r00r00         [24] 7093 	lcall	__gptrget
      002791 FD               [12] 7094 	mov	r5,a
      002792 A3               [24] 7095 	inc	dptr
      002793 12r00r00         [24] 7096 	lcall	__gptrget
      002796 FE               [12] 7097 	mov	r6,a
      002797 A3               [24] 7098 	inc	dptr
      002798 12r00r00         [24] 7099 	lcall	__gptrget
      00279B FF               [12] 7100 	mov	r7,a
      00279C C0 04            [24] 7101 	push	ar4
      00279E C0 03            [24] 7102 	push	ar3
      0027A0 C0 02            [24] 7103 	push	ar2
      0027A2 E5*00            [12] 7104 	mov	a,_bp
      0027A4 24 0E            [12] 7105 	add	a,#0x0e
      0027A6 F8               [12] 7106 	mov	r0,a
      0027A7 E6               [12] 7107 	mov	a,@r0
      0027A8 C0 E0            [24] 7108 	push	acc
      0027AA 08               [12] 7109 	inc	r0
      0027AB E6               [12] 7110 	mov	a,@r0
      0027AC C0 E0            [24] 7111 	push	acc
      0027AE 08               [12] 7112 	inc	r0
      0027AF E6               [12] 7113 	mov	a,@r0
      0027B0 C0 E0            [24] 7114 	push	acc
      0027B2 8D 82            [24] 7115 	mov	dpl,r5
      0027B4 8E 83            [24] 7116 	mov	dph,r6
      0027B6 8F F0            [24] 7117 	mov	b,r7
      0027B8 12r00r00         [24] 7118 	lcall	_stack_pop
      0027BB AE 82            [24] 7119 	mov	r6,dpl
      0027BD AF 83            [24] 7120 	mov	r7,dph
      0027BF 15 81            [12] 7121 	dec	sp
      0027C1 15 81            [12] 7122 	dec	sp
      0027C3 15 81            [12] 7123 	dec	sp
      0027C5 D0 02            [24] 7124 	pop	ar2
      0027C7 D0 03            [24] 7125 	pop	ar3
      0027C9 D0 04            [24] 7126 	pop	ar4
      0027CB EE               [12] 7127 	mov	a,r6
      0027CC 4F               [12] 7128 	orl	a,r7
      0027CD 70 25            [24] 7129 	jnz	00235$
      0027CF 7Dr4E            [12] 7130 	mov	r5,#___str_10
      0027D1 7Cs00            [12] 7131 	mov	r4,#(___str_10 >> 8)
      0027D3 7B 80            [12] 7132 	mov	r3,#0x80
                                   7133 ;	calc.c:51: return;
      0027D5                       7134 00486$:
                                   7135 ;	calc.c:49: for (; *s; s++) putchar(*s);
      0027D5 8D 82            [24] 7136 	mov	dpl,r5
      0027D7 8C 83            [24] 7137 	mov	dph,r4
      0027D9 8B F0            [24] 7138 	mov	b,r3
      0027DB 12r00r00         [24] 7139 	lcall	__gptrget
      0027DE FF               [12] 7140 	mov	r7,a
      0027DF 70 03            [24] 7141 	jnz	01392$
      0027E1 02r2Br95         [24] 7142 	ljmp	00249$
      0027E4                       7143 01392$:
      0027E4 7E 00            [12] 7144 	mov	r6,#0x00
      0027E6 8F 82            [24] 7145 	mov	dpl,r7
      0027E8 8E 83            [24] 7146 	mov	dph,r6
      0027EA 12r00r00         [24] 7147 	lcall	_putchar
      0027ED 0D               [12] 7148 	inc	r5
                                   7149 ;	calc.c:316: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      0027EE BD 00 E4         [24] 7150 	cjne	r5,#0x00,00486$
      0027F1 0C               [12] 7151 	inc	r4
      0027F2 80 E1            [24] 7152 	sjmp	00486$
      0027F4                       7153 00235$:
                                   7154 ;	calc.c:317: else if (!stack_pop(ctx->ps, &d1)) {
      0027F4 E5*00            [12] 7155 	mov	a,_bp
      0027F6 24 19            [12] 7156 	add	a,#0x19
      0027F8 FF               [12] 7157 	mov	r7,a
      0027F9 E5*00            [12] 7158 	mov	a,_bp
      0027FB 24 0E            [12] 7159 	add	a,#0x0e
      0027FD F8               [12] 7160 	mov	r0,a
      0027FE A6 07            [24] 7161 	mov	@r0,ar7
      002800 08               [12] 7162 	inc	r0
      002801 76 00            [12] 7163 	mov	@r0,#0x00
      002803 08               [12] 7164 	inc	r0
      002804 76 40            [12] 7165 	mov	@r0,#0x40
      002806 8A 82            [24] 7166 	mov	dpl,r2
      002808 8B 83            [24] 7167 	mov	dph,r3
      00280A 8C F0            [24] 7168 	mov	b,r4
      00280C 12r00r00         [24] 7169 	lcall	__gptrget
      00280F FD               [12] 7170 	mov	r5,a
      002810 A3               [24] 7171 	inc	dptr
      002811 12r00r00         [24] 7172 	lcall	__gptrget
      002814 FE               [12] 7173 	mov	r6,a
      002815 A3               [24] 7174 	inc	dptr
      002816 12r00r00         [24] 7175 	lcall	__gptrget
      002819 FF               [12] 7176 	mov	r7,a
      00281A C0 04            [24] 7177 	push	ar4
      00281C C0 03            [24] 7178 	push	ar3
      00281E C0 02            [24] 7179 	push	ar2
      002820 E5*00            [12] 7180 	mov	a,_bp
      002822 24 0E            [12] 7181 	add	a,#0x0e
      002824 F8               [12] 7182 	mov	r0,a
      002825 E6               [12] 7183 	mov	a,@r0
      002826 C0 E0            [24] 7184 	push	acc
      002828 08               [12] 7185 	inc	r0
      002829 E6               [12] 7186 	mov	a,@r0
      00282A C0 E0            [24] 7187 	push	acc
      00282C 08               [12] 7188 	inc	r0
      00282D E6               [12] 7189 	mov	a,@r0
      00282E C0 E0            [24] 7190 	push	acc
      002830 8D 82            [24] 7191 	mov	dpl,r5
      002832 8E 83            [24] 7192 	mov	dph,r6
      002834 8F F0            [24] 7193 	mov	b,r7
      002836 12r00r00         [24] 7194 	lcall	_stack_pop
      002839 AE 82            [24] 7195 	mov	r6,dpl
      00283B AF 83            [24] 7196 	mov	r7,dph
      00283D 15 81            [12] 7197 	dec	sp
      00283F 15 81            [12] 7198 	dec	sp
      002841 15 81            [12] 7199 	dec	sp
      002843 D0 02            [24] 7200 	pop	ar2
      002845 D0 03            [24] 7201 	pop	ar3
      002847 D0 04            [24] 7202 	pop	ar4
      002849 EE               [12] 7203 	mov	a,r6
      00284A 4F               [12] 7204 	orl	a,r7
      00284B 70 5C            [24] 7205 	jnz	00232$
                                   7206 ;	calc.c:318: (void)stack_push(ctx->ps, d0);
      00284D 8A 82            [24] 7207 	mov	dpl,r2
      00284F 8B 83            [24] 7208 	mov	dph,r3
      002851 8C F0            [24] 7209 	mov	b,r4
      002853 12r00r00         [24] 7210 	lcall	__gptrget
      002856 FD               [12] 7211 	mov	r5,a
      002857 A3               [24] 7212 	inc	dptr
      002858 12r00r00         [24] 7213 	lcall	__gptrget
      00285B FE               [12] 7214 	mov	r6,a
      00285C A3               [24] 7215 	inc	dptr
      00285D 12r00r00         [24] 7216 	lcall	__gptrget
      002860 FF               [12] 7217 	mov	r7,a
      002861 E5*00            [12] 7218 	mov	a,_bp
      002863 24 15            [12] 7219 	add	a,#0x15
      002865 F8               [12] 7220 	mov	r0,a
      002866 E6               [12] 7221 	mov	a,@r0
      002867 C0 E0            [24] 7222 	push	acc
      002869 08               [12] 7223 	inc	r0
      00286A E6               [12] 7224 	mov	a,@r0
      00286B C0 E0            [24] 7225 	push	acc
      00286D 08               [12] 7226 	inc	r0
      00286E E6               [12] 7227 	mov	a,@r0
      00286F C0 E0            [24] 7228 	push	acc
      002871 08               [12] 7229 	inc	r0
      002872 E6               [12] 7230 	mov	a,@r0
      002873 C0 E0            [24] 7231 	push	acc
      002875 8D 82            [24] 7232 	mov	dpl,r5
      002877 8E 83            [24] 7233 	mov	dph,r6
      002879 8F F0            [24] 7234 	mov	b,r7
      00287B 12r00r00         [24] 7235 	lcall	_stack_push
      00287E E5 81            [12] 7236 	mov	a,sp
      002880 24 FC            [12] 7237 	add	a,#0xfc
      002882 F5 81            [12] 7238 	mov	sp,a
                                   7239 ;	calc.c:319: printstr("\r\nstack underflow\r\n");
      002884 7Dr4E            [12] 7240 	mov	r5,#___str_10
      002886 7Cs00            [12] 7241 	mov	r4,#(___str_10 >> 8)
      002888 7B 80            [12] 7242 	mov	r3,#0x80
                                   7243 ;	calc.c:51: return;
      00288A                       7244 00489$:
                                   7245 ;	calc.c:49: for (; *s; s++) putchar(*s);
      00288A 8D 82            [24] 7246 	mov	dpl,r5
      00288C 8C 83            [24] 7247 	mov	dph,r4
      00288E 8B F0            [24] 7248 	mov	b,r3
      002890 12r00r00         [24] 7249 	lcall	__gptrget
      002893 FF               [12] 7250 	mov	r7,a
      002894 70 03            [24] 7251 	jnz	01395$
      002896 02r2Br95         [24] 7252 	ljmp	00249$
      002899                       7253 01395$:
      002899 7E 00            [12] 7254 	mov	r6,#0x00
      00289B 8F 82            [24] 7255 	mov	dpl,r7
      00289D 8E 83            [24] 7256 	mov	dph,r6
      00289F 12r00r00         [24] 7257 	lcall	_putchar
      0028A2 0D               [12] 7258 	inc	r5
                                   7259 ;	calc.c:319: printstr("\r\nstack underflow\r\n");
      0028A3 BD 00 E4         [24] 7260 	cjne	r5,#0x00,00489$
      0028A6 0C               [12] 7261 	inc	r4
      0028A7 80 E1            [24] 7262 	sjmp	00489$
      0028A9                       7263 00232$:
                                   7264 ;	calc.c:321: d1 >>= d0;
      0028A9 E5*00            [12] 7265 	mov	a,_bp
      0028AB 24 15            [12] 7266 	add	a,#0x15
      0028AD F8               [12] 7267 	mov	r0,a
      0028AE 86 F0            [24] 7268 	mov	b,@r0
      0028B0 05 F0            [12] 7269 	inc	b
      0028B2 E5*00            [12] 7270 	mov	a,_bp
      0028B4 24 19            [12] 7271 	add	a,#0x19
      0028B6 F8               [12] 7272 	mov	r0,a
      0028B7 08               [12] 7273 	inc	r0
      0028B8 08               [12] 7274 	inc	r0
      0028B9 08               [12] 7275 	inc	r0
      0028BA E6               [12] 7276 	mov	a,@r0
      0028BB 33               [12] 7277 	rlc	a
      0028BC 92 D2            [24] 7278 	mov	ov,c
      0028BE 18               [12] 7279 	dec	r0
      0028BF 18               [12] 7280 	dec	r0
      0028C0 18               [12] 7281 	dec	r0
      0028C1 80 14            [24] 7282 	sjmp	01398$
      0028C3                       7283 01397$:
      0028C3 A2 D2            [12] 7284 	mov	c,ov
      0028C5 08               [12] 7285 	inc	r0
      0028C6 08               [12] 7286 	inc	r0
      0028C7 08               [12] 7287 	inc	r0
      0028C8 E6               [12] 7288 	mov	a,@r0
      0028C9 13               [12] 7289 	rrc	a
      0028CA F6               [12] 7290 	mov	@r0,a
      0028CB 18               [12] 7291 	dec	r0
      0028CC E6               [12] 7292 	mov	a,@r0
      0028CD 13               [12] 7293 	rrc	a
      0028CE F6               [12] 7294 	mov	@r0,a
      0028CF 18               [12] 7295 	dec	r0
      0028D0 E6               [12] 7296 	mov	a,@r0
      0028D1 13               [12] 7297 	rrc	a
      0028D2 F6               [12] 7298 	mov	@r0,a
      0028D3 18               [12] 7299 	dec	r0
      0028D4 E6               [12] 7300 	mov	a,@r0
      0028D5 13               [12] 7301 	rrc	a
      0028D6 F6               [12] 7302 	mov	@r0,a
      0028D7                       7303 01398$:
      0028D7 D5 F0 E9         [24] 7304 	djnz	b,01397$
                                   7305 ;	calc.c:322: (void)stack_push(ctx->ps, d1);
      0028DA 8A 82            [24] 7306 	mov	dpl,r2
      0028DC 8B 83            [24] 7307 	mov	dph,r3
      0028DE 8C F0            [24] 7308 	mov	b,r4
      0028E0 12r00r00         [24] 7309 	lcall	__gptrget
      0028E3 FA               [12] 7310 	mov	r2,a
      0028E4 A3               [24] 7311 	inc	dptr
      0028E5 12r00r00         [24] 7312 	lcall	__gptrget
      0028E8 FB               [12] 7313 	mov	r3,a
      0028E9 A3               [24] 7314 	inc	dptr
      0028EA 12r00r00         [24] 7315 	lcall	__gptrget
      0028ED FC               [12] 7316 	mov	r4,a
      0028EE E5*00            [12] 7317 	mov	a,_bp
      0028F0 24 19            [12] 7318 	add	a,#0x19
      0028F2 F8               [12] 7319 	mov	r0,a
      0028F3 E6               [12] 7320 	mov	a,@r0
      0028F4 C0 E0            [24] 7321 	push	acc
      0028F6 08               [12] 7322 	inc	r0
      0028F7 E6               [12] 7323 	mov	a,@r0
      0028F8 C0 E0            [24] 7324 	push	acc
      0028FA 08               [12] 7325 	inc	r0
      0028FB E6               [12] 7326 	mov	a,@r0
      0028FC C0 E0            [24] 7327 	push	acc
      0028FE 08               [12] 7328 	inc	r0
      0028FF E6               [12] 7329 	mov	a,@r0
      002900 C0 E0            [24] 7330 	push	acc
      002902 8A 82            [24] 7331 	mov	dpl,r2
      002904 8B 83            [24] 7332 	mov	dph,r3
      002906 8C F0            [24] 7333 	mov	b,r4
      002908 12r00r00         [24] 7334 	lcall	_stack_push
      00290B E5 81            [12] 7335 	mov	a,sp
      00290D 24 FC            [12] 7336 	add	a,#0xfc
      00290F F5 81            [12] 7337 	mov	sp,a
                                   7338 ;	calc.c:324: break;
      002911 02r2Br95         [24] 7339 	ljmp	00249$
                                   7340 ;	calc.c:325: case '<':
      002914                       7341 00237$:
                                   7342 ;	calc.c:326: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      002914 E5*00            [12] 7343 	mov	a,_bp
      002916 24 15            [12] 7344 	add	a,#0x15
      002918 FF               [12] 7345 	mov	r7,a
      002919 E5*00            [12] 7346 	mov	a,_bp
      00291B 24 0E            [12] 7347 	add	a,#0x0e
      00291D F8               [12] 7348 	mov	r0,a
      00291E A6 07            [24] 7349 	mov	@r0,ar7
      002920 08               [12] 7350 	inc	r0
      002921 76 00            [12] 7351 	mov	@r0,#0x00
      002923 08               [12] 7352 	inc	r0
      002924 76 40            [12] 7353 	mov	@r0,#0x40
      002926 E5*00            [12] 7354 	mov	a,_bp
      002928 24 12            [12] 7355 	add	a,#0x12
      00292A F8               [12] 7356 	mov	r0,a
      00292B 74 11            [12] 7357 	mov	a,#0x11
      00292D 26               [12] 7358 	add	a,@r0
      00292E FA               [12] 7359 	mov	r2,a
      00292F 74 40            [12] 7360 	mov	a,#0x40
      002931 08               [12] 7361 	inc	r0
      002932 36               [12] 7362 	addc	a,@r0
      002933 FB               [12] 7363 	mov	r3,a
      002934 08               [12] 7364 	inc	r0
      002935 86 04            [24] 7365 	mov	ar4,@r0
      002937 8A 82            [24] 7366 	mov	dpl,r2
      002939 8B 83            [24] 7367 	mov	dph,r3
      00293B 8C F0            [24] 7368 	mov	b,r4
      00293D 12r00r00         [24] 7369 	lcall	__gptrget
      002940 FD               [12] 7370 	mov	r5,a
      002941 A3               [24] 7371 	inc	dptr
      002942 12r00r00         [24] 7372 	lcall	__gptrget
      002945 FE               [12] 7373 	mov	r6,a
      002946 A3               [24] 7374 	inc	dptr
      002947 12r00r00         [24] 7375 	lcall	__gptrget
      00294A FF               [12] 7376 	mov	r7,a
      00294B C0 04            [24] 7377 	push	ar4
      00294D C0 03            [24] 7378 	push	ar3
      00294F C0 02            [24] 7379 	push	ar2
      002951 E5*00            [12] 7380 	mov	a,_bp
      002953 24 0E            [12] 7381 	add	a,#0x0e
      002955 F8               [12] 7382 	mov	r0,a
      002956 E6               [12] 7383 	mov	a,@r0
      002957 C0 E0            [24] 7384 	push	acc
      002959 08               [12] 7385 	inc	r0
      00295A E6               [12] 7386 	mov	a,@r0
      00295B C0 E0            [24] 7387 	push	acc
      00295D 08               [12] 7388 	inc	r0
      00295E E6               [12] 7389 	mov	a,@r0
      00295F C0 E0            [24] 7390 	push	acc
      002961 8D 82            [24] 7391 	mov	dpl,r5
      002963 8E 83            [24] 7392 	mov	dph,r6
      002965 8F F0            [24] 7393 	mov	b,r7
      002967 12r00r00         [24] 7394 	lcall	_stack_pop
      00296A AE 82            [24] 7395 	mov	r6,dpl
      00296C AF 83            [24] 7396 	mov	r7,dph
      00296E 15 81            [12] 7397 	dec	sp
      002970 15 81            [12] 7398 	dec	sp
      002972 15 81            [12] 7399 	dec	sp
      002974 D0 02            [24] 7400 	pop	ar2
      002976 D0 03            [24] 7401 	pop	ar3
      002978 D0 04            [24] 7402 	pop	ar4
      00297A EE               [12] 7403 	mov	a,r6
      00297B 4F               [12] 7404 	orl	a,r7
      00297C 70 25            [24] 7405 	jnz	00242$
      00297E 7Dr4E            [12] 7406 	mov	r5,#___str_10
      002980 7Cs00            [12] 7407 	mov	r4,#(___str_10 >> 8)
      002982 7B 80            [12] 7408 	mov	r3,#0x80
                                   7409 ;	calc.c:51: return;
      002984                       7410 00492$:
                                   7411 ;	calc.c:49: for (; *s; s++) putchar(*s);
      002984 8D 82            [24] 7412 	mov	dpl,r5
      002986 8C 83            [24] 7413 	mov	dph,r4
      002988 8B F0            [24] 7414 	mov	b,r3
      00298A 12r00r00         [24] 7415 	lcall	__gptrget
      00298D FF               [12] 7416 	mov	r7,a
      00298E 70 03            [24] 7417 	jnz	01400$
      002990 02r2Br95         [24] 7418 	ljmp	00249$
      002993                       7419 01400$:
      002993 7E 00            [12] 7420 	mov	r6,#0x00
      002995 8F 82            [24] 7421 	mov	dpl,r7
      002997 8E 83            [24] 7422 	mov	dph,r6
      002999 12r00r00         [24] 7423 	lcall	_putchar
      00299C 0D               [12] 7424 	inc	r5
                                   7425 ;	calc.c:326: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      00299D BD 00 E4         [24] 7426 	cjne	r5,#0x00,00492$
      0029A0 0C               [12] 7427 	inc	r4
      0029A1 80 E1            [24] 7428 	sjmp	00492$
      0029A3                       7429 00242$:
                                   7430 ;	calc.c:327: else if (!stack_pop(ctx->ps, &d1)) {
      0029A3 E5*00            [12] 7431 	mov	a,_bp
      0029A5 24 19            [12] 7432 	add	a,#0x19
      0029A7 FF               [12] 7433 	mov	r7,a
      0029A8 E5*00            [12] 7434 	mov	a,_bp
      0029AA 24 0E            [12] 7435 	add	a,#0x0e
      0029AC F8               [12] 7436 	mov	r0,a
      0029AD A6 07            [24] 7437 	mov	@r0,ar7
      0029AF 08               [12] 7438 	inc	r0
      0029B0 76 00            [12] 7439 	mov	@r0,#0x00
      0029B2 08               [12] 7440 	inc	r0
      0029B3 76 40            [12] 7441 	mov	@r0,#0x40
      0029B5 8A 82            [24] 7442 	mov	dpl,r2
      0029B7 8B 83            [24] 7443 	mov	dph,r3
      0029B9 8C F0            [24] 7444 	mov	b,r4
      0029BB 12r00r00         [24] 7445 	lcall	__gptrget
      0029BE FD               [12] 7446 	mov	r5,a
      0029BF A3               [24] 7447 	inc	dptr
      0029C0 12r00r00         [24] 7448 	lcall	__gptrget
      0029C3 FE               [12] 7449 	mov	r6,a
      0029C4 A3               [24] 7450 	inc	dptr
      0029C5 12r00r00         [24] 7451 	lcall	__gptrget
      0029C8 FF               [12] 7452 	mov	r7,a
      0029C9 C0 04            [24] 7453 	push	ar4
      0029CB C0 03            [24] 7454 	push	ar3
      0029CD C0 02            [24] 7455 	push	ar2
      0029CF E5*00            [12] 7456 	mov	a,_bp
      0029D1 24 0E            [12] 7457 	add	a,#0x0e
      0029D3 F8               [12] 7458 	mov	r0,a
      0029D4 E6               [12] 7459 	mov	a,@r0
      0029D5 C0 E0            [24] 7460 	push	acc
      0029D7 08               [12] 7461 	inc	r0
      0029D8 E6               [12] 7462 	mov	a,@r0
      0029D9 C0 E0            [24] 7463 	push	acc
      0029DB 08               [12] 7464 	inc	r0
      0029DC E6               [12] 7465 	mov	a,@r0
      0029DD C0 E0            [24] 7466 	push	acc
      0029DF 8D 82            [24] 7467 	mov	dpl,r5
      0029E1 8E 83            [24] 7468 	mov	dph,r6
      0029E3 8F F0            [24] 7469 	mov	b,r7
      0029E5 12r00r00         [24] 7470 	lcall	_stack_pop
      0029E8 AE 82            [24] 7471 	mov	r6,dpl
      0029EA AF 83            [24] 7472 	mov	r7,dph
      0029EC 15 81            [12] 7473 	dec	sp
      0029EE 15 81            [12] 7474 	dec	sp
      0029F0 15 81            [12] 7475 	dec	sp
      0029F2 D0 02            [24] 7476 	pop	ar2
      0029F4 D0 03            [24] 7477 	pop	ar3
      0029F6 D0 04            [24] 7478 	pop	ar4
      0029F8 EE               [12] 7479 	mov	a,r6
      0029F9 4F               [12] 7480 	orl	a,r7
      0029FA 70 5C            [24] 7481 	jnz	00239$
                                   7482 ;	calc.c:328: (void)stack_push(ctx->ps, d0);
      0029FC 8A 82            [24] 7483 	mov	dpl,r2
      0029FE 8B 83            [24] 7484 	mov	dph,r3
      002A00 8C F0            [24] 7485 	mov	b,r4
      002A02 12r00r00         [24] 7486 	lcall	__gptrget
      002A05 FD               [12] 7487 	mov	r5,a
      002A06 A3               [24] 7488 	inc	dptr
      002A07 12r00r00         [24] 7489 	lcall	__gptrget
      002A0A FE               [12] 7490 	mov	r6,a
      002A0B A3               [24] 7491 	inc	dptr
      002A0C 12r00r00         [24] 7492 	lcall	__gptrget
      002A0F FF               [12] 7493 	mov	r7,a
      002A10 E5*00            [12] 7494 	mov	a,_bp
      002A12 24 15            [12] 7495 	add	a,#0x15
      002A14 F8               [12] 7496 	mov	r0,a
      002A15 E6               [12] 7497 	mov	a,@r0
      002A16 C0 E0            [24] 7498 	push	acc
      002A18 08               [12] 7499 	inc	r0
      002A19 E6               [12] 7500 	mov	a,@r0
      002A1A C0 E0            [24] 7501 	push	acc
      002A1C 08               [12] 7502 	inc	r0
      002A1D E6               [12] 7503 	mov	a,@r0
      002A1E C0 E0            [24] 7504 	push	acc
      002A20 08               [12] 7505 	inc	r0
      002A21 E6               [12] 7506 	mov	a,@r0
      002A22 C0 E0            [24] 7507 	push	acc
      002A24 8D 82            [24] 7508 	mov	dpl,r5
      002A26 8E 83            [24] 7509 	mov	dph,r6
      002A28 8F F0            [24] 7510 	mov	b,r7
      002A2A 12r00r00         [24] 7511 	lcall	_stack_push
      002A2D E5 81            [12] 7512 	mov	a,sp
      002A2F 24 FC            [12] 7513 	add	a,#0xfc
      002A31 F5 81            [12] 7514 	mov	sp,a
                                   7515 ;	calc.c:329: printstr("\r\nstack underflow\r\n");
      002A33 7Dr4E            [12] 7516 	mov	r5,#___str_10
      002A35 7Cs00            [12] 7517 	mov	r4,#(___str_10 >> 8)
      002A37 7B 80            [12] 7518 	mov	r3,#0x80
                                   7519 ;	calc.c:51: return;
      002A39                       7520 00495$:
                                   7521 ;	calc.c:49: for (; *s; s++) putchar(*s);
      002A39 8D 82            [24] 7522 	mov	dpl,r5
      002A3B 8C 83            [24] 7523 	mov	dph,r4
      002A3D 8B F0            [24] 7524 	mov	b,r3
      002A3F 12r00r00         [24] 7525 	lcall	__gptrget
      002A42 FF               [12] 7526 	mov	r7,a
      002A43 70 03            [24] 7527 	jnz	01403$
      002A45 02r2Br95         [24] 7528 	ljmp	00249$
      002A48                       7529 01403$:
      002A48 7E 00            [12] 7530 	mov	r6,#0x00
      002A4A 8F 82            [24] 7531 	mov	dpl,r7
      002A4C 8E 83            [24] 7532 	mov	dph,r6
      002A4E 12r00r00         [24] 7533 	lcall	_putchar
      002A51 0D               [12] 7534 	inc	r5
                                   7535 ;	calc.c:329: printstr("\r\nstack underflow\r\n");
      002A52 BD 00 E4         [24] 7536 	cjne	r5,#0x00,00495$
      002A55 0C               [12] 7537 	inc	r4
      002A56 80 E1            [24] 7538 	sjmp	00495$
      002A58                       7539 00239$:
                                   7540 ;	calc.c:331: d1 <<= d0;
      002A58 E5*00            [12] 7541 	mov	a,_bp
      002A5A 24 15            [12] 7542 	add	a,#0x15
      002A5C F8               [12] 7543 	mov	r0,a
      002A5D 86 F0            [24] 7544 	mov	b,@r0
      002A5F 05 F0            [12] 7545 	inc	b
      002A61 E5*00            [12] 7546 	mov	a,_bp
      002A63 24 19            [12] 7547 	add	a,#0x19
      002A65 F8               [12] 7548 	mov	r0,a
      002A66 80 12            [24] 7549 	sjmp	01406$
      002A68                       7550 01405$:
      002A68 E6               [12] 7551 	mov	a,@r0
      002A69 26               [12] 7552 	add	a,@r0
      002A6A F6               [12] 7553 	mov	@r0,a
      002A6B 08               [12] 7554 	inc	r0
      002A6C E6               [12] 7555 	mov	a,@r0
      002A6D 33               [12] 7556 	rlc	a
      002A6E F6               [12] 7557 	mov	@r0,a
      002A6F 08               [12] 7558 	inc	r0
      002A70 E6               [12] 7559 	mov	a,@r0
      002A71 33               [12] 7560 	rlc	a
      002A72 F6               [12] 7561 	mov	@r0,a
      002A73 08               [12] 7562 	inc	r0
      002A74 E6               [12] 7563 	mov	a,@r0
      002A75 33               [12] 7564 	rlc	a
      002A76 F6               [12] 7565 	mov	@r0,a
      002A77 18               [12] 7566 	dec	r0
      002A78 18               [12] 7567 	dec	r0
      002A79 18               [12] 7568 	dec	r0
      002A7A                       7569 01406$:
      002A7A D5 F0 EB         [24] 7570 	djnz	b,01405$
                                   7571 ;	calc.c:332: (void)stack_push(ctx->ps, d1);
      002A7D 8A 82            [24] 7572 	mov	dpl,r2
      002A7F 8B 83            [24] 7573 	mov	dph,r3
      002A81 8C F0            [24] 7574 	mov	b,r4
      002A83 12r00r00         [24] 7575 	lcall	__gptrget
      002A86 FA               [12] 7576 	mov	r2,a
      002A87 A3               [24] 7577 	inc	dptr
      002A88 12r00r00         [24] 7578 	lcall	__gptrget
      002A8B FB               [12] 7579 	mov	r3,a
      002A8C A3               [24] 7580 	inc	dptr
      002A8D 12r00r00         [24] 7581 	lcall	__gptrget
      002A90 FC               [12] 7582 	mov	r4,a
      002A91 E5*00            [12] 7583 	mov	a,_bp
      002A93 24 19            [12] 7584 	add	a,#0x19
      002A95 F8               [12] 7585 	mov	r0,a
      002A96 E6               [12] 7586 	mov	a,@r0
      002A97 C0 E0            [24] 7587 	push	acc
      002A99 08               [12] 7588 	inc	r0
      002A9A E6               [12] 7589 	mov	a,@r0
      002A9B C0 E0            [24] 7590 	push	acc
      002A9D 08               [12] 7591 	inc	r0
      002A9E E6               [12] 7592 	mov	a,@r0
      002A9F C0 E0            [24] 7593 	push	acc
      002AA1 08               [12] 7594 	inc	r0
      002AA2 E6               [12] 7595 	mov	a,@r0
      002AA3 C0 E0            [24] 7596 	push	acc
      002AA5 8A 82            [24] 7597 	mov	dpl,r2
      002AA7 8B 83            [24] 7598 	mov	dph,r3
      002AA9 8C F0            [24] 7599 	mov	b,r4
      002AAB 12r00r00         [24] 7600 	lcall	_stack_push
      002AAE E5 81            [12] 7601 	mov	a,sp
      002AB0 24 FC            [12] 7602 	add	a,#0xfc
      002AB2 F5 81            [12] 7603 	mov	sp,a
                                   7604 ;	calc.c:334: break;
      002AB4 02r2Br95         [24] 7605 	ljmp	00249$
                                   7606 ;	calc.c:335: case '~':
      002AB7                       7607 00244$:
                                   7608 ;	calc.c:336: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      002AB7 E5*00            [12] 7609 	mov	a,_bp
      002AB9 24 15            [12] 7610 	add	a,#0x15
      002ABB FF               [12] 7611 	mov	r7,a
      002ABC E5*00            [12] 7612 	mov	a,_bp
      002ABE 24 0E            [12] 7613 	add	a,#0x0e
      002AC0 F8               [12] 7614 	mov	r0,a
      002AC1 A6 07            [24] 7615 	mov	@r0,ar7
      002AC3 08               [12] 7616 	inc	r0
      002AC4 76 00            [12] 7617 	mov	@r0,#0x00
      002AC6 08               [12] 7618 	inc	r0
      002AC7 76 40            [12] 7619 	mov	@r0,#0x40
      002AC9 E5*00            [12] 7620 	mov	a,_bp
      002ACB 24 12            [12] 7621 	add	a,#0x12
      002ACD F8               [12] 7622 	mov	r0,a
      002ACE 74 11            [12] 7623 	mov	a,#0x11
      002AD0 26               [12] 7624 	add	a,@r0
      002AD1 FA               [12] 7625 	mov	r2,a
      002AD2 74 40            [12] 7626 	mov	a,#0x40
      002AD4 08               [12] 7627 	inc	r0
      002AD5 36               [12] 7628 	addc	a,@r0
      002AD6 FB               [12] 7629 	mov	r3,a
      002AD7 08               [12] 7630 	inc	r0
      002AD8 86 04            [24] 7631 	mov	ar4,@r0
      002ADA 8A 82            [24] 7632 	mov	dpl,r2
      002ADC 8B 83            [24] 7633 	mov	dph,r3
      002ADE 8C F0            [24] 7634 	mov	b,r4
      002AE0 12r00r00         [24] 7635 	lcall	__gptrget
      002AE3 FD               [12] 7636 	mov	r5,a
      002AE4 A3               [24] 7637 	inc	dptr
      002AE5 12r00r00         [24] 7638 	lcall	__gptrget
      002AE8 FE               [12] 7639 	mov	r6,a
      002AE9 A3               [24] 7640 	inc	dptr
      002AEA 12r00r00         [24] 7641 	lcall	__gptrget
      002AED FF               [12] 7642 	mov	r7,a
      002AEE C0 04            [24] 7643 	push	ar4
      002AF0 C0 03            [24] 7644 	push	ar3
      002AF2 C0 02            [24] 7645 	push	ar2
      002AF4 E5*00            [12] 7646 	mov	a,_bp
      002AF6 24 0E            [12] 7647 	add	a,#0x0e
      002AF8 F8               [12] 7648 	mov	r0,a
      002AF9 E6               [12] 7649 	mov	a,@r0
      002AFA C0 E0            [24] 7650 	push	acc
      002AFC 08               [12] 7651 	inc	r0
      002AFD E6               [12] 7652 	mov	a,@r0
      002AFE C0 E0            [24] 7653 	push	acc
      002B00 08               [12] 7654 	inc	r0
      002B01 E6               [12] 7655 	mov	a,@r0
      002B02 C0 E0            [24] 7656 	push	acc
      002B04 8D 82            [24] 7657 	mov	dpl,r5
      002B06 8E 83            [24] 7658 	mov	dph,r6
      002B08 8F F0            [24] 7659 	mov	b,r7
      002B0A 12r00r00         [24] 7660 	lcall	_stack_pop
      002B0D AE 82            [24] 7661 	mov	r6,dpl
      002B0F AF 83            [24] 7662 	mov	r7,dph
      002B11 15 81            [12] 7663 	dec	sp
      002B13 15 81            [12] 7664 	dec	sp
      002B15 15 81            [12] 7665 	dec	sp
      002B17 D0 02            [24] 7666 	pop	ar2
      002B19 D0 03            [24] 7667 	pop	ar3
      002B1B D0 04            [24] 7668 	pop	ar4
      002B1D EE               [12] 7669 	mov	a,r6
      002B1E 4F               [12] 7670 	orl	a,r7
      002B1F 70 22            [24] 7671 	jnz	00246$
      002B21 7Dr4E            [12] 7672 	mov	r5,#___str_10
      002B23 7Cs00            [12] 7673 	mov	r4,#(___str_10 >> 8)
      002B25 7B 80            [12] 7674 	mov	r3,#0x80
                                   7675 ;	calc.c:51: return;
      002B27                       7676 00498$:
                                   7677 ;	calc.c:49: for (; *s; s++) putchar(*s);
      002B27 8D 82            [24] 7678 	mov	dpl,r5
      002B29 8C 83            [24] 7679 	mov	dph,r4
      002B2B 8B F0            [24] 7680 	mov	b,r3
      002B2D 12r00r00         [24] 7681 	lcall	__gptrget
      002B30 FF               [12] 7682 	mov	r7,a
      002B31 60 62            [24] 7683 	jz	00249$
      002B33 7E 00            [12] 7684 	mov	r6,#0x00
      002B35 8F 82            [24] 7685 	mov	dpl,r7
      002B37 8E 83            [24] 7686 	mov	dph,r6
      002B39 12r00r00         [24] 7687 	lcall	_putchar
      002B3C 0D               [12] 7688 	inc	r5
                                   7689 ;	calc.c:336: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      002B3D BD 00 E7         [24] 7690 	cjne	r5,#0x00,00498$
      002B40 0C               [12] 7691 	inc	r4
      002B41 80 E4            [24] 7692 	sjmp	00498$
      002B43                       7693 00246$:
                                   7694 ;	calc.c:338: d0 = ~d0;
      002B43 E5*00            [12] 7695 	mov	a,_bp
      002B45 24 15            [12] 7696 	add	a,#0x15
      002B47 F8               [12] 7697 	mov	r0,a
      002B48 E6               [12] 7698 	mov	a,@r0
      002B49 F4               [12] 7699 	cpl	a
      002B4A F6               [12] 7700 	mov	@r0,a
      002B4B 08               [12] 7701 	inc	r0
      002B4C E6               [12] 7702 	mov	a,@r0
      002B4D F4               [12] 7703 	cpl	a
      002B4E F6               [12] 7704 	mov	@r0,a
      002B4F 08               [12] 7705 	inc	r0
      002B50 E6               [12] 7706 	mov	a,@r0
      002B51 F4               [12] 7707 	cpl	a
      002B52 F6               [12] 7708 	mov	@r0,a
      002B53 08               [12] 7709 	inc	r0
      002B54 E6               [12] 7710 	mov	a,@r0
      002B55 F4               [12] 7711 	cpl	a
      002B56 F6               [12] 7712 	mov	@r0,a
                                   7713 ;	calc.c:339: (void)stack_push(ctx->ps, d0);
      002B57 8A 82            [24] 7714 	mov	dpl,r2
      002B59 8B 83            [24] 7715 	mov	dph,r3
      002B5B 8C F0            [24] 7716 	mov	b,r4
      002B5D 12r00r00         [24] 7717 	lcall	__gptrget
      002B60 FA               [12] 7718 	mov	r2,a
      002B61 A3               [24] 7719 	inc	dptr
      002B62 12r00r00         [24] 7720 	lcall	__gptrget
      002B65 FB               [12] 7721 	mov	r3,a
      002B66 A3               [24] 7722 	inc	dptr
      002B67 12r00r00         [24] 7723 	lcall	__gptrget
      002B6A FC               [12] 7724 	mov	r4,a
      002B6B E5*00            [12] 7725 	mov	a,_bp
      002B6D 24 15            [12] 7726 	add	a,#0x15
      002B6F F8               [12] 7727 	mov	r0,a
      002B70 E6               [12] 7728 	mov	a,@r0
      002B71 C0 E0            [24] 7729 	push	acc
      002B73 08               [12] 7730 	inc	r0
      002B74 E6               [12] 7731 	mov	a,@r0
      002B75 C0 E0            [24] 7732 	push	acc
      002B77 08               [12] 7733 	inc	r0
      002B78 E6               [12] 7734 	mov	a,@r0
      002B79 C0 E0            [24] 7735 	push	acc
      002B7B 08               [12] 7736 	inc	r0
      002B7C E6               [12] 7737 	mov	a,@r0
      002B7D C0 E0            [24] 7738 	push	acc
      002B7F 8A 82            [24] 7739 	mov	dpl,r2
      002B81 8B 83            [24] 7740 	mov	dph,r3
      002B83 8C F0            [24] 7741 	mov	b,r4
      002B85 12r00r00         [24] 7742 	lcall	_stack_push
      002B88 E5 81            [12] 7743 	mov	a,sp
      002B8A 24 FC            [12] 7744 	add	a,#0xfc
      002B8C F5 81            [12] 7745 	mov	sp,a
                                   7746 ;	calc.c:341: break;
                                   7747 ;	calc.c:342: default:
      002B8E 80 05            [24] 7748 	sjmp	00249$
      002B90                       7749 00248$:
                                   7750 ;	calc.c:343: return UNDEF;
      002B90 90 80 00         [24] 7751 	mov	dptr,#0x8000
                                   7752 ;	calc.c:344: }
      002B93 80 03            [24] 7753 	sjmp	00500$
      002B95                       7754 00249$:
                                   7755 ;	calc.c:346: return 1;
      002B95 90 00 01         [24] 7756 	mov	dptr,#0x0001
      002B98                       7757 00500$:
                                   7758 ;	calc.c:347: }
      002B98 85*00 81         [24] 7759 	mov	sp,_bp
      002B9B D0*00            [24] 7760 	pop	_bp
      002B9D 22               [24] 7761 	ret
                                   7762 ;------------------------------------------------------------
                                   7763 ;Allocation info for local variables in function 'push_acc'
                                   7764 ;------------------------------------------------------------
                                   7765 ;delta                     Allocated to stack - _bp -5
                                   7766 ;_ctx                      Allocated to stack - _bp +5
                                   7767 ;ctx                       Allocated to registers r2 r3 r4 
                                   7768 ;__1310720127              Allocated to registers 
                                   7769 ;s                         Allocated to registers r5 r6 r7 
                                   7770 ;sloc0                     Allocated to stack - _bp +1
                                   7771 ;------------------------------------------------------------
                                   7772 ;	calc.c:349: static int push_acc(void *_ctx, delta_t *delta) __reentrant {
                                   7773 ;	-----------------------------------------
                                   7774 ;	 function push_acc
                                   7775 ;	-----------------------------------------
      002B9E                       7776 _push_acc:
      002B9E C0*00            [24] 7777 	push	_bp
      002BA0 E5 81            [12] 7778 	mov	a,sp
      002BA2 F5*00            [12] 7779 	mov	_bp,a
      002BA4 24 07            [12] 7780 	add	a,#0x07
      002BA6 F5 81            [12] 7781 	mov	sp,a
      002BA8 C8               [12] 7782 	xch	a,r0
      002BA9 E5*00            [12] 7783 	mov	a,_bp
      002BAB 24 05            [12] 7784 	add	a,#0x05
      002BAD C8               [12] 7785 	xch	a,r0
      002BAE A6 82            [24] 7786 	mov	@r0,dpl
      002BB0 08               [12] 7787 	inc	r0
      002BB1 A6 83            [24] 7788 	mov	@r0,dph
      002BB3 08               [12] 7789 	inc	r0
      002BB4 A6 F0            [24] 7790 	mov	@r0,b
                                   7791 ;	calc.c:350: calc_ctx_t *ctx = (calc_ctx_t *)_ctx;
      002BB6 E5*00            [12] 7792 	mov	a,_bp
      002BB8 24 05            [12] 7793 	add	a,#0x05
      002BBA F8               [12] 7794 	mov	r0,a
      002BBB 86 02            [24] 7795 	mov	ar2,@r0
      002BBD 08               [12] 7796 	inc	r0
      002BBE 86 03            [24] 7797 	mov	ar3,@r0
      002BC0 08               [12] 7798 	inc	r0
      002BC1 86 04            [24] 7799 	mov	ar4,@r0
                                   7800 ;	calc.c:354: ctx->acc_valid = 0;
      002BC3 74 06            [12] 7801 	mov	a,#0x06
      002BC5 2A               [12] 7802 	add	a,r2
      002BC6 FD               [12] 7803 	mov	r5,a
      002BC7 E4               [12] 7804 	clr	a
      002BC8 3B               [12] 7805 	addc	a,r3
      002BC9 FE               [12] 7806 	mov	r6,a
      002BCA 8C 07            [24] 7807 	mov	ar7,r4
      002BCC 8D 82            [24] 7808 	mov	dpl,r5
      002BCE 8E 83            [24] 7809 	mov	dph,r6
      002BD0 8F F0            [24] 7810 	mov	b,r7
      002BD2 E4               [12] 7811 	clr	a
      002BD3 12r00r00         [24] 7812 	lcall	__gptrput
                                   7813 ;	calc.c:355: if (!stack_push(ctx->ps, ctx->acc)) printstr("\r\nstack overflow\r\n");
      002BD6 74 02            [12] 7814 	mov	a,#0x02
      002BD8 2A               [12] 7815 	add	a,r2
      002BD9 FF               [12] 7816 	mov	r7,a
      002BDA E4               [12] 7817 	clr	a
      002BDB 3B               [12] 7818 	addc	a,r3
      002BDC FD               [12] 7819 	mov	r5,a
      002BDD 8C 06            [24] 7820 	mov	ar6,r4
      002BDF 8F 82            [24] 7821 	mov	dpl,r7
      002BE1 8D 83            [24] 7822 	mov	dph,r5
      002BE3 8E F0            [24] 7823 	mov	b,r6
      002BE5 A8*00            [24] 7824 	mov	r0,_bp
      002BE7 08               [12] 7825 	inc	r0
      002BE8 12r00r00         [24] 7826 	lcall	__gptrget
      002BEB F6               [12] 7827 	mov	@r0,a
      002BEC A3               [24] 7828 	inc	dptr
      002BED 12r00r00         [24] 7829 	lcall	__gptrget
      002BF0 08               [12] 7830 	inc	r0
      002BF1 F6               [12] 7831 	mov	@r0,a
      002BF2 A3               [24] 7832 	inc	dptr
      002BF3 12r00r00         [24] 7833 	lcall	__gptrget
      002BF6 08               [12] 7834 	inc	r0
      002BF7 F6               [12] 7835 	mov	@r0,a
      002BF8 A3               [24] 7836 	inc	dptr
      002BF9 12r00r00         [24] 7837 	lcall	__gptrget
      002BFC 08               [12] 7838 	inc	r0
      002BFD F6               [12] 7839 	mov	@r0,a
      002BFE 74 11            [12] 7840 	mov	a,#0x11
      002C00 2A               [12] 7841 	add	a,r2
      002C01 FA               [12] 7842 	mov	r2,a
      002C02 74 40            [12] 7843 	mov	a,#0x40
      002C04 3B               [12] 7844 	addc	a,r3
      002C05 FB               [12] 7845 	mov	r3,a
      002C06 8C 07            [24] 7846 	mov	ar7,r4
      002C08 8A 82            [24] 7847 	mov	dpl,r2
      002C0A 8B 83            [24] 7848 	mov	dph,r3
      002C0C 8F F0            [24] 7849 	mov	b,r7
      002C0E 12r00r00         [24] 7850 	lcall	__gptrget
      002C11 FA               [12] 7851 	mov	r2,a
      002C12 A3               [24] 7852 	inc	dptr
      002C13 12r00r00         [24] 7853 	lcall	__gptrget
      002C16 FB               [12] 7854 	mov	r3,a
      002C17 A3               [24] 7855 	inc	dptr
      002C18 12r00r00         [24] 7856 	lcall	__gptrget
      002C1B FF               [12] 7857 	mov	r7,a
      002C1C A8*00            [24] 7858 	mov	r0,_bp
      002C1E 08               [12] 7859 	inc	r0
      002C1F E6               [12] 7860 	mov	a,@r0
      002C20 C0 E0            [24] 7861 	push	acc
      002C22 08               [12] 7862 	inc	r0
      002C23 E6               [12] 7863 	mov	a,@r0
      002C24 C0 E0            [24] 7864 	push	acc
      002C26 08               [12] 7865 	inc	r0
      002C27 E6               [12] 7866 	mov	a,@r0
      002C28 C0 E0            [24] 7867 	push	acc
      002C2A 08               [12] 7868 	inc	r0
      002C2B E6               [12] 7869 	mov	a,@r0
      002C2C C0 E0            [24] 7870 	push	acc
      002C2E 8A 82            [24] 7871 	mov	dpl,r2
      002C30 8B 83            [24] 7872 	mov	dph,r3
      002C32 8F F0            [24] 7873 	mov	b,r7
      002C34 12r00r00         [24] 7874 	lcall	_stack_push
      002C37 AE 82            [24] 7875 	mov	r6,dpl
      002C39 AF 83            [24] 7876 	mov	r7,dph
      002C3B E5 81            [12] 7877 	mov	a,sp
      002C3D 24 FC            [12] 7878 	add	a,#0xfc
      002C3F F5 81            [12] 7879 	mov	sp,a
      002C41 EE               [12] 7880 	mov	a,r6
      002C42 4F               [12] 7881 	orl	a,r7
      002C43 70 22            [24] 7882 	jnz	00102$
      002C45 7Dr9D            [12] 7883 	mov	r5,#___str_13
      002C47 7Es00            [12] 7884 	mov	r6,#(___str_13 >> 8)
      002C49 7F 80            [12] 7885 	mov	r7,#0x80
                                   7886 ;	calc.c:51: return;
      002C4B                       7887 00109$:
                                   7888 ;	calc.c:49: for (; *s; s++) putchar(*s);
      002C4B 8D 82            [24] 7889 	mov	dpl,r5
      002C4D 8E 83            [24] 7890 	mov	dph,r6
      002C4F 8F F0            [24] 7891 	mov	b,r7
      002C51 12r00r00         [24] 7892 	lcall	__gptrget
      002C54 FC               [12] 7893 	mov	r4,a
      002C55 60 10            [24] 7894 	jz	00102$
      002C57 7B 00            [12] 7895 	mov	r3,#0x00
      002C59 8C 82            [24] 7896 	mov	dpl,r4
      002C5B 8B 83            [24] 7897 	mov	dph,r3
      002C5D 12r00r00         [24] 7898 	lcall	_putchar
      002C60 0D               [12] 7899 	inc	r5
                                   7900 ;	calc.c:355: if (!stack_push(ctx->ps, ctx->acc)) printstr("\r\nstack overflow\r\n");
      002C61 BD 00 E7         [24] 7901 	cjne	r5,#0x00,00109$
      002C64 0E               [12] 7902 	inc	r6
      002C65 80 E4            [24] 7903 	sjmp	00109$
      002C67                       7904 00102$:
                                   7905 ;	calc.c:357: if (delta->event == EVENT_OP) return operator(_ctx, delta);
      002C67 E5*00            [12] 7906 	mov	a,_bp
      002C69 24 FB            [12] 7907 	add	a,#0xfb
      002C6B F8               [12] 7908 	mov	r0,a
      002C6C 86 05            [24] 7909 	mov	ar5,@r0
      002C6E 08               [12] 7910 	inc	r0
      002C6F 86 06            [24] 7911 	mov	ar6,@r0
      002C71 08               [12] 7912 	inc	r0
      002C72 86 07            [24] 7913 	mov	ar7,@r0
      002C74 74 02            [12] 7914 	mov	a,#0x02
      002C76 2D               [12] 7915 	add	a,r5
      002C77 FA               [12] 7916 	mov	r2,a
      002C78 E4               [12] 7917 	clr	a
      002C79 3E               [12] 7918 	addc	a,r6
      002C7A FB               [12] 7919 	mov	r3,a
      002C7B 8F 04            [24] 7920 	mov	ar4,r7
      002C7D 8A 82            [24] 7921 	mov	dpl,r2
      002C7F 8B 83            [24] 7922 	mov	dph,r3
      002C81 8C F0            [24] 7923 	mov	b,r4
      002C83 12r00r00         [24] 7924 	lcall	__gptrget
      002C86 FA               [12] 7925 	mov	r2,a
      002C87 A3               [24] 7926 	inc	dptr
      002C88 12r00r00         [24] 7927 	lcall	__gptrget
      002C8B FB               [12] 7928 	mov	r3,a
      002C8C BA 02 29         [24] 7929 	cjne	r2,#0x02,00104$
      002C8F BB 00 26         [24] 7930 	cjne	r3,#0x00,00104$
      002C92 C0 05            [24] 7931 	push	ar5
      002C94 C0 06            [24] 7932 	push	ar6
      002C96 C0 07            [24] 7933 	push	ar7
      002C98 E5*00            [12] 7934 	mov	a,_bp
      002C9A 24 05            [12] 7935 	add	a,#0x05
      002C9C F8               [12] 7936 	mov	r0,a
      002C9D 86 82            [24] 7937 	mov	dpl,@r0
      002C9F 08               [12] 7938 	inc	r0
      002CA0 86 83            [24] 7939 	mov	dph,@r0
      002CA2 08               [12] 7940 	inc	r0
      002CA3 86 F0            [24] 7941 	mov	b,@r0
      002CA5 12r08rA4         [24] 7942 	lcall	_operator
      002CA8 AE 82            [24] 7943 	mov	r6,dpl
      002CAA AF 83            [24] 7944 	mov	r7,dph
      002CAC 15 81            [12] 7945 	dec	sp
      002CAE 15 81            [12] 7946 	dec	sp
      002CB0 15 81            [12] 7947 	dec	sp
      002CB2 8E 82            [24] 7948 	mov	dpl,r6
      002CB4 8F 83            [24] 7949 	mov	dph,r7
      002CB6 80 03            [24] 7950 	sjmp	00111$
      002CB8                       7951 00104$:
                                   7952 ;	calc.c:358: else return 1;
      002CB8 90 00 01         [24] 7953 	mov	dptr,#0x0001
      002CBB                       7954 00111$:
                                   7955 ;	calc.c:359: }
      002CBB 85*00 81         [24] 7956 	mov	sp,_bp
      002CBE D0*00            [24] 7957 	pop	_bp
      002CC0 22               [24] 7958 	ret
                                   7959 ;------------------------------------------------------------
                                   7960 ;Allocation info for local variables in function 'reset_acc'
                                   7961 ;------------------------------------------------------------
                                   7962 ;delta                     Allocated to stack - _bp -5
                                   7963 ;_ctx                      Allocated to registers r5 r6 r7 
                                   7964 ;ctx                       Allocated to registers r5 r6 r7 
                                   7965 ;------------------------------------------------------------
                                   7966 ;	calc.c:361: static int reset_acc(void *_ctx, delta_t *delta) __reentrant {
                                   7967 ;	-----------------------------------------
                                   7968 ;	 function reset_acc
                                   7969 ;	-----------------------------------------
      002CC1                       7970 _reset_acc:
      002CC1 C0*00            [24] 7971 	push	_bp
      002CC3 85 81*00         [24] 7972 	mov	_bp,sp
      002CC6 AD 82            [24] 7973 	mov	r5,dpl
      002CC8 AE 83            [24] 7974 	mov	r6,dph
      002CCA AF F0            [24] 7975 	mov	r7,b
                                   7976 ;	calc.c:362: calc_ctx_t *ctx = (calc_ctx_t *)_ctx;
                                   7977 ;	calc.c:364: if (delta->event == EVENT_RSTA_I) ctx->acc_valid = 0;
      002CCC E5*00            [12] 7978 	mov	a,_bp
      002CCE 24 FB            [12] 7979 	add	a,#0xfb
      002CD0 F8               [12] 7980 	mov	r0,a
      002CD1 86 02            [24] 7981 	mov	ar2,@r0
      002CD3 08               [12] 7982 	inc	r0
      002CD4 86 03            [24] 7983 	mov	ar3,@r0
      002CD6 08               [12] 7984 	inc	r0
      002CD7 86 04            [24] 7985 	mov	ar4,@r0
      002CD9 74 02            [12] 7986 	mov	a,#0x02
      002CDB 2A               [12] 7987 	add	a,r2
      002CDC FA               [12] 7988 	mov	r2,a
      002CDD E4               [12] 7989 	clr	a
      002CDE 3B               [12] 7990 	addc	a,r3
      002CDF FB               [12] 7991 	mov	r3,a
      002CE0 8A 82            [24] 7992 	mov	dpl,r2
      002CE2 8B 83            [24] 7993 	mov	dph,r3
      002CE4 8C F0            [24] 7994 	mov	b,r4
      002CE6 12r00r00         [24] 7995 	lcall	__gptrget
      002CE9 FA               [12] 7996 	mov	r2,a
      002CEA A3               [24] 7997 	inc	dptr
      002CEB 12r00r00         [24] 7998 	lcall	__gptrget
      002CEE FB               [12] 7999 	mov	r3,a
      002CEF BA 07 16         [24] 8000 	cjne	r2,#0x07,00102$
      002CF2 BB 00 13         [24] 8001 	cjne	r3,#0x00,00102$
      002CF5 74 06            [12] 8002 	mov	a,#0x06
      002CF7 2D               [12] 8003 	add	a,r5
      002CF8 FA               [12] 8004 	mov	r2,a
      002CF9 E4               [12] 8005 	clr	a
      002CFA 3E               [12] 8006 	addc	a,r6
      002CFB FB               [12] 8007 	mov	r3,a
      002CFC 8F 04            [24] 8008 	mov	ar4,r7
      002CFE 8A 82            [24] 8009 	mov	dpl,r2
      002D00 8B 83            [24] 8010 	mov	dph,r3
      002D02 8C F0            [24] 8011 	mov	b,r4
      002D04 E4               [12] 8012 	clr	a
      002D05 12r00r00         [24] 8013 	lcall	__gptrput
      002D08                       8014 00102$:
                                   8015 ;	calc.c:365: ctx->acc = 0l;
      002D08 74 02            [12] 8016 	mov	a,#0x02
      002D0A 2D               [12] 8017 	add	a,r5
      002D0B FD               [12] 8018 	mov	r5,a
      002D0C E4               [12] 8019 	clr	a
      002D0D 3E               [12] 8020 	addc	a,r6
      002D0E FE               [12] 8021 	mov	r6,a
      002D0F 8D 82            [24] 8022 	mov	dpl,r5
      002D11 8E 83            [24] 8023 	mov	dph,r6
      002D13 8F F0            [24] 8024 	mov	b,r7
      002D15 E4               [12] 8025 	clr	a
      002D16 12r00r00         [24] 8026 	lcall	__gptrput
      002D19 A3               [24] 8027 	inc	dptr
      002D1A 12r00r00         [24] 8028 	lcall	__gptrput
      002D1D A3               [24] 8029 	inc	dptr
      002D1E 12r00r00         [24] 8030 	lcall	__gptrput
      002D21 A3               [24] 8031 	inc	dptr
      002D22 12r00r00         [24] 8032 	lcall	__gptrput
                                   8033 ;	calc.c:367: return 1;
      002D25 90 00 01         [24] 8034 	mov	dptr,#0x0001
                                   8035 ;	calc.c:368: }
      002D28 D0*00            [24] 8036 	pop	_bp
      002D2A 22               [24] 8037 	ret
                                   8038 ;------------------------------------------------------------
                                   8039 ;Allocation info for local variables in function 'reset_base'
                                   8040 ;------------------------------------------------------------
                                   8041 ;delta                     Allocated to stack - _bp -5
                                   8042 ;_ctx                      Allocated to registers r5 r6 r7 
                                   8043 ;ctx                       Allocated to registers r5 r6 r7 
                                   8044 ;------------------------------------------------------------
                                   8045 ;	calc.c:370: static int reset_base(void *_ctx, delta_t *delta) __reentrant {
                                   8046 ;	-----------------------------------------
                                   8047 ;	 function reset_base
                                   8048 ;	-----------------------------------------
      002D2B                       8049 _reset_base:
      002D2B C0*00            [24] 8050 	push	_bp
      002D2D 85 81*00         [24] 8051 	mov	_bp,sp
      002D30 AD 82            [24] 8052 	mov	r5,dpl
      002D32 AE 83            [24] 8053 	mov	r6,dph
      002D34 AF F0            [24] 8054 	mov	r7,b
                                   8055 ;	calc.c:371: calc_ctx_t *ctx = (calc_ctx_t *)_ctx;
                                   8056 ;	calc.c:375: switch (ctx->digit[0]) {
      002D36 74 07            [12] 8057 	mov	a,#0x07
      002D38 2D               [12] 8058 	add	a,r5
      002D39 FA               [12] 8059 	mov	r2,a
      002D3A E4               [12] 8060 	clr	a
      002D3B 3E               [12] 8061 	addc	a,r6
      002D3C FB               [12] 8062 	mov	r3,a
      002D3D 8F 04            [24] 8063 	mov	ar4,r7
      002D3F 8A 82            [24] 8064 	mov	dpl,r2
      002D41 8B 83            [24] 8065 	mov	dph,r3
      002D43 8C F0            [24] 8066 	mov	b,r4
      002D45 12r00r00         [24] 8067 	lcall	__gptrget
      002D48 FC               [12] 8068 	mov	r4,a
      002D49 BC 48 02         [24] 8069 	cjne	r4,#0x48,00124$
      002D4C 80 0F            [24] 8070 	sjmp	00101$
      002D4E                       8071 00124$:
      002D4E BC 4F 02         [24] 8072 	cjne	r4,#0x4f,00125$
      002D51 80 2E            [24] 8073 	sjmp	00103$
      002D53                       8074 00125$:
      002D53 BC 68 02         [24] 8075 	cjne	r4,#0x68,00126$
      002D56 80 17            [24] 8076 	sjmp	00102$
      002D58                       8077 00126$:
                                   8078 ;	calc.c:376: case 'H':
      002D58 BC 6F 48         [24] 8079 	cjne	r4,#0x6f,00105$
      002D5B 80 36            [24] 8080 	sjmp	00104$
      002D5D                       8081 00101$:
                                   8082 ;	calc.c:377: ctx->base = 16;
      002D5D 8D 82            [24] 8083 	mov	dpl,r5
      002D5F 8E 83            [24] 8084 	mov	dph,r6
      002D61 8F F0            [24] 8085 	mov	b,r7
      002D63 74 10            [12] 8086 	mov	a,#0x10
      002D65 12r00r00         [24] 8087 	lcall	__gptrput
      002D68 A3               [24] 8088 	inc	dptr
      002D69 E4               [12] 8089 	clr	a
      002D6A 12r00r00         [24] 8090 	lcall	__gptrput
                                   8091 ;	calc.c:378: break;
                                   8092 ;	calc.c:379: case 'h':
      002D6D 80 34            [24] 8093 	sjmp	00105$
      002D6F                       8094 00102$:
                                   8095 ;	calc.c:380: ctx->base = 10;
      002D6F 8D 82            [24] 8096 	mov	dpl,r5
      002D71 8E 83            [24] 8097 	mov	dph,r6
      002D73 8F F0            [24] 8098 	mov	b,r7
      002D75 74 0A            [12] 8099 	mov	a,#0x0a
      002D77 12r00r00         [24] 8100 	lcall	__gptrput
      002D7A A3               [24] 8101 	inc	dptr
      002D7B E4               [12] 8102 	clr	a
      002D7C 12r00r00         [24] 8103 	lcall	__gptrput
                                   8104 ;	calc.c:381: break;
                                   8105 ;	calc.c:382: case 'O':
      002D7F 80 22            [24] 8106 	sjmp	00105$
      002D81                       8107 00103$:
                                   8108 ;	calc.c:383: ctx->base = 8;
      002D81 8D 82            [24] 8109 	mov	dpl,r5
      002D83 8E 83            [24] 8110 	mov	dph,r6
      002D85 8F F0            [24] 8111 	mov	b,r7
      002D87 74 08            [12] 8112 	mov	a,#0x08
      002D89 12r00r00         [24] 8113 	lcall	__gptrput
      002D8C A3               [24] 8114 	inc	dptr
      002D8D E4               [12] 8115 	clr	a
      002D8E 12r00r00         [24] 8116 	lcall	__gptrput
                                   8117 ;	calc.c:384: break;
                                   8118 ;	calc.c:385: case 'o':
      002D91 80 10            [24] 8119 	sjmp	00105$
      002D93                       8120 00104$:
                                   8121 ;	calc.c:386: ctx->base = 2;
      002D93 8D 82            [24] 8122 	mov	dpl,r5
      002D95 8E 83            [24] 8123 	mov	dph,r6
      002D97 8F F0            [24] 8124 	mov	b,r7
      002D99 74 02            [12] 8125 	mov	a,#0x02
      002D9B 12r00r00         [24] 8126 	lcall	__gptrput
      002D9E A3               [24] 8127 	inc	dptr
      002D9F E4               [12] 8128 	clr	a
      002DA0 12r00r00         [24] 8129 	lcall	__gptrput
                                   8130 ;	calc.c:388: }
      002DA3                       8131 00105$:
                                   8132 ;	calc.c:390: return 1;
      002DA3 90 00 01         [24] 8133 	mov	dptr,#0x0001
                                   8134 ;	calc.c:391: }
      002DA6 D0*00            [24] 8135 	pop	_bp
      002DA8 22               [24] 8136 	ret
                                   8137 ;------------------------------------------------------------
                                   8138 ;Allocation info for local variables in function 'status'
                                   8139 ;------------------------------------------------------------
                                   8140 ;delta                     Allocated to stack - _bp -5
                                   8141 ;_ctx                      Allocated to registers r5 r6 r7 
                                   8142 ;ctx                       Allocated to stack - _bp +11
                                   8143 ;vals                      Allocated to stack - _bp +14
                                   8144 ;n                         Allocated to stack - _bp +9
                                   8145 ;__1310720129              Allocated to registers 
                                   8146 ;s                         Allocated to registers r5 r6 r7 
                                   8147 ;__1310720131              Allocated to registers r5 r6 r7 r4 
                                   8148 ;d                         Allocated to registers 
                                   8149 ;__1310720001              Allocated to registers 
                                   8150 ;d                         Allocated to stack - _bp +22
                                   8151 ;mask                      Allocated to stack - _bp +26
                                   8152 ;__1310720133              Allocated to registers 
                                   8153 ;s                         Allocated to registers r3 r4 r5 
                                   8154 ;__1310720135              Allocated to registers r2 r3 r4 r5 
                                   8155 ;d                         Allocated to registers 
                                   8156 ;__1310720001              Allocated to registers 
                                   8157 ;d                         Allocated to stack - _bp +22
                                   8158 ;mask                      Allocated to stack - _bp +26
                                   8159 ;__1310720137              Allocated to registers 
                                   8160 ;s                         Allocated to registers r3 r4 r5 
                                   8161 ;__1310720139              Allocated to registers r4 r5 r6 r7 
                                   8162 ;d                         Allocated to registers 
                                   8163 ;__1310720001              Allocated to registers 
                                   8164 ;d                         Allocated to stack - _bp +22
                                   8165 ;mask                      Allocated to stack - _bp +26
                                   8166 ;__1310720141              Allocated to registers 
                                   8167 ;s                         Allocated to registers r3 r4 r5 
                                   8168 ;__1310720143              Allocated to registers r2 r3 r4 r5 
                                   8169 ;d                         Allocated to registers 
                                   8170 ;__1310720001              Allocated to registers 
                                   8171 ;d                         Allocated to stack - _bp +22
                                   8172 ;mask                      Allocated to stack - _bp +26
                                   8173 ;__1310720145              Allocated to registers 
                                   8174 ;s                         Allocated to registers r5 r6 r7 
                                   8175 ;__1310720147              Allocated to registers r4 r5 r6 r7 
                                   8176 ;d                         Allocated to registers 
                                   8177 ;__1310720001              Allocated to registers 
                                   8178 ;d                         Allocated to stack - _bp +22
                                   8179 ;mask                      Allocated to stack - _bp +26
                                   8180 ;__1310720149              Allocated to registers 
                                   8181 ;s                         Allocated to registers r5 r6 r7 
                                   8182 ;sloc0                     Allocated to stack - _bp +1
                                   8183 ;sloc1                     Allocated to stack - _bp +4
                                   8184 ;sloc2                     Allocated to stack - _bp +7
                                   8185 ;------------------------------------------------------------
                                   8186 ;	calc.c:393: static int status(void *_ctx, delta_t *delta) __reentrant {
                                   8187 ;	-----------------------------------------
                                   8188 ;	 function status
                                   8189 ;	-----------------------------------------
      002DA9                       8190 _status:
      002DA9 C0*00            [24] 8191 	push	_bp
      002DAB E5 81            [12] 8192 	mov	a,sp
      002DAD F5*00            [12] 8193 	mov	_bp,a
      002DAF 24 1D            [12] 8194 	add	a,#0x1d
      002DB1 F5 81            [12] 8195 	mov	sp,a
      002DB3 AD 82            [24] 8196 	mov	r5,dpl
      002DB5 AE 83            [24] 8197 	mov	r6,dph
      002DB7 AF F0            [24] 8198 	mov	r7,b
                                   8199 ;	calc.c:394: calc_ctx_t *ctx = (calc_ctx_t *)_ctx;
      002DB9 E5*00            [12] 8200 	mov	a,_bp
      002DBB 24 0B            [12] 8201 	add	a,#0x0b
      002DBD F8               [12] 8202 	mov	r0,a
      002DBE A6 05            [24] 8203 	mov	@r0,ar5
      002DC0 08               [12] 8204 	inc	r0
      002DC1 A6 06            [24] 8205 	mov	@r0,ar6
      002DC3 08               [12] 8206 	inc	r0
      002DC4 A6 07            [24] 8207 	mov	@r0,ar7
                                   8208 ;	calc.c:400: printf("\r\nPS = %p, SS = %p, base = %d\r\n", ctx->ps, ctx->ss, ctx->base);
      002DC6 E5*00            [12] 8209 	mov	a,_bp
      002DC8 24 0B            [12] 8210 	add	a,#0x0b
      002DCA F8               [12] 8211 	mov	r0,a
      002DCB 86 82            [24] 8212 	mov	dpl,@r0
      002DCD 08               [12] 8213 	inc	r0
      002DCE 86 83            [24] 8214 	mov	dph,@r0
      002DD0 08               [12] 8215 	inc	r0
      002DD1 86 F0            [24] 8216 	mov	b,@r0
      002DD3 E5*00            [12] 8217 	mov	a,_bp
      002DD5 24 07            [12] 8218 	add	a,#0x07
      002DD7 F9               [12] 8219 	mov	r1,a
      002DD8 12r00r00         [24] 8220 	lcall	__gptrget
      002DDB F7               [12] 8221 	mov	@r1,a
      002DDC A3               [24] 8222 	inc	dptr
      002DDD 12r00r00         [24] 8223 	lcall	__gptrget
      002DE0 09               [12] 8224 	inc	r1
      002DE1 F7               [12] 8225 	mov	@r1,a
      002DE2 E5*00            [12] 8226 	mov	a,_bp
      002DE4 24 0B            [12] 8227 	add	a,#0x0b
      002DE6 F8               [12] 8228 	mov	r0,a
      002DE7 A9*00            [24] 8229 	mov	r1,_bp
      002DE9 09               [12] 8230 	inc	r1
      002DEA 74 14            [12] 8231 	mov	a,#0x14
      002DEC 26               [12] 8232 	add	a,@r0
      002DED F7               [12] 8233 	mov	@r1,a
      002DEE 74 40            [12] 8234 	mov	a,#0x40
      002DF0 08               [12] 8235 	inc	r0
      002DF1 36               [12] 8236 	addc	a,@r0
      002DF2 09               [12] 8237 	inc	r1
      002DF3 F7               [12] 8238 	mov	@r1,a
      002DF4 08               [12] 8239 	inc	r0
      002DF5 09               [12] 8240 	inc	r1
      002DF6 E6               [12] 8241 	mov	a,@r0
      002DF7 F7               [12] 8242 	mov	@r1,a
      002DF8 A8*00            [24] 8243 	mov	r0,_bp
      002DFA 08               [12] 8244 	inc	r0
      002DFB 86 82            [24] 8245 	mov	dpl,@r0
      002DFD 08               [12] 8246 	inc	r0
      002DFE 86 83            [24] 8247 	mov	dph,@r0
      002E00 08               [12] 8248 	inc	r0
      002E01 86 F0            [24] 8249 	mov	b,@r0
      002E03 12r00r00         [24] 8250 	lcall	__gptrget
      002E06 FA               [12] 8251 	mov	r2,a
      002E07 A3               [24] 8252 	inc	dptr
      002E08 12r00r00         [24] 8253 	lcall	__gptrget
      002E0B FE               [12] 8254 	mov	r6,a
      002E0C A3               [24] 8255 	inc	dptr
      002E0D 12r00r00         [24] 8256 	lcall	__gptrget
      002E10 FF               [12] 8257 	mov	r7,a
      002E11 E5*00            [12] 8258 	mov	a,_bp
      002E13 24 0B            [12] 8259 	add	a,#0x0b
      002E15 F8               [12] 8260 	mov	r0,a
      002E16 E5*00            [12] 8261 	mov	a,_bp
      002E18 24 04            [12] 8262 	add	a,#0x04
      002E1A F9               [12] 8263 	mov	r1,a
      002E1B 74 11            [12] 8264 	mov	a,#0x11
      002E1D 26               [12] 8265 	add	a,@r0
      002E1E F7               [12] 8266 	mov	@r1,a
      002E1F 74 40            [12] 8267 	mov	a,#0x40
      002E21 08               [12] 8268 	inc	r0
      002E22 36               [12] 8269 	addc	a,@r0
      002E23 09               [12] 8270 	inc	r1
      002E24 F7               [12] 8271 	mov	@r1,a
      002E25 08               [12] 8272 	inc	r0
      002E26 09               [12] 8273 	inc	r1
      002E27 E6               [12] 8274 	mov	a,@r0
      002E28 F7               [12] 8275 	mov	@r1,a
      002E29 E5*00            [12] 8276 	mov	a,_bp
      002E2B 24 04            [12] 8277 	add	a,#0x04
      002E2D F8               [12] 8278 	mov	r0,a
      002E2E 86 82            [24] 8279 	mov	dpl,@r0
      002E30 08               [12] 8280 	inc	r0
      002E31 86 83            [24] 8281 	mov	dph,@r0
      002E33 08               [12] 8282 	inc	r0
      002E34 86 F0            [24] 8283 	mov	b,@r0
      002E36 12r00r00         [24] 8284 	lcall	__gptrget
      002E39 FB               [12] 8285 	mov	r3,a
      002E3A A3               [24] 8286 	inc	dptr
      002E3B 12r00r00         [24] 8287 	lcall	__gptrget
      002E3E FC               [12] 8288 	mov	r4,a
      002E3F A3               [24] 8289 	inc	dptr
      002E40 12r00r00         [24] 8290 	lcall	__gptrget
      002E43 FD               [12] 8291 	mov	r5,a
      002E44 E5*00            [12] 8292 	mov	a,_bp
      002E46 24 07            [12] 8293 	add	a,#0x07
      002E48 F8               [12] 8294 	mov	r0,a
      002E49 E6               [12] 8295 	mov	a,@r0
      002E4A C0 E0            [24] 8296 	push	acc
      002E4C 08               [12] 8297 	inc	r0
      002E4D E6               [12] 8298 	mov	a,@r0
      002E4E C0 E0            [24] 8299 	push	acc
      002E50 C0 02            [24] 8300 	push	ar2
      002E52 C0 06            [24] 8301 	push	ar6
      002E54 C0 07            [24] 8302 	push	ar7
      002E56 C0 03            [24] 8303 	push	ar3
      002E58 C0 04            [24] 8304 	push	ar4
      002E5A C0 05            [24] 8305 	push	ar5
      002E5C 74rC5            [12] 8306 	mov	a,#___str_15
      002E5E C0 E0            [24] 8307 	push	acc
      002E60 74s00            [12] 8308 	mov	a,#(___str_15 >> 8)
      002E62 C0 E0            [24] 8309 	push	acc
      002E64 74 80            [12] 8310 	mov	a,#0x80
      002E66 C0 E0            [24] 8311 	push	acc
      002E68 12r00r00         [24] 8312 	lcall	_printf
      002E6B E5 81            [12] 8313 	mov	a,sp
      002E6D 24 F5            [12] 8314 	add	a,#0xf5
      002E6F F5 81            [12] 8315 	mov	sp,a
                                   8316 ;	calc.c:402: printstr("ACC\t");
      002E71 7DrE5            [12] 8317 	mov	r5,#___str_16
      002E73 7Es00            [12] 8318 	mov	r6,#(___str_16 >> 8)
      002E75 7F 80            [12] 8319 	mov	r7,#0x80
                                   8320 ;	calc.c:51: return;
      002E77                       8321 00139$:
                                   8322 ;	calc.c:49: for (; *s; s++) putchar(*s);
      002E77 8D 82            [24] 8323 	mov	dpl,r5
      002E79 8E 83            [24] 8324 	mov	dph,r6
      002E7B 8F F0            [24] 8325 	mov	b,r7
      002E7D 12r00r00         [24] 8326 	lcall	__gptrget
      002E80 FC               [12] 8327 	mov	r4,a
      002E81 60 10            [24] 8328 	jz	00112$
      002E83 7B 00            [12] 8329 	mov	r3,#0x00
      002E85 8C 82            [24] 8330 	mov	dpl,r4
      002E87 8B 83            [24] 8331 	mov	dph,r3
      002E89 12r00r00         [24] 8332 	lcall	_putchar
      002E8C 0D               [12] 8333 	inc	r5
                                   8334 ;	calc.c:402: printstr("ACC\t");
      002E8D BD 00 E7         [24] 8335 	cjne	r5,#0x00,00139$
      002E90 0E               [12] 8336 	inc	r6
      002E91 80 E4            [24] 8337 	sjmp	00139$
      002E93                       8338 00112$:
                                   8339 ;	calc.c:403: if (ctx->acc_valid) printall(ctx->acc);
      002E93 E5*00            [12] 8340 	mov	a,_bp
      002E95 24 0B            [12] 8341 	add	a,#0x0b
      002E97 F8               [12] 8342 	mov	r0,a
      002E98 74 06            [12] 8343 	mov	a,#0x06
      002E9A 26               [12] 8344 	add	a,@r0
      002E9B FD               [12] 8345 	mov	r5,a
      002E9C E4               [12] 8346 	clr	a
      002E9D 08               [12] 8347 	inc	r0
      002E9E 36               [12] 8348 	addc	a,@r0
      002E9F FE               [12] 8349 	mov	r6,a
      002EA0 08               [12] 8350 	inc	r0
      002EA1 86 07            [24] 8351 	mov	ar7,@r0
      002EA3 8D 82            [24] 8352 	mov	dpl,r5
      002EA5 8E 83            [24] 8353 	mov	dph,r6
      002EA7 8F F0            [24] 8354 	mov	b,r7
      002EA9 12r00r00         [24] 8355 	lcall	__gptrget
      002EAC 70 03            [24] 8356 	jnz	00321$
      002EAE 02r2FrE0         [24] 8357 	ljmp	00102$
      002EB1                       8358 00321$:
      002EB1 E5*00            [12] 8359 	mov	a,_bp
      002EB3 24 0B            [12] 8360 	add	a,#0x0b
      002EB5 F8               [12] 8361 	mov	r0,a
      002EB6 74 02            [12] 8362 	mov	a,#0x02
      002EB8 26               [12] 8363 	add	a,@r0
      002EB9 FD               [12] 8364 	mov	r5,a
      002EBA E4               [12] 8365 	clr	a
      002EBB 08               [12] 8366 	inc	r0
      002EBC 36               [12] 8367 	addc	a,@r0
      002EBD FE               [12] 8368 	mov	r6,a
      002EBE 08               [12] 8369 	inc	r0
      002EBF 86 07            [24] 8370 	mov	ar7,@r0
      002EC1 8D 82            [24] 8371 	mov	dpl,r5
      002EC3 8E 83            [24] 8372 	mov	dph,r6
      002EC5 8F F0            [24] 8373 	mov	b,r7
      002EC7 12r00r00         [24] 8374 	lcall	__gptrget
      002ECA FD               [12] 8375 	mov	r5,a
      002ECB A3               [24] 8376 	inc	dptr
      002ECC 12r00r00         [24] 8377 	lcall	__gptrget
      002ECF FE               [12] 8378 	mov	r6,a
      002ED0 A3               [24] 8379 	inc	dptr
      002ED1 12r00r00         [24] 8380 	lcall	__gptrget
      002ED4 FF               [12] 8381 	mov	r7,a
      002ED5 A3               [24] 8382 	inc	dptr
      002ED6 12r00r00         [24] 8383 	lcall	__gptrget
      002ED9 FC               [12] 8384 	mov	r4,a
                                   8385 ;	calc.c:64: printf("%08lx\t", d);
      002EDA C0 07            [24] 8386 	push	ar7
      002EDC C0 06            [24] 8387 	push	ar6
      002EDE C0 05            [24] 8388 	push	ar5
      002EE0 C0 04            [24] 8389 	push	ar4
      002EE2 C0 05            [24] 8390 	push	ar5
      002EE4 C0 06            [24] 8391 	push	ar6
      002EE6 C0 07            [24] 8392 	push	ar7
      002EE8 C0 04            [24] 8393 	push	ar4
      002EEA 74r00            [12] 8394 	mov	a,#___str_0
      002EEC C0 E0            [24] 8395 	push	acc
      002EEE 74s00            [12] 8396 	mov	a,#(___str_0 >> 8)
      002EF0 C0 E0            [24] 8397 	push	acc
      002EF2 74 80            [12] 8398 	mov	a,#0x80
      002EF4 C0 E0            [24] 8399 	push	acc
      002EF6 12r00r00         [24] 8400 	lcall	_printf
      002EF9 E5 81            [12] 8401 	mov	a,sp
      002EFB 24 F9            [12] 8402 	add	a,#0xf9
      002EFD F5 81            [12] 8403 	mov	sp,a
      002EFF D0 04            [24] 8404 	pop	ar4
      002F01 D0 05            [24] 8405 	pop	ar5
      002F03 D0 06            [24] 8406 	pop	ar6
      002F05 D0 07            [24] 8407 	pop	ar7
                                   8408 ;	calc.c:65: printf("% 11ld\t", d);
      002F07 C0 07            [24] 8409 	push	ar7
      002F09 C0 06            [24] 8410 	push	ar6
      002F0B C0 05            [24] 8411 	push	ar5
      002F0D C0 04            [24] 8412 	push	ar4
      002F0F C0 05            [24] 8413 	push	ar5
      002F11 C0 06            [24] 8414 	push	ar6
      002F13 C0 07            [24] 8415 	push	ar7
      002F15 C0 04            [24] 8416 	push	ar4
      002F17 74r07            [12] 8417 	mov	a,#___str_1
      002F19 C0 E0            [24] 8418 	push	acc
      002F1B 74s00            [12] 8419 	mov	a,#(___str_1 >> 8)
      002F1D C0 E0            [24] 8420 	push	acc
      002F1F 74 80            [12] 8421 	mov	a,#0x80
      002F21 C0 E0            [24] 8422 	push	acc
      002F23 12r00r00         [24] 8423 	lcall	_printf
      002F26 E5 81            [12] 8424 	mov	a,sp
      002F28 24 F9            [12] 8425 	add	a,#0xf9
      002F2A F5 81            [12] 8426 	mov	sp,a
      002F2C D0 04            [24] 8427 	pop	ar4
      002F2E D0 05            [24] 8428 	pop	ar5
      002F30 D0 06            [24] 8429 	pop	ar6
      002F32 D0 07            [24] 8430 	pop	ar7
                                   8431 ;	calc.c:66: printf("%011lo\t", d);
      002F34 C0 07            [24] 8432 	push	ar7
      002F36 C0 06            [24] 8433 	push	ar6
      002F38 C0 05            [24] 8434 	push	ar5
      002F3A C0 04            [24] 8435 	push	ar4
      002F3C C0 05            [24] 8436 	push	ar5
      002F3E C0 06            [24] 8437 	push	ar6
      002F40 C0 07            [24] 8438 	push	ar7
      002F42 C0 04            [24] 8439 	push	ar4
      002F44 74r0F            [12] 8440 	mov	a,#___str_2
      002F46 C0 E0            [24] 8441 	push	acc
      002F48 74s00            [12] 8442 	mov	a,#(___str_2 >> 8)
      002F4A C0 E0            [24] 8443 	push	acc
      002F4C 74 80            [12] 8444 	mov	a,#0x80
      002F4E C0 E0            [24] 8445 	push	acc
      002F50 12r00r00         [24] 8446 	lcall	_printf
      002F53 E5 81            [12] 8447 	mov	a,sp
      002F55 24 F9            [12] 8448 	add	a,#0xf9
      002F57 F5 81            [12] 8449 	mov	sp,a
      002F59 D0 04            [24] 8450 	pop	ar4
      002F5B D0 05            [24] 8451 	pop	ar5
      002F5D D0 06            [24] 8452 	pop	ar6
      002F5F D0 07            [24] 8453 	pop	ar7
                                   8454 ;	calc.c:67: printbin(d);
      002F61 E5*00            [12] 8455 	mov	a,_bp
      002F63 24 16            [12] 8456 	add	a,#0x16
      002F65 F8               [12] 8457 	mov	r0,a
      002F66 A6 05            [24] 8458 	mov	@r0,ar5
      002F68 08               [12] 8459 	inc	r0
      002F69 A6 06            [24] 8460 	mov	@r0,ar6
      002F6B 08               [12] 8461 	inc	r0
      002F6C A6 07            [24] 8462 	mov	@r0,ar7
      002F6E 08               [12] 8463 	inc	r0
      002F6F A6 04            [24] 8464 	mov	@r0,ar4
                                   8465 ;	calc.c:57: for (mask = 0x80000000lu; mask; mask >>= 1)
      002F71 E5*00            [12] 8466 	mov	a,_bp
      002F73 24 1A            [12] 8467 	add	a,#0x1a
      002F75 F8               [12] 8468 	mov	r0,a
      002F76 E4               [12] 8469 	clr	a
      002F77 F6               [12] 8470 	mov	@r0,a
      002F78 08               [12] 8471 	inc	r0
      002F79 F6               [12] 8472 	mov	@r0,a
      002F7A 08               [12] 8473 	inc	r0
      002F7B F6               [12] 8474 	mov	@r0,a
      002F7C 08               [12] 8475 	inc	r0
      002F7D 76 80            [12] 8476 	mov	@r0,#0x80
      002F7F                       8477 00141$:
                                   8478 ;	calc.c:58: (void)putchar((d & mask) ? (int)'1' : (int)'0');
      002F7F E5*00            [12] 8479 	mov	a,_bp
      002F81 24 16            [12] 8480 	add	a,#0x16
      002F83 F8               [12] 8481 	mov	r0,a
      002F84 86 04            [24] 8482 	mov	ar4,@r0
      002F86 08               [12] 8483 	inc	r0
      002F87 86 05            [24] 8484 	mov	ar5,@r0
      002F89 08               [12] 8485 	inc	r0
      002F8A 86 06            [24] 8486 	mov	ar6,@r0
      002F8C 08               [12] 8487 	inc	r0
      002F8D 86 07            [24] 8488 	mov	ar7,@r0
      002F8F E5*00            [12] 8489 	mov	a,_bp
      002F91 24 1A            [12] 8490 	add	a,#0x1a
      002F93 F8               [12] 8491 	mov	r0,a
      002F94 E6               [12] 8492 	mov	a,@r0
      002F95 52 04            [12] 8493 	anl	ar4,a
      002F97 08               [12] 8494 	inc	r0
      002F98 E6               [12] 8495 	mov	a,@r0
      002F99 52 05            [12] 8496 	anl	ar5,a
      002F9B 08               [12] 8497 	inc	r0
      002F9C E6               [12] 8498 	mov	a,@r0
      002F9D 52 06            [12] 8499 	anl	ar6,a
      002F9F 08               [12] 8500 	inc	r0
      002FA0 E6               [12] 8501 	mov	a,@r0
      002FA1 52 07            [12] 8502 	anl	ar7,a
      002FA3 EC               [12] 8503 	mov	a,r4
      002FA4 4D               [12] 8504 	orl	a,r5
      002FA5 4E               [12] 8505 	orl	a,r6
      002FA6 4F               [12] 8506 	orl	a,r7
      002FA7 60 06            [24] 8507 	jz	00168$
      002FA9 7E 31            [12] 8508 	mov	r6,#0x31
      002FAB 7F 00            [12] 8509 	mov	r7,#0x00
      002FAD 80 04            [24] 8510 	sjmp	00169$
      002FAF                       8511 00168$:
      002FAF 7E 30            [12] 8512 	mov	r6,#0x30
      002FB1 7F 00            [12] 8513 	mov	r7,#0x00
      002FB3                       8514 00169$:
      002FB3 8E 82            [24] 8515 	mov	dpl,r6
      002FB5 8F 83            [24] 8516 	mov	dph,r7
      002FB7 12r00r00         [24] 8517 	lcall	_putchar
                                   8518 ;	calc.c:57: for (mask = 0x80000000lu; mask; mask >>= 1)
      002FBA E5*00            [12] 8519 	mov	a,_bp
      002FBC 24 1A            [12] 8520 	add	a,#0x1a
      002FBE F8               [12] 8521 	mov	r0,a
      002FBF 08               [12] 8522 	inc	r0
      002FC0 08               [12] 8523 	inc	r0
      002FC1 08               [12] 8524 	inc	r0
      002FC2 E6               [12] 8525 	mov	a,@r0
      002FC3 C3               [12] 8526 	clr	c
      002FC4 13               [12] 8527 	rrc	a
      002FC5 F6               [12] 8528 	mov	@r0,a
      002FC6 18               [12] 8529 	dec	r0
      002FC7 E6               [12] 8530 	mov	a,@r0
      002FC8 13               [12] 8531 	rrc	a
      002FC9 F6               [12] 8532 	mov	@r0,a
      002FCA 18               [12] 8533 	dec	r0
      002FCB E6               [12] 8534 	mov	a,@r0
      002FCC 13               [12] 8535 	rrc	a
      002FCD F6               [12] 8536 	mov	@r0,a
      002FCE 18               [12] 8537 	dec	r0
      002FCF E6               [12] 8538 	mov	a,@r0
      002FD0 13               [12] 8539 	rrc	a
      002FD1 F6               [12] 8540 	mov	@r0,a
      002FD2 E5*00            [12] 8541 	mov	a,_bp
      002FD4 24 1A            [12] 8542 	add	a,#0x1a
      002FD6 F8               [12] 8543 	mov	r0,a
      002FD7 E6               [12] 8544 	mov	a,@r0
      002FD8 08               [12] 8545 	inc	r0
      002FD9 46               [12] 8546 	orl	a,@r0
      002FDA 08               [12] 8547 	inc	r0
      002FDB 46               [12] 8548 	orl	a,@r0
      002FDC 08               [12] 8549 	inc	r0
      002FDD 46               [12] 8550 	orl	a,@r0
      002FDE 70 9F            [24] 8551 	jnz	00141$
                                   8552 ;	calc.c:403: if (ctx->acc_valid) printall(ctx->acc);
      002FE0                       8553 00102$:
                                   8554 ;	calc.c:405: n = stack_peek2(ctx->ps, vals);
      002FE0 E5*00            [12] 8555 	mov	a,_bp
      002FE2 24 0E            [12] 8556 	add	a,#0x0e
      002FE4 F9               [12] 8557 	mov	r1,a
      002FE5 FD               [12] 8558 	mov	r5,a
      002FE6 7E 00            [12] 8559 	mov	r6,#0x00
      002FE8 7F 40            [12] 8560 	mov	r7,#0x40
      002FEA E5*00            [12] 8561 	mov	a,_bp
      002FEC 24 04            [12] 8562 	add	a,#0x04
      002FEE F8               [12] 8563 	mov	r0,a
      002FEF 86 82            [24] 8564 	mov	dpl,@r0
      002FF1 08               [12] 8565 	inc	r0
      002FF2 86 83            [24] 8566 	mov	dph,@r0
      002FF4 08               [12] 8567 	inc	r0
      002FF5 86 F0            [24] 8568 	mov	b,@r0
      002FF7 12r00r00         [24] 8569 	lcall	__gptrget
      002FFA FA               [12] 8570 	mov	r2,a
      002FFB A3               [24] 8571 	inc	dptr
      002FFC 12r00r00         [24] 8572 	lcall	__gptrget
      002FFF FB               [12] 8573 	mov	r3,a
      003000 A3               [24] 8574 	inc	dptr
      003001 12r00r00         [24] 8575 	lcall	__gptrget
      003004 FC               [12] 8576 	mov	r4,a
      003005 C0 01            [24] 8577 	push	ar1
      003007 C0 05            [24] 8578 	push	ar5
      003009 C0 06            [24] 8579 	push	ar6
      00300B C0 07            [24] 8580 	push	ar7
      00300D 8A 82            [24] 8581 	mov	dpl,r2
      00300F 8B 83            [24] 8582 	mov	dph,r3
      003011 8C F0            [24] 8583 	mov	b,r4
      003013 12r00r00         [24] 8584 	lcall	_stack_peek2
      003016 AE 82            [24] 8585 	mov	r6,dpl
      003018 AF 83            [24] 8586 	mov	r7,dph
      00301A 15 81            [12] 8587 	dec	sp
      00301C 15 81            [12] 8588 	dec	sp
      00301E 15 81            [12] 8589 	dec	sp
      003020 D0 01            [24] 8590 	pop	ar1
                                   8591 ;	calc.c:406: printstr("\r\nPSTOP1\t");
      003022 7BrEA            [12] 8592 	mov	r3,#___str_17
      003024 7Cs00            [12] 8593 	mov	r4,#(___str_17 >> 8)
      003026 7D 80            [12] 8594 	mov	r5,#0x80
                                   8595 ;	calc.c:51: return;
      003028                       8596 00144$:
                                   8597 ;	calc.c:49: for (; *s; s++) putchar(*s);
      003028 8B 82            [24] 8598 	mov	dpl,r3
      00302A 8C 83            [24] 8599 	mov	dph,r4
      00302C 8D F0            [24] 8600 	mov	b,r5
      00302E 12r00r00         [24] 8601 	lcall	__gptrget
      003031 FA               [12] 8602 	mov	r2,a
      003032 60 18            [24] 8603 	jz	00117$
      003034 C0 06            [24] 8604 	push	ar6
      003036 C0 07            [24] 8605 	push	ar7
      003038 7F 00            [12] 8606 	mov	r7,#0x00
      00303A 8A 82            [24] 8607 	mov	dpl,r2
      00303C 8F 83            [24] 8608 	mov	dph,r7
      00303E 12r00r00         [24] 8609 	lcall	_putchar
      003041 0B               [12] 8610 	inc	r3
      003042 BB 00 01         [24] 8611 	cjne	r3,#0x00,00325$
      003045 0C               [12] 8612 	inc	r4
      003046                       8613 00325$:
      003046 D0 07            [24] 8614 	pop	ar7
      003048 D0 06            [24] 8615 	pop	ar6
                                   8616 ;	calc.c:406: printstr("\r\nPSTOP1\t");
      00304A 80 DC            [24] 8617 	sjmp	00144$
      00304C                       8618 00117$:
                                   8619 ;	calc.c:407: if (n > 0) printall(vals[1]);
      00304C C3               [12] 8620 	clr	c
      00304D E4               [12] 8621 	clr	a
      00304E 9E               [12] 8622 	subb	a,r6
      00304F 74 80            [12] 8623 	mov	a,#(0x00 ^ 0x80)
      003051 8F F0            [24] 8624 	mov	b,r7
      003053 63 F0 80         [24] 8625 	xrl	b,#0x80
      003056 95 F0            [12] 8626 	subb	a,b
      003058 40 03            [24] 8627 	jc	00326$
      00305A 02r31r8E         [24] 8628 	ljmp	00104$
      00305D                       8629 00326$:
      00305D 74 04            [12] 8630 	mov	a,#0x04
      00305F 29               [12] 8631 	add	a,r1
      003060 F8               [12] 8632 	mov	r0,a
      003061 86 02            [24] 8633 	mov	ar2,@r0
      003063 08               [12] 8634 	inc	r0
      003064 86 03            [24] 8635 	mov	ar3,@r0
      003066 08               [12] 8636 	inc	r0
      003067 86 04            [24] 8637 	mov	ar4,@r0
      003069 08               [12] 8638 	inc	r0
      00306A 86 05            [24] 8639 	mov	ar5,@r0
                                   8640 ;	calc.c:64: printf("%08lx\t", d);
      00306C C0 07            [24] 8641 	push	ar7
      00306E C0 06            [24] 8642 	push	ar6
      003070 C0 05            [24] 8643 	push	ar5
      003072 C0 04            [24] 8644 	push	ar4
      003074 C0 03            [24] 8645 	push	ar3
      003076 C0 02            [24] 8646 	push	ar2
      003078 C0 01            [24] 8647 	push	ar1
      00307A C0 02            [24] 8648 	push	ar2
      00307C C0 03            [24] 8649 	push	ar3
      00307E C0 04            [24] 8650 	push	ar4
      003080 C0 05            [24] 8651 	push	ar5
      003082 74r00            [12] 8652 	mov	a,#___str_0
      003084 C0 E0            [24] 8653 	push	acc
      003086 74s00            [12] 8654 	mov	a,#(___str_0 >> 8)
      003088 C0 E0            [24] 8655 	push	acc
      00308A 74 80            [12] 8656 	mov	a,#0x80
      00308C C0 E0            [24] 8657 	push	acc
      00308E 12r00r00         [24] 8658 	lcall	_printf
      003091 E5 81            [12] 8659 	mov	a,sp
      003093 24 F9            [12] 8660 	add	a,#0xf9
      003095 F5 81            [12] 8661 	mov	sp,a
      003097 D0 01            [24] 8662 	pop	ar1
      003099 D0 02            [24] 8663 	pop	ar2
      00309B D0 03            [24] 8664 	pop	ar3
      00309D D0 04            [24] 8665 	pop	ar4
      00309F D0 05            [24] 8666 	pop	ar5
                                   8667 ;	calc.c:65: printf("% 11ld\t", d);
      0030A1 C0 05            [24] 8668 	push	ar5
      0030A3 C0 04            [24] 8669 	push	ar4
      0030A5 C0 03            [24] 8670 	push	ar3
      0030A7 C0 02            [24] 8671 	push	ar2
      0030A9 C0 01            [24] 8672 	push	ar1
      0030AB C0 02            [24] 8673 	push	ar2
      0030AD C0 03            [24] 8674 	push	ar3
      0030AF C0 04            [24] 8675 	push	ar4
      0030B1 C0 05            [24] 8676 	push	ar5
      0030B3 74r07            [12] 8677 	mov	a,#___str_1
      0030B5 C0 E0            [24] 8678 	push	acc
      0030B7 74s00            [12] 8679 	mov	a,#(___str_1 >> 8)
      0030B9 C0 E0            [24] 8680 	push	acc
      0030BB 74 80            [12] 8681 	mov	a,#0x80
      0030BD C0 E0            [24] 8682 	push	acc
      0030BF 12r00r00         [24] 8683 	lcall	_printf
      0030C2 E5 81            [12] 8684 	mov	a,sp
      0030C4 24 F9            [12] 8685 	add	a,#0xf9
      0030C6 F5 81            [12] 8686 	mov	sp,a
      0030C8 D0 01            [24] 8687 	pop	ar1
      0030CA D0 02            [24] 8688 	pop	ar2
      0030CC D0 03            [24] 8689 	pop	ar3
      0030CE D0 04            [24] 8690 	pop	ar4
      0030D0 D0 05            [24] 8691 	pop	ar5
                                   8692 ;	calc.c:66: printf("%011lo\t", d);
      0030D2 C0 05            [24] 8693 	push	ar5
      0030D4 C0 04            [24] 8694 	push	ar4
      0030D6 C0 03            [24] 8695 	push	ar3
      0030D8 C0 02            [24] 8696 	push	ar2
      0030DA C0 01            [24] 8697 	push	ar1
      0030DC C0 02            [24] 8698 	push	ar2
      0030DE C0 03            [24] 8699 	push	ar3
      0030E0 C0 04            [24] 8700 	push	ar4
      0030E2 C0 05            [24] 8701 	push	ar5
      0030E4 74r0F            [12] 8702 	mov	a,#___str_2
      0030E6 C0 E0            [24] 8703 	push	acc
      0030E8 74s00            [12] 8704 	mov	a,#(___str_2 >> 8)
      0030EA C0 E0            [24] 8705 	push	acc
      0030EC 74 80            [12] 8706 	mov	a,#0x80
      0030EE C0 E0            [24] 8707 	push	acc
      0030F0 12r00r00         [24] 8708 	lcall	_printf
      0030F3 E5 81            [12] 8709 	mov	a,sp
      0030F5 24 F9            [12] 8710 	add	a,#0xf9
      0030F7 F5 81            [12] 8711 	mov	sp,a
      0030F9 D0 01            [24] 8712 	pop	ar1
      0030FB D0 02            [24] 8713 	pop	ar2
      0030FD D0 03            [24] 8714 	pop	ar3
      0030FF D0 04            [24] 8715 	pop	ar4
      003101 D0 05            [24] 8716 	pop	ar5
      003103 D0 06            [24] 8717 	pop	ar6
      003105 D0 07            [24] 8718 	pop	ar7
                                   8719 ;	calc.c:67: printbin(d);
      003107 E5*00            [12] 8720 	mov	a,_bp
      003109 24 16            [12] 8721 	add	a,#0x16
      00310B F8               [12] 8722 	mov	r0,a
      00310C A6 02            [24] 8723 	mov	@r0,ar2
      00310E 08               [12] 8724 	inc	r0
      00310F A6 03            [24] 8725 	mov	@r0,ar3
      003111 08               [12] 8726 	inc	r0
      003112 A6 04            [24] 8727 	mov	@r0,ar4
      003114 08               [12] 8728 	inc	r0
      003115 A6 05            [24] 8729 	mov	@r0,ar5
                                   8730 ;	calc.c:57: for (mask = 0x80000000lu; mask; mask >>= 1)
      003117 E5*00            [12] 8731 	mov	a,_bp
      003119 24 1A            [12] 8732 	add	a,#0x1a
      00311B F8               [12] 8733 	mov	r0,a
      00311C E4               [12] 8734 	clr	a
      00311D F6               [12] 8735 	mov	@r0,a
      00311E 08               [12] 8736 	inc	r0
      00311F F6               [12] 8737 	mov	@r0,a
      003120 08               [12] 8738 	inc	r0
      003121 F6               [12] 8739 	mov	@r0,a
      003122 08               [12] 8740 	inc	r0
      003123 76 80            [12] 8741 	mov	@r0,#0x80
      003125                       8742 00146$:
                                   8743 ;	calc.c:58: (void)putchar((d & mask) ? (int)'1' : (int)'0');
      003125 C0 06            [24] 8744 	push	ar6
      003127 C0 07            [24] 8745 	push	ar7
      003129 E5*00            [12] 8746 	mov	a,_bp
      00312B 24 16            [12] 8747 	add	a,#0x16
      00312D F8               [12] 8748 	mov	r0,a
      00312E 86 04            [24] 8749 	mov	ar4,@r0
      003130 08               [12] 8750 	inc	r0
      003131 86 05            [24] 8751 	mov	ar5,@r0
      003133 08               [12] 8752 	inc	r0
      003134 86 06            [24] 8753 	mov	ar6,@r0
      003136 08               [12] 8754 	inc	r0
      003137 86 07            [24] 8755 	mov	ar7,@r0
      003139 E5*00            [12] 8756 	mov	a,_bp
      00313B 24 1A            [12] 8757 	add	a,#0x1a
      00313D F8               [12] 8758 	mov	r0,a
      00313E E6               [12] 8759 	mov	a,@r0
      00313F 52 04            [12] 8760 	anl	ar4,a
      003141 08               [12] 8761 	inc	r0
      003142 E6               [12] 8762 	mov	a,@r0
      003143 52 05            [12] 8763 	anl	ar5,a
      003145 08               [12] 8764 	inc	r0
      003146 E6               [12] 8765 	mov	a,@r0
      003147 52 06            [12] 8766 	anl	ar6,a
      003149 08               [12] 8767 	inc	r0
      00314A E6               [12] 8768 	mov	a,@r0
      00314B 52 07            [12] 8769 	anl	ar7,a
      00314D EC               [12] 8770 	mov	a,r4
      00314E 4D               [12] 8771 	orl	a,r5
      00314F 4E               [12] 8772 	orl	a,r6
      003150 4F               [12] 8773 	orl	a,r7
      003151 D0 07            [24] 8774 	pop	ar7
      003153 D0 06            [24] 8775 	pop	ar6
      003155 60 06            [24] 8776 	jz	00170$
      003157 7C 31            [12] 8777 	mov	r4,#0x31
      003159 7D 00            [12] 8778 	mov	r5,#0x00
      00315B 80 04            [24] 8779 	sjmp	00171$
      00315D                       8780 00170$:
      00315D 7C 30            [12] 8781 	mov	r4,#0x30
      00315F 7D 00            [12] 8782 	mov	r5,#0x00
      003161                       8783 00171$:
      003161 8C 82            [24] 8784 	mov	dpl,r4
      003163 8D 83            [24] 8785 	mov	dph,r5
      003165 12r00r00         [24] 8786 	lcall	_putchar
                                   8787 ;	calc.c:57: for (mask = 0x80000000lu; mask; mask >>= 1)
      003168 E5*00            [12] 8788 	mov	a,_bp
      00316A 24 1A            [12] 8789 	add	a,#0x1a
      00316C F8               [12] 8790 	mov	r0,a
      00316D 08               [12] 8791 	inc	r0
      00316E 08               [12] 8792 	inc	r0
      00316F 08               [12] 8793 	inc	r0
      003170 E6               [12] 8794 	mov	a,@r0
      003171 C3               [12] 8795 	clr	c
      003172 13               [12] 8796 	rrc	a
      003173 F6               [12] 8797 	mov	@r0,a
      003174 18               [12] 8798 	dec	r0
      003175 E6               [12] 8799 	mov	a,@r0
      003176 13               [12] 8800 	rrc	a
      003177 F6               [12] 8801 	mov	@r0,a
      003178 18               [12] 8802 	dec	r0
      003179 E6               [12] 8803 	mov	a,@r0
      00317A 13               [12] 8804 	rrc	a
      00317B F6               [12] 8805 	mov	@r0,a
      00317C 18               [12] 8806 	dec	r0
      00317D E6               [12] 8807 	mov	a,@r0
      00317E 13               [12] 8808 	rrc	a
      00317F F6               [12] 8809 	mov	@r0,a
      003180 E5*00            [12] 8810 	mov	a,_bp
      003182 24 1A            [12] 8811 	add	a,#0x1a
      003184 F8               [12] 8812 	mov	r0,a
      003185 E6               [12] 8813 	mov	a,@r0
      003186 08               [12] 8814 	inc	r0
      003187 46               [12] 8815 	orl	a,@r0
      003188 08               [12] 8816 	inc	r0
      003189 46               [12] 8817 	orl	a,@r0
      00318A 08               [12] 8818 	inc	r0
      00318B 46               [12] 8819 	orl	a,@r0
      00318C 70 97            [24] 8820 	jnz	00146$
                                   8821 ;	calc.c:407: if (n > 0) printall(vals[1]);
      00318E                       8822 00104$:
                                   8823 ;	calc.c:408: printstr("\r\nPSTOP0\t");
      00318E 7BrF4            [12] 8824 	mov	r3,#___str_18
      003190 7Cs00            [12] 8825 	mov	r4,#(___str_18 >> 8)
      003192 7D 80            [12] 8826 	mov	r5,#0x80
                                   8827 ;	calc.c:51: return;
      003194                       8828 00149$:
                                   8829 ;	calc.c:49: for (; *s; s++) putchar(*s);
      003194 8B 82            [24] 8830 	mov	dpl,r3
      003196 8C 83            [24] 8831 	mov	dph,r4
      003198 8D F0            [24] 8832 	mov	b,r5
      00319A 12r00r00         [24] 8833 	lcall	__gptrget
      00319D FA               [12] 8834 	mov	r2,a
      00319E 60 18            [24] 8835 	jz	00122$
      0031A0 C0 06            [24] 8836 	push	ar6
      0031A2 C0 07            [24] 8837 	push	ar7
      0031A4 7F 00            [12] 8838 	mov	r7,#0x00
      0031A6 8A 82            [24] 8839 	mov	dpl,r2
      0031A8 8F 83            [24] 8840 	mov	dph,r7
      0031AA 12r00r00         [24] 8841 	lcall	_putchar
      0031AD 0B               [12] 8842 	inc	r3
      0031AE BB 00 01         [24] 8843 	cjne	r3,#0x00,00330$
      0031B1 0C               [12] 8844 	inc	r4
      0031B2                       8845 00330$:
      0031B2 D0 07            [24] 8846 	pop	ar7
      0031B4 D0 06            [24] 8847 	pop	ar6
                                   8848 ;	calc.c:408: printstr("\r\nPSTOP0\t");
      0031B6 80 DC            [24] 8849 	sjmp	00149$
      0031B8                       8850 00122$:
                                   8851 ;	calc.c:409: if (n > 1) printall(vals[0]);
      0031B8 C3               [12] 8852 	clr	c
      0031B9 74 01            [12] 8853 	mov	a,#0x01
      0031BB 9E               [12] 8854 	subb	a,r6
      0031BC 74 80            [12] 8855 	mov	a,#(0x00 ^ 0x80)
      0031BE 8F F0            [24] 8856 	mov	b,r7
      0031C0 63 F0 80         [24] 8857 	xrl	b,#0x80
      0031C3 95 F0            [12] 8858 	subb	a,b
      0031C5 40 03            [24] 8859 	jc	00331$
      0031C7 02r32rEE         [24] 8860 	ljmp	00106$
      0031CA                       8861 00331$:
      0031CA 87 04            [24] 8862 	mov	ar4,@r1
      0031CC 09               [12] 8863 	inc	r1
      0031CD 87 05            [24] 8864 	mov	ar5,@r1
      0031CF 09               [12] 8865 	inc	r1
      0031D0 87 06            [24] 8866 	mov	ar6,@r1
      0031D2 09               [12] 8867 	inc	r1
      0031D3 87 07            [24] 8868 	mov	ar7,@r1
      0031D5 19               [12] 8869 	dec	r1
      0031D6 19               [12] 8870 	dec	r1
      0031D7 19               [12] 8871 	dec	r1
                                   8872 ;	calc.c:64: printf("%08lx\t", d);
      0031D8 C0 07            [24] 8873 	push	ar7
      0031DA C0 06            [24] 8874 	push	ar6
      0031DC C0 05            [24] 8875 	push	ar5
      0031DE C0 04            [24] 8876 	push	ar4
      0031E0 C0 01            [24] 8877 	push	ar1
      0031E2 C0 04            [24] 8878 	push	ar4
      0031E4 C0 05            [24] 8879 	push	ar5
      0031E6 C0 06            [24] 8880 	push	ar6
      0031E8 C0 07            [24] 8881 	push	ar7
      0031EA 74r00            [12] 8882 	mov	a,#___str_0
      0031EC C0 E0            [24] 8883 	push	acc
      0031EE 74s00            [12] 8884 	mov	a,#(___str_0 >> 8)
      0031F0 C0 E0            [24] 8885 	push	acc
      0031F2 74 80            [12] 8886 	mov	a,#0x80
      0031F4 C0 E0            [24] 8887 	push	acc
      0031F6 12r00r00         [24] 8888 	lcall	_printf
      0031F9 E5 81            [12] 8889 	mov	a,sp
      0031FB 24 F9            [12] 8890 	add	a,#0xf9
      0031FD F5 81            [12] 8891 	mov	sp,a
      0031FF D0 01            [24] 8892 	pop	ar1
      003201 D0 04            [24] 8893 	pop	ar4
      003203 D0 05            [24] 8894 	pop	ar5
      003205 D0 06            [24] 8895 	pop	ar6
      003207 D0 07            [24] 8896 	pop	ar7
                                   8897 ;	calc.c:65: printf("% 11ld\t", d);
      003209 C0 07            [24] 8898 	push	ar7
      00320B C0 06            [24] 8899 	push	ar6
      00320D C0 05            [24] 8900 	push	ar5
      00320F C0 04            [24] 8901 	push	ar4
      003211 C0 01            [24] 8902 	push	ar1
      003213 C0 04            [24] 8903 	push	ar4
      003215 C0 05            [24] 8904 	push	ar5
      003217 C0 06            [24] 8905 	push	ar6
      003219 C0 07            [24] 8906 	push	ar7
      00321B 74r07            [12] 8907 	mov	a,#___str_1
      00321D C0 E0            [24] 8908 	push	acc
      00321F 74s00            [12] 8909 	mov	a,#(___str_1 >> 8)
      003221 C0 E0            [24] 8910 	push	acc
      003223 74 80            [12] 8911 	mov	a,#0x80
      003225 C0 E0            [24] 8912 	push	acc
      003227 12r00r00         [24] 8913 	lcall	_printf
      00322A E5 81            [12] 8914 	mov	a,sp
      00322C 24 F9            [12] 8915 	add	a,#0xf9
      00322E F5 81            [12] 8916 	mov	sp,a
      003230 D0 01            [24] 8917 	pop	ar1
      003232 D0 04            [24] 8918 	pop	ar4
      003234 D0 05            [24] 8919 	pop	ar5
      003236 D0 06            [24] 8920 	pop	ar6
      003238 D0 07            [24] 8921 	pop	ar7
                                   8922 ;	calc.c:66: printf("%011lo\t", d);
      00323A C0 07            [24] 8923 	push	ar7
      00323C C0 06            [24] 8924 	push	ar6
      00323E C0 05            [24] 8925 	push	ar5
      003240 C0 04            [24] 8926 	push	ar4
      003242 C0 01            [24] 8927 	push	ar1
      003244 C0 04            [24] 8928 	push	ar4
      003246 C0 05            [24] 8929 	push	ar5
      003248 C0 06            [24] 8930 	push	ar6
      00324A C0 07            [24] 8931 	push	ar7
      00324C 74r0F            [12] 8932 	mov	a,#___str_2
      00324E C0 E0            [24] 8933 	push	acc
      003250 74s00            [12] 8934 	mov	a,#(___str_2 >> 8)
      003252 C0 E0            [24] 8935 	push	acc
      003254 74 80            [12] 8936 	mov	a,#0x80
      003256 C0 E0            [24] 8937 	push	acc
      003258 12r00r00         [24] 8938 	lcall	_printf
      00325B E5 81            [12] 8939 	mov	a,sp
      00325D 24 F9            [12] 8940 	add	a,#0xf9
      00325F F5 81            [12] 8941 	mov	sp,a
      003261 D0 01            [24] 8942 	pop	ar1
      003263 D0 04            [24] 8943 	pop	ar4
      003265 D0 05            [24] 8944 	pop	ar5
      003267 D0 06            [24] 8945 	pop	ar6
      003269 D0 07            [24] 8946 	pop	ar7
                                   8947 ;	calc.c:67: printbin(d);
      00326B E5*00            [12] 8948 	mov	a,_bp
      00326D 24 16            [12] 8949 	add	a,#0x16
      00326F F8               [12] 8950 	mov	r0,a
      003270 A6 04            [24] 8951 	mov	@r0,ar4
      003272 08               [12] 8952 	inc	r0
      003273 A6 05            [24] 8953 	mov	@r0,ar5
      003275 08               [12] 8954 	inc	r0
      003276 A6 06            [24] 8955 	mov	@r0,ar6
      003278 08               [12] 8956 	inc	r0
      003279 A6 07            [24] 8957 	mov	@r0,ar7
                                   8958 ;	calc.c:57: for (mask = 0x80000000lu; mask; mask >>= 1)
      00327B E5*00            [12] 8959 	mov	a,_bp
      00327D 24 1A            [12] 8960 	add	a,#0x1a
      00327F F8               [12] 8961 	mov	r0,a
      003280 E4               [12] 8962 	clr	a
      003281 F6               [12] 8963 	mov	@r0,a
      003282 08               [12] 8964 	inc	r0
      003283 F6               [12] 8965 	mov	@r0,a
      003284 08               [12] 8966 	inc	r0
      003285 F6               [12] 8967 	mov	@r0,a
      003286 08               [12] 8968 	inc	r0
      003287 76 80            [12] 8969 	mov	@r0,#0x80
      003289                       8970 00151$:
                                   8971 ;	calc.c:58: (void)putchar((d & mask) ? (int)'1' : (int)'0');
      003289 C0 01            [24] 8972 	push	ar1
      00328B E5*00            [12] 8973 	mov	a,_bp
      00328D 24 16            [12] 8974 	add	a,#0x16
      00328F F8               [12] 8975 	mov	r0,a
      003290 86 04            [24] 8976 	mov	ar4,@r0
      003292 08               [12] 8977 	inc	r0
      003293 86 05            [24] 8978 	mov	ar5,@r0
      003295 08               [12] 8979 	inc	r0
      003296 86 06            [24] 8980 	mov	ar6,@r0
      003298 08               [12] 8981 	inc	r0
      003299 86 07            [24] 8982 	mov	ar7,@r0
      00329B E5*00            [12] 8983 	mov	a,_bp
      00329D 24 1A            [12] 8984 	add	a,#0x1a
      00329F F8               [12] 8985 	mov	r0,a
      0032A0 E6               [12] 8986 	mov	a,@r0
      0032A1 52 04            [12] 8987 	anl	ar4,a
      0032A3 08               [12] 8988 	inc	r0
      0032A4 E6               [12] 8989 	mov	a,@r0
      0032A5 52 05            [12] 8990 	anl	ar5,a
      0032A7 08               [12] 8991 	inc	r0
      0032A8 E6               [12] 8992 	mov	a,@r0
      0032A9 52 06            [12] 8993 	anl	ar6,a
      0032AB 08               [12] 8994 	inc	r0
      0032AC E6               [12] 8995 	mov	a,@r0
      0032AD 52 07            [12] 8996 	anl	ar7,a
      0032AF D0 01            [24] 8997 	pop	ar1
      0032B1 EC               [12] 8998 	mov	a,r4
      0032B2 4D               [12] 8999 	orl	a,r5
      0032B3 4E               [12] 9000 	orl	a,r6
      0032B4 4F               [12] 9001 	orl	a,r7
      0032B5 60 06            [24] 9002 	jz	00172$
      0032B7 7E 31            [12] 9003 	mov	r6,#0x31
      0032B9 7F 00            [12] 9004 	mov	r7,#0x00
      0032BB 80 04            [24] 9005 	sjmp	00173$
      0032BD                       9006 00172$:
      0032BD 7E 30            [12] 9007 	mov	r6,#0x30
      0032BF 7F 00            [12] 9008 	mov	r7,#0x00
      0032C1                       9009 00173$:
      0032C1 8E 82            [24] 9010 	mov	dpl,r6
      0032C3 8F 83            [24] 9011 	mov	dph,r7
      0032C5 12r00r00         [24] 9012 	lcall	_putchar
                                   9013 ;	calc.c:57: for (mask = 0x80000000lu; mask; mask >>= 1)
      0032C8 E5*00            [12] 9014 	mov	a,_bp
      0032CA 24 1A            [12] 9015 	add	a,#0x1a
      0032CC F8               [12] 9016 	mov	r0,a
      0032CD 08               [12] 9017 	inc	r0
      0032CE 08               [12] 9018 	inc	r0
      0032CF 08               [12] 9019 	inc	r0
      0032D0 E6               [12] 9020 	mov	a,@r0
      0032D1 C3               [12] 9021 	clr	c
      0032D2 13               [12] 9022 	rrc	a
      0032D3 F6               [12] 9023 	mov	@r0,a
      0032D4 18               [12] 9024 	dec	r0
      0032D5 E6               [12] 9025 	mov	a,@r0
      0032D6 13               [12] 9026 	rrc	a
      0032D7 F6               [12] 9027 	mov	@r0,a
      0032D8 18               [12] 9028 	dec	r0
      0032D9 E6               [12] 9029 	mov	a,@r0
      0032DA 13               [12] 9030 	rrc	a
      0032DB F6               [12] 9031 	mov	@r0,a
      0032DC 18               [12] 9032 	dec	r0
      0032DD E6               [12] 9033 	mov	a,@r0
      0032DE 13               [12] 9034 	rrc	a
      0032DF F6               [12] 9035 	mov	@r0,a
      0032E0 E5*00            [12] 9036 	mov	a,_bp
      0032E2 24 1A            [12] 9037 	add	a,#0x1a
      0032E4 F8               [12] 9038 	mov	r0,a
      0032E5 E6               [12] 9039 	mov	a,@r0
      0032E6 08               [12] 9040 	inc	r0
      0032E7 46               [12] 9041 	orl	a,@r0
      0032E8 08               [12] 9042 	inc	r0
      0032E9 46               [12] 9043 	orl	a,@r0
      0032EA 08               [12] 9044 	inc	r0
      0032EB 46               [12] 9045 	orl	a,@r0
      0032EC 70 9B            [24] 9046 	jnz	00151$
                                   9047 ;	calc.c:409: if (n > 1) printall(vals[0]);
      0032EE                       9048 00106$:
                                   9049 ;	calc.c:411: n = stack_peek2(ctx->ss, vals);
      0032EE 89 07            [24] 9050 	mov	ar7,r1
      0032F0 7E 00            [12] 9051 	mov	r6,#0x00
      0032F2 7D 40            [12] 9052 	mov	r5,#0x40
      0032F4 A8*00            [24] 9053 	mov	r0,_bp
      0032F6 08               [12] 9054 	inc	r0
      0032F7 86 82            [24] 9055 	mov	dpl,@r0
      0032F9 08               [12] 9056 	inc	r0
      0032FA 86 83            [24] 9057 	mov	dph,@r0
      0032FC 08               [12] 9058 	inc	r0
      0032FD 86 F0            [24] 9059 	mov	b,@r0
      0032FF 12r00r00         [24] 9060 	lcall	__gptrget
      003302 FA               [12] 9061 	mov	r2,a
      003303 A3               [24] 9062 	inc	dptr
      003304 12r00r00         [24] 9063 	lcall	__gptrget
      003307 FB               [12] 9064 	mov	r3,a
      003308 A3               [24] 9065 	inc	dptr
      003309 12r00r00         [24] 9066 	lcall	__gptrget
      00330C FC               [12] 9067 	mov	r4,a
      00330D C0 01            [24] 9068 	push	ar1
      00330F C0 07            [24] 9069 	push	ar7
      003311 C0 06            [24] 9070 	push	ar6
      003313 C0 05            [24] 9071 	push	ar5
      003315 8A 82            [24] 9072 	mov	dpl,r2
      003317 8B 83            [24] 9073 	mov	dph,r3
      003319 8C F0            [24] 9074 	mov	b,r4
      00331B 12r00r00         [24] 9075 	lcall	_stack_peek2
      00331E AE 82            [24] 9076 	mov	r6,dpl
      003320 AF 83            [24] 9077 	mov	r7,dph
      003322 15 81            [12] 9078 	dec	sp
      003324 15 81            [12] 9079 	dec	sp
      003326 15 81            [12] 9080 	dec	sp
      003328 D0 01            [24] 9081 	pop	ar1
      00332A E5*00            [12] 9082 	mov	a,_bp
      00332C 24 09            [12] 9083 	add	a,#0x09
      00332E F8               [12] 9084 	mov	r0,a
      00332F A6 06            [24] 9085 	mov	@r0,ar6
      003331 08               [12] 9086 	inc	r0
      003332 A6 07            [24] 9087 	mov	@r0,ar7
                                   9088 ;	calc.c:412: printstr("\r\nSSTOP1\t");
      003334 7BrFE            [12] 9089 	mov	r3,#___str_19
      003336 7Cs00            [12] 9090 	mov	r4,#(___str_19 >> 8)
      003338 7D 80            [12] 9091 	mov	r5,#0x80
                                   9092 ;	calc.c:51: return;
      00333A                       9093 00154$:
                                   9094 ;	calc.c:49: for (; *s; s++) putchar(*s);
      00333A 8B 82            [24] 9095 	mov	dpl,r3
      00333C 8C 83            [24] 9096 	mov	dph,r4
      00333E 8D F0            [24] 9097 	mov	b,r5
      003340 12r00r00         [24] 9098 	lcall	__gptrget
      003343 FA               [12] 9099 	mov	r2,a
      003344 60 10            [24] 9100 	jz	00127$
      003346 7F 00            [12] 9101 	mov	r7,#0x00
      003348 8A 82            [24] 9102 	mov	dpl,r2
      00334A 8F 83            [24] 9103 	mov	dph,r7
      00334C 12r00r00         [24] 9104 	lcall	_putchar
      00334F 0B               [12] 9105 	inc	r3
                                   9106 ;	calc.c:412: printstr("\r\nSSTOP1\t");
      003350 BB 00 E7         [24] 9107 	cjne	r3,#0x00,00154$
      003353 0C               [12] 9108 	inc	r4
      003354 80 E4            [24] 9109 	sjmp	00154$
      003356                       9110 00127$:
                                   9111 ;	calc.c:413: if (n > 0) printall(vals[1]);
      003356 E5*00            [12] 9112 	mov	a,_bp
      003358 24 09            [12] 9113 	add	a,#0x09
      00335A F8               [12] 9114 	mov	r0,a
      00335B C3               [12] 9115 	clr	c
      00335C E4               [12] 9116 	clr	a
      00335D 96               [12] 9117 	subb	a,@r0
      00335E 74 80            [12] 9118 	mov	a,#(0x00 ^ 0x80)
      003360 08               [12] 9119 	inc	r0
      003361 86 F0            [24] 9120 	mov	b,@r0
      003363 63 F0 80         [24] 9121 	xrl	b,#0x80
      003366 95 F0            [12] 9122 	subb	a,b
      003368 40 03            [24] 9123 	jc	00336$
      00336A 02r34r92         [24] 9124 	ljmp	00108$
      00336D                       9125 00336$:
      00336D 74 04            [12] 9126 	mov	a,#0x04
      00336F 29               [12] 9127 	add	a,r1
      003370 F8               [12] 9128 	mov	r0,a
      003371 86 02            [24] 9129 	mov	ar2,@r0
      003373 08               [12] 9130 	inc	r0
      003374 86 03            [24] 9131 	mov	ar3,@r0
      003376 08               [12] 9132 	inc	r0
      003377 86 04            [24] 9133 	mov	ar4,@r0
      003379 08               [12] 9134 	inc	r0
      00337A 86 05            [24] 9135 	mov	ar5,@r0
                                   9136 ;	calc.c:64: printf("%08lx\t", d);
      00337C C0 05            [24] 9137 	push	ar5
      00337E C0 04            [24] 9138 	push	ar4
      003380 C0 03            [24] 9139 	push	ar3
      003382 C0 02            [24] 9140 	push	ar2
      003384 C0 01            [24] 9141 	push	ar1
      003386 C0 02            [24] 9142 	push	ar2
      003388 C0 03            [24] 9143 	push	ar3
      00338A C0 04            [24] 9144 	push	ar4
      00338C C0 05            [24] 9145 	push	ar5
      00338E 74r00            [12] 9146 	mov	a,#___str_0
      003390 C0 E0            [24] 9147 	push	acc
      003392 74s00            [12] 9148 	mov	a,#(___str_0 >> 8)
      003394 C0 E0            [24] 9149 	push	acc
      003396 74 80            [12] 9150 	mov	a,#0x80
      003398 C0 E0            [24] 9151 	push	acc
      00339A 12r00r00         [24] 9152 	lcall	_printf
      00339D E5 81            [12] 9153 	mov	a,sp
      00339F 24 F9            [12] 9154 	add	a,#0xf9
      0033A1 F5 81            [12] 9155 	mov	sp,a
      0033A3 D0 01            [24] 9156 	pop	ar1
      0033A5 D0 02            [24] 9157 	pop	ar2
      0033A7 D0 03            [24] 9158 	pop	ar3
      0033A9 D0 04            [24] 9159 	pop	ar4
      0033AB D0 05            [24] 9160 	pop	ar5
                                   9161 ;	calc.c:65: printf("% 11ld\t", d);
      0033AD C0 05            [24] 9162 	push	ar5
      0033AF C0 04            [24] 9163 	push	ar4
      0033B1 C0 03            [24] 9164 	push	ar3
      0033B3 C0 02            [24] 9165 	push	ar2
      0033B5 C0 01            [24] 9166 	push	ar1
      0033B7 C0 02            [24] 9167 	push	ar2
      0033B9 C0 03            [24] 9168 	push	ar3
      0033BB C0 04            [24] 9169 	push	ar4
      0033BD C0 05            [24] 9170 	push	ar5
      0033BF 74r07            [12] 9171 	mov	a,#___str_1
      0033C1 C0 E0            [24] 9172 	push	acc
      0033C3 74s00            [12] 9173 	mov	a,#(___str_1 >> 8)
      0033C5 C0 E0            [24] 9174 	push	acc
      0033C7 74 80            [12] 9175 	mov	a,#0x80
      0033C9 C0 E0            [24] 9176 	push	acc
      0033CB 12r00r00         [24] 9177 	lcall	_printf
      0033CE E5 81            [12] 9178 	mov	a,sp
      0033D0 24 F9            [12] 9179 	add	a,#0xf9
      0033D2 F5 81            [12] 9180 	mov	sp,a
      0033D4 D0 01            [24] 9181 	pop	ar1
      0033D6 D0 02            [24] 9182 	pop	ar2
      0033D8 D0 03            [24] 9183 	pop	ar3
      0033DA D0 04            [24] 9184 	pop	ar4
      0033DC D0 05            [24] 9185 	pop	ar5
                                   9186 ;	calc.c:66: printf("%011lo\t", d);
      0033DE C0 05            [24] 9187 	push	ar5
      0033E0 C0 04            [24] 9188 	push	ar4
      0033E2 C0 03            [24] 9189 	push	ar3
      0033E4 C0 02            [24] 9190 	push	ar2
      0033E6 C0 01            [24] 9191 	push	ar1
      0033E8 C0 02            [24] 9192 	push	ar2
      0033EA C0 03            [24] 9193 	push	ar3
      0033EC C0 04            [24] 9194 	push	ar4
      0033EE C0 05            [24] 9195 	push	ar5
      0033F0 74r0F            [12] 9196 	mov	a,#___str_2
      0033F2 C0 E0            [24] 9197 	push	acc
      0033F4 74s00            [12] 9198 	mov	a,#(___str_2 >> 8)
      0033F6 C0 E0            [24] 9199 	push	acc
      0033F8 74 80            [12] 9200 	mov	a,#0x80
      0033FA C0 E0            [24] 9201 	push	acc
      0033FC 12r00r00         [24] 9202 	lcall	_printf
      0033FF E5 81            [12] 9203 	mov	a,sp
      003401 24 F9            [12] 9204 	add	a,#0xf9
      003403 F5 81            [12] 9205 	mov	sp,a
      003405 D0 01            [24] 9206 	pop	ar1
      003407 D0 02            [24] 9207 	pop	ar2
      003409 D0 03            [24] 9208 	pop	ar3
      00340B D0 04            [24] 9209 	pop	ar4
      00340D D0 05            [24] 9210 	pop	ar5
                                   9211 ;	calc.c:67: printbin(d);
      00340F E5*00            [12] 9212 	mov	a,_bp
      003411 24 16            [12] 9213 	add	a,#0x16
      003413 F8               [12] 9214 	mov	r0,a
      003414 A6 02            [24] 9215 	mov	@r0,ar2
      003416 08               [12] 9216 	inc	r0
      003417 A6 03            [24] 9217 	mov	@r0,ar3
      003419 08               [12] 9218 	inc	r0
      00341A A6 04            [24] 9219 	mov	@r0,ar4
      00341C 08               [12] 9220 	inc	r0
      00341D A6 05            [24] 9221 	mov	@r0,ar5
                                   9222 ;	calc.c:57: for (mask = 0x80000000lu; mask; mask >>= 1)
      00341F E5*00            [12] 9223 	mov	a,_bp
      003421 24 1A            [12] 9224 	add	a,#0x1a
      003423 F8               [12] 9225 	mov	r0,a
      003424 E4               [12] 9226 	clr	a
      003425 F6               [12] 9227 	mov	@r0,a
      003426 08               [12] 9228 	inc	r0
      003427 F6               [12] 9229 	mov	@r0,a
      003428 08               [12] 9230 	inc	r0
      003429 F6               [12] 9231 	mov	@r0,a
      00342A 08               [12] 9232 	inc	r0
      00342B 76 80            [12] 9233 	mov	@r0,#0x80
      00342D                       9234 00156$:
                                   9235 ;	calc.c:58: (void)putchar((d & mask) ? (int)'1' : (int)'0');
      00342D C0 01            [24] 9236 	push	ar1
      00342F E5*00            [12] 9237 	mov	a,_bp
      003431 24 16            [12] 9238 	add	a,#0x16
      003433 F8               [12] 9239 	mov	r0,a
      003434 86 02            [24] 9240 	mov	ar2,@r0
      003436 08               [12] 9241 	inc	r0
      003437 86 03            [24] 9242 	mov	ar3,@r0
      003439 08               [12] 9243 	inc	r0
      00343A 86 05            [24] 9244 	mov	ar5,@r0
      00343C 08               [12] 9245 	inc	r0
      00343D 86 07            [24] 9246 	mov	ar7,@r0
      00343F E5*00            [12] 9247 	mov	a,_bp
      003441 24 1A            [12] 9248 	add	a,#0x1a
      003443 F8               [12] 9249 	mov	r0,a
      003444 E6               [12] 9250 	mov	a,@r0
      003445 52 02            [12] 9251 	anl	ar2,a
      003447 08               [12] 9252 	inc	r0
      003448 E6               [12] 9253 	mov	a,@r0
      003449 52 03            [12] 9254 	anl	ar3,a
      00344B 08               [12] 9255 	inc	r0
      00344C E6               [12] 9256 	mov	a,@r0
      00344D 52 05            [12] 9257 	anl	ar5,a
      00344F 08               [12] 9258 	inc	r0
      003450 E6               [12] 9259 	mov	a,@r0
      003451 52 07            [12] 9260 	anl	ar7,a
      003453 D0 01            [24] 9261 	pop	ar1
      003455 EA               [12] 9262 	mov	a,r2
      003456 4B               [12] 9263 	orl	a,r3
      003457 4D               [12] 9264 	orl	a,r5
      003458 4F               [12] 9265 	orl	a,r7
      003459 60 06            [24] 9266 	jz	00174$
      00345B 7E 31            [12] 9267 	mov	r6,#0x31
      00345D 7F 00            [12] 9268 	mov	r7,#0x00
      00345F 80 04            [24] 9269 	sjmp	00175$
      003461                       9270 00174$:
      003461 7E 30            [12] 9271 	mov	r6,#0x30
      003463 7F 00            [12] 9272 	mov	r7,#0x00
      003465                       9273 00175$:
      003465 8E 82            [24] 9274 	mov	dpl,r6
      003467 8F 83            [24] 9275 	mov	dph,r7
      003469 12r00r00         [24] 9276 	lcall	_putchar
                                   9277 ;	calc.c:57: for (mask = 0x80000000lu; mask; mask >>= 1)
      00346C E5*00            [12] 9278 	mov	a,_bp
      00346E 24 1A            [12] 9279 	add	a,#0x1a
      003470 F8               [12] 9280 	mov	r0,a
      003471 08               [12] 9281 	inc	r0
      003472 08               [12] 9282 	inc	r0
      003473 08               [12] 9283 	inc	r0
      003474 E6               [12] 9284 	mov	a,@r0
      003475 C3               [12] 9285 	clr	c
      003476 13               [12] 9286 	rrc	a
      003477 F6               [12] 9287 	mov	@r0,a
      003478 18               [12] 9288 	dec	r0
      003479 E6               [12] 9289 	mov	a,@r0
      00347A 13               [12] 9290 	rrc	a
      00347B F6               [12] 9291 	mov	@r0,a
      00347C 18               [12] 9292 	dec	r0
      00347D E6               [12] 9293 	mov	a,@r0
      00347E 13               [12] 9294 	rrc	a
      00347F F6               [12] 9295 	mov	@r0,a
      003480 18               [12] 9296 	dec	r0
      003481 E6               [12] 9297 	mov	a,@r0
      003482 13               [12] 9298 	rrc	a
      003483 F6               [12] 9299 	mov	@r0,a
      003484 E5*00            [12] 9300 	mov	a,_bp
      003486 24 1A            [12] 9301 	add	a,#0x1a
      003488 F8               [12] 9302 	mov	r0,a
      003489 E6               [12] 9303 	mov	a,@r0
      00348A 08               [12] 9304 	inc	r0
      00348B 46               [12] 9305 	orl	a,@r0
      00348C 08               [12] 9306 	inc	r0
      00348D 46               [12] 9307 	orl	a,@r0
      00348E 08               [12] 9308 	inc	r0
      00348F 46               [12] 9309 	orl	a,@r0
      003490 70 9B            [24] 9310 	jnz	00156$
                                   9311 ;	calc.c:413: if (n > 0) printall(vals[1]);
      003492                       9312 00108$:
                                   9313 ;	calc.c:414: printstr("\r\nSSTOP0\t");
      003492 7Dr08            [12] 9314 	mov	r5,#___str_20
      003494 7Es01            [12] 9315 	mov	r6,#(___str_20 >> 8)
      003496 7F 80            [12] 9316 	mov	r7,#0x80
                                   9317 ;	calc.c:51: return;
      003498                       9318 00159$:
                                   9319 ;	calc.c:49: for (; *s; s++) putchar(*s);
      003498 8D 82            [24] 9320 	mov	dpl,r5
      00349A 8E 83            [24] 9321 	mov	dph,r6
      00349C 8F F0            [24] 9322 	mov	b,r7
      00349E 12r00r00         [24] 9323 	lcall	__gptrget
      0034A1 FC               [12] 9324 	mov	r4,a
      0034A2 60 10            [24] 9325 	jz	00132$
      0034A4 7B 00            [12] 9326 	mov	r3,#0x00
      0034A6 8C 82            [24] 9327 	mov	dpl,r4
      0034A8 8B 83            [24] 9328 	mov	dph,r3
      0034AA 12r00r00         [24] 9329 	lcall	_putchar
      0034AD 0D               [12] 9330 	inc	r5
                                   9331 ;	calc.c:414: printstr("\r\nSSTOP0\t");
      0034AE BD 00 E7         [24] 9332 	cjne	r5,#0x00,00159$
      0034B1 0E               [12] 9333 	inc	r6
      0034B2 80 E4            [24] 9334 	sjmp	00159$
      0034B4                       9335 00132$:
                                   9336 ;	calc.c:415: if (n > 1) printall(vals[0]);
      0034B4 E5*00            [12] 9337 	mov	a,_bp
      0034B6 24 09            [12] 9338 	add	a,#0x09
      0034B8 F8               [12] 9339 	mov	r0,a
      0034B9 C3               [12] 9340 	clr	c
      0034BA 74 01            [12] 9341 	mov	a,#0x01
      0034BC 96               [12] 9342 	subb	a,@r0
      0034BD 74 80            [12] 9343 	mov	a,#(0x00 ^ 0x80)
      0034BF 08               [12] 9344 	inc	r0
      0034C0 86 F0            [24] 9345 	mov	b,@r0
      0034C2 63 F0 80         [24] 9346 	xrl	b,#0x80
      0034C5 95 F0            [12] 9347 	subb	a,b
      0034C7 40 03            [24] 9348 	jc	00341$
      0034C9 02r35rDD         [24] 9349 	ljmp	00110$
      0034CC                       9350 00341$:
      0034CC 87 04            [24] 9351 	mov	ar4,@r1
      0034CE 09               [12] 9352 	inc	r1
      0034CF 87 05            [24] 9353 	mov	ar5,@r1
      0034D1 09               [12] 9354 	inc	r1
      0034D2 87 06            [24] 9355 	mov	ar6,@r1
      0034D4 09               [12] 9356 	inc	r1
      0034D5 87 07            [24] 9357 	mov	ar7,@r1
                                   9358 ;	calc.c:64: printf("%08lx\t", d);
      0034D7 C0 07            [24] 9359 	push	ar7
      0034D9 C0 06            [24] 9360 	push	ar6
      0034DB C0 05            [24] 9361 	push	ar5
      0034DD C0 04            [24] 9362 	push	ar4
      0034DF C0 04            [24] 9363 	push	ar4
      0034E1 C0 05            [24] 9364 	push	ar5
      0034E3 C0 06            [24] 9365 	push	ar6
      0034E5 C0 07            [24] 9366 	push	ar7
      0034E7 74r00            [12] 9367 	mov	a,#___str_0
      0034E9 C0 E0            [24] 9368 	push	acc
      0034EB 74s00            [12] 9369 	mov	a,#(___str_0 >> 8)
      0034ED C0 E0            [24] 9370 	push	acc
      0034EF 74 80            [12] 9371 	mov	a,#0x80
      0034F1 C0 E0            [24] 9372 	push	acc
      0034F3 12r00r00         [24] 9373 	lcall	_printf
      0034F6 E5 81            [12] 9374 	mov	a,sp
      0034F8 24 F9            [12] 9375 	add	a,#0xf9
      0034FA F5 81            [12] 9376 	mov	sp,a
      0034FC D0 04            [24] 9377 	pop	ar4
      0034FE D0 05            [24] 9378 	pop	ar5
      003500 D0 06            [24] 9379 	pop	ar6
      003502 D0 07            [24] 9380 	pop	ar7
                                   9381 ;	calc.c:65: printf("% 11ld\t", d);
      003504 C0 07            [24] 9382 	push	ar7
      003506 C0 06            [24] 9383 	push	ar6
      003508 C0 05            [24] 9384 	push	ar5
      00350A C0 04            [24] 9385 	push	ar4
      00350C C0 04            [24] 9386 	push	ar4
      00350E C0 05            [24] 9387 	push	ar5
      003510 C0 06            [24] 9388 	push	ar6
      003512 C0 07            [24] 9389 	push	ar7
      003514 74r07            [12] 9390 	mov	a,#___str_1
      003516 C0 E0            [24] 9391 	push	acc
      003518 74s00            [12] 9392 	mov	a,#(___str_1 >> 8)
      00351A C0 E0            [24] 9393 	push	acc
      00351C 74 80            [12] 9394 	mov	a,#0x80
      00351E C0 E0            [24] 9395 	push	acc
      003520 12r00r00         [24] 9396 	lcall	_printf
      003523 E5 81            [12] 9397 	mov	a,sp
      003525 24 F9            [12] 9398 	add	a,#0xf9
      003527 F5 81            [12] 9399 	mov	sp,a
      003529 D0 04            [24] 9400 	pop	ar4
      00352B D0 05            [24] 9401 	pop	ar5
      00352D D0 06            [24] 9402 	pop	ar6
      00352F D0 07            [24] 9403 	pop	ar7
                                   9404 ;	calc.c:66: printf("%011lo\t", d);
      003531 C0 07            [24] 9405 	push	ar7
      003533 C0 06            [24] 9406 	push	ar6
      003535 C0 05            [24] 9407 	push	ar5
      003537 C0 04            [24] 9408 	push	ar4
      003539 C0 04            [24] 9409 	push	ar4
      00353B C0 05            [24] 9410 	push	ar5
      00353D C0 06            [24] 9411 	push	ar6
      00353F C0 07            [24] 9412 	push	ar7
      003541 74r0F            [12] 9413 	mov	a,#___str_2
      003543 C0 E0            [24] 9414 	push	acc
      003545 74s00            [12] 9415 	mov	a,#(___str_2 >> 8)
      003547 C0 E0            [24] 9416 	push	acc
      003549 74 80            [12] 9417 	mov	a,#0x80
      00354B C0 E0            [24] 9418 	push	acc
      00354D 12r00r00         [24] 9419 	lcall	_printf
      003550 E5 81            [12] 9420 	mov	a,sp
      003552 24 F9            [12] 9421 	add	a,#0xf9
      003554 F5 81            [12] 9422 	mov	sp,a
      003556 D0 04            [24] 9423 	pop	ar4
      003558 D0 05            [24] 9424 	pop	ar5
      00355A D0 06            [24] 9425 	pop	ar6
      00355C D0 07            [24] 9426 	pop	ar7
                                   9427 ;	calc.c:67: printbin(d);
      00355E E5*00            [12] 9428 	mov	a,_bp
      003560 24 16            [12] 9429 	add	a,#0x16
      003562 F8               [12] 9430 	mov	r0,a
      003563 A6 04            [24] 9431 	mov	@r0,ar4
      003565 08               [12] 9432 	inc	r0
      003566 A6 05            [24] 9433 	mov	@r0,ar5
      003568 08               [12] 9434 	inc	r0
      003569 A6 06            [24] 9435 	mov	@r0,ar6
      00356B 08               [12] 9436 	inc	r0
      00356C A6 07            [24] 9437 	mov	@r0,ar7
                                   9438 ;	calc.c:57: for (mask = 0x80000000lu; mask; mask >>= 1)
      00356E E5*00            [12] 9439 	mov	a,_bp
      003570 24 1A            [12] 9440 	add	a,#0x1a
      003572 F8               [12] 9441 	mov	r0,a
      003573 E4               [12] 9442 	clr	a
      003574 F6               [12] 9443 	mov	@r0,a
      003575 08               [12] 9444 	inc	r0
      003576 F6               [12] 9445 	mov	@r0,a
      003577 08               [12] 9446 	inc	r0
      003578 F6               [12] 9447 	mov	@r0,a
      003579 08               [12] 9448 	inc	r0
      00357A 76 80            [12] 9449 	mov	@r0,#0x80
      00357C                       9450 00161$:
                                   9451 ;	calc.c:58: (void)putchar((d & mask) ? (int)'1' : (int)'0');
      00357C E5*00            [12] 9452 	mov	a,_bp
      00357E 24 16            [12] 9453 	add	a,#0x16
      003580 F8               [12] 9454 	mov	r0,a
      003581 86 04            [24] 9455 	mov	ar4,@r0
      003583 08               [12] 9456 	inc	r0
      003584 86 05            [24] 9457 	mov	ar5,@r0
      003586 08               [12] 9458 	inc	r0
      003587 86 06            [24] 9459 	mov	ar6,@r0
      003589 08               [12] 9460 	inc	r0
      00358A 86 07            [24] 9461 	mov	ar7,@r0
      00358C E5*00            [12] 9462 	mov	a,_bp
      00358E 24 1A            [12] 9463 	add	a,#0x1a
      003590 F8               [12] 9464 	mov	r0,a
      003591 E6               [12] 9465 	mov	a,@r0
      003592 52 04            [12] 9466 	anl	ar4,a
      003594 08               [12] 9467 	inc	r0
      003595 E6               [12] 9468 	mov	a,@r0
      003596 52 05            [12] 9469 	anl	ar5,a
      003598 08               [12] 9470 	inc	r0
      003599 E6               [12] 9471 	mov	a,@r0
      00359A 52 06            [12] 9472 	anl	ar6,a
      00359C 08               [12] 9473 	inc	r0
      00359D E6               [12] 9474 	mov	a,@r0
      00359E 52 07            [12] 9475 	anl	ar7,a
      0035A0 EC               [12] 9476 	mov	a,r4
      0035A1 4D               [12] 9477 	orl	a,r5
      0035A2 4E               [12] 9478 	orl	a,r6
      0035A3 4F               [12] 9479 	orl	a,r7
      0035A4 60 06            [24] 9480 	jz	00176$
      0035A6 7E 31            [12] 9481 	mov	r6,#0x31
      0035A8 7F 00            [12] 9482 	mov	r7,#0x00
      0035AA 80 04            [24] 9483 	sjmp	00177$
      0035AC                       9484 00176$:
      0035AC 7E 30            [12] 9485 	mov	r6,#0x30
      0035AE 7F 00            [12] 9486 	mov	r7,#0x00
      0035B0                       9487 00177$:
      0035B0 8E 82            [24] 9488 	mov	dpl,r6
      0035B2 8F 83            [24] 9489 	mov	dph,r7
      0035B4 12r00r00         [24] 9490 	lcall	_putchar
                                   9491 ;	calc.c:57: for (mask = 0x80000000lu; mask; mask >>= 1)
      0035B7 E5*00            [12] 9492 	mov	a,_bp
      0035B9 24 1A            [12] 9493 	add	a,#0x1a
      0035BB F8               [12] 9494 	mov	r0,a
      0035BC 08               [12] 9495 	inc	r0
      0035BD 08               [12] 9496 	inc	r0
      0035BE 08               [12] 9497 	inc	r0
      0035BF E6               [12] 9498 	mov	a,@r0
      0035C0 C3               [12] 9499 	clr	c
      0035C1 13               [12] 9500 	rrc	a
      0035C2 F6               [12] 9501 	mov	@r0,a
      0035C3 18               [12] 9502 	dec	r0
      0035C4 E6               [12] 9503 	mov	a,@r0
      0035C5 13               [12] 9504 	rrc	a
      0035C6 F6               [12] 9505 	mov	@r0,a
      0035C7 18               [12] 9506 	dec	r0
      0035C8 E6               [12] 9507 	mov	a,@r0
      0035C9 13               [12] 9508 	rrc	a
      0035CA F6               [12] 9509 	mov	@r0,a
      0035CB 18               [12] 9510 	dec	r0
      0035CC E6               [12] 9511 	mov	a,@r0
      0035CD 13               [12] 9512 	rrc	a
      0035CE F6               [12] 9513 	mov	@r0,a
      0035CF E5*00            [12] 9514 	mov	a,_bp
      0035D1 24 1A            [12] 9515 	add	a,#0x1a
      0035D3 F8               [12] 9516 	mov	r0,a
      0035D4 E6               [12] 9517 	mov	a,@r0
      0035D5 08               [12] 9518 	inc	r0
      0035D6 46               [12] 9519 	orl	a,@r0
      0035D7 08               [12] 9520 	inc	r0
      0035D8 46               [12] 9521 	orl	a,@r0
      0035D9 08               [12] 9522 	inc	r0
      0035DA 46               [12] 9523 	orl	a,@r0
      0035DB 70 9F            [24] 9524 	jnz	00161$
                                   9525 ;	calc.c:415: if (n > 1) printall(vals[0]);
      0035DD                       9526 00110$:
                                   9527 ;	calc.c:416: printstr("\r\n");
      0035DD 7Dr17            [12] 9528 	mov	r5,#___str_3
      0035DF 7Es00            [12] 9529 	mov	r6,#(___str_3 >> 8)
      0035E1 7F 80            [12] 9530 	mov	r7,#0x80
                                   9531 ;	calc.c:51: return;
      0035E3                       9532 00164$:
                                   9533 ;	calc.c:49: for (; *s; s++) putchar(*s);
      0035E3 8D 82            [24] 9534 	mov	dpl,r5
      0035E5 8E 83            [24] 9535 	mov	dph,r6
      0035E7 8F F0            [24] 9536 	mov	b,r7
      0035E9 12r00r00         [24] 9537 	lcall	__gptrget
      0035EC FC               [12] 9538 	mov	r4,a
      0035ED 60 10            [24] 9539 	jz	00137$
      0035EF 7B 00            [12] 9540 	mov	r3,#0x00
      0035F1 8C 82            [24] 9541 	mov	dpl,r4
      0035F3 8B 83            [24] 9542 	mov	dph,r3
      0035F5 12r00r00         [24] 9543 	lcall	_putchar
      0035F8 0D               [12] 9544 	inc	r5
                                   9545 ;	calc.c:416: printstr("\r\n");
      0035F9 BD 00 E7         [24] 9546 	cjne	r5,#0x00,00164$
      0035FC 0E               [12] 9547 	inc	r6
      0035FD 80 E4            [24] 9548 	sjmp	00164$
      0035FF                       9549 00137$:
                                   9550 ;	calc.c:418: return 1;
      0035FF 90 00 01         [24] 9551 	mov	dptr,#0x0001
                                   9552 ;	calc.c:419: }
      003602 85*00 81         [24] 9553 	mov	sp,_bp
      003605 D0*00            [24] 9554 	pop	_bp
      003607 22               [24] 9555 	ret
                                   9556 ;------------------------------------------------------------
                                   9557 ;Allocation info for local variables in function 'help'
                                   9558 ;------------------------------------------------------------
                                   9559 ;delta                     Allocated to stack - _bp -5
                                   9560 ;_ctx                      Allocated to registers 
                                   9561 ;__1310720151              Allocated to registers 
                                   9562 ;s                         Allocated to registers r5 r6 r7 
                                   9563 ;__1310720153              Allocated to registers 
                                   9564 ;s                         Allocated to registers r5 r6 r7 
                                   9565 ;__1310720155              Allocated to registers 
                                   9566 ;s                         Allocated to registers r5 r6 r7 
                                   9567 ;__1310720157              Allocated to registers 
                                   9568 ;s                         Allocated to registers r5 r6 r7 
                                   9569 ;__1310720159              Allocated to registers 
                                   9570 ;s                         Allocated to registers r5 r6 r7 
                                   9571 ;__1310720161              Allocated to registers 
                                   9572 ;s                         Allocated to registers r5 r6 r7 
                                   9573 ;__1310720163              Allocated to registers 
                                   9574 ;s                         Allocated to registers r5 r6 r7 
                                   9575 ;__1310720165              Allocated to registers 
                                   9576 ;s                         Allocated to registers r5 r6 r7 
                                   9577 ;__1310720167              Allocated to registers 
                                   9578 ;s                         Allocated to registers r5 r6 r7 
                                   9579 ;__1310720169              Allocated to registers 
                                   9580 ;s                         Allocated to registers r5 r6 r7 
                                   9581 ;__1310720171              Allocated to registers 
                                   9582 ;s                         Allocated to registers r5 r6 r7 
                                   9583 ;__1310720173              Allocated to registers 
                                   9584 ;s                         Allocated to registers r5 r6 r7 
                                   9585 ;__1310720175              Allocated to registers 
                                   9586 ;s                         Allocated to registers r5 r6 r7 
                                   9587 ;__1310720177              Allocated to registers 
                                   9588 ;s                         Allocated to registers r5 r6 r7 
                                   9589 ;__1310720179              Allocated to registers 
                                   9590 ;s                         Allocated to registers r5 r6 r7 
                                   9591 ;__1310720181              Allocated to registers 
                                   9592 ;s                         Allocated to registers r5 r6 r7 
                                   9593 ;__1310720183              Allocated to registers 
                                   9594 ;s                         Allocated to registers r5 r6 r7 
                                   9595 ;__1310720185              Allocated to registers 
                                   9596 ;s                         Allocated to registers r5 r6 r7 
                                   9597 ;__1310720187              Allocated to registers 
                                   9598 ;s                         Allocated to registers r5 r6 r7 
                                   9599 ;__1310720189              Allocated to registers 
                                   9600 ;s                         Allocated to registers r5 r6 r7 
                                   9601 ;__1310720191              Allocated to registers 
                                   9602 ;s                         Allocated to registers r5 r6 r7 
                                   9603 ;__1310720193              Allocated to registers 
                                   9604 ;s                         Allocated to registers r5 r6 r7 
                                   9605 ;__1310720195              Allocated to registers 
                                   9606 ;s                         Allocated to registers r5 r6 r7 
                                   9607 ;__1310720197              Allocated to registers 
                                   9608 ;s                         Allocated to registers r5 r6 r7 
                                   9609 ;__1310720199              Allocated to registers 
                                   9610 ;s                         Allocated to registers r5 r6 r7 
                                   9611 ;__1310720201              Allocated to registers 
                                   9612 ;s                         Allocated to registers r5 r6 r7 
                                   9613 ;__1310720203              Allocated to registers 
                                   9614 ;s                         Allocated to registers r5 r6 r7 
                                   9615 ;__1310720205              Allocated to registers 
                                   9616 ;s                         Allocated to registers r5 r6 r7 
                                   9617 ;__1310720207              Allocated to registers 
                                   9618 ;s                         Allocated to registers r5 r6 r7 
                                   9619 ;__1310720209              Allocated to registers 
                                   9620 ;s                         Allocated to registers r5 r6 r7 
                                   9621 ;__1310720211              Allocated to registers 
                                   9622 ;s                         Allocated to registers r5 r6 r7 
                                   9623 ;------------------------------------------------------------
                                   9624 ;	calc.c:421: static int help(void *_ctx, delta_t *delta) __reentrant {
                                   9625 ;	-----------------------------------------
                                   9626 ;	 function help
                                   9627 ;	-----------------------------------------
      003608                       9628 _help:
      003608 C0*00            [24] 9629 	push	_bp
      00360A 85 81*00         [24] 9630 	mov	_bp,sp
                                   9631 ;	calc.c:425: printstr("\r\nHhOo\tbase 16 10 8 2\r\n");
      00360D 7Dr12            [12] 9632 	mov	r5,#___str_21
      00360F 7Es01            [12] 9633 	mov	r6,#(___str_21 >> 8)
      003611 7F 80            [12] 9634 	mov	r7,#0x80
                                   9635 ;	calc.c:51: return;
      003613                       9636 00164$:
                                   9637 ;	calc.c:49: for (; *s; s++) putchar(*s);
      003613 8D 82            [24] 9638 	mov	dpl,r5
      003615 8E 83            [24] 9639 	mov	dph,r6
      003617 8F F0            [24] 9640 	mov	b,r7
      003619 12r00r00         [24] 9641 	lcall	__gptrget
      00361C FC               [12] 9642 	mov	r4,a
      00361D 60 10            [24] 9643 	jz	00102$
      00361F 7B 00            [12] 9644 	mov	r3,#0x00
      003621 8C 82            [24] 9645 	mov	dpl,r4
      003623 8B 83            [24] 9646 	mov	dph,r3
      003625 12r00r00         [24] 9647 	lcall	_putchar
      003628 0D               [12] 9648 	inc	r5
                                   9649 ;	calc.c:425: printstr("\r\nHhOo\tbase 16 10 8 2\r\n");
      003629 BD 00 E7         [24] 9650 	cjne	r5,#0x00,00164$
      00362C 0E               [12] 9651 	inc	r6
      00362D 80 E4            [24] 9652 	sjmp	00164$
      00362F                       9653 00102$:
                                   9654 ;	calc.c:426: printstr("p.\tpop top\r\n");
      00362F 7Dr2A            [12] 9655 	mov	r5,#___str_22
      003631 7Es01            [12] 9656 	mov	r6,#(___str_22 >> 8)
      003633 7F 80            [12] 9657 	mov	r7,#0x80
                                   9658 ;	calc.c:51: return;
      003635                       9659 00167$:
                                   9660 ;	calc.c:49: for (; *s; s++) putchar(*s);
      003635 8D 82            [24] 9661 	mov	dpl,r5
      003637 8E 83            [24] 9662 	mov	dph,r6
      003639 8F F0            [24] 9663 	mov	b,r7
      00363B 12r00r00         [24] 9664 	lcall	__gptrget
      00363E FC               [12] 9665 	mov	r4,a
      00363F 60 10            [24] 9666 	jz	00104$
      003641 7B 00            [12] 9667 	mov	r3,#0x00
      003643 8C 82            [24] 9668 	mov	dpl,r4
      003645 8B 83            [24] 9669 	mov	dph,r3
      003647 12r00r00         [24] 9670 	lcall	_putchar
      00364A 0D               [12] 9671 	inc	r5
                                   9672 ;	calc.c:426: printstr("p.\tpop top\r\n");
      00364B BD 00 E7         [24] 9673 	cjne	r5,#0x00,00167$
      00364E 0E               [12] 9674 	inc	r6
      00364F 80 E4            [24] 9675 	sjmp	00167$
      003651                       9676 00104$:
                                   9677 ;	calc.c:427: printstr("P\tpop stack\r\n");
      003651 7Dr37            [12] 9678 	mov	r5,#___str_23
      003653 7Es01            [12] 9679 	mov	r6,#(___str_23 >> 8)
      003655 7F 80            [12] 9680 	mov	r7,#0x80
                                   9681 ;	calc.c:51: return;
      003657                       9682 00170$:
                                   9683 ;	calc.c:49: for (; *s; s++) putchar(*s);
      003657 8D 82            [24] 9684 	mov	dpl,r5
      003659 8E 83            [24] 9685 	mov	dph,r6
      00365B 8F F0            [24] 9686 	mov	b,r7
      00365D 12r00r00         [24] 9687 	lcall	__gptrget
      003660 FC               [12] 9688 	mov	r4,a
      003661 60 10            [24] 9689 	jz	00106$
      003663 7B 00            [12] 9690 	mov	r3,#0x00
      003665 8C 82            [24] 9691 	mov	dpl,r4
      003667 8B 83            [24] 9692 	mov	dph,r3
      003669 12r00r00         [24] 9693 	lcall	_putchar
      00366C 0D               [12] 9694 	inc	r5
                                   9695 ;	calc.c:427: printstr("P\tpop stack\r\n");
      00366D BD 00 E7         [24] 9696 	cjne	r5,#0x00,00170$
      003670 0E               [12] 9697 	inc	r6
      003671 80 E4            [24] 9698 	sjmp	00170$
      003673                       9699 00106$:
                                   9700 ;	calc.c:428: printstr("v\tpeek top\r\n");
      003673 7Dr45            [12] 9701 	mov	r5,#___str_24
      003675 7Es01            [12] 9702 	mov	r6,#(___str_24 >> 8)
      003677 7F 80            [12] 9703 	mov	r7,#0x80
                                   9704 ;	calc.c:51: return;
      003679                       9705 00173$:
                                   9706 ;	calc.c:49: for (; *s; s++) putchar(*s);
      003679 8D 82            [24] 9707 	mov	dpl,r5
      00367B 8E 83            [24] 9708 	mov	dph,r6
      00367D 8F F0            [24] 9709 	mov	b,r7
      00367F 12r00r00         [24] 9710 	lcall	__gptrget
      003682 FC               [12] 9711 	mov	r4,a
      003683 60 10            [24] 9712 	jz	00108$
      003685 7B 00            [12] 9713 	mov	r3,#0x00
      003687 8C 82            [24] 9714 	mov	dpl,r4
      003689 8B 83            [24] 9715 	mov	dph,r3
      00368B 12r00r00         [24] 9716 	lcall	_putchar
      00368E 0D               [12] 9717 	inc	r5
                                   9718 ;	calc.c:428: printstr("v\tpeek top\r\n");
      00368F BD 00 E7         [24] 9719 	cjne	r5,#0x00,00173$
      003692 0E               [12] 9720 	inc	r6
      003693 80 E4            [24] 9721 	sjmp	00173$
      003695                       9722 00108$:
                                   9723 ;	calc.c:429: printstr("V\tpeek stack\r\n");
      003695 7Dr52            [12] 9724 	mov	r5,#___str_25
      003697 7Es01            [12] 9725 	mov	r6,#(___str_25 >> 8)
      003699 7F 80            [12] 9726 	mov	r7,#0x80
                                   9727 ;	calc.c:51: return;
      00369B                       9728 00176$:
                                   9729 ;	calc.c:49: for (; *s; s++) putchar(*s);
      00369B 8D 82            [24] 9730 	mov	dpl,r5
      00369D 8E 83            [24] 9731 	mov	dph,r6
      00369F 8F F0            [24] 9732 	mov	b,r7
      0036A1 12r00r00         [24] 9733 	lcall	__gptrget
      0036A4 FC               [12] 9734 	mov	r4,a
      0036A5 60 10            [24] 9735 	jz	00110$
      0036A7 7B 00            [12] 9736 	mov	r3,#0x00
      0036A9 8C 82            [24] 9737 	mov	dpl,r4
      0036AB 8B 83            [24] 9738 	mov	dph,r3
      0036AD 12r00r00         [24] 9739 	lcall	_putchar
      0036B0 0D               [12] 9740 	inc	r5
                                   9741 ;	calc.c:429: printstr("V\tpeek stack\r\n");
      0036B1 BD 00 E7         [24] 9742 	cjne	r5,#0x00,00176$
      0036B4 0E               [12] 9743 	inc	r6
      0036B5 80 E4            [24] 9744 	sjmp	00176$
      0036B7                       9745 00110$:
                                   9746 ;	calc.c:430: printstr("i\treset acc\r\n");
      0036B7 7Dr61            [12] 9747 	mov	r5,#___str_26
      0036B9 7Es01            [12] 9748 	mov	r6,#(___str_26 >> 8)
      0036BB 7F 80            [12] 9749 	mov	r7,#0x80
                                   9750 ;	calc.c:51: return;
      0036BD                       9751 00179$:
                                   9752 ;	calc.c:49: for (; *s; s++) putchar(*s);
      0036BD 8D 82            [24] 9753 	mov	dpl,r5
      0036BF 8E 83            [24] 9754 	mov	dph,r6
      0036C1 8F F0            [24] 9755 	mov	b,r7
      0036C3 12r00r00         [24] 9756 	lcall	__gptrget
      0036C6 FC               [12] 9757 	mov	r4,a
      0036C7 60 10            [24] 9758 	jz	00112$
      0036C9 7B 00            [12] 9759 	mov	r3,#0x00
      0036CB 8C 82            [24] 9760 	mov	dpl,r4
      0036CD 8B 83            [24] 9761 	mov	dph,r3
      0036CF 12r00r00         [24] 9762 	lcall	_putchar
      0036D2 0D               [12] 9763 	inc	r5
                                   9764 ;	calc.c:430: printstr("i\treset acc\r\n");
      0036D3 BD 00 E7         [24] 9765 	cjne	r5,#0x00,00179$
      0036D6 0E               [12] 9766 	inc	r6
      0036D7 80 E4            [24] 9767 	sjmp	00179$
      0036D9                       9768 00112$:
                                   9769 ;	calc.c:431: printstr("I\treset and discard acc\r\n");
      0036D9 7Dr6F            [12] 9770 	mov	r5,#___str_27
      0036DB 7Es01            [12] 9771 	mov	r6,#(___str_27 >> 8)
      0036DD 7F 80            [12] 9772 	mov	r7,#0x80
                                   9773 ;	calc.c:51: return;
      0036DF                       9774 00182$:
                                   9775 ;	calc.c:49: for (; *s; s++) putchar(*s);
      0036DF 8D 82            [24] 9776 	mov	dpl,r5
      0036E1 8E 83            [24] 9777 	mov	dph,r6
      0036E3 8F F0            [24] 9778 	mov	b,r7
      0036E5 12r00r00         [24] 9779 	lcall	__gptrget
      0036E8 FC               [12] 9780 	mov	r4,a
      0036E9 60 10            [24] 9781 	jz	00114$
      0036EB 7B 00            [12] 9782 	mov	r3,#0x00
      0036ED 8C 82            [24] 9783 	mov	dpl,r4
      0036EF 8B 83            [24] 9784 	mov	dph,r3
      0036F1 12r00r00         [24] 9785 	lcall	_putchar
      0036F4 0D               [12] 9786 	inc	r5
                                   9787 ;	calc.c:431: printstr("I\treset and discard acc\r\n");
      0036F5 BD 00 E7         [24] 9788 	cjne	r5,#0x00,00182$
      0036F8 0E               [12] 9789 	inc	r6
      0036F9 80 E4            [24] 9790 	sjmp	00182$
      0036FB                       9791 00114$:
                                   9792 ;	calc.c:432: printstr("x\texchange top 2\r\n");
      0036FB 7Dr89            [12] 9793 	mov	r5,#___str_28
      0036FD 7Es01            [12] 9794 	mov	r6,#(___str_28 >> 8)
      0036FF 7F 80            [12] 9795 	mov	r7,#0x80
                                   9796 ;	calc.c:51: return;
      003701                       9797 00185$:
                                   9798 ;	calc.c:49: for (; *s; s++) putchar(*s);
      003701 8D 82            [24] 9799 	mov	dpl,r5
      003703 8E 83            [24] 9800 	mov	dph,r6
      003705 8F F0            [24] 9801 	mov	b,r7
      003707 12r00r00         [24] 9802 	lcall	__gptrget
      00370A FC               [12] 9803 	mov	r4,a
      00370B 60 10            [24] 9804 	jz	00116$
      00370D 7B 00            [12] 9805 	mov	r3,#0x00
      00370F 8C 82            [24] 9806 	mov	dpl,r4
      003711 8B 83            [24] 9807 	mov	dph,r3
      003713 12r00r00         [24] 9808 	lcall	_putchar
      003716 0D               [12] 9809 	inc	r5
                                   9810 ;	calc.c:432: printstr("x\texchange top 2\r\n");
      003717 BD 00 E7         [24] 9811 	cjne	r5,#0x00,00185$
      00371A 0E               [12] 9812 	inc	r6
      00371B 80 E4            [24] 9813 	sjmp	00185$
      00371D                       9814 00116$:
                                   9815 ;	calc.c:433: printstr("X\texchange stacks primary <-> secondary\r\n");
      00371D 7Dr9C            [12] 9816 	mov	r5,#___str_29
      00371F 7Es01            [12] 9817 	mov	r6,#(___str_29 >> 8)
      003721 7F 80            [12] 9818 	mov	r7,#0x80
                                   9819 ;	calc.c:51: return;
      003723                       9820 00188$:
                                   9821 ;	calc.c:49: for (; *s; s++) putchar(*s);
      003723 8D 82            [24] 9822 	mov	dpl,r5
      003725 8E 83            [24] 9823 	mov	dph,r6
      003727 8F F0            [24] 9824 	mov	b,r7
      003729 12r00r00         [24] 9825 	lcall	__gptrget
      00372C FC               [12] 9826 	mov	r4,a
      00372D 60 10            [24] 9827 	jz	00118$
      00372F 7B 00            [12] 9828 	mov	r3,#0x00
      003731 8C 82            [24] 9829 	mov	dpl,r4
      003733 8B 83            [24] 9830 	mov	dph,r3
      003735 12r00r00         [24] 9831 	lcall	_putchar
      003738 0D               [12] 9832 	inc	r5
                                   9833 ;	calc.c:433: printstr("X\texchange stacks primary <-> secondary\r\n");
      003739 BD 00 E7         [24] 9834 	cjne	r5,#0x00,00188$
      00373C 0E               [12] 9835 	inc	r6
      00373D 80 E4            [24] 9836 	sjmp	00188$
      00373F                       9837 00118$:
                                   9838 ;	calc.c:434: printstr("T\texchange tops primary <-> secondary\r\n");
      00373F 7DrC6            [12] 9839 	mov	r5,#___str_30
      003741 7Es01            [12] 9840 	mov	r6,#(___str_30 >> 8)
      003743 7F 80            [12] 9841 	mov	r7,#0x80
                                   9842 ;	calc.c:51: return;
      003745                       9843 00191$:
                                   9844 ;	calc.c:49: for (; *s; s++) putchar(*s);
      003745 8D 82            [24] 9845 	mov	dpl,r5
      003747 8E 83            [24] 9846 	mov	dph,r6
      003749 8F F0            [24] 9847 	mov	b,r7
      00374B 12r00r00         [24] 9848 	lcall	__gptrget
      00374E FC               [12] 9849 	mov	r4,a
      00374F 60 10            [24] 9850 	jz	00120$
      003751 7B 00            [12] 9851 	mov	r3,#0x00
      003753 8C 82            [24] 9852 	mov	dpl,r4
      003755 8B 83            [24] 9853 	mov	dph,r3
      003757 12r00r00         [24] 9854 	lcall	_putchar
      00375A 0D               [12] 9855 	inc	r5
                                   9856 ;	calc.c:434: printstr("T\texchange tops primary <-> secondary\r\n");
      00375B BD 00 E7         [24] 9857 	cjne	r5,#0x00,00191$
      00375E 0E               [12] 9858 	inc	r6
      00375F 80 E4            [24] 9859 	sjmp	00191$
      003761                       9860 00120$:
                                   9861 ;	calc.c:435: printstr("U\tcopy top secondary -> primary\r\n");
      003761 7DrEE            [12] 9862 	mov	r5,#___str_31
      003763 7Es01            [12] 9863 	mov	r6,#(___str_31 >> 8)
      003765 7F 80            [12] 9864 	mov	r7,#0x80
                                   9865 ;	calc.c:51: return;
      003767                       9866 00194$:
                                   9867 ;	calc.c:49: for (; *s; s++) putchar(*s);
      003767 8D 82            [24] 9868 	mov	dpl,r5
      003769 8E 83            [24] 9869 	mov	dph,r6
      00376B 8F F0            [24] 9870 	mov	b,r7
      00376D 12r00r00         [24] 9871 	lcall	__gptrget
      003770 FC               [12] 9872 	mov	r4,a
      003771 60 10            [24] 9873 	jz	00122$
      003773 7B 00            [12] 9874 	mov	r3,#0x00
      003775 8C 82            [24] 9875 	mov	dpl,r4
      003777 8B 83            [24] 9876 	mov	dph,r3
      003779 12r00r00         [24] 9877 	lcall	_putchar
      00377C 0D               [12] 9878 	inc	r5
                                   9879 ;	calc.c:435: printstr("U\tcopy top secondary -> primary\r\n");
      00377D BD 00 E7         [24] 9880 	cjne	r5,#0x00,00194$
      003780 0E               [12] 9881 	inc	r6
      003781 80 E4            [24] 9882 	sjmp	00194$
      003783                       9883 00122$:
                                   9884 ;	calc.c:436: printstr("u\tcopy top primary -> secondary\r\n");
      003783 7Dr10            [12] 9885 	mov	r5,#___str_32
      003785 7Es02            [12] 9886 	mov	r6,#(___str_32 >> 8)
      003787 7F 80            [12] 9887 	mov	r7,#0x80
                                   9888 ;	calc.c:51: return;
      003789                       9889 00197$:
                                   9890 ;	calc.c:49: for (; *s; s++) putchar(*s);
      003789 8D 82            [24] 9891 	mov	dpl,r5
      00378B 8E 83            [24] 9892 	mov	dph,r6
      00378D 8F F0            [24] 9893 	mov	b,r7
      00378F 12r00r00         [24] 9894 	lcall	__gptrget
      003792 FC               [12] 9895 	mov	r4,a
      003793 60 10            [24] 9896 	jz	00124$
      003795 7B 00            [12] 9897 	mov	r3,#0x00
      003797 8C 82            [24] 9898 	mov	dpl,r4
      003799 8B 83            [24] 9899 	mov	dph,r3
      00379B 12r00r00         [24] 9900 	lcall	_putchar
      00379E 0D               [12] 9901 	inc	r5
                                   9902 ;	calc.c:436: printstr("u\tcopy top primary -> secondary\r\n");
      00379F BD 00 E7         [24] 9903 	cjne	r5,#0x00,00197$
      0037A2 0E               [12] 9904 	inc	r6
      0037A3 80 E4            [24] 9905 	sjmp	00197$
      0037A5                       9906 00124$:
                                   9907 ;	calc.c:437: printstr("M\tmove top secondary -> primary\r\n");
      0037A5 7Dr32            [12] 9908 	mov	r5,#___str_33
      0037A7 7Es02            [12] 9909 	mov	r6,#(___str_33 >> 8)
      0037A9 7F 80            [12] 9910 	mov	r7,#0x80
                                   9911 ;	calc.c:51: return;
      0037AB                       9912 00200$:
                                   9913 ;	calc.c:49: for (; *s; s++) putchar(*s);
      0037AB 8D 82            [24] 9914 	mov	dpl,r5
      0037AD 8E 83            [24] 9915 	mov	dph,r6
      0037AF 8F F0            [24] 9916 	mov	b,r7
      0037B1 12r00r00         [24] 9917 	lcall	__gptrget
      0037B4 FC               [12] 9918 	mov	r4,a
      0037B5 60 10            [24] 9919 	jz	00126$
      0037B7 7B 00            [12] 9920 	mov	r3,#0x00
      0037B9 8C 82            [24] 9921 	mov	dpl,r4
      0037BB 8B 83            [24] 9922 	mov	dph,r3
      0037BD 12r00r00         [24] 9923 	lcall	_putchar
      0037C0 0D               [12] 9924 	inc	r5
                                   9925 ;	calc.c:437: printstr("M\tmove top secondary -> primary\r\n");
      0037C1 BD 00 E7         [24] 9926 	cjne	r5,#0x00,00200$
      0037C4 0E               [12] 9927 	inc	r6
      0037C5 80 E4            [24] 9928 	sjmp	00200$
      0037C7                       9929 00126$:
                                   9930 ;	calc.c:438: printstr("m\tmove top primary -> secondary\r\n");
      0037C7 7Dr54            [12] 9931 	mov	r5,#___str_34
      0037C9 7Es02            [12] 9932 	mov	r6,#(___str_34 >> 8)
      0037CB 7F 80            [12] 9933 	mov	r7,#0x80
                                   9934 ;	calc.c:51: return;
      0037CD                       9935 00203$:
                                   9936 ;	calc.c:49: for (; *s; s++) putchar(*s);
      0037CD 8D 82            [24] 9937 	mov	dpl,r5
      0037CF 8E 83            [24] 9938 	mov	dph,r6
      0037D1 8F F0            [24] 9939 	mov	b,r7
      0037D3 12r00r00         [24] 9940 	lcall	__gptrget
      0037D6 FC               [12] 9941 	mov	r4,a
      0037D7 60 10            [24] 9942 	jz	00128$
      0037D9 7B 00            [12] 9943 	mov	r3,#0x00
      0037DB 8C 82            [24] 9944 	mov	dpl,r4
      0037DD 8B 83            [24] 9945 	mov	dph,r3
      0037DF 12r00r00         [24] 9946 	lcall	_putchar
      0037E2 0D               [12] 9947 	inc	r5
                                   9948 ;	calc.c:438: printstr("m\tmove top primary -> secondary\r\n");
      0037E3 BD 00 E7         [24] 9949 	cjne	r5,#0x00,00203$
      0037E6 0E               [12] 9950 	inc	r6
      0037E7 80 E4            [24] 9951 	sjmp	00203$
      0037E9                       9952 00128$:
                                   9953 ;	calc.c:439: printstr("+\tadd top 2\r\n");
      0037E9 7Dr76            [12] 9954 	mov	r5,#___str_35
      0037EB 7Es02            [12] 9955 	mov	r6,#(___str_35 >> 8)
      0037ED 7F 80            [12] 9956 	mov	r7,#0x80
                                   9957 ;	calc.c:51: return;
      0037EF                       9958 00206$:
                                   9959 ;	calc.c:49: for (; *s; s++) putchar(*s);
      0037EF 8D 82            [24] 9960 	mov	dpl,r5
      0037F1 8E 83            [24] 9961 	mov	dph,r6
      0037F3 8F F0            [24] 9962 	mov	b,r7
      0037F5 12r00r00         [24] 9963 	lcall	__gptrget
      0037F8 FC               [12] 9964 	mov	r4,a
      0037F9 60 10            [24] 9965 	jz	00130$
      0037FB 7B 00            [12] 9966 	mov	r3,#0x00
      0037FD 8C 82            [24] 9967 	mov	dpl,r4
      0037FF 8B 83            [24] 9968 	mov	dph,r3
      003801 12r00r00         [24] 9969 	lcall	_putchar
      003804 0D               [12] 9970 	inc	r5
                                   9971 ;	calc.c:439: printstr("+\tadd top 2\r\n");
      003805 BD 00 E7         [24] 9972 	cjne	r5,#0x00,00206$
      003808 0E               [12] 9973 	inc	r6
      003809 80 E4            [24] 9974 	sjmp	00206$
      00380B                       9975 00130$:
                                   9976 ;	calc.c:440: printstr("-\tsubtract top 2\r\n");
      00380B 7Dr84            [12] 9977 	mov	r5,#___str_36
      00380D 7Es02            [12] 9978 	mov	r6,#(___str_36 >> 8)
      00380F 7F 80            [12] 9979 	mov	r7,#0x80
                                   9980 ;	calc.c:51: return;
      003811                       9981 00209$:
                                   9982 ;	calc.c:49: for (; *s; s++) putchar(*s);
      003811 8D 82            [24] 9983 	mov	dpl,r5
      003813 8E 83            [24] 9984 	mov	dph,r6
      003815 8F F0            [24] 9985 	mov	b,r7
      003817 12r00r00         [24] 9986 	lcall	__gptrget
      00381A FC               [12] 9987 	mov	r4,a
      00381B 60 10            [24] 9988 	jz	00132$
      00381D 7B 00            [12] 9989 	mov	r3,#0x00
      00381F 8C 82            [24] 9990 	mov	dpl,r4
      003821 8B 83            [24] 9991 	mov	dph,r3
      003823 12r00r00         [24] 9992 	lcall	_putchar
      003826 0D               [12] 9993 	inc	r5
                                   9994 ;	calc.c:440: printstr("-\tsubtract top 2\r\n");
      003827 BD 00 E7         [24] 9995 	cjne	r5,#0x00,00209$
      00382A 0E               [12] 9996 	inc	r6
      00382B 80 E4            [24] 9997 	sjmp	00209$
      00382D                       9998 00132$:
                                   9999 ;	calc.c:441: printstr("*\tmultiply top 2\r\n");
      00382D 7Dr97            [12]10000 	mov	r5,#___str_37
      00382F 7Es02            [12]10001 	mov	r6,#(___str_37 >> 8)
      003831 7F 80            [12]10002 	mov	r7,#0x80
                                  10003 ;	calc.c:51: return;
      003833                      10004 00212$:
                                  10005 ;	calc.c:49: for (; *s; s++) putchar(*s);
      003833 8D 82            [24]10006 	mov	dpl,r5
      003835 8E 83            [24]10007 	mov	dph,r6
      003837 8F F0            [24]10008 	mov	b,r7
      003839 12r00r00         [24]10009 	lcall	__gptrget
      00383C FC               [12]10010 	mov	r4,a
      00383D 60 10            [24]10011 	jz	00134$
      00383F 7B 00            [12]10012 	mov	r3,#0x00
      003841 8C 82            [24]10013 	mov	dpl,r4
      003843 8B 83            [24]10014 	mov	dph,r3
      003845 12r00r00         [24]10015 	lcall	_putchar
      003848 0D               [12]10016 	inc	r5
                                  10017 ;	calc.c:441: printstr("*\tmultiply top 2\r\n");
      003849 BD 00 E7         [24]10018 	cjne	r5,#0x00,00212$
      00384C 0E               [12]10019 	inc	r6
      00384D 80 E4            [24]10020 	sjmp	00212$
      00384F                      10021 00134$:
                                  10022 ;	calc.c:442: printstr("/\tdivide top 2\r\n");
      00384F 7DrAA            [12]10023 	mov	r5,#___str_38
      003851 7Es02            [12]10024 	mov	r6,#(___str_38 >> 8)
      003853 7F 80            [12]10025 	mov	r7,#0x80
                                  10026 ;	calc.c:51: return;
      003855                      10027 00215$:
                                  10028 ;	calc.c:49: for (; *s; s++) putchar(*s);
      003855 8D 82            [24]10029 	mov	dpl,r5
      003857 8E 83            [24]10030 	mov	dph,r6
      003859 8F F0            [24]10031 	mov	b,r7
      00385B 12r00r00         [24]10032 	lcall	__gptrget
      00385E FC               [12]10033 	mov	r4,a
      00385F 60 10            [24]10034 	jz	00136$
      003861 7B 00            [12]10035 	mov	r3,#0x00
      003863 8C 82            [24]10036 	mov	dpl,r4
      003865 8B 83            [24]10037 	mov	dph,r3
      003867 12r00r00         [24]10038 	lcall	_putchar
      00386A 0D               [12]10039 	inc	r5
                                  10040 ;	calc.c:442: printstr("/\tdivide top 2\r\n");
      00386B BD 00 E7         [24]10041 	cjne	r5,#0x00,00215$
      00386E 0E               [12]10042 	inc	r6
      00386F 80 E4            [24]10043 	sjmp	00215$
      003871                      10044 00136$:
                                  10045 ;	calc.c:443: printstr("\\\tdivide top 2 unsigned\r\n");	
      003871 7DrBB            [12]10046 	mov	r5,#___str_39
      003873 7Es02            [12]10047 	mov	r6,#(___str_39 >> 8)
      003875 7F 80            [12]10048 	mov	r7,#0x80
                                  10049 ;	calc.c:51: return;
      003877                      10050 00218$:
                                  10051 ;	calc.c:49: for (; *s; s++) putchar(*s);
      003877 8D 82            [24]10052 	mov	dpl,r5
      003879 8E 83            [24]10053 	mov	dph,r6
      00387B 8F F0            [24]10054 	mov	b,r7
      00387D 12r00r00         [24]10055 	lcall	__gptrget
      003880 FC               [12]10056 	mov	r4,a
      003881 60 10            [24]10057 	jz	00138$
      003883 7B 00            [12]10058 	mov	r3,#0x00
      003885 8C 82            [24]10059 	mov	dpl,r4
      003887 8B 83            [24]10060 	mov	dph,r3
      003889 12r00r00         [24]10061 	lcall	_putchar
      00388C 0D               [12]10062 	inc	r5
                                  10063 ;	calc.c:443: printstr("\\\tdivide top 2 unsigned\r\n");	
      00388D BD 00 E7         [24]10064 	cjne	r5,#0x00,00218$
      003890 0E               [12]10065 	inc	r6
      003891 80 E4            [24]10066 	sjmp	00218$
      003893                      10067 00138$:
                                  10068 ;	calc.c:444: printstr("%\tmodulus top 2\r\n");
      003893 7DrD5            [12]10069 	mov	r5,#___str_40
      003895 7Es02            [12]10070 	mov	r6,#(___str_40 >> 8)
      003897 7F 80            [12]10071 	mov	r7,#0x80
                                  10072 ;	calc.c:51: return;
      003899                      10073 00221$:
                                  10074 ;	calc.c:49: for (; *s; s++) putchar(*s);
      003899 8D 82            [24]10075 	mov	dpl,r5
      00389B 8E 83            [24]10076 	mov	dph,r6
      00389D 8F F0            [24]10077 	mov	b,r7
      00389F 12r00r00         [24]10078 	lcall	__gptrget
      0038A2 FC               [12]10079 	mov	r4,a
      0038A3 60 10            [24]10080 	jz	00140$
      0038A5 7B 00            [12]10081 	mov	r3,#0x00
      0038A7 8C 82            [24]10082 	mov	dpl,r4
      0038A9 8B 83            [24]10083 	mov	dph,r3
      0038AB 12r00r00         [24]10084 	lcall	_putchar
      0038AE 0D               [12]10085 	inc	r5
                                  10086 ;	calc.c:444: printstr("%\tmodulus top 2\r\n");
      0038AF BD 00 E7         [24]10087 	cjne	r5,#0x00,00221$
      0038B2 0E               [12]10088 	inc	r6
      0038B3 80 E4            [24]10089 	sjmp	00221$
      0038B5                      10090 00140$:
                                  10091 ;	calc.c:445: printstr("#\tmodulus top 2 unsigned\r\n");
      0038B5 7DrE7            [12]10092 	mov	r5,#___str_41
      0038B7 7Es02            [12]10093 	mov	r6,#(___str_41 >> 8)
      0038B9 7F 80            [12]10094 	mov	r7,#0x80
                                  10095 ;	calc.c:51: return;
      0038BB                      10096 00224$:
                                  10097 ;	calc.c:49: for (; *s; s++) putchar(*s);
      0038BB 8D 82            [24]10098 	mov	dpl,r5
      0038BD 8E 83            [24]10099 	mov	dph,r6
      0038BF 8F F0            [24]10100 	mov	b,r7
      0038C1 12r00r00         [24]10101 	lcall	__gptrget
      0038C4 FC               [12]10102 	mov	r4,a
      0038C5 60 10            [24]10103 	jz	00142$
      0038C7 7B 00            [12]10104 	mov	r3,#0x00
      0038C9 8C 82            [24]10105 	mov	dpl,r4
      0038CB 8B 83            [24]10106 	mov	dph,r3
      0038CD 12r00r00         [24]10107 	lcall	_putchar
      0038D0 0D               [12]10108 	inc	r5
                                  10109 ;	calc.c:445: printstr("#\tmodulus top 2 unsigned\r\n");
      0038D1 BD 00 E7         [24]10110 	cjne	r5,#0x00,00224$
      0038D4 0E               [12]10111 	inc	r6
      0038D5 80 E4            [24]10112 	sjmp	00224$
      0038D7                      10113 00142$:
                                  10114 ;	calc.c:446: printstr("&\tand top 2\r\n");
      0038D7 7Dr02            [12]10115 	mov	r5,#___str_42
      0038D9 7Es03            [12]10116 	mov	r6,#(___str_42 >> 8)
      0038DB 7F 80            [12]10117 	mov	r7,#0x80
                                  10118 ;	calc.c:51: return;
      0038DD                      10119 00227$:
                                  10120 ;	calc.c:49: for (; *s; s++) putchar(*s);
      0038DD 8D 82            [24]10121 	mov	dpl,r5
      0038DF 8E 83            [24]10122 	mov	dph,r6
      0038E1 8F F0            [24]10123 	mov	b,r7
      0038E3 12r00r00         [24]10124 	lcall	__gptrget
      0038E6 FC               [12]10125 	mov	r4,a
      0038E7 60 10            [24]10126 	jz	00144$
      0038E9 7B 00            [12]10127 	mov	r3,#0x00
      0038EB 8C 82            [24]10128 	mov	dpl,r4
      0038ED 8B 83            [24]10129 	mov	dph,r3
      0038EF 12r00r00         [24]10130 	lcall	_putchar
      0038F2 0D               [12]10131 	inc	r5
                                  10132 ;	calc.c:446: printstr("&\tand top 2\r\n");
      0038F3 BD 00 E7         [24]10133 	cjne	r5,#0x00,00227$
      0038F6 0E               [12]10134 	inc	r6
      0038F7 80 E4            [24]10135 	sjmp	00227$
      0038F9                      10136 00144$:
                                  10137 ;	calc.c:447: printstr("|\tor top 2\r\n");
      0038F9 7Dr10            [12]10138 	mov	r5,#___str_43
      0038FB 7Es03            [12]10139 	mov	r6,#(___str_43 >> 8)
      0038FD 7F 80            [12]10140 	mov	r7,#0x80
                                  10141 ;	calc.c:51: return;
      0038FF                      10142 00230$:
                                  10143 ;	calc.c:49: for (; *s; s++) putchar(*s);
      0038FF 8D 82            [24]10144 	mov	dpl,r5
      003901 8E 83            [24]10145 	mov	dph,r6
      003903 8F F0            [24]10146 	mov	b,r7
      003905 12r00r00         [24]10147 	lcall	__gptrget
      003908 FC               [12]10148 	mov	r4,a
      003909 60 10            [24]10149 	jz	00146$
      00390B 7B 00            [12]10150 	mov	r3,#0x00
      00390D 8C 82            [24]10151 	mov	dpl,r4
      00390F 8B 83            [24]10152 	mov	dph,r3
      003911 12r00r00         [24]10153 	lcall	_putchar
      003914 0D               [12]10154 	inc	r5
                                  10155 ;	calc.c:447: printstr("|\tor top 2\r\n");
      003915 BD 00 E7         [24]10156 	cjne	r5,#0x00,00230$
      003918 0E               [12]10157 	inc	r6
      003919 80 E4            [24]10158 	sjmp	00230$
      00391B                      10159 00146$:
                                  10160 ;	calc.c:448: printstr("^\txor top 2\r\n");
      00391B 7Dr1D            [12]10161 	mov	r5,#___str_44
      00391D 7Es03            [12]10162 	mov	r6,#(___str_44 >> 8)
      00391F 7F 80            [12]10163 	mov	r7,#0x80
                                  10164 ;	calc.c:51: return;
      003921                      10165 00233$:
                                  10166 ;	calc.c:49: for (; *s; s++) putchar(*s);
      003921 8D 82            [24]10167 	mov	dpl,r5
      003923 8E 83            [24]10168 	mov	dph,r6
      003925 8F F0            [24]10169 	mov	b,r7
      003927 12r00r00         [24]10170 	lcall	__gptrget
      00392A FC               [12]10171 	mov	r4,a
      00392B 60 10            [24]10172 	jz	00148$
      00392D 7B 00            [12]10173 	mov	r3,#0x00
      00392F 8C 82            [24]10174 	mov	dpl,r4
      003931 8B 83            [24]10175 	mov	dph,r3
      003933 12r00r00         [24]10176 	lcall	_putchar
      003936 0D               [12]10177 	inc	r5
                                  10178 ;	calc.c:448: printstr("^\txor top 2\r\n");
      003937 BD 00 E7         [24]10179 	cjne	r5,#0x00,00233$
      00393A 0E               [12]10180 	inc	r6
      00393B 80 E4            [24]10181 	sjmp	00233$
      00393D                      10182 00148$:
                                  10183 ;	calc.c:449: printstr(">\tshift right top 2\r\n");
      00393D 7Dr2B            [12]10184 	mov	r5,#___str_45
      00393F 7Es03            [12]10185 	mov	r6,#(___str_45 >> 8)
      003941 7F 80            [12]10186 	mov	r7,#0x80
                                  10187 ;	calc.c:51: return;
      003943                      10188 00236$:
                                  10189 ;	calc.c:49: for (; *s; s++) putchar(*s);
      003943 8D 82            [24]10190 	mov	dpl,r5
      003945 8E 83            [24]10191 	mov	dph,r6
      003947 8F F0            [24]10192 	mov	b,r7
      003949 12r00r00         [24]10193 	lcall	__gptrget
      00394C FC               [12]10194 	mov	r4,a
      00394D 60 10            [24]10195 	jz	00150$
      00394F 7B 00            [12]10196 	mov	r3,#0x00
      003951 8C 82            [24]10197 	mov	dpl,r4
      003953 8B 83            [24]10198 	mov	dph,r3
      003955 12r00r00         [24]10199 	lcall	_putchar
      003958 0D               [12]10200 	inc	r5
                                  10201 ;	calc.c:449: printstr(">\tshift right top 2\r\n");
      003959 BD 00 E7         [24]10202 	cjne	r5,#0x00,00236$
      00395C 0E               [12]10203 	inc	r6
      00395D 80 E4            [24]10204 	sjmp	00236$
      00395F                      10205 00150$:
                                  10206 ;	calc.c:450: printstr("]\tarithmetic shift right top 2\r\n");
      00395F 7Dr41            [12]10207 	mov	r5,#___str_46
      003961 7Es03            [12]10208 	mov	r6,#(___str_46 >> 8)
      003963 7F 80            [12]10209 	mov	r7,#0x80
                                  10210 ;	calc.c:51: return;
      003965                      10211 00239$:
                                  10212 ;	calc.c:49: for (; *s; s++) putchar(*s);
      003965 8D 82            [24]10213 	mov	dpl,r5
      003967 8E 83            [24]10214 	mov	dph,r6
      003969 8F F0            [24]10215 	mov	b,r7
      00396B 12r00r00         [24]10216 	lcall	__gptrget
      00396E FC               [12]10217 	mov	r4,a
      00396F 60 10            [24]10218 	jz	00152$
      003971 7B 00            [12]10219 	mov	r3,#0x00
      003973 8C 82            [24]10220 	mov	dpl,r4
      003975 8B 83            [24]10221 	mov	dph,r3
      003977 12r00r00         [24]10222 	lcall	_putchar
      00397A 0D               [12]10223 	inc	r5
                                  10224 ;	calc.c:450: printstr("]\tarithmetic shift right top 2\r\n");
      00397B BD 00 E7         [24]10225 	cjne	r5,#0x00,00239$
      00397E 0E               [12]10226 	inc	r6
      00397F 80 E4            [24]10227 	sjmp	00239$
      003981                      10228 00152$:
                                  10229 ;	calc.c:451: printstr("<\tshift left top 2\r\n");
      003981 7Dr62            [12]10230 	mov	r5,#___str_47
      003983 7Es03            [12]10231 	mov	r6,#(___str_47 >> 8)
      003985 7F 80            [12]10232 	mov	r7,#0x80
                                  10233 ;	calc.c:51: return;
      003987                      10234 00242$:
                                  10235 ;	calc.c:49: for (; *s; s++) putchar(*s);
      003987 8D 82            [24]10236 	mov	dpl,r5
      003989 8E 83            [24]10237 	mov	dph,r6
      00398B 8F F0            [24]10238 	mov	b,r7
      00398D 12r00r00         [24]10239 	lcall	__gptrget
      003990 FC               [12]10240 	mov	r4,a
      003991 60 10            [24]10241 	jz	00154$
      003993 7B 00            [12]10242 	mov	r3,#0x00
      003995 8C 82            [24]10243 	mov	dpl,r4
      003997 8B 83            [24]10244 	mov	dph,r3
      003999 12r00r00         [24]10245 	lcall	_putchar
      00399C 0D               [12]10246 	inc	r5
                                  10247 ;	calc.c:451: printstr("<\tshift left top 2\r\n");
      00399D BD 00 E7         [24]10248 	cjne	r5,#0x00,00242$
      0039A0 0E               [12]10249 	inc	r6
      0039A1 80 E4            [24]10250 	sjmp	00242$
      0039A3                      10251 00154$:
                                  10252 ;	calc.c:452: printstr("~\tbitwise not top\r\n");
      0039A3 7Dr77            [12]10253 	mov	r5,#___str_48
      0039A5 7Es03            [12]10254 	mov	r6,#(___str_48 >> 8)
      0039A7 7F 80            [12]10255 	mov	r7,#0x80
                                  10256 ;	calc.c:51: return;
      0039A9                      10257 00245$:
                                  10258 ;	calc.c:49: for (; *s; s++) putchar(*s);
      0039A9 8D 82            [24]10259 	mov	dpl,r5
      0039AB 8E 83            [24]10260 	mov	dph,r6
      0039AD 8F F0            [24]10261 	mov	b,r7
      0039AF 12r00r00         [24]10262 	lcall	__gptrget
      0039B2 FC               [12]10263 	mov	r4,a
      0039B3 60 10            [24]10264 	jz	00156$
      0039B5 7B 00            [12]10265 	mov	r3,#0x00
      0039B7 8C 82            [24]10266 	mov	dpl,r4
      0039B9 8B 83            [24]10267 	mov	dph,r3
      0039BB 12r00r00         [24]10268 	lcall	_putchar
      0039BE 0D               [12]10269 	inc	r5
                                  10270 ;	calc.c:452: printstr("~\tbitwise not top\r\n");
      0039BF BD 00 E7         [24]10271 	cjne	r5,#0x00,00245$
      0039C2 0E               [12]10272 	inc	r6
      0039C3 80 E4            [24]10273 	sjmp	00245$
      0039C5                      10274 00156$:
                                  10275 ;	calc.c:453: printstr("s\tstatus\r\n");
      0039C5 7Dr8B            [12]10276 	mov	r5,#___str_49
      0039C7 7Es03            [12]10277 	mov	r6,#(___str_49 >> 8)
      0039C9 7F 80            [12]10278 	mov	r7,#0x80
                                  10279 ;	calc.c:51: return;
      0039CB                      10280 00248$:
                                  10281 ;	calc.c:49: for (; *s; s++) putchar(*s);
      0039CB 8D 82            [24]10282 	mov	dpl,r5
      0039CD 8E 83            [24]10283 	mov	dph,r6
      0039CF 8F F0            [24]10284 	mov	b,r7
      0039D1 12r00r00         [24]10285 	lcall	__gptrget
      0039D4 FC               [12]10286 	mov	r4,a
      0039D5 60 10            [24]10287 	jz	00158$
      0039D7 7B 00            [12]10288 	mov	r3,#0x00
      0039D9 8C 82            [24]10289 	mov	dpl,r4
      0039DB 8B 83            [24]10290 	mov	dph,r3
      0039DD 12r00r00         [24]10291 	lcall	_putchar
      0039E0 0D               [12]10292 	inc	r5
                                  10293 ;	calc.c:453: printstr("s\tstatus\r\n");
      0039E1 BD 00 E7         [24]10294 	cjne	r5,#0x00,00248$
      0039E4 0E               [12]10295 	inc	r6
      0039E5 80 E4            [24]10296 	sjmp	00248$
      0039E7                      10297 00158$:
                                  10298 ;	calc.c:454: printstr("?\thelp\r\n");
      0039E7 7Dr96            [12]10299 	mov	r5,#___str_50
      0039E9 7Es03            [12]10300 	mov	r6,#(___str_50 >> 8)
      0039EB 7F 80            [12]10301 	mov	r7,#0x80
                                  10302 ;	calc.c:51: return;
      0039ED                      10303 00251$:
                                  10304 ;	calc.c:49: for (; *s; s++) putchar(*s);
      0039ED 8D 82            [24]10305 	mov	dpl,r5
      0039EF 8E 83            [24]10306 	mov	dph,r6
      0039F1 8F F0            [24]10307 	mov	b,r7
      0039F3 12r00r00         [24]10308 	lcall	__gptrget
      0039F6 FC               [12]10309 	mov	r4,a
      0039F7 60 10            [24]10310 	jz	00160$
      0039F9 7B 00            [12]10311 	mov	r3,#0x00
      0039FB 8C 82            [24]10312 	mov	dpl,r4
      0039FD 8B 83            [24]10313 	mov	dph,r3
      0039FF 12r00r00         [24]10314 	lcall	_putchar
      003A02 0D               [12]10315 	inc	r5
                                  10316 ;	calc.c:454: printstr("?\thelp\r\n");
      003A03 BD 00 E7         [24]10317 	cjne	r5,#0x00,00251$
      003A06 0E               [12]10318 	inc	r6
      003A07 80 E4            [24]10319 	sjmp	00251$
      003A09                      10320 00160$:
                                  10321 ;	calc.c:455: printstr("q\tquit\r\n");
      003A09 7Dr9F            [12]10322 	mov	r5,#___str_51
      003A0B 7Es03            [12]10323 	mov	r6,#(___str_51 >> 8)
      003A0D 7F 80            [12]10324 	mov	r7,#0x80
                                  10325 ;	calc.c:51: return;
      003A0F                      10326 00254$:
                                  10327 ;	calc.c:49: for (; *s; s++) putchar(*s);
      003A0F 8D 82            [24]10328 	mov	dpl,r5
      003A11 8E 83            [24]10329 	mov	dph,r6
      003A13 8F F0            [24]10330 	mov	b,r7
      003A15 12r00r00         [24]10331 	lcall	__gptrget
      003A18 FC               [12]10332 	mov	r4,a
      003A19 60 10            [24]10333 	jz	00162$
      003A1B 7B 00            [12]10334 	mov	r3,#0x00
      003A1D 8C 82            [24]10335 	mov	dpl,r4
      003A1F 8B 83            [24]10336 	mov	dph,r3
      003A21 12r00r00         [24]10337 	lcall	_putchar
      003A24 0D               [12]10338 	inc	r5
                                  10339 ;	calc.c:455: printstr("q\tquit\r\n");
      003A25 BD 00 E7         [24]10340 	cjne	r5,#0x00,00254$
      003A28 0E               [12]10341 	inc	r6
      003A29 80 E4            [24]10342 	sjmp	00254$
      003A2B                      10343 00162$:
                                  10344 ;	calc.c:457: return 1;
      003A2B 90 00 01         [24]10345 	mov	dptr,#0x0001
                                  10346 ;	calc.c:458: }
      003A2E D0*00            [24]10347 	pop	_bp
      003A30 22               [24]10348 	ret
                                  10349 ;------------------------------------------------------------
                                  10350 ;Allocation info for local variables in function 'main'
                                  10351 ;------------------------------------------------------------
                                  10352 ;input                     Allocated to registers r6 r7 
                                  10353 ;__1966080213              Allocated to registers 
                                  10354 ;s                         Allocated to registers r2 r3 r4 
                                  10355 ;__1310720215              Allocated to registers 
                                  10356 ;s                         Allocated to registers r5 r6 r7 
                                  10357 ;sloc0                     Allocated to stack - _bp +1
                                  10358 ;------------------------------------------------------------
                                  10359 ;	calc.c:488: void main(void) {
                                  10360 ;	-----------------------------------------
                                  10361 ;	 function main
                                  10362 ;	-----------------------------------------
      003A31                      10363 _main:
      003A31 C0*00            [24]10364 	push	_bp
      003A33 85 81*00         [24]10365 	mov	_bp,sp
      003A36 05 81            [12]10366 	inc	sp
                                  10367 ;	calc.c:491: giant = 0;
      003A38 78r00            [12]10368 	mov	r0,#_giant
      003A3A 76 00            [12]10369 	mov	@r0,#0x00
                                  10370 ;	calc.c:493: c.base = 10;
      003A3C 90r00r0C         [24]10371 	mov	dptr,#_c
      003A3F 74 0A            [12]10372 	mov	a,#0x0a
      003A41 F0               [24]10373 	movx	@dptr,a
      003A42 E4               [12]10374 	clr	a
      003A43 A3               [24]10375 	inc	dptr
      003A44 F0               [24]10376 	movx	@dptr,a
                                  10377 ;	calc.c:494: c.acc = 0l;
      003A45 90r00r0E         [24]10378 	mov	dptr,#(_c + 0x0002)
      003A48 F0               [24]10379 	movx	@dptr,a
      003A49 A3               [24]10380 	inc	dptr
      003A4A F0               [24]10381 	movx	@dptr,a
      003A4B A3               [24]10382 	inc	dptr
      003A4C F0               [24]10383 	movx	@dptr,a
      003A4D A3               [24]10384 	inc	dptr
      003A4E F0               [24]10385 	movx	@dptr,a
                                  10386 ;	calc.c:495: c.acc_valid = (char)0;
      003A4F 90r00r12         [24]10387 	mov	dptr,#(_c + 0x0006)
      003A52 F0               [24]10388 	movx	@dptr,a
                                  10389 ;	calc.c:496: c.digit[0] = c.digit[1] = '\0';
      003A53 90r00r14         [24]10390 	mov	dptr,#(_c + 0x0008)
      003A56 F0               [24]10391 	movx	@dptr,a
      003A57 90r00r13         [24]10392 	mov	dptr,#(_c + 0x0007)
      003A5A F0               [24]10393 	movx	@dptr,a
                                  10394 ;	calc.c:498: c.ps = &c.s0;
      003A5B 90r40r1D         [24]10395 	mov	dptr,#(_c + 0x4011)
      003A5E 74r15            [12]10396 	mov	a,#(_c + 0x0009)
      003A60 F0               [24]10397 	movx	@dptr,a
      003A61 74s00            [12]10398 	mov	a,#((_c + 0x0009) >> 8)
      003A63 A3               [24]10399 	inc	dptr
      003A64 F0               [24]10400 	movx	@dptr,a
      003A65 E4               [12]10401 	clr	a
      003A66 A3               [24]10402 	inc	dptr
      003A67 F0               [24]10403 	movx	@dptr,a
                                  10404 ;	calc.c:499: c.ss = &c.s1;
      003A68 90r40r20         [24]10405 	mov	dptr,#(_c + 0x4014)
      003A6B 74r19            [12]10406 	mov	a,#(_c + 0x200d)
      003A6D F0               [24]10407 	movx	@dptr,a
      003A6E 74s20            [12]10408 	mov	a,#((_c + 0x200d) >> 8)
      003A70 A3               [24]10409 	inc	dptr
      003A71 F0               [24]10410 	movx	@dptr,a
      003A72 E4               [12]10411 	clr	a
      003A73 A3               [24]10412 	inc	dptr
      003A74 F0               [24]10413 	movx	@dptr,a
                                  10414 ;	calc.c:500: stack_init(c.ps);
      003A75 90r00r15         [24]10415 	mov	dptr,#(_c + 0x0009)
      003A78 75 F0 00         [24]10416 	mov	b,#0x00
      003A7B 12r00r00         [24]10417 	lcall	_stack_init
                                  10418 ;	calc.c:501: stack_init(c.ss);
      003A7E 90r40r20         [24]10419 	mov	dptr,#(_c + 0x4014)
      003A81 E0               [24]10420 	movx	a,@dptr
      003A82 FD               [12]10421 	mov	r5,a
      003A83 A3               [24]10422 	inc	dptr
      003A84 E0               [24]10423 	movx	a,@dptr
      003A85 FE               [12]10424 	mov	r6,a
      003A86 A3               [24]10425 	inc	dptr
      003A87 E0               [24]10426 	movx	a,@dptr
      003A88 FF               [12]10427 	mov	r7,a
      003A89 8D 82            [24]10428 	mov	dpl,r5
      003A8B 8E 83            [24]10429 	mov	dph,r6
      003A8D 8F F0            [24]10430 	mov	b,r7
      003A8F 12r00r00         [24]10431 	lcall	_stack_init
                                  10432 ;	calc.c:503: state_init(&s, STATE_START, STATE_FINAL, UNDEF, deltas, &c);
      003A92 74r0C            [12]10433 	mov	a,#_c
      003A94 C0 E0            [24]10434 	push	acc
      003A96 74s00            [12]10435 	mov	a,#(_c >> 8)
      003A98 C0 E0            [24]10436 	push	acc
      003A9A E4               [12]10437 	clr	a
      003A9B C0 E0            [24]10438 	push	acc
      003A9D 74r00            [12]10439 	mov	a,#_deltas
      003A9F C0 E0            [24]10440 	push	acc
      003AA1 74s00            [12]10441 	mov	a,#(_deltas >> 8)
      003AA3 C0 E0            [24]10442 	push	acc
      003AA5 E4               [12]10443 	clr	a
      003AA6 C0 E0            [24]10444 	push	acc
      003AA8 C0 E0            [24]10445 	push	acc
      003AAA 74 80            [12]10446 	mov	a,#0x80
      003AAC C0 E0            [24]10447 	push	acc
      003AAE 74 03            [12]10448 	mov	a,#0x03
      003AB0 C0 E0            [24]10449 	push	acc
      003AB2 E4               [12]10450 	clr	a
      003AB3 C0 E0            [24]10451 	push	acc
      003AB5 C0 E0            [24]10452 	push	acc
      003AB7 C0 E0            [24]10453 	push	acc
      003AB9 90r00r00         [24]10454 	mov	dptr,#_s
      003ABC 75 F0 00         [24]10455 	mov	b,#0x00
      003ABF 12r00r00         [24]10456 	lcall	_state_init
      003AC2 E5 81            [12]10457 	mov	a,sp
      003AC4 24 F4            [12]10458 	add	a,#0xf4
      003AC6 F5 81            [12]10459 	mov	sp,a
                                  10460 ;	calc.c:505: (void)status(&c, deltas);
      003AC8 74r00            [12]10461 	mov	a,#_deltas
      003ACA C0 E0            [24]10462 	push	acc
      003ACC 74s00            [12]10463 	mov	a,#(_deltas >> 8)
      003ACE C0 E0            [24]10464 	push	acc
      003AD0 E4               [12]10465 	clr	a
      003AD1 C0 E0            [24]10466 	push	acc
      003AD3 90r00r0C         [24]10467 	mov	dptr,#_c
      003AD6 75 F0 00         [24]10468 	mov	b,#0x00
      003AD9 12r2DrA9         [24]10469 	lcall	_status
      003ADC 15 81            [12]10470 	dec	sp
      003ADE 15 81            [12]10471 	dec	sp
      003AE0 15 81            [12]10472 	dec	sp
                                  10473 ;	calc.c:507: while (1) {
      003AE2                      10474 00192$:
                                  10475 ;	calc.c:508: input = getchar();
      003AE2 12r00r05         [24]10476 	lcall	_getchar
      003AE5 AE 82            [24]10477 	mov	r6,dpl
      003AE7 AF 83            [24]10478 	mov	r7,dph
                                  10479 ;	calc.c:509: if (((char)input == '\r') || ((char)input == '\n')) printstr("\r\n");
      003AE9 8E 05            [24]10480 	mov	ar5,r6
      003AEB BD 0D 02         [24]10481 	cjne	r5,#0x0d,00400$
      003AEE 80 03            [24]10482 	sjmp	00101$
      003AF0                      10483 00400$:
      003AF0 BD 0A 36         [24]10484 	cjne	r5,#0x0a,00102$
      003AF3                      10485 00101$:
      003AF3 7Ar17            [12]10486 	mov	r2,#___str_3
      003AF5 7Bs00            [12]10487 	mov	r3,#(___str_3 >> 8)
      003AF7 7C 80            [12]10488 	mov	r4,#0x80
                                  10489 ;	calc.c:51: return;
      003AF9                      10490 00199$:
                                  10491 ;	calc.c:49: for (; *s; s++) putchar(*s);
      003AF9 8A 82            [24]10492 	mov	dpl,r2
      003AFB 8B 83            [24]10493 	mov	dph,r3
      003AFD 8C F0            [24]10494 	mov	b,r4
      003AFF A8*00            [24]10495 	mov	r0,_bp
      003B01 08               [12]10496 	inc	r0
      003B02 12r00r00         [24]10497 	lcall	__gptrget
      003B05 F6               [12]10498 	mov	@r0,a
      003B06 A8*00            [24]10499 	mov	r0,_bp
      003B08 08               [12]10500 	inc	r0
      003B09 E6               [12]10501 	mov	a,@r0
      003B0A 60 24            [24]10502 	jz	00103$
      003B0C C0 06            [24]10503 	push	ar6
      003B0E C0 07            [24]10504 	push	ar7
      003B10 A8*00            [24]10505 	mov	r0,_bp
      003B12 08               [12]10506 	inc	r0
      003B13 86 06            [24]10507 	mov	ar6,@r0
      003B15 7F 00            [12]10508 	mov	r7,#0x00
      003B17 8E 82            [24]10509 	mov	dpl,r6
      003B19 8F 83            [24]10510 	mov	dph,r7
      003B1B 12r00r00         [24]10511 	lcall	_putchar
      003B1E 0A               [12]10512 	inc	r2
      003B1F BA 00 01         [24]10513 	cjne	r2,#0x00,00404$
      003B22 0B               [12]10514 	inc	r3
      003B23                      10515 00404$:
      003B23 D0 07            [24]10516 	pop	ar7
      003B25 D0 06            [24]10517 	pop	ar6
                                  10518 ;	calc.c:509: if (((char)input == '\r') || ((char)input == '\n')) printstr("\r\n");
      003B27 80 D0            [24]10519 	sjmp	00199$
      003B29                      10520 00102$:
                                  10521 ;	calc.c:510: else (void)putchar(input);
      003B29 8E 82            [24]10522 	mov	dpl,r6
      003B2B 8F 83            [24]10523 	mov	dph,r7
      003B2D 12r00r00         [24]10524 	lcall	_putchar
      003B30                      10525 00103$:
                                  10526 ;	calc.c:511: c.digit[0] = (char)input;
      003B30 90r00r13         [24]10527 	mov	dptr,#(_c + 0x0007)
      003B33 ED               [12]10528 	mov	a,r5
      003B34 F0               [24]10529 	movx	@dptr,a
                                  10530 ;	calc.c:513: if ((char)input == 'q') {
      003B35 BD 71 29         [24]10531 	cjne	r5,#0x71,00189$
                                  10532 ;	calc.c:514: if (state_exec(&s, EVENT_TERM) <= 0) break;
      003B38 74 08            [12]10533 	mov	a,#0x08
      003B3A C0 E0            [24]10534 	push	acc
      003B3C E4               [12]10535 	clr	a
      003B3D C0 E0            [24]10536 	push	acc
      003B3F 90r00r00         [24]10537 	mov	dptr,#_s
      003B42 75 F0 00         [24]10538 	mov	b,#0x00
      003B45 12r00r00         [24]10539 	lcall	_state_exec
      003B48 AB 82            [24]10540 	mov	r3,dpl
      003B4A AC 83            [24]10541 	mov	r4,dph
      003B4C 15 81            [12]10542 	dec	sp
      003B4E 15 81            [12]10543 	dec	sp
      003B50 C3               [12]10544 	clr	c
      003B51 E4               [12]10545 	clr	a
      003B52 9B               [12]10546 	subb	a,r3
      003B53 74 80            [12]10547 	mov	a,#(0x00 ^ 0x80)
      003B55 8C F0            [24]10548 	mov	b,r4
      003B57 63 F0 80         [24]10549 	xrl	b,#0x80
      003B5A 95 F0            [12]10550 	subb	a,b
      003B5C 40 84            [24]10551 	jc	00192$
      003B5E 02r3Er10         [24]10552 	ljmp	00193$
      003B61                      10553 00189$:
                                  10554 ;	calc.c:515: } else if ((char)input == 's') {
      003B61 BD 73 2C         [24]10555 	cjne	r5,#0x73,00186$
                                  10556 ;	calc.c:516: if (state_exec(&s, EVENT_STATUS) <= 0) break;
      003B64 74 03            [12]10557 	mov	a,#0x03
      003B66 C0 E0            [24]10558 	push	acc
      003B68 E4               [12]10559 	clr	a
      003B69 C0 E0            [24]10560 	push	acc
      003B6B 90r00r00         [24]10561 	mov	dptr,#_s
      003B6E 75 F0 00         [24]10562 	mov	b,#0x00
      003B71 12r00r00         [24]10563 	lcall	_state_exec
      003B74 AB 82            [24]10564 	mov	r3,dpl
      003B76 AC 83            [24]10565 	mov	r4,dph
      003B78 15 81            [12]10566 	dec	sp
      003B7A 15 81            [12]10567 	dec	sp
      003B7C C3               [12]10568 	clr	c
      003B7D E4               [12]10569 	clr	a
      003B7E 9B               [12]10570 	subb	a,r3
      003B7F 74 80            [12]10571 	mov	a,#(0x00 ^ 0x80)
      003B81 8C F0            [24]10572 	mov	b,r4
      003B83 63 F0 80         [24]10573 	xrl	b,#0x80
      003B86 95 F0            [12]10574 	subb	a,b
      003B88 50 03            [24]10575 	jnc	00410$
      003B8A 02r3ArE2         [24]10576 	ljmp	00192$
      003B8D                      10577 00410$:
      003B8D 02r3Er10         [24]10578 	ljmp	00193$
      003B90                      10579 00186$:
                                  10580 ;	calc.c:517: } else if ((char)input == '?') {
      003B90 BD 3F 2C         [24]10581 	cjne	r5,#0x3f,00183$
                                  10582 ;	calc.c:518: if (state_exec(&s, EVENT_HELP) <= 0) break;
      003B93 74 04            [12]10583 	mov	a,#0x04
      003B95 C0 E0            [24]10584 	push	acc
      003B97 E4               [12]10585 	clr	a
      003B98 C0 E0            [24]10586 	push	acc
      003B9A 90r00r00         [24]10587 	mov	dptr,#_s
      003B9D 75 F0 00         [24]10588 	mov	b,#0x00
      003BA0 12r00r00         [24]10589 	lcall	_state_exec
      003BA3 AB 82            [24]10590 	mov	r3,dpl
      003BA5 AC 83            [24]10591 	mov	r4,dph
      003BA7 15 81            [12]10592 	dec	sp
      003BA9 15 81            [12]10593 	dec	sp
      003BAB C3               [12]10594 	clr	c
      003BAC E4               [12]10595 	clr	a
      003BAD 9B               [12]10596 	subb	a,r3
      003BAE 74 80            [12]10597 	mov	a,#(0x00 ^ 0x80)
      003BB0 8C F0            [24]10598 	mov	b,r4
      003BB2 63 F0 80         [24]10599 	xrl	b,#0x80
      003BB5 95 F0            [12]10600 	subb	a,b
      003BB7 50 03            [24]10601 	jnc	00413$
      003BB9 02r3ArE2         [24]10602 	ljmp	00192$
      003BBC                      10603 00413$:
      003BBC 02r3Er10         [24]10604 	ljmp	00193$
      003BBF                      10605 00183$:
                                  10606 ;	calc.c:519: } else if ((char)input == 'i') {
      003BBF BD 69 2C         [24]10607 	cjne	r5,#0x69,00180$
                                  10608 ;	calc.c:520: if (state_exec(&s, EVENT_RSTA_i) <= 0) break;
      003BC2 74 06            [12]10609 	mov	a,#0x06
      003BC4 C0 E0            [24]10610 	push	acc
      003BC6 E4               [12]10611 	clr	a
      003BC7 C0 E0            [24]10612 	push	acc
      003BC9 90r00r00         [24]10613 	mov	dptr,#_s
      003BCC 75 F0 00         [24]10614 	mov	b,#0x00
      003BCF 12r00r00         [24]10615 	lcall	_state_exec
      003BD2 AB 82            [24]10616 	mov	r3,dpl
      003BD4 AC 83            [24]10617 	mov	r4,dph
      003BD6 15 81            [12]10618 	dec	sp
      003BD8 15 81            [12]10619 	dec	sp
      003BDA C3               [12]10620 	clr	c
      003BDB E4               [12]10621 	clr	a
      003BDC 9B               [12]10622 	subb	a,r3
      003BDD 74 80            [12]10623 	mov	a,#(0x00 ^ 0x80)
      003BDF 8C F0            [24]10624 	mov	b,r4
      003BE1 63 F0 80         [24]10625 	xrl	b,#0x80
      003BE4 95 F0            [12]10626 	subb	a,b
      003BE6 50 03            [24]10627 	jnc	00416$
      003BE8 02r3ArE2         [24]10628 	ljmp	00192$
      003BEB                      10629 00416$:
      003BEB 02r3Er10         [24]10630 	ljmp	00193$
      003BEE                      10631 00180$:
                                  10632 ;	calc.c:521: } else if ((char)input == 'I') {
      003BEE BD 49 2C         [24]10633 	cjne	r5,#0x49,00177$
                                  10634 ;	calc.c:522: if (state_exec(&s, EVENT_RSTA_I) <= 0) break;
      003BF1 74 07            [12]10635 	mov	a,#0x07
      003BF3 C0 E0            [24]10636 	push	acc
      003BF5 E4               [12]10637 	clr	a
      003BF6 C0 E0            [24]10638 	push	acc
      003BF8 90r00r00         [24]10639 	mov	dptr,#_s
      003BFB 75 F0 00         [24]10640 	mov	b,#0x00
      003BFE 12r00r00         [24]10641 	lcall	_state_exec
      003C01 AB 82            [24]10642 	mov	r3,dpl
      003C03 AC 83            [24]10643 	mov	r4,dph
      003C05 15 81            [12]10644 	dec	sp
      003C07 15 81            [12]10645 	dec	sp
      003C09 C3               [12]10646 	clr	c
      003C0A E4               [12]10647 	clr	a
      003C0B 9B               [12]10648 	subb	a,r3
      003C0C 74 80            [12]10649 	mov	a,#(0x00 ^ 0x80)
      003C0E 8C F0            [24]10650 	mov	b,r4
      003C10 63 F0 80         [24]10651 	xrl	b,#0x80
      003C13 95 F0            [12]10652 	subb	a,b
      003C15 50 03            [24]10653 	jnc	00419$
      003C17 02r3ArE2         [24]10654 	ljmp	00192$
      003C1A                      10655 00419$:
      003C1A 02r3Er10         [24]10656 	ljmp	00193$
      003C1D                      10657 00177$:
                                  10658 ;	calc.c:524: ((char)input == 'h') || ((char)input == 'H') ||
      003C1D BD 68 02         [24]10659 	cjne	r5,#0x68,00420$
      003C20 80 0D            [24]10660 	sjmp	00170$
      003C22                      10661 00420$:
      003C22 BD 48 02         [24]10662 	cjne	r5,#0x48,00421$
      003C25 80 08            [24]10663 	sjmp	00170$
      003C27                      10664 00421$:
                                  10665 ;	calc.c:525: ((char)input == 'o') || ((char)input == 'O')
      003C27 BD 6F 02         [24]10666 	cjne	r5,#0x6f,00422$
      003C2A 80 03            [24]10667 	sjmp	00170$
      003C2C                      10668 00422$:
      003C2C BD 4F 2C         [24]10669 	cjne	r5,#0x4f,00171$
      003C2F                      10670 00170$:
                                  10671 ;	calc.c:527: if (state_exec(&s, EVENT_BASE) <= 0) break;
      003C2F 74 05            [12]10672 	mov	a,#0x05
      003C31 C0 E0            [24]10673 	push	acc
      003C33 E4               [12]10674 	clr	a
      003C34 C0 E0            [24]10675 	push	acc
      003C36 90r00r00         [24]10676 	mov	dptr,#_s
      003C39 75 F0 00         [24]10677 	mov	b,#0x00
      003C3C 12r00r00         [24]10678 	lcall	_state_exec
      003C3F AB 82            [24]10679 	mov	r3,dpl
      003C41 AC 83            [24]10680 	mov	r4,dph
      003C43 15 81            [12]10681 	dec	sp
      003C45 15 81            [12]10682 	dec	sp
      003C47 C3               [12]10683 	clr	c
      003C48 E4               [12]10684 	clr	a
      003C49 9B               [12]10685 	subb	a,r3
      003C4A 74 80            [12]10686 	mov	a,#(0x00 ^ 0x80)
      003C4C 8C F0            [24]10687 	mov	b,r4
      003C4E 63 F0 80         [24]10688 	xrl	b,#0x80
      003C51 95 F0            [12]10689 	subb	a,b
      003C53 50 03            [24]10690 	jnc	00425$
      003C55 02r3ArE2         [24]10691 	ljmp	00192$
      003C58                      10692 00425$:
      003C58 02r3Er10         [24]10693 	ljmp	00193$
      003C5B                      10694 00171$:
                                  10695 ;	calc.c:528: } else if (isxdigit(input)) {
      003C5B 8E 82            [24]10696 	mov	dpl,r6
      003C5D 8F 83            [24]10697 	mov	dph,r7
      003C5F C0 05            [24]10698 	push	ar5
      003C61 12r00r00         [24]10699 	lcall	_isxdigit
      003C64 E5 82            [12]10700 	mov	a,dpl
      003C66 85 83 F0         [24]10701 	mov	b,dph
      003C69 D0 05            [24]10702 	pop	ar5
      003C6B 45 F0            [12]10703 	orl	a,b
      003C6D 60 2C            [24]10704 	jz	00168$
                                  10705 ;	calc.c:529: if (state_exec(&s, EVENT_DIGIT) <= 0) break;
      003C6F 74 01            [12]10706 	mov	a,#0x01
      003C71 C0 E0            [24]10707 	push	acc
      003C73 E4               [12]10708 	clr	a
      003C74 C0 E0            [24]10709 	push	acc
      003C76 90r00r00         [24]10710 	mov	dptr,#_s
      003C79 75 F0 00         [24]10711 	mov	b,#0x00
      003C7C 12r00r00         [24]10712 	lcall	_state_exec
      003C7F AE 82            [24]10713 	mov	r6,dpl
      003C81 AF 83            [24]10714 	mov	r7,dph
      003C83 15 81            [12]10715 	dec	sp
      003C85 15 81            [12]10716 	dec	sp
      003C87 C3               [12]10717 	clr	c
      003C88 E4               [12]10718 	clr	a
      003C89 9E               [12]10719 	subb	a,r6
      003C8A 74 80            [12]10720 	mov	a,#(0x00 ^ 0x80)
      003C8C 8F F0            [24]10721 	mov	b,r7
      003C8E 63 F0 80         [24]10722 	xrl	b,#0x80
      003C91 95 F0            [12]10723 	subb	a,b
      003C93 50 03            [24]10724 	jnc	00427$
      003C95 02r3ArE2         [24]10725 	ljmp	00192$
      003C98                      10726 00427$:
      003C98 02r3Er10         [24]10727 	ljmp	00193$
      003C9B                      10728 00168$:
                                  10729 ;	calc.c:531: ((char)input == 'p') || ((char)input == 'P') ||
      003C9B BD 70 02         [24]10730 	cjne	r5,#0x70,00428$
      003C9E 80 17            [24]10731 	sjmp	00159$
      003CA0                      10732 00428$:
      003CA0 BD 50 02         [24]10733 	cjne	r5,#0x50,00429$
      003CA3 80 12            [24]10734 	sjmp	00159$
      003CA5                      10735 00429$:
                                  10736 ;	calc.c:532: ((char)input == 'v') || ((char)input == 'V') ||
      003CA5 BD 76 02         [24]10737 	cjne	r5,#0x76,00430$
      003CA8 80 0D            [24]10738 	sjmp	00159$
      003CAA                      10739 00430$:
      003CAA BD 56 02         [24]10740 	cjne	r5,#0x56,00431$
      003CAD 80 08            [24]10741 	sjmp	00159$
      003CAF                      10742 00431$:
                                  10743 ;	calc.c:533: ((char)input == '.') ||
      003CAF BD 2E 02         [24]10744 	cjne	r5,#0x2e,00432$
      003CB2 80 03            [24]10745 	sjmp	00159$
      003CB4                      10746 00432$:
                                  10747 ;	calc.c:534: ((char)input == 'x')
      003CB4 BD 78 2C         [24]10748 	cjne	r5,#0x78,00160$
      003CB7                      10749 00159$:
                                  10750 ;	calc.c:536: if (state_exec(&s, EVENT_OP) <= 0) break;
      003CB7 74 02            [12]10751 	mov	a,#0x02
      003CB9 C0 E0            [24]10752 	push	acc
      003CBB E4               [12]10753 	clr	a
      003CBC C0 E0            [24]10754 	push	acc
      003CBE 90r00r00         [24]10755 	mov	dptr,#_s
      003CC1 75 F0 00         [24]10756 	mov	b,#0x00
      003CC4 12r00r00         [24]10757 	lcall	_state_exec
      003CC7 AE 82            [24]10758 	mov	r6,dpl
      003CC9 AF 83            [24]10759 	mov	r7,dph
      003CCB 15 81            [12]10760 	dec	sp
      003CCD 15 81            [12]10761 	dec	sp
      003CCF C3               [12]10762 	clr	c
      003CD0 E4               [12]10763 	clr	a
      003CD1 9E               [12]10764 	subb	a,r6
      003CD2 74 80            [12]10765 	mov	a,#(0x00 ^ 0x80)
      003CD4 8F F0            [24]10766 	mov	b,r7
      003CD6 63 F0 80         [24]10767 	xrl	b,#0x80
      003CD9 95 F0            [12]10768 	subb	a,b
      003CDB 50 03            [24]10769 	jnc	00435$
      003CDD 02r3ArE2         [24]10770 	ljmp	00192$
      003CE0                      10771 00435$:
      003CE0 02r3Er10         [24]10772 	ljmp	00193$
      003CE3                      10773 00160$:
                                  10774 ;	calc.c:538: ((char)input == 'X') || ((char)input == 'T') ||
      003CE3 BD 58 02         [24]10775 	cjne	r5,#0x58,00436$
      003CE6 80 17            [24]10776 	sjmp	00151$
      003CE8                      10777 00436$:
      003CE8 BD 54 02         [24]10778 	cjne	r5,#0x54,00437$
      003CEB 80 12            [24]10779 	sjmp	00151$
      003CED                      10780 00437$:
                                  10781 ;	calc.c:539: ((char)input == 'm') || ((char)input == 'M') ||
      003CED BD 6D 02         [24]10782 	cjne	r5,#0x6d,00438$
      003CF0 80 0D            [24]10783 	sjmp	00151$
      003CF2                      10784 00438$:
      003CF2 BD 4D 02         [24]10785 	cjne	r5,#0x4d,00439$
      003CF5 80 08            [24]10786 	sjmp	00151$
      003CF7                      10787 00439$:
                                  10788 ;	calc.c:540: ((char)input == 'u') || ((char)input == 'U')
      003CF7 BD 75 02         [24]10789 	cjne	r5,#0x75,00440$
      003CFA 80 03            [24]10790 	sjmp	00151$
      003CFC                      10791 00440$:
      003CFC BD 55 2C         [24]10792 	cjne	r5,#0x55,00152$
      003CFF                      10793 00151$:
                                  10794 ;	calc.c:542: if (state_exec(&s, EVENT_OP) <= 0) break;
      003CFF 74 02            [12]10795 	mov	a,#0x02
      003D01 C0 E0            [24]10796 	push	acc
      003D03 E4               [12]10797 	clr	a
      003D04 C0 E0            [24]10798 	push	acc
      003D06 90r00r00         [24]10799 	mov	dptr,#_s
      003D09 75 F0 00         [24]10800 	mov	b,#0x00
      003D0C 12r00r00         [24]10801 	lcall	_state_exec
      003D0F AE 82            [24]10802 	mov	r6,dpl
      003D11 AF 83            [24]10803 	mov	r7,dph
      003D13 15 81            [12]10804 	dec	sp
      003D15 15 81            [12]10805 	dec	sp
      003D17 C3               [12]10806 	clr	c
      003D18 E4               [12]10807 	clr	a
      003D19 9E               [12]10808 	subb	a,r6
      003D1A 74 80            [12]10809 	mov	a,#(0x00 ^ 0x80)
      003D1C 8F F0            [24]10810 	mov	b,r7
      003D1E 63 F0 80         [24]10811 	xrl	b,#0x80
      003D21 95 F0            [12]10812 	subb	a,b
      003D23 50 03            [24]10813 	jnc	00443$
      003D25 02r3ArE2         [24]10814 	ljmp	00192$
      003D28                      10815 00443$:
      003D28 02r3Er10         [24]10816 	ljmp	00193$
      003D2B                      10817 00152$:
                                  10818 ;	calc.c:544: ((char)input == '+') || ((char)input == '-')
      003D2B BD 2B 02         [24]10819 	cjne	r5,#0x2b,00444$
      003D2E 80 03            [24]10820 	sjmp	00147$
      003D30                      10821 00444$:
      003D30 BD 2D 2C         [24]10822 	cjne	r5,#0x2d,00148$
      003D33                      10823 00147$:
                                  10824 ;	calc.c:546: if (state_exec(&s, EVENT_OP) <= 0) break;
      003D33 74 02            [12]10825 	mov	a,#0x02
      003D35 C0 E0            [24]10826 	push	acc
      003D37 E4               [12]10827 	clr	a
      003D38 C0 E0            [24]10828 	push	acc
      003D3A 90r00r00         [24]10829 	mov	dptr,#_s
      003D3D 75 F0 00         [24]10830 	mov	b,#0x00
      003D40 12r00r00         [24]10831 	lcall	_state_exec
      003D43 AE 82            [24]10832 	mov	r6,dpl
      003D45 AF 83            [24]10833 	mov	r7,dph
      003D47 15 81            [12]10834 	dec	sp
      003D49 15 81            [12]10835 	dec	sp
      003D4B C3               [12]10836 	clr	c
      003D4C E4               [12]10837 	clr	a
      003D4D 9E               [12]10838 	subb	a,r6
      003D4E 74 80            [12]10839 	mov	a,#(0x00 ^ 0x80)
      003D50 8F F0            [24]10840 	mov	b,r7
      003D52 63 F0 80         [24]10841 	xrl	b,#0x80
      003D55 95 F0            [12]10842 	subb	a,b
      003D57 50 03            [24]10843 	jnc	00447$
      003D59 02r3ArE2         [24]10844 	ljmp	00192$
      003D5C                      10845 00447$:
      003D5C 02r3Er10         [24]10846 	ljmp	00193$
      003D5F                      10847 00148$:
                                  10848 ;	calc.c:548: ((char)input == '*') ||
      003D5F BD 2A 02         [24]10849 	cjne	r5,#0x2a,00448$
      003D62 80 12            [24]10850 	sjmp	00140$
      003D64                      10851 00448$:
                                  10852 ;	calc.c:549: ((char)input == '/') || ((char)input == '\\') ||
      003D64 BD 2F 02         [24]10853 	cjne	r5,#0x2f,00449$
      003D67 80 0D            [24]10854 	sjmp	00140$
      003D69                      10855 00449$:
      003D69 BD 5C 02         [24]10856 	cjne	r5,#0x5c,00450$
      003D6C 80 08            [24]10857 	sjmp	00140$
      003D6E                      10858 00450$:
                                  10859 ;	calc.c:550: ((char)input == '%') || ((char)input == '#')
      003D6E BD 25 02         [24]10860 	cjne	r5,#0x25,00451$
      003D71 80 03            [24]10861 	sjmp	00140$
      003D73                      10862 00451$:
      003D73 BD 23 29         [24]10863 	cjne	r5,#0x23,00141$
      003D76                      10864 00140$:
                                  10865 ;	calc.c:552: if (state_exec(&s, EVENT_OP) <= 0) break;
      003D76 74 02            [12]10866 	mov	a,#0x02
      003D78 C0 E0            [24]10867 	push	acc
      003D7A E4               [12]10868 	clr	a
      003D7B C0 E0            [24]10869 	push	acc
      003D7D 90r00r00         [24]10870 	mov	dptr,#_s
      003D80 75 F0 00         [24]10871 	mov	b,#0x00
      003D83 12r00r00         [24]10872 	lcall	_state_exec
      003D86 AE 82            [24]10873 	mov	r6,dpl
      003D88 AF 83            [24]10874 	mov	r7,dph
      003D8A 15 81            [12]10875 	dec	sp
      003D8C 15 81            [12]10876 	dec	sp
      003D8E C3               [12]10877 	clr	c
      003D8F E4               [12]10878 	clr	a
      003D90 9E               [12]10879 	subb	a,r6
      003D91 74 80            [12]10880 	mov	a,#(0x00 ^ 0x80)
      003D93 8F F0            [24]10881 	mov	b,r7
      003D95 63 F0 80         [24]10882 	xrl	b,#0x80
      003D98 95 F0            [12]10883 	subb	a,b
      003D9A 50 74            [24]10884 	jnc	00193$
      003D9C 02r3ArE2         [24]10885 	ljmp	00192$
      003D9F                      10886 00141$:
                                  10887 ;	calc.c:554: ((char)input == '&') ||
      003D9F BD 26 02         [24]10888 	cjne	r5,#0x26,00455$
      003DA2 80 1C            [24]10889 	sjmp	00131$
      003DA4                      10890 00455$:
                                  10891 ;	calc.c:555: ((char)input == '|') || ((char)input == '^') ||
      003DA4 BD 7C 02         [24]10892 	cjne	r5,#0x7c,00456$
      003DA7 80 17            [24]10893 	sjmp	00131$
      003DA9                      10894 00456$:
      003DA9 BD 5E 02         [24]10895 	cjne	r5,#0x5e,00457$
      003DAC 80 12            [24]10896 	sjmp	00131$
      003DAE                      10897 00457$:
                                  10898 ;	calc.c:556: ((char)input == '~') ||
      003DAE BD 7E 02         [24]10899 	cjne	r5,#0x7e,00458$
      003DB1 80 0D            [24]10900 	sjmp	00131$
      003DB3                      10901 00458$:
                                  10902 ;	calc.c:557: ((char)input == '>') || ((char)input == ']') ||
      003DB3 BD 3E 02         [24]10903 	cjne	r5,#0x3e,00459$
      003DB6 80 08            [24]10904 	sjmp	00131$
      003DB8                      10905 00459$:
      003DB8 BD 5D 02         [24]10906 	cjne	r5,#0x5d,00460$
      003DBB 80 03            [24]10907 	sjmp	00131$
      003DBD                      10908 00460$:
                                  10909 ;	calc.c:558: ((char)input == '<')
      003DBD BD 3C 29         [24]10910 	cjne	r5,#0x3c,00132$
      003DC0                      10911 00131$:
                                  10912 ;	calc.c:560: if (state_exec(&s, EVENT_OP) <= 0) break;
      003DC0 74 02            [12]10913 	mov	a,#0x02
      003DC2 C0 E0            [24]10914 	push	acc
      003DC4 E4               [12]10915 	clr	a
      003DC5 C0 E0            [24]10916 	push	acc
      003DC7 90r00r00         [24]10917 	mov	dptr,#_s
      003DCA 75 F0 00         [24]10918 	mov	b,#0x00
      003DCD 12r00r00         [24]10919 	lcall	_state_exec
      003DD0 AE 82            [24]10920 	mov	r6,dpl
      003DD2 AF 83            [24]10921 	mov	r7,dph
      003DD4 15 81            [12]10922 	dec	sp
      003DD6 15 81            [12]10923 	dec	sp
      003DD8 C3               [12]10924 	clr	c
      003DD9 E4               [12]10925 	clr	a
      003DDA 9E               [12]10926 	subb	a,r6
      003DDB 74 80            [12]10927 	mov	a,#(0x00 ^ 0x80)
      003DDD 8F F0            [24]10928 	mov	b,r7
      003DDF 63 F0 80         [24]10929 	xrl	b,#0x80
      003DE2 95 F0            [12]10930 	subb	a,b
      003DE4 50 2A            [24]10931 	jnc	00193$
      003DE6 02r3ArE2         [24]10932 	ljmp	00192$
      003DE9                      10933 00132$:
                                  10934 ;	calc.c:562: if (state_exec(&s, EVENT_DELIM) <= 0) break;
      003DE9 E4               [12]10935 	clr	a
      003DEA C0 E0            [24]10936 	push	acc
      003DEC C0 E0            [24]10937 	push	acc
      003DEE 90r00r00         [24]10938 	mov	dptr,#_s
      003DF1 75 F0 00         [24]10939 	mov	b,#0x00
      003DF4 12r00r00         [24]10940 	lcall	_state_exec
      003DF7 AE 82            [24]10941 	mov	r6,dpl
      003DF9 AF 83            [24]10942 	mov	r7,dph
      003DFB 15 81            [12]10943 	dec	sp
      003DFD 15 81            [12]10944 	dec	sp
      003DFF C3               [12]10945 	clr	c
      003E00 E4               [12]10946 	clr	a
      003E01 9E               [12]10947 	subb	a,r6
      003E02 74 80            [12]10948 	mov	a,#(0x00 ^ 0x80)
      003E04 8F F0            [24]10949 	mov	b,r7
      003E06 63 F0 80         [24]10950 	xrl	b,#0x80
      003E09 95 F0            [12]10951 	subb	a,b
      003E0B 50 03            [24]10952 	jnc	00464$
      003E0D 02r3ArE2         [24]10953 	ljmp	00192$
      003E10                      10954 00464$:
      003E10                      10955 00193$:
                                  10956 ;	calc.c:566: printstr("TERM\r\n");
      003E10 7DrA8            [12]10957 	mov	r5,#___str_52
      003E12 7Es03            [12]10958 	mov	r6,#(___str_52 >> 8)
      003E14 7F 80            [12]10959 	mov	r7,#0x80
                                  10960 ;	calc.c:51: return;
      003E16                      10961 00202$:
                                  10962 ;	calc.c:49: for (; *s; s++) putchar(*s);
      003E16 8D 82            [24]10963 	mov	dpl,r5
      003E18 8E 83            [24]10964 	mov	dph,r6
      003E1A 8F F0            [24]10965 	mov	b,r7
      003E1C 12r00r00         [24]10966 	lcall	__gptrget
      003E1F FC               [12]10967 	mov	r4,a
      003E20 60 10            [24]10968 	jz	00197$
      003E22 7B 00            [12]10969 	mov	r3,#0x00
      003E24 8C 82            [24]10970 	mov	dpl,r4
      003E26 8B 83            [24]10971 	mov	dph,r3
      003E28 12r00r00         [24]10972 	lcall	_putchar
      003E2B 0D               [12]10973 	inc	r5
                                  10974 ;	calc.c:566: printstr("TERM\r\n");
      003E2C BD 00 E7         [24]10975 	cjne	r5,#0x00,00202$
      003E2F 0E               [12]10976 	inc	r6
      003E30 80 E4            [24]10977 	sjmp	00202$
      003E32                      10978 00197$:
                                  10979 ;	calc.c:568: PCON |= 2;
      003E32 43 87 02         [24]10980 	orl	_PCON,#0x02
                                  10981 ;	calc.c:570: return;
                                  10982 ;	calc.c:571: }
      003E35 15 81            [12]10983 	dec	sp
      003E37 D0*00            [24]10984 	pop	_bp
      003E39 22               [24]10985 	ret
                                  10986 	.area CSEG    (CODE)
                                  10987 	.area CONST   (CODE)
                                  10988 	.area CONST   (CODE)
      000000                      10989 ___str_0:
      000000 25 30 38 6C 78       10990 	.ascii "%08lx"
      000005 09                   10991 	.db 0x09
      000006 00                   10992 	.db 0x00
                                  10993 	.area CSEG    (CODE)
                                  10994 	.area CONST   (CODE)
      000007                      10995 ___str_1:
      000007 25 20 31 31 6C 64    10996 	.ascii "% 11ld"
      00000D 09                   10997 	.db 0x09
      00000E 00                   10998 	.db 0x00
                                  10999 	.area CSEG    (CODE)
                                  11000 	.area CONST   (CODE)
      00000F                      11001 ___str_2:
      00000F 25 30 31 31 6C 6F    11002 	.ascii "%011lo"
      000015 09                   11003 	.db 0x09
      000016 00                   11004 	.db 0x00
                                  11005 	.area CSEG    (CODE)
                                  11006 	.area CONST   (CODE)
      000017                      11007 ___str_3:
      000017 0D                   11008 	.db 0x0d
      000018 0A                   11009 	.db 0x0a
      000019 00                   11010 	.db 0x00
                                  11011 	.area CSEG    (CODE)
                                  11012 	.area CONST   (CODE)
      00001A                      11013 ___str_4:
      00001A 73 74 61 63 6B 20 75 11014 	.ascii "stack underflow"
             6E 64 65 72 66 6C 6F
             77
      000029 0D                   11015 	.db 0x0d
      00002A 0A                   11016 	.db 0x0a
      00002B 00                   11017 	.db 0x00
                                  11018 	.area CSEG    (CODE)
                                  11019 	.area CONST   (CODE)
      00002C                      11020 ___str_5:
      00002C 50 53 50 41          11021 	.ascii "PSPA"
      000030 09                   11022 	.db 0x09
      000031 00                   11023 	.db 0x00
                                  11024 	.area CSEG    (CODE)
                                  11025 	.area CONST   (CODE)
      000032                      11026 ___str_6:
      000032 53 53 50 41          11027 	.ascii "SSPA"
      000036 09                   11028 	.db 0x09
      000037 00                   11029 	.db 0x00
                                  11030 	.area CSEG    (CODE)
                                  11031 	.area CONST   (CODE)
      000038                      11032 ___str_7:
      000038 50 53 56 41          11033 	.ascii "PSVA"
      00003C 09                   11034 	.db 0x09
      00003D 00                   11035 	.db 0x00
                                  11036 	.area CSEG    (CODE)
                                  11037 	.area CONST   (CODE)
      00003E                      11038 ___str_8:
      00003E 50 53 56 54 4F 50    11039 	.ascii "PSVTOP"
      000044 09                   11040 	.db 0x09
      000045 00                   11041 	.db 0x00
                                  11042 	.area CSEG    (CODE)
                                  11043 	.area CONST   (CODE)
      000046                      11044 ___str_9:
      000046 50 53 50 54 4F 50    11045 	.ascii "PSPTOP"
      00004C 09                   11046 	.db 0x09
      00004D 00                   11047 	.db 0x00
                                  11048 	.area CSEG    (CODE)
                                  11049 	.area CONST   (CODE)
      00004E                      11050 ___str_10:
      00004E 0D                   11051 	.db 0x0d
      00004F 0A                   11052 	.db 0x0a
      000050 73 74 61 63 6B 20 75 11053 	.ascii "stack underflow"
             6E 64 65 72 66 6C 6F
             77
      00005F 0D                   11054 	.db 0x0d
      000060 0A                   11055 	.db 0x0a
      000061 00                   11056 	.db 0x00
                                  11057 	.area CSEG    (CODE)
                                  11058 	.area CONST   (CODE)
      000062                      11059 ___str_11:
      000062 0D                   11060 	.db 0x0d
      000063 0A                   11061 	.db 0x0a
      000064 73 65 63 6F 6E 64 61 11062 	.ascii "secondary stack overflow"
             72 79 20 73 74 61 63
             6B 20 6F 76 65 72 66
             6C 6F 77
      00007C 0D                   11063 	.db 0x0d
      00007D 0A                   11064 	.db 0x0a
      00007E 00                   11065 	.db 0x00
                                  11066 	.area CSEG    (CODE)
                                  11067 	.area CONST   (CODE)
      00007F                      11068 ___str_12:
      00007F 0D                   11069 	.db 0x0d
      000080 0A                   11070 	.db 0x0a
      000081 73 65 63 6F 6E 64 61 11071 	.ascii "secondary stack underflow"
             72 79 20 73 74 61 63
             6B 20 75 6E 64 65 72
             66 6C 6F 77
      00009A 0D                   11072 	.db 0x0d
      00009B 0A                   11073 	.db 0x0a
      00009C 00                   11074 	.db 0x00
                                  11075 	.area CSEG    (CODE)
                                  11076 	.area CONST   (CODE)
      00009D                      11077 ___str_13:
      00009D 0D                   11078 	.db 0x0d
      00009E 0A                   11079 	.db 0x0a
      00009F 73 74 61 63 6B 20 6F 11080 	.ascii "stack overflow"
             76 65 72 66 6C 6F 77
      0000AD 0D                   11081 	.db 0x0d
      0000AE 0A                   11082 	.db 0x0a
      0000AF 00                   11083 	.db 0x00
                                  11084 	.area CSEG    (CODE)
                                  11085 	.area CONST   (CODE)
      0000B0                      11086 ___str_14:
      0000B0 0D                   11087 	.db 0x0d
      0000B1 0A                   11088 	.db 0x0a
      0000B2 64 69 76 69 73 69 6F 11089 	.ascii "division by zero"
             6E 20 62 79 20 7A 65
             72 6F
      0000C2 0D                   11090 	.db 0x0d
      0000C3 0A                   11091 	.db 0x0a
      0000C4 00                   11092 	.db 0x00
                                  11093 	.area CSEG    (CODE)
                                  11094 	.area CONST   (CODE)
      0000C5                      11095 ___str_15:
      0000C5 0D                   11096 	.db 0x0d
      0000C6 0A                   11097 	.db 0x0a
      0000C7 50 53 20 3D 20 25 70 11098 	.ascii "PS = %p, SS = %p, base = %d"
             2C 20 53 53 20 3D 20
             25 70 2C 20 62 61 73
             65 20 3D 20 25 64
      0000E2 0D                   11099 	.db 0x0d
      0000E3 0A                   11100 	.db 0x0a
      0000E4 00                   11101 	.db 0x00
                                  11102 	.area CSEG    (CODE)
                                  11103 	.area CONST   (CODE)
      0000E5                      11104 ___str_16:
      0000E5 41 43 43             11105 	.ascii "ACC"
      0000E8 09                   11106 	.db 0x09
      0000E9 00                   11107 	.db 0x00
                                  11108 	.area CSEG    (CODE)
                                  11109 	.area CONST   (CODE)
      0000EA                      11110 ___str_17:
      0000EA 0D                   11111 	.db 0x0d
      0000EB 0A                   11112 	.db 0x0a
      0000EC 50 53 54 4F 50 31    11113 	.ascii "PSTOP1"
      0000F2 09                   11114 	.db 0x09
      0000F3 00                   11115 	.db 0x00
                                  11116 	.area CSEG    (CODE)
                                  11117 	.area CONST   (CODE)
      0000F4                      11118 ___str_18:
      0000F4 0D                   11119 	.db 0x0d
      0000F5 0A                   11120 	.db 0x0a
      0000F6 50 53 54 4F 50 30    11121 	.ascii "PSTOP0"
      0000FC 09                   11122 	.db 0x09
      0000FD 00                   11123 	.db 0x00
                                  11124 	.area CSEG    (CODE)
                                  11125 	.area CONST   (CODE)
      0000FE                      11126 ___str_19:
      0000FE 0D                   11127 	.db 0x0d
      0000FF 0A                   11128 	.db 0x0a
      000100 53 53 54 4F 50 31    11129 	.ascii "SSTOP1"
      000106 09                   11130 	.db 0x09
      000107 00                   11131 	.db 0x00
                                  11132 	.area CSEG    (CODE)
                                  11133 	.area CONST   (CODE)
      000108                      11134 ___str_20:
      000108 0D                   11135 	.db 0x0d
      000109 0A                   11136 	.db 0x0a
      00010A 53 53 54 4F 50 30    11137 	.ascii "SSTOP0"
      000110 09                   11138 	.db 0x09
      000111 00                   11139 	.db 0x00
                                  11140 	.area CSEG    (CODE)
                                  11141 	.area CONST   (CODE)
      000112                      11142 ___str_21:
      000112 0D                   11143 	.db 0x0d
      000113 0A                   11144 	.db 0x0a
      000114 48 68 4F 6F          11145 	.ascii "HhOo"
      000118 09                   11146 	.db 0x09
      000119 62 61 73 65 20 31 36 11147 	.ascii "base 16 10 8 2"
             20 31 30 20 38 20 32
      000127 0D                   11148 	.db 0x0d
      000128 0A                   11149 	.db 0x0a
      000129 00                   11150 	.db 0x00
                                  11151 	.area CSEG    (CODE)
                                  11152 	.area CONST   (CODE)
      00012A                      11153 ___str_22:
      00012A 70 2E                11154 	.ascii "p."
      00012C 09                   11155 	.db 0x09
      00012D 70 6F 70 20 74 6F 70 11156 	.ascii "pop top"
      000134 0D                   11157 	.db 0x0d
      000135 0A                   11158 	.db 0x0a
      000136 00                   11159 	.db 0x00
                                  11160 	.area CSEG    (CODE)
                                  11161 	.area CONST   (CODE)
      000137                      11162 ___str_23:
      000137 50                   11163 	.ascii "P"
      000138 09                   11164 	.db 0x09
      000139 70 6F 70 20 73 74 61 11165 	.ascii "pop stack"
             63 6B
      000142 0D                   11166 	.db 0x0d
      000143 0A                   11167 	.db 0x0a
      000144 00                   11168 	.db 0x00
                                  11169 	.area CSEG    (CODE)
                                  11170 	.area CONST   (CODE)
      000145                      11171 ___str_24:
      000145 76                   11172 	.ascii "v"
      000146 09                   11173 	.db 0x09
      000147 70 65 65 6B 20 74 6F 11174 	.ascii "peek top"
             70
      00014F 0D                   11175 	.db 0x0d
      000150 0A                   11176 	.db 0x0a
      000151 00                   11177 	.db 0x00
                                  11178 	.area CSEG    (CODE)
                                  11179 	.area CONST   (CODE)
      000152                      11180 ___str_25:
      000152 56                   11181 	.ascii "V"
      000153 09                   11182 	.db 0x09
      000154 70 65 65 6B 20 73 74 11183 	.ascii "peek stack"
             61 63 6B
      00015E 0D                   11184 	.db 0x0d
      00015F 0A                   11185 	.db 0x0a
      000160 00                   11186 	.db 0x00
                                  11187 	.area CSEG    (CODE)
                                  11188 	.area CONST   (CODE)
      000161                      11189 ___str_26:
      000161 69                   11190 	.ascii "i"
      000162 09                   11191 	.db 0x09
      000163 72 65 73 65 74 20 61 11192 	.ascii "reset acc"
             63 63
      00016C 0D                   11193 	.db 0x0d
      00016D 0A                   11194 	.db 0x0a
      00016E 00                   11195 	.db 0x00
                                  11196 	.area CSEG    (CODE)
                                  11197 	.area CONST   (CODE)
      00016F                      11198 ___str_27:
      00016F 49                   11199 	.ascii "I"
      000170 09                   11200 	.db 0x09
      000171 72 65 73 65 74 20 61 11201 	.ascii "reset and discard acc"
             6E 64 20 64 69 73 63
             61 72 64 20 61 63 63
      000186 0D                   11202 	.db 0x0d
      000187 0A                   11203 	.db 0x0a
      000188 00                   11204 	.db 0x00
                                  11205 	.area CSEG    (CODE)
                                  11206 	.area CONST   (CODE)
      000189                      11207 ___str_28:
      000189 78                   11208 	.ascii "x"
      00018A 09                   11209 	.db 0x09
      00018B 65 78 63 68 61 6E 67 11210 	.ascii "exchange top 2"
             65 20 74 6F 70 20 32
      000199 0D                   11211 	.db 0x0d
      00019A 0A                   11212 	.db 0x0a
      00019B 00                   11213 	.db 0x00
                                  11214 	.area CSEG    (CODE)
                                  11215 	.area CONST   (CODE)
      00019C                      11216 ___str_29:
      00019C 58                   11217 	.ascii "X"
      00019D 09                   11218 	.db 0x09
      00019E 65 78 63 68 61 6E 67 11219 	.ascii "exchange stacks primary <-> secondary"
             65 20 73 74 61 63 6B
             73 20 70 72 69 6D 61
             72 79 20 3C 2D 3E 20
             73 65 63 6F 6E 64 61
             72 79
      0001C3 0D                   11220 	.db 0x0d
      0001C4 0A                   11221 	.db 0x0a
      0001C5 00                   11222 	.db 0x00
                                  11223 	.area CSEG    (CODE)
                                  11224 	.area CONST   (CODE)
      0001C6                      11225 ___str_30:
      0001C6 54                   11226 	.ascii "T"
      0001C7 09                   11227 	.db 0x09
      0001C8 65 78 63 68 61 6E 67 11228 	.ascii "exchange tops primary <-> secondary"
             65 20 74 6F 70 73 20
             70 72 69 6D 61 72 79
             20 3C 2D 3E 20 73 65
             63 6F 6E 64 61 72 79
      0001EB 0D                   11229 	.db 0x0d
      0001EC 0A                   11230 	.db 0x0a
      0001ED 00                   11231 	.db 0x00
                                  11232 	.area CSEG    (CODE)
                                  11233 	.area CONST   (CODE)
      0001EE                      11234 ___str_31:
      0001EE 55                   11235 	.ascii "U"
      0001EF 09                   11236 	.db 0x09
      0001F0 63 6F 70 79 20 74 6F 11237 	.ascii "copy top secondary -> primary"
             70 20 73 65 63 6F 6E
             64 61 72 79 20 2D 3E
             20 70 72 69 6D 61 72
             79
      00020D 0D                   11238 	.db 0x0d
      00020E 0A                   11239 	.db 0x0a
      00020F 00                   11240 	.db 0x00
                                  11241 	.area CSEG    (CODE)
                                  11242 	.area CONST   (CODE)
      000210                      11243 ___str_32:
      000210 75                   11244 	.ascii "u"
      000211 09                   11245 	.db 0x09
      000212 63 6F 70 79 20 74 6F 11246 	.ascii "copy top primary -> secondary"
             70 20 70 72 69 6D 61
             72 79 20 2D 3E 20 73
             65 63 6F 6E 64 61 72
             79
      00022F 0D                   11247 	.db 0x0d
      000230 0A                   11248 	.db 0x0a
      000231 00                   11249 	.db 0x00
                                  11250 	.area CSEG    (CODE)
                                  11251 	.area CONST   (CODE)
      000232                      11252 ___str_33:
      000232 4D                   11253 	.ascii "M"
      000233 09                   11254 	.db 0x09
      000234 6D 6F 76 65 20 74 6F 11255 	.ascii "move top secondary -> primary"
             70 20 73 65 63 6F 6E
             64 61 72 79 20 2D 3E
             20 70 72 69 6D 61 72
             79
      000251 0D                   11256 	.db 0x0d
      000252 0A                   11257 	.db 0x0a
      000253 00                   11258 	.db 0x00
                                  11259 	.area CSEG    (CODE)
                                  11260 	.area CONST   (CODE)
      000254                      11261 ___str_34:
      000254 6D                   11262 	.ascii "m"
      000255 09                   11263 	.db 0x09
      000256 6D 6F 76 65 20 74 6F 11264 	.ascii "move top primary -> secondary"
             70 20 70 72 69 6D 61
             72 79 20 2D 3E 20 73
             65 63 6F 6E 64 61 72
             79
      000273 0D                   11265 	.db 0x0d
      000274 0A                   11266 	.db 0x0a
      000275 00                   11267 	.db 0x00
                                  11268 	.area CSEG    (CODE)
                                  11269 	.area CONST   (CODE)
      000276                      11270 ___str_35:
      000276 2B                   11271 	.ascii "+"
      000277 09                   11272 	.db 0x09
      000278 61 64 64 20 74 6F 70 11273 	.ascii "add top 2"
             20 32
      000281 0D                   11274 	.db 0x0d
      000282 0A                   11275 	.db 0x0a
      000283 00                   11276 	.db 0x00
                                  11277 	.area CSEG    (CODE)
                                  11278 	.area CONST   (CODE)
      000284                      11279 ___str_36:
      000284 2D                   11280 	.ascii "-"
      000285 09                   11281 	.db 0x09
      000286 73 75 62 74 72 61 63 11282 	.ascii "subtract top 2"
             74 20 74 6F 70 20 32
      000294 0D                   11283 	.db 0x0d
      000295 0A                   11284 	.db 0x0a
      000296 00                   11285 	.db 0x00
                                  11286 	.area CSEG    (CODE)
                                  11287 	.area CONST   (CODE)
      000297                      11288 ___str_37:
      000297 2A                   11289 	.ascii "*"
      000298 09                   11290 	.db 0x09
      000299 6D 75 6C 74 69 70 6C 11291 	.ascii "multiply top 2"
             79 20 74 6F 70 20 32
      0002A7 0D                   11292 	.db 0x0d
      0002A8 0A                   11293 	.db 0x0a
      0002A9 00                   11294 	.db 0x00
                                  11295 	.area CSEG    (CODE)
                                  11296 	.area CONST   (CODE)
      0002AA                      11297 ___str_38:
      0002AA 2F                   11298 	.ascii "/"
      0002AB 09                   11299 	.db 0x09
      0002AC 64 69 76 69 64 65 20 11300 	.ascii "divide top 2"
             74 6F 70 20 32
      0002B8 0D                   11301 	.db 0x0d
      0002B9 0A                   11302 	.db 0x0a
      0002BA 00                   11303 	.db 0x00
                                  11304 	.area CSEG    (CODE)
                                  11305 	.area CONST   (CODE)
      0002BB                      11306 ___str_39:
      0002BB 5C                   11307 	.db 0x5c
      0002BC 09                   11308 	.db 0x09
      0002BD 64 69 76 69 64 65 20 11309 	.ascii "divide top 2 unsigned"
             74 6F 70 20 32 20 75
             6E 73 69 67 6E 65 64
      0002D2 0D                   11310 	.db 0x0d
      0002D3 0A                   11311 	.db 0x0a
      0002D4 00                   11312 	.db 0x00
                                  11313 	.area CSEG    (CODE)
                                  11314 	.area CONST   (CODE)
      0002D5                      11315 ___str_40:
      0002D5 25                   11316 	.ascii "%"
      0002D6 09                   11317 	.db 0x09
      0002D7 6D 6F 64 75 6C 75 73 11318 	.ascii "modulus top 2"
             20 74 6F 70 20 32
      0002E4 0D                   11319 	.db 0x0d
      0002E5 0A                   11320 	.db 0x0a
      0002E6 00                   11321 	.db 0x00
                                  11322 	.area CSEG    (CODE)
                                  11323 	.area CONST   (CODE)
      0002E7                      11324 ___str_41:
      0002E7 23                   11325 	.ascii "#"
      0002E8 09                   11326 	.db 0x09
      0002E9 6D 6F 64 75 6C 75 73 11327 	.ascii "modulus top 2 unsigned"
             20 74 6F 70 20 32 20
             75 6E 73 69 67 6E 65
             64
      0002FF 0D                   11328 	.db 0x0d
      000300 0A                   11329 	.db 0x0a
      000301 00                   11330 	.db 0x00
                                  11331 	.area CSEG    (CODE)
                                  11332 	.area CONST   (CODE)
      000302                      11333 ___str_42:
      000302 26                   11334 	.ascii "&"
      000303 09                   11335 	.db 0x09
      000304 61 6E 64 20 74 6F 70 11336 	.ascii "and top 2"
             20 32
      00030D 0D                   11337 	.db 0x0d
      00030E 0A                   11338 	.db 0x0a
      00030F 00                   11339 	.db 0x00
                                  11340 	.area CSEG    (CODE)
                                  11341 	.area CONST   (CODE)
      000310                      11342 ___str_43:
      000310 7C                   11343 	.ascii "|"
      000311 09                   11344 	.db 0x09
      000312 6F 72 20 74 6F 70 20 11345 	.ascii "or top 2"
             32
      00031A 0D                   11346 	.db 0x0d
      00031B 0A                   11347 	.db 0x0a
      00031C 00                   11348 	.db 0x00
                                  11349 	.area CSEG    (CODE)
                                  11350 	.area CONST   (CODE)
      00031D                      11351 ___str_44:
      00031D 5E                   11352 	.ascii "^"
      00031E 09                   11353 	.db 0x09
      00031F 78 6F 72 20 74 6F 70 11354 	.ascii "xor top 2"
             20 32
      000328 0D                   11355 	.db 0x0d
      000329 0A                   11356 	.db 0x0a
      00032A 00                   11357 	.db 0x00
                                  11358 	.area CSEG    (CODE)
                                  11359 	.area CONST   (CODE)
      00032B                      11360 ___str_45:
      00032B 3E                   11361 	.ascii ">"
      00032C 09                   11362 	.db 0x09
      00032D 73 68 69 66 74 20 72 11363 	.ascii "shift right top 2"
             69 67 68 74 20 74 6F
             70 20 32
      00033E 0D                   11364 	.db 0x0d
      00033F 0A                   11365 	.db 0x0a
      000340 00                   11366 	.db 0x00
                                  11367 	.area CSEG    (CODE)
                                  11368 	.area CONST   (CODE)
      000341                      11369 ___str_46:
      000341 5D                   11370 	.ascii "]"
      000342 09                   11371 	.db 0x09
      000343 61 72 69 74 68 6D 65 11372 	.ascii "arithmetic shift right top 2"
             74 69 63 20 73 68 69
             66 74 20 72 69 67 68
             74 20 74 6F 70 20 32
      00035F 0D                   11373 	.db 0x0d
      000360 0A                   11374 	.db 0x0a
      000361 00                   11375 	.db 0x00
                                  11376 	.area CSEG    (CODE)
                                  11377 	.area CONST   (CODE)
      000362                      11378 ___str_47:
      000362 3C                   11379 	.ascii "<"
      000363 09                   11380 	.db 0x09
      000364 73 68 69 66 74 20 6C 11381 	.ascii "shift left top 2"
             65 66 74 20 74 6F 70
             20 32
      000374 0D                   11382 	.db 0x0d
      000375 0A                   11383 	.db 0x0a
      000376 00                   11384 	.db 0x00
                                  11385 	.area CSEG    (CODE)
                                  11386 	.area CONST   (CODE)
      000377                      11387 ___str_48:
      000377 7E                   11388 	.ascii "~"
      000378 09                   11389 	.db 0x09
      000379 62 69 74 77 69 73 65 11390 	.ascii "bitwise not top"
             20 6E 6F 74 20 74 6F
             70
      000388 0D                   11391 	.db 0x0d
      000389 0A                   11392 	.db 0x0a
      00038A 00                   11393 	.db 0x00
                                  11394 	.area CSEG    (CODE)
                                  11395 	.area CONST   (CODE)
      00038B                      11396 ___str_49:
      00038B 73                   11397 	.ascii "s"
      00038C 09                   11398 	.db 0x09
      00038D 73 74 61 74 75 73    11399 	.ascii "status"
      000393 0D                   11400 	.db 0x0d
      000394 0A                   11401 	.db 0x0a
      000395 00                   11402 	.db 0x00
                                  11403 	.area CSEG    (CODE)
                                  11404 	.area CONST   (CODE)
      000396                      11405 ___str_50:
      000396 3F                   11406 	.ascii "?"
      000397 09                   11407 	.db 0x09
      000398 68 65 6C 70          11408 	.ascii "help"
      00039C 0D                   11409 	.db 0x0d
      00039D 0A                   11410 	.db 0x0a
      00039E 00                   11411 	.db 0x00
                                  11412 	.area CSEG    (CODE)
                                  11413 	.area CONST   (CODE)
      00039F                      11414 ___str_51:
      00039F 71                   11415 	.ascii "q"
      0003A0 09                   11416 	.db 0x09
      0003A1 71 75 69 74          11417 	.ascii "quit"
      0003A5 0D                   11418 	.db 0x0d
      0003A6 0A                   11419 	.db 0x0a
      0003A7 00                   11420 	.db 0x00
                                  11421 	.area CSEG    (CODE)
                                  11422 	.area CONST   (CODE)
      0003A8                      11423 ___str_52:
      0003A8 54 45 52 4D          11424 	.ascii "TERM"
      0003AC 0D                   11425 	.db 0x0d
      0003AD 0A                   11426 	.db 0x0a
      0003AE 00                   11427 	.db 0x00
                                  11428 	.area CSEG    (CODE)
                                  11429 	.area XINIT   (CODE)
      000000                      11430 __xinit__deltas:
      000000 00 00                11431 	.byte #0x00, #0x00	;  0
      000002 00 00                11432 	.byte #0x00, #0x00	;  0
      000004 00 00                11433 	.byte #0x00, #0x00	;  0
      000006 00 00                11434 	.byte #0x00,#0x00
      000008 00 00                11435 	.byte #0x00,#0x00
      00000A 00 00                11436 	.byte #0x00, #0x00	;  0
      00000C 01 00                11437 	.byte #0x01, #0x00	;  1
      00000E 02 00                11438 	.byte #0x02, #0x00	;  2
      000010 00 00                11439 	.byte #0x00,#0x00
      000012r22s00                11440 	.byte _accumulate, (_accumulate >> 8)
      000014 00 00                11441 	.byte #0x00, #0x00	;  0
      000016 02 00                11442 	.byte #0x02, #0x00	;  2
      000018 01 00                11443 	.byte #0x01, #0x00	;  1
      00001A 00 00                11444 	.byte #0x00,#0x00
      00001CrA4s08                11445 	.byte _operator, (_operator >> 8)
      00001E 01 00                11446 	.byte #0x01, #0x00	;  1
      000020 00 00                11447 	.byte #0x00, #0x00	;  0
      000022 00 00                11448 	.byte #0x00, #0x00	;  0
      000024 00 00                11449 	.byte #0x00,#0x00
      000026 00 00                11450 	.byte #0x00,#0x00
      000028 01 00                11451 	.byte #0x01, #0x00	;  1
      00002A 02 00                11452 	.byte #0x02, #0x00	;  2
      00002C 01 00                11453 	.byte #0x01, #0x00	;  1
      00002E 00 00                11454 	.byte #0x00,#0x00
      000030rA4s08                11455 	.byte _operator, (_operator >> 8)
      000032 01 00                11456 	.byte #0x01, #0x00	;  1
      000034 01 00                11457 	.byte #0x01, #0x00	;  1
      000036 02 00                11458 	.byte #0x02, #0x00	;  2
      000038 00 00                11459 	.byte #0x00,#0x00
      00003Ar22s00                11460 	.byte _accumulate, (_accumulate >> 8)
      00003C 02 00                11461 	.byte #0x02, #0x00	;  2
      00003E 00 00                11462 	.byte #0x00, #0x00	;  0
      000040 00 00                11463 	.byte #0x00, #0x00	;  0
      000042 00 00                11464 	.byte #0x00,#0x00
      000044r9Es2B                11465 	.byte _push_acc, (_push_acc >> 8)
      000046 02 00                11466 	.byte #0x02, #0x00	;  2
      000048 07 00                11467 	.byte #0x07, #0x00	;  7
      00004A 00 00                11468 	.byte #0x00, #0x00	;  0
      00004C 00 00                11469 	.byte #0x00,#0x00
      00004ErC1s2C                11470 	.byte _reset_acc, (_reset_acc >> 8)
      000050 02 00                11471 	.byte #0x02, #0x00	;  2
      000052 01 00                11472 	.byte #0x01, #0x00	;  1
      000054 02 00                11473 	.byte #0x02, #0x00	;  2
      000056 00 00                11474 	.byte #0x00,#0x00
      000058r22s00                11475 	.byte _accumulate, (_accumulate >> 8)
      00005A 02 00                11476 	.byte #0x02, #0x00	;  2
      00005C 02 00                11477 	.byte #0x02, #0x00	;  2
      00005E 01 00                11478 	.byte #0x01, #0x00	;  1
      000060 00 00                11479 	.byte #0x00,#0x00
      000062r9Es2B                11480 	.byte _push_acc, (_push_acc >> 8)
      000064 FF 7F                11481 	.byte #0xff, #0x7f	;  32767
      000066 06 00                11482 	.byte #0x06, #0x00	;  6
      000068 FF 7F                11483 	.byte #0xff, #0x7f	;  32767
      00006A 00 00                11484 	.byte #0x00,#0x00
      00006CrC1s2C                11485 	.byte _reset_acc, (_reset_acc >> 8)
      00006E FF 7F                11486 	.byte #0xff, #0x7f	;  32767
      000070 07 00                11487 	.byte #0x07, #0x00	;  7
      000072 FF 7F                11488 	.byte #0xff, #0x7f	;  32767
      000074 00 00                11489 	.byte #0x00,#0x00
      000076 00 00                11490 	.byte #0x00,#0x00
      000078 FF 7F                11491 	.byte #0xff, #0x7f	;  32767
      00007A 05 00                11492 	.byte #0x05, #0x00	;  5
      00007C FF 7F                11493 	.byte #0xff, #0x7f	;  32767
      00007E 00 00                11494 	.byte #0x00,#0x00
      000080r2Bs2D                11495 	.byte _reset_base, (_reset_base >> 8)
      000082 FF 7F                11496 	.byte #0xff, #0x7f	;  32767
      000084 03 00                11497 	.byte #0x03, #0x00	;  3
      000086 FF 7F                11498 	.byte #0xff, #0x7f	;  32767
      000088 00 00                11499 	.byte #0x00,#0x00
      00008ArA9s2D                11500 	.byte _status, (_status >> 8)
      00008C FF 7F                11501 	.byte #0xff, #0x7f	;  32767
      00008E 04 00                11502 	.byte #0x04, #0x00	;  4
      000090 FF 7F                11503 	.byte #0xff, #0x7f	;  32767
      000092 00 00                11504 	.byte #0x00,#0x00
      000094r08s36                11505 	.byte _help, (_help >> 8)
      000096 FF 7F                11506 	.byte #0xff, #0x7f	;  32767
      000098 08 00                11507 	.byte #0x08, #0x00	;  8
      00009A 03 00                11508 	.byte #0x03, #0x00	;  3
      00009C 00 00                11509 	.byte #0x00,#0x00
      00009Er93s01                11510 	.byte _dump_pop, (_dump_pop >> 8)
      0000A0 00 80                11511 	.byte #0x00, #0x80	; -32768
      0000A2 00 80                11512 	.byte #0x00, #0x80	; -32768
      0000A4 00 80                11513 	.byte #0x00, #0x80	; -32768
      0000A6 00 00                11514 	.byte #0x00,#0x00
      0000A8 00 00                11515 	.byte #0x00,#0x00
                                  11516 	.area CABS    (ABS,CODE)
