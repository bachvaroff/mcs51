                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module calc
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _getchar_poll
                                     13 	.globl _state_exec
                                     14 	.globl _state_init
                                     15 	.globl _stack_iter_peek
                                     16 	.globl _stack_peek2
                                     17 	.globl _stack_peek
                                     18 	.globl _stack_pop
                                     19 	.globl _stack_push
                                     20 	.globl _stack_init
                                     21 	.globl _isxdigit
                                     22 	.globl _printf
                                     23 	.globl _strtol
                                     24 	.globl _CY
                                     25 	.globl _AC
                                     26 	.globl _F0
                                     27 	.globl _RS1
                                     28 	.globl _RS0
                                     29 	.globl _OV
                                     30 	.globl _FL
                                     31 	.globl _P
                                     32 	.globl _TF2
                                     33 	.globl _EXF2
                                     34 	.globl _RCLK
                                     35 	.globl _TCLK
                                     36 	.globl _EXEN2
                                     37 	.globl _TR2
                                     38 	.globl _C_T2
                                     39 	.globl _CP_RL2
                                     40 	.globl _T2CON_7
                                     41 	.globl _T2CON_6
                                     42 	.globl _T2CON_5
                                     43 	.globl _T2CON_4
                                     44 	.globl _T2CON_3
                                     45 	.globl _T2CON_2
                                     46 	.globl _T2CON_1
                                     47 	.globl _T2CON_0
                                     48 	.globl _PT2
                                     49 	.globl _PS
                                     50 	.globl _PT1
                                     51 	.globl _PX1
                                     52 	.globl _PT0
                                     53 	.globl _PX0
                                     54 	.globl _RD
                                     55 	.globl _WR
                                     56 	.globl _T1
                                     57 	.globl _T0
                                     58 	.globl _INT1
                                     59 	.globl _INT0
                                     60 	.globl _TXD
                                     61 	.globl _RXD
                                     62 	.globl _P3_7
                                     63 	.globl _P3_6
                                     64 	.globl _P3_5
                                     65 	.globl _P3_4
                                     66 	.globl _P3_3
                                     67 	.globl _P3_2
                                     68 	.globl _P3_1
                                     69 	.globl _P3_0
                                     70 	.globl _EA
                                     71 	.globl _ET2
                                     72 	.globl _ES
                                     73 	.globl _ET1
                                     74 	.globl _EX1
                                     75 	.globl _ET0
                                     76 	.globl _EX0
                                     77 	.globl _P2_7
                                     78 	.globl _P2_6
                                     79 	.globl _P2_5
                                     80 	.globl _P2_4
                                     81 	.globl _P2_3
                                     82 	.globl _P2_2
                                     83 	.globl _P2_1
                                     84 	.globl _P2_0
                                     85 	.globl _SM0
                                     86 	.globl _SM1
                                     87 	.globl _SM2
                                     88 	.globl _REN
                                     89 	.globl _TB8
                                     90 	.globl _RB8
                                     91 	.globl _TI
                                     92 	.globl _RI
                                     93 	.globl _T2EX
                                     94 	.globl _T2
                                     95 	.globl _P1_7
                                     96 	.globl _P1_6
                                     97 	.globl _P1_5
                                     98 	.globl _P1_4
                                     99 	.globl _P1_3
                                    100 	.globl _P1_2
                                    101 	.globl _P1_1
                                    102 	.globl _P1_0
                                    103 	.globl _TF1
                                    104 	.globl _TR1
                                    105 	.globl _TF0
                                    106 	.globl _TR0
                                    107 	.globl _IE1
                                    108 	.globl _IT1
                                    109 	.globl _IE0
                                    110 	.globl _IT0
                                    111 	.globl _P0_7
                                    112 	.globl _P0_6
                                    113 	.globl _P0_5
                                    114 	.globl _P0_4
                                    115 	.globl _P0_3
                                    116 	.globl _P0_2
                                    117 	.globl _P0_1
                                    118 	.globl _P0_0
                                    119 	.globl _B
                                    120 	.globl _A
                                    121 	.globl _ACC
                                    122 	.globl _PSW
                                    123 	.globl _TH2
                                    124 	.globl _TL2
                                    125 	.globl _RCAP2H
                                    126 	.globl _RCAP2L
                                    127 	.globl _T2MOD
                                    128 	.globl _T2CON
                                    129 	.globl _IP
                                    130 	.globl _P3
                                    131 	.globl _IE
                                    132 	.globl _P2
                                    133 	.globl _SBUF
                                    134 	.globl _SCON
                                    135 	.globl _P1
                                    136 	.globl _TH1
                                    137 	.globl _TH0
                                    138 	.globl _TL1
                                    139 	.globl _TL0
                                    140 	.globl _TMOD
                                    141 	.globl _TCON
                                    142 	.globl _PCON
                                    143 	.globl _DPH
                                    144 	.globl _DPL
                                    145 	.globl _SP
                                    146 	.globl _P0
                                    147 	.globl _giant
                                    148 	.globl _putchar
                                    149 	.globl _getchar
                                    150 ;--------------------------------------------------------
                                    151 ; special function registers
                                    152 ;--------------------------------------------------------
                                    153 	.area RSEG    (ABS,DATA)
      000000                        154 	.org 0x0000
                           000080   155 _P0	=	0x0080
                           000081   156 _SP	=	0x0081
                           000082   157 _DPL	=	0x0082
                           000083   158 _DPH	=	0x0083
                           000087   159 _PCON	=	0x0087
                           000088   160 _TCON	=	0x0088
                           000089   161 _TMOD	=	0x0089
                           00008A   162 _TL0	=	0x008a
                           00008B   163 _TL1	=	0x008b
                           00008C   164 _TH0	=	0x008c
                           00008D   165 _TH1	=	0x008d
                           000090   166 _P1	=	0x0090
                           000098   167 _SCON	=	0x0098
                           000099   168 _SBUF	=	0x0099
                           0000A0   169 _P2	=	0x00a0
                           0000A8   170 _IE	=	0x00a8
                           0000B0   171 _P3	=	0x00b0
                           0000B8   172 _IP	=	0x00b8
                           0000C8   173 _T2CON	=	0x00c8
                           0000C9   174 _T2MOD	=	0x00c9
                           0000CA   175 _RCAP2L	=	0x00ca
                           0000CB   176 _RCAP2H	=	0x00cb
                           0000CC   177 _TL2	=	0x00cc
                           0000CD   178 _TH2	=	0x00cd
                           0000D0   179 _PSW	=	0x00d0
                           0000E0   180 _ACC	=	0x00e0
                           0000E0   181 _A	=	0x00e0
                           0000F0   182 _B	=	0x00f0
                                    183 ;--------------------------------------------------------
                                    184 ; special function bits
                                    185 ;--------------------------------------------------------
                                    186 	.area RSEG    (ABS,DATA)
      000000                        187 	.org 0x0000
                           000080   188 _P0_0	=	0x0080
                           000081   189 _P0_1	=	0x0081
                           000082   190 _P0_2	=	0x0082
                           000083   191 _P0_3	=	0x0083
                           000084   192 _P0_4	=	0x0084
                           000085   193 _P0_5	=	0x0085
                           000086   194 _P0_6	=	0x0086
                           000087   195 _P0_7	=	0x0087
                           000088   196 _IT0	=	0x0088
                           000089   197 _IE0	=	0x0089
                           00008A   198 _IT1	=	0x008a
                           00008B   199 _IE1	=	0x008b
                           00008C   200 _TR0	=	0x008c
                           00008D   201 _TF0	=	0x008d
                           00008E   202 _TR1	=	0x008e
                           00008F   203 _TF1	=	0x008f
                           000090   204 _P1_0	=	0x0090
                           000091   205 _P1_1	=	0x0091
                           000092   206 _P1_2	=	0x0092
                           000093   207 _P1_3	=	0x0093
                           000094   208 _P1_4	=	0x0094
                           000095   209 _P1_5	=	0x0095
                           000096   210 _P1_6	=	0x0096
                           000097   211 _P1_7	=	0x0097
                           000090   212 _T2	=	0x0090
                           000091   213 _T2EX	=	0x0091
                           000098   214 _RI	=	0x0098
                           000099   215 _TI	=	0x0099
                           00009A   216 _RB8	=	0x009a
                           00009B   217 _TB8	=	0x009b
                           00009C   218 _REN	=	0x009c
                           00009D   219 _SM2	=	0x009d
                           00009E   220 _SM1	=	0x009e
                           00009F   221 _SM0	=	0x009f
                           0000A0   222 _P2_0	=	0x00a0
                           0000A1   223 _P2_1	=	0x00a1
                           0000A2   224 _P2_2	=	0x00a2
                           0000A3   225 _P2_3	=	0x00a3
                           0000A4   226 _P2_4	=	0x00a4
                           0000A5   227 _P2_5	=	0x00a5
                           0000A6   228 _P2_6	=	0x00a6
                           0000A7   229 _P2_7	=	0x00a7
                           0000A8   230 _EX0	=	0x00a8
                           0000A9   231 _ET0	=	0x00a9
                           0000AA   232 _EX1	=	0x00aa
                           0000AB   233 _ET1	=	0x00ab
                           0000AC   234 _ES	=	0x00ac
                           0000AD   235 _ET2	=	0x00ad
                           0000AF   236 _EA	=	0x00af
                           0000B0   237 _P3_0	=	0x00b0
                           0000B1   238 _P3_1	=	0x00b1
                           0000B2   239 _P3_2	=	0x00b2
                           0000B3   240 _P3_3	=	0x00b3
                           0000B4   241 _P3_4	=	0x00b4
                           0000B5   242 _P3_5	=	0x00b5
                           0000B6   243 _P3_6	=	0x00b6
                           0000B7   244 _P3_7	=	0x00b7
                           0000B0   245 _RXD	=	0x00b0
                           0000B1   246 _TXD	=	0x00b1
                           0000B2   247 _INT0	=	0x00b2
                           0000B3   248 _INT1	=	0x00b3
                           0000B4   249 _T0	=	0x00b4
                           0000B5   250 _T1	=	0x00b5
                           0000B6   251 _WR	=	0x00b6
                           0000B7   252 _RD	=	0x00b7
                           0000B8   253 _PX0	=	0x00b8
                           0000B9   254 _PT0	=	0x00b9
                           0000BA   255 _PX1	=	0x00ba
                           0000BB   256 _PT1	=	0x00bb
                           0000BC   257 _PS	=	0x00bc
                           0000BD   258 _PT2	=	0x00bd
                           0000C8   259 _T2CON_0	=	0x00c8
                           0000C9   260 _T2CON_1	=	0x00c9
                           0000CA   261 _T2CON_2	=	0x00ca
                           0000CB   262 _T2CON_3	=	0x00cb
                           0000CC   263 _T2CON_4	=	0x00cc
                           0000CD   264 _T2CON_5	=	0x00cd
                           0000CE   265 _T2CON_6	=	0x00ce
                           0000CF   266 _T2CON_7	=	0x00cf
                           0000C8   267 _CP_RL2	=	0x00c8
                           0000C9   268 _C_T2	=	0x00c9
                           0000CA   269 _TR2	=	0x00ca
                           0000CB   270 _EXEN2	=	0x00cb
                           0000CC   271 _TCLK	=	0x00cc
                           0000CD   272 _RCLK	=	0x00cd
                           0000CE   273 _EXF2	=	0x00ce
                           0000CF   274 _TF2	=	0x00cf
                           0000D0   275 _P	=	0x00d0
                           0000D1   276 _FL	=	0x00d1
                           0000D2   277 _OV	=	0x00d2
                           0000D3   278 _RS0	=	0x00d3
                           0000D4   279 _RS1	=	0x00d4
                           0000D5   280 _F0	=	0x00d5
                           0000D6   281 _AC	=	0x00d6
                           0000D7   282 _CY	=	0x00d7
                                    283 ;--------------------------------------------------------
                                    284 ; overlayable register banks
                                    285 ;--------------------------------------------------------
                                    286 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        287 	.ds 8
                                    288 ;--------------------------------------------------------
                                    289 ; internal ram data
                                    290 ;--------------------------------------------------------
                                    291 	.area DSEG    (DATA)
                                    292 ;--------------------------------------------------------
                                    293 ; overlayable items in internal ram 
                                    294 ;--------------------------------------------------------
                                    295 ;--------------------------------------------------------
                                    296 ; Stack segment in internal ram 
                                    297 ;--------------------------------------------------------
                                    298 	.area	SSEG
      000000                        299 __start__stack:
      000000                        300 	.ds	1
                                    301 
                                    302 ;--------------------------------------------------------
                                    303 ; indirectly addressable internal ram data
                                    304 ;--------------------------------------------------------
                                    305 	.area ISEG    (DATA)
      000000                        306 _giant::
      000000                        307 	.ds 1
                                    308 ;--------------------------------------------------------
                                    309 ; absolute internal ram data
                                    310 ;--------------------------------------------------------
                                    311 	.area IABS    (ABS,DATA)
                                    312 	.area IABS    (ABS,DATA)
                                    313 ;--------------------------------------------------------
                                    314 ; bit data
                                    315 ;--------------------------------------------------------
                                    316 	.area BSEG    (BIT)
                                    317 ;--------------------------------------------------------
                                    318 ; paged external ram data
                                    319 ;--------------------------------------------------------
                                    320 	.area PSEG    (PAG,XDATA)
                                    321 ;--------------------------------------------------------
                                    322 ; external ram data
                                    323 ;--------------------------------------------------------
                                    324 	.area XSEG    (XDATA)
      000000                        325 _s:
      000000                        326 	.ds 12
      00000C                        327 _c:
      00000C                        328 	.ds 16407
                                    329 ;--------------------------------------------------------
                                    330 ; absolute external ram data
                                    331 ;--------------------------------------------------------
                                    332 	.area XABS    (ABS,XDATA)
                                    333 ;--------------------------------------------------------
                                    334 ; external initialized ram data
                                    335 ;--------------------------------------------------------
                                    336 	.area XISEG   (XDATA)
      000000                        337 _deltas:
      000000                        338 	.ds 170
                                    339 	.area HOME    (CODE)
                                    340 	.area GSINIT0 (CODE)
                                    341 	.area GSINIT1 (CODE)
                                    342 	.area GSINIT2 (CODE)
                                    343 	.area GSINIT3 (CODE)
                                    344 	.area GSINIT4 (CODE)
                                    345 	.area GSINIT5 (CODE)
                                    346 	.area GSINIT  (CODE)
                                    347 	.area GSFINAL (CODE)
                                    348 	.area CSEG    (CODE)
                                    349 ;--------------------------------------------------------
                                    350 ; interrupt vector 
                                    351 ;--------------------------------------------------------
                                    352 	.area HOME    (CODE)
      000000                        353 __interrupt_vect:
      000000 02r00r00         [24]  354 	ljmp	__sdcc_gsinit_startup
                                    355 ;--------------------------------------------------------
                                    356 ; global & static initialisations
                                    357 ;--------------------------------------------------------
                                    358 	.area HOME    (CODE)
                                    359 	.area GSINIT  (CODE)
                                    360 	.area GSFINAL (CODE)
                                    361 	.area GSINIT  (CODE)
                                    362 	.globl __sdcc_gsinit_startup
                                    363 	.globl __sdcc_program_startup
                                    364 	.globl __start__stack
                                    365 	.globl __mcs51_genXINIT
                                    366 	.globl __mcs51_genXRAMCLEAR
                                    367 	.globl __mcs51_genRAMCLEAR
                                    368 	.area GSFINAL (CODE)
      000000 02r00r03         [24]  369 	ljmp	__sdcc_program_startup
                                    370 ;--------------------------------------------------------
                                    371 ; Home
                                    372 ;--------------------------------------------------------
                                    373 	.area HOME    (CODE)
                                    374 	.area HOME    (CODE)
      000003                        375 __sdcc_program_startup:
      000003 02r3Ar38         [24]  376 	ljmp	_main
                                    377 ;	return from main will return to caller
                                    378 ;--------------------------------------------------------
                                    379 ; code
                                    380 ;--------------------------------------------------------
                                    381 	.area CSEG    (CODE)
                                    382 ;------------------------------------------------------------
                                    383 ;Allocation info for local variables in function 'putchar'
                                    384 ;------------------------------------------------------------
                                    385 ;c                         Allocated to registers 
                                    386 ;------------------------------------------------------------
                                    387 ;	calc.c:16: int putchar(int c) __naked {
                                    388 ;	-----------------------------------------
                                    389 ;	 function putchar
                                    390 ;	-----------------------------------------
      000000                        391 _putchar:
                                    392 ;	naked function: no prologue.
                                    393 ;	calc.c:23: __endasm;
      000000 C0 E0            [24]  394 	push	acc
      000002 E5 82            [12]  395 	mov	a, dpl
      000004 12 00 3C         [24]  396 	lcall	0x003c
      000007 D0 E0            [24]  397 	pop	acc
                                    398 ;	calc.c:24: }
                                    399 ;	naked function: no epilogue.
                                    400 ;------------------------------------------------------------
                                    401 ;Allocation info for local variables in function 'getchar'
                                    402 ;------------------------------------------------------------
                                    403 ;	calc.c:26: int getchar(void) __naked {
                                    404 ;	-----------------------------------------
                                    405 ;	 function getchar
                                    406 ;	-----------------------------------------
      000009                        407 _getchar:
                                    408 ;	naked function: no prologue.
                                    409 ;	calc.c:34: __endasm;
      000009 C0 E0            [24]  410 	push	acc
      00000B 12 00 36         [24]  411 	lcall	0x0036
      00000E F5 82            [12]  412 	mov	dpl, a
      000010 75 83 00         [24]  413 	mov	dph, #0
      000013 D0 E0            [24]  414 	pop	acc
      000015 22               [24]  415 	ret
                                    416 ;	calc.c:35: }
                                    417 ;	naked function: no epilogue.
                                    418 ;------------------------------------------------------------
                                    419 ;Allocation info for local variables in function 'getchar_poll'
                                    420 ;------------------------------------------------------------
                                    421 ;	calc.c:37: int getchar_poll(void) __naked {
                                    422 ;	-----------------------------------------
                                    423 ;	 function getchar_poll
                                    424 ;	-----------------------------------------
      000016                        425 _getchar_poll:
                                    426 ;	naked function: no prologue.
                                    427 ;	calc.c:52: __endasm;
      000016 C0 E0            [24]  428 	push	acc
      000018 C0 F0            [24]  429 	push	b
      00001A 74 FF            [12]  430 	mov	a, #0xff
      00001C F5 F0            [12]  431 	mov	b, a
      00001E 12 00 39         [24]  432 	lcall	0x0039
      000021 40 03            [24]  433 	jc	nochar
      000023 75 F0 00         [24]  434 	mov	b, #0x00
      000026                        435 	nochar:
      000026 F5 82            [12]  436 	mov	dpl, a
      000028 85 F0 83         [24]  437 	mov	dph, b
      00002B D0 F0            [24]  438 	pop	b
      00002D D0 E0            [24]  439 	pop	acc
      00002F 22               [24]  440 	ret
                                    441 ;	calc.c:53: }
                                    442 ;	naked function: no epilogue.
                                    443 ;------------------------------------------------------------
                                    444 ;Allocation info for local variables in function 'accumulate'
                                    445 ;------------------------------------------------------------
                                    446 ;delta                     Allocated to stack - _bp -5
                                    447 ;_ctx                      Allocated to registers r5 r6 r7 
                                    448 ;ctx                       Allocated to stack - _bp +8
                                    449 ;d                         Allocated to stack - _bp +11
                                    450 ;sloc0                     Allocated to stack - _bp +1
                                    451 ;sloc1                     Allocated to stack - _bp +4
                                    452 ;------------------------------------------------------------
                                    453 ;	calc.c:79: static int accumulate(void *_ctx, delta_t *delta) __reentrant {
                                    454 ;	-----------------------------------------
                                    455 ;	 function accumulate
                                    456 ;	-----------------------------------------
      000030                        457 _accumulate:
                           000007   458 	ar7 = 0x07
                           000006   459 	ar6 = 0x06
                           000005   460 	ar5 = 0x05
                           000004   461 	ar4 = 0x04
                           000003   462 	ar3 = 0x03
                           000002   463 	ar2 = 0x02
                           000001   464 	ar1 = 0x01
                           000000   465 	ar0 = 0x00
      000030 C0*00            [24]  466 	push	_bp
      000032 E5 81            [12]  467 	mov	a,sp
      000034 F5*00            [12]  468 	mov	_bp,a
      000036 24 0E            [12]  469 	add	a,#0x0e
      000038 F5 81            [12]  470 	mov	sp,a
      00003A AD 82            [24]  471 	mov	r5,dpl
      00003C AE 83            [24]  472 	mov	r6,dph
      00003E AF F0            [24]  473 	mov	r7,b
                                    474 ;	calc.c:80: calc_ctx_t *ctx = (calc_ctx_t *)_ctx;
      000040 E5*00            [12]  475 	mov	a,_bp
      000042 24 08            [12]  476 	add	a,#0x08
      000044 F8               [12]  477 	mov	r0,a
      000045 A6 05            [24]  478 	mov	@r0,ar5
      000047 08               [12]  479 	inc	r0
      000048 A6 06            [24]  480 	mov	@r0,ar6
      00004A 08               [12]  481 	inc	r0
      00004B A6 07            [24]  482 	mov	@r0,ar7
                                    483 ;	calc.c:85: if (!ctx->acc_valid) {
      00004D E5*00            [12]  484 	mov	a,_bp
      00004F 24 08            [12]  485 	add	a,#0x08
      000051 F8               [12]  486 	mov	r0,a
      000052 74 06            [12]  487 	mov	a,#0x06
      000054 26               [12]  488 	add	a,@r0
      000055 FA               [12]  489 	mov	r2,a
      000056 E4               [12]  490 	clr	a
      000057 08               [12]  491 	inc	r0
      000058 36               [12]  492 	addc	a,@r0
      000059 FB               [12]  493 	mov	r3,a
      00005A 08               [12]  494 	inc	r0
      00005B 86 04            [24]  495 	mov	ar4,@r0
      00005D 8A 82            [24]  496 	mov	dpl,r2
      00005F 8B 83            [24]  497 	mov	dph,r3
      000061 8C F0            [24]  498 	mov	b,r4
      000063 12r00r00         [24]  499 	lcall	__gptrget
      000066 70 31            [24]  500 	jnz	00102$
                                    501 ;	calc.c:86: ctx->acc_valid = 1;
      000068 8A 82            [24]  502 	mov	dpl,r2
      00006A 8B 83            [24]  503 	mov	dph,r3
      00006C 8C F0            [24]  504 	mov	b,r4
      00006E 74 01            [12]  505 	mov	a,#0x01
      000070 12r00r00         [24]  506 	lcall	__gptrput
                                    507 ;	calc.c:87: ctx->acc = 0l;
      000073 E5*00            [12]  508 	mov	a,_bp
      000075 24 08            [12]  509 	add	a,#0x08
      000077 F8               [12]  510 	mov	r0,a
      000078 74 02            [12]  511 	mov	a,#0x02
      00007A 26               [12]  512 	add	a,@r0
      00007B FA               [12]  513 	mov	r2,a
      00007C E4               [12]  514 	clr	a
      00007D 08               [12]  515 	inc	r0
      00007E 36               [12]  516 	addc	a,@r0
      00007F FB               [12]  517 	mov	r3,a
      000080 08               [12]  518 	inc	r0
      000081 86 04            [24]  519 	mov	ar4,@r0
      000083 8A 82            [24]  520 	mov	dpl,r2
      000085 8B 83            [24]  521 	mov	dph,r3
      000087 8C F0            [24]  522 	mov	b,r4
      000089 E4               [12]  523 	clr	a
      00008A 12r00r00         [24]  524 	lcall	__gptrput
      00008D A3               [24]  525 	inc	dptr
      00008E 12r00r00         [24]  526 	lcall	__gptrput
      000091 A3               [24]  527 	inc	dptr
      000092 12r00r00         [24]  528 	lcall	__gptrput
      000095 A3               [24]  529 	inc	dptr
      000096 12r00r00         [24]  530 	lcall	__gptrput
      000099                        531 00102$:
                                    532 ;	calc.c:90: d = strtol(ctx->digit, NULL, ctx->base);
      000099 E5*00            [12]  533 	mov	a,_bp
      00009B 24 08            [12]  534 	add	a,#0x08
      00009D F8               [12]  535 	mov	r0,a
      00009E 86 82            [24]  536 	mov	dpl,@r0
      0000A0 08               [12]  537 	inc	r0
      0000A1 86 83            [24]  538 	mov	dph,@r0
      0000A3 08               [12]  539 	inc	r0
      0000A4 86 F0            [24]  540 	mov	b,@r0
      0000A6 12r00r00         [24]  541 	lcall	__gptrget
      0000A9 FB               [12]  542 	mov	r3,a
      0000AA A3               [24]  543 	inc	dptr
      0000AB 12r00r00         [24]  544 	lcall	__gptrget
      0000AE FC               [12]  545 	mov	r4,a
      0000AF E5*00            [12]  546 	mov	a,_bp
      0000B1 24 08            [12]  547 	add	a,#0x08
      0000B3 F8               [12]  548 	mov	r0,a
      0000B4 74 07            [12]  549 	mov	a,#0x07
      0000B6 26               [12]  550 	add	a,@r0
      0000B7 FA               [12]  551 	mov	r2,a
      0000B8 E4               [12]  552 	clr	a
      0000B9 08               [12]  553 	inc	r0
      0000BA 36               [12]  554 	addc	a,@r0
      0000BB FE               [12]  555 	mov	r6,a
      0000BC 08               [12]  556 	inc	r0
      0000BD 86 07            [24]  557 	mov	ar7,@r0
      0000BF C0 03            [24]  558 	push	ar3
      0000C1 C0 04            [24]  559 	push	ar4
      0000C3 E4               [12]  560 	clr	a
      0000C4 C0 E0            [24]  561 	push	acc
      0000C6 C0 E0            [24]  562 	push	acc
      0000C8 C0 E0            [24]  563 	push	acc
      0000CA 8A 82            [24]  564 	mov	dpl,r2
      0000CC 8E 83            [24]  565 	mov	dph,r6
      0000CE 8F F0            [24]  566 	mov	b,r7
      0000D0 12r00r00         [24]  567 	lcall	_strtol
      0000D3 C8               [12]  568 	xch	a,r0
      0000D4 E5*00            [12]  569 	mov	a,_bp
      0000D6 24 0B            [12]  570 	add	a,#0x0b
      0000D8 C8               [12]  571 	xch	a,r0
      0000D9 A6 82            [24]  572 	mov	@r0,dpl
      0000DB 08               [12]  573 	inc	r0
      0000DC A6 83            [24]  574 	mov	@r0,dph
      0000DE 08               [12]  575 	inc	r0
      0000DF A6 F0            [24]  576 	mov	@r0,b
      0000E1 08               [12]  577 	inc	r0
      0000E2 F6               [12]  578 	mov	@r0,a
      0000E3 E5 81            [12]  579 	mov	a,sp
      0000E5 24 FB            [12]  580 	add	a,#0xfb
      0000E7 F5 81            [12]  581 	mov	sp,a
                                    582 ;	calc.c:91: ctx->acc = ctx->acc * (long)ctx->base + d;
      0000E9 E5*00            [12]  583 	mov	a,_bp
      0000EB 24 08            [12]  584 	add	a,#0x08
      0000ED F8               [12]  585 	mov	r0,a
      0000EE A9*00            [24]  586 	mov	r1,_bp
      0000F0 09               [12]  587 	inc	r1
      0000F1 74 02            [12]  588 	mov	a,#0x02
      0000F3 26               [12]  589 	add	a,@r0
      0000F4 F7               [12]  590 	mov	@r1,a
      0000F5 E4               [12]  591 	clr	a
      0000F6 08               [12]  592 	inc	r0
      0000F7 36               [12]  593 	addc	a,@r0
      0000F8 09               [12]  594 	inc	r1
      0000F9 F7               [12]  595 	mov	@r1,a
      0000FA 08               [12]  596 	inc	r0
      0000FB 09               [12]  597 	inc	r1
      0000FC E6               [12]  598 	mov	a,@r0
      0000FD F7               [12]  599 	mov	@r1,a
      0000FE A8*00            [24]  600 	mov	r0,_bp
      000100 08               [12]  601 	inc	r0
      000101 86 82            [24]  602 	mov	dpl,@r0
      000103 08               [12]  603 	inc	r0
      000104 86 83            [24]  604 	mov	dph,@r0
      000106 08               [12]  605 	inc	r0
      000107 86 F0            [24]  606 	mov	b,@r0
      000109 E5*00            [12]  607 	mov	a,_bp
      00010B 24 04            [12]  608 	add	a,#0x04
      00010D F9               [12]  609 	mov	r1,a
      00010E 12r00r00         [24]  610 	lcall	__gptrget
      000111 F7               [12]  611 	mov	@r1,a
      000112 A3               [24]  612 	inc	dptr
      000113 12r00r00         [24]  613 	lcall	__gptrget
      000116 09               [12]  614 	inc	r1
      000117 F7               [12]  615 	mov	@r1,a
      000118 A3               [24]  616 	inc	dptr
      000119 12r00r00         [24]  617 	lcall	__gptrget
      00011C 09               [12]  618 	inc	r1
      00011D F7               [12]  619 	mov	@r1,a
      00011E A3               [24]  620 	inc	dptr
      00011F 12r00r00         [24]  621 	lcall	__gptrget
      000122 09               [12]  622 	inc	r1
      000123 F7               [12]  623 	mov	@r1,a
      000124 E5*00            [12]  624 	mov	a,_bp
      000126 24 08            [12]  625 	add	a,#0x08
      000128 F8               [12]  626 	mov	r0,a
      000129 86 82            [24]  627 	mov	dpl,@r0
      00012B 08               [12]  628 	inc	r0
      00012C 86 83            [24]  629 	mov	dph,@r0
      00012E 08               [12]  630 	inc	r0
      00012F 86 F0            [24]  631 	mov	b,@r0
      000131 12r00r00         [24]  632 	lcall	__gptrget
      000134 FA               [12]  633 	mov	r2,a
      000135 A3               [24]  634 	inc	dptr
      000136 12r00r00         [24]  635 	lcall	__gptrget
      000139 FB               [12]  636 	mov	r3,a
      00013A 33               [12]  637 	rlc	a
      00013B 95 E0            [12]  638 	subb	a,acc
      00013D FE               [12]  639 	mov	r6,a
      00013E FF               [12]  640 	mov	r7,a
      00013F C0 02            [24]  641 	push	ar2
      000141 C0 03            [24]  642 	push	ar3
      000143 C0 06            [24]  643 	push	ar6
      000145 C0 07            [24]  644 	push	ar7
      000147 E5*00            [12]  645 	mov	a,_bp
      000149 24 04            [12]  646 	add	a,#0x04
      00014B F8               [12]  647 	mov	r0,a
      00014C 86 82            [24]  648 	mov	dpl,@r0
      00014E 08               [12]  649 	inc	r0
      00014F 86 83            [24]  650 	mov	dph,@r0
      000151 08               [12]  651 	inc	r0
      000152 86 F0            [24]  652 	mov	b,@r0
      000154 08               [12]  653 	inc	r0
      000155 E6               [12]  654 	mov	a,@r0
      000156 12r00r00         [24]  655 	lcall	__mullong
      000159 AC 82            [24]  656 	mov	r4,dpl
      00015B AD 83            [24]  657 	mov	r5,dph
      00015D AE F0            [24]  658 	mov	r6,b
      00015F FF               [12]  659 	mov	r7,a
      000160 E5 81            [12]  660 	mov	a,sp
      000162 24 FC            [12]  661 	add	a,#0xfc
      000164 F5 81            [12]  662 	mov	sp,a
      000166 E5*00            [12]  663 	mov	a,_bp
      000168 24 0B            [12]  664 	add	a,#0x0b
      00016A F8               [12]  665 	mov	r0,a
      00016B E6               [12]  666 	mov	a,@r0
      00016C 2C               [12]  667 	add	a,r4
      00016D FC               [12]  668 	mov	r4,a
      00016E 08               [12]  669 	inc	r0
      00016F E6               [12]  670 	mov	a,@r0
      000170 3D               [12]  671 	addc	a,r5
      000171 FD               [12]  672 	mov	r5,a
      000172 08               [12]  673 	inc	r0
      000173 E6               [12]  674 	mov	a,@r0
      000174 3E               [12]  675 	addc	a,r6
      000175 FE               [12]  676 	mov	r6,a
      000176 08               [12]  677 	inc	r0
      000177 E6               [12]  678 	mov	a,@r0
      000178 3F               [12]  679 	addc	a,r7
      000179 FF               [12]  680 	mov	r7,a
      00017A A8*00            [24]  681 	mov	r0,_bp
      00017C 08               [12]  682 	inc	r0
      00017D 86 82            [24]  683 	mov	dpl,@r0
      00017F 08               [12]  684 	inc	r0
      000180 86 83            [24]  685 	mov	dph,@r0
      000182 08               [12]  686 	inc	r0
      000183 86 F0            [24]  687 	mov	b,@r0
      000185 EC               [12]  688 	mov	a,r4
      000186 12r00r00         [24]  689 	lcall	__gptrput
      000189 A3               [24]  690 	inc	dptr
      00018A ED               [12]  691 	mov	a,r5
      00018B 12r00r00         [24]  692 	lcall	__gptrput
      00018E A3               [24]  693 	inc	dptr
      00018F EE               [12]  694 	mov	a,r6
      000190 12r00r00         [24]  695 	lcall	__gptrput
      000193 A3               [24]  696 	inc	dptr
      000194 EF               [12]  697 	mov	a,r7
      000195 12r00r00         [24]  698 	lcall	__gptrput
                                    699 ;	calc.c:93: return 1;
      000198 90 00 01         [24]  700 	mov	dptr,#0x0001
                                    701 ;	calc.c:94: }
      00019B 85*00 81         [24]  702 	mov	sp,_bp
      00019E D0*00            [24]  703 	pop	_bp
      0001A0 22               [24]  704 	ret
                                    705 ;------------------------------------------------------------
                                    706 ;Allocation info for local variables in function 'dump_pop'
                                    707 ;------------------------------------------------------------
                                    708 ;delta                     Allocated to stack - _bp -5
                                    709 ;_ctx                      Allocated to registers r5 r6 r7 
                                    710 ;ctx                       Allocated to stack - _bp +11
                                    711 ;d                         Allocated to stack - _bp +14
                                    712 ;r                         Allocated to registers r5 r6 
                                    713 ;__1310720003              Allocated to registers 
                                    714 ;s                         Allocated to registers r5 r6 r7 
                                    715 ;__1966080005              Allocated to registers 
                                    716 ;s                         Allocated to registers r4 r5 r6 
                                    717 ;__1966080007              Allocated to registers 
                                    718 ;s                         Allocated to registers r3 r4 r5 
                                    719 ;__1966080009              Allocated to stack - _bp +18
                                    720 ;d                         Allocated to registers r3 r4 r5 r6 
                                    721 ;__1310720001              Allocated to registers 
                                    722 ;d                         Allocated to stack - _bp +22
                                    723 ;mask                      Allocated to stack - _bp +26
                                    724 ;__1966080011              Allocated to registers 
                                    725 ;s                         Allocated to registers r3 r4 r5 
                                    726 ;__1966080013              Allocated to registers 
                                    727 ;s                         Allocated to registers r4 r5 r6 
                                    728 ;__3276800015              Allocated to registers 
                                    729 ;s                         Allocated to registers r5 r3 r2 
                                    730 ;__3276800017              Allocated to stack - _bp +18
                                    731 ;d                         Allocated to registers r2 r3 r4 r7 
                                    732 ;__1310720001              Allocated to registers 
                                    733 ;d                         Allocated to stack - _bp +22
                                    734 ;mask                      Allocated to stack - _bp +26
                                    735 ;__3276800019              Allocated to registers 
                                    736 ;s                         Allocated to registers r5 r3 r2 
                                    737 ;sloc0                     Allocated to stack - _bp +1
                                    738 ;sloc1                     Allocated to stack - _bp +2
                                    739 ;sloc2                     Allocated to stack - _bp +5
                                    740 ;sloc3                     Allocated to stack - _bp +8
                                    741 ;------------------------------------------------------------
                                    742 ;	calc.c:96: static int dump_pop(void *_ctx, delta_t *delta) __reentrant {
                                    743 ;	-----------------------------------------
                                    744 ;	 function dump_pop
                                    745 ;	-----------------------------------------
      0001A1                        746 _dump_pop:
      0001A1 C0*00            [24]  747 	push	_bp
      0001A3 E5 81            [12]  748 	mov	a,sp
      0001A5 F5*00            [12]  749 	mov	_bp,a
      0001A7 24 1D            [12]  750 	add	a,#0x1d
      0001A9 F5 81            [12]  751 	mov	sp,a
      0001AB AD 82            [24]  752 	mov	r5,dpl
      0001AD AE 83            [24]  753 	mov	r6,dph
      0001AF AF F0            [24]  754 	mov	r7,b
                                    755 ;	calc.c:97: calc_ctx_t *ctx = (calc_ctx_t *)_ctx;
      0001B1 E5*00            [12]  756 	mov	a,_bp
      0001B3 24 0B            [12]  757 	add	a,#0x0b
      0001B5 F8               [12]  758 	mov	r0,a
      0001B6 A6 05            [24]  759 	mov	@r0,ar5
      0001B8 08               [12]  760 	inc	r0
      0001B9 A6 06            [24]  761 	mov	@r0,ar6
      0001BB 08               [12]  762 	inc	r0
      0001BC A6 07            [24]  763 	mov	@r0,ar7
                                    764 ;	calc.c:101: if (delta->event == EVENT_TERM) printstr("\r\n");
      0001BE E5*00            [12]  765 	mov	a,_bp
      0001C0 24 FB            [12]  766 	add	a,#0xfb
      0001C2 F8               [12]  767 	mov	r0,a
      0001C3 86 02            [24]  768 	mov	ar2,@r0
      0001C5 08               [12]  769 	inc	r0
      0001C6 86 03            [24]  770 	mov	ar3,@r0
      0001C8 08               [12]  771 	inc	r0
      0001C9 86 04            [24]  772 	mov	ar4,@r0
      0001CB E5*00            [12]  773 	mov	a,_bp
      0001CD 24 08            [12]  774 	add	a,#0x08
      0001CF F8               [12]  775 	mov	r0,a
      0001D0 74 02            [12]  776 	mov	a,#0x02
      0001D2 2A               [12]  777 	add	a,r2
      0001D3 F6               [12]  778 	mov	@r0,a
      0001D4 E4               [12]  779 	clr	a
      0001D5 3B               [12]  780 	addc	a,r3
      0001D6 08               [12]  781 	inc	r0
      0001D7 F6               [12]  782 	mov	@r0,a
      0001D8 08               [12]  783 	inc	r0
      0001D9 A6 04            [24]  784 	mov	@r0,ar4
      0001DB E5*00            [12]  785 	mov	a,_bp
      0001DD 24 08            [12]  786 	add	a,#0x08
      0001DF F8               [12]  787 	mov	r0,a
      0001E0 86 82            [24]  788 	mov	dpl,@r0
      0001E2 08               [12]  789 	inc	r0
      0001E3 86 83            [24]  790 	mov	dph,@r0
      0001E5 08               [12]  791 	inc	r0
      0001E6 86 F0            [24]  792 	mov	b,@r0
      0001E8 12r00r00         [24]  793 	lcall	__gptrget
      0001EB FE               [12]  794 	mov	r6,a
      0001EC A3               [24]  795 	inc	dptr
      0001ED 12r00r00         [24]  796 	lcall	__gptrget
      0001F0 FF               [12]  797 	mov	r7,a
      0001F1 BE 08 27         [24]  798 	cjne	r6,#0x08,00102$
      0001F4 BF 00 24         [24]  799 	cjne	r7,#0x00,00102$
      0001F7 7Dr17            [12]  800 	mov	r5,#___str_3
      0001F9 7Es00            [12]  801 	mov	r6,#(___str_3 >> 8)
      0001FB 7F 80            [12]  802 	mov	r7,#0x80
                                    803 ;	calc.c:58: return;
      0001FD                        804 00135$:
                                    805 ;	calc.c:56: for (; *s; s++) putchar(*s);
      0001FD 8D 82            [24]  806 	mov	dpl,r5
      0001FF 8E 83            [24]  807 	mov	dph,r6
      000201 8F F0            [24]  808 	mov	b,r7
      000203 12r00r00         [24]  809 	lcall	__gptrget
      000206 FC               [12]  810 	mov	r4,a
      000207 60 12            [24]  811 	jz	00102$
      000209 8C 03            [24]  812 	mov	ar3,r4
      00020B 7C 00            [12]  813 	mov	r4,#0x00
      00020D 8B 82            [24]  814 	mov	dpl,r3
      00020F 8C 83            [24]  815 	mov	dph,r4
      000211 12r00r00         [24]  816 	lcall	_putchar
      000214 0D               [12]  817 	inc	r5
                                    818 ;	calc.c:101: if (delta->event == EVENT_TERM) printstr("\r\n");
      000215 BD 00 E5         [24]  819 	cjne	r5,#0x00,00135$
      000218 0E               [12]  820 	inc	r6
      000219 80 E2            [24]  821 	sjmp	00135$
      00021B                        822 00102$:
                                    823 ;	calc.c:102: r = stack_pop(ctx->ps, &d);
      00021B E5*00            [12]  824 	mov	a,_bp
      00021D 24 0E            [12]  825 	add	a,#0x0e
      00021F FF               [12]  826 	mov	r7,a
      000220 E5*00            [12]  827 	mov	a,_bp
      000222 24 05            [12]  828 	add	a,#0x05
      000224 F8               [12]  829 	mov	r0,a
      000225 A6 07            [24]  830 	mov	@r0,ar7
      000227 08               [12]  831 	inc	r0
      000228 76 00            [12]  832 	mov	@r0,#0x00
      00022A 08               [12]  833 	inc	r0
      00022B 76 40            [12]  834 	mov	@r0,#0x40
      00022D E5*00            [12]  835 	mov	a,_bp
      00022F 24 0B            [12]  836 	add	a,#0x0b
      000231 F8               [12]  837 	mov	r0,a
      000232 A9*00            [24]  838 	mov	r1,_bp
      000234 09               [12]  839 	inc	r1
      000235 09               [12]  840 	inc	r1
      000236 74 11            [12]  841 	mov	a,#0x11
      000238 26               [12]  842 	add	a,@r0
      000239 F7               [12]  843 	mov	@r1,a
      00023A 74 40            [12]  844 	mov	a,#0x40
      00023C 08               [12]  845 	inc	r0
      00023D 36               [12]  846 	addc	a,@r0
      00023E 09               [12]  847 	inc	r1
      00023F F7               [12]  848 	mov	@r1,a
      000240 08               [12]  849 	inc	r0
      000241 09               [12]  850 	inc	r1
      000242 E6               [12]  851 	mov	a,@r0
      000243 F7               [12]  852 	mov	@r1,a
      000244 A8*00            [24]  853 	mov	r0,_bp
      000246 08               [12]  854 	inc	r0
      000247 08               [12]  855 	inc	r0
      000248 86 82            [24]  856 	mov	dpl,@r0
      00024A 08               [12]  857 	inc	r0
      00024B 86 83            [24]  858 	mov	dph,@r0
      00024D 08               [12]  859 	inc	r0
      00024E 86 F0            [24]  860 	mov	b,@r0
      000250 12r00r00         [24]  861 	lcall	__gptrget
      000253 FA               [12]  862 	mov	r2,a
      000254 A3               [24]  863 	inc	dptr
      000255 12r00r00         [24]  864 	lcall	__gptrget
      000258 FB               [12]  865 	mov	r3,a
      000259 A3               [24]  866 	inc	dptr
      00025A 12r00r00         [24]  867 	lcall	__gptrget
      00025D FE               [12]  868 	mov	r6,a
      00025E C0 07            [24]  869 	push	ar7
      000260 E5*00            [12]  870 	mov	a,_bp
      000262 24 05            [12]  871 	add	a,#0x05
      000264 F8               [12]  872 	mov	r0,a
      000265 E6               [12]  873 	mov	a,@r0
      000266 C0 E0            [24]  874 	push	acc
      000268 08               [12]  875 	inc	r0
      000269 E6               [12]  876 	mov	a,@r0
      00026A C0 E0            [24]  877 	push	acc
      00026C 08               [12]  878 	inc	r0
      00026D E6               [12]  879 	mov	a,@r0
      00026E C0 E0            [24]  880 	push	acc
      000270 8A 82            [24]  881 	mov	dpl,r2
      000272 8B 83            [24]  882 	mov	dph,r3
      000274 8E F0            [24]  883 	mov	b,r6
      000276 12r00r00         [24]  884 	lcall	_stack_pop
      000279 AE 82            [24]  885 	mov	r6,dpl
      00027B AD 83            [24]  886 	mov	r5,dph
      00027D 15 81            [12]  887 	dec	sp
      00027F 15 81            [12]  888 	dec	sp
      000281 15 81            [12]  889 	dec	sp
      000283 D0 07            [24]  890 	pop	ar7
                                    891 ;	calc.c:103: if (!r) {
      000285 EE               [12]  892 	mov	a,r6
      000286 4D               [12]  893 	orl	a,r5
      000287 70 44            [24]  894 	jnz	00183$
                                    895 ;	calc.c:104: if (delta->event != EVENT_TERM) printstr("stack underflow\r\n");
      000289 E5*00            [12]  896 	mov	a,_bp
      00028B 24 08            [12]  897 	add	a,#0x08
      00028D F8               [12]  898 	mov	r0,a
      00028E 86 82            [24]  899 	mov	dpl,@r0
      000290 08               [12]  900 	inc	r0
      000291 86 83            [24]  901 	mov	dph,@r0
      000293 08               [12]  902 	inc	r0
      000294 86 F0            [24]  903 	mov	b,@r0
      000296 12r00r00         [24]  904 	lcall	__gptrget
      000299 FD               [12]  905 	mov	r5,a
      00029A A3               [24]  906 	inc	dptr
      00029B 12r00r00         [24]  907 	lcall	__gptrget
      00029E FE               [12]  908 	mov	r6,a
      00029F BD 08 06         [24]  909 	cjne	r5,#0x08,00320$
      0002A2 BE 00 03         [24]  910 	cjne	r6,#0x00,00320$
      0002A5 02r04rAC         [24]  911 	ljmp	00110$
      0002A8                        912 00320$:
      0002A8 7Cr1A            [12]  913 	mov	r4,#___str_4
      0002AA 7Ds00            [12]  914 	mov	r5,#(___str_4 >> 8)
      0002AC 7E 80            [12]  915 	mov	r6,#0x80
                                    916 ;	calc.c:58: return;
      0002AE                        917 00138$:
                                    918 ;	calc.c:56: for (; *s; s++) putchar(*s);
      0002AE 8C 82            [24]  919 	mov	dpl,r4
      0002B0 8D 83            [24]  920 	mov	dph,r5
      0002B2 8E F0            [24]  921 	mov	b,r6
      0002B4 12r00r00         [24]  922 	lcall	__gptrget
      0002B7 FB               [12]  923 	mov	r3,a
      0002B8 70 03            [24]  924 	jnz	00321$
      0002BA 02r04rAC         [24]  925 	ljmp	00110$
      0002BD                        926 00321$:
      0002BD 7A 00            [12]  927 	mov	r2,#0x00
      0002BF 8B 82            [24]  928 	mov	dpl,r3
      0002C1 8A 83            [24]  929 	mov	dph,r2
      0002C3 12r00r00         [24]  930 	lcall	_putchar
      0002C6 0C               [12]  931 	inc	r4
                                    932 ;	calc.c:105: } else while (r > 0) {
      0002C7 BC 00 E4         [24]  933 	cjne	r4,#0x00,00138$
      0002CA 0D               [12]  934 	inc	r5
      0002CB 80 E1            [24]  935 	sjmp	00138$
      0002CD                        936 00183$:
      0002CD A8*00            [24]  937 	mov	r0,_bp
      0002CF 08               [12]  938 	inc	r0
      0002D0 A6 07            [24]  939 	mov	@r0,ar7
      0002D2                        940 00105$:
      0002D2 C3               [12]  941 	clr	c
      0002D3 E4               [12]  942 	clr	a
      0002D4 9E               [12]  943 	subb	a,r6
      0002D5 74 80            [12]  944 	mov	a,#(0x00 ^ 0x80)
      0002D7 8D F0            [24]  945 	mov	b,r5
      0002D9 63 F0 80         [24]  946 	xrl	b,#0x80
      0002DC 95 F0            [12]  947 	subb	a,b
      0002DE 40 03            [24]  948 	jc	00323$
      0002E0 02r04rAC         [24]  949 	ljmp	00110$
      0002E3                        950 00323$:
                                    951 ;	calc.c:106: printstr("PSPA\t");
      0002E3 7Br2C            [12]  952 	mov	r3,#___str_5
      0002E5 7Cs00            [12]  953 	mov	r4,#(___str_5 >> 8)
      0002E7 7D 80            [12]  954 	mov	r5,#0x80
                                    955 ;	calc.c:58: return;
      0002E9                        956 00141$:
                                    957 ;	calc.c:56: for (; *s; s++) putchar(*s);
      0002E9 8B 82            [24]  958 	mov	dpl,r3
      0002EB 8C 83            [24]  959 	mov	dph,r4
      0002ED 8D F0            [24]  960 	mov	b,r5
      0002EF 12r00r00         [24]  961 	lcall	__gptrget
      0002F2 FA               [12]  962 	mov	r2,a
      0002F3 60 10            [24]  963 	jz	00119$
      0002F5 7E 00            [12]  964 	mov	r6,#0x00
      0002F7 8A 82            [24]  965 	mov	dpl,r2
      0002F9 8E 83            [24]  966 	mov	dph,r6
      0002FB 12r00r00         [24]  967 	lcall	_putchar
      0002FE 0B               [12]  968 	inc	r3
                                    969 ;	calc.c:106: printstr("PSPA\t");
      0002FF BB 00 E7         [24]  970 	cjne	r3,#0x00,00141$
      000302 0C               [12]  971 	inc	r4
      000303 80 E4            [24]  972 	sjmp	00141$
      000305                        973 00119$:
                                    974 ;	calc.c:107: printall(d);
      000305 E5*00            [12]  975 	mov	a,_bp
      000307 24 0E            [12]  976 	add	a,#0x0e
      000309 F8               [12]  977 	mov	r0,a
      00030A E5*00            [12]  978 	mov	a,_bp
      00030C 24 12            [12]  979 	add	a,#0x12
      00030E F9               [12]  980 	mov	r1,a
      00030F E6               [12]  981 	mov	a,@r0
      000310 F7               [12]  982 	mov	@r1,a
      000311 08               [12]  983 	inc	r0
      000312 09               [12]  984 	inc	r1
      000313 E6               [12]  985 	mov	a,@r0
      000314 F7               [12]  986 	mov	@r1,a
      000315 08               [12]  987 	inc	r0
      000316 09               [12]  988 	inc	r1
      000317 E6               [12]  989 	mov	a,@r0
      000318 F7               [12]  990 	mov	@r1,a
      000319 08               [12]  991 	inc	r0
      00031A 09               [12]  992 	inc	r1
      00031B E6               [12]  993 	mov	a,@r0
      00031C F7               [12]  994 	mov	@r1,a
      00031D E5*00            [12]  995 	mov	a,_bp
      00031F 24 12            [12]  996 	add	a,#0x12
      000321 F8               [12]  997 	mov	r0,a
      000322 86 03            [24]  998 	mov	ar3,@r0
      000324 08               [12]  999 	inc	r0
      000325 86 04            [24] 1000 	mov	ar4,@r0
      000327 08               [12] 1001 	inc	r0
      000328 86 05            [24] 1002 	mov	ar5,@r0
      00032A 08               [12] 1003 	inc	r0
      00032B 86 06            [24] 1004 	mov	ar6,@r0
                                   1005 ;	calc.c:71: printf("%08lx\t", d);
      00032D C0 07            [24] 1006 	push	ar7
      00032F C0 06            [24] 1007 	push	ar6
      000331 C0 05            [24] 1008 	push	ar5
      000333 C0 04            [24] 1009 	push	ar4
      000335 C0 03            [24] 1010 	push	ar3
      000337 E5*00            [12] 1011 	mov	a,_bp
      000339 24 12            [12] 1012 	add	a,#0x12
      00033B F8               [12] 1013 	mov	r0,a
      00033C E6               [12] 1014 	mov	a,@r0
      00033D C0 E0            [24] 1015 	push	acc
      00033F 08               [12] 1016 	inc	r0
      000340 E6               [12] 1017 	mov	a,@r0
      000341 C0 E0            [24] 1018 	push	acc
      000343 08               [12] 1019 	inc	r0
      000344 E6               [12] 1020 	mov	a,@r0
      000345 C0 E0            [24] 1021 	push	acc
      000347 08               [12] 1022 	inc	r0
      000348 E6               [12] 1023 	mov	a,@r0
      000349 C0 E0            [24] 1024 	push	acc
      00034B 74r00            [12] 1025 	mov	a,#___str_0
      00034D C0 E0            [24] 1026 	push	acc
      00034F 74s00            [12] 1027 	mov	a,#(___str_0 >> 8)
      000351 C0 E0            [24] 1028 	push	acc
      000353 74 80            [12] 1029 	mov	a,#0x80
      000355 C0 E0            [24] 1030 	push	acc
      000357 12r00r00         [24] 1031 	lcall	_printf
      00035A E5 81            [12] 1032 	mov	a,sp
      00035C 24 F9            [12] 1033 	add	a,#0xf9
      00035E F5 81            [12] 1034 	mov	sp,a
      000360 D0 03            [24] 1035 	pop	ar3
      000362 D0 04            [24] 1036 	pop	ar4
      000364 D0 05            [24] 1037 	pop	ar5
      000366 D0 06            [24] 1038 	pop	ar6
                                   1039 ;	calc.c:72: printf("% 11ld\t", d);
      000368 C0 06            [24] 1040 	push	ar6
      00036A C0 05            [24] 1041 	push	ar5
      00036C C0 04            [24] 1042 	push	ar4
      00036E C0 03            [24] 1043 	push	ar3
      000370 C0 03            [24] 1044 	push	ar3
      000372 C0 04            [24] 1045 	push	ar4
      000374 C0 05            [24] 1046 	push	ar5
      000376 C0 06            [24] 1047 	push	ar6
      000378 74r07            [12] 1048 	mov	a,#___str_1
      00037A C0 E0            [24] 1049 	push	acc
      00037C 74s00            [12] 1050 	mov	a,#(___str_1 >> 8)
      00037E C0 E0            [24] 1051 	push	acc
      000380 74 80            [12] 1052 	mov	a,#0x80
      000382 C0 E0            [24] 1053 	push	acc
      000384 12r00r00         [24] 1054 	lcall	_printf
      000387 E5 81            [12] 1055 	mov	a,sp
      000389 24 F9            [12] 1056 	add	a,#0xf9
      00038B F5 81            [12] 1057 	mov	sp,a
      00038D D0 03            [24] 1058 	pop	ar3
      00038F D0 04            [24] 1059 	pop	ar4
      000391 D0 05            [24] 1060 	pop	ar5
      000393 D0 06            [24] 1061 	pop	ar6
                                   1062 ;	calc.c:73: printf("%011lo\t", d);
      000395 C0 06            [24] 1063 	push	ar6
      000397 C0 05            [24] 1064 	push	ar5
      000399 C0 04            [24] 1065 	push	ar4
      00039B C0 03            [24] 1066 	push	ar3
      00039D C0 03            [24] 1067 	push	ar3
      00039F C0 04            [24] 1068 	push	ar4
      0003A1 C0 05            [24] 1069 	push	ar5
      0003A3 C0 06            [24] 1070 	push	ar6
      0003A5 74r0F            [12] 1071 	mov	a,#___str_2
      0003A7 C0 E0            [24] 1072 	push	acc
      0003A9 74s00            [12] 1073 	mov	a,#(___str_2 >> 8)
      0003AB C0 E0            [24] 1074 	push	acc
      0003AD 74 80            [12] 1075 	mov	a,#0x80
      0003AF C0 E0            [24] 1076 	push	acc
      0003B1 12r00r00         [24] 1077 	lcall	_printf
      0003B4 E5 81            [12] 1078 	mov	a,sp
      0003B6 24 F9            [12] 1079 	add	a,#0xf9
      0003B8 F5 81            [12] 1080 	mov	sp,a
      0003BA D0 03            [24] 1081 	pop	ar3
      0003BC D0 04            [24] 1082 	pop	ar4
      0003BE D0 05            [24] 1083 	pop	ar5
      0003C0 D0 06            [24] 1084 	pop	ar6
      0003C2 D0 07            [24] 1085 	pop	ar7
                                   1086 ;	calc.c:74: printbin(d);
      0003C4 E5*00            [12] 1087 	mov	a,_bp
      0003C6 24 16            [12] 1088 	add	a,#0x16
      0003C8 F8               [12] 1089 	mov	r0,a
      0003C9 A6 03            [24] 1090 	mov	@r0,ar3
      0003CB 08               [12] 1091 	inc	r0
      0003CC A6 04            [24] 1092 	mov	@r0,ar4
      0003CE 08               [12] 1093 	inc	r0
      0003CF A6 05            [24] 1094 	mov	@r0,ar5
      0003D1 08               [12] 1095 	inc	r0
      0003D2 A6 06            [24] 1096 	mov	@r0,ar6
                                   1097 ;	calc.c:64: for (mask = 0x80000000lu; mask; mask >>= 1)
      0003D4 E5*00            [12] 1098 	mov	a,_bp
      0003D6 24 1A            [12] 1099 	add	a,#0x1a
      0003D8 F8               [12] 1100 	mov	r0,a
      0003D9 E4               [12] 1101 	clr	a
      0003DA F6               [12] 1102 	mov	@r0,a
      0003DB 08               [12] 1103 	inc	r0
      0003DC F6               [12] 1104 	mov	@r0,a
      0003DD 08               [12] 1105 	inc	r0
      0003DE F6               [12] 1106 	mov	@r0,a
      0003DF 08               [12] 1107 	inc	r0
      0003E0 76 80            [12] 1108 	mov	@r0,#0x80
                                   1109 ;	calc.c:121: return 1;
                                   1110 ;	calc.c:64: for (mask = 0x80000000lu; mask; mask >>= 1)
      0003E2                       1111 00143$:
                                   1112 ;	calc.c:65: (void)putchar((d & mask) ? (int)'1' : (int)'0');
      0003E2 E5*00            [12] 1113 	mov	a,_bp
      0003E4 24 16            [12] 1114 	add	a,#0x16
      0003E6 F8               [12] 1115 	mov	r0,a
      0003E7 86 02            [24] 1116 	mov	ar2,@r0
      0003E9 08               [12] 1117 	inc	r0
      0003EA 86 03            [24] 1118 	mov	ar3,@r0
      0003EC 08               [12] 1119 	inc	r0
      0003ED 86 04            [24] 1120 	mov	ar4,@r0
      0003EF 08               [12] 1121 	inc	r0
      0003F0 86 05            [24] 1122 	mov	ar5,@r0
      0003F2 E5*00            [12] 1123 	mov	a,_bp
      0003F4 24 1A            [12] 1124 	add	a,#0x1a
      0003F6 F8               [12] 1125 	mov	r0,a
      0003F7 E6               [12] 1126 	mov	a,@r0
      0003F8 52 02            [12] 1127 	anl	ar2,a
      0003FA 08               [12] 1128 	inc	r0
      0003FB E6               [12] 1129 	mov	a,@r0
      0003FC 52 03            [12] 1130 	anl	ar3,a
      0003FE 08               [12] 1131 	inc	r0
      0003FF E6               [12] 1132 	mov	a,@r0
      000400 52 04            [12] 1133 	anl	ar4,a
      000402 08               [12] 1134 	inc	r0
      000403 E6               [12] 1135 	mov	a,@r0
      000404 52 05            [12] 1136 	anl	ar5,a
      000406 EA               [12] 1137 	mov	a,r2
      000407 4B               [12] 1138 	orl	a,r3
      000408 4C               [12] 1139 	orl	a,r4
      000409 4D               [12] 1140 	orl	a,r5
      00040A 60 06            [24] 1141 	jz	00164$
      00040C 7C 31            [12] 1142 	mov	r4,#0x31
      00040E 7D 00            [12] 1143 	mov	r5,#0x00
      000410 80 04            [24] 1144 	sjmp	00165$
      000412                       1145 00164$:
      000412 7C 30            [12] 1146 	mov	r4,#0x30
      000414 7D 00            [12] 1147 	mov	r5,#0x00
      000416                       1148 00165$:
      000416 8C 82            [24] 1149 	mov	dpl,r4
      000418 8D 83            [24] 1150 	mov	dph,r5
      00041A 12r00r00         [24] 1151 	lcall	_putchar
                                   1152 ;	calc.c:64: for (mask = 0x80000000lu; mask; mask >>= 1)
      00041D E5*00            [12] 1153 	mov	a,_bp
      00041F 24 1A            [12] 1154 	add	a,#0x1a
      000421 F8               [12] 1155 	mov	r0,a
      000422 08               [12] 1156 	inc	r0
      000423 08               [12] 1157 	inc	r0
      000424 08               [12] 1158 	inc	r0
      000425 E6               [12] 1159 	mov	a,@r0
      000426 C3               [12] 1160 	clr	c
      000427 13               [12] 1161 	rrc	a
      000428 F6               [12] 1162 	mov	@r0,a
      000429 18               [12] 1163 	dec	r0
      00042A E6               [12] 1164 	mov	a,@r0
      00042B 13               [12] 1165 	rrc	a
      00042C F6               [12] 1166 	mov	@r0,a
      00042D 18               [12] 1167 	dec	r0
      00042E E6               [12] 1168 	mov	a,@r0
      00042F 13               [12] 1169 	rrc	a
      000430 F6               [12] 1170 	mov	@r0,a
      000431 18               [12] 1171 	dec	r0
      000432 E6               [12] 1172 	mov	a,@r0
      000433 13               [12] 1173 	rrc	a
      000434 F6               [12] 1174 	mov	@r0,a
      000435 E5*00            [12] 1175 	mov	a,_bp
      000437 24 1A            [12] 1176 	add	a,#0x1a
      000439 F8               [12] 1177 	mov	r0,a
      00043A E6               [12] 1178 	mov	a,@r0
      00043B 08               [12] 1179 	inc	r0
      00043C 46               [12] 1180 	orl	a,@r0
      00043D 08               [12] 1181 	inc	r0
      00043E 46               [12] 1182 	orl	a,@r0
      00043F 08               [12] 1183 	inc	r0
      000440 46               [12] 1184 	orl	a,@r0
      000441 70 9F            [24] 1185 	jnz	00143$
                                   1186 ;	calc.c:108: printstr("\r\n");
      000443 7Br17            [12] 1187 	mov	r3,#___str_3
      000445 7Cs00            [12] 1188 	mov	r4,#(___str_3 >> 8)
      000447 7D 80            [12] 1189 	mov	r5,#0x80
                                   1190 ;	calc.c:58: return;
      000449                       1191 00146$:
                                   1192 ;	calc.c:56: for (; *s; s++) putchar(*s);
      000449 8B 82            [24] 1193 	mov	dpl,r3
      00044B 8C 83            [24] 1194 	mov	dph,r4
      00044D 8D F0            [24] 1195 	mov	b,r5
      00044F 12r00r00         [24] 1196 	lcall	__gptrget
      000452 FA               [12] 1197 	mov	r2,a
      000453 60 10            [24] 1198 	jz	00124$
      000455 7E 00            [12] 1199 	mov	r6,#0x00
      000457 8A 82            [24] 1200 	mov	dpl,r2
      000459 8E 83            [24] 1201 	mov	dph,r6
      00045B 12r00r00         [24] 1202 	lcall	_putchar
      00045E 0B               [12] 1203 	inc	r3
                                   1204 ;	calc.c:108: printstr("\r\n");
      00045F BB 00 E7         [24] 1205 	cjne	r3,#0x00,00146$
      000462 0C               [12] 1206 	inc	r4
      000463 80 E4            [24] 1207 	sjmp	00146$
      000465                       1208 00124$:
                                   1209 ;	calc.c:109: r = stack_pop(ctx->ps, &d);
      000465 C0 07            [24] 1210 	push	ar7
      000467 A8*00            [24] 1211 	mov	r0,_bp
      000469 08               [12] 1212 	inc	r0
      00046A 86 03            [24] 1213 	mov	ar3,@r0
      00046C 7C 00            [12] 1214 	mov	r4,#0x00
      00046E 7D 40            [12] 1215 	mov	r5,#0x40
      000470 A8*00            [24] 1216 	mov	r0,_bp
      000472 08               [12] 1217 	inc	r0
      000473 08               [12] 1218 	inc	r0
      000474 86 82            [24] 1219 	mov	dpl,@r0
      000476 08               [12] 1220 	inc	r0
      000477 86 83            [24] 1221 	mov	dph,@r0
      000479 08               [12] 1222 	inc	r0
      00047A 86 F0            [24] 1223 	mov	b,@r0
      00047C 12r00r00         [24] 1224 	lcall	__gptrget
      00047F FA               [12] 1225 	mov	r2,a
      000480 A3               [24] 1226 	inc	dptr
      000481 12r00r00         [24] 1227 	lcall	__gptrget
      000484 FE               [12] 1228 	mov	r6,a
      000485 A3               [24] 1229 	inc	dptr
      000486 12r00r00         [24] 1230 	lcall	__gptrget
      000489 FF               [12] 1231 	mov	r7,a
      00048A C0 07            [24] 1232 	push	ar7
      00048C C0 03            [24] 1233 	push	ar3
      00048E C0 04            [24] 1234 	push	ar4
      000490 C0 05            [24] 1235 	push	ar5
      000492 8A 82            [24] 1236 	mov	dpl,r2
      000494 8E 83            [24] 1237 	mov	dph,r6
      000496 8F F0            [24] 1238 	mov	b,r7
      000498 12r00r00         [24] 1239 	lcall	_stack_pop
      00049B AE 82            [24] 1240 	mov	r6,dpl
      00049D AD 83            [24] 1241 	mov	r5,dph
      00049F 15 81            [12] 1242 	dec	sp
      0004A1 15 81            [12] 1243 	dec	sp
      0004A3 15 81            [12] 1244 	dec	sp
      0004A5 D0 07            [24] 1245 	pop	ar7
      0004A7 D0 07            [24] 1246 	pop	ar7
      0004A9 02r02rD2         [24] 1247 	ljmp	00105$
      0004AC                       1248 00110$:
                                   1249 ;	calc.c:112: if (delta->event == EVENT_TERM) {
      0004AC E5*00            [12] 1250 	mov	a,_bp
      0004AE 24 08            [12] 1251 	add	a,#0x08
      0004B0 F8               [12] 1252 	mov	r0,a
      0004B1 86 82            [24] 1253 	mov	dpl,@r0
      0004B3 08               [12] 1254 	inc	r0
      0004B4 86 83            [24] 1255 	mov	dph,@r0
      0004B6 08               [12] 1256 	inc	r0
      0004B7 86 F0            [24] 1257 	mov	b,@r0
      0004B9 12r00r00         [24] 1258 	lcall	__gptrget
      0004BC FD               [12] 1259 	mov	r5,a
      0004BD A3               [24] 1260 	inc	dptr
      0004BE 12r00r00         [24] 1261 	lcall	__gptrget
      0004C1 FE               [12] 1262 	mov	r6,a
      0004C2 BD 08 05         [24] 1263 	cjne	r5,#0x08,00330$
      0004C5 BE 00 02         [24] 1264 	cjne	r6,#0x00,00330$
      0004C8 80 03            [24] 1265 	sjmp	00331$
      0004CA                       1266 00330$:
      0004CA 02r07r40         [24] 1267 	ljmp	00113$
      0004CD                       1268 00331$:
                                   1269 ;	calc.c:113: printstr("\r\n");
      0004CD 7Cr17            [12] 1270 	mov	r4,#___str_3
      0004CF 7Ds00            [12] 1271 	mov	r5,#(___str_3 >> 8)
      0004D1 7E 80            [12] 1272 	mov	r6,#0x80
                                   1273 ;	calc.c:58: return;
      0004D3                       1274 00149$:
                                   1275 ;	calc.c:56: for (; *s; s++) putchar(*s);
      0004D3 8C 82            [24] 1276 	mov	dpl,r4
      0004D5 8D 83            [24] 1277 	mov	dph,r5
      0004D7 8E F0            [24] 1278 	mov	b,r6
      0004D9 12r00r00         [24] 1279 	lcall	__gptrget
      0004DC FB               [12] 1280 	mov	r3,a
      0004DD 60 10            [24] 1281 	jz	00126$
      0004DF 7A 00            [12] 1282 	mov	r2,#0x00
      0004E1 8B 82            [24] 1283 	mov	dpl,r3
      0004E3 8A 83            [24] 1284 	mov	dph,r2
      0004E5 12r00r00         [24] 1285 	lcall	_putchar
      0004E8 0C               [12] 1286 	inc	r4
                                   1287 ;	calc.c:113: printstr("\r\n");
      0004E9 BC 00 E7         [24] 1288 	cjne	r4,#0x00,00149$
      0004EC 0D               [12] 1289 	inc	r5
      0004ED 80 E4            [24] 1290 	sjmp	00149$
      0004EF                       1291 00126$:
                                   1292 ;	calc.c:114: for (r = stack_pop(ctx->ss, &d); r > 0; r = stack_pop(ctx->ss, &d)) {
      0004EF 8F 06            [24] 1293 	mov	ar6,r7
      0004F1 E5*00            [12] 1294 	mov	a,_bp
      0004F3 24 05            [12] 1295 	add	a,#0x05
      0004F5 F8               [12] 1296 	mov	r0,a
      0004F6 A6 06            [24] 1297 	mov	@r0,ar6
      0004F8 08               [12] 1298 	inc	r0
      0004F9 76 00            [12] 1299 	mov	@r0,#0x00
      0004FB 08               [12] 1300 	inc	r0
      0004FC 76 40            [12] 1301 	mov	@r0,#0x40
      0004FE E5*00            [12] 1302 	mov	a,_bp
      000500 24 0B            [12] 1303 	add	a,#0x0b
      000502 F8               [12] 1304 	mov	r0,a
      000503 E5*00            [12] 1305 	mov	a,_bp
      000505 24 08            [12] 1306 	add	a,#0x08
      000507 F9               [12] 1307 	mov	r1,a
      000508 74 14            [12] 1308 	mov	a,#0x14
      00050A 26               [12] 1309 	add	a,@r0
      00050B F7               [12] 1310 	mov	@r1,a
      00050C 74 40            [12] 1311 	mov	a,#0x40
      00050E 08               [12] 1312 	inc	r0
      00050F 36               [12] 1313 	addc	a,@r0
      000510 09               [12] 1314 	inc	r1
      000511 F7               [12] 1315 	mov	@r1,a
      000512 08               [12] 1316 	inc	r0
      000513 09               [12] 1317 	inc	r1
      000514 E6               [12] 1318 	mov	a,@r0
      000515 F7               [12] 1319 	mov	@r1,a
      000516 E5*00            [12] 1320 	mov	a,_bp
      000518 24 08            [12] 1321 	add	a,#0x08
      00051A F8               [12] 1322 	mov	r0,a
      00051B 86 82            [24] 1323 	mov	dpl,@r0
      00051D 08               [12] 1324 	inc	r0
      00051E 86 83            [24] 1325 	mov	dph,@r0
      000520 08               [12] 1326 	inc	r0
      000521 86 F0            [24] 1327 	mov	b,@r0
      000523 12r00r00         [24] 1328 	lcall	__gptrget
      000526 FA               [12] 1329 	mov	r2,a
      000527 A3               [24] 1330 	inc	dptr
      000528 12r00r00         [24] 1331 	lcall	__gptrget
      00052B FB               [12] 1332 	mov	r3,a
      00052C A3               [24] 1333 	inc	dptr
      00052D 12r00r00         [24] 1334 	lcall	__gptrget
      000530 FE               [12] 1335 	mov	r6,a
      000531 C0 07            [24] 1336 	push	ar7
      000533 E5*00            [12] 1337 	mov	a,_bp
      000535 24 05            [12] 1338 	add	a,#0x05
      000537 F8               [12] 1339 	mov	r0,a
      000538 E6               [12] 1340 	mov	a,@r0
      000539 C0 E0            [24] 1341 	push	acc
      00053B 08               [12] 1342 	inc	r0
      00053C E6               [12] 1343 	mov	a,@r0
      00053D C0 E0            [24] 1344 	push	acc
      00053F 08               [12] 1345 	inc	r0
      000540 E6               [12] 1346 	mov	a,@r0
      000541 C0 E0            [24] 1347 	push	acc
      000543 8A 82            [24] 1348 	mov	dpl,r2
      000545 8B 83            [24] 1349 	mov	dph,r3
      000547 8E F0            [24] 1350 	mov	b,r6
      000549 12r00r00         [24] 1351 	lcall	_stack_pop
      00054C AD 82            [24] 1352 	mov	r5,dpl
      00054E AE 83            [24] 1353 	mov	r6,dph
      000550 15 81            [12] 1354 	dec	sp
      000552 15 81            [12] 1355 	dec	sp
      000554 15 81            [12] 1356 	dec	sp
      000556 D0 07            [24] 1357 	pop	ar7
      000558                       1358 00160$:
      000558 C3               [12] 1359 	clr	c
      000559 E4               [12] 1360 	clr	a
      00055A 9D               [12] 1361 	subb	a,r5
      00055B 74 80            [12] 1362 	mov	a,#(0x00 ^ 0x80)
      00055D 8E F0            [24] 1363 	mov	b,r6
      00055F 63 F0 80         [24] 1364 	xrl	b,#0x80
      000562 95 F0            [12] 1365 	subb	a,b
      000564 40 03            [24] 1366 	jc	00334$
      000566 02r07r40         [24] 1367 	ljmp	00113$
      000569                       1368 00334$:
                                   1369 ;	calc.c:115: printstr("SSPA\t");
      000569 7Dr32            [12] 1370 	mov	r5,#___str_6
      00056B 7Bs00            [12] 1371 	mov	r3,#(___str_6 >> 8)
      00056D 7A 80            [12] 1372 	mov	r2,#0x80
                                   1373 ;	calc.c:58: return;
      00056F                       1374 00152$:
                                   1375 ;	calc.c:56: for (; *s; s++) putchar(*s);
      00056F 8D 82            [24] 1376 	mov	dpl,r5
      000571 8B 83            [24] 1377 	mov	dph,r3
      000573 8A F0            [24] 1378 	mov	b,r2
      000575 12r00r00         [24] 1379 	lcall	__gptrget
      000578 FE               [12] 1380 	mov	r6,a
      000579 60 16            [24] 1381 	jz	00128$
      00057B C0 07            [24] 1382 	push	ar7
      00057D 8E 04            [24] 1383 	mov	ar4,r6
      00057F 7F 00            [12] 1384 	mov	r7,#0x00
      000581 8C 82            [24] 1385 	mov	dpl,r4
      000583 8F 83            [24] 1386 	mov	dph,r7
      000585 12r00r00         [24] 1387 	lcall	_putchar
      000588 0D               [12] 1388 	inc	r5
      000589 BD 00 01         [24] 1389 	cjne	r5,#0x00,00336$
      00058C 0B               [12] 1390 	inc	r3
      00058D                       1391 00336$:
      00058D D0 07            [24] 1392 	pop	ar7
                                   1393 ;	calc.c:115: printstr("SSPA\t");
      00058F 80 DE            [24] 1394 	sjmp	00152$
      000591                       1395 00128$:
                                   1396 ;	calc.c:116: printall(d);
      000591 C0 07            [24] 1397 	push	ar7
      000593 E5*00            [12] 1398 	mov	a,_bp
      000595 24 0E            [12] 1399 	add	a,#0x0e
      000597 F8               [12] 1400 	mov	r0,a
      000598 E5*00            [12] 1401 	mov	a,_bp
      00059A 24 12            [12] 1402 	add	a,#0x12
      00059C F9               [12] 1403 	mov	r1,a
      00059D E6               [12] 1404 	mov	a,@r0
      00059E F7               [12] 1405 	mov	@r1,a
      00059F 08               [12] 1406 	inc	r0
      0005A0 09               [12] 1407 	inc	r1
      0005A1 E6               [12] 1408 	mov	a,@r0
      0005A2 F7               [12] 1409 	mov	@r1,a
      0005A3 08               [12] 1410 	inc	r0
      0005A4 09               [12] 1411 	inc	r1
      0005A5 E6               [12] 1412 	mov	a,@r0
      0005A6 F7               [12] 1413 	mov	@r1,a
      0005A7 08               [12] 1414 	inc	r0
      0005A8 09               [12] 1415 	inc	r1
      0005A9 E6               [12] 1416 	mov	a,@r0
      0005AA F7               [12] 1417 	mov	@r1,a
      0005AB E5*00            [12] 1418 	mov	a,_bp
      0005AD 24 12            [12] 1419 	add	a,#0x12
      0005AF F8               [12] 1420 	mov	r0,a
      0005B0 86 02            [24] 1421 	mov	ar2,@r0
      0005B2 08               [12] 1422 	inc	r0
      0005B3 86 03            [24] 1423 	mov	ar3,@r0
      0005B5 08               [12] 1424 	inc	r0
      0005B6 86 04            [24] 1425 	mov	ar4,@r0
      0005B8 08               [12] 1426 	inc	r0
      0005B9 86 07            [24] 1427 	mov	ar7,@r0
                                   1428 ;	calc.c:71: printf("%08lx\t", d);
      0005BB C0 07            [24] 1429 	push	ar7
      0005BD C0 04            [24] 1430 	push	ar4
      0005BF C0 03            [24] 1431 	push	ar3
      0005C1 C0 02            [24] 1432 	push	ar2
      0005C3 E5*00            [12] 1433 	mov	a,_bp
      0005C5 24 12            [12] 1434 	add	a,#0x12
      0005C7 F8               [12] 1435 	mov	r0,a
      0005C8 E6               [12] 1436 	mov	a,@r0
      0005C9 C0 E0            [24] 1437 	push	acc
      0005CB 08               [12] 1438 	inc	r0
      0005CC E6               [12] 1439 	mov	a,@r0
      0005CD C0 E0            [24] 1440 	push	acc
      0005CF 08               [12] 1441 	inc	r0
      0005D0 E6               [12] 1442 	mov	a,@r0
      0005D1 C0 E0            [24] 1443 	push	acc
      0005D3 08               [12] 1444 	inc	r0
      0005D4 E6               [12] 1445 	mov	a,@r0
      0005D5 C0 E0            [24] 1446 	push	acc
      0005D7 74r00            [12] 1447 	mov	a,#___str_0
      0005D9 C0 E0            [24] 1448 	push	acc
      0005DB 74s00            [12] 1449 	mov	a,#(___str_0 >> 8)
      0005DD C0 E0            [24] 1450 	push	acc
      0005DF 74 80            [12] 1451 	mov	a,#0x80
      0005E1 C0 E0            [24] 1452 	push	acc
      0005E3 12r00r00         [24] 1453 	lcall	_printf
      0005E6 E5 81            [12] 1454 	mov	a,sp
      0005E8 24 F9            [12] 1455 	add	a,#0xf9
      0005EA F5 81            [12] 1456 	mov	sp,a
      0005EC D0 02            [24] 1457 	pop	ar2
      0005EE D0 03            [24] 1458 	pop	ar3
      0005F0 D0 04            [24] 1459 	pop	ar4
      0005F2 D0 07            [24] 1460 	pop	ar7
                                   1461 ;	calc.c:72: printf("% 11ld\t", d);
      0005F4 C0 07            [24] 1462 	push	ar7
      0005F6 C0 04            [24] 1463 	push	ar4
      0005F8 C0 03            [24] 1464 	push	ar3
      0005FA C0 02            [24] 1465 	push	ar2
      0005FC C0 02            [24] 1466 	push	ar2
      0005FE C0 03            [24] 1467 	push	ar3
      000600 C0 04            [24] 1468 	push	ar4
      000602 C0 07            [24] 1469 	push	ar7
      000604 74r07            [12] 1470 	mov	a,#___str_1
      000606 C0 E0            [24] 1471 	push	acc
      000608 74s00            [12] 1472 	mov	a,#(___str_1 >> 8)
      00060A C0 E0            [24] 1473 	push	acc
      00060C 74 80            [12] 1474 	mov	a,#0x80
      00060E C0 E0            [24] 1475 	push	acc
      000610 12r00r00         [24] 1476 	lcall	_printf
      000613 E5 81            [12] 1477 	mov	a,sp
      000615 24 F9            [12] 1478 	add	a,#0xf9
      000617 F5 81            [12] 1479 	mov	sp,a
      000619 D0 02            [24] 1480 	pop	ar2
      00061B D0 03            [24] 1481 	pop	ar3
      00061D D0 04            [24] 1482 	pop	ar4
      00061F D0 07            [24] 1483 	pop	ar7
                                   1484 ;	calc.c:73: printf("%011lo\t", d);
      000621 C0 07            [24] 1485 	push	ar7
      000623 C0 04            [24] 1486 	push	ar4
      000625 C0 03            [24] 1487 	push	ar3
      000627 C0 02            [24] 1488 	push	ar2
      000629 C0 02            [24] 1489 	push	ar2
      00062B C0 03            [24] 1490 	push	ar3
      00062D C0 04            [24] 1491 	push	ar4
      00062F C0 07            [24] 1492 	push	ar7
      000631 74r0F            [12] 1493 	mov	a,#___str_2
      000633 C0 E0            [24] 1494 	push	acc
      000635 74s00            [12] 1495 	mov	a,#(___str_2 >> 8)
      000637 C0 E0            [24] 1496 	push	acc
      000639 74 80            [12] 1497 	mov	a,#0x80
      00063B C0 E0            [24] 1498 	push	acc
      00063D 12r00r00         [24] 1499 	lcall	_printf
      000640 E5 81            [12] 1500 	mov	a,sp
      000642 24 F9            [12] 1501 	add	a,#0xf9
      000644 F5 81            [12] 1502 	mov	sp,a
      000646 D0 02            [24] 1503 	pop	ar2
      000648 D0 03            [24] 1504 	pop	ar3
      00064A D0 04            [24] 1505 	pop	ar4
      00064C D0 07            [24] 1506 	pop	ar7
                                   1507 ;	calc.c:74: printbin(d);
      00064E E5*00            [12] 1508 	mov	a,_bp
      000650 24 16            [12] 1509 	add	a,#0x16
      000652 F8               [12] 1510 	mov	r0,a
      000653 A6 02            [24] 1511 	mov	@r0,ar2
      000655 08               [12] 1512 	inc	r0
      000656 A6 03            [24] 1513 	mov	@r0,ar3
      000658 08               [12] 1514 	inc	r0
      000659 A6 04            [24] 1515 	mov	@r0,ar4
      00065B 08               [12] 1516 	inc	r0
      00065C A6 07            [24] 1517 	mov	@r0,ar7
                                   1518 ;	calc.c:64: for (mask = 0x80000000lu; mask; mask >>= 1)
      00065E E5*00            [12] 1519 	mov	a,_bp
      000660 24 1A            [12] 1520 	add	a,#0x1a
      000662 F8               [12] 1521 	mov	r0,a
      000663 E4               [12] 1522 	clr	a
      000664 F6               [12] 1523 	mov	@r0,a
      000665 08               [12] 1524 	inc	r0
      000666 F6               [12] 1525 	mov	@r0,a
      000667 08               [12] 1526 	inc	r0
      000668 F6               [12] 1527 	mov	@r0,a
      000669 08               [12] 1528 	inc	r0
      00066A 76 80            [12] 1529 	mov	@r0,#0x80
                                   1530 ;	calc.c:121: return 1;
      00066C D0 07            [24] 1531 	pop	ar7
                                   1532 ;	calc.c:64: for (mask = 0x80000000lu; mask; mask >>= 1)
      00066E                       1533 00154$:
                                   1534 ;	calc.c:65: (void)putchar((d & mask) ? (int)'1' : (int)'0');
      00066E C0 07            [24] 1535 	push	ar7
      000670 E5*00            [12] 1536 	mov	a,_bp
      000672 24 16            [12] 1537 	add	a,#0x16
      000674 F8               [12] 1538 	mov	r0,a
      000675 86 02            [24] 1539 	mov	ar2,@r0
      000677 08               [12] 1540 	inc	r0
      000678 86 03            [24] 1541 	mov	ar3,@r0
      00067A 08               [12] 1542 	inc	r0
      00067B 86 04            [24] 1543 	mov	ar4,@r0
      00067D 08               [12] 1544 	inc	r0
      00067E 86 07            [24] 1545 	mov	ar7,@r0
      000680 E5*00            [12] 1546 	mov	a,_bp
      000682 24 1A            [12] 1547 	add	a,#0x1a
      000684 F8               [12] 1548 	mov	r0,a
      000685 E6               [12] 1549 	mov	a,@r0
      000686 52 02            [12] 1550 	anl	ar2,a
      000688 08               [12] 1551 	inc	r0
      000689 E6               [12] 1552 	mov	a,@r0
      00068A 52 03            [12] 1553 	anl	ar3,a
      00068C 08               [12] 1554 	inc	r0
      00068D E6               [12] 1555 	mov	a,@r0
      00068E 52 04            [12] 1556 	anl	ar4,a
      000690 08               [12] 1557 	inc	r0
      000691 E6               [12] 1558 	mov	a,@r0
      000692 52 07            [12] 1559 	anl	ar7,a
      000694 EA               [12] 1560 	mov	a,r2
      000695 4B               [12] 1561 	orl	a,r3
      000696 4C               [12] 1562 	orl	a,r4
      000697 4F               [12] 1563 	orl	a,r7
      000698 D0 07            [24] 1564 	pop	ar7
      00069A 60 06            [24] 1565 	jz	00166$
      00069C 7B 31            [12] 1566 	mov	r3,#0x31
      00069E 7C 00            [12] 1567 	mov	r4,#0x00
      0006A0 80 04            [24] 1568 	sjmp	00167$
      0006A2                       1569 00166$:
      0006A2 7B 30            [12] 1570 	mov	r3,#0x30
      0006A4 7C 00            [12] 1571 	mov	r4,#0x00
      0006A6                       1572 00167$:
      0006A6 8B 82            [24] 1573 	mov	dpl,r3
      0006A8 8C 83            [24] 1574 	mov	dph,r4
      0006AA 12r00r00         [24] 1575 	lcall	_putchar
                                   1576 ;	calc.c:64: for (mask = 0x80000000lu; mask; mask >>= 1)
      0006AD E5*00            [12] 1577 	mov	a,_bp
      0006AF 24 1A            [12] 1578 	add	a,#0x1a
      0006B1 F8               [12] 1579 	mov	r0,a
      0006B2 08               [12] 1580 	inc	r0
      0006B3 08               [12] 1581 	inc	r0
      0006B4 08               [12] 1582 	inc	r0
      0006B5 E6               [12] 1583 	mov	a,@r0
      0006B6 C3               [12] 1584 	clr	c
      0006B7 13               [12] 1585 	rrc	a
      0006B8 F6               [12] 1586 	mov	@r0,a
      0006B9 18               [12] 1587 	dec	r0
      0006BA E6               [12] 1588 	mov	a,@r0
      0006BB 13               [12] 1589 	rrc	a
      0006BC F6               [12] 1590 	mov	@r0,a
      0006BD 18               [12] 1591 	dec	r0
      0006BE E6               [12] 1592 	mov	a,@r0
      0006BF 13               [12] 1593 	rrc	a
      0006C0 F6               [12] 1594 	mov	@r0,a
      0006C1 18               [12] 1595 	dec	r0
      0006C2 E6               [12] 1596 	mov	a,@r0
      0006C3 13               [12] 1597 	rrc	a
      0006C4 F6               [12] 1598 	mov	@r0,a
      0006C5 E5*00            [12] 1599 	mov	a,_bp
      0006C7 24 1A            [12] 1600 	add	a,#0x1a
      0006C9 F8               [12] 1601 	mov	r0,a
      0006CA E6               [12] 1602 	mov	a,@r0
      0006CB 08               [12] 1603 	inc	r0
      0006CC 46               [12] 1604 	orl	a,@r0
      0006CD 08               [12] 1605 	inc	r0
      0006CE 46               [12] 1606 	orl	a,@r0
      0006CF 08               [12] 1607 	inc	r0
      0006D0 46               [12] 1608 	orl	a,@r0
      0006D1 70 9B            [24] 1609 	jnz	00154$
                                   1610 ;	calc.c:117: printstr("\r\n");
      0006D3 7Dr17            [12] 1611 	mov	r5,#___str_3
      0006D5 7Bs00            [12] 1612 	mov	r3,#(___str_3 >> 8)
      0006D7 7A 80            [12] 1613 	mov	r2,#0x80
                                   1614 ;	calc.c:58: return;
      0006D9                       1615 00157$:
                                   1616 ;	calc.c:56: for (; *s; s++) putchar(*s);
      0006D9 8D 82            [24] 1617 	mov	dpl,r5
      0006DB 8B 83            [24] 1618 	mov	dph,r3
      0006DD 8A F0            [24] 1619 	mov	b,r2
      0006DF 12r00r00         [24] 1620 	lcall	__gptrget
      0006E2 FE               [12] 1621 	mov	r6,a
      0006E3 60 16            [24] 1622 	jz	00133$
      0006E5 C0 07            [24] 1623 	push	ar7
      0006E7 8E 04            [24] 1624 	mov	ar4,r6
      0006E9 7F 00            [12] 1625 	mov	r7,#0x00
      0006EB 8C 82            [24] 1626 	mov	dpl,r4
      0006ED 8F 83            [24] 1627 	mov	dph,r7
      0006EF 12r00r00         [24] 1628 	lcall	_putchar
      0006F2 0D               [12] 1629 	inc	r5
      0006F3 BD 00 01         [24] 1630 	cjne	r5,#0x00,00340$
      0006F6 0B               [12] 1631 	inc	r3
      0006F7                       1632 00340$:
      0006F7 D0 07            [24] 1633 	pop	ar7
                                   1634 ;	calc.c:117: printstr("\r\n");
      0006F9 80 DE            [24] 1635 	sjmp	00157$
      0006FB                       1636 00133$:
                                   1637 ;	calc.c:114: for (r = stack_pop(ctx->ss, &d); r > 0; r = stack_pop(ctx->ss, &d)) {
      0006FB 8F 06            [24] 1638 	mov	ar6,r7
      0006FD 7D 00            [12] 1639 	mov	r5,#0x00
      0006FF 7A 40            [12] 1640 	mov	r2,#0x40
      000701 C0 07            [24] 1641 	push	ar7
      000703 E5*00            [12] 1642 	mov	a,_bp
      000705 24 08            [12] 1643 	add	a,#0x08
      000707 F8               [12] 1644 	mov	r0,a
      000708 86 82            [24] 1645 	mov	dpl,@r0
      00070A 08               [12] 1646 	inc	r0
      00070B 86 83            [24] 1647 	mov	dph,@r0
      00070D 08               [12] 1648 	inc	r0
      00070E 86 F0            [24] 1649 	mov	b,@r0
      000710 12r00r00         [24] 1650 	lcall	__gptrget
      000713 FB               [12] 1651 	mov	r3,a
      000714 A3               [24] 1652 	inc	dptr
      000715 12r00r00         [24] 1653 	lcall	__gptrget
      000718 FC               [12] 1654 	mov	r4,a
      000719 A3               [24] 1655 	inc	dptr
      00071A 12r00r00         [24] 1656 	lcall	__gptrget
      00071D FF               [12] 1657 	mov	r7,a
      00071E C0 06            [24] 1658 	push	ar6
      000720 C0 05            [24] 1659 	push	ar5
      000722 C0 02            [24] 1660 	push	ar2
      000724 8B 82            [24] 1661 	mov	dpl,r3
      000726 8C 83            [24] 1662 	mov	dph,r4
      000728 8F F0            [24] 1663 	mov	b,r7
      00072A 12r00r00         [24] 1664 	lcall	_stack_pop
      00072D AC 82            [24] 1665 	mov	r4,dpl
      00072F AF 83            [24] 1666 	mov	r7,dph
      000731 15 81            [12] 1667 	dec	sp
      000733 15 81            [12] 1668 	dec	sp
      000735 15 81            [12] 1669 	dec	sp
      000737 8C 05            [24] 1670 	mov	ar5,r4
      000739 8F 06            [24] 1671 	mov	ar6,r7
      00073B D0 07            [24] 1672 	pop	ar7
      00073D 02r05r58         [24] 1673 	ljmp	00160$
      000740                       1674 00113$:
                                   1675 ;	calc.c:121: return 1;
      000740 90 00 01         [24] 1676 	mov	dptr,#0x0001
                                   1677 ;	calc.c:122: }
      000743 85*00 81         [24] 1678 	mov	sp,_bp
      000746 D0*00            [24] 1679 	pop	_bp
      000748 22               [24] 1680 	ret
                                   1681 ;------------------------------------------------------------
                                   1682 ;Allocation info for local variables in function 'dump_peek'
                                   1683 ;------------------------------------------------------------
                                   1684 ;d                         Allocated to stack - _bp -6
                                   1685 ;_ctx                      Allocated to registers 
                                   1686 ;__1310720021              Allocated to registers 
                                   1687 ;s                         Allocated to registers r5 r6 r7 
                                   1688 ;__1310720023              Allocated to registers r4 r5 r6 r7 
                                   1689 ;d                         Allocated to registers 
                                   1690 ;__1310720001              Allocated to registers 
                                   1691 ;d                         Allocated to stack - _bp +1
                                   1692 ;mask                      Allocated to stack - _bp +5
                                   1693 ;__1310720025              Allocated to registers 
                                   1694 ;s                         Allocated to registers r5 r6 r7 
                                   1695 ;------------------------------------------------------------
                                   1696 ;	calc.c:124: static int dump_peek(void *_ctx, long d) __reentrant {
                                   1697 ;	-----------------------------------------
                                   1698 ;	 function dump_peek
                                   1699 ;	-----------------------------------------
      000749                       1700 _dump_peek:
      000749 C0*00            [24] 1701 	push	_bp
      00074B E5 81            [12] 1702 	mov	a,sp
      00074D F5*00            [12] 1703 	mov	_bp,a
      00074F 24 08            [12] 1704 	add	a,#0x08
      000751 F5 81            [12] 1705 	mov	sp,a
                                   1706 ;	calc.c:127: printstr("PSVA\t");
      000753 7Dr38            [12] 1707 	mov	r5,#___str_7
      000755 7Es00            [12] 1708 	mov	r6,#(___str_7 >> 8)
      000757 7F 80            [12] 1709 	mov	r7,#0x80
                                   1710 ;	calc.c:58: return;
      000759                       1711 00109$:
                                   1712 ;	calc.c:56: for (; *s; s++) putchar(*s);
      000759 8D 82            [24] 1713 	mov	dpl,r5
      00075B 8E 83            [24] 1714 	mov	dph,r6
      00075D 8F F0            [24] 1715 	mov	b,r7
      00075F 12r00r00         [24] 1716 	lcall	__gptrget
      000762 FC               [12] 1717 	mov	r4,a
      000763 60 10            [24] 1718 	jz	00102$
      000765 7B 00            [12] 1719 	mov	r3,#0x00
      000767 8C 82            [24] 1720 	mov	dpl,r4
      000769 8B 83            [24] 1721 	mov	dph,r3
      00076B 12r00r00         [24] 1722 	lcall	_putchar
      00076E 0D               [12] 1723 	inc	r5
                                   1724 ;	calc.c:127: printstr("PSVA\t");
      00076F BD 00 E7         [24] 1725 	cjne	r5,#0x00,00109$
      000772 0E               [12] 1726 	inc	r6
      000773 80 E4            [24] 1727 	sjmp	00109$
      000775                       1728 00102$:
                                   1729 ;	calc.c:128: printall(d);
      000775 E5*00            [12] 1730 	mov	a,_bp
      000777 24 FA            [12] 1731 	add	a,#0xfa
      000779 F8               [12] 1732 	mov	r0,a
      00077A 86 04            [24] 1733 	mov	ar4,@r0
      00077C 08               [12] 1734 	inc	r0
      00077D 86 05            [24] 1735 	mov	ar5,@r0
      00077F 08               [12] 1736 	inc	r0
      000780 86 06            [24] 1737 	mov	ar6,@r0
      000782 08               [12] 1738 	inc	r0
      000783 86 07            [24] 1739 	mov	ar7,@r0
                                   1740 ;	calc.c:71: printf("%08lx\t", d);
      000785 C0 07            [24] 1741 	push	ar7
      000787 C0 06            [24] 1742 	push	ar6
      000789 C0 05            [24] 1743 	push	ar5
      00078B C0 04            [24] 1744 	push	ar4
      00078D C0 04            [24] 1745 	push	ar4
      00078F C0 05            [24] 1746 	push	ar5
      000791 C0 06            [24] 1747 	push	ar6
      000793 C0 07            [24] 1748 	push	ar7
      000795 74r00            [12] 1749 	mov	a,#___str_0
      000797 C0 E0            [24] 1750 	push	acc
      000799 74s00            [12] 1751 	mov	a,#(___str_0 >> 8)
      00079B C0 E0            [24] 1752 	push	acc
      00079D 74 80            [12] 1753 	mov	a,#0x80
      00079F C0 E0            [24] 1754 	push	acc
      0007A1 12r00r00         [24] 1755 	lcall	_printf
      0007A4 E5 81            [12] 1756 	mov	a,sp
      0007A6 24 F9            [12] 1757 	add	a,#0xf9
      0007A8 F5 81            [12] 1758 	mov	sp,a
      0007AA D0 04            [24] 1759 	pop	ar4
      0007AC D0 05            [24] 1760 	pop	ar5
      0007AE D0 06            [24] 1761 	pop	ar6
      0007B0 D0 07            [24] 1762 	pop	ar7
                                   1763 ;	calc.c:72: printf("% 11ld\t", d);
      0007B2 C0 07            [24] 1764 	push	ar7
      0007B4 C0 06            [24] 1765 	push	ar6
      0007B6 C0 05            [24] 1766 	push	ar5
      0007B8 C0 04            [24] 1767 	push	ar4
      0007BA C0 04            [24] 1768 	push	ar4
      0007BC C0 05            [24] 1769 	push	ar5
      0007BE C0 06            [24] 1770 	push	ar6
      0007C0 C0 07            [24] 1771 	push	ar7
      0007C2 74r07            [12] 1772 	mov	a,#___str_1
      0007C4 C0 E0            [24] 1773 	push	acc
      0007C6 74s00            [12] 1774 	mov	a,#(___str_1 >> 8)
      0007C8 C0 E0            [24] 1775 	push	acc
      0007CA 74 80            [12] 1776 	mov	a,#0x80
      0007CC C0 E0            [24] 1777 	push	acc
      0007CE 12r00r00         [24] 1778 	lcall	_printf
      0007D1 E5 81            [12] 1779 	mov	a,sp
      0007D3 24 F9            [12] 1780 	add	a,#0xf9
      0007D5 F5 81            [12] 1781 	mov	sp,a
      0007D7 D0 04            [24] 1782 	pop	ar4
      0007D9 D0 05            [24] 1783 	pop	ar5
      0007DB D0 06            [24] 1784 	pop	ar6
      0007DD D0 07            [24] 1785 	pop	ar7
                                   1786 ;	calc.c:73: printf("%011lo\t", d);
      0007DF C0 07            [24] 1787 	push	ar7
      0007E1 C0 06            [24] 1788 	push	ar6
      0007E3 C0 05            [24] 1789 	push	ar5
      0007E5 C0 04            [24] 1790 	push	ar4
      0007E7 C0 04            [24] 1791 	push	ar4
      0007E9 C0 05            [24] 1792 	push	ar5
      0007EB C0 06            [24] 1793 	push	ar6
      0007ED C0 07            [24] 1794 	push	ar7
      0007EF 74r0F            [12] 1795 	mov	a,#___str_2
      0007F1 C0 E0            [24] 1796 	push	acc
      0007F3 74s00            [12] 1797 	mov	a,#(___str_2 >> 8)
      0007F5 C0 E0            [24] 1798 	push	acc
      0007F7 74 80            [12] 1799 	mov	a,#0x80
      0007F9 C0 E0            [24] 1800 	push	acc
      0007FB 12r00r00         [24] 1801 	lcall	_printf
      0007FE E5 81            [12] 1802 	mov	a,sp
      000800 24 F9            [12] 1803 	add	a,#0xf9
      000802 F5 81            [12] 1804 	mov	sp,a
      000804 D0 04            [24] 1805 	pop	ar4
      000806 D0 05            [24] 1806 	pop	ar5
      000808 D0 06            [24] 1807 	pop	ar6
      00080A D0 07            [24] 1808 	pop	ar7
                                   1809 ;	calc.c:74: printbin(d);
      00080C A8*00            [24] 1810 	mov	r0,_bp
      00080E 08               [12] 1811 	inc	r0
      00080F A6 04            [24] 1812 	mov	@r0,ar4
      000811 08               [12] 1813 	inc	r0
      000812 A6 05            [24] 1814 	mov	@r0,ar5
      000814 08               [12] 1815 	inc	r0
      000815 A6 06            [24] 1816 	mov	@r0,ar6
      000817 08               [12] 1817 	inc	r0
      000818 A6 07            [24] 1818 	mov	@r0,ar7
                                   1819 ;	calc.c:64: for (mask = 0x80000000lu; mask; mask >>= 1)
      00081A E5*00            [12] 1820 	mov	a,_bp
      00081C 24 05            [12] 1821 	add	a,#0x05
      00081E F8               [12] 1822 	mov	r0,a
      00081F E4               [12] 1823 	clr	a
      000820 F6               [12] 1824 	mov	@r0,a
      000821 08               [12] 1825 	inc	r0
      000822 F6               [12] 1826 	mov	@r0,a
      000823 08               [12] 1827 	inc	r0
      000824 F6               [12] 1828 	mov	@r0,a
      000825 08               [12] 1829 	inc	r0
      000826 76 80            [12] 1830 	mov	@r0,#0x80
      000828                       1831 00111$:
                                   1832 ;	calc.c:65: (void)putchar((d & mask) ? (int)'1' : (int)'0');
      000828 A8*00            [24] 1833 	mov	r0,_bp
      00082A 08               [12] 1834 	inc	r0
      00082B 86 04            [24] 1835 	mov	ar4,@r0
      00082D 08               [12] 1836 	inc	r0
      00082E 86 05            [24] 1837 	mov	ar5,@r0
      000830 08               [12] 1838 	inc	r0
      000831 86 06            [24] 1839 	mov	ar6,@r0
      000833 08               [12] 1840 	inc	r0
      000834 86 07            [24] 1841 	mov	ar7,@r0
      000836 E5*00            [12] 1842 	mov	a,_bp
      000838 24 05            [12] 1843 	add	a,#0x05
      00083A F8               [12] 1844 	mov	r0,a
      00083B E6               [12] 1845 	mov	a,@r0
      00083C 52 04            [12] 1846 	anl	ar4,a
      00083E 08               [12] 1847 	inc	r0
      00083F E6               [12] 1848 	mov	a,@r0
      000840 52 05            [12] 1849 	anl	ar5,a
      000842 08               [12] 1850 	inc	r0
      000843 E6               [12] 1851 	mov	a,@r0
      000844 52 06            [12] 1852 	anl	ar6,a
      000846 08               [12] 1853 	inc	r0
      000847 E6               [12] 1854 	mov	a,@r0
      000848 52 07            [12] 1855 	anl	ar7,a
      00084A EC               [12] 1856 	mov	a,r4
      00084B 4D               [12] 1857 	orl	a,r5
      00084C 4E               [12] 1858 	orl	a,r6
      00084D 4F               [12] 1859 	orl	a,r7
      00084E 60 06            [24] 1860 	jz	00118$
      000850 7E 31            [12] 1861 	mov	r6,#0x31
      000852 7F 00            [12] 1862 	mov	r7,#0x00
      000854 80 04            [24] 1863 	sjmp	00119$
      000856                       1864 00118$:
      000856 7E 30            [12] 1865 	mov	r6,#0x30
      000858 7F 00            [12] 1866 	mov	r7,#0x00
      00085A                       1867 00119$:
      00085A 8E 82            [24] 1868 	mov	dpl,r6
      00085C 8F 83            [24] 1869 	mov	dph,r7
      00085E 12r00r00         [24] 1870 	lcall	_putchar
                                   1871 ;	calc.c:64: for (mask = 0x80000000lu; mask; mask >>= 1)
      000861 E5*00            [12] 1872 	mov	a,_bp
      000863 24 05            [12] 1873 	add	a,#0x05
      000865 F8               [12] 1874 	mov	r0,a
      000866 08               [12] 1875 	inc	r0
      000867 08               [12] 1876 	inc	r0
      000868 08               [12] 1877 	inc	r0
      000869 E6               [12] 1878 	mov	a,@r0
      00086A C3               [12] 1879 	clr	c
      00086B 13               [12] 1880 	rrc	a
      00086C F6               [12] 1881 	mov	@r0,a
      00086D 18               [12] 1882 	dec	r0
      00086E E6               [12] 1883 	mov	a,@r0
      00086F 13               [12] 1884 	rrc	a
      000870 F6               [12] 1885 	mov	@r0,a
      000871 18               [12] 1886 	dec	r0
      000872 E6               [12] 1887 	mov	a,@r0
      000873 13               [12] 1888 	rrc	a
      000874 F6               [12] 1889 	mov	@r0,a
      000875 18               [12] 1890 	dec	r0
      000876 E6               [12] 1891 	mov	a,@r0
      000877 13               [12] 1892 	rrc	a
      000878 F6               [12] 1893 	mov	@r0,a
      000879 E5*00            [12] 1894 	mov	a,_bp
      00087B 24 05            [12] 1895 	add	a,#0x05
      00087D F8               [12] 1896 	mov	r0,a
      00087E E6               [12] 1897 	mov	a,@r0
      00087F 08               [12] 1898 	inc	r0
      000880 46               [12] 1899 	orl	a,@r0
      000881 08               [12] 1900 	inc	r0
      000882 46               [12] 1901 	orl	a,@r0
      000883 08               [12] 1902 	inc	r0
      000884 46               [12] 1903 	orl	a,@r0
      000885 70 A1            [24] 1904 	jnz	00111$
                                   1905 ;	calc.c:129: printstr("\r\n");
      000887 7Dr17            [12] 1906 	mov	r5,#___str_3
      000889 7Es00            [12] 1907 	mov	r6,#(___str_3 >> 8)
      00088B 7F 80            [12] 1908 	mov	r7,#0x80
                                   1909 ;	calc.c:58: return;
      00088D                       1910 00114$:
                                   1911 ;	calc.c:56: for (; *s; s++) putchar(*s);
      00088D 8D 82            [24] 1912 	mov	dpl,r5
      00088F 8E 83            [24] 1913 	mov	dph,r6
      000891 8F F0            [24] 1914 	mov	b,r7
      000893 12r00r00         [24] 1915 	lcall	__gptrget
      000896 FC               [12] 1916 	mov	r4,a
      000897 60 10            [24] 1917 	jz	00107$
      000899 7B 00            [12] 1918 	mov	r3,#0x00
      00089B 8C 82            [24] 1919 	mov	dpl,r4
      00089D 8B 83            [24] 1920 	mov	dph,r3
      00089F 12r00r00         [24] 1921 	lcall	_putchar
      0008A2 0D               [12] 1922 	inc	r5
                                   1923 ;	calc.c:129: printstr("\r\n");
      0008A3 BD 00 E7         [24] 1924 	cjne	r5,#0x00,00114$
      0008A6 0E               [12] 1925 	inc	r6
      0008A7 80 E4            [24] 1926 	sjmp	00114$
      0008A9                       1927 00107$:
                                   1928 ;	calc.c:131: return 1;
      0008A9 90 00 01         [24] 1929 	mov	dptr,#0x0001
                                   1930 ;	calc.c:132: }
      0008AC 85*00 81         [24] 1931 	mov	sp,_bp
      0008AF D0*00            [24] 1932 	pop	_bp
      0008B1 22               [24] 1933 	ret
                                   1934 ;------------------------------------------------------------
                                   1935 ;Allocation info for local variables in function 'operator'
                                   1936 ;------------------------------------------------------------
                                   1937 ;delta                     Allocated to stack - _bp -5
                                   1938 ;_ctx                      Allocated to stack - _bp +1
                                   1939 ;ctx                       Allocated to stack - _bp +18
                                   1940 ;t0                        Allocated to registers r7 r6 r5 
                                   1941 ;d0                        Allocated to stack - _bp +21
                                   1942 ;d1                        Allocated to stack - _bp +25
                                   1943 ;__1966080027              Allocated to registers 
                                   1944 ;s                         Allocated to registers r7 r6 r5 
                                   1945 ;__1966080029              Allocated to registers 
                                   1946 ;s                         Allocated to registers r7 r6 r5 
                                   1947 ;__2621440031              Allocated to registers 
                                   1948 ;s                         Allocated to registers r7 r6 r5 
                                   1949 ;__2621440033              Allocated to registers r7 r6 r5 r4 
                                   1950 ;d                         Allocated to stack - _bp +29
                                   1951 ;__1310720001              Allocated to registers 
                                   1952 ;d                         Allocated to registers r7 r6 r5 r2 
                                   1953 ;mask                      Allocated to stack - _bp +33
                                   1954 ;__2621440035              Allocated to registers 
                                   1955 ;s                         Allocated to registers r7 r6 r5 
                                   1956 ;__1966080037              Allocated to registers 
                                   1957 ;s                         Allocated to registers r7 r6 r5 
                                   1958 ;__1966080039              Allocated to registers 
                                   1959 ;s                         Allocated to registers r7 r6 r5 
                                   1960 ;__1966080041              Allocated to registers 
                                   1961 ;s                         Allocated to registers r7 r6 r5 
                                   1962 ;__1966080043              Allocated to registers 
                                   1963 ;s                         Allocated to registers r7 r6 r5 
                                   1964 ;__2621440045              Allocated to registers 
                                   1965 ;s                         Allocated to registers r7 r6 r5 
                                   1966 ;__2621440047              Allocated to registers r7 r6 r5 r4 
                                   1967 ;d                         Allocated to stack - _bp +29
                                   1968 ;__1310720001              Allocated to registers 
                                   1969 ;d                         Allocated to registers r7 r6 r5 r2 
                                   1970 ;mask                      Allocated to stack - _bp +33
                                   1971 ;__2621440049              Allocated to registers 
                                   1972 ;s                         Allocated to registers r7 r6 r5 
                                   1973 ;__1966080051              Allocated to registers 
                                   1974 ;s                         Allocated to registers r7 r6 r5 
                                   1975 ;__1966080053              Allocated to registers 
                                   1976 ;s                         Allocated to registers r7 r6 r5 
                                   1977 ;__2621440055              Allocated to registers 
                                   1978 ;s                         Allocated to registers r7 r6 r5 
                                   1979 ;__1966080057              Allocated to registers 
                                   1980 ;s                         Allocated to registers r7 r6 r5 
                                   1981 ;__3276800059              Allocated to registers 
                                   1982 ;s                         Allocated to registers r7 r6 r5 
                                   1983 ;__1966080061              Allocated to registers 
                                   1984 ;s                         Allocated to registers r7 r6 r5 
                                   1985 ;__3276800063              Allocated to registers 
                                   1986 ;s                         Allocated to registers r7 r6 r5 
                                   1987 ;__1966080065              Allocated to registers 
                                   1988 ;s                         Allocated to registers r7 r6 r5 
                                   1989 ;__1966080067              Allocated to registers 
                                   1990 ;s                         Allocated to registers r7 r6 r5 
                                   1991 ;__1966080069              Allocated to registers 
                                   1992 ;s                         Allocated to registers r7 r6 r5 
                                   1993 ;__1966080071              Allocated to registers 
                                   1994 ;s                         Allocated to registers r7 r6 r5 
                                   1995 ;__1966080073              Allocated to registers 
                                   1996 ;s                         Allocated to registers r7 r6 r5 
                                   1997 ;__3276800075              Allocated to registers 
                                   1998 ;s                         Allocated to registers r7 r6 r5 
                                   1999 ;__1966080077              Allocated to registers 
                                   2000 ;s                         Allocated to registers r7 r6 r5 
                                   2001 ;__2621440079              Allocated to registers 
                                   2002 ;s                         Allocated to registers r7 r6 r5 
                                   2003 ;__1966080081              Allocated to registers 
                                   2004 ;s                         Allocated to registers r7 r6 r5 
                                   2005 ;__2621440083              Allocated to registers 
                                   2006 ;s                         Allocated to registers r7 r6 r5 
                                   2007 ;__1966080085              Allocated to registers 
                                   2008 ;s                         Allocated to registers r7 r6 r5 
                                   2009 ;__2621440087              Allocated to registers 
                                   2010 ;s                         Allocated to registers r7 r6 r5 
                                   2011 ;__1966080089              Allocated to registers 
                                   2012 ;s                         Allocated to registers r7 r6 r5 
                                   2013 ;__2621440091              Allocated to registers 
                                   2014 ;s                         Allocated to registers r7 r6 r5 
                                   2015 ;__2621440093              Allocated to registers 
                                   2016 ;s                         Allocated to registers r7 r6 r5 
                                   2017 ;__1966080095              Allocated to registers 
                                   2018 ;s                         Allocated to registers r7 r6 r5 
                                   2019 ;__2621440097              Allocated to registers 
                                   2020 ;s                         Allocated to registers r7 r6 r5 
                                   2021 ;__2621440099              Allocated to registers 
                                   2022 ;s                         Allocated to registers r7 r6 r5 
                                   2023 ;__1966080101              Allocated to registers 
                                   2024 ;s                         Allocated to registers r5 r4 r3 
                                   2025 ;__2621440103              Allocated to registers 
                                   2026 ;s                         Allocated to registers r5 r4 r3 
                                   2027 ;__1966080105              Allocated to registers 
                                   2028 ;s                         Allocated to registers r5 r4 r3 
                                   2029 ;__2621440107              Allocated to registers 
                                   2030 ;s                         Allocated to registers r5 r4 r3 
                                   2031 ;__1966080109              Allocated to registers 
                                   2032 ;s                         Allocated to registers r5 r4 r3 
                                   2033 ;__2621440111              Allocated to registers 
                                   2034 ;s                         Allocated to registers r5 r4 r3 
                                   2035 ;__1966080113              Allocated to registers 
                                   2036 ;s                         Allocated to registers r5 r4 r3 
                                   2037 ;__2621440115              Allocated to registers 
                                   2038 ;s                         Allocated to registers r5 r4 r3 
                                   2039 ;__1966080117              Allocated to registers 
                                   2040 ;s                         Allocated to registers r5 r4 r3 
                                   2041 ;__2621440119              Allocated to registers 
                                   2042 ;s                         Allocated to registers r5 r4 r3 
                                   2043 ;__1966080121              Allocated to registers 
                                   2044 ;s                         Allocated to registers r5 r4 r3 
                                   2045 ;__2621440123              Allocated to registers 
                                   2046 ;s                         Allocated to registers r5 r4 r3 
                                   2047 ;__1966080125              Allocated to registers 
                                   2048 ;s                         Allocated to registers r5 r4 r3 
                                   2049 ;sloc0                     Allocated to stack - _bp +346
                                   2050 ;sloc1                     Allocated to stack - _bp +4
                                   2051 ;sloc2                     Allocated to stack - _bp +7
                                   2052 ;sloc3                     Allocated to stack - _bp +11
                                   2053 ;sloc4                     Allocated to stack - _bp +14
                                   2054 ;------------------------------------------------------------
                                   2055 ;	calc.c:134: static int operator(void *_ctx, delta_t *delta) __reentrant {
                                   2056 ;	-----------------------------------------
                                   2057 ;	 function operator
                                   2058 ;	-----------------------------------------
      0008B2                       2059 _operator:
      0008B2 C0*00            [24] 2060 	push	_bp
      0008B4 85 81*00         [24] 2061 	mov	_bp,sp
      0008B7 C0 82            [24] 2062 	push	dpl
      0008B9 C0 83            [24] 2063 	push	dph
      0008BB C0 F0            [24] 2064 	push	b
      0008BD E5 81            [12] 2065 	mov	a,sp
      0008BF 24 21            [12] 2066 	add	a,#0x21
      0008C1 F5 81            [12] 2067 	mov	sp,a
                                   2068 ;	calc.c:135: calc_ctx_t *ctx = (calc_ctx_t *)_ctx;
      0008C3 A8*00            [24] 2069 	mov	r0,_bp
      0008C5 08               [12] 2070 	inc	r0
      0008C6 E5*00            [12] 2071 	mov	a,_bp
      0008C8 24 12            [12] 2072 	add	a,#0x12
      0008CA F9               [12] 2073 	mov	r1,a
      0008CB E6               [12] 2074 	mov	a,@r0
      0008CC F7               [12] 2075 	mov	@r1,a
      0008CD 08               [12] 2076 	inc	r0
      0008CE 09               [12] 2077 	inc	r1
      0008CF E6               [12] 2078 	mov	a,@r0
      0008D0 F7               [12] 2079 	mov	@r1,a
      0008D1 08               [12] 2080 	inc	r0
      0008D2 09               [12] 2081 	inc	r1
      0008D3 E6               [12] 2082 	mov	a,@r0
      0008D4 F7               [12] 2083 	mov	@r1,a
                                   2084 ;	calc.c:139: switch (ctx->digit[0]) {
      0008D5 E5*00            [12] 2085 	mov	a,_bp
      0008D7 24 12            [12] 2086 	add	a,#0x12
      0008D9 F8               [12] 2087 	mov	r0,a
      0008DA 74 07            [12] 2088 	mov	a,#0x07
      0008DC 26               [12] 2089 	add	a,@r0
      0008DD FD               [12] 2090 	mov	r5,a
      0008DE E4               [12] 2091 	clr	a
      0008DF 08               [12] 2092 	inc	r0
      0008E0 36               [12] 2093 	addc	a,@r0
      0008E1 FE               [12] 2094 	mov	r6,a
      0008E2 08               [12] 2095 	inc	r0
      0008E3 86 07            [24] 2096 	mov	ar7,@r0
      0008E5 8D 82            [24] 2097 	mov	dpl,r5
      0008E7 8E 83            [24] 2098 	mov	dph,r6
      0008E9 8F F0            [24] 2099 	mov	b,r7
      0008EB 12r00r00         [24] 2100 	lcall	__gptrget
      0008EE FC               [12] 2101 	mov	r4,a
      0008EF BC 23 03         [24] 2102 	cjne	r4,#0x23,01234$
      0008F2 02r1Er21         [24] 2103 	ljmp	00189$
      0008F5                       2104 01234$:
      0008F5 BC 25 03         [24] 2105 	cjne	r4,#0x25,01235$
      0008F8 02r1Er21         [24] 2106 	ljmp	00189$
      0008FB                       2107 01235$:
      0008FB BC 26 03         [24] 2108 	cjne	r4,#0x26,01236$
      0008FE 02r21r07         [24] 2109 	ljmp	00202$
      000901                       2110 01236$:
      000901 BC 2A 03         [24] 2111 	cjne	r4,#0x2a,01237$
      000904 02r19r91         [24] 2112 	ljmp	00167$
      000907                       2113 01237$:
      000907 BC 2B 03         [24] 2114 	cjne	r4,#0x2b,01238$
      00090A 02r16r92         [24] 2115 	ljmp	00153$
      00090D                       2116 01238$:
      00090D BC 2D 03         [24] 2117 	cjne	r4,#0x2d,01239$
      000910 02r18r11         [24] 2118 	ljmp	00160$
      000913                       2119 01239$:
      000913 BC 2E 03         [24] 2120 	cjne	r4,#0x2e,01240$
      000916 02r0Cr24         [24] 2121 	ljmp	00109$
      000919                       2122 01240$:
      000919 BC 2F 03         [24] 2123 	cjne	r4,#0x2f,01241$
      00091C 02r1Br37         [24] 2124 	ljmp	00175$
      00091F                       2125 01241$:
      00091F BC 3C 03         [24] 2126 	cjne	r4,#0x3c,01242$
      000922 02r29r22         [24] 2127 	ljmp	00237$
      000925                       2128 01242$:
      000925 BC 3E 03         [24] 2129 	cjne	r4,#0x3e,01243$
      000928 02r25rD5         [24] 2130 	ljmp	00223$
      00092B                       2131 01243$:
      00092B BC 4D 03         [24] 2132 	cjne	r4,#0x4d,01244$
      00092E 02r11r38         [24] 2133 	ljmp	00127$
      000931                       2134 01244$:
      000931 BC 50 03         [24] 2135 	cjne	r4,#0x50,01245$
      000934 02r0Er1A         [24] 2136 	ljmp	00113$
      000937                       2137 01245$:
      000937 BC 54 03         [24] 2138 	cjne	r4,#0x54,01246$
      00093A 02r14r3A         [24] 2139 	ljmp	00145$
      00093D                       2140 01246$:
      00093D BC 55 03         [24] 2141 	cjne	r4,#0x55,01247$
      000940 02r13r53         [24] 2142 	ljmp	00139$
      000943                       2143 01247$:
      000943 BC 56 03         [24] 2144 	cjne	r4,#0x56,01248$
      000946 02r0Br83         [24] 2145 	ljmp	00105$
      000949                       2146 01248$:
      000949 BC 58 03         [24] 2147 	cjne	r4,#0x58,01249$
      00094C 02r15rF3         [24] 2148 	ljmp	00152$
      00094F                       2149 01249$:
      00094F BC 5C 03         [24] 2150 	cjne	r4,#0x5c,01250$
      000952 02r1Br37         [24] 2151 	ljmp	00175$
      000955                       2152 01250$:
      000955 BC 5D 03         [24] 2153 	cjne	r4,#0x5d,01251$
      000958 02r27r73         [24] 2154 	ljmp	00230$
      00095B                       2155 01251$:
      00095B BC 5E 03         [24] 2156 	cjne	r4,#0x5e,01252$
      00095E 02r24r3B         [24] 2157 	ljmp	00216$
      000961                       2158 01252$:
      000961 BC 6D 03         [24] 2159 	cjne	r4,#0x6d,01253$
      000964 02r10r04         [24] 2160 	ljmp	00121$
      000967                       2161 01253$:
      000967 BC 70 03         [24] 2162 	cjne	r4,#0x70,01254$
      00096A 02r0Cr24         [24] 2163 	ljmp	00109$
      00096D                       2164 01254$:
      00096D BC 75 03         [24] 2165 	cjne	r4,#0x75,01255$
      000970 02r12r6C         [24] 2166 	ljmp	00133$
      000973                       2167 01255$:
      000973 BC 76 02         [24] 2168 	cjne	r4,#0x76,01256$
      000976 80 15            [24] 2169 	sjmp	00101$
      000978                       2170 01256$:
      000978 BC 78 03         [24] 2171 	cjne	r4,#0x78,01257$
      00097B 02r0Er63         [24] 2172 	ljmp	00114$
      00097E                       2173 01257$:
      00097E BC 7C 03         [24] 2174 	cjne	r4,#0x7c,01258$
      000981 02r22rA1         [24] 2175 	ljmp	00209$
      000984                       2176 01258$:
      000984 BC 7E 03         [24] 2177 	cjne	r4,#0x7e,01259$
      000987 02r2ArC5         [24] 2178 	ljmp	00244$
      00098A                       2179 01259$:
      00098A 02r2Br9E         [24] 2180 	ljmp	00248$
                                   2181 ;	calc.c:140: case 'v':
      00098D                       2182 00101$:
                                   2183 ;	calc.c:141: printstr("\r\n");
      00098D 7Fr17            [12] 2184 	mov	r7,#___str_3
      00098F 7Es00            [12] 2185 	mov	r6,#(___str_3 >> 8)
      000991 7D 80            [12] 2186 	mov	r5,#0x80
                                   2187 ;	calc.c:58: return;
      000993                       2188 00353$:
                                   2189 ;	calc.c:56: for (; *s; s++) putchar(*s);
      000993 8F 82            [24] 2190 	mov	dpl,r7
      000995 8E 83            [24] 2191 	mov	dph,r6
      000997 8D F0            [24] 2192 	mov	b,r5
      000999 12r00r00         [24] 2193 	lcall	__gptrget
      00099C FC               [12] 2194 	mov	r4,a
      00099D 60 10            [24] 2195 	jz	00251$
      00099F 7B 00            [12] 2196 	mov	r3,#0x00
      0009A1 8C 82            [24] 2197 	mov	dpl,r4
      0009A3 8B 83            [24] 2198 	mov	dph,r3
      0009A5 12r00r00         [24] 2199 	lcall	_putchar
      0009A8 0F               [12] 2200 	inc	r7
                                   2201 ;	calc.c:141: printstr("\r\n");
      0009A9 BF 00 E7         [24] 2202 	cjne	r7,#0x00,00353$
      0009AC 0E               [12] 2203 	inc	r6
      0009AD 80 E4            [24] 2204 	sjmp	00353$
      0009AF                       2205 00251$:
                                   2206 ;	calc.c:142: if (!stack_peek(ctx->ps, &d0)) printstr("stack underflow\r\n");
      0009AF E5*00            [12] 2207 	mov	a,_bp
      0009B1 24 15            [12] 2208 	add	a,#0x15
      0009B3 FF               [12] 2209 	mov	r7,a
      0009B4 7E 00            [12] 2210 	mov	r6,#0x00
      0009B6 7D 40            [12] 2211 	mov	r5,#0x40
      0009B8 E5*00            [12] 2212 	mov	a,_bp
      0009BA 24 12            [12] 2213 	add	a,#0x12
      0009BC F8               [12] 2214 	mov	r0,a
      0009BD 74 11            [12] 2215 	mov	a,#0x11
      0009BF 26               [12] 2216 	add	a,@r0
      0009C0 FA               [12] 2217 	mov	r2,a
      0009C1 ED               [12] 2218 	mov	a,r5
      0009C2 08               [12] 2219 	inc	r0
      0009C3 36               [12] 2220 	addc	a,@r0
      0009C4 FB               [12] 2221 	mov	r3,a
      0009C5 08               [12] 2222 	inc	r0
      0009C6 86 04            [24] 2223 	mov	ar4,@r0
      0009C8 8A 82            [24] 2224 	mov	dpl,r2
      0009CA 8B 83            [24] 2225 	mov	dph,r3
      0009CC 8C F0            [24] 2226 	mov	b,r4
      0009CE 12r00r00         [24] 2227 	lcall	__gptrget
      0009D1 FA               [12] 2228 	mov	r2,a
      0009D2 A3               [24] 2229 	inc	dptr
      0009D3 12r00r00         [24] 2230 	lcall	__gptrget
      0009D6 FB               [12] 2231 	mov	r3,a
      0009D7 A3               [24] 2232 	inc	dptr
      0009D8 12r00r00         [24] 2233 	lcall	__gptrget
      0009DB FC               [12] 2234 	mov	r4,a
      0009DC C0 07            [24] 2235 	push	ar7
      0009DE C0 06            [24] 2236 	push	ar6
      0009E0 C0 05            [24] 2237 	push	ar5
      0009E2 8A 82            [24] 2238 	mov	dpl,r2
      0009E4 8B 83            [24] 2239 	mov	dph,r3
      0009E6 8C F0            [24] 2240 	mov	b,r4
      0009E8 12r00r00         [24] 2241 	lcall	_stack_peek
      0009EB AB 82            [24] 2242 	mov	r3,dpl
      0009ED AC 83            [24] 2243 	mov	r4,dph
      0009EF 15 81            [12] 2244 	dec	sp
      0009F1 15 81            [12] 2245 	dec	sp
      0009F3 15 81            [12] 2246 	dec	sp
      0009F5 EB               [12] 2247 	mov	a,r3
      0009F6 4C               [12] 2248 	orl	a,r4
      0009F7 70 25            [24] 2249 	jnz	00103$
      0009F9 7Fr1A            [12] 2250 	mov	r7,#___str_4
      0009FB 7Es00            [12] 2251 	mov	r6,#(___str_4 >> 8)
      0009FD 7D 80            [12] 2252 	mov	r5,#0x80
                                   2253 ;	calc.c:58: return;
      0009FF                       2254 00356$:
                                   2255 ;	calc.c:56: for (; *s; s++) putchar(*s);
      0009FF 8F 82            [24] 2256 	mov	dpl,r7
      000A01 8E 83            [24] 2257 	mov	dph,r6
      000A03 8D F0            [24] 2258 	mov	b,r5
      000A05 12r00r00         [24] 2259 	lcall	__gptrget
      000A08 FC               [12] 2260 	mov	r4,a
      000A09 70 03            [24] 2261 	jnz	01263$
      000A0B 02r2BrA3         [24] 2262 	ljmp	00249$
      000A0E                       2263 01263$:
      000A0E 7B 00            [12] 2264 	mov	r3,#0x00
      000A10 8C 82            [24] 2265 	mov	dpl,r4
      000A12 8B 83            [24] 2266 	mov	dph,r3
      000A14 12r00r00         [24] 2267 	lcall	_putchar
      000A17 0F               [12] 2268 	inc	r7
                                   2269 ;	calc.c:142: if (!stack_peek(ctx->ps, &d0)) printstr("stack underflow\r\n");
      000A18 BF 00 E4         [24] 2270 	cjne	r7,#0x00,00356$
      000A1B 0E               [12] 2271 	inc	r6
      000A1C 80 E1            [24] 2272 	sjmp	00356$
      000A1E                       2273 00103$:
                                   2274 ;	calc.c:144: printstr("PSVTOP\t");
      000A1E 7Fr3E            [12] 2275 	mov	r7,#___str_8
      000A20 7Es00            [12] 2276 	mov	r6,#(___str_8 >> 8)
      000A22 7D 80            [12] 2277 	mov	r5,#0x80
                                   2278 ;	calc.c:58: return;
      000A24                       2279 00359$:
                                   2280 ;	calc.c:56: for (; *s; s++) putchar(*s);
      000A24 8F 82            [24] 2281 	mov	dpl,r7
      000A26 8E 83            [24] 2282 	mov	dph,r6
      000A28 8D F0            [24] 2283 	mov	b,r5
      000A2A 12r00r00         [24] 2284 	lcall	__gptrget
      000A2D FC               [12] 2285 	mov	r4,a
      000A2E 60 10            [24] 2286 	jz	00255$
      000A30 7B 00            [12] 2287 	mov	r3,#0x00
      000A32 8C 82            [24] 2288 	mov	dpl,r4
      000A34 8B 83            [24] 2289 	mov	dph,r3
      000A36 12r00r00         [24] 2290 	lcall	_putchar
      000A39 0F               [12] 2291 	inc	r7
                                   2292 ;	calc.c:144: printstr("PSVTOP\t");
      000A3A BF 00 E7         [24] 2293 	cjne	r7,#0x00,00359$
      000A3D 0E               [12] 2294 	inc	r6
      000A3E 80 E4            [24] 2295 	sjmp	00359$
      000A40                       2296 00255$:
                                   2297 ;	calc.c:145: printall(d0);
      000A40 E5*00            [12] 2298 	mov	a,_bp
      000A42 24 15            [12] 2299 	add	a,#0x15
      000A44 F8               [12] 2300 	mov	r0,a
      000A45 86 07            [24] 2301 	mov	ar7,@r0
      000A47 08               [12] 2302 	inc	r0
      000A48 86 06            [24] 2303 	mov	ar6,@r0
      000A4A 08               [12] 2304 	inc	r0
      000A4B 86 05            [24] 2305 	mov	ar5,@r0
      000A4D 08               [12] 2306 	inc	r0
      000A4E 86 04            [24] 2307 	mov	ar4,@r0
      000A50 E5*00            [12] 2308 	mov	a,_bp
      000A52 24 1D            [12] 2309 	add	a,#0x1d
      000A54 F8               [12] 2310 	mov	r0,a
      000A55 A6 07            [24] 2311 	mov	@r0,ar7
      000A57 08               [12] 2312 	inc	r0
      000A58 A6 06            [24] 2313 	mov	@r0,ar6
      000A5A 08               [12] 2314 	inc	r0
      000A5B A6 05            [24] 2315 	mov	@r0,ar5
      000A5D 08               [12] 2316 	inc	r0
      000A5E A6 04            [24] 2317 	mov	@r0,ar4
                                   2318 ;	calc.c:71: printf("%08lx\t", d);
      000A60 C0 07            [24] 2319 	push	ar7
      000A62 C0 06            [24] 2320 	push	ar6
      000A64 C0 05            [24] 2321 	push	ar5
      000A66 C0 04            [24] 2322 	push	ar4
      000A68 74r00            [12] 2323 	mov	a,#___str_0
      000A6A C0 E0            [24] 2324 	push	acc
      000A6C 74s00            [12] 2325 	mov	a,#(___str_0 >> 8)
      000A6E C0 E0            [24] 2326 	push	acc
      000A70 74 80            [12] 2327 	mov	a,#0x80
      000A72 C0 E0            [24] 2328 	push	acc
      000A74 12r00r00         [24] 2329 	lcall	_printf
      000A77 E5 81            [12] 2330 	mov	a,sp
      000A79 24 F9            [12] 2331 	add	a,#0xf9
      000A7B F5 81            [12] 2332 	mov	sp,a
                                   2333 ;	calc.c:72: printf("% 11ld\t", d);
      000A7D E5*00            [12] 2334 	mov	a,_bp
      000A7F 24 1D            [12] 2335 	add	a,#0x1d
      000A81 F8               [12] 2336 	mov	r0,a
      000A82 E6               [12] 2337 	mov	a,@r0
      000A83 C0 E0            [24] 2338 	push	acc
      000A85 08               [12] 2339 	inc	r0
      000A86 E6               [12] 2340 	mov	a,@r0
      000A87 C0 E0            [24] 2341 	push	acc
      000A89 08               [12] 2342 	inc	r0
      000A8A E6               [12] 2343 	mov	a,@r0
      000A8B C0 E0            [24] 2344 	push	acc
      000A8D 08               [12] 2345 	inc	r0
      000A8E E6               [12] 2346 	mov	a,@r0
      000A8F C0 E0            [24] 2347 	push	acc
      000A91 74r07            [12] 2348 	mov	a,#___str_1
      000A93 C0 E0            [24] 2349 	push	acc
      000A95 74s00            [12] 2350 	mov	a,#(___str_1 >> 8)
      000A97 C0 E0            [24] 2351 	push	acc
      000A99 74 80            [12] 2352 	mov	a,#0x80
      000A9B C0 E0            [24] 2353 	push	acc
      000A9D 12r00r00         [24] 2354 	lcall	_printf
      000AA0 E5 81            [12] 2355 	mov	a,sp
      000AA2 24 F9            [12] 2356 	add	a,#0xf9
      000AA4 F5 81            [12] 2357 	mov	sp,a
                                   2358 ;	calc.c:73: printf("%011lo\t", d);
      000AA6 E5*00            [12] 2359 	mov	a,_bp
      000AA8 24 1D            [12] 2360 	add	a,#0x1d
      000AAA F8               [12] 2361 	mov	r0,a
      000AAB E6               [12] 2362 	mov	a,@r0
      000AAC C0 E0            [24] 2363 	push	acc
      000AAE 08               [12] 2364 	inc	r0
      000AAF E6               [12] 2365 	mov	a,@r0
      000AB0 C0 E0            [24] 2366 	push	acc
      000AB2 08               [12] 2367 	inc	r0
      000AB3 E6               [12] 2368 	mov	a,@r0
      000AB4 C0 E0            [24] 2369 	push	acc
      000AB6 08               [12] 2370 	inc	r0
      000AB7 E6               [12] 2371 	mov	a,@r0
      000AB8 C0 E0            [24] 2372 	push	acc
      000ABA 74r0F            [12] 2373 	mov	a,#___str_2
      000ABC C0 E0            [24] 2374 	push	acc
      000ABE 74s00            [12] 2375 	mov	a,#(___str_2 >> 8)
      000AC0 C0 E0            [24] 2376 	push	acc
      000AC2 74 80            [12] 2377 	mov	a,#0x80
      000AC4 C0 E0            [24] 2378 	push	acc
      000AC6 12r00r00         [24] 2379 	lcall	_printf
      000AC9 E5 81            [12] 2380 	mov	a,sp
      000ACB 24 F9            [12] 2381 	add	a,#0xf9
      000ACD F5 81            [12] 2382 	mov	sp,a
                                   2383 ;	calc.c:74: printbin(d);
      000ACF E5*00            [12] 2384 	mov	a,_bp
      000AD1 24 1D            [12] 2385 	add	a,#0x1d
      000AD3 F8               [12] 2386 	mov	r0,a
      000AD4 86 07            [24] 2387 	mov	ar7,@r0
      000AD6 08               [12] 2388 	inc	r0
      000AD7 86 06            [24] 2389 	mov	ar6,@r0
      000AD9 08               [12] 2390 	inc	r0
      000ADA 86 05            [24] 2391 	mov	ar5,@r0
      000ADC 08               [12] 2392 	inc	r0
      000ADD 86 02            [24] 2393 	mov	ar2,@r0
                                   2394 ;	calc.c:64: for (mask = 0x80000000lu; mask; mask >>= 1)
      000ADF E5*00            [12] 2395 	mov	a,_bp
      000AE1 24 21            [12] 2396 	add	a,#0x21
      000AE3 F8               [12] 2397 	mov	r0,a
      000AE4 E4               [12] 2398 	clr	a
      000AE5 F6               [12] 2399 	mov	@r0,a
      000AE6 08               [12] 2400 	inc	r0
      000AE7 F6               [12] 2401 	mov	@r0,a
      000AE8 08               [12] 2402 	inc	r0
      000AE9 F6               [12] 2403 	mov	@r0,a
      000AEA 08               [12] 2404 	inc	r0
      000AEB 76 80            [12] 2405 	mov	@r0,#0x80
      000AED                       2406 00361$:
                                   2407 ;	calc.c:65: (void)putchar((d & mask) ? (int)'1' : (int)'0');
      000AED E5*00            [12] 2408 	mov	a,_bp
      000AEF 24 07            [12] 2409 	add	a,#0x07
      000AF1 F8               [12] 2410 	mov	r0,a
      000AF2 A6 07            [24] 2411 	mov	@r0,ar7
      000AF4 08               [12] 2412 	inc	r0
      000AF5 A6 06            [24] 2413 	mov	@r0,ar6
      000AF7 08               [12] 2414 	inc	r0
      000AF8 A6 05            [24] 2415 	mov	@r0,ar5
      000AFA 08               [12] 2416 	inc	r0
      000AFB A6 02            [24] 2417 	mov	@r0,ar2
      000AFD E5*00            [12] 2418 	mov	a,_bp
      000AFF 24 07            [12] 2419 	add	a,#0x07
      000B01 F8               [12] 2420 	mov	r0,a
      000B02 E5*00            [12] 2421 	mov	a,_bp
      000B04 24 21            [12] 2422 	add	a,#0x21
      000B06 F9               [12] 2423 	mov	r1,a
      000B07 E7               [12] 2424 	mov	a,@r1
      000B08 56               [12] 2425 	anl	a,@r0
      000B09 F6               [12] 2426 	mov	@r0,a
      000B0A 09               [12] 2427 	inc	r1
      000B0B E7               [12] 2428 	mov	a,@r1
      000B0C 08               [12] 2429 	inc	r0
      000B0D 56               [12] 2430 	anl	a,@r0
      000B0E F6               [12] 2431 	mov	@r0,a
      000B0F 09               [12] 2432 	inc	r1
      000B10 E7               [12] 2433 	mov	a,@r1
      000B11 08               [12] 2434 	inc	r0
      000B12 56               [12] 2435 	anl	a,@r0
      000B13 F6               [12] 2436 	mov	@r0,a
      000B14 09               [12] 2437 	inc	r1
      000B15 E7               [12] 2438 	mov	a,@r1
      000B16 08               [12] 2439 	inc	r0
      000B17 56               [12] 2440 	anl	a,@r0
      000B18 F6               [12] 2441 	mov	@r0,a
      000B19 E5*00            [12] 2442 	mov	a,_bp
      000B1B 24 07            [12] 2443 	add	a,#0x07
      000B1D F8               [12] 2444 	mov	r0,a
      000B1E E6               [12] 2445 	mov	a,@r0
      000B1F 08               [12] 2446 	inc	r0
      000B20 46               [12] 2447 	orl	a,@r0
      000B21 08               [12] 2448 	inc	r0
      000B22 46               [12] 2449 	orl	a,@r0
      000B23 08               [12] 2450 	inc	r0
      000B24 46               [12] 2451 	orl	a,@r0
      000B25 60 06            [24] 2452 	jz	00502$
      000B27 7B 31            [12] 2453 	mov	r3,#0x31
      000B29 7C 00            [12] 2454 	mov	r4,#0x00
      000B2B 80 04            [24] 2455 	sjmp	00503$
      000B2D                       2456 00502$:
      000B2D 7B 30            [12] 2457 	mov	r3,#0x30
      000B2F 7C 00            [12] 2458 	mov	r4,#0x00
      000B31                       2459 00503$:
      000B31 8B 82            [24] 2460 	mov	dpl,r3
      000B33 8C 83            [24] 2461 	mov	dph,r4
      000B35 12r00r00         [24] 2462 	lcall	_putchar
                                   2463 ;	calc.c:64: for (mask = 0x80000000lu; mask; mask >>= 1)
      000B38 E5*00            [12] 2464 	mov	a,_bp
      000B3A 24 21            [12] 2465 	add	a,#0x21
      000B3C F8               [12] 2466 	mov	r0,a
      000B3D 08               [12] 2467 	inc	r0
      000B3E 08               [12] 2468 	inc	r0
      000B3F 08               [12] 2469 	inc	r0
      000B40 E6               [12] 2470 	mov	a,@r0
      000B41 C3               [12] 2471 	clr	c
      000B42 13               [12] 2472 	rrc	a
      000B43 F6               [12] 2473 	mov	@r0,a
      000B44 18               [12] 2474 	dec	r0
      000B45 E6               [12] 2475 	mov	a,@r0
      000B46 13               [12] 2476 	rrc	a
      000B47 F6               [12] 2477 	mov	@r0,a
      000B48 18               [12] 2478 	dec	r0
      000B49 E6               [12] 2479 	mov	a,@r0
      000B4A 13               [12] 2480 	rrc	a
      000B4B F6               [12] 2481 	mov	@r0,a
      000B4C 18               [12] 2482 	dec	r0
      000B4D E6               [12] 2483 	mov	a,@r0
      000B4E 13               [12] 2484 	rrc	a
      000B4F F6               [12] 2485 	mov	@r0,a
      000B50 E5*00            [12] 2486 	mov	a,_bp
      000B52 24 21            [12] 2487 	add	a,#0x21
      000B54 F8               [12] 2488 	mov	r0,a
      000B55 E6               [12] 2489 	mov	a,@r0
      000B56 08               [12] 2490 	inc	r0
      000B57 46               [12] 2491 	orl	a,@r0
      000B58 08               [12] 2492 	inc	r0
      000B59 46               [12] 2493 	orl	a,@r0
      000B5A 08               [12] 2494 	inc	r0
      000B5B 46               [12] 2495 	orl	a,@r0
      000B5C 70 8F            [24] 2496 	jnz	00361$
                                   2497 ;	calc.c:146: printstr("\r\n");
      000B5E 7Fr17            [12] 2498 	mov	r7,#___str_3
      000B60 7Es00            [12] 2499 	mov	r6,#(___str_3 >> 8)
      000B62 7D 80            [12] 2500 	mov	r5,#0x80
                                   2501 ;	calc.c:58: return;
      000B64                       2502 00364$:
                                   2503 ;	calc.c:56: for (; *s; s++) putchar(*s);
      000B64 8F 82            [24] 2504 	mov	dpl,r7
      000B66 8E 83            [24] 2505 	mov	dph,r6
      000B68 8D F0            [24] 2506 	mov	b,r5
      000B6A 12r00r00         [24] 2507 	lcall	__gptrget
      000B6D FC               [12] 2508 	mov	r4,a
      000B6E 70 03            [24] 2509 	jnz	01269$
      000B70 02r2BrA3         [24] 2510 	ljmp	00249$
      000B73                       2511 01269$:
      000B73 7B 00            [12] 2512 	mov	r3,#0x00
      000B75 8C 82            [24] 2513 	mov	dpl,r4
      000B77 8B 83            [24] 2514 	mov	dph,r3
      000B79 12r00r00         [24] 2515 	lcall	_putchar
      000B7C 0F               [12] 2516 	inc	r7
                                   2517 ;	calc.c:149: case 'V':
      000B7D BF 00 E4         [24] 2518 	cjne	r7,#0x00,00364$
      000B80 0E               [12] 2519 	inc	r6
      000B81 80 E1            [24] 2520 	sjmp	00364$
      000B83                       2521 00105$:
                                   2522 ;	calc.c:150: printstr("\r\n");
      000B83 7Fr17            [12] 2523 	mov	r7,#___str_3
      000B85 7Es00            [12] 2524 	mov	r6,#(___str_3 >> 8)
      000B87 7D 80            [12] 2525 	mov	r5,#0x80
                                   2526 ;	calc.c:58: return;
      000B89                       2527 00367$:
                                   2528 ;	calc.c:56: for (; *s; s++) putchar(*s);
      000B89 8F 82            [24] 2529 	mov	dpl,r7
      000B8B 8E 83            [24] 2530 	mov	dph,r6
      000B8D 8D F0            [24] 2531 	mov	b,r5
      000B8F 12r00r00         [24] 2532 	lcall	__gptrget
      000B92 FC               [12] 2533 	mov	r4,a
      000B93 60 10            [24] 2534 	jz	00262$
      000B95 7B 00            [12] 2535 	mov	r3,#0x00
      000B97 8C 82            [24] 2536 	mov	dpl,r4
      000B99 8B 83            [24] 2537 	mov	dph,r3
      000B9B 12r00r00         [24] 2538 	lcall	_putchar
      000B9E 0F               [12] 2539 	inc	r7
                                   2540 ;	calc.c:150: printstr("\r\n");
      000B9F BF 00 E7         [24] 2541 	cjne	r7,#0x00,00367$
      000BA2 0E               [12] 2542 	inc	r6
      000BA3 80 E4            [24] 2543 	sjmp	00367$
      000BA5                       2544 00262$:
                                   2545 ;	calc.c:151: if (!stack_iter_peek(ctx->ps, dump_peek, ctx)) printstr("stack underflow\r\n");
      000BA5 E5*00            [12] 2546 	mov	a,_bp
      000BA7 24 12            [12] 2547 	add	a,#0x12
      000BA9 F8               [12] 2548 	mov	r0,a
      000BAA 86 07            [24] 2549 	mov	ar7,@r0
      000BAC 08               [12] 2550 	inc	r0
      000BAD 86 06            [24] 2551 	mov	ar6,@r0
      000BAF 08               [12] 2552 	inc	r0
      000BB0 86 05            [24] 2553 	mov	ar5,@r0
      000BB2 E5*00            [12] 2554 	mov	a,_bp
      000BB4 24 12            [12] 2555 	add	a,#0x12
      000BB6 F8               [12] 2556 	mov	r0,a
      000BB7 74 11            [12] 2557 	mov	a,#0x11
      000BB9 26               [12] 2558 	add	a,@r0
      000BBA FA               [12] 2559 	mov	r2,a
      000BBB 74 40            [12] 2560 	mov	a,#0x40
      000BBD 08               [12] 2561 	inc	r0
      000BBE 36               [12] 2562 	addc	a,@r0
      000BBF FB               [12] 2563 	mov	r3,a
      000BC0 08               [12] 2564 	inc	r0
      000BC1 86 04            [24] 2565 	mov	ar4,@r0
      000BC3 8A 82            [24] 2566 	mov	dpl,r2
      000BC5 8B 83            [24] 2567 	mov	dph,r3
      000BC7 8C F0            [24] 2568 	mov	b,r4
      000BC9 12r00r00         [24] 2569 	lcall	__gptrget
      000BCC FA               [12] 2570 	mov	r2,a
      000BCD A3               [24] 2571 	inc	dptr
      000BCE 12r00r00         [24] 2572 	lcall	__gptrget
      000BD1 FB               [12] 2573 	mov	r3,a
      000BD2 A3               [24] 2574 	inc	dptr
      000BD3 12r00r00         [24] 2575 	lcall	__gptrget
      000BD6 FC               [12] 2576 	mov	r4,a
      000BD7 C0 07            [24] 2577 	push	ar7
      000BD9 C0 06            [24] 2578 	push	ar6
      000BDB C0 05            [24] 2579 	push	ar5
      000BDD 74r49            [12] 2580 	mov	a,#_dump_peek
      000BDF C0 E0            [24] 2581 	push	acc
      000BE1 74s07            [12] 2582 	mov	a,#(_dump_peek >> 8)
      000BE3 C0 E0            [24] 2583 	push	acc
      000BE5 8A 82            [24] 2584 	mov	dpl,r2
      000BE7 8B 83            [24] 2585 	mov	dph,r3
      000BE9 8C F0            [24] 2586 	mov	b,r4
      000BEB 12r00r00         [24] 2587 	lcall	_stack_iter_peek
      000BEE AB 82            [24] 2588 	mov	r3,dpl
      000BF0 AC 83            [24] 2589 	mov	r4,dph
      000BF2 E5 81            [12] 2590 	mov	a,sp
      000BF4 24 FB            [12] 2591 	add	a,#0xfb
      000BF6 F5 81            [12] 2592 	mov	sp,a
      000BF8 EB               [12] 2593 	mov	a,r3
      000BF9 4C               [12] 2594 	orl	a,r4
      000BFA 60 03            [24] 2595 	jz	01273$
      000BFC 02r2BrA3         [24] 2596 	ljmp	00249$
      000BFF                       2597 01273$:
      000BFF 7Fr1A            [12] 2598 	mov	r7,#___str_4
      000C01 7Es00            [12] 2599 	mov	r6,#(___str_4 >> 8)
      000C03 7D 80            [12] 2600 	mov	r5,#0x80
                                   2601 ;	calc.c:58: return;
      000C05                       2602 00370$:
                                   2603 ;	calc.c:56: for (; *s; s++) putchar(*s);
      000C05 8F 82            [24] 2604 	mov	dpl,r7
      000C07 8E 83            [24] 2605 	mov	dph,r6
      000C09 8D F0            [24] 2606 	mov	b,r5
      000C0B 12r00r00         [24] 2607 	lcall	__gptrget
      000C0E FC               [12] 2608 	mov	r4,a
      000C0F 70 03            [24] 2609 	jnz	01274$
      000C11 02r2BrA3         [24] 2610 	ljmp	00249$
      000C14                       2611 01274$:
      000C14 7B 00            [12] 2612 	mov	r3,#0x00
      000C16 8C 82            [24] 2613 	mov	dpl,r4
      000C18 8B 83            [24] 2614 	mov	dph,r3
      000C1A 12r00r00         [24] 2615 	lcall	_putchar
      000C1D 0F               [12] 2616 	inc	r7
                                   2617 ;	calc.c:154: case 'p':
      000C1E BF 00 E4         [24] 2618 	cjne	r7,#0x00,00370$
      000C21 0E               [12] 2619 	inc	r6
      000C22 80 E1            [24] 2620 	sjmp	00370$
      000C24                       2621 00109$:
                                   2622 ;	calc.c:155: printstr("\r\n");
      000C24 7Fr17            [12] 2623 	mov	r7,#___str_3
      000C26 7Es00            [12] 2624 	mov	r6,#(___str_3 >> 8)
      000C28 7D 80            [12] 2625 	mov	r5,#0x80
                                   2626 ;	calc.c:58: return;
      000C2A                       2627 00373$:
                                   2628 ;	calc.c:56: for (; *s; s++) putchar(*s);
      000C2A 8F 82            [24] 2629 	mov	dpl,r7
      000C2C 8E 83            [24] 2630 	mov	dph,r6
      000C2E 8D F0            [24] 2631 	mov	b,r5
      000C30 12r00r00         [24] 2632 	lcall	__gptrget
      000C33 FC               [12] 2633 	mov	r4,a
      000C34 60 10            [24] 2634 	jz	00266$
      000C36 7B 00            [12] 2635 	mov	r3,#0x00
      000C38 8C 82            [24] 2636 	mov	dpl,r4
      000C3A 8B 83            [24] 2637 	mov	dph,r3
      000C3C 12r00r00         [24] 2638 	lcall	_putchar
      000C3F 0F               [12] 2639 	inc	r7
                                   2640 ;	calc.c:155: printstr("\r\n");
      000C40 BF 00 E7         [24] 2641 	cjne	r7,#0x00,00373$
      000C43 0E               [12] 2642 	inc	r6
      000C44 80 E4            [24] 2643 	sjmp	00373$
      000C46                       2644 00266$:
                                   2645 ;	calc.c:156: if (!stack_pop(ctx->ps, &d0)) printstr("stack underflow\r\n");
      000C46 E5*00            [12] 2646 	mov	a,_bp
      000C48 24 15            [12] 2647 	add	a,#0x15
      000C4A FF               [12] 2648 	mov	r7,a
      000C4B 7E 00            [12] 2649 	mov	r6,#0x00
      000C4D 7D 40            [12] 2650 	mov	r5,#0x40
      000C4F E5*00            [12] 2651 	mov	a,_bp
      000C51 24 12            [12] 2652 	add	a,#0x12
      000C53 F8               [12] 2653 	mov	r0,a
      000C54 74 11            [12] 2654 	mov	a,#0x11
      000C56 26               [12] 2655 	add	a,@r0
      000C57 FA               [12] 2656 	mov	r2,a
      000C58 ED               [12] 2657 	mov	a,r5
      000C59 08               [12] 2658 	inc	r0
      000C5A 36               [12] 2659 	addc	a,@r0
      000C5B FB               [12] 2660 	mov	r3,a
      000C5C 08               [12] 2661 	inc	r0
      000C5D 86 04            [24] 2662 	mov	ar4,@r0
      000C5F 8A 82            [24] 2663 	mov	dpl,r2
      000C61 8B 83            [24] 2664 	mov	dph,r3
      000C63 8C F0            [24] 2665 	mov	b,r4
      000C65 12r00r00         [24] 2666 	lcall	__gptrget
      000C68 FA               [12] 2667 	mov	r2,a
      000C69 A3               [24] 2668 	inc	dptr
      000C6A 12r00r00         [24] 2669 	lcall	__gptrget
      000C6D FB               [12] 2670 	mov	r3,a
      000C6E A3               [24] 2671 	inc	dptr
      000C6F 12r00r00         [24] 2672 	lcall	__gptrget
      000C72 FC               [12] 2673 	mov	r4,a
      000C73 C0 07            [24] 2674 	push	ar7
      000C75 C0 06            [24] 2675 	push	ar6
      000C77 C0 05            [24] 2676 	push	ar5
      000C79 8A 82            [24] 2677 	mov	dpl,r2
      000C7B 8B 83            [24] 2678 	mov	dph,r3
      000C7D 8C F0            [24] 2679 	mov	b,r4
      000C7F 12r00r00         [24] 2680 	lcall	_stack_pop
      000C82 AB 82            [24] 2681 	mov	r3,dpl
      000C84 AC 83            [24] 2682 	mov	r4,dph
      000C86 15 81            [12] 2683 	dec	sp
      000C88 15 81            [12] 2684 	dec	sp
      000C8A 15 81            [12] 2685 	dec	sp
      000C8C EB               [12] 2686 	mov	a,r3
      000C8D 4C               [12] 2687 	orl	a,r4
      000C8E 70 25            [24] 2688 	jnz	00111$
      000C90 7Fr1A            [12] 2689 	mov	r7,#___str_4
      000C92 7Es00            [12] 2690 	mov	r6,#(___str_4 >> 8)
      000C94 7D 80            [12] 2691 	mov	r5,#0x80
                                   2692 ;	calc.c:58: return;
      000C96                       2693 00376$:
                                   2694 ;	calc.c:56: for (; *s; s++) putchar(*s);
      000C96 8F 82            [24] 2695 	mov	dpl,r7
      000C98 8E 83            [24] 2696 	mov	dph,r6
      000C9A 8D F0            [24] 2697 	mov	b,r5
      000C9C 12r00r00         [24] 2698 	lcall	__gptrget
      000C9F FC               [12] 2699 	mov	r4,a
      000CA0 70 03            [24] 2700 	jnz	01279$
      000CA2 02r2BrA3         [24] 2701 	ljmp	00249$
      000CA5                       2702 01279$:
      000CA5 7B 00            [12] 2703 	mov	r3,#0x00
      000CA7 8C 82            [24] 2704 	mov	dpl,r4
      000CA9 8B 83            [24] 2705 	mov	dph,r3
      000CAB 12r00r00         [24] 2706 	lcall	_putchar
      000CAE 0F               [12] 2707 	inc	r7
                                   2708 ;	calc.c:156: if (!stack_pop(ctx->ps, &d0)) printstr("stack underflow\r\n");
      000CAF BF 00 E4         [24] 2709 	cjne	r7,#0x00,00376$
      000CB2 0E               [12] 2710 	inc	r6
      000CB3 80 E1            [24] 2711 	sjmp	00376$
      000CB5                       2712 00111$:
                                   2713 ;	calc.c:158: printstr("PSPTOP\t");
      000CB5 7Fr46            [12] 2714 	mov	r7,#___str_9
      000CB7 7Es00            [12] 2715 	mov	r6,#(___str_9 >> 8)
      000CB9 7D 80            [12] 2716 	mov	r5,#0x80
                                   2717 ;	calc.c:58: return;
      000CBB                       2718 00379$:
                                   2719 ;	calc.c:56: for (; *s; s++) putchar(*s);
      000CBB 8F 82            [24] 2720 	mov	dpl,r7
      000CBD 8E 83            [24] 2721 	mov	dph,r6
      000CBF 8D F0            [24] 2722 	mov	b,r5
      000CC1 12r00r00         [24] 2723 	lcall	__gptrget
      000CC4 FC               [12] 2724 	mov	r4,a
      000CC5 60 10            [24] 2725 	jz	00270$
      000CC7 7B 00            [12] 2726 	mov	r3,#0x00
      000CC9 8C 82            [24] 2727 	mov	dpl,r4
      000CCB 8B 83            [24] 2728 	mov	dph,r3
      000CCD 12r00r00         [24] 2729 	lcall	_putchar
      000CD0 0F               [12] 2730 	inc	r7
                                   2731 ;	calc.c:158: printstr("PSPTOP\t");
      000CD1 BF 00 E7         [24] 2732 	cjne	r7,#0x00,00379$
      000CD4 0E               [12] 2733 	inc	r6
      000CD5 80 E4            [24] 2734 	sjmp	00379$
      000CD7                       2735 00270$:
                                   2736 ;	calc.c:159: printall(d0);
      000CD7 E5*00            [12] 2737 	mov	a,_bp
      000CD9 24 15            [12] 2738 	add	a,#0x15
      000CDB F8               [12] 2739 	mov	r0,a
      000CDC 86 07            [24] 2740 	mov	ar7,@r0
      000CDE 08               [12] 2741 	inc	r0
      000CDF 86 06            [24] 2742 	mov	ar6,@r0
      000CE1 08               [12] 2743 	inc	r0
      000CE2 86 05            [24] 2744 	mov	ar5,@r0
      000CE4 08               [12] 2745 	inc	r0
      000CE5 86 04            [24] 2746 	mov	ar4,@r0
      000CE7 E5*00            [12] 2747 	mov	a,_bp
      000CE9 24 1D            [12] 2748 	add	a,#0x1d
      000CEB F8               [12] 2749 	mov	r0,a
      000CEC A6 07            [24] 2750 	mov	@r0,ar7
      000CEE 08               [12] 2751 	inc	r0
      000CEF A6 06            [24] 2752 	mov	@r0,ar6
      000CF1 08               [12] 2753 	inc	r0
      000CF2 A6 05            [24] 2754 	mov	@r0,ar5
      000CF4 08               [12] 2755 	inc	r0
      000CF5 A6 04            [24] 2756 	mov	@r0,ar4
                                   2757 ;	calc.c:71: printf("%08lx\t", d);
      000CF7 C0 07            [24] 2758 	push	ar7
      000CF9 C0 06            [24] 2759 	push	ar6
      000CFB C0 05            [24] 2760 	push	ar5
      000CFD C0 04            [24] 2761 	push	ar4
      000CFF 74r00            [12] 2762 	mov	a,#___str_0
      000D01 C0 E0            [24] 2763 	push	acc
      000D03 74s00            [12] 2764 	mov	a,#(___str_0 >> 8)
      000D05 C0 E0            [24] 2765 	push	acc
      000D07 74 80            [12] 2766 	mov	a,#0x80
      000D09 C0 E0            [24] 2767 	push	acc
      000D0B 12r00r00         [24] 2768 	lcall	_printf
      000D0E E5 81            [12] 2769 	mov	a,sp
      000D10 24 F9            [12] 2770 	add	a,#0xf9
      000D12 F5 81            [12] 2771 	mov	sp,a
                                   2772 ;	calc.c:72: printf("% 11ld\t", d);
      000D14 E5*00            [12] 2773 	mov	a,_bp
      000D16 24 1D            [12] 2774 	add	a,#0x1d
      000D18 F8               [12] 2775 	mov	r0,a
      000D19 E6               [12] 2776 	mov	a,@r0
      000D1A C0 E0            [24] 2777 	push	acc
      000D1C 08               [12] 2778 	inc	r0
      000D1D E6               [12] 2779 	mov	a,@r0
      000D1E C0 E0            [24] 2780 	push	acc
      000D20 08               [12] 2781 	inc	r0
      000D21 E6               [12] 2782 	mov	a,@r0
      000D22 C0 E0            [24] 2783 	push	acc
      000D24 08               [12] 2784 	inc	r0
      000D25 E6               [12] 2785 	mov	a,@r0
      000D26 C0 E0            [24] 2786 	push	acc
      000D28 74r07            [12] 2787 	mov	a,#___str_1
      000D2A C0 E0            [24] 2788 	push	acc
      000D2C 74s00            [12] 2789 	mov	a,#(___str_1 >> 8)
      000D2E C0 E0            [24] 2790 	push	acc
      000D30 74 80            [12] 2791 	mov	a,#0x80
      000D32 C0 E0            [24] 2792 	push	acc
      000D34 12r00r00         [24] 2793 	lcall	_printf
      000D37 E5 81            [12] 2794 	mov	a,sp
      000D39 24 F9            [12] 2795 	add	a,#0xf9
      000D3B F5 81            [12] 2796 	mov	sp,a
                                   2797 ;	calc.c:73: printf("%011lo\t", d);
      000D3D E5*00            [12] 2798 	mov	a,_bp
      000D3F 24 1D            [12] 2799 	add	a,#0x1d
      000D41 F8               [12] 2800 	mov	r0,a
      000D42 E6               [12] 2801 	mov	a,@r0
      000D43 C0 E0            [24] 2802 	push	acc
      000D45 08               [12] 2803 	inc	r0
      000D46 E6               [12] 2804 	mov	a,@r0
      000D47 C0 E0            [24] 2805 	push	acc
      000D49 08               [12] 2806 	inc	r0
      000D4A E6               [12] 2807 	mov	a,@r0
      000D4B C0 E0            [24] 2808 	push	acc
      000D4D 08               [12] 2809 	inc	r0
      000D4E E6               [12] 2810 	mov	a,@r0
      000D4F C0 E0            [24] 2811 	push	acc
      000D51 74r0F            [12] 2812 	mov	a,#___str_2
      000D53 C0 E0            [24] 2813 	push	acc
      000D55 74s00            [12] 2814 	mov	a,#(___str_2 >> 8)
      000D57 C0 E0            [24] 2815 	push	acc
      000D59 74 80            [12] 2816 	mov	a,#0x80
      000D5B C0 E0            [24] 2817 	push	acc
      000D5D 12r00r00         [24] 2818 	lcall	_printf
      000D60 E5 81            [12] 2819 	mov	a,sp
      000D62 24 F9            [12] 2820 	add	a,#0xf9
      000D64 F5 81            [12] 2821 	mov	sp,a
                                   2822 ;	calc.c:74: printbin(d);
      000D66 E5*00            [12] 2823 	mov	a,_bp
      000D68 24 1D            [12] 2824 	add	a,#0x1d
      000D6A F8               [12] 2825 	mov	r0,a
      000D6B 86 07            [24] 2826 	mov	ar7,@r0
      000D6D 08               [12] 2827 	inc	r0
      000D6E 86 06            [24] 2828 	mov	ar6,@r0
      000D70 08               [12] 2829 	inc	r0
      000D71 86 05            [24] 2830 	mov	ar5,@r0
      000D73 08               [12] 2831 	inc	r0
      000D74 86 02            [24] 2832 	mov	ar2,@r0
                                   2833 ;	calc.c:64: for (mask = 0x80000000lu; mask; mask >>= 1)
      000D76 E5*00            [12] 2834 	mov	a,_bp
      000D78 24 21            [12] 2835 	add	a,#0x21
      000D7A F8               [12] 2836 	mov	r0,a
      000D7B E4               [12] 2837 	clr	a
      000D7C F6               [12] 2838 	mov	@r0,a
      000D7D 08               [12] 2839 	inc	r0
      000D7E F6               [12] 2840 	mov	@r0,a
      000D7F 08               [12] 2841 	inc	r0
      000D80 F6               [12] 2842 	mov	@r0,a
      000D81 08               [12] 2843 	inc	r0
      000D82 76 80            [12] 2844 	mov	@r0,#0x80
      000D84                       2845 00381$:
                                   2846 ;	calc.c:65: (void)putchar((d & mask) ? (int)'1' : (int)'0');
      000D84 E5*00            [12] 2847 	mov	a,_bp
      000D86 24 07            [12] 2848 	add	a,#0x07
      000D88 F8               [12] 2849 	mov	r0,a
      000D89 A6 07            [24] 2850 	mov	@r0,ar7
      000D8B 08               [12] 2851 	inc	r0
      000D8C A6 06            [24] 2852 	mov	@r0,ar6
      000D8E 08               [12] 2853 	inc	r0
      000D8F A6 05            [24] 2854 	mov	@r0,ar5
      000D91 08               [12] 2855 	inc	r0
      000D92 A6 02            [24] 2856 	mov	@r0,ar2
      000D94 E5*00            [12] 2857 	mov	a,_bp
      000D96 24 07            [12] 2858 	add	a,#0x07
      000D98 F8               [12] 2859 	mov	r0,a
      000D99 E5*00            [12] 2860 	mov	a,_bp
      000D9B 24 21            [12] 2861 	add	a,#0x21
      000D9D F9               [12] 2862 	mov	r1,a
      000D9E E7               [12] 2863 	mov	a,@r1
      000D9F 56               [12] 2864 	anl	a,@r0
      000DA0 F6               [12] 2865 	mov	@r0,a
      000DA1 09               [12] 2866 	inc	r1
      000DA2 E7               [12] 2867 	mov	a,@r1
      000DA3 08               [12] 2868 	inc	r0
      000DA4 56               [12] 2869 	anl	a,@r0
      000DA5 F6               [12] 2870 	mov	@r0,a
      000DA6 09               [12] 2871 	inc	r1
      000DA7 E7               [12] 2872 	mov	a,@r1
      000DA8 08               [12] 2873 	inc	r0
      000DA9 56               [12] 2874 	anl	a,@r0
      000DAA F6               [12] 2875 	mov	@r0,a
      000DAB 09               [12] 2876 	inc	r1
      000DAC E7               [12] 2877 	mov	a,@r1
      000DAD 08               [12] 2878 	inc	r0
      000DAE 56               [12] 2879 	anl	a,@r0
      000DAF F6               [12] 2880 	mov	@r0,a
      000DB0 E5*00            [12] 2881 	mov	a,_bp
      000DB2 24 07            [12] 2882 	add	a,#0x07
      000DB4 F8               [12] 2883 	mov	r0,a
      000DB5 E6               [12] 2884 	mov	a,@r0
      000DB6 08               [12] 2885 	inc	r0
      000DB7 46               [12] 2886 	orl	a,@r0
      000DB8 08               [12] 2887 	inc	r0
      000DB9 46               [12] 2888 	orl	a,@r0
      000DBA 08               [12] 2889 	inc	r0
      000DBB 46               [12] 2890 	orl	a,@r0
      000DBC 60 06            [24] 2891 	jz	00504$
      000DBE 7B 31            [12] 2892 	mov	r3,#0x31
      000DC0 7C 00            [12] 2893 	mov	r4,#0x00
      000DC2 80 04            [24] 2894 	sjmp	00505$
      000DC4                       2895 00504$:
      000DC4 7B 30            [12] 2896 	mov	r3,#0x30
      000DC6 7C 00            [12] 2897 	mov	r4,#0x00
      000DC8                       2898 00505$:
      000DC8 8B 82            [24] 2899 	mov	dpl,r3
      000DCA 8C 83            [24] 2900 	mov	dph,r4
      000DCC 12r00r00         [24] 2901 	lcall	_putchar
                                   2902 ;	calc.c:64: for (mask = 0x80000000lu; mask; mask >>= 1)
      000DCF E5*00            [12] 2903 	mov	a,_bp
      000DD1 24 21            [12] 2904 	add	a,#0x21
      000DD3 F8               [12] 2905 	mov	r0,a
      000DD4 08               [12] 2906 	inc	r0
      000DD5 08               [12] 2907 	inc	r0
      000DD6 08               [12] 2908 	inc	r0
      000DD7 E6               [12] 2909 	mov	a,@r0
      000DD8 C3               [12] 2910 	clr	c
      000DD9 13               [12] 2911 	rrc	a
      000DDA F6               [12] 2912 	mov	@r0,a
      000DDB 18               [12] 2913 	dec	r0
      000DDC E6               [12] 2914 	mov	a,@r0
      000DDD 13               [12] 2915 	rrc	a
      000DDE F6               [12] 2916 	mov	@r0,a
      000DDF 18               [12] 2917 	dec	r0
      000DE0 E6               [12] 2918 	mov	a,@r0
      000DE1 13               [12] 2919 	rrc	a
      000DE2 F6               [12] 2920 	mov	@r0,a
      000DE3 18               [12] 2921 	dec	r0
      000DE4 E6               [12] 2922 	mov	a,@r0
      000DE5 13               [12] 2923 	rrc	a
      000DE6 F6               [12] 2924 	mov	@r0,a
      000DE7 E5*00            [12] 2925 	mov	a,_bp
      000DE9 24 21            [12] 2926 	add	a,#0x21
      000DEB F8               [12] 2927 	mov	r0,a
      000DEC E6               [12] 2928 	mov	a,@r0
      000DED 08               [12] 2929 	inc	r0
      000DEE 46               [12] 2930 	orl	a,@r0
      000DEF 08               [12] 2931 	inc	r0
      000DF0 46               [12] 2932 	orl	a,@r0
      000DF1 08               [12] 2933 	inc	r0
      000DF2 46               [12] 2934 	orl	a,@r0
      000DF3 70 8F            [24] 2935 	jnz	00381$
                                   2936 ;	calc.c:160: printstr("\r\n");
      000DF5 7Fr17            [12] 2937 	mov	r7,#___str_3
      000DF7 7Es00            [12] 2938 	mov	r6,#(___str_3 >> 8)
      000DF9 7D 80            [12] 2939 	mov	r5,#0x80
                                   2940 ;	calc.c:58: return;
      000DFB                       2941 00384$:
                                   2942 ;	calc.c:56: for (; *s; s++) putchar(*s);
      000DFB 8F 82            [24] 2943 	mov	dpl,r7
      000DFD 8E 83            [24] 2944 	mov	dph,r6
      000DFF 8D F0            [24] 2945 	mov	b,r5
      000E01 12r00r00         [24] 2946 	lcall	__gptrget
      000E04 FC               [12] 2947 	mov	r4,a
      000E05 70 03            [24] 2948 	jnz	01285$
      000E07 02r2BrA3         [24] 2949 	ljmp	00249$
      000E0A                       2950 01285$:
      000E0A 7B 00            [12] 2951 	mov	r3,#0x00
      000E0C 8C 82            [24] 2952 	mov	dpl,r4
      000E0E 8B 83            [24] 2953 	mov	dph,r3
      000E10 12r00r00         [24] 2954 	lcall	_putchar
      000E13 0F               [12] 2955 	inc	r7
                                   2956 ;	calc.c:163: case 'P':
      000E14 BF 00 E4         [24] 2957 	cjne	r7,#0x00,00384$
      000E17 0E               [12] 2958 	inc	r6
      000E18 80 E1            [24] 2959 	sjmp	00384$
      000E1A                       2960 00113$:
                                   2961 ;	calc.c:164: printstr("\r\n");
      000E1A 7Fr17            [12] 2962 	mov	r7,#___str_3
      000E1C 7Es00            [12] 2963 	mov	r6,#(___str_3 >> 8)
      000E1E 7D 80            [12] 2964 	mov	r5,#0x80
                                   2965 ;	calc.c:58: return;
      000E20                       2966 00387$:
                                   2967 ;	calc.c:56: for (; *s; s++) putchar(*s);
      000E20 8F 82            [24] 2968 	mov	dpl,r7
      000E22 8E 83            [24] 2969 	mov	dph,r6
      000E24 8D F0            [24] 2970 	mov	b,r5
      000E26 12r00r00         [24] 2971 	lcall	__gptrget
      000E29 FC               [12] 2972 	mov	r4,a
      000E2A 60 10            [24] 2973 	jz	00277$
      000E2C 7B 00            [12] 2974 	mov	r3,#0x00
      000E2E 8C 82            [24] 2975 	mov	dpl,r4
      000E30 8B 83            [24] 2976 	mov	dph,r3
      000E32 12r00r00         [24] 2977 	lcall	_putchar
      000E35 0F               [12] 2978 	inc	r7
                                   2979 ;	calc.c:164: printstr("\r\n");
      000E36 BF 00 E7         [24] 2980 	cjne	r7,#0x00,00387$
      000E39 0E               [12] 2981 	inc	r6
      000E3A 80 E4            [24] 2982 	sjmp	00387$
      000E3C                       2983 00277$:
                                   2984 ;	calc.c:165: (void)dump_pop(_ctx, delta);
      000E3C E5*00            [12] 2985 	mov	a,_bp
      000E3E 24 FB            [12] 2986 	add	a,#0xfb
      000E40 F8               [12] 2987 	mov	r0,a
      000E41 E6               [12] 2988 	mov	a,@r0
      000E42 C0 E0            [24] 2989 	push	acc
      000E44 08               [12] 2990 	inc	r0
      000E45 E6               [12] 2991 	mov	a,@r0
      000E46 C0 E0            [24] 2992 	push	acc
      000E48 08               [12] 2993 	inc	r0
      000E49 E6               [12] 2994 	mov	a,@r0
      000E4A C0 E0            [24] 2995 	push	acc
      000E4C A8*00            [24] 2996 	mov	r0,_bp
      000E4E 08               [12] 2997 	inc	r0
      000E4F 86 82            [24] 2998 	mov	dpl,@r0
      000E51 08               [12] 2999 	inc	r0
      000E52 86 83            [24] 3000 	mov	dph,@r0
      000E54 08               [12] 3001 	inc	r0
      000E55 86 F0            [24] 3002 	mov	b,@r0
      000E57 12r01rA1         [24] 3003 	lcall	_dump_pop
      000E5A 15 81            [12] 3004 	dec	sp
      000E5C 15 81            [12] 3005 	dec	sp
      000E5E 15 81            [12] 3006 	dec	sp
                                   3007 ;	calc.c:166: break;
      000E60 02r2BrA3         [24] 3008 	ljmp	00249$
                                   3009 ;	calc.c:167: case 'x':
      000E63                       3010 00114$:
                                   3011 ;	calc.c:168: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      000E63 E5*00            [12] 3012 	mov	a,_bp
      000E65 24 15            [12] 3013 	add	a,#0x15
      000E67 FF               [12] 3014 	mov	r7,a
      000E68 7E 00            [12] 3015 	mov	r6,#0x00
      000E6A 7D 40            [12] 3016 	mov	r5,#0x40
      000E6C E5*00            [12] 3017 	mov	a,_bp
      000E6E 24 12            [12] 3018 	add	a,#0x12
      000E70 F8               [12] 3019 	mov	r0,a
      000E71 E5*00            [12] 3020 	mov	a,_bp
      000E73 24 07            [12] 3021 	add	a,#0x07
      000E75 F9               [12] 3022 	mov	r1,a
      000E76 74 11            [12] 3023 	mov	a,#0x11
      000E78 26               [12] 3024 	add	a,@r0
      000E79 F7               [12] 3025 	mov	@r1,a
      000E7A 74 40            [12] 3026 	mov	a,#0x40
      000E7C 08               [12] 3027 	inc	r0
      000E7D 36               [12] 3028 	addc	a,@r0
      000E7E 09               [12] 3029 	inc	r1
      000E7F F7               [12] 3030 	mov	@r1,a
      000E80 08               [12] 3031 	inc	r0
      000E81 09               [12] 3032 	inc	r1
      000E82 E6               [12] 3033 	mov	a,@r0
      000E83 F7               [12] 3034 	mov	@r1,a
      000E84 E5*00            [12] 3035 	mov	a,_bp
      000E86 24 07            [12] 3036 	add	a,#0x07
      000E88 F8               [12] 3037 	mov	r0,a
      000E89 86 82            [24] 3038 	mov	dpl,@r0
      000E8B 08               [12] 3039 	inc	r0
      000E8C 86 83            [24] 3040 	mov	dph,@r0
      000E8E 08               [12] 3041 	inc	r0
      000E8F 86 F0            [24] 3042 	mov	b,@r0
      000E91 12r00r00         [24] 3043 	lcall	__gptrget
      000E94 FA               [12] 3044 	mov	r2,a
      000E95 A3               [24] 3045 	inc	dptr
      000E96 12r00r00         [24] 3046 	lcall	__gptrget
      000E99 FB               [12] 3047 	mov	r3,a
      000E9A A3               [24] 3048 	inc	dptr
      000E9B 12r00r00         [24] 3049 	lcall	__gptrget
      000E9E FC               [12] 3050 	mov	r4,a
      000E9F C0 07            [24] 3051 	push	ar7
      000EA1 C0 06            [24] 3052 	push	ar6
      000EA3 C0 05            [24] 3053 	push	ar5
      000EA5 8A 82            [24] 3054 	mov	dpl,r2
      000EA7 8B 83            [24] 3055 	mov	dph,r3
      000EA9 8C F0            [24] 3056 	mov	b,r4
      000EAB 12r00r00         [24] 3057 	lcall	_stack_pop
      000EAE AB 82            [24] 3058 	mov	r3,dpl
      000EB0 AC 83            [24] 3059 	mov	r4,dph
      000EB2 15 81            [12] 3060 	dec	sp
      000EB4 15 81            [12] 3061 	dec	sp
      000EB6 15 81            [12] 3062 	dec	sp
      000EB8 EB               [12] 3063 	mov	a,r3
      000EB9 4C               [12] 3064 	orl	a,r4
      000EBA 70 25            [24] 3065 	jnz	00119$
      000EBC 7Fr4E            [12] 3066 	mov	r7,#___str_10
      000EBE 7Es00            [12] 3067 	mov	r6,#(___str_10 >> 8)
      000EC0 7D 80            [12] 3068 	mov	r5,#0x80
                                   3069 ;	calc.c:58: return;
      000EC2                       3070 00390$:
                                   3071 ;	calc.c:56: for (; *s; s++) putchar(*s);
      000EC2 8F 82            [24] 3072 	mov	dpl,r7
      000EC4 8E 83            [24] 3073 	mov	dph,r6
      000EC6 8D F0            [24] 3074 	mov	b,r5
      000EC8 12r00r00         [24] 3075 	lcall	__gptrget
      000ECB FC               [12] 3076 	mov	r4,a
      000ECC 70 03            [24] 3077 	jnz	01290$
      000ECE 02r2BrA3         [24] 3078 	ljmp	00249$
      000ED1                       3079 01290$:
      000ED1 7B 00            [12] 3080 	mov	r3,#0x00
      000ED3 8C 82            [24] 3081 	mov	dpl,r4
      000ED5 8B 83            [24] 3082 	mov	dph,r3
      000ED7 12r00r00         [24] 3083 	lcall	_putchar
      000EDA 0F               [12] 3084 	inc	r7
                                   3085 ;	calc.c:168: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      000EDB BF 00 E4         [24] 3086 	cjne	r7,#0x00,00390$
      000EDE 0E               [12] 3087 	inc	r6
      000EDF 80 E1            [24] 3088 	sjmp	00390$
      000EE1                       3089 00119$:
                                   3090 ;	calc.c:169: else if (!stack_pop(ctx->ps, &d1)) {
      000EE1 E5*00            [12] 3091 	mov	a,_bp
      000EE3 24 19            [12] 3092 	add	a,#0x19
      000EE5 FF               [12] 3093 	mov	r7,a
      000EE6 7E 00            [12] 3094 	mov	r6,#0x00
      000EE8 7D 40            [12] 3095 	mov	r5,#0x40
      000EEA E5*00            [12] 3096 	mov	a,_bp
      000EEC 24 07            [12] 3097 	add	a,#0x07
      000EEE F8               [12] 3098 	mov	r0,a
      000EEF 86 82            [24] 3099 	mov	dpl,@r0
      000EF1 08               [12] 3100 	inc	r0
      000EF2 86 83            [24] 3101 	mov	dph,@r0
      000EF4 08               [12] 3102 	inc	r0
      000EF5 86 F0            [24] 3103 	mov	b,@r0
      000EF7 12r00r00         [24] 3104 	lcall	__gptrget
      000EFA FA               [12] 3105 	mov	r2,a
      000EFB A3               [24] 3106 	inc	dptr
      000EFC 12r00r00         [24] 3107 	lcall	__gptrget
      000EFF FB               [12] 3108 	mov	r3,a
      000F00 A3               [24] 3109 	inc	dptr
      000F01 12r00r00         [24] 3110 	lcall	__gptrget
      000F04 FC               [12] 3111 	mov	r4,a
      000F05 C0 07            [24] 3112 	push	ar7
      000F07 C0 06            [24] 3113 	push	ar6
      000F09 C0 05            [24] 3114 	push	ar5
      000F0B 8A 82            [24] 3115 	mov	dpl,r2
      000F0D 8B 83            [24] 3116 	mov	dph,r3
      000F0F 8C F0            [24] 3117 	mov	b,r4
      000F11 12r00r00         [24] 3118 	lcall	_stack_pop
      000F14 AB 82            [24] 3119 	mov	r3,dpl
      000F16 AC 83            [24] 3120 	mov	r4,dph
      000F18 15 81            [12] 3121 	dec	sp
      000F1A 15 81            [12] 3122 	dec	sp
      000F1C 15 81            [12] 3123 	dec	sp
      000F1E EB               [12] 3124 	mov	a,r3
      000F1F 4C               [12] 3125 	orl	a,r4
      000F20 70 63            [24] 3126 	jnz	00116$
                                   3127 ;	calc.c:170: (void)stack_push(ctx->ps, d0);
      000F22 E5*00            [12] 3128 	mov	a,_bp
      000F24 24 07            [12] 3129 	add	a,#0x07
      000F26 F8               [12] 3130 	mov	r0,a
      000F27 86 82            [24] 3131 	mov	dpl,@r0
      000F29 08               [12] 3132 	inc	r0
      000F2A 86 83            [24] 3133 	mov	dph,@r0
      000F2C 08               [12] 3134 	inc	r0
      000F2D 86 F0            [24] 3135 	mov	b,@r0
      000F2F 12r00r00         [24] 3136 	lcall	__gptrget
      000F32 FA               [12] 3137 	mov	r2,a
      000F33 A3               [24] 3138 	inc	dptr
      000F34 12r00r00         [24] 3139 	lcall	__gptrget
      000F37 FB               [12] 3140 	mov	r3,a
      000F38 A3               [24] 3141 	inc	dptr
      000F39 12r00r00         [24] 3142 	lcall	__gptrget
      000F3C FC               [12] 3143 	mov	r4,a
      000F3D E5*00            [12] 3144 	mov	a,_bp
      000F3F 24 15            [12] 3145 	add	a,#0x15
      000F41 F8               [12] 3146 	mov	r0,a
      000F42 E6               [12] 3147 	mov	a,@r0
      000F43 C0 E0            [24] 3148 	push	acc
      000F45 08               [12] 3149 	inc	r0
      000F46 E6               [12] 3150 	mov	a,@r0
      000F47 C0 E0            [24] 3151 	push	acc
      000F49 08               [12] 3152 	inc	r0
      000F4A E6               [12] 3153 	mov	a,@r0
      000F4B C0 E0            [24] 3154 	push	acc
      000F4D 08               [12] 3155 	inc	r0
      000F4E E6               [12] 3156 	mov	a,@r0
      000F4F C0 E0            [24] 3157 	push	acc
      000F51 8A 82            [24] 3158 	mov	dpl,r2
      000F53 8B 83            [24] 3159 	mov	dph,r3
      000F55 8C F0            [24] 3160 	mov	b,r4
      000F57 12r00r00         [24] 3161 	lcall	_stack_push
      000F5A E5 81            [12] 3162 	mov	a,sp
      000F5C 24 FC            [12] 3163 	add	a,#0xfc
      000F5E F5 81            [12] 3164 	mov	sp,a
                                   3165 ;	calc.c:171: printstr("\r\nstack underflow\r\n");
      000F60 7Fr4E            [12] 3166 	mov	r7,#___str_10
      000F62 7Es00            [12] 3167 	mov	r6,#(___str_10 >> 8)
      000F64 7D 80            [12] 3168 	mov	r5,#0x80
                                   3169 ;	calc.c:58: return;
      000F66                       3170 00393$:
                                   3171 ;	calc.c:56: for (; *s; s++) putchar(*s);
      000F66 8F 82            [24] 3172 	mov	dpl,r7
      000F68 8E 83            [24] 3173 	mov	dph,r6
      000F6A 8D F0            [24] 3174 	mov	b,r5
      000F6C 12r00r00         [24] 3175 	lcall	__gptrget
      000F6F FC               [12] 3176 	mov	r4,a
      000F70 70 03            [24] 3177 	jnz	01293$
      000F72 02r2BrA3         [24] 3178 	ljmp	00249$
      000F75                       3179 01293$:
      000F75 7B 00            [12] 3180 	mov	r3,#0x00
      000F77 8C 82            [24] 3181 	mov	dpl,r4
      000F79 8B 83            [24] 3182 	mov	dph,r3
      000F7B 12r00r00         [24] 3183 	lcall	_putchar
      000F7E 0F               [12] 3184 	inc	r7
                                   3185 ;	calc.c:171: printstr("\r\nstack underflow\r\n");
      000F7F BF 00 E4         [24] 3186 	cjne	r7,#0x00,00393$
      000F82 0E               [12] 3187 	inc	r6
      000F83 80 E1            [24] 3188 	sjmp	00393$
      000F85                       3189 00116$:
                                   3190 ;	calc.c:173: (void)stack_push(ctx->ps, d0);
      000F85 E5*00            [12] 3191 	mov	a,_bp
      000F87 24 07            [12] 3192 	add	a,#0x07
      000F89 F8               [12] 3193 	mov	r0,a
      000F8A 86 82            [24] 3194 	mov	dpl,@r0
      000F8C 08               [12] 3195 	inc	r0
      000F8D 86 83            [24] 3196 	mov	dph,@r0
      000F8F 08               [12] 3197 	inc	r0
      000F90 86 F0            [24] 3198 	mov	b,@r0
      000F92 12r00r00         [24] 3199 	lcall	__gptrget
      000F95 FA               [12] 3200 	mov	r2,a
      000F96 A3               [24] 3201 	inc	dptr
      000F97 12r00r00         [24] 3202 	lcall	__gptrget
      000F9A FB               [12] 3203 	mov	r3,a
      000F9B A3               [24] 3204 	inc	dptr
      000F9C 12r00r00         [24] 3205 	lcall	__gptrget
      000F9F FC               [12] 3206 	mov	r4,a
      000FA0 E5*00            [12] 3207 	mov	a,_bp
      000FA2 24 15            [12] 3208 	add	a,#0x15
      000FA4 F8               [12] 3209 	mov	r0,a
      000FA5 E6               [12] 3210 	mov	a,@r0
      000FA6 C0 E0            [24] 3211 	push	acc
      000FA8 08               [12] 3212 	inc	r0
      000FA9 E6               [12] 3213 	mov	a,@r0
      000FAA C0 E0            [24] 3214 	push	acc
      000FAC 08               [12] 3215 	inc	r0
      000FAD E6               [12] 3216 	mov	a,@r0
      000FAE C0 E0            [24] 3217 	push	acc
      000FB0 08               [12] 3218 	inc	r0
      000FB1 E6               [12] 3219 	mov	a,@r0
      000FB2 C0 E0            [24] 3220 	push	acc
      000FB4 8A 82            [24] 3221 	mov	dpl,r2
      000FB6 8B 83            [24] 3222 	mov	dph,r3
      000FB8 8C F0            [24] 3223 	mov	b,r4
      000FBA 12r00r00         [24] 3224 	lcall	_stack_push
      000FBD E5 81            [12] 3225 	mov	a,sp
      000FBF 24 FC            [12] 3226 	add	a,#0xfc
      000FC1 F5 81            [12] 3227 	mov	sp,a
                                   3228 ;	calc.c:174: (void)stack_push(ctx->ps, d1);
      000FC3 E5*00            [12] 3229 	mov	a,_bp
      000FC5 24 07            [12] 3230 	add	a,#0x07
      000FC7 F8               [12] 3231 	mov	r0,a
      000FC8 86 82            [24] 3232 	mov	dpl,@r0
      000FCA 08               [12] 3233 	inc	r0
      000FCB 86 83            [24] 3234 	mov	dph,@r0
      000FCD 08               [12] 3235 	inc	r0
      000FCE 86 F0            [24] 3236 	mov	b,@r0
      000FD0 12r00r00         [24] 3237 	lcall	__gptrget
      000FD3 FA               [12] 3238 	mov	r2,a
      000FD4 A3               [24] 3239 	inc	dptr
      000FD5 12r00r00         [24] 3240 	lcall	__gptrget
      000FD8 FB               [12] 3241 	mov	r3,a
      000FD9 A3               [24] 3242 	inc	dptr
      000FDA 12r00r00         [24] 3243 	lcall	__gptrget
      000FDD FC               [12] 3244 	mov	r4,a
      000FDE E5*00            [12] 3245 	mov	a,_bp
      000FE0 24 19            [12] 3246 	add	a,#0x19
      000FE2 F8               [12] 3247 	mov	r0,a
      000FE3 E6               [12] 3248 	mov	a,@r0
      000FE4 C0 E0            [24] 3249 	push	acc
      000FE6 08               [12] 3250 	inc	r0
      000FE7 E6               [12] 3251 	mov	a,@r0
      000FE8 C0 E0            [24] 3252 	push	acc
      000FEA 08               [12] 3253 	inc	r0
      000FEB E6               [12] 3254 	mov	a,@r0
      000FEC C0 E0            [24] 3255 	push	acc
      000FEE 08               [12] 3256 	inc	r0
      000FEF E6               [12] 3257 	mov	a,@r0
      000FF0 C0 E0            [24] 3258 	push	acc
      000FF2 8A 82            [24] 3259 	mov	dpl,r2
      000FF4 8B 83            [24] 3260 	mov	dph,r3
      000FF6 8C F0            [24] 3261 	mov	b,r4
      000FF8 12r00r00         [24] 3262 	lcall	_stack_push
      000FFB E5 81            [12] 3263 	mov	a,sp
      000FFD 24 FC            [12] 3264 	add	a,#0xfc
      000FFF F5 81            [12] 3265 	mov	sp,a
                                   3266 ;	calc.c:176: break;
      001001 02r2BrA3         [24] 3267 	ljmp	00249$
                                   3268 ;	calc.c:177: case 'm':
      001004                       3269 00121$:
                                   3270 ;	calc.c:178: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      001004 E5*00            [12] 3271 	mov	a,_bp
      001006 24 15            [12] 3272 	add	a,#0x15
      001008 FF               [12] 3273 	mov	r7,a
      001009 7E 00            [12] 3274 	mov	r6,#0x00
      00100B 7D 40            [12] 3275 	mov	r5,#0x40
      00100D E5*00            [12] 3276 	mov	a,_bp
      00100F 24 12            [12] 3277 	add	a,#0x12
      001011 F8               [12] 3278 	mov	r0,a
      001012 E5*00            [12] 3279 	mov	a,_bp
      001014 24 07            [12] 3280 	add	a,#0x07
      001016 F9               [12] 3281 	mov	r1,a
      001017 74 11            [12] 3282 	mov	a,#0x11
      001019 26               [12] 3283 	add	a,@r0
      00101A F7               [12] 3284 	mov	@r1,a
      00101B 74 40            [12] 3285 	mov	a,#0x40
      00101D 08               [12] 3286 	inc	r0
      00101E 36               [12] 3287 	addc	a,@r0
      00101F 09               [12] 3288 	inc	r1
      001020 F7               [12] 3289 	mov	@r1,a
      001021 08               [12] 3290 	inc	r0
      001022 09               [12] 3291 	inc	r1
      001023 E6               [12] 3292 	mov	a,@r0
      001024 F7               [12] 3293 	mov	@r1,a
      001025 E5*00            [12] 3294 	mov	a,_bp
      001027 24 07            [12] 3295 	add	a,#0x07
      001029 F8               [12] 3296 	mov	r0,a
      00102A 86 82            [24] 3297 	mov	dpl,@r0
      00102C 08               [12] 3298 	inc	r0
      00102D 86 83            [24] 3299 	mov	dph,@r0
      00102F 08               [12] 3300 	inc	r0
      001030 86 F0            [24] 3301 	mov	b,@r0
      001032 12r00r00         [24] 3302 	lcall	__gptrget
      001035 FA               [12] 3303 	mov	r2,a
      001036 A3               [24] 3304 	inc	dptr
      001037 12r00r00         [24] 3305 	lcall	__gptrget
      00103A FB               [12] 3306 	mov	r3,a
      00103B A3               [24] 3307 	inc	dptr
      00103C 12r00r00         [24] 3308 	lcall	__gptrget
      00103F FC               [12] 3309 	mov	r4,a
      001040 C0 07            [24] 3310 	push	ar7
      001042 C0 06            [24] 3311 	push	ar6
      001044 C0 05            [24] 3312 	push	ar5
      001046 8A 82            [24] 3313 	mov	dpl,r2
      001048 8B 83            [24] 3314 	mov	dph,r3
      00104A 8C F0            [24] 3315 	mov	b,r4
      00104C 12r00r00         [24] 3316 	lcall	_stack_pop
      00104F AB 82            [24] 3317 	mov	r3,dpl
      001051 AC 83            [24] 3318 	mov	r4,dph
      001053 15 81            [12] 3319 	dec	sp
      001055 15 81            [12] 3320 	dec	sp
      001057 15 81            [12] 3321 	dec	sp
      001059 EB               [12] 3322 	mov	a,r3
      00105A 4C               [12] 3323 	orl	a,r4
      00105B 70 25            [24] 3324 	jnz	00125$
      00105D 7Fr4E            [12] 3325 	mov	r7,#___str_10
      00105F 7Es00            [12] 3326 	mov	r6,#(___str_10 >> 8)
      001061 7D 80            [12] 3327 	mov	r5,#0x80
                                   3328 ;	calc.c:58: return;
      001063                       3329 00396$:
                                   3330 ;	calc.c:56: for (; *s; s++) putchar(*s);
      001063 8F 82            [24] 3331 	mov	dpl,r7
      001065 8E 83            [24] 3332 	mov	dph,r6
      001067 8D F0            [24] 3333 	mov	b,r5
      001069 12r00r00         [24] 3334 	lcall	__gptrget
      00106C FC               [12] 3335 	mov	r4,a
      00106D 70 03            [24] 3336 	jnz	01296$
      00106F 02r2BrA3         [24] 3337 	ljmp	00249$
      001072                       3338 01296$:
      001072 7B 00            [12] 3339 	mov	r3,#0x00
      001074 8C 82            [24] 3340 	mov	dpl,r4
      001076 8B 83            [24] 3341 	mov	dph,r3
      001078 12r00r00         [24] 3342 	lcall	_putchar
      00107B 0F               [12] 3343 	inc	r7
                                   3344 ;	calc.c:178: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      00107C BF 00 E4         [24] 3345 	cjne	r7,#0x00,00396$
      00107F 0E               [12] 3346 	inc	r6
      001080 80 E1            [24] 3347 	sjmp	00396$
      001082                       3348 00125$:
                                   3349 ;	calc.c:180: if (!stack_push(ctx->ss, d0)) {
      001082 E5*00            [12] 3350 	mov	a,_bp
      001084 24 12            [12] 3351 	add	a,#0x12
      001086 F8               [12] 3352 	mov	r0,a
      001087 74 14            [12] 3353 	mov	a,#0x14
      001089 26               [12] 3354 	add	a,@r0
      00108A FA               [12] 3355 	mov	r2,a
      00108B 74 40            [12] 3356 	mov	a,#0x40
      00108D 08               [12] 3357 	inc	r0
      00108E 36               [12] 3358 	addc	a,@r0
      00108F FB               [12] 3359 	mov	r3,a
      001090 08               [12] 3360 	inc	r0
      001091 86 04            [24] 3361 	mov	ar4,@r0
      001093 8A 82            [24] 3362 	mov	dpl,r2
      001095 8B 83            [24] 3363 	mov	dph,r3
      001097 8C F0            [24] 3364 	mov	b,r4
      001099 12r00r00         [24] 3365 	lcall	__gptrget
      00109C FA               [12] 3366 	mov	r2,a
      00109D A3               [24] 3367 	inc	dptr
      00109E 12r00r00         [24] 3368 	lcall	__gptrget
      0010A1 FB               [12] 3369 	mov	r3,a
      0010A2 A3               [24] 3370 	inc	dptr
      0010A3 12r00r00         [24] 3371 	lcall	__gptrget
      0010A6 FC               [12] 3372 	mov	r4,a
      0010A7 E5*00            [12] 3373 	mov	a,_bp
      0010A9 24 15            [12] 3374 	add	a,#0x15
      0010AB F8               [12] 3375 	mov	r0,a
      0010AC E6               [12] 3376 	mov	a,@r0
      0010AD C0 E0            [24] 3377 	push	acc
      0010AF 08               [12] 3378 	inc	r0
      0010B0 E6               [12] 3379 	mov	a,@r0
      0010B1 C0 E0            [24] 3380 	push	acc
      0010B3 08               [12] 3381 	inc	r0
      0010B4 E6               [12] 3382 	mov	a,@r0
      0010B5 C0 E0            [24] 3383 	push	acc
      0010B7 08               [12] 3384 	inc	r0
      0010B8 E6               [12] 3385 	mov	a,@r0
      0010B9 C0 E0            [24] 3386 	push	acc
      0010BB 8A 82            [24] 3387 	mov	dpl,r2
      0010BD 8B 83            [24] 3388 	mov	dph,r3
      0010BF 8C F0            [24] 3389 	mov	b,r4
      0010C1 12r00r00         [24] 3390 	lcall	_stack_push
      0010C4 AB 82            [24] 3391 	mov	r3,dpl
      0010C6 AC 83            [24] 3392 	mov	r4,dph
      0010C8 E5 81            [12] 3393 	mov	a,sp
      0010CA 24 FC            [12] 3394 	add	a,#0xfc
      0010CC F5 81            [12] 3395 	mov	sp,a
      0010CE EB               [12] 3396 	mov	a,r3
      0010CF 4C               [12] 3397 	orl	a,r4
      0010D0 60 03            [24] 3398 	jz	01298$
      0010D2 02r2BrA3         [24] 3399 	ljmp	00249$
      0010D5                       3400 01298$:
                                   3401 ;	calc.c:181: printstr("\r\nsecondary stack overflow\r\n");
      0010D5 7Fr62            [12] 3402 	mov	r7,#___str_11
      0010D7 7Es00            [12] 3403 	mov	r6,#(___str_11 >> 8)
      0010D9 7D 80            [12] 3404 	mov	r5,#0x80
                                   3405 ;	calc.c:58: return;
      0010DB                       3406 00399$:
                                   3407 ;	calc.c:56: for (; *s; s++) putchar(*s);
      0010DB 8F 82            [24] 3408 	mov	dpl,r7
      0010DD 8E 83            [24] 3409 	mov	dph,r6
      0010DF 8D F0            [24] 3410 	mov	b,r5
      0010E1 12r00r00         [24] 3411 	lcall	__gptrget
      0010E4 FC               [12] 3412 	mov	r4,a
      0010E5 60 10            [24] 3413 	jz	00285$
      0010E7 7B 00            [12] 3414 	mov	r3,#0x00
      0010E9 8C 82            [24] 3415 	mov	dpl,r4
      0010EB 8B 83            [24] 3416 	mov	dph,r3
      0010ED 12r00r00         [24] 3417 	lcall	_putchar
      0010F0 0F               [12] 3418 	inc	r7
                                   3419 ;	calc.c:181: printstr("\r\nsecondary stack overflow\r\n");
      0010F1 BF 00 E7         [24] 3420 	cjne	r7,#0x00,00399$
      0010F4 0E               [12] 3421 	inc	r6
      0010F5 80 E4            [24] 3422 	sjmp	00399$
      0010F7                       3423 00285$:
                                   3424 ;	calc.c:182: (void)stack_push(ctx->ps, d0);
      0010F7 E5*00            [12] 3425 	mov	a,_bp
      0010F9 24 07            [12] 3426 	add	a,#0x07
      0010FB F8               [12] 3427 	mov	r0,a
      0010FC 86 82            [24] 3428 	mov	dpl,@r0
      0010FE 08               [12] 3429 	inc	r0
      0010FF 86 83            [24] 3430 	mov	dph,@r0
      001101 08               [12] 3431 	inc	r0
      001102 86 F0            [24] 3432 	mov	b,@r0
      001104 12r00r00         [24] 3433 	lcall	__gptrget
      001107 FA               [12] 3434 	mov	r2,a
      001108 A3               [24] 3435 	inc	dptr
      001109 12r00r00         [24] 3436 	lcall	__gptrget
      00110C FB               [12] 3437 	mov	r3,a
      00110D A3               [24] 3438 	inc	dptr
      00110E 12r00r00         [24] 3439 	lcall	__gptrget
      001111 FC               [12] 3440 	mov	r4,a
      001112 E5*00            [12] 3441 	mov	a,_bp
      001114 24 15            [12] 3442 	add	a,#0x15
      001116 F8               [12] 3443 	mov	r0,a
      001117 E6               [12] 3444 	mov	a,@r0
      001118 C0 E0            [24] 3445 	push	acc
      00111A 08               [12] 3446 	inc	r0
      00111B E6               [12] 3447 	mov	a,@r0
      00111C C0 E0            [24] 3448 	push	acc
      00111E 08               [12] 3449 	inc	r0
      00111F E6               [12] 3450 	mov	a,@r0
      001120 C0 E0            [24] 3451 	push	acc
      001122 08               [12] 3452 	inc	r0
      001123 E6               [12] 3453 	mov	a,@r0
      001124 C0 E0            [24] 3454 	push	acc
      001126 8A 82            [24] 3455 	mov	dpl,r2
      001128 8B 83            [24] 3456 	mov	dph,r3
      00112A 8C F0            [24] 3457 	mov	b,r4
      00112C 12r00r00         [24] 3458 	lcall	_stack_push
      00112F E5 81            [12] 3459 	mov	a,sp
      001131 24 FC            [12] 3460 	add	a,#0xfc
      001133 F5 81            [12] 3461 	mov	sp,a
                                   3462 ;	calc.c:185: break;
      001135 02r2BrA3         [24] 3463 	ljmp	00249$
                                   3464 ;	calc.c:186: case 'M':
      001138                       3465 00127$:
                                   3466 ;	calc.c:187: if (!stack_pop(ctx->ss, &d0)) printstr("\r\nsecondary stack underflow\r\n");
      001138 E5*00            [12] 3467 	mov	a,_bp
      00113A 24 15            [12] 3468 	add	a,#0x15
      00113C FF               [12] 3469 	mov	r7,a
      00113D 7E 00            [12] 3470 	mov	r6,#0x00
      00113F 7D 40            [12] 3471 	mov	r5,#0x40
      001141 E5*00            [12] 3472 	mov	a,_bp
      001143 24 12            [12] 3473 	add	a,#0x12
      001145 F8               [12] 3474 	mov	r0,a
      001146 E5*00            [12] 3475 	mov	a,_bp
      001148 24 07            [12] 3476 	add	a,#0x07
      00114A F9               [12] 3477 	mov	r1,a
      00114B 74 14            [12] 3478 	mov	a,#0x14
      00114D 26               [12] 3479 	add	a,@r0
      00114E F7               [12] 3480 	mov	@r1,a
      00114F 74 40            [12] 3481 	mov	a,#0x40
      001151 08               [12] 3482 	inc	r0
      001152 36               [12] 3483 	addc	a,@r0
      001153 09               [12] 3484 	inc	r1
      001154 F7               [12] 3485 	mov	@r1,a
      001155 08               [12] 3486 	inc	r0
      001156 09               [12] 3487 	inc	r1
      001157 E6               [12] 3488 	mov	a,@r0
      001158 F7               [12] 3489 	mov	@r1,a
      001159 E5*00            [12] 3490 	mov	a,_bp
      00115B 24 07            [12] 3491 	add	a,#0x07
      00115D F8               [12] 3492 	mov	r0,a
      00115E 86 82            [24] 3493 	mov	dpl,@r0
      001160 08               [12] 3494 	inc	r0
      001161 86 83            [24] 3495 	mov	dph,@r0
      001163 08               [12] 3496 	inc	r0
      001164 86 F0            [24] 3497 	mov	b,@r0
      001166 12r00r00         [24] 3498 	lcall	__gptrget
      001169 FA               [12] 3499 	mov	r2,a
      00116A A3               [24] 3500 	inc	dptr
      00116B 12r00r00         [24] 3501 	lcall	__gptrget
      00116E FB               [12] 3502 	mov	r3,a
      00116F A3               [24] 3503 	inc	dptr
      001170 12r00r00         [24] 3504 	lcall	__gptrget
      001173 FC               [12] 3505 	mov	r4,a
      001174 C0 07            [24] 3506 	push	ar7
      001176 C0 06            [24] 3507 	push	ar6
      001178 C0 05            [24] 3508 	push	ar5
      00117A 8A 82            [24] 3509 	mov	dpl,r2
      00117C 8B 83            [24] 3510 	mov	dph,r3
      00117E 8C F0            [24] 3511 	mov	b,r4
      001180 12r00r00         [24] 3512 	lcall	_stack_pop
      001183 AB 82            [24] 3513 	mov	r3,dpl
      001185 AC 83            [24] 3514 	mov	r4,dph
      001187 15 81            [12] 3515 	dec	sp
      001189 15 81            [12] 3516 	dec	sp
      00118B 15 81            [12] 3517 	dec	sp
      00118D EB               [12] 3518 	mov	a,r3
      00118E 4C               [12] 3519 	orl	a,r4
      00118F 70 25            [24] 3520 	jnz	00131$
      001191 7Fr7F            [12] 3521 	mov	r7,#___str_12
      001193 7Es00            [12] 3522 	mov	r6,#(___str_12 >> 8)
      001195 7D 80            [12] 3523 	mov	r5,#0x80
                                   3524 ;	calc.c:58: return;
      001197                       3525 00402$:
                                   3526 ;	calc.c:56: for (; *s; s++) putchar(*s);
      001197 8F 82            [24] 3527 	mov	dpl,r7
      001199 8E 83            [24] 3528 	mov	dph,r6
      00119B 8D F0            [24] 3529 	mov	b,r5
      00119D 12r00r00         [24] 3530 	lcall	__gptrget
      0011A0 FC               [12] 3531 	mov	r4,a
      0011A1 70 03            [24] 3532 	jnz	01302$
      0011A3 02r2BrA3         [24] 3533 	ljmp	00249$
      0011A6                       3534 01302$:
      0011A6 7B 00            [12] 3535 	mov	r3,#0x00
      0011A8 8C 82            [24] 3536 	mov	dpl,r4
      0011AA 8B 83            [24] 3537 	mov	dph,r3
      0011AC 12r00r00         [24] 3538 	lcall	_putchar
      0011AF 0F               [12] 3539 	inc	r7
                                   3540 ;	calc.c:187: if (!stack_pop(ctx->ss, &d0)) printstr("\r\nsecondary stack underflow\r\n");
      0011B0 BF 00 E4         [24] 3541 	cjne	r7,#0x00,00402$
      0011B3 0E               [12] 3542 	inc	r6
      0011B4 80 E1            [24] 3543 	sjmp	00402$
      0011B6                       3544 00131$:
                                   3545 ;	calc.c:189: if (!stack_push(ctx->ps, d0)) {
      0011B6 E5*00            [12] 3546 	mov	a,_bp
      0011B8 24 12            [12] 3547 	add	a,#0x12
      0011BA F8               [12] 3548 	mov	r0,a
      0011BB 74 11            [12] 3549 	mov	a,#0x11
      0011BD 26               [12] 3550 	add	a,@r0
      0011BE FA               [12] 3551 	mov	r2,a
      0011BF 74 40            [12] 3552 	mov	a,#0x40
      0011C1 08               [12] 3553 	inc	r0
      0011C2 36               [12] 3554 	addc	a,@r0
      0011C3 FB               [12] 3555 	mov	r3,a
      0011C4 08               [12] 3556 	inc	r0
      0011C5 86 04            [24] 3557 	mov	ar4,@r0
      0011C7 8A 82            [24] 3558 	mov	dpl,r2
      0011C9 8B 83            [24] 3559 	mov	dph,r3
      0011CB 8C F0            [24] 3560 	mov	b,r4
      0011CD 12r00r00         [24] 3561 	lcall	__gptrget
      0011D0 FA               [12] 3562 	mov	r2,a
      0011D1 A3               [24] 3563 	inc	dptr
      0011D2 12r00r00         [24] 3564 	lcall	__gptrget
      0011D5 FB               [12] 3565 	mov	r3,a
      0011D6 A3               [24] 3566 	inc	dptr
      0011D7 12r00r00         [24] 3567 	lcall	__gptrget
      0011DA FC               [12] 3568 	mov	r4,a
      0011DB E5*00            [12] 3569 	mov	a,_bp
      0011DD 24 15            [12] 3570 	add	a,#0x15
      0011DF F8               [12] 3571 	mov	r0,a
      0011E0 E6               [12] 3572 	mov	a,@r0
      0011E1 C0 E0            [24] 3573 	push	acc
      0011E3 08               [12] 3574 	inc	r0
      0011E4 E6               [12] 3575 	mov	a,@r0
      0011E5 C0 E0            [24] 3576 	push	acc
      0011E7 08               [12] 3577 	inc	r0
      0011E8 E6               [12] 3578 	mov	a,@r0
      0011E9 C0 E0            [24] 3579 	push	acc
      0011EB 08               [12] 3580 	inc	r0
      0011EC E6               [12] 3581 	mov	a,@r0
      0011ED C0 E0            [24] 3582 	push	acc
      0011EF 8A 82            [24] 3583 	mov	dpl,r2
      0011F1 8B 83            [24] 3584 	mov	dph,r3
      0011F3 8C F0            [24] 3585 	mov	b,r4
      0011F5 12r00r00         [24] 3586 	lcall	_stack_push
      0011F8 AB 82            [24] 3587 	mov	r3,dpl
      0011FA AC 83            [24] 3588 	mov	r4,dph
      0011FC E5 81            [12] 3589 	mov	a,sp
      0011FE 24 FC            [12] 3590 	add	a,#0xfc
      001200 F5 81            [12] 3591 	mov	sp,a
      001202 EB               [12] 3592 	mov	a,r3
      001203 4C               [12] 3593 	orl	a,r4
      001204 60 03            [24] 3594 	jz	01304$
      001206 02r2BrA3         [24] 3595 	ljmp	00249$
      001209                       3596 01304$:
                                   3597 ;	calc.c:190: printstr("\r\nstack overflow\r\n");
      001209 7Fr9D            [12] 3598 	mov	r7,#___str_13
      00120B 7Es00            [12] 3599 	mov	r6,#(___str_13 >> 8)
      00120D 7D 80            [12] 3600 	mov	r5,#0x80
                                   3601 ;	calc.c:58: return;
      00120F                       3602 00405$:
                                   3603 ;	calc.c:56: for (; *s; s++) putchar(*s);
      00120F 8F 82            [24] 3604 	mov	dpl,r7
      001211 8E 83            [24] 3605 	mov	dph,r6
      001213 8D F0            [24] 3606 	mov	b,r5
      001215 12r00r00         [24] 3607 	lcall	__gptrget
      001218 FC               [12] 3608 	mov	r4,a
      001219 60 10            [24] 3609 	jz	00289$
      00121B 7B 00            [12] 3610 	mov	r3,#0x00
      00121D 8C 82            [24] 3611 	mov	dpl,r4
      00121F 8B 83            [24] 3612 	mov	dph,r3
      001221 12r00r00         [24] 3613 	lcall	_putchar
      001224 0F               [12] 3614 	inc	r7
                                   3615 ;	calc.c:190: printstr("\r\nstack overflow\r\n");
      001225 BF 00 E7         [24] 3616 	cjne	r7,#0x00,00405$
      001228 0E               [12] 3617 	inc	r6
      001229 80 E4            [24] 3618 	sjmp	00405$
      00122B                       3619 00289$:
                                   3620 ;	calc.c:191: (void)stack_push(ctx->ss, d0);
      00122B E5*00            [12] 3621 	mov	a,_bp
      00122D 24 07            [12] 3622 	add	a,#0x07
      00122F F8               [12] 3623 	mov	r0,a
      001230 86 82            [24] 3624 	mov	dpl,@r0
      001232 08               [12] 3625 	inc	r0
      001233 86 83            [24] 3626 	mov	dph,@r0
      001235 08               [12] 3627 	inc	r0
      001236 86 F0            [24] 3628 	mov	b,@r0
      001238 12r00r00         [24] 3629 	lcall	__gptrget
      00123B FA               [12] 3630 	mov	r2,a
      00123C A3               [24] 3631 	inc	dptr
      00123D 12r00r00         [24] 3632 	lcall	__gptrget
      001240 FB               [12] 3633 	mov	r3,a
      001241 A3               [24] 3634 	inc	dptr
      001242 12r00r00         [24] 3635 	lcall	__gptrget
      001245 FC               [12] 3636 	mov	r4,a
      001246 E5*00            [12] 3637 	mov	a,_bp
      001248 24 15            [12] 3638 	add	a,#0x15
      00124A F8               [12] 3639 	mov	r0,a
      00124B E6               [12] 3640 	mov	a,@r0
      00124C C0 E0            [24] 3641 	push	acc
      00124E 08               [12] 3642 	inc	r0
      00124F E6               [12] 3643 	mov	a,@r0
      001250 C0 E0            [24] 3644 	push	acc
      001252 08               [12] 3645 	inc	r0
      001253 E6               [12] 3646 	mov	a,@r0
      001254 C0 E0            [24] 3647 	push	acc
      001256 08               [12] 3648 	inc	r0
      001257 E6               [12] 3649 	mov	a,@r0
      001258 C0 E0            [24] 3650 	push	acc
      00125A 8A 82            [24] 3651 	mov	dpl,r2
      00125C 8B 83            [24] 3652 	mov	dph,r3
      00125E 8C F0            [24] 3653 	mov	b,r4
      001260 12r00r00         [24] 3654 	lcall	_stack_push
      001263 E5 81            [12] 3655 	mov	a,sp
      001265 24 FC            [12] 3656 	add	a,#0xfc
      001267 F5 81            [12] 3657 	mov	sp,a
                                   3658 ;	calc.c:194: break;
      001269 02r2BrA3         [24] 3659 	ljmp	00249$
                                   3660 ;	calc.c:195: case 'u':
      00126C                       3661 00133$:
                                   3662 ;	calc.c:196: if (!stack_peek(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      00126C E5*00            [12] 3663 	mov	a,_bp
      00126E 24 15            [12] 3664 	add	a,#0x15
      001270 FF               [12] 3665 	mov	r7,a
      001271 7E 00            [12] 3666 	mov	r6,#0x00
      001273 7D 40            [12] 3667 	mov	r5,#0x40
      001275 E5*00            [12] 3668 	mov	a,_bp
      001277 24 12            [12] 3669 	add	a,#0x12
      001279 F8               [12] 3670 	mov	r0,a
      00127A 74 11            [12] 3671 	mov	a,#0x11
      00127C 26               [12] 3672 	add	a,@r0
      00127D FA               [12] 3673 	mov	r2,a
      00127E ED               [12] 3674 	mov	a,r5
      00127F 08               [12] 3675 	inc	r0
      001280 36               [12] 3676 	addc	a,@r0
      001281 FB               [12] 3677 	mov	r3,a
      001282 08               [12] 3678 	inc	r0
      001283 86 04            [24] 3679 	mov	ar4,@r0
      001285 8A 82            [24] 3680 	mov	dpl,r2
      001287 8B 83            [24] 3681 	mov	dph,r3
      001289 8C F0            [24] 3682 	mov	b,r4
      00128B 12r00r00         [24] 3683 	lcall	__gptrget
      00128E FA               [12] 3684 	mov	r2,a
      00128F A3               [24] 3685 	inc	dptr
      001290 12r00r00         [24] 3686 	lcall	__gptrget
      001293 FB               [12] 3687 	mov	r3,a
      001294 A3               [24] 3688 	inc	dptr
      001295 12r00r00         [24] 3689 	lcall	__gptrget
      001298 FC               [12] 3690 	mov	r4,a
      001299 C0 07            [24] 3691 	push	ar7
      00129B C0 06            [24] 3692 	push	ar6
      00129D C0 05            [24] 3693 	push	ar5
      00129F 8A 82            [24] 3694 	mov	dpl,r2
      0012A1 8B 83            [24] 3695 	mov	dph,r3
      0012A3 8C F0            [24] 3696 	mov	b,r4
      0012A5 12r00r00         [24] 3697 	lcall	_stack_peek
      0012A8 AB 82            [24] 3698 	mov	r3,dpl
      0012AA AC 83            [24] 3699 	mov	r4,dph
      0012AC 15 81            [12] 3700 	dec	sp
      0012AE 15 81            [12] 3701 	dec	sp
      0012B0 15 81            [12] 3702 	dec	sp
      0012B2 EB               [12] 3703 	mov	a,r3
      0012B3 4C               [12] 3704 	orl	a,r4
      0012B4 70 25            [24] 3705 	jnz	00137$
      0012B6 7Fr4E            [12] 3706 	mov	r7,#___str_10
      0012B8 7Es00            [12] 3707 	mov	r6,#(___str_10 >> 8)
      0012BA 7D 80            [12] 3708 	mov	r5,#0x80
                                   3709 ;	calc.c:58: return;
      0012BC                       3710 00408$:
                                   3711 ;	calc.c:56: for (; *s; s++) putchar(*s);
      0012BC 8F 82            [24] 3712 	mov	dpl,r7
      0012BE 8E 83            [24] 3713 	mov	dph,r6
      0012C0 8D F0            [24] 3714 	mov	b,r5
      0012C2 12r00r00         [24] 3715 	lcall	__gptrget
      0012C5 FC               [12] 3716 	mov	r4,a
      0012C6 70 03            [24] 3717 	jnz	01308$
      0012C8 02r2BrA3         [24] 3718 	ljmp	00249$
      0012CB                       3719 01308$:
      0012CB 7B 00            [12] 3720 	mov	r3,#0x00
      0012CD 8C 82            [24] 3721 	mov	dpl,r4
      0012CF 8B 83            [24] 3722 	mov	dph,r3
      0012D1 12r00r00         [24] 3723 	lcall	_putchar
      0012D4 0F               [12] 3724 	inc	r7
                                   3725 ;	calc.c:196: if (!stack_peek(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      0012D5 BF 00 E4         [24] 3726 	cjne	r7,#0x00,00408$
      0012D8 0E               [12] 3727 	inc	r6
      0012D9 80 E1            [24] 3728 	sjmp	00408$
      0012DB                       3729 00137$:
                                   3730 ;	calc.c:197: else if (!stack_push(ctx->ss, d0)) printstr("\r\nsecondary stack overflow\r\n");
      0012DB E5*00            [12] 3731 	mov	a,_bp
      0012DD 24 12            [12] 3732 	add	a,#0x12
      0012DF F8               [12] 3733 	mov	r0,a
      0012E0 74 14            [12] 3734 	mov	a,#0x14
      0012E2 26               [12] 3735 	add	a,@r0
      0012E3 FA               [12] 3736 	mov	r2,a
      0012E4 74 40            [12] 3737 	mov	a,#0x40
      0012E6 08               [12] 3738 	inc	r0
      0012E7 36               [12] 3739 	addc	a,@r0
      0012E8 FB               [12] 3740 	mov	r3,a
      0012E9 08               [12] 3741 	inc	r0
      0012EA 86 04            [24] 3742 	mov	ar4,@r0
      0012EC 8A 82            [24] 3743 	mov	dpl,r2
      0012EE 8B 83            [24] 3744 	mov	dph,r3
      0012F0 8C F0            [24] 3745 	mov	b,r4
      0012F2 12r00r00         [24] 3746 	lcall	__gptrget
      0012F5 FA               [12] 3747 	mov	r2,a
      0012F6 A3               [24] 3748 	inc	dptr
      0012F7 12r00r00         [24] 3749 	lcall	__gptrget
      0012FA FB               [12] 3750 	mov	r3,a
      0012FB A3               [24] 3751 	inc	dptr
      0012FC 12r00r00         [24] 3752 	lcall	__gptrget
      0012FF FC               [12] 3753 	mov	r4,a
      001300 E5*00            [12] 3754 	mov	a,_bp
      001302 24 15            [12] 3755 	add	a,#0x15
      001304 F8               [12] 3756 	mov	r0,a
      001305 E6               [12] 3757 	mov	a,@r0
      001306 C0 E0            [24] 3758 	push	acc
      001308 08               [12] 3759 	inc	r0
      001309 E6               [12] 3760 	mov	a,@r0
      00130A C0 E0            [24] 3761 	push	acc
      00130C 08               [12] 3762 	inc	r0
      00130D E6               [12] 3763 	mov	a,@r0
      00130E C0 E0            [24] 3764 	push	acc
      001310 08               [12] 3765 	inc	r0
      001311 E6               [12] 3766 	mov	a,@r0
      001312 C0 E0            [24] 3767 	push	acc
      001314 8A 82            [24] 3768 	mov	dpl,r2
      001316 8B 83            [24] 3769 	mov	dph,r3
      001318 8C F0            [24] 3770 	mov	b,r4
      00131A 12r00r00         [24] 3771 	lcall	_stack_push
      00131D AB 82            [24] 3772 	mov	r3,dpl
      00131F AC 83            [24] 3773 	mov	r4,dph
      001321 E5 81            [12] 3774 	mov	a,sp
      001323 24 FC            [12] 3775 	add	a,#0xfc
      001325 F5 81            [12] 3776 	mov	sp,a
      001327 EB               [12] 3777 	mov	a,r3
      001328 4C               [12] 3778 	orl	a,r4
      001329 60 03            [24] 3779 	jz	01310$
      00132B 02r2BrA3         [24] 3780 	ljmp	00249$
      00132E                       3781 01310$:
      00132E 7Fr62            [12] 3782 	mov	r7,#___str_11
      001330 7Es00            [12] 3783 	mov	r6,#(___str_11 >> 8)
      001332 7D 80            [12] 3784 	mov	r5,#0x80
                                   3785 ;	calc.c:58: return;
      001334                       3786 00411$:
                                   3787 ;	calc.c:56: for (; *s; s++) putchar(*s);
      001334 8F 82            [24] 3788 	mov	dpl,r7
      001336 8E 83            [24] 3789 	mov	dph,r6
      001338 8D F0            [24] 3790 	mov	b,r5
      00133A 12r00r00         [24] 3791 	lcall	__gptrget
      00133D FC               [12] 3792 	mov	r4,a
      00133E 70 03            [24] 3793 	jnz	01311$
      001340 02r2BrA3         [24] 3794 	ljmp	00249$
      001343                       3795 01311$:
      001343 7B 00            [12] 3796 	mov	r3,#0x00
      001345 8C 82            [24] 3797 	mov	dpl,r4
      001347 8B 83            [24] 3798 	mov	dph,r3
      001349 12r00r00         [24] 3799 	lcall	_putchar
      00134C 0F               [12] 3800 	inc	r7
                                   3801 ;	calc.c:199: case 'U':
      00134D BF 00 E4         [24] 3802 	cjne	r7,#0x00,00411$
      001350 0E               [12] 3803 	inc	r6
      001351 80 E1            [24] 3804 	sjmp	00411$
      001353                       3805 00139$:
                                   3806 ;	calc.c:200: if (!stack_peek(ctx->ss, &d0)) printstr("\r\nsecondary stack underflow\r\n");
      001353 E5*00            [12] 3807 	mov	a,_bp
      001355 24 15            [12] 3808 	add	a,#0x15
      001357 FF               [12] 3809 	mov	r7,a
      001358 7E 00            [12] 3810 	mov	r6,#0x00
      00135A 7D 40            [12] 3811 	mov	r5,#0x40
      00135C E5*00            [12] 3812 	mov	a,_bp
      00135E 24 12            [12] 3813 	add	a,#0x12
      001360 F8               [12] 3814 	mov	r0,a
      001361 74 14            [12] 3815 	mov	a,#0x14
      001363 26               [12] 3816 	add	a,@r0
      001364 FA               [12] 3817 	mov	r2,a
      001365 ED               [12] 3818 	mov	a,r5
      001366 08               [12] 3819 	inc	r0
      001367 36               [12] 3820 	addc	a,@r0
      001368 FB               [12] 3821 	mov	r3,a
      001369 08               [12] 3822 	inc	r0
      00136A 86 04            [24] 3823 	mov	ar4,@r0
      00136C 8A 82            [24] 3824 	mov	dpl,r2
      00136E 8B 83            [24] 3825 	mov	dph,r3
      001370 8C F0            [24] 3826 	mov	b,r4
      001372 12r00r00         [24] 3827 	lcall	__gptrget
      001375 FA               [12] 3828 	mov	r2,a
      001376 A3               [24] 3829 	inc	dptr
      001377 12r00r00         [24] 3830 	lcall	__gptrget
      00137A FB               [12] 3831 	mov	r3,a
      00137B A3               [24] 3832 	inc	dptr
      00137C 12r00r00         [24] 3833 	lcall	__gptrget
      00137F FC               [12] 3834 	mov	r4,a
      001380 C0 07            [24] 3835 	push	ar7
      001382 C0 06            [24] 3836 	push	ar6
      001384 C0 05            [24] 3837 	push	ar5
      001386 8A 82            [24] 3838 	mov	dpl,r2
      001388 8B 83            [24] 3839 	mov	dph,r3
      00138A 8C F0            [24] 3840 	mov	b,r4
      00138C 12r00r00         [24] 3841 	lcall	_stack_peek
      00138F AB 82            [24] 3842 	mov	r3,dpl
      001391 AC 83            [24] 3843 	mov	r4,dph
      001393 15 81            [12] 3844 	dec	sp
      001395 15 81            [12] 3845 	dec	sp
      001397 15 81            [12] 3846 	dec	sp
      001399 EB               [12] 3847 	mov	a,r3
      00139A 4C               [12] 3848 	orl	a,r4
      00139B 70 25            [24] 3849 	jnz	00143$
      00139D 7Fr7F            [12] 3850 	mov	r7,#___str_12
      00139F 7Es00            [12] 3851 	mov	r6,#(___str_12 >> 8)
      0013A1 7D 80            [12] 3852 	mov	r5,#0x80
                                   3853 ;	calc.c:58: return;
      0013A3                       3854 00414$:
                                   3855 ;	calc.c:56: for (; *s; s++) putchar(*s);
      0013A3 8F 82            [24] 3856 	mov	dpl,r7
      0013A5 8E 83            [24] 3857 	mov	dph,r6
      0013A7 8D F0            [24] 3858 	mov	b,r5
      0013A9 12r00r00         [24] 3859 	lcall	__gptrget
      0013AC FC               [12] 3860 	mov	r4,a
      0013AD 70 03            [24] 3861 	jnz	01314$
      0013AF 02r2BrA3         [24] 3862 	ljmp	00249$
      0013B2                       3863 01314$:
      0013B2 7B 00            [12] 3864 	mov	r3,#0x00
      0013B4 8C 82            [24] 3865 	mov	dpl,r4
      0013B6 8B 83            [24] 3866 	mov	dph,r3
      0013B8 12r00r00         [24] 3867 	lcall	_putchar
      0013BB 0F               [12] 3868 	inc	r7
                                   3869 ;	calc.c:200: if (!stack_peek(ctx->ss, &d0)) printstr("\r\nsecondary stack underflow\r\n");
      0013BC BF 00 E4         [24] 3870 	cjne	r7,#0x00,00414$
      0013BF 0E               [12] 3871 	inc	r6
      0013C0 80 E1            [24] 3872 	sjmp	00414$
      0013C2                       3873 00143$:
                                   3874 ;	calc.c:201: else if (!stack_push(ctx->ps, d0)) printstr("\r\nstack overflow\r\n");
      0013C2 E5*00            [12] 3875 	mov	a,_bp
      0013C4 24 12            [12] 3876 	add	a,#0x12
      0013C6 F8               [12] 3877 	mov	r0,a
      0013C7 74 11            [12] 3878 	mov	a,#0x11
      0013C9 26               [12] 3879 	add	a,@r0
      0013CA FA               [12] 3880 	mov	r2,a
      0013CB 74 40            [12] 3881 	mov	a,#0x40
      0013CD 08               [12] 3882 	inc	r0
      0013CE 36               [12] 3883 	addc	a,@r0
      0013CF FB               [12] 3884 	mov	r3,a
      0013D0 08               [12] 3885 	inc	r0
      0013D1 86 04            [24] 3886 	mov	ar4,@r0
      0013D3 8A 82            [24] 3887 	mov	dpl,r2
      0013D5 8B 83            [24] 3888 	mov	dph,r3
      0013D7 8C F0            [24] 3889 	mov	b,r4
      0013D9 12r00r00         [24] 3890 	lcall	__gptrget
      0013DC FA               [12] 3891 	mov	r2,a
      0013DD A3               [24] 3892 	inc	dptr
      0013DE 12r00r00         [24] 3893 	lcall	__gptrget
      0013E1 FB               [12] 3894 	mov	r3,a
      0013E2 A3               [24] 3895 	inc	dptr
      0013E3 12r00r00         [24] 3896 	lcall	__gptrget
      0013E6 FC               [12] 3897 	mov	r4,a
      0013E7 E5*00            [12] 3898 	mov	a,_bp
      0013E9 24 15            [12] 3899 	add	a,#0x15
      0013EB F8               [12] 3900 	mov	r0,a
      0013EC E6               [12] 3901 	mov	a,@r0
      0013ED C0 E0            [24] 3902 	push	acc
      0013EF 08               [12] 3903 	inc	r0
      0013F0 E6               [12] 3904 	mov	a,@r0
      0013F1 C0 E0            [24] 3905 	push	acc
      0013F3 08               [12] 3906 	inc	r0
      0013F4 E6               [12] 3907 	mov	a,@r0
      0013F5 C0 E0            [24] 3908 	push	acc
      0013F7 08               [12] 3909 	inc	r0
      0013F8 E6               [12] 3910 	mov	a,@r0
      0013F9 C0 E0            [24] 3911 	push	acc
      0013FB 8A 82            [24] 3912 	mov	dpl,r2
      0013FD 8B 83            [24] 3913 	mov	dph,r3
      0013FF 8C F0            [24] 3914 	mov	b,r4
      001401 12r00r00         [24] 3915 	lcall	_stack_push
      001404 AB 82            [24] 3916 	mov	r3,dpl
      001406 AC 83            [24] 3917 	mov	r4,dph
      001408 E5 81            [12] 3918 	mov	a,sp
      00140A 24 FC            [12] 3919 	add	a,#0xfc
      00140C F5 81            [12] 3920 	mov	sp,a
      00140E EB               [12] 3921 	mov	a,r3
      00140F 4C               [12] 3922 	orl	a,r4
      001410 60 03            [24] 3923 	jz	01316$
      001412 02r2BrA3         [24] 3924 	ljmp	00249$
      001415                       3925 01316$:
      001415 7Fr9D            [12] 3926 	mov	r7,#___str_13
      001417 7Es00            [12] 3927 	mov	r6,#(___str_13 >> 8)
      001419 7D 80            [12] 3928 	mov	r5,#0x80
                                   3929 ;	calc.c:58: return;
      00141B                       3930 00417$:
                                   3931 ;	calc.c:56: for (; *s; s++) putchar(*s);
      00141B 8F 82            [24] 3932 	mov	dpl,r7
      00141D 8E 83            [24] 3933 	mov	dph,r6
      00141F 8D F0            [24] 3934 	mov	b,r5
      001421 12r00r00         [24] 3935 	lcall	__gptrget
      001424 FC               [12] 3936 	mov	r4,a
      001425 70 03            [24] 3937 	jnz	01317$
      001427 02r2BrA3         [24] 3938 	ljmp	00249$
      00142A                       3939 01317$:
      00142A 7B 00            [12] 3940 	mov	r3,#0x00
      00142C 8C 82            [24] 3941 	mov	dpl,r4
      00142E 8B 83            [24] 3942 	mov	dph,r3
      001430 12r00r00         [24] 3943 	lcall	_putchar
      001433 0F               [12] 3944 	inc	r7
                                   3945 ;	calc.c:203: case 'T':
      001434 BF 00 E4         [24] 3946 	cjne	r7,#0x00,00417$
      001437 0E               [12] 3947 	inc	r6
      001438 80 E1            [24] 3948 	sjmp	00417$
      00143A                       3949 00145$:
                                   3950 ;	calc.c:204: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      00143A E5*00            [12] 3951 	mov	a,_bp
      00143C 24 15            [12] 3952 	add	a,#0x15
      00143E FF               [12] 3953 	mov	r7,a
      00143F 7E 00            [12] 3954 	mov	r6,#0x00
      001441 7D 40            [12] 3955 	mov	r5,#0x40
      001443 E5*00            [12] 3956 	mov	a,_bp
      001445 24 12            [12] 3957 	add	a,#0x12
      001447 F8               [12] 3958 	mov	r0,a
      001448 E5*00            [12] 3959 	mov	a,_bp
      00144A 24 07            [12] 3960 	add	a,#0x07
      00144C F9               [12] 3961 	mov	r1,a
      00144D 74 11            [12] 3962 	mov	a,#0x11
      00144F 26               [12] 3963 	add	a,@r0
      001450 F7               [12] 3964 	mov	@r1,a
      001451 74 40            [12] 3965 	mov	a,#0x40
      001453 08               [12] 3966 	inc	r0
      001454 36               [12] 3967 	addc	a,@r0
      001455 09               [12] 3968 	inc	r1
      001456 F7               [12] 3969 	mov	@r1,a
      001457 08               [12] 3970 	inc	r0
      001458 09               [12] 3971 	inc	r1
      001459 E6               [12] 3972 	mov	a,@r0
      00145A F7               [12] 3973 	mov	@r1,a
      00145B E5*00            [12] 3974 	mov	a,_bp
      00145D 24 07            [12] 3975 	add	a,#0x07
      00145F F8               [12] 3976 	mov	r0,a
      001460 86 82            [24] 3977 	mov	dpl,@r0
      001462 08               [12] 3978 	inc	r0
      001463 86 83            [24] 3979 	mov	dph,@r0
      001465 08               [12] 3980 	inc	r0
      001466 86 F0            [24] 3981 	mov	b,@r0
      001468 12r00r00         [24] 3982 	lcall	__gptrget
      00146B FA               [12] 3983 	mov	r2,a
      00146C A3               [24] 3984 	inc	dptr
      00146D 12r00r00         [24] 3985 	lcall	__gptrget
      001470 FB               [12] 3986 	mov	r3,a
      001471 A3               [24] 3987 	inc	dptr
      001472 12r00r00         [24] 3988 	lcall	__gptrget
      001475 FC               [12] 3989 	mov	r4,a
      001476 C0 07            [24] 3990 	push	ar7
      001478 C0 06            [24] 3991 	push	ar6
      00147A C0 05            [24] 3992 	push	ar5
      00147C 8A 82            [24] 3993 	mov	dpl,r2
      00147E 8B 83            [24] 3994 	mov	dph,r3
      001480 8C F0            [24] 3995 	mov	b,r4
      001482 12r00r00         [24] 3996 	lcall	_stack_pop
      001485 AB 82            [24] 3997 	mov	r3,dpl
      001487 AC 83            [24] 3998 	mov	r4,dph
      001489 15 81            [12] 3999 	dec	sp
      00148B 15 81            [12] 4000 	dec	sp
      00148D 15 81            [12] 4001 	dec	sp
      00148F EB               [12] 4002 	mov	a,r3
      001490 4C               [12] 4003 	orl	a,r4
      001491 70 25            [24] 4004 	jnz	00150$
      001493 7Fr4E            [12] 4005 	mov	r7,#___str_10
      001495 7Es00            [12] 4006 	mov	r6,#(___str_10 >> 8)
      001497 7D 80            [12] 4007 	mov	r5,#0x80
                                   4008 ;	calc.c:58: return;
      001499                       4009 00420$:
                                   4010 ;	calc.c:56: for (; *s; s++) putchar(*s);
      001499 8F 82            [24] 4011 	mov	dpl,r7
      00149B 8E 83            [24] 4012 	mov	dph,r6
      00149D 8D F0            [24] 4013 	mov	b,r5
      00149F 12r00r00         [24] 4014 	lcall	__gptrget
      0014A2 FC               [12] 4015 	mov	r4,a
      0014A3 70 03            [24] 4016 	jnz	01320$
      0014A5 02r2BrA3         [24] 4017 	ljmp	00249$
      0014A8                       4018 01320$:
      0014A8 7B 00            [12] 4019 	mov	r3,#0x00
      0014AA 8C 82            [24] 4020 	mov	dpl,r4
      0014AC 8B 83            [24] 4021 	mov	dph,r3
      0014AE 12r00r00         [24] 4022 	lcall	_putchar
      0014B1 0F               [12] 4023 	inc	r7
                                   4024 ;	calc.c:204: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      0014B2 BF 00 E4         [24] 4025 	cjne	r7,#0x00,00420$
      0014B5 0E               [12] 4026 	inc	r6
      0014B6 80 E1            [24] 4027 	sjmp	00420$
      0014B8                       4028 00150$:
                                   4029 ;	calc.c:206: if (!stack_pop(ctx->ss, &d1)) {
      0014B8 E5*00            [12] 4030 	mov	a,_bp
      0014BA 24 19            [12] 4031 	add	a,#0x19
      0014BC FF               [12] 4032 	mov	r7,a
      0014BD 7E 00            [12] 4033 	mov	r6,#0x00
      0014BF 7D 40            [12] 4034 	mov	r5,#0x40
      0014C1 E5*00            [12] 4035 	mov	a,_bp
      0014C3 24 12            [12] 4036 	add	a,#0x12
      0014C5 F8               [12] 4037 	mov	r0,a
      0014C6 E5*00            [12] 4038 	mov	a,_bp
      0014C8 24 04            [12] 4039 	add	a,#0x04
      0014CA F9               [12] 4040 	mov	r1,a
      0014CB 74 14            [12] 4041 	mov	a,#0x14
      0014CD 26               [12] 4042 	add	a,@r0
      0014CE F7               [12] 4043 	mov	@r1,a
      0014CF 74 40            [12] 4044 	mov	a,#0x40
      0014D1 08               [12] 4045 	inc	r0
      0014D2 36               [12] 4046 	addc	a,@r0
      0014D3 09               [12] 4047 	inc	r1
      0014D4 F7               [12] 4048 	mov	@r1,a
      0014D5 08               [12] 4049 	inc	r0
      0014D6 09               [12] 4050 	inc	r1
      0014D7 E6               [12] 4051 	mov	a,@r0
      0014D8 F7               [12] 4052 	mov	@r1,a
      0014D9 E5*00            [12] 4053 	mov	a,_bp
      0014DB 24 04            [12] 4054 	add	a,#0x04
      0014DD F8               [12] 4055 	mov	r0,a
      0014DE 86 82            [24] 4056 	mov	dpl,@r0
      0014E0 08               [12] 4057 	inc	r0
      0014E1 86 83            [24] 4058 	mov	dph,@r0
      0014E3 08               [12] 4059 	inc	r0
      0014E4 86 F0            [24] 4060 	mov	b,@r0
      0014E6 12r00r00         [24] 4061 	lcall	__gptrget
      0014E9 FA               [12] 4062 	mov	r2,a
      0014EA A3               [24] 4063 	inc	dptr
      0014EB 12r00r00         [24] 4064 	lcall	__gptrget
      0014EE FB               [12] 4065 	mov	r3,a
      0014EF A3               [24] 4066 	inc	dptr
      0014F0 12r00r00         [24] 4067 	lcall	__gptrget
      0014F3 FC               [12] 4068 	mov	r4,a
      0014F4 C0 07            [24] 4069 	push	ar7
      0014F6 C0 06            [24] 4070 	push	ar6
      0014F8 C0 05            [24] 4071 	push	ar5
      0014FA 8A 82            [24] 4072 	mov	dpl,r2
      0014FC 8B 83            [24] 4073 	mov	dph,r3
      0014FE 8C F0            [24] 4074 	mov	b,r4
      001500 12r00r00         [24] 4075 	lcall	_stack_pop
      001503 AB 82            [24] 4076 	mov	r3,dpl
      001505 AC 83            [24] 4077 	mov	r4,dph
      001507 15 81            [12] 4078 	dec	sp
      001509 15 81            [12] 4079 	dec	sp
      00150B 15 81            [12] 4080 	dec	sp
      00150D EB               [12] 4081 	mov	a,r3
      00150E 4C               [12] 4082 	orl	a,r4
      00150F 70 63            [24] 4083 	jnz	00147$
                                   4084 ;	calc.c:207: printstr("\r\nsecondary stack underflow\r\n");
      001511 7Fr7F            [12] 4085 	mov	r7,#___str_12
      001513 7Es00            [12] 4086 	mov	r6,#(___str_12 >> 8)
      001515 7D 80            [12] 4087 	mov	r5,#0x80
                                   4088 ;	calc.c:58: return;
      001517                       4089 00423$:
                                   4090 ;	calc.c:56: for (; *s; s++) putchar(*s);
      001517 8F 82            [24] 4091 	mov	dpl,r7
      001519 8E 83            [24] 4092 	mov	dph,r6
      00151B 8D F0            [24] 4093 	mov	b,r5
      00151D 12r00r00         [24] 4094 	lcall	__gptrget
      001520 FC               [12] 4095 	mov	r4,a
      001521 60 10            [24] 4096 	jz	00301$
      001523 7B 00            [12] 4097 	mov	r3,#0x00
      001525 8C 82            [24] 4098 	mov	dpl,r4
      001527 8B 83            [24] 4099 	mov	dph,r3
      001529 12r00r00         [24] 4100 	lcall	_putchar
      00152C 0F               [12] 4101 	inc	r7
                                   4102 ;	calc.c:207: printstr("\r\nsecondary stack underflow\r\n");
      00152D BF 00 E7         [24] 4103 	cjne	r7,#0x00,00423$
      001530 0E               [12] 4104 	inc	r6
      001531 80 E4            [24] 4105 	sjmp	00423$
      001533                       4106 00301$:
                                   4107 ;	calc.c:208: (void)stack_push(ctx->ps, d0);
      001533 E5*00            [12] 4108 	mov	a,_bp
      001535 24 07            [12] 4109 	add	a,#0x07
      001537 F8               [12] 4110 	mov	r0,a
      001538 86 82            [24] 4111 	mov	dpl,@r0
      00153A 08               [12] 4112 	inc	r0
      00153B 86 83            [24] 4113 	mov	dph,@r0
      00153D 08               [12] 4114 	inc	r0
      00153E 86 F0            [24] 4115 	mov	b,@r0
      001540 12r00r00         [24] 4116 	lcall	__gptrget
      001543 FA               [12] 4117 	mov	r2,a
      001544 A3               [24] 4118 	inc	dptr
      001545 12r00r00         [24] 4119 	lcall	__gptrget
      001548 FB               [12] 4120 	mov	r3,a
      001549 A3               [24] 4121 	inc	dptr
      00154A 12r00r00         [24] 4122 	lcall	__gptrget
      00154D FC               [12] 4123 	mov	r4,a
      00154E E5*00            [12] 4124 	mov	a,_bp
      001550 24 15            [12] 4125 	add	a,#0x15
      001552 F8               [12] 4126 	mov	r0,a
      001553 E6               [12] 4127 	mov	a,@r0
      001554 C0 E0            [24] 4128 	push	acc
      001556 08               [12] 4129 	inc	r0
      001557 E6               [12] 4130 	mov	a,@r0
      001558 C0 E0            [24] 4131 	push	acc
      00155A 08               [12] 4132 	inc	r0
      00155B E6               [12] 4133 	mov	a,@r0
      00155C C0 E0            [24] 4134 	push	acc
      00155E 08               [12] 4135 	inc	r0
      00155F E6               [12] 4136 	mov	a,@r0
      001560 C0 E0            [24] 4137 	push	acc
      001562 8A 82            [24] 4138 	mov	dpl,r2
      001564 8B 83            [24] 4139 	mov	dph,r3
      001566 8C F0            [24] 4140 	mov	b,r4
      001568 12r00r00         [24] 4141 	lcall	_stack_push
      00156B E5 81            [12] 4142 	mov	a,sp
      00156D 24 FC            [12] 4143 	add	a,#0xfc
      00156F F5 81            [12] 4144 	mov	sp,a
      001571 02r2BrA3         [24] 4145 	ljmp	00249$
      001574                       4146 00147$:
                                   4147 ;	calc.c:210: (void)stack_push(ctx->ps, d1);
      001574 E5*00            [12] 4148 	mov	a,_bp
      001576 24 07            [12] 4149 	add	a,#0x07
      001578 F8               [12] 4150 	mov	r0,a
      001579 86 82            [24] 4151 	mov	dpl,@r0
      00157B 08               [12] 4152 	inc	r0
      00157C 86 83            [24] 4153 	mov	dph,@r0
      00157E 08               [12] 4154 	inc	r0
      00157F 86 F0            [24] 4155 	mov	b,@r0
      001581 12r00r00         [24] 4156 	lcall	__gptrget
      001584 FA               [12] 4157 	mov	r2,a
      001585 A3               [24] 4158 	inc	dptr
      001586 12r00r00         [24] 4159 	lcall	__gptrget
      001589 FB               [12] 4160 	mov	r3,a
      00158A A3               [24] 4161 	inc	dptr
      00158B 12r00r00         [24] 4162 	lcall	__gptrget
      00158E FC               [12] 4163 	mov	r4,a
      00158F E5*00            [12] 4164 	mov	a,_bp
      001591 24 19            [12] 4165 	add	a,#0x19
      001593 F8               [12] 4166 	mov	r0,a
      001594 E6               [12] 4167 	mov	a,@r0
      001595 C0 E0            [24] 4168 	push	acc
      001597 08               [12] 4169 	inc	r0
      001598 E6               [12] 4170 	mov	a,@r0
      001599 C0 E0            [24] 4171 	push	acc
      00159B 08               [12] 4172 	inc	r0
      00159C E6               [12] 4173 	mov	a,@r0
      00159D C0 E0            [24] 4174 	push	acc
      00159F 08               [12] 4175 	inc	r0
      0015A0 E6               [12] 4176 	mov	a,@r0
      0015A1 C0 E0            [24] 4177 	push	acc
      0015A3 8A 82            [24] 4178 	mov	dpl,r2
      0015A5 8B 83            [24] 4179 	mov	dph,r3
      0015A7 8C F0            [24] 4180 	mov	b,r4
      0015A9 12r00r00         [24] 4181 	lcall	_stack_push
      0015AC E5 81            [12] 4182 	mov	a,sp
      0015AE 24 FC            [12] 4183 	add	a,#0xfc
      0015B0 F5 81            [12] 4184 	mov	sp,a
                                   4185 ;	calc.c:211: (void)stack_push(ctx->ss, d0);
      0015B2 E5*00            [12] 4186 	mov	a,_bp
      0015B4 24 04            [12] 4187 	add	a,#0x04
      0015B6 F8               [12] 4188 	mov	r0,a
      0015B7 86 82            [24] 4189 	mov	dpl,@r0
      0015B9 08               [12] 4190 	inc	r0
      0015BA 86 83            [24] 4191 	mov	dph,@r0
      0015BC 08               [12] 4192 	inc	r0
      0015BD 86 F0            [24] 4193 	mov	b,@r0
      0015BF 12r00r00         [24] 4194 	lcall	__gptrget
      0015C2 FA               [12] 4195 	mov	r2,a
      0015C3 A3               [24] 4196 	inc	dptr
      0015C4 12r00r00         [24] 4197 	lcall	__gptrget
      0015C7 FB               [12] 4198 	mov	r3,a
      0015C8 A3               [24] 4199 	inc	dptr
      0015C9 12r00r00         [24] 4200 	lcall	__gptrget
      0015CC FC               [12] 4201 	mov	r4,a
      0015CD E5*00            [12] 4202 	mov	a,_bp
      0015CF 24 15            [12] 4203 	add	a,#0x15
      0015D1 F8               [12] 4204 	mov	r0,a
      0015D2 E6               [12] 4205 	mov	a,@r0
      0015D3 C0 E0            [24] 4206 	push	acc
      0015D5 08               [12] 4207 	inc	r0
      0015D6 E6               [12] 4208 	mov	a,@r0
      0015D7 C0 E0            [24] 4209 	push	acc
      0015D9 08               [12] 4210 	inc	r0
      0015DA E6               [12] 4211 	mov	a,@r0
      0015DB C0 E0            [24] 4212 	push	acc
      0015DD 08               [12] 4213 	inc	r0
      0015DE E6               [12] 4214 	mov	a,@r0
      0015DF C0 E0            [24] 4215 	push	acc
      0015E1 8A 82            [24] 4216 	mov	dpl,r2
      0015E3 8B 83            [24] 4217 	mov	dph,r3
      0015E5 8C F0            [24] 4218 	mov	b,r4
      0015E7 12r00r00         [24] 4219 	lcall	_stack_push
      0015EA E5 81            [12] 4220 	mov	a,sp
      0015EC 24 FC            [12] 4221 	add	a,#0xfc
      0015EE F5 81            [12] 4222 	mov	sp,a
                                   4223 ;	calc.c:214: break;
      0015F0 02r2BrA3         [24] 4224 	ljmp	00249$
                                   4225 ;	calc.c:215: case 'X':
      0015F3                       4226 00152$:
                                   4227 ;	calc.c:216: t0 = ctx->ps;
      0015F3 E5*00            [12] 4228 	mov	a,_bp
      0015F5 24 12            [12] 4229 	add	a,#0x12
      0015F7 F8               [12] 4230 	mov	r0,a
      0015F8 E5*00            [12] 4231 	mov	a,_bp
      0015FA 24 0B            [12] 4232 	add	a,#0x0b
      0015FC F9               [12] 4233 	mov	r1,a
      0015FD 74 11            [12] 4234 	mov	a,#0x11
      0015FF 26               [12] 4235 	add	a,@r0
      001600 F7               [12] 4236 	mov	@r1,a
      001601 74 40            [12] 4237 	mov	a,#0x40
      001603 08               [12] 4238 	inc	r0
      001604 36               [12] 4239 	addc	a,@r0
      001605 09               [12] 4240 	inc	r1
      001606 F7               [12] 4241 	mov	@r1,a
      001607 08               [12] 4242 	inc	r0
      001608 09               [12] 4243 	inc	r1
      001609 E6               [12] 4244 	mov	a,@r0
      00160A F7               [12] 4245 	mov	@r1,a
      00160B E5*00            [12] 4246 	mov	a,_bp
      00160D 24 0B            [12] 4247 	add	a,#0x0b
      00160F F8               [12] 4248 	mov	r0,a
      001610 86 82            [24] 4249 	mov	dpl,@r0
      001612 08               [12] 4250 	inc	r0
      001613 86 83            [24] 4251 	mov	dph,@r0
      001615 08               [12] 4252 	inc	r0
      001616 86 F0            [24] 4253 	mov	b,@r0
      001618 12r00r00         [24] 4254 	lcall	__gptrget
      00161B FF               [12] 4255 	mov	r7,a
      00161C A3               [24] 4256 	inc	dptr
      00161D 12r00r00         [24] 4257 	lcall	__gptrget
      001620 FE               [12] 4258 	mov	r6,a
      001621 A3               [24] 4259 	inc	dptr
      001622 12r00r00         [24] 4260 	lcall	__gptrget
      001625 FD               [12] 4261 	mov	r5,a
                                   4262 ;	calc.c:217: ctx->ps = ctx->ss;
      001626 E5*00            [12] 4263 	mov	a,_bp
      001628 24 12            [12] 4264 	add	a,#0x12
      00162A F8               [12] 4265 	mov	r0,a
      00162B E5*00            [12] 4266 	mov	a,_bp
      00162D 24 07            [12] 4267 	add	a,#0x07
      00162F F9               [12] 4268 	mov	r1,a
      001630 74 14            [12] 4269 	mov	a,#0x14
      001632 26               [12] 4270 	add	a,@r0
      001633 F7               [12] 4271 	mov	@r1,a
      001634 74 40            [12] 4272 	mov	a,#0x40
      001636 08               [12] 4273 	inc	r0
      001637 36               [12] 4274 	addc	a,@r0
      001638 09               [12] 4275 	inc	r1
      001639 F7               [12] 4276 	mov	@r1,a
      00163A 08               [12] 4277 	inc	r0
      00163B 09               [12] 4278 	inc	r1
      00163C E6               [12] 4279 	mov	a,@r0
      00163D F7               [12] 4280 	mov	@r1,a
      00163E E5*00            [12] 4281 	mov	a,_bp
      001640 24 07            [12] 4282 	add	a,#0x07
      001642 F8               [12] 4283 	mov	r0,a
      001643 86 82            [24] 4284 	mov	dpl,@r0
      001645 08               [12] 4285 	inc	r0
      001646 86 83            [24] 4286 	mov	dph,@r0
      001648 08               [12] 4287 	inc	r0
      001649 86 F0            [24] 4288 	mov	b,@r0
      00164B 12r00r00         [24] 4289 	lcall	__gptrget
      00164E FA               [12] 4290 	mov	r2,a
      00164F A3               [24] 4291 	inc	dptr
      001650 12r00r00         [24] 4292 	lcall	__gptrget
      001653 FB               [12] 4293 	mov	r3,a
      001654 A3               [24] 4294 	inc	dptr
      001655 12r00r00         [24] 4295 	lcall	__gptrget
      001658 FC               [12] 4296 	mov	r4,a
      001659 E5*00            [12] 4297 	mov	a,_bp
      00165B 24 0B            [12] 4298 	add	a,#0x0b
      00165D F8               [12] 4299 	mov	r0,a
      00165E 86 82            [24] 4300 	mov	dpl,@r0
      001660 08               [12] 4301 	inc	r0
      001661 86 83            [24] 4302 	mov	dph,@r0
      001663 08               [12] 4303 	inc	r0
      001664 86 F0            [24] 4304 	mov	b,@r0
      001666 EA               [12] 4305 	mov	a,r2
      001667 12r00r00         [24] 4306 	lcall	__gptrput
      00166A A3               [24] 4307 	inc	dptr
      00166B EB               [12] 4308 	mov	a,r3
      00166C 12r00r00         [24] 4309 	lcall	__gptrput
      00166F A3               [24] 4310 	inc	dptr
      001670 EC               [12] 4311 	mov	a,r4
      001671 12r00r00         [24] 4312 	lcall	__gptrput
                                   4313 ;	calc.c:218: ctx->ss = t0;
      001674 E5*00            [12] 4314 	mov	a,_bp
      001676 24 07            [12] 4315 	add	a,#0x07
      001678 F8               [12] 4316 	mov	r0,a
      001679 86 82            [24] 4317 	mov	dpl,@r0
      00167B 08               [12] 4318 	inc	r0
      00167C 86 83            [24] 4319 	mov	dph,@r0
      00167E 08               [12] 4320 	inc	r0
      00167F 86 F0            [24] 4321 	mov	b,@r0
      001681 EF               [12] 4322 	mov	a,r7
      001682 12r00r00         [24] 4323 	lcall	__gptrput
      001685 A3               [24] 4324 	inc	dptr
      001686 EE               [12] 4325 	mov	a,r6
      001687 12r00r00         [24] 4326 	lcall	__gptrput
      00168A A3               [24] 4327 	inc	dptr
      00168B ED               [12] 4328 	mov	a,r5
      00168C 12r00r00         [24] 4329 	lcall	__gptrput
                                   4330 ;	calc.c:219: break;
      00168F 02r2BrA3         [24] 4331 	ljmp	00249$
                                   4332 ;	calc.c:220: case '+':
      001692                       4333 00153$:
                                   4334 ;	calc.c:221: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      001692 E5*00            [12] 4335 	mov	a,_bp
      001694 24 15            [12] 4336 	add	a,#0x15
      001696 FF               [12] 4337 	mov	r7,a
      001697 7E 00            [12] 4338 	mov	r6,#0x00
      001699 7D 40            [12] 4339 	mov	r5,#0x40
      00169B E5*00            [12] 4340 	mov	a,_bp
      00169D 24 12            [12] 4341 	add	a,#0x12
      00169F F8               [12] 4342 	mov	r0,a
      0016A0 E5*00            [12] 4343 	mov	a,_bp
      0016A2 24 0B            [12] 4344 	add	a,#0x0b
      0016A4 F9               [12] 4345 	mov	r1,a
      0016A5 74 11            [12] 4346 	mov	a,#0x11
      0016A7 26               [12] 4347 	add	a,@r0
      0016A8 F7               [12] 4348 	mov	@r1,a
      0016A9 74 40            [12] 4349 	mov	a,#0x40
      0016AB 08               [12] 4350 	inc	r0
      0016AC 36               [12] 4351 	addc	a,@r0
      0016AD 09               [12] 4352 	inc	r1
      0016AE F7               [12] 4353 	mov	@r1,a
      0016AF 08               [12] 4354 	inc	r0
      0016B0 09               [12] 4355 	inc	r1
      0016B1 E6               [12] 4356 	mov	a,@r0
      0016B2 F7               [12] 4357 	mov	@r1,a
      0016B3 E5*00            [12] 4358 	mov	a,_bp
      0016B5 24 0B            [12] 4359 	add	a,#0x0b
      0016B7 F8               [12] 4360 	mov	r0,a
      0016B8 86 82            [24] 4361 	mov	dpl,@r0
      0016BA 08               [12] 4362 	inc	r0
      0016BB 86 83            [24] 4363 	mov	dph,@r0
      0016BD 08               [12] 4364 	inc	r0
      0016BE 86 F0            [24] 4365 	mov	b,@r0
      0016C0 12r00r00         [24] 4366 	lcall	__gptrget
      0016C3 FA               [12] 4367 	mov	r2,a
      0016C4 A3               [24] 4368 	inc	dptr
      0016C5 12r00r00         [24] 4369 	lcall	__gptrget
      0016C8 FB               [12] 4370 	mov	r3,a
      0016C9 A3               [24] 4371 	inc	dptr
      0016CA 12r00r00         [24] 4372 	lcall	__gptrget
      0016CD FC               [12] 4373 	mov	r4,a
      0016CE C0 07            [24] 4374 	push	ar7
      0016D0 C0 06            [24] 4375 	push	ar6
      0016D2 C0 05            [24] 4376 	push	ar5
      0016D4 8A 82            [24] 4377 	mov	dpl,r2
      0016D6 8B 83            [24] 4378 	mov	dph,r3
      0016D8 8C F0            [24] 4379 	mov	b,r4
      0016DA 12r00r00         [24] 4380 	lcall	_stack_pop
      0016DD AB 82            [24] 4381 	mov	r3,dpl
      0016DF AC 83            [24] 4382 	mov	r4,dph
      0016E1 15 81            [12] 4383 	dec	sp
      0016E3 15 81            [12] 4384 	dec	sp
      0016E5 15 81            [12] 4385 	dec	sp
      0016E7 EB               [12] 4386 	mov	a,r3
      0016E8 4C               [12] 4387 	orl	a,r4
      0016E9 70 25            [24] 4388 	jnz	00158$
      0016EB 7Fr4E            [12] 4389 	mov	r7,#___str_10
      0016ED 7Es00            [12] 4390 	mov	r6,#(___str_10 >> 8)
      0016EF 7D 80            [12] 4391 	mov	r5,#0x80
                                   4392 ;	calc.c:58: return;
      0016F1                       4393 00426$:
                                   4394 ;	calc.c:56: for (; *s; s++) putchar(*s);
      0016F1 8F 82            [24] 4395 	mov	dpl,r7
      0016F3 8E 83            [24] 4396 	mov	dph,r6
      0016F5 8D F0            [24] 4397 	mov	b,r5
      0016F7 12r00r00         [24] 4398 	lcall	__gptrget
      0016FA FC               [12] 4399 	mov	r4,a
      0016FB 70 03            [24] 4400 	jnz	01326$
      0016FD 02r2BrA3         [24] 4401 	ljmp	00249$
      001700                       4402 01326$:
      001700 7B 00            [12] 4403 	mov	r3,#0x00
      001702 8C 82            [24] 4404 	mov	dpl,r4
      001704 8B 83            [24] 4405 	mov	dph,r3
      001706 12r00r00         [24] 4406 	lcall	_putchar
      001709 0F               [12] 4407 	inc	r7
                                   4408 ;	calc.c:221: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      00170A BF 00 E4         [24] 4409 	cjne	r7,#0x00,00426$
      00170D 0E               [12] 4410 	inc	r6
      00170E 80 E1            [24] 4411 	sjmp	00426$
      001710                       4412 00158$:
                                   4413 ;	calc.c:222: else if (!stack_pop(ctx->ps, &d1)) {
      001710 E5*00            [12] 4414 	mov	a,_bp
      001712 24 19            [12] 4415 	add	a,#0x19
      001714 FF               [12] 4416 	mov	r7,a
      001715 7E 00            [12] 4417 	mov	r6,#0x00
      001717 7D 40            [12] 4418 	mov	r5,#0x40
      001719 E5*00            [12] 4419 	mov	a,_bp
      00171B 24 0B            [12] 4420 	add	a,#0x0b
      00171D F8               [12] 4421 	mov	r0,a
      00171E 86 82            [24] 4422 	mov	dpl,@r0
      001720 08               [12] 4423 	inc	r0
      001721 86 83            [24] 4424 	mov	dph,@r0
      001723 08               [12] 4425 	inc	r0
      001724 86 F0            [24] 4426 	mov	b,@r0
      001726 12r00r00         [24] 4427 	lcall	__gptrget
      001729 FA               [12] 4428 	mov	r2,a
      00172A A3               [24] 4429 	inc	dptr
      00172B 12r00r00         [24] 4430 	lcall	__gptrget
      00172E FB               [12] 4431 	mov	r3,a
      00172F A3               [24] 4432 	inc	dptr
      001730 12r00r00         [24] 4433 	lcall	__gptrget
      001733 FC               [12] 4434 	mov	r4,a
      001734 C0 07            [24] 4435 	push	ar7
      001736 C0 06            [24] 4436 	push	ar6
      001738 C0 05            [24] 4437 	push	ar5
      00173A 8A 82            [24] 4438 	mov	dpl,r2
      00173C 8B 83            [24] 4439 	mov	dph,r3
      00173E 8C F0            [24] 4440 	mov	b,r4
      001740 12r00r00         [24] 4441 	lcall	_stack_pop
      001743 AB 82            [24] 4442 	mov	r3,dpl
      001745 AC 83            [24] 4443 	mov	r4,dph
      001747 15 81            [12] 4444 	dec	sp
      001749 15 81            [12] 4445 	dec	sp
      00174B 15 81            [12] 4446 	dec	sp
      00174D EB               [12] 4447 	mov	a,r3
      00174E 4C               [12] 4448 	orl	a,r4
      00174F 70 63            [24] 4449 	jnz	00155$
                                   4450 ;	calc.c:223: (void)stack_push(ctx->ps, d0);
      001751 E5*00            [12] 4451 	mov	a,_bp
      001753 24 0B            [12] 4452 	add	a,#0x0b
      001755 F8               [12] 4453 	mov	r0,a
      001756 86 82            [24] 4454 	mov	dpl,@r0
      001758 08               [12] 4455 	inc	r0
      001759 86 83            [24] 4456 	mov	dph,@r0
      00175B 08               [12] 4457 	inc	r0
      00175C 86 F0            [24] 4458 	mov	b,@r0
      00175E 12r00r00         [24] 4459 	lcall	__gptrget
      001761 FA               [12] 4460 	mov	r2,a
      001762 A3               [24] 4461 	inc	dptr
      001763 12r00r00         [24] 4462 	lcall	__gptrget
      001766 FB               [12] 4463 	mov	r3,a
      001767 A3               [24] 4464 	inc	dptr
      001768 12r00r00         [24] 4465 	lcall	__gptrget
      00176B FC               [12] 4466 	mov	r4,a
      00176C E5*00            [12] 4467 	mov	a,_bp
      00176E 24 15            [12] 4468 	add	a,#0x15
      001770 F8               [12] 4469 	mov	r0,a
      001771 E6               [12] 4470 	mov	a,@r0
      001772 C0 E0            [24] 4471 	push	acc
      001774 08               [12] 4472 	inc	r0
      001775 E6               [12] 4473 	mov	a,@r0
      001776 C0 E0            [24] 4474 	push	acc
      001778 08               [12] 4475 	inc	r0
      001779 E6               [12] 4476 	mov	a,@r0
      00177A C0 E0            [24] 4477 	push	acc
      00177C 08               [12] 4478 	inc	r0
      00177D E6               [12] 4479 	mov	a,@r0
      00177E C0 E0            [24] 4480 	push	acc
      001780 8A 82            [24] 4481 	mov	dpl,r2
      001782 8B 83            [24] 4482 	mov	dph,r3
      001784 8C F0            [24] 4483 	mov	b,r4
      001786 12r00r00         [24] 4484 	lcall	_stack_push
      001789 E5 81            [12] 4485 	mov	a,sp
      00178B 24 FC            [12] 4486 	add	a,#0xfc
      00178D F5 81            [12] 4487 	mov	sp,a
                                   4488 ;	calc.c:224: printstr("\r\nstack underflow\r\n");
      00178F 7Fr4E            [12] 4489 	mov	r7,#___str_10
      001791 7Es00            [12] 4490 	mov	r6,#(___str_10 >> 8)
      001793 7D 80            [12] 4491 	mov	r5,#0x80
                                   4492 ;	calc.c:58: return;
      001795                       4493 00429$:
                                   4494 ;	calc.c:56: for (; *s; s++) putchar(*s);
      001795 8F 82            [24] 4495 	mov	dpl,r7
      001797 8E 83            [24] 4496 	mov	dph,r6
      001799 8D F0            [24] 4497 	mov	b,r5
      00179B 12r00r00         [24] 4498 	lcall	__gptrget
      00179E FC               [12] 4499 	mov	r4,a
      00179F 70 03            [24] 4500 	jnz	01329$
      0017A1 02r2BrA3         [24] 4501 	ljmp	00249$
      0017A4                       4502 01329$:
      0017A4 7B 00            [12] 4503 	mov	r3,#0x00
      0017A6 8C 82            [24] 4504 	mov	dpl,r4
      0017A8 8B 83            [24] 4505 	mov	dph,r3
      0017AA 12r00r00         [24] 4506 	lcall	_putchar
      0017AD 0F               [12] 4507 	inc	r7
                                   4508 ;	calc.c:224: printstr("\r\nstack underflow\r\n");
      0017AE BF 00 E4         [24] 4509 	cjne	r7,#0x00,00429$
      0017B1 0E               [12] 4510 	inc	r6
      0017B2 80 E1            [24] 4511 	sjmp	00429$
      0017B4                       4512 00155$:
                                   4513 ;	calc.c:226: d1 += d0;
      0017B4 E5*00            [12] 4514 	mov	a,_bp
      0017B6 24 19            [12] 4515 	add	a,#0x19
      0017B8 F8               [12] 4516 	mov	r0,a
      0017B9 E5*00            [12] 4517 	mov	a,_bp
      0017BB 24 15            [12] 4518 	add	a,#0x15
      0017BD F9               [12] 4519 	mov	r1,a
      0017BE E7               [12] 4520 	mov	a,@r1
      0017BF 26               [12] 4521 	add	a,@r0
      0017C0 F6               [12] 4522 	mov	@r0,a
      0017C1 09               [12] 4523 	inc	r1
      0017C2 E7               [12] 4524 	mov	a,@r1
      0017C3 08               [12] 4525 	inc	r0
      0017C4 36               [12] 4526 	addc	a,@r0
      0017C5 F6               [12] 4527 	mov	@r0,a
      0017C6 09               [12] 4528 	inc	r1
      0017C7 E7               [12] 4529 	mov	a,@r1
      0017C8 08               [12] 4530 	inc	r0
      0017C9 36               [12] 4531 	addc	a,@r0
      0017CA F6               [12] 4532 	mov	@r0,a
      0017CB 09               [12] 4533 	inc	r1
      0017CC E7               [12] 4534 	mov	a,@r1
      0017CD 08               [12] 4535 	inc	r0
      0017CE 36               [12] 4536 	addc	a,@r0
      0017CF F6               [12] 4537 	mov	@r0,a
                                   4538 ;	calc.c:227: (void)stack_push(ctx->ps, d1);
      0017D0 E5*00            [12] 4539 	mov	a,_bp
      0017D2 24 0B            [12] 4540 	add	a,#0x0b
      0017D4 F8               [12] 4541 	mov	r0,a
      0017D5 86 82            [24] 4542 	mov	dpl,@r0
      0017D7 08               [12] 4543 	inc	r0
      0017D8 86 83            [24] 4544 	mov	dph,@r0
      0017DA 08               [12] 4545 	inc	r0
      0017DB 86 F0            [24] 4546 	mov	b,@r0
      0017DD 12r00r00         [24] 4547 	lcall	__gptrget
      0017E0 FA               [12] 4548 	mov	r2,a
      0017E1 A3               [24] 4549 	inc	dptr
      0017E2 12r00r00         [24] 4550 	lcall	__gptrget
      0017E5 FB               [12] 4551 	mov	r3,a
      0017E6 A3               [24] 4552 	inc	dptr
      0017E7 12r00r00         [24] 4553 	lcall	__gptrget
      0017EA FC               [12] 4554 	mov	r4,a
      0017EB E5*00            [12] 4555 	mov	a,_bp
      0017ED 24 19            [12] 4556 	add	a,#0x19
      0017EF F8               [12] 4557 	mov	r0,a
      0017F0 E6               [12] 4558 	mov	a,@r0
      0017F1 C0 E0            [24] 4559 	push	acc
      0017F3 08               [12] 4560 	inc	r0
      0017F4 E6               [12] 4561 	mov	a,@r0
      0017F5 C0 E0            [24] 4562 	push	acc
      0017F7 08               [12] 4563 	inc	r0
      0017F8 E6               [12] 4564 	mov	a,@r0
      0017F9 C0 E0            [24] 4565 	push	acc
      0017FB 08               [12] 4566 	inc	r0
      0017FC E6               [12] 4567 	mov	a,@r0
      0017FD C0 E0            [24] 4568 	push	acc
      0017FF 8A 82            [24] 4569 	mov	dpl,r2
      001801 8B 83            [24] 4570 	mov	dph,r3
      001803 8C F0            [24] 4571 	mov	b,r4
      001805 12r00r00         [24] 4572 	lcall	_stack_push
      001808 E5 81            [12] 4573 	mov	a,sp
      00180A 24 FC            [12] 4574 	add	a,#0xfc
      00180C F5 81            [12] 4575 	mov	sp,a
                                   4576 ;	calc.c:229: break;
      00180E 02r2BrA3         [24] 4577 	ljmp	00249$
                                   4578 ;	calc.c:230: case '-':
      001811                       4579 00160$:
                                   4580 ;	calc.c:231: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      001811 E5*00            [12] 4581 	mov	a,_bp
      001813 24 15            [12] 4582 	add	a,#0x15
      001815 FF               [12] 4583 	mov	r7,a
      001816 7E 00            [12] 4584 	mov	r6,#0x00
      001818 7D 40            [12] 4585 	mov	r5,#0x40
      00181A E5*00            [12] 4586 	mov	a,_bp
      00181C 24 12            [12] 4587 	add	a,#0x12
      00181E F8               [12] 4588 	mov	r0,a
      00181F E5*00            [12] 4589 	mov	a,_bp
      001821 24 0B            [12] 4590 	add	a,#0x0b
      001823 F9               [12] 4591 	mov	r1,a
      001824 74 11            [12] 4592 	mov	a,#0x11
      001826 26               [12] 4593 	add	a,@r0
      001827 F7               [12] 4594 	mov	@r1,a
      001828 74 40            [12] 4595 	mov	a,#0x40
      00182A 08               [12] 4596 	inc	r0
      00182B 36               [12] 4597 	addc	a,@r0
      00182C 09               [12] 4598 	inc	r1
      00182D F7               [12] 4599 	mov	@r1,a
      00182E 08               [12] 4600 	inc	r0
      00182F 09               [12] 4601 	inc	r1
      001830 E6               [12] 4602 	mov	a,@r0
      001831 F7               [12] 4603 	mov	@r1,a
      001832 E5*00            [12] 4604 	mov	a,_bp
      001834 24 0B            [12] 4605 	add	a,#0x0b
      001836 F8               [12] 4606 	mov	r0,a
      001837 86 82            [24] 4607 	mov	dpl,@r0
      001839 08               [12] 4608 	inc	r0
      00183A 86 83            [24] 4609 	mov	dph,@r0
      00183C 08               [12] 4610 	inc	r0
      00183D 86 F0            [24] 4611 	mov	b,@r0
      00183F 12r00r00         [24] 4612 	lcall	__gptrget
      001842 FA               [12] 4613 	mov	r2,a
      001843 A3               [24] 4614 	inc	dptr
      001844 12r00r00         [24] 4615 	lcall	__gptrget
      001847 FB               [12] 4616 	mov	r3,a
      001848 A3               [24] 4617 	inc	dptr
      001849 12r00r00         [24] 4618 	lcall	__gptrget
      00184C FC               [12] 4619 	mov	r4,a
      00184D C0 07            [24] 4620 	push	ar7
      00184F C0 06            [24] 4621 	push	ar6
      001851 C0 05            [24] 4622 	push	ar5
      001853 8A 82            [24] 4623 	mov	dpl,r2
      001855 8B 83            [24] 4624 	mov	dph,r3
      001857 8C F0            [24] 4625 	mov	b,r4
      001859 12r00r00         [24] 4626 	lcall	_stack_pop
      00185C AB 82            [24] 4627 	mov	r3,dpl
      00185E AC 83            [24] 4628 	mov	r4,dph
      001860 15 81            [12] 4629 	dec	sp
      001862 15 81            [12] 4630 	dec	sp
      001864 15 81            [12] 4631 	dec	sp
      001866 EB               [12] 4632 	mov	a,r3
      001867 4C               [12] 4633 	orl	a,r4
      001868 70 25            [24] 4634 	jnz	00165$
      00186A 7Fr4E            [12] 4635 	mov	r7,#___str_10
      00186C 7Es00            [12] 4636 	mov	r6,#(___str_10 >> 8)
      00186E 7D 80            [12] 4637 	mov	r5,#0x80
                                   4638 ;	calc.c:58: return;
      001870                       4639 00432$:
                                   4640 ;	calc.c:56: for (; *s; s++) putchar(*s);
      001870 8F 82            [24] 4641 	mov	dpl,r7
      001872 8E 83            [24] 4642 	mov	dph,r6
      001874 8D F0            [24] 4643 	mov	b,r5
      001876 12r00r00         [24] 4644 	lcall	__gptrget
      001879 FC               [12] 4645 	mov	r4,a
      00187A 70 03            [24] 4646 	jnz	01332$
      00187C 02r2BrA3         [24] 4647 	ljmp	00249$
      00187F                       4648 01332$:
      00187F 7B 00            [12] 4649 	mov	r3,#0x00
      001881 8C 82            [24] 4650 	mov	dpl,r4
      001883 8B 83            [24] 4651 	mov	dph,r3
      001885 12r00r00         [24] 4652 	lcall	_putchar
      001888 0F               [12] 4653 	inc	r7
                                   4654 ;	calc.c:231: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      001889 BF 00 E4         [24] 4655 	cjne	r7,#0x00,00432$
      00188C 0E               [12] 4656 	inc	r6
      00188D 80 E1            [24] 4657 	sjmp	00432$
      00188F                       4658 00165$:
                                   4659 ;	calc.c:232: else if (!stack_pop(ctx->ps, &d1)) {
      00188F E5*00            [12] 4660 	mov	a,_bp
      001891 24 19            [12] 4661 	add	a,#0x19
      001893 FF               [12] 4662 	mov	r7,a
      001894 7E 00            [12] 4663 	mov	r6,#0x00
      001896 7D 40            [12] 4664 	mov	r5,#0x40
      001898 E5*00            [12] 4665 	mov	a,_bp
      00189A 24 0B            [12] 4666 	add	a,#0x0b
      00189C F8               [12] 4667 	mov	r0,a
      00189D 86 82            [24] 4668 	mov	dpl,@r0
      00189F 08               [12] 4669 	inc	r0
      0018A0 86 83            [24] 4670 	mov	dph,@r0
      0018A2 08               [12] 4671 	inc	r0
      0018A3 86 F0            [24] 4672 	mov	b,@r0
      0018A5 12r00r00         [24] 4673 	lcall	__gptrget
      0018A8 FA               [12] 4674 	mov	r2,a
      0018A9 A3               [24] 4675 	inc	dptr
      0018AA 12r00r00         [24] 4676 	lcall	__gptrget
      0018AD FB               [12] 4677 	mov	r3,a
      0018AE A3               [24] 4678 	inc	dptr
      0018AF 12r00r00         [24] 4679 	lcall	__gptrget
      0018B2 FC               [12] 4680 	mov	r4,a
      0018B3 C0 07            [24] 4681 	push	ar7
      0018B5 C0 06            [24] 4682 	push	ar6
      0018B7 C0 05            [24] 4683 	push	ar5
      0018B9 8A 82            [24] 4684 	mov	dpl,r2
      0018BB 8B 83            [24] 4685 	mov	dph,r3
      0018BD 8C F0            [24] 4686 	mov	b,r4
      0018BF 12r00r00         [24] 4687 	lcall	_stack_pop
      0018C2 AB 82            [24] 4688 	mov	r3,dpl
      0018C4 AC 83            [24] 4689 	mov	r4,dph
      0018C6 15 81            [12] 4690 	dec	sp
      0018C8 15 81            [12] 4691 	dec	sp
      0018CA 15 81            [12] 4692 	dec	sp
      0018CC EB               [12] 4693 	mov	a,r3
      0018CD 4C               [12] 4694 	orl	a,r4
      0018CE 70 63            [24] 4695 	jnz	00162$
                                   4696 ;	calc.c:233: (void)stack_push(ctx->ps, d0);
      0018D0 E5*00            [12] 4697 	mov	a,_bp
      0018D2 24 0B            [12] 4698 	add	a,#0x0b
      0018D4 F8               [12] 4699 	mov	r0,a
      0018D5 86 82            [24] 4700 	mov	dpl,@r0
      0018D7 08               [12] 4701 	inc	r0
      0018D8 86 83            [24] 4702 	mov	dph,@r0
      0018DA 08               [12] 4703 	inc	r0
      0018DB 86 F0            [24] 4704 	mov	b,@r0
      0018DD 12r00r00         [24] 4705 	lcall	__gptrget
      0018E0 FA               [12] 4706 	mov	r2,a
      0018E1 A3               [24] 4707 	inc	dptr
      0018E2 12r00r00         [24] 4708 	lcall	__gptrget
      0018E5 FB               [12] 4709 	mov	r3,a
      0018E6 A3               [24] 4710 	inc	dptr
      0018E7 12r00r00         [24] 4711 	lcall	__gptrget
      0018EA FC               [12] 4712 	mov	r4,a
      0018EB E5*00            [12] 4713 	mov	a,_bp
      0018ED 24 15            [12] 4714 	add	a,#0x15
      0018EF F8               [12] 4715 	mov	r0,a
      0018F0 E6               [12] 4716 	mov	a,@r0
      0018F1 C0 E0            [24] 4717 	push	acc
      0018F3 08               [12] 4718 	inc	r0
      0018F4 E6               [12] 4719 	mov	a,@r0
      0018F5 C0 E0            [24] 4720 	push	acc
      0018F7 08               [12] 4721 	inc	r0
      0018F8 E6               [12] 4722 	mov	a,@r0
      0018F9 C0 E0            [24] 4723 	push	acc
      0018FB 08               [12] 4724 	inc	r0
      0018FC E6               [12] 4725 	mov	a,@r0
      0018FD C0 E0            [24] 4726 	push	acc
      0018FF 8A 82            [24] 4727 	mov	dpl,r2
      001901 8B 83            [24] 4728 	mov	dph,r3
      001903 8C F0            [24] 4729 	mov	b,r4
      001905 12r00r00         [24] 4730 	lcall	_stack_push
      001908 E5 81            [12] 4731 	mov	a,sp
      00190A 24 FC            [12] 4732 	add	a,#0xfc
      00190C F5 81            [12] 4733 	mov	sp,a
                                   4734 ;	calc.c:234: printstr("\r\nstack underflow\r\n");
      00190E 7Fr4E            [12] 4735 	mov	r7,#___str_10
      001910 7Es00            [12] 4736 	mov	r6,#(___str_10 >> 8)
      001912 7D 80            [12] 4737 	mov	r5,#0x80
                                   4738 ;	calc.c:58: return;
      001914                       4739 00435$:
                                   4740 ;	calc.c:56: for (; *s; s++) putchar(*s);
      001914 8F 82            [24] 4741 	mov	dpl,r7
      001916 8E 83            [24] 4742 	mov	dph,r6
      001918 8D F0            [24] 4743 	mov	b,r5
      00191A 12r00r00         [24] 4744 	lcall	__gptrget
      00191D FC               [12] 4745 	mov	r4,a
      00191E 70 03            [24] 4746 	jnz	01335$
      001920 02r2BrA3         [24] 4747 	ljmp	00249$
      001923                       4748 01335$:
      001923 7B 00            [12] 4749 	mov	r3,#0x00
      001925 8C 82            [24] 4750 	mov	dpl,r4
      001927 8B 83            [24] 4751 	mov	dph,r3
      001929 12r00r00         [24] 4752 	lcall	_putchar
      00192C 0F               [12] 4753 	inc	r7
                                   4754 ;	calc.c:234: printstr("\r\nstack underflow\r\n");
      00192D BF 00 E4         [24] 4755 	cjne	r7,#0x00,00435$
      001930 0E               [12] 4756 	inc	r6
      001931 80 E1            [24] 4757 	sjmp	00435$
      001933                       4758 00162$:
                                   4759 ;	calc.c:236: d1 -= d0;
      001933 E5*00            [12] 4760 	mov	a,_bp
      001935 24 19            [12] 4761 	add	a,#0x19
      001937 F8               [12] 4762 	mov	r0,a
      001938 E5*00            [12] 4763 	mov	a,_bp
      00193A 24 15            [12] 4764 	add	a,#0x15
      00193C F9               [12] 4765 	mov	r1,a
      00193D E6               [12] 4766 	mov	a,@r0
      00193E C3               [12] 4767 	clr	c
      00193F 97               [12] 4768 	subb	a,@r1
      001940 F6               [12] 4769 	mov	@r0,a
      001941 08               [12] 4770 	inc	r0
      001942 E6               [12] 4771 	mov	a,@r0
      001943 09               [12] 4772 	inc	r1
      001944 97               [12] 4773 	subb	a,@r1
      001945 F6               [12] 4774 	mov	@r0,a
      001946 08               [12] 4775 	inc	r0
      001947 E6               [12] 4776 	mov	a,@r0
      001948 09               [12] 4777 	inc	r1
      001949 97               [12] 4778 	subb	a,@r1
      00194A F6               [12] 4779 	mov	@r0,a
      00194B 08               [12] 4780 	inc	r0
      00194C E6               [12] 4781 	mov	a,@r0
      00194D 09               [12] 4782 	inc	r1
      00194E 97               [12] 4783 	subb	a,@r1
      00194F F6               [12] 4784 	mov	@r0,a
                                   4785 ;	calc.c:237: (void)stack_push(ctx->ps, d1);
      001950 E5*00            [12] 4786 	mov	a,_bp
      001952 24 0B            [12] 4787 	add	a,#0x0b
      001954 F8               [12] 4788 	mov	r0,a
      001955 86 82            [24] 4789 	mov	dpl,@r0
      001957 08               [12] 4790 	inc	r0
      001958 86 83            [24] 4791 	mov	dph,@r0
      00195A 08               [12] 4792 	inc	r0
      00195B 86 F0            [24] 4793 	mov	b,@r0
      00195D 12r00r00         [24] 4794 	lcall	__gptrget
      001960 FA               [12] 4795 	mov	r2,a
      001961 A3               [24] 4796 	inc	dptr
      001962 12r00r00         [24] 4797 	lcall	__gptrget
      001965 FB               [12] 4798 	mov	r3,a
      001966 A3               [24] 4799 	inc	dptr
      001967 12r00r00         [24] 4800 	lcall	__gptrget
      00196A FC               [12] 4801 	mov	r4,a
      00196B E5*00            [12] 4802 	mov	a,_bp
      00196D 24 19            [12] 4803 	add	a,#0x19
      00196F F8               [12] 4804 	mov	r0,a
      001970 E6               [12] 4805 	mov	a,@r0
      001971 C0 E0            [24] 4806 	push	acc
      001973 08               [12] 4807 	inc	r0
      001974 E6               [12] 4808 	mov	a,@r0
      001975 C0 E0            [24] 4809 	push	acc
      001977 08               [12] 4810 	inc	r0
      001978 E6               [12] 4811 	mov	a,@r0
      001979 C0 E0            [24] 4812 	push	acc
      00197B 08               [12] 4813 	inc	r0
      00197C E6               [12] 4814 	mov	a,@r0
      00197D C0 E0            [24] 4815 	push	acc
      00197F 8A 82            [24] 4816 	mov	dpl,r2
      001981 8B 83            [24] 4817 	mov	dph,r3
      001983 8C F0            [24] 4818 	mov	b,r4
      001985 12r00r00         [24] 4819 	lcall	_stack_push
      001988 E5 81            [12] 4820 	mov	a,sp
      00198A 24 FC            [12] 4821 	add	a,#0xfc
      00198C F5 81            [12] 4822 	mov	sp,a
                                   4823 ;	calc.c:239: break;
      00198E 02r2BrA3         [24] 4824 	ljmp	00249$
                                   4825 ;	calc.c:240: case '*':
      001991                       4826 00167$:
                                   4827 ;	calc.c:241: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      001991 E5*00            [12] 4828 	mov	a,_bp
      001993 24 15            [12] 4829 	add	a,#0x15
      001995 FF               [12] 4830 	mov	r7,a
      001996 7E 00            [12] 4831 	mov	r6,#0x00
      001998 7D 40            [12] 4832 	mov	r5,#0x40
      00199A E5*00            [12] 4833 	mov	a,_bp
      00199C 24 12            [12] 4834 	add	a,#0x12
      00199E F8               [12] 4835 	mov	r0,a
      00199F E5*00            [12] 4836 	mov	a,_bp
      0019A1 24 0B            [12] 4837 	add	a,#0x0b
      0019A3 F9               [12] 4838 	mov	r1,a
      0019A4 74 11            [12] 4839 	mov	a,#0x11
      0019A6 26               [12] 4840 	add	a,@r0
      0019A7 F7               [12] 4841 	mov	@r1,a
      0019A8 74 40            [12] 4842 	mov	a,#0x40
      0019AA 08               [12] 4843 	inc	r0
      0019AB 36               [12] 4844 	addc	a,@r0
      0019AC 09               [12] 4845 	inc	r1
      0019AD F7               [12] 4846 	mov	@r1,a
      0019AE 08               [12] 4847 	inc	r0
      0019AF 09               [12] 4848 	inc	r1
      0019B0 E6               [12] 4849 	mov	a,@r0
      0019B1 F7               [12] 4850 	mov	@r1,a
      0019B2 E5*00            [12] 4851 	mov	a,_bp
      0019B4 24 0B            [12] 4852 	add	a,#0x0b
      0019B6 F8               [12] 4853 	mov	r0,a
      0019B7 86 82            [24] 4854 	mov	dpl,@r0
      0019B9 08               [12] 4855 	inc	r0
      0019BA 86 83            [24] 4856 	mov	dph,@r0
      0019BC 08               [12] 4857 	inc	r0
      0019BD 86 F0            [24] 4858 	mov	b,@r0
      0019BF 12r00r00         [24] 4859 	lcall	__gptrget
      0019C2 FA               [12] 4860 	mov	r2,a
      0019C3 A3               [24] 4861 	inc	dptr
      0019C4 12r00r00         [24] 4862 	lcall	__gptrget
      0019C7 FB               [12] 4863 	mov	r3,a
      0019C8 A3               [24] 4864 	inc	dptr
      0019C9 12r00r00         [24] 4865 	lcall	__gptrget
      0019CC FC               [12] 4866 	mov	r4,a
      0019CD C0 07            [24] 4867 	push	ar7
      0019CF C0 06            [24] 4868 	push	ar6
      0019D1 C0 05            [24] 4869 	push	ar5
      0019D3 8A 82            [24] 4870 	mov	dpl,r2
      0019D5 8B 83            [24] 4871 	mov	dph,r3
      0019D7 8C F0            [24] 4872 	mov	b,r4
      0019D9 12r00r00         [24] 4873 	lcall	_stack_pop
      0019DC AB 82            [24] 4874 	mov	r3,dpl
      0019DE AC 83            [24] 4875 	mov	r4,dph
      0019E0 15 81            [12] 4876 	dec	sp
      0019E2 15 81            [12] 4877 	dec	sp
      0019E4 15 81            [12] 4878 	dec	sp
      0019E6 EB               [12] 4879 	mov	a,r3
      0019E7 4C               [12] 4880 	orl	a,r4
      0019E8 70 25            [24] 4881 	jnz	00172$
      0019EA 7Fr4E            [12] 4882 	mov	r7,#___str_10
      0019EC 7Es00            [12] 4883 	mov	r6,#(___str_10 >> 8)
      0019EE 7D 80            [12] 4884 	mov	r5,#0x80
                                   4885 ;	calc.c:58: return;
      0019F0                       4886 00438$:
                                   4887 ;	calc.c:56: for (; *s; s++) putchar(*s);
      0019F0 8F 82            [24] 4888 	mov	dpl,r7
      0019F2 8E 83            [24] 4889 	mov	dph,r6
      0019F4 8D F0            [24] 4890 	mov	b,r5
      0019F6 12r00r00         [24] 4891 	lcall	__gptrget
      0019F9 FC               [12] 4892 	mov	r4,a
      0019FA 70 03            [24] 4893 	jnz	01338$
      0019FC 02r2BrA3         [24] 4894 	ljmp	00249$
      0019FF                       4895 01338$:
      0019FF 7B 00            [12] 4896 	mov	r3,#0x00
      001A01 8C 82            [24] 4897 	mov	dpl,r4
      001A03 8B 83            [24] 4898 	mov	dph,r3
      001A05 12r00r00         [24] 4899 	lcall	_putchar
      001A08 0F               [12] 4900 	inc	r7
                                   4901 ;	calc.c:241: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      001A09 BF 00 E4         [24] 4902 	cjne	r7,#0x00,00438$
      001A0C 0E               [12] 4903 	inc	r6
      001A0D 80 E1            [24] 4904 	sjmp	00438$
      001A0F                       4905 00172$:
                                   4906 ;	calc.c:242: else if (!stack_pop(ctx->ps, &d1)) {
      001A0F E5*00            [12] 4907 	mov	a,_bp
      001A11 24 19            [12] 4908 	add	a,#0x19
      001A13 FF               [12] 4909 	mov	r7,a
      001A14 7E 00            [12] 4910 	mov	r6,#0x00
      001A16 7D 40            [12] 4911 	mov	r5,#0x40
      001A18 E5*00            [12] 4912 	mov	a,_bp
      001A1A 24 0B            [12] 4913 	add	a,#0x0b
      001A1C F8               [12] 4914 	mov	r0,a
      001A1D 86 82            [24] 4915 	mov	dpl,@r0
      001A1F 08               [12] 4916 	inc	r0
      001A20 86 83            [24] 4917 	mov	dph,@r0
      001A22 08               [12] 4918 	inc	r0
      001A23 86 F0            [24] 4919 	mov	b,@r0
      001A25 12r00r00         [24] 4920 	lcall	__gptrget
      001A28 FA               [12] 4921 	mov	r2,a
      001A29 A3               [24] 4922 	inc	dptr
      001A2A 12r00r00         [24] 4923 	lcall	__gptrget
      001A2D FB               [12] 4924 	mov	r3,a
      001A2E A3               [24] 4925 	inc	dptr
      001A2F 12r00r00         [24] 4926 	lcall	__gptrget
      001A32 FC               [12] 4927 	mov	r4,a
      001A33 C0 07            [24] 4928 	push	ar7
      001A35 C0 06            [24] 4929 	push	ar6
      001A37 C0 05            [24] 4930 	push	ar5
      001A39 8A 82            [24] 4931 	mov	dpl,r2
      001A3B 8B 83            [24] 4932 	mov	dph,r3
      001A3D 8C F0            [24] 4933 	mov	b,r4
      001A3F 12r00r00         [24] 4934 	lcall	_stack_pop
      001A42 AB 82            [24] 4935 	mov	r3,dpl
      001A44 AC 83            [24] 4936 	mov	r4,dph
      001A46 15 81            [12] 4937 	dec	sp
      001A48 15 81            [12] 4938 	dec	sp
      001A4A 15 81            [12] 4939 	dec	sp
      001A4C EB               [12] 4940 	mov	a,r3
      001A4D 4C               [12] 4941 	orl	a,r4
      001A4E 70 63            [24] 4942 	jnz	00169$
                                   4943 ;	calc.c:243: (void)stack_push(ctx->ps, d0);
      001A50 E5*00            [12] 4944 	mov	a,_bp
      001A52 24 0B            [12] 4945 	add	a,#0x0b
      001A54 F8               [12] 4946 	mov	r0,a
      001A55 86 82            [24] 4947 	mov	dpl,@r0
      001A57 08               [12] 4948 	inc	r0
      001A58 86 83            [24] 4949 	mov	dph,@r0
      001A5A 08               [12] 4950 	inc	r0
      001A5B 86 F0            [24] 4951 	mov	b,@r0
      001A5D 12r00r00         [24] 4952 	lcall	__gptrget
      001A60 FA               [12] 4953 	mov	r2,a
      001A61 A3               [24] 4954 	inc	dptr
      001A62 12r00r00         [24] 4955 	lcall	__gptrget
      001A65 FB               [12] 4956 	mov	r3,a
      001A66 A3               [24] 4957 	inc	dptr
      001A67 12r00r00         [24] 4958 	lcall	__gptrget
      001A6A FC               [12] 4959 	mov	r4,a
      001A6B E5*00            [12] 4960 	mov	a,_bp
      001A6D 24 15            [12] 4961 	add	a,#0x15
      001A6F F8               [12] 4962 	mov	r0,a
      001A70 E6               [12] 4963 	mov	a,@r0
      001A71 C0 E0            [24] 4964 	push	acc
      001A73 08               [12] 4965 	inc	r0
      001A74 E6               [12] 4966 	mov	a,@r0
      001A75 C0 E0            [24] 4967 	push	acc
      001A77 08               [12] 4968 	inc	r0
      001A78 E6               [12] 4969 	mov	a,@r0
      001A79 C0 E0            [24] 4970 	push	acc
      001A7B 08               [12] 4971 	inc	r0
      001A7C E6               [12] 4972 	mov	a,@r0
      001A7D C0 E0            [24] 4973 	push	acc
      001A7F 8A 82            [24] 4974 	mov	dpl,r2
      001A81 8B 83            [24] 4975 	mov	dph,r3
      001A83 8C F0            [24] 4976 	mov	b,r4
      001A85 12r00r00         [24] 4977 	lcall	_stack_push
      001A88 E5 81            [12] 4978 	mov	a,sp
      001A8A 24 FC            [12] 4979 	add	a,#0xfc
      001A8C F5 81            [12] 4980 	mov	sp,a
                                   4981 ;	calc.c:244: printstr("\r\nstack underflow\r\n");
      001A8E 7Fr4E            [12] 4982 	mov	r7,#___str_10
      001A90 7Es00            [12] 4983 	mov	r6,#(___str_10 >> 8)
      001A92 7D 80            [12] 4984 	mov	r5,#0x80
                                   4985 ;	calc.c:58: return;
      001A94                       4986 00441$:
                                   4987 ;	calc.c:56: for (; *s; s++) putchar(*s);
      001A94 8F 82            [24] 4988 	mov	dpl,r7
      001A96 8E 83            [24] 4989 	mov	dph,r6
      001A98 8D F0            [24] 4990 	mov	b,r5
      001A9A 12r00r00         [24] 4991 	lcall	__gptrget
      001A9D FC               [12] 4992 	mov	r4,a
      001A9E 70 03            [24] 4993 	jnz	01341$
      001AA0 02r2BrA3         [24] 4994 	ljmp	00249$
      001AA3                       4995 01341$:
      001AA3 7B 00            [12] 4996 	mov	r3,#0x00
      001AA5 8C 82            [24] 4997 	mov	dpl,r4
      001AA7 8B 83            [24] 4998 	mov	dph,r3
      001AA9 12r00r00         [24] 4999 	lcall	_putchar
      001AAC 0F               [12] 5000 	inc	r7
                                   5001 ;	calc.c:244: printstr("\r\nstack underflow\r\n");
      001AAD BF 00 E4         [24] 5002 	cjne	r7,#0x00,00441$
      001AB0 0E               [12] 5003 	inc	r6
      001AB1 80 E1            [24] 5004 	sjmp	00441$
      001AB3                       5005 00169$:
                                   5006 ;	calc.c:246: d1 *= d0;
      001AB3 E5*00            [12] 5007 	mov	a,_bp
      001AB5 24 15            [12] 5008 	add	a,#0x15
      001AB7 F8               [12] 5009 	mov	r0,a
      001AB8 E6               [12] 5010 	mov	a,@r0
      001AB9 C0 E0            [24] 5011 	push	acc
      001ABB 08               [12] 5012 	inc	r0
      001ABC E6               [12] 5013 	mov	a,@r0
      001ABD C0 E0            [24] 5014 	push	acc
      001ABF 08               [12] 5015 	inc	r0
      001AC0 E6               [12] 5016 	mov	a,@r0
      001AC1 C0 E0            [24] 5017 	push	acc
      001AC3 08               [12] 5018 	inc	r0
      001AC4 E6               [12] 5019 	mov	a,@r0
      001AC5 C0 E0            [24] 5020 	push	acc
      001AC7 E5*00            [12] 5021 	mov	a,_bp
      001AC9 24 19            [12] 5022 	add	a,#0x19
      001ACB F8               [12] 5023 	mov	r0,a
      001ACC 86 82            [24] 5024 	mov	dpl,@r0
      001ACE 08               [12] 5025 	inc	r0
      001ACF 86 83            [24] 5026 	mov	dph,@r0
      001AD1 08               [12] 5027 	inc	r0
      001AD2 86 F0            [24] 5028 	mov	b,@r0
      001AD4 08               [12] 5029 	inc	r0
      001AD5 E6               [12] 5030 	mov	a,@r0
      001AD6 12r00r00         [24] 5031 	lcall	__mullong
      001AD9 AF 82            [24] 5032 	mov	r7,dpl
      001ADB AE 83            [24] 5033 	mov	r6,dph
      001ADD AD F0            [24] 5034 	mov	r5,b
      001ADF FC               [12] 5035 	mov	r4,a
      001AE0 E5 81            [12] 5036 	mov	a,sp
      001AE2 24 FC            [12] 5037 	add	a,#0xfc
      001AE4 F5 81            [12] 5038 	mov	sp,a
      001AE6 E5*00            [12] 5039 	mov	a,_bp
      001AE8 24 19            [12] 5040 	add	a,#0x19
      001AEA F8               [12] 5041 	mov	r0,a
      001AEB A6 07            [24] 5042 	mov	@r0,ar7
      001AED 08               [12] 5043 	inc	r0
      001AEE A6 06            [24] 5044 	mov	@r0,ar6
      001AF0 08               [12] 5045 	inc	r0
      001AF1 A6 05            [24] 5046 	mov	@r0,ar5
      001AF3 08               [12] 5047 	inc	r0
      001AF4 A6 04            [24] 5048 	mov	@r0,ar4
                                   5049 ;	calc.c:247: (void)stack_push(ctx->ps, d1);
      001AF6 E5*00            [12] 5050 	mov	a,_bp
      001AF8 24 0B            [12] 5051 	add	a,#0x0b
      001AFA F8               [12] 5052 	mov	r0,a
      001AFB 86 82            [24] 5053 	mov	dpl,@r0
      001AFD 08               [12] 5054 	inc	r0
      001AFE 86 83            [24] 5055 	mov	dph,@r0
      001B00 08               [12] 5056 	inc	r0
      001B01 86 F0            [24] 5057 	mov	b,@r0
      001B03 12r00r00         [24] 5058 	lcall	__gptrget
      001B06 FA               [12] 5059 	mov	r2,a
      001B07 A3               [24] 5060 	inc	dptr
      001B08 12r00r00         [24] 5061 	lcall	__gptrget
      001B0B FB               [12] 5062 	mov	r3,a
      001B0C A3               [24] 5063 	inc	dptr
      001B0D 12r00r00         [24] 5064 	lcall	__gptrget
      001B10 FC               [12] 5065 	mov	r4,a
      001B11 E5*00            [12] 5066 	mov	a,_bp
      001B13 24 19            [12] 5067 	add	a,#0x19
      001B15 F8               [12] 5068 	mov	r0,a
      001B16 E6               [12] 5069 	mov	a,@r0
      001B17 C0 E0            [24] 5070 	push	acc
      001B19 08               [12] 5071 	inc	r0
      001B1A E6               [12] 5072 	mov	a,@r0
      001B1B C0 E0            [24] 5073 	push	acc
      001B1D 08               [12] 5074 	inc	r0
      001B1E E6               [12] 5075 	mov	a,@r0
      001B1F C0 E0            [24] 5076 	push	acc
      001B21 08               [12] 5077 	inc	r0
      001B22 E6               [12] 5078 	mov	a,@r0
      001B23 C0 E0            [24] 5079 	push	acc
      001B25 8A 82            [24] 5080 	mov	dpl,r2
      001B27 8B 83            [24] 5081 	mov	dph,r3
      001B29 8C F0            [24] 5082 	mov	b,r4
      001B2B 12r00r00         [24] 5083 	lcall	_stack_push
      001B2E E5 81            [12] 5084 	mov	a,sp
      001B30 24 FC            [12] 5085 	add	a,#0xfc
      001B32 F5 81            [12] 5086 	mov	sp,a
                                   5087 ;	calc.c:249: break;
      001B34 02r2BrA3         [24] 5088 	ljmp	00249$
                                   5089 ;	calc.c:251: case '\\':
      001B37                       5090 00175$:
                                   5091 ;	calc.c:252: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      001B37 C0 05            [24] 5092 	push	ar5
      001B39 C0 06            [24] 5093 	push	ar6
      001B3B C0 07            [24] 5094 	push	ar7
      001B3D E5*00            [12] 5095 	mov	a,_bp
      001B3F 24 15            [12] 5096 	add	a,#0x15
      001B41 FC               [12] 5097 	mov	r4,a
      001B42 7B 00            [12] 5098 	mov	r3,#0x00
      001B44 7A 40            [12] 5099 	mov	r2,#0x40
      001B46 E5*00            [12] 5100 	mov	a,_bp
      001B48 24 12            [12] 5101 	add	a,#0x12
      001B4A F8               [12] 5102 	mov	r0,a
      001B4B E5*00            [12] 5103 	mov	a,_bp
      001B4D 24 0B            [12] 5104 	add	a,#0x0b
      001B4F F9               [12] 5105 	mov	r1,a
      001B50 74 11            [12] 5106 	mov	a,#0x11
      001B52 26               [12] 5107 	add	a,@r0
      001B53 F7               [12] 5108 	mov	@r1,a
      001B54 74 40            [12] 5109 	mov	a,#0x40
      001B56 08               [12] 5110 	inc	r0
      001B57 36               [12] 5111 	addc	a,@r0
      001B58 09               [12] 5112 	inc	r1
      001B59 F7               [12] 5113 	mov	@r1,a
      001B5A 08               [12] 5114 	inc	r0
      001B5B 09               [12] 5115 	inc	r1
      001B5C E6               [12] 5116 	mov	a,@r0
      001B5D F7               [12] 5117 	mov	@r1,a
      001B5E E5*00            [12] 5118 	mov	a,_bp
      001B60 24 0B            [12] 5119 	add	a,#0x0b
      001B62 F8               [12] 5120 	mov	r0,a
      001B63 86 82            [24] 5121 	mov	dpl,@r0
      001B65 08               [12] 5122 	inc	r0
      001B66 86 83            [24] 5123 	mov	dph,@r0
      001B68 08               [12] 5124 	inc	r0
      001B69 86 F0            [24] 5125 	mov	b,@r0
      001B6B 12r00r00         [24] 5126 	lcall	__gptrget
      001B6E FD               [12] 5127 	mov	r5,a
      001B6F A3               [24] 5128 	inc	dptr
      001B70 12r00r00         [24] 5129 	lcall	__gptrget
      001B73 FE               [12] 5130 	mov	r6,a
      001B74 A3               [24] 5131 	inc	dptr
      001B75 12r00r00         [24] 5132 	lcall	__gptrget
      001B78 FF               [12] 5133 	mov	r7,a
      001B79 C0 05            [24] 5134 	push	ar5
      001B7B C0 04            [24] 5135 	push	ar4
      001B7D C0 03            [24] 5136 	push	ar3
      001B7F C0 02            [24] 5137 	push	ar2
      001B81 8D 82            [24] 5138 	mov	dpl,r5
      001B83 8E 83            [24] 5139 	mov	dph,r6
      001B85 8F F0            [24] 5140 	mov	b,r7
      001B87 12r00r00         [24] 5141 	lcall	_stack_pop
      001B8A AE 82            [24] 5142 	mov	r6,dpl
      001B8C AF 83            [24] 5143 	mov	r7,dph
      001B8E 15 81            [12] 5144 	dec	sp
      001B90 15 81            [12] 5145 	dec	sp
      001B92 15 81            [12] 5146 	dec	sp
      001B94 D0 05            [24] 5147 	pop	ar5
      001B96 EE               [12] 5148 	mov	a,r6
      001B97 4F               [12] 5149 	orl	a,r7
      001B98 D0 07            [24] 5150 	pop	ar7
      001B9A D0 06            [24] 5151 	pop	ar6
      001B9C D0 05            [24] 5152 	pop	ar5
      001B9E 70 25            [24] 5153 	jnz	00186$
      001BA0 7Fr4E            [12] 5154 	mov	r7,#___str_10
      001BA2 7Es00            [12] 5155 	mov	r6,#(___str_10 >> 8)
      001BA4 7D 80            [12] 5156 	mov	r5,#0x80
                                   5157 ;	calc.c:58: return;
      001BA6                       5158 00444$:
                                   5159 ;	calc.c:56: for (; *s; s++) putchar(*s);
      001BA6 8F 82            [24] 5160 	mov	dpl,r7
      001BA8 8E 83            [24] 5161 	mov	dph,r6
      001BAA 8D F0            [24] 5162 	mov	b,r5
      001BAC 12r00r00         [24] 5163 	lcall	__gptrget
      001BAF FC               [12] 5164 	mov	r4,a
      001BB0 70 03            [24] 5165 	jnz	01344$
      001BB2 02r2BrA3         [24] 5166 	ljmp	00249$
      001BB5                       5167 01344$:
      001BB5 7B 00            [12] 5168 	mov	r3,#0x00
      001BB7 8C 82            [24] 5169 	mov	dpl,r4
      001BB9 8B 83            [24] 5170 	mov	dph,r3
      001BBB 12r00r00         [24] 5171 	lcall	_putchar
      001BBE 0F               [12] 5172 	inc	r7
                                   5173 ;	calc.c:252: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      001BBF BF 00 E4         [24] 5174 	cjne	r7,#0x00,00444$
      001BC2 0E               [12] 5175 	inc	r6
      001BC3 80 E1            [24] 5176 	sjmp	00444$
      001BC5                       5177 00186$:
                                   5178 ;	calc.c:253: else if (!stack_pop(ctx->ps, &d1)) {
      001BC5 C0 05            [24] 5179 	push	ar5
      001BC7 C0 06            [24] 5180 	push	ar6
      001BC9 C0 07            [24] 5181 	push	ar7
      001BCB E5*00            [12] 5182 	mov	a,_bp
      001BCD 24 19            [12] 5183 	add	a,#0x19
      001BCF FC               [12] 5184 	mov	r4,a
      001BD0 7B 00            [12] 5185 	mov	r3,#0x00
      001BD2 7A 40            [12] 5186 	mov	r2,#0x40
      001BD4 E5*00            [12] 5187 	mov	a,_bp
      001BD6 24 0B            [12] 5188 	add	a,#0x0b
      001BD8 F8               [12] 5189 	mov	r0,a
      001BD9 86 82            [24] 5190 	mov	dpl,@r0
      001BDB 08               [12] 5191 	inc	r0
      001BDC 86 83            [24] 5192 	mov	dph,@r0
      001BDE 08               [12] 5193 	inc	r0
      001BDF 86 F0            [24] 5194 	mov	b,@r0
      001BE1 12r00r00         [24] 5195 	lcall	__gptrget
      001BE4 FD               [12] 5196 	mov	r5,a
      001BE5 A3               [24] 5197 	inc	dptr
      001BE6 12r00r00         [24] 5198 	lcall	__gptrget
      001BE9 FE               [12] 5199 	mov	r6,a
      001BEA A3               [24] 5200 	inc	dptr
      001BEB 12r00r00         [24] 5201 	lcall	__gptrget
      001BEE FF               [12] 5202 	mov	r7,a
      001BEF C0 05            [24] 5203 	push	ar5
      001BF1 C0 04            [24] 5204 	push	ar4
      001BF3 C0 03            [24] 5205 	push	ar3
      001BF5 C0 02            [24] 5206 	push	ar2
      001BF7 8D 82            [24] 5207 	mov	dpl,r5
      001BF9 8E 83            [24] 5208 	mov	dph,r6
      001BFB 8F F0            [24] 5209 	mov	b,r7
      001BFD 12r00r00         [24] 5210 	lcall	_stack_pop
      001C00 AE 82            [24] 5211 	mov	r6,dpl
      001C02 AF 83            [24] 5212 	mov	r7,dph
      001C04 15 81            [12] 5213 	dec	sp
      001C06 15 81            [12] 5214 	dec	sp
      001C08 15 81            [12] 5215 	dec	sp
      001C0A D0 05            [24] 5216 	pop	ar5
      001C0C EE               [12] 5217 	mov	a,r6
      001C0D 4F               [12] 5218 	orl	a,r7
      001C0E D0 07            [24] 5219 	pop	ar7
      001C10 D0 06            [24] 5220 	pop	ar6
      001C12 D0 05            [24] 5221 	pop	ar5
      001C14 70 63            [24] 5222 	jnz	00183$
                                   5223 ;	calc.c:254: (void)stack_push(ctx->ps, d0);
      001C16 E5*00            [12] 5224 	mov	a,_bp
      001C18 24 0B            [12] 5225 	add	a,#0x0b
      001C1A F8               [12] 5226 	mov	r0,a
      001C1B 86 82            [24] 5227 	mov	dpl,@r0
      001C1D 08               [12] 5228 	inc	r0
      001C1E 86 83            [24] 5229 	mov	dph,@r0
      001C20 08               [12] 5230 	inc	r0
      001C21 86 F0            [24] 5231 	mov	b,@r0
      001C23 12r00r00         [24] 5232 	lcall	__gptrget
      001C26 FA               [12] 5233 	mov	r2,a
      001C27 A3               [24] 5234 	inc	dptr
      001C28 12r00r00         [24] 5235 	lcall	__gptrget
      001C2B FB               [12] 5236 	mov	r3,a
      001C2C A3               [24] 5237 	inc	dptr
      001C2D 12r00r00         [24] 5238 	lcall	__gptrget
      001C30 FC               [12] 5239 	mov	r4,a
      001C31 E5*00            [12] 5240 	mov	a,_bp
      001C33 24 15            [12] 5241 	add	a,#0x15
      001C35 F8               [12] 5242 	mov	r0,a
      001C36 E6               [12] 5243 	mov	a,@r0
      001C37 C0 E0            [24] 5244 	push	acc
      001C39 08               [12] 5245 	inc	r0
      001C3A E6               [12] 5246 	mov	a,@r0
      001C3B C0 E0            [24] 5247 	push	acc
      001C3D 08               [12] 5248 	inc	r0
      001C3E E6               [12] 5249 	mov	a,@r0
      001C3F C0 E0            [24] 5250 	push	acc
      001C41 08               [12] 5251 	inc	r0
      001C42 E6               [12] 5252 	mov	a,@r0
      001C43 C0 E0            [24] 5253 	push	acc
      001C45 8A 82            [24] 5254 	mov	dpl,r2
      001C47 8B 83            [24] 5255 	mov	dph,r3
      001C49 8C F0            [24] 5256 	mov	b,r4
      001C4B 12r00r00         [24] 5257 	lcall	_stack_push
      001C4E E5 81            [12] 5258 	mov	a,sp
      001C50 24 FC            [12] 5259 	add	a,#0xfc
      001C52 F5 81            [12] 5260 	mov	sp,a
                                   5261 ;	calc.c:255: printstr("\r\nstack underflow\r\n");
      001C54 7Fr4E            [12] 5262 	mov	r7,#___str_10
      001C56 7Es00            [12] 5263 	mov	r6,#(___str_10 >> 8)
      001C58 7D 80            [12] 5264 	mov	r5,#0x80
                                   5265 ;	calc.c:58: return;
      001C5A                       5266 00447$:
                                   5267 ;	calc.c:56: for (; *s; s++) putchar(*s);
      001C5A 8F 82            [24] 5268 	mov	dpl,r7
      001C5C 8E 83            [24] 5269 	mov	dph,r6
      001C5E 8D F0            [24] 5270 	mov	b,r5
      001C60 12r00r00         [24] 5271 	lcall	__gptrget
      001C63 FC               [12] 5272 	mov	r4,a
      001C64 70 03            [24] 5273 	jnz	01347$
      001C66 02r2BrA3         [24] 5274 	ljmp	00249$
      001C69                       5275 01347$:
      001C69 7B 00            [12] 5276 	mov	r3,#0x00
      001C6B 8C 82            [24] 5277 	mov	dpl,r4
      001C6D 8B 83            [24] 5278 	mov	dph,r3
      001C6F 12r00r00         [24] 5279 	lcall	_putchar
      001C72 0F               [12] 5280 	inc	r7
                                   5281 ;	calc.c:255: printstr("\r\nstack underflow\r\n");
      001C73 BF 00 E4         [24] 5282 	cjne	r7,#0x00,00447$
      001C76 0E               [12] 5283 	inc	r6
      001C77 80 E1            [24] 5284 	sjmp	00447$
      001C79                       5285 00183$:
                                   5286 ;	calc.c:256: } else if (!d0) {
      001C79 E5*00            [12] 5287 	mov	a,_bp
      001C7B 24 15            [12] 5288 	add	a,#0x15
      001C7D F8               [12] 5289 	mov	r0,a
      001C7E E6               [12] 5290 	mov	a,@r0
      001C7F 08               [12] 5291 	inc	r0
      001C80 46               [12] 5292 	orl	a,@r0
      001C81 08               [12] 5293 	inc	r0
      001C82 46               [12] 5294 	orl	a,@r0
      001C83 08               [12] 5295 	inc	r0
      001C84 46               [12] 5296 	orl	a,@r0
      001C85 60 03            [24] 5297 	jz	01349$
      001C87 02r1Dr2B         [24] 5298 	ljmp	00180$
      001C8A                       5299 01349$:
                                   5300 ;	calc.c:257: (void)stack_push(ctx->ps, d1);
      001C8A E5*00            [12] 5301 	mov	a,_bp
      001C8C 24 0B            [12] 5302 	add	a,#0x0b
      001C8E F8               [12] 5303 	mov	r0,a
      001C8F 86 82            [24] 5304 	mov	dpl,@r0
      001C91 08               [12] 5305 	inc	r0
      001C92 86 83            [24] 5306 	mov	dph,@r0
      001C94 08               [12] 5307 	inc	r0
      001C95 86 F0            [24] 5308 	mov	b,@r0
      001C97 12r00r00         [24] 5309 	lcall	__gptrget
      001C9A FA               [12] 5310 	mov	r2,a
      001C9B A3               [24] 5311 	inc	dptr
      001C9C 12r00r00         [24] 5312 	lcall	__gptrget
      001C9F FB               [12] 5313 	mov	r3,a
      001CA0 A3               [24] 5314 	inc	dptr
      001CA1 12r00r00         [24] 5315 	lcall	__gptrget
      001CA4 FC               [12] 5316 	mov	r4,a
      001CA5 E5*00            [12] 5317 	mov	a,_bp
      001CA7 24 19            [12] 5318 	add	a,#0x19
      001CA9 F8               [12] 5319 	mov	r0,a
      001CAA E6               [12] 5320 	mov	a,@r0
      001CAB C0 E0            [24] 5321 	push	acc
      001CAD 08               [12] 5322 	inc	r0
      001CAE E6               [12] 5323 	mov	a,@r0
      001CAF C0 E0            [24] 5324 	push	acc
      001CB1 08               [12] 5325 	inc	r0
      001CB2 E6               [12] 5326 	mov	a,@r0
      001CB3 C0 E0            [24] 5327 	push	acc
      001CB5 08               [12] 5328 	inc	r0
      001CB6 E6               [12] 5329 	mov	a,@r0
      001CB7 C0 E0            [24] 5330 	push	acc
      001CB9 8A 82            [24] 5331 	mov	dpl,r2
      001CBB 8B 83            [24] 5332 	mov	dph,r3
      001CBD 8C F0            [24] 5333 	mov	b,r4
      001CBF 12r00r00         [24] 5334 	lcall	_stack_push
      001CC2 E5 81            [12] 5335 	mov	a,sp
      001CC4 24 FC            [12] 5336 	add	a,#0xfc
      001CC6 F5 81            [12] 5337 	mov	sp,a
                                   5338 ;	calc.c:258: (void)stack_push(ctx->ps, d0);			
      001CC8 E5*00            [12] 5339 	mov	a,_bp
      001CCA 24 0B            [12] 5340 	add	a,#0x0b
      001CCC F8               [12] 5341 	mov	r0,a
      001CCD 86 82            [24] 5342 	mov	dpl,@r0
      001CCF 08               [12] 5343 	inc	r0
      001CD0 86 83            [24] 5344 	mov	dph,@r0
      001CD2 08               [12] 5345 	inc	r0
      001CD3 86 F0            [24] 5346 	mov	b,@r0
      001CD5 12r00r00         [24] 5347 	lcall	__gptrget
      001CD8 FA               [12] 5348 	mov	r2,a
      001CD9 A3               [24] 5349 	inc	dptr
      001CDA 12r00r00         [24] 5350 	lcall	__gptrget
      001CDD FB               [12] 5351 	mov	r3,a
      001CDE A3               [24] 5352 	inc	dptr
      001CDF 12r00r00         [24] 5353 	lcall	__gptrget
      001CE2 FC               [12] 5354 	mov	r4,a
      001CE3 E5*00            [12] 5355 	mov	a,_bp
      001CE5 24 15            [12] 5356 	add	a,#0x15
      001CE7 F8               [12] 5357 	mov	r0,a
      001CE8 E6               [12] 5358 	mov	a,@r0
      001CE9 C0 E0            [24] 5359 	push	acc
      001CEB 08               [12] 5360 	inc	r0
      001CEC E6               [12] 5361 	mov	a,@r0
      001CED C0 E0            [24] 5362 	push	acc
      001CEF 08               [12] 5363 	inc	r0
      001CF0 E6               [12] 5364 	mov	a,@r0
      001CF1 C0 E0            [24] 5365 	push	acc
      001CF3 08               [12] 5366 	inc	r0
      001CF4 E6               [12] 5367 	mov	a,@r0
      001CF5 C0 E0            [24] 5368 	push	acc
      001CF7 8A 82            [24] 5369 	mov	dpl,r2
      001CF9 8B 83            [24] 5370 	mov	dph,r3
      001CFB 8C F0            [24] 5371 	mov	b,r4
      001CFD 12r00r00         [24] 5372 	lcall	_stack_push
      001D00 E5 81            [12] 5373 	mov	a,sp
      001D02 24 FC            [12] 5374 	add	a,#0xfc
      001D04 F5 81            [12] 5375 	mov	sp,a
                                   5376 ;	calc.c:259: printstr("\r\ndivision by zero\r\n");
      001D06 7FrB0            [12] 5377 	mov	r7,#___str_14
      001D08 7Es00            [12] 5378 	mov	r6,#(___str_14 >> 8)
      001D0A 7D 80            [12] 5379 	mov	r5,#0x80
                                   5380 ;	calc.c:58: return;
      001D0C                       5381 00450$:
                                   5382 ;	calc.c:56: for (; *s; s++) putchar(*s);
      001D0C 8F 82            [24] 5383 	mov	dpl,r7
      001D0E 8E 83            [24] 5384 	mov	dph,r6
      001D10 8D F0            [24] 5385 	mov	b,r5
      001D12 12r00r00         [24] 5386 	lcall	__gptrget
      001D15 FC               [12] 5387 	mov	r4,a
      001D16 70 03            [24] 5388 	jnz	01350$
      001D18 02r2BrA3         [24] 5389 	ljmp	00249$
      001D1B                       5390 01350$:
      001D1B 7B 00            [12] 5391 	mov	r3,#0x00
      001D1D 8C 82            [24] 5392 	mov	dpl,r4
      001D1F 8B 83            [24] 5393 	mov	dph,r3
      001D21 12r00r00         [24] 5394 	lcall	_putchar
      001D24 0F               [12] 5395 	inc	r7
                                   5396 ;	calc.c:259: printstr("\r\ndivision by zero\r\n");
      001D25 BF 00 E4         [24] 5397 	cjne	r7,#0x00,00450$
      001D28 0E               [12] 5398 	inc	r6
      001D29 80 E1            [24] 5399 	sjmp	00450$
      001D2B                       5400 00180$:
                                   5401 ;	calc.c:261: if (ctx->digit[0] == '/') d1 /= d0;
      001D2B 8D 82            [24] 5402 	mov	dpl,r5
      001D2D 8E 83            [24] 5403 	mov	dph,r6
      001D2F 8F F0            [24] 5404 	mov	b,r7
      001D31 12r00r00         [24] 5405 	lcall	__gptrget
      001D34 FC               [12] 5406 	mov	r4,a
      001D35 BC 2F 45         [24] 5407 	cjne	r4,#0x2f,00177$
      001D38 E5*00            [12] 5408 	mov	a,_bp
      001D3A 24 15            [12] 5409 	add	a,#0x15
      001D3C F8               [12] 5410 	mov	r0,a
      001D3D E6               [12] 5411 	mov	a,@r0
      001D3E C0 E0            [24] 5412 	push	acc
      001D40 08               [12] 5413 	inc	r0
      001D41 E6               [12] 5414 	mov	a,@r0
      001D42 C0 E0            [24] 5415 	push	acc
      001D44 08               [12] 5416 	inc	r0
      001D45 E6               [12] 5417 	mov	a,@r0
      001D46 C0 E0            [24] 5418 	push	acc
      001D48 08               [12] 5419 	inc	r0
      001D49 E6               [12] 5420 	mov	a,@r0
      001D4A C0 E0            [24] 5421 	push	acc
      001D4C E5*00            [12] 5422 	mov	a,_bp
      001D4E 24 19            [12] 5423 	add	a,#0x19
      001D50 F8               [12] 5424 	mov	r0,a
      001D51 86 82            [24] 5425 	mov	dpl,@r0
      001D53 08               [12] 5426 	inc	r0
      001D54 86 83            [24] 5427 	mov	dph,@r0
      001D56 08               [12] 5428 	inc	r0
      001D57 86 F0            [24] 5429 	mov	b,@r0
      001D59 08               [12] 5430 	inc	r0
      001D5A E6               [12] 5431 	mov	a,@r0
      001D5B 12r00r00         [24] 5432 	lcall	__divslong
      001D5E AF 82            [24] 5433 	mov	r7,dpl
      001D60 AE 83            [24] 5434 	mov	r6,dph
      001D62 AD F0            [24] 5435 	mov	r5,b
      001D64 FC               [12] 5436 	mov	r4,a
      001D65 E5 81            [12] 5437 	mov	a,sp
      001D67 24 FC            [12] 5438 	add	a,#0xfc
      001D69 F5 81            [12] 5439 	mov	sp,a
      001D6B E5*00            [12] 5440 	mov	a,_bp
      001D6D 24 19            [12] 5441 	add	a,#0x19
      001D6F F8               [12] 5442 	mov	r0,a
      001D70 A6 07            [24] 5443 	mov	@r0,ar7
      001D72 08               [12] 5444 	inc	r0
      001D73 A6 06            [24] 5445 	mov	@r0,ar6
      001D75 08               [12] 5446 	inc	r0
      001D76 A6 05            [24] 5447 	mov	@r0,ar5
      001D78 08               [12] 5448 	inc	r0
      001D79 A6 04            [24] 5449 	mov	@r0,ar4
      001D7B 80 63            [24] 5450 	sjmp	00178$
      001D7D                       5451 00177$:
                                   5452 ;	calc.c:262: else d1 = (unsigned long)d1 / (unsigned long)d0;
      001D7D E5*00            [12] 5453 	mov	a,_bp
      001D7F 24 19            [12] 5454 	add	a,#0x19
      001D81 F8               [12] 5455 	mov	r0,a
      001D82 86 07            [24] 5456 	mov	ar7,@r0
      001D84 08               [12] 5457 	inc	r0
      001D85 86 06            [24] 5458 	mov	ar6,@r0
      001D87 08               [12] 5459 	inc	r0
      001D88 86 05            [24] 5460 	mov	ar5,@r0
      001D8A 08               [12] 5461 	inc	r0
      001D8B 86 04            [24] 5462 	mov	ar4,@r0
      001D8D E5*00            [12] 5463 	mov	a,_bp
      001D8F 24 15            [12] 5464 	add	a,#0x15
      001D91 F8               [12] 5465 	mov	r0,a
      001D92 E5*00            [12] 5466 	mov	a,_bp
      001D94 24 0E            [12] 5467 	add	a,#0x0e
      001D96 F9               [12] 5468 	mov	r1,a
      001D97 E6               [12] 5469 	mov	a,@r0
      001D98 F7               [12] 5470 	mov	@r1,a
      001D99 08               [12] 5471 	inc	r0
      001D9A 09               [12] 5472 	inc	r1
      001D9B E6               [12] 5473 	mov	a,@r0
      001D9C F7               [12] 5474 	mov	@r1,a
      001D9D 08               [12] 5475 	inc	r0
      001D9E 09               [12] 5476 	inc	r1
      001D9F E6               [12] 5477 	mov	a,@r0
      001DA0 F7               [12] 5478 	mov	@r1,a
      001DA1 08               [12] 5479 	inc	r0
      001DA2 09               [12] 5480 	inc	r1
      001DA3 E6               [12] 5481 	mov	a,@r0
      001DA4 F7               [12] 5482 	mov	@r1,a
      001DA5 E5*00            [12] 5483 	mov	a,_bp
      001DA7 24 0E            [12] 5484 	add	a,#0x0e
      001DA9 F8               [12] 5485 	mov	r0,a
      001DAA E6               [12] 5486 	mov	a,@r0
      001DAB C0 E0            [24] 5487 	push	acc
      001DAD 08               [12] 5488 	inc	r0
      001DAE E6               [12] 5489 	mov	a,@r0
      001DAF C0 E0            [24] 5490 	push	acc
      001DB1 08               [12] 5491 	inc	r0
      001DB2 E6               [12] 5492 	mov	a,@r0
      001DB3 C0 E0            [24] 5493 	push	acc
      001DB5 08               [12] 5494 	inc	r0
      001DB6 E6               [12] 5495 	mov	a,@r0
      001DB7 C0 E0            [24] 5496 	push	acc
      001DB9 8F 82            [24] 5497 	mov	dpl,r7
      001DBB 8E 83            [24] 5498 	mov	dph,r6
      001DBD 8D F0            [24] 5499 	mov	b,r5
      001DBF EC               [12] 5500 	mov	a,r4
      001DC0 12r00r00         [24] 5501 	lcall	__divulong
      001DC3 AF 82            [24] 5502 	mov	r7,dpl
      001DC5 AE 83            [24] 5503 	mov	r6,dph
      001DC7 AD F0            [24] 5504 	mov	r5,b
      001DC9 FC               [12] 5505 	mov	r4,a
      001DCA E5 81            [12] 5506 	mov	a,sp
      001DCC 24 FC            [12] 5507 	add	a,#0xfc
      001DCE F5 81            [12] 5508 	mov	sp,a
      001DD0 E5*00            [12] 5509 	mov	a,_bp
      001DD2 24 19            [12] 5510 	add	a,#0x19
      001DD4 F8               [12] 5511 	mov	r0,a
      001DD5 A6 07            [24] 5512 	mov	@r0,ar7
      001DD7 08               [12] 5513 	inc	r0
      001DD8 A6 06            [24] 5514 	mov	@r0,ar6
      001DDA 08               [12] 5515 	inc	r0
      001DDB A6 05            [24] 5516 	mov	@r0,ar5
      001DDD 08               [12] 5517 	inc	r0
      001DDE A6 04            [24] 5518 	mov	@r0,ar4
      001DE0                       5519 00178$:
                                   5520 ;	calc.c:263: (void)stack_push(ctx->ps, d1);
      001DE0 E5*00            [12] 5521 	mov	a,_bp
      001DE2 24 0B            [12] 5522 	add	a,#0x0b
      001DE4 F8               [12] 5523 	mov	r0,a
      001DE5 86 82            [24] 5524 	mov	dpl,@r0
      001DE7 08               [12] 5525 	inc	r0
      001DE8 86 83            [24] 5526 	mov	dph,@r0
      001DEA 08               [12] 5527 	inc	r0
      001DEB 86 F0            [24] 5528 	mov	b,@r0
      001DED 12r00r00         [24] 5529 	lcall	__gptrget
      001DF0 FA               [12] 5530 	mov	r2,a
      001DF1 A3               [24] 5531 	inc	dptr
      001DF2 12r00r00         [24] 5532 	lcall	__gptrget
      001DF5 FB               [12] 5533 	mov	r3,a
      001DF6 A3               [24] 5534 	inc	dptr
      001DF7 12r00r00         [24] 5535 	lcall	__gptrget
      001DFA FC               [12] 5536 	mov	r4,a
      001DFB E5*00            [12] 5537 	mov	a,_bp
      001DFD 24 19            [12] 5538 	add	a,#0x19
      001DFF F8               [12] 5539 	mov	r0,a
      001E00 E6               [12] 5540 	mov	a,@r0
      001E01 C0 E0            [24] 5541 	push	acc
      001E03 08               [12] 5542 	inc	r0
      001E04 E6               [12] 5543 	mov	a,@r0
      001E05 C0 E0            [24] 5544 	push	acc
      001E07 08               [12] 5545 	inc	r0
      001E08 E6               [12] 5546 	mov	a,@r0
      001E09 C0 E0            [24] 5547 	push	acc
      001E0B 08               [12] 5548 	inc	r0
      001E0C E6               [12] 5549 	mov	a,@r0
      001E0D C0 E0            [24] 5550 	push	acc
      001E0F 8A 82            [24] 5551 	mov	dpl,r2
      001E11 8B 83            [24] 5552 	mov	dph,r3
      001E13 8C F0            [24] 5553 	mov	b,r4
      001E15 12r00r00         [24] 5554 	lcall	_stack_push
      001E18 E5 81            [12] 5555 	mov	a,sp
      001E1A 24 FC            [12] 5556 	add	a,#0xfc
      001E1C F5 81            [12] 5557 	mov	sp,a
                                   5558 ;	calc.c:265: break;
      001E1E 02r2BrA3         [24] 5559 	ljmp	00249$
                                   5560 ;	calc.c:267: case '#':
      001E21                       5561 00189$:
                                   5562 ;	calc.c:268: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      001E21 C0 05            [24] 5563 	push	ar5
      001E23 C0 06            [24] 5564 	push	ar6
      001E25 C0 07            [24] 5565 	push	ar7
      001E27 E5*00            [12] 5566 	mov	a,_bp
      001E29 24 15            [12] 5567 	add	a,#0x15
      001E2B FC               [12] 5568 	mov	r4,a
      001E2C 7B 00            [12] 5569 	mov	r3,#0x00
      001E2E 7A 40            [12] 5570 	mov	r2,#0x40
      001E30 E5*00            [12] 5571 	mov	a,_bp
      001E32 24 12            [12] 5572 	add	a,#0x12
      001E34 F8               [12] 5573 	mov	r0,a
      001E35 E5*00            [12] 5574 	mov	a,_bp
      001E37 24 0E            [12] 5575 	add	a,#0x0e
      001E39 F9               [12] 5576 	mov	r1,a
      001E3A 74 11            [12] 5577 	mov	a,#0x11
      001E3C 26               [12] 5578 	add	a,@r0
      001E3D F7               [12] 5579 	mov	@r1,a
      001E3E 74 40            [12] 5580 	mov	a,#0x40
      001E40 08               [12] 5581 	inc	r0
      001E41 36               [12] 5582 	addc	a,@r0
      001E42 09               [12] 5583 	inc	r1
      001E43 F7               [12] 5584 	mov	@r1,a
      001E44 08               [12] 5585 	inc	r0
      001E45 09               [12] 5586 	inc	r1
      001E46 E6               [12] 5587 	mov	a,@r0
      001E47 F7               [12] 5588 	mov	@r1,a
      001E48 E5*00            [12] 5589 	mov	a,_bp
      001E4A 24 0E            [12] 5590 	add	a,#0x0e
      001E4C F8               [12] 5591 	mov	r0,a
      001E4D 86 82            [24] 5592 	mov	dpl,@r0
      001E4F 08               [12] 5593 	inc	r0
      001E50 86 83            [24] 5594 	mov	dph,@r0
      001E52 08               [12] 5595 	inc	r0
      001E53 86 F0            [24] 5596 	mov	b,@r0
      001E55 12r00r00         [24] 5597 	lcall	__gptrget
      001E58 FD               [12] 5598 	mov	r5,a
      001E59 A3               [24] 5599 	inc	dptr
      001E5A 12r00r00         [24] 5600 	lcall	__gptrget
      001E5D FE               [12] 5601 	mov	r6,a
      001E5E A3               [24] 5602 	inc	dptr
      001E5F 12r00r00         [24] 5603 	lcall	__gptrget
      001E62 FF               [12] 5604 	mov	r7,a
      001E63 C0 05            [24] 5605 	push	ar5
      001E65 C0 04            [24] 5606 	push	ar4
      001E67 C0 03            [24] 5607 	push	ar3
      001E69 C0 02            [24] 5608 	push	ar2
      001E6B 8D 82            [24] 5609 	mov	dpl,r5
      001E6D 8E 83            [24] 5610 	mov	dph,r6
      001E6F 8F F0            [24] 5611 	mov	b,r7
      001E71 12r00r00         [24] 5612 	lcall	_stack_pop
      001E74 AE 82            [24] 5613 	mov	r6,dpl
      001E76 AF 83            [24] 5614 	mov	r7,dph
      001E78 15 81            [12] 5615 	dec	sp
      001E7A 15 81            [12] 5616 	dec	sp
      001E7C 15 81            [12] 5617 	dec	sp
      001E7E D0 05            [24] 5618 	pop	ar5
      001E80 EE               [12] 5619 	mov	a,r6
      001E81 4F               [12] 5620 	orl	a,r7
      001E82 D0 07            [24] 5621 	pop	ar7
      001E84 D0 06            [24] 5622 	pop	ar6
      001E86 D0 05            [24] 5623 	pop	ar5
      001E88 70 25            [24] 5624 	jnz	00200$
      001E8A 7Fr4E            [12] 5625 	mov	r7,#___str_10
      001E8C 7Es00            [12] 5626 	mov	r6,#(___str_10 >> 8)
      001E8E 7D 80            [12] 5627 	mov	r5,#0x80
                                   5628 ;	calc.c:58: return;
      001E90                       5629 00453$:
                                   5630 ;	calc.c:56: for (; *s; s++) putchar(*s);
      001E90 8F 82            [24] 5631 	mov	dpl,r7
      001E92 8E 83            [24] 5632 	mov	dph,r6
      001E94 8D F0            [24] 5633 	mov	b,r5
      001E96 12r00r00         [24] 5634 	lcall	__gptrget
      001E99 FC               [12] 5635 	mov	r4,a
      001E9A 70 03            [24] 5636 	jnz	01355$
      001E9C 02r2BrA3         [24] 5637 	ljmp	00249$
      001E9F                       5638 01355$:
      001E9F 7B 00            [12] 5639 	mov	r3,#0x00
      001EA1 8C 82            [24] 5640 	mov	dpl,r4
      001EA3 8B 83            [24] 5641 	mov	dph,r3
      001EA5 12r00r00         [24] 5642 	lcall	_putchar
      001EA8 0F               [12] 5643 	inc	r7
                                   5644 ;	calc.c:268: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      001EA9 BF 00 E4         [24] 5645 	cjne	r7,#0x00,00453$
      001EAC 0E               [12] 5646 	inc	r6
      001EAD 80 E1            [24] 5647 	sjmp	00453$
      001EAF                       5648 00200$:
                                   5649 ;	calc.c:269: else if (!stack_pop(ctx->ps, &d1)) {
      001EAF C0 05            [24] 5650 	push	ar5
      001EB1 C0 06            [24] 5651 	push	ar6
      001EB3 C0 07            [24] 5652 	push	ar7
      001EB5 E5*00            [12] 5653 	mov	a,_bp
      001EB7 24 19            [12] 5654 	add	a,#0x19
      001EB9 FC               [12] 5655 	mov	r4,a
      001EBA 7B 00            [12] 5656 	mov	r3,#0x00
      001EBC 7A 40            [12] 5657 	mov	r2,#0x40
      001EBE E5*00            [12] 5658 	mov	a,_bp
      001EC0 24 0E            [12] 5659 	add	a,#0x0e
      001EC2 F8               [12] 5660 	mov	r0,a
      001EC3 86 82            [24] 5661 	mov	dpl,@r0
      001EC5 08               [12] 5662 	inc	r0
      001EC6 86 83            [24] 5663 	mov	dph,@r0
      001EC8 08               [12] 5664 	inc	r0
      001EC9 86 F0            [24] 5665 	mov	b,@r0
      001ECB 12r00r00         [24] 5666 	lcall	__gptrget
      001ECE FD               [12] 5667 	mov	r5,a
      001ECF A3               [24] 5668 	inc	dptr
      001ED0 12r00r00         [24] 5669 	lcall	__gptrget
      001ED3 FE               [12] 5670 	mov	r6,a
      001ED4 A3               [24] 5671 	inc	dptr
      001ED5 12r00r00         [24] 5672 	lcall	__gptrget
      001ED8 FF               [12] 5673 	mov	r7,a
      001ED9 C0 05            [24] 5674 	push	ar5
      001EDB C0 04            [24] 5675 	push	ar4
      001EDD C0 03            [24] 5676 	push	ar3
      001EDF C0 02            [24] 5677 	push	ar2
      001EE1 8D 82            [24] 5678 	mov	dpl,r5
      001EE3 8E 83            [24] 5679 	mov	dph,r6
      001EE5 8F F0            [24] 5680 	mov	b,r7
      001EE7 12r00r00         [24] 5681 	lcall	_stack_pop
      001EEA AE 82            [24] 5682 	mov	r6,dpl
      001EEC AF 83            [24] 5683 	mov	r7,dph
      001EEE 15 81            [12] 5684 	dec	sp
      001EF0 15 81            [12] 5685 	dec	sp
      001EF2 15 81            [12] 5686 	dec	sp
      001EF4 D0 05            [24] 5687 	pop	ar5
      001EF6 EE               [12] 5688 	mov	a,r6
      001EF7 4F               [12] 5689 	orl	a,r7
      001EF8 D0 07            [24] 5690 	pop	ar7
      001EFA D0 06            [24] 5691 	pop	ar6
      001EFC D0 05            [24] 5692 	pop	ar5
      001EFE 70 63            [24] 5693 	jnz	00197$
                                   5694 ;	calc.c:270: (void)stack_push(ctx->ps, d0);
      001F00 E5*00            [12] 5695 	mov	a,_bp
      001F02 24 0E            [12] 5696 	add	a,#0x0e
      001F04 F8               [12] 5697 	mov	r0,a
      001F05 86 82            [24] 5698 	mov	dpl,@r0
      001F07 08               [12] 5699 	inc	r0
      001F08 86 83            [24] 5700 	mov	dph,@r0
      001F0A 08               [12] 5701 	inc	r0
      001F0B 86 F0            [24] 5702 	mov	b,@r0
      001F0D 12r00r00         [24] 5703 	lcall	__gptrget
      001F10 FA               [12] 5704 	mov	r2,a
      001F11 A3               [24] 5705 	inc	dptr
      001F12 12r00r00         [24] 5706 	lcall	__gptrget
      001F15 FB               [12] 5707 	mov	r3,a
      001F16 A3               [24] 5708 	inc	dptr
      001F17 12r00r00         [24] 5709 	lcall	__gptrget
      001F1A FC               [12] 5710 	mov	r4,a
      001F1B E5*00            [12] 5711 	mov	a,_bp
      001F1D 24 15            [12] 5712 	add	a,#0x15
      001F1F F8               [12] 5713 	mov	r0,a
      001F20 E6               [12] 5714 	mov	a,@r0
      001F21 C0 E0            [24] 5715 	push	acc
      001F23 08               [12] 5716 	inc	r0
      001F24 E6               [12] 5717 	mov	a,@r0
      001F25 C0 E0            [24] 5718 	push	acc
      001F27 08               [12] 5719 	inc	r0
      001F28 E6               [12] 5720 	mov	a,@r0
      001F29 C0 E0            [24] 5721 	push	acc
      001F2B 08               [12] 5722 	inc	r0
      001F2C E6               [12] 5723 	mov	a,@r0
      001F2D C0 E0            [24] 5724 	push	acc
      001F2F 8A 82            [24] 5725 	mov	dpl,r2
      001F31 8B 83            [24] 5726 	mov	dph,r3
      001F33 8C F0            [24] 5727 	mov	b,r4
      001F35 12r00r00         [24] 5728 	lcall	_stack_push
      001F38 E5 81            [12] 5729 	mov	a,sp
      001F3A 24 FC            [12] 5730 	add	a,#0xfc
      001F3C F5 81            [12] 5731 	mov	sp,a
                                   5732 ;	calc.c:271: printstr("\r\nstack underflow\r\n");
      001F3E 7Fr4E            [12] 5733 	mov	r7,#___str_10
      001F40 7Es00            [12] 5734 	mov	r6,#(___str_10 >> 8)
      001F42 7D 80            [12] 5735 	mov	r5,#0x80
                                   5736 ;	calc.c:58: return;
      001F44                       5737 00456$:
                                   5738 ;	calc.c:56: for (; *s; s++) putchar(*s);
      001F44 8F 82            [24] 5739 	mov	dpl,r7
      001F46 8E 83            [24] 5740 	mov	dph,r6
      001F48 8D F0            [24] 5741 	mov	b,r5
      001F4A 12r00r00         [24] 5742 	lcall	__gptrget
      001F4D FC               [12] 5743 	mov	r4,a
      001F4E 70 03            [24] 5744 	jnz	01358$
      001F50 02r2BrA3         [24] 5745 	ljmp	00249$
      001F53                       5746 01358$:
      001F53 7B 00            [12] 5747 	mov	r3,#0x00
      001F55 8C 82            [24] 5748 	mov	dpl,r4
      001F57 8B 83            [24] 5749 	mov	dph,r3
      001F59 12r00r00         [24] 5750 	lcall	_putchar
      001F5C 0F               [12] 5751 	inc	r7
                                   5752 ;	calc.c:271: printstr("\r\nstack underflow\r\n");
      001F5D BF 00 E4         [24] 5753 	cjne	r7,#0x00,00456$
      001F60 0E               [12] 5754 	inc	r6
      001F61 80 E1            [24] 5755 	sjmp	00456$
      001F63                       5756 00197$:
                                   5757 ;	calc.c:272: } else if (!d0) {
      001F63 E5*00            [12] 5758 	mov	a,_bp
      001F65 24 15            [12] 5759 	add	a,#0x15
      001F67 F8               [12] 5760 	mov	r0,a
      001F68 E6               [12] 5761 	mov	a,@r0
      001F69 08               [12] 5762 	inc	r0
      001F6A 46               [12] 5763 	orl	a,@r0
      001F6B 08               [12] 5764 	inc	r0
      001F6C 46               [12] 5765 	orl	a,@r0
      001F6D 08               [12] 5766 	inc	r0
      001F6E 46               [12] 5767 	orl	a,@r0
      001F6F 60 03            [24] 5768 	jz	01360$
      001F71 02r20r15         [24] 5769 	ljmp	00194$
      001F74                       5770 01360$:
                                   5771 ;	calc.c:273: (void)stack_push(ctx->ps, d1);
      001F74 E5*00            [12] 5772 	mov	a,_bp
      001F76 24 0E            [12] 5773 	add	a,#0x0e
      001F78 F8               [12] 5774 	mov	r0,a
      001F79 86 82            [24] 5775 	mov	dpl,@r0
      001F7B 08               [12] 5776 	inc	r0
      001F7C 86 83            [24] 5777 	mov	dph,@r0
      001F7E 08               [12] 5778 	inc	r0
      001F7F 86 F0            [24] 5779 	mov	b,@r0
      001F81 12r00r00         [24] 5780 	lcall	__gptrget
      001F84 FA               [12] 5781 	mov	r2,a
      001F85 A3               [24] 5782 	inc	dptr
      001F86 12r00r00         [24] 5783 	lcall	__gptrget
      001F89 FB               [12] 5784 	mov	r3,a
      001F8A A3               [24] 5785 	inc	dptr
      001F8B 12r00r00         [24] 5786 	lcall	__gptrget
      001F8E FC               [12] 5787 	mov	r4,a
      001F8F E5*00            [12] 5788 	mov	a,_bp
      001F91 24 19            [12] 5789 	add	a,#0x19
      001F93 F8               [12] 5790 	mov	r0,a
      001F94 E6               [12] 5791 	mov	a,@r0
      001F95 C0 E0            [24] 5792 	push	acc
      001F97 08               [12] 5793 	inc	r0
      001F98 E6               [12] 5794 	mov	a,@r0
      001F99 C0 E0            [24] 5795 	push	acc
      001F9B 08               [12] 5796 	inc	r0
      001F9C E6               [12] 5797 	mov	a,@r0
      001F9D C0 E0            [24] 5798 	push	acc
      001F9F 08               [12] 5799 	inc	r0
      001FA0 E6               [12] 5800 	mov	a,@r0
      001FA1 C0 E0            [24] 5801 	push	acc
      001FA3 8A 82            [24] 5802 	mov	dpl,r2
      001FA5 8B 83            [24] 5803 	mov	dph,r3
      001FA7 8C F0            [24] 5804 	mov	b,r4
      001FA9 12r00r00         [24] 5805 	lcall	_stack_push
      001FAC E5 81            [12] 5806 	mov	a,sp
      001FAE 24 FC            [12] 5807 	add	a,#0xfc
      001FB0 F5 81            [12] 5808 	mov	sp,a
                                   5809 ;	calc.c:274: (void)stack_push(ctx->ps, d0);			
      001FB2 E5*00            [12] 5810 	mov	a,_bp
      001FB4 24 0E            [12] 5811 	add	a,#0x0e
      001FB6 F8               [12] 5812 	mov	r0,a
      001FB7 86 82            [24] 5813 	mov	dpl,@r0
      001FB9 08               [12] 5814 	inc	r0
      001FBA 86 83            [24] 5815 	mov	dph,@r0
      001FBC 08               [12] 5816 	inc	r0
      001FBD 86 F0            [24] 5817 	mov	b,@r0
      001FBF 12r00r00         [24] 5818 	lcall	__gptrget
      001FC2 FA               [12] 5819 	mov	r2,a
      001FC3 A3               [24] 5820 	inc	dptr
      001FC4 12r00r00         [24] 5821 	lcall	__gptrget
      001FC7 FB               [12] 5822 	mov	r3,a
      001FC8 A3               [24] 5823 	inc	dptr
      001FC9 12r00r00         [24] 5824 	lcall	__gptrget
      001FCC FC               [12] 5825 	mov	r4,a
      001FCD E5*00            [12] 5826 	mov	a,_bp
      001FCF 24 15            [12] 5827 	add	a,#0x15
      001FD1 F8               [12] 5828 	mov	r0,a
      001FD2 E6               [12] 5829 	mov	a,@r0
      001FD3 C0 E0            [24] 5830 	push	acc
      001FD5 08               [12] 5831 	inc	r0
      001FD6 E6               [12] 5832 	mov	a,@r0
      001FD7 C0 E0            [24] 5833 	push	acc
      001FD9 08               [12] 5834 	inc	r0
      001FDA E6               [12] 5835 	mov	a,@r0
      001FDB C0 E0            [24] 5836 	push	acc
      001FDD 08               [12] 5837 	inc	r0
      001FDE E6               [12] 5838 	mov	a,@r0
      001FDF C0 E0            [24] 5839 	push	acc
      001FE1 8A 82            [24] 5840 	mov	dpl,r2
      001FE3 8B 83            [24] 5841 	mov	dph,r3
      001FE5 8C F0            [24] 5842 	mov	b,r4
      001FE7 12r00r00         [24] 5843 	lcall	_stack_push
      001FEA E5 81            [12] 5844 	mov	a,sp
      001FEC 24 FC            [12] 5845 	add	a,#0xfc
      001FEE F5 81            [12] 5846 	mov	sp,a
                                   5847 ;	calc.c:275: printstr("\r\ndivision by zero\r\n");
      001FF0 7FrB0            [12] 5848 	mov	r7,#___str_14
      001FF2 7Es00            [12] 5849 	mov	r6,#(___str_14 >> 8)
      001FF4 7D 80            [12] 5850 	mov	r5,#0x80
                                   5851 ;	calc.c:58: return;
      001FF6                       5852 00459$:
                                   5853 ;	calc.c:56: for (; *s; s++) putchar(*s);
      001FF6 8F 82            [24] 5854 	mov	dpl,r7
      001FF8 8E 83            [24] 5855 	mov	dph,r6
      001FFA 8D F0            [24] 5856 	mov	b,r5
      001FFC 12r00r00         [24] 5857 	lcall	__gptrget
      001FFF FC               [12] 5858 	mov	r4,a
      002000 70 03            [24] 5859 	jnz	01361$
      002002 02r2BrA3         [24] 5860 	ljmp	00249$
      002005                       5861 01361$:
      002005 7B 00            [12] 5862 	mov	r3,#0x00
      002007 8C 82            [24] 5863 	mov	dpl,r4
      002009 8B 83            [24] 5864 	mov	dph,r3
      00200B 12r00r00         [24] 5865 	lcall	_putchar
      00200E 0F               [12] 5866 	inc	r7
                                   5867 ;	calc.c:275: printstr("\r\ndivision by zero\r\n");
      00200F BF 00 E4         [24] 5868 	cjne	r7,#0x00,00459$
      002012 0E               [12] 5869 	inc	r6
      002013 80 E1            [24] 5870 	sjmp	00459$
      002015                       5871 00194$:
                                   5872 ;	calc.c:277: if (ctx->digit[0] == '%') d1 %= d0;
      002015 8D 82            [24] 5873 	mov	dpl,r5
      002017 8E 83            [24] 5874 	mov	dph,r6
      002019 8F F0            [24] 5875 	mov	b,r7
      00201B 12r00r00         [24] 5876 	lcall	__gptrget
      00201E FD               [12] 5877 	mov	r5,a
      00201F BD 25 45         [24] 5878 	cjne	r5,#0x25,00191$
      002022 E5*00            [12] 5879 	mov	a,_bp
      002024 24 15            [12] 5880 	add	a,#0x15
      002026 F8               [12] 5881 	mov	r0,a
      002027 E6               [12] 5882 	mov	a,@r0
      002028 C0 E0            [24] 5883 	push	acc
      00202A 08               [12] 5884 	inc	r0
      00202B E6               [12] 5885 	mov	a,@r0
      00202C C0 E0            [24] 5886 	push	acc
      00202E 08               [12] 5887 	inc	r0
      00202F E6               [12] 5888 	mov	a,@r0
      002030 C0 E0            [24] 5889 	push	acc
      002032 08               [12] 5890 	inc	r0
      002033 E6               [12] 5891 	mov	a,@r0
      002034 C0 E0            [24] 5892 	push	acc
      002036 E5*00            [12] 5893 	mov	a,_bp
      002038 24 19            [12] 5894 	add	a,#0x19
      00203A F8               [12] 5895 	mov	r0,a
      00203B 86 82            [24] 5896 	mov	dpl,@r0
      00203D 08               [12] 5897 	inc	r0
      00203E 86 83            [24] 5898 	mov	dph,@r0
      002040 08               [12] 5899 	inc	r0
      002041 86 F0            [24] 5900 	mov	b,@r0
      002043 08               [12] 5901 	inc	r0
      002044 E6               [12] 5902 	mov	a,@r0
      002045 12r00r00         [24] 5903 	lcall	__modslong
      002048 AC 82            [24] 5904 	mov	r4,dpl
      00204A AD 83            [24] 5905 	mov	r5,dph
      00204C AE F0            [24] 5906 	mov	r6,b
      00204E FF               [12] 5907 	mov	r7,a
      00204F E5 81            [12] 5908 	mov	a,sp
      002051 24 FC            [12] 5909 	add	a,#0xfc
      002053 F5 81            [12] 5910 	mov	sp,a
      002055 E5*00            [12] 5911 	mov	a,_bp
      002057 24 19            [12] 5912 	add	a,#0x19
      002059 F8               [12] 5913 	mov	r0,a
      00205A A6 04            [24] 5914 	mov	@r0,ar4
      00205C 08               [12] 5915 	inc	r0
      00205D A6 05            [24] 5916 	mov	@r0,ar5
      00205F 08               [12] 5917 	inc	r0
      002060 A6 06            [24] 5918 	mov	@r0,ar6
      002062 08               [12] 5919 	inc	r0
      002063 A6 07            [24] 5920 	mov	@r0,ar7
      002065 80 5F            [24] 5921 	sjmp	00192$
      002067                       5922 00191$:
                                   5923 ;	calc.c:278: else d1 = (unsigned long)d1 % (unsigned long)d0;
      002067 E5*00            [12] 5924 	mov	a,_bp
      002069 24 19            [12] 5925 	add	a,#0x19
      00206B F8               [12] 5926 	mov	r0,a
      00206C E5*00            [12] 5927 	mov	a,_bp
      00206E 24 07            [12] 5928 	add	a,#0x07
      002070 F9               [12] 5929 	mov	r1,a
      002071 E6               [12] 5930 	mov	a,@r0
      002072 F7               [12] 5931 	mov	@r1,a
      002073 08               [12] 5932 	inc	r0
      002074 09               [12] 5933 	inc	r1
      002075 E6               [12] 5934 	mov	a,@r0
      002076 F7               [12] 5935 	mov	@r1,a
      002077 08               [12] 5936 	inc	r0
      002078 09               [12] 5937 	inc	r1
      002079 E6               [12] 5938 	mov	a,@r0
      00207A F7               [12] 5939 	mov	@r1,a
      00207B 08               [12] 5940 	inc	r0
      00207C 09               [12] 5941 	inc	r1
      00207D E6               [12] 5942 	mov	a,@r0
      00207E F7               [12] 5943 	mov	@r1,a
      00207F E5*00            [12] 5944 	mov	a,_bp
      002081 24 15            [12] 5945 	add	a,#0x15
      002083 F8               [12] 5946 	mov	r0,a
      002084 86 02            [24] 5947 	mov	ar2,@r0
      002086 08               [12] 5948 	inc	r0
      002087 86 03            [24] 5949 	mov	ar3,@r0
      002089 08               [12] 5950 	inc	r0
      00208A 86 06            [24] 5951 	mov	ar6,@r0
      00208C 08               [12] 5952 	inc	r0
      00208D 86 07            [24] 5953 	mov	ar7,@r0
      00208F C0 02            [24] 5954 	push	ar2
      002091 C0 03            [24] 5955 	push	ar3
      002093 C0 06            [24] 5956 	push	ar6
      002095 C0 07            [24] 5957 	push	ar7
      002097 E5*00            [12] 5958 	mov	a,_bp
      002099 24 07            [12] 5959 	add	a,#0x07
      00209B F8               [12] 5960 	mov	r0,a
      00209C 86 82            [24] 5961 	mov	dpl,@r0
      00209E 08               [12] 5962 	inc	r0
      00209F 86 83            [24] 5963 	mov	dph,@r0
      0020A1 08               [12] 5964 	inc	r0
      0020A2 86 F0            [24] 5965 	mov	b,@r0
      0020A4 08               [12] 5966 	inc	r0
      0020A5 E6               [12] 5967 	mov	a,@r0
      0020A6 12r00r00         [24] 5968 	lcall	__modulong
      0020A9 AC 82            [24] 5969 	mov	r4,dpl
      0020AB AD 83            [24] 5970 	mov	r5,dph
      0020AD AE F0            [24] 5971 	mov	r6,b
      0020AF FF               [12] 5972 	mov	r7,a
      0020B0 E5 81            [12] 5973 	mov	a,sp
      0020B2 24 FC            [12] 5974 	add	a,#0xfc
      0020B4 F5 81            [12] 5975 	mov	sp,a
      0020B6 E5*00            [12] 5976 	mov	a,_bp
      0020B8 24 19            [12] 5977 	add	a,#0x19
      0020BA F8               [12] 5978 	mov	r0,a
      0020BB A6 04            [24] 5979 	mov	@r0,ar4
      0020BD 08               [12] 5980 	inc	r0
      0020BE A6 05            [24] 5981 	mov	@r0,ar5
      0020C0 08               [12] 5982 	inc	r0
      0020C1 A6 06            [24] 5983 	mov	@r0,ar6
      0020C3 08               [12] 5984 	inc	r0
      0020C4 A6 07            [24] 5985 	mov	@r0,ar7
      0020C6                       5986 00192$:
                                   5987 ;	calc.c:279: (void)stack_push(ctx->ps, d1);
      0020C6 E5*00            [12] 5988 	mov	a,_bp
      0020C8 24 0E            [12] 5989 	add	a,#0x0e
      0020CA F8               [12] 5990 	mov	r0,a
      0020CB 86 82            [24] 5991 	mov	dpl,@r0
      0020CD 08               [12] 5992 	inc	r0
      0020CE 86 83            [24] 5993 	mov	dph,@r0
      0020D0 08               [12] 5994 	inc	r0
      0020D1 86 F0            [24] 5995 	mov	b,@r0
      0020D3 12r00r00         [24] 5996 	lcall	__gptrget
      0020D6 FD               [12] 5997 	mov	r5,a
      0020D7 A3               [24] 5998 	inc	dptr
      0020D8 12r00r00         [24] 5999 	lcall	__gptrget
      0020DB FE               [12] 6000 	mov	r6,a
      0020DC A3               [24] 6001 	inc	dptr
      0020DD 12r00r00         [24] 6002 	lcall	__gptrget
      0020E0 FF               [12] 6003 	mov	r7,a
      0020E1 E5*00            [12] 6004 	mov	a,_bp
      0020E3 24 19            [12] 6005 	add	a,#0x19
      0020E5 F8               [12] 6006 	mov	r0,a
      0020E6 E6               [12] 6007 	mov	a,@r0
      0020E7 C0 E0            [24] 6008 	push	acc
      0020E9 08               [12] 6009 	inc	r0
      0020EA E6               [12] 6010 	mov	a,@r0
      0020EB C0 E0            [24] 6011 	push	acc
      0020ED 08               [12] 6012 	inc	r0
      0020EE E6               [12] 6013 	mov	a,@r0
      0020EF C0 E0            [24] 6014 	push	acc
      0020F1 08               [12] 6015 	inc	r0
      0020F2 E6               [12] 6016 	mov	a,@r0
      0020F3 C0 E0            [24] 6017 	push	acc
      0020F5 8D 82            [24] 6018 	mov	dpl,r5
      0020F7 8E 83            [24] 6019 	mov	dph,r6
      0020F9 8F F0            [24] 6020 	mov	b,r7
      0020FB 12r00r00         [24] 6021 	lcall	_stack_push
      0020FE E5 81            [12] 6022 	mov	a,sp
      002100 24 FC            [12] 6023 	add	a,#0xfc
      002102 F5 81            [12] 6024 	mov	sp,a
                                   6025 ;	calc.c:281: break;
      002104 02r2BrA3         [24] 6026 	ljmp	00249$
                                   6027 ;	calc.c:282: case '&':
      002107                       6028 00202$:
                                   6029 ;	calc.c:283: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      002107 E5*00            [12] 6030 	mov	a,_bp
      002109 24 15            [12] 6031 	add	a,#0x15
      00210B FF               [12] 6032 	mov	r7,a
      00210C E5*00            [12] 6033 	mov	a,_bp
      00210E 24 0E            [12] 6034 	add	a,#0x0e
      002110 F8               [12] 6035 	mov	r0,a
      002111 A6 07            [24] 6036 	mov	@r0,ar7
      002113 08               [12] 6037 	inc	r0
      002114 76 00            [12] 6038 	mov	@r0,#0x00
      002116 08               [12] 6039 	inc	r0
      002117 76 40            [12] 6040 	mov	@r0,#0x40
      002119 E5*00            [12] 6041 	mov	a,_bp
      00211B 24 12            [12] 6042 	add	a,#0x12
      00211D F8               [12] 6043 	mov	r0,a
      00211E 74 11            [12] 6044 	mov	a,#0x11
      002120 26               [12] 6045 	add	a,@r0
      002121 FA               [12] 6046 	mov	r2,a
      002122 74 40            [12] 6047 	mov	a,#0x40
      002124 08               [12] 6048 	inc	r0
      002125 36               [12] 6049 	addc	a,@r0
      002126 FB               [12] 6050 	mov	r3,a
      002127 08               [12] 6051 	inc	r0
      002128 86 04            [24] 6052 	mov	ar4,@r0
      00212A 8A 82            [24] 6053 	mov	dpl,r2
      00212C 8B 83            [24] 6054 	mov	dph,r3
      00212E 8C F0            [24] 6055 	mov	b,r4
      002130 12r00r00         [24] 6056 	lcall	__gptrget
      002133 FD               [12] 6057 	mov	r5,a
      002134 A3               [24] 6058 	inc	dptr
      002135 12r00r00         [24] 6059 	lcall	__gptrget
      002138 FE               [12] 6060 	mov	r6,a
      002139 A3               [24] 6061 	inc	dptr
      00213A 12r00r00         [24] 6062 	lcall	__gptrget
      00213D FF               [12] 6063 	mov	r7,a
      00213E C0 04            [24] 6064 	push	ar4
      002140 C0 03            [24] 6065 	push	ar3
      002142 C0 02            [24] 6066 	push	ar2
      002144 E5*00            [12] 6067 	mov	a,_bp
      002146 24 0E            [12] 6068 	add	a,#0x0e
      002148 F8               [12] 6069 	mov	r0,a
      002149 E6               [12] 6070 	mov	a,@r0
      00214A C0 E0            [24] 6071 	push	acc
      00214C 08               [12] 6072 	inc	r0
      00214D E6               [12] 6073 	mov	a,@r0
      00214E C0 E0            [24] 6074 	push	acc
      002150 08               [12] 6075 	inc	r0
      002151 E6               [12] 6076 	mov	a,@r0
      002152 C0 E0            [24] 6077 	push	acc
      002154 8D 82            [24] 6078 	mov	dpl,r5
      002156 8E 83            [24] 6079 	mov	dph,r6
      002158 8F F0            [24] 6080 	mov	b,r7
      00215A 12r00r00         [24] 6081 	lcall	_stack_pop
      00215D AE 82            [24] 6082 	mov	r6,dpl
      00215F AF 83            [24] 6083 	mov	r7,dph
      002161 15 81            [12] 6084 	dec	sp
      002163 15 81            [12] 6085 	dec	sp
      002165 15 81            [12] 6086 	dec	sp
      002167 D0 02            [24] 6087 	pop	ar2
      002169 D0 03            [24] 6088 	pop	ar3
      00216B D0 04            [24] 6089 	pop	ar4
      00216D EE               [12] 6090 	mov	a,r6
      00216E 4F               [12] 6091 	orl	a,r7
      00216F 70 25            [24] 6092 	jnz	00207$
      002171 7Dr4E            [12] 6093 	mov	r5,#___str_10
      002173 7Cs00            [12] 6094 	mov	r4,#(___str_10 >> 8)
      002175 7B 80            [12] 6095 	mov	r3,#0x80
                                   6096 ;	calc.c:58: return;
      002177                       6097 00462$:
                                   6098 ;	calc.c:56: for (; *s; s++) putchar(*s);
      002177 8D 82            [24] 6099 	mov	dpl,r5
      002179 8C 83            [24] 6100 	mov	dph,r4
      00217B 8B F0            [24] 6101 	mov	b,r3
      00217D 12r00r00         [24] 6102 	lcall	__gptrget
      002180 FF               [12] 6103 	mov	r7,a
      002181 70 03            [24] 6104 	jnz	01366$
      002183 02r2BrA3         [24] 6105 	ljmp	00249$
      002186                       6106 01366$:
      002186 7E 00            [12] 6107 	mov	r6,#0x00
      002188 8F 82            [24] 6108 	mov	dpl,r7
      00218A 8E 83            [24] 6109 	mov	dph,r6
      00218C 12r00r00         [24] 6110 	lcall	_putchar
      00218F 0D               [12] 6111 	inc	r5
                                   6112 ;	calc.c:283: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      002190 BD 00 E4         [24] 6113 	cjne	r5,#0x00,00462$
      002193 0C               [12] 6114 	inc	r4
      002194 80 E1            [24] 6115 	sjmp	00462$
      002196                       6116 00207$:
                                   6117 ;	calc.c:284: else if (!stack_pop(ctx->ps, &d1)) {
      002196 E5*00            [12] 6118 	mov	a,_bp
      002198 24 19            [12] 6119 	add	a,#0x19
      00219A FF               [12] 6120 	mov	r7,a
      00219B E5*00            [12] 6121 	mov	a,_bp
      00219D 24 0E            [12] 6122 	add	a,#0x0e
      00219F F8               [12] 6123 	mov	r0,a
      0021A0 A6 07            [24] 6124 	mov	@r0,ar7
      0021A2 08               [12] 6125 	inc	r0
      0021A3 76 00            [12] 6126 	mov	@r0,#0x00
      0021A5 08               [12] 6127 	inc	r0
      0021A6 76 40            [12] 6128 	mov	@r0,#0x40
      0021A8 8A 82            [24] 6129 	mov	dpl,r2
      0021AA 8B 83            [24] 6130 	mov	dph,r3
      0021AC 8C F0            [24] 6131 	mov	b,r4
      0021AE 12r00r00         [24] 6132 	lcall	__gptrget
      0021B1 FD               [12] 6133 	mov	r5,a
      0021B2 A3               [24] 6134 	inc	dptr
      0021B3 12r00r00         [24] 6135 	lcall	__gptrget
      0021B6 FE               [12] 6136 	mov	r6,a
      0021B7 A3               [24] 6137 	inc	dptr
      0021B8 12r00r00         [24] 6138 	lcall	__gptrget
      0021BB FF               [12] 6139 	mov	r7,a
      0021BC C0 04            [24] 6140 	push	ar4
      0021BE C0 03            [24] 6141 	push	ar3
      0021C0 C0 02            [24] 6142 	push	ar2
      0021C2 E5*00            [12] 6143 	mov	a,_bp
      0021C4 24 0E            [12] 6144 	add	a,#0x0e
      0021C6 F8               [12] 6145 	mov	r0,a
      0021C7 E6               [12] 6146 	mov	a,@r0
      0021C8 C0 E0            [24] 6147 	push	acc
      0021CA 08               [12] 6148 	inc	r0
      0021CB E6               [12] 6149 	mov	a,@r0
      0021CC C0 E0            [24] 6150 	push	acc
      0021CE 08               [12] 6151 	inc	r0
      0021CF E6               [12] 6152 	mov	a,@r0
      0021D0 C0 E0            [24] 6153 	push	acc
      0021D2 8D 82            [24] 6154 	mov	dpl,r5
      0021D4 8E 83            [24] 6155 	mov	dph,r6
      0021D6 8F F0            [24] 6156 	mov	b,r7
      0021D8 12r00r00         [24] 6157 	lcall	_stack_pop
      0021DB AE 82            [24] 6158 	mov	r6,dpl
      0021DD AF 83            [24] 6159 	mov	r7,dph
      0021DF 15 81            [12] 6160 	dec	sp
      0021E1 15 81            [12] 6161 	dec	sp
      0021E3 15 81            [12] 6162 	dec	sp
      0021E5 D0 02            [24] 6163 	pop	ar2
      0021E7 D0 03            [24] 6164 	pop	ar3
      0021E9 D0 04            [24] 6165 	pop	ar4
      0021EB EE               [12] 6166 	mov	a,r6
      0021EC 4F               [12] 6167 	orl	a,r7
      0021ED 70 5C            [24] 6168 	jnz	00204$
                                   6169 ;	calc.c:285: (void)stack_push(ctx->ps, d0);
      0021EF 8A 82            [24] 6170 	mov	dpl,r2
      0021F1 8B 83            [24] 6171 	mov	dph,r3
      0021F3 8C F0            [24] 6172 	mov	b,r4
      0021F5 12r00r00         [24] 6173 	lcall	__gptrget
      0021F8 FD               [12] 6174 	mov	r5,a
      0021F9 A3               [24] 6175 	inc	dptr
      0021FA 12r00r00         [24] 6176 	lcall	__gptrget
      0021FD FE               [12] 6177 	mov	r6,a
      0021FE A3               [24] 6178 	inc	dptr
      0021FF 12r00r00         [24] 6179 	lcall	__gptrget
      002202 FF               [12] 6180 	mov	r7,a
      002203 E5*00            [12] 6181 	mov	a,_bp
      002205 24 15            [12] 6182 	add	a,#0x15
      002207 F8               [12] 6183 	mov	r0,a
      002208 E6               [12] 6184 	mov	a,@r0
      002209 C0 E0            [24] 6185 	push	acc
      00220B 08               [12] 6186 	inc	r0
      00220C E6               [12] 6187 	mov	a,@r0
      00220D C0 E0            [24] 6188 	push	acc
      00220F 08               [12] 6189 	inc	r0
      002210 E6               [12] 6190 	mov	a,@r0
      002211 C0 E0            [24] 6191 	push	acc
      002213 08               [12] 6192 	inc	r0
      002214 E6               [12] 6193 	mov	a,@r0
      002215 C0 E0            [24] 6194 	push	acc
      002217 8D 82            [24] 6195 	mov	dpl,r5
      002219 8E 83            [24] 6196 	mov	dph,r6
      00221B 8F F0            [24] 6197 	mov	b,r7
      00221D 12r00r00         [24] 6198 	lcall	_stack_push
      002220 E5 81            [12] 6199 	mov	a,sp
      002222 24 FC            [12] 6200 	add	a,#0xfc
      002224 F5 81            [12] 6201 	mov	sp,a
                                   6202 ;	calc.c:286: printstr("\r\nstack underflow\r\n");
      002226 7Dr4E            [12] 6203 	mov	r5,#___str_10
      002228 7Cs00            [12] 6204 	mov	r4,#(___str_10 >> 8)
      00222A 7B 80            [12] 6205 	mov	r3,#0x80
                                   6206 ;	calc.c:58: return;
      00222C                       6207 00465$:
                                   6208 ;	calc.c:56: for (; *s; s++) putchar(*s);
      00222C 8D 82            [24] 6209 	mov	dpl,r5
      00222E 8C 83            [24] 6210 	mov	dph,r4
      002230 8B F0            [24] 6211 	mov	b,r3
      002232 12r00r00         [24] 6212 	lcall	__gptrget
      002235 FF               [12] 6213 	mov	r7,a
      002236 70 03            [24] 6214 	jnz	01369$
      002238 02r2BrA3         [24] 6215 	ljmp	00249$
      00223B                       6216 01369$:
      00223B 7E 00            [12] 6217 	mov	r6,#0x00
      00223D 8F 82            [24] 6218 	mov	dpl,r7
      00223F 8E 83            [24] 6219 	mov	dph,r6
      002241 12r00r00         [24] 6220 	lcall	_putchar
      002244 0D               [12] 6221 	inc	r5
                                   6222 ;	calc.c:286: printstr("\r\nstack underflow\r\n");
      002245 BD 00 E4         [24] 6223 	cjne	r5,#0x00,00465$
      002248 0C               [12] 6224 	inc	r4
      002249 80 E1            [24] 6225 	sjmp	00465$
      00224B                       6226 00204$:
                                   6227 ;	calc.c:288: d1 &= d0;
      00224B E5*00            [12] 6228 	mov	a,_bp
      00224D 24 19            [12] 6229 	add	a,#0x19
      00224F F8               [12] 6230 	mov	r0,a
      002250 E5*00            [12] 6231 	mov	a,_bp
      002252 24 15            [12] 6232 	add	a,#0x15
      002254 F9               [12] 6233 	mov	r1,a
      002255 E7               [12] 6234 	mov	a,@r1
      002256 56               [12] 6235 	anl	a,@r0
      002257 F6               [12] 6236 	mov	@r0,a
      002258 09               [12] 6237 	inc	r1
      002259 E7               [12] 6238 	mov	a,@r1
      00225A 08               [12] 6239 	inc	r0
      00225B 56               [12] 6240 	anl	a,@r0
      00225C F6               [12] 6241 	mov	@r0,a
      00225D 09               [12] 6242 	inc	r1
      00225E E7               [12] 6243 	mov	a,@r1
      00225F 08               [12] 6244 	inc	r0
      002260 56               [12] 6245 	anl	a,@r0
      002261 F6               [12] 6246 	mov	@r0,a
      002262 09               [12] 6247 	inc	r1
      002263 E7               [12] 6248 	mov	a,@r1
      002264 08               [12] 6249 	inc	r0
      002265 56               [12] 6250 	anl	a,@r0
      002266 F6               [12] 6251 	mov	@r0,a
                                   6252 ;	calc.c:289: (void)stack_push(ctx->ps, d1);
      002267 8A 82            [24] 6253 	mov	dpl,r2
      002269 8B 83            [24] 6254 	mov	dph,r3
      00226B 8C F0            [24] 6255 	mov	b,r4
      00226D 12r00r00         [24] 6256 	lcall	__gptrget
      002270 FA               [12] 6257 	mov	r2,a
      002271 A3               [24] 6258 	inc	dptr
      002272 12r00r00         [24] 6259 	lcall	__gptrget
      002275 FB               [12] 6260 	mov	r3,a
      002276 A3               [24] 6261 	inc	dptr
      002277 12r00r00         [24] 6262 	lcall	__gptrget
      00227A FC               [12] 6263 	mov	r4,a
      00227B E5*00            [12] 6264 	mov	a,_bp
      00227D 24 19            [12] 6265 	add	a,#0x19
      00227F F8               [12] 6266 	mov	r0,a
      002280 E6               [12] 6267 	mov	a,@r0
      002281 C0 E0            [24] 6268 	push	acc
      002283 08               [12] 6269 	inc	r0
      002284 E6               [12] 6270 	mov	a,@r0
      002285 C0 E0            [24] 6271 	push	acc
      002287 08               [12] 6272 	inc	r0
      002288 E6               [12] 6273 	mov	a,@r0
      002289 C0 E0            [24] 6274 	push	acc
      00228B 08               [12] 6275 	inc	r0
      00228C E6               [12] 6276 	mov	a,@r0
      00228D C0 E0            [24] 6277 	push	acc
      00228F 8A 82            [24] 6278 	mov	dpl,r2
      002291 8B 83            [24] 6279 	mov	dph,r3
      002293 8C F0            [24] 6280 	mov	b,r4
      002295 12r00r00         [24] 6281 	lcall	_stack_push
      002298 E5 81            [12] 6282 	mov	a,sp
      00229A 24 FC            [12] 6283 	add	a,#0xfc
      00229C F5 81            [12] 6284 	mov	sp,a
                                   6285 ;	calc.c:291: break;
      00229E 02r2BrA3         [24] 6286 	ljmp	00249$
                                   6287 ;	calc.c:292: case '|':
      0022A1                       6288 00209$:
                                   6289 ;	calc.c:293: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      0022A1 E5*00            [12] 6290 	mov	a,_bp
      0022A3 24 15            [12] 6291 	add	a,#0x15
      0022A5 FF               [12] 6292 	mov	r7,a
      0022A6 E5*00            [12] 6293 	mov	a,_bp
      0022A8 24 0E            [12] 6294 	add	a,#0x0e
      0022AA F8               [12] 6295 	mov	r0,a
      0022AB A6 07            [24] 6296 	mov	@r0,ar7
      0022AD 08               [12] 6297 	inc	r0
      0022AE 76 00            [12] 6298 	mov	@r0,#0x00
      0022B0 08               [12] 6299 	inc	r0
      0022B1 76 40            [12] 6300 	mov	@r0,#0x40
      0022B3 E5*00            [12] 6301 	mov	a,_bp
      0022B5 24 12            [12] 6302 	add	a,#0x12
      0022B7 F8               [12] 6303 	mov	r0,a
      0022B8 74 11            [12] 6304 	mov	a,#0x11
      0022BA 26               [12] 6305 	add	a,@r0
      0022BB FA               [12] 6306 	mov	r2,a
      0022BC 74 40            [12] 6307 	mov	a,#0x40
      0022BE 08               [12] 6308 	inc	r0
      0022BF 36               [12] 6309 	addc	a,@r0
      0022C0 FB               [12] 6310 	mov	r3,a
      0022C1 08               [12] 6311 	inc	r0
      0022C2 86 04            [24] 6312 	mov	ar4,@r0
      0022C4 8A 82            [24] 6313 	mov	dpl,r2
      0022C6 8B 83            [24] 6314 	mov	dph,r3
      0022C8 8C F0            [24] 6315 	mov	b,r4
      0022CA 12r00r00         [24] 6316 	lcall	__gptrget
      0022CD FD               [12] 6317 	mov	r5,a
      0022CE A3               [24] 6318 	inc	dptr
      0022CF 12r00r00         [24] 6319 	lcall	__gptrget
      0022D2 FE               [12] 6320 	mov	r6,a
      0022D3 A3               [24] 6321 	inc	dptr
      0022D4 12r00r00         [24] 6322 	lcall	__gptrget
      0022D7 FF               [12] 6323 	mov	r7,a
      0022D8 C0 04            [24] 6324 	push	ar4
      0022DA C0 03            [24] 6325 	push	ar3
      0022DC C0 02            [24] 6326 	push	ar2
      0022DE E5*00            [12] 6327 	mov	a,_bp
      0022E0 24 0E            [12] 6328 	add	a,#0x0e
      0022E2 F8               [12] 6329 	mov	r0,a
      0022E3 E6               [12] 6330 	mov	a,@r0
      0022E4 C0 E0            [24] 6331 	push	acc
      0022E6 08               [12] 6332 	inc	r0
      0022E7 E6               [12] 6333 	mov	a,@r0
      0022E8 C0 E0            [24] 6334 	push	acc
      0022EA 08               [12] 6335 	inc	r0
      0022EB E6               [12] 6336 	mov	a,@r0
      0022EC C0 E0            [24] 6337 	push	acc
      0022EE 8D 82            [24] 6338 	mov	dpl,r5
      0022F0 8E 83            [24] 6339 	mov	dph,r6
      0022F2 8F F0            [24] 6340 	mov	b,r7
      0022F4 12r00r00         [24] 6341 	lcall	_stack_pop
      0022F7 AE 82            [24] 6342 	mov	r6,dpl
      0022F9 AF 83            [24] 6343 	mov	r7,dph
      0022FB 15 81            [12] 6344 	dec	sp
      0022FD 15 81            [12] 6345 	dec	sp
      0022FF 15 81            [12] 6346 	dec	sp
      002301 D0 02            [24] 6347 	pop	ar2
      002303 D0 03            [24] 6348 	pop	ar3
      002305 D0 04            [24] 6349 	pop	ar4
      002307 EE               [12] 6350 	mov	a,r6
      002308 4F               [12] 6351 	orl	a,r7
      002309 70 25            [24] 6352 	jnz	00214$
      00230B 7Dr4E            [12] 6353 	mov	r5,#___str_10
      00230D 7Cs00            [12] 6354 	mov	r4,#(___str_10 >> 8)
      00230F 7B 80            [12] 6355 	mov	r3,#0x80
                                   6356 ;	calc.c:58: return;
      002311                       6357 00468$:
                                   6358 ;	calc.c:56: for (; *s; s++) putchar(*s);
      002311 8D 82            [24] 6359 	mov	dpl,r5
      002313 8C 83            [24] 6360 	mov	dph,r4
      002315 8B F0            [24] 6361 	mov	b,r3
      002317 12r00r00         [24] 6362 	lcall	__gptrget
      00231A FF               [12] 6363 	mov	r7,a
      00231B 70 03            [24] 6364 	jnz	01372$
      00231D 02r2BrA3         [24] 6365 	ljmp	00249$
      002320                       6366 01372$:
      002320 7E 00            [12] 6367 	mov	r6,#0x00
      002322 8F 82            [24] 6368 	mov	dpl,r7
      002324 8E 83            [24] 6369 	mov	dph,r6
      002326 12r00r00         [24] 6370 	lcall	_putchar
      002329 0D               [12] 6371 	inc	r5
                                   6372 ;	calc.c:293: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      00232A BD 00 E4         [24] 6373 	cjne	r5,#0x00,00468$
      00232D 0C               [12] 6374 	inc	r4
      00232E 80 E1            [24] 6375 	sjmp	00468$
      002330                       6376 00214$:
                                   6377 ;	calc.c:294: else if (!stack_pop(ctx->ps, &d1)) {
      002330 E5*00            [12] 6378 	mov	a,_bp
      002332 24 19            [12] 6379 	add	a,#0x19
      002334 FF               [12] 6380 	mov	r7,a
      002335 E5*00            [12] 6381 	mov	a,_bp
      002337 24 0E            [12] 6382 	add	a,#0x0e
      002339 F8               [12] 6383 	mov	r0,a
      00233A A6 07            [24] 6384 	mov	@r0,ar7
      00233C 08               [12] 6385 	inc	r0
      00233D 76 00            [12] 6386 	mov	@r0,#0x00
      00233F 08               [12] 6387 	inc	r0
      002340 76 40            [12] 6388 	mov	@r0,#0x40
      002342 8A 82            [24] 6389 	mov	dpl,r2
      002344 8B 83            [24] 6390 	mov	dph,r3
      002346 8C F0            [24] 6391 	mov	b,r4
      002348 12r00r00         [24] 6392 	lcall	__gptrget
      00234B FD               [12] 6393 	mov	r5,a
      00234C A3               [24] 6394 	inc	dptr
      00234D 12r00r00         [24] 6395 	lcall	__gptrget
      002350 FE               [12] 6396 	mov	r6,a
      002351 A3               [24] 6397 	inc	dptr
      002352 12r00r00         [24] 6398 	lcall	__gptrget
      002355 FF               [12] 6399 	mov	r7,a
      002356 C0 04            [24] 6400 	push	ar4
      002358 C0 03            [24] 6401 	push	ar3
      00235A C0 02            [24] 6402 	push	ar2
      00235C E5*00            [12] 6403 	mov	a,_bp
      00235E 24 0E            [12] 6404 	add	a,#0x0e
      002360 F8               [12] 6405 	mov	r0,a
      002361 E6               [12] 6406 	mov	a,@r0
      002362 C0 E0            [24] 6407 	push	acc
      002364 08               [12] 6408 	inc	r0
      002365 E6               [12] 6409 	mov	a,@r0
      002366 C0 E0            [24] 6410 	push	acc
      002368 08               [12] 6411 	inc	r0
      002369 E6               [12] 6412 	mov	a,@r0
      00236A C0 E0            [24] 6413 	push	acc
      00236C 8D 82            [24] 6414 	mov	dpl,r5
      00236E 8E 83            [24] 6415 	mov	dph,r6
      002370 8F F0            [24] 6416 	mov	b,r7
      002372 12r00r00         [24] 6417 	lcall	_stack_pop
      002375 AE 82            [24] 6418 	mov	r6,dpl
      002377 AF 83            [24] 6419 	mov	r7,dph
      002379 15 81            [12] 6420 	dec	sp
      00237B 15 81            [12] 6421 	dec	sp
      00237D 15 81            [12] 6422 	dec	sp
      00237F D0 02            [24] 6423 	pop	ar2
      002381 D0 03            [24] 6424 	pop	ar3
      002383 D0 04            [24] 6425 	pop	ar4
      002385 EE               [12] 6426 	mov	a,r6
      002386 4F               [12] 6427 	orl	a,r7
      002387 70 5C            [24] 6428 	jnz	00211$
                                   6429 ;	calc.c:295: (void)stack_push(ctx->ps, d0);
      002389 8A 82            [24] 6430 	mov	dpl,r2
      00238B 8B 83            [24] 6431 	mov	dph,r3
      00238D 8C F0            [24] 6432 	mov	b,r4
      00238F 12r00r00         [24] 6433 	lcall	__gptrget
      002392 FD               [12] 6434 	mov	r5,a
      002393 A3               [24] 6435 	inc	dptr
      002394 12r00r00         [24] 6436 	lcall	__gptrget
      002397 FE               [12] 6437 	mov	r6,a
      002398 A3               [24] 6438 	inc	dptr
      002399 12r00r00         [24] 6439 	lcall	__gptrget
      00239C FF               [12] 6440 	mov	r7,a
      00239D E5*00            [12] 6441 	mov	a,_bp
      00239F 24 15            [12] 6442 	add	a,#0x15
      0023A1 F8               [12] 6443 	mov	r0,a
      0023A2 E6               [12] 6444 	mov	a,@r0
      0023A3 C0 E0            [24] 6445 	push	acc
      0023A5 08               [12] 6446 	inc	r0
      0023A6 E6               [12] 6447 	mov	a,@r0
      0023A7 C0 E0            [24] 6448 	push	acc
      0023A9 08               [12] 6449 	inc	r0
      0023AA E6               [12] 6450 	mov	a,@r0
      0023AB C0 E0            [24] 6451 	push	acc
      0023AD 08               [12] 6452 	inc	r0
      0023AE E6               [12] 6453 	mov	a,@r0
      0023AF C0 E0            [24] 6454 	push	acc
      0023B1 8D 82            [24] 6455 	mov	dpl,r5
      0023B3 8E 83            [24] 6456 	mov	dph,r6
      0023B5 8F F0            [24] 6457 	mov	b,r7
      0023B7 12r00r00         [24] 6458 	lcall	_stack_push
      0023BA E5 81            [12] 6459 	mov	a,sp
      0023BC 24 FC            [12] 6460 	add	a,#0xfc
      0023BE F5 81            [12] 6461 	mov	sp,a
                                   6462 ;	calc.c:296: printstr("\r\nstack underflow\r\n");
      0023C0 7Dr4E            [12] 6463 	mov	r5,#___str_10
      0023C2 7Cs00            [12] 6464 	mov	r4,#(___str_10 >> 8)
      0023C4 7B 80            [12] 6465 	mov	r3,#0x80
                                   6466 ;	calc.c:58: return;
      0023C6                       6467 00471$:
                                   6468 ;	calc.c:56: for (; *s; s++) putchar(*s);
      0023C6 8D 82            [24] 6469 	mov	dpl,r5
      0023C8 8C 83            [24] 6470 	mov	dph,r4
      0023CA 8B F0            [24] 6471 	mov	b,r3
      0023CC 12r00r00         [24] 6472 	lcall	__gptrget
      0023CF FF               [12] 6473 	mov	r7,a
      0023D0 70 03            [24] 6474 	jnz	01375$
      0023D2 02r2BrA3         [24] 6475 	ljmp	00249$
      0023D5                       6476 01375$:
      0023D5 7E 00            [12] 6477 	mov	r6,#0x00
      0023D7 8F 82            [24] 6478 	mov	dpl,r7
      0023D9 8E 83            [24] 6479 	mov	dph,r6
      0023DB 12r00r00         [24] 6480 	lcall	_putchar
      0023DE 0D               [12] 6481 	inc	r5
                                   6482 ;	calc.c:296: printstr("\r\nstack underflow\r\n");
      0023DF BD 00 E4         [24] 6483 	cjne	r5,#0x00,00471$
      0023E2 0C               [12] 6484 	inc	r4
      0023E3 80 E1            [24] 6485 	sjmp	00471$
      0023E5                       6486 00211$:
                                   6487 ;	calc.c:298: d1 |= d0;
      0023E5 E5*00            [12] 6488 	mov	a,_bp
      0023E7 24 19            [12] 6489 	add	a,#0x19
      0023E9 F8               [12] 6490 	mov	r0,a
      0023EA E5*00            [12] 6491 	mov	a,_bp
      0023EC 24 15            [12] 6492 	add	a,#0x15
      0023EE F9               [12] 6493 	mov	r1,a
      0023EF E7               [12] 6494 	mov	a,@r1
      0023F0 46               [12] 6495 	orl	a,@r0
      0023F1 F6               [12] 6496 	mov	@r0,a
      0023F2 09               [12] 6497 	inc	r1
      0023F3 E7               [12] 6498 	mov	a,@r1
      0023F4 08               [12] 6499 	inc	r0
      0023F5 46               [12] 6500 	orl	a,@r0
      0023F6 F6               [12] 6501 	mov	@r0,a
      0023F7 09               [12] 6502 	inc	r1
      0023F8 E7               [12] 6503 	mov	a,@r1
      0023F9 08               [12] 6504 	inc	r0
      0023FA 46               [12] 6505 	orl	a,@r0
      0023FB F6               [12] 6506 	mov	@r0,a
      0023FC 09               [12] 6507 	inc	r1
      0023FD E7               [12] 6508 	mov	a,@r1
      0023FE 08               [12] 6509 	inc	r0
      0023FF 46               [12] 6510 	orl	a,@r0
      002400 F6               [12] 6511 	mov	@r0,a
                                   6512 ;	calc.c:299: (void)stack_push(ctx->ps, d1);
      002401 8A 82            [24] 6513 	mov	dpl,r2
      002403 8B 83            [24] 6514 	mov	dph,r3
      002405 8C F0            [24] 6515 	mov	b,r4
      002407 12r00r00         [24] 6516 	lcall	__gptrget
      00240A FA               [12] 6517 	mov	r2,a
      00240B A3               [24] 6518 	inc	dptr
      00240C 12r00r00         [24] 6519 	lcall	__gptrget
      00240F FB               [12] 6520 	mov	r3,a
      002410 A3               [24] 6521 	inc	dptr
      002411 12r00r00         [24] 6522 	lcall	__gptrget
      002414 FC               [12] 6523 	mov	r4,a
      002415 E5*00            [12] 6524 	mov	a,_bp
      002417 24 19            [12] 6525 	add	a,#0x19
      002419 F8               [12] 6526 	mov	r0,a
      00241A E6               [12] 6527 	mov	a,@r0
      00241B C0 E0            [24] 6528 	push	acc
      00241D 08               [12] 6529 	inc	r0
      00241E E6               [12] 6530 	mov	a,@r0
      00241F C0 E0            [24] 6531 	push	acc
      002421 08               [12] 6532 	inc	r0
      002422 E6               [12] 6533 	mov	a,@r0
      002423 C0 E0            [24] 6534 	push	acc
      002425 08               [12] 6535 	inc	r0
      002426 E6               [12] 6536 	mov	a,@r0
      002427 C0 E0            [24] 6537 	push	acc
      002429 8A 82            [24] 6538 	mov	dpl,r2
      00242B 8B 83            [24] 6539 	mov	dph,r3
      00242D 8C F0            [24] 6540 	mov	b,r4
      00242F 12r00r00         [24] 6541 	lcall	_stack_push
      002432 E5 81            [12] 6542 	mov	a,sp
      002434 24 FC            [12] 6543 	add	a,#0xfc
      002436 F5 81            [12] 6544 	mov	sp,a
                                   6545 ;	calc.c:301: break;
      002438 02r2BrA3         [24] 6546 	ljmp	00249$
                                   6547 ;	calc.c:302: case '^':
      00243B                       6548 00216$:
                                   6549 ;	calc.c:303: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      00243B E5*00            [12] 6550 	mov	a,_bp
      00243D 24 15            [12] 6551 	add	a,#0x15
      00243F FF               [12] 6552 	mov	r7,a
      002440 E5*00            [12] 6553 	mov	a,_bp
      002442 24 0E            [12] 6554 	add	a,#0x0e
      002444 F8               [12] 6555 	mov	r0,a
      002445 A6 07            [24] 6556 	mov	@r0,ar7
      002447 08               [12] 6557 	inc	r0
      002448 76 00            [12] 6558 	mov	@r0,#0x00
      00244A 08               [12] 6559 	inc	r0
      00244B 76 40            [12] 6560 	mov	@r0,#0x40
      00244D E5*00            [12] 6561 	mov	a,_bp
      00244F 24 12            [12] 6562 	add	a,#0x12
      002451 F8               [12] 6563 	mov	r0,a
      002452 74 11            [12] 6564 	mov	a,#0x11
      002454 26               [12] 6565 	add	a,@r0
      002455 FA               [12] 6566 	mov	r2,a
      002456 74 40            [12] 6567 	mov	a,#0x40
      002458 08               [12] 6568 	inc	r0
      002459 36               [12] 6569 	addc	a,@r0
      00245A FB               [12] 6570 	mov	r3,a
      00245B 08               [12] 6571 	inc	r0
      00245C 86 04            [24] 6572 	mov	ar4,@r0
      00245E 8A 82            [24] 6573 	mov	dpl,r2
      002460 8B 83            [24] 6574 	mov	dph,r3
      002462 8C F0            [24] 6575 	mov	b,r4
      002464 12r00r00         [24] 6576 	lcall	__gptrget
      002467 FD               [12] 6577 	mov	r5,a
      002468 A3               [24] 6578 	inc	dptr
      002469 12r00r00         [24] 6579 	lcall	__gptrget
      00246C FE               [12] 6580 	mov	r6,a
      00246D A3               [24] 6581 	inc	dptr
      00246E 12r00r00         [24] 6582 	lcall	__gptrget
      002471 FF               [12] 6583 	mov	r7,a
      002472 C0 04            [24] 6584 	push	ar4
      002474 C0 03            [24] 6585 	push	ar3
      002476 C0 02            [24] 6586 	push	ar2
      002478 E5*00            [12] 6587 	mov	a,_bp
      00247A 24 0E            [12] 6588 	add	a,#0x0e
      00247C F8               [12] 6589 	mov	r0,a
      00247D E6               [12] 6590 	mov	a,@r0
      00247E C0 E0            [24] 6591 	push	acc
      002480 08               [12] 6592 	inc	r0
      002481 E6               [12] 6593 	mov	a,@r0
      002482 C0 E0            [24] 6594 	push	acc
      002484 08               [12] 6595 	inc	r0
      002485 E6               [12] 6596 	mov	a,@r0
      002486 C0 E0            [24] 6597 	push	acc
      002488 8D 82            [24] 6598 	mov	dpl,r5
      00248A 8E 83            [24] 6599 	mov	dph,r6
      00248C 8F F0            [24] 6600 	mov	b,r7
      00248E 12r00r00         [24] 6601 	lcall	_stack_pop
      002491 AE 82            [24] 6602 	mov	r6,dpl
      002493 AF 83            [24] 6603 	mov	r7,dph
      002495 15 81            [12] 6604 	dec	sp
      002497 15 81            [12] 6605 	dec	sp
      002499 15 81            [12] 6606 	dec	sp
      00249B D0 02            [24] 6607 	pop	ar2
      00249D D0 03            [24] 6608 	pop	ar3
      00249F D0 04            [24] 6609 	pop	ar4
      0024A1 EE               [12] 6610 	mov	a,r6
      0024A2 4F               [12] 6611 	orl	a,r7
      0024A3 70 25            [24] 6612 	jnz	00221$
      0024A5 7Dr4E            [12] 6613 	mov	r5,#___str_10
      0024A7 7Cs00            [12] 6614 	mov	r4,#(___str_10 >> 8)
      0024A9 7B 80            [12] 6615 	mov	r3,#0x80
                                   6616 ;	calc.c:58: return;
      0024AB                       6617 00474$:
                                   6618 ;	calc.c:56: for (; *s; s++) putchar(*s);
      0024AB 8D 82            [24] 6619 	mov	dpl,r5
      0024AD 8C 83            [24] 6620 	mov	dph,r4
      0024AF 8B F0            [24] 6621 	mov	b,r3
      0024B1 12r00r00         [24] 6622 	lcall	__gptrget
      0024B4 FF               [12] 6623 	mov	r7,a
      0024B5 70 03            [24] 6624 	jnz	01378$
      0024B7 02r2BrA3         [24] 6625 	ljmp	00249$
      0024BA                       6626 01378$:
      0024BA 7E 00            [12] 6627 	mov	r6,#0x00
      0024BC 8F 82            [24] 6628 	mov	dpl,r7
      0024BE 8E 83            [24] 6629 	mov	dph,r6
      0024C0 12r00r00         [24] 6630 	lcall	_putchar
      0024C3 0D               [12] 6631 	inc	r5
                                   6632 ;	calc.c:303: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      0024C4 BD 00 E4         [24] 6633 	cjne	r5,#0x00,00474$
      0024C7 0C               [12] 6634 	inc	r4
      0024C8 80 E1            [24] 6635 	sjmp	00474$
      0024CA                       6636 00221$:
                                   6637 ;	calc.c:304: else if (!stack_pop(ctx->ps, &d1)) {
      0024CA E5*00            [12] 6638 	mov	a,_bp
      0024CC 24 19            [12] 6639 	add	a,#0x19
      0024CE FF               [12] 6640 	mov	r7,a
      0024CF E5*00            [12] 6641 	mov	a,_bp
      0024D1 24 0E            [12] 6642 	add	a,#0x0e
      0024D3 F8               [12] 6643 	mov	r0,a
      0024D4 A6 07            [24] 6644 	mov	@r0,ar7
      0024D6 08               [12] 6645 	inc	r0
      0024D7 76 00            [12] 6646 	mov	@r0,#0x00
      0024D9 08               [12] 6647 	inc	r0
      0024DA 76 40            [12] 6648 	mov	@r0,#0x40
      0024DC 8A 82            [24] 6649 	mov	dpl,r2
      0024DE 8B 83            [24] 6650 	mov	dph,r3
      0024E0 8C F0            [24] 6651 	mov	b,r4
      0024E2 12r00r00         [24] 6652 	lcall	__gptrget
      0024E5 FD               [12] 6653 	mov	r5,a
      0024E6 A3               [24] 6654 	inc	dptr
      0024E7 12r00r00         [24] 6655 	lcall	__gptrget
      0024EA FE               [12] 6656 	mov	r6,a
      0024EB A3               [24] 6657 	inc	dptr
      0024EC 12r00r00         [24] 6658 	lcall	__gptrget
      0024EF FF               [12] 6659 	mov	r7,a
      0024F0 C0 04            [24] 6660 	push	ar4
      0024F2 C0 03            [24] 6661 	push	ar3
      0024F4 C0 02            [24] 6662 	push	ar2
      0024F6 E5*00            [12] 6663 	mov	a,_bp
      0024F8 24 0E            [12] 6664 	add	a,#0x0e
      0024FA F8               [12] 6665 	mov	r0,a
      0024FB E6               [12] 6666 	mov	a,@r0
      0024FC C0 E0            [24] 6667 	push	acc
      0024FE 08               [12] 6668 	inc	r0
      0024FF E6               [12] 6669 	mov	a,@r0
      002500 C0 E0            [24] 6670 	push	acc
      002502 08               [12] 6671 	inc	r0
      002503 E6               [12] 6672 	mov	a,@r0
      002504 C0 E0            [24] 6673 	push	acc
      002506 8D 82            [24] 6674 	mov	dpl,r5
      002508 8E 83            [24] 6675 	mov	dph,r6
      00250A 8F F0            [24] 6676 	mov	b,r7
      00250C 12r00r00         [24] 6677 	lcall	_stack_pop
      00250F AE 82            [24] 6678 	mov	r6,dpl
      002511 AF 83            [24] 6679 	mov	r7,dph
      002513 15 81            [12] 6680 	dec	sp
      002515 15 81            [12] 6681 	dec	sp
      002517 15 81            [12] 6682 	dec	sp
      002519 D0 02            [24] 6683 	pop	ar2
      00251B D0 03            [24] 6684 	pop	ar3
      00251D D0 04            [24] 6685 	pop	ar4
      00251F EE               [12] 6686 	mov	a,r6
      002520 4F               [12] 6687 	orl	a,r7
      002521 70 5C            [24] 6688 	jnz	00218$
                                   6689 ;	calc.c:305: (void)stack_push(ctx->ps, d0);
      002523 8A 82            [24] 6690 	mov	dpl,r2
      002525 8B 83            [24] 6691 	mov	dph,r3
      002527 8C F0            [24] 6692 	mov	b,r4
      002529 12r00r00         [24] 6693 	lcall	__gptrget
      00252C FD               [12] 6694 	mov	r5,a
      00252D A3               [24] 6695 	inc	dptr
      00252E 12r00r00         [24] 6696 	lcall	__gptrget
      002531 FE               [12] 6697 	mov	r6,a
      002532 A3               [24] 6698 	inc	dptr
      002533 12r00r00         [24] 6699 	lcall	__gptrget
      002536 FF               [12] 6700 	mov	r7,a
      002537 E5*00            [12] 6701 	mov	a,_bp
      002539 24 15            [12] 6702 	add	a,#0x15
      00253B F8               [12] 6703 	mov	r0,a
      00253C E6               [12] 6704 	mov	a,@r0
      00253D C0 E0            [24] 6705 	push	acc
      00253F 08               [12] 6706 	inc	r0
      002540 E6               [12] 6707 	mov	a,@r0
      002541 C0 E0            [24] 6708 	push	acc
      002543 08               [12] 6709 	inc	r0
      002544 E6               [12] 6710 	mov	a,@r0
      002545 C0 E0            [24] 6711 	push	acc
      002547 08               [12] 6712 	inc	r0
      002548 E6               [12] 6713 	mov	a,@r0
      002549 C0 E0            [24] 6714 	push	acc
      00254B 8D 82            [24] 6715 	mov	dpl,r5
      00254D 8E 83            [24] 6716 	mov	dph,r6
      00254F 8F F0            [24] 6717 	mov	b,r7
      002551 12r00r00         [24] 6718 	lcall	_stack_push
      002554 E5 81            [12] 6719 	mov	a,sp
      002556 24 FC            [12] 6720 	add	a,#0xfc
      002558 F5 81            [12] 6721 	mov	sp,a
                                   6722 ;	calc.c:306: printstr("\r\nstack underflow\r\n");
      00255A 7Dr4E            [12] 6723 	mov	r5,#___str_10
      00255C 7Cs00            [12] 6724 	mov	r4,#(___str_10 >> 8)
      00255E 7B 80            [12] 6725 	mov	r3,#0x80
                                   6726 ;	calc.c:58: return;
      002560                       6727 00477$:
                                   6728 ;	calc.c:56: for (; *s; s++) putchar(*s);
      002560 8D 82            [24] 6729 	mov	dpl,r5
      002562 8C 83            [24] 6730 	mov	dph,r4
      002564 8B F0            [24] 6731 	mov	b,r3
      002566 12r00r00         [24] 6732 	lcall	__gptrget
      002569 FF               [12] 6733 	mov	r7,a
      00256A 70 03            [24] 6734 	jnz	01381$
      00256C 02r2BrA3         [24] 6735 	ljmp	00249$
      00256F                       6736 01381$:
      00256F 7E 00            [12] 6737 	mov	r6,#0x00
      002571 8F 82            [24] 6738 	mov	dpl,r7
      002573 8E 83            [24] 6739 	mov	dph,r6
      002575 12r00r00         [24] 6740 	lcall	_putchar
      002578 0D               [12] 6741 	inc	r5
                                   6742 ;	calc.c:306: printstr("\r\nstack underflow\r\n");
      002579 BD 00 E4         [24] 6743 	cjne	r5,#0x00,00477$
      00257C 0C               [12] 6744 	inc	r4
      00257D 80 E1            [24] 6745 	sjmp	00477$
      00257F                       6746 00218$:
                                   6747 ;	calc.c:308: d1 ^= d0;
      00257F E5*00            [12] 6748 	mov	a,_bp
      002581 24 19            [12] 6749 	add	a,#0x19
      002583 F8               [12] 6750 	mov	r0,a
      002584 E5*00            [12] 6751 	mov	a,_bp
      002586 24 15            [12] 6752 	add	a,#0x15
      002588 F9               [12] 6753 	mov	r1,a
      002589 E7               [12] 6754 	mov	a,@r1
      00258A 66               [12] 6755 	xrl	a,@r0
      00258B F6               [12] 6756 	mov	@r0,a
      00258C 09               [12] 6757 	inc	r1
      00258D E7               [12] 6758 	mov	a,@r1
      00258E 08               [12] 6759 	inc	r0
      00258F 66               [12] 6760 	xrl	a,@r0
      002590 F6               [12] 6761 	mov	@r0,a
      002591 09               [12] 6762 	inc	r1
      002592 E7               [12] 6763 	mov	a,@r1
      002593 08               [12] 6764 	inc	r0
      002594 66               [12] 6765 	xrl	a,@r0
      002595 F6               [12] 6766 	mov	@r0,a
      002596 09               [12] 6767 	inc	r1
      002597 E7               [12] 6768 	mov	a,@r1
      002598 08               [12] 6769 	inc	r0
      002599 66               [12] 6770 	xrl	a,@r0
      00259A F6               [12] 6771 	mov	@r0,a
                                   6772 ;	calc.c:309: (void)stack_push(ctx->ps, d1);
      00259B 8A 82            [24] 6773 	mov	dpl,r2
      00259D 8B 83            [24] 6774 	mov	dph,r3
      00259F 8C F0            [24] 6775 	mov	b,r4
      0025A1 12r00r00         [24] 6776 	lcall	__gptrget
      0025A4 FA               [12] 6777 	mov	r2,a
      0025A5 A3               [24] 6778 	inc	dptr
      0025A6 12r00r00         [24] 6779 	lcall	__gptrget
      0025A9 FB               [12] 6780 	mov	r3,a
      0025AA A3               [24] 6781 	inc	dptr
      0025AB 12r00r00         [24] 6782 	lcall	__gptrget
      0025AE FC               [12] 6783 	mov	r4,a
      0025AF E5*00            [12] 6784 	mov	a,_bp
      0025B1 24 19            [12] 6785 	add	a,#0x19
      0025B3 F8               [12] 6786 	mov	r0,a
      0025B4 E6               [12] 6787 	mov	a,@r0
      0025B5 C0 E0            [24] 6788 	push	acc
      0025B7 08               [12] 6789 	inc	r0
      0025B8 E6               [12] 6790 	mov	a,@r0
      0025B9 C0 E0            [24] 6791 	push	acc
      0025BB 08               [12] 6792 	inc	r0
      0025BC E6               [12] 6793 	mov	a,@r0
      0025BD C0 E0            [24] 6794 	push	acc
      0025BF 08               [12] 6795 	inc	r0
      0025C0 E6               [12] 6796 	mov	a,@r0
      0025C1 C0 E0            [24] 6797 	push	acc
      0025C3 8A 82            [24] 6798 	mov	dpl,r2
      0025C5 8B 83            [24] 6799 	mov	dph,r3
      0025C7 8C F0            [24] 6800 	mov	b,r4
      0025C9 12r00r00         [24] 6801 	lcall	_stack_push
      0025CC E5 81            [12] 6802 	mov	a,sp
      0025CE 24 FC            [12] 6803 	add	a,#0xfc
      0025D0 F5 81            [12] 6804 	mov	sp,a
                                   6805 ;	calc.c:311: break;
      0025D2 02r2BrA3         [24] 6806 	ljmp	00249$
                                   6807 ;	calc.c:312: case '>':
      0025D5                       6808 00223$:
                                   6809 ;	calc.c:313: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      0025D5 E5*00            [12] 6810 	mov	a,_bp
      0025D7 24 15            [12] 6811 	add	a,#0x15
      0025D9 FC               [12] 6812 	mov	r4,a
      0025DA 7B 00            [12] 6813 	mov	r3,#0x00
      0025DC 7A 40            [12] 6814 	mov	r2,#0x40
      0025DE E5*00            [12] 6815 	mov	a,_bp
      0025E0 24 12            [12] 6816 	add	a,#0x12
      0025E2 F8               [12] 6817 	mov	r0,a
      0025E3 E5*00            [12] 6818 	mov	a,_bp
      0025E5 24 0B            [12] 6819 	add	a,#0x0b
      0025E7 F9               [12] 6820 	mov	r1,a
      0025E8 74 11            [12] 6821 	mov	a,#0x11
      0025EA 26               [12] 6822 	add	a,@r0
      0025EB F7               [12] 6823 	mov	@r1,a
      0025EC 74 40            [12] 6824 	mov	a,#0x40
      0025EE 08               [12] 6825 	inc	r0
      0025EF 36               [12] 6826 	addc	a,@r0
      0025F0 09               [12] 6827 	inc	r1
      0025F1 F7               [12] 6828 	mov	@r1,a
      0025F2 08               [12] 6829 	inc	r0
      0025F3 09               [12] 6830 	inc	r1
      0025F4 E6               [12] 6831 	mov	a,@r0
      0025F5 F7               [12] 6832 	mov	@r1,a
      0025F6 E5*00            [12] 6833 	mov	a,_bp
      0025F8 24 0B            [12] 6834 	add	a,#0x0b
      0025FA F8               [12] 6835 	mov	r0,a
      0025FB 86 82            [24] 6836 	mov	dpl,@r0
      0025FD 08               [12] 6837 	inc	r0
      0025FE 86 83            [24] 6838 	mov	dph,@r0
      002600 08               [12] 6839 	inc	r0
      002601 86 F0            [24] 6840 	mov	b,@r0
      002603 12r00r00         [24] 6841 	lcall	__gptrget
      002606 FD               [12] 6842 	mov	r5,a
      002607 A3               [24] 6843 	inc	dptr
      002608 12r00r00         [24] 6844 	lcall	__gptrget
      00260B FE               [12] 6845 	mov	r6,a
      00260C A3               [24] 6846 	inc	dptr
      00260D 12r00r00         [24] 6847 	lcall	__gptrget
      002610 FF               [12] 6848 	mov	r7,a
      002611 C0 04            [24] 6849 	push	ar4
      002613 C0 03            [24] 6850 	push	ar3
      002615 C0 02            [24] 6851 	push	ar2
      002617 8D 82            [24] 6852 	mov	dpl,r5
      002619 8E 83            [24] 6853 	mov	dph,r6
      00261B 8F F0            [24] 6854 	mov	b,r7
      00261D 12r00r00         [24] 6855 	lcall	_stack_pop
      002620 AE 82            [24] 6856 	mov	r6,dpl
      002622 AF 83            [24] 6857 	mov	r7,dph
      002624 15 81            [12] 6858 	dec	sp
      002626 15 81            [12] 6859 	dec	sp
      002628 15 81            [12] 6860 	dec	sp
      00262A EE               [12] 6861 	mov	a,r6
      00262B 4F               [12] 6862 	orl	a,r7
      00262C 70 25            [24] 6863 	jnz	00228$
      00262E 7Dr4E            [12] 6864 	mov	r5,#___str_10
      002630 7Cs00            [12] 6865 	mov	r4,#(___str_10 >> 8)
      002632 7B 80            [12] 6866 	mov	r3,#0x80
                                   6867 ;	calc.c:58: return;
      002634                       6868 00480$:
                                   6869 ;	calc.c:56: for (; *s; s++) putchar(*s);
      002634 8D 82            [24] 6870 	mov	dpl,r5
      002636 8C 83            [24] 6871 	mov	dph,r4
      002638 8B F0            [24] 6872 	mov	b,r3
      00263A 12r00r00         [24] 6873 	lcall	__gptrget
      00263D FF               [12] 6874 	mov	r7,a
      00263E 70 03            [24] 6875 	jnz	01384$
      002640 02r2BrA3         [24] 6876 	ljmp	00249$
      002643                       6877 01384$:
      002643 7E 00            [12] 6878 	mov	r6,#0x00
      002645 8F 82            [24] 6879 	mov	dpl,r7
      002647 8E 83            [24] 6880 	mov	dph,r6
      002649 12r00r00         [24] 6881 	lcall	_putchar
      00264C 0D               [12] 6882 	inc	r5
                                   6883 ;	calc.c:313: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      00264D BD 00 E4         [24] 6884 	cjne	r5,#0x00,00480$
      002650 0C               [12] 6885 	inc	r4
      002651 80 E1            [24] 6886 	sjmp	00480$
      002653                       6887 00228$:
                                   6888 ;	calc.c:314: else if (!stack_pop(ctx->ps, &d1)) {
      002653 E5*00            [12] 6889 	mov	a,_bp
      002655 24 19            [12] 6890 	add	a,#0x19
      002657 FC               [12] 6891 	mov	r4,a
      002658 7B 00            [12] 6892 	mov	r3,#0x00
      00265A 7A 40            [12] 6893 	mov	r2,#0x40
      00265C E5*00            [12] 6894 	mov	a,_bp
      00265E 24 0B            [12] 6895 	add	a,#0x0b
      002660 F8               [12] 6896 	mov	r0,a
      002661 86 82            [24] 6897 	mov	dpl,@r0
      002663 08               [12] 6898 	inc	r0
      002664 86 83            [24] 6899 	mov	dph,@r0
      002666 08               [12] 6900 	inc	r0
      002667 86 F0            [24] 6901 	mov	b,@r0
      002669 12r00r00         [24] 6902 	lcall	__gptrget
      00266C FD               [12] 6903 	mov	r5,a
      00266D A3               [24] 6904 	inc	dptr
      00266E 12r00r00         [24] 6905 	lcall	__gptrget
      002671 FE               [12] 6906 	mov	r6,a
      002672 A3               [24] 6907 	inc	dptr
      002673 12r00r00         [24] 6908 	lcall	__gptrget
      002676 FF               [12] 6909 	mov	r7,a
      002677 C0 04            [24] 6910 	push	ar4
      002679 C0 03            [24] 6911 	push	ar3
      00267B C0 02            [24] 6912 	push	ar2
      00267D 8D 82            [24] 6913 	mov	dpl,r5
      00267F 8E 83            [24] 6914 	mov	dph,r6
      002681 8F F0            [24] 6915 	mov	b,r7
      002683 12r00r00         [24] 6916 	lcall	_stack_pop
      002686 AE 82            [24] 6917 	mov	r6,dpl
      002688 AF 83            [24] 6918 	mov	r7,dph
      00268A 15 81            [12] 6919 	dec	sp
      00268C 15 81            [12] 6920 	dec	sp
      00268E 15 81            [12] 6921 	dec	sp
      002690 EE               [12] 6922 	mov	a,r6
      002691 4F               [12] 6923 	orl	a,r7
      002692 70 63            [24] 6924 	jnz	00225$
                                   6925 ;	calc.c:315: (void)stack_push(ctx->ps, d0);
      002694 E5*00            [12] 6926 	mov	a,_bp
      002696 24 0B            [12] 6927 	add	a,#0x0b
      002698 F8               [12] 6928 	mov	r0,a
      002699 86 82            [24] 6929 	mov	dpl,@r0
      00269B 08               [12] 6930 	inc	r0
      00269C 86 83            [24] 6931 	mov	dph,@r0
      00269E 08               [12] 6932 	inc	r0
      00269F 86 F0            [24] 6933 	mov	b,@r0
      0026A1 12r00r00         [24] 6934 	lcall	__gptrget
      0026A4 FD               [12] 6935 	mov	r5,a
      0026A5 A3               [24] 6936 	inc	dptr
      0026A6 12r00r00         [24] 6937 	lcall	__gptrget
      0026A9 FE               [12] 6938 	mov	r6,a
      0026AA A3               [24] 6939 	inc	dptr
      0026AB 12r00r00         [24] 6940 	lcall	__gptrget
      0026AE FF               [12] 6941 	mov	r7,a
      0026AF E5*00            [12] 6942 	mov	a,_bp
      0026B1 24 15            [12] 6943 	add	a,#0x15
      0026B3 F8               [12] 6944 	mov	r0,a
      0026B4 E6               [12] 6945 	mov	a,@r0
      0026B5 C0 E0            [24] 6946 	push	acc
      0026B7 08               [12] 6947 	inc	r0
      0026B8 E6               [12] 6948 	mov	a,@r0
      0026B9 C0 E0            [24] 6949 	push	acc
      0026BB 08               [12] 6950 	inc	r0
      0026BC E6               [12] 6951 	mov	a,@r0
      0026BD C0 E0            [24] 6952 	push	acc
      0026BF 08               [12] 6953 	inc	r0
      0026C0 E6               [12] 6954 	mov	a,@r0
      0026C1 C0 E0            [24] 6955 	push	acc
      0026C3 8D 82            [24] 6956 	mov	dpl,r5
      0026C5 8E 83            [24] 6957 	mov	dph,r6
      0026C7 8F F0            [24] 6958 	mov	b,r7
      0026C9 12r00r00         [24] 6959 	lcall	_stack_push
      0026CC E5 81            [12] 6960 	mov	a,sp
      0026CE 24 FC            [12] 6961 	add	a,#0xfc
      0026D0 F5 81            [12] 6962 	mov	sp,a
                                   6963 ;	calc.c:316: printstr("\r\nstack underflow\r\n");
      0026D2 7Dr4E            [12] 6964 	mov	r5,#___str_10
      0026D4 7Cs00            [12] 6965 	mov	r4,#(___str_10 >> 8)
      0026D6 7B 80            [12] 6966 	mov	r3,#0x80
                                   6967 ;	calc.c:58: return;
      0026D8                       6968 00483$:
                                   6969 ;	calc.c:56: for (; *s; s++) putchar(*s);
      0026D8 8D 82            [24] 6970 	mov	dpl,r5
      0026DA 8C 83            [24] 6971 	mov	dph,r4
      0026DC 8B F0            [24] 6972 	mov	b,r3
      0026DE 12r00r00         [24] 6973 	lcall	__gptrget
      0026E1 FF               [12] 6974 	mov	r7,a
      0026E2 70 03            [24] 6975 	jnz	01387$
      0026E4 02r2BrA3         [24] 6976 	ljmp	00249$
      0026E7                       6977 01387$:
      0026E7 7E 00            [12] 6978 	mov	r6,#0x00
      0026E9 8F 82            [24] 6979 	mov	dpl,r7
      0026EB 8E 83            [24] 6980 	mov	dph,r6
      0026ED 12r00r00         [24] 6981 	lcall	_putchar
      0026F0 0D               [12] 6982 	inc	r5
                                   6983 ;	calc.c:316: printstr("\r\nstack underflow\r\n");
      0026F1 BD 00 E4         [24] 6984 	cjne	r5,#0x00,00483$
      0026F4 0C               [12] 6985 	inc	r4
      0026F5 80 E1            [24] 6986 	sjmp	00483$
      0026F7                       6987 00225$:
                                   6988 ;	calc.c:318: d1 = (unsigned long)d1 >> d0;
      0026F7 E5*00            [12] 6989 	mov	a,_bp
      0026F9 24 19            [12] 6990 	add	a,#0x19
      0026FB F8               [12] 6991 	mov	r0,a
      0026FC 86 04            [24] 6992 	mov	ar4,@r0
      0026FE 08               [12] 6993 	inc	r0
      0026FF 86 05            [24] 6994 	mov	ar5,@r0
      002701 08               [12] 6995 	inc	r0
      002702 86 06            [24] 6996 	mov	ar6,@r0
      002704 08               [12] 6997 	inc	r0
      002705 86 07            [24] 6998 	mov	ar7,@r0
      002707 E5*00            [12] 6999 	mov	a,_bp
      002709 24 15            [12] 7000 	add	a,#0x15
      00270B F8               [12] 7001 	mov	r0,a
      00270C 86 F0            [24] 7002 	mov	b,@r0
      00270E 05 F0            [12] 7003 	inc	b
      002710 80 0D            [24] 7004 	sjmp	01390$
      002712                       7005 01389$:
      002712 C3               [12] 7006 	clr	c
      002713 EF               [12] 7007 	mov	a,r7
      002714 13               [12] 7008 	rrc	a
      002715 FF               [12] 7009 	mov	r7,a
      002716 EE               [12] 7010 	mov	a,r6
      002717 13               [12] 7011 	rrc	a
      002718 FE               [12] 7012 	mov	r6,a
      002719 ED               [12] 7013 	mov	a,r5
      00271A 13               [12] 7014 	rrc	a
      00271B FD               [12] 7015 	mov	r5,a
      00271C EC               [12] 7016 	mov	a,r4
      00271D 13               [12] 7017 	rrc	a
      00271E FC               [12] 7018 	mov	r4,a
      00271F                       7019 01390$:
      00271F D5 F0 F0         [24] 7020 	djnz	b,01389$
      002722 E5*00            [12] 7021 	mov	a,_bp
      002724 24 19            [12] 7022 	add	a,#0x19
      002726 F8               [12] 7023 	mov	r0,a
      002727 A6 04            [24] 7024 	mov	@r0,ar4
      002729 08               [12] 7025 	inc	r0
      00272A A6 05            [24] 7026 	mov	@r0,ar5
      00272C 08               [12] 7027 	inc	r0
      00272D A6 06            [24] 7028 	mov	@r0,ar6
      00272F 08               [12] 7029 	inc	r0
      002730 A6 07            [24] 7030 	mov	@r0,ar7
                                   7031 ;	calc.c:319: (void)stack_push(ctx->ps, d1);
      002732 E5*00            [12] 7032 	mov	a,_bp
      002734 24 0B            [12] 7033 	add	a,#0x0b
      002736 F8               [12] 7034 	mov	r0,a
      002737 86 82            [24] 7035 	mov	dpl,@r0
      002739 08               [12] 7036 	inc	r0
      00273A 86 83            [24] 7037 	mov	dph,@r0
      00273C 08               [12] 7038 	inc	r0
      00273D 86 F0            [24] 7039 	mov	b,@r0
      00273F 12r00r00         [24] 7040 	lcall	__gptrget
      002742 FD               [12] 7041 	mov	r5,a
      002743 A3               [24] 7042 	inc	dptr
      002744 12r00r00         [24] 7043 	lcall	__gptrget
      002747 FE               [12] 7044 	mov	r6,a
      002748 A3               [24] 7045 	inc	dptr
      002749 12r00r00         [24] 7046 	lcall	__gptrget
      00274C FF               [12] 7047 	mov	r7,a
      00274D E5*00            [12] 7048 	mov	a,_bp
      00274F 24 19            [12] 7049 	add	a,#0x19
      002751 F8               [12] 7050 	mov	r0,a
      002752 E6               [12] 7051 	mov	a,@r0
      002753 C0 E0            [24] 7052 	push	acc
      002755 08               [12] 7053 	inc	r0
      002756 E6               [12] 7054 	mov	a,@r0
      002757 C0 E0            [24] 7055 	push	acc
      002759 08               [12] 7056 	inc	r0
      00275A E6               [12] 7057 	mov	a,@r0
      00275B C0 E0            [24] 7058 	push	acc
      00275D 08               [12] 7059 	inc	r0
      00275E E6               [12] 7060 	mov	a,@r0
      00275F C0 E0            [24] 7061 	push	acc
      002761 8D 82            [24] 7062 	mov	dpl,r5
      002763 8E 83            [24] 7063 	mov	dph,r6
      002765 8F F0            [24] 7064 	mov	b,r7
      002767 12r00r00         [24] 7065 	lcall	_stack_push
      00276A E5 81            [12] 7066 	mov	a,sp
      00276C 24 FC            [12] 7067 	add	a,#0xfc
      00276E F5 81            [12] 7068 	mov	sp,a
                                   7069 ;	calc.c:321: break;
      002770 02r2BrA3         [24] 7070 	ljmp	00249$
                                   7071 ;	calc.c:322: case ']':
      002773                       7072 00230$:
                                   7073 ;	calc.c:323: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      002773 E5*00            [12] 7074 	mov	a,_bp
      002775 24 15            [12] 7075 	add	a,#0x15
      002777 FF               [12] 7076 	mov	r7,a
      002778 E5*00            [12] 7077 	mov	a,_bp
      00277A 24 0E            [12] 7078 	add	a,#0x0e
      00277C F8               [12] 7079 	mov	r0,a
      00277D A6 07            [24] 7080 	mov	@r0,ar7
      00277F 08               [12] 7081 	inc	r0
      002780 76 00            [12] 7082 	mov	@r0,#0x00
      002782 08               [12] 7083 	inc	r0
      002783 76 40            [12] 7084 	mov	@r0,#0x40
      002785 E5*00            [12] 7085 	mov	a,_bp
      002787 24 12            [12] 7086 	add	a,#0x12
      002789 F8               [12] 7087 	mov	r0,a
      00278A 74 11            [12] 7088 	mov	a,#0x11
      00278C 26               [12] 7089 	add	a,@r0
      00278D FA               [12] 7090 	mov	r2,a
      00278E 74 40            [12] 7091 	mov	a,#0x40
      002790 08               [12] 7092 	inc	r0
      002791 36               [12] 7093 	addc	a,@r0
      002792 FB               [12] 7094 	mov	r3,a
      002793 08               [12] 7095 	inc	r0
      002794 86 04            [24] 7096 	mov	ar4,@r0
      002796 8A 82            [24] 7097 	mov	dpl,r2
      002798 8B 83            [24] 7098 	mov	dph,r3
      00279A 8C F0            [24] 7099 	mov	b,r4
      00279C 12r00r00         [24] 7100 	lcall	__gptrget
      00279F FD               [12] 7101 	mov	r5,a
      0027A0 A3               [24] 7102 	inc	dptr
      0027A1 12r00r00         [24] 7103 	lcall	__gptrget
      0027A4 FE               [12] 7104 	mov	r6,a
      0027A5 A3               [24] 7105 	inc	dptr
      0027A6 12r00r00         [24] 7106 	lcall	__gptrget
      0027A9 FF               [12] 7107 	mov	r7,a
      0027AA C0 04            [24] 7108 	push	ar4
      0027AC C0 03            [24] 7109 	push	ar3
      0027AE C0 02            [24] 7110 	push	ar2
      0027B0 E5*00            [12] 7111 	mov	a,_bp
      0027B2 24 0E            [12] 7112 	add	a,#0x0e
      0027B4 F8               [12] 7113 	mov	r0,a
      0027B5 E6               [12] 7114 	mov	a,@r0
      0027B6 C0 E0            [24] 7115 	push	acc
      0027B8 08               [12] 7116 	inc	r0
      0027B9 E6               [12] 7117 	mov	a,@r0
      0027BA C0 E0            [24] 7118 	push	acc
      0027BC 08               [12] 7119 	inc	r0
      0027BD E6               [12] 7120 	mov	a,@r0
      0027BE C0 E0            [24] 7121 	push	acc
      0027C0 8D 82            [24] 7122 	mov	dpl,r5
      0027C2 8E 83            [24] 7123 	mov	dph,r6
      0027C4 8F F0            [24] 7124 	mov	b,r7
      0027C6 12r00r00         [24] 7125 	lcall	_stack_pop
      0027C9 AE 82            [24] 7126 	mov	r6,dpl
      0027CB AF 83            [24] 7127 	mov	r7,dph
      0027CD 15 81            [12] 7128 	dec	sp
      0027CF 15 81            [12] 7129 	dec	sp
      0027D1 15 81            [12] 7130 	dec	sp
      0027D3 D0 02            [24] 7131 	pop	ar2
      0027D5 D0 03            [24] 7132 	pop	ar3
      0027D7 D0 04            [24] 7133 	pop	ar4
      0027D9 EE               [12] 7134 	mov	a,r6
      0027DA 4F               [12] 7135 	orl	a,r7
      0027DB 70 25            [24] 7136 	jnz	00235$
      0027DD 7Dr4E            [12] 7137 	mov	r5,#___str_10
      0027DF 7Cs00            [12] 7138 	mov	r4,#(___str_10 >> 8)
      0027E1 7B 80            [12] 7139 	mov	r3,#0x80
                                   7140 ;	calc.c:58: return;
      0027E3                       7141 00486$:
                                   7142 ;	calc.c:56: for (; *s; s++) putchar(*s);
      0027E3 8D 82            [24] 7143 	mov	dpl,r5
      0027E5 8C 83            [24] 7144 	mov	dph,r4
      0027E7 8B F0            [24] 7145 	mov	b,r3
      0027E9 12r00r00         [24] 7146 	lcall	__gptrget
      0027EC FF               [12] 7147 	mov	r7,a
      0027ED 70 03            [24] 7148 	jnz	01392$
      0027EF 02r2BrA3         [24] 7149 	ljmp	00249$
      0027F2                       7150 01392$:
      0027F2 7E 00            [12] 7151 	mov	r6,#0x00
      0027F4 8F 82            [24] 7152 	mov	dpl,r7
      0027F6 8E 83            [24] 7153 	mov	dph,r6
      0027F8 12r00r00         [24] 7154 	lcall	_putchar
      0027FB 0D               [12] 7155 	inc	r5
                                   7156 ;	calc.c:323: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      0027FC BD 00 E4         [24] 7157 	cjne	r5,#0x00,00486$
      0027FF 0C               [12] 7158 	inc	r4
      002800 80 E1            [24] 7159 	sjmp	00486$
      002802                       7160 00235$:
                                   7161 ;	calc.c:324: else if (!stack_pop(ctx->ps, &d1)) {
      002802 E5*00            [12] 7162 	mov	a,_bp
      002804 24 19            [12] 7163 	add	a,#0x19
      002806 FF               [12] 7164 	mov	r7,a
      002807 E5*00            [12] 7165 	mov	a,_bp
      002809 24 0E            [12] 7166 	add	a,#0x0e
      00280B F8               [12] 7167 	mov	r0,a
      00280C A6 07            [24] 7168 	mov	@r0,ar7
      00280E 08               [12] 7169 	inc	r0
      00280F 76 00            [12] 7170 	mov	@r0,#0x00
      002811 08               [12] 7171 	inc	r0
      002812 76 40            [12] 7172 	mov	@r0,#0x40
      002814 8A 82            [24] 7173 	mov	dpl,r2
      002816 8B 83            [24] 7174 	mov	dph,r3
      002818 8C F0            [24] 7175 	mov	b,r4
      00281A 12r00r00         [24] 7176 	lcall	__gptrget
      00281D FD               [12] 7177 	mov	r5,a
      00281E A3               [24] 7178 	inc	dptr
      00281F 12r00r00         [24] 7179 	lcall	__gptrget
      002822 FE               [12] 7180 	mov	r6,a
      002823 A3               [24] 7181 	inc	dptr
      002824 12r00r00         [24] 7182 	lcall	__gptrget
      002827 FF               [12] 7183 	mov	r7,a
      002828 C0 04            [24] 7184 	push	ar4
      00282A C0 03            [24] 7185 	push	ar3
      00282C C0 02            [24] 7186 	push	ar2
      00282E E5*00            [12] 7187 	mov	a,_bp
      002830 24 0E            [12] 7188 	add	a,#0x0e
      002832 F8               [12] 7189 	mov	r0,a
      002833 E6               [12] 7190 	mov	a,@r0
      002834 C0 E0            [24] 7191 	push	acc
      002836 08               [12] 7192 	inc	r0
      002837 E6               [12] 7193 	mov	a,@r0
      002838 C0 E0            [24] 7194 	push	acc
      00283A 08               [12] 7195 	inc	r0
      00283B E6               [12] 7196 	mov	a,@r0
      00283C C0 E0            [24] 7197 	push	acc
      00283E 8D 82            [24] 7198 	mov	dpl,r5
      002840 8E 83            [24] 7199 	mov	dph,r6
      002842 8F F0            [24] 7200 	mov	b,r7
      002844 12r00r00         [24] 7201 	lcall	_stack_pop
      002847 AE 82            [24] 7202 	mov	r6,dpl
      002849 AF 83            [24] 7203 	mov	r7,dph
      00284B 15 81            [12] 7204 	dec	sp
      00284D 15 81            [12] 7205 	dec	sp
      00284F 15 81            [12] 7206 	dec	sp
      002851 D0 02            [24] 7207 	pop	ar2
      002853 D0 03            [24] 7208 	pop	ar3
      002855 D0 04            [24] 7209 	pop	ar4
      002857 EE               [12] 7210 	mov	a,r6
      002858 4F               [12] 7211 	orl	a,r7
      002859 70 5C            [24] 7212 	jnz	00232$
                                   7213 ;	calc.c:325: (void)stack_push(ctx->ps, d0);
      00285B 8A 82            [24] 7214 	mov	dpl,r2
      00285D 8B 83            [24] 7215 	mov	dph,r3
      00285F 8C F0            [24] 7216 	mov	b,r4
      002861 12r00r00         [24] 7217 	lcall	__gptrget
      002864 FD               [12] 7218 	mov	r5,a
      002865 A3               [24] 7219 	inc	dptr
      002866 12r00r00         [24] 7220 	lcall	__gptrget
      002869 FE               [12] 7221 	mov	r6,a
      00286A A3               [24] 7222 	inc	dptr
      00286B 12r00r00         [24] 7223 	lcall	__gptrget
      00286E FF               [12] 7224 	mov	r7,a
      00286F E5*00            [12] 7225 	mov	a,_bp
      002871 24 15            [12] 7226 	add	a,#0x15
      002873 F8               [12] 7227 	mov	r0,a
      002874 E6               [12] 7228 	mov	a,@r0
      002875 C0 E0            [24] 7229 	push	acc
      002877 08               [12] 7230 	inc	r0
      002878 E6               [12] 7231 	mov	a,@r0
      002879 C0 E0            [24] 7232 	push	acc
      00287B 08               [12] 7233 	inc	r0
      00287C E6               [12] 7234 	mov	a,@r0
      00287D C0 E0            [24] 7235 	push	acc
      00287F 08               [12] 7236 	inc	r0
      002880 E6               [12] 7237 	mov	a,@r0
      002881 C0 E0            [24] 7238 	push	acc
      002883 8D 82            [24] 7239 	mov	dpl,r5
      002885 8E 83            [24] 7240 	mov	dph,r6
      002887 8F F0            [24] 7241 	mov	b,r7
      002889 12r00r00         [24] 7242 	lcall	_stack_push
      00288C E5 81            [12] 7243 	mov	a,sp
      00288E 24 FC            [12] 7244 	add	a,#0xfc
      002890 F5 81            [12] 7245 	mov	sp,a
                                   7246 ;	calc.c:326: printstr("\r\nstack underflow\r\n");
      002892 7Dr4E            [12] 7247 	mov	r5,#___str_10
      002894 7Cs00            [12] 7248 	mov	r4,#(___str_10 >> 8)
      002896 7B 80            [12] 7249 	mov	r3,#0x80
                                   7250 ;	calc.c:58: return;
      002898                       7251 00489$:
                                   7252 ;	calc.c:56: for (; *s; s++) putchar(*s);
      002898 8D 82            [24] 7253 	mov	dpl,r5
      00289A 8C 83            [24] 7254 	mov	dph,r4
      00289C 8B F0            [24] 7255 	mov	b,r3
      00289E 12r00r00         [24] 7256 	lcall	__gptrget
      0028A1 FF               [12] 7257 	mov	r7,a
      0028A2 70 03            [24] 7258 	jnz	01395$
      0028A4 02r2BrA3         [24] 7259 	ljmp	00249$
      0028A7                       7260 01395$:
      0028A7 7E 00            [12] 7261 	mov	r6,#0x00
      0028A9 8F 82            [24] 7262 	mov	dpl,r7
      0028AB 8E 83            [24] 7263 	mov	dph,r6
      0028AD 12r00r00         [24] 7264 	lcall	_putchar
      0028B0 0D               [12] 7265 	inc	r5
                                   7266 ;	calc.c:326: printstr("\r\nstack underflow\r\n");
      0028B1 BD 00 E4         [24] 7267 	cjne	r5,#0x00,00489$
      0028B4 0C               [12] 7268 	inc	r4
      0028B5 80 E1            [24] 7269 	sjmp	00489$
      0028B7                       7270 00232$:
                                   7271 ;	calc.c:328: d1 >>= d0;
      0028B7 E5*00            [12] 7272 	mov	a,_bp
      0028B9 24 15            [12] 7273 	add	a,#0x15
      0028BB F8               [12] 7274 	mov	r0,a
      0028BC 86 F0            [24] 7275 	mov	b,@r0
      0028BE 05 F0            [12] 7276 	inc	b
      0028C0 E5*00            [12] 7277 	mov	a,_bp
      0028C2 24 19            [12] 7278 	add	a,#0x19
      0028C4 F8               [12] 7279 	mov	r0,a
      0028C5 08               [12] 7280 	inc	r0
      0028C6 08               [12] 7281 	inc	r0
      0028C7 08               [12] 7282 	inc	r0
      0028C8 E6               [12] 7283 	mov	a,@r0
      0028C9 33               [12] 7284 	rlc	a
      0028CA 92 D2            [24] 7285 	mov	ov,c
      0028CC 18               [12] 7286 	dec	r0
      0028CD 18               [12] 7287 	dec	r0
      0028CE 18               [12] 7288 	dec	r0
      0028CF 80 14            [24] 7289 	sjmp	01398$
      0028D1                       7290 01397$:
      0028D1 A2 D2            [12] 7291 	mov	c,ov
      0028D3 08               [12] 7292 	inc	r0
      0028D4 08               [12] 7293 	inc	r0
      0028D5 08               [12] 7294 	inc	r0
      0028D6 E6               [12] 7295 	mov	a,@r0
      0028D7 13               [12] 7296 	rrc	a
      0028D8 F6               [12] 7297 	mov	@r0,a
      0028D9 18               [12] 7298 	dec	r0
      0028DA E6               [12] 7299 	mov	a,@r0
      0028DB 13               [12] 7300 	rrc	a
      0028DC F6               [12] 7301 	mov	@r0,a
      0028DD 18               [12] 7302 	dec	r0
      0028DE E6               [12] 7303 	mov	a,@r0
      0028DF 13               [12] 7304 	rrc	a
      0028E0 F6               [12] 7305 	mov	@r0,a
      0028E1 18               [12] 7306 	dec	r0
      0028E2 E6               [12] 7307 	mov	a,@r0
      0028E3 13               [12] 7308 	rrc	a
      0028E4 F6               [12] 7309 	mov	@r0,a
      0028E5                       7310 01398$:
      0028E5 D5 F0 E9         [24] 7311 	djnz	b,01397$
                                   7312 ;	calc.c:329: (void)stack_push(ctx->ps, d1);
      0028E8 8A 82            [24] 7313 	mov	dpl,r2
      0028EA 8B 83            [24] 7314 	mov	dph,r3
      0028EC 8C F0            [24] 7315 	mov	b,r4
      0028EE 12r00r00         [24] 7316 	lcall	__gptrget
      0028F1 FA               [12] 7317 	mov	r2,a
      0028F2 A3               [24] 7318 	inc	dptr
      0028F3 12r00r00         [24] 7319 	lcall	__gptrget
      0028F6 FB               [12] 7320 	mov	r3,a
      0028F7 A3               [24] 7321 	inc	dptr
      0028F8 12r00r00         [24] 7322 	lcall	__gptrget
      0028FB FC               [12] 7323 	mov	r4,a
      0028FC E5*00            [12] 7324 	mov	a,_bp
      0028FE 24 19            [12] 7325 	add	a,#0x19
      002900 F8               [12] 7326 	mov	r0,a
      002901 E6               [12] 7327 	mov	a,@r0
      002902 C0 E0            [24] 7328 	push	acc
      002904 08               [12] 7329 	inc	r0
      002905 E6               [12] 7330 	mov	a,@r0
      002906 C0 E0            [24] 7331 	push	acc
      002908 08               [12] 7332 	inc	r0
      002909 E6               [12] 7333 	mov	a,@r0
      00290A C0 E0            [24] 7334 	push	acc
      00290C 08               [12] 7335 	inc	r0
      00290D E6               [12] 7336 	mov	a,@r0
      00290E C0 E0            [24] 7337 	push	acc
      002910 8A 82            [24] 7338 	mov	dpl,r2
      002912 8B 83            [24] 7339 	mov	dph,r3
      002914 8C F0            [24] 7340 	mov	b,r4
      002916 12r00r00         [24] 7341 	lcall	_stack_push
      002919 E5 81            [12] 7342 	mov	a,sp
      00291B 24 FC            [12] 7343 	add	a,#0xfc
      00291D F5 81            [12] 7344 	mov	sp,a
                                   7345 ;	calc.c:331: break;
      00291F 02r2BrA3         [24] 7346 	ljmp	00249$
                                   7347 ;	calc.c:332: case '<':
      002922                       7348 00237$:
                                   7349 ;	calc.c:333: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      002922 E5*00            [12] 7350 	mov	a,_bp
      002924 24 15            [12] 7351 	add	a,#0x15
      002926 FF               [12] 7352 	mov	r7,a
      002927 E5*00            [12] 7353 	mov	a,_bp
      002929 24 0E            [12] 7354 	add	a,#0x0e
      00292B F8               [12] 7355 	mov	r0,a
      00292C A6 07            [24] 7356 	mov	@r0,ar7
      00292E 08               [12] 7357 	inc	r0
      00292F 76 00            [12] 7358 	mov	@r0,#0x00
      002931 08               [12] 7359 	inc	r0
      002932 76 40            [12] 7360 	mov	@r0,#0x40
      002934 E5*00            [12] 7361 	mov	a,_bp
      002936 24 12            [12] 7362 	add	a,#0x12
      002938 F8               [12] 7363 	mov	r0,a
      002939 74 11            [12] 7364 	mov	a,#0x11
      00293B 26               [12] 7365 	add	a,@r0
      00293C FA               [12] 7366 	mov	r2,a
      00293D 74 40            [12] 7367 	mov	a,#0x40
      00293F 08               [12] 7368 	inc	r0
      002940 36               [12] 7369 	addc	a,@r0
      002941 FB               [12] 7370 	mov	r3,a
      002942 08               [12] 7371 	inc	r0
      002943 86 04            [24] 7372 	mov	ar4,@r0
      002945 8A 82            [24] 7373 	mov	dpl,r2
      002947 8B 83            [24] 7374 	mov	dph,r3
      002949 8C F0            [24] 7375 	mov	b,r4
      00294B 12r00r00         [24] 7376 	lcall	__gptrget
      00294E FD               [12] 7377 	mov	r5,a
      00294F A3               [24] 7378 	inc	dptr
      002950 12r00r00         [24] 7379 	lcall	__gptrget
      002953 FE               [12] 7380 	mov	r6,a
      002954 A3               [24] 7381 	inc	dptr
      002955 12r00r00         [24] 7382 	lcall	__gptrget
      002958 FF               [12] 7383 	mov	r7,a
      002959 C0 04            [24] 7384 	push	ar4
      00295B C0 03            [24] 7385 	push	ar3
      00295D C0 02            [24] 7386 	push	ar2
      00295F E5*00            [12] 7387 	mov	a,_bp
      002961 24 0E            [12] 7388 	add	a,#0x0e
      002963 F8               [12] 7389 	mov	r0,a
      002964 E6               [12] 7390 	mov	a,@r0
      002965 C0 E0            [24] 7391 	push	acc
      002967 08               [12] 7392 	inc	r0
      002968 E6               [12] 7393 	mov	a,@r0
      002969 C0 E0            [24] 7394 	push	acc
      00296B 08               [12] 7395 	inc	r0
      00296C E6               [12] 7396 	mov	a,@r0
      00296D C0 E0            [24] 7397 	push	acc
      00296F 8D 82            [24] 7398 	mov	dpl,r5
      002971 8E 83            [24] 7399 	mov	dph,r6
      002973 8F F0            [24] 7400 	mov	b,r7
      002975 12r00r00         [24] 7401 	lcall	_stack_pop
      002978 AE 82            [24] 7402 	mov	r6,dpl
      00297A AF 83            [24] 7403 	mov	r7,dph
      00297C 15 81            [12] 7404 	dec	sp
      00297E 15 81            [12] 7405 	dec	sp
      002980 15 81            [12] 7406 	dec	sp
      002982 D0 02            [24] 7407 	pop	ar2
      002984 D0 03            [24] 7408 	pop	ar3
      002986 D0 04            [24] 7409 	pop	ar4
      002988 EE               [12] 7410 	mov	a,r6
      002989 4F               [12] 7411 	orl	a,r7
      00298A 70 25            [24] 7412 	jnz	00242$
      00298C 7Dr4E            [12] 7413 	mov	r5,#___str_10
      00298E 7Cs00            [12] 7414 	mov	r4,#(___str_10 >> 8)
      002990 7B 80            [12] 7415 	mov	r3,#0x80
                                   7416 ;	calc.c:58: return;
      002992                       7417 00492$:
                                   7418 ;	calc.c:56: for (; *s; s++) putchar(*s);
      002992 8D 82            [24] 7419 	mov	dpl,r5
      002994 8C 83            [24] 7420 	mov	dph,r4
      002996 8B F0            [24] 7421 	mov	b,r3
      002998 12r00r00         [24] 7422 	lcall	__gptrget
      00299B FF               [12] 7423 	mov	r7,a
      00299C 70 03            [24] 7424 	jnz	01400$
      00299E 02r2BrA3         [24] 7425 	ljmp	00249$
      0029A1                       7426 01400$:
      0029A1 7E 00            [12] 7427 	mov	r6,#0x00
      0029A3 8F 82            [24] 7428 	mov	dpl,r7
      0029A5 8E 83            [24] 7429 	mov	dph,r6
      0029A7 12r00r00         [24] 7430 	lcall	_putchar
      0029AA 0D               [12] 7431 	inc	r5
                                   7432 ;	calc.c:333: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      0029AB BD 00 E4         [24] 7433 	cjne	r5,#0x00,00492$
      0029AE 0C               [12] 7434 	inc	r4
      0029AF 80 E1            [24] 7435 	sjmp	00492$
      0029B1                       7436 00242$:
                                   7437 ;	calc.c:334: else if (!stack_pop(ctx->ps, &d1)) {
      0029B1 E5*00            [12] 7438 	mov	a,_bp
      0029B3 24 19            [12] 7439 	add	a,#0x19
      0029B5 FF               [12] 7440 	mov	r7,a
      0029B6 E5*00            [12] 7441 	mov	a,_bp
      0029B8 24 0E            [12] 7442 	add	a,#0x0e
      0029BA F8               [12] 7443 	mov	r0,a
      0029BB A6 07            [24] 7444 	mov	@r0,ar7
      0029BD 08               [12] 7445 	inc	r0
      0029BE 76 00            [12] 7446 	mov	@r0,#0x00
      0029C0 08               [12] 7447 	inc	r0
      0029C1 76 40            [12] 7448 	mov	@r0,#0x40
      0029C3 8A 82            [24] 7449 	mov	dpl,r2
      0029C5 8B 83            [24] 7450 	mov	dph,r3
      0029C7 8C F0            [24] 7451 	mov	b,r4
      0029C9 12r00r00         [24] 7452 	lcall	__gptrget
      0029CC FD               [12] 7453 	mov	r5,a
      0029CD A3               [24] 7454 	inc	dptr
      0029CE 12r00r00         [24] 7455 	lcall	__gptrget
      0029D1 FE               [12] 7456 	mov	r6,a
      0029D2 A3               [24] 7457 	inc	dptr
      0029D3 12r00r00         [24] 7458 	lcall	__gptrget
      0029D6 FF               [12] 7459 	mov	r7,a
      0029D7 C0 04            [24] 7460 	push	ar4
      0029D9 C0 03            [24] 7461 	push	ar3
      0029DB C0 02            [24] 7462 	push	ar2
      0029DD E5*00            [12] 7463 	mov	a,_bp
      0029DF 24 0E            [12] 7464 	add	a,#0x0e
      0029E1 F8               [12] 7465 	mov	r0,a
      0029E2 E6               [12] 7466 	mov	a,@r0
      0029E3 C0 E0            [24] 7467 	push	acc
      0029E5 08               [12] 7468 	inc	r0
      0029E6 E6               [12] 7469 	mov	a,@r0
      0029E7 C0 E0            [24] 7470 	push	acc
      0029E9 08               [12] 7471 	inc	r0
      0029EA E6               [12] 7472 	mov	a,@r0
      0029EB C0 E0            [24] 7473 	push	acc
      0029ED 8D 82            [24] 7474 	mov	dpl,r5
      0029EF 8E 83            [24] 7475 	mov	dph,r6
      0029F1 8F F0            [24] 7476 	mov	b,r7
      0029F3 12r00r00         [24] 7477 	lcall	_stack_pop
      0029F6 AE 82            [24] 7478 	mov	r6,dpl
      0029F8 AF 83            [24] 7479 	mov	r7,dph
      0029FA 15 81            [12] 7480 	dec	sp
      0029FC 15 81            [12] 7481 	dec	sp
      0029FE 15 81            [12] 7482 	dec	sp
      002A00 D0 02            [24] 7483 	pop	ar2
      002A02 D0 03            [24] 7484 	pop	ar3
      002A04 D0 04            [24] 7485 	pop	ar4
      002A06 EE               [12] 7486 	mov	a,r6
      002A07 4F               [12] 7487 	orl	a,r7
      002A08 70 5C            [24] 7488 	jnz	00239$
                                   7489 ;	calc.c:335: (void)stack_push(ctx->ps, d0);
      002A0A 8A 82            [24] 7490 	mov	dpl,r2
      002A0C 8B 83            [24] 7491 	mov	dph,r3
      002A0E 8C F0            [24] 7492 	mov	b,r4
      002A10 12r00r00         [24] 7493 	lcall	__gptrget
      002A13 FD               [12] 7494 	mov	r5,a
      002A14 A3               [24] 7495 	inc	dptr
      002A15 12r00r00         [24] 7496 	lcall	__gptrget
      002A18 FE               [12] 7497 	mov	r6,a
      002A19 A3               [24] 7498 	inc	dptr
      002A1A 12r00r00         [24] 7499 	lcall	__gptrget
      002A1D FF               [12] 7500 	mov	r7,a
      002A1E E5*00            [12] 7501 	mov	a,_bp
      002A20 24 15            [12] 7502 	add	a,#0x15
      002A22 F8               [12] 7503 	mov	r0,a
      002A23 E6               [12] 7504 	mov	a,@r0
      002A24 C0 E0            [24] 7505 	push	acc
      002A26 08               [12] 7506 	inc	r0
      002A27 E6               [12] 7507 	mov	a,@r0
      002A28 C0 E0            [24] 7508 	push	acc
      002A2A 08               [12] 7509 	inc	r0
      002A2B E6               [12] 7510 	mov	a,@r0
      002A2C C0 E0            [24] 7511 	push	acc
      002A2E 08               [12] 7512 	inc	r0
      002A2F E6               [12] 7513 	mov	a,@r0
      002A30 C0 E0            [24] 7514 	push	acc
      002A32 8D 82            [24] 7515 	mov	dpl,r5
      002A34 8E 83            [24] 7516 	mov	dph,r6
      002A36 8F F0            [24] 7517 	mov	b,r7
      002A38 12r00r00         [24] 7518 	lcall	_stack_push
      002A3B E5 81            [12] 7519 	mov	a,sp
      002A3D 24 FC            [12] 7520 	add	a,#0xfc
      002A3F F5 81            [12] 7521 	mov	sp,a
                                   7522 ;	calc.c:336: printstr("\r\nstack underflow\r\n");
      002A41 7Dr4E            [12] 7523 	mov	r5,#___str_10
      002A43 7Cs00            [12] 7524 	mov	r4,#(___str_10 >> 8)
      002A45 7B 80            [12] 7525 	mov	r3,#0x80
                                   7526 ;	calc.c:58: return;
      002A47                       7527 00495$:
                                   7528 ;	calc.c:56: for (; *s; s++) putchar(*s);
      002A47 8D 82            [24] 7529 	mov	dpl,r5
      002A49 8C 83            [24] 7530 	mov	dph,r4
      002A4B 8B F0            [24] 7531 	mov	b,r3
      002A4D 12r00r00         [24] 7532 	lcall	__gptrget
      002A50 FF               [12] 7533 	mov	r7,a
      002A51 70 03            [24] 7534 	jnz	01403$
      002A53 02r2BrA3         [24] 7535 	ljmp	00249$
      002A56                       7536 01403$:
      002A56 7E 00            [12] 7537 	mov	r6,#0x00
      002A58 8F 82            [24] 7538 	mov	dpl,r7
      002A5A 8E 83            [24] 7539 	mov	dph,r6
      002A5C 12r00r00         [24] 7540 	lcall	_putchar
      002A5F 0D               [12] 7541 	inc	r5
                                   7542 ;	calc.c:336: printstr("\r\nstack underflow\r\n");
      002A60 BD 00 E4         [24] 7543 	cjne	r5,#0x00,00495$
      002A63 0C               [12] 7544 	inc	r4
      002A64 80 E1            [24] 7545 	sjmp	00495$
      002A66                       7546 00239$:
                                   7547 ;	calc.c:338: d1 <<= d0;
      002A66 E5*00            [12] 7548 	mov	a,_bp
      002A68 24 15            [12] 7549 	add	a,#0x15
      002A6A F8               [12] 7550 	mov	r0,a
      002A6B 86 F0            [24] 7551 	mov	b,@r0
      002A6D 05 F0            [12] 7552 	inc	b
      002A6F E5*00            [12] 7553 	mov	a,_bp
      002A71 24 19            [12] 7554 	add	a,#0x19
      002A73 F8               [12] 7555 	mov	r0,a
      002A74 80 12            [24] 7556 	sjmp	01406$
      002A76                       7557 01405$:
      002A76 E6               [12] 7558 	mov	a,@r0
      002A77 26               [12] 7559 	add	a,@r0
      002A78 F6               [12] 7560 	mov	@r0,a
      002A79 08               [12] 7561 	inc	r0
      002A7A E6               [12] 7562 	mov	a,@r0
      002A7B 33               [12] 7563 	rlc	a
      002A7C F6               [12] 7564 	mov	@r0,a
      002A7D 08               [12] 7565 	inc	r0
      002A7E E6               [12] 7566 	mov	a,@r0
      002A7F 33               [12] 7567 	rlc	a
      002A80 F6               [12] 7568 	mov	@r0,a
      002A81 08               [12] 7569 	inc	r0
      002A82 E6               [12] 7570 	mov	a,@r0
      002A83 33               [12] 7571 	rlc	a
      002A84 F6               [12] 7572 	mov	@r0,a
      002A85 18               [12] 7573 	dec	r0
      002A86 18               [12] 7574 	dec	r0
      002A87 18               [12] 7575 	dec	r0
      002A88                       7576 01406$:
      002A88 D5 F0 EB         [24] 7577 	djnz	b,01405$
                                   7578 ;	calc.c:339: (void)stack_push(ctx->ps, d1);
      002A8B 8A 82            [24] 7579 	mov	dpl,r2
      002A8D 8B 83            [24] 7580 	mov	dph,r3
      002A8F 8C F0            [24] 7581 	mov	b,r4
      002A91 12r00r00         [24] 7582 	lcall	__gptrget
      002A94 FA               [12] 7583 	mov	r2,a
      002A95 A3               [24] 7584 	inc	dptr
      002A96 12r00r00         [24] 7585 	lcall	__gptrget
      002A99 FB               [12] 7586 	mov	r3,a
      002A9A A3               [24] 7587 	inc	dptr
      002A9B 12r00r00         [24] 7588 	lcall	__gptrget
      002A9E FC               [12] 7589 	mov	r4,a
      002A9F E5*00            [12] 7590 	mov	a,_bp
      002AA1 24 19            [12] 7591 	add	a,#0x19
      002AA3 F8               [12] 7592 	mov	r0,a
      002AA4 E6               [12] 7593 	mov	a,@r0
      002AA5 C0 E0            [24] 7594 	push	acc
      002AA7 08               [12] 7595 	inc	r0
      002AA8 E6               [12] 7596 	mov	a,@r0
      002AA9 C0 E0            [24] 7597 	push	acc
      002AAB 08               [12] 7598 	inc	r0
      002AAC E6               [12] 7599 	mov	a,@r0
      002AAD C0 E0            [24] 7600 	push	acc
      002AAF 08               [12] 7601 	inc	r0
      002AB0 E6               [12] 7602 	mov	a,@r0
      002AB1 C0 E0            [24] 7603 	push	acc
      002AB3 8A 82            [24] 7604 	mov	dpl,r2
      002AB5 8B 83            [24] 7605 	mov	dph,r3
      002AB7 8C F0            [24] 7606 	mov	b,r4
      002AB9 12r00r00         [24] 7607 	lcall	_stack_push
      002ABC E5 81            [12] 7608 	mov	a,sp
      002ABE 24 FC            [12] 7609 	add	a,#0xfc
      002AC0 F5 81            [12] 7610 	mov	sp,a
                                   7611 ;	calc.c:341: break;
      002AC2 02r2BrA3         [24] 7612 	ljmp	00249$
                                   7613 ;	calc.c:342: case '~':
      002AC5                       7614 00244$:
                                   7615 ;	calc.c:343: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      002AC5 E5*00            [12] 7616 	mov	a,_bp
      002AC7 24 15            [12] 7617 	add	a,#0x15
      002AC9 FF               [12] 7618 	mov	r7,a
      002ACA E5*00            [12] 7619 	mov	a,_bp
      002ACC 24 0E            [12] 7620 	add	a,#0x0e
      002ACE F8               [12] 7621 	mov	r0,a
      002ACF A6 07            [24] 7622 	mov	@r0,ar7
      002AD1 08               [12] 7623 	inc	r0
      002AD2 76 00            [12] 7624 	mov	@r0,#0x00
      002AD4 08               [12] 7625 	inc	r0
      002AD5 76 40            [12] 7626 	mov	@r0,#0x40
      002AD7 E5*00            [12] 7627 	mov	a,_bp
      002AD9 24 12            [12] 7628 	add	a,#0x12
      002ADB F8               [12] 7629 	mov	r0,a
      002ADC 74 11            [12] 7630 	mov	a,#0x11
      002ADE 26               [12] 7631 	add	a,@r0
      002ADF FA               [12] 7632 	mov	r2,a
      002AE0 74 40            [12] 7633 	mov	a,#0x40
      002AE2 08               [12] 7634 	inc	r0
      002AE3 36               [12] 7635 	addc	a,@r0
      002AE4 FB               [12] 7636 	mov	r3,a
      002AE5 08               [12] 7637 	inc	r0
      002AE6 86 04            [24] 7638 	mov	ar4,@r0
      002AE8 8A 82            [24] 7639 	mov	dpl,r2
      002AEA 8B 83            [24] 7640 	mov	dph,r3
      002AEC 8C F0            [24] 7641 	mov	b,r4
      002AEE 12r00r00         [24] 7642 	lcall	__gptrget
      002AF1 FD               [12] 7643 	mov	r5,a
      002AF2 A3               [24] 7644 	inc	dptr
      002AF3 12r00r00         [24] 7645 	lcall	__gptrget
      002AF6 FE               [12] 7646 	mov	r6,a
      002AF7 A3               [24] 7647 	inc	dptr
      002AF8 12r00r00         [24] 7648 	lcall	__gptrget
      002AFB FF               [12] 7649 	mov	r7,a
      002AFC C0 04            [24] 7650 	push	ar4
      002AFE C0 03            [24] 7651 	push	ar3
      002B00 C0 02            [24] 7652 	push	ar2
      002B02 E5*00            [12] 7653 	mov	a,_bp
      002B04 24 0E            [12] 7654 	add	a,#0x0e
      002B06 F8               [12] 7655 	mov	r0,a
      002B07 E6               [12] 7656 	mov	a,@r0
      002B08 C0 E0            [24] 7657 	push	acc
      002B0A 08               [12] 7658 	inc	r0
      002B0B E6               [12] 7659 	mov	a,@r0
      002B0C C0 E0            [24] 7660 	push	acc
      002B0E 08               [12] 7661 	inc	r0
      002B0F E6               [12] 7662 	mov	a,@r0
      002B10 C0 E0            [24] 7663 	push	acc
      002B12 8D 82            [24] 7664 	mov	dpl,r5
      002B14 8E 83            [24] 7665 	mov	dph,r6
      002B16 8F F0            [24] 7666 	mov	b,r7
      002B18 12r00r00         [24] 7667 	lcall	_stack_pop
      002B1B AE 82            [24] 7668 	mov	r6,dpl
      002B1D AF 83            [24] 7669 	mov	r7,dph
      002B1F 15 81            [12] 7670 	dec	sp
      002B21 15 81            [12] 7671 	dec	sp
      002B23 15 81            [12] 7672 	dec	sp
      002B25 D0 02            [24] 7673 	pop	ar2
      002B27 D0 03            [24] 7674 	pop	ar3
      002B29 D0 04            [24] 7675 	pop	ar4
      002B2B EE               [12] 7676 	mov	a,r6
      002B2C 4F               [12] 7677 	orl	a,r7
      002B2D 70 22            [24] 7678 	jnz	00246$
      002B2F 7Dr4E            [12] 7679 	mov	r5,#___str_10
      002B31 7Cs00            [12] 7680 	mov	r4,#(___str_10 >> 8)
      002B33 7B 80            [12] 7681 	mov	r3,#0x80
                                   7682 ;	calc.c:58: return;
      002B35                       7683 00498$:
                                   7684 ;	calc.c:56: for (; *s; s++) putchar(*s);
      002B35 8D 82            [24] 7685 	mov	dpl,r5
      002B37 8C 83            [24] 7686 	mov	dph,r4
      002B39 8B F0            [24] 7687 	mov	b,r3
      002B3B 12r00r00         [24] 7688 	lcall	__gptrget
      002B3E FF               [12] 7689 	mov	r7,a
      002B3F 60 62            [24] 7690 	jz	00249$
      002B41 7E 00            [12] 7691 	mov	r6,#0x00
      002B43 8F 82            [24] 7692 	mov	dpl,r7
      002B45 8E 83            [24] 7693 	mov	dph,r6
      002B47 12r00r00         [24] 7694 	lcall	_putchar
      002B4A 0D               [12] 7695 	inc	r5
                                   7696 ;	calc.c:343: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      002B4B BD 00 E7         [24] 7697 	cjne	r5,#0x00,00498$
      002B4E 0C               [12] 7698 	inc	r4
      002B4F 80 E4            [24] 7699 	sjmp	00498$
      002B51                       7700 00246$:
                                   7701 ;	calc.c:345: d0 = ~d0;
      002B51 E5*00            [12] 7702 	mov	a,_bp
      002B53 24 15            [12] 7703 	add	a,#0x15
      002B55 F8               [12] 7704 	mov	r0,a
      002B56 E6               [12] 7705 	mov	a,@r0
      002B57 F4               [12] 7706 	cpl	a
      002B58 F6               [12] 7707 	mov	@r0,a
      002B59 08               [12] 7708 	inc	r0
      002B5A E6               [12] 7709 	mov	a,@r0
      002B5B F4               [12] 7710 	cpl	a
      002B5C F6               [12] 7711 	mov	@r0,a
      002B5D 08               [12] 7712 	inc	r0
      002B5E E6               [12] 7713 	mov	a,@r0
      002B5F F4               [12] 7714 	cpl	a
      002B60 F6               [12] 7715 	mov	@r0,a
      002B61 08               [12] 7716 	inc	r0
      002B62 E6               [12] 7717 	mov	a,@r0
      002B63 F4               [12] 7718 	cpl	a
      002B64 F6               [12] 7719 	mov	@r0,a
                                   7720 ;	calc.c:346: (void)stack_push(ctx->ps, d0);
      002B65 8A 82            [24] 7721 	mov	dpl,r2
      002B67 8B 83            [24] 7722 	mov	dph,r3
      002B69 8C F0            [24] 7723 	mov	b,r4
      002B6B 12r00r00         [24] 7724 	lcall	__gptrget
      002B6E FA               [12] 7725 	mov	r2,a
      002B6F A3               [24] 7726 	inc	dptr
      002B70 12r00r00         [24] 7727 	lcall	__gptrget
      002B73 FB               [12] 7728 	mov	r3,a
      002B74 A3               [24] 7729 	inc	dptr
      002B75 12r00r00         [24] 7730 	lcall	__gptrget
      002B78 FC               [12] 7731 	mov	r4,a
      002B79 E5*00            [12] 7732 	mov	a,_bp
      002B7B 24 15            [12] 7733 	add	a,#0x15
      002B7D F8               [12] 7734 	mov	r0,a
      002B7E E6               [12] 7735 	mov	a,@r0
      002B7F C0 E0            [24] 7736 	push	acc
      002B81 08               [12] 7737 	inc	r0
      002B82 E6               [12] 7738 	mov	a,@r0
      002B83 C0 E0            [24] 7739 	push	acc
      002B85 08               [12] 7740 	inc	r0
      002B86 E6               [12] 7741 	mov	a,@r0
      002B87 C0 E0            [24] 7742 	push	acc
      002B89 08               [12] 7743 	inc	r0
      002B8A E6               [12] 7744 	mov	a,@r0
      002B8B C0 E0            [24] 7745 	push	acc
      002B8D 8A 82            [24] 7746 	mov	dpl,r2
      002B8F 8B 83            [24] 7747 	mov	dph,r3
      002B91 8C F0            [24] 7748 	mov	b,r4
      002B93 12r00r00         [24] 7749 	lcall	_stack_push
      002B96 E5 81            [12] 7750 	mov	a,sp
      002B98 24 FC            [12] 7751 	add	a,#0xfc
      002B9A F5 81            [12] 7752 	mov	sp,a
                                   7753 ;	calc.c:348: break;
                                   7754 ;	calc.c:349: default:
      002B9C 80 05            [24] 7755 	sjmp	00249$
      002B9E                       7756 00248$:
                                   7757 ;	calc.c:350: return UNDEF;
      002B9E 90 80 00         [24] 7758 	mov	dptr,#0x8000
                                   7759 ;	calc.c:351: }
      002BA1 80 03            [24] 7760 	sjmp	00500$
      002BA3                       7761 00249$:
                                   7762 ;	calc.c:353: return 1;
      002BA3 90 00 01         [24] 7763 	mov	dptr,#0x0001
      002BA6                       7764 00500$:
                                   7765 ;	calc.c:354: }
      002BA6 85*00 81         [24] 7766 	mov	sp,_bp
      002BA9 D0*00            [24] 7767 	pop	_bp
      002BAB 22               [24] 7768 	ret
                                   7769 ;------------------------------------------------------------
                                   7770 ;Allocation info for local variables in function 'push_acc'
                                   7771 ;------------------------------------------------------------
                                   7772 ;delta                     Allocated to stack - _bp -5
                                   7773 ;_ctx                      Allocated to stack - _bp +1
                                   7774 ;ctx                       Allocated to registers r2 r3 r4 
                                   7775 ;__1310720127              Allocated to registers 
                                   7776 ;s                         Allocated to registers r5 r6 r7 
                                   7777 ;sloc0                     Allocated to stack - _bp +4
                                   7778 ;------------------------------------------------------------
                                   7779 ;	calc.c:356: static int push_acc(void *_ctx, delta_t *delta) __reentrant {
                                   7780 ;	-----------------------------------------
                                   7781 ;	 function push_acc
                                   7782 ;	-----------------------------------------
      002BAC                       7783 _push_acc:
      002BAC C0*00            [24] 7784 	push	_bp
      002BAE 85 81*00         [24] 7785 	mov	_bp,sp
      002BB1 C0 82            [24] 7786 	push	dpl
      002BB3 C0 83            [24] 7787 	push	dph
      002BB5 C0 F0            [24] 7788 	push	b
      002BB7 E5 81            [12] 7789 	mov	a,sp
      002BB9 24 04            [12] 7790 	add	a,#0x04
      002BBB F5 81            [12] 7791 	mov	sp,a
                                   7792 ;	calc.c:357: calc_ctx_t *ctx = (calc_ctx_t *)_ctx;
      002BBD A8*00            [24] 7793 	mov	r0,_bp
      002BBF 08               [12] 7794 	inc	r0
      002BC0 86 02            [24] 7795 	mov	ar2,@r0
      002BC2 08               [12] 7796 	inc	r0
      002BC3 86 03            [24] 7797 	mov	ar3,@r0
      002BC5 08               [12] 7798 	inc	r0
      002BC6 86 04            [24] 7799 	mov	ar4,@r0
                                   7800 ;	calc.c:361: ctx->acc_valid = 0;
      002BC8 74 06            [12] 7801 	mov	a,#0x06
      002BCA 2A               [12] 7802 	add	a,r2
      002BCB FD               [12] 7803 	mov	r5,a
      002BCC E4               [12] 7804 	clr	a
      002BCD 3B               [12] 7805 	addc	a,r3
      002BCE FE               [12] 7806 	mov	r6,a
      002BCF 8C 07            [24] 7807 	mov	ar7,r4
      002BD1 8D 82            [24] 7808 	mov	dpl,r5
      002BD3 8E 83            [24] 7809 	mov	dph,r6
      002BD5 8F F0            [24] 7810 	mov	b,r7
      002BD7 E4               [12] 7811 	clr	a
      002BD8 12r00r00         [24] 7812 	lcall	__gptrput
                                   7813 ;	calc.c:362: if (!stack_push(ctx->ps, ctx->acc)) printstr("\r\nstack overflow\r\n");
      002BDB 74 02            [12] 7814 	mov	a,#0x02
      002BDD 2A               [12] 7815 	add	a,r2
      002BDE FF               [12] 7816 	mov	r7,a
      002BDF E4               [12] 7817 	clr	a
      002BE0 3B               [12] 7818 	addc	a,r3
      002BE1 FD               [12] 7819 	mov	r5,a
      002BE2 8C 06            [24] 7820 	mov	ar6,r4
      002BE4 8F 82            [24] 7821 	mov	dpl,r7
      002BE6 8D 83            [24] 7822 	mov	dph,r5
      002BE8 8E F0            [24] 7823 	mov	b,r6
      002BEA E5*00            [12] 7824 	mov	a,_bp
      002BEC 24 04            [12] 7825 	add	a,#0x04
      002BEE F8               [12] 7826 	mov	r0,a
      002BEF 12r00r00         [24] 7827 	lcall	__gptrget
      002BF2 F6               [12] 7828 	mov	@r0,a
      002BF3 A3               [24] 7829 	inc	dptr
      002BF4 12r00r00         [24] 7830 	lcall	__gptrget
      002BF7 08               [12] 7831 	inc	r0
      002BF8 F6               [12] 7832 	mov	@r0,a
      002BF9 A3               [24] 7833 	inc	dptr
      002BFA 12r00r00         [24] 7834 	lcall	__gptrget
      002BFD 08               [12] 7835 	inc	r0
      002BFE F6               [12] 7836 	mov	@r0,a
      002BFF A3               [24] 7837 	inc	dptr
      002C00 12r00r00         [24] 7838 	lcall	__gptrget
      002C03 08               [12] 7839 	inc	r0
      002C04 F6               [12] 7840 	mov	@r0,a
      002C05 74 11            [12] 7841 	mov	a,#0x11
      002C07 2A               [12] 7842 	add	a,r2
      002C08 FA               [12] 7843 	mov	r2,a
      002C09 74 40            [12] 7844 	mov	a,#0x40
      002C0B 3B               [12] 7845 	addc	a,r3
      002C0C FB               [12] 7846 	mov	r3,a
      002C0D 8C 07            [24] 7847 	mov	ar7,r4
      002C0F 8A 82            [24] 7848 	mov	dpl,r2
      002C11 8B 83            [24] 7849 	mov	dph,r3
      002C13 8F F0            [24] 7850 	mov	b,r7
      002C15 12r00r00         [24] 7851 	lcall	__gptrget
      002C18 FA               [12] 7852 	mov	r2,a
      002C19 A3               [24] 7853 	inc	dptr
      002C1A 12r00r00         [24] 7854 	lcall	__gptrget
      002C1D FB               [12] 7855 	mov	r3,a
      002C1E A3               [24] 7856 	inc	dptr
      002C1F 12r00r00         [24] 7857 	lcall	__gptrget
      002C22 FF               [12] 7858 	mov	r7,a
      002C23 E5*00            [12] 7859 	mov	a,_bp
      002C25 24 04            [12] 7860 	add	a,#0x04
      002C27 F8               [12] 7861 	mov	r0,a
      002C28 E6               [12] 7862 	mov	a,@r0
      002C29 C0 E0            [24] 7863 	push	acc
      002C2B 08               [12] 7864 	inc	r0
      002C2C E6               [12] 7865 	mov	a,@r0
      002C2D C0 E0            [24] 7866 	push	acc
      002C2F 08               [12] 7867 	inc	r0
      002C30 E6               [12] 7868 	mov	a,@r0
      002C31 C0 E0            [24] 7869 	push	acc
      002C33 08               [12] 7870 	inc	r0
      002C34 E6               [12] 7871 	mov	a,@r0
      002C35 C0 E0            [24] 7872 	push	acc
      002C37 8A 82            [24] 7873 	mov	dpl,r2
      002C39 8B 83            [24] 7874 	mov	dph,r3
      002C3B 8F F0            [24] 7875 	mov	b,r7
      002C3D 12r00r00         [24] 7876 	lcall	_stack_push
      002C40 AE 82            [24] 7877 	mov	r6,dpl
      002C42 AF 83            [24] 7878 	mov	r7,dph
      002C44 E5 81            [12] 7879 	mov	a,sp
      002C46 24 FC            [12] 7880 	add	a,#0xfc
      002C48 F5 81            [12] 7881 	mov	sp,a
      002C4A EE               [12] 7882 	mov	a,r6
      002C4B 4F               [12] 7883 	orl	a,r7
      002C4C 70 22            [24] 7884 	jnz	00102$
      002C4E 7Dr9D            [12] 7885 	mov	r5,#___str_13
      002C50 7Es00            [12] 7886 	mov	r6,#(___str_13 >> 8)
      002C52 7F 80            [12] 7887 	mov	r7,#0x80
                                   7888 ;	calc.c:58: return;
      002C54                       7889 00109$:
                                   7890 ;	calc.c:56: for (; *s; s++) putchar(*s);
      002C54 8D 82            [24] 7891 	mov	dpl,r5
      002C56 8E 83            [24] 7892 	mov	dph,r6
      002C58 8F F0            [24] 7893 	mov	b,r7
      002C5A 12r00r00         [24] 7894 	lcall	__gptrget
      002C5D FC               [12] 7895 	mov	r4,a
      002C5E 60 10            [24] 7896 	jz	00102$
      002C60 7B 00            [12] 7897 	mov	r3,#0x00
      002C62 8C 82            [24] 7898 	mov	dpl,r4
      002C64 8B 83            [24] 7899 	mov	dph,r3
      002C66 12r00r00         [24] 7900 	lcall	_putchar
      002C69 0D               [12] 7901 	inc	r5
                                   7902 ;	calc.c:362: if (!stack_push(ctx->ps, ctx->acc)) printstr("\r\nstack overflow\r\n");
      002C6A BD 00 E7         [24] 7903 	cjne	r5,#0x00,00109$
      002C6D 0E               [12] 7904 	inc	r6
      002C6E 80 E4            [24] 7905 	sjmp	00109$
      002C70                       7906 00102$:
                                   7907 ;	calc.c:364: if (delta->event == EVENT_OP) return operator(_ctx, delta);
      002C70 E5*00            [12] 7908 	mov	a,_bp
      002C72 24 FB            [12] 7909 	add	a,#0xfb
      002C74 F8               [12] 7910 	mov	r0,a
      002C75 86 05            [24] 7911 	mov	ar5,@r0
      002C77 08               [12] 7912 	inc	r0
      002C78 86 06            [24] 7913 	mov	ar6,@r0
      002C7A 08               [12] 7914 	inc	r0
      002C7B 86 07            [24] 7915 	mov	ar7,@r0
      002C7D 74 02            [12] 7916 	mov	a,#0x02
      002C7F 2D               [12] 7917 	add	a,r5
      002C80 FA               [12] 7918 	mov	r2,a
      002C81 E4               [12] 7919 	clr	a
      002C82 3E               [12] 7920 	addc	a,r6
      002C83 FB               [12] 7921 	mov	r3,a
      002C84 8F 04            [24] 7922 	mov	ar4,r7
      002C86 8A 82            [24] 7923 	mov	dpl,r2
      002C88 8B 83            [24] 7924 	mov	dph,r3
      002C8A 8C F0            [24] 7925 	mov	b,r4
      002C8C 12r00r00         [24] 7926 	lcall	__gptrget
      002C8F FA               [12] 7927 	mov	r2,a
      002C90 A3               [24] 7928 	inc	dptr
      002C91 12r00r00         [24] 7929 	lcall	__gptrget
      002C94 FB               [12] 7930 	mov	r3,a
      002C95 BA 02 27         [24] 7931 	cjne	r2,#0x02,00104$
      002C98 BB 00 24         [24] 7932 	cjne	r3,#0x00,00104$
      002C9B C0 05            [24] 7933 	push	ar5
      002C9D C0 06            [24] 7934 	push	ar6
      002C9F C0 07            [24] 7935 	push	ar7
      002CA1 A8*00            [24] 7936 	mov	r0,_bp
      002CA3 08               [12] 7937 	inc	r0
      002CA4 86 82            [24] 7938 	mov	dpl,@r0
      002CA6 08               [12] 7939 	inc	r0
      002CA7 86 83            [24] 7940 	mov	dph,@r0
      002CA9 08               [12] 7941 	inc	r0
      002CAA 86 F0            [24] 7942 	mov	b,@r0
      002CAC 12r08rB2         [24] 7943 	lcall	_operator
      002CAF AE 82            [24] 7944 	mov	r6,dpl
      002CB1 AF 83            [24] 7945 	mov	r7,dph
      002CB3 15 81            [12] 7946 	dec	sp
      002CB5 15 81            [12] 7947 	dec	sp
      002CB7 15 81            [12] 7948 	dec	sp
      002CB9 8E 82            [24] 7949 	mov	dpl,r6
      002CBB 8F 83            [24] 7950 	mov	dph,r7
      002CBD 80 03            [24] 7951 	sjmp	00111$
      002CBF                       7952 00104$:
                                   7953 ;	calc.c:365: else return 1;
      002CBF 90 00 01         [24] 7954 	mov	dptr,#0x0001
      002CC2                       7955 00111$:
                                   7956 ;	calc.c:366: }
      002CC2 85*00 81         [24] 7957 	mov	sp,_bp
      002CC5 D0*00            [24] 7958 	pop	_bp
      002CC7 22               [24] 7959 	ret
                                   7960 ;------------------------------------------------------------
                                   7961 ;Allocation info for local variables in function 'reset_acc'
                                   7962 ;------------------------------------------------------------
                                   7963 ;delta                     Allocated to stack - _bp -5
                                   7964 ;_ctx                      Allocated to registers r5 r6 r7 
                                   7965 ;ctx                       Allocated to registers r5 r6 r7 
                                   7966 ;------------------------------------------------------------
                                   7967 ;	calc.c:368: static int reset_acc(void *_ctx, delta_t *delta) __reentrant {
                                   7968 ;	-----------------------------------------
                                   7969 ;	 function reset_acc
                                   7970 ;	-----------------------------------------
      002CC8                       7971 _reset_acc:
      002CC8 C0*00            [24] 7972 	push	_bp
      002CCA 85 81*00         [24] 7973 	mov	_bp,sp
      002CCD AD 82            [24] 7974 	mov	r5,dpl
      002CCF AE 83            [24] 7975 	mov	r6,dph
      002CD1 AF F0            [24] 7976 	mov	r7,b
                                   7977 ;	calc.c:369: calc_ctx_t *ctx = (calc_ctx_t *)_ctx;
                                   7978 ;	calc.c:371: if (delta->event == EVENT_RSTA_I) ctx->acc_valid = 0;
      002CD3 E5*00            [12] 7979 	mov	a,_bp
      002CD5 24 FB            [12] 7980 	add	a,#0xfb
      002CD7 F8               [12] 7981 	mov	r0,a
      002CD8 86 02            [24] 7982 	mov	ar2,@r0
      002CDA 08               [12] 7983 	inc	r0
      002CDB 86 03            [24] 7984 	mov	ar3,@r0
      002CDD 08               [12] 7985 	inc	r0
      002CDE 86 04            [24] 7986 	mov	ar4,@r0
      002CE0 74 02            [12] 7987 	mov	a,#0x02
      002CE2 2A               [12] 7988 	add	a,r2
      002CE3 FA               [12] 7989 	mov	r2,a
      002CE4 E4               [12] 7990 	clr	a
      002CE5 3B               [12] 7991 	addc	a,r3
      002CE6 FB               [12] 7992 	mov	r3,a
      002CE7 8A 82            [24] 7993 	mov	dpl,r2
      002CE9 8B 83            [24] 7994 	mov	dph,r3
      002CEB 8C F0            [24] 7995 	mov	b,r4
      002CED 12r00r00         [24] 7996 	lcall	__gptrget
      002CF0 FA               [12] 7997 	mov	r2,a
      002CF1 A3               [24] 7998 	inc	dptr
      002CF2 12r00r00         [24] 7999 	lcall	__gptrget
      002CF5 FB               [12] 8000 	mov	r3,a
      002CF6 BA 07 16         [24] 8001 	cjne	r2,#0x07,00102$
      002CF9 BB 00 13         [24] 8002 	cjne	r3,#0x00,00102$
      002CFC 74 06            [12] 8003 	mov	a,#0x06
      002CFE 2D               [12] 8004 	add	a,r5
      002CFF FA               [12] 8005 	mov	r2,a
      002D00 E4               [12] 8006 	clr	a
      002D01 3E               [12] 8007 	addc	a,r6
      002D02 FB               [12] 8008 	mov	r3,a
      002D03 8F 04            [24] 8009 	mov	ar4,r7
      002D05 8A 82            [24] 8010 	mov	dpl,r2
      002D07 8B 83            [24] 8011 	mov	dph,r3
      002D09 8C F0            [24] 8012 	mov	b,r4
      002D0B E4               [12] 8013 	clr	a
      002D0C 12r00r00         [24] 8014 	lcall	__gptrput
      002D0F                       8015 00102$:
                                   8016 ;	calc.c:372: ctx->acc = 0l;
      002D0F 74 02            [12] 8017 	mov	a,#0x02
      002D11 2D               [12] 8018 	add	a,r5
      002D12 FD               [12] 8019 	mov	r5,a
      002D13 E4               [12] 8020 	clr	a
      002D14 3E               [12] 8021 	addc	a,r6
      002D15 FE               [12] 8022 	mov	r6,a
      002D16 8D 82            [24] 8023 	mov	dpl,r5
      002D18 8E 83            [24] 8024 	mov	dph,r6
      002D1A 8F F0            [24] 8025 	mov	b,r7
      002D1C E4               [12] 8026 	clr	a
      002D1D 12r00r00         [24] 8027 	lcall	__gptrput
      002D20 A3               [24] 8028 	inc	dptr
      002D21 12r00r00         [24] 8029 	lcall	__gptrput
      002D24 A3               [24] 8030 	inc	dptr
      002D25 12r00r00         [24] 8031 	lcall	__gptrput
      002D28 A3               [24] 8032 	inc	dptr
      002D29 12r00r00         [24] 8033 	lcall	__gptrput
                                   8034 ;	calc.c:374: return 1;
      002D2C 90 00 01         [24] 8035 	mov	dptr,#0x0001
                                   8036 ;	calc.c:375: }
      002D2F D0*00            [24] 8037 	pop	_bp
      002D31 22               [24] 8038 	ret
                                   8039 ;------------------------------------------------------------
                                   8040 ;Allocation info for local variables in function 'reset_base'
                                   8041 ;------------------------------------------------------------
                                   8042 ;delta                     Allocated to stack - _bp -5
                                   8043 ;_ctx                      Allocated to registers r5 r6 r7 
                                   8044 ;ctx                       Allocated to registers r5 r6 r7 
                                   8045 ;------------------------------------------------------------
                                   8046 ;	calc.c:377: static int reset_base(void *_ctx, delta_t *delta) __reentrant {
                                   8047 ;	-----------------------------------------
                                   8048 ;	 function reset_base
                                   8049 ;	-----------------------------------------
      002D32                       8050 _reset_base:
      002D32 C0*00            [24] 8051 	push	_bp
      002D34 85 81*00         [24] 8052 	mov	_bp,sp
      002D37 AD 82            [24] 8053 	mov	r5,dpl
      002D39 AE 83            [24] 8054 	mov	r6,dph
      002D3B AF F0            [24] 8055 	mov	r7,b
                                   8056 ;	calc.c:378: calc_ctx_t *ctx = (calc_ctx_t *)_ctx;
                                   8057 ;	calc.c:382: switch (ctx->digit[0]) {
      002D3D 74 07            [12] 8058 	mov	a,#0x07
      002D3F 2D               [12] 8059 	add	a,r5
      002D40 FA               [12] 8060 	mov	r2,a
      002D41 E4               [12] 8061 	clr	a
      002D42 3E               [12] 8062 	addc	a,r6
      002D43 FB               [12] 8063 	mov	r3,a
      002D44 8F 04            [24] 8064 	mov	ar4,r7
      002D46 8A 82            [24] 8065 	mov	dpl,r2
      002D48 8B 83            [24] 8066 	mov	dph,r3
      002D4A 8C F0            [24] 8067 	mov	b,r4
      002D4C 12r00r00         [24] 8068 	lcall	__gptrget
      002D4F FC               [12] 8069 	mov	r4,a
      002D50 BC 48 02         [24] 8070 	cjne	r4,#0x48,00124$
      002D53 80 0F            [24] 8071 	sjmp	00101$
      002D55                       8072 00124$:
      002D55 BC 4F 02         [24] 8073 	cjne	r4,#0x4f,00125$
      002D58 80 2E            [24] 8074 	sjmp	00103$
      002D5A                       8075 00125$:
      002D5A BC 68 02         [24] 8076 	cjne	r4,#0x68,00126$
      002D5D 80 17            [24] 8077 	sjmp	00102$
      002D5F                       8078 00126$:
                                   8079 ;	calc.c:383: case 'H':
      002D5F BC 6F 48         [24] 8080 	cjne	r4,#0x6f,00105$
      002D62 80 36            [24] 8081 	sjmp	00104$
      002D64                       8082 00101$:
                                   8083 ;	calc.c:384: ctx->base = 16;
      002D64 8D 82            [24] 8084 	mov	dpl,r5
      002D66 8E 83            [24] 8085 	mov	dph,r6
      002D68 8F F0            [24] 8086 	mov	b,r7
      002D6A 74 10            [12] 8087 	mov	a,#0x10
      002D6C 12r00r00         [24] 8088 	lcall	__gptrput
      002D6F A3               [24] 8089 	inc	dptr
      002D70 E4               [12] 8090 	clr	a
      002D71 12r00r00         [24] 8091 	lcall	__gptrput
                                   8092 ;	calc.c:385: break;
                                   8093 ;	calc.c:386: case 'h':
      002D74 80 34            [24] 8094 	sjmp	00105$
      002D76                       8095 00102$:
                                   8096 ;	calc.c:387: ctx->base = 10;
      002D76 8D 82            [24] 8097 	mov	dpl,r5
      002D78 8E 83            [24] 8098 	mov	dph,r6
      002D7A 8F F0            [24] 8099 	mov	b,r7
      002D7C 74 0A            [12] 8100 	mov	a,#0x0a
      002D7E 12r00r00         [24] 8101 	lcall	__gptrput
      002D81 A3               [24] 8102 	inc	dptr
      002D82 E4               [12] 8103 	clr	a
      002D83 12r00r00         [24] 8104 	lcall	__gptrput
                                   8105 ;	calc.c:388: break;
                                   8106 ;	calc.c:389: case 'O':
      002D86 80 22            [24] 8107 	sjmp	00105$
      002D88                       8108 00103$:
                                   8109 ;	calc.c:390: ctx->base = 8;
      002D88 8D 82            [24] 8110 	mov	dpl,r5
      002D8A 8E 83            [24] 8111 	mov	dph,r6
      002D8C 8F F0            [24] 8112 	mov	b,r7
      002D8E 74 08            [12] 8113 	mov	a,#0x08
      002D90 12r00r00         [24] 8114 	lcall	__gptrput
      002D93 A3               [24] 8115 	inc	dptr
      002D94 E4               [12] 8116 	clr	a
      002D95 12r00r00         [24] 8117 	lcall	__gptrput
                                   8118 ;	calc.c:391: break;
                                   8119 ;	calc.c:392: case 'o':
      002D98 80 10            [24] 8120 	sjmp	00105$
      002D9A                       8121 00104$:
                                   8122 ;	calc.c:393: ctx->base = 2;
      002D9A 8D 82            [24] 8123 	mov	dpl,r5
      002D9C 8E 83            [24] 8124 	mov	dph,r6
      002D9E 8F F0            [24] 8125 	mov	b,r7
      002DA0 74 02            [12] 8126 	mov	a,#0x02
      002DA2 12r00r00         [24] 8127 	lcall	__gptrput
      002DA5 A3               [24] 8128 	inc	dptr
      002DA6 E4               [12] 8129 	clr	a
      002DA7 12r00r00         [24] 8130 	lcall	__gptrput
                                   8131 ;	calc.c:395: }
      002DAA                       8132 00105$:
                                   8133 ;	calc.c:397: return 1;
      002DAA 90 00 01         [24] 8134 	mov	dptr,#0x0001
                                   8135 ;	calc.c:398: }
      002DAD D0*00            [24] 8136 	pop	_bp
      002DAF 22               [24] 8137 	ret
                                   8138 ;------------------------------------------------------------
                                   8139 ;Allocation info for local variables in function 'status'
                                   8140 ;------------------------------------------------------------
                                   8141 ;delta                     Allocated to stack - _bp -5
                                   8142 ;_ctx                      Allocated to registers r5 r6 r7 
                                   8143 ;ctx                       Allocated to stack - _bp +11
                                   8144 ;vals                      Allocated to stack - _bp +14
                                   8145 ;n                         Allocated to stack - _bp +9
                                   8146 ;__1310720129              Allocated to registers 
                                   8147 ;s                         Allocated to registers r5 r6 r7 
                                   8148 ;__1310720131              Allocated to registers r5 r6 r7 r4 
                                   8149 ;d                         Allocated to registers 
                                   8150 ;__1310720001              Allocated to registers 
                                   8151 ;d                         Allocated to stack - _bp +22
                                   8152 ;mask                      Allocated to stack - _bp +26
                                   8153 ;__1310720133              Allocated to registers 
                                   8154 ;s                         Allocated to registers r3 r4 r5 
                                   8155 ;__1310720135              Allocated to registers r2 r3 r4 r5 
                                   8156 ;d                         Allocated to registers 
                                   8157 ;__1310720001              Allocated to registers 
                                   8158 ;d                         Allocated to stack - _bp +22
                                   8159 ;mask                      Allocated to stack - _bp +26
                                   8160 ;__1310720137              Allocated to registers 
                                   8161 ;s                         Allocated to registers r3 r4 r5 
                                   8162 ;__1310720139              Allocated to registers r4 r5 r6 r7 
                                   8163 ;d                         Allocated to registers 
                                   8164 ;__1310720001              Allocated to registers 
                                   8165 ;d                         Allocated to stack - _bp +22
                                   8166 ;mask                      Allocated to stack - _bp +26
                                   8167 ;__1310720141              Allocated to registers 
                                   8168 ;s                         Allocated to registers r3 r4 r5 
                                   8169 ;__1310720143              Allocated to registers r2 r3 r4 r5 
                                   8170 ;d                         Allocated to registers 
                                   8171 ;__1310720001              Allocated to registers 
                                   8172 ;d                         Allocated to stack - _bp +22
                                   8173 ;mask                      Allocated to stack - _bp +26
                                   8174 ;__1310720145              Allocated to registers 
                                   8175 ;s                         Allocated to registers r5 r6 r7 
                                   8176 ;__1310720147              Allocated to registers r4 r5 r6 r7 
                                   8177 ;d                         Allocated to registers 
                                   8178 ;__1310720001              Allocated to registers 
                                   8179 ;d                         Allocated to stack - _bp +22
                                   8180 ;mask                      Allocated to stack - _bp +26
                                   8181 ;__1310720149              Allocated to registers 
                                   8182 ;s                         Allocated to registers r5 r6 r7 
                                   8183 ;sloc0                     Allocated to stack - _bp +1
                                   8184 ;sloc1                     Allocated to stack - _bp +4
                                   8185 ;sloc2                     Allocated to stack - _bp +7
                                   8186 ;------------------------------------------------------------
                                   8187 ;	calc.c:400: static int status(void *_ctx, delta_t *delta) __reentrant {
                                   8188 ;	-----------------------------------------
                                   8189 ;	 function status
                                   8190 ;	-----------------------------------------
      002DB0                       8191 _status:
      002DB0 C0*00            [24] 8192 	push	_bp
      002DB2 E5 81            [12] 8193 	mov	a,sp
      002DB4 F5*00            [12] 8194 	mov	_bp,a
      002DB6 24 1D            [12] 8195 	add	a,#0x1d
      002DB8 F5 81            [12] 8196 	mov	sp,a
      002DBA AD 82            [24] 8197 	mov	r5,dpl
      002DBC AE 83            [24] 8198 	mov	r6,dph
      002DBE AF F0            [24] 8199 	mov	r7,b
                                   8200 ;	calc.c:401: calc_ctx_t *ctx = (calc_ctx_t *)_ctx;
      002DC0 E5*00            [12] 8201 	mov	a,_bp
      002DC2 24 0B            [12] 8202 	add	a,#0x0b
      002DC4 F8               [12] 8203 	mov	r0,a
      002DC5 A6 05            [24] 8204 	mov	@r0,ar5
      002DC7 08               [12] 8205 	inc	r0
      002DC8 A6 06            [24] 8206 	mov	@r0,ar6
      002DCA 08               [12] 8207 	inc	r0
      002DCB A6 07            [24] 8208 	mov	@r0,ar7
                                   8209 ;	calc.c:407: printf("\r\nPS = %p, SS = %p, base = %d\r\n", ctx->ps, ctx->ss, ctx->base);
      002DCD E5*00            [12] 8210 	mov	a,_bp
      002DCF 24 0B            [12] 8211 	add	a,#0x0b
      002DD1 F8               [12] 8212 	mov	r0,a
      002DD2 86 82            [24] 8213 	mov	dpl,@r0
      002DD4 08               [12] 8214 	inc	r0
      002DD5 86 83            [24] 8215 	mov	dph,@r0
      002DD7 08               [12] 8216 	inc	r0
      002DD8 86 F0            [24] 8217 	mov	b,@r0
      002DDA E5*00            [12] 8218 	mov	a,_bp
      002DDC 24 07            [12] 8219 	add	a,#0x07
      002DDE F9               [12] 8220 	mov	r1,a
      002DDF 12r00r00         [24] 8221 	lcall	__gptrget
      002DE2 F7               [12] 8222 	mov	@r1,a
      002DE3 A3               [24] 8223 	inc	dptr
      002DE4 12r00r00         [24] 8224 	lcall	__gptrget
      002DE7 09               [12] 8225 	inc	r1
      002DE8 F7               [12] 8226 	mov	@r1,a
      002DE9 E5*00            [12] 8227 	mov	a,_bp
      002DEB 24 0B            [12] 8228 	add	a,#0x0b
      002DED F8               [12] 8229 	mov	r0,a
      002DEE A9*00            [24] 8230 	mov	r1,_bp
      002DF0 09               [12] 8231 	inc	r1
      002DF1 74 14            [12] 8232 	mov	a,#0x14
      002DF3 26               [12] 8233 	add	a,@r0
      002DF4 F7               [12] 8234 	mov	@r1,a
      002DF5 74 40            [12] 8235 	mov	a,#0x40
      002DF7 08               [12] 8236 	inc	r0
      002DF8 36               [12] 8237 	addc	a,@r0
      002DF9 09               [12] 8238 	inc	r1
      002DFA F7               [12] 8239 	mov	@r1,a
      002DFB 08               [12] 8240 	inc	r0
      002DFC 09               [12] 8241 	inc	r1
      002DFD E6               [12] 8242 	mov	a,@r0
      002DFE F7               [12] 8243 	mov	@r1,a
      002DFF A8*00            [24] 8244 	mov	r0,_bp
      002E01 08               [12] 8245 	inc	r0
      002E02 86 82            [24] 8246 	mov	dpl,@r0
      002E04 08               [12] 8247 	inc	r0
      002E05 86 83            [24] 8248 	mov	dph,@r0
      002E07 08               [12] 8249 	inc	r0
      002E08 86 F0            [24] 8250 	mov	b,@r0
      002E0A 12r00r00         [24] 8251 	lcall	__gptrget
      002E0D FA               [12] 8252 	mov	r2,a
      002E0E A3               [24] 8253 	inc	dptr
      002E0F 12r00r00         [24] 8254 	lcall	__gptrget
      002E12 FE               [12] 8255 	mov	r6,a
      002E13 A3               [24] 8256 	inc	dptr
      002E14 12r00r00         [24] 8257 	lcall	__gptrget
      002E17 FF               [12] 8258 	mov	r7,a
      002E18 E5*00            [12] 8259 	mov	a,_bp
      002E1A 24 0B            [12] 8260 	add	a,#0x0b
      002E1C F8               [12] 8261 	mov	r0,a
      002E1D E5*00            [12] 8262 	mov	a,_bp
      002E1F 24 04            [12] 8263 	add	a,#0x04
      002E21 F9               [12] 8264 	mov	r1,a
      002E22 74 11            [12] 8265 	mov	a,#0x11
      002E24 26               [12] 8266 	add	a,@r0
      002E25 F7               [12] 8267 	mov	@r1,a
      002E26 74 40            [12] 8268 	mov	a,#0x40
      002E28 08               [12] 8269 	inc	r0
      002E29 36               [12] 8270 	addc	a,@r0
      002E2A 09               [12] 8271 	inc	r1
      002E2B F7               [12] 8272 	mov	@r1,a
      002E2C 08               [12] 8273 	inc	r0
      002E2D 09               [12] 8274 	inc	r1
      002E2E E6               [12] 8275 	mov	a,@r0
      002E2F F7               [12] 8276 	mov	@r1,a
      002E30 E5*00            [12] 8277 	mov	a,_bp
      002E32 24 04            [12] 8278 	add	a,#0x04
      002E34 F8               [12] 8279 	mov	r0,a
      002E35 86 82            [24] 8280 	mov	dpl,@r0
      002E37 08               [12] 8281 	inc	r0
      002E38 86 83            [24] 8282 	mov	dph,@r0
      002E3A 08               [12] 8283 	inc	r0
      002E3B 86 F0            [24] 8284 	mov	b,@r0
      002E3D 12r00r00         [24] 8285 	lcall	__gptrget
      002E40 FB               [12] 8286 	mov	r3,a
      002E41 A3               [24] 8287 	inc	dptr
      002E42 12r00r00         [24] 8288 	lcall	__gptrget
      002E45 FC               [12] 8289 	mov	r4,a
      002E46 A3               [24] 8290 	inc	dptr
      002E47 12r00r00         [24] 8291 	lcall	__gptrget
      002E4A FD               [12] 8292 	mov	r5,a
      002E4B E5*00            [12] 8293 	mov	a,_bp
      002E4D 24 07            [12] 8294 	add	a,#0x07
      002E4F F8               [12] 8295 	mov	r0,a
      002E50 E6               [12] 8296 	mov	a,@r0
      002E51 C0 E0            [24] 8297 	push	acc
      002E53 08               [12] 8298 	inc	r0
      002E54 E6               [12] 8299 	mov	a,@r0
      002E55 C0 E0            [24] 8300 	push	acc
      002E57 C0 02            [24] 8301 	push	ar2
      002E59 C0 06            [24] 8302 	push	ar6
      002E5B C0 07            [24] 8303 	push	ar7
      002E5D C0 03            [24] 8304 	push	ar3
      002E5F C0 04            [24] 8305 	push	ar4
      002E61 C0 05            [24] 8306 	push	ar5
      002E63 74rC5            [12] 8307 	mov	a,#___str_15
      002E65 C0 E0            [24] 8308 	push	acc
      002E67 74s00            [12] 8309 	mov	a,#(___str_15 >> 8)
      002E69 C0 E0            [24] 8310 	push	acc
      002E6B 74 80            [12] 8311 	mov	a,#0x80
      002E6D C0 E0            [24] 8312 	push	acc
      002E6F 12r00r00         [24] 8313 	lcall	_printf
      002E72 E5 81            [12] 8314 	mov	a,sp
      002E74 24 F5            [12] 8315 	add	a,#0xf5
      002E76 F5 81            [12] 8316 	mov	sp,a
                                   8317 ;	calc.c:409: printstr("ACC\t");
      002E78 7DrE5            [12] 8318 	mov	r5,#___str_16
      002E7A 7Es00            [12] 8319 	mov	r6,#(___str_16 >> 8)
      002E7C 7F 80            [12] 8320 	mov	r7,#0x80
                                   8321 ;	calc.c:58: return;
      002E7E                       8322 00139$:
                                   8323 ;	calc.c:56: for (; *s; s++) putchar(*s);
      002E7E 8D 82            [24] 8324 	mov	dpl,r5
      002E80 8E 83            [24] 8325 	mov	dph,r6
      002E82 8F F0            [24] 8326 	mov	b,r7
      002E84 12r00r00         [24] 8327 	lcall	__gptrget
      002E87 FC               [12] 8328 	mov	r4,a
      002E88 60 10            [24] 8329 	jz	00112$
      002E8A 7B 00            [12] 8330 	mov	r3,#0x00
      002E8C 8C 82            [24] 8331 	mov	dpl,r4
      002E8E 8B 83            [24] 8332 	mov	dph,r3
      002E90 12r00r00         [24] 8333 	lcall	_putchar
      002E93 0D               [12] 8334 	inc	r5
                                   8335 ;	calc.c:409: printstr("ACC\t");
      002E94 BD 00 E7         [24] 8336 	cjne	r5,#0x00,00139$
      002E97 0E               [12] 8337 	inc	r6
      002E98 80 E4            [24] 8338 	sjmp	00139$
      002E9A                       8339 00112$:
                                   8340 ;	calc.c:410: if (ctx->acc_valid) printall(ctx->acc);
      002E9A E5*00            [12] 8341 	mov	a,_bp
      002E9C 24 0B            [12] 8342 	add	a,#0x0b
      002E9E F8               [12] 8343 	mov	r0,a
      002E9F 74 06            [12] 8344 	mov	a,#0x06
      002EA1 26               [12] 8345 	add	a,@r0
      002EA2 FD               [12] 8346 	mov	r5,a
      002EA3 E4               [12] 8347 	clr	a
      002EA4 08               [12] 8348 	inc	r0
      002EA5 36               [12] 8349 	addc	a,@r0
      002EA6 FE               [12] 8350 	mov	r6,a
      002EA7 08               [12] 8351 	inc	r0
      002EA8 86 07            [24] 8352 	mov	ar7,@r0
      002EAA 8D 82            [24] 8353 	mov	dpl,r5
      002EAC 8E 83            [24] 8354 	mov	dph,r6
      002EAE 8F F0            [24] 8355 	mov	b,r7
      002EB0 12r00r00         [24] 8356 	lcall	__gptrget
      002EB3 70 03            [24] 8357 	jnz	00321$
      002EB5 02r2FrE7         [24] 8358 	ljmp	00102$
      002EB8                       8359 00321$:
      002EB8 E5*00            [12] 8360 	mov	a,_bp
      002EBA 24 0B            [12] 8361 	add	a,#0x0b
      002EBC F8               [12] 8362 	mov	r0,a
      002EBD 74 02            [12] 8363 	mov	a,#0x02
      002EBF 26               [12] 8364 	add	a,@r0
      002EC0 FD               [12] 8365 	mov	r5,a
      002EC1 E4               [12] 8366 	clr	a
      002EC2 08               [12] 8367 	inc	r0
      002EC3 36               [12] 8368 	addc	a,@r0
      002EC4 FE               [12] 8369 	mov	r6,a
      002EC5 08               [12] 8370 	inc	r0
      002EC6 86 07            [24] 8371 	mov	ar7,@r0
      002EC8 8D 82            [24] 8372 	mov	dpl,r5
      002ECA 8E 83            [24] 8373 	mov	dph,r6
      002ECC 8F F0            [24] 8374 	mov	b,r7
      002ECE 12r00r00         [24] 8375 	lcall	__gptrget
      002ED1 FD               [12] 8376 	mov	r5,a
      002ED2 A3               [24] 8377 	inc	dptr
      002ED3 12r00r00         [24] 8378 	lcall	__gptrget
      002ED6 FE               [12] 8379 	mov	r6,a
      002ED7 A3               [24] 8380 	inc	dptr
      002ED8 12r00r00         [24] 8381 	lcall	__gptrget
      002EDB FF               [12] 8382 	mov	r7,a
      002EDC A3               [24] 8383 	inc	dptr
      002EDD 12r00r00         [24] 8384 	lcall	__gptrget
      002EE0 FC               [12] 8385 	mov	r4,a
                                   8386 ;	calc.c:71: printf("%08lx\t", d);
      002EE1 C0 07            [24] 8387 	push	ar7
      002EE3 C0 06            [24] 8388 	push	ar6
      002EE5 C0 05            [24] 8389 	push	ar5
      002EE7 C0 04            [24] 8390 	push	ar4
      002EE9 C0 05            [24] 8391 	push	ar5
      002EEB C0 06            [24] 8392 	push	ar6
      002EED C0 07            [24] 8393 	push	ar7
      002EEF C0 04            [24] 8394 	push	ar4
      002EF1 74r00            [12] 8395 	mov	a,#___str_0
      002EF3 C0 E0            [24] 8396 	push	acc
      002EF5 74s00            [12] 8397 	mov	a,#(___str_0 >> 8)
      002EF7 C0 E0            [24] 8398 	push	acc
      002EF9 74 80            [12] 8399 	mov	a,#0x80
      002EFB C0 E0            [24] 8400 	push	acc
      002EFD 12r00r00         [24] 8401 	lcall	_printf
      002F00 E5 81            [12] 8402 	mov	a,sp
      002F02 24 F9            [12] 8403 	add	a,#0xf9
      002F04 F5 81            [12] 8404 	mov	sp,a
      002F06 D0 04            [24] 8405 	pop	ar4
      002F08 D0 05            [24] 8406 	pop	ar5
      002F0A D0 06            [24] 8407 	pop	ar6
      002F0C D0 07            [24] 8408 	pop	ar7
                                   8409 ;	calc.c:72: printf("% 11ld\t", d);
      002F0E C0 07            [24] 8410 	push	ar7
      002F10 C0 06            [24] 8411 	push	ar6
      002F12 C0 05            [24] 8412 	push	ar5
      002F14 C0 04            [24] 8413 	push	ar4
      002F16 C0 05            [24] 8414 	push	ar5
      002F18 C0 06            [24] 8415 	push	ar6
      002F1A C0 07            [24] 8416 	push	ar7
      002F1C C0 04            [24] 8417 	push	ar4
      002F1E 74r07            [12] 8418 	mov	a,#___str_1
      002F20 C0 E0            [24] 8419 	push	acc
      002F22 74s00            [12] 8420 	mov	a,#(___str_1 >> 8)
      002F24 C0 E0            [24] 8421 	push	acc
      002F26 74 80            [12] 8422 	mov	a,#0x80
      002F28 C0 E0            [24] 8423 	push	acc
      002F2A 12r00r00         [24] 8424 	lcall	_printf
      002F2D E5 81            [12] 8425 	mov	a,sp
      002F2F 24 F9            [12] 8426 	add	a,#0xf9
      002F31 F5 81            [12] 8427 	mov	sp,a
      002F33 D0 04            [24] 8428 	pop	ar4
      002F35 D0 05            [24] 8429 	pop	ar5
      002F37 D0 06            [24] 8430 	pop	ar6
      002F39 D0 07            [24] 8431 	pop	ar7
                                   8432 ;	calc.c:73: printf("%011lo\t", d);
      002F3B C0 07            [24] 8433 	push	ar7
      002F3D C0 06            [24] 8434 	push	ar6
      002F3F C0 05            [24] 8435 	push	ar5
      002F41 C0 04            [24] 8436 	push	ar4
      002F43 C0 05            [24] 8437 	push	ar5
      002F45 C0 06            [24] 8438 	push	ar6
      002F47 C0 07            [24] 8439 	push	ar7
      002F49 C0 04            [24] 8440 	push	ar4
      002F4B 74r0F            [12] 8441 	mov	a,#___str_2
      002F4D C0 E0            [24] 8442 	push	acc
      002F4F 74s00            [12] 8443 	mov	a,#(___str_2 >> 8)
      002F51 C0 E0            [24] 8444 	push	acc
      002F53 74 80            [12] 8445 	mov	a,#0x80
      002F55 C0 E0            [24] 8446 	push	acc
      002F57 12r00r00         [24] 8447 	lcall	_printf
      002F5A E5 81            [12] 8448 	mov	a,sp
      002F5C 24 F9            [12] 8449 	add	a,#0xf9
      002F5E F5 81            [12] 8450 	mov	sp,a
      002F60 D0 04            [24] 8451 	pop	ar4
      002F62 D0 05            [24] 8452 	pop	ar5
      002F64 D0 06            [24] 8453 	pop	ar6
      002F66 D0 07            [24] 8454 	pop	ar7
                                   8455 ;	calc.c:74: printbin(d);
      002F68 E5*00            [12] 8456 	mov	a,_bp
      002F6A 24 16            [12] 8457 	add	a,#0x16
      002F6C F8               [12] 8458 	mov	r0,a
      002F6D A6 05            [24] 8459 	mov	@r0,ar5
      002F6F 08               [12] 8460 	inc	r0
      002F70 A6 06            [24] 8461 	mov	@r0,ar6
      002F72 08               [12] 8462 	inc	r0
      002F73 A6 07            [24] 8463 	mov	@r0,ar7
      002F75 08               [12] 8464 	inc	r0
      002F76 A6 04            [24] 8465 	mov	@r0,ar4
                                   8466 ;	calc.c:64: for (mask = 0x80000000lu; mask; mask >>= 1)
      002F78 E5*00            [12] 8467 	mov	a,_bp
      002F7A 24 1A            [12] 8468 	add	a,#0x1a
      002F7C F8               [12] 8469 	mov	r0,a
      002F7D E4               [12] 8470 	clr	a
      002F7E F6               [12] 8471 	mov	@r0,a
      002F7F 08               [12] 8472 	inc	r0
      002F80 F6               [12] 8473 	mov	@r0,a
      002F81 08               [12] 8474 	inc	r0
      002F82 F6               [12] 8475 	mov	@r0,a
      002F83 08               [12] 8476 	inc	r0
      002F84 76 80            [12] 8477 	mov	@r0,#0x80
      002F86                       8478 00141$:
                                   8479 ;	calc.c:65: (void)putchar((d & mask) ? (int)'1' : (int)'0');
      002F86 E5*00            [12] 8480 	mov	a,_bp
      002F88 24 16            [12] 8481 	add	a,#0x16
      002F8A F8               [12] 8482 	mov	r0,a
      002F8B 86 04            [24] 8483 	mov	ar4,@r0
      002F8D 08               [12] 8484 	inc	r0
      002F8E 86 05            [24] 8485 	mov	ar5,@r0
      002F90 08               [12] 8486 	inc	r0
      002F91 86 06            [24] 8487 	mov	ar6,@r0
      002F93 08               [12] 8488 	inc	r0
      002F94 86 07            [24] 8489 	mov	ar7,@r0
      002F96 E5*00            [12] 8490 	mov	a,_bp
      002F98 24 1A            [12] 8491 	add	a,#0x1a
      002F9A F8               [12] 8492 	mov	r0,a
      002F9B E6               [12] 8493 	mov	a,@r0
      002F9C 52 04            [12] 8494 	anl	ar4,a
      002F9E 08               [12] 8495 	inc	r0
      002F9F E6               [12] 8496 	mov	a,@r0
      002FA0 52 05            [12] 8497 	anl	ar5,a
      002FA2 08               [12] 8498 	inc	r0
      002FA3 E6               [12] 8499 	mov	a,@r0
      002FA4 52 06            [12] 8500 	anl	ar6,a
      002FA6 08               [12] 8501 	inc	r0
      002FA7 E6               [12] 8502 	mov	a,@r0
      002FA8 52 07            [12] 8503 	anl	ar7,a
      002FAA EC               [12] 8504 	mov	a,r4
      002FAB 4D               [12] 8505 	orl	a,r5
      002FAC 4E               [12] 8506 	orl	a,r6
      002FAD 4F               [12] 8507 	orl	a,r7
      002FAE 60 06            [24] 8508 	jz	00168$
      002FB0 7E 31            [12] 8509 	mov	r6,#0x31
      002FB2 7F 00            [12] 8510 	mov	r7,#0x00
      002FB4 80 04            [24] 8511 	sjmp	00169$
      002FB6                       8512 00168$:
      002FB6 7E 30            [12] 8513 	mov	r6,#0x30
      002FB8 7F 00            [12] 8514 	mov	r7,#0x00
      002FBA                       8515 00169$:
      002FBA 8E 82            [24] 8516 	mov	dpl,r6
      002FBC 8F 83            [24] 8517 	mov	dph,r7
      002FBE 12r00r00         [24] 8518 	lcall	_putchar
                                   8519 ;	calc.c:64: for (mask = 0x80000000lu; mask; mask >>= 1)
      002FC1 E5*00            [12] 8520 	mov	a,_bp
      002FC3 24 1A            [12] 8521 	add	a,#0x1a
      002FC5 F8               [12] 8522 	mov	r0,a
      002FC6 08               [12] 8523 	inc	r0
      002FC7 08               [12] 8524 	inc	r0
      002FC8 08               [12] 8525 	inc	r0
      002FC9 E6               [12] 8526 	mov	a,@r0
      002FCA C3               [12] 8527 	clr	c
      002FCB 13               [12] 8528 	rrc	a
      002FCC F6               [12] 8529 	mov	@r0,a
      002FCD 18               [12] 8530 	dec	r0
      002FCE E6               [12] 8531 	mov	a,@r0
      002FCF 13               [12] 8532 	rrc	a
      002FD0 F6               [12] 8533 	mov	@r0,a
      002FD1 18               [12] 8534 	dec	r0
      002FD2 E6               [12] 8535 	mov	a,@r0
      002FD3 13               [12] 8536 	rrc	a
      002FD4 F6               [12] 8537 	mov	@r0,a
      002FD5 18               [12] 8538 	dec	r0
      002FD6 E6               [12] 8539 	mov	a,@r0
      002FD7 13               [12] 8540 	rrc	a
      002FD8 F6               [12] 8541 	mov	@r0,a
      002FD9 E5*00            [12] 8542 	mov	a,_bp
      002FDB 24 1A            [12] 8543 	add	a,#0x1a
      002FDD F8               [12] 8544 	mov	r0,a
      002FDE E6               [12] 8545 	mov	a,@r0
      002FDF 08               [12] 8546 	inc	r0
      002FE0 46               [12] 8547 	orl	a,@r0
      002FE1 08               [12] 8548 	inc	r0
      002FE2 46               [12] 8549 	orl	a,@r0
      002FE3 08               [12] 8550 	inc	r0
      002FE4 46               [12] 8551 	orl	a,@r0
      002FE5 70 9F            [24] 8552 	jnz	00141$
                                   8553 ;	calc.c:410: if (ctx->acc_valid) printall(ctx->acc);
      002FE7                       8554 00102$:
                                   8555 ;	calc.c:412: n = stack_peek2(ctx->ps, vals);
      002FE7 E5*00            [12] 8556 	mov	a,_bp
      002FE9 24 0E            [12] 8557 	add	a,#0x0e
      002FEB F9               [12] 8558 	mov	r1,a
      002FEC FD               [12] 8559 	mov	r5,a
      002FED 7E 00            [12] 8560 	mov	r6,#0x00
      002FEF 7F 40            [12] 8561 	mov	r7,#0x40
      002FF1 E5*00            [12] 8562 	mov	a,_bp
      002FF3 24 04            [12] 8563 	add	a,#0x04
      002FF5 F8               [12] 8564 	mov	r0,a
      002FF6 86 82            [24] 8565 	mov	dpl,@r0
      002FF8 08               [12] 8566 	inc	r0
      002FF9 86 83            [24] 8567 	mov	dph,@r0
      002FFB 08               [12] 8568 	inc	r0
      002FFC 86 F0            [24] 8569 	mov	b,@r0
      002FFE 12r00r00         [24] 8570 	lcall	__gptrget
      003001 FA               [12] 8571 	mov	r2,a
      003002 A3               [24] 8572 	inc	dptr
      003003 12r00r00         [24] 8573 	lcall	__gptrget
      003006 FB               [12] 8574 	mov	r3,a
      003007 A3               [24] 8575 	inc	dptr
      003008 12r00r00         [24] 8576 	lcall	__gptrget
      00300B FC               [12] 8577 	mov	r4,a
      00300C C0 01            [24] 8578 	push	ar1
      00300E C0 05            [24] 8579 	push	ar5
      003010 C0 06            [24] 8580 	push	ar6
      003012 C0 07            [24] 8581 	push	ar7
      003014 8A 82            [24] 8582 	mov	dpl,r2
      003016 8B 83            [24] 8583 	mov	dph,r3
      003018 8C F0            [24] 8584 	mov	b,r4
      00301A 12r00r00         [24] 8585 	lcall	_stack_peek2
      00301D AE 82            [24] 8586 	mov	r6,dpl
      00301F AF 83            [24] 8587 	mov	r7,dph
      003021 15 81            [12] 8588 	dec	sp
      003023 15 81            [12] 8589 	dec	sp
      003025 15 81            [12] 8590 	dec	sp
      003027 D0 01            [24] 8591 	pop	ar1
                                   8592 ;	calc.c:413: printstr("\r\nPSTOP1\t");
      003029 7BrEA            [12] 8593 	mov	r3,#___str_17
      00302B 7Cs00            [12] 8594 	mov	r4,#(___str_17 >> 8)
      00302D 7D 80            [12] 8595 	mov	r5,#0x80
                                   8596 ;	calc.c:58: return;
      00302F                       8597 00144$:
                                   8598 ;	calc.c:56: for (; *s; s++) putchar(*s);
      00302F 8B 82            [24] 8599 	mov	dpl,r3
      003031 8C 83            [24] 8600 	mov	dph,r4
      003033 8D F0            [24] 8601 	mov	b,r5
      003035 12r00r00         [24] 8602 	lcall	__gptrget
      003038 FA               [12] 8603 	mov	r2,a
      003039 60 18            [24] 8604 	jz	00117$
      00303B C0 06            [24] 8605 	push	ar6
      00303D C0 07            [24] 8606 	push	ar7
      00303F 7F 00            [12] 8607 	mov	r7,#0x00
      003041 8A 82            [24] 8608 	mov	dpl,r2
      003043 8F 83            [24] 8609 	mov	dph,r7
      003045 12r00r00         [24] 8610 	lcall	_putchar
      003048 0B               [12] 8611 	inc	r3
      003049 BB 00 01         [24] 8612 	cjne	r3,#0x00,00325$
      00304C 0C               [12] 8613 	inc	r4
      00304D                       8614 00325$:
      00304D D0 07            [24] 8615 	pop	ar7
      00304F D0 06            [24] 8616 	pop	ar6
                                   8617 ;	calc.c:413: printstr("\r\nPSTOP1\t");
      003051 80 DC            [24] 8618 	sjmp	00144$
      003053                       8619 00117$:
                                   8620 ;	calc.c:414: if (n > 0) printall(vals[1]);
      003053 C3               [12] 8621 	clr	c
      003054 E4               [12] 8622 	clr	a
      003055 9E               [12] 8623 	subb	a,r6
      003056 74 80            [12] 8624 	mov	a,#(0x00 ^ 0x80)
      003058 8F F0            [24] 8625 	mov	b,r7
      00305A 63 F0 80         [24] 8626 	xrl	b,#0x80
      00305D 95 F0            [12] 8627 	subb	a,b
      00305F 40 03            [24] 8628 	jc	00326$
      003061 02r31r95         [24] 8629 	ljmp	00104$
      003064                       8630 00326$:
      003064 74 04            [12] 8631 	mov	a,#0x04
      003066 29               [12] 8632 	add	a,r1
      003067 F8               [12] 8633 	mov	r0,a
      003068 86 02            [24] 8634 	mov	ar2,@r0
      00306A 08               [12] 8635 	inc	r0
      00306B 86 03            [24] 8636 	mov	ar3,@r0
      00306D 08               [12] 8637 	inc	r0
      00306E 86 04            [24] 8638 	mov	ar4,@r0
      003070 08               [12] 8639 	inc	r0
      003071 86 05            [24] 8640 	mov	ar5,@r0
                                   8641 ;	calc.c:71: printf("%08lx\t", d);
      003073 C0 07            [24] 8642 	push	ar7
      003075 C0 06            [24] 8643 	push	ar6
      003077 C0 05            [24] 8644 	push	ar5
      003079 C0 04            [24] 8645 	push	ar4
      00307B C0 03            [24] 8646 	push	ar3
      00307D C0 02            [24] 8647 	push	ar2
      00307F C0 01            [24] 8648 	push	ar1
      003081 C0 02            [24] 8649 	push	ar2
      003083 C0 03            [24] 8650 	push	ar3
      003085 C0 04            [24] 8651 	push	ar4
      003087 C0 05            [24] 8652 	push	ar5
      003089 74r00            [12] 8653 	mov	a,#___str_0
      00308B C0 E0            [24] 8654 	push	acc
      00308D 74s00            [12] 8655 	mov	a,#(___str_0 >> 8)
      00308F C0 E0            [24] 8656 	push	acc
      003091 74 80            [12] 8657 	mov	a,#0x80
      003093 C0 E0            [24] 8658 	push	acc
      003095 12r00r00         [24] 8659 	lcall	_printf
      003098 E5 81            [12] 8660 	mov	a,sp
      00309A 24 F9            [12] 8661 	add	a,#0xf9
      00309C F5 81            [12] 8662 	mov	sp,a
      00309E D0 01            [24] 8663 	pop	ar1
      0030A0 D0 02            [24] 8664 	pop	ar2
      0030A2 D0 03            [24] 8665 	pop	ar3
      0030A4 D0 04            [24] 8666 	pop	ar4
      0030A6 D0 05            [24] 8667 	pop	ar5
                                   8668 ;	calc.c:72: printf("% 11ld\t", d);
      0030A8 C0 05            [24] 8669 	push	ar5
      0030AA C0 04            [24] 8670 	push	ar4
      0030AC C0 03            [24] 8671 	push	ar3
      0030AE C0 02            [24] 8672 	push	ar2
      0030B0 C0 01            [24] 8673 	push	ar1
      0030B2 C0 02            [24] 8674 	push	ar2
      0030B4 C0 03            [24] 8675 	push	ar3
      0030B6 C0 04            [24] 8676 	push	ar4
      0030B8 C0 05            [24] 8677 	push	ar5
      0030BA 74r07            [12] 8678 	mov	a,#___str_1
      0030BC C0 E0            [24] 8679 	push	acc
      0030BE 74s00            [12] 8680 	mov	a,#(___str_1 >> 8)
      0030C0 C0 E0            [24] 8681 	push	acc
      0030C2 74 80            [12] 8682 	mov	a,#0x80
      0030C4 C0 E0            [24] 8683 	push	acc
      0030C6 12r00r00         [24] 8684 	lcall	_printf
      0030C9 E5 81            [12] 8685 	mov	a,sp
      0030CB 24 F9            [12] 8686 	add	a,#0xf9
      0030CD F5 81            [12] 8687 	mov	sp,a
      0030CF D0 01            [24] 8688 	pop	ar1
      0030D1 D0 02            [24] 8689 	pop	ar2
      0030D3 D0 03            [24] 8690 	pop	ar3
      0030D5 D0 04            [24] 8691 	pop	ar4
      0030D7 D0 05            [24] 8692 	pop	ar5
                                   8693 ;	calc.c:73: printf("%011lo\t", d);
      0030D9 C0 05            [24] 8694 	push	ar5
      0030DB C0 04            [24] 8695 	push	ar4
      0030DD C0 03            [24] 8696 	push	ar3
      0030DF C0 02            [24] 8697 	push	ar2
      0030E1 C0 01            [24] 8698 	push	ar1
      0030E3 C0 02            [24] 8699 	push	ar2
      0030E5 C0 03            [24] 8700 	push	ar3
      0030E7 C0 04            [24] 8701 	push	ar4
      0030E9 C0 05            [24] 8702 	push	ar5
      0030EB 74r0F            [12] 8703 	mov	a,#___str_2
      0030ED C0 E0            [24] 8704 	push	acc
      0030EF 74s00            [12] 8705 	mov	a,#(___str_2 >> 8)
      0030F1 C0 E0            [24] 8706 	push	acc
      0030F3 74 80            [12] 8707 	mov	a,#0x80
      0030F5 C0 E0            [24] 8708 	push	acc
      0030F7 12r00r00         [24] 8709 	lcall	_printf
      0030FA E5 81            [12] 8710 	mov	a,sp
      0030FC 24 F9            [12] 8711 	add	a,#0xf9
      0030FE F5 81            [12] 8712 	mov	sp,a
      003100 D0 01            [24] 8713 	pop	ar1
      003102 D0 02            [24] 8714 	pop	ar2
      003104 D0 03            [24] 8715 	pop	ar3
      003106 D0 04            [24] 8716 	pop	ar4
      003108 D0 05            [24] 8717 	pop	ar5
      00310A D0 06            [24] 8718 	pop	ar6
      00310C D0 07            [24] 8719 	pop	ar7
                                   8720 ;	calc.c:74: printbin(d);
      00310E E5*00            [12] 8721 	mov	a,_bp
      003110 24 16            [12] 8722 	add	a,#0x16
      003112 F8               [12] 8723 	mov	r0,a
      003113 A6 02            [24] 8724 	mov	@r0,ar2
      003115 08               [12] 8725 	inc	r0
      003116 A6 03            [24] 8726 	mov	@r0,ar3
      003118 08               [12] 8727 	inc	r0
      003119 A6 04            [24] 8728 	mov	@r0,ar4
      00311B 08               [12] 8729 	inc	r0
      00311C A6 05            [24] 8730 	mov	@r0,ar5
                                   8731 ;	calc.c:64: for (mask = 0x80000000lu; mask; mask >>= 1)
      00311E E5*00            [12] 8732 	mov	a,_bp
      003120 24 1A            [12] 8733 	add	a,#0x1a
      003122 F8               [12] 8734 	mov	r0,a
      003123 E4               [12] 8735 	clr	a
      003124 F6               [12] 8736 	mov	@r0,a
      003125 08               [12] 8737 	inc	r0
      003126 F6               [12] 8738 	mov	@r0,a
      003127 08               [12] 8739 	inc	r0
      003128 F6               [12] 8740 	mov	@r0,a
      003129 08               [12] 8741 	inc	r0
      00312A 76 80            [12] 8742 	mov	@r0,#0x80
      00312C                       8743 00146$:
                                   8744 ;	calc.c:65: (void)putchar((d & mask) ? (int)'1' : (int)'0');
      00312C C0 06            [24] 8745 	push	ar6
      00312E C0 07            [24] 8746 	push	ar7
      003130 E5*00            [12] 8747 	mov	a,_bp
      003132 24 16            [12] 8748 	add	a,#0x16
      003134 F8               [12] 8749 	mov	r0,a
      003135 86 04            [24] 8750 	mov	ar4,@r0
      003137 08               [12] 8751 	inc	r0
      003138 86 05            [24] 8752 	mov	ar5,@r0
      00313A 08               [12] 8753 	inc	r0
      00313B 86 06            [24] 8754 	mov	ar6,@r0
      00313D 08               [12] 8755 	inc	r0
      00313E 86 07            [24] 8756 	mov	ar7,@r0
      003140 E5*00            [12] 8757 	mov	a,_bp
      003142 24 1A            [12] 8758 	add	a,#0x1a
      003144 F8               [12] 8759 	mov	r0,a
      003145 E6               [12] 8760 	mov	a,@r0
      003146 52 04            [12] 8761 	anl	ar4,a
      003148 08               [12] 8762 	inc	r0
      003149 E6               [12] 8763 	mov	a,@r0
      00314A 52 05            [12] 8764 	anl	ar5,a
      00314C 08               [12] 8765 	inc	r0
      00314D E6               [12] 8766 	mov	a,@r0
      00314E 52 06            [12] 8767 	anl	ar6,a
      003150 08               [12] 8768 	inc	r0
      003151 E6               [12] 8769 	mov	a,@r0
      003152 52 07            [12] 8770 	anl	ar7,a
      003154 EC               [12] 8771 	mov	a,r4
      003155 4D               [12] 8772 	orl	a,r5
      003156 4E               [12] 8773 	orl	a,r6
      003157 4F               [12] 8774 	orl	a,r7
      003158 D0 07            [24] 8775 	pop	ar7
      00315A D0 06            [24] 8776 	pop	ar6
      00315C 60 06            [24] 8777 	jz	00170$
      00315E 7C 31            [12] 8778 	mov	r4,#0x31
      003160 7D 00            [12] 8779 	mov	r5,#0x00
      003162 80 04            [24] 8780 	sjmp	00171$
      003164                       8781 00170$:
      003164 7C 30            [12] 8782 	mov	r4,#0x30
      003166 7D 00            [12] 8783 	mov	r5,#0x00
      003168                       8784 00171$:
      003168 8C 82            [24] 8785 	mov	dpl,r4
      00316A 8D 83            [24] 8786 	mov	dph,r5
      00316C 12r00r00         [24] 8787 	lcall	_putchar
                                   8788 ;	calc.c:64: for (mask = 0x80000000lu; mask; mask >>= 1)
      00316F E5*00            [12] 8789 	mov	a,_bp
      003171 24 1A            [12] 8790 	add	a,#0x1a
      003173 F8               [12] 8791 	mov	r0,a
      003174 08               [12] 8792 	inc	r0
      003175 08               [12] 8793 	inc	r0
      003176 08               [12] 8794 	inc	r0
      003177 E6               [12] 8795 	mov	a,@r0
      003178 C3               [12] 8796 	clr	c
      003179 13               [12] 8797 	rrc	a
      00317A F6               [12] 8798 	mov	@r0,a
      00317B 18               [12] 8799 	dec	r0
      00317C E6               [12] 8800 	mov	a,@r0
      00317D 13               [12] 8801 	rrc	a
      00317E F6               [12] 8802 	mov	@r0,a
      00317F 18               [12] 8803 	dec	r0
      003180 E6               [12] 8804 	mov	a,@r0
      003181 13               [12] 8805 	rrc	a
      003182 F6               [12] 8806 	mov	@r0,a
      003183 18               [12] 8807 	dec	r0
      003184 E6               [12] 8808 	mov	a,@r0
      003185 13               [12] 8809 	rrc	a
      003186 F6               [12] 8810 	mov	@r0,a
      003187 E5*00            [12] 8811 	mov	a,_bp
      003189 24 1A            [12] 8812 	add	a,#0x1a
      00318B F8               [12] 8813 	mov	r0,a
      00318C E6               [12] 8814 	mov	a,@r0
      00318D 08               [12] 8815 	inc	r0
      00318E 46               [12] 8816 	orl	a,@r0
      00318F 08               [12] 8817 	inc	r0
      003190 46               [12] 8818 	orl	a,@r0
      003191 08               [12] 8819 	inc	r0
      003192 46               [12] 8820 	orl	a,@r0
      003193 70 97            [24] 8821 	jnz	00146$
                                   8822 ;	calc.c:414: if (n > 0) printall(vals[1]);
      003195                       8823 00104$:
                                   8824 ;	calc.c:415: printstr("\r\nPSTOP0\t");
      003195 7BrF4            [12] 8825 	mov	r3,#___str_18
      003197 7Cs00            [12] 8826 	mov	r4,#(___str_18 >> 8)
      003199 7D 80            [12] 8827 	mov	r5,#0x80
                                   8828 ;	calc.c:58: return;
      00319B                       8829 00149$:
                                   8830 ;	calc.c:56: for (; *s; s++) putchar(*s);
      00319B 8B 82            [24] 8831 	mov	dpl,r3
      00319D 8C 83            [24] 8832 	mov	dph,r4
      00319F 8D F0            [24] 8833 	mov	b,r5
      0031A1 12r00r00         [24] 8834 	lcall	__gptrget
      0031A4 FA               [12] 8835 	mov	r2,a
      0031A5 60 18            [24] 8836 	jz	00122$
      0031A7 C0 06            [24] 8837 	push	ar6
      0031A9 C0 07            [24] 8838 	push	ar7
      0031AB 7F 00            [12] 8839 	mov	r7,#0x00
      0031AD 8A 82            [24] 8840 	mov	dpl,r2
      0031AF 8F 83            [24] 8841 	mov	dph,r7
      0031B1 12r00r00         [24] 8842 	lcall	_putchar
      0031B4 0B               [12] 8843 	inc	r3
      0031B5 BB 00 01         [24] 8844 	cjne	r3,#0x00,00330$
      0031B8 0C               [12] 8845 	inc	r4
      0031B9                       8846 00330$:
      0031B9 D0 07            [24] 8847 	pop	ar7
      0031BB D0 06            [24] 8848 	pop	ar6
                                   8849 ;	calc.c:415: printstr("\r\nPSTOP0\t");
      0031BD 80 DC            [24] 8850 	sjmp	00149$
      0031BF                       8851 00122$:
                                   8852 ;	calc.c:416: if (n > 1) printall(vals[0]);
      0031BF C3               [12] 8853 	clr	c
      0031C0 74 01            [12] 8854 	mov	a,#0x01
      0031C2 9E               [12] 8855 	subb	a,r6
      0031C3 74 80            [12] 8856 	mov	a,#(0x00 ^ 0x80)
      0031C5 8F F0            [24] 8857 	mov	b,r7
      0031C7 63 F0 80         [24] 8858 	xrl	b,#0x80
      0031CA 95 F0            [12] 8859 	subb	a,b
      0031CC 40 03            [24] 8860 	jc	00331$
      0031CE 02r32rF5         [24] 8861 	ljmp	00106$
      0031D1                       8862 00331$:
      0031D1 87 04            [24] 8863 	mov	ar4,@r1
      0031D3 09               [12] 8864 	inc	r1
      0031D4 87 05            [24] 8865 	mov	ar5,@r1
      0031D6 09               [12] 8866 	inc	r1
      0031D7 87 06            [24] 8867 	mov	ar6,@r1
      0031D9 09               [12] 8868 	inc	r1
      0031DA 87 07            [24] 8869 	mov	ar7,@r1
      0031DC 19               [12] 8870 	dec	r1
      0031DD 19               [12] 8871 	dec	r1
      0031DE 19               [12] 8872 	dec	r1
                                   8873 ;	calc.c:71: printf("%08lx\t", d);
      0031DF C0 07            [24] 8874 	push	ar7
      0031E1 C0 06            [24] 8875 	push	ar6
      0031E3 C0 05            [24] 8876 	push	ar5
      0031E5 C0 04            [24] 8877 	push	ar4
      0031E7 C0 01            [24] 8878 	push	ar1
      0031E9 C0 04            [24] 8879 	push	ar4
      0031EB C0 05            [24] 8880 	push	ar5
      0031ED C0 06            [24] 8881 	push	ar6
      0031EF C0 07            [24] 8882 	push	ar7
      0031F1 74r00            [12] 8883 	mov	a,#___str_0
      0031F3 C0 E0            [24] 8884 	push	acc
      0031F5 74s00            [12] 8885 	mov	a,#(___str_0 >> 8)
      0031F7 C0 E0            [24] 8886 	push	acc
      0031F9 74 80            [12] 8887 	mov	a,#0x80
      0031FB C0 E0            [24] 8888 	push	acc
      0031FD 12r00r00         [24] 8889 	lcall	_printf
      003200 E5 81            [12] 8890 	mov	a,sp
      003202 24 F9            [12] 8891 	add	a,#0xf9
      003204 F5 81            [12] 8892 	mov	sp,a
      003206 D0 01            [24] 8893 	pop	ar1
      003208 D0 04            [24] 8894 	pop	ar4
      00320A D0 05            [24] 8895 	pop	ar5
      00320C D0 06            [24] 8896 	pop	ar6
      00320E D0 07            [24] 8897 	pop	ar7
                                   8898 ;	calc.c:72: printf("% 11ld\t", d);
      003210 C0 07            [24] 8899 	push	ar7
      003212 C0 06            [24] 8900 	push	ar6
      003214 C0 05            [24] 8901 	push	ar5
      003216 C0 04            [24] 8902 	push	ar4
      003218 C0 01            [24] 8903 	push	ar1
      00321A C0 04            [24] 8904 	push	ar4
      00321C C0 05            [24] 8905 	push	ar5
      00321E C0 06            [24] 8906 	push	ar6
      003220 C0 07            [24] 8907 	push	ar7
      003222 74r07            [12] 8908 	mov	a,#___str_1
      003224 C0 E0            [24] 8909 	push	acc
      003226 74s00            [12] 8910 	mov	a,#(___str_1 >> 8)
      003228 C0 E0            [24] 8911 	push	acc
      00322A 74 80            [12] 8912 	mov	a,#0x80
      00322C C0 E0            [24] 8913 	push	acc
      00322E 12r00r00         [24] 8914 	lcall	_printf
      003231 E5 81            [12] 8915 	mov	a,sp
      003233 24 F9            [12] 8916 	add	a,#0xf9
      003235 F5 81            [12] 8917 	mov	sp,a
      003237 D0 01            [24] 8918 	pop	ar1
      003239 D0 04            [24] 8919 	pop	ar4
      00323B D0 05            [24] 8920 	pop	ar5
      00323D D0 06            [24] 8921 	pop	ar6
      00323F D0 07            [24] 8922 	pop	ar7
                                   8923 ;	calc.c:73: printf("%011lo\t", d);
      003241 C0 07            [24] 8924 	push	ar7
      003243 C0 06            [24] 8925 	push	ar6
      003245 C0 05            [24] 8926 	push	ar5
      003247 C0 04            [24] 8927 	push	ar4
      003249 C0 01            [24] 8928 	push	ar1
      00324B C0 04            [24] 8929 	push	ar4
      00324D C0 05            [24] 8930 	push	ar5
      00324F C0 06            [24] 8931 	push	ar6
      003251 C0 07            [24] 8932 	push	ar7
      003253 74r0F            [12] 8933 	mov	a,#___str_2
      003255 C0 E0            [24] 8934 	push	acc
      003257 74s00            [12] 8935 	mov	a,#(___str_2 >> 8)
      003259 C0 E0            [24] 8936 	push	acc
      00325B 74 80            [12] 8937 	mov	a,#0x80
      00325D C0 E0            [24] 8938 	push	acc
      00325F 12r00r00         [24] 8939 	lcall	_printf
      003262 E5 81            [12] 8940 	mov	a,sp
      003264 24 F9            [12] 8941 	add	a,#0xf9
      003266 F5 81            [12] 8942 	mov	sp,a
      003268 D0 01            [24] 8943 	pop	ar1
      00326A D0 04            [24] 8944 	pop	ar4
      00326C D0 05            [24] 8945 	pop	ar5
      00326E D0 06            [24] 8946 	pop	ar6
      003270 D0 07            [24] 8947 	pop	ar7
                                   8948 ;	calc.c:74: printbin(d);
      003272 E5*00            [12] 8949 	mov	a,_bp
      003274 24 16            [12] 8950 	add	a,#0x16
      003276 F8               [12] 8951 	mov	r0,a
      003277 A6 04            [24] 8952 	mov	@r0,ar4
      003279 08               [12] 8953 	inc	r0
      00327A A6 05            [24] 8954 	mov	@r0,ar5
      00327C 08               [12] 8955 	inc	r0
      00327D A6 06            [24] 8956 	mov	@r0,ar6
      00327F 08               [12] 8957 	inc	r0
      003280 A6 07            [24] 8958 	mov	@r0,ar7
                                   8959 ;	calc.c:64: for (mask = 0x80000000lu; mask; mask >>= 1)
      003282 E5*00            [12] 8960 	mov	a,_bp
      003284 24 1A            [12] 8961 	add	a,#0x1a
      003286 F8               [12] 8962 	mov	r0,a
      003287 E4               [12] 8963 	clr	a
      003288 F6               [12] 8964 	mov	@r0,a
      003289 08               [12] 8965 	inc	r0
      00328A F6               [12] 8966 	mov	@r0,a
      00328B 08               [12] 8967 	inc	r0
      00328C F6               [12] 8968 	mov	@r0,a
      00328D 08               [12] 8969 	inc	r0
      00328E 76 80            [12] 8970 	mov	@r0,#0x80
      003290                       8971 00151$:
                                   8972 ;	calc.c:65: (void)putchar((d & mask) ? (int)'1' : (int)'0');
      003290 C0 01            [24] 8973 	push	ar1
      003292 E5*00            [12] 8974 	mov	a,_bp
      003294 24 16            [12] 8975 	add	a,#0x16
      003296 F8               [12] 8976 	mov	r0,a
      003297 86 04            [24] 8977 	mov	ar4,@r0
      003299 08               [12] 8978 	inc	r0
      00329A 86 05            [24] 8979 	mov	ar5,@r0
      00329C 08               [12] 8980 	inc	r0
      00329D 86 06            [24] 8981 	mov	ar6,@r0
      00329F 08               [12] 8982 	inc	r0
      0032A0 86 07            [24] 8983 	mov	ar7,@r0
      0032A2 E5*00            [12] 8984 	mov	a,_bp
      0032A4 24 1A            [12] 8985 	add	a,#0x1a
      0032A6 F8               [12] 8986 	mov	r0,a
      0032A7 E6               [12] 8987 	mov	a,@r0
      0032A8 52 04            [12] 8988 	anl	ar4,a
      0032AA 08               [12] 8989 	inc	r0
      0032AB E6               [12] 8990 	mov	a,@r0
      0032AC 52 05            [12] 8991 	anl	ar5,a
      0032AE 08               [12] 8992 	inc	r0
      0032AF E6               [12] 8993 	mov	a,@r0
      0032B0 52 06            [12] 8994 	anl	ar6,a
      0032B2 08               [12] 8995 	inc	r0
      0032B3 E6               [12] 8996 	mov	a,@r0
      0032B4 52 07            [12] 8997 	anl	ar7,a
      0032B6 D0 01            [24] 8998 	pop	ar1
      0032B8 EC               [12] 8999 	mov	a,r4
      0032B9 4D               [12] 9000 	orl	a,r5
      0032BA 4E               [12] 9001 	orl	a,r6
      0032BB 4F               [12] 9002 	orl	a,r7
      0032BC 60 06            [24] 9003 	jz	00172$
      0032BE 7E 31            [12] 9004 	mov	r6,#0x31
      0032C0 7F 00            [12] 9005 	mov	r7,#0x00
      0032C2 80 04            [24] 9006 	sjmp	00173$
      0032C4                       9007 00172$:
      0032C4 7E 30            [12] 9008 	mov	r6,#0x30
      0032C6 7F 00            [12] 9009 	mov	r7,#0x00
      0032C8                       9010 00173$:
      0032C8 8E 82            [24] 9011 	mov	dpl,r6
      0032CA 8F 83            [24] 9012 	mov	dph,r7
      0032CC 12r00r00         [24] 9013 	lcall	_putchar
                                   9014 ;	calc.c:64: for (mask = 0x80000000lu; mask; mask >>= 1)
      0032CF E5*00            [12] 9015 	mov	a,_bp
      0032D1 24 1A            [12] 9016 	add	a,#0x1a
      0032D3 F8               [12] 9017 	mov	r0,a
      0032D4 08               [12] 9018 	inc	r0
      0032D5 08               [12] 9019 	inc	r0
      0032D6 08               [12] 9020 	inc	r0
      0032D7 E6               [12] 9021 	mov	a,@r0
      0032D8 C3               [12] 9022 	clr	c
      0032D9 13               [12] 9023 	rrc	a
      0032DA F6               [12] 9024 	mov	@r0,a
      0032DB 18               [12] 9025 	dec	r0
      0032DC E6               [12] 9026 	mov	a,@r0
      0032DD 13               [12] 9027 	rrc	a
      0032DE F6               [12] 9028 	mov	@r0,a
      0032DF 18               [12] 9029 	dec	r0
      0032E0 E6               [12] 9030 	mov	a,@r0
      0032E1 13               [12] 9031 	rrc	a
      0032E2 F6               [12] 9032 	mov	@r0,a
      0032E3 18               [12] 9033 	dec	r0
      0032E4 E6               [12] 9034 	mov	a,@r0
      0032E5 13               [12] 9035 	rrc	a
      0032E6 F6               [12] 9036 	mov	@r0,a
      0032E7 E5*00            [12] 9037 	mov	a,_bp
      0032E9 24 1A            [12] 9038 	add	a,#0x1a
      0032EB F8               [12] 9039 	mov	r0,a
      0032EC E6               [12] 9040 	mov	a,@r0
      0032ED 08               [12] 9041 	inc	r0
      0032EE 46               [12] 9042 	orl	a,@r0
      0032EF 08               [12] 9043 	inc	r0
      0032F0 46               [12] 9044 	orl	a,@r0
      0032F1 08               [12] 9045 	inc	r0
      0032F2 46               [12] 9046 	orl	a,@r0
      0032F3 70 9B            [24] 9047 	jnz	00151$
                                   9048 ;	calc.c:416: if (n > 1) printall(vals[0]);
      0032F5                       9049 00106$:
                                   9050 ;	calc.c:418: n = stack_peek2(ctx->ss, vals);
      0032F5 89 07            [24] 9051 	mov	ar7,r1
      0032F7 7E 00            [12] 9052 	mov	r6,#0x00
      0032F9 7D 40            [12] 9053 	mov	r5,#0x40
      0032FB A8*00            [24] 9054 	mov	r0,_bp
      0032FD 08               [12] 9055 	inc	r0
      0032FE 86 82            [24] 9056 	mov	dpl,@r0
      003300 08               [12] 9057 	inc	r0
      003301 86 83            [24] 9058 	mov	dph,@r0
      003303 08               [12] 9059 	inc	r0
      003304 86 F0            [24] 9060 	mov	b,@r0
      003306 12r00r00         [24] 9061 	lcall	__gptrget
      003309 FA               [12] 9062 	mov	r2,a
      00330A A3               [24] 9063 	inc	dptr
      00330B 12r00r00         [24] 9064 	lcall	__gptrget
      00330E FB               [12] 9065 	mov	r3,a
      00330F A3               [24] 9066 	inc	dptr
      003310 12r00r00         [24] 9067 	lcall	__gptrget
      003313 FC               [12] 9068 	mov	r4,a
      003314 C0 01            [24] 9069 	push	ar1
      003316 C0 07            [24] 9070 	push	ar7
      003318 C0 06            [24] 9071 	push	ar6
      00331A C0 05            [24] 9072 	push	ar5
      00331C 8A 82            [24] 9073 	mov	dpl,r2
      00331E 8B 83            [24] 9074 	mov	dph,r3
      003320 8C F0            [24] 9075 	mov	b,r4
      003322 12r00r00         [24] 9076 	lcall	_stack_peek2
      003325 AE 82            [24] 9077 	mov	r6,dpl
      003327 AF 83            [24] 9078 	mov	r7,dph
      003329 15 81            [12] 9079 	dec	sp
      00332B 15 81            [12] 9080 	dec	sp
      00332D 15 81            [12] 9081 	dec	sp
      00332F D0 01            [24] 9082 	pop	ar1
      003331 E5*00            [12] 9083 	mov	a,_bp
      003333 24 09            [12] 9084 	add	a,#0x09
      003335 F8               [12] 9085 	mov	r0,a
      003336 A6 06            [24] 9086 	mov	@r0,ar6
      003338 08               [12] 9087 	inc	r0
      003339 A6 07            [24] 9088 	mov	@r0,ar7
                                   9089 ;	calc.c:419: printstr("\r\nSSTOP1\t");
      00333B 7BrFE            [12] 9090 	mov	r3,#___str_19
      00333D 7Cs00            [12] 9091 	mov	r4,#(___str_19 >> 8)
      00333F 7D 80            [12] 9092 	mov	r5,#0x80
                                   9093 ;	calc.c:58: return;
      003341                       9094 00154$:
                                   9095 ;	calc.c:56: for (; *s; s++) putchar(*s);
      003341 8B 82            [24] 9096 	mov	dpl,r3
      003343 8C 83            [24] 9097 	mov	dph,r4
      003345 8D F0            [24] 9098 	mov	b,r5
      003347 12r00r00         [24] 9099 	lcall	__gptrget
      00334A FA               [12] 9100 	mov	r2,a
      00334B 60 10            [24] 9101 	jz	00127$
      00334D 7F 00            [12] 9102 	mov	r7,#0x00
      00334F 8A 82            [24] 9103 	mov	dpl,r2
      003351 8F 83            [24] 9104 	mov	dph,r7
      003353 12r00r00         [24] 9105 	lcall	_putchar
      003356 0B               [12] 9106 	inc	r3
                                   9107 ;	calc.c:419: printstr("\r\nSSTOP1\t");
      003357 BB 00 E7         [24] 9108 	cjne	r3,#0x00,00154$
      00335A 0C               [12] 9109 	inc	r4
      00335B 80 E4            [24] 9110 	sjmp	00154$
      00335D                       9111 00127$:
                                   9112 ;	calc.c:420: if (n > 0) printall(vals[1]);
      00335D E5*00            [12] 9113 	mov	a,_bp
      00335F 24 09            [12] 9114 	add	a,#0x09
      003361 F8               [12] 9115 	mov	r0,a
      003362 C3               [12] 9116 	clr	c
      003363 E4               [12] 9117 	clr	a
      003364 96               [12] 9118 	subb	a,@r0
      003365 74 80            [12] 9119 	mov	a,#(0x00 ^ 0x80)
      003367 08               [12] 9120 	inc	r0
      003368 86 F0            [24] 9121 	mov	b,@r0
      00336A 63 F0 80         [24] 9122 	xrl	b,#0x80
      00336D 95 F0            [12] 9123 	subb	a,b
      00336F 40 03            [24] 9124 	jc	00336$
      003371 02r34r99         [24] 9125 	ljmp	00108$
      003374                       9126 00336$:
      003374 74 04            [12] 9127 	mov	a,#0x04
      003376 29               [12] 9128 	add	a,r1
      003377 F8               [12] 9129 	mov	r0,a
      003378 86 02            [24] 9130 	mov	ar2,@r0
      00337A 08               [12] 9131 	inc	r0
      00337B 86 03            [24] 9132 	mov	ar3,@r0
      00337D 08               [12] 9133 	inc	r0
      00337E 86 04            [24] 9134 	mov	ar4,@r0
      003380 08               [12] 9135 	inc	r0
      003381 86 05            [24] 9136 	mov	ar5,@r0
                                   9137 ;	calc.c:71: printf("%08lx\t", d);
      003383 C0 05            [24] 9138 	push	ar5
      003385 C0 04            [24] 9139 	push	ar4
      003387 C0 03            [24] 9140 	push	ar3
      003389 C0 02            [24] 9141 	push	ar2
      00338B C0 01            [24] 9142 	push	ar1
      00338D C0 02            [24] 9143 	push	ar2
      00338F C0 03            [24] 9144 	push	ar3
      003391 C0 04            [24] 9145 	push	ar4
      003393 C0 05            [24] 9146 	push	ar5
      003395 74r00            [12] 9147 	mov	a,#___str_0
      003397 C0 E0            [24] 9148 	push	acc
      003399 74s00            [12] 9149 	mov	a,#(___str_0 >> 8)
      00339B C0 E0            [24] 9150 	push	acc
      00339D 74 80            [12] 9151 	mov	a,#0x80
      00339F C0 E0            [24] 9152 	push	acc
      0033A1 12r00r00         [24] 9153 	lcall	_printf
      0033A4 E5 81            [12] 9154 	mov	a,sp
      0033A6 24 F9            [12] 9155 	add	a,#0xf9
      0033A8 F5 81            [12] 9156 	mov	sp,a
      0033AA D0 01            [24] 9157 	pop	ar1
      0033AC D0 02            [24] 9158 	pop	ar2
      0033AE D0 03            [24] 9159 	pop	ar3
      0033B0 D0 04            [24] 9160 	pop	ar4
      0033B2 D0 05            [24] 9161 	pop	ar5
                                   9162 ;	calc.c:72: printf("% 11ld\t", d);
      0033B4 C0 05            [24] 9163 	push	ar5
      0033B6 C0 04            [24] 9164 	push	ar4
      0033B8 C0 03            [24] 9165 	push	ar3
      0033BA C0 02            [24] 9166 	push	ar2
      0033BC C0 01            [24] 9167 	push	ar1
      0033BE C0 02            [24] 9168 	push	ar2
      0033C0 C0 03            [24] 9169 	push	ar3
      0033C2 C0 04            [24] 9170 	push	ar4
      0033C4 C0 05            [24] 9171 	push	ar5
      0033C6 74r07            [12] 9172 	mov	a,#___str_1
      0033C8 C0 E0            [24] 9173 	push	acc
      0033CA 74s00            [12] 9174 	mov	a,#(___str_1 >> 8)
      0033CC C0 E0            [24] 9175 	push	acc
      0033CE 74 80            [12] 9176 	mov	a,#0x80
      0033D0 C0 E0            [24] 9177 	push	acc
      0033D2 12r00r00         [24] 9178 	lcall	_printf
      0033D5 E5 81            [12] 9179 	mov	a,sp
      0033D7 24 F9            [12] 9180 	add	a,#0xf9
      0033D9 F5 81            [12] 9181 	mov	sp,a
      0033DB D0 01            [24] 9182 	pop	ar1
      0033DD D0 02            [24] 9183 	pop	ar2
      0033DF D0 03            [24] 9184 	pop	ar3
      0033E1 D0 04            [24] 9185 	pop	ar4
      0033E3 D0 05            [24] 9186 	pop	ar5
                                   9187 ;	calc.c:73: printf("%011lo\t", d);
      0033E5 C0 05            [24] 9188 	push	ar5
      0033E7 C0 04            [24] 9189 	push	ar4
      0033E9 C0 03            [24] 9190 	push	ar3
      0033EB C0 02            [24] 9191 	push	ar2
      0033ED C0 01            [24] 9192 	push	ar1
      0033EF C0 02            [24] 9193 	push	ar2
      0033F1 C0 03            [24] 9194 	push	ar3
      0033F3 C0 04            [24] 9195 	push	ar4
      0033F5 C0 05            [24] 9196 	push	ar5
      0033F7 74r0F            [12] 9197 	mov	a,#___str_2
      0033F9 C0 E0            [24] 9198 	push	acc
      0033FB 74s00            [12] 9199 	mov	a,#(___str_2 >> 8)
      0033FD C0 E0            [24] 9200 	push	acc
      0033FF 74 80            [12] 9201 	mov	a,#0x80
      003401 C0 E0            [24] 9202 	push	acc
      003403 12r00r00         [24] 9203 	lcall	_printf
      003406 E5 81            [12] 9204 	mov	a,sp
      003408 24 F9            [12] 9205 	add	a,#0xf9
      00340A F5 81            [12] 9206 	mov	sp,a
      00340C D0 01            [24] 9207 	pop	ar1
      00340E D0 02            [24] 9208 	pop	ar2
      003410 D0 03            [24] 9209 	pop	ar3
      003412 D0 04            [24] 9210 	pop	ar4
      003414 D0 05            [24] 9211 	pop	ar5
                                   9212 ;	calc.c:74: printbin(d);
      003416 E5*00            [12] 9213 	mov	a,_bp
      003418 24 16            [12] 9214 	add	a,#0x16
      00341A F8               [12] 9215 	mov	r0,a
      00341B A6 02            [24] 9216 	mov	@r0,ar2
      00341D 08               [12] 9217 	inc	r0
      00341E A6 03            [24] 9218 	mov	@r0,ar3
      003420 08               [12] 9219 	inc	r0
      003421 A6 04            [24] 9220 	mov	@r0,ar4
      003423 08               [12] 9221 	inc	r0
      003424 A6 05            [24] 9222 	mov	@r0,ar5
                                   9223 ;	calc.c:64: for (mask = 0x80000000lu; mask; mask >>= 1)
      003426 E5*00            [12] 9224 	mov	a,_bp
      003428 24 1A            [12] 9225 	add	a,#0x1a
      00342A F8               [12] 9226 	mov	r0,a
      00342B E4               [12] 9227 	clr	a
      00342C F6               [12] 9228 	mov	@r0,a
      00342D 08               [12] 9229 	inc	r0
      00342E F6               [12] 9230 	mov	@r0,a
      00342F 08               [12] 9231 	inc	r0
      003430 F6               [12] 9232 	mov	@r0,a
      003431 08               [12] 9233 	inc	r0
      003432 76 80            [12] 9234 	mov	@r0,#0x80
      003434                       9235 00156$:
                                   9236 ;	calc.c:65: (void)putchar((d & mask) ? (int)'1' : (int)'0');
      003434 C0 01            [24] 9237 	push	ar1
      003436 E5*00            [12] 9238 	mov	a,_bp
      003438 24 16            [12] 9239 	add	a,#0x16
      00343A F8               [12] 9240 	mov	r0,a
      00343B 86 02            [24] 9241 	mov	ar2,@r0
      00343D 08               [12] 9242 	inc	r0
      00343E 86 03            [24] 9243 	mov	ar3,@r0
      003440 08               [12] 9244 	inc	r0
      003441 86 05            [24] 9245 	mov	ar5,@r0
      003443 08               [12] 9246 	inc	r0
      003444 86 07            [24] 9247 	mov	ar7,@r0
      003446 E5*00            [12] 9248 	mov	a,_bp
      003448 24 1A            [12] 9249 	add	a,#0x1a
      00344A F8               [12] 9250 	mov	r0,a
      00344B E6               [12] 9251 	mov	a,@r0
      00344C 52 02            [12] 9252 	anl	ar2,a
      00344E 08               [12] 9253 	inc	r0
      00344F E6               [12] 9254 	mov	a,@r0
      003450 52 03            [12] 9255 	anl	ar3,a
      003452 08               [12] 9256 	inc	r0
      003453 E6               [12] 9257 	mov	a,@r0
      003454 52 05            [12] 9258 	anl	ar5,a
      003456 08               [12] 9259 	inc	r0
      003457 E6               [12] 9260 	mov	a,@r0
      003458 52 07            [12] 9261 	anl	ar7,a
      00345A D0 01            [24] 9262 	pop	ar1
      00345C EA               [12] 9263 	mov	a,r2
      00345D 4B               [12] 9264 	orl	a,r3
      00345E 4D               [12] 9265 	orl	a,r5
      00345F 4F               [12] 9266 	orl	a,r7
      003460 60 06            [24] 9267 	jz	00174$
      003462 7E 31            [12] 9268 	mov	r6,#0x31
      003464 7F 00            [12] 9269 	mov	r7,#0x00
      003466 80 04            [24] 9270 	sjmp	00175$
      003468                       9271 00174$:
      003468 7E 30            [12] 9272 	mov	r6,#0x30
      00346A 7F 00            [12] 9273 	mov	r7,#0x00
      00346C                       9274 00175$:
      00346C 8E 82            [24] 9275 	mov	dpl,r6
      00346E 8F 83            [24] 9276 	mov	dph,r7
      003470 12r00r00         [24] 9277 	lcall	_putchar
                                   9278 ;	calc.c:64: for (mask = 0x80000000lu; mask; mask >>= 1)
      003473 E5*00            [12] 9279 	mov	a,_bp
      003475 24 1A            [12] 9280 	add	a,#0x1a
      003477 F8               [12] 9281 	mov	r0,a
      003478 08               [12] 9282 	inc	r0
      003479 08               [12] 9283 	inc	r0
      00347A 08               [12] 9284 	inc	r0
      00347B E6               [12] 9285 	mov	a,@r0
      00347C C3               [12] 9286 	clr	c
      00347D 13               [12] 9287 	rrc	a
      00347E F6               [12] 9288 	mov	@r0,a
      00347F 18               [12] 9289 	dec	r0
      003480 E6               [12] 9290 	mov	a,@r0
      003481 13               [12] 9291 	rrc	a
      003482 F6               [12] 9292 	mov	@r0,a
      003483 18               [12] 9293 	dec	r0
      003484 E6               [12] 9294 	mov	a,@r0
      003485 13               [12] 9295 	rrc	a
      003486 F6               [12] 9296 	mov	@r0,a
      003487 18               [12] 9297 	dec	r0
      003488 E6               [12] 9298 	mov	a,@r0
      003489 13               [12] 9299 	rrc	a
      00348A F6               [12] 9300 	mov	@r0,a
      00348B E5*00            [12] 9301 	mov	a,_bp
      00348D 24 1A            [12] 9302 	add	a,#0x1a
      00348F F8               [12] 9303 	mov	r0,a
      003490 E6               [12] 9304 	mov	a,@r0
      003491 08               [12] 9305 	inc	r0
      003492 46               [12] 9306 	orl	a,@r0
      003493 08               [12] 9307 	inc	r0
      003494 46               [12] 9308 	orl	a,@r0
      003495 08               [12] 9309 	inc	r0
      003496 46               [12] 9310 	orl	a,@r0
      003497 70 9B            [24] 9311 	jnz	00156$
                                   9312 ;	calc.c:420: if (n > 0) printall(vals[1]);
      003499                       9313 00108$:
                                   9314 ;	calc.c:421: printstr("\r\nSSTOP0\t");
      003499 7Dr08            [12] 9315 	mov	r5,#___str_20
      00349B 7Es01            [12] 9316 	mov	r6,#(___str_20 >> 8)
      00349D 7F 80            [12] 9317 	mov	r7,#0x80
                                   9318 ;	calc.c:58: return;
      00349F                       9319 00159$:
                                   9320 ;	calc.c:56: for (; *s; s++) putchar(*s);
      00349F 8D 82            [24] 9321 	mov	dpl,r5
      0034A1 8E 83            [24] 9322 	mov	dph,r6
      0034A3 8F F0            [24] 9323 	mov	b,r7
      0034A5 12r00r00         [24] 9324 	lcall	__gptrget
      0034A8 FC               [12] 9325 	mov	r4,a
      0034A9 60 10            [24] 9326 	jz	00132$
      0034AB 7B 00            [12] 9327 	mov	r3,#0x00
      0034AD 8C 82            [24] 9328 	mov	dpl,r4
      0034AF 8B 83            [24] 9329 	mov	dph,r3
      0034B1 12r00r00         [24] 9330 	lcall	_putchar
      0034B4 0D               [12] 9331 	inc	r5
                                   9332 ;	calc.c:421: printstr("\r\nSSTOP0\t");
      0034B5 BD 00 E7         [24] 9333 	cjne	r5,#0x00,00159$
      0034B8 0E               [12] 9334 	inc	r6
      0034B9 80 E4            [24] 9335 	sjmp	00159$
      0034BB                       9336 00132$:
                                   9337 ;	calc.c:422: if (n > 1) printall(vals[0]);
      0034BB E5*00            [12] 9338 	mov	a,_bp
      0034BD 24 09            [12] 9339 	add	a,#0x09
      0034BF F8               [12] 9340 	mov	r0,a
      0034C0 C3               [12] 9341 	clr	c
      0034C1 74 01            [12] 9342 	mov	a,#0x01
      0034C3 96               [12] 9343 	subb	a,@r0
      0034C4 74 80            [12] 9344 	mov	a,#(0x00 ^ 0x80)
      0034C6 08               [12] 9345 	inc	r0
      0034C7 86 F0            [24] 9346 	mov	b,@r0
      0034C9 63 F0 80         [24] 9347 	xrl	b,#0x80
      0034CC 95 F0            [12] 9348 	subb	a,b
      0034CE 40 03            [24] 9349 	jc	00341$
      0034D0 02r35rE4         [24] 9350 	ljmp	00110$
      0034D3                       9351 00341$:
      0034D3 87 04            [24] 9352 	mov	ar4,@r1
      0034D5 09               [12] 9353 	inc	r1
      0034D6 87 05            [24] 9354 	mov	ar5,@r1
      0034D8 09               [12] 9355 	inc	r1
      0034D9 87 06            [24] 9356 	mov	ar6,@r1
      0034DB 09               [12] 9357 	inc	r1
      0034DC 87 07            [24] 9358 	mov	ar7,@r1
                                   9359 ;	calc.c:71: printf("%08lx\t", d);
      0034DE C0 07            [24] 9360 	push	ar7
      0034E0 C0 06            [24] 9361 	push	ar6
      0034E2 C0 05            [24] 9362 	push	ar5
      0034E4 C0 04            [24] 9363 	push	ar4
      0034E6 C0 04            [24] 9364 	push	ar4
      0034E8 C0 05            [24] 9365 	push	ar5
      0034EA C0 06            [24] 9366 	push	ar6
      0034EC C0 07            [24] 9367 	push	ar7
      0034EE 74r00            [12] 9368 	mov	a,#___str_0
      0034F0 C0 E0            [24] 9369 	push	acc
      0034F2 74s00            [12] 9370 	mov	a,#(___str_0 >> 8)
      0034F4 C0 E0            [24] 9371 	push	acc
      0034F6 74 80            [12] 9372 	mov	a,#0x80
      0034F8 C0 E0            [24] 9373 	push	acc
      0034FA 12r00r00         [24] 9374 	lcall	_printf
      0034FD E5 81            [12] 9375 	mov	a,sp
      0034FF 24 F9            [12] 9376 	add	a,#0xf9
      003501 F5 81            [12] 9377 	mov	sp,a
      003503 D0 04            [24] 9378 	pop	ar4
      003505 D0 05            [24] 9379 	pop	ar5
      003507 D0 06            [24] 9380 	pop	ar6
      003509 D0 07            [24] 9381 	pop	ar7
                                   9382 ;	calc.c:72: printf("% 11ld\t", d);
      00350B C0 07            [24] 9383 	push	ar7
      00350D C0 06            [24] 9384 	push	ar6
      00350F C0 05            [24] 9385 	push	ar5
      003511 C0 04            [24] 9386 	push	ar4
      003513 C0 04            [24] 9387 	push	ar4
      003515 C0 05            [24] 9388 	push	ar5
      003517 C0 06            [24] 9389 	push	ar6
      003519 C0 07            [24] 9390 	push	ar7
      00351B 74r07            [12] 9391 	mov	a,#___str_1
      00351D C0 E0            [24] 9392 	push	acc
      00351F 74s00            [12] 9393 	mov	a,#(___str_1 >> 8)
      003521 C0 E0            [24] 9394 	push	acc
      003523 74 80            [12] 9395 	mov	a,#0x80
      003525 C0 E0            [24] 9396 	push	acc
      003527 12r00r00         [24] 9397 	lcall	_printf
      00352A E5 81            [12] 9398 	mov	a,sp
      00352C 24 F9            [12] 9399 	add	a,#0xf9
      00352E F5 81            [12] 9400 	mov	sp,a
      003530 D0 04            [24] 9401 	pop	ar4
      003532 D0 05            [24] 9402 	pop	ar5
      003534 D0 06            [24] 9403 	pop	ar6
      003536 D0 07            [24] 9404 	pop	ar7
                                   9405 ;	calc.c:73: printf("%011lo\t", d);
      003538 C0 07            [24] 9406 	push	ar7
      00353A C0 06            [24] 9407 	push	ar6
      00353C C0 05            [24] 9408 	push	ar5
      00353E C0 04            [24] 9409 	push	ar4
      003540 C0 04            [24] 9410 	push	ar4
      003542 C0 05            [24] 9411 	push	ar5
      003544 C0 06            [24] 9412 	push	ar6
      003546 C0 07            [24] 9413 	push	ar7
      003548 74r0F            [12] 9414 	mov	a,#___str_2
      00354A C0 E0            [24] 9415 	push	acc
      00354C 74s00            [12] 9416 	mov	a,#(___str_2 >> 8)
      00354E C0 E0            [24] 9417 	push	acc
      003550 74 80            [12] 9418 	mov	a,#0x80
      003552 C0 E0            [24] 9419 	push	acc
      003554 12r00r00         [24] 9420 	lcall	_printf
      003557 E5 81            [12] 9421 	mov	a,sp
      003559 24 F9            [12] 9422 	add	a,#0xf9
      00355B F5 81            [12] 9423 	mov	sp,a
      00355D D0 04            [24] 9424 	pop	ar4
      00355F D0 05            [24] 9425 	pop	ar5
      003561 D0 06            [24] 9426 	pop	ar6
      003563 D0 07            [24] 9427 	pop	ar7
                                   9428 ;	calc.c:74: printbin(d);
      003565 E5*00            [12] 9429 	mov	a,_bp
      003567 24 16            [12] 9430 	add	a,#0x16
      003569 F8               [12] 9431 	mov	r0,a
      00356A A6 04            [24] 9432 	mov	@r0,ar4
      00356C 08               [12] 9433 	inc	r0
      00356D A6 05            [24] 9434 	mov	@r0,ar5
      00356F 08               [12] 9435 	inc	r0
      003570 A6 06            [24] 9436 	mov	@r0,ar6
      003572 08               [12] 9437 	inc	r0
      003573 A6 07            [24] 9438 	mov	@r0,ar7
                                   9439 ;	calc.c:64: for (mask = 0x80000000lu; mask; mask >>= 1)
      003575 E5*00            [12] 9440 	mov	a,_bp
      003577 24 1A            [12] 9441 	add	a,#0x1a
      003579 F8               [12] 9442 	mov	r0,a
      00357A E4               [12] 9443 	clr	a
      00357B F6               [12] 9444 	mov	@r0,a
      00357C 08               [12] 9445 	inc	r0
      00357D F6               [12] 9446 	mov	@r0,a
      00357E 08               [12] 9447 	inc	r0
      00357F F6               [12] 9448 	mov	@r0,a
      003580 08               [12] 9449 	inc	r0
      003581 76 80            [12] 9450 	mov	@r0,#0x80
      003583                       9451 00161$:
                                   9452 ;	calc.c:65: (void)putchar((d & mask) ? (int)'1' : (int)'0');
      003583 E5*00            [12] 9453 	mov	a,_bp
      003585 24 16            [12] 9454 	add	a,#0x16
      003587 F8               [12] 9455 	mov	r0,a
      003588 86 04            [24] 9456 	mov	ar4,@r0
      00358A 08               [12] 9457 	inc	r0
      00358B 86 05            [24] 9458 	mov	ar5,@r0
      00358D 08               [12] 9459 	inc	r0
      00358E 86 06            [24] 9460 	mov	ar6,@r0
      003590 08               [12] 9461 	inc	r0
      003591 86 07            [24] 9462 	mov	ar7,@r0
      003593 E5*00            [12] 9463 	mov	a,_bp
      003595 24 1A            [12] 9464 	add	a,#0x1a
      003597 F8               [12] 9465 	mov	r0,a
      003598 E6               [12] 9466 	mov	a,@r0
      003599 52 04            [12] 9467 	anl	ar4,a
      00359B 08               [12] 9468 	inc	r0
      00359C E6               [12] 9469 	mov	a,@r0
      00359D 52 05            [12] 9470 	anl	ar5,a
      00359F 08               [12] 9471 	inc	r0
      0035A0 E6               [12] 9472 	mov	a,@r0
      0035A1 52 06            [12] 9473 	anl	ar6,a
      0035A3 08               [12] 9474 	inc	r0
      0035A4 E6               [12] 9475 	mov	a,@r0
      0035A5 52 07            [12] 9476 	anl	ar7,a
      0035A7 EC               [12] 9477 	mov	a,r4
      0035A8 4D               [12] 9478 	orl	a,r5
      0035A9 4E               [12] 9479 	orl	a,r6
      0035AA 4F               [12] 9480 	orl	a,r7
      0035AB 60 06            [24] 9481 	jz	00176$
      0035AD 7E 31            [12] 9482 	mov	r6,#0x31
      0035AF 7F 00            [12] 9483 	mov	r7,#0x00
      0035B1 80 04            [24] 9484 	sjmp	00177$
      0035B3                       9485 00176$:
      0035B3 7E 30            [12] 9486 	mov	r6,#0x30
      0035B5 7F 00            [12] 9487 	mov	r7,#0x00
      0035B7                       9488 00177$:
      0035B7 8E 82            [24] 9489 	mov	dpl,r6
      0035B9 8F 83            [24] 9490 	mov	dph,r7
      0035BB 12r00r00         [24] 9491 	lcall	_putchar
                                   9492 ;	calc.c:64: for (mask = 0x80000000lu; mask; mask >>= 1)
      0035BE E5*00            [12] 9493 	mov	a,_bp
      0035C0 24 1A            [12] 9494 	add	a,#0x1a
      0035C2 F8               [12] 9495 	mov	r0,a
      0035C3 08               [12] 9496 	inc	r0
      0035C4 08               [12] 9497 	inc	r0
      0035C5 08               [12] 9498 	inc	r0
      0035C6 E6               [12] 9499 	mov	a,@r0
      0035C7 C3               [12] 9500 	clr	c
      0035C8 13               [12] 9501 	rrc	a
      0035C9 F6               [12] 9502 	mov	@r0,a
      0035CA 18               [12] 9503 	dec	r0
      0035CB E6               [12] 9504 	mov	a,@r0
      0035CC 13               [12] 9505 	rrc	a
      0035CD F6               [12] 9506 	mov	@r0,a
      0035CE 18               [12] 9507 	dec	r0
      0035CF E6               [12] 9508 	mov	a,@r0
      0035D0 13               [12] 9509 	rrc	a
      0035D1 F6               [12] 9510 	mov	@r0,a
      0035D2 18               [12] 9511 	dec	r0
      0035D3 E6               [12] 9512 	mov	a,@r0
      0035D4 13               [12] 9513 	rrc	a
      0035D5 F6               [12] 9514 	mov	@r0,a
      0035D6 E5*00            [12] 9515 	mov	a,_bp
      0035D8 24 1A            [12] 9516 	add	a,#0x1a
      0035DA F8               [12] 9517 	mov	r0,a
      0035DB E6               [12] 9518 	mov	a,@r0
      0035DC 08               [12] 9519 	inc	r0
      0035DD 46               [12] 9520 	orl	a,@r0
      0035DE 08               [12] 9521 	inc	r0
      0035DF 46               [12] 9522 	orl	a,@r0
      0035E0 08               [12] 9523 	inc	r0
      0035E1 46               [12] 9524 	orl	a,@r0
      0035E2 70 9F            [24] 9525 	jnz	00161$
                                   9526 ;	calc.c:422: if (n > 1) printall(vals[0]);
      0035E4                       9527 00110$:
                                   9528 ;	calc.c:423: printstr("\r\n");
      0035E4 7Dr17            [12] 9529 	mov	r5,#___str_3
      0035E6 7Es00            [12] 9530 	mov	r6,#(___str_3 >> 8)
      0035E8 7F 80            [12] 9531 	mov	r7,#0x80
                                   9532 ;	calc.c:58: return;
      0035EA                       9533 00164$:
                                   9534 ;	calc.c:56: for (; *s; s++) putchar(*s);
      0035EA 8D 82            [24] 9535 	mov	dpl,r5
      0035EC 8E 83            [24] 9536 	mov	dph,r6
      0035EE 8F F0            [24] 9537 	mov	b,r7
      0035F0 12r00r00         [24] 9538 	lcall	__gptrget
      0035F3 FC               [12] 9539 	mov	r4,a
      0035F4 60 10            [24] 9540 	jz	00137$
      0035F6 7B 00            [12] 9541 	mov	r3,#0x00
      0035F8 8C 82            [24] 9542 	mov	dpl,r4
      0035FA 8B 83            [24] 9543 	mov	dph,r3
      0035FC 12r00r00         [24] 9544 	lcall	_putchar
      0035FF 0D               [12] 9545 	inc	r5
                                   9546 ;	calc.c:423: printstr("\r\n");
      003600 BD 00 E7         [24] 9547 	cjne	r5,#0x00,00164$
      003603 0E               [12] 9548 	inc	r6
      003604 80 E4            [24] 9549 	sjmp	00164$
      003606                       9550 00137$:
                                   9551 ;	calc.c:425: return 1;
      003606 90 00 01         [24] 9552 	mov	dptr,#0x0001
                                   9553 ;	calc.c:426: }
      003609 85*00 81         [24] 9554 	mov	sp,_bp
      00360C D0*00            [24] 9555 	pop	_bp
      00360E 22               [24] 9556 	ret
                                   9557 ;------------------------------------------------------------
                                   9558 ;Allocation info for local variables in function 'help'
                                   9559 ;------------------------------------------------------------
                                   9560 ;delta                     Allocated to stack - _bp -5
                                   9561 ;_ctx                      Allocated to registers 
                                   9562 ;__1310720151              Allocated to registers 
                                   9563 ;s                         Allocated to registers r5 r6 r7 
                                   9564 ;__1310720153              Allocated to registers 
                                   9565 ;s                         Allocated to registers r5 r6 r7 
                                   9566 ;__1310720155              Allocated to registers 
                                   9567 ;s                         Allocated to registers r5 r6 r7 
                                   9568 ;__1310720157              Allocated to registers 
                                   9569 ;s                         Allocated to registers r5 r6 r7 
                                   9570 ;__1310720159              Allocated to registers 
                                   9571 ;s                         Allocated to registers r5 r6 r7 
                                   9572 ;__1310720161              Allocated to registers 
                                   9573 ;s                         Allocated to registers r5 r6 r7 
                                   9574 ;__1310720163              Allocated to registers 
                                   9575 ;s                         Allocated to registers r5 r6 r7 
                                   9576 ;__1310720165              Allocated to registers 
                                   9577 ;s                         Allocated to registers r5 r6 r7 
                                   9578 ;__1310720167              Allocated to registers 
                                   9579 ;s                         Allocated to registers r5 r6 r7 
                                   9580 ;__1310720169              Allocated to registers 
                                   9581 ;s                         Allocated to registers r5 r6 r7 
                                   9582 ;__1310720171              Allocated to registers 
                                   9583 ;s                         Allocated to registers r5 r6 r7 
                                   9584 ;__1310720173              Allocated to registers 
                                   9585 ;s                         Allocated to registers r5 r6 r7 
                                   9586 ;__1310720175              Allocated to registers 
                                   9587 ;s                         Allocated to registers r5 r6 r7 
                                   9588 ;__1310720177              Allocated to registers 
                                   9589 ;s                         Allocated to registers r5 r6 r7 
                                   9590 ;__1310720179              Allocated to registers 
                                   9591 ;s                         Allocated to registers r5 r6 r7 
                                   9592 ;__1310720181              Allocated to registers 
                                   9593 ;s                         Allocated to registers r5 r6 r7 
                                   9594 ;__1310720183              Allocated to registers 
                                   9595 ;s                         Allocated to registers r5 r6 r7 
                                   9596 ;__1310720185              Allocated to registers 
                                   9597 ;s                         Allocated to registers r5 r6 r7 
                                   9598 ;__1310720187              Allocated to registers 
                                   9599 ;s                         Allocated to registers r5 r6 r7 
                                   9600 ;__1310720189              Allocated to registers 
                                   9601 ;s                         Allocated to registers r5 r6 r7 
                                   9602 ;__1310720191              Allocated to registers 
                                   9603 ;s                         Allocated to registers r5 r6 r7 
                                   9604 ;__1310720193              Allocated to registers 
                                   9605 ;s                         Allocated to registers r5 r6 r7 
                                   9606 ;__1310720195              Allocated to registers 
                                   9607 ;s                         Allocated to registers r5 r6 r7 
                                   9608 ;__1310720197              Allocated to registers 
                                   9609 ;s                         Allocated to registers r5 r6 r7 
                                   9610 ;__1310720199              Allocated to registers 
                                   9611 ;s                         Allocated to registers r5 r6 r7 
                                   9612 ;__1310720201              Allocated to registers 
                                   9613 ;s                         Allocated to registers r5 r6 r7 
                                   9614 ;__1310720203              Allocated to registers 
                                   9615 ;s                         Allocated to registers r5 r6 r7 
                                   9616 ;__1310720205              Allocated to registers 
                                   9617 ;s                         Allocated to registers r5 r6 r7 
                                   9618 ;__1310720207              Allocated to registers 
                                   9619 ;s                         Allocated to registers r5 r6 r7 
                                   9620 ;__1310720209              Allocated to registers 
                                   9621 ;s                         Allocated to registers r5 r6 r7 
                                   9622 ;__1310720211              Allocated to registers 
                                   9623 ;s                         Allocated to registers r5 r6 r7 
                                   9624 ;------------------------------------------------------------
                                   9625 ;	calc.c:428: static int help(void *_ctx, delta_t *delta) __reentrant {
                                   9626 ;	-----------------------------------------
                                   9627 ;	 function help
                                   9628 ;	-----------------------------------------
      00360F                       9629 _help:
      00360F C0*00            [24] 9630 	push	_bp
      003611 85 81*00         [24] 9631 	mov	_bp,sp
                                   9632 ;	calc.c:432: printstr("\r\nHhOo\tbase 16 10 8 2\r\n");
      003614 7Dr12            [12] 9633 	mov	r5,#___str_21
      003616 7Es01            [12] 9634 	mov	r6,#(___str_21 >> 8)
      003618 7F 80            [12] 9635 	mov	r7,#0x80
                                   9636 ;	calc.c:58: return;
      00361A                       9637 00164$:
                                   9638 ;	calc.c:56: for (; *s; s++) putchar(*s);
      00361A 8D 82            [24] 9639 	mov	dpl,r5
      00361C 8E 83            [24] 9640 	mov	dph,r6
      00361E 8F F0            [24] 9641 	mov	b,r7
      003620 12r00r00         [24] 9642 	lcall	__gptrget
      003623 FC               [12] 9643 	mov	r4,a
      003624 60 10            [24] 9644 	jz	00102$
      003626 7B 00            [12] 9645 	mov	r3,#0x00
      003628 8C 82            [24] 9646 	mov	dpl,r4
      00362A 8B 83            [24] 9647 	mov	dph,r3
      00362C 12r00r00         [24] 9648 	lcall	_putchar
      00362F 0D               [12] 9649 	inc	r5
                                   9650 ;	calc.c:432: printstr("\r\nHhOo\tbase 16 10 8 2\r\n");
      003630 BD 00 E7         [24] 9651 	cjne	r5,#0x00,00164$
      003633 0E               [12] 9652 	inc	r6
      003634 80 E4            [24] 9653 	sjmp	00164$
      003636                       9654 00102$:
                                   9655 ;	calc.c:433: printstr("p.\tpop top\r\n");
      003636 7Dr2A            [12] 9656 	mov	r5,#___str_22
      003638 7Es01            [12] 9657 	mov	r6,#(___str_22 >> 8)
      00363A 7F 80            [12] 9658 	mov	r7,#0x80
                                   9659 ;	calc.c:58: return;
      00363C                       9660 00167$:
                                   9661 ;	calc.c:56: for (; *s; s++) putchar(*s);
      00363C 8D 82            [24] 9662 	mov	dpl,r5
      00363E 8E 83            [24] 9663 	mov	dph,r6
      003640 8F F0            [24] 9664 	mov	b,r7
      003642 12r00r00         [24] 9665 	lcall	__gptrget
      003645 FC               [12] 9666 	mov	r4,a
      003646 60 10            [24] 9667 	jz	00104$
      003648 7B 00            [12] 9668 	mov	r3,#0x00
      00364A 8C 82            [24] 9669 	mov	dpl,r4
      00364C 8B 83            [24] 9670 	mov	dph,r3
      00364E 12r00r00         [24] 9671 	lcall	_putchar
      003651 0D               [12] 9672 	inc	r5
                                   9673 ;	calc.c:433: printstr("p.\tpop top\r\n");
      003652 BD 00 E7         [24] 9674 	cjne	r5,#0x00,00167$
      003655 0E               [12] 9675 	inc	r6
      003656 80 E4            [24] 9676 	sjmp	00167$
      003658                       9677 00104$:
                                   9678 ;	calc.c:434: printstr("P\tpop stack\r\n");
      003658 7Dr37            [12] 9679 	mov	r5,#___str_23
      00365A 7Es01            [12] 9680 	mov	r6,#(___str_23 >> 8)
      00365C 7F 80            [12] 9681 	mov	r7,#0x80
                                   9682 ;	calc.c:58: return;
      00365E                       9683 00170$:
                                   9684 ;	calc.c:56: for (; *s; s++) putchar(*s);
      00365E 8D 82            [24] 9685 	mov	dpl,r5
      003660 8E 83            [24] 9686 	mov	dph,r6
      003662 8F F0            [24] 9687 	mov	b,r7
      003664 12r00r00         [24] 9688 	lcall	__gptrget
      003667 FC               [12] 9689 	mov	r4,a
      003668 60 10            [24] 9690 	jz	00106$
      00366A 7B 00            [12] 9691 	mov	r3,#0x00
      00366C 8C 82            [24] 9692 	mov	dpl,r4
      00366E 8B 83            [24] 9693 	mov	dph,r3
      003670 12r00r00         [24] 9694 	lcall	_putchar
      003673 0D               [12] 9695 	inc	r5
                                   9696 ;	calc.c:434: printstr("P\tpop stack\r\n");
      003674 BD 00 E7         [24] 9697 	cjne	r5,#0x00,00170$
      003677 0E               [12] 9698 	inc	r6
      003678 80 E4            [24] 9699 	sjmp	00170$
      00367A                       9700 00106$:
                                   9701 ;	calc.c:435: printstr("v\tpeek top\r\n");
      00367A 7Dr45            [12] 9702 	mov	r5,#___str_24
      00367C 7Es01            [12] 9703 	mov	r6,#(___str_24 >> 8)
      00367E 7F 80            [12] 9704 	mov	r7,#0x80
                                   9705 ;	calc.c:58: return;
      003680                       9706 00173$:
                                   9707 ;	calc.c:56: for (; *s; s++) putchar(*s);
      003680 8D 82            [24] 9708 	mov	dpl,r5
      003682 8E 83            [24] 9709 	mov	dph,r6
      003684 8F F0            [24] 9710 	mov	b,r7
      003686 12r00r00         [24] 9711 	lcall	__gptrget
      003689 FC               [12] 9712 	mov	r4,a
      00368A 60 10            [24] 9713 	jz	00108$
      00368C 7B 00            [12] 9714 	mov	r3,#0x00
      00368E 8C 82            [24] 9715 	mov	dpl,r4
      003690 8B 83            [24] 9716 	mov	dph,r3
      003692 12r00r00         [24] 9717 	lcall	_putchar
      003695 0D               [12] 9718 	inc	r5
                                   9719 ;	calc.c:435: printstr("v\tpeek top\r\n");
      003696 BD 00 E7         [24] 9720 	cjne	r5,#0x00,00173$
      003699 0E               [12] 9721 	inc	r6
      00369A 80 E4            [24] 9722 	sjmp	00173$
      00369C                       9723 00108$:
                                   9724 ;	calc.c:436: printstr("V\tpeek stack\r\n");
      00369C 7Dr52            [12] 9725 	mov	r5,#___str_25
      00369E 7Es01            [12] 9726 	mov	r6,#(___str_25 >> 8)
      0036A0 7F 80            [12] 9727 	mov	r7,#0x80
                                   9728 ;	calc.c:58: return;
      0036A2                       9729 00176$:
                                   9730 ;	calc.c:56: for (; *s; s++) putchar(*s);
      0036A2 8D 82            [24] 9731 	mov	dpl,r5
      0036A4 8E 83            [24] 9732 	mov	dph,r6
      0036A6 8F F0            [24] 9733 	mov	b,r7
      0036A8 12r00r00         [24] 9734 	lcall	__gptrget
      0036AB FC               [12] 9735 	mov	r4,a
      0036AC 60 10            [24] 9736 	jz	00110$
      0036AE 7B 00            [12] 9737 	mov	r3,#0x00
      0036B0 8C 82            [24] 9738 	mov	dpl,r4
      0036B2 8B 83            [24] 9739 	mov	dph,r3
      0036B4 12r00r00         [24] 9740 	lcall	_putchar
      0036B7 0D               [12] 9741 	inc	r5
                                   9742 ;	calc.c:436: printstr("V\tpeek stack\r\n");
      0036B8 BD 00 E7         [24] 9743 	cjne	r5,#0x00,00176$
      0036BB 0E               [12] 9744 	inc	r6
      0036BC 80 E4            [24] 9745 	sjmp	00176$
      0036BE                       9746 00110$:
                                   9747 ;	calc.c:437: printstr("i\treset acc\r\n");
      0036BE 7Dr61            [12] 9748 	mov	r5,#___str_26
      0036C0 7Es01            [12] 9749 	mov	r6,#(___str_26 >> 8)
      0036C2 7F 80            [12] 9750 	mov	r7,#0x80
                                   9751 ;	calc.c:58: return;
      0036C4                       9752 00179$:
                                   9753 ;	calc.c:56: for (; *s; s++) putchar(*s);
      0036C4 8D 82            [24] 9754 	mov	dpl,r5
      0036C6 8E 83            [24] 9755 	mov	dph,r6
      0036C8 8F F0            [24] 9756 	mov	b,r7
      0036CA 12r00r00         [24] 9757 	lcall	__gptrget
      0036CD FC               [12] 9758 	mov	r4,a
      0036CE 60 10            [24] 9759 	jz	00112$
      0036D0 7B 00            [12] 9760 	mov	r3,#0x00
      0036D2 8C 82            [24] 9761 	mov	dpl,r4
      0036D4 8B 83            [24] 9762 	mov	dph,r3
      0036D6 12r00r00         [24] 9763 	lcall	_putchar
      0036D9 0D               [12] 9764 	inc	r5
                                   9765 ;	calc.c:437: printstr("i\treset acc\r\n");
      0036DA BD 00 E7         [24] 9766 	cjne	r5,#0x00,00179$
      0036DD 0E               [12] 9767 	inc	r6
      0036DE 80 E4            [24] 9768 	sjmp	00179$
      0036E0                       9769 00112$:
                                   9770 ;	calc.c:438: printstr("I\treset and discard acc\r\n");
      0036E0 7Dr6F            [12] 9771 	mov	r5,#___str_27
      0036E2 7Es01            [12] 9772 	mov	r6,#(___str_27 >> 8)
      0036E4 7F 80            [12] 9773 	mov	r7,#0x80
                                   9774 ;	calc.c:58: return;
      0036E6                       9775 00182$:
                                   9776 ;	calc.c:56: for (; *s; s++) putchar(*s);
      0036E6 8D 82            [24] 9777 	mov	dpl,r5
      0036E8 8E 83            [24] 9778 	mov	dph,r6
      0036EA 8F F0            [24] 9779 	mov	b,r7
      0036EC 12r00r00         [24] 9780 	lcall	__gptrget
      0036EF FC               [12] 9781 	mov	r4,a
      0036F0 60 10            [24] 9782 	jz	00114$
      0036F2 7B 00            [12] 9783 	mov	r3,#0x00
      0036F4 8C 82            [24] 9784 	mov	dpl,r4
      0036F6 8B 83            [24] 9785 	mov	dph,r3
      0036F8 12r00r00         [24] 9786 	lcall	_putchar
      0036FB 0D               [12] 9787 	inc	r5
                                   9788 ;	calc.c:438: printstr("I\treset and discard acc\r\n");
      0036FC BD 00 E7         [24] 9789 	cjne	r5,#0x00,00182$
      0036FF 0E               [12] 9790 	inc	r6
      003700 80 E4            [24] 9791 	sjmp	00182$
      003702                       9792 00114$:
                                   9793 ;	calc.c:439: printstr("x\texchange top 2\r\n");
      003702 7Dr89            [12] 9794 	mov	r5,#___str_28
      003704 7Es01            [12] 9795 	mov	r6,#(___str_28 >> 8)
      003706 7F 80            [12] 9796 	mov	r7,#0x80
                                   9797 ;	calc.c:58: return;
      003708                       9798 00185$:
                                   9799 ;	calc.c:56: for (; *s; s++) putchar(*s);
      003708 8D 82            [24] 9800 	mov	dpl,r5
      00370A 8E 83            [24] 9801 	mov	dph,r6
      00370C 8F F0            [24] 9802 	mov	b,r7
      00370E 12r00r00         [24] 9803 	lcall	__gptrget
      003711 FC               [12] 9804 	mov	r4,a
      003712 60 10            [24] 9805 	jz	00116$
      003714 7B 00            [12] 9806 	mov	r3,#0x00
      003716 8C 82            [24] 9807 	mov	dpl,r4
      003718 8B 83            [24] 9808 	mov	dph,r3
      00371A 12r00r00         [24] 9809 	lcall	_putchar
      00371D 0D               [12] 9810 	inc	r5
                                   9811 ;	calc.c:439: printstr("x\texchange top 2\r\n");
      00371E BD 00 E7         [24] 9812 	cjne	r5,#0x00,00185$
      003721 0E               [12] 9813 	inc	r6
      003722 80 E4            [24] 9814 	sjmp	00185$
      003724                       9815 00116$:
                                   9816 ;	calc.c:440: printstr("X\texchange stacks primary <-> secondary\r\n");
      003724 7Dr9C            [12] 9817 	mov	r5,#___str_29
      003726 7Es01            [12] 9818 	mov	r6,#(___str_29 >> 8)
      003728 7F 80            [12] 9819 	mov	r7,#0x80
                                   9820 ;	calc.c:58: return;
      00372A                       9821 00188$:
                                   9822 ;	calc.c:56: for (; *s; s++) putchar(*s);
      00372A 8D 82            [24] 9823 	mov	dpl,r5
      00372C 8E 83            [24] 9824 	mov	dph,r6
      00372E 8F F0            [24] 9825 	mov	b,r7
      003730 12r00r00         [24] 9826 	lcall	__gptrget
      003733 FC               [12] 9827 	mov	r4,a
      003734 60 10            [24] 9828 	jz	00118$
      003736 7B 00            [12] 9829 	mov	r3,#0x00
      003738 8C 82            [24] 9830 	mov	dpl,r4
      00373A 8B 83            [24] 9831 	mov	dph,r3
      00373C 12r00r00         [24] 9832 	lcall	_putchar
      00373F 0D               [12] 9833 	inc	r5
                                   9834 ;	calc.c:440: printstr("X\texchange stacks primary <-> secondary\r\n");
      003740 BD 00 E7         [24] 9835 	cjne	r5,#0x00,00188$
      003743 0E               [12] 9836 	inc	r6
      003744 80 E4            [24] 9837 	sjmp	00188$
      003746                       9838 00118$:
                                   9839 ;	calc.c:441: printstr("T\texchange tops primary <-> secondary\r\n");
      003746 7DrC6            [12] 9840 	mov	r5,#___str_30
      003748 7Es01            [12] 9841 	mov	r6,#(___str_30 >> 8)
      00374A 7F 80            [12] 9842 	mov	r7,#0x80
                                   9843 ;	calc.c:58: return;
      00374C                       9844 00191$:
                                   9845 ;	calc.c:56: for (; *s; s++) putchar(*s);
      00374C 8D 82            [24] 9846 	mov	dpl,r5
      00374E 8E 83            [24] 9847 	mov	dph,r6
      003750 8F F0            [24] 9848 	mov	b,r7
      003752 12r00r00         [24] 9849 	lcall	__gptrget
      003755 FC               [12] 9850 	mov	r4,a
      003756 60 10            [24] 9851 	jz	00120$
      003758 7B 00            [12] 9852 	mov	r3,#0x00
      00375A 8C 82            [24] 9853 	mov	dpl,r4
      00375C 8B 83            [24] 9854 	mov	dph,r3
      00375E 12r00r00         [24] 9855 	lcall	_putchar
      003761 0D               [12] 9856 	inc	r5
                                   9857 ;	calc.c:441: printstr("T\texchange tops primary <-> secondary\r\n");
      003762 BD 00 E7         [24] 9858 	cjne	r5,#0x00,00191$
      003765 0E               [12] 9859 	inc	r6
      003766 80 E4            [24] 9860 	sjmp	00191$
      003768                       9861 00120$:
                                   9862 ;	calc.c:442: printstr("U\tcopy top secondary -> primary\r\n");
      003768 7DrEE            [12] 9863 	mov	r5,#___str_31
      00376A 7Es01            [12] 9864 	mov	r6,#(___str_31 >> 8)
      00376C 7F 80            [12] 9865 	mov	r7,#0x80
                                   9866 ;	calc.c:58: return;
      00376E                       9867 00194$:
                                   9868 ;	calc.c:56: for (; *s; s++) putchar(*s);
      00376E 8D 82            [24] 9869 	mov	dpl,r5
      003770 8E 83            [24] 9870 	mov	dph,r6
      003772 8F F0            [24] 9871 	mov	b,r7
      003774 12r00r00         [24] 9872 	lcall	__gptrget
      003777 FC               [12] 9873 	mov	r4,a
      003778 60 10            [24] 9874 	jz	00122$
      00377A 7B 00            [12] 9875 	mov	r3,#0x00
      00377C 8C 82            [24] 9876 	mov	dpl,r4
      00377E 8B 83            [24] 9877 	mov	dph,r3
      003780 12r00r00         [24] 9878 	lcall	_putchar
      003783 0D               [12] 9879 	inc	r5
                                   9880 ;	calc.c:442: printstr("U\tcopy top secondary -> primary\r\n");
      003784 BD 00 E7         [24] 9881 	cjne	r5,#0x00,00194$
      003787 0E               [12] 9882 	inc	r6
      003788 80 E4            [24] 9883 	sjmp	00194$
      00378A                       9884 00122$:
                                   9885 ;	calc.c:443: printstr("u\tcopy top primary -> secondary\r\n");
      00378A 7Dr10            [12] 9886 	mov	r5,#___str_32
      00378C 7Es02            [12] 9887 	mov	r6,#(___str_32 >> 8)
      00378E 7F 80            [12] 9888 	mov	r7,#0x80
                                   9889 ;	calc.c:58: return;
      003790                       9890 00197$:
                                   9891 ;	calc.c:56: for (; *s; s++) putchar(*s);
      003790 8D 82            [24] 9892 	mov	dpl,r5
      003792 8E 83            [24] 9893 	mov	dph,r6
      003794 8F F0            [24] 9894 	mov	b,r7
      003796 12r00r00         [24] 9895 	lcall	__gptrget
      003799 FC               [12] 9896 	mov	r4,a
      00379A 60 10            [24] 9897 	jz	00124$
      00379C 7B 00            [12] 9898 	mov	r3,#0x00
      00379E 8C 82            [24] 9899 	mov	dpl,r4
      0037A0 8B 83            [24] 9900 	mov	dph,r3
      0037A2 12r00r00         [24] 9901 	lcall	_putchar
      0037A5 0D               [12] 9902 	inc	r5
                                   9903 ;	calc.c:443: printstr("u\tcopy top primary -> secondary\r\n");
      0037A6 BD 00 E7         [24] 9904 	cjne	r5,#0x00,00197$
      0037A9 0E               [12] 9905 	inc	r6
      0037AA 80 E4            [24] 9906 	sjmp	00197$
      0037AC                       9907 00124$:
                                   9908 ;	calc.c:444: printstr("M\tmove top secondary -> primary\r\n");
      0037AC 7Dr32            [12] 9909 	mov	r5,#___str_33
      0037AE 7Es02            [12] 9910 	mov	r6,#(___str_33 >> 8)
      0037B0 7F 80            [12] 9911 	mov	r7,#0x80
                                   9912 ;	calc.c:58: return;
      0037B2                       9913 00200$:
                                   9914 ;	calc.c:56: for (; *s; s++) putchar(*s);
      0037B2 8D 82            [24] 9915 	mov	dpl,r5
      0037B4 8E 83            [24] 9916 	mov	dph,r6
      0037B6 8F F0            [24] 9917 	mov	b,r7
      0037B8 12r00r00         [24] 9918 	lcall	__gptrget
      0037BB FC               [12] 9919 	mov	r4,a
      0037BC 60 10            [24] 9920 	jz	00126$
      0037BE 7B 00            [12] 9921 	mov	r3,#0x00
      0037C0 8C 82            [24] 9922 	mov	dpl,r4
      0037C2 8B 83            [24] 9923 	mov	dph,r3
      0037C4 12r00r00         [24] 9924 	lcall	_putchar
      0037C7 0D               [12] 9925 	inc	r5
                                   9926 ;	calc.c:444: printstr("M\tmove top secondary -> primary\r\n");
      0037C8 BD 00 E7         [24] 9927 	cjne	r5,#0x00,00200$
      0037CB 0E               [12] 9928 	inc	r6
      0037CC 80 E4            [24] 9929 	sjmp	00200$
      0037CE                       9930 00126$:
                                   9931 ;	calc.c:445: printstr("m\tmove top primary -> secondary\r\n");
      0037CE 7Dr54            [12] 9932 	mov	r5,#___str_34
      0037D0 7Es02            [12] 9933 	mov	r6,#(___str_34 >> 8)
      0037D2 7F 80            [12] 9934 	mov	r7,#0x80
                                   9935 ;	calc.c:58: return;
      0037D4                       9936 00203$:
                                   9937 ;	calc.c:56: for (; *s; s++) putchar(*s);
      0037D4 8D 82            [24] 9938 	mov	dpl,r5
      0037D6 8E 83            [24] 9939 	mov	dph,r6
      0037D8 8F F0            [24] 9940 	mov	b,r7
      0037DA 12r00r00         [24] 9941 	lcall	__gptrget
      0037DD FC               [12] 9942 	mov	r4,a
      0037DE 60 10            [24] 9943 	jz	00128$
      0037E0 7B 00            [12] 9944 	mov	r3,#0x00
      0037E2 8C 82            [24] 9945 	mov	dpl,r4
      0037E4 8B 83            [24] 9946 	mov	dph,r3
      0037E6 12r00r00         [24] 9947 	lcall	_putchar
      0037E9 0D               [12] 9948 	inc	r5
                                   9949 ;	calc.c:445: printstr("m\tmove top primary -> secondary\r\n");
      0037EA BD 00 E7         [24] 9950 	cjne	r5,#0x00,00203$
      0037ED 0E               [12] 9951 	inc	r6
      0037EE 80 E4            [24] 9952 	sjmp	00203$
      0037F0                       9953 00128$:
                                   9954 ;	calc.c:446: printstr("+\tadd top 2\r\n");
      0037F0 7Dr76            [12] 9955 	mov	r5,#___str_35
      0037F2 7Es02            [12] 9956 	mov	r6,#(___str_35 >> 8)
      0037F4 7F 80            [12] 9957 	mov	r7,#0x80
                                   9958 ;	calc.c:58: return;
      0037F6                       9959 00206$:
                                   9960 ;	calc.c:56: for (; *s; s++) putchar(*s);
      0037F6 8D 82            [24] 9961 	mov	dpl,r5
      0037F8 8E 83            [24] 9962 	mov	dph,r6
      0037FA 8F F0            [24] 9963 	mov	b,r7
      0037FC 12r00r00         [24] 9964 	lcall	__gptrget
      0037FF FC               [12] 9965 	mov	r4,a
      003800 60 10            [24] 9966 	jz	00130$
      003802 7B 00            [12] 9967 	mov	r3,#0x00
      003804 8C 82            [24] 9968 	mov	dpl,r4
      003806 8B 83            [24] 9969 	mov	dph,r3
      003808 12r00r00         [24] 9970 	lcall	_putchar
      00380B 0D               [12] 9971 	inc	r5
                                   9972 ;	calc.c:446: printstr("+\tadd top 2\r\n");
      00380C BD 00 E7         [24] 9973 	cjne	r5,#0x00,00206$
      00380F 0E               [12] 9974 	inc	r6
      003810 80 E4            [24] 9975 	sjmp	00206$
      003812                       9976 00130$:
                                   9977 ;	calc.c:447: printstr("-\tsubtract top 2\r\n");
      003812 7Dr84            [12] 9978 	mov	r5,#___str_36
      003814 7Es02            [12] 9979 	mov	r6,#(___str_36 >> 8)
      003816 7F 80            [12] 9980 	mov	r7,#0x80
                                   9981 ;	calc.c:58: return;
      003818                       9982 00209$:
                                   9983 ;	calc.c:56: for (; *s; s++) putchar(*s);
      003818 8D 82            [24] 9984 	mov	dpl,r5
      00381A 8E 83            [24] 9985 	mov	dph,r6
      00381C 8F F0            [24] 9986 	mov	b,r7
      00381E 12r00r00         [24] 9987 	lcall	__gptrget
      003821 FC               [12] 9988 	mov	r4,a
      003822 60 10            [24] 9989 	jz	00132$
      003824 7B 00            [12] 9990 	mov	r3,#0x00
      003826 8C 82            [24] 9991 	mov	dpl,r4
      003828 8B 83            [24] 9992 	mov	dph,r3
      00382A 12r00r00         [24] 9993 	lcall	_putchar
      00382D 0D               [12] 9994 	inc	r5
                                   9995 ;	calc.c:447: printstr("-\tsubtract top 2\r\n");
      00382E BD 00 E7         [24] 9996 	cjne	r5,#0x00,00209$
      003831 0E               [12] 9997 	inc	r6
      003832 80 E4            [24] 9998 	sjmp	00209$
      003834                       9999 00132$:
                                  10000 ;	calc.c:448: printstr("*\tmultiply top 2\r\n");
      003834 7Dr97            [12]10001 	mov	r5,#___str_37
      003836 7Es02            [12]10002 	mov	r6,#(___str_37 >> 8)
      003838 7F 80            [12]10003 	mov	r7,#0x80
                                  10004 ;	calc.c:58: return;
      00383A                      10005 00212$:
                                  10006 ;	calc.c:56: for (; *s; s++) putchar(*s);
      00383A 8D 82            [24]10007 	mov	dpl,r5
      00383C 8E 83            [24]10008 	mov	dph,r6
      00383E 8F F0            [24]10009 	mov	b,r7
      003840 12r00r00         [24]10010 	lcall	__gptrget
      003843 FC               [12]10011 	mov	r4,a
      003844 60 10            [24]10012 	jz	00134$
      003846 7B 00            [12]10013 	mov	r3,#0x00
      003848 8C 82            [24]10014 	mov	dpl,r4
      00384A 8B 83            [24]10015 	mov	dph,r3
      00384C 12r00r00         [24]10016 	lcall	_putchar
      00384F 0D               [12]10017 	inc	r5
                                  10018 ;	calc.c:448: printstr("*\tmultiply top 2\r\n");
      003850 BD 00 E7         [24]10019 	cjne	r5,#0x00,00212$
      003853 0E               [12]10020 	inc	r6
      003854 80 E4            [24]10021 	sjmp	00212$
      003856                      10022 00134$:
                                  10023 ;	calc.c:449: printstr("/\tdivide top 2\r\n");
      003856 7DrAA            [12]10024 	mov	r5,#___str_38
      003858 7Es02            [12]10025 	mov	r6,#(___str_38 >> 8)
      00385A 7F 80            [12]10026 	mov	r7,#0x80
                                  10027 ;	calc.c:58: return;
      00385C                      10028 00215$:
                                  10029 ;	calc.c:56: for (; *s; s++) putchar(*s);
      00385C 8D 82            [24]10030 	mov	dpl,r5
      00385E 8E 83            [24]10031 	mov	dph,r6
      003860 8F F0            [24]10032 	mov	b,r7
      003862 12r00r00         [24]10033 	lcall	__gptrget
      003865 FC               [12]10034 	mov	r4,a
      003866 60 10            [24]10035 	jz	00136$
      003868 7B 00            [12]10036 	mov	r3,#0x00
      00386A 8C 82            [24]10037 	mov	dpl,r4
      00386C 8B 83            [24]10038 	mov	dph,r3
      00386E 12r00r00         [24]10039 	lcall	_putchar
      003871 0D               [12]10040 	inc	r5
                                  10041 ;	calc.c:449: printstr("/\tdivide top 2\r\n");
      003872 BD 00 E7         [24]10042 	cjne	r5,#0x00,00215$
      003875 0E               [12]10043 	inc	r6
      003876 80 E4            [24]10044 	sjmp	00215$
      003878                      10045 00136$:
                                  10046 ;	calc.c:450: printstr("\\\tdivide top 2 unsigned\r\n");	
      003878 7DrBB            [12]10047 	mov	r5,#___str_39
      00387A 7Es02            [12]10048 	mov	r6,#(___str_39 >> 8)
      00387C 7F 80            [12]10049 	mov	r7,#0x80
                                  10050 ;	calc.c:58: return;
      00387E                      10051 00218$:
                                  10052 ;	calc.c:56: for (; *s; s++) putchar(*s);
      00387E 8D 82            [24]10053 	mov	dpl,r5
      003880 8E 83            [24]10054 	mov	dph,r6
      003882 8F F0            [24]10055 	mov	b,r7
      003884 12r00r00         [24]10056 	lcall	__gptrget
      003887 FC               [12]10057 	mov	r4,a
      003888 60 10            [24]10058 	jz	00138$
      00388A 7B 00            [12]10059 	mov	r3,#0x00
      00388C 8C 82            [24]10060 	mov	dpl,r4
      00388E 8B 83            [24]10061 	mov	dph,r3
      003890 12r00r00         [24]10062 	lcall	_putchar
      003893 0D               [12]10063 	inc	r5
                                  10064 ;	calc.c:450: printstr("\\\tdivide top 2 unsigned\r\n");	
      003894 BD 00 E7         [24]10065 	cjne	r5,#0x00,00218$
      003897 0E               [12]10066 	inc	r6
      003898 80 E4            [24]10067 	sjmp	00218$
      00389A                      10068 00138$:
                                  10069 ;	calc.c:451: printstr("%\tmodulus top 2\r\n");
      00389A 7DrD5            [12]10070 	mov	r5,#___str_40
      00389C 7Es02            [12]10071 	mov	r6,#(___str_40 >> 8)
      00389E 7F 80            [12]10072 	mov	r7,#0x80
                                  10073 ;	calc.c:58: return;
      0038A0                      10074 00221$:
                                  10075 ;	calc.c:56: for (; *s; s++) putchar(*s);
      0038A0 8D 82            [24]10076 	mov	dpl,r5
      0038A2 8E 83            [24]10077 	mov	dph,r6
      0038A4 8F F0            [24]10078 	mov	b,r7
      0038A6 12r00r00         [24]10079 	lcall	__gptrget
      0038A9 FC               [12]10080 	mov	r4,a
      0038AA 60 10            [24]10081 	jz	00140$
      0038AC 7B 00            [12]10082 	mov	r3,#0x00
      0038AE 8C 82            [24]10083 	mov	dpl,r4
      0038B0 8B 83            [24]10084 	mov	dph,r3
      0038B2 12r00r00         [24]10085 	lcall	_putchar
      0038B5 0D               [12]10086 	inc	r5
                                  10087 ;	calc.c:451: printstr("%\tmodulus top 2\r\n");
      0038B6 BD 00 E7         [24]10088 	cjne	r5,#0x00,00221$
      0038B9 0E               [12]10089 	inc	r6
      0038BA 80 E4            [24]10090 	sjmp	00221$
      0038BC                      10091 00140$:
                                  10092 ;	calc.c:452: printstr("#\tmodulus top 2 unsigned\r\n");
      0038BC 7DrE7            [12]10093 	mov	r5,#___str_41
      0038BE 7Es02            [12]10094 	mov	r6,#(___str_41 >> 8)
      0038C0 7F 80            [12]10095 	mov	r7,#0x80
                                  10096 ;	calc.c:58: return;
      0038C2                      10097 00224$:
                                  10098 ;	calc.c:56: for (; *s; s++) putchar(*s);
      0038C2 8D 82            [24]10099 	mov	dpl,r5
      0038C4 8E 83            [24]10100 	mov	dph,r6
      0038C6 8F F0            [24]10101 	mov	b,r7
      0038C8 12r00r00         [24]10102 	lcall	__gptrget
      0038CB FC               [12]10103 	mov	r4,a
      0038CC 60 10            [24]10104 	jz	00142$
      0038CE 7B 00            [12]10105 	mov	r3,#0x00
      0038D0 8C 82            [24]10106 	mov	dpl,r4
      0038D2 8B 83            [24]10107 	mov	dph,r3
      0038D4 12r00r00         [24]10108 	lcall	_putchar
      0038D7 0D               [12]10109 	inc	r5
                                  10110 ;	calc.c:452: printstr("#\tmodulus top 2 unsigned\r\n");
      0038D8 BD 00 E7         [24]10111 	cjne	r5,#0x00,00224$
      0038DB 0E               [12]10112 	inc	r6
      0038DC 80 E4            [24]10113 	sjmp	00224$
      0038DE                      10114 00142$:
                                  10115 ;	calc.c:453: printstr("&\tand top 2\r\n");
      0038DE 7Dr02            [12]10116 	mov	r5,#___str_42
      0038E0 7Es03            [12]10117 	mov	r6,#(___str_42 >> 8)
      0038E2 7F 80            [12]10118 	mov	r7,#0x80
                                  10119 ;	calc.c:58: return;
      0038E4                      10120 00227$:
                                  10121 ;	calc.c:56: for (; *s; s++) putchar(*s);
      0038E4 8D 82            [24]10122 	mov	dpl,r5
      0038E6 8E 83            [24]10123 	mov	dph,r6
      0038E8 8F F0            [24]10124 	mov	b,r7
      0038EA 12r00r00         [24]10125 	lcall	__gptrget
      0038ED FC               [12]10126 	mov	r4,a
      0038EE 60 10            [24]10127 	jz	00144$
      0038F0 7B 00            [12]10128 	mov	r3,#0x00
      0038F2 8C 82            [24]10129 	mov	dpl,r4
      0038F4 8B 83            [24]10130 	mov	dph,r3
      0038F6 12r00r00         [24]10131 	lcall	_putchar
      0038F9 0D               [12]10132 	inc	r5
                                  10133 ;	calc.c:453: printstr("&\tand top 2\r\n");
      0038FA BD 00 E7         [24]10134 	cjne	r5,#0x00,00227$
      0038FD 0E               [12]10135 	inc	r6
      0038FE 80 E4            [24]10136 	sjmp	00227$
      003900                      10137 00144$:
                                  10138 ;	calc.c:454: printstr("|\tor top 2\r\n");
      003900 7Dr10            [12]10139 	mov	r5,#___str_43
      003902 7Es03            [12]10140 	mov	r6,#(___str_43 >> 8)
      003904 7F 80            [12]10141 	mov	r7,#0x80
                                  10142 ;	calc.c:58: return;
      003906                      10143 00230$:
                                  10144 ;	calc.c:56: for (; *s; s++) putchar(*s);
      003906 8D 82            [24]10145 	mov	dpl,r5
      003908 8E 83            [24]10146 	mov	dph,r6
      00390A 8F F0            [24]10147 	mov	b,r7
      00390C 12r00r00         [24]10148 	lcall	__gptrget
      00390F FC               [12]10149 	mov	r4,a
      003910 60 10            [24]10150 	jz	00146$
      003912 7B 00            [12]10151 	mov	r3,#0x00
      003914 8C 82            [24]10152 	mov	dpl,r4
      003916 8B 83            [24]10153 	mov	dph,r3
      003918 12r00r00         [24]10154 	lcall	_putchar
      00391B 0D               [12]10155 	inc	r5
                                  10156 ;	calc.c:454: printstr("|\tor top 2\r\n");
      00391C BD 00 E7         [24]10157 	cjne	r5,#0x00,00230$
      00391F 0E               [12]10158 	inc	r6
      003920 80 E4            [24]10159 	sjmp	00230$
      003922                      10160 00146$:
                                  10161 ;	calc.c:455: printstr("^\txor top 2\r\n");
      003922 7Dr1D            [12]10162 	mov	r5,#___str_44
      003924 7Es03            [12]10163 	mov	r6,#(___str_44 >> 8)
      003926 7F 80            [12]10164 	mov	r7,#0x80
                                  10165 ;	calc.c:58: return;
      003928                      10166 00233$:
                                  10167 ;	calc.c:56: for (; *s; s++) putchar(*s);
      003928 8D 82            [24]10168 	mov	dpl,r5
      00392A 8E 83            [24]10169 	mov	dph,r6
      00392C 8F F0            [24]10170 	mov	b,r7
      00392E 12r00r00         [24]10171 	lcall	__gptrget
      003931 FC               [12]10172 	mov	r4,a
      003932 60 10            [24]10173 	jz	00148$
      003934 7B 00            [12]10174 	mov	r3,#0x00
      003936 8C 82            [24]10175 	mov	dpl,r4
      003938 8B 83            [24]10176 	mov	dph,r3
      00393A 12r00r00         [24]10177 	lcall	_putchar
      00393D 0D               [12]10178 	inc	r5
                                  10179 ;	calc.c:455: printstr("^\txor top 2\r\n");
      00393E BD 00 E7         [24]10180 	cjne	r5,#0x00,00233$
      003941 0E               [12]10181 	inc	r6
      003942 80 E4            [24]10182 	sjmp	00233$
      003944                      10183 00148$:
                                  10184 ;	calc.c:456: printstr(">\tshift right top 2\r\n");
      003944 7Dr2B            [12]10185 	mov	r5,#___str_45
      003946 7Es03            [12]10186 	mov	r6,#(___str_45 >> 8)
      003948 7F 80            [12]10187 	mov	r7,#0x80
                                  10188 ;	calc.c:58: return;
      00394A                      10189 00236$:
                                  10190 ;	calc.c:56: for (; *s; s++) putchar(*s);
      00394A 8D 82            [24]10191 	mov	dpl,r5
      00394C 8E 83            [24]10192 	mov	dph,r6
      00394E 8F F0            [24]10193 	mov	b,r7
      003950 12r00r00         [24]10194 	lcall	__gptrget
      003953 FC               [12]10195 	mov	r4,a
      003954 60 10            [24]10196 	jz	00150$
      003956 7B 00            [12]10197 	mov	r3,#0x00
      003958 8C 82            [24]10198 	mov	dpl,r4
      00395A 8B 83            [24]10199 	mov	dph,r3
      00395C 12r00r00         [24]10200 	lcall	_putchar
      00395F 0D               [12]10201 	inc	r5
                                  10202 ;	calc.c:456: printstr(">\tshift right top 2\r\n");
      003960 BD 00 E7         [24]10203 	cjne	r5,#0x00,00236$
      003963 0E               [12]10204 	inc	r6
      003964 80 E4            [24]10205 	sjmp	00236$
      003966                      10206 00150$:
                                  10207 ;	calc.c:457: printstr("]\tarithmetic shift right top 2\r\n");
      003966 7Dr41            [12]10208 	mov	r5,#___str_46
      003968 7Es03            [12]10209 	mov	r6,#(___str_46 >> 8)
      00396A 7F 80            [12]10210 	mov	r7,#0x80
                                  10211 ;	calc.c:58: return;
      00396C                      10212 00239$:
                                  10213 ;	calc.c:56: for (; *s; s++) putchar(*s);
      00396C 8D 82            [24]10214 	mov	dpl,r5
      00396E 8E 83            [24]10215 	mov	dph,r6
      003970 8F F0            [24]10216 	mov	b,r7
      003972 12r00r00         [24]10217 	lcall	__gptrget
      003975 FC               [12]10218 	mov	r4,a
      003976 60 10            [24]10219 	jz	00152$
      003978 7B 00            [12]10220 	mov	r3,#0x00
      00397A 8C 82            [24]10221 	mov	dpl,r4
      00397C 8B 83            [24]10222 	mov	dph,r3
      00397E 12r00r00         [24]10223 	lcall	_putchar
      003981 0D               [12]10224 	inc	r5
                                  10225 ;	calc.c:457: printstr("]\tarithmetic shift right top 2\r\n");
      003982 BD 00 E7         [24]10226 	cjne	r5,#0x00,00239$
      003985 0E               [12]10227 	inc	r6
      003986 80 E4            [24]10228 	sjmp	00239$
      003988                      10229 00152$:
                                  10230 ;	calc.c:458: printstr("<\tshift left top 2\r\n");
      003988 7Dr62            [12]10231 	mov	r5,#___str_47
      00398A 7Es03            [12]10232 	mov	r6,#(___str_47 >> 8)
      00398C 7F 80            [12]10233 	mov	r7,#0x80
                                  10234 ;	calc.c:58: return;
      00398E                      10235 00242$:
                                  10236 ;	calc.c:56: for (; *s; s++) putchar(*s);
      00398E 8D 82            [24]10237 	mov	dpl,r5
      003990 8E 83            [24]10238 	mov	dph,r6
      003992 8F F0            [24]10239 	mov	b,r7
      003994 12r00r00         [24]10240 	lcall	__gptrget
      003997 FC               [12]10241 	mov	r4,a
      003998 60 10            [24]10242 	jz	00154$
      00399A 7B 00            [12]10243 	mov	r3,#0x00
      00399C 8C 82            [24]10244 	mov	dpl,r4
      00399E 8B 83            [24]10245 	mov	dph,r3
      0039A0 12r00r00         [24]10246 	lcall	_putchar
      0039A3 0D               [12]10247 	inc	r5
                                  10248 ;	calc.c:458: printstr("<\tshift left top 2\r\n");
      0039A4 BD 00 E7         [24]10249 	cjne	r5,#0x00,00242$
      0039A7 0E               [12]10250 	inc	r6
      0039A8 80 E4            [24]10251 	sjmp	00242$
      0039AA                      10252 00154$:
                                  10253 ;	calc.c:459: printstr("~\tbitwise not top\r\n");
      0039AA 7Dr77            [12]10254 	mov	r5,#___str_48
      0039AC 7Es03            [12]10255 	mov	r6,#(___str_48 >> 8)
      0039AE 7F 80            [12]10256 	mov	r7,#0x80
                                  10257 ;	calc.c:58: return;
      0039B0                      10258 00245$:
                                  10259 ;	calc.c:56: for (; *s; s++) putchar(*s);
      0039B0 8D 82            [24]10260 	mov	dpl,r5
      0039B2 8E 83            [24]10261 	mov	dph,r6
      0039B4 8F F0            [24]10262 	mov	b,r7
      0039B6 12r00r00         [24]10263 	lcall	__gptrget
      0039B9 FC               [12]10264 	mov	r4,a
      0039BA 60 10            [24]10265 	jz	00156$
      0039BC 7B 00            [12]10266 	mov	r3,#0x00
      0039BE 8C 82            [24]10267 	mov	dpl,r4
      0039C0 8B 83            [24]10268 	mov	dph,r3
      0039C2 12r00r00         [24]10269 	lcall	_putchar
      0039C5 0D               [12]10270 	inc	r5
                                  10271 ;	calc.c:459: printstr("~\tbitwise not top\r\n");
      0039C6 BD 00 E7         [24]10272 	cjne	r5,#0x00,00245$
      0039C9 0E               [12]10273 	inc	r6
      0039CA 80 E4            [24]10274 	sjmp	00245$
      0039CC                      10275 00156$:
                                  10276 ;	calc.c:460: printstr("s\tstatus\r\n");
      0039CC 7Dr8B            [12]10277 	mov	r5,#___str_49
      0039CE 7Es03            [12]10278 	mov	r6,#(___str_49 >> 8)
      0039D0 7F 80            [12]10279 	mov	r7,#0x80
                                  10280 ;	calc.c:58: return;
      0039D2                      10281 00248$:
                                  10282 ;	calc.c:56: for (; *s; s++) putchar(*s);
      0039D2 8D 82            [24]10283 	mov	dpl,r5
      0039D4 8E 83            [24]10284 	mov	dph,r6
      0039D6 8F F0            [24]10285 	mov	b,r7
      0039D8 12r00r00         [24]10286 	lcall	__gptrget
      0039DB FC               [12]10287 	mov	r4,a
      0039DC 60 10            [24]10288 	jz	00158$
      0039DE 7B 00            [12]10289 	mov	r3,#0x00
      0039E0 8C 82            [24]10290 	mov	dpl,r4
      0039E2 8B 83            [24]10291 	mov	dph,r3
      0039E4 12r00r00         [24]10292 	lcall	_putchar
      0039E7 0D               [12]10293 	inc	r5
                                  10294 ;	calc.c:460: printstr("s\tstatus\r\n");
      0039E8 BD 00 E7         [24]10295 	cjne	r5,#0x00,00248$
      0039EB 0E               [12]10296 	inc	r6
      0039EC 80 E4            [24]10297 	sjmp	00248$
      0039EE                      10298 00158$:
                                  10299 ;	calc.c:461: printstr("?\thelp\r\n");
      0039EE 7Dr96            [12]10300 	mov	r5,#___str_50
      0039F0 7Es03            [12]10301 	mov	r6,#(___str_50 >> 8)
      0039F2 7F 80            [12]10302 	mov	r7,#0x80
                                  10303 ;	calc.c:58: return;
      0039F4                      10304 00251$:
                                  10305 ;	calc.c:56: for (; *s; s++) putchar(*s);
      0039F4 8D 82            [24]10306 	mov	dpl,r5
      0039F6 8E 83            [24]10307 	mov	dph,r6
      0039F8 8F F0            [24]10308 	mov	b,r7
      0039FA 12r00r00         [24]10309 	lcall	__gptrget
      0039FD FC               [12]10310 	mov	r4,a
      0039FE 60 10            [24]10311 	jz	00160$
      003A00 7B 00            [12]10312 	mov	r3,#0x00
      003A02 8C 82            [24]10313 	mov	dpl,r4
      003A04 8B 83            [24]10314 	mov	dph,r3
      003A06 12r00r00         [24]10315 	lcall	_putchar
      003A09 0D               [12]10316 	inc	r5
                                  10317 ;	calc.c:461: printstr("?\thelp\r\n");
      003A0A BD 00 E7         [24]10318 	cjne	r5,#0x00,00251$
      003A0D 0E               [12]10319 	inc	r6
      003A0E 80 E4            [24]10320 	sjmp	00251$
      003A10                      10321 00160$:
                                  10322 ;	calc.c:462: printstr("q\tquit\r\n");
      003A10 7Dr9F            [12]10323 	mov	r5,#___str_51
      003A12 7Es03            [12]10324 	mov	r6,#(___str_51 >> 8)
      003A14 7F 80            [12]10325 	mov	r7,#0x80
                                  10326 ;	calc.c:58: return;
      003A16                      10327 00254$:
                                  10328 ;	calc.c:56: for (; *s; s++) putchar(*s);
      003A16 8D 82            [24]10329 	mov	dpl,r5
      003A18 8E 83            [24]10330 	mov	dph,r6
      003A1A 8F F0            [24]10331 	mov	b,r7
      003A1C 12r00r00         [24]10332 	lcall	__gptrget
      003A1F FC               [12]10333 	mov	r4,a
      003A20 60 10            [24]10334 	jz	00162$
      003A22 7B 00            [12]10335 	mov	r3,#0x00
      003A24 8C 82            [24]10336 	mov	dpl,r4
      003A26 8B 83            [24]10337 	mov	dph,r3
      003A28 12r00r00         [24]10338 	lcall	_putchar
      003A2B 0D               [12]10339 	inc	r5
                                  10340 ;	calc.c:462: printstr("q\tquit\r\n");
      003A2C BD 00 E7         [24]10341 	cjne	r5,#0x00,00254$
      003A2F 0E               [12]10342 	inc	r6
      003A30 80 E4            [24]10343 	sjmp	00254$
      003A32                      10344 00162$:
                                  10345 ;	calc.c:464: return 1;
      003A32 90 00 01         [24]10346 	mov	dptr,#0x0001
                                  10347 ;	calc.c:465: }
      003A35 D0*00            [24]10348 	pop	_bp
      003A37 22               [24]10349 	ret
                                  10350 ;------------------------------------------------------------
                                  10351 ;Allocation info for local variables in function 'main'
                                  10352 ;------------------------------------------------------------
                                  10353 ;input                     Allocated to registers r6 r7 
                                  10354 ;__1966080213              Allocated to registers 
                                  10355 ;s                         Allocated to registers r2 r3 r4 
                                  10356 ;__1310720215              Allocated to registers 
                                  10357 ;s                         Allocated to registers r5 r6 r7 
                                  10358 ;sloc0                     Allocated to stack - _bp +1
                                  10359 ;------------------------------------------------------------
                                  10360 ;	calc.c:495: void main(void) {
                                  10361 ;	-----------------------------------------
                                  10362 ;	 function main
                                  10363 ;	-----------------------------------------
      003A38                      10364 _main:
      003A38 C0*00            [24]10365 	push	_bp
      003A3A 85 81*00         [24]10366 	mov	_bp,sp
      003A3D 05 81            [12]10367 	inc	sp
                                  10368 ;	calc.c:498: giant = 0;
      003A3F 78r00            [12]10369 	mov	r0,#_giant
      003A41 76 00            [12]10370 	mov	@r0,#0x00
                                  10371 ;	calc.c:500: c.base = 10;
      003A43 90r00r0C         [24]10372 	mov	dptr,#_c
      003A46 74 0A            [12]10373 	mov	a,#0x0a
      003A48 F0               [24]10374 	movx	@dptr,a
      003A49 E4               [12]10375 	clr	a
      003A4A A3               [24]10376 	inc	dptr
      003A4B F0               [24]10377 	movx	@dptr,a
                                  10378 ;	calc.c:501: c.acc = 0l;
      003A4C 90r00r0E         [24]10379 	mov	dptr,#(_c + 0x0002)
      003A4F F0               [24]10380 	movx	@dptr,a
      003A50 A3               [24]10381 	inc	dptr
      003A51 F0               [24]10382 	movx	@dptr,a
      003A52 A3               [24]10383 	inc	dptr
      003A53 F0               [24]10384 	movx	@dptr,a
      003A54 A3               [24]10385 	inc	dptr
      003A55 F0               [24]10386 	movx	@dptr,a
                                  10387 ;	calc.c:502: c.acc_valid = (char)0;
      003A56 90r00r12         [24]10388 	mov	dptr,#(_c + 0x0006)
      003A59 F0               [24]10389 	movx	@dptr,a
                                  10390 ;	calc.c:503: c.digit[0] = c.digit[1] = '\0';
      003A5A 90r00r14         [24]10391 	mov	dptr,#(_c + 0x0008)
      003A5D F0               [24]10392 	movx	@dptr,a
      003A5E 90r00r13         [24]10393 	mov	dptr,#(_c + 0x0007)
      003A61 F0               [24]10394 	movx	@dptr,a
                                  10395 ;	calc.c:505: c.ps = &c.s0;
      003A62 90r40r1D         [24]10396 	mov	dptr,#(_c + 0x4011)
      003A65 74r15            [12]10397 	mov	a,#(_c + 0x0009)
      003A67 F0               [24]10398 	movx	@dptr,a
      003A68 74s00            [12]10399 	mov	a,#((_c + 0x0009) >> 8)
      003A6A A3               [24]10400 	inc	dptr
      003A6B F0               [24]10401 	movx	@dptr,a
      003A6C E4               [12]10402 	clr	a
      003A6D A3               [24]10403 	inc	dptr
      003A6E F0               [24]10404 	movx	@dptr,a
                                  10405 ;	calc.c:506: c.ss = &c.s1;
      003A6F 90r40r20         [24]10406 	mov	dptr,#(_c + 0x4014)
      003A72 74r19            [12]10407 	mov	a,#(_c + 0x200d)
      003A74 F0               [24]10408 	movx	@dptr,a
      003A75 74s20            [12]10409 	mov	a,#((_c + 0x200d) >> 8)
      003A77 A3               [24]10410 	inc	dptr
      003A78 F0               [24]10411 	movx	@dptr,a
      003A79 E4               [12]10412 	clr	a
      003A7A A3               [24]10413 	inc	dptr
      003A7B F0               [24]10414 	movx	@dptr,a
                                  10415 ;	calc.c:507: stack_init(c.ps);
      003A7C 90r00r15         [24]10416 	mov	dptr,#(_c + 0x0009)
      003A7F 75 F0 00         [24]10417 	mov	b,#0x00
      003A82 12r00r00         [24]10418 	lcall	_stack_init
                                  10419 ;	calc.c:508: stack_init(c.ss);
      003A85 90r40r20         [24]10420 	mov	dptr,#(_c + 0x4014)
      003A88 E0               [24]10421 	movx	a,@dptr
      003A89 FD               [12]10422 	mov	r5,a
      003A8A A3               [24]10423 	inc	dptr
      003A8B E0               [24]10424 	movx	a,@dptr
      003A8C FE               [12]10425 	mov	r6,a
      003A8D A3               [24]10426 	inc	dptr
      003A8E E0               [24]10427 	movx	a,@dptr
      003A8F FF               [12]10428 	mov	r7,a
      003A90 8D 82            [24]10429 	mov	dpl,r5
      003A92 8E 83            [24]10430 	mov	dph,r6
      003A94 8F F0            [24]10431 	mov	b,r7
      003A96 12r00r00         [24]10432 	lcall	_stack_init
                                  10433 ;	calc.c:510: state_init(&s, STATE_START, STATE_FINAL, UNDEF, deltas, &c);
      003A99 74r0C            [12]10434 	mov	a,#_c
      003A9B C0 E0            [24]10435 	push	acc
      003A9D 74s00            [12]10436 	mov	a,#(_c >> 8)
      003A9F C0 E0            [24]10437 	push	acc
      003AA1 E4               [12]10438 	clr	a
      003AA2 C0 E0            [24]10439 	push	acc
      003AA4 74r00            [12]10440 	mov	a,#_deltas
      003AA6 C0 E0            [24]10441 	push	acc
      003AA8 74s00            [12]10442 	mov	a,#(_deltas >> 8)
      003AAA C0 E0            [24]10443 	push	acc
      003AAC E4               [12]10444 	clr	a
      003AAD C0 E0            [24]10445 	push	acc
      003AAF C0 E0            [24]10446 	push	acc
      003AB1 74 80            [12]10447 	mov	a,#0x80
      003AB3 C0 E0            [24]10448 	push	acc
      003AB5 74 03            [12]10449 	mov	a,#0x03
      003AB7 C0 E0            [24]10450 	push	acc
      003AB9 E4               [12]10451 	clr	a
      003ABA C0 E0            [24]10452 	push	acc
      003ABC C0 E0            [24]10453 	push	acc
      003ABE C0 E0            [24]10454 	push	acc
      003AC0 90r00r00         [24]10455 	mov	dptr,#_s
      003AC3 75 F0 00         [24]10456 	mov	b,#0x00
      003AC6 12r00r00         [24]10457 	lcall	_state_init
      003AC9 E5 81            [12]10458 	mov	a,sp
      003ACB 24 F4            [12]10459 	add	a,#0xf4
      003ACD F5 81            [12]10460 	mov	sp,a
                                  10461 ;	calc.c:512: (void)status(&c, deltas);
      003ACF 74r00            [12]10462 	mov	a,#_deltas
      003AD1 C0 E0            [24]10463 	push	acc
      003AD3 74s00            [12]10464 	mov	a,#(_deltas >> 8)
      003AD5 C0 E0            [24]10465 	push	acc
      003AD7 E4               [12]10466 	clr	a
      003AD8 C0 E0            [24]10467 	push	acc
      003ADA 90r00r0C         [24]10468 	mov	dptr,#_c
      003ADD 75 F0 00         [24]10469 	mov	b,#0x00
      003AE0 12r2DrB0         [24]10470 	lcall	_status
      003AE3 15 81            [12]10471 	dec	sp
      003AE5 15 81            [12]10472 	dec	sp
      003AE7 15 81            [12]10473 	dec	sp
                                  10474 ;	calc.c:514: while (1) {
      003AE9                      10475 00192$:
                                  10476 ;	calc.c:515: input = getchar();
      003AE9 12r00r09         [24]10477 	lcall	_getchar
      003AEC AE 82            [24]10478 	mov	r6,dpl
      003AEE AF 83            [24]10479 	mov	r7,dph
                                  10480 ;	calc.c:516: if (((char)input == '\r') || ((char)input == '\n')) printstr("\r\n");
      003AF0 8E 05            [24]10481 	mov	ar5,r6
      003AF2 BD 0D 02         [24]10482 	cjne	r5,#0x0d,00400$
      003AF5 80 03            [24]10483 	sjmp	00101$
      003AF7                      10484 00400$:
      003AF7 BD 0A 36         [24]10485 	cjne	r5,#0x0a,00102$
      003AFA                      10486 00101$:
      003AFA 7Ar17            [12]10487 	mov	r2,#___str_3
      003AFC 7Bs00            [12]10488 	mov	r3,#(___str_3 >> 8)
      003AFE 7C 80            [12]10489 	mov	r4,#0x80
                                  10490 ;	calc.c:58: return;
      003B00                      10491 00199$:
                                  10492 ;	calc.c:56: for (; *s; s++) putchar(*s);
      003B00 8A 82            [24]10493 	mov	dpl,r2
      003B02 8B 83            [24]10494 	mov	dph,r3
      003B04 8C F0            [24]10495 	mov	b,r4
      003B06 A8*00            [24]10496 	mov	r0,_bp
      003B08 08               [12]10497 	inc	r0
      003B09 12r00r00         [24]10498 	lcall	__gptrget
      003B0C F6               [12]10499 	mov	@r0,a
      003B0D A8*00            [24]10500 	mov	r0,_bp
      003B0F 08               [12]10501 	inc	r0
      003B10 E6               [12]10502 	mov	a,@r0
      003B11 60 24            [24]10503 	jz	00103$
      003B13 C0 06            [24]10504 	push	ar6
      003B15 C0 07            [24]10505 	push	ar7
      003B17 A8*00            [24]10506 	mov	r0,_bp
      003B19 08               [12]10507 	inc	r0
      003B1A 86 06            [24]10508 	mov	ar6,@r0
      003B1C 7F 00            [12]10509 	mov	r7,#0x00
      003B1E 8E 82            [24]10510 	mov	dpl,r6
      003B20 8F 83            [24]10511 	mov	dph,r7
      003B22 12r00r00         [24]10512 	lcall	_putchar
      003B25 0A               [12]10513 	inc	r2
      003B26 BA 00 01         [24]10514 	cjne	r2,#0x00,00404$
      003B29 0B               [12]10515 	inc	r3
      003B2A                      10516 00404$:
      003B2A D0 07            [24]10517 	pop	ar7
      003B2C D0 06            [24]10518 	pop	ar6
                                  10519 ;	calc.c:516: if (((char)input == '\r') || ((char)input == '\n')) printstr("\r\n");
      003B2E 80 D0            [24]10520 	sjmp	00199$
      003B30                      10521 00102$:
                                  10522 ;	calc.c:517: else (void)putchar(input);
      003B30 8E 82            [24]10523 	mov	dpl,r6
      003B32 8F 83            [24]10524 	mov	dph,r7
      003B34 12r00r00         [24]10525 	lcall	_putchar
      003B37                      10526 00103$:
                                  10527 ;	calc.c:518: c.digit[0] = (char)input;
      003B37 90r00r13         [24]10528 	mov	dptr,#(_c + 0x0007)
      003B3A ED               [12]10529 	mov	a,r5
      003B3B F0               [24]10530 	movx	@dptr,a
                                  10531 ;	calc.c:520: if ((char)input == 'q') {
      003B3C BD 71 29         [24]10532 	cjne	r5,#0x71,00189$
                                  10533 ;	calc.c:521: if (state_exec(&s, EVENT_TERM) <= 0) break;
      003B3F 74 08            [12]10534 	mov	a,#0x08
      003B41 C0 E0            [24]10535 	push	acc
      003B43 E4               [12]10536 	clr	a
      003B44 C0 E0            [24]10537 	push	acc
      003B46 90r00r00         [24]10538 	mov	dptr,#_s
      003B49 75 F0 00         [24]10539 	mov	b,#0x00
      003B4C 12r00r00         [24]10540 	lcall	_state_exec
      003B4F AB 82            [24]10541 	mov	r3,dpl
      003B51 AC 83            [24]10542 	mov	r4,dph
      003B53 15 81            [12]10543 	dec	sp
      003B55 15 81            [12]10544 	dec	sp
      003B57 C3               [12]10545 	clr	c
      003B58 E4               [12]10546 	clr	a
      003B59 9B               [12]10547 	subb	a,r3
      003B5A 74 80            [12]10548 	mov	a,#(0x00 ^ 0x80)
      003B5C 8C F0            [24]10549 	mov	b,r4
      003B5E 63 F0 80         [24]10550 	xrl	b,#0x80
      003B61 95 F0            [12]10551 	subb	a,b
      003B63 40 84            [24]10552 	jc	00192$
      003B65 02r3Er17         [24]10553 	ljmp	00193$
      003B68                      10554 00189$:
                                  10555 ;	calc.c:522: } else if ((char)input == 's') {
      003B68 BD 73 2C         [24]10556 	cjne	r5,#0x73,00186$
                                  10557 ;	calc.c:523: if (state_exec(&s, EVENT_STATUS) <= 0) break;
      003B6B 74 03            [12]10558 	mov	a,#0x03
      003B6D C0 E0            [24]10559 	push	acc
      003B6F E4               [12]10560 	clr	a
      003B70 C0 E0            [24]10561 	push	acc
      003B72 90r00r00         [24]10562 	mov	dptr,#_s
      003B75 75 F0 00         [24]10563 	mov	b,#0x00
      003B78 12r00r00         [24]10564 	lcall	_state_exec
      003B7B AB 82            [24]10565 	mov	r3,dpl
      003B7D AC 83            [24]10566 	mov	r4,dph
      003B7F 15 81            [12]10567 	dec	sp
      003B81 15 81            [12]10568 	dec	sp
      003B83 C3               [12]10569 	clr	c
      003B84 E4               [12]10570 	clr	a
      003B85 9B               [12]10571 	subb	a,r3
      003B86 74 80            [12]10572 	mov	a,#(0x00 ^ 0x80)
      003B88 8C F0            [24]10573 	mov	b,r4
      003B8A 63 F0 80         [24]10574 	xrl	b,#0x80
      003B8D 95 F0            [12]10575 	subb	a,b
      003B8F 50 03            [24]10576 	jnc	00410$
      003B91 02r3ArE9         [24]10577 	ljmp	00192$
      003B94                      10578 00410$:
      003B94 02r3Er17         [24]10579 	ljmp	00193$
      003B97                      10580 00186$:
                                  10581 ;	calc.c:524: } else if ((char)input == '?') {
      003B97 BD 3F 2C         [24]10582 	cjne	r5,#0x3f,00183$
                                  10583 ;	calc.c:525: if (state_exec(&s, EVENT_HELP) <= 0) break;
      003B9A 74 04            [12]10584 	mov	a,#0x04
      003B9C C0 E0            [24]10585 	push	acc
      003B9E E4               [12]10586 	clr	a
      003B9F C0 E0            [24]10587 	push	acc
      003BA1 90r00r00         [24]10588 	mov	dptr,#_s
      003BA4 75 F0 00         [24]10589 	mov	b,#0x00
      003BA7 12r00r00         [24]10590 	lcall	_state_exec
      003BAA AB 82            [24]10591 	mov	r3,dpl
      003BAC AC 83            [24]10592 	mov	r4,dph
      003BAE 15 81            [12]10593 	dec	sp
      003BB0 15 81            [12]10594 	dec	sp
      003BB2 C3               [12]10595 	clr	c
      003BB3 E4               [12]10596 	clr	a
      003BB4 9B               [12]10597 	subb	a,r3
      003BB5 74 80            [12]10598 	mov	a,#(0x00 ^ 0x80)
      003BB7 8C F0            [24]10599 	mov	b,r4
      003BB9 63 F0 80         [24]10600 	xrl	b,#0x80
      003BBC 95 F0            [12]10601 	subb	a,b
      003BBE 50 03            [24]10602 	jnc	00413$
      003BC0 02r3ArE9         [24]10603 	ljmp	00192$
      003BC3                      10604 00413$:
      003BC3 02r3Er17         [24]10605 	ljmp	00193$
      003BC6                      10606 00183$:
                                  10607 ;	calc.c:526: } else if ((char)input == 'i') {
      003BC6 BD 69 2C         [24]10608 	cjne	r5,#0x69,00180$
                                  10609 ;	calc.c:527: if (state_exec(&s, EVENT_RSTA_i) <= 0) break;
      003BC9 74 06            [12]10610 	mov	a,#0x06
      003BCB C0 E0            [24]10611 	push	acc
      003BCD E4               [12]10612 	clr	a
      003BCE C0 E0            [24]10613 	push	acc
      003BD0 90r00r00         [24]10614 	mov	dptr,#_s
      003BD3 75 F0 00         [24]10615 	mov	b,#0x00
      003BD6 12r00r00         [24]10616 	lcall	_state_exec
      003BD9 AB 82            [24]10617 	mov	r3,dpl
      003BDB AC 83            [24]10618 	mov	r4,dph
      003BDD 15 81            [12]10619 	dec	sp
      003BDF 15 81            [12]10620 	dec	sp
      003BE1 C3               [12]10621 	clr	c
      003BE2 E4               [12]10622 	clr	a
      003BE3 9B               [12]10623 	subb	a,r3
      003BE4 74 80            [12]10624 	mov	a,#(0x00 ^ 0x80)
      003BE6 8C F0            [24]10625 	mov	b,r4
      003BE8 63 F0 80         [24]10626 	xrl	b,#0x80
      003BEB 95 F0            [12]10627 	subb	a,b
      003BED 50 03            [24]10628 	jnc	00416$
      003BEF 02r3ArE9         [24]10629 	ljmp	00192$
      003BF2                      10630 00416$:
      003BF2 02r3Er17         [24]10631 	ljmp	00193$
      003BF5                      10632 00180$:
                                  10633 ;	calc.c:528: } else if ((char)input == 'I') {
      003BF5 BD 49 2C         [24]10634 	cjne	r5,#0x49,00177$
                                  10635 ;	calc.c:529: if (state_exec(&s, EVENT_RSTA_I) <= 0) break;
      003BF8 74 07            [12]10636 	mov	a,#0x07
      003BFA C0 E0            [24]10637 	push	acc
      003BFC E4               [12]10638 	clr	a
      003BFD C0 E0            [24]10639 	push	acc
      003BFF 90r00r00         [24]10640 	mov	dptr,#_s
      003C02 75 F0 00         [24]10641 	mov	b,#0x00
      003C05 12r00r00         [24]10642 	lcall	_state_exec
      003C08 AB 82            [24]10643 	mov	r3,dpl
      003C0A AC 83            [24]10644 	mov	r4,dph
      003C0C 15 81            [12]10645 	dec	sp
      003C0E 15 81            [12]10646 	dec	sp
      003C10 C3               [12]10647 	clr	c
      003C11 E4               [12]10648 	clr	a
      003C12 9B               [12]10649 	subb	a,r3
      003C13 74 80            [12]10650 	mov	a,#(0x00 ^ 0x80)
      003C15 8C F0            [24]10651 	mov	b,r4
      003C17 63 F0 80         [24]10652 	xrl	b,#0x80
      003C1A 95 F0            [12]10653 	subb	a,b
      003C1C 50 03            [24]10654 	jnc	00419$
      003C1E 02r3ArE9         [24]10655 	ljmp	00192$
      003C21                      10656 00419$:
      003C21 02r3Er17         [24]10657 	ljmp	00193$
      003C24                      10658 00177$:
                                  10659 ;	calc.c:531: ((char)input == 'h') || ((char)input == 'H') ||
      003C24 BD 68 02         [24]10660 	cjne	r5,#0x68,00420$
      003C27 80 0D            [24]10661 	sjmp	00170$
      003C29                      10662 00420$:
      003C29 BD 48 02         [24]10663 	cjne	r5,#0x48,00421$
      003C2C 80 08            [24]10664 	sjmp	00170$
      003C2E                      10665 00421$:
                                  10666 ;	calc.c:532: ((char)input == 'o') || ((char)input == 'O')
      003C2E BD 6F 02         [24]10667 	cjne	r5,#0x6f,00422$
      003C31 80 03            [24]10668 	sjmp	00170$
      003C33                      10669 00422$:
      003C33 BD 4F 2C         [24]10670 	cjne	r5,#0x4f,00171$
      003C36                      10671 00170$:
                                  10672 ;	calc.c:534: if (state_exec(&s, EVENT_BASE) <= 0) break;
      003C36 74 05            [12]10673 	mov	a,#0x05
      003C38 C0 E0            [24]10674 	push	acc
      003C3A E4               [12]10675 	clr	a
      003C3B C0 E0            [24]10676 	push	acc
      003C3D 90r00r00         [24]10677 	mov	dptr,#_s
      003C40 75 F0 00         [24]10678 	mov	b,#0x00
      003C43 12r00r00         [24]10679 	lcall	_state_exec
      003C46 AB 82            [24]10680 	mov	r3,dpl
      003C48 AC 83            [24]10681 	mov	r4,dph
      003C4A 15 81            [12]10682 	dec	sp
      003C4C 15 81            [12]10683 	dec	sp
      003C4E C3               [12]10684 	clr	c
      003C4F E4               [12]10685 	clr	a
      003C50 9B               [12]10686 	subb	a,r3
      003C51 74 80            [12]10687 	mov	a,#(0x00 ^ 0x80)
      003C53 8C F0            [24]10688 	mov	b,r4
      003C55 63 F0 80         [24]10689 	xrl	b,#0x80
      003C58 95 F0            [12]10690 	subb	a,b
      003C5A 50 03            [24]10691 	jnc	00425$
      003C5C 02r3ArE9         [24]10692 	ljmp	00192$
      003C5F                      10693 00425$:
      003C5F 02r3Er17         [24]10694 	ljmp	00193$
      003C62                      10695 00171$:
                                  10696 ;	calc.c:535: } else if (isxdigit(input)) {
      003C62 8E 82            [24]10697 	mov	dpl,r6
      003C64 8F 83            [24]10698 	mov	dph,r7
      003C66 C0 05            [24]10699 	push	ar5
      003C68 12r00r00         [24]10700 	lcall	_isxdigit
      003C6B E5 82            [12]10701 	mov	a,dpl
      003C6D 85 83 F0         [24]10702 	mov	b,dph
      003C70 D0 05            [24]10703 	pop	ar5
      003C72 45 F0            [12]10704 	orl	a,b
      003C74 60 2C            [24]10705 	jz	00168$
                                  10706 ;	calc.c:536: if (state_exec(&s, EVENT_DIGIT) <= 0) break;
      003C76 74 01            [12]10707 	mov	a,#0x01
      003C78 C0 E0            [24]10708 	push	acc
      003C7A E4               [12]10709 	clr	a
      003C7B C0 E0            [24]10710 	push	acc
      003C7D 90r00r00         [24]10711 	mov	dptr,#_s
      003C80 75 F0 00         [24]10712 	mov	b,#0x00
      003C83 12r00r00         [24]10713 	lcall	_state_exec
      003C86 AE 82            [24]10714 	mov	r6,dpl
      003C88 AF 83            [24]10715 	mov	r7,dph
      003C8A 15 81            [12]10716 	dec	sp
      003C8C 15 81            [12]10717 	dec	sp
      003C8E C3               [12]10718 	clr	c
      003C8F E4               [12]10719 	clr	a
      003C90 9E               [12]10720 	subb	a,r6
      003C91 74 80            [12]10721 	mov	a,#(0x00 ^ 0x80)
      003C93 8F F0            [24]10722 	mov	b,r7
      003C95 63 F0 80         [24]10723 	xrl	b,#0x80
      003C98 95 F0            [12]10724 	subb	a,b
      003C9A 50 03            [24]10725 	jnc	00427$
      003C9C 02r3ArE9         [24]10726 	ljmp	00192$
      003C9F                      10727 00427$:
      003C9F 02r3Er17         [24]10728 	ljmp	00193$
      003CA2                      10729 00168$:
                                  10730 ;	calc.c:538: ((char)input == 'p') || ((char)input == 'P') ||
      003CA2 BD 70 02         [24]10731 	cjne	r5,#0x70,00428$
      003CA5 80 17            [24]10732 	sjmp	00159$
      003CA7                      10733 00428$:
      003CA7 BD 50 02         [24]10734 	cjne	r5,#0x50,00429$
      003CAA 80 12            [24]10735 	sjmp	00159$
      003CAC                      10736 00429$:
                                  10737 ;	calc.c:539: ((char)input == 'v') || ((char)input == 'V') ||
      003CAC BD 76 02         [24]10738 	cjne	r5,#0x76,00430$
      003CAF 80 0D            [24]10739 	sjmp	00159$
      003CB1                      10740 00430$:
      003CB1 BD 56 02         [24]10741 	cjne	r5,#0x56,00431$
      003CB4 80 08            [24]10742 	sjmp	00159$
      003CB6                      10743 00431$:
                                  10744 ;	calc.c:540: ((char)input == '.') ||
      003CB6 BD 2E 02         [24]10745 	cjne	r5,#0x2e,00432$
      003CB9 80 03            [24]10746 	sjmp	00159$
      003CBB                      10747 00432$:
                                  10748 ;	calc.c:541: ((char)input == 'x')
      003CBB BD 78 2C         [24]10749 	cjne	r5,#0x78,00160$
      003CBE                      10750 00159$:
                                  10751 ;	calc.c:543: if (state_exec(&s, EVENT_OP) <= 0) break;
      003CBE 74 02            [12]10752 	mov	a,#0x02
      003CC0 C0 E0            [24]10753 	push	acc
      003CC2 E4               [12]10754 	clr	a
      003CC3 C0 E0            [24]10755 	push	acc
      003CC5 90r00r00         [24]10756 	mov	dptr,#_s
      003CC8 75 F0 00         [24]10757 	mov	b,#0x00
      003CCB 12r00r00         [24]10758 	lcall	_state_exec
      003CCE AE 82            [24]10759 	mov	r6,dpl
      003CD0 AF 83            [24]10760 	mov	r7,dph
      003CD2 15 81            [12]10761 	dec	sp
      003CD4 15 81            [12]10762 	dec	sp
      003CD6 C3               [12]10763 	clr	c
      003CD7 E4               [12]10764 	clr	a
      003CD8 9E               [12]10765 	subb	a,r6
      003CD9 74 80            [12]10766 	mov	a,#(0x00 ^ 0x80)
      003CDB 8F F0            [24]10767 	mov	b,r7
      003CDD 63 F0 80         [24]10768 	xrl	b,#0x80
      003CE0 95 F0            [12]10769 	subb	a,b
      003CE2 50 03            [24]10770 	jnc	00435$
      003CE4 02r3ArE9         [24]10771 	ljmp	00192$
      003CE7                      10772 00435$:
      003CE7 02r3Er17         [24]10773 	ljmp	00193$
      003CEA                      10774 00160$:
                                  10775 ;	calc.c:545: ((char)input == 'X') || ((char)input == 'T') ||
      003CEA BD 58 02         [24]10776 	cjne	r5,#0x58,00436$
      003CED 80 17            [24]10777 	sjmp	00151$
      003CEF                      10778 00436$:
      003CEF BD 54 02         [24]10779 	cjne	r5,#0x54,00437$
      003CF2 80 12            [24]10780 	sjmp	00151$
      003CF4                      10781 00437$:
                                  10782 ;	calc.c:546: ((char)input == 'm') || ((char)input == 'M') ||
      003CF4 BD 6D 02         [24]10783 	cjne	r5,#0x6d,00438$
      003CF7 80 0D            [24]10784 	sjmp	00151$
      003CF9                      10785 00438$:
      003CF9 BD 4D 02         [24]10786 	cjne	r5,#0x4d,00439$
      003CFC 80 08            [24]10787 	sjmp	00151$
      003CFE                      10788 00439$:
                                  10789 ;	calc.c:547: ((char)input == 'u') || ((char)input == 'U')
      003CFE BD 75 02         [24]10790 	cjne	r5,#0x75,00440$
      003D01 80 03            [24]10791 	sjmp	00151$
      003D03                      10792 00440$:
      003D03 BD 55 2C         [24]10793 	cjne	r5,#0x55,00152$
      003D06                      10794 00151$:
                                  10795 ;	calc.c:549: if (state_exec(&s, EVENT_OP) <= 0) break;
      003D06 74 02            [12]10796 	mov	a,#0x02
      003D08 C0 E0            [24]10797 	push	acc
      003D0A E4               [12]10798 	clr	a
      003D0B C0 E0            [24]10799 	push	acc
      003D0D 90r00r00         [24]10800 	mov	dptr,#_s
      003D10 75 F0 00         [24]10801 	mov	b,#0x00
      003D13 12r00r00         [24]10802 	lcall	_state_exec
      003D16 AE 82            [24]10803 	mov	r6,dpl
      003D18 AF 83            [24]10804 	mov	r7,dph
      003D1A 15 81            [12]10805 	dec	sp
      003D1C 15 81            [12]10806 	dec	sp
      003D1E C3               [12]10807 	clr	c
      003D1F E4               [12]10808 	clr	a
      003D20 9E               [12]10809 	subb	a,r6
      003D21 74 80            [12]10810 	mov	a,#(0x00 ^ 0x80)
      003D23 8F F0            [24]10811 	mov	b,r7
      003D25 63 F0 80         [24]10812 	xrl	b,#0x80
      003D28 95 F0            [12]10813 	subb	a,b
      003D2A 50 03            [24]10814 	jnc	00443$
      003D2C 02r3ArE9         [24]10815 	ljmp	00192$
      003D2F                      10816 00443$:
      003D2F 02r3Er17         [24]10817 	ljmp	00193$
      003D32                      10818 00152$:
                                  10819 ;	calc.c:551: ((char)input == '+') || ((char)input == '-')
      003D32 BD 2B 02         [24]10820 	cjne	r5,#0x2b,00444$
      003D35 80 03            [24]10821 	sjmp	00147$
      003D37                      10822 00444$:
      003D37 BD 2D 2C         [24]10823 	cjne	r5,#0x2d,00148$
      003D3A                      10824 00147$:
                                  10825 ;	calc.c:553: if (state_exec(&s, EVENT_OP) <= 0) break;
      003D3A 74 02            [12]10826 	mov	a,#0x02
      003D3C C0 E0            [24]10827 	push	acc
      003D3E E4               [12]10828 	clr	a
      003D3F C0 E0            [24]10829 	push	acc
      003D41 90r00r00         [24]10830 	mov	dptr,#_s
      003D44 75 F0 00         [24]10831 	mov	b,#0x00
      003D47 12r00r00         [24]10832 	lcall	_state_exec
      003D4A AE 82            [24]10833 	mov	r6,dpl
      003D4C AF 83            [24]10834 	mov	r7,dph
      003D4E 15 81            [12]10835 	dec	sp
      003D50 15 81            [12]10836 	dec	sp
      003D52 C3               [12]10837 	clr	c
      003D53 E4               [12]10838 	clr	a
      003D54 9E               [12]10839 	subb	a,r6
      003D55 74 80            [12]10840 	mov	a,#(0x00 ^ 0x80)
      003D57 8F F0            [24]10841 	mov	b,r7
      003D59 63 F0 80         [24]10842 	xrl	b,#0x80
      003D5C 95 F0            [12]10843 	subb	a,b
      003D5E 50 03            [24]10844 	jnc	00447$
      003D60 02r3ArE9         [24]10845 	ljmp	00192$
      003D63                      10846 00447$:
      003D63 02r3Er17         [24]10847 	ljmp	00193$
      003D66                      10848 00148$:
                                  10849 ;	calc.c:555: ((char)input == '*') ||
      003D66 BD 2A 02         [24]10850 	cjne	r5,#0x2a,00448$
      003D69 80 12            [24]10851 	sjmp	00140$
      003D6B                      10852 00448$:
                                  10853 ;	calc.c:556: ((char)input == '/') || ((char)input == '\\') ||
      003D6B BD 2F 02         [24]10854 	cjne	r5,#0x2f,00449$
      003D6E 80 0D            [24]10855 	sjmp	00140$
      003D70                      10856 00449$:
      003D70 BD 5C 02         [24]10857 	cjne	r5,#0x5c,00450$
      003D73 80 08            [24]10858 	sjmp	00140$
      003D75                      10859 00450$:
                                  10860 ;	calc.c:557: ((char)input == '%') || ((char)input == '#')
      003D75 BD 25 02         [24]10861 	cjne	r5,#0x25,00451$
      003D78 80 03            [24]10862 	sjmp	00140$
      003D7A                      10863 00451$:
      003D7A BD 23 29         [24]10864 	cjne	r5,#0x23,00141$
      003D7D                      10865 00140$:
                                  10866 ;	calc.c:559: if (state_exec(&s, EVENT_OP) <= 0) break;
      003D7D 74 02            [12]10867 	mov	a,#0x02
      003D7F C0 E0            [24]10868 	push	acc
      003D81 E4               [12]10869 	clr	a
      003D82 C0 E0            [24]10870 	push	acc
      003D84 90r00r00         [24]10871 	mov	dptr,#_s
      003D87 75 F0 00         [24]10872 	mov	b,#0x00
      003D8A 12r00r00         [24]10873 	lcall	_state_exec
      003D8D AE 82            [24]10874 	mov	r6,dpl
      003D8F AF 83            [24]10875 	mov	r7,dph
      003D91 15 81            [12]10876 	dec	sp
      003D93 15 81            [12]10877 	dec	sp
      003D95 C3               [12]10878 	clr	c
      003D96 E4               [12]10879 	clr	a
      003D97 9E               [12]10880 	subb	a,r6
      003D98 74 80            [12]10881 	mov	a,#(0x00 ^ 0x80)
      003D9A 8F F0            [24]10882 	mov	b,r7
      003D9C 63 F0 80         [24]10883 	xrl	b,#0x80
      003D9F 95 F0            [12]10884 	subb	a,b
      003DA1 50 74            [24]10885 	jnc	00193$
      003DA3 02r3ArE9         [24]10886 	ljmp	00192$
      003DA6                      10887 00141$:
                                  10888 ;	calc.c:561: ((char)input == '&') ||
      003DA6 BD 26 02         [24]10889 	cjne	r5,#0x26,00455$
      003DA9 80 1C            [24]10890 	sjmp	00131$
      003DAB                      10891 00455$:
                                  10892 ;	calc.c:562: ((char)input == '|') || ((char)input == '^') ||
      003DAB BD 7C 02         [24]10893 	cjne	r5,#0x7c,00456$
      003DAE 80 17            [24]10894 	sjmp	00131$
      003DB0                      10895 00456$:
      003DB0 BD 5E 02         [24]10896 	cjne	r5,#0x5e,00457$
      003DB3 80 12            [24]10897 	sjmp	00131$
      003DB5                      10898 00457$:
                                  10899 ;	calc.c:563: ((char)input == '~') ||
      003DB5 BD 7E 02         [24]10900 	cjne	r5,#0x7e,00458$
      003DB8 80 0D            [24]10901 	sjmp	00131$
      003DBA                      10902 00458$:
                                  10903 ;	calc.c:564: ((char)input == '>') || ((char)input == ']') ||
      003DBA BD 3E 02         [24]10904 	cjne	r5,#0x3e,00459$
      003DBD 80 08            [24]10905 	sjmp	00131$
      003DBF                      10906 00459$:
      003DBF BD 5D 02         [24]10907 	cjne	r5,#0x5d,00460$
      003DC2 80 03            [24]10908 	sjmp	00131$
      003DC4                      10909 00460$:
                                  10910 ;	calc.c:565: ((char)input == '<')
      003DC4 BD 3C 29         [24]10911 	cjne	r5,#0x3c,00132$
      003DC7                      10912 00131$:
                                  10913 ;	calc.c:567: if (state_exec(&s, EVENT_OP) <= 0) break;
      003DC7 74 02            [12]10914 	mov	a,#0x02
      003DC9 C0 E0            [24]10915 	push	acc
      003DCB E4               [12]10916 	clr	a
      003DCC C0 E0            [24]10917 	push	acc
      003DCE 90r00r00         [24]10918 	mov	dptr,#_s
      003DD1 75 F0 00         [24]10919 	mov	b,#0x00
      003DD4 12r00r00         [24]10920 	lcall	_state_exec
      003DD7 AE 82            [24]10921 	mov	r6,dpl
      003DD9 AF 83            [24]10922 	mov	r7,dph
      003DDB 15 81            [12]10923 	dec	sp
      003DDD 15 81            [12]10924 	dec	sp
      003DDF C3               [12]10925 	clr	c
      003DE0 E4               [12]10926 	clr	a
      003DE1 9E               [12]10927 	subb	a,r6
      003DE2 74 80            [12]10928 	mov	a,#(0x00 ^ 0x80)
      003DE4 8F F0            [24]10929 	mov	b,r7
      003DE6 63 F0 80         [24]10930 	xrl	b,#0x80
      003DE9 95 F0            [12]10931 	subb	a,b
      003DEB 50 2A            [24]10932 	jnc	00193$
      003DED 02r3ArE9         [24]10933 	ljmp	00192$
      003DF0                      10934 00132$:
                                  10935 ;	calc.c:569: if (state_exec(&s, EVENT_DELIM) <= 0) break;
      003DF0 E4               [12]10936 	clr	a
      003DF1 C0 E0            [24]10937 	push	acc
      003DF3 C0 E0            [24]10938 	push	acc
      003DF5 90r00r00         [24]10939 	mov	dptr,#_s
      003DF8 75 F0 00         [24]10940 	mov	b,#0x00
      003DFB 12r00r00         [24]10941 	lcall	_state_exec
      003DFE AE 82            [24]10942 	mov	r6,dpl
      003E00 AF 83            [24]10943 	mov	r7,dph
      003E02 15 81            [12]10944 	dec	sp
      003E04 15 81            [12]10945 	dec	sp
      003E06 C3               [12]10946 	clr	c
      003E07 E4               [12]10947 	clr	a
      003E08 9E               [12]10948 	subb	a,r6
      003E09 74 80            [12]10949 	mov	a,#(0x00 ^ 0x80)
      003E0B 8F F0            [24]10950 	mov	b,r7
      003E0D 63 F0 80         [24]10951 	xrl	b,#0x80
      003E10 95 F0            [12]10952 	subb	a,b
      003E12 50 03            [24]10953 	jnc	00464$
      003E14 02r3ArE9         [24]10954 	ljmp	00192$
      003E17                      10955 00464$:
      003E17                      10956 00193$:
                                  10957 ;	calc.c:573: printstr("TERM\r\n");
      003E17 7DrA8            [12]10958 	mov	r5,#___str_52
      003E19 7Es03            [12]10959 	mov	r6,#(___str_52 >> 8)
      003E1B 7F 80            [12]10960 	mov	r7,#0x80
                                  10961 ;	calc.c:58: return;
      003E1D                      10962 00202$:
                                  10963 ;	calc.c:56: for (; *s; s++) putchar(*s);
      003E1D 8D 82            [24]10964 	mov	dpl,r5
      003E1F 8E 83            [24]10965 	mov	dph,r6
      003E21 8F F0            [24]10966 	mov	b,r7
      003E23 12r00r00         [24]10967 	lcall	__gptrget
      003E26 FC               [12]10968 	mov	r4,a
      003E27 60 10            [24]10969 	jz	00197$
      003E29 7B 00            [12]10970 	mov	r3,#0x00
      003E2B 8C 82            [24]10971 	mov	dpl,r4
      003E2D 8B 83            [24]10972 	mov	dph,r3
      003E2F 12r00r00         [24]10973 	lcall	_putchar
      003E32 0D               [12]10974 	inc	r5
                                  10975 ;	calc.c:573: printstr("TERM\r\n");
      003E33 BD 00 E7         [24]10976 	cjne	r5,#0x00,00202$
      003E36 0E               [12]10977 	inc	r6
      003E37 80 E4            [24]10978 	sjmp	00202$
      003E39                      10979 00197$:
                                  10980 ;	calc.c:575: PCON |= 2;
      003E39 43 87 02         [24]10981 	orl	_PCON,#0x02
                                  10982 ;	calc.c:577: return;
                                  10983 ;	calc.c:578: }
      003E3C 15 81            [12]10984 	dec	sp
      003E3E D0*00            [24]10985 	pop	_bp
      003E40 22               [24]10986 	ret
                                  10987 	.area CSEG    (CODE)
                                  10988 	.area CONST   (CODE)
                                  10989 	.area CONST   (CODE)
      000000                      10990 ___str_0:
      000000 25 30 38 6C 78       10991 	.ascii "%08lx"
      000005 09                   10992 	.db 0x09
      000006 00                   10993 	.db 0x00
                                  10994 	.area CSEG    (CODE)
                                  10995 	.area CONST   (CODE)
      000007                      10996 ___str_1:
      000007 25 20 31 31 6C 64    10997 	.ascii "% 11ld"
      00000D 09                   10998 	.db 0x09
      00000E 00                   10999 	.db 0x00
                                  11000 	.area CSEG    (CODE)
                                  11001 	.area CONST   (CODE)
      00000F                      11002 ___str_2:
      00000F 25 30 31 31 6C 6F    11003 	.ascii "%011lo"
      000015 09                   11004 	.db 0x09
      000016 00                   11005 	.db 0x00
                                  11006 	.area CSEG    (CODE)
                                  11007 	.area CONST   (CODE)
      000017                      11008 ___str_3:
      000017 0D                   11009 	.db 0x0d
      000018 0A                   11010 	.db 0x0a
      000019 00                   11011 	.db 0x00
                                  11012 	.area CSEG    (CODE)
                                  11013 	.area CONST   (CODE)
      00001A                      11014 ___str_4:
      00001A 73 74 61 63 6B 20 75 11015 	.ascii "stack underflow"
             6E 64 65 72 66 6C 6F
             77
      000029 0D                   11016 	.db 0x0d
      00002A 0A                   11017 	.db 0x0a
      00002B 00                   11018 	.db 0x00
                                  11019 	.area CSEG    (CODE)
                                  11020 	.area CONST   (CODE)
      00002C                      11021 ___str_5:
      00002C 50 53 50 41          11022 	.ascii "PSPA"
      000030 09                   11023 	.db 0x09
      000031 00                   11024 	.db 0x00
                                  11025 	.area CSEG    (CODE)
                                  11026 	.area CONST   (CODE)
      000032                      11027 ___str_6:
      000032 53 53 50 41          11028 	.ascii "SSPA"
      000036 09                   11029 	.db 0x09
      000037 00                   11030 	.db 0x00
                                  11031 	.area CSEG    (CODE)
                                  11032 	.area CONST   (CODE)
      000038                      11033 ___str_7:
      000038 50 53 56 41          11034 	.ascii "PSVA"
      00003C 09                   11035 	.db 0x09
      00003D 00                   11036 	.db 0x00
                                  11037 	.area CSEG    (CODE)
                                  11038 	.area CONST   (CODE)
      00003E                      11039 ___str_8:
      00003E 50 53 56 54 4F 50    11040 	.ascii "PSVTOP"
      000044 09                   11041 	.db 0x09
      000045 00                   11042 	.db 0x00
                                  11043 	.area CSEG    (CODE)
                                  11044 	.area CONST   (CODE)
      000046                      11045 ___str_9:
      000046 50 53 50 54 4F 50    11046 	.ascii "PSPTOP"
      00004C 09                   11047 	.db 0x09
      00004D 00                   11048 	.db 0x00
                                  11049 	.area CSEG    (CODE)
                                  11050 	.area CONST   (CODE)
      00004E                      11051 ___str_10:
      00004E 0D                   11052 	.db 0x0d
      00004F 0A                   11053 	.db 0x0a
      000050 73 74 61 63 6B 20 75 11054 	.ascii "stack underflow"
             6E 64 65 72 66 6C 6F
             77
      00005F 0D                   11055 	.db 0x0d
      000060 0A                   11056 	.db 0x0a
      000061 00                   11057 	.db 0x00
                                  11058 	.area CSEG    (CODE)
                                  11059 	.area CONST   (CODE)
      000062                      11060 ___str_11:
      000062 0D                   11061 	.db 0x0d
      000063 0A                   11062 	.db 0x0a
      000064 73 65 63 6F 6E 64 61 11063 	.ascii "secondary stack overflow"
             72 79 20 73 74 61 63
             6B 20 6F 76 65 72 66
             6C 6F 77
      00007C 0D                   11064 	.db 0x0d
      00007D 0A                   11065 	.db 0x0a
      00007E 00                   11066 	.db 0x00
                                  11067 	.area CSEG    (CODE)
                                  11068 	.area CONST   (CODE)
      00007F                      11069 ___str_12:
      00007F 0D                   11070 	.db 0x0d
      000080 0A                   11071 	.db 0x0a
      000081 73 65 63 6F 6E 64 61 11072 	.ascii "secondary stack underflow"
             72 79 20 73 74 61 63
             6B 20 75 6E 64 65 72
             66 6C 6F 77
      00009A 0D                   11073 	.db 0x0d
      00009B 0A                   11074 	.db 0x0a
      00009C 00                   11075 	.db 0x00
                                  11076 	.area CSEG    (CODE)
                                  11077 	.area CONST   (CODE)
      00009D                      11078 ___str_13:
      00009D 0D                   11079 	.db 0x0d
      00009E 0A                   11080 	.db 0x0a
      00009F 73 74 61 63 6B 20 6F 11081 	.ascii "stack overflow"
             76 65 72 66 6C 6F 77
      0000AD 0D                   11082 	.db 0x0d
      0000AE 0A                   11083 	.db 0x0a
      0000AF 00                   11084 	.db 0x00
                                  11085 	.area CSEG    (CODE)
                                  11086 	.area CONST   (CODE)
      0000B0                      11087 ___str_14:
      0000B0 0D                   11088 	.db 0x0d
      0000B1 0A                   11089 	.db 0x0a
      0000B2 64 69 76 69 73 69 6F 11090 	.ascii "division by zero"
             6E 20 62 79 20 7A 65
             72 6F
      0000C2 0D                   11091 	.db 0x0d
      0000C3 0A                   11092 	.db 0x0a
      0000C4 00                   11093 	.db 0x00
                                  11094 	.area CSEG    (CODE)
                                  11095 	.area CONST   (CODE)
      0000C5                      11096 ___str_15:
      0000C5 0D                   11097 	.db 0x0d
      0000C6 0A                   11098 	.db 0x0a
      0000C7 50 53 20 3D 20 25 70 11099 	.ascii "PS = %p, SS = %p, base = %d"
             2C 20 53 53 20 3D 20
             25 70 2C 20 62 61 73
             65 20 3D 20 25 64
      0000E2 0D                   11100 	.db 0x0d
      0000E3 0A                   11101 	.db 0x0a
      0000E4 00                   11102 	.db 0x00
                                  11103 	.area CSEG    (CODE)
                                  11104 	.area CONST   (CODE)
      0000E5                      11105 ___str_16:
      0000E5 41 43 43             11106 	.ascii "ACC"
      0000E8 09                   11107 	.db 0x09
      0000E9 00                   11108 	.db 0x00
                                  11109 	.area CSEG    (CODE)
                                  11110 	.area CONST   (CODE)
      0000EA                      11111 ___str_17:
      0000EA 0D                   11112 	.db 0x0d
      0000EB 0A                   11113 	.db 0x0a
      0000EC 50 53 54 4F 50 31    11114 	.ascii "PSTOP1"
      0000F2 09                   11115 	.db 0x09
      0000F3 00                   11116 	.db 0x00
                                  11117 	.area CSEG    (CODE)
                                  11118 	.area CONST   (CODE)
      0000F4                      11119 ___str_18:
      0000F4 0D                   11120 	.db 0x0d
      0000F5 0A                   11121 	.db 0x0a
      0000F6 50 53 54 4F 50 30    11122 	.ascii "PSTOP0"
      0000FC 09                   11123 	.db 0x09
      0000FD 00                   11124 	.db 0x00
                                  11125 	.area CSEG    (CODE)
                                  11126 	.area CONST   (CODE)
      0000FE                      11127 ___str_19:
      0000FE 0D                   11128 	.db 0x0d
      0000FF 0A                   11129 	.db 0x0a
      000100 53 53 54 4F 50 31    11130 	.ascii "SSTOP1"
      000106 09                   11131 	.db 0x09
      000107 00                   11132 	.db 0x00
                                  11133 	.area CSEG    (CODE)
                                  11134 	.area CONST   (CODE)
      000108                      11135 ___str_20:
      000108 0D                   11136 	.db 0x0d
      000109 0A                   11137 	.db 0x0a
      00010A 53 53 54 4F 50 30    11138 	.ascii "SSTOP0"
      000110 09                   11139 	.db 0x09
      000111 00                   11140 	.db 0x00
                                  11141 	.area CSEG    (CODE)
                                  11142 	.area CONST   (CODE)
      000112                      11143 ___str_21:
      000112 0D                   11144 	.db 0x0d
      000113 0A                   11145 	.db 0x0a
      000114 48 68 4F 6F          11146 	.ascii "HhOo"
      000118 09                   11147 	.db 0x09
      000119 62 61 73 65 20 31 36 11148 	.ascii "base 16 10 8 2"
             20 31 30 20 38 20 32
      000127 0D                   11149 	.db 0x0d
      000128 0A                   11150 	.db 0x0a
      000129 00                   11151 	.db 0x00
                                  11152 	.area CSEG    (CODE)
                                  11153 	.area CONST   (CODE)
      00012A                      11154 ___str_22:
      00012A 70 2E                11155 	.ascii "p."
      00012C 09                   11156 	.db 0x09
      00012D 70 6F 70 20 74 6F 70 11157 	.ascii "pop top"
      000134 0D                   11158 	.db 0x0d
      000135 0A                   11159 	.db 0x0a
      000136 00                   11160 	.db 0x00
                                  11161 	.area CSEG    (CODE)
                                  11162 	.area CONST   (CODE)
      000137                      11163 ___str_23:
      000137 50                   11164 	.ascii "P"
      000138 09                   11165 	.db 0x09
      000139 70 6F 70 20 73 74 61 11166 	.ascii "pop stack"
             63 6B
      000142 0D                   11167 	.db 0x0d
      000143 0A                   11168 	.db 0x0a
      000144 00                   11169 	.db 0x00
                                  11170 	.area CSEG    (CODE)
                                  11171 	.area CONST   (CODE)
      000145                      11172 ___str_24:
      000145 76                   11173 	.ascii "v"
      000146 09                   11174 	.db 0x09
      000147 70 65 65 6B 20 74 6F 11175 	.ascii "peek top"
             70
      00014F 0D                   11176 	.db 0x0d
      000150 0A                   11177 	.db 0x0a
      000151 00                   11178 	.db 0x00
                                  11179 	.area CSEG    (CODE)
                                  11180 	.area CONST   (CODE)
      000152                      11181 ___str_25:
      000152 56                   11182 	.ascii "V"
      000153 09                   11183 	.db 0x09
      000154 70 65 65 6B 20 73 74 11184 	.ascii "peek stack"
             61 63 6B
      00015E 0D                   11185 	.db 0x0d
      00015F 0A                   11186 	.db 0x0a
      000160 00                   11187 	.db 0x00
                                  11188 	.area CSEG    (CODE)
                                  11189 	.area CONST   (CODE)
      000161                      11190 ___str_26:
      000161 69                   11191 	.ascii "i"
      000162 09                   11192 	.db 0x09
      000163 72 65 73 65 74 20 61 11193 	.ascii "reset acc"
             63 63
      00016C 0D                   11194 	.db 0x0d
      00016D 0A                   11195 	.db 0x0a
      00016E 00                   11196 	.db 0x00
                                  11197 	.area CSEG    (CODE)
                                  11198 	.area CONST   (CODE)
      00016F                      11199 ___str_27:
      00016F 49                   11200 	.ascii "I"
      000170 09                   11201 	.db 0x09
      000171 72 65 73 65 74 20 61 11202 	.ascii "reset and discard acc"
             6E 64 20 64 69 73 63
             61 72 64 20 61 63 63
      000186 0D                   11203 	.db 0x0d
      000187 0A                   11204 	.db 0x0a
      000188 00                   11205 	.db 0x00
                                  11206 	.area CSEG    (CODE)
                                  11207 	.area CONST   (CODE)
      000189                      11208 ___str_28:
      000189 78                   11209 	.ascii "x"
      00018A 09                   11210 	.db 0x09
      00018B 65 78 63 68 61 6E 67 11211 	.ascii "exchange top 2"
             65 20 74 6F 70 20 32
      000199 0D                   11212 	.db 0x0d
      00019A 0A                   11213 	.db 0x0a
      00019B 00                   11214 	.db 0x00
                                  11215 	.area CSEG    (CODE)
                                  11216 	.area CONST   (CODE)
      00019C                      11217 ___str_29:
      00019C 58                   11218 	.ascii "X"
      00019D 09                   11219 	.db 0x09
      00019E 65 78 63 68 61 6E 67 11220 	.ascii "exchange stacks primary <-> secondary"
             65 20 73 74 61 63 6B
             73 20 70 72 69 6D 61
             72 79 20 3C 2D 3E 20
             73 65 63 6F 6E 64 61
             72 79
      0001C3 0D                   11221 	.db 0x0d
      0001C4 0A                   11222 	.db 0x0a
      0001C5 00                   11223 	.db 0x00
                                  11224 	.area CSEG    (CODE)
                                  11225 	.area CONST   (CODE)
      0001C6                      11226 ___str_30:
      0001C6 54                   11227 	.ascii "T"
      0001C7 09                   11228 	.db 0x09
      0001C8 65 78 63 68 61 6E 67 11229 	.ascii "exchange tops primary <-> secondary"
             65 20 74 6F 70 73 20
             70 72 69 6D 61 72 79
             20 3C 2D 3E 20 73 65
             63 6F 6E 64 61 72 79
      0001EB 0D                   11230 	.db 0x0d
      0001EC 0A                   11231 	.db 0x0a
      0001ED 00                   11232 	.db 0x00
                                  11233 	.area CSEG    (CODE)
                                  11234 	.area CONST   (CODE)
      0001EE                      11235 ___str_31:
      0001EE 55                   11236 	.ascii "U"
      0001EF 09                   11237 	.db 0x09
      0001F0 63 6F 70 79 20 74 6F 11238 	.ascii "copy top secondary -> primary"
             70 20 73 65 63 6F 6E
             64 61 72 79 20 2D 3E
             20 70 72 69 6D 61 72
             79
      00020D 0D                   11239 	.db 0x0d
      00020E 0A                   11240 	.db 0x0a
      00020F 00                   11241 	.db 0x00
                                  11242 	.area CSEG    (CODE)
                                  11243 	.area CONST   (CODE)
      000210                      11244 ___str_32:
      000210 75                   11245 	.ascii "u"
      000211 09                   11246 	.db 0x09
      000212 63 6F 70 79 20 74 6F 11247 	.ascii "copy top primary -> secondary"
             70 20 70 72 69 6D 61
             72 79 20 2D 3E 20 73
             65 63 6F 6E 64 61 72
             79
      00022F 0D                   11248 	.db 0x0d
      000230 0A                   11249 	.db 0x0a
      000231 00                   11250 	.db 0x00
                                  11251 	.area CSEG    (CODE)
                                  11252 	.area CONST   (CODE)
      000232                      11253 ___str_33:
      000232 4D                   11254 	.ascii "M"
      000233 09                   11255 	.db 0x09
      000234 6D 6F 76 65 20 74 6F 11256 	.ascii "move top secondary -> primary"
             70 20 73 65 63 6F 6E
             64 61 72 79 20 2D 3E
             20 70 72 69 6D 61 72
             79
      000251 0D                   11257 	.db 0x0d
      000252 0A                   11258 	.db 0x0a
      000253 00                   11259 	.db 0x00
                                  11260 	.area CSEG    (CODE)
                                  11261 	.area CONST   (CODE)
      000254                      11262 ___str_34:
      000254 6D                   11263 	.ascii "m"
      000255 09                   11264 	.db 0x09
      000256 6D 6F 76 65 20 74 6F 11265 	.ascii "move top primary -> secondary"
             70 20 70 72 69 6D 61
             72 79 20 2D 3E 20 73
             65 63 6F 6E 64 61 72
             79
      000273 0D                   11266 	.db 0x0d
      000274 0A                   11267 	.db 0x0a
      000275 00                   11268 	.db 0x00
                                  11269 	.area CSEG    (CODE)
                                  11270 	.area CONST   (CODE)
      000276                      11271 ___str_35:
      000276 2B                   11272 	.ascii "+"
      000277 09                   11273 	.db 0x09
      000278 61 64 64 20 74 6F 70 11274 	.ascii "add top 2"
             20 32
      000281 0D                   11275 	.db 0x0d
      000282 0A                   11276 	.db 0x0a
      000283 00                   11277 	.db 0x00
                                  11278 	.area CSEG    (CODE)
                                  11279 	.area CONST   (CODE)
      000284                      11280 ___str_36:
      000284 2D                   11281 	.ascii "-"
      000285 09                   11282 	.db 0x09
      000286 73 75 62 74 72 61 63 11283 	.ascii "subtract top 2"
             74 20 74 6F 70 20 32
      000294 0D                   11284 	.db 0x0d
      000295 0A                   11285 	.db 0x0a
      000296 00                   11286 	.db 0x00
                                  11287 	.area CSEG    (CODE)
                                  11288 	.area CONST   (CODE)
      000297                      11289 ___str_37:
      000297 2A                   11290 	.ascii "*"
      000298 09                   11291 	.db 0x09
      000299 6D 75 6C 74 69 70 6C 11292 	.ascii "multiply top 2"
             79 20 74 6F 70 20 32
      0002A7 0D                   11293 	.db 0x0d
      0002A8 0A                   11294 	.db 0x0a
      0002A9 00                   11295 	.db 0x00
                                  11296 	.area CSEG    (CODE)
                                  11297 	.area CONST   (CODE)
      0002AA                      11298 ___str_38:
      0002AA 2F                   11299 	.ascii "/"
      0002AB 09                   11300 	.db 0x09
      0002AC 64 69 76 69 64 65 20 11301 	.ascii "divide top 2"
             74 6F 70 20 32
      0002B8 0D                   11302 	.db 0x0d
      0002B9 0A                   11303 	.db 0x0a
      0002BA 00                   11304 	.db 0x00
                                  11305 	.area CSEG    (CODE)
                                  11306 	.area CONST   (CODE)
      0002BB                      11307 ___str_39:
      0002BB 5C                   11308 	.db 0x5c
      0002BC 09                   11309 	.db 0x09
      0002BD 64 69 76 69 64 65 20 11310 	.ascii "divide top 2 unsigned"
             74 6F 70 20 32 20 75
             6E 73 69 67 6E 65 64
      0002D2 0D                   11311 	.db 0x0d
      0002D3 0A                   11312 	.db 0x0a
      0002D4 00                   11313 	.db 0x00
                                  11314 	.area CSEG    (CODE)
                                  11315 	.area CONST   (CODE)
      0002D5                      11316 ___str_40:
      0002D5 25                   11317 	.ascii "%"
      0002D6 09                   11318 	.db 0x09
      0002D7 6D 6F 64 75 6C 75 73 11319 	.ascii "modulus top 2"
             20 74 6F 70 20 32
      0002E4 0D                   11320 	.db 0x0d
      0002E5 0A                   11321 	.db 0x0a
      0002E6 00                   11322 	.db 0x00
                                  11323 	.area CSEG    (CODE)
                                  11324 	.area CONST   (CODE)
      0002E7                      11325 ___str_41:
      0002E7 23                   11326 	.ascii "#"
      0002E8 09                   11327 	.db 0x09
      0002E9 6D 6F 64 75 6C 75 73 11328 	.ascii "modulus top 2 unsigned"
             20 74 6F 70 20 32 20
             75 6E 73 69 67 6E 65
             64
      0002FF 0D                   11329 	.db 0x0d
      000300 0A                   11330 	.db 0x0a
      000301 00                   11331 	.db 0x00
                                  11332 	.area CSEG    (CODE)
                                  11333 	.area CONST   (CODE)
      000302                      11334 ___str_42:
      000302 26                   11335 	.ascii "&"
      000303 09                   11336 	.db 0x09
      000304 61 6E 64 20 74 6F 70 11337 	.ascii "and top 2"
             20 32
      00030D 0D                   11338 	.db 0x0d
      00030E 0A                   11339 	.db 0x0a
      00030F 00                   11340 	.db 0x00
                                  11341 	.area CSEG    (CODE)
                                  11342 	.area CONST   (CODE)
      000310                      11343 ___str_43:
      000310 7C                   11344 	.ascii "|"
      000311 09                   11345 	.db 0x09
      000312 6F 72 20 74 6F 70 20 11346 	.ascii "or top 2"
             32
      00031A 0D                   11347 	.db 0x0d
      00031B 0A                   11348 	.db 0x0a
      00031C 00                   11349 	.db 0x00
                                  11350 	.area CSEG    (CODE)
                                  11351 	.area CONST   (CODE)
      00031D                      11352 ___str_44:
      00031D 5E                   11353 	.ascii "^"
      00031E 09                   11354 	.db 0x09
      00031F 78 6F 72 20 74 6F 70 11355 	.ascii "xor top 2"
             20 32
      000328 0D                   11356 	.db 0x0d
      000329 0A                   11357 	.db 0x0a
      00032A 00                   11358 	.db 0x00
                                  11359 	.area CSEG    (CODE)
                                  11360 	.area CONST   (CODE)
      00032B                      11361 ___str_45:
      00032B 3E                   11362 	.ascii ">"
      00032C 09                   11363 	.db 0x09
      00032D 73 68 69 66 74 20 72 11364 	.ascii "shift right top 2"
             69 67 68 74 20 74 6F
             70 20 32
      00033E 0D                   11365 	.db 0x0d
      00033F 0A                   11366 	.db 0x0a
      000340 00                   11367 	.db 0x00
                                  11368 	.area CSEG    (CODE)
                                  11369 	.area CONST   (CODE)
      000341                      11370 ___str_46:
      000341 5D                   11371 	.ascii "]"
      000342 09                   11372 	.db 0x09
      000343 61 72 69 74 68 6D 65 11373 	.ascii "arithmetic shift right top 2"
             74 69 63 20 73 68 69
             66 74 20 72 69 67 68
             74 20 74 6F 70 20 32
      00035F 0D                   11374 	.db 0x0d
      000360 0A                   11375 	.db 0x0a
      000361 00                   11376 	.db 0x00
                                  11377 	.area CSEG    (CODE)
                                  11378 	.area CONST   (CODE)
      000362                      11379 ___str_47:
      000362 3C                   11380 	.ascii "<"
      000363 09                   11381 	.db 0x09
      000364 73 68 69 66 74 20 6C 11382 	.ascii "shift left top 2"
             65 66 74 20 74 6F 70
             20 32
      000374 0D                   11383 	.db 0x0d
      000375 0A                   11384 	.db 0x0a
      000376 00                   11385 	.db 0x00
                                  11386 	.area CSEG    (CODE)
                                  11387 	.area CONST   (CODE)
      000377                      11388 ___str_48:
      000377 7E                   11389 	.ascii "~"
      000378 09                   11390 	.db 0x09
      000379 62 69 74 77 69 73 65 11391 	.ascii "bitwise not top"
             20 6E 6F 74 20 74 6F
             70
      000388 0D                   11392 	.db 0x0d
      000389 0A                   11393 	.db 0x0a
      00038A 00                   11394 	.db 0x00
                                  11395 	.area CSEG    (CODE)
                                  11396 	.area CONST   (CODE)
      00038B                      11397 ___str_49:
      00038B 73                   11398 	.ascii "s"
      00038C 09                   11399 	.db 0x09
      00038D 73 74 61 74 75 73    11400 	.ascii "status"
      000393 0D                   11401 	.db 0x0d
      000394 0A                   11402 	.db 0x0a
      000395 00                   11403 	.db 0x00
                                  11404 	.area CSEG    (CODE)
                                  11405 	.area CONST   (CODE)
      000396                      11406 ___str_50:
      000396 3F                   11407 	.ascii "?"
      000397 09                   11408 	.db 0x09
      000398 68 65 6C 70          11409 	.ascii "help"
      00039C 0D                   11410 	.db 0x0d
      00039D 0A                   11411 	.db 0x0a
      00039E 00                   11412 	.db 0x00
                                  11413 	.area CSEG    (CODE)
                                  11414 	.area CONST   (CODE)
      00039F                      11415 ___str_51:
      00039F 71                   11416 	.ascii "q"
      0003A0 09                   11417 	.db 0x09
      0003A1 71 75 69 74          11418 	.ascii "quit"
      0003A5 0D                   11419 	.db 0x0d
      0003A6 0A                   11420 	.db 0x0a
      0003A7 00                   11421 	.db 0x00
                                  11422 	.area CSEG    (CODE)
                                  11423 	.area CONST   (CODE)
      0003A8                      11424 ___str_52:
      0003A8 54 45 52 4D          11425 	.ascii "TERM"
      0003AC 0D                   11426 	.db 0x0d
      0003AD 0A                   11427 	.db 0x0a
      0003AE 00                   11428 	.db 0x00
                                  11429 	.area CSEG    (CODE)
                                  11430 	.area XINIT   (CODE)
      000000                      11431 __xinit__deltas:
      000000 00 00                11432 	.byte #0x00, #0x00	;  0
      000002 00 00                11433 	.byte #0x00, #0x00	;  0
      000004 00 00                11434 	.byte #0x00, #0x00	;  0
      000006 00 00                11435 	.byte #0x00,#0x00
      000008 00 00                11436 	.byte #0x00,#0x00
      00000A 00 00                11437 	.byte #0x00, #0x00	;  0
      00000C 01 00                11438 	.byte #0x01, #0x00	;  1
      00000E 02 00                11439 	.byte #0x02, #0x00	;  2
      000010 00 00                11440 	.byte #0x00,#0x00
      000012r30s00                11441 	.byte _accumulate, (_accumulate >> 8)
      000014 00 00                11442 	.byte #0x00, #0x00	;  0
      000016 02 00                11443 	.byte #0x02, #0x00	;  2
      000018 01 00                11444 	.byte #0x01, #0x00	;  1
      00001A 00 00                11445 	.byte #0x00,#0x00
      00001CrB2s08                11446 	.byte _operator, (_operator >> 8)
      00001E 01 00                11447 	.byte #0x01, #0x00	;  1
      000020 00 00                11448 	.byte #0x00, #0x00	;  0
      000022 00 00                11449 	.byte #0x00, #0x00	;  0
      000024 00 00                11450 	.byte #0x00,#0x00
      000026 00 00                11451 	.byte #0x00,#0x00
      000028 01 00                11452 	.byte #0x01, #0x00	;  1
      00002A 02 00                11453 	.byte #0x02, #0x00	;  2
      00002C 01 00                11454 	.byte #0x01, #0x00	;  1
      00002E 00 00                11455 	.byte #0x00,#0x00
      000030rB2s08                11456 	.byte _operator, (_operator >> 8)
      000032 01 00                11457 	.byte #0x01, #0x00	;  1
      000034 01 00                11458 	.byte #0x01, #0x00	;  1
      000036 02 00                11459 	.byte #0x02, #0x00	;  2
      000038 00 00                11460 	.byte #0x00,#0x00
      00003Ar30s00                11461 	.byte _accumulate, (_accumulate >> 8)
      00003C 02 00                11462 	.byte #0x02, #0x00	;  2
      00003E 00 00                11463 	.byte #0x00, #0x00	;  0
      000040 00 00                11464 	.byte #0x00, #0x00	;  0
      000042 00 00                11465 	.byte #0x00,#0x00
      000044rACs2B                11466 	.byte _push_acc, (_push_acc >> 8)
      000046 02 00                11467 	.byte #0x02, #0x00	;  2
      000048 07 00                11468 	.byte #0x07, #0x00	;  7
      00004A 00 00                11469 	.byte #0x00, #0x00	;  0
      00004C 00 00                11470 	.byte #0x00,#0x00
      00004ErC8s2C                11471 	.byte _reset_acc, (_reset_acc >> 8)
      000050 02 00                11472 	.byte #0x02, #0x00	;  2
      000052 01 00                11473 	.byte #0x01, #0x00	;  1
      000054 02 00                11474 	.byte #0x02, #0x00	;  2
      000056 00 00                11475 	.byte #0x00,#0x00
      000058r30s00                11476 	.byte _accumulate, (_accumulate >> 8)
      00005A 02 00                11477 	.byte #0x02, #0x00	;  2
      00005C 02 00                11478 	.byte #0x02, #0x00	;  2
      00005E 01 00                11479 	.byte #0x01, #0x00	;  1
      000060 00 00                11480 	.byte #0x00,#0x00
      000062rACs2B                11481 	.byte _push_acc, (_push_acc >> 8)
      000064 FF 7F                11482 	.byte #0xff, #0x7f	;  32767
      000066 06 00                11483 	.byte #0x06, #0x00	;  6
      000068 FF 7F                11484 	.byte #0xff, #0x7f	;  32767
      00006A 00 00                11485 	.byte #0x00,#0x00
      00006CrC8s2C                11486 	.byte _reset_acc, (_reset_acc >> 8)
      00006E FF 7F                11487 	.byte #0xff, #0x7f	;  32767
      000070 07 00                11488 	.byte #0x07, #0x00	;  7
      000072 FF 7F                11489 	.byte #0xff, #0x7f	;  32767
      000074 00 00                11490 	.byte #0x00,#0x00
      000076 00 00                11491 	.byte #0x00,#0x00
      000078 FF 7F                11492 	.byte #0xff, #0x7f	;  32767
      00007A 05 00                11493 	.byte #0x05, #0x00	;  5
      00007C FF 7F                11494 	.byte #0xff, #0x7f	;  32767
      00007E 00 00                11495 	.byte #0x00,#0x00
      000080r32s2D                11496 	.byte _reset_base, (_reset_base >> 8)
      000082 FF 7F                11497 	.byte #0xff, #0x7f	;  32767
      000084 03 00                11498 	.byte #0x03, #0x00	;  3
      000086 FF 7F                11499 	.byte #0xff, #0x7f	;  32767
      000088 00 00                11500 	.byte #0x00,#0x00
      00008ArB0s2D                11501 	.byte _status, (_status >> 8)
      00008C FF 7F                11502 	.byte #0xff, #0x7f	;  32767
      00008E 04 00                11503 	.byte #0x04, #0x00	;  4
      000090 FF 7F                11504 	.byte #0xff, #0x7f	;  32767
      000092 00 00                11505 	.byte #0x00,#0x00
      000094r0Fs36                11506 	.byte _help, (_help >> 8)
      000096 FF 7F                11507 	.byte #0xff, #0x7f	;  32767
      000098 08 00                11508 	.byte #0x08, #0x00	;  8
      00009A 03 00                11509 	.byte #0x03, #0x00	;  3
      00009C 00 00                11510 	.byte #0x00,#0x00
      00009ErA1s01                11511 	.byte _dump_pop, (_dump_pop >> 8)
      0000A0 00 80                11512 	.byte #0x00, #0x80	; -32768
      0000A2 00 80                11513 	.byte #0x00, #0x80	; -32768
      0000A4 00 80                11514 	.byte #0x00, #0x80	; -32768
      0000A6 00 00                11515 	.byte #0x00,#0x00
      0000A8 00 00                11516 	.byte #0x00,#0x00
                                  11517 	.area CABS    (ABS,CODE)
