                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module calc
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _getchar_poll
                                     13 	.globl _stack_iter_peek
                                     14 	.globl _stack_peek
                                     15 	.globl _stack_pop
                                     16 	.globl _stack_push
                                     17 	.globl _stack_init
                                     18 	.globl _state_exec
                                     19 	.globl _state_init
                                     20 	.globl _isxdigit
                                     21 	.globl _printf
                                     22 	.globl _strtol
                                     23 	.globl _CY
                                     24 	.globl _AC
                                     25 	.globl _F0
                                     26 	.globl _RS1
                                     27 	.globl _RS0
                                     28 	.globl _OV
                                     29 	.globl _FL
                                     30 	.globl _P
                                     31 	.globl _TF2
                                     32 	.globl _EXF2
                                     33 	.globl _RCLK
                                     34 	.globl _TCLK
                                     35 	.globl _EXEN2
                                     36 	.globl _TR2
                                     37 	.globl _C_T2
                                     38 	.globl _CP_RL2
                                     39 	.globl _T2CON_7
                                     40 	.globl _T2CON_6
                                     41 	.globl _T2CON_5
                                     42 	.globl _T2CON_4
                                     43 	.globl _T2CON_3
                                     44 	.globl _T2CON_2
                                     45 	.globl _T2CON_1
                                     46 	.globl _T2CON_0
                                     47 	.globl _PT2
                                     48 	.globl _PS
                                     49 	.globl _PT1
                                     50 	.globl _PX1
                                     51 	.globl _PT0
                                     52 	.globl _PX0
                                     53 	.globl _RD
                                     54 	.globl _WR
                                     55 	.globl _T1
                                     56 	.globl _T0
                                     57 	.globl _INT1
                                     58 	.globl _INT0
                                     59 	.globl _TXD
                                     60 	.globl _RXD
                                     61 	.globl _P3_7
                                     62 	.globl _P3_6
                                     63 	.globl _P3_5
                                     64 	.globl _P3_4
                                     65 	.globl _P3_3
                                     66 	.globl _P3_2
                                     67 	.globl _P3_1
                                     68 	.globl _P3_0
                                     69 	.globl _EA
                                     70 	.globl _ET2
                                     71 	.globl _ES
                                     72 	.globl _ET1
                                     73 	.globl _EX1
                                     74 	.globl _ET0
                                     75 	.globl _EX0
                                     76 	.globl _P2_7
                                     77 	.globl _P2_6
                                     78 	.globl _P2_5
                                     79 	.globl _P2_4
                                     80 	.globl _P2_3
                                     81 	.globl _P2_2
                                     82 	.globl _P2_1
                                     83 	.globl _P2_0
                                     84 	.globl _SM0
                                     85 	.globl _SM1
                                     86 	.globl _SM2
                                     87 	.globl _REN
                                     88 	.globl _TB8
                                     89 	.globl _RB8
                                     90 	.globl _TI
                                     91 	.globl _RI
                                     92 	.globl _T2EX
                                     93 	.globl _T2
                                     94 	.globl _P1_7
                                     95 	.globl _P1_6
                                     96 	.globl _P1_5
                                     97 	.globl _P1_4
                                     98 	.globl _P1_3
                                     99 	.globl _P1_2
                                    100 	.globl _P1_1
                                    101 	.globl _P1_0
                                    102 	.globl _TF1
                                    103 	.globl _TR1
                                    104 	.globl _TF0
                                    105 	.globl _TR0
                                    106 	.globl _IE1
                                    107 	.globl _IT1
                                    108 	.globl _IE0
                                    109 	.globl _IT0
                                    110 	.globl _P0_7
                                    111 	.globl _P0_6
                                    112 	.globl _P0_5
                                    113 	.globl _P0_4
                                    114 	.globl _P0_3
                                    115 	.globl _P0_2
                                    116 	.globl _P0_1
                                    117 	.globl _P0_0
                                    118 	.globl _B
                                    119 	.globl _A
                                    120 	.globl _ACC
                                    121 	.globl _PSW
                                    122 	.globl _TH2
                                    123 	.globl _TL2
                                    124 	.globl _RCAP2H
                                    125 	.globl _RCAP2L
                                    126 	.globl _T2MOD
                                    127 	.globl _T2CON
                                    128 	.globl _IP
                                    129 	.globl _P3
                                    130 	.globl _IE
                                    131 	.globl _P2
                                    132 	.globl _SBUF
                                    133 	.globl _SCON
                                    134 	.globl _P1
                                    135 	.globl _TH1
                                    136 	.globl _TH0
                                    137 	.globl _TL1
                                    138 	.globl _TL0
                                    139 	.globl _TMOD
                                    140 	.globl _TCON
                                    141 	.globl _PCON
                                    142 	.globl _DPH
                                    143 	.globl _DPL
                                    144 	.globl _SP
                                    145 	.globl _P0
                                    146 	.globl _putchar
                                    147 	.globl _getchar
                                    148 ;--------------------------------------------------------
                                    149 ; special function registers
                                    150 ;--------------------------------------------------------
                                    151 	.area RSEG    (ABS,DATA)
      000000                        152 	.org 0x0000
                           000080   153 _P0	=	0x0080
                           000081   154 _SP	=	0x0081
                           000082   155 _DPL	=	0x0082
                           000083   156 _DPH	=	0x0083
                           000087   157 _PCON	=	0x0087
                           000088   158 _TCON	=	0x0088
                           000089   159 _TMOD	=	0x0089
                           00008A   160 _TL0	=	0x008a
                           00008B   161 _TL1	=	0x008b
                           00008C   162 _TH0	=	0x008c
                           00008D   163 _TH1	=	0x008d
                           000090   164 _P1	=	0x0090
                           000098   165 _SCON	=	0x0098
                           000099   166 _SBUF	=	0x0099
                           0000A0   167 _P2	=	0x00a0
                           0000A8   168 _IE	=	0x00a8
                           0000B0   169 _P3	=	0x00b0
                           0000B8   170 _IP	=	0x00b8
                           0000C8   171 _T2CON	=	0x00c8
                           0000C9   172 _T2MOD	=	0x00c9
                           0000CA   173 _RCAP2L	=	0x00ca
                           0000CB   174 _RCAP2H	=	0x00cb
                           0000CC   175 _TL2	=	0x00cc
                           0000CD   176 _TH2	=	0x00cd
                           0000D0   177 _PSW	=	0x00d0
                           0000E0   178 _ACC	=	0x00e0
                           0000E0   179 _A	=	0x00e0
                           0000F0   180 _B	=	0x00f0
                                    181 ;--------------------------------------------------------
                                    182 ; special function bits
                                    183 ;--------------------------------------------------------
                                    184 	.area RSEG    (ABS,DATA)
      000000                        185 	.org 0x0000
                           000080   186 _P0_0	=	0x0080
                           000081   187 _P0_1	=	0x0081
                           000082   188 _P0_2	=	0x0082
                           000083   189 _P0_3	=	0x0083
                           000084   190 _P0_4	=	0x0084
                           000085   191 _P0_5	=	0x0085
                           000086   192 _P0_6	=	0x0086
                           000087   193 _P0_7	=	0x0087
                           000088   194 _IT0	=	0x0088
                           000089   195 _IE0	=	0x0089
                           00008A   196 _IT1	=	0x008a
                           00008B   197 _IE1	=	0x008b
                           00008C   198 _TR0	=	0x008c
                           00008D   199 _TF0	=	0x008d
                           00008E   200 _TR1	=	0x008e
                           00008F   201 _TF1	=	0x008f
                           000090   202 _P1_0	=	0x0090
                           000091   203 _P1_1	=	0x0091
                           000092   204 _P1_2	=	0x0092
                           000093   205 _P1_3	=	0x0093
                           000094   206 _P1_4	=	0x0094
                           000095   207 _P1_5	=	0x0095
                           000096   208 _P1_6	=	0x0096
                           000097   209 _P1_7	=	0x0097
                           000090   210 _T2	=	0x0090
                           000091   211 _T2EX	=	0x0091
                           000098   212 _RI	=	0x0098
                           000099   213 _TI	=	0x0099
                           00009A   214 _RB8	=	0x009a
                           00009B   215 _TB8	=	0x009b
                           00009C   216 _REN	=	0x009c
                           00009D   217 _SM2	=	0x009d
                           00009E   218 _SM1	=	0x009e
                           00009F   219 _SM0	=	0x009f
                           0000A0   220 _P2_0	=	0x00a0
                           0000A1   221 _P2_1	=	0x00a1
                           0000A2   222 _P2_2	=	0x00a2
                           0000A3   223 _P2_3	=	0x00a3
                           0000A4   224 _P2_4	=	0x00a4
                           0000A5   225 _P2_5	=	0x00a5
                           0000A6   226 _P2_6	=	0x00a6
                           0000A7   227 _P2_7	=	0x00a7
                           0000A8   228 _EX0	=	0x00a8
                           0000A9   229 _ET0	=	0x00a9
                           0000AA   230 _EX1	=	0x00aa
                           0000AB   231 _ET1	=	0x00ab
                           0000AC   232 _ES	=	0x00ac
                           0000AD   233 _ET2	=	0x00ad
                           0000AF   234 _EA	=	0x00af
                           0000B0   235 _P3_0	=	0x00b0
                           0000B1   236 _P3_1	=	0x00b1
                           0000B2   237 _P3_2	=	0x00b2
                           0000B3   238 _P3_3	=	0x00b3
                           0000B4   239 _P3_4	=	0x00b4
                           0000B5   240 _P3_5	=	0x00b5
                           0000B6   241 _P3_6	=	0x00b6
                           0000B7   242 _P3_7	=	0x00b7
                           0000B0   243 _RXD	=	0x00b0
                           0000B1   244 _TXD	=	0x00b1
                           0000B2   245 _INT0	=	0x00b2
                           0000B3   246 _INT1	=	0x00b3
                           0000B4   247 _T0	=	0x00b4
                           0000B5   248 _T1	=	0x00b5
                           0000B6   249 _WR	=	0x00b6
                           0000B7   250 _RD	=	0x00b7
                           0000B8   251 _PX0	=	0x00b8
                           0000B9   252 _PT0	=	0x00b9
                           0000BA   253 _PX1	=	0x00ba
                           0000BB   254 _PT1	=	0x00bb
                           0000BC   255 _PS	=	0x00bc
                           0000BD   256 _PT2	=	0x00bd
                           0000C8   257 _T2CON_0	=	0x00c8
                           0000C9   258 _T2CON_1	=	0x00c9
                           0000CA   259 _T2CON_2	=	0x00ca
                           0000CB   260 _T2CON_3	=	0x00cb
                           0000CC   261 _T2CON_4	=	0x00cc
                           0000CD   262 _T2CON_5	=	0x00cd
                           0000CE   263 _T2CON_6	=	0x00ce
                           0000CF   264 _T2CON_7	=	0x00cf
                           0000C8   265 _CP_RL2	=	0x00c8
                           0000C9   266 _C_T2	=	0x00c9
                           0000CA   267 _TR2	=	0x00ca
                           0000CB   268 _EXEN2	=	0x00cb
                           0000CC   269 _TCLK	=	0x00cc
                           0000CD   270 _RCLK	=	0x00cd
                           0000CE   271 _EXF2	=	0x00ce
                           0000CF   272 _TF2	=	0x00cf
                           0000D0   273 _P	=	0x00d0
                           0000D1   274 _FL	=	0x00d1
                           0000D2   275 _OV	=	0x00d2
                           0000D3   276 _RS0	=	0x00d3
                           0000D4   277 _RS1	=	0x00d4
                           0000D5   278 _F0	=	0x00d5
                           0000D6   279 _AC	=	0x00d6
                           0000D7   280 _CY	=	0x00d7
                                    281 ;--------------------------------------------------------
                                    282 ; overlayable register banks
                                    283 ;--------------------------------------------------------
                                    284 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        285 	.ds 8
                                    286 ;--------------------------------------------------------
                                    287 ; internal ram data
                                    288 ;--------------------------------------------------------
                                    289 	.area DSEG    (DATA)
                                    290 ;--------------------------------------------------------
                                    291 ; overlayable items in internal ram 
                                    292 ;--------------------------------------------------------
                                    293 ;--------------------------------------------------------
                                    294 ; Stack segment in internal ram 
                                    295 ;--------------------------------------------------------
                                    296 	.area	SSEG
      000000                        297 __start__stack:
      000000                        298 	.ds	1
                                    299 
                                    300 ;--------------------------------------------------------
                                    301 ; indirectly addressable internal ram data
                                    302 ;--------------------------------------------------------
                                    303 	.area ISEG    (DATA)
                                    304 ;--------------------------------------------------------
                                    305 ; absolute internal ram data
                                    306 ;--------------------------------------------------------
                                    307 	.area IABS    (ABS,DATA)
                                    308 	.area IABS    (ABS,DATA)
                                    309 ;--------------------------------------------------------
                                    310 ; bit data
                                    311 ;--------------------------------------------------------
                                    312 	.area BSEG    (BIT)
                                    313 ;--------------------------------------------------------
                                    314 ; paged external ram data
                                    315 ;--------------------------------------------------------
                                    316 	.area PSEG    (PAG,XDATA)
                                    317 ;--------------------------------------------------------
                                    318 ; external ram data
                                    319 ;--------------------------------------------------------
                                    320 	.area XSEG    (XDATA)
      000000                        321 _s:
      000000                        322 	.ds 12
      00000C                        323 _c:
      00000C                        324 	.ds 8205
                                    325 ;--------------------------------------------------------
                                    326 ; absolute external ram data
                                    327 ;--------------------------------------------------------
                                    328 	.area XABS    (ABS,XDATA)
                                    329 ;--------------------------------------------------------
                                    330 ; external initialized ram data
                                    331 ;--------------------------------------------------------
                                    332 	.area XISEG   (XDATA)
      000000                        333 _deltas:
      000000                        334 	.ds 160
                                    335 	.area HOME    (CODE)
                                    336 	.area GSINIT0 (CODE)
                                    337 	.area GSINIT1 (CODE)
                                    338 	.area GSINIT2 (CODE)
                                    339 	.area GSINIT3 (CODE)
                                    340 	.area GSINIT4 (CODE)
                                    341 	.area GSINIT5 (CODE)
                                    342 	.area GSINIT  (CODE)
                                    343 	.area GSFINAL (CODE)
                                    344 	.area CSEG    (CODE)
                                    345 ;--------------------------------------------------------
                                    346 ; interrupt vector 
                                    347 ;--------------------------------------------------------
                                    348 	.area HOME    (CODE)
      000000                        349 __interrupt_vect:
      000000 02r00r00         [24]  350 	ljmp	__sdcc_gsinit_startup
                                    351 ;--------------------------------------------------------
                                    352 ; global & static initialisations
                                    353 ;--------------------------------------------------------
                                    354 	.area HOME    (CODE)
                                    355 	.area GSINIT  (CODE)
                                    356 	.area GSFINAL (CODE)
                                    357 	.area GSINIT  (CODE)
                                    358 	.globl __sdcc_gsinit_startup
                                    359 	.globl __sdcc_program_startup
                                    360 	.globl __start__stack
                                    361 	.globl __mcs51_genXINIT
                                    362 	.globl __mcs51_genXRAMCLEAR
                                    363 	.globl __mcs51_genRAMCLEAR
                                    364 	.area GSFINAL (CODE)
      000000 02r00r03         [24]  365 	ljmp	__sdcc_program_startup
                                    366 ;--------------------------------------------------------
                                    367 ; Home
                                    368 ;--------------------------------------------------------
                                    369 	.area HOME    (CODE)
                                    370 	.area HOME    (CODE)
      000003                        371 __sdcc_program_startup:
      000003 02r23rD7         [24]  372 	ljmp	_main
                                    373 ;	return from main will return to caller
                                    374 ;--------------------------------------------------------
                                    375 ; code
                                    376 ;--------------------------------------------------------
                                    377 	.area CSEG    (CODE)
                                    378 ;------------------------------------------------------------
                                    379 ;Allocation info for local variables in function 'putchar'
                                    380 ;------------------------------------------------------------
                                    381 ;c                         Allocated to registers 
                                    382 ;------------------------------------------------------------
                                    383 ;	calc.c:15: int putchar(int c) __naked {
                                    384 ;	-----------------------------------------
                                    385 ;	 function putchar
                                    386 ;	-----------------------------------------
      000000                        387 _putchar:
                                    388 ;	naked function: no prologue.
                                    389 ;	calc.c:20: __endasm;
      000000 E5 82            [12]  390 	mov	a, dpl
      000002 02 00 30         [24]  391 	ljmp	0x0030
                                    392 ;	calc.c:21: }
                                    393 ;	naked function: no epilogue.
                                    394 ;------------------------------------------------------------
                                    395 ;Allocation info for local variables in function 'getchar'
                                    396 ;------------------------------------------------------------
                                    397 ;	calc.c:23: int getchar(void) __naked {
                                    398 ;	-----------------------------------------
                                    399 ;	 function getchar
                                    400 ;	-----------------------------------------
      000005                        401 _getchar:
                                    402 ;	naked function: no prologue.
                                    403 ;	calc.c:29: __endasm;
      000005 12 00 32         [24]  404 	lcall	0x0032
      000008 F5 82            [12]  405 	mov	dpl, a
      00000A 75 83 00         [24]  406 	mov	dph, #0
      00000D 22               [24]  407 	ret
                                    408 ;	calc.c:30: }
                                    409 ;	naked function: no epilogue.
                                    410 ;------------------------------------------------------------
                                    411 ;Allocation info for local variables in function 'getchar_poll'
                                    412 ;------------------------------------------------------------
                                    413 ;	calc.c:32: int getchar_poll(void) __naked {
                                    414 ;	-----------------------------------------
                                    415 ;	 function getchar_poll
                                    416 ;	-----------------------------------------
      00000E                        417 _getchar_poll:
                                    418 ;	naked function: no prologue.
                                    419 ;	calc.c:44: __endasm;
      00000E 74 FF            [12]  420 	mov	a, #0xff
      000010 F5 F0            [12]  421 	mov	b, a
      000012 30 98 07         [24]  422 	jnb	ri, nochar
      000015 C2 98            [12]  423 	clr	ri
      000017 E5 99            [12]  424 	mov	a, sbuf
      000019 75 F0 00         [24]  425 	mov	b, #0
      00001C                        426 	nochar:
      00001C F5 82            [12]  427 	mov	dpl, a
      00001E 85 F0 83         [24]  428 	mov	dph, b
      000021 22               [24]  429 	ret
                                    430 ;	calc.c:45: }
                                    431 ;	naked function: no epilogue.
                                    432 ;------------------------------------------------------------
                                    433 ;Allocation info for local variables in function 'accumulate'
                                    434 ;------------------------------------------------------------
                                    435 ;delta                     Allocated to stack - _bp -5
                                    436 ;_ctx                      Allocated to registers r5 r6 r7 
                                    437 ;ctx                       Allocated to stack - _bp +8
                                    438 ;d                         Allocated to stack - _bp +11
                                    439 ;sloc0                     Allocated to stack - _bp +1
                                    440 ;sloc1                     Allocated to stack - _bp +4
                                    441 ;------------------------------------------------------------
                                    442 ;	calc.c:84: static int accumulate(void *_ctx, delta_t *delta) __reentrant {
                                    443 ;	-----------------------------------------
                                    444 ;	 function accumulate
                                    445 ;	-----------------------------------------
      000022                        446 _accumulate:
                           000007   447 	ar7 = 0x07
                           000006   448 	ar6 = 0x06
                           000005   449 	ar5 = 0x05
                           000004   450 	ar4 = 0x04
                           000003   451 	ar3 = 0x03
                           000002   452 	ar2 = 0x02
                           000001   453 	ar1 = 0x01
                           000000   454 	ar0 = 0x00
      000022 C0*00            [24]  455 	push	_bp
      000024 E5 81            [12]  456 	mov	a,sp
      000026 F5*00            [12]  457 	mov	_bp,a
      000028 24 0E            [12]  458 	add	a,#0x0e
      00002A F5 81            [12]  459 	mov	sp,a
      00002C AD 82            [24]  460 	mov	r5,dpl
      00002E AE 83            [24]  461 	mov	r6,dph
      000030 AF F0            [24]  462 	mov	r7,b
                                    463 ;	calc.c:85: struct ctx *ctx = (struct ctx *)_ctx;
      000032 E5*00            [12]  464 	mov	a,_bp
      000034 24 08            [12]  465 	add	a,#0x08
      000036 F8               [12]  466 	mov	r0,a
      000037 A6 05            [24]  467 	mov	@r0,ar5
      000039 08               [12]  468 	inc	r0
      00003A A6 06            [24]  469 	mov	@r0,ar6
      00003C 08               [12]  470 	inc	r0
      00003D A6 07            [24]  471 	mov	@r0,ar7
                                    472 ;	calc.c:90: if (!ctx->acc_valid) {
      00003F E5*00            [12]  473 	mov	a,_bp
      000041 24 08            [12]  474 	add	a,#0x08
      000043 F8               [12]  475 	mov	r0,a
      000044 74 06            [12]  476 	mov	a,#0x06
      000046 26               [12]  477 	add	a,@r0
      000047 FA               [12]  478 	mov	r2,a
      000048 E4               [12]  479 	clr	a
      000049 08               [12]  480 	inc	r0
      00004A 36               [12]  481 	addc	a,@r0
      00004B FB               [12]  482 	mov	r3,a
      00004C 08               [12]  483 	inc	r0
      00004D 86 04            [24]  484 	mov	ar4,@r0
      00004F 8A 82            [24]  485 	mov	dpl,r2
      000051 8B 83            [24]  486 	mov	dph,r3
      000053 8C F0            [24]  487 	mov	b,r4
      000055 12r00r00         [24]  488 	lcall	__gptrget
      000058 70 31            [24]  489 	jnz	00102$
                                    490 ;	calc.c:91: ctx->acc_valid = 1;
      00005A 8A 82            [24]  491 	mov	dpl,r2
      00005C 8B 83            [24]  492 	mov	dph,r3
      00005E 8C F0            [24]  493 	mov	b,r4
      000060 74 01            [12]  494 	mov	a,#0x01
      000062 12r00r00         [24]  495 	lcall	__gptrput
                                    496 ;	calc.c:92: ctx->acc = 0l;
      000065 E5*00            [12]  497 	mov	a,_bp
      000067 24 08            [12]  498 	add	a,#0x08
      000069 F8               [12]  499 	mov	r0,a
      00006A 74 02            [12]  500 	mov	a,#0x02
      00006C 26               [12]  501 	add	a,@r0
      00006D FA               [12]  502 	mov	r2,a
      00006E E4               [12]  503 	clr	a
      00006F 08               [12]  504 	inc	r0
      000070 36               [12]  505 	addc	a,@r0
      000071 FB               [12]  506 	mov	r3,a
      000072 08               [12]  507 	inc	r0
      000073 86 04            [24]  508 	mov	ar4,@r0
      000075 8A 82            [24]  509 	mov	dpl,r2
      000077 8B 83            [24]  510 	mov	dph,r3
      000079 8C F0            [24]  511 	mov	b,r4
      00007B E4               [12]  512 	clr	a
      00007C 12r00r00         [24]  513 	lcall	__gptrput
      00007F A3               [24]  514 	inc	dptr
      000080 12r00r00         [24]  515 	lcall	__gptrput
      000083 A3               [24]  516 	inc	dptr
      000084 12r00r00         [24]  517 	lcall	__gptrput
      000087 A3               [24]  518 	inc	dptr
      000088 12r00r00         [24]  519 	lcall	__gptrput
      00008B                        520 00102$:
                                    521 ;	calc.c:95: d = strtol(ctx->digit, NULL, ctx->base);
      00008B E5*00            [12]  522 	mov	a,_bp
      00008D 24 08            [12]  523 	add	a,#0x08
      00008F F8               [12]  524 	mov	r0,a
      000090 86 82            [24]  525 	mov	dpl,@r0
      000092 08               [12]  526 	inc	r0
      000093 86 83            [24]  527 	mov	dph,@r0
      000095 08               [12]  528 	inc	r0
      000096 86 F0            [24]  529 	mov	b,@r0
      000098 12r00r00         [24]  530 	lcall	__gptrget
      00009B FB               [12]  531 	mov	r3,a
      00009C A3               [24]  532 	inc	dptr
      00009D 12r00r00         [24]  533 	lcall	__gptrget
      0000A0 FC               [12]  534 	mov	r4,a
      0000A1 E5*00            [12]  535 	mov	a,_bp
      0000A3 24 08            [12]  536 	add	a,#0x08
      0000A5 F8               [12]  537 	mov	r0,a
      0000A6 74 07            [12]  538 	mov	a,#0x07
      0000A8 26               [12]  539 	add	a,@r0
      0000A9 FA               [12]  540 	mov	r2,a
      0000AA E4               [12]  541 	clr	a
      0000AB 08               [12]  542 	inc	r0
      0000AC 36               [12]  543 	addc	a,@r0
      0000AD FE               [12]  544 	mov	r6,a
      0000AE 08               [12]  545 	inc	r0
      0000AF 86 07            [24]  546 	mov	ar7,@r0
      0000B1 C0 03            [24]  547 	push	ar3
      0000B3 C0 04            [24]  548 	push	ar4
      0000B5 E4               [12]  549 	clr	a
      0000B6 C0 E0            [24]  550 	push	acc
      0000B8 C0 E0            [24]  551 	push	acc
      0000BA C0 E0            [24]  552 	push	acc
      0000BC 8A 82            [24]  553 	mov	dpl,r2
      0000BE 8E 83            [24]  554 	mov	dph,r6
      0000C0 8F F0            [24]  555 	mov	b,r7
      0000C2 12r00r00         [24]  556 	lcall	_strtol
      0000C5 C8               [12]  557 	xch	a,r0
      0000C6 E5*00            [12]  558 	mov	a,_bp
      0000C8 24 0B            [12]  559 	add	a,#0x0b
      0000CA C8               [12]  560 	xch	a,r0
      0000CB A6 82            [24]  561 	mov	@r0,dpl
      0000CD 08               [12]  562 	inc	r0
      0000CE A6 83            [24]  563 	mov	@r0,dph
      0000D0 08               [12]  564 	inc	r0
      0000D1 A6 F0            [24]  565 	mov	@r0,b
      0000D3 08               [12]  566 	inc	r0
      0000D4 F6               [12]  567 	mov	@r0,a
      0000D5 E5 81            [12]  568 	mov	a,sp
      0000D7 24 FB            [12]  569 	add	a,#0xfb
      0000D9 F5 81            [12]  570 	mov	sp,a
                                    571 ;	calc.c:96: ctx->acc = ctx->acc * (long)ctx->base + d;
      0000DB E5*00            [12]  572 	mov	a,_bp
      0000DD 24 08            [12]  573 	add	a,#0x08
      0000DF F8               [12]  574 	mov	r0,a
      0000E0 A9*00            [24]  575 	mov	r1,_bp
      0000E2 09               [12]  576 	inc	r1
      0000E3 74 02            [12]  577 	mov	a,#0x02
      0000E5 26               [12]  578 	add	a,@r0
      0000E6 F7               [12]  579 	mov	@r1,a
      0000E7 E4               [12]  580 	clr	a
      0000E8 08               [12]  581 	inc	r0
      0000E9 36               [12]  582 	addc	a,@r0
      0000EA 09               [12]  583 	inc	r1
      0000EB F7               [12]  584 	mov	@r1,a
      0000EC 08               [12]  585 	inc	r0
      0000ED 09               [12]  586 	inc	r1
      0000EE E6               [12]  587 	mov	a,@r0
      0000EF F7               [12]  588 	mov	@r1,a
      0000F0 A8*00            [24]  589 	mov	r0,_bp
      0000F2 08               [12]  590 	inc	r0
      0000F3 86 82            [24]  591 	mov	dpl,@r0
      0000F5 08               [12]  592 	inc	r0
      0000F6 86 83            [24]  593 	mov	dph,@r0
      0000F8 08               [12]  594 	inc	r0
      0000F9 86 F0            [24]  595 	mov	b,@r0
      0000FB E5*00            [12]  596 	mov	a,_bp
      0000FD 24 04            [12]  597 	add	a,#0x04
      0000FF F9               [12]  598 	mov	r1,a
      000100 12r00r00         [24]  599 	lcall	__gptrget
      000103 F7               [12]  600 	mov	@r1,a
      000104 A3               [24]  601 	inc	dptr
      000105 12r00r00         [24]  602 	lcall	__gptrget
      000108 09               [12]  603 	inc	r1
      000109 F7               [12]  604 	mov	@r1,a
      00010A A3               [24]  605 	inc	dptr
      00010B 12r00r00         [24]  606 	lcall	__gptrget
      00010E 09               [12]  607 	inc	r1
      00010F F7               [12]  608 	mov	@r1,a
      000110 A3               [24]  609 	inc	dptr
      000111 12r00r00         [24]  610 	lcall	__gptrget
      000114 09               [12]  611 	inc	r1
      000115 F7               [12]  612 	mov	@r1,a
      000116 E5*00            [12]  613 	mov	a,_bp
      000118 24 08            [12]  614 	add	a,#0x08
      00011A F8               [12]  615 	mov	r0,a
      00011B 86 82            [24]  616 	mov	dpl,@r0
      00011D 08               [12]  617 	inc	r0
      00011E 86 83            [24]  618 	mov	dph,@r0
      000120 08               [12]  619 	inc	r0
      000121 86 F0            [24]  620 	mov	b,@r0
      000123 12r00r00         [24]  621 	lcall	__gptrget
      000126 FA               [12]  622 	mov	r2,a
      000127 A3               [24]  623 	inc	dptr
      000128 12r00r00         [24]  624 	lcall	__gptrget
      00012B FB               [12]  625 	mov	r3,a
      00012C 33               [12]  626 	rlc	a
      00012D 95 E0            [12]  627 	subb	a,acc
      00012F FE               [12]  628 	mov	r6,a
      000130 FF               [12]  629 	mov	r7,a
      000131 C0 02            [24]  630 	push	ar2
      000133 C0 03            [24]  631 	push	ar3
      000135 C0 06            [24]  632 	push	ar6
      000137 C0 07            [24]  633 	push	ar7
      000139 E5*00            [12]  634 	mov	a,_bp
      00013B 24 04            [12]  635 	add	a,#0x04
      00013D F8               [12]  636 	mov	r0,a
      00013E 86 82            [24]  637 	mov	dpl,@r0
      000140 08               [12]  638 	inc	r0
      000141 86 83            [24]  639 	mov	dph,@r0
      000143 08               [12]  640 	inc	r0
      000144 86 F0            [24]  641 	mov	b,@r0
      000146 08               [12]  642 	inc	r0
      000147 E6               [12]  643 	mov	a,@r0
      000148 12r00r00         [24]  644 	lcall	__mullong
      00014B AC 82            [24]  645 	mov	r4,dpl
      00014D AD 83            [24]  646 	mov	r5,dph
      00014F AE F0            [24]  647 	mov	r6,b
      000151 FF               [12]  648 	mov	r7,a
      000152 E5 81            [12]  649 	mov	a,sp
      000154 24 FC            [12]  650 	add	a,#0xfc
      000156 F5 81            [12]  651 	mov	sp,a
      000158 E5*00            [12]  652 	mov	a,_bp
      00015A 24 0B            [12]  653 	add	a,#0x0b
      00015C F8               [12]  654 	mov	r0,a
      00015D E6               [12]  655 	mov	a,@r0
      00015E 2C               [12]  656 	add	a,r4
      00015F FC               [12]  657 	mov	r4,a
      000160 08               [12]  658 	inc	r0
      000161 E6               [12]  659 	mov	a,@r0
      000162 3D               [12]  660 	addc	a,r5
      000163 FD               [12]  661 	mov	r5,a
      000164 08               [12]  662 	inc	r0
      000165 E6               [12]  663 	mov	a,@r0
      000166 3E               [12]  664 	addc	a,r6
      000167 FE               [12]  665 	mov	r6,a
      000168 08               [12]  666 	inc	r0
      000169 E6               [12]  667 	mov	a,@r0
      00016A 3F               [12]  668 	addc	a,r7
      00016B FF               [12]  669 	mov	r7,a
      00016C A8*00            [24]  670 	mov	r0,_bp
      00016E 08               [12]  671 	inc	r0
      00016F 86 82            [24]  672 	mov	dpl,@r0
      000171 08               [12]  673 	inc	r0
      000172 86 83            [24]  674 	mov	dph,@r0
      000174 08               [12]  675 	inc	r0
      000175 86 F0            [24]  676 	mov	b,@r0
      000177 EC               [12]  677 	mov	a,r4
      000178 12r00r00         [24]  678 	lcall	__gptrput
      00017B A3               [24]  679 	inc	dptr
      00017C ED               [12]  680 	mov	a,r5
      00017D 12r00r00         [24]  681 	lcall	__gptrput
      000180 A3               [24]  682 	inc	dptr
      000181 EE               [12]  683 	mov	a,r6
      000182 12r00r00         [24]  684 	lcall	__gptrput
      000185 A3               [24]  685 	inc	dptr
      000186 EF               [12]  686 	mov	a,r7
      000187 12r00r00         [24]  687 	lcall	__gptrput
                                    688 ;	calc.c:98: return 1;
      00018A 90 00 01         [24]  689 	mov	dptr,#0x0001
                                    690 ;	calc.c:99: }
      00018D 85*00 81         [24]  691 	mov	sp,_bp
      000190 D0*00            [24]  692 	pop	_bp
      000192 22               [24]  693 	ret
                                    694 ;------------------------------------------------------------
                                    695 ;Allocation info for local variables in function 'dump_pop'
                                    696 ;------------------------------------------------------------
                                    697 ;delta                     Allocated to stack - _bp -5
                                    698 ;_ctx                      Allocated to registers r5 r6 r7 
                                    699 ;ctx                       Allocated to stack - _bp +5
                                    700 ;d                         Allocated to stack - _bp +8
                                    701 ;r                         Allocated to stack - _bp +2
                                    702 ;__1310720001              Allocated to registers 
                                    703 ;s                         Allocated to registers r5 r6 r7 
                                    704 ;__1966080003              Allocated to registers 
                                    705 ;s                         Allocated to registers r4 r5 r6 
                                    706 ;__1966080005              Allocated to registers 
                                    707 ;s                         Allocated to registers r4 r5 r6 
                                    708 ;__1966080007              Allocated to registers r3 r4 r5 r6 
                                    709 ;d                         Allocated to stack - _bp +12
                                    710 ;mask                      Allocated to stack - _bp +16
                                    711 ;__1966080009              Allocated to registers 
                                    712 ;s                         Allocated to registers r4 r5 r6 
                                    713 ;sloc0                     Allocated to stack - _bp +1
                                    714 ;sloc1                     Allocated to stack - _bp +2
                                    715 ;------------------------------------------------------------
                                    716 ;	calc.c:101: static int dump_pop(void *_ctx, delta_t *delta) __reentrant {
                                    717 ;	-----------------------------------------
                                    718 ;	 function dump_pop
                                    719 ;	-----------------------------------------
      000193                        720 _dump_pop:
      000193 C0*00            [24]  721 	push	_bp
      000195 E5 81            [12]  722 	mov	a,sp
      000197 F5*00            [12]  723 	mov	_bp,a
      000199 24 13            [12]  724 	add	a,#0x13
      00019B F5 81            [12]  725 	mov	sp,a
      00019D AD 82            [24]  726 	mov	r5,dpl
      00019F AE 83            [24]  727 	mov	r6,dph
      0001A1 AF F0            [24]  728 	mov	r7,b
                                    729 ;	calc.c:102: struct ctx *ctx = (struct ctx *)_ctx;
      0001A3 E5*00            [12]  730 	mov	a,_bp
      0001A5 24 05            [12]  731 	add	a,#0x05
      0001A7 F8               [12]  732 	mov	r0,a
      0001A8 A6 05            [24]  733 	mov	@r0,ar5
      0001AA 08               [12]  734 	inc	r0
      0001AB A6 06            [24]  735 	mov	@r0,ar6
      0001AD 08               [12]  736 	inc	r0
      0001AE A6 07            [24]  737 	mov	@r0,ar7
                                    738 ;	calc.c:106: if (delta->event == EVENT_TERM) printstr("\r\n");
      0001B0 E5*00            [12]  739 	mov	a,_bp
      0001B2 24 FB            [12]  740 	add	a,#0xfb
      0001B4 F8               [12]  741 	mov	r0,a
      0001B5 86 02            [24]  742 	mov	ar2,@r0
      0001B7 08               [12]  743 	inc	r0
      0001B8 86 03            [24]  744 	mov	ar3,@r0
      0001BA 08               [12]  745 	inc	r0
      0001BB 86 04            [24]  746 	mov	ar4,@r0
      0001BD 74 02            [12]  747 	mov	a,#0x02
      0001BF 2A               [12]  748 	add	a,r2
      0001C0 FA               [12]  749 	mov	r2,a
      0001C1 E4               [12]  750 	clr	a
      0001C2 3B               [12]  751 	addc	a,r3
      0001C3 FB               [12]  752 	mov	r3,a
      0001C4 8A 82            [24]  753 	mov	dpl,r2
      0001C6 8B 83            [24]  754 	mov	dph,r3
      0001C8 8C F0            [24]  755 	mov	b,r4
      0001CA 12r00r00         [24]  756 	lcall	__gptrget
      0001CD FE               [12]  757 	mov	r6,a
      0001CE A3               [24]  758 	inc	dptr
      0001CF 12r00r00         [24]  759 	lcall	__gptrget
      0001D2 FF               [12]  760 	mov	r7,a
      0001D3 BE 07 3D         [24]  761 	cjne	r6,#0x07,00102$
      0001D6 BF 00 3A         [24]  762 	cjne	r7,#0x00,00102$
      0001D9 7Dr00            [12]  763 	mov	r5,#___str_0
      0001DB 7Es00            [12]  764 	mov	r6,#(___str_0 >> 8)
      0001DD 7F 80            [12]  765 	mov	r7,#0x80
                                    766 ;	calc.c:50: return;
      0001DF                        767 00122$:
                                    768 ;	calc.c:48: for (; *s; s++) putchar(*s);
      0001DF 8D 82            [24]  769 	mov	dpl,r5
      0001E1 8E 83            [24]  770 	mov	dph,r6
      0001E3 8F F0            [24]  771 	mov	b,r7
      0001E5 A8*00            [24]  772 	mov	r0,_bp
      0001E7 08               [12]  773 	inc	r0
      0001E8 12r00r00         [24]  774 	lcall	__gptrget
      0001EB F6               [12]  775 	mov	@r0,a
      0001EC A8*00            [24]  776 	mov	r0,_bp
      0001EE 08               [12]  777 	inc	r0
      0001EF E6               [12]  778 	mov	a,@r0
      0001F0 60 21            [24]  779 	jz	00102$
      0001F2 C0 02            [24]  780 	push	ar2
      0001F4 C0 03            [24]  781 	push	ar3
      0001F6 C0 04            [24]  782 	push	ar4
      0001F8 A8*00            [24]  783 	mov	r0,_bp
      0001FA 08               [12]  784 	inc	r0
      0001FB 86 03            [24]  785 	mov	ar3,@r0
      0001FD 7C 00            [12]  786 	mov	r4,#0x00
      0001FF 8B 82            [24]  787 	mov	dpl,r3
      000201 8C 83            [24]  788 	mov	dph,r4
      000203 12r00r00         [24]  789 	lcall	_putchar
      000206 0D               [12]  790 	inc	r5
      000207 BD 00 01         [24]  791 	cjne	r5,#0x00,00210$
      00020A 0E               [12]  792 	inc	r6
      00020B                        793 00210$:
      00020B D0 04            [24]  794 	pop	ar4
      00020D D0 03            [24]  795 	pop	ar3
      00020F D0 02            [24]  796 	pop	ar2
                                    797 ;	calc.c:106: if (delta->event == EVENT_TERM) printstr("\r\n");
      000211 80 CC            [24]  798 	sjmp	00122$
      000213                        799 00102$:
                                    800 ;	calc.c:108: r = stack_pop(&ctx->s, &d);
      000213 C0 02            [24]  801 	push	ar2
      000215 C0 03            [24]  802 	push	ar3
      000217 C0 04            [24]  803 	push	ar4
      000219 E5*00            [12]  804 	mov	a,_bp
      00021B 24 08            [12]  805 	add	a,#0x08
      00021D FF               [12]  806 	mov	r7,a
      00021E A8*00            [24]  807 	mov	r0,_bp
      000220 08               [12]  808 	inc	r0
      000221 08               [12]  809 	inc	r0
      000222 A6 07            [24]  810 	mov	@r0,ar7
      000224 08               [12]  811 	inc	r0
      000225 76 00            [12]  812 	mov	@r0,#0x00
      000227 08               [12]  813 	inc	r0
      000228 76 40            [12]  814 	mov	@r0,#0x40
      00022A E5*00            [12]  815 	mov	a,_bp
      00022C 24 05            [12]  816 	add	a,#0x05
      00022E F8               [12]  817 	mov	r0,a
      00022F 74 09            [12]  818 	mov	a,#0x09
      000231 26               [12]  819 	add	a,@r0
      000232 FA               [12]  820 	mov	r2,a
      000233 E4               [12]  821 	clr	a
      000234 08               [12]  822 	inc	r0
      000235 36               [12]  823 	addc	a,@r0
      000236 FB               [12]  824 	mov	r3,a
      000237 08               [12]  825 	inc	r0
      000238 86 06            [24]  826 	mov	ar6,@r0
      00023A C0 07            [24]  827 	push	ar7
      00023C C0 04            [24]  828 	push	ar4
      00023E C0 03            [24]  829 	push	ar3
      000240 C0 02            [24]  830 	push	ar2
      000242 A8*00            [24]  831 	mov	r0,_bp
      000244 08               [12]  832 	inc	r0
      000245 08               [12]  833 	inc	r0
      000246 E6               [12]  834 	mov	a,@r0
      000247 C0 E0            [24]  835 	push	acc
      000249 08               [12]  836 	inc	r0
      00024A E6               [12]  837 	mov	a,@r0
      00024B C0 E0            [24]  838 	push	acc
      00024D 08               [12]  839 	inc	r0
      00024E E6               [12]  840 	mov	a,@r0
      00024F C0 E0            [24]  841 	push	acc
      000251 8A 82            [24]  842 	mov	dpl,r2
      000253 8B 83            [24]  843 	mov	dph,r3
      000255 8E F0            [24]  844 	mov	b,r6
      000257 12r00r00         [24]  845 	lcall	_stack_pop
      00025A AD 82            [24]  846 	mov	r5,dpl
      00025C AE 83            [24]  847 	mov	r6,dph
      00025E 15 81            [12]  848 	dec	sp
      000260 15 81            [12]  849 	dec	sp
      000262 15 81            [12]  850 	dec	sp
      000264 D0 02            [24]  851 	pop	ar2
      000266 D0 03            [24]  852 	pop	ar3
      000268 D0 04            [24]  853 	pop	ar4
      00026A D0 07            [24]  854 	pop	ar7
      00026C A8*00            [24]  855 	mov	r0,_bp
      00026E 08               [12]  856 	inc	r0
      00026F 08               [12]  857 	inc	r0
      000270 A6 05            [24]  858 	mov	@r0,ar5
      000272 08               [12]  859 	inc	r0
      000273 A6 06            [24]  860 	mov	@r0,ar6
                                    861 ;	calc.c:109: if (!r) {
      000275 D0 04            [24]  862 	pop	ar4
      000277 D0 03            [24]  863 	pop	ar3
      000279 D0 02            [24]  864 	pop	ar2
      00027B ED               [12]  865 	mov	a,r5
      00027C 4E               [12]  866 	orl	a,r6
      00027D 70 3D            [24]  867 	jnz	00154$
                                    868 ;	calc.c:110: if (delta->event != EVENT_TERM) printstr("stack underflow\r\n");
      00027F 8A 82            [24]  869 	mov	dpl,r2
      000281 8B 83            [24]  870 	mov	dph,r3
      000283 8C F0            [24]  871 	mov	b,r4
      000285 12r00r00         [24]  872 	lcall	__gptrget
      000288 FA               [12]  873 	mov	r2,a
      000289 A3               [24]  874 	inc	dptr
      00028A 12r00r00         [24]  875 	lcall	__gptrget
      00028D FB               [12]  876 	mov	r3,a
      00028E BA 07 06         [24]  877 	cjne	r2,#0x07,00212$
      000291 BB 00 03         [24]  878 	cjne	r3,#0x00,00212$
      000294 02r04r3E         [24]  879 	ljmp	00110$
      000297                        880 00212$:
      000297 7Cr03            [12]  881 	mov	r4,#___str_1
      000299 7Ds00            [12]  882 	mov	r5,#(___str_1 >> 8)
      00029B 7E 80            [12]  883 	mov	r6,#0x80
                                    884 ;	calc.c:50: return;
      00029D                        885 00125$:
                                    886 ;	calc.c:48: for (; *s; s++) putchar(*s);
      00029D 8C 82            [24]  887 	mov	dpl,r4
      00029F 8D 83            [24]  888 	mov	dph,r5
      0002A1 8E F0            [24]  889 	mov	b,r6
      0002A3 12r00r00         [24]  890 	lcall	__gptrget
      0002A6 FB               [12]  891 	mov	r3,a
      0002A7 70 03            [24]  892 	jnz	00213$
      0002A9 02r04r3E         [24]  893 	ljmp	00110$
      0002AC                        894 00213$:
      0002AC 7A 00            [12]  895 	mov	r2,#0x00
      0002AE 8B 82            [24]  896 	mov	dpl,r3
      0002B0 8A 83            [24]  897 	mov	dph,r2
      0002B2 12r00r00         [24]  898 	lcall	_putchar
      0002B5 0C               [12]  899 	inc	r4
                                    900 ;	calc.c:111: } else while (r > 0) {
      0002B6 BC 00 E4         [24]  901 	cjne	r4,#0x00,00125$
      0002B9 0D               [12]  902 	inc	r5
      0002BA 80 E1            [24]  903 	sjmp	00125$
      0002BC                        904 00154$:
      0002BC                        905 00105$:
      0002BC A8*00            [24]  906 	mov	r0,_bp
      0002BE 08               [12]  907 	inc	r0
      0002BF 08               [12]  908 	inc	r0
      0002C0 C3               [12]  909 	clr	c
      0002C1 E4               [12]  910 	clr	a
      0002C2 96               [12]  911 	subb	a,@r0
      0002C3 74 80            [12]  912 	mov	a,#(0x00 ^ 0x80)
      0002C5 08               [12]  913 	inc	r0
      0002C6 86 F0            [24]  914 	mov	b,@r0
      0002C8 63 F0 80         [24]  915 	xrl	b,#0x80
      0002CB 95 F0            [12]  916 	subb	a,b
      0002CD 40 03            [24]  917 	jc	00215$
      0002CF 02r04r3E         [24]  918 	ljmp	00110$
      0002D2                        919 00215$:
                                    920 ;	calc.c:112: printstr("VA ");
      0002D2 7Cr15            [12]  921 	mov	r4,#___str_2
      0002D4 7Ds00            [12]  922 	mov	r5,#(___str_2 >> 8)
      0002D6 7E 80            [12]  923 	mov	r6,#0x80
                                    924 ;	calc.c:50: return;
      0002D8                        925 00128$:
                                    926 ;	calc.c:48: for (; *s; s++) putchar(*s);
      0002D8 8C 82            [24]  927 	mov	dpl,r4
      0002DA 8D 83            [24]  928 	mov	dph,r5
      0002DC 8E F0            [24]  929 	mov	b,r6
      0002DE 12r00r00         [24]  930 	lcall	__gptrget
      0002E1 FB               [12]  931 	mov	r3,a
      0002E2 60 10            [24]  932 	jz	00116$
      0002E4 7A 00            [12]  933 	mov	r2,#0x00
      0002E6 8B 82            [24]  934 	mov	dpl,r3
      0002E8 8A 83            [24]  935 	mov	dph,r2
      0002EA 12r00r00         [24]  936 	lcall	_putchar
      0002ED 0C               [12]  937 	inc	r4
                                    938 ;	calc.c:112: printstr("VA ");
      0002EE BC 00 E7         [24]  939 	cjne	r4,#0x00,00128$
      0002F1 0D               [12]  940 	inc	r5
      0002F2 80 E4            [24]  941 	sjmp	00128$
      0002F4                        942 00116$:
                                    943 ;	calc.c:113: printf("% 11ld / ", d);
      0002F4 C0 07            [24]  944 	push	ar7
      0002F6 E5*00            [12]  945 	mov	a,_bp
      0002F8 24 08            [12]  946 	add	a,#0x08
      0002FA F8               [12]  947 	mov	r0,a
      0002FB E6               [12]  948 	mov	a,@r0
      0002FC C0 E0            [24]  949 	push	acc
      0002FE 08               [12]  950 	inc	r0
      0002FF E6               [12]  951 	mov	a,@r0
      000300 C0 E0            [24]  952 	push	acc
      000302 08               [12]  953 	inc	r0
      000303 E6               [12]  954 	mov	a,@r0
      000304 C0 E0            [24]  955 	push	acc
      000306 08               [12]  956 	inc	r0
      000307 E6               [12]  957 	mov	a,@r0
      000308 C0 E0            [24]  958 	push	acc
      00030A 74r19            [12]  959 	mov	a,#___str_3
      00030C C0 E0            [24]  960 	push	acc
      00030E 74s00            [12]  961 	mov	a,#(___str_3 >> 8)
      000310 C0 E0            [24]  962 	push	acc
      000312 74 80            [12]  963 	mov	a,#0x80
      000314 C0 E0            [24]  964 	push	acc
      000316 12r00r00         [24]  965 	lcall	_printf
      000319 E5 81            [12]  966 	mov	a,sp
      00031B 24 F9            [12]  967 	add	a,#0xf9
      00031D F5 81            [12]  968 	mov	sp,a
                                    969 ;	calc.c:114: printf("%08lx / ", d);
      00031F E5*00            [12]  970 	mov	a,_bp
      000321 24 08            [12]  971 	add	a,#0x08
      000323 F8               [12]  972 	mov	r0,a
      000324 E6               [12]  973 	mov	a,@r0
      000325 C0 E0            [24]  974 	push	acc
      000327 08               [12]  975 	inc	r0
      000328 E6               [12]  976 	mov	a,@r0
      000329 C0 E0            [24]  977 	push	acc
      00032B 08               [12]  978 	inc	r0
      00032C E6               [12]  979 	mov	a,@r0
      00032D C0 E0            [24]  980 	push	acc
      00032F 08               [12]  981 	inc	r0
      000330 E6               [12]  982 	mov	a,@r0
      000331 C0 E0            [24]  983 	push	acc
      000333 74r23            [12]  984 	mov	a,#___str_4
      000335 C0 E0            [24]  985 	push	acc
      000337 74s00            [12]  986 	mov	a,#(___str_4 >> 8)
      000339 C0 E0            [24]  987 	push	acc
      00033B 74 80            [12]  988 	mov	a,#0x80
      00033D C0 E0            [24]  989 	push	acc
      00033F 12r00r00         [24]  990 	lcall	_printf
      000342 E5 81            [12]  991 	mov	a,sp
      000344 24 F9            [12]  992 	add	a,#0xf9
      000346 F5 81            [12]  993 	mov	sp,a
      000348 D0 07            [24]  994 	pop	ar7
                                    995 ;	calc.c:115: printbin(d);
      00034A E5*00            [12]  996 	mov	a,_bp
      00034C 24 08            [12]  997 	add	a,#0x08
      00034E F8               [12]  998 	mov	r0,a
      00034F 86 03            [24]  999 	mov	ar3,@r0
      000351 08               [12] 1000 	inc	r0
      000352 86 04            [24] 1001 	mov	ar4,@r0
      000354 08               [12] 1002 	inc	r0
      000355 86 05            [24] 1003 	mov	ar5,@r0
      000357 08               [12] 1004 	inc	r0
      000358 86 06            [24] 1005 	mov	ar6,@r0
      00035A E5*00            [12] 1006 	mov	a,_bp
      00035C 24 0C            [12] 1007 	add	a,#0x0c
      00035E F8               [12] 1008 	mov	r0,a
      00035F A6 03            [24] 1009 	mov	@r0,ar3
      000361 08               [12] 1010 	inc	r0
      000362 A6 04            [24] 1011 	mov	@r0,ar4
      000364 08               [12] 1012 	inc	r0
      000365 A6 05            [24] 1013 	mov	@r0,ar5
      000367 08               [12] 1014 	inc	r0
      000368 A6 06            [24] 1015 	mov	@r0,ar6
                                   1016 ;	calc.c:56: for (mask = 0x80000000lu; mask; mask >>= 1)
      00036A E5*00            [12] 1017 	mov	a,_bp
      00036C 24 10            [12] 1018 	add	a,#0x10
      00036E F8               [12] 1019 	mov	r0,a
      00036F E4               [12] 1020 	clr	a
      000370 F6               [12] 1021 	mov	@r0,a
      000371 08               [12] 1022 	inc	r0
      000372 F6               [12] 1023 	mov	@r0,a
      000373 08               [12] 1024 	inc	r0
      000374 F6               [12] 1025 	mov	@r0,a
      000375 08               [12] 1026 	inc	r0
      000376 76 80            [12] 1027 	mov	@r0,#0x80
      000378                       1028 00130$:
                                   1029 ;	calc.c:57: (void)putchar((d & mask) ? (int)'1' : (int)'0');
      000378 C0 07            [24] 1030 	push	ar7
      00037A E5*00            [12] 1031 	mov	a,_bp
      00037C 24 0C            [12] 1032 	add	a,#0x0c
      00037E F8               [12] 1033 	mov	r0,a
      00037F 86 03            [24] 1034 	mov	ar3,@r0
      000381 08               [12] 1035 	inc	r0
      000382 86 05            [24] 1036 	mov	ar5,@r0
      000384 08               [12] 1037 	inc	r0
      000385 86 06            [24] 1038 	mov	ar6,@r0
      000387 08               [12] 1039 	inc	r0
      000388 86 07            [24] 1040 	mov	ar7,@r0
      00038A E5*00            [12] 1041 	mov	a,_bp
      00038C 24 10            [12] 1042 	add	a,#0x10
      00038E F8               [12] 1043 	mov	r0,a
      00038F E6               [12] 1044 	mov	a,@r0
      000390 52 03            [12] 1045 	anl	ar3,a
      000392 08               [12] 1046 	inc	r0
      000393 E6               [12] 1047 	mov	a,@r0
      000394 52 05            [12] 1048 	anl	ar5,a
      000396 08               [12] 1049 	inc	r0
      000397 E6               [12] 1050 	mov	a,@r0
      000398 52 06            [12] 1051 	anl	ar6,a
      00039A 08               [12] 1052 	inc	r0
      00039B E6               [12] 1053 	mov	a,@r0
      00039C 52 07            [12] 1054 	anl	ar7,a
      00039E EB               [12] 1055 	mov	a,r3
      00039F 4D               [12] 1056 	orl	a,r5
      0003A0 4E               [12] 1057 	orl	a,r6
      0003A1 4F               [12] 1058 	orl	a,r7
      0003A2 D0 07            [24] 1059 	pop	ar7
      0003A4 60 06            [24] 1060 	jz	00137$
      0003A6 7D 31            [12] 1061 	mov	r5,#0x31
      0003A8 7E 00            [12] 1062 	mov	r6,#0x00
      0003AA 80 04            [24] 1063 	sjmp	00138$
      0003AC                       1064 00137$:
      0003AC 7D 30            [12] 1065 	mov	r5,#0x30
      0003AE 7E 00            [12] 1066 	mov	r6,#0x00
      0003B0                       1067 00138$:
      0003B0 8D 82            [24] 1068 	mov	dpl,r5
      0003B2 8E 83            [24] 1069 	mov	dph,r6
      0003B4 12r00r00         [24] 1070 	lcall	_putchar
                                   1071 ;	calc.c:56: for (mask = 0x80000000lu; mask; mask >>= 1)
      0003B7 E5*00            [12] 1072 	mov	a,_bp
      0003B9 24 10            [12] 1073 	add	a,#0x10
      0003BB F8               [12] 1074 	mov	r0,a
      0003BC 08               [12] 1075 	inc	r0
      0003BD 08               [12] 1076 	inc	r0
      0003BE 08               [12] 1077 	inc	r0
      0003BF E6               [12] 1078 	mov	a,@r0
      0003C0 C3               [12] 1079 	clr	c
      0003C1 13               [12] 1080 	rrc	a
      0003C2 F6               [12] 1081 	mov	@r0,a
      0003C3 18               [12] 1082 	dec	r0
      0003C4 E6               [12] 1083 	mov	a,@r0
      0003C5 13               [12] 1084 	rrc	a
      0003C6 F6               [12] 1085 	mov	@r0,a
      0003C7 18               [12] 1086 	dec	r0
      0003C8 E6               [12] 1087 	mov	a,@r0
      0003C9 13               [12] 1088 	rrc	a
      0003CA F6               [12] 1089 	mov	@r0,a
      0003CB 18               [12] 1090 	dec	r0
      0003CC E6               [12] 1091 	mov	a,@r0
      0003CD 13               [12] 1092 	rrc	a
      0003CE F6               [12] 1093 	mov	@r0,a
      0003CF E5*00            [12] 1094 	mov	a,_bp
      0003D1 24 10            [12] 1095 	add	a,#0x10
      0003D3 F8               [12] 1096 	mov	r0,a
      0003D4 E6               [12] 1097 	mov	a,@r0
      0003D5 08               [12] 1098 	inc	r0
      0003D6 46               [12] 1099 	orl	a,@r0
      0003D7 08               [12] 1100 	inc	r0
      0003D8 46               [12] 1101 	orl	a,@r0
      0003D9 08               [12] 1102 	inc	r0
      0003DA 46               [12] 1103 	orl	a,@r0
      0003DB 70 9B            [24] 1104 	jnz	00130$
                                   1105 ;	calc.c:116: printstr("\r\n");
      0003DD 7Cr00            [12] 1106 	mov	r4,#___str_0
      0003DF 7Ds00            [12] 1107 	mov	r5,#(___str_0 >> 8)
      0003E1 7E 80            [12] 1108 	mov	r6,#0x80
                                   1109 ;	calc.c:50: return;
      0003E3                       1110 00133$:
                                   1111 ;	calc.c:48: for (; *s; s++) putchar(*s);
      0003E3 8C 82            [24] 1112 	mov	dpl,r4
      0003E5 8D 83            [24] 1113 	mov	dph,r5
      0003E7 8E F0            [24] 1114 	mov	b,r6
      0003E9 12r00r00         [24] 1115 	lcall	__gptrget
      0003EC FB               [12] 1116 	mov	r3,a
      0003ED 60 10            [24] 1117 	jz	00120$
      0003EF 7A 00            [12] 1118 	mov	r2,#0x00
      0003F1 8B 82            [24] 1119 	mov	dpl,r3
      0003F3 8A 83            [24] 1120 	mov	dph,r2
      0003F5 12r00r00         [24] 1121 	lcall	_putchar
      0003F8 0C               [12] 1122 	inc	r4
                                   1123 ;	calc.c:116: printstr("\r\n");
      0003F9 BC 00 E7         [24] 1124 	cjne	r4,#0x00,00133$
      0003FC 0D               [12] 1125 	inc	r5
      0003FD 80 E4            [24] 1126 	sjmp	00133$
      0003FF                       1127 00120$:
                                   1128 ;	calc.c:117: r = stack_pop(&ctx->s, &d);
      0003FF 8F 04            [24] 1129 	mov	ar4,r7
      000401 7D 00            [12] 1130 	mov	r5,#0x00
      000403 7E 40            [12] 1131 	mov	r6,#0x40
      000405 C0 07            [24] 1132 	push	ar7
      000407 E5*00            [12] 1133 	mov	a,_bp
      000409 24 05            [12] 1134 	add	a,#0x05
      00040B F8               [12] 1135 	mov	r0,a
      00040C 74 09            [12] 1136 	mov	a,#0x09
      00040E 26               [12] 1137 	add	a,@r0
      00040F FA               [12] 1138 	mov	r2,a
      000410 E4               [12] 1139 	clr	a
      000411 08               [12] 1140 	inc	r0
      000412 36               [12] 1141 	addc	a,@r0
      000413 FB               [12] 1142 	mov	r3,a
      000414 08               [12] 1143 	inc	r0
      000415 86 07            [24] 1144 	mov	ar7,@r0
      000417 C0 04            [24] 1145 	push	ar4
      000419 C0 05            [24] 1146 	push	ar5
      00041B C0 06            [24] 1147 	push	ar6
      00041D 8A 82            [24] 1148 	mov	dpl,r2
      00041F 8B 83            [24] 1149 	mov	dph,r3
      000421 8F F0            [24] 1150 	mov	b,r7
      000423 12r00r00         [24] 1151 	lcall	_stack_pop
      000426 AE 82            [24] 1152 	mov	r6,dpl
      000428 AF 83            [24] 1153 	mov	r7,dph
      00042A 15 81            [12] 1154 	dec	sp
      00042C 15 81            [12] 1155 	dec	sp
      00042E 15 81            [12] 1156 	dec	sp
      000430 A8*00            [24] 1157 	mov	r0,_bp
      000432 08               [12] 1158 	inc	r0
      000433 08               [12] 1159 	inc	r0
      000434 A6 06            [24] 1160 	mov	@r0,ar6
      000436 08               [12] 1161 	inc	r0
      000437 A6 07            [24] 1162 	mov	@r0,ar7
      000439 D0 07            [24] 1163 	pop	ar7
      00043B 02r02rBC         [24] 1164 	ljmp	00105$
      00043E                       1165 00110$:
                                   1166 ;	calc.c:120: return 1;
      00043E 90 00 01         [24] 1167 	mov	dptr,#0x0001
                                   1168 ;	calc.c:121: }
      000441 85*00 81         [24] 1169 	mov	sp,_bp
      000444 D0*00            [24] 1170 	pop	_bp
      000446 22               [24] 1171 	ret
                                   1172 ;------------------------------------------------------------
                                   1173 ;Allocation info for local variables in function 'dump_peek'
                                   1174 ;------------------------------------------------------------
                                   1175 ;d                         Allocated to stack - _bp -6
                                   1176 ;_ctx                      Allocated to registers 
                                   1177 ;__1310720011              Allocated to registers 
                                   1178 ;s                         Allocated to registers r5 r6 r7 
                                   1179 ;__1310720013              Allocated to registers r4 r5 r6 r7 
                                   1180 ;d                         Allocated to stack - _bp +1
                                   1181 ;mask                      Allocated to stack - _bp +5
                                   1182 ;__1310720015              Allocated to registers 
                                   1183 ;s                         Allocated to registers r5 r6 r7 
                                   1184 ;------------------------------------------------------------
                                   1185 ;	calc.c:123: static int dump_peek(void *_ctx, long d) __reentrant {
                                   1186 ;	-----------------------------------------
                                   1187 ;	 function dump_peek
                                   1188 ;	-----------------------------------------
      000447                       1189 _dump_peek:
      000447 C0*00            [24] 1190 	push	_bp
      000449 E5 81            [12] 1191 	mov	a,sp
      00044B F5*00            [12] 1192 	mov	_bp,a
      00044D 24 08            [12] 1193 	add	a,#0x08
      00044F F5 81            [12] 1194 	mov	sp,a
                                   1195 ;	calc.c:126: printstr("PA ");
      000451 7Dr2C            [12] 1196 	mov	r5,#___str_5
      000453 7Es00            [12] 1197 	mov	r6,#(___str_5 >> 8)
      000455 7F 80            [12] 1198 	mov	r7,#0x80
                                   1199 ;	calc.c:50: return;
      000457                       1200 00108$:
                                   1201 ;	calc.c:48: for (; *s; s++) putchar(*s);
      000457 8D 82            [24] 1202 	mov	dpl,r5
      000459 8E 83            [24] 1203 	mov	dph,r6
      00045B 8F F0            [24] 1204 	mov	b,r7
      00045D 12r00r00         [24] 1205 	lcall	__gptrget
      000460 FC               [12] 1206 	mov	r4,a
      000461 60 10            [24] 1207 	jz	00102$
      000463 7B 00            [12] 1208 	mov	r3,#0x00
      000465 8C 82            [24] 1209 	mov	dpl,r4
      000467 8B 83            [24] 1210 	mov	dph,r3
      000469 12r00r00         [24] 1211 	lcall	_putchar
      00046C 0D               [12] 1212 	inc	r5
                                   1213 ;	calc.c:126: printstr("PA ");
      00046D BD 00 E7         [24] 1214 	cjne	r5,#0x00,00108$
      000470 0E               [12] 1215 	inc	r6
      000471 80 E4            [24] 1216 	sjmp	00108$
      000473                       1217 00102$:
                                   1218 ;	calc.c:127: printf("% 11ld / ", d);
      000473 E5*00            [12] 1219 	mov	a,_bp
      000475 24 FA            [12] 1220 	add	a,#0xfa
      000477 F8               [12] 1221 	mov	r0,a
      000478 E6               [12] 1222 	mov	a,@r0
      000479 C0 E0            [24] 1223 	push	acc
      00047B 08               [12] 1224 	inc	r0
      00047C E6               [12] 1225 	mov	a,@r0
      00047D C0 E0            [24] 1226 	push	acc
      00047F 08               [12] 1227 	inc	r0
      000480 E6               [12] 1228 	mov	a,@r0
      000481 C0 E0            [24] 1229 	push	acc
      000483 08               [12] 1230 	inc	r0
      000484 E6               [12] 1231 	mov	a,@r0
      000485 C0 E0            [24] 1232 	push	acc
      000487 74r19            [12] 1233 	mov	a,#___str_3
      000489 C0 E0            [24] 1234 	push	acc
      00048B 74s00            [12] 1235 	mov	a,#(___str_3 >> 8)
      00048D C0 E0            [24] 1236 	push	acc
      00048F 74 80            [12] 1237 	mov	a,#0x80
      000491 C0 E0            [24] 1238 	push	acc
      000493 12r00r00         [24] 1239 	lcall	_printf
      000496 E5 81            [12] 1240 	mov	a,sp
      000498 24 F9            [12] 1241 	add	a,#0xf9
      00049A F5 81            [12] 1242 	mov	sp,a
                                   1243 ;	calc.c:128: printf("%08lx / ", d);
      00049C E5*00            [12] 1244 	mov	a,_bp
      00049E 24 FA            [12] 1245 	add	a,#0xfa
      0004A0 F8               [12] 1246 	mov	r0,a
      0004A1 E6               [12] 1247 	mov	a,@r0
      0004A2 C0 E0            [24] 1248 	push	acc
      0004A4 08               [12] 1249 	inc	r0
      0004A5 E6               [12] 1250 	mov	a,@r0
      0004A6 C0 E0            [24] 1251 	push	acc
      0004A8 08               [12] 1252 	inc	r0
      0004A9 E6               [12] 1253 	mov	a,@r0
      0004AA C0 E0            [24] 1254 	push	acc
      0004AC 08               [12] 1255 	inc	r0
      0004AD E6               [12] 1256 	mov	a,@r0
      0004AE C0 E0            [24] 1257 	push	acc
      0004B0 74r23            [12] 1258 	mov	a,#___str_4
      0004B2 C0 E0            [24] 1259 	push	acc
      0004B4 74s00            [12] 1260 	mov	a,#(___str_4 >> 8)
      0004B6 C0 E0            [24] 1261 	push	acc
      0004B8 74 80            [12] 1262 	mov	a,#0x80
      0004BA C0 E0            [24] 1263 	push	acc
      0004BC 12r00r00         [24] 1264 	lcall	_printf
      0004BF E5 81            [12] 1265 	mov	a,sp
      0004C1 24 F9            [12] 1266 	add	a,#0xf9
      0004C3 F5 81            [12] 1267 	mov	sp,a
                                   1268 ;	calc.c:129: printbin(d);
      0004C5 E5*00            [12] 1269 	mov	a,_bp
      0004C7 24 FA            [12] 1270 	add	a,#0xfa
      0004C9 F8               [12] 1271 	mov	r0,a
      0004CA 86 04            [24] 1272 	mov	ar4,@r0
      0004CC 08               [12] 1273 	inc	r0
      0004CD 86 05            [24] 1274 	mov	ar5,@r0
      0004CF 08               [12] 1275 	inc	r0
      0004D0 86 06            [24] 1276 	mov	ar6,@r0
      0004D2 08               [12] 1277 	inc	r0
      0004D3 86 07            [24] 1278 	mov	ar7,@r0
      0004D5 A8*00            [24] 1279 	mov	r0,_bp
      0004D7 08               [12] 1280 	inc	r0
      0004D8 A6 04            [24] 1281 	mov	@r0,ar4
      0004DA 08               [12] 1282 	inc	r0
      0004DB A6 05            [24] 1283 	mov	@r0,ar5
      0004DD 08               [12] 1284 	inc	r0
      0004DE A6 06            [24] 1285 	mov	@r0,ar6
      0004E0 08               [12] 1286 	inc	r0
      0004E1 A6 07            [24] 1287 	mov	@r0,ar7
                                   1288 ;	calc.c:56: for (mask = 0x80000000lu; mask; mask >>= 1)
      0004E3 E5*00            [12] 1289 	mov	a,_bp
      0004E5 24 05            [12] 1290 	add	a,#0x05
      0004E7 F8               [12] 1291 	mov	r0,a
      0004E8 E4               [12] 1292 	clr	a
      0004E9 F6               [12] 1293 	mov	@r0,a
      0004EA 08               [12] 1294 	inc	r0
      0004EB F6               [12] 1295 	mov	@r0,a
      0004EC 08               [12] 1296 	inc	r0
      0004ED F6               [12] 1297 	mov	@r0,a
      0004EE 08               [12] 1298 	inc	r0
      0004EF 76 80            [12] 1299 	mov	@r0,#0x80
      0004F1                       1300 00110$:
                                   1301 ;	calc.c:57: (void)putchar((d & mask) ? (int)'1' : (int)'0');
      0004F1 A8*00            [24] 1302 	mov	r0,_bp
      0004F3 08               [12] 1303 	inc	r0
      0004F4 86 04            [24] 1304 	mov	ar4,@r0
      0004F6 08               [12] 1305 	inc	r0
      0004F7 86 05            [24] 1306 	mov	ar5,@r0
      0004F9 08               [12] 1307 	inc	r0
      0004FA 86 06            [24] 1308 	mov	ar6,@r0
      0004FC 08               [12] 1309 	inc	r0
      0004FD 86 07            [24] 1310 	mov	ar7,@r0
      0004FF E5*00            [12] 1311 	mov	a,_bp
      000501 24 05            [12] 1312 	add	a,#0x05
      000503 F8               [12] 1313 	mov	r0,a
      000504 E6               [12] 1314 	mov	a,@r0
      000505 52 04            [12] 1315 	anl	ar4,a
      000507 08               [12] 1316 	inc	r0
      000508 E6               [12] 1317 	mov	a,@r0
      000509 52 05            [12] 1318 	anl	ar5,a
      00050B 08               [12] 1319 	inc	r0
      00050C E6               [12] 1320 	mov	a,@r0
      00050D 52 06            [12] 1321 	anl	ar6,a
      00050F 08               [12] 1322 	inc	r0
      000510 E6               [12] 1323 	mov	a,@r0
      000511 52 07            [12] 1324 	anl	ar7,a
      000513 EC               [12] 1325 	mov	a,r4
      000514 4D               [12] 1326 	orl	a,r5
      000515 4E               [12] 1327 	orl	a,r6
      000516 4F               [12] 1328 	orl	a,r7
      000517 60 06            [24] 1329 	jz	00117$
      000519 7E 31            [12] 1330 	mov	r6,#0x31
      00051B 7F 00            [12] 1331 	mov	r7,#0x00
      00051D 80 04            [24] 1332 	sjmp	00118$
      00051F                       1333 00117$:
      00051F 7E 30            [12] 1334 	mov	r6,#0x30
      000521 7F 00            [12] 1335 	mov	r7,#0x00
      000523                       1336 00118$:
      000523 8E 82            [24] 1337 	mov	dpl,r6
      000525 8F 83            [24] 1338 	mov	dph,r7
      000527 12r00r00         [24] 1339 	lcall	_putchar
                                   1340 ;	calc.c:56: for (mask = 0x80000000lu; mask; mask >>= 1)
      00052A E5*00            [12] 1341 	mov	a,_bp
      00052C 24 05            [12] 1342 	add	a,#0x05
      00052E F8               [12] 1343 	mov	r0,a
      00052F 08               [12] 1344 	inc	r0
      000530 08               [12] 1345 	inc	r0
      000531 08               [12] 1346 	inc	r0
      000532 E6               [12] 1347 	mov	a,@r0
      000533 C3               [12] 1348 	clr	c
      000534 13               [12] 1349 	rrc	a
      000535 F6               [12] 1350 	mov	@r0,a
      000536 18               [12] 1351 	dec	r0
      000537 E6               [12] 1352 	mov	a,@r0
      000538 13               [12] 1353 	rrc	a
      000539 F6               [12] 1354 	mov	@r0,a
      00053A 18               [12] 1355 	dec	r0
      00053B E6               [12] 1356 	mov	a,@r0
      00053C 13               [12] 1357 	rrc	a
      00053D F6               [12] 1358 	mov	@r0,a
      00053E 18               [12] 1359 	dec	r0
      00053F E6               [12] 1360 	mov	a,@r0
      000540 13               [12] 1361 	rrc	a
      000541 F6               [12] 1362 	mov	@r0,a
      000542 E5*00            [12] 1363 	mov	a,_bp
      000544 24 05            [12] 1364 	add	a,#0x05
      000546 F8               [12] 1365 	mov	r0,a
      000547 E6               [12] 1366 	mov	a,@r0
      000548 08               [12] 1367 	inc	r0
      000549 46               [12] 1368 	orl	a,@r0
      00054A 08               [12] 1369 	inc	r0
      00054B 46               [12] 1370 	orl	a,@r0
      00054C 08               [12] 1371 	inc	r0
      00054D 46               [12] 1372 	orl	a,@r0
      00054E 70 A1            [24] 1373 	jnz	00110$
                                   1374 ;	calc.c:130: printstr("\r\n");
      000550 7Dr00            [12] 1375 	mov	r5,#___str_0
      000552 7Es00            [12] 1376 	mov	r6,#(___str_0 >> 8)
      000554 7F 80            [12] 1377 	mov	r7,#0x80
                                   1378 ;	calc.c:50: return;
      000556                       1379 00113$:
                                   1380 ;	calc.c:48: for (; *s; s++) putchar(*s);
      000556 8D 82            [24] 1381 	mov	dpl,r5
      000558 8E 83            [24] 1382 	mov	dph,r6
      00055A 8F F0            [24] 1383 	mov	b,r7
      00055C 12r00r00         [24] 1384 	lcall	__gptrget
      00055F FC               [12] 1385 	mov	r4,a
      000560 60 10            [24] 1386 	jz	00106$
      000562 7B 00            [12] 1387 	mov	r3,#0x00
      000564 8C 82            [24] 1388 	mov	dpl,r4
      000566 8B 83            [24] 1389 	mov	dph,r3
      000568 12r00r00         [24] 1390 	lcall	_putchar
      00056B 0D               [12] 1391 	inc	r5
                                   1392 ;	calc.c:130: printstr("\r\n");
      00056C BD 00 E7         [24] 1393 	cjne	r5,#0x00,00113$
      00056F 0E               [12] 1394 	inc	r6
      000570 80 E4            [24] 1395 	sjmp	00113$
      000572                       1396 00106$:
                                   1397 ;	calc.c:132: return 1;
      000572 90 00 01         [24] 1398 	mov	dptr,#0x0001
                                   1399 ;	calc.c:133: }
      000575 85*00 81         [24] 1400 	mov	sp,_bp
      000578 D0*00            [24] 1401 	pop	_bp
      00057A 22               [24] 1402 	ret
                                   1403 ;------------------------------------------------------------
                                   1404 ;Allocation info for local variables in function 'operator'
                                   1405 ;------------------------------------------------------------
                                   1406 ;delta                     Allocated to stack - _bp -5
                                   1407 ;_ctx                      Allocated to stack - _bp +1
                                   1408 ;ctx                       Allocated to stack - _bp +12
                                   1409 ;d0                        Allocated to stack - _bp +15
                                   1410 ;d1                        Allocated to stack - _bp +19
                                   1411 ;__1966080017              Allocated to registers 
                                   1412 ;s                         Allocated to registers r7 r6 r5 
                                   1413 ;__1966080019              Allocated to registers 
                                   1414 ;s                         Allocated to registers r7 r6 r5 
                                   1415 ;__2621440021              Allocated to registers 
                                   1416 ;s                         Allocated to registers r7 r6 r5 
                                   1417 ;__2621440023              Allocated to registers r7 r6 r5 r4 
                                   1418 ;d                         Allocated to registers r7 r6 r5 r2 
                                   1419 ;mask                      Allocated to stack - _bp +23
                                   1420 ;__2621440025              Allocated to registers 
                                   1421 ;s                         Allocated to registers r7 r6 r5 
                                   1422 ;__1966080027              Allocated to registers 
                                   1423 ;s                         Allocated to registers r7 r6 r5 
                                   1424 ;__1966080029              Allocated to registers 
                                   1425 ;s                         Allocated to registers r7 r6 r5 
                                   1426 ;__1966080031              Allocated to registers 
                                   1427 ;s                         Allocated to registers r7 r6 r5 
                                   1428 ;__1966080033              Allocated to registers 
                                   1429 ;s                         Allocated to registers r7 r6 r5 
                                   1430 ;__2621440035              Allocated to registers 
                                   1431 ;s                         Allocated to registers r7 r6 r5 
                                   1432 ;__2621440037              Allocated to registers r7 r6 r5 r4 
                                   1433 ;d                         Allocated to registers r7 r6 r5 r2 
                                   1434 ;mask                      Allocated to stack - _bp +23
                                   1435 ;__2621440039              Allocated to registers 
                                   1436 ;s                         Allocated to registers r7 r6 r5 
                                   1437 ;__1966080041              Allocated to registers 
                                   1438 ;s                         Allocated to registers r7 r6 r5 
                                   1439 ;__1966080043              Allocated to registers 
                                   1440 ;s                         Allocated to registers r7 r6 r5 
                                   1441 ;__2621440045              Allocated to registers 
                                   1442 ;s                         Allocated to registers r7 r6 r5 
                                   1443 ;__1966080047              Allocated to registers 
                                   1444 ;s                         Allocated to registers r7 r6 r5 
                                   1445 ;__2621440049              Allocated to registers 
                                   1446 ;s                         Allocated to registers r7 r6 r5 
                                   1447 ;__1966080051              Allocated to registers 
                                   1448 ;s                         Allocated to registers r7 r6 r5 
                                   1449 ;__2621440053              Allocated to registers 
                                   1450 ;s                         Allocated to registers r7 r6 r5 
                                   1451 ;__1966080055              Allocated to registers 
                                   1452 ;s                         Allocated to registers r7 r6 r5 
                                   1453 ;__2621440057              Allocated to registers 
                                   1454 ;s                         Allocated to registers r7 r6 r5 
                                   1455 ;__1966080059              Allocated to registers 
                                   1456 ;s                         Allocated to registers r7 r6 r5 
                                   1457 ;__2621440061              Allocated to registers 
                                   1458 ;s                         Allocated to registers r7 r6 r5 
                                   1459 ;__2621440063              Allocated to registers 
                                   1460 ;s                         Allocated to registers r7 r6 r5 
                                   1461 ;__1966080065              Allocated to registers 
                                   1462 ;s                         Allocated to registers r7 r6 r5 
                                   1463 ;__2621440067              Allocated to registers 
                                   1464 ;s                         Allocated to registers r7 r6 r5 
                                   1465 ;__2621440069              Allocated to registers 
                                   1466 ;s                         Allocated to registers r7 r6 r5 
                                   1467 ;__1966080071              Allocated to registers 
                                   1468 ;s                         Allocated to registers r5 r6 r7 
                                   1469 ;__2621440073              Allocated to registers 
                                   1470 ;s                         Allocated to registers r5 r6 r7 
                                   1471 ;__1966080075              Allocated to registers 
                                   1472 ;s                         Allocated to registers r5 r6 r7 
                                   1473 ;__2621440077              Allocated to registers 
                                   1474 ;s                         Allocated to registers r5 r6 r7 
                                   1475 ;__1966080079              Allocated to registers 
                                   1476 ;s                         Allocated to registers r5 r6 r7 
                                   1477 ;__2621440081              Allocated to registers 
                                   1478 ;s                         Allocated to registers r5 r6 r7 
                                   1479 ;__1966080083              Allocated to registers 
                                   1480 ;s                         Allocated to registers r5 r6 r7 
                                   1481 ;__2621440085              Allocated to registers 
                                   1482 ;s                         Allocated to registers r5 r6 r7 
                                   1483 ;__1966080087              Allocated to registers 
                                   1484 ;s                         Allocated to registers r5 r6 r7 
                                   1485 ;__2621440089              Allocated to registers 
                                   1486 ;s                         Allocated to registers r5 r6 r7 
                                   1487 ;__1966080091              Allocated to registers 
                                   1488 ;s                         Allocated to registers r5 r6 r7 
                                   1489 ;__2621440093              Allocated to registers 
                                   1490 ;s                         Allocated to registers r5 r6 r7 
                                   1491 ;__1966080095              Allocated to registers 
                                   1492 ;s                         Allocated to registers r5 r6 r7 
                                   1493 ;sloc0                     Allocated to stack - _bp +267
                                   1494 ;sloc1                     Allocated to stack - _bp +268
                                   1495 ;sloc2                     Allocated to stack - _bp +4
                                   1496 ;sloc3                     Allocated to stack - _bp +8
                                   1497 ;------------------------------------------------------------
                                   1498 ;	calc.c:135: static int operator(void *_ctx, delta_t *delta) __reentrant {
                                   1499 ;	-----------------------------------------
                                   1500 ;	 function operator
                                   1501 ;	-----------------------------------------
      00057B                       1502 _operator:
      00057B C0*00            [24] 1503 	push	_bp
      00057D 85 81*00         [24] 1504 	mov	_bp,sp
      000580 C0 82            [24] 1505 	push	dpl
      000582 C0 83            [24] 1506 	push	dph
      000584 C0 F0            [24] 1507 	push	b
      000586 E5 81            [12] 1508 	mov	a,sp
      000588 24 17            [12] 1509 	add	a,#0x17
      00058A F5 81            [12] 1510 	mov	sp,a
                                   1511 ;	calc.c:136: struct ctx *ctx = (struct ctx *)_ctx;
      00058C A8*00            [24] 1512 	mov	r0,_bp
      00058E 08               [12] 1513 	inc	r0
      00058F E5*00            [12] 1514 	mov	a,_bp
      000591 24 0C            [12] 1515 	add	a,#0x0c
      000593 F9               [12] 1516 	mov	r1,a
      000594 E6               [12] 1517 	mov	a,@r0
      000595 F7               [12] 1518 	mov	@r1,a
      000596 08               [12] 1519 	inc	r0
      000597 09               [12] 1520 	inc	r1
      000598 E6               [12] 1521 	mov	a,@r0
      000599 F7               [12] 1522 	mov	@r1,a
      00059A 08               [12] 1523 	inc	r0
      00059B 09               [12] 1524 	inc	r1
      00059C E6               [12] 1525 	mov	a,@r0
      00059D F7               [12] 1526 	mov	@r1,a
                                   1527 ;	calc.c:139: switch (ctx->digit[0]) {
      00059E E5*00            [12] 1528 	mov	a,_bp
      0005A0 24 0C            [12] 1529 	add	a,#0x0c
      0005A2 F8               [12] 1530 	mov	r0,a
      0005A3 74 07            [12] 1531 	mov	a,#0x07
      0005A5 26               [12] 1532 	add	a,@r0
      0005A6 FD               [12] 1533 	mov	r5,a
      0005A7 E4               [12] 1534 	clr	a
      0005A8 08               [12] 1535 	inc	r0
      0005A9 36               [12] 1536 	addc	a,@r0
      0005AA FE               [12] 1537 	mov	r6,a
      0005AB 08               [12] 1538 	inc	r0
      0005AC 86 07            [24] 1539 	mov	ar7,@r0
      0005AE 8D 82            [24] 1540 	mov	dpl,r5
      0005B0 8E 83            [24] 1541 	mov	dph,r6
      0005B2 8F F0            [24] 1542 	mov	b,r7
      0005B4 12r00r00         [24] 1543 	lcall	__gptrget
      0005B7 FC               [12] 1544 	mov	r4,a
      0005B8 BC 23 03         [24] 1545 	cjne	r4,#0x23,00996$
      0005BB 02r12r10         [24] 1546 	ljmp	00157$
      0005BE                       1547 00996$:
      0005BE BC 25 03         [24] 1548 	cjne	r4,#0x25,00997$
      0005C1 02r12r10         [24] 1549 	ljmp	00157$
      0005C4                       1550 00997$:
      0005C4 BC 26 03         [24] 1551 	cjne	r4,#0x26,00998$
      0005C7 02r14r9C         [24] 1552 	ljmp	00170$
      0005CA                       1553 00998$:
      0005CA BC 2A 03         [24] 1554 	cjne	r4,#0x2a,00999$
      0005CD 02r0Er1E         [24] 1555 	ljmp	00135$
      0005D0                       1556 00999$:
      0005D0 BC 2B 03         [24] 1557 	cjne	r4,#0x2b,01000$
      0005D3 02r0BrA7         [24] 1558 	ljmp	00121$
      0005D6                       1559 01000$:
      0005D6 BC 2D 03         [24] 1560 	cjne	r4,#0x2d,01001$
      0005D9 02r0CrE2         [24] 1561 	ljmp	00128$
      0005DC                       1562 01001$:
      0005DC BC 2E 03         [24] 1563 	cjne	r4,#0x2e,01002$
      0005DF 02r08r65         [24] 1564 	ljmp	00109$
      0005E2                       1565 01002$:
      0005E2 BC 2F 03         [24] 1566 	cjne	r4,#0x2f,01003$
      0005E5 02r0Fr80         [24] 1567 	ljmp	00143$
      0005E8                       1568 01003$:
      0005E8 BC 3C 03         [24] 1569 	cjne	r4,#0x3c,01004$
      0005EB 02r1Br01         [24] 1570 	ljmp	00205$
      0005EE                       1571 01004$:
      0005EE BC 3E 03         [24] 1572 	cjne	r4,#0x3e,01005$
      0005F1 02r18r4D         [24] 1573 	ljmp	00191$
      0005F4                       1574 01005$:
      0005F4 BC 50 03         [24] 1575 	cjne	r4,#0x50,01006$
      0005F7 02r07rD9         [24] 1576 	ljmp	00105$
      0005FA                       1577 01006$:
      0005FA BC 56 03         [24] 1578 	cjne	r4,#0x56,01007$
      0005FD 02r0Ar0C         [24] 1579 	ljmp	00113$
      000600                       1580 01007$:
      000600 BC 5C 03         [24] 1581 	cjne	r4,#0x5c,01008$
      000603 02r0Fr80         [24] 1582 	ljmp	00143$
      000606                       1583 01008$:
      000606 BC 5D 03         [24] 1584 	cjne	r4,#0x5d,01009$
      000609 02r19rAC         [24] 1585 	ljmp	00198$
      00060C                       1586 01009$:
      00060C BC 5E 03         [24] 1587 	cjne	r4,#0x5e,01010$
      00060F 02r17r12         [24] 1588 	ljmp	00184$
      000612                       1589 01010$:
      000612 BC 70 02         [24] 1590 	cjne	r4,#0x70,01011$
      000615 80 1B            [24] 1591 	sjmp	00101$
      000617                       1592 01011$:
      000617 BC 76 03         [24] 1593 	cjne	r4,#0x76,01012$
      00061A 02r08r65         [24] 1594 	ljmp	00109$
      00061D                       1595 01012$:
      00061D BC 78 03         [24] 1596 	cjne	r4,#0x78,01013$
      000620 02r0Ar55         [24] 1597 	ljmp	00114$
      000623                       1598 01013$:
      000623 BC 7C 03         [24] 1599 	cjne	r4,#0x7c,01014$
      000626 02r15rD7         [24] 1600 	ljmp	00177$
      000629                       1601 01014$:
      000629 BC 7E 03         [24] 1602 	cjne	r4,#0x7e,01015$
      00062C 02r1Cr5F         [24] 1603 	ljmp	00212$
      00062F                       1604 01015$:
      00062F 02r1Dr00         [24] 1605 	ljmp	00216$
                                   1606 ;	calc.c:140: case 'p':
      000632                       1607 00101$:
                                   1608 ;	calc.c:141: printstr("\r\n");
      000632 7Fr00            [12] 1609 	mov	r7,#___str_0
      000634 7Es00            [12] 1610 	mov	r6,#(___str_0 >> 8)
      000636 7D 80            [12] 1611 	mov	r5,#0x80
                                   1612 ;	calc.c:50: return;
      000638                       1613 00299$:
                                   1614 ;	calc.c:48: for (; *s; s++) putchar(*s);
      000638 8F 82            [24] 1615 	mov	dpl,r7
      00063A 8E 83            [24] 1616 	mov	dph,r6
      00063C 8D F0            [24] 1617 	mov	b,r5
      00063E 12r00r00         [24] 1618 	lcall	__gptrget
      000641 FC               [12] 1619 	mov	r4,a
      000642 60 10            [24] 1620 	jz	00219$
      000644 7B 00            [12] 1621 	mov	r3,#0x00
      000646 8C 82            [24] 1622 	mov	dpl,r4
      000648 8B 83            [24] 1623 	mov	dph,r3
      00064A 12r00r00         [24] 1624 	lcall	_putchar
      00064D 0F               [12] 1625 	inc	r7
                                   1626 ;	calc.c:141: printstr("\r\n");
      00064E BF 00 E7         [24] 1627 	cjne	r7,#0x00,00299$
      000651 0E               [12] 1628 	inc	r6
      000652 80 E4            [24] 1629 	sjmp	00299$
      000654                       1630 00219$:
                                   1631 ;	calc.c:142: if (!stack_peek(&ctx->s, &d0)) printstr("stack underflow\r\n");
      000654 E5*00            [12] 1632 	mov	a,_bp
      000656 24 0F            [12] 1633 	add	a,#0x0f
      000658 FF               [12] 1634 	mov	r7,a
      000659 7E 00            [12] 1635 	mov	r6,#0x00
      00065B 7D 40            [12] 1636 	mov	r5,#0x40
      00065D E5*00            [12] 1637 	mov	a,_bp
      00065F 24 0C            [12] 1638 	add	a,#0x0c
      000661 F8               [12] 1639 	mov	r0,a
      000662 74 09            [12] 1640 	mov	a,#0x09
      000664 26               [12] 1641 	add	a,@r0
      000665 FA               [12] 1642 	mov	r2,a
      000666 E4               [12] 1643 	clr	a
      000667 08               [12] 1644 	inc	r0
      000668 36               [12] 1645 	addc	a,@r0
      000669 FB               [12] 1646 	mov	r3,a
      00066A 08               [12] 1647 	inc	r0
      00066B 86 04            [24] 1648 	mov	ar4,@r0
      00066D C0 07            [24] 1649 	push	ar7
      00066F C0 06            [24] 1650 	push	ar6
      000671 C0 05            [24] 1651 	push	ar5
      000673 8A 82            [24] 1652 	mov	dpl,r2
      000675 8B 83            [24] 1653 	mov	dph,r3
      000677 8C F0            [24] 1654 	mov	b,r4
      000679 12r00r00         [24] 1655 	lcall	_stack_peek
      00067C AB 82            [24] 1656 	mov	r3,dpl
      00067E AC 83            [24] 1657 	mov	r4,dph
      000680 15 81            [12] 1658 	dec	sp
      000682 15 81            [12] 1659 	dec	sp
      000684 15 81            [12] 1660 	dec	sp
      000686 EB               [12] 1661 	mov	a,r3
      000687 4C               [12] 1662 	orl	a,r4
      000688 70 25            [24] 1663 	jnz	00103$
      00068A 7Fr03            [12] 1664 	mov	r7,#___str_1
      00068C 7Es00            [12] 1665 	mov	r6,#(___str_1 >> 8)
      00068E 7D 80            [12] 1666 	mov	r5,#0x80
                                   1667 ;	calc.c:50: return;
      000690                       1668 00302$:
                                   1669 ;	calc.c:48: for (; *s; s++) putchar(*s);
      000690 8F 82            [24] 1670 	mov	dpl,r7
      000692 8E 83            [24] 1671 	mov	dph,r6
      000694 8D F0            [24] 1672 	mov	b,r5
      000696 12r00r00         [24] 1673 	lcall	__gptrget
      000699 FC               [12] 1674 	mov	r4,a
      00069A 70 03            [24] 1675 	jnz	01019$
      00069C 02r1Dr05         [24] 1676 	ljmp	00217$
      00069F                       1677 01019$:
      00069F 7B 00            [12] 1678 	mov	r3,#0x00
      0006A1 8C 82            [24] 1679 	mov	dpl,r4
      0006A3 8B 83            [24] 1680 	mov	dph,r3
      0006A5 12r00r00         [24] 1681 	lcall	_putchar
      0006A8 0F               [12] 1682 	inc	r7
                                   1683 ;	calc.c:142: if (!stack_peek(&ctx->s, &d0)) printstr("stack underflow\r\n");
      0006A9 BF 00 E4         [24] 1684 	cjne	r7,#0x00,00302$
      0006AC 0E               [12] 1685 	inc	r6
      0006AD 80 E1            [24] 1686 	sjmp	00302$
      0006AF                       1687 00103$:
                                   1688 ;	calc.c:144: printstr("PT ");
      0006AF 7Fr30            [12] 1689 	mov	r7,#___str_6
      0006B1 7Es00            [12] 1690 	mov	r6,#(___str_6 >> 8)
      0006B3 7D 80            [12] 1691 	mov	r5,#0x80
                                   1692 ;	calc.c:50: return;
      0006B5                       1693 00305$:
                                   1694 ;	calc.c:48: for (; *s; s++) putchar(*s);
      0006B5 8F 82            [24] 1695 	mov	dpl,r7
      0006B7 8E 83            [24] 1696 	mov	dph,r6
      0006B9 8D F0            [24] 1697 	mov	b,r5
      0006BB 12r00r00         [24] 1698 	lcall	__gptrget
      0006BE FC               [12] 1699 	mov	r4,a
      0006BF 60 10            [24] 1700 	jz	00223$
      0006C1 7B 00            [12] 1701 	mov	r3,#0x00
      0006C3 8C 82            [24] 1702 	mov	dpl,r4
      0006C5 8B 83            [24] 1703 	mov	dph,r3
      0006C7 12r00r00         [24] 1704 	lcall	_putchar
      0006CA 0F               [12] 1705 	inc	r7
                                   1706 ;	calc.c:144: printstr("PT ");
      0006CB BF 00 E7         [24] 1707 	cjne	r7,#0x00,00305$
      0006CE 0E               [12] 1708 	inc	r6
      0006CF 80 E4            [24] 1709 	sjmp	00305$
      0006D1                       1710 00223$:
                                   1711 ;	calc.c:145: printf("% 11ld / ", d0);
      0006D1 E5*00            [12] 1712 	mov	a,_bp
      0006D3 24 0F            [12] 1713 	add	a,#0x0f
      0006D5 F8               [12] 1714 	mov	r0,a
      0006D6 E6               [12] 1715 	mov	a,@r0
      0006D7 C0 E0            [24] 1716 	push	acc
      0006D9 08               [12] 1717 	inc	r0
      0006DA E6               [12] 1718 	mov	a,@r0
      0006DB C0 E0            [24] 1719 	push	acc
      0006DD 08               [12] 1720 	inc	r0
      0006DE E6               [12] 1721 	mov	a,@r0
      0006DF C0 E0            [24] 1722 	push	acc
      0006E1 08               [12] 1723 	inc	r0
      0006E2 E6               [12] 1724 	mov	a,@r0
      0006E3 C0 E0            [24] 1725 	push	acc
      0006E5 74r19            [12] 1726 	mov	a,#___str_3
      0006E7 C0 E0            [24] 1727 	push	acc
      0006E9 74s00            [12] 1728 	mov	a,#(___str_3 >> 8)
      0006EB C0 E0            [24] 1729 	push	acc
      0006ED 74 80            [12] 1730 	mov	a,#0x80
      0006EF C0 E0            [24] 1731 	push	acc
      0006F1 12r00r00         [24] 1732 	lcall	_printf
      0006F4 E5 81            [12] 1733 	mov	a,sp
      0006F6 24 F9            [12] 1734 	add	a,#0xf9
      0006F8 F5 81            [12] 1735 	mov	sp,a
                                   1736 ;	calc.c:146: printf("%08lx / ", d0);
      0006FA E5*00            [12] 1737 	mov	a,_bp
      0006FC 24 0F            [12] 1738 	add	a,#0x0f
      0006FE F8               [12] 1739 	mov	r0,a
      0006FF E6               [12] 1740 	mov	a,@r0
      000700 C0 E0            [24] 1741 	push	acc
      000702 08               [12] 1742 	inc	r0
      000703 E6               [12] 1743 	mov	a,@r0
      000704 C0 E0            [24] 1744 	push	acc
      000706 08               [12] 1745 	inc	r0
      000707 E6               [12] 1746 	mov	a,@r0
      000708 C0 E0            [24] 1747 	push	acc
      00070A 08               [12] 1748 	inc	r0
      00070B E6               [12] 1749 	mov	a,@r0
      00070C C0 E0            [24] 1750 	push	acc
      00070E 74r23            [12] 1751 	mov	a,#___str_4
      000710 C0 E0            [24] 1752 	push	acc
      000712 74s00            [12] 1753 	mov	a,#(___str_4 >> 8)
      000714 C0 E0            [24] 1754 	push	acc
      000716 74 80            [12] 1755 	mov	a,#0x80
      000718 C0 E0            [24] 1756 	push	acc
      00071A 12r00r00         [24] 1757 	lcall	_printf
      00071D E5 81            [12] 1758 	mov	a,sp
      00071F 24 F9            [12] 1759 	add	a,#0xf9
      000721 F5 81            [12] 1760 	mov	sp,a
                                   1761 ;	calc.c:147: printbin(d0);
      000723 E5*00            [12] 1762 	mov	a,_bp
      000725 24 0F            [12] 1763 	add	a,#0x0f
      000727 F8               [12] 1764 	mov	r0,a
      000728 86 07            [24] 1765 	mov	ar7,@r0
      00072A 08               [12] 1766 	inc	r0
      00072B 86 06            [24] 1767 	mov	ar6,@r0
      00072D 08               [12] 1768 	inc	r0
      00072E 86 05            [24] 1769 	mov	ar5,@r0
      000730 08               [12] 1770 	inc	r0
      000731 86 04            [24] 1771 	mov	ar4,@r0
      000733 8C 02            [24] 1772 	mov	ar2,r4
                                   1773 ;	calc.c:56: for (mask = 0x80000000lu; mask; mask >>= 1)
      000735 E5*00            [12] 1774 	mov	a,_bp
      000737 24 17            [12] 1775 	add	a,#0x17
      000739 F8               [12] 1776 	mov	r0,a
      00073A E4               [12] 1777 	clr	a
      00073B F6               [12] 1778 	mov	@r0,a
      00073C 08               [12] 1779 	inc	r0
      00073D F6               [12] 1780 	mov	@r0,a
      00073E 08               [12] 1781 	inc	r0
      00073F F6               [12] 1782 	mov	@r0,a
      000740 08               [12] 1783 	inc	r0
      000741 76 80            [12] 1784 	mov	@r0,#0x80
      000743                       1785 00307$:
                                   1786 ;	calc.c:57: (void)putchar((d & mask) ? (int)'1' : (int)'0');
      000743 E5*00            [12] 1787 	mov	a,_bp
      000745 24 04            [12] 1788 	add	a,#0x04
      000747 F8               [12] 1789 	mov	r0,a
      000748 A6 07            [24] 1790 	mov	@r0,ar7
      00074A 08               [12] 1791 	inc	r0
      00074B A6 06            [24] 1792 	mov	@r0,ar6
      00074D 08               [12] 1793 	inc	r0
      00074E A6 05            [24] 1794 	mov	@r0,ar5
      000750 08               [12] 1795 	inc	r0
      000751 A6 02            [24] 1796 	mov	@r0,ar2
      000753 E5*00            [12] 1797 	mov	a,_bp
      000755 24 04            [12] 1798 	add	a,#0x04
      000757 F8               [12] 1799 	mov	r0,a
      000758 E5*00            [12] 1800 	mov	a,_bp
      00075A 24 17            [12] 1801 	add	a,#0x17
      00075C F9               [12] 1802 	mov	r1,a
      00075D E7               [12] 1803 	mov	a,@r1
      00075E 56               [12] 1804 	anl	a,@r0
      00075F F6               [12] 1805 	mov	@r0,a
      000760 09               [12] 1806 	inc	r1
      000761 E7               [12] 1807 	mov	a,@r1
      000762 08               [12] 1808 	inc	r0
      000763 56               [12] 1809 	anl	a,@r0
      000764 F6               [12] 1810 	mov	@r0,a
      000765 09               [12] 1811 	inc	r1
      000766 E7               [12] 1812 	mov	a,@r1
      000767 08               [12] 1813 	inc	r0
      000768 56               [12] 1814 	anl	a,@r0
      000769 F6               [12] 1815 	mov	@r0,a
      00076A 09               [12] 1816 	inc	r1
      00076B E7               [12] 1817 	mov	a,@r1
      00076C 08               [12] 1818 	inc	r0
      00076D 56               [12] 1819 	anl	a,@r0
      00076E F6               [12] 1820 	mov	@r0,a
      00076F E5*00            [12] 1821 	mov	a,_bp
      000771 24 04            [12] 1822 	add	a,#0x04
      000773 F8               [12] 1823 	mov	r0,a
      000774 E6               [12] 1824 	mov	a,@r0
      000775 08               [12] 1825 	inc	r0
      000776 46               [12] 1826 	orl	a,@r0
      000777 08               [12] 1827 	inc	r0
      000778 46               [12] 1828 	orl	a,@r0
      000779 08               [12] 1829 	inc	r0
      00077A 46               [12] 1830 	orl	a,@r0
      00077B 60 06            [24] 1831 	jz	00418$
      00077D 7B 31            [12] 1832 	mov	r3,#0x31
      00077F 7C 00            [12] 1833 	mov	r4,#0x00
      000781 80 04            [24] 1834 	sjmp	00419$
      000783                       1835 00418$:
      000783 7B 30            [12] 1836 	mov	r3,#0x30
      000785 7C 00            [12] 1837 	mov	r4,#0x00
      000787                       1838 00419$:
      000787 8B 82            [24] 1839 	mov	dpl,r3
      000789 8C 83            [24] 1840 	mov	dph,r4
      00078B 12r00r00         [24] 1841 	lcall	_putchar
                                   1842 ;	calc.c:56: for (mask = 0x80000000lu; mask; mask >>= 1)
      00078E E5*00            [12] 1843 	mov	a,_bp
      000790 24 17            [12] 1844 	add	a,#0x17
      000792 F8               [12] 1845 	mov	r0,a
      000793 08               [12] 1846 	inc	r0
      000794 08               [12] 1847 	inc	r0
      000795 08               [12] 1848 	inc	r0
      000796 E6               [12] 1849 	mov	a,@r0
      000797 C3               [12] 1850 	clr	c
      000798 13               [12] 1851 	rrc	a
      000799 F6               [12] 1852 	mov	@r0,a
      00079A 18               [12] 1853 	dec	r0
      00079B E6               [12] 1854 	mov	a,@r0
      00079C 13               [12] 1855 	rrc	a
      00079D F6               [12] 1856 	mov	@r0,a
      00079E 18               [12] 1857 	dec	r0
      00079F E6               [12] 1858 	mov	a,@r0
      0007A0 13               [12] 1859 	rrc	a
      0007A1 F6               [12] 1860 	mov	@r0,a
      0007A2 18               [12] 1861 	dec	r0
      0007A3 E6               [12] 1862 	mov	a,@r0
      0007A4 13               [12] 1863 	rrc	a
      0007A5 F6               [12] 1864 	mov	@r0,a
      0007A6 E5*00            [12] 1865 	mov	a,_bp
      0007A8 24 17            [12] 1866 	add	a,#0x17
      0007AA F8               [12] 1867 	mov	r0,a
      0007AB E6               [12] 1868 	mov	a,@r0
      0007AC 08               [12] 1869 	inc	r0
      0007AD 46               [12] 1870 	orl	a,@r0
      0007AE 08               [12] 1871 	inc	r0
      0007AF 46               [12] 1872 	orl	a,@r0
      0007B0 08               [12] 1873 	inc	r0
      0007B1 46               [12] 1874 	orl	a,@r0
      0007B2 70 8F            [24] 1875 	jnz	00307$
                                   1876 ;	calc.c:148: printstr("\r\n");
      0007B4 7Fr00            [12] 1877 	mov	r7,#___str_0
      0007B6 7Es00            [12] 1878 	mov	r6,#(___str_0 >> 8)
      0007B8 7D 80            [12] 1879 	mov	r5,#0x80
                                   1880 ;	calc.c:50: return;
      0007BA                       1881 00310$:
                                   1882 ;	calc.c:48: for (; *s; s++) putchar(*s);
      0007BA 8F 82            [24] 1883 	mov	dpl,r7
      0007BC 8E 83            [24] 1884 	mov	dph,r6
      0007BE 8D F0            [24] 1885 	mov	b,r5
      0007C0 12r00r00         [24] 1886 	lcall	__gptrget
      0007C3 FC               [12] 1887 	mov	r4,a
      0007C4 70 03            [24] 1888 	jnz	01025$
      0007C6 02r1Dr05         [24] 1889 	ljmp	00217$
      0007C9                       1890 01025$:
      0007C9 7B 00            [12] 1891 	mov	r3,#0x00
      0007CB 8C 82            [24] 1892 	mov	dpl,r4
      0007CD 8B 83            [24] 1893 	mov	dph,r3
      0007CF 12r00r00         [24] 1894 	lcall	_putchar
      0007D2 0F               [12] 1895 	inc	r7
                                   1896 ;	calc.c:151: case 'P':
      0007D3 BF 00 E4         [24] 1897 	cjne	r7,#0x00,00310$
      0007D6 0E               [12] 1898 	inc	r6
      0007D7 80 E1            [24] 1899 	sjmp	00310$
      0007D9                       1900 00105$:
                                   1901 ;	calc.c:152: printstr("\r\n");
      0007D9 7Fr00            [12] 1902 	mov	r7,#___str_0
      0007DB 7Es00            [12] 1903 	mov	r6,#(___str_0 >> 8)
      0007DD 7D 80            [12] 1904 	mov	r5,#0x80
                                   1905 ;	calc.c:50: return;
      0007DF                       1906 00313$:
                                   1907 ;	calc.c:48: for (; *s; s++) putchar(*s);
      0007DF 8F 82            [24] 1908 	mov	dpl,r7
      0007E1 8E 83            [24] 1909 	mov	dph,r6
      0007E3 8D F0            [24] 1910 	mov	b,r5
      0007E5 12r00r00         [24] 1911 	lcall	__gptrget
      0007E8 FC               [12] 1912 	mov	r4,a
      0007E9 60 10            [24] 1913 	jz	00229$
      0007EB 7B 00            [12] 1914 	mov	r3,#0x00
      0007ED 8C 82            [24] 1915 	mov	dpl,r4
      0007EF 8B 83            [24] 1916 	mov	dph,r3
      0007F1 12r00r00         [24] 1917 	lcall	_putchar
      0007F4 0F               [12] 1918 	inc	r7
                                   1919 ;	calc.c:152: printstr("\r\n");
      0007F5 BF 00 E7         [24] 1920 	cjne	r7,#0x00,00313$
      0007F8 0E               [12] 1921 	inc	r6
      0007F9 80 E4            [24] 1922 	sjmp	00313$
      0007FB                       1923 00229$:
                                   1924 ;	calc.c:153: if (!stack_iter_peek(&ctx->s, dump_peek, ctx)) printstr("stack underflow\r\n");
      0007FB E5*00            [12] 1925 	mov	a,_bp
      0007FD 24 0C            [12] 1926 	add	a,#0x0c
      0007FF F8               [12] 1927 	mov	r0,a
      000800 86 07            [24] 1928 	mov	ar7,@r0
      000802 08               [12] 1929 	inc	r0
      000803 86 06            [24] 1930 	mov	ar6,@r0
      000805 08               [12] 1931 	inc	r0
      000806 86 05            [24] 1932 	mov	ar5,@r0
      000808 E5*00            [12] 1933 	mov	a,_bp
      00080A 24 0C            [12] 1934 	add	a,#0x0c
      00080C F8               [12] 1935 	mov	r0,a
      00080D 74 09            [12] 1936 	mov	a,#0x09
      00080F 26               [12] 1937 	add	a,@r0
      000810 FA               [12] 1938 	mov	r2,a
      000811 E4               [12] 1939 	clr	a
      000812 08               [12] 1940 	inc	r0
      000813 36               [12] 1941 	addc	a,@r0
      000814 FB               [12] 1942 	mov	r3,a
      000815 08               [12] 1943 	inc	r0
      000816 86 04            [24] 1944 	mov	ar4,@r0
      000818 C0 07            [24] 1945 	push	ar7
      00081A C0 06            [24] 1946 	push	ar6
      00081C C0 05            [24] 1947 	push	ar5
      00081E 74r47            [12] 1948 	mov	a,#_dump_peek
      000820 C0 E0            [24] 1949 	push	acc
      000822 74s04            [12] 1950 	mov	a,#(_dump_peek >> 8)
      000824 C0 E0            [24] 1951 	push	acc
      000826 8A 82            [24] 1952 	mov	dpl,r2
      000828 8B 83            [24] 1953 	mov	dph,r3
      00082A 8C F0            [24] 1954 	mov	b,r4
      00082C 12r00r00         [24] 1955 	lcall	_stack_iter_peek
      00082F AB 82            [24] 1956 	mov	r3,dpl
      000831 AC 83            [24] 1957 	mov	r4,dph
      000833 E5 81            [12] 1958 	mov	a,sp
      000835 24 FB            [12] 1959 	add	a,#0xfb
      000837 F5 81            [12] 1960 	mov	sp,a
      000839 EB               [12] 1961 	mov	a,r3
      00083A 4C               [12] 1962 	orl	a,r4
      00083B 60 03            [24] 1963 	jz	01029$
      00083D 02r1Dr05         [24] 1964 	ljmp	00217$
      000840                       1965 01029$:
      000840 7Fr03            [12] 1966 	mov	r7,#___str_1
      000842 7Es00            [12] 1967 	mov	r6,#(___str_1 >> 8)
      000844 7D 80            [12] 1968 	mov	r5,#0x80
                                   1969 ;	calc.c:50: return;
      000846                       1970 00316$:
                                   1971 ;	calc.c:48: for (; *s; s++) putchar(*s);
      000846 8F 82            [24] 1972 	mov	dpl,r7
      000848 8E 83            [24] 1973 	mov	dph,r6
      00084A 8D F0            [24] 1974 	mov	b,r5
      00084C 12r00r00         [24] 1975 	lcall	__gptrget
      00084F FC               [12] 1976 	mov	r4,a
      000850 70 03            [24] 1977 	jnz	01030$
      000852 02r1Dr05         [24] 1978 	ljmp	00217$
      000855                       1979 01030$:
      000855 7B 00            [12] 1980 	mov	r3,#0x00
      000857 8C 82            [24] 1981 	mov	dpl,r4
      000859 8B 83            [24] 1982 	mov	dph,r3
      00085B 12r00r00         [24] 1983 	lcall	_putchar
      00085E 0F               [12] 1984 	inc	r7
                                   1985 ;	calc.c:156: case 'v':
      00085F BF 00 E4         [24] 1986 	cjne	r7,#0x00,00316$
      000862 0E               [12] 1987 	inc	r6
      000863 80 E1            [24] 1988 	sjmp	00316$
      000865                       1989 00109$:
                                   1990 ;	calc.c:157: printstr("\r\n");
      000865 7Fr00            [12] 1991 	mov	r7,#___str_0
      000867 7Es00            [12] 1992 	mov	r6,#(___str_0 >> 8)
      000869 7D 80            [12] 1993 	mov	r5,#0x80
                                   1994 ;	calc.c:50: return;
      00086B                       1995 00319$:
                                   1996 ;	calc.c:48: for (; *s; s++) putchar(*s);
      00086B 8F 82            [24] 1997 	mov	dpl,r7
      00086D 8E 83            [24] 1998 	mov	dph,r6
      00086F 8D F0            [24] 1999 	mov	b,r5
      000871 12r00r00         [24] 2000 	lcall	__gptrget
      000874 FC               [12] 2001 	mov	r4,a
      000875 60 10            [24] 2002 	jz	00233$
      000877 7B 00            [12] 2003 	mov	r3,#0x00
      000879 8C 82            [24] 2004 	mov	dpl,r4
      00087B 8B 83            [24] 2005 	mov	dph,r3
      00087D 12r00r00         [24] 2006 	lcall	_putchar
      000880 0F               [12] 2007 	inc	r7
                                   2008 ;	calc.c:157: printstr("\r\n");
      000881 BF 00 E7         [24] 2009 	cjne	r7,#0x00,00319$
      000884 0E               [12] 2010 	inc	r6
      000885 80 E4            [24] 2011 	sjmp	00319$
      000887                       2012 00233$:
                                   2013 ;	calc.c:158: if (!stack_pop(&ctx->s, &d0)) printstr("stack underflow\r\n");
      000887 E5*00            [12] 2014 	mov	a,_bp
      000889 24 0F            [12] 2015 	add	a,#0x0f
      00088B FF               [12] 2016 	mov	r7,a
      00088C 7E 00            [12] 2017 	mov	r6,#0x00
      00088E 7D 40            [12] 2018 	mov	r5,#0x40
      000890 E5*00            [12] 2019 	mov	a,_bp
      000892 24 0C            [12] 2020 	add	a,#0x0c
      000894 F8               [12] 2021 	mov	r0,a
      000895 74 09            [12] 2022 	mov	a,#0x09
      000897 26               [12] 2023 	add	a,@r0
      000898 FA               [12] 2024 	mov	r2,a
      000899 E4               [12] 2025 	clr	a
      00089A 08               [12] 2026 	inc	r0
      00089B 36               [12] 2027 	addc	a,@r0
      00089C FB               [12] 2028 	mov	r3,a
      00089D 08               [12] 2029 	inc	r0
      00089E 86 04            [24] 2030 	mov	ar4,@r0
      0008A0 C0 07            [24] 2031 	push	ar7
      0008A2 C0 06            [24] 2032 	push	ar6
      0008A4 C0 05            [24] 2033 	push	ar5
      0008A6 8A 82            [24] 2034 	mov	dpl,r2
      0008A8 8B 83            [24] 2035 	mov	dph,r3
      0008AA 8C F0            [24] 2036 	mov	b,r4
      0008AC 12r00r00         [24] 2037 	lcall	_stack_pop
      0008AF AB 82            [24] 2038 	mov	r3,dpl
      0008B1 AC 83            [24] 2039 	mov	r4,dph
      0008B3 15 81            [12] 2040 	dec	sp
      0008B5 15 81            [12] 2041 	dec	sp
      0008B7 15 81            [12] 2042 	dec	sp
      0008B9 EB               [12] 2043 	mov	a,r3
      0008BA 4C               [12] 2044 	orl	a,r4
      0008BB 70 25            [24] 2045 	jnz	00111$
      0008BD 7Fr03            [12] 2046 	mov	r7,#___str_1
      0008BF 7Es00            [12] 2047 	mov	r6,#(___str_1 >> 8)
      0008C1 7D 80            [12] 2048 	mov	r5,#0x80
                                   2049 ;	calc.c:50: return;
      0008C3                       2050 00322$:
                                   2051 ;	calc.c:48: for (; *s; s++) putchar(*s);
      0008C3 8F 82            [24] 2052 	mov	dpl,r7
      0008C5 8E 83            [24] 2053 	mov	dph,r6
      0008C7 8D F0            [24] 2054 	mov	b,r5
      0008C9 12r00r00         [24] 2055 	lcall	__gptrget
      0008CC FC               [12] 2056 	mov	r4,a
      0008CD 70 03            [24] 2057 	jnz	01035$
      0008CF 02r1Dr05         [24] 2058 	ljmp	00217$
      0008D2                       2059 01035$:
      0008D2 7B 00            [12] 2060 	mov	r3,#0x00
      0008D4 8C 82            [24] 2061 	mov	dpl,r4
      0008D6 8B 83            [24] 2062 	mov	dph,r3
      0008D8 12r00r00         [24] 2063 	lcall	_putchar
      0008DB 0F               [12] 2064 	inc	r7
                                   2065 ;	calc.c:158: if (!stack_pop(&ctx->s, &d0)) printstr("stack underflow\r\n");
      0008DC BF 00 E4         [24] 2066 	cjne	r7,#0x00,00322$
      0008DF 0E               [12] 2067 	inc	r6
      0008E0 80 E1            [24] 2068 	sjmp	00322$
      0008E2                       2069 00111$:
                                   2070 ;	calc.c:160: printstr("VT ");
      0008E2 7Fr34            [12] 2071 	mov	r7,#___str_7
      0008E4 7Es00            [12] 2072 	mov	r6,#(___str_7 >> 8)
      0008E6 7D 80            [12] 2073 	mov	r5,#0x80
                                   2074 ;	calc.c:50: return;
      0008E8                       2075 00325$:
                                   2076 ;	calc.c:48: for (; *s; s++) putchar(*s);
      0008E8 8F 82            [24] 2077 	mov	dpl,r7
      0008EA 8E 83            [24] 2078 	mov	dph,r6
      0008EC 8D F0            [24] 2079 	mov	b,r5
      0008EE 12r00r00         [24] 2080 	lcall	__gptrget
      0008F1 FC               [12] 2081 	mov	r4,a
      0008F2 60 10            [24] 2082 	jz	00237$
      0008F4 7B 00            [12] 2083 	mov	r3,#0x00
      0008F6 8C 82            [24] 2084 	mov	dpl,r4
      0008F8 8B 83            [24] 2085 	mov	dph,r3
      0008FA 12r00r00         [24] 2086 	lcall	_putchar
      0008FD 0F               [12] 2087 	inc	r7
                                   2088 ;	calc.c:160: printstr("VT ");
      0008FE BF 00 E7         [24] 2089 	cjne	r7,#0x00,00325$
      000901 0E               [12] 2090 	inc	r6
      000902 80 E4            [24] 2091 	sjmp	00325$
      000904                       2092 00237$:
                                   2093 ;	calc.c:161: printf("% 11ld / ", d0);
      000904 E5*00            [12] 2094 	mov	a,_bp
      000906 24 0F            [12] 2095 	add	a,#0x0f
      000908 F8               [12] 2096 	mov	r0,a
      000909 E6               [12] 2097 	mov	a,@r0
      00090A C0 E0            [24] 2098 	push	acc
      00090C 08               [12] 2099 	inc	r0
      00090D E6               [12] 2100 	mov	a,@r0
      00090E C0 E0            [24] 2101 	push	acc
      000910 08               [12] 2102 	inc	r0
      000911 E6               [12] 2103 	mov	a,@r0
      000912 C0 E0            [24] 2104 	push	acc
      000914 08               [12] 2105 	inc	r0
      000915 E6               [12] 2106 	mov	a,@r0
      000916 C0 E0            [24] 2107 	push	acc
      000918 74r19            [12] 2108 	mov	a,#___str_3
      00091A C0 E0            [24] 2109 	push	acc
      00091C 74s00            [12] 2110 	mov	a,#(___str_3 >> 8)
      00091E C0 E0            [24] 2111 	push	acc
      000920 74 80            [12] 2112 	mov	a,#0x80
      000922 C0 E0            [24] 2113 	push	acc
      000924 12r00r00         [24] 2114 	lcall	_printf
      000927 E5 81            [12] 2115 	mov	a,sp
      000929 24 F9            [12] 2116 	add	a,#0xf9
      00092B F5 81            [12] 2117 	mov	sp,a
                                   2118 ;	calc.c:162: printf("%08lx / ", d0);
      00092D E5*00            [12] 2119 	mov	a,_bp
      00092F 24 0F            [12] 2120 	add	a,#0x0f
      000931 F8               [12] 2121 	mov	r0,a
      000932 E6               [12] 2122 	mov	a,@r0
      000933 C0 E0            [24] 2123 	push	acc
      000935 08               [12] 2124 	inc	r0
      000936 E6               [12] 2125 	mov	a,@r0
      000937 C0 E0            [24] 2126 	push	acc
      000939 08               [12] 2127 	inc	r0
      00093A E6               [12] 2128 	mov	a,@r0
      00093B C0 E0            [24] 2129 	push	acc
      00093D 08               [12] 2130 	inc	r0
      00093E E6               [12] 2131 	mov	a,@r0
      00093F C0 E0            [24] 2132 	push	acc
      000941 74r23            [12] 2133 	mov	a,#___str_4
      000943 C0 E0            [24] 2134 	push	acc
      000945 74s00            [12] 2135 	mov	a,#(___str_4 >> 8)
      000947 C0 E0            [24] 2136 	push	acc
      000949 74 80            [12] 2137 	mov	a,#0x80
      00094B C0 E0            [24] 2138 	push	acc
      00094D 12r00r00         [24] 2139 	lcall	_printf
      000950 E5 81            [12] 2140 	mov	a,sp
      000952 24 F9            [12] 2141 	add	a,#0xf9
      000954 F5 81            [12] 2142 	mov	sp,a
                                   2143 ;	calc.c:163: printbin(d0);
      000956 E5*00            [12] 2144 	mov	a,_bp
      000958 24 0F            [12] 2145 	add	a,#0x0f
      00095A F8               [12] 2146 	mov	r0,a
      00095B 86 07            [24] 2147 	mov	ar7,@r0
      00095D 08               [12] 2148 	inc	r0
      00095E 86 06            [24] 2149 	mov	ar6,@r0
      000960 08               [12] 2150 	inc	r0
      000961 86 05            [24] 2151 	mov	ar5,@r0
      000963 08               [12] 2152 	inc	r0
      000964 86 04            [24] 2153 	mov	ar4,@r0
      000966 8C 02            [24] 2154 	mov	ar2,r4
                                   2155 ;	calc.c:56: for (mask = 0x80000000lu; mask; mask >>= 1)
      000968 E5*00            [12] 2156 	mov	a,_bp
      00096A 24 17            [12] 2157 	add	a,#0x17
      00096C F8               [12] 2158 	mov	r0,a
      00096D E4               [12] 2159 	clr	a
      00096E F6               [12] 2160 	mov	@r0,a
      00096F 08               [12] 2161 	inc	r0
      000970 F6               [12] 2162 	mov	@r0,a
      000971 08               [12] 2163 	inc	r0
      000972 F6               [12] 2164 	mov	@r0,a
      000973 08               [12] 2165 	inc	r0
      000974 76 80            [12] 2166 	mov	@r0,#0x80
      000976                       2167 00327$:
                                   2168 ;	calc.c:57: (void)putchar((d & mask) ? (int)'1' : (int)'0');
      000976 E5*00            [12] 2169 	mov	a,_bp
      000978 24 04            [12] 2170 	add	a,#0x04
      00097A F8               [12] 2171 	mov	r0,a
      00097B A6 07            [24] 2172 	mov	@r0,ar7
      00097D 08               [12] 2173 	inc	r0
      00097E A6 06            [24] 2174 	mov	@r0,ar6
      000980 08               [12] 2175 	inc	r0
      000981 A6 05            [24] 2176 	mov	@r0,ar5
      000983 08               [12] 2177 	inc	r0
      000984 A6 02            [24] 2178 	mov	@r0,ar2
      000986 E5*00            [12] 2179 	mov	a,_bp
      000988 24 04            [12] 2180 	add	a,#0x04
      00098A F8               [12] 2181 	mov	r0,a
      00098B E5*00            [12] 2182 	mov	a,_bp
      00098D 24 17            [12] 2183 	add	a,#0x17
      00098F F9               [12] 2184 	mov	r1,a
      000990 E7               [12] 2185 	mov	a,@r1
      000991 56               [12] 2186 	anl	a,@r0
      000992 F6               [12] 2187 	mov	@r0,a
      000993 09               [12] 2188 	inc	r1
      000994 E7               [12] 2189 	mov	a,@r1
      000995 08               [12] 2190 	inc	r0
      000996 56               [12] 2191 	anl	a,@r0
      000997 F6               [12] 2192 	mov	@r0,a
      000998 09               [12] 2193 	inc	r1
      000999 E7               [12] 2194 	mov	a,@r1
      00099A 08               [12] 2195 	inc	r0
      00099B 56               [12] 2196 	anl	a,@r0
      00099C F6               [12] 2197 	mov	@r0,a
      00099D 09               [12] 2198 	inc	r1
      00099E E7               [12] 2199 	mov	a,@r1
      00099F 08               [12] 2200 	inc	r0
      0009A0 56               [12] 2201 	anl	a,@r0
      0009A1 F6               [12] 2202 	mov	@r0,a
      0009A2 E5*00            [12] 2203 	mov	a,_bp
      0009A4 24 04            [12] 2204 	add	a,#0x04
      0009A6 F8               [12] 2205 	mov	r0,a
      0009A7 E6               [12] 2206 	mov	a,@r0
      0009A8 08               [12] 2207 	inc	r0
      0009A9 46               [12] 2208 	orl	a,@r0
      0009AA 08               [12] 2209 	inc	r0
      0009AB 46               [12] 2210 	orl	a,@r0
      0009AC 08               [12] 2211 	inc	r0
      0009AD 46               [12] 2212 	orl	a,@r0
      0009AE 60 06            [24] 2213 	jz	00420$
      0009B0 7B 31            [12] 2214 	mov	r3,#0x31
      0009B2 7C 00            [12] 2215 	mov	r4,#0x00
      0009B4 80 04            [24] 2216 	sjmp	00421$
      0009B6                       2217 00420$:
      0009B6 7B 30            [12] 2218 	mov	r3,#0x30
      0009B8 7C 00            [12] 2219 	mov	r4,#0x00
      0009BA                       2220 00421$:
      0009BA 8B 82            [24] 2221 	mov	dpl,r3
      0009BC 8C 83            [24] 2222 	mov	dph,r4
      0009BE 12r00r00         [24] 2223 	lcall	_putchar
                                   2224 ;	calc.c:56: for (mask = 0x80000000lu; mask; mask >>= 1)
      0009C1 E5*00            [12] 2225 	mov	a,_bp
      0009C3 24 17            [12] 2226 	add	a,#0x17
      0009C5 F8               [12] 2227 	mov	r0,a
      0009C6 08               [12] 2228 	inc	r0
      0009C7 08               [12] 2229 	inc	r0
      0009C8 08               [12] 2230 	inc	r0
      0009C9 E6               [12] 2231 	mov	a,@r0
      0009CA C3               [12] 2232 	clr	c
      0009CB 13               [12] 2233 	rrc	a
      0009CC F6               [12] 2234 	mov	@r0,a
      0009CD 18               [12] 2235 	dec	r0
      0009CE E6               [12] 2236 	mov	a,@r0
      0009CF 13               [12] 2237 	rrc	a
      0009D0 F6               [12] 2238 	mov	@r0,a
      0009D1 18               [12] 2239 	dec	r0
      0009D2 E6               [12] 2240 	mov	a,@r0
      0009D3 13               [12] 2241 	rrc	a
      0009D4 F6               [12] 2242 	mov	@r0,a
      0009D5 18               [12] 2243 	dec	r0
      0009D6 E6               [12] 2244 	mov	a,@r0
      0009D7 13               [12] 2245 	rrc	a
      0009D8 F6               [12] 2246 	mov	@r0,a
      0009D9 E5*00            [12] 2247 	mov	a,_bp
      0009DB 24 17            [12] 2248 	add	a,#0x17
      0009DD F8               [12] 2249 	mov	r0,a
      0009DE E6               [12] 2250 	mov	a,@r0
      0009DF 08               [12] 2251 	inc	r0
      0009E0 46               [12] 2252 	orl	a,@r0
      0009E1 08               [12] 2253 	inc	r0
      0009E2 46               [12] 2254 	orl	a,@r0
      0009E3 08               [12] 2255 	inc	r0
      0009E4 46               [12] 2256 	orl	a,@r0
      0009E5 70 8F            [24] 2257 	jnz	00327$
                                   2258 ;	calc.c:164: printstr("\r\n");
      0009E7 7Fr00            [12] 2259 	mov	r7,#___str_0
      0009E9 7Es00            [12] 2260 	mov	r6,#(___str_0 >> 8)
      0009EB 7D 80            [12] 2261 	mov	r5,#0x80
                                   2262 ;	calc.c:50: return;
      0009ED                       2263 00330$:
                                   2264 ;	calc.c:48: for (; *s; s++) putchar(*s);
      0009ED 8F 82            [24] 2265 	mov	dpl,r7
      0009EF 8E 83            [24] 2266 	mov	dph,r6
      0009F1 8D F0            [24] 2267 	mov	b,r5
      0009F3 12r00r00         [24] 2268 	lcall	__gptrget
      0009F6 FC               [12] 2269 	mov	r4,a
      0009F7 70 03            [24] 2270 	jnz	01041$
      0009F9 02r1Dr05         [24] 2271 	ljmp	00217$
      0009FC                       2272 01041$:
      0009FC 7B 00            [12] 2273 	mov	r3,#0x00
      0009FE 8C 82            [24] 2274 	mov	dpl,r4
      000A00 8B 83            [24] 2275 	mov	dph,r3
      000A02 12r00r00         [24] 2276 	lcall	_putchar
      000A05 0F               [12] 2277 	inc	r7
                                   2278 ;	calc.c:167: case 'V':
      000A06 BF 00 E4         [24] 2279 	cjne	r7,#0x00,00330$
      000A09 0E               [12] 2280 	inc	r6
      000A0A 80 E1            [24] 2281 	sjmp	00330$
      000A0C                       2282 00113$:
                                   2283 ;	calc.c:168: printstr("\r\n");
      000A0C 7Fr00            [12] 2284 	mov	r7,#___str_0
      000A0E 7Es00            [12] 2285 	mov	r6,#(___str_0 >> 8)
      000A10 7D 80            [12] 2286 	mov	r5,#0x80
                                   2287 ;	calc.c:50: return;
      000A12                       2288 00333$:
                                   2289 ;	calc.c:48: for (; *s; s++) putchar(*s);
      000A12 8F 82            [24] 2290 	mov	dpl,r7
      000A14 8E 83            [24] 2291 	mov	dph,r6
      000A16 8D F0            [24] 2292 	mov	b,r5
      000A18 12r00r00         [24] 2293 	lcall	__gptrget
      000A1B FC               [12] 2294 	mov	r4,a
      000A1C 60 10            [24] 2295 	jz	00243$
      000A1E 7B 00            [12] 2296 	mov	r3,#0x00
      000A20 8C 82            [24] 2297 	mov	dpl,r4
      000A22 8B 83            [24] 2298 	mov	dph,r3
      000A24 12r00r00         [24] 2299 	lcall	_putchar
      000A27 0F               [12] 2300 	inc	r7
                                   2301 ;	calc.c:168: printstr("\r\n");
      000A28 BF 00 E7         [24] 2302 	cjne	r7,#0x00,00333$
      000A2B 0E               [12] 2303 	inc	r6
      000A2C 80 E4            [24] 2304 	sjmp	00333$
      000A2E                       2305 00243$:
                                   2306 ;	calc.c:169: (void)dump_pop(_ctx, delta);
      000A2E E5*00            [12] 2307 	mov	a,_bp
      000A30 24 FB            [12] 2308 	add	a,#0xfb
      000A32 F8               [12] 2309 	mov	r0,a
      000A33 E6               [12] 2310 	mov	a,@r0
      000A34 C0 E0            [24] 2311 	push	acc
      000A36 08               [12] 2312 	inc	r0
      000A37 E6               [12] 2313 	mov	a,@r0
      000A38 C0 E0            [24] 2314 	push	acc
      000A3A 08               [12] 2315 	inc	r0
      000A3B E6               [12] 2316 	mov	a,@r0
      000A3C C0 E0            [24] 2317 	push	acc
      000A3E A8*00            [24] 2318 	mov	r0,_bp
      000A40 08               [12] 2319 	inc	r0
      000A41 86 82            [24] 2320 	mov	dpl,@r0
      000A43 08               [12] 2321 	inc	r0
      000A44 86 83            [24] 2322 	mov	dph,@r0
      000A46 08               [12] 2323 	inc	r0
      000A47 86 F0            [24] 2324 	mov	b,@r0
      000A49 12r01r93         [24] 2325 	lcall	_dump_pop
      000A4C 15 81            [12] 2326 	dec	sp
      000A4E 15 81            [12] 2327 	dec	sp
      000A50 15 81            [12] 2328 	dec	sp
                                   2329 ;	calc.c:170: break;
      000A52 02r1Dr05         [24] 2330 	ljmp	00217$
                                   2331 ;	calc.c:171: case 'x':
      000A55                       2332 00114$:
                                   2333 ;	calc.c:172: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      000A55 E5*00            [12] 2334 	mov	a,_bp
      000A57 24 0F            [12] 2335 	add	a,#0x0f
      000A59 FF               [12] 2336 	mov	r7,a
      000A5A 7E 00            [12] 2337 	mov	r6,#0x00
      000A5C 7D 40            [12] 2338 	mov	r5,#0x40
      000A5E E5*00            [12] 2339 	mov	a,_bp
      000A60 24 0C            [12] 2340 	add	a,#0x0c
      000A62 F8               [12] 2341 	mov	r0,a
      000A63 74 09            [12] 2342 	mov	a,#0x09
      000A65 26               [12] 2343 	add	a,@r0
      000A66 FA               [12] 2344 	mov	r2,a
      000A67 E4               [12] 2345 	clr	a
      000A68 08               [12] 2346 	inc	r0
      000A69 36               [12] 2347 	addc	a,@r0
      000A6A FB               [12] 2348 	mov	r3,a
      000A6B 08               [12] 2349 	inc	r0
      000A6C 86 04            [24] 2350 	mov	ar4,@r0
      000A6E C0 07            [24] 2351 	push	ar7
      000A70 C0 06            [24] 2352 	push	ar6
      000A72 C0 05            [24] 2353 	push	ar5
      000A74 8A 82            [24] 2354 	mov	dpl,r2
      000A76 8B 83            [24] 2355 	mov	dph,r3
      000A78 8C F0            [24] 2356 	mov	b,r4
      000A7A 12r00r00         [24] 2357 	lcall	_stack_pop
      000A7D AB 82            [24] 2358 	mov	r3,dpl
      000A7F AC 83            [24] 2359 	mov	r4,dph
      000A81 15 81            [12] 2360 	dec	sp
      000A83 15 81            [12] 2361 	dec	sp
      000A85 15 81            [12] 2362 	dec	sp
      000A87 EB               [12] 2363 	mov	a,r3
      000A88 4C               [12] 2364 	orl	a,r4
      000A89 70 25            [24] 2365 	jnz	00119$
      000A8B 7Fr38            [12] 2366 	mov	r7,#___str_8
      000A8D 7Es00            [12] 2367 	mov	r6,#(___str_8 >> 8)
      000A8F 7D 80            [12] 2368 	mov	r5,#0x80
                                   2369 ;	calc.c:50: return;
      000A91                       2370 00336$:
                                   2371 ;	calc.c:48: for (; *s; s++) putchar(*s);
      000A91 8F 82            [24] 2372 	mov	dpl,r7
      000A93 8E 83            [24] 2373 	mov	dph,r6
      000A95 8D F0            [24] 2374 	mov	b,r5
      000A97 12r00r00         [24] 2375 	lcall	__gptrget
      000A9A FC               [12] 2376 	mov	r4,a
      000A9B 70 03            [24] 2377 	jnz	01046$
      000A9D 02r1Dr05         [24] 2378 	ljmp	00217$
      000AA0                       2379 01046$:
      000AA0 7B 00            [12] 2380 	mov	r3,#0x00
      000AA2 8C 82            [24] 2381 	mov	dpl,r4
      000AA4 8B 83            [24] 2382 	mov	dph,r3
      000AA6 12r00r00         [24] 2383 	lcall	_putchar
      000AA9 0F               [12] 2384 	inc	r7
                                   2385 ;	calc.c:172: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      000AAA BF 00 E4         [24] 2386 	cjne	r7,#0x00,00336$
      000AAD 0E               [12] 2387 	inc	r6
      000AAE 80 E1            [24] 2388 	sjmp	00336$
      000AB0                       2389 00119$:
                                   2390 ;	calc.c:173: else if (!stack_pop(&ctx->s, &d1)) {
      000AB0 E5*00            [12] 2391 	mov	a,_bp
      000AB2 24 13            [12] 2392 	add	a,#0x13
      000AB4 FF               [12] 2393 	mov	r7,a
      000AB5 7E 00            [12] 2394 	mov	r6,#0x00
      000AB7 7D 40            [12] 2395 	mov	r5,#0x40
      000AB9 E5*00            [12] 2396 	mov	a,_bp
      000ABB 24 0C            [12] 2397 	add	a,#0x0c
      000ABD F8               [12] 2398 	mov	r0,a
      000ABE 74 09            [12] 2399 	mov	a,#0x09
      000AC0 26               [12] 2400 	add	a,@r0
      000AC1 FA               [12] 2401 	mov	r2,a
      000AC2 E4               [12] 2402 	clr	a
      000AC3 08               [12] 2403 	inc	r0
      000AC4 36               [12] 2404 	addc	a,@r0
      000AC5 FB               [12] 2405 	mov	r3,a
      000AC6 08               [12] 2406 	inc	r0
      000AC7 86 04            [24] 2407 	mov	ar4,@r0
      000AC9 C0 07            [24] 2408 	push	ar7
      000ACB C0 06            [24] 2409 	push	ar6
      000ACD C0 05            [24] 2410 	push	ar5
      000ACF 8A 82            [24] 2411 	mov	dpl,r2
      000AD1 8B 83            [24] 2412 	mov	dph,r3
      000AD3 8C F0            [24] 2413 	mov	b,r4
      000AD5 12r00r00         [24] 2414 	lcall	_stack_pop
      000AD8 AB 82            [24] 2415 	mov	r3,dpl
      000ADA AC 83            [24] 2416 	mov	r4,dph
      000ADC 15 81            [12] 2417 	dec	sp
      000ADE 15 81            [12] 2418 	dec	sp
      000AE0 15 81            [12] 2419 	dec	sp
      000AE2 EB               [12] 2420 	mov	a,r3
      000AE3 4C               [12] 2421 	orl	a,r4
      000AE4 70 58            [24] 2422 	jnz	00116$
                                   2423 ;	calc.c:174: (void)stack_push(&ctx->s, d0);
      000AE6 E5*00            [12] 2424 	mov	a,_bp
      000AE8 24 0C            [12] 2425 	add	a,#0x0c
      000AEA F8               [12] 2426 	mov	r0,a
      000AEB 74 09            [12] 2427 	mov	a,#0x09
      000AED 26               [12] 2428 	add	a,@r0
      000AEE FA               [12] 2429 	mov	r2,a
      000AEF E4               [12] 2430 	clr	a
      000AF0 08               [12] 2431 	inc	r0
      000AF1 36               [12] 2432 	addc	a,@r0
      000AF2 FB               [12] 2433 	mov	r3,a
      000AF3 08               [12] 2434 	inc	r0
      000AF4 86 04            [24] 2435 	mov	ar4,@r0
      000AF6 E5*00            [12] 2436 	mov	a,_bp
      000AF8 24 0F            [12] 2437 	add	a,#0x0f
      000AFA F8               [12] 2438 	mov	r0,a
      000AFB E6               [12] 2439 	mov	a,@r0
      000AFC C0 E0            [24] 2440 	push	acc
      000AFE 08               [12] 2441 	inc	r0
      000AFF E6               [12] 2442 	mov	a,@r0
      000B00 C0 E0            [24] 2443 	push	acc
      000B02 08               [12] 2444 	inc	r0
      000B03 E6               [12] 2445 	mov	a,@r0
      000B04 C0 E0            [24] 2446 	push	acc
      000B06 08               [12] 2447 	inc	r0
      000B07 E6               [12] 2448 	mov	a,@r0
      000B08 C0 E0            [24] 2449 	push	acc
      000B0A 8A 82            [24] 2450 	mov	dpl,r2
      000B0C 8B 83            [24] 2451 	mov	dph,r3
      000B0E 8C F0            [24] 2452 	mov	b,r4
      000B10 12r00r00         [24] 2453 	lcall	_stack_push
      000B13 E5 81            [12] 2454 	mov	a,sp
      000B15 24 FC            [12] 2455 	add	a,#0xfc
      000B17 F5 81            [12] 2456 	mov	sp,a
                                   2457 ;	calc.c:175: printstr("\r\nstack underflow\r\n");
      000B19 7Fr38            [12] 2458 	mov	r7,#___str_8
      000B1B 7Es00            [12] 2459 	mov	r6,#(___str_8 >> 8)
      000B1D 7D 80            [12] 2460 	mov	r5,#0x80
                                   2461 ;	calc.c:50: return;
      000B1F                       2462 00339$:
                                   2463 ;	calc.c:48: for (; *s; s++) putchar(*s);
      000B1F 8F 82            [24] 2464 	mov	dpl,r7
      000B21 8E 83            [24] 2465 	mov	dph,r6
      000B23 8D F0            [24] 2466 	mov	b,r5
      000B25 12r00r00         [24] 2467 	lcall	__gptrget
      000B28 FC               [12] 2468 	mov	r4,a
      000B29 70 03            [24] 2469 	jnz	01049$
      000B2B 02r1Dr05         [24] 2470 	ljmp	00217$
      000B2E                       2471 01049$:
      000B2E 7B 00            [12] 2472 	mov	r3,#0x00
      000B30 8C 82            [24] 2473 	mov	dpl,r4
      000B32 8B 83            [24] 2474 	mov	dph,r3
      000B34 12r00r00         [24] 2475 	lcall	_putchar
      000B37 0F               [12] 2476 	inc	r7
                                   2477 ;	calc.c:175: printstr("\r\nstack underflow\r\n");
      000B38 BF 00 E4         [24] 2478 	cjne	r7,#0x00,00339$
      000B3B 0E               [12] 2479 	inc	r6
      000B3C 80 E1            [24] 2480 	sjmp	00339$
      000B3E                       2481 00116$:
                                   2482 ;	calc.c:177: (void)stack_push(&ctx->s, d0);
      000B3E E5*00            [12] 2483 	mov	a,_bp
      000B40 24 0C            [12] 2484 	add	a,#0x0c
      000B42 F8               [12] 2485 	mov	r0,a
      000B43 74 09            [12] 2486 	mov	a,#0x09
      000B45 26               [12] 2487 	add	a,@r0
      000B46 FA               [12] 2488 	mov	r2,a
      000B47 E4               [12] 2489 	clr	a
      000B48 08               [12] 2490 	inc	r0
      000B49 36               [12] 2491 	addc	a,@r0
      000B4A FB               [12] 2492 	mov	r3,a
      000B4B 08               [12] 2493 	inc	r0
      000B4C 86 04            [24] 2494 	mov	ar4,@r0
      000B4E E5*00            [12] 2495 	mov	a,_bp
      000B50 24 0F            [12] 2496 	add	a,#0x0f
      000B52 F8               [12] 2497 	mov	r0,a
      000B53 E6               [12] 2498 	mov	a,@r0
      000B54 C0 E0            [24] 2499 	push	acc
      000B56 08               [12] 2500 	inc	r0
      000B57 E6               [12] 2501 	mov	a,@r0
      000B58 C0 E0            [24] 2502 	push	acc
      000B5A 08               [12] 2503 	inc	r0
      000B5B E6               [12] 2504 	mov	a,@r0
      000B5C C0 E0            [24] 2505 	push	acc
      000B5E 08               [12] 2506 	inc	r0
      000B5F E6               [12] 2507 	mov	a,@r0
      000B60 C0 E0            [24] 2508 	push	acc
      000B62 8A 82            [24] 2509 	mov	dpl,r2
      000B64 8B 83            [24] 2510 	mov	dph,r3
      000B66 8C F0            [24] 2511 	mov	b,r4
      000B68 12r00r00         [24] 2512 	lcall	_stack_push
      000B6B E5 81            [12] 2513 	mov	a,sp
      000B6D 24 FC            [12] 2514 	add	a,#0xfc
      000B6F F5 81            [12] 2515 	mov	sp,a
                                   2516 ;	calc.c:178: (void)stack_push(&ctx->s, d1);
      000B71 E5*00            [12] 2517 	mov	a,_bp
      000B73 24 0C            [12] 2518 	add	a,#0x0c
      000B75 F8               [12] 2519 	mov	r0,a
      000B76 74 09            [12] 2520 	mov	a,#0x09
      000B78 26               [12] 2521 	add	a,@r0
      000B79 FA               [12] 2522 	mov	r2,a
      000B7A E4               [12] 2523 	clr	a
      000B7B 08               [12] 2524 	inc	r0
      000B7C 36               [12] 2525 	addc	a,@r0
      000B7D FB               [12] 2526 	mov	r3,a
      000B7E 08               [12] 2527 	inc	r0
      000B7F 86 04            [24] 2528 	mov	ar4,@r0
      000B81 E5*00            [12] 2529 	mov	a,_bp
      000B83 24 13            [12] 2530 	add	a,#0x13
      000B85 F8               [12] 2531 	mov	r0,a
      000B86 E6               [12] 2532 	mov	a,@r0
      000B87 C0 E0            [24] 2533 	push	acc
      000B89 08               [12] 2534 	inc	r0
      000B8A E6               [12] 2535 	mov	a,@r0
      000B8B C0 E0            [24] 2536 	push	acc
      000B8D 08               [12] 2537 	inc	r0
      000B8E E6               [12] 2538 	mov	a,@r0
      000B8F C0 E0            [24] 2539 	push	acc
      000B91 08               [12] 2540 	inc	r0
      000B92 E6               [12] 2541 	mov	a,@r0
      000B93 C0 E0            [24] 2542 	push	acc
      000B95 8A 82            [24] 2543 	mov	dpl,r2
      000B97 8B 83            [24] 2544 	mov	dph,r3
      000B99 8C F0            [24] 2545 	mov	b,r4
      000B9B 12r00r00         [24] 2546 	lcall	_stack_push
      000B9E E5 81            [12] 2547 	mov	a,sp
      000BA0 24 FC            [12] 2548 	add	a,#0xfc
      000BA2 F5 81            [12] 2549 	mov	sp,a
                                   2550 ;	calc.c:180: break;
      000BA4 02r1Dr05         [24] 2551 	ljmp	00217$
                                   2552 ;	calc.c:181: case '+':
      000BA7                       2553 00121$:
                                   2554 ;	calc.c:182: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      000BA7 E5*00            [12] 2555 	mov	a,_bp
      000BA9 24 0F            [12] 2556 	add	a,#0x0f
      000BAB FF               [12] 2557 	mov	r7,a
      000BAC 7E 00            [12] 2558 	mov	r6,#0x00
      000BAE 7D 40            [12] 2559 	mov	r5,#0x40
      000BB0 E5*00            [12] 2560 	mov	a,_bp
      000BB2 24 0C            [12] 2561 	add	a,#0x0c
      000BB4 F8               [12] 2562 	mov	r0,a
      000BB5 74 09            [12] 2563 	mov	a,#0x09
      000BB7 26               [12] 2564 	add	a,@r0
      000BB8 FA               [12] 2565 	mov	r2,a
      000BB9 E4               [12] 2566 	clr	a
      000BBA 08               [12] 2567 	inc	r0
      000BBB 36               [12] 2568 	addc	a,@r0
      000BBC FB               [12] 2569 	mov	r3,a
      000BBD 08               [12] 2570 	inc	r0
      000BBE 86 04            [24] 2571 	mov	ar4,@r0
      000BC0 C0 07            [24] 2572 	push	ar7
      000BC2 C0 06            [24] 2573 	push	ar6
      000BC4 C0 05            [24] 2574 	push	ar5
      000BC6 8A 82            [24] 2575 	mov	dpl,r2
      000BC8 8B 83            [24] 2576 	mov	dph,r3
      000BCA 8C F0            [24] 2577 	mov	b,r4
      000BCC 12r00r00         [24] 2578 	lcall	_stack_pop
      000BCF AB 82            [24] 2579 	mov	r3,dpl
      000BD1 AC 83            [24] 2580 	mov	r4,dph
      000BD3 15 81            [12] 2581 	dec	sp
      000BD5 15 81            [12] 2582 	dec	sp
      000BD7 15 81            [12] 2583 	dec	sp
      000BD9 EB               [12] 2584 	mov	a,r3
      000BDA 4C               [12] 2585 	orl	a,r4
      000BDB 70 25            [24] 2586 	jnz	00126$
      000BDD 7Fr38            [12] 2587 	mov	r7,#___str_8
      000BDF 7Es00            [12] 2588 	mov	r6,#(___str_8 >> 8)
      000BE1 7D 80            [12] 2589 	mov	r5,#0x80
                                   2590 ;	calc.c:50: return;
      000BE3                       2591 00342$:
                                   2592 ;	calc.c:48: for (; *s; s++) putchar(*s);
      000BE3 8F 82            [24] 2593 	mov	dpl,r7
      000BE5 8E 83            [24] 2594 	mov	dph,r6
      000BE7 8D F0            [24] 2595 	mov	b,r5
      000BE9 12r00r00         [24] 2596 	lcall	__gptrget
      000BEC FC               [12] 2597 	mov	r4,a
      000BED 70 03            [24] 2598 	jnz	01052$
      000BEF 02r1Dr05         [24] 2599 	ljmp	00217$
      000BF2                       2600 01052$:
      000BF2 7B 00            [12] 2601 	mov	r3,#0x00
      000BF4 8C 82            [24] 2602 	mov	dpl,r4
      000BF6 8B 83            [24] 2603 	mov	dph,r3
      000BF8 12r00r00         [24] 2604 	lcall	_putchar
      000BFB 0F               [12] 2605 	inc	r7
                                   2606 ;	calc.c:182: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      000BFC BF 00 E4         [24] 2607 	cjne	r7,#0x00,00342$
      000BFF 0E               [12] 2608 	inc	r6
      000C00 80 E1            [24] 2609 	sjmp	00342$
      000C02                       2610 00126$:
                                   2611 ;	calc.c:183: else if (!stack_pop(&ctx->s, &d1)) {
      000C02 E5*00            [12] 2612 	mov	a,_bp
      000C04 24 13            [12] 2613 	add	a,#0x13
      000C06 FF               [12] 2614 	mov	r7,a
      000C07 7E 00            [12] 2615 	mov	r6,#0x00
      000C09 7D 40            [12] 2616 	mov	r5,#0x40
      000C0B E5*00            [12] 2617 	mov	a,_bp
      000C0D 24 0C            [12] 2618 	add	a,#0x0c
      000C0F F8               [12] 2619 	mov	r0,a
      000C10 74 09            [12] 2620 	mov	a,#0x09
      000C12 26               [12] 2621 	add	a,@r0
      000C13 FA               [12] 2622 	mov	r2,a
      000C14 E4               [12] 2623 	clr	a
      000C15 08               [12] 2624 	inc	r0
      000C16 36               [12] 2625 	addc	a,@r0
      000C17 FB               [12] 2626 	mov	r3,a
      000C18 08               [12] 2627 	inc	r0
      000C19 86 04            [24] 2628 	mov	ar4,@r0
      000C1B C0 07            [24] 2629 	push	ar7
      000C1D C0 06            [24] 2630 	push	ar6
      000C1F C0 05            [24] 2631 	push	ar5
      000C21 8A 82            [24] 2632 	mov	dpl,r2
      000C23 8B 83            [24] 2633 	mov	dph,r3
      000C25 8C F0            [24] 2634 	mov	b,r4
      000C27 12r00r00         [24] 2635 	lcall	_stack_pop
      000C2A AB 82            [24] 2636 	mov	r3,dpl
      000C2C AC 83            [24] 2637 	mov	r4,dph
      000C2E 15 81            [12] 2638 	dec	sp
      000C30 15 81            [12] 2639 	dec	sp
      000C32 15 81            [12] 2640 	dec	sp
      000C34 EB               [12] 2641 	mov	a,r3
      000C35 4C               [12] 2642 	orl	a,r4
      000C36 70 58            [24] 2643 	jnz	00123$
                                   2644 ;	calc.c:184: (void)stack_push(&ctx->s, d0);
      000C38 E5*00            [12] 2645 	mov	a,_bp
      000C3A 24 0C            [12] 2646 	add	a,#0x0c
      000C3C F8               [12] 2647 	mov	r0,a
      000C3D 74 09            [12] 2648 	mov	a,#0x09
      000C3F 26               [12] 2649 	add	a,@r0
      000C40 FA               [12] 2650 	mov	r2,a
      000C41 E4               [12] 2651 	clr	a
      000C42 08               [12] 2652 	inc	r0
      000C43 36               [12] 2653 	addc	a,@r0
      000C44 FB               [12] 2654 	mov	r3,a
      000C45 08               [12] 2655 	inc	r0
      000C46 86 04            [24] 2656 	mov	ar4,@r0
      000C48 E5*00            [12] 2657 	mov	a,_bp
      000C4A 24 0F            [12] 2658 	add	a,#0x0f
      000C4C F8               [12] 2659 	mov	r0,a
      000C4D E6               [12] 2660 	mov	a,@r0
      000C4E C0 E0            [24] 2661 	push	acc
      000C50 08               [12] 2662 	inc	r0
      000C51 E6               [12] 2663 	mov	a,@r0
      000C52 C0 E0            [24] 2664 	push	acc
      000C54 08               [12] 2665 	inc	r0
      000C55 E6               [12] 2666 	mov	a,@r0
      000C56 C0 E0            [24] 2667 	push	acc
      000C58 08               [12] 2668 	inc	r0
      000C59 E6               [12] 2669 	mov	a,@r0
      000C5A C0 E0            [24] 2670 	push	acc
      000C5C 8A 82            [24] 2671 	mov	dpl,r2
      000C5E 8B 83            [24] 2672 	mov	dph,r3
      000C60 8C F0            [24] 2673 	mov	b,r4
      000C62 12r00r00         [24] 2674 	lcall	_stack_push
      000C65 E5 81            [12] 2675 	mov	a,sp
      000C67 24 FC            [12] 2676 	add	a,#0xfc
      000C69 F5 81            [12] 2677 	mov	sp,a
                                   2678 ;	calc.c:185: printstr("\r\nstack underflow\r\n");
      000C6B 7Fr38            [12] 2679 	mov	r7,#___str_8
      000C6D 7Es00            [12] 2680 	mov	r6,#(___str_8 >> 8)
      000C6F 7D 80            [12] 2681 	mov	r5,#0x80
                                   2682 ;	calc.c:50: return;
      000C71                       2683 00345$:
                                   2684 ;	calc.c:48: for (; *s; s++) putchar(*s);
      000C71 8F 82            [24] 2685 	mov	dpl,r7
      000C73 8E 83            [24] 2686 	mov	dph,r6
      000C75 8D F0            [24] 2687 	mov	b,r5
      000C77 12r00r00         [24] 2688 	lcall	__gptrget
      000C7A FC               [12] 2689 	mov	r4,a
      000C7B 70 03            [24] 2690 	jnz	01055$
      000C7D 02r1Dr05         [24] 2691 	ljmp	00217$
      000C80                       2692 01055$:
      000C80 7B 00            [12] 2693 	mov	r3,#0x00
      000C82 8C 82            [24] 2694 	mov	dpl,r4
      000C84 8B 83            [24] 2695 	mov	dph,r3
      000C86 12r00r00         [24] 2696 	lcall	_putchar
      000C89 0F               [12] 2697 	inc	r7
                                   2698 ;	calc.c:185: printstr("\r\nstack underflow\r\n");
      000C8A BF 00 E4         [24] 2699 	cjne	r7,#0x00,00345$
      000C8D 0E               [12] 2700 	inc	r6
      000C8E 80 E1            [24] 2701 	sjmp	00345$
      000C90                       2702 00123$:
                                   2703 ;	calc.c:187: d1 += d0;
      000C90 E5*00            [12] 2704 	mov	a,_bp
      000C92 24 13            [12] 2705 	add	a,#0x13
      000C94 F8               [12] 2706 	mov	r0,a
      000C95 E5*00            [12] 2707 	mov	a,_bp
      000C97 24 0F            [12] 2708 	add	a,#0x0f
      000C99 F9               [12] 2709 	mov	r1,a
      000C9A E7               [12] 2710 	mov	a,@r1
      000C9B 26               [12] 2711 	add	a,@r0
      000C9C F6               [12] 2712 	mov	@r0,a
      000C9D 09               [12] 2713 	inc	r1
      000C9E E7               [12] 2714 	mov	a,@r1
      000C9F 08               [12] 2715 	inc	r0
      000CA0 36               [12] 2716 	addc	a,@r0
      000CA1 F6               [12] 2717 	mov	@r0,a
      000CA2 09               [12] 2718 	inc	r1
      000CA3 E7               [12] 2719 	mov	a,@r1
      000CA4 08               [12] 2720 	inc	r0
      000CA5 36               [12] 2721 	addc	a,@r0
      000CA6 F6               [12] 2722 	mov	@r0,a
      000CA7 09               [12] 2723 	inc	r1
      000CA8 E7               [12] 2724 	mov	a,@r1
      000CA9 08               [12] 2725 	inc	r0
      000CAA 36               [12] 2726 	addc	a,@r0
      000CAB F6               [12] 2727 	mov	@r0,a
                                   2728 ;	calc.c:188: (void)stack_push(&ctx->s, d1);
      000CAC E5*00            [12] 2729 	mov	a,_bp
      000CAE 24 0C            [12] 2730 	add	a,#0x0c
      000CB0 F8               [12] 2731 	mov	r0,a
      000CB1 74 09            [12] 2732 	mov	a,#0x09
      000CB3 26               [12] 2733 	add	a,@r0
      000CB4 FA               [12] 2734 	mov	r2,a
      000CB5 E4               [12] 2735 	clr	a
      000CB6 08               [12] 2736 	inc	r0
      000CB7 36               [12] 2737 	addc	a,@r0
      000CB8 FB               [12] 2738 	mov	r3,a
      000CB9 08               [12] 2739 	inc	r0
      000CBA 86 04            [24] 2740 	mov	ar4,@r0
      000CBC E5*00            [12] 2741 	mov	a,_bp
      000CBE 24 13            [12] 2742 	add	a,#0x13
      000CC0 F8               [12] 2743 	mov	r0,a
      000CC1 E6               [12] 2744 	mov	a,@r0
      000CC2 C0 E0            [24] 2745 	push	acc
      000CC4 08               [12] 2746 	inc	r0
      000CC5 E6               [12] 2747 	mov	a,@r0
      000CC6 C0 E0            [24] 2748 	push	acc
      000CC8 08               [12] 2749 	inc	r0
      000CC9 E6               [12] 2750 	mov	a,@r0
      000CCA C0 E0            [24] 2751 	push	acc
      000CCC 08               [12] 2752 	inc	r0
      000CCD E6               [12] 2753 	mov	a,@r0
      000CCE C0 E0            [24] 2754 	push	acc
      000CD0 8A 82            [24] 2755 	mov	dpl,r2
      000CD2 8B 83            [24] 2756 	mov	dph,r3
      000CD4 8C F0            [24] 2757 	mov	b,r4
      000CD6 12r00r00         [24] 2758 	lcall	_stack_push
      000CD9 E5 81            [12] 2759 	mov	a,sp
      000CDB 24 FC            [12] 2760 	add	a,#0xfc
      000CDD F5 81            [12] 2761 	mov	sp,a
                                   2762 ;	calc.c:190: break;
      000CDF 02r1Dr05         [24] 2763 	ljmp	00217$
                                   2764 ;	calc.c:191: case '-':
      000CE2                       2765 00128$:
                                   2766 ;	calc.c:192: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      000CE2 E5*00            [12] 2767 	mov	a,_bp
      000CE4 24 0F            [12] 2768 	add	a,#0x0f
      000CE6 FF               [12] 2769 	mov	r7,a
      000CE7 7E 00            [12] 2770 	mov	r6,#0x00
      000CE9 7D 40            [12] 2771 	mov	r5,#0x40
      000CEB E5*00            [12] 2772 	mov	a,_bp
      000CED 24 0C            [12] 2773 	add	a,#0x0c
      000CEF F8               [12] 2774 	mov	r0,a
      000CF0 74 09            [12] 2775 	mov	a,#0x09
      000CF2 26               [12] 2776 	add	a,@r0
      000CF3 FA               [12] 2777 	mov	r2,a
      000CF4 E4               [12] 2778 	clr	a
      000CF5 08               [12] 2779 	inc	r0
      000CF6 36               [12] 2780 	addc	a,@r0
      000CF7 FB               [12] 2781 	mov	r3,a
      000CF8 08               [12] 2782 	inc	r0
      000CF9 86 04            [24] 2783 	mov	ar4,@r0
      000CFB C0 07            [24] 2784 	push	ar7
      000CFD C0 06            [24] 2785 	push	ar6
      000CFF C0 05            [24] 2786 	push	ar5
      000D01 8A 82            [24] 2787 	mov	dpl,r2
      000D03 8B 83            [24] 2788 	mov	dph,r3
      000D05 8C F0            [24] 2789 	mov	b,r4
      000D07 12r00r00         [24] 2790 	lcall	_stack_pop
      000D0A AB 82            [24] 2791 	mov	r3,dpl
      000D0C AC 83            [24] 2792 	mov	r4,dph
      000D0E 15 81            [12] 2793 	dec	sp
      000D10 15 81            [12] 2794 	dec	sp
      000D12 15 81            [12] 2795 	dec	sp
      000D14 EB               [12] 2796 	mov	a,r3
      000D15 4C               [12] 2797 	orl	a,r4
      000D16 70 25            [24] 2798 	jnz	00133$
      000D18 7Fr38            [12] 2799 	mov	r7,#___str_8
      000D1A 7Es00            [12] 2800 	mov	r6,#(___str_8 >> 8)
      000D1C 7D 80            [12] 2801 	mov	r5,#0x80
                                   2802 ;	calc.c:50: return;
      000D1E                       2803 00348$:
                                   2804 ;	calc.c:48: for (; *s; s++) putchar(*s);
      000D1E 8F 82            [24] 2805 	mov	dpl,r7
      000D20 8E 83            [24] 2806 	mov	dph,r6
      000D22 8D F0            [24] 2807 	mov	b,r5
      000D24 12r00r00         [24] 2808 	lcall	__gptrget
      000D27 FC               [12] 2809 	mov	r4,a
      000D28 70 03            [24] 2810 	jnz	01058$
      000D2A 02r1Dr05         [24] 2811 	ljmp	00217$
      000D2D                       2812 01058$:
      000D2D 7B 00            [12] 2813 	mov	r3,#0x00
      000D2F 8C 82            [24] 2814 	mov	dpl,r4
      000D31 8B 83            [24] 2815 	mov	dph,r3
      000D33 12r00r00         [24] 2816 	lcall	_putchar
      000D36 0F               [12] 2817 	inc	r7
                                   2818 ;	calc.c:192: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      000D37 BF 00 E4         [24] 2819 	cjne	r7,#0x00,00348$
      000D3A 0E               [12] 2820 	inc	r6
      000D3B 80 E1            [24] 2821 	sjmp	00348$
      000D3D                       2822 00133$:
                                   2823 ;	calc.c:193: else if (!stack_pop(&ctx->s, &d1)) {
      000D3D E5*00            [12] 2824 	mov	a,_bp
      000D3F 24 13            [12] 2825 	add	a,#0x13
      000D41 FF               [12] 2826 	mov	r7,a
      000D42 7E 00            [12] 2827 	mov	r6,#0x00
      000D44 7D 40            [12] 2828 	mov	r5,#0x40
      000D46 E5*00            [12] 2829 	mov	a,_bp
      000D48 24 0C            [12] 2830 	add	a,#0x0c
      000D4A F8               [12] 2831 	mov	r0,a
      000D4B 74 09            [12] 2832 	mov	a,#0x09
      000D4D 26               [12] 2833 	add	a,@r0
      000D4E FA               [12] 2834 	mov	r2,a
      000D4F E4               [12] 2835 	clr	a
      000D50 08               [12] 2836 	inc	r0
      000D51 36               [12] 2837 	addc	a,@r0
      000D52 FB               [12] 2838 	mov	r3,a
      000D53 08               [12] 2839 	inc	r0
      000D54 86 04            [24] 2840 	mov	ar4,@r0
      000D56 C0 07            [24] 2841 	push	ar7
      000D58 C0 06            [24] 2842 	push	ar6
      000D5A C0 05            [24] 2843 	push	ar5
      000D5C 8A 82            [24] 2844 	mov	dpl,r2
      000D5E 8B 83            [24] 2845 	mov	dph,r3
      000D60 8C F0            [24] 2846 	mov	b,r4
      000D62 12r00r00         [24] 2847 	lcall	_stack_pop
      000D65 AB 82            [24] 2848 	mov	r3,dpl
      000D67 AC 83            [24] 2849 	mov	r4,dph
      000D69 15 81            [12] 2850 	dec	sp
      000D6B 15 81            [12] 2851 	dec	sp
      000D6D 15 81            [12] 2852 	dec	sp
      000D6F EB               [12] 2853 	mov	a,r3
      000D70 4C               [12] 2854 	orl	a,r4
      000D71 70 58            [24] 2855 	jnz	00130$
                                   2856 ;	calc.c:194: (void)stack_push(&ctx->s, d0);
      000D73 E5*00            [12] 2857 	mov	a,_bp
      000D75 24 0C            [12] 2858 	add	a,#0x0c
      000D77 F8               [12] 2859 	mov	r0,a
      000D78 74 09            [12] 2860 	mov	a,#0x09
      000D7A 26               [12] 2861 	add	a,@r0
      000D7B FA               [12] 2862 	mov	r2,a
      000D7C E4               [12] 2863 	clr	a
      000D7D 08               [12] 2864 	inc	r0
      000D7E 36               [12] 2865 	addc	a,@r0
      000D7F FB               [12] 2866 	mov	r3,a
      000D80 08               [12] 2867 	inc	r0
      000D81 86 04            [24] 2868 	mov	ar4,@r0
      000D83 E5*00            [12] 2869 	mov	a,_bp
      000D85 24 0F            [12] 2870 	add	a,#0x0f
      000D87 F8               [12] 2871 	mov	r0,a
      000D88 E6               [12] 2872 	mov	a,@r0
      000D89 C0 E0            [24] 2873 	push	acc
      000D8B 08               [12] 2874 	inc	r0
      000D8C E6               [12] 2875 	mov	a,@r0
      000D8D C0 E0            [24] 2876 	push	acc
      000D8F 08               [12] 2877 	inc	r0
      000D90 E6               [12] 2878 	mov	a,@r0
      000D91 C0 E0            [24] 2879 	push	acc
      000D93 08               [12] 2880 	inc	r0
      000D94 E6               [12] 2881 	mov	a,@r0
      000D95 C0 E0            [24] 2882 	push	acc
      000D97 8A 82            [24] 2883 	mov	dpl,r2
      000D99 8B 83            [24] 2884 	mov	dph,r3
      000D9B 8C F0            [24] 2885 	mov	b,r4
      000D9D 12r00r00         [24] 2886 	lcall	_stack_push
      000DA0 E5 81            [12] 2887 	mov	a,sp
      000DA2 24 FC            [12] 2888 	add	a,#0xfc
      000DA4 F5 81            [12] 2889 	mov	sp,a
                                   2890 ;	calc.c:195: printstr("\r\nstack underflow\r\n");
      000DA6 7Fr38            [12] 2891 	mov	r7,#___str_8
      000DA8 7Es00            [12] 2892 	mov	r6,#(___str_8 >> 8)
      000DAA 7D 80            [12] 2893 	mov	r5,#0x80
                                   2894 ;	calc.c:50: return;
      000DAC                       2895 00351$:
                                   2896 ;	calc.c:48: for (; *s; s++) putchar(*s);
      000DAC 8F 82            [24] 2897 	mov	dpl,r7
      000DAE 8E 83            [24] 2898 	mov	dph,r6
      000DB0 8D F0            [24] 2899 	mov	b,r5
      000DB2 12r00r00         [24] 2900 	lcall	__gptrget
      000DB5 FC               [12] 2901 	mov	r4,a
      000DB6 70 03            [24] 2902 	jnz	01061$
      000DB8 02r1Dr05         [24] 2903 	ljmp	00217$
      000DBB                       2904 01061$:
      000DBB 7B 00            [12] 2905 	mov	r3,#0x00
      000DBD 8C 82            [24] 2906 	mov	dpl,r4
      000DBF 8B 83            [24] 2907 	mov	dph,r3
      000DC1 12r00r00         [24] 2908 	lcall	_putchar
      000DC4 0F               [12] 2909 	inc	r7
                                   2910 ;	calc.c:195: printstr("\r\nstack underflow\r\n");
      000DC5 BF 00 E4         [24] 2911 	cjne	r7,#0x00,00351$
      000DC8 0E               [12] 2912 	inc	r6
      000DC9 80 E1            [24] 2913 	sjmp	00351$
      000DCB                       2914 00130$:
                                   2915 ;	calc.c:197: d1 -= d0;
      000DCB E5*00            [12] 2916 	mov	a,_bp
      000DCD 24 13            [12] 2917 	add	a,#0x13
      000DCF F8               [12] 2918 	mov	r0,a
      000DD0 E5*00            [12] 2919 	mov	a,_bp
      000DD2 24 0F            [12] 2920 	add	a,#0x0f
      000DD4 F9               [12] 2921 	mov	r1,a
      000DD5 E6               [12] 2922 	mov	a,@r0
      000DD6 C3               [12] 2923 	clr	c
      000DD7 97               [12] 2924 	subb	a,@r1
      000DD8 F6               [12] 2925 	mov	@r0,a
      000DD9 08               [12] 2926 	inc	r0
      000DDA E6               [12] 2927 	mov	a,@r0
      000DDB 09               [12] 2928 	inc	r1
      000DDC 97               [12] 2929 	subb	a,@r1
      000DDD F6               [12] 2930 	mov	@r0,a
      000DDE 08               [12] 2931 	inc	r0
      000DDF E6               [12] 2932 	mov	a,@r0
      000DE0 09               [12] 2933 	inc	r1
      000DE1 97               [12] 2934 	subb	a,@r1
      000DE2 F6               [12] 2935 	mov	@r0,a
      000DE3 08               [12] 2936 	inc	r0
      000DE4 E6               [12] 2937 	mov	a,@r0
      000DE5 09               [12] 2938 	inc	r1
      000DE6 97               [12] 2939 	subb	a,@r1
      000DE7 F6               [12] 2940 	mov	@r0,a
                                   2941 ;	calc.c:198: (void)stack_push(&ctx->s, d1);
      000DE8 E5*00            [12] 2942 	mov	a,_bp
      000DEA 24 0C            [12] 2943 	add	a,#0x0c
      000DEC F8               [12] 2944 	mov	r0,a
      000DED 74 09            [12] 2945 	mov	a,#0x09
      000DEF 26               [12] 2946 	add	a,@r0
      000DF0 FA               [12] 2947 	mov	r2,a
      000DF1 E4               [12] 2948 	clr	a
      000DF2 08               [12] 2949 	inc	r0
      000DF3 36               [12] 2950 	addc	a,@r0
      000DF4 FB               [12] 2951 	mov	r3,a
      000DF5 08               [12] 2952 	inc	r0
      000DF6 86 04            [24] 2953 	mov	ar4,@r0
      000DF8 E5*00            [12] 2954 	mov	a,_bp
      000DFA 24 13            [12] 2955 	add	a,#0x13
      000DFC F8               [12] 2956 	mov	r0,a
      000DFD E6               [12] 2957 	mov	a,@r0
      000DFE C0 E0            [24] 2958 	push	acc
      000E00 08               [12] 2959 	inc	r0
      000E01 E6               [12] 2960 	mov	a,@r0
      000E02 C0 E0            [24] 2961 	push	acc
      000E04 08               [12] 2962 	inc	r0
      000E05 E6               [12] 2963 	mov	a,@r0
      000E06 C0 E0            [24] 2964 	push	acc
      000E08 08               [12] 2965 	inc	r0
      000E09 E6               [12] 2966 	mov	a,@r0
      000E0A C0 E0            [24] 2967 	push	acc
      000E0C 8A 82            [24] 2968 	mov	dpl,r2
      000E0E 8B 83            [24] 2969 	mov	dph,r3
      000E10 8C F0            [24] 2970 	mov	b,r4
      000E12 12r00r00         [24] 2971 	lcall	_stack_push
      000E15 E5 81            [12] 2972 	mov	a,sp
      000E17 24 FC            [12] 2973 	add	a,#0xfc
      000E19 F5 81            [12] 2974 	mov	sp,a
                                   2975 ;	calc.c:200: break;
      000E1B 02r1Dr05         [24] 2976 	ljmp	00217$
                                   2977 ;	calc.c:201: case '*':
      000E1E                       2978 00135$:
                                   2979 ;	calc.c:202: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      000E1E E5*00            [12] 2980 	mov	a,_bp
      000E20 24 0F            [12] 2981 	add	a,#0x0f
      000E22 FF               [12] 2982 	mov	r7,a
      000E23 7E 00            [12] 2983 	mov	r6,#0x00
      000E25 7D 40            [12] 2984 	mov	r5,#0x40
      000E27 E5*00            [12] 2985 	mov	a,_bp
      000E29 24 0C            [12] 2986 	add	a,#0x0c
      000E2B F8               [12] 2987 	mov	r0,a
      000E2C 74 09            [12] 2988 	mov	a,#0x09
      000E2E 26               [12] 2989 	add	a,@r0
      000E2F FA               [12] 2990 	mov	r2,a
      000E30 E4               [12] 2991 	clr	a
      000E31 08               [12] 2992 	inc	r0
      000E32 36               [12] 2993 	addc	a,@r0
      000E33 FB               [12] 2994 	mov	r3,a
      000E34 08               [12] 2995 	inc	r0
      000E35 86 04            [24] 2996 	mov	ar4,@r0
      000E37 C0 07            [24] 2997 	push	ar7
      000E39 C0 06            [24] 2998 	push	ar6
      000E3B C0 05            [24] 2999 	push	ar5
      000E3D 8A 82            [24] 3000 	mov	dpl,r2
      000E3F 8B 83            [24] 3001 	mov	dph,r3
      000E41 8C F0            [24] 3002 	mov	b,r4
      000E43 12r00r00         [24] 3003 	lcall	_stack_pop
      000E46 AB 82            [24] 3004 	mov	r3,dpl
      000E48 AC 83            [24] 3005 	mov	r4,dph
      000E4A 15 81            [12] 3006 	dec	sp
      000E4C 15 81            [12] 3007 	dec	sp
      000E4E 15 81            [12] 3008 	dec	sp
      000E50 EB               [12] 3009 	mov	a,r3
      000E51 4C               [12] 3010 	orl	a,r4
      000E52 70 25            [24] 3011 	jnz	00140$
      000E54 7Fr38            [12] 3012 	mov	r7,#___str_8
      000E56 7Es00            [12] 3013 	mov	r6,#(___str_8 >> 8)
      000E58 7D 80            [12] 3014 	mov	r5,#0x80
                                   3015 ;	calc.c:50: return;
      000E5A                       3016 00354$:
                                   3017 ;	calc.c:48: for (; *s; s++) putchar(*s);
      000E5A 8F 82            [24] 3018 	mov	dpl,r7
      000E5C 8E 83            [24] 3019 	mov	dph,r6
      000E5E 8D F0            [24] 3020 	mov	b,r5
      000E60 12r00r00         [24] 3021 	lcall	__gptrget
      000E63 FC               [12] 3022 	mov	r4,a
      000E64 70 03            [24] 3023 	jnz	01064$
      000E66 02r1Dr05         [24] 3024 	ljmp	00217$
      000E69                       3025 01064$:
      000E69 7B 00            [12] 3026 	mov	r3,#0x00
      000E6B 8C 82            [24] 3027 	mov	dpl,r4
      000E6D 8B 83            [24] 3028 	mov	dph,r3
      000E6F 12r00r00         [24] 3029 	lcall	_putchar
      000E72 0F               [12] 3030 	inc	r7
                                   3031 ;	calc.c:202: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      000E73 BF 00 E4         [24] 3032 	cjne	r7,#0x00,00354$
      000E76 0E               [12] 3033 	inc	r6
      000E77 80 E1            [24] 3034 	sjmp	00354$
      000E79                       3035 00140$:
                                   3036 ;	calc.c:203: else if (!stack_pop(&ctx->s, &d1)) {
      000E79 E5*00            [12] 3037 	mov	a,_bp
      000E7B 24 13            [12] 3038 	add	a,#0x13
      000E7D FF               [12] 3039 	mov	r7,a
      000E7E 7E 00            [12] 3040 	mov	r6,#0x00
      000E80 7D 40            [12] 3041 	mov	r5,#0x40
      000E82 E5*00            [12] 3042 	mov	a,_bp
      000E84 24 0C            [12] 3043 	add	a,#0x0c
      000E86 F8               [12] 3044 	mov	r0,a
      000E87 74 09            [12] 3045 	mov	a,#0x09
      000E89 26               [12] 3046 	add	a,@r0
      000E8A FA               [12] 3047 	mov	r2,a
      000E8B E4               [12] 3048 	clr	a
      000E8C 08               [12] 3049 	inc	r0
      000E8D 36               [12] 3050 	addc	a,@r0
      000E8E FB               [12] 3051 	mov	r3,a
      000E8F 08               [12] 3052 	inc	r0
      000E90 86 04            [24] 3053 	mov	ar4,@r0
      000E92 C0 07            [24] 3054 	push	ar7
      000E94 C0 06            [24] 3055 	push	ar6
      000E96 C0 05            [24] 3056 	push	ar5
      000E98 8A 82            [24] 3057 	mov	dpl,r2
      000E9A 8B 83            [24] 3058 	mov	dph,r3
      000E9C 8C F0            [24] 3059 	mov	b,r4
      000E9E 12r00r00         [24] 3060 	lcall	_stack_pop
      000EA1 AB 82            [24] 3061 	mov	r3,dpl
      000EA3 AC 83            [24] 3062 	mov	r4,dph
      000EA5 15 81            [12] 3063 	dec	sp
      000EA7 15 81            [12] 3064 	dec	sp
      000EA9 15 81            [12] 3065 	dec	sp
      000EAB EB               [12] 3066 	mov	a,r3
      000EAC 4C               [12] 3067 	orl	a,r4
      000EAD 70 58            [24] 3068 	jnz	00137$
                                   3069 ;	calc.c:204: (void)stack_push(&ctx->s, d0);
      000EAF E5*00            [12] 3070 	mov	a,_bp
      000EB1 24 0C            [12] 3071 	add	a,#0x0c
      000EB3 F8               [12] 3072 	mov	r0,a
      000EB4 74 09            [12] 3073 	mov	a,#0x09
      000EB6 26               [12] 3074 	add	a,@r0
      000EB7 FA               [12] 3075 	mov	r2,a
      000EB8 E4               [12] 3076 	clr	a
      000EB9 08               [12] 3077 	inc	r0
      000EBA 36               [12] 3078 	addc	a,@r0
      000EBB FB               [12] 3079 	mov	r3,a
      000EBC 08               [12] 3080 	inc	r0
      000EBD 86 04            [24] 3081 	mov	ar4,@r0
      000EBF E5*00            [12] 3082 	mov	a,_bp
      000EC1 24 0F            [12] 3083 	add	a,#0x0f
      000EC3 F8               [12] 3084 	mov	r0,a
      000EC4 E6               [12] 3085 	mov	a,@r0
      000EC5 C0 E0            [24] 3086 	push	acc
      000EC7 08               [12] 3087 	inc	r0
      000EC8 E6               [12] 3088 	mov	a,@r0
      000EC9 C0 E0            [24] 3089 	push	acc
      000ECB 08               [12] 3090 	inc	r0
      000ECC E6               [12] 3091 	mov	a,@r0
      000ECD C0 E0            [24] 3092 	push	acc
      000ECF 08               [12] 3093 	inc	r0
      000ED0 E6               [12] 3094 	mov	a,@r0
      000ED1 C0 E0            [24] 3095 	push	acc
      000ED3 8A 82            [24] 3096 	mov	dpl,r2
      000ED5 8B 83            [24] 3097 	mov	dph,r3
      000ED7 8C F0            [24] 3098 	mov	b,r4
      000ED9 12r00r00         [24] 3099 	lcall	_stack_push
      000EDC E5 81            [12] 3100 	mov	a,sp
      000EDE 24 FC            [12] 3101 	add	a,#0xfc
      000EE0 F5 81            [12] 3102 	mov	sp,a
                                   3103 ;	calc.c:205: printstr("\r\nstack underflow\r\n");
      000EE2 7Fr38            [12] 3104 	mov	r7,#___str_8
      000EE4 7Es00            [12] 3105 	mov	r6,#(___str_8 >> 8)
      000EE6 7D 80            [12] 3106 	mov	r5,#0x80
                                   3107 ;	calc.c:50: return;
      000EE8                       3108 00357$:
                                   3109 ;	calc.c:48: for (; *s; s++) putchar(*s);
      000EE8 8F 82            [24] 3110 	mov	dpl,r7
      000EEA 8E 83            [24] 3111 	mov	dph,r6
      000EEC 8D F0            [24] 3112 	mov	b,r5
      000EEE 12r00r00         [24] 3113 	lcall	__gptrget
      000EF1 FC               [12] 3114 	mov	r4,a
      000EF2 70 03            [24] 3115 	jnz	01067$
      000EF4 02r1Dr05         [24] 3116 	ljmp	00217$
      000EF7                       3117 01067$:
      000EF7 7B 00            [12] 3118 	mov	r3,#0x00
      000EF9 8C 82            [24] 3119 	mov	dpl,r4
      000EFB 8B 83            [24] 3120 	mov	dph,r3
      000EFD 12r00r00         [24] 3121 	lcall	_putchar
      000F00 0F               [12] 3122 	inc	r7
                                   3123 ;	calc.c:205: printstr("\r\nstack underflow\r\n");
      000F01 BF 00 E4         [24] 3124 	cjne	r7,#0x00,00357$
      000F04 0E               [12] 3125 	inc	r6
      000F05 80 E1            [24] 3126 	sjmp	00357$
      000F07                       3127 00137$:
                                   3128 ;	calc.c:207: d1 *= d0;
      000F07 E5*00            [12] 3129 	mov	a,_bp
      000F09 24 0F            [12] 3130 	add	a,#0x0f
      000F0B F8               [12] 3131 	mov	r0,a
      000F0C E6               [12] 3132 	mov	a,@r0
      000F0D C0 E0            [24] 3133 	push	acc
      000F0F 08               [12] 3134 	inc	r0
      000F10 E6               [12] 3135 	mov	a,@r0
      000F11 C0 E0            [24] 3136 	push	acc
      000F13 08               [12] 3137 	inc	r0
      000F14 E6               [12] 3138 	mov	a,@r0
      000F15 C0 E0            [24] 3139 	push	acc
      000F17 08               [12] 3140 	inc	r0
      000F18 E6               [12] 3141 	mov	a,@r0
      000F19 C0 E0            [24] 3142 	push	acc
      000F1B E5*00            [12] 3143 	mov	a,_bp
      000F1D 24 13            [12] 3144 	add	a,#0x13
      000F1F F8               [12] 3145 	mov	r0,a
      000F20 86 82            [24] 3146 	mov	dpl,@r0
      000F22 08               [12] 3147 	inc	r0
      000F23 86 83            [24] 3148 	mov	dph,@r0
      000F25 08               [12] 3149 	inc	r0
      000F26 86 F0            [24] 3150 	mov	b,@r0
      000F28 08               [12] 3151 	inc	r0
      000F29 E6               [12] 3152 	mov	a,@r0
      000F2A 12r00r00         [24] 3153 	lcall	__mullong
      000F2D AF 82            [24] 3154 	mov	r7,dpl
      000F2F AE 83            [24] 3155 	mov	r6,dph
      000F31 AD F0            [24] 3156 	mov	r5,b
      000F33 FC               [12] 3157 	mov	r4,a
      000F34 E5 81            [12] 3158 	mov	a,sp
      000F36 24 FC            [12] 3159 	add	a,#0xfc
      000F38 F5 81            [12] 3160 	mov	sp,a
      000F3A E5*00            [12] 3161 	mov	a,_bp
      000F3C 24 13            [12] 3162 	add	a,#0x13
      000F3E F8               [12] 3163 	mov	r0,a
      000F3F A6 07            [24] 3164 	mov	@r0,ar7
      000F41 08               [12] 3165 	inc	r0
      000F42 A6 06            [24] 3166 	mov	@r0,ar6
      000F44 08               [12] 3167 	inc	r0
      000F45 A6 05            [24] 3168 	mov	@r0,ar5
      000F47 08               [12] 3169 	inc	r0
      000F48 A6 04            [24] 3170 	mov	@r0,ar4
                                   3171 ;	calc.c:208: (void)stack_push(&ctx->s, d1);
      000F4A E5*00            [12] 3172 	mov	a,_bp
      000F4C 24 0C            [12] 3173 	add	a,#0x0c
      000F4E F8               [12] 3174 	mov	r0,a
      000F4F 74 09            [12] 3175 	mov	a,#0x09
      000F51 26               [12] 3176 	add	a,@r0
      000F52 FA               [12] 3177 	mov	r2,a
      000F53 E4               [12] 3178 	clr	a
      000F54 08               [12] 3179 	inc	r0
      000F55 36               [12] 3180 	addc	a,@r0
      000F56 FB               [12] 3181 	mov	r3,a
      000F57 08               [12] 3182 	inc	r0
      000F58 86 04            [24] 3183 	mov	ar4,@r0
      000F5A E5*00            [12] 3184 	mov	a,_bp
      000F5C 24 13            [12] 3185 	add	a,#0x13
      000F5E F8               [12] 3186 	mov	r0,a
      000F5F E6               [12] 3187 	mov	a,@r0
      000F60 C0 E0            [24] 3188 	push	acc
      000F62 08               [12] 3189 	inc	r0
      000F63 E6               [12] 3190 	mov	a,@r0
      000F64 C0 E0            [24] 3191 	push	acc
      000F66 08               [12] 3192 	inc	r0
      000F67 E6               [12] 3193 	mov	a,@r0
      000F68 C0 E0            [24] 3194 	push	acc
      000F6A 08               [12] 3195 	inc	r0
      000F6B E6               [12] 3196 	mov	a,@r0
      000F6C C0 E0            [24] 3197 	push	acc
      000F6E 8A 82            [24] 3198 	mov	dpl,r2
      000F70 8B 83            [24] 3199 	mov	dph,r3
      000F72 8C F0            [24] 3200 	mov	b,r4
      000F74 12r00r00         [24] 3201 	lcall	_stack_push
      000F77 E5 81            [12] 3202 	mov	a,sp
      000F79 24 FC            [12] 3203 	add	a,#0xfc
      000F7B F5 81            [12] 3204 	mov	sp,a
                                   3205 ;	calc.c:210: break;
      000F7D 02r1Dr05         [24] 3206 	ljmp	00217$
                                   3207 ;	calc.c:212: case '\\':
      000F80                       3208 00143$:
                                   3209 ;	calc.c:213: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      000F80 C0 05            [24] 3210 	push	ar5
      000F82 C0 06            [24] 3211 	push	ar6
      000F84 C0 07            [24] 3212 	push	ar7
      000F86 E5*00            [12] 3213 	mov	a,_bp
      000F88 24 0F            [12] 3214 	add	a,#0x0f
      000F8A FC               [12] 3215 	mov	r4,a
      000F8B 7B 00            [12] 3216 	mov	r3,#0x00
      000F8D 7A 40            [12] 3217 	mov	r2,#0x40
      000F8F E5*00            [12] 3218 	mov	a,_bp
      000F91 24 0C            [12] 3219 	add	a,#0x0c
      000F93 F8               [12] 3220 	mov	r0,a
      000F94 74 09            [12] 3221 	mov	a,#0x09
      000F96 26               [12] 3222 	add	a,@r0
      000F97 FD               [12] 3223 	mov	r5,a
      000F98 E4               [12] 3224 	clr	a
      000F99 08               [12] 3225 	inc	r0
      000F9A 36               [12] 3226 	addc	a,@r0
      000F9B FE               [12] 3227 	mov	r6,a
      000F9C 08               [12] 3228 	inc	r0
      000F9D 86 07            [24] 3229 	mov	ar7,@r0
      000F9F C0 05            [24] 3230 	push	ar5
      000FA1 C0 04            [24] 3231 	push	ar4
      000FA3 C0 03            [24] 3232 	push	ar3
      000FA5 C0 02            [24] 3233 	push	ar2
      000FA7 8D 82            [24] 3234 	mov	dpl,r5
      000FA9 8E 83            [24] 3235 	mov	dph,r6
      000FAB 8F F0            [24] 3236 	mov	b,r7
      000FAD 12r00r00         [24] 3237 	lcall	_stack_pop
      000FB0 AE 82            [24] 3238 	mov	r6,dpl
      000FB2 AF 83            [24] 3239 	mov	r7,dph
      000FB4 15 81            [12] 3240 	dec	sp
      000FB6 15 81            [12] 3241 	dec	sp
      000FB8 15 81            [12] 3242 	dec	sp
      000FBA D0 05            [24] 3243 	pop	ar5
      000FBC EE               [12] 3244 	mov	a,r6
      000FBD 4F               [12] 3245 	orl	a,r7
      000FBE D0 07            [24] 3246 	pop	ar7
      000FC0 D0 06            [24] 3247 	pop	ar6
      000FC2 D0 05            [24] 3248 	pop	ar5
      000FC4 70 25            [24] 3249 	jnz	00154$
      000FC6 7Fr38            [12] 3250 	mov	r7,#___str_8
      000FC8 7Es00            [12] 3251 	mov	r6,#(___str_8 >> 8)
      000FCA 7D 80            [12] 3252 	mov	r5,#0x80
                                   3253 ;	calc.c:50: return;
      000FCC                       3254 00360$:
                                   3255 ;	calc.c:48: for (; *s; s++) putchar(*s);
      000FCC 8F 82            [24] 3256 	mov	dpl,r7
      000FCE 8E 83            [24] 3257 	mov	dph,r6
      000FD0 8D F0            [24] 3258 	mov	b,r5
      000FD2 12r00r00         [24] 3259 	lcall	__gptrget
      000FD5 FC               [12] 3260 	mov	r4,a
      000FD6 70 03            [24] 3261 	jnz	01070$
      000FD8 02r1Dr05         [24] 3262 	ljmp	00217$
      000FDB                       3263 01070$:
      000FDB 7B 00            [12] 3264 	mov	r3,#0x00
      000FDD 8C 82            [24] 3265 	mov	dpl,r4
      000FDF 8B 83            [24] 3266 	mov	dph,r3
      000FE1 12r00r00         [24] 3267 	lcall	_putchar
      000FE4 0F               [12] 3268 	inc	r7
                                   3269 ;	calc.c:213: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      000FE5 BF 00 E4         [24] 3270 	cjne	r7,#0x00,00360$
      000FE8 0E               [12] 3271 	inc	r6
      000FE9 80 E1            [24] 3272 	sjmp	00360$
      000FEB                       3273 00154$:
                                   3274 ;	calc.c:214: else if (!stack_pop(&ctx->s, &d1)) {
      000FEB C0 05            [24] 3275 	push	ar5
      000FED C0 06            [24] 3276 	push	ar6
      000FEF C0 07            [24] 3277 	push	ar7
      000FF1 E5*00            [12] 3278 	mov	a,_bp
      000FF3 24 13            [12] 3279 	add	a,#0x13
      000FF5 FC               [12] 3280 	mov	r4,a
      000FF6 7B 00            [12] 3281 	mov	r3,#0x00
      000FF8 7A 40            [12] 3282 	mov	r2,#0x40
      000FFA E5*00            [12] 3283 	mov	a,_bp
      000FFC 24 0C            [12] 3284 	add	a,#0x0c
      000FFE F8               [12] 3285 	mov	r0,a
      000FFF 74 09            [12] 3286 	mov	a,#0x09
      001001 26               [12] 3287 	add	a,@r0
      001002 FD               [12] 3288 	mov	r5,a
      001003 E4               [12] 3289 	clr	a
      001004 08               [12] 3290 	inc	r0
      001005 36               [12] 3291 	addc	a,@r0
      001006 FE               [12] 3292 	mov	r6,a
      001007 08               [12] 3293 	inc	r0
      001008 86 07            [24] 3294 	mov	ar7,@r0
      00100A C0 05            [24] 3295 	push	ar5
      00100C C0 04            [24] 3296 	push	ar4
      00100E C0 03            [24] 3297 	push	ar3
      001010 C0 02            [24] 3298 	push	ar2
      001012 8D 82            [24] 3299 	mov	dpl,r5
      001014 8E 83            [24] 3300 	mov	dph,r6
      001016 8F F0            [24] 3301 	mov	b,r7
      001018 12r00r00         [24] 3302 	lcall	_stack_pop
      00101B AE 82            [24] 3303 	mov	r6,dpl
      00101D AF 83            [24] 3304 	mov	r7,dph
      00101F 15 81            [12] 3305 	dec	sp
      001021 15 81            [12] 3306 	dec	sp
      001023 15 81            [12] 3307 	dec	sp
      001025 D0 05            [24] 3308 	pop	ar5
      001027 EE               [12] 3309 	mov	a,r6
      001028 4F               [12] 3310 	orl	a,r7
      001029 D0 07            [24] 3311 	pop	ar7
      00102B D0 06            [24] 3312 	pop	ar6
      00102D D0 05            [24] 3313 	pop	ar5
      00102F 70 58            [24] 3314 	jnz	00151$
                                   3315 ;	calc.c:215: (void)stack_push(&ctx->s, d0);
      001031 E5*00            [12] 3316 	mov	a,_bp
      001033 24 0C            [12] 3317 	add	a,#0x0c
      001035 F8               [12] 3318 	mov	r0,a
      001036 74 09            [12] 3319 	mov	a,#0x09
      001038 26               [12] 3320 	add	a,@r0
      001039 FA               [12] 3321 	mov	r2,a
      00103A E4               [12] 3322 	clr	a
      00103B 08               [12] 3323 	inc	r0
      00103C 36               [12] 3324 	addc	a,@r0
      00103D FB               [12] 3325 	mov	r3,a
      00103E 08               [12] 3326 	inc	r0
      00103F 86 04            [24] 3327 	mov	ar4,@r0
      001041 E5*00            [12] 3328 	mov	a,_bp
      001043 24 0F            [12] 3329 	add	a,#0x0f
      001045 F8               [12] 3330 	mov	r0,a
      001046 E6               [12] 3331 	mov	a,@r0
      001047 C0 E0            [24] 3332 	push	acc
      001049 08               [12] 3333 	inc	r0
      00104A E6               [12] 3334 	mov	a,@r0
      00104B C0 E0            [24] 3335 	push	acc
      00104D 08               [12] 3336 	inc	r0
      00104E E6               [12] 3337 	mov	a,@r0
      00104F C0 E0            [24] 3338 	push	acc
      001051 08               [12] 3339 	inc	r0
      001052 E6               [12] 3340 	mov	a,@r0
      001053 C0 E0            [24] 3341 	push	acc
      001055 8A 82            [24] 3342 	mov	dpl,r2
      001057 8B 83            [24] 3343 	mov	dph,r3
      001059 8C F0            [24] 3344 	mov	b,r4
      00105B 12r00r00         [24] 3345 	lcall	_stack_push
      00105E E5 81            [12] 3346 	mov	a,sp
      001060 24 FC            [12] 3347 	add	a,#0xfc
      001062 F5 81            [12] 3348 	mov	sp,a
                                   3349 ;	calc.c:216: printstr("\r\nstack underflow\r\n");
      001064 7Fr38            [12] 3350 	mov	r7,#___str_8
      001066 7Es00            [12] 3351 	mov	r6,#(___str_8 >> 8)
      001068 7D 80            [12] 3352 	mov	r5,#0x80
                                   3353 ;	calc.c:50: return;
      00106A                       3354 00363$:
                                   3355 ;	calc.c:48: for (; *s; s++) putchar(*s);
      00106A 8F 82            [24] 3356 	mov	dpl,r7
      00106C 8E 83            [24] 3357 	mov	dph,r6
      00106E 8D F0            [24] 3358 	mov	b,r5
      001070 12r00r00         [24] 3359 	lcall	__gptrget
      001073 FC               [12] 3360 	mov	r4,a
      001074 70 03            [24] 3361 	jnz	01073$
      001076 02r1Dr05         [24] 3362 	ljmp	00217$
      001079                       3363 01073$:
      001079 7B 00            [12] 3364 	mov	r3,#0x00
      00107B 8C 82            [24] 3365 	mov	dpl,r4
      00107D 8B 83            [24] 3366 	mov	dph,r3
      00107F 12r00r00         [24] 3367 	lcall	_putchar
      001082 0F               [12] 3368 	inc	r7
                                   3369 ;	calc.c:216: printstr("\r\nstack underflow\r\n");
      001083 BF 00 E4         [24] 3370 	cjne	r7,#0x00,00363$
      001086 0E               [12] 3371 	inc	r6
      001087 80 E1            [24] 3372 	sjmp	00363$
      001089                       3373 00151$:
                                   3374 ;	calc.c:217: } else if (!d0) {
      001089 E5*00            [12] 3375 	mov	a,_bp
      00108B 24 0F            [12] 3376 	add	a,#0x0f
      00108D F8               [12] 3377 	mov	r0,a
      00108E E6               [12] 3378 	mov	a,@r0
      00108F 08               [12] 3379 	inc	r0
      001090 46               [12] 3380 	orl	a,@r0
      001091 08               [12] 3381 	inc	r0
      001092 46               [12] 3382 	orl	a,@r0
      001093 08               [12] 3383 	inc	r0
      001094 46               [12] 3384 	orl	a,@r0
      001095 60 03            [24] 3385 	jz	01075$
      001097 02r11r25         [24] 3386 	ljmp	00148$
      00109A                       3387 01075$:
                                   3388 ;	calc.c:218: (void)stack_push(&ctx->s, d1);
      00109A E5*00            [12] 3389 	mov	a,_bp
      00109C 24 0C            [12] 3390 	add	a,#0x0c
      00109E F8               [12] 3391 	mov	r0,a
      00109F 74 09            [12] 3392 	mov	a,#0x09
      0010A1 26               [12] 3393 	add	a,@r0
      0010A2 FA               [12] 3394 	mov	r2,a
      0010A3 E4               [12] 3395 	clr	a
      0010A4 08               [12] 3396 	inc	r0
      0010A5 36               [12] 3397 	addc	a,@r0
      0010A6 FB               [12] 3398 	mov	r3,a
      0010A7 08               [12] 3399 	inc	r0
      0010A8 86 04            [24] 3400 	mov	ar4,@r0
      0010AA E5*00            [12] 3401 	mov	a,_bp
      0010AC 24 13            [12] 3402 	add	a,#0x13
      0010AE F8               [12] 3403 	mov	r0,a
      0010AF E6               [12] 3404 	mov	a,@r0
      0010B0 C0 E0            [24] 3405 	push	acc
      0010B2 08               [12] 3406 	inc	r0
      0010B3 E6               [12] 3407 	mov	a,@r0
      0010B4 C0 E0            [24] 3408 	push	acc
      0010B6 08               [12] 3409 	inc	r0
      0010B7 E6               [12] 3410 	mov	a,@r0
      0010B8 C0 E0            [24] 3411 	push	acc
      0010BA 08               [12] 3412 	inc	r0
      0010BB E6               [12] 3413 	mov	a,@r0
      0010BC C0 E0            [24] 3414 	push	acc
      0010BE 8A 82            [24] 3415 	mov	dpl,r2
      0010C0 8B 83            [24] 3416 	mov	dph,r3
      0010C2 8C F0            [24] 3417 	mov	b,r4
      0010C4 12r00r00         [24] 3418 	lcall	_stack_push
      0010C7 E5 81            [12] 3419 	mov	a,sp
      0010C9 24 FC            [12] 3420 	add	a,#0xfc
      0010CB F5 81            [12] 3421 	mov	sp,a
                                   3422 ;	calc.c:219: (void)stack_push(&ctx->s, d0);			
      0010CD E5*00            [12] 3423 	mov	a,_bp
      0010CF 24 0C            [12] 3424 	add	a,#0x0c
      0010D1 F8               [12] 3425 	mov	r0,a
      0010D2 74 09            [12] 3426 	mov	a,#0x09
      0010D4 26               [12] 3427 	add	a,@r0
      0010D5 FA               [12] 3428 	mov	r2,a
      0010D6 E4               [12] 3429 	clr	a
      0010D7 08               [12] 3430 	inc	r0
      0010D8 36               [12] 3431 	addc	a,@r0
      0010D9 FB               [12] 3432 	mov	r3,a
      0010DA 08               [12] 3433 	inc	r0
      0010DB 86 04            [24] 3434 	mov	ar4,@r0
      0010DD E5*00            [12] 3435 	mov	a,_bp
      0010DF 24 0F            [12] 3436 	add	a,#0x0f
      0010E1 F8               [12] 3437 	mov	r0,a
      0010E2 E6               [12] 3438 	mov	a,@r0
      0010E3 C0 E0            [24] 3439 	push	acc
      0010E5 08               [12] 3440 	inc	r0
      0010E6 E6               [12] 3441 	mov	a,@r0
      0010E7 C0 E0            [24] 3442 	push	acc
      0010E9 08               [12] 3443 	inc	r0
      0010EA E6               [12] 3444 	mov	a,@r0
      0010EB C0 E0            [24] 3445 	push	acc
      0010ED 08               [12] 3446 	inc	r0
      0010EE E6               [12] 3447 	mov	a,@r0
      0010EF C0 E0            [24] 3448 	push	acc
      0010F1 8A 82            [24] 3449 	mov	dpl,r2
      0010F3 8B 83            [24] 3450 	mov	dph,r3
      0010F5 8C F0            [24] 3451 	mov	b,r4
      0010F7 12r00r00         [24] 3452 	lcall	_stack_push
      0010FA E5 81            [12] 3453 	mov	a,sp
      0010FC 24 FC            [12] 3454 	add	a,#0xfc
      0010FE F5 81            [12] 3455 	mov	sp,a
                                   3456 ;	calc.c:220: printstr("\r\ndivision by zero\r\n");
      001100 7Fr4C            [12] 3457 	mov	r7,#___str_9
      001102 7Es00            [12] 3458 	mov	r6,#(___str_9 >> 8)
      001104 7D 80            [12] 3459 	mov	r5,#0x80
                                   3460 ;	calc.c:50: return;
      001106                       3461 00366$:
                                   3462 ;	calc.c:48: for (; *s; s++) putchar(*s);
      001106 8F 82            [24] 3463 	mov	dpl,r7
      001108 8E 83            [24] 3464 	mov	dph,r6
      00110A 8D F0            [24] 3465 	mov	b,r5
      00110C 12r00r00         [24] 3466 	lcall	__gptrget
      00110F FC               [12] 3467 	mov	r4,a
      001110 70 03            [24] 3468 	jnz	01076$
      001112 02r1Dr05         [24] 3469 	ljmp	00217$
      001115                       3470 01076$:
      001115 7B 00            [12] 3471 	mov	r3,#0x00
      001117 8C 82            [24] 3472 	mov	dpl,r4
      001119 8B 83            [24] 3473 	mov	dph,r3
      00111B 12r00r00         [24] 3474 	lcall	_putchar
      00111E 0F               [12] 3475 	inc	r7
                                   3476 ;	calc.c:220: printstr("\r\ndivision by zero\r\n");
      00111F BF 00 E4         [24] 3477 	cjne	r7,#0x00,00366$
      001122 0E               [12] 3478 	inc	r6
      001123 80 E1            [24] 3479 	sjmp	00366$
      001125                       3480 00148$:
                                   3481 ;	calc.c:222: if (ctx->digit[0] == '/') d1 /= d0;
      001125 8D 82            [24] 3482 	mov	dpl,r5
      001127 8E 83            [24] 3483 	mov	dph,r6
      001129 8F F0            [24] 3484 	mov	b,r7
      00112B 12r00r00         [24] 3485 	lcall	__gptrget
      00112E FC               [12] 3486 	mov	r4,a
      00112F BC 2F 45         [24] 3487 	cjne	r4,#0x2f,00145$
      001132 E5*00            [12] 3488 	mov	a,_bp
      001134 24 0F            [12] 3489 	add	a,#0x0f
      001136 F8               [12] 3490 	mov	r0,a
      001137 E6               [12] 3491 	mov	a,@r0
      001138 C0 E0            [24] 3492 	push	acc
      00113A 08               [12] 3493 	inc	r0
      00113B E6               [12] 3494 	mov	a,@r0
      00113C C0 E0            [24] 3495 	push	acc
      00113E 08               [12] 3496 	inc	r0
      00113F E6               [12] 3497 	mov	a,@r0
      001140 C0 E0            [24] 3498 	push	acc
      001142 08               [12] 3499 	inc	r0
      001143 E6               [12] 3500 	mov	a,@r0
      001144 C0 E0            [24] 3501 	push	acc
      001146 E5*00            [12] 3502 	mov	a,_bp
      001148 24 13            [12] 3503 	add	a,#0x13
      00114A F8               [12] 3504 	mov	r0,a
      00114B 86 82            [24] 3505 	mov	dpl,@r0
      00114D 08               [12] 3506 	inc	r0
      00114E 86 83            [24] 3507 	mov	dph,@r0
      001150 08               [12] 3508 	inc	r0
      001151 86 F0            [24] 3509 	mov	b,@r0
      001153 08               [12] 3510 	inc	r0
      001154 E6               [12] 3511 	mov	a,@r0
      001155 12r00r00         [24] 3512 	lcall	__divslong
      001158 AF 82            [24] 3513 	mov	r7,dpl
      00115A AE 83            [24] 3514 	mov	r6,dph
      00115C AD F0            [24] 3515 	mov	r5,b
      00115E FC               [12] 3516 	mov	r4,a
      00115F E5 81            [12] 3517 	mov	a,sp
      001161 24 FC            [12] 3518 	add	a,#0xfc
      001163 F5 81            [12] 3519 	mov	sp,a
      001165 E5*00            [12] 3520 	mov	a,_bp
      001167 24 13            [12] 3521 	add	a,#0x13
      001169 F8               [12] 3522 	mov	r0,a
      00116A A6 07            [24] 3523 	mov	@r0,ar7
      00116C 08               [12] 3524 	inc	r0
      00116D A6 06            [24] 3525 	mov	@r0,ar6
      00116F 08               [12] 3526 	inc	r0
      001170 A6 05            [24] 3527 	mov	@r0,ar5
      001172 08               [12] 3528 	inc	r0
      001173 A6 04            [24] 3529 	mov	@r0,ar4
      001175 80 63            [24] 3530 	sjmp	00146$
      001177                       3531 00145$:
                                   3532 ;	calc.c:223: else d1 = (unsigned long)d1 / (unsigned long)d0;
      001177 E5*00            [12] 3533 	mov	a,_bp
      001179 24 13            [12] 3534 	add	a,#0x13
      00117B F8               [12] 3535 	mov	r0,a
      00117C 86 07            [24] 3536 	mov	ar7,@r0
      00117E 08               [12] 3537 	inc	r0
      00117F 86 06            [24] 3538 	mov	ar6,@r0
      001181 08               [12] 3539 	inc	r0
      001182 86 05            [24] 3540 	mov	ar5,@r0
      001184 08               [12] 3541 	inc	r0
      001185 86 04            [24] 3542 	mov	ar4,@r0
      001187 E5*00            [12] 3543 	mov	a,_bp
      001189 24 0F            [12] 3544 	add	a,#0x0f
      00118B F8               [12] 3545 	mov	r0,a
      00118C E5*00            [12] 3546 	mov	a,_bp
      00118E 24 08            [12] 3547 	add	a,#0x08
      001190 F9               [12] 3548 	mov	r1,a
      001191 E6               [12] 3549 	mov	a,@r0
      001192 F7               [12] 3550 	mov	@r1,a
      001193 08               [12] 3551 	inc	r0
      001194 09               [12] 3552 	inc	r1
      001195 E6               [12] 3553 	mov	a,@r0
      001196 F7               [12] 3554 	mov	@r1,a
      001197 08               [12] 3555 	inc	r0
      001198 09               [12] 3556 	inc	r1
      001199 E6               [12] 3557 	mov	a,@r0
      00119A F7               [12] 3558 	mov	@r1,a
      00119B 08               [12] 3559 	inc	r0
      00119C 09               [12] 3560 	inc	r1
      00119D E6               [12] 3561 	mov	a,@r0
      00119E F7               [12] 3562 	mov	@r1,a
      00119F E5*00            [12] 3563 	mov	a,_bp
      0011A1 24 08            [12] 3564 	add	a,#0x08
      0011A3 F8               [12] 3565 	mov	r0,a
      0011A4 E6               [12] 3566 	mov	a,@r0
      0011A5 C0 E0            [24] 3567 	push	acc
      0011A7 08               [12] 3568 	inc	r0
      0011A8 E6               [12] 3569 	mov	a,@r0
      0011A9 C0 E0            [24] 3570 	push	acc
      0011AB 08               [12] 3571 	inc	r0
      0011AC E6               [12] 3572 	mov	a,@r0
      0011AD C0 E0            [24] 3573 	push	acc
      0011AF 08               [12] 3574 	inc	r0
      0011B0 E6               [12] 3575 	mov	a,@r0
      0011B1 C0 E0            [24] 3576 	push	acc
      0011B3 8F 82            [24] 3577 	mov	dpl,r7
      0011B5 8E 83            [24] 3578 	mov	dph,r6
      0011B7 8D F0            [24] 3579 	mov	b,r5
      0011B9 EC               [12] 3580 	mov	a,r4
      0011BA 12r00r00         [24] 3581 	lcall	__divulong
      0011BD AF 82            [24] 3582 	mov	r7,dpl
      0011BF AE 83            [24] 3583 	mov	r6,dph
      0011C1 AD F0            [24] 3584 	mov	r5,b
      0011C3 FC               [12] 3585 	mov	r4,a
      0011C4 E5 81            [12] 3586 	mov	a,sp
      0011C6 24 FC            [12] 3587 	add	a,#0xfc
      0011C8 F5 81            [12] 3588 	mov	sp,a
      0011CA E5*00            [12] 3589 	mov	a,_bp
      0011CC 24 13            [12] 3590 	add	a,#0x13
      0011CE F8               [12] 3591 	mov	r0,a
      0011CF A6 07            [24] 3592 	mov	@r0,ar7
      0011D1 08               [12] 3593 	inc	r0
      0011D2 A6 06            [24] 3594 	mov	@r0,ar6
      0011D4 08               [12] 3595 	inc	r0
      0011D5 A6 05            [24] 3596 	mov	@r0,ar5
      0011D7 08               [12] 3597 	inc	r0
      0011D8 A6 04            [24] 3598 	mov	@r0,ar4
      0011DA                       3599 00146$:
                                   3600 ;	calc.c:224: (void)stack_push(&ctx->s, d1);
      0011DA E5*00            [12] 3601 	mov	a,_bp
      0011DC 24 0C            [12] 3602 	add	a,#0x0c
      0011DE F8               [12] 3603 	mov	r0,a
      0011DF 74 09            [12] 3604 	mov	a,#0x09
      0011E1 26               [12] 3605 	add	a,@r0
      0011E2 FA               [12] 3606 	mov	r2,a
      0011E3 E4               [12] 3607 	clr	a
      0011E4 08               [12] 3608 	inc	r0
      0011E5 36               [12] 3609 	addc	a,@r0
      0011E6 FB               [12] 3610 	mov	r3,a
      0011E7 08               [12] 3611 	inc	r0
      0011E8 86 04            [24] 3612 	mov	ar4,@r0
      0011EA E5*00            [12] 3613 	mov	a,_bp
      0011EC 24 13            [12] 3614 	add	a,#0x13
      0011EE F8               [12] 3615 	mov	r0,a
      0011EF E6               [12] 3616 	mov	a,@r0
      0011F0 C0 E0            [24] 3617 	push	acc
      0011F2 08               [12] 3618 	inc	r0
      0011F3 E6               [12] 3619 	mov	a,@r0
      0011F4 C0 E0            [24] 3620 	push	acc
      0011F6 08               [12] 3621 	inc	r0
      0011F7 E6               [12] 3622 	mov	a,@r0
      0011F8 C0 E0            [24] 3623 	push	acc
      0011FA 08               [12] 3624 	inc	r0
      0011FB E6               [12] 3625 	mov	a,@r0
      0011FC C0 E0            [24] 3626 	push	acc
      0011FE 8A 82            [24] 3627 	mov	dpl,r2
      001200 8B 83            [24] 3628 	mov	dph,r3
      001202 8C F0            [24] 3629 	mov	b,r4
      001204 12r00r00         [24] 3630 	lcall	_stack_push
      001207 E5 81            [12] 3631 	mov	a,sp
      001209 24 FC            [12] 3632 	add	a,#0xfc
      00120B F5 81            [12] 3633 	mov	sp,a
                                   3634 ;	calc.c:226: break;
      00120D 02r1Dr05         [24] 3635 	ljmp	00217$
                                   3636 ;	calc.c:228: case '#':
      001210                       3637 00157$:
                                   3638 ;	calc.c:229: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      001210 C0 05            [24] 3639 	push	ar5
      001212 C0 06            [24] 3640 	push	ar6
      001214 C0 07            [24] 3641 	push	ar7
      001216 E5*00            [12] 3642 	mov	a,_bp
      001218 24 0F            [12] 3643 	add	a,#0x0f
      00121A FC               [12] 3644 	mov	r4,a
      00121B 7B 00            [12] 3645 	mov	r3,#0x00
      00121D 7A 40            [12] 3646 	mov	r2,#0x40
      00121F E5*00            [12] 3647 	mov	a,_bp
      001221 24 0C            [12] 3648 	add	a,#0x0c
      001223 F8               [12] 3649 	mov	r0,a
      001224 74 09            [12] 3650 	mov	a,#0x09
      001226 26               [12] 3651 	add	a,@r0
      001227 FD               [12] 3652 	mov	r5,a
      001228 E4               [12] 3653 	clr	a
      001229 08               [12] 3654 	inc	r0
      00122A 36               [12] 3655 	addc	a,@r0
      00122B FE               [12] 3656 	mov	r6,a
      00122C 08               [12] 3657 	inc	r0
      00122D 86 07            [24] 3658 	mov	ar7,@r0
      00122F C0 05            [24] 3659 	push	ar5
      001231 C0 04            [24] 3660 	push	ar4
      001233 C0 03            [24] 3661 	push	ar3
      001235 C0 02            [24] 3662 	push	ar2
      001237 8D 82            [24] 3663 	mov	dpl,r5
      001239 8E 83            [24] 3664 	mov	dph,r6
      00123B 8F F0            [24] 3665 	mov	b,r7
      00123D 12r00r00         [24] 3666 	lcall	_stack_pop
      001240 AE 82            [24] 3667 	mov	r6,dpl
      001242 AF 83            [24] 3668 	mov	r7,dph
      001244 15 81            [12] 3669 	dec	sp
      001246 15 81            [12] 3670 	dec	sp
      001248 15 81            [12] 3671 	dec	sp
      00124A D0 05            [24] 3672 	pop	ar5
      00124C EE               [12] 3673 	mov	a,r6
      00124D 4F               [12] 3674 	orl	a,r7
      00124E D0 07            [24] 3675 	pop	ar7
      001250 D0 06            [24] 3676 	pop	ar6
      001252 D0 05            [24] 3677 	pop	ar5
      001254 70 25            [24] 3678 	jnz	00168$
      001256 7Fr38            [12] 3679 	mov	r7,#___str_8
      001258 7Es00            [12] 3680 	mov	r6,#(___str_8 >> 8)
      00125A 7D 80            [12] 3681 	mov	r5,#0x80
                                   3682 ;	calc.c:50: return;
      00125C                       3683 00369$:
                                   3684 ;	calc.c:48: for (; *s; s++) putchar(*s);
      00125C 8F 82            [24] 3685 	mov	dpl,r7
      00125E 8E 83            [24] 3686 	mov	dph,r6
      001260 8D F0            [24] 3687 	mov	b,r5
      001262 12r00r00         [24] 3688 	lcall	__gptrget
      001265 FC               [12] 3689 	mov	r4,a
      001266 70 03            [24] 3690 	jnz	01081$
      001268 02r1Dr05         [24] 3691 	ljmp	00217$
      00126B                       3692 01081$:
      00126B 7B 00            [12] 3693 	mov	r3,#0x00
      00126D 8C 82            [24] 3694 	mov	dpl,r4
      00126F 8B 83            [24] 3695 	mov	dph,r3
      001271 12r00r00         [24] 3696 	lcall	_putchar
      001274 0F               [12] 3697 	inc	r7
                                   3698 ;	calc.c:229: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      001275 BF 00 E4         [24] 3699 	cjne	r7,#0x00,00369$
      001278 0E               [12] 3700 	inc	r6
      001279 80 E1            [24] 3701 	sjmp	00369$
      00127B                       3702 00168$:
                                   3703 ;	calc.c:230: else if (!stack_pop(&ctx->s, &d1)) {
      00127B C0 05            [24] 3704 	push	ar5
      00127D C0 06            [24] 3705 	push	ar6
      00127F C0 07            [24] 3706 	push	ar7
      001281 E5*00            [12] 3707 	mov	a,_bp
      001283 24 13            [12] 3708 	add	a,#0x13
      001285 FC               [12] 3709 	mov	r4,a
      001286 7B 00            [12] 3710 	mov	r3,#0x00
      001288 7A 40            [12] 3711 	mov	r2,#0x40
      00128A E5*00            [12] 3712 	mov	a,_bp
      00128C 24 0C            [12] 3713 	add	a,#0x0c
      00128E F8               [12] 3714 	mov	r0,a
      00128F 74 09            [12] 3715 	mov	a,#0x09
      001291 26               [12] 3716 	add	a,@r0
      001292 FD               [12] 3717 	mov	r5,a
      001293 E4               [12] 3718 	clr	a
      001294 08               [12] 3719 	inc	r0
      001295 36               [12] 3720 	addc	a,@r0
      001296 FE               [12] 3721 	mov	r6,a
      001297 08               [12] 3722 	inc	r0
      001298 86 07            [24] 3723 	mov	ar7,@r0
      00129A C0 05            [24] 3724 	push	ar5
      00129C C0 04            [24] 3725 	push	ar4
      00129E C0 03            [24] 3726 	push	ar3
      0012A0 C0 02            [24] 3727 	push	ar2
      0012A2 8D 82            [24] 3728 	mov	dpl,r5
      0012A4 8E 83            [24] 3729 	mov	dph,r6
      0012A6 8F F0            [24] 3730 	mov	b,r7
      0012A8 12r00r00         [24] 3731 	lcall	_stack_pop
      0012AB AE 82            [24] 3732 	mov	r6,dpl
      0012AD AF 83            [24] 3733 	mov	r7,dph
      0012AF 15 81            [12] 3734 	dec	sp
      0012B1 15 81            [12] 3735 	dec	sp
      0012B3 15 81            [12] 3736 	dec	sp
      0012B5 D0 05            [24] 3737 	pop	ar5
      0012B7 EE               [12] 3738 	mov	a,r6
      0012B8 4F               [12] 3739 	orl	a,r7
      0012B9 D0 07            [24] 3740 	pop	ar7
      0012BB D0 06            [24] 3741 	pop	ar6
      0012BD D0 05            [24] 3742 	pop	ar5
      0012BF 70 58            [24] 3743 	jnz	00165$
                                   3744 ;	calc.c:231: (void)stack_push(&ctx->s, d0);
      0012C1 E5*00            [12] 3745 	mov	a,_bp
      0012C3 24 0C            [12] 3746 	add	a,#0x0c
      0012C5 F8               [12] 3747 	mov	r0,a
      0012C6 74 09            [12] 3748 	mov	a,#0x09
      0012C8 26               [12] 3749 	add	a,@r0
      0012C9 FA               [12] 3750 	mov	r2,a
      0012CA E4               [12] 3751 	clr	a
      0012CB 08               [12] 3752 	inc	r0
      0012CC 36               [12] 3753 	addc	a,@r0
      0012CD FB               [12] 3754 	mov	r3,a
      0012CE 08               [12] 3755 	inc	r0
      0012CF 86 04            [24] 3756 	mov	ar4,@r0
      0012D1 E5*00            [12] 3757 	mov	a,_bp
      0012D3 24 0F            [12] 3758 	add	a,#0x0f
      0012D5 F8               [12] 3759 	mov	r0,a
      0012D6 E6               [12] 3760 	mov	a,@r0
      0012D7 C0 E0            [24] 3761 	push	acc
      0012D9 08               [12] 3762 	inc	r0
      0012DA E6               [12] 3763 	mov	a,@r0
      0012DB C0 E0            [24] 3764 	push	acc
      0012DD 08               [12] 3765 	inc	r0
      0012DE E6               [12] 3766 	mov	a,@r0
      0012DF C0 E0            [24] 3767 	push	acc
      0012E1 08               [12] 3768 	inc	r0
      0012E2 E6               [12] 3769 	mov	a,@r0
      0012E3 C0 E0            [24] 3770 	push	acc
      0012E5 8A 82            [24] 3771 	mov	dpl,r2
      0012E7 8B 83            [24] 3772 	mov	dph,r3
      0012E9 8C F0            [24] 3773 	mov	b,r4
      0012EB 12r00r00         [24] 3774 	lcall	_stack_push
      0012EE E5 81            [12] 3775 	mov	a,sp
      0012F0 24 FC            [12] 3776 	add	a,#0xfc
      0012F2 F5 81            [12] 3777 	mov	sp,a
                                   3778 ;	calc.c:232: printstr("\r\nstack underflow\r\n");
      0012F4 7Fr38            [12] 3779 	mov	r7,#___str_8
      0012F6 7Es00            [12] 3780 	mov	r6,#(___str_8 >> 8)
      0012F8 7D 80            [12] 3781 	mov	r5,#0x80
                                   3782 ;	calc.c:50: return;
      0012FA                       3783 00372$:
                                   3784 ;	calc.c:48: for (; *s; s++) putchar(*s);
      0012FA 8F 82            [24] 3785 	mov	dpl,r7
      0012FC 8E 83            [24] 3786 	mov	dph,r6
      0012FE 8D F0            [24] 3787 	mov	b,r5
      001300 12r00r00         [24] 3788 	lcall	__gptrget
      001303 FC               [12] 3789 	mov	r4,a
      001304 70 03            [24] 3790 	jnz	01084$
      001306 02r1Dr05         [24] 3791 	ljmp	00217$
      001309                       3792 01084$:
      001309 7B 00            [12] 3793 	mov	r3,#0x00
      00130B 8C 82            [24] 3794 	mov	dpl,r4
      00130D 8B 83            [24] 3795 	mov	dph,r3
      00130F 12r00r00         [24] 3796 	lcall	_putchar
      001312 0F               [12] 3797 	inc	r7
                                   3798 ;	calc.c:232: printstr("\r\nstack underflow\r\n");
      001313 BF 00 E4         [24] 3799 	cjne	r7,#0x00,00372$
      001316 0E               [12] 3800 	inc	r6
      001317 80 E1            [24] 3801 	sjmp	00372$
      001319                       3802 00165$:
                                   3803 ;	calc.c:233: } else if (!d0) {
      001319 E5*00            [12] 3804 	mov	a,_bp
      00131B 24 0F            [12] 3805 	add	a,#0x0f
      00131D F8               [12] 3806 	mov	r0,a
      00131E E6               [12] 3807 	mov	a,@r0
      00131F 08               [12] 3808 	inc	r0
      001320 46               [12] 3809 	orl	a,@r0
      001321 08               [12] 3810 	inc	r0
      001322 46               [12] 3811 	orl	a,@r0
      001323 08               [12] 3812 	inc	r0
      001324 46               [12] 3813 	orl	a,@r0
      001325 60 03            [24] 3814 	jz	01086$
      001327 02r13rB5         [24] 3815 	ljmp	00162$
      00132A                       3816 01086$:
                                   3817 ;	calc.c:234: (void)stack_push(&ctx->s, d1);
      00132A E5*00            [12] 3818 	mov	a,_bp
      00132C 24 0C            [12] 3819 	add	a,#0x0c
      00132E F8               [12] 3820 	mov	r0,a
      00132F 74 09            [12] 3821 	mov	a,#0x09
      001331 26               [12] 3822 	add	a,@r0
      001332 FA               [12] 3823 	mov	r2,a
      001333 E4               [12] 3824 	clr	a
      001334 08               [12] 3825 	inc	r0
      001335 36               [12] 3826 	addc	a,@r0
      001336 FB               [12] 3827 	mov	r3,a
      001337 08               [12] 3828 	inc	r0
      001338 86 04            [24] 3829 	mov	ar4,@r0
      00133A E5*00            [12] 3830 	mov	a,_bp
      00133C 24 13            [12] 3831 	add	a,#0x13
      00133E F8               [12] 3832 	mov	r0,a
      00133F E6               [12] 3833 	mov	a,@r0
      001340 C0 E0            [24] 3834 	push	acc
      001342 08               [12] 3835 	inc	r0
      001343 E6               [12] 3836 	mov	a,@r0
      001344 C0 E0            [24] 3837 	push	acc
      001346 08               [12] 3838 	inc	r0
      001347 E6               [12] 3839 	mov	a,@r0
      001348 C0 E0            [24] 3840 	push	acc
      00134A 08               [12] 3841 	inc	r0
      00134B E6               [12] 3842 	mov	a,@r0
      00134C C0 E0            [24] 3843 	push	acc
      00134E 8A 82            [24] 3844 	mov	dpl,r2
      001350 8B 83            [24] 3845 	mov	dph,r3
      001352 8C F0            [24] 3846 	mov	b,r4
      001354 12r00r00         [24] 3847 	lcall	_stack_push
      001357 E5 81            [12] 3848 	mov	a,sp
      001359 24 FC            [12] 3849 	add	a,#0xfc
      00135B F5 81            [12] 3850 	mov	sp,a
                                   3851 ;	calc.c:235: (void)stack_push(&ctx->s, d0);			
      00135D E5*00            [12] 3852 	mov	a,_bp
      00135F 24 0C            [12] 3853 	add	a,#0x0c
      001361 F8               [12] 3854 	mov	r0,a
      001362 74 09            [12] 3855 	mov	a,#0x09
      001364 26               [12] 3856 	add	a,@r0
      001365 FA               [12] 3857 	mov	r2,a
      001366 E4               [12] 3858 	clr	a
      001367 08               [12] 3859 	inc	r0
      001368 36               [12] 3860 	addc	a,@r0
      001369 FB               [12] 3861 	mov	r3,a
      00136A 08               [12] 3862 	inc	r0
      00136B 86 04            [24] 3863 	mov	ar4,@r0
      00136D E5*00            [12] 3864 	mov	a,_bp
      00136F 24 0F            [12] 3865 	add	a,#0x0f
      001371 F8               [12] 3866 	mov	r0,a
      001372 E6               [12] 3867 	mov	a,@r0
      001373 C0 E0            [24] 3868 	push	acc
      001375 08               [12] 3869 	inc	r0
      001376 E6               [12] 3870 	mov	a,@r0
      001377 C0 E0            [24] 3871 	push	acc
      001379 08               [12] 3872 	inc	r0
      00137A E6               [12] 3873 	mov	a,@r0
      00137B C0 E0            [24] 3874 	push	acc
      00137D 08               [12] 3875 	inc	r0
      00137E E6               [12] 3876 	mov	a,@r0
      00137F C0 E0            [24] 3877 	push	acc
      001381 8A 82            [24] 3878 	mov	dpl,r2
      001383 8B 83            [24] 3879 	mov	dph,r3
      001385 8C F0            [24] 3880 	mov	b,r4
      001387 12r00r00         [24] 3881 	lcall	_stack_push
      00138A E5 81            [12] 3882 	mov	a,sp
      00138C 24 FC            [12] 3883 	add	a,#0xfc
      00138E F5 81            [12] 3884 	mov	sp,a
                                   3885 ;	calc.c:236: printstr("\r\ndivision by zero\r\n");
      001390 7Fr4C            [12] 3886 	mov	r7,#___str_9
      001392 7Es00            [12] 3887 	mov	r6,#(___str_9 >> 8)
      001394 7D 80            [12] 3888 	mov	r5,#0x80
                                   3889 ;	calc.c:50: return;
      001396                       3890 00375$:
                                   3891 ;	calc.c:48: for (; *s; s++) putchar(*s);
      001396 8F 82            [24] 3892 	mov	dpl,r7
      001398 8E 83            [24] 3893 	mov	dph,r6
      00139A 8D F0            [24] 3894 	mov	b,r5
      00139C 12r00r00         [24] 3895 	lcall	__gptrget
      00139F FC               [12] 3896 	mov	r4,a
      0013A0 70 03            [24] 3897 	jnz	01087$
      0013A2 02r1Dr05         [24] 3898 	ljmp	00217$
      0013A5                       3899 01087$:
      0013A5 7B 00            [12] 3900 	mov	r3,#0x00
      0013A7 8C 82            [24] 3901 	mov	dpl,r4
      0013A9 8B 83            [24] 3902 	mov	dph,r3
      0013AB 12r00r00         [24] 3903 	lcall	_putchar
      0013AE 0F               [12] 3904 	inc	r7
                                   3905 ;	calc.c:236: printstr("\r\ndivision by zero\r\n");
      0013AF BF 00 E4         [24] 3906 	cjne	r7,#0x00,00375$
      0013B2 0E               [12] 3907 	inc	r6
      0013B3 80 E1            [24] 3908 	sjmp	00375$
      0013B5                       3909 00162$:
                                   3910 ;	calc.c:238: if (ctx->digit[0] == '%') d1 %= d0;
      0013B5 8D 82            [24] 3911 	mov	dpl,r5
      0013B7 8E 83            [24] 3912 	mov	dph,r6
      0013B9 8F F0            [24] 3913 	mov	b,r7
      0013BB 12r00r00         [24] 3914 	lcall	__gptrget
      0013BE FD               [12] 3915 	mov	r5,a
      0013BF BD 25 45         [24] 3916 	cjne	r5,#0x25,00159$
      0013C2 E5*00            [12] 3917 	mov	a,_bp
      0013C4 24 0F            [12] 3918 	add	a,#0x0f
      0013C6 F8               [12] 3919 	mov	r0,a
      0013C7 E6               [12] 3920 	mov	a,@r0
      0013C8 C0 E0            [24] 3921 	push	acc
      0013CA 08               [12] 3922 	inc	r0
      0013CB E6               [12] 3923 	mov	a,@r0
      0013CC C0 E0            [24] 3924 	push	acc
      0013CE 08               [12] 3925 	inc	r0
      0013CF E6               [12] 3926 	mov	a,@r0
      0013D0 C0 E0            [24] 3927 	push	acc
      0013D2 08               [12] 3928 	inc	r0
      0013D3 E6               [12] 3929 	mov	a,@r0
      0013D4 C0 E0            [24] 3930 	push	acc
      0013D6 E5*00            [12] 3931 	mov	a,_bp
      0013D8 24 13            [12] 3932 	add	a,#0x13
      0013DA F8               [12] 3933 	mov	r0,a
      0013DB 86 82            [24] 3934 	mov	dpl,@r0
      0013DD 08               [12] 3935 	inc	r0
      0013DE 86 83            [24] 3936 	mov	dph,@r0
      0013E0 08               [12] 3937 	inc	r0
      0013E1 86 F0            [24] 3938 	mov	b,@r0
      0013E3 08               [12] 3939 	inc	r0
      0013E4 E6               [12] 3940 	mov	a,@r0
      0013E5 12r00r00         [24] 3941 	lcall	__modslong
      0013E8 AC 82            [24] 3942 	mov	r4,dpl
      0013EA AD 83            [24] 3943 	mov	r5,dph
      0013EC AE F0            [24] 3944 	mov	r6,b
      0013EE FF               [12] 3945 	mov	r7,a
      0013EF E5 81            [12] 3946 	mov	a,sp
      0013F1 24 FC            [12] 3947 	add	a,#0xfc
      0013F3 F5 81            [12] 3948 	mov	sp,a
      0013F5 E5*00            [12] 3949 	mov	a,_bp
      0013F7 24 13            [12] 3950 	add	a,#0x13
      0013F9 F8               [12] 3951 	mov	r0,a
      0013FA A6 04            [24] 3952 	mov	@r0,ar4
      0013FC 08               [12] 3953 	inc	r0
      0013FD A6 05            [24] 3954 	mov	@r0,ar5
      0013FF 08               [12] 3955 	inc	r0
      001400 A6 06            [24] 3956 	mov	@r0,ar6
      001402 08               [12] 3957 	inc	r0
      001403 A6 07            [24] 3958 	mov	@r0,ar7
      001405 80 5F            [24] 3959 	sjmp	00160$
      001407                       3960 00159$:
                                   3961 ;	calc.c:239: else d1 = (unsigned long)d1 % (unsigned long)d0;
      001407 E5*00            [12] 3962 	mov	a,_bp
      001409 24 13            [12] 3963 	add	a,#0x13
      00140B F8               [12] 3964 	mov	r0,a
      00140C E5*00            [12] 3965 	mov	a,_bp
      00140E 24 08            [12] 3966 	add	a,#0x08
      001410 F9               [12] 3967 	mov	r1,a
      001411 E6               [12] 3968 	mov	a,@r0
      001412 F7               [12] 3969 	mov	@r1,a
      001413 08               [12] 3970 	inc	r0
      001414 09               [12] 3971 	inc	r1
      001415 E6               [12] 3972 	mov	a,@r0
      001416 F7               [12] 3973 	mov	@r1,a
      001417 08               [12] 3974 	inc	r0
      001418 09               [12] 3975 	inc	r1
      001419 E6               [12] 3976 	mov	a,@r0
      00141A F7               [12] 3977 	mov	@r1,a
      00141B 08               [12] 3978 	inc	r0
      00141C 09               [12] 3979 	inc	r1
      00141D E6               [12] 3980 	mov	a,@r0
      00141E F7               [12] 3981 	mov	@r1,a
      00141F E5*00            [12] 3982 	mov	a,_bp
      001421 24 0F            [12] 3983 	add	a,#0x0f
      001423 F8               [12] 3984 	mov	r0,a
      001424 86 02            [24] 3985 	mov	ar2,@r0
      001426 08               [12] 3986 	inc	r0
      001427 86 03            [24] 3987 	mov	ar3,@r0
      001429 08               [12] 3988 	inc	r0
      00142A 86 06            [24] 3989 	mov	ar6,@r0
      00142C 08               [12] 3990 	inc	r0
      00142D 86 07            [24] 3991 	mov	ar7,@r0
      00142F C0 02            [24] 3992 	push	ar2
      001431 C0 03            [24] 3993 	push	ar3
      001433 C0 06            [24] 3994 	push	ar6
      001435 C0 07            [24] 3995 	push	ar7
      001437 E5*00            [12] 3996 	mov	a,_bp
      001439 24 08            [12] 3997 	add	a,#0x08
      00143B F8               [12] 3998 	mov	r0,a
      00143C 86 82            [24] 3999 	mov	dpl,@r0
      00143E 08               [12] 4000 	inc	r0
      00143F 86 83            [24] 4001 	mov	dph,@r0
      001441 08               [12] 4002 	inc	r0
      001442 86 F0            [24] 4003 	mov	b,@r0
      001444 08               [12] 4004 	inc	r0
      001445 E6               [12] 4005 	mov	a,@r0
      001446 12r00r00         [24] 4006 	lcall	__modulong
      001449 AC 82            [24] 4007 	mov	r4,dpl
      00144B AD 83            [24] 4008 	mov	r5,dph
      00144D AE F0            [24] 4009 	mov	r6,b
      00144F FF               [12] 4010 	mov	r7,a
      001450 E5 81            [12] 4011 	mov	a,sp
      001452 24 FC            [12] 4012 	add	a,#0xfc
      001454 F5 81            [12] 4013 	mov	sp,a
      001456 E5*00            [12] 4014 	mov	a,_bp
      001458 24 13            [12] 4015 	add	a,#0x13
      00145A F8               [12] 4016 	mov	r0,a
      00145B A6 04            [24] 4017 	mov	@r0,ar4
      00145D 08               [12] 4018 	inc	r0
      00145E A6 05            [24] 4019 	mov	@r0,ar5
      001460 08               [12] 4020 	inc	r0
      001461 A6 06            [24] 4021 	mov	@r0,ar6
      001463 08               [12] 4022 	inc	r0
      001464 A6 07            [24] 4023 	mov	@r0,ar7
      001466                       4024 00160$:
                                   4025 ;	calc.c:240: (void)stack_push(&ctx->s, d1);
      001466 E5*00            [12] 4026 	mov	a,_bp
      001468 24 0C            [12] 4027 	add	a,#0x0c
      00146A F8               [12] 4028 	mov	r0,a
      00146B 74 09            [12] 4029 	mov	a,#0x09
      00146D 26               [12] 4030 	add	a,@r0
      00146E FD               [12] 4031 	mov	r5,a
      00146F E4               [12] 4032 	clr	a
      001470 08               [12] 4033 	inc	r0
      001471 36               [12] 4034 	addc	a,@r0
      001472 FE               [12] 4035 	mov	r6,a
      001473 08               [12] 4036 	inc	r0
      001474 86 07            [24] 4037 	mov	ar7,@r0
      001476 E5*00            [12] 4038 	mov	a,_bp
      001478 24 13            [12] 4039 	add	a,#0x13
      00147A F8               [12] 4040 	mov	r0,a
      00147B E6               [12] 4041 	mov	a,@r0
      00147C C0 E0            [24] 4042 	push	acc
      00147E 08               [12] 4043 	inc	r0
      00147F E6               [12] 4044 	mov	a,@r0
      001480 C0 E0            [24] 4045 	push	acc
      001482 08               [12] 4046 	inc	r0
      001483 E6               [12] 4047 	mov	a,@r0
      001484 C0 E0            [24] 4048 	push	acc
      001486 08               [12] 4049 	inc	r0
      001487 E6               [12] 4050 	mov	a,@r0
      001488 C0 E0            [24] 4051 	push	acc
      00148A 8D 82            [24] 4052 	mov	dpl,r5
      00148C 8E 83            [24] 4053 	mov	dph,r6
      00148E 8F F0            [24] 4054 	mov	b,r7
      001490 12r00r00         [24] 4055 	lcall	_stack_push
      001493 E5 81            [12] 4056 	mov	a,sp
      001495 24 FC            [12] 4057 	add	a,#0xfc
      001497 F5 81            [12] 4058 	mov	sp,a
                                   4059 ;	calc.c:242: break;
      001499 02r1Dr05         [24] 4060 	ljmp	00217$
                                   4061 ;	calc.c:243: case '&':
      00149C                       4062 00170$:
                                   4063 ;	calc.c:244: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      00149C E5*00            [12] 4064 	mov	a,_bp
      00149E 24 0F            [12] 4065 	add	a,#0x0f
      0014A0 FF               [12] 4066 	mov	r7,a
      0014A1 7E 00            [12] 4067 	mov	r6,#0x00
      0014A3 7D 40            [12] 4068 	mov	r5,#0x40
      0014A5 E5*00            [12] 4069 	mov	a,_bp
      0014A7 24 0C            [12] 4070 	add	a,#0x0c
      0014A9 F8               [12] 4071 	mov	r0,a
      0014AA 74 09            [12] 4072 	mov	a,#0x09
      0014AC 26               [12] 4073 	add	a,@r0
      0014AD FA               [12] 4074 	mov	r2,a
      0014AE E4               [12] 4075 	clr	a
      0014AF 08               [12] 4076 	inc	r0
      0014B0 36               [12] 4077 	addc	a,@r0
      0014B1 FB               [12] 4078 	mov	r3,a
      0014B2 08               [12] 4079 	inc	r0
      0014B3 86 04            [24] 4080 	mov	ar4,@r0
      0014B5 C0 07            [24] 4081 	push	ar7
      0014B7 C0 06            [24] 4082 	push	ar6
      0014B9 C0 05            [24] 4083 	push	ar5
      0014BB 8A 82            [24] 4084 	mov	dpl,r2
      0014BD 8B 83            [24] 4085 	mov	dph,r3
      0014BF 8C F0            [24] 4086 	mov	b,r4
      0014C1 12r00r00         [24] 4087 	lcall	_stack_pop
      0014C4 AE 82            [24] 4088 	mov	r6,dpl
      0014C6 AF 83            [24] 4089 	mov	r7,dph
      0014C8 15 81            [12] 4090 	dec	sp
      0014CA 15 81            [12] 4091 	dec	sp
      0014CC 15 81            [12] 4092 	dec	sp
      0014CE EE               [12] 4093 	mov	a,r6
      0014CF 4F               [12] 4094 	orl	a,r7
      0014D0 70 25            [24] 4095 	jnz	00175$
      0014D2 7Dr38            [12] 4096 	mov	r5,#___str_8
      0014D4 7Es00            [12] 4097 	mov	r6,#(___str_8 >> 8)
      0014D6 7F 80            [12] 4098 	mov	r7,#0x80
                                   4099 ;	calc.c:50: return;
      0014D8                       4100 00378$:
                                   4101 ;	calc.c:48: for (; *s; s++) putchar(*s);
      0014D8 8D 82            [24] 4102 	mov	dpl,r5
      0014DA 8E 83            [24] 4103 	mov	dph,r6
      0014DC 8F F0            [24] 4104 	mov	b,r7
      0014DE 12r00r00         [24] 4105 	lcall	__gptrget
      0014E1 FC               [12] 4106 	mov	r4,a
      0014E2 70 03            [24] 4107 	jnz	01092$
      0014E4 02r1Dr05         [24] 4108 	ljmp	00217$
      0014E7                       4109 01092$:
      0014E7 7B 00            [12] 4110 	mov	r3,#0x00
      0014E9 8C 82            [24] 4111 	mov	dpl,r4
      0014EB 8B 83            [24] 4112 	mov	dph,r3
      0014ED 12r00r00         [24] 4113 	lcall	_putchar
      0014F0 0D               [12] 4114 	inc	r5
                                   4115 ;	calc.c:244: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      0014F1 BD 00 E4         [24] 4116 	cjne	r5,#0x00,00378$
      0014F4 0E               [12] 4117 	inc	r6
      0014F5 80 E1            [24] 4118 	sjmp	00378$
      0014F7                       4119 00175$:
                                   4120 ;	calc.c:245: else if (!stack_pop(&ctx->s, &d1)) {
      0014F7 E5*00            [12] 4121 	mov	a,_bp
      0014F9 24 13            [12] 4122 	add	a,#0x13
      0014FB FF               [12] 4123 	mov	r7,a
      0014FC 7E 00            [12] 4124 	mov	r6,#0x00
      0014FE 7D 40            [12] 4125 	mov	r5,#0x40
      001500 E5*00            [12] 4126 	mov	a,_bp
      001502 24 0C            [12] 4127 	add	a,#0x0c
      001504 F8               [12] 4128 	mov	r0,a
      001505 74 09            [12] 4129 	mov	a,#0x09
      001507 26               [12] 4130 	add	a,@r0
      001508 FA               [12] 4131 	mov	r2,a
      001509 E4               [12] 4132 	clr	a
      00150A 08               [12] 4133 	inc	r0
      00150B 36               [12] 4134 	addc	a,@r0
      00150C FB               [12] 4135 	mov	r3,a
      00150D 08               [12] 4136 	inc	r0
      00150E 86 04            [24] 4137 	mov	ar4,@r0
      001510 C0 07            [24] 4138 	push	ar7
      001512 C0 06            [24] 4139 	push	ar6
      001514 C0 05            [24] 4140 	push	ar5
      001516 8A 82            [24] 4141 	mov	dpl,r2
      001518 8B 83            [24] 4142 	mov	dph,r3
      00151A 8C F0            [24] 4143 	mov	b,r4
      00151C 12r00r00         [24] 4144 	lcall	_stack_pop
      00151F AE 82            [24] 4145 	mov	r6,dpl
      001521 AF 83            [24] 4146 	mov	r7,dph
      001523 15 81            [12] 4147 	dec	sp
      001525 15 81            [12] 4148 	dec	sp
      001527 15 81            [12] 4149 	dec	sp
      001529 EE               [12] 4150 	mov	a,r6
      00152A 4F               [12] 4151 	orl	a,r7
      00152B 70 58            [24] 4152 	jnz	00172$
                                   4153 ;	calc.c:246: (void)stack_push(&ctx->s, d0);
      00152D E5*00            [12] 4154 	mov	a,_bp
      00152F 24 0C            [12] 4155 	add	a,#0x0c
      001531 F8               [12] 4156 	mov	r0,a
      001532 74 09            [12] 4157 	mov	a,#0x09
      001534 26               [12] 4158 	add	a,@r0
      001535 FD               [12] 4159 	mov	r5,a
      001536 E4               [12] 4160 	clr	a
      001537 08               [12] 4161 	inc	r0
      001538 36               [12] 4162 	addc	a,@r0
      001539 FE               [12] 4163 	mov	r6,a
      00153A 08               [12] 4164 	inc	r0
      00153B 86 07            [24] 4165 	mov	ar7,@r0
      00153D E5*00            [12] 4166 	mov	a,_bp
      00153F 24 0F            [12] 4167 	add	a,#0x0f
      001541 F8               [12] 4168 	mov	r0,a
      001542 E6               [12] 4169 	mov	a,@r0
      001543 C0 E0            [24] 4170 	push	acc
      001545 08               [12] 4171 	inc	r0
      001546 E6               [12] 4172 	mov	a,@r0
      001547 C0 E0            [24] 4173 	push	acc
      001549 08               [12] 4174 	inc	r0
      00154A E6               [12] 4175 	mov	a,@r0
      00154B C0 E0            [24] 4176 	push	acc
      00154D 08               [12] 4177 	inc	r0
      00154E E6               [12] 4178 	mov	a,@r0
      00154F C0 E0            [24] 4179 	push	acc
      001551 8D 82            [24] 4180 	mov	dpl,r5
      001553 8E 83            [24] 4181 	mov	dph,r6
      001555 8F F0            [24] 4182 	mov	b,r7
      001557 12r00r00         [24] 4183 	lcall	_stack_push
      00155A E5 81            [12] 4184 	mov	a,sp
      00155C 24 FC            [12] 4185 	add	a,#0xfc
      00155E F5 81            [12] 4186 	mov	sp,a
                                   4187 ;	calc.c:247: printstr("\r\nstack underflow\r\n");
      001560 7Dr38            [12] 4188 	mov	r5,#___str_8
      001562 7Es00            [12] 4189 	mov	r6,#(___str_8 >> 8)
      001564 7F 80            [12] 4190 	mov	r7,#0x80
                                   4191 ;	calc.c:50: return;
      001566                       4192 00381$:
                                   4193 ;	calc.c:48: for (; *s; s++) putchar(*s);
      001566 8D 82            [24] 4194 	mov	dpl,r5
      001568 8E 83            [24] 4195 	mov	dph,r6
      00156A 8F F0            [24] 4196 	mov	b,r7
      00156C 12r00r00         [24] 4197 	lcall	__gptrget
      00156F FC               [12] 4198 	mov	r4,a
      001570 70 03            [24] 4199 	jnz	01095$
      001572 02r1Dr05         [24] 4200 	ljmp	00217$
      001575                       4201 01095$:
      001575 7B 00            [12] 4202 	mov	r3,#0x00
      001577 8C 82            [24] 4203 	mov	dpl,r4
      001579 8B 83            [24] 4204 	mov	dph,r3
      00157B 12r00r00         [24] 4205 	lcall	_putchar
      00157E 0D               [12] 4206 	inc	r5
                                   4207 ;	calc.c:247: printstr("\r\nstack underflow\r\n");
      00157F BD 00 E4         [24] 4208 	cjne	r5,#0x00,00381$
      001582 0E               [12] 4209 	inc	r6
      001583 80 E1            [24] 4210 	sjmp	00381$
      001585                       4211 00172$:
                                   4212 ;	calc.c:249: d1 &= d0;
      001585 E5*00            [12] 4213 	mov	a,_bp
      001587 24 13            [12] 4214 	add	a,#0x13
      001589 F8               [12] 4215 	mov	r0,a
      00158A E5*00            [12] 4216 	mov	a,_bp
      00158C 24 0F            [12] 4217 	add	a,#0x0f
      00158E F9               [12] 4218 	mov	r1,a
      00158F E7               [12] 4219 	mov	a,@r1
      001590 56               [12] 4220 	anl	a,@r0
      001591 F6               [12] 4221 	mov	@r0,a
      001592 09               [12] 4222 	inc	r1
      001593 E7               [12] 4223 	mov	a,@r1
      001594 08               [12] 4224 	inc	r0
      001595 56               [12] 4225 	anl	a,@r0
      001596 F6               [12] 4226 	mov	@r0,a
      001597 09               [12] 4227 	inc	r1
      001598 E7               [12] 4228 	mov	a,@r1
      001599 08               [12] 4229 	inc	r0
      00159A 56               [12] 4230 	anl	a,@r0
      00159B F6               [12] 4231 	mov	@r0,a
      00159C 09               [12] 4232 	inc	r1
      00159D E7               [12] 4233 	mov	a,@r1
      00159E 08               [12] 4234 	inc	r0
      00159F 56               [12] 4235 	anl	a,@r0
      0015A0 F6               [12] 4236 	mov	@r0,a
                                   4237 ;	calc.c:250: (void)stack_push(&ctx->s, d1);
      0015A1 E5*00            [12] 4238 	mov	a,_bp
      0015A3 24 0C            [12] 4239 	add	a,#0x0c
      0015A5 F8               [12] 4240 	mov	r0,a
      0015A6 74 09            [12] 4241 	mov	a,#0x09
      0015A8 26               [12] 4242 	add	a,@r0
      0015A9 FD               [12] 4243 	mov	r5,a
      0015AA E4               [12] 4244 	clr	a
      0015AB 08               [12] 4245 	inc	r0
      0015AC 36               [12] 4246 	addc	a,@r0
      0015AD FE               [12] 4247 	mov	r6,a
      0015AE 08               [12] 4248 	inc	r0
      0015AF 86 07            [24] 4249 	mov	ar7,@r0
      0015B1 E5*00            [12] 4250 	mov	a,_bp
      0015B3 24 13            [12] 4251 	add	a,#0x13
      0015B5 F8               [12] 4252 	mov	r0,a
      0015B6 E6               [12] 4253 	mov	a,@r0
      0015B7 C0 E0            [24] 4254 	push	acc
      0015B9 08               [12] 4255 	inc	r0
      0015BA E6               [12] 4256 	mov	a,@r0
      0015BB C0 E0            [24] 4257 	push	acc
      0015BD 08               [12] 4258 	inc	r0
      0015BE E6               [12] 4259 	mov	a,@r0
      0015BF C0 E0            [24] 4260 	push	acc
      0015C1 08               [12] 4261 	inc	r0
      0015C2 E6               [12] 4262 	mov	a,@r0
      0015C3 C0 E0            [24] 4263 	push	acc
      0015C5 8D 82            [24] 4264 	mov	dpl,r5
      0015C7 8E 83            [24] 4265 	mov	dph,r6
      0015C9 8F F0            [24] 4266 	mov	b,r7
      0015CB 12r00r00         [24] 4267 	lcall	_stack_push
      0015CE E5 81            [12] 4268 	mov	a,sp
      0015D0 24 FC            [12] 4269 	add	a,#0xfc
      0015D2 F5 81            [12] 4270 	mov	sp,a
                                   4271 ;	calc.c:252: break;
      0015D4 02r1Dr05         [24] 4272 	ljmp	00217$
                                   4273 ;	calc.c:253: case '|':
      0015D7                       4274 00177$:
                                   4275 ;	calc.c:254: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      0015D7 E5*00            [12] 4276 	mov	a,_bp
      0015D9 24 0F            [12] 4277 	add	a,#0x0f
      0015DB FF               [12] 4278 	mov	r7,a
      0015DC 7E 00            [12] 4279 	mov	r6,#0x00
      0015DE 7D 40            [12] 4280 	mov	r5,#0x40
      0015E0 E5*00            [12] 4281 	mov	a,_bp
      0015E2 24 0C            [12] 4282 	add	a,#0x0c
      0015E4 F8               [12] 4283 	mov	r0,a
      0015E5 74 09            [12] 4284 	mov	a,#0x09
      0015E7 26               [12] 4285 	add	a,@r0
      0015E8 FA               [12] 4286 	mov	r2,a
      0015E9 E4               [12] 4287 	clr	a
      0015EA 08               [12] 4288 	inc	r0
      0015EB 36               [12] 4289 	addc	a,@r0
      0015EC FB               [12] 4290 	mov	r3,a
      0015ED 08               [12] 4291 	inc	r0
      0015EE 86 04            [24] 4292 	mov	ar4,@r0
      0015F0 C0 07            [24] 4293 	push	ar7
      0015F2 C0 06            [24] 4294 	push	ar6
      0015F4 C0 05            [24] 4295 	push	ar5
      0015F6 8A 82            [24] 4296 	mov	dpl,r2
      0015F8 8B 83            [24] 4297 	mov	dph,r3
      0015FA 8C F0            [24] 4298 	mov	b,r4
      0015FC 12r00r00         [24] 4299 	lcall	_stack_pop
      0015FF AE 82            [24] 4300 	mov	r6,dpl
      001601 AF 83            [24] 4301 	mov	r7,dph
      001603 15 81            [12] 4302 	dec	sp
      001605 15 81            [12] 4303 	dec	sp
      001607 15 81            [12] 4304 	dec	sp
      001609 EE               [12] 4305 	mov	a,r6
      00160A 4F               [12] 4306 	orl	a,r7
      00160B 70 25            [24] 4307 	jnz	00182$
      00160D 7Dr38            [12] 4308 	mov	r5,#___str_8
      00160F 7Es00            [12] 4309 	mov	r6,#(___str_8 >> 8)
      001611 7F 80            [12] 4310 	mov	r7,#0x80
                                   4311 ;	calc.c:50: return;
      001613                       4312 00384$:
                                   4313 ;	calc.c:48: for (; *s; s++) putchar(*s);
      001613 8D 82            [24] 4314 	mov	dpl,r5
      001615 8E 83            [24] 4315 	mov	dph,r6
      001617 8F F0            [24] 4316 	mov	b,r7
      001619 12r00r00         [24] 4317 	lcall	__gptrget
      00161C FC               [12] 4318 	mov	r4,a
      00161D 70 03            [24] 4319 	jnz	01098$
      00161F 02r1Dr05         [24] 4320 	ljmp	00217$
      001622                       4321 01098$:
      001622 7B 00            [12] 4322 	mov	r3,#0x00
      001624 8C 82            [24] 4323 	mov	dpl,r4
      001626 8B 83            [24] 4324 	mov	dph,r3
      001628 12r00r00         [24] 4325 	lcall	_putchar
      00162B 0D               [12] 4326 	inc	r5
                                   4327 ;	calc.c:254: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      00162C BD 00 E4         [24] 4328 	cjne	r5,#0x00,00384$
      00162F 0E               [12] 4329 	inc	r6
      001630 80 E1            [24] 4330 	sjmp	00384$
      001632                       4331 00182$:
                                   4332 ;	calc.c:255: else if (!stack_pop(&ctx->s, &d1)) {
      001632 E5*00            [12] 4333 	mov	a,_bp
      001634 24 13            [12] 4334 	add	a,#0x13
      001636 FF               [12] 4335 	mov	r7,a
      001637 7E 00            [12] 4336 	mov	r6,#0x00
      001639 7D 40            [12] 4337 	mov	r5,#0x40
      00163B E5*00            [12] 4338 	mov	a,_bp
      00163D 24 0C            [12] 4339 	add	a,#0x0c
      00163F F8               [12] 4340 	mov	r0,a
      001640 74 09            [12] 4341 	mov	a,#0x09
      001642 26               [12] 4342 	add	a,@r0
      001643 FA               [12] 4343 	mov	r2,a
      001644 E4               [12] 4344 	clr	a
      001645 08               [12] 4345 	inc	r0
      001646 36               [12] 4346 	addc	a,@r0
      001647 FB               [12] 4347 	mov	r3,a
      001648 08               [12] 4348 	inc	r0
      001649 86 04            [24] 4349 	mov	ar4,@r0
      00164B C0 07            [24] 4350 	push	ar7
      00164D C0 06            [24] 4351 	push	ar6
      00164F C0 05            [24] 4352 	push	ar5
      001651 8A 82            [24] 4353 	mov	dpl,r2
      001653 8B 83            [24] 4354 	mov	dph,r3
      001655 8C F0            [24] 4355 	mov	b,r4
      001657 12r00r00         [24] 4356 	lcall	_stack_pop
      00165A AE 82            [24] 4357 	mov	r6,dpl
      00165C AF 83            [24] 4358 	mov	r7,dph
      00165E 15 81            [12] 4359 	dec	sp
      001660 15 81            [12] 4360 	dec	sp
      001662 15 81            [12] 4361 	dec	sp
      001664 EE               [12] 4362 	mov	a,r6
      001665 4F               [12] 4363 	orl	a,r7
      001666 70 58            [24] 4364 	jnz	00179$
                                   4365 ;	calc.c:256: (void)stack_push(&ctx->s, d0);
      001668 E5*00            [12] 4366 	mov	a,_bp
      00166A 24 0C            [12] 4367 	add	a,#0x0c
      00166C F8               [12] 4368 	mov	r0,a
      00166D 74 09            [12] 4369 	mov	a,#0x09
      00166F 26               [12] 4370 	add	a,@r0
      001670 FD               [12] 4371 	mov	r5,a
      001671 E4               [12] 4372 	clr	a
      001672 08               [12] 4373 	inc	r0
      001673 36               [12] 4374 	addc	a,@r0
      001674 FE               [12] 4375 	mov	r6,a
      001675 08               [12] 4376 	inc	r0
      001676 86 07            [24] 4377 	mov	ar7,@r0
      001678 E5*00            [12] 4378 	mov	a,_bp
      00167A 24 0F            [12] 4379 	add	a,#0x0f
      00167C F8               [12] 4380 	mov	r0,a
      00167D E6               [12] 4381 	mov	a,@r0
      00167E C0 E0            [24] 4382 	push	acc
      001680 08               [12] 4383 	inc	r0
      001681 E6               [12] 4384 	mov	a,@r0
      001682 C0 E0            [24] 4385 	push	acc
      001684 08               [12] 4386 	inc	r0
      001685 E6               [12] 4387 	mov	a,@r0
      001686 C0 E0            [24] 4388 	push	acc
      001688 08               [12] 4389 	inc	r0
      001689 E6               [12] 4390 	mov	a,@r0
      00168A C0 E0            [24] 4391 	push	acc
      00168C 8D 82            [24] 4392 	mov	dpl,r5
      00168E 8E 83            [24] 4393 	mov	dph,r6
      001690 8F F0            [24] 4394 	mov	b,r7
      001692 12r00r00         [24] 4395 	lcall	_stack_push
      001695 E5 81            [12] 4396 	mov	a,sp
      001697 24 FC            [12] 4397 	add	a,#0xfc
      001699 F5 81            [12] 4398 	mov	sp,a
                                   4399 ;	calc.c:257: printstr("\r\nstack underflow\r\n");
      00169B 7Dr38            [12] 4400 	mov	r5,#___str_8
      00169D 7Es00            [12] 4401 	mov	r6,#(___str_8 >> 8)
      00169F 7F 80            [12] 4402 	mov	r7,#0x80
                                   4403 ;	calc.c:50: return;
      0016A1                       4404 00387$:
                                   4405 ;	calc.c:48: for (; *s; s++) putchar(*s);
      0016A1 8D 82            [24] 4406 	mov	dpl,r5
      0016A3 8E 83            [24] 4407 	mov	dph,r6
      0016A5 8F F0            [24] 4408 	mov	b,r7
      0016A7 12r00r00         [24] 4409 	lcall	__gptrget
      0016AA FC               [12] 4410 	mov	r4,a
      0016AB 70 03            [24] 4411 	jnz	01101$
      0016AD 02r1Dr05         [24] 4412 	ljmp	00217$
      0016B0                       4413 01101$:
      0016B0 7B 00            [12] 4414 	mov	r3,#0x00
      0016B2 8C 82            [24] 4415 	mov	dpl,r4
      0016B4 8B 83            [24] 4416 	mov	dph,r3
      0016B6 12r00r00         [24] 4417 	lcall	_putchar
      0016B9 0D               [12] 4418 	inc	r5
                                   4419 ;	calc.c:257: printstr("\r\nstack underflow\r\n");
      0016BA BD 00 E4         [24] 4420 	cjne	r5,#0x00,00387$
      0016BD 0E               [12] 4421 	inc	r6
      0016BE 80 E1            [24] 4422 	sjmp	00387$
      0016C0                       4423 00179$:
                                   4424 ;	calc.c:259: d1 |= d0;
      0016C0 E5*00            [12] 4425 	mov	a,_bp
      0016C2 24 13            [12] 4426 	add	a,#0x13
      0016C4 F8               [12] 4427 	mov	r0,a
      0016C5 E5*00            [12] 4428 	mov	a,_bp
      0016C7 24 0F            [12] 4429 	add	a,#0x0f
      0016C9 F9               [12] 4430 	mov	r1,a
      0016CA E7               [12] 4431 	mov	a,@r1
      0016CB 46               [12] 4432 	orl	a,@r0
      0016CC F6               [12] 4433 	mov	@r0,a
      0016CD 09               [12] 4434 	inc	r1
      0016CE E7               [12] 4435 	mov	a,@r1
      0016CF 08               [12] 4436 	inc	r0
      0016D0 46               [12] 4437 	orl	a,@r0
      0016D1 F6               [12] 4438 	mov	@r0,a
      0016D2 09               [12] 4439 	inc	r1
      0016D3 E7               [12] 4440 	mov	a,@r1
      0016D4 08               [12] 4441 	inc	r0
      0016D5 46               [12] 4442 	orl	a,@r0
      0016D6 F6               [12] 4443 	mov	@r0,a
      0016D7 09               [12] 4444 	inc	r1
      0016D8 E7               [12] 4445 	mov	a,@r1
      0016D9 08               [12] 4446 	inc	r0
      0016DA 46               [12] 4447 	orl	a,@r0
      0016DB F6               [12] 4448 	mov	@r0,a
                                   4449 ;	calc.c:260: (void)stack_push(&ctx->s, d1);
      0016DC E5*00            [12] 4450 	mov	a,_bp
      0016DE 24 0C            [12] 4451 	add	a,#0x0c
      0016E0 F8               [12] 4452 	mov	r0,a
      0016E1 74 09            [12] 4453 	mov	a,#0x09
      0016E3 26               [12] 4454 	add	a,@r0
      0016E4 FD               [12] 4455 	mov	r5,a
      0016E5 E4               [12] 4456 	clr	a
      0016E6 08               [12] 4457 	inc	r0
      0016E7 36               [12] 4458 	addc	a,@r0
      0016E8 FE               [12] 4459 	mov	r6,a
      0016E9 08               [12] 4460 	inc	r0
      0016EA 86 07            [24] 4461 	mov	ar7,@r0
      0016EC E5*00            [12] 4462 	mov	a,_bp
      0016EE 24 13            [12] 4463 	add	a,#0x13
      0016F0 F8               [12] 4464 	mov	r0,a
      0016F1 E6               [12] 4465 	mov	a,@r0
      0016F2 C0 E0            [24] 4466 	push	acc
      0016F4 08               [12] 4467 	inc	r0
      0016F5 E6               [12] 4468 	mov	a,@r0
      0016F6 C0 E0            [24] 4469 	push	acc
      0016F8 08               [12] 4470 	inc	r0
      0016F9 E6               [12] 4471 	mov	a,@r0
      0016FA C0 E0            [24] 4472 	push	acc
      0016FC 08               [12] 4473 	inc	r0
      0016FD E6               [12] 4474 	mov	a,@r0
      0016FE C0 E0            [24] 4475 	push	acc
      001700 8D 82            [24] 4476 	mov	dpl,r5
      001702 8E 83            [24] 4477 	mov	dph,r6
      001704 8F F0            [24] 4478 	mov	b,r7
      001706 12r00r00         [24] 4479 	lcall	_stack_push
      001709 E5 81            [12] 4480 	mov	a,sp
      00170B 24 FC            [12] 4481 	add	a,#0xfc
      00170D F5 81            [12] 4482 	mov	sp,a
                                   4483 ;	calc.c:262: break;
      00170F 02r1Dr05         [24] 4484 	ljmp	00217$
                                   4485 ;	calc.c:263: case '^':
      001712                       4486 00184$:
                                   4487 ;	calc.c:264: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      001712 E5*00            [12] 4488 	mov	a,_bp
      001714 24 0F            [12] 4489 	add	a,#0x0f
      001716 FF               [12] 4490 	mov	r7,a
      001717 7E 00            [12] 4491 	mov	r6,#0x00
      001719 7D 40            [12] 4492 	mov	r5,#0x40
      00171B E5*00            [12] 4493 	mov	a,_bp
      00171D 24 0C            [12] 4494 	add	a,#0x0c
      00171F F8               [12] 4495 	mov	r0,a
      001720 74 09            [12] 4496 	mov	a,#0x09
      001722 26               [12] 4497 	add	a,@r0
      001723 FA               [12] 4498 	mov	r2,a
      001724 E4               [12] 4499 	clr	a
      001725 08               [12] 4500 	inc	r0
      001726 36               [12] 4501 	addc	a,@r0
      001727 FB               [12] 4502 	mov	r3,a
      001728 08               [12] 4503 	inc	r0
      001729 86 04            [24] 4504 	mov	ar4,@r0
      00172B C0 07            [24] 4505 	push	ar7
      00172D C0 06            [24] 4506 	push	ar6
      00172F C0 05            [24] 4507 	push	ar5
      001731 8A 82            [24] 4508 	mov	dpl,r2
      001733 8B 83            [24] 4509 	mov	dph,r3
      001735 8C F0            [24] 4510 	mov	b,r4
      001737 12r00r00         [24] 4511 	lcall	_stack_pop
      00173A AE 82            [24] 4512 	mov	r6,dpl
      00173C AF 83            [24] 4513 	mov	r7,dph
      00173E 15 81            [12] 4514 	dec	sp
      001740 15 81            [12] 4515 	dec	sp
      001742 15 81            [12] 4516 	dec	sp
      001744 EE               [12] 4517 	mov	a,r6
      001745 4F               [12] 4518 	orl	a,r7
      001746 70 25            [24] 4519 	jnz	00189$
      001748 7Dr38            [12] 4520 	mov	r5,#___str_8
      00174A 7Es00            [12] 4521 	mov	r6,#(___str_8 >> 8)
      00174C 7F 80            [12] 4522 	mov	r7,#0x80
                                   4523 ;	calc.c:50: return;
      00174E                       4524 00390$:
                                   4525 ;	calc.c:48: for (; *s; s++) putchar(*s);
      00174E 8D 82            [24] 4526 	mov	dpl,r5
      001750 8E 83            [24] 4527 	mov	dph,r6
      001752 8F F0            [24] 4528 	mov	b,r7
      001754 12r00r00         [24] 4529 	lcall	__gptrget
      001757 FC               [12] 4530 	mov	r4,a
      001758 70 03            [24] 4531 	jnz	01104$
      00175A 02r1Dr05         [24] 4532 	ljmp	00217$
      00175D                       4533 01104$:
      00175D 7B 00            [12] 4534 	mov	r3,#0x00
      00175F 8C 82            [24] 4535 	mov	dpl,r4
      001761 8B 83            [24] 4536 	mov	dph,r3
      001763 12r00r00         [24] 4537 	lcall	_putchar
      001766 0D               [12] 4538 	inc	r5
                                   4539 ;	calc.c:264: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      001767 BD 00 E4         [24] 4540 	cjne	r5,#0x00,00390$
      00176A 0E               [12] 4541 	inc	r6
      00176B 80 E1            [24] 4542 	sjmp	00390$
      00176D                       4543 00189$:
                                   4544 ;	calc.c:265: else if (!stack_pop(&ctx->s, &d1)) {
      00176D E5*00            [12] 4545 	mov	a,_bp
      00176F 24 13            [12] 4546 	add	a,#0x13
      001771 FF               [12] 4547 	mov	r7,a
      001772 7E 00            [12] 4548 	mov	r6,#0x00
      001774 7D 40            [12] 4549 	mov	r5,#0x40
      001776 E5*00            [12] 4550 	mov	a,_bp
      001778 24 0C            [12] 4551 	add	a,#0x0c
      00177A F8               [12] 4552 	mov	r0,a
      00177B 74 09            [12] 4553 	mov	a,#0x09
      00177D 26               [12] 4554 	add	a,@r0
      00177E FA               [12] 4555 	mov	r2,a
      00177F E4               [12] 4556 	clr	a
      001780 08               [12] 4557 	inc	r0
      001781 36               [12] 4558 	addc	a,@r0
      001782 FB               [12] 4559 	mov	r3,a
      001783 08               [12] 4560 	inc	r0
      001784 86 04            [24] 4561 	mov	ar4,@r0
      001786 C0 07            [24] 4562 	push	ar7
      001788 C0 06            [24] 4563 	push	ar6
      00178A C0 05            [24] 4564 	push	ar5
      00178C 8A 82            [24] 4565 	mov	dpl,r2
      00178E 8B 83            [24] 4566 	mov	dph,r3
      001790 8C F0            [24] 4567 	mov	b,r4
      001792 12r00r00         [24] 4568 	lcall	_stack_pop
      001795 AE 82            [24] 4569 	mov	r6,dpl
      001797 AF 83            [24] 4570 	mov	r7,dph
      001799 15 81            [12] 4571 	dec	sp
      00179B 15 81            [12] 4572 	dec	sp
      00179D 15 81            [12] 4573 	dec	sp
      00179F EE               [12] 4574 	mov	a,r6
      0017A0 4F               [12] 4575 	orl	a,r7
      0017A1 70 58            [24] 4576 	jnz	00186$
                                   4577 ;	calc.c:266: (void)stack_push(&ctx->s, d0);
      0017A3 E5*00            [12] 4578 	mov	a,_bp
      0017A5 24 0C            [12] 4579 	add	a,#0x0c
      0017A7 F8               [12] 4580 	mov	r0,a
      0017A8 74 09            [12] 4581 	mov	a,#0x09
      0017AA 26               [12] 4582 	add	a,@r0
      0017AB FD               [12] 4583 	mov	r5,a
      0017AC E4               [12] 4584 	clr	a
      0017AD 08               [12] 4585 	inc	r0
      0017AE 36               [12] 4586 	addc	a,@r0
      0017AF FE               [12] 4587 	mov	r6,a
      0017B0 08               [12] 4588 	inc	r0
      0017B1 86 07            [24] 4589 	mov	ar7,@r0
      0017B3 E5*00            [12] 4590 	mov	a,_bp
      0017B5 24 0F            [12] 4591 	add	a,#0x0f
      0017B7 F8               [12] 4592 	mov	r0,a
      0017B8 E6               [12] 4593 	mov	a,@r0
      0017B9 C0 E0            [24] 4594 	push	acc
      0017BB 08               [12] 4595 	inc	r0
      0017BC E6               [12] 4596 	mov	a,@r0
      0017BD C0 E0            [24] 4597 	push	acc
      0017BF 08               [12] 4598 	inc	r0
      0017C0 E6               [12] 4599 	mov	a,@r0
      0017C1 C0 E0            [24] 4600 	push	acc
      0017C3 08               [12] 4601 	inc	r0
      0017C4 E6               [12] 4602 	mov	a,@r0
      0017C5 C0 E0            [24] 4603 	push	acc
      0017C7 8D 82            [24] 4604 	mov	dpl,r5
      0017C9 8E 83            [24] 4605 	mov	dph,r6
      0017CB 8F F0            [24] 4606 	mov	b,r7
      0017CD 12r00r00         [24] 4607 	lcall	_stack_push
      0017D0 E5 81            [12] 4608 	mov	a,sp
      0017D2 24 FC            [12] 4609 	add	a,#0xfc
      0017D4 F5 81            [12] 4610 	mov	sp,a
                                   4611 ;	calc.c:267: printstr("\r\nstack underflow\r\n");
      0017D6 7Dr38            [12] 4612 	mov	r5,#___str_8
      0017D8 7Es00            [12] 4613 	mov	r6,#(___str_8 >> 8)
      0017DA 7F 80            [12] 4614 	mov	r7,#0x80
                                   4615 ;	calc.c:50: return;
      0017DC                       4616 00393$:
                                   4617 ;	calc.c:48: for (; *s; s++) putchar(*s);
      0017DC 8D 82            [24] 4618 	mov	dpl,r5
      0017DE 8E 83            [24] 4619 	mov	dph,r6
      0017E0 8F F0            [24] 4620 	mov	b,r7
      0017E2 12r00r00         [24] 4621 	lcall	__gptrget
      0017E5 FC               [12] 4622 	mov	r4,a
      0017E6 70 03            [24] 4623 	jnz	01107$
      0017E8 02r1Dr05         [24] 4624 	ljmp	00217$
      0017EB                       4625 01107$:
      0017EB 7B 00            [12] 4626 	mov	r3,#0x00
      0017ED 8C 82            [24] 4627 	mov	dpl,r4
      0017EF 8B 83            [24] 4628 	mov	dph,r3
      0017F1 12r00r00         [24] 4629 	lcall	_putchar
      0017F4 0D               [12] 4630 	inc	r5
                                   4631 ;	calc.c:267: printstr("\r\nstack underflow\r\n");
      0017F5 BD 00 E4         [24] 4632 	cjne	r5,#0x00,00393$
      0017F8 0E               [12] 4633 	inc	r6
      0017F9 80 E1            [24] 4634 	sjmp	00393$
      0017FB                       4635 00186$:
                                   4636 ;	calc.c:269: d1 ^= d0;
      0017FB E5*00            [12] 4637 	mov	a,_bp
      0017FD 24 13            [12] 4638 	add	a,#0x13
      0017FF F8               [12] 4639 	mov	r0,a
      001800 E5*00            [12] 4640 	mov	a,_bp
      001802 24 0F            [12] 4641 	add	a,#0x0f
      001804 F9               [12] 4642 	mov	r1,a
      001805 E7               [12] 4643 	mov	a,@r1
      001806 66               [12] 4644 	xrl	a,@r0
      001807 F6               [12] 4645 	mov	@r0,a
      001808 09               [12] 4646 	inc	r1
      001809 E7               [12] 4647 	mov	a,@r1
      00180A 08               [12] 4648 	inc	r0
      00180B 66               [12] 4649 	xrl	a,@r0
      00180C F6               [12] 4650 	mov	@r0,a
      00180D 09               [12] 4651 	inc	r1
      00180E E7               [12] 4652 	mov	a,@r1
      00180F 08               [12] 4653 	inc	r0
      001810 66               [12] 4654 	xrl	a,@r0
      001811 F6               [12] 4655 	mov	@r0,a
      001812 09               [12] 4656 	inc	r1
      001813 E7               [12] 4657 	mov	a,@r1
      001814 08               [12] 4658 	inc	r0
      001815 66               [12] 4659 	xrl	a,@r0
      001816 F6               [12] 4660 	mov	@r0,a
                                   4661 ;	calc.c:270: (void)stack_push(&ctx->s, d1);
      001817 E5*00            [12] 4662 	mov	a,_bp
      001819 24 0C            [12] 4663 	add	a,#0x0c
      00181B F8               [12] 4664 	mov	r0,a
      00181C 74 09            [12] 4665 	mov	a,#0x09
      00181E 26               [12] 4666 	add	a,@r0
      00181F FD               [12] 4667 	mov	r5,a
      001820 E4               [12] 4668 	clr	a
      001821 08               [12] 4669 	inc	r0
      001822 36               [12] 4670 	addc	a,@r0
      001823 FE               [12] 4671 	mov	r6,a
      001824 08               [12] 4672 	inc	r0
      001825 86 07            [24] 4673 	mov	ar7,@r0
      001827 E5*00            [12] 4674 	mov	a,_bp
      001829 24 13            [12] 4675 	add	a,#0x13
      00182B F8               [12] 4676 	mov	r0,a
      00182C E6               [12] 4677 	mov	a,@r0
      00182D C0 E0            [24] 4678 	push	acc
      00182F 08               [12] 4679 	inc	r0
      001830 E6               [12] 4680 	mov	a,@r0
      001831 C0 E0            [24] 4681 	push	acc
      001833 08               [12] 4682 	inc	r0
      001834 E6               [12] 4683 	mov	a,@r0
      001835 C0 E0            [24] 4684 	push	acc
      001837 08               [12] 4685 	inc	r0
      001838 E6               [12] 4686 	mov	a,@r0
      001839 C0 E0            [24] 4687 	push	acc
      00183B 8D 82            [24] 4688 	mov	dpl,r5
      00183D 8E 83            [24] 4689 	mov	dph,r6
      00183F 8F F0            [24] 4690 	mov	b,r7
      001841 12r00r00         [24] 4691 	lcall	_stack_push
      001844 E5 81            [12] 4692 	mov	a,sp
      001846 24 FC            [12] 4693 	add	a,#0xfc
      001848 F5 81            [12] 4694 	mov	sp,a
                                   4695 ;	calc.c:272: break;
      00184A 02r1Dr05         [24] 4696 	ljmp	00217$
                                   4697 ;	calc.c:273: case '>':
      00184D                       4698 00191$:
                                   4699 ;	calc.c:274: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      00184D E5*00            [12] 4700 	mov	a,_bp
      00184F 24 0F            [12] 4701 	add	a,#0x0f
      001851 FF               [12] 4702 	mov	r7,a
      001852 7E 00            [12] 4703 	mov	r6,#0x00
      001854 7D 40            [12] 4704 	mov	r5,#0x40
      001856 E5*00            [12] 4705 	mov	a,_bp
      001858 24 0C            [12] 4706 	add	a,#0x0c
      00185A F8               [12] 4707 	mov	r0,a
      00185B 74 09            [12] 4708 	mov	a,#0x09
      00185D 26               [12] 4709 	add	a,@r0
      00185E FA               [12] 4710 	mov	r2,a
      00185F E4               [12] 4711 	clr	a
      001860 08               [12] 4712 	inc	r0
      001861 36               [12] 4713 	addc	a,@r0
      001862 FB               [12] 4714 	mov	r3,a
      001863 08               [12] 4715 	inc	r0
      001864 86 04            [24] 4716 	mov	ar4,@r0
      001866 C0 07            [24] 4717 	push	ar7
      001868 C0 06            [24] 4718 	push	ar6
      00186A C0 05            [24] 4719 	push	ar5
      00186C 8A 82            [24] 4720 	mov	dpl,r2
      00186E 8B 83            [24] 4721 	mov	dph,r3
      001870 8C F0            [24] 4722 	mov	b,r4
      001872 12r00r00         [24] 4723 	lcall	_stack_pop
      001875 AE 82            [24] 4724 	mov	r6,dpl
      001877 AF 83            [24] 4725 	mov	r7,dph
      001879 15 81            [12] 4726 	dec	sp
      00187B 15 81            [12] 4727 	dec	sp
      00187D 15 81            [12] 4728 	dec	sp
      00187F EE               [12] 4729 	mov	a,r6
      001880 4F               [12] 4730 	orl	a,r7
      001881 70 25            [24] 4731 	jnz	00196$
      001883 7Dr38            [12] 4732 	mov	r5,#___str_8
      001885 7Es00            [12] 4733 	mov	r6,#(___str_8 >> 8)
      001887 7F 80            [12] 4734 	mov	r7,#0x80
                                   4735 ;	calc.c:50: return;
      001889                       4736 00396$:
                                   4737 ;	calc.c:48: for (; *s; s++) putchar(*s);
      001889 8D 82            [24] 4738 	mov	dpl,r5
      00188B 8E 83            [24] 4739 	mov	dph,r6
      00188D 8F F0            [24] 4740 	mov	b,r7
      00188F 12r00r00         [24] 4741 	lcall	__gptrget
      001892 FC               [12] 4742 	mov	r4,a
      001893 70 03            [24] 4743 	jnz	01110$
      001895 02r1Dr05         [24] 4744 	ljmp	00217$
      001898                       4745 01110$:
      001898 7B 00            [12] 4746 	mov	r3,#0x00
      00189A 8C 82            [24] 4747 	mov	dpl,r4
      00189C 8B 83            [24] 4748 	mov	dph,r3
      00189E 12r00r00         [24] 4749 	lcall	_putchar
      0018A1 0D               [12] 4750 	inc	r5
                                   4751 ;	calc.c:274: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      0018A2 BD 00 E4         [24] 4752 	cjne	r5,#0x00,00396$
      0018A5 0E               [12] 4753 	inc	r6
      0018A6 80 E1            [24] 4754 	sjmp	00396$
      0018A8                       4755 00196$:
                                   4756 ;	calc.c:275: else if (!stack_pop(&ctx->s, &d1)) {
      0018A8 E5*00            [12] 4757 	mov	a,_bp
      0018AA 24 13            [12] 4758 	add	a,#0x13
      0018AC FF               [12] 4759 	mov	r7,a
      0018AD 7E 00            [12] 4760 	mov	r6,#0x00
      0018AF 7D 40            [12] 4761 	mov	r5,#0x40
      0018B1 E5*00            [12] 4762 	mov	a,_bp
      0018B3 24 0C            [12] 4763 	add	a,#0x0c
      0018B5 F8               [12] 4764 	mov	r0,a
      0018B6 74 09            [12] 4765 	mov	a,#0x09
      0018B8 26               [12] 4766 	add	a,@r0
      0018B9 FA               [12] 4767 	mov	r2,a
      0018BA E4               [12] 4768 	clr	a
      0018BB 08               [12] 4769 	inc	r0
      0018BC 36               [12] 4770 	addc	a,@r0
      0018BD FB               [12] 4771 	mov	r3,a
      0018BE 08               [12] 4772 	inc	r0
      0018BF 86 04            [24] 4773 	mov	ar4,@r0
      0018C1 C0 07            [24] 4774 	push	ar7
      0018C3 C0 06            [24] 4775 	push	ar6
      0018C5 C0 05            [24] 4776 	push	ar5
      0018C7 8A 82            [24] 4777 	mov	dpl,r2
      0018C9 8B 83            [24] 4778 	mov	dph,r3
      0018CB 8C F0            [24] 4779 	mov	b,r4
      0018CD 12r00r00         [24] 4780 	lcall	_stack_pop
      0018D0 AE 82            [24] 4781 	mov	r6,dpl
      0018D2 AF 83            [24] 4782 	mov	r7,dph
      0018D4 15 81            [12] 4783 	dec	sp
      0018D6 15 81            [12] 4784 	dec	sp
      0018D8 15 81            [12] 4785 	dec	sp
      0018DA EE               [12] 4786 	mov	a,r6
      0018DB 4F               [12] 4787 	orl	a,r7
      0018DC 70 58            [24] 4788 	jnz	00193$
                                   4789 ;	calc.c:276: (void)stack_push(&ctx->s, d0);
      0018DE E5*00            [12] 4790 	mov	a,_bp
      0018E0 24 0C            [12] 4791 	add	a,#0x0c
      0018E2 F8               [12] 4792 	mov	r0,a
      0018E3 74 09            [12] 4793 	mov	a,#0x09
      0018E5 26               [12] 4794 	add	a,@r0
      0018E6 FD               [12] 4795 	mov	r5,a
      0018E7 E4               [12] 4796 	clr	a
      0018E8 08               [12] 4797 	inc	r0
      0018E9 36               [12] 4798 	addc	a,@r0
      0018EA FE               [12] 4799 	mov	r6,a
      0018EB 08               [12] 4800 	inc	r0
      0018EC 86 07            [24] 4801 	mov	ar7,@r0
      0018EE E5*00            [12] 4802 	mov	a,_bp
      0018F0 24 0F            [12] 4803 	add	a,#0x0f
      0018F2 F8               [12] 4804 	mov	r0,a
      0018F3 E6               [12] 4805 	mov	a,@r0
      0018F4 C0 E0            [24] 4806 	push	acc
      0018F6 08               [12] 4807 	inc	r0
      0018F7 E6               [12] 4808 	mov	a,@r0
      0018F8 C0 E0            [24] 4809 	push	acc
      0018FA 08               [12] 4810 	inc	r0
      0018FB E6               [12] 4811 	mov	a,@r0
      0018FC C0 E0            [24] 4812 	push	acc
      0018FE 08               [12] 4813 	inc	r0
      0018FF E6               [12] 4814 	mov	a,@r0
      001900 C0 E0            [24] 4815 	push	acc
      001902 8D 82            [24] 4816 	mov	dpl,r5
      001904 8E 83            [24] 4817 	mov	dph,r6
      001906 8F F0            [24] 4818 	mov	b,r7
      001908 12r00r00         [24] 4819 	lcall	_stack_push
      00190B E5 81            [12] 4820 	mov	a,sp
      00190D 24 FC            [12] 4821 	add	a,#0xfc
      00190F F5 81            [12] 4822 	mov	sp,a
                                   4823 ;	calc.c:277: printstr("\r\nstack underflow\r\n");
      001911 7Dr38            [12] 4824 	mov	r5,#___str_8
      001913 7Es00            [12] 4825 	mov	r6,#(___str_8 >> 8)
      001915 7F 80            [12] 4826 	mov	r7,#0x80
                                   4827 ;	calc.c:50: return;
      001917                       4828 00399$:
                                   4829 ;	calc.c:48: for (; *s; s++) putchar(*s);
      001917 8D 82            [24] 4830 	mov	dpl,r5
      001919 8E 83            [24] 4831 	mov	dph,r6
      00191B 8F F0            [24] 4832 	mov	b,r7
      00191D 12r00r00         [24] 4833 	lcall	__gptrget
      001920 FC               [12] 4834 	mov	r4,a
      001921 70 03            [24] 4835 	jnz	01113$
      001923 02r1Dr05         [24] 4836 	ljmp	00217$
      001926                       4837 01113$:
      001926 7B 00            [12] 4838 	mov	r3,#0x00
      001928 8C 82            [24] 4839 	mov	dpl,r4
      00192A 8B 83            [24] 4840 	mov	dph,r3
      00192C 12r00r00         [24] 4841 	lcall	_putchar
      00192F 0D               [12] 4842 	inc	r5
                                   4843 ;	calc.c:277: printstr("\r\nstack underflow\r\n");
      001930 BD 00 E4         [24] 4844 	cjne	r5,#0x00,00399$
      001933 0E               [12] 4845 	inc	r6
      001934 80 E1            [24] 4846 	sjmp	00399$
      001936                       4847 00193$:
                                   4848 ;	calc.c:279: d1 = (unsigned long)d1 >> ((unsigned long)d0 & 0x0000001flu);
      001936 E5*00            [12] 4849 	mov	a,_bp
      001938 24 13            [12] 4850 	add	a,#0x13
      00193A F8               [12] 4851 	mov	r0,a
      00193B 86 04            [24] 4852 	mov	ar4,@r0
      00193D 08               [12] 4853 	inc	r0
      00193E 86 05            [24] 4854 	mov	ar5,@r0
      001940 08               [12] 4855 	inc	r0
      001941 86 06            [24] 4856 	mov	ar6,@r0
      001943 08               [12] 4857 	inc	r0
      001944 86 07            [24] 4858 	mov	ar7,@r0
      001946 E5*00            [12] 4859 	mov	a,_bp
      001948 24 0F            [12] 4860 	add	a,#0x0f
      00194A F8               [12] 4861 	mov	r0,a
      00194B 86 03            [24] 4862 	mov	ar3,@r0
      00194D 53 03 1F         [24] 4863 	anl	ar3,#0x1f
      001950 8B F0            [24] 4864 	mov	b,r3
      001952 05 F0            [12] 4865 	inc	b
      001954 80 0D            [24] 4866 	sjmp	01116$
      001956                       4867 01115$:
      001956 C3               [12] 4868 	clr	c
      001957 EF               [12] 4869 	mov	a,r7
      001958 13               [12] 4870 	rrc	a
      001959 FF               [12] 4871 	mov	r7,a
      00195A EE               [12] 4872 	mov	a,r6
      00195B 13               [12] 4873 	rrc	a
      00195C FE               [12] 4874 	mov	r6,a
      00195D ED               [12] 4875 	mov	a,r5
      00195E 13               [12] 4876 	rrc	a
      00195F FD               [12] 4877 	mov	r5,a
      001960 EC               [12] 4878 	mov	a,r4
      001961 13               [12] 4879 	rrc	a
      001962 FC               [12] 4880 	mov	r4,a
      001963                       4881 01116$:
      001963 D5 F0 F0         [24] 4882 	djnz	b,01115$
      001966 E5*00            [12] 4883 	mov	a,_bp
      001968 24 13            [12] 4884 	add	a,#0x13
      00196A F8               [12] 4885 	mov	r0,a
      00196B A6 04            [24] 4886 	mov	@r0,ar4
      00196D 08               [12] 4887 	inc	r0
      00196E A6 05            [24] 4888 	mov	@r0,ar5
      001970 08               [12] 4889 	inc	r0
      001971 A6 06            [24] 4890 	mov	@r0,ar6
      001973 08               [12] 4891 	inc	r0
      001974 A6 07            [24] 4892 	mov	@r0,ar7
                                   4893 ;	calc.c:280: (void)stack_push(&ctx->s, d1);
      001976 E5*00            [12] 4894 	mov	a,_bp
      001978 24 0C            [12] 4895 	add	a,#0x0c
      00197A F8               [12] 4896 	mov	r0,a
      00197B 74 09            [12] 4897 	mov	a,#0x09
      00197D 26               [12] 4898 	add	a,@r0
      00197E FD               [12] 4899 	mov	r5,a
      00197F E4               [12] 4900 	clr	a
      001980 08               [12] 4901 	inc	r0
      001981 36               [12] 4902 	addc	a,@r0
      001982 FE               [12] 4903 	mov	r6,a
      001983 08               [12] 4904 	inc	r0
      001984 86 07            [24] 4905 	mov	ar7,@r0
      001986 E5*00            [12] 4906 	mov	a,_bp
      001988 24 13            [12] 4907 	add	a,#0x13
      00198A F8               [12] 4908 	mov	r0,a
      00198B E6               [12] 4909 	mov	a,@r0
      00198C C0 E0            [24] 4910 	push	acc
      00198E 08               [12] 4911 	inc	r0
      00198F E6               [12] 4912 	mov	a,@r0
      001990 C0 E0            [24] 4913 	push	acc
      001992 08               [12] 4914 	inc	r0
      001993 E6               [12] 4915 	mov	a,@r0
      001994 C0 E0            [24] 4916 	push	acc
      001996 08               [12] 4917 	inc	r0
      001997 E6               [12] 4918 	mov	a,@r0
      001998 C0 E0            [24] 4919 	push	acc
      00199A 8D 82            [24] 4920 	mov	dpl,r5
      00199C 8E 83            [24] 4921 	mov	dph,r6
      00199E 8F F0            [24] 4922 	mov	b,r7
      0019A0 12r00r00         [24] 4923 	lcall	_stack_push
      0019A3 E5 81            [12] 4924 	mov	a,sp
      0019A5 24 FC            [12] 4925 	add	a,#0xfc
      0019A7 F5 81            [12] 4926 	mov	sp,a
                                   4927 ;	calc.c:282: break;
      0019A9 02r1Dr05         [24] 4928 	ljmp	00217$
                                   4929 ;	calc.c:283: case ']':
      0019AC                       4930 00198$:
                                   4931 ;	calc.c:284: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      0019AC E5*00            [12] 4932 	mov	a,_bp
      0019AE 24 0F            [12] 4933 	add	a,#0x0f
      0019B0 FF               [12] 4934 	mov	r7,a
      0019B1 7E 00            [12] 4935 	mov	r6,#0x00
      0019B3 7D 40            [12] 4936 	mov	r5,#0x40
      0019B5 E5*00            [12] 4937 	mov	a,_bp
      0019B7 24 0C            [12] 4938 	add	a,#0x0c
      0019B9 F8               [12] 4939 	mov	r0,a
      0019BA 74 09            [12] 4940 	mov	a,#0x09
      0019BC 26               [12] 4941 	add	a,@r0
      0019BD FA               [12] 4942 	mov	r2,a
      0019BE E4               [12] 4943 	clr	a
      0019BF 08               [12] 4944 	inc	r0
      0019C0 36               [12] 4945 	addc	a,@r0
      0019C1 FB               [12] 4946 	mov	r3,a
      0019C2 08               [12] 4947 	inc	r0
      0019C3 86 04            [24] 4948 	mov	ar4,@r0
      0019C5 C0 07            [24] 4949 	push	ar7
      0019C7 C0 06            [24] 4950 	push	ar6
      0019C9 C0 05            [24] 4951 	push	ar5
      0019CB 8A 82            [24] 4952 	mov	dpl,r2
      0019CD 8B 83            [24] 4953 	mov	dph,r3
      0019CF 8C F0            [24] 4954 	mov	b,r4
      0019D1 12r00r00         [24] 4955 	lcall	_stack_pop
      0019D4 AE 82            [24] 4956 	mov	r6,dpl
      0019D6 AF 83            [24] 4957 	mov	r7,dph
      0019D8 15 81            [12] 4958 	dec	sp
      0019DA 15 81            [12] 4959 	dec	sp
      0019DC 15 81            [12] 4960 	dec	sp
      0019DE EE               [12] 4961 	mov	a,r6
      0019DF 4F               [12] 4962 	orl	a,r7
      0019E0 70 25            [24] 4963 	jnz	00203$
      0019E2 7Dr38            [12] 4964 	mov	r5,#___str_8
      0019E4 7Es00            [12] 4965 	mov	r6,#(___str_8 >> 8)
      0019E6 7F 80            [12] 4966 	mov	r7,#0x80
                                   4967 ;	calc.c:50: return;
      0019E8                       4968 00402$:
                                   4969 ;	calc.c:48: for (; *s; s++) putchar(*s);
      0019E8 8D 82            [24] 4970 	mov	dpl,r5
      0019EA 8E 83            [24] 4971 	mov	dph,r6
      0019EC 8F F0            [24] 4972 	mov	b,r7
      0019EE 12r00r00         [24] 4973 	lcall	__gptrget
      0019F1 FC               [12] 4974 	mov	r4,a
      0019F2 70 03            [24] 4975 	jnz	01118$
      0019F4 02r1Dr05         [24] 4976 	ljmp	00217$
      0019F7                       4977 01118$:
      0019F7 7B 00            [12] 4978 	mov	r3,#0x00
      0019F9 8C 82            [24] 4979 	mov	dpl,r4
      0019FB 8B 83            [24] 4980 	mov	dph,r3
      0019FD 12r00r00         [24] 4981 	lcall	_putchar
      001A00 0D               [12] 4982 	inc	r5
                                   4983 ;	calc.c:284: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      001A01 BD 00 E4         [24] 4984 	cjne	r5,#0x00,00402$
      001A04 0E               [12] 4985 	inc	r6
      001A05 80 E1            [24] 4986 	sjmp	00402$
      001A07                       4987 00203$:
                                   4988 ;	calc.c:285: else if (!stack_pop(&ctx->s, &d1)) {
      001A07 E5*00            [12] 4989 	mov	a,_bp
      001A09 24 13            [12] 4990 	add	a,#0x13
      001A0B FF               [12] 4991 	mov	r7,a
      001A0C 7E 00            [12] 4992 	mov	r6,#0x00
      001A0E 7D 40            [12] 4993 	mov	r5,#0x40
      001A10 E5*00            [12] 4994 	mov	a,_bp
      001A12 24 0C            [12] 4995 	add	a,#0x0c
      001A14 F8               [12] 4996 	mov	r0,a
      001A15 74 09            [12] 4997 	mov	a,#0x09
      001A17 26               [12] 4998 	add	a,@r0
      001A18 FA               [12] 4999 	mov	r2,a
      001A19 E4               [12] 5000 	clr	a
      001A1A 08               [12] 5001 	inc	r0
      001A1B 36               [12] 5002 	addc	a,@r0
      001A1C FB               [12] 5003 	mov	r3,a
      001A1D 08               [12] 5004 	inc	r0
      001A1E 86 04            [24] 5005 	mov	ar4,@r0
      001A20 C0 07            [24] 5006 	push	ar7
      001A22 C0 06            [24] 5007 	push	ar6
      001A24 C0 05            [24] 5008 	push	ar5
      001A26 8A 82            [24] 5009 	mov	dpl,r2
      001A28 8B 83            [24] 5010 	mov	dph,r3
      001A2A 8C F0            [24] 5011 	mov	b,r4
      001A2C 12r00r00         [24] 5012 	lcall	_stack_pop
      001A2F AE 82            [24] 5013 	mov	r6,dpl
      001A31 AF 83            [24] 5014 	mov	r7,dph
      001A33 15 81            [12] 5015 	dec	sp
      001A35 15 81            [12] 5016 	dec	sp
      001A37 15 81            [12] 5017 	dec	sp
      001A39 EE               [12] 5018 	mov	a,r6
      001A3A 4F               [12] 5019 	orl	a,r7
      001A3B 70 58            [24] 5020 	jnz	00200$
                                   5021 ;	calc.c:286: (void)stack_push(&ctx->s, d0);
      001A3D E5*00            [12] 5022 	mov	a,_bp
      001A3F 24 0C            [12] 5023 	add	a,#0x0c
      001A41 F8               [12] 5024 	mov	r0,a
      001A42 74 09            [12] 5025 	mov	a,#0x09
      001A44 26               [12] 5026 	add	a,@r0
      001A45 FD               [12] 5027 	mov	r5,a
      001A46 E4               [12] 5028 	clr	a
      001A47 08               [12] 5029 	inc	r0
      001A48 36               [12] 5030 	addc	a,@r0
      001A49 FE               [12] 5031 	mov	r6,a
      001A4A 08               [12] 5032 	inc	r0
      001A4B 86 07            [24] 5033 	mov	ar7,@r0
      001A4D E5*00            [12] 5034 	mov	a,_bp
      001A4F 24 0F            [12] 5035 	add	a,#0x0f
      001A51 F8               [12] 5036 	mov	r0,a
      001A52 E6               [12] 5037 	mov	a,@r0
      001A53 C0 E0            [24] 5038 	push	acc
      001A55 08               [12] 5039 	inc	r0
      001A56 E6               [12] 5040 	mov	a,@r0
      001A57 C0 E0            [24] 5041 	push	acc
      001A59 08               [12] 5042 	inc	r0
      001A5A E6               [12] 5043 	mov	a,@r0
      001A5B C0 E0            [24] 5044 	push	acc
      001A5D 08               [12] 5045 	inc	r0
      001A5E E6               [12] 5046 	mov	a,@r0
      001A5F C0 E0            [24] 5047 	push	acc
      001A61 8D 82            [24] 5048 	mov	dpl,r5
      001A63 8E 83            [24] 5049 	mov	dph,r6
      001A65 8F F0            [24] 5050 	mov	b,r7
      001A67 12r00r00         [24] 5051 	lcall	_stack_push
      001A6A E5 81            [12] 5052 	mov	a,sp
      001A6C 24 FC            [12] 5053 	add	a,#0xfc
      001A6E F5 81            [12] 5054 	mov	sp,a
                                   5055 ;	calc.c:287: printstr("\r\nstack underflow\r\n");
      001A70 7Dr38            [12] 5056 	mov	r5,#___str_8
      001A72 7Es00            [12] 5057 	mov	r6,#(___str_8 >> 8)
      001A74 7F 80            [12] 5058 	mov	r7,#0x80
                                   5059 ;	calc.c:50: return;
      001A76                       5060 00405$:
                                   5061 ;	calc.c:48: for (; *s; s++) putchar(*s);
      001A76 8D 82            [24] 5062 	mov	dpl,r5
      001A78 8E 83            [24] 5063 	mov	dph,r6
      001A7A 8F F0            [24] 5064 	mov	b,r7
      001A7C 12r00r00         [24] 5065 	lcall	__gptrget
      001A7F FC               [12] 5066 	mov	r4,a
      001A80 70 03            [24] 5067 	jnz	01121$
      001A82 02r1Dr05         [24] 5068 	ljmp	00217$
      001A85                       5069 01121$:
      001A85 7B 00            [12] 5070 	mov	r3,#0x00
      001A87 8C 82            [24] 5071 	mov	dpl,r4
      001A89 8B 83            [24] 5072 	mov	dph,r3
      001A8B 12r00r00         [24] 5073 	lcall	_putchar
      001A8E 0D               [12] 5074 	inc	r5
                                   5075 ;	calc.c:287: printstr("\r\nstack underflow\r\n");
      001A8F BD 00 E4         [24] 5076 	cjne	r5,#0x00,00405$
      001A92 0E               [12] 5077 	inc	r6
      001A93 80 E1            [24] 5078 	sjmp	00405$
      001A95                       5079 00200$:
                                   5080 ;	calc.c:289: d1 >>= ((unsigned long)d0 & 0x0000001flu);
      001A95 E5*00            [12] 5081 	mov	a,_bp
      001A97 24 0F            [12] 5082 	add	a,#0x0f
      001A99 F8               [12] 5083 	mov	r0,a
      001A9A 86 07            [24] 5084 	mov	ar7,@r0
      001A9C 53 07 1F         [24] 5085 	anl	ar7,#0x1f
      001A9F 8F F0            [24] 5086 	mov	b,r7
      001AA1 05 F0            [12] 5087 	inc	b
      001AA3 E5*00            [12] 5088 	mov	a,_bp
      001AA5 24 13            [12] 5089 	add	a,#0x13
      001AA7 F8               [12] 5090 	mov	r0,a
      001AA8 08               [12] 5091 	inc	r0
      001AA9 08               [12] 5092 	inc	r0
      001AAA 08               [12] 5093 	inc	r0
      001AAB E6               [12] 5094 	mov	a,@r0
      001AAC 33               [12] 5095 	rlc	a
      001AAD 92 D2            [24] 5096 	mov	ov,c
      001AAF 18               [12] 5097 	dec	r0
      001AB0 18               [12] 5098 	dec	r0
      001AB1 18               [12] 5099 	dec	r0
      001AB2 80 14            [24] 5100 	sjmp	01124$
      001AB4                       5101 01123$:
      001AB4 A2 D2            [12] 5102 	mov	c,ov
      001AB6 08               [12] 5103 	inc	r0
      001AB7 08               [12] 5104 	inc	r0
      001AB8 08               [12] 5105 	inc	r0
      001AB9 E6               [12] 5106 	mov	a,@r0
      001ABA 13               [12] 5107 	rrc	a
      001ABB F6               [12] 5108 	mov	@r0,a
      001ABC 18               [12] 5109 	dec	r0
      001ABD E6               [12] 5110 	mov	a,@r0
      001ABE 13               [12] 5111 	rrc	a
      001ABF F6               [12] 5112 	mov	@r0,a
      001AC0 18               [12] 5113 	dec	r0
      001AC1 E6               [12] 5114 	mov	a,@r0
      001AC2 13               [12] 5115 	rrc	a
      001AC3 F6               [12] 5116 	mov	@r0,a
      001AC4 18               [12] 5117 	dec	r0
      001AC5 E6               [12] 5118 	mov	a,@r0
      001AC6 13               [12] 5119 	rrc	a
      001AC7 F6               [12] 5120 	mov	@r0,a
      001AC8                       5121 01124$:
      001AC8 D5 F0 E9         [24] 5122 	djnz	b,01123$
                                   5123 ;	calc.c:290: (void)stack_push(&ctx->s, d1);
      001ACB E5*00            [12] 5124 	mov	a,_bp
      001ACD 24 0C            [12] 5125 	add	a,#0x0c
      001ACF F8               [12] 5126 	mov	r0,a
      001AD0 74 09            [12] 5127 	mov	a,#0x09
      001AD2 26               [12] 5128 	add	a,@r0
      001AD3 FD               [12] 5129 	mov	r5,a
      001AD4 E4               [12] 5130 	clr	a
      001AD5 08               [12] 5131 	inc	r0
      001AD6 36               [12] 5132 	addc	a,@r0
      001AD7 FE               [12] 5133 	mov	r6,a
      001AD8 08               [12] 5134 	inc	r0
      001AD9 86 07            [24] 5135 	mov	ar7,@r0
      001ADB E5*00            [12] 5136 	mov	a,_bp
      001ADD 24 13            [12] 5137 	add	a,#0x13
      001ADF F8               [12] 5138 	mov	r0,a
      001AE0 E6               [12] 5139 	mov	a,@r0
      001AE1 C0 E0            [24] 5140 	push	acc
      001AE3 08               [12] 5141 	inc	r0
      001AE4 E6               [12] 5142 	mov	a,@r0
      001AE5 C0 E0            [24] 5143 	push	acc
      001AE7 08               [12] 5144 	inc	r0
      001AE8 E6               [12] 5145 	mov	a,@r0
      001AE9 C0 E0            [24] 5146 	push	acc
      001AEB 08               [12] 5147 	inc	r0
      001AEC E6               [12] 5148 	mov	a,@r0
      001AED C0 E0            [24] 5149 	push	acc
      001AEF 8D 82            [24] 5150 	mov	dpl,r5
      001AF1 8E 83            [24] 5151 	mov	dph,r6
      001AF3 8F F0            [24] 5152 	mov	b,r7
      001AF5 12r00r00         [24] 5153 	lcall	_stack_push
      001AF8 E5 81            [12] 5154 	mov	a,sp
      001AFA 24 FC            [12] 5155 	add	a,#0xfc
      001AFC F5 81            [12] 5156 	mov	sp,a
                                   5157 ;	calc.c:292: break;
      001AFE 02r1Dr05         [24] 5158 	ljmp	00217$
                                   5159 ;	calc.c:293: case '<':
      001B01                       5160 00205$:
                                   5161 ;	calc.c:294: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      001B01 E5*00            [12] 5162 	mov	a,_bp
      001B03 24 0F            [12] 5163 	add	a,#0x0f
      001B05 FF               [12] 5164 	mov	r7,a
      001B06 7E 00            [12] 5165 	mov	r6,#0x00
      001B08 7D 40            [12] 5166 	mov	r5,#0x40
      001B0A E5*00            [12] 5167 	mov	a,_bp
      001B0C 24 0C            [12] 5168 	add	a,#0x0c
      001B0E F8               [12] 5169 	mov	r0,a
      001B0F 74 09            [12] 5170 	mov	a,#0x09
      001B11 26               [12] 5171 	add	a,@r0
      001B12 FA               [12] 5172 	mov	r2,a
      001B13 E4               [12] 5173 	clr	a
      001B14 08               [12] 5174 	inc	r0
      001B15 36               [12] 5175 	addc	a,@r0
      001B16 FB               [12] 5176 	mov	r3,a
      001B17 08               [12] 5177 	inc	r0
      001B18 86 04            [24] 5178 	mov	ar4,@r0
      001B1A C0 07            [24] 5179 	push	ar7
      001B1C C0 06            [24] 5180 	push	ar6
      001B1E C0 05            [24] 5181 	push	ar5
      001B20 8A 82            [24] 5182 	mov	dpl,r2
      001B22 8B 83            [24] 5183 	mov	dph,r3
      001B24 8C F0            [24] 5184 	mov	b,r4
      001B26 12r00r00         [24] 5185 	lcall	_stack_pop
      001B29 AE 82            [24] 5186 	mov	r6,dpl
      001B2B AF 83            [24] 5187 	mov	r7,dph
      001B2D 15 81            [12] 5188 	dec	sp
      001B2F 15 81            [12] 5189 	dec	sp
      001B31 15 81            [12] 5190 	dec	sp
      001B33 EE               [12] 5191 	mov	a,r6
      001B34 4F               [12] 5192 	orl	a,r7
      001B35 70 25            [24] 5193 	jnz	00210$
      001B37 7Dr38            [12] 5194 	mov	r5,#___str_8
      001B39 7Es00            [12] 5195 	mov	r6,#(___str_8 >> 8)
      001B3B 7F 80            [12] 5196 	mov	r7,#0x80
                                   5197 ;	calc.c:50: return;
      001B3D                       5198 00408$:
                                   5199 ;	calc.c:48: for (; *s; s++) putchar(*s);
      001B3D 8D 82            [24] 5200 	mov	dpl,r5
      001B3F 8E 83            [24] 5201 	mov	dph,r6
      001B41 8F F0            [24] 5202 	mov	b,r7
      001B43 12r00r00         [24] 5203 	lcall	__gptrget
      001B46 FC               [12] 5204 	mov	r4,a
      001B47 70 03            [24] 5205 	jnz	01126$
      001B49 02r1Dr05         [24] 5206 	ljmp	00217$
      001B4C                       5207 01126$:
      001B4C 7B 00            [12] 5208 	mov	r3,#0x00
      001B4E 8C 82            [24] 5209 	mov	dpl,r4
      001B50 8B 83            [24] 5210 	mov	dph,r3
      001B52 12r00r00         [24] 5211 	lcall	_putchar
      001B55 0D               [12] 5212 	inc	r5
                                   5213 ;	calc.c:294: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      001B56 BD 00 E4         [24] 5214 	cjne	r5,#0x00,00408$
      001B59 0E               [12] 5215 	inc	r6
      001B5A 80 E1            [24] 5216 	sjmp	00408$
      001B5C                       5217 00210$:
                                   5218 ;	calc.c:295: else if (!stack_pop(&ctx->s, &d1)) {
      001B5C E5*00            [12] 5219 	mov	a,_bp
      001B5E 24 13            [12] 5220 	add	a,#0x13
      001B60 FF               [12] 5221 	mov	r7,a
      001B61 7E 00            [12] 5222 	mov	r6,#0x00
      001B63 7D 40            [12] 5223 	mov	r5,#0x40
      001B65 E5*00            [12] 5224 	mov	a,_bp
      001B67 24 0C            [12] 5225 	add	a,#0x0c
      001B69 F8               [12] 5226 	mov	r0,a
      001B6A 74 09            [12] 5227 	mov	a,#0x09
      001B6C 26               [12] 5228 	add	a,@r0
      001B6D FA               [12] 5229 	mov	r2,a
      001B6E E4               [12] 5230 	clr	a
      001B6F 08               [12] 5231 	inc	r0
      001B70 36               [12] 5232 	addc	a,@r0
      001B71 FB               [12] 5233 	mov	r3,a
      001B72 08               [12] 5234 	inc	r0
      001B73 86 04            [24] 5235 	mov	ar4,@r0
      001B75 C0 07            [24] 5236 	push	ar7
      001B77 C0 06            [24] 5237 	push	ar6
      001B79 C0 05            [24] 5238 	push	ar5
      001B7B 8A 82            [24] 5239 	mov	dpl,r2
      001B7D 8B 83            [24] 5240 	mov	dph,r3
      001B7F 8C F0            [24] 5241 	mov	b,r4
      001B81 12r00r00         [24] 5242 	lcall	_stack_pop
      001B84 AE 82            [24] 5243 	mov	r6,dpl
      001B86 AF 83            [24] 5244 	mov	r7,dph
      001B88 15 81            [12] 5245 	dec	sp
      001B8A 15 81            [12] 5246 	dec	sp
      001B8C 15 81            [12] 5247 	dec	sp
      001B8E EE               [12] 5248 	mov	a,r6
      001B8F 4F               [12] 5249 	orl	a,r7
      001B90 70 58            [24] 5250 	jnz	00207$
                                   5251 ;	calc.c:296: (void)stack_push(&ctx->s, d0);
      001B92 E5*00            [12] 5252 	mov	a,_bp
      001B94 24 0C            [12] 5253 	add	a,#0x0c
      001B96 F8               [12] 5254 	mov	r0,a
      001B97 74 09            [12] 5255 	mov	a,#0x09
      001B99 26               [12] 5256 	add	a,@r0
      001B9A FD               [12] 5257 	mov	r5,a
      001B9B E4               [12] 5258 	clr	a
      001B9C 08               [12] 5259 	inc	r0
      001B9D 36               [12] 5260 	addc	a,@r0
      001B9E FE               [12] 5261 	mov	r6,a
      001B9F 08               [12] 5262 	inc	r0
      001BA0 86 07            [24] 5263 	mov	ar7,@r0
      001BA2 E5*00            [12] 5264 	mov	a,_bp
      001BA4 24 0F            [12] 5265 	add	a,#0x0f
      001BA6 F8               [12] 5266 	mov	r0,a
      001BA7 E6               [12] 5267 	mov	a,@r0
      001BA8 C0 E0            [24] 5268 	push	acc
      001BAA 08               [12] 5269 	inc	r0
      001BAB E6               [12] 5270 	mov	a,@r0
      001BAC C0 E0            [24] 5271 	push	acc
      001BAE 08               [12] 5272 	inc	r0
      001BAF E6               [12] 5273 	mov	a,@r0
      001BB0 C0 E0            [24] 5274 	push	acc
      001BB2 08               [12] 5275 	inc	r0
      001BB3 E6               [12] 5276 	mov	a,@r0
      001BB4 C0 E0            [24] 5277 	push	acc
      001BB6 8D 82            [24] 5278 	mov	dpl,r5
      001BB8 8E 83            [24] 5279 	mov	dph,r6
      001BBA 8F F0            [24] 5280 	mov	b,r7
      001BBC 12r00r00         [24] 5281 	lcall	_stack_push
      001BBF E5 81            [12] 5282 	mov	a,sp
      001BC1 24 FC            [12] 5283 	add	a,#0xfc
      001BC3 F5 81            [12] 5284 	mov	sp,a
                                   5285 ;	calc.c:297: printstr("\r\nstack underflow\r\n");
      001BC5 7Dr38            [12] 5286 	mov	r5,#___str_8
      001BC7 7Es00            [12] 5287 	mov	r6,#(___str_8 >> 8)
      001BC9 7F 80            [12] 5288 	mov	r7,#0x80
                                   5289 ;	calc.c:50: return;
      001BCB                       5290 00411$:
                                   5291 ;	calc.c:48: for (; *s; s++) putchar(*s);
      001BCB 8D 82            [24] 5292 	mov	dpl,r5
      001BCD 8E 83            [24] 5293 	mov	dph,r6
      001BCF 8F F0            [24] 5294 	mov	b,r7
      001BD1 12r00r00         [24] 5295 	lcall	__gptrget
      001BD4 FC               [12] 5296 	mov	r4,a
      001BD5 70 03            [24] 5297 	jnz	01129$
      001BD7 02r1Dr05         [24] 5298 	ljmp	00217$
      001BDA                       5299 01129$:
      001BDA 7B 00            [12] 5300 	mov	r3,#0x00
      001BDC 8C 82            [24] 5301 	mov	dpl,r4
      001BDE 8B 83            [24] 5302 	mov	dph,r3
      001BE0 12r00r00         [24] 5303 	lcall	_putchar
      001BE3 0D               [12] 5304 	inc	r5
                                   5305 ;	calc.c:297: printstr("\r\nstack underflow\r\n");
      001BE4 BD 00 E4         [24] 5306 	cjne	r5,#0x00,00411$
      001BE7 0E               [12] 5307 	inc	r6
      001BE8 80 E1            [24] 5308 	sjmp	00411$
      001BEA                       5309 00207$:
                                   5310 ;	calc.c:299: d1 <<= ((unsigned long)d0 & 0x0000001flu);
      001BEA E5*00            [12] 5311 	mov	a,_bp
      001BEC 24 0F            [12] 5312 	add	a,#0x0f
      001BEE F8               [12] 5313 	mov	r0,a
      001BEF 86 07            [24] 5314 	mov	ar7,@r0
      001BF1 53 07 1F         [24] 5315 	anl	ar7,#0x1f
      001BF4 E5*00            [12] 5316 	mov	a,_bp
      001BF6 24 13            [12] 5317 	add	a,#0x13
      001BF8 F8               [12] 5318 	mov	r0,a
      001BF9 86 03            [24] 5319 	mov	ar3,@r0
      001BFB 08               [12] 5320 	inc	r0
      001BFC 86 04            [24] 5321 	mov	ar4,@r0
      001BFE 08               [12] 5322 	inc	r0
      001BFF 86 05            [24] 5323 	mov	ar5,@r0
      001C01 08               [12] 5324 	inc	r0
      001C02 86 06            [24] 5325 	mov	ar6,@r0
      001C04 8F F0            [24] 5326 	mov	b,r7
      001C06 05 F0            [12] 5327 	inc	b
      001C08 80 0C            [24] 5328 	sjmp	01132$
      001C0A                       5329 01131$:
      001C0A EB               [12] 5330 	mov	a,r3
      001C0B 2B               [12] 5331 	add	a,r3
      001C0C FB               [12] 5332 	mov	r3,a
      001C0D EC               [12] 5333 	mov	a,r4
      001C0E 33               [12] 5334 	rlc	a
      001C0F FC               [12] 5335 	mov	r4,a
      001C10 ED               [12] 5336 	mov	a,r5
      001C11 33               [12] 5337 	rlc	a
      001C12 FD               [12] 5338 	mov	r5,a
      001C13 EE               [12] 5339 	mov	a,r6
      001C14 33               [12] 5340 	rlc	a
      001C15 FE               [12] 5341 	mov	r6,a
      001C16                       5342 01132$:
      001C16 D5 F0 F1         [24] 5343 	djnz	b,01131$
      001C19 E5*00            [12] 5344 	mov	a,_bp
      001C1B 24 13            [12] 5345 	add	a,#0x13
      001C1D F8               [12] 5346 	mov	r0,a
      001C1E A6 03            [24] 5347 	mov	@r0,ar3
      001C20 08               [12] 5348 	inc	r0
      001C21 A6 04            [24] 5349 	mov	@r0,ar4
      001C23 08               [12] 5350 	inc	r0
      001C24 A6 05            [24] 5351 	mov	@r0,ar5
      001C26 08               [12] 5352 	inc	r0
      001C27 A6 06            [24] 5353 	mov	@r0,ar6
                                   5354 ;	calc.c:300: (void)stack_push(&ctx->s, d1);
      001C29 E5*00            [12] 5355 	mov	a,_bp
      001C2B 24 0C            [12] 5356 	add	a,#0x0c
      001C2D F8               [12] 5357 	mov	r0,a
      001C2E 74 09            [12] 5358 	mov	a,#0x09
      001C30 26               [12] 5359 	add	a,@r0
      001C31 FD               [12] 5360 	mov	r5,a
      001C32 E4               [12] 5361 	clr	a
      001C33 08               [12] 5362 	inc	r0
      001C34 36               [12] 5363 	addc	a,@r0
      001C35 FE               [12] 5364 	mov	r6,a
      001C36 08               [12] 5365 	inc	r0
      001C37 86 07            [24] 5366 	mov	ar7,@r0
      001C39 E5*00            [12] 5367 	mov	a,_bp
      001C3B 24 13            [12] 5368 	add	a,#0x13
      001C3D F8               [12] 5369 	mov	r0,a
      001C3E E6               [12] 5370 	mov	a,@r0
      001C3F C0 E0            [24] 5371 	push	acc
      001C41 08               [12] 5372 	inc	r0
      001C42 E6               [12] 5373 	mov	a,@r0
      001C43 C0 E0            [24] 5374 	push	acc
      001C45 08               [12] 5375 	inc	r0
      001C46 E6               [12] 5376 	mov	a,@r0
      001C47 C0 E0            [24] 5377 	push	acc
      001C49 08               [12] 5378 	inc	r0
      001C4A E6               [12] 5379 	mov	a,@r0
      001C4B C0 E0            [24] 5380 	push	acc
      001C4D 8D 82            [24] 5381 	mov	dpl,r5
      001C4F 8E 83            [24] 5382 	mov	dph,r6
      001C51 8F F0            [24] 5383 	mov	b,r7
      001C53 12r00r00         [24] 5384 	lcall	_stack_push
      001C56 E5 81            [12] 5385 	mov	a,sp
      001C58 24 FC            [12] 5386 	add	a,#0xfc
      001C5A F5 81            [12] 5387 	mov	sp,a
                                   5388 ;	calc.c:302: break;
      001C5C 02r1Dr05         [24] 5389 	ljmp	00217$
                                   5390 ;	calc.c:303: case '~':
      001C5F                       5391 00212$:
                                   5392 ;	calc.c:304: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      001C5F E5*00            [12] 5393 	mov	a,_bp
      001C61 24 0F            [12] 5394 	add	a,#0x0f
      001C63 FF               [12] 5395 	mov	r7,a
      001C64 7E 00            [12] 5396 	mov	r6,#0x00
      001C66 7D 40            [12] 5397 	mov	r5,#0x40
      001C68 E5*00            [12] 5398 	mov	a,_bp
      001C6A 24 0C            [12] 5399 	add	a,#0x0c
      001C6C F8               [12] 5400 	mov	r0,a
      001C6D 74 09            [12] 5401 	mov	a,#0x09
      001C6F 26               [12] 5402 	add	a,@r0
      001C70 FA               [12] 5403 	mov	r2,a
      001C71 E4               [12] 5404 	clr	a
      001C72 08               [12] 5405 	inc	r0
      001C73 36               [12] 5406 	addc	a,@r0
      001C74 FB               [12] 5407 	mov	r3,a
      001C75 08               [12] 5408 	inc	r0
      001C76 86 04            [24] 5409 	mov	ar4,@r0
      001C78 C0 07            [24] 5410 	push	ar7
      001C7A C0 06            [24] 5411 	push	ar6
      001C7C C0 05            [24] 5412 	push	ar5
      001C7E 8A 82            [24] 5413 	mov	dpl,r2
      001C80 8B 83            [24] 5414 	mov	dph,r3
      001C82 8C F0            [24] 5415 	mov	b,r4
      001C84 12r00r00         [24] 5416 	lcall	_stack_pop
      001C87 AE 82            [24] 5417 	mov	r6,dpl
      001C89 AF 83            [24] 5418 	mov	r7,dph
      001C8B 15 81            [12] 5419 	dec	sp
      001C8D 15 81            [12] 5420 	dec	sp
      001C8F 15 81            [12] 5421 	dec	sp
      001C91 EE               [12] 5422 	mov	a,r6
      001C92 4F               [12] 5423 	orl	a,r7
      001C93 70 22            [24] 5424 	jnz	00214$
      001C95 7Dr38            [12] 5425 	mov	r5,#___str_8
      001C97 7Es00            [12] 5426 	mov	r6,#(___str_8 >> 8)
      001C99 7F 80            [12] 5427 	mov	r7,#0x80
                                   5428 ;	calc.c:50: return;
      001C9B                       5429 00414$:
                                   5430 ;	calc.c:48: for (; *s; s++) putchar(*s);
      001C9B 8D 82            [24] 5431 	mov	dpl,r5
      001C9D 8E 83            [24] 5432 	mov	dph,r6
      001C9F 8F F0            [24] 5433 	mov	b,r7
      001CA1 12r00r00         [24] 5434 	lcall	__gptrget
      001CA4 FC               [12] 5435 	mov	r4,a
      001CA5 60 5E            [24] 5436 	jz	00217$
      001CA7 7B 00            [12] 5437 	mov	r3,#0x00
      001CA9 8C 82            [24] 5438 	mov	dpl,r4
      001CAB 8B 83            [24] 5439 	mov	dph,r3
      001CAD 12r00r00         [24] 5440 	lcall	_putchar
      001CB0 0D               [12] 5441 	inc	r5
                                   5442 ;	calc.c:304: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      001CB1 BD 00 E7         [24] 5443 	cjne	r5,#0x00,00414$
      001CB4 0E               [12] 5444 	inc	r6
      001CB5 80 E4            [24] 5445 	sjmp	00414$
      001CB7                       5446 00214$:
                                   5447 ;	calc.c:306: d0 = ~d0;
      001CB7 E5*00            [12] 5448 	mov	a,_bp
      001CB9 24 0F            [12] 5449 	add	a,#0x0f
      001CBB F8               [12] 5450 	mov	r0,a
      001CBC E6               [12] 5451 	mov	a,@r0
      001CBD F4               [12] 5452 	cpl	a
      001CBE F6               [12] 5453 	mov	@r0,a
      001CBF 08               [12] 5454 	inc	r0
      001CC0 E6               [12] 5455 	mov	a,@r0
      001CC1 F4               [12] 5456 	cpl	a
      001CC2 F6               [12] 5457 	mov	@r0,a
      001CC3 08               [12] 5458 	inc	r0
      001CC4 E6               [12] 5459 	mov	a,@r0
      001CC5 F4               [12] 5460 	cpl	a
      001CC6 F6               [12] 5461 	mov	@r0,a
      001CC7 08               [12] 5462 	inc	r0
      001CC8 E6               [12] 5463 	mov	a,@r0
      001CC9 F4               [12] 5464 	cpl	a
      001CCA F6               [12] 5465 	mov	@r0,a
                                   5466 ;	calc.c:307: (void)stack_push(&ctx->s, d0);
      001CCB E5*00            [12] 5467 	mov	a,_bp
      001CCD 24 0C            [12] 5468 	add	a,#0x0c
      001CCF F8               [12] 5469 	mov	r0,a
      001CD0 74 09            [12] 5470 	mov	a,#0x09
      001CD2 26               [12] 5471 	add	a,@r0
      001CD3 FD               [12] 5472 	mov	r5,a
      001CD4 E4               [12] 5473 	clr	a
      001CD5 08               [12] 5474 	inc	r0
      001CD6 36               [12] 5475 	addc	a,@r0
      001CD7 FE               [12] 5476 	mov	r6,a
      001CD8 08               [12] 5477 	inc	r0
      001CD9 86 07            [24] 5478 	mov	ar7,@r0
      001CDB E5*00            [12] 5479 	mov	a,_bp
      001CDD 24 0F            [12] 5480 	add	a,#0x0f
      001CDF F8               [12] 5481 	mov	r0,a
      001CE0 E6               [12] 5482 	mov	a,@r0
      001CE1 C0 E0            [24] 5483 	push	acc
      001CE3 08               [12] 5484 	inc	r0
      001CE4 E6               [12] 5485 	mov	a,@r0
      001CE5 C0 E0            [24] 5486 	push	acc
      001CE7 08               [12] 5487 	inc	r0
      001CE8 E6               [12] 5488 	mov	a,@r0
      001CE9 C0 E0            [24] 5489 	push	acc
      001CEB 08               [12] 5490 	inc	r0
      001CEC E6               [12] 5491 	mov	a,@r0
      001CED C0 E0            [24] 5492 	push	acc
      001CEF 8D 82            [24] 5493 	mov	dpl,r5
      001CF1 8E 83            [24] 5494 	mov	dph,r6
      001CF3 8F F0            [24] 5495 	mov	b,r7
      001CF5 12r00r00         [24] 5496 	lcall	_stack_push
      001CF8 E5 81            [12] 5497 	mov	a,sp
      001CFA 24 FC            [12] 5498 	add	a,#0xfc
      001CFC F5 81            [12] 5499 	mov	sp,a
                                   5500 ;	calc.c:309: break;
                                   5501 ;	calc.c:310: default:
      001CFE 80 05            [24] 5502 	sjmp	00217$
      001D00                       5503 00216$:
                                   5504 ;	calc.c:311: return UNDEF;
      001D00 90 80 00         [24] 5505 	mov	dptr,#0x8000
                                   5506 ;	calc.c:312: }
      001D03 80 03            [24] 5507 	sjmp	00416$
      001D05                       5508 00217$:
                                   5509 ;	calc.c:314: return 1;
      001D05 90 00 01         [24] 5510 	mov	dptr,#0x0001
      001D08                       5511 00416$:
                                   5512 ;	calc.c:315: }
      001D08 85*00 81         [24] 5513 	mov	sp,_bp
      001D0B D0*00            [24] 5514 	pop	_bp
      001D0D 22               [24] 5515 	ret
                                   5516 ;------------------------------------------------------------
                                   5517 ;Allocation info for local variables in function 'push_acc'
                                   5518 ;------------------------------------------------------------
                                   5519 ;delta                     Allocated to stack - _bp -5
                                   5520 ;_ctx                      Allocated to stack - _bp +1
                                   5521 ;ctx                       Allocated to registers r2 r3 r4 
                                   5522 ;__1310720097              Allocated to registers 
                                   5523 ;s                         Allocated to registers r5 r6 r7 
                                   5524 ;sloc0                     Allocated to stack - _bp +4
                                   5525 ;------------------------------------------------------------
                                   5526 ;	calc.c:317: static int push_acc(void *_ctx, delta_t *delta) __reentrant {
                                   5527 ;	-----------------------------------------
                                   5528 ;	 function push_acc
                                   5529 ;	-----------------------------------------
      001D0E                       5530 _push_acc:
      001D0E C0*00            [24] 5531 	push	_bp
      001D10 85 81*00         [24] 5532 	mov	_bp,sp
      001D13 C0 82            [24] 5533 	push	dpl
      001D15 C0 83            [24] 5534 	push	dph
      001D17 C0 F0            [24] 5535 	push	b
      001D19 E5 81            [12] 5536 	mov	a,sp
      001D1B 24 04            [12] 5537 	add	a,#0x04
      001D1D F5 81            [12] 5538 	mov	sp,a
                                   5539 ;	calc.c:318: struct ctx *ctx = (struct ctx *)_ctx;
      001D1F A8*00            [24] 5540 	mov	r0,_bp
      001D21 08               [12] 5541 	inc	r0
      001D22 86 02            [24] 5542 	mov	ar2,@r0
      001D24 08               [12] 5543 	inc	r0
      001D25 86 03            [24] 5544 	mov	ar3,@r0
      001D27 08               [12] 5545 	inc	r0
      001D28 86 04            [24] 5546 	mov	ar4,@r0
                                   5547 ;	calc.c:322: ctx->acc_valid = 0;
      001D2A 74 06            [12] 5548 	mov	a,#0x06
      001D2C 2A               [12] 5549 	add	a,r2
      001D2D FD               [12] 5550 	mov	r5,a
      001D2E E4               [12] 5551 	clr	a
      001D2F 3B               [12] 5552 	addc	a,r3
      001D30 FE               [12] 5553 	mov	r6,a
      001D31 8C 07            [24] 5554 	mov	ar7,r4
      001D33 8D 82            [24] 5555 	mov	dpl,r5
      001D35 8E 83            [24] 5556 	mov	dph,r6
      001D37 8F F0            [24] 5557 	mov	b,r7
      001D39 E4               [12] 5558 	clr	a
      001D3A 12r00r00         [24] 5559 	lcall	__gptrput
                                   5560 ;	calc.c:323: if (!stack_push(&ctx->s, ctx->acc)) printstr("\r\nstack overflow\r\n");
      001D3D 74 02            [12] 5561 	mov	a,#0x02
      001D3F 2A               [12] 5562 	add	a,r2
      001D40 FF               [12] 5563 	mov	r7,a
      001D41 E4               [12] 5564 	clr	a
      001D42 3B               [12] 5565 	addc	a,r3
      001D43 FD               [12] 5566 	mov	r5,a
      001D44 8C 06            [24] 5567 	mov	ar6,r4
      001D46 8F 82            [24] 5568 	mov	dpl,r7
      001D48 8D 83            [24] 5569 	mov	dph,r5
      001D4A 8E F0            [24] 5570 	mov	b,r6
      001D4C E5*00            [12] 5571 	mov	a,_bp
      001D4E 24 04            [12] 5572 	add	a,#0x04
      001D50 F8               [12] 5573 	mov	r0,a
      001D51 12r00r00         [24] 5574 	lcall	__gptrget
      001D54 F6               [12] 5575 	mov	@r0,a
      001D55 A3               [24] 5576 	inc	dptr
      001D56 12r00r00         [24] 5577 	lcall	__gptrget
      001D59 08               [12] 5578 	inc	r0
      001D5A F6               [12] 5579 	mov	@r0,a
      001D5B A3               [24] 5580 	inc	dptr
      001D5C 12r00r00         [24] 5581 	lcall	__gptrget
      001D5F 08               [12] 5582 	inc	r0
      001D60 F6               [12] 5583 	mov	@r0,a
      001D61 A3               [24] 5584 	inc	dptr
      001D62 12r00r00         [24] 5585 	lcall	__gptrget
      001D65 08               [12] 5586 	inc	r0
      001D66 F6               [12] 5587 	mov	@r0,a
      001D67 74 09            [12] 5588 	mov	a,#0x09
      001D69 2A               [12] 5589 	add	a,r2
      001D6A FA               [12] 5590 	mov	r2,a
      001D6B E4               [12] 5591 	clr	a
      001D6C 3B               [12] 5592 	addc	a,r3
      001D6D FB               [12] 5593 	mov	r3,a
      001D6E 8C 07            [24] 5594 	mov	ar7,r4
      001D70 E5*00            [12] 5595 	mov	a,_bp
      001D72 24 04            [12] 5596 	add	a,#0x04
      001D74 F8               [12] 5597 	mov	r0,a
      001D75 E6               [12] 5598 	mov	a,@r0
      001D76 C0 E0            [24] 5599 	push	acc
      001D78 08               [12] 5600 	inc	r0
      001D79 E6               [12] 5601 	mov	a,@r0
      001D7A C0 E0            [24] 5602 	push	acc
      001D7C 08               [12] 5603 	inc	r0
      001D7D E6               [12] 5604 	mov	a,@r0
      001D7E C0 E0            [24] 5605 	push	acc
      001D80 08               [12] 5606 	inc	r0
      001D81 E6               [12] 5607 	mov	a,@r0
      001D82 C0 E0            [24] 5608 	push	acc
      001D84 8A 82            [24] 5609 	mov	dpl,r2
      001D86 8B 83            [24] 5610 	mov	dph,r3
      001D88 8F F0            [24] 5611 	mov	b,r7
      001D8A 12r00r00         [24] 5612 	lcall	_stack_push
      001D8D AE 82            [24] 5613 	mov	r6,dpl
      001D8F AF 83            [24] 5614 	mov	r7,dph
      001D91 E5 81            [12] 5615 	mov	a,sp
      001D93 24 FC            [12] 5616 	add	a,#0xfc
      001D95 F5 81            [12] 5617 	mov	sp,a
      001D97 EE               [12] 5618 	mov	a,r6
      001D98 4F               [12] 5619 	orl	a,r7
      001D99 70 22            [24] 5620 	jnz	00102$
      001D9B 7Dr61            [12] 5621 	mov	r5,#___str_10
      001D9D 7Es00            [12] 5622 	mov	r6,#(___str_10 >> 8)
      001D9F 7F 80            [12] 5623 	mov	r7,#0x80
                                   5624 ;	calc.c:50: return;
      001DA1                       5625 00109$:
                                   5626 ;	calc.c:48: for (; *s; s++) putchar(*s);
      001DA1 8D 82            [24] 5627 	mov	dpl,r5
      001DA3 8E 83            [24] 5628 	mov	dph,r6
      001DA5 8F F0            [24] 5629 	mov	b,r7
      001DA7 12r00r00         [24] 5630 	lcall	__gptrget
      001DAA FC               [12] 5631 	mov	r4,a
      001DAB 60 10            [24] 5632 	jz	00102$
      001DAD 7B 00            [12] 5633 	mov	r3,#0x00
      001DAF 8C 82            [24] 5634 	mov	dpl,r4
      001DB1 8B 83            [24] 5635 	mov	dph,r3
      001DB3 12r00r00         [24] 5636 	lcall	_putchar
      001DB6 0D               [12] 5637 	inc	r5
                                   5638 ;	calc.c:323: if (!stack_push(&ctx->s, ctx->acc)) printstr("\r\nstack overflow\r\n");
      001DB7 BD 00 E7         [24] 5639 	cjne	r5,#0x00,00109$
      001DBA 0E               [12] 5640 	inc	r6
      001DBB 80 E4            [24] 5641 	sjmp	00109$
      001DBD                       5642 00102$:
                                   5643 ;	calc.c:325: if (delta->event == EVENT_OP) return operator(_ctx, delta);
      001DBD E5*00            [12] 5644 	mov	a,_bp
      001DBF 24 FB            [12] 5645 	add	a,#0xfb
      001DC1 F8               [12] 5646 	mov	r0,a
      001DC2 86 05            [24] 5647 	mov	ar5,@r0
      001DC4 08               [12] 5648 	inc	r0
      001DC5 86 06            [24] 5649 	mov	ar6,@r0
      001DC7 08               [12] 5650 	inc	r0
      001DC8 86 07            [24] 5651 	mov	ar7,@r0
      001DCA 74 02            [12] 5652 	mov	a,#0x02
      001DCC 2D               [12] 5653 	add	a,r5
      001DCD FA               [12] 5654 	mov	r2,a
      001DCE E4               [12] 5655 	clr	a
      001DCF 3E               [12] 5656 	addc	a,r6
      001DD0 FB               [12] 5657 	mov	r3,a
      001DD1 8F 04            [24] 5658 	mov	ar4,r7
      001DD3 8A 82            [24] 5659 	mov	dpl,r2
      001DD5 8B 83            [24] 5660 	mov	dph,r3
      001DD7 8C F0            [24] 5661 	mov	b,r4
      001DD9 12r00r00         [24] 5662 	lcall	__gptrget
      001DDC FA               [12] 5663 	mov	r2,a
      001DDD A3               [24] 5664 	inc	dptr
      001DDE 12r00r00         [24] 5665 	lcall	__gptrget
      001DE1 FB               [12] 5666 	mov	r3,a
      001DE2 BA 02 27         [24] 5667 	cjne	r2,#0x02,00104$
      001DE5 BB 00 24         [24] 5668 	cjne	r3,#0x00,00104$
      001DE8 C0 05            [24] 5669 	push	ar5
      001DEA C0 06            [24] 5670 	push	ar6
      001DEC C0 07            [24] 5671 	push	ar7
      001DEE A8*00            [24] 5672 	mov	r0,_bp
      001DF0 08               [12] 5673 	inc	r0
      001DF1 86 82            [24] 5674 	mov	dpl,@r0
      001DF3 08               [12] 5675 	inc	r0
      001DF4 86 83            [24] 5676 	mov	dph,@r0
      001DF6 08               [12] 5677 	inc	r0
      001DF7 86 F0            [24] 5678 	mov	b,@r0
      001DF9 12r05r7B         [24] 5679 	lcall	_operator
      001DFC AE 82            [24] 5680 	mov	r6,dpl
      001DFE AF 83            [24] 5681 	mov	r7,dph
      001E00 15 81            [12] 5682 	dec	sp
      001E02 15 81            [12] 5683 	dec	sp
      001E04 15 81            [12] 5684 	dec	sp
      001E06 8E 82            [24] 5685 	mov	dpl,r6
      001E08 8F 83            [24] 5686 	mov	dph,r7
      001E0A 80 03            [24] 5687 	sjmp	00111$
      001E0C                       5688 00104$:
                                   5689 ;	calc.c:326: else return 1;
      001E0C 90 00 01         [24] 5690 	mov	dptr,#0x0001
      001E0F                       5691 00111$:
                                   5692 ;	calc.c:327: }
      001E0F 85*00 81         [24] 5693 	mov	sp,_bp
      001E12 D0*00            [24] 5694 	pop	_bp
      001E14 22               [24] 5695 	ret
                                   5696 ;------------------------------------------------------------
                                   5697 ;Allocation info for local variables in function 'reset_acc'
                                   5698 ;------------------------------------------------------------
                                   5699 ;delta                     Allocated to stack - _bp -5
                                   5700 ;_ctx                      Allocated to registers r5 r6 r7 
                                   5701 ;ctx                       Allocated to registers r5 r6 r7 
                                   5702 ;------------------------------------------------------------
                                   5703 ;	calc.c:329: static int reset_acc(void *_ctx, delta_t *delta) __reentrant {
                                   5704 ;	-----------------------------------------
                                   5705 ;	 function reset_acc
                                   5706 ;	-----------------------------------------
      001E15                       5707 _reset_acc:
      001E15 C0*00            [24] 5708 	push	_bp
      001E17 85 81*00         [24] 5709 	mov	_bp,sp
      001E1A AD 82            [24] 5710 	mov	r5,dpl
      001E1C AE 83            [24] 5711 	mov	r6,dph
      001E1E AF F0            [24] 5712 	mov	r7,b
                                   5713 ;	calc.c:330: struct ctx *ctx = (struct ctx *)_ctx;
                                   5714 ;	calc.c:332: if (delta->event == EVENT_RSTA_I) ctx->acc_valid = 0;
      001E20 E5*00            [12] 5715 	mov	a,_bp
      001E22 24 FB            [12] 5716 	add	a,#0xfb
      001E24 F8               [12] 5717 	mov	r0,a
      001E25 86 02            [24] 5718 	mov	ar2,@r0
      001E27 08               [12] 5719 	inc	r0
      001E28 86 03            [24] 5720 	mov	ar3,@r0
      001E2A 08               [12] 5721 	inc	r0
      001E2B 86 04            [24] 5722 	mov	ar4,@r0
      001E2D 74 02            [12] 5723 	mov	a,#0x02
      001E2F 2A               [12] 5724 	add	a,r2
      001E30 FA               [12] 5725 	mov	r2,a
      001E31 E4               [12] 5726 	clr	a
      001E32 3B               [12] 5727 	addc	a,r3
      001E33 FB               [12] 5728 	mov	r3,a
      001E34 8A 82            [24] 5729 	mov	dpl,r2
      001E36 8B 83            [24] 5730 	mov	dph,r3
      001E38 8C F0            [24] 5731 	mov	b,r4
      001E3A 12r00r00         [24] 5732 	lcall	__gptrget
      001E3D FA               [12] 5733 	mov	r2,a
      001E3E A3               [24] 5734 	inc	dptr
      001E3F 12r00r00         [24] 5735 	lcall	__gptrget
      001E42 FB               [12] 5736 	mov	r3,a
      001E43 BA 06 16         [24] 5737 	cjne	r2,#0x06,00102$
      001E46 BB 00 13         [24] 5738 	cjne	r3,#0x00,00102$
      001E49 74 06            [12] 5739 	mov	a,#0x06
      001E4B 2D               [12] 5740 	add	a,r5
      001E4C FA               [12] 5741 	mov	r2,a
      001E4D E4               [12] 5742 	clr	a
      001E4E 3E               [12] 5743 	addc	a,r6
      001E4F FB               [12] 5744 	mov	r3,a
      001E50 8F 04            [24] 5745 	mov	ar4,r7
      001E52 8A 82            [24] 5746 	mov	dpl,r2
      001E54 8B 83            [24] 5747 	mov	dph,r3
      001E56 8C F0            [24] 5748 	mov	b,r4
      001E58 E4               [12] 5749 	clr	a
      001E59 12r00r00         [24] 5750 	lcall	__gptrput
      001E5C                       5751 00102$:
                                   5752 ;	calc.c:333: ctx->acc = 0l;
      001E5C 74 02            [12] 5753 	mov	a,#0x02
      001E5E 2D               [12] 5754 	add	a,r5
      001E5F FD               [12] 5755 	mov	r5,a
      001E60 E4               [12] 5756 	clr	a
      001E61 3E               [12] 5757 	addc	a,r6
      001E62 FE               [12] 5758 	mov	r6,a
      001E63 8D 82            [24] 5759 	mov	dpl,r5
      001E65 8E 83            [24] 5760 	mov	dph,r6
      001E67 8F F0            [24] 5761 	mov	b,r7
      001E69 E4               [12] 5762 	clr	a
      001E6A 12r00r00         [24] 5763 	lcall	__gptrput
      001E6D A3               [24] 5764 	inc	dptr
      001E6E 12r00r00         [24] 5765 	lcall	__gptrput
      001E71 A3               [24] 5766 	inc	dptr
      001E72 12r00r00         [24] 5767 	lcall	__gptrput
      001E75 A3               [24] 5768 	inc	dptr
      001E76 12r00r00         [24] 5769 	lcall	__gptrput
                                   5770 ;	calc.c:335: return 1;
      001E79 90 00 01         [24] 5771 	mov	dptr,#0x0001
                                   5772 ;	calc.c:336: }
      001E7C D0*00            [24] 5773 	pop	_bp
      001E7E 22               [24] 5774 	ret
                                   5775 ;------------------------------------------------------------
                                   5776 ;Allocation info for local variables in function 'reset_base'
                                   5777 ;------------------------------------------------------------
                                   5778 ;delta                     Allocated to stack - _bp -5
                                   5779 ;_ctx                      Allocated to registers r5 r6 r7 
                                   5780 ;ctx                       Allocated to registers r5 r6 r7 
                                   5781 ;------------------------------------------------------------
                                   5782 ;	calc.c:338: static int reset_base(void *_ctx, delta_t *delta) __reentrant {
                                   5783 ;	-----------------------------------------
                                   5784 ;	 function reset_base
                                   5785 ;	-----------------------------------------
      001E7F                       5786 _reset_base:
      001E7F C0*00            [24] 5787 	push	_bp
      001E81 85 81*00         [24] 5788 	mov	_bp,sp
      001E84 AD 82            [24] 5789 	mov	r5,dpl
      001E86 AE 83            [24] 5790 	mov	r6,dph
      001E88 AF F0            [24] 5791 	mov	r7,b
                                   5792 ;	calc.c:339: struct ctx *ctx = (struct ctx *)_ctx;
                                   5793 ;	calc.c:343: switch (ctx->digit[0]) {
      001E8A 74 07            [12] 5794 	mov	a,#0x07
      001E8C 2D               [12] 5795 	add	a,r5
      001E8D FA               [12] 5796 	mov	r2,a
      001E8E E4               [12] 5797 	clr	a
      001E8F 3E               [12] 5798 	addc	a,r6
      001E90 FB               [12] 5799 	mov	r3,a
      001E91 8F 04            [24] 5800 	mov	ar4,r7
      001E93 8A 82            [24] 5801 	mov	dpl,r2
      001E95 8B 83            [24] 5802 	mov	dph,r3
      001E97 8C F0            [24] 5803 	mov	b,r4
      001E99 12r00r00         [24] 5804 	lcall	__gptrget
      001E9C FC               [12] 5805 	mov	r4,a
      001E9D BC 48 02         [24] 5806 	cjne	r4,#0x48,00124$
      001EA0 80 0F            [24] 5807 	sjmp	00101$
      001EA2                       5808 00124$:
      001EA2 BC 4F 02         [24] 5809 	cjne	r4,#0x4f,00125$
      001EA5 80 2E            [24] 5810 	sjmp	00103$
      001EA7                       5811 00125$:
      001EA7 BC 68 02         [24] 5812 	cjne	r4,#0x68,00126$
      001EAA 80 17            [24] 5813 	sjmp	00102$
      001EAC                       5814 00126$:
                                   5815 ;	calc.c:344: case 'H':
      001EAC BC 6F 48         [24] 5816 	cjne	r4,#0x6f,00105$
      001EAF 80 36            [24] 5817 	sjmp	00104$
      001EB1                       5818 00101$:
                                   5819 ;	calc.c:345: ctx->base = 16;
      001EB1 8D 82            [24] 5820 	mov	dpl,r5
      001EB3 8E 83            [24] 5821 	mov	dph,r6
      001EB5 8F F0            [24] 5822 	mov	b,r7
      001EB7 74 10            [12] 5823 	mov	a,#0x10
      001EB9 12r00r00         [24] 5824 	lcall	__gptrput
      001EBC A3               [24] 5825 	inc	dptr
      001EBD E4               [12] 5826 	clr	a
      001EBE 12r00r00         [24] 5827 	lcall	__gptrput
                                   5828 ;	calc.c:346: break;
                                   5829 ;	calc.c:347: case 'h':
      001EC1 80 34            [24] 5830 	sjmp	00105$
      001EC3                       5831 00102$:
                                   5832 ;	calc.c:348: ctx->base = 10;
      001EC3 8D 82            [24] 5833 	mov	dpl,r5
      001EC5 8E 83            [24] 5834 	mov	dph,r6
      001EC7 8F F0            [24] 5835 	mov	b,r7
      001EC9 74 0A            [12] 5836 	mov	a,#0x0a
      001ECB 12r00r00         [24] 5837 	lcall	__gptrput
      001ECE A3               [24] 5838 	inc	dptr
      001ECF E4               [12] 5839 	clr	a
      001ED0 12r00r00         [24] 5840 	lcall	__gptrput
                                   5841 ;	calc.c:349: break;
                                   5842 ;	calc.c:350: case 'O':
      001ED3 80 22            [24] 5843 	sjmp	00105$
      001ED5                       5844 00103$:
                                   5845 ;	calc.c:351: ctx->base = 8;
      001ED5 8D 82            [24] 5846 	mov	dpl,r5
      001ED7 8E 83            [24] 5847 	mov	dph,r6
      001ED9 8F F0            [24] 5848 	mov	b,r7
      001EDB 74 08            [12] 5849 	mov	a,#0x08
      001EDD 12r00r00         [24] 5850 	lcall	__gptrput
      001EE0 A3               [24] 5851 	inc	dptr
      001EE1 E4               [12] 5852 	clr	a
      001EE2 12r00r00         [24] 5853 	lcall	__gptrput
                                   5854 ;	calc.c:352: break;
                                   5855 ;	calc.c:353: case 'o':
      001EE5 80 10            [24] 5856 	sjmp	00105$
      001EE7                       5857 00104$:
                                   5858 ;	calc.c:354: ctx->base = 2;
      001EE7 8D 82            [24] 5859 	mov	dpl,r5
      001EE9 8E 83            [24] 5860 	mov	dph,r6
      001EEB 8F F0            [24] 5861 	mov	b,r7
      001EED 74 02            [12] 5862 	mov	a,#0x02
      001EEF 12r00r00         [24] 5863 	lcall	__gptrput
      001EF2 A3               [24] 5864 	inc	dptr
      001EF3 E4               [12] 5865 	clr	a
      001EF4 12r00r00         [24] 5866 	lcall	__gptrput
                                   5867 ;	calc.c:356: }
      001EF7                       5868 00105$:
                                   5869 ;	calc.c:358: return 1;
      001EF7 90 00 01         [24] 5870 	mov	dptr,#0x0001
                                   5871 ;	calc.c:359: }
      001EFA D0*00            [24] 5872 	pop	_bp
      001EFC 22               [24] 5873 	ret
                                   5874 ;------------------------------------------------------------
                                   5875 ;Allocation info for local variables in function 'help'
                                   5876 ;------------------------------------------------------------
                                   5877 ;delta                     Allocated to stack - _bp -5
                                   5878 ;_ctx                      Allocated to registers r5 r6 r7 
                                   5879 ;ctx                       Allocated to stack - _bp +4
                                   5880 ;__1310720099              Allocated to registers 
                                   5881 ;d                         Allocated to stack - _bp +7
                                   5882 ;mask                      Allocated to stack - _bp +11
                                   5883 ;__1310720101              Allocated to registers 
                                   5884 ;s                         Allocated to registers r5 r6 r7 
                                   5885 ;__1310720103              Allocated to registers 
                                   5886 ;s                         Allocated to registers r5 r6 r7 
                                   5887 ;__1310720105              Allocated to registers 
                                   5888 ;s                         Allocated to registers r5 r6 r7 
                                   5889 ;__1310720107              Allocated to registers 
                                   5890 ;s                         Allocated to registers r5 r6 r7 
                                   5891 ;__1310720109              Allocated to registers 
                                   5892 ;s                         Allocated to registers r5 r6 r7 
                                   5893 ;__1310720111              Allocated to registers 
                                   5894 ;s                         Allocated to registers r5 r6 r7 
                                   5895 ;__1310720113              Allocated to registers 
                                   5896 ;s                         Allocated to registers r5 r6 r7 
                                   5897 ;__1310720115              Allocated to registers 
                                   5898 ;s                         Allocated to registers r5 r6 r7 
                                   5899 ;__1310720117              Allocated to registers 
                                   5900 ;s                         Allocated to registers r5 r6 r7 
                                   5901 ;__1310720119              Allocated to registers 
                                   5902 ;s                         Allocated to registers r5 r6 r7 
                                   5903 ;__1310720121              Allocated to registers 
                                   5904 ;s                         Allocated to registers r5 r6 r7 
                                   5905 ;__1310720123              Allocated to registers 
                                   5906 ;s                         Allocated to registers r5 r6 r7 
                                   5907 ;__1310720125              Allocated to registers 
                                   5908 ;s                         Allocated to registers r5 r6 r7 
                                   5909 ;__1310720127              Allocated to registers 
                                   5910 ;s                         Allocated to registers r5 r6 r7 
                                   5911 ;__1310720129              Allocated to registers 
                                   5912 ;s                         Allocated to registers r5 r6 r7 
                                   5913 ;__1310720131              Allocated to registers 
                                   5914 ;s                         Allocated to registers r5 r6 r7 
                                   5915 ;__1310720133              Allocated to registers 
                                   5916 ;s                         Allocated to registers r5 r6 r7 
                                   5917 ;__1310720135              Allocated to registers 
                                   5918 ;s                         Allocated to registers r5 r6 r7 
                                   5919 ;__1310720137              Allocated to registers 
                                   5920 ;s                         Allocated to registers r5 r6 r7 
                                   5921 ;__1310720139              Allocated to registers 
                                   5922 ;s                         Allocated to registers r5 r6 r7 
                                   5923 ;__1310720141              Allocated to registers 
                                   5924 ;s                         Allocated to registers r5 r6 r7 
                                   5925 ;__1310720143              Allocated to registers 
                                   5926 ;s                         Allocated to registers r5 r6 r7 
                                   5927 ;__1310720145              Allocated to registers 
                                   5928 ;s                         Allocated to registers r5 r6 r7 
                                   5929 ;__1310720147              Allocated to registers 
                                   5930 ;s                         Allocated to registers r5 r6 r7 
                                   5931 ;sloc0                     Allocated to stack - _bp +1
                                   5932 ;------------------------------------------------------------
                                   5933 ;	calc.c:361: static int help(void *_ctx, delta_t *delta) __reentrant {
                                   5934 ;	-----------------------------------------
                                   5935 ;	 function help
                                   5936 ;	-----------------------------------------
      001EFD                       5937 _help:
      001EFD C0*00            [24] 5938 	push	_bp
      001EFF E5 81            [12] 5939 	mov	a,sp
      001F01 F5*00            [12] 5940 	mov	_bp,a
      001F03 24 0E            [12] 5941 	add	a,#0x0e
      001F05 F5 81            [12] 5942 	mov	sp,a
      001F07 AD 82            [24] 5943 	mov	r5,dpl
      001F09 AE 83            [24] 5944 	mov	r6,dph
      001F0B AF F0            [24] 5945 	mov	r7,b
                                   5946 ;	calc.c:362: struct ctx *ctx = (struct ctx *)_ctx;
      001F0D E5*00            [12] 5947 	mov	a,_bp
      001F0F 24 04            [12] 5948 	add	a,#0x04
      001F11 F8               [12] 5949 	mov	r0,a
      001F12 A6 05            [24] 5950 	mov	@r0,ar5
      001F14 08               [12] 5951 	inc	r0
      001F15 A6 06            [24] 5952 	mov	@r0,ar6
      001F17 08               [12] 5953 	inc	r0
      001F18 A6 07            [24] 5954 	mov	@r0,ar7
                                   5955 ;	calc.c:365: printf("\r\nbase = %d, ", ctx->base);
      001F1A E5*00            [12] 5956 	mov	a,_bp
      001F1C 24 04            [12] 5957 	add	a,#0x04
      001F1E F8               [12] 5958 	mov	r0,a
      001F1F 86 82            [24] 5959 	mov	dpl,@r0
      001F21 08               [12] 5960 	inc	r0
      001F22 86 83            [24] 5961 	mov	dph,@r0
      001F24 08               [12] 5962 	inc	r0
      001F25 86 F0            [24] 5963 	mov	b,@r0
      001F27 12r00r00         [24] 5964 	lcall	__gptrget
      001F2A FB               [12] 5965 	mov	r3,a
      001F2B A3               [24] 5966 	inc	dptr
      001F2C 12r00r00         [24] 5967 	lcall	__gptrget
      001F2F FC               [12] 5968 	mov	r4,a
      001F30 C0 03            [24] 5969 	push	ar3
      001F32 C0 04            [24] 5970 	push	ar4
      001F34 74r74            [12] 5971 	mov	a,#___str_11
      001F36 C0 E0            [24] 5972 	push	acc
      001F38 74s00            [12] 5973 	mov	a,#(___str_11 >> 8)
      001F3A C0 E0            [24] 5974 	push	acc
      001F3C 74 80            [12] 5975 	mov	a,#0x80
      001F3E C0 E0            [24] 5976 	push	acc
      001F40 12r00r00         [24] 5977 	lcall	_printf
      001F43 E5 81            [12] 5978 	mov	a,sp
      001F45 24 FB            [12] 5979 	add	a,#0xfb
      001F47 F5 81            [12] 5980 	mov	sp,a
                                   5981 ;	calc.c:366: printf("acc = %ld / ", ctx->acc);
      001F49 E5*00            [12] 5982 	mov	a,_bp
      001F4B 24 04            [12] 5983 	add	a,#0x04
      001F4D F8               [12] 5984 	mov	r0,a
      001F4E A9*00            [24] 5985 	mov	r1,_bp
      001F50 09               [12] 5986 	inc	r1
      001F51 74 02            [12] 5987 	mov	a,#0x02
      001F53 26               [12] 5988 	add	a,@r0
      001F54 F7               [12] 5989 	mov	@r1,a
      001F55 E4               [12] 5990 	clr	a
      001F56 08               [12] 5991 	inc	r0
      001F57 36               [12] 5992 	addc	a,@r0
      001F58 09               [12] 5993 	inc	r1
      001F59 F7               [12] 5994 	mov	@r1,a
      001F5A 08               [12] 5995 	inc	r0
      001F5B 09               [12] 5996 	inc	r1
      001F5C E6               [12] 5997 	mov	a,@r0
      001F5D F7               [12] 5998 	mov	@r1,a
      001F5E A8*00            [24] 5999 	mov	r0,_bp
      001F60 08               [12] 6000 	inc	r0
      001F61 86 82            [24] 6001 	mov	dpl,@r0
      001F63 08               [12] 6002 	inc	r0
      001F64 86 83            [24] 6003 	mov	dph,@r0
      001F66 08               [12] 6004 	inc	r0
      001F67 86 F0            [24] 6005 	mov	b,@r0
      001F69 12r00r00         [24] 6006 	lcall	__gptrget
      001F6C FC               [12] 6007 	mov	r4,a
      001F6D A3               [24] 6008 	inc	dptr
      001F6E 12r00r00         [24] 6009 	lcall	__gptrget
      001F71 FD               [12] 6010 	mov	r5,a
      001F72 A3               [24] 6011 	inc	dptr
      001F73 12r00r00         [24] 6012 	lcall	__gptrget
      001F76 FE               [12] 6013 	mov	r6,a
      001F77 A3               [24] 6014 	inc	dptr
      001F78 12r00r00         [24] 6015 	lcall	__gptrget
      001F7B FF               [12] 6016 	mov	r7,a
      001F7C C0 04            [24] 6017 	push	ar4
      001F7E C0 05            [24] 6018 	push	ar5
      001F80 C0 06            [24] 6019 	push	ar6
      001F82 C0 07            [24] 6020 	push	ar7
      001F84 74r82            [12] 6021 	mov	a,#___str_12
      001F86 C0 E0            [24] 6022 	push	acc
      001F88 74s00            [12] 6023 	mov	a,#(___str_12 >> 8)
      001F8A C0 E0            [24] 6024 	push	acc
      001F8C 74 80            [12] 6025 	mov	a,#0x80
      001F8E C0 E0            [24] 6026 	push	acc
      001F90 12r00r00         [24] 6027 	lcall	_printf
      001F93 E5 81            [12] 6028 	mov	a,sp
      001F95 24 F9            [12] 6029 	add	a,#0xf9
      001F97 F5 81            [12] 6030 	mov	sp,a
                                   6031 ;	calc.c:367: printf("%08lx / ", ctx->acc);
      001F99 A8*00            [24] 6032 	mov	r0,_bp
      001F9B 08               [12] 6033 	inc	r0
      001F9C 86 82            [24] 6034 	mov	dpl,@r0
      001F9E 08               [12] 6035 	inc	r0
      001F9F 86 83            [24] 6036 	mov	dph,@r0
      001FA1 08               [12] 6037 	inc	r0
      001FA2 86 F0            [24] 6038 	mov	b,@r0
      001FA4 12r00r00         [24] 6039 	lcall	__gptrget
      001FA7 FC               [12] 6040 	mov	r4,a
      001FA8 A3               [24] 6041 	inc	dptr
      001FA9 12r00r00         [24] 6042 	lcall	__gptrget
      001FAC FD               [12] 6043 	mov	r5,a
      001FAD A3               [24] 6044 	inc	dptr
      001FAE 12r00r00         [24] 6045 	lcall	__gptrget
      001FB1 FE               [12] 6046 	mov	r6,a
      001FB2 A3               [24] 6047 	inc	dptr
      001FB3 12r00r00         [24] 6048 	lcall	__gptrget
      001FB6 FF               [12] 6049 	mov	r7,a
      001FB7 C0 04            [24] 6050 	push	ar4
      001FB9 C0 05            [24] 6051 	push	ar5
      001FBB C0 06            [24] 6052 	push	ar6
      001FBD C0 07            [24] 6053 	push	ar7
      001FBF 74r23            [12] 6054 	mov	a,#___str_4
      001FC1 C0 E0            [24] 6055 	push	acc
      001FC3 74s00            [12] 6056 	mov	a,#(___str_4 >> 8)
      001FC5 C0 E0            [24] 6057 	push	acc
      001FC7 74 80            [12] 6058 	mov	a,#0x80
      001FC9 C0 E0            [24] 6059 	push	acc
      001FCB 12r00r00         [24] 6060 	lcall	_printf
      001FCE E5 81            [12] 6061 	mov	a,sp
      001FD0 24 F9            [12] 6062 	add	a,#0xf9
      001FD2 F5 81            [12] 6063 	mov	sp,a
                                   6064 ;	calc.c:368: printbin(ctx->acc);
      001FD4 A8*00            [24] 6065 	mov	r0,_bp
      001FD6 08               [12] 6066 	inc	r0
      001FD7 86 82            [24] 6067 	mov	dpl,@r0
      001FD9 08               [12] 6068 	inc	r0
      001FDA 86 83            [24] 6069 	mov	dph,@r0
      001FDC 08               [12] 6070 	inc	r0
      001FDD 86 F0            [24] 6071 	mov	b,@r0
      001FDF E5*00            [12] 6072 	mov	a,_bp
      001FE1 24 07            [12] 6073 	add	a,#0x07
      001FE3 F9               [12] 6074 	mov	r1,a
      001FE4 12r00r00         [24] 6075 	lcall	__gptrget
      001FE7 F7               [12] 6076 	mov	@r1,a
      001FE8 A3               [24] 6077 	inc	dptr
      001FE9 12r00r00         [24] 6078 	lcall	__gptrget
      001FEC 09               [12] 6079 	inc	r1
      001FED F7               [12] 6080 	mov	@r1,a
      001FEE A3               [24] 6081 	inc	dptr
      001FEF 12r00r00         [24] 6082 	lcall	__gptrget
      001FF2 09               [12] 6083 	inc	r1
      001FF3 F7               [12] 6084 	mov	@r1,a
      001FF4 A3               [24] 6085 	inc	dptr
      001FF5 12r00r00         [24] 6086 	lcall	__gptrget
      001FF8 09               [12] 6087 	inc	r1
      001FF9 F7               [12] 6088 	mov	@r1,a
                                   6089 ;	calc.c:56: for (mask = 0x80000000lu; mask; mask >>= 1)
      001FFA E5*00            [12] 6090 	mov	a,_bp
      001FFC 24 0B            [12] 6091 	add	a,#0x0b
      001FFE F8               [12] 6092 	mov	r0,a
      001FFF E4               [12] 6093 	clr	a
      002000 F6               [12] 6094 	mov	@r0,a
      002001 08               [12] 6095 	inc	r0
      002002 F6               [12] 6096 	mov	@r0,a
      002003 08               [12] 6097 	inc	r0
      002004 F6               [12] 6098 	mov	@r0,a
      002005 08               [12] 6099 	inc	r0
      002006 76 80            [12] 6100 	mov	@r0,#0x80
      002008                       6101 00151$:
                                   6102 ;	calc.c:57: (void)putchar((d & mask) ? (int)'1' : (int)'0');
      002008 E5*00            [12] 6103 	mov	a,_bp
      00200A 24 07            [12] 6104 	add	a,#0x07
      00200C F8               [12] 6105 	mov	r0,a
      00200D 86 04            [24] 6106 	mov	ar4,@r0
      00200F 08               [12] 6107 	inc	r0
      002010 86 05            [24] 6108 	mov	ar5,@r0
      002012 08               [12] 6109 	inc	r0
      002013 86 06            [24] 6110 	mov	ar6,@r0
      002015 08               [12] 6111 	inc	r0
      002016 86 07            [24] 6112 	mov	ar7,@r0
      002018 E5*00            [12] 6113 	mov	a,_bp
      00201A 24 0B            [12] 6114 	add	a,#0x0b
      00201C F8               [12] 6115 	mov	r0,a
      00201D E6               [12] 6116 	mov	a,@r0
      00201E 52 04            [12] 6117 	anl	ar4,a
      002020 08               [12] 6118 	inc	r0
      002021 E6               [12] 6119 	mov	a,@r0
      002022 52 05            [12] 6120 	anl	ar5,a
      002024 08               [12] 6121 	inc	r0
      002025 E6               [12] 6122 	mov	a,@r0
      002026 52 06            [12] 6123 	anl	ar6,a
      002028 08               [12] 6124 	inc	r0
      002029 E6               [12] 6125 	mov	a,@r0
      00202A 52 07            [12] 6126 	anl	ar7,a
      00202C EC               [12] 6127 	mov	a,r4
      00202D 4D               [12] 6128 	orl	a,r5
      00202E 4E               [12] 6129 	orl	a,r6
      00202F 4F               [12] 6130 	orl	a,r7
      002030 60 06            [24] 6131 	jz	00227$
      002032 7E 31            [12] 6132 	mov	r6,#0x31
      002034 7F 00            [12] 6133 	mov	r7,#0x00
      002036 80 04            [24] 6134 	sjmp	00228$
      002038                       6135 00227$:
      002038 7E 30            [12] 6136 	mov	r6,#0x30
      00203A 7F 00            [12] 6137 	mov	r7,#0x00
      00203C                       6138 00228$:
      00203C 8E 82            [24] 6139 	mov	dpl,r6
      00203E 8F 83            [24] 6140 	mov	dph,r7
      002040 12r00r00         [24] 6141 	lcall	_putchar
                                   6142 ;	calc.c:56: for (mask = 0x80000000lu; mask; mask >>= 1)
      002043 E5*00            [12] 6143 	mov	a,_bp
      002045 24 0B            [12] 6144 	add	a,#0x0b
      002047 F8               [12] 6145 	mov	r0,a
      002048 08               [12] 6146 	inc	r0
      002049 08               [12] 6147 	inc	r0
      00204A 08               [12] 6148 	inc	r0
      00204B E6               [12] 6149 	mov	a,@r0
      00204C C3               [12] 6150 	clr	c
      00204D 13               [12] 6151 	rrc	a
      00204E F6               [12] 6152 	mov	@r0,a
      00204F 18               [12] 6153 	dec	r0
      002050 E6               [12] 6154 	mov	a,@r0
      002051 13               [12] 6155 	rrc	a
      002052 F6               [12] 6156 	mov	@r0,a
      002053 18               [12] 6157 	dec	r0
      002054 E6               [12] 6158 	mov	a,@r0
      002055 13               [12] 6159 	rrc	a
      002056 F6               [12] 6160 	mov	@r0,a
      002057 18               [12] 6161 	dec	r0
      002058 E6               [12] 6162 	mov	a,@r0
      002059 13               [12] 6163 	rrc	a
      00205A F6               [12] 6164 	mov	@r0,a
      00205B E5*00            [12] 6165 	mov	a,_bp
      00205D 24 0B            [12] 6166 	add	a,#0x0b
      00205F F8               [12] 6167 	mov	r0,a
      002060 E6               [12] 6168 	mov	a,@r0
      002061 08               [12] 6169 	inc	r0
      002062 46               [12] 6170 	orl	a,@r0
      002063 08               [12] 6171 	inc	r0
      002064 46               [12] 6172 	orl	a,@r0
      002065 08               [12] 6173 	inc	r0
      002066 46               [12] 6174 	orl	a,@r0
      002067 70 9F            [24] 6175 	jnz	00151$
                                   6176 ;	calc.c:369: printf(", acc_valid = %d\r\n\r\n", (int)ctx->acc_valid);
      002069 E5*00            [12] 6177 	mov	a,_bp
      00206B 24 04            [12] 6178 	add	a,#0x04
      00206D F8               [12] 6179 	mov	r0,a
      00206E 74 06            [12] 6180 	mov	a,#0x06
      002070 26               [12] 6181 	add	a,@r0
      002071 FD               [12] 6182 	mov	r5,a
      002072 E4               [12] 6183 	clr	a
      002073 08               [12] 6184 	inc	r0
      002074 36               [12] 6185 	addc	a,@r0
      002075 FE               [12] 6186 	mov	r6,a
      002076 08               [12] 6187 	inc	r0
      002077 86 07            [24] 6188 	mov	ar7,@r0
      002079 8D 82            [24] 6189 	mov	dpl,r5
      00207B 8E 83            [24] 6190 	mov	dph,r6
      00207D 8F F0            [24] 6191 	mov	b,r7
      00207F 12r00r00         [24] 6192 	lcall	__gptrget
      002082 FD               [12] 6193 	mov	r5,a
      002083 7F 00            [12] 6194 	mov	r7,#0x00
      002085 C0 05            [24] 6195 	push	ar5
      002087 C0 07            [24] 6196 	push	ar7
      002089 74r8F            [12] 6197 	mov	a,#___str_13
      00208B C0 E0            [24] 6198 	push	acc
      00208D 74s00            [12] 6199 	mov	a,#(___str_13 >> 8)
      00208F C0 E0            [24] 6200 	push	acc
      002091 74 80            [12] 6201 	mov	a,#0x80
      002093 C0 E0            [24] 6202 	push	acc
      002095 12r00r00         [24] 6203 	lcall	_printf
      002098 E5 81            [12] 6204 	mov	a,sp
      00209A 24 FB            [12] 6205 	add	a,#0xfb
      00209C F5 81            [12] 6206 	mov	sp,a
                                   6207 ;	calc.c:370: printstr("HhOo\tbase 16 10 8 2\r\n");
      00209E 7DrA4            [12] 6208 	mov	r5,#___str_14
      0020A0 7Es00            [12] 6209 	mov	r6,#(___str_14 >> 8)
      0020A2 7F 80            [12] 6210 	mov	r7,#0x80
                                   6211 ;	calc.c:50: return;
      0020A4                       6212 00154$:
                                   6213 ;	calc.c:48: for (; *s; s++) putchar(*s);
      0020A4 8D 82            [24] 6214 	mov	dpl,r5
      0020A6 8E 83            [24] 6215 	mov	dph,r6
      0020A8 8F F0            [24] 6216 	mov	b,r7
      0020AA 12r00r00         [24] 6217 	lcall	__gptrget
      0020AD FC               [12] 6218 	mov	r4,a
      0020AE 60 10            [24] 6219 	jz	00104$
      0020B0 7B 00            [12] 6220 	mov	r3,#0x00
      0020B2 8C 82            [24] 6221 	mov	dpl,r4
      0020B4 8B 83            [24] 6222 	mov	dph,r3
      0020B6 12r00r00         [24] 6223 	lcall	_putchar
      0020B9 0D               [12] 6224 	inc	r5
                                   6225 ;	calc.c:370: printstr("HhOo\tbase 16 10 8 2\r\n");
      0020BA BD 00 E7         [24] 6226 	cjne	r5,#0x00,00154$
      0020BD 0E               [12] 6227 	inc	r6
      0020BE 80 E4            [24] 6228 	sjmp	00154$
      0020C0                       6229 00104$:
                                   6230 ;	calc.c:371: printstr("p\tpeek top\r\n");
      0020C0 7DrBA            [12] 6231 	mov	r5,#___str_15
      0020C2 7Es00            [12] 6232 	mov	r6,#(___str_15 >> 8)
      0020C4 7F 80            [12] 6233 	mov	r7,#0x80
                                   6234 ;	calc.c:50: return;
      0020C6                       6235 00157$:
                                   6236 ;	calc.c:48: for (; *s; s++) putchar(*s);
      0020C6 8D 82            [24] 6237 	mov	dpl,r5
      0020C8 8E 83            [24] 6238 	mov	dph,r6
      0020CA 8F F0            [24] 6239 	mov	b,r7
      0020CC 12r00r00         [24] 6240 	lcall	__gptrget
      0020CF FC               [12] 6241 	mov	r4,a
      0020D0 60 10            [24] 6242 	jz	00106$
      0020D2 7B 00            [12] 6243 	mov	r3,#0x00
      0020D4 8C 82            [24] 6244 	mov	dpl,r4
      0020D6 8B 83            [24] 6245 	mov	dph,r3
      0020D8 12r00r00         [24] 6246 	lcall	_putchar
      0020DB 0D               [12] 6247 	inc	r5
                                   6248 ;	calc.c:371: printstr("p\tpeek top\r\n");
      0020DC BD 00 E7         [24] 6249 	cjne	r5,#0x00,00157$
      0020DF 0E               [12] 6250 	inc	r6
      0020E0 80 E4            [24] 6251 	sjmp	00157$
      0020E2                       6252 00106$:
                                   6253 ;	calc.c:372: printstr("P\tprint stack\r\n");
      0020E2 7DrC7            [12] 6254 	mov	r5,#___str_16
      0020E4 7Es00            [12] 6255 	mov	r6,#(___str_16 >> 8)
      0020E6 7F 80            [12] 6256 	mov	r7,#0x80
                                   6257 ;	calc.c:50: return;
      0020E8                       6258 00160$:
                                   6259 ;	calc.c:48: for (; *s; s++) putchar(*s);
      0020E8 8D 82            [24] 6260 	mov	dpl,r5
      0020EA 8E 83            [24] 6261 	mov	dph,r6
      0020EC 8F F0            [24] 6262 	mov	b,r7
      0020EE 12r00r00         [24] 6263 	lcall	__gptrget
      0020F1 FC               [12] 6264 	mov	r4,a
      0020F2 60 10            [24] 6265 	jz	00108$
      0020F4 7B 00            [12] 6266 	mov	r3,#0x00
      0020F6 8C 82            [24] 6267 	mov	dpl,r4
      0020F8 8B 83            [24] 6268 	mov	dph,r3
      0020FA 12r00r00         [24] 6269 	lcall	_putchar
      0020FD 0D               [12] 6270 	inc	r5
                                   6271 ;	calc.c:372: printstr("P\tprint stack\r\n");
      0020FE BD 00 E7         [24] 6272 	cjne	r5,#0x00,00160$
      002101 0E               [12] 6273 	inc	r6
      002102 80 E4            [24] 6274 	sjmp	00160$
      002104                       6275 00108$:
                                   6276 ;	calc.c:373: printstr("v.\tpop top\r\n");
      002104 7DrD7            [12] 6277 	mov	r5,#___str_17
      002106 7Es00            [12] 6278 	mov	r6,#(___str_17 >> 8)
      002108 7F 80            [12] 6279 	mov	r7,#0x80
                                   6280 ;	calc.c:50: return;
      00210A                       6281 00163$:
                                   6282 ;	calc.c:48: for (; *s; s++) putchar(*s);
      00210A 8D 82            [24] 6283 	mov	dpl,r5
      00210C 8E 83            [24] 6284 	mov	dph,r6
      00210E 8F F0            [24] 6285 	mov	b,r7
      002110 12r00r00         [24] 6286 	lcall	__gptrget
      002113 FC               [12] 6287 	mov	r4,a
      002114 60 10            [24] 6288 	jz	00110$
      002116 7B 00            [12] 6289 	mov	r3,#0x00
      002118 8C 82            [24] 6290 	mov	dpl,r4
      00211A 8B 83            [24] 6291 	mov	dph,r3
      00211C 12r00r00         [24] 6292 	lcall	_putchar
      00211F 0D               [12] 6293 	inc	r5
                                   6294 ;	calc.c:373: printstr("v.\tpop top\r\n");
      002120 BD 00 E7         [24] 6295 	cjne	r5,#0x00,00163$
      002123 0E               [12] 6296 	inc	r6
      002124 80 E4            [24] 6297 	sjmp	00163$
      002126                       6298 00110$:
                                   6299 ;	calc.c:374: printstr("V\tpop all\r\n");
      002126 7DrE4            [12] 6300 	mov	r5,#___str_18
      002128 7Es00            [12] 6301 	mov	r6,#(___str_18 >> 8)
      00212A 7F 80            [12] 6302 	mov	r7,#0x80
                                   6303 ;	calc.c:50: return;
      00212C                       6304 00166$:
                                   6305 ;	calc.c:48: for (; *s; s++) putchar(*s);
      00212C 8D 82            [24] 6306 	mov	dpl,r5
      00212E 8E 83            [24] 6307 	mov	dph,r6
      002130 8F F0            [24] 6308 	mov	b,r7
      002132 12r00r00         [24] 6309 	lcall	__gptrget
      002135 FC               [12] 6310 	mov	r4,a
      002136 60 10            [24] 6311 	jz	00112$
      002138 7B 00            [12] 6312 	mov	r3,#0x00
      00213A 8C 82            [24] 6313 	mov	dpl,r4
      00213C 8B 83            [24] 6314 	mov	dph,r3
      00213E 12r00r00         [24] 6315 	lcall	_putchar
      002141 0D               [12] 6316 	inc	r5
                                   6317 ;	calc.c:374: printstr("V\tpop all\r\n");
      002142 BD 00 E7         [24] 6318 	cjne	r5,#0x00,00166$
      002145 0E               [12] 6319 	inc	r6
      002146 80 E4            [24] 6320 	sjmp	00166$
      002148                       6321 00112$:
                                   6322 ;	calc.c:375: printstr("i\treset acc\r\n");
      002148 7DrF0            [12] 6323 	mov	r5,#___str_19
      00214A 7Es00            [12] 6324 	mov	r6,#(___str_19 >> 8)
      00214C 7F 80            [12] 6325 	mov	r7,#0x80
                                   6326 ;	calc.c:50: return;
      00214E                       6327 00169$:
                                   6328 ;	calc.c:48: for (; *s; s++) putchar(*s);
      00214E 8D 82            [24] 6329 	mov	dpl,r5
      002150 8E 83            [24] 6330 	mov	dph,r6
      002152 8F F0            [24] 6331 	mov	b,r7
      002154 12r00r00         [24] 6332 	lcall	__gptrget
      002157 FC               [12] 6333 	mov	r4,a
      002158 60 10            [24] 6334 	jz	00114$
      00215A 7B 00            [12] 6335 	mov	r3,#0x00
      00215C 8C 82            [24] 6336 	mov	dpl,r4
      00215E 8B 83            [24] 6337 	mov	dph,r3
      002160 12r00r00         [24] 6338 	lcall	_putchar
      002163 0D               [12] 6339 	inc	r5
                                   6340 ;	calc.c:375: printstr("i\treset acc\r\n");
      002164 BD 00 E7         [24] 6341 	cjne	r5,#0x00,00169$
      002167 0E               [12] 6342 	inc	r6
      002168 80 E4            [24] 6343 	sjmp	00169$
      00216A                       6344 00114$:
                                   6345 ;	calc.c:376: printstr("I\treset and discard acc\r\n");
      00216A 7DrFE            [12] 6346 	mov	r5,#___str_20
      00216C 7Es00            [12] 6347 	mov	r6,#(___str_20 >> 8)
      00216E 7F 80            [12] 6348 	mov	r7,#0x80
                                   6349 ;	calc.c:50: return;
      002170                       6350 00172$:
                                   6351 ;	calc.c:48: for (; *s; s++) putchar(*s);
      002170 8D 82            [24] 6352 	mov	dpl,r5
      002172 8E 83            [24] 6353 	mov	dph,r6
      002174 8F F0            [24] 6354 	mov	b,r7
      002176 12r00r00         [24] 6355 	lcall	__gptrget
      002179 FC               [12] 6356 	mov	r4,a
      00217A 60 10            [24] 6357 	jz	00116$
      00217C 7B 00            [12] 6358 	mov	r3,#0x00
      00217E 8C 82            [24] 6359 	mov	dpl,r4
      002180 8B 83            [24] 6360 	mov	dph,r3
      002182 12r00r00         [24] 6361 	lcall	_putchar
      002185 0D               [12] 6362 	inc	r5
                                   6363 ;	calc.c:376: printstr("I\treset and discard acc\r\n");
      002186 BD 00 E7         [24] 6364 	cjne	r5,#0x00,00172$
      002189 0E               [12] 6365 	inc	r6
      00218A 80 E4            [24] 6366 	sjmp	00172$
      00218C                       6367 00116$:
                                   6368 ;	calc.c:377: printstr("x\texchange top 2\r\n");
      00218C 7Dr18            [12] 6369 	mov	r5,#___str_21
      00218E 7Es01            [12] 6370 	mov	r6,#(___str_21 >> 8)
      002190 7F 80            [12] 6371 	mov	r7,#0x80
                                   6372 ;	calc.c:50: return;
      002192                       6373 00175$:
                                   6374 ;	calc.c:48: for (; *s; s++) putchar(*s);
      002192 8D 82            [24] 6375 	mov	dpl,r5
      002194 8E 83            [24] 6376 	mov	dph,r6
      002196 8F F0            [24] 6377 	mov	b,r7
      002198 12r00r00         [24] 6378 	lcall	__gptrget
      00219B FC               [12] 6379 	mov	r4,a
      00219C 60 10            [24] 6380 	jz	00118$
      00219E 7B 00            [12] 6381 	mov	r3,#0x00
      0021A0 8C 82            [24] 6382 	mov	dpl,r4
      0021A2 8B 83            [24] 6383 	mov	dph,r3
      0021A4 12r00r00         [24] 6384 	lcall	_putchar
      0021A7 0D               [12] 6385 	inc	r5
                                   6386 ;	calc.c:377: printstr("x\texchange top 2\r\n");
      0021A8 BD 00 E7         [24] 6387 	cjne	r5,#0x00,00175$
      0021AB 0E               [12] 6388 	inc	r6
      0021AC 80 E4            [24] 6389 	sjmp	00175$
      0021AE                       6390 00118$:
                                   6391 ;	calc.c:378: printstr("+\tadd top 2\r\n");
      0021AE 7Dr2B            [12] 6392 	mov	r5,#___str_22
      0021B0 7Es01            [12] 6393 	mov	r6,#(___str_22 >> 8)
      0021B2 7F 80            [12] 6394 	mov	r7,#0x80
                                   6395 ;	calc.c:50: return;
      0021B4                       6396 00178$:
                                   6397 ;	calc.c:48: for (; *s; s++) putchar(*s);
      0021B4 8D 82            [24] 6398 	mov	dpl,r5
      0021B6 8E 83            [24] 6399 	mov	dph,r6
      0021B8 8F F0            [24] 6400 	mov	b,r7
      0021BA 12r00r00         [24] 6401 	lcall	__gptrget
      0021BD FC               [12] 6402 	mov	r4,a
      0021BE 60 10            [24] 6403 	jz	00120$
      0021C0 7B 00            [12] 6404 	mov	r3,#0x00
      0021C2 8C 82            [24] 6405 	mov	dpl,r4
      0021C4 8B 83            [24] 6406 	mov	dph,r3
      0021C6 12r00r00         [24] 6407 	lcall	_putchar
      0021C9 0D               [12] 6408 	inc	r5
                                   6409 ;	calc.c:378: printstr("+\tadd top 2\r\n");
      0021CA BD 00 E7         [24] 6410 	cjne	r5,#0x00,00178$
      0021CD 0E               [12] 6411 	inc	r6
      0021CE 80 E4            [24] 6412 	sjmp	00178$
      0021D0                       6413 00120$:
                                   6414 ;	calc.c:379: printstr("-\tsubtract top 2\r\n");
      0021D0 7Dr39            [12] 6415 	mov	r5,#___str_23
      0021D2 7Es01            [12] 6416 	mov	r6,#(___str_23 >> 8)
      0021D4 7F 80            [12] 6417 	mov	r7,#0x80
                                   6418 ;	calc.c:50: return;
      0021D6                       6419 00181$:
                                   6420 ;	calc.c:48: for (; *s; s++) putchar(*s);
      0021D6 8D 82            [24] 6421 	mov	dpl,r5
      0021D8 8E 83            [24] 6422 	mov	dph,r6
      0021DA 8F F0            [24] 6423 	mov	b,r7
      0021DC 12r00r00         [24] 6424 	lcall	__gptrget
      0021DF FC               [12] 6425 	mov	r4,a
      0021E0 60 10            [24] 6426 	jz	00122$
      0021E2 7B 00            [12] 6427 	mov	r3,#0x00
      0021E4 8C 82            [24] 6428 	mov	dpl,r4
      0021E6 8B 83            [24] 6429 	mov	dph,r3
      0021E8 12r00r00         [24] 6430 	lcall	_putchar
      0021EB 0D               [12] 6431 	inc	r5
                                   6432 ;	calc.c:379: printstr("-\tsubtract top 2\r\n");
      0021EC BD 00 E7         [24] 6433 	cjne	r5,#0x00,00181$
      0021EF 0E               [12] 6434 	inc	r6
      0021F0 80 E4            [24] 6435 	sjmp	00181$
      0021F2                       6436 00122$:
                                   6437 ;	calc.c:380: printstr("*\tmultiply top 2\r\n");
      0021F2 7Dr4C            [12] 6438 	mov	r5,#___str_24
      0021F4 7Es01            [12] 6439 	mov	r6,#(___str_24 >> 8)
      0021F6 7F 80            [12] 6440 	mov	r7,#0x80
                                   6441 ;	calc.c:50: return;
      0021F8                       6442 00184$:
                                   6443 ;	calc.c:48: for (; *s; s++) putchar(*s);
      0021F8 8D 82            [24] 6444 	mov	dpl,r5
      0021FA 8E 83            [24] 6445 	mov	dph,r6
      0021FC 8F F0            [24] 6446 	mov	b,r7
      0021FE 12r00r00         [24] 6447 	lcall	__gptrget
      002201 FC               [12] 6448 	mov	r4,a
      002202 60 10            [24] 6449 	jz	00124$
      002204 7B 00            [12] 6450 	mov	r3,#0x00
      002206 8C 82            [24] 6451 	mov	dpl,r4
      002208 8B 83            [24] 6452 	mov	dph,r3
      00220A 12r00r00         [24] 6453 	lcall	_putchar
      00220D 0D               [12] 6454 	inc	r5
                                   6455 ;	calc.c:380: printstr("*\tmultiply top 2\r\n");
      00220E BD 00 E7         [24] 6456 	cjne	r5,#0x00,00184$
      002211 0E               [12] 6457 	inc	r6
      002212 80 E4            [24] 6458 	sjmp	00184$
      002214                       6459 00124$:
                                   6460 ;	calc.c:381: printstr("/\tdivide top 2\r\n");
      002214 7Dr5F            [12] 6461 	mov	r5,#___str_25
      002216 7Es01            [12] 6462 	mov	r6,#(___str_25 >> 8)
      002218 7F 80            [12] 6463 	mov	r7,#0x80
                                   6464 ;	calc.c:50: return;
      00221A                       6465 00187$:
                                   6466 ;	calc.c:48: for (; *s; s++) putchar(*s);
      00221A 8D 82            [24] 6467 	mov	dpl,r5
      00221C 8E 83            [24] 6468 	mov	dph,r6
      00221E 8F F0            [24] 6469 	mov	b,r7
      002220 12r00r00         [24] 6470 	lcall	__gptrget
      002223 FC               [12] 6471 	mov	r4,a
      002224 60 10            [24] 6472 	jz	00126$
      002226 7B 00            [12] 6473 	mov	r3,#0x00
      002228 8C 82            [24] 6474 	mov	dpl,r4
      00222A 8B 83            [24] 6475 	mov	dph,r3
      00222C 12r00r00         [24] 6476 	lcall	_putchar
      00222F 0D               [12] 6477 	inc	r5
                                   6478 ;	calc.c:381: printstr("/\tdivide top 2\r\n");
      002230 BD 00 E7         [24] 6479 	cjne	r5,#0x00,00187$
      002233 0E               [12] 6480 	inc	r6
      002234 80 E4            [24] 6481 	sjmp	00187$
      002236                       6482 00126$:
                                   6483 ;	calc.c:382: printstr("\\\tdivide top 2 unsigned\r\n");	
      002236 7Dr70            [12] 6484 	mov	r5,#___str_26
      002238 7Es01            [12] 6485 	mov	r6,#(___str_26 >> 8)
      00223A 7F 80            [12] 6486 	mov	r7,#0x80
                                   6487 ;	calc.c:50: return;
      00223C                       6488 00190$:
                                   6489 ;	calc.c:48: for (; *s; s++) putchar(*s);
      00223C 8D 82            [24] 6490 	mov	dpl,r5
      00223E 8E 83            [24] 6491 	mov	dph,r6
      002240 8F F0            [24] 6492 	mov	b,r7
      002242 12r00r00         [24] 6493 	lcall	__gptrget
      002245 FC               [12] 6494 	mov	r4,a
      002246 60 10            [24] 6495 	jz	00128$
      002248 7B 00            [12] 6496 	mov	r3,#0x00
      00224A 8C 82            [24] 6497 	mov	dpl,r4
      00224C 8B 83            [24] 6498 	mov	dph,r3
      00224E 12r00r00         [24] 6499 	lcall	_putchar
      002251 0D               [12] 6500 	inc	r5
                                   6501 ;	calc.c:382: printstr("\\\tdivide top 2 unsigned\r\n");	
      002252 BD 00 E7         [24] 6502 	cjne	r5,#0x00,00190$
      002255 0E               [12] 6503 	inc	r6
      002256 80 E4            [24] 6504 	sjmp	00190$
      002258                       6505 00128$:
                                   6506 ;	calc.c:383: printstr("%\tmodulus top 2\r\n");
      002258 7Dr8A            [12] 6507 	mov	r5,#___str_27
      00225A 7Es01            [12] 6508 	mov	r6,#(___str_27 >> 8)
      00225C 7F 80            [12] 6509 	mov	r7,#0x80
                                   6510 ;	calc.c:50: return;
      00225E                       6511 00193$:
                                   6512 ;	calc.c:48: for (; *s; s++) putchar(*s);
      00225E 8D 82            [24] 6513 	mov	dpl,r5
      002260 8E 83            [24] 6514 	mov	dph,r6
      002262 8F F0            [24] 6515 	mov	b,r7
      002264 12r00r00         [24] 6516 	lcall	__gptrget
      002267 FC               [12] 6517 	mov	r4,a
      002268 60 10            [24] 6518 	jz	00130$
      00226A 7B 00            [12] 6519 	mov	r3,#0x00
      00226C 8C 82            [24] 6520 	mov	dpl,r4
      00226E 8B 83            [24] 6521 	mov	dph,r3
      002270 12r00r00         [24] 6522 	lcall	_putchar
      002273 0D               [12] 6523 	inc	r5
                                   6524 ;	calc.c:383: printstr("%\tmodulus top 2\r\n");
      002274 BD 00 E7         [24] 6525 	cjne	r5,#0x00,00193$
      002277 0E               [12] 6526 	inc	r6
      002278 80 E4            [24] 6527 	sjmp	00193$
      00227A                       6528 00130$:
                                   6529 ;	calc.c:384: printstr("#\tmodulus top 2 unsigned\r\n");
      00227A 7Dr9C            [12] 6530 	mov	r5,#___str_28
      00227C 7Es01            [12] 6531 	mov	r6,#(___str_28 >> 8)
      00227E 7F 80            [12] 6532 	mov	r7,#0x80
                                   6533 ;	calc.c:50: return;
      002280                       6534 00196$:
                                   6535 ;	calc.c:48: for (; *s; s++) putchar(*s);
      002280 8D 82            [24] 6536 	mov	dpl,r5
      002282 8E 83            [24] 6537 	mov	dph,r6
      002284 8F F0            [24] 6538 	mov	b,r7
      002286 12r00r00         [24] 6539 	lcall	__gptrget
      002289 FC               [12] 6540 	mov	r4,a
      00228A 60 10            [24] 6541 	jz	00132$
      00228C 7B 00            [12] 6542 	mov	r3,#0x00
      00228E 8C 82            [24] 6543 	mov	dpl,r4
      002290 8B 83            [24] 6544 	mov	dph,r3
      002292 12r00r00         [24] 6545 	lcall	_putchar
      002295 0D               [12] 6546 	inc	r5
                                   6547 ;	calc.c:384: printstr("#\tmodulus top 2 unsigned\r\n");
      002296 BD 00 E7         [24] 6548 	cjne	r5,#0x00,00196$
      002299 0E               [12] 6549 	inc	r6
      00229A 80 E4            [24] 6550 	sjmp	00196$
      00229C                       6551 00132$:
                                   6552 ;	calc.c:385: printstr("&\tand top 2\r\n");
      00229C 7DrB7            [12] 6553 	mov	r5,#___str_29
      00229E 7Es01            [12] 6554 	mov	r6,#(___str_29 >> 8)
      0022A0 7F 80            [12] 6555 	mov	r7,#0x80
                                   6556 ;	calc.c:50: return;
      0022A2                       6557 00199$:
                                   6558 ;	calc.c:48: for (; *s; s++) putchar(*s);
      0022A2 8D 82            [24] 6559 	mov	dpl,r5
      0022A4 8E 83            [24] 6560 	mov	dph,r6
      0022A6 8F F0            [24] 6561 	mov	b,r7
      0022A8 12r00r00         [24] 6562 	lcall	__gptrget
      0022AB FC               [12] 6563 	mov	r4,a
      0022AC 60 10            [24] 6564 	jz	00134$
      0022AE 7B 00            [12] 6565 	mov	r3,#0x00
      0022B0 8C 82            [24] 6566 	mov	dpl,r4
      0022B2 8B 83            [24] 6567 	mov	dph,r3
      0022B4 12r00r00         [24] 6568 	lcall	_putchar
      0022B7 0D               [12] 6569 	inc	r5
                                   6570 ;	calc.c:385: printstr("&\tand top 2\r\n");
      0022B8 BD 00 E7         [24] 6571 	cjne	r5,#0x00,00199$
      0022BB 0E               [12] 6572 	inc	r6
      0022BC 80 E4            [24] 6573 	sjmp	00199$
      0022BE                       6574 00134$:
                                   6575 ;	calc.c:386: printstr("|\tor top 2\r\n");
      0022BE 7DrC5            [12] 6576 	mov	r5,#___str_30
      0022C0 7Es01            [12] 6577 	mov	r6,#(___str_30 >> 8)
      0022C2 7F 80            [12] 6578 	mov	r7,#0x80
                                   6579 ;	calc.c:50: return;
      0022C4                       6580 00202$:
                                   6581 ;	calc.c:48: for (; *s; s++) putchar(*s);
      0022C4 8D 82            [24] 6582 	mov	dpl,r5
      0022C6 8E 83            [24] 6583 	mov	dph,r6
      0022C8 8F F0            [24] 6584 	mov	b,r7
      0022CA 12r00r00         [24] 6585 	lcall	__gptrget
      0022CD FC               [12] 6586 	mov	r4,a
      0022CE 60 10            [24] 6587 	jz	00136$
      0022D0 7B 00            [12] 6588 	mov	r3,#0x00
      0022D2 8C 82            [24] 6589 	mov	dpl,r4
      0022D4 8B 83            [24] 6590 	mov	dph,r3
      0022D6 12r00r00         [24] 6591 	lcall	_putchar
      0022D9 0D               [12] 6592 	inc	r5
                                   6593 ;	calc.c:386: printstr("|\tor top 2\r\n");
      0022DA BD 00 E7         [24] 6594 	cjne	r5,#0x00,00202$
      0022DD 0E               [12] 6595 	inc	r6
      0022DE 80 E4            [24] 6596 	sjmp	00202$
      0022E0                       6597 00136$:
                                   6598 ;	calc.c:387: printstr("^\txor top 2\r\n");
      0022E0 7DrD2            [12] 6599 	mov	r5,#___str_31
      0022E2 7Es01            [12] 6600 	mov	r6,#(___str_31 >> 8)
      0022E4 7F 80            [12] 6601 	mov	r7,#0x80
                                   6602 ;	calc.c:50: return;
      0022E6                       6603 00205$:
                                   6604 ;	calc.c:48: for (; *s; s++) putchar(*s);
      0022E6 8D 82            [24] 6605 	mov	dpl,r5
      0022E8 8E 83            [24] 6606 	mov	dph,r6
      0022EA 8F F0            [24] 6607 	mov	b,r7
      0022EC 12r00r00         [24] 6608 	lcall	__gptrget
      0022EF FC               [12] 6609 	mov	r4,a
      0022F0 60 10            [24] 6610 	jz	00138$
      0022F2 7B 00            [12] 6611 	mov	r3,#0x00
      0022F4 8C 82            [24] 6612 	mov	dpl,r4
      0022F6 8B 83            [24] 6613 	mov	dph,r3
      0022F8 12r00r00         [24] 6614 	lcall	_putchar
      0022FB 0D               [12] 6615 	inc	r5
                                   6616 ;	calc.c:387: printstr("^\txor top 2\r\n");
      0022FC BD 00 E7         [24] 6617 	cjne	r5,#0x00,00205$
      0022FF 0E               [12] 6618 	inc	r6
      002300 80 E4            [24] 6619 	sjmp	00205$
      002302                       6620 00138$:
                                   6621 ;	calc.c:388: printstr(">\tshift right top 2\r\n");
      002302 7DrE0            [12] 6622 	mov	r5,#___str_32
      002304 7Es01            [12] 6623 	mov	r6,#(___str_32 >> 8)
      002306 7F 80            [12] 6624 	mov	r7,#0x80
                                   6625 ;	calc.c:50: return;
      002308                       6626 00208$:
                                   6627 ;	calc.c:48: for (; *s; s++) putchar(*s);
      002308 8D 82            [24] 6628 	mov	dpl,r5
      00230A 8E 83            [24] 6629 	mov	dph,r6
      00230C 8F F0            [24] 6630 	mov	b,r7
      00230E 12r00r00         [24] 6631 	lcall	__gptrget
      002311 FC               [12] 6632 	mov	r4,a
      002312 60 10            [24] 6633 	jz	00140$
      002314 7B 00            [12] 6634 	mov	r3,#0x00
      002316 8C 82            [24] 6635 	mov	dpl,r4
      002318 8B 83            [24] 6636 	mov	dph,r3
      00231A 12r00r00         [24] 6637 	lcall	_putchar
      00231D 0D               [12] 6638 	inc	r5
                                   6639 ;	calc.c:388: printstr(">\tshift right top 2\r\n");
      00231E BD 00 E7         [24] 6640 	cjne	r5,#0x00,00208$
      002321 0E               [12] 6641 	inc	r6
      002322 80 E4            [24] 6642 	sjmp	00208$
      002324                       6643 00140$:
                                   6644 ;	calc.c:389: printstr("]\tarithmetic shift right top 2\r\n");
      002324 7DrF6            [12] 6645 	mov	r5,#___str_33
      002326 7Es01            [12] 6646 	mov	r6,#(___str_33 >> 8)
      002328 7F 80            [12] 6647 	mov	r7,#0x80
                                   6648 ;	calc.c:50: return;
      00232A                       6649 00211$:
                                   6650 ;	calc.c:48: for (; *s; s++) putchar(*s);
      00232A 8D 82            [24] 6651 	mov	dpl,r5
      00232C 8E 83            [24] 6652 	mov	dph,r6
      00232E 8F F0            [24] 6653 	mov	b,r7
      002330 12r00r00         [24] 6654 	lcall	__gptrget
      002333 FC               [12] 6655 	mov	r4,a
      002334 60 10            [24] 6656 	jz	00142$
      002336 7B 00            [12] 6657 	mov	r3,#0x00
      002338 8C 82            [24] 6658 	mov	dpl,r4
      00233A 8B 83            [24] 6659 	mov	dph,r3
      00233C 12r00r00         [24] 6660 	lcall	_putchar
      00233F 0D               [12] 6661 	inc	r5
                                   6662 ;	calc.c:389: printstr("]\tarithmetic shift right top 2\r\n");
      002340 BD 00 E7         [24] 6663 	cjne	r5,#0x00,00211$
      002343 0E               [12] 6664 	inc	r6
      002344 80 E4            [24] 6665 	sjmp	00211$
      002346                       6666 00142$:
                                   6667 ;	calc.c:390: printstr("<\tshift left top 2\r\n");
      002346 7Dr17            [12] 6668 	mov	r5,#___str_34
      002348 7Es02            [12] 6669 	mov	r6,#(___str_34 >> 8)
      00234A 7F 80            [12] 6670 	mov	r7,#0x80
                                   6671 ;	calc.c:50: return;
      00234C                       6672 00214$:
                                   6673 ;	calc.c:48: for (; *s; s++) putchar(*s);
      00234C 8D 82            [24] 6674 	mov	dpl,r5
      00234E 8E 83            [24] 6675 	mov	dph,r6
      002350 8F F0            [24] 6676 	mov	b,r7
      002352 12r00r00         [24] 6677 	lcall	__gptrget
      002355 FC               [12] 6678 	mov	r4,a
      002356 60 10            [24] 6679 	jz	00144$
      002358 7B 00            [12] 6680 	mov	r3,#0x00
      00235A 8C 82            [24] 6681 	mov	dpl,r4
      00235C 8B 83            [24] 6682 	mov	dph,r3
      00235E 12r00r00         [24] 6683 	lcall	_putchar
      002361 0D               [12] 6684 	inc	r5
                                   6685 ;	calc.c:390: printstr("<\tshift left top 2\r\n");
      002362 BD 00 E7         [24] 6686 	cjne	r5,#0x00,00214$
      002365 0E               [12] 6687 	inc	r6
      002366 80 E4            [24] 6688 	sjmp	00214$
      002368                       6689 00144$:
                                   6690 ;	calc.c:391: printstr("~\tbitwise not top\r\n");
      002368 7Dr2C            [12] 6691 	mov	r5,#___str_35
      00236A 7Es02            [12] 6692 	mov	r6,#(___str_35 >> 8)
      00236C 7F 80            [12] 6693 	mov	r7,#0x80
                                   6694 ;	calc.c:50: return;
      00236E                       6695 00217$:
                                   6696 ;	calc.c:48: for (; *s; s++) putchar(*s);
      00236E 8D 82            [24] 6697 	mov	dpl,r5
      002370 8E 83            [24] 6698 	mov	dph,r6
      002372 8F F0            [24] 6699 	mov	b,r7
      002374 12r00r00         [24] 6700 	lcall	__gptrget
      002377 FC               [12] 6701 	mov	r4,a
      002378 60 10            [24] 6702 	jz	00146$
      00237A 7B 00            [12] 6703 	mov	r3,#0x00
      00237C 8C 82            [24] 6704 	mov	dpl,r4
      00237E 8B 83            [24] 6705 	mov	dph,r3
      002380 12r00r00         [24] 6706 	lcall	_putchar
      002383 0D               [12] 6707 	inc	r5
                                   6708 ;	calc.c:391: printstr("~\tbitwise not top\r\n");
      002384 BD 00 E7         [24] 6709 	cjne	r5,#0x00,00217$
      002387 0E               [12] 6710 	inc	r6
      002388 80 E4            [24] 6711 	sjmp	00217$
      00238A                       6712 00146$:
                                   6713 ;	calc.c:392: printstr("?\thelp\r\n");
      00238A 7Dr40            [12] 6714 	mov	r5,#___str_36
      00238C 7Es02            [12] 6715 	mov	r6,#(___str_36 >> 8)
      00238E 7F 80            [12] 6716 	mov	r7,#0x80
                                   6717 ;	calc.c:50: return;
      002390                       6718 00220$:
                                   6719 ;	calc.c:48: for (; *s; s++) putchar(*s);
      002390 8D 82            [24] 6720 	mov	dpl,r5
      002392 8E 83            [24] 6721 	mov	dph,r6
      002394 8F F0            [24] 6722 	mov	b,r7
      002396 12r00r00         [24] 6723 	lcall	__gptrget
      002399 FC               [12] 6724 	mov	r4,a
      00239A 60 10            [24] 6725 	jz	00148$
      00239C 7B 00            [12] 6726 	mov	r3,#0x00
      00239E 8C 82            [24] 6727 	mov	dpl,r4
      0023A0 8B 83            [24] 6728 	mov	dph,r3
      0023A2 12r00r00         [24] 6729 	lcall	_putchar
      0023A5 0D               [12] 6730 	inc	r5
                                   6731 ;	calc.c:392: printstr("?\thelp\r\n");
      0023A6 BD 00 E7         [24] 6732 	cjne	r5,#0x00,00220$
      0023A9 0E               [12] 6733 	inc	r6
      0023AA 80 E4            [24] 6734 	sjmp	00220$
      0023AC                       6735 00148$:
                                   6736 ;	calc.c:393: printstr("q\tquit\r\n");
      0023AC 7Dr49            [12] 6737 	mov	r5,#___str_37
      0023AE 7Es02            [12] 6738 	mov	r6,#(___str_37 >> 8)
      0023B0 7F 80            [12] 6739 	mov	r7,#0x80
                                   6740 ;	calc.c:50: return;
      0023B2                       6741 00223$:
                                   6742 ;	calc.c:48: for (; *s; s++) putchar(*s);
      0023B2 8D 82            [24] 6743 	mov	dpl,r5
      0023B4 8E 83            [24] 6744 	mov	dph,r6
      0023B6 8F F0            [24] 6745 	mov	b,r7
      0023B8 12r00r00         [24] 6746 	lcall	__gptrget
      0023BB FC               [12] 6747 	mov	r4,a
      0023BC 60 10            [24] 6748 	jz	00150$
      0023BE 7B 00            [12] 6749 	mov	r3,#0x00
      0023C0 8C 82            [24] 6750 	mov	dpl,r4
      0023C2 8B 83            [24] 6751 	mov	dph,r3
      0023C4 12r00r00         [24] 6752 	lcall	_putchar
      0023C7 0D               [12] 6753 	inc	r5
                                   6754 ;	calc.c:393: printstr("q\tquit\r\n");
      0023C8 BD 00 E7         [24] 6755 	cjne	r5,#0x00,00223$
      0023CB 0E               [12] 6756 	inc	r6
      0023CC 80 E4            [24] 6757 	sjmp	00223$
      0023CE                       6758 00150$:
                                   6759 ;	calc.c:395: return 1;
      0023CE 90 00 01         [24] 6760 	mov	dptr,#0x0001
                                   6761 ;	calc.c:396: }
      0023D1 85*00 81         [24] 6762 	mov	sp,_bp
      0023D4 D0*00            [24] 6763 	pop	_bp
      0023D6 22               [24] 6764 	ret
                                   6765 ;------------------------------------------------------------
                                   6766 ;Allocation info for local variables in function 'main'
                                   6767 ;------------------------------------------------------------
                                   6768 ;input                     Allocated to registers r6 r7 
                                   6769 ;__1966080149              Allocated to registers 
                                   6770 ;s                         Allocated to registers r2 r3 r4 
                                   6771 ;sloc0                     Allocated to stack - _bp +1
                                   6772 ;------------------------------------------------------------
                                   6773 ;	calc.c:425: void main(void) {
                                   6774 ;	-----------------------------------------
                                   6775 ;	 function main
                                   6776 ;	-----------------------------------------
      0023D7                       6777 _main:
      0023D7 C0*00            [24] 6778 	push	_bp
      0023D9 85 81*00         [24] 6779 	mov	_bp,sp
      0023DC 05 81            [12] 6780 	inc	sp
                                   6781 ;	calc.c:428: c.base = 10;
      0023DE 90r00r0C         [24] 6782 	mov	dptr,#_c
      0023E1 74 0A            [12] 6783 	mov	a,#0x0a
      0023E3 F0               [24] 6784 	movx	@dptr,a
      0023E4 E4               [12] 6785 	clr	a
      0023E5 A3               [24] 6786 	inc	dptr
      0023E6 F0               [24] 6787 	movx	@dptr,a
                                   6788 ;	calc.c:429: c.acc = 0l;
      0023E7 90r00r0E         [24] 6789 	mov	dptr,#(_c + 0x0002)
      0023EA F0               [24] 6790 	movx	@dptr,a
      0023EB A3               [24] 6791 	inc	dptr
      0023EC F0               [24] 6792 	movx	@dptr,a
      0023ED A3               [24] 6793 	inc	dptr
      0023EE F0               [24] 6794 	movx	@dptr,a
      0023EF A3               [24] 6795 	inc	dptr
      0023F0 F0               [24] 6796 	movx	@dptr,a
                                   6797 ;	calc.c:430: c.acc_valid = (char)0;
      0023F1 90r00r12         [24] 6798 	mov	dptr,#(_c + 0x0006)
      0023F4 F0               [24] 6799 	movx	@dptr,a
                                   6800 ;	calc.c:431: c.digit[0] = c.digit[1] = '\0';
      0023F5 90r00r14         [24] 6801 	mov	dptr,#(_c + 0x0008)
      0023F8 F0               [24] 6802 	movx	@dptr,a
      0023F9 90r00r13         [24] 6803 	mov	dptr,#(_c + 0x0007)
      0023FC F0               [24] 6804 	movx	@dptr,a
                                   6805 ;	calc.c:433: stack_init(&c.s);	
      0023FD 90r00r15         [24] 6806 	mov	dptr,#(_c + 0x0009)
      002400 75 F0 00         [24] 6807 	mov	b,#0x00
      002403 12r00r00         [24] 6808 	lcall	_stack_init
                                   6809 ;	calc.c:434: state_init(&s, STATE_START, STATE_FINAL, UNDEF, deltas, &c);
      002406 74r0C            [12] 6810 	mov	a,#_c
      002408 C0 E0            [24] 6811 	push	acc
      00240A 74s00            [12] 6812 	mov	a,#(_c >> 8)
      00240C C0 E0            [24] 6813 	push	acc
      00240E E4               [12] 6814 	clr	a
      00240F C0 E0            [24] 6815 	push	acc
      002411 74r00            [12] 6816 	mov	a,#_deltas
      002413 C0 E0            [24] 6817 	push	acc
      002415 74s00            [12] 6818 	mov	a,#(_deltas >> 8)
      002417 C0 E0            [24] 6819 	push	acc
      002419 E4               [12] 6820 	clr	a
      00241A C0 E0            [24] 6821 	push	acc
      00241C C0 E0            [24] 6822 	push	acc
      00241E 74 80            [12] 6823 	mov	a,#0x80
      002420 C0 E0            [24] 6824 	push	acc
      002422 74 03            [12] 6825 	mov	a,#0x03
      002424 C0 E0            [24] 6826 	push	acc
      002426 E4               [12] 6827 	clr	a
      002427 C0 E0            [24] 6828 	push	acc
      002429 C0 E0            [24] 6829 	push	acc
      00242B C0 E0            [24] 6830 	push	acc
      00242D 90r00r00         [24] 6831 	mov	dptr,#_s
      002430 75 F0 00         [24] 6832 	mov	b,#0x00
      002433 12r00r00         [24] 6833 	lcall	_state_init
      002436 E5 81            [12] 6834 	mov	a,sp
      002438 24 F4            [12] 6835 	add	a,#0xf4
      00243A F5 81            [12] 6836 	mov	sp,a
                                   6837 ;	calc.c:436: while (1) {
      00243C                       6838 00177$:
                                   6839 ;	calc.c:437: input = getchar();
      00243C 12r00r05         [24] 6840 	lcall	_getchar
      00243F AE 82            [24] 6841 	mov	r6,dpl
      002441 AF 83            [24] 6842 	mov	r7,dph
                                   6843 ;	calc.c:438: if (((char)input == '\r') || ((char)input == '\n')) printstr("\r\n");
      002443 8E 05            [24] 6844 	mov	ar5,r6
      002445 BD 0D 02         [24] 6845 	cjne	r5,#0x0d,00339$
      002448 80 03            [24] 6846 	sjmp	00101$
      00244A                       6847 00339$:
      00244A BD 0A 36         [24] 6848 	cjne	r5,#0x0a,00102$
      00244D                       6849 00101$:
      00244D 7Ar00            [12] 6850 	mov	r2,#___str_0
      00244F 7Bs00            [12] 6851 	mov	r3,#(___str_0 >> 8)
      002451 7C 80            [12] 6852 	mov	r4,#0x80
                                   6853 ;	calc.c:50: return;
      002453                       6854 00182$:
                                   6855 ;	calc.c:48: for (; *s; s++) putchar(*s);
      002453 8A 82            [24] 6856 	mov	dpl,r2
      002455 8B 83            [24] 6857 	mov	dph,r3
      002457 8C F0            [24] 6858 	mov	b,r4
      002459 A8*00            [24] 6859 	mov	r0,_bp
      00245B 08               [12] 6860 	inc	r0
      00245C 12r00r00         [24] 6861 	lcall	__gptrget
      00245F F6               [12] 6862 	mov	@r0,a
      002460 A8*00            [24] 6863 	mov	r0,_bp
      002462 08               [12] 6864 	inc	r0
      002463 E6               [12] 6865 	mov	a,@r0
      002464 60 24            [24] 6866 	jz	00103$
      002466 C0 06            [24] 6867 	push	ar6
      002468 C0 07            [24] 6868 	push	ar7
      00246A A8*00            [24] 6869 	mov	r0,_bp
      00246C 08               [12] 6870 	inc	r0
      00246D 86 06            [24] 6871 	mov	ar6,@r0
      00246F 7F 00            [12] 6872 	mov	r7,#0x00
      002471 8E 82            [24] 6873 	mov	dpl,r6
      002473 8F 83            [24] 6874 	mov	dph,r7
      002475 12r00r00         [24] 6875 	lcall	_putchar
      002478 0A               [12] 6876 	inc	r2
      002479 BA 00 01         [24] 6877 	cjne	r2,#0x00,00343$
      00247C 0B               [12] 6878 	inc	r3
      00247D                       6879 00343$:
      00247D D0 07            [24] 6880 	pop	ar7
      00247F D0 06            [24] 6881 	pop	ar6
                                   6882 ;	calc.c:438: if (((char)input == '\r') || ((char)input == '\n')) printstr("\r\n");
      002481 80 D0            [24] 6883 	sjmp	00182$
      002483                       6884 00102$:
                                   6885 ;	calc.c:439: else (void)putchar(input);
      002483 8E 82            [24] 6886 	mov	dpl,r6
      002485 8F 83            [24] 6887 	mov	dph,r7
      002487 12r00r00         [24] 6888 	lcall	_putchar
      00248A                       6889 00103$:
                                   6890 ;	calc.c:440: c.digit[0] = (char)input;
      00248A 90r00r13         [24] 6891 	mov	dptr,#(_c + 0x0007)
      00248D ED               [12] 6892 	mov	a,r5
      00248E F0               [24] 6893 	movx	@dptr,a
                                   6894 ;	calc.c:442: if ((char)input == 'q') {
      00248F BD 71 29         [24] 6895 	cjne	r5,#0x71,00174$
                                   6896 ;	calc.c:443: if (state_exec(&s, EVENT_TERM) <= 0) break;
      002492 74 07            [12] 6897 	mov	a,#0x07
      002494 C0 E0            [24] 6898 	push	acc
      002496 E4               [12] 6899 	clr	a
      002497 C0 E0            [24] 6900 	push	acc
      002499 90r00r00         [24] 6901 	mov	dptr,#_s
      00249C 75 F0 00         [24] 6902 	mov	b,#0x00
      00249F 12r00r00         [24] 6903 	lcall	_state_exec
      0024A2 AB 82            [24] 6904 	mov	r3,dpl
      0024A4 AC 83            [24] 6905 	mov	r4,dph
      0024A6 15 81            [12] 6906 	dec	sp
      0024A8 15 81            [12] 6907 	dec	sp
      0024AA C3               [12] 6908 	clr	c
      0024AB E4               [12] 6909 	clr	a
      0024AC 9B               [12] 6910 	subb	a,r3
      0024AD 74 80            [12] 6911 	mov	a,#(0x00 ^ 0x80)
      0024AF 8C F0            [24] 6912 	mov	b,r4
      0024B1 63 F0 80         [24] 6913 	xrl	b,#0x80
      0024B4 95 F0            [12] 6914 	subb	a,b
      0024B6 40 84            [24] 6915 	jc	00177$
      0024B8 02r26rF3         [24] 6916 	ljmp	00178$
      0024BB                       6917 00174$:
                                   6918 ;	calc.c:444: } else if ((char)input == '?') {
      0024BB BD 3F 2C         [24] 6919 	cjne	r5,#0x3f,00171$
                                   6920 ;	calc.c:445: if (state_exec(&s, EVENT_HELP) <= 0) break;
      0024BE 74 03            [12] 6921 	mov	a,#0x03
      0024C0 C0 E0            [24] 6922 	push	acc
      0024C2 E4               [12] 6923 	clr	a
      0024C3 C0 E0            [24] 6924 	push	acc
      0024C5 90r00r00         [24] 6925 	mov	dptr,#_s
      0024C8 75 F0 00         [24] 6926 	mov	b,#0x00
      0024CB 12r00r00         [24] 6927 	lcall	_state_exec
      0024CE AB 82            [24] 6928 	mov	r3,dpl
      0024D0 AC 83            [24] 6929 	mov	r4,dph
      0024D2 15 81            [12] 6930 	dec	sp
      0024D4 15 81            [12] 6931 	dec	sp
      0024D6 C3               [12] 6932 	clr	c
      0024D7 E4               [12] 6933 	clr	a
      0024D8 9B               [12] 6934 	subb	a,r3
      0024D9 74 80            [12] 6935 	mov	a,#(0x00 ^ 0x80)
      0024DB 8C F0            [24] 6936 	mov	b,r4
      0024DD 63 F0 80         [24] 6937 	xrl	b,#0x80
      0024E0 95 F0            [12] 6938 	subb	a,b
      0024E2 50 03            [24] 6939 	jnc	00349$
      0024E4 02r24r3C         [24] 6940 	ljmp	00177$
      0024E7                       6941 00349$:
      0024E7 02r26rF3         [24] 6942 	ljmp	00178$
      0024EA                       6943 00171$:
                                   6944 ;	calc.c:446: } else if ((char)input == 'i') {
      0024EA BD 69 2C         [24] 6945 	cjne	r5,#0x69,00168$
                                   6946 ;	calc.c:447: if (state_exec(&s, EVENT_RSTA_i) <= 0) break;
      0024ED 74 05            [12] 6947 	mov	a,#0x05
      0024EF C0 E0            [24] 6948 	push	acc
      0024F1 E4               [12] 6949 	clr	a
      0024F2 C0 E0            [24] 6950 	push	acc
      0024F4 90r00r00         [24] 6951 	mov	dptr,#_s
      0024F7 75 F0 00         [24] 6952 	mov	b,#0x00
      0024FA 12r00r00         [24] 6953 	lcall	_state_exec
      0024FD AB 82            [24] 6954 	mov	r3,dpl
      0024FF AC 83            [24] 6955 	mov	r4,dph
      002501 15 81            [12] 6956 	dec	sp
      002503 15 81            [12] 6957 	dec	sp
      002505 C3               [12] 6958 	clr	c
      002506 E4               [12] 6959 	clr	a
      002507 9B               [12] 6960 	subb	a,r3
      002508 74 80            [12] 6961 	mov	a,#(0x00 ^ 0x80)
      00250A 8C F0            [24] 6962 	mov	b,r4
      00250C 63 F0 80         [24] 6963 	xrl	b,#0x80
      00250F 95 F0            [12] 6964 	subb	a,b
      002511 50 03            [24] 6965 	jnc	00352$
      002513 02r24r3C         [24] 6966 	ljmp	00177$
      002516                       6967 00352$:
      002516 02r26rF3         [24] 6968 	ljmp	00178$
      002519                       6969 00168$:
                                   6970 ;	calc.c:448: } else if ((char)input == 'I') {
      002519 BD 49 2C         [24] 6971 	cjne	r5,#0x49,00165$
                                   6972 ;	calc.c:449: if (state_exec(&s, EVENT_RSTA_I) <= 0) break;
      00251C 74 06            [12] 6973 	mov	a,#0x06
      00251E C0 E0            [24] 6974 	push	acc
      002520 E4               [12] 6975 	clr	a
      002521 C0 E0            [24] 6976 	push	acc
      002523 90r00r00         [24] 6977 	mov	dptr,#_s
      002526 75 F0 00         [24] 6978 	mov	b,#0x00
      002529 12r00r00         [24] 6979 	lcall	_state_exec
      00252C AB 82            [24] 6980 	mov	r3,dpl
      00252E AC 83            [24] 6981 	mov	r4,dph
      002530 15 81            [12] 6982 	dec	sp
      002532 15 81            [12] 6983 	dec	sp
      002534 C3               [12] 6984 	clr	c
      002535 E4               [12] 6985 	clr	a
      002536 9B               [12] 6986 	subb	a,r3
      002537 74 80            [12] 6987 	mov	a,#(0x00 ^ 0x80)
      002539 8C F0            [24] 6988 	mov	b,r4
      00253B 63 F0 80         [24] 6989 	xrl	b,#0x80
      00253E 95 F0            [12] 6990 	subb	a,b
      002540 50 03            [24] 6991 	jnc	00355$
      002542 02r24r3C         [24] 6992 	ljmp	00177$
      002545                       6993 00355$:
      002545 02r26rF3         [24] 6994 	ljmp	00178$
      002548                       6995 00165$:
                                   6996 ;	calc.c:451: ((char)input == 'h') || ((char)input == 'H') ||
      002548 BD 68 02         [24] 6997 	cjne	r5,#0x68,00356$
      00254B 80 0D            [24] 6998 	sjmp	00158$
      00254D                       6999 00356$:
      00254D BD 48 02         [24] 7000 	cjne	r5,#0x48,00357$
      002550 80 08            [24] 7001 	sjmp	00158$
      002552                       7002 00357$:
                                   7003 ;	calc.c:452: ((char)input == 'o') || ((char)input == 'O')
      002552 BD 6F 02         [24] 7004 	cjne	r5,#0x6f,00358$
      002555 80 03            [24] 7005 	sjmp	00158$
      002557                       7006 00358$:
      002557 BD 4F 2C         [24] 7007 	cjne	r5,#0x4f,00159$
      00255A                       7008 00158$:
                                   7009 ;	calc.c:454: if (state_exec(&s, EVENT_BASE) <= 0) break;
      00255A 74 04            [12] 7010 	mov	a,#0x04
      00255C C0 E0            [24] 7011 	push	acc
      00255E E4               [12] 7012 	clr	a
      00255F C0 E0            [24] 7013 	push	acc
      002561 90r00r00         [24] 7014 	mov	dptr,#_s
      002564 75 F0 00         [24] 7015 	mov	b,#0x00
      002567 12r00r00         [24] 7016 	lcall	_state_exec
      00256A AB 82            [24] 7017 	mov	r3,dpl
      00256C AC 83            [24] 7018 	mov	r4,dph
      00256E 15 81            [12] 7019 	dec	sp
      002570 15 81            [12] 7020 	dec	sp
      002572 C3               [12] 7021 	clr	c
      002573 E4               [12] 7022 	clr	a
      002574 9B               [12] 7023 	subb	a,r3
      002575 74 80            [12] 7024 	mov	a,#(0x00 ^ 0x80)
      002577 8C F0            [24] 7025 	mov	b,r4
      002579 63 F0 80         [24] 7026 	xrl	b,#0x80
      00257C 95 F0            [12] 7027 	subb	a,b
      00257E 50 03            [24] 7028 	jnc	00361$
      002580 02r24r3C         [24] 7029 	ljmp	00177$
      002583                       7030 00361$:
      002583 02r26rF3         [24] 7031 	ljmp	00178$
      002586                       7032 00159$:
                                   7033 ;	calc.c:455: } else if (isxdigit(input)) {
      002586 8E 82            [24] 7034 	mov	dpl,r6
      002588 8F 83            [24] 7035 	mov	dph,r7
      00258A C0 05            [24] 7036 	push	ar5
      00258C 12r00r00         [24] 7037 	lcall	_isxdigit
      00258F E5 82            [12] 7038 	mov	a,dpl
      002591 85 83 F0         [24] 7039 	mov	b,dph
      002594 D0 05            [24] 7040 	pop	ar5
      002596 45 F0            [12] 7041 	orl	a,b
      002598 60 2C            [24] 7042 	jz	00156$
                                   7043 ;	calc.c:456: if (state_exec(&s, EVENT_DIGIT) <= 0) break;
      00259A 74 01            [12] 7044 	mov	a,#0x01
      00259C C0 E0            [24] 7045 	push	acc
      00259E E4               [12] 7046 	clr	a
      00259F C0 E0            [24] 7047 	push	acc
      0025A1 90r00r00         [24] 7048 	mov	dptr,#_s
      0025A4 75 F0 00         [24] 7049 	mov	b,#0x00
      0025A7 12r00r00         [24] 7050 	lcall	_state_exec
      0025AA AE 82            [24] 7051 	mov	r6,dpl
      0025AC AF 83            [24] 7052 	mov	r7,dph
      0025AE 15 81            [12] 7053 	dec	sp
      0025B0 15 81            [12] 7054 	dec	sp
      0025B2 C3               [12] 7055 	clr	c
      0025B3 E4               [12] 7056 	clr	a
      0025B4 9E               [12] 7057 	subb	a,r6
      0025B5 74 80            [12] 7058 	mov	a,#(0x00 ^ 0x80)
      0025B7 8F F0            [24] 7059 	mov	b,r7
      0025B9 63 F0 80         [24] 7060 	xrl	b,#0x80
      0025BC 95 F0            [12] 7061 	subb	a,b
      0025BE 50 03            [24] 7062 	jnc	00363$
      0025C0 02r24r3C         [24] 7063 	ljmp	00177$
      0025C3                       7064 00363$:
      0025C3 02r26rF3         [24] 7065 	ljmp	00178$
      0025C6                       7066 00156$:
                                   7067 ;	calc.c:458: ((char)input == 'p') || ((char)input == 'P') ||
      0025C6 BD 70 02         [24] 7068 	cjne	r5,#0x70,00364$
      0025C9 80 17            [24] 7069 	sjmp	00147$
      0025CB                       7070 00364$:
      0025CB BD 50 02         [24] 7071 	cjne	r5,#0x50,00365$
      0025CE 80 12            [24] 7072 	sjmp	00147$
      0025D0                       7073 00365$:
                                   7074 ;	calc.c:459: ((char)input == 'v') || ((char)input == 'V') ||
      0025D0 BD 76 02         [24] 7075 	cjne	r5,#0x76,00366$
      0025D3 80 0D            [24] 7076 	sjmp	00147$
      0025D5                       7077 00366$:
      0025D5 BD 56 02         [24] 7078 	cjne	r5,#0x56,00367$
      0025D8 80 08            [24] 7079 	sjmp	00147$
      0025DA                       7080 00367$:
                                   7081 ;	calc.c:460: ((char)input == '.') ||
      0025DA BD 2E 02         [24] 7082 	cjne	r5,#0x2e,00368$
      0025DD 80 03            [24] 7083 	sjmp	00147$
      0025DF                       7084 00368$:
                                   7085 ;	calc.c:461: ((char)input == 'x')
      0025DF BD 78 2C         [24] 7086 	cjne	r5,#0x78,00148$
      0025E2                       7087 00147$:
                                   7088 ;	calc.c:463: if (state_exec(&s, EVENT_OP) <= 0) break;
      0025E2 74 02            [12] 7089 	mov	a,#0x02
      0025E4 C0 E0            [24] 7090 	push	acc
      0025E6 E4               [12] 7091 	clr	a
      0025E7 C0 E0            [24] 7092 	push	acc
      0025E9 90r00r00         [24] 7093 	mov	dptr,#_s
      0025EC 75 F0 00         [24] 7094 	mov	b,#0x00
      0025EF 12r00r00         [24] 7095 	lcall	_state_exec
      0025F2 AE 82            [24] 7096 	mov	r6,dpl
      0025F4 AF 83            [24] 7097 	mov	r7,dph
      0025F6 15 81            [12] 7098 	dec	sp
      0025F8 15 81            [12] 7099 	dec	sp
      0025FA C3               [12] 7100 	clr	c
      0025FB E4               [12] 7101 	clr	a
      0025FC 9E               [12] 7102 	subb	a,r6
      0025FD 74 80            [12] 7103 	mov	a,#(0x00 ^ 0x80)
      0025FF 8F F0            [24] 7104 	mov	b,r7
      002601 63 F0 80         [24] 7105 	xrl	b,#0x80
      002604 95 F0            [12] 7106 	subb	a,b
      002606 50 03            [24] 7107 	jnc	00371$
      002608 02r24r3C         [24] 7108 	ljmp	00177$
      00260B                       7109 00371$:
      00260B 02r26rF3         [24] 7110 	ljmp	00178$
      00260E                       7111 00148$:
                                   7112 ;	calc.c:465: ((char)input == '+') || ((char)input == '-')
      00260E BD 2B 02         [24] 7113 	cjne	r5,#0x2b,00372$
      002611 80 03            [24] 7114 	sjmp	00143$
      002613                       7115 00372$:
      002613 BD 2D 2C         [24] 7116 	cjne	r5,#0x2d,00144$
      002616                       7117 00143$:
                                   7118 ;	calc.c:467: if (state_exec(&s, EVENT_OP) <= 0) break;
      002616 74 02            [12] 7119 	mov	a,#0x02
      002618 C0 E0            [24] 7120 	push	acc
      00261A E4               [12] 7121 	clr	a
      00261B C0 E0            [24] 7122 	push	acc
      00261D 90r00r00         [24] 7123 	mov	dptr,#_s
      002620 75 F0 00         [24] 7124 	mov	b,#0x00
      002623 12r00r00         [24] 7125 	lcall	_state_exec
      002626 AE 82            [24] 7126 	mov	r6,dpl
      002628 AF 83            [24] 7127 	mov	r7,dph
      00262A 15 81            [12] 7128 	dec	sp
      00262C 15 81            [12] 7129 	dec	sp
      00262E C3               [12] 7130 	clr	c
      00262F E4               [12] 7131 	clr	a
      002630 9E               [12] 7132 	subb	a,r6
      002631 74 80            [12] 7133 	mov	a,#(0x00 ^ 0x80)
      002633 8F F0            [24] 7134 	mov	b,r7
      002635 63 F0 80         [24] 7135 	xrl	b,#0x80
      002638 95 F0            [12] 7136 	subb	a,b
      00263A 50 03            [24] 7137 	jnc	00375$
      00263C 02r24r3C         [24] 7138 	ljmp	00177$
      00263F                       7139 00375$:
      00263F 02r26rF3         [24] 7140 	ljmp	00178$
      002642                       7141 00144$:
                                   7142 ;	calc.c:469: ((char)input == '*') ||
      002642 BD 2A 02         [24] 7143 	cjne	r5,#0x2a,00376$
      002645 80 12            [24] 7144 	sjmp	00136$
      002647                       7145 00376$:
                                   7146 ;	calc.c:470: ((char)input == '/') || ((char)input == '\\') ||
      002647 BD 2F 02         [24] 7147 	cjne	r5,#0x2f,00377$
      00264A 80 0D            [24] 7148 	sjmp	00136$
      00264C                       7149 00377$:
      00264C BD 5C 02         [24] 7150 	cjne	r5,#0x5c,00378$
      00264F 80 08            [24] 7151 	sjmp	00136$
      002651                       7152 00378$:
                                   7153 ;	calc.c:471: ((char)input == '%') || ((char)input == '#')
      002651 BD 25 02         [24] 7154 	cjne	r5,#0x25,00379$
      002654 80 03            [24] 7155 	sjmp	00136$
      002656                       7156 00379$:
      002656 BD 23 29         [24] 7157 	cjne	r5,#0x23,00137$
      002659                       7158 00136$:
                                   7159 ;	calc.c:473: if (state_exec(&s, EVENT_OP) <= 0) break;
      002659 74 02            [12] 7160 	mov	a,#0x02
      00265B C0 E0            [24] 7161 	push	acc
      00265D E4               [12] 7162 	clr	a
      00265E C0 E0            [24] 7163 	push	acc
      002660 90r00r00         [24] 7164 	mov	dptr,#_s
      002663 75 F0 00         [24] 7165 	mov	b,#0x00
      002666 12r00r00         [24] 7166 	lcall	_state_exec
      002669 AE 82            [24] 7167 	mov	r6,dpl
      00266B AF 83            [24] 7168 	mov	r7,dph
      00266D 15 81            [12] 7169 	dec	sp
      00266F 15 81            [12] 7170 	dec	sp
      002671 C3               [12] 7171 	clr	c
      002672 E4               [12] 7172 	clr	a
      002673 9E               [12] 7173 	subb	a,r6
      002674 74 80            [12] 7174 	mov	a,#(0x00 ^ 0x80)
      002676 8F F0            [24] 7175 	mov	b,r7
      002678 63 F0 80         [24] 7176 	xrl	b,#0x80
      00267B 95 F0            [12] 7177 	subb	a,b
      00267D 50 74            [24] 7178 	jnc	00178$
      00267F 02r24r3C         [24] 7179 	ljmp	00177$
      002682                       7180 00137$:
                                   7181 ;	calc.c:475: ((char)input == '&') ||
      002682 BD 26 02         [24] 7182 	cjne	r5,#0x26,00383$
      002685 80 1C            [24] 7183 	sjmp	00127$
      002687                       7184 00383$:
                                   7185 ;	calc.c:476: ((char)input == '|') || ((char)input == '^') ||
      002687 BD 7C 02         [24] 7186 	cjne	r5,#0x7c,00384$
      00268A 80 17            [24] 7187 	sjmp	00127$
      00268C                       7188 00384$:
      00268C BD 5E 02         [24] 7189 	cjne	r5,#0x5e,00385$
      00268F 80 12            [24] 7190 	sjmp	00127$
      002691                       7191 00385$:
                                   7192 ;	calc.c:477: ((char)input == '~') ||
      002691 BD 7E 02         [24] 7193 	cjne	r5,#0x7e,00386$
      002694 80 0D            [24] 7194 	sjmp	00127$
      002696                       7195 00386$:
                                   7196 ;	calc.c:478: ((char)input == '>') || ((char)input == ']') ||
      002696 BD 3E 02         [24] 7197 	cjne	r5,#0x3e,00387$
      002699 80 08            [24] 7198 	sjmp	00127$
      00269B                       7199 00387$:
      00269B BD 5D 02         [24] 7200 	cjne	r5,#0x5d,00388$
      00269E 80 03            [24] 7201 	sjmp	00127$
      0026A0                       7202 00388$:
                                   7203 ;	calc.c:479: ((char)input == '<')
      0026A0 BD 3C 29         [24] 7204 	cjne	r5,#0x3c,00128$
      0026A3                       7205 00127$:
                                   7206 ;	calc.c:481: if (state_exec(&s, EVENT_OP) <= 0) break;
      0026A3 74 02            [12] 7207 	mov	a,#0x02
      0026A5 C0 E0            [24] 7208 	push	acc
      0026A7 E4               [12] 7209 	clr	a
      0026A8 C0 E0            [24] 7210 	push	acc
      0026AA 90r00r00         [24] 7211 	mov	dptr,#_s
      0026AD 75 F0 00         [24] 7212 	mov	b,#0x00
      0026B0 12r00r00         [24] 7213 	lcall	_state_exec
      0026B3 AE 82            [24] 7214 	mov	r6,dpl
      0026B5 AF 83            [24] 7215 	mov	r7,dph
      0026B7 15 81            [12] 7216 	dec	sp
      0026B9 15 81            [12] 7217 	dec	sp
      0026BB C3               [12] 7218 	clr	c
      0026BC E4               [12] 7219 	clr	a
      0026BD 9E               [12] 7220 	subb	a,r6
      0026BE 74 80            [12] 7221 	mov	a,#(0x00 ^ 0x80)
      0026C0 8F F0            [24] 7222 	mov	b,r7
      0026C2 63 F0 80         [24] 7223 	xrl	b,#0x80
      0026C5 95 F0            [12] 7224 	subb	a,b
      0026C7 50 2A            [24] 7225 	jnc	00178$
      0026C9 02r24r3C         [24] 7226 	ljmp	00177$
      0026CC                       7227 00128$:
                                   7228 ;	calc.c:483: if (state_exec(&s, EVENT_DELIM) <= 0) break;
      0026CC E4               [12] 7229 	clr	a
      0026CD C0 E0            [24] 7230 	push	acc
      0026CF C0 E0            [24] 7231 	push	acc
      0026D1 90r00r00         [24] 7232 	mov	dptr,#_s
      0026D4 75 F0 00         [24] 7233 	mov	b,#0x00
      0026D7 12r00r00         [24] 7234 	lcall	_state_exec
      0026DA AE 82            [24] 7235 	mov	r6,dpl
      0026DC AF 83            [24] 7236 	mov	r7,dph
      0026DE 15 81            [12] 7237 	dec	sp
      0026E0 15 81            [12] 7238 	dec	sp
      0026E2 C3               [12] 7239 	clr	c
      0026E3 E4               [12] 7240 	clr	a
      0026E4 9E               [12] 7241 	subb	a,r6
      0026E5 74 80            [12] 7242 	mov	a,#(0x00 ^ 0x80)
      0026E7 8F F0            [24] 7243 	mov	b,r7
      0026E9 63 F0 80         [24] 7244 	xrl	b,#0x80
      0026EC 95 F0            [12] 7245 	subb	a,b
      0026EE 50 03            [24] 7246 	jnc	00392$
      0026F0 02r24r3C         [24] 7247 	ljmp	00177$
      0026F3                       7248 00392$:
      0026F3                       7249 00178$:
                                   7250 ;	calc.c:487: PCON |= 2;
      0026F3 43 87 02         [24] 7251 	orl	_PCON,#0x02
                                   7252 ;	calc.c:489: return;
                                   7253 ;	calc.c:490: }
      0026F6 15 81            [12] 7254 	dec	sp
      0026F8 D0*00            [24] 7255 	pop	_bp
      0026FA 22               [24] 7256 	ret
                                   7257 	.area CSEG    (CODE)
                                   7258 	.area CONST   (CODE)
                                   7259 	.area CONST   (CODE)
      000000                       7260 ___str_0:
      000000 0D                    7261 	.db 0x0d
      000001 0A                    7262 	.db 0x0a
      000002 00                    7263 	.db 0x00
                                   7264 	.area CSEG    (CODE)
                                   7265 	.area CONST   (CODE)
      000003                       7266 ___str_1:
      000003 73 74 61 63 6B 20 75  7267 	.ascii "stack underflow"
             6E 64 65 72 66 6C 6F
             77
      000012 0D                    7268 	.db 0x0d
      000013 0A                    7269 	.db 0x0a
      000014 00                    7270 	.db 0x00
                                   7271 	.area CSEG    (CODE)
                                   7272 	.area CONST   (CODE)
      000015                       7273 ___str_2:
      000015 56 41 20              7274 	.ascii "VA "
      000018 00                    7275 	.db 0x00
                                   7276 	.area CSEG    (CODE)
                                   7277 	.area CONST   (CODE)
      000019                       7278 ___str_3:
      000019 25 20 31 31 6C 64 20  7279 	.ascii "% 11ld / "
             2F 20
      000022 00                    7280 	.db 0x00
                                   7281 	.area CSEG    (CODE)
                                   7282 	.area CONST   (CODE)
      000023                       7283 ___str_4:
      000023 25 30 38 6C 78 20 2F  7284 	.ascii "%08lx / "
             20
      00002B 00                    7285 	.db 0x00
                                   7286 	.area CSEG    (CODE)
                                   7287 	.area CONST   (CODE)
      00002C                       7288 ___str_5:
      00002C 50 41 20              7289 	.ascii "PA "
      00002F 00                    7290 	.db 0x00
                                   7291 	.area CSEG    (CODE)
                                   7292 	.area CONST   (CODE)
      000030                       7293 ___str_6:
      000030 50 54 20              7294 	.ascii "PT "
      000033 00                    7295 	.db 0x00
                                   7296 	.area CSEG    (CODE)
                                   7297 	.area CONST   (CODE)
      000034                       7298 ___str_7:
      000034 56 54 20              7299 	.ascii "VT "
      000037 00                    7300 	.db 0x00
                                   7301 	.area CSEG    (CODE)
                                   7302 	.area CONST   (CODE)
      000038                       7303 ___str_8:
      000038 0D                    7304 	.db 0x0d
      000039 0A                    7305 	.db 0x0a
      00003A 73 74 61 63 6B 20 75  7306 	.ascii "stack underflow"
             6E 64 65 72 66 6C 6F
             77
      000049 0D                    7307 	.db 0x0d
      00004A 0A                    7308 	.db 0x0a
      00004B 00                    7309 	.db 0x00
                                   7310 	.area CSEG    (CODE)
                                   7311 	.area CONST   (CODE)
      00004C                       7312 ___str_9:
      00004C 0D                    7313 	.db 0x0d
      00004D 0A                    7314 	.db 0x0a
      00004E 64 69 76 69 73 69 6F  7315 	.ascii "division by zero"
             6E 20 62 79 20 7A 65
             72 6F
      00005E 0D                    7316 	.db 0x0d
      00005F 0A                    7317 	.db 0x0a
      000060 00                    7318 	.db 0x00
                                   7319 	.area CSEG    (CODE)
                                   7320 	.area CONST   (CODE)
      000061                       7321 ___str_10:
      000061 0D                    7322 	.db 0x0d
      000062 0A                    7323 	.db 0x0a
      000063 73 74 61 63 6B 20 6F  7324 	.ascii "stack overflow"
             76 65 72 66 6C 6F 77
      000071 0D                    7325 	.db 0x0d
      000072 0A                    7326 	.db 0x0a
      000073 00                    7327 	.db 0x00
                                   7328 	.area CSEG    (CODE)
                                   7329 	.area CONST   (CODE)
      000074                       7330 ___str_11:
      000074 0D                    7331 	.db 0x0d
      000075 0A                    7332 	.db 0x0a
      000076 62 61 73 65 20 3D 20  7333 	.ascii "base = %d, "
             25 64 2C 20
      000081 00                    7334 	.db 0x00
                                   7335 	.area CSEG    (CODE)
                                   7336 	.area CONST   (CODE)
      000082                       7337 ___str_12:
      000082 61 63 63 20 3D 20 25  7338 	.ascii "acc = %ld / "
             6C 64 20 2F 20
      00008E 00                    7339 	.db 0x00
                                   7340 	.area CSEG    (CODE)
                                   7341 	.area CONST   (CODE)
      00008F                       7342 ___str_13:
      00008F 2C 20 61 63 63 5F 76  7343 	.ascii ", acc_valid = %d"
             61 6C 69 64 20 3D 20
             25 64
      00009F 0D                    7344 	.db 0x0d
      0000A0 0A                    7345 	.db 0x0a
      0000A1 0D                    7346 	.db 0x0d
      0000A2 0A                    7347 	.db 0x0a
      0000A3 00                    7348 	.db 0x00
                                   7349 	.area CSEG    (CODE)
                                   7350 	.area CONST   (CODE)
      0000A4                       7351 ___str_14:
      0000A4 48 68 4F 6F           7352 	.ascii "HhOo"
      0000A8 09                    7353 	.db 0x09
      0000A9 62 61 73 65 20 31 36  7354 	.ascii "base 16 10 8 2"
             20 31 30 20 38 20 32
      0000B7 0D                    7355 	.db 0x0d
      0000B8 0A                    7356 	.db 0x0a
      0000B9 00                    7357 	.db 0x00
                                   7358 	.area CSEG    (CODE)
                                   7359 	.area CONST   (CODE)
      0000BA                       7360 ___str_15:
      0000BA 70                    7361 	.ascii "p"
      0000BB 09                    7362 	.db 0x09
      0000BC 70 65 65 6B 20 74 6F  7363 	.ascii "peek top"
             70
      0000C4 0D                    7364 	.db 0x0d
      0000C5 0A                    7365 	.db 0x0a
      0000C6 00                    7366 	.db 0x00
                                   7367 	.area CSEG    (CODE)
                                   7368 	.area CONST   (CODE)
      0000C7                       7369 ___str_16:
      0000C7 50                    7370 	.ascii "P"
      0000C8 09                    7371 	.db 0x09
      0000C9 70 72 69 6E 74 20 73  7372 	.ascii "print stack"
             74 61 63 6B
      0000D4 0D                    7373 	.db 0x0d
      0000D5 0A                    7374 	.db 0x0a
      0000D6 00                    7375 	.db 0x00
                                   7376 	.area CSEG    (CODE)
                                   7377 	.area CONST   (CODE)
      0000D7                       7378 ___str_17:
      0000D7 76 2E                 7379 	.ascii "v."
      0000D9 09                    7380 	.db 0x09
      0000DA 70 6F 70 20 74 6F 70  7381 	.ascii "pop top"
      0000E1 0D                    7382 	.db 0x0d
      0000E2 0A                    7383 	.db 0x0a
      0000E3 00                    7384 	.db 0x00
                                   7385 	.area CSEG    (CODE)
                                   7386 	.area CONST   (CODE)
      0000E4                       7387 ___str_18:
      0000E4 56                    7388 	.ascii "V"
      0000E5 09                    7389 	.db 0x09
      0000E6 70 6F 70 20 61 6C 6C  7390 	.ascii "pop all"
      0000ED 0D                    7391 	.db 0x0d
      0000EE 0A                    7392 	.db 0x0a
      0000EF 00                    7393 	.db 0x00
                                   7394 	.area CSEG    (CODE)
                                   7395 	.area CONST   (CODE)
      0000F0                       7396 ___str_19:
      0000F0 69                    7397 	.ascii "i"
      0000F1 09                    7398 	.db 0x09
      0000F2 72 65 73 65 74 20 61  7399 	.ascii "reset acc"
             63 63
      0000FB 0D                    7400 	.db 0x0d
      0000FC 0A                    7401 	.db 0x0a
      0000FD 00                    7402 	.db 0x00
                                   7403 	.area CSEG    (CODE)
                                   7404 	.area CONST   (CODE)
      0000FE                       7405 ___str_20:
      0000FE 49                    7406 	.ascii "I"
      0000FF 09                    7407 	.db 0x09
      000100 72 65 73 65 74 20 61  7408 	.ascii "reset and discard acc"
             6E 64 20 64 69 73 63
             61 72 64 20 61 63 63
      000115 0D                    7409 	.db 0x0d
      000116 0A                    7410 	.db 0x0a
      000117 00                    7411 	.db 0x00
                                   7412 	.area CSEG    (CODE)
                                   7413 	.area CONST   (CODE)
      000118                       7414 ___str_21:
      000118 78                    7415 	.ascii "x"
      000119 09                    7416 	.db 0x09
      00011A 65 78 63 68 61 6E 67  7417 	.ascii "exchange top 2"
             65 20 74 6F 70 20 32
      000128 0D                    7418 	.db 0x0d
      000129 0A                    7419 	.db 0x0a
      00012A 00                    7420 	.db 0x00
                                   7421 	.area CSEG    (CODE)
                                   7422 	.area CONST   (CODE)
      00012B                       7423 ___str_22:
      00012B 2B                    7424 	.ascii "+"
      00012C 09                    7425 	.db 0x09
      00012D 61 64 64 20 74 6F 70  7426 	.ascii "add top 2"
             20 32
      000136 0D                    7427 	.db 0x0d
      000137 0A                    7428 	.db 0x0a
      000138 00                    7429 	.db 0x00
                                   7430 	.area CSEG    (CODE)
                                   7431 	.area CONST   (CODE)
      000139                       7432 ___str_23:
      000139 2D                    7433 	.ascii "-"
      00013A 09                    7434 	.db 0x09
      00013B 73 75 62 74 72 61 63  7435 	.ascii "subtract top 2"
             74 20 74 6F 70 20 32
      000149 0D                    7436 	.db 0x0d
      00014A 0A                    7437 	.db 0x0a
      00014B 00                    7438 	.db 0x00
                                   7439 	.area CSEG    (CODE)
                                   7440 	.area CONST   (CODE)
      00014C                       7441 ___str_24:
      00014C 2A                    7442 	.ascii "*"
      00014D 09                    7443 	.db 0x09
      00014E 6D 75 6C 74 69 70 6C  7444 	.ascii "multiply top 2"
             79 20 74 6F 70 20 32
      00015C 0D                    7445 	.db 0x0d
      00015D 0A                    7446 	.db 0x0a
      00015E 00                    7447 	.db 0x00
                                   7448 	.area CSEG    (CODE)
                                   7449 	.area CONST   (CODE)
      00015F                       7450 ___str_25:
      00015F 2F                    7451 	.ascii "/"
      000160 09                    7452 	.db 0x09
      000161 64 69 76 69 64 65 20  7453 	.ascii "divide top 2"
             74 6F 70 20 32
      00016D 0D                    7454 	.db 0x0d
      00016E 0A                    7455 	.db 0x0a
      00016F 00                    7456 	.db 0x00
                                   7457 	.area CSEG    (CODE)
                                   7458 	.area CONST   (CODE)
      000170                       7459 ___str_26:
      000170 5C                    7460 	.db 0x5c
      000171 09                    7461 	.db 0x09
      000172 64 69 76 69 64 65 20  7462 	.ascii "divide top 2 unsigned"
             74 6F 70 20 32 20 75
             6E 73 69 67 6E 65 64
      000187 0D                    7463 	.db 0x0d
      000188 0A                    7464 	.db 0x0a
      000189 00                    7465 	.db 0x00
                                   7466 	.area CSEG    (CODE)
                                   7467 	.area CONST   (CODE)
      00018A                       7468 ___str_27:
      00018A 25                    7469 	.ascii "%"
      00018B 09                    7470 	.db 0x09
      00018C 6D 6F 64 75 6C 75 73  7471 	.ascii "modulus top 2"
             20 74 6F 70 20 32
      000199 0D                    7472 	.db 0x0d
      00019A 0A                    7473 	.db 0x0a
      00019B 00                    7474 	.db 0x00
                                   7475 	.area CSEG    (CODE)
                                   7476 	.area CONST   (CODE)
      00019C                       7477 ___str_28:
      00019C 23                    7478 	.ascii "#"
      00019D 09                    7479 	.db 0x09
      00019E 6D 6F 64 75 6C 75 73  7480 	.ascii "modulus top 2 unsigned"
             20 74 6F 70 20 32 20
             75 6E 73 69 67 6E 65
             64
      0001B4 0D                    7481 	.db 0x0d
      0001B5 0A                    7482 	.db 0x0a
      0001B6 00                    7483 	.db 0x00
                                   7484 	.area CSEG    (CODE)
                                   7485 	.area CONST   (CODE)
      0001B7                       7486 ___str_29:
      0001B7 26                    7487 	.ascii "&"
      0001B8 09                    7488 	.db 0x09
      0001B9 61 6E 64 20 74 6F 70  7489 	.ascii "and top 2"
             20 32
      0001C2 0D                    7490 	.db 0x0d
      0001C3 0A                    7491 	.db 0x0a
      0001C4 00                    7492 	.db 0x00
                                   7493 	.area CSEG    (CODE)
                                   7494 	.area CONST   (CODE)
      0001C5                       7495 ___str_30:
      0001C5 7C                    7496 	.ascii "|"
      0001C6 09                    7497 	.db 0x09
      0001C7 6F 72 20 74 6F 70 20  7498 	.ascii "or top 2"
             32
      0001CF 0D                    7499 	.db 0x0d
      0001D0 0A                    7500 	.db 0x0a
      0001D1 00                    7501 	.db 0x00
                                   7502 	.area CSEG    (CODE)
                                   7503 	.area CONST   (CODE)
      0001D2                       7504 ___str_31:
      0001D2 5E                    7505 	.ascii "^"
      0001D3 09                    7506 	.db 0x09
      0001D4 78 6F 72 20 74 6F 70  7507 	.ascii "xor top 2"
             20 32
      0001DD 0D                    7508 	.db 0x0d
      0001DE 0A                    7509 	.db 0x0a
      0001DF 00                    7510 	.db 0x00
                                   7511 	.area CSEG    (CODE)
                                   7512 	.area CONST   (CODE)
      0001E0                       7513 ___str_32:
      0001E0 3E                    7514 	.ascii ">"
      0001E1 09                    7515 	.db 0x09
      0001E2 73 68 69 66 74 20 72  7516 	.ascii "shift right top 2"
             69 67 68 74 20 74 6F
             70 20 32
      0001F3 0D                    7517 	.db 0x0d
      0001F4 0A                    7518 	.db 0x0a
      0001F5 00                    7519 	.db 0x00
                                   7520 	.area CSEG    (CODE)
                                   7521 	.area CONST   (CODE)
      0001F6                       7522 ___str_33:
      0001F6 5D                    7523 	.ascii "]"
      0001F7 09                    7524 	.db 0x09
      0001F8 61 72 69 74 68 6D 65  7525 	.ascii "arithmetic shift right top 2"
             74 69 63 20 73 68 69
             66 74 20 72 69 67 68
             74 20 74 6F 70 20 32
      000214 0D                    7526 	.db 0x0d
      000215 0A                    7527 	.db 0x0a
      000216 00                    7528 	.db 0x00
                                   7529 	.area CSEG    (CODE)
                                   7530 	.area CONST   (CODE)
      000217                       7531 ___str_34:
      000217 3C                    7532 	.ascii "<"
      000218 09                    7533 	.db 0x09
      000219 73 68 69 66 74 20 6C  7534 	.ascii "shift left top 2"
             65 66 74 20 74 6F 70
             20 32
      000229 0D                    7535 	.db 0x0d
      00022A 0A                    7536 	.db 0x0a
      00022B 00                    7537 	.db 0x00
                                   7538 	.area CSEG    (CODE)
                                   7539 	.area CONST   (CODE)
      00022C                       7540 ___str_35:
      00022C 7E                    7541 	.ascii "~"
      00022D 09                    7542 	.db 0x09
      00022E 62 69 74 77 69 73 65  7543 	.ascii "bitwise not top"
             20 6E 6F 74 20 74 6F
             70
      00023D 0D                    7544 	.db 0x0d
      00023E 0A                    7545 	.db 0x0a
      00023F 00                    7546 	.db 0x00
                                   7547 	.area CSEG    (CODE)
                                   7548 	.area CONST   (CODE)
      000240                       7549 ___str_36:
      000240 3F                    7550 	.ascii "?"
      000241 09                    7551 	.db 0x09
      000242 68 65 6C 70           7552 	.ascii "help"
      000246 0D                    7553 	.db 0x0d
      000247 0A                    7554 	.db 0x0a
      000248 00                    7555 	.db 0x00
                                   7556 	.area CSEG    (CODE)
                                   7557 	.area CONST   (CODE)
      000249                       7558 ___str_37:
      000249 71                    7559 	.ascii "q"
      00024A 09                    7560 	.db 0x09
      00024B 71 75 69 74           7561 	.ascii "quit"
      00024F 0D                    7562 	.db 0x0d
      000250 0A                    7563 	.db 0x0a
      000251 00                    7564 	.db 0x00
                                   7565 	.area CSEG    (CODE)
                                   7566 	.area XINIT   (CODE)
      000000                       7567 __xinit__deltas:
      000000 00 00                 7568 	.byte #0x00, #0x00	;  0
      000002 00 00                 7569 	.byte #0x00, #0x00	;  0
      000004 00 00                 7570 	.byte #0x00, #0x00	;  0
      000006 00 00                 7571 	.byte #0x00,#0x00
      000008 00 00                 7572 	.byte #0x00,#0x00
      00000A 00 00                 7573 	.byte #0x00, #0x00	;  0
      00000C 01 00                 7574 	.byte #0x01, #0x00	;  1
      00000E 02 00                 7575 	.byte #0x02, #0x00	;  2
      000010 00 00                 7576 	.byte #0x00,#0x00
      000012r22s00                 7577 	.byte _accumulate, (_accumulate >> 8)
      000014 00 00                 7578 	.byte #0x00, #0x00	;  0
      000016 02 00                 7579 	.byte #0x02, #0x00	;  2
      000018 01 00                 7580 	.byte #0x01, #0x00	;  1
      00001A 00 00                 7581 	.byte #0x00,#0x00
      00001Cr7Bs05                 7582 	.byte _operator, (_operator >> 8)
      00001E 01 00                 7583 	.byte #0x01, #0x00	;  1
      000020 00 00                 7584 	.byte #0x00, #0x00	;  0
      000022 00 00                 7585 	.byte #0x00, #0x00	;  0
      000024 00 00                 7586 	.byte #0x00,#0x00
      000026 00 00                 7587 	.byte #0x00,#0x00
      000028 01 00                 7588 	.byte #0x01, #0x00	;  1
      00002A 02 00                 7589 	.byte #0x02, #0x00	;  2
      00002C 01 00                 7590 	.byte #0x01, #0x00	;  1
      00002E 00 00                 7591 	.byte #0x00,#0x00
      000030r7Bs05                 7592 	.byte _operator, (_operator >> 8)
      000032 01 00                 7593 	.byte #0x01, #0x00	;  1
      000034 01 00                 7594 	.byte #0x01, #0x00	;  1
      000036 02 00                 7595 	.byte #0x02, #0x00	;  2
      000038 00 00                 7596 	.byte #0x00,#0x00
      00003Ar22s00                 7597 	.byte _accumulate, (_accumulate >> 8)
      00003C 02 00                 7598 	.byte #0x02, #0x00	;  2
      00003E 00 00                 7599 	.byte #0x00, #0x00	;  0
      000040 00 00                 7600 	.byte #0x00, #0x00	;  0
      000042 00 00                 7601 	.byte #0x00,#0x00
      000044r0Es1D                 7602 	.byte _push_acc, (_push_acc >> 8)
      000046 02 00                 7603 	.byte #0x02, #0x00	;  2
      000048 06 00                 7604 	.byte #0x06, #0x00	;  6
      00004A 00 00                 7605 	.byte #0x00, #0x00	;  0
      00004C 00 00                 7606 	.byte #0x00,#0x00
      00004Er15s1E                 7607 	.byte _reset_acc, (_reset_acc >> 8)
      000050 02 00                 7608 	.byte #0x02, #0x00	;  2
      000052 01 00                 7609 	.byte #0x01, #0x00	;  1
      000054 02 00                 7610 	.byte #0x02, #0x00	;  2
      000056 00 00                 7611 	.byte #0x00,#0x00
      000058r22s00                 7612 	.byte _accumulate, (_accumulate >> 8)
      00005A 02 00                 7613 	.byte #0x02, #0x00	;  2
      00005C 02 00                 7614 	.byte #0x02, #0x00	;  2
      00005E 01 00                 7615 	.byte #0x01, #0x00	;  1
      000060 00 00                 7616 	.byte #0x00,#0x00
      000062r0Es1D                 7617 	.byte _push_acc, (_push_acc >> 8)
      000064 FF 7F                 7618 	.byte #0xff, #0x7f	;  32767
      000066 05 00                 7619 	.byte #0x05, #0x00	;  5
      000068 FF 7F                 7620 	.byte #0xff, #0x7f	;  32767
      00006A 00 00                 7621 	.byte #0x00,#0x00
      00006Cr15s1E                 7622 	.byte _reset_acc, (_reset_acc >> 8)
      00006E FF 7F                 7623 	.byte #0xff, #0x7f	;  32767
      000070 06 00                 7624 	.byte #0x06, #0x00	;  6
      000072 FF 7F                 7625 	.byte #0xff, #0x7f	;  32767
      000074 00 00                 7626 	.byte #0x00,#0x00
      000076 00 00                 7627 	.byte #0x00,#0x00
      000078 FF 7F                 7628 	.byte #0xff, #0x7f	;  32767
      00007A 04 00                 7629 	.byte #0x04, #0x00	;  4
      00007C FF 7F                 7630 	.byte #0xff, #0x7f	;  32767
      00007E 00 00                 7631 	.byte #0x00,#0x00
      000080r7Fs1E                 7632 	.byte _reset_base, (_reset_base >> 8)
      000082 FF 7F                 7633 	.byte #0xff, #0x7f	;  32767
      000084 03 00                 7634 	.byte #0x03, #0x00	;  3
      000086 FF 7F                 7635 	.byte #0xff, #0x7f	;  32767
      000088 00 00                 7636 	.byte #0x00,#0x00
      00008ArFDs1E                 7637 	.byte _help, (_help >> 8)
      00008C FF 7F                 7638 	.byte #0xff, #0x7f	;  32767
      00008E 07 00                 7639 	.byte #0x07, #0x00	;  7
      000090 03 00                 7640 	.byte #0x03, #0x00	;  3
      000092 00 00                 7641 	.byte #0x00,#0x00
      000094r93s01                 7642 	.byte _dump_pop, (_dump_pop >> 8)
      000096 00 80                 7643 	.byte #0x00, #0x80	; -32768
      000098 00 80                 7644 	.byte #0x00, #0x80	; -32768
      00009A 00 80                 7645 	.byte #0x00, #0x80	; -32768
      00009C 00 00                 7646 	.byte #0x00,#0x00
      00009E 00 00                 7647 	.byte #0x00,#0x00
                                   7648 	.area CABS    (ABS,CODE)
