                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module calc
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _getchar_poll
                                     13 	.globl _stack_iter_peek
                                     14 	.globl _stack_peek
                                     15 	.globl _stack_pop
                                     16 	.globl _stack_push
                                     17 	.globl _stack_init
                                     18 	.globl _state_exec
                                     19 	.globl _state_init
                                     20 	.globl _isxdigit
                                     21 	.globl _printf
                                     22 	.globl _strtol
                                     23 	.globl _CY
                                     24 	.globl _AC
                                     25 	.globl _F0
                                     26 	.globl _RS1
                                     27 	.globl _RS0
                                     28 	.globl _OV
                                     29 	.globl _FL
                                     30 	.globl _P
                                     31 	.globl _TF2
                                     32 	.globl _EXF2
                                     33 	.globl _RCLK
                                     34 	.globl _TCLK
                                     35 	.globl _EXEN2
                                     36 	.globl _TR2
                                     37 	.globl _C_T2
                                     38 	.globl _CP_RL2
                                     39 	.globl _T2CON_7
                                     40 	.globl _T2CON_6
                                     41 	.globl _T2CON_5
                                     42 	.globl _T2CON_4
                                     43 	.globl _T2CON_3
                                     44 	.globl _T2CON_2
                                     45 	.globl _T2CON_1
                                     46 	.globl _T2CON_0
                                     47 	.globl _PT2
                                     48 	.globl _PS
                                     49 	.globl _PT1
                                     50 	.globl _PX1
                                     51 	.globl _PT0
                                     52 	.globl _PX0
                                     53 	.globl _RD
                                     54 	.globl _WR
                                     55 	.globl _T1
                                     56 	.globl _T0
                                     57 	.globl _INT1
                                     58 	.globl _INT0
                                     59 	.globl _TXD
                                     60 	.globl _RXD
                                     61 	.globl _P3_7
                                     62 	.globl _P3_6
                                     63 	.globl _P3_5
                                     64 	.globl _P3_4
                                     65 	.globl _P3_3
                                     66 	.globl _P3_2
                                     67 	.globl _P3_1
                                     68 	.globl _P3_0
                                     69 	.globl _EA
                                     70 	.globl _ET2
                                     71 	.globl _ES
                                     72 	.globl _ET1
                                     73 	.globl _EX1
                                     74 	.globl _ET0
                                     75 	.globl _EX0
                                     76 	.globl _P2_7
                                     77 	.globl _P2_6
                                     78 	.globl _P2_5
                                     79 	.globl _P2_4
                                     80 	.globl _P2_3
                                     81 	.globl _P2_2
                                     82 	.globl _P2_1
                                     83 	.globl _P2_0
                                     84 	.globl _SM0
                                     85 	.globl _SM1
                                     86 	.globl _SM2
                                     87 	.globl _REN
                                     88 	.globl _TB8
                                     89 	.globl _RB8
                                     90 	.globl _TI
                                     91 	.globl _RI
                                     92 	.globl _T2EX
                                     93 	.globl _T2
                                     94 	.globl _P1_7
                                     95 	.globl _P1_6
                                     96 	.globl _P1_5
                                     97 	.globl _P1_4
                                     98 	.globl _P1_3
                                     99 	.globl _P1_2
                                    100 	.globl _P1_1
                                    101 	.globl _P1_0
                                    102 	.globl _TF1
                                    103 	.globl _TR1
                                    104 	.globl _TF0
                                    105 	.globl _TR0
                                    106 	.globl _IE1
                                    107 	.globl _IT1
                                    108 	.globl _IE0
                                    109 	.globl _IT0
                                    110 	.globl _P0_7
                                    111 	.globl _P0_6
                                    112 	.globl _P0_5
                                    113 	.globl _P0_4
                                    114 	.globl _P0_3
                                    115 	.globl _P0_2
                                    116 	.globl _P0_1
                                    117 	.globl _P0_0
                                    118 	.globl _B
                                    119 	.globl _A
                                    120 	.globl _ACC
                                    121 	.globl _PSW
                                    122 	.globl _TH2
                                    123 	.globl _TL2
                                    124 	.globl _RCAP2H
                                    125 	.globl _RCAP2L
                                    126 	.globl _T2MOD
                                    127 	.globl _T2CON
                                    128 	.globl _IP
                                    129 	.globl _P3
                                    130 	.globl _IE
                                    131 	.globl _P2
                                    132 	.globl _SBUF
                                    133 	.globl _SCON
                                    134 	.globl _P1
                                    135 	.globl _TH1
                                    136 	.globl _TH0
                                    137 	.globl _TL1
                                    138 	.globl _TL0
                                    139 	.globl _TMOD
                                    140 	.globl _TCON
                                    141 	.globl _PCON
                                    142 	.globl _DPH
                                    143 	.globl _DPL
                                    144 	.globl _SP
                                    145 	.globl _P0
                                    146 	.globl _putchar
                                    147 	.globl _getchar
                                    148 ;--------------------------------------------------------
                                    149 ; special function registers
                                    150 ;--------------------------------------------------------
                                    151 	.area RSEG    (ABS,DATA)
      000000                        152 	.org 0x0000
                           000080   153 _P0	=	0x0080
                           000081   154 _SP	=	0x0081
                           000082   155 _DPL	=	0x0082
                           000083   156 _DPH	=	0x0083
                           000087   157 _PCON	=	0x0087
                           000088   158 _TCON	=	0x0088
                           000089   159 _TMOD	=	0x0089
                           00008A   160 _TL0	=	0x008a
                           00008B   161 _TL1	=	0x008b
                           00008C   162 _TH0	=	0x008c
                           00008D   163 _TH1	=	0x008d
                           000090   164 _P1	=	0x0090
                           000098   165 _SCON	=	0x0098
                           000099   166 _SBUF	=	0x0099
                           0000A0   167 _P2	=	0x00a0
                           0000A8   168 _IE	=	0x00a8
                           0000B0   169 _P3	=	0x00b0
                           0000B8   170 _IP	=	0x00b8
                           0000C8   171 _T2CON	=	0x00c8
                           0000C9   172 _T2MOD	=	0x00c9
                           0000CA   173 _RCAP2L	=	0x00ca
                           0000CB   174 _RCAP2H	=	0x00cb
                           0000CC   175 _TL2	=	0x00cc
                           0000CD   176 _TH2	=	0x00cd
                           0000D0   177 _PSW	=	0x00d0
                           0000E0   178 _ACC	=	0x00e0
                           0000E0   179 _A	=	0x00e0
                           0000F0   180 _B	=	0x00f0
                                    181 ;--------------------------------------------------------
                                    182 ; special function bits
                                    183 ;--------------------------------------------------------
                                    184 	.area RSEG    (ABS,DATA)
      000000                        185 	.org 0x0000
                           000080   186 _P0_0	=	0x0080
                           000081   187 _P0_1	=	0x0081
                           000082   188 _P0_2	=	0x0082
                           000083   189 _P0_3	=	0x0083
                           000084   190 _P0_4	=	0x0084
                           000085   191 _P0_5	=	0x0085
                           000086   192 _P0_6	=	0x0086
                           000087   193 _P0_7	=	0x0087
                           000088   194 _IT0	=	0x0088
                           000089   195 _IE0	=	0x0089
                           00008A   196 _IT1	=	0x008a
                           00008B   197 _IE1	=	0x008b
                           00008C   198 _TR0	=	0x008c
                           00008D   199 _TF0	=	0x008d
                           00008E   200 _TR1	=	0x008e
                           00008F   201 _TF1	=	0x008f
                           000090   202 _P1_0	=	0x0090
                           000091   203 _P1_1	=	0x0091
                           000092   204 _P1_2	=	0x0092
                           000093   205 _P1_3	=	0x0093
                           000094   206 _P1_4	=	0x0094
                           000095   207 _P1_5	=	0x0095
                           000096   208 _P1_6	=	0x0096
                           000097   209 _P1_7	=	0x0097
                           000090   210 _T2	=	0x0090
                           000091   211 _T2EX	=	0x0091
                           000098   212 _RI	=	0x0098
                           000099   213 _TI	=	0x0099
                           00009A   214 _RB8	=	0x009a
                           00009B   215 _TB8	=	0x009b
                           00009C   216 _REN	=	0x009c
                           00009D   217 _SM2	=	0x009d
                           00009E   218 _SM1	=	0x009e
                           00009F   219 _SM0	=	0x009f
                           0000A0   220 _P2_0	=	0x00a0
                           0000A1   221 _P2_1	=	0x00a1
                           0000A2   222 _P2_2	=	0x00a2
                           0000A3   223 _P2_3	=	0x00a3
                           0000A4   224 _P2_4	=	0x00a4
                           0000A5   225 _P2_5	=	0x00a5
                           0000A6   226 _P2_6	=	0x00a6
                           0000A7   227 _P2_7	=	0x00a7
                           0000A8   228 _EX0	=	0x00a8
                           0000A9   229 _ET0	=	0x00a9
                           0000AA   230 _EX1	=	0x00aa
                           0000AB   231 _ET1	=	0x00ab
                           0000AC   232 _ES	=	0x00ac
                           0000AD   233 _ET2	=	0x00ad
                           0000AF   234 _EA	=	0x00af
                           0000B0   235 _P3_0	=	0x00b0
                           0000B1   236 _P3_1	=	0x00b1
                           0000B2   237 _P3_2	=	0x00b2
                           0000B3   238 _P3_3	=	0x00b3
                           0000B4   239 _P3_4	=	0x00b4
                           0000B5   240 _P3_5	=	0x00b5
                           0000B6   241 _P3_6	=	0x00b6
                           0000B7   242 _P3_7	=	0x00b7
                           0000B0   243 _RXD	=	0x00b0
                           0000B1   244 _TXD	=	0x00b1
                           0000B2   245 _INT0	=	0x00b2
                           0000B3   246 _INT1	=	0x00b3
                           0000B4   247 _T0	=	0x00b4
                           0000B5   248 _T1	=	0x00b5
                           0000B6   249 _WR	=	0x00b6
                           0000B7   250 _RD	=	0x00b7
                           0000B8   251 _PX0	=	0x00b8
                           0000B9   252 _PT0	=	0x00b9
                           0000BA   253 _PX1	=	0x00ba
                           0000BB   254 _PT1	=	0x00bb
                           0000BC   255 _PS	=	0x00bc
                           0000BD   256 _PT2	=	0x00bd
                           0000C8   257 _T2CON_0	=	0x00c8
                           0000C9   258 _T2CON_1	=	0x00c9
                           0000CA   259 _T2CON_2	=	0x00ca
                           0000CB   260 _T2CON_3	=	0x00cb
                           0000CC   261 _T2CON_4	=	0x00cc
                           0000CD   262 _T2CON_5	=	0x00cd
                           0000CE   263 _T2CON_6	=	0x00ce
                           0000CF   264 _T2CON_7	=	0x00cf
                           0000C8   265 _CP_RL2	=	0x00c8
                           0000C9   266 _C_T2	=	0x00c9
                           0000CA   267 _TR2	=	0x00ca
                           0000CB   268 _EXEN2	=	0x00cb
                           0000CC   269 _TCLK	=	0x00cc
                           0000CD   270 _RCLK	=	0x00cd
                           0000CE   271 _EXF2	=	0x00ce
                           0000CF   272 _TF2	=	0x00cf
                           0000D0   273 _P	=	0x00d0
                           0000D1   274 _FL	=	0x00d1
                           0000D2   275 _OV	=	0x00d2
                           0000D3   276 _RS0	=	0x00d3
                           0000D4   277 _RS1	=	0x00d4
                           0000D5   278 _F0	=	0x00d5
                           0000D6   279 _AC	=	0x00d6
                           0000D7   280 _CY	=	0x00d7
                                    281 ;--------------------------------------------------------
                                    282 ; overlayable register banks
                                    283 ;--------------------------------------------------------
                                    284 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        285 	.ds 8
                                    286 ;--------------------------------------------------------
                                    287 ; internal ram data
                                    288 ;--------------------------------------------------------
                                    289 	.area DSEG    (DATA)
                                    290 ;--------------------------------------------------------
                                    291 ; overlayable items in internal ram 
                                    292 ;--------------------------------------------------------
                                    293 ;--------------------------------------------------------
                                    294 ; Stack segment in internal ram 
                                    295 ;--------------------------------------------------------
                                    296 	.area	SSEG
      000000                        297 __start__stack:
      000000                        298 	.ds	1
                                    299 
                                    300 ;--------------------------------------------------------
                                    301 ; indirectly addressable internal ram data
                                    302 ;--------------------------------------------------------
                                    303 	.area ISEG    (DATA)
                                    304 ;--------------------------------------------------------
                                    305 ; absolute internal ram data
                                    306 ;--------------------------------------------------------
                                    307 	.area IABS    (ABS,DATA)
                                    308 	.area IABS    (ABS,DATA)
                                    309 ;--------------------------------------------------------
                                    310 ; bit data
                                    311 ;--------------------------------------------------------
                                    312 	.area BSEG    (BIT)
                                    313 ;--------------------------------------------------------
                                    314 ; paged external ram data
                                    315 ;--------------------------------------------------------
                                    316 	.area PSEG    (PAG,XDATA)
                                    317 ;--------------------------------------------------------
                                    318 ; external ram data
                                    319 ;--------------------------------------------------------
                                    320 	.area XSEG    (XDATA)
      000000                        321 _s:
      000000                        322 	.ds 12
      00000C                        323 _c:
      00000C                        324 	.ds 8205
                                    325 ;--------------------------------------------------------
                                    326 ; absolute external ram data
                                    327 ;--------------------------------------------------------
                                    328 	.area XABS    (ABS,XDATA)
                                    329 ;--------------------------------------------------------
                                    330 ; external initialized ram data
                                    331 ;--------------------------------------------------------
                                    332 	.area XISEG   (XDATA)
      000000                        333 _deltas:
      000000                        334 	.ds 160
                                    335 	.area HOME    (CODE)
                                    336 	.area GSINIT0 (CODE)
                                    337 	.area GSINIT1 (CODE)
                                    338 	.area GSINIT2 (CODE)
                                    339 	.area GSINIT3 (CODE)
                                    340 	.area GSINIT4 (CODE)
                                    341 	.area GSINIT5 (CODE)
                                    342 	.area GSINIT  (CODE)
                                    343 	.area GSFINAL (CODE)
                                    344 	.area CSEG    (CODE)
                                    345 ;--------------------------------------------------------
                                    346 ; interrupt vector 
                                    347 ;--------------------------------------------------------
                                    348 	.area HOME    (CODE)
      000000                        349 __interrupt_vect:
      000000 02r00r00         [24]  350 	ljmp	__sdcc_gsinit_startup
                                    351 ;--------------------------------------------------------
                                    352 ; global & static initialisations
                                    353 ;--------------------------------------------------------
                                    354 	.area HOME    (CODE)
                                    355 	.area GSINIT  (CODE)
                                    356 	.area GSFINAL (CODE)
                                    357 	.area GSINIT  (CODE)
                                    358 	.globl __sdcc_gsinit_startup
                                    359 	.globl __sdcc_program_startup
                                    360 	.globl __start__stack
                                    361 	.globl __mcs51_genXINIT
                                    362 	.globl __mcs51_genXRAMCLEAR
                                    363 	.globl __mcs51_genRAMCLEAR
                                    364 	.area GSFINAL (CODE)
      000000 02r00r03         [24]  365 	ljmp	__sdcc_program_startup
                                    366 ;--------------------------------------------------------
                                    367 ; Home
                                    368 ;--------------------------------------------------------
                                    369 	.area HOME    (CODE)
                                    370 	.area HOME    (CODE)
      000003                        371 __sdcc_program_startup:
      000003 02r24r80         [24]  372 	ljmp	_main
                                    373 ;	return from main will return to caller
                                    374 ;--------------------------------------------------------
                                    375 ; code
                                    376 ;--------------------------------------------------------
                                    377 	.area CSEG    (CODE)
                                    378 ;------------------------------------------------------------
                                    379 ;Allocation info for local variables in function 'putchar'
                                    380 ;------------------------------------------------------------
                                    381 ;c                         Allocated to registers 
                                    382 ;------------------------------------------------------------
                                    383 ;	calc.c:15: int putchar(int c) __naked {
                                    384 ;	-----------------------------------------
                                    385 ;	 function putchar
                                    386 ;	-----------------------------------------
      000000                        387 _putchar:
                                    388 ;	naked function: no prologue.
                                    389 ;	calc.c:20: __endasm;
      000000 E5 82            [12]  390 	mov	a, dpl
      000002 02 00 30         [24]  391 	ljmp	0x0030
                                    392 ;	calc.c:21: }
                                    393 ;	naked function: no epilogue.
                                    394 ;------------------------------------------------------------
                                    395 ;Allocation info for local variables in function 'getchar'
                                    396 ;------------------------------------------------------------
                                    397 ;	calc.c:23: int getchar(void) __naked {
                                    398 ;	-----------------------------------------
                                    399 ;	 function getchar
                                    400 ;	-----------------------------------------
      000005                        401 _getchar:
                                    402 ;	naked function: no prologue.
                                    403 ;	calc.c:29: __endasm;
      000005 12 00 32         [24]  404 	lcall	0x0032
      000008 F5 82            [12]  405 	mov	dpl, a
      00000A 75 83 00         [24]  406 	mov	dph, #0
      00000D 22               [24]  407 	ret
                                    408 ;	calc.c:30: }
                                    409 ;	naked function: no epilogue.
                                    410 ;------------------------------------------------------------
                                    411 ;Allocation info for local variables in function 'getchar_poll'
                                    412 ;------------------------------------------------------------
                                    413 ;	calc.c:32: int getchar_poll(void) __naked {
                                    414 ;	-----------------------------------------
                                    415 ;	 function getchar_poll
                                    416 ;	-----------------------------------------
      00000E                        417 _getchar_poll:
                                    418 ;	naked function: no prologue.
                                    419 ;	calc.c:44: __endasm;
      00000E 74 FF            [12]  420 	mov	a, #0xff
      000010 F5 F0            [12]  421 	mov	b, a
      000012 30 98 07         [24]  422 	jnb	ri, nochar
      000015 C2 98            [12]  423 	clr	ri
      000017 E5 99            [12]  424 	mov	a, sbuf
      000019 75 F0 00         [24]  425 	mov	b, #0
      00001C                        426 	nochar:
      00001C F5 82            [12]  427 	mov	dpl, a
      00001E 85 F0 83         [24]  428 	mov	dph, b
      000021 22               [24]  429 	ret
                                    430 ;	calc.c:45: }
                                    431 ;	naked function: no epilogue.
                                    432 ;------------------------------------------------------------
                                    433 ;Allocation info for local variables in function 'printstr'
                                    434 ;------------------------------------------------------------
                                    435 ;s                         Allocated to registers 
                                    436 ;------------------------------------------------------------
                                    437 ;	calc.c:47: static inline void printstr(const char *s) {
                                    438 ;	-----------------------------------------
                                    439 ;	 function printstr
                                    440 ;	-----------------------------------------
      000022                        441 _printstr:
                           000007   442 	ar7 = 0x07
                           000006   443 	ar6 = 0x06
                           000005   444 	ar5 = 0x05
                           000004   445 	ar4 = 0x04
                           000003   446 	ar3 = 0x03
                           000002   447 	ar2 = 0x02
                           000001   448 	ar1 = 0x01
                           000000   449 	ar0 = 0x00
      000022 AD 82            [24]  450 	mov	r5,dpl
      000024 AE 83            [24]  451 	mov	r6,dph
      000026 AF F0            [24]  452 	mov	r7,b
                                    453 ;	calc.c:50: return;
      000028                        454 00103$:
                                    455 ;	calc.c:48: for (; *s; s++) putchar(*s);
      000028 8D 82            [24]  456 	mov	dpl,r5
      00002A 8E 83            [24]  457 	mov	dph,r6
      00002C 8F F0            [24]  458 	mov	b,r7
      00002E 12r00r00         [24]  459 	lcall	__gptrget
      000031 FC               [12]  460 	mov	r4,a
      000032 60 10            [24]  461 	jz	00101$
      000034 7B 00            [12]  462 	mov	r3,#0x00
      000036 8C 82            [24]  463 	mov	dpl,r4
      000038 8B 83            [24]  464 	mov	dph,r3
      00003A 12r00r00         [24]  465 	lcall	_putchar
      00003D 0D               [12]  466 	inc	r5
      00003E BD 00 E7         [24]  467 	cjne	r5,#0x00,00103$
      000041 0E               [12]  468 	inc	r6
      000042 80 E4            [24]  469 	sjmp	00103$
      000044                        470 00101$:
                                    471 ;	calc.c:50: return;
                                    472 ;	calc.c:51: }
      000044 22               [24]  473 	ret
                                    474 ;------------------------------------------------------------
                                    475 ;Allocation info for local variables in function 'printbin'
                                    476 ;------------------------------------------------------------
                                    477 ;d                         Allocated to stack - _bp +1
                                    478 ;mask                      Allocated to stack - _bp +5
                                    479 ;------------------------------------------------------------
                                    480 ;	calc.c:53: static inline void printbin(long d) {
                                    481 ;	-----------------------------------------
                                    482 ;	 function printbin
                                    483 ;	-----------------------------------------
      000045                        484 _printbin:
      000045 C0*00            [24]  485 	push	_bp
      000047 85 81*00         [24]  486 	mov	_bp,sp
      00004A C0 82            [24]  487 	push	dpl
      00004C C0 83            [24]  488 	push	dph
      00004E C0 F0            [24]  489 	push	b
      000050 C0 E0            [24]  490 	push	acc
      000052 E5 81            [12]  491 	mov	a,sp
      000054 24 04            [12]  492 	add	a,#0x04
      000056 F5 81            [12]  493 	mov	sp,a
                                    494 ;	calc.c:56: for (mask = 0x80000000lu; mask; mask >>= 1)
      000058 E5*00            [12]  495 	mov	a,_bp
      00005A 24 05            [12]  496 	add	a,#0x05
      00005C F8               [12]  497 	mov	r0,a
      00005D E4               [12]  498 	clr	a
      00005E F6               [12]  499 	mov	@r0,a
      00005F 08               [12]  500 	inc	r0
      000060 F6               [12]  501 	mov	@r0,a
      000061 08               [12]  502 	inc	r0
      000062 F6               [12]  503 	mov	@r0,a
      000063 08               [12]  504 	inc	r0
      000064 76 80            [12]  505 	mov	@r0,#0x80
      000066                        506 00102$:
                                    507 ;	calc.c:57: (void)putchar((d & mask) ? (int)'1' : (int)'0');
      000066 A8*00            [24]  508 	mov	r0,_bp
      000068 08               [12]  509 	inc	r0
      000069 86 04            [24]  510 	mov	ar4,@r0
      00006B 08               [12]  511 	inc	r0
      00006C 86 05            [24]  512 	mov	ar5,@r0
      00006E 08               [12]  513 	inc	r0
      00006F 86 06            [24]  514 	mov	ar6,@r0
      000071 08               [12]  515 	inc	r0
      000072 86 07            [24]  516 	mov	ar7,@r0
      000074 E5*00            [12]  517 	mov	a,_bp
      000076 24 05            [12]  518 	add	a,#0x05
      000078 F8               [12]  519 	mov	r0,a
      000079 E6               [12]  520 	mov	a,@r0
      00007A 52 04            [12]  521 	anl	ar4,a
      00007C 08               [12]  522 	inc	r0
      00007D E6               [12]  523 	mov	a,@r0
      00007E 52 05            [12]  524 	anl	ar5,a
      000080 08               [12]  525 	inc	r0
      000081 E6               [12]  526 	mov	a,@r0
      000082 52 06            [12]  527 	anl	ar6,a
      000084 08               [12]  528 	inc	r0
      000085 E6               [12]  529 	mov	a,@r0
      000086 52 07            [12]  530 	anl	ar7,a
      000088 EC               [12]  531 	mov	a,r4
      000089 4D               [12]  532 	orl	a,r5
      00008A 4E               [12]  533 	orl	a,r6
      00008B 4F               [12]  534 	orl	a,r7
      00008C 60 06            [24]  535 	jz	00106$
      00008E 7E 31            [12]  536 	mov	r6,#0x31
      000090 7F 00            [12]  537 	mov	r7,#0x00
      000092 80 04            [24]  538 	sjmp	00107$
      000094                        539 00106$:
      000094 7E 30            [12]  540 	mov	r6,#0x30
      000096 7F 00            [12]  541 	mov	r7,#0x00
      000098                        542 00107$:
      000098 8E 82            [24]  543 	mov	dpl,r6
      00009A 8F 83            [24]  544 	mov	dph,r7
      00009C 12r00r00         [24]  545 	lcall	_putchar
                                    546 ;	calc.c:56: for (mask = 0x80000000lu; mask; mask >>= 1)
      00009F E5*00            [12]  547 	mov	a,_bp
      0000A1 24 05            [12]  548 	add	a,#0x05
      0000A3 F8               [12]  549 	mov	r0,a
      0000A4 08               [12]  550 	inc	r0
      0000A5 08               [12]  551 	inc	r0
      0000A6 08               [12]  552 	inc	r0
      0000A7 E6               [12]  553 	mov	a,@r0
      0000A8 C3               [12]  554 	clr	c
      0000A9 13               [12]  555 	rrc	a
      0000AA F6               [12]  556 	mov	@r0,a
      0000AB 18               [12]  557 	dec	r0
      0000AC E6               [12]  558 	mov	a,@r0
      0000AD 13               [12]  559 	rrc	a
      0000AE F6               [12]  560 	mov	@r0,a
      0000AF 18               [12]  561 	dec	r0
      0000B0 E6               [12]  562 	mov	a,@r0
      0000B1 13               [12]  563 	rrc	a
      0000B2 F6               [12]  564 	mov	@r0,a
      0000B3 18               [12]  565 	dec	r0
      0000B4 E6               [12]  566 	mov	a,@r0
      0000B5 13               [12]  567 	rrc	a
      0000B6 F6               [12]  568 	mov	@r0,a
      0000B7 E5*00            [12]  569 	mov	a,_bp
      0000B9 24 05            [12]  570 	add	a,#0x05
      0000BB F8               [12]  571 	mov	r0,a
      0000BC E6               [12]  572 	mov	a,@r0
      0000BD 08               [12]  573 	inc	r0
      0000BE 46               [12]  574 	orl	a,@r0
      0000BF 08               [12]  575 	inc	r0
      0000C0 46               [12]  576 	orl	a,@r0
      0000C1 08               [12]  577 	inc	r0
      0000C2 46               [12]  578 	orl	a,@r0
      0000C3 70 A1            [24]  579 	jnz	00102$
                                    580 ;	calc.c:59: return;
                                    581 ;	calc.c:60: }
      0000C5 85*00 81         [24]  582 	mov	sp,_bp
      0000C8 D0*00            [24]  583 	pop	_bp
      0000CA 22               [24]  584 	ret
                                    585 ;------------------------------------------------------------
                                    586 ;Allocation info for local variables in function 'accumulate'
                                    587 ;------------------------------------------------------------
                                    588 ;delta                     Allocated to stack - _bp -5
                                    589 ;_ctx                      Allocated to registers r5 r6 r7 
                                    590 ;ctx                       Allocated to stack - _bp +8
                                    591 ;d                         Allocated to stack - _bp +11
                                    592 ;sloc0                     Allocated to stack - _bp +1
                                    593 ;sloc1                     Allocated to stack - _bp +4
                                    594 ;------------------------------------------------------------
                                    595 ;	calc.c:84: static int accumulate(void *_ctx, delta_t *delta) __reentrant {
                                    596 ;	-----------------------------------------
                                    597 ;	 function accumulate
                                    598 ;	-----------------------------------------
      0000CB                        599 _accumulate:
      0000CB C0*00            [24]  600 	push	_bp
      0000CD E5 81            [12]  601 	mov	a,sp
      0000CF F5*00            [12]  602 	mov	_bp,a
      0000D1 24 0E            [12]  603 	add	a,#0x0e
      0000D3 F5 81            [12]  604 	mov	sp,a
      0000D5 AD 82            [24]  605 	mov	r5,dpl
      0000D7 AE 83            [24]  606 	mov	r6,dph
      0000D9 AF F0            [24]  607 	mov	r7,b
                                    608 ;	calc.c:85: struct ctx *ctx = (struct ctx *)_ctx;
      0000DB E5*00            [12]  609 	mov	a,_bp
      0000DD 24 08            [12]  610 	add	a,#0x08
      0000DF F8               [12]  611 	mov	r0,a
      0000E0 A6 05            [24]  612 	mov	@r0,ar5
      0000E2 08               [12]  613 	inc	r0
      0000E3 A6 06            [24]  614 	mov	@r0,ar6
      0000E5 08               [12]  615 	inc	r0
      0000E6 A6 07            [24]  616 	mov	@r0,ar7
                                    617 ;	calc.c:90: if (!ctx->acc_valid) {
      0000E8 E5*00            [12]  618 	mov	a,_bp
      0000EA 24 08            [12]  619 	add	a,#0x08
      0000EC F8               [12]  620 	mov	r0,a
      0000ED 74 06            [12]  621 	mov	a,#0x06
      0000EF 26               [12]  622 	add	a,@r0
      0000F0 FA               [12]  623 	mov	r2,a
      0000F1 E4               [12]  624 	clr	a
      0000F2 08               [12]  625 	inc	r0
      0000F3 36               [12]  626 	addc	a,@r0
      0000F4 FB               [12]  627 	mov	r3,a
      0000F5 08               [12]  628 	inc	r0
      0000F6 86 04            [24]  629 	mov	ar4,@r0
      0000F8 8A 82            [24]  630 	mov	dpl,r2
      0000FA 8B 83            [24]  631 	mov	dph,r3
      0000FC 8C F0            [24]  632 	mov	b,r4
      0000FE 12r00r00         [24]  633 	lcall	__gptrget
      000101 70 31            [24]  634 	jnz	00102$
                                    635 ;	calc.c:91: ctx->acc_valid = 1;
      000103 8A 82            [24]  636 	mov	dpl,r2
      000105 8B 83            [24]  637 	mov	dph,r3
      000107 8C F0            [24]  638 	mov	b,r4
      000109 74 01            [12]  639 	mov	a,#0x01
      00010B 12r00r00         [24]  640 	lcall	__gptrput
                                    641 ;	calc.c:92: ctx->acc = 0l;
      00010E E5*00            [12]  642 	mov	a,_bp
      000110 24 08            [12]  643 	add	a,#0x08
      000112 F8               [12]  644 	mov	r0,a
      000113 74 02            [12]  645 	mov	a,#0x02
      000115 26               [12]  646 	add	a,@r0
      000116 FA               [12]  647 	mov	r2,a
      000117 E4               [12]  648 	clr	a
      000118 08               [12]  649 	inc	r0
      000119 36               [12]  650 	addc	a,@r0
      00011A FB               [12]  651 	mov	r3,a
      00011B 08               [12]  652 	inc	r0
      00011C 86 04            [24]  653 	mov	ar4,@r0
      00011E 8A 82            [24]  654 	mov	dpl,r2
      000120 8B 83            [24]  655 	mov	dph,r3
      000122 8C F0            [24]  656 	mov	b,r4
      000124 E4               [12]  657 	clr	a
      000125 12r00r00         [24]  658 	lcall	__gptrput
      000128 A3               [24]  659 	inc	dptr
      000129 12r00r00         [24]  660 	lcall	__gptrput
      00012C A3               [24]  661 	inc	dptr
      00012D 12r00r00         [24]  662 	lcall	__gptrput
      000130 A3               [24]  663 	inc	dptr
      000131 12r00r00         [24]  664 	lcall	__gptrput
      000134                        665 00102$:
                                    666 ;	calc.c:95: d = strtol(ctx->digit, NULL, ctx->base);
      000134 E5*00            [12]  667 	mov	a,_bp
      000136 24 08            [12]  668 	add	a,#0x08
      000138 F8               [12]  669 	mov	r0,a
      000139 86 82            [24]  670 	mov	dpl,@r0
      00013B 08               [12]  671 	inc	r0
      00013C 86 83            [24]  672 	mov	dph,@r0
      00013E 08               [12]  673 	inc	r0
      00013F 86 F0            [24]  674 	mov	b,@r0
      000141 12r00r00         [24]  675 	lcall	__gptrget
      000144 FB               [12]  676 	mov	r3,a
      000145 A3               [24]  677 	inc	dptr
      000146 12r00r00         [24]  678 	lcall	__gptrget
      000149 FC               [12]  679 	mov	r4,a
      00014A E5*00            [12]  680 	mov	a,_bp
      00014C 24 08            [12]  681 	add	a,#0x08
      00014E F8               [12]  682 	mov	r0,a
      00014F 74 07            [12]  683 	mov	a,#0x07
      000151 26               [12]  684 	add	a,@r0
      000152 FA               [12]  685 	mov	r2,a
      000153 E4               [12]  686 	clr	a
      000154 08               [12]  687 	inc	r0
      000155 36               [12]  688 	addc	a,@r0
      000156 FE               [12]  689 	mov	r6,a
      000157 08               [12]  690 	inc	r0
      000158 86 07            [24]  691 	mov	ar7,@r0
      00015A C0 03            [24]  692 	push	ar3
      00015C C0 04            [24]  693 	push	ar4
      00015E E4               [12]  694 	clr	a
      00015F C0 E0            [24]  695 	push	acc
      000161 C0 E0            [24]  696 	push	acc
      000163 C0 E0            [24]  697 	push	acc
      000165 8A 82            [24]  698 	mov	dpl,r2
      000167 8E 83            [24]  699 	mov	dph,r6
      000169 8F F0            [24]  700 	mov	b,r7
      00016B 12r00r00         [24]  701 	lcall	_strtol
      00016E C8               [12]  702 	xch	a,r0
      00016F E5*00            [12]  703 	mov	a,_bp
      000171 24 0B            [12]  704 	add	a,#0x0b
      000173 C8               [12]  705 	xch	a,r0
      000174 A6 82            [24]  706 	mov	@r0,dpl
      000176 08               [12]  707 	inc	r0
      000177 A6 83            [24]  708 	mov	@r0,dph
      000179 08               [12]  709 	inc	r0
      00017A A6 F0            [24]  710 	mov	@r0,b
      00017C 08               [12]  711 	inc	r0
      00017D F6               [12]  712 	mov	@r0,a
      00017E E5 81            [12]  713 	mov	a,sp
      000180 24 FB            [12]  714 	add	a,#0xfb
      000182 F5 81            [12]  715 	mov	sp,a
                                    716 ;	calc.c:96: ctx->acc = ctx->acc * (long)ctx->base + d;
      000184 E5*00            [12]  717 	mov	a,_bp
      000186 24 08            [12]  718 	add	a,#0x08
      000188 F8               [12]  719 	mov	r0,a
      000189 A9*00            [24]  720 	mov	r1,_bp
      00018B 09               [12]  721 	inc	r1
      00018C 74 02            [12]  722 	mov	a,#0x02
      00018E 26               [12]  723 	add	a,@r0
      00018F F7               [12]  724 	mov	@r1,a
      000190 E4               [12]  725 	clr	a
      000191 08               [12]  726 	inc	r0
      000192 36               [12]  727 	addc	a,@r0
      000193 09               [12]  728 	inc	r1
      000194 F7               [12]  729 	mov	@r1,a
      000195 08               [12]  730 	inc	r0
      000196 09               [12]  731 	inc	r1
      000197 E6               [12]  732 	mov	a,@r0
      000198 F7               [12]  733 	mov	@r1,a
      000199 A8*00            [24]  734 	mov	r0,_bp
      00019B 08               [12]  735 	inc	r0
      00019C 86 82            [24]  736 	mov	dpl,@r0
      00019E 08               [12]  737 	inc	r0
      00019F 86 83            [24]  738 	mov	dph,@r0
      0001A1 08               [12]  739 	inc	r0
      0001A2 86 F0            [24]  740 	mov	b,@r0
      0001A4 E5*00            [12]  741 	mov	a,_bp
      0001A6 24 04            [12]  742 	add	a,#0x04
      0001A8 F9               [12]  743 	mov	r1,a
      0001A9 12r00r00         [24]  744 	lcall	__gptrget
      0001AC F7               [12]  745 	mov	@r1,a
      0001AD A3               [24]  746 	inc	dptr
      0001AE 12r00r00         [24]  747 	lcall	__gptrget
      0001B1 09               [12]  748 	inc	r1
      0001B2 F7               [12]  749 	mov	@r1,a
      0001B3 A3               [24]  750 	inc	dptr
      0001B4 12r00r00         [24]  751 	lcall	__gptrget
      0001B7 09               [12]  752 	inc	r1
      0001B8 F7               [12]  753 	mov	@r1,a
      0001B9 A3               [24]  754 	inc	dptr
      0001BA 12r00r00         [24]  755 	lcall	__gptrget
      0001BD 09               [12]  756 	inc	r1
      0001BE F7               [12]  757 	mov	@r1,a
      0001BF E5*00            [12]  758 	mov	a,_bp
      0001C1 24 08            [12]  759 	add	a,#0x08
      0001C3 F8               [12]  760 	mov	r0,a
      0001C4 86 82            [24]  761 	mov	dpl,@r0
      0001C6 08               [12]  762 	inc	r0
      0001C7 86 83            [24]  763 	mov	dph,@r0
      0001C9 08               [12]  764 	inc	r0
      0001CA 86 F0            [24]  765 	mov	b,@r0
      0001CC 12r00r00         [24]  766 	lcall	__gptrget
      0001CF FA               [12]  767 	mov	r2,a
      0001D0 A3               [24]  768 	inc	dptr
      0001D1 12r00r00         [24]  769 	lcall	__gptrget
      0001D4 FB               [12]  770 	mov	r3,a
      0001D5 33               [12]  771 	rlc	a
      0001D6 95 E0            [12]  772 	subb	a,acc
      0001D8 FE               [12]  773 	mov	r6,a
      0001D9 FF               [12]  774 	mov	r7,a
      0001DA C0 02            [24]  775 	push	ar2
      0001DC C0 03            [24]  776 	push	ar3
      0001DE C0 06            [24]  777 	push	ar6
      0001E0 C0 07            [24]  778 	push	ar7
      0001E2 E5*00            [12]  779 	mov	a,_bp
      0001E4 24 04            [12]  780 	add	a,#0x04
      0001E6 F8               [12]  781 	mov	r0,a
      0001E7 86 82            [24]  782 	mov	dpl,@r0
      0001E9 08               [12]  783 	inc	r0
      0001EA 86 83            [24]  784 	mov	dph,@r0
      0001EC 08               [12]  785 	inc	r0
      0001ED 86 F0            [24]  786 	mov	b,@r0
      0001EF 08               [12]  787 	inc	r0
      0001F0 E6               [12]  788 	mov	a,@r0
      0001F1 12r00r00         [24]  789 	lcall	__mullong
      0001F4 AC 82            [24]  790 	mov	r4,dpl
      0001F6 AD 83            [24]  791 	mov	r5,dph
      0001F8 AE F0            [24]  792 	mov	r6,b
      0001FA FF               [12]  793 	mov	r7,a
      0001FB E5 81            [12]  794 	mov	a,sp
      0001FD 24 FC            [12]  795 	add	a,#0xfc
      0001FF F5 81            [12]  796 	mov	sp,a
      000201 E5*00            [12]  797 	mov	a,_bp
      000203 24 0B            [12]  798 	add	a,#0x0b
      000205 F8               [12]  799 	mov	r0,a
      000206 E6               [12]  800 	mov	a,@r0
      000207 2C               [12]  801 	add	a,r4
      000208 FC               [12]  802 	mov	r4,a
      000209 08               [12]  803 	inc	r0
      00020A E6               [12]  804 	mov	a,@r0
      00020B 3D               [12]  805 	addc	a,r5
      00020C FD               [12]  806 	mov	r5,a
      00020D 08               [12]  807 	inc	r0
      00020E E6               [12]  808 	mov	a,@r0
      00020F 3E               [12]  809 	addc	a,r6
      000210 FE               [12]  810 	mov	r6,a
      000211 08               [12]  811 	inc	r0
      000212 E6               [12]  812 	mov	a,@r0
      000213 3F               [12]  813 	addc	a,r7
      000214 FF               [12]  814 	mov	r7,a
      000215 A8*00            [24]  815 	mov	r0,_bp
      000217 08               [12]  816 	inc	r0
      000218 86 82            [24]  817 	mov	dpl,@r0
      00021A 08               [12]  818 	inc	r0
      00021B 86 83            [24]  819 	mov	dph,@r0
      00021D 08               [12]  820 	inc	r0
      00021E 86 F0            [24]  821 	mov	b,@r0
      000220 EC               [12]  822 	mov	a,r4
      000221 12r00r00         [24]  823 	lcall	__gptrput
      000224 A3               [24]  824 	inc	dptr
      000225 ED               [12]  825 	mov	a,r5
      000226 12r00r00         [24]  826 	lcall	__gptrput
      000229 A3               [24]  827 	inc	dptr
      00022A EE               [12]  828 	mov	a,r6
      00022B 12r00r00         [24]  829 	lcall	__gptrput
      00022E A3               [24]  830 	inc	dptr
      00022F EF               [12]  831 	mov	a,r7
      000230 12r00r00         [24]  832 	lcall	__gptrput
                                    833 ;	calc.c:98: return 1;
      000233 90 00 01         [24]  834 	mov	dptr,#0x0001
                                    835 ;	calc.c:99: }
      000236 85*00 81         [24]  836 	mov	sp,_bp
      000239 D0*00            [24]  837 	pop	_bp
      00023B 22               [24]  838 	ret
                                    839 ;------------------------------------------------------------
                                    840 ;Allocation info for local variables in function 'dump_pop'
                                    841 ;------------------------------------------------------------
                                    842 ;delta                     Allocated to stack - _bp -5
                                    843 ;_ctx                      Allocated to registers r5 r6 r7 
                                    844 ;ctx                       Allocated to stack - _bp +5
                                    845 ;d                         Allocated to stack - _bp +8
                                    846 ;r                         Allocated to stack - _bp +2
                                    847 ;__1310720001              Allocated to registers 
                                    848 ;s                         Allocated to registers r5 r6 r7 
                                    849 ;__1966080003              Allocated to registers 
                                    850 ;s                         Allocated to registers r4 r5 r6 
                                    851 ;__1966080005              Allocated to registers 
                                    852 ;s                         Allocated to registers r4 r5 r6 
                                    853 ;__1966080007              Allocated to registers r3 r4 r5 r6 
                                    854 ;d                         Allocated to stack - _bp +12
                                    855 ;mask                      Allocated to stack - _bp +16
                                    856 ;__1966080009              Allocated to registers 
                                    857 ;s                         Allocated to registers r4 r5 r6 
                                    858 ;sloc0                     Allocated to stack - _bp +1
                                    859 ;sloc1                     Allocated to stack - _bp +2
                                    860 ;------------------------------------------------------------
                                    861 ;	calc.c:101: static int dump_pop(void *_ctx, delta_t *delta) __reentrant {
                                    862 ;	-----------------------------------------
                                    863 ;	 function dump_pop
                                    864 ;	-----------------------------------------
      00023C                        865 _dump_pop:
      00023C C0*00            [24]  866 	push	_bp
      00023E E5 81            [12]  867 	mov	a,sp
      000240 F5*00            [12]  868 	mov	_bp,a
      000242 24 13            [12]  869 	add	a,#0x13
      000244 F5 81            [12]  870 	mov	sp,a
      000246 AD 82            [24]  871 	mov	r5,dpl
      000248 AE 83            [24]  872 	mov	r6,dph
      00024A AF F0            [24]  873 	mov	r7,b
                                    874 ;	calc.c:102: struct ctx *ctx = (struct ctx *)_ctx;
      00024C E5*00            [12]  875 	mov	a,_bp
      00024E 24 05            [12]  876 	add	a,#0x05
      000250 F8               [12]  877 	mov	r0,a
      000251 A6 05            [24]  878 	mov	@r0,ar5
      000253 08               [12]  879 	inc	r0
      000254 A6 06            [24]  880 	mov	@r0,ar6
      000256 08               [12]  881 	inc	r0
      000257 A6 07            [24]  882 	mov	@r0,ar7
                                    883 ;	calc.c:106: if (delta->event == EVENT_TERM) printstr("\r\n");
      000259 E5*00            [12]  884 	mov	a,_bp
      00025B 24 FB            [12]  885 	add	a,#0xfb
      00025D F8               [12]  886 	mov	r0,a
      00025E 86 02            [24]  887 	mov	ar2,@r0
      000260 08               [12]  888 	inc	r0
      000261 86 03            [24]  889 	mov	ar3,@r0
      000263 08               [12]  890 	inc	r0
      000264 86 04            [24]  891 	mov	ar4,@r0
      000266 74 02            [12]  892 	mov	a,#0x02
      000268 2A               [12]  893 	add	a,r2
      000269 FA               [12]  894 	mov	r2,a
      00026A E4               [12]  895 	clr	a
      00026B 3B               [12]  896 	addc	a,r3
      00026C FB               [12]  897 	mov	r3,a
      00026D 8A 82            [24]  898 	mov	dpl,r2
      00026F 8B 83            [24]  899 	mov	dph,r3
      000271 8C F0            [24]  900 	mov	b,r4
      000273 12r00r00         [24]  901 	lcall	__gptrget
      000276 FE               [12]  902 	mov	r6,a
      000277 A3               [24]  903 	inc	dptr
      000278 12r00r00         [24]  904 	lcall	__gptrget
      00027B FF               [12]  905 	mov	r7,a
      00027C BE 07 3D         [24]  906 	cjne	r6,#0x07,00102$
      00027F BF 00 3A         [24]  907 	cjne	r7,#0x00,00102$
      000282 7Dr00            [12]  908 	mov	r5,#___str_0
      000284 7Es00            [12]  909 	mov	r6,#(___str_0 >> 8)
      000286 7F 80            [12]  910 	mov	r7,#0x80
                                    911 ;	calc.c:50: return;
      000288                        912 00122$:
                                    913 ;	calc.c:48: for (; *s; s++) putchar(*s);
      000288 8D 82            [24]  914 	mov	dpl,r5
      00028A 8E 83            [24]  915 	mov	dph,r6
      00028C 8F F0            [24]  916 	mov	b,r7
      00028E A8*00            [24]  917 	mov	r0,_bp
      000290 08               [12]  918 	inc	r0
      000291 12r00r00         [24]  919 	lcall	__gptrget
      000294 F6               [12]  920 	mov	@r0,a
      000295 A8*00            [24]  921 	mov	r0,_bp
      000297 08               [12]  922 	inc	r0
      000298 E6               [12]  923 	mov	a,@r0
      000299 60 21            [24]  924 	jz	00102$
      00029B C0 02            [24]  925 	push	ar2
      00029D C0 03            [24]  926 	push	ar3
      00029F C0 04            [24]  927 	push	ar4
      0002A1 A8*00            [24]  928 	mov	r0,_bp
      0002A3 08               [12]  929 	inc	r0
      0002A4 86 03            [24]  930 	mov	ar3,@r0
      0002A6 7C 00            [12]  931 	mov	r4,#0x00
      0002A8 8B 82            [24]  932 	mov	dpl,r3
      0002AA 8C 83            [24]  933 	mov	dph,r4
      0002AC 12r00r00         [24]  934 	lcall	_putchar
      0002AF 0D               [12]  935 	inc	r5
      0002B0 BD 00 01         [24]  936 	cjne	r5,#0x00,00210$
      0002B3 0E               [12]  937 	inc	r6
      0002B4                        938 00210$:
      0002B4 D0 04            [24]  939 	pop	ar4
      0002B6 D0 03            [24]  940 	pop	ar3
      0002B8 D0 02            [24]  941 	pop	ar2
                                    942 ;	calc.c:106: if (delta->event == EVENT_TERM) printstr("\r\n");
      0002BA 80 CC            [24]  943 	sjmp	00122$
      0002BC                        944 00102$:
                                    945 ;	calc.c:108: r = stack_pop(&ctx->s, &d);
      0002BC C0 02            [24]  946 	push	ar2
      0002BE C0 03            [24]  947 	push	ar3
      0002C0 C0 04            [24]  948 	push	ar4
      0002C2 E5*00            [12]  949 	mov	a,_bp
      0002C4 24 08            [12]  950 	add	a,#0x08
      0002C6 FF               [12]  951 	mov	r7,a
      0002C7 A8*00            [24]  952 	mov	r0,_bp
      0002C9 08               [12]  953 	inc	r0
      0002CA 08               [12]  954 	inc	r0
      0002CB A6 07            [24]  955 	mov	@r0,ar7
      0002CD 08               [12]  956 	inc	r0
      0002CE 76 00            [12]  957 	mov	@r0,#0x00
      0002D0 08               [12]  958 	inc	r0
      0002D1 76 40            [12]  959 	mov	@r0,#0x40
      0002D3 E5*00            [12]  960 	mov	a,_bp
      0002D5 24 05            [12]  961 	add	a,#0x05
      0002D7 F8               [12]  962 	mov	r0,a
      0002D8 74 09            [12]  963 	mov	a,#0x09
      0002DA 26               [12]  964 	add	a,@r0
      0002DB FA               [12]  965 	mov	r2,a
      0002DC E4               [12]  966 	clr	a
      0002DD 08               [12]  967 	inc	r0
      0002DE 36               [12]  968 	addc	a,@r0
      0002DF FB               [12]  969 	mov	r3,a
      0002E0 08               [12]  970 	inc	r0
      0002E1 86 06            [24]  971 	mov	ar6,@r0
      0002E3 C0 07            [24]  972 	push	ar7
      0002E5 C0 04            [24]  973 	push	ar4
      0002E7 C0 03            [24]  974 	push	ar3
      0002E9 C0 02            [24]  975 	push	ar2
      0002EB A8*00            [24]  976 	mov	r0,_bp
      0002ED 08               [12]  977 	inc	r0
      0002EE 08               [12]  978 	inc	r0
      0002EF E6               [12]  979 	mov	a,@r0
      0002F0 C0 E0            [24]  980 	push	acc
      0002F2 08               [12]  981 	inc	r0
      0002F3 E6               [12]  982 	mov	a,@r0
      0002F4 C0 E0            [24]  983 	push	acc
      0002F6 08               [12]  984 	inc	r0
      0002F7 E6               [12]  985 	mov	a,@r0
      0002F8 C0 E0            [24]  986 	push	acc
      0002FA 8A 82            [24]  987 	mov	dpl,r2
      0002FC 8B 83            [24]  988 	mov	dph,r3
      0002FE 8E F0            [24]  989 	mov	b,r6
      000300 12r00r00         [24]  990 	lcall	_stack_pop
      000303 AD 82            [24]  991 	mov	r5,dpl
      000305 AE 83            [24]  992 	mov	r6,dph
      000307 15 81            [12]  993 	dec	sp
      000309 15 81            [12]  994 	dec	sp
      00030B 15 81            [12]  995 	dec	sp
      00030D D0 02            [24]  996 	pop	ar2
      00030F D0 03            [24]  997 	pop	ar3
      000311 D0 04            [24]  998 	pop	ar4
      000313 D0 07            [24]  999 	pop	ar7
      000315 A8*00            [24] 1000 	mov	r0,_bp
      000317 08               [12] 1001 	inc	r0
      000318 08               [12] 1002 	inc	r0
      000319 A6 05            [24] 1003 	mov	@r0,ar5
      00031B 08               [12] 1004 	inc	r0
      00031C A6 06            [24] 1005 	mov	@r0,ar6
                                   1006 ;	calc.c:109: if (!r) {
      00031E D0 04            [24] 1007 	pop	ar4
      000320 D0 03            [24] 1008 	pop	ar3
      000322 D0 02            [24] 1009 	pop	ar2
      000324 ED               [12] 1010 	mov	a,r5
      000325 4E               [12] 1011 	orl	a,r6
      000326 70 3D            [24] 1012 	jnz	00154$
                                   1013 ;	calc.c:110: if (delta->event != EVENT_TERM) printstr("stack underflow\r\n");
      000328 8A 82            [24] 1014 	mov	dpl,r2
      00032A 8B 83            [24] 1015 	mov	dph,r3
      00032C 8C F0            [24] 1016 	mov	b,r4
      00032E 12r00r00         [24] 1017 	lcall	__gptrget
      000331 FA               [12] 1018 	mov	r2,a
      000332 A3               [24] 1019 	inc	dptr
      000333 12r00r00         [24] 1020 	lcall	__gptrget
      000336 FB               [12] 1021 	mov	r3,a
      000337 BA 07 06         [24] 1022 	cjne	r2,#0x07,00212$
      00033A BB 00 03         [24] 1023 	cjne	r3,#0x00,00212$
      00033D 02r04rE7         [24] 1024 	ljmp	00110$
      000340                       1025 00212$:
      000340 7Cr03            [12] 1026 	mov	r4,#___str_1
      000342 7Ds00            [12] 1027 	mov	r5,#(___str_1 >> 8)
      000344 7E 80            [12] 1028 	mov	r6,#0x80
                                   1029 ;	calc.c:50: return;
      000346                       1030 00125$:
                                   1031 ;	calc.c:48: for (; *s; s++) putchar(*s);
      000346 8C 82            [24] 1032 	mov	dpl,r4
      000348 8D 83            [24] 1033 	mov	dph,r5
      00034A 8E F0            [24] 1034 	mov	b,r6
      00034C 12r00r00         [24] 1035 	lcall	__gptrget
      00034F FB               [12] 1036 	mov	r3,a
      000350 70 03            [24] 1037 	jnz	00213$
      000352 02r04rE7         [24] 1038 	ljmp	00110$
      000355                       1039 00213$:
      000355 7A 00            [12] 1040 	mov	r2,#0x00
      000357 8B 82            [24] 1041 	mov	dpl,r3
      000359 8A 83            [24] 1042 	mov	dph,r2
      00035B 12r00r00         [24] 1043 	lcall	_putchar
      00035E 0C               [12] 1044 	inc	r4
                                   1045 ;	calc.c:111: } else while (r > 0) {
      00035F BC 00 E4         [24] 1046 	cjne	r4,#0x00,00125$
      000362 0D               [12] 1047 	inc	r5
      000363 80 E1            [24] 1048 	sjmp	00125$
      000365                       1049 00154$:
      000365                       1050 00105$:
      000365 A8*00            [24] 1051 	mov	r0,_bp
      000367 08               [12] 1052 	inc	r0
      000368 08               [12] 1053 	inc	r0
      000369 C3               [12] 1054 	clr	c
      00036A E4               [12] 1055 	clr	a
      00036B 96               [12] 1056 	subb	a,@r0
      00036C 74 80            [12] 1057 	mov	a,#(0x00 ^ 0x80)
      00036E 08               [12] 1058 	inc	r0
      00036F 86 F0            [24] 1059 	mov	b,@r0
      000371 63 F0 80         [24] 1060 	xrl	b,#0x80
      000374 95 F0            [12] 1061 	subb	a,b
      000376 40 03            [24] 1062 	jc	00215$
      000378 02r04rE7         [24] 1063 	ljmp	00110$
      00037B                       1064 00215$:
                                   1065 ;	calc.c:112: printstr("VA ");
      00037B 7Cr15            [12] 1066 	mov	r4,#___str_2
      00037D 7Ds00            [12] 1067 	mov	r5,#(___str_2 >> 8)
      00037F 7E 80            [12] 1068 	mov	r6,#0x80
                                   1069 ;	calc.c:50: return;
      000381                       1070 00128$:
                                   1071 ;	calc.c:48: for (; *s; s++) putchar(*s);
      000381 8C 82            [24] 1072 	mov	dpl,r4
      000383 8D 83            [24] 1073 	mov	dph,r5
      000385 8E F0            [24] 1074 	mov	b,r6
      000387 12r00r00         [24] 1075 	lcall	__gptrget
      00038A FB               [12] 1076 	mov	r3,a
      00038B 60 10            [24] 1077 	jz	00116$
      00038D 7A 00            [12] 1078 	mov	r2,#0x00
      00038F 8B 82            [24] 1079 	mov	dpl,r3
      000391 8A 83            [24] 1080 	mov	dph,r2
      000393 12r00r00         [24] 1081 	lcall	_putchar
      000396 0C               [12] 1082 	inc	r4
                                   1083 ;	calc.c:112: printstr("VA ");
      000397 BC 00 E7         [24] 1084 	cjne	r4,#0x00,00128$
      00039A 0D               [12] 1085 	inc	r5
      00039B 80 E4            [24] 1086 	sjmp	00128$
      00039D                       1087 00116$:
                                   1088 ;	calc.c:113: printf("% 11ld / ", d);
      00039D C0 07            [24] 1089 	push	ar7
      00039F E5*00            [12] 1090 	mov	a,_bp
      0003A1 24 08            [12] 1091 	add	a,#0x08
      0003A3 F8               [12] 1092 	mov	r0,a
      0003A4 E6               [12] 1093 	mov	a,@r0
      0003A5 C0 E0            [24] 1094 	push	acc
      0003A7 08               [12] 1095 	inc	r0
      0003A8 E6               [12] 1096 	mov	a,@r0
      0003A9 C0 E0            [24] 1097 	push	acc
      0003AB 08               [12] 1098 	inc	r0
      0003AC E6               [12] 1099 	mov	a,@r0
      0003AD C0 E0            [24] 1100 	push	acc
      0003AF 08               [12] 1101 	inc	r0
      0003B0 E6               [12] 1102 	mov	a,@r0
      0003B1 C0 E0            [24] 1103 	push	acc
      0003B3 74r19            [12] 1104 	mov	a,#___str_3
      0003B5 C0 E0            [24] 1105 	push	acc
      0003B7 74s00            [12] 1106 	mov	a,#(___str_3 >> 8)
      0003B9 C0 E0            [24] 1107 	push	acc
      0003BB 74 80            [12] 1108 	mov	a,#0x80
      0003BD C0 E0            [24] 1109 	push	acc
      0003BF 12r00r00         [24] 1110 	lcall	_printf
      0003C2 E5 81            [12] 1111 	mov	a,sp
      0003C4 24 F9            [12] 1112 	add	a,#0xf9
      0003C6 F5 81            [12] 1113 	mov	sp,a
                                   1114 ;	calc.c:114: printf("%08lx / ", d);
      0003C8 E5*00            [12] 1115 	mov	a,_bp
      0003CA 24 08            [12] 1116 	add	a,#0x08
      0003CC F8               [12] 1117 	mov	r0,a
      0003CD E6               [12] 1118 	mov	a,@r0
      0003CE C0 E0            [24] 1119 	push	acc
      0003D0 08               [12] 1120 	inc	r0
      0003D1 E6               [12] 1121 	mov	a,@r0
      0003D2 C0 E0            [24] 1122 	push	acc
      0003D4 08               [12] 1123 	inc	r0
      0003D5 E6               [12] 1124 	mov	a,@r0
      0003D6 C0 E0            [24] 1125 	push	acc
      0003D8 08               [12] 1126 	inc	r0
      0003D9 E6               [12] 1127 	mov	a,@r0
      0003DA C0 E0            [24] 1128 	push	acc
      0003DC 74r23            [12] 1129 	mov	a,#___str_4
      0003DE C0 E0            [24] 1130 	push	acc
      0003E0 74s00            [12] 1131 	mov	a,#(___str_4 >> 8)
      0003E2 C0 E0            [24] 1132 	push	acc
      0003E4 74 80            [12] 1133 	mov	a,#0x80
      0003E6 C0 E0            [24] 1134 	push	acc
      0003E8 12r00r00         [24] 1135 	lcall	_printf
      0003EB E5 81            [12] 1136 	mov	a,sp
      0003ED 24 F9            [12] 1137 	add	a,#0xf9
      0003EF F5 81            [12] 1138 	mov	sp,a
      0003F1 D0 07            [24] 1139 	pop	ar7
                                   1140 ;	calc.c:115: printbin(d);
      0003F3 E5*00            [12] 1141 	mov	a,_bp
      0003F5 24 08            [12] 1142 	add	a,#0x08
      0003F7 F8               [12] 1143 	mov	r0,a
      0003F8 86 03            [24] 1144 	mov	ar3,@r0
      0003FA 08               [12] 1145 	inc	r0
      0003FB 86 04            [24] 1146 	mov	ar4,@r0
      0003FD 08               [12] 1147 	inc	r0
      0003FE 86 05            [24] 1148 	mov	ar5,@r0
      000400 08               [12] 1149 	inc	r0
      000401 86 06            [24] 1150 	mov	ar6,@r0
      000403 E5*00            [12] 1151 	mov	a,_bp
      000405 24 0C            [12] 1152 	add	a,#0x0c
      000407 F8               [12] 1153 	mov	r0,a
      000408 A6 03            [24] 1154 	mov	@r0,ar3
      00040A 08               [12] 1155 	inc	r0
      00040B A6 04            [24] 1156 	mov	@r0,ar4
      00040D 08               [12] 1157 	inc	r0
      00040E A6 05            [24] 1158 	mov	@r0,ar5
      000410 08               [12] 1159 	inc	r0
      000411 A6 06            [24] 1160 	mov	@r0,ar6
                                   1161 ;	calc.c:56: for (mask = 0x80000000lu; mask; mask >>= 1)
      000413 E5*00            [12] 1162 	mov	a,_bp
      000415 24 10            [12] 1163 	add	a,#0x10
      000417 F8               [12] 1164 	mov	r0,a
      000418 E4               [12] 1165 	clr	a
      000419 F6               [12] 1166 	mov	@r0,a
      00041A 08               [12] 1167 	inc	r0
      00041B F6               [12] 1168 	mov	@r0,a
      00041C 08               [12] 1169 	inc	r0
      00041D F6               [12] 1170 	mov	@r0,a
      00041E 08               [12] 1171 	inc	r0
      00041F 76 80            [12] 1172 	mov	@r0,#0x80
      000421                       1173 00130$:
                                   1174 ;	calc.c:57: (void)putchar((d & mask) ? (int)'1' : (int)'0');
      000421 C0 07            [24] 1175 	push	ar7
      000423 E5*00            [12] 1176 	mov	a,_bp
      000425 24 0C            [12] 1177 	add	a,#0x0c
      000427 F8               [12] 1178 	mov	r0,a
      000428 86 03            [24] 1179 	mov	ar3,@r0
      00042A 08               [12] 1180 	inc	r0
      00042B 86 05            [24] 1181 	mov	ar5,@r0
      00042D 08               [12] 1182 	inc	r0
      00042E 86 06            [24] 1183 	mov	ar6,@r0
      000430 08               [12] 1184 	inc	r0
      000431 86 07            [24] 1185 	mov	ar7,@r0
      000433 E5*00            [12] 1186 	mov	a,_bp
      000435 24 10            [12] 1187 	add	a,#0x10
      000437 F8               [12] 1188 	mov	r0,a
      000438 E6               [12] 1189 	mov	a,@r0
      000439 52 03            [12] 1190 	anl	ar3,a
      00043B 08               [12] 1191 	inc	r0
      00043C E6               [12] 1192 	mov	a,@r0
      00043D 52 05            [12] 1193 	anl	ar5,a
      00043F 08               [12] 1194 	inc	r0
      000440 E6               [12] 1195 	mov	a,@r0
      000441 52 06            [12] 1196 	anl	ar6,a
      000443 08               [12] 1197 	inc	r0
      000444 E6               [12] 1198 	mov	a,@r0
      000445 52 07            [12] 1199 	anl	ar7,a
      000447 EB               [12] 1200 	mov	a,r3
      000448 4D               [12] 1201 	orl	a,r5
      000449 4E               [12] 1202 	orl	a,r6
      00044A 4F               [12] 1203 	orl	a,r7
      00044B D0 07            [24] 1204 	pop	ar7
      00044D 60 06            [24] 1205 	jz	00137$
      00044F 7D 31            [12] 1206 	mov	r5,#0x31
      000451 7E 00            [12] 1207 	mov	r6,#0x00
      000453 80 04            [24] 1208 	sjmp	00138$
      000455                       1209 00137$:
      000455 7D 30            [12] 1210 	mov	r5,#0x30
      000457 7E 00            [12] 1211 	mov	r6,#0x00
      000459                       1212 00138$:
      000459 8D 82            [24] 1213 	mov	dpl,r5
      00045B 8E 83            [24] 1214 	mov	dph,r6
      00045D 12r00r00         [24] 1215 	lcall	_putchar
                                   1216 ;	calc.c:56: for (mask = 0x80000000lu; mask; mask >>= 1)
      000460 E5*00            [12] 1217 	mov	a,_bp
      000462 24 10            [12] 1218 	add	a,#0x10
      000464 F8               [12] 1219 	mov	r0,a
      000465 08               [12] 1220 	inc	r0
      000466 08               [12] 1221 	inc	r0
      000467 08               [12] 1222 	inc	r0
      000468 E6               [12] 1223 	mov	a,@r0
      000469 C3               [12] 1224 	clr	c
      00046A 13               [12] 1225 	rrc	a
      00046B F6               [12] 1226 	mov	@r0,a
      00046C 18               [12] 1227 	dec	r0
      00046D E6               [12] 1228 	mov	a,@r0
      00046E 13               [12] 1229 	rrc	a
      00046F F6               [12] 1230 	mov	@r0,a
      000470 18               [12] 1231 	dec	r0
      000471 E6               [12] 1232 	mov	a,@r0
      000472 13               [12] 1233 	rrc	a
      000473 F6               [12] 1234 	mov	@r0,a
      000474 18               [12] 1235 	dec	r0
      000475 E6               [12] 1236 	mov	a,@r0
      000476 13               [12] 1237 	rrc	a
      000477 F6               [12] 1238 	mov	@r0,a
      000478 E5*00            [12] 1239 	mov	a,_bp
      00047A 24 10            [12] 1240 	add	a,#0x10
      00047C F8               [12] 1241 	mov	r0,a
      00047D E6               [12] 1242 	mov	a,@r0
      00047E 08               [12] 1243 	inc	r0
      00047F 46               [12] 1244 	orl	a,@r0
      000480 08               [12] 1245 	inc	r0
      000481 46               [12] 1246 	orl	a,@r0
      000482 08               [12] 1247 	inc	r0
      000483 46               [12] 1248 	orl	a,@r0
      000484 70 9B            [24] 1249 	jnz	00130$
                                   1250 ;	calc.c:116: printstr("\r\n");
      000486 7Cr00            [12] 1251 	mov	r4,#___str_0
      000488 7Ds00            [12] 1252 	mov	r5,#(___str_0 >> 8)
      00048A 7E 80            [12] 1253 	mov	r6,#0x80
                                   1254 ;	calc.c:50: return;
      00048C                       1255 00133$:
                                   1256 ;	calc.c:48: for (; *s; s++) putchar(*s);
      00048C 8C 82            [24] 1257 	mov	dpl,r4
      00048E 8D 83            [24] 1258 	mov	dph,r5
      000490 8E F0            [24] 1259 	mov	b,r6
      000492 12r00r00         [24] 1260 	lcall	__gptrget
      000495 FB               [12] 1261 	mov	r3,a
      000496 60 10            [24] 1262 	jz	00120$
      000498 7A 00            [12] 1263 	mov	r2,#0x00
      00049A 8B 82            [24] 1264 	mov	dpl,r3
      00049C 8A 83            [24] 1265 	mov	dph,r2
      00049E 12r00r00         [24] 1266 	lcall	_putchar
      0004A1 0C               [12] 1267 	inc	r4
                                   1268 ;	calc.c:116: printstr("\r\n");
      0004A2 BC 00 E7         [24] 1269 	cjne	r4,#0x00,00133$
      0004A5 0D               [12] 1270 	inc	r5
      0004A6 80 E4            [24] 1271 	sjmp	00133$
      0004A8                       1272 00120$:
                                   1273 ;	calc.c:117: r = stack_pop(&ctx->s, &d);
      0004A8 8F 04            [24] 1274 	mov	ar4,r7
      0004AA 7D 00            [12] 1275 	mov	r5,#0x00
      0004AC 7E 40            [12] 1276 	mov	r6,#0x40
      0004AE C0 07            [24] 1277 	push	ar7
      0004B0 E5*00            [12] 1278 	mov	a,_bp
      0004B2 24 05            [12] 1279 	add	a,#0x05
      0004B4 F8               [12] 1280 	mov	r0,a
      0004B5 74 09            [12] 1281 	mov	a,#0x09
      0004B7 26               [12] 1282 	add	a,@r0
      0004B8 FA               [12] 1283 	mov	r2,a
      0004B9 E4               [12] 1284 	clr	a
      0004BA 08               [12] 1285 	inc	r0
      0004BB 36               [12] 1286 	addc	a,@r0
      0004BC FB               [12] 1287 	mov	r3,a
      0004BD 08               [12] 1288 	inc	r0
      0004BE 86 07            [24] 1289 	mov	ar7,@r0
      0004C0 C0 04            [24] 1290 	push	ar4
      0004C2 C0 05            [24] 1291 	push	ar5
      0004C4 C0 06            [24] 1292 	push	ar6
      0004C6 8A 82            [24] 1293 	mov	dpl,r2
      0004C8 8B 83            [24] 1294 	mov	dph,r3
      0004CA 8F F0            [24] 1295 	mov	b,r7
      0004CC 12r00r00         [24] 1296 	lcall	_stack_pop
      0004CF AE 82            [24] 1297 	mov	r6,dpl
      0004D1 AF 83            [24] 1298 	mov	r7,dph
      0004D3 15 81            [12] 1299 	dec	sp
      0004D5 15 81            [12] 1300 	dec	sp
      0004D7 15 81            [12] 1301 	dec	sp
      0004D9 A8*00            [24] 1302 	mov	r0,_bp
      0004DB 08               [12] 1303 	inc	r0
      0004DC 08               [12] 1304 	inc	r0
      0004DD A6 06            [24] 1305 	mov	@r0,ar6
      0004DF 08               [12] 1306 	inc	r0
      0004E0 A6 07            [24] 1307 	mov	@r0,ar7
      0004E2 D0 07            [24] 1308 	pop	ar7
      0004E4 02r03r65         [24] 1309 	ljmp	00105$
      0004E7                       1310 00110$:
                                   1311 ;	calc.c:120: return 1;
      0004E7 90 00 01         [24] 1312 	mov	dptr,#0x0001
                                   1313 ;	calc.c:121: }
      0004EA 85*00 81         [24] 1314 	mov	sp,_bp
      0004ED D0*00            [24] 1315 	pop	_bp
      0004EF 22               [24] 1316 	ret
                                   1317 ;------------------------------------------------------------
                                   1318 ;Allocation info for local variables in function 'dump_peek'
                                   1319 ;------------------------------------------------------------
                                   1320 ;d                         Allocated to stack - _bp -6
                                   1321 ;_ctx                      Allocated to registers 
                                   1322 ;__1310720011              Allocated to registers 
                                   1323 ;s                         Allocated to registers r5 r6 r7 
                                   1324 ;__1310720013              Allocated to registers r4 r5 r6 r7 
                                   1325 ;d                         Allocated to stack - _bp +1
                                   1326 ;mask                      Allocated to stack - _bp +5
                                   1327 ;__1310720015              Allocated to registers 
                                   1328 ;s                         Allocated to registers r5 r6 r7 
                                   1329 ;------------------------------------------------------------
                                   1330 ;	calc.c:123: static int dump_peek(void *_ctx, long d) __reentrant {
                                   1331 ;	-----------------------------------------
                                   1332 ;	 function dump_peek
                                   1333 ;	-----------------------------------------
      0004F0                       1334 _dump_peek:
      0004F0 C0*00            [24] 1335 	push	_bp
      0004F2 E5 81            [12] 1336 	mov	a,sp
      0004F4 F5*00            [12] 1337 	mov	_bp,a
      0004F6 24 08            [12] 1338 	add	a,#0x08
      0004F8 F5 81            [12] 1339 	mov	sp,a
                                   1340 ;	calc.c:126: printstr("PA ");
      0004FA 7Dr2C            [12] 1341 	mov	r5,#___str_5
      0004FC 7Es00            [12] 1342 	mov	r6,#(___str_5 >> 8)
      0004FE 7F 80            [12] 1343 	mov	r7,#0x80
                                   1344 ;	calc.c:50: return;
      000500                       1345 00108$:
                                   1346 ;	calc.c:48: for (; *s; s++) putchar(*s);
      000500 8D 82            [24] 1347 	mov	dpl,r5
      000502 8E 83            [24] 1348 	mov	dph,r6
      000504 8F F0            [24] 1349 	mov	b,r7
      000506 12r00r00         [24] 1350 	lcall	__gptrget
      000509 FC               [12] 1351 	mov	r4,a
      00050A 60 10            [24] 1352 	jz	00102$
      00050C 7B 00            [12] 1353 	mov	r3,#0x00
      00050E 8C 82            [24] 1354 	mov	dpl,r4
      000510 8B 83            [24] 1355 	mov	dph,r3
      000512 12r00r00         [24] 1356 	lcall	_putchar
      000515 0D               [12] 1357 	inc	r5
                                   1358 ;	calc.c:126: printstr("PA ");
      000516 BD 00 E7         [24] 1359 	cjne	r5,#0x00,00108$
      000519 0E               [12] 1360 	inc	r6
      00051A 80 E4            [24] 1361 	sjmp	00108$
      00051C                       1362 00102$:
                                   1363 ;	calc.c:127: printf("% 11ld / ", d);
      00051C E5*00            [12] 1364 	mov	a,_bp
      00051E 24 FA            [12] 1365 	add	a,#0xfa
      000520 F8               [12] 1366 	mov	r0,a
      000521 E6               [12] 1367 	mov	a,@r0
      000522 C0 E0            [24] 1368 	push	acc
      000524 08               [12] 1369 	inc	r0
      000525 E6               [12] 1370 	mov	a,@r0
      000526 C0 E0            [24] 1371 	push	acc
      000528 08               [12] 1372 	inc	r0
      000529 E6               [12] 1373 	mov	a,@r0
      00052A C0 E0            [24] 1374 	push	acc
      00052C 08               [12] 1375 	inc	r0
      00052D E6               [12] 1376 	mov	a,@r0
      00052E C0 E0            [24] 1377 	push	acc
      000530 74r19            [12] 1378 	mov	a,#___str_3
      000532 C0 E0            [24] 1379 	push	acc
      000534 74s00            [12] 1380 	mov	a,#(___str_3 >> 8)
      000536 C0 E0            [24] 1381 	push	acc
      000538 74 80            [12] 1382 	mov	a,#0x80
      00053A C0 E0            [24] 1383 	push	acc
      00053C 12r00r00         [24] 1384 	lcall	_printf
      00053F E5 81            [12] 1385 	mov	a,sp
      000541 24 F9            [12] 1386 	add	a,#0xf9
      000543 F5 81            [12] 1387 	mov	sp,a
                                   1388 ;	calc.c:128: printf("%08lx / ", d);
      000545 E5*00            [12] 1389 	mov	a,_bp
      000547 24 FA            [12] 1390 	add	a,#0xfa
      000549 F8               [12] 1391 	mov	r0,a
      00054A E6               [12] 1392 	mov	a,@r0
      00054B C0 E0            [24] 1393 	push	acc
      00054D 08               [12] 1394 	inc	r0
      00054E E6               [12] 1395 	mov	a,@r0
      00054F C0 E0            [24] 1396 	push	acc
      000551 08               [12] 1397 	inc	r0
      000552 E6               [12] 1398 	mov	a,@r0
      000553 C0 E0            [24] 1399 	push	acc
      000555 08               [12] 1400 	inc	r0
      000556 E6               [12] 1401 	mov	a,@r0
      000557 C0 E0            [24] 1402 	push	acc
      000559 74r23            [12] 1403 	mov	a,#___str_4
      00055B C0 E0            [24] 1404 	push	acc
      00055D 74s00            [12] 1405 	mov	a,#(___str_4 >> 8)
      00055F C0 E0            [24] 1406 	push	acc
      000561 74 80            [12] 1407 	mov	a,#0x80
      000563 C0 E0            [24] 1408 	push	acc
      000565 12r00r00         [24] 1409 	lcall	_printf
      000568 E5 81            [12] 1410 	mov	a,sp
      00056A 24 F9            [12] 1411 	add	a,#0xf9
      00056C F5 81            [12] 1412 	mov	sp,a
                                   1413 ;	calc.c:129: printbin(d);
      00056E E5*00            [12] 1414 	mov	a,_bp
      000570 24 FA            [12] 1415 	add	a,#0xfa
      000572 F8               [12] 1416 	mov	r0,a
      000573 86 04            [24] 1417 	mov	ar4,@r0
      000575 08               [12] 1418 	inc	r0
      000576 86 05            [24] 1419 	mov	ar5,@r0
      000578 08               [12] 1420 	inc	r0
      000579 86 06            [24] 1421 	mov	ar6,@r0
      00057B 08               [12] 1422 	inc	r0
      00057C 86 07            [24] 1423 	mov	ar7,@r0
      00057E A8*00            [24] 1424 	mov	r0,_bp
      000580 08               [12] 1425 	inc	r0
      000581 A6 04            [24] 1426 	mov	@r0,ar4
      000583 08               [12] 1427 	inc	r0
      000584 A6 05            [24] 1428 	mov	@r0,ar5
      000586 08               [12] 1429 	inc	r0
      000587 A6 06            [24] 1430 	mov	@r0,ar6
      000589 08               [12] 1431 	inc	r0
      00058A A6 07            [24] 1432 	mov	@r0,ar7
                                   1433 ;	calc.c:56: for (mask = 0x80000000lu; mask; mask >>= 1)
      00058C E5*00            [12] 1434 	mov	a,_bp
      00058E 24 05            [12] 1435 	add	a,#0x05
      000590 F8               [12] 1436 	mov	r0,a
      000591 E4               [12] 1437 	clr	a
      000592 F6               [12] 1438 	mov	@r0,a
      000593 08               [12] 1439 	inc	r0
      000594 F6               [12] 1440 	mov	@r0,a
      000595 08               [12] 1441 	inc	r0
      000596 F6               [12] 1442 	mov	@r0,a
      000597 08               [12] 1443 	inc	r0
      000598 76 80            [12] 1444 	mov	@r0,#0x80
      00059A                       1445 00110$:
                                   1446 ;	calc.c:57: (void)putchar((d & mask) ? (int)'1' : (int)'0');
      00059A A8*00            [24] 1447 	mov	r0,_bp
      00059C 08               [12] 1448 	inc	r0
      00059D 86 04            [24] 1449 	mov	ar4,@r0
      00059F 08               [12] 1450 	inc	r0
      0005A0 86 05            [24] 1451 	mov	ar5,@r0
      0005A2 08               [12] 1452 	inc	r0
      0005A3 86 06            [24] 1453 	mov	ar6,@r0
      0005A5 08               [12] 1454 	inc	r0
      0005A6 86 07            [24] 1455 	mov	ar7,@r0
      0005A8 E5*00            [12] 1456 	mov	a,_bp
      0005AA 24 05            [12] 1457 	add	a,#0x05
      0005AC F8               [12] 1458 	mov	r0,a
      0005AD E6               [12] 1459 	mov	a,@r0
      0005AE 52 04            [12] 1460 	anl	ar4,a
      0005B0 08               [12] 1461 	inc	r0
      0005B1 E6               [12] 1462 	mov	a,@r0
      0005B2 52 05            [12] 1463 	anl	ar5,a
      0005B4 08               [12] 1464 	inc	r0
      0005B5 E6               [12] 1465 	mov	a,@r0
      0005B6 52 06            [12] 1466 	anl	ar6,a
      0005B8 08               [12] 1467 	inc	r0
      0005B9 E6               [12] 1468 	mov	a,@r0
      0005BA 52 07            [12] 1469 	anl	ar7,a
      0005BC EC               [12] 1470 	mov	a,r4
      0005BD 4D               [12] 1471 	orl	a,r5
      0005BE 4E               [12] 1472 	orl	a,r6
      0005BF 4F               [12] 1473 	orl	a,r7
      0005C0 60 06            [24] 1474 	jz	00117$
      0005C2 7E 31            [12] 1475 	mov	r6,#0x31
      0005C4 7F 00            [12] 1476 	mov	r7,#0x00
      0005C6 80 04            [24] 1477 	sjmp	00118$
      0005C8                       1478 00117$:
      0005C8 7E 30            [12] 1479 	mov	r6,#0x30
      0005CA 7F 00            [12] 1480 	mov	r7,#0x00
      0005CC                       1481 00118$:
      0005CC 8E 82            [24] 1482 	mov	dpl,r6
      0005CE 8F 83            [24] 1483 	mov	dph,r7
      0005D0 12r00r00         [24] 1484 	lcall	_putchar
                                   1485 ;	calc.c:56: for (mask = 0x80000000lu; mask; mask >>= 1)
      0005D3 E5*00            [12] 1486 	mov	a,_bp
      0005D5 24 05            [12] 1487 	add	a,#0x05
      0005D7 F8               [12] 1488 	mov	r0,a
      0005D8 08               [12] 1489 	inc	r0
      0005D9 08               [12] 1490 	inc	r0
      0005DA 08               [12] 1491 	inc	r0
      0005DB E6               [12] 1492 	mov	a,@r0
      0005DC C3               [12] 1493 	clr	c
      0005DD 13               [12] 1494 	rrc	a
      0005DE F6               [12] 1495 	mov	@r0,a
      0005DF 18               [12] 1496 	dec	r0
      0005E0 E6               [12] 1497 	mov	a,@r0
      0005E1 13               [12] 1498 	rrc	a
      0005E2 F6               [12] 1499 	mov	@r0,a
      0005E3 18               [12] 1500 	dec	r0
      0005E4 E6               [12] 1501 	mov	a,@r0
      0005E5 13               [12] 1502 	rrc	a
      0005E6 F6               [12] 1503 	mov	@r0,a
      0005E7 18               [12] 1504 	dec	r0
      0005E8 E6               [12] 1505 	mov	a,@r0
      0005E9 13               [12] 1506 	rrc	a
      0005EA F6               [12] 1507 	mov	@r0,a
      0005EB E5*00            [12] 1508 	mov	a,_bp
      0005ED 24 05            [12] 1509 	add	a,#0x05
      0005EF F8               [12] 1510 	mov	r0,a
      0005F0 E6               [12] 1511 	mov	a,@r0
      0005F1 08               [12] 1512 	inc	r0
      0005F2 46               [12] 1513 	orl	a,@r0
      0005F3 08               [12] 1514 	inc	r0
      0005F4 46               [12] 1515 	orl	a,@r0
      0005F5 08               [12] 1516 	inc	r0
      0005F6 46               [12] 1517 	orl	a,@r0
      0005F7 70 A1            [24] 1518 	jnz	00110$
                                   1519 ;	calc.c:130: printstr("\r\n");
      0005F9 7Dr00            [12] 1520 	mov	r5,#___str_0
      0005FB 7Es00            [12] 1521 	mov	r6,#(___str_0 >> 8)
      0005FD 7F 80            [12] 1522 	mov	r7,#0x80
                                   1523 ;	calc.c:50: return;
      0005FF                       1524 00113$:
                                   1525 ;	calc.c:48: for (; *s; s++) putchar(*s);
      0005FF 8D 82            [24] 1526 	mov	dpl,r5
      000601 8E 83            [24] 1527 	mov	dph,r6
      000603 8F F0            [24] 1528 	mov	b,r7
      000605 12r00r00         [24] 1529 	lcall	__gptrget
      000608 FC               [12] 1530 	mov	r4,a
      000609 60 10            [24] 1531 	jz	00106$
      00060B 7B 00            [12] 1532 	mov	r3,#0x00
      00060D 8C 82            [24] 1533 	mov	dpl,r4
      00060F 8B 83            [24] 1534 	mov	dph,r3
      000611 12r00r00         [24] 1535 	lcall	_putchar
      000614 0D               [12] 1536 	inc	r5
                                   1537 ;	calc.c:130: printstr("\r\n");
      000615 BD 00 E7         [24] 1538 	cjne	r5,#0x00,00113$
      000618 0E               [12] 1539 	inc	r6
      000619 80 E4            [24] 1540 	sjmp	00113$
      00061B                       1541 00106$:
                                   1542 ;	calc.c:132: return 1;
      00061B 90 00 01         [24] 1543 	mov	dptr,#0x0001
                                   1544 ;	calc.c:133: }
      00061E 85*00 81         [24] 1545 	mov	sp,_bp
      000621 D0*00            [24] 1546 	pop	_bp
      000623 22               [24] 1547 	ret
                                   1548 ;------------------------------------------------------------
                                   1549 ;Allocation info for local variables in function 'operator'
                                   1550 ;------------------------------------------------------------
                                   1551 ;delta                     Allocated to stack - _bp -5
                                   1552 ;_ctx                      Allocated to stack - _bp +1
                                   1553 ;ctx                       Allocated to stack - _bp +12
                                   1554 ;d0                        Allocated to stack - _bp +15
                                   1555 ;d1                        Allocated to stack - _bp +19
                                   1556 ;__1966080017              Allocated to registers 
                                   1557 ;s                         Allocated to registers r7 r6 r5 
                                   1558 ;__1966080019              Allocated to registers 
                                   1559 ;s                         Allocated to registers r7 r6 r5 
                                   1560 ;__2621440021              Allocated to registers 
                                   1561 ;s                         Allocated to registers r7 r6 r5 
                                   1562 ;__2621440023              Allocated to registers r7 r6 r5 r4 
                                   1563 ;d                         Allocated to stack - _bp +23
                                   1564 ;mask                      Allocated to stack - _bp +27
                                   1565 ;__2621440025              Allocated to registers 
                                   1566 ;s                         Allocated to registers r7 r6 r5 
                                   1567 ;__1966080027              Allocated to registers 
                                   1568 ;s                         Allocated to registers r7 r6 r5 
                                   1569 ;__1966080029              Allocated to registers 
                                   1570 ;s                         Allocated to registers r7 r6 r5 
                                   1571 ;__1966080031              Allocated to registers 
                                   1572 ;s                         Allocated to registers r7 r6 r5 
                                   1573 ;__1966080033              Allocated to registers 
                                   1574 ;s                         Allocated to registers r7 r6 r5 
                                   1575 ;__2621440035              Allocated to registers 
                                   1576 ;s                         Allocated to registers r7 r6 r5 
                                   1577 ;__2621440037              Allocated to registers r7 r6 r5 r4 
                                   1578 ;d                         Allocated to stack - _bp +23
                                   1579 ;mask                      Allocated to stack - _bp +27
                                   1580 ;__2621440039              Allocated to registers 
                                   1581 ;s                         Allocated to registers r7 r6 r5 
                                   1582 ;__1966080041              Allocated to registers 
                                   1583 ;s                         Allocated to registers r7 r6 r5 
                                   1584 ;__1966080043              Allocated to registers 
                                   1585 ;s                         Allocated to registers r7 r6 r5 
                                   1586 ;__2621440045              Allocated to registers 
                                   1587 ;s                         Allocated to registers r7 r6 r5 
                                   1588 ;__1966080047              Allocated to registers 
                                   1589 ;s                         Allocated to registers r7 r6 r5 
                                   1590 ;__2621440049              Allocated to registers 
                                   1591 ;s                         Allocated to registers r7 r6 r5 
                                   1592 ;__1966080051              Allocated to registers 
                                   1593 ;s                         Allocated to registers r7 r6 r5 
                                   1594 ;__2621440053              Allocated to registers 
                                   1595 ;s                         Allocated to registers r7 r6 r5 
                                   1596 ;__1966080055              Allocated to registers 
                                   1597 ;s                         Allocated to registers r7 r6 r5 
                                   1598 ;__2621440057              Allocated to registers 
                                   1599 ;s                         Allocated to registers r7 r6 r5 
                                   1600 ;__1966080059              Allocated to registers 
                                   1601 ;s                         Allocated to registers r7 r6 r5 
                                   1602 ;__2621440061              Allocated to registers 
                                   1603 ;s                         Allocated to registers r7 r6 r5 
                                   1604 ;__2621440063              Allocated to registers 
                                   1605 ;s                         Allocated to registers r7 r6 r5 
                                   1606 ;__1966080065              Allocated to registers 
                                   1607 ;s                         Allocated to registers r7 r6 r5 
                                   1608 ;__2621440067              Allocated to registers 
                                   1609 ;s                         Allocated to registers r7 r6 r5 
                                   1610 ;__2621440069              Allocated to registers 
                                   1611 ;s                         Allocated to registers r7 r6 r5 
                                   1612 ;__1966080071              Allocated to registers 
                                   1613 ;s                         Allocated to registers r5 r6 r7 
                                   1614 ;__2621440073              Allocated to registers 
                                   1615 ;s                         Allocated to registers r5 r6 r7 
                                   1616 ;__1966080075              Allocated to registers 
                                   1617 ;s                         Allocated to registers r5 r6 r7 
                                   1618 ;__2621440077              Allocated to registers 
                                   1619 ;s                         Allocated to registers r5 r6 r7 
                                   1620 ;__1966080079              Allocated to registers 
                                   1621 ;s                         Allocated to registers r5 r6 r7 
                                   1622 ;__2621440081              Allocated to registers 
                                   1623 ;s                         Allocated to registers r5 r6 r7 
                                   1624 ;__1966080083              Allocated to registers 
                                   1625 ;s                         Allocated to registers r5 r6 r7 
                                   1626 ;__2621440085              Allocated to registers 
                                   1627 ;s                         Allocated to registers r5 r6 r7 
                                   1628 ;__1966080087              Allocated to registers 
                                   1629 ;s                         Allocated to registers r5 r6 r7 
                                   1630 ;__2621440089              Allocated to registers 
                                   1631 ;s                         Allocated to registers r5 r6 r7 
                                   1632 ;__1966080091              Allocated to registers 
                                   1633 ;s                         Allocated to registers r5 r6 r7 
                                   1634 ;__2621440093              Allocated to registers 
                                   1635 ;s                         Allocated to registers r5 r6 r7 
                                   1636 ;__1966080095              Allocated to registers 
                                   1637 ;s                         Allocated to registers r5 r6 r7 
                                   1638 ;sloc0                     Allocated to stack - _bp +267
                                   1639 ;sloc1                     Allocated to stack - _bp +268
                                   1640 ;sloc2                     Allocated to stack - _bp +4
                                   1641 ;sloc3                     Allocated to stack - _bp +8
                                   1642 ;------------------------------------------------------------
                                   1643 ;	calc.c:135: static int operator(void *_ctx, delta_t *delta) __reentrant {
                                   1644 ;	-----------------------------------------
                                   1645 ;	 function operator
                                   1646 ;	-----------------------------------------
      000624                       1647 _operator:
      000624 C0*00            [24] 1648 	push	_bp
      000626 85 81*00         [24] 1649 	mov	_bp,sp
      000629 C0 82            [24] 1650 	push	dpl
      00062B C0 83            [24] 1651 	push	dph
      00062D C0 F0            [24] 1652 	push	b
      00062F E5 81            [12] 1653 	mov	a,sp
      000631 24 1B            [12] 1654 	add	a,#0x1b
      000633 F5 81            [12] 1655 	mov	sp,a
                                   1656 ;	calc.c:136: struct ctx *ctx = (struct ctx *)_ctx;
      000635 A8*00            [24] 1657 	mov	r0,_bp
      000637 08               [12] 1658 	inc	r0
      000638 E5*00            [12] 1659 	mov	a,_bp
      00063A 24 0C            [12] 1660 	add	a,#0x0c
      00063C F9               [12] 1661 	mov	r1,a
      00063D E6               [12] 1662 	mov	a,@r0
      00063E F7               [12] 1663 	mov	@r1,a
      00063F 08               [12] 1664 	inc	r0
      000640 09               [12] 1665 	inc	r1
      000641 E6               [12] 1666 	mov	a,@r0
      000642 F7               [12] 1667 	mov	@r1,a
      000643 08               [12] 1668 	inc	r0
      000644 09               [12] 1669 	inc	r1
      000645 E6               [12] 1670 	mov	a,@r0
      000646 F7               [12] 1671 	mov	@r1,a
                                   1672 ;	calc.c:139: switch (ctx->digit[0]) {
      000647 E5*00            [12] 1673 	mov	a,_bp
      000649 24 0C            [12] 1674 	add	a,#0x0c
      00064B F8               [12] 1675 	mov	r0,a
      00064C 74 07            [12] 1676 	mov	a,#0x07
      00064E 26               [12] 1677 	add	a,@r0
      00064F FD               [12] 1678 	mov	r5,a
      000650 E4               [12] 1679 	clr	a
      000651 08               [12] 1680 	inc	r0
      000652 36               [12] 1681 	addc	a,@r0
      000653 FE               [12] 1682 	mov	r6,a
      000654 08               [12] 1683 	inc	r0
      000655 86 07            [24] 1684 	mov	ar7,@r0
      000657 8D 82            [24] 1685 	mov	dpl,r5
      000659 8E 83            [24] 1686 	mov	dph,r6
      00065B 8F F0            [24] 1687 	mov	b,r7
      00065D 12r00r00         [24] 1688 	lcall	__gptrget
      000660 FC               [12] 1689 	mov	r4,a
      000661 BC 23 03         [24] 1690 	cjne	r4,#0x23,00996$
      000664 02r12rB9         [24] 1691 	ljmp	00157$
      000667                       1692 00996$:
      000667 BC 25 03         [24] 1693 	cjne	r4,#0x25,00997$
      00066A 02r12rB9         [24] 1694 	ljmp	00157$
      00066D                       1695 00997$:
      00066D BC 26 03         [24] 1696 	cjne	r4,#0x26,00998$
      000670 02r15r45         [24] 1697 	ljmp	00170$
      000673                       1698 00998$:
      000673 BC 2A 03         [24] 1699 	cjne	r4,#0x2a,00999$
      000676 02r0ErC7         [24] 1700 	ljmp	00135$
      000679                       1701 00999$:
      000679 BC 2B 03         [24] 1702 	cjne	r4,#0x2b,01000$
      00067C 02r0Cr50         [24] 1703 	ljmp	00121$
      00067F                       1704 01000$:
      00067F BC 2D 03         [24] 1705 	cjne	r4,#0x2d,01001$
      000682 02r0Dr8B         [24] 1706 	ljmp	00128$
      000685                       1707 01001$:
      000685 BC 2E 03         [24] 1708 	cjne	r4,#0x2e,01002$
      000688 02r09r0E         [24] 1709 	ljmp	00109$
      00068B                       1710 01002$:
      00068B BC 2F 03         [24] 1711 	cjne	r4,#0x2f,01003$
      00068E 02r10r29         [24] 1712 	ljmp	00143$
      000691                       1713 01003$:
      000691 BC 3C 03         [24] 1714 	cjne	r4,#0x3c,01004$
      000694 02r1BrAA         [24] 1715 	ljmp	00205$
      000697                       1716 01004$:
      000697 BC 3E 03         [24] 1717 	cjne	r4,#0x3e,01005$
      00069A 02r18rF6         [24] 1718 	ljmp	00191$
      00069D                       1719 01005$:
      00069D BC 50 03         [24] 1720 	cjne	r4,#0x50,01006$
      0006A0 02r08r82         [24] 1721 	ljmp	00105$
      0006A3                       1722 01006$:
      0006A3 BC 56 03         [24] 1723 	cjne	r4,#0x56,01007$
      0006A6 02r0ArB5         [24] 1724 	ljmp	00113$
      0006A9                       1725 01007$:
      0006A9 BC 5C 03         [24] 1726 	cjne	r4,#0x5c,01008$
      0006AC 02r10r29         [24] 1727 	ljmp	00143$
      0006AF                       1728 01008$:
      0006AF BC 5D 03         [24] 1729 	cjne	r4,#0x5d,01009$
      0006B2 02r1Ar55         [24] 1730 	ljmp	00198$
      0006B5                       1731 01009$:
      0006B5 BC 5E 03         [24] 1732 	cjne	r4,#0x5e,01010$
      0006B8 02r17rBB         [24] 1733 	ljmp	00184$
      0006BB                       1734 01010$:
      0006BB BC 70 02         [24] 1735 	cjne	r4,#0x70,01011$
      0006BE 80 1B            [24] 1736 	sjmp	00101$
      0006C0                       1737 01011$:
      0006C0 BC 76 03         [24] 1738 	cjne	r4,#0x76,01012$
      0006C3 02r09r0E         [24] 1739 	ljmp	00109$
      0006C6                       1740 01012$:
      0006C6 BC 78 03         [24] 1741 	cjne	r4,#0x78,01013$
      0006C9 02r0ArFE         [24] 1742 	ljmp	00114$
      0006CC                       1743 01013$:
      0006CC BC 7C 03         [24] 1744 	cjne	r4,#0x7c,01014$
      0006CF 02r16r80         [24] 1745 	ljmp	00177$
      0006D2                       1746 01014$:
      0006D2 BC 7E 03         [24] 1747 	cjne	r4,#0x7e,01015$
      0006D5 02r1Dr08         [24] 1748 	ljmp	00212$
      0006D8                       1749 01015$:
      0006D8 02r1DrA9         [24] 1750 	ljmp	00216$
                                   1751 ;	calc.c:140: case 'p':
      0006DB                       1752 00101$:
                                   1753 ;	calc.c:141: printstr("\r\n");
      0006DB 7Fr00            [12] 1754 	mov	r7,#___str_0
      0006DD 7Es00            [12] 1755 	mov	r6,#(___str_0 >> 8)
      0006DF 7D 80            [12] 1756 	mov	r5,#0x80
                                   1757 ;	calc.c:50: return;
      0006E1                       1758 00299$:
                                   1759 ;	calc.c:48: for (; *s; s++) putchar(*s);
      0006E1 8F 82            [24] 1760 	mov	dpl,r7
      0006E3 8E 83            [24] 1761 	mov	dph,r6
      0006E5 8D F0            [24] 1762 	mov	b,r5
      0006E7 12r00r00         [24] 1763 	lcall	__gptrget
      0006EA FC               [12] 1764 	mov	r4,a
      0006EB 60 10            [24] 1765 	jz	00219$
      0006ED 7B 00            [12] 1766 	mov	r3,#0x00
      0006EF 8C 82            [24] 1767 	mov	dpl,r4
      0006F1 8B 83            [24] 1768 	mov	dph,r3
      0006F3 12r00r00         [24] 1769 	lcall	_putchar
      0006F6 0F               [12] 1770 	inc	r7
                                   1771 ;	calc.c:141: printstr("\r\n");
      0006F7 BF 00 E7         [24] 1772 	cjne	r7,#0x00,00299$
      0006FA 0E               [12] 1773 	inc	r6
      0006FB 80 E4            [24] 1774 	sjmp	00299$
      0006FD                       1775 00219$:
                                   1776 ;	calc.c:142: if (!stack_peek(&ctx->s, &d0)) printstr("stack underflow\r\n");
      0006FD E5*00            [12] 1777 	mov	a,_bp
      0006FF 24 0F            [12] 1778 	add	a,#0x0f
      000701 FF               [12] 1779 	mov	r7,a
      000702 7E 00            [12] 1780 	mov	r6,#0x00
      000704 7D 40            [12] 1781 	mov	r5,#0x40
      000706 E5*00            [12] 1782 	mov	a,_bp
      000708 24 0C            [12] 1783 	add	a,#0x0c
      00070A F8               [12] 1784 	mov	r0,a
      00070B 74 09            [12] 1785 	mov	a,#0x09
      00070D 26               [12] 1786 	add	a,@r0
      00070E FA               [12] 1787 	mov	r2,a
      00070F E4               [12] 1788 	clr	a
      000710 08               [12] 1789 	inc	r0
      000711 36               [12] 1790 	addc	a,@r0
      000712 FB               [12] 1791 	mov	r3,a
      000713 08               [12] 1792 	inc	r0
      000714 86 04            [24] 1793 	mov	ar4,@r0
      000716 C0 07            [24] 1794 	push	ar7
      000718 C0 06            [24] 1795 	push	ar6
      00071A C0 05            [24] 1796 	push	ar5
      00071C 8A 82            [24] 1797 	mov	dpl,r2
      00071E 8B 83            [24] 1798 	mov	dph,r3
      000720 8C F0            [24] 1799 	mov	b,r4
      000722 12r00r00         [24] 1800 	lcall	_stack_peek
      000725 AB 82            [24] 1801 	mov	r3,dpl
      000727 AC 83            [24] 1802 	mov	r4,dph
      000729 15 81            [12] 1803 	dec	sp
      00072B 15 81            [12] 1804 	dec	sp
      00072D 15 81            [12] 1805 	dec	sp
      00072F EB               [12] 1806 	mov	a,r3
      000730 4C               [12] 1807 	orl	a,r4
      000731 70 25            [24] 1808 	jnz	00103$
      000733 7Fr03            [12] 1809 	mov	r7,#___str_1
      000735 7Es00            [12] 1810 	mov	r6,#(___str_1 >> 8)
      000737 7D 80            [12] 1811 	mov	r5,#0x80
                                   1812 ;	calc.c:50: return;
      000739                       1813 00302$:
                                   1814 ;	calc.c:48: for (; *s; s++) putchar(*s);
      000739 8F 82            [24] 1815 	mov	dpl,r7
      00073B 8E 83            [24] 1816 	mov	dph,r6
      00073D 8D F0            [24] 1817 	mov	b,r5
      00073F 12r00r00         [24] 1818 	lcall	__gptrget
      000742 FC               [12] 1819 	mov	r4,a
      000743 70 03            [24] 1820 	jnz	01019$
      000745 02r1DrAE         [24] 1821 	ljmp	00217$
      000748                       1822 01019$:
      000748 7B 00            [12] 1823 	mov	r3,#0x00
      00074A 8C 82            [24] 1824 	mov	dpl,r4
      00074C 8B 83            [24] 1825 	mov	dph,r3
      00074E 12r00r00         [24] 1826 	lcall	_putchar
      000751 0F               [12] 1827 	inc	r7
                                   1828 ;	calc.c:142: if (!stack_peek(&ctx->s, &d0)) printstr("stack underflow\r\n");
      000752 BF 00 E4         [24] 1829 	cjne	r7,#0x00,00302$
      000755 0E               [12] 1830 	inc	r6
      000756 80 E1            [24] 1831 	sjmp	00302$
      000758                       1832 00103$:
                                   1833 ;	calc.c:144: printstr("PT ");
      000758 7Fr30            [12] 1834 	mov	r7,#___str_6
      00075A 7Es00            [12] 1835 	mov	r6,#(___str_6 >> 8)
      00075C 7D 80            [12] 1836 	mov	r5,#0x80
                                   1837 ;	calc.c:50: return;
      00075E                       1838 00305$:
                                   1839 ;	calc.c:48: for (; *s; s++) putchar(*s);
      00075E 8F 82            [24] 1840 	mov	dpl,r7
      000760 8E 83            [24] 1841 	mov	dph,r6
      000762 8D F0            [24] 1842 	mov	b,r5
      000764 12r00r00         [24] 1843 	lcall	__gptrget
      000767 FC               [12] 1844 	mov	r4,a
      000768 60 10            [24] 1845 	jz	00223$
      00076A 7B 00            [12] 1846 	mov	r3,#0x00
      00076C 8C 82            [24] 1847 	mov	dpl,r4
      00076E 8B 83            [24] 1848 	mov	dph,r3
      000770 12r00r00         [24] 1849 	lcall	_putchar
      000773 0F               [12] 1850 	inc	r7
                                   1851 ;	calc.c:144: printstr("PT ");
      000774 BF 00 E7         [24] 1852 	cjne	r7,#0x00,00305$
      000777 0E               [12] 1853 	inc	r6
      000778 80 E4            [24] 1854 	sjmp	00305$
      00077A                       1855 00223$:
                                   1856 ;	calc.c:145: printf("% 11ld / ", d0);
      00077A E5*00            [12] 1857 	mov	a,_bp
      00077C 24 0F            [12] 1858 	add	a,#0x0f
      00077E F8               [12] 1859 	mov	r0,a
      00077F E6               [12] 1860 	mov	a,@r0
      000780 C0 E0            [24] 1861 	push	acc
      000782 08               [12] 1862 	inc	r0
      000783 E6               [12] 1863 	mov	a,@r0
      000784 C0 E0            [24] 1864 	push	acc
      000786 08               [12] 1865 	inc	r0
      000787 E6               [12] 1866 	mov	a,@r0
      000788 C0 E0            [24] 1867 	push	acc
      00078A 08               [12] 1868 	inc	r0
      00078B E6               [12] 1869 	mov	a,@r0
      00078C C0 E0            [24] 1870 	push	acc
      00078E 74r19            [12] 1871 	mov	a,#___str_3
      000790 C0 E0            [24] 1872 	push	acc
      000792 74s00            [12] 1873 	mov	a,#(___str_3 >> 8)
      000794 C0 E0            [24] 1874 	push	acc
      000796 74 80            [12] 1875 	mov	a,#0x80
      000798 C0 E0            [24] 1876 	push	acc
      00079A 12r00r00         [24] 1877 	lcall	_printf
      00079D E5 81            [12] 1878 	mov	a,sp
      00079F 24 F9            [12] 1879 	add	a,#0xf9
      0007A1 F5 81            [12] 1880 	mov	sp,a
                                   1881 ;	calc.c:146: printf("%08lx / ", d0);
      0007A3 E5*00            [12] 1882 	mov	a,_bp
      0007A5 24 0F            [12] 1883 	add	a,#0x0f
      0007A7 F8               [12] 1884 	mov	r0,a
      0007A8 E6               [12] 1885 	mov	a,@r0
      0007A9 C0 E0            [24] 1886 	push	acc
      0007AB 08               [12] 1887 	inc	r0
      0007AC E6               [12] 1888 	mov	a,@r0
      0007AD C0 E0            [24] 1889 	push	acc
      0007AF 08               [12] 1890 	inc	r0
      0007B0 E6               [12] 1891 	mov	a,@r0
      0007B1 C0 E0            [24] 1892 	push	acc
      0007B3 08               [12] 1893 	inc	r0
      0007B4 E6               [12] 1894 	mov	a,@r0
      0007B5 C0 E0            [24] 1895 	push	acc
      0007B7 74r23            [12] 1896 	mov	a,#___str_4
      0007B9 C0 E0            [24] 1897 	push	acc
      0007BB 74s00            [12] 1898 	mov	a,#(___str_4 >> 8)
      0007BD C0 E0            [24] 1899 	push	acc
      0007BF 74 80            [12] 1900 	mov	a,#0x80
      0007C1 C0 E0            [24] 1901 	push	acc
      0007C3 12r00r00         [24] 1902 	lcall	_printf
      0007C6 E5 81            [12] 1903 	mov	a,sp
      0007C8 24 F9            [12] 1904 	add	a,#0xf9
      0007CA F5 81            [12] 1905 	mov	sp,a
                                   1906 ;	calc.c:147: printbin(d0);
      0007CC E5*00            [12] 1907 	mov	a,_bp
      0007CE 24 0F            [12] 1908 	add	a,#0x0f
      0007D0 F8               [12] 1909 	mov	r0,a
      0007D1 86 07            [24] 1910 	mov	ar7,@r0
      0007D3 08               [12] 1911 	inc	r0
      0007D4 86 06            [24] 1912 	mov	ar6,@r0
      0007D6 08               [12] 1913 	inc	r0
      0007D7 86 05            [24] 1914 	mov	ar5,@r0
      0007D9 08               [12] 1915 	inc	r0
      0007DA 86 04            [24] 1916 	mov	ar4,@r0
      0007DC 8C 02            [24] 1917 	mov	ar2,r4
                                   1918 ;	calc.c:56: for (mask = 0x80000000lu; mask; mask >>= 1)
      0007DE E5*00            [12] 1919 	mov	a,_bp
      0007E0 24 1B            [12] 1920 	add	a,#0x1b
      0007E2 F8               [12] 1921 	mov	r0,a
      0007E3 E4               [12] 1922 	clr	a
      0007E4 F6               [12] 1923 	mov	@r0,a
      0007E5 08               [12] 1924 	inc	r0
      0007E6 F6               [12] 1925 	mov	@r0,a
      0007E7 08               [12] 1926 	inc	r0
      0007E8 F6               [12] 1927 	mov	@r0,a
      0007E9 08               [12] 1928 	inc	r0
      0007EA 76 80            [12] 1929 	mov	@r0,#0x80
      0007EC                       1930 00307$:
                                   1931 ;	calc.c:57: (void)putchar((d & mask) ? (int)'1' : (int)'0');
      0007EC E5*00            [12] 1932 	mov	a,_bp
      0007EE 24 04            [12] 1933 	add	a,#0x04
      0007F0 F8               [12] 1934 	mov	r0,a
      0007F1 A6 07            [24] 1935 	mov	@r0,ar7
      0007F3 08               [12] 1936 	inc	r0
      0007F4 A6 06            [24] 1937 	mov	@r0,ar6
      0007F6 08               [12] 1938 	inc	r0
      0007F7 A6 05            [24] 1939 	mov	@r0,ar5
      0007F9 08               [12] 1940 	inc	r0
      0007FA A6 02            [24] 1941 	mov	@r0,ar2
      0007FC E5*00            [12] 1942 	mov	a,_bp
      0007FE 24 04            [12] 1943 	add	a,#0x04
      000800 F8               [12] 1944 	mov	r0,a
      000801 E5*00            [12] 1945 	mov	a,_bp
      000803 24 1B            [12] 1946 	add	a,#0x1b
      000805 F9               [12] 1947 	mov	r1,a
      000806 E7               [12] 1948 	mov	a,@r1
      000807 56               [12] 1949 	anl	a,@r0
      000808 F6               [12] 1950 	mov	@r0,a
      000809 09               [12] 1951 	inc	r1
      00080A E7               [12] 1952 	mov	a,@r1
      00080B 08               [12] 1953 	inc	r0
      00080C 56               [12] 1954 	anl	a,@r0
      00080D F6               [12] 1955 	mov	@r0,a
      00080E 09               [12] 1956 	inc	r1
      00080F E7               [12] 1957 	mov	a,@r1
      000810 08               [12] 1958 	inc	r0
      000811 56               [12] 1959 	anl	a,@r0
      000812 F6               [12] 1960 	mov	@r0,a
      000813 09               [12] 1961 	inc	r1
      000814 E7               [12] 1962 	mov	a,@r1
      000815 08               [12] 1963 	inc	r0
      000816 56               [12] 1964 	anl	a,@r0
      000817 F6               [12] 1965 	mov	@r0,a
      000818 E5*00            [12] 1966 	mov	a,_bp
      00081A 24 04            [12] 1967 	add	a,#0x04
      00081C F8               [12] 1968 	mov	r0,a
      00081D E6               [12] 1969 	mov	a,@r0
      00081E 08               [12] 1970 	inc	r0
      00081F 46               [12] 1971 	orl	a,@r0
      000820 08               [12] 1972 	inc	r0
      000821 46               [12] 1973 	orl	a,@r0
      000822 08               [12] 1974 	inc	r0
      000823 46               [12] 1975 	orl	a,@r0
      000824 60 06            [24] 1976 	jz	00418$
      000826 7B 31            [12] 1977 	mov	r3,#0x31
      000828 7C 00            [12] 1978 	mov	r4,#0x00
      00082A 80 04            [24] 1979 	sjmp	00419$
      00082C                       1980 00418$:
      00082C 7B 30            [12] 1981 	mov	r3,#0x30
      00082E 7C 00            [12] 1982 	mov	r4,#0x00
      000830                       1983 00419$:
      000830 8B 82            [24] 1984 	mov	dpl,r3
      000832 8C 83            [24] 1985 	mov	dph,r4
      000834 12r00r00         [24] 1986 	lcall	_putchar
                                   1987 ;	calc.c:56: for (mask = 0x80000000lu; mask; mask >>= 1)
      000837 E5*00            [12] 1988 	mov	a,_bp
      000839 24 1B            [12] 1989 	add	a,#0x1b
      00083B F8               [12] 1990 	mov	r0,a
      00083C 08               [12] 1991 	inc	r0
      00083D 08               [12] 1992 	inc	r0
      00083E 08               [12] 1993 	inc	r0
      00083F E6               [12] 1994 	mov	a,@r0
      000840 C3               [12] 1995 	clr	c
      000841 13               [12] 1996 	rrc	a
      000842 F6               [12] 1997 	mov	@r0,a
      000843 18               [12] 1998 	dec	r0
      000844 E6               [12] 1999 	mov	a,@r0
      000845 13               [12] 2000 	rrc	a
      000846 F6               [12] 2001 	mov	@r0,a
      000847 18               [12] 2002 	dec	r0
      000848 E6               [12] 2003 	mov	a,@r0
      000849 13               [12] 2004 	rrc	a
      00084A F6               [12] 2005 	mov	@r0,a
      00084B 18               [12] 2006 	dec	r0
      00084C E6               [12] 2007 	mov	a,@r0
      00084D 13               [12] 2008 	rrc	a
      00084E F6               [12] 2009 	mov	@r0,a
      00084F E5*00            [12] 2010 	mov	a,_bp
      000851 24 1B            [12] 2011 	add	a,#0x1b
      000853 F8               [12] 2012 	mov	r0,a
      000854 E6               [12] 2013 	mov	a,@r0
      000855 08               [12] 2014 	inc	r0
      000856 46               [12] 2015 	orl	a,@r0
      000857 08               [12] 2016 	inc	r0
      000858 46               [12] 2017 	orl	a,@r0
      000859 08               [12] 2018 	inc	r0
      00085A 46               [12] 2019 	orl	a,@r0
      00085B 70 8F            [24] 2020 	jnz	00307$
                                   2021 ;	calc.c:148: printstr("\r\n");
      00085D 7Fr00            [12] 2022 	mov	r7,#___str_0
      00085F 7Es00            [12] 2023 	mov	r6,#(___str_0 >> 8)
      000861 7D 80            [12] 2024 	mov	r5,#0x80
                                   2025 ;	calc.c:50: return;
      000863                       2026 00310$:
                                   2027 ;	calc.c:48: for (; *s; s++) putchar(*s);
      000863 8F 82            [24] 2028 	mov	dpl,r7
      000865 8E 83            [24] 2029 	mov	dph,r6
      000867 8D F0            [24] 2030 	mov	b,r5
      000869 12r00r00         [24] 2031 	lcall	__gptrget
      00086C FC               [12] 2032 	mov	r4,a
      00086D 70 03            [24] 2033 	jnz	01025$
      00086F 02r1DrAE         [24] 2034 	ljmp	00217$
      000872                       2035 01025$:
      000872 7B 00            [12] 2036 	mov	r3,#0x00
      000874 8C 82            [24] 2037 	mov	dpl,r4
      000876 8B 83            [24] 2038 	mov	dph,r3
      000878 12r00r00         [24] 2039 	lcall	_putchar
      00087B 0F               [12] 2040 	inc	r7
                                   2041 ;	calc.c:151: case 'P':
      00087C BF 00 E4         [24] 2042 	cjne	r7,#0x00,00310$
      00087F 0E               [12] 2043 	inc	r6
      000880 80 E1            [24] 2044 	sjmp	00310$
      000882                       2045 00105$:
                                   2046 ;	calc.c:152: printstr("\r\n");
      000882 7Fr00            [12] 2047 	mov	r7,#___str_0
      000884 7Es00            [12] 2048 	mov	r6,#(___str_0 >> 8)
      000886 7D 80            [12] 2049 	mov	r5,#0x80
                                   2050 ;	calc.c:50: return;
      000888                       2051 00313$:
                                   2052 ;	calc.c:48: for (; *s; s++) putchar(*s);
      000888 8F 82            [24] 2053 	mov	dpl,r7
      00088A 8E 83            [24] 2054 	mov	dph,r6
      00088C 8D F0            [24] 2055 	mov	b,r5
      00088E 12r00r00         [24] 2056 	lcall	__gptrget
      000891 FC               [12] 2057 	mov	r4,a
      000892 60 10            [24] 2058 	jz	00229$
      000894 7B 00            [12] 2059 	mov	r3,#0x00
      000896 8C 82            [24] 2060 	mov	dpl,r4
      000898 8B 83            [24] 2061 	mov	dph,r3
      00089A 12r00r00         [24] 2062 	lcall	_putchar
      00089D 0F               [12] 2063 	inc	r7
                                   2064 ;	calc.c:152: printstr("\r\n");
      00089E BF 00 E7         [24] 2065 	cjne	r7,#0x00,00313$
      0008A1 0E               [12] 2066 	inc	r6
      0008A2 80 E4            [24] 2067 	sjmp	00313$
      0008A4                       2068 00229$:
                                   2069 ;	calc.c:153: if (!stack_iter_peek(&ctx->s, dump_peek, ctx)) printstr("stack underflow\r\n");
      0008A4 E5*00            [12] 2070 	mov	a,_bp
      0008A6 24 0C            [12] 2071 	add	a,#0x0c
      0008A8 F8               [12] 2072 	mov	r0,a
      0008A9 86 07            [24] 2073 	mov	ar7,@r0
      0008AB 08               [12] 2074 	inc	r0
      0008AC 86 06            [24] 2075 	mov	ar6,@r0
      0008AE 08               [12] 2076 	inc	r0
      0008AF 86 05            [24] 2077 	mov	ar5,@r0
      0008B1 E5*00            [12] 2078 	mov	a,_bp
      0008B3 24 0C            [12] 2079 	add	a,#0x0c
      0008B5 F8               [12] 2080 	mov	r0,a
      0008B6 74 09            [12] 2081 	mov	a,#0x09
      0008B8 26               [12] 2082 	add	a,@r0
      0008B9 FA               [12] 2083 	mov	r2,a
      0008BA E4               [12] 2084 	clr	a
      0008BB 08               [12] 2085 	inc	r0
      0008BC 36               [12] 2086 	addc	a,@r0
      0008BD FB               [12] 2087 	mov	r3,a
      0008BE 08               [12] 2088 	inc	r0
      0008BF 86 04            [24] 2089 	mov	ar4,@r0
      0008C1 C0 07            [24] 2090 	push	ar7
      0008C3 C0 06            [24] 2091 	push	ar6
      0008C5 C0 05            [24] 2092 	push	ar5
      0008C7 74rF0            [12] 2093 	mov	a,#_dump_peek
      0008C9 C0 E0            [24] 2094 	push	acc
      0008CB 74s04            [12] 2095 	mov	a,#(_dump_peek >> 8)
      0008CD C0 E0            [24] 2096 	push	acc
      0008CF 8A 82            [24] 2097 	mov	dpl,r2
      0008D1 8B 83            [24] 2098 	mov	dph,r3
      0008D3 8C F0            [24] 2099 	mov	b,r4
      0008D5 12r00r00         [24] 2100 	lcall	_stack_iter_peek
      0008D8 AB 82            [24] 2101 	mov	r3,dpl
      0008DA AC 83            [24] 2102 	mov	r4,dph
      0008DC E5 81            [12] 2103 	mov	a,sp
      0008DE 24 FB            [12] 2104 	add	a,#0xfb
      0008E0 F5 81            [12] 2105 	mov	sp,a
      0008E2 EB               [12] 2106 	mov	a,r3
      0008E3 4C               [12] 2107 	orl	a,r4
      0008E4 60 03            [24] 2108 	jz	01029$
      0008E6 02r1DrAE         [24] 2109 	ljmp	00217$
      0008E9                       2110 01029$:
      0008E9 7Fr03            [12] 2111 	mov	r7,#___str_1
      0008EB 7Es00            [12] 2112 	mov	r6,#(___str_1 >> 8)
      0008ED 7D 80            [12] 2113 	mov	r5,#0x80
                                   2114 ;	calc.c:50: return;
      0008EF                       2115 00316$:
                                   2116 ;	calc.c:48: for (; *s; s++) putchar(*s);
      0008EF 8F 82            [24] 2117 	mov	dpl,r7
      0008F1 8E 83            [24] 2118 	mov	dph,r6
      0008F3 8D F0            [24] 2119 	mov	b,r5
      0008F5 12r00r00         [24] 2120 	lcall	__gptrget
      0008F8 FC               [12] 2121 	mov	r4,a
      0008F9 70 03            [24] 2122 	jnz	01030$
      0008FB 02r1DrAE         [24] 2123 	ljmp	00217$
      0008FE                       2124 01030$:
      0008FE 7B 00            [12] 2125 	mov	r3,#0x00
      000900 8C 82            [24] 2126 	mov	dpl,r4
      000902 8B 83            [24] 2127 	mov	dph,r3
      000904 12r00r00         [24] 2128 	lcall	_putchar
      000907 0F               [12] 2129 	inc	r7
                                   2130 ;	calc.c:156: case 'v':
      000908 BF 00 E4         [24] 2131 	cjne	r7,#0x00,00316$
      00090B 0E               [12] 2132 	inc	r6
      00090C 80 E1            [24] 2133 	sjmp	00316$
      00090E                       2134 00109$:
                                   2135 ;	calc.c:157: printstr("\r\n");
      00090E 7Fr00            [12] 2136 	mov	r7,#___str_0
      000910 7Es00            [12] 2137 	mov	r6,#(___str_0 >> 8)
      000912 7D 80            [12] 2138 	mov	r5,#0x80
                                   2139 ;	calc.c:50: return;
      000914                       2140 00319$:
                                   2141 ;	calc.c:48: for (; *s; s++) putchar(*s);
      000914 8F 82            [24] 2142 	mov	dpl,r7
      000916 8E 83            [24] 2143 	mov	dph,r6
      000918 8D F0            [24] 2144 	mov	b,r5
      00091A 12r00r00         [24] 2145 	lcall	__gptrget
      00091D FC               [12] 2146 	mov	r4,a
      00091E 60 10            [24] 2147 	jz	00233$
      000920 7B 00            [12] 2148 	mov	r3,#0x00
      000922 8C 82            [24] 2149 	mov	dpl,r4
      000924 8B 83            [24] 2150 	mov	dph,r3
      000926 12r00r00         [24] 2151 	lcall	_putchar
      000929 0F               [12] 2152 	inc	r7
                                   2153 ;	calc.c:157: printstr("\r\n");
      00092A BF 00 E7         [24] 2154 	cjne	r7,#0x00,00319$
      00092D 0E               [12] 2155 	inc	r6
      00092E 80 E4            [24] 2156 	sjmp	00319$
      000930                       2157 00233$:
                                   2158 ;	calc.c:158: if (!stack_pop(&ctx->s, &d0)) printstr("stack underflow\r\n");
      000930 E5*00            [12] 2159 	mov	a,_bp
      000932 24 0F            [12] 2160 	add	a,#0x0f
      000934 FF               [12] 2161 	mov	r7,a
      000935 7E 00            [12] 2162 	mov	r6,#0x00
      000937 7D 40            [12] 2163 	mov	r5,#0x40
      000939 E5*00            [12] 2164 	mov	a,_bp
      00093B 24 0C            [12] 2165 	add	a,#0x0c
      00093D F8               [12] 2166 	mov	r0,a
      00093E 74 09            [12] 2167 	mov	a,#0x09
      000940 26               [12] 2168 	add	a,@r0
      000941 FA               [12] 2169 	mov	r2,a
      000942 E4               [12] 2170 	clr	a
      000943 08               [12] 2171 	inc	r0
      000944 36               [12] 2172 	addc	a,@r0
      000945 FB               [12] 2173 	mov	r3,a
      000946 08               [12] 2174 	inc	r0
      000947 86 04            [24] 2175 	mov	ar4,@r0
      000949 C0 07            [24] 2176 	push	ar7
      00094B C0 06            [24] 2177 	push	ar6
      00094D C0 05            [24] 2178 	push	ar5
      00094F 8A 82            [24] 2179 	mov	dpl,r2
      000951 8B 83            [24] 2180 	mov	dph,r3
      000953 8C F0            [24] 2181 	mov	b,r4
      000955 12r00r00         [24] 2182 	lcall	_stack_pop
      000958 AB 82            [24] 2183 	mov	r3,dpl
      00095A AC 83            [24] 2184 	mov	r4,dph
      00095C 15 81            [12] 2185 	dec	sp
      00095E 15 81            [12] 2186 	dec	sp
      000960 15 81            [12] 2187 	dec	sp
      000962 EB               [12] 2188 	mov	a,r3
      000963 4C               [12] 2189 	orl	a,r4
      000964 70 25            [24] 2190 	jnz	00111$
      000966 7Fr03            [12] 2191 	mov	r7,#___str_1
      000968 7Es00            [12] 2192 	mov	r6,#(___str_1 >> 8)
      00096A 7D 80            [12] 2193 	mov	r5,#0x80
                                   2194 ;	calc.c:50: return;
      00096C                       2195 00322$:
                                   2196 ;	calc.c:48: for (; *s; s++) putchar(*s);
      00096C 8F 82            [24] 2197 	mov	dpl,r7
      00096E 8E 83            [24] 2198 	mov	dph,r6
      000970 8D F0            [24] 2199 	mov	b,r5
      000972 12r00r00         [24] 2200 	lcall	__gptrget
      000975 FC               [12] 2201 	mov	r4,a
      000976 70 03            [24] 2202 	jnz	01035$
      000978 02r1DrAE         [24] 2203 	ljmp	00217$
      00097B                       2204 01035$:
      00097B 7B 00            [12] 2205 	mov	r3,#0x00
      00097D 8C 82            [24] 2206 	mov	dpl,r4
      00097F 8B 83            [24] 2207 	mov	dph,r3
      000981 12r00r00         [24] 2208 	lcall	_putchar
      000984 0F               [12] 2209 	inc	r7
                                   2210 ;	calc.c:158: if (!stack_pop(&ctx->s, &d0)) printstr("stack underflow\r\n");
      000985 BF 00 E4         [24] 2211 	cjne	r7,#0x00,00322$
      000988 0E               [12] 2212 	inc	r6
      000989 80 E1            [24] 2213 	sjmp	00322$
      00098B                       2214 00111$:
                                   2215 ;	calc.c:160: printstr("VT ");
      00098B 7Fr34            [12] 2216 	mov	r7,#___str_7
      00098D 7Es00            [12] 2217 	mov	r6,#(___str_7 >> 8)
      00098F 7D 80            [12] 2218 	mov	r5,#0x80
                                   2219 ;	calc.c:50: return;
      000991                       2220 00325$:
                                   2221 ;	calc.c:48: for (; *s; s++) putchar(*s);
      000991 8F 82            [24] 2222 	mov	dpl,r7
      000993 8E 83            [24] 2223 	mov	dph,r6
      000995 8D F0            [24] 2224 	mov	b,r5
      000997 12r00r00         [24] 2225 	lcall	__gptrget
      00099A FC               [12] 2226 	mov	r4,a
      00099B 60 10            [24] 2227 	jz	00237$
      00099D 7B 00            [12] 2228 	mov	r3,#0x00
      00099F 8C 82            [24] 2229 	mov	dpl,r4
      0009A1 8B 83            [24] 2230 	mov	dph,r3
      0009A3 12r00r00         [24] 2231 	lcall	_putchar
      0009A6 0F               [12] 2232 	inc	r7
                                   2233 ;	calc.c:160: printstr("VT ");
      0009A7 BF 00 E7         [24] 2234 	cjne	r7,#0x00,00325$
      0009AA 0E               [12] 2235 	inc	r6
      0009AB 80 E4            [24] 2236 	sjmp	00325$
      0009AD                       2237 00237$:
                                   2238 ;	calc.c:161: printf("% 11ld / ", d0);
      0009AD E5*00            [12] 2239 	mov	a,_bp
      0009AF 24 0F            [12] 2240 	add	a,#0x0f
      0009B1 F8               [12] 2241 	mov	r0,a
      0009B2 E6               [12] 2242 	mov	a,@r0
      0009B3 C0 E0            [24] 2243 	push	acc
      0009B5 08               [12] 2244 	inc	r0
      0009B6 E6               [12] 2245 	mov	a,@r0
      0009B7 C0 E0            [24] 2246 	push	acc
      0009B9 08               [12] 2247 	inc	r0
      0009BA E6               [12] 2248 	mov	a,@r0
      0009BB C0 E0            [24] 2249 	push	acc
      0009BD 08               [12] 2250 	inc	r0
      0009BE E6               [12] 2251 	mov	a,@r0
      0009BF C0 E0            [24] 2252 	push	acc
      0009C1 74r19            [12] 2253 	mov	a,#___str_3
      0009C3 C0 E0            [24] 2254 	push	acc
      0009C5 74s00            [12] 2255 	mov	a,#(___str_3 >> 8)
      0009C7 C0 E0            [24] 2256 	push	acc
      0009C9 74 80            [12] 2257 	mov	a,#0x80
      0009CB C0 E0            [24] 2258 	push	acc
      0009CD 12r00r00         [24] 2259 	lcall	_printf
      0009D0 E5 81            [12] 2260 	mov	a,sp
      0009D2 24 F9            [12] 2261 	add	a,#0xf9
      0009D4 F5 81            [12] 2262 	mov	sp,a
                                   2263 ;	calc.c:162: printf("%08lx / ", d0);
      0009D6 E5*00            [12] 2264 	mov	a,_bp
      0009D8 24 0F            [12] 2265 	add	a,#0x0f
      0009DA F8               [12] 2266 	mov	r0,a
      0009DB E6               [12] 2267 	mov	a,@r0
      0009DC C0 E0            [24] 2268 	push	acc
      0009DE 08               [12] 2269 	inc	r0
      0009DF E6               [12] 2270 	mov	a,@r0
      0009E0 C0 E0            [24] 2271 	push	acc
      0009E2 08               [12] 2272 	inc	r0
      0009E3 E6               [12] 2273 	mov	a,@r0
      0009E4 C0 E0            [24] 2274 	push	acc
      0009E6 08               [12] 2275 	inc	r0
      0009E7 E6               [12] 2276 	mov	a,@r0
      0009E8 C0 E0            [24] 2277 	push	acc
      0009EA 74r23            [12] 2278 	mov	a,#___str_4
      0009EC C0 E0            [24] 2279 	push	acc
      0009EE 74s00            [12] 2280 	mov	a,#(___str_4 >> 8)
      0009F0 C0 E0            [24] 2281 	push	acc
      0009F2 74 80            [12] 2282 	mov	a,#0x80
      0009F4 C0 E0            [24] 2283 	push	acc
      0009F6 12r00r00         [24] 2284 	lcall	_printf
      0009F9 E5 81            [12] 2285 	mov	a,sp
      0009FB 24 F9            [12] 2286 	add	a,#0xf9
      0009FD F5 81            [12] 2287 	mov	sp,a
                                   2288 ;	calc.c:163: printbin(d0);
      0009FF E5*00            [12] 2289 	mov	a,_bp
      000A01 24 0F            [12] 2290 	add	a,#0x0f
      000A03 F8               [12] 2291 	mov	r0,a
      000A04 86 07            [24] 2292 	mov	ar7,@r0
      000A06 08               [12] 2293 	inc	r0
      000A07 86 06            [24] 2294 	mov	ar6,@r0
      000A09 08               [12] 2295 	inc	r0
      000A0A 86 05            [24] 2296 	mov	ar5,@r0
      000A0C 08               [12] 2297 	inc	r0
      000A0D 86 04            [24] 2298 	mov	ar4,@r0
      000A0F 8C 02            [24] 2299 	mov	ar2,r4
                                   2300 ;	calc.c:56: for (mask = 0x80000000lu; mask; mask >>= 1)
      000A11 E5*00            [12] 2301 	mov	a,_bp
      000A13 24 1B            [12] 2302 	add	a,#0x1b
      000A15 F8               [12] 2303 	mov	r0,a
      000A16 E4               [12] 2304 	clr	a
      000A17 F6               [12] 2305 	mov	@r0,a
      000A18 08               [12] 2306 	inc	r0
      000A19 F6               [12] 2307 	mov	@r0,a
      000A1A 08               [12] 2308 	inc	r0
      000A1B F6               [12] 2309 	mov	@r0,a
      000A1C 08               [12] 2310 	inc	r0
      000A1D 76 80            [12] 2311 	mov	@r0,#0x80
      000A1F                       2312 00327$:
                                   2313 ;	calc.c:57: (void)putchar((d & mask) ? (int)'1' : (int)'0');
      000A1F E5*00            [12] 2314 	mov	a,_bp
      000A21 24 04            [12] 2315 	add	a,#0x04
      000A23 F8               [12] 2316 	mov	r0,a
      000A24 A6 07            [24] 2317 	mov	@r0,ar7
      000A26 08               [12] 2318 	inc	r0
      000A27 A6 06            [24] 2319 	mov	@r0,ar6
      000A29 08               [12] 2320 	inc	r0
      000A2A A6 05            [24] 2321 	mov	@r0,ar5
      000A2C 08               [12] 2322 	inc	r0
      000A2D A6 02            [24] 2323 	mov	@r0,ar2
      000A2F E5*00            [12] 2324 	mov	a,_bp
      000A31 24 04            [12] 2325 	add	a,#0x04
      000A33 F8               [12] 2326 	mov	r0,a
      000A34 E5*00            [12] 2327 	mov	a,_bp
      000A36 24 1B            [12] 2328 	add	a,#0x1b
      000A38 F9               [12] 2329 	mov	r1,a
      000A39 E7               [12] 2330 	mov	a,@r1
      000A3A 56               [12] 2331 	anl	a,@r0
      000A3B F6               [12] 2332 	mov	@r0,a
      000A3C 09               [12] 2333 	inc	r1
      000A3D E7               [12] 2334 	mov	a,@r1
      000A3E 08               [12] 2335 	inc	r0
      000A3F 56               [12] 2336 	anl	a,@r0
      000A40 F6               [12] 2337 	mov	@r0,a
      000A41 09               [12] 2338 	inc	r1
      000A42 E7               [12] 2339 	mov	a,@r1
      000A43 08               [12] 2340 	inc	r0
      000A44 56               [12] 2341 	anl	a,@r0
      000A45 F6               [12] 2342 	mov	@r0,a
      000A46 09               [12] 2343 	inc	r1
      000A47 E7               [12] 2344 	mov	a,@r1
      000A48 08               [12] 2345 	inc	r0
      000A49 56               [12] 2346 	anl	a,@r0
      000A4A F6               [12] 2347 	mov	@r0,a
      000A4B E5*00            [12] 2348 	mov	a,_bp
      000A4D 24 04            [12] 2349 	add	a,#0x04
      000A4F F8               [12] 2350 	mov	r0,a
      000A50 E6               [12] 2351 	mov	a,@r0
      000A51 08               [12] 2352 	inc	r0
      000A52 46               [12] 2353 	orl	a,@r0
      000A53 08               [12] 2354 	inc	r0
      000A54 46               [12] 2355 	orl	a,@r0
      000A55 08               [12] 2356 	inc	r0
      000A56 46               [12] 2357 	orl	a,@r0
      000A57 60 06            [24] 2358 	jz	00420$
      000A59 7B 31            [12] 2359 	mov	r3,#0x31
      000A5B 7C 00            [12] 2360 	mov	r4,#0x00
      000A5D 80 04            [24] 2361 	sjmp	00421$
      000A5F                       2362 00420$:
      000A5F 7B 30            [12] 2363 	mov	r3,#0x30
      000A61 7C 00            [12] 2364 	mov	r4,#0x00
      000A63                       2365 00421$:
      000A63 8B 82            [24] 2366 	mov	dpl,r3
      000A65 8C 83            [24] 2367 	mov	dph,r4
      000A67 12r00r00         [24] 2368 	lcall	_putchar
                                   2369 ;	calc.c:56: for (mask = 0x80000000lu; mask; mask >>= 1)
      000A6A E5*00            [12] 2370 	mov	a,_bp
      000A6C 24 1B            [12] 2371 	add	a,#0x1b
      000A6E F8               [12] 2372 	mov	r0,a
      000A6F 08               [12] 2373 	inc	r0
      000A70 08               [12] 2374 	inc	r0
      000A71 08               [12] 2375 	inc	r0
      000A72 E6               [12] 2376 	mov	a,@r0
      000A73 C3               [12] 2377 	clr	c
      000A74 13               [12] 2378 	rrc	a
      000A75 F6               [12] 2379 	mov	@r0,a
      000A76 18               [12] 2380 	dec	r0
      000A77 E6               [12] 2381 	mov	a,@r0
      000A78 13               [12] 2382 	rrc	a
      000A79 F6               [12] 2383 	mov	@r0,a
      000A7A 18               [12] 2384 	dec	r0
      000A7B E6               [12] 2385 	mov	a,@r0
      000A7C 13               [12] 2386 	rrc	a
      000A7D F6               [12] 2387 	mov	@r0,a
      000A7E 18               [12] 2388 	dec	r0
      000A7F E6               [12] 2389 	mov	a,@r0
      000A80 13               [12] 2390 	rrc	a
      000A81 F6               [12] 2391 	mov	@r0,a
      000A82 E5*00            [12] 2392 	mov	a,_bp
      000A84 24 1B            [12] 2393 	add	a,#0x1b
      000A86 F8               [12] 2394 	mov	r0,a
      000A87 E6               [12] 2395 	mov	a,@r0
      000A88 08               [12] 2396 	inc	r0
      000A89 46               [12] 2397 	orl	a,@r0
      000A8A 08               [12] 2398 	inc	r0
      000A8B 46               [12] 2399 	orl	a,@r0
      000A8C 08               [12] 2400 	inc	r0
      000A8D 46               [12] 2401 	orl	a,@r0
      000A8E 70 8F            [24] 2402 	jnz	00327$
                                   2403 ;	calc.c:164: printstr("\r\n");
      000A90 7Fr00            [12] 2404 	mov	r7,#___str_0
      000A92 7Es00            [12] 2405 	mov	r6,#(___str_0 >> 8)
      000A94 7D 80            [12] 2406 	mov	r5,#0x80
                                   2407 ;	calc.c:50: return;
      000A96                       2408 00330$:
                                   2409 ;	calc.c:48: for (; *s; s++) putchar(*s);
      000A96 8F 82            [24] 2410 	mov	dpl,r7
      000A98 8E 83            [24] 2411 	mov	dph,r6
      000A9A 8D F0            [24] 2412 	mov	b,r5
      000A9C 12r00r00         [24] 2413 	lcall	__gptrget
      000A9F FC               [12] 2414 	mov	r4,a
      000AA0 70 03            [24] 2415 	jnz	01041$
      000AA2 02r1DrAE         [24] 2416 	ljmp	00217$
      000AA5                       2417 01041$:
      000AA5 7B 00            [12] 2418 	mov	r3,#0x00
      000AA7 8C 82            [24] 2419 	mov	dpl,r4
      000AA9 8B 83            [24] 2420 	mov	dph,r3
      000AAB 12r00r00         [24] 2421 	lcall	_putchar
      000AAE 0F               [12] 2422 	inc	r7
                                   2423 ;	calc.c:167: case 'V':
      000AAF BF 00 E4         [24] 2424 	cjne	r7,#0x00,00330$
      000AB2 0E               [12] 2425 	inc	r6
      000AB3 80 E1            [24] 2426 	sjmp	00330$
      000AB5                       2427 00113$:
                                   2428 ;	calc.c:168: printstr("\r\n");
      000AB5 7Fr00            [12] 2429 	mov	r7,#___str_0
      000AB7 7Es00            [12] 2430 	mov	r6,#(___str_0 >> 8)
      000AB9 7D 80            [12] 2431 	mov	r5,#0x80
                                   2432 ;	calc.c:50: return;
      000ABB                       2433 00333$:
                                   2434 ;	calc.c:48: for (; *s; s++) putchar(*s);
      000ABB 8F 82            [24] 2435 	mov	dpl,r7
      000ABD 8E 83            [24] 2436 	mov	dph,r6
      000ABF 8D F0            [24] 2437 	mov	b,r5
      000AC1 12r00r00         [24] 2438 	lcall	__gptrget
      000AC4 FC               [12] 2439 	mov	r4,a
      000AC5 60 10            [24] 2440 	jz	00243$
      000AC7 7B 00            [12] 2441 	mov	r3,#0x00
      000AC9 8C 82            [24] 2442 	mov	dpl,r4
      000ACB 8B 83            [24] 2443 	mov	dph,r3
      000ACD 12r00r00         [24] 2444 	lcall	_putchar
      000AD0 0F               [12] 2445 	inc	r7
                                   2446 ;	calc.c:168: printstr("\r\n");
      000AD1 BF 00 E7         [24] 2447 	cjne	r7,#0x00,00333$
      000AD4 0E               [12] 2448 	inc	r6
      000AD5 80 E4            [24] 2449 	sjmp	00333$
      000AD7                       2450 00243$:
                                   2451 ;	calc.c:169: (void)dump_pop(_ctx, delta);
      000AD7 E5*00            [12] 2452 	mov	a,_bp
      000AD9 24 FB            [12] 2453 	add	a,#0xfb
      000ADB F8               [12] 2454 	mov	r0,a
      000ADC E6               [12] 2455 	mov	a,@r0
      000ADD C0 E0            [24] 2456 	push	acc
      000ADF 08               [12] 2457 	inc	r0
      000AE0 E6               [12] 2458 	mov	a,@r0
      000AE1 C0 E0            [24] 2459 	push	acc
      000AE3 08               [12] 2460 	inc	r0
      000AE4 E6               [12] 2461 	mov	a,@r0
      000AE5 C0 E0            [24] 2462 	push	acc
      000AE7 A8*00            [24] 2463 	mov	r0,_bp
      000AE9 08               [12] 2464 	inc	r0
      000AEA 86 82            [24] 2465 	mov	dpl,@r0
      000AEC 08               [12] 2466 	inc	r0
      000AED 86 83            [24] 2467 	mov	dph,@r0
      000AEF 08               [12] 2468 	inc	r0
      000AF0 86 F0            [24] 2469 	mov	b,@r0
      000AF2 12r02r3C         [24] 2470 	lcall	_dump_pop
      000AF5 15 81            [12] 2471 	dec	sp
      000AF7 15 81            [12] 2472 	dec	sp
      000AF9 15 81            [12] 2473 	dec	sp
                                   2474 ;	calc.c:170: break;
      000AFB 02r1DrAE         [24] 2475 	ljmp	00217$
                                   2476 ;	calc.c:171: case 'x':
      000AFE                       2477 00114$:
                                   2478 ;	calc.c:172: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      000AFE E5*00            [12] 2479 	mov	a,_bp
      000B00 24 0F            [12] 2480 	add	a,#0x0f
      000B02 FF               [12] 2481 	mov	r7,a
      000B03 7E 00            [12] 2482 	mov	r6,#0x00
      000B05 7D 40            [12] 2483 	mov	r5,#0x40
      000B07 E5*00            [12] 2484 	mov	a,_bp
      000B09 24 0C            [12] 2485 	add	a,#0x0c
      000B0B F8               [12] 2486 	mov	r0,a
      000B0C 74 09            [12] 2487 	mov	a,#0x09
      000B0E 26               [12] 2488 	add	a,@r0
      000B0F FA               [12] 2489 	mov	r2,a
      000B10 E4               [12] 2490 	clr	a
      000B11 08               [12] 2491 	inc	r0
      000B12 36               [12] 2492 	addc	a,@r0
      000B13 FB               [12] 2493 	mov	r3,a
      000B14 08               [12] 2494 	inc	r0
      000B15 86 04            [24] 2495 	mov	ar4,@r0
      000B17 C0 07            [24] 2496 	push	ar7
      000B19 C0 06            [24] 2497 	push	ar6
      000B1B C0 05            [24] 2498 	push	ar5
      000B1D 8A 82            [24] 2499 	mov	dpl,r2
      000B1F 8B 83            [24] 2500 	mov	dph,r3
      000B21 8C F0            [24] 2501 	mov	b,r4
      000B23 12r00r00         [24] 2502 	lcall	_stack_pop
      000B26 AB 82            [24] 2503 	mov	r3,dpl
      000B28 AC 83            [24] 2504 	mov	r4,dph
      000B2A 15 81            [12] 2505 	dec	sp
      000B2C 15 81            [12] 2506 	dec	sp
      000B2E 15 81            [12] 2507 	dec	sp
      000B30 EB               [12] 2508 	mov	a,r3
      000B31 4C               [12] 2509 	orl	a,r4
      000B32 70 25            [24] 2510 	jnz	00119$
      000B34 7Fr38            [12] 2511 	mov	r7,#___str_8
      000B36 7Es00            [12] 2512 	mov	r6,#(___str_8 >> 8)
      000B38 7D 80            [12] 2513 	mov	r5,#0x80
                                   2514 ;	calc.c:50: return;
      000B3A                       2515 00336$:
                                   2516 ;	calc.c:48: for (; *s; s++) putchar(*s);
      000B3A 8F 82            [24] 2517 	mov	dpl,r7
      000B3C 8E 83            [24] 2518 	mov	dph,r6
      000B3E 8D F0            [24] 2519 	mov	b,r5
      000B40 12r00r00         [24] 2520 	lcall	__gptrget
      000B43 FC               [12] 2521 	mov	r4,a
      000B44 70 03            [24] 2522 	jnz	01046$
      000B46 02r1DrAE         [24] 2523 	ljmp	00217$
      000B49                       2524 01046$:
      000B49 7B 00            [12] 2525 	mov	r3,#0x00
      000B4B 8C 82            [24] 2526 	mov	dpl,r4
      000B4D 8B 83            [24] 2527 	mov	dph,r3
      000B4F 12r00r00         [24] 2528 	lcall	_putchar
      000B52 0F               [12] 2529 	inc	r7
                                   2530 ;	calc.c:172: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      000B53 BF 00 E4         [24] 2531 	cjne	r7,#0x00,00336$
      000B56 0E               [12] 2532 	inc	r6
      000B57 80 E1            [24] 2533 	sjmp	00336$
      000B59                       2534 00119$:
                                   2535 ;	calc.c:173: else if (!stack_pop(&ctx->s, &d1)) {
      000B59 E5*00            [12] 2536 	mov	a,_bp
      000B5B 24 13            [12] 2537 	add	a,#0x13
      000B5D FF               [12] 2538 	mov	r7,a
      000B5E 7E 00            [12] 2539 	mov	r6,#0x00
      000B60 7D 40            [12] 2540 	mov	r5,#0x40
      000B62 E5*00            [12] 2541 	mov	a,_bp
      000B64 24 0C            [12] 2542 	add	a,#0x0c
      000B66 F8               [12] 2543 	mov	r0,a
      000B67 74 09            [12] 2544 	mov	a,#0x09
      000B69 26               [12] 2545 	add	a,@r0
      000B6A FA               [12] 2546 	mov	r2,a
      000B6B E4               [12] 2547 	clr	a
      000B6C 08               [12] 2548 	inc	r0
      000B6D 36               [12] 2549 	addc	a,@r0
      000B6E FB               [12] 2550 	mov	r3,a
      000B6F 08               [12] 2551 	inc	r0
      000B70 86 04            [24] 2552 	mov	ar4,@r0
      000B72 C0 07            [24] 2553 	push	ar7
      000B74 C0 06            [24] 2554 	push	ar6
      000B76 C0 05            [24] 2555 	push	ar5
      000B78 8A 82            [24] 2556 	mov	dpl,r2
      000B7A 8B 83            [24] 2557 	mov	dph,r3
      000B7C 8C F0            [24] 2558 	mov	b,r4
      000B7E 12r00r00         [24] 2559 	lcall	_stack_pop
      000B81 AB 82            [24] 2560 	mov	r3,dpl
      000B83 AC 83            [24] 2561 	mov	r4,dph
      000B85 15 81            [12] 2562 	dec	sp
      000B87 15 81            [12] 2563 	dec	sp
      000B89 15 81            [12] 2564 	dec	sp
      000B8B EB               [12] 2565 	mov	a,r3
      000B8C 4C               [12] 2566 	orl	a,r4
      000B8D 70 58            [24] 2567 	jnz	00116$
                                   2568 ;	calc.c:174: (void)stack_push(&ctx->s, d0);
      000B8F E5*00            [12] 2569 	mov	a,_bp
      000B91 24 0C            [12] 2570 	add	a,#0x0c
      000B93 F8               [12] 2571 	mov	r0,a
      000B94 74 09            [12] 2572 	mov	a,#0x09
      000B96 26               [12] 2573 	add	a,@r0
      000B97 FA               [12] 2574 	mov	r2,a
      000B98 E4               [12] 2575 	clr	a
      000B99 08               [12] 2576 	inc	r0
      000B9A 36               [12] 2577 	addc	a,@r0
      000B9B FB               [12] 2578 	mov	r3,a
      000B9C 08               [12] 2579 	inc	r0
      000B9D 86 04            [24] 2580 	mov	ar4,@r0
      000B9F E5*00            [12] 2581 	mov	a,_bp
      000BA1 24 0F            [12] 2582 	add	a,#0x0f
      000BA3 F8               [12] 2583 	mov	r0,a
      000BA4 E6               [12] 2584 	mov	a,@r0
      000BA5 C0 E0            [24] 2585 	push	acc
      000BA7 08               [12] 2586 	inc	r0
      000BA8 E6               [12] 2587 	mov	a,@r0
      000BA9 C0 E0            [24] 2588 	push	acc
      000BAB 08               [12] 2589 	inc	r0
      000BAC E6               [12] 2590 	mov	a,@r0
      000BAD C0 E0            [24] 2591 	push	acc
      000BAF 08               [12] 2592 	inc	r0
      000BB0 E6               [12] 2593 	mov	a,@r0
      000BB1 C0 E0            [24] 2594 	push	acc
      000BB3 8A 82            [24] 2595 	mov	dpl,r2
      000BB5 8B 83            [24] 2596 	mov	dph,r3
      000BB7 8C F0            [24] 2597 	mov	b,r4
      000BB9 12r00r00         [24] 2598 	lcall	_stack_push
      000BBC E5 81            [12] 2599 	mov	a,sp
      000BBE 24 FC            [12] 2600 	add	a,#0xfc
      000BC0 F5 81            [12] 2601 	mov	sp,a
                                   2602 ;	calc.c:175: printstr("\r\nstack underflow\r\n");
      000BC2 7Fr38            [12] 2603 	mov	r7,#___str_8
      000BC4 7Es00            [12] 2604 	mov	r6,#(___str_8 >> 8)
      000BC6 7D 80            [12] 2605 	mov	r5,#0x80
                                   2606 ;	calc.c:50: return;
      000BC8                       2607 00339$:
                                   2608 ;	calc.c:48: for (; *s; s++) putchar(*s);
      000BC8 8F 82            [24] 2609 	mov	dpl,r7
      000BCA 8E 83            [24] 2610 	mov	dph,r6
      000BCC 8D F0            [24] 2611 	mov	b,r5
      000BCE 12r00r00         [24] 2612 	lcall	__gptrget
      000BD1 FC               [12] 2613 	mov	r4,a
      000BD2 70 03            [24] 2614 	jnz	01049$
      000BD4 02r1DrAE         [24] 2615 	ljmp	00217$
      000BD7                       2616 01049$:
      000BD7 7B 00            [12] 2617 	mov	r3,#0x00
      000BD9 8C 82            [24] 2618 	mov	dpl,r4
      000BDB 8B 83            [24] 2619 	mov	dph,r3
      000BDD 12r00r00         [24] 2620 	lcall	_putchar
      000BE0 0F               [12] 2621 	inc	r7
                                   2622 ;	calc.c:175: printstr("\r\nstack underflow\r\n");
      000BE1 BF 00 E4         [24] 2623 	cjne	r7,#0x00,00339$
      000BE4 0E               [12] 2624 	inc	r6
      000BE5 80 E1            [24] 2625 	sjmp	00339$
      000BE7                       2626 00116$:
                                   2627 ;	calc.c:177: (void)stack_push(&ctx->s, d0);
      000BE7 E5*00            [12] 2628 	mov	a,_bp
      000BE9 24 0C            [12] 2629 	add	a,#0x0c
      000BEB F8               [12] 2630 	mov	r0,a
      000BEC 74 09            [12] 2631 	mov	a,#0x09
      000BEE 26               [12] 2632 	add	a,@r0
      000BEF FA               [12] 2633 	mov	r2,a
      000BF0 E4               [12] 2634 	clr	a
      000BF1 08               [12] 2635 	inc	r0
      000BF2 36               [12] 2636 	addc	a,@r0
      000BF3 FB               [12] 2637 	mov	r3,a
      000BF4 08               [12] 2638 	inc	r0
      000BF5 86 04            [24] 2639 	mov	ar4,@r0
      000BF7 E5*00            [12] 2640 	mov	a,_bp
      000BF9 24 0F            [12] 2641 	add	a,#0x0f
      000BFB F8               [12] 2642 	mov	r0,a
      000BFC E6               [12] 2643 	mov	a,@r0
      000BFD C0 E0            [24] 2644 	push	acc
      000BFF 08               [12] 2645 	inc	r0
      000C00 E6               [12] 2646 	mov	a,@r0
      000C01 C0 E0            [24] 2647 	push	acc
      000C03 08               [12] 2648 	inc	r0
      000C04 E6               [12] 2649 	mov	a,@r0
      000C05 C0 E0            [24] 2650 	push	acc
      000C07 08               [12] 2651 	inc	r0
      000C08 E6               [12] 2652 	mov	a,@r0
      000C09 C0 E0            [24] 2653 	push	acc
      000C0B 8A 82            [24] 2654 	mov	dpl,r2
      000C0D 8B 83            [24] 2655 	mov	dph,r3
      000C0F 8C F0            [24] 2656 	mov	b,r4
      000C11 12r00r00         [24] 2657 	lcall	_stack_push
      000C14 E5 81            [12] 2658 	mov	a,sp
      000C16 24 FC            [12] 2659 	add	a,#0xfc
      000C18 F5 81            [12] 2660 	mov	sp,a
                                   2661 ;	calc.c:178: (void)stack_push(&ctx->s, d1);
      000C1A E5*00            [12] 2662 	mov	a,_bp
      000C1C 24 0C            [12] 2663 	add	a,#0x0c
      000C1E F8               [12] 2664 	mov	r0,a
      000C1F 74 09            [12] 2665 	mov	a,#0x09
      000C21 26               [12] 2666 	add	a,@r0
      000C22 FA               [12] 2667 	mov	r2,a
      000C23 E4               [12] 2668 	clr	a
      000C24 08               [12] 2669 	inc	r0
      000C25 36               [12] 2670 	addc	a,@r0
      000C26 FB               [12] 2671 	mov	r3,a
      000C27 08               [12] 2672 	inc	r0
      000C28 86 04            [24] 2673 	mov	ar4,@r0
      000C2A E5*00            [12] 2674 	mov	a,_bp
      000C2C 24 13            [12] 2675 	add	a,#0x13
      000C2E F8               [12] 2676 	mov	r0,a
      000C2F E6               [12] 2677 	mov	a,@r0
      000C30 C0 E0            [24] 2678 	push	acc
      000C32 08               [12] 2679 	inc	r0
      000C33 E6               [12] 2680 	mov	a,@r0
      000C34 C0 E0            [24] 2681 	push	acc
      000C36 08               [12] 2682 	inc	r0
      000C37 E6               [12] 2683 	mov	a,@r0
      000C38 C0 E0            [24] 2684 	push	acc
      000C3A 08               [12] 2685 	inc	r0
      000C3B E6               [12] 2686 	mov	a,@r0
      000C3C C0 E0            [24] 2687 	push	acc
      000C3E 8A 82            [24] 2688 	mov	dpl,r2
      000C40 8B 83            [24] 2689 	mov	dph,r3
      000C42 8C F0            [24] 2690 	mov	b,r4
      000C44 12r00r00         [24] 2691 	lcall	_stack_push
      000C47 E5 81            [12] 2692 	mov	a,sp
      000C49 24 FC            [12] 2693 	add	a,#0xfc
      000C4B F5 81            [12] 2694 	mov	sp,a
                                   2695 ;	calc.c:180: break;
      000C4D 02r1DrAE         [24] 2696 	ljmp	00217$
                                   2697 ;	calc.c:181: case '+':
      000C50                       2698 00121$:
                                   2699 ;	calc.c:182: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      000C50 E5*00            [12] 2700 	mov	a,_bp
      000C52 24 0F            [12] 2701 	add	a,#0x0f
      000C54 FF               [12] 2702 	mov	r7,a
      000C55 7E 00            [12] 2703 	mov	r6,#0x00
      000C57 7D 40            [12] 2704 	mov	r5,#0x40
      000C59 E5*00            [12] 2705 	mov	a,_bp
      000C5B 24 0C            [12] 2706 	add	a,#0x0c
      000C5D F8               [12] 2707 	mov	r0,a
      000C5E 74 09            [12] 2708 	mov	a,#0x09
      000C60 26               [12] 2709 	add	a,@r0
      000C61 FA               [12] 2710 	mov	r2,a
      000C62 E4               [12] 2711 	clr	a
      000C63 08               [12] 2712 	inc	r0
      000C64 36               [12] 2713 	addc	a,@r0
      000C65 FB               [12] 2714 	mov	r3,a
      000C66 08               [12] 2715 	inc	r0
      000C67 86 04            [24] 2716 	mov	ar4,@r0
      000C69 C0 07            [24] 2717 	push	ar7
      000C6B C0 06            [24] 2718 	push	ar6
      000C6D C0 05            [24] 2719 	push	ar5
      000C6F 8A 82            [24] 2720 	mov	dpl,r2
      000C71 8B 83            [24] 2721 	mov	dph,r3
      000C73 8C F0            [24] 2722 	mov	b,r4
      000C75 12r00r00         [24] 2723 	lcall	_stack_pop
      000C78 AB 82            [24] 2724 	mov	r3,dpl
      000C7A AC 83            [24] 2725 	mov	r4,dph
      000C7C 15 81            [12] 2726 	dec	sp
      000C7E 15 81            [12] 2727 	dec	sp
      000C80 15 81            [12] 2728 	dec	sp
      000C82 EB               [12] 2729 	mov	a,r3
      000C83 4C               [12] 2730 	orl	a,r4
      000C84 70 25            [24] 2731 	jnz	00126$
      000C86 7Fr38            [12] 2732 	mov	r7,#___str_8
      000C88 7Es00            [12] 2733 	mov	r6,#(___str_8 >> 8)
      000C8A 7D 80            [12] 2734 	mov	r5,#0x80
                                   2735 ;	calc.c:50: return;
      000C8C                       2736 00342$:
                                   2737 ;	calc.c:48: for (; *s; s++) putchar(*s);
      000C8C 8F 82            [24] 2738 	mov	dpl,r7
      000C8E 8E 83            [24] 2739 	mov	dph,r6
      000C90 8D F0            [24] 2740 	mov	b,r5
      000C92 12r00r00         [24] 2741 	lcall	__gptrget
      000C95 FC               [12] 2742 	mov	r4,a
      000C96 70 03            [24] 2743 	jnz	01052$
      000C98 02r1DrAE         [24] 2744 	ljmp	00217$
      000C9B                       2745 01052$:
      000C9B 7B 00            [12] 2746 	mov	r3,#0x00
      000C9D 8C 82            [24] 2747 	mov	dpl,r4
      000C9F 8B 83            [24] 2748 	mov	dph,r3
      000CA1 12r00r00         [24] 2749 	lcall	_putchar
      000CA4 0F               [12] 2750 	inc	r7
                                   2751 ;	calc.c:182: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      000CA5 BF 00 E4         [24] 2752 	cjne	r7,#0x00,00342$
      000CA8 0E               [12] 2753 	inc	r6
      000CA9 80 E1            [24] 2754 	sjmp	00342$
      000CAB                       2755 00126$:
                                   2756 ;	calc.c:183: else if (!stack_pop(&ctx->s, &d1)) {
      000CAB E5*00            [12] 2757 	mov	a,_bp
      000CAD 24 13            [12] 2758 	add	a,#0x13
      000CAF FF               [12] 2759 	mov	r7,a
      000CB0 7E 00            [12] 2760 	mov	r6,#0x00
      000CB2 7D 40            [12] 2761 	mov	r5,#0x40
      000CB4 E5*00            [12] 2762 	mov	a,_bp
      000CB6 24 0C            [12] 2763 	add	a,#0x0c
      000CB8 F8               [12] 2764 	mov	r0,a
      000CB9 74 09            [12] 2765 	mov	a,#0x09
      000CBB 26               [12] 2766 	add	a,@r0
      000CBC FA               [12] 2767 	mov	r2,a
      000CBD E4               [12] 2768 	clr	a
      000CBE 08               [12] 2769 	inc	r0
      000CBF 36               [12] 2770 	addc	a,@r0
      000CC0 FB               [12] 2771 	mov	r3,a
      000CC1 08               [12] 2772 	inc	r0
      000CC2 86 04            [24] 2773 	mov	ar4,@r0
      000CC4 C0 07            [24] 2774 	push	ar7
      000CC6 C0 06            [24] 2775 	push	ar6
      000CC8 C0 05            [24] 2776 	push	ar5
      000CCA 8A 82            [24] 2777 	mov	dpl,r2
      000CCC 8B 83            [24] 2778 	mov	dph,r3
      000CCE 8C F0            [24] 2779 	mov	b,r4
      000CD0 12r00r00         [24] 2780 	lcall	_stack_pop
      000CD3 AB 82            [24] 2781 	mov	r3,dpl
      000CD5 AC 83            [24] 2782 	mov	r4,dph
      000CD7 15 81            [12] 2783 	dec	sp
      000CD9 15 81            [12] 2784 	dec	sp
      000CDB 15 81            [12] 2785 	dec	sp
      000CDD EB               [12] 2786 	mov	a,r3
      000CDE 4C               [12] 2787 	orl	a,r4
      000CDF 70 58            [24] 2788 	jnz	00123$
                                   2789 ;	calc.c:184: (void)stack_push(&ctx->s, d0);
      000CE1 E5*00            [12] 2790 	mov	a,_bp
      000CE3 24 0C            [12] 2791 	add	a,#0x0c
      000CE5 F8               [12] 2792 	mov	r0,a
      000CE6 74 09            [12] 2793 	mov	a,#0x09
      000CE8 26               [12] 2794 	add	a,@r0
      000CE9 FA               [12] 2795 	mov	r2,a
      000CEA E4               [12] 2796 	clr	a
      000CEB 08               [12] 2797 	inc	r0
      000CEC 36               [12] 2798 	addc	a,@r0
      000CED FB               [12] 2799 	mov	r3,a
      000CEE 08               [12] 2800 	inc	r0
      000CEF 86 04            [24] 2801 	mov	ar4,@r0
      000CF1 E5*00            [12] 2802 	mov	a,_bp
      000CF3 24 0F            [12] 2803 	add	a,#0x0f
      000CF5 F8               [12] 2804 	mov	r0,a
      000CF6 E6               [12] 2805 	mov	a,@r0
      000CF7 C0 E0            [24] 2806 	push	acc
      000CF9 08               [12] 2807 	inc	r0
      000CFA E6               [12] 2808 	mov	a,@r0
      000CFB C0 E0            [24] 2809 	push	acc
      000CFD 08               [12] 2810 	inc	r0
      000CFE E6               [12] 2811 	mov	a,@r0
      000CFF C0 E0            [24] 2812 	push	acc
      000D01 08               [12] 2813 	inc	r0
      000D02 E6               [12] 2814 	mov	a,@r0
      000D03 C0 E0            [24] 2815 	push	acc
      000D05 8A 82            [24] 2816 	mov	dpl,r2
      000D07 8B 83            [24] 2817 	mov	dph,r3
      000D09 8C F0            [24] 2818 	mov	b,r4
      000D0B 12r00r00         [24] 2819 	lcall	_stack_push
      000D0E E5 81            [12] 2820 	mov	a,sp
      000D10 24 FC            [12] 2821 	add	a,#0xfc
      000D12 F5 81            [12] 2822 	mov	sp,a
                                   2823 ;	calc.c:185: printstr("\r\nstack underflow\r\n");
      000D14 7Fr38            [12] 2824 	mov	r7,#___str_8
      000D16 7Es00            [12] 2825 	mov	r6,#(___str_8 >> 8)
      000D18 7D 80            [12] 2826 	mov	r5,#0x80
                                   2827 ;	calc.c:50: return;
      000D1A                       2828 00345$:
                                   2829 ;	calc.c:48: for (; *s; s++) putchar(*s);
      000D1A 8F 82            [24] 2830 	mov	dpl,r7
      000D1C 8E 83            [24] 2831 	mov	dph,r6
      000D1E 8D F0            [24] 2832 	mov	b,r5
      000D20 12r00r00         [24] 2833 	lcall	__gptrget
      000D23 FC               [12] 2834 	mov	r4,a
      000D24 70 03            [24] 2835 	jnz	01055$
      000D26 02r1DrAE         [24] 2836 	ljmp	00217$
      000D29                       2837 01055$:
      000D29 7B 00            [12] 2838 	mov	r3,#0x00
      000D2B 8C 82            [24] 2839 	mov	dpl,r4
      000D2D 8B 83            [24] 2840 	mov	dph,r3
      000D2F 12r00r00         [24] 2841 	lcall	_putchar
      000D32 0F               [12] 2842 	inc	r7
                                   2843 ;	calc.c:185: printstr("\r\nstack underflow\r\n");
      000D33 BF 00 E4         [24] 2844 	cjne	r7,#0x00,00345$
      000D36 0E               [12] 2845 	inc	r6
      000D37 80 E1            [24] 2846 	sjmp	00345$
      000D39                       2847 00123$:
                                   2848 ;	calc.c:187: d1 += d0;
      000D39 E5*00            [12] 2849 	mov	a,_bp
      000D3B 24 13            [12] 2850 	add	a,#0x13
      000D3D F8               [12] 2851 	mov	r0,a
      000D3E E5*00            [12] 2852 	mov	a,_bp
      000D40 24 0F            [12] 2853 	add	a,#0x0f
      000D42 F9               [12] 2854 	mov	r1,a
      000D43 E7               [12] 2855 	mov	a,@r1
      000D44 26               [12] 2856 	add	a,@r0
      000D45 F6               [12] 2857 	mov	@r0,a
      000D46 09               [12] 2858 	inc	r1
      000D47 E7               [12] 2859 	mov	a,@r1
      000D48 08               [12] 2860 	inc	r0
      000D49 36               [12] 2861 	addc	a,@r0
      000D4A F6               [12] 2862 	mov	@r0,a
      000D4B 09               [12] 2863 	inc	r1
      000D4C E7               [12] 2864 	mov	a,@r1
      000D4D 08               [12] 2865 	inc	r0
      000D4E 36               [12] 2866 	addc	a,@r0
      000D4F F6               [12] 2867 	mov	@r0,a
      000D50 09               [12] 2868 	inc	r1
      000D51 E7               [12] 2869 	mov	a,@r1
      000D52 08               [12] 2870 	inc	r0
      000D53 36               [12] 2871 	addc	a,@r0
      000D54 F6               [12] 2872 	mov	@r0,a
                                   2873 ;	calc.c:188: (void)stack_push(&ctx->s, d1);
      000D55 E5*00            [12] 2874 	mov	a,_bp
      000D57 24 0C            [12] 2875 	add	a,#0x0c
      000D59 F8               [12] 2876 	mov	r0,a
      000D5A 74 09            [12] 2877 	mov	a,#0x09
      000D5C 26               [12] 2878 	add	a,@r0
      000D5D FA               [12] 2879 	mov	r2,a
      000D5E E4               [12] 2880 	clr	a
      000D5F 08               [12] 2881 	inc	r0
      000D60 36               [12] 2882 	addc	a,@r0
      000D61 FB               [12] 2883 	mov	r3,a
      000D62 08               [12] 2884 	inc	r0
      000D63 86 04            [24] 2885 	mov	ar4,@r0
      000D65 E5*00            [12] 2886 	mov	a,_bp
      000D67 24 13            [12] 2887 	add	a,#0x13
      000D69 F8               [12] 2888 	mov	r0,a
      000D6A E6               [12] 2889 	mov	a,@r0
      000D6B C0 E0            [24] 2890 	push	acc
      000D6D 08               [12] 2891 	inc	r0
      000D6E E6               [12] 2892 	mov	a,@r0
      000D6F C0 E0            [24] 2893 	push	acc
      000D71 08               [12] 2894 	inc	r0
      000D72 E6               [12] 2895 	mov	a,@r0
      000D73 C0 E0            [24] 2896 	push	acc
      000D75 08               [12] 2897 	inc	r0
      000D76 E6               [12] 2898 	mov	a,@r0
      000D77 C0 E0            [24] 2899 	push	acc
      000D79 8A 82            [24] 2900 	mov	dpl,r2
      000D7B 8B 83            [24] 2901 	mov	dph,r3
      000D7D 8C F0            [24] 2902 	mov	b,r4
      000D7F 12r00r00         [24] 2903 	lcall	_stack_push
      000D82 E5 81            [12] 2904 	mov	a,sp
      000D84 24 FC            [12] 2905 	add	a,#0xfc
      000D86 F5 81            [12] 2906 	mov	sp,a
                                   2907 ;	calc.c:190: break;
      000D88 02r1DrAE         [24] 2908 	ljmp	00217$
                                   2909 ;	calc.c:191: case '-':
      000D8B                       2910 00128$:
                                   2911 ;	calc.c:192: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      000D8B E5*00            [12] 2912 	mov	a,_bp
      000D8D 24 0F            [12] 2913 	add	a,#0x0f
      000D8F FF               [12] 2914 	mov	r7,a
      000D90 7E 00            [12] 2915 	mov	r6,#0x00
      000D92 7D 40            [12] 2916 	mov	r5,#0x40
      000D94 E5*00            [12] 2917 	mov	a,_bp
      000D96 24 0C            [12] 2918 	add	a,#0x0c
      000D98 F8               [12] 2919 	mov	r0,a
      000D99 74 09            [12] 2920 	mov	a,#0x09
      000D9B 26               [12] 2921 	add	a,@r0
      000D9C FA               [12] 2922 	mov	r2,a
      000D9D E4               [12] 2923 	clr	a
      000D9E 08               [12] 2924 	inc	r0
      000D9F 36               [12] 2925 	addc	a,@r0
      000DA0 FB               [12] 2926 	mov	r3,a
      000DA1 08               [12] 2927 	inc	r0
      000DA2 86 04            [24] 2928 	mov	ar4,@r0
      000DA4 C0 07            [24] 2929 	push	ar7
      000DA6 C0 06            [24] 2930 	push	ar6
      000DA8 C0 05            [24] 2931 	push	ar5
      000DAA 8A 82            [24] 2932 	mov	dpl,r2
      000DAC 8B 83            [24] 2933 	mov	dph,r3
      000DAE 8C F0            [24] 2934 	mov	b,r4
      000DB0 12r00r00         [24] 2935 	lcall	_stack_pop
      000DB3 AB 82            [24] 2936 	mov	r3,dpl
      000DB5 AC 83            [24] 2937 	mov	r4,dph
      000DB7 15 81            [12] 2938 	dec	sp
      000DB9 15 81            [12] 2939 	dec	sp
      000DBB 15 81            [12] 2940 	dec	sp
      000DBD EB               [12] 2941 	mov	a,r3
      000DBE 4C               [12] 2942 	orl	a,r4
      000DBF 70 25            [24] 2943 	jnz	00133$
      000DC1 7Fr38            [12] 2944 	mov	r7,#___str_8
      000DC3 7Es00            [12] 2945 	mov	r6,#(___str_8 >> 8)
      000DC5 7D 80            [12] 2946 	mov	r5,#0x80
                                   2947 ;	calc.c:50: return;
      000DC7                       2948 00348$:
                                   2949 ;	calc.c:48: for (; *s; s++) putchar(*s);
      000DC7 8F 82            [24] 2950 	mov	dpl,r7
      000DC9 8E 83            [24] 2951 	mov	dph,r6
      000DCB 8D F0            [24] 2952 	mov	b,r5
      000DCD 12r00r00         [24] 2953 	lcall	__gptrget
      000DD0 FC               [12] 2954 	mov	r4,a
      000DD1 70 03            [24] 2955 	jnz	01058$
      000DD3 02r1DrAE         [24] 2956 	ljmp	00217$
      000DD6                       2957 01058$:
      000DD6 7B 00            [12] 2958 	mov	r3,#0x00
      000DD8 8C 82            [24] 2959 	mov	dpl,r4
      000DDA 8B 83            [24] 2960 	mov	dph,r3
      000DDC 12r00r00         [24] 2961 	lcall	_putchar
      000DDF 0F               [12] 2962 	inc	r7
                                   2963 ;	calc.c:192: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      000DE0 BF 00 E4         [24] 2964 	cjne	r7,#0x00,00348$
      000DE3 0E               [12] 2965 	inc	r6
      000DE4 80 E1            [24] 2966 	sjmp	00348$
      000DE6                       2967 00133$:
                                   2968 ;	calc.c:193: else if (!stack_pop(&ctx->s, &d1)) {
      000DE6 E5*00            [12] 2969 	mov	a,_bp
      000DE8 24 13            [12] 2970 	add	a,#0x13
      000DEA FF               [12] 2971 	mov	r7,a
      000DEB 7E 00            [12] 2972 	mov	r6,#0x00
      000DED 7D 40            [12] 2973 	mov	r5,#0x40
      000DEF E5*00            [12] 2974 	mov	a,_bp
      000DF1 24 0C            [12] 2975 	add	a,#0x0c
      000DF3 F8               [12] 2976 	mov	r0,a
      000DF4 74 09            [12] 2977 	mov	a,#0x09
      000DF6 26               [12] 2978 	add	a,@r0
      000DF7 FA               [12] 2979 	mov	r2,a
      000DF8 E4               [12] 2980 	clr	a
      000DF9 08               [12] 2981 	inc	r0
      000DFA 36               [12] 2982 	addc	a,@r0
      000DFB FB               [12] 2983 	mov	r3,a
      000DFC 08               [12] 2984 	inc	r0
      000DFD 86 04            [24] 2985 	mov	ar4,@r0
      000DFF C0 07            [24] 2986 	push	ar7
      000E01 C0 06            [24] 2987 	push	ar6
      000E03 C0 05            [24] 2988 	push	ar5
      000E05 8A 82            [24] 2989 	mov	dpl,r2
      000E07 8B 83            [24] 2990 	mov	dph,r3
      000E09 8C F0            [24] 2991 	mov	b,r4
      000E0B 12r00r00         [24] 2992 	lcall	_stack_pop
      000E0E AB 82            [24] 2993 	mov	r3,dpl
      000E10 AC 83            [24] 2994 	mov	r4,dph
      000E12 15 81            [12] 2995 	dec	sp
      000E14 15 81            [12] 2996 	dec	sp
      000E16 15 81            [12] 2997 	dec	sp
      000E18 EB               [12] 2998 	mov	a,r3
      000E19 4C               [12] 2999 	orl	a,r4
      000E1A 70 58            [24] 3000 	jnz	00130$
                                   3001 ;	calc.c:194: (void)stack_push(&ctx->s, d0);
      000E1C E5*00            [12] 3002 	mov	a,_bp
      000E1E 24 0C            [12] 3003 	add	a,#0x0c
      000E20 F8               [12] 3004 	mov	r0,a
      000E21 74 09            [12] 3005 	mov	a,#0x09
      000E23 26               [12] 3006 	add	a,@r0
      000E24 FA               [12] 3007 	mov	r2,a
      000E25 E4               [12] 3008 	clr	a
      000E26 08               [12] 3009 	inc	r0
      000E27 36               [12] 3010 	addc	a,@r0
      000E28 FB               [12] 3011 	mov	r3,a
      000E29 08               [12] 3012 	inc	r0
      000E2A 86 04            [24] 3013 	mov	ar4,@r0
      000E2C E5*00            [12] 3014 	mov	a,_bp
      000E2E 24 0F            [12] 3015 	add	a,#0x0f
      000E30 F8               [12] 3016 	mov	r0,a
      000E31 E6               [12] 3017 	mov	a,@r0
      000E32 C0 E0            [24] 3018 	push	acc
      000E34 08               [12] 3019 	inc	r0
      000E35 E6               [12] 3020 	mov	a,@r0
      000E36 C0 E0            [24] 3021 	push	acc
      000E38 08               [12] 3022 	inc	r0
      000E39 E6               [12] 3023 	mov	a,@r0
      000E3A C0 E0            [24] 3024 	push	acc
      000E3C 08               [12] 3025 	inc	r0
      000E3D E6               [12] 3026 	mov	a,@r0
      000E3E C0 E0            [24] 3027 	push	acc
      000E40 8A 82            [24] 3028 	mov	dpl,r2
      000E42 8B 83            [24] 3029 	mov	dph,r3
      000E44 8C F0            [24] 3030 	mov	b,r4
      000E46 12r00r00         [24] 3031 	lcall	_stack_push
      000E49 E5 81            [12] 3032 	mov	a,sp
      000E4B 24 FC            [12] 3033 	add	a,#0xfc
      000E4D F5 81            [12] 3034 	mov	sp,a
                                   3035 ;	calc.c:195: printstr("\r\nstack underflow\r\n");
      000E4F 7Fr38            [12] 3036 	mov	r7,#___str_8
      000E51 7Es00            [12] 3037 	mov	r6,#(___str_8 >> 8)
      000E53 7D 80            [12] 3038 	mov	r5,#0x80
                                   3039 ;	calc.c:50: return;
      000E55                       3040 00351$:
                                   3041 ;	calc.c:48: for (; *s; s++) putchar(*s);
      000E55 8F 82            [24] 3042 	mov	dpl,r7
      000E57 8E 83            [24] 3043 	mov	dph,r6
      000E59 8D F0            [24] 3044 	mov	b,r5
      000E5B 12r00r00         [24] 3045 	lcall	__gptrget
      000E5E FC               [12] 3046 	mov	r4,a
      000E5F 70 03            [24] 3047 	jnz	01061$
      000E61 02r1DrAE         [24] 3048 	ljmp	00217$
      000E64                       3049 01061$:
      000E64 7B 00            [12] 3050 	mov	r3,#0x00
      000E66 8C 82            [24] 3051 	mov	dpl,r4
      000E68 8B 83            [24] 3052 	mov	dph,r3
      000E6A 12r00r00         [24] 3053 	lcall	_putchar
      000E6D 0F               [12] 3054 	inc	r7
                                   3055 ;	calc.c:195: printstr("\r\nstack underflow\r\n");
      000E6E BF 00 E4         [24] 3056 	cjne	r7,#0x00,00351$
      000E71 0E               [12] 3057 	inc	r6
      000E72 80 E1            [24] 3058 	sjmp	00351$
      000E74                       3059 00130$:
                                   3060 ;	calc.c:197: d1 -= d0;
      000E74 E5*00            [12] 3061 	mov	a,_bp
      000E76 24 13            [12] 3062 	add	a,#0x13
      000E78 F8               [12] 3063 	mov	r0,a
      000E79 E5*00            [12] 3064 	mov	a,_bp
      000E7B 24 0F            [12] 3065 	add	a,#0x0f
      000E7D F9               [12] 3066 	mov	r1,a
      000E7E E6               [12] 3067 	mov	a,@r0
      000E7F C3               [12] 3068 	clr	c
      000E80 97               [12] 3069 	subb	a,@r1
      000E81 F6               [12] 3070 	mov	@r0,a
      000E82 08               [12] 3071 	inc	r0
      000E83 E6               [12] 3072 	mov	a,@r0
      000E84 09               [12] 3073 	inc	r1
      000E85 97               [12] 3074 	subb	a,@r1
      000E86 F6               [12] 3075 	mov	@r0,a
      000E87 08               [12] 3076 	inc	r0
      000E88 E6               [12] 3077 	mov	a,@r0
      000E89 09               [12] 3078 	inc	r1
      000E8A 97               [12] 3079 	subb	a,@r1
      000E8B F6               [12] 3080 	mov	@r0,a
      000E8C 08               [12] 3081 	inc	r0
      000E8D E6               [12] 3082 	mov	a,@r0
      000E8E 09               [12] 3083 	inc	r1
      000E8F 97               [12] 3084 	subb	a,@r1
      000E90 F6               [12] 3085 	mov	@r0,a
                                   3086 ;	calc.c:198: (void)stack_push(&ctx->s, d1);
      000E91 E5*00            [12] 3087 	mov	a,_bp
      000E93 24 0C            [12] 3088 	add	a,#0x0c
      000E95 F8               [12] 3089 	mov	r0,a
      000E96 74 09            [12] 3090 	mov	a,#0x09
      000E98 26               [12] 3091 	add	a,@r0
      000E99 FA               [12] 3092 	mov	r2,a
      000E9A E4               [12] 3093 	clr	a
      000E9B 08               [12] 3094 	inc	r0
      000E9C 36               [12] 3095 	addc	a,@r0
      000E9D FB               [12] 3096 	mov	r3,a
      000E9E 08               [12] 3097 	inc	r0
      000E9F 86 04            [24] 3098 	mov	ar4,@r0
      000EA1 E5*00            [12] 3099 	mov	a,_bp
      000EA3 24 13            [12] 3100 	add	a,#0x13
      000EA5 F8               [12] 3101 	mov	r0,a
      000EA6 E6               [12] 3102 	mov	a,@r0
      000EA7 C0 E0            [24] 3103 	push	acc
      000EA9 08               [12] 3104 	inc	r0
      000EAA E6               [12] 3105 	mov	a,@r0
      000EAB C0 E0            [24] 3106 	push	acc
      000EAD 08               [12] 3107 	inc	r0
      000EAE E6               [12] 3108 	mov	a,@r0
      000EAF C0 E0            [24] 3109 	push	acc
      000EB1 08               [12] 3110 	inc	r0
      000EB2 E6               [12] 3111 	mov	a,@r0
      000EB3 C0 E0            [24] 3112 	push	acc
      000EB5 8A 82            [24] 3113 	mov	dpl,r2
      000EB7 8B 83            [24] 3114 	mov	dph,r3
      000EB9 8C F0            [24] 3115 	mov	b,r4
      000EBB 12r00r00         [24] 3116 	lcall	_stack_push
      000EBE E5 81            [12] 3117 	mov	a,sp
      000EC0 24 FC            [12] 3118 	add	a,#0xfc
      000EC2 F5 81            [12] 3119 	mov	sp,a
                                   3120 ;	calc.c:200: break;
      000EC4 02r1DrAE         [24] 3121 	ljmp	00217$
                                   3122 ;	calc.c:201: case '*':
      000EC7                       3123 00135$:
                                   3124 ;	calc.c:202: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      000EC7 E5*00            [12] 3125 	mov	a,_bp
      000EC9 24 0F            [12] 3126 	add	a,#0x0f
      000ECB FF               [12] 3127 	mov	r7,a
      000ECC 7E 00            [12] 3128 	mov	r6,#0x00
      000ECE 7D 40            [12] 3129 	mov	r5,#0x40
      000ED0 E5*00            [12] 3130 	mov	a,_bp
      000ED2 24 0C            [12] 3131 	add	a,#0x0c
      000ED4 F8               [12] 3132 	mov	r0,a
      000ED5 74 09            [12] 3133 	mov	a,#0x09
      000ED7 26               [12] 3134 	add	a,@r0
      000ED8 FA               [12] 3135 	mov	r2,a
      000ED9 E4               [12] 3136 	clr	a
      000EDA 08               [12] 3137 	inc	r0
      000EDB 36               [12] 3138 	addc	a,@r0
      000EDC FB               [12] 3139 	mov	r3,a
      000EDD 08               [12] 3140 	inc	r0
      000EDE 86 04            [24] 3141 	mov	ar4,@r0
      000EE0 C0 07            [24] 3142 	push	ar7
      000EE2 C0 06            [24] 3143 	push	ar6
      000EE4 C0 05            [24] 3144 	push	ar5
      000EE6 8A 82            [24] 3145 	mov	dpl,r2
      000EE8 8B 83            [24] 3146 	mov	dph,r3
      000EEA 8C F0            [24] 3147 	mov	b,r4
      000EEC 12r00r00         [24] 3148 	lcall	_stack_pop
      000EEF AB 82            [24] 3149 	mov	r3,dpl
      000EF1 AC 83            [24] 3150 	mov	r4,dph
      000EF3 15 81            [12] 3151 	dec	sp
      000EF5 15 81            [12] 3152 	dec	sp
      000EF7 15 81            [12] 3153 	dec	sp
      000EF9 EB               [12] 3154 	mov	a,r3
      000EFA 4C               [12] 3155 	orl	a,r4
      000EFB 70 25            [24] 3156 	jnz	00140$
      000EFD 7Fr38            [12] 3157 	mov	r7,#___str_8
      000EFF 7Es00            [12] 3158 	mov	r6,#(___str_8 >> 8)
      000F01 7D 80            [12] 3159 	mov	r5,#0x80
                                   3160 ;	calc.c:50: return;
      000F03                       3161 00354$:
                                   3162 ;	calc.c:48: for (; *s; s++) putchar(*s);
      000F03 8F 82            [24] 3163 	mov	dpl,r7
      000F05 8E 83            [24] 3164 	mov	dph,r6
      000F07 8D F0            [24] 3165 	mov	b,r5
      000F09 12r00r00         [24] 3166 	lcall	__gptrget
      000F0C FC               [12] 3167 	mov	r4,a
      000F0D 70 03            [24] 3168 	jnz	01064$
      000F0F 02r1DrAE         [24] 3169 	ljmp	00217$
      000F12                       3170 01064$:
      000F12 7B 00            [12] 3171 	mov	r3,#0x00
      000F14 8C 82            [24] 3172 	mov	dpl,r4
      000F16 8B 83            [24] 3173 	mov	dph,r3
      000F18 12r00r00         [24] 3174 	lcall	_putchar
      000F1B 0F               [12] 3175 	inc	r7
                                   3176 ;	calc.c:202: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      000F1C BF 00 E4         [24] 3177 	cjne	r7,#0x00,00354$
      000F1F 0E               [12] 3178 	inc	r6
      000F20 80 E1            [24] 3179 	sjmp	00354$
      000F22                       3180 00140$:
                                   3181 ;	calc.c:203: else if (!stack_pop(&ctx->s, &d1)) {
      000F22 E5*00            [12] 3182 	mov	a,_bp
      000F24 24 13            [12] 3183 	add	a,#0x13
      000F26 FF               [12] 3184 	mov	r7,a
      000F27 7E 00            [12] 3185 	mov	r6,#0x00
      000F29 7D 40            [12] 3186 	mov	r5,#0x40
      000F2B E5*00            [12] 3187 	mov	a,_bp
      000F2D 24 0C            [12] 3188 	add	a,#0x0c
      000F2F F8               [12] 3189 	mov	r0,a
      000F30 74 09            [12] 3190 	mov	a,#0x09
      000F32 26               [12] 3191 	add	a,@r0
      000F33 FA               [12] 3192 	mov	r2,a
      000F34 E4               [12] 3193 	clr	a
      000F35 08               [12] 3194 	inc	r0
      000F36 36               [12] 3195 	addc	a,@r0
      000F37 FB               [12] 3196 	mov	r3,a
      000F38 08               [12] 3197 	inc	r0
      000F39 86 04            [24] 3198 	mov	ar4,@r0
      000F3B C0 07            [24] 3199 	push	ar7
      000F3D C0 06            [24] 3200 	push	ar6
      000F3F C0 05            [24] 3201 	push	ar5
      000F41 8A 82            [24] 3202 	mov	dpl,r2
      000F43 8B 83            [24] 3203 	mov	dph,r3
      000F45 8C F0            [24] 3204 	mov	b,r4
      000F47 12r00r00         [24] 3205 	lcall	_stack_pop
      000F4A AB 82            [24] 3206 	mov	r3,dpl
      000F4C AC 83            [24] 3207 	mov	r4,dph
      000F4E 15 81            [12] 3208 	dec	sp
      000F50 15 81            [12] 3209 	dec	sp
      000F52 15 81            [12] 3210 	dec	sp
      000F54 EB               [12] 3211 	mov	a,r3
      000F55 4C               [12] 3212 	orl	a,r4
      000F56 70 58            [24] 3213 	jnz	00137$
                                   3214 ;	calc.c:204: (void)stack_push(&ctx->s, d0);
      000F58 E5*00            [12] 3215 	mov	a,_bp
      000F5A 24 0C            [12] 3216 	add	a,#0x0c
      000F5C F8               [12] 3217 	mov	r0,a
      000F5D 74 09            [12] 3218 	mov	a,#0x09
      000F5F 26               [12] 3219 	add	a,@r0
      000F60 FA               [12] 3220 	mov	r2,a
      000F61 E4               [12] 3221 	clr	a
      000F62 08               [12] 3222 	inc	r0
      000F63 36               [12] 3223 	addc	a,@r0
      000F64 FB               [12] 3224 	mov	r3,a
      000F65 08               [12] 3225 	inc	r0
      000F66 86 04            [24] 3226 	mov	ar4,@r0
      000F68 E5*00            [12] 3227 	mov	a,_bp
      000F6A 24 0F            [12] 3228 	add	a,#0x0f
      000F6C F8               [12] 3229 	mov	r0,a
      000F6D E6               [12] 3230 	mov	a,@r0
      000F6E C0 E0            [24] 3231 	push	acc
      000F70 08               [12] 3232 	inc	r0
      000F71 E6               [12] 3233 	mov	a,@r0
      000F72 C0 E0            [24] 3234 	push	acc
      000F74 08               [12] 3235 	inc	r0
      000F75 E6               [12] 3236 	mov	a,@r0
      000F76 C0 E0            [24] 3237 	push	acc
      000F78 08               [12] 3238 	inc	r0
      000F79 E6               [12] 3239 	mov	a,@r0
      000F7A C0 E0            [24] 3240 	push	acc
      000F7C 8A 82            [24] 3241 	mov	dpl,r2
      000F7E 8B 83            [24] 3242 	mov	dph,r3
      000F80 8C F0            [24] 3243 	mov	b,r4
      000F82 12r00r00         [24] 3244 	lcall	_stack_push
      000F85 E5 81            [12] 3245 	mov	a,sp
      000F87 24 FC            [12] 3246 	add	a,#0xfc
      000F89 F5 81            [12] 3247 	mov	sp,a
                                   3248 ;	calc.c:205: printstr("\r\nstack underflow\r\n");
      000F8B 7Fr38            [12] 3249 	mov	r7,#___str_8
      000F8D 7Es00            [12] 3250 	mov	r6,#(___str_8 >> 8)
      000F8F 7D 80            [12] 3251 	mov	r5,#0x80
                                   3252 ;	calc.c:50: return;
      000F91                       3253 00357$:
                                   3254 ;	calc.c:48: for (; *s; s++) putchar(*s);
      000F91 8F 82            [24] 3255 	mov	dpl,r7
      000F93 8E 83            [24] 3256 	mov	dph,r6
      000F95 8D F0            [24] 3257 	mov	b,r5
      000F97 12r00r00         [24] 3258 	lcall	__gptrget
      000F9A FC               [12] 3259 	mov	r4,a
      000F9B 70 03            [24] 3260 	jnz	01067$
      000F9D 02r1DrAE         [24] 3261 	ljmp	00217$
      000FA0                       3262 01067$:
      000FA0 7B 00            [12] 3263 	mov	r3,#0x00
      000FA2 8C 82            [24] 3264 	mov	dpl,r4
      000FA4 8B 83            [24] 3265 	mov	dph,r3
      000FA6 12r00r00         [24] 3266 	lcall	_putchar
      000FA9 0F               [12] 3267 	inc	r7
                                   3268 ;	calc.c:205: printstr("\r\nstack underflow\r\n");
      000FAA BF 00 E4         [24] 3269 	cjne	r7,#0x00,00357$
      000FAD 0E               [12] 3270 	inc	r6
      000FAE 80 E1            [24] 3271 	sjmp	00357$
      000FB0                       3272 00137$:
                                   3273 ;	calc.c:207: d1 *= d0;
      000FB0 E5*00            [12] 3274 	mov	a,_bp
      000FB2 24 0F            [12] 3275 	add	a,#0x0f
      000FB4 F8               [12] 3276 	mov	r0,a
      000FB5 E6               [12] 3277 	mov	a,@r0
      000FB6 C0 E0            [24] 3278 	push	acc
      000FB8 08               [12] 3279 	inc	r0
      000FB9 E6               [12] 3280 	mov	a,@r0
      000FBA C0 E0            [24] 3281 	push	acc
      000FBC 08               [12] 3282 	inc	r0
      000FBD E6               [12] 3283 	mov	a,@r0
      000FBE C0 E0            [24] 3284 	push	acc
      000FC0 08               [12] 3285 	inc	r0
      000FC1 E6               [12] 3286 	mov	a,@r0
      000FC2 C0 E0            [24] 3287 	push	acc
      000FC4 E5*00            [12] 3288 	mov	a,_bp
      000FC6 24 13            [12] 3289 	add	a,#0x13
      000FC8 F8               [12] 3290 	mov	r0,a
      000FC9 86 82            [24] 3291 	mov	dpl,@r0
      000FCB 08               [12] 3292 	inc	r0
      000FCC 86 83            [24] 3293 	mov	dph,@r0
      000FCE 08               [12] 3294 	inc	r0
      000FCF 86 F0            [24] 3295 	mov	b,@r0
      000FD1 08               [12] 3296 	inc	r0
      000FD2 E6               [12] 3297 	mov	a,@r0
      000FD3 12r00r00         [24] 3298 	lcall	__mullong
      000FD6 AF 82            [24] 3299 	mov	r7,dpl
      000FD8 AE 83            [24] 3300 	mov	r6,dph
      000FDA AD F0            [24] 3301 	mov	r5,b
      000FDC FC               [12] 3302 	mov	r4,a
      000FDD E5 81            [12] 3303 	mov	a,sp
      000FDF 24 FC            [12] 3304 	add	a,#0xfc
      000FE1 F5 81            [12] 3305 	mov	sp,a
      000FE3 E5*00            [12] 3306 	mov	a,_bp
      000FE5 24 13            [12] 3307 	add	a,#0x13
      000FE7 F8               [12] 3308 	mov	r0,a
      000FE8 A6 07            [24] 3309 	mov	@r0,ar7
      000FEA 08               [12] 3310 	inc	r0
      000FEB A6 06            [24] 3311 	mov	@r0,ar6
      000FED 08               [12] 3312 	inc	r0
      000FEE A6 05            [24] 3313 	mov	@r0,ar5
      000FF0 08               [12] 3314 	inc	r0
      000FF1 A6 04            [24] 3315 	mov	@r0,ar4
                                   3316 ;	calc.c:208: (void)stack_push(&ctx->s, d1);
      000FF3 E5*00            [12] 3317 	mov	a,_bp
      000FF5 24 0C            [12] 3318 	add	a,#0x0c
      000FF7 F8               [12] 3319 	mov	r0,a
      000FF8 74 09            [12] 3320 	mov	a,#0x09
      000FFA 26               [12] 3321 	add	a,@r0
      000FFB FA               [12] 3322 	mov	r2,a
      000FFC E4               [12] 3323 	clr	a
      000FFD 08               [12] 3324 	inc	r0
      000FFE 36               [12] 3325 	addc	a,@r0
      000FFF FB               [12] 3326 	mov	r3,a
      001000 08               [12] 3327 	inc	r0
      001001 86 04            [24] 3328 	mov	ar4,@r0
      001003 E5*00            [12] 3329 	mov	a,_bp
      001005 24 13            [12] 3330 	add	a,#0x13
      001007 F8               [12] 3331 	mov	r0,a
      001008 E6               [12] 3332 	mov	a,@r0
      001009 C0 E0            [24] 3333 	push	acc
      00100B 08               [12] 3334 	inc	r0
      00100C E6               [12] 3335 	mov	a,@r0
      00100D C0 E0            [24] 3336 	push	acc
      00100F 08               [12] 3337 	inc	r0
      001010 E6               [12] 3338 	mov	a,@r0
      001011 C0 E0            [24] 3339 	push	acc
      001013 08               [12] 3340 	inc	r0
      001014 E6               [12] 3341 	mov	a,@r0
      001015 C0 E0            [24] 3342 	push	acc
      001017 8A 82            [24] 3343 	mov	dpl,r2
      001019 8B 83            [24] 3344 	mov	dph,r3
      00101B 8C F0            [24] 3345 	mov	b,r4
      00101D 12r00r00         [24] 3346 	lcall	_stack_push
      001020 E5 81            [12] 3347 	mov	a,sp
      001022 24 FC            [12] 3348 	add	a,#0xfc
      001024 F5 81            [12] 3349 	mov	sp,a
                                   3350 ;	calc.c:210: break;
      001026 02r1DrAE         [24] 3351 	ljmp	00217$
                                   3352 ;	calc.c:212: case '\\':
      001029                       3353 00143$:
                                   3354 ;	calc.c:213: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      001029 C0 05            [24] 3355 	push	ar5
      00102B C0 06            [24] 3356 	push	ar6
      00102D C0 07            [24] 3357 	push	ar7
      00102F E5*00            [12] 3358 	mov	a,_bp
      001031 24 0F            [12] 3359 	add	a,#0x0f
      001033 FC               [12] 3360 	mov	r4,a
      001034 7B 00            [12] 3361 	mov	r3,#0x00
      001036 7A 40            [12] 3362 	mov	r2,#0x40
      001038 E5*00            [12] 3363 	mov	a,_bp
      00103A 24 0C            [12] 3364 	add	a,#0x0c
      00103C F8               [12] 3365 	mov	r0,a
      00103D 74 09            [12] 3366 	mov	a,#0x09
      00103F 26               [12] 3367 	add	a,@r0
      001040 FD               [12] 3368 	mov	r5,a
      001041 E4               [12] 3369 	clr	a
      001042 08               [12] 3370 	inc	r0
      001043 36               [12] 3371 	addc	a,@r0
      001044 FE               [12] 3372 	mov	r6,a
      001045 08               [12] 3373 	inc	r0
      001046 86 07            [24] 3374 	mov	ar7,@r0
      001048 C0 05            [24] 3375 	push	ar5
      00104A C0 04            [24] 3376 	push	ar4
      00104C C0 03            [24] 3377 	push	ar3
      00104E C0 02            [24] 3378 	push	ar2
      001050 8D 82            [24] 3379 	mov	dpl,r5
      001052 8E 83            [24] 3380 	mov	dph,r6
      001054 8F F0            [24] 3381 	mov	b,r7
      001056 12r00r00         [24] 3382 	lcall	_stack_pop
      001059 AE 82            [24] 3383 	mov	r6,dpl
      00105B AF 83            [24] 3384 	mov	r7,dph
      00105D 15 81            [12] 3385 	dec	sp
      00105F 15 81            [12] 3386 	dec	sp
      001061 15 81            [12] 3387 	dec	sp
      001063 D0 05            [24] 3388 	pop	ar5
      001065 EE               [12] 3389 	mov	a,r6
      001066 4F               [12] 3390 	orl	a,r7
      001067 D0 07            [24] 3391 	pop	ar7
      001069 D0 06            [24] 3392 	pop	ar6
      00106B D0 05            [24] 3393 	pop	ar5
      00106D 70 25            [24] 3394 	jnz	00154$
      00106F 7Fr38            [12] 3395 	mov	r7,#___str_8
      001071 7Es00            [12] 3396 	mov	r6,#(___str_8 >> 8)
      001073 7D 80            [12] 3397 	mov	r5,#0x80
                                   3398 ;	calc.c:50: return;
      001075                       3399 00360$:
                                   3400 ;	calc.c:48: for (; *s; s++) putchar(*s);
      001075 8F 82            [24] 3401 	mov	dpl,r7
      001077 8E 83            [24] 3402 	mov	dph,r6
      001079 8D F0            [24] 3403 	mov	b,r5
      00107B 12r00r00         [24] 3404 	lcall	__gptrget
      00107E FC               [12] 3405 	mov	r4,a
      00107F 70 03            [24] 3406 	jnz	01070$
      001081 02r1DrAE         [24] 3407 	ljmp	00217$
      001084                       3408 01070$:
      001084 7B 00            [12] 3409 	mov	r3,#0x00
      001086 8C 82            [24] 3410 	mov	dpl,r4
      001088 8B 83            [24] 3411 	mov	dph,r3
      00108A 12r00r00         [24] 3412 	lcall	_putchar
      00108D 0F               [12] 3413 	inc	r7
                                   3414 ;	calc.c:213: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      00108E BF 00 E4         [24] 3415 	cjne	r7,#0x00,00360$
      001091 0E               [12] 3416 	inc	r6
      001092 80 E1            [24] 3417 	sjmp	00360$
      001094                       3418 00154$:
                                   3419 ;	calc.c:214: else if (!stack_pop(&ctx->s, &d1)) {
      001094 C0 05            [24] 3420 	push	ar5
      001096 C0 06            [24] 3421 	push	ar6
      001098 C0 07            [24] 3422 	push	ar7
      00109A E5*00            [12] 3423 	mov	a,_bp
      00109C 24 13            [12] 3424 	add	a,#0x13
      00109E FC               [12] 3425 	mov	r4,a
      00109F 7B 00            [12] 3426 	mov	r3,#0x00
      0010A1 7A 40            [12] 3427 	mov	r2,#0x40
      0010A3 E5*00            [12] 3428 	mov	a,_bp
      0010A5 24 0C            [12] 3429 	add	a,#0x0c
      0010A7 F8               [12] 3430 	mov	r0,a
      0010A8 74 09            [12] 3431 	mov	a,#0x09
      0010AA 26               [12] 3432 	add	a,@r0
      0010AB FD               [12] 3433 	mov	r5,a
      0010AC E4               [12] 3434 	clr	a
      0010AD 08               [12] 3435 	inc	r0
      0010AE 36               [12] 3436 	addc	a,@r0
      0010AF FE               [12] 3437 	mov	r6,a
      0010B0 08               [12] 3438 	inc	r0
      0010B1 86 07            [24] 3439 	mov	ar7,@r0
      0010B3 C0 05            [24] 3440 	push	ar5
      0010B5 C0 04            [24] 3441 	push	ar4
      0010B7 C0 03            [24] 3442 	push	ar3
      0010B9 C0 02            [24] 3443 	push	ar2
      0010BB 8D 82            [24] 3444 	mov	dpl,r5
      0010BD 8E 83            [24] 3445 	mov	dph,r6
      0010BF 8F F0            [24] 3446 	mov	b,r7
      0010C1 12r00r00         [24] 3447 	lcall	_stack_pop
      0010C4 AE 82            [24] 3448 	mov	r6,dpl
      0010C6 AF 83            [24] 3449 	mov	r7,dph
      0010C8 15 81            [12] 3450 	dec	sp
      0010CA 15 81            [12] 3451 	dec	sp
      0010CC 15 81            [12] 3452 	dec	sp
      0010CE D0 05            [24] 3453 	pop	ar5
      0010D0 EE               [12] 3454 	mov	a,r6
      0010D1 4F               [12] 3455 	orl	a,r7
      0010D2 D0 07            [24] 3456 	pop	ar7
      0010D4 D0 06            [24] 3457 	pop	ar6
      0010D6 D0 05            [24] 3458 	pop	ar5
      0010D8 70 58            [24] 3459 	jnz	00151$
                                   3460 ;	calc.c:215: (void)stack_push(&ctx->s, d0);
      0010DA E5*00            [12] 3461 	mov	a,_bp
      0010DC 24 0C            [12] 3462 	add	a,#0x0c
      0010DE F8               [12] 3463 	mov	r0,a
      0010DF 74 09            [12] 3464 	mov	a,#0x09
      0010E1 26               [12] 3465 	add	a,@r0
      0010E2 FA               [12] 3466 	mov	r2,a
      0010E3 E4               [12] 3467 	clr	a
      0010E4 08               [12] 3468 	inc	r0
      0010E5 36               [12] 3469 	addc	a,@r0
      0010E6 FB               [12] 3470 	mov	r3,a
      0010E7 08               [12] 3471 	inc	r0
      0010E8 86 04            [24] 3472 	mov	ar4,@r0
      0010EA E5*00            [12] 3473 	mov	a,_bp
      0010EC 24 0F            [12] 3474 	add	a,#0x0f
      0010EE F8               [12] 3475 	mov	r0,a
      0010EF E6               [12] 3476 	mov	a,@r0
      0010F0 C0 E0            [24] 3477 	push	acc
      0010F2 08               [12] 3478 	inc	r0
      0010F3 E6               [12] 3479 	mov	a,@r0
      0010F4 C0 E0            [24] 3480 	push	acc
      0010F6 08               [12] 3481 	inc	r0
      0010F7 E6               [12] 3482 	mov	a,@r0
      0010F8 C0 E0            [24] 3483 	push	acc
      0010FA 08               [12] 3484 	inc	r0
      0010FB E6               [12] 3485 	mov	a,@r0
      0010FC C0 E0            [24] 3486 	push	acc
      0010FE 8A 82            [24] 3487 	mov	dpl,r2
      001100 8B 83            [24] 3488 	mov	dph,r3
      001102 8C F0            [24] 3489 	mov	b,r4
      001104 12r00r00         [24] 3490 	lcall	_stack_push
      001107 E5 81            [12] 3491 	mov	a,sp
      001109 24 FC            [12] 3492 	add	a,#0xfc
      00110B F5 81            [12] 3493 	mov	sp,a
                                   3494 ;	calc.c:216: printstr("\r\nstack underflow\r\n");
      00110D 7Fr38            [12] 3495 	mov	r7,#___str_8
      00110F 7Es00            [12] 3496 	mov	r6,#(___str_8 >> 8)
      001111 7D 80            [12] 3497 	mov	r5,#0x80
                                   3498 ;	calc.c:50: return;
      001113                       3499 00363$:
                                   3500 ;	calc.c:48: for (; *s; s++) putchar(*s);
      001113 8F 82            [24] 3501 	mov	dpl,r7
      001115 8E 83            [24] 3502 	mov	dph,r6
      001117 8D F0            [24] 3503 	mov	b,r5
      001119 12r00r00         [24] 3504 	lcall	__gptrget
      00111C FC               [12] 3505 	mov	r4,a
      00111D 70 03            [24] 3506 	jnz	01073$
      00111F 02r1DrAE         [24] 3507 	ljmp	00217$
      001122                       3508 01073$:
      001122 7B 00            [12] 3509 	mov	r3,#0x00
      001124 8C 82            [24] 3510 	mov	dpl,r4
      001126 8B 83            [24] 3511 	mov	dph,r3
      001128 12r00r00         [24] 3512 	lcall	_putchar
      00112B 0F               [12] 3513 	inc	r7
                                   3514 ;	calc.c:216: printstr("\r\nstack underflow\r\n");
      00112C BF 00 E4         [24] 3515 	cjne	r7,#0x00,00363$
      00112F 0E               [12] 3516 	inc	r6
      001130 80 E1            [24] 3517 	sjmp	00363$
      001132                       3518 00151$:
                                   3519 ;	calc.c:217: } else if (!d0) {
      001132 E5*00            [12] 3520 	mov	a,_bp
      001134 24 0F            [12] 3521 	add	a,#0x0f
      001136 F8               [12] 3522 	mov	r0,a
      001137 E6               [12] 3523 	mov	a,@r0
      001138 08               [12] 3524 	inc	r0
      001139 46               [12] 3525 	orl	a,@r0
      00113A 08               [12] 3526 	inc	r0
      00113B 46               [12] 3527 	orl	a,@r0
      00113C 08               [12] 3528 	inc	r0
      00113D 46               [12] 3529 	orl	a,@r0
      00113E 60 03            [24] 3530 	jz	01075$
      001140 02r11rCE         [24] 3531 	ljmp	00148$
      001143                       3532 01075$:
                                   3533 ;	calc.c:218: (void)stack_push(&ctx->s, d1);
      001143 E5*00            [12] 3534 	mov	a,_bp
      001145 24 0C            [12] 3535 	add	a,#0x0c
      001147 F8               [12] 3536 	mov	r0,a
      001148 74 09            [12] 3537 	mov	a,#0x09
      00114A 26               [12] 3538 	add	a,@r0
      00114B FA               [12] 3539 	mov	r2,a
      00114C E4               [12] 3540 	clr	a
      00114D 08               [12] 3541 	inc	r0
      00114E 36               [12] 3542 	addc	a,@r0
      00114F FB               [12] 3543 	mov	r3,a
      001150 08               [12] 3544 	inc	r0
      001151 86 04            [24] 3545 	mov	ar4,@r0
      001153 E5*00            [12] 3546 	mov	a,_bp
      001155 24 13            [12] 3547 	add	a,#0x13
      001157 F8               [12] 3548 	mov	r0,a
      001158 E6               [12] 3549 	mov	a,@r0
      001159 C0 E0            [24] 3550 	push	acc
      00115B 08               [12] 3551 	inc	r0
      00115C E6               [12] 3552 	mov	a,@r0
      00115D C0 E0            [24] 3553 	push	acc
      00115F 08               [12] 3554 	inc	r0
      001160 E6               [12] 3555 	mov	a,@r0
      001161 C0 E0            [24] 3556 	push	acc
      001163 08               [12] 3557 	inc	r0
      001164 E6               [12] 3558 	mov	a,@r0
      001165 C0 E0            [24] 3559 	push	acc
      001167 8A 82            [24] 3560 	mov	dpl,r2
      001169 8B 83            [24] 3561 	mov	dph,r3
      00116B 8C F0            [24] 3562 	mov	b,r4
      00116D 12r00r00         [24] 3563 	lcall	_stack_push
      001170 E5 81            [12] 3564 	mov	a,sp
      001172 24 FC            [12] 3565 	add	a,#0xfc
      001174 F5 81            [12] 3566 	mov	sp,a
                                   3567 ;	calc.c:219: (void)stack_push(&ctx->s, d0);			
      001176 E5*00            [12] 3568 	mov	a,_bp
      001178 24 0C            [12] 3569 	add	a,#0x0c
      00117A F8               [12] 3570 	mov	r0,a
      00117B 74 09            [12] 3571 	mov	a,#0x09
      00117D 26               [12] 3572 	add	a,@r0
      00117E FA               [12] 3573 	mov	r2,a
      00117F E4               [12] 3574 	clr	a
      001180 08               [12] 3575 	inc	r0
      001181 36               [12] 3576 	addc	a,@r0
      001182 FB               [12] 3577 	mov	r3,a
      001183 08               [12] 3578 	inc	r0
      001184 86 04            [24] 3579 	mov	ar4,@r0
      001186 E5*00            [12] 3580 	mov	a,_bp
      001188 24 0F            [12] 3581 	add	a,#0x0f
      00118A F8               [12] 3582 	mov	r0,a
      00118B E6               [12] 3583 	mov	a,@r0
      00118C C0 E0            [24] 3584 	push	acc
      00118E 08               [12] 3585 	inc	r0
      00118F E6               [12] 3586 	mov	a,@r0
      001190 C0 E0            [24] 3587 	push	acc
      001192 08               [12] 3588 	inc	r0
      001193 E6               [12] 3589 	mov	a,@r0
      001194 C0 E0            [24] 3590 	push	acc
      001196 08               [12] 3591 	inc	r0
      001197 E6               [12] 3592 	mov	a,@r0
      001198 C0 E0            [24] 3593 	push	acc
      00119A 8A 82            [24] 3594 	mov	dpl,r2
      00119C 8B 83            [24] 3595 	mov	dph,r3
      00119E 8C F0            [24] 3596 	mov	b,r4
      0011A0 12r00r00         [24] 3597 	lcall	_stack_push
      0011A3 E5 81            [12] 3598 	mov	a,sp
      0011A5 24 FC            [12] 3599 	add	a,#0xfc
      0011A7 F5 81            [12] 3600 	mov	sp,a
                                   3601 ;	calc.c:220: printstr("\r\ndivision by zero\r\n");
      0011A9 7Fr4C            [12] 3602 	mov	r7,#___str_9
      0011AB 7Es00            [12] 3603 	mov	r6,#(___str_9 >> 8)
      0011AD 7D 80            [12] 3604 	mov	r5,#0x80
                                   3605 ;	calc.c:50: return;
      0011AF                       3606 00366$:
                                   3607 ;	calc.c:48: for (; *s; s++) putchar(*s);
      0011AF 8F 82            [24] 3608 	mov	dpl,r7
      0011B1 8E 83            [24] 3609 	mov	dph,r6
      0011B3 8D F0            [24] 3610 	mov	b,r5
      0011B5 12r00r00         [24] 3611 	lcall	__gptrget
      0011B8 FC               [12] 3612 	mov	r4,a
      0011B9 70 03            [24] 3613 	jnz	01076$
      0011BB 02r1DrAE         [24] 3614 	ljmp	00217$
      0011BE                       3615 01076$:
      0011BE 7B 00            [12] 3616 	mov	r3,#0x00
      0011C0 8C 82            [24] 3617 	mov	dpl,r4
      0011C2 8B 83            [24] 3618 	mov	dph,r3
      0011C4 12r00r00         [24] 3619 	lcall	_putchar
      0011C7 0F               [12] 3620 	inc	r7
                                   3621 ;	calc.c:220: printstr("\r\ndivision by zero\r\n");
      0011C8 BF 00 E4         [24] 3622 	cjne	r7,#0x00,00366$
      0011CB 0E               [12] 3623 	inc	r6
      0011CC 80 E1            [24] 3624 	sjmp	00366$
      0011CE                       3625 00148$:
                                   3626 ;	calc.c:222: if (ctx->digit[0] == '/') d1 /= d0;
      0011CE 8D 82            [24] 3627 	mov	dpl,r5
      0011D0 8E 83            [24] 3628 	mov	dph,r6
      0011D2 8F F0            [24] 3629 	mov	b,r7
      0011D4 12r00r00         [24] 3630 	lcall	__gptrget
      0011D7 FC               [12] 3631 	mov	r4,a
      0011D8 BC 2F 45         [24] 3632 	cjne	r4,#0x2f,00145$
      0011DB E5*00            [12] 3633 	mov	a,_bp
      0011DD 24 0F            [12] 3634 	add	a,#0x0f
      0011DF F8               [12] 3635 	mov	r0,a
      0011E0 E6               [12] 3636 	mov	a,@r0
      0011E1 C0 E0            [24] 3637 	push	acc
      0011E3 08               [12] 3638 	inc	r0
      0011E4 E6               [12] 3639 	mov	a,@r0
      0011E5 C0 E0            [24] 3640 	push	acc
      0011E7 08               [12] 3641 	inc	r0
      0011E8 E6               [12] 3642 	mov	a,@r0
      0011E9 C0 E0            [24] 3643 	push	acc
      0011EB 08               [12] 3644 	inc	r0
      0011EC E6               [12] 3645 	mov	a,@r0
      0011ED C0 E0            [24] 3646 	push	acc
      0011EF E5*00            [12] 3647 	mov	a,_bp
      0011F1 24 13            [12] 3648 	add	a,#0x13
      0011F3 F8               [12] 3649 	mov	r0,a
      0011F4 86 82            [24] 3650 	mov	dpl,@r0
      0011F6 08               [12] 3651 	inc	r0
      0011F7 86 83            [24] 3652 	mov	dph,@r0
      0011F9 08               [12] 3653 	inc	r0
      0011FA 86 F0            [24] 3654 	mov	b,@r0
      0011FC 08               [12] 3655 	inc	r0
      0011FD E6               [12] 3656 	mov	a,@r0
      0011FE 12r00r00         [24] 3657 	lcall	__divslong
      001201 AF 82            [24] 3658 	mov	r7,dpl
      001203 AE 83            [24] 3659 	mov	r6,dph
      001205 AD F0            [24] 3660 	mov	r5,b
      001207 FC               [12] 3661 	mov	r4,a
      001208 E5 81            [12] 3662 	mov	a,sp
      00120A 24 FC            [12] 3663 	add	a,#0xfc
      00120C F5 81            [12] 3664 	mov	sp,a
      00120E E5*00            [12] 3665 	mov	a,_bp
      001210 24 13            [12] 3666 	add	a,#0x13
      001212 F8               [12] 3667 	mov	r0,a
      001213 A6 07            [24] 3668 	mov	@r0,ar7
      001215 08               [12] 3669 	inc	r0
      001216 A6 06            [24] 3670 	mov	@r0,ar6
      001218 08               [12] 3671 	inc	r0
      001219 A6 05            [24] 3672 	mov	@r0,ar5
      00121B 08               [12] 3673 	inc	r0
      00121C A6 04            [24] 3674 	mov	@r0,ar4
      00121E 80 63            [24] 3675 	sjmp	00146$
      001220                       3676 00145$:
                                   3677 ;	calc.c:223: else d1 = (unsigned long)d1 / (unsigned long)d0;
      001220 E5*00            [12] 3678 	mov	a,_bp
      001222 24 13            [12] 3679 	add	a,#0x13
      001224 F8               [12] 3680 	mov	r0,a
      001225 86 07            [24] 3681 	mov	ar7,@r0
      001227 08               [12] 3682 	inc	r0
      001228 86 06            [24] 3683 	mov	ar6,@r0
      00122A 08               [12] 3684 	inc	r0
      00122B 86 05            [24] 3685 	mov	ar5,@r0
      00122D 08               [12] 3686 	inc	r0
      00122E 86 04            [24] 3687 	mov	ar4,@r0
      001230 E5*00            [12] 3688 	mov	a,_bp
      001232 24 0F            [12] 3689 	add	a,#0x0f
      001234 F8               [12] 3690 	mov	r0,a
      001235 E5*00            [12] 3691 	mov	a,_bp
      001237 24 08            [12] 3692 	add	a,#0x08
      001239 F9               [12] 3693 	mov	r1,a
      00123A E6               [12] 3694 	mov	a,@r0
      00123B F7               [12] 3695 	mov	@r1,a
      00123C 08               [12] 3696 	inc	r0
      00123D 09               [12] 3697 	inc	r1
      00123E E6               [12] 3698 	mov	a,@r0
      00123F F7               [12] 3699 	mov	@r1,a
      001240 08               [12] 3700 	inc	r0
      001241 09               [12] 3701 	inc	r1
      001242 E6               [12] 3702 	mov	a,@r0
      001243 F7               [12] 3703 	mov	@r1,a
      001244 08               [12] 3704 	inc	r0
      001245 09               [12] 3705 	inc	r1
      001246 E6               [12] 3706 	mov	a,@r0
      001247 F7               [12] 3707 	mov	@r1,a
      001248 E5*00            [12] 3708 	mov	a,_bp
      00124A 24 08            [12] 3709 	add	a,#0x08
      00124C F8               [12] 3710 	mov	r0,a
      00124D E6               [12] 3711 	mov	a,@r0
      00124E C0 E0            [24] 3712 	push	acc
      001250 08               [12] 3713 	inc	r0
      001251 E6               [12] 3714 	mov	a,@r0
      001252 C0 E0            [24] 3715 	push	acc
      001254 08               [12] 3716 	inc	r0
      001255 E6               [12] 3717 	mov	a,@r0
      001256 C0 E0            [24] 3718 	push	acc
      001258 08               [12] 3719 	inc	r0
      001259 E6               [12] 3720 	mov	a,@r0
      00125A C0 E0            [24] 3721 	push	acc
      00125C 8F 82            [24] 3722 	mov	dpl,r7
      00125E 8E 83            [24] 3723 	mov	dph,r6
      001260 8D F0            [24] 3724 	mov	b,r5
      001262 EC               [12] 3725 	mov	a,r4
      001263 12r00r00         [24] 3726 	lcall	__divulong
      001266 AF 82            [24] 3727 	mov	r7,dpl
      001268 AE 83            [24] 3728 	mov	r6,dph
      00126A AD F0            [24] 3729 	mov	r5,b
      00126C FC               [12] 3730 	mov	r4,a
      00126D E5 81            [12] 3731 	mov	a,sp
      00126F 24 FC            [12] 3732 	add	a,#0xfc
      001271 F5 81            [12] 3733 	mov	sp,a
      001273 E5*00            [12] 3734 	mov	a,_bp
      001275 24 13            [12] 3735 	add	a,#0x13
      001277 F8               [12] 3736 	mov	r0,a
      001278 A6 07            [24] 3737 	mov	@r0,ar7
      00127A 08               [12] 3738 	inc	r0
      00127B A6 06            [24] 3739 	mov	@r0,ar6
      00127D 08               [12] 3740 	inc	r0
      00127E A6 05            [24] 3741 	mov	@r0,ar5
      001280 08               [12] 3742 	inc	r0
      001281 A6 04            [24] 3743 	mov	@r0,ar4
      001283                       3744 00146$:
                                   3745 ;	calc.c:224: (void)stack_push(&ctx->s, d1);
      001283 E5*00            [12] 3746 	mov	a,_bp
      001285 24 0C            [12] 3747 	add	a,#0x0c
      001287 F8               [12] 3748 	mov	r0,a
      001288 74 09            [12] 3749 	mov	a,#0x09
      00128A 26               [12] 3750 	add	a,@r0
      00128B FA               [12] 3751 	mov	r2,a
      00128C E4               [12] 3752 	clr	a
      00128D 08               [12] 3753 	inc	r0
      00128E 36               [12] 3754 	addc	a,@r0
      00128F FB               [12] 3755 	mov	r3,a
      001290 08               [12] 3756 	inc	r0
      001291 86 04            [24] 3757 	mov	ar4,@r0
      001293 E5*00            [12] 3758 	mov	a,_bp
      001295 24 13            [12] 3759 	add	a,#0x13
      001297 F8               [12] 3760 	mov	r0,a
      001298 E6               [12] 3761 	mov	a,@r0
      001299 C0 E0            [24] 3762 	push	acc
      00129B 08               [12] 3763 	inc	r0
      00129C E6               [12] 3764 	mov	a,@r0
      00129D C0 E0            [24] 3765 	push	acc
      00129F 08               [12] 3766 	inc	r0
      0012A0 E6               [12] 3767 	mov	a,@r0
      0012A1 C0 E0            [24] 3768 	push	acc
      0012A3 08               [12] 3769 	inc	r0
      0012A4 E6               [12] 3770 	mov	a,@r0
      0012A5 C0 E0            [24] 3771 	push	acc
      0012A7 8A 82            [24] 3772 	mov	dpl,r2
      0012A9 8B 83            [24] 3773 	mov	dph,r3
      0012AB 8C F0            [24] 3774 	mov	b,r4
      0012AD 12r00r00         [24] 3775 	lcall	_stack_push
      0012B0 E5 81            [12] 3776 	mov	a,sp
      0012B2 24 FC            [12] 3777 	add	a,#0xfc
      0012B4 F5 81            [12] 3778 	mov	sp,a
                                   3779 ;	calc.c:226: break;
      0012B6 02r1DrAE         [24] 3780 	ljmp	00217$
                                   3781 ;	calc.c:228: case '#':
      0012B9                       3782 00157$:
                                   3783 ;	calc.c:229: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      0012B9 C0 05            [24] 3784 	push	ar5
      0012BB C0 06            [24] 3785 	push	ar6
      0012BD C0 07            [24] 3786 	push	ar7
      0012BF E5*00            [12] 3787 	mov	a,_bp
      0012C1 24 0F            [12] 3788 	add	a,#0x0f
      0012C3 FC               [12] 3789 	mov	r4,a
      0012C4 7B 00            [12] 3790 	mov	r3,#0x00
      0012C6 7A 40            [12] 3791 	mov	r2,#0x40
      0012C8 E5*00            [12] 3792 	mov	a,_bp
      0012CA 24 0C            [12] 3793 	add	a,#0x0c
      0012CC F8               [12] 3794 	mov	r0,a
      0012CD 74 09            [12] 3795 	mov	a,#0x09
      0012CF 26               [12] 3796 	add	a,@r0
      0012D0 FD               [12] 3797 	mov	r5,a
      0012D1 E4               [12] 3798 	clr	a
      0012D2 08               [12] 3799 	inc	r0
      0012D3 36               [12] 3800 	addc	a,@r0
      0012D4 FE               [12] 3801 	mov	r6,a
      0012D5 08               [12] 3802 	inc	r0
      0012D6 86 07            [24] 3803 	mov	ar7,@r0
      0012D8 C0 05            [24] 3804 	push	ar5
      0012DA C0 04            [24] 3805 	push	ar4
      0012DC C0 03            [24] 3806 	push	ar3
      0012DE C0 02            [24] 3807 	push	ar2
      0012E0 8D 82            [24] 3808 	mov	dpl,r5
      0012E2 8E 83            [24] 3809 	mov	dph,r6
      0012E4 8F F0            [24] 3810 	mov	b,r7
      0012E6 12r00r00         [24] 3811 	lcall	_stack_pop
      0012E9 AE 82            [24] 3812 	mov	r6,dpl
      0012EB AF 83            [24] 3813 	mov	r7,dph
      0012ED 15 81            [12] 3814 	dec	sp
      0012EF 15 81            [12] 3815 	dec	sp
      0012F1 15 81            [12] 3816 	dec	sp
      0012F3 D0 05            [24] 3817 	pop	ar5
      0012F5 EE               [12] 3818 	mov	a,r6
      0012F6 4F               [12] 3819 	orl	a,r7
      0012F7 D0 07            [24] 3820 	pop	ar7
      0012F9 D0 06            [24] 3821 	pop	ar6
      0012FB D0 05            [24] 3822 	pop	ar5
      0012FD 70 25            [24] 3823 	jnz	00168$
      0012FF 7Fr38            [12] 3824 	mov	r7,#___str_8
      001301 7Es00            [12] 3825 	mov	r6,#(___str_8 >> 8)
      001303 7D 80            [12] 3826 	mov	r5,#0x80
                                   3827 ;	calc.c:50: return;
      001305                       3828 00369$:
                                   3829 ;	calc.c:48: for (; *s; s++) putchar(*s);
      001305 8F 82            [24] 3830 	mov	dpl,r7
      001307 8E 83            [24] 3831 	mov	dph,r6
      001309 8D F0            [24] 3832 	mov	b,r5
      00130B 12r00r00         [24] 3833 	lcall	__gptrget
      00130E FC               [12] 3834 	mov	r4,a
      00130F 70 03            [24] 3835 	jnz	01081$
      001311 02r1DrAE         [24] 3836 	ljmp	00217$
      001314                       3837 01081$:
      001314 7B 00            [12] 3838 	mov	r3,#0x00
      001316 8C 82            [24] 3839 	mov	dpl,r4
      001318 8B 83            [24] 3840 	mov	dph,r3
      00131A 12r00r00         [24] 3841 	lcall	_putchar
      00131D 0F               [12] 3842 	inc	r7
                                   3843 ;	calc.c:229: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      00131E BF 00 E4         [24] 3844 	cjne	r7,#0x00,00369$
      001321 0E               [12] 3845 	inc	r6
      001322 80 E1            [24] 3846 	sjmp	00369$
      001324                       3847 00168$:
                                   3848 ;	calc.c:230: else if (!stack_pop(&ctx->s, &d1)) {
      001324 C0 05            [24] 3849 	push	ar5
      001326 C0 06            [24] 3850 	push	ar6
      001328 C0 07            [24] 3851 	push	ar7
      00132A E5*00            [12] 3852 	mov	a,_bp
      00132C 24 13            [12] 3853 	add	a,#0x13
      00132E FC               [12] 3854 	mov	r4,a
      00132F 7B 00            [12] 3855 	mov	r3,#0x00
      001331 7A 40            [12] 3856 	mov	r2,#0x40
      001333 E5*00            [12] 3857 	mov	a,_bp
      001335 24 0C            [12] 3858 	add	a,#0x0c
      001337 F8               [12] 3859 	mov	r0,a
      001338 74 09            [12] 3860 	mov	a,#0x09
      00133A 26               [12] 3861 	add	a,@r0
      00133B FD               [12] 3862 	mov	r5,a
      00133C E4               [12] 3863 	clr	a
      00133D 08               [12] 3864 	inc	r0
      00133E 36               [12] 3865 	addc	a,@r0
      00133F FE               [12] 3866 	mov	r6,a
      001340 08               [12] 3867 	inc	r0
      001341 86 07            [24] 3868 	mov	ar7,@r0
      001343 C0 05            [24] 3869 	push	ar5
      001345 C0 04            [24] 3870 	push	ar4
      001347 C0 03            [24] 3871 	push	ar3
      001349 C0 02            [24] 3872 	push	ar2
      00134B 8D 82            [24] 3873 	mov	dpl,r5
      00134D 8E 83            [24] 3874 	mov	dph,r6
      00134F 8F F0            [24] 3875 	mov	b,r7
      001351 12r00r00         [24] 3876 	lcall	_stack_pop
      001354 AE 82            [24] 3877 	mov	r6,dpl
      001356 AF 83            [24] 3878 	mov	r7,dph
      001358 15 81            [12] 3879 	dec	sp
      00135A 15 81            [12] 3880 	dec	sp
      00135C 15 81            [12] 3881 	dec	sp
      00135E D0 05            [24] 3882 	pop	ar5
      001360 EE               [12] 3883 	mov	a,r6
      001361 4F               [12] 3884 	orl	a,r7
      001362 D0 07            [24] 3885 	pop	ar7
      001364 D0 06            [24] 3886 	pop	ar6
      001366 D0 05            [24] 3887 	pop	ar5
      001368 70 58            [24] 3888 	jnz	00165$
                                   3889 ;	calc.c:231: (void)stack_push(&ctx->s, d0);
      00136A E5*00            [12] 3890 	mov	a,_bp
      00136C 24 0C            [12] 3891 	add	a,#0x0c
      00136E F8               [12] 3892 	mov	r0,a
      00136F 74 09            [12] 3893 	mov	a,#0x09
      001371 26               [12] 3894 	add	a,@r0
      001372 FA               [12] 3895 	mov	r2,a
      001373 E4               [12] 3896 	clr	a
      001374 08               [12] 3897 	inc	r0
      001375 36               [12] 3898 	addc	a,@r0
      001376 FB               [12] 3899 	mov	r3,a
      001377 08               [12] 3900 	inc	r0
      001378 86 04            [24] 3901 	mov	ar4,@r0
      00137A E5*00            [12] 3902 	mov	a,_bp
      00137C 24 0F            [12] 3903 	add	a,#0x0f
      00137E F8               [12] 3904 	mov	r0,a
      00137F E6               [12] 3905 	mov	a,@r0
      001380 C0 E0            [24] 3906 	push	acc
      001382 08               [12] 3907 	inc	r0
      001383 E6               [12] 3908 	mov	a,@r0
      001384 C0 E0            [24] 3909 	push	acc
      001386 08               [12] 3910 	inc	r0
      001387 E6               [12] 3911 	mov	a,@r0
      001388 C0 E0            [24] 3912 	push	acc
      00138A 08               [12] 3913 	inc	r0
      00138B E6               [12] 3914 	mov	a,@r0
      00138C C0 E0            [24] 3915 	push	acc
      00138E 8A 82            [24] 3916 	mov	dpl,r2
      001390 8B 83            [24] 3917 	mov	dph,r3
      001392 8C F0            [24] 3918 	mov	b,r4
      001394 12r00r00         [24] 3919 	lcall	_stack_push
      001397 E5 81            [12] 3920 	mov	a,sp
      001399 24 FC            [12] 3921 	add	a,#0xfc
      00139B F5 81            [12] 3922 	mov	sp,a
                                   3923 ;	calc.c:232: printstr("\r\nstack underflow\r\n");
      00139D 7Fr38            [12] 3924 	mov	r7,#___str_8
      00139F 7Es00            [12] 3925 	mov	r6,#(___str_8 >> 8)
      0013A1 7D 80            [12] 3926 	mov	r5,#0x80
                                   3927 ;	calc.c:50: return;
      0013A3                       3928 00372$:
                                   3929 ;	calc.c:48: for (; *s; s++) putchar(*s);
      0013A3 8F 82            [24] 3930 	mov	dpl,r7
      0013A5 8E 83            [24] 3931 	mov	dph,r6
      0013A7 8D F0            [24] 3932 	mov	b,r5
      0013A9 12r00r00         [24] 3933 	lcall	__gptrget
      0013AC FC               [12] 3934 	mov	r4,a
      0013AD 70 03            [24] 3935 	jnz	01084$
      0013AF 02r1DrAE         [24] 3936 	ljmp	00217$
      0013B2                       3937 01084$:
      0013B2 7B 00            [12] 3938 	mov	r3,#0x00
      0013B4 8C 82            [24] 3939 	mov	dpl,r4
      0013B6 8B 83            [24] 3940 	mov	dph,r3
      0013B8 12r00r00         [24] 3941 	lcall	_putchar
      0013BB 0F               [12] 3942 	inc	r7
                                   3943 ;	calc.c:232: printstr("\r\nstack underflow\r\n");
      0013BC BF 00 E4         [24] 3944 	cjne	r7,#0x00,00372$
      0013BF 0E               [12] 3945 	inc	r6
      0013C0 80 E1            [24] 3946 	sjmp	00372$
      0013C2                       3947 00165$:
                                   3948 ;	calc.c:233: } else if (!d0) {
      0013C2 E5*00            [12] 3949 	mov	a,_bp
      0013C4 24 0F            [12] 3950 	add	a,#0x0f
      0013C6 F8               [12] 3951 	mov	r0,a
      0013C7 E6               [12] 3952 	mov	a,@r0
      0013C8 08               [12] 3953 	inc	r0
      0013C9 46               [12] 3954 	orl	a,@r0
      0013CA 08               [12] 3955 	inc	r0
      0013CB 46               [12] 3956 	orl	a,@r0
      0013CC 08               [12] 3957 	inc	r0
      0013CD 46               [12] 3958 	orl	a,@r0
      0013CE 60 03            [24] 3959 	jz	01086$
      0013D0 02r14r5E         [24] 3960 	ljmp	00162$
      0013D3                       3961 01086$:
                                   3962 ;	calc.c:234: (void)stack_push(&ctx->s, d1);
      0013D3 E5*00            [12] 3963 	mov	a,_bp
      0013D5 24 0C            [12] 3964 	add	a,#0x0c
      0013D7 F8               [12] 3965 	mov	r0,a
      0013D8 74 09            [12] 3966 	mov	a,#0x09
      0013DA 26               [12] 3967 	add	a,@r0
      0013DB FA               [12] 3968 	mov	r2,a
      0013DC E4               [12] 3969 	clr	a
      0013DD 08               [12] 3970 	inc	r0
      0013DE 36               [12] 3971 	addc	a,@r0
      0013DF FB               [12] 3972 	mov	r3,a
      0013E0 08               [12] 3973 	inc	r0
      0013E1 86 04            [24] 3974 	mov	ar4,@r0
      0013E3 E5*00            [12] 3975 	mov	a,_bp
      0013E5 24 13            [12] 3976 	add	a,#0x13
      0013E7 F8               [12] 3977 	mov	r0,a
      0013E8 E6               [12] 3978 	mov	a,@r0
      0013E9 C0 E0            [24] 3979 	push	acc
      0013EB 08               [12] 3980 	inc	r0
      0013EC E6               [12] 3981 	mov	a,@r0
      0013ED C0 E0            [24] 3982 	push	acc
      0013EF 08               [12] 3983 	inc	r0
      0013F0 E6               [12] 3984 	mov	a,@r0
      0013F1 C0 E0            [24] 3985 	push	acc
      0013F3 08               [12] 3986 	inc	r0
      0013F4 E6               [12] 3987 	mov	a,@r0
      0013F5 C0 E0            [24] 3988 	push	acc
      0013F7 8A 82            [24] 3989 	mov	dpl,r2
      0013F9 8B 83            [24] 3990 	mov	dph,r3
      0013FB 8C F0            [24] 3991 	mov	b,r4
      0013FD 12r00r00         [24] 3992 	lcall	_stack_push
      001400 E5 81            [12] 3993 	mov	a,sp
      001402 24 FC            [12] 3994 	add	a,#0xfc
      001404 F5 81            [12] 3995 	mov	sp,a
                                   3996 ;	calc.c:235: (void)stack_push(&ctx->s, d0);			
      001406 E5*00            [12] 3997 	mov	a,_bp
      001408 24 0C            [12] 3998 	add	a,#0x0c
      00140A F8               [12] 3999 	mov	r0,a
      00140B 74 09            [12] 4000 	mov	a,#0x09
      00140D 26               [12] 4001 	add	a,@r0
      00140E FA               [12] 4002 	mov	r2,a
      00140F E4               [12] 4003 	clr	a
      001410 08               [12] 4004 	inc	r0
      001411 36               [12] 4005 	addc	a,@r0
      001412 FB               [12] 4006 	mov	r3,a
      001413 08               [12] 4007 	inc	r0
      001414 86 04            [24] 4008 	mov	ar4,@r0
      001416 E5*00            [12] 4009 	mov	a,_bp
      001418 24 0F            [12] 4010 	add	a,#0x0f
      00141A F8               [12] 4011 	mov	r0,a
      00141B E6               [12] 4012 	mov	a,@r0
      00141C C0 E0            [24] 4013 	push	acc
      00141E 08               [12] 4014 	inc	r0
      00141F E6               [12] 4015 	mov	a,@r0
      001420 C0 E0            [24] 4016 	push	acc
      001422 08               [12] 4017 	inc	r0
      001423 E6               [12] 4018 	mov	a,@r0
      001424 C0 E0            [24] 4019 	push	acc
      001426 08               [12] 4020 	inc	r0
      001427 E6               [12] 4021 	mov	a,@r0
      001428 C0 E0            [24] 4022 	push	acc
      00142A 8A 82            [24] 4023 	mov	dpl,r2
      00142C 8B 83            [24] 4024 	mov	dph,r3
      00142E 8C F0            [24] 4025 	mov	b,r4
      001430 12r00r00         [24] 4026 	lcall	_stack_push
      001433 E5 81            [12] 4027 	mov	a,sp
      001435 24 FC            [12] 4028 	add	a,#0xfc
      001437 F5 81            [12] 4029 	mov	sp,a
                                   4030 ;	calc.c:236: printstr("\r\ndivision by zero\r\n");
      001439 7Fr4C            [12] 4031 	mov	r7,#___str_9
      00143B 7Es00            [12] 4032 	mov	r6,#(___str_9 >> 8)
      00143D 7D 80            [12] 4033 	mov	r5,#0x80
                                   4034 ;	calc.c:50: return;
      00143F                       4035 00375$:
                                   4036 ;	calc.c:48: for (; *s; s++) putchar(*s);
      00143F 8F 82            [24] 4037 	mov	dpl,r7
      001441 8E 83            [24] 4038 	mov	dph,r6
      001443 8D F0            [24] 4039 	mov	b,r5
      001445 12r00r00         [24] 4040 	lcall	__gptrget
      001448 FC               [12] 4041 	mov	r4,a
      001449 70 03            [24] 4042 	jnz	01087$
      00144B 02r1DrAE         [24] 4043 	ljmp	00217$
      00144E                       4044 01087$:
      00144E 7B 00            [12] 4045 	mov	r3,#0x00
      001450 8C 82            [24] 4046 	mov	dpl,r4
      001452 8B 83            [24] 4047 	mov	dph,r3
      001454 12r00r00         [24] 4048 	lcall	_putchar
      001457 0F               [12] 4049 	inc	r7
                                   4050 ;	calc.c:236: printstr("\r\ndivision by zero\r\n");
      001458 BF 00 E4         [24] 4051 	cjne	r7,#0x00,00375$
      00145B 0E               [12] 4052 	inc	r6
      00145C 80 E1            [24] 4053 	sjmp	00375$
      00145E                       4054 00162$:
                                   4055 ;	calc.c:238: if (ctx->digit[0] == '%') d1 %= d0;
      00145E 8D 82            [24] 4056 	mov	dpl,r5
      001460 8E 83            [24] 4057 	mov	dph,r6
      001462 8F F0            [24] 4058 	mov	b,r7
      001464 12r00r00         [24] 4059 	lcall	__gptrget
      001467 FD               [12] 4060 	mov	r5,a
      001468 BD 25 45         [24] 4061 	cjne	r5,#0x25,00159$
      00146B E5*00            [12] 4062 	mov	a,_bp
      00146D 24 0F            [12] 4063 	add	a,#0x0f
      00146F F8               [12] 4064 	mov	r0,a
      001470 E6               [12] 4065 	mov	a,@r0
      001471 C0 E0            [24] 4066 	push	acc
      001473 08               [12] 4067 	inc	r0
      001474 E6               [12] 4068 	mov	a,@r0
      001475 C0 E0            [24] 4069 	push	acc
      001477 08               [12] 4070 	inc	r0
      001478 E6               [12] 4071 	mov	a,@r0
      001479 C0 E0            [24] 4072 	push	acc
      00147B 08               [12] 4073 	inc	r0
      00147C E6               [12] 4074 	mov	a,@r0
      00147D C0 E0            [24] 4075 	push	acc
      00147F E5*00            [12] 4076 	mov	a,_bp
      001481 24 13            [12] 4077 	add	a,#0x13
      001483 F8               [12] 4078 	mov	r0,a
      001484 86 82            [24] 4079 	mov	dpl,@r0
      001486 08               [12] 4080 	inc	r0
      001487 86 83            [24] 4081 	mov	dph,@r0
      001489 08               [12] 4082 	inc	r0
      00148A 86 F0            [24] 4083 	mov	b,@r0
      00148C 08               [12] 4084 	inc	r0
      00148D E6               [12] 4085 	mov	a,@r0
      00148E 12r00r00         [24] 4086 	lcall	__modslong
      001491 AC 82            [24] 4087 	mov	r4,dpl
      001493 AD 83            [24] 4088 	mov	r5,dph
      001495 AE F0            [24] 4089 	mov	r6,b
      001497 FF               [12] 4090 	mov	r7,a
      001498 E5 81            [12] 4091 	mov	a,sp
      00149A 24 FC            [12] 4092 	add	a,#0xfc
      00149C F5 81            [12] 4093 	mov	sp,a
      00149E E5*00            [12] 4094 	mov	a,_bp
      0014A0 24 13            [12] 4095 	add	a,#0x13
      0014A2 F8               [12] 4096 	mov	r0,a
      0014A3 A6 04            [24] 4097 	mov	@r0,ar4
      0014A5 08               [12] 4098 	inc	r0
      0014A6 A6 05            [24] 4099 	mov	@r0,ar5
      0014A8 08               [12] 4100 	inc	r0
      0014A9 A6 06            [24] 4101 	mov	@r0,ar6
      0014AB 08               [12] 4102 	inc	r0
      0014AC A6 07            [24] 4103 	mov	@r0,ar7
      0014AE 80 5F            [24] 4104 	sjmp	00160$
      0014B0                       4105 00159$:
                                   4106 ;	calc.c:239: else d1 = (unsigned long)d1 % (unsigned long)d0;
      0014B0 E5*00            [12] 4107 	mov	a,_bp
      0014B2 24 13            [12] 4108 	add	a,#0x13
      0014B4 F8               [12] 4109 	mov	r0,a
      0014B5 E5*00            [12] 4110 	mov	a,_bp
      0014B7 24 08            [12] 4111 	add	a,#0x08
      0014B9 F9               [12] 4112 	mov	r1,a
      0014BA E6               [12] 4113 	mov	a,@r0
      0014BB F7               [12] 4114 	mov	@r1,a
      0014BC 08               [12] 4115 	inc	r0
      0014BD 09               [12] 4116 	inc	r1
      0014BE E6               [12] 4117 	mov	a,@r0
      0014BF F7               [12] 4118 	mov	@r1,a
      0014C0 08               [12] 4119 	inc	r0
      0014C1 09               [12] 4120 	inc	r1
      0014C2 E6               [12] 4121 	mov	a,@r0
      0014C3 F7               [12] 4122 	mov	@r1,a
      0014C4 08               [12] 4123 	inc	r0
      0014C5 09               [12] 4124 	inc	r1
      0014C6 E6               [12] 4125 	mov	a,@r0
      0014C7 F7               [12] 4126 	mov	@r1,a
      0014C8 E5*00            [12] 4127 	mov	a,_bp
      0014CA 24 0F            [12] 4128 	add	a,#0x0f
      0014CC F8               [12] 4129 	mov	r0,a
      0014CD 86 02            [24] 4130 	mov	ar2,@r0
      0014CF 08               [12] 4131 	inc	r0
      0014D0 86 03            [24] 4132 	mov	ar3,@r0
      0014D2 08               [12] 4133 	inc	r0
      0014D3 86 06            [24] 4134 	mov	ar6,@r0
      0014D5 08               [12] 4135 	inc	r0
      0014D6 86 07            [24] 4136 	mov	ar7,@r0
      0014D8 C0 02            [24] 4137 	push	ar2
      0014DA C0 03            [24] 4138 	push	ar3
      0014DC C0 06            [24] 4139 	push	ar6
      0014DE C0 07            [24] 4140 	push	ar7
      0014E0 E5*00            [12] 4141 	mov	a,_bp
      0014E2 24 08            [12] 4142 	add	a,#0x08
      0014E4 F8               [12] 4143 	mov	r0,a
      0014E5 86 82            [24] 4144 	mov	dpl,@r0
      0014E7 08               [12] 4145 	inc	r0
      0014E8 86 83            [24] 4146 	mov	dph,@r0
      0014EA 08               [12] 4147 	inc	r0
      0014EB 86 F0            [24] 4148 	mov	b,@r0
      0014ED 08               [12] 4149 	inc	r0
      0014EE E6               [12] 4150 	mov	a,@r0
      0014EF 12r00r00         [24] 4151 	lcall	__modulong
      0014F2 AC 82            [24] 4152 	mov	r4,dpl
      0014F4 AD 83            [24] 4153 	mov	r5,dph
      0014F6 AE F0            [24] 4154 	mov	r6,b
      0014F8 FF               [12] 4155 	mov	r7,a
      0014F9 E5 81            [12] 4156 	mov	a,sp
      0014FB 24 FC            [12] 4157 	add	a,#0xfc
      0014FD F5 81            [12] 4158 	mov	sp,a
      0014FF E5*00            [12] 4159 	mov	a,_bp
      001501 24 13            [12] 4160 	add	a,#0x13
      001503 F8               [12] 4161 	mov	r0,a
      001504 A6 04            [24] 4162 	mov	@r0,ar4
      001506 08               [12] 4163 	inc	r0
      001507 A6 05            [24] 4164 	mov	@r0,ar5
      001509 08               [12] 4165 	inc	r0
      00150A A6 06            [24] 4166 	mov	@r0,ar6
      00150C 08               [12] 4167 	inc	r0
      00150D A6 07            [24] 4168 	mov	@r0,ar7
      00150F                       4169 00160$:
                                   4170 ;	calc.c:240: (void)stack_push(&ctx->s, d1);
      00150F E5*00            [12] 4171 	mov	a,_bp
      001511 24 0C            [12] 4172 	add	a,#0x0c
      001513 F8               [12] 4173 	mov	r0,a
      001514 74 09            [12] 4174 	mov	a,#0x09
      001516 26               [12] 4175 	add	a,@r0
      001517 FD               [12] 4176 	mov	r5,a
      001518 E4               [12] 4177 	clr	a
      001519 08               [12] 4178 	inc	r0
      00151A 36               [12] 4179 	addc	a,@r0
      00151B FE               [12] 4180 	mov	r6,a
      00151C 08               [12] 4181 	inc	r0
      00151D 86 07            [24] 4182 	mov	ar7,@r0
      00151F E5*00            [12] 4183 	mov	a,_bp
      001521 24 13            [12] 4184 	add	a,#0x13
      001523 F8               [12] 4185 	mov	r0,a
      001524 E6               [12] 4186 	mov	a,@r0
      001525 C0 E0            [24] 4187 	push	acc
      001527 08               [12] 4188 	inc	r0
      001528 E6               [12] 4189 	mov	a,@r0
      001529 C0 E0            [24] 4190 	push	acc
      00152B 08               [12] 4191 	inc	r0
      00152C E6               [12] 4192 	mov	a,@r0
      00152D C0 E0            [24] 4193 	push	acc
      00152F 08               [12] 4194 	inc	r0
      001530 E6               [12] 4195 	mov	a,@r0
      001531 C0 E0            [24] 4196 	push	acc
      001533 8D 82            [24] 4197 	mov	dpl,r5
      001535 8E 83            [24] 4198 	mov	dph,r6
      001537 8F F0            [24] 4199 	mov	b,r7
      001539 12r00r00         [24] 4200 	lcall	_stack_push
      00153C E5 81            [12] 4201 	mov	a,sp
      00153E 24 FC            [12] 4202 	add	a,#0xfc
      001540 F5 81            [12] 4203 	mov	sp,a
                                   4204 ;	calc.c:242: break;
      001542 02r1DrAE         [24] 4205 	ljmp	00217$
                                   4206 ;	calc.c:243: case '&':
      001545                       4207 00170$:
                                   4208 ;	calc.c:244: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      001545 E5*00            [12] 4209 	mov	a,_bp
      001547 24 0F            [12] 4210 	add	a,#0x0f
      001549 FF               [12] 4211 	mov	r7,a
      00154A 7E 00            [12] 4212 	mov	r6,#0x00
      00154C 7D 40            [12] 4213 	mov	r5,#0x40
      00154E E5*00            [12] 4214 	mov	a,_bp
      001550 24 0C            [12] 4215 	add	a,#0x0c
      001552 F8               [12] 4216 	mov	r0,a
      001553 74 09            [12] 4217 	mov	a,#0x09
      001555 26               [12] 4218 	add	a,@r0
      001556 FA               [12] 4219 	mov	r2,a
      001557 E4               [12] 4220 	clr	a
      001558 08               [12] 4221 	inc	r0
      001559 36               [12] 4222 	addc	a,@r0
      00155A FB               [12] 4223 	mov	r3,a
      00155B 08               [12] 4224 	inc	r0
      00155C 86 04            [24] 4225 	mov	ar4,@r0
      00155E C0 07            [24] 4226 	push	ar7
      001560 C0 06            [24] 4227 	push	ar6
      001562 C0 05            [24] 4228 	push	ar5
      001564 8A 82            [24] 4229 	mov	dpl,r2
      001566 8B 83            [24] 4230 	mov	dph,r3
      001568 8C F0            [24] 4231 	mov	b,r4
      00156A 12r00r00         [24] 4232 	lcall	_stack_pop
      00156D AE 82            [24] 4233 	mov	r6,dpl
      00156F AF 83            [24] 4234 	mov	r7,dph
      001571 15 81            [12] 4235 	dec	sp
      001573 15 81            [12] 4236 	dec	sp
      001575 15 81            [12] 4237 	dec	sp
      001577 EE               [12] 4238 	mov	a,r6
      001578 4F               [12] 4239 	orl	a,r7
      001579 70 25            [24] 4240 	jnz	00175$
      00157B 7Dr38            [12] 4241 	mov	r5,#___str_8
      00157D 7Es00            [12] 4242 	mov	r6,#(___str_8 >> 8)
      00157F 7F 80            [12] 4243 	mov	r7,#0x80
                                   4244 ;	calc.c:50: return;
      001581                       4245 00378$:
                                   4246 ;	calc.c:48: for (; *s; s++) putchar(*s);
      001581 8D 82            [24] 4247 	mov	dpl,r5
      001583 8E 83            [24] 4248 	mov	dph,r6
      001585 8F F0            [24] 4249 	mov	b,r7
      001587 12r00r00         [24] 4250 	lcall	__gptrget
      00158A FC               [12] 4251 	mov	r4,a
      00158B 70 03            [24] 4252 	jnz	01092$
      00158D 02r1DrAE         [24] 4253 	ljmp	00217$
      001590                       4254 01092$:
      001590 7B 00            [12] 4255 	mov	r3,#0x00
      001592 8C 82            [24] 4256 	mov	dpl,r4
      001594 8B 83            [24] 4257 	mov	dph,r3
      001596 12r00r00         [24] 4258 	lcall	_putchar
      001599 0D               [12] 4259 	inc	r5
                                   4260 ;	calc.c:244: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      00159A BD 00 E4         [24] 4261 	cjne	r5,#0x00,00378$
      00159D 0E               [12] 4262 	inc	r6
      00159E 80 E1            [24] 4263 	sjmp	00378$
      0015A0                       4264 00175$:
                                   4265 ;	calc.c:245: else if (!stack_pop(&ctx->s, &d1)) {
      0015A0 E5*00            [12] 4266 	mov	a,_bp
      0015A2 24 13            [12] 4267 	add	a,#0x13
      0015A4 FF               [12] 4268 	mov	r7,a
      0015A5 7E 00            [12] 4269 	mov	r6,#0x00
      0015A7 7D 40            [12] 4270 	mov	r5,#0x40
      0015A9 E5*00            [12] 4271 	mov	a,_bp
      0015AB 24 0C            [12] 4272 	add	a,#0x0c
      0015AD F8               [12] 4273 	mov	r0,a
      0015AE 74 09            [12] 4274 	mov	a,#0x09
      0015B0 26               [12] 4275 	add	a,@r0
      0015B1 FA               [12] 4276 	mov	r2,a
      0015B2 E4               [12] 4277 	clr	a
      0015B3 08               [12] 4278 	inc	r0
      0015B4 36               [12] 4279 	addc	a,@r0
      0015B5 FB               [12] 4280 	mov	r3,a
      0015B6 08               [12] 4281 	inc	r0
      0015B7 86 04            [24] 4282 	mov	ar4,@r0
      0015B9 C0 07            [24] 4283 	push	ar7
      0015BB C0 06            [24] 4284 	push	ar6
      0015BD C0 05            [24] 4285 	push	ar5
      0015BF 8A 82            [24] 4286 	mov	dpl,r2
      0015C1 8B 83            [24] 4287 	mov	dph,r3
      0015C3 8C F0            [24] 4288 	mov	b,r4
      0015C5 12r00r00         [24] 4289 	lcall	_stack_pop
      0015C8 AE 82            [24] 4290 	mov	r6,dpl
      0015CA AF 83            [24] 4291 	mov	r7,dph
      0015CC 15 81            [12] 4292 	dec	sp
      0015CE 15 81            [12] 4293 	dec	sp
      0015D0 15 81            [12] 4294 	dec	sp
      0015D2 EE               [12] 4295 	mov	a,r6
      0015D3 4F               [12] 4296 	orl	a,r7
      0015D4 70 58            [24] 4297 	jnz	00172$
                                   4298 ;	calc.c:246: (void)stack_push(&ctx->s, d0);
      0015D6 E5*00            [12] 4299 	mov	a,_bp
      0015D8 24 0C            [12] 4300 	add	a,#0x0c
      0015DA F8               [12] 4301 	mov	r0,a
      0015DB 74 09            [12] 4302 	mov	a,#0x09
      0015DD 26               [12] 4303 	add	a,@r0
      0015DE FD               [12] 4304 	mov	r5,a
      0015DF E4               [12] 4305 	clr	a
      0015E0 08               [12] 4306 	inc	r0
      0015E1 36               [12] 4307 	addc	a,@r0
      0015E2 FE               [12] 4308 	mov	r6,a
      0015E3 08               [12] 4309 	inc	r0
      0015E4 86 07            [24] 4310 	mov	ar7,@r0
      0015E6 E5*00            [12] 4311 	mov	a,_bp
      0015E8 24 0F            [12] 4312 	add	a,#0x0f
      0015EA F8               [12] 4313 	mov	r0,a
      0015EB E6               [12] 4314 	mov	a,@r0
      0015EC C0 E0            [24] 4315 	push	acc
      0015EE 08               [12] 4316 	inc	r0
      0015EF E6               [12] 4317 	mov	a,@r0
      0015F0 C0 E0            [24] 4318 	push	acc
      0015F2 08               [12] 4319 	inc	r0
      0015F3 E6               [12] 4320 	mov	a,@r0
      0015F4 C0 E0            [24] 4321 	push	acc
      0015F6 08               [12] 4322 	inc	r0
      0015F7 E6               [12] 4323 	mov	a,@r0
      0015F8 C0 E0            [24] 4324 	push	acc
      0015FA 8D 82            [24] 4325 	mov	dpl,r5
      0015FC 8E 83            [24] 4326 	mov	dph,r6
      0015FE 8F F0            [24] 4327 	mov	b,r7
      001600 12r00r00         [24] 4328 	lcall	_stack_push
      001603 E5 81            [12] 4329 	mov	a,sp
      001605 24 FC            [12] 4330 	add	a,#0xfc
      001607 F5 81            [12] 4331 	mov	sp,a
                                   4332 ;	calc.c:247: printstr("\r\nstack underflow\r\n");
      001609 7Dr38            [12] 4333 	mov	r5,#___str_8
      00160B 7Es00            [12] 4334 	mov	r6,#(___str_8 >> 8)
      00160D 7F 80            [12] 4335 	mov	r7,#0x80
                                   4336 ;	calc.c:50: return;
      00160F                       4337 00381$:
                                   4338 ;	calc.c:48: for (; *s; s++) putchar(*s);
      00160F 8D 82            [24] 4339 	mov	dpl,r5
      001611 8E 83            [24] 4340 	mov	dph,r6
      001613 8F F0            [24] 4341 	mov	b,r7
      001615 12r00r00         [24] 4342 	lcall	__gptrget
      001618 FC               [12] 4343 	mov	r4,a
      001619 70 03            [24] 4344 	jnz	01095$
      00161B 02r1DrAE         [24] 4345 	ljmp	00217$
      00161E                       4346 01095$:
      00161E 7B 00            [12] 4347 	mov	r3,#0x00
      001620 8C 82            [24] 4348 	mov	dpl,r4
      001622 8B 83            [24] 4349 	mov	dph,r3
      001624 12r00r00         [24] 4350 	lcall	_putchar
      001627 0D               [12] 4351 	inc	r5
                                   4352 ;	calc.c:247: printstr("\r\nstack underflow\r\n");
      001628 BD 00 E4         [24] 4353 	cjne	r5,#0x00,00381$
      00162B 0E               [12] 4354 	inc	r6
      00162C 80 E1            [24] 4355 	sjmp	00381$
      00162E                       4356 00172$:
                                   4357 ;	calc.c:249: d1 &= d0;
      00162E E5*00            [12] 4358 	mov	a,_bp
      001630 24 13            [12] 4359 	add	a,#0x13
      001632 F8               [12] 4360 	mov	r0,a
      001633 E5*00            [12] 4361 	mov	a,_bp
      001635 24 0F            [12] 4362 	add	a,#0x0f
      001637 F9               [12] 4363 	mov	r1,a
      001638 E7               [12] 4364 	mov	a,@r1
      001639 56               [12] 4365 	anl	a,@r0
      00163A F6               [12] 4366 	mov	@r0,a
      00163B 09               [12] 4367 	inc	r1
      00163C E7               [12] 4368 	mov	a,@r1
      00163D 08               [12] 4369 	inc	r0
      00163E 56               [12] 4370 	anl	a,@r0
      00163F F6               [12] 4371 	mov	@r0,a
      001640 09               [12] 4372 	inc	r1
      001641 E7               [12] 4373 	mov	a,@r1
      001642 08               [12] 4374 	inc	r0
      001643 56               [12] 4375 	anl	a,@r0
      001644 F6               [12] 4376 	mov	@r0,a
      001645 09               [12] 4377 	inc	r1
      001646 E7               [12] 4378 	mov	a,@r1
      001647 08               [12] 4379 	inc	r0
      001648 56               [12] 4380 	anl	a,@r0
      001649 F6               [12] 4381 	mov	@r0,a
                                   4382 ;	calc.c:250: (void)stack_push(&ctx->s, d1);
      00164A E5*00            [12] 4383 	mov	a,_bp
      00164C 24 0C            [12] 4384 	add	a,#0x0c
      00164E F8               [12] 4385 	mov	r0,a
      00164F 74 09            [12] 4386 	mov	a,#0x09
      001651 26               [12] 4387 	add	a,@r0
      001652 FD               [12] 4388 	mov	r5,a
      001653 E4               [12] 4389 	clr	a
      001654 08               [12] 4390 	inc	r0
      001655 36               [12] 4391 	addc	a,@r0
      001656 FE               [12] 4392 	mov	r6,a
      001657 08               [12] 4393 	inc	r0
      001658 86 07            [24] 4394 	mov	ar7,@r0
      00165A E5*00            [12] 4395 	mov	a,_bp
      00165C 24 13            [12] 4396 	add	a,#0x13
      00165E F8               [12] 4397 	mov	r0,a
      00165F E6               [12] 4398 	mov	a,@r0
      001660 C0 E0            [24] 4399 	push	acc
      001662 08               [12] 4400 	inc	r0
      001663 E6               [12] 4401 	mov	a,@r0
      001664 C0 E0            [24] 4402 	push	acc
      001666 08               [12] 4403 	inc	r0
      001667 E6               [12] 4404 	mov	a,@r0
      001668 C0 E0            [24] 4405 	push	acc
      00166A 08               [12] 4406 	inc	r0
      00166B E6               [12] 4407 	mov	a,@r0
      00166C C0 E0            [24] 4408 	push	acc
      00166E 8D 82            [24] 4409 	mov	dpl,r5
      001670 8E 83            [24] 4410 	mov	dph,r6
      001672 8F F0            [24] 4411 	mov	b,r7
      001674 12r00r00         [24] 4412 	lcall	_stack_push
      001677 E5 81            [12] 4413 	mov	a,sp
      001679 24 FC            [12] 4414 	add	a,#0xfc
      00167B F5 81            [12] 4415 	mov	sp,a
                                   4416 ;	calc.c:252: break;
      00167D 02r1DrAE         [24] 4417 	ljmp	00217$
                                   4418 ;	calc.c:253: case '|':
      001680                       4419 00177$:
                                   4420 ;	calc.c:254: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      001680 E5*00            [12] 4421 	mov	a,_bp
      001682 24 0F            [12] 4422 	add	a,#0x0f
      001684 FF               [12] 4423 	mov	r7,a
      001685 7E 00            [12] 4424 	mov	r6,#0x00
      001687 7D 40            [12] 4425 	mov	r5,#0x40
      001689 E5*00            [12] 4426 	mov	a,_bp
      00168B 24 0C            [12] 4427 	add	a,#0x0c
      00168D F8               [12] 4428 	mov	r0,a
      00168E 74 09            [12] 4429 	mov	a,#0x09
      001690 26               [12] 4430 	add	a,@r0
      001691 FA               [12] 4431 	mov	r2,a
      001692 E4               [12] 4432 	clr	a
      001693 08               [12] 4433 	inc	r0
      001694 36               [12] 4434 	addc	a,@r0
      001695 FB               [12] 4435 	mov	r3,a
      001696 08               [12] 4436 	inc	r0
      001697 86 04            [24] 4437 	mov	ar4,@r0
      001699 C0 07            [24] 4438 	push	ar7
      00169B C0 06            [24] 4439 	push	ar6
      00169D C0 05            [24] 4440 	push	ar5
      00169F 8A 82            [24] 4441 	mov	dpl,r2
      0016A1 8B 83            [24] 4442 	mov	dph,r3
      0016A3 8C F0            [24] 4443 	mov	b,r4
      0016A5 12r00r00         [24] 4444 	lcall	_stack_pop
      0016A8 AE 82            [24] 4445 	mov	r6,dpl
      0016AA AF 83            [24] 4446 	mov	r7,dph
      0016AC 15 81            [12] 4447 	dec	sp
      0016AE 15 81            [12] 4448 	dec	sp
      0016B0 15 81            [12] 4449 	dec	sp
      0016B2 EE               [12] 4450 	mov	a,r6
      0016B3 4F               [12] 4451 	orl	a,r7
      0016B4 70 25            [24] 4452 	jnz	00182$
      0016B6 7Dr38            [12] 4453 	mov	r5,#___str_8
      0016B8 7Es00            [12] 4454 	mov	r6,#(___str_8 >> 8)
      0016BA 7F 80            [12] 4455 	mov	r7,#0x80
                                   4456 ;	calc.c:50: return;
      0016BC                       4457 00384$:
                                   4458 ;	calc.c:48: for (; *s; s++) putchar(*s);
      0016BC 8D 82            [24] 4459 	mov	dpl,r5
      0016BE 8E 83            [24] 4460 	mov	dph,r6
      0016C0 8F F0            [24] 4461 	mov	b,r7
      0016C2 12r00r00         [24] 4462 	lcall	__gptrget
      0016C5 FC               [12] 4463 	mov	r4,a
      0016C6 70 03            [24] 4464 	jnz	01098$
      0016C8 02r1DrAE         [24] 4465 	ljmp	00217$
      0016CB                       4466 01098$:
      0016CB 7B 00            [12] 4467 	mov	r3,#0x00
      0016CD 8C 82            [24] 4468 	mov	dpl,r4
      0016CF 8B 83            [24] 4469 	mov	dph,r3
      0016D1 12r00r00         [24] 4470 	lcall	_putchar
      0016D4 0D               [12] 4471 	inc	r5
                                   4472 ;	calc.c:254: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      0016D5 BD 00 E4         [24] 4473 	cjne	r5,#0x00,00384$
      0016D8 0E               [12] 4474 	inc	r6
      0016D9 80 E1            [24] 4475 	sjmp	00384$
      0016DB                       4476 00182$:
                                   4477 ;	calc.c:255: else if (!stack_pop(&ctx->s, &d1)) {
      0016DB E5*00            [12] 4478 	mov	a,_bp
      0016DD 24 13            [12] 4479 	add	a,#0x13
      0016DF FF               [12] 4480 	mov	r7,a
      0016E0 7E 00            [12] 4481 	mov	r6,#0x00
      0016E2 7D 40            [12] 4482 	mov	r5,#0x40
      0016E4 E5*00            [12] 4483 	mov	a,_bp
      0016E6 24 0C            [12] 4484 	add	a,#0x0c
      0016E8 F8               [12] 4485 	mov	r0,a
      0016E9 74 09            [12] 4486 	mov	a,#0x09
      0016EB 26               [12] 4487 	add	a,@r0
      0016EC FA               [12] 4488 	mov	r2,a
      0016ED E4               [12] 4489 	clr	a
      0016EE 08               [12] 4490 	inc	r0
      0016EF 36               [12] 4491 	addc	a,@r0
      0016F0 FB               [12] 4492 	mov	r3,a
      0016F1 08               [12] 4493 	inc	r0
      0016F2 86 04            [24] 4494 	mov	ar4,@r0
      0016F4 C0 07            [24] 4495 	push	ar7
      0016F6 C0 06            [24] 4496 	push	ar6
      0016F8 C0 05            [24] 4497 	push	ar5
      0016FA 8A 82            [24] 4498 	mov	dpl,r2
      0016FC 8B 83            [24] 4499 	mov	dph,r3
      0016FE 8C F0            [24] 4500 	mov	b,r4
      001700 12r00r00         [24] 4501 	lcall	_stack_pop
      001703 AE 82            [24] 4502 	mov	r6,dpl
      001705 AF 83            [24] 4503 	mov	r7,dph
      001707 15 81            [12] 4504 	dec	sp
      001709 15 81            [12] 4505 	dec	sp
      00170B 15 81            [12] 4506 	dec	sp
      00170D EE               [12] 4507 	mov	a,r6
      00170E 4F               [12] 4508 	orl	a,r7
      00170F 70 58            [24] 4509 	jnz	00179$
                                   4510 ;	calc.c:256: (void)stack_push(&ctx->s, d0);
      001711 E5*00            [12] 4511 	mov	a,_bp
      001713 24 0C            [12] 4512 	add	a,#0x0c
      001715 F8               [12] 4513 	mov	r0,a
      001716 74 09            [12] 4514 	mov	a,#0x09
      001718 26               [12] 4515 	add	a,@r0
      001719 FD               [12] 4516 	mov	r5,a
      00171A E4               [12] 4517 	clr	a
      00171B 08               [12] 4518 	inc	r0
      00171C 36               [12] 4519 	addc	a,@r0
      00171D FE               [12] 4520 	mov	r6,a
      00171E 08               [12] 4521 	inc	r0
      00171F 86 07            [24] 4522 	mov	ar7,@r0
      001721 E5*00            [12] 4523 	mov	a,_bp
      001723 24 0F            [12] 4524 	add	a,#0x0f
      001725 F8               [12] 4525 	mov	r0,a
      001726 E6               [12] 4526 	mov	a,@r0
      001727 C0 E0            [24] 4527 	push	acc
      001729 08               [12] 4528 	inc	r0
      00172A E6               [12] 4529 	mov	a,@r0
      00172B C0 E0            [24] 4530 	push	acc
      00172D 08               [12] 4531 	inc	r0
      00172E E6               [12] 4532 	mov	a,@r0
      00172F C0 E0            [24] 4533 	push	acc
      001731 08               [12] 4534 	inc	r0
      001732 E6               [12] 4535 	mov	a,@r0
      001733 C0 E0            [24] 4536 	push	acc
      001735 8D 82            [24] 4537 	mov	dpl,r5
      001737 8E 83            [24] 4538 	mov	dph,r6
      001739 8F F0            [24] 4539 	mov	b,r7
      00173B 12r00r00         [24] 4540 	lcall	_stack_push
      00173E E5 81            [12] 4541 	mov	a,sp
      001740 24 FC            [12] 4542 	add	a,#0xfc
      001742 F5 81            [12] 4543 	mov	sp,a
                                   4544 ;	calc.c:257: printstr("\r\nstack underflow\r\n");
      001744 7Dr38            [12] 4545 	mov	r5,#___str_8
      001746 7Es00            [12] 4546 	mov	r6,#(___str_8 >> 8)
      001748 7F 80            [12] 4547 	mov	r7,#0x80
                                   4548 ;	calc.c:50: return;
      00174A                       4549 00387$:
                                   4550 ;	calc.c:48: for (; *s; s++) putchar(*s);
      00174A 8D 82            [24] 4551 	mov	dpl,r5
      00174C 8E 83            [24] 4552 	mov	dph,r6
      00174E 8F F0            [24] 4553 	mov	b,r7
      001750 12r00r00         [24] 4554 	lcall	__gptrget
      001753 FC               [12] 4555 	mov	r4,a
      001754 70 03            [24] 4556 	jnz	01101$
      001756 02r1DrAE         [24] 4557 	ljmp	00217$
      001759                       4558 01101$:
      001759 7B 00            [12] 4559 	mov	r3,#0x00
      00175B 8C 82            [24] 4560 	mov	dpl,r4
      00175D 8B 83            [24] 4561 	mov	dph,r3
      00175F 12r00r00         [24] 4562 	lcall	_putchar
      001762 0D               [12] 4563 	inc	r5
                                   4564 ;	calc.c:257: printstr("\r\nstack underflow\r\n");
      001763 BD 00 E4         [24] 4565 	cjne	r5,#0x00,00387$
      001766 0E               [12] 4566 	inc	r6
      001767 80 E1            [24] 4567 	sjmp	00387$
      001769                       4568 00179$:
                                   4569 ;	calc.c:259: d1 |= d0;
      001769 E5*00            [12] 4570 	mov	a,_bp
      00176B 24 13            [12] 4571 	add	a,#0x13
      00176D F8               [12] 4572 	mov	r0,a
      00176E E5*00            [12] 4573 	mov	a,_bp
      001770 24 0F            [12] 4574 	add	a,#0x0f
      001772 F9               [12] 4575 	mov	r1,a
      001773 E7               [12] 4576 	mov	a,@r1
      001774 46               [12] 4577 	orl	a,@r0
      001775 F6               [12] 4578 	mov	@r0,a
      001776 09               [12] 4579 	inc	r1
      001777 E7               [12] 4580 	mov	a,@r1
      001778 08               [12] 4581 	inc	r0
      001779 46               [12] 4582 	orl	a,@r0
      00177A F6               [12] 4583 	mov	@r0,a
      00177B 09               [12] 4584 	inc	r1
      00177C E7               [12] 4585 	mov	a,@r1
      00177D 08               [12] 4586 	inc	r0
      00177E 46               [12] 4587 	orl	a,@r0
      00177F F6               [12] 4588 	mov	@r0,a
      001780 09               [12] 4589 	inc	r1
      001781 E7               [12] 4590 	mov	a,@r1
      001782 08               [12] 4591 	inc	r0
      001783 46               [12] 4592 	orl	a,@r0
      001784 F6               [12] 4593 	mov	@r0,a
                                   4594 ;	calc.c:260: (void)stack_push(&ctx->s, d1);
      001785 E5*00            [12] 4595 	mov	a,_bp
      001787 24 0C            [12] 4596 	add	a,#0x0c
      001789 F8               [12] 4597 	mov	r0,a
      00178A 74 09            [12] 4598 	mov	a,#0x09
      00178C 26               [12] 4599 	add	a,@r0
      00178D FD               [12] 4600 	mov	r5,a
      00178E E4               [12] 4601 	clr	a
      00178F 08               [12] 4602 	inc	r0
      001790 36               [12] 4603 	addc	a,@r0
      001791 FE               [12] 4604 	mov	r6,a
      001792 08               [12] 4605 	inc	r0
      001793 86 07            [24] 4606 	mov	ar7,@r0
      001795 E5*00            [12] 4607 	mov	a,_bp
      001797 24 13            [12] 4608 	add	a,#0x13
      001799 F8               [12] 4609 	mov	r0,a
      00179A E6               [12] 4610 	mov	a,@r0
      00179B C0 E0            [24] 4611 	push	acc
      00179D 08               [12] 4612 	inc	r0
      00179E E6               [12] 4613 	mov	a,@r0
      00179F C0 E0            [24] 4614 	push	acc
      0017A1 08               [12] 4615 	inc	r0
      0017A2 E6               [12] 4616 	mov	a,@r0
      0017A3 C0 E0            [24] 4617 	push	acc
      0017A5 08               [12] 4618 	inc	r0
      0017A6 E6               [12] 4619 	mov	a,@r0
      0017A7 C0 E0            [24] 4620 	push	acc
      0017A9 8D 82            [24] 4621 	mov	dpl,r5
      0017AB 8E 83            [24] 4622 	mov	dph,r6
      0017AD 8F F0            [24] 4623 	mov	b,r7
      0017AF 12r00r00         [24] 4624 	lcall	_stack_push
      0017B2 E5 81            [12] 4625 	mov	a,sp
      0017B4 24 FC            [12] 4626 	add	a,#0xfc
      0017B6 F5 81            [12] 4627 	mov	sp,a
                                   4628 ;	calc.c:262: break;
      0017B8 02r1DrAE         [24] 4629 	ljmp	00217$
                                   4630 ;	calc.c:263: case '^':
      0017BB                       4631 00184$:
                                   4632 ;	calc.c:264: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      0017BB E5*00            [12] 4633 	mov	a,_bp
      0017BD 24 0F            [12] 4634 	add	a,#0x0f
      0017BF FF               [12] 4635 	mov	r7,a
      0017C0 7E 00            [12] 4636 	mov	r6,#0x00
      0017C2 7D 40            [12] 4637 	mov	r5,#0x40
      0017C4 E5*00            [12] 4638 	mov	a,_bp
      0017C6 24 0C            [12] 4639 	add	a,#0x0c
      0017C8 F8               [12] 4640 	mov	r0,a
      0017C9 74 09            [12] 4641 	mov	a,#0x09
      0017CB 26               [12] 4642 	add	a,@r0
      0017CC FA               [12] 4643 	mov	r2,a
      0017CD E4               [12] 4644 	clr	a
      0017CE 08               [12] 4645 	inc	r0
      0017CF 36               [12] 4646 	addc	a,@r0
      0017D0 FB               [12] 4647 	mov	r3,a
      0017D1 08               [12] 4648 	inc	r0
      0017D2 86 04            [24] 4649 	mov	ar4,@r0
      0017D4 C0 07            [24] 4650 	push	ar7
      0017D6 C0 06            [24] 4651 	push	ar6
      0017D8 C0 05            [24] 4652 	push	ar5
      0017DA 8A 82            [24] 4653 	mov	dpl,r2
      0017DC 8B 83            [24] 4654 	mov	dph,r3
      0017DE 8C F0            [24] 4655 	mov	b,r4
      0017E0 12r00r00         [24] 4656 	lcall	_stack_pop
      0017E3 AE 82            [24] 4657 	mov	r6,dpl
      0017E5 AF 83            [24] 4658 	mov	r7,dph
      0017E7 15 81            [12] 4659 	dec	sp
      0017E9 15 81            [12] 4660 	dec	sp
      0017EB 15 81            [12] 4661 	dec	sp
      0017ED EE               [12] 4662 	mov	a,r6
      0017EE 4F               [12] 4663 	orl	a,r7
      0017EF 70 25            [24] 4664 	jnz	00189$
      0017F1 7Dr38            [12] 4665 	mov	r5,#___str_8
      0017F3 7Es00            [12] 4666 	mov	r6,#(___str_8 >> 8)
      0017F5 7F 80            [12] 4667 	mov	r7,#0x80
                                   4668 ;	calc.c:50: return;
      0017F7                       4669 00390$:
                                   4670 ;	calc.c:48: for (; *s; s++) putchar(*s);
      0017F7 8D 82            [24] 4671 	mov	dpl,r5
      0017F9 8E 83            [24] 4672 	mov	dph,r6
      0017FB 8F F0            [24] 4673 	mov	b,r7
      0017FD 12r00r00         [24] 4674 	lcall	__gptrget
      001800 FC               [12] 4675 	mov	r4,a
      001801 70 03            [24] 4676 	jnz	01104$
      001803 02r1DrAE         [24] 4677 	ljmp	00217$
      001806                       4678 01104$:
      001806 7B 00            [12] 4679 	mov	r3,#0x00
      001808 8C 82            [24] 4680 	mov	dpl,r4
      00180A 8B 83            [24] 4681 	mov	dph,r3
      00180C 12r00r00         [24] 4682 	lcall	_putchar
      00180F 0D               [12] 4683 	inc	r5
                                   4684 ;	calc.c:264: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      001810 BD 00 E4         [24] 4685 	cjne	r5,#0x00,00390$
      001813 0E               [12] 4686 	inc	r6
      001814 80 E1            [24] 4687 	sjmp	00390$
      001816                       4688 00189$:
                                   4689 ;	calc.c:265: else if (!stack_pop(&ctx->s, &d1)) {
      001816 E5*00            [12] 4690 	mov	a,_bp
      001818 24 13            [12] 4691 	add	a,#0x13
      00181A FF               [12] 4692 	mov	r7,a
      00181B 7E 00            [12] 4693 	mov	r6,#0x00
      00181D 7D 40            [12] 4694 	mov	r5,#0x40
      00181F E5*00            [12] 4695 	mov	a,_bp
      001821 24 0C            [12] 4696 	add	a,#0x0c
      001823 F8               [12] 4697 	mov	r0,a
      001824 74 09            [12] 4698 	mov	a,#0x09
      001826 26               [12] 4699 	add	a,@r0
      001827 FA               [12] 4700 	mov	r2,a
      001828 E4               [12] 4701 	clr	a
      001829 08               [12] 4702 	inc	r0
      00182A 36               [12] 4703 	addc	a,@r0
      00182B FB               [12] 4704 	mov	r3,a
      00182C 08               [12] 4705 	inc	r0
      00182D 86 04            [24] 4706 	mov	ar4,@r0
      00182F C0 07            [24] 4707 	push	ar7
      001831 C0 06            [24] 4708 	push	ar6
      001833 C0 05            [24] 4709 	push	ar5
      001835 8A 82            [24] 4710 	mov	dpl,r2
      001837 8B 83            [24] 4711 	mov	dph,r3
      001839 8C F0            [24] 4712 	mov	b,r4
      00183B 12r00r00         [24] 4713 	lcall	_stack_pop
      00183E AE 82            [24] 4714 	mov	r6,dpl
      001840 AF 83            [24] 4715 	mov	r7,dph
      001842 15 81            [12] 4716 	dec	sp
      001844 15 81            [12] 4717 	dec	sp
      001846 15 81            [12] 4718 	dec	sp
      001848 EE               [12] 4719 	mov	a,r6
      001849 4F               [12] 4720 	orl	a,r7
      00184A 70 58            [24] 4721 	jnz	00186$
                                   4722 ;	calc.c:266: (void)stack_push(&ctx->s, d0);
      00184C E5*00            [12] 4723 	mov	a,_bp
      00184E 24 0C            [12] 4724 	add	a,#0x0c
      001850 F8               [12] 4725 	mov	r0,a
      001851 74 09            [12] 4726 	mov	a,#0x09
      001853 26               [12] 4727 	add	a,@r0
      001854 FD               [12] 4728 	mov	r5,a
      001855 E4               [12] 4729 	clr	a
      001856 08               [12] 4730 	inc	r0
      001857 36               [12] 4731 	addc	a,@r0
      001858 FE               [12] 4732 	mov	r6,a
      001859 08               [12] 4733 	inc	r0
      00185A 86 07            [24] 4734 	mov	ar7,@r0
      00185C E5*00            [12] 4735 	mov	a,_bp
      00185E 24 0F            [12] 4736 	add	a,#0x0f
      001860 F8               [12] 4737 	mov	r0,a
      001861 E6               [12] 4738 	mov	a,@r0
      001862 C0 E0            [24] 4739 	push	acc
      001864 08               [12] 4740 	inc	r0
      001865 E6               [12] 4741 	mov	a,@r0
      001866 C0 E0            [24] 4742 	push	acc
      001868 08               [12] 4743 	inc	r0
      001869 E6               [12] 4744 	mov	a,@r0
      00186A C0 E0            [24] 4745 	push	acc
      00186C 08               [12] 4746 	inc	r0
      00186D E6               [12] 4747 	mov	a,@r0
      00186E C0 E0            [24] 4748 	push	acc
      001870 8D 82            [24] 4749 	mov	dpl,r5
      001872 8E 83            [24] 4750 	mov	dph,r6
      001874 8F F0            [24] 4751 	mov	b,r7
      001876 12r00r00         [24] 4752 	lcall	_stack_push
      001879 E5 81            [12] 4753 	mov	a,sp
      00187B 24 FC            [12] 4754 	add	a,#0xfc
      00187D F5 81            [12] 4755 	mov	sp,a
                                   4756 ;	calc.c:267: printstr("\r\nstack underflow\r\n");
      00187F 7Dr38            [12] 4757 	mov	r5,#___str_8
      001881 7Es00            [12] 4758 	mov	r6,#(___str_8 >> 8)
      001883 7F 80            [12] 4759 	mov	r7,#0x80
                                   4760 ;	calc.c:50: return;
      001885                       4761 00393$:
                                   4762 ;	calc.c:48: for (; *s; s++) putchar(*s);
      001885 8D 82            [24] 4763 	mov	dpl,r5
      001887 8E 83            [24] 4764 	mov	dph,r6
      001889 8F F0            [24] 4765 	mov	b,r7
      00188B 12r00r00         [24] 4766 	lcall	__gptrget
      00188E FC               [12] 4767 	mov	r4,a
      00188F 70 03            [24] 4768 	jnz	01107$
      001891 02r1DrAE         [24] 4769 	ljmp	00217$
      001894                       4770 01107$:
      001894 7B 00            [12] 4771 	mov	r3,#0x00
      001896 8C 82            [24] 4772 	mov	dpl,r4
      001898 8B 83            [24] 4773 	mov	dph,r3
      00189A 12r00r00         [24] 4774 	lcall	_putchar
      00189D 0D               [12] 4775 	inc	r5
                                   4776 ;	calc.c:267: printstr("\r\nstack underflow\r\n");
      00189E BD 00 E4         [24] 4777 	cjne	r5,#0x00,00393$
      0018A1 0E               [12] 4778 	inc	r6
      0018A2 80 E1            [24] 4779 	sjmp	00393$
      0018A4                       4780 00186$:
                                   4781 ;	calc.c:269: d1 ^= d0;
      0018A4 E5*00            [12] 4782 	mov	a,_bp
      0018A6 24 13            [12] 4783 	add	a,#0x13
      0018A8 F8               [12] 4784 	mov	r0,a
      0018A9 E5*00            [12] 4785 	mov	a,_bp
      0018AB 24 0F            [12] 4786 	add	a,#0x0f
      0018AD F9               [12] 4787 	mov	r1,a
      0018AE E7               [12] 4788 	mov	a,@r1
      0018AF 66               [12] 4789 	xrl	a,@r0
      0018B0 F6               [12] 4790 	mov	@r0,a
      0018B1 09               [12] 4791 	inc	r1
      0018B2 E7               [12] 4792 	mov	a,@r1
      0018B3 08               [12] 4793 	inc	r0
      0018B4 66               [12] 4794 	xrl	a,@r0
      0018B5 F6               [12] 4795 	mov	@r0,a
      0018B6 09               [12] 4796 	inc	r1
      0018B7 E7               [12] 4797 	mov	a,@r1
      0018B8 08               [12] 4798 	inc	r0
      0018B9 66               [12] 4799 	xrl	a,@r0
      0018BA F6               [12] 4800 	mov	@r0,a
      0018BB 09               [12] 4801 	inc	r1
      0018BC E7               [12] 4802 	mov	a,@r1
      0018BD 08               [12] 4803 	inc	r0
      0018BE 66               [12] 4804 	xrl	a,@r0
      0018BF F6               [12] 4805 	mov	@r0,a
                                   4806 ;	calc.c:270: (void)stack_push(&ctx->s, d1);
      0018C0 E5*00            [12] 4807 	mov	a,_bp
      0018C2 24 0C            [12] 4808 	add	a,#0x0c
      0018C4 F8               [12] 4809 	mov	r0,a
      0018C5 74 09            [12] 4810 	mov	a,#0x09
      0018C7 26               [12] 4811 	add	a,@r0
      0018C8 FD               [12] 4812 	mov	r5,a
      0018C9 E4               [12] 4813 	clr	a
      0018CA 08               [12] 4814 	inc	r0
      0018CB 36               [12] 4815 	addc	a,@r0
      0018CC FE               [12] 4816 	mov	r6,a
      0018CD 08               [12] 4817 	inc	r0
      0018CE 86 07            [24] 4818 	mov	ar7,@r0
      0018D0 E5*00            [12] 4819 	mov	a,_bp
      0018D2 24 13            [12] 4820 	add	a,#0x13
      0018D4 F8               [12] 4821 	mov	r0,a
      0018D5 E6               [12] 4822 	mov	a,@r0
      0018D6 C0 E0            [24] 4823 	push	acc
      0018D8 08               [12] 4824 	inc	r0
      0018D9 E6               [12] 4825 	mov	a,@r0
      0018DA C0 E0            [24] 4826 	push	acc
      0018DC 08               [12] 4827 	inc	r0
      0018DD E6               [12] 4828 	mov	a,@r0
      0018DE C0 E0            [24] 4829 	push	acc
      0018E0 08               [12] 4830 	inc	r0
      0018E1 E6               [12] 4831 	mov	a,@r0
      0018E2 C0 E0            [24] 4832 	push	acc
      0018E4 8D 82            [24] 4833 	mov	dpl,r5
      0018E6 8E 83            [24] 4834 	mov	dph,r6
      0018E8 8F F0            [24] 4835 	mov	b,r7
      0018EA 12r00r00         [24] 4836 	lcall	_stack_push
      0018ED E5 81            [12] 4837 	mov	a,sp
      0018EF 24 FC            [12] 4838 	add	a,#0xfc
      0018F1 F5 81            [12] 4839 	mov	sp,a
                                   4840 ;	calc.c:272: break;
      0018F3 02r1DrAE         [24] 4841 	ljmp	00217$
                                   4842 ;	calc.c:273: case '>':
      0018F6                       4843 00191$:
                                   4844 ;	calc.c:274: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      0018F6 E5*00            [12] 4845 	mov	a,_bp
      0018F8 24 0F            [12] 4846 	add	a,#0x0f
      0018FA FF               [12] 4847 	mov	r7,a
      0018FB 7E 00            [12] 4848 	mov	r6,#0x00
      0018FD 7D 40            [12] 4849 	mov	r5,#0x40
      0018FF E5*00            [12] 4850 	mov	a,_bp
      001901 24 0C            [12] 4851 	add	a,#0x0c
      001903 F8               [12] 4852 	mov	r0,a
      001904 74 09            [12] 4853 	mov	a,#0x09
      001906 26               [12] 4854 	add	a,@r0
      001907 FA               [12] 4855 	mov	r2,a
      001908 E4               [12] 4856 	clr	a
      001909 08               [12] 4857 	inc	r0
      00190A 36               [12] 4858 	addc	a,@r0
      00190B FB               [12] 4859 	mov	r3,a
      00190C 08               [12] 4860 	inc	r0
      00190D 86 04            [24] 4861 	mov	ar4,@r0
      00190F C0 07            [24] 4862 	push	ar7
      001911 C0 06            [24] 4863 	push	ar6
      001913 C0 05            [24] 4864 	push	ar5
      001915 8A 82            [24] 4865 	mov	dpl,r2
      001917 8B 83            [24] 4866 	mov	dph,r3
      001919 8C F0            [24] 4867 	mov	b,r4
      00191B 12r00r00         [24] 4868 	lcall	_stack_pop
      00191E AE 82            [24] 4869 	mov	r6,dpl
      001920 AF 83            [24] 4870 	mov	r7,dph
      001922 15 81            [12] 4871 	dec	sp
      001924 15 81            [12] 4872 	dec	sp
      001926 15 81            [12] 4873 	dec	sp
      001928 EE               [12] 4874 	mov	a,r6
      001929 4F               [12] 4875 	orl	a,r7
      00192A 70 25            [24] 4876 	jnz	00196$
      00192C 7Dr38            [12] 4877 	mov	r5,#___str_8
      00192E 7Es00            [12] 4878 	mov	r6,#(___str_8 >> 8)
      001930 7F 80            [12] 4879 	mov	r7,#0x80
                                   4880 ;	calc.c:50: return;
      001932                       4881 00396$:
                                   4882 ;	calc.c:48: for (; *s; s++) putchar(*s);
      001932 8D 82            [24] 4883 	mov	dpl,r5
      001934 8E 83            [24] 4884 	mov	dph,r6
      001936 8F F0            [24] 4885 	mov	b,r7
      001938 12r00r00         [24] 4886 	lcall	__gptrget
      00193B FC               [12] 4887 	mov	r4,a
      00193C 70 03            [24] 4888 	jnz	01110$
      00193E 02r1DrAE         [24] 4889 	ljmp	00217$
      001941                       4890 01110$:
      001941 7B 00            [12] 4891 	mov	r3,#0x00
      001943 8C 82            [24] 4892 	mov	dpl,r4
      001945 8B 83            [24] 4893 	mov	dph,r3
      001947 12r00r00         [24] 4894 	lcall	_putchar
      00194A 0D               [12] 4895 	inc	r5
                                   4896 ;	calc.c:274: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      00194B BD 00 E4         [24] 4897 	cjne	r5,#0x00,00396$
      00194E 0E               [12] 4898 	inc	r6
      00194F 80 E1            [24] 4899 	sjmp	00396$
      001951                       4900 00196$:
                                   4901 ;	calc.c:275: else if (!stack_pop(&ctx->s, &d1)) {
      001951 E5*00            [12] 4902 	mov	a,_bp
      001953 24 13            [12] 4903 	add	a,#0x13
      001955 FF               [12] 4904 	mov	r7,a
      001956 7E 00            [12] 4905 	mov	r6,#0x00
      001958 7D 40            [12] 4906 	mov	r5,#0x40
      00195A E5*00            [12] 4907 	mov	a,_bp
      00195C 24 0C            [12] 4908 	add	a,#0x0c
      00195E F8               [12] 4909 	mov	r0,a
      00195F 74 09            [12] 4910 	mov	a,#0x09
      001961 26               [12] 4911 	add	a,@r0
      001962 FA               [12] 4912 	mov	r2,a
      001963 E4               [12] 4913 	clr	a
      001964 08               [12] 4914 	inc	r0
      001965 36               [12] 4915 	addc	a,@r0
      001966 FB               [12] 4916 	mov	r3,a
      001967 08               [12] 4917 	inc	r0
      001968 86 04            [24] 4918 	mov	ar4,@r0
      00196A C0 07            [24] 4919 	push	ar7
      00196C C0 06            [24] 4920 	push	ar6
      00196E C0 05            [24] 4921 	push	ar5
      001970 8A 82            [24] 4922 	mov	dpl,r2
      001972 8B 83            [24] 4923 	mov	dph,r3
      001974 8C F0            [24] 4924 	mov	b,r4
      001976 12r00r00         [24] 4925 	lcall	_stack_pop
      001979 AE 82            [24] 4926 	mov	r6,dpl
      00197B AF 83            [24] 4927 	mov	r7,dph
      00197D 15 81            [12] 4928 	dec	sp
      00197F 15 81            [12] 4929 	dec	sp
      001981 15 81            [12] 4930 	dec	sp
      001983 EE               [12] 4931 	mov	a,r6
      001984 4F               [12] 4932 	orl	a,r7
      001985 70 58            [24] 4933 	jnz	00193$
                                   4934 ;	calc.c:276: (void)stack_push(&ctx->s, d0);
      001987 E5*00            [12] 4935 	mov	a,_bp
      001989 24 0C            [12] 4936 	add	a,#0x0c
      00198B F8               [12] 4937 	mov	r0,a
      00198C 74 09            [12] 4938 	mov	a,#0x09
      00198E 26               [12] 4939 	add	a,@r0
      00198F FD               [12] 4940 	mov	r5,a
      001990 E4               [12] 4941 	clr	a
      001991 08               [12] 4942 	inc	r0
      001992 36               [12] 4943 	addc	a,@r0
      001993 FE               [12] 4944 	mov	r6,a
      001994 08               [12] 4945 	inc	r0
      001995 86 07            [24] 4946 	mov	ar7,@r0
      001997 E5*00            [12] 4947 	mov	a,_bp
      001999 24 0F            [12] 4948 	add	a,#0x0f
      00199B F8               [12] 4949 	mov	r0,a
      00199C E6               [12] 4950 	mov	a,@r0
      00199D C0 E0            [24] 4951 	push	acc
      00199F 08               [12] 4952 	inc	r0
      0019A0 E6               [12] 4953 	mov	a,@r0
      0019A1 C0 E0            [24] 4954 	push	acc
      0019A3 08               [12] 4955 	inc	r0
      0019A4 E6               [12] 4956 	mov	a,@r0
      0019A5 C0 E0            [24] 4957 	push	acc
      0019A7 08               [12] 4958 	inc	r0
      0019A8 E6               [12] 4959 	mov	a,@r0
      0019A9 C0 E0            [24] 4960 	push	acc
      0019AB 8D 82            [24] 4961 	mov	dpl,r5
      0019AD 8E 83            [24] 4962 	mov	dph,r6
      0019AF 8F F0            [24] 4963 	mov	b,r7
      0019B1 12r00r00         [24] 4964 	lcall	_stack_push
      0019B4 E5 81            [12] 4965 	mov	a,sp
      0019B6 24 FC            [12] 4966 	add	a,#0xfc
      0019B8 F5 81            [12] 4967 	mov	sp,a
                                   4968 ;	calc.c:277: printstr("\r\nstack underflow\r\n");
      0019BA 7Dr38            [12] 4969 	mov	r5,#___str_8
      0019BC 7Es00            [12] 4970 	mov	r6,#(___str_8 >> 8)
      0019BE 7F 80            [12] 4971 	mov	r7,#0x80
                                   4972 ;	calc.c:50: return;
      0019C0                       4973 00399$:
                                   4974 ;	calc.c:48: for (; *s; s++) putchar(*s);
      0019C0 8D 82            [24] 4975 	mov	dpl,r5
      0019C2 8E 83            [24] 4976 	mov	dph,r6
      0019C4 8F F0            [24] 4977 	mov	b,r7
      0019C6 12r00r00         [24] 4978 	lcall	__gptrget
      0019C9 FC               [12] 4979 	mov	r4,a
      0019CA 70 03            [24] 4980 	jnz	01113$
      0019CC 02r1DrAE         [24] 4981 	ljmp	00217$
      0019CF                       4982 01113$:
      0019CF 7B 00            [12] 4983 	mov	r3,#0x00
      0019D1 8C 82            [24] 4984 	mov	dpl,r4
      0019D3 8B 83            [24] 4985 	mov	dph,r3
      0019D5 12r00r00         [24] 4986 	lcall	_putchar
      0019D8 0D               [12] 4987 	inc	r5
                                   4988 ;	calc.c:277: printstr("\r\nstack underflow\r\n");
      0019D9 BD 00 E4         [24] 4989 	cjne	r5,#0x00,00399$
      0019DC 0E               [12] 4990 	inc	r6
      0019DD 80 E1            [24] 4991 	sjmp	00399$
      0019DF                       4992 00193$:
                                   4993 ;	calc.c:279: d1 = (unsigned long)d1 >> ((unsigned long)d0 & 0x0000001flu);
      0019DF E5*00            [12] 4994 	mov	a,_bp
      0019E1 24 13            [12] 4995 	add	a,#0x13
      0019E3 F8               [12] 4996 	mov	r0,a
      0019E4 86 04            [24] 4997 	mov	ar4,@r0
      0019E6 08               [12] 4998 	inc	r0
      0019E7 86 05            [24] 4999 	mov	ar5,@r0
      0019E9 08               [12] 5000 	inc	r0
      0019EA 86 06            [24] 5001 	mov	ar6,@r0
      0019EC 08               [12] 5002 	inc	r0
      0019ED 86 07            [24] 5003 	mov	ar7,@r0
      0019EF E5*00            [12] 5004 	mov	a,_bp
      0019F1 24 0F            [12] 5005 	add	a,#0x0f
      0019F3 F8               [12] 5006 	mov	r0,a
      0019F4 86 03            [24] 5007 	mov	ar3,@r0
      0019F6 53 03 1F         [24] 5008 	anl	ar3,#0x1f
      0019F9 8B F0            [24] 5009 	mov	b,r3
      0019FB 05 F0            [12] 5010 	inc	b
      0019FD 80 0D            [24] 5011 	sjmp	01116$
      0019FF                       5012 01115$:
      0019FF C3               [12] 5013 	clr	c
      001A00 EF               [12] 5014 	mov	a,r7
      001A01 13               [12] 5015 	rrc	a
      001A02 FF               [12] 5016 	mov	r7,a
      001A03 EE               [12] 5017 	mov	a,r6
      001A04 13               [12] 5018 	rrc	a
      001A05 FE               [12] 5019 	mov	r6,a
      001A06 ED               [12] 5020 	mov	a,r5
      001A07 13               [12] 5021 	rrc	a
      001A08 FD               [12] 5022 	mov	r5,a
      001A09 EC               [12] 5023 	mov	a,r4
      001A0A 13               [12] 5024 	rrc	a
      001A0B FC               [12] 5025 	mov	r4,a
      001A0C                       5026 01116$:
      001A0C D5 F0 F0         [24] 5027 	djnz	b,01115$
      001A0F E5*00            [12] 5028 	mov	a,_bp
      001A11 24 13            [12] 5029 	add	a,#0x13
      001A13 F8               [12] 5030 	mov	r0,a
      001A14 A6 04            [24] 5031 	mov	@r0,ar4
      001A16 08               [12] 5032 	inc	r0
      001A17 A6 05            [24] 5033 	mov	@r0,ar5
      001A19 08               [12] 5034 	inc	r0
      001A1A A6 06            [24] 5035 	mov	@r0,ar6
      001A1C 08               [12] 5036 	inc	r0
      001A1D A6 07            [24] 5037 	mov	@r0,ar7
                                   5038 ;	calc.c:280: (void)stack_push(&ctx->s, d1);
      001A1F E5*00            [12] 5039 	mov	a,_bp
      001A21 24 0C            [12] 5040 	add	a,#0x0c
      001A23 F8               [12] 5041 	mov	r0,a
      001A24 74 09            [12] 5042 	mov	a,#0x09
      001A26 26               [12] 5043 	add	a,@r0
      001A27 FD               [12] 5044 	mov	r5,a
      001A28 E4               [12] 5045 	clr	a
      001A29 08               [12] 5046 	inc	r0
      001A2A 36               [12] 5047 	addc	a,@r0
      001A2B FE               [12] 5048 	mov	r6,a
      001A2C 08               [12] 5049 	inc	r0
      001A2D 86 07            [24] 5050 	mov	ar7,@r0
      001A2F E5*00            [12] 5051 	mov	a,_bp
      001A31 24 13            [12] 5052 	add	a,#0x13
      001A33 F8               [12] 5053 	mov	r0,a
      001A34 E6               [12] 5054 	mov	a,@r0
      001A35 C0 E0            [24] 5055 	push	acc
      001A37 08               [12] 5056 	inc	r0
      001A38 E6               [12] 5057 	mov	a,@r0
      001A39 C0 E0            [24] 5058 	push	acc
      001A3B 08               [12] 5059 	inc	r0
      001A3C E6               [12] 5060 	mov	a,@r0
      001A3D C0 E0            [24] 5061 	push	acc
      001A3F 08               [12] 5062 	inc	r0
      001A40 E6               [12] 5063 	mov	a,@r0
      001A41 C0 E0            [24] 5064 	push	acc
      001A43 8D 82            [24] 5065 	mov	dpl,r5
      001A45 8E 83            [24] 5066 	mov	dph,r6
      001A47 8F F0            [24] 5067 	mov	b,r7
      001A49 12r00r00         [24] 5068 	lcall	_stack_push
      001A4C E5 81            [12] 5069 	mov	a,sp
      001A4E 24 FC            [12] 5070 	add	a,#0xfc
      001A50 F5 81            [12] 5071 	mov	sp,a
                                   5072 ;	calc.c:282: break;
      001A52 02r1DrAE         [24] 5073 	ljmp	00217$
                                   5074 ;	calc.c:283: case ']':
      001A55                       5075 00198$:
                                   5076 ;	calc.c:284: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      001A55 E5*00            [12] 5077 	mov	a,_bp
      001A57 24 0F            [12] 5078 	add	a,#0x0f
      001A59 FF               [12] 5079 	mov	r7,a
      001A5A 7E 00            [12] 5080 	mov	r6,#0x00
      001A5C 7D 40            [12] 5081 	mov	r5,#0x40
      001A5E E5*00            [12] 5082 	mov	a,_bp
      001A60 24 0C            [12] 5083 	add	a,#0x0c
      001A62 F8               [12] 5084 	mov	r0,a
      001A63 74 09            [12] 5085 	mov	a,#0x09
      001A65 26               [12] 5086 	add	a,@r0
      001A66 FA               [12] 5087 	mov	r2,a
      001A67 E4               [12] 5088 	clr	a
      001A68 08               [12] 5089 	inc	r0
      001A69 36               [12] 5090 	addc	a,@r0
      001A6A FB               [12] 5091 	mov	r3,a
      001A6B 08               [12] 5092 	inc	r0
      001A6C 86 04            [24] 5093 	mov	ar4,@r0
      001A6E C0 07            [24] 5094 	push	ar7
      001A70 C0 06            [24] 5095 	push	ar6
      001A72 C0 05            [24] 5096 	push	ar5
      001A74 8A 82            [24] 5097 	mov	dpl,r2
      001A76 8B 83            [24] 5098 	mov	dph,r3
      001A78 8C F0            [24] 5099 	mov	b,r4
      001A7A 12r00r00         [24] 5100 	lcall	_stack_pop
      001A7D AE 82            [24] 5101 	mov	r6,dpl
      001A7F AF 83            [24] 5102 	mov	r7,dph
      001A81 15 81            [12] 5103 	dec	sp
      001A83 15 81            [12] 5104 	dec	sp
      001A85 15 81            [12] 5105 	dec	sp
      001A87 EE               [12] 5106 	mov	a,r6
      001A88 4F               [12] 5107 	orl	a,r7
      001A89 70 25            [24] 5108 	jnz	00203$
      001A8B 7Dr38            [12] 5109 	mov	r5,#___str_8
      001A8D 7Es00            [12] 5110 	mov	r6,#(___str_8 >> 8)
      001A8F 7F 80            [12] 5111 	mov	r7,#0x80
                                   5112 ;	calc.c:50: return;
      001A91                       5113 00402$:
                                   5114 ;	calc.c:48: for (; *s; s++) putchar(*s);
      001A91 8D 82            [24] 5115 	mov	dpl,r5
      001A93 8E 83            [24] 5116 	mov	dph,r6
      001A95 8F F0            [24] 5117 	mov	b,r7
      001A97 12r00r00         [24] 5118 	lcall	__gptrget
      001A9A FC               [12] 5119 	mov	r4,a
      001A9B 70 03            [24] 5120 	jnz	01118$
      001A9D 02r1DrAE         [24] 5121 	ljmp	00217$
      001AA0                       5122 01118$:
      001AA0 7B 00            [12] 5123 	mov	r3,#0x00
      001AA2 8C 82            [24] 5124 	mov	dpl,r4
      001AA4 8B 83            [24] 5125 	mov	dph,r3
      001AA6 12r00r00         [24] 5126 	lcall	_putchar
      001AA9 0D               [12] 5127 	inc	r5
                                   5128 ;	calc.c:284: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      001AAA BD 00 E4         [24] 5129 	cjne	r5,#0x00,00402$
      001AAD 0E               [12] 5130 	inc	r6
      001AAE 80 E1            [24] 5131 	sjmp	00402$
      001AB0                       5132 00203$:
                                   5133 ;	calc.c:285: else if (!stack_pop(&ctx->s, &d1)) {
      001AB0 E5*00            [12] 5134 	mov	a,_bp
      001AB2 24 13            [12] 5135 	add	a,#0x13
      001AB4 FF               [12] 5136 	mov	r7,a
      001AB5 7E 00            [12] 5137 	mov	r6,#0x00
      001AB7 7D 40            [12] 5138 	mov	r5,#0x40
      001AB9 E5*00            [12] 5139 	mov	a,_bp
      001ABB 24 0C            [12] 5140 	add	a,#0x0c
      001ABD F8               [12] 5141 	mov	r0,a
      001ABE 74 09            [12] 5142 	mov	a,#0x09
      001AC0 26               [12] 5143 	add	a,@r0
      001AC1 FA               [12] 5144 	mov	r2,a
      001AC2 E4               [12] 5145 	clr	a
      001AC3 08               [12] 5146 	inc	r0
      001AC4 36               [12] 5147 	addc	a,@r0
      001AC5 FB               [12] 5148 	mov	r3,a
      001AC6 08               [12] 5149 	inc	r0
      001AC7 86 04            [24] 5150 	mov	ar4,@r0
      001AC9 C0 07            [24] 5151 	push	ar7
      001ACB C0 06            [24] 5152 	push	ar6
      001ACD C0 05            [24] 5153 	push	ar5
      001ACF 8A 82            [24] 5154 	mov	dpl,r2
      001AD1 8B 83            [24] 5155 	mov	dph,r3
      001AD3 8C F0            [24] 5156 	mov	b,r4
      001AD5 12r00r00         [24] 5157 	lcall	_stack_pop
      001AD8 AE 82            [24] 5158 	mov	r6,dpl
      001ADA AF 83            [24] 5159 	mov	r7,dph
      001ADC 15 81            [12] 5160 	dec	sp
      001ADE 15 81            [12] 5161 	dec	sp
      001AE0 15 81            [12] 5162 	dec	sp
      001AE2 EE               [12] 5163 	mov	a,r6
      001AE3 4F               [12] 5164 	orl	a,r7
      001AE4 70 58            [24] 5165 	jnz	00200$
                                   5166 ;	calc.c:286: (void)stack_push(&ctx->s, d0);
      001AE6 E5*00            [12] 5167 	mov	a,_bp
      001AE8 24 0C            [12] 5168 	add	a,#0x0c
      001AEA F8               [12] 5169 	mov	r0,a
      001AEB 74 09            [12] 5170 	mov	a,#0x09
      001AED 26               [12] 5171 	add	a,@r0
      001AEE FD               [12] 5172 	mov	r5,a
      001AEF E4               [12] 5173 	clr	a
      001AF0 08               [12] 5174 	inc	r0
      001AF1 36               [12] 5175 	addc	a,@r0
      001AF2 FE               [12] 5176 	mov	r6,a
      001AF3 08               [12] 5177 	inc	r0
      001AF4 86 07            [24] 5178 	mov	ar7,@r0
      001AF6 E5*00            [12] 5179 	mov	a,_bp
      001AF8 24 0F            [12] 5180 	add	a,#0x0f
      001AFA F8               [12] 5181 	mov	r0,a
      001AFB E6               [12] 5182 	mov	a,@r0
      001AFC C0 E0            [24] 5183 	push	acc
      001AFE 08               [12] 5184 	inc	r0
      001AFF E6               [12] 5185 	mov	a,@r0
      001B00 C0 E0            [24] 5186 	push	acc
      001B02 08               [12] 5187 	inc	r0
      001B03 E6               [12] 5188 	mov	a,@r0
      001B04 C0 E0            [24] 5189 	push	acc
      001B06 08               [12] 5190 	inc	r0
      001B07 E6               [12] 5191 	mov	a,@r0
      001B08 C0 E0            [24] 5192 	push	acc
      001B0A 8D 82            [24] 5193 	mov	dpl,r5
      001B0C 8E 83            [24] 5194 	mov	dph,r6
      001B0E 8F F0            [24] 5195 	mov	b,r7
      001B10 12r00r00         [24] 5196 	lcall	_stack_push
      001B13 E5 81            [12] 5197 	mov	a,sp
      001B15 24 FC            [12] 5198 	add	a,#0xfc
      001B17 F5 81            [12] 5199 	mov	sp,a
                                   5200 ;	calc.c:287: printstr("\r\nstack underflow\r\n");
      001B19 7Dr38            [12] 5201 	mov	r5,#___str_8
      001B1B 7Es00            [12] 5202 	mov	r6,#(___str_8 >> 8)
      001B1D 7F 80            [12] 5203 	mov	r7,#0x80
                                   5204 ;	calc.c:50: return;
      001B1F                       5205 00405$:
                                   5206 ;	calc.c:48: for (; *s; s++) putchar(*s);
      001B1F 8D 82            [24] 5207 	mov	dpl,r5
      001B21 8E 83            [24] 5208 	mov	dph,r6
      001B23 8F F0            [24] 5209 	mov	b,r7
      001B25 12r00r00         [24] 5210 	lcall	__gptrget
      001B28 FC               [12] 5211 	mov	r4,a
      001B29 70 03            [24] 5212 	jnz	01121$
      001B2B 02r1DrAE         [24] 5213 	ljmp	00217$
      001B2E                       5214 01121$:
      001B2E 7B 00            [12] 5215 	mov	r3,#0x00
      001B30 8C 82            [24] 5216 	mov	dpl,r4
      001B32 8B 83            [24] 5217 	mov	dph,r3
      001B34 12r00r00         [24] 5218 	lcall	_putchar
      001B37 0D               [12] 5219 	inc	r5
                                   5220 ;	calc.c:287: printstr("\r\nstack underflow\r\n");
      001B38 BD 00 E4         [24] 5221 	cjne	r5,#0x00,00405$
      001B3B 0E               [12] 5222 	inc	r6
      001B3C 80 E1            [24] 5223 	sjmp	00405$
      001B3E                       5224 00200$:
                                   5225 ;	calc.c:289: d1 >>= ((unsigned long)d0 & 0x0000001flu);
      001B3E E5*00            [12] 5226 	mov	a,_bp
      001B40 24 0F            [12] 5227 	add	a,#0x0f
      001B42 F8               [12] 5228 	mov	r0,a
      001B43 86 07            [24] 5229 	mov	ar7,@r0
      001B45 53 07 1F         [24] 5230 	anl	ar7,#0x1f
      001B48 8F F0            [24] 5231 	mov	b,r7
      001B4A 05 F0            [12] 5232 	inc	b
      001B4C E5*00            [12] 5233 	mov	a,_bp
      001B4E 24 13            [12] 5234 	add	a,#0x13
      001B50 F8               [12] 5235 	mov	r0,a
      001B51 08               [12] 5236 	inc	r0
      001B52 08               [12] 5237 	inc	r0
      001B53 08               [12] 5238 	inc	r0
      001B54 E6               [12] 5239 	mov	a,@r0
      001B55 33               [12] 5240 	rlc	a
      001B56 92 D2            [24] 5241 	mov	ov,c
      001B58 18               [12] 5242 	dec	r0
      001B59 18               [12] 5243 	dec	r0
      001B5A 18               [12] 5244 	dec	r0
      001B5B 80 14            [24] 5245 	sjmp	01124$
      001B5D                       5246 01123$:
      001B5D A2 D2            [12] 5247 	mov	c,ov
      001B5F 08               [12] 5248 	inc	r0
      001B60 08               [12] 5249 	inc	r0
      001B61 08               [12] 5250 	inc	r0
      001B62 E6               [12] 5251 	mov	a,@r0
      001B63 13               [12] 5252 	rrc	a
      001B64 F6               [12] 5253 	mov	@r0,a
      001B65 18               [12] 5254 	dec	r0
      001B66 E6               [12] 5255 	mov	a,@r0
      001B67 13               [12] 5256 	rrc	a
      001B68 F6               [12] 5257 	mov	@r0,a
      001B69 18               [12] 5258 	dec	r0
      001B6A E6               [12] 5259 	mov	a,@r0
      001B6B 13               [12] 5260 	rrc	a
      001B6C F6               [12] 5261 	mov	@r0,a
      001B6D 18               [12] 5262 	dec	r0
      001B6E E6               [12] 5263 	mov	a,@r0
      001B6F 13               [12] 5264 	rrc	a
      001B70 F6               [12] 5265 	mov	@r0,a
      001B71                       5266 01124$:
      001B71 D5 F0 E9         [24] 5267 	djnz	b,01123$
                                   5268 ;	calc.c:290: (void)stack_push(&ctx->s, d1);
      001B74 E5*00            [12] 5269 	mov	a,_bp
      001B76 24 0C            [12] 5270 	add	a,#0x0c
      001B78 F8               [12] 5271 	mov	r0,a
      001B79 74 09            [12] 5272 	mov	a,#0x09
      001B7B 26               [12] 5273 	add	a,@r0
      001B7C FD               [12] 5274 	mov	r5,a
      001B7D E4               [12] 5275 	clr	a
      001B7E 08               [12] 5276 	inc	r0
      001B7F 36               [12] 5277 	addc	a,@r0
      001B80 FE               [12] 5278 	mov	r6,a
      001B81 08               [12] 5279 	inc	r0
      001B82 86 07            [24] 5280 	mov	ar7,@r0
      001B84 E5*00            [12] 5281 	mov	a,_bp
      001B86 24 13            [12] 5282 	add	a,#0x13
      001B88 F8               [12] 5283 	mov	r0,a
      001B89 E6               [12] 5284 	mov	a,@r0
      001B8A C0 E0            [24] 5285 	push	acc
      001B8C 08               [12] 5286 	inc	r0
      001B8D E6               [12] 5287 	mov	a,@r0
      001B8E C0 E0            [24] 5288 	push	acc
      001B90 08               [12] 5289 	inc	r0
      001B91 E6               [12] 5290 	mov	a,@r0
      001B92 C0 E0            [24] 5291 	push	acc
      001B94 08               [12] 5292 	inc	r0
      001B95 E6               [12] 5293 	mov	a,@r0
      001B96 C0 E0            [24] 5294 	push	acc
      001B98 8D 82            [24] 5295 	mov	dpl,r5
      001B9A 8E 83            [24] 5296 	mov	dph,r6
      001B9C 8F F0            [24] 5297 	mov	b,r7
      001B9E 12r00r00         [24] 5298 	lcall	_stack_push
      001BA1 E5 81            [12] 5299 	mov	a,sp
      001BA3 24 FC            [12] 5300 	add	a,#0xfc
      001BA5 F5 81            [12] 5301 	mov	sp,a
                                   5302 ;	calc.c:292: break;
      001BA7 02r1DrAE         [24] 5303 	ljmp	00217$
                                   5304 ;	calc.c:293: case '<':
      001BAA                       5305 00205$:
                                   5306 ;	calc.c:294: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      001BAA E5*00            [12] 5307 	mov	a,_bp
      001BAC 24 0F            [12] 5308 	add	a,#0x0f
      001BAE FF               [12] 5309 	mov	r7,a
      001BAF 7E 00            [12] 5310 	mov	r6,#0x00
      001BB1 7D 40            [12] 5311 	mov	r5,#0x40
      001BB3 E5*00            [12] 5312 	mov	a,_bp
      001BB5 24 0C            [12] 5313 	add	a,#0x0c
      001BB7 F8               [12] 5314 	mov	r0,a
      001BB8 74 09            [12] 5315 	mov	a,#0x09
      001BBA 26               [12] 5316 	add	a,@r0
      001BBB FA               [12] 5317 	mov	r2,a
      001BBC E4               [12] 5318 	clr	a
      001BBD 08               [12] 5319 	inc	r0
      001BBE 36               [12] 5320 	addc	a,@r0
      001BBF FB               [12] 5321 	mov	r3,a
      001BC0 08               [12] 5322 	inc	r0
      001BC1 86 04            [24] 5323 	mov	ar4,@r0
      001BC3 C0 07            [24] 5324 	push	ar7
      001BC5 C0 06            [24] 5325 	push	ar6
      001BC7 C0 05            [24] 5326 	push	ar5
      001BC9 8A 82            [24] 5327 	mov	dpl,r2
      001BCB 8B 83            [24] 5328 	mov	dph,r3
      001BCD 8C F0            [24] 5329 	mov	b,r4
      001BCF 12r00r00         [24] 5330 	lcall	_stack_pop
      001BD2 AE 82            [24] 5331 	mov	r6,dpl
      001BD4 AF 83            [24] 5332 	mov	r7,dph
      001BD6 15 81            [12] 5333 	dec	sp
      001BD8 15 81            [12] 5334 	dec	sp
      001BDA 15 81            [12] 5335 	dec	sp
      001BDC EE               [12] 5336 	mov	a,r6
      001BDD 4F               [12] 5337 	orl	a,r7
      001BDE 70 25            [24] 5338 	jnz	00210$
      001BE0 7Dr38            [12] 5339 	mov	r5,#___str_8
      001BE2 7Es00            [12] 5340 	mov	r6,#(___str_8 >> 8)
      001BE4 7F 80            [12] 5341 	mov	r7,#0x80
                                   5342 ;	calc.c:50: return;
      001BE6                       5343 00408$:
                                   5344 ;	calc.c:48: for (; *s; s++) putchar(*s);
      001BE6 8D 82            [24] 5345 	mov	dpl,r5
      001BE8 8E 83            [24] 5346 	mov	dph,r6
      001BEA 8F F0            [24] 5347 	mov	b,r7
      001BEC 12r00r00         [24] 5348 	lcall	__gptrget
      001BEF FC               [12] 5349 	mov	r4,a
      001BF0 70 03            [24] 5350 	jnz	01126$
      001BF2 02r1DrAE         [24] 5351 	ljmp	00217$
      001BF5                       5352 01126$:
      001BF5 7B 00            [12] 5353 	mov	r3,#0x00
      001BF7 8C 82            [24] 5354 	mov	dpl,r4
      001BF9 8B 83            [24] 5355 	mov	dph,r3
      001BFB 12r00r00         [24] 5356 	lcall	_putchar
      001BFE 0D               [12] 5357 	inc	r5
                                   5358 ;	calc.c:294: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      001BFF BD 00 E4         [24] 5359 	cjne	r5,#0x00,00408$
      001C02 0E               [12] 5360 	inc	r6
      001C03 80 E1            [24] 5361 	sjmp	00408$
      001C05                       5362 00210$:
                                   5363 ;	calc.c:295: else if (!stack_pop(&ctx->s, &d1)) {
      001C05 E5*00            [12] 5364 	mov	a,_bp
      001C07 24 13            [12] 5365 	add	a,#0x13
      001C09 FF               [12] 5366 	mov	r7,a
      001C0A 7E 00            [12] 5367 	mov	r6,#0x00
      001C0C 7D 40            [12] 5368 	mov	r5,#0x40
      001C0E E5*00            [12] 5369 	mov	a,_bp
      001C10 24 0C            [12] 5370 	add	a,#0x0c
      001C12 F8               [12] 5371 	mov	r0,a
      001C13 74 09            [12] 5372 	mov	a,#0x09
      001C15 26               [12] 5373 	add	a,@r0
      001C16 FA               [12] 5374 	mov	r2,a
      001C17 E4               [12] 5375 	clr	a
      001C18 08               [12] 5376 	inc	r0
      001C19 36               [12] 5377 	addc	a,@r0
      001C1A FB               [12] 5378 	mov	r3,a
      001C1B 08               [12] 5379 	inc	r0
      001C1C 86 04            [24] 5380 	mov	ar4,@r0
      001C1E C0 07            [24] 5381 	push	ar7
      001C20 C0 06            [24] 5382 	push	ar6
      001C22 C0 05            [24] 5383 	push	ar5
      001C24 8A 82            [24] 5384 	mov	dpl,r2
      001C26 8B 83            [24] 5385 	mov	dph,r3
      001C28 8C F0            [24] 5386 	mov	b,r4
      001C2A 12r00r00         [24] 5387 	lcall	_stack_pop
      001C2D AE 82            [24] 5388 	mov	r6,dpl
      001C2F AF 83            [24] 5389 	mov	r7,dph
      001C31 15 81            [12] 5390 	dec	sp
      001C33 15 81            [12] 5391 	dec	sp
      001C35 15 81            [12] 5392 	dec	sp
      001C37 EE               [12] 5393 	mov	a,r6
      001C38 4F               [12] 5394 	orl	a,r7
      001C39 70 58            [24] 5395 	jnz	00207$
                                   5396 ;	calc.c:296: (void)stack_push(&ctx->s, d0);
      001C3B E5*00            [12] 5397 	mov	a,_bp
      001C3D 24 0C            [12] 5398 	add	a,#0x0c
      001C3F F8               [12] 5399 	mov	r0,a
      001C40 74 09            [12] 5400 	mov	a,#0x09
      001C42 26               [12] 5401 	add	a,@r0
      001C43 FD               [12] 5402 	mov	r5,a
      001C44 E4               [12] 5403 	clr	a
      001C45 08               [12] 5404 	inc	r0
      001C46 36               [12] 5405 	addc	a,@r0
      001C47 FE               [12] 5406 	mov	r6,a
      001C48 08               [12] 5407 	inc	r0
      001C49 86 07            [24] 5408 	mov	ar7,@r0
      001C4B E5*00            [12] 5409 	mov	a,_bp
      001C4D 24 0F            [12] 5410 	add	a,#0x0f
      001C4F F8               [12] 5411 	mov	r0,a
      001C50 E6               [12] 5412 	mov	a,@r0
      001C51 C0 E0            [24] 5413 	push	acc
      001C53 08               [12] 5414 	inc	r0
      001C54 E6               [12] 5415 	mov	a,@r0
      001C55 C0 E0            [24] 5416 	push	acc
      001C57 08               [12] 5417 	inc	r0
      001C58 E6               [12] 5418 	mov	a,@r0
      001C59 C0 E0            [24] 5419 	push	acc
      001C5B 08               [12] 5420 	inc	r0
      001C5C E6               [12] 5421 	mov	a,@r0
      001C5D C0 E0            [24] 5422 	push	acc
      001C5F 8D 82            [24] 5423 	mov	dpl,r5
      001C61 8E 83            [24] 5424 	mov	dph,r6
      001C63 8F F0            [24] 5425 	mov	b,r7
      001C65 12r00r00         [24] 5426 	lcall	_stack_push
      001C68 E5 81            [12] 5427 	mov	a,sp
      001C6A 24 FC            [12] 5428 	add	a,#0xfc
      001C6C F5 81            [12] 5429 	mov	sp,a
                                   5430 ;	calc.c:297: printstr("\r\nstack underflow\r\n");
      001C6E 7Dr38            [12] 5431 	mov	r5,#___str_8
      001C70 7Es00            [12] 5432 	mov	r6,#(___str_8 >> 8)
      001C72 7F 80            [12] 5433 	mov	r7,#0x80
                                   5434 ;	calc.c:50: return;
      001C74                       5435 00411$:
                                   5436 ;	calc.c:48: for (; *s; s++) putchar(*s);
      001C74 8D 82            [24] 5437 	mov	dpl,r5
      001C76 8E 83            [24] 5438 	mov	dph,r6
      001C78 8F F0            [24] 5439 	mov	b,r7
      001C7A 12r00r00         [24] 5440 	lcall	__gptrget
      001C7D FC               [12] 5441 	mov	r4,a
      001C7E 70 03            [24] 5442 	jnz	01129$
      001C80 02r1DrAE         [24] 5443 	ljmp	00217$
      001C83                       5444 01129$:
      001C83 7B 00            [12] 5445 	mov	r3,#0x00
      001C85 8C 82            [24] 5446 	mov	dpl,r4
      001C87 8B 83            [24] 5447 	mov	dph,r3
      001C89 12r00r00         [24] 5448 	lcall	_putchar
      001C8C 0D               [12] 5449 	inc	r5
                                   5450 ;	calc.c:297: printstr("\r\nstack underflow\r\n");
      001C8D BD 00 E4         [24] 5451 	cjne	r5,#0x00,00411$
      001C90 0E               [12] 5452 	inc	r6
      001C91 80 E1            [24] 5453 	sjmp	00411$
      001C93                       5454 00207$:
                                   5455 ;	calc.c:299: d1 <<= ((unsigned long)d0 & 0x0000001flu);
      001C93 E5*00            [12] 5456 	mov	a,_bp
      001C95 24 0F            [12] 5457 	add	a,#0x0f
      001C97 F8               [12] 5458 	mov	r0,a
      001C98 86 07            [24] 5459 	mov	ar7,@r0
      001C9A 53 07 1F         [24] 5460 	anl	ar7,#0x1f
      001C9D E5*00            [12] 5461 	mov	a,_bp
      001C9F 24 13            [12] 5462 	add	a,#0x13
      001CA1 F8               [12] 5463 	mov	r0,a
      001CA2 86 03            [24] 5464 	mov	ar3,@r0
      001CA4 08               [12] 5465 	inc	r0
      001CA5 86 04            [24] 5466 	mov	ar4,@r0
      001CA7 08               [12] 5467 	inc	r0
      001CA8 86 05            [24] 5468 	mov	ar5,@r0
      001CAA 08               [12] 5469 	inc	r0
      001CAB 86 06            [24] 5470 	mov	ar6,@r0
      001CAD 8F F0            [24] 5471 	mov	b,r7
      001CAF 05 F0            [12] 5472 	inc	b
      001CB1 80 0C            [24] 5473 	sjmp	01132$
      001CB3                       5474 01131$:
      001CB3 EB               [12] 5475 	mov	a,r3
      001CB4 2B               [12] 5476 	add	a,r3
      001CB5 FB               [12] 5477 	mov	r3,a
      001CB6 EC               [12] 5478 	mov	a,r4
      001CB7 33               [12] 5479 	rlc	a
      001CB8 FC               [12] 5480 	mov	r4,a
      001CB9 ED               [12] 5481 	mov	a,r5
      001CBA 33               [12] 5482 	rlc	a
      001CBB FD               [12] 5483 	mov	r5,a
      001CBC EE               [12] 5484 	mov	a,r6
      001CBD 33               [12] 5485 	rlc	a
      001CBE FE               [12] 5486 	mov	r6,a
      001CBF                       5487 01132$:
      001CBF D5 F0 F1         [24] 5488 	djnz	b,01131$
      001CC2 E5*00            [12] 5489 	mov	a,_bp
      001CC4 24 13            [12] 5490 	add	a,#0x13
      001CC6 F8               [12] 5491 	mov	r0,a
      001CC7 A6 03            [24] 5492 	mov	@r0,ar3
      001CC9 08               [12] 5493 	inc	r0
      001CCA A6 04            [24] 5494 	mov	@r0,ar4
      001CCC 08               [12] 5495 	inc	r0
      001CCD A6 05            [24] 5496 	mov	@r0,ar5
      001CCF 08               [12] 5497 	inc	r0
      001CD0 A6 06            [24] 5498 	mov	@r0,ar6
                                   5499 ;	calc.c:300: (void)stack_push(&ctx->s, d1);
      001CD2 E5*00            [12] 5500 	mov	a,_bp
      001CD4 24 0C            [12] 5501 	add	a,#0x0c
      001CD6 F8               [12] 5502 	mov	r0,a
      001CD7 74 09            [12] 5503 	mov	a,#0x09
      001CD9 26               [12] 5504 	add	a,@r0
      001CDA FD               [12] 5505 	mov	r5,a
      001CDB E4               [12] 5506 	clr	a
      001CDC 08               [12] 5507 	inc	r0
      001CDD 36               [12] 5508 	addc	a,@r0
      001CDE FE               [12] 5509 	mov	r6,a
      001CDF 08               [12] 5510 	inc	r0
      001CE0 86 07            [24] 5511 	mov	ar7,@r0
      001CE2 E5*00            [12] 5512 	mov	a,_bp
      001CE4 24 13            [12] 5513 	add	a,#0x13
      001CE6 F8               [12] 5514 	mov	r0,a
      001CE7 E6               [12] 5515 	mov	a,@r0
      001CE8 C0 E0            [24] 5516 	push	acc
      001CEA 08               [12] 5517 	inc	r0
      001CEB E6               [12] 5518 	mov	a,@r0
      001CEC C0 E0            [24] 5519 	push	acc
      001CEE 08               [12] 5520 	inc	r0
      001CEF E6               [12] 5521 	mov	a,@r0
      001CF0 C0 E0            [24] 5522 	push	acc
      001CF2 08               [12] 5523 	inc	r0
      001CF3 E6               [12] 5524 	mov	a,@r0
      001CF4 C0 E0            [24] 5525 	push	acc
      001CF6 8D 82            [24] 5526 	mov	dpl,r5
      001CF8 8E 83            [24] 5527 	mov	dph,r6
      001CFA 8F F0            [24] 5528 	mov	b,r7
      001CFC 12r00r00         [24] 5529 	lcall	_stack_push
      001CFF E5 81            [12] 5530 	mov	a,sp
      001D01 24 FC            [12] 5531 	add	a,#0xfc
      001D03 F5 81            [12] 5532 	mov	sp,a
                                   5533 ;	calc.c:302: break;
      001D05 02r1DrAE         [24] 5534 	ljmp	00217$
                                   5535 ;	calc.c:303: case '~':
      001D08                       5536 00212$:
                                   5537 ;	calc.c:304: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      001D08 E5*00            [12] 5538 	mov	a,_bp
      001D0A 24 0F            [12] 5539 	add	a,#0x0f
      001D0C FF               [12] 5540 	mov	r7,a
      001D0D 7E 00            [12] 5541 	mov	r6,#0x00
      001D0F 7D 40            [12] 5542 	mov	r5,#0x40
      001D11 E5*00            [12] 5543 	mov	a,_bp
      001D13 24 0C            [12] 5544 	add	a,#0x0c
      001D15 F8               [12] 5545 	mov	r0,a
      001D16 74 09            [12] 5546 	mov	a,#0x09
      001D18 26               [12] 5547 	add	a,@r0
      001D19 FA               [12] 5548 	mov	r2,a
      001D1A E4               [12] 5549 	clr	a
      001D1B 08               [12] 5550 	inc	r0
      001D1C 36               [12] 5551 	addc	a,@r0
      001D1D FB               [12] 5552 	mov	r3,a
      001D1E 08               [12] 5553 	inc	r0
      001D1F 86 04            [24] 5554 	mov	ar4,@r0
      001D21 C0 07            [24] 5555 	push	ar7
      001D23 C0 06            [24] 5556 	push	ar6
      001D25 C0 05            [24] 5557 	push	ar5
      001D27 8A 82            [24] 5558 	mov	dpl,r2
      001D29 8B 83            [24] 5559 	mov	dph,r3
      001D2B 8C F0            [24] 5560 	mov	b,r4
      001D2D 12r00r00         [24] 5561 	lcall	_stack_pop
      001D30 AE 82            [24] 5562 	mov	r6,dpl
      001D32 AF 83            [24] 5563 	mov	r7,dph
      001D34 15 81            [12] 5564 	dec	sp
      001D36 15 81            [12] 5565 	dec	sp
      001D38 15 81            [12] 5566 	dec	sp
      001D3A EE               [12] 5567 	mov	a,r6
      001D3B 4F               [12] 5568 	orl	a,r7
      001D3C 70 22            [24] 5569 	jnz	00214$
      001D3E 7Dr38            [12] 5570 	mov	r5,#___str_8
      001D40 7Es00            [12] 5571 	mov	r6,#(___str_8 >> 8)
      001D42 7F 80            [12] 5572 	mov	r7,#0x80
                                   5573 ;	calc.c:50: return;
      001D44                       5574 00414$:
                                   5575 ;	calc.c:48: for (; *s; s++) putchar(*s);
      001D44 8D 82            [24] 5576 	mov	dpl,r5
      001D46 8E 83            [24] 5577 	mov	dph,r6
      001D48 8F F0            [24] 5578 	mov	b,r7
      001D4A 12r00r00         [24] 5579 	lcall	__gptrget
      001D4D FC               [12] 5580 	mov	r4,a
      001D4E 60 5E            [24] 5581 	jz	00217$
      001D50 7B 00            [12] 5582 	mov	r3,#0x00
      001D52 8C 82            [24] 5583 	mov	dpl,r4
      001D54 8B 83            [24] 5584 	mov	dph,r3
      001D56 12r00r00         [24] 5585 	lcall	_putchar
      001D59 0D               [12] 5586 	inc	r5
                                   5587 ;	calc.c:304: if (!stack_pop(&ctx->s, &d0)) printstr("\r\nstack underflow\r\n");
      001D5A BD 00 E7         [24] 5588 	cjne	r5,#0x00,00414$
      001D5D 0E               [12] 5589 	inc	r6
      001D5E 80 E4            [24] 5590 	sjmp	00414$
      001D60                       5591 00214$:
                                   5592 ;	calc.c:306: d0 = ~d0;
      001D60 E5*00            [12] 5593 	mov	a,_bp
      001D62 24 0F            [12] 5594 	add	a,#0x0f
      001D64 F8               [12] 5595 	mov	r0,a
      001D65 E6               [12] 5596 	mov	a,@r0
      001D66 F4               [12] 5597 	cpl	a
      001D67 F6               [12] 5598 	mov	@r0,a
      001D68 08               [12] 5599 	inc	r0
      001D69 E6               [12] 5600 	mov	a,@r0
      001D6A F4               [12] 5601 	cpl	a
      001D6B F6               [12] 5602 	mov	@r0,a
      001D6C 08               [12] 5603 	inc	r0
      001D6D E6               [12] 5604 	mov	a,@r0
      001D6E F4               [12] 5605 	cpl	a
      001D6F F6               [12] 5606 	mov	@r0,a
      001D70 08               [12] 5607 	inc	r0
      001D71 E6               [12] 5608 	mov	a,@r0
      001D72 F4               [12] 5609 	cpl	a
      001D73 F6               [12] 5610 	mov	@r0,a
                                   5611 ;	calc.c:307: (void)stack_push(&ctx->s, d0);
      001D74 E5*00            [12] 5612 	mov	a,_bp
      001D76 24 0C            [12] 5613 	add	a,#0x0c
      001D78 F8               [12] 5614 	mov	r0,a
      001D79 74 09            [12] 5615 	mov	a,#0x09
      001D7B 26               [12] 5616 	add	a,@r0
      001D7C FD               [12] 5617 	mov	r5,a
      001D7D E4               [12] 5618 	clr	a
      001D7E 08               [12] 5619 	inc	r0
      001D7F 36               [12] 5620 	addc	a,@r0
      001D80 FE               [12] 5621 	mov	r6,a
      001D81 08               [12] 5622 	inc	r0
      001D82 86 07            [24] 5623 	mov	ar7,@r0
      001D84 E5*00            [12] 5624 	mov	a,_bp
      001D86 24 0F            [12] 5625 	add	a,#0x0f
      001D88 F8               [12] 5626 	mov	r0,a
      001D89 E6               [12] 5627 	mov	a,@r0
      001D8A C0 E0            [24] 5628 	push	acc
      001D8C 08               [12] 5629 	inc	r0
      001D8D E6               [12] 5630 	mov	a,@r0
      001D8E C0 E0            [24] 5631 	push	acc
      001D90 08               [12] 5632 	inc	r0
      001D91 E6               [12] 5633 	mov	a,@r0
      001D92 C0 E0            [24] 5634 	push	acc
      001D94 08               [12] 5635 	inc	r0
      001D95 E6               [12] 5636 	mov	a,@r0
      001D96 C0 E0            [24] 5637 	push	acc
      001D98 8D 82            [24] 5638 	mov	dpl,r5
      001D9A 8E 83            [24] 5639 	mov	dph,r6
      001D9C 8F F0            [24] 5640 	mov	b,r7
      001D9E 12r00r00         [24] 5641 	lcall	_stack_push
      001DA1 E5 81            [12] 5642 	mov	a,sp
      001DA3 24 FC            [12] 5643 	add	a,#0xfc
      001DA5 F5 81            [12] 5644 	mov	sp,a
                                   5645 ;	calc.c:309: break;
                                   5646 ;	calc.c:310: default:
      001DA7 80 05            [24] 5647 	sjmp	00217$
      001DA9                       5648 00216$:
                                   5649 ;	calc.c:311: return UNDEF;
      001DA9 90 80 00         [24] 5650 	mov	dptr,#0x8000
                                   5651 ;	calc.c:312: }
      001DAC 80 03            [24] 5652 	sjmp	00416$
      001DAE                       5653 00217$:
                                   5654 ;	calc.c:314: return 1;
      001DAE 90 00 01         [24] 5655 	mov	dptr,#0x0001
      001DB1                       5656 00416$:
                                   5657 ;	calc.c:315: }
      001DB1 85*00 81         [24] 5658 	mov	sp,_bp
      001DB4 D0*00            [24] 5659 	pop	_bp
      001DB6 22               [24] 5660 	ret
                                   5661 ;------------------------------------------------------------
                                   5662 ;Allocation info for local variables in function 'push_acc'
                                   5663 ;------------------------------------------------------------
                                   5664 ;delta                     Allocated to stack - _bp -5
                                   5665 ;_ctx                      Allocated to stack - _bp +1
                                   5666 ;ctx                       Allocated to registers r2 r3 r4 
                                   5667 ;__1310720097              Allocated to registers 
                                   5668 ;s                         Allocated to registers r5 r6 r7 
                                   5669 ;sloc0                     Allocated to stack - _bp +4
                                   5670 ;------------------------------------------------------------
                                   5671 ;	calc.c:317: static int push_acc(void *_ctx, delta_t *delta) __reentrant {
                                   5672 ;	-----------------------------------------
                                   5673 ;	 function push_acc
                                   5674 ;	-----------------------------------------
      001DB7                       5675 _push_acc:
      001DB7 C0*00            [24] 5676 	push	_bp
      001DB9 85 81*00         [24] 5677 	mov	_bp,sp
      001DBC C0 82            [24] 5678 	push	dpl
      001DBE C0 83            [24] 5679 	push	dph
      001DC0 C0 F0            [24] 5680 	push	b
      001DC2 E5 81            [12] 5681 	mov	a,sp
      001DC4 24 04            [12] 5682 	add	a,#0x04
      001DC6 F5 81            [12] 5683 	mov	sp,a
                                   5684 ;	calc.c:318: struct ctx *ctx = (struct ctx *)_ctx;
      001DC8 A8*00            [24] 5685 	mov	r0,_bp
      001DCA 08               [12] 5686 	inc	r0
      001DCB 86 02            [24] 5687 	mov	ar2,@r0
      001DCD 08               [12] 5688 	inc	r0
      001DCE 86 03            [24] 5689 	mov	ar3,@r0
      001DD0 08               [12] 5690 	inc	r0
      001DD1 86 04            [24] 5691 	mov	ar4,@r0
                                   5692 ;	calc.c:322: ctx->acc_valid = 0;
      001DD3 74 06            [12] 5693 	mov	a,#0x06
      001DD5 2A               [12] 5694 	add	a,r2
      001DD6 FD               [12] 5695 	mov	r5,a
      001DD7 E4               [12] 5696 	clr	a
      001DD8 3B               [12] 5697 	addc	a,r3
      001DD9 FE               [12] 5698 	mov	r6,a
      001DDA 8C 07            [24] 5699 	mov	ar7,r4
      001DDC 8D 82            [24] 5700 	mov	dpl,r5
      001DDE 8E 83            [24] 5701 	mov	dph,r6
      001DE0 8F F0            [24] 5702 	mov	b,r7
      001DE2 E4               [12] 5703 	clr	a
      001DE3 12r00r00         [24] 5704 	lcall	__gptrput
                                   5705 ;	calc.c:323: if (!stack_push(&ctx->s, ctx->acc)) printstr("\r\nstack overflow\r\n");
      001DE6 74 02            [12] 5706 	mov	a,#0x02
      001DE8 2A               [12] 5707 	add	a,r2
      001DE9 FF               [12] 5708 	mov	r7,a
      001DEA E4               [12] 5709 	clr	a
      001DEB 3B               [12] 5710 	addc	a,r3
      001DEC FD               [12] 5711 	mov	r5,a
      001DED 8C 06            [24] 5712 	mov	ar6,r4
      001DEF 8F 82            [24] 5713 	mov	dpl,r7
      001DF1 8D 83            [24] 5714 	mov	dph,r5
      001DF3 8E F0            [24] 5715 	mov	b,r6
      001DF5 E5*00            [12] 5716 	mov	a,_bp
      001DF7 24 04            [12] 5717 	add	a,#0x04
      001DF9 F8               [12] 5718 	mov	r0,a
      001DFA 12r00r00         [24] 5719 	lcall	__gptrget
      001DFD F6               [12] 5720 	mov	@r0,a
      001DFE A3               [24] 5721 	inc	dptr
      001DFF 12r00r00         [24] 5722 	lcall	__gptrget
      001E02 08               [12] 5723 	inc	r0
      001E03 F6               [12] 5724 	mov	@r0,a
      001E04 A3               [24] 5725 	inc	dptr
      001E05 12r00r00         [24] 5726 	lcall	__gptrget
      001E08 08               [12] 5727 	inc	r0
      001E09 F6               [12] 5728 	mov	@r0,a
      001E0A A3               [24] 5729 	inc	dptr
      001E0B 12r00r00         [24] 5730 	lcall	__gptrget
      001E0E 08               [12] 5731 	inc	r0
      001E0F F6               [12] 5732 	mov	@r0,a
      001E10 74 09            [12] 5733 	mov	a,#0x09
      001E12 2A               [12] 5734 	add	a,r2
      001E13 FA               [12] 5735 	mov	r2,a
      001E14 E4               [12] 5736 	clr	a
      001E15 3B               [12] 5737 	addc	a,r3
      001E16 FB               [12] 5738 	mov	r3,a
      001E17 8C 07            [24] 5739 	mov	ar7,r4
      001E19 E5*00            [12] 5740 	mov	a,_bp
      001E1B 24 04            [12] 5741 	add	a,#0x04
      001E1D F8               [12] 5742 	mov	r0,a
      001E1E E6               [12] 5743 	mov	a,@r0
      001E1F C0 E0            [24] 5744 	push	acc
      001E21 08               [12] 5745 	inc	r0
      001E22 E6               [12] 5746 	mov	a,@r0
      001E23 C0 E0            [24] 5747 	push	acc
      001E25 08               [12] 5748 	inc	r0
      001E26 E6               [12] 5749 	mov	a,@r0
      001E27 C0 E0            [24] 5750 	push	acc
      001E29 08               [12] 5751 	inc	r0
      001E2A E6               [12] 5752 	mov	a,@r0
      001E2B C0 E0            [24] 5753 	push	acc
      001E2D 8A 82            [24] 5754 	mov	dpl,r2
      001E2F 8B 83            [24] 5755 	mov	dph,r3
      001E31 8F F0            [24] 5756 	mov	b,r7
      001E33 12r00r00         [24] 5757 	lcall	_stack_push
      001E36 AE 82            [24] 5758 	mov	r6,dpl
      001E38 AF 83            [24] 5759 	mov	r7,dph
      001E3A E5 81            [12] 5760 	mov	a,sp
      001E3C 24 FC            [12] 5761 	add	a,#0xfc
      001E3E F5 81            [12] 5762 	mov	sp,a
      001E40 EE               [12] 5763 	mov	a,r6
      001E41 4F               [12] 5764 	orl	a,r7
      001E42 70 22            [24] 5765 	jnz	00102$
      001E44 7Dr61            [12] 5766 	mov	r5,#___str_10
      001E46 7Es00            [12] 5767 	mov	r6,#(___str_10 >> 8)
      001E48 7F 80            [12] 5768 	mov	r7,#0x80
                                   5769 ;	calc.c:50: return;
      001E4A                       5770 00109$:
                                   5771 ;	calc.c:48: for (; *s; s++) putchar(*s);
      001E4A 8D 82            [24] 5772 	mov	dpl,r5
      001E4C 8E 83            [24] 5773 	mov	dph,r6
      001E4E 8F F0            [24] 5774 	mov	b,r7
      001E50 12r00r00         [24] 5775 	lcall	__gptrget
      001E53 FC               [12] 5776 	mov	r4,a
      001E54 60 10            [24] 5777 	jz	00102$
      001E56 7B 00            [12] 5778 	mov	r3,#0x00
      001E58 8C 82            [24] 5779 	mov	dpl,r4
      001E5A 8B 83            [24] 5780 	mov	dph,r3
      001E5C 12r00r00         [24] 5781 	lcall	_putchar
      001E5F 0D               [12] 5782 	inc	r5
                                   5783 ;	calc.c:323: if (!stack_push(&ctx->s, ctx->acc)) printstr("\r\nstack overflow\r\n");
      001E60 BD 00 E7         [24] 5784 	cjne	r5,#0x00,00109$
      001E63 0E               [12] 5785 	inc	r6
      001E64 80 E4            [24] 5786 	sjmp	00109$
      001E66                       5787 00102$:
                                   5788 ;	calc.c:325: if (delta->event == EVENT_OP) return operator(_ctx, delta);
      001E66 E5*00            [12] 5789 	mov	a,_bp
      001E68 24 FB            [12] 5790 	add	a,#0xfb
      001E6A F8               [12] 5791 	mov	r0,a
      001E6B 86 05            [24] 5792 	mov	ar5,@r0
      001E6D 08               [12] 5793 	inc	r0
      001E6E 86 06            [24] 5794 	mov	ar6,@r0
      001E70 08               [12] 5795 	inc	r0
      001E71 86 07            [24] 5796 	mov	ar7,@r0
      001E73 74 02            [12] 5797 	mov	a,#0x02
      001E75 2D               [12] 5798 	add	a,r5
      001E76 FA               [12] 5799 	mov	r2,a
      001E77 E4               [12] 5800 	clr	a
      001E78 3E               [12] 5801 	addc	a,r6
      001E79 FB               [12] 5802 	mov	r3,a
      001E7A 8F 04            [24] 5803 	mov	ar4,r7
      001E7C 8A 82            [24] 5804 	mov	dpl,r2
      001E7E 8B 83            [24] 5805 	mov	dph,r3
      001E80 8C F0            [24] 5806 	mov	b,r4
      001E82 12r00r00         [24] 5807 	lcall	__gptrget
      001E85 FA               [12] 5808 	mov	r2,a
      001E86 A3               [24] 5809 	inc	dptr
      001E87 12r00r00         [24] 5810 	lcall	__gptrget
      001E8A FB               [12] 5811 	mov	r3,a
      001E8B BA 02 27         [24] 5812 	cjne	r2,#0x02,00104$
      001E8E BB 00 24         [24] 5813 	cjne	r3,#0x00,00104$
      001E91 C0 05            [24] 5814 	push	ar5
      001E93 C0 06            [24] 5815 	push	ar6
      001E95 C0 07            [24] 5816 	push	ar7
      001E97 A8*00            [24] 5817 	mov	r0,_bp
      001E99 08               [12] 5818 	inc	r0
      001E9A 86 82            [24] 5819 	mov	dpl,@r0
      001E9C 08               [12] 5820 	inc	r0
      001E9D 86 83            [24] 5821 	mov	dph,@r0
      001E9F 08               [12] 5822 	inc	r0
      001EA0 86 F0            [24] 5823 	mov	b,@r0
      001EA2 12r06r24         [24] 5824 	lcall	_operator
      001EA5 AE 82            [24] 5825 	mov	r6,dpl
      001EA7 AF 83            [24] 5826 	mov	r7,dph
      001EA9 15 81            [12] 5827 	dec	sp
      001EAB 15 81            [12] 5828 	dec	sp
      001EAD 15 81            [12] 5829 	dec	sp
      001EAF 8E 82            [24] 5830 	mov	dpl,r6
      001EB1 8F 83            [24] 5831 	mov	dph,r7
      001EB3 80 03            [24] 5832 	sjmp	00111$
      001EB5                       5833 00104$:
                                   5834 ;	calc.c:326: else return 1;
      001EB5 90 00 01         [24] 5835 	mov	dptr,#0x0001
      001EB8                       5836 00111$:
                                   5837 ;	calc.c:327: }
      001EB8 85*00 81         [24] 5838 	mov	sp,_bp
      001EBB D0*00            [24] 5839 	pop	_bp
      001EBD 22               [24] 5840 	ret
                                   5841 ;------------------------------------------------------------
                                   5842 ;Allocation info for local variables in function 'reset_acc'
                                   5843 ;------------------------------------------------------------
                                   5844 ;delta                     Allocated to stack - _bp -5
                                   5845 ;_ctx                      Allocated to registers r5 r6 r7 
                                   5846 ;ctx                       Allocated to registers r5 r6 r7 
                                   5847 ;------------------------------------------------------------
                                   5848 ;	calc.c:329: static int reset_acc(void *_ctx, delta_t *delta) __reentrant {
                                   5849 ;	-----------------------------------------
                                   5850 ;	 function reset_acc
                                   5851 ;	-----------------------------------------
      001EBE                       5852 _reset_acc:
      001EBE C0*00            [24] 5853 	push	_bp
      001EC0 85 81*00         [24] 5854 	mov	_bp,sp
      001EC3 AD 82            [24] 5855 	mov	r5,dpl
      001EC5 AE 83            [24] 5856 	mov	r6,dph
      001EC7 AF F0            [24] 5857 	mov	r7,b
                                   5858 ;	calc.c:330: struct ctx *ctx = (struct ctx *)_ctx;
                                   5859 ;	calc.c:332: if (delta->event == EVENT_RSTA_I) ctx->acc_valid = 0;
      001EC9 E5*00            [12] 5860 	mov	a,_bp
      001ECB 24 FB            [12] 5861 	add	a,#0xfb
      001ECD F8               [12] 5862 	mov	r0,a
      001ECE 86 02            [24] 5863 	mov	ar2,@r0
      001ED0 08               [12] 5864 	inc	r0
      001ED1 86 03            [24] 5865 	mov	ar3,@r0
      001ED3 08               [12] 5866 	inc	r0
      001ED4 86 04            [24] 5867 	mov	ar4,@r0
      001ED6 74 02            [12] 5868 	mov	a,#0x02
      001ED8 2A               [12] 5869 	add	a,r2
      001ED9 FA               [12] 5870 	mov	r2,a
      001EDA E4               [12] 5871 	clr	a
      001EDB 3B               [12] 5872 	addc	a,r3
      001EDC FB               [12] 5873 	mov	r3,a
      001EDD 8A 82            [24] 5874 	mov	dpl,r2
      001EDF 8B 83            [24] 5875 	mov	dph,r3
      001EE1 8C F0            [24] 5876 	mov	b,r4
      001EE3 12r00r00         [24] 5877 	lcall	__gptrget
      001EE6 FA               [12] 5878 	mov	r2,a
      001EE7 A3               [24] 5879 	inc	dptr
      001EE8 12r00r00         [24] 5880 	lcall	__gptrget
      001EEB FB               [12] 5881 	mov	r3,a
      001EEC BA 06 16         [24] 5882 	cjne	r2,#0x06,00102$
      001EEF BB 00 13         [24] 5883 	cjne	r3,#0x00,00102$
      001EF2 74 06            [12] 5884 	mov	a,#0x06
      001EF4 2D               [12] 5885 	add	a,r5
      001EF5 FA               [12] 5886 	mov	r2,a
      001EF6 E4               [12] 5887 	clr	a
      001EF7 3E               [12] 5888 	addc	a,r6
      001EF8 FB               [12] 5889 	mov	r3,a
      001EF9 8F 04            [24] 5890 	mov	ar4,r7
      001EFB 8A 82            [24] 5891 	mov	dpl,r2
      001EFD 8B 83            [24] 5892 	mov	dph,r3
      001EFF 8C F0            [24] 5893 	mov	b,r4
      001F01 E4               [12] 5894 	clr	a
      001F02 12r00r00         [24] 5895 	lcall	__gptrput
      001F05                       5896 00102$:
                                   5897 ;	calc.c:333: ctx->acc = 0l;
      001F05 74 02            [12] 5898 	mov	a,#0x02
      001F07 2D               [12] 5899 	add	a,r5
      001F08 FD               [12] 5900 	mov	r5,a
      001F09 E4               [12] 5901 	clr	a
      001F0A 3E               [12] 5902 	addc	a,r6
      001F0B FE               [12] 5903 	mov	r6,a
      001F0C 8D 82            [24] 5904 	mov	dpl,r5
      001F0E 8E 83            [24] 5905 	mov	dph,r6
      001F10 8F F0            [24] 5906 	mov	b,r7
      001F12 E4               [12] 5907 	clr	a
      001F13 12r00r00         [24] 5908 	lcall	__gptrput
      001F16 A3               [24] 5909 	inc	dptr
      001F17 12r00r00         [24] 5910 	lcall	__gptrput
      001F1A A3               [24] 5911 	inc	dptr
      001F1B 12r00r00         [24] 5912 	lcall	__gptrput
      001F1E A3               [24] 5913 	inc	dptr
      001F1F 12r00r00         [24] 5914 	lcall	__gptrput
                                   5915 ;	calc.c:335: return 1;
      001F22 90 00 01         [24] 5916 	mov	dptr,#0x0001
                                   5917 ;	calc.c:336: }
      001F25 D0*00            [24] 5918 	pop	_bp
      001F27 22               [24] 5919 	ret
                                   5920 ;------------------------------------------------------------
                                   5921 ;Allocation info for local variables in function 'reset_base'
                                   5922 ;------------------------------------------------------------
                                   5923 ;delta                     Allocated to stack - _bp -5
                                   5924 ;_ctx                      Allocated to registers r5 r6 r7 
                                   5925 ;ctx                       Allocated to registers r5 r6 r7 
                                   5926 ;------------------------------------------------------------
                                   5927 ;	calc.c:338: static int reset_base(void *_ctx, delta_t *delta) __reentrant {
                                   5928 ;	-----------------------------------------
                                   5929 ;	 function reset_base
                                   5930 ;	-----------------------------------------
      001F28                       5931 _reset_base:
      001F28 C0*00            [24] 5932 	push	_bp
      001F2A 85 81*00         [24] 5933 	mov	_bp,sp
      001F2D AD 82            [24] 5934 	mov	r5,dpl
      001F2F AE 83            [24] 5935 	mov	r6,dph
      001F31 AF F0            [24] 5936 	mov	r7,b
                                   5937 ;	calc.c:339: struct ctx *ctx = (struct ctx *)_ctx;
                                   5938 ;	calc.c:343: switch (ctx->digit[0]) {
      001F33 74 07            [12] 5939 	mov	a,#0x07
      001F35 2D               [12] 5940 	add	a,r5
      001F36 FA               [12] 5941 	mov	r2,a
      001F37 E4               [12] 5942 	clr	a
      001F38 3E               [12] 5943 	addc	a,r6
      001F39 FB               [12] 5944 	mov	r3,a
      001F3A 8F 04            [24] 5945 	mov	ar4,r7
      001F3C 8A 82            [24] 5946 	mov	dpl,r2
      001F3E 8B 83            [24] 5947 	mov	dph,r3
      001F40 8C F0            [24] 5948 	mov	b,r4
      001F42 12r00r00         [24] 5949 	lcall	__gptrget
      001F45 FC               [12] 5950 	mov	r4,a
      001F46 BC 48 02         [24] 5951 	cjne	r4,#0x48,00124$
      001F49 80 0F            [24] 5952 	sjmp	00101$
      001F4B                       5953 00124$:
      001F4B BC 4F 02         [24] 5954 	cjne	r4,#0x4f,00125$
      001F4E 80 2E            [24] 5955 	sjmp	00103$
      001F50                       5956 00125$:
      001F50 BC 68 02         [24] 5957 	cjne	r4,#0x68,00126$
      001F53 80 17            [24] 5958 	sjmp	00102$
      001F55                       5959 00126$:
                                   5960 ;	calc.c:344: case 'H':
      001F55 BC 6F 48         [24] 5961 	cjne	r4,#0x6f,00105$
      001F58 80 36            [24] 5962 	sjmp	00104$
      001F5A                       5963 00101$:
                                   5964 ;	calc.c:345: ctx->base = 16;
      001F5A 8D 82            [24] 5965 	mov	dpl,r5
      001F5C 8E 83            [24] 5966 	mov	dph,r6
      001F5E 8F F0            [24] 5967 	mov	b,r7
      001F60 74 10            [12] 5968 	mov	a,#0x10
      001F62 12r00r00         [24] 5969 	lcall	__gptrput
      001F65 A3               [24] 5970 	inc	dptr
      001F66 E4               [12] 5971 	clr	a
      001F67 12r00r00         [24] 5972 	lcall	__gptrput
                                   5973 ;	calc.c:346: break;
                                   5974 ;	calc.c:347: case 'h':
      001F6A 80 34            [24] 5975 	sjmp	00105$
      001F6C                       5976 00102$:
                                   5977 ;	calc.c:348: ctx->base = 10;
      001F6C 8D 82            [24] 5978 	mov	dpl,r5
      001F6E 8E 83            [24] 5979 	mov	dph,r6
      001F70 8F F0            [24] 5980 	mov	b,r7
      001F72 74 0A            [12] 5981 	mov	a,#0x0a
      001F74 12r00r00         [24] 5982 	lcall	__gptrput
      001F77 A3               [24] 5983 	inc	dptr
      001F78 E4               [12] 5984 	clr	a
      001F79 12r00r00         [24] 5985 	lcall	__gptrput
                                   5986 ;	calc.c:349: break;
                                   5987 ;	calc.c:350: case 'O':
      001F7C 80 22            [24] 5988 	sjmp	00105$
      001F7E                       5989 00103$:
                                   5990 ;	calc.c:351: ctx->base = 8;
      001F7E 8D 82            [24] 5991 	mov	dpl,r5
      001F80 8E 83            [24] 5992 	mov	dph,r6
      001F82 8F F0            [24] 5993 	mov	b,r7
      001F84 74 08            [12] 5994 	mov	a,#0x08
      001F86 12r00r00         [24] 5995 	lcall	__gptrput
      001F89 A3               [24] 5996 	inc	dptr
      001F8A E4               [12] 5997 	clr	a
      001F8B 12r00r00         [24] 5998 	lcall	__gptrput
                                   5999 ;	calc.c:352: break;
                                   6000 ;	calc.c:353: case 'o':
      001F8E 80 10            [24] 6001 	sjmp	00105$
      001F90                       6002 00104$:
                                   6003 ;	calc.c:354: ctx->base = 2;
      001F90 8D 82            [24] 6004 	mov	dpl,r5
      001F92 8E 83            [24] 6005 	mov	dph,r6
      001F94 8F F0            [24] 6006 	mov	b,r7
      001F96 74 02            [12] 6007 	mov	a,#0x02
      001F98 12r00r00         [24] 6008 	lcall	__gptrput
      001F9B A3               [24] 6009 	inc	dptr
      001F9C E4               [12] 6010 	clr	a
      001F9D 12r00r00         [24] 6011 	lcall	__gptrput
                                   6012 ;	calc.c:356: }
      001FA0                       6013 00105$:
                                   6014 ;	calc.c:358: return 1;
      001FA0 90 00 01         [24] 6015 	mov	dptr,#0x0001
                                   6016 ;	calc.c:359: }
      001FA3 D0*00            [24] 6017 	pop	_bp
      001FA5 22               [24] 6018 	ret
                                   6019 ;------------------------------------------------------------
                                   6020 ;Allocation info for local variables in function 'help'
                                   6021 ;------------------------------------------------------------
                                   6022 ;delta                     Allocated to stack - _bp -5
                                   6023 ;_ctx                      Allocated to registers r5 r6 r7 
                                   6024 ;ctx                       Allocated to stack - _bp +4
                                   6025 ;__1310720099              Allocated to registers 
                                   6026 ;d                         Allocated to stack - _bp +7
                                   6027 ;mask                      Allocated to stack - _bp +11
                                   6028 ;__1310720101              Allocated to registers 
                                   6029 ;s                         Allocated to registers r5 r6 r7 
                                   6030 ;__1310720103              Allocated to registers 
                                   6031 ;s                         Allocated to registers r5 r6 r7 
                                   6032 ;__1310720105              Allocated to registers 
                                   6033 ;s                         Allocated to registers r5 r6 r7 
                                   6034 ;__1310720107              Allocated to registers 
                                   6035 ;s                         Allocated to registers r5 r6 r7 
                                   6036 ;__1310720109              Allocated to registers 
                                   6037 ;s                         Allocated to registers r5 r6 r7 
                                   6038 ;__1310720111              Allocated to registers 
                                   6039 ;s                         Allocated to registers r5 r6 r7 
                                   6040 ;__1310720113              Allocated to registers 
                                   6041 ;s                         Allocated to registers r5 r6 r7 
                                   6042 ;__1310720115              Allocated to registers 
                                   6043 ;s                         Allocated to registers r5 r6 r7 
                                   6044 ;__1310720117              Allocated to registers 
                                   6045 ;s                         Allocated to registers r5 r6 r7 
                                   6046 ;__1310720119              Allocated to registers 
                                   6047 ;s                         Allocated to registers r5 r6 r7 
                                   6048 ;__1310720121              Allocated to registers 
                                   6049 ;s                         Allocated to registers r5 r6 r7 
                                   6050 ;__1310720123              Allocated to registers 
                                   6051 ;s                         Allocated to registers r5 r6 r7 
                                   6052 ;__1310720125              Allocated to registers 
                                   6053 ;s                         Allocated to registers r5 r6 r7 
                                   6054 ;__1310720127              Allocated to registers 
                                   6055 ;s                         Allocated to registers r5 r6 r7 
                                   6056 ;__1310720129              Allocated to registers 
                                   6057 ;s                         Allocated to registers r5 r6 r7 
                                   6058 ;__1310720131              Allocated to registers 
                                   6059 ;s                         Allocated to registers r5 r6 r7 
                                   6060 ;__1310720133              Allocated to registers 
                                   6061 ;s                         Allocated to registers r5 r6 r7 
                                   6062 ;__1310720135              Allocated to registers 
                                   6063 ;s                         Allocated to registers r5 r6 r7 
                                   6064 ;__1310720137              Allocated to registers 
                                   6065 ;s                         Allocated to registers r5 r6 r7 
                                   6066 ;__1310720139              Allocated to registers 
                                   6067 ;s                         Allocated to registers r5 r6 r7 
                                   6068 ;__1310720141              Allocated to registers 
                                   6069 ;s                         Allocated to registers r5 r6 r7 
                                   6070 ;__1310720143              Allocated to registers 
                                   6071 ;s                         Allocated to registers r5 r6 r7 
                                   6072 ;__1310720145              Allocated to registers 
                                   6073 ;s                         Allocated to registers r5 r6 r7 
                                   6074 ;__1310720147              Allocated to registers 
                                   6075 ;s                         Allocated to registers r5 r6 r7 
                                   6076 ;sloc0                     Allocated to stack - _bp +1
                                   6077 ;------------------------------------------------------------
                                   6078 ;	calc.c:361: static int help(void *_ctx, delta_t *delta) __reentrant {
                                   6079 ;	-----------------------------------------
                                   6080 ;	 function help
                                   6081 ;	-----------------------------------------
      001FA6                       6082 _help:
      001FA6 C0*00            [24] 6083 	push	_bp
      001FA8 E5 81            [12] 6084 	mov	a,sp
      001FAA F5*00            [12] 6085 	mov	_bp,a
      001FAC 24 0E            [12] 6086 	add	a,#0x0e
      001FAE F5 81            [12] 6087 	mov	sp,a
      001FB0 AD 82            [24] 6088 	mov	r5,dpl
      001FB2 AE 83            [24] 6089 	mov	r6,dph
      001FB4 AF F0            [24] 6090 	mov	r7,b
                                   6091 ;	calc.c:362: struct ctx *ctx = (struct ctx *)_ctx;
      001FB6 E5*00            [12] 6092 	mov	a,_bp
      001FB8 24 04            [12] 6093 	add	a,#0x04
      001FBA F8               [12] 6094 	mov	r0,a
      001FBB A6 05            [24] 6095 	mov	@r0,ar5
      001FBD 08               [12] 6096 	inc	r0
      001FBE A6 06            [24] 6097 	mov	@r0,ar6
      001FC0 08               [12] 6098 	inc	r0
      001FC1 A6 07            [24] 6099 	mov	@r0,ar7
                                   6100 ;	calc.c:365: printf("\r\nbase = %d, ", ctx->base);
      001FC3 E5*00            [12] 6101 	mov	a,_bp
      001FC5 24 04            [12] 6102 	add	a,#0x04
      001FC7 F8               [12] 6103 	mov	r0,a
      001FC8 86 82            [24] 6104 	mov	dpl,@r0
      001FCA 08               [12] 6105 	inc	r0
      001FCB 86 83            [24] 6106 	mov	dph,@r0
      001FCD 08               [12] 6107 	inc	r0
      001FCE 86 F0            [24] 6108 	mov	b,@r0
      001FD0 12r00r00         [24] 6109 	lcall	__gptrget
      001FD3 FB               [12] 6110 	mov	r3,a
      001FD4 A3               [24] 6111 	inc	dptr
      001FD5 12r00r00         [24] 6112 	lcall	__gptrget
      001FD8 FC               [12] 6113 	mov	r4,a
      001FD9 C0 03            [24] 6114 	push	ar3
      001FDB C0 04            [24] 6115 	push	ar4
      001FDD 74r74            [12] 6116 	mov	a,#___str_11
      001FDF C0 E0            [24] 6117 	push	acc
      001FE1 74s00            [12] 6118 	mov	a,#(___str_11 >> 8)
      001FE3 C0 E0            [24] 6119 	push	acc
      001FE5 74 80            [12] 6120 	mov	a,#0x80
      001FE7 C0 E0            [24] 6121 	push	acc
      001FE9 12r00r00         [24] 6122 	lcall	_printf
      001FEC E5 81            [12] 6123 	mov	a,sp
      001FEE 24 FB            [12] 6124 	add	a,#0xfb
      001FF0 F5 81            [12] 6125 	mov	sp,a
                                   6126 ;	calc.c:366: printf("acc = %ld / ", ctx->acc);
      001FF2 E5*00            [12] 6127 	mov	a,_bp
      001FF4 24 04            [12] 6128 	add	a,#0x04
      001FF6 F8               [12] 6129 	mov	r0,a
      001FF7 A9*00            [24] 6130 	mov	r1,_bp
      001FF9 09               [12] 6131 	inc	r1
      001FFA 74 02            [12] 6132 	mov	a,#0x02
      001FFC 26               [12] 6133 	add	a,@r0
      001FFD F7               [12] 6134 	mov	@r1,a
      001FFE E4               [12] 6135 	clr	a
      001FFF 08               [12] 6136 	inc	r0
      002000 36               [12] 6137 	addc	a,@r0
      002001 09               [12] 6138 	inc	r1
      002002 F7               [12] 6139 	mov	@r1,a
      002003 08               [12] 6140 	inc	r0
      002004 09               [12] 6141 	inc	r1
      002005 E6               [12] 6142 	mov	a,@r0
      002006 F7               [12] 6143 	mov	@r1,a
      002007 A8*00            [24] 6144 	mov	r0,_bp
      002009 08               [12] 6145 	inc	r0
      00200A 86 82            [24] 6146 	mov	dpl,@r0
      00200C 08               [12] 6147 	inc	r0
      00200D 86 83            [24] 6148 	mov	dph,@r0
      00200F 08               [12] 6149 	inc	r0
      002010 86 F0            [24] 6150 	mov	b,@r0
      002012 12r00r00         [24] 6151 	lcall	__gptrget
      002015 FC               [12] 6152 	mov	r4,a
      002016 A3               [24] 6153 	inc	dptr
      002017 12r00r00         [24] 6154 	lcall	__gptrget
      00201A FD               [12] 6155 	mov	r5,a
      00201B A3               [24] 6156 	inc	dptr
      00201C 12r00r00         [24] 6157 	lcall	__gptrget
      00201F FE               [12] 6158 	mov	r6,a
      002020 A3               [24] 6159 	inc	dptr
      002021 12r00r00         [24] 6160 	lcall	__gptrget
      002024 FF               [12] 6161 	mov	r7,a
      002025 C0 04            [24] 6162 	push	ar4
      002027 C0 05            [24] 6163 	push	ar5
      002029 C0 06            [24] 6164 	push	ar6
      00202B C0 07            [24] 6165 	push	ar7
      00202D 74r82            [12] 6166 	mov	a,#___str_12
      00202F C0 E0            [24] 6167 	push	acc
      002031 74s00            [12] 6168 	mov	a,#(___str_12 >> 8)
      002033 C0 E0            [24] 6169 	push	acc
      002035 74 80            [12] 6170 	mov	a,#0x80
      002037 C0 E0            [24] 6171 	push	acc
      002039 12r00r00         [24] 6172 	lcall	_printf
      00203C E5 81            [12] 6173 	mov	a,sp
      00203E 24 F9            [12] 6174 	add	a,#0xf9
      002040 F5 81            [12] 6175 	mov	sp,a
                                   6176 ;	calc.c:367: printf("%08lx / ", ctx->acc);
      002042 A8*00            [24] 6177 	mov	r0,_bp
      002044 08               [12] 6178 	inc	r0
      002045 86 82            [24] 6179 	mov	dpl,@r0
      002047 08               [12] 6180 	inc	r0
      002048 86 83            [24] 6181 	mov	dph,@r0
      00204A 08               [12] 6182 	inc	r0
      00204B 86 F0            [24] 6183 	mov	b,@r0
      00204D 12r00r00         [24] 6184 	lcall	__gptrget
      002050 FC               [12] 6185 	mov	r4,a
      002051 A3               [24] 6186 	inc	dptr
      002052 12r00r00         [24] 6187 	lcall	__gptrget
      002055 FD               [12] 6188 	mov	r5,a
      002056 A3               [24] 6189 	inc	dptr
      002057 12r00r00         [24] 6190 	lcall	__gptrget
      00205A FE               [12] 6191 	mov	r6,a
      00205B A3               [24] 6192 	inc	dptr
      00205C 12r00r00         [24] 6193 	lcall	__gptrget
      00205F FF               [12] 6194 	mov	r7,a
      002060 C0 04            [24] 6195 	push	ar4
      002062 C0 05            [24] 6196 	push	ar5
      002064 C0 06            [24] 6197 	push	ar6
      002066 C0 07            [24] 6198 	push	ar7
      002068 74r23            [12] 6199 	mov	a,#___str_4
      00206A C0 E0            [24] 6200 	push	acc
      00206C 74s00            [12] 6201 	mov	a,#(___str_4 >> 8)
      00206E C0 E0            [24] 6202 	push	acc
      002070 74 80            [12] 6203 	mov	a,#0x80
      002072 C0 E0            [24] 6204 	push	acc
      002074 12r00r00         [24] 6205 	lcall	_printf
      002077 E5 81            [12] 6206 	mov	a,sp
      002079 24 F9            [12] 6207 	add	a,#0xf9
      00207B F5 81            [12] 6208 	mov	sp,a
                                   6209 ;	calc.c:368: printbin(ctx->acc);
      00207D A8*00            [24] 6210 	mov	r0,_bp
      00207F 08               [12] 6211 	inc	r0
      002080 86 82            [24] 6212 	mov	dpl,@r0
      002082 08               [12] 6213 	inc	r0
      002083 86 83            [24] 6214 	mov	dph,@r0
      002085 08               [12] 6215 	inc	r0
      002086 86 F0            [24] 6216 	mov	b,@r0
      002088 E5*00            [12] 6217 	mov	a,_bp
      00208A 24 07            [12] 6218 	add	a,#0x07
      00208C F9               [12] 6219 	mov	r1,a
      00208D 12r00r00         [24] 6220 	lcall	__gptrget
      002090 F7               [12] 6221 	mov	@r1,a
      002091 A3               [24] 6222 	inc	dptr
      002092 12r00r00         [24] 6223 	lcall	__gptrget
      002095 09               [12] 6224 	inc	r1
      002096 F7               [12] 6225 	mov	@r1,a
      002097 A3               [24] 6226 	inc	dptr
      002098 12r00r00         [24] 6227 	lcall	__gptrget
      00209B 09               [12] 6228 	inc	r1
      00209C F7               [12] 6229 	mov	@r1,a
      00209D A3               [24] 6230 	inc	dptr
      00209E 12r00r00         [24] 6231 	lcall	__gptrget
      0020A1 09               [12] 6232 	inc	r1
      0020A2 F7               [12] 6233 	mov	@r1,a
                                   6234 ;	calc.c:56: for (mask = 0x80000000lu; mask; mask >>= 1)
      0020A3 E5*00            [12] 6235 	mov	a,_bp
      0020A5 24 0B            [12] 6236 	add	a,#0x0b
      0020A7 F8               [12] 6237 	mov	r0,a
      0020A8 E4               [12] 6238 	clr	a
      0020A9 F6               [12] 6239 	mov	@r0,a
      0020AA 08               [12] 6240 	inc	r0
      0020AB F6               [12] 6241 	mov	@r0,a
      0020AC 08               [12] 6242 	inc	r0
      0020AD F6               [12] 6243 	mov	@r0,a
      0020AE 08               [12] 6244 	inc	r0
      0020AF 76 80            [12] 6245 	mov	@r0,#0x80
      0020B1                       6246 00151$:
                                   6247 ;	calc.c:57: (void)putchar((d & mask) ? (int)'1' : (int)'0');
      0020B1 E5*00            [12] 6248 	mov	a,_bp
      0020B3 24 07            [12] 6249 	add	a,#0x07
      0020B5 F8               [12] 6250 	mov	r0,a
      0020B6 86 04            [24] 6251 	mov	ar4,@r0
      0020B8 08               [12] 6252 	inc	r0
      0020B9 86 05            [24] 6253 	mov	ar5,@r0
      0020BB 08               [12] 6254 	inc	r0
      0020BC 86 06            [24] 6255 	mov	ar6,@r0
      0020BE 08               [12] 6256 	inc	r0
      0020BF 86 07            [24] 6257 	mov	ar7,@r0
      0020C1 E5*00            [12] 6258 	mov	a,_bp
      0020C3 24 0B            [12] 6259 	add	a,#0x0b
      0020C5 F8               [12] 6260 	mov	r0,a
      0020C6 E6               [12] 6261 	mov	a,@r0
      0020C7 52 04            [12] 6262 	anl	ar4,a
      0020C9 08               [12] 6263 	inc	r0
      0020CA E6               [12] 6264 	mov	a,@r0
      0020CB 52 05            [12] 6265 	anl	ar5,a
      0020CD 08               [12] 6266 	inc	r0
      0020CE E6               [12] 6267 	mov	a,@r0
      0020CF 52 06            [12] 6268 	anl	ar6,a
      0020D1 08               [12] 6269 	inc	r0
      0020D2 E6               [12] 6270 	mov	a,@r0
      0020D3 52 07            [12] 6271 	anl	ar7,a
      0020D5 EC               [12] 6272 	mov	a,r4
      0020D6 4D               [12] 6273 	orl	a,r5
      0020D7 4E               [12] 6274 	orl	a,r6
      0020D8 4F               [12] 6275 	orl	a,r7
      0020D9 60 06            [24] 6276 	jz	00227$
      0020DB 7E 31            [12] 6277 	mov	r6,#0x31
      0020DD 7F 00            [12] 6278 	mov	r7,#0x00
      0020DF 80 04            [24] 6279 	sjmp	00228$
      0020E1                       6280 00227$:
      0020E1 7E 30            [12] 6281 	mov	r6,#0x30
      0020E3 7F 00            [12] 6282 	mov	r7,#0x00
      0020E5                       6283 00228$:
      0020E5 8E 82            [24] 6284 	mov	dpl,r6
      0020E7 8F 83            [24] 6285 	mov	dph,r7
      0020E9 12r00r00         [24] 6286 	lcall	_putchar
                                   6287 ;	calc.c:56: for (mask = 0x80000000lu; mask; mask >>= 1)
      0020EC E5*00            [12] 6288 	mov	a,_bp
      0020EE 24 0B            [12] 6289 	add	a,#0x0b
      0020F0 F8               [12] 6290 	mov	r0,a
      0020F1 08               [12] 6291 	inc	r0
      0020F2 08               [12] 6292 	inc	r0
      0020F3 08               [12] 6293 	inc	r0
      0020F4 E6               [12] 6294 	mov	a,@r0
      0020F5 C3               [12] 6295 	clr	c
      0020F6 13               [12] 6296 	rrc	a
      0020F7 F6               [12] 6297 	mov	@r0,a
      0020F8 18               [12] 6298 	dec	r0
      0020F9 E6               [12] 6299 	mov	a,@r0
      0020FA 13               [12] 6300 	rrc	a
      0020FB F6               [12] 6301 	mov	@r0,a
      0020FC 18               [12] 6302 	dec	r0
      0020FD E6               [12] 6303 	mov	a,@r0
      0020FE 13               [12] 6304 	rrc	a
      0020FF F6               [12] 6305 	mov	@r0,a
      002100 18               [12] 6306 	dec	r0
      002101 E6               [12] 6307 	mov	a,@r0
      002102 13               [12] 6308 	rrc	a
      002103 F6               [12] 6309 	mov	@r0,a
      002104 E5*00            [12] 6310 	mov	a,_bp
      002106 24 0B            [12] 6311 	add	a,#0x0b
      002108 F8               [12] 6312 	mov	r0,a
      002109 E6               [12] 6313 	mov	a,@r0
      00210A 08               [12] 6314 	inc	r0
      00210B 46               [12] 6315 	orl	a,@r0
      00210C 08               [12] 6316 	inc	r0
      00210D 46               [12] 6317 	orl	a,@r0
      00210E 08               [12] 6318 	inc	r0
      00210F 46               [12] 6319 	orl	a,@r0
      002110 70 9F            [24] 6320 	jnz	00151$
                                   6321 ;	calc.c:369: printf(", acc_valid = %d\r\n\r\n", (int)ctx->acc_valid);
      002112 E5*00            [12] 6322 	mov	a,_bp
      002114 24 04            [12] 6323 	add	a,#0x04
      002116 F8               [12] 6324 	mov	r0,a
      002117 74 06            [12] 6325 	mov	a,#0x06
      002119 26               [12] 6326 	add	a,@r0
      00211A FD               [12] 6327 	mov	r5,a
      00211B E4               [12] 6328 	clr	a
      00211C 08               [12] 6329 	inc	r0
      00211D 36               [12] 6330 	addc	a,@r0
      00211E FE               [12] 6331 	mov	r6,a
      00211F 08               [12] 6332 	inc	r0
      002120 86 07            [24] 6333 	mov	ar7,@r0
      002122 8D 82            [24] 6334 	mov	dpl,r5
      002124 8E 83            [24] 6335 	mov	dph,r6
      002126 8F F0            [24] 6336 	mov	b,r7
      002128 12r00r00         [24] 6337 	lcall	__gptrget
      00212B FD               [12] 6338 	mov	r5,a
      00212C 7F 00            [12] 6339 	mov	r7,#0x00
      00212E C0 05            [24] 6340 	push	ar5
      002130 C0 07            [24] 6341 	push	ar7
      002132 74r8F            [12] 6342 	mov	a,#___str_13
      002134 C0 E0            [24] 6343 	push	acc
      002136 74s00            [12] 6344 	mov	a,#(___str_13 >> 8)
      002138 C0 E0            [24] 6345 	push	acc
      00213A 74 80            [12] 6346 	mov	a,#0x80
      00213C C0 E0            [24] 6347 	push	acc
      00213E 12r00r00         [24] 6348 	lcall	_printf
      002141 E5 81            [12] 6349 	mov	a,sp
      002143 24 FB            [12] 6350 	add	a,#0xfb
      002145 F5 81            [12] 6351 	mov	sp,a
                                   6352 ;	calc.c:370: printstr("HhOo\tbase 16 10 8 2\r\n");
      002147 7DrA4            [12] 6353 	mov	r5,#___str_14
      002149 7Es00            [12] 6354 	mov	r6,#(___str_14 >> 8)
      00214B 7F 80            [12] 6355 	mov	r7,#0x80
                                   6356 ;	calc.c:50: return;
      00214D                       6357 00154$:
                                   6358 ;	calc.c:48: for (; *s; s++) putchar(*s);
      00214D 8D 82            [24] 6359 	mov	dpl,r5
      00214F 8E 83            [24] 6360 	mov	dph,r6
      002151 8F F0            [24] 6361 	mov	b,r7
      002153 12r00r00         [24] 6362 	lcall	__gptrget
      002156 FC               [12] 6363 	mov	r4,a
      002157 60 10            [24] 6364 	jz	00104$
      002159 7B 00            [12] 6365 	mov	r3,#0x00
      00215B 8C 82            [24] 6366 	mov	dpl,r4
      00215D 8B 83            [24] 6367 	mov	dph,r3
      00215F 12r00r00         [24] 6368 	lcall	_putchar
      002162 0D               [12] 6369 	inc	r5
                                   6370 ;	calc.c:370: printstr("HhOo\tbase 16 10 8 2\r\n");
      002163 BD 00 E7         [24] 6371 	cjne	r5,#0x00,00154$
      002166 0E               [12] 6372 	inc	r6
      002167 80 E4            [24] 6373 	sjmp	00154$
      002169                       6374 00104$:
                                   6375 ;	calc.c:371: printstr("p\tpeek top\r\n");
      002169 7DrBA            [12] 6376 	mov	r5,#___str_15
      00216B 7Es00            [12] 6377 	mov	r6,#(___str_15 >> 8)
      00216D 7F 80            [12] 6378 	mov	r7,#0x80
                                   6379 ;	calc.c:50: return;
      00216F                       6380 00157$:
                                   6381 ;	calc.c:48: for (; *s; s++) putchar(*s);
      00216F 8D 82            [24] 6382 	mov	dpl,r5
      002171 8E 83            [24] 6383 	mov	dph,r6
      002173 8F F0            [24] 6384 	mov	b,r7
      002175 12r00r00         [24] 6385 	lcall	__gptrget
      002178 FC               [12] 6386 	mov	r4,a
      002179 60 10            [24] 6387 	jz	00106$
      00217B 7B 00            [12] 6388 	mov	r3,#0x00
      00217D 8C 82            [24] 6389 	mov	dpl,r4
      00217F 8B 83            [24] 6390 	mov	dph,r3
      002181 12r00r00         [24] 6391 	lcall	_putchar
      002184 0D               [12] 6392 	inc	r5
                                   6393 ;	calc.c:371: printstr("p\tpeek top\r\n");
      002185 BD 00 E7         [24] 6394 	cjne	r5,#0x00,00157$
      002188 0E               [12] 6395 	inc	r6
      002189 80 E4            [24] 6396 	sjmp	00157$
      00218B                       6397 00106$:
                                   6398 ;	calc.c:372: printstr("P\tprint stack\r\n");
      00218B 7DrC7            [12] 6399 	mov	r5,#___str_16
      00218D 7Es00            [12] 6400 	mov	r6,#(___str_16 >> 8)
      00218F 7F 80            [12] 6401 	mov	r7,#0x80
                                   6402 ;	calc.c:50: return;
      002191                       6403 00160$:
                                   6404 ;	calc.c:48: for (; *s; s++) putchar(*s);
      002191 8D 82            [24] 6405 	mov	dpl,r5
      002193 8E 83            [24] 6406 	mov	dph,r6
      002195 8F F0            [24] 6407 	mov	b,r7
      002197 12r00r00         [24] 6408 	lcall	__gptrget
      00219A FC               [12] 6409 	mov	r4,a
      00219B 60 10            [24] 6410 	jz	00108$
      00219D 7B 00            [12] 6411 	mov	r3,#0x00
      00219F 8C 82            [24] 6412 	mov	dpl,r4
      0021A1 8B 83            [24] 6413 	mov	dph,r3
      0021A3 12r00r00         [24] 6414 	lcall	_putchar
      0021A6 0D               [12] 6415 	inc	r5
                                   6416 ;	calc.c:372: printstr("P\tprint stack\r\n");
      0021A7 BD 00 E7         [24] 6417 	cjne	r5,#0x00,00160$
      0021AA 0E               [12] 6418 	inc	r6
      0021AB 80 E4            [24] 6419 	sjmp	00160$
      0021AD                       6420 00108$:
                                   6421 ;	calc.c:373: printstr("v.\tpop top\r\n");
      0021AD 7DrD7            [12] 6422 	mov	r5,#___str_17
      0021AF 7Es00            [12] 6423 	mov	r6,#(___str_17 >> 8)
      0021B1 7F 80            [12] 6424 	mov	r7,#0x80
                                   6425 ;	calc.c:50: return;
      0021B3                       6426 00163$:
                                   6427 ;	calc.c:48: for (; *s; s++) putchar(*s);
      0021B3 8D 82            [24] 6428 	mov	dpl,r5
      0021B5 8E 83            [24] 6429 	mov	dph,r6
      0021B7 8F F0            [24] 6430 	mov	b,r7
      0021B9 12r00r00         [24] 6431 	lcall	__gptrget
      0021BC FC               [12] 6432 	mov	r4,a
      0021BD 60 10            [24] 6433 	jz	00110$
      0021BF 7B 00            [12] 6434 	mov	r3,#0x00
      0021C1 8C 82            [24] 6435 	mov	dpl,r4
      0021C3 8B 83            [24] 6436 	mov	dph,r3
      0021C5 12r00r00         [24] 6437 	lcall	_putchar
      0021C8 0D               [12] 6438 	inc	r5
                                   6439 ;	calc.c:373: printstr("v.\tpop top\r\n");
      0021C9 BD 00 E7         [24] 6440 	cjne	r5,#0x00,00163$
      0021CC 0E               [12] 6441 	inc	r6
      0021CD 80 E4            [24] 6442 	sjmp	00163$
      0021CF                       6443 00110$:
                                   6444 ;	calc.c:374: printstr("V\tpop all\r\n");
      0021CF 7DrE4            [12] 6445 	mov	r5,#___str_18
      0021D1 7Es00            [12] 6446 	mov	r6,#(___str_18 >> 8)
      0021D3 7F 80            [12] 6447 	mov	r7,#0x80
                                   6448 ;	calc.c:50: return;
      0021D5                       6449 00166$:
                                   6450 ;	calc.c:48: for (; *s; s++) putchar(*s);
      0021D5 8D 82            [24] 6451 	mov	dpl,r5
      0021D7 8E 83            [24] 6452 	mov	dph,r6
      0021D9 8F F0            [24] 6453 	mov	b,r7
      0021DB 12r00r00         [24] 6454 	lcall	__gptrget
      0021DE FC               [12] 6455 	mov	r4,a
      0021DF 60 10            [24] 6456 	jz	00112$
      0021E1 7B 00            [12] 6457 	mov	r3,#0x00
      0021E3 8C 82            [24] 6458 	mov	dpl,r4
      0021E5 8B 83            [24] 6459 	mov	dph,r3
      0021E7 12r00r00         [24] 6460 	lcall	_putchar
      0021EA 0D               [12] 6461 	inc	r5
                                   6462 ;	calc.c:374: printstr("V\tpop all\r\n");
      0021EB BD 00 E7         [24] 6463 	cjne	r5,#0x00,00166$
      0021EE 0E               [12] 6464 	inc	r6
      0021EF 80 E4            [24] 6465 	sjmp	00166$
      0021F1                       6466 00112$:
                                   6467 ;	calc.c:375: printstr("i\treset acc\r\n");
      0021F1 7DrF0            [12] 6468 	mov	r5,#___str_19
      0021F3 7Es00            [12] 6469 	mov	r6,#(___str_19 >> 8)
      0021F5 7F 80            [12] 6470 	mov	r7,#0x80
                                   6471 ;	calc.c:50: return;
      0021F7                       6472 00169$:
                                   6473 ;	calc.c:48: for (; *s; s++) putchar(*s);
      0021F7 8D 82            [24] 6474 	mov	dpl,r5
      0021F9 8E 83            [24] 6475 	mov	dph,r6
      0021FB 8F F0            [24] 6476 	mov	b,r7
      0021FD 12r00r00         [24] 6477 	lcall	__gptrget
      002200 FC               [12] 6478 	mov	r4,a
      002201 60 10            [24] 6479 	jz	00114$
      002203 7B 00            [12] 6480 	mov	r3,#0x00
      002205 8C 82            [24] 6481 	mov	dpl,r4
      002207 8B 83            [24] 6482 	mov	dph,r3
      002209 12r00r00         [24] 6483 	lcall	_putchar
      00220C 0D               [12] 6484 	inc	r5
                                   6485 ;	calc.c:375: printstr("i\treset acc\r\n");
      00220D BD 00 E7         [24] 6486 	cjne	r5,#0x00,00169$
      002210 0E               [12] 6487 	inc	r6
      002211 80 E4            [24] 6488 	sjmp	00169$
      002213                       6489 00114$:
                                   6490 ;	calc.c:376: printstr("I\treset and discard acc\r\n");
      002213 7DrFE            [12] 6491 	mov	r5,#___str_20
      002215 7Es00            [12] 6492 	mov	r6,#(___str_20 >> 8)
      002217 7F 80            [12] 6493 	mov	r7,#0x80
                                   6494 ;	calc.c:50: return;
      002219                       6495 00172$:
                                   6496 ;	calc.c:48: for (; *s; s++) putchar(*s);
      002219 8D 82            [24] 6497 	mov	dpl,r5
      00221B 8E 83            [24] 6498 	mov	dph,r6
      00221D 8F F0            [24] 6499 	mov	b,r7
      00221F 12r00r00         [24] 6500 	lcall	__gptrget
      002222 FC               [12] 6501 	mov	r4,a
      002223 60 10            [24] 6502 	jz	00116$
      002225 7B 00            [12] 6503 	mov	r3,#0x00
      002227 8C 82            [24] 6504 	mov	dpl,r4
      002229 8B 83            [24] 6505 	mov	dph,r3
      00222B 12r00r00         [24] 6506 	lcall	_putchar
      00222E 0D               [12] 6507 	inc	r5
                                   6508 ;	calc.c:376: printstr("I\treset and discard acc\r\n");
      00222F BD 00 E7         [24] 6509 	cjne	r5,#0x00,00172$
      002232 0E               [12] 6510 	inc	r6
      002233 80 E4            [24] 6511 	sjmp	00172$
      002235                       6512 00116$:
                                   6513 ;	calc.c:377: printstr("x\texchange top 2\r\n");
      002235 7Dr18            [12] 6514 	mov	r5,#___str_21
      002237 7Es01            [12] 6515 	mov	r6,#(___str_21 >> 8)
      002239 7F 80            [12] 6516 	mov	r7,#0x80
                                   6517 ;	calc.c:50: return;
      00223B                       6518 00175$:
                                   6519 ;	calc.c:48: for (; *s; s++) putchar(*s);
      00223B 8D 82            [24] 6520 	mov	dpl,r5
      00223D 8E 83            [24] 6521 	mov	dph,r6
      00223F 8F F0            [24] 6522 	mov	b,r7
      002241 12r00r00         [24] 6523 	lcall	__gptrget
      002244 FC               [12] 6524 	mov	r4,a
      002245 60 10            [24] 6525 	jz	00118$
      002247 7B 00            [12] 6526 	mov	r3,#0x00
      002249 8C 82            [24] 6527 	mov	dpl,r4
      00224B 8B 83            [24] 6528 	mov	dph,r3
      00224D 12r00r00         [24] 6529 	lcall	_putchar
      002250 0D               [12] 6530 	inc	r5
                                   6531 ;	calc.c:377: printstr("x\texchange top 2\r\n");
      002251 BD 00 E7         [24] 6532 	cjne	r5,#0x00,00175$
      002254 0E               [12] 6533 	inc	r6
      002255 80 E4            [24] 6534 	sjmp	00175$
      002257                       6535 00118$:
                                   6536 ;	calc.c:378: printstr("+\tadd top 2\r\n");
      002257 7Dr2B            [12] 6537 	mov	r5,#___str_22
      002259 7Es01            [12] 6538 	mov	r6,#(___str_22 >> 8)
      00225B 7F 80            [12] 6539 	mov	r7,#0x80
                                   6540 ;	calc.c:50: return;
      00225D                       6541 00178$:
                                   6542 ;	calc.c:48: for (; *s; s++) putchar(*s);
      00225D 8D 82            [24] 6543 	mov	dpl,r5
      00225F 8E 83            [24] 6544 	mov	dph,r6
      002261 8F F0            [24] 6545 	mov	b,r7
      002263 12r00r00         [24] 6546 	lcall	__gptrget
      002266 FC               [12] 6547 	mov	r4,a
      002267 60 10            [24] 6548 	jz	00120$
      002269 7B 00            [12] 6549 	mov	r3,#0x00
      00226B 8C 82            [24] 6550 	mov	dpl,r4
      00226D 8B 83            [24] 6551 	mov	dph,r3
      00226F 12r00r00         [24] 6552 	lcall	_putchar
      002272 0D               [12] 6553 	inc	r5
                                   6554 ;	calc.c:378: printstr("+\tadd top 2\r\n");
      002273 BD 00 E7         [24] 6555 	cjne	r5,#0x00,00178$
      002276 0E               [12] 6556 	inc	r6
      002277 80 E4            [24] 6557 	sjmp	00178$
      002279                       6558 00120$:
                                   6559 ;	calc.c:379: printstr("-\tsubtract top 2\r\n");
      002279 7Dr39            [12] 6560 	mov	r5,#___str_23
      00227B 7Es01            [12] 6561 	mov	r6,#(___str_23 >> 8)
      00227D 7F 80            [12] 6562 	mov	r7,#0x80
                                   6563 ;	calc.c:50: return;
      00227F                       6564 00181$:
                                   6565 ;	calc.c:48: for (; *s; s++) putchar(*s);
      00227F 8D 82            [24] 6566 	mov	dpl,r5
      002281 8E 83            [24] 6567 	mov	dph,r6
      002283 8F F0            [24] 6568 	mov	b,r7
      002285 12r00r00         [24] 6569 	lcall	__gptrget
      002288 FC               [12] 6570 	mov	r4,a
      002289 60 10            [24] 6571 	jz	00122$
      00228B 7B 00            [12] 6572 	mov	r3,#0x00
      00228D 8C 82            [24] 6573 	mov	dpl,r4
      00228F 8B 83            [24] 6574 	mov	dph,r3
      002291 12r00r00         [24] 6575 	lcall	_putchar
      002294 0D               [12] 6576 	inc	r5
                                   6577 ;	calc.c:379: printstr("-\tsubtract top 2\r\n");
      002295 BD 00 E7         [24] 6578 	cjne	r5,#0x00,00181$
      002298 0E               [12] 6579 	inc	r6
      002299 80 E4            [24] 6580 	sjmp	00181$
      00229B                       6581 00122$:
                                   6582 ;	calc.c:380: printstr("*\tmultiply top 2\r\n");
      00229B 7Dr4C            [12] 6583 	mov	r5,#___str_24
      00229D 7Es01            [12] 6584 	mov	r6,#(___str_24 >> 8)
      00229F 7F 80            [12] 6585 	mov	r7,#0x80
                                   6586 ;	calc.c:50: return;
      0022A1                       6587 00184$:
                                   6588 ;	calc.c:48: for (; *s; s++) putchar(*s);
      0022A1 8D 82            [24] 6589 	mov	dpl,r5
      0022A3 8E 83            [24] 6590 	mov	dph,r6
      0022A5 8F F0            [24] 6591 	mov	b,r7
      0022A7 12r00r00         [24] 6592 	lcall	__gptrget
      0022AA FC               [12] 6593 	mov	r4,a
      0022AB 60 10            [24] 6594 	jz	00124$
      0022AD 7B 00            [12] 6595 	mov	r3,#0x00
      0022AF 8C 82            [24] 6596 	mov	dpl,r4
      0022B1 8B 83            [24] 6597 	mov	dph,r3
      0022B3 12r00r00         [24] 6598 	lcall	_putchar
      0022B6 0D               [12] 6599 	inc	r5
                                   6600 ;	calc.c:380: printstr("*\tmultiply top 2\r\n");
      0022B7 BD 00 E7         [24] 6601 	cjne	r5,#0x00,00184$
      0022BA 0E               [12] 6602 	inc	r6
      0022BB 80 E4            [24] 6603 	sjmp	00184$
      0022BD                       6604 00124$:
                                   6605 ;	calc.c:381: printstr("/\tdivide top 2\r\n");
      0022BD 7Dr5F            [12] 6606 	mov	r5,#___str_25
      0022BF 7Es01            [12] 6607 	mov	r6,#(___str_25 >> 8)
      0022C1 7F 80            [12] 6608 	mov	r7,#0x80
                                   6609 ;	calc.c:50: return;
      0022C3                       6610 00187$:
                                   6611 ;	calc.c:48: for (; *s; s++) putchar(*s);
      0022C3 8D 82            [24] 6612 	mov	dpl,r5
      0022C5 8E 83            [24] 6613 	mov	dph,r6
      0022C7 8F F0            [24] 6614 	mov	b,r7
      0022C9 12r00r00         [24] 6615 	lcall	__gptrget
      0022CC FC               [12] 6616 	mov	r4,a
      0022CD 60 10            [24] 6617 	jz	00126$
      0022CF 7B 00            [12] 6618 	mov	r3,#0x00
      0022D1 8C 82            [24] 6619 	mov	dpl,r4
      0022D3 8B 83            [24] 6620 	mov	dph,r3
      0022D5 12r00r00         [24] 6621 	lcall	_putchar
      0022D8 0D               [12] 6622 	inc	r5
                                   6623 ;	calc.c:381: printstr("/\tdivide top 2\r\n");
      0022D9 BD 00 E7         [24] 6624 	cjne	r5,#0x00,00187$
      0022DC 0E               [12] 6625 	inc	r6
      0022DD 80 E4            [24] 6626 	sjmp	00187$
      0022DF                       6627 00126$:
                                   6628 ;	calc.c:382: printstr("\\\tdivide top 2 unsigned\r\n");	
      0022DF 7Dr70            [12] 6629 	mov	r5,#___str_26
      0022E1 7Es01            [12] 6630 	mov	r6,#(___str_26 >> 8)
      0022E3 7F 80            [12] 6631 	mov	r7,#0x80
                                   6632 ;	calc.c:50: return;
      0022E5                       6633 00190$:
                                   6634 ;	calc.c:48: for (; *s; s++) putchar(*s);
      0022E5 8D 82            [24] 6635 	mov	dpl,r5
      0022E7 8E 83            [24] 6636 	mov	dph,r6
      0022E9 8F F0            [24] 6637 	mov	b,r7
      0022EB 12r00r00         [24] 6638 	lcall	__gptrget
      0022EE FC               [12] 6639 	mov	r4,a
      0022EF 60 10            [24] 6640 	jz	00128$
      0022F1 7B 00            [12] 6641 	mov	r3,#0x00
      0022F3 8C 82            [24] 6642 	mov	dpl,r4
      0022F5 8B 83            [24] 6643 	mov	dph,r3
      0022F7 12r00r00         [24] 6644 	lcall	_putchar
      0022FA 0D               [12] 6645 	inc	r5
                                   6646 ;	calc.c:382: printstr("\\\tdivide top 2 unsigned\r\n");	
      0022FB BD 00 E7         [24] 6647 	cjne	r5,#0x00,00190$
      0022FE 0E               [12] 6648 	inc	r6
      0022FF 80 E4            [24] 6649 	sjmp	00190$
      002301                       6650 00128$:
                                   6651 ;	calc.c:383: printstr("%\tmodulus top 2\r\n");
      002301 7Dr8A            [12] 6652 	mov	r5,#___str_27
      002303 7Es01            [12] 6653 	mov	r6,#(___str_27 >> 8)
      002305 7F 80            [12] 6654 	mov	r7,#0x80
                                   6655 ;	calc.c:50: return;
      002307                       6656 00193$:
                                   6657 ;	calc.c:48: for (; *s; s++) putchar(*s);
      002307 8D 82            [24] 6658 	mov	dpl,r5
      002309 8E 83            [24] 6659 	mov	dph,r6
      00230B 8F F0            [24] 6660 	mov	b,r7
      00230D 12r00r00         [24] 6661 	lcall	__gptrget
      002310 FC               [12] 6662 	mov	r4,a
      002311 60 10            [24] 6663 	jz	00130$
      002313 7B 00            [12] 6664 	mov	r3,#0x00
      002315 8C 82            [24] 6665 	mov	dpl,r4
      002317 8B 83            [24] 6666 	mov	dph,r3
      002319 12r00r00         [24] 6667 	lcall	_putchar
      00231C 0D               [12] 6668 	inc	r5
                                   6669 ;	calc.c:383: printstr("%\tmodulus top 2\r\n");
      00231D BD 00 E7         [24] 6670 	cjne	r5,#0x00,00193$
      002320 0E               [12] 6671 	inc	r6
      002321 80 E4            [24] 6672 	sjmp	00193$
      002323                       6673 00130$:
                                   6674 ;	calc.c:384: printstr("#\tmodulus top 2 unsigned\r\n");
      002323 7Dr9C            [12] 6675 	mov	r5,#___str_28
      002325 7Es01            [12] 6676 	mov	r6,#(___str_28 >> 8)
      002327 7F 80            [12] 6677 	mov	r7,#0x80
                                   6678 ;	calc.c:50: return;
      002329                       6679 00196$:
                                   6680 ;	calc.c:48: for (; *s; s++) putchar(*s);
      002329 8D 82            [24] 6681 	mov	dpl,r5
      00232B 8E 83            [24] 6682 	mov	dph,r6
      00232D 8F F0            [24] 6683 	mov	b,r7
      00232F 12r00r00         [24] 6684 	lcall	__gptrget
      002332 FC               [12] 6685 	mov	r4,a
      002333 60 10            [24] 6686 	jz	00132$
      002335 7B 00            [12] 6687 	mov	r3,#0x00
      002337 8C 82            [24] 6688 	mov	dpl,r4
      002339 8B 83            [24] 6689 	mov	dph,r3
      00233B 12r00r00         [24] 6690 	lcall	_putchar
      00233E 0D               [12] 6691 	inc	r5
                                   6692 ;	calc.c:384: printstr("#\tmodulus top 2 unsigned\r\n");
      00233F BD 00 E7         [24] 6693 	cjne	r5,#0x00,00196$
      002342 0E               [12] 6694 	inc	r6
      002343 80 E4            [24] 6695 	sjmp	00196$
      002345                       6696 00132$:
                                   6697 ;	calc.c:385: printstr("&\tand top 2\r\n");
      002345 7DrB7            [12] 6698 	mov	r5,#___str_29
      002347 7Es01            [12] 6699 	mov	r6,#(___str_29 >> 8)
      002349 7F 80            [12] 6700 	mov	r7,#0x80
                                   6701 ;	calc.c:50: return;
      00234B                       6702 00199$:
                                   6703 ;	calc.c:48: for (; *s; s++) putchar(*s);
      00234B 8D 82            [24] 6704 	mov	dpl,r5
      00234D 8E 83            [24] 6705 	mov	dph,r6
      00234F 8F F0            [24] 6706 	mov	b,r7
      002351 12r00r00         [24] 6707 	lcall	__gptrget
      002354 FC               [12] 6708 	mov	r4,a
      002355 60 10            [24] 6709 	jz	00134$
      002357 7B 00            [12] 6710 	mov	r3,#0x00
      002359 8C 82            [24] 6711 	mov	dpl,r4
      00235B 8B 83            [24] 6712 	mov	dph,r3
      00235D 12r00r00         [24] 6713 	lcall	_putchar
      002360 0D               [12] 6714 	inc	r5
                                   6715 ;	calc.c:385: printstr("&\tand top 2\r\n");
      002361 BD 00 E7         [24] 6716 	cjne	r5,#0x00,00199$
      002364 0E               [12] 6717 	inc	r6
      002365 80 E4            [24] 6718 	sjmp	00199$
      002367                       6719 00134$:
                                   6720 ;	calc.c:386: printstr("|\tor top 2\r\n");
      002367 7DrC5            [12] 6721 	mov	r5,#___str_30
      002369 7Es01            [12] 6722 	mov	r6,#(___str_30 >> 8)
      00236B 7F 80            [12] 6723 	mov	r7,#0x80
                                   6724 ;	calc.c:50: return;
      00236D                       6725 00202$:
                                   6726 ;	calc.c:48: for (; *s; s++) putchar(*s);
      00236D 8D 82            [24] 6727 	mov	dpl,r5
      00236F 8E 83            [24] 6728 	mov	dph,r6
      002371 8F F0            [24] 6729 	mov	b,r7
      002373 12r00r00         [24] 6730 	lcall	__gptrget
      002376 FC               [12] 6731 	mov	r4,a
      002377 60 10            [24] 6732 	jz	00136$
      002379 7B 00            [12] 6733 	mov	r3,#0x00
      00237B 8C 82            [24] 6734 	mov	dpl,r4
      00237D 8B 83            [24] 6735 	mov	dph,r3
      00237F 12r00r00         [24] 6736 	lcall	_putchar
      002382 0D               [12] 6737 	inc	r5
                                   6738 ;	calc.c:386: printstr("|\tor top 2\r\n");
      002383 BD 00 E7         [24] 6739 	cjne	r5,#0x00,00202$
      002386 0E               [12] 6740 	inc	r6
      002387 80 E4            [24] 6741 	sjmp	00202$
      002389                       6742 00136$:
                                   6743 ;	calc.c:387: printstr("^\txor top 2\r\n");
      002389 7DrD2            [12] 6744 	mov	r5,#___str_31
      00238B 7Es01            [12] 6745 	mov	r6,#(___str_31 >> 8)
      00238D 7F 80            [12] 6746 	mov	r7,#0x80
                                   6747 ;	calc.c:50: return;
      00238F                       6748 00205$:
                                   6749 ;	calc.c:48: for (; *s; s++) putchar(*s);
      00238F 8D 82            [24] 6750 	mov	dpl,r5
      002391 8E 83            [24] 6751 	mov	dph,r6
      002393 8F F0            [24] 6752 	mov	b,r7
      002395 12r00r00         [24] 6753 	lcall	__gptrget
      002398 FC               [12] 6754 	mov	r4,a
      002399 60 10            [24] 6755 	jz	00138$
      00239B 7B 00            [12] 6756 	mov	r3,#0x00
      00239D 8C 82            [24] 6757 	mov	dpl,r4
      00239F 8B 83            [24] 6758 	mov	dph,r3
      0023A1 12r00r00         [24] 6759 	lcall	_putchar
      0023A4 0D               [12] 6760 	inc	r5
                                   6761 ;	calc.c:387: printstr("^\txor top 2\r\n");
      0023A5 BD 00 E7         [24] 6762 	cjne	r5,#0x00,00205$
      0023A8 0E               [12] 6763 	inc	r6
      0023A9 80 E4            [24] 6764 	sjmp	00205$
      0023AB                       6765 00138$:
                                   6766 ;	calc.c:388: printstr(">\tshift right top 2\r\n");
      0023AB 7DrE0            [12] 6767 	mov	r5,#___str_32
      0023AD 7Es01            [12] 6768 	mov	r6,#(___str_32 >> 8)
      0023AF 7F 80            [12] 6769 	mov	r7,#0x80
                                   6770 ;	calc.c:50: return;
      0023B1                       6771 00208$:
                                   6772 ;	calc.c:48: for (; *s; s++) putchar(*s);
      0023B1 8D 82            [24] 6773 	mov	dpl,r5
      0023B3 8E 83            [24] 6774 	mov	dph,r6
      0023B5 8F F0            [24] 6775 	mov	b,r7
      0023B7 12r00r00         [24] 6776 	lcall	__gptrget
      0023BA FC               [12] 6777 	mov	r4,a
      0023BB 60 10            [24] 6778 	jz	00140$
      0023BD 7B 00            [12] 6779 	mov	r3,#0x00
      0023BF 8C 82            [24] 6780 	mov	dpl,r4
      0023C1 8B 83            [24] 6781 	mov	dph,r3
      0023C3 12r00r00         [24] 6782 	lcall	_putchar
      0023C6 0D               [12] 6783 	inc	r5
                                   6784 ;	calc.c:388: printstr(">\tshift right top 2\r\n");
      0023C7 BD 00 E7         [24] 6785 	cjne	r5,#0x00,00208$
      0023CA 0E               [12] 6786 	inc	r6
      0023CB 80 E4            [24] 6787 	sjmp	00208$
      0023CD                       6788 00140$:
                                   6789 ;	calc.c:389: printstr("]\tarithmetic shift right top 2\r\n");
      0023CD 7DrF6            [12] 6790 	mov	r5,#___str_33
      0023CF 7Es01            [12] 6791 	mov	r6,#(___str_33 >> 8)
      0023D1 7F 80            [12] 6792 	mov	r7,#0x80
                                   6793 ;	calc.c:50: return;
      0023D3                       6794 00211$:
                                   6795 ;	calc.c:48: for (; *s; s++) putchar(*s);
      0023D3 8D 82            [24] 6796 	mov	dpl,r5
      0023D5 8E 83            [24] 6797 	mov	dph,r6
      0023D7 8F F0            [24] 6798 	mov	b,r7
      0023D9 12r00r00         [24] 6799 	lcall	__gptrget
      0023DC FC               [12] 6800 	mov	r4,a
      0023DD 60 10            [24] 6801 	jz	00142$
      0023DF 7B 00            [12] 6802 	mov	r3,#0x00
      0023E1 8C 82            [24] 6803 	mov	dpl,r4
      0023E3 8B 83            [24] 6804 	mov	dph,r3
      0023E5 12r00r00         [24] 6805 	lcall	_putchar
      0023E8 0D               [12] 6806 	inc	r5
                                   6807 ;	calc.c:389: printstr("]\tarithmetic shift right top 2\r\n");
      0023E9 BD 00 E7         [24] 6808 	cjne	r5,#0x00,00211$
      0023EC 0E               [12] 6809 	inc	r6
      0023ED 80 E4            [24] 6810 	sjmp	00211$
      0023EF                       6811 00142$:
                                   6812 ;	calc.c:390: printstr("<\tshift left top 2\r\n");
      0023EF 7Dr17            [12] 6813 	mov	r5,#___str_34
      0023F1 7Es02            [12] 6814 	mov	r6,#(___str_34 >> 8)
      0023F3 7F 80            [12] 6815 	mov	r7,#0x80
                                   6816 ;	calc.c:50: return;
      0023F5                       6817 00214$:
                                   6818 ;	calc.c:48: for (; *s; s++) putchar(*s);
      0023F5 8D 82            [24] 6819 	mov	dpl,r5
      0023F7 8E 83            [24] 6820 	mov	dph,r6
      0023F9 8F F0            [24] 6821 	mov	b,r7
      0023FB 12r00r00         [24] 6822 	lcall	__gptrget
      0023FE FC               [12] 6823 	mov	r4,a
      0023FF 60 10            [24] 6824 	jz	00144$
      002401 7B 00            [12] 6825 	mov	r3,#0x00
      002403 8C 82            [24] 6826 	mov	dpl,r4
      002405 8B 83            [24] 6827 	mov	dph,r3
      002407 12r00r00         [24] 6828 	lcall	_putchar
      00240A 0D               [12] 6829 	inc	r5
                                   6830 ;	calc.c:390: printstr("<\tshift left top 2\r\n");
      00240B BD 00 E7         [24] 6831 	cjne	r5,#0x00,00214$
      00240E 0E               [12] 6832 	inc	r6
      00240F 80 E4            [24] 6833 	sjmp	00214$
      002411                       6834 00144$:
                                   6835 ;	calc.c:391: printstr("~\tbitwise not top\r\n");
      002411 7Dr2C            [12] 6836 	mov	r5,#___str_35
      002413 7Es02            [12] 6837 	mov	r6,#(___str_35 >> 8)
      002415 7F 80            [12] 6838 	mov	r7,#0x80
                                   6839 ;	calc.c:50: return;
      002417                       6840 00217$:
                                   6841 ;	calc.c:48: for (; *s; s++) putchar(*s);
      002417 8D 82            [24] 6842 	mov	dpl,r5
      002419 8E 83            [24] 6843 	mov	dph,r6
      00241B 8F F0            [24] 6844 	mov	b,r7
      00241D 12r00r00         [24] 6845 	lcall	__gptrget
      002420 FC               [12] 6846 	mov	r4,a
      002421 60 10            [24] 6847 	jz	00146$
      002423 7B 00            [12] 6848 	mov	r3,#0x00
      002425 8C 82            [24] 6849 	mov	dpl,r4
      002427 8B 83            [24] 6850 	mov	dph,r3
      002429 12r00r00         [24] 6851 	lcall	_putchar
      00242C 0D               [12] 6852 	inc	r5
                                   6853 ;	calc.c:391: printstr("~\tbitwise not top\r\n");
      00242D BD 00 E7         [24] 6854 	cjne	r5,#0x00,00217$
      002430 0E               [12] 6855 	inc	r6
      002431 80 E4            [24] 6856 	sjmp	00217$
      002433                       6857 00146$:
                                   6858 ;	calc.c:392: printstr("?\thelp\r\n");
      002433 7Dr40            [12] 6859 	mov	r5,#___str_36
      002435 7Es02            [12] 6860 	mov	r6,#(___str_36 >> 8)
      002437 7F 80            [12] 6861 	mov	r7,#0x80
                                   6862 ;	calc.c:50: return;
      002439                       6863 00220$:
                                   6864 ;	calc.c:48: for (; *s; s++) putchar(*s);
      002439 8D 82            [24] 6865 	mov	dpl,r5
      00243B 8E 83            [24] 6866 	mov	dph,r6
      00243D 8F F0            [24] 6867 	mov	b,r7
      00243F 12r00r00         [24] 6868 	lcall	__gptrget
      002442 FC               [12] 6869 	mov	r4,a
      002443 60 10            [24] 6870 	jz	00148$
      002445 7B 00            [12] 6871 	mov	r3,#0x00
      002447 8C 82            [24] 6872 	mov	dpl,r4
      002449 8B 83            [24] 6873 	mov	dph,r3
      00244B 12r00r00         [24] 6874 	lcall	_putchar
      00244E 0D               [12] 6875 	inc	r5
                                   6876 ;	calc.c:392: printstr("?\thelp\r\n");
      00244F BD 00 E7         [24] 6877 	cjne	r5,#0x00,00220$
      002452 0E               [12] 6878 	inc	r6
      002453 80 E4            [24] 6879 	sjmp	00220$
      002455                       6880 00148$:
                                   6881 ;	calc.c:393: printstr("q\tquit\r\n");
      002455 7Dr49            [12] 6882 	mov	r5,#___str_37
      002457 7Es02            [12] 6883 	mov	r6,#(___str_37 >> 8)
      002459 7F 80            [12] 6884 	mov	r7,#0x80
                                   6885 ;	calc.c:50: return;
      00245B                       6886 00223$:
                                   6887 ;	calc.c:48: for (; *s; s++) putchar(*s);
      00245B 8D 82            [24] 6888 	mov	dpl,r5
      00245D 8E 83            [24] 6889 	mov	dph,r6
      00245F 8F F0            [24] 6890 	mov	b,r7
      002461 12r00r00         [24] 6891 	lcall	__gptrget
      002464 FC               [12] 6892 	mov	r4,a
      002465 60 10            [24] 6893 	jz	00150$
      002467 7B 00            [12] 6894 	mov	r3,#0x00
      002469 8C 82            [24] 6895 	mov	dpl,r4
      00246B 8B 83            [24] 6896 	mov	dph,r3
      00246D 12r00r00         [24] 6897 	lcall	_putchar
      002470 0D               [12] 6898 	inc	r5
                                   6899 ;	calc.c:393: printstr("q\tquit\r\n");
      002471 BD 00 E7         [24] 6900 	cjne	r5,#0x00,00223$
      002474 0E               [12] 6901 	inc	r6
      002475 80 E4            [24] 6902 	sjmp	00223$
      002477                       6903 00150$:
                                   6904 ;	calc.c:395: return 1;
      002477 90 00 01         [24] 6905 	mov	dptr,#0x0001
                                   6906 ;	calc.c:396: }
      00247A 85*00 81         [24] 6907 	mov	sp,_bp
      00247D D0*00            [24] 6908 	pop	_bp
      00247F 22               [24] 6909 	ret
                                   6910 ;------------------------------------------------------------
                                   6911 ;Allocation info for local variables in function 'main'
                                   6912 ;------------------------------------------------------------
                                   6913 ;input                     Allocated to registers r6 r7 
                                   6914 ;------------------------------------------------------------
                                   6915 ;	calc.c:425: void main(void) {
                                   6916 ;	-----------------------------------------
                                   6917 ;	 function main
                                   6918 ;	-----------------------------------------
      002480                       6919 _main:
                                   6920 ;	calc.c:428: c.base = 10;
      002480 90r00r0C         [24] 6921 	mov	dptr,#_c
      002483 74 0A            [12] 6922 	mov	a,#0x0a
      002485 F0               [24] 6923 	movx	@dptr,a
      002486 E4               [12] 6924 	clr	a
      002487 A3               [24] 6925 	inc	dptr
      002488 F0               [24] 6926 	movx	@dptr,a
                                   6927 ;	calc.c:429: c.acc = 0l;
      002489 90r00r0E         [24] 6928 	mov	dptr,#(_c + 0x0002)
      00248C F0               [24] 6929 	movx	@dptr,a
      00248D A3               [24] 6930 	inc	dptr
      00248E F0               [24] 6931 	movx	@dptr,a
      00248F A3               [24] 6932 	inc	dptr
      002490 F0               [24] 6933 	movx	@dptr,a
      002491 A3               [24] 6934 	inc	dptr
      002492 F0               [24] 6935 	movx	@dptr,a
                                   6936 ;	calc.c:430: c.acc_valid = (char)0;
      002493 90r00r12         [24] 6937 	mov	dptr,#(_c + 0x0006)
      002496 F0               [24] 6938 	movx	@dptr,a
                                   6939 ;	calc.c:431: c.digit[0] = c.digit[1] = '\0';
      002497 90r00r14         [24] 6940 	mov	dptr,#(_c + 0x0008)
      00249A F0               [24] 6941 	movx	@dptr,a
      00249B 90r00r13         [24] 6942 	mov	dptr,#(_c + 0x0007)
      00249E F0               [24] 6943 	movx	@dptr,a
                                   6944 ;	calc.c:432: stack_init(&c.s);	
      00249F 90r00r15         [24] 6945 	mov	dptr,#(_c + 0x0009)
      0024A2 75 F0 00         [24] 6946 	mov	b,#0x00
      0024A5 12r00r00         [24] 6947 	lcall	_stack_init
                                   6948 ;	calc.c:433: state_init(&s, STATE_START, STATE_FINAL, UNDEF, deltas, &c);
      0024A8 74r0C            [12] 6949 	mov	a,#_c
      0024AA C0 E0            [24] 6950 	push	acc
      0024AC 74s00            [12] 6951 	mov	a,#(_c >> 8)
      0024AE C0 E0            [24] 6952 	push	acc
      0024B0 E4               [12] 6953 	clr	a
      0024B1 C0 E0            [24] 6954 	push	acc
      0024B3 74r00            [12] 6955 	mov	a,#_deltas
      0024B5 C0 E0            [24] 6956 	push	acc
      0024B7 74s00            [12] 6957 	mov	a,#(_deltas >> 8)
      0024B9 C0 E0            [24] 6958 	push	acc
      0024BB E4               [12] 6959 	clr	a
      0024BC C0 E0            [24] 6960 	push	acc
      0024BE C0 E0            [24] 6961 	push	acc
      0024C0 74 80            [12] 6962 	mov	a,#0x80
      0024C2 C0 E0            [24] 6963 	push	acc
      0024C4 74 03            [12] 6964 	mov	a,#0x03
      0024C6 C0 E0            [24] 6965 	push	acc
      0024C8 E4               [12] 6966 	clr	a
      0024C9 C0 E0            [24] 6967 	push	acc
      0024CB C0 E0            [24] 6968 	push	acc
      0024CD C0 E0            [24] 6969 	push	acc
      0024CF 90r00r00         [24] 6970 	mov	dptr,#_s
      0024D2 75 F0 00         [24] 6971 	mov	b,#0x00
      0024D5 12r00r00         [24] 6972 	lcall	_state_init
      0024D8 E5 81            [12] 6973 	mov	a,sp
      0024DA 24 F4            [12] 6974 	add	a,#0xf4
      0024DC F5 81            [12] 6975 	mov	sp,a
                                   6976 ;	calc.c:435: while (1) {
      0024DE                       6977 00173$:
                                   6978 ;	calc.c:436: input = getchar();
      0024DE 12r00r05         [24] 6979 	lcall	_getchar
                                   6980 ;	calc.c:437: (void)putchar(input);
      0024E1 AE 82            [24] 6981 	mov	r6,dpl
      0024E3 AF 83            [24] 6982 	mov  r7,dph
      0024E5 12r00r00         [24] 6983 	lcall	_putchar
                                   6984 ;	calc.c:438: c.digit[0] = (char)input;
      0024E8 8E 05            [24] 6985 	mov	ar5,r6
      0024EA 90r00r13         [24] 6986 	mov	dptr,#(_c + 0x0007)
      0024ED ED               [12] 6987 	mov	a,r5
      0024EE F0               [24] 6988 	movx	@dptr,a
                                   6989 ;	calc.c:440: if ((char)input == 'q') {
      0024EF BD 71 29         [24] 6990 	cjne	r5,#0x71,00170$
                                   6991 ;	calc.c:441: if (state_exec(&s, EVENT_TERM) <= 0) break;
      0024F2 74 07            [12] 6992 	mov	a,#0x07
      0024F4 C0 E0            [24] 6993 	push	acc
      0024F6 E4               [12] 6994 	clr	a
      0024F7 C0 E0            [24] 6995 	push	acc
      0024F9 90r00r00         [24] 6996 	mov	dptr,#_s
      0024FC 75 F0 00         [24] 6997 	mov	b,#0x00
      0024FF 12r00r00         [24] 6998 	lcall	_state_exec
      002502 AB 82            [24] 6999 	mov	r3,dpl
      002504 AC 83            [24] 7000 	mov	r4,dph
      002506 15 81            [12] 7001 	dec	sp
      002508 15 81            [12] 7002 	dec	sp
      00250A C3               [12] 7003 	clr	c
      00250B E4               [12] 7004 	clr	a
      00250C 9B               [12] 7005 	subb	a,r3
      00250D 74 80            [12] 7006 	mov	a,#(0x00 ^ 0x80)
      00250F 8C F0            [24] 7007 	mov	b,r4
      002511 63 F0 80         [24] 7008 	xrl	b,#0x80
      002514 95 F0            [12] 7009 	subb	a,b
      002516 40 C6            [24] 7010 	jc	00173$
      002518 02r27r50         [24] 7011 	ljmp	00174$
      00251B                       7012 00170$:
                                   7013 ;	calc.c:442: } else if ((char)input == '?') {
      00251B BD 3F 29         [24] 7014 	cjne	r5,#0x3f,00167$
                                   7015 ;	calc.c:443: if (state_exec(&s, EVENT_HELP) <= 0) break;
      00251E 74 03            [12] 7016 	mov	a,#0x03
      002520 C0 E0            [24] 7017 	push	acc
      002522 E4               [12] 7018 	clr	a
      002523 C0 E0            [24] 7019 	push	acc
      002525 90r00r00         [24] 7020 	mov	dptr,#_s
      002528 75 F0 00         [24] 7021 	mov	b,#0x00
      00252B 12r00r00         [24] 7022 	lcall	_state_exec
      00252E AB 82            [24] 7023 	mov	r3,dpl
      002530 AC 83            [24] 7024 	mov	r4,dph
      002532 15 81            [12] 7025 	dec	sp
      002534 15 81            [12] 7026 	dec	sp
      002536 C3               [12] 7027 	clr	c
      002537 E4               [12] 7028 	clr	a
      002538 9B               [12] 7029 	subb	a,r3
      002539 74 80            [12] 7030 	mov	a,#(0x00 ^ 0x80)
      00253B 8C F0            [24] 7031 	mov	b,r4
      00253D 63 F0 80         [24] 7032 	xrl	b,#0x80
      002540 95 F0            [12] 7033 	subb	a,b
      002542 40 9A            [24] 7034 	jc	00173$
      002544 02r27r50         [24] 7035 	ljmp	00174$
      002547                       7036 00167$:
                                   7037 ;	calc.c:444: } else if ((char)input == 'i') {
      002547 BD 69 2C         [24] 7038 	cjne	r5,#0x69,00164$
                                   7039 ;	calc.c:445: if (state_exec(&s, EVENT_RSTA_i) <= 0) break;
      00254A 74 05            [12] 7040 	mov	a,#0x05
      00254C C0 E0            [24] 7041 	push	acc
      00254E E4               [12] 7042 	clr	a
      00254F C0 E0            [24] 7043 	push	acc
      002551 90r00r00         [24] 7044 	mov	dptr,#_s
      002554 75 F0 00         [24] 7045 	mov	b,#0x00
      002557 12r00r00         [24] 7046 	lcall	_state_exec
      00255A AB 82            [24] 7047 	mov	r3,dpl
      00255C AC 83            [24] 7048 	mov	r4,dph
      00255E 15 81            [12] 7049 	dec	sp
      002560 15 81            [12] 7050 	dec	sp
      002562 C3               [12] 7051 	clr	c
      002563 E4               [12] 7052 	clr	a
      002564 9B               [12] 7053 	subb	a,r3
      002565 74 80            [12] 7054 	mov	a,#(0x00 ^ 0x80)
      002567 8C F0            [24] 7055 	mov	b,r4
      002569 63 F0 80         [24] 7056 	xrl	b,#0x80
      00256C 95 F0            [12] 7057 	subb	a,b
      00256E 50 03            [24] 7058 	jnc	00325$
      002570 02r24rDE         [24] 7059 	ljmp	00173$
      002573                       7060 00325$:
      002573 02r27r50         [24] 7061 	ljmp	00174$
      002576                       7062 00164$:
                                   7063 ;	calc.c:446: } else if ((char)input == 'I') {
      002576 BD 49 2C         [24] 7064 	cjne	r5,#0x49,00161$
                                   7065 ;	calc.c:447: if (state_exec(&s, EVENT_RSTA_I) <= 0) break;
      002579 74 06            [12] 7066 	mov	a,#0x06
      00257B C0 E0            [24] 7067 	push	acc
      00257D E4               [12] 7068 	clr	a
      00257E C0 E0            [24] 7069 	push	acc
      002580 90r00r00         [24] 7070 	mov	dptr,#_s
      002583 75 F0 00         [24] 7071 	mov	b,#0x00
      002586 12r00r00         [24] 7072 	lcall	_state_exec
      002589 AB 82            [24] 7073 	mov	r3,dpl
      00258B AC 83            [24] 7074 	mov	r4,dph
      00258D 15 81            [12] 7075 	dec	sp
      00258F 15 81            [12] 7076 	dec	sp
      002591 C3               [12] 7077 	clr	c
      002592 E4               [12] 7078 	clr	a
      002593 9B               [12] 7079 	subb	a,r3
      002594 74 80            [12] 7080 	mov	a,#(0x00 ^ 0x80)
      002596 8C F0            [24] 7081 	mov	b,r4
      002598 63 F0 80         [24] 7082 	xrl	b,#0x80
      00259B 95 F0            [12] 7083 	subb	a,b
      00259D 50 03            [24] 7084 	jnc	00328$
      00259F 02r24rDE         [24] 7085 	ljmp	00173$
      0025A2                       7086 00328$:
      0025A2 02r27r50         [24] 7087 	ljmp	00174$
      0025A5                       7088 00161$:
                                   7089 ;	calc.c:449: ((char)input == 'h') || ((char)input == 'H') ||
      0025A5 BD 68 02         [24] 7090 	cjne	r5,#0x68,00329$
      0025A8 80 0D            [24] 7091 	sjmp	00154$
      0025AA                       7092 00329$:
      0025AA BD 48 02         [24] 7093 	cjne	r5,#0x48,00330$
      0025AD 80 08            [24] 7094 	sjmp	00154$
      0025AF                       7095 00330$:
                                   7096 ;	calc.c:450: ((char)input == 'o') || ((char)input == 'O')
      0025AF BD 6F 02         [24] 7097 	cjne	r5,#0x6f,00331$
      0025B2 80 03            [24] 7098 	sjmp	00154$
      0025B4                       7099 00331$:
      0025B4 BD 4F 2C         [24] 7100 	cjne	r5,#0x4f,00155$
      0025B7                       7101 00154$:
                                   7102 ;	calc.c:452: if (state_exec(&s, EVENT_BASE) <= 0) break;
      0025B7 74 04            [12] 7103 	mov	a,#0x04
      0025B9 C0 E0            [24] 7104 	push	acc
      0025BB E4               [12] 7105 	clr	a
      0025BC C0 E0            [24] 7106 	push	acc
      0025BE 90r00r00         [24] 7107 	mov	dptr,#_s
      0025C1 75 F0 00         [24] 7108 	mov	b,#0x00
      0025C4 12r00r00         [24] 7109 	lcall	_state_exec
      0025C7 AB 82            [24] 7110 	mov	r3,dpl
      0025C9 AC 83            [24] 7111 	mov	r4,dph
      0025CB 15 81            [12] 7112 	dec	sp
      0025CD 15 81            [12] 7113 	dec	sp
      0025CF C3               [12] 7114 	clr	c
      0025D0 E4               [12] 7115 	clr	a
      0025D1 9B               [12] 7116 	subb	a,r3
      0025D2 74 80            [12] 7117 	mov	a,#(0x00 ^ 0x80)
      0025D4 8C F0            [24] 7118 	mov	b,r4
      0025D6 63 F0 80         [24] 7119 	xrl	b,#0x80
      0025D9 95 F0            [12] 7120 	subb	a,b
      0025DB 50 03            [24] 7121 	jnc	00334$
      0025DD 02r24rDE         [24] 7122 	ljmp	00173$
      0025E0                       7123 00334$:
      0025E0 02r27r50         [24] 7124 	ljmp	00174$
      0025E3                       7125 00155$:
                                   7126 ;	calc.c:453: } else if (isxdigit(input)) {
      0025E3 8E 82            [24] 7127 	mov	dpl,r6
      0025E5 8F 83            [24] 7128 	mov	dph,r7
      0025E7 C0 05            [24] 7129 	push	ar5
      0025E9 12r00r00         [24] 7130 	lcall	_isxdigit
      0025EC E5 82            [12] 7131 	mov	a,dpl
      0025EE 85 83 F0         [24] 7132 	mov	b,dph
      0025F1 D0 05            [24] 7133 	pop	ar5
      0025F3 45 F0            [12] 7134 	orl	a,b
      0025F5 60 2C            [24] 7135 	jz	00152$
                                   7136 ;	calc.c:454: if (state_exec(&s, EVENT_DIGIT) <= 0) break;
      0025F7 74 01            [12] 7137 	mov	a,#0x01
      0025F9 C0 E0            [24] 7138 	push	acc
      0025FB E4               [12] 7139 	clr	a
      0025FC C0 E0            [24] 7140 	push	acc
      0025FE 90r00r00         [24] 7141 	mov	dptr,#_s
      002601 75 F0 00         [24] 7142 	mov	b,#0x00
      002604 12r00r00         [24] 7143 	lcall	_state_exec
      002607 AE 82            [24] 7144 	mov	r6,dpl
      002609 AF 83            [24] 7145 	mov	r7,dph
      00260B 15 81            [12] 7146 	dec	sp
      00260D 15 81            [12] 7147 	dec	sp
      00260F C3               [12] 7148 	clr	c
      002610 E4               [12] 7149 	clr	a
      002611 9E               [12] 7150 	subb	a,r6
      002612 74 80            [12] 7151 	mov	a,#(0x00 ^ 0x80)
      002614 8F F0            [24] 7152 	mov	b,r7
      002616 63 F0 80         [24] 7153 	xrl	b,#0x80
      002619 95 F0            [12] 7154 	subb	a,b
      00261B 50 03            [24] 7155 	jnc	00336$
      00261D 02r24rDE         [24] 7156 	ljmp	00173$
      002620                       7157 00336$:
      002620 02r27r50         [24] 7158 	ljmp	00174$
      002623                       7159 00152$:
                                   7160 ;	calc.c:456: ((char)input == 'p') || ((char)input == 'P') ||
      002623 BD 70 02         [24] 7161 	cjne	r5,#0x70,00337$
      002626 80 17            [24] 7162 	sjmp	00143$
      002628                       7163 00337$:
      002628 BD 50 02         [24] 7164 	cjne	r5,#0x50,00338$
      00262B 80 12            [24] 7165 	sjmp	00143$
      00262D                       7166 00338$:
                                   7167 ;	calc.c:457: ((char)input == 'v') || ((char)input == 'V') ||
      00262D BD 76 02         [24] 7168 	cjne	r5,#0x76,00339$
      002630 80 0D            [24] 7169 	sjmp	00143$
      002632                       7170 00339$:
      002632 BD 56 02         [24] 7171 	cjne	r5,#0x56,00340$
      002635 80 08            [24] 7172 	sjmp	00143$
      002637                       7173 00340$:
                                   7174 ;	calc.c:458: ((char)input == '.') ||
      002637 BD 2E 02         [24] 7175 	cjne	r5,#0x2e,00341$
      00263A 80 03            [24] 7176 	sjmp	00143$
      00263C                       7177 00341$:
                                   7178 ;	calc.c:459: ((char)input == 'x')
      00263C BD 78 2C         [24] 7179 	cjne	r5,#0x78,00144$
      00263F                       7180 00143$:
                                   7181 ;	calc.c:461: if (state_exec(&s, EVENT_OP) <= 0) break;
      00263F 74 02            [12] 7182 	mov	a,#0x02
      002641 C0 E0            [24] 7183 	push	acc
      002643 E4               [12] 7184 	clr	a
      002644 C0 E0            [24] 7185 	push	acc
      002646 90r00r00         [24] 7186 	mov	dptr,#_s
      002649 75 F0 00         [24] 7187 	mov	b,#0x00
      00264C 12r00r00         [24] 7188 	lcall	_state_exec
      00264F AE 82            [24] 7189 	mov	r6,dpl
      002651 AF 83            [24] 7190 	mov	r7,dph
      002653 15 81            [12] 7191 	dec	sp
      002655 15 81            [12] 7192 	dec	sp
      002657 C3               [12] 7193 	clr	c
      002658 E4               [12] 7194 	clr	a
      002659 9E               [12] 7195 	subb	a,r6
      00265A 74 80            [12] 7196 	mov	a,#(0x00 ^ 0x80)
      00265C 8F F0            [24] 7197 	mov	b,r7
      00265E 63 F0 80         [24] 7198 	xrl	b,#0x80
      002661 95 F0            [12] 7199 	subb	a,b
      002663 50 03            [24] 7200 	jnc	00344$
      002665 02r24rDE         [24] 7201 	ljmp	00173$
      002668                       7202 00344$:
      002668 02r27r50         [24] 7203 	ljmp	00174$
      00266B                       7204 00144$:
                                   7205 ;	calc.c:463: ((char)input == '+') || ((char)input == '-')
      00266B BD 2B 02         [24] 7206 	cjne	r5,#0x2b,00345$
      00266E 80 03            [24] 7207 	sjmp	00139$
      002670                       7208 00345$:
      002670 BD 2D 2C         [24] 7209 	cjne	r5,#0x2d,00140$
      002673                       7210 00139$:
                                   7211 ;	calc.c:465: if (state_exec(&s, EVENT_OP) <= 0) break;
      002673 74 02            [12] 7212 	mov	a,#0x02
      002675 C0 E0            [24] 7213 	push	acc
      002677 E4               [12] 7214 	clr	a
      002678 C0 E0            [24] 7215 	push	acc
      00267A 90r00r00         [24] 7216 	mov	dptr,#_s
      00267D 75 F0 00         [24] 7217 	mov	b,#0x00
      002680 12r00r00         [24] 7218 	lcall	_state_exec
      002683 AE 82            [24] 7219 	mov	r6,dpl
      002685 AF 83            [24] 7220 	mov	r7,dph
      002687 15 81            [12] 7221 	dec	sp
      002689 15 81            [12] 7222 	dec	sp
      00268B C3               [12] 7223 	clr	c
      00268C E4               [12] 7224 	clr	a
      00268D 9E               [12] 7225 	subb	a,r6
      00268E 74 80            [12] 7226 	mov	a,#(0x00 ^ 0x80)
      002690 8F F0            [24] 7227 	mov	b,r7
      002692 63 F0 80         [24] 7228 	xrl	b,#0x80
      002695 95 F0            [12] 7229 	subb	a,b
      002697 50 03            [24] 7230 	jnc	00348$
      002699 02r24rDE         [24] 7231 	ljmp	00173$
      00269C                       7232 00348$:
      00269C 02r27r50         [24] 7233 	ljmp	00174$
      00269F                       7234 00140$:
                                   7235 ;	calc.c:467: ((char)input == '*') ||
      00269F BD 2A 02         [24] 7236 	cjne	r5,#0x2a,00349$
      0026A2 80 12            [24] 7237 	sjmp	00132$
      0026A4                       7238 00349$:
                                   7239 ;	calc.c:468: ((char)input == '/') || ((char)input == '\\') ||
      0026A4 BD 2F 02         [24] 7240 	cjne	r5,#0x2f,00350$
      0026A7 80 0D            [24] 7241 	sjmp	00132$
      0026A9                       7242 00350$:
      0026A9 BD 5C 02         [24] 7243 	cjne	r5,#0x5c,00351$
      0026AC 80 08            [24] 7244 	sjmp	00132$
      0026AE                       7245 00351$:
                                   7246 ;	calc.c:469: ((char)input == '%') || ((char)input == '#')
      0026AE BD 25 02         [24] 7247 	cjne	r5,#0x25,00352$
      0026B1 80 03            [24] 7248 	sjmp	00132$
      0026B3                       7249 00352$:
      0026B3 BD 23 29         [24] 7250 	cjne	r5,#0x23,00133$
      0026B6                       7251 00132$:
                                   7252 ;	calc.c:471: if (state_exec(&s, EVENT_OP) <= 0) break;
      0026B6 74 02            [12] 7253 	mov	a,#0x02
      0026B8 C0 E0            [24] 7254 	push	acc
      0026BA E4               [12] 7255 	clr	a
      0026BB C0 E0            [24] 7256 	push	acc
      0026BD 90r00r00         [24] 7257 	mov	dptr,#_s
      0026C0 75 F0 00         [24] 7258 	mov	b,#0x00
      0026C3 12r00r00         [24] 7259 	lcall	_state_exec
      0026C6 AE 82            [24] 7260 	mov	r6,dpl
      0026C8 AF 83            [24] 7261 	mov	r7,dph
      0026CA 15 81            [12] 7262 	dec	sp
      0026CC 15 81            [12] 7263 	dec	sp
      0026CE C3               [12] 7264 	clr	c
      0026CF E4               [12] 7265 	clr	a
      0026D0 9E               [12] 7266 	subb	a,r6
      0026D1 74 80            [12] 7267 	mov	a,#(0x00 ^ 0x80)
      0026D3 8F F0            [24] 7268 	mov	b,r7
      0026D5 63 F0 80         [24] 7269 	xrl	b,#0x80
      0026D8 95 F0            [12] 7270 	subb	a,b
      0026DA 50 74            [24] 7271 	jnc	00174$
      0026DC 02r24rDE         [24] 7272 	ljmp	00173$
      0026DF                       7273 00133$:
                                   7274 ;	calc.c:473: ((char)input == '&') ||
      0026DF BD 26 02         [24] 7275 	cjne	r5,#0x26,00356$
      0026E2 80 1C            [24] 7276 	sjmp	00123$
      0026E4                       7277 00356$:
                                   7278 ;	calc.c:474: ((char)input == '|') || ((char)input == '^') ||
      0026E4 BD 7C 02         [24] 7279 	cjne	r5,#0x7c,00357$
      0026E7 80 17            [24] 7280 	sjmp	00123$
      0026E9                       7281 00357$:
      0026E9 BD 5E 02         [24] 7282 	cjne	r5,#0x5e,00358$
      0026EC 80 12            [24] 7283 	sjmp	00123$
      0026EE                       7284 00358$:
                                   7285 ;	calc.c:475: ((char)input == '~') ||
      0026EE BD 7E 02         [24] 7286 	cjne	r5,#0x7e,00359$
      0026F1 80 0D            [24] 7287 	sjmp	00123$
      0026F3                       7288 00359$:
                                   7289 ;	calc.c:476: ((char)input == '>') || ((char)input == ']') ||
      0026F3 BD 3E 02         [24] 7290 	cjne	r5,#0x3e,00360$
      0026F6 80 08            [24] 7291 	sjmp	00123$
      0026F8                       7292 00360$:
      0026F8 BD 5D 02         [24] 7293 	cjne	r5,#0x5d,00361$
      0026FB 80 03            [24] 7294 	sjmp	00123$
      0026FD                       7295 00361$:
                                   7296 ;	calc.c:477: ((char)input == '<')
      0026FD BD 3C 29         [24] 7297 	cjne	r5,#0x3c,00124$
      002700                       7298 00123$:
                                   7299 ;	calc.c:479: if (state_exec(&s, EVENT_OP) <= 0) break;
      002700 74 02            [12] 7300 	mov	a,#0x02
      002702 C0 E0            [24] 7301 	push	acc
      002704 E4               [12] 7302 	clr	a
      002705 C0 E0            [24] 7303 	push	acc
      002707 90r00r00         [24] 7304 	mov	dptr,#_s
      00270A 75 F0 00         [24] 7305 	mov	b,#0x00
      00270D 12r00r00         [24] 7306 	lcall	_state_exec
      002710 AE 82            [24] 7307 	mov	r6,dpl
      002712 AF 83            [24] 7308 	mov	r7,dph
      002714 15 81            [12] 7309 	dec	sp
      002716 15 81            [12] 7310 	dec	sp
      002718 C3               [12] 7311 	clr	c
      002719 E4               [12] 7312 	clr	a
      00271A 9E               [12] 7313 	subb	a,r6
      00271B 74 80            [12] 7314 	mov	a,#(0x00 ^ 0x80)
      00271D 8F F0            [24] 7315 	mov	b,r7
      00271F 63 F0 80         [24] 7316 	xrl	b,#0x80
      002722 95 F0            [12] 7317 	subb	a,b
      002724 50 2A            [24] 7318 	jnc	00174$
      002726 02r24rDE         [24] 7319 	ljmp	00173$
      002729                       7320 00124$:
                                   7321 ;	calc.c:481: if (state_exec(&s, EVENT_DELIM) <= 0) break;
      002729 E4               [12] 7322 	clr	a
      00272A C0 E0            [24] 7323 	push	acc
      00272C C0 E0            [24] 7324 	push	acc
      00272E 90r00r00         [24] 7325 	mov	dptr,#_s
      002731 75 F0 00         [24] 7326 	mov	b,#0x00
      002734 12r00r00         [24] 7327 	lcall	_state_exec
      002737 AE 82            [24] 7328 	mov	r6,dpl
      002739 AF 83            [24] 7329 	mov	r7,dph
      00273B 15 81            [12] 7330 	dec	sp
      00273D 15 81            [12] 7331 	dec	sp
      00273F C3               [12] 7332 	clr	c
      002740 E4               [12] 7333 	clr	a
      002741 9E               [12] 7334 	subb	a,r6
      002742 74 80            [12] 7335 	mov	a,#(0x00 ^ 0x80)
      002744 8F F0            [24] 7336 	mov	b,r7
      002746 63 F0 80         [24] 7337 	xrl	b,#0x80
      002749 95 F0            [12] 7338 	subb	a,b
      00274B 50 03            [24] 7339 	jnc	00365$
      00274D 02r24rDE         [24] 7340 	ljmp	00173$
      002750                       7341 00365$:
      002750                       7342 00174$:
                                   7343 ;	calc.c:487: __endasm;
      002750 43 87 02         [24] 7344 	orl	pcon, #2
                                   7345 ;	calc.c:488: }
      002753 22               [24] 7346 	ret
                                   7347 	.area CSEG    (CODE)
                                   7348 	.area CONST   (CODE)
                                   7349 	.area CONST   (CODE)
      000000                       7350 ___str_0:
      000000 0D                    7351 	.db 0x0d
      000001 0A                    7352 	.db 0x0a
      000002 00                    7353 	.db 0x00
                                   7354 	.area CSEG    (CODE)
                                   7355 	.area CONST   (CODE)
      000003                       7356 ___str_1:
      000003 73 74 61 63 6B 20 75  7357 	.ascii "stack underflow"
             6E 64 65 72 66 6C 6F
             77
      000012 0D                    7358 	.db 0x0d
      000013 0A                    7359 	.db 0x0a
      000014 00                    7360 	.db 0x00
                                   7361 	.area CSEG    (CODE)
                                   7362 	.area CONST   (CODE)
      000015                       7363 ___str_2:
      000015 56 41 20              7364 	.ascii "VA "
      000018 00                    7365 	.db 0x00
                                   7366 	.area CSEG    (CODE)
                                   7367 	.area CONST   (CODE)
      000019                       7368 ___str_3:
      000019 25 20 31 31 6C 64 20  7369 	.ascii "% 11ld / "
             2F 20
      000022 00                    7370 	.db 0x00
                                   7371 	.area CSEG    (CODE)
                                   7372 	.area CONST   (CODE)
      000023                       7373 ___str_4:
      000023 25 30 38 6C 78 20 2F  7374 	.ascii "%08lx / "
             20
      00002B 00                    7375 	.db 0x00
                                   7376 	.area CSEG    (CODE)
                                   7377 	.area CONST   (CODE)
      00002C                       7378 ___str_5:
      00002C 50 41 20              7379 	.ascii "PA "
      00002F 00                    7380 	.db 0x00
                                   7381 	.area CSEG    (CODE)
                                   7382 	.area CONST   (CODE)
      000030                       7383 ___str_6:
      000030 50 54 20              7384 	.ascii "PT "
      000033 00                    7385 	.db 0x00
                                   7386 	.area CSEG    (CODE)
                                   7387 	.area CONST   (CODE)
      000034                       7388 ___str_7:
      000034 56 54 20              7389 	.ascii "VT "
      000037 00                    7390 	.db 0x00
                                   7391 	.area CSEG    (CODE)
                                   7392 	.area CONST   (CODE)
      000038                       7393 ___str_8:
      000038 0D                    7394 	.db 0x0d
      000039 0A                    7395 	.db 0x0a
      00003A 73 74 61 63 6B 20 75  7396 	.ascii "stack underflow"
             6E 64 65 72 66 6C 6F
             77
      000049 0D                    7397 	.db 0x0d
      00004A 0A                    7398 	.db 0x0a
      00004B 00                    7399 	.db 0x00
                                   7400 	.area CSEG    (CODE)
                                   7401 	.area CONST   (CODE)
      00004C                       7402 ___str_9:
      00004C 0D                    7403 	.db 0x0d
      00004D 0A                    7404 	.db 0x0a
      00004E 64 69 76 69 73 69 6F  7405 	.ascii "division by zero"
             6E 20 62 79 20 7A 65
             72 6F
      00005E 0D                    7406 	.db 0x0d
      00005F 0A                    7407 	.db 0x0a
      000060 00                    7408 	.db 0x00
                                   7409 	.area CSEG    (CODE)
                                   7410 	.area CONST   (CODE)
      000061                       7411 ___str_10:
      000061 0D                    7412 	.db 0x0d
      000062 0A                    7413 	.db 0x0a
      000063 73 74 61 63 6B 20 6F  7414 	.ascii "stack overflow"
             76 65 72 66 6C 6F 77
      000071 0D                    7415 	.db 0x0d
      000072 0A                    7416 	.db 0x0a
      000073 00                    7417 	.db 0x00
                                   7418 	.area CSEG    (CODE)
                                   7419 	.area CONST   (CODE)
      000074                       7420 ___str_11:
      000074 0D                    7421 	.db 0x0d
      000075 0A                    7422 	.db 0x0a
      000076 62 61 73 65 20 3D 20  7423 	.ascii "base = %d, "
             25 64 2C 20
      000081 00                    7424 	.db 0x00
                                   7425 	.area CSEG    (CODE)
                                   7426 	.area CONST   (CODE)
      000082                       7427 ___str_12:
      000082 61 63 63 20 3D 20 25  7428 	.ascii "acc = %ld / "
             6C 64 20 2F 20
      00008E 00                    7429 	.db 0x00
                                   7430 	.area CSEG    (CODE)
                                   7431 	.area CONST   (CODE)
      00008F                       7432 ___str_13:
      00008F 2C 20 61 63 63 5F 76  7433 	.ascii ", acc_valid = %d"
             61 6C 69 64 20 3D 20
             25 64
      00009F 0D                    7434 	.db 0x0d
      0000A0 0A                    7435 	.db 0x0a
      0000A1 0D                    7436 	.db 0x0d
      0000A2 0A                    7437 	.db 0x0a
      0000A3 00                    7438 	.db 0x00
                                   7439 	.area CSEG    (CODE)
                                   7440 	.area CONST   (CODE)
      0000A4                       7441 ___str_14:
      0000A4 48 68 4F 6F           7442 	.ascii "HhOo"
      0000A8 09                    7443 	.db 0x09
      0000A9 62 61 73 65 20 31 36  7444 	.ascii "base 16 10 8 2"
             20 31 30 20 38 20 32
      0000B7 0D                    7445 	.db 0x0d
      0000B8 0A                    7446 	.db 0x0a
      0000B9 00                    7447 	.db 0x00
                                   7448 	.area CSEG    (CODE)
                                   7449 	.area CONST   (CODE)
      0000BA                       7450 ___str_15:
      0000BA 70                    7451 	.ascii "p"
      0000BB 09                    7452 	.db 0x09
      0000BC 70 65 65 6B 20 74 6F  7453 	.ascii "peek top"
             70
      0000C4 0D                    7454 	.db 0x0d
      0000C5 0A                    7455 	.db 0x0a
      0000C6 00                    7456 	.db 0x00
                                   7457 	.area CSEG    (CODE)
                                   7458 	.area CONST   (CODE)
      0000C7                       7459 ___str_16:
      0000C7 50                    7460 	.ascii "P"
      0000C8 09                    7461 	.db 0x09
      0000C9 70 72 69 6E 74 20 73  7462 	.ascii "print stack"
             74 61 63 6B
      0000D4 0D                    7463 	.db 0x0d
      0000D5 0A                    7464 	.db 0x0a
      0000D6 00                    7465 	.db 0x00
                                   7466 	.area CSEG    (CODE)
                                   7467 	.area CONST   (CODE)
      0000D7                       7468 ___str_17:
      0000D7 76 2E                 7469 	.ascii "v."
      0000D9 09                    7470 	.db 0x09
      0000DA 70 6F 70 20 74 6F 70  7471 	.ascii "pop top"
      0000E1 0D                    7472 	.db 0x0d
      0000E2 0A                    7473 	.db 0x0a
      0000E3 00                    7474 	.db 0x00
                                   7475 	.area CSEG    (CODE)
                                   7476 	.area CONST   (CODE)
      0000E4                       7477 ___str_18:
      0000E4 56                    7478 	.ascii "V"
      0000E5 09                    7479 	.db 0x09
      0000E6 70 6F 70 20 61 6C 6C  7480 	.ascii "pop all"
      0000ED 0D                    7481 	.db 0x0d
      0000EE 0A                    7482 	.db 0x0a
      0000EF 00                    7483 	.db 0x00
                                   7484 	.area CSEG    (CODE)
                                   7485 	.area CONST   (CODE)
      0000F0                       7486 ___str_19:
      0000F0 69                    7487 	.ascii "i"
      0000F1 09                    7488 	.db 0x09
      0000F2 72 65 73 65 74 20 61  7489 	.ascii "reset acc"
             63 63
      0000FB 0D                    7490 	.db 0x0d
      0000FC 0A                    7491 	.db 0x0a
      0000FD 00                    7492 	.db 0x00
                                   7493 	.area CSEG    (CODE)
                                   7494 	.area CONST   (CODE)
      0000FE                       7495 ___str_20:
      0000FE 49                    7496 	.ascii "I"
      0000FF 09                    7497 	.db 0x09
      000100 72 65 73 65 74 20 61  7498 	.ascii "reset and discard acc"
             6E 64 20 64 69 73 63
             61 72 64 20 61 63 63
      000115 0D                    7499 	.db 0x0d
      000116 0A                    7500 	.db 0x0a
      000117 00                    7501 	.db 0x00
                                   7502 	.area CSEG    (CODE)
                                   7503 	.area CONST   (CODE)
      000118                       7504 ___str_21:
      000118 78                    7505 	.ascii "x"
      000119 09                    7506 	.db 0x09
      00011A 65 78 63 68 61 6E 67  7507 	.ascii "exchange top 2"
             65 20 74 6F 70 20 32
      000128 0D                    7508 	.db 0x0d
      000129 0A                    7509 	.db 0x0a
      00012A 00                    7510 	.db 0x00
                                   7511 	.area CSEG    (CODE)
                                   7512 	.area CONST   (CODE)
      00012B                       7513 ___str_22:
      00012B 2B                    7514 	.ascii "+"
      00012C 09                    7515 	.db 0x09
      00012D 61 64 64 20 74 6F 70  7516 	.ascii "add top 2"
             20 32
      000136 0D                    7517 	.db 0x0d
      000137 0A                    7518 	.db 0x0a
      000138 00                    7519 	.db 0x00
                                   7520 	.area CSEG    (CODE)
                                   7521 	.area CONST   (CODE)
      000139                       7522 ___str_23:
      000139 2D                    7523 	.ascii "-"
      00013A 09                    7524 	.db 0x09
      00013B 73 75 62 74 72 61 63  7525 	.ascii "subtract top 2"
             74 20 74 6F 70 20 32
      000149 0D                    7526 	.db 0x0d
      00014A 0A                    7527 	.db 0x0a
      00014B 00                    7528 	.db 0x00
                                   7529 	.area CSEG    (CODE)
                                   7530 	.area CONST   (CODE)
      00014C                       7531 ___str_24:
      00014C 2A                    7532 	.ascii "*"
      00014D 09                    7533 	.db 0x09
      00014E 6D 75 6C 74 69 70 6C  7534 	.ascii "multiply top 2"
             79 20 74 6F 70 20 32
      00015C 0D                    7535 	.db 0x0d
      00015D 0A                    7536 	.db 0x0a
      00015E 00                    7537 	.db 0x00
                                   7538 	.area CSEG    (CODE)
                                   7539 	.area CONST   (CODE)
      00015F                       7540 ___str_25:
      00015F 2F                    7541 	.ascii "/"
      000160 09                    7542 	.db 0x09
      000161 64 69 76 69 64 65 20  7543 	.ascii "divide top 2"
             74 6F 70 20 32
      00016D 0D                    7544 	.db 0x0d
      00016E 0A                    7545 	.db 0x0a
      00016F 00                    7546 	.db 0x00
                                   7547 	.area CSEG    (CODE)
                                   7548 	.area CONST   (CODE)
      000170                       7549 ___str_26:
      000170 5C                    7550 	.db 0x5c
      000171 09                    7551 	.db 0x09
      000172 64 69 76 69 64 65 20  7552 	.ascii "divide top 2 unsigned"
             74 6F 70 20 32 20 75
             6E 73 69 67 6E 65 64
      000187 0D                    7553 	.db 0x0d
      000188 0A                    7554 	.db 0x0a
      000189 00                    7555 	.db 0x00
                                   7556 	.area CSEG    (CODE)
                                   7557 	.area CONST   (CODE)
      00018A                       7558 ___str_27:
      00018A 25                    7559 	.ascii "%"
      00018B 09                    7560 	.db 0x09
      00018C 6D 6F 64 75 6C 75 73  7561 	.ascii "modulus top 2"
             20 74 6F 70 20 32
      000199 0D                    7562 	.db 0x0d
      00019A 0A                    7563 	.db 0x0a
      00019B 00                    7564 	.db 0x00
                                   7565 	.area CSEG    (CODE)
                                   7566 	.area CONST   (CODE)
      00019C                       7567 ___str_28:
      00019C 23                    7568 	.ascii "#"
      00019D 09                    7569 	.db 0x09
      00019E 6D 6F 64 75 6C 75 73  7570 	.ascii "modulus top 2 unsigned"
             20 74 6F 70 20 32 20
             75 6E 73 69 67 6E 65
             64
      0001B4 0D                    7571 	.db 0x0d
      0001B5 0A                    7572 	.db 0x0a
      0001B6 00                    7573 	.db 0x00
                                   7574 	.area CSEG    (CODE)
                                   7575 	.area CONST   (CODE)
      0001B7                       7576 ___str_29:
      0001B7 26                    7577 	.ascii "&"
      0001B8 09                    7578 	.db 0x09
      0001B9 61 6E 64 20 74 6F 70  7579 	.ascii "and top 2"
             20 32
      0001C2 0D                    7580 	.db 0x0d
      0001C3 0A                    7581 	.db 0x0a
      0001C4 00                    7582 	.db 0x00
                                   7583 	.area CSEG    (CODE)
                                   7584 	.area CONST   (CODE)
      0001C5                       7585 ___str_30:
      0001C5 7C                    7586 	.ascii "|"
      0001C6 09                    7587 	.db 0x09
      0001C7 6F 72 20 74 6F 70 20  7588 	.ascii "or top 2"
             32
      0001CF 0D                    7589 	.db 0x0d
      0001D0 0A                    7590 	.db 0x0a
      0001D1 00                    7591 	.db 0x00
                                   7592 	.area CSEG    (CODE)
                                   7593 	.area CONST   (CODE)
      0001D2                       7594 ___str_31:
      0001D2 5E                    7595 	.ascii "^"
      0001D3 09                    7596 	.db 0x09
      0001D4 78 6F 72 20 74 6F 70  7597 	.ascii "xor top 2"
             20 32
      0001DD 0D                    7598 	.db 0x0d
      0001DE 0A                    7599 	.db 0x0a
      0001DF 00                    7600 	.db 0x00
                                   7601 	.area CSEG    (CODE)
                                   7602 	.area CONST   (CODE)
      0001E0                       7603 ___str_32:
      0001E0 3E                    7604 	.ascii ">"
      0001E1 09                    7605 	.db 0x09
      0001E2 73 68 69 66 74 20 72  7606 	.ascii "shift right top 2"
             69 67 68 74 20 74 6F
             70 20 32
      0001F3 0D                    7607 	.db 0x0d
      0001F4 0A                    7608 	.db 0x0a
      0001F5 00                    7609 	.db 0x00
                                   7610 	.area CSEG    (CODE)
                                   7611 	.area CONST   (CODE)
      0001F6                       7612 ___str_33:
      0001F6 5D                    7613 	.ascii "]"
      0001F7 09                    7614 	.db 0x09
      0001F8 61 72 69 74 68 6D 65  7615 	.ascii "arithmetic shift right top 2"
             74 69 63 20 73 68 69
             66 74 20 72 69 67 68
             74 20 74 6F 70 20 32
      000214 0D                    7616 	.db 0x0d
      000215 0A                    7617 	.db 0x0a
      000216 00                    7618 	.db 0x00
                                   7619 	.area CSEG    (CODE)
                                   7620 	.area CONST   (CODE)
      000217                       7621 ___str_34:
      000217 3C                    7622 	.ascii "<"
      000218 09                    7623 	.db 0x09
      000219 73 68 69 66 74 20 6C  7624 	.ascii "shift left top 2"
             65 66 74 20 74 6F 70
             20 32
      000229 0D                    7625 	.db 0x0d
      00022A 0A                    7626 	.db 0x0a
      00022B 00                    7627 	.db 0x00
                                   7628 	.area CSEG    (CODE)
                                   7629 	.area CONST   (CODE)
      00022C                       7630 ___str_35:
      00022C 7E                    7631 	.ascii "~"
      00022D 09                    7632 	.db 0x09
      00022E 62 69 74 77 69 73 65  7633 	.ascii "bitwise not top"
             20 6E 6F 74 20 74 6F
             70
      00023D 0D                    7634 	.db 0x0d
      00023E 0A                    7635 	.db 0x0a
      00023F 00                    7636 	.db 0x00
                                   7637 	.area CSEG    (CODE)
                                   7638 	.area CONST   (CODE)
      000240                       7639 ___str_36:
      000240 3F                    7640 	.ascii "?"
      000241 09                    7641 	.db 0x09
      000242 68 65 6C 70           7642 	.ascii "help"
      000246 0D                    7643 	.db 0x0d
      000247 0A                    7644 	.db 0x0a
      000248 00                    7645 	.db 0x00
                                   7646 	.area CSEG    (CODE)
                                   7647 	.area CONST   (CODE)
      000249                       7648 ___str_37:
      000249 71                    7649 	.ascii "q"
      00024A 09                    7650 	.db 0x09
      00024B 71 75 69 74           7651 	.ascii "quit"
      00024F 0D                    7652 	.db 0x0d
      000250 0A                    7653 	.db 0x0a
      000251 00                    7654 	.db 0x00
                                   7655 	.area CSEG    (CODE)
                                   7656 	.area XINIT   (CODE)
      000000                       7657 __xinit__deltas:
      000000 00 00                 7658 	.byte #0x00, #0x00	;  0
      000002 00 00                 7659 	.byte #0x00, #0x00	;  0
      000004 00 00                 7660 	.byte #0x00, #0x00	;  0
      000006 00 00                 7661 	.byte #0x00,#0x00
      000008 00 00                 7662 	.byte #0x00,#0x00
      00000A 00 00                 7663 	.byte #0x00, #0x00	;  0
      00000C 01 00                 7664 	.byte #0x01, #0x00	;  1
      00000E 02 00                 7665 	.byte #0x02, #0x00	;  2
      000010 00 00                 7666 	.byte #0x00,#0x00
      000012rCBs00                 7667 	.byte _accumulate, (_accumulate >> 8)
      000014 00 00                 7668 	.byte #0x00, #0x00	;  0
      000016 02 00                 7669 	.byte #0x02, #0x00	;  2
      000018 01 00                 7670 	.byte #0x01, #0x00	;  1
      00001A 00 00                 7671 	.byte #0x00,#0x00
      00001Cr24s06                 7672 	.byte _operator, (_operator >> 8)
      00001E 01 00                 7673 	.byte #0x01, #0x00	;  1
      000020 00 00                 7674 	.byte #0x00, #0x00	;  0
      000022 00 00                 7675 	.byte #0x00, #0x00	;  0
      000024 00 00                 7676 	.byte #0x00,#0x00
      000026 00 00                 7677 	.byte #0x00,#0x00
      000028 01 00                 7678 	.byte #0x01, #0x00	;  1
      00002A 02 00                 7679 	.byte #0x02, #0x00	;  2
      00002C 01 00                 7680 	.byte #0x01, #0x00	;  1
      00002E 00 00                 7681 	.byte #0x00,#0x00
      000030r24s06                 7682 	.byte _operator, (_operator >> 8)
      000032 01 00                 7683 	.byte #0x01, #0x00	;  1
      000034 01 00                 7684 	.byte #0x01, #0x00	;  1
      000036 02 00                 7685 	.byte #0x02, #0x00	;  2
      000038 00 00                 7686 	.byte #0x00,#0x00
      00003ArCBs00                 7687 	.byte _accumulate, (_accumulate >> 8)
      00003C 02 00                 7688 	.byte #0x02, #0x00	;  2
      00003E 00 00                 7689 	.byte #0x00, #0x00	;  0
      000040 00 00                 7690 	.byte #0x00, #0x00	;  0
      000042 00 00                 7691 	.byte #0x00,#0x00
      000044rB7s1D                 7692 	.byte _push_acc, (_push_acc >> 8)
      000046 02 00                 7693 	.byte #0x02, #0x00	;  2
      000048 06 00                 7694 	.byte #0x06, #0x00	;  6
      00004A 00 00                 7695 	.byte #0x00, #0x00	;  0
      00004C 00 00                 7696 	.byte #0x00,#0x00
      00004ErBEs1E                 7697 	.byte _reset_acc, (_reset_acc >> 8)
      000050 02 00                 7698 	.byte #0x02, #0x00	;  2
      000052 01 00                 7699 	.byte #0x01, #0x00	;  1
      000054 02 00                 7700 	.byte #0x02, #0x00	;  2
      000056 00 00                 7701 	.byte #0x00,#0x00
      000058rCBs00                 7702 	.byte _accumulate, (_accumulate >> 8)
      00005A 02 00                 7703 	.byte #0x02, #0x00	;  2
      00005C 02 00                 7704 	.byte #0x02, #0x00	;  2
      00005E 01 00                 7705 	.byte #0x01, #0x00	;  1
      000060 00 00                 7706 	.byte #0x00,#0x00
      000062rB7s1D                 7707 	.byte _push_acc, (_push_acc >> 8)
      000064 FF 7F                 7708 	.byte #0xff, #0x7f	;  32767
      000066 05 00                 7709 	.byte #0x05, #0x00	;  5
      000068 FF 7F                 7710 	.byte #0xff, #0x7f	;  32767
      00006A 00 00                 7711 	.byte #0x00,#0x00
      00006CrBEs1E                 7712 	.byte _reset_acc, (_reset_acc >> 8)
      00006E FF 7F                 7713 	.byte #0xff, #0x7f	;  32767
      000070 06 00                 7714 	.byte #0x06, #0x00	;  6
      000072 FF 7F                 7715 	.byte #0xff, #0x7f	;  32767
      000074 00 00                 7716 	.byte #0x00,#0x00
      000076 00 00                 7717 	.byte #0x00,#0x00
      000078 FF 7F                 7718 	.byte #0xff, #0x7f	;  32767
      00007A 04 00                 7719 	.byte #0x04, #0x00	;  4
      00007C FF 7F                 7720 	.byte #0xff, #0x7f	;  32767
      00007E 00 00                 7721 	.byte #0x00,#0x00
      000080r28s1F                 7722 	.byte _reset_base, (_reset_base >> 8)
      000082 FF 7F                 7723 	.byte #0xff, #0x7f	;  32767
      000084 03 00                 7724 	.byte #0x03, #0x00	;  3
      000086 FF 7F                 7725 	.byte #0xff, #0x7f	;  32767
      000088 00 00                 7726 	.byte #0x00,#0x00
      00008ArA6s1F                 7727 	.byte _help, (_help >> 8)
      00008C FF 7F                 7728 	.byte #0xff, #0x7f	;  32767
      00008E 07 00                 7729 	.byte #0x07, #0x00	;  7
      000090 03 00                 7730 	.byte #0x03, #0x00	;  3
      000092 00 00                 7731 	.byte #0x00,#0x00
      000094r3Cs02                 7732 	.byte _dump_pop, (_dump_pop >> 8)
      000096 00 80                 7733 	.byte #0x00, #0x80	; -32768
      000098 00 80                 7734 	.byte #0x00, #0x80	; -32768
      00009A 00 80                 7735 	.byte #0x00, #0x80	; -32768
      00009C 00 00                 7736 	.byte #0x00,#0x00
      00009E 00 00                 7737 	.byte #0x00,#0x00
                                   7738 	.area CABS    (ABS,CODE)
