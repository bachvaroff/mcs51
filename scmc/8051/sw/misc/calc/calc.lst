                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module calc
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _getchar_poll
                                     13 	.globl _state_exec
                                     14 	.globl _state_init
                                     15 	.globl _stack_iter_peek
                                     16 	.globl _stack_peek2
                                     17 	.globl _stack_peek
                                     18 	.globl _stack_pop
                                     19 	.globl _stack_push
                                     20 	.globl _stack_init
                                     21 	.globl _isxdigit
                                     22 	.globl _printf
                                     23 	.globl _strtol
                                     24 	.globl _CY
                                     25 	.globl _AC
                                     26 	.globl _F0
                                     27 	.globl _RS1
                                     28 	.globl _RS0
                                     29 	.globl _OV
                                     30 	.globl _FL
                                     31 	.globl _P
                                     32 	.globl _TF2
                                     33 	.globl _EXF2
                                     34 	.globl _RCLK
                                     35 	.globl _TCLK
                                     36 	.globl _EXEN2
                                     37 	.globl _TR2
                                     38 	.globl _C_T2
                                     39 	.globl _CP_RL2
                                     40 	.globl _T2CON_7
                                     41 	.globl _T2CON_6
                                     42 	.globl _T2CON_5
                                     43 	.globl _T2CON_4
                                     44 	.globl _T2CON_3
                                     45 	.globl _T2CON_2
                                     46 	.globl _T2CON_1
                                     47 	.globl _T2CON_0
                                     48 	.globl _PT2
                                     49 	.globl _PS
                                     50 	.globl _PT1
                                     51 	.globl _PX1
                                     52 	.globl _PT0
                                     53 	.globl _PX0
                                     54 	.globl _RD
                                     55 	.globl _WR
                                     56 	.globl _T1
                                     57 	.globl _T0
                                     58 	.globl _INT1
                                     59 	.globl _INT0
                                     60 	.globl _TXD
                                     61 	.globl _RXD
                                     62 	.globl _P3_7
                                     63 	.globl _P3_6
                                     64 	.globl _P3_5
                                     65 	.globl _P3_4
                                     66 	.globl _P3_3
                                     67 	.globl _P3_2
                                     68 	.globl _P3_1
                                     69 	.globl _P3_0
                                     70 	.globl _EA
                                     71 	.globl _ET2
                                     72 	.globl _ES
                                     73 	.globl _ET1
                                     74 	.globl _EX1
                                     75 	.globl _ET0
                                     76 	.globl _EX0
                                     77 	.globl _P2_7
                                     78 	.globl _P2_6
                                     79 	.globl _P2_5
                                     80 	.globl _P2_4
                                     81 	.globl _P2_3
                                     82 	.globl _P2_2
                                     83 	.globl _P2_1
                                     84 	.globl _P2_0
                                     85 	.globl _SM0
                                     86 	.globl _SM1
                                     87 	.globl _SM2
                                     88 	.globl _REN
                                     89 	.globl _TB8
                                     90 	.globl _RB8
                                     91 	.globl _TI
                                     92 	.globl _RI
                                     93 	.globl _T2EX
                                     94 	.globl _T2
                                     95 	.globl _P1_7
                                     96 	.globl _P1_6
                                     97 	.globl _P1_5
                                     98 	.globl _P1_4
                                     99 	.globl _P1_3
                                    100 	.globl _P1_2
                                    101 	.globl _P1_1
                                    102 	.globl _P1_0
                                    103 	.globl _TF1
                                    104 	.globl _TR1
                                    105 	.globl _TF0
                                    106 	.globl _TR0
                                    107 	.globl _IE1
                                    108 	.globl _IT1
                                    109 	.globl _IE0
                                    110 	.globl _IT0
                                    111 	.globl _P0_7
                                    112 	.globl _P0_6
                                    113 	.globl _P0_5
                                    114 	.globl _P0_4
                                    115 	.globl _P0_3
                                    116 	.globl _P0_2
                                    117 	.globl _P0_1
                                    118 	.globl _P0_0
                                    119 	.globl _B
                                    120 	.globl _A
                                    121 	.globl _ACC
                                    122 	.globl _PSW
                                    123 	.globl _TH2
                                    124 	.globl _TL2
                                    125 	.globl _RCAP2H
                                    126 	.globl _RCAP2L
                                    127 	.globl _T2MOD
                                    128 	.globl _T2CON
                                    129 	.globl _IP
                                    130 	.globl _P3
                                    131 	.globl _IE
                                    132 	.globl _P2
                                    133 	.globl _SBUF
                                    134 	.globl _SCON
                                    135 	.globl _P1
                                    136 	.globl _TH1
                                    137 	.globl _TH0
                                    138 	.globl _TL1
                                    139 	.globl _TL0
                                    140 	.globl _TMOD
                                    141 	.globl _TCON
                                    142 	.globl _PCON
                                    143 	.globl _DPH
                                    144 	.globl _DPL
                                    145 	.globl _SP
                                    146 	.globl _P0
                                    147 	.globl _putchar
                                    148 	.globl _getchar
                                    149 ;--------------------------------------------------------
                                    150 ; special function registers
                                    151 ;--------------------------------------------------------
                                    152 	.area RSEG    (ABS,DATA)
      000000                        153 	.org 0x0000
                           000080   154 _P0	=	0x0080
                           000081   155 _SP	=	0x0081
                           000082   156 _DPL	=	0x0082
                           000083   157 _DPH	=	0x0083
                           000087   158 _PCON	=	0x0087
                           000088   159 _TCON	=	0x0088
                           000089   160 _TMOD	=	0x0089
                           00008A   161 _TL0	=	0x008a
                           00008B   162 _TL1	=	0x008b
                           00008C   163 _TH0	=	0x008c
                           00008D   164 _TH1	=	0x008d
                           000090   165 _P1	=	0x0090
                           000098   166 _SCON	=	0x0098
                           000099   167 _SBUF	=	0x0099
                           0000A0   168 _P2	=	0x00a0
                           0000A8   169 _IE	=	0x00a8
                           0000B0   170 _P3	=	0x00b0
                           0000B8   171 _IP	=	0x00b8
                           0000C8   172 _T2CON	=	0x00c8
                           0000C9   173 _T2MOD	=	0x00c9
                           0000CA   174 _RCAP2L	=	0x00ca
                           0000CB   175 _RCAP2H	=	0x00cb
                           0000CC   176 _TL2	=	0x00cc
                           0000CD   177 _TH2	=	0x00cd
                           0000D0   178 _PSW	=	0x00d0
                           0000E0   179 _ACC	=	0x00e0
                           0000E0   180 _A	=	0x00e0
                           0000F0   181 _B	=	0x00f0
                                    182 ;--------------------------------------------------------
                                    183 ; special function bits
                                    184 ;--------------------------------------------------------
                                    185 	.area RSEG    (ABS,DATA)
      000000                        186 	.org 0x0000
                           000080   187 _P0_0	=	0x0080
                           000081   188 _P0_1	=	0x0081
                           000082   189 _P0_2	=	0x0082
                           000083   190 _P0_3	=	0x0083
                           000084   191 _P0_4	=	0x0084
                           000085   192 _P0_5	=	0x0085
                           000086   193 _P0_6	=	0x0086
                           000087   194 _P0_7	=	0x0087
                           000088   195 _IT0	=	0x0088
                           000089   196 _IE0	=	0x0089
                           00008A   197 _IT1	=	0x008a
                           00008B   198 _IE1	=	0x008b
                           00008C   199 _TR0	=	0x008c
                           00008D   200 _TF0	=	0x008d
                           00008E   201 _TR1	=	0x008e
                           00008F   202 _TF1	=	0x008f
                           000090   203 _P1_0	=	0x0090
                           000091   204 _P1_1	=	0x0091
                           000092   205 _P1_2	=	0x0092
                           000093   206 _P1_3	=	0x0093
                           000094   207 _P1_4	=	0x0094
                           000095   208 _P1_5	=	0x0095
                           000096   209 _P1_6	=	0x0096
                           000097   210 _P1_7	=	0x0097
                           000090   211 _T2	=	0x0090
                           000091   212 _T2EX	=	0x0091
                           000098   213 _RI	=	0x0098
                           000099   214 _TI	=	0x0099
                           00009A   215 _RB8	=	0x009a
                           00009B   216 _TB8	=	0x009b
                           00009C   217 _REN	=	0x009c
                           00009D   218 _SM2	=	0x009d
                           00009E   219 _SM1	=	0x009e
                           00009F   220 _SM0	=	0x009f
                           0000A0   221 _P2_0	=	0x00a0
                           0000A1   222 _P2_1	=	0x00a1
                           0000A2   223 _P2_2	=	0x00a2
                           0000A3   224 _P2_3	=	0x00a3
                           0000A4   225 _P2_4	=	0x00a4
                           0000A5   226 _P2_5	=	0x00a5
                           0000A6   227 _P2_6	=	0x00a6
                           0000A7   228 _P2_7	=	0x00a7
                           0000A8   229 _EX0	=	0x00a8
                           0000A9   230 _ET0	=	0x00a9
                           0000AA   231 _EX1	=	0x00aa
                           0000AB   232 _ET1	=	0x00ab
                           0000AC   233 _ES	=	0x00ac
                           0000AD   234 _ET2	=	0x00ad
                           0000AF   235 _EA	=	0x00af
                           0000B0   236 _P3_0	=	0x00b0
                           0000B1   237 _P3_1	=	0x00b1
                           0000B2   238 _P3_2	=	0x00b2
                           0000B3   239 _P3_3	=	0x00b3
                           0000B4   240 _P3_4	=	0x00b4
                           0000B5   241 _P3_5	=	0x00b5
                           0000B6   242 _P3_6	=	0x00b6
                           0000B7   243 _P3_7	=	0x00b7
                           0000B0   244 _RXD	=	0x00b0
                           0000B1   245 _TXD	=	0x00b1
                           0000B2   246 _INT0	=	0x00b2
                           0000B3   247 _INT1	=	0x00b3
                           0000B4   248 _T0	=	0x00b4
                           0000B5   249 _T1	=	0x00b5
                           0000B6   250 _WR	=	0x00b6
                           0000B7   251 _RD	=	0x00b7
                           0000B8   252 _PX0	=	0x00b8
                           0000B9   253 _PT0	=	0x00b9
                           0000BA   254 _PX1	=	0x00ba
                           0000BB   255 _PT1	=	0x00bb
                           0000BC   256 _PS	=	0x00bc
                           0000BD   257 _PT2	=	0x00bd
                           0000C8   258 _T2CON_0	=	0x00c8
                           0000C9   259 _T2CON_1	=	0x00c9
                           0000CA   260 _T2CON_2	=	0x00ca
                           0000CB   261 _T2CON_3	=	0x00cb
                           0000CC   262 _T2CON_4	=	0x00cc
                           0000CD   263 _T2CON_5	=	0x00cd
                           0000CE   264 _T2CON_6	=	0x00ce
                           0000CF   265 _T2CON_7	=	0x00cf
                           0000C8   266 _CP_RL2	=	0x00c8
                           0000C9   267 _C_T2	=	0x00c9
                           0000CA   268 _TR2	=	0x00ca
                           0000CB   269 _EXEN2	=	0x00cb
                           0000CC   270 _TCLK	=	0x00cc
                           0000CD   271 _RCLK	=	0x00cd
                           0000CE   272 _EXF2	=	0x00ce
                           0000CF   273 _TF2	=	0x00cf
                           0000D0   274 _P	=	0x00d0
                           0000D1   275 _FL	=	0x00d1
                           0000D2   276 _OV	=	0x00d2
                           0000D3   277 _RS0	=	0x00d3
                           0000D4   278 _RS1	=	0x00d4
                           0000D5   279 _F0	=	0x00d5
                           0000D6   280 _AC	=	0x00d6
                           0000D7   281 _CY	=	0x00d7
                                    282 ;--------------------------------------------------------
                                    283 ; overlayable register banks
                                    284 ;--------------------------------------------------------
                                    285 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        286 	.ds 8
                                    287 ;--------------------------------------------------------
                                    288 ; internal ram data
                                    289 ;--------------------------------------------------------
                                    290 	.area DSEG    (DATA)
                                    291 ;--------------------------------------------------------
                                    292 ; overlayable items in internal ram 
                                    293 ;--------------------------------------------------------
                                    294 ;--------------------------------------------------------
                                    295 ; Stack segment in internal ram 
                                    296 ;--------------------------------------------------------
                                    297 	.area	SSEG
      000000                        298 __start__stack:
      000000                        299 	.ds	1
                                    300 
                                    301 ;--------------------------------------------------------
                                    302 ; indirectly addressable internal ram data
                                    303 ;--------------------------------------------------------
                                    304 	.area ISEG    (DATA)
                                    305 ;--------------------------------------------------------
                                    306 ; absolute internal ram data
                                    307 ;--------------------------------------------------------
                                    308 	.area IABS    (ABS,DATA)
                                    309 	.area IABS    (ABS,DATA)
                                    310 ;--------------------------------------------------------
                                    311 ; bit data
                                    312 ;--------------------------------------------------------
                                    313 	.area BSEG    (BIT)
                                    314 ;--------------------------------------------------------
                                    315 ; paged external ram data
                                    316 ;--------------------------------------------------------
                                    317 	.area PSEG    (PAG,XDATA)
                                    318 ;--------------------------------------------------------
                                    319 ; external ram data
                                    320 ;--------------------------------------------------------
                                    321 	.area XSEG    (XDATA)
      000000                        322 _s:
      000000                        323 	.ds 12
      00000C                        324 _c:
      00000C                        325 	.ds 16409
                                    326 ;--------------------------------------------------------
                                    327 ; absolute external ram data
                                    328 ;--------------------------------------------------------
                                    329 	.area XABS    (ABS,XDATA)
                                    330 ;--------------------------------------------------------
                                    331 ; external initialized ram data
                                    332 ;--------------------------------------------------------
                                    333 	.area XISEG   (XDATA)
      000000                        334 _deltas:
      000000                        335 	.ds 170
                                    336 	.area HOME    (CODE)
                                    337 	.area GSINIT0 (CODE)
                                    338 	.area GSINIT1 (CODE)
                                    339 	.area GSINIT2 (CODE)
                                    340 	.area GSINIT3 (CODE)
                                    341 	.area GSINIT4 (CODE)
                                    342 	.area GSINIT5 (CODE)
                                    343 	.area GSINIT  (CODE)
                                    344 	.area GSFINAL (CODE)
                                    345 	.area CSEG    (CODE)
                                    346 ;--------------------------------------------------------
                                    347 ; interrupt vector 
                                    348 ;--------------------------------------------------------
                                    349 	.area HOME    (CODE)
      000000                        350 __interrupt_vect:
      000000 02r00r00         [24]  351 	ljmp	__sdcc_gsinit_startup
                                    352 ;--------------------------------------------------------
                                    353 ; global & static initialisations
                                    354 ;--------------------------------------------------------
                                    355 	.area HOME    (CODE)
                                    356 	.area GSINIT  (CODE)
                                    357 	.area GSFINAL (CODE)
                                    358 	.area GSINIT  (CODE)
                                    359 	.globl __sdcc_gsinit_startup
                                    360 	.globl __sdcc_program_startup
                                    361 	.globl __start__stack
                                    362 	.globl __mcs51_genXINIT
                                    363 	.globl __mcs51_genXRAMCLEAR
                                    364 	.globl __mcs51_genRAMCLEAR
                                    365 	.area GSFINAL (CODE)
      000000 02r00r03         [24]  366 	ljmp	__sdcc_program_startup
                                    367 ;--------------------------------------------------------
                                    368 ; Home
                                    369 ;--------------------------------------------------------
                                    370 	.area HOME    (CODE)
                                    371 	.area HOME    (CODE)
      000003                        372 __sdcc_program_startup:
      000003 02r3Ar31         [24]  373 	ljmp	_main
                                    374 ;	return from main will return to caller
                                    375 ;--------------------------------------------------------
                                    376 ; code
                                    377 ;--------------------------------------------------------
                                    378 	.area CSEG    (CODE)
                                    379 ;------------------------------------------------------------
                                    380 ;Allocation info for local variables in function 'putchar'
                                    381 ;------------------------------------------------------------
                                    382 ;c                         Allocated to registers 
                                    383 ;------------------------------------------------------------
                                    384 ;	calc.c:16: int putchar(int c) __naked {
                                    385 ;	-----------------------------------------
                                    386 ;	 function putchar
                                    387 ;	-----------------------------------------
      000000                        388 _putchar:
                                    389 ;	naked function: no prologue.
                                    390 ;	calc.c:21: __endasm;
      000000 E5 82            [12]  391 	mov	a, dpl
      000002 02 00 30         [24]  392 	ljmp	0x0030
                                    393 ;	calc.c:22: }
                                    394 ;	naked function: no epilogue.
                                    395 ;------------------------------------------------------------
                                    396 ;Allocation info for local variables in function 'getchar'
                                    397 ;------------------------------------------------------------
                                    398 ;	calc.c:24: int getchar(void) __naked {
                                    399 ;	-----------------------------------------
                                    400 ;	 function getchar
                                    401 ;	-----------------------------------------
      000005                        402 _getchar:
                                    403 ;	naked function: no prologue.
                                    404 ;	calc.c:30: __endasm;
      000005 12 00 32         [24]  405 	lcall	0x0032
      000008 F5 82            [12]  406 	mov	dpl, a
      00000A 75 83 00         [24]  407 	mov	dph, #0
      00000D 22               [24]  408 	ret
                                    409 ;	calc.c:31: }
                                    410 ;	naked function: no epilogue.
                                    411 ;------------------------------------------------------------
                                    412 ;Allocation info for local variables in function 'getchar_poll'
                                    413 ;------------------------------------------------------------
                                    414 ;	calc.c:33: int getchar_poll(void) __naked {
                                    415 ;	-----------------------------------------
                                    416 ;	 function getchar_poll
                                    417 ;	-----------------------------------------
      00000E                        418 _getchar_poll:
                                    419 ;	naked function: no prologue.
                                    420 ;	calc.c:45: __endasm;
      00000E 74 FF            [12]  421 	mov	a, #0xff
      000010 F5 F0            [12]  422 	mov	b, a
      000012 30 98 07         [24]  423 	jnb	ri, nochar
      000015 C2 98            [12]  424 	clr	ri
      000017 E5 99            [12]  425 	mov	a, sbuf
      000019 75 F0 00         [24]  426 	mov	b, #0
      00001C                        427 	nochar:
      00001C F5 82            [12]  428 	mov	dpl, a
      00001E 85 F0 83         [24]  429 	mov	dph, b
      000021 22               [24]  430 	ret
                                    431 ;	calc.c:46: }
                                    432 ;	naked function: no epilogue.
                                    433 ;------------------------------------------------------------
                                    434 ;Allocation info for local variables in function 'accumulate'
                                    435 ;------------------------------------------------------------
                                    436 ;delta                     Allocated to stack - _bp -5
                                    437 ;_ctx                      Allocated to registers r5 r6 r7 
                                    438 ;ctx                       Allocated to stack - _bp +8
                                    439 ;d                         Allocated to stack - _bp +11
                                    440 ;sloc0                     Allocated to stack - _bp +1
                                    441 ;sloc1                     Allocated to stack - _bp +4
                                    442 ;------------------------------------------------------------
                                    443 ;	calc.c:72: static int accumulate(void *_ctx, delta_t *delta) __reentrant {
                                    444 ;	-----------------------------------------
                                    445 ;	 function accumulate
                                    446 ;	-----------------------------------------
      000022                        447 _accumulate:
                           000007   448 	ar7 = 0x07
                           000006   449 	ar6 = 0x06
                           000005   450 	ar5 = 0x05
                           000004   451 	ar4 = 0x04
                           000003   452 	ar3 = 0x03
                           000002   453 	ar2 = 0x02
                           000001   454 	ar1 = 0x01
                           000000   455 	ar0 = 0x00
      000022 C0*00            [24]  456 	push	_bp
      000024 E5 81            [12]  457 	mov	a,sp
      000026 F5*00            [12]  458 	mov	_bp,a
      000028 24 0E            [12]  459 	add	a,#0x0e
      00002A F5 81            [12]  460 	mov	sp,a
      00002C AD 82            [24]  461 	mov	r5,dpl
      00002E AE 83            [24]  462 	mov	r6,dph
      000030 AF F0            [24]  463 	mov	r7,b
                                    464 ;	calc.c:73: calc_ctx_t *ctx = (calc_ctx_t *)_ctx;
      000032 E5*00            [12]  465 	mov	a,_bp
      000034 24 08            [12]  466 	add	a,#0x08
      000036 F8               [12]  467 	mov	r0,a
      000037 A6 05            [24]  468 	mov	@r0,ar5
      000039 08               [12]  469 	inc	r0
      00003A A6 06            [24]  470 	mov	@r0,ar6
      00003C 08               [12]  471 	inc	r0
      00003D A6 07            [24]  472 	mov	@r0,ar7
                                    473 ;	calc.c:78: if (!ctx->acc_valid) {
      00003F E5*00            [12]  474 	mov	a,_bp
      000041 24 08            [12]  475 	add	a,#0x08
      000043 F8               [12]  476 	mov	r0,a
      000044 74 06            [12]  477 	mov	a,#0x06
      000046 26               [12]  478 	add	a,@r0
      000047 FA               [12]  479 	mov	r2,a
      000048 E4               [12]  480 	clr	a
      000049 08               [12]  481 	inc	r0
      00004A 36               [12]  482 	addc	a,@r0
      00004B FB               [12]  483 	mov	r3,a
      00004C 08               [12]  484 	inc	r0
      00004D 86 04            [24]  485 	mov	ar4,@r0
      00004F 8A 82            [24]  486 	mov	dpl,r2
      000051 8B 83            [24]  487 	mov	dph,r3
      000053 8C F0            [24]  488 	mov	b,r4
      000055 12r00r00         [24]  489 	lcall	__gptrget
      000058 70 31            [24]  490 	jnz	00102$
                                    491 ;	calc.c:79: ctx->acc_valid = 1;
      00005A 8A 82            [24]  492 	mov	dpl,r2
      00005C 8B 83            [24]  493 	mov	dph,r3
      00005E 8C F0            [24]  494 	mov	b,r4
      000060 74 01            [12]  495 	mov	a,#0x01
      000062 12r00r00         [24]  496 	lcall	__gptrput
                                    497 ;	calc.c:80: ctx->acc = 0l;
      000065 E5*00            [12]  498 	mov	a,_bp
      000067 24 08            [12]  499 	add	a,#0x08
      000069 F8               [12]  500 	mov	r0,a
      00006A 74 02            [12]  501 	mov	a,#0x02
      00006C 26               [12]  502 	add	a,@r0
      00006D FA               [12]  503 	mov	r2,a
      00006E E4               [12]  504 	clr	a
      00006F 08               [12]  505 	inc	r0
      000070 36               [12]  506 	addc	a,@r0
      000071 FB               [12]  507 	mov	r3,a
      000072 08               [12]  508 	inc	r0
      000073 86 04            [24]  509 	mov	ar4,@r0
      000075 8A 82            [24]  510 	mov	dpl,r2
      000077 8B 83            [24]  511 	mov	dph,r3
      000079 8C F0            [24]  512 	mov	b,r4
      00007B E4               [12]  513 	clr	a
      00007C 12r00r00         [24]  514 	lcall	__gptrput
      00007F A3               [24]  515 	inc	dptr
      000080 12r00r00         [24]  516 	lcall	__gptrput
      000083 A3               [24]  517 	inc	dptr
      000084 12r00r00         [24]  518 	lcall	__gptrput
      000087 A3               [24]  519 	inc	dptr
      000088 12r00r00         [24]  520 	lcall	__gptrput
      00008B                        521 00102$:
                                    522 ;	calc.c:83: d = strtol(ctx->digit, NULL, ctx->base);
      00008B E5*00            [12]  523 	mov	a,_bp
      00008D 24 08            [12]  524 	add	a,#0x08
      00008F F8               [12]  525 	mov	r0,a
      000090 86 82            [24]  526 	mov	dpl,@r0
      000092 08               [12]  527 	inc	r0
      000093 86 83            [24]  528 	mov	dph,@r0
      000095 08               [12]  529 	inc	r0
      000096 86 F0            [24]  530 	mov	b,@r0
      000098 12r00r00         [24]  531 	lcall	__gptrget
      00009B FB               [12]  532 	mov	r3,a
      00009C A3               [24]  533 	inc	dptr
      00009D 12r00r00         [24]  534 	lcall	__gptrget
      0000A0 FC               [12]  535 	mov	r4,a
      0000A1 E5*00            [12]  536 	mov	a,_bp
      0000A3 24 08            [12]  537 	add	a,#0x08
      0000A5 F8               [12]  538 	mov	r0,a
      0000A6 74 07            [12]  539 	mov	a,#0x07
      0000A8 26               [12]  540 	add	a,@r0
      0000A9 FA               [12]  541 	mov	r2,a
      0000AA E4               [12]  542 	clr	a
      0000AB 08               [12]  543 	inc	r0
      0000AC 36               [12]  544 	addc	a,@r0
      0000AD FE               [12]  545 	mov	r6,a
      0000AE 08               [12]  546 	inc	r0
      0000AF 86 07            [24]  547 	mov	ar7,@r0
      0000B1 C0 03            [24]  548 	push	ar3
      0000B3 C0 04            [24]  549 	push	ar4
      0000B5 E4               [12]  550 	clr	a
      0000B6 C0 E0            [24]  551 	push	acc
      0000B8 C0 E0            [24]  552 	push	acc
      0000BA C0 E0            [24]  553 	push	acc
      0000BC 8A 82            [24]  554 	mov	dpl,r2
      0000BE 8E 83            [24]  555 	mov	dph,r6
      0000C0 8F F0            [24]  556 	mov	b,r7
      0000C2 12r00r00         [24]  557 	lcall	_strtol
      0000C5 C8               [12]  558 	xch	a,r0
      0000C6 E5*00            [12]  559 	mov	a,_bp
      0000C8 24 0B            [12]  560 	add	a,#0x0b
      0000CA C8               [12]  561 	xch	a,r0
      0000CB A6 82            [24]  562 	mov	@r0,dpl
      0000CD 08               [12]  563 	inc	r0
      0000CE A6 83            [24]  564 	mov	@r0,dph
      0000D0 08               [12]  565 	inc	r0
      0000D1 A6 F0            [24]  566 	mov	@r0,b
      0000D3 08               [12]  567 	inc	r0
      0000D4 F6               [12]  568 	mov	@r0,a
      0000D5 E5 81            [12]  569 	mov	a,sp
      0000D7 24 FB            [12]  570 	add	a,#0xfb
      0000D9 F5 81            [12]  571 	mov	sp,a
                                    572 ;	calc.c:84: ctx->acc = ctx->acc * (long)ctx->base + d;
      0000DB E5*00            [12]  573 	mov	a,_bp
      0000DD 24 08            [12]  574 	add	a,#0x08
      0000DF F8               [12]  575 	mov	r0,a
      0000E0 A9*00            [24]  576 	mov	r1,_bp
      0000E2 09               [12]  577 	inc	r1
      0000E3 74 02            [12]  578 	mov	a,#0x02
      0000E5 26               [12]  579 	add	a,@r0
      0000E6 F7               [12]  580 	mov	@r1,a
      0000E7 E4               [12]  581 	clr	a
      0000E8 08               [12]  582 	inc	r0
      0000E9 36               [12]  583 	addc	a,@r0
      0000EA 09               [12]  584 	inc	r1
      0000EB F7               [12]  585 	mov	@r1,a
      0000EC 08               [12]  586 	inc	r0
      0000ED 09               [12]  587 	inc	r1
      0000EE E6               [12]  588 	mov	a,@r0
      0000EF F7               [12]  589 	mov	@r1,a
      0000F0 A8*00            [24]  590 	mov	r0,_bp
      0000F2 08               [12]  591 	inc	r0
      0000F3 86 82            [24]  592 	mov	dpl,@r0
      0000F5 08               [12]  593 	inc	r0
      0000F6 86 83            [24]  594 	mov	dph,@r0
      0000F8 08               [12]  595 	inc	r0
      0000F9 86 F0            [24]  596 	mov	b,@r0
      0000FB E5*00            [12]  597 	mov	a,_bp
      0000FD 24 04            [12]  598 	add	a,#0x04
      0000FF F9               [12]  599 	mov	r1,a
      000100 12r00r00         [24]  600 	lcall	__gptrget
      000103 F7               [12]  601 	mov	@r1,a
      000104 A3               [24]  602 	inc	dptr
      000105 12r00r00         [24]  603 	lcall	__gptrget
      000108 09               [12]  604 	inc	r1
      000109 F7               [12]  605 	mov	@r1,a
      00010A A3               [24]  606 	inc	dptr
      00010B 12r00r00         [24]  607 	lcall	__gptrget
      00010E 09               [12]  608 	inc	r1
      00010F F7               [12]  609 	mov	@r1,a
      000110 A3               [24]  610 	inc	dptr
      000111 12r00r00         [24]  611 	lcall	__gptrget
      000114 09               [12]  612 	inc	r1
      000115 F7               [12]  613 	mov	@r1,a
      000116 E5*00            [12]  614 	mov	a,_bp
      000118 24 08            [12]  615 	add	a,#0x08
      00011A F8               [12]  616 	mov	r0,a
      00011B 86 82            [24]  617 	mov	dpl,@r0
      00011D 08               [12]  618 	inc	r0
      00011E 86 83            [24]  619 	mov	dph,@r0
      000120 08               [12]  620 	inc	r0
      000121 86 F0            [24]  621 	mov	b,@r0
      000123 12r00r00         [24]  622 	lcall	__gptrget
      000126 FA               [12]  623 	mov	r2,a
      000127 A3               [24]  624 	inc	dptr
      000128 12r00r00         [24]  625 	lcall	__gptrget
      00012B FB               [12]  626 	mov	r3,a
      00012C 33               [12]  627 	rlc	a
      00012D 95 E0            [12]  628 	subb	a,acc
      00012F FE               [12]  629 	mov	r6,a
      000130 FF               [12]  630 	mov	r7,a
      000131 C0 02            [24]  631 	push	ar2
      000133 C0 03            [24]  632 	push	ar3
      000135 C0 06            [24]  633 	push	ar6
      000137 C0 07            [24]  634 	push	ar7
      000139 E5*00            [12]  635 	mov	a,_bp
      00013B 24 04            [12]  636 	add	a,#0x04
      00013D F8               [12]  637 	mov	r0,a
      00013E 86 82            [24]  638 	mov	dpl,@r0
      000140 08               [12]  639 	inc	r0
      000141 86 83            [24]  640 	mov	dph,@r0
      000143 08               [12]  641 	inc	r0
      000144 86 F0            [24]  642 	mov	b,@r0
      000146 08               [12]  643 	inc	r0
      000147 E6               [12]  644 	mov	a,@r0
      000148 12r00r00         [24]  645 	lcall	__mullong
      00014B AC 82            [24]  646 	mov	r4,dpl
      00014D AD 83            [24]  647 	mov	r5,dph
      00014F AE F0            [24]  648 	mov	r6,b
      000151 FF               [12]  649 	mov	r7,a
      000152 E5 81            [12]  650 	mov	a,sp
      000154 24 FC            [12]  651 	add	a,#0xfc
      000156 F5 81            [12]  652 	mov	sp,a
      000158 E5*00            [12]  653 	mov	a,_bp
      00015A 24 0B            [12]  654 	add	a,#0x0b
      00015C F8               [12]  655 	mov	r0,a
      00015D E6               [12]  656 	mov	a,@r0
      00015E 2C               [12]  657 	add	a,r4
      00015F FC               [12]  658 	mov	r4,a
      000160 08               [12]  659 	inc	r0
      000161 E6               [12]  660 	mov	a,@r0
      000162 3D               [12]  661 	addc	a,r5
      000163 FD               [12]  662 	mov	r5,a
      000164 08               [12]  663 	inc	r0
      000165 E6               [12]  664 	mov	a,@r0
      000166 3E               [12]  665 	addc	a,r6
      000167 FE               [12]  666 	mov	r6,a
      000168 08               [12]  667 	inc	r0
      000169 E6               [12]  668 	mov	a,@r0
      00016A 3F               [12]  669 	addc	a,r7
      00016B FF               [12]  670 	mov	r7,a
      00016C A8*00            [24]  671 	mov	r0,_bp
      00016E 08               [12]  672 	inc	r0
      00016F 86 82            [24]  673 	mov	dpl,@r0
      000171 08               [12]  674 	inc	r0
      000172 86 83            [24]  675 	mov	dph,@r0
      000174 08               [12]  676 	inc	r0
      000175 86 F0            [24]  677 	mov	b,@r0
      000177 EC               [12]  678 	mov	a,r4
      000178 12r00r00         [24]  679 	lcall	__gptrput
      00017B A3               [24]  680 	inc	dptr
      00017C ED               [12]  681 	mov	a,r5
      00017D 12r00r00         [24]  682 	lcall	__gptrput
      000180 A3               [24]  683 	inc	dptr
      000181 EE               [12]  684 	mov	a,r6
      000182 12r00r00         [24]  685 	lcall	__gptrput
      000185 A3               [24]  686 	inc	dptr
      000186 EF               [12]  687 	mov	a,r7
      000187 12r00r00         [24]  688 	lcall	__gptrput
                                    689 ;	calc.c:86: return 1;
      00018A 90 00 01         [24]  690 	mov	dptr,#0x0001
                                    691 ;	calc.c:87: }
      00018D 85*00 81         [24]  692 	mov	sp,_bp
      000190 D0*00            [24]  693 	pop	_bp
      000192 22               [24]  694 	ret
                                    695 ;------------------------------------------------------------
                                    696 ;Allocation info for local variables in function 'dump_pop'
                                    697 ;------------------------------------------------------------
                                    698 ;delta                     Allocated to stack - _bp -5
                                    699 ;_ctx                      Allocated to registers r5 r6 r7 
                                    700 ;ctx                       Allocated to stack - _bp +11
                                    701 ;d                         Allocated to stack - _bp +14
                                    702 ;r                         Allocated to registers r5 r6 
                                    703 ;__1310720003              Allocated to registers 
                                    704 ;s                         Allocated to registers r5 r6 r7 
                                    705 ;__1966080005              Allocated to registers 
                                    706 ;s                         Allocated to registers r4 r5 r6 
                                    707 ;__1966080007              Allocated to registers 
                                    708 ;s                         Allocated to registers r3 r4 r5 
                                    709 ;__1966080009              Allocated to stack - _bp +18
                                    710 ;d                         Allocated to registers r3 r4 r5 r6 
                                    711 ;__1310720001              Allocated to registers 
                                    712 ;d                         Allocated to stack - _bp +22
                                    713 ;mask                      Allocated to stack - _bp +26
                                    714 ;__1966080011              Allocated to registers 
                                    715 ;s                         Allocated to registers r3 r4 r5 
                                    716 ;__1966080013              Allocated to registers 
                                    717 ;s                         Allocated to registers r4 r5 r6 
                                    718 ;__3276800015              Allocated to registers 
                                    719 ;s                         Allocated to registers r5 r3 r2 
                                    720 ;__3276800017              Allocated to stack - _bp +18
                                    721 ;d                         Allocated to registers r2 r3 r4 r7 
                                    722 ;__1310720001              Allocated to registers 
                                    723 ;d                         Allocated to stack - _bp +22
                                    724 ;mask                      Allocated to stack - _bp +26
                                    725 ;__3276800019              Allocated to registers 
                                    726 ;s                         Allocated to registers r5 r3 r2 
                                    727 ;sloc0                     Allocated to stack - _bp +1
                                    728 ;sloc1                     Allocated to stack - _bp +2
                                    729 ;sloc2                     Allocated to stack - _bp +5
                                    730 ;sloc3                     Allocated to stack - _bp +8
                                    731 ;------------------------------------------------------------
                                    732 ;	calc.c:89: static int dump_pop(void *_ctx, delta_t *delta) __reentrant {
                                    733 ;	-----------------------------------------
                                    734 ;	 function dump_pop
                                    735 ;	-----------------------------------------
      000193                        736 _dump_pop:
      000193 C0*00            [24]  737 	push	_bp
      000195 E5 81            [12]  738 	mov	a,sp
      000197 F5*00            [12]  739 	mov	_bp,a
      000199 24 1D            [12]  740 	add	a,#0x1d
      00019B F5 81            [12]  741 	mov	sp,a
      00019D AD 82            [24]  742 	mov	r5,dpl
      00019F AE 83            [24]  743 	mov	r6,dph
      0001A1 AF F0            [24]  744 	mov	r7,b
                                    745 ;	calc.c:90: calc_ctx_t *ctx = (calc_ctx_t *)_ctx;
      0001A3 E5*00            [12]  746 	mov	a,_bp
      0001A5 24 0B            [12]  747 	add	a,#0x0b
      0001A7 F8               [12]  748 	mov	r0,a
      0001A8 A6 05            [24]  749 	mov	@r0,ar5
      0001AA 08               [12]  750 	inc	r0
      0001AB A6 06            [24]  751 	mov	@r0,ar6
      0001AD 08               [12]  752 	inc	r0
      0001AE A6 07            [24]  753 	mov	@r0,ar7
                                    754 ;	calc.c:94: if (delta->event == EVENT_TERM) printstr("\r\n");
      0001B0 E5*00            [12]  755 	mov	a,_bp
      0001B2 24 FB            [12]  756 	add	a,#0xfb
      0001B4 F8               [12]  757 	mov	r0,a
      0001B5 86 02            [24]  758 	mov	ar2,@r0
      0001B7 08               [12]  759 	inc	r0
      0001B8 86 03            [24]  760 	mov	ar3,@r0
      0001BA 08               [12]  761 	inc	r0
      0001BB 86 04            [24]  762 	mov	ar4,@r0
      0001BD E5*00            [12]  763 	mov	a,_bp
      0001BF 24 08            [12]  764 	add	a,#0x08
      0001C1 F8               [12]  765 	mov	r0,a
      0001C2 74 02            [12]  766 	mov	a,#0x02
      0001C4 2A               [12]  767 	add	a,r2
      0001C5 F6               [12]  768 	mov	@r0,a
      0001C6 E4               [12]  769 	clr	a
      0001C7 3B               [12]  770 	addc	a,r3
      0001C8 08               [12]  771 	inc	r0
      0001C9 F6               [12]  772 	mov	@r0,a
      0001CA 08               [12]  773 	inc	r0
      0001CB A6 04            [24]  774 	mov	@r0,ar4
      0001CD E5*00            [12]  775 	mov	a,_bp
      0001CF 24 08            [12]  776 	add	a,#0x08
      0001D1 F8               [12]  777 	mov	r0,a
      0001D2 86 82            [24]  778 	mov	dpl,@r0
      0001D4 08               [12]  779 	inc	r0
      0001D5 86 83            [24]  780 	mov	dph,@r0
      0001D7 08               [12]  781 	inc	r0
      0001D8 86 F0            [24]  782 	mov	b,@r0
      0001DA 12r00r00         [24]  783 	lcall	__gptrget
      0001DD FE               [12]  784 	mov	r6,a
      0001DE A3               [24]  785 	inc	dptr
      0001DF 12r00r00         [24]  786 	lcall	__gptrget
      0001E2 FF               [12]  787 	mov	r7,a
      0001E3 BE 08 27         [24]  788 	cjne	r6,#0x08,00102$
      0001E6 BF 00 24         [24]  789 	cjne	r7,#0x00,00102$
      0001E9 7Dr17            [12]  790 	mov	r5,#___str_3
      0001EB 7Es00            [12]  791 	mov	r6,#(___str_3 >> 8)
      0001ED 7F 80            [12]  792 	mov	r7,#0x80
                                    793 ;	calc.c:51: return;
      0001EF                        794 00135$:
                                    795 ;	calc.c:49: for (; *s; s++) putchar(*s);
      0001EF 8D 82            [24]  796 	mov	dpl,r5
      0001F1 8E 83            [24]  797 	mov	dph,r6
      0001F3 8F F0            [24]  798 	mov	b,r7
      0001F5 12r00r00         [24]  799 	lcall	__gptrget
      0001F8 FC               [12]  800 	mov	r4,a
      0001F9 60 12            [24]  801 	jz	00102$
      0001FB 8C 03            [24]  802 	mov	ar3,r4
      0001FD 7C 00            [12]  803 	mov	r4,#0x00
      0001FF 8B 82            [24]  804 	mov	dpl,r3
      000201 8C 83            [24]  805 	mov	dph,r4
      000203 12r00r00         [24]  806 	lcall	_putchar
      000206 0D               [12]  807 	inc	r5
                                    808 ;	calc.c:94: if (delta->event == EVENT_TERM) printstr("\r\n");
      000207 BD 00 E5         [24]  809 	cjne	r5,#0x00,00135$
      00020A 0E               [12]  810 	inc	r6
      00020B 80 E2            [24]  811 	sjmp	00135$
      00020D                        812 00102$:
                                    813 ;	calc.c:95: r = stack_pop(ctx->ps, &d);
      00020D E5*00            [12]  814 	mov	a,_bp
      00020F 24 0E            [12]  815 	add	a,#0x0e
      000211 FF               [12]  816 	mov	r7,a
      000212 E5*00            [12]  817 	mov	a,_bp
      000214 24 05            [12]  818 	add	a,#0x05
      000216 F8               [12]  819 	mov	r0,a
      000217 A6 07            [24]  820 	mov	@r0,ar7
      000219 08               [12]  821 	inc	r0
      00021A 76 00            [12]  822 	mov	@r0,#0x00
      00021C 08               [12]  823 	inc	r0
      00021D 76 40            [12]  824 	mov	@r0,#0x40
      00021F E5*00            [12]  825 	mov	a,_bp
      000221 24 0B            [12]  826 	add	a,#0x0b
      000223 F8               [12]  827 	mov	r0,a
      000224 A9*00            [24]  828 	mov	r1,_bp
      000226 09               [12]  829 	inc	r1
      000227 09               [12]  830 	inc	r1
      000228 74 13            [12]  831 	mov	a,#0x13
      00022A 26               [12]  832 	add	a,@r0
      00022B F7               [12]  833 	mov	@r1,a
      00022C 74 40            [12]  834 	mov	a,#0x40
      00022E 08               [12]  835 	inc	r0
      00022F 36               [12]  836 	addc	a,@r0
      000230 09               [12]  837 	inc	r1
      000231 F7               [12]  838 	mov	@r1,a
      000232 08               [12]  839 	inc	r0
      000233 09               [12]  840 	inc	r1
      000234 E6               [12]  841 	mov	a,@r0
      000235 F7               [12]  842 	mov	@r1,a
      000236 A8*00            [24]  843 	mov	r0,_bp
      000238 08               [12]  844 	inc	r0
      000239 08               [12]  845 	inc	r0
      00023A 86 82            [24]  846 	mov	dpl,@r0
      00023C 08               [12]  847 	inc	r0
      00023D 86 83            [24]  848 	mov	dph,@r0
      00023F 08               [12]  849 	inc	r0
      000240 86 F0            [24]  850 	mov	b,@r0
      000242 12r00r00         [24]  851 	lcall	__gptrget
      000245 FA               [12]  852 	mov	r2,a
      000246 A3               [24]  853 	inc	dptr
      000247 12r00r00         [24]  854 	lcall	__gptrget
      00024A FB               [12]  855 	mov	r3,a
      00024B A3               [24]  856 	inc	dptr
      00024C 12r00r00         [24]  857 	lcall	__gptrget
      00024F FE               [12]  858 	mov	r6,a
      000250 C0 07            [24]  859 	push	ar7
      000252 E5*00            [12]  860 	mov	a,_bp
      000254 24 05            [12]  861 	add	a,#0x05
      000256 F8               [12]  862 	mov	r0,a
      000257 E6               [12]  863 	mov	a,@r0
      000258 C0 E0            [24]  864 	push	acc
      00025A 08               [12]  865 	inc	r0
      00025B E6               [12]  866 	mov	a,@r0
      00025C C0 E0            [24]  867 	push	acc
      00025E 08               [12]  868 	inc	r0
      00025F E6               [12]  869 	mov	a,@r0
      000260 C0 E0            [24]  870 	push	acc
      000262 8A 82            [24]  871 	mov	dpl,r2
      000264 8B 83            [24]  872 	mov	dph,r3
      000266 8E F0            [24]  873 	mov	b,r6
      000268 12r00r00         [24]  874 	lcall	_stack_pop
      00026B AE 82            [24]  875 	mov	r6,dpl
      00026D AD 83            [24]  876 	mov	r5,dph
      00026F 15 81            [12]  877 	dec	sp
      000271 15 81            [12]  878 	dec	sp
      000273 15 81            [12]  879 	dec	sp
      000275 D0 07            [24]  880 	pop	ar7
                                    881 ;	calc.c:96: if (!r) {
      000277 EE               [12]  882 	mov	a,r6
      000278 4D               [12]  883 	orl	a,r5
      000279 70 44            [24]  884 	jnz	00183$
                                    885 ;	calc.c:97: if (delta->event != EVENT_TERM) printstr("stack underflow\r\n");
      00027B E5*00            [12]  886 	mov	a,_bp
      00027D 24 08            [12]  887 	add	a,#0x08
      00027F F8               [12]  888 	mov	r0,a
      000280 86 82            [24]  889 	mov	dpl,@r0
      000282 08               [12]  890 	inc	r0
      000283 86 83            [24]  891 	mov	dph,@r0
      000285 08               [12]  892 	inc	r0
      000286 86 F0            [24]  893 	mov	b,@r0
      000288 12r00r00         [24]  894 	lcall	__gptrget
      00028B FD               [12]  895 	mov	r5,a
      00028C A3               [24]  896 	inc	dptr
      00028D 12r00r00         [24]  897 	lcall	__gptrget
      000290 FE               [12]  898 	mov	r6,a
      000291 BD 08 06         [24]  899 	cjne	r5,#0x08,00320$
      000294 BE 00 03         [24]  900 	cjne	r6,#0x00,00320$
      000297 02r04r9E         [24]  901 	ljmp	00110$
      00029A                        902 00320$:
      00029A 7Cr1A            [12]  903 	mov	r4,#___str_4
      00029C 7Ds00            [12]  904 	mov	r5,#(___str_4 >> 8)
      00029E 7E 80            [12]  905 	mov	r6,#0x80
                                    906 ;	calc.c:51: return;
      0002A0                        907 00138$:
                                    908 ;	calc.c:49: for (; *s; s++) putchar(*s);
      0002A0 8C 82            [24]  909 	mov	dpl,r4
      0002A2 8D 83            [24]  910 	mov	dph,r5
      0002A4 8E F0            [24]  911 	mov	b,r6
      0002A6 12r00r00         [24]  912 	lcall	__gptrget
      0002A9 FB               [12]  913 	mov	r3,a
      0002AA 70 03            [24]  914 	jnz	00321$
      0002AC 02r04r9E         [24]  915 	ljmp	00110$
      0002AF                        916 00321$:
      0002AF 7A 00            [12]  917 	mov	r2,#0x00
      0002B1 8B 82            [24]  918 	mov	dpl,r3
      0002B3 8A 83            [24]  919 	mov	dph,r2
      0002B5 12r00r00         [24]  920 	lcall	_putchar
      0002B8 0C               [12]  921 	inc	r4
                                    922 ;	calc.c:98: } else while (r > 0) {
      0002B9 BC 00 E4         [24]  923 	cjne	r4,#0x00,00138$
      0002BC 0D               [12]  924 	inc	r5
      0002BD 80 E1            [24]  925 	sjmp	00138$
      0002BF                        926 00183$:
      0002BF A8*00            [24]  927 	mov	r0,_bp
      0002C1 08               [12]  928 	inc	r0
      0002C2 A6 07            [24]  929 	mov	@r0,ar7
      0002C4                        930 00105$:
      0002C4 C3               [12]  931 	clr	c
      0002C5 E4               [12]  932 	clr	a
      0002C6 9E               [12]  933 	subb	a,r6
      0002C7 74 80            [12]  934 	mov	a,#(0x00 ^ 0x80)
      0002C9 8D F0            [24]  935 	mov	b,r5
      0002CB 63 F0 80         [24]  936 	xrl	b,#0x80
      0002CE 95 F0            [12]  937 	subb	a,b
      0002D0 40 03            [24]  938 	jc	00323$
      0002D2 02r04r9E         [24]  939 	ljmp	00110$
      0002D5                        940 00323$:
                                    941 ;	calc.c:99: printstr("PSPA\t");
      0002D5 7Br2C            [12]  942 	mov	r3,#___str_5
      0002D7 7Cs00            [12]  943 	mov	r4,#(___str_5 >> 8)
      0002D9 7D 80            [12]  944 	mov	r5,#0x80
                                    945 ;	calc.c:51: return;
      0002DB                        946 00141$:
                                    947 ;	calc.c:49: for (; *s; s++) putchar(*s);
      0002DB 8B 82            [24]  948 	mov	dpl,r3
      0002DD 8C 83            [24]  949 	mov	dph,r4
      0002DF 8D F0            [24]  950 	mov	b,r5
      0002E1 12r00r00         [24]  951 	lcall	__gptrget
      0002E4 FA               [12]  952 	mov	r2,a
      0002E5 60 10            [24]  953 	jz	00119$
      0002E7 7E 00            [12]  954 	mov	r6,#0x00
      0002E9 8A 82            [24]  955 	mov	dpl,r2
      0002EB 8E 83            [24]  956 	mov	dph,r6
      0002ED 12r00r00         [24]  957 	lcall	_putchar
      0002F0 0B               [12]  958 	inc	r3
                                    959 ;	calc.c:99: printstr("PSPA\t");
      0002F1 BB 00 E7         [24]  960 	cjne	r3,#0x00,00141$
      0002F4 0C               [12]  961 	inc	r4
      0002F5 80 E4            [24]  962 	sjmp	00141$
      0002F7                        963 00119$:
                                    964 ;	calc.c:100: printall(d);
      0002F7 E5*00            [12]  965 	mov	a,_bp
      0002F9 24 0E            [12]  966 	add	a,#0x0e
      0002FB F8               [12]  967 	mov	r0,a
      0002FC E5*00            [12]  968 	mov	a,_bp
      0002FE 24 12            [12]  969 	add	a,#0x12
      000300 F9               [12]  970 	mov	r1,a
      000301 E6               [12]  971 	mov	a,@r0
      000302 F7               [12]  972 	mov	@r1,a
      000303 08               [12]  973 	inc	r0
      000304 09               [12]  974 	inc	r1
      000305 E6               [12]  975 	mov	a,@r0
      000306 F7               [12]  976 	mov	@r1,a
      000307 08               [12]  977 	inc	r0
      000308 09               [12]  978 	inc	r1
      000309 E6               [12]  979 	mov	a,@r0
      00030A F7               [12]  980 	mov	@r1,a
      00030B 08               [12]  981 	inc	r0
      00030C 09               [12]  982 	inc	r1
      00030D E6               [12]  983 	mov	a,@r0
      00030E F7               [12]  984 	mov	@r1,a
      00030F E5*00            [12]  985 	mov	a,_bp
      000311 24 12            [12]  986 	add	a,#0x12
      000313 F8               [12]  987 	mov	r0,a
      000314 86 03            [24]  988 	mov	ar3,@r0
      000316 08               [12]  989 	inc	r0
      000317 86 04            [24]  990 	mov	ar4,@r0
      000319 08               [12]  991 	inc	r0
      00031A 86 05            [24]  992 	mov	ar5,@r0
      00031C 08               [12]  993 	inc	r0
      00031D 86 06            [24]  994 	mov	ar6,@r0
                                    995 ;	calc.c:64: printf("%08lx\t", d);
      00031F C0 07            [24]  996 	push	ar7
      000321 C0 06            [24]  997 	push	ar6
      000323 C0 05            [24]  998 	push	ar5
      000325 C0 04            [24]  999 	push	ar4
      000327 C0 03            [24] 1000 	push	ar3
      000329 E5*00            [12] 1001 	mov	a,_bp
      00032B 24 12            [12] 1002 	add	a,#0x12
      00032D F8               [12] 1003 	mov	r0,a
      00032E E6               [12] 1004 	mov	a,@r0
      00032F C0 E0            [24] 1005 	push	acc
      000331 08               [12] 1006 	inc	r0
      000332 E6               [12] 1007 	mov	a,@r0
      000333 C0 E0            [24] 1008 	push	acc
      000335 08               [12] 1009 	inc	r0
      000336 E6               [12] 1010 	mov	a,@r0
      000337 C0 E0            [24] 1011 	push	acc
      000339 08               [12] 1012 	inc	r0
      00033A E6               [12] 1013 	mov	a,@r0
      00033B C0 E0            [24] 1014 	push	acc
      00033D 74r00            [12] 1015 	mov	a,#___str_0
      00033F C0 E0            [24] 1016 	push	acc
      000341 74s00            [12] 1017 	mov	a,#(___str_0 >> 8)
      000343 C0 E0            [24] 1018 	push	acc
      000345 74 80            [12] 1019 	mov	a,#0x80
      000347 C0 E0            [24] 1020 	push	acc
      000349 12r00r00         [24] 1021 	lcall	_printf
      00034C E5 81            [12] 1022 	mov	a,sp
      00034E 24 F9            [12] 1023 	add	a,#0xf9
      000350 F5 81            [12] 1024 	mov	sp,a
      000352 D0 03            [24] 1025 	pop	ar3
      000354 D0 04            [24] 1026 	pop	ar4
      000356 D0 05            [24] 1027 	pop	ar5
      000358 D0 06            [24] 1028 	pop	ar6
                                   1029 ;	calc.c:65: printf("% 11ld\t", d);
      00035A C0 06            [24] 1030 	push	ar6
      00035C C0 05            [24] 1031 	push	ar5
      00035E C0 04            [24] 1032 	push	ar4
      000360 C0 03            [24] 1033 	push	ar3
      000362 C0 03            [24] 1034 	push	ar3
      000364 C0 04            [24] 1035 	push	ar4
      000366 C0 05            [24] 1036 	push	ar5
      000368 C0 06            [24] 1037 	push	ar6
      00036A 74r07            [12] 1038 	mov	a,#___str_1
      00036C C0 E0            [24] 1039 	push	acc
      00036E 74s00            [12] 1040 	mov	a,#(___str_1 >> 8)
      000370 C0 E0            [24] 1041 	push	acc
      000372 74 80            [12] 1042 	mov	a,#0x80
      000374 C0 E0            [24] 1043 	push	acc
      000376 12r00r00         [24] 1044 	lcall	_printf
      000379 E5 81            [12] 1045 	mov	a,sp
      00037B 24 F9            [12] 1046 	add	a,#0xf9
      00037D F5 81            [12] 1047 	mov	sp,a
      00037F D0 03            [24] 1048 	pop	ar3
      000381 D0 04            [24] 1049 	pop	ar4
      000383 D0 05            [24] 1050 	pop	ar5
      000385 D0 06            [24] 1051 	pop	ar6
                                   1052 ;	calc.c:66: printf("%011lo\t", d);
      000387 C0 06            [24] 1053 	push	ar6
      000389 C0 05            [24] 1054 	push	ar5
      00038B C0 04            [24] 1055 	push	ar4
      00038D C0 03            [24] 1056 	push	ar3
      00038F C0 03            [24] 1057 	push	ar3
      000391 C0 04            [24] 1058 	push	ar4
      000393 C0 05            [24] 1059 	push	ar5
      000395 C0 06            [24] 1060 	push	ar6
      000397 74r0F            [12] 1061 	mov	a,#___str_2
      000399 C0 E0            [24] 1062 	push	acc
      00039B 74s00            [12] 1063 	mov	a,#(___str_2 >> 8)
      00039D C0 E0            [24] 1064 	push	acc
      00039F 74 80            [12] 1065 	mov	a,#0x80
      0003A1 C0 E0            [24] 1066 	push	acc
      0003A3 12r00r00         [24] 1067 	lcall	_printf
      0003A6 E5 81            [12] 1068 	mov	a,sp
      0003A8 24 F9            [12] 1069 	add	a,#0xf9
      0003AA F5 81            [12] 1070 	mov	sp,a
      0003AC D0 03            [24] 1071 	pop	ar3
      0003AE D0 04            [24] 1072 	pop	ar4
      0003B0 D0 05            [24] 1073 	pop	ar5
      0003B2 D0 06            [24] 1074 	pop	ar6
      0003B4 D0 07            [24] 1075 	pop	ar7
                                   1076 ;	calc.c:67: printbin(d);
      0003B6 E5*00            [12] 1077 	mov	a,_bp
      0003B8 24 16            [12] 1078 	add	a,#0x16
      0003BA F8               [12] 1079 	mov	r0,a
      0003BB A6 03            [24] 1080 	mov	@r0,ar3
      0003BD 08               [12] 1081 	inc	r0
      0003BE A6 04            [24] 1082 	mov	@r0,ar4
      0003C0 08               [12] 1083 	inc	r0
      0003C1 A6 05            [24] 1084 	mov	@r0,ar5
      0003C3 08               [12] 1085 	inc	r0
      0003C4 A6 06            [24] 1086 	mov	@r0,ar6
                                   1087 ;	calc.c:57: for (mask = 0x80000000lu; mask; mask >>= 1)
      0003C6 E5*00            [12] 1088 	mov	a,_bp
      0003C8 24 1A            [12] 1089 	add	a,#0x1a
      0003CA F8               [12] 1090 	mov	r0,a
      0003CB E4               [12] 1091 	clr	a
      0003CC F6               [12] 1092 	mov	@r0,a
      0003CD 08               [12] 1093 	inc	r0
      0003CE F6               [12] 1094 	mov	@r0,a
      0003CF 08               [12] 1095 	inc	r0
      0003D0 F6               [12] 1096 	mov	@r0,a
      0003D1 08               [12] 1097 	inc	r0
      0003D2 76 80            [12] 1098 	mov	@r0,#0x80
                                   1099 ;	calc.c:114: return 1;
                                   1100 ;	calc.c:57: for (mask = 0x80000000lu; mask; mask >>= 1)
      0003D4                       1101 00143$:
                                   1102 ;	calc.c:58: (void)putchar((d & mask) ? (int)'1' : (int)'0');
      0003D4 E5*00            [12] 1103 	mov	a,_bp
      0003D6 24 16            [12] 1104 	add	a,#0x16
      0003D8 F8               [12] 1105 	mov	r0,a
      0003D9 86 02            [24] 1106 	mov	ar2,@r0
      0003DB 08               [12] 1107 	inc	r0
      0003DC 86 03            [24] 1108 	mov	ar3,@r0
      0003DE 08               [12] 1109 	inc	r0
      0003DF 86 04            [24] 1110 	mov	ar4,@r0
      0003E1 08               [12] 1111 	inc	r0
      0003E2 86 05            [24] 1112 	mov	ar5,@r0
      0003E4 E5*00            [12] 1113 	mov	a,_bp
      0003E6 24 1A            [12] 1114 	add	a,#0x1a
      0003E8 F8               [12] 1115 	mov	r0,a
      0003E9 E6               [12] 1116 	mov	a,@r0
      0003EA 52 02            [12] 1117 	anl	ar2,a
      0003EC 08               [12] 1118 	inc	r0
      0003ED E6               [12] 1119 	mov	a,@r0
      0003EE 52 03            [12] 1120 	anl	ar3,a
      0003F0 08               [12] 1121 	inc	r0
      0003F1 E6               [12] 1122 	mov	a,@r0
      0003F2 52 04            [12] 1123 	anl	ar4,a
      0003F4 08               [12] 1124 	inc	r0
      0003F5 E6               [12] 1125 	mov	a,@r0
      0003F6 52 05            [12] 1126 	anl	ar5,a
      0003F8 EA               [12] 1127 	mov	a,r2
      0003F9 4B               [12] 1128 	orl	a,r3
      0003FA 4C               [12] 1129 	orl	a,r4
      0003FB 4D               [12] 1130 	orl	a,r5
      0003FC 60 06            [24] 1131 	jz	00164$
      0003FE 7C 31            [12] 1132 	mov	r4,#0x31
      000400 7D 00            [12] 1133 	mov	r5,#0x00
      000402 80 04            [24] 1134 	sjmp	00165$
      000404                       1135 00164$:
      000404 7C 30            [12] 1136 	mov	r4,#0x30
      000406 7D 00            [12] 1137 	mov	r5,#0x00
      000408                       1138 00165$:
      000408 8C 82            [24] 1139 	mov	dpl,r4
      00040A 8D 83            [24] 1140 	mov	dph,r5
      00040C 12r00r00         [24] 1141 	lcall	_putchar
                                   1142 ;	calc.c:57: for (mask = 0x80000000lu; mask; mask >>= 1)
      00040F E5*00            [12] 1143 	mov	a,_bp
      000411 24 1A            [12] 1144 	add	a,#0x1a
      000413 F8               [12] 1145 	mov	r0,a
      000414 08               [12] 1146 	inc	r0
      000415 08               [12] 1147 	inc	r0
      000416 08               [12] 1148 	inc	r0
      000417 E6               [12] 1149 	mov	a,@r0
      000418 C3               [12] 1150 	clr	c
      000419 13               [12] 1151 	rrc	a
      00041A F6               [12] 1152 	mov	@r0,a
      00041B 18               [12] 1153 	dec	r0
      00041C E6               [12] 1154 	mov	a,@r0
      00041D 13               [12] 1155 	rrc	a
      00041E F6               [12] 1156 	mov	@r0,a
      00041F 18               [12] 1157 	dec	r0
      000420 E6               [12] 1158 	mov	a,@r0
      000421 13               [12] 1159 	rrc	a
      000422 F6               [12] 1160 	mov	@r0,a
      000423 18               [12] 1161 	dec	r0
      000424 E6               [12] 1162 	mov	a,@r0
      000425 13               [12] 1163 	rrc	a
      000426 F6               [12] 1164 	mov	@r0,a
      000427 E5*00            [12] 1165 	mov	a,_bp
      000429 24 1A            [12] 1166 	add	a,#0x1a
      00042B F8               [12] 1167 	mov	r0,a
      00042C E6               [12] 1168 	mov	a,@r0
      00042D 08               [12] 1169 	inc	r0
      00042E 46               [12] 1170 	orl	a,@r0
      00042F 08               [12] 1171 	inc	r0
      000430 46               [12] 1172 	orl	a,@r0
      000431 08               [12] 1173 	inc	r0
      000432 46               [12] 1174 	orl	a,@r0
      000433 70 9F            [24] 1175 	jnz	00143$
                                   1176 ;	calc.c:101: printstr("\r\n");
      000435 7Br17            [12] 1177 	mov	r3,#___str_3
      000437 7Cs00            [12] 1178 	mov	r4,#(___str_3 >> 8)
      000439 7D 80            [12] 1179 	mov	r5,#0x80
                                   1180 ;	calc.c:51: return;
      00043B                       1181 00146$:
                                   1182 ;	calc.c:49: for (; *s; s++) putchar(*s);
      00043B 8B 82            [24] 1183 	mov	dpl,r3
      00043D 8C 83            [24] 1184 	mov	dph,r4
      00043F 8D F0            [24] 1185 	mov	b,r5
      000441 12r00r00         [24] 1186 	lcall	__gptrget
      000444 FA               [12] 1187 	mov	r2,a
      000445 60 10            [24] 1188 	jz	00124$
      000447 7E 00            [12] 1189 	mov	r6,#0x00
      000449 8A 82            [24] 1190 	mov	dpl,r2
      00044B 8E 83            [24] 1191 	mov	dph,r6
      00044D 12r00r00         [24] 1192 	lcall	_putchar
      000450 0B               [12] 1193 	inc	r3
                                   1194 ;	calc.c:101: printstr("\r\n");
      000451 BB 00 E7         [24] 1195 	cjne	r3,#0x00,00146$
      000454 0C               [12] 1196 	inc	r4
      000455 80 E4            [24] 1197 	sjmp	00146$
      000457                       1198 00124$:
                                   1199 ;	calc.c:102: r = stack_pop(ctx->ps, &d);
      000457 C0 07            [24] 1200 	push	ar7
      000459 A8*00            [24] 1201 	mov	r0,_bp
      00045B 08               [12] 1202 	inc	r0
      00045C 86 03            [24] 1203 	mov	ar3,@r0
      00045E 7C 00            [12] 1204 	mov	r4,#0x00
      000460 7D 40            [12] 1205 	mov	r5,#0x40
      000462 A8*00            [24] 1206 	mov	r0,_bp
      000464 08               [12] 1207 	inc	r0
      000465 08               [12] 1208 	inc	r0
      000466 86 82            [24] 1209 	mov	dpl,@r0
      000468 08               [12] 1210 	inc	r0
      000469 86 83            [24] 1211 	mov	dph,@r0
      00046B 08               [12] 1212 	inc	r0
      00046C 86 F0            [24] 1213 	mov	b,@r0
      00046E 12r00r00         [24] 1214 	lcall	__gptrget
      000471 FA               [12] 1215 	mov	r2,a
      000472 A3               [24] 1216 	inc	dptr
      000473 12r00r00         [24] 1217 	lcall	__gptrget
      000476 FE               [12] 1218 	mov	r6,a
      000477 A3               [24] 1219 	inc	dptr
      000478 12r00r00         [24] 1220 	lcall	__gptrget
      00047B FF               [12] 1221 	mov	r7,a
      00047C C0 07            [24] 1222 	push	ar7
      00047E C0 03            [24] 1223 	push	ar3
      000480 C0 04            [24] 1224 	push	ar4
      000482 C0 05            [24] 1225 	push	ar5
      000484 8A 82            [24] 1226 	mov	dpl,r2
      000486 8E 83            [24] 1227 	mov	dph,r6
      000488 8F F0            [24] 1228 	mov	b,r7
      00048A 12r00r00         [24] 1229 	lcall	_stack_pop
      00048D AE 82            [24] 1230 	mov	r6,dpl
      00048F AD 83            [24] 1231 	mov	r5,dph
      000491 15 81            [12] 1232 	dec	sp
      000493 15 81            [12] 1233 	dec	sp
      000495 15 81            [12] 1234 	dec	sp
      000497 D0 07            [24] 1235 	pop	ar7
      000499 D0 07            [24] 1236 	pop	ar7
      00049B 02r02rC4         [24] 1237 	ljmp	00105$
      00049E                       1238 00110$:
                                   1239 ;	calc.c:105: if (delta->event == EVENT_TERM) {
      00049E E5*00            [12] 1240 	mov	a,_bp
      0004A0 24 08            [12] 1241 	add	a,#0x08
      0004A2 F8               [12] 1242 	mov	r0,a
      0004A3 86 82            [24] 1243 	mov	dpl,@r0
      0004A5 08               [12] 1244 	inc	r0
      0004A6 86 83            [24] 1245 	mov	dph,@r0
      0004A8 08               [12] 1246 	inc	r0
      0004A9 86 F0            [24] 1247 	mov	b,@r0
      0004AB 12r00r00         [24] 1248 	lcall	__gptrget
      0004AE FD               [12] 1249 	mov	r5,a
      0004AF A3               [24] 1250 	inc	dptr
      0004B0 12r00r00         [24] 1251 	lcall	__gptrget
      0004B3 FE               [12] 1252 	mov	r6,a
      0004B4 BD 08 05         [24] 1253 	cjne	r5,#0x08,00330$
      0004B7 BE 00 02         [24] 1254 	cjne	r6,#0x00,00330$
      0004BA 80 03            [24] 1255 	sjmp	00331$
      0004BC                       1256 00330$:
      0004BC 02r07r32         [24] 1257 	ljmp	00113$
      0004BF                       1258 00331$:
                                   1259 ;	calc.c:106: printstr("\r\n");
      0004BF 7Cr17            [12] 1260 	mov	r4,#___str_3
      0004C1 7Ds00            [12] 1261 	mov	r5,#(___str_3 >> 8)
      0004C3 7E 80            [12] 1262 	mov	r6,#0x80
                                   1263 ;	calc.c:51: return;
      0004C5                       1264 00149$:
                                   1265 ;	calc.c:49: for (; *s; s++) putchar(*s);
      0004C5 8C 82            [24] 1266 	mov	dpl,r4
      0004C7 8D 83            [24] 1267 	mov	dph,r5
      0004C9 8E F0            [24] 1268 	mov	b,r6
      0004CB 12r00r00         [24] 1269 	lcall	__gptrget
      0004CE FB               [12] 1270 	mov	r3,a
      0004CF 60 10            [24] 1271 	jz	00126$
      0004D1 7A 00            [12] 1272 	mov	r2,#0x00
      0004D3 8B 82            [24] 1273 	mov	dpl,r3
      0004D5 8A 83            [24] 1274 	mov	dph,r2
      0004D7 12r00r00         [24] 1275 	lcall	_putchar
      0004DA 0C               [12] 1276 	inc	r4
                                   1277 ;	calc.c:106: printstr("\r\n");
      0004DB BC 00 E7         [24] 1278 	cjne	r4,#0x00,00149$
      0004DE 0D               [12] 1279 	inc	r5
      0004DF 80 E4            [24] 1280 	sjmp	00149$
      0004E1                       1281 00126$:
                                   1282 ;	calc.c:107: for (r = stack_pop(ctx->ss, &d); r > 0; r = stack_pop(ctx->ss, &d)) {
      0004E1 8F 06            [24] 1283 	mov	ar6,r7
      0004E3 E5*00            [12] 1284 	mov	a,_bp
      0004E5 24 05            [12] 1285 	add	a,#0x05
      0004E7 F8               [12] 1286 	mov	r0,a
      0004E8 A6 06            [24] 1287 	mov	@r0,ar6
      0004EA 08               [12] 1288 	inc	r0
      0004EB 76 00            [12] 1289 	mov	@r0,#0x00
      0004ED 08               [12] 1290 	inc	r0
      0004EE 76 40            [12] 1291 	mov	@r0,#0x40
      0004F0 E5*00            [12] 1292 	mov	a,_bp
      0004F2 24 0B            [12] 1293 	add	a,#0x0b
      0004F4 F8               [12] 1294 	mov	r0,a
      0004F5 E5*00            [12] 1295 	mov	a,_bp
      0004F7 24 08            [12] 1296 	add	a,#0x08
      0004F9 F9               [12] 1297 	mov	r1,a
      0004FA 74 16            [12] 1298 	mov	a,#0x16
      0004FC 26               [12] 1299 	add	a,@r0
      0004FD F7               [12] 1300 	mov	@r1,a
      0004FE 74 40            [12] 1301 	mov	a,#0x40
      000500 08               [12] 1302 	inc	r0
      000501 36               [12] 1303 	addc	a,@r0
      000502 09               [12] 1304 	inc	r1
      000503 F7               [12] 1305 	mov	@r1,a
      000504 08               [12] 1306 	inc	r0
      000505 09               [12] 1307 	inc	r1
      000506 E6               [12] 1308 	mov	a,@r0
      000507 F7               [12] 1309 	mov	@r1,a
      000508 E5*00            [12] 1310 	mov	a,_bp
      00050A 24 08            [12] 1311 	add	a,#0x08
      00050C F8               [12] 1312 	mov	r0,a
      00050D 86 82            [24] 1313 	mov	dpl,@r0
      00050F 08               [12] 1314 	inc	r0
      000510 86 83            [24] 1315 	mov	dph,@r0
      000512 08               [12] 1316 	inc	r0
      000513 86 F0            [24] 1317 	mov	b,@r0
      000515 12r00r00         [24] 1318 	lcall	__gptrget
      000518 FA               [12] 1319 	mov	r2,a
      000519 A3               [24] 1320 	inc	dptr
      00051A 12r00r00         [24] 1321 	lcall	__gptrget
      00051D FB               [12] 1322 	mov	r3,a
      00051E A3               [24] 1323 	inc	dptr
      00051F 12r00r00         [24] 1324 	lcall	__gptrget
      000522 FE               [12] 1325 	mov	r6,a
      000523 C0 07            [24] 1326 	push	ar7
      000525 E5*00            [12] 1327 	mov	a,_bp
      000527 24 05            [12] 1328 	add	a,#0x05
      000529 F8               [12] 1329 	mov	r0,a
      00052A E6               [12] 1330 	mov	a,@r0
      00052B C0 E0            [24] 1331 	push	acc
      00052D 08               [12] 1332 	inc	r0
      00052E E6               [12] 1333 	mov	a,@r0
      00052F C0 E0            [24] 1334 	push	acc
      000531 08               [12] 1335 	inc	r0
      000532 E6               [12] 1336 	mov	a,@r0
      000533 C0 E0            [24] 1337 	push	acc
      000535 8A 82            [24] 1338 	mov	dpl,r2
      000537 8B 83            [24] 1339 	mov	dph,r3
      000539 8E F0            [24] 1340 	mov	b,r6
      00053B 12r00r00         [24] 1341 	lcall	_stack_pop
      00053E AD 82            [24] 1342 	mov	r5,dpl
      000540 AE 83            [24] 1343 	mov	r6,dph
      000542 15 81            [12] 1344 	dec	sp
      000544 15 81            [12] 1345 	dec	sp
      000546 15 81            [12] 1346 	dec	sp
      000548 D0 07            [24] 1347 	pop	ar7
      00054A                       1348 00160$:
      00054A C3               [12] 1349 	clr	c
      00054B E4               [12] 1350 	clr	a
      00054C 9D               [12] 1351 	subb	a,r5
      00054D 74 80            [12] 1352 	mov	a,#(0x00 ^ 0x80)
      00054F 8E F0            [24] 1353 	mov	b,r6
      000551 63 F0 80         [24] 1354 	xrl	b,#0x80
      000554 95 F0            [12] 1355 	subb	a,b
      000556 40 03            [24] 1356 	jc	00334$
      000558 02r07r32         [24] 1357 	ljmp	00113$
      00055B                       1358 00334$:
                                   1359 ;	calc.c:108: printstr("SSPA\t");
      00055B 7Dr32            [12] 1360 	mov	r5,#___str_6
      00055D 7Bs00            [12] 1361 	mov	r3,#(___str_6 >> 8)
      00055F 7A 80            [12] 1362 	mov	r2,#0x80
                                   1363 ;	calc.c:51: return;
      000561                       1364 00152$:
                                   1365 ;	calc.c:49: for (; *s; s++) putchar(*s);
      000561 8D 82            [24] 1366 	mov	dpl,r5
      000563 8B 83            [24] 1367 	mov	dph,r3
      000565 8A F0            [24] 1368 	mov	b,r2
      000567 12r00r00         [24] 1369 	lcall	__gptrget
      00056A FE               [12] 1370 	mov	r6,a
      00056B 60 16            [24] 1371 	jz	00128$
      00056D C0 07            [24] 1372 	push	ar7
      00056F 8E 04            [24] 1373 	mov	ar4,r6
      000571 7F 00            [12] 1374 	mov	r7,#0x00
      000573 8C 82            [24] 1375 	mov	dpl,r4
      000575 8F 83            [24] 1376 	mov	dph,r7
      000577 12r00r00         [24] 1377 	lcall	_putchar
      00057A 0D               [12] 1378 	inc	r5
      00057B BD 00 01         [24] 1379 	cjne	r5,#0x00,00336$
      00057E 0B               [12] 1380 	inc	r3
      00057F                       1381 00336$:
      00057F D0 07            [24] 1382 	pop	ar7
                                   1383 ;	calc.c:108: printstr("SSPA\t");
      000581 80 DE            [24] 1384 	sjmp	00152$
      000583                       1385 00128$:
                                   1386 ;	calc.c:109: printall(d);
      000583 C0 07            [24] 1387 	push	ar7
      000585 E5*00            [12] 1388 	mov	a,_bp
      000587 24 0E            [12] 1389 	add	a,#0x0e
      000589 F8               [12] 1390 	mov	r0,a
      00058A E5*00            [12] 1391 	mov	a,_bp
      00058C 24 12            [12] 1392 	add	a,#0x12
      00058E F9               [12] 1393 	mov	r1,a
      00058F E6               [12] 1394 	mov	a,@r0
      000590 F7               [12] 1395 	mov	@r1,a
      000591 08               [12] 1396 	inc	r0
      000592 09               [12] 1397 	inc	r1
      000593 E6               [12] 1398 	mov	a,@r0
      000594 F7               [12] 1399 	mov	@r1,a
      000595 08               [12] 1400 	inc	r0
      000596 09               [12] 1401 	inc	r1
      000597 E6               [12] 1402 	mov	a,@r0
      000598 F7               [12] 1403 	mov	@r1,a
      000599 08               [12] 1404 	inc	r0
      00059A 09               [12] 1405 	inc	r1
      00059B E6               [12] 1406 	mov	a,@r0
      00059C F7               [12] 1407 	mov	@r1,a
      00059D E5*00            [12] 1408 	mov	a,_bp
      00059F 24 12            [12] 1409 	add	a,#0x12
      0005A1 F8               [12] 1410 	mov	r0,a
      0005A2 86 02            [24] 1411 	mov	ar2,@r0
      0005A4 08               [12] 1412 	inc	r0
      0005A5 86 03            [24] 1413 	mov	ar3,@r0
      0005A7 08               [12] 1414 	inc	r0
      0005A8 86 04            [24] 1415 	mov	ar4,@r0
      0005AA 08               [12] 1416 	inc	r0
      0005AB 86 07            [24] 1417 	mov	ar7,@r0
                                   1418 ;	calc.c:64: printf("%08lx\t", d);
      0005AD C0 07            [24] 1419 	push	ar7
      0005AF C0 04            [24] 1420 	push	ar4
      0005B1 C0 03            [24] 1421 	push	ar3
      0005B3 C0 02            [24] 1422 	push	ar2
      0005B5 E5*00            [12] 1423 	mov	a,_bp
      0005B7 24 12            [12] 1424 	add	a,#0x12
      0005B9 F8               [12] 1425 	mov	r0,a
      0005BA E6               [12] 1426 	mov	a,@r0
      0005BB C0 E0            [24] 1427 	push	acc
      0005BD 08               [12] 1428 	inc	r0
      0005BE E6               [12] 1429 	mov	a,@r0
      0005BF C0 E0            [24] 1430 	push	acc
      0005C1 08               [12] 1431 	inc	r0
      0005C2 E6               [12] 1432 	mov	a,@r0
      0005C3 C0 E0            [24] 1433 	push	acc
      0005C5 08               [12] 1434 	inc	r0
      0005C6 E6               [12] 1435 	mov	a,@r0
      0005C7 C0 E0            [24] 1436 	push	acc
      0005C9 74r00            [12] 1437 	mov	a,#___str_0
      0005CB C0 E0            [24] 1438 	push	acc
      0005CD 74s00            [12] 1439 	mov	a,#(___str_0 >> 8)
      0005CF C0 E0            [24] 1440 	push	acc
      0005D1 74 80            [12] 1441 	mov	a,#0x80
      0005D3 C0 E0            [24] 1442 	push	acc
      0005D5 12r00r00         [24] 1443 	lcall	_printf
      0005D8 E5 81            [12] 1444 	mov	a,sp
      0005DA 24 F9            [12] 1445 	add	a,#0xf9
      0005DC F5 81            [12] 1446 	mov	sp,a
      0005DE D0 02            [24] 1447 	pop	ar2
      0005E0 D0 03            [24] 1448 	pop	ar3
      0005E2 D0 04            [24] 1449 	pop	ar4
      0005E4 D0 07            [24] 1450 	pop	ar7
                                   1451 ;	calc.c:65: printf("% 11ld\t", d);
      0005E6 C0 07            [24] 1452 	push	ar7
      0005E8 C0 04            [24] 1453 	push	ar4
      0005EA C0 03            [24] 1454 	push	ar3
      0005EC C0 02            [24] 1455 	push	ar2
      0005EE C0 02            [24] 1456 	push	ar2
      0005F0 C0 03            [24] 1457 	push	ar3
      0005F2 C0 04            [24] 1458 	push	ar4
      0005F4 C0 07            [24] 1459 	push	ar7
      0005F6 74r07            [12] 1460 	mov	a,#___str_1
      0005F8 C0 E0            [24] 1461 	push	acc
      0005FA 74s00            [12] 1462 	mov	a,#(___str_1 >> 8)
      0005FC C0 E0            [24] 1463 	push	acc
      0005FE 74 80            [12] 1464 	mov	a,#0x80
      000600 C0 E0            [24] 1465 	push	acc
      000602 12r00r00         [24] 1466 	lcall	_printf
      000605 E5 81            [12] 1467 	mov	a,sp
      000607 24 F9            [12] 1468 	add	a,#0xf9
      000609 F5 81            [12] 1469 	mov	sp,a
      00060B D0 02            [24] 1470 	pop	ar2
      00060D D0 03            [24] 1471 	pop	ar3
      00060F D0 04            [24] 1472 	pop	ar4
      000611 D0 07            [24] 1473 	pop	ar7
                                   1474 ;	calc.c:66: printf("%011lo\t", d);
      000613 C0 07            [24] 1475 	push	ar7
      000615 C0 04            [24] 1476 	push	ar4
      000617 C0 03            [24] 1477 	push	ar3
      000619 C0 02            [24] 1478 	push	ar2
      00061B C0 02            [24] 1479 	push	ar2
      00061D C0 03            [24] 1480 	push	ar3
      00061F C0 04            [24] 1481 	push	ar4
      000621 C0 07            [24] 1482 	push	ar7
      000623 74r0F            [12] 1483 	mov	a,#___str_2
      000625 C0 E0            [24] 1484 	push	acc
      000627 74s00            [12] 1485 	mov	a,#(___str_2 >> 8)
      000629 C0 E0            [24] 1486 	push	acc
      00062B 74 80            [12] 1487 	mov	a,#0x80
      00062D C0 E0            [24] 1488 	push	acc
      00062F 12r00r00         [24] 1489 	lcall	_printf
      000632 E5 81            [12] 1490 	mov	a,sp
      000634 24 F9            [12] 1491 	add	a,#0xf9
      000636 F5 81            [12] 1492 	mov	sp,a
      000638 D0 02            [24] 1493 	pop	ar2
      00063A D0 03            [24] 1494 	pop	ar3
      00063C D0 04            [24] 1495 	pop	ar4
      00063E D0 07            [24] 1496 	pop	ar7
                                   1497 ;	calc.c:67: printbin(d);
      000640 E5*00            [12] 1498 	mov	a,_bp
      000642 24 16            [12] 1499 	add	a,#0x16
      000644 F8               [12] 1500 	mov	r0,a
      000645 A6 02            [24] 1501 	mov	@r0,ar2
      000647 08               [12] 1502 	inc	r0
      000648 A6 03            [24] 1503 	mov	@r0,ar3
      00064A 08               [12] 1504 	inc	r0
      00064B A6 04            [24] 1505 	mov	@r0,ar4
      00064D 08               [12] 1506 	inc	r0
      00064E A6 07            [24] 1507 	mov	@r0,ar7
                                   1508 ;	calc.c:57: for (mask = 0x80000000lu; mask; mask >>= 1)
      000650 E5*00            [12] 1509 	mov	a,_bp
      000652 24 1A            [12] 1510 	add	a,#0x1a
      000654 F8               [12] 1511 	mov	r0,a
      000655 E4               [12] 1512 	clr	a
      000656 F6               [12] 1513 	mov	@r0,a
      000657 08               [12] 1514 	inc	r0
      000658 F6               [12] 1515 	mov	@r0,a
      000659 08               [12] 1516 	inc	r0
      00065A F6               [12] 1517 	mov	@r0,a
      00065B 08               [12] 1518 	inc	r0
      00065C 76 80            [12] 1519 	mov	@r0,#0x80
                                   1520 ;	calc.c:114: return 1;
      00065E D0 07            [24] 1521 	pop	ar7
                                   1522 ;	calc.c:57: for (mask = 0x80000000lu; mask; mask >>= 1)
      000660                       1523 00154$:
                                   1524 ;	calc.c:58: (void)putchar((d & mask) ? (int)'1' : (int)'0');
      000660 C0 07            [24] 1525 	push	ar7
      000662 E5*00            [12] 1526 	mov	a,_bp
      000664 24 16            [12] 1527 	add	a,#0x16
      000666 F8               [12] 1528 	mov	r0,a
      000667 86 02            [24] 1529 	mov	ar2,@r0
      000669 08               [12] 1530 	inc	r0
      00066A 86 03            [24] 1531 	mov	ar3,@r0
      00066C 08               [12] 1532 	inc	r0
      00066D 86 04            [24] 1533 	mov	ar4,@r0
      00066F 08               [12] 1534 	inc	r0
      000670 86 07            [24] 1535 	mov	ar7,@r0
      000672 E5*00            [12] 1536 	mov	a,_bp
      000674 24 1A            [12] 1537 	add	a,#0x1a
      000676 F8               [12] 1538 	mov	r0,a
      000677 E6               [12] 1539 	mov	a,@r0
      000678 52 02            [12] 1540 	anl	ar2,a
      00067A 08               [12] 1541 	inc	r0
      00067B E6               [12] 1542 	mov	a,@r0
      00067C 52 03            [12] 1543 	anl	ar3,a
      00067E 08               [12] 1544 	inc	r0
      00067F E6               [12] 1545 	mov	a,@r0
      000680 52 04            [12] 1546 	anl	ar4,a
      000682 08               [12] 1547 	inc	r0
      000683 E6               [12] 1548 	mov	a,@r0
      000684 52 07            [12] 1549 	anl	ar7,a
      000686 EA               [12] 1550 	mov	a,r2
      000687 4B               [12] 1551 	orl	a,r3
      000688 4C               [12] 1552 	orl	a,r4
      000689 4F               [12] 1553 	orl	a,r7
      00068A D0 07            [24] 1554 	pop	ar7
      00068C 60 06            [24] 1555 	jz	00166$
      00068E 7B 31            [12] 1556 	mov	r3,#0x31
      000690 7C 00            [12] 1557 	mov	r4,#0x00
      000692 80 04            [24] 1558 	sjmp	00167$
      000694                       1559 00166$:
      000694 7B 30            [12] 1560 	mov	r3,#0x30
      000696 7C 00            [12] 1561 	mov	r4,#0x00
      000698                       1562 00167$:
      000698 8B 82            [24] 1563 	mov	dpl,r3
      00069A 8C 83            [24] 1564 	mov	dph,r4
      00069C 12r00r00         [24] 1565 	lcall	_putchar
                                   1566 ;	calc.c:57: for (mask = 0x80000000lu; mask; mask >>= 1)
      00069F E5*00            [12] 1567 	mov	a,_bp
      0006A1 24 1A            [12] 1568 	add	a,#0x1a
      0006A3 F8               [12] 1569 	mov	r0,a
      0006A4 08               [12] 1570 	inc	r0
      0006A5 08               [12] 1571 	inc	r0
      0006A6 08               [12] 1572 	inc	r0
      0006A7 E6               [12] 1573 	mov	a,@r0
      0006A8 C3               [12] 1574 	clr	c
      0006A9 13               [12] 1575 	rrc	a
      0006AA F6               [12] 1576 	mov	@r0,a
      0006AB 18               [12] 1577 	dec	r0
      0006AC E6               [12] 1578 	mov	a,@r0
      0006AD 13               [12] 1579 	rrc	a
      0006AE F6               [12] 1580 	mov	@r0,a
      0006AF 18               [12] 1581 	dec	r0
      0006B0 E6               [12] 1582 	mov	a,@r0
      0006B1 13               [12] 1583 	rrc	a
      0006B2 F6               [12] 1584 	mov	@r0,a
      0006B3 18               [12] 1585 	dec	r0
      0006B4 E6               [12] 1586 	mov	a,@r0
      0006B5 13               [12] 1587 	rrc	a
      0006B6 F6               [12] 1588 	mov	@r0,a
      0006B7 E5*00            [12] 1589 	mov	a,_bp
      0006B9 24 1A            [12] 1590 	add	a,#0x1a
      0006BB F8               [12] 1591 	mov	r0,a
      0006BC E6               [12] 1592 	mov	a,@r0
      0006BD 08               [12] 1593 	inc	r0
      0006BE 46               [12] 1594 	orl	a,@r0
      0006BF 08               [12] 1595 	inc	r0
      0006C0 46               [12] 1596 	orl	a,@r0
      0006C1 08               [12] 1597 	inc	r0
      0006C2 46               [12] 1598 	orl	a,@r0
      0006C3 70 9B            [24] 1599 	jnz	00154$
                                   1600 ;	calc.c:110: printstr("\r\n");
      0006C5 7Dr17            [12] 1601 	mov	r5,#___str_3
      0006C7 7Bs00            [12] 1602 	mov	r3,#(___str_3 >> 8)
      0006C9 7A 80            [12] 1603 	mov	r2,#0x80
                                   1604 ;	calc.c:51: return;
      0006CB                       1605 00157$:
                                   1606 ;	calc.c:49: for (; *s; s++) putchar(*s);
      0006CB 8D 82            [24] 1607 	mov	dpl,r5
      0006CD 8B 83            [24] 1608 	mov	dph,r3
      0006CF 8A F0            [24] 1609 	mov	b,r2
      0006D1 12r00r00         [24] 1610 	lcall	__gptrget
      0006D4 FE               [12] 1611 	mov	r6,a
      0006D5 60 16            [24] 1612 	jz	00133$
      0006D7 C0 07            [24] 1613 	push	ar7
      0006D9 8E 04            [24] 1614 	mov	ar4,r6
      0006DB 7F 00            [12] 1615 	mov	r7,#0x00
      0006DD 8C 82            [24] 1616 	mov	dpl,r4
      0006DF 8F 83            [24] 1617 	mov	dph,r7
      0006E1 12r00r00         [24] 1618 	lcall	_putchar
      0006E4 0D               [12] 1619 	inc	r5
      0006E5 BD 00 01         [24] 1620 	cjne	r5,#0x00,00340$
      0006E8 0B               [12] 1621 	inc	r3
      0006E9                       1622 00340$:
      0006E9 D0 07            [24] 1623 	pop	ar7
                                   1624 ;	calc.c:110: printstr("\r\n");
      0006EB 80 DE            [24] 1625 	sjmp	00157$
      0006ED                       1626 00133$:
                                   1627 ;	calc.c:107: for (r = stack_pop(ctx->ss, &d); r > 0; r = stack_pop(ctx->ss, &d)) {
      0006ED 8F 06            [24] 1628 	mov	ar6,r7
      0006EF 7D 00            [12] 1629 	mov	r5,#0x00
      0006F1 7A 40            [12] 1630 	mov	r2,#0x40
      0006F3 C0 07            [24] 1631 	push	ar7
      0006F5 E5*00            [12] 1632 	mov	a,_bp
      0006F7 24 08            [12] 1633 	add	a,#0x08
      0006F9 F8               [12] 1634 	mov	r0,a
      0006FA 86 82            [24] 1635 	mov	dpl,@r0
      0006FC 08               [12] 1636 	inc	r0
      0006FD 86 83            [24] 1637 	mov	dph,@r0
      0006FF 08               [12] 1638 	inc	r0
      000700 86 F0            [24] 1639 	mov	b,@r0
      000702 12r00r00         [24] 1640 	lcall	__gptrget
      000705 FB               [12] 1641 	mov	r3,a
      000706 A3               [24] 1642 	inc	dptr
      000707 12r00r00         [24] 1643 	lcall	__gptrget
      00070A FC               [12] 1644 	mov	r4,a
      00070B A3               [24] 1645 	inc	dptr
      00070C 12r00r00         [24] 1646 	lcall	__gptrget
      00070F FF               [12] 1647 	mov	r7,a
      000710 C0 06            [24] 1648 	push	ar6
      000712 C0 05            [24] 1649 	push	ar5
      000714 C0 02            [24] 1650 	push	ar2
      000716 8B 82            [24] 1651 	mov	dpl,r3
      000718 8C 83            [24] 1652 	mov	dph,r4
      00071A 8F F0            [24] 1653 	mov	b,r7
      00071C 12r00r00         [24] 1654 	lcall	_stack_pop
      00071F AC 82            [24] 1655 	mov	r4,dpl
      000721 AF 83            [24] 1656 	mov	r7,dph
      000723 15 81            [12] 1657 	dec	sp
      000725 15 81            [12] 1658 	dec	sp
      000727 15 81            [12] 1659 	dec	sp
      000729 8C 05            [24] 1660 	mov	ar5,r4
      00072B 8F 06            [24] 1661 	mov	ar6,r7
      00072D D0 07            [24] 1662 	pop	ar7
      00072F 02r05r4A         [24] 1663 	ljmp	00160$
      000732                       1664 00113$:
                                   1665 ;	calc.c:114: return 1;
      000732 90 00 01         [24] 1666 	mov	dptr,#0x0001
                                   1667 ;	calc.c:115: }
      000735 85*00 81         [24] 1668 	mov	sp,_bp
      000738 D0*00            [24] 1669 	pop	_bp
      00073A 22               [24] 1670 	ret
                                   1671 ;------------------------------------------------------------
                                   1672 ;Allocation info for local variables in function 'dump_peek'
                                   1673 ;------------------------------------------------------------
                                   1674 ;d                         Allocated to stack - _bp -6
                                   1675 ;_ctx                      Allocated to registers 
                                   1676 ;__1310720021              Allocated to registers 
                                   1677 ;s                         Allocated to registers r5 r6 r7 
                                   1678 ;__1310720023              Allocated to registers r4 r5 r6 r7 
                                   1679 ;d                         Allocated to registers 
                                   1680 ;__1310720001              Allocated to registers 
                                   1681 ;d                         Allocated to stack - _bp +1
                                   1682 ;mask                      Allocated to stack - _bp +5
                                   1683 ;__1310720025              Allocated to registers 
                                   1684 ;s                         Allocated to registers r5 r6 r7 
                                   1685 ;------------------------------------------------------------
                                   1686 ;	calc.c:117: static int dump_peek(void *_ctx, long d) __reentrant {
                                   1687 ;	-----------------------------------------
                                   1688 ;	 function dump_peek
                                   1689 ;	-----------------------------------------
      00073B                       1690 _dump_peek:
      00073B C0*00            [24] 1691 	push	_bp
      00073D E5 81            [12] 1692 	mov	a,sp
      00073F F5*00            [12] 1693 	mov	_bp,a
      000741 24 08            [12] 1694 	add	a,#0x08
      000743 F5 81            [12] 1695 	mov	sp,a
                                   1696 ;	calc.c:120: printstr("PSVA\t");
      000745 7Dr38            [12] 1697 	mov	r5,#___str_7
      000747 7Es00            [12] 1698 	mov	r6,#(___str_7 >> 8)
      000749 7F 80            [12] 1699 	mov	r7,#0x80
                                   1700 ;	calc.c:51: return;
      00074B                       1701 00109$:
                                   1702 ;	calc.c:49: for (; *s; s++) putchar(*s);
      00074B 8D 82            [24] 1703 	mov	dpl,r5
      00074D 8E 83            [24] 1704 	mov	dph,r6
      00074F 8F F0            [24] 1705 	mov	b,r7
      000751 12r00r00         [24] 1706 	lcall	__gptrget
      000754 FC               [12] 1707 	mov	r4,a
      000755 60 10            [24] 1708 	jz	00102$
      000757 7B 00            [12] 1709 	mov	r3,#0x00
      000759 8C 82            [24] 1710 	mov	dpl,r4
      00075B 8B 83            [24] 1711 	mov	dph,r3
      00075D 12r00r00         [24] 1712 	lcall	_putchar
      000760 0D               [12] 1713 	inc	r5
                                   1714 ;	calc.c:120: printstr("PSVA\t");
      000761 BD 00 E7         [24] 1715 	cjne	r5,#0x00,00109$
      000764 0E               [12] 1716 	inc	r6
      000765 80 E4            [24] 1717 	sjmp	00109$
      000767                       1718 00102$:
                                   1719 ;	calc.c:121: printall(d);
      000767 E5*00            [12] 1720 	mov	a,_bp
      000769 24 FA            [12] 1721 	add	a,#0xfa
      00076B F8               [12] 1722 	mov	r0,a
      00076C 86 04            [24] 1723 	mov	ar4,@r0
      00076E 08               [12] 1724 	inc	r0
      00076F 86 05            [24] 1725 	mov	ar5,@r0
      000771 08               [12] 1726 	inc	r0
      000772 86 06            [24] 1727 	mov	ar6,@r0
      000774 08               [12] 1728 	inc	r0
      000775 86 07            [24] 1729 	mov	ar7,@r0
                                   1730 ;	calc.c:64: printf("%08lx\t", d);
      000777 C0 07            [24] 1731 	push	ar7
      000779 C0 06            [24] 1732 	push	ar6
      00077B C0 05            [24] 1733 	push	ar5
      00077D C0 04            [24] 1734 	push	ar4
      00077F C0 04            [24] 1735 	push	ar4
      000781 C0 05            [24] 1736 	push	ar5
      000783 C0 06            [24] 1737 	push	ar6
      000785 C0 07            [24] 1738 	push	ar7
      000787 74r00            [12] 1739 	mov	a,#___str_0
      000789 C0 E0            [24] 1740 	push	acc
      00078B 74s00            [12] 1741 	mov	a,#(___str_0 >> 8)
      00078D C0 E0            [24] 1742 	push	acc
      00078F 74 80            [12] 1743 	mov	a,#0x80
      000791 C0 E0            [24] 1744 	push	acc
      000793 12r00r00         [24] 1745 	lcall	_printf
      000796 E5 81            [12] 1746 	mov	a,sp
      000798 24 F9            [12] 1747 	add	a,#0xf9
      00079A F5 81            [12] 1748 	mov	sp,a
      00079C D0 04            [24] 1749 	pop	ar4
      00079E D0 05            [24] 1750 	pop	ar5
      0007A0 D0 06            [24] 1751 	pop	ar6
      0007A2 D0 07            [24] 1752 	pop	ar7
                                   1753 ;	calc.c:65: printf("% 11ld\t", d);
      0007A4 C0 07            [24] 1754 	push	ar7
      0007A6 C0 06            [24] 1755 	push	ar6
      0007A8 C0 05            [24] 1756 	push	ar5
      0007AA C0 04            [24] 1757 	push	ar4
      0007AC C0 04            [24] 1758 	push	ar4
      0007AE C0 05            [24] 1759 	push	ar5
      0007B0 C0 06            [24] 1760 	push	ar6
      0007B2 C0 07            [24] 1761 	push	ar7
      0007B4 74r07            [12] 1762 	mov	a,#___str_1
      0007B6 C0 E0            [24] 1763 	push	acc
      0007B8 74s00            [12] 1764 	mov	a,#(___str_1 >> 8)
      0007BA C0 E0            [24] 1765 	push	acc
      0007BC 74 80            [12] 1766 	mov	a,#0x80
      0007BE C0 E0            [24] 1767 	push	acc
      0007C0 12r00r00         [24] 1768 	lcall	_printf
      0007C3 E5 81            [12] 1769 	mov	a,sp
      0007C5 24 F9            [12] 1770 	add	a,#0xf9
      0007C7 F5 81            [12] 1771 	mov	sp,a
      0007C9 D0 04            [24] 1772 	pop	ar4
      0007CB D0 05            [24] 1773 	pop	ar5
      0007CD D0 06            [24] 1774 	pop	ar6
      0007CF D0 07            [24] 1775 	pop	ar7
                                   1776 ;	calc.c:66: printf("%011lo\t", d);
      0007D1 C0 07            [24] 1777 	push	ar7
      0007D3 C0 06            [24] 1778 	push	ar6
      0007D5 C0 05            [24] 1779 	push	ar5
      0007D7 C0 04            [24] 1780 	push	ar4
      0007D9 C0 04            [24] 1781 	push	ar4
      0007DB C0 05            [24] 1782 	push	ar5
      0007DD C0 06            [24] 1783 	push	ar6
      0007DF C0 07            [24] 1784 	push	ar7
      0007E1 74r0F            [12] 1785 	mov	a,#___str_2
      0007E3 C0 E0            [24] 1786 	push	acc
      0007E5 74s00            [12] 1787 	mov	a,#(___str_2 >> 8)
      0007E7 C0 E0            [24] 1788 	push	acc
      0007E9 74 80            [12] 1789 	mov	a,#0x80
      0007EB C0 E0            [24] 1790 	push	acc
      0007ED 12r00r00         [24] 1791 	lcall	_printf
      0007F0 E5 81            [12] 1792 	mov	a,sp
      0007F2 24 F9            [12] 1793 	add	a,#0xf9
      0007F4 F5 81            [12] 1794 	mov	sp,a
      0007F6 D0 04            [24] 1795 	pop	ar4
      0007F8 D0 05            [24] 1796 	pop	ar5
      0007FA D0 06            [24] 1797 	pop	ar6
      0007FC D0 07            [24] 1798 	pop	ar7
                                   1799 ;	calc.c:67: printbin(d);
      0007FE A8*00            [24] 1800 	mov	r0,_bp
      000800 08               [12] 1801 	inc	r0
      000801 A6 04            [24] 1802 	mov	@r0,ar4
      000803 08               [12] 1803 	inc	r0
      000804 A6 05            [24] 1804 	mov	@r0,ar5
      000806 08               [12] 1805 	inc	r0
      000807 A6 06            [24] 1806 	mov	@r0,ar6
      000809 08               [12] 1807 	inc	r0
      00080A A6 07            [24] 1808 	mov	@r0,ar7
                                   1809 ;	calc.c:57: for (mask = 0x80000000lu; mask; mask >>= 1)
      00080C E5*00            [12] 1810 	mov	a,_bp
      00080E 24 05            [12] 1811 	add	a,#0x05
      000810 F8               [12] 1812 	mov	r0,a
      000811 E4               [12] 1813 	clr	a
      000812 F6               [12] 1814 	mov	@r0,a
      000813 08               [12] 1815 	inc	r0
      000814 F6               [12] 1816 	mov	@r0,a
      000815 08               [12] 1817 	inc	r0
      000816 F6               [12] 1818 	mov	@r0,a
      000817 08               [12] 1819 	inc	r0
      000818 76 80            [12] 1820 	mov	@r0,#0x80
      00081A                       1821 00111$:
                                   1822 ;	calc.c:58: (void)putchar((d & mask) ? (int)'1' : (int)'0');
      00081A A8*00            [24] 1823 	mov	r0,_bp
      00081C 08               [12] 1824 	inc	r0
      00081D 86 04            [24] 1825 	mov	ar4,@r0
      00081F 08               [12] 1826 	inc	r0
      000820 86 05            [24] 1827 	mov	ar5,@r0
      000822 08               [12] 1828 	inc	r0
      000823 86 06            [24] 1829 	mov	ar6,@r0
      000825 08               [12] 1830 	inc	r0
      000826 86 07            [24] 1831 	mov	ar7,@r0
      000828 E5*00            [12] 1832 	mov	a,_bp
      00082A 24 05            [12] 1833 	add	a,#0x05
      00082C F8               [12] 1834 	mov	r0,a
      00082D E6               [12] 1835 	mov	a,@r0
      00082E 52 04            [12] 1836 	anl	ar4,a
      000830 08               [12] 1837 	inc	r0
      000831 E6               [12] 1838 	mov	a,@r0
      000832 52 05            [12] 1839 	anl	ar5,a
      000834 08               [12] 1840 	inc	r0
      000835 E6               [12] 1841 	mov	a,@r0
      000836 52 06            [12] 1842 	anl	ar6,a
      000838 08               [12] 1843 	inc	r0
      000839 E6               [12] 1844 	mov	a,@r0
      00083A 52 07            [12] 1845 	anl	ar7,a
      00083C EC               [12] 1846 	mov	a,r4
      00083D 4D               [12] 1847 	orl	a,r5
      00083E 4E               [12] 1848 	orl	a,r6
      00083F 4F               [12] 1849 	orl	a,r7
      000840 60 06            [24] 1850 	jz	00118$
      000842 7E 31            [12] 1851 	mov	r6,#0x31
      000844 7F 00            [12] 1852 	mov	r7,#0x00
      000846 80 04            [24] 1853 	sjmp	00119$
      000848                       1854 00118$:
      000848 7E 30            [12] 1855 	mov	r6,#0x30
      00084A 7F 00            [12] 1856 	mov	r7,#0x00
      00084C                       1857 00119$:
      00084C 8E 82            [24] 1858 	mov	dpl,r6
      00084E 8F 83            [24] 1859 	mov	dph,r7
      000850 12r00r00         [24] 1860 	lcall	_putchar
                                   1861 ;	calc.c:57: for (mask = 0x80000000lu; mask; mask >>= 1)
      000853 E5*00            [12] 1862 	mov	a,_bp
      000855 24 05            [12] 1863 	add	a,#0x05
      000857 F8               [12] 1864 	mov	r0,a
      000858 08               [12] 1865 	inc	r0
      000859 08               [12] 1866 	inc	r0
      00085A 08               [12] 1867 	inc	r0
      00085B E6               [12] 1868 	mov	a,@r0
      00085C C3               [12] 1869 	clr	c
      00085D 13               [12] 1870 	rrc	a
      00085E F6               [12] 1871 	mov	@r0,a
      00085F 18               [12] 1872 	dec	r0
      000860 E6               [12] 1873 	mov	a,@r0
      000861 13               [12] 1874 	rrc	a
      000862 F6               [12] 1875 	mov	@r0,a
      000863 18               [12] 1876 	dec	r0
      000864 E6               [12] 1877 	mov	a,@r0
      000865 13               [12] 1878 	rrc	a
      000866 F6               [12] 1879 	mov	@r0,a
      000867 18               [12] 1880 	dec	r0
      000868 E6               [12] 1881 	mov	a,@r0
      000869 13               [12] 1882 	rrc	a
      00086A F6               [12] 1883 	mov	@r0,a
      00086B E5*00            [12] 1884 	mov	a,_bp
      00086D 24 05            [12] 1885 	add	a,#0x05
      00086F F8               [12] 1886 	mov	r0,a
      000870 E6               [12] 1887 	mov	a,@r0
      000871 08               [12] 1888 	inc	r0
      000872 46               [12] 1889 	orl	a,@r0
      000873 08               [12] 1890 	inc	r0
      000874 46               [12] 1891 	orl	a,@r0
      000875 08               [12] 1892 	inc	r0
      000876 46               [12] 1893 	orl	a,@r0
      000877 70 A1            [24] 1894 	jnz	00111$
                                   1895 ;	calc.c:122: printstr("\r\n");
      000879 7Dr17            [12] 1896 	mov	r5,#___str_3
      00087B 7Es00            [12] 1897 	mov	r6,#(___str_3 >> 8)
      00087D 7F 80            [12] 1898 	mov	r7,#0x80
                                   1899 ;	calc.c:51: return;
      00087F                       1900 00114$:
                                   1901 ;	calc.c:49: for (; *s; s++) putchar(*s);
      00087F 8D 82            [24] 1902 	mov	dpl,r5
      000881 8E 83            [24] 1903 	mov	dph,r6
      000883 8F F0            [24] 1904 	mov	b,r7
      000885 12r00r00         [24] 1905 	lcall	__gptrget
      000888 FC               [12] 1906 	mov	r4,a
      000889 60 10            [24] 1907 	jz	00107$
      00088B 7B 00            [12] 1908 	mov	r3,#0x00
      00088D 8C 82            [24] 1909 	mov	dpl,r4
      00088F 8B 83            [24] 1910 	mov	dph,r3
      000891 12r00r00         [24] 1911 	lcall	_putchar
      000894 0D               [12] 1912 	inc	r5
                                   1913 ;	calc.c:122: printstr("\r\n");
      000895 BD 00 E7         [24] 1914 	cjne	r5,#0x00,00114$
      000898 0E               [12] 1915 	inc	r6
      000899 80 E4            [24] 1916 	sjmp	00114$
      00089B                       1917 00107$:
                                   1918 ;	calc.c:124: return 1;
      00089B 90 00 01         [24] 1919 	mov	dptr,#0x0001
                                   1920 ;	calc.c:125: }
      00089E 85*00 81         [24] 1921 	mov	sp,_bp
      0008A1 D0*00            [24] 1922 	pop	_bp
      0008A3 22               [24] 1923 	ret
                                   1924 ;------------------------------------------------------------
                                   1925 ;Allocation info for local variables in function 'operator'
                                   1926 ;------------------------------------------------------------
                                   1927 ;delta                     Allocated to stack - _bp -5
                                   1928 ;_ctx                      Allocated to stack - _bp +1
                                   1929 ;ctx                       Allocated to stack - _bp +18
                                   1930 ;t0                        Allocated to registers r7 r6 r5 
                                   1931 ;d0                        Allocated to stack - _bp +21
                                   1932 ;d1                        Allocated to stack - _bp +25
                                   1933 ;__1966080027              Allocated to registers 
                                   1934 ;s                         Allocated to registers r7 r6 r5 
                                   1935 ;__1966080029              Allocated to registers 
                                   1936 ;s                         Allocated to registers r7 r6 r5 
                                   1937 ;__2621440031              Allocated to registers 
                                   1938 ;s                         Allocated to registers r7 r6 r5 
                                   1939 ;__2621440033              Allocated to registers r7 r6 r5 r4 
                                   1940 ;d                         Allocated to stack - _bp +29
                                   1941 ;__1310720001              Allocated to registers 
                                   1942 ;d                         Allocated to registers r7 r6 r5 r2 
                                   1943 ;mask                      Allocated to stack - _bp +33
                                   1944 ;__2621440035              Allocated to registers 
                                   1945 ;s                         Allocated to registers r7 r6 r5 
                                   1946 ;__1966080037              Allocated to registers 
                                   1947 ;s                         Allocated to registers r7 r6 r5 
                                   1948 ;__1966080039              Allocated to registers 
                                   1949 ;s                         Allocated to registers r7 r6 r5 
                                   1950 ;__1966080041              Allocated to registers 
                                   1951 ;s                         Allocated to registers r7 r6 r5 
                                   1952 ;__1966080043              Allocated to registers 
                                   1953 ;s                         Allocated to registers r7 r6 r5 
                                   1954 ;__2621440045              Allocated to registers 
                                   1955 ;s                         Allocated to registers r7 r6 r5 
                                   1956 ;__2621440047              Allocated to registers r7 r6 r5 r4 
                                   1957 ;d                         Allocated to stack - _bp +29
                                   1958 ;__1310720001              Allocated to registers 
                                   1959 ;d                         Allocated to registers r7 r6 r5 r2 
                                   1960 ;mask                      Allocated to stack - _bp +33
                                   1961 ;__2621440049              Allocated to registers 
                                   1962 ;s                         Allocated to registers r7 r6 r5 
                                   1963 ;__1966080051              Allocated to registers 
                                   1964 ;s                         Allocated to registers r7 r6 r5 
                                   1965 ;__1966080053              Allocated to registers 
                                   1966 ;s                         Allocated to registers r7 r6 r5 
                                   1967 ;__2621440055              Allocated to registers 
                                   1968 ;s                         Allocated to registers r7 r6 r5 
                                   1969 ;__1966080057              Allocated to registers 
                                   1970 ;s                         Allocated to registers r7 r6 r5 
                                   1971 ;__3276800059              Allocated to registers 
                                   1972 ;s                         Allocated to registers r7 r6 r5 
                                   1973 ;__1966080061              Allocated to registers 
                                   1974 ;s                         Allocated to registers r7 r6 r5 
                                   1975 ;__3276800063              Allocated to registers 
                                   1976 ;s                         Allocated to registers r7 r6 r5 
                                   1977 ;__1966080065              Allocated to registers 
                                   1978 ;s                         Allocated to registers r7 r6 r5 
                                   1979 ;__1966080067              Allocated to registers 
                                   1980 ;s                         Allocated to registers r7 r6 r5 
                                   1981 ;__1966080069              Allocated to registers 
                                   1982 ;s                         Allocated to registers r7 r6 r5 
                                   1983 ;__1966080071              Allocated to registers 
                                   1984 ;s                         Allocated to registers r7 r6 r5 
                                   1985 ;__1966080073              Allocated to registers 
                                   1986 ;s                         Allocated to registers r7 r6 r5 
                                   1987 ;__3276800075              Allocated to registers 
                                   1988 ;s                         Allocated to registers r7 r6 r5 
                                   1989 ;__1966080077              Allocated to registers 
                                   1990 ;s                         Allocated to registers r7 r6 r5 
                                   1991 ;__2621440079              Allocated to registers 
                                   1992 ;s                         Allocated to registers r7 r6 r5 
                                   1993 ;__1966080081              Allocated to registers 
                                   1994 ;s                         Allocated to registers r7 r6 r5 
                                   1995 ;__2621440083              Allocated to registers 
                                   1996 ;s                         Allocated to registers r7 r6 r5 
                                   1997 ;__1966080085              Allocated to registers 
                                   1998 ;s                         Allocated to registers r7 r6 r5 
                                   1999 ;__2621440087              Allocated to registers 
                                   2000 ;s                         Allocated to registers r7 r6 r5 
                                   2001 ;__1966080089              Allocated to registers 
                                   2002 ;s                         Allocated to registers r7 r6 r5 
                                   2003 ;__2621440091              Allocated to registers 
                                   2004 ;s                         Allocated to registers r7 r6 r5 
                                   2005 ;__2621440093              Allocated to registers 
                                   2006 ;s                         Allocated to registers r7 r6 r5 
                                   2007 ;__1966080095              Allocated to registers 
                                   2008 ;s                         Allocated to registers r7 r6 r5 
                                   2009 ;__2621440097              Allocated to registers 
                                   2010 ;s                         Allocated to registers r7 r6 r5 
                                   2011 ;__2621440099              Allocated to registers 
                                   2012 ;s                         Allocated to registers r7 r6 r5 
                                   2013 ;__1966080101              Allocated to registers 
                                   2014 ;s                         Allocated to registers r5 r4 r3 
                                   2015 ;__2621440103              Allocated to registers 
                                   2016 ;s                         Allocated to registers r5 r4 r3 
                                   2017 ;__1966080105              Allocated to registers 
                                   2018 ;s                         Allocated to registers r5 r4 r3 
                                   2019 ;__2621440107              Allocated to registers 
                                   2020 ;s                         Allocated to registers r5 r4 r3 
                                   2021 ;__1966080109              Allocated to registers 
                                   2022 ;s                         Allocated to registers r5 r4 r3 
                                   2023 ;__2621440111              Allocated to registers 
                                   2024 ;s                         Allocated to registers r5 r4 r3 
                                   2025 ;__1966080113              Allocated to registers 
                                   2026 ;s                         Allocated to registers r5 r4 r3 
                                   2027 ;__2621440115              Allocated to registers 
                                   2028 ;s                         Allocated to registers r5 r4 r3 
                                   2029 ;__1966080117              Allocated to registers 
                                   2030 ;s                         Allocated to registers r5 r4 r3 
                                   2031 ;__2621440119              Allocated to registers 
                                   2032 ;s                         Allocated to registers r5 r4 r3 
                                   2033 ;__1966080121              Allocated to registers 
                                   2034 ;s                         Allocated to registers r5 r4 r3 
                                   2035 ;__2621440123              Allocated to registers 
                                   2036 ;s                         Allocated to registers r5 r4 r3 
                                   2037 ;__1966080125              Allocated to registers 
                                   2038 ;s                         Allocated to registers r5 r4 r3 
                                   2039 ;sloc0                     Allocated to stack - _bp +346
                                   2040 ;sloc1                     Allocated to stack - _bp +4
                                   2041 ;sloc2                     Allocated to stack - _bp +7
                                   2042 ;sloc3                     Allocated to stack - _bp +11
                                   2043 ;sloc4                     Allocated to stack - _bp +14
                                   2044 ;------------------------------------------------------------
                                   2045 ;	calc.c:127: static int operator(void *_ctx, delta_t *delta) __reentrant {
                                   2046 ;	-----------------------------------------
                                   2047 ;	 function operator
                                   2048 ;	-----------------------------------------
      0008A4                       2049 _operator:
      0008A4 C0*00            [24] 2050 	push	_bp
      0008A6 85 81*00         [24] 2051 	mov	_bp,sp
      0008A9 C0 82            [24] 2052 	push	dpl
      0008AB C0 83            [24] 2053 	push	dph
      0008AD C0 F0            [24] 2054 	push	b
      0008AF E5 81            [12] 2055 	mov	a,sp
      0008B1 24 21            [12] 2056 	add	a,#0x21
      0008B3 F5 81            [12] 2057 	mov	sp,a
                                   2058 ;	calc.c:128: calc_ctx_t *ctx = (calc_ctx_t *)_ctx;
      0008B5 A8*00            [24] 2059 	mov	r0,_bp
      0008B7 08               [12] 2060 	inc	r0
      0008B8 E5*00            [12] 2061 	mov	a,_bp
      0008BA 24 12            [12] 2062 	add	a,#0x12
      0008BC F9               [12] 2063 	mov	r1,a
      0008BD E6               [12] 2064 	mov	a,@r0
      0008BE F7               [12] 2065 	mov	@r1,a
      0008BF 08               [12] 2066 	inc	r0
      0008C0 09               [12] 2067 	inc	r1
      0008C1 E6               [12] 2068 	mov	a,@r0
      0008C2 F7               [12] 2069 	mov	@r1,a
      0008C3 08               [12] 2070 	inc	r0
      0008C4 09               [12] 2071 	inc	r1
      0008C5 E6               [12] 2072 	mov	a,@r0
      0008C6 F7               [12] 2073 	mov	@r1,a
                                   2074 ;	calc.c:132: switch (ctx->digit[0]) {
      0008C7 E5*00            [12] 2075 	mov	a,_bp
      0008C9 24 12            [12] 2076 	add	a,#0x12
      0008CB F8               [12] 2077 	mov	r0,a
      0008CC 74 07            [12] 2078 	mov	a,#0x07
      0008CE 26               [12] 2079 	add	a,@r0
      0008CF FD               [12] 2080 	mov	r5,a
      0008D0 E4               [12] 2081 	clr	a
      0008D1 08               [12] 2082 	inc	r0
      0008D2 36               [12] 2083 	addc	a,@r0
      0008D3 FE               [12] 2084 	mov	r6,a
      0008D4 08               [12] 2085 	inc	r0
      0008D5 86 07            [24] 2086 	mov	ar7,@r0
      0008D7 8D 82            [24] 2087 	mov	dpl,r5
      0008D9 8E 83            [24] 2088 	mov	dph,r6
      0008DB 8F F0            [24] 2089 	mov	b,r7
      0008DD 12r00r00         [24] 2090 	lcall	__gptrget
      0008E0 FC               [12] 2091 	mov	r4,a
      0008E1 BC 23 03         [24] 2092 	cjne	r4,#0x23,01234$
      0008E4 02r1Er13         [24] 2093 	ljmp	00189$
      0008E7                       2094 01234$:
      0008E7 BC 25 03         [24] 2095 	cjne	r4,#0x25,01235$
      0008EA 02r1Er13         [24] 2096 	ljmp	00189$
      0008ED                       2097 01235$:
      0008ED BC 26 03         [24] 2098 	cjne	r4,#0x26,01236$
      0008F0 02r20rF9         [24] 2099 	ljmp	00202$
      0008F3                       2100 01236$:
      0008F3 BC 2A 03         [24] 2101 	cjne	r4,#0x2a,01237$
      0008F6 02r19r83         [24] 2102 	ljmp	00167$
      0008F9                       2103 01237$:
      0008F9 BC 2B 03         [24] 2104 	cjne	r4,#0x2b,01238$
      0008FC 02r16r84         [24] 2105 	ljmp	00153$
      0008FF                       2106 01238$:
      0008FF BC 2D 03         [24] 2107 	cjne	r4,#0x2d,01239$
      000902 02r18r03         [24] 2108 	ljmp	00160$
      000905                       2109 01239$:
      000905 BC 2E 03         [24] 2110 	cjne	r4,#0x2e,01240$
      000908 02r0Cr16         [24] 2111 	ljmp	00109$
      00090B                       2112 01240$:
      00090B BC 2F 03         [24] 2113 	cjne	r4,#0x2f,01241$
      00090E 02r1Br29         [24] 2114 	ljmp	00175$
      000911                       2115 01241$:
      000911 BC 3C 03         [24] 2116 	cjne	r4,#0x3c,01242$
      000914 02r29r14         [24] 2117 	ljmp	00237$
      000917                       2118 01242$:
      000917 BC 3E 03         [24] 2119 	cjne	r4,#0x3e,01243$
      00091A 02r25rC7         [24] 2120 	ljmp	00223$
      00091D                       2121 01243$:
      00091D BC 4D 03         [24] 2122 	cjne	r4,#0x4d,01244$
      000920 02r11r2A         [24] 2123 	ljmp	00127$
      000923                       2124 01244$:
      000923 BC 50 03         [24] 2125 	cjne	r4,#0x50,01245$
      000926 02r0Er0C         [24] 2126 	ljmp	00113$
      000929                       2127 01245$:
      000929 BC 54 03         [24] 2128 	cjne	r4,#0x54,01246$
      00092C 02r14r2C         [24] 2129 	ljmp	00145$
      00092F                       2130 01246$:
      00092F BC 55 03         [24] 2131 	cjne	r4,#0x55,01247$
      000932 02r13r45         [24] 2132 	ljmp	00139$
      000935                       2133 01247$:
      000935 BC 56 03         [24] 2134 	cjne	r4,#0x56,01248$
      000938 02r0Br75         [24] 2135 	ljmp	00105$
      00093B                       2136 01248$:
      00093B BC 58 03         [24] 2137 	cjne	r4,#0x58,01249$
      00093E 02r15rE5         [24] 2138 	ljmp	00152$
      000941                       2139 01249$:
      000941 BC 5C 03         [24] 2140 	cjne	r4,#0x5c,01250$
      000944 02r1Br29         [24] 2141 	ljmp	00175$
      000947                       2142 01250$:
      000947 BC 5D 03         [24] 2143 	cjne	r4,#0x5d,01251$
      00094A 02r27r65         [24] 2144 	ljmp	00230$
      00094D                       2145 01251$:
      00094D BC 5E 03         [24] 2146 	cjne	r4,#0x5e,01252$
      000950 02r24r2D         [24] 2147 	ljmp	00216$
      000953                       2148 01252$:
      000953 BC 6D 03         [24] 2149 	cjne	r4,#0x6d,01253$
      000956 02r0FrF6         [24] 2150 	ljmp	00121$
      000959                       2151 01253$:
      000959 BC 70 03         [24] 2152 	cjne	r4,#0x70,01254$
      00095C 02r0Cr16         [24] 2153 	ljmp	00109$
      00095F                       2154 01254$:
      00095F BC 75 03         [24] 2155 	cjne	r4,#0x75,01255$
      000962 02r12r5E         [24] 2156 	ljmp	00133$
      000965                       2157 01255$:
      000965 BC 76 02         [24] 2158 	cjne	r4,#0x76,01256$
      000968 80 15            [24] 2159 	sjmp	00101$
      00096A                       2160 01256$:
      00096A BC 78 03         [24] 2161 	cjne	r4,#0x78,01257$
      00096D 02r0Er55         [24] 2162 	ljmp	00114$
      000970                       2163 01257$:
      000970 BC 7C 03         [24] 2164 	cjne	r4,#0x7c,01258$
      000973 02r22r93         [24] 2165 	ljmp	00209$
      000976                       2166 01258$:
      000976 BC 7E 03         [24] 2167 	cjne	r4,#0x7e,01259$
      000979 02r2ArB7         [24] 2168 	ljmp	00244$
      00097C                       2169 01259$:
      00097C 02r2Br90         [24] 2170 	ljmp	00248$
                                   2171 ;	calc.c:133: case 'v':
      00097F                       2172 00101$:
                                   2173 ;	calc.c:134: printstr("\r\n");
      00097F 7Fr17            [12] 2174 	mov	r7,#___str_3
      000981 7Es00            [12] 2175 	mov	r6,#(___str_3 >> 8)
      000983 7D 80            [12] 2176 	mov	r5,#0x80
                                   2177 ;	calc.c:51: return;
      000985                       2178 00353$:
                                   2179 ;	calc.c:49: for (; *s; s++) putchar(*s);
      000985 8F 82            [24] 2180 	mov	dpl,r7
      000987 8E 83            [24] 2181 	mov	dph,r6
      000989 8D F0            [24] 2182 	mov	b,r5
      00098B 12r00r00         [24] 2183 	lcall	__gptrget
      00098E FC               [12] 2184 	mov	r4,a
      00098F 60 10            [24] 2185 	jz	00251$
      000991 7B 00            [12] 2186 	mov	r3,#0x00
      000993 8C 82            [24] 2187 	mov	dpl,r4
      000995 8B 83            [24] 2188 	mov	dph,r3
      000997 12r00r00         [24] 2189 	lcall	_putchar
      00099A 0F               [12] 2190 	inc	r7
                                   2191 ;	calc.c:134: printstr("\r\n");
      00099B BF 00 E7         [24] 2192 	cjne	r7,#0x00,00353$
      00099E 0E               [12] 2193 	inc	r6
      00099F 80 E4            [24] 2194 	sjmp	00353$
      0009A1                       2195 00251$:
                                   2196 ;	calc.c:135: if (!stack_peek(ctx->ps, &d0)) printstr("stack underflow\r\n");
      0009A1 E5*00            [12] 2197 	mov	a,_bp
      0009A3 24 15            [12] 2198 	add	a,#0x15
      0009A5 FF               [12] 2199 	mov	r7,a
      0009A6 7E 00            [12] 2200 	mov	r6,#0x00
      0009A8 7D 40            [12] 2201 	mov	r5,#0x40
      0009AA E5*00            [12] 2202 	mov	a,_bp
      0009AC 24 12            [12] 2203 	add	a,#0x12
      0009AE F8               [12] 2204 	mov	r0,a
      0009AF 74 13            [12] 2205 	mov	a,#0x13
      0009B1 26               [12] 2206 	add	a,@r0
      0009B2 FA               [12] 2207 	mov	r2,a
      0009B3 ED               [12] 2208 	mov	a,r5
      0009B4 08               [12] 2209 	inc	r0
      0009B5 36               [12] 2210 	addc	a,@r0
      0009B6 FB               [12] 2211 	mov	r3,a
      0009B7 08               [12] 2212 	inc	r0
      0009B8 86 04            [24] 2213 	mov	ar4,@r0
      0009BA 8A 82            [24] 2214 	mov	dpl,r2
      0009BC 8B 83            [24] 2215 	mov	dph,r3
      0009BE 8C F0            [24] 2216 	mov	b,r4
      0009C0 12r00r00         [24] 2217 	lcall	__gptrget
      0009C3 FA               [12] 2218 	mov	r2,a
      0009C4 A3               [24] 2219 	inc	dptr
      0009C5 12r00r00         [24] 2220 	lcall	__gptrget
      0009C8 FB               [12] 2221 	mov	r3,a
      0009C9 A3               [24] 2222 	inc	dptr
      0009CA 12r00r00         [24] 2223 	lcall	__gptrget
      0009CD FC               [12] 2224 	mov	r4,a
      0009CE C0 07            [24] 2225 	push	ar7
      0009D0 C0 06            [24] 2226 	push	ar6
      0009D2 C0 05            [24] 2227 	push	ar5
      0009D4 8A 82            [24] 2228 	mov	dpl,r2
      0009D6 8B 83            [24] 2229 	mov	dph,r3
      0009D8 8C F0            [24] 2230 	mov	b,r4
      0009DA 12r00r00         [24] 2231 	lcall	_stack_peek
      0009DD AB 82            [24] 2232 	mov	r3,dpl
      0009DF AC 83            [24] 2233 	mov	r4,dph
      0009E1 15 81            [12] 2234 	dec	sp
      0009E3 15 81            [12] 2235 	dec	sp
      0009E5 15 81            [12] 2236 	dec	sp
      0009E7 EB               [12] 2237 	mov	a,r3
      0009E8 4C               [12] 2238 	orl	a,r4
      0009E9 70 25            [24] 2239 	jnz	00103$
      0009EB 7Fr1A            [12] 2240 	mov	r7,#___str_4
      0009ED 7Es00            [12] 2241 	mov	r6,#(___str_4 >> 8)
      0009EF 7D 80            [12] 2242 	mov	r5,#0x80
                                   2243 ;	calc.c:51: return;
      0009F1                       2244 00356$:
                                   2245 ;	calc.c:49: for (; *s; s++) putchar(*s);
      0009F1 8F 82            [24] 2246 	mov	dpl,r7
      0009F3 8E 83            [24] 2247 	mov	dph,r6
      0009F5 8D F0            [24] 2248 	mov	b,r5
      0009F7 12r00r00         [24] 2249 	lcall	__gptrget
      0009FA FC               [12] 2250 	mov	r4,a
      0009FB 70 03            [24] 2251 	jnz	01263$
      0009FD 02r2Br95         [24] 2252 	ljmp	00249$
      000A00                       2253 01263$:
      000A00 7B 00            [12] 2254 	mov	r3,#0x00
      000A02 8C 82            [24] 2255 	mov	dpl,r4
      000A04 8B 83            [24] 2256 	mov	dph,r3
      000A06 12r00r00         [24] 2257 	lcall	_putchar
      000A09 0F               [12] 2258 	inc	r7
                                   2259 ;	calc.c:135: if (!stack_peek(ctx->ps, &d0)) printstr("stack underflow\r\n");
      000A0A BF 00 E4         [24] 2260 	cjne	r7,#0x00,00356$
      000A0D 0E               [12] 2261 	inc	r6
      000A0E 80 E1            [24] 2262 	sjmp	00356$
      000A10                       2263 00103$:
                                   2264 ;	calc.c:137: printstr("PSVTOP\t");
      000A10 7Fr3E            [12] 2265 	mov	r7,#___str_8
      000A12 7Es00            [12] 2266 	mov	r6,#(___str_8 >> 8)
      000A14 7D 80            [12] 2267 	mov	r5,#0x80
                                   2268 ;	calc.c:51: return;
      000A16                       2269 00359$:
                                   2270 ;	calc.c:49: for (; *s; s++) putchar(*s);
      000A16 8F 82            [24] 2271 	mov	dpl,r7
      000A18 8E 83            [24] 2272 	mov	dph,r6
      000A1A 8D F0            [24] 2273 	mov	b,r5
      000A1C 12r00r00         [24] 2274 	lcall	__gptrget
      000A1F FC               [12] 2275 	mov	r4,a
      000A20 60 10            [24] 2276 	jz	00255$
      000A22 7B 00            [12] 2277 	mov	r3,#0x00
      000A24 8C 82            [24] 2278 	mov	dpl,r4
      000A26 8B 83            [24] 2279 	mov	dph,r3
      000A28 12r00r00         [24] 2280 	lcall	_putchar
      000A2B 0F               [12] 2281 	inc	r7
                                   2282 ;	calc.c:137: printstr("PSVTOP\t");
      000A2C BF 00 E7         [24] 2283 	cjne	r7,#0x00,00359$
      000A2F 0E               [12] 2284 	inc	r6
      000A30 80 E4            [24] 2285 	sjmp	00359$
      000A32                       2286 00255$:
                                   2287 ;	calc.c:138: printall(d0);
      000A32 E5*00            [12] 2288 	mov	a,_bp
      000A34 24 15            [12] 2289 	add	a,#0x15
      000A36 F8               [12] 2290 	mov	r0,a
      000A37 86 07            [24] 2291 	mov	ar7,@r0
      000A39 08               [12] 2292 	inc	r0
      000A3A 86 06            [24] 2293 	mov	ar6,@r0
      000A3C 08               [12] 2294 	inc	r0
      000A3D 86 05            [24] 2295 	mov	ar5,@r0
      000A3F 08               [12] 2296 	inc	r0
      000A40 86 04            [24] 2297 	mov	ar4,@r0
      000A42 E5*00            [12] 2298 	mov	a,_bp
      000A44 24 1D            [12] 2299 	add	a,#0x1d
      000A46 F8               [12] 2300 	mov	r0,a
      000A47 A6 07            [24] 2301 	mov	@r0,ar7
      000A49 08               [12] 2302 	inc	r0
      000A4A A6 06            [24] 2303 	mov	@r0,ar6
      000A4C 08               [12] 2304 	inc	r0
      000A4D A6 05            [24] 2305 	mov	@r0,ar5
      000A4F 08               [12] 2306 	inc	r0
      000A50 A6 04            [24] 2307 	mov	@r0,ar4
                                   2308 ;	calc.c:64: printf("%08lx\t", d);
      000A52 C0 07            [24] 2309 	push	ar7
      000A54 C0 06            [24] 2310 	push	ar6
      000A56 C0 05            [24] 2311 	push	ar5
      000A58 C0 04            [24] 2312 	push	ar4
      000A5A 74r00            [12] 2313 	mov	a,#___str_0
      000A5C C0 E0            [24] 2314 	push	acc
      000A5E 74s00            [12] 2315 	mov	a,#(___str_0 >> 8)
      000A60 C0 E0            [24] 2316 	push	acc
      000A62 74 80            [12] 2317 	mov	a,#0x80
      000A64 C0 E0            [24] 2318 	push	acc
      000A66 12r00r00         [24] 2319 	lcall	_printf
      000A69 E5 81            [12] 2320 	mov	a,sp
      000A6B 24 F9            [12] 2321 	add	a,#0xf9
      000A6D F5 81            [12] 2322 	mov	sp,a
                                   2323 ;	calc.c:65: printf("% 11ld\t", d);
      000A6F E5*00            [12] 2324 	mov	a,_bp
      000A71 24 1D            [12] 2325 	add	a,#0x1d
      000A73 F8               [12] 2326 	mov	r0,a
      000A74 E6               [12] 2327 	mov	a,@r0
      000A75 C0 E0            [24] 2328 	push	acc
      000A77 08               [12] 2329 	inc	r0
      000A78 E6               [12] 2330 	mov	a,@r0
      000A79 C0 E0            [24] 2331 	push	acc
      000A7B 08               [12] 2332 	inc	r0
      000A7C E6               [12] 2333 	mov	a,@r0
      000A7D C0 E0            [24] 2334 	push	acc
      000A7F 08               [12] 2335 	inc	r0
      000A80 E6               [12] 2336 	mov	a,@r0
      000A81 C0 E0            [24] 2337 	push	acc
      000A83 74r07            [12] 2338 	mov	a,#___str_1
      000A85 C0 E0            [24] 2339 	push	acc
      000A87 74s00            [12] 2340 	mov	a,#(___str_1 >> 8)
      000A89 C0 E0            [24] 2341 	push	acc
      000A8B 74 80            [12] 2342 	mov	a,#0x80
      000A8D C0 E0            [24] 2343 	push	acc
      000A8F 12r00r00         [24] 2344 	lcall	_printf
      000A92 E5 81            [12] 2345 	mov	a,sp
      000A94 24 F9            [12] 2346 	add	a,#0xf9
      000A96 F5 81            [12] 2347 	mov	sp,a
                                   2348 ;	calc.c:66: printf("%011lo\t", d);
      000A98 E5*00            [12] 2349 	mov	a,_bp
      000A9A 24 1D            [12] 2350 	add	a,#0x1d
      000A9C F8               [12] 2351 	mov	r0,a
      000A9D E6               [12] 2352 	mov	a,@r0
      000A9E C0 E0            [24] 2353 	push	acc
      000AA0 08               [12] 2354 	inc	r0
      000AA1 E6               [12] 2355 	mov	a,@r0
      000AA2 C0 E0            [24] 2356 	push	acc
      000AA4 08               [12] 2357 	inc	r0
      000AA5 E6               [12] 2358 	mov	a,@r0
      000AA6 C0 E0            [24] 2359 	push	acc
      000AA8 08               [12] 2360 	inc	r0
      000AA9 E6               [12] 2361 	mov	a,@r0
      000AAA C0 E0            [24] 2362 	push	acc
      000AAC 74r0F            [12] 2363 	mov	a,#___str_2
      000AAE C0 E0            [24] 2364 	push	acc
      000AB0 74s00            [12] 2365 	mov	a,#(___str_2 >> 8)
      000AB2 C0 E0            [24] 2366 	push	acc
      000AB4 74 80            [12] 2367 	mov	a,#0x80
      000AB6 C0 E0            [24] 2368 	push	acc
      000AB8 12r00r00         [24] 2369 	lcall	_printf
      000ABB E5 81            [12] 2370 	mov	a,sp
      000ABD 24 F9            [12] 2371 	add	a,#0xf9
      000ABF F5 81            [12] 2372 	mov	sp,a
                                   2373 ;	calc.c:67: printbin(d);
      000AC1 E5*00            [12] 2374 	mov	a,_bp
      000AC3 24 1D            [12] 2375 	add	a,#0x1d
      000AC5 F8               [12] 2376 	mov	r0,a
      000AC6 86 07            [24] 2377 	mov	ar7,@r0
      000AC8 08               [12] 2378 	inc	r0
      000AC9 86 06            [24] 2379 	mov	ar6,@r0
      000ACB 08               [12] 2380 	inc	r0
      000ACC 86 05            [24] 2381 	mov	ar5,@r0
      000ACE 08               [12] 2382 	inc	r0
      000ACF 86 02            [24] 2383 	mov	ar2,@r0
                                   2384 ;	calc.c:57: for (mask = 0x80000000lu; mask; mask >>= 1)
      000AD1 E5*00            [12] 2385 	mov	a,_bp
      000AD3 24 21            [12] 2386 	add	a,#0x21
      000AD5 F8               [12] 2387 	mov	r0,a
      000AD6 E4               [12] 2388 	clr	a
      000AD7 F6               [12] 2389 	mov	@r0,a
      000AD8 08               [12] 2390 	inc	r0
      000AD9 F6               [12] 2391 	mov	@r0,a
      000ADA 08               [12] 2392 	inc	r0
      000ADB F6               [12] 2393 	mov	@r0,a
      000ADC 08               [12] 2394 	inc	r0
      000ADD 76 80            [12] 2395 	mov	@r0,#0x80
      000ADF                       2396 00361$:
                                   2397 ;	calc.c:58: (void)putchar((d & mask) ? (int)'1' : (int)'0');
      000ADF E5*00            [12] 2398 	mov	a,_bp
      000AE1 24 07            [12] 2399 	add	a,#0x07
      000AE3 F8               [12] 2400 	mov	r0,a
      000AE4 A6 07            [24] 2401 	mov	@r0,ar7
      000AE6 08               [12] 2402 	inc	r0
      000AE7 A6 06            [24] 2403 	mov	@r0,ar6
      000AE9 08               [12] 2404 	inc	r0
      000AEA A6 05            [24] 2405 	mov	@r0,ar5
      000AEC 08               [12] 2406 	inc	r0
      000AED A6 02            [24] 2407 	mov	@r0,ar2
      000AEF E5*00            [12] 2408 	mov	a,_bp
      000AF1 24 07            [12] 2409 	add	a,#0x07
      000AF3 F8               [12] 2410 	mov	r0,a
      000AF4 E5*00            [12] 2411 	mov	a,_bp
      000AF6 24 21            [12] 2412 	add	a,#0x21
      000AF8 F9               [12] 2413 	mov	r1,a
      000AF9 E7               [12] 2414 	mov	a,@r1
      000AFA 56               [12] 2415 	anl	a,@r0
      000AFB F6               [12] 2416 	mov	@r0,a
      000AFC 09               [12] 2417 	inc	r1
      000AFD E7               [12] 2418 	mov	a,@r1
      000AFE 08               [12] 2419 	inc	r0
      000AFF 56               [12] 2420 	anl	a,@r0
      000B00 F6               [12] 2421 	mov	@r0,a
      000B01 09               [12] 2422 	inc	r1
      000B02 E7               [12] 2423 	mov	a,@r1
      000B03 08               [12] 2424 	inc	r0
      000B04 56               [12] 2425 	anl	a,@r0
      000B05 F6               [12] 2426 	mov	@r0,a
      000B06 09               [12] 2427 	inc	r1
      000B07 E7               [12] 2428 	mov	a,@r1
      000B08 08               [12] 2429 	inc	r0
      000B09 56               [12] 2430 	anl	a,@r0
      000B0A F6               [12] 2431 	mov	@r0,a
      000B0B E5*00            [12] 2432 	mov	a,_bp
      000B0D 24 07            [12] 2433 	add	a,#0x07
      000B0F F8               [12] 2434 	mov	r0,a
      000B10 E6               [12] 2435 	mov	a,@r0
      000B11 08               [12] 2436 	inc	r0
      000B12 46               [12] 2437 	orl	a,@r0
      000B13 08               [12] 2438 	inc	r0
      000B14 46               [12] 2439 	orl	a,@r0
      000B15 08               [12] 2440 	inc	r0
      000B16 46               [12] 2441 	orl	a,@r0
      000B17 60 06            [24] 2442 	jz	00502$
      000B19 7B 31            [12] 2443 	mov	r3,#0x31
      000B1B 7C 00            [12] 2444 	mov	r4,#0x00
      000B1D 80 04            [24] 2445 	sjmp	00503$
      000B1F                       2446 00502$:
      000B1F 7B 30            [12] 2447 	mov	r3,#0x30
      000B21 7C 00            [12] 2448 	mov	r4,#0x00
      000B23                       2449 00503$:
      000B23 8B 82            [24] 2450 	mov	dpl,r3
      000B25 8C 83            [24] 2451 	mov	dph,r4
      000B27 12r00r00         [24] 2452 	lcall	_putchar
                                   2453 ;	calc.c:57: for (mask = 0x80000000lu; mask; mask >>= 1)
      000B2A E5*00            [12] 2454 	mov	a,_bp
      000B2C 24 21            [12] 2455 	add	a,#0x21
      000B2E F8               [12] 2456 	mov	r0,a
      000B2F 08               [12] 2457 	inc	r0
      000B30 08               [12] 2458 	inc	r0
      000B31 08               [12] 2459 	inc	r0
      000B32 E6               [12] 2460 	mov	a,@r0
      000B33 C3               [12] 2461 	clr	c
      000B34 13               [12] 2462 	rrc	a
      000B35 F6               [12] 2463 	mov	@r0,a
      000B36 18               [12] 2464 	dec	r0
      000B37 E6               [12] 2465 	mov	a,@r0
      000B38 13               [12] 2466 	rrc	a
      000B39 F6               [12] 2467 	mov	@r0,a
      000B3A 18               [12] 2468 	dec	r0
      000B3B E6               [12] 2469 	mov	a,@r0
      000B3C 13               [12] 2470 	rrc	a
      000B3D F6               [12] 2471 	mov	@r0,a
      000B3E 18               [12] 2472 	dec	r0
      000B3F E6               [12] 2473 	mov	a,@r0
      000B40 13               [12] 2474 	rrc	a
      000B41 F6               [12] 2475 	mov	@r0,a
      000B42 E5*00            [12] 2476 	mov	a,_bp
      000B44 24 21            [12] 2477 	add	a,#0x21
      000B46 F8               [12] 2478 	mov	r0,a
      000B47 E6               [12] 2479 	mov	a,@r0
      000B48 08               [12] 2480 	inc	r0
      000B49 46               [12] 2481 	orl	a,@r0
      000B4A 08               [12] 2482 	inc	r0
      000B4B 46               [12] 2483 	orl	a,@r0
      000B4C 08               [12] 2484 	inc	r0
      000B4D 46               [12] 2485 	orl	a,@r0
      000B4E 70 8F            [24] 2486 	jnz	00361$
                                   2487 ;	calc.c:139: printstr("\r\n");
      000B50 7Fr17            [12] 2488 	mov	r7,#___str_3
      000B52 7Es00            [12] 2489 	mov	r6,#(___str_3 >> 8)
      000B54 7D 80            [12] 2490 	mov	r5,#0x80
                                   2491 ;	calc.c:51: return;
      000B56                       2492 00364$:
                                   2493 ;	calc.c:49: for (; *s; s++) putchar(*s);
      000B56 8F 82            [24] 2494 	mov	dpl,r7
      000B58 8E 83            [24] 2495 	mov	dph,r6
      000B5A 8D F0            [24] 2496 	mov	b,r5
      000B5C 12r00r00         [24] 2497 	lcall	__gptrget
      000B5F FC               [12] 2498 	mov	r4,a
      000B60 70 03            [24] 2499 	jnz	01269$
      000B62 02r2Br95         [24] 2500 	ljmp	00249$
      000B65                       2501 01269$:
      000B65 7B 00            [12] 2502 	mov	r3,#0x00
      000B67 8C 82            [24] 2503 	mov	dpl,r4
      000B69 8B 83            [24] 2504 	mov	dph,r3
      000B6B 12r00r00         [24] 2505 	lcall	_putchar
      000B6E 0F               [12] 2506 	inc	r7
                                   2507 ;	calc.c:142: case 'V':
      000B6F BF 00 E4         [24] 2508 	cjne	r7,#0x00,00364$
      000B72 0E               [12] 2509 	inc	r6
      000B73 80 E1            [24] 2510 	sjmp	00364$
      000B75                       2511 00105$:
                                   2512 ;	calc.c:143: printstr("\r\n");
      000B75 7Fr17            [12] 2513 	mov	r7,#___str_3
      000B77 7Es00            [12] 2514 	mov	r6,#(___str_3 >> 8)
      000B79 7D 80            [12] 2515 	mov	r5,#0x80
                                   2516 ;	calc.c:51: return;
      000B7B                       2517 00367$:
                                   2518 ;	calc.c:49: for (; *s; s++) putchar(*s);
      000B7B 8F 82            [24] 2519 	mov	dpl,r7
      000B7D 8E 83            [24] 2520 	mov	dph,r6
      000B7F 8D F0            [24] 2521 	mov	b,r5
      000B81 12r00r00         [24] 2522 	lcall	__gptrget
      000B84 FC               [12] 2523 	mov	r4,a
      000B85 60 10            [24] 2524 	jz	00262$
      000B87 7B 00            [12] 2525 	mov	r3,#0x00
      000B89 8C 82            [24] 2526 	mov	dpl,r4
      000B8B 8B 83            [24] 2527 	mov	dph,r3
      000B8D 12r00r00         [24] 2528 	lcall	_putchar
      000B90 0F               [12] 2529 	inc	r7
                                   2530 ;	calc.c:143: printstr("\r\n");
      000B91 BF 00 E7         [24] 2531 	cjne	r7,#0x00,00367$
      000B94 0E               [12] 2532 	inc	r6
      000B95 80 E4            [24] 2533 	sjmp	00367$
      000B97                       2534 00262$:
                                   2535 ;	calc.c:144: if (!stack_iter_peek(ctx->ps, dump_peek, ctx)) printstr("stack underflow\r\n");
      000B97 E5*00            [12] 2536 	mov	a,_bp
      000B99 24 12            [12] 2537 	add	a,#0x12
      000B9B F8               [12] 2538 	mov	r0,a
      000B9C 86 07            [24] 2539 	mov	ar7,@r0
      000B9E 08               [12] 2540 	inc	r0
      000B9F 86 06            [24] 2541 	mov	ar6,@r0
      000BA1 08               [12] 2542 	inc	r0
      000BA2 86 05            [24] 2543 	mov	ar5,@r0
      000BA4 E5*00            [12] 2544 	mov	a,_bp
      000BA6 24 12            [12] 2545 	add	a,#0x12
      000BA8 F8               [12] 2546 	mov	r0,a
      000BA9 74 13            [12] 2547 	mov	a,#0x13
      000BAB 26               [12] 2548 	add	a,@r0
      000BAC FA               [12] 2549 	mov	r2,a
      000BAD 74 40            [12] 2550 	mov	a,#0x40
      000BAF 08               [12] 2551 	inc	r0
      000BB0 36               [12] 2552 	addc	a,@r0
      000BB1 FB               [12] 2553 	mov	r3,a
      000BB2 08               [12] 2554 	inc	r0
      000BB3 86 04            [24] 2555 	mov	ar4,@r0
      000BB5 8A 82            [24] 2556 	mov	dpl,r2
      000BB7 8B 83            [24] 2557 	mov	dph,r3
      000BB9 8C F0            [24] 2558 	mov	b,r4
      000BBB 12r00r00         [24] 2559 	lcall	__gptrget
      000BBE FA               [12] 2560 	mov	r2,a
      000BBF A3               [24] 2561 	inc	dptr
      000BC0 12r00r00         [24] 2562 	lcall	__gptrget
      000BC3 FB               [12] 2563 	mov	r3,a
      000BC4 A3               [24] 2564 	inc	dptr
      000BC5 12r00r00         [24] 2565 	lcall	__gptrget
      000BC8 FC               [12] 2566 	mov	r4,a
      000BC9 C0 07            [24] 2567 	push	ar7
      000BCB C0 06            [24] 2568 	push	ar6
      000BCD C0 05            [24] 2569 	push	ar5
      000BCF 74r3B            [12] 2570 	mov	a,#_dump_peek
      000BD1 C0 E0            [24] 2571 	push	acc
      000BD3 74s07            [12] 2572 	mov	a,#(_dump_peek >> 8)
      000BD5 C0 E0            [24] 2573 	push	acc
      000BD7 8A 82            [24] 2574 	mov	dpl,r2
      000BD9 8B 83            [24] 2575 	mov	dph,r3
      000BDB 8C F0            [24] 2576 	mov	b,r4
      000BDD 12r00r00         [24] 2577 	lcall	_stack_iter_peek
      000BE0 AB 82            [24] 2578 	mov	r3,dpl
      000BE2 AC 83            [24] 2579 	mov	r4,dph
      000BE4 E5 81            [12] 2580 	mov	a,sp
      000BE6 24 FB            [12] 2581 	add	a,#0xfb
      000BE8 F5 81            [12] 2582 	mov	sp,a
      000BEA EB               [12] 2583 	mov	a,r3
      000BEB 4C               [12] 2584 	orl	a,r4
      000BEC 60 03            [24] 2585 	jz	01273$
      000BEE 02r2Br95         [24] 2586 	ljmp	00249$
      000BF1                       2587 01273$:
      000BF1 7Fr1A            [12] 2588 	mov	r7,#___str_4
      000BF3 7Es00            [12] 2589 	mov	r6,#(___str_4 >> 8)
      000BF5 7D 80            [12] 2590 	mov	r5,#0x80
                                   2591 ;	calc.c:51: return;
      000BF7                       2592 00370$:
                                   2593 ;	calc.c:49: for (; *s; s++) putchar(*s);
      000BF7 8F 82            [24] 2594 	mov	dpl,r7
      000BF9 8E 83            [24] 2595 	mov	dph,r6
      000BFB 8D F0            [24] 2596 	mov	b,r5
      000BFD 12r00r00         [24] 2597 	lcall	__gptrget
      000C00 FC               [12] 2598 	mov	r4,a
      000C01 70 03            [24] 2599 	jnz	01274$
      000C03 02r2Br95         [24] 2600 	ljmp	00249$
      000C06                       2601 01274$:
      000C06 7B 00            [12] 2602 	mov	r3,#0x00
      000C08 8C 82            [24] 2603 	mov	dpl,r4
      000C0A 8B 83            [24] 2604 	mov	dph,r3
      000C0C 12r00r00         [24] 2605 	lcall	_putchar
      000C0F 0F               [12] 2606 	inc	r7
                                   2607 ;	calc.c:147: case 'p':
      000C10 BF 00 E4         [24] 2608 	cjne	r7,#0x00,00370$
      000C13 0E               [12] 2609 	inc	r6
      000C14 80 E1            [24] 2610 	sjmp	00370$
      000C16                       2611 00109$:
                                   2612 ;	calc.c:148: printstr("\r\n");
      000C16 7Fr17            [12] 2613 	mov	r7,#___str_3
      000C18 7Es00            [12] 2614 	mov	r6,#(___str_3 >> 8)
      000C1A 7D 80            [12] 2615 	mov	r5,#0x80
                                   2616 ;	calc.c:51: return;
      000C1C                       2617 00373$:
                                   2618 ;	calc.c:49: for (; *s; s++) putchar(*s);
      000C1C 8F 82            [24] 2619 	mov	dpl,r7
      000C1E 8E 83            [24] 2620 	mov	dph,r6
      000C20 8D F0            [24] 2621 	mov	b,r5
      000C22 12r00r00         [24] 2622 	lcall	__gptrget
      000C25 FC               [12] 2623 	mov	r4,a
      000C26 60 10            [24] 2624 	jz	00266$
      000C28 7B 00            [12] 2625 	mov	r3,#0x00
      000C2A 8C 82            [24] 2626 	mov	dpl,r4
      000C2C 8B 83            [24] 2627 	mov	dph,r3
      000C2E 12r00r00         [24] 2628 	lcall	_putchar
      000C31 0F               [12] 2629 	inc	r7
                                   2630 ;	calc.c:148: printstr("\r\n");
      000C32 BF 00 E7         [24] 2631 	cjne	r7,#0x00,00373$
      000C35 0E               [12] 2632 	inc	r6
      000C36 80 E4            [24] 2633 	sjmp	00373$
      000C38                       2634 00266$:
                                   2635 ;	calc.c:149: if (!stack_pop(ctx->ps, &d0)) printstr("stack underflow\r\n");
      000C38 E5*00            [12] 2636 	mov	a,_bp
      000C3A 24 15            [12] 2637 	add	a,#0x15
      000C3C FF               [12] 2638 	mov	r7,a
      000C3D 7E 00            [12] 2639 	mov	r6,#0x00
      000C3F 7D 40            [12] 2640 	mov	r5,#0x40
      000C41 E5*00            [12] 2641 	mov	a,_bp
      000C43 24 12            [12] 2642 	add	a,#0x12
      000C45 F8               [12] 2643 	mov	r0,a
      000C46 74 13            [12] 2644 	mov	a,#0x13
      000C48 26               [12] 2645 	add	a,@r0
      000C49 FA               [12] 2646 	mov	r2,a
      000C4A ED               [12] 2647 	mov	a,r5
      000C4B 08               [12] 2648 	inc	r0
      000C4C 36               [12] 2649 	addc	a,@r0
      000C4D FB               [12] 2650 	mov	r3,a
      000C4E 08               [12] 2651 	inc	r0
      000C4F 86 04            [24] 2652 	mov	ar4,@r0
      000C51 8A 82            [24] 2653 	mov	dpl,r2
      000C53 8B 83            [24] 2654 	mov	dph,r3
      000C55 8C F0            [24] 2655 	mov	b,r4
      000C57 12r00r00         [24] 2656 	lcall	__gptrget
      000C5A FA               [12] 2657 	mov	r2,a
      000C5B A3               [24] 2658 	inc	dptr
      000C5C 12r00r00         [24] 2659 	lcall	__gptrget
      000C5F FB               [12] 2660 	mov	r3,a
      000C60 A3               [24] 2661 	inc	dptr
      000C61 12r00r00         [24] 2662 	lcall	__gptrget
      000C64 FC               [12] 2663 	mov	r4,a
      000C65 C0 07            [24] 2664 	push	ar7
      000C67 C0 06            [24] 2665 	push	ar6
      000C69 C0 05            [24] 2666 	push	ar5
      000C6B 8A 82            [24] 2667 	mov	dpl,r2
      000C6D 8B 83            [24] 2668 	mov	dph,r3
      000C6F 8C F0            [24] 2669 	mov	b,r4
      000C71 12r00r00         [24] 2670 	lcall	_stack_pop
      000C74 AB 82            [24] 2671 	mov	r3,dpl
      000C76 AC 83            [24] 2672 	mov	r4,dph
      000C78 15 81            [12] 2673 	dec	sp
      000C7A 15 81            [12] 2674 	dec	sp
      000C7C 15 81            [12] 2675 	dec	sp
      000C7E EB               [12] 2676 	mov	a,r3
      000C7F 4C               [12] 2677 	orl	a,r4
      000C80 70 25            [24] 2678 	jnz	00111$
      000C82 7Fr1A            [12] 2679 	mov	r7,#___str_4
      000C84 7Es00            [12] 2680 	mov	r6,#(___str_4 >> 8)
      000C86 7D 80            [12] 2681 	mov	r5,#0x80
                                   2682 ;	calc.c:51: return;
      000C88                       2683 00376$:
                                   2684 ;	calc.c:49: for (; *s; s++) putchar(*s);
      000C88 8F 82            [24] 2685 	mov	dpl,r7
      000C8A 8E 83            [24] 2686 	mov	dph,r6
      000C8C 8D F0            [24] 2687 	mov	b,r5
      000C8E 12r00r00         [24] 2688 	lcall	__gptrget
      000C91 FC               [12] 2689 	mov	r4,a
      000C92 70 03            [24] 2690 	jnz	01279$
      000C94 02r2Br95         [24] 2691 	ljmp	00249$
      000C97                       2692 01279$:
      000C97 7B 00            [12] 2693 	mov	r3,#0x00
      000C99 8C 82            [24] 2694 	mov	dpl,r4
      000C9B 8B 83            [24] 2695 	mov	dph,r3
      000C9D 12r00r00         [24] 2696 	lcall	_putchar
      000CA0 0F               [12] 2697 	inc	r7
                                   2698 ;	calc.c:149: if (!stack_pop(ctx->ps, &d0)) printstr("stack underflow\r\n");
      000CA1 BF 00 E4         [24] 2699 	cjne	r7,#0x00,00376$
      000CA4 0E               [12] 2700 	inc	r6
      000CA5 80 E1            [24] 2701 	sjmp	00376$
      000CA7                       2702 00111$:
                                   2703 ;	calc.c:151: printstr("PSPTOP\t");
      000CA7 7Fr46            [12] 2704 	mov	r7,#___str_9
      000CA9 7Es00            [12] 2705 	mov	r6,#(___str_9 >> 8)
      000CAB 7D 80            [12] 2706 	mov	r5,#0x80
                                   2707 ;	calc.c:51: return;
      000CAD                       2708 00379$:
                                   2709 ;	calc.c:49: for (; *s; s++) putchar(*s);
      000CAD 8F 82            [24] 2710 	mov	dpl,r7
      000CAF 8E 83            [24] 2711 	mov	dph,r6
      000CB1 8D F0            [24] 2712 	mov	b,r5
      000CB3 12r00r00         [24] 2713 	lcall	__gptrget
      000CB6 FC               [12] 2714 	mov	r4,a
      000CB7 60 10            [24] 2715 	jz	00270$
      000CB9 7B 00            [12] 2716 	mov	r3,#0x00
      000CBB 8C 82            [24] 2717 	mov	dpl,r4
      000CBD 8B 83            [24] 2718 	mov	dph,r3
      000CBF 12r00r00         [24] 2719 	lcall	_putchar
      000CC2 0F               [12] 2720 	inc	r7
                                   2721 ;	calc.c:151: printstr("PSPTOP\t");
      000CC3 BF 00 E7         [24] 2722 	cjne	r7,#0x00,00379$
      000CC6 0E               [12] 2723 	inc	r6
      000CC7 80 E4            [24] 2724 	sjmp	00379$
      000CC9                       2725 00270$:
                                   2726 ;	calc.c:152: printall(d0);
      000CC9 E5*00            [12] 2727 	mov	a,_bp
      000CCB 24 15            [12] 2728 	add	a,#0x15
      000CCD F8               [12] 2729 	mov	r0,a
      000CCE 86 07            [24] 2730 	mov	ar7,@r0
      000CD0 08               [12] 2731 	inc	r0
      000CD1 86 06            [24] 2732 	mov	ar6,@r0
      000CD3 08               [12] 2733 	inc	r0
      000CD4 86 05            [24] 2734 	mov	ar5,@r0
      000CD6 08               [12] 2735 	inc	r0
      000CD7 86 04            [24] 2736 	mov	ar4,@r0
      000CD9 E5*00            [12] 2737 	mov	a,_bp
      000CDB 24 1D            [12] 2738 	add	a,#0x1d
      000CDD F8               [12] 2739 	mov	r0,a
      000CDE A6 07            [24] 2740 	mov	@r0,ar7
      000CE0 08               [12] 2741 	inc	r0
      000CE1 A6 06            [24] 2742 	mov	@r0,ar6
      000CE3 08               [12] 2743 	inc	r0
      000CE4 A6 05            [24] 2744 	mov	@r0,ar5
      000CE6 08               [12] 2745 	inc	r0
      000CE7 A6 04            [24] 2746 	mov	@r0,ar4
                                   2747 ;	calc.c:64: printf("%08lx\t", d);
      000CE9 C0 07            [24] 2748 	push	ar7
      000CEB C0 06            [24] 2749 	push	ar6
      000CED C0 05            [24] 2750 	push	ar5
      000CEF C0 04            [24] 2751 	push	ar4
      000CF1 74r00            [12] 2752 	mov	a,#___str_0
      000CF3 C0 E0            [24] 2753 	push	acc
      000CF5 74s00            [12] 2754 	mov	a,#(___str_0 >> 8)
      000CF7 C0 E0            [24] 2755 	push	acc
      000CF9 74 80            [12] 2756 	mov	a,#0x80
      000CFB C0 E0            [24] 2757 	push	acc
      000CFD 12r00r00         [24] 2758 	lcall	_printf
      000D00 E5 81            [12] 2759 	mov	a,sp
      000D02 24 F9            [12] 2760 	add	a,#0xf9
      000D04 F5 81            [12] 2761 	mov	sp,a
                                   2762 ;	calc.c:65: printf("% 11ld\t", d);
      000D06 E5*00            [12] 2763 	mov	a,_bp
      000D08 24 1D            [12] 2764 	add	a,#0x1d
      000D0A F8               [12] 2765 	mov	r0,a
      000D0B E6               [12] 2766 	mov	a,@r0
      000D0C C0 E0            [24] 2767 	push	acc
      000D0E 08               [12] 2768 	inc	r0
      000D0F E6               [12] 2769 	mov	a,@r0
      000D10 C0 E0            [24] 2770 	push	acc
      000D12 08               [12] 2771 	inc	r0
      000D13 E6               [12] 2772 	mov	a,@r0
      000D14 C0 E0            [24] 2773 	push	acc
      000D16 08               [12] 2774 	inc	r0
      000D17 E6               [12] 2775 	mov	a,@r0
      000D18 C0 E0            [24] 2776 	push	acc
      000D1A 74r07            [12] 2777 	mov	a,#___str_1
      000D1C C0 E0            [24] 2778 	push	acc
      000D1E 74s00            [12] 2779 	mov	a,#(___str_1 >> 8)
      000D20 C0 E0            [24] 2780 	push	acc
      000D22 74 80            [12] 2781 	mov	a,#0x80
      000D24 C0 E0            [24] 2782 	push	acc
      000D26 12r00r00         [24] 2783 	lcall	_printf
      000D29 E5 81            [12] 2784 	mov	a,sp
      000D2B 24 F9            [12] 2785 	add	a,#0xf9
      000D2D F5 81            [12] 2786 	mov	sp,a
                                   2787 ;	calc.c:66: printf("%011lo\t", d);
      000D2F E5*00            [12] 2788 	mov	a,_bp
      000D31 24 1D            [12] 2789 	add	a,#0x1d
      000D33 F8               [12] 2790 	mov	r0,a
      000D34 E6               [12] 2791 	mov	a,@r0
      000D35 C0 E0            [24] 2792 	push	acc
      000D37 08               [12] 2793 	inc	r0
      000D38 E6               [12] 2794 	mov	a,@r0
      000D39 C0 E0            [24] 2795 	push	acc
      000D3B 08               [12] 2796 	inc	r0
      000D3C E6               [12] 2797 	mov	a,@r0
      000D3D C0 E0            [24] 2798 	push	acc
      000D3F 08               [12] 2799 	inc	r0
      000D40 E6               [12] 2800 	mov	a,@r0
      000D41 C0 E0            [24] 2801 	push	acc
      000D43 74r0F            [12] 2802 	mov	a,#___str_2
      000D45 C0 E0            [24] 2803 	push	acc
      000D47 74s00            [12] 2804 	mov	a,#(___str_2 >> 8)
      000D49 C0 E0            [24] 2805 	push	acc
      000D4B 74 80            [12] 2806 	mov	a,#0x80
      000D4D C0 E0            [24] 2807 	push	acc
      000D4F 12r00r00         [24] 2808 	lcall	_printf
      000D52 E5 81            [12] 2809 	mov	a,sp
      000D54 24 F9            [12] 2810 	add	a,#0xf9
      000D56 F5 81            [12] 2811 	mov	sp,a
                                   2812 ;	calc.c:67: printbin(d);
      000D58 E5*00            [12] 2813 	mov	a,_bp
      000D5A 24 1D            [12] 2814 	add	a,#0x1d
      000D5C F8               [12] 2815 	mov	r0,a
      000D5D 86 07            [24] 2816 	mov	ar7,@r0
      000D5F 08               [12] 2817 	inc	r0
      000D60 86 06            [24] 2818 	mov	ar6,@r0
      000D62 08               [12] 2819 	inc	r0
      000D63 86 05            [24] 2820 	mov	ar5,@r0
      000D65 08               [12] 2821 	inc	r0
      000D66 86 02            [24] 2822 	mov	ar2,@r0
                                   2823 ;	calc.c:57: for (mask = 0x80000000lu; mask; mask >>= 1)
      000D68 E5*00            [12] 2824 	mov	a,_bp
      000D6A 24 21            [12] 2825 	add	a,#0x21
      000D6C F8               [12] 2826 	mov	r0,a
      000D6D E4               [12] 2827 	clr	a
      000D6E F6               [12] 2828 	mov	@r0,a
      000D6F 08               [12] 2829 	inc	r0
      000D70 F6               [12] 2830 	mov	@r0,a
      000D71 08               [12] 2831 	inc	r0
      000D72 F6               [12] 2832 	mov	@r0,a
      000D73 08               [12] 2833 	inc	r0
      000D74 76 80            [12] 2834 	mov	@r0,#0x80
      000D76                       2835 00381$:
                                   2836 ;	calc.c:58: (void)putchar((d & mask) ? (int)'1' : (int)'0');
      000D76 E5*00            [12] 2837 	mov	a,_bp
      000D78 24 07            [12] 2838 	add	a,#0x07
      000D7A F8               [12] 2839 	mov	r0,a
      000D7B A6 07            [24] 2840 	mov	@r0,ar7
      000D7D 08               [12] 2841 	inc	r0
      000D7E A6 06            [24] 2842 	mov	@r0,ar6
      000D80 08               [12] 2843 	inc	r0
      000D81 A6 05            [24] 2844 	mov	@r0,ar5
      000D83 08               [12] 2845 	inc	r0
      000D84 A6 02            [24] 2846 	mov	@r0,ar2
      000D86 E5*00            [12] 2847 	mov	a,_bp
      000D88 24 07            [12] 2848 	add	a,#0x07
      000D8A F8               [12] 2849 	mov	r0,a
      000D8B E5*00            [12] 2850 	mov	a,_bp
      000D8D 24 21            [12] 2851 	add	a,#0x21
      000D8F F9               [12] 2852 	mov	r1,a
      000D90 E7               [12] 2853 	mov	a,@r1
      000D91 56               [12] 2854 	anl	a,@r0
      000D92 F6               [12] 2855 	mov	@r0,a
      000D93 09               [12] 2856 	inc	r1
      000D94 E7               [12] 2857 	mov	a,@r1
      000D95 08               [12] 2858 	inc	r0
      000D96 56               [12] 2859 	anl	a,@r0
      000D97 F6               [12] 2860 	mov	@r0,a
      000D98 09               [12] 2861 	inc	r1
      000D99 E7               [12] 2862 	mov	a,@r1
      000D9A 08               [12] 2863 	inc	r0
      000D9B 56               [12] 2864 	anl	a,@r0
      000D9C F6               [12] 2865 	mov	@r0,a
      000D9D 09               [12] 2866 	inc	r1
      000D9E E7               [12] 2867 	mov	a,@r1
      000D9F 08               [12] 2868 	inc	r0
      000DA0 56               [12] 2869 	anl	a,@r0
      000DA1 F6               [12] 2870 	mov	@r0,a
      000DA2 E5*00            [12] 2871 	mov	a,_bp
      000DA4 24 07            [12] 2872 	add	a,#0x07
      000DA6 F8               [12] 2873 	mov	r0,a
      000DA7 E6               [12] 2874 	mov	a,@r0
      000DA8 08               [12] 2875 	inc	r0
      000DA9 46               [12] 2876 	orl	a,@r0
      000DAA 08               [12] 2877 	inc	r0
      000DAB 46               [12] 2878 	orl	a,@r0
      000DAC 08               [12] 2879 	inc	r0
      000DAD 46               [12] 2880 	orl	a,@r0
      000DAE 60 06            [24] 2881 	jz	00504$
      000DB0 7B 31            [12] 2882 	mov	r3,#0x31
      000DB2 7C 00            [12] 2883 	mov	r4,#0x00
      000DB4 80 04            [24] 2884 	sjmp	00505$
      000DB6                       2885 00504$:
      000DB6 7B 30            [12] 2886 	mov	r3,#0x30
      000DB8 7C 00            [12] 2887 	mov	r4,#0x00
      000DBA                       2888 00505$:
      000DBA 8B 82            [24] 2889 	mov	dpl,r3
      000DBC 8C 83            [24] 2890 	mov	dph,r4
      000DBE 12r00r00         [24] 2891 	lcall	_putchar
                                   2892 ;	calc.c:57: for (mask = 0x80000000lu; mask; mask >>= 1)
      000DC1 E5*00            [12] 2893 	mov	a,_bp
      000DC3 24 21            [12] 2894 	add	a,#0x21
      000DC5 F8               [12] 2895 	mov	r0,a
      000DC6 08               [12] 2896 	inc	r0
      000DC7 08               [12] 2897 	inc	r0
      000DC8 08               [12] 2898 	inc	r0
      000DC9 E6               [12] 2899 	mov	a,@r0
      000DCA C3               [12] 2900 	clr	c
      000DCB 13               [12] 2901 	rrc	a
      000DCC F6               [12] 2902 	mov	@r0,a
      000DCD 18               [12] 2903 	dec	r0
      000DCE E6               [12] 2904 	mov	a,@r0
      000DCF 13               [12] 2905 	rrc	a
      000DD0 F6               [12] 2906 	mov	@r0,a
      000DD1 18               [12] 2907 	dec	r0
      000DD2 E6               [12] 2908 	mov	a,@r0
      000DD3 13               [12] 2909 	rrc	a
      000DD4 F6               [12] 2910 	mov	@r0,a
      000DD5 18               [12] 2911 	dec	r0
      000DD6 E6               [12] 2912 	mov	a,@r0
      000DD7 13               [12] 2913 	rrc	a
      000DD8 F6               [12] 2914 	mov	@r0,a
      000DD9 E5*00            [12] 2915 	mov	a,_bp
      000DDB 24 21            [12] 2916 	add	a,#0x21
      000DDD F8               [12] 2917 	mov	r0,a
      000DDE E6               [12] 2918 	mov	a,@r0
      000DDF 08               [12] 2919 	inc	r0
      000DE0 46               [12] 2920 	orl	a,@r0
      000DE1 08               [12] 2921 	inc	r0
      000DE2 46               [12] 2922 	orl	a,@r0
      000DE3 08               [12] 2923 	inc	r0
      000DE4 46               [12] 2924 	orl	a,@r0
      000DE5 70 8F            [24] 2925 	jnz	00381$
                                   2926 ;	calc.c:153: printstr("\r\n");
      000DE7 7Fr17            [12] 2927 	mov	r7,#___str_3
      000DE9 7Es00            [12] 2928 	mov	r6,#(___str_3 >> 8)
      000DEB 7D 80            [12] 2929 	mov	r5,#0x80
                                   2930 ;	calc.c:51: return;
      000DED                       2931 00384$:
                                   2932 ;	calc.c:49: for (; *s; s++) putchar(*s);
      000DED 8F 82            [24] 2933 	mov	dpl,r7
      000DEF 8E 83            [24] 2934 	mov	dph,r6
      000DF1 8D F0            [24] 2935 	mov	b,r5
      000DF3 12r00r00         [24] 2936 	lcall	__gptrget
      000DF6 FC               [12] 2937 	mov	r4,a
      000DF7 70 03            [24] 2938 	jnz	01285$
      000DF9 02r2Br95         [24] 2939 	ljmp	00249$
      000DFC                       2940 01285$:
      000DFC 7B 00            [12] 2941 	mov	r3,#0x00
      000DFE 8C 82            [24] 2942 	mov	dpl,r4
      000E00 8B 83            [24] 2943 	mov	dph,r3
      000E02 12r00r00         [24] 2944 	lcall	_putchar
      000E05 0F               [12] 2945 	inc	r7
                                   2946 ;	calc.c:156: case 'P':
      000E06 BF 00 E4         [24] 2947 	cjne	r7,#0x00,00384$
      000E09 0E               [12] 2948 	inc	r6
      000E0A 80 E1            [24] 2949 	sjmp	00384$
      000E0C                       2950 00113$:
                                   2951 ;	calc.c:157: printstr("\r\n");
      000E0C 7Fr17            [12] 2952 	mov	r7,#___str_3
      000E0E 7Es00            [12] 2953 	mov	r6,#(___str_3 >> 8)
      000E10 7D 80            [12] 2954 	mov	r5,#0x80
                                   2955 ;	calc.c:51: return;
      000E12                       2956 00387$:
                                   2957 ;	calc.c:49: for (; *s; s++) putchar(*s);
      000E12 8F 82            [24] 2958 	mov	dpl,r7
      000E14 8E 83            [24] 2959 	mov	dph,r6
      000E16 8D F0            [24] 2960 	mov	b,r5
      000E18 12r00r00         [24] 2961 	lcall	__gptrget
      000E1B FC               [12] 2962 	mov	r4,a
      000E1C 60 10            [24] 2963 	jz	00277$
      000E1E 7B 00            [12] 2964 	mov	r3,#0x00
      000E20 8C 82            [24] 2965 	mov	dpl,r4
      000E22 8B 83            [24] 2966 	mov	dph,r3
      000E24 12r00r00         [24] 2967 	lcall	_putchar
      000E27 0F               [12] 2968 	inc	r7
                                   2969 ;	calc.c:157: printstr("\r\n");
      000E28 BF 00 E7         [24] 2970 	cjne	r7,#0x00,00387$
      000E2B 0E               [12] 2971 	inc	r6
      000E2C 80 E4            [24] 2972 	sjmp	00387$
      000E2E                       2973 00277$:
                                   2974 ;	calc.c:158: (void)dump_pop(_ctx, delta);
      000E2E E5*00            [12] 2975 	mov	a,_bp
      000E30 24 FB            [12] 2976 	add	a,#0xfb
      000E32 F8               [12] 2977 	mov	r0,a
      000E33 E6               [12] 2978 	mov	a,@r0
      000E34 C0 E0            [24] 2979 	push	acc
      000E36 08               [12] 2980 	inc	r0
      000E37 E6               [12] 2981 	mov	a,@r0
      000E38 C0 E0            [24] 2982 	push	acc
      000E3A 08               [12] 2983 	inc	r0
      000E3B E6               [12] 2984 	mov	a,@r0
      000E3C C0 E0            [24] 2985 	push	acc
      000E3E A8*00            [24] 2986 	mov	r0,_bp
      000E40 08               [12] 2987 	inc	r0
      000E41 86 82            [24] 2988 	mov	dpl,@r0
      000E43 08               [12] 2989 	inc	r0
      000E44 86 83            [24] 2990 	mov	dph,@r0
      000E46 08               [12] 2991 	inc	r0
      000E47 86 F0            [24] 2992 	mov	b,@r0
      000E49 12r01r93         [24] 2993 	lcall	_dump_pop
      000E4C 15 81            [12] 2994 	dec	sp
      000E4E 15 81            [12] 2995 	dec	sp
      000E50 15 81            [12] 2996 	dec	sp
                                   2997 ;	calc.c:159: break;
      000E52 02r2Br95         [24] 2998 	ljmp	00249$
                                   2999 ;	calc.c:160: case 'x':
      000E55                       3000 00114$:
                                   3001 ;	calc.c:161: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      000E55 E5*00            [12] 3002 	mov	a,_bp
      000E57 24 15            [12] 3003 	add	a,#0x15
      000E59 FF               [12] 3004 	mov	r7,a
      000E5A 7E 00            [12] 3005 	mov	r6,#0x00
      000E5C 7D 40            [12] 3006 	mov	r5,#0x40
      000E5E E5*00            [12] 3007 	mov	a,_bp
      000E60 24 12            [12] 3008 	add	a,#0x12
      000E62 F8               [12] 3009 	mov	r0,a
      000E63 E5*00            [12] 3010 	mov	a,_bp
      000E65 24 07            [12] 3011 	add	a,#0x07
      000E67 F9               [12] 3012 	mov	r1,a
      000E68 74 13            [12] 3013 	mov	a,#0x13
      000E6A 26               [12] 3014 	add	a,@r0
      000E6B F7               [12] 3015 	mov	@r1,a
      000E6C 74 40            [12] 3016 	mov	a,#0x40
      000E6E 08               [12] 3017 	inc	r0
      000E6F 36               [12] 3018 	addc	a,@r0
      000E70 09               [12] 3019 	inc	r1
      000E71 F7               [12] 3020 	mov	@r1,a
      000E72 08               [12] 3021 	inc	r0
      000E73 09               [12] 3022 	inc	r1
      000E74 E6               [12] 3023 	mov	a,@r0
      000E75 F7               [12] 3024 	mov	@r1,a
      000E76 E5*00            [12] 3025 	mov	a,_bp
      000E78 24 07            [12] 3026 	add	a,#0x07
      000E7A F8               [12] 3027 	mov	r0,a
      000E7B 86 82            [24] 3028 	mov	dpl,@r0
      000E7D 08               [12] 3029 	inc	r0
      000E7E 86 83            [24] 3030 	mov	dph,@r0
      000E80 08               [12] 3031 	inc	r0
      000E81 86 F0            [24] 3032 	mov	b,@r0
      000E83 12r00r00         [24] 3033 	lcall	__gptrget
      000E86 FA               [12] 3034 	mov	r2,a
      000E87 A3               [24] 3035 	inc	dptr
      000E88 12r00r00         [24] 3036 	lcall	__gptrget
      000E8B FB               [12] 3037 	mov	r3,a
      000E8C A3               [24] 3038 	inc	dptr
      000E8D 12r00r00         [24] 3039 	lcall	__gptrget
      000E90 FC               [12] 3040 	mov	r4,a
      000E91 C0 07            [24] 3041 	push	ar7
      000E93 C0 06            [24] 3042 	push	ar6
      000E95 C0 05            [24] 3043 	push	ar5
      000E97 8A 82            [24] 3044 	mov	dpl,r2
      000E99 8B 83            [24] 3045 	mov	dph,r3
      000E9B 8C F0            [24] 3046 	mov	b,r4
      000E9D 12r00r00         [24] 3047 	lcall	_stack_pop
      000EA0 AB 82            [24] 3048 	mov	r3,dpl
      000EA2 AC 83            [24] 3049 	mov	r4,dph
      000EA4 15 81            [12] 3050 	dec	sp
      000EA6 15 81            [12] 3051 	dec	sp
      000EA8 15 81            [12] 3052 	dec	sp
      000EAA EB               [12] 3053 	mov	a,r3
      000EAB 4C               [12] 3054 	orl	a,r4
      000EAC 70 25            [24] 3055 	jnz	00119$
      000EAE 7Fr4E            [12] 3056 	mov	r7,#___str_10
      000EB0 7Es00            [12] 3057 	mov	r6,#(___str_10 >> 8)
      000EB2 7D 80            [12] 3058 	mov	r5,#0x80
                                   3059 ;	calc.c:51: return;
      000EB4                       3060 00390$:
                                   3061 ;	calc.c:49: for (; *s; s++) putchar(*s);
      000EB4 8F 82            [24] 3062 	mov	dpl,r7
      000EB6 8E 83            [24] 3063 	mov	dph,r6
      000EB8 8D F0            [24] 3064 	mov	b,r5
      000EBA 12r00r00         [24] 3065 	lcall	__gptrget
      000EBD FC               [12] 3066 	mov	r4,a
      000EBE 70 03            [24] 3067 	jnz	01290$
      000EC0 02r2Br95         [24] 3068 	ljmp	00249$
      000EC3                       3069 01290$:
      000EC3 7B 00            [12] 3070 	mov	r3,#0x00
      000EC5 8C 82            [24] 3071 	mov	dpl,r4
      000EC7 8B 83            [24] 3072 	mov	dph,r3
      000EC9 12r00r00         [24] 3073 	lcall	_putchar
      000ECC 0F               [12] 3074 	inc	r7
                                   3075 ;	calc.c:161: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      000ECD BF 00 E4         [24] 3076 	cjne	r7,#0x00,00390$
      000ED0 0E               [12] 3077 	inc	r6
      000ED1 80 E1            [24] 3078 	sjmp	00390$
      000ED3                       3079 00119$:
                                   3080 ;	calc.c:162: else if (!stack_pop(ctx->ps, &d1)) {
      000ED3 E5*00            [12] 3081 	mov	a,_bp
      000ED5 24 19            [12] 3082 	add	a,#0x19
      000ED7 FF               [12] 3083 	mov	r7,a
      000ED8 7E 00            [12] 3084 	mov	r6,#0x00
      000EDA 7D 40            [12] 3085 	mov	r5,#0x40
      000EDC E5*00            [12] 3086 	mov	a,_bp
      000EDE 24 07            [12] 3087 	add	a,#0x07
      000EE0 F8               [12] 3088 	mov	r0,a
      000EE1 86 82            [24] 3089 	mov	dpl,@r0
      000EE3 08               [12] 3090 	inc	r0
      000EE4 86 83            [24] 3091 	mov	dph,@r0
      000EE6 08               [12] 3092 	inc	r0
      000EE7 86 F0            [24] 3093 	mov	b,@r0
      000EE9 12r00r00         [24] 3094 	lcall	__gptrget
      000EEC FA               [12] 3095 	mov	r2,a
      000EED A3               [24] 3096 	inc	dptr
      000EEE 12r00r00         [24] 3097 	lcall	__gptrget
      000EF1 FB               [12] 3098 	mov	r3,a
      000EF2 A3               [24] 3099 	inc	dptr
      000EF3 12r00r00         [24] 3100 	lcall	__gptrget
      000EF6 FC               [12] 3101 	mov	r4,a
      000EF7 C0 07            [24] 3102 	push	ar7
      000EF9 C0 06            [24] 3103 	push	ar6
      000EFB C0 05            [24] 3104 	push	ar5
      000EFD 8A 82            [24] 3105 	mov	dpl,r2
      000EFF 8B 83            [24] 3106 	mov	dph,r3
      000F01 8C F0            [24] 3107 	mov	b,r4
      000F03 12r00r00         [24] 3108 	lcall	_stack_pop
      000F06 AB 82            [24] 3109 	mov	r3,dpl
      000F08 AC 83            [24] 3110 	mov	r4,dph
      000F0A 15 81            [12] 3111 	dec	sp
      000F0C 15 81            [12] 3112 	dec	sp
      000F0E 15 81            [12] 3113 	dec	sp
      000F10 EB               [12] 3114 	mov	a,r3
      000F11 4C               [12] 3115 	orl	a,r4
      000F12 70 63            [24] 3116 	jnz	00116$
                                   3117 ;	calc.c:163: (void)stack_push(ctx->ps, d0);
      000F14 E5*00            [12] 3118 	mov	a,_bp
      000F16 24 07            [12] 3119 	add	a,#0x07
      000F18 F8               [12] 3120 	mov	r0,a
      000F19 86 82            [24] 3121 	mov	dpl,@r0
      000F1B 08               [12] 3122 	inc	r0
      000F1C 86 83            [24] 3123 	mov	dph,@r0
      000F1E 08               [12] 3124 	inc	r0
      000F1F 86 F0            [24] 3125 	mov	b,@r0
      000F21 12r00r00         [24] 3126 	lcall	__gptrget
      000F24 FA               [12] 3127 	mov	r2,a
      000F25 A3               [24] 3128 	inc	dptr
      000F26 12r00r00         [24] 3129 	lcall	__gptrget
      000F29 FB               [12] 3130 	mov	r3,a
      000F2A A3               [24] 3131 	inc	dptr
      000F2B 12r00r00         [24] 3132 	lcall	__gptrget
      000F2E FC               [12] 3133 	mov	r4,a
      000F2F E5*00            [12] 3134 	mov	a,_bp
      000F31 24 15            [12] 3135 	add	a,#0x15
      000F33 F8               [12] 3136 	mov	r0,a
      000F34 E6               [12] 3137 	mov	a,@r0
      000F35 C0 E0            [24] 3138 	push	acc
      000F37 08               [12] 3139 	inc	r0
      000F38 E6               [12] 3140 	mov	a,@r0
      000F39 C0 E0            [24] 3141 	push	acc
      000F3B 08               [12] 3142 	inc	r0
      000F3C E6               [12] 3143 	mov	a,@r0
      000F3D C0 E0            [24] 3144 	push	acc
      000F3F 08               [12] 3145 	inc	r0
      000F40 E6               [12] 3146 	mov	a,@r0
      000F41 C0 E0            [24] 3147 	push	acc
      000F43 8A 82            [24] 3148 	mov	dpl,r2
      000F45 8B 83            [24] 3149 	mov	dph,r3
      000F47 8C F0            [24] 3150 	mov	b,r4
      000F49 12r00r00         [24] 3151 	lcall	_stack_push
      000F4C E5 81            [12] 3152 	mov	a,sp
      000F4E 24 FC            [12] 3153 	add	a,#0xfc
      000F50 F5 81            [12] 3154 	mov	sp,a
                                   3155 ;	calc.c:164: printstr("\r\nstack underflow\r\n");
      000F52 7Fr4E            [12] 3156 	mov	r7,#___str_10
      000F54 7Es00            [12] 3157 	mov	r6,#(___str_10 >> 8)
      000F56 7D 80            [12] 3158 	mov	r5,#0x80
                                   3159 ;	calc.c:51: return;
      000F58                       3160 00393$:
                                   3161 ;	calc.c:49: for (; *s; s++) putchar(*s);
      000F58 8F 82            [24] 3162 	mov	dpl,r7
      000F5A 8E 83            [24] 3163 	mov	dph,r6
      000F5C 8D F0            [24] 3164 	mov	b,r5
      000F5E 12r00r00         [24] 3165 	lcall	__gptrget
      000F61 FC               [12] 3166 	mov	r4,a
      000F62 70 03            [24] 3167 	jnz	01293$
      000F64 02r2Br95         [24] 3168 	ljmp	00249$
      000F67                       3169 01293$:
      000F67 7B 00            [12] 3170 	mov	r3,#0x00
      000F69 8C 82            [24] 3171 	mov	dpl,r4
      000F6B 8B 83            [24] 3172 	mov	dph,r3
      000F6D 12r00r00         [24] 3173 	lcall	_putchar
      000F70 0F               [12] 3174 	inc	r7
                                   3175 ;	calc.c:164: printstr("\r\nstack underflow\r\n");
      000F71 BF 00 E4         [24] 3176 	cjne	r7,#0x00,00393$
      000F74 0E               [12] 3177 	inc	r6
      000F75 80 E1            [24] 3178 	sjmp	00393$
      000F77                       3179 00116$:
                                   3180 ;	calc.c:166: (void)stack_push(ctx->ps, d0);
      000F77 E5*00            [12] 3181 	mov	a,_bp
      000F79 24 07            [12] 3182 	add	a,#0x07
      000F7B F8               [12] 3183 	mov	r0,a
      000F7C 86 82            [24] 3184 	mov	dpl,@r0
      000F7E 08               [12] 3185 	inc	r0
      000F7F 86 83            [24] 3186 	mov	dph,@r0
      000F81 08               [12] 3187 	inc	r0
      000F82 86 F0            [24] 3188 	mov	b,@r0
      000F84 12r00r00         [24] 3189 	lcall	__gptrget
      000F87 FA               [12] 3190 	mov	r2,a
      000F88 A3               [24] 3191 	inc	dptr
      000F89 12r00r00         [24] 3192 	lcall	__gptrget
      000F8C FB               [12] 3193 	mov	r3,a
      000F8D A3               [24] 3194 	inc	dptr
      000F8E 12r00r00         [24] 3195 	lcall	__gptrget
      000F91 FC               [12] 3196 	mov	r4,a
      000F92 E5*00            [12] 3197 	mov	a,_bp
      000F94 24 15            [12] 3198 	add	a,#0x15
      000F96 F8               [12] 3199 	mov	r0,a
      000F97 E6               [12] 3200 	mov	a,@r0
      000F98 C0 E0            [24] 3201 	push	acc
      000F9A 08               [12] 3202 	inc	r0
      000F9B E6               [12] 3203 	mov	a,@r0
      000F9C C0 E0            [24] 3204 	push	acc
      000F9E 08               [12] 3205 	inc	r0
      000F9F E6               [12] 3206 	mov	a,@r0
      000FA0 C0 E0            [24] 3207 	push	acc
      000FA2 08               [12] 3208 	inc	r0
      000FA3 E6               [12] 3209 	mov	a,@r0
      000FA4 C0 E0            [24] 3210 	push	acc
      000FA6 8A 82            [24] 3211 	mov	dpl,r2
      000FA8 8B 83            [24] 3212 	mov	dph,r3
      000FAA 8C F0            [24] 3213 	mov	b,r4
      000FAC 12r00r00         [24] 3214 	lcall	_stack_push
      000FAF E5 81            [12] 3215 	mov	a,sp
      000FB1 24 FC            [12] 3216 	add	a,#0xfc
      000FB3 F5 81            [12] 3217 	mov	sp,a
                                   3218 ;	calc.c:167: (void)stack_push(ctx->ps, d1);
      000FB5 E5*00            [12] 3219 	mov	a,_bp
      000FB7 24 07            [12] 3220 	add	a,#0x07
      000FB9 F8               [12] 3221 	mov	r0,a
      000FBA 86 82            [24] 3222 	mov	dpl,@r0
      000FBC 08               [12] 3223 	inc	r0
      000FBD 86 83            [24] 3224 	mov	dph,@r0
      000FBF 08               [12] 3225 	inc	r0
      000FC0 86 F0            [24] 3226 	mov	b,@r0
      000FC2 12r00r00         [24] 3227 	lcall	__gptrget
      000FC5 FA               [12] 3228 	mov	r2,a
      000FC6 A3               [24] 3229 	inc	dptr
      000FC7 12r00r00         [24] 3230 	lcall	__gptrget
      000FCA FB               [12] 3231 	mov	r3,a
      000FCB A3               [24] 3232 	inc	dptr
      000FCC 12r00r00         [24] 3233 	lcall	__gptrget
      000FCF FC               [12] 3234 	mov	r4,a
      000FD0 E5*00            [12] 3235 	mov	a,_bp
      000FD2 24 19            [12] 3236 	add	a,#0x19
      000FD4 F8               [12] 3237 	mov	r0,a
      000FD5 E6               [12] 3238 	mov	a,@r0
      000FD6 C0 E0            [24] 3239 	push	acc
      000FD8 08               [12] 3240 	inc	r0
      000FD9 E6               [12] 3241 	mov	a,@r0
      000FDA C0 E0            [24] 3242 	push	acc
      000FDC 08               [12] 3243 	inc	r0
      000FDD E6               [12] 3244 	mov	a,@r0
      000FDE C0 E0            [24] 3245 	push	acc
      000FE0 08               [12] 3246 	inc	r0
      000FE1 E6               [12] 3247 	mov	a,@r0
      000FE2 C0 E0            [24] 3248 	push	acc
      000FE4 8A 82            [24] 3249 	mov	dpl,r2
      000FE6 8B 83            [24] 3250 	mov	dph,r3
      000FE8 8C F0            [24] 3251 	mov	b,r4
      000FEA 12r00r00         [24] 3252 	lcall	_stack_push
      000FED E5 81            [12] 3253 	mov	a,sp
      000FEF 24 FC            [12] 3254 	add	a,#0xfc
      000FF1 F5 81            [12] 3255 	mov	sp,a
                                   3256 ;	calc.c:169: break;
      000FF3 02r2Br95         [24] 3257 	ljmp	00249$
                                   3258 ;	calc.c:170: case 'm':
      000FF6                       3259 00121$:
                                   3260 ;	calc.c:171: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      000FF6 E5*00            [12] 3261 	mov	a,_bp
      000FF8 24 15            [12] 3262 	add	a,#0x15
      000FFA FF               [12] 3263 	mov	r7,a
      000FFB 7E 00            [12] 3264 	mov	r6,#0x00
      000FFD 7D 40            [12] 3265 	mov	r5,#0x40
      000FFF E5*00            [12] 3266 	mov	a,_bp
      001001 24 12            [12] 3267 	add	a,#0x12
      001003 F8               [12] 3268 	mov	r0,a
      001004 E5*00            [12] 3269 	mov	a,_bp
      001006 24 07            [12] 3270 	add	a,#0x07
      001008 F9               [12] 3271 	mov	r1,a
      001009 74 13            [12] 3272 	mov	a,#0x13
      00100B 26               [12] 3273 	add	a,@r0
      00100C F7               [12] 3274 	mov	@r1,a
      00100D 74 40            [12] 3275 	mov	a,#0x40
      00100F 08               [12] 3276 	inc	r0
      001010 36               [12] 3277 	addc	a,@r0
      001011 09               [12] 3278 	inc	r1
      001012 F7               [12] 3279 	mov	@r1,a
      001013 08               [12] 3280 	inc	r0
      001014 09               [12] 3281 	inc	r1
      001015 E6               [12] 3282 	mov	a,@r0
      001016 F7               [12] 3283 	mov	@r1,a
      001017 E5*00            [12] 3284 	mov	a,_bp
      001019 24 07            [12] 3285 	add	a,#0x07
      00101B F8               [12] 3286 	mov	r0,a
      00101C 86 82            [24] 3287 	mov	dpl,@r0
      00101E 08               [12] 3288 	inc	r0
      00101F 86 83            [24] 3289 	mov	dph,@r0
      001021 08               [12] 3290 	inc	r0
      001022 86 F0            [24] 3291 	mov	b,@r0
      001024 12r00r00         [24] 3292 	lcall	__gptrget
      001027 FA               [12] 3293 	mov	r2,a
      001028 A3               [24] 3294 	inc	dptr
      001029 12r00r00         [24] 3295 	lcall	__gptrget
      00102C FB               [12] 3296 	mov	r3,a
      00102D A3               [24] 3297 	inc	dptr
      00102E 12r00r00         [24] 3298 	lcall	__gptrget
      001031 FC               [12] 3299 	mov	r4,a
      001032 C0 07            [24] 3300 	push	ar7
      001034 C0 06            [24] 3301 	push	ar6
      001036 C0 05            [24] 3302 	push	ar5
      001038 8A 82            [24] 3303 	mov	dpl,r2
      00103A 8B 83            [24] 3304 	mov	dph,r3
      00103C 8C F0            [24] 3305 	mov	b,r4
      00103E 12r00r00         [24] 3306 	lcall	_stack_pop
      001041 AB 82            [24] 3307 	mov	r3,dpl
      001043 AC 83            [24] 3308 	mov	r4,dph
      001045 15 81            [12] 3309 	dec	sp
      001047 15 81            [12] 3310 	dec	sp
      001049 15 81            [12] 3311 	dec	sp
      00104B EB               [12] 3312 	mov	a,r3
      00104C 4C               [12] 3313 	orl	a,r4
      00104D 70 25            [24] 3314 	jnz	00125$
      00104F 7Fr4E            [12] 3315 	mov	r7,#___str_10
      001051 7Es00            [12] 3316 	mov	r6,#(___str_10 >> 8)
      001053 7D 80            [12] 3317 	mov	r5,#0x80
                                   3318 ;	calc.c:51: return;
      001055                       3319 00396$:
                                   3320 ;	calc.c:49: for (; *s; s++) putchar(*s);
      001055 8F 82            [24] 3321 	mov	dpl,r7
      001057 8E 83            [24] 3322 	mov	dph,r6
      001059 8D F0            [24] 3323 	mov	b,r5
      00105B 12r00r00         [24] 3324 	lcall	__gptrget
      00105E FC               [12] 3325 	mov	r4,a
      00105F 70 03            [24] 3326 	jnz	01296$
      001061 02r2Br95         [24] 3327 	ljmp	00249$
      001064                       3328 01296$:
      001064 7B 00            [12] 3329 	mov	r3,#0x00
      001066 8C 82            [24] 3330 	mov	dpl,r4
      001068 8B 83            [24] 3331 	mov	dph,r3
      00106A 12r00r00         [24] 3332 	lcall	_putchar
      00106D 0F               [12] 3333 	inc	r7
                                   3334 ;	calc.c:171: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      00106E BF 00 E4         [24] 3335 	cjne	r7,#0x00,00396$
      001071 0E               [12] 3336 	inc	r6
      001072 80 E1            [24] 3337 	sjmp	00396$
      001074                       3338 00125$:
                                   3339 ;	calc.c:173: if (!stack_push(ctx->ss, d0)) {
      001074 E5*00            [12] 3340 	mov	a,_bp
      001076 24 12            [12] 3341 	add	a,#0x12
      001078 F8               [12] 3342 	mov	r0,a
      001079 74 16            [12] 3343 	mov	a,#0x16
      00107B 26               [12] 3344 	add	a,@r0
      00107C FA               [12] 3345 	mov	r2,a
      00107D 74 40            [12] 3346 	mov	a,#0x40
      00107F 08               [12] 3347 	inc	r0
      001080 36               [12] 3348 	addc	a,@r0
      001081 FB               [12] 3349 	mov	r3,a
      001082 08               [12] 3350 	inc	r0
      001083 86 04            [24] 3351 	mov	ar4,@r0
      001085 8A 82            [24] 3352 	mov	dpl,r2
      001087 8B 83            [24] 3353 	mov	dph,r3
      001089 8C F0            [24] 3354 	mov	b,r4
      00108B 12r00r00         [24] 3355 	lcall	__gptrget
      00108E FA               [12] 3356 	mov	r2,a
      00108F A3               [24] 3357 	inc	dptr
      001090 12r00r00         [24] 3358 	lcall	__gptrget
      001093 FB               [12] 3359 	mov	r3,a
      001094 A3               [24] 3360 	inc	dptr
      001095 12r00r00         [24] 3361 	lcall	__gptrget
      001098 FC               [12] 3362 	mov	r4,a
      001099 E5*00            [12] 3363 	mov	a,_bp
      00109B 24 15            [12] 3364 	add	a,#0x15
      00109D F8               [12] 3365 	mov	r0,a
      00109E E6               [12] 3366 	mov	a,@r0
      00109F C0 E0            [24] 3367 	push	acc
      0010A1 08               [12] 3368 	inc	r0
      0010A2 E6               [12] 3369 	mov	a,@r0
      0010A3 C0 E0            [24] 3370 	push	acc
      0010A5 08               [12] 3371 	inc	r0
      0010A6 E6               [12] 3372 	mov	a,@r0
      0010A7 C0 E0            [24] 3373 	push	acc
      0010A9 08               [12] 3374 	inc	r0
      0010AA E6               [12] 3375 	mov	a,@r0
      0010AB C0 E0            [24] 3376 	push	acc
      0010AD 8A 82            [24] 3377 	mov	dpl,r2
      0010AF 8B 83            [24] 3378 	mov	dph,r3
      0010B1 8C F0            [24] 3379 	mov	b,r4
      0010B3 12r00r00         [24] 3380 	lcall	_stack_push
      0010B6 AB 82            [24] 3381 	mov	r3,dpl
      0010B8 AC 83            [24] 3382 	mov	r4,dph
      0010BA E5 81            [12] 3383 	mov	a,sp
      0010BC 24 FC            [12] 3384 	add	a,#0xfc
      0010BE F5 81            [12] 3385 	mov	sp,a
      0010C0 EB               [12] 3386 	mov	a,r3
      0010C1 4C               [12] 3387 	orl	a,r4
      0010C2 60 03            [24] 3388 	jz	01298$
      0010C4 02r2Br95         [24] 3389 	ljmp	00249$
      0010C7                       3390 01298$:
                                   3391 ;	calc.c:174: printstr("\r\nsecondary stack overflow\r\n");
      0010C7 7Fr62            [12] 3392 	mov	r7,#___str_11
      0010C9 7Es00            [12] 3393 	mov	r6,#(___str_11 >> 8)
      0010CB 7D 80            [12] 3394 	mov	r5,#0x80
                                   3395 ;	calc.c:51: return;
      0010CD                       3396 00399$:
                                   3397 ;	calc.c:49: for (; *s; s++) putchar(*s);
      0010CD 8F 82            [24] 3398 	mov	dpl,r7
      0010CF 8E 83            [24] 3399 	mov	dph,r6
      0010D1 8D F0            [24] 3400 	mov	b,r5
      0010D3 12r00r00         [24] 3401 	lcall	__gptrget
      0010D6 FC               [12] 3402 	mov	r4,a
      0010D7 60 10            [24] 3403 	jz	00285$
      0010D9 7B 00            [12] 3404 	mov	r3,#0x00
      0010DB 8C 82            [24] 3405 	mov	dpl,r4
      0010DD 8B 83            [24] 3406 	mov	dph,r3
      0010DF 12r00r00         [24] 3407 	lcall	_putchar
      0010E2 0F               [12] 3408 	inc	r7
                                   3409 ;	calc.c:174: printstr("\r\nsecondary stack overflow\r\n");
      0010E3 BF 00 E7         [24] 3410 	cjne	r7,#0x00,00399$
      0010E6 0E               [12] 3411 	inc	r6
      0010E7 80 E4            [24] 3412 	sjmp	00399$
      0010E9                       3413 00285$:
                                   3414 ;	calc.c:175: (void)stack_push(ctx->ps, d0);
      0010E9 E5*00            [12] 3415 	mov	a,_bp
      0010EB 24 07            [12] 3416 	add	a,#0x07
      0010ED F8               [12] 3417 	mov	r0,a
      0010EE 86 82            [24] 3418 	mov	dpl,@r0
      0010F0 08               [12] 3419 	inc	r0
      0010F1 86 83            [24] 3420 	mov	dph,@r0
      0010F3 08               [12] 3421 	inc	r0
      0010F4 86 F0            [24] 3422 	mov	b,@r0
      0010F6 12r00r00         [24] 3423 	lcall	__gptrget
      0010F9 FA               [12] 3424 	mov	r2,a
      0010FA A3               [24] 3425 	inc	dptr
      0010FB 12r00r00         [24] 3426 	lcall	__gptrget
      0010FE FB               [12] 3427 	mov	r3,a
      0010FF A3               [24] 3428 	inc	dptr
      001100 12r00r00         [24] 3429 	lcall	__gptrget
      001103 FC               [12] 3430 	mov	r4,a
      001104 E5*00            [12] 3431 	mov	a,_bp
      001106 24 15            [12] 3432 	add	a,#0x15
      001108 F8               [12] 3433 	mov	r0,a
      001109 E6               [12] 3434 	mov	a,@r0
      00110A C0 E0            [24] 3435 	push	acc
      00110C 08               [12] 3436 	inc	r0
      00110D E6               [12] 3437 	mov	a,@r0
      00110E C0 E0            [24] 3438 	push	acc
      001110 08               [12] 3439 	inc	r0
      001111 E6               [12] 3440 	mov	a,@r0
      001112 C0 E0            [24] 3441 	push	acc
      001114 08               [12] 3442 	inc	r0
      001115 E6               [12] 3443 	mov	a,@r0
      001116 C0 E0            [24] 3444 	push	acc
      001118 8A 82            [24] 3445 	mov	dpl,r2
      00111A 8B 83            [24] 3446 	mov	dph,r3
      00111C 8C F0            [24] 3447 	mov	b,r4
      00111E 12r00r00         [24] 3448 	lcall	_stack_push
      001121 E5 81            [12] 3449 	mov	a,sp
      001123 24 FC            [12] 3450 	add	a,#0xfc
      001125 F5 81            [12] 3451 	mov	sp,a
                                   3452 ;	calc.c:178: break;
      001127 02r2Br95         [24] 3453 	ljmp	00249$
                                   3454 ;	calc.c:179: case 'M':
      00112A                       3455 00127$:
                                   3456 ;	calc.c:180: if (!stack_pop(ctx->ss, &d0)) printstr("\r\nsecondary stack underflow\r\n");
      00112A E5*00            [12] 3457 	mov	a,_bp
      00112C 24 15            [12] 3458 	add	a,#0x15
      00112E FF               [12] 3459 	mov	r7,a
      00112F 7E 00            [12] 3460 	mov	r6,#0x00
      001131 7D 40            [12] 3461 	mov	r5,#0x40
      001133 E5*00            [12] 3462 	mov	a,_bp
      001135 24 12            [12] 3463 	add	a,#0x12
      001137 F8               [12] 3464 	mov	r0,a
      001138 E5*00            [12] 3465 	mov	a,_bp
      00113A 24 07            [12] 3466 	add	a,#0x07
      00113C F9               [12] 3467 	mov	r1,a
      00113D 74 16            [12] 3468 	mov	a,#0x16
      00113F 26               [12] 3469 	add	a,@r0
      001140 F7               [12] 3470 	mov	@r1,a
      001141 74 40            [12] 3471 	mov	a,#0x40
      001143 08               [12] 3472 	inc	r0
      001144 36               [12] 3473 	addc	a,@r0
      001145 09               [12] 3474 	inc	r1
      001146 F7               [12] 3475 	mov	@r1,a
      001147 08               [12] 3476 	inc	r0
      001148 09               [12] 3477 	inc	r1
      001149 E6               [12] 3478 	mov	a,@r0
      00114A F7               [12] 3479 	mov	@r1,a
      00114B E5*00            [12] 3480 	mov	a,_bp
      00114D 24 07            [12] 3481 	add	a,#0x07
      00114F F8               [12] 3482 	mov	r0,a
      001150 86 82            [24] 3483 	mov	dpl,@r0
      001152 08               [12] 3484 	inc	r0
      001153 86 83            [24] 3485 	mov	dph,@r0
      001155 08               [12] 3486 	inc	r0
      001156 86 F0            [24] 3487 	mov	b,@r0
      001158 12r00r00         [24] 3488 	lcall	__gptrget
      00115B FA               [12] 3489 	mov	r2,a
      00115C A3               [24] 3490 	inc	dptr
      00115D 12r00r00         [24] 3491 	lcall	__gptrget
      001160 FB               [12] 3492 	mov	r3,a
      001161 A3               [24] 3493 	inc	dptr
      001162 12r00r00         [24] 3494 	lcall	__gptrget
      001165 FC               [12] 3495 	mov	r4,a
      001166 C0 07            [24] 3496 	push	ar7
      001168 C0 06            [24] 3497 	push	ar6
      00116A C0 05            [24] 3498 	push	ar5
      00116C 8A 82            [24] 3499 	mov	dpl,r2
      00116E 8B 83            [24] 3500 	mov	dph,r3
      001170 8C F0            [24] 3501 	mov	b,r4
      001172 12r00r00         [24] 3502 	lcall	_stack_pop
      001175 AB 82            [24] 3503 	mov	r3,dpl
      001177 AC 83            [24] 3504 	mov	r4,dph
      001179 15 81            [12] 3505 	dec	sp
      00117B 15 81            [12] 3506 	dec	sp
      00117D 15 81            [12] 3507 	dec	sp
      00117F EB               [12] 3508 	mov	a,r3
      001180 4C               [12] 3509 	orl	a,r4
      001181 70 25            [24] 3510 	jnz	00131$
      001183 7Fr7F            [12] 3511 	mov	r7,#___str_12
      001185 7Es00            [12] 3512 	mov	r6,#(___str_12 >> 8)
      001187 7D 80            [12] 3513 	mov	r5,#0x80
                                   3514 ;	calc.c:51: return;
      001189                       3515 00402$:
                                   3516 ;	calc.c:49: for (; *s; s++) putchar(*s);
      001189 8F 82            [24] 3517 	mov	dpl,r7
      00118B 8E 83            [24] 3518 	mov	dph,r6
      00118D 8D F0            [24] 3519 	mov	b,r5
      00118F 12r00r00         [24] 3520 	lcall	__gptrget
      001192 FC               [12] 3521 	mov	r4,a
      001193 70 03            [24] 3522 	jnz	01302$
      001195 02r2Br95         [24] 3523 	ljmp	00249$
      001198                       3524 01302$:
      001198 7B 00            [12] 3525 	mov	r3,#0x00
      00119A 8C 82            [24] 3526 	mov	dpl,r4
      00119C 8B 83            [24] 3527 	mov	dph,r3
      00119E 12r00r00         [24] 3528 	lcall	_putchar
      0011A1 0F               [12] 3529 	inc	r7
                                   3530 ;	calc.c:180: if (!stack_pop(ctx->ss, &d0)) printstr("\r\nsecondary stack underflow\r\n");
      0011A2 BF 00 E4         [24] 3531 	cjne	r7,#0x00,00402$
      0011A5 0E               [12] 3532 	inc	r6
      0011A6 80 E1            [24] 3533 	sjmp	00402$
      0011A8                       3534 00131$:
                                   3535 ;	calc.c:182: if (!stack_push(ctx->ps, d0)) {
      0011A8 E5*00            [12] 3536 	mov	a,_bp
      0011AA 24 12            [12] 3537 	add	a,#0x12
      0011AC F8               [12] 3538 	mov	r0,a
      0011AD 74 13            [12] 3539 	mov	a,#0x13
      0011AF 26               [12] 3540 	add	a,@r0
      0011B0 FA               [12] 3541 	mov	r2,a
      0011B1 74 40            [12] 3542 	mov	a,#0x40
      0011B3 08               [12] 3543 	inc	r0
      0011B4 36               [12] 3544 	addc	a,@r0
      0011B5 FB               [12] 3545 	mov	r3,a
      0011B6 08               [12] 3546 	inc	r0
      0011B7 86 04            [24] 3547 	mov	ar4,@r0
      0011B9 8A 82            [24] 3548 	mov	dpl,r2
      0011BB 8B 83            [24] 3549 	mov	dph,r3
      0011BD 8C F0            [24] 3550 	mov	b,r4
      0011BF 12r00r00         [24] 3551 	lcall	__gptrget
      0011C2 FA               [12] 3552 	mov	r2,a
      0011C3 A3               [24] 3553 	inc	dptr
      0011C4 12r00r00         [24] 3554 	lcall	__gptrget
      0011C7 FB               [12] 3555 	mov	r3,a
      0011C8 A3               [24] 3556 	inc	dptr
      0011C9 12r00r00         [24] 3557 	lcall	__gptrget
      0011CC FC               [12] 3558 	mov	r4,a
      0011CD E5*00            [12] 3559 	mov	a,_bp
      0011CF 24 15            [12] 3560 	add	a,#0x15
      0011D1 F8               [12] 3561 	mov	r0,a
      0011D2 E6               [12] 3562 	mov	a,@r0
      0011D3 C0 E0            [24] 3563 	push	acc
      0011D5 08               [12] 3564 	inc	r0
      0011D6 E6               [12] 3565 	mov	a,@r0
      0011D7 C0 E0            [24] 3566 	push	acc
      0011D9 08               [12] 3567 	inc	r0
      0011DA E6               [12] 3568 	mov	a,@r0
      0011DB C0 E0            [24] 3569 	push	acc
      0011DD 08               [12] 3570 	inc	r0
      0011DE E6               [12] 3571 	mov	a,@r0
      0011DF C0 E0            [24] 3572 	push	acc
      0011E1 8A 82            [24] 3573 	mov	dpl,r2
      0011E3 8B 83            [24] 3574 	mov	dph,r3
      0011E5 8C F0            [24] 3575 	mov	b,r4
      0011E7 12r00r00         [24] 3576 	lcall	_stack_push
      0011EA AB 82            [24] 3577 	mov	r3,dpl
      0011EC AC 83            [24] 3578 	mov	r4,dph
      0011EE E5 81            [12] 3579 	mov	a,sp
      0011F0 24 FC            [12] 3580 	add	a,#0xfc
      0011F2 F5 81            [12] 3581 	mov	sp,a
      0011F4 EB               [12] 3582 	mov	a,r3
      0011F5 4C               [12] 3583 	orl	a,r4
      0011F6 60 03            [24] 3584 	jz	01304$
      0011F8 02r2Br95         [24] 3585 	ljmp	00249$
      0011FB                       3586 01304$:
                                   3587 ;	calc.c:183: printstr("\r\nstack overflow\r\n");
      0011FB 7Fr9D            [12] 3588 	mov	r7,#___str_13
      0011FD 7Es00            [12] 3589 	mov	r6,#(___str_13 >> 8)
      0011FF 7D 80            [12] 3590 	mov	r5,#0x80
                                   3591 ;	calc.c:51: return;
      001201                       3592 00405$:
                                   3593 ;	calc.c:49: for (; *s; s++) putchar(*s);
      001201 8F 82            [24] 3594 	mov	dpl,r7
      001203 8E 83            [24] 3595 	mov	dph,r6
      001205 8D F0            [24] 3596 	mov	b,r5
      001207 12r00r00         [24] 3597 	lcall	__gptrget
      00120A FC               [12] 3598 	mov	r4,a
      00120B 60 10            [24] 3599 	jz	00289$
      00120D 7B 00            [12] 3600 	mov	r3,#0x00
      00120F 8C 82            [24] 3601 	mov	dpl,r4
      001211 8B 83            [24] 3602 	mov	dph,r3
      001213 12r00r00         [24] 3603 	lcall	_putchar
      001216 0F               [12] 3604 	inc	r7
                                   3605 ;	calc.c:183: printstr("\r\nstack overflow\r\n");
      001217 BF 00 E7         [24] 3606 	cjne	r7,#0x00,00405$
      00121A 0E               [12] 3607 	inc	r6
      00121B 80 E4            [24] 3608 	sjmp	00405$
      00121D                       3609 00289$:
                                   3610 ;	calc.c:184: (void)stack_push(ctx->ss, d0);
      00121D E5*00            [12] 3611 	mov	a,_bp
      00121F 24 07            [12] 3612 	add	a,#0x07
      001221 F8               [12] 3613 	mov	r0,a
      001222 86 82            [24] 3614 	mov	dpl,@r0
      001224 08               [12] 3615 	inc	r0
      001225 86 83            [24] 3616 	mov	dph,@r0
      001227 08               [12] 3617 	inc	r0
      001228 86 F0            [24] 3618 	mov	b,@r0
      00122A 12r00r00         [24] 3619 	lcall	__gptrget
      00122D FA               [12] 3620 	mov	r2,a
      00122E A3               [24] 3621 	inc	dptr
      00122F 12r00r00         [24] 3622 	lcall	__gptrget
      001232 FB               [12] 3623 	mov	r3,a
      001233 A3               [24] 3624 	inc	dptr
      001234 12r00r00         [24] 3625 	lcall	__gptrget
      001237 FC               [12] 3626 	mov	r4,a
      001238 E5*00            [12] 3627 	mov	a,_bp
      00123A 24 15            [12] 3628 	add	a,#0x15
      00123C F8               [12] 3629 	mov	r0,a
      00123D E6               [12] 3630 	mov	a,@r0
      00123E C0 E0            [24] 3631 	push	acc
      001240 08               [12] 3632 	inc	r0
      001241 E6               [12] 3633 	mov	a,@r0
      001242 C0 E0            [24] 3634 	push	acc
      001244 08               [12] 3635 	inc	r0
      001245 E6               [12] 3636 	mov	a,@r0
      001246 C0 E0            [24] 3637 	push	acc
      001248 08               [12] 3638 	inc	r0
      001249 E6               [12] 3639 	mov	a,@r0
      00124A C0 E0            [24] 3640 	push	acc
      00124C 8A 82            [24] 3641 	mov	dpl,r2
      00124E 8B 83            [24] 3642 	mov	dph,r3
      001250 8C F0            [24] 3643 	mov	b,r4
      001252 12r00r00         [24] 3644 	lcall	_stack_push
      001255 E5 81            [12] 3645 	mov	a,sp
      001257 24 FC            [12] 3646 	add	a,#0xfc
      001259 F5 81            [12] 3647 	mov	sp,a
                                   3648 ;	calc.c:187: break;
      00125B 02r2Br95         [24] 3649 	ljmp	00249$
                                   3650 ;	calc.c:188: case 'u':
      00125E                       3651 00133$:
                                   3652 ;	calc.c:189: if (!stack_peek(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      00125E E5*00            [12] 3653 	mov	a,_bp
      001260 24 15            [12] 3654 	add	a,#0x15
      001262 FF               [12] 3655 	mov	r7,a
      001263 7E 00            [12] 3656 	mov	r6,#0x00
      001265 7D 40            [12] 3657 	mov	r5,#0x40
      001267 E5*00            [12] 3658 	mov	a,_bp
      001269 24 12            [12] 3659 	add	a,#0x12
      00126B F8               [12] 3660 	mov	r0,a
      00126C 74 13            [12] 3661 	mov	a,#0x13
      00126E 26               [12] 3662 	add	a,@r0
      00126F FA               [12] 3663 	mov	r2,a
      001270 ED               [12] 3664 	mov	a,r5
      001271 08               [12] 3665 	inc	r0
      001272 36               [12] 3666 	addc	a,@r0
      001273 FB               [12] 3667 	mov	r3,a
      001274 08               [12] 3668 	inc	r0
      001275 86 04            [24] 3669 	mov	ar4,@r0
      001277 8A 82            [24] 3670 	mov	dpl,r2
      001279 8B 83            [24] 3671 	mov	dph,r3
      00127B 8C F0            [24] 3672 	mov	b,r4
      00127D 12r00r00         [24] 3673 	lcall	__gptrget
      001280 FA               [12] 3674 	mov	r2,a
      001281 A3               [24] 3675 	inc	dptr
      001282 12r00r00         [24] 3676 	lcall	__gptrget
      001285 FB               [12] 3677 	mov	r3,a
      001286 A3               [24] 3678 	inc	dptr
      001287 12r00r00         [24] 3679 	lcall	__gptrget
      00128A FC               [12] 3680 	mov	r4,a
      00128B C0 07            [24] 3681 	push	ar7
      00128D C0 06            [24] 3682 	push	ar6
      00128F C0 05            [24] 3683 	push	ar5
      001291 8A 82            [24] 3684 	mov	dpl,r2
      001293 8B 83            [24] 3685 	mov	dph,r3
      001295 8C F0            [24] 3686 	mov	b,r4
      001297 12r00r00         [24] 3687 	lcall	_stack_peek
      00129A AB 82            [24] 3688 	mov	r3,dpl
      00129C AC 83            [24] 3689 	mov	r4,dph
      00129E 15 81            [12] 3690 	dec	sp
      0012A0 15 81            [12] 3691 	dec	sp
      0012A2 15 81            [12] 3692 	dec	sp
      0012A4 EB               [12] 3693 	mov	a,r3
      0012A5 4C               [12] 3694 	orl	a,r4
      0012A6 70 25            [24] 3695 	jnz	00137$
      0012A8 7Fr4E            [12] 3696 	mov	r7,#___str_10
      0012AA 7Es00            [12] 3697 	mov	r6,#(___str_10 >> 8)
      0012AC 7D 80            [12] 3698 	mov	r5,#0x80
                                   3699 ;	calc.c:51: return;
      0012AE                       3700 00408$:
                                   3701 ;	calc.c:49: for (; *s; s++) putchar(*s);
      0012AE 8F 82            [24] 3702 	mov	dpl,r7
      0012B0 8E 83            [24] 3703 	mov	dph,r6
      0012B2 8D F0            [24] 3704 	mov	b,r5
      0012B4 12r00r00         [24] 3705 	lcall	__gptrget
      0012B7 FC               [12] 3706 	mov	r4,a
      0012B8 70 03            [24] 3707 	jnz	01308$
      0012BA 02r2Br95         [24] 3708 	ljmp	00249$
      0012BD                       3709 01308$:
      0012BD 7B 00            [12] 3710 	mov	r3,#0x00
      0012BF 8C 82            [24] 3711 	mov	dpl,r4
      0012C1 8B 83            [24] 3712 	mov	dph,r3
      0012C3 12r00r00         [24] 3713 	lcall	_putchar
      0012C6 0F               [12] 3714 	inc	r7
                                   3715 ;	calc.c:189: if (!stack_peek(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      0012C7 BF 00 E4         [24] 3716 	cjne	r7,#0x00,00408$
      0012CA 0E               [12] 3717 	inc	r6
      0012CB 80 E1            [24] 3718 	sjmp	00408$
      0012CD                       3719 00137$:
                                   3720 ;	calc.c:190: else if (!stack_push(ctx->ss, d0)) printstr("\r\nsecondary stack overflow\r\n");
      0012CD E5*00            [12] 3721 	mov	a,_bp
      0012CF 24 12            [12] 3722 	add	a,#0x12
      0012D1 F8               [12] 3723 	mov	r0,a
      0012D2 74 16            [12] 3724 	mov	a,#0x16
      0012D4 26               [12] 3725 	add	a,@r0
      0012D5 FA               [12] 3726 	mov	r2,a
      0012D6 74 40            [12] 3727 	mov	a,#0x40
      0012D8 08               [12] 3728 	inc	r0
      0012D9 36               [12] 3729 	addc	a,@r0
      0012DA FB               [12] 3730 	mov	r3,a
      0012DB 08               [12] 3731 	inc	r0
      0012DC 86 04            [24] 3732 	mov	ar4,@r0
      0012DE 8A 82            [24] 3733 	mov	dpl,r2
      0012E0 8B 83            [24] 3734 	mov	dph,r3
      0012E2 8C F0            [24] 3735 	mov	b,r4
      0012E4 12r00r00         [24] 3736 	lcall	__gptrget
      0012E7 FA               [12] 3737 	mov	r2,a
      0012E8 A3               [24] 3738 	inc	dptr
      0012E9 12r00r00         [24] 3739 	lcall	__gptrget
      0012EC FB               [12] 3740 	mov	r3,a
      0012ED A3               [24] 3741 	inc	dptr
      0012EE 12r00r00         [24] 3742 	lcall	__gptrget
      0012F1 FC               [12] 3743 	mov	r4,a
      0012F2 E5*00            [12] 3744 	mov	a,_bp
      0012F4 24 15            [12] 3745 	add	a,#0x15
      0012F6 F8               [12] 3746 	mov	r0,a
      0012F7 E6               [12] 3747 	mov	a,@r0
      0012F8 C0 E0            [24] 3748 	push	acc
      0012FA 08               [12] 3749 	inc	r0
      0012FB E6               [12] 3750 	mov	a,@r0
      0012FC C0 E0            [24] 3751 	push	acc
      0012FE 08               [12] 3752 	inc	r0
      0012FF E6               [12] 3753 	mov	a,@r0
      001300 C0 E0            [24] 3754 	push	acc
      001302 08               [12] 3755 	inc	r0
      001303 E6               [12] 3756 	mov	a,@r0
      001304 C0 E0            [24] 3757 	push	acc
      001306 8A 82            [24] 3758 	mov	dpl,r2
      001308 8B 83            [24] 3759 	mov	dph,r3
      00130A 8C F0            [24] 3760 	mov	b,r4
      00130C 12r00r00         [24] 3761 	lcall	_stack_push
      00130F AB 82            [24] 3762 	mov	r3,dpl
      001311 AC 83            [24] 3763 	mov	r4,dph
      001313 E5 81            [12] 3764 	mov	a,sp
      001315 24 FC            [12] 3765 	add	a,#0xfc
      001317 F5 81            [12] 3766 	mov	sp,a
      001319 EB               [12] 3767 	mov	a,r3
      00131A 4C               [12] 3768 	orl	a,r4
      00131B 60 03            [24] 3769 	jz	01310$
      00131D 02r2Br95         [24] 3770 	ljmp	00249$
      001320                       3771 01310$:
      001320 7Fr62            [12] 3772 	mov	r7,#___str_11
      001322 7Es00            [12] 3773 	mov	r6,#(___str_11 >> 8)
      001324 7D 80            [12] 3774 	mov	r5,#0x80
                                   3775 ;	calc.c:51: return;
      001326                       3776 00411$:
                                   3777 ;	calc.c:49: for (; *s; s++) putchar(*s);
      001326 8F 82            [24] 3778 	mov	dpl,r7
      001328 8E 83            [24] 3779 	mov	dph,r6
      00132A 8D F0            [24] 3780 	mov	b,r5
      00132C 12r00r00         [24] 3781 	lcall	__gptrget
      00132F FC               [12] 3782 	mov	r4,a
      001330 70 03            [24] 3783 	jnz	01311$
      001332 02r2Br95         [24] 3784 	ljmp	00249$
      001335                       3785 01311$:
      001335 7B 00            [12] 3786 	mov	r3,#0x00
      001337 8C 82            [24] 3787 	mov	dpl,r4
      001339 8B 83            [24] 3788 	mov	dph,r3
      00133B 12r00r00         [24] 3789 	lcall	_putchar
      00133E 0F               [12] 3790 	inc	r7
                                   3791 ;	calc.c:192: case 'U':
      00133F BF 00 E4         [24] 3792 	cjne	r7,#0x00,00411$
      001342 0E               [12] 3793 	inc	r6
      001343 80 E1            [24] 3794 	sjmp	00411$
      001345                       3795 00139$:
                                   3796 ;	calc.c:193: if (!stack_peek(ctx->ss, &d0)) printstr("\r\nsecondary stack underflow\r\n");
      001345 E5*00            [12] 3797 	mov	a,_bp
      001347 24 15            [12] 3798 	add	a,#0x15
      001349 FF               [12] 3799 	mov	r7,a
      00134A 7E 00            [12] 3800 	mov	r6,#0x00
      00134C 7D 40            [12] 3801 	mov	r5,#0x40
      00134E E5*00            [12] 3802 	mov	a,_bp
      001350 24 12            [12] 3803 	add	a,#0x12
      001352 F8               [12] 3804 	mov	r0,a
      001353 74 16            [12] 3805 	mov	a,#0x16
      001355 26               [12] 3806 	add	a,@r0
      001356 FA               [12] 3807 	mov	r2,a
      001357 ED               [12] 3808 	mov	a,r5
      001358 08               [12] 3809 	inc	r0
      001359 36               [12] 3810 	addc	a,@r0
      00135A FB               [12] 3811 	mov	r3,a
      00135B 08               [12] 3812 	inc	r0
      00135C 86 04            [24] 3813 	mov	ar4,@r0
      00135E 8A 82            [24] 3814 	mov	dpl,r2
      001360 8B 83            [24] 3815 	mov	dph,r3
      001362 8C F0            [24] 3816 	mov	b,r4
      001364 12r00r00         [24] 3817 	lcall	__gptrget
      001367 FA               [12] 3818 	mov	r2,a
      001368 A3               [24] 3819 	inc	dptr
      001369 12r00r00         [24] 3820 	lcall	__gptrget
      00136C FB               [12] 3821 	mov	r3,a
      00136D A3               [24] 3822 	inc	dptr
      00136E 12r00r00         [24] 3823 	lcall	__gptrget
      001371 FC               [12] 3824 	mov	r4,a
      001372 C0 07            [24] 3825 	push	ar7
      001374 C0 06            [24] 3826 	push	ar6
      001376 C0 05            [24] 3827 	push	ar5
      001378 8A 82            [24] 3828 	mov	dpl,r2
      00137A 8B 83            [24] 3829 	mov	dph,r3
      00137C 8C F0            [24] 3830 	mov	b,r4
      00137E 12r00r00         [24] 3831 	lcall	_stack_peek
      001381 AB 82            [24] 3832 	mov	r3,dpl
      001383 AC 83            [24] 3833 	mov	r4,dph
      001385 15 81            [12] 3834 	dec	sp
      001387 15 81            [12] 3835 	dec	sp
      001389 15 81            [12] 3836 	dec	sp
      00138B EB               [12] 3837 	mov	a,r3
      00138C 4C               [12] 3838 	orl	a,r4
      00138D 70 25            [24] 3839 	jnz	00143$
      00138F 7Fr7F            [12] 3840 	mov	r7,#___str_12
      001391 7Es00            [12] 3841 	mov	r6,#(___str_12 >> 8)
      001393 7D 80            [12] 3842 	mov	r5,#0x80
                                   3843 ;	calc.c:51: return;
      001395                       3844 00414$:
                                   3845 ;	calc.c:49: for (; *s; s++) putchar(*s);
      001395 8F 82            [24] 3846 	mov	dpl,r7
      001397 8E 83            [24] 3847 	mov	dph,r6
      001399 8D F0            [24] 3848 	mov	b,r5
      00139B 12r00r00         [24] 3849 	lcall	__gptrget
      00139E FC               [12] 3850 	mov	r4,a
      00139F 70 03            [24] 3851 	jnz	01314$
      0013A1 02r2Br95         [24] 3852 	ljmp	00249$
      0013A4                       3853 01314$:
      0013A4 7B 00            [12] 3854 	mov	r3,#0x00
      0013A6 8C 82            [24] 3855 	mov	dpl,r4
      0013A8 8B 83            [24] 3856 	mov	dph,r3
      0013AA 12r00r00         [24] 3857 	lcall	_putchar
      0013AD 0F               [12] 3858 	inc	r7
                                   3859 ;	calc.c:193: if (!stack_peek(ctx->ss, &d0)) printstr("\r\nsecondary stack underflow\r\n");
      0013AE BF 00 E4         [24] 3860 	cjne	r7,#0x00,00414$
      0013B1 0E               [12] 3861 	inc	r6
      0013B2 80 E1            [24] 3862 	sjmp	00414$
      0013B4                       3863 00143$:
                                   3864 ;	calc.c:194: else if (!stack_push(ctx->ps, d0)) printstr("\r\nstack overflow\r\n");
      0013B4 E5*00            [12] 3865 	mov	a,_bp
      0013B6 24 12            [12] 3866 	add	a,#0x12
      0013B8 F8               [12] 3867 	mov	r0,a
      0013B9 74 13            [12] 3868 	mov	a,#0x13
      0013BB 26               [12] 3869 	add	a,@r0
      0013BC FA               [12] 3870 	mov	r2,a
      0013BD 74 40            [12] 3871 	mov	a,#0x40
      0013BF 08               [12] 3872 	inc	r0
      0013C0 36               [12] 3873 	addc	a,@r0
      0013C1 FB               [12] 3874 	mov	r3,a
      0013C2 08               [12] 3875 	inc	r0
      0013C3 86 04            [24] 3876 	mov	ar4,@r0
      0013C5 8A 82            [24] 3877 	mov	dpl,r2
      0013C7 8B 83            [24] 3878 	mov	dph,r3
      0013C9 8C F0            [24] 3879 	mov	b,r4
      0013CB 12r00r00         [24] 3880 	lcall	__gptrget
      0013CE FA               [12] 3881 	mov	r2,a
      0013CF A3               [24] 3882 	inc	dptr
      0013D0 12r00r00         [24] 3883 	lcall	__gptrget
      0013D3 FB               [12] 3884 	mov	r3,a
      0013D4 A3               [24] 3885 	inc	dptr
      0013D5 12r00r00         [24] 3886 	lcall	__gptrget
      0013D8 FC               [12] 3887 	mov	r4,a
      0013D9 E5*00            [12] 3888 	mov	a,_bp
      0013DB 24 15            [12] 3889 	add	a,#0x15
      0013DD F8               [12] 3890 	mov	r0,a
      0013DE E6               [12] 3891 	mov	a,@r0
      0013DF C0 E0            [24] 3892 	push	acc
      0013E1 08               [12] 3893 	inc	r0
      0013E2 E6               [12] 3894 	mov	a,@r0
      0013E3 C0 E0            [24] 3895 	push	acc
      0013E5 08               [12] 3896 	inc	r0
      0013E6 E6               [12] 3897 	mov	a,@r0
      0013E7 C0 E0            [24] 3898 	push	acc
      0013E9 08               [12] 3899 	inc	r0
      0013EA E6               [12] 3900 	mov	a,@r0
      0013EB C0 E0            [24] 3901 	push	acc
      0013ED 8A 82            [24] 3902 	mov	dpl,r2
      0013EF 8B 83            [24] 3903 	mov	dph,r3
      0013F1 8C F0            [24] 3904 	mov	b,r4
      0013F3 12r00r00         [24] 3905 	lcall	_stack_push
      0013F6 AB 82            [24] 3906 	mov	r3,dpl
      0013F8 AC 83            [24] 3907 	mov	r4,dph
      0013FA E5 81            [12] 3908 	mov	a,sp
      0013FC 24 FC            [12] 3909 	add	a,#0xfc
      0013FE F5 81            [12] 3910 	mov	sp,a
      001400 EB               [12] 3911 	mov	a,r3
      001401 4C               [12] 3912 	orl	a,r4
      001402 60 03            [24] 3913 	jz	01316$
      001404 02r2Br95         [24] 3914 	ljmp	00249$
      001407                       3915 01316$:
      001407 7Fr9D            [12] 3916 	mov	r7,#___str_13
      001409 7Es00            [12] 3917 	mov	r6,#(___str_13 >> 8)
      00140B 7D 80            [12] 3918 	mov	r5,#0x80
                                   3919 ;	calc.c:51: return;
      00140D                       3920 00417$:
                                   3921 ;	calc.c:49: for (; *s; s++) putchar(*s);
      00140D 8F 82            [24] 3922 	mov	dpl,r7
      00140F 8E 83            [24] 3923 	mov	dph,r6
      001411 8D F0            [24] 3924 	mov	b,r5
      001413 12r00r00         [24] 3925 	lcall	__gptrget
      001416 FC               [12] 3926 	mov	r4,a
      001417 70 03            [24] 3927 	jnz	01317$
      001419 02r2Br95         [24] 3928 	ljmp	00249$
      00141C                       3929 01317$:
      00141C 7B 00            [12] 3930 	mov	r3,#0x00
      00141E 8C 82            [24] 3931 	mov	dpl,r4
      001420 8B 83            [24] 3932 	mov	dph,r3
      001422 12r00r00         [24] 3933 	lcall	_putchar
      001425 0F               [12] 3934 	inc	r7
                                   3935 ;	calc.c:196: case 'T':
      001426 BF 00 E4         [24] 3936 	cjne	r7,#0x00,00417$
      001429 0E               [12] 3937 	inc	r6
      00142A 80 E1            [24] 3938 	sjmp	00417$
      00142C                       3939 00145$:
                                   3940 ;	calc.c:197: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      00142C E5*00            [12] 3941 	mov	a,_bp
      00142E 24 15            [12] 3942 	add	a,#0x15
      001430 FF               [12] 3943 	mov	r7,a
      001431 7E 00            [12] 3944 	mov	r6,#0x00
      001433 7D 40            [12] 3945 	mov	r5,#0x40
      001435 E5*00            [12] 3946 	mov	a,_bp
      001437 24 12            [12] 3947 	add	a,#0x12
      001439 F8               [12] 3948 	mov	r0,a
      00143A E5*00            [12] 3949 	mov	a,_bp
      00143C 24 07            [12] 3950 	add	a,#0x07
      00143E F9               [12] 3951 	mov	r1,a
      00143F 74 13            [12] 3952 	mov	a,#0x13
      001441 26               [12] 3953 	add	a,@r0
      001442 F7               [12] 3954 	mov	@r1,a
      001443 74 40            [12] 3955 	mov	a,#0x40
      001445 08               [12] 3956 	inc	r0
      001446 36               [12] 3957 	addc	a,@r0
      001447 09               [12] 3958 	inc	r1
      001448 F7               [12] 3959 	mov	@r1,a
      001449 08               [12] 3960 	inc	r0
      00144A 09               [12] 3961 	inc	r1
      00144B E6               [12] 3962 	mov	a,@r0
      00144C F7               [12] 3963 	mov	@r1,a
      00144D E5*00            [12] 3964 	mov	a,_bp
      00144F 24 07            [12] 3965 	add	a,#0x07
      001451 F8               [12] 3966 	mov	r0,a
      001452 86 82            [24] 3967 	mov	dpl,@r0
      001454 08               [12] 3968 	inc	r0
      001455 86 83            [24] 3969 	mov	dph,@r0
      001457 08               [12] 3970 	inc	r0
      001458 86 F0            [24] 3971 	mov	b,@r0
      00145A 12r00r00         [24] 3972 	lcall	__gptrget
      00145D FA               [12] 3973 	mov	r2,a
      00145E A3               [24] 3974 	inc	dptr
      00145F 12r00r00         [24] 3975 	lcall	__gptrget
      001462 FB               [12] 3976 	mov	r3,a
      001463 A3               [24] 3977 	inc	dptr
      001464 12r00r00         [24] 3978 	lcall	__gptrget
      001467 FC               [12] 3979 	mov	r4,a
      001468 C0 07            [24] 3980 	push	ar7
      00146A C0 06            [24] 3981 	push	ar6
      00146C C0 05            [24] 3982 	push	ar5
      00146E 8A 82            [24] 3983 	mov	dpl,r2
      001470 8B 83            [24] 3984 	mov	dph,r3
      001472 8C F0            [24] 3985 	mov	b,r4
      001474 12r00r00         [24] 3986 	lcall	_stack_pop
      001477 AB 82            [24] 3987 	mov	r3,dpl
      001479 AC 83            [24] 3988 	mov	r4,dph
      00147B 15 81            [12] 3989 	dec	sp
      00147D 15 81            [12] 3990 	dec	sp
      00147F 15 81            [12] 3991 	dec	sp
      001481 EB               [12] 3992 	mov	a,r3
      001482 4C               [12] 3993 	orl	a,r4
      001483 70 25            [24] 3994 	jnz	00150$
      001485 7Fr4E            [12] 3995 	mov	r7,#___str_10
      001487 7Es00            [12] 3996 	mov	r6,#(___str_10 >> 8)
      001489 7D 80            [12] 3997 	mov	r5,#0x80
                                   3998 ;	calc.c:51: return;
      00148B                       3999 00420$:
                                   4000 ;	calc.c:49: for (; *s; s++) putchar(*s);
      00148B 8F 82            [24] 4001 	mov	dpl,r7
      00148D 8E 83            [24] 4002 	mov	dph,r6
      00148F 8D F0            [24] 4003 	mov	b,r5
      001491 12r00r00         [24] 4004 	lcall	__gptrget
      001494 FC               [12] 4005 	mov	r4,a
      001495 70 03            [24] 4006 	jnz	01320$
      001497 02r2Br95         [24] 4007 	ljmp	00249$
      00149A                       4008 01320$:
      00149A 7B 00            [12] 4009 	mov	r3,#0x00
      00149C 8C 82            [24] 4010 	mov	dpl,r4
      00149E 8B 83            [24] 4011 	mov	dph,r3
      0014A0 12r00r00         [24] 4012 	lcall	_putchar
      0014A3 0F               [12] 4013 	inc	r7
                                   4014 ;	calc.c:197: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      0014A4 BF 00 E4         [24] 4015 	cjne	r7,#0x00,00420$
      0014A7 0E               [12] 4016 	inc	r6
      0014A8 80 E1            [24] 4017 	sjmp	00420$
      0014AA                       4018 00150$:
                                   4019 ;	calc.c:199: if (!stack_pop(ctx->ss, &d1)) {
      0014AA E5*00            [12] 4020 	mov	a,_bp
      0014AC 24 19            [12] 4021 	add	a,#0x19
      0014AE FF               [12] 4022 	mov	r7,a
      0014AF 7E 00            [12] 4023 	mov	r6,#0x00
      0014B1 7D 40            [12] 4024 	mov	r5,#0x40
      0014B3 E5*00            [12] 4025 	mov	a,_bp
      0014B5 24 12            [12] 4026 	add	a,#0x12
      0014B7 F8               [12] 4027 	mov	r0,a
      0014B8 E5*00            [12] 4028 	mov	a,_bp
      0014BA 24 04            [12] 4029 	add	a,#0x04
      0014BC F9               [12] 4030 	mov	r1,a
      0014BD 74 16            [12] 4031 	mov	a,#0x16
      0014BF 26               [12] 4032 	add	a,@r0
      0014C0 F7               [12] 4033 	mov	@r1,a
      0014C1 74 40            [12] 4034 	mov	a,#0x40
      0014C3 08               [12] 4035 	inc	r0
      0014C4 36               [12] 4036 	addc	a,@r0
      0014C5 09               [12] 4037 	inc	r1
      0014C6 F7               [12] 4038 	mov	@r1,a
      0014C7 08               [12] 4039 	inc	r0
      0014C8 09               [12] 4040 	inc	r1
      0014C9 E6               [12] 4041 	mov	a,@r0
      0014CA F7               [12] 4042 	mov	@r1,a
      0014CB E5*00            [12] 4043 	mov	a,_bp
      0014CD 24 04            [12] 4044 	add	a,#0x04
      0014CF F8               [12] 4045 	mov	r0,a
      0014D0 86 82            [24] 4046 	mov	dpl,@r0
      0014D2 08               [12] 4047 	inc	r0
      0014D3 86 83            [24] 4048 	mov	dph,@r0
      0014D5 08               [12] 4049 	inc	r0
      0014D6 86 F0            [24] 4050 	mov	b,@r0
      0014D8 12r00r00         [24] 4051 	lcall	__gptrget
      0014DB FA               [12] 4052 	mov	r2,a
      0014DC A3               [24] 4053 	inc	dptr
      0014DD 12r00r00         [24] 4054 	lcall	__gptrget
      0014E0 FB               [12] 4055 	mov	r3,a
      0014E1 A3               [24] 4056 	inc	dptr
      0014E2 12r00r00         [24] 4057 	lcall	__gptrget
      0014E5 FC               [12] 4058 	mov	r4,a
      0014E6 C0 07            [24] 4059 	push	ar7
      0014E8 C0 06            [24] 4060 	push	ar6
      0014EA C0 05            [24] 4061 	push	ar5
      0014EC 8A 82            [24] 4062 	mov	dpl,r2
      0014EE 8B 83            [24] 4063 	mov	dph,r3
      0014F0 8C F0            [24] 4064 	mov	b,r4
      0014F2 12r00r00         [24] 4065 	lcall	_stack_pop
      0014F5 AB 82            [24] 4066 	mov	r3,dpl
      0014F7 AC 83            [24] 4067 	mov	r4,dph
      0014F9 15 81            [12] 4068 	dec	sp
      0014FB 15 81            [12] 4069 	dec	sp
      0014FD 15 81            [12] 4070 	dec	sp
      0014FF EB               [12] 4071 	mov	a,r3
      001500 4C               [12] 4072 	orl	a,r4
      001501 70 63            [24] 4073 	jnz	00147$
                                   4074 ;	calc.c:200: printstr("\r\nsecondary stack underflow\r\n");
      001503 7Fr7F            [12] 4075 	mov	r7,#___str_12
      001505 7Es00            [12] 4076 	mov	r6,#(___str_12 >> 8)
      001507 7D 80            [12] 4077 	mov	r5,#0x80
                                   4078 ;	calc.c:51: return;
      001509                       4079 00423$:
                                   4080 ;	calc.c:49: for (; *s; s++) putchar(*s);
      001509 8F 82            [24] 4081 	mov	dpl,r7
      00150B 8E 83            [24] 4082 	mov	dph,r6
      00150D 8D F0            [24] 4083 	mov	b,r5
      00150F 12r00r00         [24] 4084 	lcall	__gptrget
      001512 FC               [12] 4085 	mov	r4,a
      001513 60 10            [24] 4086 	jz	00301$
      001515 7B 00            [12] 4087 	mov	r3,#0x00
      001517 8C 82            [24] 4088 	mov	dpl,r4
      001519 8B 83            [24] 4089 	mov	dph,r3
      00151B 12r00r00         [24] 4090 	lcall	_putchar
      00151E 0F               [12] 4091 	inc	r7
                                   4092 ;	calc.c:200: printstr("\r\nsecondary stack underflow\r\n");
      00151F BF 00 E7         [24] 4093 	cjne	r7,#0x00,00423$
      001522 0E               [12] 4094 	inc	r6
      001523 80 E4            [24] 4095 	sjmp	00423$
      001525                       4096 00301$:
                                   4097 ;	calc.c:201: (void)stack_push(ctx->ps, d0);
      001525 E5*00            [12] 4098 	mov	a,_bp
      001527 24 07            [12] 4099 	add	a,#0x07
      001529 F8               [12] 4100 	mov	r0,a
      00152A 86 82            [24] 4101 	mov	dpl,@r0
      00152C 08               [12] 4102 	inc	r0
      00152D 86 83            [24] 4103 	mov	dph,@r0
      00152F 08               [12] 4104 	inc	r0
      001530 86 F0            [24] 4105 	mov	b,@r0
      001532 12r00r00         [24] 4106 	lcall	__gptrget
      001535 FA               [12] 4107 	mov	r2,a
      001536 A3               [24] 4108 	inc	dptr
      001537 12r00r00         [24] 4109 	lcall	__gptrget
      00153A FB               [12] 4110 	mov	r3,a
      00153B A3               [24] 4111 	inc	dptr
      00153C 12r00r00         [24] 4112 	lcall	__gptrget
      00153F FC               [12] 4113 	mov	r4,a
      001540 E5*00            [12] 4114 	mov	a,_bp
      001542 24 15            [12] 4115 	add	a,#0x15
      001544 F8               [12] 4116 	mov	r0,a
      001545 E6               [12] 4117 	mov	a,@r0
      001546 C0 E0            [24] 4118 	push	acc
      001548 08               [12] 4119 	inc	r0
      001549 E6               [12] 4120 	mov	a,@r0
      00154A C0 E0            [24] 4121 	push	acc
      00154C 08               [12] 4122 	inc	r0
      00154D E6               [12] 4123 	mov	a,@r0
      00154E C0 E0            [24] 4124 	push	acc
      001550 08               [12] 4125 	inc	r0
      001551 E6               [12] 4126 	mov	a,@r0
      001552 C0 E0            [24] 4127 	push	acc
      001554 8A 82            [24] 4128 	mov	dpl,r2
      001556 8B 83            [24] 4129 	mov	dph,r3
      001558 8C F0            [24] 4130 	mov	b,r4
      00155A 12r00r00         [24] 4131 	lcall	_stack_push
      00155D E5 81            [12] 4132 	mov	a,sp
      00155F 24 FC            [12] 4133 	add	a,#0xfc
      001561 F5 81            [12] 4134 	mov	sp,a
      001563 02r2Br95         [24] 4135 	ljmp	00249$
      001566                       4136 00147$:
                                   4137 ;	calc.c:203: (void)stack_push(ctx->ps, d1);
      001566 E5*00            [12] 4138 	mov	a,_bp
      001568 24 07            [12] 4139 	add	a,#0x07
      00156A F8               [12] 4140 	mov	r0,a
      00156B 86 82            [24] 4141 	mov	dpl,@r0
      00156D 08               [12] 4142 	inc	r0
      00156E 86 83            [24] 4143 	mov	dph,@r0
      001570 08               [12] 4144 	inc	r0
      001571 86 F0            [24] 4145 	mov	b,@r0
      001573 12r00r00         [24] 4146 	lcall	__gptrget
      001576 FA               [12] 4147 	mov	r2,a
      001577 A3               [24] 4148 	inc	dptr
      001578 12r00r00         [24] 4149 	lcall	__gptrget
      00157B FB               [12] 4150 	mov	r3,a
      00157C A3               [24] 4151 	inc	dptr
      00157D 12r00r00         [24] 4152 	lcall	__gptrget
      001580 FC               [12] 4153 	mov	r4,a
      001581 E5*00            [12] 4154 	mov	a,_bp
      001583 24 19            [12] 4155 	add	a,#0x19
      001585 F8               [12] 4156 	mov	r0,a
      001586 E6               [12] 4157 	mov	a,@r0
      001587 C0 E0            [24] 4158 	push	acc
      001589 08               [12] 4159 	inc	r0
      00158A E6               [12] 4160 	mov	a,@r0
      00158B C0 E0            [24] 4161 	push	acc
      00158D 08               [12] 4162 	inc	r0
      00158E E6               [12] 4163 	mov	a,@r0
      00158F C0 E0            [24] 4164 	push	acc
      001591 08               [12] 4165 	inc	r0
      001592 E6               [12] 4166 	mov	a,@r0
      001593 C0 E0            [24] 4167 	push	acc
      001595 8A 82            [24] 4168 	mov	dpl,r2
      001597 8B 83            [24] 4169 	mov	dph,r3
      001599 8C F0            [24] 4170 	mov	b,r4
      00159B 12r00r00         [24] 4171 	lcall	_stack_push
      00159E E5 81            [12] 4172 	mov	a,sp
      0015A0 24 FC            [12] 4173 	add	a,#0xfc
      0015A2 F5 81            [12] 4174 	mov	sp,a
                                   4175 ;	calc.c:204: (void)stack_push(ctx->ss, d0);
      0015A4 E5*00            [12] 4176 	mov	a,_bp
      0015A6 24 04            [12] 4177 	add	a,#0x04
      0015A8 F8               [12] 4178 	mov	r0,a
      0015A9 86 82            [24] 4179 	mov	dpl,@r0
      0015AB 08               [12] 4180 	inc	r0
      0015AC 86 83            [24] 4181 	mov	dph,@r0
      0015AE 08               [12] 4182 	inc	r0
      0015AF 86 F0            [24] 4183 	mov	b,@r0
      0015B1 12r00r00         [24] 4184 	lcall	__gptrget
      0015B4 FA               [12] 4185 	mov	r2,a
      0015B5 A3               [24] 4186 	inc	dptr
      0015B6 12r00r00         [24] 4187 	lcall	__gptrget
      0015B9 FB               [12] 4188 	mov	r3,a
      0015BA A3               [24] 4189 	inc	dptr
      0015BB 12r00r00         [24] 4190 	lcall	__gptrget
      0015BE FC               [12] 4191 	mov	r4,a
      0015BF E5*00            [12] 4192 	mov	a,_bp
      0015C1 24 15            [12] 4193 	add	a,#0x15
      0015C3 F8               [12] 4194 	mov	r0,a
      0015C4 E6               [12] 4195 	mov	a,@r0
      0015C5 C0 E0            [24] 4196 	push	acc
      0015C7 08               [12] 4197 	inc	r0
      0015C8 E6               [12] 4198 	mov	a,@r0
      0015C9 C0 E0            [24] 4199 	push	acc
      0015CB 08               [12] 4200 	inc	r0
      0015CC E6               [12] 4201 	mov	a,@r0
      0015CD C0 E0            [24] 4202 	push	acc
      0015CF 08               [12] 4203 	inc	r0
      0015D0 E6               [12] 4204 	mov	a,@r0
      0015D1 C0 E0            [24] 4205 	push	acc
      0015D3 8A 82            [24] 4206 	mov	dpl,r2
      0015D5 8B 83            [24] 4207 	mov	dph,r3
      0015D7 8C F0            [24] 4208 	mov	b,r4
      0015D9 12r00r00         [24] 4209 	lcall	_stack_push
      0015DC E5 81            [12] 4210 	mov	a,sp
      0015DE 24 FC            [12] 4211 	add	a,#0xfc
      0015E0 F5 81            [12] 4212 	mov	sp,a
                                   4213 ;	calc.c:207: break;
      0015E2 02r2Br95         [24] 4214 	ljmp	00249$
                                   4215 ;	calc.c:208: case 'X':
      0015E5                       4216 00152$:
                                   4217 ;	calc.c:209: t0 = ctx->ps;
      0015E5 E5*00            [12] 4218 	mov	a,_bp
      0015E7 24 12            [12] 4219 	add	a,#0x12
      0015E9 F8               [12] 4220 	mov	r0,a
      0015EA E5*00            [12] 4221 	mov	a,_bp
      0015EC 24 0B            [12] 4222 	add	a,#0x0b
      0015EE F9               [12] 4223 	mov	r1,a
      0015EF 74 13            [12] 4224 	mov	a,#0x13
      0015F1 26               [12] 4225 	add	a,@r0
      0015F2 F7               [12] 4226 	mov	@r1,a
      0015F3 74 40            [12] 4227 	mov	a,#0x40
      0015F5 08               [12] 4228 	inc	r0
      0015F6 36               [12] 4229 	addc	a,@r0
      0015F7 09               [12] 4230 	inc	r1
      0015F8 F7               [12] 4231 	mov	@r1,a
      0015F9 08               [12] 4232 	inc	r0
      0015FA 09               [12] 4233 	inc	r1
      0015FB E6               [12] 4234 	mov	a,@r0
      0015FC F7               [12] 4235 	mov	@r1,a
      0015FD E5*00            [12] 4236 	mov	a,_bp
      0015FF 24 0B            [12] 4237 	add	a,#0x0b
      001601 F8               [12] 4238 	mov	r0,a
      001602 86 82            [24] 4239 	mov	dpl,@r0
      001604 08               [12] 4240 	inc	r0
      001605 86 83            [24] 4241 	mov	dph,@r0
      001607 08               [12] 4242 	inc	r0
      001608 86 F0            [24] 4243 	mov	b,@r0
      00160A 12r00r00         [24] 4244 	lcall	__gptrget
      00160D FF               [12] 4245 	mov	r7,a
      00160E A3               [24] 4246 	inc	dptr
      00160F 12r00r00         [24] 4247 	lcall	__gptrget
      001612 FE               [12] 4248 	mov	r6,a
      001613 A3               [24] 4249 	inc	dptr
      001614 12r00r00         [24] 4250 	lcall	__gptrget
      001617 FD               [12] 4251 	mov	r5,a
                                   4252 ;	calc.c:210: ctx->ps = ctx->ss;
      001618 E5*00            [12] 4253 	mov	a,_bp
      00161A 24 12            [12] 4254 	add	a,#0x12
      00161C F8               [12] 4255 	mov	r0,a
      00161D E5*00            [12] 4256 	mov	a,_bp
      00161F 24 07            [12] 4257 	add	a,#0x07
      001621 F9               [12] 4258 	mov	r1,a
      001622 74 16            [12] 4259 	mov	a,#0x16
      001624 26               [12] 4260 	add	a,@r0
      001625 F7               [12] 4261 	mov	@r1,a
      001626 74 40            [12] 4262 	mov	a,#0x40
      001628 08               [12] 4263 	inc	r0
      001629 36               [12] 4264 	addc	a,@r0
      00162A 09               [12] 4265 	inc	r1
      00162B F7               [12] 4266 	mov	@r1,a
      00162C 08               [12] 4267 	inc	r0
      00162D 09               [12] 4268 	inc	r1
      00162E E6               [12] 4269 	mov	a,@r0
      00162F F7               [12] 4270 	mov	@r1,a
      001630 E5*00            [12] 4271 	mov	a,_bp
      001632 24 07            [12] 4272 	add	a,#0x07
      001634 F8               [12] 4273 	mov	r0,a
      001635 86 82            [24] 4274 	mov	dpl,@r0
      001637 08               [12] 4275 	inc	r0
      001638 86 83            [24] 4276 	mov	dph,@r0
      00163A 08               [12] 4277 	inc	r0
      00163B 86 F0            [24] 4278 	mov	b,@r0
      00163D 12r00r00         [24] 4279 	lcall	__gptrget
      001640 FA               [12] 4280 	mov	r2,a
      001641 A3               [24] 4281 	inc	dptr
      001642 12r00r00         [24] 4282 	lcall	__gptrget
      001645 FB               [12] 4283 	mov	r3,a
      001646 A3               [24] 4284 	inc	dptr
      001647 12r00r00         [24] 4285 	lcall	__gptrget
      00164A FC               [12] 4286 	mov	r4,a
      00164B E5*00            [12] 4287 	mov	a,_bp
      00164D 24 0B            [12] 4288 	add	a,#0x0b
      00164F F8               [12] 4289 	mov	r0,a
      001650 86 82            [24] 4290 	mov	dpl,@r0
      001652 08               [12] 4291 	inc	r0
      001653 86 83            [24] 4292 	mov	dph,@r0
      001655 08               [12] 4293 	inc	r0
      001656 86 F0            [24] 4294 	mov	b,@r0
      001658 EA               [12] 4295 	mov	a,r2
      001659 12r00r00         [24] 4296 	lcall	__gptrput
      00165C A3               [24] 4297 	inc	dptr
      00165D EB               [12] 4298 	mov	a,r3
      00165E 12r00r00         [24] 4299 	lcall	__gptrput
      001661 A3               [24] 4300 	inc	dptr
      001662 EC               [12] 4301 	mov	a,r4
      001663 12r00r00         [24] 4302 	lcall	__gptrput
                                   4303 ;	calc.c:211: ctx->ss = t0;
      001666 E5*00            [12] 4304 	mov	a,_bp
      001668 24 07            [12] 4305 	add	a,#0x07
      00166A F8               [12] 4306 	mov	r0,a
      00166B 86 82            [24] 4307 	mov	dpl,@r0
      00166D 08               [12] 4308 	inc	r0
      00166E 86 83            [24] 4309 	mov	dph,@r0
      001670 08               [12] 4310 	inc	r0
      001671 86 F0            [24] 4311 	mov	b,@r0
      001673 EF               [12] 4312 	mov	a,r7
      001674 12r00r00         [24] 4313 	lcall	__gptrput
      001677 A3               [24] 4314 	inc	dptr
      001678 EE               [12] 4315 	mov	a,r6
      001679 12r00r00         [24] 4316 	lcall	__gptrput
      00167C A3               [24] 4317 	inc	dptr
      00167D ED               [12] 4318 	mov	a,r5
      00167E 12r00r00         [24] 4319 	lcall	__gptrput
                                   4320 ;	calc.c:212: break;
      001681 02r2Br95         [24] 4321 	ljmp	00249$
                                   4322 ;	calc.c:213: case '+':
      001684                       4323 00153$:
                                   4324 ;	calc.c:214: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      001684 E5*00            [12] 4325 	mov	a,_bp
      001686 24 15            [12] 4326 	add	a,#0x15
      001688 FF               [12] 4327 	mov	r7,a
      001689 7E 00            [12] 4328 	mov	r6,#0x00
      00168B 7D 40            [12] 4329 	mov	r5,#0x40
      00168D E5*00            [12] 4330 	mov	a,_bp
      00168F 24 12            [12] 4331 	add	a,#0x12
      001691 F8               [12] 4332 	mov	r0,a
      001692 E5*00            [12] 4333 	mov	a,_bp
      001694 24 0B            [12] 4334 	add	a,#0x0b
      001696 F9               [12] 4335 	mov	r1,a
      001697 74 13            [12] 4336 	mov	a,#0x13
      001699 26               [12] 4337 	add	a,@r0
      00169A F7               [12] 4338 	mov	@r1,a
      00169B 74 40            [12] 4339 	mov	a,#0x40
      00169D 08               [12] 4340 	inc	r0
      00169E 36               [12] 4341 	addc	a,@r0
      00169F 09               [12] 4342 	inc	r1
      0016A0 F7               [12] 4343 	mov	@r1,a
      0016A1 08               [12] 4344 	inc	r0
      0016A2 09               [12] 4345 	inc	r1
      0016A3 E6               [12] 4346 	mov	a,@r0
      0016A4 F7               [12] 4347 	mov	@r1,a
      0016A5 E5*00            [12] 4348 	mov	a,_bp
      0016A7 24 0B            [12] 4349 	add	a,#0x0b
      0016A9 F8               [12] 4350 	mov	r0,a
      0016AA 86 82            [24] 4351 	mov	dpl,@r0
      0016AC 08               [12] 4352 	inc	r0
      0016AD 86 83            [24] 4353 	mov	dph,@r0
      0016AF 08               [12] 4354 	inc	r0
      0016B0 86 F0            [24] 4355 	mov	b,@r0
      0016B2 12r00r00         [24] 4356 	lcall	__gptrget
      0016B5 FA               [12] 4357 	mov	r2,a
      0016B6 A3               [24] 4358 	inc	dptr
      0016B7 12r00r00         [24] 4359 	lcall	__gptrget
      0016BA FB               [12] 4360 	mov	r3,a
      0016BB A3               [24] 4361 	inc	dptr
      0016BC 12r00r00         [24] 4362 	lcall	__gptrget
      0016BF FC               [12] 4363 	mov	r4,a
      0016C0 C0 07            [24] 4364 	push	ar7
      0016C2 C0 06            [24] 4365 	push	ar6
      0016C4 C0 05            [24] 4366 	push	ar5
      0016C6 8A 82            [24] 4367 	mov	dpl,r2
      0016C8 8B 83            [24] 4368 	mov	dph,r3
      0016CA 8C F0            [24] 4369 	mov	b,r4
      0016CC 12r00r00         [24] 4370 	lcall	_stack_pop
      0016CF AB 82            [24] 4371 	mov	r3,dpl
      0016D1 AC 83            [24] 4372 	mov	r4,dph
      0016D3 15 81            [12] 4373 	dec	sp
      0016D5 15 81            [12] 4374 	dec	sp
      0016D7 15 81            [12] 4375 	dec	sp
      0016D9 EB               [12] 4376 	mov	a,r3
      0016DA 4C               [12] 4377 	orl	a,r4
      0016DB 70 25            [24] 4378 	jnz	00158$
      0016DD 7Fr4E            [12] 4379 	mov	r7,#___str_10
      0016DF 7Es00            [12] 4380 	mov	r6,#(___str_10 >> 8)
      0016E1 7D 80            [12] 4381 	mov	r5,#0x80
                                   4382 ;	calc.c:51: return;
      0016E3                       4383 00426$:
                                   4384 ;	calc.c:49: for (; *s; s++) putchar(*s);
      0016E3 8F 82            [24] 4385 	mov	dpl,r7
      0016E5 8E 83            [24] 4386 	mov	dph,r6
      0016E7 8D F0            [24] 4387 	mov	b,r5
      0016E9 12r00r00         [24] 4388 	lcall	__gptrget
      0016EC FC               [12] 4389 	mov	r4,a
      0016ED 70 03            [24] 4390 	jnz	01326$
      0016EF 02r2Br95         [24] 4391 	ljmp	00249$
      0016F2                       4392 01326$:
      0016F2 7B 00            [12] 4393 	mov	r3,#0x00
      0016F4 8C 82            [24] 4394 	mov	dpl,r4
      0016F6 8B 83            [24] 4395 	mov	dph,r3
      0016F8 12r00r00         [24] 4396 	lcall	_putchar
      0016FB 0F               [12] 4397 	inc	r7
                                   4398 ;	calc.c:214: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      0016FC BF 00 E4         [24] 4399 	cjne	r7,#0x00,00426$
      0016FF 0E               [12] 4400 	inc	r6
      001700 80 E1            [24] 4401 	sjmp	00426$
      001702                       4402 00158$:
                                   4403 ;	calc.c:215: else if (!stack_pop(ctx->ps, &d1)) {
      001702 E5*00            [12] 4404 	mov	a,_bp
      001704 24 19            [12] 4405 	add	a,#0x19
      001706 FF               [12] 4406 	mov	r7,a
      001707 7E 00            [12] 4407 	mov	r6,#0x00
      001709 7D 40            [12] 4408 	mov	r5,#0x40
      00170B E5*00            [12] 4409 	mov	a,_bp
      00170D 24 0B            [12] 4410 	add	a,#0x0b
      00170F F8               [12] 4411 	mov	r0,a
      001710 86 82            [24] 4412 	mov	dpl,@r0
      001712 08               [12] 4413 	inc	r0
      001713 86 83            [24] 4414 	mov	dph,@r0
      001715 08               [12] 4415 	inc	r0
      001716 86 F0            [24] 4416 	mov	b,@r0
      001718 12r00r00         [24] 4417 	lcall	__gptrget
      00171B FA               [12] 4418 	mov	r2,a
      00171C A3               [24] 4419 	inc	dptr
      00171D 12r00r00         [24] 4420 	lcall	__gptrget
      001720 FB               [12] 4421 	mov	r3,a
      001721 A3               [24] 4422 	inc	dptr
      001722 12r00r00         [24] 4423 	lcall	__gptrget
      001725 FC               [12] 4424 	mov	r4,a
      001726 C0 07            [24] 4425 	push	ar7
      001728 C0 06            [24] 4426 	push	ar6
      00172A C0 05            [24] 4427 	push	ar5
      00172C 8A 82            [24] 4428 	mov	dpl,r2
      00172E 8B 83            [24] 4429 	mov	dph,r3
      001730 8C F0            [24] 4430 	mov	b,r4
      001732 12r00r00         [24] 4431 	lcall	_stack_pop
      001735 AB 82            [24] 4432 	mov	r3,dpl
      001737 AC 83            [24] 4433 	mov	r4,dph
      001739 15 81            [12] 4434 	dec	sp
      00173B 15 81            [12] 4435 	dec	sp
      00173D 15 81            [12] 4436 	dec	sp
      00173F EB               [12] 4437 	mov	a,r3
      001740 4C               [12] 4438 	orl	a,r4
      001741 70 63            [24] 4439 	jnz	00155$
                                   4440 ;	calc.c:216: (void)stack_push(ctx->ps, d0);
      001743 E5*00            [12] 4441 	mov	a,_bp
      001745 24 0B            [12] 4442 	add	a,#0x0b
      001747 F8               [12] 4443 	mov	r0,a
      001748 86 82            [24] 4444 	mov	dpl,@r0
      00174A 08               [12] 4445 	inc	r0
      00174B 86 83            [24] 4446 	mov	dph,@r0
      00174D 08               [12] 4447 	inc	r0
      00174E 86 F0            [24] 4448 	mov	b,@r0
      001750 12r00r00         [24] 4449 	lcall	__gptrget
      001753 FA               [12] 4450 	mov	r2,a
      001754 A3               [24] 4451 	inc	dptr
      001755 12r00r00         [24] 4452 	lcall	__gptrget
      001758 FB               [12] 4453 	mov	r3,a
      001759 A3               [24] 4454 	inc	dptr
      00175A 12r00r00         [24] 4455 	lcall	__gptrget
      00175D FC               [12] 4456 	mov	r4,a
      00175E E5*00            [12] 4457 	mov	a,_bp
      001760 24 15            [12] 4458 	add	a,#0x15
      001762 F8               [12] 4459 	mov	r0,a
      001763 E6               [12] 4460 	mov	a,@r0
      001764 C0 E0            [24] 4461 	push	acc
      001766 08               [12] 4462 	inc	r0
      001767 E6               [12] 4463 	mov	a,@r0
      001768 C0 E0            [24] 4464 	push	acc
      00176A 08               [12] 4465 	inc	r0
      00176B E6               [12] 4466 	mov	a,@r0
      00176C C0 E0            [24] 4467 	push	acc
      00176E 08               [12] 4468 	inc	r0
      00176F E6               [12] 4469 	mov	a,@r0
      001770 C0 E0            [24] 4470 	push	acc
      001772 8A 82            [24] 4471 	mov	dpl,r2
      001774 8B 83            [24] 4472 	mov	dph,r3
      001776 8C F0            [24] 4473 	mov	b,r4
      001778 12r00r00         [24] 4474 	lcall	_stack_push
      00177B E5 81            [12] 4475 	mov	a,sp
      00177D 24 FC            [12] 4476 	add	a,#0xfc
      00177F F5 81            [12] 4477 	mov	sp,a
                                   4478 ;	calc.c:217: printstr("\r\nstack underflow\r\n");
      001781 7Fr4E            [12] 4479 	mov	r7,#___str_10
      001783 7Es00            [12] 4480 	mov	r6,#(___str_10 >> 8)
      001785 7D 80            [12] 4481 	mov	r5,#0x80
                                   4482 ;	calc.c:51: return;
      001787                       4483 00429$:
                                   4484 ;	calc.c:49: for (; *s; s++) putchar(*s);
      001787 8F 82            [24] 4485 	mov	dpl,r7
      001789 8E 83            [24] 4486 	mov	dph,r6
      00178B 8D F0            [24] 4487 	mov	b,r5
      00178D 12r00r00         [24] 4488 	lcall	__gptrget
      001790 FC               [12] 4489 	mov	r4,a
      001791 70 03            [24] 4490 	jnz	01329$
      001793 02r2Br95         [24] 4491 	ljmp	00249$
      001796                       4492 01329$:
      001796 7B 00            [12] 4493 	mov	r3,#0x00
      001798 8C 82            [24] 4494 	mov	dpl,r4
      00179A 8B 83            [24] 4495 	mov	dph,r3
      00179C 12r00r00         [24] 4496 	lcall	_putchar
      00179F 0F               [12] 4497 	inc	r7
                                   4498 ;	calc.c:217: printstr("\r\nstack underflow\r\n");
      0017A0 BF 00 E4         [24] 4499 	cjne	r7,#0x00,00429$
      0017A3 0E               [12] 4500 	inc	r6
      0017A4 80 E1            [24] 4501 	sjmp	00429$
      0017A6                       4502 00155$:
                                   4503 ;	calc.c:219: d1 += d0;
      0017A6 E5*00            [12] 4504 	mov	a,_bp
      0017A8 24 19            [12] 4505 	add	a,#0x19
      0017AA F8               [12] 4506 	mov	r0,a
      0017AB E5*00            [12] 4507 	mov	a,_bp
      0017AD 24 15            [12] 4508 	add	a,#0x15
      0017AF F9               [12] 4509 	mov	r1,a
      0017B0 E7               [12] 4510 	mov	a,@r1
      0017B1 26               [12] 4511 	add	a,@r0
      0017B2 F6               [12] 4512 	mov	@r0,a
      0017B3 09               [12] 4513 	inc	r1
      0017B4 E7               [12] 4514 	mov	a,@r1
      0017B5 08               [12] 4515 	inc	r0
      0017B6 36               [12] 4516 	addc	a,@r0
      0017B7 F6               [12] 4517 	mov	@r0,a
      0017B8 09               [12] 4518 	inc	r1
      0017B9 E7               [12] 4519 	mov	a,@r1
      0017BA 08               [12] 4520 	inc	r0
      0017BB 36               [12] 4521 	addc	a,@r0
      0017BC F6               [12] 4522 	mov	@r0,a
      0017BD 09               [12] 4523 	inc	r1
      0017BE E7               [12] 4524 	mov	a,@r1
      0017BF 08               [12] 4525 	inc	r0
      0017C0 36               [12] 4526 	addc	a,@r0
      0017C1 F6               [12] 4527 	mov	@r0,a
                                   4528 ;	calc.c:220: (void)stack_push(ctx->ps, d1);
      0017C2 E5*00            [12] 4529 	mov	a,_bp
      0017C4 24 0B            [12] 4530 	add	a,#0x0b
      0017C6 F8               [12] 4531 	mov	r0,a
      0017C7 86 82            [24] 4532 	mov	dpl,@r0
      0017C9 08               [12] 4533 	inc	r0
      0017CA 86 83            [24] 4534 	mov	dph,@r0
      0017CC 08               [12] 4535 	inc	r0
      0017CD 86 F0            [24] 4536 	mov	b,@r0
      0017CF 12r00r00         [24] 4537 	lcall	__gptrget
      0017D2 FA               [12] 4538 	mov	r2,a
      0017D3 A3               [24] 4539 	inc	dptr
      0017D4 12r00r00         [24] 4540 	lcall	__gptrget
      0017D7 FB               [12] 4541 	mov	r3,a
      0017D8 A3               [24] 4542 	inc	dptr
      0017D9 12r00r00         [24] 4543 	lcall	__gptrget
      0017DC FC               [12] 4544 	mov	r4,a
      0017DD E5*00            [12] 4545 	mov	a,_bp
      0017DF 24 19            [12] 4546 	add	a,#0x19
      0017E1 F8               [12] 4547 	mov	r0,a
      0017E2 E6               [12] 4548 	mov	a,@r0
      0017E3 C0 E0            [24] 4549 	push	acc
      0017E5 08               [12] 4550 	inc	r0
      0017E6 E6               [12] 4551 	mov	a,@r0
      0017E7 C0 E0            [24] 4552 	push	acc
      0017E9 08               [12] 4553 	inc	r0
      0017EA E6               [12] 4554 	mov	a,@r0
      0017EB C0 E0            [24] 4555 	push	acc
      0017ED 08               [12] 4556 	inc	r0
      0017EE E6               [12] 4557 	mov	a,@r0
      0017EF C0 E0            [24] 4558 	push	acc
      0017F1 8A 82            [24] 4559 	mov	dpl,r2
      0017F3 8B 83            [24] 4560 	mov	dph,r3
      0017F5 8C F0            [24] 4561 	mov	b,r4
      0017F7 12r00r00         [24] 4562 	lcall	_stack_push
      0017FA E5 81            [12] 4563 	mov	a,sp
      0017FC 24 FC            [12] 4564 	add	a,#0xfc
      0017FE F5 81            [12] 4565 	mov	sp,a
                                   4566 ;	calc.c:222: break;
      001800 02r2Br95         [24] 4567 	ljmp	00249$
                                   4568 ;	calc.c:223: case '-':
      001803                       4569 00160$:
                                   4570 ;	calc.c:224: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      001803 E5*00            [12] 4571 	mov	a,_bp
      001805 24 15            [12] 4572 	add	a,#0x15
      001807 FF               [12] 4573 	mov	r7,a
      001808 7E 00            [12] 4574 	mov	r6,#0x00
      00180A 7D 40            [12] 4575 	mov	r5,#0x40
      00180C E5*00            [12] 4576 	mov	a,_bp
      00180E 24 12            [12] 4577 	add	a,#0x12
      001810 F8               [12] 4578 	mov	r0,a
      001811 E5*00            [12] 4579 	mov	a,_bp
      001813 24 0B            [12] 4580 	add	a,#0x0b
      001815 F9               [12] 4581 	mov	r1,a
      001816 74 13            [12] 4582 	mov	a,#0x13
      001818 26               [12] 4583 	add	a,@r0
      001819 F7               [12] 4584 	mov	@r1,a
      00181A 74 40            [12] 4585 	mov	a,#0x40
      00181C 08               [12] 4586 	inc	r0
      00181D 36               [12] 4587 	addc	a,@r0
      00181E 09               [12] 4588 	inc	r1
      00181F F7               [12] 4589 	mov	@r1,a
      001820 08               [12] 4590 	inc	r0
      001821 09               [12] 4591 	inc	r1
      001822 E6               [12] 4592 	mov	a,@r0
      001823 F7               [12] 4593 	mov	@r1,a
      001824 E5*00            [12] 4594 	mov	a,_bp
      001826 24 0B            [12] 4595 	add	a,#0x0b
      001828 F8               [12] 4596 	mov	r0,a
      001829 86 82            [24] 4597 	mov	dpl,@r0
      00182B 08               [12] 4598 	inc	r0
      00182C 86 83            [24] 4599 	mov	dph,@r0
      00182E 08               [12] 4600 	inc	r0
      00182F 86 F0            [24] 4601 	mov	b,@r0
      001831 12r00r00         [24] 4602 	lcall	__gptrget
      001834 FA               [12] 4603 	mov	r2,a
      001835 A3               [24] 4604 	inc	dptr
      001836 12r00r00         [24] 4605 	lcall	__gptrget
      001839 FB               [12] 4606 	mov	r3,a
      00183A A3               [24] 4607 	inc	dptr
      00183B 12r00r00         [24] 4608 	lcall	__gptrget
      00183E FC               [12] 4609 	mov	r4,a
      00183F C0 07            [24] 4610 	push	ar7
      001841 C0 06            [24] 4611 	push	ar6
      001843 C0 05            [24] 4612 	push	ar5
      001845 8A 82            [24] 4613 	mov	dpl,r2
      001847 8B 83            [24] 4614 	mov	dph,r3
      001849 8C F0            [24] 4615 	mov	b,r4
      00184B 12r00r00         [24] 4616 	lcall	_stack_pop
      00184E AB 82            [24] 4617 	mov	r3,dpl
      001850 AC 83            [24] 4618 	mov	r4,dph
      001852 15 81            [12] 4619 	dec	sp
      001854 15 81            [12] 4620 	dec	sp
      001856 15 81            [12] 4621 	dec	sp
      001858 EB               [12] 4622 	mov	a,r3
      001859 4C               [12] 4623 	orl	a,r4
      00185A 70 25            [24] 4624 	jnz	00165$
      00185C 7Fr4E            [12] 4625 	mov	r7,#___str_10
      00185E 7Es00            [12] 4626 	mov	r6,#(___str_10 >> 8)
      001860 7D 80            [12] 4627 	mov	r5,#0x80
                                   4628 ;	calc.c:51: return;
      001862                       4629 00432$:
                                   4630 ;	calc.c:49: for (; *s; s++) putchar(*s);
      001862 8F 82            [24] 4631 	mov	dpl,r7
      001864 8E 83            [24] 4632 	mov	dph,r6
      001866 8D F0            [24] 4633 	mov	b,r5
      001868 12r00r00         [24] 4634 	lcall	__gptrget
      00186B FC               [12] 4635 	mov	r4,a
      00186C 70 03            [24] 4636 	jnz	01332$
      00186E 02r2Br95         [24] 4637 	ljmp	00249$
      001871                       4638 01332$:
      001871 7B 00            [12] 4639 	mov	r3,#0x00
      001873 8C 82            [24] 4640 	mov	dpl,r4
      001875 8B 83            [24] 4641 	mov	dph,r3
      001877 12r00r00         [24] 4642 	lcall	_putchar
      00187A 0F               [12] 4643 	inc	r7
                                   4644 ;	calc.c:224: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      00187B BF 00 E4         [24] 4645 	cjne	r7,#0x00,00432$
      00187E 0E               [12] 4646 	inc	r6
      00187F 80 E1            [24] 4647 	sjmp	00432$
      001881                       4648 00165$:
                                   4649 ;	calc.c:225: else if (!stack_pop(ctx->ps, &d1)) {
      001881 E5*00            [12] 4650 	mov	a,_bp
      001883 24 19            [12] 4651 	add	a,#0x19
      001885 FF               [12] 4652 	mov	r7,a
      001886 7E 00            [12] 4653 	mov	r6,#0x00
      001888 7D 40            [12] 4654 	mov	r5,#0x40
      00188A E5*00            [12] 4655 	mov	a,_bp
      00188C 24 0B            [12] 4656 	add	a,#0x0b
      00188E F8               [12] 4657 	mov	r0,a
      00188F 86 82            [24] 4658 	mov	dpl,@r0
      001891 08               [12] 4659 	inc	r0
      001892 86 83            [24] 4660 	mov	dph,@r0
      001894 08               [12] 4661 	inc	r0
      001895 86 F0            [24] 4662 	mov	b,@r0
      001897 12r00r00         [24] 4663 	lcall	__gptrget
      00189A FA               [12] 4664 	mov	r2,a
      00189B A3               [24] 4665 	inc	dptr
      00189C 12r00r00         [24] 4666 	lcall	__gptrget
      00189F FB               [12] 4667 	mov	r3,a
      0018A0 A3               [24] 4668 	inc	dptr
      0018A1 12r00r00         [24] 4669 	lcall	__gptrget
      0018A4 FC               [12] 4670 	mov	r4,a
      0018A5 C0 07            [24] 4671 	push	ar7
      0018A7 C0 06            [24] 4672 	push	ar6
      0018A9 C0 05            [24] 4673 	push	ar5
      0018AB 8A 82            [24] 4674 	mov	dpl,r2
      0018AD 8B 83            [24] 4675 	mov	dph,r3
      0018AF 8C F0            [24] 4676 	mov	b,r4
      0018B1 12r00r00         [24] 4677 	lcall	_stack_pop
      0018B4 AB 82            [24] 4678 	mov	r3,dpl
      0018B6 AC 83            [24] 4679 	mov	r4,dph
      0018B8 15 81            [12] 4680 	dec	sp
      0018BA 15 81            [12] 4681 	dec	sp
      0018BC 15 81            [12] 4682 	dec	sp
      0018BE EB               [12] 4683 	mov	a,r3
      0018BF 4C               [12] 4684 	orl	a,r4
      0018C0 70 63            [24] 4685 	jnz	00162$
                                   4686 ;	calc.c:226: (void)stack_push(ctx->ps, d0);
      0018C2 E5*00            [12] 4687 	mov	a,_bp
      0018C4 24 0B            [12] 4688 	add	a,#0x0b
      0018C6 F8               [12] 4689 	mov	r0,a
      0018C7 86 82            [24] 4690 	mov	dpl,@r0
      0018C9 08               [12] 4691 	inc	r0
      0018CA 86 83            [24] 4692 	mov	dph,@r0
      0018CC 08               [12] 4693 	inc	r0
      0018CD 86 F0            [24] 4694 	mov	b,@r0
      0018CF 12r00r00         [24] 4695 	lcall	__gptrget
      0018D2 FA               [12] 4696 	mov	r2,a
      0018D3 A3               [24] 4697 	inc	dptr
      0018D4 12r00r00         [24] 4698 	lcall	__gptrget
      0018D7 FB               [12] 4699 	mov	r3,a
      0018D8 A3               [24] 4700 	inc	dptr
      0018D9 12r00r00         [24] 4701 	lcall	__gptrget
      0018DC FC               [12] 4702 	mov	r4,a
      0018DD E5*00            [12] 4703 	mov	a,_bp
      0018DF 24 15            [12] 4704 	add	a,#0x15
      0018E1 F8               [12] 4705 	mov	r0,a
      0018E2 E6               [12] 4706 	mov	a,@r0
      0018E3 C0 E0            [24] 4707 	push	acc
      0018E5 08               [12] 4708 	inc	r0
      0018E6 E6               [12] 4709 	mov	a,@r0
      0018E7 C0 E0            [24] 4710 	push	acc
      0018E9 08               [12] 4711 	inc	r0
      0018EA E6               [12] 4712 	mov	a,@r0
      0018EB C0 E0            [24] 4713 	push	acc
      0018ED 08               [12] 4714 	inc	r0
      0018EE E6               [12] 4715 	mov	a,@r0
      0018EF C0 E0            [24] 4716 	push	acc
      0018F1 8A 82            [24] 4717 	mov	dpl,r2
      0018F3 8B 83            [24] 4718 	mov	dph,r3
      0018F5 8C F0            [24] 4719 	mov	b,r4
      0018F7 12r00r00         [24] 4720 	lcall	_stack_push
      0018FA E5 81            [12] 4721 	mov	a,sp
      0018FC 24 FC            [12] 4722 	add	a,#0xfc
      0018FE F5 81            [12] 4723 	mov	sp,a
                                   4724 ;	calc.c:227: printstr("\r\nstack underflow\r\n");
      001900 7Fr4E            [12] 4725 	mov	r7,#___str_10
      001902 7Es00            [12] 4726 	mov	r6,#(___str_10 >> 8)
      001904 7D 80            [12] 4727 	mov	r5,#0x80
                                   4728 ;	calc.c:51: return;
      001906                       4729 00435$:
                                   4730 ;	calc.c:49: for (; *s; s++) putchar(*s);
      001906 8F 82            [24] 4731 	mov	dpl,r7
      001908 8E 83            [24] 4732 	mov	dph,r6
      00190A 8D F0            [24] 4733 	mov	b,r5
      00190C 12r00r00         [24] 4734 	lcall	__gptrget
      00190F FC               [12] 4735 	mov	r4,a
      001910 70 03            [24] 4736 	jnz	01335$
      001912 02r2Br95         [24] 4737 	ljmp	00249$
      001915                       4738 01335$:
      001915 7B 00            [12] 4739 	mov	r3,#0x00
      001917 8C 82            [24] 4740 	mov	dpl,r4
      001919 8B 83            [24] 4741 	mov	dph,r3
      00191B 12r00r00         [24] 4742 	lcall	_putchar
      00191E 0F               [12] 4743 	inc	r7
                                   4744 ;	calc.c:227: printstr("\r\nstack underflow\r\n");
      00191F BF 00 E4         [24] 4745 	cjne	r7,#0x00,00435$
      001922 0E               [12] 4746 	inc	r6
      001923 80 E1            [24] 4747 	sjmp	00435$
      001925                       4748 00162$:
                                   4749 ;	calc.c:229: d1 -= d0;
      001925 E5*00            [12] 4750 	mov	a,_bp
      001927 24 19            [12] 4751 	add	a,#0x19
      001929 F8               [12] 4752 	mov	r0,a
      00192A E5*00            [12] 4753 	mov	a,_bp
      00192C 24 15            [12] 4754 	add	a,#0x15
      00192E F9               [12] 4755 	mov	r1,a
      00192F E6               [12] 4756 	mov	a,@r0
      001930 C3               [12] 4757 	clr	c
      001931 97               [12] 4758 	subb	a,@r1
      001932 F6               [12] 4759 	mov	@r0,a
      001933 08               [12] 4760 	inc	r0
      001934 E6               [12] 4761 	mov	a,@r0
      001935 09               [12] 4762 	inc	r1
      001936 97               [12] 4763 	subb	a,@r1
      001937 F6               [12] 4764 	mov	@r0,a
      001938 08               [12] 4765 	inc	r0
      001939 E6               [12] 4766 	mov	a,@r0
      00193A 09               [12] 4767 	inc	r1
      00193B 97               [12] 4768 	subb	a,@r1
      00193C F6               [12] 4769 	mov	@r0,a
      00193D 08               [12] 4770 	inc	r0
      00193E E6               [12] 4771 	mov	a,@r0
      00193F 09               [12] 4772 	inc	r1
      001940 97               [12] 4773 	subb	a,@r1
      001941 F6               [12] 4774 	mov	@r0,a
                                   4775 ;	calc.c:230: (void)stack_push(ctx->ps, d1);
      001942 E5*00            [12] 4776 	mov	a,_bp
      001944 24 0B            [12] 4777 	add	a,#0x0b
      001946 F8               [12] 4778 	mov	r0,a
      001947 86 82            [24] 4779 	mov	dpl,@r0
      001949 08               [12] 4780 	inc	r0
      00194A 86 83            [24] 4781 	mov	dph,@r0
      00194C 08               [12] 4782 	inc	r0
      00194D 86 F0            [24] 4783 	mov	b,@r0
      00194F 12r00r00         [24] 4784 	lcall	__gptrget
      001952 FA               [12] 4785 	mov	r2,a
      001953 A3               [24] 4786 	inc	dptr
      001954 12r00r00         [24] 4787 	lcall	__gptrget
      001957 FB               [12] 4788 	mov	r3,a
      001958 A3               [24] 4789 	inc	dptr
      001959 12r00r00         [24] 4790 	lcall	__gptrget
      00195C FC               [12] 4791 	mov	r4,a
      00195D E5*00            [12] 4792 	mov	a,_bp
      00195F 24 19            [12] 4793 	add	a,#0x19
      001961 F8               [12] 4794 	mov	r0,a
      001962 E6               [12] 4795 	mov	a,@r0
      001963 C0 E0            [24] 4796 	push	acc
      001965 08               [12] 4797 	inc	r0
      001966 E6               [12] 4798 	mov	a,@r0
      001967 C0 E0            [24] 4799 	push	acc
      001969 08               [12] 4800 	inc	r0
      00196A E6               [12] 4801 	mov	a,@r0
      00196B C0 E0            [24] 4802 	push	acc
      00196D 08               [12] 4803 	inc	r0
      00196E E6               [12] 4804 	mov	a,@r0
      00196F C0 E0            [24] 4805 	push	acc
      001971 8A 82            [24] 4806 	mov	dpl,r2
      001973 8B 83            [24] 4807 	mov	dph,r3
      001975 8C F0            [24] 4808 	mov	b,r4
      001977 12r00r00         [24] 4809 	lcall	_stack_push
      00197A E5 81            [12] 4810 	mov	a,sp
      00197C 24 FC            [12] 4811 	add	a,#0xfc
      00197E F5 81            [12] 4812 	mov	sp,a
                                   4813 ;	calc.c:232: break;
      001980 02r2Br95         [24] 4814 	ljmp	00249$
                                   4815 ;	calc.c:233: case '*':
      001983                       4816 00167$:
                                   4817 ;	calc.c:234: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      001983 E5*00            [12] 4818 	mov	a,_bp
      001985 24 15            [12] 4819 	add	a,#0x15
      001987 FF               [12] 4820 	mov	r7,a
      001988 7E 00            [12] 4821 	mov	r6,#0x00
      00198A 7D 40            [12] 4822 	mov	r5,#0x40
      00198C E5*00            [12] 4823 	mov	a,_bp
      00198E 24 12            [12] 4824 	add	a,#0x12
      001990 F8               [12] 4825 	mov	r0,a
      001991 E5*00            [12] 4826 	mov	a,_bp
      001993 24 0B            [12] 4827 	add	a,#0x0b
      001995 F9               [12] 4828 	mov	r1,a
      001996 74 13            [12] 4829 	mov	a,#0x13
      001998 26               [12] 4830 	add	a,@r0
      001999 F7               [12] 4831 	mov	@r1,a
      00199A 74 40            [12] 4832 	mov	a,#0x40
      00199C 08               [12] 4833 	inc	r0
      00199D 36               [12] 4834 	addc	a,@r0
      00199E 09               [12] 4835 	inc	r1
      00199F F7               [12] 4836 	mov	@r1,a
      0019A0 08               [12] 4837 	inc	r0
      0019A1 09               [12] 4838 	inc	r1
      0019A2 E6               [12] 4839 	mov	a,@r0
      0019A3 F7               [12] 4840 	mov	@r1,a
      0019A4 E5*00            [12] 4841 	mov	a,_bp
      0019A6 24 0B            [12] 4842 	add	a,#0x0b
      0019A8 F8               [12] 4843 	mov	r0,a
      0019A9 86 82            [24] 4844 	mov	dpl,@r0
      0019AB 08               [12] 4845 	inc	r0
      0019AC 86 83            [24] 4846 	mov	dph,@r0
      0019AE 08               [12] 4847 	inc	r0
      0019AF 86 F0            [24] 4848 	mov	b,@r0
      0019B1 12r00r00         [24] 4849 	lcall	__gptrget
      0019B4 FA               [12] 4850 	mov	r2,a
      0019B5 A3               [24] 4851 	inc	dptr
      0019B6 12r00r00         [24] 4852 	lcall	__gptrget
      0019B9 FB               [12] 4853 	mov	r3,a
      0019BA A3               [24] 4854 	inc	dptr
      0019BB 12r00r00         [24] 4855 	lcall	__gptrget
      0019BE FC               [12] 4856 	mov	r4,a
      0019BF C0 07            [24] 4857 	push	ar7
      0019C1 C0 06            [24] 4858 	push	ar6
      0019C3 C0 05            [24] 4859 	push	ar5
      0019C5 8A 82            [24] 4860 	mov	dpl,r2
      0019C7 8B 83            [24] 4861 	mov	dph,r3
      0019C9 8C F0            [24] 4862 	mov	b,r4
      0019CB 12r00r00         [24] 4863 	lcall	_stack_pop
      0019CE AB 82            [24] 4864 	mov	r3,dpl
      0019D0 AC 83            [24] 4865 	mov	r4,dph
      0019D2 15 81            [12] 4866 	dec	sp
      0019D4 15 81            [12] 4867 	dec	sp
      0019D6 15 81            [12] 4868 	dec	sp
      0019D8 EB               [12] 4869 	mov	a,r3
      0019D9 4C               [12] 4870 	orl	a,r4
      0019DA 70 25            [24] 4871 	jnz	00172$
      0019DC 7Fr4E            [12] 4872 	mov	r7,#___str_10
      0019DE 7Es00            [12] 4873 	mov	r6,#(___str_10 >> 8)
      0019E0 7D 80            [12] 4874 	mov	r5,#0x80
                                   4875 ;	calc.c:51: return;
      0019E2                       4876 00438$:
                                   4877 ;	calc.c:49: for (; *s; s++) putchar(*s);
      0019E2 8F 82            [24] 4878 	mov	dpl,r7
      0019E4 8E 83            [24] 4879 	mov	dph,r6
      0019E6 8D F0            [24] 4880 	mov	b,r5
      0019E8 12r00r00         [24] 4881 	lcall	__gptrget
      0019EB FC               [12] 4882 	mov	r4,a
      0019EC 70 03            [24] 4883 	jnz	01338$
      0019EE 02r2Br95         [24] 4884 	ljmp	00249$
      0019F1                       4885 01338$:
      0019F1 7B 00            [12] 4886 	mov	r3,#0x00
      0019F3 8C 82            [24] 4887 	mov	dpl,r4
      0019F5 8B 83            [24] 4888 	mov	dph,r3
      0019F7 12r00r00         [24] 4889 	lcall	_putchar
      0019FA 0F               [12] 4890 	inc	r7
                                   4891 ;	calc.c:234: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      0019FB BF 00 E4         [24] 4892 	cjne	r7,#0x00,00438$
      0019FE 0E               [12] 4893 	inc	r6
      0019FF 80 E1            [24] 4894 	sjmp	00438$
      001A01                       4895 00172$:
                                   4896 ;	calc.c:235: else if (!stack_pop(ctx->ps, &d1)) {
      001A01 E5*00            [12] 4897 	mov	a,_bp
      001A03 24 19            [12] 4898 	add	a,#0x19
      001A05 FF               [12] 4899 	mov	r7,a
      001A06 7E 00            [12] 4900 	mov	r6,#0x00
      001A08 7D 40            [12] 4901 	mov	r5,#0x40
      001A0A E5*00            [12] 4902 	mov	a,_bp
      001A0C 24 0B            [12] 4903 	add	a,#0x0b
      001A0E F8               [12] 4904 	mov	r0,a
      001A0F 86 82            [24] 4905 	mov	dpl,@r0
      001A11 08               [12] 4906 	inc	r0
      001A12 86 83            [24] 4907 	mov	dph,@r0
      001A14 08               [12] 4908 	inc	r0
      001A15 86 F0            [24] 4909 	mov	b,@r0
      001A17 12r00r00         [24] 4910 	lcall	__gptrget
      001A1A FA               [12] 4911 	mov	r2,a
      001A1B A3               [24] 4912 	inc	dptr
      001A1C 12r00r00         [24] 4913 	lcall	__gptrget
      001A1F FB               [12] 4914 	mov	r3,a
      001A20 A3               [24] 4915 	inc	dptr
      001A21 12r00r00         [24] 4916 	lcall	__gptrget
      001A24 FC               [12] 4917 	mov	r4,a
      001A25 C0 07            [24] 4918 	push	ar7
      001A27 C0 06            [24] 4919 	push	ar6
      001A29 C0 05            [24] 4920 	push	ar5
      001A2B 8A 82            [24] 4921 	mov	dpl,r2
      001A2D 8B 83            [24] 4922 	mov	dph,r3
      001A2F 8C F0            [24] 4923 	mov	b,r4
      001A31 12r00r00         [24] 4924 	lcall	_stack_pop
      001A34 AB 82            [24] 4925 	mov	r3,dpl
      001A36 AC 83            [24] 4926 	mov	r4,dph
      001A38 15 81            [12] 4927 	dec	sp
      001A3A 15 81            [12] 4928 	dec	sp
      001A3C 15 81            [12] 4929 	dec	sp
      001A3E EB               [12] 4930 	mov	a,r3
      001A3F 4C               [12] 4931 	orl	a,r4
      001A40 70 63            [24] 4932 	jnz	00169$
                                   4933 ;	calc.c:236: (void)stack_push(ctx->ps, d0);
      001A42 E5*00            [12] 4934 	mov	a,_bp
      001A44 24 0B            [12] 4935 	add	a,#0x0b
      001A46 F8               [12] 4936 	mov	r0,a
      001A47 86 82            [24] 4937 	mov	dpl,@r0
      001A49 08               [12] 4938 	inc	r0
      001A4A 86 83            [24] 4939 	mov	dph,@r0
      001A4C 08               [12] 4940 	inc	r0
      001A4D 86 F0            [24] 4941 	mov	b,@r0
      001A4F 12r00r00         [24] 4942 	lcall	__gptrget
      001A52 FA               [12] 4943 	mov	r2,a
      001A53 A3               [24] 4944 	inc	dptr
      001A54 12r00r00         [24] 4945 	lcall	__gptrget
      001A57 FB               [12] 4946 	mov	r3,a
      001A58 A3               [24] 4947 	inc	dptr
      001A59 12r00r00         [24] 4948 	lcall	__gptrget
      001A5C FC               [12] 4949 	mov	r4,a
      001A5D E5*00            [12] 4950 	mov	a,_bp
      001A5F 24 15            [12] 4951 	add	a,#0x15
      001A61 F8               [12] 4952 	mov	r0,a
      001A62 E6               [12] 4953 	mov	a,@r0
      001A63 C0 E0            [24] 4954 	push	acc
      001A65 08               [12] 4955 	inc	r0
      001A66 E6               [12] 4956 	mov	a,@r0
      001A67 C0 E0            [24] 4957 	push	acc
      001A69 08               [12] 4958 	inc	r0
      001A6A E6               [12] 4959 	mov	a,@r0
      001A6B C0 E0            [24] 4960 	push	acc
      001A6D 08               [12] 4961 	inc	r0
      001A6E E6               [12] 4962 	mov	a,@r0
      001A6F C0 E0            [24] 4963 	push	acc
      001A71 8A 82            [24] 4964 	mov	dpl,r2
      001A73 8B 83            [24] 4965 	mov	dph,r3
      001A75 8C F0            [24] 4966 	mov	b,r4
      001A77 12r00r00         [24] 4967 	lcall	_stack_push
      001A7A E5 81            [12] 4968 	mov	a,sp
      001A7C 24 FC            [12] 4969 	add	a,#0xfc
      001A7E F5 81            [12] 4970 	mov	sp,a
                                   4971 ;	calc.c:237: printstr("\r\nstack underflow\r\n");
      001A80 7Fr4E            [12] 4972 	mov	r7,#___str_10
      001A82 7Es00            [12] 4973 	mov	r6,#(___str_10 >> 8)
      001A84 7D 80            [12] 4974 	mov	r5,#0x80
                                   4975 ;	calc.c:51: return;
      001A86                       4976 00441$:
                                   4977 ;	calc.c:49: for (; *s; s++) putchar(*s);
      001A86 8F 82            [24] 4978 	mov	dpl,r7
      001A88 8E 83            [24] 4979 	mov	dph,r6
      001A8A 8D F0            [24] 4980 	mov	b,r5
      001A8C 12r00r00         [24] 4981 	lcall	__gptrget
      001A8F FC               [12] 4982 	mov	r4,a
      001A90 70 03            [24] 4983 	jnz	01341$
      001A92 02r2Br95         [24] 4984 	ljmp	00249$
      001A95                       4985 01341$:
      001A95 7B 00            [12] 4986 	mov	r3,#0x00
      001A97 8C 82            [24] 4987 	mov	dpl,r4
      001A99 8B 83            [24] 4988 	mov	dph,r3
      001A9B 12r00r00         [24] 4989 	lcall	_putchar
      001A9E 0F               [12] 4990 	inc	r7
                                   4991 ;	calc.c:237: printstr("\r\nstack underflow\r\n");
      001A9F BF 00 E4         [24] 4992 	cjne	r7,#0x00,00441$
      001AA2 0E               [12] 4993 	inc	r6
      001AA3 80 E1            [24] 4994 	sjmp	00441$
      001AA5                       4995 00169$:
                                   4996 ;	calc.c:239: d1 *= d0;
      001AA5 E5*00            [12] 4997 	mov	a,_bp
      001AA7 24 15            [12] 4998 	add	a,#0x15
      001AA9 F8               [12] 4999 	mov	r0,a
      001AAA E6               [12] 5000 	mov	a,@r0
      001AAB C0 E0            [24] 5001 	push	acc
      001AAD 08               [12] 5002 	inc	r0
      001AAE E6               [12] 5003 	mov	a,@r0
      001AAF C0 E0            [24] 5004 	push	acc
      001AB1 08               [12] 5005 	inc	r0
      001AB2 E6               [12] 5006 	mov	a,@r0
      001AB3 C0 E0            [24] 5007 	push	acc
      001AB5 08               [12] 5008 	inc	r0
      001AB6 E6               [12] 5009 	mov	a,@r0
      001AB7 C0 E0            [24] 5010 	push	acc
      001AB9 E5*00            [12] 5011 	mov	a,_bp
      001ABB 24 19            [12] 5012 	add	a,#0x19
      001ABD F8               [12] 5013 	mov	r0,a
      001ABE 86 82            [24] 5014 	mov	dpl,@r0
      001AC0 08               [12] 5015 	inc	r0
      001AC1 86 83            [24] 5016 	mov	dph,@r0
      001AC3 08               [12] 5017 	inc	r0
      001AC4 86 F0            [24] 5018 	mov	b,@r0
      001AC6 08               [12] 5019 	inc	r0
      001AC7 E6               [12] 5020 	mov	a,@r0
      001AC8 12r00r00         [24] 5021 	lcall	__mullong
      001ACB AF 82            [24] 5022 	mov	r7,dpl
      001ACD AE 83            [24] 5023 	mov	r6,dph
      001ACF AD F0            [24] 5024 	mov	r5,b
      001AD1 FC               [12] 5025 	mov	r4,a
      001AD2 E5 81            [12] 5026 	mov	a,sp
      001AD4 24 FC            [12] 5027 	add	a,#0xfc
      001AD6 F5 81            [12] 5028 	mov	sp,a
      001AD8 E5*00            [12] 5029 	mov	a,_bp
      001ADA 24 19            [12] 5030 	add	a,#0x19
      001ADC F8               [12] 5031 	mov	r0,a
      001ADD A6 07            [24] 5032 	mov	@r0,ar7
      001ADF 08               [12] 5033 	inc	r0
      001AE0 A6 06            [24] 5034 	mov	@r0,ar6
      001AE2 08               [12] 5035 	inc	r0
      001AE3 A6 05            [24] 5036 	mov	@r0,ar5
      001AE5 08               [12] 5037 	inc	r0
      001AE6 A6 04            [24] 5038 	mov	@r0,ar4
                                   5039 ;	calc.c:240: (void)stack_push(ctx->ps, d1);
      001AE8 E5*00            [12] 5040 	mov	a,_bp
      001AEA 24 0B            [12] 5041 	add	a,#0x0b
      001AEC F8               [12] 5042 	mov	r0,a
      001AED 86 82            [24] 5043 	mov	dpl,@r0
      001AEF 08               [12] 5044 	inc	r0
      001AF0 86 83            [24] 5045 	mov	dph,@r0
      001AF2 08               [12] 5046 	inc	r0
      001AF3 86 F0            [24] 5047 	mov	b,@r0
      001AF5 12r00r00         [24] 5048 	lcall	__gptrget
      001AF8 FA               [12] 5049 	mov	r2,a
      001AF9 A3               [24] 5050 	inc	dptr
      001AFA 12r00r00         [24] 5051 	lcall	__gptrget
      001AFD FB               [12] 5052 	mov	r3,a
      001AFE A3               [24] 5053 	inc	dptr
      001AFF 12r00r00         [24] 5054 	lcall	__gptrget
      001B02 FC               [12] 5055 	mov	r4,a
      001B03 E5*00            [12] 5056 	mov	a,_bp
      001B05 24 19            [12] 5057 	add	a,#0x19
      001B07 F8               [12] 5058 	mov	r0,a
      001B08 E6               [12] 5059 	mov	a,@r0
      001B09 C0 E0            [24] 5060 	push	acc
      001B0B 08               [12] 5061 	inc	r0
      001B0C E6               [12] 5062 	mov	a,@r0
      001B0D C0 E0            [24] 5063 	push	acc
      001B0F 08               [12] 5064 	inc	r0
      001B10 E6               [12] 5065 	mov	a,@r0
      001B11 C0 E0            [24] 5066 	push	acc
      001B13 08               [12] 5067 	inc	r0
      001B14 E6               [12] 5068 	mov	a,@r0
      001B15 C0 E0            [24] 5069 	push	acc
      001B17 8A 82            [24] 5070 	mov	dpl,r2
      001B19 8B 83            [24] 5071 	mov	dph,r3
      001B1B 8C F0            [24] 5072 	mov	b,r4
      001B1D 12r00r00         [24] 5073 	lcall	_stack_push
      001B20 E5 81            [12] 5074 	mov	a,sp
      001B22 24 FC            [12] 5075 	add	a,#0xfc
      001B24 F5 81            [12] 5076 	mov	sp,a
                                   5077 ;	calc.c:242: break;
      001B26 02r2Br95         [24] 5078 	ljmp	00249$
                                   5079 ;	calc.c:244: case '\\':
      001B29                       5080 00175$:
                                   5081 ;	calc.c:245: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      001B29 C0 05            [24] 5082 	push	ar5
      001B2B C0 06            [24] 5083 	push	ar6
      001B2D C0 07            [24] 5084 	push	ar7
      001B2F E5*00            [12] 5085 	mov	a,_bp
      001B31 24 15            [12] 5086 	add	a,#0x15
      001B33 FC               [12] 5087 	mov	r4,a
      001B34 7B 00            [12] 5088 	mov	r3,#0x00
      001B36 7A 40            [12] 5089 	mov	r2,#0x40
      001B38 E5*00            [12] 5090 	mov	a,_bp
      001B3A 24 12            [12] 5091 	add	a,#0x12
      001B3C F8               [12] 5092 	mov	r0,a
      001B3D E5*00            [12] 5093 	mov	a,_bp
      001B3F 24 0B            [12] 5094 	add	a,#0x0b
      001B41 F9               [12] 5095 	mov	r1,a
      001B42 74 13            [12] 5096 	mov	a,#0x13
      001B44 26               [12] 5097 	add	a,@r0
      001B45 F7               [12] 5098 	mov	@r1,a
      001B46 74 40            [12] 5099 	mov	a,#0x40
      001B48 08               [12] 5100 	inc	r0
      001B49 36               [12] 5101 	addc	a,@r0
      001B4A 09               [12] 5102 	inc	r1
      001B4B F7               [12] 5103 	mov	@r1,a
      001B4C 08               [12] 5104 	inc	r0
      001B4D 09               [12] 5105 	inc	r1
      001B4E E6               [12] 5106 	mov	a,@r0
      001B4F F7               [12] 5107 	mov	@r1,a
      001B50 E5*00            [12] 5108 	mov	a,_bp
      001B52 24 0B            [12] 5109 	add	a,#0x0b
      001B54 F8               [12] 5110 	mov	r0,a
      001B55 86 82            [24] 5111 	mov	dpl,@r0
      001B57 08               [12] 5112 	inc	r0
      001B58 86 83            [24] 5113 	mov	dph,@r0
      001B5A 08               [12] 5114 	inc	r0
      001B5B 86 F0            [24] 5115 	mov	b,@r0
      001B5D 12r00r00         [24] 5116 	lcall	__gptrget
      001B60 FD               [12] 5117 	mov	r5,a
      001B61 A3               [24] 5118 	inc	dptr
      001B62 12r00r00         [24] 5119 	lcall	__gptrget
      001B65 FE               [12] 5120 	mov	r6,a
      001B66 A3               [24] 5121 	inc	dptr
      001B67 12r00r00         [24] 5122 	lcall	__gptrget
      001B6A FF               [12] 5123 	mov	r7,a
      001B6B C0 05            [24] 5124 	push	ar5
      001B6D C0 04            [24] 5125 	push	ar4
      001B6F C0 03            [24] 5126 	push	ar3
      001B71 C0 02            [24] 5127 	push	ar2
      001B73 8D 82            [24] 5128 	mov	dpl,r5
      001B75 8E 83            [24] 5129 	mov	dph,r6
      001B77 8F F0            [24] 5130 	mov	b,r7
      001B79 12r00r00         [24] 5131 	lcall	_stack_pop
      001B7C AE 82            [24] 5132 	mov	r6,dpl
      001B7E AF 83            [24] 5133 	mov	r7,dph
      001B80 15 81            [12] 5134 	dec	sp
      001B82 15 81            [12] 5135 	dec	sp
      001B84 15 81            [12] 5136 	dec	sp
      001B86 D0 05            [24] 5137 	pop	ar5
      001B88 EE               [12] 5138 	mov	a,r6
      001B89 4F               [12] 5139 	orl	a,r7
      001B8A D0 07            [24] 5140 	pop	ar7
      001B8C D0 06            [24] 5141 	pop	ar6
      001B8E D0 05            [24] 5142 	pop	ar5
      001B90 70 25            [24] 5143 	jnz	00186$
      001B92 7Fr4E            [12] 5144 	mov	r7,#___str_10
      001B94 7Es00            [12] 5145 	mov	r6,#(___str_10 >> 8)
      001B96 7D 80            [12] 5146 	mov	r5,#0x80
                                   5147 ;	calc.c:51: return;
      001B98                       5148 00444$:
                                   5149 ;	calc.c:49: for (; *s; s++) putchar(*s);
      001B98 8F 82            [24] 5150 	mov	dpl,r7
      001B9A 8E 83            [24] 5151 	mov	dph,r6
      001B9C 8D F0            [24] 5152 	mov	b,r5
      001B9E 12r00r00         [24] 5153 	lcall	__gptrget
      001BA1 FC               [12] 5154 	mov	r4,a
      001BA2 70 03            [24] 5155 	jnz	01344$
      001BA4 02r2Br95         [24] 5156 	ljmp	00249$
      001BA7                       5157 01344$:
      001BA7 7B 00            [12] 5158 	mov	r3,#0x00
      001BA9 8C 82            [24] 5159 	mov	dpl,r4
      001BAB 8B 83            [24] 5160 	mov	dph,r3
      001BAD 12r00r00         [24] 5161 	lcall	_putchar
      001BB0 0F               [12] 5162 	inc	r7
                                   5163 ;	calc.c:245: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      001BB1 BF 00 E4         [24] 5164 	cjne	r7,#0x00,00444$
      001BB4 0E               [12] 5165 	inc	r6
      001BB5 80 E1            [24] 5166 	sjmp	00444$
      001BB7                       5167 00186$:
                                   5168 ;	calc.c:246: else if (!stack_pop(ctx->ps, &d1)) {
      001BB7 C0 05            [24] 5169 	push	ar5
      001BB9 C0 06            [24] 5170 	push	ar6
      001BBB C0 07            [24] 5171 	push	ar7
      001BBD E5*00            [12] 5172 	mov	a,_bp
      001BBF 24 19            [12] 5173 	add	a,#0x19
      001BC1 FC               [12] 5174 	mov	r4,a
      001BC2 7B 00            [12] 5175 	mov	r3,#0x00
      001BC4 7A 40            [12] 5176 	mov	r2,#0x40
      001BC6 E5*00            [12] 5177 	mov	a,_bp
      001BC8 24 0B            [12] 5178 	add	a,#0x0b
      001BCA F8               [12] 5179 	mov	r0,a
      001BCB 86 82            [24] 5180 	mov	dpl,@r0
      001BCD 08               [12] 5181 	inc	r0
      001BCE 86 83            [24] 5182 	mov	dph,@r0
      001BD0 08               [12] 5183 	inc	r0
      001BD1 86 F0            [24] 5184 	mov	b,@r0
      001BD3 12r00r00         [24] 5185 	lcall	__gptrget
      001BD6 FD               [12] 5186 	mov	r5,a
      001BD7 A3               [24] 5187 	inc	dptr
      001BD8 12r00r00         [24] 5188 	lcall	__gptrget
      001BDB FE               [12] 5189 	mov	r6,a
      001BDC A3               [24] 5190 	inc	dptr
      001BDD 12r00r00         [24] 5191 	lcall	__gptrget
      001BE0 FF               [12] 5192 	mov	r7,a
      001BE1 C0 05            [24] 5193 	push	ar5
      001BE3 C0 04            [24] 5194 	push	ar4
      001BE5 C0 03            [24] 5195 	push	ar3
      001BE7 C0 02            [24] 5196 	push	ar2
      001BE9 8D 82            [24] 5197 	mov	dpl,r5
      001BEB 8E 83            [24] 5198 	mov	dph,r6
      001BED 8F F0            [24] 5199 	mov	b,r7
      001BEF 12r00r00         [24] 5200 	lcall	_stack_pop
      001BF2 AE 82            [24] 5201 	mov	r6,dpl
      001BF4 AF 83            [24] 5202 	mov	r7,dph
      001BF6 15 81            [12] 5203 	dec	sp
      001BF8 15 81            [12] 5204 	dec	sp
      001BFA 15 81            [12] 5205 	dec	sp
      001BFC D0 05            [24] 5206 	pop	ar5
      001BFE EE               [12] 5207 	mov	a,r6
      001BFF 4F               [12] 5208 	orl	a,r7
      001C00 D0 07            [24] 5209 	pop	ar7
      001C02 D0 06            [24] 5210 	pop	ar6
      001C04 D0 05            [24] 5211 	pop	ar5
      001C06 70 63            [24] 5212 	jnz	00183$
                                   5213 ;	calc.c:247: (void)stack_push(ctx->ps, d0);
      001C08 E5*00            [12] 5214 	mov	a,_bp
      001C0A 24 0B            [12] 5215 	add	a,#0x0b
      001C0C F8               [12] 5216 	mov	r0,a
      001C0D 86 82            [24] 5217 	mov	dpl,@r0
      001C0F 08               [12] 5218 	inc	r0
      001C10 86 83            [24] 5219 	mov	dph,@r0
      001C12 08               [12] 5220 	inc	r0
      001C13 86 F0            [24] 5221 	mov	b,@r0
      001C15 12r00r00         [24] 5222 	lcall	__gptrget
      001C18 FA               [12] 5223 	mov	r2,a
      001C19 A3               [24] 5224 	inc	dptr
      001C1A 12r00r00         [24] 5225 	lcall	__gptrget
      001C1D FB               [12] 5226 	mov	r3,a
      001C1E A3               [24] 5227 	inc	dptr
      001C1F 12r00r00         [24] 5228 	lcall	__gptrget
      001C22 FC               [12] 5229 	mov	r4,a
      001C23 E5*00            [12] 5230 	mov	a,_bp
      001C25 24 15            [12] 5231 	add	a,#0x15
      001C27 F8               [12] 5232 	mov	r0,a
      001C28 E6               [12] 5233 	mov	a,@r0
      001C29 C0 E0            [24] 5234 	push	acc
      001C2B 08               [12] 5235 	inc	r0
      001C2C E6               [12] 5236 	mov	a,@r0
      001C2D C0 E0            [24] 5237 	push	acc
      001C2F 08               [12] 5238 	inc	r0
      001C30 E6               [12] 5239 	mov	a,@r0
      001C31 C0 E0            [24] 5240 	push	acc
      001C33 08               [12] 5241 	inc	r0
      001C34 E6               [12] 5242 	mov	a,@r0
      001C35 C0 E0            [24] 5243 	push	acc
      001C37 8A 82            [24] 5244 	mov	dpl,r2
      001C39 8B 83            [24] 5245 	mov	dph,r3
      001C3B 8C F0            [24] 5246 	mov	b,r4
      001C3D 12r00r00         [24] 5247 	lcall	_stack_push
      001C40 E5 81            [12] 5248 	mov	a,sp
      001C42 24 FC            [12] 5249 	add	a,#0xfc
      001C44 F5 81            [12] 5250 	mov	sp,a
                                   5251 ;	calc.c:248: printstr("\r\nstack underflow\r\n");
      001C46 7Fr4E            [12] 5252 	mov	r7,#___str_10
      001C48 7Es00            [12] 5253 	mov	r6,#(___str_10 >> 8)
      001C4A 7D 80            [12] 5254 	mov	r5,#0x80
                                   5255 ;	calc.c:51: return;
      001C4C                       5256 00447$:
                                   5257 ;	calc.c:49: for (; *s; s++) putchar(*s);
      001C4C 8F 82            [24] 5258 	mov	dpl,r7
      001C4E 8E 83            [24] 5259 	mov	dph,r6
      001C50 8D F0            [24] 5260 	mov	b,r5
      001C52 12r00r00         [24] 5261 	lcall	__gptrget
      001C55 FC               [12] 5262 	mov	r4,a
      001C56 70 03            [24] 5263 	jnz	01347$
      001C58 02r2Br95         [24] 5264 	ljmp	00249$
      001C5B                       5265 01347$:
      001C5B 7B 00            [12] 5266 	mov	r3,#0x00
      001C5D 8C 82            [24] 5267 	mov	dpl,r4
      001C5F 8B 83            [24] 5268 	mov	dph,r3
      001C61 12r00r00         [24] 5269 	lcall	_putchar
      001C64 0F               [12] 5270 	inc	r7
                                   5271 ;	calc.c:248: printstr("\r\nstack underflow\r\n");
      001C65 BF 00 E4         [24] 5272 	cjne	r7,#0x00,00447$
      001C68 0E               [12] 5273 	inc	r6
      001C69 80 E1            [24] 5274 	sjmp	00447$
      001C6B                       5275 00183$:
                                   5276 ;	calc.c:249: } else if (!d0) {
      001C6B E5*00            [12] 5277 	mov	a,_bp
      001C6D 24 15            [12] 5278 	add	a,#0x15
      001C6F F8               [12] 5279 	mov	r0,a
      001C70 E6               [12] 5280 	mov	a,@r0
      001C71 08               [12] 5281 	inc	r0
      001C72 46               [12] 5282 	orl	a,@r0
      001C73 08               [12] 5283 	inc	r0
      001C74 46               [12] 5284 	orl	a,@r0
      001C75 08               [12] 5285 	inc	r0
      001C76 46               [12] 5286 	orl	a,@r0
      001C77 60 03            [24] 5287 	jz	01349$
      001C79 02r1Dr1D         [24] 5288 	ljmp	00180$
      001C7C                       5289 01349$:
                                   5290 ;	calc.c:250: (void)stack_push(ctx->ps, d1);
      001C7C E5*00            [12] 5291 	mov	a,_bp
      001C7E 24 0B            [12] 5292 	add	a,#0x0b
      001C80 F8               [12] 5293 	mov	r0,a
      001C81 86 82            [24] 5294 	mov	dpl,@r0
      001C83 08               [12] 5295 	inc	r0
      001C84 86 83            [24] 5296 	mov	dph,@r0
      001C86 08               [12] 5297 	inc	r0
      001C87 86 F0            [24] 5298 	mov	b,@r0
      001C89 12r00r00         [24] 5299 	lcall	__gptrget
      001C8C FA               [12] 5300 	mov	r2,a
      001C8D A3               [24] 5301 	inc	dptr
      001C8E 12r00r00         [24] 5302 	lcall	__gptrget
      001C91 FB               [12] 5303 	mov	r3,a
      001C92 A3               [24] 5304 	inc	dptr
      001C93 12r00r00         [24] 5305 	lcall	__gptrget
      001C96 FC               [12] 5306 	mov	r4,a
      001C97 E5*00            [12] 5307 	mov	a,_bp
      001C99 24 19            [12] 5308 	add	a,#0x19
      001C9B F8               [12] 5309 	mov	r0,a
      001C9C E6               [12] 5310 	mov	a,@r0
      001C9D C0 E0            [24] 5311 	push	acc
      001C9F 08               [12] 5312 	inc	r0
      001CA0 E6               [12] 5313 	mov	a,@r0
      001CA1 C0 E0            [24] 5314 	push	acc
      001CA3 08               [12] 5315 	inc	r0
      001CA4 E6               [12] 5316 	mov	a,@r0
      001CA5 C0 E0            [24] 5317 	push	acc
      001CA7 08               [12] 5318 	inc	r0
      001CA8 E6               [12] 5319 	mov	a,@r0
      001CA9 C0 E0            [24] 5320 	push	acc
      001CAB 8A 82            [24] 5321 	mov	dpl,r2
      001CAD 8B 83            [24] 5322 	mov	dph,r3
      001CAF 8C F0            [24] 5323 	mov	b,r4
      001CB1 12r00r00         [24] 5324 	lcall	_stack_push
      001CB4 E5 81            [12] 5325 	mov	a,sp
      001CB6 24 FC            [12] 5326 	add	a,#0xfc
      001CB8 F5 81            [12] 5327 	mov	sp,a
                                   5328 ;	calc.c:251: (void)stack_push(ctx->ps, d0);			
      001CBA E5*00            [12] 5329 	mov	a,_bp
      001CBC 24 0B            [12] 5330 	add	a,#0x0b
      001CBE F8               [12] 5331 	mov	r0,a
      001CBF 86 82            [24] 5332 	mov	dpl,@r0
      001CC1 08               [12] 5333 	inc	r0
      001CC2 86 83            [24] 5334 	mov	dph,@r0
      001CC4 08               [12] 5335 	inc	r0
      001CC5 86 F0            [24] 5336 	mov	b,@r0
      001CC7 12r00r00         [24] 5337 	lcall	__gptrget
      001CCA FA               [12] 5338 	mov	r2,a
      001CCB A3               [24] 5339 	inc	dptr
      001CCC 12r00r00         [24] 5340 	lcall	__gptrget
      001CCF FB               [12] 5341 	mov	r3,a
      001CD0 A3               [24] 5342 	inc	dptr
      001CD1 12r00r00         [24] 5343 	lcall	__gptrget
      001CD4 FC               [12] 5344 	mov	r4,a
      001CD5 E5*00            [12] 5345 	mov	a,_bp
      001CD7 24 15            [12] 5346 	add	a,#0x15
      001CD9 F8               [12] 5347 	mov	r0,a
      001CDA E6               [12] 5348 	mov	a,@r0
      001CDB C0 E0            [24] 5349 	push	acc
      001CDD 08               [12] 5350 	inc	r0
      001CDE E6               [12] 5351 	mov	a,@r0
      001CDF C0 E0            [24] 5352 	push	acc
      001CE1 08               [12] 5353 	inc	r0
      001CE2 E6               [12] 5354 	mov	a,@r0
      001CE3 C0 E0            [24] 5355 	push	acc
      001CE5 08               [12] 5356 	inc	r0
      001CE6 E6               [12] 5357 	mov	a,@r0
      001CE7 C0 E0            [24] 5358 	push	acc
      001CE9 8A 82            [24] 5359 	mov	dpl,r2
      001CEB 8B 83            [24] 5360 	mov	dph,r3
      001CED 8C F0            [24] 5361 	mov	b,r4
      001CEF 12r00r00         [24] 5362 	lcall	_stack_push
      001CF2 E5 81            [12] 5363 	mov	a,sp
      001CF4 24 FC            [12] 5364 	add	a,#0xfc
      001CF6 F5 81            [12] 5365 	mov	sp,a
                                   5366 ;	calc.c:252: printstr("\r\ndivision by zero\r\n");
      001CF8 7FrB0            [12] 5367 	mov	r7,#___str_14
      001CFA 7Es00            [12] 5368 	mov	r6,#(___str_14 >> 8)
      001CFC 7D 80            [12] 5369 	mov	r5,#0x80
                                   5370 ;	calc.c:51: return;
      001CFE                       5371 00450$:
                                   5372 ;	calc.c:49: for (; *s; s++) putchar(*s);
      001CFE 8F 82            [24] 5373 	mov	dpl,r7
      001D00 8E 83            [24] 5374 	mov	dph,r6
      001D02 8D F0            [24] 5375 	mov	b,r5
      001D04 12r00r00         [24] 5376 	lcall	__gptrget
      001D07 FC               [12] 5377 	mov	r4,a
      001D08 70 03            [24] 5378 	jnz	01350$
      001D0A 02r2Br95         [24] 5379 	ljmp	00249$
      001D0D                       5380 01350$:
      001D0D 7B 00            [12] 5381 	mov	r3,#0x00
      001D0F 8C 82            [24] 5382 	mov	dpl,r4
      001D11 8B 83            [24] 5383 	mov	dph,r3
      001D13 12r00r00         [24] 5384 	lcall	_putchar
      001D16 0F               [12] 5385 	inc	r7
                                   5386 ;	calc.c:252: printstr("\r\ndivision by zero\r\n");
      001D17 BF 00 E4         [24] 5387 	cjne	r7,#0x00,00450$
      001D1A 0E               [12] 5388 	inc	r6
      001D1B 80 E1            [24] 5389 	sjmp	00450$
      001D1D                       5390 00180$:
                                   5391 ;	calc.c:254: if (ctx->digit[0] == '/') d1 /= d0;
      001D1D 8D 82            [24] 5392 	mov	dpl,r5
      001D1F 8E 83            [24] 5393 	mov	dph,r6
      001D21 8F F0            [24] 5394 	mov	b,r7
      001D23 12r00r00         [24] 5395 	lcall	__gptrget
      001D26 FC               [12] 5396 	mov	r4,a
      001D27 BC 2F 45         [24] 5397 	cjne	r4,#0x2f,00177$
      001D2A E5*00            [12] 5398 	mov	a,_bp
      001D2C 24 15            [12] 5399 	add	a,#0x15
      001D2E F8               [12] 5400 	mov	r0,a
      001D2F E6               [12] 5401 	mov	a,@r0
      001D30 C0 E0            [24] 5402 	push	acc
      001D32 08               [12] 5403 	inc	r0
      001D33 E6               [12] 5404 	mov	a,@r0
      001D34 C0 E0            [24] 5405 	push	acc
      001D36 08               [12] 5406 	inc	r0
      001D37 E6               [12] 5407 	mov	a,@r0
      001D38 C0 E0            [24] 5408 	push	acc
      001D3A 08               [12] 5409 	inc	r0
      001D3B E6               [12] 5410 	mov	a,@r0
      001D3C C0 E0            [24] 5411 	push	acc
      001D3E E5*00            [12] 5412 	mov	a,_bp
      001D40 24 19            [12] 5413 	add	a,#0x19
      001D42 F8               [12] 5414 	mov	r0,a
      001D43 86 82            [24] 5415 	mov	dpl,@r0
      001D45 08               [12] 5416 	inc	r0
      001D46 86 83            [24] 5417 	mov	dph,@r0
      001D48 08               [12] 5418 	inc	r0
      001D49 86 F0            [24] 5419 	mov	b,@r0
      001D4B 08               [12] 5420 	inc	r0
      001D4C E6               [12] 5421 	mov	a,@r0
      001D4D 12r00r00         [24] 5422 	lcall	__divslong
      001D50 AF 82            [24] 5423 	mov	r7,dpl
      001D52 AE 83            [24] 5424 	mov	r6,dph
      001D54 AD F0            [24] 5425 	mov	r5,b
      001D56 FC               [12] 5426 	mov	r4,a
      001D57 E5 81            [12] 5427 	mov	a,sp
      001D59 24 FC            [12] 5428 	add	a,#0xfc
      001D5B F5 81            [12] 5429 	mov	sp,a
      001D5D E5*00            [12] 5430 	mov	a,_bp
      001D5F 24 19            [12] 5431 	add	a,#0x19
      001D61 F8               [12] 5432 	mov	r0,a
      001D62 A6 07            [24] 5433 	mov	@r0,ar7
      001D64 08               [12] 5434 	inc	r0
      001D65 A6 06            [24] 5435 	mov	@r0,ar6
      001D67 08               [12] 5436 	inc	r0
      001D68 A6 05            [24] 5437 	mov	@r0,ar5
      001D6A 08               [12] 5438 	inc	r0
      001D6B A6 04            [24] 5439 	mov	@r0,ar4
      001D6D 80 63            [24] 5440 	sjmp	00178$
      001D6F                       5441 00177$:
                                   5442 ;	calc.c:255: else d1 = (unsigned long)d1 / (unsigned long)d0;
      001D6F E5*00            [12] 5443 	mov	a,_bp
      001D71 24 19            [12] 5444 	add	a,#0x19
      001D73 F8               [12] 5445 	mov	r0,a
      001D74 86 07            [24] 5446 	mov	ar7,@r0
      001D76 08               [12] 5447 	inc	r0
      001D77 86 06            [24] 5448 	mov	ar6,@r0
      001D79 08               [12] 5449 	inc	r0
      001D7A 86 05            [24] 5450 	mov	ar5,@r0
      001D7C 08               [12] 5451 	inc	r0
      001D7D 86 04            [24] 5452 	mov	ar4,@r0
      001D7F E5*00            [12] 5453 	mov	a,_bp
      001D81 24 15            [12] 5454 	add	a,#0x15
      001D83 F8               [12] 5455 	mov	r0,a
      001D84 E5*00            [12] 5456 	mov	a,_bp
      001D86 24 0E            [12] 5457 	add	a,#0x0e
      001D88 F9               [12] 5458 	mov	r1,a
      001D89 E6               [12] 5459 	mov	a,@r0
      001D8A F7               [12] 5460 	mov	@r1,a
      001D8B 08               [12] 5461 	inc	r0
      001D8C 09               [12] 5462 	inc	r1
      001D8D E6               [12] 5463 	mov	a,@r0
      001D8E F7               [12] 5464 	mov	@r1,a
      001D8F 08               [12] 5465 	inc	r0
      001D90 09               [12] 5466 	inc	r1
      001D91 E6               [12] 5467 	mov	a,@r0
      001D92 F7               [12] 5468 	mov	@r1,a
      001D93 08               [12] 5469 	inc	r0
      001D94 09               [12] 5470 	inc	r1
      001D95 E6               [12] 5471 	mov	a,@r0
      001D96 F7               [12] 5472 	mov	@r1,a
      001D97 E5*00            [12] 5473 	mov	a,_bp
      001D99 24 0E            [12] 5474 	add	a,#0x0e
      001D9B F8               [12] 5475 	mov	r0,a
      001D9C E6               [12] 5476 	mov	a,@r0
      001D9D C0 E0            [24] 5477 	push	acc
      001D9F 08               [12] 5478 	inc	r0
      001DA0 E6               [12] 5479 	mov	a,@r0
      001DA1 C0 E0            [24] 5480 	push	acc
      001DA3 08               [12] 5481 	inc	r0
      001DA4 E6               [12] 5482 	mov	a,@r0
      001DA5 C0 E0            [24] 5483 	push	acc
      001DA7 08               [12] 5484 	inc	r0
      001DA8 E6               [12] 5485 	mov	a,@r0
      001DA9 C0 E0            [24] 5486 	push	acc
      001DAB 8F 82            [24] 5487 	mov	dpl,r7
      001DAD 8E 83            [24] 5488 	mov	dph,r6
      001DAF 8D F0            [24] 5489 	mov	b,r5
      001DB1 EC               [12] 5490 	mov	a,r4
      001DB2 12r00r00         [24] 5491 	lcall	__divulong
      001DB5 AF 82            [24] 5492 	mov	r7,dpl
      001DB7 AE 83            [24] 5493 	mov	r6,dph
      001DB9 AD F0            [24] 5494 	mov	r5,b
      001DBB FC               [12] 5495 	mov	r4,a
      001DBC E5 81            [12] 5496 	mov	a,sp
      001DBE 24 FC            [12] 5497 	add	a,#0xfc
      001DC0 F5 81            [12] 5498 	mov	sp,a
      001DC2 E5*00            [12] 5499 	mov	a,_bp
      001DC4 24 19            [12] 5500 	add	a,#0x19
      001DC6 F8               [12] 5501 	mov	r0,a
      001DC7 A6 07            [24] 5502 	mov	@r0,ar7
      001DC9 08               [12] 5503 	inc	r0
      001DCA A6 06            [24] 5504 	mov	@r0,ar6
      001DCC 08               [12] 5505 	inc	r0
      001DCD A6 05            [24] 5506 	mov	@r0,ar5
      001DCF 08               [12] 5507 	inc	r0
      001DD0 A6 04            [24] 5508 	mov	@r0,ar4
      001DD2                       5509 00178$:
                                   5510 ;	calc.c:256: (void)stack_push(ctx->ps, d1);
      001DD2 E5*00            [12] 5511 	mov	a,_bp
      001DD4 24 0B            [12] 5512 	add	a,#0x0b
      001DD6 F8               [12] 5513 	mov	r0,a
      001DD7 86 82            [24] 5514 	mov	dpl,@r0
      001DD9 08               [12] 5515 	inc	r0
      001DDA 86 83            [24] 5516 	mov	dph,@r0
      001DDC 08               [12] 5517 	inc	r0
      001DDD 86 F0            [24] 5518 	mov	b,@r0
      001DDF 12r00r00         [24] 5519 	lcall	__gptrget
      001DE2 FA               [12] 5520 	mov	r2,a
      001DE3 A3               [24] 5521 	inc	dptr
      001DE4 12r00r00         [24] 5522 	lcall	__gptrget
      001DE7 FB               [12] 5523 	mov	r3,a
      001DE8 A3               [24] 5524 	inc	dptr
      001DE9 12r00r00         [24] 5525 	lcall	__gptrget
      001DEC FC               [12] 5526 	mov	r4,a
      001DED E5*00            [12] 5527 	mov	a,_bp
      001DEF 24 19            [12] 5528 	add	a,#0x19
      001DF1 F8               [12] 5529 	mov	r0,a
      001DF2 E6               [12] 5530 	mov	a,@r0
      001DF3 C0 E0            [24] 5531 	push	acc
      001DF5 08               [12] 5532 	inc	r0
      001DF6 E6               [12] 5533 	mov	a,@r0
      001DF7 C0 E0            [24] 5534 	push	acc
      001DF9 08               [12] 5535 	inc	r0
      001DFA E6               [12] 5536 	mov	a,@r0
      001DFB C0 E0            [24] 5537 	push	acc
      001DFD 08               [12] 5538 	inc	r0
      001DFE E6               [12] 5539 	mov	a,@r0
      001DFF C0 E0            [24] 5540 	push	acc
      001E01 8A 82            [24] 5541 	mov	dpl,r2
      001E03 8B 83            [24] 5542 	mov	dph,r3
      001E05 8C F0            [24] 5543 	mov	b,r4
      001E07 12r00r00         [24] 5544 	lcall	_stack_push
      001E0A E5 81            [12] 5545 	mov	a,sp
      001E0C 24 FC            [12] 5546 	add	a,#0xfc
      001E0E F5 81            [12] 5547 	mov	sp,a
                                   5548 ;	calc.c:258: break;
      001E10 02r2Br95         [24] 5549 	ljmp	00249$
                                   5550 ;	calc.c:260: case '#':
      001E13                       5551 00189$:
                                   5552 ;	calc.c:261: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      001E13 C0 05            [24] 5553 	push	ar5
      001E15 C0 06            [24] 5554 	push	ar6
      001E17 C0 07            [24] 5555 	push	ar7
      001E19 E5*00            [12] 5556 	mov	a,_bp
      001E1B 24 15            [12] 5557 	add	a,#0x15
      001E1D FC               [12] 5558 	mov	r4,a
      001E1E 7B 00            [12] 5559 	mov	r3,#0x00
      001E20 7A 40            [12] 5560 	mov	r2,#0x40
      001E22 E5*00            [12] 5561 	mov	a,_bp
      001E24 24 12            [12] 5562 	add	a,#0x12
      001E26 F8               [12] 5563 	mov	r0,a
      001E27 E5*00            [12] 5564 	mov	a,_bp
      001E29 24 0E            [12] 5565 	add	a,#0x0e
      001E2B F9               [12] 5566 	mov	r1,a
      001E2C 74 13            [12] 5567 	mov	a,#0x13
      001E2E 26               [12] 5568 	add	a,@r0
      001E2F F7               [12] 5569 	mov	@r1,a
      001E30 74 40            [12] 5570 	mov	a,#0x40
      001E32 08               [12] 5571 	inc	r0
      001E33 36               [12] 5572 	addc	a,@r0
      001E34 09               [12] 5573 	inc	r1
      001E35 F7               [12] 5574 	mov	@r1,a
      001E36 08               [12] 5575 	inc	r0
      001E37 09               [12] 5576 	inc	r1
      001E38 E6               [12] 5577 	mov	a,@r0
      001E39 F7               [12] 5578 	mov	@r1,a
      001E3A E5*00            [12] 5579 	mov	a,_bp
      001E3C 24 0E            [12] 5580 	add	a,#0x0e
      001E3E F8               [12] 5581 	mov	r0,a
      001E3F 86 82            [24] 5582 	mov	dpl,@r0
      001E41 08               [12] 5583 	inc	r0
      001E42 86 83            [24] 5584 	mov	dph,@r0
      001E44 08               [12] 5585 	inc	r0
      001E45 86 F0            [24] 5586 	mov	b,@r0
      001E47 12r00r00         [24] 5587 	lcall	__gptrget
      001E4A FD               [12] 5588 	mov	r5,a
      001E4B A3               [24] 5589 	inc	dptr
      001E4C 12r00r00         [24] 5590 	lcall	__gptrget
      001E4F FE               [12] 5591 	mov	r6,a
      001E50 A3               [24] 5592 	inc	dptr
      001E51 12r00r00         [24] 5593 	lcall	__gptrget
      001E54 FF               [12] 5594 	mov	r7,a
      001E55 C0 05            [24] 5595 	push	ar5
      001E57 C0 04            [24] 5596 	push	ar4
      001E59 C0 03            [24] 5597 	push	ar3
      001E5B C0 02            [24] 5598 	push	ar2
      001E5D 8D 82            [24] 5599 	mov	dpl,r5
      001E5F 8E 83            [24] 5600 	mov	dph,r6
      001E61 8F F0            [24] 5601 	mov	b,r7
      001E63 12r00r00         [24] 5602 	lcall	_stack_pop
      001E66 AE 82            [24] 5603 	mov	r6,dpl
      001E68 AF 83            [24] 5604 	mov	r7,dph
      001E6A 15 81            [12] 5605 	dec	sp
      001E6C 15 81            [12] 5606 	dec	sp
      001E6E 15 81            [12] 5607 	dec	sp
      001E70 D0 05            [24] 5608 	pop	ar5
      001E72 EE               [12] 5609 	mov	a,r6
      001E73 4F               [12] 5610 	orl	a,r7
      001E74 D0 07            [24] 5611 	pop	ar7
      001E76 D0 06            [24] 5612 	pop	ar6
      001E78 D0 05            [24] 5613 	pop	ar5
      001E7A 70 25            [24] 5614 	jnz	00200$
      001E7C 7Fr4E            [12] 5615 	mov	r7,#___str_10
      001E7E 7Es00            [12] 5616 	mov	r6,#(___str_10 >> 8)
      001E80 7D 80            [12] 5617 	mov	r5,#0x80
                                   5618 ;	calc.c:51: return;
      001E82                       5619 00453$:
                                   5620 ;	calc.c:49: for (; *s; s++) putchar(*s);
      001E82 8F 82            [24] 5621 	mov	dpl,r7
      001E84 8E 83            [24] 5622 	mov	dph,r6
      001E86 8D F0            [24] 5623 	mov	b,r5
      001E88 12r00r00         [24] 5624 	lcall	__gptrget
      001E8B FC               [12] 5625 	mov	r4,a
      001E8C 70 03            [24] 5626 	jnz	01355$
      001E8E 02r2Br95         [24] 5627 	ljmp	00249$
      001E91                       5628 01355$:
      001E91 7B 00            [12] 5629 	mov	r3,#0x00
      001E93 8C 82            [24] 5630 	mov	dpl,r4
      001E95 8B 83            [24] 5631 	mov	dph,r3
      001E97 12r00r00         [24] 5632 	lcall	_putchar
      001E9A 0F               [12] 5633 	inc	r7
                                   5634 ;	calc.c:261: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      001E9B BF 00 E4         [24] 5635 	cjne	r7,#0x00,00453$
      001E9E 0E               [12] 5636 	inc	r6
      001E9F 80 E1            [24] 5637 	sjmp	00453$
      001EA1                       5638 00200$:
                                   5639 ;	calc.c:262: else if (!stack_pop(ctx->ps, &d1)) {
      001EA1 C0 05            [24] 5640 	push	ar5
      001EA3 C0 06            [24] 5641 	push	ar6
      001EA5 C0 07            [24] 5642 	push	ar7
      001EA7 E5*00            [12] 5643 	mov	a,_bp
      001EA9 24 19            [12] 5644 	add	a,#0x19
      001EAB FC               [12] 5645 	mov	r4,a
      001EAC 7B 00            [12] 5646 	mov	r3,#0x00
      001EAE 7A 40            [12] 5647 	mov	r2,#0x40
      001EB0 E5*00            [12] 5648 	mov	a,_bp
      001EB2 24 0E            [12] 5649 	add	a,#0x0e
      001EB4 F8               [12] 5650 	mov	r0,a
      001EB5 86 82            [24] 5651 	mov	dpl,@r0
      001EB7 08               [12] 5652 	inc	r0
      001EB8 86 83            [24] 5653 	mov	dph,@r0
      001EBA 08               [12] 5654 	inc	r0
      001EBB 86 F0            [24] 5655 	mov	b,@r0
      001EBD 12r00r00         [24] 5656 	lcall	__gptrget
      001EC0 FD               [12] 5657 	mov	r5,a
      001EC1 A3               [24] 5658 	inc	dptr
      001EC2 12r00r00         [24] 5659 	lcall	__gptrget
      001EC5 FE               [12] 5660 	mov	r6,a
      001EC6 A3               [24] 5661 	inc	dptr
      001EC7 12r00r00         [24] 5662 	lcall	__gptrget
      001ECA FF               [12] 5663 	mov	r7,a
      001ECB C0 05            [24] 5664 	push	ar5
      001ECD C0 04            [24] 5665 	push	ar4
      001ECF C0 03            [24] 5666 	push	ar3
      001ED1 C0 02            [24] 5667 	push	ar2
      001ED3 8D 82            [24] 5668 	mov	dpl,r5
      001ED5 8E 83            [24] 5669 	mov	dph,r6
      001ED7 8F F0            [24] 5670 	mov	b,r7
      001ED9 12r00r00         [24] 5671 	lcall	_stack_pop
      001EDC AE 82            [24] 5672 	mov	r6,dpl
      001EDE AF 83            [24] 5673 	mov	r7,dph
      001EE0 15 81            [12] 5674 	dec	sp
      001EE2 15 81            [12] 5675 	dec	sp
      001EE4 15 81            [12] 5676 	dec	sp
      001EE6 D0 05            [24] 5677 	pop	ar5
      001EE8 EE               [12] 5678 	mov	a,r6
      001EE9 4F               [12] 5679 	orl	a,r7
      001EEA D0 07            [24] 5680 	pop	ar7
      001EEC D0 06            [24] 5681 	pop	ar6
      001EEE D0 05            [24] 5682 	pop	ar5
      001EF0 70 63            [24] 5683 	jnz	00197$
                                   5684 ;	calc.c:263: (void)stack_push(ctx->ps, d0);
      001EF2 E5*00            [12] 5685 	mov	a,_bp
      001EF4 24 0E            [12] 5686 	add	a,#0x0e
      001EF6 F8               [12] 5687 	mov	r0,a
      001EF7 86 82            [24] 5688 	mov	dpl,@r0
      001EF9 08               [12] 5689 	inc	r0
      001EFA 86 83            [24] 5690 	mov	dph,@r0
      001EFC 08               [12] 5691 	inc	r0
      001EFD 86 F0            [24] 5692 	mov	b,@r0
      001EFF 12r00r00         [24] 5693 	lcall	__gptrget
      001F02 FA               [12] 5694 	mov	r2,a
      001F03 A3               [24] 5695 	inc	dptr
      001F04 12r00r00         [24] 5696 	lcall	__gptrget
      001F07 FB               [12] 5697 	mov	r3,a
      001F08 A3               [24] 5698 	inc	dptr
      001F09 12r00r00         [24] 5699 	lcall	__gptrget
      001F0C FC               [12] 5700 	mov	r4,a
      001F0D E5*00            [12] 5701 	mov	a,_bp
      001F0F 24 15            [12] 5702 	add	a,#0x15
      001F11 F8               [12] 5703 	mov	r0,a
      001F12 E6               [12] 5704 	mov	a,@r0
      001F13 C0 E0            [24] 5705 	push	acc
      001F15 08               [12] 5706 	inc	r0
      001F16 E6               [12] 5707 	mov	a,@r0
      001F17 C0 E0            [24] 5708 	push	acc
      001F19 08               [12] 5709 	inc	r0
      001F1A E6               [12] 5710 	mov	a,@r0
      001F1B C0 E0            [24] 5711 	push	acc
      001F1D 08               [12] 5712 	inc	r0
      001F1E E6               [12] 5713 	mov	a,@r0
      001F1F C0 E0            [24] 5714 	push	acc
      001F21 8A 82            [24] 5715 	mov	dpl,r2
      001F23 8B 83            [24] 5716 	mov	dph,r3
      001F25 8C F0            [24] 5717 	mov	b,r4
      001F27 12r00r00         [24] 5718 	lcall	_stack_push
      001F2A E5 81            [12] 5719 	mov	a,sp
      001F2C 24 FC            [12] 5720 	add	a,#0xfc
      001F2E F5 81            [12] 5721 	mov	sp,a
                                   5722 ;	calc.c:264: printstr("\r\nstack underflow\r\n");
      001F30 7Fr4E            [12] 5723 	mov	r7,#___str_10
      001F32 7Es00            [12] 5724 	mov	r6,#(___str_10 >> 8)
      001F34 7D 80            [12] 5725 	mov	r5,#0x80
                                   5726 ;	calc.c:51: return;
      001F36                       5727 00456$:
                                   5728 ;	calc.c:49: for (; *s; s++) putchar(*s);
      001F36 8F 82            [24] 5729 	mov	dpl,r7
      001F38 8E 83            [24] 5730 	mov	dph,r6
      001F3A 8D F0            [24] 5731 	mov	b,r5
      001F3C 12r00r00         [24] 5732 	lcall	__gptrget
      001F3F FC               [12] 5733 	mov	r4,a
      001F40 70 03            [24] 5734 	jnz	01358$
      001F42 02r2Br95         [24] 5735 	ljmp	00249$
      001F45                       5736 01358$:
      001F45 7B 00            [12] 5737 	mov	r3,#0x00
      001F47 8C 82            [24] 5738 	mov	dpl,r4
      001F49 8B 83            [24] 5739 	mov	dph,r3
      001F4B 12r00r00         [24] 5740 	lcall	_putchar
      001F4E 0F               [12] 5741 	inc	r7
                                   5742 ;	calc.c:264: printstr("\r\nstack underflow\r\n");
      001F4F BF 00 E4         [24] 5743 	cjne	r7,#0x00,00456$
      001F52 0E               [12] 5744 	inc	r6
      001F53 80 E1            [24] 5745 	sjmp	00456$
      001F55                       5746 00197$:
                                   5747 ;	calc.c:265: } else if (!d0) {
      001F55 E5*00            [12] 5748 	mov	a,_bp
      001F57 24 15            [12] 5749 	add	a,#0x15
      001F59 F8               [12] 5750 	mov	r0,a
      001F5A E6               [12] 5751 	mov	a,@r0
      001F5B 08               [12] 5752 	inc	r0
      001F5C 46               [12] 5753 	orl	a,@r0
      001F5D 08               [12] 5754 	inc	r0
      001F5E 46               [12] 5755 	orl	a,@r0
      001F5F 08               [12] 5756 	inc	r0
      001F60 46               [12] 5757 	orl	a,@r0
      001F61 60 03            [24] 5758 	jz	01360$
      001F63 02r20r07         [24] 5759 	ljmp	00194$
      001F66                       5760 01360$:
                                   5761 ;	calc.c:266: (void)stack_push(ctx->ps, d1);
      001F66 E5*00            [12] 5762 	mov	a,_bp
      001F68 24 0E            [12] 5763 	add	a,#0x0e
      001F6A F8               [12] 5764 	mov	r0,a
      001F6B 86 82            [24] 5765 	mov	dpl,@r0
      001F6D 08               [12] 5766 	inc	r0
      001F6E 86 83            [24] 5767 	mov	dph,@r0
      001F70 08               [12] 5768 	inc	r0
      001F71 86 F0            [24] 5769 	mov	b,@r0
      001F73 12r00r00         [24] 5770 	lcall	__gptrget
      001F76 FA               [12] 5771 	mov	r2,a
      001F77 A3               [24] 5772 	inc	dptr
      001F78 12r00r00         [24] 5773 	lcall	__gptrget
      001F7B FB               [12] 5774 	mov	r3,a
      001F7C A3               [24] 5775 	inc	dptr
      001F7D 12r00r00         [24] 5776 	lcall	__gptrget
      001F80 FC               [12] 5777 	mov	r4,a
      001F81 E5*00            [12] 5778 	mov	a,_bp
      001F83 24 19            [12] 5779 	add	a,#0x19
      001F85 F8               [12] 5780 	mov	r0,a
      001F86 E6               [12] 5781 	mov	a,@r0
      001F87 C0 E0            [24] 5782 	push	acc
      001F89 08               [12] 5783 	inc	r0
      001F8A E6               [12] 5784 	mov	a,@r0
      001F8B C0 E0            [24] 5785 	push	acc
      001F8D 08               [12] 5786 	inc	r0
      001F8E E6               [12] 5787 	mov	a,@r0
      001F8F C0 E0            [24] 5788 	push	acc
      001F91 08               [12] 5789 	inc	r0
      001F92 E6               [12] 5790 	mov	a,@r0
      001F93 C0 E0            [24] 5791 	push	acc
      001F95 8A 82            [24] 5792 	mov	dpl,r2
      001F97 8B 83            [24] 5793 	mov	dph,r3
      001F99 8C F0            [24] 5794 	mov	b,r4
      001F9B 12r00r00         [24] 5795 	lcall	_stack_push
      001F9E E5 81            [12] 5796 	mov	a,sp
      001FA0 24 FC            [12] 5797 	add	a,#0xfc
      001FA2 F5 81            [12] 5798 	mov	sp,a
                                   5799 ;	calc.c:267: (void)stack_push(ctx->ps, d0);			
      001FA4 E5*00            [12] 5800 	mov	a,_bp
      001FA6 24 0E            [12] 5801 	add	a,#0x0e
      001FA8 F8               [12] 5802 	mov	r0,a
      001FA9 86 82            [24] 5803 	mov	dpl,@r0
      001FAB 08               [12] 5804 	inc	r0
      001FAC 86 83            [24] 5805 	mov	dph,@r0
      001FAE 08               [12] 5806 	inc	r0
      001FAF 86 F0            [24] 5807 	mov	b,@r0
      001FB1 12r00r00         [24] 5808 	lcall	__gptrget
      001FB4 FA               [12] 5809 	mov	r2,a
      001FB5 A3               [24] 5810 	inc	dptr
      001FB6 12r00r00         [24] 5811 	lcall	__gptrget
      001FB9 FB               [12] 5812 	mov	r3,a
      001FBA A3               [24] 5813 	inc	dptr
      001FBB 12r00r00         [24] 5814 	lcall	__gptrget
      001FBE FC               [12] 5815 	mov	r4,a
      001FBF E5*00            [12] 5816 	mov	a,_bp
      001FC1 24 15            [12] 5817 	add	a,#0x15
      001FC3 F8               [12] 5818 	mov	r0,a
      001FC4 E6               [12] 5819 	mov	a,@r0
      001FC5 C0 E0            [24] 5820 	push	acc
      001FC7 08               [12] 5821 	inc	r0
      001FC8 E6               [12] 5822 	mov	a,@r0
      001FC9 C0 E0            [24] 5823 	push	acc
      001FCB 08               [12] 5824 	inc	r0
      001FCC E6               [12] 5825 	mov	a,@r0
      001FCD C0 E0            [24] 5826 	push	acc
      001FCF 08               [12] 5827 	inc	r0
      001FD0 E6               [12] 5828 	mov	a,@r0
      001FD1 C0 E0            [24] 5829 	push	acc
      001FD3 8A 82            [24] 5830 	mov	dpl,r2
      001FD5 8B 83            [24] 5831 	mov	dph,r3
      001FD7 8C F0            [24] 5832 	mov	b,r4
      001FD9 12r00r00         [24] 5833 	lcall	_stack_push
      001FDC E5 81            [12] 5834 	mov	a,sp
      001FDE 24 FC            [12] 5835 	add	a,#0xfc
      001FE0 F5 81            [12] 5836 	mov	sp,a
                                   5837 ;	calc.c:268: printstr("\r\ndivision by zero\r\n");
      001FE2 7FrB0            [12] 5838 	mov	r7,#___str_14
      001FE4 7Es00            [12] 5839 	mov	r6,#(___str_14 >> 8)
      001FE6 7D 80            [12] 5840 	mov	r5,#0x80
                                   5841 ;	calc.c:51: return;
      001FE8                       5842 00459$:
                                   5843 ;	calc.c:49: for (; *s; s++) putchar(*s);
      001FE8 8F 82            [24] 5844 	mov	dpl,r7
      001FEA 8E 83            [24] 5845 	mov	dph,r6
      001FEC 8D F0            [24] 5846 	mov	b,r5
      001FEE 12r00r00         [24] 5847 	lcall	__gptrget
      001FF1 FC               [12] 5848 	mov	r4,a
      001FF2 70 03            [24] 5849 	jnz	01361$
      001FF4 02r2Br95         [24] 5850 	ljmp	00249$
      001FF7                       5851 01361$:
      001FF7 7B 00            [12] 5852 	mov	r3,#0x00
      001FF9 8C 82            [24] 5853 	mov	dpl,r4
      001FFB 8B 83            [24] 5854 	mov	dph,r3
      001FFD 12r00r00         [24] 5855 	lcall	_putchar
      002000 0F               [12] 5856 	inc	r7
                                   5857 ;	calc.c:268: printstr("\r\ndivision by zero\r\n");
      002001 BF 00 E4         [24] 5858 	cjne	r7,#0x00,00459$
      002004 0E               [12] 5859 	inc	r6
      002005 80 E1            [24] 5860 	sjmp	00459$
      002007                       5861 00194$:
                                   5862 ;	calc.c:270: if (ctx->digit[0] == '%') d1 %= d0;
      002007 8D 82            [24] 5863 	mov	dpl,r5
      002009 8E 83            [24] 5864 	mov	dph,r6
      00200B 8F F0            [24] 5865 	mov	b,r7
      00200D 12r00r00         [24] 5866 	lcall	__gptrget
      002010 FD               [12] 5867 	mov	r5,a
      002011 BD 25 45         [24] 5868 	cjne	r5,#0x25,00191$
      002014 E5*00            [12] 5869 	mov	a,_bp
      002016 24 15            [12] 5870 	add	a,#0x15
      002018 F8               [12] 5871 	mov	r0,a
      002019 E6               [12] 5872 	mov	a,@r0
      00201A C0 E0            [24] 5873 	push	acc
      00201C 08               [12] 5874 	inc	r0
      00201D E6               [12] 5875 	mov	a,@r0
      00201E C0 E0            [24] 5876 	push	acc
      002020 08               [12] 5877 	inc	r0
      002021 E6               [12] 5878 	mov	a,@r0
      002022 C0 E0            [24] 5879 	push	acc
      002024 08               [12] 5880 	inc	r0
      002025 E6               [12] 5881 	mov	a,@r0
      002026 C0 E0            [24] 5882 	push	acc
      002028 E5*00            [12] 5883 	mov	a,_bp
      00202A 24 19            [12] 5884 	add	a,#0x19
      00202C F8               [12] 5885 	mov	r0,a
      00202D 86 82            [24] 5886 	mov	dpl,@r0
      00202F 08               [12] 5887 	inc	r0
      002030 86 83            [24] 5888 	mov	dph,@r0
      002032 08               [12] 5889 	inc	r0
      002033 86 F0            [24] 5890 	mov	b,@r0
      002035 08               [12] 5891 	inc	r0
      002036 E6               [12] 5892 	mov	a,@r0
      002037 12r00r00         [24] 5893 	lcall	__modslong
      00203A AC 82            [24] 5894 	mov	r4,dpl
      00203C AD 83            [24] 5895 	mov	r5,dph
      00203E AE F0            [24] 5896 	mov	r6,b
      002040 FF               [12] 5897 	mov	r7,a
      002041 E5 81            [12] 5898 	mov	a,sp
      002043 24 FC            [12] 5899 	add	a,#0xfc
      002045 F5 81            [12] 5900 	mov	sp,a
      002047 E5*00            [12] 5901 	mov	a,_bp
      002049 24 19            [12] 5902 	add	a,#0x19
      00204B F8               [12] 5903 	mov	r0,a
      00204C A6 04            [24] 5904 	mov	@r0,ar4
      00204E 08               [12] 5905 	inc	r0
      00204F A6 05            [24] 5906 	mov	@r0,ar5
      002051 08               [12] 5907 	inc	r0
      002052 A6 06            [24] 5908 	mov	@r0,ar6
      002054 08               [12] 5909 	inc	r0
      002055 A6 07            [24] 5910 	mov	@r0,ar7
      002057 80 5F            [24] 5911 	sjmp	00192$
      002059                       5912 00191$:
                                   5913 ;	calc.c:271: else d1 = (unsigned long)d1 % (unsigned long)d0;
      002059 E5*00            [12] 5914 	mov	a,_bp
      00205B 24 19            [12] 5915 	add	a,#0x19
      00205D F8               [12] 5916 	mov	r0,a
      00205E E5*00            [12] 5917 	mov	a,_bp
      002060 24 07            [12] 5918 	add	a,#0x07
      002062 F9               [12] 5919 	mov	r1,a
      002063 E6               [12] 5920 	mov	a,@r0
      002064 F7               [12] 5921 	mov	@r1,a
      002065 08               [12] 5922 	inc	r0
      002066 09               [12] 5923 	inc	r1
      002067 E6               [12] 5924 	mov	a,@r0
      002068 F7               [12] 5925 	mov	@r1,a
      002069 08               [12] 5926 	inc	r0
      00206A 09               [12] 5927 	inc	r1
      00206B E6               [12] 5928 	mov	a,@r0
      00206C F7               [12] 5929 	mov	@r1,a
      00206D 08               [12] 5930 	inc	r0
      00206E 09               [12] 5931 	inc	r1
      00206F E6               [12] 5932 	mov	a,@r0
      002070 F7               [12] 5933 	mov	@r1,a
      002071 E5*00            [12] 5934 	mov	a,_bp
      002073 24 15            [12] 5935 	add	a,#0x15
      002075 F8               [12] 5936 	mov	r0,a
      002076 86 02            [24] 5937 	mov	ar2,@r0
      002078 08               [12] 5938 	inc	r0
      002079 86 03            [24] 5939 	mov	ar3,@r0
      00207B 08               [12] 5940 	inc	r0
      00207C 86 06            [24] 5941 	mov	ar6,@r0
      00207E 08               [12] 5942 	inc	r0
      00207F 86 07            [24] 5943 	mov	ar7,@r0
      002081 C0 02            [24] 5944 	push	ar2
      002083 C0 03            [24] 5945 	push	ar3
      002085 C0 06            [24] 5946 	push	ar6
      002087 C0 07            [24] 5947 	push	ar7
      002089 E5*00            [12] 5948 	mov	a,_bp
      00208B 24 07            [12] 5949 	add	a,#0x07
      00208D F8               [12] 5950 	mov	r0,a
      00208E 86 82            [24] 5951 	mov	dpl,@r0
      002090 08               [12] 5952 	inc	r0
      002091 86 83            [24] 5953 	mov	dph,@r0
      002093 08               [12] 5954 	inc	r0
      002094 86 F0            [24] 5955 	mov	b,@r0
      002096 08               [12] 5956 	inc	r0
      002097 E6               [12] 5957 	mov	a,@r0
      002098 12r00r00         [24] 5958 	lcall	__modulong
      00209B AC 82            [24] 5959 	mov	r4,dpl
      00209D AD 83            [24] 5960 	mov	r5,dph
      00209F AE F0            [24] 5961 	mov	r6,b
      0020A1 FF               [12] 5962 	mov	r7,a
      0020A2 E5 81            [12] 5963 	mov	a,sp
      0020A4 24 FC            [12] 5964 	add	a,#0xfc
      0020A6 F5 81            [12] 5965 	mov	sp,a
      0020A8 E5*00            [12] 5966 	mov	a,_bp
      0020AA 24 19            [12] 5967 	add	a,#0x19
      0020AC F8               [12] 5968 	mov	r0,a
      0020AD A6 04            [24] 5969 	mov	@r0,ar4
      0020AF 08               [12] 5970 	inc	r0
      0020B0 A6 05            [24] 5971 	mov	@r0,ar5
      0020B2 08               [12] 5972 	inc	r0
      0020B3 A6 06            [24] 5973 	mov	@r0,ar6
      0020B5 08               [12] 5974 	inc	r0
      0020B6 A6 07            [24] 5975 	mov	@r0,ar7
      0020B8                       5976 00192$:
                                   5977 ;	calc.c:272: (void)stack_push(ctx->ps, d1);
      0020B8 E5*00            [12] 5978 	mov	a,_bp
      0020BA 24 0E            [12] 5979 	add	a,#0x0e
      0020BC F8               [12] 5980 	mov	r0,a
      0020BD 86 82            [24] 5981 	mov	dpl,@r0
      0020BF 08               [12] 5982 	inc	r0
      0020C0 86 83            [24] 5983 	mov	dph,@r0
      0020C2 08               [12] 5984 	inc	r0
      0020C3 86 F0            [24] 5985 	mov	b,@r0
      0020C5 12r00r00         [24] 5986 	lcall	__gptrget
      0020C8 FD               [12] 5987 	mov	r5,a
      0020C9 A3               [24] 5988 	inc	dptr
      0020CA 12r00r00         [24] 5989 	lcall	__gptrget
      0020CD FE               [12] 5990 	mov	r6,a
      0020CE A3               [24] 5991 	inc	dptr
      0020CF 12r00r00         [24] 5992 	lcall	__gptrget
      0020D2 FF               [12] 5993 	mov	r7,a
      0020D3 E5*00            [12] 5994 	mov	a,_bp
      0020D5 24 19            [12] 5995 	add	a,#0x19
      0020D7 F8               [12] 5996 	mov	r0,a
      0020D8 E6               [12] 5997 	mov	a,@r0
      0020D9 C0 E0            [24] 5998 	push	acc
      0020DB 08               [12] 5999 	inc	r0
      0020DC E6               [12] 6000 	mov	a,@r0
      0020DD C0 E0            [24] 6001 	push	acc
      0020DF 08               [12] 6002 	inc	r0
      0020E0 E6               [12] 6003 	mov	a,@r0
      0020E1 C0 E0            [24] 6004 	push	acc
      0020E3 08               [12] 6005 	inc	r0
      0020E4 E6               [12] 6006 	mov	a,@r0
      0020E5 C0 E0            [24] 6007 	push	acc
      0020E7 8D 82            [24] 6008 	mov	dpl,r5
      0020E9 8E 83            [24] 6009 	mov	dph,r6
      0020EB 8F F0            [24] 6010 	mov	b,r7
      0020ED 12r00r00         [24] 6011 	lcall	_stack_push
      0020F0 E5 81            [12] 6012 	mov	a,sp
      0020F2 24 FC            [12] 6013 	add	a,#0xfc
      0020F4 F5 81            [12] 6014 	mov	sp,a
                                   6015 ;	calc.c:274: break;
      0020F6 02r2Br95         [24] 6016 	ljmp	00249$
                                   6017 ;	calc.c:275: case '&':
      0020F9                       6018 00202$:
                                   6019 ;	calc.c:276: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      0020F9 E5*00            [12] 6020 	mov	a,_bp
      0020FB 24 15            [12] 6021 	add	a,#0x15
      0020FD FF               [12] 6022 	mov	r7,a
      0020FE E5*00            [12] 6023 	mov	a,_bp
      002100 24 0E            [12] 6024 	add	a,#0x0e
      002102 F8               [12] 6025 	mov	r0,a
      002103 A6 07            [24] 6026 	mov	@r0,ar7
      002105 08               [12] 6027 	inc	r0
      002106 76 00            [12] 6028 	mov	@r0,#0x00
      002108 08               [12] 6029 	inc	r0
      002109 76 40            [12] 6030 	mov	@r0,#0x40
      00210B E5*00            [12] 6031 	mov	a,_bp
      00210D 24 12            [12] 6032 	add	a,#0x12
      00210F F8               [12] 6033 	mov	r0,a
      002110 74 13            [12] 6034 	mov	a,#0x13
      002112 26               [12] 6035 	add	a,@r0
      002113 FA               [12] 6036 	mov	r2,a
      002114 74 40            [12] 6037 	mov	a,#0x40
      002116 08               [12] 6038 	inc	r0
      002117 36               [12] 6039 	addc	a,@r0
      002118 FB               [12] 6040 	mov	r3,a
      002119 08               [12] 6041 	inc	r0
      00211A 86 04            [24] 6042 	mov	ar4,@r0
      00211C 8A 82            [24] 6043 	mov	dpl,r2
      00211E 8B 83            [24] 6044 	mov	dph,r3
      002120 8C F0            [24] 6045 	mov	b,r4
      002122 12r00r00         [24] 6046 	lcall	__gptrget
      002125 FD               [12] 6047 	mov	r5,a
      002126 A3               [24] 6048 	inc	dptr
      002127 12r00r00         [24] 6049 	lcall	__gptrget
      00212A FE               [12] 6050 	mov	r6,a
      00212B A3               [24] 6051 	inc	dptr
      00212C 12r00r00         [24] 6052 	lcall	__gptrget
      00212F FF               [12] 6053 	mov	r7,a
      002130 C0 04            [24] 6054 	push	ar4
      002132 C0 03            [24] 6055 	push	ar3
      002134 C0 02            [24] 6056 	push	ar2
      002136 E5*00            [12] 6057 	mov	a,_bp
      002138 24 0E            [12] 6058 	add	a,#0x0e
      00213A F8               [12] 6059 	mov	r0,a
      00213B E6               [12] 6060 	mov	a,@r0
      00213C C0 E0            [24] 6061 	push	acc
      00213E 08               [12] 6062 	inc	r0
      00213F E6               [12] 6063 	mov	a,@r0
      002140 C0 E0            [24] 6064 	push	acc
      002142 08               [12] 6065 	inc	r0
      002143 E6               [12] 6066 	mov	a,@r0
      002144 C0 E0            [24] 6067 	push	acc
      002146 8D 82            [24] 6068 	mov	dpl,r5
      002148 8E 83            [24] 6069 	mov	dph,r6
      00214A 8F F0            [24] 6070 	mov	b,r7
      00214C 12r00r00         [24] 6071 	lcall	_stack_pop
      00214F AE 82            [24] 6072 	mov	r6,dpl
      002151 AF 83            [24] 6073 	mov	r7,dph
      002153 15 81            [12] 6074 	dec	sp
      002155 15 81            [12] 6075 	dec	sp
      002157 15 81            [12] 6076 	dec	sp
      002159 D0 02            [24] 6077 	pop	ar2
      00215B D0 03            [24] 6078 	pop	ar3
      00215D D0 04            [24] 6079 	pop	ar4
      00215F EE               [12] 6080 	mov	a,r6
      002160 4F               [12] 6081 	orl	a,r7
      002161 70 25            [24] 6082 	jnz	00207$
      002163 7Dr4E            [12] 6083 	mov	r5,#___str_10
      002165 7Cs00            [12] 6084 	mov	r4,#(___str_10 >> 8)
      002167 7B 80            [12] 6085 	mov	r3,#0x80
                                   6086 ;	calc.c:51: return;
      002169                       6087 00462$:
                                   6088 ;	calc.c:49: for (; *s; s++) putchar(*s);
      002169 8D 82            [24] 6089 	mov	dpl,r5
      00216B 8C 83            [24] 6090 	mov	dph,r4
      00216D 8B F0            [24] 6091 	mov	b,r3
      00216F 12r00r00         [24] 6092 	lcall	__gptrget
      002172 FF               [12] 6093 	mov	r7,a
      002173 70 03            [24] 6094 	jnz	01366$
      002175 02r2Br95         [24] 6095 	ljmp	00249$
      002178                       6096 01366$:
      002178 7E 00            [12] 6097 	mov	r6,#0x00
      00217A 8F 82            [24] 6098 	mov	dpl,r7
      00217C 8E 83            [24] 6099 	mov	dph,r6
      00217E 12r00r00         [24] 6100 	lcall	_putchar
      002181 0D               [12] 6101 	inc	r5
                                   6102 ;	calc.c:276: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      002182 BD 00 E4         [24] 6103 	cjne	r5,#0x00,00462$
      002185 0C               [12] 6104 	inc	r4
      002186 80 E1            [24] 6105 	sjmp	00462$
      002188                       6106 00207$:
                                   6107 ;	calc.c:277: else if (!stack_pop(ctx->ps, &d1)) {
      002188 E5*00            [12] 6108 	mov	a,_bp
      00218A 24 19            [12] 6109 	add	a,#0x19
      00218C FF               [12] 6110 	mov	r7,a
      00218D E5*00            [12] 6111 	mov	a,_bp
      00218F 24 0E            [12] 6112 	add	a,#0x0e
      002191 F8               [12] 6113 	mov	r0,a
      002192 A6 07            [24] 6114 	mov	@r0,ar7
      002194 08               [12] 6115 	inc	r0
      002195 76 00            [12] 6116 	mov	@r0,#0x00
      002197 08               [12] 6117 	inc	r0
      002198 76 40            [12] 6118 	mov	@r0,#0x40
      00219A 8A 82            [24] 6119 	mov	dpl,r2
      00219C 8B 83            [24] 6120 	mov	dph,r3
      00219E 8C F0            [24] 6121 	mov	b,r4
      0021A0 12r00r00         [24] 6122 	lcall	__gptrget
      0021A3 FD               [12] 6123 	mov	r5,a
      0021A4 A3               [24] 6124 	inc	dptr
      0021A5 12r00r00         [24] 6125 	lcall	__gptrget
      0021A8 FE               [12] 6126 	mov	r6,a
      0021A9 A3               [24] 6127 	inc	dptr
      0021AA 12r00r00         [24] 6128 	lcall	__gptrget
      0021AD FF               [12] 6129 	mov	r7,a
      0021AE C0 04            [24] 6130 	push	ar4
      0021B0 C0 03            [24] 6131 	push	ar3
      0021B2 C0 02            [24] 6132 	push	ar2
      0021B4 E5*00            [12] 6133 	mov	a,_bp
      0021B6 24 0E            [12] 6134 	add	a,#0x0e
      0021B8 F8               [12] 6135 	mov	r0,a
      0021B9 E6               [12] 6136 	mov	a,@r0
      0021BA C0 E0            [24] 6137 	push	acc
      0021BC 08               [12] 6138 	inc	r0
      0021BD E6               [12] 6139 	mov	a,@r0
      0021BE C0 E0            [24] 6140 	push	acc
      0021C0 08               [12] 6141 	inc	r0
      0021C1 E6               [12] 6142 	mov	a,@r0
      0021C2 C0 E0            [24] 6143 	push	acc
      0021C4 8D 82            [24] 6144 	mov	dpl,r5
      0021C6 8E 83            [24] 6145 	mov	dph,r6
      0021C8 8F F0            [24] 6146 	mov	b,r7
      0021CA 12r00r00         [24] 6147 	lcall	_stack_pop
      0021CD AE 82            [24] 6148 	mov	r6,dpl
      0021CF AF 83            [24] 6149 	mov	r7,dph
      0021D1 15 81            [12] 6150 	dec	sp
      0021D3 15 81            [12] 6151 	dec	sp
      0021D5 15 81            [12] 6152 	dec	sp
      0021D7 D0 02            [24] 6153 	pop	ar2
      0021D9 D0 03            [24] 6154 	pop	ar3
      0021DB D0 04            [24] 6155 	pop	ar4
      0021DD EE               [12] 6156 	mov	a,r6
      0021DE 4F               [12] 6157 	orl	a,r7
      0021DF 70 5C            [24] 6158 	jnz	00204$
                                   6159 ;	calc.c:278: (void)stack_push(ctx->ps, d0);
      0021E1 8A 82            [24] 6160 	mov	dpl,r2
      0021E3 8B 83            [24] 6161 	mov	dph,r3
      0021E5 8C F0            [24] 6162 	mov	b,r4
      0021E7 12r00r00         [24] 6163 	lcall	__gptrget
      0021EA FD               [12] 6164 	mov	r5,a
      0021EB A3               [24] 6165 	inc	dptr
      0021EC 12r00r00         [24] 6166 	lcall	__gptrget
      0021EF FE               [12] 6167 	mov	r6,a
      0021F0 A3               [24] 6168 	inc	dptr
      0021F1 12r00r00         [24] 6169 	lcall	__gptrget
      0021F4 FF               [12] 6170 	mov	r7,a
      0021F5 E5*00            [12] 6171 	mov	a,_bp
      0021F7 24 15            [12] 6172 	add	a,#0x15
      0021F9 F8               [12] 6173 	mov	r0,a
      0021FA E6               [12] 6174 	mov	a,@r0
      0021FB C0 E0            [24] 6175 	push	acc
      0021FD 08               [12] 6176 	inc	r0
      0021FE E6               [12] 6177 	mov	a,@r0
      0021FF C0 E0            [24] 6178 	push	acc
      002201 08               [12] 6179 	inc	r0
      002202 E6               [12] 6180 	mov	a,@r0
      002203 C0 E0            [24] 6181 	push	acc
      002205 08               [12] 6182 	inc	r0
      002206 E6               [12] 6183 	mov	a,@r0
      002207 C0 E0            [24] 6184 	push	acc
      002209 8D 82            [24] 6185 	mov	dpl,r5
      00220B 8E 83            [24] 6186 	mov	dph,r6
      00220D 8F F0            [24] 6187 	mov	b,r7
      00220F 12r00r00         [24] 6188 	lcall	_stack_push
      002212 E5 81            [12] 6189 	mov	a,sp
      002214 24 FC            [12] 6190 	add	a,#0xfc
      002216 F5 81            [12] 6191 	mov	sp,a
                                   6192 ;	calc.c:279: printstr("\r\nstack underflow\r\n");
      002218 7Dr4E            [12] 6193 	mov	r5,#___str_10
      00221A 7Cs00            [12] 6194 	mov	r4,#(___str_10 >> 8)
      00221C 7B 80            [12] 6195 	mov	r3,#0x80
                                   6196 ;	calc.c:51: return;
      00221E                       6197 00465$:
                                   6198 ;	calc.c:49: for (; *s; s++) putchar(*s);
      00221E 8D 82            [24] 6199 	mov	dpl,r5
      002220 8C 83            [24] 6200 	mov	dph,r4
      002222 8B F0            [24] 6201 	mov	b,r3
      002224 12r00r00         [24] 6202 	lcall	__gptrget
      002227 FF               [12] 6203 	mov	r7,a
      002228 70 03            [24] 6204 	jnz	01369$
      00222A 02r2Br95         [24] 6205 	ljmp	00249$
      00222D                       6206 01369$:
      00222D 7E 00            [12] 6207 	mov	r6,#0x00
      00222F 8F 82            [24] 6208 	mov	dpl,r7
      002231 8E 83            [24] 6209 	mov	dph,r6
      002233 12r00r00         [24] 6210 	lcall	_putchar
      002236 0D               [12] 6211 	inc	r5
                                   6212 ;	calc.c:279: printstr("\r\nstack underflow\r\n");
      002237 BD 00 E4         [24] 6213 	cjne	r5,#0x00,00465$
      00223A 0C               [12] 6214 	inc	r4
      00223B 80 E1            [24] 6215 	sjmp	00465$
      00223D                       6216 00204$:
                                   6217 ;	calc.c:281: d1 &= d0;
      00223D E5*00            [12] 6218 	mov	a,_bp
      00223F 24 19            [12] 6219 	add	a,#0x19
      002241 F8               [12] 6220 	mov	r0,a
      002242 E5*00            [12] 6221 	mov	a,_bp
      002244 24 15            [12] 6222 	add	a,#0x15
      002246 F9               [12] 6223 	mov	r1,a
      002247 E7               [12] 6224 	mov	a,@r1
      002248 56               [12] 6225 	anl	a,@r0
      002249 F6               [12] 6226 	mov	@r0,a
      00224A 09               [12] 6227 	inc	r1
      00224B E7               [12] 6228 	mov	a,@r1
      00224C 08               [12] 6229 	inc	r0
      00224D 56               [12] 6230 	anl	a,@r0
      00224E F6               [12] 6231 	mov	@r0,a
      00224F 09               [12] 6232 	inc	r1
      002250 E7               [12] 6233 	mov	a,@r1
      002251 08               [12] 6234 	inc	r0
      002252 56               [12] 6235 	anl	a,@r0
      002253 F6               [12] 6236 	mov	@r0,a
      002254 09               [12] 6237 	inc	r1
      002255 E7               [12] 6238 	mov	a,@r1
      002256 08               [12] 6239 	inc	r0
      002257 56               [12] 6240 	anl	a,@r0
      002258 F6               [12] 6241 	mov	@r0,a
                                   6242 ;	calc.c:282: (void)stack_push(ctx->ps, d1);
      002259 8A 82            [24] 6243 	mov	dpl,r2
      00225B 8B 83            [24] 6244 	mov	dph,r3
      00225D 8C F0            [24] 6245 	mov	b,r4
      00225F 12r00r00         [24] 6246 	lcall	__gptrget
      002262 FA               [12] 6247 	mov	r2,a
      002263 A3               [24] 6248 	inc	dptr
      002264 12r00r00         [24] 6249 	lcall	__gptrget
      002267 FB               [12] 6250 	mov	r3,a
      002268 A3               [24] 6251 	inc	dptr
      002269 12r00r00         [24] 6252 	lcall	__gptrget
      00226C FC               [12] 6253 	mov	r4,a
      00226D E5*00            [12] 6254 	mov	a,_bp
      00226F 24 19            [12] 6255 	add	a,#0x19
      002271 F8               [12] 6256 	mov	r0,a
      002272 E6               [12] 6257 	mov	a,@r0
      002273 C0 E0            [24] 6258 	push	acc
      002275 08               [12] 6259 	inc	r0
      002276 E6               [12] 6260 	mov	a,@r0
      002277 C0 E0            [24] 6261 	push	acc
      002279 08               [12] 6262 	inc	r0
      00227A E6               [12] 6263 	mov	a,@r0
      00227B C0 E0            [24] 6264 	push	acc
      00227D 08               [12] 6265 	inc	r0
      00227E E6               [12] 6266 	mov	a,@r0
      00227F C0 E0            [24] 6267 	push	acc
      002281 8A 82            [24] 6268 	mov	dpl,r2
      002283 8B 83            [24] 6269 	mov	dph,r3
      002285 8C F0            [24] 6270 	mov	b,r4
      002287 12r00r00         [24] 6271 	lcall	_stack_push
      00228A E5 81            [12] 6272 	mov	a,sp
      00228C 24 FC            [12] 6273 	add	a,#0xfc
      00228E F5 81            [12] 6274 	mov	sp,a
                                   6275 ;	calc.c:284: break;
      002290 02r2Br95         [24] 6276 	ljmp	00249$
                                   6277 ;	calc.c:285: case '|':
      002293                       6278 00209$:
                                   6279 ;	calc.c:286: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      002293 E5*00            [12] 6280 	mov	a,_bp
      002295 24 15            [12] 6281 	add	a,#0x15
      002297 FF               [12] 6282 	mov	r7,a
      002298 E5*00            [12] 6283 	mov	a,_bp
      00229A 24 0E            [12] 6284 	add	a,#0x0e
      00229C F8               [12] 6285 	mov	r0,a
      00229D A6 07            [24] 6286 	mov	@r0,ar7
      00229F 08               [12] 6287 	inc	r0
      0022A0 76 00            [12] 6288 	mov	@r0,#0x00
      0022A2 08               [12] 6289 	inc	r0
      0022A3 76 40            [12] 6290 	mov	@r0,#0x40
      0022A5 E5*00            [12] 6291 	mov	a,_bp
      0022A7 24 12            [12] 6292 	add	a,#0x12
      0022A9 F8               [12] 6293 	mov	r0,a
      0022AA 74 13            [12] 6294 	mov	a,#0x13
      0022AC 26               [12] 6295 	add	a,@r0
      0022AD FA               [12] 6296 	mov	r2,a
      0022AE 74 40            [12] 6297 	mov	a,#0x40
      0022B0 08               [12] 6298 	inc	r0
      0022B1 36               [12] 6299 	addc	a,@r0
      0022B2 FB               [12] 6300 	mov	r3,a
      0022B3 08               [12] 6301 	inc	r0
      0022B4 86 04            [24] 6302 	mov	ar4,@r0
      0022B6 8A 82            [24] 6303 	mov	dpl,r2
      0022B8 8B 83            [24] 6304 	mov	dph,r3
      0022BA 8C F0            [24] 6305 	mov	b,r4
      0022BC 12r00r00         [24] 6306 	lcall	__gptrget
      0022BF FD               [12] 6307 	mov	r5,a
      0022C0 A3               [24] 6308 	inc	dptr
      0022C1 12r00r00         [24] 6309 	lcall	__gptrget
      0022C4 FE               [12] 6310 	mov	r6,a
      0022C5 A3               [24] 6311 	inc	dptr
      0022C6 12r00r00         [24] 6312 	lcall	__gptrget
      0022C9 FF               [12] 6313 	mov	r7,a
      0022CA C0 04            [24] 6314 	push	ar4
      0022CC C0 03            [24] 6315 	push	ar3
      0022CE C0 02            [24] 6316 	push	ar2
      0022D0 E5*00            [12] 6317 	mov	a,_bp
      0022D2 24 0E            [12] 6318 	add	a,#0x0e
      0022D4 F8               [12] 6319 	mov	r0,a
      0022D5 E6               [12] 6320 	mov	a,@r0
      0022D6 C0 E0            [24] 6321 	push	acc
      0022D8 08               [12] 6322 	inc	r0
      0022D9 E6               [12] 6323 	mov	a,@r0
      0022DA C0 E0            [24] 6324 	push	acc
      0022DC 08               [12] 6325 	inc	r0
      0022DD E6               [12] 6326 	mov	a,@r0
      0022DE C0 E0            [24] 6327 	push	acc
      0022E0 8D 82            [24] 6328 	mov	dpl,r5
      0022E2 8E 83            [24] 6329 	mov	dph,r6
      0022E4 8F F0            [24] 6330 	mov	b,r7
      0022E6 12r00r00         [24] 6331 	lcall	_stack_pop
      0022E9 AE 82            [24] 6332 	mov	r6,dpl
      0022EB AF 83            [24] 6333 	mov	r7,dph
      0022ED 15 81            [12] 6334 	dec	sp
      0022EF 15 81            [12] 6335 	dec	sp
      0022F1 15 81            [12] 6336 	dec	sp
      0022F3 D0 02            [24] 6337 	pop	ar2
      0022F5 D0 03            [24] 6338 	pop	ar3
      0022F7 D0 04            [24] 6339 	pop	ar4
      0022F9 EE               [12] 6340 	mov	a,r6
      0022FA 4F               [12] 6341 	orl	a,r7
      0022FB 70 25            [24] 6342 	jnz	00214$
      0022FD 7Dr4E            [12] 6343 	mov	r5,#___str_10
      0022FF 7Cs00            [12] 6344 	mov	r4,#(___str_10 >> 8)
      002301 7B 80            [12] 6345 	mov	r3,#0x80
                                   6346 ;	calc.c:51: return;
      002303                       6347 00468$:
                                   6348 ;	calc.c:49: for (; *s; s++) putchar(*s);
      002303 8D 82            [24] 6349 	mov	dpl,r5
      002305 8C 83            [24] 6350 	mov	dph,r4
      002307 8B F0            [24] 6351 	mov	b,r3
      002309 12r00r00         [24] 6352 	lcall	__gptrget
      00230C FF               [12] 6353 	mov	r7,a
      00230D 70 03            [24] 6354 	jnz	01372$
      00230F 02r2Br95         [24] 6355 	ljmp	00249$
      002312                       6356 01372$:
      002312 7E 00            [12] 6357 	mov	r6,#0x00
      002314 8F 82            [24] 6358 	mov	dpl,r7
      002316 8E 83            [24] 6359 	mov	dph,r6
      002318 12r00r00         [24] 6360 	lcall	_putchar
      00231B 0D               [12] 6361 	inc	r5
                                   6362 ;	calc.c:286: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      00231C BD 00 E4         [24] 6363 	cjne	r5,#0x00,00468$
      00231F 0C               [12] 6364 	inc	r4
      002320 80 E1            [24] 6365 	sjmp	00468$
      002322                       6366 00214$:
                                   6367 ;	calc.c:287: else if (!stack_pop(ctx->ps, &d1)) {
      002322 E5*00            [12] 6368 	mov	a,_bp
      002324 24 19            [12] 6369 	add	a,#0x19
      002326 FF               [12] 6370 	mov	r7,a
      002327 E5*00            [12] 6371 	mov	a,_bp
      002329 24 0E            [12] 6372 	add	a,#0x0e
      00232B F8               [12] 6373 	mov	r0,a
      00232C A6 07            [24] 6374 	mov	@r0,ar7
      00232E 08               [12] 6375 	inc	r0
      00232F 76 00            [12] 6376 	mov	@r0,#0x00
      002331 08               [12] 6377 	inc	r0
      002332 76 40            [12] 6378 	mov	@r0,#0x40
      002334 8A 82            [24] 6379 	mov	dpl,r2
      002336 8B 83            [24] 6380 	mov	dph,r3
      002338 8C F0            [24] 6381 	mov	b,r4
      00233A 12r00r00         [24] 6382 	lcall	__gptrget
      00233D FD               [12] 6383 	mov	r5,a
      00233E A3               [24] 6384 	inc	dptr
      00233F 12r00r00         [24] 6385 	lcall	__gptrget
      002342 FE               [12] 6386 	mov	r6,a
      002343 A3               [24] 6387 	inc	dptr
      002344 12r00r00         [24] 6388 	lcall	__gptrget
      002347 FF               [12] 6389 	mov	r7,a
      002348 C0 04            [24] 6390 	push	ar4
      00234A C0 03            [24] 6391 	push	ar3
      00234C C0 02            [24] 6392 	push	ar2
      00234E E5*00            [12] 6393 	mov	a,_bp
      002350 24 0E            [12] 6394 	add	a,#0x0e
      002352 F8               [12] 6395 	mov	r0,a
      002353 E6               [12] 6396 	mov	a,@r0
      002354 C0 E0            [24] 6397 	push	acc
      002356 08               [12] 6398 	inc	r0
      002357 E6               [12] 6399 	mov	a,@r0
      002358 C0 E0            [24] 6400 	push	acc
      00235A 08               [12] 6401 	inc	r0
      00235B E6               [12] 6402 	mov	a,@r0
      00235C C0 E0            [24] 6403 	push	acc
      00235E 8D 82            [24] 6404 	mov	dpl,r5
      002360 8E 83            [24] 6405 	mov	dph,r6
      002362 8F F0            [24] 6406 	mov	b,r7
      002364 12r00r00         [24] 6407 	lcall	_stack_pop
      002367 AE 82            [24] 6408 	mov	r6,dpl
      002369 AF 83            [24] 6409 	mov	r7,dph
      00236B 15 81            [12] 6410 	dec	sp
      00236D 15 81            [12] 6411 	dec	sp
      00236F 15 81            [12] 6412 	dec	sp
      002371 D0 02            [24] 6413 	pop	ar2
      002373 D0 03            [24] 6414 	pop	ar3
      002375 D0 04            [24] 6415 	pop	ar4
      002377 EE               [12] 6416 	mov	a,r6
      002378 4F               [12] 6417 	orl	a,r7
      002379 70 5C            [24] 6418 	jnz	00211$
                                   6419 ;	calc.c:288: (void)stack_push(ctx->ps, d0);
      00237B 8A 82            [24] 6420 	mov	dpl,r2
      00237D 8B 83            [24] 6421 	mov	dph,r3
      00237F 8C F0            [24] 6422 	mov	b,r4
      002381 12r00r00         [24] 6423 	lcall	__gptrget
      002384 FD               [12] 6424 	mov	r5,a
      002385 A3               [24] 6425 	inc	dptr
      002386 12r00r00         [24] 6426 	lcall	__gptrget
      002389 FE               [12] 6427 	mov	r6,a
      00238A A3               [24] 6428 	inc	dptr
      00238B 12r00r00         [24] 6429 	lcall	__gptrget
      00238E FF               [12] 6430 	mov	r7,a
      00238F E5*00            [12] 6431 	mov	a,_bp
      002391 24 15            [12] 6432 	add	a,#0x15
      002393 F8               [12] 6433 	mov	r0,a
      002394 E6               [12] 6434 	mov	a,@r0
      002395 C0 E0            [24] 6435 	push	acc
      002397 08               [12] 6436 	inc	r0
      002398 E6               [12] 6437 	mov	a,@r0
      002399 C0 E0            [24] 6438 	push	acc
      00239B 08               [12] 6439 	inc	r0
      00239C E6               [12] 6440 	mov	a,@r0
      00239D C0 E0            [24] 6441 	push	acc
      00239F 08               [12] 6442 	inc	r0
      0023A0 E6               [12] 6443 	mov	a,@r0
      0023A1 C0 E0            [24] 6444 	push	acc
      0023A3 8D 82            [24] 6445 	mov	dpl,r5
      0023A5 8E 83            [24] 6446 	mov	dph,r6
      0023A7 8F F0            [24] 6447 	mov	b,r7
      0023A9 12r00r00         [24] 6448 	lcall	_stack_push
      0023AC E5 81            [12] 6449 	mov	a,sp
      0023AE 24 FC            [12] 6450 	add	a,#0xfc
      0023B0 F5 81            [12] 6451 	mov	sp,a
                                   6452 ;	calc.c:289: printstr("\r\nstack underflow\r\n");
      0023B2 7Dr4E            [12] 6453 	mov	r5,#___str_10
      0023B4 7Cs00            [12] 6454 	mov	r4,#(___str_10 >> 8)
      0023B6 7B 80            [12] 6455 	mov	r3,#0x80
                                   6456 ;	calc.c:51: return;
      0023B8                       6457 00471$:
                                   6458 ;	calc.c:49: for (; *s; s++) putchar(*s);
      0023B8 8D 82            [24] 6459 	mov	dpl,r5
      0023BA 8C 83            [24] 6460 	mov	dph,r4
      0023BC 8B F0            [24] 6461 	mov	b,r3
      0023BE 12r00r00         [24] 6462 	lcall	__gptrget
      0023C1 FF               [12] 6463 	mov	r7,a
      0023C2 70 03            [24] 6464 	jnz	01375$
      0023C4 02r2Br95         [24] 6465 	ljmp	00249$
      0023C7                       6466 01375$:
      0023C7 7E 00            [12] 6467 	mov	r6,#0x00
      0023C9 8F 82            [24] 6468 	mov	dpl,r7
      0023CB 8E 83            [24] 6469 	mov	dph,r6
      0023CD 12r00r00         [24] 6470 	lcall	_putchar
      0023D0 0D               [12] 6471 	inc	r5
                                   6472 ;	calc.c:289: printstr("\r\nstack underflow\r\n");
      0023D1 BD 00 E4         [24] 6473 	cjne	r5,#0x00,00471$
      0023D4 0C               [12] 6474 	inc	r4
      0023D5 80 E1            [24] 6475 	sjmp	00471$
      0023D7                       6476 00211$:
                                   6477 ;	calc.c:291: d1 |= d0;
      0023D7 E5*00            [12] 6478 	mov	a,_bp
      0023D9 24 19            [12] 6479 	add	a,#0x19
      0023DB F8               [12] 6480 	mov	r0,a
      0023DC E5*00            [12] 6481 	mov	a,_bp
      0023DE 24 15            [12] 6482 	add	a,#0x15
      0023E0 F9               [12] 6483 	mov	r1,a
      0023E1 E7               [12] 6484 	mov	a,@r1
      0023E2 46               [12] 6485 	orl	a,@r0
      0023E3 F6               [12] 6486 	mov	@r0,a
      0023E4 09               [12] 6487 	inc	r1
      0023E5 E7               [12] 6488 	mov	a,@r1
      0023E6 08               [12] 6489 	inc	r0
      0023E7 46               [12] 6490 	orl	a,@r0
      0023E8 F6               [12] 6491 	mov	@r0,a
      0023E9 09               [12] 6492 	inc	r1
      0023EA E7               [12] 6493 	mov	a,@r1
      0023EB 08               [12] 6494 	inc	r0
      0023EC 46               [12] 6495 	orl	a,@r0
      0023ED F6               [12] 6496 	mov	@r0,a
      0023EE 09               [12] 6497 	inc	r1
      0023EF E7               [12] 6498 	mov	a,@r1
      0023F0 08               [12] 6499 	inc	r0
      0023F1 46               [12] 6500 	orl	a,@r0
      0023F2 F6               [12] 6501 	mov	@r0,a
                                   6502 ;	calc.c:292: (void)stack_push(ctx->ps, d1);
      0023F3 8A 82            [24] 6503 	mov	dpl,r2
      0023F5 8B 83            [24] 6504 	mov	dph,r3
      0023F7 8C F0            [24] 6505 	mov	b,r4
      0023F9 12r00r00         [24] 6506 	lcall	__gptrget
      0023FC FA               [12] 6507 	mov	r2,a
      0023FD A3               [24] 6508 	inc	dptr
      0023FE 12r00r00         [24] 6509 	lcall	__gptrget
      002401 FB               [12] 6510 	mov	r3,a
      002402 A3               [24] 6511 	inc	dptr
      002403 12r00r00         [24] 6512 	lcall	__gptrget
      002406 FC               [12] 6513 	mov	r4,a
      002407 E5*00            [12] 6514 	mov	a,_bp
      002409 24 19            [12] 6515 	add	a,#0x19
      00240B F8               [12] 6516 	mov	r0,a
      00240C E6               [12] 6517 	mov	a,@r0
      00240D C0 E0            [24] 6518 	push	acc
      00240F 08               [12] 6519 	inc	r0
      002410 E6               [12] 6520 	mov	a,@r0
      002411 C0 E0            [24] 6521 	push	acc
      002413 08               [12] 6522 	inc	r0
      002414 E6               [12] 6523 	mov	a,@r0
      002415 C0 E0            [24] 6524 	push	acc
      002417 08               [12] 6525 	inc	r0
      002418 E6               [12] 6526 	mov	a,@r0
      002419 C0 E0            [24] 6527 	push	acc
      00241B 8A 82            [24] 6528 	mov	dpl,r2
      00241D 8B 83            [24] 6529 	mov	dph,r3
      00241F 8C F0            [24] 6530 	mov	b,r4
      002421 12r00r00         [24] 6531 	lcall	_stack_push
      002424 E5 81            [12] 6532 	mov	a,sp
      002426 24 FC            [12] 6533 	add	a,#0xfc
      002428 F5 81            [12] 6534 	mov	sp,a
                                   6535 ;	calc.c:294: break;
      00242A 02r2Br95         [24] 6536 	ljmp	00249$
                                   6537 ;	calc.c:295: case '^':
      00242D                       6538 00216$:
                                   6539 ;	calc.c:296: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      00242D E5*00            [12] 6540 	mov	a,_bp
      00242F 24 15            [12] 6541 	add	a,#0x15
      002431 FF               [12] 6542 	mov	r7,a
      002432 E5*00            [12] 6543 	mov	a,_bp
      002434 24 0E            [12] 6544 	add	a,#0x0e
      002436 F8               [12] 6545 	mov	r0,a
      002437 A6 07            [24] 6546 	mov	@r0,ar7
      002439 08               [12] 6547 	inc	r0
      00243A 76 00            [12] 6548 	mov	@r0,#0x00
      00243C 08               [12] 6549 	inc	r0
      00243D 76 40            [12] 6550 	mov	@r0,#0x40
      00243F E5*00            [12] 6551 	mov	a,_bp
      002441 24 12            [12] 6552 	add	a,#0x12
      002443 F8               [12] 6553 	mov	r0,a
      002444 74 13            [12] 6554 	mov	a,#0x13
      002446 26               [12] 6555 	add	a,@r0
      002447 FA               [12] 6556 	mov	r2,a
      002448 74 40            [12] 6557 	mov	a,#0x40
      00244A 08               [12] 6558 	inc	r0
      00244B 36               [12] 6559 	addc	a,@r0
      00244C FB               [12] 6560 	mov	r3,a
      00244D 08               [12] 6561 	inc	r0
      00244E 86 04            [24] 6562 	mov	ar4,@r0
      002450 8A 82            [24] 6563 	mov	dpl,r2
      002452 8B 83            [24] 6564 	mov	dph,r3
      002454 8C F0            [24] 6565 	mov	b,r4
      002456 12r00r00         [24] 6566 	lcall	__gptrget
      002459 FD               [12] 6567 	mov	r5,a
      00245A A3               [24] 6568 	inc	dptr
      00245B 12r00r00         [24] 6569 	lcall	__gptrget
      00245E FE               [12] 6570 	mov	r6,a
      00245F A3               [24] 6571 	inc	dptr
      002460 12r00r00         [24] 6572 	lcall	__gptrget
      002463 FF               [12] 6573 	mov	r7,a
      002464 C0 04            [24] 6574 	push	ar4
      002466 C0 03            [24] 6575 	push	ar3
      002468 C0 02            [24] 6576 	push	ar2
      00246A E5*00            [12] 6577 	mov	a,_bp
      00246C 24 0E            [12] 6578 	add	a,#0x0e
      00246E F8               [12] 6579 	mov	r0,a
      00246F E6               [12] 6580 	mov	a,@r0
      002470 C0 E0            [24] 6581 	push	acc
      002472 08               [12] 6582 	inc	r0
      002473 E6               [12] 6583 	mov	a,@r0
      002474 C0 E0            [24] 6584 	push	acc
      002476 08               [12] 6585 	inc	r0
      002477 E6               [12] 6586 	mov	a,@r0
      002478 C0 E0            [24] 6587 	push	acc
      00247A 8D 82            [24] 6588 	mov	dpl,r5
      00247C 8E 83            [24] 6589 	mov	dph,r6
      00247E 8F F0            [24] 6590 	mov	b,r7
      002480 12r00r00         [24] 6591 	lcall	_stack_pop
      002483 AE 82            [24] 6592 	mov	r6,dpl
      002485 AF 83            [24] 6593 	mov	r7,dph
      002487 15 81            [12] 6594 	dec	sp
      002489 15 81            [12] 6595 	dec	sp
      00248B 15 81            [12] 6596 	dec	sp
      00248D D0 02            [24] 6597 	pop	ar2
      00248F D0 03            [24] 6598 	pop	ar3
      002491 D0 04            [24] 6599 	pop	ar4
      002493 EE               [12] 6600 	mov	a,r6
      002494 4F               [12] 6601 	orl	a,r7
      002495 70 25            [24] 6602 	jnz	00221$
      002497 7Dr4E            [12] 6603 	mov	r5,#___str_10
      002499 7Cs00            [12] 6604 	mov	r4,#(___str_10 >> 8)
      00249B 7B 80            [12] 6605 	mov	r3,#0x80
                                   6606 ;	calc.c:51: return;
      00249D                       6607 00474$:
                                   6608 ;	calc.c:49: for (; *s; s++) putchar(*s);
      00249D 8D 82            [24] 6609 	mov	dpl,r5
      00249F 8C 83            [24] 6610 	mov	dph,r4
      0024A1 8B F0            [24] 6611 	mov	b,r3
      0024A3 12r00r00         [24] 6612 	lcall	__gptrget
      0024A6 FF               [12] 6613 	mov	r7,a
      0024A7 70 03            [24] 6614 	jnz	01378$
      0024A9 02r2Br95         [24] 6615 	ljmp	00249$
      0024AC                       6616 01378$:
      0024AC 7E 00            [12] 6617 	mov	r6,#0x00
      0024AE 8F 82            [24] 6618 	mov	dpl,r7
      0024B0 8E 83            [24] 6619 	mov	dph,r6
      0024B2 12r00r00         [24] 6620 	lcall	_putchar
      0024B5 0D               [12] 6621 	inc	r5
                                   6622 ;	calc.c:296: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      0024B6 BD 00 E4         [24] 6623 	cjne	r5,#0x00,00474$
      0024B9 0C               [12] 6624 	inc	r4
      0024BA 80 E1            [24] 6625 	sjmp	00474$
      0024BC                       6626 00221$:
                                   6627 ;	calc.c:297: else if (!stack_pop(ctx->ps, &d1)) {
      0024BC E5*00            [12] 6628 	mov	a,_bp
      0024BE 24 19            [12] 6629 	add	a,#0x19
      0024C0 FF               [12] 6630 	mov	r7,a
      0024C1 E5*00            [12] 6631 	mov	a,_bp
      0024C3 24 0E            [12] 6632 	add	a,#0x0e
      0024C5 F8               [12] 6633 	mov	r0,a
      0024C6 A6 07            [24] 6634 	mov	@r0,ar7
      0024C8 08               [12] 6635 	inc	r0
      0024C9 76 00            [12] 6636 	mov	@r0,#0x00
      0024CB 08               [12] 6637 	inc	r0
      0024CC 76 40            [12] 6638 	mov	@r0,#0x40
      0024CE 8A 82            [24] 6639 	mov	dpl,r2
      0024D0 8B 83            [24] 6640 	mov	dph,r3
      0024D2 8C F0            [24] 6641 	mov	b,r4
      0024D4 12r00r00         [24] 6642 	lcall	__gptrget
      0024D7 FD               [12] 6643 	mov	r5,a
      0024D8 A3               [24] 6644 	inc	dptr
      0024D9 12r00r00         [24] 6645 	lcall	__gptrget
      0024DC FE               [12] 6646 	mov	r6,a
      0024DD A3               [24] 6647 	inc	dptr
      0024DE 12r00r00         [24] 6648 	lcall	__gptrget
      0024E1 FF               [12] 6649 	mov	r7,a
      0024E2 C0 04            [24] 6650 	push	ar4
      0024E4 C0 03            [24] 6651 	push	ar3
      0024E6 C0 02            [24] 6652 	push	ar2
      0024E8 E5*00            [12] 6653 	mov	a,_bp
      0024EA 24 0E            [12] 6654 	add	a,#0x0e
      0024EC F8               [12] 6655 	mov	r0,a
      0024ED E6               [12] 6656 	mov	a,@r0
      0024EE C0 E0            [24] 6657 	push	acc
      0024F0 08               [12] 6658 	inc	r0
      0024F1 E6               [12] 6659 	mov	a,@r0
      0024F2 C0 E0            [24] 6660 	push	acc
      0024F4 08               [12] 6661 	inc	r0
      0024F5 E6               [12] 6662 	mov	a,@r0
      0024F6 C0 E0            [24] 6663 	push	acc
      0024F8 8D 82            [24] 6664 	mov	dpl,r5
      0024FA 8E 83            [24] 6665 	mov	dph,r6
      0024FC 8F F0            [24] 6666 	mov	b,r7
      0024FE 12r00r00         [24] 6667 	lcall	_stack_pop
      002501 AE 82            [24] 6668 	mov	r6,dpl
      002503 AF 83            [24] 6669 	mov	r7,dph
      002505 15 81            [12] 6670 	dec	sp
      002507 15 81            [12] 6671 	dec	sp
      002509 15 81            [12] 6672 	dec	sp
      00250B D0 02            [24] 6673 	pop	ar2
      00250D D0 03            [24] 6674 	pop	ar3
      00250F D0 04            [24] 6675 	pop	ar4
      002511 EE               [12] 6676 	mov	a,r6
      002512 4F               [12] 6677 	orl	a,r7
      002513 70 5C            [24] 6678 	jnz	00218$
                                   6679 ;	calc.c:298: (void)stack_push(ctx->ps, d0);
      002515 8A 82            [24] 6680 	mov	dpl,r2
      002517 8B 83            [24] 6681 	mov	dph,r3
      002519 8C F0            [24] 6682 	mov	b,r4
      00251B 12r00r00         [24] 6683 	lcall	__gptrget
      00251E FD               [12] 6684 	mov	r5,a
      00251F A3               [24] 6685 	inc	dptr
      002520 12r00r00         [24] 6686 	lcall	__gptrget
      002523 FE               [12] 6687 	mov	r6,a
      002524 A3               [24] 6688 	inc	dptr
      002525 12r00r00         [24] 6689 	lcall	__gptrget
      002528 FF               [12] 6690 	mov	r7,a
      002529 E5*00            [12] 6691 	mov	a,_bp
      00252B 24 15            [12] 6692 	add	a,#0x15
      00252D F8               [12] 6693 	mov	r0,a
      00252E E6               [12] 6694 	mov	a,@r0
      00252F C0 E0            [24] 6695 	push	acc
      002531 08               [12] 6696 	inc	r0
      002532 E6               [12] 6697 	mov	a,@r0
      002533 C0 E0            [24] 6698 	push	acc
      002535 08               [12] 6699 	inc	r0
      002536 E6               [12] 6700 	mov	a,@r0
      002537 C0 E0            [24] 6701 	push	acc
      002539 08               [12] 6702 	inc	r0
      00253A E6               [12] 6703 	mov	a,@r0
      00253B C0 E0            [24] 6704 	push	acc
      00253D 8D 82            [24] 6705 	mov	dpl,r5
      00253F 8E 83            [24] 6706 	mov	dph,r6
      002541 8F F0            [24] 6707 	mov	b,r7
      002543 12r00r00         [24] 6708 	lcall	_stack_push
      002546 E5 81            [12] 6709 	mov	a,sp
      002548 24 FC            [12] 6710 	add	a,#0xfc
      00254A F5 81            [12] 6711 	mov	sp,a
                                   6712 ;	calc.c:299: printstr("\r\nstack underflow\r\n");
      00254C 7Dr4E            [12] 6713 	mov	r5,#___str_10
      00254E 7Cs00            [12] 6714 	mov	r4,#(___str_10 >> 8)
      002550 7B 80            [12] 6715 	mov	r3,#0x80
                                   6716 ;	calc.c:51: return;
      002552                       6717 00477$:
                                   6718 ;	calc.c:49: for (; *s; s++) putchar(*s);
      002552 8D 82            [24] 6719 	mov	dpl,r5
      002554 8C 83            [24] 6720 	mov	dph,r4
      002556 8B F0            [24] 6721 	mov	b,r3
      002558 12r00r00         [24] 6722 	lcall	__gptrget
      00255B FF               [12] 6723 	mov	r7,a
      00255C 70 03            [24] 6724 	jnz	01381$
      00255E 02r2Br95         [24] 6725 	ljmp	00249$
      002561                       6726 01381$:
      002561 7E 00            [12] 6727 	mov	r6,#0x00
      002563 8F 82            [24] 6728 	mov	dpl,r7
      002565 8E 83            [24] 6729 	mov	dph,r6
      002567 12r00r00         [24] 6730 	lcall	_putchar
      00256A 0D               [12] 6731 	inc	r5
                                   6732 ;	calc.c:299: printstr("\r\nstack underflow\r\n");
      00256B BD 00 E4         [24] 6733 	cjne	r5,#0x00,00477$
      00256E 0C               [12] 6734 	inc	r4
      00256F 80 E1            [24] 6735 	sjmp	00477$
      002571                       6736 00218$:
                                   6737 ;	calc.c:301: d1 ^= d0;
      002571 E5*00            [12] 6738 	mov	a,_bp
      002573 24 19            [12] 6739 	add	a,#0x19
      002575 F8               [12] 6740 	mov	r0,a
      002576 E5*00            [12] 6741 	mov	a,_bp
      002578 24 15            [12] 6742 	add	a,#0x15
      00257A F9               [12] 6743 	mov	r1,a
      00257B E7               [12] 6744 	mov	a,@r1
      00257C 66               [12] 6745 	xrl	a,@r0
      00257D F6               [12] 6746 	mov	@r0,a
      00257E 09               [12] 6747 	inc	r1
      00257F E7               [12] 6748 	mov	a,@r1
      002580 08               [12] 6749 	inc	r0
      002581 66               [12] 6750 	xrl	a,@r0
      002582 F6               [12] 6751 	mov	@r0,a
      002583 09               [12] 6752 	inc	r1
      002584 E7               [12] 6753 	mov	a,@r1
      002585 08               [12] 6754 	inc	r0
      002586 66               [12] 6755 	xrl	a,@r0
      002587 F6               [12] 6756 	mov	@r0,a
      002588 09               [12] 6757 	inc	r1
      002589 E7               [12] 6758 	mov	a,@r1
      00258A 08               [12] 6759 	inc	r0
      00258B 66               [12] 6760 	xrl	a,@r0
      00258C F6               [12] 6761 	mov	@r0,a
                                   6762 ;	calc.c:302: (void)stack_push(ctx->ps, d1);
      00258D 8A 82            [24] 6763 	mov	dpl,r2
      00258F 8B 83            [24] 6764 	mov	dph,r3
      002591 8C F0            [24] 6765 	mov	b,r4
      002593 12r00r00         [24] 6766 	lcall	__gptrget
      002596 FA               [12] 6767 	mov	r2,a
      002597 A3               [24] 6768 	inc	dptr
      002598 12r00r00         [24] 6769 	lcall	__gptrget
      00259B FB               [12] 6770 	mov	r3,a
      00259C A3               [24] 6771 	inc	dptr
      00259D 12r00r00         [24] 6772 	lcall	__gptrget
      0025A0 FC               [12] 6773 	mov	r4,a
      0025A1 E5*00            [12] 6774 	mov	a,_bp
      0025A3 24 19            [12] 6775 	add	a,#0x19
      0025A5 F8               [12] 6776 	mov	r0,a
      0025A6 E6               [12] 6777 	mov	a,@r0
      0025A7 C0 E0            [24] 6778 	push	acc
      0025A9 08               [12] 6779 	inc	r0
      0025AA E6               [12] 6780 	mov	a,@r0
      0025AB C0 E0            [24] 6781 	push	acc
      0025AD 08               [12] 6782 	inc	r0
      0025AE E6               [12] 6783 	mov	a,@r0
      0025AF C0 E0            [24] 6784 	push	acc
      0025B1 08               [12] 6785 	inc	r0
      0025B2 E6               [12] 6786 	mov	a,@r0
      0025B3 C0 E0            [24] 6787 	push	acc
      0025B5 8A 82            [24] 6788 	mov	dpl,r2
      0025B7 8B 83            [24] 6789 	mov	dph,r3
      0025B9 8C F0            [24] 6790 	mov	b,r4
      0025BB 12r00r00         [24] 6791 	lcall	_stack_push
      0025BE E5 81            [12] 6792 	mov	a,sp
      0025C0 24 FC            [12] 6793 	add	a,#0xfc
      0025C2 F5 81            [12] 6794 	mov	sp,a
                                   6795 ;	calc.c:304: break;
      0025C4 02r2Br95         [24] 6796 	ljmp	00249$
                                   6797 ;	calc.c:305: case '>':
      0025C7                       6798 00223$:
                                   6799 ;	calc.c:306: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      0025C7 E5*00            [12] 6800 	mov	a,_bp
      0025C9 24 15            [12] 6801 	add	a,#0x15
      0025CB FC               [12] 6802 	mov	r4,a
      0025CC 7B 00            [12] 6803 	mov	r3,#0x00
      0025CE 7A 40            [12] 6804 	mov	r2,#0x40
      0025D0 E5*00            [12] 6805 	mov	a,_bp
      0025D2 24 12            [12] 6806 	add	a,#0x12
      0025D4 F8               [12] 6807 	mov	r0,a
      0025D5 E5*00            [12] 6808 	mov	a,_bp
      0025D7 24 0B            [12] 6809 	add	a,#0x0b
      0025D9 F9               [12] 6810 	mov	r1,a
      0025DA 74 13            [12] 6811 	mov	a,#0x13
      0025DC 26               [12] 6812 	add	a,@r0
      0025DD F7               [12] 6813 	mov	@r1,a
      0025DE 74 40            [12] 6814 	mov	a,#0x40
      0025E0 08               [12] 6815 	inc	r0
      0025E1 36               [12] 6816 	addc	a,@r0
      0025E2 09               [12] 6817 	inc	r1
      0025E3 F7               [12] 6818 	mov	@r1,a
      0025E4 08               [12] 6819 	inc	r0
      0025E5 09               [12] 6820 	inc	r1
      0025E6 E6               [12] 6821 	mov	a,@r0
      0025E7 F7               [12] 6822 	mov	@r1,a
      0025E8 E5*00            [12] 6823 	mov	a,_bp
      0025EA 24 0B            [12] 6824 	add	a,#0x0b
      0025EC F8               [12] 6825 	mov	r0,a
      0025ED 86 82            [24] 6826 	mov	dpl,@r0
      0025EF 08               [12] 6827 	inc	r0
      0025F0 86 83            [24] 6828 	mov	dph,@r0
      0025F2 08               [12] 6829 	inc	r0
      0025F3 86 F0            [24] 6830 	mov	b,@r0
      0025F5 12r00r00         [24] 6831 	lcall	__gptrget
      0025F8 FD               [12] 6832 	mov	r5,a
      0025F9 A3               [24] 6833 	inc	dptr
      0025FA 12r00r00         [24] 6834 	lcall	__gptrget
      0025FD FE               [12] 6835 	mov	r6,a
      0025FE A3               [24] 6836 	inc	dptr
      0025FF 12r00r00         [24] 6837 	lcall	__gptrget
      002602 FF               [12] 6838 	mov	r7,a
      002603 C0 04            [24] 6839 	push	ar4
      002605 C0 03            [24] 6840 	push	ar3
      002607 C0 02            [24] 6841 	push	ar2
      002609 8D 82            [24] 6842 	mov	dpl,r5
      00260B 8E 83            [24] 6843 	mov	dph,r6
      00260D 8F F0            [24] 6844 	mov	b,r7
      00260F 12r00r00         [24] 6845 	lcall	_stack_pop
      002612 AE 82            [24] 6846 	mov	r6,dpl
      002614 AF 83            [24] 6847 	mov	r7,dph
      002616 15 81            [12] 6848 	dec	sp
      002618 15 81            [12] 6849 	dec	sp
      00261A 15 81            [12] 6850 	dec	sp
      00261C EE               [12] 6851 	mov	a,r6
      00261D 4F               [12] 6852 	orl	a,r7
      00261E 70 25            [24] 6853 	jnz	00228$
      002620 7Dr4E            [12] 6854 	mov	r5,#___str_10
      002622 7Cs00            [12] 6855 	mov	r4,#(___str_10 >> 8)
      002624 7B 80            [12] 6856 	mov	r3,#0x80
                                   6857 ;	calc.c:51: return;
      002626                       6858 00480$:
                                   6859 ;	calc.c:49: for (; *s; s++) putchar(*s);
      002626 8D 82            [24] 6860 	mov	dpl,r5
      002628 8C 83            [24] 6861 	mov	dph,r4
      00262A 8B F0            [24] 6862 	mov	b,r3
      00262C 12r00r00         [24] 6863 	lcall	__gptrget
      00262F FF               [12] 6864 	mov	r7,a
      002630 70 03            [24] 6865 	jnz	01384$
      002632 02r2Br95         [24] 6866 	ljmp	00249$
      002635                       6867 01384$:
      002635 7E 00            [12] 6868 	mov	r6,#0x00
      002637 8F 82            [24] 6869 	mov	dpl,r7
      002639 8E 83            [24] 6870 	mov	dph,r6
      00263B 12r00r00         [24] 6871 	lcall	_putchar
      00263E 0D               [12] 6872 	inc	r5
                                   6873 ;	calc.c:306: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      00263F BD 00 E4         [24] 6874 	cjne	r5,#0x00,00480$
      002642 0C               [12] 6875 	inc	r4
      002643 80 E1            [24] 6876 	sjmp	00480$
      002645                       6877 00228$:
                                   6878 ;	calc.c:307: else if (!stack_pop(ctx->ps, &d1)) {
      002645 E5*00            [12] 6879 	mov	a,_bp
      002647 24 19            [12] 6880 	add	a,#0x19
      002649 FC               [12] 6881 	mov	r4,a
      00264A 7B 00            [12] 6882 	mov	r3,#0x00
      00264C 7A 40            [12] 6883 	mov	r2,#0x40
      00264E E5*00            [12] 6884 	mov	a,_bp
      002650 24 0B            [12] 6885 	add	a,#0x0b
      002652 F8               [12] 6886 	mov	r0,a
      002653 86 82            [24] 6887 	mov	dpl,@r0
      002655 08               [12] 6888 	inc	r0
      002656 86 83            [24] 6889 	mov	dph,@r0
      002658 08               [12] 6890 	inc	r0
      002659 86 F0            [24] 6891 	mov	b,@r0
      00265B 12r00r00         [24] 6892 	lcall	__gptrget
      00265E FD               [12] 6893 	mov	r5,a
      00265F A3               [24] 6894 	inc	dptr
      002660 12r00r00         [24] 6895 	lcall	__gptrget
      002663 FE               [12] 6896 	mov	r6,a
      002664 A3               [24] 6897 	inc	dptr
      002665 12r00r00         [24] 6898 	lcall	__gptrget
      002668 FF               [12] 6899 	mov	r7,a
      002669 C0 04            [24] 6900 	push	ar4
      00266B C0 03            [24] 6901 	push	ar3
      00266D C0 02            [24] 6902 	push	ar2
      00266F 8D 82            [24] 6903 	mov	dpl,r5
      002671 8E 83            [24] 6904 	mov	dph,r6
      002673 8F F0            [24] 6905 	mov	b,r7
      002675 12r00r00         [24] 6906 	lcall	_stack_pop
      002678 AE 82            [24] 6907 	mov	r6,dpl
      00267A AF 83            [24] 6908 	mov	r7,dph
      00267C 15 81            [12] 6909 	dec	sp
      00267E 15 81            [12] 6910 	dec	sp
      002680 15 81            [12] 6911 	dec	sp
      002682 EE               [12] 6912 	mov	a,r6
      002683 4F               [12] 6913 	orl	a,r7
      002684 70 63            [24] 6914 	jnz	00225$
                                   6915 ;	calc.c:308: (void)stack_push(ctx->ps, d0);
      002686 E5*00            [12] 6916 	mov	a,_bp
      002688 24 0B            [12] 6917 	add	a,#0x0b
      00268A F8               [12] 6918 	mov	r0,a
      00268B 86 82            [24] 6919 	mov	dpl,@r0
      00268D 08               [12] 6920 	inc	r0
      00268E 86 83            [24] 6921 	mov	dph,@r0
      002690 08               [12] 6922 	inc	r0
      002691 86 F0            [24] 6923 	mov	b,@r0
      002693 12r00r00         [24] 6924 	lcall	__gptrget
      002696 FD               [12] 6925 	mov	r5,a
      002697 A3               [24] 6926 	inc	dptr
      002698 12r00r00         [24] 6927 	lcall	__gptrget
      00269B FE               [12] 6928 	mov	r6,a
      00269C A3               [24] 6929 	inc	dptr
      00269D 12r00r00         [24] 6930 	lcall	__gptrget
      0026A0 FF               [12] 6931 	mov	r7,a
      0026A1 E5*00            [12] 6932 	mov	a,_bp
      0026A3 24 15            [12] 6933 	add	a,#0x15
      0026A5 F8               [12] 6934 	mov	r0,a
      0026A6 E6               [12] 6935 	mov	a,@r0
      0026A7 C0 E0            [24] 6936 	push	acc
      0026A9 08               [12] 6937 	inc	r0
      0026AA E6               [12] 6938 	mov	a,@r0
      0026AB C0 E0            [24] 6939 	push	acc
      0026AD 08               [12] 6940 	inc	r0
      0026AE E6               [12] 6941 	mov	a,@r0
      0026AF C0 E0            [24] 6942 	push	acc
      0026B1 08               [12] 6943 	inc	r0
      0026B2 E6               [12] 6944 	mov	a,@r0
      0026B3 C0 E0            [24] 6945 	push	acc
      0026B5 8D 82            [24] 6946 	mov	dpl,r5
      0026B7 8E 83            [24] 6947 	mov	dph,r6
      0026B9 8F F0            [24] 6948 	mov	b,r7
      0026BB 12r00r00         [24] 6949 	lcall	_stack_push
      0026BE E5 81            [12] 6950 	mov	a,sp
      0026C0 24 FC            [12] 6951 	add	a,#0xfc
      0026C2 F5 81            [12] 6952 	mov	sp,a
                                   6953 ;	calc.c:309: printstr("\r\nstack underflow\r\n");
      0026C4 7Dr4E            [12] 6954 	mov	r5,#___str_10
      0026C6 7Cs00            [12] 6955 	mov	r4,#(___str_10 >> 8)
      0026C8 7B 80            [12] 6956 	mov	r3,#0x80
                                   6957 ;	calc.c:51: return;
      0026CA                       6958 00483$:
                                   6959 ;	calc.c:49: for (; *s; s++) putchar(*s);
      0026CA 8D 82            [24] 6960 	mov	dpl,r5
      0026CC 8C 83            [24] 6961 	mov	dph,r4
      0026CE 8B F0            [24] 6962 	mov	b,r3
      0026D0 12r00r00         [24] 6963 	lcall	__gptrget
      0026D3 FF               [12] 6964 	mov	r7,a
      0026D4 70 03            [24] 6965 	jnz	01387$
      0026D6 02r2Br95         [24] 6966 	ljmp	00249$
      0026D9                       6967 01387$:
      0026D9 7E 00            [12] 6968 	mov	r6,#0x00
      0026DB 8F 82            [24] 6969 	mov	dpl,r7
      0026DD 8E 83            [24] 6970 	mov	dph,r6
      0026DF 12r00r00         [24] 6971 	lcall	_putchar
      0026E2 0D               [12] 6972 	inc	r5
                                   6973 ;	calc.c:309: printstr("\r\nstack underflow\r\n");
      0026E3 BD 00 E4         [24] 6974 	cjne	r5,#0x00,00483$
      0026E6 0C               [12] 6975 	inc	r4
      0026E7 80 E1            [24] 6976 	sjmp	00483$
      0026E9                       6977 00225$:
                                   6978 ;	calc.c:311: d1 = (unsigned long)d1 >> d0;
      0026E9 E5*00            [12] 6979 	mov	a,_bp
      0026EB 24 19            [12] 6980 	add	a,#0x19
      0026ED F8               [12] 6981 	mov	r0,a
      0026EE 86 04            [24] 6982 	mov	ar4,@r0
      0026F0 08               [12] 6983 	inc	r0
      0026F1 86 05            [24] 6984 	mov	ar5,@r0
      0026F3 08               [12] 6985 	inc	r0
      0026F4 86 06            [24] 6986 	mov	ar6,@r0
      0026F6 08               [12] 6987 	inc	r0
      0026F7 86 07            [24] 6988 	mov	ar7,@r0
      0026F9 E5*00            [12] 6989 	mov	a,_bp
      0026FB 24 15            [12] 6990 	add	a,#0x15
      0026FD F8               [12] 6991 	mov	r0,a
      0026FE 86 F0            [24] 6992 	mov	b,@r0
      002700 05 F0            [12] 6993 	inc	b
      002702 80 0D            [24] 6994 	sjmp	01390$
      002704                       6995 01389$:
      002704 C3               [12] 6996 	clr	c
      002705 EF               [12] 6997 	mov	a,r7
      002706 13               [12] 6998 	rrc	a
      002707 FF               [12] 6999 	mov	r7,a
      002708 EE               [12] 7000 	mov	a,r6
      002709 13               [12] 7001 	rrc	a
      00270A FE               [12] 7002 	mov	r6,a
      00270B ED               [12] 7003 	mov	a,r5
      00270C 13               [12] 7004 	rrc	a
      00270D FD               [12] 7005 	mov	r5,a
      00270E EC               [12] 7006 	mov	a,r4
      00270F 13               [12] 7007 	rrc	a
      002710 FC               [12] 7008 	mov	r4,a
      002711                       7009 01390$:
      002711 D5 F0 F0         [24] 7010 	djnz	b,01389$
      002714 E5*00            [12] 7011 	mov	a,_bp
      002716 24 19            [12] 7012 	add	a,#0x19
      002718 F8               [12] 7013 	mov	r0,a
      002719 A6 04            [24] 7014 	mov	@r0,ar4
      00271B 08               [12] 7015 	inc	r0
      00271C A6 05            [24] 7016 	mov	@r0,ar5
      00271E 08               [12] 7017 	inc	r0
      00271F A6 06            [24] 7018 	mov	@r0,ar6
      002721 08               [12] 7019 	inc	r0
      002722 A6 07            [24] 7020 	mov	@r0,ar7
                                   7021 ;	calc.c:312: (void)stack_push(ctx->ps, d1);
      002724 E5*00            [12] 7022 	mov	a,_bp
      002726 24 0B            [12] 7023 	add	a,#0x0b
      002728 F8               [12] 7024 	mov	r0,a
      002729 86 82            [24] 7025 	mov	dpl,@r0
      00272B 08               [12] 7026 	inc	r0
      00272C 86 83            [24] 7027 	mov	dph,@r0
      00272E 08               [12] 7028 	inc	r0
      00272F 86 F0            [24] 7029 	mov	b,@r0
      002731 12r00r00         [24] 7030 	lcall	__gptrget
      002734 FD               [12] 7031 	mov	r5,a
      002735 A3               [24] 7032 	inc	dptr
      002736 12r00r00         [24] 7033 	lcall	__gptrget
      002739 FE               [12] 7034 	mov	r6,a
      00273A A3               [24] 7035 	inc	dptr
      00273B 12r00r00         [24] 7036 	lcall	__gptrget
      00273E FF               [12] 7037 	mov	r7,a
      00273F E5*00            [12] 7038 	mov	a,_bp
      002741 24 19            [12] 7039 	add	a,#0x19
      002743 F8               [12] 7040 	mov	r0,a
      002744 E6               [12] 7041 	mov	a,@r0
      002745 C0 E0            [24] 7042 	push	acc
      002747 08               [12] 7043 	inc	r0
      002748 E6               [12] 7044 	mov	a,@r0
      002749 C0 E0            [24] 7045 	push	acc
      00274B 08               [12] 7046 	inc	r0
      00274C E6               [12] 7047 	mov	a,@r0
      00274D C0 E0            [24] 7048 	push	acc
      00274F 08               [12] 7049 	inc	r0
      002750 E6               [12] 7050 	mov	a,@r0
      002751 C0 E0            [24] 7051 	push	acc
      002753 8D 82            [24] 7052 	mov	dpl,r5
      002755 8E 83            [24] 7053 	mov	dph,r6
      002757 8F F0            [24] 7054 	mov	b,r7
      002759 12r00r00         [24] 7055 	lcall	_stack_push
      00275C E5 81            [12] 7056 	mov	a,sp
      00275E 24 FC            [12] 7057 	add	a,#0xfc
      002760 F5 81            [12] 7058 	mov	sp,a
                                   7059 ;	calc.c:314: break;
      002762 02r2Br95         [24] 7060 	ljmp	00249$
                                   7061 ;	calc.c:315: case ']':
      002765                       7062 00230$:
                                   7063 ;	calc.c:316: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      002765 E5*00            [12] 7064 	mov	a,_bp
      002767 24 15            [12] 7065 	add	a,#0x15
      002769 FF               [12] 7066 	mov	r7,a
      00276A E5*00            [12] 7067 	mov	a,_bp
      00276C 24 0E            [12] 7068 	add	a,#0x0e
      00276E F8               [12] 7069 	mov	r0,a
      00276F A6 07            [24] 7070 	mov	@r0,ar7
      002771 08               [12] 7071 	inc	r0
      002772 76 00            [12] 7072 	mov	@r0,#0x00
      002774 08               [12] 7073 	inc	r0
      002775 76 40            [12] 7074 	mov	@r0,#0x40
      002777 E5*00            [12] 7075 	mov	a,_bp
      002779 24 12            [12] 7076 	add	a,#0x12
      00277B F8               [12] 7077 	mov	r0,a
      00277C 74 13            [12] 7078 	mov	a,#0x13
      00277E 26               [12] 7079 	add	a,@r0
      00277F FA               [12] 7080 	mov	r2,a
      002780 74 40            [12] 7081 	mov	a,#0x40
      002782 08               [12] 7082 	inc	r0
      002783 36               [12] 7083 	addc	a,@r0
      002784 FB               [12] 7084 	mov	r3,a
      002785 08               [12] 7085 	inc	r0
      002786 86 04            [24] 7086 	mov	ar4,@r0
      002788 8A 82            [24] 7087 	mov	dpl,r2
      00278A 8B 83            [24] 7088 	mov	dph,r3
      00278C 8C F0            [24] 7089 	mov	b,r4
      00278E 12r00r00         [24] 7090 	lcall	__gptrget
      002791 FD               [12] 7091 	mov	r5,a
      002792 A3               [24] 7092 	inc	dptr
      002793 12r00r00         [24] 7093 	lcall	__gptrget
      002796 FE               [12] 7094 	mov	r6,a
      002797 A3               [24] 7095 	inc	dptr
      002798 12r00r00         [24] 7096 	lcall	__gptrget
      00279B FF               [12] 7097 	mov	r7,a
      00279C C0 04            [24] 7098 	push	ar4
      00279E C0 03            [24] 7099 	push	ar3
      0027A0 C0 02            [24] 7100 	push	ar2
      0027A2 E5*00            [12] 7101 	mov	a,_bp
      0027A4 24 0E            [12] 7102 	add	a,#0x0e
      0027A6 F8               [12] 7103 	mov	r0,a
      0027A7 E6               [12] 7104 	mov	a,@r0
      0027A8 C0 E0            [24] 7105 	push	acc
      0027AA 08               [12] 7106 	inc	r0
      0027AB E6               [12] 7107 	mov	a,@r0
      0027AC C0 E0            [24] 7108 	push	acc
      0027AE 08               [12] 7109 	inc	r0
      0027AF E6               [12] 7110 	mov	a,@r0
      0027B0 C0 E0            [24] 7111 	push	acc
      0027B2 8D 82            [24] 7112 	mov	dpl,r5
      0027B4 8E 83            [24] 7113 	mov	dph,r6
      0027B6 8F F0            [24] 7114 	mov	b,r7
      0027B8 12r00r00         [24] 7115 	lcall	_stack_pop
      0027BB AE 82            [24] 7116 	mov	r6,dpl
      0027BD AF 83            [24] 7117 	mov	r7,dph
      0027BF 15 81            [12] 7118 	dec	sp
      0027C1 15 81            [12] 7119 	dec	sp
      0027C3 15 81            [12] 7120 	dec	sp
      0027C5 D0 02            [24] 7121 	pop	ar2
      0027C7 D0 03            [24] 7122 	pop	ar3
      0027C9 D0 04            [24] 7123 	pop	ar4
      0027CB EE               [12] 7124 	mov	a,r6
      0027CC 4F               [12] 7125 	orl	a,r7
      0027CD 70 25            [24] 7126 	jnz	00235$
      0027CF 7Dr4E            [12] 7127 	mov	r5,#___str_10
      0027D1 7Cs00            [12] 7128 	mov	r4,#(___str_10 >> 8)
      0027D3 7B 80            [12] 7129 	mov	r3,#0x80
                                   7130 ;	calc.c:51: return;
      0027D5                       7131 00486$:
                                   7132 ;	calc.c:49: for (; *s; s++) putchar(*s);
      0027D5 8D 82            [24] 7133 	mov	dpl,r5
      0027D7 8C 83            [24] 7134 	mov	dph,r4
      0027D9 8B F0            [24] 7135 	mov	b,r3
      0027DB 12r00r00         [24] 7136 	lcall	__gptrget
      0027DE FF               [12] 7137 	mov	r7,a
      0027DF 70 03            [24] 7138 	jnz	01392$
      0027E1 02r2Br95         [24] 7139 	ljmp	00249$
      0027E4                       7140 01392$:
      0027E4 7E 00            [12] 7141 	mov	r6,#0x00
      0027E6 8F 82            [24] 7142 	mov	dpl,r7
      0027E8 8E 83            [24] 7143 	mov	dph,r6
      0027EA 12r00r00         [24] 7144 	lcall	_putchar
      0027ED 0D               [12] 7145 	inc	r5
                                   7146 ;	calc.c:316: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      0027EE BD 00 E4         [24] 7147 	cjne	r5,#0x00,00486$
      0027F1 0C               [12] 7148 	inc	r4
      0027F2 80 E1            [24] 7149 	sjmp	00486$
      0027F4                       7150 00235$:
                                   7151 ;	calc.c:317: else if (!stack_pop(ctx->ps, &d1)) {
      0027F4 E5*00            [12] 7152 	mov	a,_bp
      0027F6 24 19            [12] 7153 	add	a,#0x19
      0027F8 FF               [12] 7154 	mov	r7,a
      0027F9 E5*00            [12] 7155 	mov	a,_bp
      0027FB 24 0E            [12] 7156 	add	a,#0x0e
      0027FD F8               [12] 7157 	mov	r0,a
      0027FE A6 07            [24] 7158 	mov	@r0,ar7
      002800 08               [12] 7159 	inc	r0
      002801 76 00            [12] 7160 	mov	@r0,#0x00
      002803 08               [12] 7161 	inc	r0
      002804 76 40            [12] 7162 	mov	@r0,#0x40
      002806 8A 82            [24] 7163 	mov	dpl,r2
      002808 8B 83            [24] 7164 	mov	dph,r3
      00280A 8C F0            [24] 7165 	mov	b,r4
      00280C 12r00r00         [24] 7166 	lcall	__gptrget
      00280F FD               [12] 7167 	mov	r5,a
      002810 A3               [24] 7168 	inc	dptr
      002811 12r00r00         [24] 7169 	lcall	__gptrget
      002814 FE               [12] 7170 	mov	r6,a
      002815 A3               [24] 7171 	inc	dptr
      002816 12r00r00         [24] 7172 	lcall	__gptrget
      002819 FF               [12] 7173 	mov	r7,a
      00281A C0 04            [24] 7174 	push	ar4
      00281C C0 03            [24] 7175 	push	ar3
      00281E C0 02            [24] 7176 	push	ar2
      002820 E5*00            [12] 7177 	mov	a,_bp
      002822 24 0E            [12] 7178 	add	a,#0x0e
      002824 F8               [12] 7179 	mov	r0,a
      002825 E6               [12] 7180 	mov	a,@r0
      002826 C0 E0            [24] 7181 	push	acc
      002828 08               [12] 7182 	inc	r0
      002829 E6               [12] 7183 	mov	a,@r0
      00282A C0 E0            [24] 7184 	push	acc
      00282C 08               [12] 7185 	inc	r0
      00282D E6               [12] 7186 	mov	a,@r0
      00282E C0 E0            [24] 7187 	push	acc
      002830 8D 82            [24] 7188 	mov	dpl,r5
      002832 8E 83            [24] 7189 	mov	dph,r6
      002834 8F F0            [24] 7190 	mov	b,r7
      002836 12r00r00         [24] 7191 	lcall	_stack_pop
      002839 AE 82            [24] 7192 	mov	r6,dpl
      00283B AF 83            [24] 7193 	mov	r7,dph
      00283D 15 81            [12] 7194 	dec	sp
      00283F 15 81            [12] 7195 	dec	sp
      002841 15 81            [12] 7196 	dec	sp
      002843 D0 02            [24] 7197 	pop	ar2
      002845 D0 03            [24] 7198 	pop	ar3
      002847 D0 04            [24] 7199 	pop	ar4
      002849 EE               [12] 7200 	mov	a,r6
      00284A 4F               [12] 7201 	orl	a,r7
      00284B 70 5C            [24] 7202 	jnz	00232$
                                   7203 ;	calc.c:318: (void)stack_push(ctx->ps, d0);
      00284D 8A 82            [24] 7204 	mov	dpl,r2
      00284F 8B 83            [24] 7205 	mov	dph,r3
      002851 8C F0            [24] 7206 	mov	b,r4
      002853 12r00r00         [24] 7207 	lcall	__gptrget
      002856 FD               [12] 7208 	mov	r5,a
      002857 A3               [24] 7209 	inc	dptr
      002858 12r00r00         [24] 7210 	lcall	__gptrget
      00285B FE               [12] 7211 	mov	r6,a
      00285C A3               [24] 7212 	inc	dptr
      00285D 12r00r00         [24] 7213 	lcall	__gptrget
      002860 FF               [12] 7214 	mov	r7,a
      002861 E5*00            [12] 7215 	mov	a,_bp
      002863 24 15            [12] 7216 	add	a,#0x15
      002865 F8               [12] 7217 	mov	r0,a
      002866 E6               [12] 7218 	mov	a,@r0
      002867 C0 E0            [24] 7219 	push	acc
      002869 08               [12] 7220 	inc	r0
      00286A E6               [12] 7221 	mov	a,@r0
      00286B C0 E0            [24] 7222 	push	acc
      00286D 08               [12] 7223 	inc	r0
      00286E E6               [12] 7224 	mov	a,@r0
      00286F C0 E0            [24] 7225 	push	acc
      002871 08               [12] 7226 	inc	r0
      002872 E6               [12] 7227 	mov	a,@r0
      002873 C0 E0            [24] 7228 	push	acc
      002875 8D 82            [24] 7229 	mov	dpl,r5
      002877 8E 83            [24] 7230 	mov	dph,r6
      002879 8F F0            [24] 7231 	mov	b,r7
      00287B 12r00r00         [24] 7232 	lcall	_stack_push
      00287E E5 81            [12] 7233 	mov	a,sp
      002880 24 FC            [12] 7234 	add	a,#0xfc
      002882 F5 81            [12] 7235 	mov	sp,a
                                   7236 ;	calc.c:319: printstr("\r\nstack underflow\r\n");
      002884 7Dr4E            [12] 7237 	mov	r5,#___str_10
      002886 7Cs00            [12] 7238 	mov	r4,#(___str_10 >> 8)
      002888 7B 80            [12] 7239 	mov	r3,#0x80
                                   7240 ;	calc.c:51: return;
      00288A                       7241 00489$:
                                   7242 ;	calc.c:49: for (; *s; s++) putchar(*s);
      00288A 8D 82            [24] 7243 	mov	dpl,r5
      00288C 8C 83            [24] 7244 	mov	dph,r4
      00288E 8B F0            [24] 7245 	mov	b,r3
      002890 12r00r00         [24] 7246 	lcall	__gptrget
      002893 FF               [12] 7247 	mov	r7,a
      002894 70 03            [24] 7248 	jnz	01395$
      002896 02r2Br95         [24] 7249 	ljmp	00249$
      002899                       7250 01395$:
      002899 7E 00            [12] 7251 	mov	r6,#0x00
      00289B 8F 82            [24] 7252 	mov	dpl,r7
      00289D 8E 83            [24] 7253 	mov	dph,r6
      00289F 12r00r00         [24] 7254 	lcall	_putchar
      0028A2 0D               [12] 7255 	inc	r5
                                   7256 ;	calc.c:319: printstr("\r\nstack underflow\r\n");
      0028A3 BD 00 E4         [24] 7257 	cjne	r5,#0x00,00489$
      0028A6 0C               [12] 7258 	inc	r4
      0028A7 80 E1            [24] 7259 	sjmp	00489$
      0028A9                       7260 00232$:
                                   7261 ;	calc.c:321: d1 >>= d0;
      0028A9 E5*00            [12] 7262 	mov	a,_bp
      0028AB 24 15            [12] 7263 	add	a,#0x15
      0028AD F8               [12] 7264 	mov	r0,a
      0028AE 86 F0            [24] 7265 	mov	b,@r0
      0028B0 05 F0            [12] 7266 	inc	b
      0028B2 E5*00            [12] 7267 	mov	a,_bp
      0028B4 24 19            [12] 7268 	add	a,#0x19
      0028B6 F8               [12] 7269 	mov	r0,a
      0028B7 08               [12] 7270 	inc	r0
      0028B8 08               [12] 7271 	inc	r0
      0028B9 08               [12] 7272 	inc	r0
      0028BA E6               [12] 7273 	mov	a,@r0
      0028BB 33               [12] 7274 	rlc	a
      0028BC 92 D2            [24] 7275 	mov	ov,c
      0028BE 18               [12] 7276 	dec	r0
      0028BF 18               [12] 7277 	dec	r0
      0028C0 18               [12] 7278 	dec	r0
      0028C1 80 14            [24] 7279 	sjmp	01398$
      0028C3                       7280 01397$:
      0028C3 A2 D2            [12] 7281 	mov	c,ov
      0028C5 08               [12] 7282 	inc	r0
      0028C6 08               [12] 7283 	inc	r0
      0028C7 08               [12] 7284 	inc	r0
      0028C8 E6               [12] 7285 	mov	a,@r0
      0028C9 13               [12] 7286 	rrc	a
      0028CA F6               [12] 7287 	mov	@r0,a
      0028CB 18               [12] 7288 	dec	r0
      0028CC E6               [12] 7289 	mov	a,@r0
      0028CD 13               [12] 7290 	rrc	a
      0028CE F6               [12] 7291 	mov	@r0,a
      0028CF 18               [12] 7292 	dec	r0
      0028D0 E6               [12] 7293 	mov	a,@r0
      0028D1 13               [12] 7294 	rrc	a
      0028D2 F6               [12] 7295 	mov	@r0,a
      0028D3 18               [12] 7296 	dec	r0
      0028D4 E6               [12] 7297 	mov	a,@r0
      0028D5 13               [12] 7298 	rrc	a
      0028D6 F6               [12] 7299 	mov	@r0,a
      0028D7                       7300 01398$:
      0028D7 D5 F0 E9         [24] 7301 	djnz	b,01397$
                                   7302 ;	calc.c:322: (void)stack_push(ctx->ps, d1);
      0028DA 8A 82            [24] 7303 	mov	dpl,r2
      0028DC 8B 83            [24] 7304 	mov	dph,r3
      0028DE 8C F0            [24] 7305 	mov	b,r4
      0028E0 12r00r00         [24] 7306 	lcall	__gptrget
      0028E3 FA               [12] 7307 	mov	r2,a
      0028E4 A3               [24] 7308 	inc	dptr
      0028E5 12r00r00         [24] 7309 	lcall	__gptrget
      0028E8 FB               [12] 7310 	mov	r3,a
      0028E9 A3               [24] 7311 	inc	dptr
      0028EA 12r00r00         [24] 7312 	lcall	__gptrget
      0028ED FC               [12] 7313 	mov	r4,a
      0028EE E5*00            [12] 7314 	mov	a,_bp
      0028F0 24 19            [12] 7315 	add	a,#0x19
      0028F2 F8               [12] 7316 	mov	r0,a
      0028F3 E6               [12] 7317 	mov	a,@r0
      0028F4 C0 E0            [24] 7318 	push	acc
      0028F6 08               [12] 7319 	inc	r0
      0028F7 E6               [12] 7320 	mov	a,@r0
      0028F8 C0 E0            [24] 7321 	push	acc
      0028FA 08               [12] 7322 	inc	r0
      0028FB E6               [12] 7323 	mov	a,@r0
      0028FC C0 E0            [24] 7324 	push	acc
      0028FE 08               [12] 7325 	inc	r0
      0028FF E6               [12] 7326 	mov	a,@r0
      002900 C0 E0            [24] 7327 	push	acc
      002902 8A 82            [24] 7328 	mov	dpl,r2
      002904 8B 83            [24] 7329 	mov	dph,r3
      002906 8C F0            [24] 7330 	mov	b,r4
      002908 12r00r00         [24] 7331 	lcall	_stack_push
      00290B E5 81            [12] 7332 	mov	a,sp
      00290D 24 FC            [12] 7333 	add	a,#0xfc
      00290F F5 81            [12] 7334 	mov	sp,a
                                   7335 ;	calc.c:324: break;
      002911 02r2Br95         [24] 7336 	ljmp	00249$
                                   7337 ;	calc.c:325: case '<':
      002914                       7338 00237$:
                                   7339 ;	calc.c:326: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      002914 E5*00            [12] 7340 	mov	a,_bp
      002916 24 15            [12] 7341 	add	a,#0x15
      002918 FF               [12] 7342 	mov	r7,a
      002919 E5*00            [12] 7343 	mov	a,_bp
      00291B 24 0E            [12] 7344 	add	a,#0x0e
      00291D F8               [12] 7345 	mov	r0,a
      00291E A6 07            [24] 7346 	mov	@r0,ar7
      002920 08               [12] 7347 	inc	r0
      002921 76 00            [12] 7348 	mov	@r0,#0x00
      002923 08               [12] 7349 	inc	r0
      002924 76 40            [12] 7350 	mov	@r0,#0x40
      002926 E5*00            [12] 7351 	mov	a,_bp
      002928 24 12            [12] 7352 	add	a,#0x12
      00292A F8               [12] 7353 	mov	r0,a
      00292B 74 13            [12] 7354 	mov	a,#0x13
      00292D 26               [12] 7355 	add	a,@r0
      00292E FA               [12] 7356 	mov	r2,a
      00292F 74 40            [12] 7357 	mov	a,#0x40
      002931 08               [12] 7358 	inc	r0
      002932 36               [12] 7359 	addc	a,@r0
      002933 FB               [12] 7360 	mov	r3,a
      002934 08               [12] 7361 	inc	r0
      002935 86 04            [24] 7362 	mov	ar4,@r0
      002937 8A 82            [24] 7363 	mov	dpl,r2
      002939 8B 83            [24] 7364 	mov	dph,r3
      00293B 8C F0            [24] 7365 	mov	b,r4
      00293D 12r00r00         [24] 7366 	lcall	__gptrget
      002940 FD               [12] 7367 	mov	r5,a
      002941 A3               [24] 7368 	inc	dptr
      002942 12r00r00         [24] 7369 	lcall	__gptrget
      002945 FE               [12] 7370 	mov	r6,a
      002946 A3               [24] 7371 	inc	dptr
      002947 12r00r00         [24] 7372 	lcall	__gptrget
      00294A FF               [12] 7373 	mov	r7,a
      00294B C0 04            [24] 7374 	push	ar4
      00294D C0 03            [24] 7375 	push	ar3
      00294F C0 02            [24] 7376 	push	ar2
      002951 E5*00            [12] 7377 	mov	a,_bp
      002953 24 0E            [12] 7378 	add	a,#0x0e
      002955 F8               [12] 7379 	mov	r0,a
      002956 E6               [12] 7380 	mov	a,@r0
      002957 C0 E0            [24] 7381 	push	acc
      002959 08               [12] 7382 	inc	r0
      00295A E6               [12] 7383 	mov	a,@r0
      00295B C0 E0            [24] 7384 	push	acc
      00295D 08               [12] 7385 	inc	r0
      00295E E6               [12] 7386 	mov	a,@r0
      00295F C0 E0            [24] 7387 	push	acc
      002961 8D 82            [24] 7388 	mov	dpl,r5
      002963 8E 83            [24] 7389 	mov	dph,r6
      002965 8F F0            [24] 7390 	mov	b,r7
      002967 12r00r00         [24] 7391 	lcall	_stack_pop
      00296A AE 82            [24] 7392 	mov	r6,dpl
      00296C AF 83            [24] 7393 	mov	r7,dph
      00296E 15 81            [12] 7394 	dec	sp
      002970 15 81            [12] 7395 	dec	sp
      002972 15 81            [12] 7396 	dec	sp
      002974 D0 02            [24] 7397 	pop	ar2
      002976 D0 03            [24] 7398 	pop	ar3
      002978 D0 04            [24] 7399 	pop	ar4
      00297A EE               [12] 7400 	mov	a,r6
      00297B 4F               [12] 7401 	orl	a,r7
      00297C 70 25            [24] 7402 	jnz	00242$
      00297E 7Dr4E            [12] 7403 	mov	r5,#___str_10
      002980 7Cs00            [12] 7404 	mov	r4,#(___str_10 >> 8)
      002982 7B 80            [12] 7405 	mov	r3,#0x80
                                   7406 ;	calc.c:51: return;
      002984                       7407 00492$:
                                   7408 ;	calc.c:49: for (; *s; s++) putchar(*s);
      002984 8D 82            [24] 7409 	mov	dpl,r5
      002986 8C 83            [24] 7410 	mov	dph,r4
      002988 8B F0            [24] 7411 	mov	b,r3
      00298A 12r00r00         [24] 7412 	lcall	__gptrget
      00298D FF               [12] 7413 	mov	r7,a
      00298E 70 03            [24] 7414 	jnz	01400$
      002990 02r2Br95         [24] 7415 	ljmp	00249$
      002993                       7416 01400$:
      002993 7E 00            [12] 7417 	mov	r6,#0x00
      002995 8F 82            [24] 7418 	mov	dpl,r7
      002997 8E 83            [24] 7419 	mov	dph,r6
      002999 12r00r00         [24] 7420 	lcall	_putchar
      00299C 0D               [12] 7421 	inc	r5
                                   7422 ;	calc.c:326: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      00299D BD 00 E4         [24] 7423 	cjne	r5,#0x00,00492$
      0029A0 0C               [12] 7424 	inc	r4
      0029A1 80 E1            [24] 7425 	sjmp	00492$
      0029A3                       7426 00242$:
                                   7427 ;	calc.c:327: else if (!stack_pop(ctx->ps, &d1)) {
      0029A3 E5*00            [12] 7428 	mov	a,_bp
      0029A5 24 19            [12] 7429 	add	a,#0x19
      0029A7 FF               [12] 7430 	mov	r7,a
      0029A8 E5*00            [12] 7431 	mov	a,_bp
      0029AA 24 0E            [12] 7432 	add	a,#0x0e
      0029AC F8               [12] 7433 	mov	r0,a
      0029AD A6 07            [24] 7434 	mov	@r0,ar7
      0029AF 08               [12] 7435 	inc	r0
      0029B0 76 00            [12] 7436 	mov	@r0,#0x00
      0029B2 08               [12] 7437 	inc	r0
      0029B3 76 40            [12] 7438 	mov	@r0,#0x40
      0029B5 8A 82            [24] 7439 	mov	dpl,r2
      0029B7 8B 83            [24] 7440 	mov	dph,r3
      0029B9 8C F0            [24] 7441 	mov	b,r4
      0029BB 12r00r00         [24] 7442 	lcall	__gptrget
      0029BE FD               [12] 7443 	mov	r5,a
      0029BF A3               [24] 7444 	inc	dptr
      0029C0 12r00r00         [24] 7445 	lcall	__gptrget
      0029C3 FE               [12] 7446 	mov	r6,a
      0029C4 A3               [24] 7447 	inc	dptr
      0029C5 12r00r00         [24] 7448 	lcall	__gptrget
      0029C8 FF               [12] 7449 	mov	r7,a
      0029C9 C0 04            [24] 7450 	push	ar4
      0029CB C0 03            [24] 7451 	push	ar3
      0029CD C0 02            [24] 7452 	push	ar2
      0029CF E5*00            [12] 7453 	mov	a,_bp
      0029D1 24 0E            [12] 7454 	add	a,#0x0e
      0029D3 F8               [12] 7455 	mov	r0,a
      0029D4 E6               [12] 7456 	mov	a,@r0
      0029D5 C0 E0            [24] 7457 	push	acc
      0029D7 08               [12] 7458 	inc	r0
      0029D8 E6               [12] 7459 	mov	a,@r0
      0029D9 C0 E0            [24] 7460 	push	acc
      0029DB 08               [12] 7461 	inc	r0
      0029DC E6               [12] 7462 	mov	a,@r0
      0029DD C0 E0            [24] 7463 	push	acc
      0029DF 8D 82            [24] 7464 	mov	dpl,r5
      0029E1 8E 83            [24] 7465 	mov	dph,r6
      0029E3 8F F0            [24] 7466 	mov	b,r7
      0029E5 12r00r00         [24] 7467 	lcall	_stack_pop
      0029E8 AE 82            [24] 7468 	mov	r6,dpl
      0029EA AF 83            [24] 7469 	mov	r7,dph
      0029EC 15 81            [12] 7470 	dec	sp
      0029EE 15 81            [12] 7471 	dec	sp
      0029F0 15 81            [12] 7472 	dec	sp
      0029F2 D0 02            [24] 7473 	pop	ar2
      0029F4 D0 03            [24] 7474 	pop	ar3
      0029F6 D0 04            [24] 7475 	pop	ar4
      0029F8 EE               [12] 7476 	mov	a,r6
      0029F9 4F               [12] 7477 	orl	a,r7
      0029FA 70 5C            [24] 7478 	jnz	00239$
                                   7479 ;	calc.c:328: (void)stack_push(ctx->ps, d0);
      0029FC 8A 82            [24] 7480 	mov	dpl,r2
      0029FE 8B 83            [24] 7481 	mov	dph,r3
      002A00 8C F0            [24] 7482 	mov	b,r4
      002A02 12r00r00         [24] 7483 	lcall	__gptrget
      002A05 FD               [12] 7484 	mov	r5,a
      002A06 A3               [24] 7485 	inc	dptr
      002A07 12r00r00         [24] 7486 	lcall	__gptrget
      002A0A FE               [12] 7487 	mov	r6,a
      002A0B A3               [24] 7488 	inc	dptr
      002A0C 12r00r00         [24] 7489 	lcall	__gptrget
      002A0F FF               [12] 7490 	mov	r7,a
      002A10 E5*00            [12] 7491 	mov	a,_bp
      002A12 24 15            [12] 7492 	add	a,#0x15
      002A14 F8               [12] 7493 	mov	r0,a
      002A15 E6               [12] 7494 	mov	a,@r0
      002A16 C0 E0            [24] 7495 	push	acc
      002A18 08               [12] 7496 	inc	r0
      002A19 E6               [12] 7497 	mov	a,@r0
      002A1A C0 E0            [24] 7498 	push	acc
      002A1C 08               [12] 7499 	inc	r0
      002A1D E6               [12] 7500 	mov	a,@r0
      002A1E C0 E0            [24] 7501 	push	acc
      002A20 08               [12] 7502 	inc	r0
      002A21 E6               [12] 7503 	mov	a,@r0
      002A22 C0 E0            [24] 7504 	push	acc
      002A24 8D 82            [24] 7505 	mov	dpl,r5
      002A26 8E 83            [24] 7506 	mov	dph,r6
      002A28 8F F0            [24] 7507 	mov	b,r7
      002A2A 12r00r00         [24] 7508 	lcall	_stack_push
      002A2D E5 81            [12] 7509 	mov	a,sp
      002A2F 24 FC            [12] 7510 	add	a,#0xfc
      002A31 F5 81            [12] 7511 	mov	sp,a
                                   7512 ;	calc.c:329: printstr("\r\nstack underflow\r\n");
      002A33 7Dr4E            [12] 7513 	mov	r5,#___str_10
      002A35 7Cs00            [12] 7514 	mov	r4,#(___str_10 >> 8)
      002A37 7B 80            [12] 7515 	mov	r3,#0x80
                                   7516 ;	calc.c:51: return;
      002A39                       7517 00495$:
                                   7518 ;	calc.c:49: for (; *s; s++) putchar(*s);
      002A39 8D 82            [24] 7519 	mov	dpl,r5
      002A3B 8C 83            [24] 7520 	mov	dph,r4
      002A3D 8B F0            [24] 7521 	mov	b,r3
      002A3F 12r00r00         [24] 7522 	lcall	__gptrget
      002A42 FF               [12] 7523 	mov	r7,a
      002A43 70 03            [24] 7524 	jnz	01403$
      002A45 02r2Br95         [24] 7525 	ljmp	00249$
      002A48                       7526 01403$:
      002A48 7E 00            [12] 7527 	mov	r6,#0x00
      002A4A 8F 82            [24] 7528 	mov	dpl,r7
      002A4C 8E 83            [24] 7529 	mov	dph,r6
      002A4E 12r00r00         [24] 7530 	lcall	_putchar
      002A51 0D               [12] 7531 	inc	r5
                                   7532 ;	calc.c:329: printstr("\r\nstack underflow\r\n");
      002A52 BD 00 E4         [24] 7533 	cjne	r5,#0x00,00495$
      002A55 0C               [12] 7534 	inc	r4
      002A56 80 E1            [24] 7535 	sjmp	00495$
      002A58                       7536 00239$:
                                   7537 ;	calc.c:331: d1 <<= d0;
      002A58 E5*00            [12] 7538 	mov	a,_bp
      002A5A 24 15            [12] 7539 	add	a,#0x15
      002A5C F8               [12] 7540 	mov	r0,a
      002A5D 86 F0            [24] 7541 	mov	b,@r0
      002A5F 05 F0            [12] 7542 	inc	b
      002A61 E5*00            [12] 7543 	mov	a,_bp
      002A63 24 19            [12] 7544 	add	a,#0x19
      002A65 F8               [12] 7545 	mov	r0,a
      002A66 80 12            [24] 7546 	sjmp	01406$
      002A68                       7547 01405$:
      002A68 E6               [12] 7548 	mov	a,@r0
      002A69 26               [12] 7549 	add	a,@r0
      002A6A F6               [12] 7550 	mov	@r0,a
      002A6B 08               [12] 7551 	inc	r0
      002A6C E6               [12] 7552 	mov	a,@r0
      002A6D 33               [12] 7553 	rlc	a
      002A6E F6               [12] 7554 	mov	@r0,a
      002A6F 08               [12] 7555 	inc	r0
      002A70 E6               [12] 7556 	mov	a,@r0
      002A71 33               [12] 7557 	rlc	a
      002A72 F6               [12] 7558 	mov	@r0,a
      002A73 08               [12] 7559 	inc	r0
      002A74 E6               [12] 7560 	mov	a,@r0
      002A75 33               [12] 7561 	rlc	a
      002A76 F6               [12] 7562 	mov	@r0,a
      002A77 18               [12] 7563 	dec	r0
      002A78 18               [12] 7564 	dec	r0
      002A79 18               [12] 7565 	dec	r0
      002A7A                       7566 01406$:
      002A7A D5 F0 EB         [24] 7567 	djnz	b,01405$
                                   7568 ;	calc.c:332: (void)stack_push(ctx->ps, d1);
      002A7D 8A 82            [24] 7569 	mov	dpl,r2
      002A7F 8B 83            [24] 7570 	mov	dph,r3
      002A81 8C F0            [24] 7571 	mov	b,r4
      002A83 12r00r00         [24] 7572 	lcall	__gptrget
      002A86 FA               [12] 7573 	mov	r2,a
      002A87 A3               [24] 7574 	inc	dptr
      002A88 12r00r00         [24] 7575 	lcall	__gptrget
      002A8B FB               [12] 7576 	mov	r3,a
      002A8C A3               [24] 7577 	inc	dptr
      002A8D 12r00r00         [24] 7578 	lcall	__gptrget
      002A90 FC               [12] 7579 	mov	r4,a
      002A91 E5*00            [12] 7580 	mov	a,_bp
      002A93 24 19            [12] 7581 	add	a,#0x19
      002A95 F8               [12] 7582 	mov	r0,a
      002A96 E6               [12] 7583 	mov	a,@r0
      002A97 C0 E0            [24] 7584 	push	acc
      002A99 08               [12] 7585 	inc	r0
      002A9A E6               [12] 7586 	mov	a,@r0
      002A9B C0 E0            [24] 7587 	push	acc
      002A9D 08               [12] 7588 	inc	r0
      002A9E E6               [12] 7589 	mov	a,@r0
      002A9F C0 E0            [24] 7590 	push	acc
      002AA1 08               [12] 7591 	inc	r0
      002AA2 E6               [12] 7592 	mov	a,@r0
      002AA3 C0 E0            [24] 7593 	push	acc
      002AA5 8A 82            [24] 7594 	mov	dpl,r2
      002AA7 8B 83            [24] 7595 	mov	dph,r3
      002AA9 8C F0            [24] 7596 	mov	b,r4
      002AAB 12r00r00         [24] 7597 	lcall	_stack_push
      002AAE E5 81            [12] 7598 	mov	a,sp
      002AB0 24 FC            [12] 7599 	add	a,#0xfc
      002AB2 F5 81            [12] 7600 	mov	sp,a
                                   7601 ;	calc.c:334: break;
      002AB4 02r2Br95         [24] 7602 	ljmp	00249$
                                   7603 ;	calc.c:335: case '~':
      002AB7                       7604 00244$:
                                   7605 ;	calc.c:336: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      002AB7 E5*00            [12] 7606 	mov	a,_bp
      002AB9 24 15            [12] 7607 	add	a,#0x15
      002ABB FF               [12] 7608 	mov	r7,a
      002ABC E5*00            [12] 7609 	mov	a,_bp
      002ABE 24 0E            [12] 7610 	add	a,#0x0e
      002AC0 F8               [12] 7611 	mov	r0,a
      002AC1 A6 07            [24] 7612 	mov	@r0,ar7
      002AC3 08               [12] 7613 	inc	r0
      002AC4 76 00            [12] 7614 	mov	@r0,#0x00
      002AC6 08               [12] 7615 	inc	r0
      002AC7 76 40            [12] 7616 	mov	@r0,#0x40
      002AC9 E5*00            [12] 7617 	mov	a,_bp
      002ACB 24 12            [12] 7618 	add	a,#0x12
      002ACD F8               [12] 7619 	mov	r0,a
      002ACE 74 13            [12] 7620 	mov	a,#0x13
      002AD0 26               [12] 7621 	add	a,@r0
      002AD1 FA               [12] 7622 	mov	r2,a
      002AD2 74 40            [12] 7623 	mov	a,#0x40
      002AD4 08               [12] 7624 	inc	r0
      002AD5 36               [12] 7625 	addc	a,@r0
      002AD6 FB               [12] 7626 	mov	r3,a
      002AD7 08               [12] 7627 	inc	r0
      002AD8 86 04            [24] 7628 	mov	ar4,@r0
      002ADA 8A 82            [24] 7629 	mov	dpl,r2
      002ADC 8B 83            [24] 7630 	mov	dph,r3
      002ADE 8C F0            [24] 7631 	mov	b,r4
      002AE0 12r00r00         [24] 7632 	lcall	__gptrget
      002AE3 FD               [12] 7633 	mov	r5,a
      002AE4 A3               [24] 7634 	inc	dptr
      002AE5 12r00r00         [24] 7635 	lcall	__gptrget
      002AE8 FE               [12] 7636 	mov	r6,a
      002AE9 A3               [24] 7637 	inc	dptr
      002AEA 12r00r00         [24] 7638 	lcall	__gptrget
      002AED FF               [12] 7639 	mov	r7,a
      002AEE C0 04            [24] 7640 	push	ar4
      002AF0 C0 03            [24] 7641 	push	ar3
      002AF2 C0 02            [24] 7642 	push	ar2
      002AF4 E5*00            [12] 7643 	mov	a,_bp
      002AF6 24 0E            [12] 7644 	add	a,#0x0e
      002AF8 F8               [12] 7645 	mov	r0,a
      002AF9 E6               [12] 7646 	mov	a,@r0
      002AFA C0 E0            [24] 7647 	push	acc
      002AFC 08               [12] 7648 	inc	r0
      002AFD E6               [12] 7649 	mov	a,@r0
      002AFE C0 E0            [24] 7650 	push	acc
      002B00 08               [12] 7651 	inc	r0
      002B01 E6               [12] 7652 	mov	a,@r0
      002B02 C0 E0            [24] 7653 	push	acc
      002B04 8D 82            [24] 7654 	mov	dpl,r5
      002B06 8E 83            [24] 7655 	mov	dph,r6
      002B08 8F F0            [24] 7656 	mov	b,r7
      002B0A 12r00r00         [24] 7657 	lcall	_stack_pop
      002B0D AE 82            [24] 7658 	mov	r6,dpl
      002B0F AF 83            [24] 7659 	mov	r7,dph
      002B11 15 81            [12] 7660 	dec	sp
      002B13 15 81            [12] 7661 	dec	sp
      002B15 15 81            [12] 7662 	dec	sp
      002B17 D0 02            [24] 7663 	pop	ar2
      002B19 D0 03            [24] 7664 	pop	ar3
      002B1B D0 04            [24] 7665 	pop	ar4
      002B1D EE               [12] 7666 	mov	a,r6
      002B1E 4F               [12] 7667 	orl	a,r7
      002B1F 70 22            [24] 7668 	jnz	00246$
      002B21 7Dr4E            [12] 7669 	mov	r5,#___str_10
      002B23 7Cs00            [12] 7670 	mov	r4,#(___str_10 >> 8)
      002B25 7B 80            [12] 7671 	mov	r3,#0x80
                                   7672 ;	calc.c:51: return;
      002B27                       7673 00498$:
                                   7674 ;	calc.c:49: for (; *s; s++) putchar(*s);
      002B27 8D 82            [24] 7675 	mov	dpl,r5
      002B29 8C 83            [24] 7676 	mov	dph,r4
      002B2B 8B F0            [24] 7677 	mov	b,r3
      002B2D 12r00r00         [24] 7678 	lcall	__gptrget
      002B30 FF               [12] 7679 	mov	r7,a
      002B31 60 62            [24] 7680 	jz	00249$
      002B33 7E 00            [12] 7681 	mov	r6,#0x00
      002B35 8F 82            [24] 7682 	mov	dpl,r7
      002B37 8E 83            [24] 7683 	mov	dph,r6
      002B39 12r00r00         [24] 7684 	lcall	_putchar
      002B3C 0D               [12] 7685 	inc	r5
                                   7686 ;	calc.c:336: if (!stack_pop(ctx->ps, &d0)) printstr("\r\nstack underflow\r\n");
      002B3D BD 00 E7         [24] 7687 	cjne	r5,#0x00,00498$
      002B40 0C               [12] 7688 	inc	r4
      002B41 80 E4            [24] 7689 	sjmp	00498$
      002B43                       7690 00246$:
                                   7691 ;	calc.c:338: d0 = ~d0;
      002B43 E5*00            [12] 7692 	mov	a,_bp
      002B45 24 15            [12] 7693 	add	a,#0x15
      002B47 F8               [12] 7694 	mov	r0,a
      002B48 E6               [12] 7695 	mov	a,@r0
      002B49 F4               [12] 7696 	cpl	a
      002B4A F6               [12] 7697 	mov	@r0,a
      002B4B 08               [12] 7698 	inc	r0
      002B4C E6               [12] 7699 	mov	a,@r0
      002B4D F4               [12] 7700 	cpl	a
      002B4E F6               [12] 7701 	mov	@r0,a
      002B4F 08               [12] 7702 	inc	r0
      002B50 E6               [12] 7703 	mov	a,@r0
      002B51 F4               [12] 7704 	cpl	a
      002B52 F6               [12] 7705 	mov	@r0,a
      002B53 08               [12] 7706 	inc	r0
      002B54 E6               [12] 7707 	mov	a,@r0
      002B55 F4               [12] 7708 	cpl	a
      002B56 F6               [12] 7709 	mov	@r0,a
                                   7710 ;	calc.c:339: (void)stack_push(ctx->ps, d0);
      002B57 8A 82            [24] 7711 	mov	dpl,r2
      002B59 8B 83            [24] 7712 	mov	dph,r3
      002B5B 8C F0            [24] 7713 	mov	b,r4
      002B5D 12r00r00         [24] 7714 	lcall	__gptrget
      002B60 FA               [12] 7715 	mov	r2,a
      002B61 A3               [24] 7716 	inc	dptr
      002B62 12r00r00         [24] 7717 	lcall	__gptrget
      002B65 FB               [12] 7718 	mov	r3,a
      002B66 A3               [24] 7719 	inc	dptr
      002B67 12r00r00         [24] 7720 	lcall	__gptrget
      002B6A FC               [12] 7721 	mov	r4,a
      002B6B E5*00            [12] 7722 	mov	a,_bp
      002B6D 24 15            [12] 7723 	add	a,#0x15
      002B6F F8               [12] 7724 	mov	r0,a
      002B70 E6               [12] 7725 	mov	a,@r0
      002B71 C0 E0            [24] 7726 	push	acc
      002B73 08               [12] 7727 	inc	r0
      002B74 E6               [12] 7728 	mov	a,@r0
      002B75 C0 E0            [24] 7729 	push	acc
      002B77 08               [12] 7730 	inc	r0
      002B78 E6               [12] 7731 	mov	a,@r0
      002B79 C0 E0            [24] 7732 	push	acc
      002B7B 08               [12] 7733 	inc	r0
      002B7C E6               [12] 7734 	mov	a,@r0
      002B7D C0 E0            [24] 7735 	push	acc
      002B7F 8A 82            [24] 7736 	mov	dpl,r2
      002B81 8B 83            [24] 7737 	mov	dph,r3
      002B83 8C F0            [24] 7738 	mov	b,r4
      002B85 12r00r00         [24] 7739 	lcall	_stack_push
      002B88 E5 81            [12] 7740 	mov	a,sp
      002B8A 24 FC            [12] 7741 	add	a,#0xfc
      002B8C F5 81            [12] 7742 	mov	sp,a
                                   7743 ;	calc.c:341: break;
                                   7744 ;	calc.c:342: default:
      002B8E 80 05            [24] 7745 	sjmp	00249$
      002B90                       7746 00248$:
                                   7747 ;	calc.c:343: return UNDEF;
      002B90 90 80 00         [24] 7748 	mov	dptr,#0x8000
                                   7749 ;	calc.c:344: }
      002B93 80 03            [24] 7750 	sjmp	00500$
      002B95                       7751 00249$:
                                   7752 ;	calc.c:346: return 1;
      002B95 90 00 01         [24] 7753 	mov	dptr,#0x0001
      002B98                       7754 00500$:
                                   7755 ;	calc.c:347: }
      002B98 85*00 81         [24] 7756 	mov	sp,_bp
      002B9B D0*00            [24] 7757 	pop	_bp
      002B9D 22               [24] 7758 	ret
                                   7759 ;------------------------------------------------------------
                                   7760 ;Allocation info for local variables in function 'push_acc'
                                   7761 ;------------------------------------------------------------
                                   7762 ;delta                     Allocated to stack - _bp -5
                                   7763 ;_ctx                      Allocated to stack - _bp +5
                                   7764 ;ctx                       Allocated to registers r2 r3 r4 
                                   7765 ;__1310720127              Allocated to registers 
                                   7766 ;s                         Allocated to registers r5 r6 r7 
                                   7767 ;sloc0                     Allocated to stack - _bp +1
                                   7768 ;------------------------------------------------------------
                                   7769 ;	calc.c:349: static int push_acc(void *_ctx, delta_t *delta) __reentrant {
                                   7770 ;	-----------------------------------------
                                   7771 ;	 function push_acc
                                   7772 ;	-----------------------------------------
      002B9E                       7773 _push_acc:
      002B9E C0*00            [24] 7774 	push	_bp
      002BA0 E5 81            [12] 7775 	mov	a,sp
      002BA2 F5*00            [12] 7776 	mov	_bp,a
      002BA4 24 07            [12] 7777 	add	a,#0x07
      002BA6 F5 81            [12] 7778 	mov	sp,a
      002BA8 C8               [12] 7779 	xch	a,r0
      002BA9 E5*00            [12] 7780 	mov	a,_bp
      002BAB 24 05            [12] 7781 	add	a,#0x05
      002BAD C8               [12] 7782 	xch	a,r0
      002BAE A6 82            [24] 7783 	mov	@r0,dpl
      002BB0 08               [12] 7784 	inc	r0
      002BB1 A6 83            [24] 7785 	mov	@r0,dph
      002BB3 08               [12] 7786 	inc	r0
      002BB4 A6 F0            [24] 7787 	mov	@r0,b
                                   7788 ;	calc.c:350: calc_ctx_t *ctx = (calc_ctx_t *)_ctx;
      002BB6 E5*00            [12] 7789 	mov	a,_bp
      002BB8 24 05            [12] 7790 	add	a,#0x05
      002BBA F8               [12] 7791 	mov	r0,a
      002BBB 86 02            [24] 7792 	mov	ar2,@r0
      002BBD 08               [12] 7793 	inc	r0
      002BBE 86 03            [24] 7794 	mov	ar3,@r0
      002BC0 08               [12] 7795 	inc	r0
      002BC1 86 04            [24] 7796 	mov	ar4,@r0
                                   7797 ;	calc.c:354: ctx->acc_valid = 0;
      002BC3 74 06            [12] 7798 	mov	a,#0x06
      002BC5 2A               [12] 7799 	add	a,r2
      002BC6 FD               [12] 7800 	mov	r5,a
      002BC7 E4               [12] 7801 	clr	a
      002BC8 3B               [12] 7802 	addc	a,r3
      002BC9 FE               [12] 7803 	mov	r6,a
      002BCA 8C 07            [24] 7804 	mov	ar7,r4
      002BCC 8D 82            [24] 7805 	mov	dpl,r5
      002BCE 8E 83            [24] 7806 	mov	dph,r6
      002BD0 8F F0            [24] 7807 	mov	b,r7
      002BD2 E4               [12] 7808 	clr	a
      002BD3 12r00r00         [24] 7809 	lcall	__gptrput
                                   7810 ;	calc.c:355: if (!stack_push(ctx->ps, ctx->acc)) printstr("\r\nstack overflow\r\n");
      002BD6 74 02            [12] 7811 	mov	a,#0x02
      002BD8 2A               [12] 7812 	add	a,r2
      002BD9 FF               [12] 7813 	mov	r7,a
      002BDA E4               [12] 7814 	clr	a
      002BDB 3B               [12] 7815 	addc	a,r3
      002BDC FD               [12] 7816 	mov	r5,a
      002BDD 8C 06            [24] 7817 	mov	ar6,r4
      002BDF 8F 82            [24] 7818 	mov	dpl,r7
      002BE1 8D 83            [24] 7819 	mov	dph,r5
      002BE3 8E F0            [24] 7820 	mov	b,r6
      002BE5 A8*00            [24] 7821 	mov	r0,_bp
      002BE7 08               [12] 7822 	inc	r0
      002BE8 12r00r00         [24] 7823 	lcall	__gptrget
      002BEB F6               [12] 7824 	mov	@r0,a
      002BEC A3               [24] 7825 	inc	dptr
      002BED 12r00r00         [24] 7826 	lcall	__gptrget
      002BF0 08               [12] 7827 	inc	r0
      002BF1 F6               [12] 7828 	mov	@r0,a
      002BF2 A3               [24] 7829 	inc	dptr
      002BF3 12r00r00         [24] 7830 	lcall	__gptrget
      002BF6 08               [12] 7831 	inc	r0
      002BF7 F6               [12] 7832 	mov	@r0,a
      002BF8 A3               [24] 7833 	inc	dptr
      002BF9 12r00r00         [24] 7834 	lcall	__gptrget
      002BFC 08               [12] 7835 	inc	r0
      002BFD F6               [12] 7836 	mov	@r0,a
      002BFE 74 13            [12] 7837 	mov	a,#0x13
      002C00 2A               [12] 7838 	add	a,r2
      002C01 FA               [12] 7839 	mov	r2,a
      002C02 74 40            [12] 7840 	mov	a,#0x40
      002C04 3B               [12] 7841 	addc	a,r3
      002C05 FB               [12] 7842 	mov	r3,a
      002C06 8C 07            [24] 7843 	mov	ar7,r4
      002C08 8A 82            [24] 7844 	mov	dpl,r2
      002C0A 8B 83            [24] 7845 	mov	dph,r3
      002C0C 8F F0            [24] 7846 	mov	b,r7
      002C0E 12r00r00         [24] 7847 	lcall	__gptrget
      002C11 FA               [12] 7848 	mov	r2,a
      002C12 A3               [24] 7849 	inc	dptr
      002C13 12r00r00         [24] 7850 	lcall	__gptrget
      002C16 FB               [12] 7851 	mov	r3,a
      002C17 A3               [24] 7852 	inc	dptr
      002C18 12r00r00         [24] 7853 	lcall	__gptrget
      002C1B FF               [12] 7854 	mov	r7,a
      002C1C A8*00            [24] 7855 	mov	r0,_bp
      002C1E 08               [12] 7856 	inc	r0
      002C1F E6               [12] 7857 	mov	a,@r0
      002C20 C0 E0            [24] 7858 	push	acc
      002C22 08               [12] 7859 	inc	r0
      002C23 E6               [12] 7860 	mov	a,@r0
      002C24 C0 E0            [24] 7861 	push	acc
      002C26 08               [12] 7862 	inc	r0
      002C27 E6               [12] 7863 	mov	a,@r0
      002C28 C0 E0            [24] 7864 	push	acc
      002C2A 08               [12] 7865 	inc	r0
      002C2B E6               [12] 7866 	mov	a,@r0
      002C2C C0 E0            [24] 7867 	push	acc
      002C2E 8A 82            [24] 7868 	mov	dpl,r2
      002C30 8B 83            [24] 7869 	mov	dph,r3
      002C32 8F F0            [24] 7870 	mov	b,r7
      002C34 12r00r00         [24] 7871 	lcall	_stack_push
      002C37 AE 82            [24] 7872 	mov	r6,dpl
      002C39 AF 83            [24] 7873 	mov	r7,dph
      002C3B E5 81            [12] 7874 	mov	a,sp
      002C3D 24 FC            [12] 7875 	add	a,#0xfc
      002C3F F5 81            [12] 7876 	mov	sp,a
      002C41 EE               [12] 7877 	mov	a,r6
      002C42 4F               [12] 7878 	orl	a,r7
      002C43 70 22            [24] 7879 	jnz	00102$
      002C45 7Dr9D            [12] 7880 	mov	r5,#___str_13
      002C47 7Es00            [12] 7881 	mov	r6,#(___str_13 >> 8)
      002C49 7F 80            [12] 7882 	mov	r7,#0x80
                                   7883 ;	calc.c:51: return;
      002C4B                       7884 00109$:
                                   7885 ;	calc.c:49: for (; *s; s++) putchar(*s);
      002C4B 8D 82            [24] 7886 	mov	dpl,r5
      002C4D 8E 83            [24] 7887 	mov	dph,r6
      002C4F 8F F0            [24] 7888 	mov	b,r7
      002C51 12r00r00         [24] 7889 	lcall	__gptrget
      002C54 FC               [12] 7890 	mov	r4,a
      002C55 60 10            [24] 7891 	jz	00102$
      002C57 7B 00            [12] 7892 	mov	r3,#0x00
      002C59 8C 82            [24] 7893 	mov	dpl,r4
      002C5B 8B 83            [24] 7894 	mov	dph,r3
      002C5D 12r00r00         [24] 7895 	lcall	_putchar
      002C60 0D               [12] 7896 	inc	r5
                                   7897 ;	calc.c:355: if (!stack_push(ctx->ps, ctx->acc)) printstr("\r\nstack overflow\r\n");
      002C61 BD 00 E7         [24] 7898 	cjne	r5,#0x00,00109$
      002C64 0E               [12] 7899 	inc	r6
      002C65 80 E4            [24] 7900 	sjmp	00109$
      002C67                       7901 00102$:
                                   7902 ;	calc.c:357: if (delta->event == EVENT_OP) return operator(_ctx, delta);
      002C67 E5*00            [12] 7903 	mov	a,_bp
      002C69 24 FB            [12] 7904 	add	a,#0xfb
      002C6B F8               [12] 7905 	mov	r0,a
      002C6C 86 05            [24] 7906 	mov	ar5,@r0
      002C6E 08               [12] 7907 	inc	r0
      002C6F 86 06            [24] 7908 	mov	ar6,@r0
      002C71 08               [12] 7909 	inc	r0
      002C72 86 07            [24] 7910 	mov	ar7,@r0
      002C74 74 02            [12] 7911 	mov	a,#0x02
      002C76 2D               [12] 7912 	add	a,r5
      002C77 FA               [12] 7913 	mov	r2,a
      002C78 E4               [12] 7914 	clr	a
      002C79 3E               [12] 7915 	addc	a,r6
      002C7A FB               [12] 7916 	mov	r3,a
      002C7B 8F 04            [24] 7917 	mov	ar4,r7
      002C7D 8A 82            [24] 7918 	mov	dpl,r2
      002C7F 8B 83            [24] 7919 	mov	dph,r3
      002C81 8C F0            [24] 7920 	mov	b,r4
      002C83 12r00r00         [24] 7921 	lcall	__gptrget
      002C86 FA               [12] 7922 	mov	r2,a
      002C87 A3               [24] 7923 	inc	dptr
      002C88 12r00r00         [24] 7924 	lcall	__gptrget
      002C8B FB               [12] 7925 	mov	r3,a
      002C8C BA 02 29         [24] 7926 	cjne	r2,#0x02,00104$
      002C8F BB 00 26         [24] 7927 	cjne	r3,#0x00,00104$
      002C92 C0 05            [24] 7928 	push	ar5
      002C94 C0 06            [24] 7929 	push	ar6
      002C96 C0 07            [24] 7930 	push	ar7
      002C98 E5*00            [12] 7931 	mov	a,_bp
      002C9A 24 05            [12] 7932 	add	a,#0x05
      002C9C F8               [12] 7933 	mov	r0,a
      002C9D 86 82            [24] 7934 	mov	dpl,@r0
      002C9F 08               [12] 7935 	inc	r0
      002CA0 86 83            [24] 7936 	mov	dph,@r0
      002CA2 08               [12] 7937 	inc	r0
      002CA3 86 F0            [24] 7938 	mov	b,@r0
      002CA5 12r08rA4         [24] 7939 	lcall	_operator
      002CA8 AE 82            [24] 7940 	mov	r6,dpl
      002CAA AF 83            [24] 7941 	mov	r7,dph
      002CAC 15 81            [12] 7942 	dec	sp
      002CAE 15 81            [12] 7943 	dec	sp
      002CB0 15 81            [12] 7944 	dec	sp
      002CB2 8E 82            [24] 7945 	mov	dpl,r6
      002CB4 8F 83            [24] 7946 	mov	dph,r7
      002CB6 80 03            [24] 7947 	sjmp	00111$
      002CB8                       7948 00104$:
                                   7949 ;	calc.c:358: else return 1;
      002CB8 90 00 01         [24] 7950 	mov	dptr,#0x0001
      002CBB                       7951 00111$:
                                   7952 ;	calc.c:359: }
      002CBB 85*00 81         [24] 7953 	mov	sp,_bp
      002CBE D0*00            [24] 7954 	pop	_bp
      002CC0 22               [24] 7955 	ret
                                   7956 ;------------------------------------------------------------
                                   7957 ;Allocation info for local variables in function 'reset_acc'
                                   7958 ;------------------------------------------------------------
                                   7959 ;delta                     Allocated to stack - _bp -5
                                   7960 ;_ctx                      Allocated to registers r5 r6 r7 
                                   7961 ;ctx                       Allocated to registers r5 r6 r7 
                                   7962 ;------------------------------------------------------------
                                   7963 ;	calc.c:361: static int reset_acc(void *_ctx, delta_t *delta) __reentrant {
                                   7964 ;	-----------------------------------------
                                   7965 ;	 function reset_acc
                                   7966 ;	-----------------------------------------
      002CC1                       7967 _reset_acc:
      002CC1 C0*00            [24] 7968 	push	_bp
      002CC3 85 81*00         [24] 7969 	mov	_bp,sp
      002CC6 AD 82            [24] 7970 	mov	r5,dpl
      002CC8 AE 83            [24] 7971 	mov	r6,dph
      002CCA AF F0            [24] 7972 	mov	r7,b
                                   7973 ;	calc.c:362: calc_ctx_t *ctx = (calc_ctx_t *)_ctx;
                                   7974 ;	calc.c:364: if (delta->event == EVENT_RSTA_I) ctx->acc_valid = 0;
      002CCC E5*00            [12] 7975 	mov	a,_bp
      002CCE 24 FB            [12] 7976 	add	a,#0xfb
      002CD0 F8               [12] 7977 	mov	r0,a
      002CD1 86 02            [24] 7978 	mov	ar2,@r0
      002CD3 08               [12] 7979 	inc	r0
      002CD4 86 03            [24] 7980 	mov	ar3,@r0
      002CD6 08               [12] 7981 	inc	r0
      002CD7 86 04            [24] 7982 	mov	ar4,@r0
      002CD9 74 02            [12] 7983 	mov	a,#0x02
      002CDB 2A               [12] 7984 	add	a,r2
      002CDC FA               [12] 7985 	mov	r2,a
      002CDD E4               [12] 7986 	clr	a
      002CDE 3B               [12] 7987 	addc	a,r3
      002CDF FB               [12] 7988 	mov	r3,a
      002CE0 8A 82            [24] 7989 	mov	dpl,r2
      002CE2 8B 83            [24] 7990 	mov	dph,r3
      002CE4 8C F0            [24] 7991 	mov	b,r4
      002CE6 12r00r00         [24] 7992 	lcall	__gptrget
      002CE9 FA               [12] 7993 	mov	r2,a
      002CEA A3               [24] 7994 	inc	dptr
      002CEB 12r00r00         [24] 7995 	lcall	__gptrget
      002CEE FB               [12] 7996 	mov	r3,a
      002CEF BA 07 16         [24] 7997 	cjne	r2,#0x07,00102$
      002CF2 BB 00 13         [24] 7998 	cjne	r3,#0x00,00102$
      002CF5 74 06            [12] 7999 	mov	a,#0x06
      002CF7 2D               [12] 8000 	add	a,r5
      002CF8 FA               [12] 8001 	mov	r2,a
      002CF9 E4               [12] 8002 	clr	a
      002CFA 3E               [12] 8003 	addc	a,r6
      002CFB FB               [12] 8004 	mov	r3,a
      002CFC 8F 04            [24] 8005 	mov	ar4,r7
      002CFE 8A 82            [24] 8006 	mov	dpl,r2
      002D00 8B 83            [24] 8007 	mov	dph,r3
      002D02 8C F0            [24] 8008 	mov	b,r4
      002D04 E4               [12] 8009 	clr	a
      002D05 12r00r00         [24] 8010 	lcall	__gptrput
      002D08                       8011 00102$:
                                   8012 ;	calc.c:365: ctx->acc = 0l;
      002D08 74 02            [12] 8013 	mov	a,#0x02
      002D0A 2D               [12] 8014 	add	a,r5
      002D0B FD               [12] 8015 	mov	r5,a
      002D0C E4               [12] 8016 	clr	a
      002D0D 3E               [12] 8017 	addc	a,r6
      002D0E FE               [12] 8018 	mov	r6,a
      002D0F 8D 82            [24] 8019 	mov	dpl,r5
      002D11 8E 83            [24] 8020 	mov	dph,r6
      002D13 8F F0            [24] 8021 	mov	b,r7
      002D15 E4               [12] 8022 	clr	a
      002D16 12r00r00         [24] 8023 	lcall	__gptrput
      002D19 A3               [24] 8024 	inc	dptr
      002D1A 12r00r00         [24] 8025 	lcall	__gptrput
      002D1D A3               [24] 8026 	inc	dptr
      002D1E 12r00r00         [24] 8027 	lcall	__gptrput
      002D21 A3               [24] 8028 	inc	dptr
      002D22 12r00r00         [24] 8029 	lcall	__gptrput
                                   8030 ;	calc.c:367: return 1;
      002D25 90 00 01         [24] 8031 	mov	dptr,#0x0001
                                   8032 ;	calc.c:368: }
      002D28 D0*00            [24] 8033 	pop	_bp
      002D2A 22               [24] 8034 	ret
                                   8035 ;------------------------------------------------------------
                                   8036 ;Allocation info for local variables in function 'reset_base'
                                   8037 ;------------------------------------------------------------
                                   8038 ;delta                     Allocated to stack - _bp -5
                                   8039 ;_ctx                      Allocated to registers r5 r6 r7 
                                   8040 ;ctx                       Allocated to registers r5 r6 r7 
                                   8041 ;------------------------------------------------------------
                                   8042 ;	calc.c:370: static int reset_base(void *_ctx, delta_t *delta) __reentrant {
                                   8043 ;	-----------------------------------------
                                   8044 ;	 function reset_base
                                   8045 ;	-----------------------------------------
      002D2B                       8046 _reset_base:
      002D2B C0*00            [24] 8047 	push	_bp
      002D2D 85 81*00         [24] 8048 	mov	_bp,sp
      002D30 AD 82            [24] 8049 	mov	r5,dpl
      002D32 AE 83            [24] 8050 	mov	r6,dph
      002D34 AF F0            [24] 8051 	mov	r7,b
                                   8052 ;	calc.c:371: calc_ctx_t *ctx = (calc_ctx_t *)_ctx;
                                   8053 ;	calc.c:375: switch (ctx->digit[0]) {
      002D36 74 07            [12] 8054 	mov	a,#0x07
      002D38 2D               [12] 8055 	add	a,r5
      002D39 FA               [12] 8056 	mov	r2,a
      002D3A E4               [12] 8057 	clr	a
      002D3B 3E               [12] 8058 	addc	a,r6
      002D3C FB               [12] 8059 	mov	r3,a
      002D3D 8F 04            [24] 8060 	mov	ar4,r7
      002D3F 8A 82            [24] 8061 	mov	dpl,r2
      002D41 8B 83            [24] 8062 	mov	dph,r3
      002D43 8C F0            [24] 8063 	mov	b,r4
      002D45 12r00r00         [24] 8064 	lcall	__gptrget
      002D48 FC               [12] 8065 	mov	r4,a
      002D49 BC 48 02         [24] 8066 	cjne	r4,#0x48,00124$
      002D4C 80 0F            [24] 8067 	sjmp	00101$
      002D4E                       8068 00124$:
      002D4E BC 4F 02         [24] 8069 	cjne	r4,#0x4f,00125$
      002D51 80 2E            [24] 8070 	sjmp	00103$
      002D53                       8071 00125$:
      002D53 BC 68 02         [24] 8072 	cjne	r4,#0x68,00126$
      002D56 80 17            [24] 8073 	sjmp	00102$
      002D58                       8074 00126$:
                                   8075 ;	calc.c:376: case 'H':
      002D58 BC 6F 48         [24] 8076 	cjne	r4,#0x6f,00105$
      002D5B 80 36            [24] 8077 	sjmp	00104$
      002D5D                       8078 00101$:
                                   8079 ;	calc.c:377: ctx->base = 16;
      002D5D 8D 82            [24] 8080 	mov	dpl,r5
      002D5F 8E 83            [24] 8081 	mov	dph,r6
      002D61 8F F0            [24] 8082 	mov	b,r7
      002D63 74 10            [12] 8083 	mov	a,#0x10
      002D65 12r00r00         [24] 8084 	lcall	__gptrput
      002D68 A3               [24] 8085 	inc	dptr
      002D69 E4               [12] 8086 	clr	a
      002D6A 12r00r00         [24] 8087 	lcall	__gptrput
                                   8088 ;	calc.c:378: break;
                                   8089 ;	calc.c:379: case 'h':
      002D6D 80 34            [24] 8090 	sjmp	00105$
      002D6F                       8091 00102$:
                                   8092 ;	calc.c:380: ctx->base = 10;
      002D6F 8D 82            [24] 8093 	mov	dpl,r5
      002D71 8E 83            [24] 8094 	mov	dph,r6
      002D73 8F F0            [24] 8095 	mov	b,r7
      002D75 74 0A            [12] 8096 	mov	a,#0x0a
      002D77 12r00r00         [24] 8097 	lcall	__gptrput
      002D7A A3               [24] 8098 	inc	dptr
      002D7B E4               [12] 8099 	clr	a
      002D7C 12r00r00         [24] 8100 	lcall	__gptrput
                                   8101 ;	calc.c:381: break;
                                   8102 ;	calc.c:382: case 'O':
      002D7F 80 22            [24] 8103 	sjmp	00105$
      002D81                       8104 00103$:
                                   8105 ;	calc.c:383: ctx->base = 8;
      002D81 8D 82            [24] 8106 	mov	dpl,r5
      002D83 8E 83            [24] 8107 	mov	dph,r6
      002D85 8F F0            [24] 8108 	mov	b,r7
      002D87 74 08            [12] 8109 	mov	a,#0x08
      002D89 12r00r00         [24] 8110 	lcall	__gptrput
      002D8C A3               [24] 8111 	inc	dptr
      002D8D E4               [12] 8112 	clr	a
      002D8E 12r00r00         [24] 8113 	lcall	__gptrput
                                   8114 ;	calc.c:384: break;
                                   8115 ;	calc.c:385: case 'o':
      002D91 80 10            [24] 8116 	sjmp	00105$
      002D93                       8117 00104$:
                                   8118 ;	calc.c:386: ctx->base = 2;
      002D93 8D 82            [24] 8119 	mov	dpl,r5
      002D95 8E 83            [24] 8120 	mov	dph,r6
      002D97 8F F0            [24] 8121 	mov	b,r7
      002D99 74 02            [12] 8122 	mov	a,#0x02
      002D9B 12r00r00         [24] 8123 	lcall	__gptrput
      002D9E A3               [24] 8124 	inc	dptr
      002D9F E4               [12] 8125 	clr	a
      002DA0 12r00r00         [24] 8126 	lcall	__gptrput
                                   8127 ;	calc.c:388: }
      002DA3                       8128 00105$:
                                   8129 ;	calc.c:390: return 1;
      002DA3 90 00 01         [24] 8130 	mov	dptr,#0x0001
                                   8131 ;	calc.c:391: }
      002DA6 D0*00            [24] 8132 	pop	_bp
      002DA8 22               [24] 8133 	ret
                                   8134 ;------------------------------------------------------------
                                   8135 ;Allocation info for local variables in function 'status'
                                   8136 ;------------------------------------------------------------
                                   8137 ;delta                     Allocated to stack - _bp -5
                                   8138 ;_ctx                      Allocated to registers r5 r6 r7 
                                   8139 ;ctx                       Allocated to stack - _bp +9
                                   8140 ;vals                      Allocated to stack - _bp +14
                                   8141 ;n                         Allocated to stack - _bp +12
                                   8142 ;__1310720129              Allocated to registers 
                                   8143 ;s                         Allocated to registers r5 r6 r7 
                                   8144 ;__1310720131              Allocated to registers r5 r6 r7 r4 
                                   8145 ;d                         Allocated to registers 
                                   8146 ;__1310720001              Allocated to registers 
                                   8147 ;d                         Allocated to stack - _bp +22
                                   8148 ;mask                      Allocated to stack - _bp +26
                                   8149 ;__1310720133              Allocated to registers 
                                   8150 ;s                         Allocated to registers r3 r4 r5 
                                   8151 ;__1310720135              Allocated to registers r2 r3 r4 r5 
                                   8152 ;d                         Allocated to registers 
                                   8153 ;__1310720001              Allocated to registers 
                                   8154 ;d                         Allocated to stack - _bp +22
                                   8155 ;mask                      Allocated to stack - _bp +26
                                   8156 ;__1310720137              Allocated to registers 
                                   8157 ;s                         Allocated to registers r3 r4 r5 
                                   8158 ;__1310720139              Allocated to registers r4 r5 r6 r7 
                                   8159 ;d                         Allocated to registers 
                                   8160 ;__1310720001              Allocated to registers 
                                   8161 ;d                         Allocated to stack - _bp +22
                                   8162 ;mask                      Allocated to stack - _bp +26
                                   8163 ;__1310720141              Allocated to registers 
                                   8164 ;s                         Allocated to registers r3 r4 r5 
                                   8165 ;__1310720143              Allocated to registers r2 r3 r4 r5 
                                   8166 ;d                         Allocated to registers 
                                   8167 ;__1310720001              Allocated to registers 
                                   8168 ;d                         Allocated to stack - _bp +22
                                   8169 ;mask                      Allocated to stack - _bp +26
                                   8170 ;__1310720145              Allocated to registers 
                                   8171 ;s                         Allocated to registers r5 r6 r7 
                                   8172 ;__1310720147              Allocated to registers r4 r5 r6 r7 
                                   8173 ;d                         Allocated to registers 
                                   8174 ;__1310720001              Allocated to registers 
                                   8175 ;d                         Allocated to stack - _bp +22
                                   8176 ;mask                      Allocated to stack - _bp +26
                                   8177 ;__1310720149              Allocated to registers 
                                   8178 ;s                         Allocated to registers r5 r6 r7 
                                   8179 ;sloc0                     Allocated to stack - _bp +1
                                   8180 ;sloc1                     Allocated to stack - _bp +4
                                   8181 ;sloc2                     Allocated to stack - _bp +7
                                   8182 ;------------------------------------------------------------
                                   8183 ;	calc.c:393: static int status(void *_ctx, delta_t *delta) __reentrant {
                                   8184 ;	-----------------------------------------
                                   8185 ;	 function status
                                   8186 ;	-----------------------------------------
      002DA9                       8187 _status:
      002DA9 C0*00            [24] 8188 	push	_bp
      002DAB E5 81            [12] 8189 	mov	a,sp
      002DAD F5*00            [12] 8190 	mov	_bp,a
      002DAF 24 1D            [12] 8191 	add	a,#0x1d
      002DB1 F5 81            [12] 8192 	mov	sp,a
      002DB3 AD 82            [24] 8193 	mov	r5,dpl
      002DB5 AE 83            [24] 8194 	mov	r6,dph
      002DB7 AF F0            [24] 8195 	mov	r7,b
                                   8196 ;	calc.c:394: calc_ctx_t *ctx = (calc_ctx_t *)_ctx;
      002DB9 E5*00            [12] 8197 	mov	a,_bp
      002DBB 24 09            [12] 8198 	add	a,#0x09
      002DBD F8               [12] 8199 	mov	r0,a
      002DBE A6 05            [24] 8200 	mov	@r0,ar5
      002DC0 08               [12] 8201 	inc	r0
      002DC1 A6 06            [24] 8202 	mov	@r0,ar6
      002DC3 08               [12] 8203 	inc	r0
      002DC4 A6 07            [24] 8204 	mov	@r0,ar7
                                   8205 ;	calc.c:400: printf("\r\nPS = %p, SS = %p, base = %d\r\n", ctx->ps, ctx->ss, ctx->base);
      002DC6 E5*00            [12] 8206 	mov	a,_bp
      002DC8 24 09            [12] 8207 	add	a,#0x09
      002DCA F8               [12] 8208 	mov	r0,a
      002DCB 86 82            [24] 8209 	mov	dpl,@r0
      002DCD 08               [12] 8210 	inc	r0
      002DCE 86 83            [24] 8211 	mov	dph,@r0
      002DD0 08               [12] 8212 	inc	r0
      002DD1 86 F0            [24] 8213 	mov	b,@r0
      002DD3 E5*00            [12] 8214 	mov	a,_bp
      002DD5 24 07            [12] 8215 	add	a,#0x07
      002DD7 F9               [12] 8216 	mov	r1,a
      002DD8 12r00r00         [24] 8217 	lcall	__gptrget
      002DDB F7               [12] 8218 	mov	@r1,a
      002DDC A3               [24] 8219 	inc	dptr
      002DDD 12r00r00         [24] 8220 	lcall	__gptrget
      002DE0 09               [12] 8221 	inc	r1
      002DE1 F7               [12] 8222 	mov	@r1,a
      002DE2 E5*00            [12] 8223 	mov	a,_bp
      002DE4 24 09            [12] 8224 	add	a,#0x09
      002DE6 F8               [12] 8225 	mov	r0,a
      002DE7 A9*00            [24] 8226 	mov	r1,_bp
      002DE9 09               [12] 8227 	inc	r1
      002DEA 74 16            [12] 8228 	mov	a,#0x16
      002DEC 26               [12] 8229 	add	a,@r0
      002DED F7               [12] 8230 	mov	@r1,a
      002DEE 74 40            [12] 8231 	mov	a,#0x40
      002DF0 08               [12] 8232 	inc	r0
      002DF1 36               [12] 8233 	addc	a,@r0
      002DF2 09               [12] 8234 	inc	r1
      002DF3 F7               [12] 8235 	mov	@r1,a
      002DF4 08               [12] 8236 	inc	r0
      002DF5 09               [12] 8237 	inc	r1
      002DF6 E6               [12] 8238 	mov	a,@r0
      002DF7 F7               [12] 8239 	mov	@r1,a
      002DF8 A8*00            [24] 8240 	mov	r0,_bp
      002DFA 08               [12] 8241 	inc	r0
      002DFB 86 82            [24] 8242 	mov	dpl,@r0
      002DFD 08               [12] 8243 	inc	r0
      002DFE 86 83            [24] 8244 	mov	dph,@r0
      002E00 08               [12] 8245 	inc	r0
      002E01 86 F0            [24] 8246 	mov	b,@r0
      002E03 12r00r00         [24] 8247 	lcall	__gptrget
      002E06 FA               [12] 8248 	mov	r2,a
      002E07 A3               [24] 8249 	inc	dptr
      002E08 12r00r00         [24] 8250 	lcall	__gptrget
      002E0B FE               [12] 8251 	mov	r6,a
      002E0C A3               [24] 8252 	inc	dptr
      002E0D 12r00r00         [24] 8253 	lcall	__gptrget
      002E10 FF               [12] 8254 	mov	r7,a
      002E11 E5*00            [12] 8255 	mov	a,_bp
      002E13 24 09            [12] 8256 	add	a,#0x09
      002E15 F8               [12] 8257 	mov	r0,a
      002E16 E5*00            [12] 8258 	mov	a,_bp
      002E18 24 04            [12] 8259 	add	a,#0x04
      002E1A F9               [12] 8260 	mov	r1,a
      002E1B 74 13            [12] 8261 	mov	a,#0x13
      002E1D 26               [12] 8262 	add	a,@r0
      002E1E F7               [12] 8263 	mov	@r1,a
      002E1F 74 40            [12] 8264 	mov	a,#0x40
      002E21 08               [12] 8265 	inc	r0
      002E22 36               [12] 8266 	addc	a,@r0
      002E23 09               [12] 8267 	inc	r1
      002E24 F7               [12] 8268 	mov	@r1,a
      002E25 08               [12] 8269 	inc	r0
      002E26 09               [12] 8270 	inc	r1
      002E27 E6               [12] 8271 	mov	a,@r0
      002E28 F7               [12] 8272 	mov	@r1,a
      002E29 E5*00            [12] 8273 	mov	a,_bp
      002E2B 24 04            [12] 8274 	add	a,#0x04
      002E2D F8               [12] 8275 	mov	r0,a
      002E2E 86 82            [24] 8276 	mov	dpl,@r0
      002E30 08               [12] 8277 	inc	r0
      002E31 86 83            [24] 8278 	mov	dph,@r0
      002E33 08               [12] 8279 	inc	r0
      002E34 86 F0            [24] 8280 	mov	b,@r0
      002E36 12r00r00         [24] 8281 	lcall	__gptrget
      002E39 FB               [12] 8282 	mov	r3,a
      002E3A A3               [24] 8283 	inc	dptr
      002E3B 12r00r00         [24] 8284 	lcall	__gptrget
      002E3E FC               [12] 8285 	mov	r4,a
      002E3F A3               [24] 8286 	inc	dptr
      002E40 12r00r00         [24] 8287 	lcall	__gptrget
      002E43 FD               [12] 8288 	mov	r5,a
      002E44 E5*00            [12] 8289 	mov	a,_bp
      002E46 24 07            [12] 8290 	add	a,#0x07
      002E48 F8               [12] 8291 	mov	r0,a
      002E49 E6               [12] 8292 	mov	a,@r0
      002E4A C0 E0            [24] 8293 	push	acc
      002E4C 08               [12] 8294 	inc	r0
      002E4D E6               [12] 8295 	mov	a,@r0
      002E4E C0 E0            [24] 8296 	push	acc
      002E50 C0 02            [24] 8297 	push	ar2
      002E52 C0 06            [24] 8298 	push	ar6
      002E54 C0 07            [24] 8299 	push	ar7
      002E56 C0 03            [24] 8300 	push	ar3
      002E58 C0 04            [24] 8301 	push	ar4
      002E5A C0 05            [24] 8302 	push	ar5
      002E5C 74rC5            [12] 8303 	mov	a,#___str_15
      002E5E C0 E0            [24] 8304 	push	acc
      002E60 74s00            [12] 8305 	mov	a,#(___str_15 >> 8)
      002E62 C0 E0            [24] 8306 	push	acc
      002E64 74 80            [12] 8307 	mov	a,#0x80
      002E66 C0 E0            [24] 8308 	push	acc
      002E68 12r00r00         [24] 8309 	lcall	_printf
      002E6B E5 81            [12] 8310 	mov	a,sp
      002E6D 24 F5            [12] 8311 	add	a,#0xf5
      002E6F F5 81            [12] 8312 	mov	sp,a
                                   8313 ;	calc.c:402: printstr("ACC\t");
      002E71 7DrE5            [12] 8314 	mov	r5,#___str_16
      002E73 7Es00            [12] 8315 	mov	r6,#(___str_16 >> 8)
      002E75 7F 80            [12] 8316 	mov	r7,#0x80
                                   8317 ;	calc.c:51: return;
      002E77                       8318 00139$:
                                   8319 ;	calc.c:49: for (; *s; s++) putchar(*s);
      002E77 8D 82            [24] 8320 	mov	dpl,r5
      002E79 8E 83            [24] 8321 	mov	dph,r6
      002E7B 8F F0            [24] 8322 	mov	b,r7
      002E7D 12r00r00         [24] 8323 	lcall	__gptrget
      002E80 FC               [12] 8324 	mov	r4,a
      002E81 60 10            [24] 8325 	jz	00112$
      002E83 7B 00            [12] 8326 	mov	r3,#0x00
      002E85 8C 82            [24] 8327 	mov	dpl,r4
      002E87 8B 83            [24] 8328 	mov	dph,r3
      002E89 12r00r00         [24] 8329 	lcall	_putchar
      002E8C 0D               [12] 8330 	inc	r5
                                   8331 ;	calc.c:402: printstr("ACC\t");
      002E8D BD 00 E7         [24] 8332 	cjne	r5,#0x00,00139$
      002E90 0E               [12] 8333 	inc	r6
      002E91 80 E4            [24] 8334 	sjmp	00139$
      002E93                       8335 00112$:
                                   8336 ;	calc.c:403: if (ctx->acc_valid) printall(ctx->acc);
      002E93 E5*00            [12] 8337 	mov	a,_bp
      002E95 24 09            [12] 8338 	add	a,#0x09
      002E97 F8               [12] 8339 	mov	r0,a
      002E98 74 06            [12] 8340 	mov	a,#0x06
      002E9A 26               [12] 8341 	add	a,@r0
      002E9B FD               [12] 8342 	mov	r5,a
      002E9C E4               [12] 8343 	clr	a
      002E9D 08               [12] 8344 	inc	r0
      002E9E 36               [12] 8345 	addc	a,@r0
      002E9F FE               [12] 8346 	mov	r6,a
      002EA0 08               [12] 8347 	inc	r0
      002EA1 86 07            [24] 8348 	mov	ar7,@r0
      002EA3 8D 82            [24] 8349 	mov	dpl,r5
      002EA5 8E 83            [24] 8350 	mov	dph,r6
      002EA7 8F F0            [24] 8351 	mov	b,r7
      002EA9 12r00r00         [24] 8352 	lcall	__gptrget
      002EAC 70 03            [24] 8353 	jnz	00321$
      002EAE 02r2FrE0         [24] 8354 	ljmp	00102$
      002EB1                       8355 00321$:
      002EB1 E5*00            [12] 8356 	mov	a,_bp
      002EB3 24 09            [12] 8357 	add	a,#0x09
      002EB5 F8               [12] 8358 	mov	r0,a
      002EB6 74 02            [12] 8359 	mov	a,#0x02
      002EB8 26               [12] 8360 	add	a,@r0
      002EB9 FD               [12] 8361 	mov	r5,a
      002EBA E4               [12] 8362 	clr	a
      002EBB 08               [12] 8363 	inc	r0
      002EBC 36               [12] 8364 	addc	a,@r0
      002EBD FE               [12] 8365 	mov	r6,a
      002EBE 08               [12] 8366 	inc	r0
      002EBF 86 07            [24] 8367 	mov	ar7,@r0
      002EC1 8D 82            [24] 8368 	mov	dpl,r5
      002EC3 8E 83            [24] 8369 	mov	dph,r6
      002EC5 8F F0            [24] 8370 	mov	b,r7
      002EC7 12r00r00         [24] 8371 	lcall	__gptrget
      002ECA FD               [12] 8372 	mov	r5,a
      002ECB A3               [24] 8373 	inc	dptr
      002ECC 12r00r00         [24] 8374 	lcall	__gptrget
      002ECF FE               [12] 8375 	mov	r6,a
      002ED0 A3               [24] 8376 	inc	dptr
      002ED1 12r00r00         [24] 8377 	lcall	__gptrget
      002ED4 FF               [12] 8378 	mov	r7,a
      002ED5 A3               [24] 8379 	inc	dptr
      002ED6 12r00r00         [24] 8380 	lcall	__gptrget
      002ED9 FC               [12] 8381 	mov	r4,a
                                   8382 ;	calc.c:64: printf("%08lx\t", d);
      002EDA C0 07            [24] 8383 	push	ar7
      002EDC C0 06            [24] 8384 	push	ar6
      002EDE C0 05            [24] 8385 	push	ar5
      002EE0 C0 04            [24] 8386 	push	ar4
      002EE2 C0 05            [24] 8387 	push	ar5
      002EE4 C0 06            [24] 8388 	push	ar6
      002EE6 C0 07            [24] 8389 	push	ar7
      002EE8 C0 04            [24] 8390 	push	ar4
      002EEA 74r00            [12] 8391 	mov	a,#___str_0
      002EEC C0 E0            [24] 8392 	push	acc
      002EEE 74s00            [12] 8393 	mov	a,#(___str_0 >> 8)
      002EF0 C0 E0            [24] 8394 	push	acc
      002EF2 74 80            [12] 8395 	mov	a,#0x80
      002EF4 C0 E0            [24] 8396 	push	acc
      002EF6 12r00r00         [24] 8397 	lcall	_printf
      002EF9 E5 81            [12] 8398 	mov	a,sp
      002EFB 24 F9            [12] 8399 	add	a,#0xf9
      002EFD F5 81            [12] 8400 	mov	sp,a
      002EFF D0 04            [24] 8401 	pop	ar4
      002F01 D0 05            [24] 8402 	pop	ar5
      002F03 D0 06            [24] 8403 	pop	ar6
      002F05 D0 07            [24] 8404 	pop	ar7
                                   8405 ;	calc.c:65: printf("% 11ld\t", d);
      002F07 C0 07            [24] 8406 	push	ar7
      002F09 C0 06            [24] 8407 	push	ar6
      002F0B C0 05            [24] 8408 	push	ar5
      002F0D C0 04            [24] 8409 	push	ar4
      002F0F C0 05            [24] 8410 	push	ar5
      002F11 C0 06            [24] 8411 	push	ar6
      002F13 C0 07            [24] 8412 	push	ar7
      002F15 C0 04            [24] 8413 	push	ar4
      002F17 74r07            [12] 8414 	mov	a,#___str_1
      002F19 C0 E0            [24] 8415 	push	acc
      002F1B 74s00            [12] 8416 	mov	a,#(___str_1 >> 8)
      002F1D C0 E0            [24] 8417 	push	acc
      002F1F 74 80            [12] 8418 	mov	a,#0x80
      002F21 C0 E0            [24] 8419 	push	acc
      002F23 12r00r00         [24] 8420 	lcall	_printf
      002F26 E5 81            [12] 8421 	mov	a,sp
      002F28 24 F9            [12] 8422 	add	a,#0xf9
      002F2A F5 81            [12] 8423 	mov	sp,a
      002F2C D0 04            [24] 8424 	pop	ar4
      002F2E D0 05            [24] 8425 	pop	ar5
      002F30 D0 06            [24] 8426 	pop	ar6
      002F32 D0 07            [24] 8427 	pop	ar7
                                   8428 ;	calc.c:66: printf("%011lo\t", d);
      002F34 C0 07            [24] 8429 	push	ar7
      002F36 C0 06            [24] 8430 	push	ar6
      002F38 C0 05            [24] 8431 	push	ar5
      002F3A C0 04            [24] 8432 	push	ar4
      002F3C C0 05            [24] 8433 	push	ar5
      002F3E C0 06            [24] 8434 	push	ar6
      002F40 C0 07            [24] 8435 	push	ar7
      002F42 C0 04            [24] 8436 	push	ar4
      002F44 74r0F            [12] 8437 	mov	a,#___str_2
      002F46 C0 E0            [24] 8438 	push	acc
      002F48 74s00            [12] 8439 	mov	a,#(___str_2 >> 8)
      002F4A C0 E0            [24] 8440 	push	acc
      002F4C 74 80            [12] 8441 	mov	a,#0x80
      002F4E C0 E0            [24] 8442 	push	acc
      002F50 12r00r00         [24] 8443 	lcall	_printf
      002F53 E5 81            [12] 8444 	mov	a,sp
      002F55 24 F9            [12] 8445 	add	a,#0xf9
      002F57 F5 81            [12] 8446 	mov	sp,a
      002F59 D0 04            [24] 8447 	pop	ar4
      002F5B D0 05            [24] 8448 	pop	ar5
      002F5D D0 06            [24] 8449 	pop	ar6
      002F5F D0 07            [24] 8450 	pop	ar7
                                   8451 ;	calc.c:67: printbin(d);
      002F61 E5*00            [12] 8452 	mov	a,_bp
      002F63 24 16            [12] 8453 	add	a,#0x16
      002F65 F8               [12] 8454 	mov	r0,a
      002F66 A6 05            [24] 8455 	mov	@r0,ar5
      002F68 08               [12] 8456 	inc	r0
      002F69 A6 06            [24] 8457 	mov	@r0,ar6
      002F6B 08               [12] 8458 	inc	r0
      002F6C A6 07            [24] 8459 	mov	@r0,ar7
      002F6E 08               [12] 8460 	inc	r0
      002F6F A6 04            [24] 8461 	mov	@r0,ar4
                                   8462 ;	calc.c:57: for (mask = 0x80000000lu; mask; mask >>= 1)
      002F71 E5*00            [12] 8463 	mov	a,_bp
      002F73 24 1A            [12] 8464 	add	a,#0x1a
      002F75 F8               [12] 8465 	mov	r0,a
      002F76 E4               [12] 8466 	clr	a
      002F77 F6               [12] 8467 	mov	@r0,a
      002F78 08               [12] 8468 	inc	r0
      002F79 F6               [12] 8469 	mov	@r0,a
      002F7A 08               [12] 8470 	inc	r0
      002F7B F6               [12] 8471 	mov	@r0,a
      002F7C 08               [12] 8472 	inc	r0
      002F7D 76 80            [12] 8473 	mov	@r0,#0x80
      002F7F                       8474 00141$:
                                   8475 ;	calc.c:58: (void)putchar((d & mask) ? (int)'1' : (int)'0');
      002F7F E5*00            [12] 8476 	mov	a,_bp
      002F81 24 16            [12] 8477 	add	a,#0x16
      002F83 F8               [12] 8478 	mov	r0,a
      002F84 86 04            [24] 8479 	mov	ar4,@r0
      002F86 08               [12] 8480 	inc	r0
      002F87 86 05            [24] 8481 	mov	ar5,@r0
      002F89 08               [12] 8482 	inc	r0
      002F8A 86 06            [24] 8483 	mov	ar6,@r0
      002F8C 08               [12] 8484 	inc	r0
      002F8D 86 07            [24] 8485 	mov	ar7,@r0
      002F8F E5*00            [12] 8486 	mov	a,_bp
      002F91 24 1A            [12] 8487 	add	a,#0x1a
      002F93 F8               [12] 8488 	mov	r0,a
      002F94 E6               [12] 8489 	mov	a,@r0
      002F95 52 04            [12] 8490 	anl	ar4,a
      002F97 08               [12] 8491 	inc	r0
      002F98 E6               [12] 8492 	mov	a,@r0
      002F99 52 05            [12] 8493 	anl	ar5,a
      002F9B 08               [12] 8494 	inc	r0
      002F9C E6               [12] 8495 	mov	a,@r0
      002F9D 52 06            [12] 8496 	anl	ar6,a
      002F9F 08               [12] 8497 	inc	r0
      002FA0 E6               [12] 8498 	mov	a,@r0
      002FA1 52 07            [12] 8499 	anl	ar7,a
      002FA3 EC               [12] 8500 	mov	a,r4
      002FA4 4D               [12] 8501 	orl	a,r5
      002FA5 4E               [12] 8502 	orl	a,r6
      002FA6 4F               [12] 8503 	orl	a,r7
      002FA7 60 06            [24] 8504 	jz	00168$
      002FA9 7E 31            [12] 8505 	mov	r6,#0x31
      002FAB 7F 00            [12] 8506 	mov	r7,#0x00
      002FAD 80 04            [24] 8507 	sjmp	00169$
      002FAF                       8508 00168$:
      002FAF 7E 30            [12] 8509 	mov	r6,#0x30
      002FB1 7F 00            [12] 8510 	mov	r7,#0x00
      002FB3                       8511 00169$:
      002FB3 8E 82            [24] 8512 	mov	dpl,r6
      002FB5 8F 83            [24] 8513 	mov	dph,r7
      002FB7 12r00r00         [24] 8514 	lcall	_putchar
                                   8515 ;	calc.c:57: for (mask = 0x80000000lu; mask; mask >>= 1)
      002FBA E5*00            [12] 8516 	mov	a,_bp
      002FBC 24 1A            [12] 8517 	add	a,#0x1a
      002FBE F8               [12] 8518 	mov	r0,a
      002FBF 08               [12] 8519 	inc	r0
      002FC0 08               [12] 8520 	inc	r0
      002FC1 08               [12] 8521 	inc	r0
      002FC2 E6               [12] 8522 	mov	a,@r0
      002FC3 C3               [12] 8523 	clr	c
      002FC4 13               [12] 8524 	rrc	a
      002FC5 F6               [12] 8525 	mov	@r0,a
      002FC6 18               [12] 8526 	dec	r0
      002FC7 E6               [12] 8527 	mov	a,@r0
      002FC8 13               [12] 8528 	rrc	a
      002FC9 F6               [12] 8529 	mov	@r0,a
      002FCA 18               [12] 8530 	dec	r0
      002FCB E6               [12] 8531 	mov	a,@r0
      002FCC 13               [12] 8532 	rrc	a
      002FCD F6               [12] 8533 	mov	@r0,a
      002FCE 18               [12] 8534 	dec	r0
      002FCF E6               [12] 8535 	mov	a,@r0
      002FD0 13               [12] 8536 	rrc	a
      002FD1 F6               [12] 8537 	mov	@r0,a
      002FD2 E5*00            [12] 8538 	mov	a,_bp
      002FD4 24 1A            [12] 8539 	add	a,#0x1a
      002FD6 F8               [12] 8540 	mov	r0,a
      002FD7 E6               [12] 8541 	mov	a,@r0
      002FD8 08               [12] 8542 	inc	r0
      002FD9 46               [12] 8543 	orl	a,@r0
      002FDA 08               [12] 8544 	inc	r0
      002FDB 46               [12] 8545 	orl	a,@r0
      002FDC 08               [12] 8546 	inc	r0
      002FDD 46               [12] 8547 	orl	a,@r0
      002FDE 70 9F            [24] 8548 	jnz	00141$
                                   8549 ;	calc.c:403: if (ctx->acc_valid) printall(ctx->acc);
      002FE0                       8550 00102$:
                                   8551 ;	calc.c:405: n = stack_peek2(ctx->ps, vals);
      002FE0 E5*00            [12] 8552 	mov	a,_bp
      002FE2 24 0E            [12] 8553 	add	a,#0x0e
      002FE4 F9               [12] 8554 	mov	r1,a
      002FE5 FD               [12] 8555 	mov	r5,a
      002FE6 7E 00            [12] 8556 	mov	r6,#0x00
      002FE8 7F 40            [12] 8557 	mov	r7,#0x40
      002FEA E5*00            [12] 8558 	mov	a,_bp
      002FEC 24 04            [12] 8559 	add	a,#0x04
      002FEE F8               [12] 8560 	mov	r0,a
      002FEF 86 82            [24] 8561 	mov	dpl,@r0
      002FF1 08               [12] 8562 	inc	r0
      002FF2 86 83            [24] 8563 	mov	dph,@r0
      002FF4 08               [12] 8564 	inc	r0
      002FF5 86 F0            [24] 8565 	mov	b,@r0
      002FF7 12r00r00         [24] 8566 	lcall	__gptrget
      002FFA FA               [12] 8567 	mov	r2,a
      002FFB A3               [24] 8568 	inc	dptr
      002FFC 12r00r00         [24] 8569 	lcall	__gptrget
      002FFF FB               [12] 8570 	mov	r3,a
      003000 A3               [24] 8571 	inc	dptr
      003001 12r00r00         [24] 8572 	lcall	__gptrget
      003004 FC               [12] 8573 	mov	r4,a
      003005 C0 01            [24] 8574 	push	ar1
      003007 C0 05            [24] 8575 	push	ar5
      003009 C0 06            [24] 8576 	push	ar6
      00300B C0 07            [24] 8577 	push	ar7
      00300D 8A 82            [24] 8578 	mov	dpl,r2
      00300F 8B 83            [24] 8579 	mov	dph,r3
      003011 8C F0            [24] 8580 	mov	b,r4
      003013 12r00r00         [24] 8581 	lcall	_stack_peek2
      003016 AE 82            [24] 8582 	mov	r6,dpl
      003018 AF 83            [24] 8583 	mov	r7,dph
      00301A 15 81            [12] 8584 	dec	sp
      00301C 15 81            [12] 8585 	dec	sp
      00301E 15 81            [12] 8586 	dec	sp
      003020 D0 01            [24] 8587 	pop	ar1
                                   8588 ;	calc.c:406: printstr("\r\nPSTOP1\t");
      003022 7BrEA            [12] 8589 	mov	r3,#___str_17
      003024 7Cs00            [12] 8590 	mov	r4,#(___str_17 >> 8)
      003026 7D 80            [12] 8591 	mov	r5,#0x80
                                   8592 ;	calc.c:51: return;
      003028                       8593 00144$:
                                   8594 ;	calc.c:49: for (; *s; s++) putchar(*s);
      003028 8B 82            [24] 8595 	mov	dpl,r3
      00302A 8C 83            [24] 8596 	mov	dph,r4
      00302C 8D F0            [24] 8597 	mov	b,r5
      00302E 12r00r00         [24] 8598 	lcall	__gptrget
      003031 FA               [12] 8599 	mov	r2,a
      003032 60 18            [24] 8600 	jz	00117$
      003034 C0 06            [24] 8601 	push	ar6
      003036 C0 07            [24] 8602 	push	ar7
      003038 7F 00            [12] 8603 	mov	r7,#0x00
      00303A 8A 82            [24] 8604 	mov	dpl,r2
      00303C 8F 83            [24] 8605 	mov	dph,r7
      00303E 12r00r00         [24] 8606 	lcall	_putchar
      003041 0B               [12] 8607 	inc	r3
      003042 BB 00 01         [24] 8608 	cjne	r3,#0x00,00325$
      003045 0C               [12] 8609 	inc	r4
      003046                       8610 00325$:
      003046 D0 07            [24] 8611 	pop	ar7
      003048 D0 06            [24] 8612 	pop	ar6
                                   8613 ;	calc.c:406: printstr("\r\nPSTOP1\t");
      00304A 80 DC            [24] 8614 	sjmp	00144$
      00304C                       8615 00117$:
                                   8616 ;	calc.c:407: if (n > 0) printall(vals[1]);
      00304C C3               [12] 8617 	clr	c
      00304D E4               [12] 8618 	clr	a
      00304E 9E               [12] 8619 	subb	a,r6
      00304F 74 80            [12] 8620 	mov	a,#(0x00 ^ 0x80)
      003051 8F F0            [24] 8621 	mov	b,r7
      003053 63 F0 80         [24] 8622 	xrl	b,#0x80
      003056 95 F0            [12] 8623 	subb	a,b
      003058 40 03            [24] 8624 	jc	00326$
      00305A 02r31r8E         [24] 8625 	ljmp	00104$
      00305D                       8626 00326$:
      00305D 74 04            [12] 8627 	mov	a,#0x04
      00305F 29               [12] 8628 	add	a,r1
      003060 F8               [12] 8629 	mov	r0,a
      003061 86 02            [24] 8630 	mov	ar2,@r0
      003063 08               [12] 8631 	inc	r0
      003064 86 03            [24] 8632 	mov	ar3,@r0
      003066 08               [12] 8633 	inc	r0
      003067 86 04            [24] 8634 	mov	ar4,@r0
      003069 08               [12] 8635 	inc	r0
      00306A 86 05            [24] 8636 	mov	ar5,@r0
                                   8637 ;	calc.c:64: printf("%08lx\t", d);
      00306C C0 07            [24] 8638 	push	ar7
      00306E C0 06            [24] 8639 	push	ar6
      003070 C0 05            [24] 8640 	push	ar5
      003072 C0 04            [24] 8641 	push	ar4
      003074 C0 03            [24] 8642 	push	ar3
      003076 C0 02            [24] 8643 	push	ar2
      003078 C0 01            [24] 8644 	push	ar1
      00307A C0 02            [24] 8645 	push	ar2
      00307C C0 03            [24] 8646 	push	ar3
      00307E C0 04            [24] 8647 	push	ar4
      003080 C0 05            [24] 8648 	push	ar5
      003082 74r00            [12] 8649 	mov	a,#___str_0
      003084 C0 E0            [24] 8650 	push	acc
      003086 74s00            [12] 8651 	mov	a,#(___str_0 >> 8)
      003088 C0 E0            [24] 8652 	push	acc
      00308A 74 80            [12] 8653 	mov	a,#0x80
      00308C C0 E0            [24] 8654 	push	acc
      00308E 12r00r00         [24] 8655 	lcall	_printf
      003091 E5 81            [12] 8656 	mov	a,sp
      003093 24 F9            [12] 8657 	add	a,#0xf9
      003095 F5 81            [12] 8658 	mov	sp,a
      003097 D0 01            [24] 8659 	pop	ar1
      003099 D0 02            [24] 8660 	pop	ar2
      00309B D0 03            [24] 8661 	pop	ar3
      00309D D0 04            [24] 8662 	pop	ar4
      00309F D0 05            [24] 8663 	pop	ar5
                                   8664 ;	calc.c:65: printf("% 11ld\t", d);
      0030A1 C0 05            [24] 8665 	push	ar5
      0030A3 C0 04            [24] 8666 	push	ar4
      0030A5 C0 03            [24] 8667 	push	ar3
      0030A7 C0 02            [24] 8668 	push	ar2
      0030A9 C0 01            [24] 8669 	push	ar1
      0030AB C0 02            [24] 8670 	push	ar2
      0030AD C0 03            [24] 8671 	push	ar3
      0030AF C0 04            [24] 8672 	push	ar4
      0030B1 C0 05            [24] 8673 	push	ar5
      0030B3 74r07            [12] 8674 	mov	a,#___str_1
      0030B5 C0 E0            [24] 8675 	push	acc
      0030B7 74s00            [12] 8676 	mov	a,#(___str_1 >> 8)
      0030B9 C0 E0            [24] 8677 	push	acc
      0030BB 74 80            [12] 8678 	mov	a,#0x80
      0030BD C0 E0            [24] 8679 	push	acc
      0030BF 12r00r00         [24] 8680 	lcall	_printf
      0030C2 E5 81            [12] 8681 	mov	a,sp
      0030C4 24 F9            [12] 8682 	add	a,#0xf9
      0030C6 F5 81            [12] 8683 	mov	sp,a
      0030C8 D0 01            [24] 8684 	pop	ar1
      0030CA D0 02            [24] 8685 	pop	ar2
      0030CC D0 03            [24] 8686 	pop	ar3
      0030CE D0 04            [24] 8687 	pop	ar4
      0030D0 D0 05            [24] 8688 	pop	ar5
                                   8689 ;	calc.c:66: printf("%011lo\t", d);
      0030D2 C0 05            [24] 8690 	push	ar5
      0030D4 C0 04            [24] 8691 	push	ar4
      0030D6 C0 03            [24] 8692 	push	ar3
      0030D8 C0 02            [24] 8693 	push	ar2
      0030DA C0 01            [24] 8694 	push	ar1
      0030DC C0 02            [24] 8695 	push	ar2
      0030DE C0 03            [24] 8696 	push	ar3
      0030E0 C0 04            [24] 8697 	push	ar4
      0030E2 C0 05            [24] 8698 	push	ar5
      0030E4 74r0F            [12] 8699 	mov	a,#___str_2
      0030E6 C0 E0            [24] 8700 	push	acc
      0030E8 74s00            [12] 8701 	mov	a,#(___str_2 >> 8)
      0030EA C0 E0            [24] 8702 	push	acc
      0030EC 74 80            [12] 8703 	mov	a,#0x80
      0030EE C0 E0            [24] 8704 	push	acc
      0030F0 12r00r00         [24] 8705 	lcall	_printf
      0030F3 E5 81            [12] 8706 	mov	a,sp
      0030F5 24 F9            [12] 8707 	add	a,#0xf9
      0030F7 F5 81            [12] 8708 	mov	sp,a
      0030F9 D0 01            [24] 8709 	pop	ar1
      0030FB D0 02            [24] 8710 	pop	ar2
      0030FD D0 03            [24] 8711 	pop	ar3
      0030FF D0 04            [24] 8712 	pop	ar4
      003101 D0 05            [24] 8713 	pop	ar5
      003103 D0 06            [24] 8714 	pop	ar6
      003105 D0 07            [24] 8715 	pop	ar7
                                   8716 ;	calc.c:67: printbin(d);
      003107 E5*00            [12] 8717 	mov	a,_bp
      003109 24 16            [12] 8718 	add	a,#0x16
      00310B F8               [12] 8719 	mov	r0,a
      00310C A6 02            [24] 8720 	mov	@r0,ar2
      00310E 08               [12] 8721 	inc	r0
      00310F A6 03            [24] 8722 	mov	@r0,ar3
      003111 08               [12] 8723 	inc	r0
      003112 A6 04            [24] 8724 	mov	@r0,ar4
      003114 08               [12] 8725 	inc	r0
      003115 A6 05            [24] 8726 	mov	@r0,ar5
                                   8727 ;	calc.c:57: for (mask = 0x80000000lu; mask; mask >>= 1)
      003117 E5*00            [12] 8728 	mov	a,_bp
      003119 24 1A            [12] 8729 	add	a,#0x1a
      00311B F8               [12] 8730 	mov	r0,a
      00311C E4               [12] 8731 	clr	a
      00311D F6               [12] 8732 	mov	@r0,a
      00311E 08               [12] 8733 	inc	r0
      00311F F6               [12] 8734 	mov	@r0,a
      003120 08               [12] 8735 	inc	r0
      003121 F6               [12] 8736 	mov	@r0,a
      003122 08               [12] 8737 	inc	r0
      003123 76 80            [12] 8738 	mov	@r0,#0x80
      003125                       8739 00146$:
                                   8740 ;	calc.c:58: (void)putchar((d & mask) ? (int)'1' : (int)'0');
      003125 C0 06            [24] 8741 	push	ar6
      003127 C0 07            [24] 8742 	push	ar7
      003129 E5*00            [12] 8743 	mov	a,_bp
      00312B 24 16            [12] 8744 	add	a,#0x16
      00312D F8               [12] 8745 	mov	r0,a
      00312E 86 04            [24] 8746 	mov	ar4,@r0
      003130 08               [12] 8747 	inc	r0
      003131 86 05            [24] 8748 	mov	ar5,@r0
      003133 08               [12] 8749 	inc	r0
      003134 86 06            [24] 8750 	mov	ar6,@r0
      003136 08               [12] 8751 	inc	r0
      003137 86 07            [24] 8752 	mov	ar7,@r0
      003139 E5*00            [12] 8753 	mov	a,_bp
      00313B 24 1A            [12] 8754 	add	a,#0x1a
      00313D F8               [12] 8755 	mov	r0,a
      00313E E6               [12] 8756 	mov	a,@r0
      00313F 52 04            [12] 8757 	anl	ar4,a
      003141 08               [12] 8758 	inc	r0
      003142 E6               [12] 8759 	mov	a,@r0
      003143 52 05            [12] 8760 	anl	ar5,a
      003145 08               [12] 8761 	inc	r0
      003146 E6               [12] 8762 	mov	a,@r0
      003147 52 06            [12] 8763 	anl	ar6,a
      003149 08               [12] 8764 	inc	r0
      00314A E6               [12] 8765 	mov	a,@r0
      00314B 52 07            [12] 8766 	anl	ar7,a
      00314D EC               [12] 8767 	mov	a,r4
      00314E 4D               [12] 8768 	orl	a,r5
      00314F 4E               [12] 8769 	orl	a,r6
      003150 4F               [12] 8770 	orl	a,r7
      003151 D0 07            [24] 8771 	pop	ar7
      003153 D0 06            [24] 8772 	pop	ar6
      003155 60 06            [24] 8773 	jz	00170$
      003157 7C 31            [12] 8774 	mov	r4,#0x31
      003159 7D 00            [12] 8775 	mov	r5,#0x00
      00315B 80 04            [24] 8776 	sjmp	00171$
      00315D                       8777 00170$:
      00315D 7C 30            [12] 8778 	mov	r4,#0x30
      00315F 7D 00            [12] 8779 	mov	r5,#0x00
      003161                       8780 00171$:
      003161 8C 82            [24] 8781 	mov	dpl,r4
      003163 8D 83            [24] 8782 	mov	dph,r5
      003165 12r00r00         [24] 8783 	lcall	_putchar
                                   8784 ;	calc.c:57: for (mask = 0x80000000lu; mask; mask >>= 1)
      003168 E5*00            [12] 8785 	mov	a,_bp
      00316A 24 1A            [12] 8786 	add	a,#0x1a
      00316C F8               [12] 8787 	mov	r0,a
      00316D 08               [12] 8788 	inc	r0
      00316E 08               [12] 8789 	inc	r0
      00316F 08               [12] 8790 	inc	r0
      003170 E6               [12] 8791 	mov	a,@r0
      003171 C3               [12] 8792 	clr	c
      003172 13               [12] 8793 	rrc	a
      003173 F6               [12] 8794 	mov	@r0,a
      003174 18               [12] 8795 	dec	r0
      003175 E6               [12] 8796 	mov	a,@r0
      003176 13               [12] 8797 	rrc	a
      003177 F6               [12] 8798 	mov	@r0,a
      003178 18               [12] 8799 	dec	r0
      003179 E6               [12] 8800 	mov	a,@r0
      00317A 13               [12] 8801 	rrc	a
      00317B F6               [12] 8802 	mov	@r0,a
      00317C 18               [12] 8803 	dec	r0
      00317D E6               [12] 8804 	mov	a,@r0
      00317E 13               [12] 8805 	rrc	a
      00317F F6               [12] 8806 	mov	@r0,a
      003180 E5*00            [12] 8807 	mov	a,_bp
      003182 24 1A            [12] 8808 	add	a,#0x1a
      003184 F8               [12] 8809 	mov	r0,a
      003185 E6               [12] 8810 	mov	a,@r0
      003186 08               [12] 8811 	inc	r0
      003187 46               [12] 8812 	orl	a,@r0
      003188 08               [12] 8813 	inc	r0
      003189 46               [12] 8814 	orl	a,@r0
      00318A 08               [12] 8815 	inc	r0
      00318B 46               [12] 8816 	orl	a,@r0
      00318C 70 97            [24] 8817 	jnz	00146$
                                   8818 ;	calc.c:407: if (n > 0) printall(vals[1]);
      00318E                       8819 00104$:
                                   8820 ;	calc.c:408: printstr("\r\nPSTOP0\t");
      00318E 7BrF4            [12] 8821 	mov	r3,#___str_18
      003190 7Cs00            [12] 8822 	mov	r4,#(___str_18 >> 8)
      003192 7D 80            [12] 8823 	mov	r5,#0x80
                                   8824 ;	calc.c:51: return;
      003194                       8825 00149$:
                                   8826 ;	calc.c:49: for (; *s; s++) putchar(*s);
      003194 8B 82            [24] 8827 	mov	dpl,r3
      003196 8C 83            [24] 8828 	mov	dph,r4
      003198 8D F0            [24] 8829 	mov	b,r5
      00319A 12r00r00         [24] 8830 	lcall	__gptrget
      00319D FA               [12] 8831 	mov	r2,a
      00319E 60 18            [24] 8832 	jz	00122$
      0031A0 C0 06            [24] 8833 	push	ar6
      0031A2 C0 07            [24] 8834 	push	ar7
      0031A4 7F 00            [12] 8835 	mov	r7,#0x00
      0031A6 8A 82            [24] 8836 	mov	dpl,r2
      0031A8 8F 83            [24] 8837 	mov	dph,r7
      0031AA 12r00r00         [24] 8838 	lcall	_putchar
      0031AD 0B               [12] 8839 	inc	r3
      0031AE BB 00 01         [24] 8840 	cjne	r3,#0x00,00330$
      0031B1 0C               [12] 8841 	inc	r4
      0031B2                       8842 00330$:
      0031B2 D0 07            [24] 8843 	pop	ar7
      0031B4 D0 06            [24] 8844 	pop	ar6
                                   8845 ;	calc.c:408: printstr("\r\nPSTOP0\t");
      0031B6 80 DC            [24] 8846 	sjmp	00149$
      0031B8                       8847 00122$:
                                   8848 ;	calc.c:409: if (n > 1) printall(vals[0]);
      0031B8 C3               [12] 8849 	clr	c
      0031B9 74 01            [12] 8850 	mov	a,#0x01
      0031BB 9E               [12] 8851 	subb	a,r6
      0031BC 74 80            [12] 8852 	mov	a,#(0x00 ^ 0x80)
      0031BE 8F F0            [24] 8853 	mov	b,r7
      0031C0 63 F0 80         [24] 8854 	xrl	b,#0x80
      0031C3 95 F0            [12] 8855 	subb	a,b
      0031C5 40 03            [24] 8856 	jc	00331$
      0031C7 02r32rEE         [24] 8857 	ljmp	00106$
      0031CA                       8858 00331$:
      0031CA 87 04            [24] 8859 	mov	ar4,@r1
      0031CC 09               [12] 8860 	inc	r1
      0031CD 87 05            [24] 8861 	mov	ar5,@r1
      0031CF 09               [12] 8862 	inc	r1
      0031D0 87 06            [24] 8863 	mov	ar6,@r1
      0031D2 09               [12] 8864 	inc	r1
      0031D3 87 07            [24] 8865 	mov	ar7,@r1
      0031D5 19               [12] 8866 	dec	r1
      0031D6 19               [12] 8867 	dec	r1
      0031D7 19               [12] 8868 	dec	r1
                                   8869 ;	calc.c:64: printf("%08lx\t", d);
      0031D8 C0 07            [24] 8870 	push	ar7
      0031DA C0 06            [24] 8871 	push	ar6
      0031DC C0 05            [24] 8872 	push	ar5
      0031DE C0 04            [24] 8873 	push	ar4
      0031E0 C0 01            [24] 8874 	push	ar1
      0031E2 C0 04            [24] 8875 	push	ar4
      0031E4 C0 05            [24] 8876 	push	ar5
      0031E6 C0 06            [24] 8877 	push	ar6
      0031E8 C0 07            [24] 8878 	push	ar7
      0031EA 74r00            [12] 8879 	mov	a,#___str_0
      0031EC C0 E0            [24] 8880 	push	acc
      0031EE 74s00            [12] 8881 	mov	a,#(___str_0 >> 8)
      0031F0 C0 E0            [24] 8882 	push	acc
      0031F2 74 80            [12] 8883 	mov	a,#0x80
      0031F4 C0 E0            [24] 8884 	push	acc
      0031F6 12r00r00         [24] 8885 	lcall	_printf
      0031F9 E5 81            [12] 8886 	mov	a,sp
      0031FB 24 F9            [12] 8887 	add	a,#0xf9
      0031FD F5 81            [12] 8888 	mov	sp,a
      0031FF D0 01            [24] 8889 	pop	ar1
      003201 D0 04            [24] 8890 	pop	ar4
      003203 D0 05            [24] 8891 	pop	ar5
      003205 D0 06            [24] 8892 	pop	ar6
      003207 D0 07            [24] 8893 	pop	ar7
                                   8894 ;	calc.c:65: printf("% 11ld\t", d);
      003209 C0 07            [24] 8895 	push	ar7
      00320B C0 06            [24] 8896 	push	ar6
      00320D C0 05            [24] 8897 	push	ar5
      00320F C0 04            [24] 8898 	push	ar4
      003211 C0 01            [24] 8899 	push	ar1
      003213 C0 04            [24] 8900 	push	ar4
      003215 C0 05            [24] 8901 	push	ar5
      003217 C0 06            [24] 8902 	push	ar6
      003219 C0 07            [24] 8903 	push	ar7
      00321B 74r07            [12] 8904 	mov	a,#___str_1
      00321D C0 E0            [24] 8905 	push	acc
      00321F 74s00            [12] 8906 	mov	a,#(___str_1 >> 8)
      003221 C0 E0            [24] 8907 	push	acc
      003223 74 80            [12] 8908 	mov	a,#0x80
      003225 C0 E0            [24] 8909 	push	acc
      003227 12r00r00         [24] 8910 	lcall	_printf
      00322A E5 81            [12] 8911 	mov	a,sp
      00322C 24 F9            [12] 8912 	add	a,#0xf9
      00322E F5 81            [12] 8913 	mov	sp,a
      003230 D0 01            [24] 8914 	pop	ar1
      003232 D0 04            [24] 8915 	pop	ar4
      003234 D0 05            [24] 8916 	pop	ar5
      003236 D0 06            [24] 8917 	pop	ar6
      003238 D0 07            [24] 8918 	pop	ar7
                                   8919 ;	calc.c:66: printf("%011lo\t", d);
      00323A C0 07            [24] 8920 	push	ar7
      00323C C0 06            [24] 8921 	push	ar6
      00323E C0 05            [24] 8922 	push	ar5
      003240 C0 04            [24] 8923 	push	ar4
      003242 C0 01            [24] 8924 	push	ar1
      003244 C0 04            [24] 8925 	push	ar4
      003246 C0 05            [24] 8926 	push	ar5
      003248 C0 06            [24] 8927 	push	ar6
      00324A C0 07            [24] 8928 	push	ar7
      00324C 74r0F            [12] 8929 	mov	a,#___str_2
      00324E C0 E0            [24] 8930 	push	acc
      003250 74s00            [12] 8931 	mov	a,#(___str_2 >> 8)
      003252 C0 E0            [24] 8932 	push	acc
      003254 74 80            [12] 8933 	mov	a,#0x80
      003256 C0 E0            [24] 8934 	push	acc
      003258 12r00r00         [24] 8935 	lcall	_printf
      00325B E5 81            [12] 8936 	mov	a,sp
      00325D 24 F9            [12] 8937 	add	a,#0xf9
      00325F F5 81            [12] 8938 	mov	sp,a
      003261 D0 01            [24] 8939 	pop	ar1
      003263 D0 04            [24] 8940 	pop	ar4
      003265 D0 05            [24] 8941 	pop	ar5
      003267 D0 06            [24] 8942 	pop	ar6
      003269 D0 07            [24] 8943 	pop	ar7
                                   8944 ;	calc.c:67: printbin(d);
      00326B E5*00            [12] 8945 	mov	a,_bp
      00326D 24 16            [12] 8946 	add	a,#0x16
      00326F F8               [12] 8947 	mov	r0,a
      003270 A6 04            [24] 8948 	mov	@r0,ar4
      003272 08               [12] 8949 	inc	r0
      003273 A6 05            [24] 8950 	mov	@r0,ar5
      003275 08               [12] 8951 	inc	r0
      003276 A6 06            [24] 8952 	mov	@r0,ar6
      003278 08               [12] 8953 	inc	r0
      003279 A6 07            [24] 8954 	mov	@r0,ar7
                                   8955 ;	calc.c:57: for (mask = 0x80000000lu; mask; mask >>= 1)
      00327B E5*00            [12] 8956 	mov	a,_bp
      00327D 24 1A            [12] 8957 	add	a,#0x1a
      00327F F8               [12] 8958 	mov	r0,a
      003280 E4               [12] 8959 	clr	a
      003281 F6               [12] 8960 	mov	@r0,a
      003282 08               [12] 8961 	inc	r0
      003283 F6               [12] 8962 	mov	@r0,a
      003284 08               [12] 8963 	inc	r0
      003285 F6               [12] 8964 	mov	@r0,a
      003286 08               [12] 8965 	inc	r0
      003287 76 80            [12] 8966 	mov	@r0,#0x80
      003289                       8967 00151$:
                                   8968 ;	calc.c:58: (void)putchar((d & mask) ? (int)'1' : (int)'0');
      003289 C0 01            [24] 8969 	push	ar1
      00328B E5*00            [12] 8970 	mov	a,_bp
      00328D 24 16            [12] 8971 	add	a,#0x16
      00328F F8               [12] 8972 	mov	r0,a
      003290 86 04            [24] 8973 	mov	ar4,@r0
      003292 08               [12] 8974 	inc	r0
      003293 86 05            [24] 8975 	mov	ar5,@r0
      003295 08               [12] 8976 	inc	r0
      003296 86 06            [24] 8977 	mov	ar6,@r0
      003298 08               [12] 8978 	inc	r0
      003299 86 07            [24] 8979 	mov	ar7,@r0
      00329B E5*00            [12] 8980 	mov	a,_bp
      00329D 24 1A            [12] 8981 	add	a,#0x1a
      00329F F8               [12] 8982 	mov	r0,a
      0032A0 E6               [12] 8983 	mov	a,@r0
      0032A1 52 04            [12] 8984 	anl	ar4,a
      0032A3 08               [12] 8985 	inc	r0
      0032A4 E6               [12] 8986 	mov	a,@r0
      0032A5 52 05            [12] 8987 	anl	ar5,a
      0032A7 08               [12] 8988 	inc	r0
      0032A8 E6               [12] 8989 	mov	a,@r0
      0032A9 52 06            [12] 8990 	anl	ar6,a
      0032AB 08               [12] 8991 	inc	r0
      0032AC E6               [12] 8992 	mov	a,@r0
      0032AD 52 07            [12] 8993 	anl	ar7,a
      0032AF D0 01            [24] 8994 	pop	ar1
      0032B1 EC               [12] 8995 	mov	a,r4
      0032B2 4D               [12] 8996 	orl	a,r5
      0032B3 4E               [12] 8997 	orl	a,r6
      0032B4 4F               [12] 8998 	orl	a,r7
      0032B5 60 06            [24] 8999 	jz	00172$
      0032B7 7E 31            [12] 9000 	mov	r6,#0x31
      0032B9 7F 00            [12] 9001 	mov	r7,#0x00
      0032BB 80 04            [24] 9002 	sjmp	00173$
      0032BD                       9003 00172$:
      0032BD 7E 30            [12] 9004 	mov	r6,#0x30
      0032BF 7F 00            [12] 9005 	mov	r7,#0x00
      0032C1                       9006 00173$:
      0032C1 8E 82            [24] 9007 	mov	dpl,r6
      0032C3 8F 83            [24] 9008 	mov	dph,r7
      0032C5 12r00r00         [24] 9009 	lcall	_putchar
                                   9010 ;	calc.c:57: for (mask = 0x80000000lu; mask; mask >>= 1)
      0032C8 E5*00            [12] 9011 	mov	a,_bp
      0032CA 24 1A            [12] 9012 	add	a,#0x1a
      0032CC F8               [12] 9013 	mov	r0,a
      0032CD 08               [12] 9014 	inc	r0
      0032CE 08               [12] 9015 	inc	r0
      0032CF 08               [12] 9016 	inc	r0
      0032D0 E6               [12] 9017 	mov	a,@r0
      0032D1 C3               [12] 9018 	clr	c
      0032D2 13               [12] 9019 	rrc	a
      0032D3 F6               [12] 9020 	mov	@r0,a
      0032D4 18               [12] 9021 	dec	r0
      0032D5 E6               [12] 9022 	mov	a,@r0
      0032D6 13               [12] 9023 	rrc	a
      0032D7 F6               [12] 9024 	mov	@r0,a
      0032D8 18               [12] 9025 	dec	r0
      0032D9 E6               [12] 9026 	mov	a,@r0
      0032DA 13               [12] 9027 	rrc	a
      0032DB F6               [12] 9028 	mov	@r0,a
      0032DC 18               [12] 9029 	dec	r0
      0032DD E6               [12] 9030 	mov	a,@r0
      0032DE 13               [12] 9031 	rrc	a
      0032DF F6               [12] 9032 	mov	@r0,a
      0032E0 E5*00            [12] 9033 	mov	a,_bp
      0032E2 24 1A            [12] 9034 	add	a,#0x1a
      0032E4 F8               [12] 9035 	mov	r0,a
      0032E5 E6               [12] 9036 	mov	a,@r0
      0032E6 08               [12] 9037 	inc	r0
      0032E7 46               [12] 9038 	orl	a,@r0
      0032E8 08               [12] 9039 	inc	r0
      0032E9 46               [12] 9040 	orl	a,@r0
      0032EA 08               [12] 9041 	inc	r0
      0032EB 46               [12] 9042 	orl	a,@r0
      0032EC 70 9B            [24] 9043 	jnz	00151$
                                   9044 ;	calc.c:409: if (n > 1) printall(vals[0]);
      0032EE                       9045 00106$:
                                   9046 ;	calc.c:411: n = stack_peek2(ctx->ss, vals);
      0032EE 89 07            [24] 9047 	mov	ar7,r1
      0032F0 7E 00            [12] 9048 	mov	r6,#0x00
      0032F2 7D 40            [12] 9049 	mov	r5,#0x40
      0032F4 A8*00            [24] 9050 	mov	r0,_bp
      0032F6 08               [12] 9051 	inc	r0
      0032F7 86 82            [24] 9052 	mov	dpl,@r0
      0032F9 08               [12] 9053 	inc	r0
      0032FA 86 83            [24] 9054 	mov	dph,@r0
      0032FC 08               [12] 9055 	inc	r0
      0032FD 86 F0            [24] 9056 	mov	b,@r0
      0032FF 12r00r00         [24] 9057 	lcall	__gptrget
      003302 FA               [12] 9058 	mov	r2,a
      003303 A3               [24] 9059 	inc	dptr
      003304 12r00r00         [24] 9060 	lcall	__gptrget
      003307 FB               [12] 9061 	mov	r3,a
      003308 A3               [24] 9062 	inc	dptr
      003309 12r00r00         [24] 9063 	lcall	__gptrget
      00330C FC               [12] 9064 	mov	r4,a
      00330D C0 01            [24] 9065 	push	ar1
      00330F C0 07            [24] 9066 	push	ar7
      003311 C0 06            [24] 9067 	push	ar6
      003313 C0 05            [24] 9068 	push	ar5
      003315 8A 82            [24] 9069 	mov	dpl,r2
      003317 8B 83            [24] 9070 	mov	dph,r3
      003319 8C F0            [24] 9071 	mov	b,r4
      00331B 12r00r00         [24] 9072 	lcall	_stack_peek2
      00331E AE 82            [24] 9073 	mov	r6,dpl
      003320 AF 83            [24] 9074 	mov	r7,dph
      003322 15 81            [12] 9075 	dec	sp
      003324 15 81            [12] 9076 	dec	sp
      003326 15 81            [12] 9077 	dec	sp
      003328 D0 01            [24] 9078 	pop	ar1
      00332A E5*00            [12] 9079 	mov	a,_bp
      00332C 24 0C            [12] 9080 	add	a,#0x0c
      00332E F8               [12] 9081 	mov	r0,a
      00332F A6 06            [24] 9082 	mov	@r0,ar6
      003331 08               [12] 9083 	inc	r0
      003332 A6 07            [24] 9084 	mov	@r0,ar7
                                   9085 ;	calc.c:412: printstr("\r\nSSTOP1\t");
      003334 7BrFE            [12] 9086 	mov	r3,#___str_19
      003336 7Cs00            [12] 9087 	mov	r4,#(___str_19 >> 8)
      003338 7D 80            [12] 9088 	mov	r5,#0x80
                                   9089 ;	calc.c:51: return;
      00333A                       9090 00154$:
                                   9091 ;	calc.c:49: for (; *s; s++) putchar(*s);
      00333A 8B 82            [24] 9092 	mov	dpl,r3
      00333C 8C 83            [24] 9093 	mov	dph,r4
      00333E 8D F0            [24] 9094 	mov	b,r5
      003340 12r00r00         [24] 9095 	lcall	__gptrget
      003343 FA               [12] 9096 	mov	r2,a
      003344 60 10            [24] 9097 	jz	00127$
      003346 7F 00            [12] 9098 	mov	r7,#0x00
      003348 8A 82            [24] 9099 	mov	dpl,r2
      00334A 8F 83            [24] 9100 	mov	dph,r7
      00334C 12r00r00         [24] 9101 	lcall	_putchar
      00334F 0B               [12] 9102 	inc	r3
                                   9103 ;	calc.c:412: printstr("\r\nSSTOP1\t");
      003350 BB 00 E7         [24] 9104 	cjne	r3,#0x00,00154$
      003353 0C               [12] 9105 	inc	r4
      003354 80 E4            [24] 9106 	sjmp	00154$
      003356                       9107 00127$:
                                   9108 ;	calc.c:413: if (n > 0) printall(vals[1]);
      003356 E5*00            [12] 9109 	mov	a,_bp
      003358 24 0C            [12] 9110 	add	a,#0x0c
      00335A F8               [12] 9111 	mov	r0,a
      00335B C3               [12] 9112 	clr	c
      00335C E4               [12] 9113 	clr	a
      00335D 96               [12] 9114 	subb	a,@r0
      00335E 74 80            [12] 9115 	mov	a,#(0x00 ^ 0x80)
      003360 08               [12] 9116 	inc	r0
      003361 86 F0            [24] 9117 	mov	b,@r0
      003363 63 F0 80         [24] 9118 	xrl	b,#0x80
      003366 95 F0            [12] 9119 	subb	a,b
      003368 40 03            [24] 9120 	jc	00336$
      00336A 02r34r92         [24] 9121 	ljmp	00108$
      00336D                       9122 00336$:
      00336D 74 04            [12] 9123 	mov	a,#0x04
      00336F 29               [12] 9124 	add	a,r1
      003370 F8               [12] 9125 	mov	r0,a
      003371 86 02            [24] 9126 	mov	ar2,@r0
      003373 08               [12] 9127 	inc	r0
      003374 86 03            [24] 9128 	mov	ar3,@r0
      003376 08               [12] 9129 	inc	r0
      003377 86 04            [24] 9130 	mov	ar4,@r0
      003379 08               [12] 9131 	inc	r0
      00337A 86 05            [24] 9132 	mov	ar5,@r0
                                   9133 ;	calc.c:64: printf("%08lx\t", d);
      00337C C0 05            [24] 9134 	push	ar5
      00337E C0 04            [24] 9135 	push	ar4
      003380 C0 03            [24] 9136 	push	ar3
      003382 C0 02            [24] 9137 	push	ar2
      003384 C0 01            [24] 9138 	push	ar1
      003386 C0 02            [24] 9139 	push	ar2
      003388 C0 03            [24] 9140 	push	ar3
      00338A C0 04            [24] 9141 	push	ar4
      00338C C0 05            [24] 9142 	push	ar5
      00338E 74r00            [12] 9143 	mov	a,#___str_0
      003390 C0 E0            [24] 9144 	push	acc
      003392 74s00            [12] 9145 	mov	a,#(___str_0 >> 8)
      003394 C0 E0            [24] 9146 	push	acc
      003396 74 80            [12] 9147 	mov	a,#0x80
      003398 C0 E0            [24] 9148 	push	acc
      00339A 12r00r00         [24] 9149 	lcall	_printf
      00339D E5 81            [12] 9150 	mov	a,sp
      00339F 24 F9            [12] 9151 	add	a,#0xf9
      0033A1 F5 81            [12] 9152 	mov	sp,a
      0033A3 D0 01            [24] 9153 	pop	ar1
      0033A5 D0 02            [24] 9154 	pop	ar2
      0033A7 D0 03            [24] 9155 	pop	ar3
      0033A9 D0 04            [24] 9156 	pop	ar4
      0033AB D0 05            [24] 9157 	pop	ar5
                                   9158 ;	calc.c:65: printf("% 11ld\t", d);
      0033AD C0 05            [24] 9159 	push	ar5
      0033AF C0 04            [24] 9160 	push	ar4
      0033B1 C0 03            [24] 9161 	push	ar3
      0033B3 C0 02            [24] 9162 	push	ar2
      0033B5 C0 01            [24] 9163 	push	ar1
      0033B7 C0 02            [24] 9164 	push	ar2
      0033B9 C0 03            [24] 9165 	push	ar3
      0033BB C0 04            [24] 9166 	push	ar4
      0033BD C0 05            [24] 9167 	push	ar5
      0033BF 74r07            [12] 9168 	mov	a,#___str_1
      0033C1 C0 E0            [24] 9169 	push	acc
      0033C3 74s00            [12] 9170 	mov	a,#(___str_1 >> 8)
      0033C5 C0 E0            [24] 9171 	push	acc
      0033C7 74 80            [12] 9172 	mov	a,#0x80
      0033C9 C0 E0            [24] 9173 	push	acc
      0033CB 12r00r00         [24] 9174 	lcall	_printf
      0033CE E5 81            [12] 9175 	mov	a,sp
      0033D0 24 F9            [12] 9176 	add	a,#0xf9
      0033D2 F5 81            [12] 9177 	mov	sp,a
      0033D4 D0 01            [24] 9178 	pop	ar1
      0033D6 D0 02            [24] 9179 	pop	ar2
      0033D8 D0 03            [24] 9180 	pop	ar3
      0033DA D0 04            [24] 9181 	pop	ar4
      0033DC D0 05            [24] 9182 	pop	ar5
                                   9183 ;	calc.c:66: printf("%011lo\t", d);
      0033DE C0 05            [24] 9184 	push	ar5
      0033E0 C0 04            [24] 9185 	push	ar4
      0033E2 C0 03            [24] 9186 	push	ar3
      0033E4 C0 02            [24] 9187 	push	ar2
      0033E6 C0 01            [24] 9188 	push	ar1
      0033E8 C0 02            [24] 9189 	push	ar2
      0033EA C0 03            [24] 9190 	push	ar3
      0033EC C0 04            [24] 9191 	push	ar4
      0033EE C0 05            [24] 9192 	push	ar5
      0033F0 74r0F            [12] 9193 	mov	a,#___str_2
      0033F2 C0 E0            [24] 9194 	push	acc
      0033F4 74s00            [12] 9195 	mov	a,#(___str_2 >> 8)
      0033F6 C0 E0            [24] 9196 	push	acc
      0033F8 74 80            [12] 9197 	mov	a,#0x80
      0033FA C0 E0            [24] 9198 	push	acc
      0033FC 12r00r00         [24] 9199 	lcall	_printf
      0033FF E5 81            [12] 9200 	mov	a,sp
      003401 24 F9            [12] 9201 	add	a,#0xf9
      003403 F5 81            [12] 9202 	mov	sp,a
      003405 D0 01            [24] 9203 	pop	ar1
      003407 D0 02            [24] 9204 	pop	ar2
      003409 D0 03            [24] 9205 	pop	ar3
      00340B D0 04            [24] 9206 	pop	ar4
      00340D D0 05            [24] 9207 	pop	ar5
                                   9208 ;	calc.c:67: printbin(d);
      00340F E5*00            [12] 9209 	mov	a,_bp
      003411 24 16            [12] 9210 	add	a,#0x16
      003413 F8               [12] 9211 	mov	r0,a
      003414 A6 02            [24] 9212 	mov	@r0,ar2
      003416 08               [12] 9213 	inc	r0
      003417 A6 03            [24] 9214 	mov	@r0,ar3
      003419 08               [12] 9215 	inc	r0
      00341A A6 04            [24] 9216 	mov	@r0,ar4
      00341C 08               [12] 9217 	inc	r0
      00341D A6 05            [24] 9218 	mov	@r0,ar5
                                   9219 ;	calc.c:57: for (mask = 0x80000000lu; mask; mask >>= 1)
      00341F E5*00            [12] 9220 	mov	a,_bp
      003421 24 1A            [12] 9221 	add	a,#0x1a
      003423 F8               [12] 9222 	mov	r0,a
      003424 E4               [12] 9223 	clr	a
      003425 F6               [12] 9224 	mov	@r0,a
      003426 08               [12] 9225 	inc	r0
      003427 F6               [12] 9226 	mov	@r0,a
      003428 08               [12] 9227 	inc	r0
      003429 F6               [12] 9228 	mov	@r0,a
      00342A 08               [12] 9229 	inc	r0
      00342B 76 80            [12] 9230 	mov	@r0,#0x80
      00342D                       9231 00156$:
                                   9232 ;	calc.c:58: (void)putchar((d & mask) ? (int)'1' : (int)'0');
      00342D C0 01            [24] 9233 	push	ar1
      00342F E5*00            [12] 9234 	mov	a,_bp
      003431 24 16            [12] 9235 	add	a,#0x16
      003433 F8               [12] 9236 	mov	r0,a
      003434 86 02            [24] 9237 	mov	ar2,@r0
      003436 08               [12] 9238 	inc	r0
      003437 86 03            [24] 9239 	mov	ar3,@r0
      003439 08               [12] 9240 	inc	r0
      00343A 86 05            [24] 9241 	mov	ar5,@r0
      00343C 08               [12] 9242 	inc	r0
      00343D 86 07            [24] 9243 	mov	ar7,@r0
      00343F E5*00            [12] 9244 	mov	a,_bp
      003441 24 1A            [12] 9245 	add	a,#0x1a
      003443 F8               [12] 9246 	mov	r0,a
      003444 E6               [12] 9247 	mov	a,@r0
      003445 52 02            [12] 9248 	anl	ar2,a
      003447 08               [12] 9249 	inc	r0
      003448 E6               [12] 9250 	mov	a,@r0
      003449 52 03            [12] 9251 	anl	ar3,a
      00344B 08               [12] 9252 	inc	r0
      00344C E6               [12] 9253 	mov	a,@r0
      00344D 52 05            [12] 9254 	anl	ar5,a
      00344F 08               [12] 9255 	inc	r0
      003450 E6               [12] 9256 	mov	a,@r0
      003451 52 07            [12] 9257 	anl	ar7,a
      003453 D0 01            [24] 9258 	pop	ar1
      003455 EA               [12] 9259 	mov	a,r2
      003456 4B               [12] 9260 	orl	a,r3
      003457 4D               [12] 9261 	orl	a,r5
      003458 4F               [12] 9262 	orl	a,r7
      003459 60 06            [24] 9263 	jz	00174$
      00345B 7E 31            [12] 9264 	mov	r6,#0x31
      00345D 7F 00            [12] 9265 	mov	r7,#0x00
      00345F 80 04            [24] 9266 	sjmp	00175$
      003461                       9267 00174$:
      003461 7E 30            [12] 9268 	mov	r6,#0x30
      003463 7F 00            [12] 9269 	mov	r7,#0x00
      003465                       9270 00175$:
      003465 8E 82            [24] 9271 	mov	dpl,r6
      003467 8F 83            [24] 9272 	mov	dph,r7
      003469 12r00r00         [24] 9273 	lcall	_putchar
                                   9274 ;	calc.c:57: for (mask = 0x80000000lu; mask; mask >>= 1)
      00346C E5*00            [12] 9275 	mov	a,_bp
      00346E 24 1A            [12] 9276 	add	a,#0x1a
      003470 F8               [12] 9277 	mov	r0,a
      003471 08               [12] 9278 	inc	r0
      003472 08               [12] 9279 	inc	r0
      003473 08               [12] 9280 	inc	r0
      003474 E6               [12] 9281 	mov	a,@r0
      003475 C3               [12] 9282 	clr	c
      003476 13               [12] 9283 	rrc	a
      003477 F6               [12] 9284 	mov	@r0,a
      003478 18               [12] 9285 	dec	r0
      003479 E6               [12] 9286 	mov	a,@r0
      00347A 13               [12] 9287 	rrc	a
      00347B F6               [12] 9288 	mov	@r0,a
      00347C 18               [12] 9289 	dec	r0
      00347D E6               [12] 9290 	mov	a,@r0
      00347E 13               [12] 9291 	rrc	a
      00347F F6               [12] 9292 	mov	@r0,a
      003480 18               [12] 9293 	dec	r0
      003481 E6               [12] 9294 	mov	a,@r0
      003482 13               [12] 9295 	rrc	a
      003483 F6               [12] 9296 	mov	@r0,a
      003484 E5*00            [12] 9297 	mov	a,_bp
      003486 24 1A            [12] 9298 	add	a,#0x1a
      003488 F8               [12] 9299 	mov	r0,a
      003489 E6               [12] 9300 	mov	a,@r0
      00348A 08               [12] 9301 	inc	r0
      00348B 46               [12] 9302 	orl	a,@r0
      00348C 08               [12] 9303 	inc	r0
      00348D 46               [12] 9304 	orl	a,@r0
      00348E 08               [12] 9305 	inc	r0
      00348F 46               [12] 9306 	orl	a,@r0
      003490 70 9B            [24] 9307 	jnz	00156$
                                   9308 ;	calc.c:413: if (n > 0) printall(vals[1]);
      003492                       9309 00108$:
                                   9310 ;	calc.c:414: printstr("\r\nSSTOP0\t");
      003492 7Dr08            [12] 9311 	mov	r5,#___str_20
      003494 7Es01            [12] 9312 	mov	r6,#(___str_20 >> 8)
      003496 7F 80            [12] 9313 	mov	r7,#0x80
                                   9314 ;	calc.c:51: return;
      003498                       9315 00159$:
                                   9316 ;	calc.c:49: for (; *s; s++) putchar(*s);
      003498 8D 82            [24] 9317 	mov	dpl,r5
      00349A 8E 83            [24] 9318 	mov	dph,r6
      00349C 8F F0            [24] 9319 	mov	b,r7
      00349E 12r00r00         [24] 9320 	lcall	__gptrget
      0034A1 FC               [12] 9321 	mov	r4,a
      0034A2 60 10            [24] 9322 	jz	00132$
      0034A4 7B 00            [12] 9323 	mov	r3,#0x00
      0034A6 8C 82            [24] 9324 	mov	dpl,r4
      0034A8 8B 83            [24] 9325 	mov	dph,r3
      0034AA 12r00r00         [24] 9326 	lcall	_putchar
      0034AD 0D               [12] 9327 	inc	r5
                                   9328 ;	calc.c:414: printstr("\r\nSSTOP0\t");
      0034AE BD 00 E7         [24] 9329 	cjne	r5,#0x00,00159$
      0034B1 0E               [12] 9330 	inc	r6
      0034B2 80 E4            [24] 9331 	sjmp	00159$
      0034B4                       9332 00132$:
                                   9333 ;	calc.c:415: if (n > 1) printall(vals[0]);
      0034B4 E5*00            [12] 9334 	mov	a,_bp
      0034B6 24 0C            [12] 9335 	add	a,#0x0c
      0034B8 F8               [12] 9336 	mov	r0,a
      0034B9 C3               [12] 9337 	clr	c
      0034BA 74 01            [12] 9338 	mov	a,#0x01
      0034BC 96               [12] 9339 	subb	a,@r0
      0034BD 74 80            [12] 9340 	mov	a,#(0x00 ^ 0x80)
      0034BF 08               [12] 9341 	inc	r0
      0034C0 86 F0            [24] 9342 	mov	b,@r0
      0034C2 63 F0 80         [24] 9343 	xrl	b,#0x80
      0034C5 95 F0            [12] 9344 	subb	a,b
      0034C7 40 03            [24] 9345 	jc	00341$
      0034C9 02r35rDD         [24] 9346 	ljmp	00110$
      0034CC                       9347 00341$:
      0034CC 87 04            [24] 9348 	mov	ar4,@r1
      0034CE 09               [12] 9349 	inc	r1
      0034CF 87 05            [24] 9350 	mov	ar5,@r1
      0034D1 09               [12] 9351 	inc	r1
      0034D2 87 06            [24] 9352 	mov	ar6,@r1
      0034D4 09               [12] 9353 	inc	r1
      0034D5 87 07            [24] 9354 	mov	ar7,@r1
                                   9355 ;	calc.c:64: printf("%08lx\t", d);
      0034D7 C0 07            [24] 9356 	push	ar7
      0034D9 C0 06            [24] 9357 	push	ar6
      0034DB C0 05            [24] 9358 	push	ar5
      0034DD C0 04            [24] 9359 	push	ar4
      0034DF C0 04            [24] 9360 	push	ar4
      0034E1 C0 05            [24] 9361 	push	ar5
      0034E3 C0 06            [24] 9362 	push	ar6
      0034E5 C0 07            [24] 9363 	push	ar7
      0034E7 74r00            [12] 9364 	mov	a,#___str_0
      0034E9 C0 E0            [24] 9365 	push	acc
      0034EB 74s00            [12] 9366 	mov	a,#(___str_0 >> 8)
      0034ED C0 E0            [24] 9367 	push	acc
      0034EF 74 80            [12] 9368 	mov	a,#0x80
      0034F1 C0 E0            [24] 9369 	push	acc
      0034F3 12r00r00         [24] 9370 	lcall	_printf
      0034F6 E5 81            [12] 9371 	mov	a,sp
      0034F8 24 F9            [12] 9372 	add	a,#0xf9
      0034FA F5 81            [12] 9373 	mov	sp,a
      0034FC D0 04            [24] 9374 	pop	ar4
      0034FE D0 05            [24] 9375 	pop	ar5
      003500 D0 06            [24] 9376 	pop	ar6
      003502 D0 07            [24] 9377 	pop	ar7
                                   9378 ;	calc.c:65: printf("% 11ld\t", d);
      003504 C0 07            [24] 9379 	push	ar7
      003506 C0 06            [24] 9380 	push	ar6
      003508 C0 05            [24] 9381 	push	ar5
      00350A C0 04            [24] 9382 	push	ar4
      00350C C0 04            [24] 9383 	push	ar4
      00350E C0 05            [24] 9384 	push	ar5
      003510 C0 06            [24] 9385 	push	ar6
      003512 C0 07            [24] 9386 	push	ar7
      003514 74r07            [12] 9387 	mov	a,#___str_1
      003516 C0 E0            [24] 9388 	push	acc
      003518 74s00            [12] 9389 	mov	a,#(___str_1 >> 8)
      00351A C0 E0            [24] 9390 	push	acc
      00351C 74 80            [12] 9391 	mov	a,#0x80
      00351E C0 E0            [24] 9392 	push	acc
      003520 12r00r00         [24] 9393 	lcall	_printf
      003523 E5 81            [12] 9394 	mov	a,sp
      003525 24 F9            [12] 9395 	add	a,#0xf9
      003527 F5 81            [12] 9396 	mov	sp,a
      003529 D0 04            [24] 9397 	pop	ar4
      00352B D0 05            [24] 9398 	pop	ar5
      00352D D0 06            [24] 9399 	pop	ar6
      00352F D0 07            [24] 9400 	pop	ar7
                                   9401 ;	calc.c:66: printf("%011lo\t", d);
      003531 C0 07            [24] 9402 	push	ar7
      003533 C0 06            [24] 9403 	push	ar6
      003535 C0 05            [24] 9404 	push	ar5
      003537 C0 04            [24] 9405 	push	ar4
      003539 C0 04            [24] 9406 	push	ar4
      00353B C0 05            [24] 9407 	push	ar5
      00353D C0 06            [24] 9408 	push	ar6
      00353F C0 07            [24] 9409 	push	ar7
      003541 74r0F            [12] 9410 	mov	a,#___str_2
      003543 C0 E0            [24] 9411 	push	acc
      003545 74s00            [12] 9412 	mov	a,#(___str_2 >> 8)
      003547 C0 E0            [24] 9413 	push	acc
      003549 74 80            [12] 9414 	mov	a,#0x80
      00354B C0 E0            [24] 9415 	push	acc
      00354D 12r00r00         [24] 9416 	lcall	_printf
      003550 E5 81            [12] 9417 	mov	a,sp
      003552 24 F9            [12] 9418 	add	a,#0xf9
      003554 F5 81            [12] 9419 	mov	sp,a
      003556 D0 04            [24] 9420 	pop	ar4
      003558 D0 05            [24] 9421 	pop	ar5
      00355A D0 06            [24] 9422 	pop	ar6
      00355C D0 07            [24] 9423 	pop	ar7
                                   9424 ;	calc.c:67: printbin(d);
      00355E E5*00            [12] 9425 	mov	a,_bp
      003560 24 16            [12] 9426 	add	a,#0x16
      003562 F8               [12] 9427 	mov	r0,a
      003563 A6 04            [24] 9428 	mov	@r0,ar4
      003565 08               [12] 9429 	inc	r0
      003566 A6 05            [24] 9430 	mov	@r0,ar5
      003568 08               [12] 9431 	inc	r0
      003569 A6 06            [24] 9432 	mov	@r0,ar6
      00356B 08               [12] 9433 	inc	r0
      00356C A6 07            [24] 9434 	mov	@r0,ar7
                                   9435 ;	calc.c:57: for (mask = 0x80000000lu; mask; mask >>= 1)
      00356E E5*00            [12] 9436 	mov	a,_bp
      003570 24 1A            [12] 9437 	add	a,#0x1a
      003572 F8               [12] 9438 	mov	r0,a
      003573 E4               [12] 9439 	clr	a
      003574 F6               [12] 9440 	mov	@r0,a
      003575 08               [12] 9441 	inc	r0
      003576 F6               [12] 9442 	mov	@r0,a
      003577 08               [12] 9443 	inc	r0
      003578 F6               [12] 9444 	mov	@r0,a
      003579 08               [12] 9445 	inc	r0
      00357A 76 80            [12] 9446 	mov	@r0,#0x80
      00357C                       9447 00161$:
                                   9448 ;	calc.c:58: (void)putchar((d & mask) ? (int)'1' : (int)'0');
      00357C E5*00            [12] 9449 	mov	a,_bp
      00357E 24 16            [12] 9450 	add	a,#0x16
      003580 F8               [12] 9451 	mov	r0,a
      003581 86 04            [24] 9452 	mov	ar4,@r0
      003583 08               [12] 9453 	inc	r0
      003584 86 05            [24] 9454 	mov	ar5,@r0
      003586 08               [12] 9455 	inc	r0
      003587 86 06            [24] 9456 	mov	ar6,@r0
      003589 08               [12] 9457 	inc	r0
      00358A 86 07            [24] 9458 	mov	ar7,@r0
      00358C E5*00            [12] 9459 	mov	a,_bp
      00358E 24 1A            [12] 9460 	add	a,#0x1a
      003590 F8               [12] 9461 	mov	r0,a
      003591 E6               [12] 9462 	mov	a,@r0
      003592 52 04            [12] 9463 	anl	ar4,a
      003594 08               [12] 9464 	inc	r0
      003595 E6               [12] 9465 	mov	a,@r0
      003596 52 05            [12] 9466 	anl	ar5,a
      003598 08               [12] 9467 	inc	r0
      003599 E6               [12] 9468 	mov	a,@r0
      00359A 52 06            [12] 9469 	anl	ar6,a
      00359C 08               [12] 9470 	inc	r0
      00359D E6               [12] 9471 	mov	a,@r0
      00359E 52 07            [12] 9472 	anl	ar7,a
      0035A0 EC               [12] 9473 	mov	a,r4
      0035A1 4D               [12] 9474 	orl	a,r5
      0035A2 4E               [12] 9475 	orl	a,r6
      0035A3 4F               [12] 9476 	orl	a,r7
      0035A4 60 06            [24] 9477 	jz	00176$
      0035A6 7E 31            [12] 9478 	mov	r6,#0x31
      0035A8 7F 00            [12] 9479 	mov	r7,#0x00
      0035AA 80 04            [24] 9480 	sjmp	00177$
      0035AC                       9481 00176$:
      0035AC 7E 30            [12] 9482 	mov	r6,#0x30
      0035AE 7F 00            [12] 9483 	mov	r7,#0x00
      0035B0                       9484 00177$:
      0035B0 8E 82            [24] 9485 	mov	dpl,r6
      0035B2 8F 83            [24] 9486 	mov	dph,r7
      0035B4 12r00r00         [24] 9487 	lcall	_putchar
                                   9488 ;	calc.c:57: for (mask = 0x80000000lu; mask; mask >>= 1)
      0035B7 E5*00            [12] 9489 	mov	a,_bp
      0035B9 24 1A            [12] 9490 	add	a,#0x1a
      0035BB F8               [12] 9491 	mov	r0,a
      0035BC 08               [12] 9492 	inc	r0
      0035BD 08               [12] 9493 	inc	r0
      0035BE 08               [12] 9494 	inc	r0
      0035BF E6               [12] 9495 	mov	a,@r0
      0035C0 C3               [12] 9496 	clr	c
      0035C1 13               [12] 9497 	rrc	a
      0035C2 F6               [12] 9498 	mov	@r0,a
      0035C3 18               [12] 9499 	dec	r0
      0035C4 E6               [12] 9500 	mov	a,@r0
      0035C5 13               [12] 9501 	rrc	a
      0035C6 F6               [12] 9502 	mov	@r0,a
      0035C7 18               [12] 9503 	dec	r0
      0035C8 E6               [12] 9504 	mov	a,@r0
      0035C9 13               [12] 9505 	rrc	a
      0035CA F6               [12] 9506 	mov	@r0,a
      0035CB 18               [12] 9507 	dec	r0
      0035CC E6               [12] 9508 	mov	a,@r0
      0035CD 13               [12] 9509 	rrc	a
      0035CE F6               [12] 9510 	mov	@r0,a
      0035CF E5*00            [12] 9511 	mov	a,_bp
      0035D1 24 1A            [12] 9512 	add	a,#0x1a
      0035D3 F8               [12] 9513 	mov	r0,a
      0035D4 E6               [12] 9514 	mov	a,@r0
      0035D5 08               [12] 9515 	inc	r0
      0035D6 46               [12] 9516 	orl	a,@r0
      0035D7 08               [12] 9517 	inc	r0
      0035D8 46               [12] 9518 	orl	a,@r0
      0035D9 08               [12] 9519 	inc	r0
      0035DA 46               [12] 9520 	orl	a,@r0
      0035DB 70 9F            [24] 9521 	jnz	00161$
                                   9522 ;	calc.c:415: if (n > 1) printall(vals[0]);
      0035DD                       9523 00110$:
                                   9524 ;	calc.c:416: printstr("\r\n");
      0035DD 7Dr17            [12] 9525 	mov	r5,#___str_3
      0035DF 7Es00            [12] 9526 	mov	r6,#(___str_3 >> 8)
      0035E1 7F 80            [12] 9527 	mov	r7,#0x80
                                   9528 ;	calc.c:51: return;
      0035E3                       9529 00164$:
                                   9530 ;	calc.c:49: for (; *s; s++) putchar(*s);
      0035E3 8D 82            [24] 9531 	mov	dpl,r5
      0035E5 8E 83            [24] 9532 	mov	dph,r6
      0035E7 8F F0            [24] 9533 	mov	b,r7
      0035E9 12r00r00         [24] 9534 	lcall	__gptrget
      0035EC FC               [12] 9535 	mov	r4,a
      0035ED 60 10            [24] 9536 	jz	00137$
      0035EF 7B 00            [12] 9537 	mov	r3,#0x00
      0035F1 8C 82            [24] 9538 	mov	dpl,r4
      0035F3 8B 83            [24] 9539 	mov	dph,r3
      0035F5 12r00r00         [24] 9540 	lcall	_putchar
      0035F8 0D               [12] 9541 	inc	r5
                                   9542 ;	calc.c:416: printstr("\r\n");
      0035F9 BD 00 E7         [24] 9543 	cjne	r5,#0x00,00164$
      0035FC 0E               [12] 9544 	inc	r6
      0035FD 80 E4            [24] 9545 	sjmp	00164$
      0035FF                       9546 00137$:
                                   9547 ;	calc.c:418: return 1;
      0035FF 90 00 01         [24] 9548 	mov	dptr,#0x0001
                                   9549 ;	calc.c:419: }
      003602 85*00 81         [24] 9550 	mov	sp,_bp
      003605 D0*00            [24] 9551 	pop	_bp
      003607 22               [24] 9552 	ret
                                   9553 ;------------------------------------------------------------
                                   9554 ;Allocation info for local variables in function 'help'
                                   9555 ;------------------------------------------------------------
                                   9556 ;delta                     Allocated to stack - _bp -5
                                   9557 ;_ctx                      Allocated to registers 
                                   9558 ;__1310720151              Allocated to registers 
                                   9559 ;s                         Allocated to registers r5 r6 r7 
                                   9560 ;__1310720153              Allocated to registers 
                                   9561 ;s                         Allocated to registers r5 r6 r7 
                                   9562 ;__1310720155              Allocated to registers 
                                   9563 ;s                         Allocated to registers r5 r6 r7 
                                   9564 ;__1310720157              Allocated to registers 
                                   9565 ;s                         Allocated to registers r5 r6 r7 
                                   9566 ;__1310720159              Allocated to registers 
                                   9567 ;s                         Allocated to registers r5 r6 r7 
                                   9568 ;__1310720161              Allocated to registers 
                                   9569 ;s                         Allocated to registers r5 r6 r7 
                                   9570 ;__1310720163              Allocated to registers 
                                   9571 ;s                         Allocated to registers r5 r6 r7 
                                   9572 ;__1310720165              Allocated to registers 
                                   9573 ;s                         Allocated to registers r5 r6 r7 
                                   9574 ;__1310720167              Allocated to registers 
                                   9575 ;s                         Allocated to registers r5 r6 r7 
                                   9576 ;__1310720169              Allocated to registers 
                                   9577 ;s                         Allocated to registers r5 r6 r7 
                                   9578 ;__1310720171              Allocated to registers 
                                   9579 ;s                         Allocated to registers r5 r6 r7 
                                   9580 ;__1310720173              Allocated to registers 
                                   9581 ;s                         Allocated to registers r5 r6 r7 
                                   9582 ;__1310720175              Allocated to registers 
                                   9583 ;s                         Allocated to registers r5 r6 r7 
                                   9584 ;__1310720177              Allocated to registers 
                                   9585 ;s                         Allocated to registers r5 r6 r7 
                                   9586 ;__1310720179              Allocated to registers 
                                   9587 ;s                         Allocated to registers r5 r6 r7 
                                   9588 ;__1310720181              Allocated to registers 
                                   9589 ;s                         Allocated to registers r5 r6 r7 
                                   9590 ;__1310720183              Allocated to registers 
                                   9591 ;s                         Allocated to registers r5 r6 r7 
                                   9592 ;__1310720185              Allocated to registers 
                                   9593 ;s                         Allocated to registers r5 r6 r7 
                                   9594 ;__1310720187              Allocated to registers 
                                   9595 ;s                         Allocated to registers r5 r6 r7 
                                   9596 ;__1310720189              Allocated to registers 
                                   9597 ;s                         Allocated to registers r5 r6 r7 
                                   9598 ;__1310720191              Allocated to registers 
                                   9599 ;s                         Allocated to registers r5 r6 r7 
                                   9600 ;__1310720193              Allocated to registers 
                                   9601 ;s                         Allocated to registers r5 r6 r7 
                                   9602 ;__1310720195              Allocated to registers 
                                   9603 ;s                         Allocated to registers r5 r6 r7 
                                   9604 ;__1310720197              Allocated to registers 
                                   9605 ;s                         Allocated to registers r5 r6 r7 
                                   9606 ;__1310720199              Allocated to registers 
                                   9607 ;s                         Allocated to registers r5 r6 r7 
                                   9608 ;__1310720201              Allocated to registers 
                                   9609 ;s                         Allocated to registers r5 r6 r7 
                                   9610 ;__1310720203              Allocated to registers 
                                   9611 ;s                         Allocated to registers r5 r6 r7 
                                   9612 ;__1310720205              Allocated to registers 
                                   9613 ;s                         Allocated to registers r5 r6 r7 
                                   9614 ;__1310720207              Allocated to registers 
                                   9615 ;s                         Allocated to registers r5 r6 r7 
                                   9616 ;__1310720209              Allocated to registers 
                                   9617 ;s                         Allocated to registers r5 r6 r7 
                                   9618 ;__1310720211              Allocated to registers 
                                   9619 ;s                         Allocated to registers r5 r6 r7 
                                   9620 ;------------------------------------------------------------
                                   9621 ;	calc.c:421: static int help(void *_ctx, delta_t *delta) __reentrant {
                                   9622 ;	-----------------------------------------
                                   9623 ;	 function help
                                   9624 ;	-----------------------------------------
      003608                       9625 _help:
      003608 C0*00            [24] 9626 	push	_bp
      00360A 85 81*00         [24] 9627 	mov	_bp,sp
                                   9628 ;	calc.c:425: printstr("\r\nHhOo\tbase 16 10 8 2\r\n");
      00360D 7Dr12            [12] 9629 	mov	r5,#___str_21
      00360F 7Es01            [12] 9630 	mov	r6,#(___str_21 >> 8)
      003611 7F 80            [12] 9631 	mov	r7,#0x80
                                   9632 ;	calc.c:51: return;
      003613                       9633 00164$:
                                   9634 ;	calc.c:49: for (; *s; s++) putchar(*s);
      003613 8D 82            [24] 9635 	mov	dpl,r5
      003615 8E 83            [24] 9636 	mov	dph,r6
      003617 8F F0            [24] 9637 	mov	b,r7
      003619 12r00r00         [24] 9638 	lcall	__gptrget
      00361C FC               [12] 9639 	mov	r4,a
      00361D 60 10            [24] 9640 	jz	00102$
      00361F 7B 00            [12] 9641 	mov	r3,#0x00
      003621 8C 82            [24] 9642 	mov	dpl,r4
      003623 8B 83            [24] 9643 	mov	dph,r3
      003625 12r00r00         [24] 9644 	lcall	_putchar
      003628 0D               [12] 9645 	inc	r5
                                   9646 ;	calc.c:425: printstr("\r\nHhOo\tbase 16 10 8 2\r\n");
      003629 BD 00 E7         [24] 9647 	cjne	r5,#0x00,00164$
      00362C 0E               [12] 9648 	inc	r6
      00362D 80 E4            [24] 9649 	sjmp	00164$
      00362F                       9650 00102$:
                                   9651 ;	calc.c:426: printstr("p.\tpop top\r\n");
      00362F 7Dr2A            [12] 9652 	mov	r5,#___str_22
      003631 7Es01            [12] 9653 	mov	r6,#(___str_22 >> 8)
      003633 7F 80            [12] 9654 	mov	r7,#0x80
                                   9655 ;	calc.c:51: return;
      003635                       9656 00167$:
                                   9657 ;	calc.c:49: for (; *s; s++) putchar(*s);
      003635 8D 82            [24] 9658 	mov	dpl,r5
      003637 8E 83            [24] 9659 	mov	dph,r6
      003639 8F F0            [24] 9660 	mov	b,r7
      00363B 12r00r00         [24] 9661 	lcall	__gptrget
      00363E FC               [12] 9662 	mov	r4,a
      00363F 60 10            [24] 9663 	jz	00104$
      003641 7B 00            [12] 9664 	mov	r3,#0x00
      003643 8C 82            [24] 9665 	mov	dpl,r4
      003645 8B 83            [24] 9666 	mov	dph,r3
      003647 12r00r00         [24] 9667 	lcall	_putchar
      00364A 0D               [12] 9668 	inc	r5
                                   9669 ;	calc.c:426: printstr("p.\tpop top\r\n");
      00364B BD 00 E7         [24] 9670 	cjne	r5,#0x00,00167$
      00364E 0E               [12] 9671 	inc	r6
      00364F 80 E4            [24] 9672 	sjmp	00167$
      003651                       9673 00104$:
                                   9674 ;	calc.c:427: printstr("P\tpop stack\r\n");
      003651 7Dr37            [12] 9675 	mov	r5,#___str_23
      003653 7Es01            [12] 9676 	mov	r6,#(___str_23 >> 8)
      003655 7F 80            [12] 9677 	mov	r7,#0x80
                                   9678 ;	calc.c:51: return;
      003657                       9679 00170$:
                                   9680 ;	calc.c:49: for (; *s; s++) putchar(*s);
      003657 8D 82            [24] 9681 	mov	dpl,r5
      003659 8E 83            [24] 9682 	mov	dph,r6
      00365B 8F F0            [24] 9683 	mov	b,r7
      00365D 12r00r00         [24] 9684 	lcall	__gptrget
      003660 FC               [12] 9685 	mov	r4,a
      003661 60 10            [24] 9686 	jz	00106$
      003663 7B 00            [12] 9687 	mov	r3,#0x00
      003665 8C 82            [24] 9688 	mov	dpl,r4
      003667 8B 83            [24] 9689 	mov	dph,r3
      003669 12r00r00         [24] 9690 	lcall	_putchar
      00366C 0D               [12] 9691 	inc	r5
                                   9692 ;	calc.c:427: printstr("P\tpop stack\r\n");
      00366D BD 00 E7         [24] 9693 	cjne	r5,#0x00,00170$
      003670 0E               [12] 9694 	inc	r6
      003671 80 E4            [24] 9695 	sjmp	00170$
      003673                       9696 00106$:
                                   9697 ;	calc.c:428: printstr("v\tpeek top\r\n");
      003673 7Dr45            [12] 9698 	mov	r5,#___str_24
      003675 7Es01            [12] 9699 	mov	r6,#(___str_24 >> 8)
      003677 7F 80            [12] 9700 	mov	r7,#0x80
                                   9701 ;	calc.c:51: return;
      003679                       9702 00173$:
                                   9703 ;	calc.c:49: for (; *s; s++) putchar(*s);
      003679 8D 82            [24] 9704 	mov	dpl,r5
      00367B 8E 83            [24] 9705 	mov	dph,r6
      00367D 8F F0            [24] 9706 	mov	b,r7
      00367F 12r00r00         [24] 9707 	lcall	__gptrget
      003682 FC               [12] 9708 	mov	r4,a
      003683 60 10            [24] 9709 	jz	00108$
      003685 7B 00            [12] 9710 	mov	r3,#0x00
      003687 8C 82            [24] 9711 	mov	dpl,r4
      003689 8B 83            [24] 9712 	mov	dph,r3
      00368B 12r00r00         [24] 9713 	lcall	_putchar
      00368E 0D               [12] 9714 	inc	r5
                                   9715 ;	calc.c:428: printstr("v\tpeek top\r\n");
      00368F BD 00 E7         [24] 9716 	cjne	r5,#0x00,00173$
      003692 0E               [12] 9717 	inc	r6
      003693 80 E4            [24] 9718 	sjmp	00173$
      003695                       9719 00108$:
                                   9720 ;	calc.c:429: printstr("V\tpeek stack\r\n");
      003695 7Dr52            [12] 9721 	mov	r5,#___str_25
      003697 7Es01            [12] 9722 	mov	r6,#(___str_25 >> 8)
      003699 7F 80            [12] 9723 	mov	r7,#0x80
                                   9724 ;	calc.c:51: return;
      00369B                       9725 00176$:
                                   9726 ;	calc.c:49: for (; *s; s++) putchar(*s);
      00369B 8D 82            [24] 9727 	mov	dpl,r5
      00369D 8E 83            [24] 9728 	mov	dph,r6
      00369F 8F F0            [24] 9729 	mov	b,r7
      0036A1 12r00r00         [24] 9730 	lcall	__gptrget
      0036A4 FC               [12] 9731 	mov	r4,a
      0036A5 60 10            [24] 9732 	jz	00110$
      0036A7 7B 00            [12] 9733 	mov	r3,#0x00
      0036A9 8C 82            [24] 9734 	mov	dpl,r4
      0036AB 8B 83            [24] 9735 	mov	dph,r3
      0036AD 12r00r00         [24] 9736 	lcall	_putchar
      0036B0 0D               [12] 9737 	inc	r5
                                   9738 ;	calc.c:429: printstr("V\tpeek stack\r\n");
      0036B1 BD 00 E7         [24] 9739 	cjne	r5,#0x00,00176$
      0036B4 0E               [12] 9740 	inc	r6
      0036B5 80 E4            [24] 9741 	sjmp	00176$
      0036B7                       9742 00110$:
                                   9743 ;	calc.c:430: printstr("i\treset acc\r\n");
      0036B7 7Dr61            [12] 9744 	mov	r5,#___str_26
      0036B9 7Es01            [12] 9745 	mov	r6,#(___str_26 >> 8)
      0036BB 7F 80            [12] 9746 	mov	r7,#0x80
                                   9747 ;	calc.c:51: return;
      0036BD                       9748 00179$:
                                   9749 ;	calc.c:49: for (; *s; s++) putchar(*s);
      0036BD 8D 82            [24] 9750 	mov	dpl,r5
      0036BF 8E 83            [24] 9751 	mov	dph,r6
      0036C1 8F F0            [24] 9752 	mov	b,r7
      0036C3 12r00r00         [24] 9753 	lcall	__gptrget
      0036C6 FC               [12] 9754 	mov	r4,a
      0036C7 60 10            [24] 9755 	jz	00112$
      0036C9 7B 00            [12] 9756 	mov	r3,#0x00
      0036CB 8C 82            [24] 9757 	mov	dpl,r4
      0036CD 8B 83            [24] 9758 	mov	dph,r3
      0036CF 12r00r00         [24] 9759 	lcall	_putchar
      0036D2 0D               [12] 9760 	inc	r5
                                   9761 ;	calc.c:430: printstr("i\treset acc\r\n");
      0036D3 BD 00 E7         [24] 9762 	cjne	r5,#0x00,00179$
      0036D6 0E               [12] 9763 	inc	r6
      0036D7 80 E4            [24] 9764 	sjmp	00179$
      0036D9                       9765 00112$:
                                   9766 ;	calc.c:431: printstr("I\treset and discard acc\r\n");
      0036D9 7Dr6F            [12] 9767 	mov	r5,#___str_27
      0036DB 7Es01            [12] 9768 	mov	r6,#(___str_27 >> 8)
      0036DD 7F 80            [12] 9769 	mov	r7,#0x80
                                   9770 ;	calc.c:51: return;
      0036DF                       9771 00182$:
                                   9772 ;	calc.c:49: for (; *s; s++) putchar(*s);
      0036DF 8D 82            [24] 9773 	mov	dpl,r5
      0036E1 8E 83            [24] 9774 	mov	dph,r6
      0036E3 8F F0            [24] 9775 	mov	b,r7
      0036E5 12r00r00         [24] 9776 	lcall	__gptrget
      0036E8 FC               [12] 9777 	mov	r4,a
      0036E9 60 10            [24] 9778 	jz	00114$
      0036EB 7B 00            [12] 9779 	mov	r3,#0x00
      0036ED 8C 82            [24] 9780 	mov	dpl,r4
      0036EF 8B 83            [24] 9781 	mov	dph,r3
      0036F1 12r00r00         [24] 9782 	lcall	_putchar
      0036F4 0D               [12] 9783 	inc	r5
                                   9784 ;	calc.c:431: printstr("I\treset and discard acc\r\n");
      0036F5 BD 00 E7         [24] 9785 	cjne	r5,#0x00,00182$
      0036F8 0E               [12] 9786 	inc	r6
      0036F9 80 E4            [24] 9787 	sjmp	00182$
      0036FB                       9788 00114$:
                                   9789 ;	calc.c:432: printstr("x\texchange top 2\r\n");
      0036FB 7Dr89            [12] 9790 	mov	r5,#___str_28
      0036FD 7Es01            [12] 9791 	mov	r6,#(___str_28 >> 8)
      0036FF 7F 80            [12] 9792 	mov	r7,#0x80
                                   9793 ;	calc.c:51: return;
      003701                       9794 00185$:
                                   9795 ;	calc.c:49: for (; *s; s++) putchar(*s);
      003701 8D 82            [24] 9796 	mov	dpl,r5
      003703 8E 83            [24] 9797 	mov	dph,r6
      003705 8F F0            [24] 9798 	mov	b,r7
      003707 12r00r00         [24] 9799 	lcall	__gptrget
      00370A FC               [12] 9800 	mov	r4,a
      00370B 60 10            [24] 9801 	jz	00116$
      00370D 7B 00            [12] 9802 	mov	r3,#0x00
      00370F 8C 82            [24] 9803 	mov	dpl,r4
      003711 8B 83            [24] 9804 	mov	dph,r3
      003713 12r00r00         [24] 9805 	lcall	_putchar
      003716 0D               [12] 9806 	inc	r5
                                   9807 ;	calc.c:432: printstr("x\texchange top 2\r\n");
      003717 BD 00 E7         [24] 9808 	cjne	r5,#0x00,00185$
      00371A 0E               [12] 9809 	inc	r6
      00371B 80 E4            [24] 9810 	sjmp	00185$
      00371D                       9811 00116$:
                                   9812 ;	calc.c:433: printstr("X\texchange stacks primary <-> secondary\r\n");
      00371D 7Dr9C            [12] 9813 	mov	r5,#___str_29
      00371F 7Es01            [12] 9814 	mov	r6,#(___str_29 >> 8)
      003721 7F 80            [12] 9815 	mov	r7,#0x80
                                   9816 ;	calc.c:51: return;
      003723                       9817 00188$:
                                   9818 ;	calc.c:49: for (; *s; s++) putchar(*s);
      003723 8D 82            [24] 9819 	mov	dpl,r5
      003725 8E 83            [24] 9820 	mov	dph,r6
      003727 8F F0            [24] 9821 	mov	b,r7
      003729 12r00r00         [24] 9822 	lcall	__gptrget
      00372C FC               [12] 9823 	mov	r4,a
      00372D 60 10            [24] 9824 	jz	00118$
      00372F 7B 00            [12] 9825 	mov	r3,#0x00
      003731 8C 82            [24] 9826 	mov	dpl,r4
      003733 8B 83            [24] 9827 	mov	dph,r3
      003735 12r00r00         [24] 9828 	lcall	_putchar
      003738 0D               [12] 9829 	inc	r5
                                   9830 ;	calc.c:433: printstr("X\texchange stacks primary <-> secondary\r\n");
      003739 BD 00 E7         [24] 9831 	cjne	r5,#0x00,00188$
      00373C 0E               [12] 9832 	inc	r6
      00373D 80 E4            [24] 9833 	sjmp	00188$
      00373F                       9834 00118$:
                                   9835 ;	calc.c:434: printstr("T\texchange tops primary <-> secondary\r\n");
      00373F 7DrC6            [12] 9836 	mov	r5,#___str_30
      003741 7Es01            [12] 9837 	mov	r6,#(___str_30 >> 8)
      003743 7F 80            [12] 9838 	mov	r7,#0x80
                                   9839 ;	calc.c:51: return;
      003745                       9840 00191$:
                                   9841 ;	calc.c:49: for (; *s; s++) putchar(*s);
      003745 8D 82            [24] 9842 	mov	dpl,r5
      003747 8E 83            [24] 9843 	mov	dph,r6
      003749 8F F0            [24] 9844 	mov	b,r7
      00374B 12r00r00         [24] 9845 	lcall	__gptrget
      00374E FC               [12] 9846 	mov	r4,a
      00374F 60 10            [24] 9847 	jz	00120$
      003751 7B 00            [12] 9848 	mov	r3,#0x00
      003753 8C 82            [24] 9849 	mov	dpl,r4
      003755 8B 83            [24] 9850 	mov	dph,r3
      003757 12r00r00         [24] 9851 	lcall	_putchar
      00375A 0D               [12] 9852 	inc	r5
                                   9853 ;	calc.c:434: printstr("T\texchange tops primary <-> secondary\r\n");
      00375B BD 00 E7         [24] 9854 	cjne	r5,#0x00,00191$
      00375E 0E               [12] 9855 	inc	r6
      00375F 80 E4            [24] 9856 	sjmp	00191$
      003761                       9857 00120$:
                                   9858 ;	calc.c:435: printstr("U\tcopy top secondary -> primary\r\n");
      003761 7DrEE            [12] 9859 	mov	r5,#___str_31
      003763 7Es01            [12] 9860 	mov	r6,#(___str_31 >> 8)
      003765 7F 80            [12] 9861 	mov	r7,#0x80
                                   9862 ;	calc.c:51: return;
      003767                       9863 00194$:
                                   9864 ;	calc.c:49: for (; *s; s++) putchar(*s);
      003767 8D 82            [24] 9865 	mov	dpl,r5
      003769 8E 83            [24] 9866 	mov	dph,r6
      00376B 8F F0            [24] 9867 	mov	b,r7
      00376D 12r00r00         [24] 9868 	lcall	__gptrget
      003770 FC               [12] 9869 	mov	r4,a
      003771 60 10            [24] 9870 	jz	00122$
      003773 7B 00            [12] 9871 	mov	r3,#0x00
      003775 8C 82            [24] 9872 	mov	dpl,r4
      003777 8B 83            [24] 9873 	mov	dph,r3
      003779 12r00r00         [24] 9874 	lcall	_putchar
      00377C 0D               [12] 9875 	inc	r5
                                   9876 ;	calc.c:435: printstr("U\tcopy top secondary -> primary\r\n");
      00377D BD 00 E7         [24] 9877 	cjne	r5,#0x00,00194$
      003780 0E               [12] 9878 	inc	r6
      003781 80 E4            [24] 9879 	sjmp	00194$
      003783                       9880 00122$:
                                   9881 ;	calc.c:436: printstr("u\tcopy top primary -> secondary\r\n");
      003783 7Dr10            [12] 9882 	mov	r5,#___str_32
      003785 7Es02            [12] 9883 	mov	r6,#(___str_32 >> 8)
      003787 7F 80            [12] 9884 	mov	r7,#0x80
                                   9885 ;	calc.c:51: return;
      003789                       9886 00197$:
                                   9887 ;	calc.c:49: for (; *s; s++) putchar(*s);
      003789 8D 82            [24] 9888 	mov	dpl,r5
      00378B 8E 83            [24] 9889 	mov	dph,r6
      00378D 8F F0            [24] 9890 	mov	b,r7
      00378F 12r00r00         [24] 9891 	lcall	__gptrget
      003792 FC               [12] 9892 	mov	r4,a
      003793 60 10            [24] 9893 	jz	00124$
      003795 7B 00            [12] 9894 	mov	r3,#0x00
      003797 8C 82            [24] 9895 	mov	dpl,r4
      003799 8B 83            [24] 9896 	mov	dph,r3
      00379B 12r00r00         [24] 9897 	lcall	_putchar
      00379E 0D               [12] 9898 	inc	r5
                                   9899 ;	calc.c:436: printstr("u\tcopy top primary -> secondary\r\n");
      00379F BD 00 E7         [24] 9900 	cjne	r5,#0x00,00197$
      0037A2 0E               [12] 9901 	inc	r6
      0037A3 80 E4            [24] 9902 	sjmp	00197$
      0037A5                       9903 00124$:
                                   9904 ;	calc.c:437: printstr("M\tmove top secondary -> primary\r\n");
      0037A5 7Dr32            [12] 9905 	mov	r5,#___str_33
      0037A7 7Es02            [12] 9906 	mov	r6,#(___str_33 >> 8)
      0037A9 7F 80            [12] 9907 	mov	r7,#0x80
                                   9908 ;	calc.c:51: return;
      0037AB                       9909 00200$:
                                   9910 ;	calc.c:49: for (; *s; s++) putchar(*s);
      0037AB 8D 82            [24] 9911 	mov	dpl,r5
      0037AD 8E 83            [24] 9912 	mov	dph,r6
      0037AF 8F F0            [24] 9913 	mov	b,r7
      0037B1 12r00r00         [24] 9914 	lcall	__gptrget
      0037B4 FC               [12] 9915 	mov	r4,a
      0037B5 60 10            [24] 9916 	jz	00126$
      0037B7 7B 00            [12] 9917 	mov	r3,#0x00
      0037B9 8C 82            [24] 9918 	mov	dpl,r4
      0037BB 8B 83            [24] 9919 	mov	dph,r3
      0037BD 12r00r00         [24] 9920 	lcall	_putchar
      0037C0 0D               [12] 9921 	inc	r5
                                   9922 ;	calc.c:437: printstr("M\tmove top secondary -> primary\r\n");
      0037C1 BD 00 E7         [24] 9923 	cjne	r5,#0x00,00200$
      0037C4 0E               [12] 9924 	inc	r6
      0037C5 80 E4            [24] 9925 	sjmp	00200$
      0037C7                       9926 00126$:
                                   9927 ;	calc.c:438: printstr("m\tmove top primary -> secondary\r\n");
      0037C7 7Dr54            [12] 9928 	mov	r5,#___str_34
      0037C9 7Es02            [12] 9929 	mov	r6,#(___str_34 >> 8)
      0037CB 7F 80            [12] 9930 	mov	r7,#0x80
                                   9931 ;	calc.c:51: return;
      0037CD                       9932 00203$:
                                   9933 ;	calc.c:49: for (; *s; s++) putchar(*s);
      0037CD 8D 82            [24] 9934 	mov	dpl,r5
      0037CF 8E 83            [24] 9935 	mov	dph,r6
      0037D1 8F F0            [24] 9936 	mov	b,r7
      0037D3 12r00r00         [24] 9937 	lcall	__gptrget
      0037D6 FC               [12] 9938 	mov	r4,a
      0037D7 60 10            [24] 9939 	jz	00128$
      0037D9 7B 00            [12] 9940 	mov	r3,#0x00
      0037DB 8C 82            [24] 9941 	mov	dpl,r4
      0037DD 8B 83            [24] 9942 	mov	dph,r3
      0037DF 12r00r00         [24] 9943 	lcall	_putchar
      0037E2 0D               [12] 9944 	inc	r5
                                   9945 ;	calc.c:438: printstr("m\tmove top primary -> secondary\r\n");
      0037E3 BD 00 E7         [24] 9946 	cjne	r5,#0x00,00203$
      0037E6 0E               [12] 9947 	inc	r6
      0037E7 80 E4            [24] 9948 	sjmp	00203$
      0037E9                       9949 00128$:
                                   9950 ;	calc.c:439: printstr("+\tadd top 2\r\n");
      0037E9 7Dr76            [12] 9951 	mov	r5,#___str_35
      0037EB 7Es02            [12] 9952 	mov	r6,#(___str_35 >> 8)
      0037ED 7F 80            [12] 9953 	mov	r7,#0x80
                                   9954 ;	calc.c:51: return;
      0037EF                       9955 00206$:
                                   9956 ;	calc.c:49: for (; *s; s++) putchar(*s);
      0037EF 8D 82            [24] 9957 	mov	dpl,r5
      0037F1 8E 83            [24] 9958 	mov	dph,r6
      0037F3 8F F0            [24] 9959 	mov	b,r7
      0037F5 12r00r00         [24] 9960 	lcall	__gptrget
      0037F8 FC               [12] 9961 	mov	r4,a
      0037F9 60 10            [24] 9962 	jz	00130$
      0037FB 7B 00            [12] 9963 	mov	r3,#0x00
      0037FD 8C 82            [24] 9964 	mov	dpl,r4
      0037FF 8B 83            [24] 9965 	mov	dph,r3
      003801 12r00r00         [24] 9966 	lcall	_putchar
      003804 0D               [12] 9967 	inc	r5
                                   9968 ;	calc.c:439: printstr("+\tadd top 2\r\n");
      003805 BD 00 E7         [24] 9969 	cjne	r5,#0x00,00206$
      003808 0E               [12] 9970 	inc	r6
      003809 80 E4            [24] 9971 	sjmp	00206$
      00380B                       9972 00130$:
                                   9973 ;	calc.c:440: printstr("-\tsubtract top 2\r\n");
      00380B 7Dr84            [12] 9974 	mov	r5,#___str_36
      00380D 7Es02            [12] 9975 	mov	r6,#(___str_36 >> 8)
      00380F 7F 80            [12] 9976 	mov	r7,#0x80
                                   9977 ;	calc.c:51: return;
      003811                       9978 00209$:
                                   9979 ;	calc.c:49: for (; *s; s++) putchar(*s);
      003811 8D 82            [24] 9980 	mov	dpl,r5
      003813 8E 83            [24] 9981 	mov	dph,r6
      003815 8F F0            [24] 9982 	mov	b,r7
      003817 12r00r00         [24] 9983 	lcall	__gptrget
      00381A FC               [12] 9984 	mov	r4,a
      00381B 60 10            [24] 9985 	jz	00132$
      00381D 7B 00            [12] 9986 	mov	r3,#0x00
      00381F 8C 82            [24] 9987 	mov	dpl,r4
      003821 8B 83            [24] 9988 	mov	dph,r3
      003823 12r00r00         [24] 9989 	lcall	_putchar
      003826 0D               [12] 9990 	inc	r5
                                   9991 ;	calc.c:440: printstr("-\tsubtract top 2\r\n");
      003827 BD 00 E7         [24] 9992 	cjne	r5,#0x00,00209$
      00382A 0E               [12] 9993 	inc	r6
      00382B 80 E4            [24] 9994 	sjmp	00209$
      00382D                       9995 00132$:
                                   9996 ;	calc.c:441: printstr("*\tmultiply top 2\r\n");
      00382D 7Dr97            [12] 9997 	mov	r5,#___str_37
      00382F 7Es02            [12] 9998 	mov	r6,#(___str_37 >> 8)
      003831 7F 80            [12] 9999 	mov	r7,#0x80
                                  10000 ;	calc.c:51: return;
      003833                      10001 00212$:
                                  10002 ;	calc.c:49: for (; *s; s++) putchar(*s);
      003833 8D 82            [24]10003 	mov	dpl,r5
      003835 8E 83            [24]10004 	mov	dph,r6
      003837 8F F0            [24]10005 	mov	b,r7
      003839 12r00r00         [24]10006 	lcall	__gptrget
      00383C FC               [12]10007 	mov	r4,a
      00383D 60 10            [24]10008 	jz	00134$
      00383F 7B 00            [12]10009 	mov	r3,#0x00
      003841 8C 82            [24]10010 	mov	dpl,r4
      003843 8B 83            [24]10011 	mov	dph,r3
      003845 12r00r00         [24]10012 	lcall	_putchar
      003848 0D               [12]10013 	inc	r5
                                  10014 ;	calc.c:441: printstr("*\tmultiply top 2\r\n");
      003849 BD 00 E7         [24]10015 	cjne	r5,#0x00,00212$
      00384C 0E               [12]10016 	inc	r6
      00384D 80 E4            [24]10017 	sjmp	00212$
      00384F                      10018 00134$:
                                  10019 ;	calc.c:442: printstr("/\tdivide top 2\r\n");
      00384F 7DrAA            [12]10020 	mov	r5,#___str_38
      003851 7Es02            [12]10021 	mov	r6,#(___str_38 >> 8)
      003853 7F 80            [12]10022 	mov	r7,#0x80
                                  10023 ;	calc.c:51: return;
      003855                      10024 00215$:
                                  10025 ;	calc.c:49: for (; *s; s++) putchar(*s);
      003855 8D 82            [24]10026 	mov	dpl,r5
      003857 8E 83            [24]10027 	mov	dph,r6
      003859 8F F0            [24]10028 	mov	b,r7
      00385B 12r00r00         [24]10029 	lcall	__gptrget
      00385E FC               [12]10030 	mov	r4,a
      00385F 60 10            [24]10031 	jz	00136$
      003861 7B 00            [12]10032 	mov	r3,#0x00
      003863 8C 82            [24]10033 	mov	dpl,r4
      003865 8B 83            [24]10034 	mov	dph,r3
      003867 12r00r00         [24]10035 	lcall	_putchar
      00386A 0D               [12]10036 	inc	r5
                                  10037 ;	calc.c:442: printstr("/\tdivide top 2\r\n");
      00386B BD 00 E7         [24]10038 	cjne	r5,#0x00,00215$
      00386E 0E               [12]10039 	inc	r6
      00386F 80 E4            [24]10040 	sjmp	00215$
      003871                      10041 00136$:
                                  10042 ;	calc.c:443: printstr("\\\tdivide top 2 unsigned\r\n");	
      003871 7DrBB            [12]10043 	mov	r5,#___str_39
      003873 7Es02            [12]10044 	mov	r6,#(___str_39 >> 8)
      003875 7F 80            [12]10045 	mov	r7,#0x80
                                  10046 ;	calc.c:51: return;
      003877                      10047 00218$:
                                  10048 ;	calc.c:49: for (; *s; s++) putchar(*s);
      003877 8D 82            [24]10049 	mov	dpl,r5
      003879 8E 83            [24]10050 	mov	dph,r6
      00387B 8F F0            [24]10051 	mov	b,r7
      00387D 12r00r00         [24]10052 	lcall	__gptrget
      003880 FC               [12]10053 	mov	r4,a
      003881 60 10            [24]10054 	jz	00138$
      003883 7B 00            [12]10055 	mov	r3,#0x00
      003885 8C 82            [24]10056 	mov	dpl,r4
      003887 8B 83            [24]10057 	mov	dph,r3
      003889 12r00r00         [24]10058 	lcall	_putchar
      00388C 0D               [12]10059 	inc	r5
                                  10060 ;	calc.c:443: printstr("\\\tdivide top 2 unsigned\r\n");	
      00388D BD 00 E7         [24]10061 	cjne	r5,#0x00,00218$
      003890 0E               [12]10062 	inc	r6
      003891 80 E4            [24]10063 	sjmp	00218$
      003893                      10064 00138$:
                                  10065 ;	calc.c:444: printstr("%\tmodulus top 2\r\n");
      003893 7DrD5            [12]10066 	mov	r5,#___str_40
      003895 7Es02            [12]10067 	mov	r6,#(___str_40 >> 8)
      003897 7F 80            [12]10068 	mov	r7,#0x80
                                  10069 ;	calc.c:51: return;
      003899                      10070 00221$:
                                  10071 ;	calc.c:49: for (; *s; s++) putchar(*s);
      003899 8D 82            [24]10072 	mov	dpl,r5
      00389B 8E 83            [24]10073 	mov	dph,r6
      00389D 8F F0            [24]10074 	mov	b,r7
      00389F 12r00r00         [24]10075 	lcall	__gptrget
      0038A2 FC               [12]10076 	mov	r4,a
      0038A3 60 10            [24]10077 	jz	00140$
      0038A5 7B 00            [12]10078 	mov	r3,#0x00
      0038A7 8C 82            [24]10079 	mov	dpl,r4
      0038A9 8B 83            [24]10080 	mov	dph,r3
      0038AB 12r00r00         [24]10081 	lcall	_putchar
      0038AE 0D               [12]10082 	inc	r5
                                  10083 ;	calc.c:444: printstr("%\tmodulus top 2\r\n");
      0038AF BD 00 E7         [24]10084 	cjne	r5,#0x00,00221$
      0038B2 0E               [12]10085 	inc	r6
      0038B3 80 E4            [24]10086 	sjmp	00221$
      0038B5                      10087 00140$:
                                  10088 ;	calc.c:445: printstr("#\tmodulus top 2 unsigned\r\n");
      0038B5 7DrE7            [12]10089 	mov	r5,#___str_41
      0038B7 7Es02            [12]10090 	mov	r6,#(___str_41 >> 8)
      0038B9 7F 80            [12]10091 	mov	r7,#0x80
                                  10092 ;	calc.c:51: return;
      0038BB                      10093 00224$:
                                  10094 ;	calc.c:49: for (; *s; s++) putchar(*s);
      0038BB 8D 82            [24]10095 	mov	dpl,r5
      0038BD 8E 83            [24]10096 	mov	dph,r6
      0038BF 8F F0            [24]10097 	mov	b,r7
      0038C1 12r00r00         [24]10098 	lcall	__gptrget
      0038C4 FC               [12]10099 	mov	r4,a
      0038C5 60 10            [24]10100 	jz	00142$
      0038C7 7B 00            [12]10101 	mov	r3,#0x00
      0038C9 8C 82            [24]10102 	mov	dpl,r4
      0038CB 8B 83            [24]10103 	mov	dph,r3
      0038CD 12r00r00         [24]10104 	lcall	_putchar
      0038D0 0D               [12]10105 	inc	r5
                                  10106 ;	calc.c:445: printstr("#\tmodulus top 2 unsigned\r\n");
      0038D1 BD 00 E7         [24]10107 	cjne	r5,#0x00,00224$
      0038D4 0E               [12]10108 	inc	r6
      0038D5 80 E4            [24]10109 	sjmp	00224$
      0038D7                      10110 00142$:
                                  10111 ;	calc.c:446: printstr("&\tand top 2\r\n");
      0038D7 7Dr02            [12]10112 	mov	r5,#___str_42
      0038D9 7Es03            [12]10113 	mov	r6,#(___str_42 >> 8)
      0038DB 7F 80            [12]10114 	mov	r7,#0x80
                                  10115 ;	calc.c:51: return;
      0038DD                      10116 00227$:
                                  10117 ;	calc.c:49: for (; *s; s++) putchar(*s);
      0038DD 8D 82            [24]10118 	mov	dpl,r5
      0038DF 8E 83            [24]10119 	mov	dph,r6
      0038E1 8F F0            [24]10120 	mov	b,r7
      0038E3 12r00r00         [24]10121 	lcall	__gptrget
      0038E6 FC               [12]10122 	mov	r4,a
      0038E7 60 10            [24]10123 	jz	00144$
      0038E9 7B 00            [12]10124 	mov	r3,#0x00
      0038EB 8C 82            [24]10125 	mov	dpl,r4
      0038ED 8B 83            [24]10126 	mov	dph,r3
      0038EF 12r00r00         [24]10127 	lcall	_putchar
      0038F2 0D               [12]10128 	inc	r5
                                  10129 ;	calc.c:446: printstr("&\tand top 2\r\n");
      0038F3 BD 00 E7         [24]10130 	cjne	r5,#0x00,00227$
      0038F6 0E               [12]10131 	inc	r6
      0038F7 80 E4            [24]10132 	sjmp	00227$
      0038F9                      10133 00144$:
                                  10134 ;	calc.c:447: printstr("|\tor top 2\r\n");
      0038F9 7Dr10            [12]10135 	mov	r5,#___str_43
      0038FB 7Es03            [12]10136 	mov	r6,#(___str_43 >> 8)
      0038FD 7F 80            [12]10137 	mov	r7,#0x80
                                  10138 ;	calc.c:51: return;
      0038FF                      10139 00230$:
                                  10140 ;	calc.c:49: for (; *s; s++) putchar(*s);
      0038FF 8D 82            [24]10141 	mov	dpl,r5
      003901 8E 83            [24]10142 	mov	dph,r6
      003903 8F F0            [24]10143 	mov	b,r7
      003905 12r00r00         [24]10144 	lcall	__gptrget
      003908 FC               [12]10145 	mov	r4,a
      003909 60 10            [24]10146 	jz	00146$
      00390B 7B 00            [12]10147 	mov	r3,#0x00
      00390D 8C 82            [24]10148 	mov	dpl,r4
      00390F 8B 83            [24]10149 	mov	dph,r3
      003911 12r00r00         [24]10150 	lcall	_putchar
      003914 0D               [12]10151 	inc	r5
                                  10152 ;	calc.c:447: printstr("|\tor top 2\r\n");
      003915 BD 00 E7         [24]10153 	cjne	r5,#0x00,00230$
      003918 0E               [12]10154 	inc	r6
      003919 80 E4            [24]10155 	sjmp	00230$
      00391B                      10156 00146$:
                                  10157 ;	calc.c:448: printstr("^\txor top 2\r\n");
      00391B 7Dr1D            [12]10158 	mov	r5,#___str_44
      00391D 7Es03            [12]10159 	mov	r6,#(___str_44 >> 8)
      00391F 7F 80            [12]10160 	mov	r7,#0x80
                                  10161 ;	calc.c:51: return;
      003921                      10162 00233$:
                                  10163 ;	calc.c:49: for (; *s; s++) putchar(*s);
      003921 8D 82            [24]10164 	mov	dpl,r5
      003923 8E 83            [24]10165 	mov	dph,r6
      003925 8F F0            [24]10166 	mov	b,r7
      003927 12r00r00         [24]10167 	lcall	__gptrget
      00392A FC               [12]10168 	mov	r4,a
      00392B 60 10            [24]10169 	jz	00148$
      00392D 7B 00            [12]10170 	mov	r3,#0x00
      00392F 8C 82            [24]10171 	mov	dpl,r4
      003931 8B 83            [24]10172 	mov	dph,r3
      003933 12r00r00         [24]10173 	lcall	_putchar
      003936 0D               [12]10174 	inc	r5
                                  10175 ;	calc.c:448: printstr("^\txor top 2\r\n");
      003937 BD 00 E7         [24]10176 	cjne	r5,#0x00,00233$
      00393A 0E               [12]10177 	inc	r6
      00393B 80 E4            [24]10178 	sjmp	00233$
      00393D                      10179 00148$:
                                  10180 ;	calc.c:449: printstr(">\tshift right top 2\r\n");
      00393D 7Dr2B            [12]10181 	mov	r5,#___str_45
      00393F 7Es03            [12]10182 	mov	r6,#(___str_45 >> 8)
      003941 7F 80            [12]10183 	mov	r7,#0x80
                                  10184 ;	calc.c:51: return;
      003943                      10185 00236$:
                                  10186 ;	calc.c:49: for (; *s; s++) putchar(*s);
      003943 8D 82            [24]10187 	mov	dpl,r5
      003945 8E 83            [24]10188 	mov	dph,r6
      003947 8F F0            [24]10189 	mov	b,r7
      003949 12r00r00         [24]10190 	lcall	__gptrget
      00394C FC               [12]10191 	mov	r4,a
      00394D 60 10            [24]10192 	jz	00150$
      00394F 7B 00            [12]10193 	mov	r3,#0x00
      003951 8C 82            [24]10194 	mov	dpl,r4
      003953 8B 83            [24]10195 	mov	dph,r3
      003955 12r00r00         [24]10196 	lcall	_putchar
      003958 0D               [12]10197 	inc	r5
                                  10198 ;	calc.c:449: printstr(">\tshift right top 2\r\n");
      003959 BD 00 E7         [24]10199 	cjne	r5,#0x00,00236$
      00395C 0E               [12]10200 	inc	r6
      00395D 80 E4            [24]10201 	sjmp	00236$
      00395F                      10202 00150$:
                                  10203 ;	calc.c:450: printstr("]\tarithmetic shift right top 2\r\n");
      00395F 7Dr41            [12]10204 	mov	r5,#___str_46
      003961 7Es03            [12]10205 	mov	r6,#(___str_46 >> 8)
      003963 7F 80            [12]10206 	mov	r7,#0x80
                                  10207 ;	calc.c:51: return;
      003965                      10208 00239$:
                                  10209 ;	calc.c:49: for (; *s; s++) putchar(*s);
      003965 8D 82            [24]10210 	mov	dpl,r5
      003967 8E 83            [24]10211 	mov	dph,r6
      003969 8F F0            [24]10212 	mov	b,r7
      00396B 12r00r00         [24]10213 	lcall	__gptrget
      00396E FC               [12]10214 	mov	r4,a
      00396F 60 10            [24]10215 	jz	00152$
      003971 7B 00            [12]10216 	mov	r3,#0x00
      003973 8C 82            [24]10217 	mov	dpl,r4
      003975 8B 83            [24]10218 	mov	dph,r3
      003977 12r00r00         [24]10219 	lcall	_putchar
      00397A 0D               [12]10220 	inc	r5
                                  10221 ;	calc.c:450: printstr("]\tarithmetic shift right top 2\r\n");
      00397B BD 00 E7         [24]10222 	cjne	r5,#0x00,00239$
      00397E 0E               [12]10223 	inc	r6
      00397F 80 E4            [24]10224 	sjmp	00239$
      003981                      10225 00152$:
                                  10226 ;	calc.c:451: printstr("<\tshift left top 2\r\n");
      003981 7Dr62            [12]10227 	mov	r5,#___str_47
      003983 7Es03            [12]10228 	mov	r6,#(___str_47 >> 8)
      003985 7F 80            [12]10229 	mov	r7,#0x80
                                  10230 ;	calc.c:51: return;
      003987                      10231 00242$:
                                  10232 ;	calc.c:49: for (; *s; s++) putchar(*s);
      003987 8D 82            [24]10233 	mov	dpl,r5
      003989 8E 83            [24]10234 	mov	dph,r6
      00398B 8F F0            [24]10235 	mov	b,r7
      00398D 12r00r00         [24]10236 	lcall	__gptrget
      003990 FC               [12]10237 	mov	r4,a
      003991 60 10            [24]10238 	jz	00154$
      003993 7B 00            [12]10239 	mov	r3,#0x00
      003995 8C 82            [24]10240 	mov	dpl,r4
      003997 8B 83            [24]10241 	mov	dph,r3
      003999 12r00r00         [24]10242 	lcall	_putchar
      00399C 0D               [12]10243 	inc	r5
                                  10244 ;	calc.c:451: printstr("<\tshift left top 2\r\n");
      00399D BD 00 E7         [24]10245 	cjne	r5,#0x00,00242$
      0039A0 0E               [12]10246 	inc	r6
      0039A1 80 E4            [24]10247 	sjmp	00242$
      0039A3                      10248 00154$:
                                  10249 ;	calc.c:452: printstr("~\tbitwise not top\r\n");
      0039A3 7Dr77            [12]10250 	mov	r5,#___str_48
      0039A5 7Es03            [12]10251 	mov	r6,#(___str_48 >> 8)
      0039A7 7F 80            [12]10252 	mov	r7,#0x80
                                  10253 ;	calc.c:51: return;
      0039A9                      10254 00245$:
                                  10255 ;	calc.c:49: for (; *s; s++) putchar(*s);
      0039A9 8D 82            [24]10256 	mov	dpl,r5
      0039AB 8E 83            [24]10257 	mov	dph,r6
      0039AD 8F F0            [24]10258 	mov	b,r7
      0039AF 12r00r00         [24]10259 	lcall	__gptrget
      0039B2 FC               [12]10260 	mov	r4,a
      0039B3 60 10            [24]10261 	jz	00156$
      0039B5 7B 00            [12]10262 	mov	r3,#0x00
      0039B7 8C 82            [24]10263 	mov	dpl,r4
      0039B9 8B 83            [24]10264 	mov	dph,r3
      0039BB 12r00r00         [24]10265 	lcall	_putchar
      0039BE 0D               [12]10266 	inc	r5
                                  10267 ;	calc.c:452: printstr("~\tbitwise not top\r\n");
      0039BF BD 00 E7         [24]10268 	cjne	r5,#0x00,00245$
      0039C2 0E               [12]10269 	inc	r6
      0039C3 80 E4            [24]10270 	sjmp	00245$
      0039C5                      10271 00156$:
                                  10272 ;	calc.c:453: printstr("s\tstatus\r\n");
      0039C5 7Dr8B            [12]10273 	mov	r5,#___str_49
      0039C7 7Es03            [12]10274 	mov	r6,#(___str_49 >> 8)
      0039C9 7F 80            [12]10275 	mov	r7,#0x80
                                  10276 ;	calc.c:51: return;
      0039CB                      10277 00248$:
                                  10278 ;	calc.c:49: for (; *s; s++) putchar(*s);
      0039CB 8D 82            [24]10279 	mov	dpl,r5
      0039CD 8E 83            [24]10280 	mov	dph,r6
      0039CF 8F F0            [24]10281 	mov	b,r7
      0039D1 12r00r00         [24]10282 	lcall	__gptrget
      0039D4 FC               [12]10283 	mov	r4,a
      0039D5 60 10            [24]10284 	jz	00158$
      0039D7 7B 00            [12]10285 	mov	r3,#0x00
      0039D9 8C 82            [24]10286 	mov	dpl,r4
      0039DB 8B 83            [24]10287 	mov	dph,r3
      0039DD 12r00r00         [24]10288 	lcall	_putchar
      0039E0 0D               [12]10289 	inc	r5
                                  10290 ;	calc.c:453: printstr("s\tstatus\r\n");
      0039E1 BD 00 E7         [24]10291 	cjne	r5,#0x00,00248$
      0039E4 0E               [12]10292 	inc	r6
      0039E5 80 E4            [24]10293 	sjmp	00248$
      0039E7                      10294 00158$:
                                  10295 ;	calc.c:454: printstr("?\thelp\r\n");
      0039E7 7Dr96            [12]10296 	mov	r5,#___str_50
      0039E9 7Es03            [12]10297 	mov	r6,#(___str_50 >> 8)
      0039EB 7F 80            [12]10298 	mov	r7,#0x80
                                  10299 ;	calc.c:51: return;
      0039ED                      10300 00251$:
                                  10301 ;	calc.c:49: for (; *s; s++) putchar(*s);
      0039ED 8D 82            [24]10302 	mov	dpl,r5
      0039EF 8E 83            [24]10303 	mov	dph,r6
      0039F1 8F F0            [24]10304 	mov	b,r7
      0039F3 12r00r00         [24]10305 	lcall	__gptrget
      0039F6 FC               [12]10306 	mov	r4,a
      0039F7 60 10            [24]10307 	jz	00160$
      0039F9 7B 00            [12]10308 	mov	r3,#0x00
      0039FB 8C 82            [24]10309 	mov	dpl,r4
      0039FD 8B 83            [24]10310 	mov	dph,r3
      0039FF 12r00r00         [24]10311 	lcall	_putchar
      003A02 0D               [12]10312 	inc	r5
                                  10313 ;	calc.c:454: printstr("?\thelp\r\n");
      003A03 BD 00 E7         [24]10314 	cjne	r5,#0x00,00251$
      003A06 0E               [12]10315 	inc	r6
      003A07 80 E4            [24]10316 	sjmp	00251$
      003A09                      10317 00160$:
                                  10318 ;	calc.c:455: printstr("q\tquit\r\n");
      003A09 7Dr9F            [12]10319 	mov	r5,#___str_51
      003A0B 7Es03            [12]10320 	mov	r6,#(___str_51 >> 8)
      003A0D 7F 80            [12]10321 	mov	r7,#0x80
                                  10322 ;	calc.c:51: return;
      003A0F                      10323 00254$:
                                  10324 ;	calc.c:49: for (; *s; s++) putchar(*s);
      003A0F 8D 82            [24]10325 	mov	dpl,r5
      003A11 8E 83            [24]10326 	mov	dph,r6
      003A13 8F F0            [24]10327 	mov	b,r7
      003A15 12r00r00         [24]10328 	lcall	__gptrget
      003A18 FC               [12]10329 	mov	r4,a
      003A19 60 10            [24]10330 	jz	00162$
      003A1B 7B 00            [12]10331 	mov	r3,#0x00
      003A1D 8C 82            [24]10332 	mov	dpl,r4
      003A1F 8B 83            [24]10333 	mov	dph,r3
      003A21 12r00r00         [24]10334 	lcall	_putchar
      003A24 0D               [12]10335 	inc	r5
                                  10336 ;	calc.c:455: printstr("q\tquit\r\n");
      003A25 BD 00 E7         [24]10337 	cjne	r5,#0x00,00254$
      003A28 0E               [12]10338 	inc	r6
      003A29 80 E4            [24]10339 	sjmp	00254$
      003A2B                      10340 00162$:
                                  10341 ;	calc.c:457: return 1;
      003A2B 90 00 01         [24]10342 	mov	dptr,#0x0001
                                  10343 ;	calc.c:458: }
      003A2E D0*00            [24]10344 	pop	_bp
      003A30 22               [24]10345 	ret
                                  10346 ;------------------------------------------------------------
                                  10347 ;Allocation info for local variables in function 'main'
                                  10348 ;------------------------------------------------------------
                                  10349 ;input                     Allocated to registers r6 r7 
                                  10350 ;__1966080213              Allocated to registers 
                                  10351 ;s                         Allocated to registers r2 r3 r4 
                                  10352 ;__1310720215              Allocated to registers 
                                  10353 ;s                         Allocated to registers r5 r6 r7 
                                  10354 ;sloc0                     Allocated to stack - _bp +1
                                  10355 ;------------------------------------------------------------
                                  10356 ;	calc.c:488: void main(void) {
                                  10357 ;	-----------------------------------------
                                  10358 ;	 function main
                                  10359 ;	-----------------------------------------
      003A31                      10360 _main:
      003A31 C0*00            [24]10361 	push	_bp
      003A33 85 81*00         [24]10362 	mov	_bp,sp
      003A36 05 81            [12]10363 	inc	sp
                                  10364 ;	calc.c:491: c.base = 10;
      003A38 90r00r0C         [24]10365 	mov	dptr,#_c
      003A3B 74 0A            [12]10366 	mov	a,#0x0a
      003A3D F0               [24]10367 	movx	@dptr,a
      003A3E E4               [12]10368 	clr	a
      003A3F A3               [24]10369 	inc	dptr
      003A40 F0               [24]10370 	movx	@dptr,a
                                  10371 ;	calc.c:492: c.acc = 0l;
      003A41 90r00r0E         [24]10372 	mov	dptr,#(_c + 0x0002)
      003A44 F0               [24]10373 	movx	@dptr,a
      003A45 A3               [24]10374 	inc	dptr
      003A46 F0               [24]10375 	movx	@dptr,a
      003A47 A3               [24]10376 	inc	dptr
      003A48 F0               [24]10377 	movx	@dptr,a
      003A49 A3               [24]10378 	inc	dptr
      003A4A F0               [24]10379 	movx	@dptr,a
                                  10380 ;	calc.c:493: c.acc_valid = (char)0;
      003A4B 90r00r12         [24]10381 	mov	dptr,#(_c + 0x0006)
      003A4E F0               [24]10382 	movx	@dptr,a
                                  10383 ;	calc.c:494: c.digit[0] = c.digit[1] = '\0';
      003A4F 90r00r14         [24]10384 	mov	dptr,#(_c + 0x0008)
      003A52 F0               [24]10385 	movx	@dptr,a
      003A53 90r00r13         [24]10386 	mov	dptr,#(_c + 0x0007)
      003A56 F0               [24]10387 	movx	@dptr,a
                                  10388 ;	calc.c:496: c.ps = &c.s0;
      003A57 90r40r1F         [24]10389 	mov	dptr,#(_c + 0x4013)
      003A5A 74r15            [12]10390 	mov	a,#(_c + 0x0009)
      003A5C F0               [24]10391 	movx	@dptr,a
      003A5D 74s00            [12]10392 	mov	a,#((_c + 0x0009) >> 8)
      003A5F A3               [24]10393 	inc	dptr
      003A60 F0               [24]10394 	movx	@dptr,a
      003A61 E4               [12]10395 	clr	a
      003A62 A3               [24]10396 	inc	dptr
      003A63 F0               [24]10397 	movx	@dptr,a
                                  10398 ;	calc.c:497: c.ss = &c.s1;
      003A64 90r40r22         [24]10399 	mov	dptr,#(_c + 0x4016)
      003A67 74r1A            [12]10400 	mov	a,#(_c + 0x200e)
      003A69 F0               [24]10401 	movx	@dptr,a
      003A6A 74s20            [12]10402 	mov	a,#((_c + 0x200e) >> 8)
      003A6C A3               [24]10403 	inc	dptr
      003A6D F0               [24]10404 	movx	@dptr,a
      003A6E E4               [12]10405 	clr	a
      003A6F A3               [24]10406 	inc	dptr
      003A70 F0               [24]10407 	movx	@dptr,a
                                  10408 ;	calc.c:498: stack_init(c.ps);
      003A71 90r00r15         [24]10409 	mov	dptr,#(_c + 0x0009)
      003A74 75 F0 00         [24]10410 	mov	b,#0x00
      003A77 12r00r00         [24]10411 	lcall	_stack_init
                                  10412 ;	calc.c:499: stack_init(c.ss);
      003A7A 90r40r22         [24]10413 	mov	dptr,#(_c + 0x4016)
      003A7D E0               [24]10414 	movx	a,@dptr
      003A7E FD               [12]10415 	mov	r5,a
      003A7F A3               [24]10416 	inc	dptr
      003A80 E0               [24]10417 	movx	a,@dptr
      003A81 FE               [12]10418 	mov	r6,a
      003A82 A3               [24]10419 	inc	dptr
      003A83 E0               [24]10420 	movx	a,@dptr
      003A84 FF               [12]10421 	mov	r7,a
      003A85 8D 82            [24]10422 	mov	dpl,r5
      003A87 8E 83            [24]10423 	mov	dph,r6
      003A89 8F F0            [24]10424 	mov	b,r7
      003A8B 12r00r00         [24]10425 	lcall	_stack_init
                                  10426 ;	calc.c:501: state_init(&s, STATE_START, STATE_FINAL, UNDEF, deltas, &c);
      003A8E 74r0C            [12]10427 	mov	a,#_c
      003A90 C0 E0            [24]10428 	push	acc
      003A92 74s00            [12]10429 	mov	a,#(_c >> 8)
      003A94 C0 E0            [24]10430 	push	acc
      003A96 E4               [12]10431 	clr	a
      003A97 C0 E0            [24]10432 	push	acc
      003A99 74r00            [12]10433 	mov	a,#_deltas
      003A9B C0 E0            [24]10434 	push	acc
      003A9D 74s00            [12]10435 	mov	a,#(_deltas >> 8)
      003A9F C0 E0            [24]10436 	push	acc
      003AA1 E4               [12]10437 	clr	a
      003AA2 C0 E0            [24]10438 	push	acc
      003AA4 C0 E0            [24]10439 	push	acc
      003AA6 74 80            [12]10440 	mov	a,#0x80
      003AA8 C0 E0            [24]10441 	push	acc
      003AAA 74 03            [12]10442 	mov	a,#0x03
      003AAC C0 E0            [24]10443 	push	acc
      003AAE E4               [12]10444 	clr	a
      003AAF C0 E0            [24]10445 	push	acc
      003AB1 C0 E0            [24]10446 	push	acc
      003AB3 C0 E0            [24]10447 	push	acc
      003AB5 90r00r00         [24]10448 	mov	dptr,#_s
      003AB8 75 F0 00         [24]10449 	mov	b,#0x00
      003ABB 12r00r00         [24]10450 	lcall	_state_init
      003ABE E5 81            [12]10451 	mov	a,sp
      003AC0 24 F4            [12]10452 	add	a,#0xf4
      003AC2 F5 81            [12]10453 	mov	sp,a
                                  10454 ;	calc.c:503: (void)status(&c, deltas);
      003AC4 74r00            [12]10455 	mov	a,#_deltas
      003AC6 C0 E0            [24]10456 	push	acc
      003AC8 74s00            [12]10457 	mov	a,#(_deltas >> 8)
      003ACA C0 E0            [24]10458 	push	acc
      003ACC E4               [12]10459 	clr	a
      003ACD C0 E0            [24]10460 	push	acc
      003ACF 90r00r0C         [24]10461 	mov	dptr,#_c
      003AD2 75 F0 00         [24]10462 	mov	b,#0x00
      003AD5 12r2DrA9         [24]10463 	lcall	_status
      003AD8 15 81            [12]10464 	dec	sp
      003ADA 15 81            [12]10465 	dec	sp
      003ADC 15 81            [12]10466 	dec	sp
                                  10467 ;	calc.c:505: while (1) {
      003ADE                      10468 00192$:
                                  10469 ;	calc.c:506: input = getchar();
      003ADE 12r00r05         [24]10470 	lcall	_getchar
      003AE1 AE 82            [24]10471 	mov	r6,dpl
      003AE3 AF 83            [24]10472 	mov	r7,dph
                                  10473 ;	calc.c:507: if (((char)input == '\r') || ((char)input == '\n')) printstr("\r\n");
      003AE5 8E 05            [24]10474 	mov	ar5,r6
      003AE7 BD 0D 02         [24]10475 	cjne	r5,#0x0d,00400$
      003AEA 80 03            [24]10476 	sjmp	00101$
      003AEC                      10477 00400$:
      003AEC BD 0A 36         [24]10478 	cjne	r5,#0x0a,00102$
      003AEF                      10479 00101$:
      003AEF 7Ar17            [12]10480 	mov	r2,#___str_3
      003AF1 7Bs00            [12]10481 	mov	r3,#(___str_3 >> 8)
      003AF3 7C 80            [12]10482 	mov	r4,#0x80
                                  10483 ;	calc.c:51: return;
      003AF5                      10484 00199$:
                                  10485 ;	calc.c:49: for (; *s; s++) putchar(*s);
      003AF5 8A 82            [24]10486 	mov	dpl,r2
      003AF7 8B 83            [24]10487 	mov	dph,r3
      003AF9 8C F0            [24]10488 	mov	b,r4
      003AFB A8*00            [24]10489 	mov	r0,_bp
      003AFD 08               [12]10490 	inc	r0
      003AFE 12r00r00         [24]10491 	lcall	__gptrget
      003B01 F6               [12]10492 	mov	@r0,a
      003B02 A8*00            [24]10493 	mov	r0,_bp
      003B04 08               [12]10494 	inc	r0
      003B05 E6               [12]10495 	mov	a,@r0
      003B06 60 24            [24]10496 	jz	00103$
      003B08 C0 06            [24]10497 	push	ar6
      003B0A C0 07            [24]10498 	push	ar7
      003B0C A8*00            [24]10499 	mov	r0,_bp
      003B0E 08               [12]10500 	inc	r0
      003B0F 86 06            [24]10501 	mov	ar6,@r0
      003B11 7F 00            [12]10502 	mov	r7,#0x00
      003B13 8E 82            [24]10503 	mov	dpl,r6
      003B15 8F 83            [24]10504 	mov	dph,r7
      003B17 12r00r00         [24]10505 	lcall	_putchar
      003B1A 0A               [12]10506 	inc	r2
      003B1B BA 00 01         [24]10507 	cjne	r2,#0x00,00404$
      003B1E 0B               [12]10508 	inc	r3
      003B1F                      10509 00404$:
      003B1F D0 07            [24]10510 	pop	ar7
      003B21 D0 06            [24]10511 	pop	ar6
                                  10512 ;	calc.c:507: if (((char)input == '\r') || ((char)input == '\n')) printstr("\r\n");
      003B23 80 D0            [24]10513 	sjmp	00199$
      003B25                      10514 00102$:
                                  10515 ;	calc.c:508: else (void)putchar(input);
      003B25 8E 82            [24]10516 	mov	dpl,r6
      003B27 8F 83            [24]10517 	mov	dph,r7
      003B29 12r00r00         [24]10518 	lcall	_putchar
      003B2C                      10519 00103$:
                                  10520 ;	calc.c:509: c.digit[0] = (char)input;
      003B2C 90r00r13         [24]10521 	mov	dptr,#(_c + 0x0007)
      003B2F ED               [12]10522 	mov	a,r5
      003B30 F0               [24]10523 	movx	@dptr,a
                                  10524 ;	calc.c:511: if ((char)input == 'q') {
      003B31 BD 71 29         [24]10525 	cjne	r5,#0x71,00189$
                                  10526 ;	calc.c:512: if (state_exec(&s, EVENT_TERM) <= 0) break;
      003B34 74 08            [12]10527 	mov	a,#0x08
      003B36 C0 E0            [24]10528 	push	acc
      003B38 E4               [12]10529 	clr	a
      003B39 C0 E0            [24]10530 	push	acc
      003B3B 90r00r00         [24]10531 	mov	dptr,#_s
      003B3E 75 F0 00         [24]10532 	mov	b,#0x00
      003B41 12r00r00         [24]10533 	lcall	_state_exec
      003B44 AB 82            [24]10534 	mov	r3,dpl
      003B46 AC 83            [24]10535 	mov	r4,dph
      003B48 15 81            [12]10536 	dec	sp
      003B4A 15 81            [12]10537 	dec	sp
      003B4C C3               [12]10538 	clr	c
      003B4D E4               [12]10539 	clr	a
      003B4E 9B               [12]10540 	subb	a,r3
      003B4F 74 80            [12]10541 	mov	a,#(0x00 ^ 0x80)
      003B51 8C F0            [24]10542 	mov	b,r4
      003B53 63 F0 80         [24]10543 	xrl	b,#0x80
      003B56 95 F0            [12]10544 	subb	a,b
      003B58 40 84            [24]10545 	jc	00192$
      003B5A 02r3Er0C         [24]10546 	ljmp	00193$
      003B5D                      10547 00189$:
                                  10548 ;	calc.c:513: } else if ((char)input == 's') {
      003B5D BD 73 2C         [24]10549 	cjne	r5,#0x73,00186$
                                  10550 ;	calc.c:514: if (state_exec(&s, EVENT_STATUS) <= 0) break;
      003B60 74 03            [12]10551 	mov	a,#0x03
      003B62 C0 E0            [24]10552 	push	acc
      003B64 E4               [12]10553 	clr	a
      003B65 C0 E0            [24]10554 	push	acc
      003B67 90r00r00         [24]10555 	mov	dptr,#_s
      003B6A 75 F0 00         [24]10556 	mov	b,#0x00
      003B6D 12r00r00         [24]10557 	lcall	_state_exec
      003B70 AB 82            [24]10558 	mov	r3,dpl
      003B72 AC 83            [24]10559 	mov	r4,dph
      003B74 15 81            [12]10560 	dec	sp
      003B76 15 81            [12]10561 	dec	sp
      003B78 C3               [12]10562 	clr	c
      003B79 E4               [12]10563 	clr	a
      003B7A 9B               [12]10564 	subb	a,r3
      003B7B 74 80            [12]10565 	mov	a,#(0x00 ^ 0x80)
      003B7D 8C F0            [24]10566 	mov	b,r4
      003B7F 63 F0 80         [24]10567 	xrl	b,#0x80
      003B82 95 F0            [12]10568 	subb	a,b
      003B84 50 03            [24]10569 	jnc	00410$
      003B86 02r3ArDE         [24]10570 	ljmp	00192$
      003B89                      10571 00410$:
      003B89 02r3Er0C         [24]10572 	ljmp	00193$
      003B8C                      10573 00186$:
                                  10574 ;	calc.c:515: } else if ((char)input == '?') {
      003B8C BD 3F 2C         [24]10575 	cjne	r5,#0x3f,00183$
                                  10576 ;	calc.c:516: if (state_exec(&s, EVENT_HELP) <= 0) break;
      003B8F 74 04            [12]10577 	mov	a,#0x04
      003B91 C0 E0            [24]10578 	push	acc
      003B93 E4               [12]10579 	clr	a
      003B94 C0 E0            [24]10580 	push	acc
      003B96 90r00r00         [24]10581 	mov	dptr,#_s
      003B99 75 F0 00         [24]10582 	mov	b,#0x00
      003B9C 12r00r00         [24]10583 	lcall	_state_exec
      003B9F AB 82            [24]10584 	mov	r3,dpl
      003BA1 AC 83            [24]10585 	mov	r4,dph
      003BA3 15 81            [12]10586 	dec	sp
      003BA5 15 81            [12]10587 	dec	sp
      003BA7 C3               [12]10588 	clr	c
      003BA8 E4               [12]10589 	clr	a
      003BA9 9B               [12]10590 	subb	a,r3
      003BAA 74 80            [12]10591 	mov	a,#(0x00 ^ 0x80)
      003BAC 8C F0            [24]10592 	mov	b,r4
      003BAE 63 F0 80         [24]10593 	xrl	b,#0x80
      003BB1 95 F0            [12]10594 	subb	a,b
      003BB3 50 03            [24]10595 	jnc	00413$
      003BB5 02r3ArDE         [24]10596 	ljmp	00192$
      003BB8                      10597 00413$:
      003BB8 02r3Er0C         [24]10598 	ljmp	00193$
      003BBB                      10599 00183$:
                                  10600 ;	calc.c:517: } else if ((char)input == 'i') {
      003BBB BD 69 2C         [24]10601 	cjne	r5,#0x69,00180$
                                  10602 ;	calc.c:518: if (state_exec(&s, EVENT_RSTA_i) <= 0) break;
      003BBE 74 06            [12]10603 	mov	a,#0x06
      003BC0 C0 E0            [24]10604 	push	acc
      003BC2 E4               [12]10605 	clr	a
      003BC3 C0 E0            [24]10606 	push	acc
      003BC5 90r00r00         [24]10607 	mov	dptr,#_s
      003BC8 75 F0 00         [24]10608 	mov	b,#0x00
      003BCB 12r00r00         [24]10609 	lcall	_state_exec
      003BCE AB 82            [24]10610 	mov	r3,dpl
      003BD0 AC 83            [24]10611 	mov	r4,dph
      003BD2 15 81            [12]10612 	dec	sp
      003BD4 15 81            [12]10613 	dec	sp
      003BD6 C3               [12]10614 	clr	c
      003BD7 E4               [12]10615 	clr	a
      003BD8 9B               [12]10616 	subb	a,r3
      003BD9 74 80            [12]10617 	mov	a,#(0x00 ^ 0x80)
      003BDB 8C F0            [24]10618 	mov	b,r4
      003BDD 63 F0 80         [24]10619 	xrl	b,#0x80
      003BE0 95 F0            [12]10620 	subb	a,b
      003BE2 50 03            [24]10621 	jnc	00416$
      003BE4 02r3ArDE         [24]10622 	ljmp	00192$
      003BE7                      10623 00416$:
      003BE7 02r3Er0C         [24]10624 	ljmp	00193$
      003BEA                      10625 00180$:
                                  10626 ;	calc.c:519: } else if ((char)input == 'I') {
      003BEA BD 49 2C         [24]10627 	cjne	r5,#0x49,00177$
                                  10628 ;	calc.c:520: if (state_exec(&s, EVENT_RSTA_I) <= 0) break;
      003BED 74 07            [12]10629 	mov	a,#0x07
      003BEF C0 E0            [24]10630 	push	acc
      003BF1 E4               [12]10631 	clr	a
      003BF2 C0 E0            [24]10632 	push	acc
      003BF4 90r00r00         [24]10633 	mov	dptr,#_s
      003BF7 75 F0 00         [24]10634 	mov	b,#0x00
      003BFA 12r00r00         [24]10635 	lcall	_state_exec
      003BFD AB 82            [24]10636 	mov	r3,dpl
      003BFF AC 83            [24]10637 	mov	r4,dph
      003C01 15 81            [12]10638 	dec	sp
      003C03 15 81            [12]10639 	dec	sp
      003C05 C3               [12]10640 	clr	c
      003C06 E4               [12]10641 	clr	a
      003C07 9B               [12]10642 	subb	a,r3
      003C08 74 80            [12]10643 	mov	a,#(0x00 ^ 0x80)
      003C0A 8C F0            [24]10644 	mov	b,r4
      003C0C 63 F0 80         [24]10645 	xrl	b,#0x80
      003C0F 95 F0            [12]10646 	subb	a,b
      003C11 50 03            [24]10647 	jnc	00419$
      003C13 02r3ArDE         [24]10648 	ljmp	00192$
      003C16                      10649 00419$:
      003C16 02r3Er0C         [24]10650 	ljmp	00193$
      003C19                      10651 00177$:
                                  10652 ;	calc.c:522: ((char)input == 'h') || ((char)input == 'H') ||
      003C19 BD 68 02         [24]10653 	cjne	r5,#0x68,00420$
      003C1C 80 0D            [24]10654 	sjmp	00170$
      003C1E                      10655 00420$:
      003C1E BD 48 02         [24]10656 	cjne	r5,#0x48,00421$
      003C21 80 08            [24]10657 	sjmp	00170$
      003C23                      10658 00421$:
                                  10659 ;	calc.c:523: ((char)input == 'o') || ((char)input == 'O')
      003C23 BD 6F 02         [24]10660 	cjne	r5,#0x6f,00422$
      003C26 80 03            [24]10661 	sjmp	00170$
      003C28                      10662 00422$:
      003C28 BD 4F 2C         [24]10663 	cjne	r5,#0x4f,00171$
      003C2B                      10664 00170$:
                                  10665 ;	calc.c:525: if (state_exec(&s, EVENT_BASE) <= 0) break;
      003C2B 74 05            [12]10666 	mov	a,#0x05
      003C2D C0 E0            [24]10667 	push	acc
      003C2F E4               [12]10668 	clr	a
      003C30 C0 E0            [24]10669 	push	acc
      003C32 90r00r00         [24]10670 	mov	dptr,#_s
      003C35 75 F0 00         [24]10671 	mov	b,#0x00
      003C38 12r00r00         [24]10672 	lcall	_state_exec
      003C3B AB 82            [24]10673 	mov	r3,dpl
      003C3D AC 83            [24]10674 	mov	r4,dph
      003C3F 15 81            [12]10675 	dec	sp
      003C41 15 81            [12]10676 	dec	sp
      003C43 C3               [12]10677 	clr	c
      003C44 E4               [12]10678 	clr	a
      003C45 9B               [12]10679 	subb	a,r3
      003C46 74 80            [12]10680 	mov	a,#(0x00 ^ 0x80)
      003C48 8C F0            [24]10681 	mov	b,r4
      003C4A 63 F0 80         [24]10682 	xrl	b,#0x80
      003C4D 95 F0            [12]10683 	subb	a,b
      003C4F 50 03            [24]10684 	jnc	00425$
      003C51 02r3ArDE         [24]10685 	ljmp	00192$
      003C54                      10686 00425$:
      003C54 02r3Er0C         [24]10687 	ljmp	00193$
      003C57                      10688 00171$:
                                  10689 ;	calc.c:526: } else if (isxdigit(input)) {
      003C57 8E 82            [24]10690 	mov	dpl,r6
      003C59 8F 83            [24]10691 	mov	dph,r7
      003C5B C0 05            [24]10692 	push	ar5
      003C5D 12r00r00         [24]10693 	lcall	_isxdigit
      003C60 E5 82            [12]10694 	mov	a,dpl
      003C62 85 83 F0         [24]10695 	mov	b,dph
      003C65 D0 05            [24]10696 	pop	ar5
      003C67 45 F0            [12]10697 	orl	a,b
      003C69 60 2C            [24]10698 	jz	00168$
                                  10699 ;	calc.c:527: if (state_exec(&s, EVENT_DIGIT) <= 0) break;
      003C6B 74 01            [12]10700 	mov	a,#0x01
      003C6D C0 E0            [24]10701 	push	acc
      003C6F E4               [12]10702 	clr	a
      003C70 C0 E0            [24]10703 	push	acc
      003C72 90r00r00         [24]10704 	mov	dptr,#_s
      003C75 75 F0 00         [24]10705 	mov	b,#0x00
      003C78 12r00r00         [24]10706 	lcall	_state_exec
      003C7B AE 82            [24]10707 	mov	r6,dpl
      003C7D AF 83            [24]10708 	mov	r7,dph
      003C7F 15 81            [12]10709 	dec	sp
      003C81 15 81            [12]10710 	dec	sp
      003C83 C3               [12]10711 	clr	c
      003C84 E4               [12]10712 	clr	a
      003C85 9E               [12]10713 	subb	a,r6
      003C86 74 80            [12]10714 	mov	a,#(0x00 ^ 0x80)
      003C88 8F F0            [24]10715 	mov	b,r7
      003C8A 63 F0 80         [24]10716 	xrl	b,#0x80
      003C8D 95 F0            [12]10717 	subb	a,b
      003C8F 50 03            [24]10718 	jnc	00427$
      003C91 02r3ArDE         [24]10719 	ljmp	00192$
      003C94                      10720 00427$:
      003C94 02r3Er0C         [24]10721 	ljmp	00193$
      003C97                      10722 00168$:
                                  10723 ;	calc.c:529: ((char)input == 'p') || ((char)input == 'P') ||
      003C97 BD 70 02         [24]10724 	cjne	r5,#0x70,00428$
      003C9A 80 17            [24]10725 	sjmp	00159$
      003C9C                      10726 00428$:
      003C9C BD 50 02         [24]10727 	cjne	r5,#0x50,00429$
      003C9F 80 12            [24]10728 	sjmp	00159$
      003CA1                      10729 00429$:
                                  10730 ;	calc.c:530: ((char)input == 'v') || ((char)input == 'V') ||
      003CA1 BD 76 02         [24]10731 	cjne	r5,#0x76,00430$
      003CA4 80 0D            [24]10732 	sjmp	00159$
      003CA6                      10733 00430$:
      003CA6 BD 56 02         [24]10734 	cjne	r5,#0x56,00431$
      003CA9 80 08            [24]10735 	sjmp	00159$
      003CAB                      10736 00431$:
                                  10737 ;	calc.c:531: ((char)input == '.') ||
      003CAB BD 2E 02         [24]10738 	cjne	r5,#0x2e,00432$
      003CAE 80 03            [24]10739 	sjmp	00159$
      003CB0                      10740 00432$:
                                  10741 ;	calc.c:532: ((char)input == 'x')
      003CB0 BD 78 2C         [24]10742 	cjne	r5,#0x78,00160$
      003CB3                      10743 00159$:
                                  10744 ;	calc.c:534: if (state_exec(&s, EVENT_OP) <= 0) break;
      003CB3 74 02            [12]10745 	mov	a,#0x02
      003CB5 C0 E0            [24]10746 	push	acc
      003CB7 E4               [12]10747 	clr	a
      003CB8 C0 E0            [24]10748 	push	acc
      003CBA 90r00r00         [24]10749 	mov	dptr,#_s
      003CBD 75 F0 00         [24]10750 	mov	b,#0x00
      003CC0 12r00r00         [24]10751 	lcall	_state_exec
      003CC3 AE 82            [24]10752 	mov	r6,dpl
      003CC5 AF 83            [24]10753 	mov	r7,dph
      003CC7 15 81            [12]10754 	dec	sp
      003CC9 15 81            [12]10755 	dec	sp
      003CCB C3               [12]10756 	clr	c
      003CCC E4               [12]10757 	clr	a
      003CCD 9E               [12]10758 	subb	a,r6
      003CCE 74 80            [12]10759 	mov	a,#(0x00 ^ 0x80)
      003CD0 8F F0            [24]10760 	mov	b,r7
      003CD2 63 F0 80         [24]10761 	xrl	b,#0x80
      003CD5 95 F0            [12]10762 	subb	a,b
      003CD7 50 03            [24]10763 	jnc	00435$
      003CD9 02r3ArDE         [24]10764 	ljmp	00192$
      003CDC                      10765 00435$:
      003CDC 02r3Er0C         [24]10766 	ljmp	00193$
      003CDF                      10767 00160$:
                                  10768 ;	calc.c:536: ((char)input == 'X') || ((char)input == 'T') ||
      003CDF BD 58 02         [24]10769 	cjne	r5,#0x58,00436$
      003CE2 80 17            [24]10770 	sjmp	00151$
      003CE4                      10771 00436$:
      003CE4 BD 54 02         [24]10772 	cjne	r5,#0x54,00437$
      003CE7 80 12            [24]10773 	sjmp	00151$
      003CE9                      10774 00437$:
                                  10775 ;	calc.c:537: ((char)input == 'm') || ((char)input == 'M') ||
      003CE9 BD 6D 02         [24]10776 	cjne	r5,#0x6d,00438$
      003CEC 80 0D            [24]10777 	sjmp	00151$
      003CEE                      10778 00438$:
      003CEE BD 4D 02         [24]10779 	cjne	r5,#0x4d,00439$
      003CF1 80 08            [24]10780 	sjmp	00151$
      003CF3                      10781 00439$:
                                  10782 ;	calc.c:538: ((char)input == 'u') || ((char)input == 'U')
      003CF3 BD 75 02         [24]10783 	cjne	r5,#0x75,00440$
      003CF6 80 03            [24]10784 	sjmp	00151$
      003CF8                      10785 00440$:
      003CF8 BD 55 2C         [24]10786 	cjne	r5,#0x55,00152$
      003CFB                      10787 00151$:
                                  10788 ;	calc.c:540: if (state_exec(&s, EVENT_OP) <= 0) break;
      003CFB 74 02            [12]10789 	mov	a,#0x02
      003CFD C0 E0            [24]10790 	push	acc
      003CFF E4               [12]10791 	clr	a
      003D00 C0 E0            [24]10792 	push	acc
      003D02 90r00r00         [24]10793 	mov	dptr,#_s
      003D05 75 F0 00         [24]10794 	mov	b,#0x00
      003D08 12r00r00         [24]10795 	lcall	_state_exec
      003D0B AE 82            [24]10796 	mov	r6,dpl
      003D0D AF 83            [24]10797 	mov	r7,dph
      003D0F 15 81            [12]10798 	dec	sp
      003D11 15 81            [12]10799 	dec	sp
      003D13 C3               [12]10800 	clr	c
      003D14 E4               [12]10801 	clr	a
      003D15 9E               [12]10802 	subb	a,r6
      003D16 74 80            [12]10803 	mov	a,#(0x00 ^ 0x80)
      003D18 8F F0            [24]10804 	mov	b,r7
      003D1A 63 F0 80         [24]10805 	xrl	b,#0x80
      003D1D 95 F0            [12]10806 	subb	a,b
      003D1F 50 03            [24]10807 	jnc	00443$
      003D21 02r3ArDE         [24]10808 	ljmp	00192$
      003D24                      10809 00443$:
      003D24 02r3Er0C         [24]10810 	ljmp	00193$
      003D27                      10811 00152$:
                                  10812 ;	calc.c:542: ((char)input == '+') || ((char)input == '-')
      003D27 BD 2B 02         [24]10813 	cjne	r5,#0x2b,00444$
      003D2A 80 03            [24]10814 	sjmp	00147$
      003D2C                      10815 00444$:
      003D2C BD 2D 2C         [24]10816 	cjne	r5,#0x2d,00148$
      003D2F                      10817 00147$:
                                  10818 ;	calc.c:544: if (state_exec(&s, EVENT_OP) <= 0) break;
      003D2F 74 02            [12]10819 	mov	a,#0x02
      003D31 C0 E0            [24]10820 	push	acc
      003D33 E4               [12]10821 	clr	a
      003D34 C0 E0            [24]10822 	push	acc
      003D36 90r00r00         [24]10823 	mov	dptr,#_s
      003D39 75 F0 00         [24]10824 	mov	b,#0x00
      003D3C 12r00r00         [24]10825 	lcall	_state_exec
      003D3F AE 82            [24]10826 	mov	r6,dpl
      003D41 AF 83            [24]10827 	mov	r7,dph
      003D43 15 81            [12]10828 	dec	sp
      003D45 15 81            [12]10829 	dec	sp
      003D47 C3               [12]10830 	clr	c
      003D48 E4               [12]10831 	clr	a
      003D49 9E               [12]10832 	subb	a,r6
      003D4A 74 80            [12]10833 	mov	a,#(0x00 ^ 0x80)
      003D4C 8F F0            [24]10834 	mov	b,r7
      003D4E 63 F0 80         [24]10835 	xrl	b,#0x80
      003D51 95 F0            [12]10836 	subb	a,b
      003D53 50 03            [24]10837 	jnc	00447$
      003D55 02r3ArDE         [24]10838 	ljmp	00192$
      003D58                      10839 00447$:
      003D58 02r3Er0C         [24]10840 	ljmp	00193$
      003D5B                      10841 00148$:
                                  10842 ;	calc.c:546: ((char)input == '*') ||
      003D5B BD 2A 02         [24]10843 	cjne	r5,#0x2a,00448$
      003D5E 80 12            [24]10844 	sjmp	00140$
      003D60                      10845 00448$:
                                  10846 ;	calc.c:547: ((char)input == '/') || ((char)input == '\\') ||
      003D60 BD 2F 02         [24]10847 	cjne	r5,#0x2f,00449$
      003D63 80 0D            [24]10848 	sjmp	00140$
      003D65                      10849 00449$:
      003D65 BD 5C 02         [24]10850 	cjne	r5,#0x5c,00450$
      003D68 80 08            [24]10851 	sjmp	00140$
      003D6A                      10852 00450$:
                                  10853 ;	calc.c:548: ((char)input == '%') || ((char)input == '#')
      003D6A BD 25 02         [24]10854 	cjne	r5,#0x25,00451$
      003D6D 80 03            [24]10855 	sjmp	00140$
      003D6F                      10856 00451$:
      003D6F BD 23 29         [24]10857 	cjne	r5,#0x23,00141$
      003D72                      10858 00140$:
                                  10859 ;	calc.c:550: if (state_exec(&s, EVENT_OP) <= 0) break;
      003D72 74 02            [12]10860 	mov	a,#0x02
      003D74 C0 E0            [24]10861 	push	acc
      003D76 E4               [12]10862 	clr	a
      003D77 C0 E0            [24]10863 	push	acc
      003D79 90r00r00         [24]10864 	mov	dptr,#_s
      003D7C 75 F0 00         [24]10865 	mov	b,#0x00
      003D7F 12r00r00         [24]10866 	lcall	_state_exec
      003D82 AE 82            [24]10867 	mov	r6,dpl
      003D84 AF 83            [24]10868 	mov	r7,dph
      003D86 15 81            [12]10869 	dec	sp
      003D88 15 81            [12]10870 	dec	sp
      003D8A C3               [12]10871 	clr	c
      003D8B E4               [12]10872 	clr	a
      003D8C 9E               [12]10873 	subb	a,r6
      003D8D 74 80            [12]10874 	mov	a,#(0x00 ^ 0x80)
      003D8F 8F F0            [24]10875 	mov	b,r7
      003D91 63 F0 80         [24]10876 	xrl	b,#0x80
      003D94 95 F0            [12]10877 	subb	a,b
      003D96 50 74            [24]10878 	jnc	00193$
      003D98 02r3ArDE         [24]10879 	ljmp	00192$
      003D9B                      10880 00141$:
                                  10881 ;	calc.c:552: ((char)input == '&') ||
      003D9B BD 26 02         [24]10882 	cjne	r5,#0x26,00455$
      003D9E 80 1C            [24]10883 	sjmp	00131$
      003DA0                      10884 00455$:
                                  10885 ;	calc.c:553: ((char)input == '|') || ((char)input == '^') ||
      003DA0 BD 7C 02         [24]10886 	cjne	r5,#0x7c,00456$
      003DA3 80 17            [24]10887 	sjmp	00131$
      003DA5                      10888 00456$:
      003DA5 BD 5E 02         [24]10889 	cjne	r5,#0x5e,00457$
      003DA8 80 12            [24]10890 	sjmp	00131$
      003DAA                      10891 00457$:
                                  10892 ;	calc.c:554: ((char)input == '~') ||
      003DAA BD 7E 02         [24]10893 	cjne	r5,#0x7e,00458$
      003DAD 80 0D            [24]10894 	sjmp	00131$
      003DAF                      10895 00458$:
                                  10896 ;	calc.c:555: ((char)input == '>') || ((char)input == ']') ||
      003DAF BD 3E 02         [24]10897 	cjne	r5,#0x3e,00459$
      003DB2 80 08            [24]10898 	sjmp	00131$
      003DB4                      10899 00459$:
      003DB4 BD 5D 02         [24]10900 	cjne	r5,#0x5d,00460$
      003DB7 80 03            [24]10901 	sjmp	00131$
      003DB9                      10902 00460$:
                                  10903 ;	calc.c:556: ((char)input == '<')
      003DB9 BD 3C 29         [24]10904 	cjne	r5,#0x3c,00132$
      003DBC                      10905 00131$:
                                  10906 ;	calc.c:558: if (state_exec(&s, EVENT_OP) <= 0) break;
      003DBC 74 02            [12]10907 	mov	a,#0x02
      003DBE C0 E0            [24]10908 	push	acc
      003DC0 E4               [12]10909 	clr	a
      003DC1 C0 E0            [24]10910 	push	acc
      003DC3 90r00r00         [24]10911 	mov	dptr,#_s
      003DC6 75 F0 00         [24]10912 	mov	b,#0x00
      003DC9 12r00r00         [24]10913 	lcall	_state_exec
      003DCC AE 82            [24]10914 	mov	r6,dpl
      003DCE AF 83            [24]10915 	mov	r7,dph
      003DD0 15 81            [12]10916 	dec	sp
      003DD2 15 81            [12]10917 	dec	sp
      003DD4 C3               [12]10918 	clr	c
      003DD5 E4               [12]10919 	clr	a
      003DD6 9E               [12]10920 	subb	a,r6
      003DD7 74 80            [12]10921 	mov	a,#(0x00 ^ 0x80)
      003DD9 8F F0            [24]10922 	mov	b,r7
      003DDB 63 F0 80         [24]10923 	xrl	b,#0x80
      003DDE 95 F0            [12]10924 	subb	a,b
      003DE0 50 2A            [24]10925 	jnc	00193$
      003DE2 02r3ArDE         [24]10926 	ljmp	00192$
      003DE5                      10927 00132$:
                                  10928 ;	calc.c:560: if (state_exec(&s, EVENT_DELIM) <= 0) break;
      003DE5 E4               [12]10929 	clr	a
      003DE6 C0 E0            [24]10930 	push	acc
      003DE8 C0 E0            [24]10931 	push	acc
      003DEA 90r00r00         [24]10932 	mov	dptr,#_s
      003DED 75 F0 00         [24]10933 	mov	b,#0x00
      003DF0 12r00r00         [24]10934 	lcall	_state_exec
      003DF3 AE 82            [24]10935 	mov	r6,dpl
      003DF5 AF 83            [24]10936 	mov	r7,dph
      003DF7 15 81            [12]10937 	dec	sp
      003DF9 15 81            [12]10938 	dec	sp
      003DFB C3               [12]10939 	clr	c
      003DFC E4               [12]10940 	clr	a
      003DFD 9E               [12]10941 	subb	a,r6
      003DFE 74 80            [12]10942 	mov	a,#(0x00 ^ 0x80)
      003E00 8F F0            [24]10943 	mov	b,r7
      003E02 63 F0 80         [24]10944 	xrl	b,#0x80
      003E05 95 F0            [12]10945 	subb	a,b
      003E07 50 03            [24]10946 	jnc	00464$
      003E09 02r3ArDE         [24]10947 	ljmp	00192$
      003E0C                      10948 00464$:
      003E0C                      10949 00193$:
                                  10950 ;	calc.c:564: printstr("TERM\r\n");
      003E0C 7DrA8            [12]10951 	mov	r5,#___str_52
      003E0E 7Es03            [12]10952 	mov	r6,#(___str_52 >> 8)
      003E10 7F 80            [12]10953 	mov	r7,#0x80
                                  10954 ;	calc.c:51: return;
      003E12                      10955 00202$:
                                  10956 ;	calc.c:49: for (; *s; s++) putchar(*s);
      003E12 8D 82            [24]10957 	mov	dpl,r5
      003E14 8E 83            [24]10958 	mov	dph,r6
      003E16 8F F0            [24]10959 	mov	b,r7
      003E18 12r00r00         [24]10960 	lcall	__gptrget
      003E1B FC               [12]10961 	mov	r4,a
      003E1C 60 10            [24]10962 	jz	00197$
      003E1E 7B 00            [12]10963 	mov	r3,#0x00
      003E20 8C 82            [24]10964 	mov	dpl,r4
      003E22 8B 83            [24]10965 	mov	dph,r3
      003E24 12r00r00         [24]10966 	lcall	_putchar
      003E27 0D               [12]10967 	inc	r5
                                  10968 ;	calc.c:564: printstr("TERM\r\n");
      003E28 BD 00 E7         [24]10969 	cjne	r5,#0x00,00202$
      003E2B 0E               [12]10970 	inc	r6
      003E2C 80 E4            [24]10971 	sjmp	00202$
      003E2E                      10972 00197$:
                                  10973 ;	calc.c:566: PCON |= 2;
      003E2E 43 87 02         [24]10974 	orl	_PCON,#0x02
                                  10975 ;	calc.c:568: return;
                                  10976 ;	calc.c:569: }
      003E31 15 81            [12]10977 	dec	sp
      003E33 D0*00            [24]10978 	pop	_bp
      003E35 22               [24]10979 	ret
                                  10980 	.area CSEG    (CODE)
                                  10981 	.area CONST   (CODE)
                                  10982 	.area CONST   (CODE)
      000000                      10983 ___str_0:
      000000 25 30 38 6C 78       10984 	.ascii "%08lx"
      000005 09                   10985 	.db 0x09
      000006 00                   10986 	.db 0x00
                                  10987 	.area CSEG    (CODE)
                                  10988 	.area CONST   (CODE)
      000007                      10989 ___str_1:
      000007 25 20 31 31 6C 64    10990 	.ascii "% 11ld"
      00000D 09                   10991 	.db 0x09
      00000E 00                   10992 	.db 0x00
                                  10993 	.area CSEG    (CODE)
                                  10994 	.area CONST   (CODE)
      00000F                      10995 ___str_2:
      00000F 25 30 31 31 6C 6F    10996 	.ascii "%011lo"
      000015 09                   10997 	.db 0x09
      000016 00                   10998 	.db 0x00
                                  10999 	.area CSEG    (CODE)
                                  11000 	.area CONST   (CODE)
      000017                      11001 ___str_3:
      000017 0D                   11002 	.db 0x0d
      000018 0A                   11003 	.db 0x0a
      000019 00                   11004 	.db 0x00
                                  11005 	.area CSEG    (CODE)
                                  11006 	.area CONST   (CODE)
      00001A                      11007 ___str_4:
      00001A 73 74 61 63 6B 20 75 11008 	.ascii "stack underflow"
             6E 64 65 72 66 6C 6F
             77
      000029 0D                   11009 	.db 0x0d
      00002A 0A                   11010 	.db 0x0a
      00002B 00                   11011 	.db 0x00
                                  11012 	.area CSEG    (CODE)
                                  11013 	.area CONST   (CODE)
      00002C                      11014 ___str_5:
      00002C 50 53 50 41          11015 	.ascii "PSPA"
      000030 09                   11016 	.db 0x09
      000031 00                   11017 	.db 0x00
                                  11018 	.area CSEG    (CODE)
                                  11019 	.area CONST   (CODE)
      000032                      11020 ___str_6:
      000032 53 53 50 41          11021 	.ascii "SSPA"
      000036 09                   11022 	.db 0x09
      000037 00                   11023 	.db 0x00
                                  11024 	.area CSEG    (CODE)
                                  11025 	.area CONST   (CODE)
      000038                      11026 ___str_7:
      000038 50 53 56 41          11027 	.ascii "PSVA"
      00003C 09                   11028 	.db 0x09
      00003D 00                   11029 	.db 0x00
                                  11030 	.area CSEG    (CODE)
                                  11031 	.area CONST   (CODE)
      00003E                      11032 ___str_8:
      00003E 50 53 56 54 4F 50    11033 	.ascii "PSVTOP"
      000044 09                   11034 	.db 0x09
      000045 00                   11035 	.db 0x00
                                  11036 	.area CSEG    (CODE)
                                  11037 	.area CONST   (CODE)
      000046                      11038 ___str_9:
      000046 50 53 50 54 4F 50    11039 	.ascii "PSPTOP"
      00004C 09                   11040 	.db 0x09
      00004D 00                   11041 	.db 0x00
                                  11042 	.area CSEG    (CODE)
                                  11043 	.area CONST   (CODE)
      00004E                      11044 ___str_10:
      00004E 0D                   11045 	.db 0x0d
      00004F 0A                   11046 	.db 0x0a
      000050 73 74 61 63 6B 20 75 11047 	.ascii "stack underflow"
             6E 64 65 72 66 6C 6F
             77
      00005F 0D                   11048 	.db 0x0d
      000060 0A                   11049 	.db 0x0a
      000061 00                   11050 	.db 0x00
                                  11051 	.area CSEG    (CODE)
                                  11052 	.area CONST   (CODE)
      000062                      11053 ___str_11:
      000062 0D                   11054 	.db 0x0d
      000063 0A                   11055 	.db 0x0a
      000064 73 65 63 6F 6E 64 61 11056 	.ascii "secondary stack overflow"
             72 79 20 73 74 61 63
             6B 20 6F 76 65 72 66
             6C 6F 77
      00007C 0D                   11057 	.db 0x0d
      00007D 0A                   11058 	.db 0x0a
      00007E 00                   11059 	.db 0x00
                                  11060 	.area CSEG    (CODE)
                                  11061 	.area CONST   (CODE)
      00007F                      11062 ___str_12:
      00007F 0D                   11063 	.db 0x0d
      000080 0A                   11064 	.db 0x0a
      000081 73 65 63 6F 6E 64 61 11065 	.ascii "secondary stack underflow"
             72 79 20 73 74 61 63
             6B 20 75 6E 64 65 72
             66 6C 6F 77
      00009A 0D                   11066 	.db 0x0d
      00009B 0A                   11067 	.db 0x0a
      00009C 00                   11068 	.db 0x00
                                  11069 	.area CSEG    (CODE)
                                  11070 	.area CONST   (CODE)
      00009D                      11071 ___str_13:
      00009D 0D                   11072 	.db 0x0d
      00009E 0A                   11073 	.db 0x0a
      00009F 73 74 61 63 6B 20 6F 11074 	.ascii "stack overflow"
             76 65 72 66 6C 6F 77
      0000AD 0D                   11075 	.db 0x0d
      0000AE 0A                   11076 	.db 0x0a
      0000AF 00                   11077 	.db 0x00
                                  11078 	.area CSEG    (CODE)
                                  11079 	.area CONST   (CODE)
      0000B0                      11080 ___str_14:
      0000B0 0D                   11081 	.db 0x0d
      0000B1 0A                   11082 	.db 0x0a
      0000B2 64 69 76 69 73 69 6F 11083 	.ascii "division by zero"
             6E 20 62 79 20 7A 65
             72 6F
      0000C2 0D                   11084 	.db 0x0d
      0000C3 0A                   11085 	.db 0x0a
      0000C4 00                   11086 	.db 0x00
                                  11087 	.area CSEG    (CODE)
                                  11088 	.area CONST   (CODE)
      0000C5                      11089 ___str_15:
      0000C5 0D                   11090 	.db 0x0d
      0000C6 0A                   11091 	.db 0x0a
      0000C7 50 53 20 3D 20 25 70 11092 	.ascii "PS = %p, SS = %p, base = %d"
             2C 20 53 53 20 3D 20
             25 70 2C 20 62 61 73
             65 20 3D 20 25 64
      0000E2 0D                   11093 	.db 0x0d
      0000E3 0A                   11094 	.db 0x0a
      0000E4 00                   11095 	.db 0x00
                                  11096 	.area CSEG    (CODE)
                                  11097 	.area CONST   (CODE)
      0000E5                      11098 ___str_16:
      0000E5 41 43 43             11099 	.ascii "ACC"
      0000E8 09                   11100 	.db 0x09
      0000E9 00                   11101 	.db 0x00
                                  11102 	.area CSEG    (CODE)
                                  11103 	.area CONST   (CODE)
      0000EA                      11104 ___str_17:
      0000EA 0D                   11105 	.db 0x0d
      0000EB 0A                   11106 	.db 0x0a
      0000EC 50 53 54 4F 50 31    11107 	.ascii "PSTOP1"
      0000F2 09                   11108 	.db 0x09
      0000F3 00                   11109 	.db 0x00
                                  11110 	.area CSEG    (CODE)
                                  11111 	.area CONST   (CODE)
      0000F4                      11112 ___str_18:
      0000F4 0D                   11113 	.db 0x0d
      0000F5 0A                   11114 	.db 0x0a
      0000F6 50 53 54 4F 50 30    11115 	.ascii "PSTOP0"
      0000FC 09                   11116 	.db 0x09
      0000FD 00                   11117 	.db 0x00
                                  11118 	.area CSEG    (CODE)
                                  11119 	.area CONST   (CODE)
      0000FE                      11120 ___str_19:
      0000FE 0D                   11121 	.db 0x0d
      0000FF 0A                   11122 	.db 0x0a
      000100 53 53 54 4F 50 31    11123 	.ascii "SSTOP1"
      000106 09                   11124 	.db 0x09
      000107 00                   11125 	.db 0x00
                                  11126 	.area CSEG    (CODE)
                                  11127 	.area CONST   (CODE)
      000108                      11128 ___str_20:
      000108 0D                   11129 	.db 0x0d
      000109 0A                   11130 	.db 0x0a
      00010A 53 53 54 4F 50 30    11131 	.ascii "SSTOP0"
      000110 09                   11132 	.db 0x09
      000111 00                   11133 	.db 0x00
                                  11134 	.area CSEG    (CODE)
                                  11135 	.area CONST   (CODE)
      000112                      11136 ___str_21:
      000112 0D                   11137 	.db 0x0d
      000113 0A                   11138 	.db 0x0a
      000114 48 68 4F 6F          11139 	.ascii "HhOo"
      000118 09                   11140 	.db 0x09
      000119 62 61 73 65 20 31 36 11141 	.ascii "base 16 10 8 2"
             20 31 30 20 38 20 32
      000127 0D                   11142 	.db 0x0d
      000128 0A                   11143 	.db 0x0a
      000129 00                   11144 	.db 0x00
                                  11145 	.area CSEG    (CODE)
                                  11146 	.area CONST   (CODE)
      00012A                      11147 ___str_22:
      00012A 70 2E                11148 	.ascii "p."
      00012C 09                   11149 	.db 0x09
      00012D 70 6F 70 20 74 6F 70 11150 	.ascii "pop top"
      000134 0D                   11151 	.db 0x0d
      000135 0A                   11152 	.db 0x0a
      000136 00                   11153 	.db 0x00
                                  11154 	.area CSEG    (CODE)
                                  11155 	.area CONST   (CODE)
      000137                      11156 ___str_23:
      000137 50                   11157 	.ascii "P"
      000138 09                   11158 	.db 0x09
      000139 70 6F 70 20 73 74 61 11159 	.ascii "pop stack"
             63 6B
      000142 0D                   11160 	.db 0x0d
      000143 0A                   11161 	.db 0x0a
      000144 00                   11162 	.db 0x00
                                  11163 	.area CSEG    (CODE)
                                  11164 	.area CONST   (CODE)
      000145                      11165 ___str_24:
      000145 76                   11166 	.ascii "v"
      000146 09                   11167 	.db 0x09
      000147 70 65 65 6B 20 74 6F 11168 	.ascii "peek top"
             70
      00014F 0D                   11169 	.db 0x0d
      000150 0A                   11170 	.db 0x0a
      000151 00                   11171 	.db 0x00
                                  11172 	.area CSEG    (CODE)
                                  11173 	.area CONST   (CODE)
      000152                      11174 ___str_25:
      000152 56                   11175 	.ascii "V"
      000153 09                   11176 	.db 0x09
      000154 70 65 65 6B 20 73 74 11177 	.ascii "peek stack"
             61 63 6B
      00015E 0D                   11178 	.db 0x0d
      00015F 0A                   11179 	.db 0x0a
      000160 00                   11180 	.db 0x00
                                  11181 	.area CSEG    (CODE)
                                  11182 	.area CONST   (CODE)
      000161                      11183 ___str_26:
      000161 69                   11184 	.ascii "i"
      000162 09                   11185 	.db 0x09
      000163 72 65 73 65 74 20 61 11186 	.ascii "reset acc"
             63 63
      00016C 0D                   11187 	.db 0x0d
      00016D 0A                   11188 	.db 0x0a
      00016E 00                   11189 	.db 0x00
                                  11190 	.area CSEG    (CODE)
                                  11191 	.area CONST   (CODE)
      00016F                      11192 ___str_27:
      00016F 49                   11193 	.ascii "I"
      000170 09                   11194 	.db 0x09
      000171 72 65 73 65 74 20 61 11195 	.ascii "reset and discard acc"
             6E 64 20 64 69 73 63
             61 72 64 20 61 63 63
      000186 0D                   11196 	.db 0x0d
      000187 0A                   11197 	.db 0x0a
      000188 00                   11198 	.db 0x00
                                  11199 	.area CSEG    (CODE)
                                  11200 	.area CONST   (CODE)
      000189                      11201 ___str_28:
      000189 78                   11202 	.ascii "x"
      00018A 09                   11203 	.db 0x09
      00018B 65 78 63 68 61 6E 67 11204 	.ascii "exchange top 2"
             65 20 74 6F 70 20 32
      000199 0D                   11205 	.db 0x0d
      00019A 0A                   11206 	.db 0x0a
      00019B 00                   11207 	.db 0x00
                                  11208 	.area CSEG    (CODE)
                                  11209 	.area CONST   (CODE)
      00019C                      11210 ___str_29:
      00019C 58                   11211 	.ascii "X"
      00019D 09                   11212 	.db 0x09
      00019E 65 78 63 68 61 6E 67 11213 	.ascii "exchange stacks primary <-> secondary"
             65 20 73 74 61 63 6B
             73 20 70 72 69 6D 61
             72 79 20 3C 2D 3E 20
             73 65 63 6F 6E 64 61
             72 79
      0001C3 0D                   11214 	.db 0x0d
      0001C4 0A                   11215 	.db 0x0a
      0001C5 00                   11216 	.db 0x00
                                  11217 	.area CSEG    (CODE)
                                  11218 	.area CONST   (CODE)
      0001C6                      11219 ___str_30:
      0001C6 54                   11220 	.ascii "T"
      0001C7 09                   11221 	.db 0x09
      0001C8 65 78 63 68 61 6E 67 11222 	.ascii "exchange tops primary <-> secondary"
             65 20 74 6F 70 73 20
             70 72 69 6D 61 72 79
             20 3C 2D 3E 20 73 65
             63 6F 6E 64 61 72 79
      0001EB 0D                   11223 	.db 0x0d
      0001EC 0A                   11224 	.db 0x0a
      0001ED 00                   11225 	.db 0x00
                                  11226 	.area CSEG    (CODE)
                                  11227 	.area CONST   (CODE)
      0001EE                      11228 ___str_31:
      0001EE 55                   11229 	.ascii "U"
      0001EF 09                   11230 	.db 0x09
      0001F0 63 6F 70 79 20 74 6F 11231 	.ascii "copy top secondary -> primary"
             70 20 73 65 63 6F 6E
             64 61 72 79 20 2D 3E
             20 70 72 69 6D 61 72
             79
      00020D 0D                   11232 	.db 0x0d
      00020E 0A                   11233 	.db 0x0a
      00020F 00                   11234 	.db 0x00
                                  11235 	.area CSEG    (CODE)
                                  11236 	.area CONST   (CODE)
      000210                      11237 ___str_32:
      000210 75                   11238 	.ascii "u"
      000211 09                   11239 	.db 0x09
      000212 63 6F 70 79 20 74 6F 11240 	.ascii "copy top primary -> secondary"
             70 20 70 72 69 6D 61
             72 79 20 2D 3E 20 73
             65 63 6F 6E 64 61 72
             79
      00022F 0D                   11241 	.db 0x0d
      000230 0A                   11242 	.db 0x0a
      000231 00                   11243 	.db 0x00
                                  11244 	.area CSEG    (CODE)
                                  11245 	.area CONST   (CODE)
      000232                      11246 ___str_33:
      000232 4D                   11247 	.ascii "M"
      000233 09                   11248 	.db 0x09
      000234 6D 6F 76 65 20 74 6F 11249 	.ascii "move top secondary -> primary"
             70 20 73 65 63 6F 6E
             64 61 72 79 20 2D 3E
             20 70 72 69 6D 61 72
             79
      000251 0D                   11250 	.db 0x0d
      000252 0A                   11251 	.db 0x0a
      000253 00                   11252 	.db 0x00
                                  11253 	.area CSEG    (CODE)
                                  11254 	.area CONST   (CODE)
      000254                      11255 ___str_34:
      000254 6D                   11256 	.ascii "m"
      000255 09                   11257 	.db 0x09
      000256 6D 6F 76 65 20 74 6F 11258 	.ascii "move top primary -> secondary"
             70 20 70 72 69 6D 61
             72 79 20 2D 3E 20 73
             65 63 6F 6E 64 61 72
             79
      000273 0D                   11259 	.db 0x0d
      000274 0A                   11260 	.db 0x0a
      000275 00                   11261 	.db 0x00
                                  11262 	.area CSEG    (CODE)
                                  11263 	.area CONST   (CODE)
      000276                      11264 ___str_35:
      000276 2B                   11265 	.ascii "+"
      000277 09                   11266 	.db 0x09
      000278 61 64 64 20 74 6F 70 11267 	.ascii "add top 2"
             20 32
      000281 0D                   11268 	.db 0x0d
      000282 0A                   11269 	.db 0x0a
      000283 00                   11270 	.db 0x00
                                  11271 	.area CSEG    (CODE)
                                  11272 	.area CONST   (CODE)
      000284                      11273 ___str_36:
      000284 2D                   11274 	.ascii "-"
      000285 09                   11275 	.db 0x09
      000286 73 75 62 74 72 61 63 11276 	.ascii "subtract top 2"
             74 20 74 6F 70 20 32
      000294 0D                   11277 	.db 0x0d
      000295 0A                   11278 	.db 0x0a
      000296 00                   11279 	.db 0x00
                                  11280 	.area CSEG    (CODE)
                                  11281 	.area CONST   (CODE)
      000297                      11282 ___str_37:
      000297 2A                   11283 	.ascii "*"
      000298 09                   11284 	.db 0x09
      000299 6D 75 6C 74 69 70 6C 11285 	.ascii "multiply top 2"
             79 20 74 6F 70 20 32
      0002A7 0D                   11286 	.db 0x0d
      0002A8 0A                   11287 	.db 0x0a
      0002A9 00                   11288 	.db 0x00
                                  11289 	.area CSEG    (CODE)
                                  11290 	.area CONST   (CODE)
      0002AA                      11291 ___str_38:
      0002AA 2F                   11292 	.ascii "/"
      0002AB 09                   11293 	.db 0x09
      0002AC 64 69 76 69 64 65 20 11294 	.ascii "divide top 2"
             74 6F 70 20 32
      0002B8 0D                   11295 	.db 0x0d
      0002B9 0A                   11296 	.db 0x0a
      0002BA 00                   11297 	.db 0x00
                                  11298 	.area CSEG    (CODE)
                                  11299 	.area CONST   (CODE)
      0002BB                      11300 ___str_39:
      0002BB 5C                   11301 	.db 0x5c
      0002BC 09                   11302 	.db 0x09
      0002BD 64 69 76 69 64 65 20 11303 	.ascii "divide top 2 unsigned"
             74 6F 70 20 32 20 75
             6E 73 69 67 6E 65 64
      0002D2 0D                   11304 	.db 0x0d
      0002D3 0A                   11305 	.db 0x0a
      0002D4 00                   11306 	.db 0x00
                                  11307 	.area CSEG    (CODE)
                                  11308 	.area CONST   (CODE)
      0002D5                      11309 ___str_40:
      0002D5 25                   11310 	.ascii "%"
      0002D6 09                   11311 	.db 0x09
      0002D7 6D 6F 64 75 6C 75 73 11312 	.ascii "modulus top 2"
             20 74 6F 70 20 32
      0002E4 0D                   11313 	.db 0x0d
      0002E5 0A                   11314 	.db 0x0a
      0002E6 00                   11315 	.db 0x00
                                  11316 	.area CSEG    (CODE)
                                  11317 	.area CONST   (CODE)
      0002E7                      11318 ___str_41:
      0002E7 23                   11319 	.ascii "#"
      0002E8 09                   11320 	.db 0x09
      0002E9 6D 6F 64 75 6C 75 73 11321 	.ascii "modulus top 2 unsigned"
             20 74 6F 70 20 32 20
             75 6E 73 69 67 6E 65
             64
      0002FF 0D                   11322 	.db 0x0d
      000300 0A                   11323 	.db 0x0a
      000301 00                   11324 	.db 0x00
                                  11325 	.area CSEG    (CODE)
                                  11326 	.area CONST   (CODE)
      000302                      11327 ___str_42:
      000302 26                   11328 	.ascii "&"
      000303 09                   11329 	.db 0x09
      000304 61 6E 64 20 74 6F 70 11330 	.ascii "and top 2"
             20 32
      00030D 0D                   11331 	.db 0x0d
      00030E 0A                   11332 	.db 0x0a
      00030F 00                   11333 	.db 0x00
                                  11334 	.area CSEG    (CODE)
                                  11335 	.area CONST   (CODE)
      000310                      11336 ___str_43:
      000310 7C                   11337 	.ascii "|"
      000311 09                   11338 	.db 0x09
      000312 6F 72 20 74 6F 70 20 11339 	.ascii "or top 2"
             32
      00031A 0D                   11340 	.db 0x0d
      00031B 0A                   11341 	.db 0x0a
      00031C 00                   11342 	.db 0x00
                                  11343 	.area CSEG    (CODE)
                                  11344 	.area CONST   (CODE)
      00031D                      11345 ___str_44:
      00031D 5E                   11346 	.ascii "^"
      00031E 09                   11347 	.db 0x09
      00031F 78 6F 72 20 74 6F 70 11348 	.ascii "xor top 2"
             20 32
      000328 0D                   11349 	.db 0x0d
      000329 0A                   11350 	.db 0x0a
      00032A 00                   11351 	.db 0x00
                                  11352 	.area CSEG    (CODE)
                                  11353 	.area CONST   (CODE)
      00032B                      11354 ___str_45:
      00032B 3E                   11355 	.ascii ">"
      00032C 09                   11356 	.db 0x09
      00032D 73 68 69 66 74 20 72 11357 	.ascii "shift right top 2"
             69 67 68 74 20 74 6F
             70 20 32
      00033E 0D                   11358 	.db 0x0d
      00033F 0A                   11359 	.db 0x0a
      000340 00                   11360 	.db 0x00
                                  11361 	.area CSEG    (CODE)
                                  11362 	.area CONST   (CODE)
      000341                      11363 ___str_46:
      000341 5D                   11364 	.ascii "]"
      000342 09                   11365 	.db 0x09
      000343 61 72 69 74 68 6D 65 11366 	.ascii "arithmetic shift right top 2"
             74 69 63 20 73 68 69
             66 74 20 72 69 67 68
             74 20 74 6F 70 20 32
      00035F 0D                   11367 	.db 0x0d
      000360 0A                   11368 	.db 0x0a
      000361 00                   11369 	.db 0x00
                                  11370 	.area CSEG    (CODE)
                                  11371 	.area CONST   (CODE)
      000362                      11372 ___str_47:
      000362 3C                   11373 	.ascii "<"
      000363 09                   11374 	.db 0x09
      000364 73 68 69 66 74 20 6C 11375 	.ascii "shift left top 2"
             65 66 74 20 74 6F 70
             20 32
      000374 0D                   11376 	.db 0x0d
      000375 0A                   11377 	.db 0x0a
      000376 00                   11378 	.db 0x00
                                  11379 	.area CSEG    (CODE)
                                  11380 	.area CONST   (CODE)
      000377                      11381 ___str_48:
      000377 7E                   11382 	.ascii "~"
      000378 09                   11383 	.db 0x09
      000379 62 69 74 77 69 73 65 11384 	.ascii "bitwise not top"
             20 6E 6F 74 20 74 6F
             70
      000388 0D                   11385 	.db 0x0d
      000389 0A                   11386 	.db 0x0a
      00038A 00                   11387 	.db 0x00
                                  11388 	.area CSEG    (CODE)
                                  11389 	.area CONST   (CODE)
      00038B                      11390 ___str_49:
      00038B 73                   11391 	.ascii "s"
      00038C 09                   11392 	.db 0x09
      00038D 73 74 61 74 75 73    11393 	.ascii "status"
      000393 0D                   11394 	.db 0x0d
      000394 0A                   11395 	.db 0x0a
      000395 00                   11396 	.db 0x00
                                  11397 	.area CSEG    (CODE)
                                  11398 	.area CONST   (CODE)
      000396                      11399 ___str_50:
      000396 3F                   11400 	.ascii "?"
      000397 09                   11401 	.db 0x09
      000398 68 65 6C 70          11402 	.ascii "help"
      00039C 0D                   11403 	.db 0x0d
      00039D 0A                   11404 	.db 0x0a
      00039E 00                   11405 	.db 0x00
                                  11406 	.area CSEG    (CODE)
                                  11407 	.area CONST   (CODE)
      00039F                      11408 ___str_51:
      00039F 71                   11409 	.ascii "q"
      0003A0 09                   11410 	.db 0x09
      0003A1 71 75 69 74          11411 	.ascii "quit"
      0003A5 0D                   11412 	.db 0x0d
      0003A6 0A                   11413 	.db 0x0a
      0003A7 00                   11414 	.db 0x00
                                  11415 	.area CSEG    (CODE)
                                  11416 	.area CONST   (CODE)
      0003A8                      11417 ___str_52:
      0003A8 54 45 52 4D          11418 	.ascii "TERM"
      0003AC 0D                   11419 	.db 0x0d
      0003AD 0A                   11420 	.db 0x0a
      0003AE 00                   11421 	.db 0x00
                                  11422 	.area CSEG    (CODE)
                                  11423 	.area XINIT   (CODE)
      000000                      11424 __xinit__deltas:
      000000 00 00                11425 	.byte #0x00, #0x00	;  0
      000002 00 00                11426 	.byte #0x00, #0x00	;  0
      000004 00 00                11427 	.byte #0x00, #0x00	;  0
      000006 00 00                11428 	.byte #0x00,#0x00
      000008 00 00                11429 	.byte #0x00,#0x00
      00000A 00 00                11430 	.byte #0x00, #0x00	;  0
      00000C 01 00                11431 	.byte #0x01, #0x00	;  1
      00000E 02 00                11432 	.byte #0x02, #0x00	;  2
      000010 00 00                11433 	.byte #0x00,#0x00
      000012r22s00                11434 	.byte _accumulate, (_accumulate >> 8)
      000014 00 00                11435 	.byte #0x00, #0x00	;  0
      000016 02 00                11436 	.byte #0x02, #0x00	;  2
      000018 01 00                11437 	.byte #0x01, #0x00	;  1
      00001A 00 00                11438 	.byte #0x00,#0x00
      00001CrA4s08                11439 	.byte _operator, (_operator >> 8)
      00001E 01 00                11440 	.byte #0x01, #0x00	;  1
      000020 00 00                11441 	.byte #0x00, #0x00	;  0
      000022 00 00                11442 	.byte #0x00, #0x00	;  0
      000024 00 00                11443 	.byte #0x00,#0x00
      000026 00 00                11444 	.byte #0x00,#0x00
      000028 01 00                11445 	.byte #0x01, #0x00	;  1
      00002A 02 00                11446 	.byte #0x02, #0x00	;  2
      00002C 01 00                11447 	.byte #0x01, #0x00	;  1
      00002E 00 00                11448 	.byte #0x00,#0x00
      000030rA4s08                11449 	.byte _operator, (_operator >> 8)
      000032 01 00                11450 	.byte #0x01, #0x00	;  1
      000034 01 00                11451 	.byte #0x01, #0x00	;  1
      000036 02 00                11452 	.byte #0x02, #0x00	;  2
      000038 00 00                11453 	.byte #0x00,#0x00
      00003Ar22s00                11454 	.byte _accumulate, (_accumulate >> 8)
      00003C 02 00                11455 	.byte #0x02, #0x00	;  2
      00003E 00 00                11456 	.byte #0x00, #0x00	;  0
      000040 00 00                11457 	.byte #0x00, #0x00	;  0
      000042 00 00                11458 	.byte #0x00,#0x00
      000044r9Es2B                11459 	.byte _push_acc, (_push_acc >> 8)
      000046 02 00                11460 	.byte #0x02, #0x00	;  2
      000048 07 00                11461 	.byte #0x07, #0x00	;  7
      00004A 00 00                11462 	.byte #0x00, #0x00	;  0
      00004C 00 00                11463 	.byte #0x00,#0x00
      00004ErC1s2C                11464 	.byte _reset_acc, (_reset_acc >> 8)
      000050 02 00                11465 	.byte #0x02, #0x00	;  2
      000052 01 00                11466 	.byte #0x01, #0x00	;  1
      000054 02 00                11467 	.byte #0x02, #0x00	;  2
      000056 00 00                11468 	.byte #0x00,#0x00
      000058r22s00                11469 	.byte _accumulate, (_accumulate >> 8)
      00005A 02 00                11470 	.byte #0x02, #0x00	;  2
      00005C 02 00                11471 	.byte #0x02, #0x00	;  2
      00005E 01 00                11472 	.byte #0x01, #0x00	;  1
      000060 00 00                11473 	.byte #0x00,#0x00
      000062r9Es2B                11474 	.byte _push_acc, (_push_acc >> 8)
      000064 FF 7F                11475 	.byte #0xff, #0x7f	;  32767
      000066 06 00                11476 	.byte #0x06, #0x00	;  6
      000068 FF 7F                11477 	.byte #0xff, #0x7f	;  32767
      00006A 00 00                11478 	.byte #0x00,#0x00
      00006CrC1s2C                11479 	.byte _reset_acc, (_reset_acc >> 8)
      00006E FF 7F                11480 	.byte #0xff, #0x7f	;  32767
      000070 07 00                11481 	.byte #0x07, #0x00	;  7
      000072 FF 7F                11482 	.byte #0xff, #0x7f	;  32767
      000074 00 00                11483 	.byte #0x00,#0x00
      000076 00 00                11484 	.byte #0x00,#0x00
      000078 FF 7F                11485 	.byte #0xff, #0x7f	;  32767
      00007A 05 00                11486 	.byte #0x05, #0x00	;  5
      00007C FF 7F                11487 	.byte #0xff, #0x7f	;  32767
      00007E 00 00                11488 	.byte #0x00,#0x00
      000080r2Bs2D                11489 	.byte _reset_base, (_reset_base >> 8)
      000082 FF 7F                11490 	.byte #0xff, #0x7f	;  32767
      000084 03 00                11491 	.byte #0x03, #0x00	;  3
      000086 FF 7F                11492 	.byte #0xff, #0x7f	;  32767
      000088 00 00                11493 	.byte #0x00,#0x00
      00008ArA9s2D                11494 	.byte _status, (_status >> 8)
      00008C FF 7F                11495 	.byte #0xff, #0x7f	;  32767
      00008E 04 00                11496 	.byte #0x04, #0x00	;  4
      000090 FF 7F                11497 	.byte #0xff, #0x7f	;  32767
      000092 00 00                11498 	.byte #0x00,#0x00
      000094r08s36                11499 	.byte _help, (_help >> 8)
      000096 FF 7F                11500 	.byte #0xff, #0x7f	;  32767
      000098 08 00                11501 	.byte #0x08, #0x00	;  8
      00009A 03 00                11502 	.byte #0x03, #0x00	;  3
      00009C 00 00                11503 	.byte #0x00,#0x00
      00009Er93s01                11504 	.byte _dump_pop, (_dump_pop >> 8)
      0000A0 00 80                11505 	.byte #0x00, #0x80	; -32768
      0000A2 00 80                11506 	.byte #0x00, #0x80	; -32768
      0000A4 00 80                11507 	.byte #0x00, #0x80	; -32768
      0000A6 00 00                11508 	.byte #0x00,#0x00
      0000A8 00 00                11509 	.byte #0x00,#0x00
                                  11510 	.area CABS    (ABS,CODE)
