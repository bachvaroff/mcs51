                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module stack
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _stack_init
                                     12 	.globl _stack_push
                                     13 	.globl _stack_pop
                                     14 	.globl _stack_peek
                                     15 	.globl _stack_iter_peek
                                     16 ;--------------------------------------------------------
                                     17 ; special function registers
                                     18 ;--------------------------------------------------------
                                     19 	.area RSEG    (ABS,DATA)
      000000                         20 	.org 0x0000
                                     21 ;--------------------------------------------------------
                                     22 ; special function bits
                                     23 ;--------------------------------------------------------
                                     24 	.area RSEG    (ABS,DATA)
      000000                         25 	.org 0x0000
                                     26 ;--------------------------------------------------------
                                     27 ; overlayable register banks
                                     28 ;--------------------------------------------------------
                                     29 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         30 	.ds 8
                                     31 ;--------------------------------------------------------
                                     32 ; internal ram data
                                     33 ;--------------------------------------------------------
                                     34 	.area DSEG    (DATA)
                                     35 ;--------------------------------------------------------
                                     36 ; overlayable items in internal ram 
                                     37 ;--------------------------------------------------------
                                     38 ;--------------------------------------------------------
                                     39 ; indirectly addressable internal ram data
                                     40 ;--------------------------------------------------------
                                     41 	.area ISEG    (DATA)
                                     42 ;--------------------------------------------------------
                                     43 ; absolute internal ram data
                                     44 ;--------------------------------------------------------
                                     45 	.area IABS    (ABS,DATA)
                                     46 	.area IABS    (ABS,DATA)
                                     47 ;--------------------------------------------------------
                                     48 ; bit data
                                     49 ;--------------------------------------------------------
                                     50 	.area BSEG    (BIT)
                                     51 ;--------------------------------------------------------
                                     52 ; paged external ram data
                                     53 ;--------------------------------------------------------
                                     54 	.area PSEG    (PAG,XDATA)
                                     55 ;--------------------------------------------------------
                                     56 ; external ram data
                                     57 ;--------------------------------------------------------
                                     58 	.area XSEG    (XDATA)
                                     59 ;--------------------------------------------------------
                                     60 ; absolute external ram data
                                     61 ;--------------------------------------------------------
                                     62 	.area XABS    (ABS,XDATA)
                                     63 ;--------------------------------------------------------
                                     64 ; external initialized ram data
                                     65 ;--------------------------------------------------------
                                     66 	.area XISEG   (XDATA)
                                     67 	.area HOME    (CODE)
                                     68 	.area GSINIT0 (CODE)
                                     69 	.area GSINIT1 (CODE)
                                     70 	.area GSINIT2 (CODE)
                                     71 	.area GSINIT3 (CODE)
                                     72 	.area GSINIT4 (CODE)
                                     73 	.area GSINIT5 (CODE)
                                     74 	.area GSINIT  (CODE)
                                     75 	.area GSFINAL (CODE)
                                     76 	.area CSEG    (CODE)
                                     77 ;--------------------------------------------------------
                                     78 ; global & static initialisations
                                     79 ;--------------------------------------------------------
                                     80 	.area HOME    (CODE)
                                     81 	.area GSINIT  (CODE)
                                     82 	.area GSFINAL (CODE)
                                     83 	.area GSINIT  (CODE)
                                     84 ;--------------------------------------------------------
                                     85 ; Home
                                     86 ;--------------------------------------------------------
                                     87 	.area HOME    (CODE)
                                     88 	.area HOME    (CODE)
                                     89 ;--------------------------------------------------------
                                     90 ; code
                                     91 ;--------------------------------------------------------
                                     92 	.area CSEG    (CODE)
                                     93 ;------------------------------------------------------------
                                     94 ;Allocation info for local variables in function 'stack_init'
                                     95 ;------------------------------------------------------------
                                     96 ;s                         Allocated to registers r5 r6 r7 
                                     97 ;------------------------------------------------------------
                                     98 ;	stack.c:4: void stack_init(stack_t *s) __reentrant {
                                     99 ;	-----------------------------------------
                                    100 ;	 function stack_init
                                    101 ;	-----------------------------------------
      000000                        102 _stack_init:
                           000007   103 	ar7 = 0x07
                           000006   104 	ar6 = 0x06
                           000005   105 	ar5 = 0x05
                           000004   106 	ar4 = 0x04
                           000003   107 	ar3 = 0x03
                           000002   108 	ar2 = 0x02
                           000001   109 	ar1 = 0x01
                           000000   110 	ar0 = 0x00
      000000 AD 82            [24]  111 	mov	r5,dpl
      000002 AE 83            [24]  112 	mov	r6,dph
      000004 AF F0            [24]  113 	mov	r7,b
                                    114 ;	stack.c:5: s->N = SIZE;
      000006 8D 02            [24]  115 	mov	ar2,r5
      000008 74 20            [12]  116 	mov	a,#0x20
      00000A 2E               [12]  117 	add	a,r6
      00000B FB               [12]  118 	mov	r3,a
      00000C 8F 04            [24]  119 	mov	ar4,r7
      00000E 8A 82            [24]  120 	mov	dpl,r2
      000010 8B 83            [24]  121 	mov	dph,r3
      000012 8C F0            [24]  122 	mov	b,r4
      000014 E4               [12]  123 	clr	a
      000015 12r00r00         [24]  124 	lcall	__gptrput
      000018 A3               [24]  125 	inc	dptr
      000019 74 08            [12]  126 	mov	a,#0x08
      00001B 12r00r00         [24]  127 	lcall	__gptrput
                                    128 ;	stack.c:6: s->p = -1;
      00001E 74 02            [12]  129 	mov	a,#0x02
      000020 2D               [12]  130 	add	a,r5
      000021 FD               [12]  131 	mov	r5,a
      000022 74 20            [12]  132 	mov	a,#0x20
      000024 3E               [12]  133 	addc	a,r6
      000025 FE               [12]  134 	mov	r6,a
      000026 8D 82            [24]  135 	mov	dpl,r5
      000028 8E 83            [24]  136 	mov	dph,r6
      00002A 8F F0            [24]  137 	mov	b,r7
      00002C 74 FF            [12]  138 	mov	a,#0xff
      00002E 12r00r00         [24]  139 	lcall	__gptrput
      000031 A3               [24]  140 	inc	dptr
                                    141 ;	stack.c:8: return;
                                    142 ;	stack.c:9: }
      000032 02r00r00         [24]  143 	ljmp	__gptrput
                                    144 ;------------------------------------------------------------
                                    145 ;Allocation info for local variables in function 'stack_push'
                                    146 ;------------------------------------------------------------
                                    147 ;val                       Allocated to stack - _bp -6
                                    148 ;s                         Allocated to stack - _bp +1
                                    149 ;sloc0                     Allocated to stack - _bp +4
                                    150 ;------------------------------------------------------------
                                    151 ;	stack.c:11: int stack_push(stack_t *s, long val) __reentrant {
                                    152 ;	-----------------------------------------
                                    153 ;	 function stack_push
                                    154 ;	-----------------------------------------
      000035                        155 _stack_push:
      000035 C0*00            [24]  156 	push	_bp
      000037 85 81*00         [24]  157 	mov	_bp,sp
      00003A C0 82            [24]  158 	push	dpl
      00003C C0 83            [24]  159 	push	dph
      00003E C0 F0            [24]  160 	push	b
      000040 05 81            [12]  161 	inc	sp
      000042 05 81            [12]  162 	inc	sp
                                    163 ;	stack.c:12: if (s->p == (s->N - 1)) return 0;
      000044 A8*00            [24]  164 	mov	r0,_bp
      000046 08               [12]  165 	inc	r0
      000047 74 02            [12]  166 	mov	a,#0x02
      000049 26               [12]  167 	add	a,@r0
      00004A FA               [12]  168 	mov	r2,a
      00004B 74 20            [12]  169 	mov	a,#0x20
      00004D 08               [12]  170 	inc	r0
      00004E 36               [12]  171 	addc	a,@r0
      00004F FB               [12]  172 	mov	r3,a
      000050 08               [12]  173 	inc	r0
      000051 86 04            [24]  174 	mov	ar4,@r0
      000053 8A 82            [24]  175 	mov	dpl,r2
      000055 8B 83            [24]  176 	mov	dph,r3
      000057 8C F0            [24]  177 	mov	b,r4
      000059 E5*00            [12]  178 	mov	a,_bp
      00005B 24 04            [12]  179 	add	a,#0x04
      00005D F8               [12]  180 	mov	r0,a
      00005E 12r00r00         [24]  181 	lcall	__gptrget
      000061 F6               [12]  182 	mov	@r0,a
      000062 A3               [24]  183 	inc	dptr
      000063 12r00r00         [24]  184 	lcall	__gptrget
      000066 08               [12]  185 	inc	r0
      000067 F6               [12]  186 	mov	@r0,a
      000068 A8*00            [24]  187 	mov	r0,_bp
      00006A 08               [12]  188 	inc	r0
      00006B 86 05            [24]  189 	mov	ar5,@r0
      00006D 74 20            [12]  190 	mov	a,#0x20
      00006F 08               [12]  191 	inc	r0
      000070 26               [12]  192 	add	a,@r0
      000071 FE               [12]  193 	mov	r6,a
      000072 08               [12]  194 	inc	r0
      000073 86 07            [24]  195 	mov	ar7,@r0
      000075 8D 82            [24]  196 	mov	dpl,r5
      000077 8E 83            [24]  197 	mov	dph,r6
      000079 8F F0            [24]  198 	mov	b,r7
      00007B 12r00r00         [24]  199 	lcall	__gptrget
      00007E FD               [12]  200 	mov	r5,a
      00007F A3               [24]  201 	inc	dptr
      000080 12r00r00         [24]  202 	lcall	__gptrget
      000083 FE               [12]  203 	mov	r6,a
      000084 1D               [12]  204 	dec	r5
      000085 BD FF 01         [24]  205 	cjne	r5,#0xff,00109$
      000088 1E               [12]  206 	dec	r6
      000089                        207 00109$:
      000089 E5*00            [12]  208 	mov	a,_bp
      00008B 24 04            [12]  209 	add	a,#0x04
      00008D F8               [12]  210 	mov	r0,a
      00008E E6               [12]  211 	mov	a,@r0
      00008F B5 05 07         [24]  212 	cjne	a,ar5,00110$
      000092 08               [12]  213 	inc	r0
      000093 E6               [12]  214 	mov	a,@r0
      000094 B5 06 02         [24]  215 	cjne	a,ar6,00110$
      000097 80 02            [24]  216 	sjmp	00111$
      000099                        217 00110$:
      000099 80 05            [24]  218 	sjmp	00102$
      00009B                        219 00111$:
      00009B 90 00 00         [24]  220 	mov	dptr,#0x0000
      00009E 80 59            [24]  221 	sjmp	00103$
      0000A0                        222 00102$:
                                    223 ;	stack.c:13: s->p++;
      0000A0 E5*00            [12]  224 	mov	a,_bp
      0000A2 24 04            [12]  225 	add	a,#0x04
      0000A4 F8               [12]  226 	mov	r0,a
      0000A5 74 01            [12]  227 	mov	a,#0x01
      0000A7 26               [12]  228 	add	a,@r0
      0000A8 FE               [12]  229 	mov	r6,a
      0000A9 E4               [12]  230 	clr	a
      0000AA 08               [12]  231 	inc	r0
      0000AB 36               [12]  232 	addc	a,@r0
      0000AC FF               [12]  233 	mov	r7,a
      0000AD 8A 82            [24]  234 	mov	dpl,r2
      0000AF 8B 83            [24]  235 	mov	dph,r3
      0000B1 8C F0            [24]  236 	mov	b,r4
      0000B3 EE               [12]  237 	mov	a,r6
      0000B4 12r00r00         [24]  238 	lcall	__gptrput
      0000B7 A3               [24]  239 	inc	dptr
      0000B8 EF               [12]  240 	mov	a,r7
      0000B9 12r00r00         [24]  241 	lcall	__gptrput
                                    242 ;	stack.c:14: s->data[s->p] = val;
      0000BC EE               [12]  243 	mov	a,r6
      0000BD 2E               [12]  244 	add	a,r6
      0000BE FE               [12]  245 	mov	r6,a
      0000BF EF               [12]  246 	mov	a,r7
      0000C0 33               [12]  247 	rlc	a
      0000C1 FF               [12]  248 	mov	r7,a
      0000C2 EE               [12]  249 	mov	a,r6
      0000C3 2E               [12]  250 	add	a,r6
      0000C4 FE               [12]  251 	mov	r6,a
      0000C5 EF               [12]  252 	mov	a,r7
      0000C6 33               [12]  253 	rlc	a
      0000C7 FF               [12]  254 	mov	r7,a
      0000C8 A8*00            [24]  255 	mov	r0,_bp
      0000CA 08               [12]  256 	inc	r0
      0000CB EE               [12]  257 	mov	a,r6
      0000CC 26               [12]  258 	add	a,@r0
      0000CD FE               [12]  259 	mov	r6,a
      0000CE EF               [12]  260 	mov	a,r7
      0000CF 08               [12]  261 	inc	r0
      0000D0 36               [12]  262 	addc	a,@r0
      0000D1 FF               [12]  263 	mov	r7,a
      0000D2 08               [12]  264 	inc	r0
      0000D3 86 05            [24]  265 	mov	ar5,@r0
      0000D5 8E 82            [24]  266 	mov	dpl,r6
      0000D7 8F 83            [24]  267 	mov	dph,r7
      0000D9 8D F0            [24]  268 	mov	b,r5
      0000DB E5*00            [12]  269 	mov	a,_bp
      0000DD 24 FA            [12]  270 	add	a,#0xfa
      0000DF F8               [12]  271 	mov	r0,a
      0000E0 E6               [12]  272 	mov	a,@r0
      0000E1 12r00r00         [24]  273 	lcall	__gptrput
      0000E4 A3               [24]  274 	inc	dptr
      0000E5 08               [12]  275 	inc	r0
      0000E6 E6               [12]  276 	mov	a,@r0
      0000E7 12r00r00         [24]  277 	lcall	__gptrput
      0000EA A3               [24]  278 	inc	dptr
      0000EB 08               [12]  279 	inc	r0
      0000EC E6               [12]  280 	mov	a,@r0
      0000ED 12r00r00         [24]  281 	lcall	__gptrput
      0000F0 A3               [24]  282 	inc	dptr
      0000F1 08               [12]  283 	inc	r0
      0000F2 E6               [12]  284 	mov	a,@r0
      0000F3 12r00r00         [24]  285 	lcall	__gptrput
                                    286 ;	stack.c:15: return 1;
      0000F6 90 00 01         [24]  287 	mov	dptr,#0x0001
      0000F9                        288 00103$:
                                    289 ;	stack.c:16: }
      0000F9 85*00 81         [24]  290 	mov	sp,_bp
      0000FC D0*00            [24]  291 	pop	_bp
      0000FE 22               [24]  292 	ret
                                    293 ;------------------------------------------------------------
                                    294 ;Allocation info for local variables in function 'stack_pop'
                                    295 ;------------------------------------------------------------
                                    296 ;val                       Allocated to stack - _bp -5
                                    297 ;s                         Allocated to registers r5 r3 r4 
                                    298 ;sloc0                     Allocated to stack - _bp +4
                                    299 ;sloc1                     Allocated to stack - _bp +1
                                    300 ;sloc2                     Allocated to stack - _bp +4
                                    301 ;------------------------------------------------------------
                                    302 ;	stack.c:18: int stack_pop(stack_t *s, long *val) __reentrant {
                                    303 ;	-----------------------------------------
                                    304 ;	 function stack_pop
                                    305 ;	-----------------------------------------
      0000FF                        306 _stack_pop:
      0000FF C0*00            [24]  307 	push	_bp
      000101 E5 81            [12]  308 	mov	a,sp
      000103 F5*00            [12]  309 	mov	_bp,a
      000105 24 06            [12]  310 	add	a,#0x06
      000107 F5 81            [12]  311 	mov	sp,a
      000109 AD 82            [24]  312 	mov	r5,dpl
      00010B AB 83            [24]  313 	mov	r3,dph
      00010D AC F0            [24]  314 	mov	r4,b
                                    315 ;	stack.c:19: if (s->p < 0) return 0;
      00010F E5*00            [12]  316 	mov	a,_bp
      000111 24 04            [12]  317 	add	a,#0x04
      000113 F8               [12]  318 	mov	r0,a
      000114 74 02            [12]  319 	mov	a,#0x02
      000116 2D               [12]  320 	add	a,r5
      000117 F6               [12]  321 	mov	@r0,a
      000118 74 20            [12]  322 	mov	a,#0x20
      00011A 3B               [12]  323 	addc	a,r3
      00011B 08               [12]  324 	inc	r0
      00011C F6               [12]  325 	mov	@r0,a
      00011D 08               [12]  326 	inc	r0
      00011E A6 04            [24]  327 	mov	@r0,ar4
      000120 E5*00            [12]  328 	mov	a,_bp
      000122 24 04            [12]  329 	add	a,#0x04
      000124 F8               [12]  330 	mov	r0,a
      000125 86 82            [24]  331 	mov	dpl,@r0
      000127 08               [12]  332 	inc	r0
      000128 86 83            [24]  333 	mov	dph,@r0
      00012A 08               [12]  334 	inc	r0
      00012B 86 F0            [24]  335 	mov	b,@r0
      00012D 12r00r00         [24]  336 	lcall	__gptrget
      000130 FF               [12]  337 	mov	r7,a
      000131 A3               [24]  338 	inc	dptr
      000132 12r00r00         [24]  339 	lcall	__gptrget
      000135 FE               [12]  340 	mov	r6,a
      000136 30 E7 06         [24]  341 	jnb	acc.7,00102$
      000139 90 00 00         [24]  342 	mov	dptr,#0x0000
      00013C 02r01rD0         [24]  343 	ljmp	00103$
      00013F                        344 00102$:
                                    345 ;	stack.c:20: *val = s->data[s->p];
      00013F E5*00            [12]  346 	mov	a,_bp
      000141 24 FB            [12]  347 	add	a,#0xfb
      000143 F8               [12]  348 	mov	r0,a
      000144 A9*00            [24]  349 	mov	r1,_bp
      000146 09               [12]  350 	inc	r1
      000147 E6               [12]  351 	mov	a,@r0
      000148 F7               [12]  352 	mov	@r1,a
      000149 08               [12]  353 	inc	r0
      00014A 09               [12]  354 	inc	r1
      00014B E6               [12]  355 	mov	a,@r0
      00014C F7               [12]  356 	mov	@r1,a
      00014D 08               [12]  357 	inc	r0
      00014E 09               [12]  358 	inc	r1
      00014F E6               [12]  359 	mov	a,@r0
      000150 F7               [12]  360 	mov	@r1,a
      000151 EF               [12]  361 	mov	a,r7
      000152 2F               [12]  362 	add	a,r7
      000153 FF               [12]  363 	mov	r7,a
      000154 EE               [12]  364 	mov	a,r6
      000155 33               [12]  365 	rlc	a
      000156 FE               [12]  366 	mov	r6,a
      000157 EF               [12]  367 	mov	a,r7
      000158 2F               [12]  368 	add	a,r7
      000159 FF               [12]  369 	mov	r7,a
      00015A EE               [12]  370 	mov	a,r6
      00015B 33               [12]  371 	rlc	a
      00015C FE               [12]  372 	mov	r6,a
      00015D EF               [12]  373 	mov	a,r7
      00015E 2D               [12]  374 	add	a,r5
      00015F FD               [12]  375 	mov	r5,a
      000160 EE               [12]  376 	mov	a,r6
      000161 3B               [12]  377 	addc	a,r3
      000162 FE               [12]  378 	mov	r6,a
      000163 8C 07            [24]  379 	mov	ar7,r4
      000165 8D 82            [24]  380 	mov	dpl,r5
      000167 8E 83            [24]  381 	mov	dph,r6
      000169 8F F0            [24]  382 	mov	b,r7
      00016B 12r00r00         [24]  383 	lcall	__gptrget
      00016E FD               [12]  384 	mov	r5,a
      00016F A3               [24]  385 	inc	dptr
      000170 12r00r00         [24]  386 	lcall	__gptrget
      000173 FE               [12]  387 	mov	r6,a
      000174 A3               [24]  388 	inc	dptr
      000175 12r00r00         [24]  389 	lcall	__gptrget
      000178 FC               [12]  390 	mov	r4,a
      000179 A3               [24]  391 	inc	dptr
      00017A 12r00r00         [24]  392 	lcall	__gptrget
      00017D FF               [12]  393 	mov	r7,a
      00017E A8*00            [24]  394 	mov	r0,_bp
      000180 08               [12]  395 	inc	r0
      000181 86 82            [24]  396 	mov	dpl,@r0
      000183 08               [12]  397 	inc	r0
      000184 86 83            [24]  398 	mov	dph,@r0
      000186 08               [12]  399 	inc	r0
      000187 86 F0            [24]  400 	mov	b,@r0
      000189 ED               [12]  401 	mov	a,r5
      00018A 12r00r00         [24]  402 	lcall	__gptrput
      00018D A3               [24]  403 	inc	dptr
      00018E EE               [12]  404 	mov	a,r6
      00018F 12r00r00         [24]  405 	lcall	__gptrput
      000192 A3               [24]  406 	inc	dptr
      000193 EC               [12]  407 	mov	a,r4
      000194 12r00r00         [24]  408 	lcall	__gptrput
      000197 A3               [24]  409 	inc	dptr
      000198 EF               [12]  410 	mov	a,r7
      000199 12r00r00         [24]  411 	lcall	__gptrput
                                    412 ;	stack.c:21: s->p--;
      00019C E5*00            [12]  413 	mov	a,_bp
      00019E 24 04            [12]  414 	add	a,#0x04
      0001A0 F8               [12]  415 	mov	r0,a
      0001A1 86 82            [24]  416 	mov	dpl,@r0
      0001A3 08               [12]  417 	inc	r0
      0001A4 86 83            [24]  418 	mov	dph,@r0
      0001A6 08               [12]  419 	inc	r0
      0001A7 86 F0            [24]  420 	mov	b,@r0
      0001A9 12r00r00         [24]  421 	lcall	__gptrget
      0001AC FE               [12]  422 	mov	r6,a
      0001AD A3               [24]  423 	inc	dptr
      0001AE 12r00r00         [24]  424 	lcall	__gptrget
      0001B1 FF               [12]  425 	mov	r7,a
      0001B2 1E               [12]  426 	dec	r6
      0001B3 BE FF 01         [24]  427 	cjne	r6,#0xff,00110$
      0001B6 1F               [12]  428 	dec	r7
      0001B7                        429 00110$:
      0001B7 E5*00            [12]  430 	mov	a,_bp
      0001B9 24 04            [12]  431 	add	a,#0x04
      0001BB F8               [12]  432 	mov	r0,a
      0001BC 86 82            [24]  433 	mov	dpl,@r0
      0001BE 08               [12]  434 	inc	r0
      0001BF 86 83            [24]  435 	mov	dph,@r0
      0001C1 08               [12]  436 	inc	r0
      0001C2 86 F0            [24]  437 	mov	b,@r0
      0001C4 EE               [12]  438 	mov	a,r6
      0001C5 12r00r00         [24]  439 	lcall	__gptrput
      0001C8 A3               [24]  440 	inc	dptr
      0001C9 EF               [12]  441 	mov	a,r7
      0001CA 12r00r00         [24]  442 	lcall	__gptrput
                                    443 ;	stack.c:22: return 1;
      0001CD 90 00 01         [24]  444 	mov	dptr,#0x0001
      0001D0                        445 00103$:
                                    446 ;	stack.c:23: }
      0001D0 85*00 81         [24]  447 	mov	sp,_bp
      0001D3 D0*00            [24]  448 	pop	_bp
      0001D5 22               [24]  449 	ret
                                    450 ;------------------------------------------------------------
                                    451 ;Allocation info for local variables in function 'stack_peek'
                                    452 ;------------------------------------------------------------
                                    453 ;val                       Allocated to stack - _bp -5
                                    454 ;s                         Allocated to registers r7 r6 r5 
                                    455 ;sloc0                     Allocated to stack - _bp +1
                                    456 ;------------------------------------------------------------
                                    457 ;	stack.c:25: int stack_peek(stack_t *s, long *val) __reentrant {
                                    458 ;	-----------------------------------------
                                    459 ;	 function stack_peek
                                    460 ;	-----------------------------------------
      0001D6                        461 _stack_peek:
      0001D6 C0*00            [24]  462 	push	_bp
      0001D8 85 81*00         [24]  463 	mov	_bp,sp
      0001DB 05 81            [12]  464 	inc	sp
      0001DD 05 81            [12]  465 	inc	sp
      0001DF 05 81            [12]  466 	inc	sp
      0001E1 AF 82            [24]  467 	mov	r7,dpl
      0001E3 AE 83            [24]  468 	mov	r6,dph
      0001E5 AD F0            [24]  469 	mov	r5,b
                                    470 ;	stack.c:26: if (s->p < 0) return 0;
      0001E7 74 02            [12]  471 	mov	a,#0x02
      0001E9 2F               [12]  472 	add	a,r7
      0001EA FB               [12]  473 	mov	r3,a
      0001EB 74 20            [12]  474 	mov	a,#0x20
      0001ED 3E               [12]  475 	addc	a,r6
      0001EE FA               [12]  476 	mov	r2,a
      0001EF 8D 04            [24]  477 	mov	ar4,r5
      0001F1 8B 82            [24]  478 	mov	dpl,r3
      0001F3 8A 83            [24]  479 	mov	dph,r2
      0001F5 8C F0            [24]  480 	mov	b,r4
      0001F7 12r00r00         [24]  481 	lcall	__gptrget
      0001FA FB               [12]  482 	mov	r3,a
      0001FB A3               [24]  483 	inc	dptr
      0001FC 12r00r00         [24]  484 	lcall	__gptrget
      0001FF FC               [12]  485 	mov	r4,a
      000200 30 E7 05         [24]  486 	jnb	acc.7,00102$
      000203 90 00 00         [24]  487 	mov	dptr,#0x0000
      000206 80 5E            [24]  488 	sjmp	00103$
      000208                        489 00102$:
                                    490 ;	stack.c:27: *val = s->data[s->p];
      000208 E5*00            [12]  491 	mov	a,_bp
      00020A 24 FB            [12]  492 	add	a,#0xfb
      00020C F8               [12]  493 	mov	r0,a
      00020D A9*00            [24]  494 	mov	r1,_bp
      00020F 09               [12]  495 	inc	r1
      000210 E6               [12]  496 	mov	a,@r0
      000211 F7               [12]  497 	mov	@r1,a
      000212 08               [12]  498 	inc	r0
      000213 09               [12]  499 	inc	r1
      000214 E6               [12]  500 	mov	a,@r0
      000215 F7               [12]  501 	mov	@r1,a
      000216 08               [12]  502 	inc	r0
      000217 09               [12]  503 	inc	r1
      000218 E6               [12]  504 	mov	a,@r0
      000219 F7               [12]  505 	mov	@r1,a
      00021A EB               [12]  506 	mov	a,r3
      00021B 2B               [12]  507 	add	a,r3
      00021C FB               [12]  508 	mov	r3,a
      00021D EC               [12]  509 	mov	a,r4
      00021E 33               [12]  510 	rlc	a
      00021F FC               [12]  511 	mov	r4,a
      000220 EB               [12]  512 	mov	a,r3
      000221 2B               [12]  513 	add	a,r3
      000222 FB               [12]  514 	mov	r3,a
      000223 EC               [12]  515 	mov	a,r4
      000224 33               [12]  516 	rlc	a
      000225 FC               [12]  517 	mov	r4,a
      000226 EB               [12]  518 	mov	a,r3
      000227 2F               [12]  519 	add	a,r7
      000228 FB               [12]  520 	mov	r3,a
      000229 EC               [12]  521 	mov	a,r4
      00022A 3E               [12]  522 	addc	a,r6
      00022B FC               [12]  523 	mov	r4,a
      00022C 8B 82            [24]  524 	mov	dpl,r3
      00022E 8C 83            [24]  525 	mov	dph,r4
      000230 8D F0            [24]  526 	mov	b,r5
      000232 12r00r00         [24]  527 	lcall	__gptrget
      000235 FB               [12]  528 	mov	r3,a
      000236 A3               [24]  529 	inc	dptr
      000237 12r00r00         [24]  530 	lcall	__gptrget
      00023A FC               [12]  531 	mov	r4,a
      00023B A3               [24]  532 	inc	dptr
      00023C 12r00r00         [24]  533 	lcall	__gptrget
      00023F FD               [12]  534 	mov	r5,a
      000240 A3               [24]  535 	inc	dptr
      000241 12r00r00         [24]  536 	lcall	__gptrget
      000244 FF               [12]  537 	mov	r7,a
      000245 A8*00            [24]  538 	mov	r0,_bp
      000247 08               [12]  539 	inc	r0
      000248 86 82            [24]  540 	mov	dpl,@r0
      00024A 08               [12]  541 	inc	r0
      00024B 86 83            [24]  542 	mov	dph,@r0
      00024D 08               [12]  543 	inc	r0
      00024E 86 F0            [24]  544 	mov	b,@r0
      000250 EB               [12]  545 	mov	a,r3
      000251 12r00r00         [24]  546 	lcall	__gptrput
      000254 A3               [24]  547 	inc	dptr
      000255 EC               [12]  548 	mov	a,r4
      000256 12r00r00         [24]  549 	lcall	__gptrput
      000259 A3               [24]  550 	inc	dptr
      00025A ED               [12]  551 	mov	a,r5
      00025B 12r00r00         [24]  552 	lcall	__gptrput
      00025E A3               [24]  553 	inc	dptr
      00025F EF               [12]  554 	mov	a,r7
      000260 12r00r00         [24]  555 	lcall	__gptrput
                                    556 ;	stack.c:28: return 1;
      000263 90 00 01         [24]  557 	mov	dptr,#0x0001
      000266                        558 00103$:
                                    559 ;	stack.c:29: }
      000266 85*00 81         [24]  560 	mov	sp,_bp
      000269 D0*00            [24]  561 	pop	_bp
      00026B 22               [24]  562 	ret
                                    563 ;------------------------------------------------------------
                                    564 ;Allocation info for local variables in function 'stack_iter_peek'
                                    565 ;------------------------------------------------------------
                                    566 ;iter                      Allocated to stack - _bp -4
                                    567 ;_ctx                      Allocated to stack - _bp -7
                                    568 ;s                         Allocated to stack - _bp +1
                                    569 ;j                         Allocated to registers 
                                    570 ;r                         Allocated to registers r2 r7 
                                    571 ;------------------------------------------------------------
                                    572 ;	stack.c:31: int stack_iter_peek(stack_t *s, stack_iter_t iter, void *_ctx) __reentrant {
                                    573 ;	-----------------------------------------
                                    574 ;	 function stack_iter_peek
                                    575 ;	-----------------------------------------
      00026C                        576 _stack_iter_peek:
      00026C C0*00            [24]  577 	push	_bp
      00026E 85 81*00         [24]  578 	mov	_bp,sp
      000271 C0 82            [24]  579 	push	dpl
      000273 C0 83            [24]  580 	push	dph
      000275 C0 F0            [24]  581 	push	b
                                    582 ;	stack.c:34: if (s->p < 0) return 0;
      000277 A8*00            [24]  583 	mov	r0,_bp
      000279 08               [12]  584 	inc	r0
      00027A 74 02            [12]  585 	mov	a,#0x02
      00027C 26               [12]  586 	add	a,@r0
      00027D FB               [12]  587 	mov	r3,a
      00027E 74 20            [12]  588 	mov	a,#0x20
      000280 08               [12]  589 	inc	r0
      000281 36               [12]  590 	addc	a,@r0
      000282 FA               [12]  591 	mov	r2,a
      000283 08               [12]  592 	inc	r0
      000284 86 04            [24]  593 	mov	ar4,@r0
      000286 8B 82            [24]  594 	mov	dpl,r3
      000288 8A 83            [24]  595 	mov	dph,r2
      00028A 8C F0            [24]  596 	mov	b,r4
      00028C 12r00r00         [24]  597 	lcall	__gptrget
      00028F FB               [12]  598 	mov	r3,a
      000290 A3               [24]  599 	inc	dptr
      000291 12r00r00         [24]  600 	lcall	__gptrget
      000294 FC               [12]  601 	mov	r4,a
      000295 30 E7 06         [24]  602 	jnb	acc.7,00102$
      000298 90 00 00         [24]  603 	mov	dptr,#0x0000
      00029B 02r03r3A         [24]  604 	ljmp	00109$
      00029E                        605 00102$:
                                    606 ;	stack.c:36: for (j = s->p, r = 0; j >= 0; j--) {
      00029E 7A 00            [12]  607 	mov	r2,#0x00
      0002A0 7F 00            [12]  608 	mov	r7,#0x00
      0002A2                        609 00107$:
      0002A2 EC               [12]  610 	mov	a,r4
      0002A3 30 E7 03         [24]  611 	jnb	acc.7,00129$
      0002A6 02r03r36         [24]  612 	ljmp	00105$
      0002A9                        613 00129$:
                                    614 ;	stack.c:37: r = iter(_ctx, s->data[j]);
      0002A9 EB               [12]  615 	mov	a,r3
      0002AA 2B               [12]  616 	add	a,r3
      0002AB FD               [12]  617 	mov	r5,a
      0002AC EC               [12]  618 	mov	a,r4
      0002AD 33               [12]  619 	rlc	a
      0002AE FE               [12]  620 	mov	r6,a
      0002AF ED               [12]  621 	mov	a,r5
      0002B0 2D               [12]  622 	add	a,r5
      0002B1 FD               [12]  623 	mov	r5,a
      0002B2 EE               [12]  624 	mov	a,r6
      0002B3 33               [12]  625 	rlc	a
      0002B4 FE               [12]  626 	mov	r6,a
      0002B5 C0 03            [24]  627 	push	ar3
      0002B7 C0 04            [24]  628 	push	ar4
      0002B9 A8*00            [24]  629 	mov	r0,_bp
      0002BB 08               [12]  630 	inc	r0
      0002BC ED               [12]  631 	mov	a,r5
      0002BD 26               [12]  632 	add	a,@r0
      0002BE FD               [12]  633 	mov	r5,a
      0002BF EE               [12]  634 	mov	a,r6
      0002C0 08               [12]  635 	inc	r0
      0002C1 36               [12]  636 	addc	a,@r0
      0002C2 FC               [12]  637 	mov	r4,a
      0002C3 08               [12]  638 	inc	r0
      0002C4 86 06            [24]  639 	mov	ar6,@r0
      0002C6 8D 82            [24]  640 	mov	dpl,r5
      0002C8 8C 83            [24]  641 	mov	dph,r4
      0002CA 8E F0            [24]  642 	mov	b,r6
      0002CC 12r00r00         [24]  643 	lcall	__gptrget
      0002CF FD               [12]  644 	mov	r5,a
      0002D0 A3               [24]  645 	inc	dptr
      0002D1 12r00r00         [24]  646 	lcall	__gptrget
      0002D4 FC               [12]  647 	mov	r4,a
      0002D5 A3               [24]  648 	inc	dptr
      0002D6 12r00r00         [24]  649 	lcall	__gptrget
      0002D9 FE               [12]  650 	mov	r6,a
      0002DA A3               [24]  651 	inc	dptr
      0002DB 12r00r00         [24]  652 	lcall	__gptrget
      0002DE FB               [12]  653 	mov	r3,a
      0002DF C0 04            [24]  654 	push	ar4
      0002E1 C0 03            [24]  655 	push	ar3
      0002E3 C0 05            [24]  656 	push	ar5
      0002E5 C0 04            [24]  657 	push	ar4
      0002E7 C0 06            [24]  658 	push	ar6
      0002E9 C0 03            [24]  659 	push	ar3
      0002EB 12r02rF0         [24]  660 	lcall	00130$
      0002EE 80 1A            [24]  661 	sjmp	00131$
      0002F0                        662 00130$:
      0002F0 E5*00            [12]  663 	mov	a,_bp
      0002F2 24 FC            [12]  664 	add	a,#0xfc
      0002F4 F8               [12]  665 	mov	r0,a
      0002F5 E6               [12]  666 	mov	a,@r0
      0002F6 C0 E0            [24]  667 	push	acc
      0002F8 08               [12]  668 	inc	r0
      0002F9 E6               [12]  669 	mov	a,@r0
      0002FA C0 E0            [24]  670 	push	acc
      0002FC E5*00            [12]  671 	mov	a,_bp
      0002FE 24 F9            [12]  672 	add	a,#0xf9
      000300 F8               [12]  673 	mov	r0,a
      000301 86 82            [24]  674 	mov	dpl,@r0
      000303 08               [12]  675 	inc	r0
      000304 86 83            [24]  676 	mov	dph,@r0
      000306 08               [12]  677 	inc	r0
      000307 86 F0            [24]  678 	mov	b,@r0
      000309 22               [24]  679 	ret
      00030A                        680 00131$:
      00030A AD 82            [24]  681 	mov	r5,dpl
      00030C AE 83            [24]  682 	mov	r6,dph
      00030E E5 81            [12]  683 	mov	a,sp
      000310 24 FC            [12]  684 	add	a,#0xfc
      000312 F5 81            [12]  685 	mov	sp,a
      000314 D0 03            [24]  686 	pop	ar3
      000316 D0 04            [24]  687 	pop	ar4
      000318 8D 02            [24]  688 	mov	ar2,r5
      00031A 8E 07            [24]  689 	mov	ar7,r6
                                    690 ;	stack.c:38: if (r <= 0) break;
      00031C C3               [12]  691 	clr	c
      00031D E4               [12]  692 	clr	a
      00031E 9A               [12]  693 	subb	a,r2
      00031F 74 80            [12]  694 	mov	a,#(0x00 ^ 0x80)
      000321 8F F0            [24]  695 	mov	b,r7
      000323 63 F0 80         [24]  696 	xrl	b,#0x80
      000326 95 F0            [12]  697 	subb	a,b
      000328 D0 04            [24]  698 	pop	ar4
      00032A D0 03            [24]  699 	pop	ar3
      00032C 50 08            [24]  700 	jnc	00105$
                                    701 ;	stack.c:36: for (j = s->p, r = 0; j >= 0; j--) {
      00032E 1B               [12]  702 	dec	r3
      00032F BB FF 01         [24]  703 	cjne	r3,#0xff,00133$
      000332 1C               [12]  704 	dec	r4
      000333                        705 00133$:
      000333 02r02rA2         [24]  706 	ljmp	00107$
      000336                        707 00105$:
                                    708 ;	stack.c:41: return r;
      000336 8A 82            [24]  709 	mov	dpl,r2
      000338 8F 83            [24]  710 	mov	dph,r7
      00033A                        711 00109$:
                                    712 ;	stack.c:42: }
      00033A 85*00 81         [24]  713 	mov	sp,_bp
      00033D D0*00            [24]  714 	pop	_bp
      00033F 22               [24]  715 	ret
                                    716 	.area CSEG    (CODE)
                                    717 	.area CONST   (CODE)
                                    718 	.area XINIT   (CODE)
                                    719 	.area CABS    (ABS,CODE)
